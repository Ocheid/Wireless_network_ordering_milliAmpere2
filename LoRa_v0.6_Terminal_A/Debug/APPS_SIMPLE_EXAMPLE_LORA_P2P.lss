
APPS_SIMPLE_EXAMPLE_LORA_P2P.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00019540  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00019540  00019540  00029540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000090  20000000  00019548  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .lpram        00000000  30000000  30000000  00030090  2**0
                  CONTENTS
  4 .bss          00003624  20000090  000195d8  00030090  2**3
                  ALLOC
  5 .stack        00002004  200036b4  0001cbfc  00030090  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
  7 .comment      0000008c  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
  8 .debug_info   000a4c8c  00000000  00000000  00030144  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000e0a3  00000000  00000000  000d4dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001fc06  00000000  00000000  000e2e73  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001a20  00000000  00000000  00102a79  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002638  00000000  00000000  00104499  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000341ea  00000000  00000000  00106ad1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003926d  00000000  00000000  0013acbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b5acd  00000000  00000000  00173f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005630  00000000  00000000  002299f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b8 56 00 20 b5 76 00 00 b1 76 00 00 b1 76 00 00     .V. .v...v...v..
	...
      2c:	b1 76 00 00 00 00 00 00 00 00 00 00 b1 76 00 00     .v...........v..
      3c:	b1 76 00 00 b1 76 00 00 b1 76 00 00 ed 51 00 00     .v...v...v...Q..
      4c:	a9 4d 00 00 b1 76 00 00 b1 76 00 00 b1 76 00 00     .M...v...v...v..
      5c:	b1 76 00 00 c5 5c 00 00 d5 5c 00 00 e5 5c 00 00     .v...\...\...\..
      6c:	f5 5c 00 00 05 5d 00 00 15 5d 00 00 b1 76 00 00     .\...]...]...v..
      7c:	b1 76 00 00 b1 76 00 00 85 72 00 00 95 72 00 00     .v...v...r...r..
      8c:	b1 76 00 00 b1 76 00 00 a5 72 00 00 b1 76 00 00     .v...v...r...v..
      9c:	b1 76 00 00 b1 76 00 00 b1 76 00 00 21 4d 00 00     .v...v...v..!M..
      ac:	b1 76 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .v..............
	...

00000400 <__d_nv_mem_start>:
     400:	ffffffff 	.word	0xffffffff
     404:	ffffffff 	.word	0xffffffff
     408:	ffffffff 	.word	0xffffffff
     40c:	ffffffff 	.word	0xffffffff
     410:	ffffffff 	.word	0xffffffff
     414:	ffffffff 	.word	0xffffffff
     418:	ffffffff 	.word	0xffffffff
     41c:	ffffffff 	.word	0xffffffff
     420:	ffffffff 	.word	0xffffffff
     424:	ffffffff 	.word	0xffffffff
     428:	ffffffff 	.word	0xffffffff
     42c:	ffffffff 	.word	0xffffffff
     430:	ffffffff 	.word	0xffffffff
     434:	ffffffff 	.word	0xffffffff
     438:	ffffffff 	.word	0xffffffff
     43c:	ffffffff 	.word	0xffffffff
     440:	ffffffff 	.word	0xffffffff
     444:	ffffffff 	.word	0xffffffff
     448:	ffffffff 	.word	0xffffffff
     44c:	ffffffff 	.word	0xffffffff
     450:	ffffffff 	.word	0xffffffff
     454:	ffffffff 	.word	0xffffffff
     458:	ffffffff 	.word	0xffffffff
     45c:	ffffffff 	.word	0xffffffff
     460:	ffffffff 	.word	0xffffffff
     464:	ffffffff 	.word	0xffffffff
     468:	ffffffff 	.word	0xffffffff
     46c:	ffffffff 	.word	0xffffffff
     470:	ffffffff 	.word	0xffffffff
     474:	ffffffff 	.word	0xffffffff
     478:	ffffffff 	.word	0xffffffff
     47c:	ffffffff 	.word	0xffffffff
     480:	ffffffff 	.word	0xffffffff
     484:	ffffffff 	.word	0xffffffff
     488:	ffffffff 	.word	0xffffffff
     48c:	ffffffff 	.word	0xffffffff
     490:	ffffffff 	.word	0xffffffff
     494:	ffffffff 	.word	0xffffffff
     498:	ffffffff 	.word	0xffffffff
     49c:	ffffffff 	.word	0xffffffff
     4a0:	ffffffff 	.word	0xffffffff
     4a4:	ffffffff 	.word	0xffffffff
     4a8:	ffffffff 	.word	0xffffffff
     4ac:	ffffffff 	.word	0xffffffff
     4b0:	ffffffff 	.word	0xffffffff
     4b4:	ffffffff 	.word	0xffffffff
     4b8:	ffffffff 	.word	0xffffffff
     4bc:	ffffffff 	.word	0xffffffff
     4c0:	ffffffff 	.word	0xffffffff
     4c4:	ffffffff 	.word	0xffffffff
     4c8:	ffffffff 	.word	0xffffffff
     4cc:	ffffffff 	.word	0xffffffff
     4d0:	ffffffff 	.word	0xffffffff
     4d4:	ffffffff 	.word	0xffffffff
     4d8:	ffffffff 	.word	0xffffffff
     4dc:	ffffffff 	.word	0xffffffff
     4e0:	ffffffff 	.word	0xffffffff
     4e4:	ffffffff 	.word	0xffffffff
     4e8:	ffffffff 	.word	0xffffffff
     4ec:	ffffffff 	.word	0xffffffff
     4f0:	ffffffff 	.word	0xffffffff
     4f4:	ffffffff 	.word	0xffffffff
     4f8:	ffffffff 	.word	0xffffffff
     4fc:	ffffffff 	.word	0xffffffff
     500:	ffffffff 	.word	0xffffffff
     504:	ffffffff 	.word	0xffffffff
     508:	ffffffff 	.word	0xffffffff
     50c:	ffffffff 	.word	0xffffffff
     510:	ffffffff 	.word	0xffffffff
     514:	ffffffff 	.word	0xffffffff
     518:	ffffffff 	.word	0xffffffff
     51c:	ffffffff 	.word	0xffffffff
     520:	ffffffff 	.word	0xffffffff
     524:	ffffffff 	.word	0xffffffff
     528:	ffffffff 	.word	0xffffffff
     52c:	ffffffff 	.word	0xffffffff
     530:	ffffffff 	.word	0xffffffff
     534:	ffffffff 	.word	0xffffffff
     538:	ffffffff 	.word	0xffffffff
     53c:	ffffffff 	.word	0xffffffff
     540:	ffffffff 	.word	0xffffffff
     544:	ffffffff 	.word	0xffffffff
     548:	ffffffff 	.word	0xffffffff
     54c:	ffffffff 	.word	0xffffffff
     550:	ffffffff 	.word	0xffffffff
     554:	ffffffff 	.word	0xffffffff
     558:	ffffffff 	.word	0xffffffff
     55c:	ffffffff 	.word	0xffffffff
     560:	ffffffff 	.word	0xffffffff
     564:	ffffffff 	.word	0xffffffff
     568:	ffffffff 	.word	0xffffffff
     56c:	ffffffff 	.word	0xffffffff
     570:	ffffffff 	.word	0xffffffff
     574:	ffffffff 	.word	0xffffffff
     578:	ffffffff 	.word	0xffffffff
     57c:	ffffffff 	.word	0xffffffff
     580:	ffffffff 	.word	0xffffffff
     584:	ffffffff 	.word	0xffffffff
     588:	ffffffff 	.word	0xffffffff
     58c:	ffffffff 	.word	0xffffffff
     590:	ffffffff 	.word	0xffffffff
     594:	ffffffff 	.word	0xffffffff
     598:	ffffffff 	.word	0xffffffff
     59c:	ffffffff 	.word	0xffffffff
     5a0:	ffffffff 	.word	0xffffffff
     5a4:	ffffffff 	.word	0xffffffff
     5a8:	ffffffff 	.word	0xffffffff
     5ac:	ffffffff 	.word	0xffffffff
     5b0:	ffffffff 	.word	0xffffffff
     5b4:	ffffffff 	.word	0xffffffff
     5b8:	ffffffff 	.word	0xffffffff
     5bc:	ffffffff 	.word	0xffffffff
     5c0:	ffffffff 	.word	0xffffffff
     5c4:	ffffffff 	.word	0xffffffff
     5c8:	ffffffff 	.word	0xffffffff
     5cc:	ffffffff 	.word	0xffffffff
     5d0:	ffffffff 	.word	0xffffffff
     5d4:	ffffffff 	.word	0xffffffff
     5d8:	ffffffff 	.word	0xffffffff
     5dc:	ffffffff 	.word	0xffffffff
     5e0:	ffffffff 	.word	0xffffffff
     5e4:	ffffffff 	.word	0xffffffff
     5e8:	ffffffff 	.word	0xffffffff
     5ec:	ffffffff 	.word	0xffffffff
     5f0:	ffffffff 	.word	0xffffffff
     5f4:	ffffffff 	.word	0xffffffff
     5f8:	ffffffff 	.word	0xffffffff
     5fc:	ffffffff 	.word	0xffffffff
     600:	ffffffff 	.word	0xffffffff
     604:	ffffffff 	.word	0xffffffff
     608:	ffffffff 	.word	0xffffffff
     60c:	ffffffff 	.word	0xffffffff
     610:	ffffffff 	.word	0xffffffff
     614:	ffffffff 	.word	0xffffffff
     618:	ffffffff 	.word	0xffffffff
     61c:	ffffffff 	.word	0xffffffff
     620:	ffffffff 	.word	0xffffffff
     624:	ffffffff 	.word	0xffffffff
     628:	ffffffff 	.word	0xffffffff
     62c:	ffffffff 	.word	0xffffffff
     630:	ffffffff 	.word	0xffffffff
     634:	ffffffff 	.word	0xffffffff
     638:	ffffffff 	.word	0xffffffff
     63c:	ffffffff 	.word	0xffffffff
     640:	ffffffff 	.word	0xffffffff
     644:	ffffffff 	.word	0xffffffff
     648:	ffffffff 	.word	0xffffffff
     64c:	ffffffff 	.word	0xffffffff
     650:	ffffffff 	.word	0xffffffff
     654:	ffffffff 	.word	0xffffffff
     658:	ffffffff 	.word	0xffffffff
     65c:	ffffffff 	.word	0xffffffff
     660:	ffffffff 	.word	0xffffffff
     664:	ffffffff 	.word	0xffffffff
     668:	ffffffff 	.word	0xffffffff
     66c:	ffffffff 	.word	0xffffffff
     670:	ffffffff 	.word	0xffffffff
     674:	ffffffff 	.word	0xffffffff
     678:	ffffffff 	.word	0xffffffff
     67c:	ffffffff 	.word	0xffffffff
     680:	ffffffff 	.word	0xffffffff
     684:	ffffffff 	.word	0xffffffff
     688:	ffffffff 	.word	0xffffffff
     68c:	ffffffff 	.word	0xffffffff
     690:	ffffffff 	.word	0xffffffff
     694:	ffffffff 	.word	0xffffffff
     698:	ffffffff 	.word	0xffffffff
     69c:	ffffffff 	.word	0xffffffff
     6a0:	ffffffff 	.word	0xffffffff
     6a4:	ffffffff 	.word	0xffffffff
     6a8:	ffffffff 	.word	0xffffffff
     6ac:	ffffffff 	.word	0xffffffff
     6b0:	ffffffff 	.word	0xffffffff
     6b4:	ffffffff 	.word	0xffffffff
     6b8:	ffffffff 	.word	0xffffffff
     6bc:	ffffffff 	.word	0xffffffff
     6c0:	ffffffff 	.word	0xffffffff
     6c4:	ffffffff 	.word	0xffffffff
     6c8:	ffffffff 	.word	0xffffffff
     6cc:	ffffffff 	.word	0xffffffff
     6d0:	ffffffff 	.word	0xffffffff
     6d4:	ffffffff 	.word	0xffffffff
     6d8:	ffffffff 	.word	0xffffffff
     6dc:	ffffffff 	.word	0xffffffff
     6e0:	ffffffff 	.word	0xffffffff
     6e4:	ffffffff 	.word	0xffffffff
     6e8:	ffffffff 	.word	0xffffffff
     6ec:	ffffffff 	.word	0xffffffff
     6f0:	ffffffff 	.word	0xffffffff
     6f4:	ffffffff 	.word	0xffffffff
     6f8:	ffffffff 	.word	0xffffffff
     6fc:	ffffffff 	.word	0xffffffff
     700:	ffffffff 	.word	0xffffffff
     704:	ffffffff 	.word	0xffffffff
     708:	ffffffff 	.word	0xffffffff
     70c:	ffffffff 	.word	0xffffffff
     710:	ffffffff 	.word	0xffffffff
     714:	ffffffff 	.word	0xffffffff
     718:	ffffffff 	.word	0xffffffff
     71c:	ffffffff 	.word	0xffffffff
     720:	ffffffff 	.word	0xffffffff
     724:	ffffffff 	.word	0xffffffff
     728:	ffffffff 	.word	0xffffffff
     72c:	ffffffff 	.word	0xffffffff
     730:	ffffffff 	.word	0xffffffff
     734:	ffffffff 	.word	0xffffffff
     738:	ffffffff 	.word	0xffffffff
     73c:	ffffffff 	.word	0xffffffff
     740:	ffffffff 	.word	0xffffffff
     744:	ffffffff 	.word	0xffffffff
     748:	ffffffff 	.word	0xffffffff
     74c:	ffffffff 	.word	0xffffffff
     750:	ffffffff 	.word	0xffffffff
     754:	ffffffff 	.word	0xffffffff
     758:	ffffffff 	.word	0xffffffff
     75c:	ffffffff 	.word	0xffffffff
     760:	ffffffff 	.word	0xffffffff
     764:	ffffffff 	.word	0xffffffff
     768:	ffffffff 	.word	0xffffffff
     76c:	ffffffff 	.word	0xffffffff
     770:	ffffffff 	.word	0xffffffff
     774:	ffffffff 	.word	0xffffffff
     778:	ffffffff 	.word	0xffffffff
     77c:	ffffffff 	.word	0xffffffff
     780:	ffffffff 	.word	0xffffffff
     784:	ffffffff 	.word	0xffffffff
     788:	ffffffff 	.word	0xffffffff
     78c:	ffffffff 	.word	0xffffffff
     790:	ffffffff 	.word	0xffffffff
     794:	ffffffff 	.word	0xffffffff
     798:	ffffffff 	.word	0xffffffff
     79c:	ffffffff 	.word	0xffffffff
     7a0:	ffffffff 	.word	0xffffffff
     7a4:	ffffffff 	.word	0xffffffff
     7a8:	ffffffff 	.word	0xffffffff
     7ac:	ffffffff 	.word	0xffffffff
     7b0:	ffffffff 	.word	0xffffffff
     7b4:	ffffffff 	.word	0xffffffff
     7b8:	ffffffff 	.word	0xffffffff
     7bc:	ffffffff 	.word	0xffffffff
     7c0:	ffffffff 	.word	0xffffffff
     7c4:	ffffffff 	.word	0xffffffff
     7c8:	ffffffff 	.word	0xffffffff
     7cc:	ffffffff 	.word	0xffffffff
     7d0:	ffffffff 	.word	0xffffffff
     7d4:	ffffffff 	.word	0xffffffff
     7d8:	ffffffff 	.word	0xffffffff
     7dc:	ffffffff 	.word	0xffffffff
     7e0:	ffffffff 	.word	0xffffffff
     7e4:	ffffffff 	.word	0xffffffff
     7e8:	ffffffff 	.word	0xffffffff
     7ec:	ffffffff 	.word	0xffffffff
     7f0:	ffffffff 	.word	0xffffffff
     7f4:	ffffffff 	.word	0xffffffff
     7f8:	ffffffff 	.word	0xffffffff
     7fc:	ffffffff 	.word	0xffffffff
     800:	ffffffff 	.word	0xffffffff
     804:	ffffffff 	.word	0xffffffff
     808:	ffffffff 	.word	0xffffffff
     80c:	ffffffff 	.word	0xffffffff
     810:	ffffffff 	.word	0xffffffff
     814:	ffffffff 	.word	0xffffffff
     818:	ffffffff 	.word	0xffffffff
     81c:	ffffffff 	.word	0xffffffff
     820:	ffffffff 	.word	0xffffffff
     824:	ffffffff 	.word	0xffffffff
     828:	ffffffff 	.word	0xffffffff
     82c:	ffffffff 	.word	0xffffffff
     830:	ffffffff 	.word	0xffffffff
     834:	ffffffff 	.word	0xffffffff
     838:	ffffffff 	.word	0xffffffff
     83c:	ffffffff 	.word	0xffffffff
     840:	ffffffff 	.word	0xffffffff
     844:	ffffffff 	.word	0xffffffff
     848:	ffffffff 	.word	0xffffffff
     84c:	ffffffff 	.word	0xffffffff
     850:	ffffffff 	.word	0xffffffff
     854:	ffffffff 	.word	0xffffffff
     858:	ffffffff 	.word	0xffffffff
     85c:	ffffffff 	.word	0xffffffff
     860:	ffffffff 	.word	0xffffffff
     864:	ffffffff 	.word	0xffffffff
     868:	ffffffff 	.word	0xffffffff
     86c:	ffffffff 	.word	0xffffffff
     870:	ffffffff 	.word	0xffffffff
     874:	ffffffff 	.word	0xffffffff
     878:	ffffffff 	.word	0xffffffff
     87c:	ffffffff 	.word	0xffffffff
     880:	ffffffff 	.word	0xffffffff
     884:	ffffffff 	.word	0xffffffff
     888:	ffffffff 	.word	0xffffffff
     88c:	ffffffff 	.word	0xffffffff
     890:	ffffffff 	.word	0xffffffff
     894:	ffffffff 	.word	0xffffffff
     898:	ffffffff 	.word	0xffffffff
     89c:	ffffffff 	.word	0xffffffff
     8a0:	ffffffff 	.word	0xffffffff
     8a4:	ffffffff 	.word	0xffffffff
     8a8:	ffffffff 	.word	0xffffffff
     8ac:	ffffffff 	.word	0xffffffff
     8b0:	ffffffff 	.word	0xffffffff
     8b4:	ffffffff 	.word	0xffffffff
     8b8:	ffffffff 	.word	0xffffffff
     8bc:	ffffffff 	.word	0xffffffff
     8c0:	ffffffff 	.word	0xffffffff
     8c4:	ffffffff 	.word	0xffffffff
     8c8:	ffffffff 	.word	0xffffffff
     8cc:	ffffffff 	.word	0xffffffff
     8d0:	ffffffff 	.word	0xffffffff
     8d4:	ffffffff 	.word	0xffffffff
     8d8:	ffffffff 	.word	0xffffffff
     8dc:	ffffffff 	.word	0xffffffff
     8e0:	ffffffff 	.word	0xffffffff
     8e4:	ffffffff 	.word	0xffffffff
     8e8:	ffffffff 	.word	0xffffffff
     8ec:	ffffffff 	.word	0xffffffff
     8f0:	ffffffff 	.word	0xffffffff
     8f4:	ffffffff 	.word	0xffffffff
     8f8:	ffffffff 	.word	0xffffffff
     8fc:	ffffffff 	.word	0xffffffff
     900:	ffffffff 	.word	0xffffffff
     904:	ffffffff 	.word	0xffffffff
     908:	ffffffff 	.word	0xffffffff
     90c:	ffffffff 	.word	0xffffffff
     910:	ffffffff 	.word	0xffffffff
     914:	ffffffff 	.word	0xffffffff
     918:	ffffffff 	.word	0xffffffff
     91c:	ffffffff 	.word	0xffffffff
     920:	ffffffff 	.word	0xffffffff
     924:	ffffffff 	.word	0xffffffff
     928:	ffffffff 	.word	0xffffffff
     92c:	ffffffff 	.word	0xffffffff
     930:	ffffffff 	.word	0xffffffff
     934:	ffffffff 	.word	0xffffffff
     938:	ffffffff 	.word	0xffffffff
     93c:	ffffffff 	.word	0xffffffff
     940:	ffffffff 	.word	0xffffffff
     944:	ffffffff 	.word	0xffffffff
     948:	ffffffff 	.word	0xffffffff
     94c:	ffffffff 	.word	0xffffffff
     950:	ffffffff 	.word	0xffffffff
     954:	ffffffff 	.word	0xffffffff
     958:	ffffffff 	.word	0xffffffff
     95c:	ffffffff 	.word	0xffffffff
     960:	ffffffff 	.word	0xffffffff
     964:	ffffffff 	.word	0xffffffff
     968:	ffffffff 	.word	0xffffffff
     96c:	ffffffff 	.word	0xffffffff
     970:	ffffffff 	.word	0xffffffff
     974:	ffffffff 	.word	0xffffffff
     978:	ffffffff 	.word	0xffffffff
     97c:	ffffffff 	.word	0xffffffff
     980:	ffffffff 	.word	0xffffffff
     984:	ffffffff 	.word	0xffffffff
     988:	ffffffff 	.word	0xffffffff
     98c:	ffffffff 	.word	0xffffffff
     990:	ffffffff 	.word	0xffffffff
     994:	ffffffff 	.word	0xffffffff
     998:	ffffffff 	.word	0xffffffff
     99c:	ffffffff 	.word	0xffffffff
     9a0:	ffffffff 	.word	0xffffffff
     9a4:	ffffffff 	.word	0xffffffff
     9a8:	ffffffff 	.word	0xffffffff
     9ac:	ffffffff 	.word	0xffffffff
     9b0:	ffffffff 	.word	0xffffffff
     9b4:	ffffffff 	.word	0xffffffff
     9b8:	ffffffff 	.word	0xffffffff
     9bc:	ffffffff 	.word	0xffffffff
     9c0:	ffffffff 	.word	0xffffffff
     9c4:	ffffffff 	.word	0xffffffff
     9c8:	ffffffff 	.word	0xffffffff
     9cc:	ffffffff 	.word	0xffffffff
     9d0:	ffffffff 	.word	0xffffffff
     9d4:	ffffffff 	.word	0xffffffff
     9d8:	ffffffff 	.word	0xffffffff
     9dc:	ffffffff 	.word	0xffffffff
     9e0:	ffffffff 	.word	0xffffffff
     9e4:	ffffffff 	.word	0xffffffff
     9e8:	ffffffff 	.word	0xffffffff
     9ec:	ffffffff 	.word	0xffffffff
     9f0:	ffffffff 	.word	0xffffffff
     9f4:	ffffffff 	.word	0xffffffff
     9f8:	ffffffff 	.word	0xffffffff
     9fc:	ffffffff 	.word	0xffffffff
     a00:	ffffffff 	.word	0xffffffff
     a04:	ffffffff 	.word	0xffffffff
     a08:	ffffffff 	.word	0xffffffff
     a0c:	ffffffff 	.word	0xffffffff
     a10:	ffffffff 	.word	0xffffffff
     a14:	ffffffff 	.word	0xffffffff
     a18:	ffffffff 	.word	0xffffffff
     a1c:	ffffffff 	.word	0xffffffff
     a20:	ffffffff 	.word	0xffffffff
     a24:	ffffffff 	.word	0xffffffff
     a28:	ffffffff 	.word	0xffffffff
     a2c:	ffffffff 	.word	0xffffffff
     a30:	ffffffff 	.word	0xffffffff
     a34:	ffffffff 	.word	0xffffffff
     a38:	ffffffff 	.word	0xffffffff
     a3c:	ffffffff 	.word	0xffffffff
     a40:	ffffffff 	.word	0xffffffff
     a44:	ffffffff 	.word	0xffffffff
     a48:	ffffffff 	.word	0xffffffff
     a4c:	ffffffff 	.word	0xffffffff
     a50:	ffffffff 	.word	0xffffffff
     a54:	ffffffff 	.word	0xffffffff
     a58:	ffffffff 	.word	0xffffffff
     a5c:	ffffffff 	.word	0xffffffff
     a60:	ffffffff 	.word	0xffffffff
     a64:	ffffffff 	.word	0xffffffff
     a68:	ffffffff 	.word	0xffffffff
     a6c:	ffffffff 	.word	0xffffffff
     a70:	ffffffff 	.word	0xffffffff
     a74:	ffffffff 	.word	0xffffffff
     a78:	ffffffff 	.word	0xffffffff
     a7c:	ffffffff 	.word	0xffffffff
     a80:	ffffffff 	.word	0xffffffff
     a84:	ffffffff 	.word	0xffffffff
     a88:	ffffffff 	.word	0xffffffff
     a8c:	ffffffff 	.word	0xffffffff
     a90:	ffffffff 	.word	0xffffffff
     a94:	ffffffff 	.word	0xffffffff
     a98:	ffffffff 	.word	0xffffffff
     a9c:	ffffffff 	.word	0xffffffff
     aa0:	ffffffff 	.word	0xffffffff
     aa4:	ffffffff 	.word	0xffffffff
     aa8:	ffffffff 	.word	0xffffffff
     aac:	ffffffff 	.word	0xffffffff
     ab0:	ffffffff 	.word	0xffffffff
     ab4:	ffffffff 	.word	0xffffffff
     ab8:	ffffffff 	.word	0xffffffff
     abc:	ffffffff 	.word	0xffffffff
     ac0:	ffffffff 	.word	0xffffffff
     ac4:	ffffffff 	.word	0xffffffff
     ac8:	ffffffff 	.word	0xffffffff
     acc:	ffffffff 	.word	0xffffffff
     ad0:	ffffffff 	.word	0xffffffff
     ad4:	ffffffff 	.word	0xffffffff
     ad8:	ffffffff 	.word	0xffffffff
     adc:	ffffffff 	.word	0xffffffff
     ae0:	ffffffff 	.word	0xffffffff
     ae4:	ffffffff 	.word	0xffffffff
     ae8:	ffffffff 	.word	0xffffffff
     aec:	ffffffff 	.word	0xffffffff
     af0:	ffffffff 	.word	0xffffffff
     af4:	ffffffff 	.word	0xffffffff
     af8:	ffffffff 	.word	0xffffffff
     afc:	ffffffff 	.word	0xffffffff
     b00:	ffffffff 	.word	0xffffffff
     b04:	ffffffff 	.word	0xffffffff
     b08:	ffffffff 	.word	0xffffffff
     b0c:	ffffffff 	.word	0xffffffff
     b10:	ffffffff 	.word	0xffffffff
     b14:	ffffffff 	.word	0xffffffff
     b18:	ffffffff 	.word	0xffffffff
     b1c:	ffffffff 	.word	0xffffffff
     b20:	ffffffff 	.word	0xffffffff
     b24:	ffffffff 	.word	0xffffffff
     b28:	ffffffff 	.word	0xffffffff
     b2c:	ffffffff 	.word	0xffffffff
     b30:	ffffffff 	.word	0xffffffff
     b34:	ffffffff 	.word	0xffffffff
     b38:	ffffffff 	.word	0xffffffff
     b3c:	ffffffff 	.word	0xffffffff
     b40:	ffffffff 	.word	0xffffffff
     b44:	ffffffff 	.word	0xffffffff
     b48:	ffffffff 	.word	0xffffffff
     b4c:	ffffffff 	.word	0xffffffff
     b50:	ffffffff 	.word	0xffffffff
     b54:	ffffffff 	.word	0xffffffff
     b58:	ffffffff 	.word	0xffffffff
     b5c:	ffffffff 	.word	0xffffffff
     b60:	ffffffff 	.word	0xffffffff
     b64:	ffffffff 	.word	0xffffffff
     b68:	ffffffff 	.word	0xffffffff
     b6c:	ffffffff 	.word	0xffffffff
     b70:	ffffffff 	.word	0xffffffff
     b74:	ffffffff 	.word	0xffffffff
     b78:	ffffffff 	.word	0xffffffff
     b7c:	ffffffff 	.word	0xffffffff
     b80:	ffffffff 	.word	0xffffffff
     b84:	ffffffff 	.word	0xffffffff
     b88:	ffffffff 	.word	0xffffffff
     b8c:	ffffffff 	.word	0xffffffff
     b90:	ffffffff 	.word	0xffffffff
     b94:	ffffffff 	.word	0xffffffff
     b98:	ffffffff 	.word	0xffffffff
     b9c:	ffffffff 	.word	0xffffffff
     ba0:	ffffffff 	.word	0xffffffff
     ba4:	ffffffff 	.word	0xffffffff
     ba8:	ffffffff 	.word	0xffffffff
     bac:	ffffffff 	.word	0xffffffff
     bb0:	ffffffff 	.word	0xffffffff
     bb4:	ffffffff 	.word	0xffffffff
     bb8:	ffffffff 	.word	0xffffffff
     bbc:	ffffffff 	.word	0xffffffff
     bc0:	ffffffff 	.word	0xffffffff
     bc4:	ffffffff 	.word	0xffffffff
     bc8:	ffffffff 	.word	0xffffffff
     bcc:	ffffffff 	.word	0xffffffff
     bd0:	ffffffff 	.word	0xffffffff
     bd4:	ffffffff 	.word	0xffffffff
     bd8:	ffffffff 	.word	0xffffffff
     bdc:	ffffffff 	.word	0xffffffff
     be0:	ffffffff 	.word	0xffffffff
     be4:	ffffffff 	.word	0xffffffff
     be8:	ffffffff 	.word	0xffffffff
     bec:	ffffffff 	.word	0xffffffff
     bf0:	ffffffff 	.word	0xffffffff
     bf4:	ffffffff 	.word	0xffffffff
     bf8:	ffffffff 	.word	0xffffffff
     bfc:	ffffffff 	.word	0xffffffff
     c00:	ffffffff 	.word	0xffffffff
     c04:	ffffffff 	.word	0xffffffff
     c08:	ffffffff 	.word	0xffffffff
     c0c:	ffffffff 	.word	0xffffffff
     c10:	ffffffff 	.word	0xffffffff
     c14:	ffffffff 	.word	0xffffffff
     c18:	ffffffff 	.word	0xffffffff
     c1c:	ffffffff 	.word	0xffffffff
     c20:	ffffffff 	.word	0xffffffff
     c24:	ffffffff 	.word	0xffffffff
     c28:	ffffffff 	.word	0xffffffff
     c2c:	ffffffff 	.word	0xffffffff
     c30:	ffffffff 	.word	0xffffffff
     c34:	ffffffff 	.word	0xffffffff
     c38:	ffffffff 	.word	0xffffffff
     c3c:	ffffffff 	.word	0xffffffff
     c40:	ffffffff 	.word	0xffffffff
     c44:	ffffffff 	.word	0xffffffff
     c48:	ffffffff 	.word	0xffffffff
     c4c:	ffffffff 	.word	0xffffffff
     c50:	ffffffff 	.word	0xffffffff
     c54:	ffffffff 	.word	0xffffffff
     c58:	ffffffff 	.word	0xffffffff
     c5c:	ffffffff 	.word	0xffffffff
     c60:	ffffffff 	.word	0xffffffff
     c64:	ffffffff 	.word	0xffffffff
     c68:	ffffffff 	.word	0xffffffff
     c6c:	ffffffff 	.word	0xffffffff
     c70:	ffffffff 	.word	0xffffffff
     c74:	ffffffff 	.word	0xffffffff
     c78:	ffffffff 	.word	0xffffffff
     c7c:	ffffffff 	.word	0xffffffff
     c80:	ffffffff 	.word	0xffffffff
     c84:	ffffffff 	.word	0xffffffff
     c88:	ffffffff 	.word	0xffffffff
     c8c:	ffffffff 	.word	0xffffffff
     c90:	ffffffff 	.word	0xffffffff
     c94:	ffffffff 	.word	0xffffffff
     c98:	ffffffff 	.word	0xffffffff
     c9c:	ffffffff 	.word	0xffffffff
     ca0:	ffffffff 	.word	0xffffffff
     ca4:	ffffffff 	.word	0xffffffff
     ca8:	ffffffff 	.word	0xffffffff
     cac:	ffffffff 	.word	0xffffffff
     cb0:	ffffffff 	.word	0xffffffff
     cb4:	ffffffff 	.word	0xffffffff
     cb8:	ffffffff 	.word	0xffffffff
     cbc:	ffffffff 	.word	0xffffffff
     cc0:	ffffffff 	.word	0xffffffff
     cc4:	ffffffff 	.word	0xffffffff
     cc8:	ffffffff 	.word	0xffffffff
     ccc:	ffffffff 	.word	0xffffffff
     cd0:	ffffffff 	.word	0xffffffff
     cd4:	ffffffff 	.word	0xffffffff
     cd8:	ffffffff 	.word	0xffffffff
     cdc:	ffffffff 	.word	0xffffffff
     ce0:	ffffffff 	.word	0xffffffff
     ce4:	ffffffff 	.word	0xffffffff
     ce8:	ffffffff 	.word	0xffffffff
     cec:	ffffffff 	.word	0xffffffff
     cf0:	ffffffff 	.word	0xffffffff
     cf4:	ffffffff 	.word	0xffffffff
     cf8:	ffffffff 	.word	0xffffffff
     cfc:	ffffffff 	.word	0xffffffff
     d00:	ffffffff 	.word	0xffffffff
     d04:	ffffffff 	.word	0xffffffff
     d08:	ffffffff 	.word	0xffffffff
     d0c:	ffffffff 	.word	0xffffffff
     d10:	ffffffff 	.word	0xffffffff
     d14:	ffffffff 	.word	0xffffffff
     d18:	ffffffff 	.word	0xffffffff
     d1c:	ffffffff 	.word	0xffffffff
     d20:	ffffffff 	.word	0xffffffff
     d24:	ffffffff 	.word	0xffffffff
     d28:	ffffffff 	.word	0xffffffff
     d2c:	ffffffff 	.word	0xffffffff
     d30:	ffffffff 	.word	0xffffffff
     d34:	ffffffff 	.word	0xffffffff
     d38:	ffffffff 	.word	0xffffffff
     d3c:	ffffffff 	.word	0xffffffff
     d40:	ffffffff 	.word	0xffffffff
     d44:	ffffffff 	.word	0xffffffff
     d48:	ffffffff 	.word	0xffffffff
     d4c:	ffffffff 	.word	0xffffffff
     d50:	ffffffff 	.word	0xffffffff
     d54:	ffffffff 	.word	0xffffffff
     d58:	ffffffff 	.word	0xffffffff
     d5c:	ffffffff 	.word	0xffffffff
     d60:	ffffffff 	.word	0xffffffff
     d64:	ffffffff 	.word	0xffffffff
     d68:	ffffffff 	.word	0xffffffff
     d6c:	ffffffff 	.word	0xffffffff
     d70:	ffffffff 	.word	0xffffffff
     d74:	ffffffff 	.word	0xffffffff
     d78:	ffffffff 	.word	0xffffffff
     d7c:	ffffffff 	.word	0xffffffff
     d80:	ffffffff 	.word	0xffffffff
     d84:	ffffffff 	.word	0xffffffff
     d88:	ffffffff 	.word	0xffffffff
     d8c:	ffffffff 	.word	0xffffffff
     d90:	ffffffff 	.word	0xffffffff
     d94:	ffffffff 	.word	0xffffffff
     d98:	ffffffff 	.word	0xffffffff
     d9c:	ffffffff 	.word	0xffffffff
     da0:	ffffffff 	.word	0xffffffff
     da4:	ffffffff 	.word	0xffffffff
     da8:	ffffffff 	.word	0xffffffff
     dac:	ffffffff 	.word	0xffffffff
     db0:	ffffffff 	.word	0xffffffff
     db4:	ffffffff 	.word	0xffffffff
     db8:	ffffffff 	.word	0xffffffff
     dbc:	ffffffff 	.word	0xffffffff
     dc0:	ffffffff 	.word	0xffffffff
     dc4:	ffffffff 	.word	0xffffffff
     dc8:	ffffffff 	.word	0xffffffff
     dcc:	ffffffff 	.word	0xffffffff
     dd0:	ffffffff 	.word	0xffffffff
     dd4:	ffffffff 	.word	0xffffffff
     dd8:	ffffffff 	.word	0xffffffff
     ddc:	ffffffff 	.word	0xffffffff
     de0:	ffffffff 	.word	0xffffffff
     de4:	ffffffff 	.word	0xffffffff
     de8:	ffffffff 	.word	0xffffffff
     dec:	ffffffff 	.word	0xffffffff
     df0:	ffffffff 	.word	0xffffffff
     df4:	ffffffff 	.word	0xffffffff
     df8:	ffffffff 	.word	0xffffffff
     dfc:	ffffffff 	.word	0xffffffff
     e00:	ffffffff 	.word	0xffffffff
     e04:	ffffffff 	.word	0xffffffff
     e08:	ffffffff 	.word	0xffffffff
     e0c:	ffffffff 	.word	0xffffffff
     e10:	ffffffff 	.word	0xffffffff
     e14:	ffffffff 	.word	0xffffffff
     e18:	ffffffff 	.word	0xffffffff
     e1c:	ffffffff 	.word	0xffffffff
     e20:	ffffffff 	.word	0xffffffff
     e24:	ffffffff 	.word	0xffffffff
     e28:	ffffffff 	.word	0xffffffff
     e2c:	ffffffff 	.word	0xffffffff
     e30:	ffffffff 	.word	0xffffffff
     e34:	ffffffff 	.word	0xffffffff
     e38:	ffffffff 	.word	0xffffffff
     e3c:	ffffffff 	.word	0xffffffff
     e40:	ffffffff 	.word	0xffffffff
     e44:	ffffffff 	.word	0xffffffff
     e48:	ffffffff 	.word	0xffffffff
     e4c:	ffffffff 	.word	0xffffffff
     e50:	ffffffff 	.word	0xffffffff
     e54:	ffffffff 	.word	0xffffffff
     e58:	ffffffff 	.word	0xffffffff
     e5c:	ffffffff 	.word	0xffffffff
     e60:	ffffffff 	.word	0xffffffff
     e64:	ffffffff 	.word	0xffffffff
     e68:	ffffffff 	.word	0xffffffff
     e6c:	ffffffff 	.word	0xffffffff
     e70:	ffffffff 	.word	0xffffffff
     e74:	ffffffff 	.word	0xffffffff
     e78:	ffffffff 	.word	0xffffffff
     e7c:	ffffffff 	.word	0xffffffff
     e80:	ffffffff 	.word	0xffffffff
     e84:	ffffffff 	.word	0xffffffff
     e88:	ffffffff 	.word	0xffffffff
     e8c:	ffffffff 	.word	0xffffffff
     e90:	ffffffff 	.word	0xffffffff
     e94:	ffffffff 	.word	0xffffffff
     e98:	ffffffff 	.word	0xffffffff
     e9c:	ffffffff 	.word	0xffffffff
     ea0:	ffffffff 	.word	0xffffffff
     ea4:	ffffffff 	.word	0xffffffff
     ea8:	ffffffff 	.word	0xffffffff
     eac:	ffffffff 	.word	0xffffffff
     eb0:	ffffffff 	.word	0xffffffff
     eb4:	ffffffff 	.word	0xffffffff
     eb8:	ffffffff 	.word	0xffffffff
     ebc:	ffffffff 	.word	0xffffffff
     ec0:	ffffffff 	.word	0xffffffff
     ec4:	ffffffff 	.word	0xffffffff
     ec8:	ffffffff 	.word	0xffffffff
     ecc:	ffffffff 	.word	0xffffffff
     ed0:	ffffffff 	.word	0xffffffff
     ed4:	ffffffff 	.word	0xffffffff
     ed8:	ffffffff 	.word	0xffffffff
     edc:	ffffffff 	.word	0xffffffff
     ee0:	ffffffff 	.word	0xffffffff
     ee4:	ffffffff 	.word	0xffffffff
     ee8:	ffffffff 	.word	0xffffffff
     eec:	ffffffff 	.word	0xffffffff
     ef0:	ffffffff 	.word	0xffffffff
     ef4:	ffffffff 	.word	0xffffffff
     ef8:	ffffffff 	.word	0xffffffff
     efc:	ffffffff 	.word	0xffffffff
     f00:	ffffffff 	.word	0xffffffff
     f04:	ffffffff 	.word	0xffffffff
     f08:	ffffffff 	.word	0xffffffff
     f0c:	ffffffff 	.word	0xffffffff
     f10:	ffffffff 	.word	0xffffffff
     f14:	ffffffff 	.word	0xffffffff
     f18:	ffffffff 	.word	0xffffffff
     f1c:	ffffffff 	.word	0xffffffff
     f20:	ffffffff 	.word	0xffffffff
     f24:	ffffffff 	.word	0xffffffff
     f28:	ffffffff 	.word	0xffffffff
     f2c:	ffffffff 	.word	0xffffffff
     f30:	ffffffff 	.word	0xffffffff
     f34:	ffffffff 	.word	0xffffffff
     f38:	ffffffff 	.word	0xffffffff
     f3c:	ffffffff 	.word	0xffffffff
     f40:	ffffffff 	.word	0xffffffff
     f44:	ffffffff 	.word	0xffffffff
     f48:	ffffffff 	.word	0xffffffff
     f4c:	ffffffff 	.word	0xffffffff
     f50:	ffffffff 	.word	0xffffffff
     f54:	ffffffff 	.word	0xffffffff
     f58:	ffffffff 	.word	0xffffffff
     f5c:	ffffffff 	.word	0xffffffff
     f60:	ffffffff 	.word	0xffffffff
     f64:	ffffffff 	.word	0xffffffff
     f68:	ffffffff 	.word	0xffffffff
     f6c:	ffffffff 	.word	0xffffffff
     f70:	ffffffff 	.word	0xffffffff
     f74:	ffffffff 	.word	0xffffffff
     f78:	ffffffff 	.word	0xffffffff
     f7c:	ffffffff 	.word	0xffffffff
     f80:	ffffffff 	.word	0xffffffff
     f84:	ffffffff 	.word	0xffffffff
     f88:	ffffffff 	.word	0xffffffff
     f8c:	ffffffff 	.word	0xffffffff
     f90:	ffffffff 	.word	0xffffffff
     f94:	ffffffff 	.word	0xffffffff
     f98:	ffffffff 	.word	0xffffffff
     f9c:	ffffffff 	.word	0xffffffff
     fa0:	ffffffff 	.word	0xffffffff
     fa4:	ffffffff 	.word	0xffffffff
     fa8:	ffffffff 	.word	0xffffffff
     fac:	ffffffff 	.word	0xffffffff
     fb0:	ffffffff 	.word	0xffffffff
     fb4:	ffffffff 	.word	0xffffffff
     fb8:	ffffffff 	.word	0xffffffff
     fbc:	ffffffff 	.word	0xffffffff
     fc0:	ffffffff 	.word	0xffffffff
     fc4:	ffffffff 	.word	0xffffffff
     fc8:	ffffffff 	.word	0xffffffff
     fcc:	ffffffff 	.word	0xffffffff
     fd0:	ffffffff 	.word	0xffffffff
     fd4:	ffffffff 	.word	0xffffffff
     fd8:	ffffffff 	.word	0xffffffff
     fdc:	ffffffff 	.word	0xffffffff
     fe0:	ffffffff 	.word	0xffffffff
     fe4:	ffffffff 	.word	0xffffffff
     fe8:	ffffffff 	.word	0xffffffff
     fec:	ffffffff 	.word	0xffffffff
     ff0:	ffffffff 	.word	0xffffffff
     ff4:	ffffffff 	.word	0xffffffff
     ff8:	ffffffff 	.word	0xffffffff
     ffc:	ffffffff 	.word	0xffffffff
    1000:	ffffffff 	.word	0xffffffff
    1004:	ffffffff 	.word	0xffffffff
    1008:	ffffffff 	.word	0xffffffff
    100c:	ffffffff 	.word	0xffffffff
    1010:	ffffffff 	.word	0xffffffff
    1014:	ffffffff 	.word	0xffffffff
    1018:	ffffffff 	.word	0xffffffff
    101c:	ffffffff 	.word	0xffffffff
    1020:	ffffffff 	.word	0xffffffff
    1024:	ffffffff 	.word	0xffffffff
    1028:	ffffffff 	.word	0xffffffff
    102c:	ffffffff 	.word	0xffffffff
    1030:	ffffffff 	.word	0xffffffff
    1034:	ffffffff 	.word	0xffffffff
    1038:	ffffffff 	.word	0xffffffff
    103c:	ffffffff 	.word	0xffffffff
    1040:	ffffffff 	.word	0xffffffff
    1044:	ffffffff 	.word	0xffffffff
    1048:	ffffffff 	.word	0xffffffff
    104c:	ffffffff 	.word	0xffffffff
    1050:	ffffffff 	.word	0xffffffff
    1054:	ffffffff 	.word	0xffffffff
    1058:	ffffffff 	.word	0xffffffff
    105c:	ffffffff 	.word	0xffffffff
    1060:	ffffffff 	.word	0xffffffff
    1064:	ffffffff 	.word	0xffffffff
    1068:	ffffffff 	.word	0xffffffff
    106c:	ffffffff 	.word	0xffffffff
    1070:	ffffffff 	.word	0xffffffff
    1074:	ffffffff 	.word	0xffffffff
    1078:	ffffffff 	.word	0xffffffff
    107c:	ffffffff 	.word	0xffffffff
    1080:	ffffffff 	.word	0xffffffff
    1084:	ffffffff 	.word	0xffffffff
    1088:	ffffffff 	.word	0xffffffff
    108c:	ffffffff 	.word	0xffffffff
    1090:	ffffffff 	.word	0xffffffff
    1094:	ffffffff 	.word	0xffffffff
    1098:	ffffffff 	.word	0xffffffff
    109c:	ffffffff 	.word	0xffffffff
    10a0:	ffffffff 	.word	0xffffffff
    10a4:	ffffffff 	.word	0xffffffff
    10a8:	ffffffff 	.word	0xffffffff
    10ac:	ffffffff 	.word	0xffffffff
    10b0:	ffffffff 	.word	0xffffffff
    10b4:	ffffffff 	.word	0xffffffff
    10b8:	ffffffff 	.word	0xffffffff
    10bc:	ffffffff 	.word	0xffffffff
    10c0:	ffffffff 	.word	0xffffffff
    10c4:	ffffffff 	.word	0xffffffff
    10c8:	ffffffff 	.word	0xffffffff
    10cc:	ffffffff 	.word	0xffffffff
    10d0:	ffffffff 	.word	0xffffffff
    10d4:	ffffffff 	.word	0xffffffff
    10d8:	ffffffff 	.word	0xffffffff
    10dc:	ffffffff 	.word	0xffffffff
    10e0:	ffffffff 	.word	0xffffffff
    10e4:	ffffffff 	.word	0xffffffff
    10e8:	ffffffff 	.word	0xffffffff
    10ec:	ffffffff 	.word	0xffffffff
    10f0:	ffffffff 	.word	0xffffffff
    10f4:	ffffffff 	.word	0xffffffff
    10f8:	ffffffff 	.word	0xffffffff
    10fc:	ffffffff 	.word	0xffffffff
    1100:	ffffffff 	.word	0xffffffff
    1104:	ffffffff 	.word	0xffffffff
    1108:	ffffffff 	.word	0xffffffff
    110c:	ffffffff 	.word	0xffffffff
    1110:	ffffffff 	.word	0xffffffff
    1114:	ffffffff 	.word	0xffffffff
    1118:	ffffffff 	.word	0xffffffff
    111c:	ffffffff 	.word	0xffffffff
    1120:	ffffffff 	.word	0xffffffff
    1124:	ffffffff 	.word	0xffffffff
    1128:	ffffffff 	.word	0xffffffff
    112c:	ffffffff 	.word	0xffffffff
    1130:	ffffffff 	.word	0xffffffff
    1134:	ffffffff 	.word	0xffffffff
    1138:	ffffffff 	.word	0xffffffff
    113c:	ffffffff 	.word	0xffffffff
    1140:	ffffffff 	.word	0xffffffff
    1144:	ffffffff 	.word	0xffffffff
    1148:	ffffffff 	.word	0xffffffff
    114c:	ffffffff 	.word	0xffffffff
    1150:	ffffffff 	.word	0xffffffff
    1154:	ffffffff 	.word	0xffffffff
    1158:	ffffffff 	.word	0xffffffff
    115c:	ffffffff 	.word	0xffffffff
    1160:	ffffffff 	.word	0xffffffff
    1164:	ffffffff 	.word	0xffffffff
    1168:	ffffffff 	.word	0xffffffff
    116c:	ffffffff 	.word	0xffffffff
    1170:	ffffffff 	.word	0xffffffff
    1174:	ffffffff 	.word	0xffffffff
    1178:	ffffffff 	.word	0xffffffff
    117c:	ffffffff 	.word	0xffffffff
    1180:	ffffffff 	.word	0xffffffff
    1184:	ffffffff 	.word	0xffffffff
    1188:	ffffffff 	.word	0xffffffff
    118c:	ffffffff 	.word	0xffffffff
    1190:	ffffffff 	.word	0xffffffff
    1194:	ffffffff 	.word	0xffffffff
    1198:	ffffffff 	.word	0xffffffff
    119c:	ffffffff 	.word	0xffffffff
    11a0:	ffffffff 	.word	0xffffffff
    11a4:	ffffffff 	.word	0xffffffff
    11a8:	ffffffff 	.word	0xffffffff
    11ac:	ffffffff 	.word	0xffffffff
    11b0:	ffffffff 	.word	0xffffffff
    11b4:	ffffffff 	.word	0xffffffff
    11b8:	ffffffff 	.word	0xffffffff
    11bc:	ffffffff 	.word	0xffffffff
    11c0:	ffffffff 	.word	0xffffffff
    11c4:	ffffffff 	.word	0xffffffff
    11c8:	ffffffff 	.word	0xffffffff
    11cc:	ffffffff 	.word	0xffffffff
    11d0:	ffffffff 	.word	0xffffffff
    11d4:	ffffffff 	.word	0xffffffff
    11d8:	ffffffff 	.word	0xffffffff
    11dc:	ffffffff 	.word	0xffffffff
    11e0:	ffffffff 	.word	0xffffffff
    11e4:	ffffffff 	.word	0xffffffff
    11e8:	ffffffff 	.word	0xffffffff
    11ec:	ffffffff 	.word	0xffffffff
    11f0:	ffffffff 	.word	0xffffffff
    11f4:	ffffffff 	.word	0xffffffff
    11f8:	ffffffff 	.word	0xffffffff
    11fc:	ffffffff 	.word	0xffffffff
    1200:	ffffffff 	.word	0xffffffff
    1204:	ffffffff 	.word	0xffffffff
    1208:	ffffffff 	.word	0xffffffff
    120c:	ffffffff 	.word	0xffffffff
    1210:	ffffffff 	.word	0xffffffff
    1214:	ffffffff 	.word	0xffffffff
    1218:	ffffffff 	.word	0xffffffff
    121c:	ffffffff 	.word	0xffffffff
    1220:	ffffffff 	.word	0xffffffff
    1224:	ffffffff 	.word	0xffffffff
    1228:	ffffffff 	.word	0xffffffff
    122c:	ffffffff 	.word	0xffffffff
    1230:	ffffffff 	.word	0xffffffff
    1234:	ffffffff 	.word	0xffffffff
    1238:	ffffffff 	.word	0xffffffff
    123c:	ffffffff 	.word	0xffffffff
    1240:	ffffffff 	.word	0xffffffff
    1244:	ffffffff 	.word	0xffffffff
    1248:	ffffffff 	.word	0xffffffff
    124c:	ffffffff 	.word	0xffffffff
    1250:	ffffffff 	.word	0xffffffff
    1254:	ffffffff 	.word	0xffffffff
    1258:	ffffffff 	.word	0xffffffff
    125c:	ffffffff 	.word	0xffffffff
    1260:	ffffffff 	.word	0xffffffff
    1264:	ffffffff 	.word	0xffffffff
    1268:	ffffffff 	.word	0xffffffff
    126c:	ffffffff 	.word	0xffffffff
    1270:	ffffffff 	.word	0xffffffff
    1274:	ffffffff 	.word	0xffffffff
    1278:	ffffffff 	.word	0xffffffff
    127c:	ffffffff 	.word	0xffffffff
    1280:	ffffffff 	.word	0xffffffff
    1284:	ffffffff 	.word	0xffffffff
    1288:	ffffffff 	.word	0xffffffff
    128c:	ffffffff 	.word	0xffffffff
    1290:	ffffffff 	.word	0xffffffff
    1294:	ffffffff 	.word	0xffffffff
    1298:	ffffffff 	.word	0xffffffff
    129c:	ffffffff 	.word	0xffffffff
    12a0:	ffffffff 	.word	0xffffffff
    12a4:	ffffffff 	.word	0xffffffff
    12a8:	ffffffff 	.word	0xffffffff
    12ac:	ffffffff 	.word	0xffffffff
    12b0:	ffffffff 	.word	0xffffffff
    12b4:	ffffffff 	.word	0xffffffff
    12b8:	ffffffff 	.word	0xffffffff
    12bc:	ffffffff 	.word	0xffffffff
    12c0:	ffffffff 	.word	0xffffffff
    12c4:	ffffffff 	.word	0xffffffff
    12c8:	ffffffff 	.word	0xffffffff
    12cc:	ffffffff 	.word	0xffffffff
    12d0:	ffffffff 	.word	0xffffffff
    12d4:	ffffffff 	.word	0xffffffff
    12d8:	ffffffff 	.word	0xffffffff
    12dc:	ffffffff 	.word	0xffffffff
    12e0:	ffffffff 	.word	0xffffffff
    12e4:	ffffffff 	.word	0xffffffff
    12e8:	ffffffff 	.word	0xffffffff
    12ec:	ffffffff 	.word	0xffffffff
    12f0:	ffffffff 	.word	0xffffffff
    12f4:	ffffffff 	.word	0xffffffff
    12f8:	ffffffff 	.word	0xffffffff
    12fc:	ffffffff 	.word	0xffffffff
    1300:	ffffffff 	.word	0xffffffff
    1304:	ffffffff 	.word	0xffffffff
    1308:	ffffffff 	.word	0xffffffff
    130c:	ffffffff 	.word	0xffffffff
    1310:	ffffffff 	.word	0xffffffff
    1314:	ffffffff 	.word	0xffffffff
    1318:	ffffffff 	.word	0xffffffff
    131c:	ffffffff 	.word	0xffffffff
    1320:	ffffffff 	.word	0xffffffff
    1324:	ffffffff 	.word	0xffffffff
    1328:	ffffffff 	.word	0xffffffff
    132c:	ffffffff 	.word	0xffffffff
    1330:	ffffffff 	.word	0xffffffff
    1334:	ffffffff 	.word	0xffffffff
    1338:	ffffffff 	.word	0xffffffff
    133c:	ffffffff 	.word	0xffffffff
    1340:	ffffffff 	.word	0xffffffff
    1344:	ffffffff 	.word	0xffffffff
    1348:	ffffffff 	.word	0xffffffff
    134c:	ffffffff 	.word	0xffffffff
    1350:	ffffffff 	.word	0xffffffff
    1354:	ffffffff 	.word	0xffffffff
    1358:	ffffffff 	.word	0xffffffff
    135c:	ffffffff 	.word	0xffffffff
    1360:	ffffffff 	.word	0xffffffff
    1364:	ffffffff 	.word	0xffffffff
    1368:	ffffffff 	.word	0xffffffff
    136c:	ffffffff 	.word	0xffffffff
    1370:	ffffffff 	.word	0xffffffff
    1374:	ffffffff 	.word	0xffffffff
    1378:	ffffffff 	.word	0xffffffff
    137c:	ffffffff 	.word	0xffffffff
    1380:	ffffffff 	.word	0xffffffff
    1384:	ffffffff 	.word	0xffffffff
    1388:	ffffffff 	.word	0xffffffff
    138c:	ffffffff 	.word	0xffffffff
    1390:	ffffffff 	.word	0xffffffff
    1394:	ffffffff 	.word	0xffffffff
    1398:	ffffffff 	.word	0xffffffff
    139c:	ffffffff 	.word	0xffffffff
    13a0:	ffffffff 	.word	0xffffffff
    13a4:	ffffffff 	.word	0xffffffff
    13a8:	ffffffff 	.word	0xffffffff
    13ac:	ffffffff 	.word	0xffffffff
    13b0:	ffffffff 	.word	0xffffffff
    13b4:	ffffffff 	.word	0xffffffff
    13b8:	ffffffff 	.word	0xffffffff
    13bc:	ffffffff 	.word	0xffffffff
    13c0:	ffffffff 	.word	0xffffffff
    13c4:	ffffffff 	.word	0xffffffff
    13c8:	ffffffff 	.word	0xffffffff
    13cc:	ffffffff 	.word	0xffffffff
    13d0:	ffffffff 	.word	0xffffffff
    13d4:	ffffffff 	.word	0xffffffff
    13d8:	ffffffff 	.word	0xffffffff
    13dc:	ffffffff 	.word	0xffffffff
    13e0:	ffffffff 	.word	0xffffffff
    13e4:	ffffffff 	.word	0xffffffff
    13e8:	ffffffff 	.word	0xffffffff
    13ec:	ffffffff 	.word	0xffffffff
    13f0:	ffffffff 	.word	0xffffffff
    13f4:	ffffffff 	.word	0xffffffff
    13f8:	ffffffff 	.word	0xffffffff
    13fc:	ffffffff 	.word	0xffffffff
    1400:	ffffffff 	.word	0xffffffff
    1404:	ffffffff 	.word	0xffffffff
    1408:	ffffffff 	.word	0xffffffff
    140c:	ffffffff 	.word	0xffffffff
    1410:	ffffffff 	.word	0xffffffff
    1414:	ffffffff 	.word	0xffffffff
    1418:	ffffffff 	.word	0xffffffff
    141c:	ffffffff 	.word	0xffffffff
    1420:	ffffffff 	.word	0xffffffff
    1424:	ffffffff 	.word	0xffffffff
    1428:	ffffffff 	.word	0xffffffff
    142c:	ffffffff 	.word	0xffffffff
    1430:	ffffffff 	.word	0xffffffff
    1434:	ffffffff 	.word	0xffffffff
    1438:	ffffffff 	.word	0xffffffff
    143c:	ffffffff 	.word	0xffffffff
    1440:	ffffffff 	.word	0xffffffff
    1444:	ffffffff 	.word	0xffffffff
    1448:	ffffffff 	.word	0xffffffff
    144c:	ffffffff 	.word	0xffffffff
    1450:	ffffffff 	.word	0xffffffff
    1454:	ffffffff 	.word	0xffffffff
    1458:	ffffffff 	.word	0xffffffff
    145c:	ffffffff 	.word	0xffffffff
    1460:	ffffffff 	.word	0xffffffff
    1464:	ffffffff 	.word	0xffffffff
    1468:	ffffffff 	.word	0xffffffff
    146c:	ffffffff 	.word	0xffffffff
    1470:	ffffffff 	.word	0xffffffff
    1474:	ffffffff 	.word	0xffffffff
    1478:	ffffffff 	.word	0xffffffff
    147c:	ffffffff 	.word	0xffffffff
    1480:	ffffffff 	.word	0xffffffff
    1484:	ffffffff 	.word	0xffffffff
    1488:	ffffffff 	.word	0xffffffff
    148c:	ffffffff 	.word	0xffffffff
    1490:	ffffffff 	.word	0xffffffff
    1494:	ffffffff 	.word	0xffffffff
    1498:	ffffffff 	.word	0xffffffff
    149c:	ffffffff 	.word	0xffffffff
    14a0:	ffffffff 	.word	0xffffffff
    14a4:	ffffffff 	.word	0xffffffff
    14a8:	ffffffff 	.word	0xffffffff
    14ac:	ffffffff 	.word	0xffffffff
    14b0:	ffffffff 	.word	0xffffffff
    14b4:	ffffffff 	.word	0xffffffff
    14b8:	ffffffff 	.word	0xffffffff
    14bc:	ffffffff 	.word	0xffffffff
    14c0:	ffffffff 	.word	0xffffffff
    14c4:	ffffffff 	.word	0xffffffff
    14c8:	ffffffff 	.word	0xffffffff
    14cc:	ffffffff 	.word	0xffffffff
    14d0:	ffffffff 	.word	0xffffffff
    14d4:	ffffffff 	.word	0xffffffff
    14d8:	ffffffff 	.word	0xffffffff
    14dc:	ffffffff 	.word	0xffffffff
    14e0:	ffffffff 	.word	0xffffffff
    14e4:	ffffffff 	.word	0xffffffff
    14e8:	ffffffff 	.word	0xffffffff
    14ec:	ffffffff 	.word	0xffffffff
    14f0:	ffffffff 	.word	0xffffffff
    14f4:	ffffffff 	.word	0xffffffff
    14f8:	ffffffff 	.word	0xffffffff
    14fc:	ffffffff 	.word	0xffffffff
    1500:	ffffffff 	.word	0xffffffff
    1504:	ffffffff 	.word	0xffffffff
    1508:	ffffffff 	.word	0xffffffff
    150c:	ffffffff 	.word	0xffffffff
    1510:	ffffffff 	.word	0xffffffff
    1514:	ffffffff 	.word	0xffffffff
    1518:	ffffffff 	.word	0xffffffff
    151c:	ffffffff 	.word	0xffffffff
    1520:	ffffffff 	.word	0xffffffff
    1524:	ffffffff 	.word	0xffffffff
    1528:	ffffffff 	.word	0xffffffff
    152c:	ffffffff 	.word	0xffffffff
    1530:	ffffffff 	.word	0xffffffff
    1534:	ffffffff 	.word	0xffffffff
    1538:	ffffffff 	.word	0xffffffff
    153c:	ffffffff 	.word	0xffffffff
    1540:	ffffffff 	.word	0xffffffff
    1544:	ffffffff 	.word	0xffffffff
    1548:	ffffffff 	.word	0xffffffff
    154c:	ffffffff 	.word	0xffffffff
    1550:	ffffffff 	.word	0xffffffff
    1554:	ffffffff 	.word	0xffffffff
    1558:	ffffffff 	.word	0xffffffff
    155c:	ffffffff 	.word	0xffffffff
    1560:	ffffffff 	.word	0xffffffff
    1564:	ffffffff 	.word	0xffffffff
    1568:	ffffffff 	.word	0xffffffff
    156c:	ffffffff 	.word	0xffffffff
    1570:	ffffffff 	.word	0xffffffff
    1574:	ffffffff 	.word	0xffffffff
    1578:	ffffffff 	.word	0xffffffff
    157c:	ffffffff 	.word	0xffffffff
    1580:	ffffffff 	.word	0xffffffff
    1584:	ffffffff 	.word	0xffffffff
    1588:	ffffffff 	.word	0xffffffff
    158c:	ffffffff 	.word	0xffffffff
    1590:	ffffffff 	.word	0xffffffff
    1594:	ffffffff 	.word	0xffffffff
    1598:	ffffffff 	.word	0xffffffff
    159c:	ffffffff 	.word	0xffffffff
    15a0:	ffffffff 	.word	0xffffffff
    15a4:	ffffffff 	.word	0xffffffff
    15a8:	ffffffff 	.word	0xffffffff
    15ac:	ffffffff 	.word	0xffffffff
    15b0:	ffffffff 	.word	0xffffffff
    15b4:	ffffffff 	.word	0xffffffff
    15b8:	ffffffff 	.word	0xffffffff
    15bc:	ffffffff 	.word	0xffffffff
    15c0:	ffffffff 	.word	0xffffffff
    15c4:	ffffffff 	.word	0xffffffff
    15c8:	ffffffff 	.word	0xffffffff
    15cc:	ffffffff 	.word	0xffffffff
    15d0:	ffffffff 	.word	0xffffffff
    15d4:	ffffffff 	.word	0xffffffff
    15d8:	ffffffff 	.word	0xffffffff
    15dc:	ffffffff 	.word	0xffffffff
    15e0:	ffffffff 	.word	0xffffffff
    15e4:	ffffffff 	.word	0xffffffff
    15e8:	ffffffff 	.word	0xffffffff
    15ec:	ffffffff 	.word	0xffffffff
    15f0:	ffffffff 	.word	0xffffffff
    15f4:	ffffffff 	.word	0xffffffff
    15f8:	ffffffff 	.word	0xffffffff
    15fc:	ffffffff 	.word	0xffffffff
    1600:	ffffffff 	.word	0xffffffff
    1604:	ffffffff 	.word	0xffffffff
    1608:	ffffffff 	.word	0xffffffff
    160c:	ffffffff 	.word	0xffffffff
    1610:	ffffffff 	.word	0xffffffff
    1614:	ffffffff 	.word	0xffffffff
    1618:	ffffffff 	.word	0xffffffff
    161c:	ffffffff 	.word	0xffffffff
    1620:	ffffffff 	.word	0xffffffff
    1624:	ffffffff 	.word	0xffffffff
    1628:	ffffffff 	.word	0xffffffff
    162c:	ffffffff 	.word	0xffffffff
    1630:	ffffffff 	.word	0xffffffff
    1634:	ffffffff 	.word	0xffffffff
    1638:	ffffffff 	.word	0xffffffff
    163c:	ffffffff 	.word	0xffffffff
    1640:	ffffffff 	.word	0xffffffff
    1644:	ffffffff 	.word	0xffffffff
    1648:	ffffffff 	.word	0xffffffff
    164c:	ffffffff 	.word	0xffffffff
    1650:	ffffffff 	.word	0xffffffff
    1654:	ffffffff 	.word	0xffffffff
    1658:	ffffffff 	.word	0xffffffff
    165c:	ffffffff 	.word	0xffffffff
    1660:	ffffffff 	.word	0xffffffff
    1664:	ffffffff 	.word	0xffffffff
    1668:	ffffffff 	.word	0xffffffff
    166c:	ffffffff 	.word	0xffffffff
    1670:	ffffffff 	.word	0xffffffff
    1674:	ffffffff 	.word	0xffffffff
    1678:	ffffffff 	.word	0xffffffff
    167c:	ffffffff 	.word	0xffffffff
    1680:	ffffffff 	.word	0xffffffff
    1684:	ffffffff 	.word	0xffffffff
    1688:	ffffffff 	.word	0xffffffff
    168c:	ffffffff 	.word	0xffffffff
    1690:	ffffffff 	.word	0xffffffff
    1694:	ffffffff 	.word	0xffffffff
    1698:	ffffffff 	.word	0xffffffff
    169c:	ffffffff 	.word	0xffffffff
    16a0:	ffffffff 	.word	0xffffffff
    16a4:	ffffffff 	.word	0xffffffff
    16a8:	ffffffff 	.word	0xffffffff
    16ac:	ffffffff 	.word	0xffffffff
    16b0:	ffffffff 	.word	0xffffffff
    16b4:	ffffffff 	.word	0xffffffff
    16b8:	ffffffff 	.word	0xffffffff
    16bc:	ffffffff 	.word	0xffffffff
    16c0:	ffffffff 	.word	0xffffffff
    16c4:	ffffffff 	.word	0xffffffff
    16c8:	ffffffff 	.word	0xffffffff
    16cc:	ffffffff 	.word	0xffffffff
    16d0:	ffffffff 	.word	0xffffffff
    16d4:	ffffffff 	.word	0xffffffff
    16d8:	ffffffff 	.word	0xffffffff
    16dc:	ffffffff 	.word	0xffffffff
    16e0:	ffffffff 	.word	0xffffffff
    16e4:	ffffffff 	.word	0xffffffff
    16e8:	ffffffff 	.word	0xffffffff
    16ec:	ffffffff 	.word	0xffffffff
    16f0:	ffffffff 	.word	0xffffffff
    16f4:	ffffffff 	.word	0xffffffff
    16f8:	ffffffff 	.word	0xffffffff
    16fc:	ffffffff 	.word	0xffffffff
    1700:	ffffffff 	.word	0xffffffff
    1704:	ffffffff 	.word	0xffffffff
    1708:	ffffffff 	.word	0xffffffff
    170c:	ffffffff 	.word	0xffffffff
    1710:	ffffffff 	.word	0xffffffff
    1714:	ffffffff 	.word	0xffffffff
    1718:	ffffffff 	.word	0xffffffff
    171c:	ffffffff 	.word	0xffffffff
    1720:	ffffffff 	.word	0xffffffff
    1724:	ffffffff 	.word	0xffffffff
    1728:	ffffffff 	.word	0xffffffff
    172c:	ffffffff 	.word	0xffffffff
    1730:	ffffffff 	.word	0xffffffff
    1734:	ffffffff 	.word	0xffffffff
    1738:	ffffffff 	.word	0xffffffff
    173c:	ffffffff 	.word	0xffffffff
    1740:	ffffffff 	.word	0xffffffff
    1744:	ffffffff 	.word	0xffffffff
    1748:	ffffffff 	.word	0xffffffff
    174c:	ffffffff 	.word	0xffffffff
    1750:	ffffffff 	.word	0xffffffff
    1754:	ffffffff 	.word	0xffffffff
    1758:	ffffffff 	.word	0xffffffff
    175c:	ffffffff 	.word	0xffffffff
    1760:	ffffffff 	.word	0xffffffff
    1764:	ffffffff 	.word	0xffffffff
    1768:	ffffffff 	.word	0xffffffff
    176c:	ffffffff 	.word	0xffffffff
    1770:	ffffffff 	.word	0xffffffff
    1774:	ffffffff 	.word	0xffffffff
    1778:	ffffffff 	.word	0xffffffff
    177c:	ffffffff 	.word	0xffffffff
    1780:	ffffffff 	.word	0xffffffff
    1784:	ffffffff 	.word	0xffffffff
    1788:	ffffffff 	.word	0xffffffff
    178c:	ffffffff 	.word	0xffffffff
    1790:	ffffffff 	.word	0xffffffff
    1794:	ffffffff 	.word	0xffffffff
    1798:	ffffffff 	.word	0xffffffff
    179c:	ffffffff 	.word	0xffffffff
    17a0:	ffffffff 	.word	0xffffffff
    17a4:	ffffffff 	.word	0xffffffff
    17a8:	ffffffff 	.word	0xffffffff
    17ac:	ffffffff 	.word	0xffffffff
    17b0:	ffffffff 	.word	0xffffffff
    17b4:	ffffffff 	.word	0xffffffff
    17b8:	ffffffff 	.word	0xffffffff
    17bc:	ffffffff 	.word	0xffffffff
    17c0:	ffffffff 	.word	0xffffffff
    17c4:	ffffffff 	.word	0xffffffff
    17c8:	ffffffff 	.word	0xffffffff
    17cc:	ffffffff 	.word	0xffffffff
    17d0:	ffffffff 	.word	0xffffffff
    17d4:	ffffffff 	.word	0xffffffff
    17d8:	ffffffff 	.word	0xffffffff
    17dc:	ffffffff 	.word	0xffffffff
    17e0:	ffffffff 	.word	0xffffffff
    17e4:	ffffffff 	.word	0xffffffff
    17e8:	ffffffff 	.word	0xffffffff
    17ec:	ffffffff 	.word	0xffffffff
    17f0:	ffffffff 	.word	0xffffffff
    17f4:	ffffffff 	.word	0xffffffff
    17f8:	ffffffff 	.word	0xffffffff
    17fc:	ffffffff 	.word	0xffffffff
    1800:	ffffffff 	.word	0xffffffff
    1804:	ffffffff 	.word	0xffffffff
    1808:	ffffffff 	.word	0xffffffff
    180c:	ffffffff 	.word	0xffffffff
    1810:	ffffffff 	.word	0xffffffff
    1814:	ffffffff 	.word	0xffffffff
    1818:	ffffffff 	.word	0xffffffff
    181c:	ffffffff 	.word	0xffffffff
    1820:	ffffffff 	.word	0xffffffff
    1824:	ffffffff 	.word	0xffffffff
    1828:	ffffffff 	.word	0xffffffff
    182c:	ffffffff 	.word	0xffffffff
    1830:	ffffffff 	.word	0xffffffff
    1834:	ffffffff 	.word	0xffffffff
    1838:	ffffffff 	.word	0xffffffff
    183c:	ffffffff 	.word	0xffffffff
    1840:	ffffffff 	.word	0xffffffff
    1844:	ffffffff 	.word	0xffffffff
    1848:	ffffffff 	.word	0xffffffff
    184c:	ffffffff 	.word	0xffffffff
    1850:	ffffffff 	.word	0xffffffff
    1854:	ffffffff 	.word	0xffffffff
    1858:	ffffffff 	.word	0xffffffff
    185c:	ffffffff 	.word	0xffffffff
    1860:	ffffffff 	.word	0xffffffff
    1864:	ffffffff 	.word	0xffffffff
    1868:	ffffffff 	.word	0xffffffff
    186c:	ffffffff 	.word	0xffffffff
    1870:	ffffffff 	.word	0xffffffff
    1874:	ffffffff 	.word	0xffffffff
    1878:	ffffffff 	.word	0xffffffff
    187c:	ffffffff 	.word	0xffffffff
    1880:	ffffffff 	.word	0xffffffff
    1884:	ffffffff 	.word	0xffffffff
    1888:	ffffffff 	.word	0xffffffff
    188c:	ffffffff 	.word	0xffffffff
    1890:	ffffffff 	.word	0xffffffff
    1894:	ffffffff 	.word	0xffffffff
    1898:	ffffffff 	.word	0xffffffff
    189c:	ffffffff 	.word	0xffffffff
    18a0:	ffffffff 	.word	0xffffffff
    18a4:	ffffffff 	.word	0xffffffff
    18a8:	ffffffff 	.word	0xffffffff
    18ac:	ffffffff 	.word	0xffffffff
    18b0:	ffffffff 	.word	0xffffffff
    18b4:	ffffffff 	.word	0xffffffff
    18b8:	ffffffff 	.word	0xffffffff
    18bc:	ffffffff 	.word	0xffffffff
    18c0:	ffffffff 	.word	0xffffffff
    18c4:	ffffffff 	.word	0xffffffff
    18c8:	ffffffff 	.word	0xffffffff
    18cc:	ffffffff 	.word	0xffffffff
    18d0:	ffffffff 	.word	0xffffffff
    18d4:	ffffffff 	.word	0xffffffff
    18d8:	ffffffff 	.word	0xffffffff
    18dc:	ffffffff 	.word	0xffffffff
    18e0:	ffffffff 	.word	0xffffffff
    18e4:	ffffffff 	.word	0xffffffff
    18e8:	ffffffff 	.word	0xffffffff
    18ec:	ffffffff 	.word	0xffffffff
    18f0:	ffffffff 	.word	0xffffffff
    18f4:	ffffffff 	.word	0xffffffff
    18f8:	ffffffff 	.word	0xffffffff
    18fc:	ffffffff 	.word	0xffffffff
    1900:	ffffffff 	.word	0xffffffff
    1904:	ffffffff 	.word	0xffffffff
    1908:	ffffffff 	.word	0xffffffff
    190c:	ffffffff 	.word	0xffffffff
    1910:	ffffffff 	.word	0xffffffff
    1914:	ffffffff 	.word	0xffffffff
    1918:	ffffffff 	.word	0xffffffff
    191c:	ffffffff 	.word	0xffffffff
    1920:	ffffffff 	.word	0xffffffff
    1924:	ffffffff 	.word	0xffffffff
    1928:	ffffffff 	.word	0xffffffff
    192c:	ffffffff 	.word	0xffffffff
    1930:	ffffffff 	.word	0xffffffff
    1934:	ffffffff 	.word	0xffffffff
    1938:	ffffffff 	.word	0xffffffff
    193c:	ffffffff 	.word	0xffffffff
    1940:	ffffffff 	.word	0xffffffff
    1944:	ffffffff 	.word	0xffffffff
    1948:	ffffffff 	.word	0xffffffff
    194c:	ffffffff 	.word	0xffffffff
    1950:	ffffffff 	.word	0xffffffff
    1954:	ffffffff 	.word	0xffffffff
    1958:	ffffffff 	.word	0xffffffff
    195c:	ffffffff 	.word	0xffffffff
    1960:	ffffffff 	.word	0xffffffff
    1964:	ffffffff 	.word	0xffffffff
    1968:	ffffffff 	.word	0xffffffff
    196c:	ffffffff 	.word	0xffffffff
    1970:	ffffffff 	.word	0xffffffff
    1974:	ffffffff 	.word	0xffffffff
    1978:	ffffffff 	.word	0xffffffff
    197c:	ffffffff 	.word	0xffffffff
    1980:	ffffffff 	.word	0xffffffff
    1984:	ffffffff 	.word	0xffffffff
    1988:	ffffffff 	.word	0xffffffff
    198c:	ffffffff 	.word	0xffffffff
    1990:	ffffffff 	.word	0xffffffff
    1994:	ffffffff 	.word	0xffffffff
    1998:	ffffffff 	.word	0xffffffff
    199c:	ffffffff 	.word	0xffffffff
    19a0:	ffffffff 	.word	0xffffffff
    19a4:	ffffffff 	.word	0xffffffff
    19a8:	ffffffff 	.word	0xffffffff
    19ac:	ffffffff 	.word	0xffffffff
    19b0:	ffffffff 	.word	0xffffffff
    19b4:	ffffffff 	.word	0xffffffff
    19b8:	ffffffff 	.word	0xffffffff
    19bc:	ffffffff 	.word	0xffffffff
    19c0:	ffffffff 	.word	0xffffffff
    19c4:	ffffffff 	.word	0xffffffff
    19c8:	ffffffff 	.word	0xffffffff
    19cc:	ffffffff 	.word	0xffffffff
    19d0:	ffffffff 	.word	0xffffffff
    19d4:	ffffffff 	.word	0xffffffff
    19d8:	ffffffff 	.word	0xffffffff
    19dc:	ffffffff 	.word	0xffffffff
    19e0:	ffffffff 	.word	0xffffffff
    19e4:	ffffffff 	.word	0xffffffff
    19e8:	ffffffff 	.word	0xffffffff
    19ec:	ffffffff 	.word	0xffffffff
    19f0:	ffffffff 	.word	0xffffffff
    19f4:	ffffffff 	.word	0xffffffff
    19f8:	ffffffff 	.word	0xffffffff
    19fc:	ffffffff 	.word	0xffffffff
    1a00:	ffffffff 	.word	0xffffffff
    1a04:	ffffffff 	.word	0xffffffff
    1a08:	ffffffff 	.word	0xffffffff
    1a0c:	ffffffff 	.word	0xffffffff
    1a10:	ffffffff 	.word	0xffffffff
    1a14:	ffffffff 	.word	0xffffffff
    1a18:	ffffffff 	.word	0xffffffff
    1a1c:	ffffffff 	.word	0xffffffff
    1a20:	ffffffff 	.word	0xffffffff
    1a24:	ffffffff 	.word	0xffffffff
    1a28:	ffffffff 	.word	0xffffffff
    1a2c:	ffffffff 	.word	0xffffffff
    1a30:	ffffffff 	.word	0xffffffff
    1a34:	ffffffff 	.word	0xffffffff
    1a38:	ffffffff 	.word	0xffffffff
    1a3c:	ffffffff 	.word	0xffffffff
    1a40:	ffffffff 	.word	0xffffffff
    1a44:	ffffffff 	.word	0xffffffff
    1a48:	ffffffff 	.word	0xffffffff
    1a4c:	ffffffff 	.word	0xffffffff
    1a50:	ffffffff 	.word	0xffffffff
    1a54:	ffffffff 	.word	0xffffffff
    1a58:	ffffffff 	.word	0xffffffff
    1a5c:	ffffffff 	.word	0xffffffff
    1a60:	ffffffff 	.word	0xffffffff
    1a64:	ffffffff 	.word	0xffffffff
    1a68:	ffffffff 	.word	0xffffffff
    1a6c:	ffffffff 	.word	0xffffffff
    1a70:	ffffffff 	.word	0xffffffff
    1a74:	ffffffff 	.word	0xffffffff
    1a78:	ffffffff 	.word	0xffffffff
    1a7c:	ffffffff 	.word	0xffffffff
    1a80:	ffffffff 	.word	0xffffffff
    1a84:	ffffffff 	.word	0xffffffff
    1a88:	ffffffff 	.word	0xffffffff
    1a8c:	ffffffff 	.word	0xffffffff
    1a90:	ffffffff 	.word	0xffffffff
    1a94:	ffffffff 	.word	0xffffffff
    1a98:	ffffffff 	.word	0xffffffff
    1a9c:	ffffffff 	.word	0xffffffff
    1aa0:	ffffffff 	.word	0xffffffff
    1aa4:	ffffffff 	.word	0xffffffff
    1aa8:	ffffffff 	.word	0xffffffff
    1aac:	ffffffff 	.word	0xffffffff
    1ab0:	ffffffff 	.word	0xffffffff
    1ab4:	ffffffff 	.word	0xffffffff
    1ab8:	ffffffff 	.word	0xffffffff
    1abc:	ffffffff 	.word	0xffffffff
    1ac0:	ffffffff 	.word	0xffffffff
    1ac4:	ffffffff 	.word	0xffffffff
    1ac8:	ffffffff 	.word	0xffffffff
    1acc:	ffffffff 	.word	0xffffffff
    1ad0:	ffffffff 	.word	0xffffffff
    1ad4:	ffffffff 	.word	0xffffffff
    1ad8:	ffffffff 	.word	0xffffffff
    1adc:	ffffffff 	.word	0xffffffff
    1ae0:	ffffffff 	.word	0xffffffff
    1ae4:	ffffffff 	.word	0xffffffff
    1ae8:	ffffffff 	.word	0xffffffff
    1aec:	ffffffff 	.word	0xffffffff
    1af0:	ffffffff 	.word	0xffffffff
    1af4:	ffffffff 	.word	0xffffffff
    1af8:	ffffffff 	.word	0xffffffff
    1afc:	ffffffff 	.word	0xffffffff
    1b00:	ffffffff 	.word	0xffffffff
    1b04:	ffffffff 	.word	0xffffffff
    1b08:	ffffffff 	.word	0xffffffff
    1b0c:	ffffffff 	.word	0xffffffff
    1b10:	ffffffff 	.word	0xffffffff
    1b14:	ffffffff 	.word	0xffffffff
    1b18:	ffffffff 	.word	0xffffffff
    1b1c:	ffffffff 	.word	0xffffffff
    1b20:	ffffffff 	.word	0xffffffff
    1b24:	ffffffff 	.word	0xffffffff
    1b28:	ffffffff 	.word	0xffffffff
    1b2c:	ffffffff 	.word	0xffffffff
    1b30:	ffffffff 	.word	0xffffffff
    1b34:	ffffffff 	.word	0xffffffff
    1b38:	ffffffff 	.word	0xffffffff
    1b3c:	ffffffff 	.word	0xffffffff
    1b40:	ffffffff 	.word	0xffffffff
    1b44:	ffffffff 	.word	0xffffffff
    1b48:	ffffffff 	.word	0xffffffff
    1b4c:	ffffffff 	.word	0xffffffff
    1b50:	ffffffff 	.word	0xffffffff
    1b54:	ffffffff 	.word	0xffffffff
    1b58:	ffffffff 	.word	0xffffffff
    1b5c:	ffffffff 	.word	0xffffffff
    1b60:	ffffffff 	.word	0xffffffff
    1b64:	ffffffff 	.word	0xffffffff
    1b68:	ffffffff 	.word	0xffffffff
    1b6c:	ffffffff 	.word	0xffffffff
    1b70:	ffffffff 	.word	0xffffffff
    1b74:	ffffffff 	.word	0xffffffff
    1b78:	ffffffff 	.word	0xffffffff
    1b7c:	ffffffff 	.word	0xffffffff
    1b80:	ffffffff 	.word	0xffffffff
    1b84:	ffffffff 	.word	0xffffffff
    1b88:	ffffffff 	.word	0xffffffff
    1b8c:	ffffffff 	.word	0xffffffff
    1b90:	ffffffff 	.word	0xffffffff
    1b94:	ffffffff 	.word	0xffffffff
    1b98:	ffffffff 	.word	0xffffffff
    1b9c:	ffffffff 	.word	0xffffffff
    1ba0:	ffffffff 	.word	0xffffffff
    1ba4:	ffffffff 	.word	0xffffffff
    1ba8:	ffffffff 	.word	0xffffffff
    1bac:	ffffffff 	.word	0xffffffff
    1bb0:	ffffffff 	.word	0xffffffff
    1bb4:	ffffffff 	.word	0xffffffff
    1bb8:	ffffffff 	.word	0xffffffff
    1bbc:	ffffffff 	.word	0xffffffff
    1bc0:	ffffffff 	.word	0xffffffff
    1bc4:	ffffffff 	.word	0xffffffff
    1bc8:	ffffffff 	.word	0xffffffff
    1bcc:	ffffffff 	.word	0xffffffff
    1bd0:	ffffffff 	.word	0xffffffff
    1bd4:	ffffffff 	.word	0xffffffff
    1bd8:	ffffffff 	.word	0xffffffff
    1bdc:	ffffffff 	.word	0xffffffff
    1be0:	ffffffff 	.word	0xffffffff
    1be4:	ffffffff 	.word	0xffffffff
    1be8:	ffffffff 	.word	0xffffffff
    1bec:	ffffffff 	.word	0xffffffff
    1bf0:	ffffffff 	.word	0xffffffff
    1bf4:	ffffffff 	.word	0xffffffff
    1bf8:	ffffffff 	.word	0xffffffff
    1bfc:	ffffffff 	.word	0xffffffff
    1c00:	ffffffff 	.word	0xffffffff
    1c04:	ffffffff 	.word	0xffffffff
    1c08:	ffffffff 	.word	0xffffffff
    1c0c:	ffffffff 	.word	0xffffffff
    1c10:	ffffffff 	.word	0xffffffff
    1c14:	ffffffff 	.word	0xffffffff
    1c18:	ffffffff 	.word	0xffffffff
    1c1c:	ffffffff 	.word	0xffffffff
    1c20:	ffffffff 	.word	0xffffffff
    1c24:	ffffffff 	.word	0xffffffff
    1c28:	ffffffff 	.word	0xffffffff
    1c2c:	ffffffff 	.word	0xffffffff
    1c30:	ffffffff 	.word	0xffffffff
    1c34:	ffffffff 	.word	0xffffffff
    1c38:	ffffffff 	.word	0xffffffff
    1c3c:	ffffffff 	.word	0xffffffff
    1c40:	ffffffff 	.word	0xffffffff
    1c44:	ffffffff 	.word	0xffffffff
    1c48:	ffffffff 	.word	0xffffffff
    1c4c:	ffffffff 	.word	0xffffffff
    1c50:	ffffffff 	.word	0xffffffff
    1c54:	ffffffff 	.word	0xffffffff
    1c58:	ffffffff 	.word	0xffffffff
    1c5c:	ffffffff 	.word	0xffffffff
    1c60:	ffffffff 	.word	0xffffffff
    1c64:	ffffffff 	.word	0xffffffff
    1c68:	ffffffff 	.word	0xffffffff
    1c6c:	ffffffff 	.word	0xffffffff
    1c70:	ffffffff 	.word	0xffffffff
    1c74:	ffffffff 	.word	0xffffffff
    1c78:	ffffffff 	.word	0xffffffff
    1c7c:	ffffffff 	.word	0xffffffff
    1c80:	ffffffff 	.word	0xffffffff
    1c84:	ffffffff 	.word	0xffffffff
    1c88:	ffffffff 	.word	0xffffffff
    1c8c:	ffffffff 	.word	0xffffffff
    1c90:	ffffffff 	.word	0xffffffff
    1c94:	ffffffff 	.word	0xffffffff
    1c98:	ffffffff 	.word	0xffffffff
    1c9c:	ffffffff 	.word	0xffffffff
    1ca0:	ffffffff 	.word	0xffffffff
    1ca4:	ffffffff 	.word	0xffffffff
    1ca8:	ffffffff 	.word	0xffffffff
    1cac:	ffffffff 	.word	0xffffffff
    1cb0:	ffffffff 	.word	0xffffffff
    1cb4:	ffffffff 	.word	0xffffffff
    1cb8:	ffffffff 	.word	0xffffffff
    1cbc:	ffffffff 	.word	0xffffffff
    1cc0:	ffffffff 	.word	0xffffffff
    1cc4:	ffffffff 	.word	0xffffffff
    1cc8:	ffffffff 	.word	0xffffffff
    1ccc:	ffffffff 	.word	0xffffffff
    1cd0:	ffffffff 	.word	0xffffffff
    1cd4:	ffffffff 	.word	0xffffffff
    1cd8:	ffffffff 	.word	0xffffffff
    1cdc:	ffffffff 	.word	0xffffffff
    1ce0:	ffffffff 	.word	0xffffffff
    1ce4:	ffffffff 	.word	0xffffffff
    1ce8:	ffffffff 	.word	0xffffffff
    1cec:	ffffffff 	.word	0xffffffff
    1cf0:	ffffffff 	.word	0xffffffff
    1cf4:	ffffffff 	.word	0xffffffff
    1cf8:	ffffffff 	.word	0xffffffff
    1cfc:	ffffffff 	.word	0xffffffff
    1d00:	ffffffff 	.word	0xffffffff
    1d04:	ffffffff 	.word	0xffffffff
    1d08:	ffffffff 	.word	0xffffffff
    1d0c:	ffffffff 	.word	0xffffffff
    1d10:	ffffffff 	.word	0xffffffff
    1d14:	ffffffff 	.word	0xffffffff
    1d18:	ffffffff 	.word	0xffffffff
    1d1c:	ffffffff 	.word	0xffffffff
    1d20:	ffffffff 	.word	0xffffffff
    1d24:	ffffffff 	.word	0xffffffff
    1d28:	ffffffff 	.word	0xffffffff
    1d2c:	ffffffff 	.word	0xffffffff
    1d30:	ffffffff 	.word	0xffffffff
    1d34:	ffffffff 	.word	0xffffffff
    1d38:	ffffffff 	.word	0xffffffff
    1d3c:	ffffffff 	.word	0xffffffff
    1d40:	ffffffff 	.word	0xffffffff
    1d44:	ffffffff 	.word	0xffffffff
    1d48:	ffffffff 	.word	0xffffffff
    1d4c:	ffffffff 	.word	0xffffffff
    1d50:	ffffffff 	.word	0xffffffff
    1d54:	ffffffff 	.word	0xffffffff
    1d58:	ffffffff 	.word	0xffffffff
    1d5c:	ffffffff 	.word	0xffffffff
    1d60:	ffffffff 	.word	0xffffffff
    1d64:	ffffffff 	.word	0xffffffff
    1d68:	ffffffff 	.word	0xffffffff
    1d6c:	ffffffff 	.word	0xffffffff
    1d70:	ffffffff 	.word	0xffffffff
    1d74:	ffffffff 	.word	0xffffffff
    1d78:	ffffffff 	.word	0xffffffff
    1d7c:	ffffffff 	.word	0xffffffff
    1d80:	ffffffff 	.word	0xffffffff
    1d84:	ffffffff 	.word	0xffffffff
    1d88:	ffffffff 	.word	0xffffffff
    1d8c:	ffffffff 	.word	0xffffffff
    1d90:	ffffffff 	.word	0xffffffff
    1d94:	ffffffff 	.word	0xffffffff
    1d98:	ffffffff 	.word	0xffffffff
    1d9c:	ffffffff 	.word	0xffffffff
    1da0:	ffffffff 	.word	0xffffffff
    1da4:	ffffffff 	.word	0xffffffff
    1da8:	ffffffff 	.word	0xffffffff
    1dac:	ffffffff 	.word	0xffffffff
    1db0:	ffffffff 	.word	0xffffffff
    1db4:	ffffffff 	.word	0xffffffff
    1db8:	ffffffff 	.word	0xffffffff
    1dbc:	ffffffff 	.word	0xffffffff
    1dc0:	ffffffff 	.word	0xffffffff
    1dc4:	ffffffff 	.word	0xffffffff
    1dc8:	ffffffff 	.word	0xffffffff
    1dcc:	ffffffff 	.word	0xffffffff
    1dd0:	ffffffff 	.word	0xffffffff
    1dd4:	ffffffff 	.word	0xffffffff
    1dd8:	ffffffff 	.word	0xffffffff
    1ddc:	ffffffff 	.word	0xffffffff
    1de0:	ffffffff 	.word	0xffffffff
    1de4:	ffffffff 	.word	0xffffffff
    1de8:	ffffffff 	.word	0xffffffff
    1dec:	ffffffff 	.word	0xffffffff
    1df0:	ffffffff 	.word	0xffffffff
    1df4:	ffffffff 	.word	0xffffffff
    1df8:	ffffffff 	.word	0xffffffff
    1dfc:	ffffffff 	.word	0xffffffff
    1e00:	ffffffff 	.word	0xffffffff
    1e04:	ffffffff 	.word	0xffffffff
    1e08:	ffffffff 	.word	0xffffffff
    1e0c:	ffffffff 	.word	0xffffffff
    1e10:	ffffffff 	.word	0xffffffff
    1e14:	ffffffff 	.word	0xffffffff
    1e18:	ffffffff 	.word	0xffffffff
    1e1c:	ffffffff 	.word	0xffffffff
    1e20:	ffffffff 	.word	0xffffffff
    1e24:	ffffffff 	.word	0xffffffff
    1e28:	ffffffff 	.word	0xffffffff
    1e2c:	ffffffff 	.word	0xffffffff
    1e30:	ffffffff 	.word	0xffffffff
    1e34:	ffffffff 	.word	0xffffffff
    1e38:	ffffffff 	.word	0xffffffff
    1e3c:	ffffffff 	.word	0xffffffff
    1e40:	ffffffff 	.word	0xffffffff
    1e44:	ffffffff 	.word	0xffffffff
    1e48:	ffffffff 	.word	0xffffffff
    1e4c:	ffffffff 	.word	0xffffffff
    1e50:	ffffffff 	.word	0xffffffff
    1e54:	ffffffff 	.word	0xffffffff
    1e58:	ffffffff 	.word	0xffffffff
    1e5c:	ffffffff 	.word	0xffffffff
    1e60:	ffffffff 	.word	0xffffffff
    1e64:	ffffffff 	.word	0xffffffff
    1e68:	ffffffff 	.word	0xffffffff
    1e6c:	ffffffff 	.word	0xffffffff
    1e70:	ffffffff 	.word	0xffffffff
    1e74:	ffffffff 	.word	0xffffffff
    1e78:	ffffffff 	.word	0xffffffff
    1e7c:	ffffffff 	.word	0xffffffff
    1e80:	ffffffff 	.word	0xffffffff
    1e84:	ffffffff 	.word	0xffffffff
    1e88:	ffffffff 	.word	0xffffffff
    1e8c:	ffffffff 	.word	0xffffffff
    1e90:	ffffffff 	.word	0xffffffff
    1e94:	ffffffff 	.word	0xffffffff
    1e98:	ffffffff 	.word	0xffffffff
    1e9c:	ffffffff 	.word	0xffffffff
    1ea0:	ffffffff 	.word	0xffffffff
    1ea4:	ffffffff 	.word	0xffffffff
    1ea8:	ffffffff 	.word	0xffffffff
    1eac:	ffffffff 	.word	0xffffffff
    1eb0:	ffffffff 	.word	0xffffffff
    1eb4:	ffffffff 	.word	0xffffffff
    1eb8:	ffffffff 	.word	0xffffffff
    1ebc:	ffffffff 	.word	0xffffffff
    1ec0:	ffffffff 	.word	0xffffffff
    1ec4:	ffffffff 	.word	0xffffffff
    1ec8:	ffffffff 	.word	0xffffffff
    1ecc:	ffffffff 	.word	0xffffffff
    1ed0:	ffffffff 	.word	0xffffffff
    1ed4:	ffffffff 	.word	0xffffffff
    1ed8:	ffffffff 	.word	0xffffffff
    1edc:	ffffffff 	.word	0xffffffff
    1ee0:	ffffffff 	.word	0xffffffff
    1ee4:	ffffffff 	.word	0xffffffff
    1ee8:	ffffffff 	.word	0xffffffff
    1eec:	ffffffff 	.word	0xffffffff
    1ef0:	ffffffff 	.word	0xffffffff
    1ef4:	ffffffff 	.word	0xffffffff
    1ef8:	ffffffff 	.word	0xffffffff
    1efc:	ffffffff 	.word	0xffffffff
    1f00:	ffffffff 	.word	0xffffffff
    1f04:	ffffffff 	.word	0xffffffff
    1f08:	ffffffff 	.word	0xffffffff
    1f0c:	ffffffff 	.word	0xffffffff
    1f10:	ffffffff 	.word	0xffffffff
    1f14:	ffffffff 	.word	0xffffffff
    1f18:	ffffffff 	.word	0xffffffff
    1f1c:	ffffffff 	.word	0xffffffff
    1f20:	ffffffff 	.word	0xffffffff
    1f24:	ffffffff 	.word	0xffffffff
    1f28:	ffffffff 	.word	0xffffffff
    1f2c:	ffffffff 	.word	0xffffffff
    1f30:	ffffffff 	.word	0xffffffff
    1f34:	ffffffff 	.word	0xffffffff
    1f38:	ffffffff 	.word	0xffffffff
    1f3c:	ffffffff 	.word	0xffffffff
    1f40:	ffffffff 	.word	0xffffffff
    1f44:	ffffffff 	.word	0xffffffff
    1f48:	ffffffff 	.word	0xffffffff
    1f4c:	ffffffff 	.word	0xffffffff
    1f50:	ffffffff 	.word	0xffffffff
    1f54:	ffffffff 	.word	0xffffffff
    1f58:	ffffffff 	.word	0xffffffff
    1f5c:	ffffffff 	.word	0xffffffff
    1f60:	ffffffff 	.word	0xffffffff
    1f64:	ffffffff 	.word	0xffffffff
    1f68:	ffffffff 	.word	0xffffffff
    1f6c:	ffffffff 	.word	0xffffffff
    1f70:	ffffffff 	.word	0xffffffff
    1f74:	ffffffff 	.word	0xffffffff
    1f78:	ffffffff 	.word	0xffffffff
    1f7c:	ffffffff 	.word	0xffffffff
    1f80:	ffffffff 	.word	0xffffffff
    1f84:	ffffffff 	.word	0xffffffff
    1f88:	ffffffff 	.word	0xffffffff
    1f8c:	ffffffff 	.word	0xffffffff
    1f90:	ffffffff 	.word	0xffffffff
    1f94:	ffffffff 	.word	0xffffffff
    1f98:	ffffffff 	.word	0xffffffff
    1f9c:	ffffffff 	.word	0xffffffff
    1fa0:	ffffffff 	.word	0xffffffff
    1fa4:	ffffffff 	.word	0xffffffff
    1fa8:	ffffffff 	.word	0xffffffff
    1fac:	ffffffff 	.word	0xffffffff
    1fb0:	ffffffff 	.word	0xffffffff
    1fb4:	ffffffff 	.word	0xffffffff
    1fb8:	ffffffff 	.word	0xffffffff
    1fbc:	ffffffff 	.word	0xffffffff
    1fc0:	ffffffff 	.word	0xffffffff
    1fc4:	ffffffff 	.word	0xffffffff
    1fc8:	ffffffff 	.word	0xffffffff
    1fcc:	ffffffff 	.word	0xffffffff
    1fd0:	ffffffff 	.word	0xffffffff
    1fd4:	ffffffff 	.word	0xffffffff
    1fd8:	ffffffff 	.word	0xffffffff
    1fdc:	ffffffff 	.word	0xffffffff
    1fe0:	ffffffff 	.word	0xffffffff
    1fe4:	ffffffff 	.word	0xffffffff
    1fe8:	ffffffff 	.word	0xffffffff
    1fec:	ffffffff 	.word	0xffffffff
    1ff0:	ffffffff 	.word	0xffffffff
    1ff4:	ffffffff 	.word	0xffffffff
    1ff8:	ffffffff 	.word	0xffffffff
    1ffc:	ffffffff 	.word	0xffffffff
    2000:	ffffffff 	.word	0xffffffff
    2004:	ffffffff 	.word	0xffffffff
    2008:	ffffffff 	.word	0xffffffff
    200c:	ffffffff 	.word	0xffffffff
    2010:	ffffffff 	.word	0xffffffff
    2014:	ffffffff 	.word	0xffffffff
    2018:	ffffffff 	.word	0xffffffff
    201c:	ffffffff 	.word	0xffffffff
    2020:	ffffffff 	.word	0xffffffff
    2024:	ffffffff 	.word	0xffffffff
    2028:	ffffffff 	.word	0xffffffff
    202c:	ffffffff 	.word	0xffffffff
    2030:	ffffffff 	.word	0xffffffff
    2034:	ffffffff 	.word	0xffffffff
    2038:	ffffffff 	.word	0xffffffff
    203c:	ffffffff 	.word	0xffffffff
    2040:	ffffffff 	.word	0xffffffff
    2044:	ffffffff 	.word	0xffffffff
    2048:	ffffffff 	.word	0xffffffff
    204c:	ffffffff 	.word	0xffffffff
    2050:	ffffffff 	.word	0xffffffff
    2054:	ffffffff 	.word	0xffffffff
    2058:	ffffffff 	.word	0xffffffff
    205c:	ffffffff 	.word	0xffffffff
    2060:	ffffffff 	.word	0xffffffff
    2064:	ffffffff 	.word	0xffffffff
    2068:	ffffffff 	.word	0xffffffff
    206c:	ffffffff 	.word	0xffffffff
    2070:	ffffffff 	.word	0xffffffff
    2074:	ffffffff 	.word	0xffffffff
    2078:	ffffffff 	.word	0xffffffff
    207c:	ffffffff 	.word	0xffffffff
    2080:	ffffffff 	.word	0xffffffff
    2084:	ffffffff 	.word	0xffffffff
    2088:	ffffffff 	.word	0xffffffff
    208c:	ffffffff 	.word	0xffffffff
    2090:	ffffffff 	.word	0xffffffff
    2094:	ffffffff 	.word	0xffffffff
    2098:	ffffffff 	.word	0xffffffff
    209c:	ffffffff 	.word	0xffffffff
    20a0:	ffffffff 	.word	0xffffffff
    20a4:	ffffffff 	.word	0xffffffff
    20a8:	ffffffff 	.word	0xffffffff
    20ac:	ffffffff 	.word	0xffffffff
    20b0:	ffffffff 	.word	0xffffffff
    20b4:	ffffffff 	.word	0xffffffff
    20b8:	ffffffff 	.word	0xffffffff
    20bc:	ffffffff 	.word	0xffffffff
    20c0:	ffffffff 	.word	0xffffffff
    20c4:	ffffffff 	.word	0xffffffff
    20c8:	ffffffff 	.word	0xffffffff
    20cc:	ffffffff 	.word	0xffffffff
    20d0:	ffffffff 	.word	0xffffffff
    20d4:	ffffffff 	.word	0xffffffff
    20d8:	ffffffff 	.word	0xffffffff
    20dc:	ffffffff 	.word	0xffffffff
    20e0:	ffffffff 	.word	0xffffffff
    20e4:	ffffffff 	.word	0xffffffff
    20e8:	ffffffff 	.word	0xffffffff
    20ec:	ffffffff 	.word	0xffffffff
    20f0:	ffffffff 	.word	0xffffffff
    20f4:	ffffffff 	.word	0xffffffff
    20f8:	ffffffff 	.word	0xffffffff
    20fc:	ffffffff 	.word	0xffffffff
    2100:	ffffffff 	.word	0xffffffff
    2104:	ffffffff 	.word	0xffffffff
    2108:	ffffffff 	.word	0xffffffff
    210c:	ffffffff 	.word	0xffffffff
    2110:	ffffffff 	.word	0xffffffff
    2114:	ffffffff 	.word	0xffffffff
    2118:	ffffffff 	.word	0xffffffff
    211c:	ffffffff 	.word	0xffffffff
    2120:	ffffffff 	.word	0xffffffff
    2124:	ffffffff 	.word	0xffffffff
    2128:	ffffffff 	.word	0xffffffff
    212c:	ffffffff 	.word	0xffffffff
    2130:	ffffffff 	.word	0xffffffff
    2134:	ffffffff 	.word	0xffffffff
    2138:	ffffffff 	.word	0xffffffff
    213c:	ffffffff 	.word	0xffffffff
    2140:	ffffffff 	.word	0xffffffff
    2144:	ffffffff 	.word	0xffffffff
    2148:	ffffffff 	.word	0xffffffff
    214c:	ffffffff 	.word	0xffffffff
    2150:	ffffffff 	.word	0xffffffff
    2154:	ffffffff 	.word	0xffffffff
    2158:	ffffffff 	.word	0xffffffff
    215c:	ffffffff 	.word	0xffffffff
    2160:	ffffffff 	.word	0xffffffff
    2164:	ffffffff 	.word	0xffffffff
    2168:	ffffffff 	.word	0xffffffff
    216c:	ffffffff 	.word	0xffffffff
    2170:	ffffffff 	.word	0xffffffff
    2174:	ffffffff 	.word	0xffffffff
    2178:	ffffffff 	.word	0xffffffff
    217c:	ffffffff 	.word	0xffffffff
    2180:	ffffffff 	.word	0xffffffff
    2184:	ffffffff 	.word	0xffffffff
    2188:	ffffffff 	.word	0xffffffff
    218c:	ffffffff 	.word	0xffffffff
    2190:	ffffffff 	.word	0xffffffff
    2194:	ffffffff 	.word	0xffffffff
    2198:	ffffffff 	.word	0xffffffff
    219c:	ffffffff 	.word	0xffffffff
    21a0:	ffffffff 	.word	0xffffffff
    21a4:	ffffffff 	.word	0xffffffff
    21a8:	ffffffff 	.word	0xffffffff
    21ac:	ffffffff 	.word	0xffffffff
    21b0:	ffffffff 	.word	0xffffffff
    21b4:	ffffffff 	.word	0xffffffff
    21b8:	ffffffff 	.word	0xffffffff
    21bc:	ffffffff 	.word	0xffffffff
    21c0:	ffffffff 	.word	0xffffffff
    21c4:	ffffffff 	.word	0xffffffff
    21c8:	ffffffff 	.word	0xffffffff
    21cc:	ffffffff 	.word	0xffffffff
    21d0:	ffffffff 	.word	0xffffffff
    21d4:	ffffffff 	.word	0xffffffff
    21d8:	ffffffff 	.word	0xffffffff
    21dc:	ffffffff 	.word	0xffffffff
    21e0:	ffffffff 	.word	0xffffffff
    21e4:	ffffffff 	.word	0xffffffff
    21e8:	ffffffff 	.word	0xffffffff
    21ec:	ffffffff 	.word	0xffffffff
    21f0:	ffffffff 	.word	0xffffffff
    21f4:	ffffffff 	.word	0xffffffff
    21f8:	ffffffff 	.word	0xffffffff
    21fc:	ffffffff 	.word	0xffffffff
    2200:	ffffffff 	.word	0xffffffff
    2204:	ffffffff 	.word	0xffffffff
    2208:	ffffffff 	.word	0xffffffff
    220c:	ffffffff 	.word	0xffffffff
    2210:	ffffffff 	.word	0xffffffff
    2214:	ffffffff 	.word	0xffffffff
    2218:	ffffffff 	.word	0xffffffff
    221c:	ffffffff 	.word	0xffffffff
    2220:	ffffffff 	.word	0xffffffff
    2224:	ffffffff 	.word	0xffffffff
    2228:	ffffffff 	.word	0xffffffff
    222c:	ffffffff 	.word	0xffffffff
    2230:	ffffffff 	.word	0xffffffff
    2234:	ffffffff 	.word	0xffffffff
    2238:	ffffffff 	.word	0xffffffff
    223c:	ffffffff 	.word	0xffffffff
    2240:	ffffffff 	.word	0xffffffff
    2244:	ffffffff 	.word	0xffffffff
    2248:	ffffffff 	.word	0xffffffff
    224c:	ffffffff 	.word	0xffffffff
    2250:	ffffffff 	.word	0xffffffff
    2254:	ffffffff 	.word	0xffffffff
    2258:	ffffffff 	.word	0xffffffff
    225c:	ffffffff 	.word	0xffffffff
    2260:	ffffffff 	.word	0xffffffff
    2264:	ffffffff 	.word	0xffffffff
    2268:	ffffffff 	.word	0xffffffff
    226c:	ffffffff 	.word	0xffffffff
    2270:	ffffffff 	.word	0xffffffff
    2274:	ffffffff 	.word	0xffffffff
    2278:	ffffffff 	.word	0xffffffff
    227c:	ffffffff 	.word	0xffffffff
    2280:	ffffffff 	.word	0xffffffff
    2284:	ffffffff 	.word	0xffffffff
    2288:	ffffffff 	.word	0xffffffff
    228c:	ffffffff 	.word	0xffffffff
    2290:	ffffffff 	.word	0xffffffff
    2294:	ffffffff 	.word	0xffffffff
    2298:	ffffffff 	.word	0xffffffff
    229c:	ffffffff 	.word	0xffffffff
    22a0:	ffffffff 	.word	0xffffffff
    22a4:	ffffffff 	.word	0xffffffff
    22a8:	ffffffff 	.word	0xffffffff
    22ac:	ffffffff 	.word	0xffffffff
    22b0:	ffffffff 	.word	0xffffffff
    22b4:	ffffffff 	.word	0xffffffff
    22b8:	ffffffff 	.word	0xffffffff
    22bc:	ffffffff 	.word	0xffffffff
    22c0:	ffffffff 	.word	0xffffffff
    22c4:	ffffffff 	.word	0xffffffff
    22c8:	ffffffff 	.word	0xffffffff
    22cc:	ffffffff 	.word	0xffffffff
    22d0:	ffffffff 	.word	0xffffffff
    22d4:	ffffffff 	.word	0xffffffff
    22d8:	ffffffff 	.word	0xffffffff
    22dc:	ffffffff 	.word	0xffffffff
    22e0:	ffffffff 	.word	0xffffffff
    22e4:	ffffffff 	.word	0xffffffff
    22e8:	ffffffff 	.word	0xffffffff
    22ec:	ffffffff 	.word	0xffffffff
    22f0:	ffffffff 	.word	0xffffffff
    22f4:	ffffffff 	.word	0xffffffff
    22f8:	ffffffff 	.word	0xffffffff
    22fc:	ffffffff 	.word	0xffffffff
    2300:	ffffffff 	.word	0xffffffff
    2304:	ffffffff 	.word	0xffffffff
    2308:	ffffffff 	.word	0xffffffff
    230c:	ffffffff 	.word	0xffffffff
    2310:	ffffffff 	.word	0xffffffff
    2314:	ffffffff 	.word	0xffffffff
    2318:	ffffffff 	.word	0xffffffff
    231c:	ffffffff 	.word	0xffffffff
    2320:	ffffffff 	.word	0xffffffff
    2324:	ffffffff 	.word	0xffffffff
    2328:	ffffffff 	.word	0xffffffff
    232c:	ffffffff 	.word	0xffffffff
    2330:	ffffffff 	.word	0xffffffff
    2334:	ffffffff 	.word	0xffffffff
    2338:	ffffffff 	.word	0xffffffff
    233c:	ffffffff 	.word	0xffffffff
    2340:	ffffffff 	.word	0xffffffff
    2344:	ffffffff 	.word	0xffffffff
    2348:	ffffffff 	.word	0xffffffff
    234c:	ffffffff 	.word	0xffffffff
    2350:	ffffffff 	.word	0xffffffff
    2354:	ffffffff 	.word	0xffffffff
    2358:	ffffffff 	.word	0xffffffff
    235c:	ffffffff 	.word	0xffffffff
    2360:	ffffffff 	.word	0xffffffff
    2364:	ffffffff 	.word	0xffffffff
    2368:	ffffffff 	.word	0xffffffff
    236c:	ffffffff 	.word	0xffffffff
    2370:	ffffffff 	.word	0xffffffff
    2374:	ffffffff 	.word	0xffffffff
    2378:	ffffffff 	.word	0xffffffff
    237c:	ffffffff 	.word	0xffffffff
    2380:	ffffffff 	.word	0xffffffff
    2384:	ffffffff 	.word	0xffffffff
    2388:	ffffffff 	.word	0xffffffff
    238c:	ffffffff 	.word	0xffffffff
    2390:	ffffffff 	.word	0xffffffff
    2394:	ffffffff 	.word	0xffffffff
    2398:	ffffffff 	.word	0xffffffff
    239c:	ffffffff 	.word	0xffffffff
    23a0:	ffffffff 	.word	0xffffffff
    23a4:	ffffffff 	.word	0xffffffff
    23a8:	ffffffff 	.word	0xffffffff
    23ac:	ffffffff 	.word	0xffffffff
    23b0:	ffffffff 	.word	0xffffffff
    23b4:	ffffffff 	.word	0xffffffff
    23b8:	ffffffff 	.word	0xffffffff
    23bc:	ffffffff 	.word	0xffffffff
    23c0:	ffffffff 	.word	0xffffffff
    23c4:	ffffffff 	.word	0xffffffff
    23c8:	ffffffff 	.word	0xffffffff
    23cc:	ffffffff 	.word	0xffffffff
    23d0:	ffffffff 	.word	0xffffffff
    23d4:	ffffffff 	.word	0xffffffff
    23d8:	ffffffff 	.word	0xffffffff
    23dc:	ffffffff 	.word	0xffffffff
    23e0:	ffffffff 	.word	0xffffffff
    23e4:	ffffffff 	.word	0xffffffff
    23e8:	ffffffff 	.word	0xffffffff
    23ec:	ffffffff 	.word	0xffffffff
    23f0:	ffffffff 	.word	0xffffffff
    23f4:	ffffffff 	.word	0xffffffff
    23f8:	ffffffff 	.word	0xffffffff
    23fc:	ffffffff 	.word	0xffffffff
    2400:	ffffffff 	.word	0xffffffff
    2404:	ffffffff 	.word	0xffffffff
    2408:	ffffffff 	.word	0xffffffff
    240c:	ffffffff 	.word	0xffffffff
    2410:	ffffffff 	.word	0xffffffff
    2414:	ffffffff 	.word	0xffffffff
    2418:	ffffffff 	.word	0xffffffff
    241c:	ffffffff 	.word	0xffffffff
    2420:	ffffffff 	.word	0xffffffff
    2424:	ffffffff 	.word	0xffffffff
    2428:	ffffffff 	.word	0xffffffff
    242c:	ffffffff 	.word	0xffffffff
    2430:	ffffffff 	.word	0xffffffff
    2434:	ffffffff 	.word	0xffffffff
    2438:	ffffffff 	.word	0xffffffff
    243c:	ffffffff 	.word	0xffffffff
    2440:	ffffffff 	.word	0xffffffff
    2444:	ffffffff 	.word	0xffffffff
    2448:	ffffffff 	.word	0xffffffff
    244c:	ffffffff 	.word	0xffffffff
    2450:	ffffffff 	.word	0xffffffff
    2454:	ffffffff 	.word	0xffffffff
    2458:	ffffffff 	.word	0xffffffff
    245c:	ffffffff 	.word	0xffffffff
    2460:	ffffffff 	.word	0xffffffff
    2464:	ffffffff 	.word	0xffffffff
    2468:	ffffffff 	.word	0xffffffff
    246c:	ffffffff 	.word	0xffffffff
    2470:	ffffffff 	.word	0xffffffff
    2474:	ffffffff 	.word	0xffffffff
    2478:	ffffffff 	.word	0xffffffff
    247c:	ffffffff 	.word	0xffffffff
    2480:	ffffffff 	.word	0xffffffff
    2484:	ffffffff 	.word	0xffffffff
    2488:	ffffffff 	.word	0xffffffff
    248c:	ffffffff 	.word	0xffffffff
    2490:	ffffffff 	.word	0xffffffff
    2494:	ffffffff 	.word	0xffffffff
    2498:	ffffffff 	.word	0xffffffff
    249c:	ffffffff 	.word	0xffffffff
    24a0:	ffffffff 	.word	0xffffffff
    24a4:	ffffffff 	.word	0xffffffff
    24a8:	ffffffff 	.word	0xffffffff
    24ac:	ffffffff 	.word	0xffffffff
    24b0:	ffffffff 	.word	0xffffffff
    24b4:	ffffffff 	.word	0xffffffff
    24b8:	ffffffff 	.word	0xffffffff
    24bc:	ffffffff 	.word	0xffffffff
    24c0:	ffffffff 	.word	0xffffffff
    24c4:	ffffffff 	.word	0xffffffff
    24c8:	ffffffff 	.word	0xffffffff
    24cc:	ffffffff 	.word	0xffffffff
    24d0:	ffffffff 	.word	0xffffffff
    24d4:	ffffffff 	.word	0xffffffff
    24d8:	ffffffff 	.word	0xffffffff
    24dc:	ffffffff 	.word	0xffffffff
    24e0:	ffffffff 	.word	0xffffffff
    24e4:	ffffffff 	.word	0xffffffff
    24e8:	ffffffff 	.word	0xffffffff
    24ec:	ffffffff 	.word	0xffffffff
    24f0:	ffffffff 	.word	0xffffffff
    24f4:	ffffffff 	.word	0xffffffff
    24f8:	ffffffff 	.word	0xffffffff
    24fc:	ffffffff 	.word	0xffffffff
    2500:	ffffffff 	.word	0xffffffff
    2504:	ffffffff 	.word	0xffffffff
    2508:	ffffffff 	.word	0xffffffff
    250c:	ffffffff 	.word	0xffffffff
    2510:	ffffffff 	.word	0xffffffff
    2514:	ffffffff 	.word	0xffffffff
    2518:	ffffffff 	.word	0xffffffff
    251c:	ffffffff 	.word	0xffffffff
    2520:	ffffffff 	.word	0xffffffff
    2524:	ffffffff 	.word	0xffffffff
    2528:	ffffffff 	.word	0xffffffff
    252c:	ffffffff 	.word	0xffffffff
    2530:	ffffffff 	.word	0xffffffff
    2534:	ffffffff 	.word	0xffffffff
    2538:	ffffffff 	.word	0xffffffff
    253c:	ffffffff 	.word	0xffffffff
    2540:	ffffffff 	.word	0xffffffff
    2544:	ffffffff 	.word	0xffffffff
    2548:	ffffffff 	.word	0xffffffff
    254c:	ffffffff 	.word	0xffffffff
    2550:	ffffffff 	.word	0xffffffff
    2554:	ffffffff 	.word	0xffffffff
    2558:	ffffffff 	.word	0xffffffff
    255c:	ffffffff 	.word	0xffffffff
    2560:	ffffffff 	.word	0xffffffff
    2564:	ffffffff 	.word	0xffffffff
    2568:	ffffffff 	.word	0xffffffff
    256c:	ffffffff 	.word	0xffffffff
    2570:	ffffffff 	.word	0xffffffff
    2574:	ffffffff 	.word	0xffffffff
    2578:	ffffffff 	.word	0xffffffff
    257c:	ffffffff 	.word	0xffffffff
    2580:	ffffffff 	.word	0xffffffff
    2584:	ffffffff 	.word	0xffffffff
    2588:	ffffffff 	.word	0xffffffff
    258c:	ffffffff 	.word	0xffffffff
    2590:	ffffffff 	.word	0xffffffff
    2594:	ffffffff 	.word	0xffffffff
    2598:	ffffffff 	.word	0xffffffff
    259c:	ffffffff 	.word	0xffffffff
    25a0:	ffffffff 	.word	0xffffffff
    25a4:	ffffffff 	.word	0xffffffff
    25a8:	ffffffff 	.word	0xffffffff
    25ac:	ffffffff 	.word	0xffffffff
    25b0:	ffffffff 	.word	0xffffffff
    25b4:	ffffffff 	.word	0xffffffff
    25b8:	ffffffff 	.word	0xffffffff
    25bc:	ffffffff 	.word	0xffffffff
    25c0:	ffffffff 	.word	0xffffffff
    25c4:	ffffffff 	.word	0xffffffff
    25c8:	ffffffff 	.word	0xffffffff
    25cc:	ffffffff 	.word	0xffffffff
    25d0:	ffffffff 	.word	0xffffffff
    25d4:	ffffffff 	.word	0xffffffff
    25d8:	ffffffff 	.word	0xffffffff
    25dc:	ffffffff 	.word	0xffffffff
    25e0:	ffffffff 	.word	0xffffffff
    25e4:	ffffffff 	.word	0xffffffff
    25e8:	ffffffff 	.word	0xffffffff
    25ec:	ffffffff 	.word	0xffffffff
    25f0:	ffffffff 	.word	0xffffffff
    25f4:	ffffffff 	.word	0xffffffff
    25f8:	ffffffff 	.word	0xffffffff
    25fc:	ffffffff 	.word	0xffffffff
    2600:	ffffffff 	.word	0xffffffff
    2604:	ffffffff 	.word	0xffffffff
    2608:	ffffffff 	.word	0xffffffff
    260c:	ffffffff 	.word	0xffffffff
    2610:	ffffffff 	.word	0xffffffff
    2614:	ffffffff 	.word	0xffffffff
    2618:	ffffffff 	.word	0xffffffff
    261c:	ffffffff 	.word	0xffffffff
    2620:	ffffffff 	.word	0xffffffff
    2624:	ffffffff 	.word	0xffffffff
    2628:	ffffffff 	.word	0xffffffff
    262c:	ffffffff 	.word	0xffffffff
    2630:	ffffffff 	.word	0xffffffff
    2634:	ffffffff 	.word	0xffffffff
    2638:	ffffffff 	.word	0xffffffff
    263c:	ffffffff 	.word	0xffffffff
    2640:	ffffffff 	.word	0xffffffff
    2644:	ffffffff 	.word	0xffffffff
    2648:	ffffffff 	.word	0xffffffff
    264c:	ffffffff 	.word	0xffffffff
    2650:	ffffffff 	.word	0xffffffff
    2654:	ffffffff 	.word	0xffffffff
    2658:	ffffffff 	.word	0xffffffff
    265c:	ffffffff 	.word	0xffffffff
    2660:	ffffffff 	.word	0xffffffff
    2664:	ffffffff 	.word	0xffffffff
    2668:	ffffffff 	.word	0xffffffff
    266c:	ffffffff 	.word	0xffffffff
    2670:	ffffffff 	.word	0xffffffff
    2674:	ffffffff 	.word	0xffffffff
    2678:	ffffffff 	.word	0xffffffff
    267c:	ffffffff 	.word	0xffffffff
    2680:	ffffffff 	.word	0xffffffff
    2684:	ffffffff 	.word	0xffffffff
    2688:	ffffffff 	.word	0xffffffff
    268c:	ffffffff 	.word	0xffffffff
    2690:	ffffffff 	.word	0xffffffff
    2694:	ffffffff 	.word	0xffffffff
    2698:	ffffffff 	.word	0xffffffff
    269c:	ffffffff 	.word	0xffffffff
    26a0:	ffffffff 	.word	0xffffffff
    26a4:	ffffffff 	.word	0xffffffff
    26a8:	ffffffff 	.word	0xffffffff
    26ac:	ffffffff 	.word	0xffffffff
    26b0:	ffffffff 	.word	0xffffffff
    26b4:	ffffffff 	.word	0xffffffff
    26b8:	ffffffff 	.word	0xffffffff
    26bc:	ffffffff 	.word	0xffffffff
    26c0:	ffffffff 	.word	0xffffffff
    26c4:	ffffffff 	.word	0xffffffff
    26c8:	ffffffff 	.word	0xffffffff
    26cc:	ffffffff 	.word	0xffffffff
    26d0:	ffffffff 	.word	0xffffffff
    26d4:	ffffffff 	.word	0xffffffff
    26d8:	ffffffff 	.word	0xffffffff
    26dc:	ffffffff 	.word	0xffffffff
    26e0:	ffffffff 	.word	0xffffffff
    26e4:	ffffffff 	.word	0xffffffff
    26e8:	ffffffff 	.word	0xffffffff
    26ec:	ffffffff 	.word	0xffffffff
    26f0:	ffffffff 	.word	0xffffffff
    26f4:	ffffffff 	.word	0xffffffff
    26f8:	ffffffff 	.word	0xffffffff
    26fc:	ffffffff 	.word	0xffffffff
    2700:	ffffffff 	.word	0xffffffff
    2704:	ffffffff 	.word	0xffffffff
    2708:	ffffffff 	.word	0xffffffff
    270c:	ffffffff 	.word	0xffffffff
    2710:	ffffffff 	.word	0xffffffff
    2714:	ffffffff 	.word	0xffffffff
    2718:	ffffffff 	.word	0xffffffff
    271c:	ffffffff 	.word	0xffffffff
    2720:	ffffffff 	.word	0xffffffff
    2724:	ffffffff 	.word	0xffffffff
    2728:	ffffffff 	.word	0xffffffff
    272c:	ffffffff 	.word	0xffffffff
    2730:	ffffffff 	.word	0xffffffff
    2734:	ffffffff 	.word	0xffffffff
    2738:	ffffffff 	.word	0xffffffff
    273c:	ffffffff 	.word	0xffffffff
    2740:	ffffffff 	.word	0xffffffff
    2744:	ffffffff 	.word	0xffffffff
    2748:	ffffffff 	.word	0xffffffff
    274c:	ffffffff 	.word	0xffffffff
    2750:	ffffffff 	.word	0xffffffff
    2754:	ffffffff 	.word	0xffffffff
    2758:	ffffffff 	.word	0xffffffff
    275c:	ffffffff 	.word	0xffffffff
    2760:	ffffffff 	.word	0xffffffff
    2764:	ffffffff 	.word	0xffffffff
    2768:	ffffffff 	.word	0xffffffff
    276c:	ffffffff 	.word	0xffffffff
    2770:	ffffffff 	.word	0xffffffff
    2774:	ffffffff 	.word	0xffffffff
    2778:	ffffffff 	.word	0xffffffff
    277c:	ffffffff 	.word	0xffffffff
    2780:	ffffffff 	.word	0xffffffff
    2784:	ffffffff 	.word	0xffffffff
    2788:	ffffffff 	.word	0xffffffff
    278c:	ffffffff 	.word	0xffffffff
    2790:	ffffffff 	.word	0xffffffff
    2794:	ffffffff 	.word	0xffffffff
    2798:	ffffffff 	.word	0xffffffff
    279c:	ffffffff 	.word	0xffffffff
    27a0:	ffffffff 	.word	0xffffffff
    27a4:	ffffffff 	.word	0xffffffff
    27a8:	ffffffff 	.word	0xffffffff
    27ac:	ffffffff 	.word	0xffffffff
    27b0:	ffffffff 	.word	0xffffffff
    27b4:	ffffffff 	.word	0xffffffff
    27b8:	ffffffff 	.word	0xffffffff
    27bc:	ffffffff 	.word	0xffffffff
    27c0:	ffffffff 	.word	0xffffffff
    27c4:	ffffffff 	.word	0xffffffff
    27c8:	ffffffff 	.word	0xffffffff
    27cc:	ffffffff 	.word	0xffffffff
    27d0:	ffffffff 	.word	0xffffffff
    27d4:	ffffffff 	.word	0xffffffff
    27d8:	ffffffff 	.word	0xffffffff
    27dc:	ffffffff 	.word	0xffffffff
    27e0:	ffffffff 	.word	0xffffffff
    27e4:	ffffffff 	.word	0xffffffff
    27e8:	ffffffff 	.word	0xffffffff
    27ec:	ffffffff 	.word	0xffffffff
    27f0:	ffffffff 	.word	0xffffffff
    27f4:	ffffffff 	.word	0xffffffff
    27f8:	ffffffff 	.word	0xffffffff
    27fc:	ffffffff 	.word	0xffffffff
    2800:	ffffffff 	.word	0xffffffff
    2804:	ffffffff 	.word	0xffffffff
    2808:	ffffffff 	.word	0xffffffff
    280c:	ffffffff 	.word	0xffffffff
    2810:	ffffffff 	.word	0xffffffff
    2814:	ffffffff 	.word	0xffffffff
    2818:	ffffffff 	.word	0xffffffff
    281c:	ffffffff 	.word	0xffffffff
    2820:	ffffffff 	.word	0xffffffff
    2824:	ffffffff 	.word	0xffffffff
    2828:	ffffffff 	.word	0xffffffff
    282c:	ffffffff 	.word	0xffffffff
    2830:	ffffffff 	.word	0xffffffff
    2834:	ffffffff 	.word	0xffffffff
    2838:	ffffffff 	.word	0xffffffff
    283c:	ffffffff 	.word	0xffffffff
    2840:	ffffffff 	.word	0xffffffff
    2844:	ffffffff 	.word	0xffffffff
    2848:	ffffffff 	.word	0xffffffff
    284c:	ffffffff 	.word	0xffffffff
    2850:	ffffffff 	.word	0xffffffff
    2854:	ffffffff 	.word	0xffffffff
    2858:	ffffffff 	.word	0xffffffff
    285c:	ffffffff 	.word	0xffffffff
    2860:	ffffffff 	.word	0xffffffff
    2864:	ffffffff 	.word	0xffffffff
    2868:	ffffffff 	.word	0xffffffff
    286c:	ffffffff 	.word	0xffffffff
    2870:	ffffffff 	.word	0xffffffff
    2874:	ffffffff 	.word	0xffffffff
    2878:	ffffffff 	.word	0xffffffff
    287c:	ffffffff 	.word	0xffffffff
    2880:	ffffffff 	.word	0xffffffff
    2884:	ffffffff 	.word	0xffffffff
    2888:	ffffffff 	.word	0xffffffff
    288c:	ffffffff 	.word	0xffffffff
    2890:	ffffffff 	.word	0xffffffff
    2894:	ffffffff 	.word	0xffffffff
    2898:	ffffffff 	.word	0xffffffff
    289c:	ffffffff 	.word	0xffffffff
    28a0:	ffffffff 	.word	0xffffffff
    28a4:	ffffffff 	.word	0xffffffff
    28a8:	ffffffff 	.word	0xffffffff
    28ac:	ffffffff 	.word	0xffffffff
    28b0:	ffffffff 	.word	0xffffffff
    28b4:	ffffffff 	.word	0xffffffff
    28b8:	ffffffff 	.word	0xffffffff
    28bc:	ffffffff 	.word	0xffffffff
    28c0:	ffffffff 	.word	0xffffffff
    28c4:	ffffffff 	.word	0xffffffff
    28c8:	ffffffff 	.word	0xffffffff
    28cc:	ffffffff 	.word	0xffffffff
    28d0:	ffffffff 	.word	0xffffffff
    28d4:	ffffffff 	.word	0xffffffff
    28d8:	ffffffff 	.word	0xffffffff
    28dc:	ffffffff 	.word	0xffffffff
    28e0:	ffffffff 	.word	0xffffffff
    28e4:	ffffffff 	.word	0xffffffff
    28e8:	ffffffff 	.word	0xffffffff
    28ec:	ffffffff 	.word	0xffffffff
    28f0:	ffffffff 	.word	0xffffffff
    28f4:	ffffffff 	.word	0xffffffff
    28f8:	ffffffff 	.word	0xffffffff
    28fc:	ffffffff 	.word	0xffffffff
    2900:	ffffffff 	.word	0xffffffff
    2904:	ffffffff 	.word	0xffffffff
    2908:	ffffffff 	.word	0xffffffff
    290c:	ffffffff 	.word	0xffffffff
    2910:	ffffffff 	.word	0xffffffff
    2914:	ffffffff 	.word	0xffffffff
    2918:	ffffffff 	.word	0xffffffff
    291c:	ffffffff 	.word	0xffffffff
    2920:	ffffffff 	.word	0xffffffff
    2924:	ffffffff 	.word	0xffffffff
    2928:	ffffffff 	.word	0xffffffff
    292c:	ffffffff 	.word	0xffffffff
    2930:	ffffffff 	.word	0xffffffff
    2934:	ffffffff 	.word	0xffffffff
    2938:	ffffffff 	.word	0xffffffff
    293c:	ffffffff 	.word	0xffffffff
    2940:	ffffffff 	.word	0xffffffff
    2944:	ffffffff 	.word	0xffffffff
    2948:	ffffffff 	.word	0xffffffff
    294c:	ffffffff 	.word	0xffffffff
    2950:	ffffffff 	.word	0xffffffff
    2954:	ffffffff 	.word	0xffffffff
    2958:	ffffffff 	.word	0xffffffff
    295c:	ffffffff 	.word	0xffffffff
    2960:	ffffffff 	.word	0xffffffff
    2964:	ffffffff 	.word	0xffffffff
    2968:	ffffffff 	.word	0xffffffff
    296c:	ffffffff 	.word	0xffffffff
    2970:	ffffffff 	.word	0xffffffff
    2974:	ffffffff 	.word	0xffffffff
    2978:	ffffffff 	.word	0xffffffff
    297c:	ffffffff 	.word	0xffffffff
    2980:	ffffffff 	.word	0xffffffff
    2984:	ffffffff 	.word	0xffffffff
    2988:	ffffffff 	.word	0xffffffff
    298c:	ffffffff 	.word	0xffffffff
    2990:	ffffffff 	.word	0xffffffff
    2994:	ffffffff 	.word	0xffffffff
    2998:	ffffffff 	.word	0xffffffff
    299c:	ffffffff 	.word	0xffffffff
    29a0:	ffffffff 	.word	0xffffffff
    29a4:	ffffffff 	.word	0xffffffff
    29a8:	ffffffff 	.word	0xffffffff
    29ac:	ffffffff 	.word	0xffffffff
    29b0:	ffffffff 	.word	0xffffffff
    29b4:	ffffffff 	.word	0xffffffff
    29b8:	ffffffff 	.word	0xffffffff
    29bc:	ffffffff 	.word	0xffffffff
    29c0:	ffffffff 	.word	0xffffffff
    29c4:	ffffffff 	.word	0xffffffff
    29c8:	ffffffff 	.word	0xffffffff
    29cc:	ffffffff 	.word	0xffffffff
    29d0:	ffffffff 	.word	0xffffffff
    29d4:	ffffffff 	.word	0xffffffff
    29d8:	ffffffff 	.word	0xffffffff
    29dc:	ffffffff 	.word	0xffffffff
    29e0:	ffffffff 	.word	0xffffffff
    29e4:	ffffffff 	.word	0xffffffff
    29e8:	ffffffff 	.word	0xffffffff
    29ec:	ffffffff 	.word	0xffffffff
    29f0:	ffffffff 	.word	0xffffffff
    29f4:	ffffffff 	.word	0xffffffff
    29f8:	ffffffff 	.word	0xffffffff
    29fc:	ffffffff 	.word	0xffffffff
    2a00:	ffffffff 	.word	0xffffffff
    2a04:	ffffffff 	.word	0xffffffff
    2a08:	ffffffff 	.word	0xffffffff
    2a0c:	ffffffff 	.word	0xffffffff
    2a10:	ffffffff 	.word	0xffffffff
    2a14:	ffffffff 	.word	0xffffffff
    2a18:	ffffffff 	.word	0xffffffff
    2a1c:	ffffffff 	.word	0xffffffff
    2a20:	ffffffff 	.word	0xffffffff
    2a24:	ffffffff 	.word	0xffffffff
    2a28:	ffffffff 	.word	0xffffffff
    2a2c:	ffffffff 	.word	0xffffffff
    2a30:	ffffffff 	.word	0xffffffff
    2a34:	ffffffff 	.word	0xffffffff
    2a38:	ffffffff 	.word	0xffffffff
    2a3c:	ffffffff 	.word	0xffffffff
    2a40:	ffffffff 	.word	0xffffffff
    2a44:	ffffffff 	.word	0xffffffff
    2a48:	ffffffff 	.word	0xffffffff
    2a4c:	ffffffff 	.word	0xffffffff
    2a50:	ffffffff 	.word	0xffffffff
    2a54:	ffffffff 	.word	0xffffffff
    2a58:	ffffffff 	.word	0xffffffff
    2a5c:	ffffffff 	.word	0xffffffff
    2a60:	ffffffff 	.word	0xffffffff
    2a64:	ffffffff 	.word	0xffffffff
    2a68:	ffffffff 	.word	0xffffffff
    2a6c:	ffffffff 	.word	0xffffffff
    2a70:	ffffffff 	.word	0xffffffff
    2a74:	ffffffff 	.word	0xffffffff
    2a78:	ffffffff 	.word	0xffffffff
    2a7c:	ffffffff 	.word	0xffffffff
    2a80:	ffffffff 	.word	0xffffffff
    2a84:	ffffffff 	.word	0xffffffff
    2a88:	ffffffff 	.word	0xffffffff
    2a8c:	ffffffff 	.word	0xffffffff
    2a90:	ffffffff 	.word	0xffffffff
    2a94:	ffffffff 	.word	0xffffffff
    2a98:	ffffffff 	.word	0xffffffff
    2a9c:	ffffffff 	.word	0xffffffff
    2aa0:	ffffffff 	.word	0xffffffff
    2aa4:	ffffffff 	.word	0xffffffff
    2aa8:	ffffffff 	.word	0xffffffff
    2aac:	ffffffff 	.word	0xffffffff
    2ab0:	ffffffff 	.word	0xffffffff
    2ab4:	ffffffff 	.word	0xffffffff
    2ab8:	ffffffff 	.word	0xffffffff
    2abc:	ffffffff 	.word	0xffffffff
    2ac0:	ffffffff 	.word	0xffffffff
    2ac4:	ffffffff 	.word	0xffffffff
    2ac8:	ffffffff 	.word	0xffffffff
    2acc:	ffffffff 	.word	0xffffffff
    2ad0:	ffffffff 	.word	0xffffffff
    2ad4:	ffffffff 	.word	0xffffffff
    2ad8:	ffffffff 	.word	0xffffffff
    2adc:	ffffffff 	.word	0xffffffff
    2ae0:	ffffffff 	.word	0xffffffff
    2ae4:	ffffffff 	.word	0xffffffff
    2ae8:	ffffffff 	.word	0xffffffff
    2aec:	ffffffff 	.word	0xffffffff
    2af0:	ffffffff 	.word	0xffffffff
    2af4:	ffffffff 	.word	0xffffffff
    2af8:	ffffffff 	.word	0xffffffff
    2afc:	ffffffff 	.word	0xffffffff
    2b00:	ffffffff 	.word	0xffffffff
    2b04:	ffffffff 	.word	0xffffffff
    2b08:	ffffffff 	.word	0xffffffff
    2b0c:	ffffffff 	.word	0xffffffff
    2b10:	ffffffff 	.word	0xffffffff
    2b14:	ffffffff 	.word	0xffffffff
    2b18:	ffffffff 	.word	0xffffffff
    2b1c:	ffffffff 	.word	0xffffffff
    2b20:	ffffffff 	.word	0xffffffff
    2b24:	ffffffff 	.word	0xffffffff
    2b28:	ffffffff 	.word	0xffffffff
    2b2c:	ffffffff 	.word	0xffffffff
    2b30:	ffffffff 	.word	0xffffffff
    2b34:	ffffffff 	.word	0xffffffff
    2b38:	ffffffff 	.word	0xffffffff
    2b3c:	ffffffff 	.word	0xffffffff
    2b40:	ffffffff 	.word	0xffffffff
    2b44:	ffffffff 	.word	0xffffffff
    2b48:	ffffffff 	.word	0xffffffff
    2b4c:	ffffffff 	.word	0xffffffff
    2b50:	ffffffff 	.word	0xffffffff
    2b54:	ffffffff 	.word	0xffffffff
    2b58:	ffffffff 	.word	0xffffffff
    2b5c:	ffffffff 	.word	0xffffffff
    2b60:	ffffffff 	.word	0xffffffff
    2b64:	ffffffff 	.word	0xffffffff
    2b68:	ffffffff 	.word	0xffffffff
    2b6c:	ffffffff 	.word	0xffffffff
    2b70:	ffffffff 	.word	0xffffffff
    2b74:	ffffffff 	.word	0xffffffff
    2b78:	ffffffff 	.word	0xffffffff
    2b7c:	ffffffff 	.word	0xffffffff
    2b80:	ffffffff 	.word	0xffffffff
    2b84:	ffffffff 	.word	0xffffffff
    2b88:	ffffffff 	.word	0xffffffff
    2b8c:	ffffffff 	.word	0xffffffff
    2b90:	ffffffff 	.word	0xffffffff
    2b94:	ffffffff 	.word	0xffffffff
    2b98:	ffffffff 	.word	0xffffffff
    2b9c:	ffffffff 	.word	0xffffffff
    2ba0:	ffffffff 	.word	0xffffffff
    2ba4:	ffffffff 	.word	0xffffffff
    2ba8:	ffffffff 	.word	0xffffffff
    2bac:	ffffffff 	.word	0xffffffff
    2bb0:	ffffffff 	.word	0xffffffff
    2bb4:	ffffffff 	.word	0xffffffff
    2bb8:	ffffffff 	.word	0xffffffff
    2bbc:	ffffffff 	.word	0xffffffff
    2bc0:	ffffffff 	.word	0xffffffff
    2bc4:	ffffffff 	.word	0xffffffff
    2bc8:	ffffffff 	.word	0xffffffff
    2bcc:	ffffffff 	.word	0xffffffff
    2bd0:	ffffffff 	.word	0xffffffff
    2bd4:	ffffffff 	.word	0xffffffff
    2bd8:	ffffffff 	.word	0xffffffff
    2bdc:	ffffffff 	.word	0xffffffff
    2be0:	ffffffff 	.word	0xffffffff
    2be4:	ffffffff 	.word	0xffffffff
    2be8:	ffffffff 	.word	0xffffffff
    2bec:	ffffffff 	.word	0xffffffff
    2bf0:	ffffffff 	.word	0xffffffff
    2bf4:	ffffffff 	.word	0xffffffff
    2bf8:	ffffffff 	.word	0xffffffff
    2bfc:	ffffffff 	.word	0xffffffff
    2c00:	ffffffff 	.word	0xffffffff
    2c04:	ffffffff 	.word	0xffffffff
    2c08:	ffffffff 	.word	0xffffffff
    2c0c:	ffffffff 	.word	0xffffffff
    2c10:	ffffffff 	.word	0xffffffff
    2c14:	ffffffff 	.word	0xffffffff
    2c18:	ffffffff 	.word	0xffffffff
    2c1c:	ffffffff 	.word	0xffffffff
    2c20:	ffffffff 	.word	0xffffffff
    2c24:	ffffffff 	.word	0xffffffff
    2c28:	ffffffff 	.word	0xffffffff
    2c2c:	ffffffff 	.word	0xffffffff
    2c30:	ffffffff 	.word	0xffffffff
    2c34:	ffffffff 	.word	0xffffffff
    2c38:	ffffffff 	.word	0xffffffff
    2c3c:	ffffffff 	.word	0xffffffff
    2c40:	ffffffff 	.word	0xffffffff
    2c44:	ffffffff 	.word	0xffffffff
    2c48:	ffffffff 	.word	0xffffffff
    2c4c:	ffffffff 	.word	0xffffffff
    2c50:	ffffffff 	.word	0xffffffff
    2c54:	ffffffff 	.word	0xffffffff
    2c58:	ffffffff 	.word	0xffffffff
    2c5c:	ffffffff 	.word	0xffffffff
    2c60:	ffffffff 	.word	0xffffffff
    2c64:	ffffffff 	.word	0xffffffff
    2c68:	ffffffff 	.word	0xffffffff
    2c6c:	ffffffff 	.word	0xffffffff
    2c70:	ffffffff 	.word	0xffffffff
    2c74:	ffffffff 	.word	0xffffffff
    2c78:	ffffffff 	.word	0xffffffff
    2c7c:	ffffffff 	.word	0xffffffff
    2c80:	ffffffff 	.word	0xffffffff
    2c84:	ffffffff 	.word	0xffffffff
    2c88:	ffffffff 	.word	0xffffffff
    2c8c:	ffffffff 	.word	0xffffffff
    2c90:	ffffffff 	.word	0xffffffff
    2c94:	ffffffff 	.word	0xffffffff
    2c98:	ffffffff 	.word	0xffffffff
    2c9c:	ffffffff 	.word	0xffffffff
    2ca0:	ffffffff 	.word	0xffffffff
    2ca4:	ffffffff 	.word	0xffffffff
    2ca8:	ffffffff 	.word	0xffffffff
    2cac:	ffffffff 	.word	0xffffffff
    2cb0:	ffffffff 	.word	0xffffffff
    2cb4:	ffffffff 	.word	0xffffffff
    2cb8:	ffffffff 	.word	0xffffffff
    2cbc:	ffffffff 	.word	0xffffffff
    2cc0:	ffffffff 	.word	0xffffffff
    2cc4:	ffffffff 	.word	0xffffffff
    2cc8:	ffffffff 	.word	0xffffffff
    2ccc:	ffffffff 	.word	0xffffffff
    2cd0:	ffffffff 	.word	0xffffffff
    2cd4:	ffffffff 	.word	0xffffffff
    2cd8:	ffffffff 	.word	0xffffffff
    2cdc:	ffffffff 	.word	0xffffffff
    2ce0:	ffffffff 	.word	0xffffffff
    2ce4:	ffffffff 	.word	0xffffffff
    2ce8:	ffffffff 	.word	0xffffffff
    2cec:	ffffffff 	.word	0xffffffff
    2cf0:	ffffffff 	.word	0xffffffff
    2cf4:	ffffffff 	.word	0xffffffff
    2cf8:	ffffffff 	.word	0xffffffff
    2cfc:	ffffffff 	.word	0xffffffff
    2d00:	ffffffff 	.word	0xffffffff
    2d04:	ffffffff 	.word	0xffffffff
    2d08:	ffffffff 	.word	0xffffffff
    2d0c:	ffffffff 	.word	0xffffffff
    2d10:	ffffffff 	.word	0xffffffff
    2d14:	ffffffff 	.word	0xffffffff
    2d18:	ffffffff 	.word	0xffffffff
    2d1c:	ffffffff 	.word	0xffffffff
    2d20:	ffffffff 	.word	0xffffffff
    2d24:	ffffffff 	.word	0xffffffff
    2d28:	ffffffff 	.word	0xffffffff
    2d2c:	ffffffff 	.word	0xffffffff
    2d30:	ffffffff 	.word	0xffffffff
    2d34:	ffffffff 	.word	0xffffffff
    2d38:	ffffffff 	.word	0xffffffff
    2d3c:	ffffffff 	.word	0xffffffff
    2d40:	ffffffff 	.word	0xffffffff
    2d44:	ffffffff 	.word	0xffffffff
    2d48:	ffffffff 	.word	0xffffffff
    2d4c:	ffffffff 	.word	0xffffffff
    2d50:	ffffffff 	.word	0xffffffff
    2d54:	ffffffff 	.word	0xffffffff
    2d58:	ffffffff 	.word	0xffffffff
    2d5c:	ffffffff 	.word	0xffffffff
    2d60:	ffffffff 	.word	0xffffffff
    2d64:	ffffffff 	.word	0xffffffff
    2d68:	ffffffff 	.word	0xffffffff
    2d6c:	ffffffff 	.word	0xffffffff
    2d70:	ffffffff 	.word	0xffffffff
    2d74:	ffffffff 	.word	0xffffffff
    2d78:	ffffffff 	.word	0xffffffff
    2d7c:	ffffffff 	.word	0xffffffff
    2d80:	ffffffff 	.word	0xffffffff
    2d84:	ffffffff 	.word	0xffffffff
    2d88:	ffffffff 	.word	0xffffffff
    2d8c:	ffffffff 	.word	0xffffffff
    2d90:	ffffffff 	.word	0xffffffff
    2d94:	ffffffff 	.word	0xffffffff
    2d98:	ffffffff 	.word	0xffffffff
    2d9c:	ffffffff 	.word	0xffffffff
    2da0:	ffffffff 	.word	0xffffffff
    2da4:	ffffffff 	.word	0xffffffff
    2da8:	ffffffff 	.word	0xffffffff
    2dac:	ffffffff 	.word	0xffffffff
    2db0:	ffffffff 	.word	0xffffffff
    2db4:	ffffffff 	.word	0xffffffff
    2db8:	ffffffff 	.word	0xffffffff
    2dbc:	ffffffff 	.word	0xffffffff
    2dc0:	ffffffff 	.word	0xffffffff
    2dc4:	ffffffff 	.word	0xffffffff
    2dc8:	ffffffff 	.word	0xffffffff
    2dcc:	ffffffff 	.word	0xffffffff
    2dd0:	ffffffff 	.word	0xffffffff
    2dd4:	ffffffff 	.word	0xffffffff
    2dd8:	ffffffff 	.word	0xffffffff
    2ddc:	ffffffff 	.word	0xffffffff
    2de0:	ffffffff 	.word	0xffffffff
    2de4:	ffffffff 	.word	0xffffffff
    2de8:	ffffffff 	.word	0xffffffff
    2dec:	ffffffff 	.word	0xffffffff
    2df0:	ffffffff 	.word	0xffffffff
    2df4:	ffffffff 	.word	0xffffffff
    2df8:	ffffffff 	.word	0xffffffff
    2dfc:	ffffffff 	.word	0xffffffff
    2e00:	ffffffff 	.word	0xffffffff
    2e04:	ffffffff 	.word	0xffffffff
    2e08:	ffffffff 	.word	0xffffffff
    2e0c:	ffffffff 	.word	0xffffffff
    2e10:	ffffffff 	.word	0xffffffff
    2e14:	ffffffff 	.word	0xffffffff
    2e18:	ffffffff 	.word	0xffffffff
    2e1c:	ffffffff 	.word	0xffffffff
    2e20:	ffffffff 	.word	0xffffffff
    2e24:	ffffffff 	.word	0xffffffff
    2e28:	ffffffff 	.word	0xffffffff
    2e2c:	ffffffff 	.word	0xffffffff
    2e30:	ffffffff 	.word	0xffffffff
    2e34:	ffffffff 	.word	0xffffffff
    2e38:	ffffffff 	.word	0xffffffff
    2e3c:	ffffffff 	.word	0xffffffff
    2e40:	ffffffff 	.word	0xffffffff
    2e44:	ffffffff 	.word	0xffffffff
    2e48:	ffffffff 	.word	0xffffffff
    2e4c:	ffffffff 	.word	0xffffffff
    2e50:	ffffffff 	.word	0xffffffff
    2e54:	ffffffff 	.word	0xffffffff
    2e58:	ffffffff 	.word	0xffffffff
    2e5c:	ffffffff 	.word	0xffffffff
    2e60:	ffffffff 	.word	0xffffffff
    2e64:	ffffffff 	.word	0xffffffff
    2e68:	ffffffff 	.word	0xffffffff
    2e6c:	ffffffff 	.word	0xffffffff
    2e70:	ffffffff 	.word	0xffffffff
    2e74:	ffffffff 	.word	0xffffffff
    2e78:	ffffffff 	.word	0xffffffff
    2e7c:	ffffffff 	.word	0xffffffff
    2e80:	ffffffff 	.word	0xffffffff
    2e84:	ffffffff 	.word	0xffffffff
    2e88:	ffffffff 	.word	0xffffffff
    2e8c:	ffffffff 	.word	0xffffffff
    2e90:	ffffffff 	.word	0xffffffff
    2e94:	ffffffff 	.word	0xffffffff
    2e98:	ffffffff 	.word	0xffffffff
    2e9c:	ffffffff 	.word	0xffffffff
    2ea0:	ffffffff 	.word	0xffffffff
    2ea4:	ffffffff 	.word	0xffffffff
    2ea8:	ffffffff 	.word	0xffffffff
    2eac:	ffffffff 	.word	0xffffffff
    2eb0:	ffffffff 	.word	0xffffffff
    2eb4:	ffffffff 	.word	0xffffffff
    2eb8:	ffffffff 	.word	0xffffffff
    2ebc:	ffffffff 	.word	0xffffffff
    2ec0:	ffffffff 	.word	0xffffffff
    2ec4:	ffffffff 	.word	0xffffffff
    2ec8:	ffffffff 	.word	0xffffffff
    2ecc:	ffffffff 	.word	0xffffffff
    2ed0:	ffffffff 	.word	0xffffffff
    2ed4:	ffffffff 	.word	0xffffffff
    2ed8:	ffffffff 	.word	0xffffffff
    2edc:	ffffffff 	.word	0xffffffff
    2ee0:	ffffffff 	.word	0xffffffff
    2ee4:	ffffffff 	.word	0xffffffff
    2ee8:	ffffffff 	.word	0xffffffff
    2eec:	ffffffff 	.word	0xffffffff
    2ef0:	ffffffff 	.word	0xffffffff
    2ef4:	ffffffff 	.word	0xffffffff
    2ef8:	ffffffff 	.word	0xffffffff
    2efc:	ffffffff 	.word	0xffffffff
    2f00:	ffffffff 	.word	0xffffffff
    2f04:	ffffffff 	.word	0xffffffff
    2f08:	ffffffff 	.word	0xffffffff
    2f0c:	ffffffff 	.word	0xffffffff
    2f10:	ffffffff 	.word	0xffffffff
    2f14:	ffffffff 	.word	0xffffffff
    2f18:	ffffffff 	.word	0xffffffff
    2f1c:	ffffffff 	.word	0xffffffff
    2f20:	ffffffff 	.word	0xffffffff
    2f24:	ffffffff 	.word	0xffffffff
    2f28:	ffffffff 	.word	0xffffffff
    2f2c:	ffffffff 	.word	0xffffffff
    2f30:	ffffffff 	.word	0xffffffff
    2f34:	ffffffff 	.word	0xffffffff
    2f38:	ffffffff 	.word	0xffffffff
    2f3c:	ffffffff 	.word	0xffffffff
    2f40:	ffffffff 	.word	0xffffffff
    2f44:	ffffffff 	.word	0xffffffff
    2f48:	ffffffff 	.word	0xffffffff
    2f4c:	ffffffff 	.word	0xffffffff
    2f50:	ffffffff 	.word	0xffffffff
    2f54:	ffffffff 	.word	0xffffffff
    2f58:	ffffffff 	.word	0xffffffff
    2f5c:	ffffffff 	.word	0xffffffff
    2f60:	ffffffff 	.word	0xffffffff
    2f64:	ffffffff 	.word	0xffffffff
    2f68:	ffffffff 	.word	0xffffffff
    2f6c:	ffffffff 	.word	0xffffffff
    2f70:	ffffffff 	.word	0xffffffff
    2f74:	ffffffff 	.word	0xffffffff
    2f78:	ffffffff 	.word	0xffffffff
    2f7c:	ffffffff 	.word	0xffffffff
    2f80:	ffffffff 	.word	0xffffffff
    2f84:	ffffffff 	.word	0xffffffff
    2f88:	ffffffff 	.word	0xffffffff
    2f8c:	ffffffff 	.word	0xffffffff
    2f90:	ffffffff 	.word	0xffffffff
    2f94:	ffffffff 	.word	0xffffffff
    2f98:	ffffffff 	.word	0xffffffff
    2f9c:	ffffffff 	.word	0xffffffff
    2fa0:	ffffffff 	.word	0xffffffff
    2fa4:	ffffffff 	.word	0xffffffff
    2fa8:	ffffffff 	.word	0xffffffff
    2fac:	ffffffff 	.word	0xffffffff
    2fb0:	ffffffff 	.word	0xffffffff
    2fb4:	ffffffff 	.word	0xffffffff
    2fb8:	ffffffff 	.word	0xffffffff
    2fbc:	ffffffff 	.word	0xffffffff
    2fc0:	ffffffff 	.word	0xffffffff
    2fc4:	ffffffff 	.word	0xffffffff
    2fc8:	ffffffff 	.word	0xffffffff
    2fcc:	ffffffff 	.word	0xffffffff
    2fd0:	ffffffff 	.word	0xffffffff
    2fd4:	ffffffff 	.word	0xffffffff
    2fd8:	ffffffff 	.word	0xffffffff
    2fdc:	ffffffff 	.word	0xffffffff
    2fe0:	ffffffff 	.word	0xffffffff
    2fe4:	ffffffff 	.word	0xffffffff
    2fe8:	ffffffff 	.word	0xffffffff
    2fec:	ffffffff 	.word	0xffffffff
    2ff0:	ffffffff 	.word	0xffffffff
    2ff4:	ffffffff 	.word	0xffffffff
    2ff8:	ffffffff 	.word	0xffffffff
    2ffc:	ffffffff 	.word	0xffffffff
    3000:	ffffffff 	.word	0xffffffff
    3004:	ffffffff 	.word	0xffffffff
    3008:	ffffffff 	.word	0xffffffff
    300c:	ffffffff 	.word	0xffffffff
    3010:	ffffffff 	.word	0xffffffff
    3014:	ffffffff 	.word	0xffffffff
    3018:	ffffffff 	.word	0xffffffff
    301c:	ffffffff 	.word	0xffffffff
    3020:	ffffffff 	.word	0xffffffff
    3024:	ffffffff 	.word	0xffffffff
    3028:	ffffffff 	.word	0xffffffff
    302c:	ffffffff 	.word	0xffffffff
    3030:	ffffffff 	.word	0xffffffff
    3034:	ffffffff 	.word	0xffffffff
    3038:	ffffffff 	.word	0xffffffff
    303c:	ffffffff 	.word	0xffffffff
    3040:	ffffffff 	.word	0xffffffff
    3044:	ffffffff 	.word	0xffffffff
    3048:	ffffffff 	.word	0xffffffff
    304c:	ffffffff 	.word	0xffffffff
    3050:	ffffffff 	.word	0xffffffff
    3054:	ffffffff 	.word	0xffffffff
    3058:	ffffffff 	.word	0xffffffff
    305c:	ffffffff 	.word	0xffffffff
    3060:	ffffffff 	.word	0xffffffff
    3064:	ffffffff 	.word	0xffffffff
    3068:	ffffffff 	.word	0xffffffff
    306c:	ffffffff 	.word	0xffffffff
    3070:	ffffffff 	.word	0xffffffff
    3074:	ffffffff 	.word	0xffffffff
    3078:	ffffffff 	.word	0xffffffff
    307c:	ffffffff 	.word	0xffffffff
    3080:	ffffffff 	.word	0xffffffff
    3084:	ffffffff 	.word	0xffffffff
    3088:	ffffffff 	.word	0xffffffff
    308c:	ffffffff 	.word	0xffffffff
    3090:	ffffffff 	.word	0xffffffff
    3094:	ffffffff 	.word	0xffffffff
    3098:	ffffffff 	.word	0xffffffff
    309c:	ffffffff 	.word	0xffffffff
    30a0:	ffffffff 	.word	0xffffffff
    30a4:	ffffffff 	.word	0xffffffff
    30a8:	ffffffff 	.word	0xffffffff
    30ac:	ffffffff 	.word	0xffffffff
    30b0:	ffffffff 	.word	0xffffffff
    30b4:	ffffffff 	.word	0xffffffff
    30b8:	ffffffff 	.word	0xffffffff
    30bc:	ffffffff 	.word	0xffffffff
    30c0:	ffffffff 	.word	0xffffffff
    30c4:	ffffffff 	.word	0xffffffff
    30c8:	ffffffff 	.word	0xffffffff
    30cc:	ffffffff 	.word	0xffffffff
    30d0:	ffffffff 	.word	0xffffffff
    30d4:	ffffffff 	.word	0xffffffff
    30d8:	ffffffff 	.word	0xffffffff
    30dc:	ffffffff 	.word	0xffffffff
    30e0:	ffffffff 	.word	0xffffffff
    30e4:	ffffffff 	.word	0xffffffff
    30e8:	ffffffff 	.word	0xffffffff
    30ec:	ffffffff 	.word	0xffffffff
    30f0:	ffffffff 	.word	0xffffffff
    30f4:	ffffffff 	.word	0xffffffff
    30f8:	ffffffff 	.word	0xffffffff
    30fc:	ffffffff 	.word	0xffffffff
    3100:	ffffffff 	.word	0xffffffff
    3104:	ffffffff 	.word	0xffffffff
    3108:	ffffffff 	.word	0xffffffff
    310c:	ffffffff 	.word	0xffffffff
    3110:	ffffffff 	.word	0xffffffff
    3114:	ffffffff 	.word	0xffffffff
    3118:	ffffffff 	.word	0xffffffff
    311c:	ffffffff 	.word	0xffffffff
    3120:	ffffffff 	.word	0xffffffff
    3124:	ffffffff 	.word	0xffffffff
    3128:	ffffffff 	.word	0xffffffff
    312c:	ffffffff 	.word	0xffffffff
    3130:	ffffffff 	.word	0xffffffff
    3134:	ffffffff 	.word	0xffffffff
    3138:	ffffffff 	.word	0xffffffff
    313c:	ffffffff 	.word	0xffffffff
    3140:	ffffffff 	.word	0xffffffff
    3144:	ffffffff 	.word	0xffffffff
    3148:	ffffffff 	.word	0xffffffff
    314c:	ffffffff 	.word	0xffffffff
    3150:	ffffffff 	.word	0xffffffff
    3154:	ffffffff 	.word	0xffffffff
    3158:	ffffffff 	.word	0xffffffff
    315c:	ffffffff 	.word	0xffffffff
    3160:	ffffffff 	.word	0xffffffff
    3164:	ffffffff 	.word	0xffffffff
    3168:	ffffffff 	.word	0xffffffff
    316c:	ffffffff 	.word	0xffffffff
    3170:	ffffffff 	.word	0xffffffff
    3174:	ffffffff 	.word	0xffffffff
    3178:	ffffffff 	.word	0xffffffff
    317c:	ffffffff 	.word	0xffffffff
    3180:	ffffffff 	.word	0xffffffff
    3184:	ffffffff 	.word	0xffffffff
    3188:	ffffffff 	.word	0xffffffff
    318c:	ffffffff 	.word	0xffffffff
    3190:	ffffffff 	.word	0xffffffff
    3194:	ffffffff 	.word	0xffffffff
    3198:	ffffffff 	.word	0xffffffff
    319c:	ffffffff 	.word	0xffffffff
    31a0:	ffffffff 	.word	0xffffffff
    31a4:	ffffffff 	.word	0xffffffff
    31a8:	ffffffff 	.word	0xffffffff
    31ac:	ffffffff 	.word	0xffffffff
    31b0:	ffffffff 	.word	0xffffffff
    31b4:	ffffffff 	.word	0xffffffff
    31b8:	ffffffff 	.word	0xffffffff
    31bc:	ffffffff 	.word	0xffffffff
    31c0:	ffffffff 	.word	0xffffffff
    31c4:	ffffffff 	.word	0xffffffff
    31c8:	ffffffff 	.word	0xffffffff
    31cc:	ffffffff 	.word	0xffffffff
    31d0:	ffffffff 	.word	0xffffffff
    31d4:	ffffffff 	.word	0xffffffff
    31d8:	ffffffff 	.word	0xffffffff
    31dc:	ffffffff 	.word	0xffffffff
    31e0:	ffffffff 	.word	0xffffffff
    31e4:	ffffffff 	.word	0xffffffff
    31e8:	ffffffff 	.word	0xffffffff
    31ec:	ffffffff 	.word	0xffffffff
    31f0:	ffffffff 	.word	0xffffffff
    31f4:	ffffffff 	.word	0xffffffff
    31f8:	ffffffff 	.word	0xffffffff
    31fc:	ffffffff 	.word	0xffffffff
    3200:	ffffffff 	.word	0xffffffff
    3204:	ffffffff 	.word	0xffffffff
    3208:	ffffffff 	.word	0xffffffff
    320c:	ffffffff 	.word	0xffffffff
    3210:	ffffffff 	.word	0xffffffff
    3214:	ffffffff 	.word	0xffffffff
    3218:	ffffffff 	.word	0xffffffff
    321c:	ffffffff 	.word	0xffffffff
    3220:	ffffffff 	.word	0xffffffff
    3224:	ffffffff 	.word	0xffffffff
    3228:	ffffffff 	.word	0xffffffff
    322c:	ffffffff 	.word	0xffffffff
    3230:	ffffffff 	.word	0xffffffff
    3234:	ffffffff 	.word	0xffffffff
    3238:	ffffffff 	.word	0xffffffff
    323c:	ffffffff 	.word	0xffffffff
    3240:	ffffffff 	.word	0xffffffff
    3244:	ffffffff 	.word	0xffffffff
    3248:	ffffffff 	.word	0xffffffff
    324c:	ffffffff 	.word	0xffffffff
    3250:	ffffffff 	.word	0xffffffff
    3254:	ffffffff 	.word	0xffffffff
    3258:	ffffffff 	.word	0xffffffff
    325c:	ffffffff 	.word	0xffffffff
    3260:	ffffffff 	.word	0xffffffff
    3264:	ffffffff 	.word	0xffffffff
    3268:	ffffffff 	.word	0xffffffff
    326c:	ffffffff 	.word	0xffffffff
    3270:	ffffffff 	.word	0xffffffff
    3274:	ffffffff 	.word	0xffffffff
    3278:	ffffffff 	.word	0xffffffff
    327c:	ffffffff 	.word	0xffffffff
    3280:	ffffffff 	.word	0xffffffff
    3284:	ffffffff 	.word	0xffffffff
    3288:	ffffffff 	.word	0xffffffff
    328c:	ffffffff 	.word	0xffffffff
    3290:	ffffffff 	.word	0xffffffff
    3294:	ffffffff 	.word	0xffffffff
    3298:	ffffffff 	.word	0xffffffff
    329c:	ffffffff 	.word	0xffffffff
    32a0:	ffffffff 	.word	0xffffffff
    32a4:	ffffffff 	.word	0xffffffff
    32a8:	ffffffff 	.word	0xffffffff
    32ac:	ffffffff 	.word	0xffffffff
    32b0:	ffffffff 	.word	0xffffffff
    32b4:	ffffffff 	.word	0xffffffff
    32b8:	ffffffff 	.word	0xffffffff
    32bc:	ffffffff 	.word	0xffffffff
    32c0:	ffffffff 	.word	0xffffffff
    32c4:	ffffffff 	.word	0xffffffff
    32c8:	ffffffff 	.word	0xffffffff
    32cc:	ffffffff 	.word	0xffffffff
    32d0:	ffffffff 	.word	0xffffffff
    32d4:	ffffffff 	.word	0xffffffff
    32d8:	ffffffff 	.word	0xffffffff
    32dc:	ffffffff 	.word	0xffffffff
    32e0:	ffffffff 	.word	0xffffffff
    32e4:	ffffffff 	.word	0xffffffff
    32e8:	ffffffff 	.word	0xffffffff
    32ec:	ffffffff 	.word	0xffffffff
    32f0:	ffffffff 	.word	0xffffffff
    32f4:	ffffffff 	.word	0xffffffff
    32f8:	ffffffff 	.word	0xffffffff
    32fc:	ffffffff 	.word	0xffffffff
    3300:	ffffffff 	.word	0xffffffff
    3304:	ffffffff 	.word	0xffffffff
    3308:	ffffffff 	.word	0xffffffff
    330c:	ffffffff 	.word	0xffffffff
    3310:	ffffffff 	.word	0xffffffff
    3314:	ffffffff 	.word	0xffffffff
    3318:	ffffffff 	.word	0xffffffff
    331c:	ffffffff 	.word	0xffffffff
    3320:	ffffffff 	.word	0xffffffff
    3324:	ffffffff 	.word	0xffffffff
    3328:	ffffffff 	.word	0xffffffff
    332c:	ffffffff 	.word	0xffffffff
    3330:	ffffffff 	.word	0xffffffff
    3334:	ffffffff 	.word	0xffffffff
    3338:	ffffffff 	.word	0xffffffff
    333c:	ffffffff 	.word	0xffffffff
    3340:	ffffffff 	.word	0xffffffff
    3344:	ffffffff 	.word	0xffffffff
    3348:	ffffffff 	.word	0xffffffff
    334c:	ffffffff 	.word	0xffffffff
    3350:	ffffffff 	.word	0xffffffff
    3354:	ffffffff 	.word	0xffffffff
    3358:	ffffffff 	.word	0xffffffff
    335c:	ffffffff 	.word	0xffffffff
    3360:	ffffffff 	.word	0xffffffff
    3364:	ffffffff 	.word	0xffffffff
    3368:	ffffffff 	.word	0xffffffff
    336c:	ffffffff 	.word	0xffffffff
    3370:	ffffffff 	.word	0xffffffff
    3374:	ffffffff 	.word	0xffffffff
    3378:	ffffffff 	.word	0xffffffff
    337c:	ffffffff 	.word	0xffffffff
    3380:	ffffffff 	.word	0xffffffff
    3384:	ffffffff 	.word	0xffffffff
    3388:	ffffffff 	.word	0xffffffff
    338c:	ffffffff 	.word	0xffffffff
    3390:	ffffffff 	.word	0xffffffff
    3394:	ffffffff 	.word	0xffffffff
    3398:	ffffffff 	.word	0xffffffff
    339c:	ffffffff 	.word	0xffffffff
    33a0:	ffffffff 	.word	0xffffffff
    33a4:	ffffffff 	.word	0xffffffff
    33a8:	ffffffff 	.word	0xffffffff
    33ac:	ffffffff 	.word	0xffffffff
    33b0:	ffffffff 	.word	0xffffffff
    33b4:	ffffffff 	.word	0xffffffff
    33b8:	ffffffff 	.word	0xffffffff
    33bc:	ffffffff 	.word	0xffffffff
    33c0:	ffffffff 	.word	0xffffffff
    33c4:	ffffffff 	.word	0xffffffff
    33c8:	ffffffff 	.word	0xffffffff
    33cc:	ffffffff 	.word	0xffffffff
    33d0:	ffffffff 	.word	0xffffffff
    33d4:	ffffffff 	.word	0xffffffff
    33d8:	ffffffff 	.word	0xffffffff
    33dc:	ffffffff 	.word	0xffffffff
    33e0:	ffffffff 	.word	0xffffffff
    33e4:	ffffffff 	.word	0xffffffff
    33e8:	ffffffff 	.word	0xffffffff
    33ec:	ffffffff 	.word	0xffffffff
    33f0:	ffffffff 	.word	0xffffffff
    33f4:	ffffffff 	.word	0xffffffff
    33f8:	ffffffff 	.word	0xffffffff
    33fc:	ffffffff 	.word	0xffffffff
    3400:	ffffffff 	.word	0xffffffff
    3404:	ffffffff 	.word	0xffffffff
    3408:	ffffffff 	.word	0xffffffff
    340c:	ffffffff 	.word	0xffffffff
    3410:	ffffffff 	.word	0xffffffff
    3414:	ffffffff 	.word	0xffffffff
    3418:	ffffffff 	.word	0xffffffff
    341c:	ffffffff 	.word	0xffffffff
    3420:	ffffffff 	.word	0xffffffff
    3424:	ffffffff 	.word	0xffffffff
    3428:	ffffffff 	.word	0xffffffff
    342c:	ffffffff 	.word	0xffffffff
    3430:	ffffffff 	.word	0xffffffff
    3434:	ffffffff 	.word	0xffffffff
    3438:	ffffffff 	.word	0xffffffff
    343c:	ffffffff 	.word	0xffffffff
    3440:	ffffffff 	.word	0xffffffff
    3444:	ffffffff 	.word	0xffffffff
    3448:	ffffffff 	.word	0xffffffff
    344c:	ffffffff 	.word	0xffffffff
    3450:	ffffffff 	.word	0xffffffff
    3454:	ffffffff 	.word	0xffffffff
    3458:	ffffffff 	.word	0xffffffff
    345c:	ffffffff 	.word	0xffffffff
    3460:	ffffffff 	.word	0xffffffff
    3464:	ffffffff 	.word	0xffffffff
    3468:	ffffffff 	.word	0xffffffff
    346c:	ffffffff 	.word	0xffffffff
    3470:	ffffffff 	.word	0xffffffff
    3474:	ffffffff 	.word	0xffffffff
    3478:	ffffffff 	.word	0xffffffff
    347c:	ffffffff 	.word	0xffffffff
    3480:	ffffffff 	.word	0xffffffff
    3484:	ffffffff 	.word	0xffffffff
    3488:	ffffffff 	.word	0xffffffff
    348c:	ffffffff 	.word	0xffffffff
    3490:	ffffffff 	.word	0xffffffff
    3494:	ffffffff 	.word	0xffffffff
    3498:	ffffffff 	.word	0xffffffff
    349c:	ffffffff 	.word	0xffffffff
    34a0:	ffffffff 	.word	0xffffffff
    34a4:	ffffffff 	.word	0xffffffff
    34a8:	ffffffff 	.word	0xffffffff
    34ac:	ffffffff 	.word	0xffffffff
    34b0:	ffffffff 	.word	0xffffffff
    34b4:	ffffffff 	.word	0xffffffff
    34b8:	ffffffff 	.word	0xffffffff
    34bc:	ffffffff 	.word	0xffffffff
    34c0:	ffffffff 	.word	0xffffffff
    34c4:	ffffffff 	.word	0xffffffff
    34c8:	ffffffff 	.word	0xffffffff
    34cc:	ffffffff 	.word	0xffffffff
    34d0:	ffffffff 	.word	0xffffffff
    34d4:	ffffffff 	.word	0xffffffff
    34d8:	ffffffff 	.word	0xffffffff
    34dc:	ffffffff 	.word	0xffffffff
    34e0:	ffffffff 	.word	0xffffffff
    34e4:	ffffffff 	.word	0xffffffff
    34e8:	ffffffff 	.word	0xffffffff
    34ec:	ffffffff 	.word	0xffffffff
    34f0:	ffffffff 	.word	0xffffffff
    34f4:	ffffffff 	.word	0xffffffff
    34f8:	ffffffff 	.word	0xffffffff
    34fc:	ffffffff 	.word	0xffffffff
    3500:	ffffffff 	.word	0xffffffff
    3504:	ffffffff 	.word	0xffffffff
    3508:	ffffffff 	.word	0xffffffff
    350c:	ffffffff 	.word	0xffffffff
    3510:	ffffffff 	.word	0xffffffff
    3514:	ffffffff 	.word	0xffffffff
    3518:	ffffffff 	.word	0xffffffff
    351c:	ffffffff 	.word	0xffffffff
    3520:	ffffffff 	.word	0xffffffff
    3524:	ffffffff 	.word	0xffffffff
    3528:	ffffffff 	.word	0xffffffff
    352c:	ffffffff 	.word	0xffffffff
    3530:	ffffffff 	.word	0xffffffff
    3534:	ffffffff 	.word	0xffffffff
    3538:	ffffffff 	.word	0xffffffff
    353c:	ffffffff 	.word	0xffffffff
    3540:	ffffffff 	.word	0xffffffff
    3544:	ffffffff 	.word	0xffffffff
    3548:	ffffffff 	.word	0xffffffff
    354c:	ffffffff 	.word	0xffffffff
    3550:	ffffffff 	.word	0xffffffff
    3554:	ffffffff 	.word	0xffffffff
    3558:	ffffffff 	.word	0xffffffff
    355c:	ffffffff 	.word	0xffffffff
    3560:	ffffffff 	.word	0xffffffff
    3564:	ffffffff 	.word	0xffffffff
    3568:	ffffffff 	.word	0xffffffff
    356c:	ffffffff 	.word	0xffffffff
    3570:	ffffffff 	.word	0xffffffff
    3574:	ffffffff 	.word	0xffffffff
    3578:	ffffffff 	.word	0xffffffff
    357c:	ffffffff 	.word	0xffffffff
    3580:	ffffffff 	.word	0xffffffff
    3584:	ffffffff 	.word	0xffffffff
    3588:	ffffffff 	.word	0xffffffff
    358c:	ffffffff 	.word	0xffffffff
    3590:	ffffffff 	.word	0xffffffff
    3594:	ffffffff 	.word	0xffffffff
    3598:	ffffffff 	.word	0xffffffff
    359c:	ffffffff 	.word	0xffffffff
    35a0:	ffffffff 	.word	0xffffffff
    35a4:	ffffffff 	.word	0xffffffff
    35a8:	ffffffff 	.word	0xffffffff
    35ac:	ffffffff 	.word	0xffffffff
    35b0:	ffffffff 	.word	0xffffffff
    35b4:	ffffffff 	.word	0xffffffff
    35b8:	ffffffff 	.word	0xffffffff
    35bc:	ffffffff 	.word	0xffffffff
    35c0:	ffffffff 	.word	0xffffffff
    35c4:	ffffffff 	.word	0xffffffff
    35c8:	ffffffff 	.word	0xffffffff
    35cc:	ffffffff 	.word	0xffffffff
    35d0:	ffffffff 	.word	0xffffffff
    35d4:	ffffffff 	.word	0xffffffff
    35d8:	ffffffff 	.word	0xffffffff
    35dc:	ffffffff 	.word	0xffffffff
    35e0:	ffffffff 	.word	0xffffffff
    35e4:	ffffffff 	.word	0xffffffff
    35e8:	ffffffff 	.word	0xffffffff
    35ec:	ffffffff 	.word	0xffffffff
    35f0:	ffffffff 	.word	0xffffffff
    35f4:	ffffffff 	.word	0xffffffff
    35f8:	ffffffff 	.word	0xffffffff
    35fc:	ffffffff 	.word	0xffffffff
    3600:	ffffffff 	.word	0xffffffff
    3604:	ffffffff 	.word	0xffffffff
    3608:	ffffffff 	.word	0xffffffff
    360c:	ffffffff 	.word	0xffffffff
    3610:	ffffffff 	.word	0xffffffff
    3614:	ffffffff 	.word	0xffffffff
    3618:	ffffffff 	.word	0xffffffff
    361c:	ffffffff 	.word	0xffffffff
    3620:	ffffffff 	.word	0xffffffff
    3624:	ffffffff 	.word	0xffffffff
    3628:	ffffffff 	.word	0xffffffff
    362c:	ffffffff 	.word	0xffffffff
    3630:	ffffffff 	.word	0xffffffff
    3634:	ffffffff 	.word	0xffffffff
    3638:	ffffffff 	.word	0xffffffff
    363c:	ffffffff 	.word	0xffffffff
    3640:	ffffffff 	.word	0xffffffff
    3644:	ffffffff 	.word	0xffffffff
    3648:	ffffffff 	.word	0xffffffff
    364c:	ffffffff 	.word	0xffffffff
    3650:	ffffffff 	.word	0xffffffff
    3654:	ffffffff 	.word	0xffffffff
    3658:	ffffffff 	.word	0xffffffff
    365c:	ffffffff 	.word	0xffffffff
    3660:	ffffffff 	.word	0xffffffff
    3664:	ffffffff 	.word	0xffffffff
    3668:	ffffffff 	.word	0xffffffff
    366c:	ffffffff 	.word	0xffffffff
    3670:	ffffffff 	.word	0xffffffff
    3674:	ffffffff 	.word	0xffffffff
    3678:	ffffffff 	.word	0xffffffff
    367c:	ffffffff 	.word	0xffffffff
    3680:	ffffffff 	.word	0xffffffff
    3684:	ffffffff 	.word	0xffffffff
    3688:	ffffffff 	.word	0xffffffff
    368c:	ffffffff 	.word	0xffffffff
    3690:	ffffffff 	.word	0xffffffff
    3694:	ffffffff 	.word	0xffffffff
    3698:	ffffffff 	.word	0xffffffff
    369c:	ffffffff 	.word	0xffffffff
    36a0:	ffffffff 	.word	0xffffffff
    36a4:	ffffffff 	.word	0xffffffff
    36a8:	ffffffff 	.word	0xffffffff
    36ac:	ffffffff 	.word	0xffffffff
    36b0:	ffffffff 	.word	0xffffffff
    36b4:	ffffffff 	.word	0xffffffff
    36b8:	ffffffff 	.word	0xffffffff
    36bc:	ffffffff 	.word	0xffffffff
    36c0:	ffffffff 	.word	0xffffffff
    36c4:	ffffffff 	.word	0xffffffff
    36c8:	ffffffff 	.word	0xffffffff
    36cc:	ffffffff 	.word	0xffffffff
    36d0:	ffffffff 	.word	0xffffffff
    36d4:	ffffffff 	.word	0xffffffff
    36d8:	ffffffff 	.word	0xffffffff
    36dc:	ffffffff 	.word	0xffffffff
    36e0:	ffffffff 	.word	0xffffffff
    36e4:	ffffffff 	.word	0xffffffff
    36e8:	ffffffff 	.word	0xffffffff
    36ec:	ffffffff 	.word	0xffffffff
    36f0:	ffffffff 	.word	0xffffffff
    36f4:	ffffffff 	.word	0xffffffff
    36f8:	ffffffff 	.word	0xffffffff
    36fc:	ffffffff 	.word	0xffffffff
    3700:	ffffffff 	.word	0xffffffff
    3704:	ffffffff 	.word	0xffffffff
    3708:	ffffffff 	.word	0xffffffff
    370c:	ffffffff 	.word	0xffffffff
    3710:	ffffffff 	.word	0xffffffff
    3714:	ffffffff 	.word	0xffffffff
    3718:	ffffffff 	.word	0xffffffff
    371c:	ffffffff 	.word	0xffffffff
    3720:	ffffffff 	.word	0xffffffff
    3724:	ffffffff 	.word	0xffffffff
    3728:	ffffffff 	.word	0xffffffff
    372c:	ffffffff 	.word	0xffffffff
    3730:	ffffffff 	.word	0xffffffff
    3734:	ffffffff 	.word	0xffffffff
    3738:	ffffffff 	.word	0xffffffff
    373c:	ffffffff 	.word	0xffffffff
    3740:	ffffffff 	.word	0xffffffff
    3744:	ffffffff 	.word	0xffffffff
    3748:	ffffffff 	.word	0xffffffff
    374c:	ffffffff 	.word	0xffffffff
    3750:	ffffffff 	.word	0xffffffff
    3754:	ffffffff 	.word	0xffffffff
    3758:	ffffffff 	.word	0xffffffff
    375c:	ffffffff 	.word	0xffffffff
    3760:	ffffffff 	.word	0xffffffff
    3764:	ffffffff 	.word	0xffffffff
    3768:	ffffffff 	.word	0xffffffff
    376c:	ffffffff 	.word	0xffffffff
    3770:	ffffffff 	.word	0xffffffff
    3774:	ffffffff 	.word	0xffffffff
    3778:	ffffffff 	.word	0xffffffff
    377c:	ffffffff 	.word	0xffffffff
    3780:	ffffffff 	.word	0xffffffff
    3784:	ffffffff 	.word	0xffffffff
    3788:	ffffffff 	.word	0xffffffff
    378c:	ffffffff 	.word	0xffffffff
    3790:	ffffffff 	.word	0xffffffff
    3794:	ffffffff 	.word	0xffffffff
    3798:	ffffffff 	.word	0xffffffff
    379c:	ffffffff 	.word	0xffffffff
    37a0:	ffffffff 	.word	0xffffffff
    37a4:	ffffffff 	.word	0xffffffff
    37a8:	ffffffff 	.word	0xffffffff
    37ac:	ffffffff 	.word	0xffffffff
    37b0:	ffffffff 	.word	0xffffffff
    37b4:	ffffffff 	.word	0xffffffff
    37b8:	ffffffff 	.word	0xffffffff
    37bc:	ffffffff 	.word	0xffffffff
    37c0:	ffffffff 	.word	0xffffffff
    37c4:	ffffffff 	.word	0xffffffff
    37c8:	ffffffff 	.word	0xffffffff
    37cc:	ffffffff 	.word	0xffffffff
    37d0:	ffffffff 	.word	0xffffffff
    37d4:	ffffffff 	.word	0xffffffff
    37d8:	ffffffff 	.word	0xffffffff
    37dc:	ffffffff 	.word	0xffffffff
    37e0:	ffffffff 	.word	0xffffffff
    37e4:	ffffffff 	.word	0xffffffff
    37e8:	ffffffff 	.word	0xffffffff
    37ec:	ffffffff 	.word	0xffffffff
    37f0:	ffffffff 	.word	0xffffffff
    37f4:	ffffffff 	.word	0xffffffff
    37f8:	ffffffff 	.word	0xffffffff
    37fc:	ffffffff 	.word	0xffffffff
    3800:	ffffffff 	.word	0xffffffff
    3804:	ffffffff 	.word	0xffffffff
    3808:	ffffffff 	.word	0xffffffff
    380c:	ffffffff 	.word	0xffffffff
    3810:	ffffffff 	.word	0xffffffff
    3814:	ffffffff 	.word	0xffffffff
    3818:	ffffffff 	.word	0xffffffff
    381c:	ffffffff 	.word	0xffffffff
    3820:	ffffffff 	.word	0xffffffff
    3824:	ffffffff 	.word	0xffffffff
    3828:	ffffffff 	.word	0xffffffff
    382c:	ffffffff 	.word	0xffffffff
    3830:	ffffffff 	.word	0xffffffff
    3834:	ffffffff 	.word	0xffffffff
    3838:	ffffffff 	.word	0xffffffff
    383c:	ffffffff 	.word	0xffffffff
    3840:	ffffffff 	.word	0xffffffff
    3844:	ffffffff 	.word	0xffffffff
    3848:	ffffffff 	.word	0xffffffff
    384c:	ffffffff 	.word	0xffffffff
    3850:	ffffffff 	.word	0xffffffff
    3854:	ffffffff 	.word	0xffffffff
    3858:	ffffffff 	.word	0xffffffff
    385c:	ffffffff 	.word	0xffffffff
    3860:	ffffffff 	.word	0xffffffff
    3864:	ffffffff 	.word	0xffffffff
    3868:	ffffffff 	.word	0xffffffff
    386c:	ffffffff 	.word	0xffffffff
    3870:	ffffffff 	.word	0xffffffff
    3874:	ffffffff 	.word	0xffffffff
    3878:	ffffffff 	.word	0xffffffff
    387c:	ffffffff 	.word	0xffffffff
    3880:	ffffffff 	.word	0xffffffff
    3884:	ffffffff 	.word	0xffffffff
    3888:	ffffffff 	.word	0xffffffff
    388c:	ffffffff 	.word	0xffffffff
    3890:	ffffffff 	.word	0xffffffff
    3894:	ffffffff 	.word	0xffffffff
    3898:	ffffffff 	.word	0xffffffff
    389c:	ffffffff 	.word	0xffffffff
    38a0:	ffffffff 	.word	0xffffffff
    38a4:	ffffffff 	.word	0xffffffff
    38a8:	ffffffff 	.word	0xffffffff
    38ac:	ffffffff 	.word	0xffffffff
    38b0:	ffffffff 	.word	0xffffffff
    38b4:	ffffffff 	.word	0xffffffff
    38b8:	ffffffff 	.word	0xffffffff
    38bc:	ffffffff 	.word	0xffffffff
    38c0:	ffffffff 	.word	0xffffffff
    38c4:	ffffffff 	.word	0xffffffff
    38c8:	ffffffff 	.word	0xffffffff
    38cc:	ffffffff 	.word	0xffffffff
    38d0:	ffffffff 	.word	0xffffffff
    38d4:	ffffffff 	.word	0xffffffff
    38d8:	ffffffff 	.word	0xffffffff
    38dc:	ffffffff 	.word	0xffffffff
    38e0:	ffffffff 	.word	0xffffffff
    38e4:	ffffffff 	.word	0xffffffff
    38e8:	ffffffff 	.word	0xffffffff
    38ec:	ffffffff 	.word	0xffffffff
    38f0:	ffffffff 	.word	0xffffffff
    38f4:	ffffffff 	.word	0xffffffff
    38f8:	ffffffff 	.word	0xffffffff
    38fc:	ffffffff 	.word	0xffffffff
    3900:	ffffffff 	.word	0xffffffff
    3904:	ffffffff 	.word	0xffffffff
    3908:	ffffffff 	.word	0xffffffff
    390c:	ffffffff 	.word	0xffffffff
    3910:	ffffffff 	.word	0xffffffff
    3914:	ffffffff 	.word	0xffffffff
    3918:	ffffffff 	.word	0xffffffff
    391c:	ffffffff 	.word	0xffffffff
    3920:	ffffffff 	.word	0xffffffff
    3924:	ffffffff 	.word	0xffffffff
    3928:	ffffffff 	.word	0xffffffff
    392c:	ffffffff 	.word	0xffffffff
    3930:	ffffffff 	.word	0xffffffff
    3934:	ffffffff 	.word	0xffffffff
    3938:	ffffffff 	.word	0xffffffff
    393c:	ffffffff 	.word	0xffffffff
    3940:	ffffffff 	.word	0xffffffff
    3944:	ffffffff 	.word	0xffffffff
    3948:	ffffffff 	.word	0xffffffff
    394c:	ffffffff 	.word	0xffffffff
    3950:	ffffffff 	.word	0xffffffff
    3954:	ffffffff 	.word	0xffffffff
    3958:	ffffffff 	.word	0xffffffff
    395c:	ffffffff 	.word	0xffffffff
    3960:	ffffffff 	.word	0xffffffff
    3964:	ffffffff 	.word	0xffffffff
    3968:	ffffffff 	.word	0xffffffff
    396c:	ffffffff 	.word	0xffffffff
    3970:	ffffffff 	.word	0xffffffff
    3974:	ffffffff 	.word	0xffffffff
    3978:	ffffffff 	.word	0xffffffff
    397c:	ffffffff 	.word	0xffffffff
    3980:	ffffffff 	.word	0xffffffff
    3984:	ffffffff 	.word	0xffffffff
    3988:	ffffffff 	.word	0xffffffff
    398c:	ffffffff 	.word	0xffffffff
    3990:	ffffffff 	.word	0xffffffff
    3994:	ffffffff 	.word	0xffffffff
    3998:	ffffffff 	.word	0xffffffff
    399c:	ffffffff 	.word	0xffffffff
    39a0:	ffffffff 	.word	0xffffffff
    39a4:	ffffffff 	.word	0xffffffff
    39a8:	ffffffff 	.word	0xffffffff
    39ac:	ffffffff 	.word	0xffffffff
    39b0:	ffffffff 	.word	0xffffffff
    39b4:	ffffffff 	.word	0xffffffff
    39b8:	ffffffff 	.word	0xffffffff
    39bc:	ffffffff 	.word	0xffffffff
    39c0:	ffffffff 	.word	0xffffffff
    39c4:	ffffffff 	.word	0xffffffff
    39c8:	ffffffff 	.word	0xffffffff
    39cc:	ffffffff 	.word	0xffffffff
    39d0:	ffffffff 	.word	0xffffffff
    39d4:	ffffffff 	.word	0xffffffff
    39d8:	ffffffff 	.word	0xffffffff
    39dc:	ffffffff 	.word	0xffffffff
    39e0:	ffffffff 	.word	0xffffffff
    39e4:	ffffffff 	.word	0xffffffff
    39e8:	ffffffff 	.word	0xffffffff
    39ec:	ffffffff 	.word	0xffffffff
    39f0:	ffffffff 	.word	0xffffffff
    39f4:	ffffffff 	.word	0xffffffff
    39f8:	ffffffff 	.word	0xffffffff
    39fc:	ffffffff 	.word	0xffffffff
    3a00:	ffffffff 	.word	0xffffffff
    3a04:	ffffffff 	.word	0xffffffff
    3a08:	ffffffff 	.word	0xffffffff
    3a0c:	ffffffff 	.word	0xffffffff
    3a10:	ffffffff 	.word	0xffffffff
    3a14:	ffffffff 	.word	0xffffffff
    3a18:	ffffffff 	.word	0xffffffff
    3a1c:	ffffffff 	.word	0xffffffff
    3a20:	ffffffff 	.word	0xffffffff
    3a24:	ffffffff 	.word	0xffffffff
    3a28:	ffffffff 	.word	0xffffffff
    3a2c:	ffffffff 	.word	0xffffffff
    3a30:	ffffffff 	.word	0xffffffff
    3a34:	ffffffff 	.word	0xffffffff
    3a38:	ffffffff 	.word	0xffffffff
    3a3c:	ffffffff 	.word	0xffffffff
    3a40:	ffffffff 	.word	0xffffffff
    3a44:	ffffffff 	.word	0xffffffff
    3a48:	ffffffff 	.word	0xffffffff
    3a4c:	ffffffff 	.word	0xffffffff
    3a50:	ffffffff 	.word	0xffffffff
    3a54:	ffffffff 	.word	0xffffffff
    3a58:	ffffffff 	.word	0xffffffff
    3a5c:	ffffffff 	.word	0xffffffff
    3a60:	ffffffff 	.word	0xffffffff
    3a64:	ffffffff 	.word	0xffffffff
    3a68:	ffffffff 	.word	0xffffffff
    3a6c:	ffffffff 	.word	0xffffffff
    3a70:	ffffffff 	.word	0xffffffff
    3a74:	ffffffff 	.word	0xffffffff
    3a78:	ffffffff 	.word	0xffffffff
    3a7c:	ffffffff 	.word	0xffffffff
    3a80:	ffffffff 	.word	0xffffffff
    3a84:	ffffffff 	.word	0xffffffff
    3a88:	ffffffff 	.word	0xffffffff
    3a8c:	ffffffff 	.word	0xffffffff
    3a90:	ffffffff 	.word	0xffffffff
    3a94:	ffffffff 	.word	0xffffffff
    3a98:	ffffffff 	.word	0xffffffff
    3a9c:	ffffffff 	.word	0xffffffff
    3aa0:	ffffffff 	.word	0xffffffff
    3aa4:	ffffffff 	.word	0xffffffff
    3aa8:	ffffffff 	.word	0xffffffff
    3aac:	ffffffff 	.word	0xffffffff
    3ab0:	ffffffff 	.word	0xffffffff
    3ab4:	ffffffff 	.word	0xffffffff
    3ab8:	ffffffff 	.word	0xffffffff
    3abc:	ffffffff 	.word	0xffffffff
    3ac0:	ffffffff 	.word	0xffffffff
    3ac4:	ffffffff 	.word	0xffffffff
    3ac8:	ffffffff 	.word	0xffffffff
    3acc:	ffffffff 	.word	0xffffffff
    3ad0:	ffffffff 	.word	0xffffffff
    3ad4:	ffffffff 	.word	0xffffffff
    3ad8:	ffffffff 	.word	0xffffffff
    3adc:	ffffffff 	.word	0xffffffff
    3ae0:	ffffffff 	.word	0xffffffff
    3ae4:	ffffffff 	.word	0xffffffff
    3ae8:	ffffffff 	.word	0xffffffff
    3aec:	ffffffff 	.word	0xffffffff
    3af0:	ffffffff 	.word	0xffffffff
    3af4:	ffffffff 	.word	0xffffffff
    3af8:	ffffffff 	.word	0xffffffff
    3afc:	ffffffff 	.word	0xffffffff
    3b00:	ffffffff 	.word	0xffffffff
    3b04:	ffffffff 	.word	0xffffffff
    3b08:	ffffffff 	.word	0xffffffff
    3b0c:	ffffffff 	.word	0xffffffff
    3b10:	ffffffff 	.word	0xffffffff
    3b14:	ffffffff 	.word	0xffffffff
    3b18:	ffffffff 	.word	0xffffffff
    3b1c:	ffffffff 	.word	0xffffffff
    3b20:	ffffffff 	.word	0xffffffff
    3b24:	ffffffff 	.word	0xffffffff
    3b28:	ffffffff 	.word	0xffffffff
    3b2c:	ffffffff 	.word	0xffffffff
    3b30:	ffffffff 	.word	0xffffffff
    3b34:	ffffffff 	.word	0xffffffff
    3b38:	ffffffff 	.word	0xffffffff
    3b3c:	ffffffff 	.word	0xffffffff
    3b40:	ffffffff 	.word	0xffffffff
    3b44:	ffffffff 	.word	0xffffffff
    3b48:	ffffffff 	.word	0xffffffff
    3b4c:	ffffffff 	.word	0xffffffff
    3b50:	ffffffff 	.word	0xffffffff
    3b54:	ffffffff 	.word	0xffffffff
    3b58:	ffffffff 	.word	0xffffffff
    3b5c:	ffffffff 	.word	0xffffffff
    3b60:	ffffffff 	.word	0xffffffff
    3b64:	ffffffff 	.word	0xffffffff
    3b68:	ffffffff 	.word	0xffffffff
    3b6c:	ffffffff 	.word	0xffffffff
    3b70:	ffffffff 	.word	0xffffffff
    3b74:	ffffffff 	.word	0xffffffff
    3b78:	ffffffff 	.word	0xffffffff
    3b7c:	ffffffff 	.word	0xffffffff
    3b80:	ffffffff 	.word	0xffffffff
    3b84:	ffffffff 	.word	0xffffffff
    3b88:	ffffffff 	.word	0xffffffff
    3b8c:	ffffffff 	.word	0xffffffff
    3b90:	ffffffff 	.word	0xffffffff
    3b94:	ffffffff 	.word	0xffffffff
    3b98:	ffffffff 	.word	0xffffffff
    3b9c:	ffffffff 	.word	0xffffffff
    3ba0:	ffffffff 	.word	0xffffffff
    3ba4:	ffffffff 	.word	0xffffffff
    3ba8:	ffffffff 	.word	0xffffffff
    3bac:	ffffffff 	.word	0xffffffff
    3bb0:	ffffffff 	.word	0xffffffff
    3bb4:	ffffffff 	.word	0xffffffff
    3bb8:	ffffffff 	.word	0xffffffff
    3bbc:	ffffffff 	.word	0xffffffff
    3bc0:	ffffffff 	.word	0xffffffff
    3bc4:	ffffffff 	.word	0xffffffff
    3bc8:	ffffffff 	.word	0xffffffff
    3bcc:	ffffffff 	.word	0xffffffff
    3bd0:	ffffffff 	.word	0xffffffff
    3bd4:	ffffffff 	.word	0xffffffff
    3bd8:	ffffffff 	.word	0xffffffff
    3bdc:	ffffffff 	.word	0xffffffff
    3be0:	ffffffff 	.word	0xffffffff
    3be4:	ffffffff 	.word	0xffffffff
    3be8:	ffffffff 	.word	0xffffffff
    3bec:	ffffffff 	.word	0xffffffff
    3bf0:	ffffffff 	.word	0xffffffff
    3bf4:	ffffffff 	.word	0xffffffff
    3bf8:	ffffffff 	.word	0xffffffff
    3bfc:	ffffffff 	.word	0xffffffff
    3c00:	ffffffff 	.word	0xffffffff
    3c04:	ffffffff 	.word	0xffffffff
    3c08:	ffffffff 	.word	0xffffffff
    3c0c:	ffffffff 	.word	0xffffffff
    3c10:	ffffffff 	.word	0xffffffff
    3c14:	ffffffff 	.word	0xffffffff
    3c18:	ffffffff 	.word	0xffffffff
    3c1c:	ffffffff 	.word	0xffffffff
    3c20:	ffffffff 	.word	0xffffffff
    3c24:	ffffffff 	.word	0xffffffff
    3c28:	ffffffff 	.word	0xffffffff
    3c2c:	ffffffff 	.word	0xffffffff
    3c30:	ffffffff 	.word	0xffffffff
    3c34:	ffffffff 	.word	0xffffffff
    3c38:	ffffffff 	.word	0xffffffff
    3c3c:	ffffffff 	.word	0xffffffff
    3c40:	ffffffff 	.word	0xffffffff
    3c44:	ffffffff 	.word	0xffffffff
    3c48:	ffffffff 	.word	0xffffffff
    3c4c:	ffffffff 	.word	0xffffffff
    3c50:	ffffffff 	.word	0xffffffff
    3c54:	ffffffff 	.word	0xffffffff
    3c58:	ffffffff 	.word	0xffffffff
    3c5c:	ffffffff 	.word	0xffffffff
    3c60:	ffffffff 	.word	0xffffffff
    3c64:	ffffffff 	.word	0xffffffff
    3c68:	ffffffff 	.word	0xffffffff
    3c6c:	ffffffff 	.word	0xffffffff
    3c70:	ffffffff 	.word	0xffffffff
    3c74:	ffffffff 	.word	0xffffffff
    3c78:	ffffffff 	.word	0xffffffff
    3c7c:	ffffffff 	.word	0xffffffff
    3c80:	ffffffff 	.word	0xffffffff
    3c84:	ffffffff 	.word	0xffffffff
    3c88:	ffffffff 	.word	0xffffffff
    3c8c:	ffffffff 	.word	0xffffffff
    3c90:	ffffffff 	.word	0xffffffff
    3c94:	ffffffff 	.word	0xffffffff
    3c98:	ffffffff 	.word	0xffffffff
    3c9c:	ffffffff 	.word	0xffffffff
    3ca0:	ffffffff 	.word	0xffffffff
    3ca4:	ffffffff 	.word	0xffffffff
    3ca8:	ffffffff 	.word	0xffffffff
    3cac:	ffffffff 	.word	0xffffffff
    3cb0:	ffffffff 	.word	0xffffffff
    3cb4:	ffffffff 	.word	0xffffffff
    3cb8:	ffffffff 	.word	0xffffffff
    3cbc:	ffffffff 	.word	0xffffffff
    3cc0:	ffffffff 	.word	0xffffffff
    3cc4:	ffffffff 	.word	0xffffffff
    3cc8:	ffffffff 	.word	0xffffffff
    3ccc:	ffffffff 	.word	0xffffffff
    3cd0:	ffffffff 	.word	0xffffffff
    3cd4:	ffffffff 	.word	0xffffffff
    3cd8:	ffffffff 	.word	0xffffffff
    3cdc:	ffffffff 	.word	0xffffffff
    3ce0:	ffffffff 	.word	0xffffffff
    3ce4:	ffffffff 	.word	0xffffffff
    3ce8:	ffffffff 	.word	0xffffffff
    3cec:	ffffffff 	.word	0xffffffff
    3cf0:	ffffffff 	.word	0xffffffff
    3cf4:	ffffffff 	.word	0xffffffff
    3cf8:	ffffffff 	.word	0xffffffff
    3cfc:	ffffffff 	.word	0xffffffff
    3d00:	ffffffff 	.word	0xffffffff
    3d04:	ffffffff 	.word	0xffffffff
    3d08:	ffffffff 	.word	0xffffffff
    3d0c:	ffffffff 	.word	0xffffffff
    3d10:	ffffffff 	.word	0xffffffff
    3d14:	ffffffff 	.word	0xffffffff
    3d18:	ffffffff 	.word	0xffffffff
    3d1c:	ffffffff 	.word	0xffffffff
    3d20:	ffffffff 	.word	0xffffffff
    3d24:	ffffffff 	.word	0xffffffff
    3d28:	ffffffff 	.word	0xffffffff
    3d2c:	ffffffff 	.word	0xffffffff
    3d30:	ffffffff 	.word	0xffffffff
    3d34:	ffffffff 	.word	0xffffffff
    3d38:	ffffffff 	.word	0xffffffff
    3d3c:	ffffffff 	.word	0xffffffff
    3d40:	ffffffff 	.word	0xffffffff
    3d44:	ffffffff 	.word	0xffffffff
    3d48:	ffffffff 	.word	0xffffffff
    3d4c:	ffffffff 	.word	0xffffffff
    3d50:	ffffffff 	.word	0xffffffff
    3d54:	ffffffff 	.word	0xffffffff
    3d58:	ffffffff 	.word	0xffffffff
    3d5c:	ffffffff 	.word	0xffffffff
    3d60:	ffffffff 	.word	0xffffffff
    3d64:	ffffffff 	.word	0xffffffff
    3d68:	ffffffff 	.word	0xffffffff
    3d6c:	ffffffff 	.word	0xffffffff
    3d70:	ffffffff 	.word	0xffffffff
    3d74:	ffffffff 	.word	0xffffffff
    3d78:	ffffffff 	.word	0xffffffff
    3d7c:	ffffffff 	.word	0xffffffff
    3d80:	ffffffff 	.word	0xffffffff
    3d84:	ffffffff 	.word	0xffffffff
    3d88:	ffffffff 	.word	0xffffffff
    3d8c:	ffffffff 	.word	0xffffffff
    3d90:	ffffffff 	.word	0xffffffff
    3d94:	ffffffff 	.word	0xffffffff
    3d98:	ffffffff 	.word	0xffffffff
    3d9c:	ffffffff 	.word	0xffffffff
    3da0:	ffffffff 	.word	0xffffffff
    3da4:	ffffffff 	.word	0xffffffff
    3da8:	ffffffff 	.word	0xffffffff
    3dac:	ffffffff 	.word	0xffffffff
    3db0:	ffffffff 	.word	0xffffffff
    3db4:	ffffffff 	.word	0xffffffff
    3db8:	ffffffff 	.word	0xffffffff
    3dbc:	ffffffff 	.word	0xffffffff
    3dc0:	ffffffff 	.word	0xffffffff
    3dc4:	ffffffff 	.word	0xffffffff
    3dc8:	ffffffff 	.word	0xffffffff
    3dcc:	ffffffff 	.word	0xffffffff
    3dd0:	ffffffff 	.word	0xffffffff
    3dd4:	ffffffff 	.word	0xffffffff
    3dd8:	ffffffff 	.word	0xffffffff
    3ddc:	ffffffff 	.word	0xffffffff
    3de0:	ffffffff 	.word	0xffffffff
    3de4:	ffffffff 	.word	0xffffffff
    3de8:	ffffffff 	.word	0xffffffff
    3dec:	ffffffff 	.word	0xffffffff
    3df0:	ffffffff 	.word	0xffffffff
    3df4:	ffffffff 	.word	0xffffffff
    3df8:	ffffffff 	.word	0xffffffff
    3dfc:	ffffffff 	.word	0xffffffff
    3e00:	ffffffff 	.word	0xffffffff
    3e04:	ffffffff 	.word	0xffffffff
    3e08:	ffffffff 	.word	0xffffffff
    3e0c:	ffffffff 	.word	0xffffffff
    3e10:	ffffffff 	.word	0xffffffff
    3e14:	ffffffff 	.word	0xffffffff
    3e18:	ffffffff 	.word	0xffffffff
    3e1c:	ffffffff 	.word	0xffffffff
    3e20:	ffffffff 	.word	0xffffffff
    3e24:	ffffffff 	.word	0xffffffff
    3e28:	ffffffff 	.word	0xffffffff
    3e2c:	ffffffff 	.word	0xffffffff
    3e30:	ffffffff 	.word	0xffffffff
    3e34:	ffffffff 	.word	0xffffffff
    3e38:	ffffffff 	.word	0xffffffff
    3e3c:	ffffffff 	.word	0xffffffff
    3e40:	ffffffff 	.word	0xffffffff
    3e44:	ffffffff 	.word	0xffffffff
    3e48:	ffffffff 	.word	0xffffffff
    3e4c:	ffffffff 	.word	0xffffffff
    3e50:	ffffffff 	.word	0xffffffff
    3e54:	ffffffff 	.word	0xffffffff
    3e58:	ffffffff 	.word	0xffffffff
    3e5c:	ffffffff 	.word	0xffffffff
    3e60:	ffffffff 	.word	0xffffffff
    3e64:	ffffffff 	.word	0xffffffff
    3e68:	ffffffff 	.word	0xffffffff
    3e6c:	ffffffff 	.word	0xffffffff
    3e70:	ffffffff 	.word	0xffffffff
    3e74:	ffffffff 	.word	0xffffffff
    3e78:	ffffffff 	.word	0xffffffff
    3e7c:	ffffffff 	.word	0xffffffff
    3e80:	ffffffff 	.word	0xffffffff
    3e84:	ffffffff 	.word	0xffffffff
    3e88:	ffffffff 	.word	0xffffffff
    3e8c:	ffffffff 	.word	0xffffffff
    3e90:	ffffffff 	.word	0xffffffff
    3e94:	ffffffff 	.word	0xffffffff
    3e98:	ffffffff 	.word	0xffffffff
    3e9c:	ffffffff 	.word	0xffffffff
    3ea0:	ffffffff 	.word	0xffffffff
    3ea4:	ffffffff 	.word	0xffffffff
    3ea8:	ffffffff 	.word	0xffffffff
    3eac:	ffffffff 	.word	0xffffffff
    3eb0:	ffffffff 	.word	0xffffffff
    3eb4:	ffffffff 	.word	0xffffffff
    3eb8:	ffffffff 	.word	0xffffffff
    3ebc:	ffffffff 	.word	0xffffffff
    3ec0:	ffffffff 	.word	0xffffffff
    3ec4:	ffffffff 	.word	0xffffffff
    3ec8:	ffffffff 	.word	0xffffffff
    3ecc:	ffffffff 	.word	0xffffffff
    3ed0:	ffffffff 	.word	0xffffffff
    3ed4:	ffffffff 	.word	0xffffffff
    3ed8:	ffffffff 	.word	0xffffffff
    3edc:	ffffffff 	.word	0xffffffff
    3ee0:	ffffffff 	.word	0xffffffff
    3ee4:	ffffffff 	.word	0xffffffff
    3ee8:	ffffffff 	.word	0xffffffff
    3eec:	ffffffff 	.word	0xffffffff
    3ef0:	ffffffff 	.word	0xffffffff
    3ef4:	ffffffff 	.word	0xffffffff
    3ef8:	ffffffff 	.word	0xffffffff
    3efc:	ffffffff 	.word	0xffffffff
    3f00:	ffffffff 	.word	0xffffffff
    3f04:	ffffffff 	.word	0xffffffff
    3f08:	ffffffff 	.word	0xffffffff
    3f0c:	ffffffff 	.word	0xffffffff
    3f10:	ffffffff 	.word	0xffffffff
    3f14:	ffffffff 	.word	0xffffffff
    3f18:	ffffffff 	.word	0xffffffff
    3f1c:	ffffffff 	.word	0xffffffff
    3f20:	ffffffff 	.word	0xffffffff
    3f24:	ffffffff 	.word	0xffffffff
    3f28:	ffffffff 	.word	0xffffffff
    3f2c:	ffffffff 	.word	0xffffffff
    3f30:	ffffffff 	.word	0xffffffff
    3f34:	ffffffff 	.word	0xffffffff
    3f38:	ffffffff 	.word	0xffffffff
    3f3c:	ffffffff 	.word	0xffffffff
    3f40:	ffffffff 	.word	0xffffffff
    3f44:	ffffffff 	.word	0xffffffff
    3f48:	ffffffff 	.word	0xffffffff
    3f4c:	ffffffff 	.word	0xffffffff
    3f50:	ffffffff 	.word	0xffffffff
    3f54:	ffffffff 	.word	0xffffffff
    3f58:	ffffffff 	.word	0xffffffff
    3f5c:	ffffffff 	.word	0xffffffff
    3f60:	ffffffff 	.word	0xffffffff
    3f64:	ffffffff 	.word	0xffffffff
    3f68:	ffffffff 	.word	0xffffffff
    3f6c:	ffffffff 	.word	0xffffffff
    3f70:	ffffffff 	.word	0xffffffff
    3f74:	ffffffff 	.word	0xffffffff
    3f78:	ffffffff 	.word	0xffffffff
    3f7c:	ffffffff 	.word	0xffffffff
    3f80:	ffffffff 	.word	0xffffffff
    3f84:	ffffffff 	.word	0xffffffff
    3f88:	ffffffff 	.word	0xffffffff
    3f8c:	ffffffff 	.word	0xffffffff
    3f90:	ffffffff 	.word	0xffffffff
    3f94:	ffffffff 	.word	0xffffffff
    3f98:	ffffffff 	.word	0xffffffff
    3f9c:	ffffffff 	.word	0xffffffff
    3fa0:	ffffffff 	.word	0xffffffff
    3fa4:	ffffffff 	.word	0xffffffff
    3fa8:	ffffffff 	.word	0xffffffff
    3fac:	ffffffff 	.word	0xffffffff
    3fb0:	ffffffff 	.word	0xffffffff
    3fb4:	ffffffff 	.word	0xffffffff
    3fb8:	ffffffff 	.word	0xffffffff
    3fbc:	ffffffff 	.word	0xffffffff
    3fc0:	ffffffff 	.word	0xffffffff
    3fc4:	ffffffff 	.word	0xffffffff
    3fc8:	ffffffff 	.word	0xffffffff
    3fcc:	ffffffff 	.word	0xffffffff
    3fd0:	ffffffff 	.word	0xffffffff
    3fd4:	ffffffff 	.word	0xffffffff
    3fd8:	ffffffff 	.word	0xffffffff
    3fdc:	ffffffff 	.word	0xffffffff
    3fe0:	ffffffff 	.word	0xffffffff
    3fe4:	ffffffff 	.word	0xffffffff
    3fe8:	ffffffff 	.word	0xffffffff
    3fec:	ffffffff 	.word	0xffffffff
    3ff0:	ffffffff 	.word	0xffffffff
    3ff4:	ffffffff 	.word	0xffffffff
    3ff8:	ffffffff 	.word	0xffffffff
    3ffc:	ffffffff 	.word	0xffffffff
    4000:	ffffffff 	.word	0xffffffff
    4004:	ffffffff 	.word	0xffffffff
    4008:	ffffffff 	.word	0xffffffff
    400c:	ffffffff 	.word	0xffffffff
    4010:	ffffffff 	.word	0xffffffff
    4014:	ffffffff 	.word	0xffffffff
    4018:	ffffffff 	.word	0xffffffff
    401c:	ffffffff 	.word	0xffffffff
    4020:	ffffffff 	.word	0xffffffff
    4024:	ffffffff 	.word	0xffffffff
    4028:	ffffffff 	.word	0xffffffff
    402c:	ffffffff 	.word	0xffffffff
    4030:	ffffffff 	.word	0xffffffff
    4034:	ffffffff 	.word	0xffffffff
    4038:	ffffffff 	.word	0xffffffff
    403c:	ffffffff 	.word	0xffffffff
    4040:	ffffffff 	.word	0xffffffff
    4044:	ffffffff 	.word	0xffffffff
    4048:	ffffffff 	.word	0xffffffff
    404c:	ffffffff 	.word	0xffffffff
    4050:	ffffffff 	.word	0xffffffff
    4054:	ffffffff 	.word	0xffffffff
    4058:	ffffffff 	.word	0xffffffff
    405c:	ffffffff 	.word	0xffffffff
    4060:	ffffffff 	.word	0xffffffff
    4064:	ffffffff 	.word	0xffffffff
    4068:	ffffffff 	.word	0xffffffff
    406c:	ffffffff 	.word	0xffffffff
    4070:	ffffffff 	.word	0xffffffff
    4074:	ffffffff 	.word	0xffffffff
    4078:	ffffffff 	.word	0xffffffff
    407c:	ffffffff 	.word	0xffffffff
    4080:	ffffffff 	.word	0xffffffff
    4084:	ffffffff 	.word	0xffffffff
    4088:	ffffffff 	.word	0xffffffff
    408c:	ffffffff 	.word	0xffffffff
    4090:	ffffffff 	.word	0xffffffff
    4094:	ffffffff 	.word	0xffffffff
    4098:	ffffffff 	.word	0xffffffff
    409c:	ffffffff 	.word	0xffffffff
    40a0:	ffffffff 	.word	0xffffffff
    40a4:	ffffffff 	.word	0xffffffff
    40a8:	ffffffff 	.word	0xffffffff
    40ac:	ffffffff 	.word	0xffffffff
    40b0:	ffffffff 	.word	0xffffffff
    40b4:	ffffffff 	.word	0xffffffff
    40b8:	ffffffff 	.word	0xffffffff
    40bc:	ffffffff 	.word	0xffffffff
    40c0:	ffffffff 	.word	0xffffffff
    40c4:	ffffffff 	.word	0xffffffff
    40c8:	ffffffff 	.word	0xffffffff
    40cc:	ffffffff 	.word	0xffffffff
    40d0:	ffffffff 	.word	0xffffffff
    40d4:	ffffffff 	.word	0xffffffff
    40d8:	ffffffff 	.word	0xffffffff
    40dc:	ffffffff 	.word	0xffffffff
    40e0:	ffffffff 	.word	0xffffffff
    40e4:	ffffffff 	.word	0xffffffff
    40e8:	ffffffff 	.word	0xffffffff
    40ec:	ffffffff 	.word	0xffffffff
    40f0:	ffffffff 	.word	0xffffffff
    40f4:	ffffffff 	.word	0xffffffff
    40f8:	ffffffff 	.word	0xffffffff
    40fc:	ffffffff 	.word	0xffffffff
    4100:	ffffffff 	.word	0xffffffff
    4104:	ffffffff 	.word	0xffffffff
    4108:	ffffffff 	.word	0xffffffff
    410c:	ffffffff 	.word	0xffffffff
    4110:	ffffffff 	.word	0xffffffff
    4114:	ffffffff 	.word	0xffffffff
    4118:	ffffffff 	.word	0xffffffff
    411c:	ffffffff 	.word	0xffffffff
    4120:	ffffffff 	.word	0xffffffff
    4124:	ffffffff 	.word	0xffffffff
    4128:	ffffffff 	.word	0xffffffff
    412c:	ffffffff 	.word	0xffffffff
    4130:	ffffffff 	.word	0xffffffff
    4134:	ffffffff 	.word	0xffffffff
    4138:	ffffffff 	.word	0xffffffff
    413c:	ffffffff 	.word	0xffffffff
    4140:	ffffffff 	.word	0xffffffff
    4144:	ffffffff 	.word	0xffffffff
    4148:	ffffffff 	.word	0xffffffff
    414c:	ffffffff 	.word	0xffffffff
    4150:	ffffffff 	.word	0xffffffff
    4154:	ffffffff 	.word	0xffffffff
    4158:	ffffffff 	.word	0xffffffff
    415c:	ffffffff 	.word	0xffffffff
    4160:	ffffffff 	.word	0xffffffff
    4164:	ffffffff 	.word	0xffffffff
    4168:	ffffffff 	.word	0xffffffff
    416c:	ffffffff 	.word	0xffffffff
    4170:	ffffffff 	.word	0xffffffff
    4174:	ffffffff 	.word	0xffffffff
    4178:	ffffffff 	.word	0xffffffff
    417c:	ffffffff 	.word	0xffffffff
    4180:	ffffffff 	.word	0xffffffff
    4184:	ffffffff 	.word	0xffffffff
    4188:	ffffffff 	.word	0xffffffff
    418c:	ffffffff 	.word	0xffffffff
    4190:	ffffffff 	.word	0xffffffff
    4194:	ffffffff 	.word	0xffffffff
    4198:	ffffffff 	.word	0xffffffff
    419c:	ffffffff 	.word	0xffffffff
    41a0:	ffffffff 	.word	0xffffffff
    41a4:	ffffffff 	.word	0xffffffff
    41a8:	ffffffff 	.word	0xffffffff
    41ac:	ffffffff 	.word	0xffffffff
    41b0:	ffffffff 	.word	0xffffffff
    41b4:	ffffffff 	.word	0xffffffff
    41b8:	ffffffff 	.word	0xffffffff
    41bc:	ffffffff 	.word	0xffffffff
    41c0:	ffffffff 	.word	0xffffffff
    41c4:	ffffffff 	.word	0xffffffff
    41c8:	ffffffff 	.word	0xffffffff
    41cc:	ffffffff 	.word	0xffffffff
    41d0:	ffffffff 	.word	0xffffffff
    41d4:	ffffffff 	.word	0xffffffff
    41d8:	ffffffff 	.word	0xffffffff
    41dc:	ffffffff 	.word	0xffffffff
    41e0:	ffffffff 	.word	0xffffffff
    41e4:	ffffffff 	.word	0xffffffff
    41e8:	ffffffff 	.word	0xffffffff
    41ec:	ffffffff 	.word	0xffffffff
    41f0:	ffffffff 	.word	0xffffffff
    41f4:	ffffffff 	.word	0xffffffff
    41f8:	ffffffff 	.word	0xffffffff
    41fc:	ffffffff 	.word	0xffffffff
    4200:	ffffffff 	.word	0xffffffff
    4204:	ffffffff 	.word	0xffffffff
    4208:	ffffffff 	.word	0xffffffff
    420c:	ffffffff 	.word	0xffffffff
    4210:	ffffffff 	.word	0xffffffff
    4214:	ffffffff 	.word	0xffffffff
    4218:	ffffffff 	.word	0xffffffff
    421c:	ffffffff 	.word	0xffffffff
    4220:	ffffffff 	.word	0xffffffff
    4224:	ffffffff 	.word	0xffffffff
    4228:	ffffffff 	.word	0xffffffff
    422c:	ffffffff 	.word	0xffffffff
    4230:	ffffffff 	.word	0xffffffff
    4234:	ffffffff 	.word	0xffffffff
    4238:	ffffffff 	.word	0xffffffff
    423c:	ffffffff 	.word	0xffffffff
    4240:	ffffffff 	.word	0xffffffff
    4244:	ffffffff 	.word	0xffffffff
    4248:	ffffffff 	.word	0xffffffff
    424c:	ffffffff 	.word	0xffffffff
    4250:	ffffffff 	.word	0xffffffff
    4254:	ffffffff 	.word	0xffffffff
    4258:	ffffffff 	.word	0xffffffff
    425c:	ffffffff 	.word	0xffffffff
    4260:	ffffffff 	.word	0xffffffff
    4264:	ffffffff 	.word	0xffffffff
    4268:	ffffffff 	.word	0xffffffff
    426c:	ffffffff 	.word	0xffffffff
    4270:	ffffffff 	.word	0xffffffff
    4274:	ffffffff 	.word	0xffffffff
    4278:	ffffffff 	.word	0xffffffff
    427c:	ffffffff 	.word	0xffffffff
    4280:	ffffffff 	.word	0xffffffff
    4284:	ffffffff 	.word	0xffffffff
    4288:	ffffffff 	.word	0xffffffff
    428c:	ffffffff 	.word	0xffffffff
    4290:	ffffffff 	.word	0xffffffff
    4294:	ffffffff 	.word	0xffffffff
    4298:	ffffffff 	.word	0xffffffff
    429c:	ffffffff 	.word	0xffffffff
    42a0:	ffffffff 	.word	0xffffffff
    42a4:	ffffffff 	.word	0xffffffff
    42a8:	ffffffff 	.word	0xffffffff
    42ac:	ffffffff 	.word	0xffffffff
    42b0:	ffffffff 	.word	0xffffffff
    42b4:	ffffffff 	.word	0xffffffff
    42b8:	ffffffff 	.word	0xffffffff
    42bc:	ffffffff 	.word	0xffffffff
    42c0:	ffffffff 	.word	0xffffffff
    42c4:	ffffffff 	.word	0xffffffff
    42c8:	ffffffff 	.word	0xffffffff
    42cc:	ffffffff 	.word	0xffffffff
    42d0:	ffffffff 	.word	0xffffffff
    42d4:	ffffffff 	.word	0xffffffff
    42d8:	ffffffff 	.word	0xffffffff
    42dc:	ffffffff 	.word	0xffffffff
    42e0:	ffffffff 	.word	0xffffffff
    42e4:	ffffffff 	.word	0xffffffff
    42e8:	ffffffff 	.word	0xffffffff
    42ec:	ffffffff 	.word	0xffffffff
    42f0:	ffffffff 	.word	0xffffffff
    42f4:	ffffffff 	.word	0xffffffff
    42f8:	ffffffff 	.word	0xffffffff
    42fc:	ffffffff 	.word	0xffffffff
    4300:	ffffffff 	.word	0xffffffff
    4304:	ffffffff 	.word	0xffffffff
    4308:	ffffffff 	.word	0xffffffff
    430c:	ffffffff 	.word	0xffffffff
    4310:	ffffffff 	.word	0xffffffff
    4314:	ffffffff 	.word	0xffffffff
    4318:	ffffffff 	.word	0xffffffff
    431c:	ffffffff 	.word	0xffffffff
    4320:	ffffffff 	.word	0xffffffff
    4324:	ffffffff 	.word	0xffffffff
    4328:	ffffffff 	.word	0xffffffff
    432c:	ffffffff 	.word	0xffffffff
    4330:	ffffffff 	.word	0xffffffff
    4334:	ffffffff 	.word	0xffffffff
    4338:	ffffffff 	.word	0xffffffff
    433c:	ffffffff 	.word	0xffffffff
    4340:	ffffffff 	.word	0xffffffff
    4344:	ffffffff 	.word	0xffffffff
    4348:	ffffffff 	.word	0xffffffff
    434c:	ffffffff 	.word	0xffffffff
    4350:	ffffffff 	.word	0xffffffff
    4354:	ffffffff 	.word	0xffffffff
    4358:	ffffffff 	.word	0xffffffff
    435c:	ffffffff 	.word	0xffffffff
    4360:	ffffffff 	.word	0xffffffff
    4364:	ffffffff 	.word	0xffffffff
    4368:	ffffffff 	.word	0xffffffff
    436c:	ffffffff 	.word	0xffffffff
    4370:	ffffffff 	.word	0xffffffff
    4374:	ffffffff 	.word	0xffffffff
    4378:	ffffffff 	.word	0xffffffff
    437c:	ffffffff 	.word	0xffffffff
    4380:	ffffffff 	.word	0xffffffff
    4384:	ffffffff 	.word	0xffffffff
    4388:	ffffffff 	.word	0xffffffff
    438c:	ffffffff 	.word	0xffffffff
    4390:	ffffffff 	.word	0xffffffff
    4394:	ffffffff 	.word	0xffffffff
    4398:	ffffffff 	.word	0xffffffff
    439c:	ffffffff 	.word	0xffffffff
    43a0:	ffffffff 	.word	0xffffffff
    43a4:	ffffffff 	.word	0xffffffff
    43a8:	ffffffff 	.word	0xffffffff
    43ac:	ffffffff 	.word	0xffffffff
    43b0:	ffffffff 	.word	0xffffffff
    43b4:	ffffffff 	.word	0xffffffff
    43b8:	ffffffff 	.word	0xffffffff
    43bc:	ffffffff 	.word	0xffffffff
    43c0:	ffffffff 	.word	0xffffffff
    43c4:	ffffffff 	.word	0xffffffff
    43c8:	ffffffff 	.word	0xffffffff
    43cc:	ffffffff 	.word	0xffffffff
    43d0:	ffffffff 	.word	0xffffffff
    43d4:	ffffffff 	.word	0xffffffff
    43d8:	ffffffff 	.word	0xffffffff
    43dc:	ffffffff 	.word	0xffffffff
    43e0:	ffffffff 	.word	0xffffffff
    43e4:	ffffffff 	.word	0xffffffff
    43e8:	ffffffff 	.word	0xffffffff
    43ec:	ffffffff 	.word	0xffffffff
    43f0:	ffffffff 	.word	0xffffffff
    43f4:	ffffffff 	.word	0xffffffff
    43f8:	ffffffff 	.word	0xffffffff
    43fc:	ffffffff 	.word	0xffffffff

00004400 <__do_global_dtors_aux>:
    4400:	b510      	push	{r4, lr}
    4402:	4c06      	ldr	r4, [pc, #24]	; (441c <__do_global_dtors_aux+0x1c>)
    4404:	7823      	ldrb	r3, [r4, #0]
    4406:	2b00      	cmp	r3, #0
    4408:	d107      	bne.n	441a <__do_global_dtors_aux+0x1a>
    440a:	4b05      	ldr	r3, [pc, #20]	; (4420 <__do_global_dtors_aux+0x20>)
    440c:	2b00      	cmp	r3, #0
    440e:	d002      	beq.n	4416 <__do_global_dtors_aux+0x16>
    4410:	4804      	ldr	r0, [pc, #16]	; (4424 <__do_global_dtors_aux+0x24>)
    4412:	e000      	b.n	4416 <__do_global_dtors_aux+0x16>
    4414:	bf00      	nop
    4416:	2301      	movs	r3, #1
    4418:	7023      	strb	r3, [r4, #0]
    441a:	bd10      	pop	{r4, pc}
    441c:	20000090 	.word	0x20000090
    4420:	00000000 	.word	0x00000000
    4424:	00019548 	.word	0x00019548

00004428 <frame_dummy>:
    4428:	4b08      	ldr	r3, [pc, #32]	; (444c <frame_dummy+0x24>)
    442a:	b510      	push	{r4, lr}
    442c:	2b00      	cmp	r3, #0
    442e:	d003      	beq.n	4438 <frame_dummy+0x10>
    4430:	4907      	ldr	r1, [pc, #28]	; (4450 <frame_dummy+0x28>)
    4432:	4808      	ldr	r0, [pc, #32]	; (4454 <frame_dummy+0x2c>)
    4434:	e000      	b.n	4438 <frame_dummy+0x10>
    4436:	bf00      	nop
    4438:	4807      	ldr	r0, [pc, #28]	; (4458 <frame_dummy+0x30>)
    443a:	6803      	ldr	r3, [r0, #0]
    443c:	2b00      	cmp	r3, #0
    443e:	d100      	bne.n	4442 <frame_dummy+0x1a>
    4440:	bd10      	pop	{r4, pc}
    4442:	4b06      	ldr	r3, [pc, #24]	; (445c <frame_dummy+0x34>)
    4444:	2b00      	cmp	r3, #0
    4446:	d0fb      	beq.n	4440 <frame_dummy+0x18>
    4448:	4798      	blx	r3
    444a:	e7f9      	b.n	4440 <frame_dummy+0x18>
    444c:	00000000 	.word	0x00000000
    4450:	20000094 	.word	0x20000094
    4454:	00019548 	.word	0x00019548
    4458:	00019548 	.word	0x00019548
    445c:	00000000 	.word	0x00000000

00004460 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
    4460:	b5f0      	push	{r4, r5, r6, r7, lr}
    4462:	b083      	sub	sp, #12
    4464:	466b      	mov	r3, sp
    4466:	1ddf      	adds	r7, r3, #7
    4468:	71d8      	strb	r0, [r3, #7]
	spi_select_slave(&ssd1306_master, &ssd1306_slave, true);
    446a:	4e0b      	ldr	r6, [pc, #44]	; (4498 <ssd1306_write_command+0x38>)
    446c:	4c0b      	ldr	r4, [pc, #44]	; (449c <ssd1306_write_command+0x3c>)
    446e:	2201      	movs	r2, #1
    4470:	0031      	movs	r1, r6
    4472:	0020      	movs	r0, r4
    4474:	4d0a      	ldr	r5, [pc, #40]	; (44a0 <ssd1306_write_command+0x40>)
    4476:	47a8      	blx	r5

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    4478:	2280      	movs	r2, #128	; 0x80
    447a:	0052      	lsls	r2, r2, #1
    447c:	4b09      	ldr	r3, [pc, #36]	; (44a4 <ssd1306_write_command+0x44>)
    447e:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(SSD1306_DC_PIN, false);
	spi_write_buffer_wait(&ssd1306_master, &command, 1);
    4480:	3aff      	subs	r2, #255	; 0xff
    4482:	0039      	movs	r1, r7
    4484:	0020      	movs	r0, r4
    4486:	4b08      	ldr	r3, [pc, #32]	; (44a8 <ssd1306_write_command+0x48>)
    4488:	4798      	blx	r3
	spi_select_slave(&ssd1306_master, &ssd1306_slave, false);
    448a:	2200      	movs	r2, #0
    448c:	0031      	movs	r1, r6
    448e:	0020      	movs	r0, r4
    4490:	47a8      	blx	r5
}
    4492:	b003      	add	sp, #12
    4494:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4496:	46c0      	nop			; (mov r8, r8)
    4498:	200020e0 	.word	0x200020e0
    449c:	200020d4 	.word	0x200020d4
    44a0:	00006071 	.word	0x00006071
    44a4:	40002800 	.word	0x40002800
    44a8:	00006165 	.word	0x00006165

000044ac <ssd1306_init>:
{
    44ac:	b530      	push	{r4, r5, lr}
    44ae:	b091      	sub	sp, #68	; 0x44
	delay_init();
    44b0:	4b59      	ldr	r3, [pc, #356]	; (4618 <ssd1306_init+0x16c>)
    44b2:	4798      	blx	r3
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    44b4:	4c59      	ldr	r4, [pc, #356]	; (461c <ssd1306_init+0x170>)
    44b6:	2317      	movs	r3, #23
    44b8:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    44ba:	2300      	movs	r3, #0
    44bc:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    44be:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    44c0:	a902      	add	r1, sp, #8
    44c2:	2201      	movs	r2, #1
    44c4:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    44c6:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    44c8:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    44ca:	2017      	movs	r0, #23
    44cc:	4b54      	ldr	r3, [pc, #336]	; (4620 <ssd1306_init+0x174>)
    44ce:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    44d0:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    44d2:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    44d4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    44d6:	2900      	cmp	r1, #0
    44d8:	d104      	bne.n	44e4 <ssd1306_init+0x38>
		return &(ports[port_index]->Group[group_index]);
    44da:	0953      	lsrs	r3, r2, #5
    44dc:	01db      	lsls	r3, r3, #7
    44de:	4951      	ldr	r1, [pc, #324]	; (4624 <ssd1306_init+0x178>)
    44e0:	468c      	mov	ip, r1
    44e2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    44e4:	211f      	movs	r1, #31
    44e6:	4011      	ands	r1, r2
    44e8:	2201      	movs	r2, #1
    44ea:	0010      	movs	r0, r2
    44ec:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    44ee:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    44f0:	ac02      	add	r4, sp, #8
    44f2:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    44f4:	2300      	movs	r3, #0
    44f6:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    44f8:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    44fa:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    44fc:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    44fe:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    4500:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    4502:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    4504:	3223      	adds	r2, #35	; 0x23
    4506:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    4508:	3a18      	subs	r2, #24
    450a:	2100      	movs	r1, #0
    450c:	a808      	add	r0, sp, #32
    450e:	4b46      	ldr	r3, [pc, #280]	; (4628 <ssd1306_init+0x17c>)
    4510:	4798      	blx	r3
	config.mux_setting = SSD1306_SPI_PINMUX_SETTING;
    4512:	2380      	movs	r3, #128	; 0x80
    4514:	025b      	lsls	r3, r3, #9
    4516:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SSD1306_SPI_PINMUX_PAD0;
    4518:	4b44      	ldr	r3, [pc, #272]	; (462c <ssd1306_init+0x180>)
    451a:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SSD1306_SPI_PINMUX_PAD1;
    451c:	4b44      	ldr	r3, [pc, #272]	; (4630 <ssd1306_init+0x184>)
    451e:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SSD1306_SPI_PINMUX_PAD2;
    4520:	4b44      	ldr	r3, [pc, #272]	; (4634 <ssd1306_init+0x188>)
    4522:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SSD1306_SPI_PINMUX_PAD3;
    4524:	4b44      	ldr	r3, [pc, #272]	; (4638 <ssd1306_init+0x18c>)
    4526:	6363      	str	r3, [r4, #52]	; 0x34
	config.mode_specific.master.baudrate = SSD1306_CLOCK_SPEED;
    4528:	4b44      	ldr	r3, [pc, #272]	; (463c <ssd1306_init+0x190>)
    452a:	61a3      	str	r3, [r4, #24]
	spi_init(&ssd1306_master, SSD1306_SPI, &config);
    452c:	4d44      	ldr	r5, [pc, #272]	; (4640 <ssd1306_init+0x194>)
    452e:	0022      	movs	r2, r4
    4530:	4944      	ldr	r1, [pc, #272]	; (4644 <ssd1306_init+0x198>)
    4532:	0028      	movs	r0, r5
    4534:	4b44      	ldr	r3, [pc, #272]	; (4648 <ssd1306_init+0x19c>)
    4536:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4538:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    453a:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    453c:	2b00      	cmp	r3, #0
    453e:	d1fc      	bne.n	453a <ssd1306_init+0x8e>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    4540:	6813      	ldr	r3, [r2, #0]
    4542:	2102      	movs	r1, #2
    4544:	430b      	orrs	r3, r1
    4546:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    4548:	ac01      	add	r4, sp, #4
    454a:	2301      	movs	r3, #1
    454c:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    454e:	2200      	movs	r2, #0
    4550:	70a2      	strb	r2, [r4, #2]
	pin.direction = PORT_PIN_DIR_OUTPUT;
    4552:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(SSD1306_DC_PIN, &pin);
    4554:	0021      	movs	r1, r4
    4556:	2008      	movs	r0, #8
    4558:	4d31      	ldr	r5, [pc, #196]	; (4620 <ssd1306_init+0x174>)
    455a:	47a8      	blx	r5
	port_pin_set_config(SSD1306_RES_PIN, &pin);
    455c:	0021      	movs	r1, r4
    455e:	2022      	movs	r0, #34	; 0x22
    4560:	47a8      	blx	r5
 *
 * This functions will reset the OLED controller by setting the reset pin low.
 */
static inline void ssd1306_hard_reset(void)
{
	uint32_t delay_10us = 10 * (system_gclk_gen_get_hz(0)/1000000);
    4562:	2000      	movs	r0, #0
    4564:	4b39      	ldr	r3, [pc, #228]	; (464c <ssd1306_init+0x1a0>)
    4566:	4798      	blx	r3
    4568:	4934      	ldr	r1, [pc, #208]	; (463c <ssd1306_init+0x190>)
    456a:	4b39      	ldr	r3, [pc, #228]	; (4650 <ssd1306_init+0x1a4>)
    456c:	4798      	blx	r3
    456e:	0083      	lsls	r3, r0, #2
    4570:	1818      	adds	r0, r3, r0
    4572:	0040      	lsls	r0, r0, #1
		port_base->OUTCLR.reg = pin_mask;
    4574:	2204      	movs	r2, #4
    4576:	4b37      	ldr	r3, [pc, #220]	; (4654 <ssd1306_init+0x1a8>)
    4578:	615a      	str	r2, [r3, #20]
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
    457a:	2800      	cmp	r0, #0
    457c:	d048      	beq.n	4610 <ssd1306_init+0x164>
		SysTick->LOAD = n;
    457e:	4b36      	ldr	r3, [pc, #216]	; (4658 <ssd1306_init+0x1ac>)
    4580:	6058      	str	r0, [r3, #4]
		SysTick->VAL = 0;
    4582:	2200      	movs	r2, #0
    4584:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    4586:	0019      	movs	r1, r3
    4588:	2280      	movs	r2, #128	; 0x80
    458a:	0252      	lsls	r2, r2, #9
    458c:	680b      	ldr	r3, [r1, #0]
    458e:	4213      	tst	r3, r2
    4590:	d0fc      	beq.n	458c <ssd1306_init+0xe0>
		port_base->OUTSET.reg = pin_mask;
    4592:	2204      	movs	r2, #4
    4594:	4b2f      	ldr	r3, [pc, #188]	; (4654 <ssd1306_init+0x1a8>)
    4596:	619a      	str	r2, [r3, #24]
		SysTick->LOAD = n;
    4598:	4b2f      	ldr	r3, [pc, #188]	; (4658 <ssd1306_init+0x1ac>)
    459a:	6058      	str	r0, [r3, #4]
		SysTick->VAL = 0;
    459c:	2200      	movs	r2, #0
    459e:	609a      	str	r2, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    45a0:	0019      	movs	r1, r3
    45a2:	2280      	movs	r2, #128	; 0x80
    45a4:	0252      	lsls	r2, r2, #9
    45a6:	680b      	ldr	r3, [r1, #0]
    45a8:	4213      	tst	r3, r2
    45aa:	d0fc      	beq.n	45a6 <ssd1306_init+0xfa>
    45ac:	2204      	movs	r2, #4
    45ae:	4b29      	ldr	r3, [pc, #164]	; (4654 <ssd1306_init+0x1a8>)
    45b0:	619a      	str	r2, [r3, #24]
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
    45b2:	20a8      	movs	r0, #168	; 0xa8
    45b4:	4c29      	ldr	r4, [pc, #164]	; (465c <ssd1306_init+0x1b0>)
    45b6:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
    45b8:	201f      	movs	r0, #31
    45ba:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
    45bc:	20d3      	movs	r0, #211	; 0xd3
    45be:	47a0      	blx	r4
	ssd1306_write_command(0x00);
    45c0:	2000      	movs	r0, #0
    45c2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
    45c4:	2040      	movs	r0, #64	; 0x40
    45c6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
    45c8:	20a1      	movs	r0, #161	; 0xa1
    45ca:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
    45cc:	20c8      	movs	r0, #200	; 0xc8
    45ce:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
    45d0:	20da      	movs	r0, #218	; 0xda
    45d2:	47a0      	blx	r4
	ssd1306_write_command(0x02);
    45d4:	2002      	movs	r0, #2
    45d6:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
    45d8:	2081      	movs	r0, #129	; 0x81
    45da:	47a0      	blx	r4
	ssd1306_write_command(contrast);
    45dc:	208f      	movs	r0, #143	; 0x8f
    45de:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
    45e0:	20a4      	movs	r0, #164	; 0xa4
    45e2:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
    45e4:	20a6      	movs	r0, #166	; 0xa6
    45e6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
    45e8:	20d5      	movs	r0, #213	; 0xd5
    45ea:	47a0      	blx	r4
	ssd1306_write_command(0x80);
    45ec:	2080      	movs	r0, #128	; 0x80
    45ee:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
    45f0:	208d      	movs	r0, #141	; 0x8d
    45f2:	47a0      	blx	r4
	ssd1306_write_command(0x14);
    45f4:	2014      	movs	r0, #20
    45f6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
    45f8:	20db      	movs	r0, #219	; 0xdb
    45fa:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
    45fc:	2040      	movs	r0, #64	; 0x40
    45fe:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
    4600:	20d9      	movs	r0, #217	; 0xd9
    4602:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
    4604:	20f1      	movs	r0, #241	; 0xf1
    4606:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
    4608:	20af      	movs	r0, #175	; 0xaf
    460a:	47a0      	blx	r4
}
    460c:	b011      	add	sp, #68	; 0x44
    460e:	bd30      	pop	{r4, r5, pc}
    4610:	2204      	movs	r2, #4
    4612:	4b10      	ldr	r3, [pc, #64]	; (4654 <ssd1306_init+0x1a8>)
    4614:	619a      	str	r2, [r3, #24]
    4616:	e7c9      	b.n	45ac <ssd1306_init+0x100>
    4618:	000046ad 	.word	0x000046ad
    461c:	200020e0 	.word	0x200020e0
    4620:	00005151 	.word	0x00005151
    4624:	40002800 	.word	0x40002800
    4628:	00016a21 	.word	0x00016a21
    462c:	00220003 	.word	0x00220003
    4630:	00170003 	.word	0x00170003
    4634:	00360003 	.word	0x00360003
    4638:	00370003 	.word	0x00370003
    463c:	000f4240 	.word	0x000f4240
    4640:	200020d4 	.word	0x200020d4
    4644:	43000400 	.word	0x43000400
    4648:	00005d25 	.word	0x00005d25
    464c:	00006fb5 	.word	0x00006fb5
    4650:	000137ad 	.word	0x000137ad
    4654:	40002880 	.word	0x40002880
    4658:	e000e010 	.word	0xe000e010
    465c:	00004461 	.word	0x00004461

00004660 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
    4660:	b5f0      	push	{r4, r5, r6, r7, lr}
    4662:	b083      	sub	sp, #12
    4664:	466b      	mov	r3, sp
    4666:	1ddf      	adds	r7, r3, #7
    4668:	71d8      	strb	r0, [r3, #7]
	spi_select_slave(&ssd1306_master, &ssd1306_slave, true);
    466a:	4e0b      	ldr	r6, [pc, #44]	; (4698 <ssd1306_write_data+0x38>)
    466c:	4c0b      	ldr	r4, [pc, #44]	; (469c <ssd1306_write_data+0x3c>)
    466e:	2201      	movs	r2, #1
    4670:	0031      	movs	r1, r6
    4672:	0020      	movs	r0, r4
    4674:	4d0a      	ldr	r5, [pc, #40]	; (46a0 <ssd1306_write_data+0x40>)
    4676:	47a8      	blx	r5
    4678:	2280      	movs	r2, #128	; 0x80
    467a:	0052      	lsls	r2, r2, #1
    467c:	4b09      	ldr	r3, [pc, #36]	; (46a4 <ssd1306_write_data+0x44>)
    467e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(SSD1306_DC_PIN, true);
	spi_write_buffer_wait(&ssd1306_master, &data, 1);
    4680:	3aff      	subs	r2, #255	; 0xff
    4682:	0039      	movs	r1, r7
    4684:	0020      	movs	r0, r4
    4686:	4b08      	ldr	r3, [pc, #32]	; (46a8 <ssd1306_write_data+0x48>)
    4688:	4798      	blx	r3
	spi_select_slave(&ssd1306_master, &ssd1306_slave, false);
    468a:	2200      	movs	r2, #0
    468c:	0031      	movs	r1, r6
    468e:	0020      	movs	r0, r4
    4690:	47a8      	blx	r5
}
    4692:	b003      	add	sp, #12
    4694:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4696:	46c0      	nop			; (mov r8, r8)
    4698:	200020e0 	.word	0x200020e0
    469c:	200020d4 	.word	0x200020d4
    46a0:	00006071 	.word	0x00006071
    46a4:	40002800 	.word	0x40002800
    46a8:	00006165 	.word	0x00006165

000046ac <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    46ac:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    46ae:	2000      	movs	r0, #0
    46b0:	4b08      	ldr	r3, [pc, #32]	; (46d4 <delay_init+0x28>)
    46b2:	4798      	blx	r3
    46b4:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    46b6:	4c08      	ldr	r4, [pc, #32]	; (46d8 <delay_init+0x2c>)
    46b8:	21fa      	movs	r1, #250	; 0xfa
    46ba:	0089      	lsls	r1, r1, #2
    46bc:	47a0      	blx	r4
    46be:	4b07      	ldr	r3, [pc, #28]	; (46dc <delay_init+0x30>)
    46c0:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    46c2:	4907      	ldr	r1, [pc, #28]	; (46e0 <delay_init+0x34>)
    46c4:	0028      	movs	r0, r5
    46c6:	47a0      	blx	r4
    46c8:	4b06      	ldr	r3, [pc, #24]	; (46e4 <delay_init+0x38>)
    46ca:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    46cc:	2205      	movs	r2, #5
    46ce:	4b06      	ldr	r3, [pc, #24]	; (46e8 <delay_init+0x3c>)
    46d0:	601a      	str	r2, [r3, #0]
}
    46d2:	bd70      	pop	{r4, r5, r6, pc}
    46d4:	00006fb5 	.word	0x00006fb5
    46d8:	000137ad 	.word	0x000137ad
    46dc:	20000000 	.word	0x20000000
    46e0:	000f4240 	.word	0x000f4240
    46e4:	20000004 	.word	0x20000004
    46e8:	e000e010 	.word	0xe000e010

000046ec <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    46ec:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    46ee:	4b08      	ldr	r3, [pc, #32]	; (4710 <delay_cycles_us+0x24>)
    46f0:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    46f2:	4a08      	ldr	r2, [pc, #32]	; (4714 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    46f4:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    46f6:	2180      	movs	r1, #128	; 0x80
    46f8:	0249      	lsls	r1, r1, #9
	while (n--) {
    46fa:	3801      	subs	r0, #1
    46fc:	d307      	bcc.n	470e <delay_cycles_us+0x22>
	if (n > 0) {
    46fe:	2c00      	cmp	r4, #0
    4700:	d0fb      	beq.n	46fa <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    4702:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    4704:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    4706:	6813      	ldr	r3, [r2, #0]
    4708:	420b      	tst	r3, r1
    470a:	d0fc      	beq.n	4706 <delay_cycles_us+0x1a>
    470c:	e7f5      	b.n	46fa <delay_cycles_us+0xe>
	}
}
    470e:	bd30      	pop	{r4, r5, pc}
    4710:	20000004 	.word	0x20000004
    4714:	e000e010 	.word	0xe000e010

00004718 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    4718:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    471a:	4b08      	ldr	r3, [pc, #32]	; (473c <delay_cycles_ms+0x24>)
    471c:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    471e:	4a08      	ldr	r2, [pc, #32]	; (4740 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    4720:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    4722:	2180      	movs	r1, #128	; 0x80
    4724:	0249      	lsls	r1, r1, #9
	while (n--) {
    4726:	3801      	subs	r0, #1
    4728:	d307      	bcc.n	473a <delay_cycles_ms+0x22>
	if (n > 0) {
    472a:	2c00      	cmp	r4, #0
    472c:	d0fb      	beq.n	4726 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    472e:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    4730:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    4732:	6813      	ldr	r3, [r2, #0]
    4734:	420b      	tst	r3, r1
    4736:	d0fc      	beq.n	4732 <delay_cycles_ms+0x1a>
    4738:	e7f5      	b.n	4726 <delay_cycles_ms+0xe>
	}
}
    473a:	bd30      	pop	{r4, r5, pc}
    473c:	20000000 	.word	0x20000000
    4740:	e000e010 	.word	0xe000e010

00004744 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
    4744:	4b01      	ldr	r3, [pc, #4]	; (474c <gfx_mono_set_framebuffer+0x8>)
    4746:	6018      	str	r0, [r3, #0]
}
    4748:	4770      	bx	lr
    474a:	46c0      	nop			; (mov r8, r8)
    474c:	200000ac 	.word	0x200000ac

00004750 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
    4750:	4b02      	ldr	r3, [pc, #8]	; (475c <gfx_mono_framebuffer_put_byte+0xc>)
    4752:	681b      	ldr	r3, [r3, #0]
    4754:	01c0      	lsls	r0, r0, #7
    4756:	1818      	adds	r0, r3, r0
    4758:	5442      	strb	r2, [r0, r1]
}
    475a:	4770      	bx	lr
    475c:	200000ac 	.word	0x200000ac

00004760 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
    4760:	4b02      	ldr	r3, [pc, #8]	; (476c <gfx_mono_framebuffer_get_byte+0xc>)
    4762:	681b      	ldr	r3, [r3, #0]
    4764:	01c0      	lsls	r0, r0, #7
    4766:	1818      	adds	r0, r3, r0
    4768:	5c40      	ldrb	r0, [r0, r1]
}
    476a:	4770      	bx	lr
    476c:	200000ac 	.word	0x200000ac

00004770 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
    4770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4772:	46ce      	mov	lr, r9
    4774:	4647      	mov	r7, r8
    4776:	b580      	push	{r7, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
    4778:	1884      	adds	r4, r0, r2
    477a:	2c80      	cmp	r4, #128	; 0x80
    477c:	dd03      	ble.n	4786 <gfx_mono_generic_draw_horizontal_line+0x16>
		length = GFX_MONO_LCD_WIDTH - x;
    477e:	2280      	movs	r2, #128	; 0x80
    4780:	4252      	negs	r2, r2
    4782:	1a12      	subs	r2, r2, r0
    4784:	b2d2      	uxtb	r2, r2
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
    4786:	2a00      	cmp	r2, #0
    4788:	d037      	beq.n	47fa <gfx_mono_generic_draw_horizontal_line+0x8a>
	page = y / 8;
    478a:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
    478c:	00ec      	lsls	r4, r5, #3
    478e:	1b09      	subs	r1, r1, r4
    4790:	2701      	movs	r7, #1
    4792:	408f      	lsls	r7, r1
    4794:	0039      	movs	r1, r7
    4796:	b2ff      	uxtb	r7, r7
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
    4798:	2b01      	cmp	r3, #1
    479a:	d019      	beq.n	47d0 <gfx_mono_generic_draw_horizontal_line+0x60>
    479c:	2b00      	cmp	r3, #0
    479e:	d030      	beq.n	4802 <gfx_mono_generic_draw_horizontal_line+0x92>
    47a0:	2b02      	cmp	r3, #2
    47a2:	d12a      	bne.n	47fa <gfx_mono_generic_draw_horizontal_line+0x8a>
    47a4:	3801      	subs	r0, #1
    47a6:	b2c6      	uxtb	r6, r0
    47a8:	1992      	adds	r2, r2, r6
    47aa:	b2d4      	uxtb	r4, r2
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
    47ac:	4b20      	ldr	r3, [pc, #128]	; (4830 <gfx_mono_generic_draw_horizontal_line+0xc0>)
    47ae:	4699      	mov	r9, r3
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
    47b0:	4b20      	ldr	r3, [pc, #128]	; (4834 <gfx_mono_generic_draw_horizontal_line+0xc4>)
    47b2:	4698      	mov	r8, r3
			temp = gfx_mono_get_byte(page, x + length);
    47b4:	0021      	movs	r1, r4
    47b6:	0028      	movs	r0, r5
    47b8:	47c8      	blx	r9
			temp ^= pixelmask;
    47ba:	4078      	eors	r0, r7
			gfx_mono_put_byte(page, x + length, temp);
    47bc:	b2c2      	uxtb	r2, r0
    47be:	2300      	movs	r3, #0
    47c0:	0021      	movs	r1, r4
    47c2:	0028      	movs	r0, r5
    47c4:	47c0      	blx	r8
    47c6:	3c01      	subs	r4, #1
    47c8:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
    47ca:	42b4      	cmp	r4, r6
    47cc:	d1f2      	bne.n	47b4 <gfx_mono_generic_draw_horizontal_line+0x44>
    47ce:	e014      	b.n	47fa <gfx_mono_generic_draw_horizontal_line+0x8a>
    47d0:	3801      	subs	r0, #1
    47d2:	b2c6      	uxtb	r6, r0
    47d4:	1992      	adds	r2, r2, r6
    47d6:	b2d4      	uxtb	r4, r2
			temp = gfx_mono_get_byte(page, x + length);
    47d8:	4b15      	ldr	r3, [pc, #84]	; (4830 <gfx_mono_generic_draw_horizontal_line+0xc0>)
    47da:	4699      	mov	r9, r3
			gfx_mono_put_byte(page, x + length, temp);
    47dc:	4b15      	ldr	r3, [pc, #84]	; (4834 <gfx_mono_generic_draw_horizontal_line+0xc4>)
    47de:	4698      	mov	r8, r3
			temp = gfx_mono_get_byte(page, x + length);
    47e0:	0021      	movs	r1, r4
    47e2:	0028      	movs	r0, r5
    47e4:	47c8      	blx	r9
			temp |= pixelmask;
    47e6:	4338      	orrs	r0, r7
			gfx_mono_put_byte(page, x + length, temp);
    47e8:	b2c2      	uxtb	r2, r0
    47ea:	2300      	movs	r3, #0
    47ec:	0021      	movs	r1, r4
    47ee:	0028      	movs	r0, r5
    47f0:	47c0      	blx	r8
    47f2:	3c01      	subs	r4, #1
    47f4:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
    47f6:	42b4      	cmp	r4, r6
    47f8:	d1f2      	bne.n	47e0 <gfx_mono_generic_draw_horizontal_line+0x70>
		break;

	default:
		break;
	}
}
    47fa:	bc0c      	pop	{r2, r3}
    47fc:	4690      	mov	r8, r2
    47fe:	4699      	mov	r9, r3
    4800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4802:	3801      	subs	r0, #1
    4804:	b2c6      	uxtb	r6, r0
    4806:	1992      	adds	r2, r2, r6
    4808:	b2d4      	uxtb	r4, r2
			temp = gfx_mono_get_byte(page, x + length);
    480a:	4b09      	ldr	r3, [pc, #36]	; (4830 <gfx_mono_generic_draw_horizontal_line+0xc0>)
    480c:	4699      	mov	r9, r3
			temp &= ~pixelmask;
    480e:	43cf      	mvns	r7, r1
			gfx_mono_put_byte(page, x + length, temp);
    4810:	4b08      	ldr	r3, [pc, #32]	; (4834 <gfx_mono_generic_draw_horizontal_line+0xc4>)
    4812:	4698      	mov	r8, r3
			temp = gfx_mono_get_byte(page, x + length);
    4814:	0021      	movs	r1, r4
    4816:	0028      	movs	r0, r5
    4818:	47c8      	blx	r9
			temp &= ~pixelmask;
    481a:	4038      	ands	r0, r7
			gfx_mono_put_byte(page, x + length, temp);
    481c:	b2c2      	uxtb	r2, r0
    481e:	2300      	movs	r3, #0
    4820:	0021      	movs	r1, r4
    4822:	0028      	movs	r0, r5
    4824:	47c0      	blx	r8
    4826:	3c01      	subs	r4, #1
    4828:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
    482a:	42b4      	cmp	r4, r6
    482c:	d1f2      	bne.n	4814 <gfx_mono_generic_draw_horizontal_line+0xa4>
    482e:	e7e4      	b.n	47fa <gfx_mono_generic_draw_horizontal_line+0x8a>
    4830:	00004a95 	.word	0x00004a95
    4834:	0000498d 	.word	0x0000498d

00004838 <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
    4838:	b5f0      	push	{r4, r5, r6, r7, lr}
    483a:	b083      	sub	sp, #12
    483c:	9000      	str	r0, [sp, #0]
    483e:	9201      	str	r2, [sp, #4]
    4840:	aa08      	add	r2, sp, #32
    4842:	7817      	ldrb	r7, [r2, #0]
	if (height == 0) {
    4844:	2b00      	cmp	r3, #0
    4846:	d00d      	beq.n	4864 <gfx_mono_generic_draw_filled_rect+0x2c>
    4848:	3901      	subs	r1, #1
    484a:	b2ce      	uxtb	r6, r1
    484c:	199b      	adds	r3, r3, r6
    484e:	b2dc      	uxtb	r4, r3
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
    4850:	4d05      	ldr	r5, [pc, #20]	; (4868 <gfx_mono_generic_draw_filled_rect+0x30>)
    4852:	003b      	movs	r3, r7
    4854:	9a01      	ldr	r2, [sp, #4]
    4856:	0021      	movs	r1, r4
    4858:	9800      	ldr	r0, [sp, #0]
    485a:	47a8      	blx	r5
    485c:	3c01      	subs	r4, #1
    485e:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
    4860:	42b4      	cmp	r4, r6
    4862:	d1f6      	bne.n	4852 <gfx_mono_generic_draw_filled_rect+0x1a>
	}
}
    4864:	b003      	add	sp, #12
    4866:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4868:	00004771 	.word	0x00004771

0000486c <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
    486c:	b5f0      	push	{r4, r5, r6, r7, lr}
    486e:	46de      	mov	lr, fp
    4870:	4657      	mov	r7, sl
    4872:	464e      	mov	r6, r9
    4874:	4645      	mov	r5, r8
    4876:	b5e0      	push	{r5, r6, r7, lr}
    4878:	b085      	sub	sp, #20
    487a:	0004      	movs	r4, r0
    487c:	4688      	mov	r8, r1
    487e:	0015      	movs	r5, r2
    4880:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
    4882:	7a5b      	ldrb	r3, [r3, #9]
    4884:	465a      	mov	r2, fp
    4886:	7a12      	ldrb	r2, [r2, #8]
    4888:	2100      	movs	r1, #0
    488a:	9100      	str	r1, [sp, #0]
    488c:	0029      	movs	r1, r5
    488e:	4640      	mov	r0, r8
    4890:	4e28      	ldr	r6, [pc, #160]	; (4934 <gfx_mono_draw_char+0xc8>)
    4892:	47b0      	blx	r6
			GFX_PIXEL_CLR);

	switch (font->type) {
    4894:	465b      	mov	r3, fp
    4896:	781b      	ldrb	r3, [r3, #0]
    4898:	2b00      	cmp	r3, #0
    489a:	d006      	beq.n	48aa <gfx_mono_draw_char+0x3e>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
    489c:	b005      	add	sp, #20
    489e:	bc3c      	pop	{r2, r3, r4, r5}
    48a0:	4690      	mov	r8, r2
    48a2:	4699      	mov	r9, r3
    48a4:	46a2      	mov	sl, r4
    48a6:	46ab      	mov	fp, r5
    48a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
    48aa:	465b      	mov	r3, fp
    48ac:	7a1a      	ldrb	r2, [r3, #8]
    48ae:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
    48b0:	0752      	lsls	r2, r2, #29
    48b2:	d000      	beq.n	48b6 <gfx_mono_draw_char+0x4a>
		char_row_size++;
    48b4:	3301      	adds	r3, #1
	glyph_data_offset = char_row_size * font->height *
    48b6:	465a      	mov	r2, fp
    48b8:	7a52      	ldrb	r2, [r2, #9]
    48ba:	4692      	mov	sl, r2
			((uint8_t)ch - font->first_char);
    48bc:	465a      	mov	r2, fp
    48be:	7a97      	ldrb	r7, [r2, #10]
    48c0:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
    48c2:	4652      	mov	r2, sl
    48c4:	4357      	muls	r7, r2
    48c6:	435f      	muls	r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
    48c8:	b2bf      	uxth	r7, r7
    48ca:	465b      	mov	r3, fp
    48cc:	685b      	ldr	r3, [r3, #4]
    48ce:	469c      	mov	ip, r3
    48d0:	4467      	add	r7, ip
	gfx_coord_t inc_y = y;
    48d2:	9502      	str	r5, [sp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
    48d4:	4643      	mov	r3, r8
    48d6:	9303      	str	r3, [sp, #12]
    48d8:	e020      	b.n	491c <gfx_mono_draw_char+0xb0>
			if ((glyph_byte & 0x80)) {
    48da:	b26b      	sxtb	r3, r5
    48dc:	2b00      	cmp	r3, #0
    48de:	db0d      	blt.n	48fc <gfx_mono_draw_char+0x90>
			inc_x += 1;
    48e0:	3401      	adds	r4, #1
    48e2:	b2e4      	uxtb	r4, r4
			glyph_byte <<= 1;
    48e4:	006d      	lsls	r5, r5, #1
    48e6:	b2ed      	uxtb	r5, r5
		for (i = 0; i < pixelsToDraw; i++) {
    48e8:	42a6      	cmp	r6, r4
    48ea:	d00d      	beq.n	4908 <gfx_mono_draw_char+0x9c>
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    48ec:	4643      	mov	r3, r8
    48ee:	1ae3      	subs	r3, r4, r3
    48f0:	464a      	mov	r2, r9
    48f2:	421a      	tst	r2, r3
    48f4:	d1f1      	bne.n	48da <gfx_mono_draw_char+0x6e>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
    48f6:	783d      	ldrb	r5, [r7, #0]
				glyph_data++;
    48f8:	3701      	adds	r7, #1
    48fa:	e7ee      	b.n	48da <gfx_mono_draw_char+0x6e>
				gfx_mono_draw_pixel(inc_x, inc_y,
    48fc:	2201      	movs	r2, #1
    48fe:	9902      	ldr	r1, [sp, #8]
    4900:	0020      	movs	r0, r4
    4902:	4b0d      	ldr	r3, [pc, #52]	; (4938 <gfx_mono_draw_char+0xcc>)
    4904:	4798      	blx	r3
    4906:	e7eb      	b.n	48e0 <gfx_mono_draw_char+0x74>
		inc_y += 1;
    4908:	9b02      	ldr	r3, [sp, #8]
    490a:	3301      	adds	r3, #1
    490c:	b2db      	uxtb	r3, r3
    490e:	9302      	str	r3, [sp, #8]
		rows_left--;
    4910:	4653      	mov	r3, sl
    4912:	3b01      	subs	r3, #1
    4914:	b2db      	uxtb	r3, r3
    4916:	469a      	mov	sl, r3
	} while (rows_left > 0);
    4918:	2b00      	cmp	r3, #0
    491a:	d0bf      	beq.n	489c <gfx_mono_draw_char+0x30>
		uint8_t pixelsToDraw = font->width;
    491c:	465b      	mov	r3, fp
    491e:	7a1e      	ldrb	r6, [r3, #8]
		for (i = 0; i < pixelsToDraw; i++) {
    4920:	2e00      	cmp	r6, #0
    4922:	d0f1      	beq.n	4908 <gfx_mono_draw_char+0x9c>
    4924:	4446      	add	r6, r8
    4926:	b2f6      	uxtb	r6, r6
    4928:	9c03      	ldr	r4, [sp, #12]
    492a:	2500      	movs	r5, #0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    492c:	2307      	movs	r3, #7
    492e:	4699      	mov	r9, r3
    4930:	e7dc      	b.n	48ec <gfx_mono_draw_char+0x80>
    4932:	46c0      	nop			; (mov r8, r8)
    4934:	00004839 	.word	0x00004839
    4938:	00004a2d 	.word	0x00004a2d

0000493c <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
    493c:	b5f0      	push	{r4, r5, r6, r7, lr}
    493e:	46c6      	mov	lr, r8
    4940:	b500      	push	{lr}
    4942:	b082      	sub	sp, #8
    4944:	0004      	movs	r4, r0
    4946:	4690      	mov	r8, r2
    4948:	001f      	movs	r7, r3
    494a:	000d      	movs	r5, r1

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    494c:	9101      	str	r1, [sp, #4]
    494e:	e009      	b.n	4964 <gfx_mono_draw_string+0x28>
			y += font->height + 1;
    4950:	7a7a      	ldrb	r2, [r7, #9]
    4952:	3201      	adds	r2, #1
    4954:	4442      	add	r2, r8
    4956:	b2d3      	uxtb	r3, r2
    4958:	4698      	mov	r8, r3
			x = start_of_string_position_x;
    495a:	9d01      	ldr	r5, [sp, #4]
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
			x += font->width;
		}
	} while (*(++str));
    495c:	3401      	adds	r4, #1
    495e:	7823      	ldrb	r3, [r4, #0]
    4960:	2b00      	cmp	r3, #0
    4962:	d00d      	beq.n	4980 <gfx_mono_draw_string+0x44>
		if (*str == '\n') {
    4964:	7820      	ldrb	r0, [r4, #0]
    4966:	280a      	cmp	r0, #10
    4968:	d0f2      	beq.n	4950 <gfx_mono_draw_string+0x14>
		} else if (*str == '\r') {
    496a:	280d      	cmp	r0, #13
    496c:	d0f6      	beq.n	495c <gfx_mono_draw_string+0x20>
			gfx_mono_draw_char(*str, x, y, font);
    496e:	003b      	movs	r3, r7
    4970:	4642      	mov	r2, r8
    4972:	0029      	movs	r1, r5
    4974:	4e04      	ldr	r6, [pc, #16]	; (4988 <gfx_mono_draw_string+0x4c>)
    4976:	47b0      	blx	r6
			x += font->width;
    4978:	7a3b      	ldrb	r3, [r7, #8]
    497a:	18ed      	adds	r5, r5, r3
    497c:	b2ed      	uxtb	r5, r5
    497e:	e7ed      	b.n	495c <gfx_mono_draw_string+0x20>
}
    4980:	b002      	add	sp, #8
    4982:	bc04      	pop	{r2}
    4984:	4690      	mov	r8, r2
    4986:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4988:	0000486d 	.word	0x0000486d

0000498c <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
    498c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    498e:	0004      	movs	r4, r0
    4990:	000f      	movs	r7, r1
    4992:	0015      	movs	r5, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
    4994:	2b00      	cmp	r3, #0
    4996:	d103      	bne.n	49a0 <gfx_mono_ssd1306_put_byte+0x14>
    4998:	4b0d      	ldr	r3, [pc, #52]	; (49d0 <gfx_mono_ssd1306_put_byte+0x44>)
    499a:	4798      	blx	r3
    499c:	42a8      	cmp	r0, r5
    499e:	d015      	beq.n	49cc <gfx_mono_ssd1306_put_byte+0x40>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
    49a0:	002a      	movs	r2, r5
    49a2:	0039      	movs	r1, r7
    49a4:	0020      	movs	r0, r4
    49a6:	4b0b      	ldr	r3, [pc, #44]	; (49d4 <gfx_mono_ssd1306_put_byte+0x48>)
    49a8:	4798      	blx	r3
	address &= 0x0F;
    49aa:	260f      	movs	r6, #15
    49ac:	4034      	ands	r4, r6
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
    49ae:	20b0      	movs	r0, #176	; 0xb0
    49b0:	4320      	orrs	r0, r4
    49b2:	4c09      	ldr	r4, [pc, #36]	; (49d8 <gfx_mono_ssd1306_put_byte+0x4c>)
    49b4:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
    49b6:	0678      	lsls	r0, r7, #25
    49b8:	0f40      	lsrs	r0, r0, #29
    49ba:	2310      	movs	r3, #16
    49bc:	4318      	orrs	r0, r3
    49be:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
    49c0:	0030      	movs	r0, r6
    49c2:	4038      	ands	r0, r7
    49c4:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
    49c6:	0028      	movs	r0, r5
    49c8:	4b04      	ldr	r3, [pc, #16]	; (49dc <gfx_mono_ssd1306_put_byte+0x50>)
    49ca:	4798      	blx	r3
}
    49cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    49ce:	46c0      	nop			; (mov r8, r8)
    49d0:	00004761 	.word	0x00004761
    49d4:	00004751 	.word	0x00004751
    49d8:	00004461 	.word	0x00004461
    49dc:	00004661 	.word	0x00004661

000049e0 <gfx_mono_ssd1306_init>:
{
    49e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	gfx_mono_set_framebuffer(framebuffer);
    49e2:	480d      	ldr	r0, [pc, #52]	; (4a18 <gfx_mono_ssd1306_init+0x38>)
    49e4:	4b0d      	ldr	r3, [pc, #52]	; (4a1c <gfx_mono_ssd1306_init+0x3c>)
    49e6:	4798      	blx	r3
	ssd1306_init();
    49e8:	4b0d      	ldr	r3, [pc, #52]	; (4a20 <gfx_mono_ssd1306_init+0x40>)
    49ea:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
    49ec:	2040      	movs	r0, #64	; 0x40
    49ee:	4b0d      	ldr	r3, [pc, #52]	; (4a24 <gfx_mono_ssd1306_init+0x44>)
    49f0:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
    49f2:	2500      	movs	r5, #0
{
    49f4:	2600      	movs	r6, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
    49f6:	4f0c      	ldr	r7, [pc, #48]	; (4a28 <gfx_mono_ssd1306_init+0x48>)
{
    49f8:	0034      	movs	r4, r6
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
    49fa:	2301      	movs	r3, #1
    49fc:	0032      	movs	r2, r6
    49fe:	0021      	movs	r1, r4
    4a00:	0028      	movs	r0, r5
    4a02:	47b8      	blx	r7
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
    4a04:	3401      	adds	r4, #1
    4a06:	b2e4      	uxtb	r4, r4
    4a08:	2c80      	cmp	r4, #128	; 0x80
    4a0a:	d1f6      	bne.n	49fa <gfx_mono_ssd1306_init+0x1a>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
    4a0c:	3501      	adds	r5, #1
    4a0e:	b2ed      	uxtb	r5, r5
    4a10:	2d04      	cmp	r5, #4
    4a12:	d1f1      	bne.n	49f8 <gfx_mono_ssd1306_init+0x18>
}
    4a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4a16:	46c0      	nop			; (mov r8, r8)
    4a18:	200000b0 	.word	0x200000b0
    4a1c:	00004745 	.word	0x00004745
    4a20:	000044ad 	.word	0x000044ad
    4a24:	00004461 	.word	0x00004461
    4a28:	0000498d 	.word	0x0000498d

00004a2c <gfx_mono_ssd1306_draw_pixel>:
{
    4a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a2e:	46c6      	mov	lr, r8
    4a30:	b500      	push	{lr}
    4a32:	0004      	movs	r4, r0
    4a34:	0015      	movs	r5, r2
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
    4a36:	b243      	sxtb	r3, r0
    4a38:	2b00      	cmp	r3, #0
    4a3a:	db01      	blt.n	4a40 <gfx_mono_ssd1306_draw_pixel+0x14>
    4a3c:	291f      	cmp	r1, #31
    4a3e:	d902      	bls.n	4a46 <gfx_mono_ssd1306_draw_pixel+0x1a>
}
    4a40:	bc04      	pop	{r2}
    4a42:	4690      	mov	r8, r2
    4a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
    4a46:	08cf      	lsrs	r7, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
    4a48:	00fb      	lsls	r3, r7, #3
    4a4a:	1ac9      	subs	r1, r1, r3
    4a4c:	2601      	movs	r6, #1
    4a4e:	408e      	lsls	r6, r1
    4a50:	b2f3      	uxtb	r3, r6
    4a52:	4698      	mov	r8, r3
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
    4a54:	0001      	movs	r1, r0
    4a56:	0038      	movs	r0, r7
    4a58:	4b0c      	ldr	r3, [pc, #48]	; (4a8c <gfx_mono_ssd1306_draw_pixel+0x60>)
    4a5a:	4798      	blx	r3
    4a5c:	0002      	movs	r2, r0
	switch (color) {
    4a5e:	2d01      	cmp	r5, #1
    4a60:	d009      	beq.n	4a76 <gfx_mono_ssd1306_draw_pixel+0x4a>
    4a62:	2d00      	cmp	r5, #0
    4a64:	d00b      	beq.n	4a7e <gfx_mono_ssd1306_draw_pixel+0x52>
    4a66:	2d02      	cmp	r5, #2
    4a68:	d00c      	beq.n	4a84 <gfx_mono_ssd1306_draw_pixel+0x58>
	gfx_mono_put_byte(page, x, pixel_value);
    4a6a:	2300      	movs	r3, #0
    4a6c:	0021      	movs	r1, r4
    4a6e:	0038      	movs	r0, r7
    4a70:	4c07      	ldr	r4, [pc, #28]	; (4a90 <gfx_mono_ssd1306_draw_pixel+0x64>)
    4a72:	47a0      	blx	r4
    4a74:	e7e4      	b.n	4a40 <gfx_mono_ssd1306_draw_pixel+0x14>
		pixel_value |= pixel_mask;
    4a76:	4643      	mov	r3, r8
    4a78:	4303      	orrs	r3, r0
    4a7a:	b2da      	uxtb	r2, r3
		break;
    4a7c:	e7f5      	b.n	4a6a <gfx_mono_ssd1306_draw_pixel+0x3e>
		pixel_value &= ~pixel_mask;
    4a7e:	43b0      	bics	r0, r6
    4a80:	b2c2      	uxtb	r2, r0
		break;
    4a82:	e7f2      	b.n	4a6a <gfx_mono_ssd1306_draw_pixel+0x3e>
		pixel_value ^= pixel_mask;
    4a84:	4643      	mov	r3, r8
    4a86:	4043      	eors	r3, r0
    4a88:	b2da      	uxtb	r2, r3
		break;
    4a8a:	e7ee      	b.n	4a6a <gfx_mono_ssd1306_draw_pixel+0x3e>
    4a8c:	00004761 	.word	0x00004761
    4a90:	0000498d 	.word	0x0000498d

00004a94 <gfx_mono_ssd1306_get_byte>:
{
    4a94:	b510      	push	{r4, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
    4a96:	4b01      	ldr	r3, [pc, #4]	; (4a9c <gfx_mono_ssd1306_get_byte+0x8>)
    4a98:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
    4a9a:	bd10      	pop	{r4, pc}
    4a9c:	00004761 	.word	0x00004761

00004aa0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    4aa0:	4b0c      	ldr	r3, [pc, #48]	; (4ad4 <cpu_irq_enter_critical+0x34>)
    4aa2:	681b      	ldr	r3, [r3, #0]
    4aa4:	2b00      	cmp	r3, #0
    4aa6:	d106      	bne.n	4ab6 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4aa8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    4aac:	2b00      	cmp	r3, #0
    4aae:	d007      	beq.n	4ac0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    4ab0:	2200      	movs	r2, #0
    4ab2:	4b09      	ldr	r3, [pc, #36]	; (4ad8 <cpu_irq_enter_critical+0x38>)
    4ab4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    4ab6:	4a07      	ldr	r2, [pc, #28]	; (4ad4 <cpu_irq_enter_critical+0x34>)
    4ab8:	6813      	ldr	r3, [r2, #0]
    4aba:	3301      	adds	r3, #1
    4abc:	6013      	str	r3, [r2, #0]
}
    4abe:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    4ac0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    4ac2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    4ac6:	2200      	movs	r2, #0
    4ac8:	4b04      	ldr	r3, [pc, #16]	; (4adc <cpu_irq_enter_critical+0x3c>)
    4aca:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    4acc:	3201      	adds	r2, #1
    4ace:	4b02      	ldr	r3, [pc, #8]	; (4ad8 <cpu_irq_enter_critical+0x38>)
    4ad0:	701a      	strb	r2, [r3, #0]
    4ad2:	e7f0      	b.n	4ab6 <cpu_irq_enter_critical+0x16>
    4ad4:	200002b0 	.word	0x200002b0
    4ad8:	200002b4 	.word	0x200002b4
    4adc:	20000014 	.word	0x20000014

00004ae0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    4ae0:	4b08      	ldr	r3, [pc, #32]	; (4b04 <cpu_irq_leave_critical+0x24>)
    4ae2:	681a      	ldr	r2, [r3, #0]
    4ae4:	3a01      	subs	r2, #1
    4ae6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    4ae8:	681b      	ldr	r3, [r3, #0]
    4aea:	2b00      	cmp	r3, #0
    4aec:	d109      	bne.n	4b02 <cpu_irq_leave_critical+0x22>
    4aee:	4b06      	ldr	r3, [pc, #24]	; (4b08 <cpu_irq_leave_critical+0x28>)
    4af0:	781b      	ldrb	r3, [r3, #0]
    4af2:	2b00      	cmp	r3, #0
    4af4:	d005      	beq.n	4b02 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    4af6:	2201      	movs	r2, #1
    4af8:	4b04      	ldr	r3, [pc, #16]	; (4b0c <cpu_irq_leave_critical+0x2c>)
    4afa:	701a      	strb	r2, [r3, #0]
    4afc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4b00:	b662      	cpsie	i
	}
}
    4b02:	4770      	bx	lr
    4b04:	200002b0 	.word	0x200002b0
    4b08:	200002b4 	.word	0x200002b4
    4b0c:	20000014 	.word	0x20000014

00004b10 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    4b10:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b12:	46c6      	mov	lr, r8
    4b14:	b500      	push	{lr}
    4b16:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
    4b18:	ac01      	add	r4, sp, #4
    4b1a:	2501      	movs	r5, #1
    4b1c:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    4b1e:	2300      	movs	r3, #0
    4b20:	4698      	mov	r8, r3
    4b22:	70a3      	strb	r3, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    4b24:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    4b26:	0021      	movs	r1, r4
    4b28:	2013      	movs	r0, #19
    4b2a:	4e12      	ldr	r6, [pc, #72]	; (4b74 <system_board_init+0x64>)
    4b2c:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    4b2e:	4f12      	ldr	r7, [pc, #72]	; (4b78 <system_board_init+0x68>)
    4b30:	2380      	movs	r3, #128	; 0x80
    4b32:	031b      	lsls	r3, r3, #12
    4b34:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    4b36:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_1_PIN, &pin_conf);
    4b38:	0021      	movs	r1, r4
    4b3a:	2012      	movs	r0, #18
    4b3c:	47b0      	blx	r6
    4b3e:	2380      	movs	r3, #128	; 0x80
    4b40:	02db      	lsls	r3, r3, #11
    4b42:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_1_PIN, LED_1_INACTIVE);
#ifdef RFSWITCH_ENABLE
	/* Configure RFSWITCH as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    4b44:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(RF_SWITCH_PIN, &pin_conf);
    4b46:	0021      	movs	r1, r4
    4b48:	200d      	movs	r0, #13
    4b4a:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    4b4c:	2380      	movs	r3, #128	; 0x80
    4b4e:	019b      	lsls	r3, r3, #6
    4b50:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
#endif

#ifdef TCXO_ENABLE
	/* Configure TXPO PWR as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    4b52:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(TCXO_PWR_PIN, &pin_conf);
    4b54:	0021      	movs	r1, r4
    4b56:	2009      	movs	r0, #9
    4b58:	47b0      	blx	r6
    4b5a:	2380      	movs	r3, #128	; 0x80
    4b5c:	009b      	lsls	r3, r3, #2
    4b5e:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    4b60:	4643      	mov	r3, r8
    4b62:	7023      	strb	r3, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    4b64:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    4b66:	0021      	movs	r1, r4
    4b68:	201c      	movs	r0, #28
    4b6a:	47b0      	blx	r6
		
}
    4b6c:	b002      	add	sp, #8
    4b6e:	bc04      	pop	{r2}
    4b70:	4690      	mov	r8, r2
    4b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b74:	00005151 	.word	0x00005151
    4b78:	40002800 	.word	0x40002800

00004b7c <aes_get_config_defaults>:
		struct aes_config *const config)
{

	/* Sanity check arguments */
	Assert(config);
	config->encrypt_mode = AES_ENCRYPTION;
    4b7c:	2301      	movs	r3, #1
    4b7e:	7003      	strb	r3, [r0, #0]
	config->key_size = AES_KEY_SIZE_128;
    4b80:	2300      	movs	r3, #0
    4b82:	7043      	strb	r3, [r0, #1]
	config->start_mode = AES_MANUAL_START;
    4b84:	7083      	strb	r3, [r0, #2]
	config->opmode= AES_ECB_MODE;
    4b86:	70c3      	strb	r3, [r0, #3]
	config->cfb_size = AES_CFB_SIZE_128;
    4b88:	7103      	strb	r3, [r0, #4]
	config->ctype = AES_COUNTERMEASURE_TYPE_ALL;
    4b8a:	220f      	movs	r2, #15
    4b8c:	7142      	strb	r2, [r0, #5]
	config->enable_xor_key = false;
    4b8e:	7183      	strb	r3, [r0, #6]
	config->enable_key_gen = false;
    4b90:	71c3      	strb	r3, [r0, #7]
	config->lod = false;
    4b92:	7203      	strb	r3, [r0, #8]
}
    4b94:	4770      	bx	lr

00004b96 <aes_enable>:
 */
void aes_enable(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLA.reg |= AES_CTRLA_ENABLE;
    4b96:	6802      	ldr	r2, [r0, #0]
    4b98:	6813      	ldr	r3, [r2, #0]
    4b9a:	2102      	movs	r1, #2
    4b9c:	430b      	orrs	r3, r1
    4b9e:	6013      	str	r3, [r2, #0]

}
    4ba0:	4770      	bx	lr

00004ba2 <aes_disable>:
{
	Assert(module);
	Assert(module->hw);

	/* Disbale interrupt */
	module->hw->INTENCLR.reg = AES_INTENCLR_MASK;
    4ba2:	2303      	movs	r3, #3
    4ba4:	6802      	ldr	r2, [r0, #0]
    4ba6:	7153      	strb	r3, [r2, #5]
	/* Clear interrupt flag */
	module->hw->INTFLAG.reg = AES_INTFLAG_MASK;
    4ba8:	6802      	ldr	r2, [r0, #0]
    4baa:	71d3      	strb	r3, [r2, #7]

	module->hw->CTRLA.reg &= (~AES_CTRLA_ENABLE);
    4bac:	6802      	ldr	r2, [r0, #0]
    4bae:	6813      	ldr	r3, [r2, #0]
    4bb0:	2102      	movs	r1, #2
    4bb2:	438b      	bics	r3, r1
    4bb4:	6013      	str	r3, [r2, #0]
}
    4bb6:	4770      	bx	lr

00004bb8 <aes_set_config>:
 */
void aes_set_config(
		struct aes_module *const module,
		Aes *const hw,
		struct aes_config *const config)
{
    4bb8:	b570      	push	{r4, r5, r6, lr}
    4bba:	0004      	movs	r4, r0
    4bbc:	000d      	movs	r5, r1
	/* Validate arguments. */
	Assert(hw);
	Assert(config);
	Assert(module);

	module->opmode = config->opmode;
    4bbe:	78d3      	ldrb	r3, [r2, #3]
    4bc0:	7103      	strb	r3, [r0, #4]
	module->hw = hw;
    4bc2:	6021      	str	r1, [r4, #0]
	module->key_size = config->key_size;
    4bc4:	7853      	ldrb	r3, [r2, #1]
    4bc6:	7143      	strb	r3, [r0, #5]
	module->cfb_size = config->cfb_size;
    4bc8:	7913      	ldrb	r3, [r2, #4]
    4bca:	7183      	strb	r3, [r0, #6]

	ul_mode |= (config->encrypt_mode << AES_CTRLA_CIPHER_Pos)
    4bcc:	7813      	ldrb	r3, [r2, #0]
    4bce:	029b      	lsls	r3, r3, #10
			 | (config->start_mode << AES_CTRLA_STARTMODE_Pos)
    4bd0:	7891      	ldrb	r1, [r2, #2]
    4bd2:	02c9      	lsls	r1, r1, #11
    4bd4:	430b      	orrs	r3, r1
			 | (config->key_size << AES_CTRLA_KEYSIZE_Pos)
    4bd6:	7851      	ldrb	r1, [r2, #1]
    4bd8:	0209      	lsls	r1, r1, #8
    4bda:	430b      	orrs	r3, r1
			 | (config->opmode << AES_CTRLA_AESMODE_Pos)
    4bdc:	78d1      	ldrb	r1, [r2, #3]
    4bde:	0089      	lsls	r1, r1, #2
    4be0:	430b      	orrs	r3, r1
			 | (config->cfb_size << AES_CTRLA_CFBS_Pos)
    4be2:	7911      	ldrb	r1, [r2, #4]
    4be4:	0149      	lsls	r1, r1, #5
    4be6:	430b      	orrs	r3, r1
			 | (AES_CTRLA_CTYPE(config->ctype))
			 | (config->enable_xor_key << AES_CTRLA_XORKEY_Pos)
    4be8:	7991      	ldrb	r1, [r2, #6]
    4bea:	0389      	lsls	r1, r1, #14
			 | (config->enable_key_gen << AES_CTRLA_KEYGEN_Pos)
    4bec:	79d0      	ldrb	r0, [r2, #7]
    4bee:	0340      	lsls	r0, r0, #13
			 | (config->lod << AES_CTRLA_LOD_Pos);
    4bf0:	4301      	orrs	r1, r0
    4bf2:	7a10      	ldrb	r0, [r2, #8]
    4bf4:	0300      	lsls	r0, r0, #12
    4bf6:	4301      	orrs	r1, r0
			 | (AES_CTRLA_CTYPE(config->ctype))
    4bf8:	7952      	ldrb	r2, [r2, #5]
    4bfa:	0412      	lsls	r2, r2, #16
    4bfc:	20f0      	movs	r0, #240	; 0xf0
    4bfe:	0300      	lsls	r0, r0, #12
    4c00:	4002      	ands	r2, r0
			 | (config->lod << AES_CTRLA_LOD_Pos);
    4c02:	430a      	orrs	r2, r1
    4c04:	4313      	orrs	r3, r2
    4c06:	001e      	movs	r6, r3
	if (hw->CTRLA.reg & AES_CTRLA_ENABLE) {
    4c08:	682b      	ldr	r3, [r5, #0]
    4c0a:	079b      	lsls	r3, r3, #30
    4c0c:	d401      	bmi.n	4c12 <aes_set_config+0x5a>
		aes_disable(module);
		hw->CTRLA.reg = ul_mode;
		aes_enable(module);
	} else {
		hw->CTRLA.reg = ul_mode;
    4c0e:	602e      	str	r6, [r5, #0]
	}
}
    4c10:	bd70      	pop	{r4, r5, r6, pc}
		aes_disable(module);
    4c12:	0020      	movs	r0, r4
    4c14:	4b03      	ldr	r3, [pc, #12]	; (4c24 <aes_set_config+0x6c>)
    4c16:	4798      	blx	r3
		hw->CTRLA.reg = ul_mode;
    4c18:	602e      	str	r6, [r5, #0]
		aes_enable(module);
    4c1a:	0020      	movs	r0, r4
    4c1c:	4b02      	ldr	r3, [pc, #8]	; (4c28 <aes_set_config+0x70>)
    4c1e:	4798      	blx	r3
    4c20:	e7f6      	b.n	4c10 <aes_set_config+0x58>
    4c22:	46c0      	nop			; (mov r8, r8)
    4c24:	00004ba3 	.word	0x00004ba3
    4c28:	00004b97 	.word	0x00004b97

00004c2c <aes_init>:
{
    4c2c:	b570      	push	{r4, r5, r6, lr}
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    4c2e:	4c05      	ldr	r4, [pc, #20]	; (4c44 <aes_init+0x18>)
    4c30:	69e5      	ldr	r5, [r4, #28]
    4c32:	2380      	movs	r3, #128	; 0x80
    4c34:	019b      	lsls	r3, r3, #6
    4c36:	432b      	orrs	r3, r5
    4c38:	61e3      	str	r3, [r4, #28]
	hw->CTRLA.reg = AES_CTRLA_SWRST;
    4c3a:	2301      	movs	r3, #1
    4c3c:	600b      	str	r3, [r1, #0]
	aes_set_config(module,hw, config);
    4c3e:	4b02      	ldr	r3, [pc, #8]	; (4c48 <aes_init+0x1c>)
    4c40:	4798      	blx	r3
}
    4c42:	bd70      	pop	{r4, r5, r6, pc}
    4c44:	40000400 	.word	0x40000400
    4c48:	00004bb9 	.word	0x00004bb9

00004c4c <aes_write_key>:
 * \note The key size depends on the current AES configuration.
 */
void aes_write_key(
		struct aes_module *const module,
		const uint32_t *key)
{
    4c4c:	b570      	push	{r4, r5, r6, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(key);

	switch (module->key_size) {
    4c4e:	7943      	ldrb	r3, [r0, #5]
    4c50:	2b01      	cmp	r3, #1
    4c52:	d005      	beq.n	4c60 <aes_write_key+0x14>
    4c54:	2b00      	cmp	r3, #0
    4c56:	d010      	beq.n	4c7a <aes_write_key+0x2e>
    4c58:	2b02      	cmp	r3, #2
    4c5a:	d10d      	bne.n	4c78 <aes_write_key+0x2c>
	case AES_KEY_SIZE_192:
		key_length = 6;
		break;

	case AES_KEY_SIZE_256:
		key_length = 8;
    4c5c:	2508      	movs	r5, #8
    4c5e:	e000      	b.n	4c62 <aes_write_key+0x16>
		key_length = 6;
    4c60:	2506      	movs	r5, #6
{
    4c62:	2300      	movs	r3, #0
	default:
		break;
	}

	for (i = 0; i < key_length; i++) {
		module->hw->KEYWORD[i].reg = *key;
    4c64:	c910      	ldmia	r1!, {r4}
    4c66:	1c9a      	adds	r2, r3, #2
    4c68:	0092      	lsls	r2, r2, #2
    4c6a:	6806      	ldr	r6, [r0, #0]
    4c6c:	46b4      	mov	ip, r6
    4c6e:	4462      	add	r2, ip
    4c70:	6054      	str	r4, [r2, #4]
	for (i = 0; i < key_length; i++) {
    4c72:	3301      	adds	r3, #1
    4c74:	42ab      	cmp	r3, r5
    4c76:	d3f5      	bcc.n	4c64 <aes_write_key+0x18>
		key++;
	}
}
    4c78:	bd70      	pop	{r4, r5, r6, pc}
		key_length = 4;
    4c7a:	2504      	movs	r5, #4
    4c7c:	e7f1      	b.n	4c62 <aes_write_key+0x16>
    4c7e:	Address 0x00004c7e is out of bounds.


00004c80 <aes_write_input_data>:
 * \param[in] input_data_buffer Pointer to an input data buffer
 */
void aes_write_input_data(
		struct aes_module *const module,
		const uint32_t *input_data_buffer)
{
    4c80:	b510      	push	{r4, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);;
	Assert(input_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
    4c82:	2300      	movs	r3, #0
    4c84:	6802      	ldr	r2, [r0, #0]
    4c86:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
    4c88:	4b0f      	ldr	r3, [pc, #60]	; (4cc8 <aes_write_input_data+0x48>)
    4c8a:	6842      	ldr	r2, [r0, #4]
    4c8c:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
    4c8e:	4a0f      	ldr	r2, [pc, #60]	; (4ccc <aes_write_input_data+0x4c>)
    4c90:	4293      	cmp	r3, r2
    4c92:	d00a      	beq.n	4caa <aes_write_input_data+0x2a>
		for (i = 0; i < 2; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
			input_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
    4c94:	7903      	ldrb	r3, [r0, #4]
    4c96:	2b03      	cmp	r3, #3
    4c98:	d00e      	beq.n	4cb8 <aes_write_input_data+0x38>
    4c9a:	000c      	movs	r4, r1
    4c9c:	3410      	adds	r4, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		module->hw->INDATA.reg = *input_data_buffer;
	} else {
		for (i = 0; i < 4; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
    4c9e:	6803      	ldr	r3, [r0, #0]
    4ca0:	c904      	ldmia	r1!, {r2}
    4ca2:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < 4; i++) {
    4ca4:	428c      	cmp	r4, r1
    4ca6:	d1fa      	bne.n	4c9e <aes_write_input_data+0x1e>
			input_data_buffer++;
		}
	}
}
    4ca8:	bd10      	pop	{r4, pc}
			module->hw->INDATA.reg = *input_data_buffer;
    4caa:	6803      	ldr	r3, [r0, #0]
    4cac:	680a      	ldr	r2, [r1, #0]
    4cae:	639a      	str	r2, [r3, #56]	; 0x38
    4cb0:	6803      	ldr	r3, [r0, #0]
    4cb2:	684a      	ldr	r2, [r1, #4]
    4cb4:	639a      	str	r2, [r3, #56]	; 0x38
    4cb6:	e7f7      	b.n	4ca8 <aes_write_input_data+0x28>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
    4cb8:	7983      	ldrb	r3, [r0, #6]
    4cba:	3b02      	subs	r3, #2
    4cbc:	2b01      	cmp	r3, #1
    4cbe:	d8ec      	bhi.n	4c9a <aes_write_input_data+0x1a>
		module->hw->INDATA.reg = *input_data_buffer;
    4cc0:	6803      	ldr	r3, [r0, #0]
    4cc2:	680a      	ldr	r2, [r1, #0]
    4cc4:	639a      	str	r2, [r3, #56]	; 0x38
    4cc6:	e7ef      	b.n	4ca8 <aes_write_input_data+0x28>
    4cc8:	00ff00ff 	.word	0x00ff00ff
    4ccc:	00010003 	.word	0x00010003

00004cd0 <aes_read_output_data>:
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(output_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
    4cd0:	2300      	movs	r3, #0
    4cd2:	6802      	ldr	r2, [r0, #0]
    4cd4:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
    4cd6:	4b10      	ldr	r3, [pc, #64]	; (4d18 <aes_read_output_data+0x48>)
    4cd8:	6842      	ldr	r2, [r0, #4]
    4cda:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
    4cdc:	4a0f      	ldr	r2, [pc, #60]	; (4d1c <aes_read_output_data+0x4c>)
    4cde:	4293      	cmp	r3, r2
    4ce0:	d00a      	beq.n	4cf8 <aes_read_output_data+0x28>
		for (i = 0; i < 2; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
			output_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
    4ce2:	7903      	ldrb	r3, [r0, #4]
    4ce4:	2b03      	cmp	r3, #3
    4ce6:	d00e      	beq.n	4d06 <aes_read_output_data+0x36>
    4ce8:	000a      	movs	r2, r1
    4cea:	3210      	adds	r2, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		*output_data_buffer = module->hw->INDATA.reg;
	} else {
		for (i = 0; i < 4; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
    4cec:	6803      	ldr	r3, [r0, #0]
    4cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4cf0:	c108      	stmia	r1!, {r3}
		for (i = 0; i < 4; i++) {
    4cf2:	428a      	cmp	r2, r1
    4cf4:	d1fa      	bne.n	4cec <aes_read_output_data+0x1c>
			output_data_buffer++;
		}
	}
}
    4cf6:	4770      	bx	lr
			*output_data_buffer = module->hw->INDATA.reg;
    4cf8:	6803      	ldr	r3, [r0, #0]
    4cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4cfc:	600b      	str	r3, [r1, #0]
    4cfe:	6803      	ldr	r3, [r0, #0]
    4d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4d02:	604b      	str	r3, [r1, #4]
    4d04:	e7f7      	b.n	4cf6 <aes_read_output_data+0x26>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
    4d06:	7983      	ldrb	r3, [r0, #6]
    4d08:	3b02      	subs	r3, #2
    4d0a:	2b01      	cmp	r3, #1
    4d0c:	d8ec      	bhi.n	4ce8 <aes_read_output_data+0x18>
		*output_data_buffer = module->hw->INDATA.reg;
    4d0e:	6803      	ldr	r3, [r0, #0]
    4d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4d12:	600b      	str	r3, [r1, #0]
    4d14:	e7ef      	b.n	4cf6 <aes_read_output_data+0x26>
    4d16:	46c0      	nop			; (mov r8, r8)
    4d18:	00ff00ff 	.word	0x00ff00ff
    4d1c:	00010003 	.word	0x00010003

00004d20 <AES_Handler>:

/**
* \internal The AES interrupt handler.
*/
void AES_Handler(void)
{
    4d20:	b510      	push	{r4, lr}
	uint32_t status = AES->INTFLAG.reg;
    4d22:	4b0c      	ldr	r3, [pc, #48]	; (4d54 <AES_Handler+0x34>)
    4d24:	79dc      	ldrb	r4, [r3, #7]
    4d26:	b2e4      	uxtb	r4, r4

	if (status & AES_INTFLAG_ENCCMP) {
    4d28:	07e3      	lsls	r3, r4, #31
    4d2a:	d507      	bpl.n	4d3c <AES_Handler+0x1c>
		if (aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]) {
    4d2c:	4b0a      	ldr	r3, [pc, #40]	; (4d58 <AES_Handler+0x38>)
    4d2e:	681b      	ldr	r3, [r3, #0]
    4d30:	2b00      	cmp	r3, #0
    4d32:	d00d      	beq.n	4d50 <AES_Handler+0x30>
			AES->INTFLAG.reg = AES_INTFLAG_ENCCMP;
    4d34:	2101      	movs	r1, #1
    4d36:	4a07      	ldr	r2, [pc, #28]	; (4d54 <AES_Handler+0x34>)
    4d38:	71d1      	strb	r1, [r2, #7]
			aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]();
    4d3a:	4798      	blx	r3
		}
	}

	if (status & AES_INTFLAG_GFMCMP) {
    4d3c:	07a3      	lsls	r3, r4, #30
    4d3e:	d507      	bpl.n	4d50 <AES_Handler+0x30>
		if (aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]) {
    4d40:	4b05      	ldr	r3, [pc, #20]	; (4d58 <AES_Handler+0x38>)
    4d42:	681b      	ldr	r3, [r3, #0]
    4d44:	2b00      	cmp	r3, #0
    4d46:	d003      	beq.n	4d50 <AES_Handler+0x30>
			AES->INTFLAG.reg = AES_INTFLAG_GFMCMP;
    4d48:	2102      	movs	r1, #2
    4d4a:	4a02      	ldr	r2, [pc, #8]	; (4d54 <AES_Handler+0x34>)
    4d4c:	71d1      	strb	r1, [r2, #7]
			aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]();
    4d4e:	4798      	blx	r3
		}
	}
}
    4d50:	bd10      	pop	{r4, pc}
    4d52:	46c0      	nop			; (mov r8, r8)
    4d54:	42003400 	.word	0x42003400
    4d58:	200002b8 	.word	0x200002b8

00004d5c <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4d5c:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    4d5e:	2a00      	cmp	r2, #0
    4d60:	d001      	beq.n	4d66 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    4d62:	0018      	movs	r0, r3
    4d64:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    4d66:	008b      	lsls	r3, r1, #2
    4d68:	4a06      	ldr	r2, [pc, #24]	; (4d84 <extint_register_callback+0x28>)
    4d6a:	589b      	ldr	r3, [r3, r2]
    4d6c:	2b00      	cmp	r3, #0
    4d6e:	d003      	beq.n	4d78 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    4d70:	4283      	cmp	r3, r0
    4d72:	d005      	beq.n	4d80 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    4d74:	231d      	movs	r3, #29
    4d76:	e7f4      	b.n	4d62 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    4d78:	0089      	lsls	r1, r1, #2
    4d7a:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    4d7c:	2300      	movs	r3, #0
    4d7e:	e7f0      	b.n	4d62 <extint_register_callback+0x6>
		return STATUS_OK;
    4d80:	2300      	movs	r3, #0
    4d82:	e7ee      	b.n	4d62 <extint_register_callback+0x6>
    4d84:	200020e4 	.word	0x200020e4

00004d88 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4d88:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    4d8a:	2900      	cmp	r1, #0
    4d8c:	d001      	beq.n	4d92 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    4d8e:	0018      	movs	r0, r3
    4d90:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    4d92:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    4d94:	281f      	cmp	r0, #31
    4d96:	d800      	bhi.n	4d9a <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    4d98:	4a02      	ldr	r2, [pc, #8]	; (4da4 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    4d9a:	2301      	movs	r3, #1
    4d9c:	4083      	lsls	r3, r0
    4d9e:	6113      	str	r3, [r2, #16]
	return STATUS_OK;
    4da0:	2300      	movs	r3, #0
    4da2:	e7f4      	b.n	4d8e <extint_chan_enable_callback+0x6>
    4da4:	40002400 	.word	0x40002400

00004da8 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    4da8:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4daa:	2200      	movs	r2, #0
    4dac:	4b10      	ldr	r3, [pc, #64]	; (4df0 <EIC_Handler+0x48>)
    4dae:	701a      	strb	r2, [r3, #0]
    4db0:	2300      	movs	r3, #0
    4db2:	4910      	ldr	r1, [pc, #64]	; (4df4 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    4db4:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    4db6:	4e10      	ldr	r6, [pc, #64]	; (4df8 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4db8:	4c0d      	ldr	r4, [pc, #52]	; (4df0 <EIC_Handler+0x48>)
    4dba:	e00a      	b.n	4dd2 <EIC_Handler+0x2a>
		return eics[eic_index];
    4dbc:	490d      	ldr	r1, [pc, #52]	; (4df4 <EIC_Handler+0x4c>)
    4dbe:	e008      	b.n	4dd2 <EIC_Handler+0x2a>
    4dc0:	7823      	ldrb	r3, [r4, #0]
    4dc2:	3301      	adds	r3, #1
    4dc4:	b2db      	uxtb	r3, r3
    4dc6:	7023      	strb	r3, [r4, #0]
    4dc8:	2b0f      	cmp	r3, #15
    4dca:	d810      	bhi.n	4dee <EIC_Handler+0x46>
		return NULL;
    4dcc:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    4dce:	2b1f      	cmp	r3, #31
    4dd0:	d9f4      	bls.n	4dbc <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    4dd2:	0028      	movs	r0, r5
    4dd4:	4018      	ands	r0, r3
    4dd6:	2201      	movs	r2, #1
    4dd8:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    4dda:	6948      	ldr	r0, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
    4ddc:	4210      	tst	r0, r2
    4dde:	d0ef      	beq.n	4dc0 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    4de0:	614a      	str	r2, [r1, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    4de2:	009b      	lsls	r3, r3, #2
    4de4:	599b      	ldr	r3, [r3, r6]
    4de6:	2b00      	cmp	r3, #0
    4de8:	d0ea      	beq.n	4dc0 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    4dea:	4798      	blx	r3
    4dec:	e7e8      	b.n	4dc0 <EIC_Handler+0x18>
			}
		}
	}
}
    4dee:	bd70      	pop	{r4, r5, r6, pc}
    4df0:	200020e3 	.word	0x200020e3
    4df4:	40002400 	.word	0x40002400
    4df8:	200020e4 	.word	0x200020e4

00004dfc <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
    4dfc:	4a06      	ldr	r2, [pc, #24]	; (4e18 <_extint_enable+0x1c>)
    4dfe:	7813      	ldrb	r3, [r2, #0]
    4e00:	2102      	movs	r1, #2
    4e02:	430b      	orrs	r3, r1
    4e04:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4e06:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4e08:	6853      	ldr	r3, [r2, #4]
    4e0a:	4219      	tst	r1, r3
    4e0c:	d1fc      	bne.n	4e08 <_extint_enable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4e0e:	6853      	ldr	r3, [r2, #4]
    4e10:	4218      	tst	r0, r3
    4e12:	d1f9      	bne.n	4e08 <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    4e14:	4770      	bx	lr
    4e16:	46c0      	nop			; (mov r8, r8)
    4e18:	40002400 	.word	0x40002400

00004e1c <_extint_disable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    4e1c:	4a06      	ldr	r2, [pc, #24]	; (4e38 <_extint_disable+0x1c>)
    4e1e:	7813      	ldrb	r3, [r2, #0]
    4e20:	2102      	movs	r1, #2
    4e22:	438b      	bics	r3, r1
    4e24:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4e26:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4e28:	6853      	ldr	r3, [r2, #4]
    4e2a:	4219      	tst	r1, r3
    4e2c:	d1fc      	bne.n	4e28 <_extint_disable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4e2e:	6853      	ldr	r3, [r2, #4]
    4e30:	4218      	tst	r0, r3
    4e32:	d1f9      	bne.n	4e28 <_extint_disable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    4e34:	4770      	bx	lr
    4e36:	46c0      	nop			; (mov r8, r8)
    4e38:	40002400 	.word	0x40002400

00004e3c <_system_extint_init>:
{
    4e3c:	b510      	push	{r4, lr}
			MCLK->APBAMASK.reg |= mask;
    4e3e:	4a12      	ldr	r2, [pc, #72]	; (4e88 <_system_extint_init+0x4c>)
    4e40:	6951      	ldr	r1, [r2, #20]
    4e42:	2380      	movs	r3, #128	; 0x80
    4e44:	009b      	lsls	r3, r3, #2
    4e46:	430b      	orrs	r3, r1
    4e48:	6153      	str	r3, [r2, #20]
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
    4e4a:	4a10      	ldr	r2, [pc, #64]	; (4e8c <_system_extint_init+0x50>)
    4e4c:	7813      	ldrb	r3, [r2, #0]
    4e4e:	2101      	movs	r1, #1
    4e50:	430b      	orrs	r3, r1
    4e52:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4e54:	3101      	adds	r1, #1
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4e56:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4e58:	6853      	ldr	r3, [r2, #4]
    4e5a:	4219      	tst	r1, r3
    4e5c:	d1fc      	bne.n	4e58 <_system_extint_init+0x1c>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4e5e:	6853      	ldr	r3, [r2, #4]
    4e60:	4218      	tst	r0, r3
    4e62:	d1f9      	bne.n	4e58 <_system_extint_init+0x1c>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_ULP32K;
    4e64:	4a09      	ldr	r2, [pc, #36]	; (4e8c <_system_extint_init+0x50>)
    4e66:	7813      	ldrb	r3, [r2, #0]
    4e68:	2110      	movs	r1, #16
    4e6a:	430b      	orrs	r3, r1
    4e6c:	7013      	strb	r3, [r2, #0]
    4e6e:	4b08      	ldr	r3, [pc, #32]	; (4e90 <_system_extint_init+0x54>)
    4e70:	0019      	movs	r1, r3
    4e72:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    4e74:	2200      	movs	r2, #0
    4e76:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    4e78:	428b      	cmp	r3, r1
    4e7a:	d1fc      	bne.n	4e76 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4e7c:	2208      	movs	r2, #8
    4e7e:	4b05      	ldr	r3, [pc, #20]	; (4e94 <_system_extint_init+0x58>)
    4e80:	601a      	str	r2, [r3, #0]
	_extint_enable();
    4e82:	4b05      	ldr	r3, [pc, #20]	; (4e98 <_system_extint_init+0x5c>)
    4e84:	4798      	blx	r3
}
    4e86:	bd10      	pop	{r4, pc}
    4e88:	40000400 	.word	0x40000400
    4e8c:	40002400 	.word	0x40002400
    4e90:	200020e4 	.word	0x200020e4
    4e94:	e000e100 	.word	0xe000e100
    4e98:	00004dfd 	.word	0x00004dfd

00004e9c <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    4e9c:	2300      	movs	r3, #0
    4e9e:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    4ea0:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    4ea2:	2201      	movs	r2, #1
    4ea4:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
    4ea6:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    4ea8:	3201      	adds	r2, #1
    4eaa:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
    4eac:	7243      	strb	r3, [r0, #9]
}
    4eae:	4770      	bx	lr

00004eb0 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    4eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4eb2:	b083      	sub	sp, #12
    4eb4:	0005      	movs	r5, r0
    4eb6:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
    4eb8:	4b1c      	ldr	r3, [pc, #112]	; (4f2c <extint_chan_set_config+0x7c>)
    4eba:	4798      	blx	r3
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4ebc:	a901      	add	r1, sp, #4
    4ebe:	2300      	movs	r3, #0
    4ec0:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    4ec2:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    4ec4:	7923      	ldrb	r3, [r4, #4]
    4ec6:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    4ec8:	7a23      	ldrb	r3, [r4, #8]
    4eca:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    4ecc:	7820      	ldrb	r0, [r4, #0]
    4ece:	4b18      	ldr	r3, [pc, #96]	; (4f30 <extint_chan_set_config+0x80>)
    4ed0:	4798      	blx	r3
		return NULL;
    4ed2:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    4ed4:	2d1f      	cmp	r5, #31
    4ed6:	d800      	bhi.n	4eda <extint_chan_set_config+0x2a>
		return eics[eic_index];
    4ed8:	4916      	ldr	r1, [pc, #88]	; (4f34 <extint_chan_set_config+0x84>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    4eda:	2207      	movs	r2, #7
    4edc:	402a      	ands	r2, r5
    4ede:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    4ee0:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    4ee2:	7aa3      	ldrb	r3, [r4, #10]
    4ee4:	2b00      	cmp	r3, #0
    4ee6:	d001      	beq.n	4eec <extint_chan_set_config+0x3c>
    4ee8:	2308      	movs	r3, #8
    4eea:	431f      	orrs	r7, r3
    4eec:	08eb      	lsrs	r3, r5, #3
    4eee:	009b      	lsls	r3, r3, #2
    4ef0:	18cb      	adds	r3, r1, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    4ef2:	69d8      	ldr	r0, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4ef4:	260f      	movs	r6, #15
    4ef6:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    4ef8:	43b0      	bics	r0, r6
			(new_config << config_pos);
    4efa:	4097      	lsls	r7, r2
    4efc:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4efe:	4302      	orrs	r2, r0
		= (EIC_module->CONFIG[channel / 8].reg &
    4f00:	61da      	str	r2, [r3, #28]
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
    4f02:	7a63      	ldrb	r3, [r4, #9]
    4f04:	2b00      	cmp	r3, #0
    4f06:	d10b      	bne.n	4f20 <extint_chan_set_config+0x70>
		EIC_module->ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
    4f08:	698a      	ldr	r2, [r1, #24]
    4f0a:	2301      	movs	r3, #1
    4f0c:	40ab      	lsls	r3, r5
    4f0e:	43db      	mvns	r3, r3
    4f10:	041b      	lsls	r3, r3, #16
    4f12:	0c1b      	lsrs	r3, r3, #16
    4f14:	4013      	ands	r3, r2
    4f16:	618b      	str	r3, [r1, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
    4f18:	4b07      	ldr	r3, [pc, #28]	; (4f38 <extint_chan_set_config+0x88>)
    4f1a:	4798      	blx	r3
}
    4f1c:	b003      	add	sp, #12
    4f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->ASYNCH.reg |= (1UL << channel);
    4f20:	698a      	ldr	r2, [r1, #24]
    4f22:	2301      	movs	r3, #1
    4f24:	40ab      	lsls	r3, r5
    4f26:	4313      	orrs	r3, r2
    4f28:	618b      	str	r3, [r1, #24]
    4f2a:	e7f5      	b.n	4f18 <extint_chan_set_config+0x68>
    4f2c:	00004e1d 	.word	0x00004e1d
    4f30:	0000718d 	.word	0x0000718d
    4f34:	40002400 	.word	0x40002400
    4f38:	00004dfd 	.word	0x00004dfd

00004f3c <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    4f3c:	b530      	push	{r4, r5, lr}
    4f3e:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    4f40:	4a25      	ldr	r2, [pc, #148]	; (4fd8 <nvm_execute_command+0x9c>)
    4f42:	8810      	ldrh	r0, [r2, #0]
    4f44:	8853      	ldrh	r3, [r2, #2]
    4f46:	4343      	muls	r3, r0
    4f48:	428b      	cmp	r3, r1
    4f4a:	d20b      	bcs.n	4f64 <nvm_execute_command+0x28>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    4f4c:	2280      	movs	r2, #128	; 0x80
    4f4e:	0192      	lsls	r2, r2, #6
    4f50:	4b22      	ldr	r3, [pc, #136]	; (4fdc <nvm_execute_command+0xa0>)
    4f52:	18cb      	adds	r3, r1, r3
    4f54:	4293      	cmp	r3, r2
    4f56:	d905      	bls.n	4f64 <nvm_execute_command+0x28>
#ifdef FEATURE_NVM_RWWEE
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4f58:	4a21      	ldr	r2, [pc, #132]	; (4fe0 <nvm_execute_command+0xa4>)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    4f5a:	2018      	movs	r0, #24
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4f5c:	4b21      	ldr	r3, [pc, #132]	; (4fe4 <nvm_execute_command+0xa8>)
    4f5e:	18cb      	adds	r3, r1, r3
    4f60:	4293      	cmp	r3, r2
    4f62:	d80e      	bhi.n	4f82 <nvm_execute_command+0x46>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    4f64:	4b20      	ldr	r3, [pc, #128]	; (4fe8 <nvm_execute_command+0xac>)
    4f66:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    4f68:	2280      	movs	r2, #128	; 0x80
    4f6a:	02d2      	lsls	r2, r2, #11
    4f6c:	432a      	orrs	r2, r5
    4f6e:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4f70:	2220      	movs	r2, #32
    4f72:	32ff      	adds	r2, #255	; 0xff
    4f74:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    4f76:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    4f78:	07db      	lsls	r3, r3, #31
    4f7a:	d403      	bmi.n	4f84 <nvm_execute_command+0x48>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    4f7c:	4b1a      	ldr	r3, [pc, #104]	; (4fe8 <nvm_execute_command+0xac>)
    4f7e:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
    4f80:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    4f82:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    4f84:	2c45      	cmp	r4, #69	; 0x45
    4f86:	d822      	bhi.n	4fce <nvm_execute_command+0x92>
    4f88:	00a3      	lsls	r3, r4, #2
    4f8a:	4a18      	ldr	r2, [pc, #96]	; (4fec <nvm_execute_command+0xb0>)
    4f8c:	58d3      	ldr	r3, [r2, r3]
    4f8e:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    4f90:	4b15      	ldr	r3, [pc, #84]	; (4fe8 <nvm_execute_command+0xac>)
    4f92:	8b1b      	ldrh	r3, [r3, #24]
    4f94:	05db      	lsls	r3, r3, #23
    4f96:	d503      	bpl.n	4fa0 <nvm_execute_command+0x64>
				nvm_module->CTRLB.reg = ctrlb_bak;
    4f98:	4b13      	ldr	r3, [pc, #76]	; (4fe8 <nvm_execute_command+0xac>)
    4f9a:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
    4f9c:	2010      	movs	r0, #16
    4f9e:	e7f0      	b.n	4f82 <nvm_execute_command+0x46>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    4fa0:	0889      	lsrs	r1, r1, #2
    4fa2:	0049      	lsls	r1, r1, #1
    4fa4:	4b10      	ldr	r3, [pc, #64]	; (4fe8 <nvm_execute_command+0xac>)
    4fa6:	61d9      	str	r1, [r3, #28]
			break;
    4fa8:	e003      	b.n	4fb2 <nvm_execute_command+0x76>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    4faa:	0889      	lsrs	r1, r1, #2
    4fac:	0049      	lsls	r1, r1, #1
    4fae:	4b0e      	ldr	r3, [pc, #56]	; (4fe8 <nvm_execute_command+0xac>)
    4fb0:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    4fb2:	20a5      	movs	r0, #165	; 0xa5
    4fb4:	0200      	lsls	r0, r0, #8
    4fb6:	4304      	orrs	r4, r0
    4fb8:	4b0b      	ldr	r3, [pc, #44]	; (4fe8 <nvm_execute_command+0xac>)
    4fba:	801c      	strh	r4, [r3, #0]
    4fbc:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    4fbe:	2201      	movs	r2, #1
    4fc0:	7d0b      	ldrb	r3, [r1, #20]
    4fc2:	4213      	tst	r3, r2
    4fc4:	d0fc      	beq.n	4fc0 <nvm_execute_command+0x84>
	nvm_module->CTRLB.reg = ctrlb_bak;
    4fc6:	4b08      	ldr	r3, [pc, #32]	; (4fe8 <nvm_execute_command+0xac>)
    4fc8:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
    4fca:	2000      	movs	r0, #0
    4fcc:	e7d9      	b.n	4f82 <nvm_execute_command+0x46>
			nvm_module->CTRLB.reg = ctrlb_bak;
    4fce:	4b06      	ldr	r3, [pc, #24]	; (4fe8 <nvm_execute_command+0xac>)
    4fd0:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    4fd2:	2017      	movs	r0, #23
    4fd4:	e7d5      	b.n	4f82 <nvm_execute_command+0x46>
    4fd6:	46c0      	nop			; (mov r8, r8)
    4fd8:	200002c0 	.word	0x200002c0
    4fdc:	ff7fc000 	.word	0xff7fc000
    4fe0:	00001fff 	.word	0x00001fff
    4fe4:	ffc00000 	.word	0xffc00000
    4fe8:	41004000 	.word	0x41004000
    4fec:	00018338 	.word	0x00018338

00004ff0 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    4ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    4ff2:	4b2f      	ldr	r3, [pc, #188]	; (50b0 <nvm_write_buffer+0xc0>)
    4ff4:	881c      	ldrh	r4, [r3, #0]
    4ff6:	885b      	ldrh	r3, [r3, #2]
    4ff8:	4363      	muls	r3, r4
	if (destination_address >
    4ffa:	4283      	cmp	r3, r0
    4ffc:	d207      	bcs.n	500e <nvm_write_buffer+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4ffe:	4e2d      	ldr	r6, [pc, #180]	; (50b4 <nvm_write_buffer+0xc4>)
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    5000:	2518      	movs	r5, #24
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    5002:	4b2d      	ldr	r3, [pc, #180]	; (50b8 <nvm_write_buffer+0xc8>)
    5004:	18c3      	adds	r3, r0, r3
    5006:	42b3      	cmp	r3, r6
    5008:	d806      	bhi.n	5018 <nvm_write_buffer+0x28>
		}
		is_rww_eeprom = true;
    500a:	2601      	movs	r6, #1
    500c:	e000      	b.n	5010 <nvm_write_buffer+0x20>
	bool is_rww_eeprom = false;
    500e:	2600      	movs	r6, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    5010:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
    5012:	2518      	movs	r5, #24
	if (destination_address & (_nvm_dev.page_size - 1)) {
    5014:	4218      	tst	r0, r3
    5016:	d001      	beq.n	501c <nvm_write_buffer+0x2c>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    5018:	0028      	movs	r0, r5
    501a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    501c:	3d01      	subs	r5, #1
	if (length > _nvm_dev.page_size) {
    501e:	4294      	cmp	r4, r2
    5020:	d3fa      	bcc.n	5018 <nvm_write_buffer+0x28>
    5022:	4b26      	ldr	r3, [pc, #152]	; (50bc <nvm_write_buffer+0xcc>)
    5024:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    5026:	3d12      	subs	r5, #18
	if (!nvm_is_ready()) {
    5028:	07db      	lsls	r3, r3, #31
    502a:	d5f5      	bpl.n	5018 <nvm_write_buffer+0x28>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    502c:	4c24      	ldr	r4, [pc, #144]	; (50c0 <nvm_write_buffer+0xd0>)
    502e:	4b23      	ldr	r3, [pc, #140]	; (50bc <nvm_write_buffer+0xcc>)
    5030:	801c      	strh	r4, [r3, #0]
    5032:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    5034:	2401      	movs	r4, #1
    5036:	7d2b      	ldrb	r3, [r5, #20]
    5038:	4223      	tst	r3, r4
    503a:	d0fc      	beq.n	5036 <nvm_write_buffer+0x46>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    503c:	2420      	movs	r4, #32
    503e:	34ff      	adds	r4, #255	; 0xff
    5040:	4b1e      	ldr	r3, [pc, #120]	; (50bc <nvm_write_buffer+0xcc>)
    5042:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    5044:	2a00      	cmp	r2, #0
    5046:	d02c      	beq.n	50a2 <nvm_write_buffer+0xb2>
    5048:	2301      	movs	r3, #1
    504a:	0005      	movs	r5, r0
    504c:	439d      	bics	r5, r3
    504e:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    5050:	1e54      	subs	r4, r2, #1
    5052:	46a4      	mov	ip, r4
    5054:	e009      	b.n	506a <nvm_write_buffer+0x7a>
			data |= (buffer[i + 1] << 8);
    5056:	18cf      	adds	r7, r1, r3
    5058:	787f      	ldrb	r7, [r7, #1]
    505a:	023f      	lsls	r7, r7, #8
    505c:	433c      	orrs	r4, r7
		NVM_MEMORY[nvm_address++] = data;
    505e:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    5060:	3302      	adds	r3, #2
    5062:	b29b      	uxth	r3, r3
    5064:	3502      	adds	r5, #2
    5066:	429a      	cmp	r2, r3
    5068:	d904      	bls.n	5074 <nvm_write_buffer+0x84>
		data = buffer[i];
    506a:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    506c:	4563      	cmp	r3, ip
    506e:	dbf2      	blt.n	5056 <nvm_write_buffer+0x66>
		data = buffer[i];
    5070:	b2a4      	uxth	r4, r4
    5072:	e7f4      	b.n	505e <nvm_write_buffer+0x6e>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    5074:	4b0e      	ldr	r3, [pc, #56]	; (50b0 <nvm_write_buffer+0xc0>)
    5076:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    5078:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    507a:	2b00      	cmp	r3, #0
    507c:	d1cc      	bne.n	5018 <nvm_write_buffer+0x28>
    507e:	2a3f      	cmp	r2, #63	; 0x3f
    5080:	d8ca      	bhi.n	5018 <nvm_write_buffer+0x28>
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
    5082:	2e00      	cmp	r6, #0
    5084:	d106      	bne.n	5094 <nvm_write_buffer+0xa4>
    5086:	2200      	movs	r2, #0
    5088:	0001      	movs	r1, r0
    508a:	2004      	movs	r0, #4
    508c:	4b0d      	ldr	r3, [pc, #52]	; (50c4 <nvm_write_buffer+0xd4>)
    508e:	4798      	blx	r3
    5090:	0005      	movs	r5, r0
    5092:	e7c1      	b.n	5018 <nvm_write_buffer+0x28>
    5094:	2200      	movs	r2, #0
    5096:	0001      	movs	r1, r0
    5098:	201c      	movs	r0, #28
    509a:	4b0a      	ldr	r3, [pc, #40]	; (50c4 <nvm_write_buffer+0xd4>)
    509c:	4798      	blx	r3
    509e:	0005      	movs	r5, r0
    50a0:	e7ba      	b.n	5018 <nvm_write_buffer+0x28>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    50a2:	4b03      	ldr	r3, [pc, #12]	; (50b0 <nvm_write_buffer+0xc0>)
    50a4:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    50a6:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    50a8:	2b00      	cmp	r3, #0
    50aa:	d0ea      	beq.n	5082 <nvm_write_buffer+0x92>
    50ac:	e7b4      	b.n	5018 <nvm_write_buffer+0x28>
    50ae:	46c0      	nop			; (mov r8, r8)
    50b0:	200002c0 	.word	0x200002c0
    50b4:	00001fff 	.word	0x00001fff
    50b8:	ffc00000 	.word	0xffc00000
    50bc:	41004000 	.word	0x41004000
    50c0:	ffffa544 	.word	0xffffa544
    50c4:	00004f3d 	.word	0x00004f3d

000050c8 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    50c8:	b510      	push	{r4, lr}
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    50ca:	4a1b      	ldr	r2, [pc, #108]	; (5138 <nvm_erase_row+0x70>)
    50cc:	8813      	ldrh	r3, [r2, #0]
    50ce:	8852      	ldrh	r2, [r2, #2]
    50d0:	435a      	muls	r2, r3
	if (row_address >
    50d2:	4282      	cmp	r2, r0
    50d4:	d207      	bcs.n	50e6 <nvm_erase_row+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    50d6:	4c19      	ldr	r4, [pc, #100]	; (513c <nvm_erase_row+0x74>)
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    50d8:	2218      	movs	r2, #24
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    50da:	4919      	ldr	r1, [pc, #100]	; (5140 <nvm_erase_row+0x78>)
    50dc:	1841      	adds	r1, r0, r1
    50de:	42a1      	cmp	r1, r4
    50e0:	d807      	bhi.n	50f2 <nvm_erase_row+0x2a>
		}
		is_rww_eeprom = true;
    50e2:	2101      	movs	r1, #1
    50e4:	e000      	b.n	50e8 <nvm_erase_row+0x20>
		bool is_rww_eeprom = false;
    50e6:	2100      	movs	r1, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    50e8:	009b      	lsls	r3, r3, #2
    50ea:	3b01      	subs	r3, #1
		return STATUS_ERR_BAD_ADDRESS;
    50ec:	2218      	movs	r2, #24
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    50ee:	4218      	tst	r0, r3
    50f0:	d001      	beq.n	50f6 <nvm_erase_row+0x2e>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    50f2:	0010      	movs	r0, r2
    50f4:	bd10      	pop	{r4, pc}
    50f6:	4b13      	ldr	r3, [pc, #76]	; (5144 <nvm_erase_row+0x7c>)
    50f8:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    50fa:	3a13      	subs	r2, #19
	if (!nvm_is_ready()) {
    50fc:	07db      	lsls	r3, r3, #31
    50fe:	d5f8      	bpl.n	50f2 <nvm_erase_row+0x2a>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    5100:	4b10      	ldr	r3, [pc, #64]	; (5144 <nvm_erase_row+0x7c>)
    5102:	2220      	movs	r2, #32
    5104:	32ff      	adds	r2, #255	; 0xff
    5106:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    5108:	0880      	lsrs	r0, r0, #2
    510a:	0040      	lsls	r0, r0, #1
    510c:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
    510e:	2900      	cmp	r1, #0
    5110:	d10f      	bne.n	5132 <nvm_erase_row+0x6a>
    5112:	4a0d      	ldr	r2, [pc, #52]	; (5148 <nvm_erase_row+0x80>)
    5114:	4b0b      	ldr	r3, [pc, #44]	; (5144 <nvm_erase_row+0x7c>)
    5116:	801a      	strh	r2, [r3, #0]
    5118:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    511a:	2201      	movs	r2, #1
    511c:	7d0b      	ldrb	r3, [r1, #20]
    511e:	4213      	tst	r3, r2
    5120:	d0fc      	beq.n	511c <nvm_erase_row+0x54>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    5122:	4b08      	ldr	r3, [pc, #32]	; (5144 <nvm_erase_row+0x7c>)
    5124:	8b1a      	ldrh	r2, [r3, #24]
    5126:	201c      	movs	r0, #28
    5128:	4002      	ands	r2, r0
	return STATUS_OK;
    512a:	1e50      	subs	r0, r2, #1
    512c:	4182      	sbcs	r2, r0
    512e:	0092      	lsls	r2, r2, #2
    5130:	e7df      	b.n	50f2 <nvm_erase_row+0x2a>
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
    5132:	4a06      	ldr	r2, [pc, #24]	; (514c <nvm_erase_row+0x84>)
    5134:	e7ee      	b.n	5114 <nvm_erase_row+0x4c>
    5136:	46c0      	nop			; (mov r8, r8)
    5138:	200002c0 	.word	0x200002c0
    513c:	00001fff 	.word	0x00001fff
    5140:	ffc00000 	.word	0xffc00000
    5144:	41004000 	.word	0x41004000
    5148:	0000a502 	.word	0x0000a502
    514c:	0000a51a 	.word	0x0000a51a

00005150 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    5150:	b500      	push	{lr}
    5152:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5154:	ab01      	add	r3, sp, #4
    5156:	2280      	movs	r2, #128	; 0x80
    5158:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    515a:	780a      	ldrb	r2, [r1, #0]
    515c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    515e:	784a      	ldrb	r2, [r1, #1]
    5160:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    5162:	788a      	ldrb	r2, [r1, #2]
    5164:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    5166:	0019      	movs	r1, r3
    5168:	4b01      	ldr	r3, [pc, #4]	; (5170 <port_pin_set_config+0x20>)
    516a:	4798      	blx	r3
}
    516c:	b003      	add	sp, #12
    516e:	bd00      	pop	{pc}
    5170:	0000718d 	.word	0x0000718d

00005174 <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    5174:	6803      	ldr	r3, [r0, #0]

	if (rtc_module->MODE0.SYNCBUSY.reg) {
    5176:	6918      	ldr	r0, [r3, #16]
    5178:	1e43      	subs	r3, r0, #1
    517a:	4198      	sbcs	r0, r3
    517c:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
    517e:	4770      	bx	lr

00005180 <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
    5180:	b570      	push	{r4, r5, r6, lr}
    5182:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    5184:	6806      	ldr	r6, [r0, #0]

	/* Initialize return value. */
	uint32_t ret_val;

	while (rtc_count_is_syncing(module)) {
    5186:	4d08      	ldr	r5, [pc, #32]	; (51a8 <rtc_count_get_count+0x28>)
    5188:	0020      	movs	r0, r4
    518a:	47a8      	blx	r5
    518c:	2800      	cmp	r0, #0
    518e:	d1fb      	bne.n	5188 <rtc_count_get_count+0x8>
		/* Wait for synchronization */
	}

	/* Read value based on mode. */
	switch (module->mode) {
    5190:	7923      	ldrb	r3, [r4, #4]
    5192:	2b00      	cmp	r3, #0
    5194:	d004      	beq.n	51a0 <rtc_count_get_count+0x20>
			break;

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
    5196:	2000      	movs	r0, #0
	switch (module->mode) {
    5198:	2b01      	cmp	r3, #1
    519a:	d100      	bne.n	519e <rtc_count_get_count+0x1e>
			ret_val = rtc_module->MODE0.COUNT.reg;
    519c:	69b0      	ldr	r0, [r6, #24]
			break;
	}

	return ret_val;
}
    519e:	bd70      	pop	{r4, r5, r6, pc}
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
    51a0:	8b30      	ldrh	r0, [r6, #24]
    51a2:	b280      	uxth	r0, r0
			break;
    51a4:	e7fb      	b.n	519e <rtc_count_get_count+0x1e>
    51a6:	46c0      	nop			; (mov r8, r8)
    51a8:	00005175 	.word	0x00005175

000051ac <rtc_count_disable_callback>:
 * \param[in]     callback_type Callback type to disable
 */
void rtc_count_disable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    51ac:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    51ae:	6802      	ldr	r2, [r0, #0]

	/* Disable interrupt */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    51b0:	290a      	cmp	r1, #10
    51b2:	d010      	beq.n	51d6 <rtc_count_disable_callback+0x2a>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if(callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    51b4:	2907      	cmp	r1, #7
    51b6:	d911      	bls.n	51dc <rtc_count_disable_callback+0x30>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7){
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
	}else {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    51b8:	2380      	movs	r3, #128	; 0x80
    51ba:	005b      	lsls	r3, r3, #1
    51bc:	000c      	movs	r4, r1
    51be:	3c08      	subs	r4, #8
    51c0:	40a3      	lsls	r3, r4
    51c2:	24c0      	movs	r4, #192	; 0xc0
    51c4:	00a4      	lsls	r4, r4, #2
    51c6:	4023      	ands	r3, r4
    51c8:	8113      	strh	r3, [r2, #8]
	}

	/* Mark callback as disabled. */
	module->enabled_callback &= ~(1 << callback_type);
    51ca:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    51cc:	2201      	movs	r2, #1
    51ce:	408a      	lsls	r2, r1
    51d0:	4393      	bics	r3, r2
    51d2:	86c3      	strh	r3, [r0, #54]	; 0x36
}
    51d4:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
    51d6:	4b04      	ldr	r3, [pc, #16]	; (51e8 <rtc_count_disable_callback+0x3c>)
    51d8:	8113      	strh	r3, [r2, #8]
    51da:	e7f6      	b.n	51ca <rtc_count_disable_callback+0x1e>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
    51dc:	2401      	movs	r4, #1
    51de:	408c      	lsls	r4, r1
    51e0:	23ff      	movs	r3, #255	; 0xff
    51e2:	4023      	ands	r3, r4
    51e4:	8113      	strh	r3, [r2, #8]
    51e6:	e7f0      	b.n	51ca <rtc_count_disable_callback+0x1e>
    51e8:	ffff8000 	.word	0xffff8000

000051ec <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    51ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    51ee:	46de      	mov	lr, fp
    51f0:	4657      	mov	r7, sl
    51f2:	464e      	mov	r6, r9
    51f4:	4645      	mov	r5, r8
    51f6:	b5e0      	push	{r5, r6, r7, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    51f8:	4b2b      	ldr	r3, [pc, #172]	; (52a8 <RTC_Handler+0xbc>)
    51fa:	681b      	ldr	r3, [r3, #0]
    51fc:	469a      	mov	sl, r3
	Rtc *const rtc_module = module->hw;
    51fe:	681e      	ldr	r6, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
    5200:	8edb      	ldrh	r3, [r3, #54]	; 0x36
	callback_mask &= module->registered_callback;
    5202:	4652      	mov	r2, sl
    5204:	8e92      	ldrh	r2, [r2, #52]	; 0x34
    5206:	401a      	ands	r2, r3
    5208:	4690      	mov	r8, r2
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    520a:	89b2      	ldrh	r2, [r6, #12]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    520c:	8973      	ldrh	r3, [r6, #10]
    520e:	4013      	ands	r3, r2
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    5210:	b21a      	sxth	r2, r3
    5212:	2a00      	cmp	r2, #0
    5214:	db08      	blt.n	5228 <RTC_Handler+0x3c>
    5216:	27ff      	movs	r7, #255	; 0xff
    5218:	401f      	ands	r7, r3
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
    521a:	d02a      	beq.n	5272 <RTC_Handler+0x86>
    521c:	2400      	movs	r4, #0
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    521e:	2301      	movs	r3, #1
    5220:	4699      	mov	r9, r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    5222:	33fe      	adds	r3, #254	; 0xfe
    5224:	469b      	mov	fp, r3
    5226:	e014      	b.n	5252 <RTC_Handler+0x66>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    5228:	4643      	mov	r3, r8
    522a:	055b      	lsls	r3, r3, #21
    522c:	d407      	bmi.n	523e <RTC_Handler+0x52>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    522e:	4b1f      	ldr	r3, [pc, #124]	; (52ac <RTC_Handler+0xc0>)
    5230:	81b3      	strh	r3, [r6, #12]
	_rtc_interrupt_handler(0);
}
    5232:	bc3c      	pop	{r2, r3, r4, r5}
    5234:	4690      	mov	r8, r2
    5236:	4699      	mov	r9, r3
    5238:	46a2      	mov	sl, r4
    523a:	46ab      	mov	fp, r5
    523c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    523e:	4653      	mov	r3, sl
    5240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5242:	4798      	blx	r3
    5244:	e7f3      	b.n	522e <RTC_Handler+0x42>
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    5246:	465b      	mov	r3, fp
    5248:	401d      	ands	r5, r3
    524a:	81b5      	strh	r5, [r6, #12]
    524c:	3401      	adds	r4, #1
		for ( i = 0;i < RTC_PER_NUM;i++) {
    524e:	2c08      	cmp	r4, #8
    5250:	d0ef      	beq.n	5232 <RTC_Handler+0x46>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    5252:	0023      	movs	r3, r4
    5254:	464d      	mov	r5, r9
    5256:	40a5      	lsls	r5, r4
    5258:	422f      	tst	r7, r5
    525a:	d0f4      	beq.n	5246 <RTC_Handler+0x5a>
			  && (callback_mask & (1 << i))) {
    525c:	4642      	mov	r2, r8
    525e:	4122      	asrs	r2, r4
    5260:	4649      	mov	r1, r9
    5262:	4211      	tst	r1, r2
    5264:	d0ef      	beq.n	5246 <RTC_Handler+0x5a>
				module->callbacks[i]();
    5266:	3302      	adds	r3, #2
    5268:	009b      	lsls	r3, r3, #2
    526a:	4652      	mov	r2, sl
    526c:	589b      	ldr	r3, [r3, r2]
    526e:	4798      	blx	r3
    5270:	e7e9      	b.n	5246 <RTC_Handler+0x5a>
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    5272:	05da      	lsls	r2, r3, #23
    5274:	d50a      	bpl.n	528c <RTC_Handler+0xa0>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    5276:	4643      	mov	r3, r8
    5278:	05db      	lsls	r3, r3, #23
    527a:	d403      	bmi.n	5284 <RTC_Handler+0x98>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    527c:	2380      	movs	r3, #128	; 0x80
    527e:	005b      	lsls	r3, r3, #1
    5280:	81b3      	strh	r3, [r6, #12]
    5282:	e7d6      	b.n	5232 <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    5284:	4653      	mov	r3, sl
    5286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5288:	4798      	blx	r3
    528a:	e7f7      	b.n	527c <RTC_Handler+0x90>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    528c:	059b      	lsls	r3, r3, #22
    528e:	d5d0      	bpl.n	5232 <RTC_Handler+0x46>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    5290:	4643      	mov	r3, r8
    5292:	059b      	lsls	r3, r3, #22
    5294:	d403      	bmi.n	529e <RTC_Handler+0xb2>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    5296:	2380      	movs	r3, #128	; 0x80
    5298:	009b      	lsls	r3, r3, #2
    529a:	81b3      	strh	r3, [r6, #12]
}
    529c:	e7c9      	b.n	5232 <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    529e:	4653      	mov	r3, sl
    52a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    52a2:	4798      	blx	r3
    52a4:	e7f7      	b.n	5296 <RTC_Handler+0xaa>
    52a6:	46c0      	nop			; (mov r8, r8)
    52a8:	20002124 	.word	0x20002124
    52ac:	ffff8000 	.word	0xffff8000

000052b0 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    52b0:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    52b2:	2207      	movs	r2, #7
    52b4:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    52b6:	421a      	tst	r2, r3
    52b8:	d1fc      	bne.n	52b4 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
    52ba:	4770      	bx	lr

000052bc <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    52bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    52be:	46d6      	mov	lr, sl
    52c0:	464f      	mov	r7, r9
    52c2:	4646      	mov	r6, r8
    52c4:	b5c0      	push	{r6, r7, lr}
    52c6:	b08a      	sub	sp, #40	; 0x28
    52c8:	0007      	movs	r7, r0
    52ca:	000e      	movs	r6, r1
    52cc:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    52ce:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    52d0:	0008      	movs	r0, r1
    52d2:	4b9c      	ldr	r3, [pc, #624]	; (5544 <i2c_master_init+0x288>)
    52d4:	4798      	blx	r3

#if (SAML22) || (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
    52d6:	2805      	cmp	r0, #5
    52d8:	d100      	bne.n	52dc <i2c_master_init+0x20>
    52da:	e12b      	b.n	5534 <i2c_master_init+0x278>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    52dc:	0005      	movs	r5, r0
    52de:	3512      	adds	r5, #18
			MCLK->APBCMASK.reg |= mask;
    52e0:	4a99      	ldr	r2, [pc, #612]	; (5548 <i2c_master_init+0x28c>)
    52e2:	69d1      	ldr	r1, [r2, #28]
	/* Turn on module in PM */
#if (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    52e4:	2301      	movs	r3, #1
    52e6:	4083      	lsls	r3, r0
    52e8:	430b      	orrs	r3, r1
    52ea:	61d3      	str	r3, [r2, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    52ec:	a909      	add	r1, sp, #36	; 0x24
    52ee:	7b23      	ldrb	r3, [r4, #12]
    52f0:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    52f2:	b2ed      	uxtb	r5, r5
    52f4:	0028      	movs	r0, r5
    52f6:	4b95      	ldr	r3, [pc, #596]	; (554c <i2c_master_init+0x290>)
    52f8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    52fa:	0028      	movs	r0, r5
    52fc:	4b94      	ldr	r3, [pc, #592]	; (5550 <i2c_master_init+0x294>)
    52fe:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5300:	7b20      	ldrb	r0, [r4, #12]
    5302:	2100      	movs	r1, #0
    5304:	4b93      	ldr	r3, [pc, #588]	; (5554 <i2c_master_init+0x298>)
    5306:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    5308:	6833      	ldr	r3, [r6, #0]
		return STATUS_ERR_DENIED;
    530a:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    530c:	079b      	lsls	r3, r3, #30
    530e:	d505      	bpl.n	531c <i2c_master_init+0x60>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    5310:	b00a      	add	sp, #40	; 0x28
    5312:	bc1c      	pop	{r2, r3, r4}
    5314:	4690      	mov	r8, r2
    5316:	4699      	mov	r9, r3
    5318:	46a2      	mov	sl, r4
    531a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    531c:	6833      	ldr	r3, [r6, #0]
		return STATUS_BUSY;
    531e:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    5320:	07db      	lsls	r3, r3, #31
    5322:	d4f5      	bmi.n	5310 <i2c_master_init+0x54>
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    5324:	2314      	movs	r3, #20
    5326:	6033      	str	r3, [r6, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5328:	683b      	ldr	r3, [r7, #0]
    532a:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    532c:	0018      	movs	r0, r3
    532e:	4b85      	ldr	r3, [pc, #532]	; (5544 <i2c_master_init+0x288>)
    5330:	4798      	blx	r3
    5332:	0005      	movs	r5, r0
    5334:	2380      	movs	r3, #128	; 0x80
    5336:	aa08      	add	r2, sp, #32
    5338:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    533a:	2300      	movs	r3, #0
    533c:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    533e:	2201      	movs	r2, #1
    5340:	a908      	add	r1, sp, #32
    5342:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
    5344:	70cb      	strb	r3, [r1, #3]
	uint32_t pad0 = config->pinmux_pad0;
    5346:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    5348:	6a26      	ldr	r6, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
    534a:	2800      	cmp	r0, #0
    534c:	d100      	bne.n	5350 <i2c_master_init+0x94>
    534e:	e0ae      	b.n	54ae <i2c_master_init+0x1f2>
	pin_conf.mux_position = pad0 & 0xFFFF;
    5350:	ab08      	add	r3, sp, #32
    5352:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    5354:	2302      	movs	r3, #2
    5356:	aa08      	add	r2, sp, #32
    5358:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    535a:	0c00      	lsrs	r0, r0, #16
    535c:	b2c0      	uxtb	r0, r0
    535e:	0011      	movs	r1, r2
    5360:	4b7d      	ldr	r3, [pc, #500]	; (5558 <i2c_master_init+0x29c>)
    5362:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    5364:	2e00      	cmp	r6, #0
    5366:	d100      	bne.n	536a <i2c_master_init+0xae>
    5368:	e0a6      	b.n	54b8 <i2c_master_init+0x1fc>
	pin_conf.mux_position = pad1 & 0xFFFF;
    536a:	ab08      	add	r3, sp, #32
    536c:	701e      	strb	r6, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    536e:	2302      	movs	r3, #2
    5370:	aa08      	add	r2, sp, #32
    5372:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    5374:	0c36      	lsrs	r6, r6, #16
    5376:	b2f0      	uxtb	r0, r6
    5378:	0011      	movs	r1, r2
    537a:	4b77      	ldr	r3, [pc, #476]	; (5558 <i2c_master_init+0x29c>)
    537c:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    537e:	8aa3      	ldrh	r3, [r4, #20]
    5380:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
    5382:	8ae3      	ldrh	r3, [r4, #22]
    5384:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    5386:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    5388:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    538a:	2b00      	cmp	r3, #0
    538c:	d104      	bne.n	5398 <i2c_master_init+0xdc>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    538e:	4b73      	ldr	r3, [pc, #460]	; (555c <i2c_master_init+0x2a0>)
    5390:	789b      	ldrb	r3, [r3, #2]
    5392:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    5394:	0fdb      	lsrs	r3, r3, #31
    5396:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    5398:	68a1      	ldr	r1, [r4, #8]
    539a:	6923      	ldr	r3, [r4, #16]
    539c:	430b      	orrs	r3, r1
    539e:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    53a0:	2224      	movs	r2, #36	; 0x24
    53a2:	5ca2      	ldrb	r2, [r4, r2]
    53a4:	2a00      	cmp	r2, #0
    53a6:	d002      	beq.n	53ae <i2c_master_init+0xf2>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    53a8:	2280      	movs	r2, #128	; 0x80
    53aa:	05d2      	lsls	r2, r2, #23
    53ac:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    53ae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    53b0:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    53b2:	222c      	movs	r2, #44	; 0x2c
    53b4:	5ca2      	ldrb	r2, [r4, r2]
    53b6:	2a00      	cmp	r2, #0
    53b8:	d103      	bne.n	53c2 <i2c_master_init+0x106>
    53ba:	2280      	movs	r2, #128	; 0x80
    53bc:	0492      	lsls	r2, r2, #18
    53be:	4291      	cmp	r1, r2
    53c0:	d102      	bne.n	53c8 <i2c_master_init+0x10c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    53c2:	2280      	movs	r2, #128	; 0x80
    53c4:	0512      	lsls	r2, r2, #20
    53c6:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    53c8:	222d      	movs	r2, #45	; 0x2d
    53ca:	5ca2      	ldrb	r2, [r4, r2]
    53cc:	2a00      	cmp	r2, #0
    53ce:	d002      	beq.n	53d6 <i2c_master_init+0x11a>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    53d0:	2280      	movs	r2, #128	; 0x80
    53d2:	0412      	lsls	r2, r2, #16
    53d4:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    53d6:	222e      	movs	r2, #46	; 0x2e
    53d8:	5ca2      	ldrb	r2, [r4, r2]
    53da:	2a00      	cmp	r2, #0
    53dc:	d002      	beq.n	53e4 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    53de:	2280      	movs	r2, #128	; 0x80
    53e0:	03d2      	lsls	r2, r2, #15
    53e2:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    53e4:	4642      	mov	r2, r8
    53e6:	6812      	ldr	r2, [r2, #0]
    53e8:	4313      	orrs	r3, r2
    53ea:	4642      	mov	r2, r8
    53ec:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    53ee:	2380      	movs	r3, #128	; 0x80
    53f0:	005b      	lsls	r3, r3, #1
    53f2:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    53f4:	3512      	adds	r5, #18
    53f6:	b2e8      	uxtb	r0, r5
    53f8:	4b59      	ldr	r3, [pc, #356]	; (5560 <i2c_master_init+0x2a4>)
    53fa:	4798      	blx	r3
    53fc:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    53fe:	23fa      	movs	r3, #250	; 0xfa
    5400:	009b      	lsls	r3, r3, #2
    5402:	6822      	ldr	r2, [r4, #0]
    5404:	435a      	muls	r2, r3
    5406:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    5408:	6863      	ldr	r3, [r4, #4]
    540a:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    540c:	4d55      	ldr	r5, [pc, #340]	; (5564 <i2c_master_init+0x2a8>)
    540e:	47a8      	blx	r5
    5410:	9000      	str	r0, [sp, #0]
    5412:	9101      	str	r1, [sp, #4]
    5414:	464b      	mov	r3, r9
    5416:	0058      	lsls	r0, r3, #1
    5418:	47a8      	blx	r5
    541a:	9002      	str	r0, [sp, #8]
    541c:	9103      	str	r1, [sp, #12]
    541e:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    5420:	47a8      	blx	r5
    5422:	9004      	str	r0, [sp, #16]
    5424:	9105      	str	r1, [sp, #20]
    5426:	4f50      	ldr	r7, [pc, #320]	; (5568 <i2c_master_init+0x2ac>)
    5428:	4a50      	ldr	r2, [pc, #320]	; (556c <i2c_master_init+0x2b0>)
    542a:	4b51      	ldr	r3, [pc, #324]	; (5570 <i2c_master_init+0x2b4>)
    542c:	9800      	ldr	r0, [sp, #0]
    542e:	9901      	ldr	r1, [sp, #4]
    5430:	47b8      	blx	r7
    5432:	0002      	movs	r2, r0
    5434:	000b      	movs	r3, r1
    5436:	9804      	ldr	r0, [sp, #16]
    5438:	9905      	ldr	r1, [sp, #20]
    543a:	47b8      	blx	r7
    543c:	4e4d      	ldr	r6, [pc, #308]	; (5574 <i2c_master_init+0x2b8>)
    543e:	2200      	movs	r2, #0
    5440:	4b4d      	ldr	r3, [pc, #308]	; (5578 <i2c_master_init+0x2bc>)
    5442:	47b0      	blx	r6
    5444:	9004      	str	r0, [sp, #16]
    5446:	9105      	str	r1, [sp, #20]
    5448:	4648      	mov	r0, r9
    544a:	47a8      	blx	r5
    544c:	0002      	movs	r2, r0
    544e:	000b      	movs	r3, r1
    5450:	9804      	ldr	r0, [sp, #16]
    5452:	9905      	ldr	r1, [sp, #20]
    5454:	47b8      	blx	r7
    5456:	0002      	movs	r2, r0
    5458:	000b      	movs	r3, r1
    545a:	4d48      	ldr	r5, [pc, #288]	; (557c <i2c_master_init+0x2c0>)
    545c:	9800      	ldr	r0, [sp, #0]
    545e:	9901      	ldr	r1, [sp, #4]
    5460:	47a8      	blx	r5
    5462:	9a02      	ldr	r2, [sp, #8]
    5464:	9b03      	ldr	r3, [sp, #12]
    5466:	47b0      	blx	r6
    5468:	2200      	movs	r2, #0
    546a:	4b45      	ldr	r3, [pc, #276]	; (5580 <i2c_master_init+0x2c4>)
    546c:	47a8      	blx	r5
    546e:	9a02      	ldr	r2, [sp, #8]
    5470:	9b03      	ldr	r3, [sp, #12]
    5472:	4d44      	ldr	r5, [pc, #272]	; (5584 <i2c_master_init+0x2c8>)
    5474:	47a8      	blx	r5
    5476:	4b44      	ldr	r3, [pc, #272]	; (5588 <i2c_master_init+0x2cc>)
    5478:	4798      	blx	r3
    547a:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    547c:	2380      	movs	r3, #128	; 0x80
    547e:	049b      	lsls	r3, r3, #18
    5480:	68a2      	ldr	r2, [r4, #8]
    5482:	429a      	cmp	r2, r3
    5484:	d01e      	beq.n	54c4 <i2c_master_init+0x208>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    5486:	0003      	movs	r3, r0
    5488:	2040      	movs	r0, #64	; 0x40
    548a:	2dff      	cmp	r5, #255	; 0xff
    548c:	d900      	bls.n	5490 <i2c_master_init+0x1d4>
    548e:	e73f      	b.n	5310 <i2c_master_init+0x54>
	int32_t tmp_baudlow_hs = 0;
    5490:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    5492:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    5494:	25ff      	movs	r5, #255	; 0xff
    5496:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    5498:	0624      	lsls	r4, r4, #24
    549a:	4325      	orrs	r5, r4
    549c:	0400      	lsls	r0, r0, #16
    549e:	23ff      	movs	r3, #255	; 0xff
    54a0:	041b      	lsls	r3, r3, #16
    54a2:	4018      	ands	r0, r3
    54a4:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    54a6:	4643      	mov	r3, r8
    54a8:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    54aa:	2000      	movs	r0, #0
    54ac:	e730      	b.n	5310 <i2c_master_init+0x54>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    54ae:	2100      	movs	r1, #0
    54b0:	4640      	mov	r0, r8
    54b2:	4b36      	ldr	r3, [pc, #216]	; (558c <i2c_master_init+0x2d0>)
    54b4:	4798      	blx	r3
    54b6:	e74b      	b.n	5350 <i2c_master_init+0x94>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    54b8:	2101      	movs	r1, #1
    54ba:	4640      	mov	r0, r8
    54bc:	4b33      	ldr	r3, [pc, #204]	; (558c <i2c_master_init+0x2d0>)
    54be:	4798      	blx	r3
    54c0:	0006      	movs	r6, r0
    54c2:	e752      	b.n	536a <i2c_master_init+0xae>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    54c4:	26fa      	movs	r6, #250	; 0xfa
    54c6:	00b6      	lsls	r6, r6, #2
    54c8:	4653      	mov	r3, sl
    54ca:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    54cc:	9800      	ldr	r0, [sp, #0]
    54ce:	9901      	ldr	r1, [sp, #4]
    54d0:	0002      	movs	r2, r0
    54d2:	000b      	movs	r3, r1
    54d4:	4c27      	ldr	r4, [pc, #156]	; (5574 <i2c_master_init+0x2b8>)
    54d6:	47a0      	blx	r4
    54d8:	9000      	str	r0, [sp, #0]
    54da:	9101      	str	r1, [sp, #4]
    54dc:	0030      	movs	r0, r6
    54de:	4b21      	ldr	r3, [pc, #132]	; (5564 <i2c_master_init+0x2a8>)
    54e0:	4798      	blx	r3
    54e2:	2200      	movs	r2, #0
    54e4:	4b2a      	ldr	r3, [pc, #168]	; (5590 <i2c_master_init+0x2d4>)
    54e6:	47b8      	blx	r7
    54e8:	0002      	movs	r2, r0
    54ea:	000b      	movs	r3, r1
    54ec:	9800      	ldr	r0, [sp, #0]
    54ee:	9901      	ldr	r1, [sp, #4]
    54f0:	4c24      	ldr	r4, [pc, #144]	; (5584 <i2c_master_init+0x2c8>)
    54f2:	47a0      	blx	r4
    54f4:	2200      	movs	r2, #0
    54f6:	4b22      	ldr	r3, [pc, #136]	; (5580 <i2c_master_init+0x2c4>)
    54f8:	4c20      	ldr	r4, [pc, #128]	; (557c <i2c_master_init+0x2c0>)
    54fa:	47a0      	blx	r4
    54fc:	4b22      	ldr	r3, [pc, #136]	; (5588 <i2c_master_init+0x2cc>)
    54fe:	4798      	blx	r3
    5500:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    5502:	d00c      	beq.n	551e <i2c_master_init+0x262>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    5504:	0031      	movs	r1, r6
    5506:	9807      	ldr	r0, [sp, #28]
    5508:	4b22      	ldr	r3, [pc, #136]	; (5594 <i2c_master_init+0x2d8>)
    550a:	4798      	blx	r3
    550c:	3802      	subs	r0, #2
    550e:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    5510:	002b      	movs	r3, r5
    5512:	2dff      	cmp	r5, #255	; 0xff
    5514:	d80c      	bhi.n	5530 <i2c_master_init+0x274>
    5516:	28ff      	cmp	r0, #255	; 0xff
    5518:	d9bc      	bls.n	5494 <i2c_master_init+0x1d8>
    551a:	2040      	movs	r0, #64	; 0x40
    551c:	e6f8      	b.n	5310 <i2c_master_init+0x54>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    551e:	0071      	lsls	r1, r6, #1
    5520:	1e48      	subs	r0, r1, #1
    5522:	9b07      	ldr	r3, [sp, #28]
    5524:	469c      	mov	ip, r3
    5526:	4460      	add	r0, ip
    5528:	4b1a      	ldr	r3, [pc, #104]	; (5594 <i2c_master_init+0x2d8>)
    552a:	4798      	blx	r3
    552c:	3801      	subs	r0, #1
    552e:	e7ef      	b.n	5510 <i2c_master_init+0x254>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    5530:	2040      	movs	r0, #64	; 0x40
    5532:	e6ed      	b.n	5310 <i2c_master_init+0x54>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    5534:	4a04      	ldr	r2, [pc, #16]	; (5548 <i2c_master_init+0x28c>)
    5536:	6a13      	ldr	r3, [r2, #32]
    5538:	2102      	movs	r1, #2
    553a:	430b      	orrs	r3, r1
    553c:	6213      	str	r3, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    553e:	2518      	movs	r5, #24
    5540:	e6d4      	b.n	52ec <i2c_master_init+0x30>
    5542:	46c0      	nop			; (mov r8, r8)
    5544:	00005c1d 	.word	0x00005c1d
    5548:	40000400 	.word	0x40000400
    554c:	00007091 	.word	0x00007091
    5550:	00007021 	.word	0x00007021
    5554:	00005a75 	.word	0x00005a75
    5558:	0000718d 	.word	0x0000718d
    555c:	41002000 	.word	0x41002000
    5560:	000070b5 	.word	0x000070b5
    5564:	000166d1 	.word	0x000166d1
    5568:	00015ab9 	.word	0x00015ab9
    556c:	e826d695 	.word	0xe826d695
    5570:	3e112e0b 	.word	0x3e112e0b
    5574:	00014c31 	.word	0x00014c31
    5578:	40240000 	.word	0x40240000
    557c:	00015fb9 	.word	0x00015fb9
    5580:	3ff00000 	.word	0x3ff00000
    5584:	00015251 	.word	0x00015251
    5588:	000165e5 	.word	0x000165e5
    558c:	00005ac1 	.word	0x00005ac1
    5590:	40080000 	.word	0x40080000
    5594:	000137ad 	.word	0x000137ad

00005598 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
    5598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    559a:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    559c:	6807      	ldr	r7, [r0, #0]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    559e:	4e08      	ldr	r6, [pc, #32]	; (55c0 <i2c_master_reset+0x28>)
    55a0:	47b0      	blx	r6
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    55a2:	6825      	ldr	r5, [r4, #0]
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    55a4:	0020      	movs	r0, r4
    55a6:	47b0      	blx	r6

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    55a8:	2383      	movs	r3, #131	; 0x83
    55aa:	752b      	strb	r3, [r5, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    55ac:	762b      	strb	r3, [r5, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    55ae:	682b      	ldr	r3, [r5, #0]
    55b0:	2202      	movs	r2, #2
    55b2:	4393      	bics	r3, r2
    55b4:	602b      	str	r3, [r5, #0]
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
	system_interrupt_leave_critical_section();
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    55b6:	0020      	movs	r0, r4
    55b8:	47b0      	blx	r6

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
    55ba:	2301      	movs	r3, #1
    55bc:	603b      	str	r3, [r7, #0]
}
    55be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    55c0:	000052b1 	.word	0x000052b1

000055c4 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    55c4:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    55c6:	7e1a      	ldrb	r2, [r3, #24]
    55c8:	0792      	lsls	r2, r2, #30
    55ca:	d507      	bpl.n	55dc <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    55cc:	2202      	movs	r2, #2
    55ce:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    55d0:	8b5b      	ldrh	r3, [r3, #26]
    55d2:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    55d4:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    55d6:	17db      	asrs	r3, r3, #31
    55d8:	4018      	ands	r0, r3
}
    55da:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    55dc:	8b5a      	ldrh	r2, [r3, #26]
    55de:	0752      	lsls	r2, r2, #29
    55e0:	d506      	bpl.n	55f0 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    55e2:	6859      	ldr	r1, [r3, #4]
    55e4:	22c0      	movs	r2, #192	; 0xc0
    55e6:	0292      	lsls	r2, r2, #10
    55e8:	430a      	orrs	r2, r1
    55ea:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    55ec:	2018      	movs	r0, #24
    55ee:	e7f4      	b.n	55da <_i2c_master_address_response+0x16>
	return STATUS_OK;
    55f0:	2000      	movs	r0, #0
    55f2:	e7f2      	b.n	55da <_i2c_master_address_response+0x16>

000055f4 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    55f4:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    55f6:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    55f8:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    55fa:	2401      	movs	r4, #1
    55fc:	2502      	movs	r5, #2
    55fe:	7e11      	ldrb	r1, [r2, #24]
    5600:	4221      	tst	r1, r4
    5602:	d10b      	bne.n	561c <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    5604:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    5606:	4229      	tst	r1, r5
    5608:	d106      	bne.n	5618 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    560a:	3301      	adds	r3, #1
    560c:	b29b      	uxth	r3, r3
    560e:	8901      	ldrh	r1, [r0, #8]
    5610:	4299      	cmp	r1, r3
    5612:	d8f4      	bhi.n	55fe <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    5614:	2012      	movs	r0, #18
    5616:	e002      	b.n	561e <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    5618:	2000      	movs	r0, #0
    561a:	e000      	b.n	561e <_i2c_master_wait_for_bus+0x2a>
    561c:	2000      	movs	r0, #0
}
    561e:	bd30      	pop	{r4, r5, pc}

00005620 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    5620:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5622:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5624:	6862      	ldr	r2, [r4, #4]
    5626:	2380      	movs	r3, #128	; 0x80
    5628:	02db      	lsls	r3, r3, #11
    562a:	4313      	orrs	r3, r2
    562c:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    562e:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    5630:	4b02      	ldr	r3, [pc, #8]	; (563c <_i2c_master_send_hs_master_code+0x1c>)
    5632:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    5634:	2301      	movs	r3, #1
    5636:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    5638:	bd10      	pop	{r4, pc}
    563a:	46c0      	nop			; (mov r8, r8)
    563c:	000055f5 	.word	0x000055f5

00005640 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    5640:	b5f0      	push	{r4, r5, r6, r7, lr}
    5642:	46de      	mov	lr, fp
    5644:	4657      	mov	r7, sl
    5646:	464e      	mov	r6, r9
    5648:	4645      	mov	r5, r8
    564a:	b5e0      	push	{r5, r6, r7, lr}
    564c:	b083      	sub	sp, #12
    564e:	0006      	movs	r6, r0
    5650:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5652:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    5654:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    5656:	682b      	ldr	r3, [r5, #0]
    5658:	011b      	lsls	r3, r3, #4
    565a:	0fdb      	lsrs	r3, r3, #31
    565c:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    565e:	7a4b      	ldrb	r3, [r1, #9]
    5660:	2b00      	cmp	r3, #0
    5662:	d12b      	bne.n	56bc <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5664:	686b      	ldr	r3, [r5, #4]
    5666:	4a58      	ldr	r2, [pc, #352]	; (57c8 <_i2c_master_read_packet+0x188>)
    5668:	4013      	ands	r3, r2
    566a:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    566c:	464b      	mov	r3, r9
    566e:	7a1b      	ldrb	r3, [r3, #8]
    5670:	2b00      	cmp	r3, #0
    5672:	d127      	bne.n	56c4 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    5674:	464b      	mov	r3, r9
    5676:	881b      	ldrh	r3, [r3, #0]
    5678:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    567a:	464a      	mov	r2, r9
    567c:	7a52      	ldrb	r2, [r2, #9]
    567e:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    5680:	4313      	orrs	r3, r2
    5682:	2201      	movs	r2, #1
    5684:	4313      	orrs	r3, r2
    5686:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    5688:	0030      	movs	r0, r6
    568a:	4b50      	ldr	r3, [pc, #320]	; (57cc <_i2c_master_read_packet+0x18c>)
    568c:	4798      	blx	r3
    568e:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    5690:	4653      	mov	r3, sl
    5692:	2b00      	cmp	r3, #0
    5694:	d003      	beq.n	569e <_i2c_master_read_packet+0x5e>
    5696:	464b      	mov	r3, r9
    5698:	885b      	ldrh	r3, [r3, #2]
    569a:	2b01      	cmp	r3, #1
    569c:	d03b      	beq.n	5716 <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    569e:	686b      	ldr	r3, [r5, #4]
    56a0:	4a49      	ldr	r2, [pc, #292]	; (57c8 <_i2c_master_read_packet+0x188>)
    56a2:	4013      	ands	r3, r2
    56a4:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    56a6:	9b01      	ldr	r3, [sp, #4]
    56a8:	2b00      	cmp	r3, #0
    56aa:	d03a      	beq.n	5722 <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
    56ac:	9801      	ldr	r0, [sp, #4]
    56ae:	b003      	add	sp, #12
    56b0:	bc3c      	pop	{r2, r3, r4, r5}
    56b2:	4690      	mov	r8, r2
    56b4:	4699      	mov	r9, r3
    56b6:	46a2      	mov	sl, r4
    56b8:	46ab      	mov	fp, r5
    56ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    56bc:	7a89      	ldrb	r1, [r1, #10]
    56be:	4b44      	ldr	r3, [pc, #272]	; (57d0 <_i2c_master_read_packet+0x190>)
    56c0:	4798      	blx	r3
    56c2:	e7cf      	b.n	5664 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
    56c4:	464b      	mov	r3, r9
    56c6:	881b      	ldrh	r3, [r3, #0]
    56c8:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    56ca:	464a      	mov	r2, r9
    56cc:	7a52      	ldrb	r2, [r2, #9]
    56ce:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    56d0:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    56d2:	2280      	movs	r2, #128	; 0x80
    56d4:	0212      	lsls	r2, r2, #8
    56d6:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    56d8:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
    56da:	0030      	movs	r0, r6
    56dc:	4b3b      	ldr	r3, [pc, #236]	; (57cc <_i2c_master_read_packet+0x18c>)
    56de:	4798      	blx	r3
    56e0:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    56e2:	686b      	ldr	r3, [r5, #4]
    56e4:	4a38      	ldr	r2, [pc, #224]	; (57c8 <_i2c_master_read_packet+0x188>)
    56e6:	4013      	ands	r3, r2
    56e8:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
    56ea:	2800      	cmp	r0, #0
    56ec:	d1de      	bne.n	56ac <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
    56ee:	0030      	movs	r0, r6
    56f0:	4b38      	ldr	r3, [pc, #224]	; (57d4 <_i2c_master_read_packet+0x194>)
    56f2:	4798      	blx	r3
    56f4:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
    56f6:	2800      	cmp	r0, #0
    56f8:	d1d8      	bne.n	56ac <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    56fa:	464b      	mov	r3, r9
    56fc:	881b      	ldrh	r3, [r3, #0]
    56fe:	0a1b      	lsrs	r3, r3, #8
    5700:	2278      	movs	r2, #120	; 0x78
    5702:	4313      	orrs	r3, r2
    5704:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    5706:	464a      	mov	r2, r9
    5708:	7a52      	ldrb	r2, [r2, #9]
    570a:	0392      	lsls	r2, r2, #14
    570c:	2101      	movs	r1, #1
    570e:	430a      	orrs	r2, r1
    5710:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    5712:	626b      	str	r3, [r5, #36]	; 0x24
    5714:	e7b8      	b.n	5688 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5716:	686a      	ldr	r2, [r5, #4]
    5718:	2380      	movs	r3, #128	; 0x80
    571a:	02db      	lsls	r3, r3, #11
    571c:	4313      	orrs	r3, r2
    571e:	606b      	str	r3, [r5, #4]
    5720:	e7c1      	b.n	56a6 <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
    5722:	0030      	movs	r0, r6
    5724:	4b2b      	ldr	r3, [pc, #172]	; (57d4 <_i2c_master_read_packet+0x194>)
    5726:	4798      	blx	r3
    5728:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    572a:	2800      	cmp	r0, #0
    572c:	d1be      	bne.n	56ac <_i2c_master_read_packet+0x6c>
    572e:	3c01      	subs	r4, #1
    5730:	b2a4      	uxth	r4, r4
    5732:	4680      	mov	r8, r0
		while (tmp_data_length--) {
    5734:	4b28      	ldr	r3, [pc, #160]	; (57d8 <_i2c_master_read_packet+0x198>)
    5736:	469b      	mov	fp, r3
    5738:	e015      	b.n	5766 <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    573a:	2c01      	cmp	r4, #1
    573c:	d020      	beq.n	5780 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
    573e:	0030      	movs	r0, r6
    5740:	4b26      	ldr	r3, [pc, #152]	; (57dc <_i2c_master_read_packet+0x19c>)
    5742:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    5744:	4643      	mov	r3, r8
    5746:	1c5f      	adds	r7, r3, #1
    5748:	b2bf      	uxth	r7, r7
    574a:	2328      	movs	r3, #40	; 0x28
    574c:	5ceb      	ldrb	r3, [r5, r3]
    574e:	464a      	mov	r2, r9
    5750:	6852      	ldr	r2, [r2, #4]
    5752:	4641      	mov	r1, r8
    5754:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
    5756:	0030      	movs	r0, r6
    5758:	4b1c      	ldr	r3, [pc, #112]	; (57cc <_i2c_master_read_packet+0x18c>)
    575a:	4798      	blx	r3
    575c:	3c01      	subs	r4, #1
    575e:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
    5760:	2800      	cmp	r0, #0
    5762:	d115      	bne.n	5790 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
    5764:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
    5766:	455c      	cmp	r4, fp
    5768:	d014      	beq.n	5794 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    576a:	8b6b      	ldrh	r3, [r5, #26]
    576c:	069b      	lsls	r3, r3, #26
    576e:	d527      	bpl.n	57c0 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    5770:	7af3      	ldrb	r3, [r6, #11]
    5772:	2b00      	cmp	r3, #0
    5774:	d0e3      	beq.n	573e <_i2c_master_read_packet+0xfe>
    5776:	4653      	mov	r3, sl
    5778:	2b00      	cmp	r3, #0
    577a:	d1de      	bne.n	573a <_i2c_master_read_packet+0xfa>
    577c:	2c00      	cmp	r4, #0
    577e:	d1de      	bne.n	573e <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5780:	686a      	ldr	r2, [r5, #4]
    5782:	2380      	movs	r3, #128	; 0x80
    5784:	02db      	lsls	r3, r3, #11
    5786:	4313      	orrs	r3, r2
    5788:	606b      	str	r3, [r5, #4]
    578a:	3c01      	subs	r4, #1
    578c:	b2a4      	uxth	r4, r4
    578e:	e7ea      	b.n	5766 <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
    5790:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
    5792:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    5794:	7ab3      	ldrb	r3, [r6, #10]
    5796:	2b00      	cmp	r3, #0
    5798:	d109      	bne.n	57ae <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
    579a:	0030      	movs	r0, r6
    579c:	4b0f      	ldr	r3, [pc, #60]	; (57dc <_i2c_master_read_packet+0x19c>)
    579e:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    57a0:	2328      	movs	r3, #40	; 0x28
    57a2:	5cea      	ldrb	r2, [r5, r3]
    57a4:	464b      	mov	r3, r9
    57a6:	685b      	ldr	r3, [r3, #4]
    57a8:	4641      	mov	r1, r8
    57aa:	545a      	strb	r2, [r3, r1]
    57ac:	e77e      	b.n	56ac <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
    57ae:	0030      	movs	r0, r6
    57b0:	4b0a      	ldr	r3, [pc, #40]	; (57dc <_i2c_master_read_packet+0x19c>)
    57b2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    57b4:	686a      	ldr	r2, [r5, #4]
    57b6:	23c0      	movs	r3, #192	; 0xc0
    57b8:	029b      	lsls	r3, r3, #10
    57ba:	4313      	orrs	r3, r2
    57bc:	606b      	str	r3, [r5, #4]
    57be:	e7ec      	b.n	579a <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
    57c0:	2341      	movs	r3, #65	; 0x41
    57c2:	9301      	str	r3, [sp, #4]
    57c4:	e772      	b.n	56ac <_i2c_master_read_packet+0x6c>
    57c6:	46c0      	nop			; (mov r8, r8)
    57c8:	fffbffff 	.word	0xfffbffff
    57cc:	000055f5 	.word	0x000055f5
    57d0:	00005621 	.word	0x00005621
    57d4:	000055c5 	.word	0x000055c5
    57d8:	0000ffff 	.word	0x0000ffff
    57dc:	000052b1 	.word	0x000052b1

000057e0 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    57e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    57e2:	46de      	mov	lr, fp
    57e4:	4657      	mov	r7, sl
    57e6:	464e      	mov	r6, r9
    57e8:	4645      	mov	r5, r8
    57ea:	b5e0      	push	{r5, r6, r7, lr}
    57ec:	b083      	sub	sp, #12
    57ee:	0006      	movs	r6, r0
    57f0:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    57f2:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    57f4:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    57f6:	4b32      	ldr	r3, [pc, #200]	; (58c0 <_i2c_master_write_packet+0xe0>)
    57f8:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    57fa:	7a7b      	ldrb	r3, [r7, #9]
    57fc:	2b00      	cmp	r3, #0
    57fe:	d11d      	bne.n	583c <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5800:	686b      	ldr	r3, [r5, #4]
    5802:	4a30      	ldr	r2, [pc, #192]	; (58c4 <_i2c_master_write_packet+0xe4>)
    5804:	4013      	ands	r3, r2
    5806:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    5808:	7a3b      	ldrb	r3, [r7, #8]
    580a:	2b00      	cmp	r3, #0
    580c:	d01b      	beq.n	5846 <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    580e:	883b      	ldrh	r3, [r7, #0]
    5810:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    5812:	7a7a      	ldrb	r2, [r7, #9]
    5814:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    5816:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    5818:	2280      	movs	r2, #128	; 0x80
    581a:	0212      	lsls	r2, r2, #8
    581c:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    581e:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    5820:	0030      	movs	r0, r6
    5822:	4b29      	ldr	r3, [pc, #164]	; (58c8 <_i2c_master_write_packet+0xe8>)
    5824:	4798      	blx	r3
    5826:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    5828:	2800      	cmp	r0, #0
    582a:	d013      	beq.n	5854 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    582c:	9801      	ldr	r0, [sp, #4]
    582e:	b003      	add	sp, #12
    5830:	bc3c      	pop	{r2, r3, r4, r5}
    5832:	4690      	mov	r8, r2
    5834:	4699      	mov	r9, r3
    5836:	46a2      	mov	sl, r4
    5838:	46ab      	mov	fp, r5
    583a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    583c:	7ab9      	ldrb	r1, [r7, #10]
    583e:	0030      	movs	r0, r6
    5840:	4b22      	ldr	r3, [pc, #136]	; (58cc <_i2c_master_write_packet+0xec>)
    5842:	4798      	blx	r3
    5844:	e7dc      	b.n	5800 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    5846:	883b      	ldrh	r3, [r7, #0]
    5848:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    584a:	7a7a      	ldrb	r2, [r7, #9]
    584c:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    584e:	4313      	orrs	r3, r2
    5850:	626b      	str	r3, [r5, #36]	; 0x24
    5852:	e7e5      	b.n	5820 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
    5854:	0030      	movs	r0, r6
    5856:	4b1e      	ldr	r3, [pc, #120]	; (58d0 <_i2c_master_write_packet+0xf0>)
    5858:	4798      	blx	r3
    585a:	1e03      	subs	r3, r0, #0
    585c:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    585e:	d1e5      	bne.n	582c <_i2c_master_write_packet+0x4c>
    5860:	46a0      	mov	r8, r4
    5862:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    5864:	3320      	adds	r3, #32
    5866:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
    5868:	4b15      	ldr	r3, [pc, #84]	; (58c0 <_i2c_master_write_packet+0xe0>)
    586a:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
    586c:	4b16      	ldr	r3, [pc, #88]	; (58c8 <_i2c_master_write_packet+0xe8>)
    586e:	469a      	mov	sl, r3
		while (tmp_data_length--) {
    5870:	4544      	cmp	r4, r8
    5872:	d015      	beq.n	58a0 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    5874:	8b6b      	ldrh	r3, [r5, #26]
    5876:	464a      	mov	r2, r9
    5878:	4213      	tst	r3, r2
    587a:	d01d      	beq.n	58b8 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
    587c:	0030      	movs	r0, r6
    587e:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    5880:	687b      	ldr	r3, [r7, #4]
    5882:	5d1a      	ldrb	r2, [r3, r4]
    5884:	2328      	movs	r3, #40	; 0x28
    5886:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
    5888:	0030      	movs	r0, r6
    588a:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
    588c:	2800      	cmp	r0, #0
    588e:	d106      	bne.n	589e <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    5890:	8b6b      	ldrh	r3, [r5, #26]
    5892:	3401      	adds	r4, #1
    5894:	075b      	lsls	r3, r3, #29
    5896:	d5eb      	bpl.n	5870 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
    5898:	231e      	movs	r3, #30
    589a:	9301      	str	r3, [sp, #4]
    589c:	e000      	b.n	58a0 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
    589e:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    58a0:	7ab3      	ldrb	r3, [r6, #10]
    58a2:	2b00      	cmp	r3, #0
    58a4:	d0c2      	beq.n	582c <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
    58a6:	0030      	movs	r0, r6
    58a8:	4b05      	ldr	r3, [pc, #20]	; (58c0 <_i2c_master_write_packet+0xe0>)
    58aa:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    58ac:	686a      	ldr	r2, [r5, #4]
    58ae:	23c0      	movs	r3, #192	; 0xc0
    58b0:	029b      	lsls	r3, r3, #10
    58b2:	4313      	orrs	r3, r2
    58b4:	606b      	str	r3, [r5, #4]
    58b6:	e7b9      	b.n	582c <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
    58b8:	2341      	movs	r3, #65	; 0x41
    58ba:	9301      	str	r3, [sp, #4]
    58bc:	e7b6      	b.n	582c <_i2c_master_write_packet+0x4c>
    58be:	46c0      	nop			; (mov r8, r8)
    58c0:	000052b1 	.word	0x000052b1
    58c4:	fffbffff 	.word	0xfffbffff
    58c8:	000055f5 	.word	0x000055f5
    58cc:	00005621 	.word	0x00005621
    58d0:	000055c5 	.word	0x000055c5

000058d4 <i2c_master_read_packet_wait>:
{
    58d4:	b510      	push	{r4, lr}
	module->send_stop = true;
    58d6:	2301      	movs	r3, #1
    58d8:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    58da:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    58dc:	4b01      	ldr	r3, [pc, #4]	; (58e4 <i2c_master_read_packet_wait+0x10>)
    58de:	4798      	blx	r3
}
    58e0:	bd10      	pop	{r4, pc}
    58e2:	46c0      	nop			; (mov r8, r8)
    58e4:	00005641 	.word	0x00005641

000058e8 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    58e8:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = false;
    58ea:	2300      	movs	r3, #0
    58ec:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    58ee:	3301      	adds	r3, #1
    58f0:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
    58f2:	4b01      	ldr	r3, [pc, #4]	; (58f8 <i2c_master_write_packet_wait_no_stop+0x10>)
    58f4:	4798      	blx	r3
}
    58f6:	bd10      	pop	{r4, pc}
    58f8:	000057e1 	.word	0x000057e1

000058fc <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    58fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    58fe:	46de      	mov	lr, fp
    5900:	4657      	mov	r7, sl
    5902:	464e      	mov	r6, r9
    5904:	4645      	mov	r5, r8
    5906:	b5e0      	push	{r5, r6, r7, lr}
    5908:	b087      	sub	sp, #28
    590a:	4680      	mov	r8, r0
    590c:	9104      	str	r1, [sp, #16]
    590e:	0016      	movs	r6, r2
    5910:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    5912:	2200      	movs	r2, #0
    5914:	2300      	movs	r3, #0
    5916:	2100      	movs	r1, #0
    5918:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    591a:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    591c:	2001      	movs	r0, #1
    591e:	0021      	movs	r1, r4
    5920:	9600      	str	r6, [sp, #0]
    5922:	9701      	str	r7, [sp, #4]
    5924:	465c      	mov	r4, fp
    5926:	9403      	str	r4, [sp, #12]
    5928:	4644      	mov	r4, r8
    592a:	9405      	str	r4, [sp, #20]
    592c:	e013      	b.n	5956 <long_division+0x5a>
    592e:	2420      	movs	r4, #32
    5930:	1a64      	subs	r4, r4, r1
    5932:	0005      	movs	r5, r0
    5934:	40e5      	lsrs	r5, r4
    5936:	46a8      	mov	r8, r5
    5938:	e014      	b.n	5964 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    593a:	9c00      	ldr	r4, [sp, #0]
    593c:	9d01      	ldr	r5, [sp, #4]
    593e:	1b12      	subs	r2, r2, r4
    5940:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    5942:	465c      	mov	r4, fp
    5944:	464d      	mov	r5, r9
    5946:	432c      	orrs	r4, r5
    5948:	46a3      	mov	fp, r4
    594a:	9c03      	ldr	r4, [sp, #12]
    594c:	4645      	mov	r5, r8
    594e:	432c      	orrs	r4, r5
    5950:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    5952:	3901      	subs	r1, #1
    5954:	d325      	bcc.n	59a2 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    5956:	2420      	movs	r4, #32
    5958:	4264      	negs	r4, r4
    595a:	190c      	adds	r4, r1, r4
    595c:	d4e7      	bmi.n	592e <long_division+0x32>
    595e:	0005      	movs	r5, r0
    5960:	40a5      	lsls	r5, r4
    5962:	46a8      	mov	r8, r5
    5964:	0004      	movs	r4, r0
    5966:	408c      	lsls	r4, r1
    5968:	46a1      	mov	r9, r4
		r = r << 1;
    596a:	1892      	adds	r2, r2, r2
    596c:	415b      	adcs	r3, r3
    596e:	0014      	movs	r4, r2
    5970:	001d      	movs	r5, r3
		if (n & bit_shift) {
    5972:	9e05      	ldr	r6, [sp, #20]
    5974:	464f      	mov	r7, r9
    5976:	403e      	ands	r6, r7
    5978:	46b4      	mov	ip, r6
    597a:	9e04      	ldr	r6, [sp, #16]
    597c:	4647      	mov	r7, r8
    597e:	403e      	ands	r6, r7
    5980:	46b2      	mov	sl, r6
    5982:	4666      	mov	r6, ip
    5984:	4657      	mov	r7, sl
    5986:	433e      	orrs	r6, r7
    5988:	d003      	beq.n	5992 <long_division+0x96>
			r |= 0x01;
    598a:	0006      	movs	r6, r0
    598c:	4326      	orrs	r6, r4
    598e:	0032      	movs	r2, r6
    5990:	002b      	movs	r3, r5
		if (r >= d) {
    5992:	9c00      	ldr	r4, [sp, #0]
    5994:	9d01      	ldr	r5, [sp, #4]
    5996:	429d      	cmp	r5, r3
    5998:	d8db      	bhi.n	5952 <long_division+0x56>
    599a:	d1ce      	bne.n	593a <long_division+0x3e>
    599c:	4294      	cmp	r4, r2
    599e:	d8d8      	bhi.n	5952 <long_division+0x56>
    59a0:	e7cb      	b.n	593a <long_division+0x3e>
    59a2:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    59a4:	4658      	mov	r0, fp
    59a6:	0019      	movs	r1, r3
    59a8:	b007      	add	sp, #28
    59aa:	bc3c      	pop	{r2, r3, r4, r5}
    59ac:	4690      	mov	r8, r2
    59ae:	4699      	mov	r9, r3
    59b0:	46a2      	mov	sl, r4
    59b2:	46ab      	mov	fp, r5
    59b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000059b6 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    59b6:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    59b8:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    59ba:	2340      	movs	r3, #64	; 0x40
    59bc:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    59be:	4281      	cmp	r1, r0
    59c0:	d202      	bcs.n	59c8 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    59c2:	0018      	movs	r0, r3
    59c4:	bd10      	pop	{r4, pc}
		baud_calculated++;
    59c6:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    59c8:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    59ca:	1c63      	adds	r3, r4, #1
    59cc:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    59ce:	4288      	cmp	r0, r1
    59d0:	d9f9      	bls.n	59c6 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    59d2:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    59d4:	2cff      	cmp	r4, #255	; 0xff
    59d6:	d8f4      	bhi.n	59c2 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    59d8:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    59da:	2300      	movs	r3, #0
    59dc:	e7f1      	b.n	59c2 <_sercom_get_sync_baud_val+0xc>
    59de:	Address 0x000059de is out of bounds.


000059e0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    59e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    59e2:	b083      	sub	sp, #12
    59e4:	000f      	movs	r7, r1
    59e6:	0016      	movs	r6, r2
    59e8:	aa08      	add	r2, sp, #32
    59ea:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    59ec:	0004      	movs	r4, r0
    59ee:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    59f0:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    59f2:	42bc      	cmp	r4, r7
    59f4:	d902      	bls.n	59fc <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    59f6:	0010      	movs	r0, r2
    59f8:	b003      	add	sp, #12
    59fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    59fc:	2b00      	cmp	r3, #0
    59fe:	d114      	bne.n	5a2a <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    5a00:	0002      	movs	r2, r0
    5a02:	0008      	movs	r0, r1
    5a04:	2100      	movs	r1, #0
    5a06:	4c19      	ldr	r4, [pc, #100]	; (5a6c <_sercom_get_async_baud_val+0x8c>)
    5a08:	47a0      	blx	r4
    5a0a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    5a0c:	003a      	movs	r2, r7
    5a0e:	2300      	movs	r3, #0
    5a10:	2000      	movs	r0, #0
    5a12:	4c17      	ldr	r4, [pc, #92]	; (5a70 <_sercom_get_async_baud_val+0x90>)
    5a14:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    5a16:	2200      	movs	r2, #0
    5a18:	2301      	movs	r3, #1
    5a1a:	1a12      	subs	r2, r2, r0
    5a1c:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    5a1e:	0c12      	lsrs	r2, r2, #16
    5a20:	041b      	lsls	r3, r3, #16
    5a22:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    5a24:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    5a26:	2200      	movs	r2, #0
    5a28:	e7e5      	b.n	59f6 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    5a2a:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    5a2c:	2b01      	cmp	r3, #1
    5a2e:	d1f9      	bne.n	5a24 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    5a30:	000a      	movs	r2, r1
    5a32:	2300      	movs	r3, #0
    5a34:	2100      	movs	r1, #0
    5a36:	4c0d      	ldr	r4, [pc, #52]	; (5a6c <_sercom_get_async_baud_val+0x8c>)
    5a38:	47a0      	blx	r4
    5a3a:	0002      	movs	r2, r0
    5a3c:	000b      	movs	r3, r1
    5a3e:	9200      	str	r2, [sp, #0]
    5a40:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    5a42:	0038      	movs	r0, r7
    5a44:	2100      	movs	r1, #0
    5a46:	4c0a      	ldr	r4, [pc, #40]	; (5a70 <_sercom_get_async_baud_val+0x90>)
    5a48:	47a0      	blx	r4
    5a4a:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    5a4c:	2380      	movs	r3, #128	; 0x80
    5a4e:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5a50:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    5a52:	4298      	cmp	r0, r3
    5a54:	d8cf      	bhi.n	59f6 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    5a56:	0f79      	lsrs	r1, r7, #29
    5a58:	00f8      	lsls	r0, r7, #3
    5a5a:	9a00      	ldr	r2, [sp, #0]
    5a5c:	9b01      	ldr	r3, [sp, #4]
    5a5e:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    5a60:	00ea      	lsls	r2, r5, #3
    5a62:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    5a64:	b2d2      	uxtb	r2, r2
    5a66:	0352      	lsls	r2, r2, #13
    5a68:	432a      	orrs	r2, r5
    5a6a:	e7db      	b.n	5a24 <_sercom_get_async_baud_val+0x44>
    5a6c:	00013bc9 	.word	0x00013bc9
    5a70:	000058fd 	.word	0x000058fd

00005a74 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    5a74:	b510      	push	{r4, lr}
    5a76:	b082      	sub	sp, #8
    5a78:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    5a7a:	4b0e      	ldr	r3, [pc, #56]	; (5ab4 <sercom_set_gclk_generator+0x40>)
    5a7c:	781b      	ldrb	r3, [r3, #0]
    5a7e:	2b00      	cmp	r3, #0
    5a80:	d007      	beq.n	5a92 <sercom_set_gclk_generator+0x1e>
    5a82:	2900      	cmp	r1, #0
    5a84:	d105      	bne.n	5a92 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    5a86:	4b0b      	ldr	r3, [pc, #44]	; (5ab4 <sercom_set_gclk_generator+0x40>)
    5a88:	785b      	ldrb	r3, [r3, #1]
    5a8a:	4283      	cmp	r3, r0
    5a8c:	d010      	beq.n	5ab0 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    5a8e:	201d      	movs	r0, #29
    5a90:	e00c      	b.n	5aac <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    5a92:	a901      	add	r1, sp, #4
    5a94:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    5a96:	2011      	movs	r0, #17
    5a98:	4b07      	ldr	r3, [pc, #28]	; (5ab8 <sercom_set_gclk_generator+0x44>)
    5a9a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    5a9c:	2011      	movs	r0, #17
    5a9e:	4b07      	ldr	r3, [pc, #28]	; (5abc <sercom_set_gclk_generator+0x48>)
    5aa0:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    5aa2:	4b04      	ldr	r3, [pc, #16]	; (5ab4 <sercom_set_gclk_generator+0x40>)
    5aa4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    5aa6:	2201      	movs	r2, #1
    5aa8:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    5aaa:	2000      	movs	r0, #0
}
    5aac:	b002      	add	sp, #8
    5aae:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    5ab0:	2000      	movs	r0, #0
    5ab2:	e7fb      	b.n	5aac <sercom_set_gclk_generator+0x38>
    5ab4:	200002c8 	.word	0x200002c8
    5ab8:	00007091 	.word	0x00007091
    5abc:	00007021 	.word	0x00007021

00005ac0 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    5ac0:	4b3c      	ldr	r3, [pc, #240]	; (5bb4 <_sercom_get_default_pad+0xf4>)
    5ac2:	4298      	cmp	r0, r3
    5ac4:	d032      	beq.n	5b2c <_sercom_get_default_pad+0x6c>
    5ac6:	d90a      	bls.n	5ade <_sercom_get_default_pad+0x1e>
    5ac8:	4b3b      	ldr	r3, [pc, #236]	; (5bb8 <_sercom_get_default_pad+0xf8>)
    5aca:	4298      	cmp	r0, r3
    5acc:	d04e      	beq.n	5b6c <_sercom_get_default_pad+0xac>
    5ace:	4b3b      	ldr	r3, [pc, #236]	; (5bbc <_sercom_get_default_pad+0xfc>)
    5ad0:	4298      	cmp	r0, r3
    5ad2:	d055      	beq.n	5b80 <_sercom_get_default_pad+0xc0>
    5ad4:	4b3a      	ldr	r3, [pc, #232]	; (5bc0 <_sercom_get_default_pad+0x100>)
    5ad6:	4298      	cmp	r0, r3
    5ad8:	d038      	beq.n	5b4c <_sercom_get_default_pad+0x8c>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    5ada:	2000      	movs	r0, #0
}
    5adc:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    5ade:	2384      	movs	r3, #132	; 0x84
    5ae0:	05db      	lsls	r3, r3, #23
    5ae2:	4298      	cmp	r0, r3
    5ae4:	d00c      	beq.n	5b00 <_sercom_get_default_pad+0x40>
    5ae6:	4b37      	ldr	r3, [pc, #220]	; (5bc4 <_sercom_get_default_pad+0x104>)
    5ae8:	4298      	cmp	r0, r3
    5aea:	d1f6      	bne.n	5ada <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5aec:	2901      	cmp	r1, #1
    5aee:	d017      	beq.n	5b20 <_sercom_get_default_pad+0x60>
    5af0:	2900      	cmp	r1, #0
    5af2:	d057      	beq.n	5ba4 <_sercom_get_default_pad+0xe4>
    5af4:	2902      	cmp	r1, #2
    5af6:	d015      	beq.n	5b24 <_sercom_get_default_pad+0x64>
    5af8:	2903      	cmp	r1, #3
    5afa:	d015      	beq.n	5b28 <_sercom_get_default_pad+0x68>
	return 0;
    5afc:	2000      	movs	r0, #0
    5afe:	e7ed      	b.n	5adc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5b00:	2901      	cmp	r1, #1
    5b02:	d007      	beq.n	5b14 <_sercom_get_default_pad+0x54>
    5b04:	2900      	cmp	r1, #0
    5b06:	d04b      	beq.n	5ba0 <_sercom_get_default_pad+0xe0>
    5b08:	2902      	cmp	r1, #2
    5b0a:	d005      	beq.n	5b18 <_sercom_get_default_pad+0x58>
    5b0c:	2903      	cmp	r1, #3
    5b0e:	d005      	beq.n	5b1c <_sercom_get_default_pad+0x5c>
	return 0;
    5b10:	2000      	movs	r0, #0
    5b12:	e7e3      	b.n	5adc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5b14:	482c      	ldr	r0, [pc, #176]	; (5bc8 <_sercom_get_default_pad+0x108>)
    5b16:	e7e1      	b.n	5adc <_sercom_get_default_pad+0x1c>
    5b18:	482c      	ldr	r0, [pc, #176]	; (5bcc <_sercom_get_default_pad+0x10c>)
    5b1a:	e7df      	b.n	5adc <_sercom_get_default_pad+0x1c>
    5b1c:	482c      	ldr	r0, [pc, #176]	; (5bd0 <_sercom_get_default_pad+0x110>)
    5b1e:	e7dd      	b.n	5adc <_sercom_get_default_pad+0x1c>
    5b20:	482c      	ldr	r0, [pc, #176]	; (5bd4 <_sercom_get_default_pad+0x114>)
    5b22:	e7db      	b.n	5adc <_sercom_get_default_pad+0x1c>
    5b24:	482c      	ldr	r0, [pc, #176]	; (5bd8 <_sercom_get_default_pad+0x118>)
    5b26:	e7d9      	b.n	5adc <_sercom_get_default_pad+0x1c>
    5b28:	482c      	ldr	r0, [pc, #176]	; (5bdc <_sercom_get_default_pad+0x11c>)
    5b2a:	e7d7      	b.n	5adc <_sercom_get_default_pad+0x1c>
    5b2c:	2901      	cmp	r1, #1
    5b2e:	d007      	beq.n	5b40 <_sercom_get_default_pad+0x80>
    5b30:	2900      	cmp	r1, #0
    5b32:	d039      	beq.n	5ba8 <_sercom_get_default_pad+0xe8>
    5b34:	2902      	cmp	r1, #2
    5b36:	d005      	beq.n	5b44 <_sercom_get_default_pad+0x84>
    5b38:	2903      	cmp	r1, #3
    5b3a:	d005      	beq.n	5b48 <_sercom_get_default_pad+0x88>
	return 0;
    5b3c:	2000      	movs	r0, #0
    5b3e:	e7cd      	b.n	5adc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5b40:	4827      	ldr	r0, [pc, #156]	; (5be0 <_sercom_get_default_pad+0x120>)
    5b42:	e7cb      	b.n	5adc <_sercom_get_default_pad+0x1c>
    5b44:	4827      	ldr	r0, [pc, #156]	; (5be4 <_sercom_get_default_pad+0x124>)
    5b46:	e7c9      	b.n	5adc <_sercom_get_default_pad+0x1c>
    5b48:	4827      	ldr	r0, [pc, #156]	; (5be8 <_sercom_get_default_pad+0x128>)
    5b4a:	e7c7      	b.n	5adc <_sercom_get_default_pad+0x1c>
    5b4c:	2901      	cmp	r1, #1
    5b4e:	d007      	beq.n	5b60 <_sercom_get_default_pad+0xa0>
    5b50:	2900      	cmp	r1, #0
    5b52:	d02b      	beq.n	5bac <_sercom_get_default_pad+0xec>
    5b54:	2902      	cmp	r1, #2
    5b56:	d005      	beq.n	5b64 <_sercom_get_default_pad+0xa4>
    5b58:	2903      	cmp	r1, #3
    5b5a:	d005      	beq.n	5b68 <_sercom_get_default_pad+0xa8>
	return 0;
    5b5c:	2000      	movs	r0, #0
    5b5e:	e7bd      	b.n	5adc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5b60:	4822      	ldr	r0, [pc, #136]	; (5bec <_sercom_get_default_pad+0x12c>)
    5b62:	e7bb      	b.n	5adc <_sercom_get_default_pad+0x1c>
    5b64:	4822      	ldr	r0, [pc, #136]	; (5bf0 <_sercom_get_default_pad+0x130>)
    5b66:	e7b9      	b.n	5adc <_sercom_get_default_pad+0x1c>
    5b68:	4822      	ldr	r0, [pc, #136]	; (5bf4 <_sercom_get_default_pad+0x134>)
    5b6a:	e7b7      	b.n	5adc <_sercom_get_default_pad+0x1c>
    5b6c:	2902      	cmp	r1, #2
    5b6e:	d003      	beq.n	5b78 <_sercom_get_default_pad+0xb8>
    5b70:	2903      	cmp	r1, #3
    5b72:	d003      	beq.n	5b7c <_sercom_get_default_pad+0xbc>
    5b74:	2000      	movs	r0, #0
    5b76:	e7b1      	b.n	5adc <_sercom_get_default_pad+0x1c>
    5b78:	481f      	ldr	r0, [pc, #124]	; (5bf8 <_sercom_get_default_pad+0x138>)
    5b7a:	e7af      	b.n	5adc <_sercom_get_default_pad+0x1c>
    5b7c:	481f      	ldr	r0, [pc, #124]	; (5bfc <_sercom_get_default_pad+0x13c>)
    5b7e:	e7ad      	b.n	5adc <_sercom_get_default_pad+0x1c>
    5b80:	2901      	cmp	r1, #1
    5b82:	d007      	beq.n	5b94 <_sercom_get_default_pad+0xd4>
    5b84:	2900      	cmp	r1, #0
    5b86:	d013      	beq.n	5bb0 <_sercom_get_default_pad+0xf0>
    5b88:	2902      	cmp	r1, #2
    5b8a:	d005      	beq.n	5b98 <_sercom_get_default_pad+0xd8>
    5b8c:	2903      	cmp	r1, #3
    5b8e:	d005      	beq.n	5b9c <_sercom_get_default_pad+0xdc>
	return 0;
    5b90:	2000      	movs	r0, #0
    5b92:	e7a3      	b.n	5adc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5b94:	481a      	ldr	r0, [pc, #104]	; (5c00 <_sercom_get_default_pad+0x140>)
    5b96:	e7a1      	b.n	5adc <_sercom_get_default_pad+0x1c>
    5b98:	481a      	ldr	r0, [pc, #104]	; (5c04 <_sercom_get_default_pad+0x144>)
    5b9a:	e79f      	b.n	5adc <_sercom_get_default_pad+0x1c>
    5b9c:	481a      	ldr	r0, [pc, #104]	; (5c08 <_sercom_get_default_pad+0x148>)
    5b9e:	e79d      	b.n	5adc <_sercom_get_default_pad+0x1c>
    5ba0:	481a      	ldr	r0, [pc, #104]	; (5c0c <_sercom_get_default_pad+0x14c>)
    5ba2:	e79b      	b.n	5adc <_sercom_get_default_pad+0x1c>
    5ba4:	2003      	movs	r0, #3
    5ba6:	e799      	b.n	5adc <_sercom_get_default_pad+0x1c>
    5ba8:	4819      	ldr	r0, [pc, #100]	; (5c10 <_sercom_get_default_pad+0x150>)
    5baa:	e797      	b.n	5adc <_sercom_get_default_pad+0x1c>
    5bac:	4819      	ldr	r0, [pc, #100]	; (5c14 <_sercom_get_default_pad+0x154>)
    5bae:	e795      	b.n	5adc <_sercom_get_default_pad+0x1c>
    5bb0:	4819      	ldr	r0, [pc, #100]	; (5c18 <_sercom_get_default_pad+0x158>)
    5bb2:	e793      	b.n	5adc <_sercom_get_default_pad+0x1c>
    5bb4:	42000800 	.word	0x42000800
    5bb8:	42001000 	.word	0x42001000
    5bbc:	43000400 	.word	0x43000400
    5bc0:	42000c00 	.word	0x42000c00
    5bc4:	42000400 	.word	0x42000400
    5bc8:	00050003 	.word	0x00050003
    5bcc:	00060003 	.word	0x00060003
    5bd0:	00070003 	.word	0x00070003
    5bd4:	00010003 	.word	0x00010003
    5bd8:	001e0003 	.word	0x001e0003
    5bdc:	001f0003 	.word	0x001f0003
    5be0:	00090003 	.word	0x00090003
    5be4:	000a0003 	.word	0x000a0003
    5be8:	000b0003 	.word	0x000b0003
    5bec:	00110003 	.word	0x00110003
    5bf0:	00120003 	.word	0x00120003
    5bf4:	00130003 	.word	0x00130003
    5bf8:	000e0003 	.word	0x000e0003
    5bfc:	000f0003 	.word	0x000f0003
    5c00:	00170003 	.word	0x00170003
    5c04:	00180003 	.word	0x00180003
    5c08:	00190003 	.word	0x00190003
    5c0c:	00040003 	.word	0x00040003
    5c10:	00080003 	.word	0x00080003
    5c14:	00100003 	.word	0x00100003
    5c18:	00160003 	.word	0x00160003

00005c1c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    5c1c:	b530      	push	{r4, r5, lr}
    5c1e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    5c20:	4b0b      	ldr	r3, [pc, #44]	; (5c50 <_sercom_get_sercom_inst_index+0x34>)
    5c22:	466a      	mov	r2, sp
    5c24:	cb32      	ldmia	r3!, {r1, r4, r5}
    5c26:	c232      	stmia	r2!, {r1, r4, r5}
    5c28:	cb32      	ldmia	r3!, {r1, r4, r5}
    5c2a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    5c2c:	9b00      	ldr	r3, [sp, #0]
    5c2e:	4283      	cmp	r3, r0
    5c30:	d00b      	beq.n	5c4a <_sercom_get_sercom_inst_index+0x2e>
    5c32:	2301      	movs	r3, #1
    5c34:	009a      	lsls	r2, r3, #2
    5c36:	4669      	mov	r1, sp
    5c38:	5852      	ldr	r2, [r2, r1]
    5c3a:	4282      	cmp	r2, r0
    5c3c:	d006      	beq.n	5c4c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5c3e:	3301      	adds	r3, #1
    5c40:	2b06      	cmp	r3, #6
    5c42:	d1f7      	bne.n	5c34 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    5c44:	2000      	movs	r0, #0
}
    5c46:	b007      	add	sp, #28
    5c48:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5c4a:	2300      	movs	r3, #0
			return i;
    5c4c:	b2d8      	uxtb	r0, r3
    5c4e:	e7fa      	b.n	5c46 <_sercom_get_sercom_inst_index+0x2a>
    5c50:	00018450 	.word	0x00018450

00005c54 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    5c54:	4770      	bx	lr
    5c56:	Address 0x00005c56 is out of bounds.


00005c58 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    5c58:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    5c5a:	4b0a      	ldr	r3, [pc, #40]	; (5c84 <_sercom_set_handler+0x2c>)
    5c5c:	781b      	ldrb	r3, [r3, #0]
    5c5e:	2b00      	cmp	r3, #0
    5c60:	d10c      	bne.n	5c7c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    5c62:	4f09      	ldr	r7, [pc, #36]	; (5c88 <_sercom_set_handler+0x30>)
    5c64:	4e09      	ldr	r6, [pc, #36]	; (5c8c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    5c66:	4d0a      	ldr	r5, [pc, #40]	; (5c90 <_sercom_set_handler+0x38>)
    5c68:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    5c6a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    5c6c:	195a      	adds	r2, r3, r5
    5c6e:	6014      	str	r4, [r2, #0]
    5c70:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5c72:	2b18      	cmp	r3, #24
    5c74:	d1f9      	bne.n	5c6a <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    5c76:	2201      	movs	r2, #1
    5c78:	4b02      	ldr	r3, [pc, #8]	; (5c84 <_sercom_set_handler+0x2c>)
    5c7a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    5c7c:	0080      	lsls	r0, r0, #2
    5c7e:	4b02      	ldr	r3, [pc, #8]	; (5c88 <_sercom_set_handler+0x30>)
    5c80:	50c1      	str	r1, [r0, r3]
}
    5c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c84:	200002ca 	.word	0x200002ca
    5c88:	200002cc 	.word	0x200002cc
    5c8c:	00005c55 	.word	0x00005c55
    5c90:	20002128 	.word	0x20002128

00005c94 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    5c94:	b500      	push	{lr}
    5c96:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    5c98:	2308      	movs	r3, #8
    5c9a:	466a      	mov	r2, sp
    5c9c:	7013      	strb	r3, [r2, #0]
    5c9e:	3301      	adds	r3, #1
    5ca0:	7053      	strb	r3, [r2, #1]
    5ca2:	3301      	adds	r3, #1
    5ca4:	7093      	strb	r3, [r2, #2]
    5ca6:	3301      	adds	r3, #1
    5ca8:	70d3      	strb	r3, [r2, #3]
    5caa:	3301      	adds	r3, #1
    5cac:	7113      	strb	r3, [r2, #4]
    5cae:	3301      	adds	r3, #1
    5cb0:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    5cb2:	4b03      	ldr	r3, [pc, #12]	; (5cc0 <_sercom_get_interrupt_vector+0x2c>)
    5cb4:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    5cb6:	466b      	mov	r3, sp
    5cb8:	5618      	ldrsb	r0, [r3, r0]
}
    5cba:	b003      	add	sp, #12
    5cbc:	bd00      	pop	{pc}
    5cbe:	46c0      	nop			; (mov r8, r8)
    5cc0:	00005c1d 	.word	0x00005c1d

00005cc4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    5cc4:	b510      	push	{r4, lr}
    5cc6:	4b02      	ldr	r3, [pc, #8]	; (5cd0 <SERCOM0_Handler+0xc>)
    5cc8:	681b      	ldr	r3, [r3, #0]
    5cca:	2000      	movs	r0, #0
    5ccc:	4798      	blx	r3
    5cce:	bd10      	pop	{r4, pc}
    5cd0:	200002cc 	.word	0x200002cc

00005cd4 <SERCOM1_Handler>:
    5cd4:	b510      	push	{r4, lr}
    5cd6:	4b02      	ldr	r3, [pc, #8]	; (5ce0 <SERCOM1_Handler+0xc>)
    5cd8:	685b      	ldr	r3, [r3, #4]
    5cda:	2001      	movs	r0, #1
    5cdc:	4798      	blx	r3
    5cde:	bd10      	pop	{r4, pc}
    5ce0:	200002cc 	.word	0x200002cc

00005ce4 <SERCOM2_Handler>:
    5ce4:	b510      	push	{r4, lr}
    5ce6:	4b02      	ldr	r3, [pc, #8]	; (5cf0 <SERCOM2_Handler+0xc>)
    5ce8:	689b      	ldr	r3, [r3, #8]
    5cea:	2002      	movs	r0, #2
    5cec:	4798      	blx	r3
    5cee:	bd10      	pop	{r4, pc}
    5cf0:	200002cc 	.word	0x200002cc

00005cf4 <SERCOM3_Handler>:
    5cf4:	b510      	push	{r4, lr}
    5cf6:	4b02      	ldr	r3, [pc, #8]	; (5d00 <SERCOM3_Handler+0xc>)
    5cf8:	68db      	ldr	r3, [r3, #12]
    5cfa:	2003      	movs	r0, #3
    5cfc:	4798      	blx	r3
    5cfe:	bd10      	pop	{r4, pc}
    5d00:	200002cc 	.word	0x200002cc

00005d04 <SERCOM4_Handler>:
    5d04:	b510      	push	{r4, lr}
    5d06:	4b02      	ldr	r3, [pc, #8]	; (5d10 <SERCOM4_Handler+0xc>)
    5d08:	691b      	ldr	r3, [r3, #16]
    5d0a:	2004      	movs	r0, #4
    5d0c:	4798      	blx	r3
    5d0e:	bd10      	pop	{r4, pc}
    5d10:	200002cc 	.word	0x200002cc

00005d14 <SERCOM5_Handler>:
    5d14:	b510      	push	{r4, lr}
    5d16:	4b02      	ldr	r3, [pc, #8]	; (5d20 <SERCOM5_Handler+0xc>)
    5d18:	695b      	ldr	r3, [r3, #20]
    5d1a:	2005      	movs	r0, #5
    5d1c:	4798      	blx	r3
    5d1e:	bd10      	pop	{r4, pc}
    5d20:	200002cc 	.word	0x200002cc

00005d24 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    5d24:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d26:	46d6      	mov	lr, sl
    5d28:	464f      	mov	r7, r9
    5d2a:	4646      	mov	r6, r8
    5d2c:	b5c0      	push	{r6, r7, lr}
    5d2e:	b08a      	sub	sp, #40	; 0x28
    5d30:	0006      	movs	r6, r0
    5d32:	000f      	movs	r7, r1
    5d34:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    5d36:	6031      	str	r1, [r6, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    5d38:	680b      	ldr	r3, [r1, #0]
    5d3a:	079b      	lsls	r3, r3, #30
    5d3c:	d40a      	bmi.n	5d54 <spi_init+0x30>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    5d3e:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    5d40:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    5d42:	07db      	lsls	r3, r3, #31
    5d44:	d400      	bmi.n	5d48 <spi_init+0x24>
    5d46:	e0af      	b.n	5ea8 <spi_init+0x184>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    5d48:	b00a      	add	sp, #40	; 0x28
    5d4a:	bc1c      	pop	{r2, r3, r4}
    5d4c:	4690      	mov	r8, r2
    5d4e:	4699      	mov	r9, r3
    5d50:	46a2      	mov	sl, r4
    5d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    5d54:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5d56:	9305      	str	r3, [sp, #20]
    5d58:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    5d5a:	9306      	str	r3, [sp, #24]
    5d5c:	6b13      	ldr	r3, [r2, #48]	; 0x30
    5d5e:	9307      	str	r3, [sp, #28]
    5d60:	6b53      	ldr	r3, [r2, #52]	; 0x34
    5d62:	9308      	str	r3, [sp, #32]
    5d64:	2500      	movs	r5, #0
    5d66:	e00a      	b.n	5d7e <spi_init+0x5a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5d68:	0038      	movs	r0, r7
    5d6a:	4bb6      	ldr	r3, [pc, #728]	; (6044 <spi_init+0x320>)
    5d6c:	4798      	blx	r3
    5d6e:	e00e      	b.n	5d8e <spi_init+0x6a>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    5d70:	230f      	movs	r3, #15
    5d72:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    5d74:	4581      	cmp	r9, r0
    5d76:	d130      	bne.n	5dda <spi_init+0xb6>
    5d78:	3501      	adds	r5, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    5d7a:	2d04      	cmp	r5, #4
    5d7c:	d031      	beq.n	5de2 <spi_init+0xbe>
    5d7e:	b2e9      	uxtb	r1, r5
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5d80:	00ab      	lsls	r3, r5, #2
    5d82:	aa02      	add	r2, sp, #8
    5d84:	200c      	movs	r0, #12
    5d86:	1812      	adds	r2, r2, r0
    5d88:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    5d8a:	2800      	cmp	r0, #0
    5d8c:	d0ec      	beq.n	5d68 <spi_init+0x44>
		if (current_pinmux == PINMUX_UNUSED) {
    5d8e:	1c43      	adds	r3, r0, #1
    5d90:	d0f2      	beq.n	5d78 <spi_init+0x54>
		if ((current_pinmux & 0xFFFF) !=
    5d92:	0401      	lsls	r1, r0, #16
    5d94:	0c0b      	lsrs	r3, r1, #16
    5d96:	4699      	mov	r9, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    5d98:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    5d9a:	b2c3      	uxtb	r3, r0
    5d9c:	469c      	mov	ip, r3
		return NULL;
    5d9e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5da0:	0602      	lsls	r2, r0, #24
    5da2:	d405      	bmi.n	5db0 <spi_init+0x8c>
		return &(ports[port_index]->Group[group_index]);
    5da4:	4663      	mov	r3, ip
    5da6:	095b      	lsrs	r3, r3, #5
    5da8:	01db      	lsls	r3, r3, #7
    5daa:	4aa7      	ldr	r2, [pc, #668]	; (6048 <spi_init+0x324>)
    5dac:	4690      	mov	r8, r2
    5dae:	4443      	add	r3, r8
	uint32_t pin_index = (gpio_pin % 32);
    5db0:	221f      	movs	r2, #31
    5db2:	4660      	mov	r0, ip
    5db4:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    5db6:	1898      	adds	r0, r3, r2
    5db8:	3040      	adds	r0, #64	; 0x40
    5dba:	7800      	ldrb	r0, [r0, #0]
    5dbc:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    5dbe:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    5dc0:	4651      	mov	r1, sl
    5dc2:	07c9      	lsls	r1, r1, #31
    5dc4:	d5d6      	bpl.n	5d74 <spi_init+0x50>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    5dc6:	0852      	lsrs	r2, r2, #1
    5dc8:	189b      	adds	r3, r3, r2
    5dca:	3330      	adds	r3, #48	; 0x30
    5dcc:	7818      	ldrb	r0, [r3, #0]
    5dce:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    5dd0:	4663      	mov	r3, ip
    5dd2:	07db      	lsls	r3, r3, #31
    5dd4:	d5cc      	bpl.n	5d70 <spi_init+0x4c>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    5dd6:	0900      	lsrs	r0, r0, #4
    5dd8:	e7cc      	b.n	5d74 <spi_init+0x50>
			module->hw = NULL;
    5dda:	2300      	movs	r3, #0
    5ddc:	6033      	str	r3, [r6, #0]
			return STATUS_ERR_DENIED;
    5dde:	201c      	movs	r0, #28
    5de0:	e7b2      	b.n	5d48 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    5de2:	2011      	movs	r0, #17
    5de4:	4b99      	ldr	r3, [pc, #612]	; (604c <spi_init+0x328>)
    5de6:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    5de8:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    5dea:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    5dec:	2a01      	cmp	r2, #1
    5dee:	d016      	beq.n	5e1e <spi_init+0xfa>
	if (config->mode == SPI_MODE_SLAVE) {
    5df0:	7821      	ldrb	r1, [r4, #0]
    5df2:	2900      	cmp	r1, #0
    5df4:	d127      	bne.n	5e46 <spi_init+0x122>
		if (spi_module->CTRLA.reg != addr) {
    5df6:	683b      	ldr	r3, [r7, #0]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    5df8:	7fe2      	ldrb	r2, [r4, #31]
    5dfa:	0412      	lsls	r2, r2, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    5dfc:	7fa0      	ldrb	r0, [r4, #30]
    5dfe:	4302      	orrs	r2, r0
			return STATUS_ERR_DENIED;
    5e00:	201c      	movs	r0, #28
		if (spi_module->CTRLA.reg != addr) {
    5e02:	429a      	cmp	r2, r3
    5e04:	d1a0      	bne.n	5d48 <spi_init+0x24>
		ctrla |= config->mode_specific.slave.frame_format;
    5e06:	69a3      	ldr	r3, [r4, #24]
		ctrlb |= config->mode_specific.slave.address_mode;
    5e08:	8ba2      	ldrh	r2, [r4, #28]
		if (config->mode_specific.slave.preload_enable) {
    5e0a:	3004      	adds	r0, #4
    5e0c:	5c20      	ldrb	r0, [r4, r0]
    5e0e:	2800      	cmp	r0, #0
    5e10:	d001      	beq.n	5e16 <spi_init+0xf2>
    5e12:	2040      	movs	r0, #64	; 0x40
    5e14:	4302      	orrs	r2, r0
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
    5e16:	2008      	movs	r0, #8
    5e18:	4303      	orrs	r3, r0
    5e1a:	431d      	orrs	r5, r3
    5e1c:	e014      	b.n	5e48 <spi_init+0x124>
		enum status_code error_code = _sercom_get_sync_baud_val(
    5e1e:	aa04      	add	r2, sp, #16
    5e20:	0001      	movs	r1, r0
    5e22:	69a0      	ldr	r0, [r4, #24]
    5e24:	4b8a      	ldr	r3, [pc, #552]	; (6050 <spi_init+0x32c>)
    5e26:	4798      	blx	r3
    5e28:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    5e2a:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    5e2c:	2b00      	cmp	r3, #0
    5e2e:	d000      	beq.n	5e32 <spi_init+0x10e>
    5e30:	e78a      	b.n	5d48 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    5e32:	7b3b      	ldrb	r3, [r7, #12]
    5e34:	b2db      	uxtb	r3, r3
    5e36:	aa04      	add	r2, sp, #16
    5e38:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    5e3a:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    5e3c:	429a      	cmp	r2, r3
    5e3e:	d000      	beq.n	5e42 <spi_init+0x11e>
    5e40:	e782      	b.n	5d48 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    5e42:	350c      	adds	r5, #12
    5e44:	e7d4      	b.n	5df0 <spi_init+0xcc>
	uint32_t ctrlb = 0;
    5e46:	2200      	movs	r2, #0
	ctrla |= config->mux_setting;
    5e48:	6863      	ldr	r3, [r4, #4]
    5e4a:	68a0      	ldr	r0, [r4, #8]
    5e4c:	4303      	orrs	r3, r0
    5e4e:	68e0      	ldr	r0, [r4, #12]
    5e50:	4303      	orrs	r3, r0
    5e52:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    5e54:	7c20      	ldrb	r0, [r4, #16]
    5e56:	4302      	orrs	r2, r0
	if (config->run_in_standby) {
    5e58:	7c60      	ldrb	r0, [r4, #17]
    5e5a:	2800      	cmp	r0, #0
    5e5c:	d001      	beq.n	5e62 <spi_init+0x13e>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    5e5e:	2080      	movs	r0, #128	; 0x80
    5e60:	4303      	orrs	r3, r0
	if (config->receiver_enable) {
    5e62:	7ca0      	ldrb	r0, [r4, #18]
    5e64:	2800      	cmp	r0, #0
    5e66:	d002      	beq.n	5e6e <spi_init+0x14a>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    5e68:	2080      	movs	r0, #128	; 0x80
    5e6a:	0280      	lsls	r0, r0, #10
    5e6c:	4302      	orrs	r2, r0
	if (config->select_slave_low_detect_enable) {
    5e6e:	7ce0      	ldrb	r0, [r4, #19]
    5e70:	2800      	cmp	r0, #0
    5e72:	d002      	beq.n	5e7a <spi_init+0x156>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    5e74:	2080      	movs	r0, #128	; 0x80
    5e76:	0080      	lsls	r0, r0, #2
    5e78:	4302      	orrs	r2, r0
	if (config->master_slave_select_enable) {
    5e7a:	7d20      	ldrb	r0, [r4, #20]
    5e7c:	2800      	cmp	r0, #0
    5e7e:	d002      	beq.n	5e86 <spi_init+0x162>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    5e80:	2080      	movs	r0, #128	; 0x80
    5e82:	0180      	lsls	r0, r0, #6
    5e84:	4302      	orrs	r2, r0
	if (spi_module->CTRLA.reg == ctrla &&
    5e86:	6838      	ldr	r0, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    5e88:	2502      	movs	r5, #2
    5e8a:	432b      	orrs	r3, r5
	if (spi_module->CTRLA.reg == ctrla &&
    5e8c:	4283      	cmp	r3, r0
    5e8e:	d003      	beq.n	5e98 <spi_init+0x174>
	module->hw = NULL;
    5e90:	2300      	movs	r3, #0
    5e92:	6033      	str	r3, [r6, #0]
	return STATUS_ERR_DENIED;
    5e94:	201c      	movs	r0, #28
    5e96:	e757      	b.n	5d48 <spi_init+0x24>
			spi_module->CTRLB.reg == ctrlb) {
    5e98:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    5e9a:	4293      	cmp	r3, r2
    5e9c:	d1f8      	bne.n	5e90 <spi_init+0x16c>
		module->mode           = config->mode;
    5e9e:	7171      	strb	r1, [r6, #5]
		module->character_size = config->character_size;
    5ea0:	7c23      	ldrb	r3, [r4, #16]
    5ea2:	71b3      	strb	r3, [r6, #6]
		return STATUS_OK;
    5ea4:	2000      	movs	r0, #0
    5ea6:	e74f      	b.n	5d48 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5ea8:	0008      	movs	r0, r1
    5eaa:	4b6a      	ldr	r3, [pc, #424]	; (6054 <spi_init+0x330>)
    5eac:	4798      	blx	r3
	if (sercom_index == 5) {
    5eae:	2805      	cmp	r0, #5
    5eb0:	d100      	bne.n	5eb4 <spi_init+0x190>
    5eb2:	e0bf      	b.n	6034 <spi_init+0x310>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5eb4:	0003      	movs	r3, r0
    5eb6:	3312      	adds	r3, #18
			MCLK->APBCMASK.reg |= mask;
    5eb8:	4967      	ldr	r1, [pc, #412]	; (6058 <spi_init+0x334>)
    5eba:	69cd      	ldr	r5, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    5ebc:	2201      	movs	r2, #1
    5ebe:	4082      	lsls	r2, r0
    5ec0:	432a      	orrs	r2, r5
    5ec2:	61ca      	str	r2, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    5ec4:	a909      	add	r1, sp, #36	; 0x24
    5ec6:	2524      	movs	r5, #36	; 0x24
    5ec8:	5d62      	ldrb	r2, [r4, r5]
    5eca:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    5ecc:	b2db      	uxtb	r3, r3
    5ece:	9301      	str	r3, [sp, #4]
    5ed0:	0018      	movs	r0, r3
    5ed2:	4b62      	ldr	r3, [pc, #392]	; (605c <spi_init+0x338>)
    5ed4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    5ed6:	9801      	ldr	r0, [sp, #4]
    5ed8:	4b61      	ldr	r3, [pc, #388]	; (6060 <spi_init+0x33c>)
    5eda:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5edc:	5d60      	ldrb	r0, [r4, r5]
    5ede:	2100      	movs	r1, #0
    5ee0:	4b60      	ldr	r3, [pc, #384]	; (6064 <spi_init+0x340>)
    5ee2:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    5ee4:	7823      	ldrb	r3, [r4, #0]
    5ee6:	2b01      	cmp	r3, #1
    5ee8:	d020      	beq.n	5f2c <spi_init+0x208>
	if (config->mode == SPI_MODE_SLAVE) {
    5eea:	7823      	ldrb	r3, [r4, #0]
    5eec:	2b00      	cmp	r3, #0
    5eee:	d103      	bne.n	5ef8 <spi_init+0x1d4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    5ef0:	683b      	ldr	r3, [r7, #0]
    5ef2:	2208      	movs	r2, #8
    5ef4:	4313      	orrs	r3, r2
    5ef6:	603b      	str	r3, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5ef8:	6833      	ldr	r3, [r6, #0]
    5efa:	4698      	mov	r8, r3
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5efc:	ab04      	add	r3, sp, #16
    5efe:	2280      	movs	r2, #128	; 0x80
    5f00:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5f02:	2200      	movs	r2, #0
    5f04:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5f06:	2101      	movs	r1, #1
    5f08:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    5f0a:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    5f0c:	7823      	ldrb	r3, [r4, #0]
    5f0e:	2b00      	cmp	r3, #0
    5f10:	d101      	bne.n	5f16 <spi_init+0x1f2>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    5f12:	ab04      	add	r3, sp, #16
    5f14:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    5f16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5f18:	9305      	str	r3, [sp, #20]
    5f1a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5f1c:	9306      	str	r3, [sp, #24]
    5f1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5f20:	9307      	str	r3, [sp, #28]
    5f22:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5f24:	9308      	str	r3, [sp, #32]
    5f26:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5f28:	ad05      	add	r5, sp, #20
    5f2a:	e011      	b.n	5f50 <spi_init+0x22c>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    5f2c:	683b      	ldr	r3, [r7, #0]
    5f2e:	220c      	movs	r2, #12
    5f30:	4313      	orrs	r3, r2
    5f32:	603b      	str	r3, [r7, #0]
    5f34:	e7d9      	b.n	5eea <spi_init+0x1c6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5f36:	4640      	mov	r0, r8
    5f38:	4b42      	ldr	r3, [pc, #264]	; (6044 <spi_init+0x320>)
    5f3a:	4798      	blx	r3
    5f3c:	e00d      	b.n	5f5a <spi_init+0x236>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    5f3e:	a904      	add	r1, sp, #16
    5f40:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    5f42:	0c00      	lsrs	r0, r0, #16
    5f44:	b2c0      	uxtb	r0, r0
    5f46:	4b48      	ldr	r3, [pc, #288]	; (6068 <spi_init+0x344>)
    5f48:	4798      	blx	r3
    5f4a:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    5f4c:	2f04      	cmp	r7, #4
    5f4e:	d007      	beq.n	5f60 <spi_init+0x23c>
    5f50:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5f52:	00bb      	lsls	r3, r7, #2
    5f54:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    5f56:	2800      	cmp	r0, #0
    5f58:	d0ed      	beq.n	5f36 <spi_init+0x212>
		if (current_pinmux != PINMUX_UNUSED) {
    5f5a:	1c43      	adds	r3, r0, #1
    5f5c:	d1ef      	bne.n	5f3e <spi_init+0x21a>
    5f5e:	e7f4      	b.n	5f4a <spi_init+0x226>
	module->mode             = config->mode;
    5f60:	7823      	ldrb	r3, [r4, #0]
    5f62:	7173      	strb	r3, [r6, #5]
	module->character_size   = config->character_size;
    5f64:	7c23      	ldrb	r3, [r4, #16]
    5f66:	71b3      	strb	r3, [r6, #6]
	module->receiver_enabled = config->receiver_enable;
    5f68:	7ca3      	ldrb	r3, [r4, #18]
    5f6a:	71f3      	strb	r3, [r6, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    5f6c:	7d23      	ldrb	r3, [r4, #20]
    5f6e:	7233      	strb	r3, [r6, #8]
	uint16_t baud = 0;
    5f70:	2200      	movs	r2, #0
    5f72:	ab02      	add	r3, sp, #8
    5f74:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    5f76:	7823      	ldrb	r3, [r4, #0]
    5f78:	2b01      	cmp	r3, #1
    5f7a:	d014      	beq.n	5fa6 <spi_init+0x282>
	if (config->mode == SPI_MODE_SLAVE) {
    5f7c:	7823      	ldrb	r3, [r4, #0]
    5f7e:	2b00      	cmp	r3, #0
    5f80:	d129      	bne.n	5fd6 <spi_init+0x2b2>
		ctrla = config->mode_specific.slave.frame_format;
    5f82:	69a0      	ldr	r0, [r4, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    5f84:	8ba2      	ldrh	r2, [r4, #28]
		spi_module->ADDR.reg |=
    5f86:	4643      	mov	r3, r8
    5f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    5f8a:	7fe1      	ldrb	r1, [r4, #31]
    5f8c:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    5f8e:	7fa5      	ldrb	r5, [r4, #30]
    5f90:	4329      	orrs	r1, r5
		spi_module->ADDR.reg |=
    5f92:	4319      	orrs	r1, r3
    5f94:	4643      	mov	r3, r8
    5f96:	6259      	str	r1, [r3, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    5f98:	2320      	movs	r3, #32
    5f9a:	5ce3      	ldrb	r3, [r4, r3]
    5f9c:	2b00      	cmp	r3, #0
    5f9e:	d01c      	beq.n	5fda <spi_init+0x2b6>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    5fa0:	2340      	movs	r3, #64	; 0x40
    5fa2:	431a      	orrs	r2, r3
    5fa4:	e019      	b.n	5fda <spi_init+0x2b6>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5fa6:	6830      	ldr	r0, [r6, #0]
    5fa8:	4b2a      	ldr	r3, [pc, #168]	; (6054 <spi_init+0x330>)
    5faa:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5fac:	3012      	adds	r0, #18
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    5fae:	b2c0      	uxtb	r0, r0
    5fb0:	4b26      	ldr	r3, [pc, #152]	; (604c <spi_init+0x328>)
    5fb2:	4798      	blx	r3
    5fb4:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    5fb6:	ab02      	add	r3, sp, #8
    5fb8:	1d9a      	adds	r2, r3, #6
    5fba:	69a0      	ldr	r0, [r4, #24]
    5fbc:	4b24      	ldr	r3, [pc, #144]	; (6050 <spi_init+0x32c>)
    5fbe:	4798      	blx	r3
    5fc0:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    5fc2:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    5fc4:	2b00      	cmp	r3, #0
    5fc6:	d000      	beq.n	5fca <spi_init+0x2a6>
    5fc8:	e6be      	b.n	5d48 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    5fca:	ab02      	add	r3, sp, #8
    5fcc:	3306      	adds	r3, #6
    5fce:	781b      	ldrb	r3, [r3, #0]
    5fd0:	4642      	mov	r2, r8
    5fd2:	7313      	strb	r3, [r2, #12]
    5fd4:	e7d2      	b.n	5f7c <spi_init+0x258>
	uint32_t ctrlb = 0;
    5fd6:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    5fd8:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    5fda:	6863      	ldr	r3, [r4, #4]
    5fdc:	68a1      	ldr	r1, [r4, #8]
    5fde:	430b      	orrs	r3, r1
    5fe0:	68e1      	ldr	r1, [r4, #12]
    5fe2:	430b      	orrs	r3, r1
    5fe4:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    5fe6:	7c21      	ldrb	r1, [r4, #16]
    5fe8:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    5fea:	7c61      	ldrb	r1, [r4, #17]
    5fec:	2900      	cmp	r1, #0
    5fee:	d103      	bne.n	5ff8 <spi_init+0x2d4>
    5ff0:	491e      	ldr	r1, [pc, #120]	; (606c <spi_init+0x348>)
    5ff2:	7889      	ldrb	r1, [r1, #2]
    5ff4:	0789      	lsls	r1, r1, #30
    5ff6:	d501      	bpl.n	5ffc <spi_init+0x2d8>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    5ff8:	2180      	movs	r1, #128	; 0x80
    5ffa:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    5ffc:	7ca1      	ldrb	r1, [r4, #18]
    5ffe:	2900      	cmp	r1, #0
    6000:	d002      	beq.n	6008 <spi_init+0x2e4>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    6002:	2180      	movs	r1, #128	; 0x80
    6004:	0289      	lsls	r1, r1, #10
    6006:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    6008:	7ce1      	ldrb	r1, [r4, #19]
    600a:	2900      	cmp	r1, #0
    600c:	d002      	beq.n	6014 <spi_init+0x2f0>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    600e:	2180      	movs	r1, #128	; 0x80
    6010:	0089      	lsls	r1, r1, #2
    6012:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    6014:	7d21      	ldrb	r1, [r4, #20]
    6016:	2900      	cmp	r1, #0
    6018:	d002      	beq.n	6020 <spi_init+0x2fc>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    601a:	2180      	movs	r1, #128	; 0x80
    601c:	0189      	lsls	r1, r1, #6
    601e:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    6020:	4641      	mov	r1, r8
    6022:	6809      	ldr	r1, [r1, #0]
    6024:	430b      	orrs	r3, r1
    6026:	4641      	mov	r1, r8
    6028:	600b      	str	r3, [r1, #0]
	spi_module->CTRLB.reg |= ctrlb;
    602a:	684b      	ldr	r3, [r1, #4]
    602c:	431a      	orrs	r2, r3
    602e:	604a      	str	r2, [r1, #4]
	return STATUS_OK;
    6030:	2000      	movs	r0, #0
    6032:	e689      	b.n	5d48 <spi_init+0x24>
			MCLK->APBDMASK.reg |= mask;
    6034:	4a08      	ldr	r2, [pc, #32]	; (6058 <spi_init+0x334>)
    6036:	6a13      	ldr	r3, [r2, #32]
    6038:	2102      	movs	r1, #2
    603a:	430b      	orrs	r3, r1
    603c:	6213      	str	r3, [r2, #32]
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
    603e:	2318      	movs	r3, #24
    6040:	e740      	b.n	5ec4 <spi_init+0x1a0>
    6042:	46c0      	nop			; (mov r8, r8)
    6044:	00005ac1 	.word	0x00005ac1
    6048:	40002800 	.word	0x40002800
    604c:	000070b5 	.word	0x000070b5
    6050:	000059b7 	.word	0x000059b7
    6054:	00005c1d 	.word	0x00005c1d
    6058:	40000400 	.word	0x40000400
    605c:	00007091 	.word	0x00007091
    6060:	00007021 	.word	0x00007021
    6064:	00005a75 	.word	0x00005a75
    6068:	0000718d 	.word	0x0000718d
    606c:	41002000 	.word	0x41002000

00006070 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    6070:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    6072:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    6074:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    6076:	2c01      	cmp	r4, #1
    6078:	d001      	beq.n	607e <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    607a:	0018      	movs	r0, r3
    607c:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    607e:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    6080:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    6082:	2c00      	cmp	r4, #0
    6084:	d1f9      	bne.n	607a <spi_select_slave+0xa>
		if (select) {
    6086:	2a00      	cmp	r2, #0
    6088:	d058      	beq.n	613c <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    608a:	784b      	ldrb	r3, [r1, #1]
    608c:	2b00      	cmp	r3, #0
    608e:	d044      	beq.n	611a <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    6090:	6803      	ldr	r3, [r0, #0]
    6092:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    6094:	07db      	lsls	r3, r3, #31
    6096:	d410      	bmi.n	60ba <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    6098:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    609a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    609c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    609e:	2900      	cmp	r1, #0
    60a0:	d104      	bne.n	60ac <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    60a2:	0953      	lsrs	r3, r2, #5
    60a4:	01db      	lsls	r3, r3, #7
    60a6:	492e      	ldr	r1, [pc, #184]	; (6160 <spi_select_slave+0xf0>)
    60a8:	468c      	mov	ip, r1
    60aa:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    60ac:	211f      	movs	r1, #31
    60ae:	4011      	ands	r1, r2
    60b0:	2201      	movs	r2, #1
    60b2:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    60b4:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    60b6:	2305      	movs	r3, #5
    60b8:	e7df      	b.n	607a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    60ba:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    60bc:	09d4      	lsrs	r4, r2, #7
		return NULL;
    60be:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    60c0:	2c00      	cmp	r4, #0
    60c2:	d104      	bne.n	60ce <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    60c4:	0953      	lsrs	r3, r2, #5
    60c6:	01db      	lsls	r3, r3, #7
    60c8:	4c25      	ldr	r4, [pc, #148]	; (6160 <spi_select_slave+0xf0>)
    60ca:	46a4      	mov	ip, r4
    60cc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    60ce:	241f      	movs	r4, #31
    60d0:	4014      	ands	r4, r2
    60d2:	2201      	movs	r2, #1
    60d4:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    60d6:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    60d8:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    60da:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    60dc:	07d2      	lsls	r2, r2, #31
    60de:	d501      	bpl.n	60e4 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    60e0:	788a      	ldrb	r2, [r1, #2]
    60e2:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    60e4:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    60e6:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    60e8:	2a00      	cmp	r2, #0
    60ea:	d1c6      	bne.n	607a <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    60ec:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    60ee:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    60f0:	7e13      	ldrb	r3, [r2, #24]
    60f2:	420b      	tst	r3, r1
    60f4:	d0fc      	beq.n	60f0 <spi_select_slave+0x80>
    60f6:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    60f8:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    60fa:	0749      	lsls	r1, r1, #29
    60fc:	d5bd      	bpl.n	607a <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    60fe:	8b53      	ldrh	r3, [r2, #26]
    6100:	075b      	lsls	r3, r3, #29
    6102:	d501      	bpl.n	6108 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    6104:	2304      	movs	r3, #4
    6106:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    6108:	7983      	ldrb	r3, [r0, #6]
    610a:	2b01      	cmp	r3, #1
    610c:	d002      	beq.n	6114 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    610e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    6110:	2300      	movs	r3, #0
    6112:	e7b2      	b.n	607a <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    6114:	6a93      	ldr	r3, [r2, #40]	; 0x28
    6116:	2300      	movs	r3, #0
    6118:	e7af      	b.n	607a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    611a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    611c:	09d1      	lsrs	r1, r2, #7
		return NULL;
    611e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    6120:	2900      	cmp	r1, #0
    6122:	d104      	bne.n	612e <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    6124:	0953      	lsrs	r3, r2, #5
    6126:	01db      	lsls	r3, r3, #7
    6128:	490d      	ldr	r1, [pc, #52]	; (6160 <spi_select_slave+0xf0>)
    612a:	468c      	mov	ip, r1
    612c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    612e:	211f      	movs	r1, #31
    6130:	4011      	ands	r1, r2
    6132:	2201      	movs	r2, #1
    6134:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    6136:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    6138:	2300      	movs	r3, #0
    613a:	e79e      	b.n	607a <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    613c:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    613e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    6140:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    6142:	2900      	cmp	r1, #0
    6144:	d104      	bne.n	6150 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    6146:	0953      	lsrs	r3, r2, #5
    6148:	01db      	lsls	r3, r3, #7
    614a:	4905      	ldr	r1, [pc, #20]	; (6160 <spi_select_slave+0xf0>)
    614c:	468c      	mov	ip, r1
    614e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6150:	211f      	movs	r1, #31
    6152:	4011      	ands	r1, r2
    6154:	2201      	movs	r2, #1
    6156:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    6158:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    615a:	2300      	movs	r3, #0
    615c:	e78d      	b.n	607a <spi_select_slave+0xa>
    615e:	46c0      	nop			; (mov r8, r8)
    6160:	40002800 	.word	0x40002800

00006164 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    6164:	b5f0      	push	{r4, r5, r6, r7, lr}
    6166:	46de      	mov	lr, fp
    6168:	4657      	mov	r7, sl
    616a:	464e      	mov	r6, r9
    616c:	4645      	mov	r5, r8
    616e:	b5e0      	push	{r5, r6, r7, lr}
    6170:	b083      	sub	sp, #12
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    6172:	2317      	movs	r3, #23
	if (length == 0) {
    6174:	2a00      	cmp	r2, #0
    6176:	d107      	bne.n	6188 <spi_write_buffer_wait+0x24>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    6178:	0018      	movs	r0, r3
    617a:	b003      	add	sp, #12
    617c:	bc3c      	pop	{r2, r3, r4, r5}
    617e:	4690      	mov	r8, r2
    6180:	4699      	mov	r9, r3
    6182:	46a2      	mov	sl, r4
    6184:	46ab      	mov	fp, r5
    6186:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    6188:	7943      	ldrb	r3, [r0, #5]
    618a:	2b00      	cmp	r3, #0
    618c:	d103      	bne.n	6196 <spi_write_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    618e:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    6190:	7e1c      	ldrb	r4, [r3, #24]
    6192:	07a4      	lsls	r4, r4, #30
    6194:	d40a      	bmi.n	61ac <spi_write_buffer_wait+0x48>
						data_to_send = tx_data[tx_pos++];
    6196:	4693      	mov	fp, r2
    6198:	2400      	movs	r4, #0
				if (spi_is_ready_to_write(module)) {
    619a:	2301      	movs	r3, #1
			if (spi_is_write_complete(module)) {
    619c:	2502      	movs	r5, #2
    619e:	46ac      	mov	ip, r5
					if (spi_is_ready_to_read(module)) {
    61a0:	3502      	adds	r5, #2
    61a2:	46a8      	mov	r8, r5
    61a4:	3a01      	subs	r2, #1
    61a6:	b292      	uxth	r2, r2
    61a8:	468a      	mov	sl, r1
    61aa:	e023      	b.n	61f4 <spi_write_buffer_wait+0x90>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    61ac:	2402      	movs	r4, #2
    61ae:	761c      	strb	r4, [r3, #24]
    61b0:	e7f1      	b.n	6196 <spi_write_buffer_wait+0x32>
    61b2:	7e35      	ldrb	r5, [r6, #24]
			if (spi_is_write_complete(module)) {
    61b4:	4661      	mov	r1, ip
    61b6:	420d      	tst	r5, r1
    61b8:	d12e      	bne.n	6218 <spi_write_buffer_wait+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    61ba:	7e35      	ldrb	r5, [r6, #24]
			if (!spi_is_ready_to_write(module)) {
    61bc:	421d      	tst	r5, r3
    61be:	d100      	bne.n	61c2 <spi_write_buffer_wait+0x5e>
    61c0:	e0c2      	b.n	6348 <spi_write_buffer_wait+0x1e4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    61c2:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    61c4:	7e35      	ldrb	r5, [r6, #24]
		while (!spi_is_ready_to_write(module)) {
    61c6:	421d      	tst	r5, r3
    61c8:	d0fc      	beq.n	61c4 <spi_write_buffer_wait+0x60>
		uint16_t data_to_send = tx_data[tx_pos++];
    61ca:	1c67      	adds	r7, r4, #1
    61cc:	b2bf      	uxth	r7, r7
    61ce:	4651      	mov	r1, sl
    61d0:	5d0d      	ldrb	r5, [r1, r4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    61d2:	7981      	ldrb	r1, [r0, #6]
    61d4:	2901      	cmp	r1, #1
    61d6:	d023      	beq.n	6220 <spi_write_buffer_wait+0xbc>
		uint16_t data_to_send = tx_data[tx_pos++];
    61d8:	b2ad      	uxth	r5, r5
    61da:	003c      	movs	r4, r7
    61dc:	7e37      	ldrb	r7, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    61de:	421f      	tst	r7, r3
    61e0:	d002      	beq.n	61e8 <spi_write_buffer_wait+0x84>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    61e2:	05ed      	lsls	r5, r5, #23
    61e4:	0ded      	lsrs	r5, r5, #23
    61e6:	62b5      	str	r5, [r6, #40]	; 0x28
    61e8:	1e55      	subs	r5, r2, #1
    61ea:	b2ad      	uxth	r5, r5
		if (module->receiver_enabled) {
    61ec:	79c6      	ldrb	r6, [r0, #7]
    61ee:	2e00      	cmp	r6, #0
    61f0:	d11d      	bne.n	622e <spi_write_buffer_wait+0xca>
    61f2:	002a      	movs	r2, r5
	while (length--) {
    61f4:	4d59      	ldr	r5, [pc, #356]	; (635c <spi_write_buffer_wait+0x1f8>)
    61f6:	42aa      	cmp	r2, r5
    61f8:	d070      	beq.n	62dc <spi_write_buffer_wait+0x178>
		if (module->mode == SPI_MODE_SLAVE) {
    61fa:	7945      	ldrb	r5, [r0, #5]
    61fc:	2d00      	cmp	r5, #0
    61fe:	d1e0      	bne.n	61c2 <spi_write_buffer_wait+0x5e>
	SercomSpi *const spi_module = &(module->hw->SPI);
    6200:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    6202:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_ready_to_write(module)) {
    6204:	421d      	tst	r5, r3
    6206:	d1d4      	bne.n	61b2 <spi_write_buffer_wait+0x4e>
    6208:	4d55      	ldr	r5, [pc, #340]	; (6360 <spi_write_buffer_wait+0x1fc>)
    620a:	7e37      	ldrb	r7, [r6, #24]
    620c:	421f      	tst	r7, r3
    620e:	d1d0      	bne.n	61b2 <spi_write_buffer_wait+0x4e>
    6210:	3d01      	subs	r5, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    6212:	2d00      	cmp	r5, #0
    6214:	d1f9      	bne.n	620a <spi_write_buffer_wait+0xa6>
    6216:	e7cc      	b.n	61b2 <spi_write_buffer_wait+0x4e>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    6218:	2302      	movs	r3, #2
    621a:	7633      	strb	r3, [r6, #24]
				return STATUS_ABORTED;
    621c:	3302      	adds	r3, #2
    621e:	e7ab      	b.n	6178 <spi_write_buffer_wait+0x14>
			data_to_send |= (tx_data[tx_pos++] << 8);
    6220:	3402      	adds	r4, #2
    6222:	b2a4      	uxth	r4, r4
    6224:	4651      	mov	r1, sl
    6226:	5dcf      	ldrb	r7, [r1, r7]
    6228:	023f      	lsls	r7, r7, #8
    622a:	433d      	orrs	r5, r7
    622c:	e7d6      	b.n	61dc <spi_write_buffer_wait+0x78>
    622e:	4651      	mov	r1, sl
			if (module->mode == SPI_MODE_SLAVE) {
    6230:	7945      	ldrb	r5, [r0, #5]
    6232:	2d00      	cmp	r5, #0
    6234:	d137      	bne.n	62a6 <spi_write_buffer_wait+0x142>
    6236:	4d4b      	ldr	r5, [pc, #300]	; (6364 <spi_write_buffer_wait+0x200>)
    6238:	9101      	str	r1, [sp, #4]
    623a:	e012      	b.n	6262 <spi_write_buffer_wait+0xfe>
							data_to_send |= (tx_data[tx_pos++] << 8);
    623c:	3402      	adds	r4, #2
    623e:	b2a4      	uxth	r4, r4
    6240:	4649      	mov	r1, r9
    6242:	9f01      	ldr	r7, [sp, #4]
    6244:	5c79      	ldrb	r1, [r7, r1]
    6246:	0209      	lsls	r1, r1, #8
    6248:	9f00      	ldr	r7, [sp, #0]
    624a:	430f      	orrs	r7, r1
    624c:	e01b      	b.n	6286 <spi_write_buffer_wait+0x122>
						length--;
    624e:	3a01      	subs	r2, #1
    6250:	b292      	uxth	r2, r2
	SercomSpi *const spi_module = &(module->hw->SPI);
    6252:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    6254:	7e37      	ldrb	r7, [r6, #24]
					if (spi_is_ready_to_read(module)) {
    6256:	4641      	mov	r1, r8
    6258:	420f      	tst	r7, r1
    625a:	d11b      	bne.n	6294 <spi_write_buffer_wait+0x130>
    625c:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    625e:	2d00      	cmp	r5, #0
    6260:	d018      	beq.n	6294 <spi_write_buffer_wait+0x130>
					if (length && spi_is_ready_to_write(module)) {
    6262:	2a00      	cmp	r2, #0
    6264:	d0f5      	beq.n	6252 <spi_write_buffer_wait+0xee>
	SercomSpi *const spi_module = &(module->hw->SPI);
    6266:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    6268:	7e37      	ldrb	r7, [r6, #24]
    626a:	421f      	tst	r7, r3
    626c:	d0f1      	beq.n	6252 <spi_write_buffer_wait+0xee>
						data_to_send = tx_data[tx_pos++];
    626e:	1c67      	adds	r7, r4, #1
    6270:	b2b9      	uxth	r1, r7
    6272:	4689      	mov	r9, r1
    6274:	9901      	ldr	r1, [sp, #4]
    6276:	5d09      	ldrb	r1, [r1, r4]
    6278:	9100      	str	r1, [sp, #0]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    627a:	7981      	ldrb	r1, [r0, #6]
    627c:	2901      	cmp	r1, #1
    627e:	d0dd      	beq.n	623c <spi_write_buffer_wait+0xd8>
						data_to_send = tx_data[tx_pos++];
    6280:	4669      	mov	r1, sp
    6282:	880f      	ldrh	r7, [r1, #0]
    6284:	464c      	mov	r4, r9
    6286:	7e31      	ldrb	r1, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    6288:	4219      	tst	r1, r3
    628a:	d0e0      	beq.n	624e <spi_write_buffer_wait+0xea>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    628c:	05ff      	lsls	r7, r7, #23
    628e:	0dff      	lsrs	r7, r7, #23
    6290:	62b7      	str	r7, [r6, #40]	; 0x28
    6292:	e7dc      	b.n	624e <spi_write_buffer_wait+0xea>
    6294:	9901      	ldr	r1, [sp, #4]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    6296:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_write_complete(module)) {
    6298:	4667      	mov	r7, ip
    629a:	423d      	tst	r5, r7
    629c:	d118      	bne.n	62d0 <spi_write_buffer_wait+0x16c>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    629e:	7e35      	ldrb	r5, [r6, #24]
				if (!spi_is_ready_to_read(module)) {
    62a0:	4646      	mov	r6, r8
    62a2:	4235      	tst	r5, r6
    62a4:	d052      	beq.n	634c <spi_write_buffer_wait+0x1e8>
	SercomSpi *const spi_module = &(module->hw->SPI);
    62a6:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    62a8:	7e35      	ldrb	r5, [r6, #24]
			while (!spi_is_ready_to_read(module)) {
    62aa:	4647      	mov	r7, r8
    62ac:	423d      	tst	r5, r7
    62ae:	d0fb      	beq.n	62a8 <spi_write_buffer_wait+0x144>
    62b0:	7e35      	ldrb	r5, [r6, #24]
	if (!spi_is_ready_to_read(module)) {
    62b2:	423d      	tst	r5, r7
    62b4:	d007      	beq.n	62c6 <spi_write_buffer_wait+0x162>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    62b6:	8b75      	ldrh	r5, [r6, #26]
    62b8:	423d      	tst	r5, r7
    62ba:	d000      	beq.n	62be <spi_write_buffer_wait+0x15a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    62bc:	8377      	strh	r7, [r6, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    62be:	7985      	ldrb	r5, [r0, #6]
    62c0:	2d01      	cmp	r5, #1
    62c2:	d009      	beq.n	62d8 <spi_write_buffer_wait+0x174>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    62c4:	6ab5      	ldr	r5, [r6, #40]	; 0x28
			flush_length--;
    62c6:	465d      	mov	r5, fp
    62c8:	3d01      	subs	r5, #1
    62ca:	b2ad      	uxth	r5, r5
    62cc:	46ab      	mov	fp, r5
    62ce:	e769      	b.n	61a4 <spi_write_buffer_wait+0x40>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    62d0:	2302      	movs	r3, #2
    62d2:	7633      	strb	r3, [r6, #24]
					return STATUS_ABORTED;
    62d4:	3302      	adds	r3, #2
    62d6:	e74f      	b.n	6178 <spi_write_buffer_wait+0x14>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    62d8:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    62da:	e7f4      	b.n	62c6 <spi_write_buffer_wait+0x162>
	if (module->mode == SPI_MODE_MASTER) {
    62dc:	7943      	ldrb	r3, [r0, #5]
    62de:	2b01      	cmp	r3, #1
    62e0:	d00b      	beq.n	62fa <spi_write_buffer_wait+0x196>
	if (module->mode == SPI_MODE_SLAVE) {
    62e2:	2b00      	cmp	r3, #0
    62e4:	d134      	bne.n	6350 <spi_write_buffer_wait+0x1ec>
		if (module->receiver_enabled) {
    62e6:	79c2      	ldrb	r2, [r0, #7]
    62e8:	2a00      	cmp	r2, #0
    62ea:	d100      	bne.n	62ee <spi_write_buffer_wait+0x18a>
    62ec:	e744      	b.n	6178 <spi_write_buffer_wait+0x14>
					if (spi_is_ready_to_read(module)) {
    62ee:	2404      	movs	r4, #4
			while (flush_length) {
    62f0:	465b      	mov	r3, fp
    62f2:	465d      	mov	r5, fp
    62f4:	2b00      	cmp	r3, #0
    62f6:	d119      	bne.n	632c <spi_write_buffer_wait+0x1c8>
    62f8:	e73e      	b.n	6178 <spi_write_buffer_wait+0x14>
	SercomSpi *const spi_module = &(module->hw->SPI);
    62fa:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    62fc:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    62fe:	7e0b      	ldrb	r3, [r1, #24]
    6300:	4213      	tst	r3, r2
    6302:	d0fc      	beq.n	62fe <spi_write_buffer_wait+0x19a>
	return STATUS_OK;
    6304:	2300      	movs	r3, #0
    6306:	e737      	b.n	6178 <spi_write_buffer_wait+0x14>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    6308:	7e0b      	ldrb	r3, [r1, #24]
				if (!spi_is_ready_to_read(module)) {
    630a:	4223      	tst	r3, r4
    630c:	d022      	beq.n	6354 <spi_write_buffer_wait+0x1f0>
    630e:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    6310:	4223      	tst	r3, r4
    6312:	d007      	beq.n	6324 <spi_write_buffer_wait+0x1c0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    6314:	8b4b      	ldrh	r3, [r1, #26]
    6316:	4223      	tst	r3, r4
    6318:	d000      	beq.n	631c <spi_write_buffer_wait+0x1b8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    631a:	834c      	strh	r4, [r1, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    631c:	7983      	ldrb	r3, [r0, #6]
    631e:	2b01      	cmp	r3, #1
    6320:	d010      	beq.n	6344 <spi_write_buffer_wait+0x1e0>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    6322:	6a8b      	ldr	r3, [r1, #40]	; 0x28
				flush_length--;
    6324:	3d01      	subs	r5, #1
    6326:	b2ad      	uxth	r5, r5
			while (flush_length) {
    6328:	2d00      	cmp	r5, #0
    632a:	d015      	beq.n	6358 <spi_write_buffer_wait+0x1f4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    632c:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    632e:	7e0b      	ldrb	r3, [r1, #24]
					if (spi_is_ready_to_read(module)) {
    6330:	4223      	tst	r3, r4
    6332:	d1e9      	bne.n	6308 <spi_write_buffer_wait+0x1a4>
    6334:	4b0a      	ldr	r3, [pc, #40]	; (6360 <spi_write_buffer_wait+0x1fc>)
    6336:	7e0a      	ldrb	r2, [r1, #24]
    6338:	4222      	tst	r2, r4
    633a:	d1e5      	bne.n	6308 <spi_write_buffer_wait+0x1a4>
    633c:	3b01      	subs	r3, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    633e:	2b00      	cmp	r3, #0
    6340:	d1f9      	bne.n	6336 <spi_write_buffer_wait+0x1d2>
    6342:	e7e1      	b.n	6308 <spi_write_buffer_wait+0x1a4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    6344:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    6346:	e7ed      	b.n	6324 <spi_write_buffer_wait+0x1c0>
				return STATUS_ERR_TIMEOUT;
    6348:	2312      	movs	r3, #18
    634a:	e715      	b.n	6178 <spi_write_buffer_wait+0x14>
					return STATUS_ERR_TIMEOUT;
    634c:	2312      	movs	r3, #18
    634e:	e713      	b.n	6178 <spi_write_buffer_wait+0x14>
	return STATUS_OK;
    6350:	2300      	movs	r3, #0
    6352:	e711      	b.n	6178 <spi_write_buffer_wait+0x14>
					return STATUS_ERR_TIMEOUT;
    6354:	2312      	movs	r3, #18
    6356:	e70f      	b.n	6178 <spi_write_buffer_wait+0x14>
	return STATUS_OK;
    6358:	2300      	movs	r3, #0
    635a:	e70d      	b.n	6178 <spi_write_buffer_wait+0x14>
    635c:	0000ffff 	.word	0x0000ffff
    6360:	00002710 	.word	0x00002710
    6364:	00002711 	.word	0x00002711

00006368 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    6368:	b5f0      	push	{r4, r5, r6, r7, lr}
    636a:	46de      	mov	lr, fp
    636c:	4657      	mov	r7, sl
    636e:	464e      	mov	r6, r9
    6370:	4645      	mov	r5, r8
    6372:	b5e0      	push	{r5, r6, r7, lr}
    6374:	b091      	sub	sp, #68	; 0x44
    6376:	0005      	movs	r5, r0
    6378:	000c      	movs	r4, r1
    637a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    637c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    637e:	0008      	movs	r0, r1
    6380:	4bc6      	ldr	r3, [pc, #792]	; (669c <usart_init+0x334>)
    6382:	4798      	blx	r3
    6384:	0002      	movs	r2, r0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
    6386:	2805      	cmp	r0, #5
    6388:	d00d      	beq.n	63a6 <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    638a:	0007      	movs	r7, r0
    638c:	3712      	adds	r7, #18
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    638e:	0003      	movs	r3, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    6390:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    6392:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    6394:	07c9      	lsls	r1, r1, #31
    6396:	d509      	bpl.n	63ac <usart_init+0x44>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    6398:	b011      	add	sp, #68	; 0x44
    639a:	bc3c      	pop	{r2, r3, r4, r5}
    639c:	4690      	mov	r8, r2
    639e:	4699      	mov	r9, r3
    63a0:	46a2      	mov	sl, r4
    63a2:	46ab      	mov	fp, r5
    63a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    63a6:	2718      	movs	r7, #24
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    63a8:	2301      	movs	r3, #1
    63aa:	e7f1      	b.n	6390 <usart_init+0x28>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    63ac:	6821      	ldr	r1, [r4, #0]
		return STATUS_ERR_DENIED;
    63ae:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    63b0:	0789      	lsls	r1, r1, #30
    63b2:	d4f1      	bmi.n	6398 <usart_init+0x30>
	if (sercom_index == 5) {
    63b4:	2a05      	cmp	r2, #5
    63b6:	d049      	beq.n	644c <usart_init+0xe4>
			MCLK->APBCMASK.reg |= mask;
    63b8:	49b9      	ldr	r1, [pc, #740]	; (66a0 <usart_init+0x338>)
    63ba:	69c8      	ldr	r0, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
    63bc:	2201      	movs	r2, #1
    63be:	409a      	lsls	r2, r3
    63c0:	0013      	movs	r3, r2
    63c2:	4303      	orrs	r3, r0
    63c4:	61cb      	str	r3, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    63c6:	a90f      	add	r1, sp, #60	; 0x3c
    63c8:	232d      	movs	r3, #45	; 0x2d
    63ca:	4698      	mov	r8, r3
    63cc:	5cf3      	ldrb	r3, [r6, r3]
    63ce:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    63d0:	b2ff      	uxtb	r7, r7
    63d2:	0038      	movs	r0, r7
    63d4:	4bb3      	ldr	r3, [pc, #716]	; (66a4 <usart_init+0x33c>)
    63d6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    63d8:	0038      	movs	r0, r7
    63da:	4bb3      	ldr	r3, [pc, #716]	; (66a8 <usart_init+0x340>)
    63dc:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    63de:	4643      	mov	r3, r8
    63e0:	5cf0      	ldrb	r0, [r6, r3]
    63e2:	2100      	movs	r1, #0
    63e4:	4bb1      	ldr	r3, [pc, #708]	; (66ac <usart_init+0x344>)
    63e6:	4798      	blx	r3
	module->character_size = config->character_size;
    63e8:	7af3      	ldrb	r3, [r6, #11]
    63ea:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    63ec:	2324      	movs	r3, #36	; 0x24
    63ee:	5cf3      	ldrb	r3, [r6, r3]
    63f0:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    63f2:	2325      	movs	r3, #37	; 0x25
    63f4:	5cf3      	ldrb	r3, [r6, r3]
    63f6:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    63f8:	7ef3      	ldrb	r3, [r6, #27]
    63fa:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    63fc:	7f33      	ldrb	r3, [r6, #28]
    63fe:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    6400:	682b      	ldr	r3, [r5, #0]
    6402:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6404:	0018      	movs	r0, r3
    6406:	4ba5      	ldr	r3, [pc, #660]	; (669c <usart_init+0x334>)
    6408:	4798      	blx	r3
	if (sercom_index == 5) {
    640a:	2805      	cmp	r0, #5
    640c:	d026      	beq.n	645c <usart_init+0xf4>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    640e:	3012      	adds	r0, #18
	uint16_t baud  = 0;
    6410:	2200      	movs	r2, #0
    6412:	230e      	movs	r3, #14
    6414:	a906      	add	r1, sp, #24
    6416:	468c      	mov	ip, r1
    6418:	4463      	add	r3, ip
    641a:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    641c:	8a32      	ldrh	r2, [r6, #16]
    641e:	9202      	str	r2, [sp, #8]
    6420:	2380      	movs	r3, #128	; 0x80
    6422:	01db      	lsls	r3, r3, #7
    6424:	429a      	cmp	r2, r3
    6426:	d100      	bne.n	642a <usart_init+0xc2>
    6428:	e0ab      	b.n	6582 <usart_init+0x21a>
    642a:	d919      	bls.n	6460 <usart_init+0xf8>
    642c:	23c0      	movs	r3, #192	; 0xc0
    642e:	01db      	lsls	r3, r3, #7
    6430:	9a02      	ldr	r2, [sp, #8]
    6432:	429a      	cmp	r2, r3
    6434:	d100      	bne.n	6438 <usart_init+0xd0>
    6436:	e09f      	b.n	6578 <usart_init+0x210>
    6438:	2380      	movs	r3, #128	; 0x80
    643a:	021b      	lsls	r3, r3, #8
    643c:	429a      	cmp	r2, r3
    643e:	d000      	beq.n	6442 <usart_init+0xda>
    6440:	e127      	b.n	6692 <usart_init+0x32a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    6442:	2303      	movs	r3, #3
    6444:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    6446:	2300      	movs	r3, #0
    6448:	9307      	str	r3, [sp, #28]
    644a:	e012      	b.n	6472 <usart_init+0x10a>
			MCLK->APBDMASK.reg |= mask;
    644c:	4994      	ldr	r1, [pc, #592]	; (66a0 <usart_init+0x338>)
    644e:	6a08      	ldr	r0, [r1, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    6450:	3a04      	subs	r2, #4
    6452:	409a      	lsls	r2, r3
    6454:	0013      	movs	r3, r2
    6456:	4303      	orrs	r3, r0
    6458:	620b      	str	r3, [r1, #32]
    645a:	e7b4      	b.n	63c6 <usart_init+0x5e>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    645c:	2018      	movs	r0, #24
    645e:	e7d7      	b.n	6410 <usart_init+0xa8>
	switch (config->sample_rate) {
    6460:	2380      	movs	r3, #128	; 0x80
    6462:	019b      	lsls	r3, r3, #6
    6464:	429a      	cmp	r2, r3
    6466:	d000      	beq.n	646a <usart_init+0x102>
    6468:	e113      	b.n	6692 <usart_init+0x32a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    646a:	2310      	movs	r3, #16
    646c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    646e:	3b0f      	subs	r3, #15
    6470:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    6472:	6833      	ldr	r3, [r6, #0]
    6474:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    6476:	68f3      	ldr	r3, [r6, #12]
    6478:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    647a:	6973      	ldr	r3, [r6, #20]
    647c:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    647e:	7e33      	ldrb	r3, [r6, #24]
    6480:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    6482:	2326      	movs	r3, #38	; 0x26
    6484:	5cf3      	ldrb	r3, [r6, r3]
    6486:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    6488:	6873      	ldr	r3, [r6, #4]
    648a:	4699      	mov	r9, r3
	switch (transfer_mode)
    648c:	2b00      	cmp	r3, #0
    648e:	d100      	bne.n	6492 <usart_init+0x12a>
    6490:	e09f      	b.n	65d2 <usart_init+0x26a>
    6492:	2380      	movs	r3, #128	; 0x80
    6494:	055b      	lsls	r3, r3, #21
    6496:	4599      	cmp	r9, r3
    6498:	d104      	bne.n	64a4 <usart_init+0x13c>
			if (!config->use_external_clock) {
    649a:	2327      	movs	r3, #39	; 0x27
    649c:	5cf3      	ldrb	r3, [r6, r3]
    649e:	2b00      	cmp	r3, #0
    64a0:	d100      	bne.n	64a4 <usart_init+0x13c>
    64a2:	e084      	b.n	65ae <usart_init+0x246>
	if(config->encoding_format_enable) {
    64a4:	7e73      	ldrb	r3, [r6, #25]
    64a6:	2b00      	cmp	r3, #0
    64a8:	d002      	beq.n	64b0 <usart_init+0x148>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    64aa:	7eb3      	ldrb	r3, [r6, #26]
    64ac:	4642      	mov	r2, r8
    64ae:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    64b0:	682a      	ldr	r2, [r5, #0]
    64b2:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    64b4:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    64b6:	2b00      	cmp	r3, #0
    64b8:	d1fc      	bne.n	64b4 <usart_init+0x14c>
	usart_hw->BAUD.reg = baud;
    64ba:	330e      	adds	r3, #14
    64bc:	aa06      	add	r2, sp, #24
    64be:	4694      	mov	ip, r2
    64c0:	4463      	add	r3, ip
    64c2:	881b      	ldrh	r3, [r3, #0]
    64c4:	4642      	mov	r2, r8
    64c6:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    64c8:	9b05      	ldr	r3, [sp, #20]
    64ca:	9a03      	ldr	r2, [sp, #12]
    64cc:	4313      	orrs	r3, r2
    64ce:	9a04      	ldr	r2, [sp, #16]
    64d0:	4313      	orrs	r3, r2
    64d2:	464a      	mov	r2, r9
    64d4:	4313      	orrs	r3, r2
    64d6:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    64d8:	465b      	mov	r3, fp
    64da:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    64dc:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    64de:	4653      	mov	r3, sl
    64e0:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    64e2:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    64e4:	2327      	movs	r3, #39	; 0x27
    64e6:	5cf3      	ldrb	r3, [r6, r3]
    64e8:	2b00      	cmp	r3, #0
    64ea:	d101      	bne.n	64f0 <usart_init+0x188>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    64ec:	3304      	adds	r3, #4
    64ee:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    64f0:	7e73      	ldrb	r3, [r6, #25]
    64f2:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    64f4:	7f32      	ldrb	r2, [r6, #28]
    64f6:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    64f8:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    64fa:	7f72      	ldrb	r2, [r6, #29]
    64fc:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    64fe:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    6500:	2224      	movs	r2, #36	; 0x24
    6502:	5cb2      	ldrb	r2, [r6, r2]
    6504:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    6506:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    6508:	2225      	movs	r2, #37	; 0x25
    650a:	5cb2      	ldrb	r2, [r6, r2]
    650c:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    650e:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    6510:	7ab1      	ldrb	r1, [r6, #10]
    6512:	7af2      	ldrb	r2, [r6, #11]
    6514:	4311      	orrs	r1, r2
    6516:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    6518:	8933      	ldrh	r3, [r6, #8]
    651a:	2bff      	cmp	r3, #255	; 0xff
    651c:	d07d      	beq.n	661a <usart_init+0x2b2>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    651e:	2280      	movs	r2, #128	; 0x80
    6520:	0452      	lsls	r2, r2, #17
    6522:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    6524:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    6526:	232c      	movs	r3, #44	; 0x2c
    6528:	5cf3      	ldrb	r3, [r6, r3]
    652a:	2b00      	cmp	r3, #0
    652c:	d103      	bne.n	6536 <usart_init+0x1ce>
    652e:	4b60      	ldr	r3, [pc, #384]	; (66b0 <usart_init+0x348>)
    6530:	789b      	ldrb	r3, [r3, #2]
    6532:	079b      	lsls	r3, r3, #30
    6534:	d501      	bpl.n	653a <usart_init+0x1d2>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    6536:	2380      	movs	r3, #128	; 0x80
    6538:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    653a:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    653c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    653e:	2b00      	cmp	r3, #0
    6540:	d1fc      	bne.n	653c <usart_init+0x1d4>
	usart_hw->CTRLB.reg = ctrlb;
    6542:	4643      	mov	r3, r8
    6544:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    6546:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    6548:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    654a:	2b00      	cmp	r3, #0
    654c:	d1fc      	bne.n	6548 <usart_init+0x1e0>
	usart_hw->CTRLA.reg = ctrla;
    654e:	4643      	mov	r3, r8
    6550:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6552:	ab0e      	add	r3, sp, #56	; 0x38
    6554:	2280      	movs	r2, #128	; 0x80
    6556:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6558:	2200      	movs	r2, #0
    655a:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    655c:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    655e:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    6560:	6b33      	ldr	r3, [r6, #48]	; 0x30
    6562:	930a      	str	r3, [sp, #40]	; 0x28
    6564:	6b73      	ldr	r3, [r6, #52]	; 0x34
    6566:	930b      	str	r3, [sp, #44]	; 0x2c
    6568:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    656a:	930c      	str	r3, [sp, #48]	; 0x30
    656c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    656e:	9302      	str	r3, [sp, #8]
    6570:	930d      	str	r3, [sp, #52]	; 0x34
    6572:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    6574:	ae0a      	add	r6, sp, #40	; 0x28
    6576:	e05e      	b.n	6636 <usart_init+0x2ce>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    6578:	2308      	movs	r3, #8
    657a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    657c:	3b07      	subs	r3, #7
    657e:	9307      	str	r3, [sp, #28]
    6580:	e777      	b.n	6472 <usart_init+0x10a>
	ctrla = (uint32_t)config->data_order |
    6582:	6833      	ldr	r3, [r6, #0]
    6584:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    6586:	68f3      	ldr	r3, [r6, #12]
    6588:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    658a:	6973      	ldr	r3, [r6, #20]
    658c:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    658e:	7e33      	ldrb	r3, [r6, #24]
    6590:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    6592:	2326      	movs	r3, #38	; 0x26
    6594:	5cf3      	ldrb	r3, [r6, r3]
    6596:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    6598:	6873      	ldr	r3, [r6, #4]
    659a:	4699      	mov	r9, r3
	switch (transfer_mode)
    659c:	2b00      	cmp	r3, #0
    659e:	d014      	beq.n	65ca <usart_init+0x262>
    65a0:	2380      	movs	r3, #128	; 0x80
    65a2:	055b      	lsls	r3, r3, #21
    65a4:	4599      	cmp	r9, r3
    65a6:	d100      	bne.n	65aa <usart_init+0x242>
    65a8:	e777      	b.n	649a <usart_init+0x132>
	enum status_code status_code = STATUS_OK;
    65aa:	2000      	movs	r0, #0
    65ac:	e020      	b.n	65f0 <usart_init+0x288>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    65ae:	6a33      	ldr	r3, [r6, #32]
    65b0:	001f      	movs	r7, r3
    65b2:	b2c0      	uxtb	r0, r0
    65b4:	4b3f      	ldr	r3, [pc, #252]	; (66b4 <usart_init+0x34c>)
    65b6:	4798      	blx	r3
    65b8:	0001      	movs	r1, r0
    65ba:	220e      	movs	r2, #14
    65bc:	ab06      	add	r3, sp, #24
    65be:	469c      	mov	ip, r3
    65c0:	4462      	add	r2, ip
    65c2:	0038      	movs	r0, r7
    65c4:	4b3c      	ldr	r3, [pc, #240]	; (66b8 <usart_init+0x350>)
    65c6:	4798      	blx	r3
    65c8:	e012      	b.n	65f0 <usart_init+0x288>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    65ca:	2308      	movs	r3, #8
    65cc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    65ce:	2300      	movs	r3, #0
    65d0:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    65d2:	2327      	movs	r3, #39	; 0x27
    65d4:	5cf3      	ldrb	r3, [r6, r3]
    65d6:	2b00      	cmp	r3, #0
    65d8:	d00e      	beq.n	65f8 <usart_init+0x290>
				status_code =
    65da:	9b06      	ldr	r3, [sp, #24]
    65dc:	9300      	str	r3, [sp, #0]
    65de:	9b07      	ldr	r3, [sp, #28]
    65e0:	220e      	movs	r2, #14
    65e2:	a906      	add	r1, sp, #24
    65e4:	468c      	mov	ip, r1
    65e6:	4462      	add	r2, ip
    65e8:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    65ea:	6a30      	ldr	r0, [r6, #32]
    65ec:	4f33      	ldr	r7, [pc, #204]	; (66bc <usart_init+0x354>)
    65ee:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    65f0:	2800      	cmp	r0, #0
    65f2:	d000      	beq.n	65f6 <usart_init+0x28e>
    65f4:	e6d0      	b.n	6398 <usart_init+0x30>
    65f6:	e755      	b.n	64a4 <usart_init+0x13c>
						_sercom_get_async_baud_val(config->baudrate,
    65f8:	6a33      	ldr	r3, [r6, #32]
    65fa:	001f      	movs	r7, r3
    65fc:	b2c0      	uxtb	r0, r0
    65fe:	4b2d      	ldr	r3, [pc, #180]	; (66b4 <usart_init+0x34c>)
    6600:	4798      	blx	r3
    6602:	0001      	movs	r1, r0
				status_code =
    6604:	9b06      	ldr	r3, [sp, #24]
    6606:	9300      	str	r3, [sp, #0]
    6608:	9b07      	ldr	r3, [sp, #28]
    660a:	220e      	movs	r2, #14
    660c:	a806      	add	r0, sp, #24
    660e:	4684      	mov	ip, r0
    6610:	4462      	add	r2, ip
    6612:	0038      	movs	r0, r7
    6614:	4f29      	ldr	r7, [pc, #164]	; (66bc <usart_init+0x354>)
    6616:	47b8      	blx	r7
    6618:	e7ea      	b.n	65f0 <usart_init+0x288>
		if(config->lin_slave_enable) {
    661a:	7ef3      	ldrb	r3, [r6, #27]
    661c:	2b00      	cmp	r3, #0
    661e:	d082      	beq.n	6526 <usart_init+0x1be>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    6620:	2380      	movs	r3, #128	; 0x80
    6622:	04db      	lsls	r3, r3, #19
    6624:	431f      	orrs	r7, r3
    6626:	e77e      	b.n	6526 <usart_init+0x1be>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    6628:	0020      	movs	r0, r4
    662a:	4b25      	ldr	r3, [pc, #148]	; (66c0 <usart_init+0x358>)
    662c:	4798      	blx	r3
    662e:	e007      	b.n	6640 <usart_init+0x2d8>
    6630:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    6632:	2f04      	cmp	r7, #4
    6634:	d00d      	beq.n	6652 <usart_init+0x2ea>
    6636:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    6638:	00bb      	lsls	r3, r7, #2
    663a:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    663c:	2800      	cmp	r0, #0
    663e:	d0f3      	beq.n	6628 <usart_init+0x2c0>
		if (current_pinmux != PINMUX_UNUSED) {
    6640:	1c43      	adds	r3, r0, #1
    6642:	d0f5      	beq.n	6630 <usart_init+0x2c8>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    6644:	a90e      	add	r1, sp, #56	; 0x38
    6646:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    6648:	0c00      	lsrs	r0, r0, #16
    664a:	b2c0      	uxtb	r0, r0
    664c:	4b1d      	ldr	r3, [pc, #116]	; (66c4 <usart_init+0x35c>)
    664e:	4798      	blx	r3
    6650:	e7ee      	b.n	6630 <usart_init+0x2c8>
		module->callback[i]            = NULL;
    6652:	2300      	movs	r3, #0
    6654:	60eb      	str	r3, [r5, #12]
    6656:	612b      	str	r3, [r5, #16]
    6658:	616b      	str	r3, [r5, #20]
    665a:	61ab      	str	r3, [r5, #24]
    665c:	61eb      	str	r3, [r5, #28]
    665e:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    6660:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    6662:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    6664:	2200      	movs	r2, #0
    6666:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    6668:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    666a:	3330      	adds	r3, #48	; 0x30
    666c:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    666e:	3301      	adds	r3, #1
    6670:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    6672:	3301      	adds	r3, #1
    6674:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    6676:	3301      	adds	r3, #1
    6678:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    667a:	6828      	ldr	r0, [r5, #0]
    667c:	4b07      	ldr	r3, [pc, #28]	; (669c <usart_init+0x334>)
    667e:	4798      	blx	r3
    6680:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    6682:	4911      	ldr	r1, [pc, #68]	; (66c8 <usart_init+0x360>)
    6684:	4b11      	ldr	r3, [pc, #68]	; (66cc <usart_init+0x364>)
    6686:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    6688:	00a4      	lsls	r4, r4, #2
    668a:	4b11      	ldr	r3, [pc, #68]	; (66d0 <usart_init+0x368>)
    668c:	50e5      	str	r5, [r4, r3]
	return status_code;
    668e:	2000      	movs	r0, #0
    6690:	e682      	b.n	6398 <usart_init+0x30>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    6692:	2310      	movs	r3, #16
    6694:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    6696:	2300      	movs	r3, #0
    6698:	9307      	str	r3, [sp, #28]
    669a:	e6ea      	b.n	6472 <usart_init+0x10a>
    669c:	00005c1d 	.word	0x00005c1d
    66a0:	40000400 	.word	0x40000400
    66a4:	00007091 	.word	0x00007091
    66a8:	00007021 	.word	0x00007021
    66ac:	00005a75 	.word	0x00005a75
    66b0:	41002000 	.word	0x41002000
    66b4:	000070b5 	.word	0x000070b5
    66b8:	000059b7 	.word	0x000059b7
    66bc:	000059e1 	.word	0x000059e1
    66c0:	00005ac1 	.word	0x00005ac1
    66c4:	0000718d 	.word	0x0000718d
    66c8:	000068c9 	.word	0x000068c9
    66cc:	00005c59 	.word	0x00005c59
    66d0:	20002128 	.word	0x20002128

000066d4 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    66d4:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    66d6:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    66d8:	2a00      	cmp	r2, #0
    66da:	d101      	bne.n	66e0 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    66dc:	0018      	movs	r0, r3
    66de:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    66e0:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    66e2:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    66e4:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    66e6:	2a00      	cmp	r2, #0
    66e8:	d1f8      	bne.n	66dc <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    66ea:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    66ec:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    66ee:	2a00      	cmp	r2, #0
    66f0:	d1fc      	bne.n	66ec <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    66f2:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    66f4:	2102      	movs	r1, #2
    66f6:	7e1a      	ldrb	r2, [r3, #24]
    66f8:	420a      	tst	r2, r1
    66fa:	d0fc      	beq.n	66f6 <usart_write_wait+0x22>
	return STATUS_OK;
    66fc:	2300      	movs	r3, #0
    66fe:	e7ed      	b.n	66dc <usart_write_wait+0x8>

00006700 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    6700:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    6702:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    6704:	2a00      	cmp	r2, #0
    6706:	d101      	bne.n	670c <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    6708:	0018      	movs	r0, r3
    670a:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    670c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    670e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    6710:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    6712:	2a00      	cmp	r2, #0
    6714:	d1f8      	bne.n	6708 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    6716:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    6718:	7e10      	ldrb	r0, [r2, #24]
    671a:	0740      	lsls	r0, r0, #29
    671c:	d5f4      	bpl.n	6708 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    671e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    6720:	2b00      	cmp	r3, #0
    6722:	d1fc      	bne.n	671e <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    6724:	8b53      	ldrh	r3, [r2, #26]
    6726:	b2db      	uxtb	r3, r3
	if (error_code) {
    6728:	0698      	lsls	r0, r3, #26
    672a:	d01d      	beq.n	6768 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    672c:	0798      	lsls	r0, r3, #30
    672e:	d503      	bpl.n	6738 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    6730:	2302      	movs	r3, #2
    6732:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    6734:	3318      	adds	r3, #24
    6736:	e7e7      	b.n	6708 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    6738:	0758      	lsls	r0, r3, #29
    673a:	d503      	bpl.n	6744 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    673c:	2304      	movs	r3, #4
    673e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    6740:	331a      	adds	r3, #26
    6742:	e7e1      	b.n	6708 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    6744:	07d8      	lsls	r0, r3, #31
    6746:	d503      	bpl.n	6750 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    6748:	2301      	movs	r3, #1
    674a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    674c:	3312      	adds	r3, #18
    674e:	e7db      	b.n	6708 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    6750:	06d8      	lsls	r0, r3, #27
    6752:	d503      	bpl.n	675c <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    6754:	2310      	movs	r3, #16
    6756:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    6758:	3332      	adds	r3, #50	; 0x32
    675a:	e7d5      	b.n	6708 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    675c:	069b      	lsls	r3, r3, #26
    675e:	d503      	bpl.n	6768 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    6760:	2320      	movs	r3, #32
    6762:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    6764:	3321      	adds	r3, #33	; 0x21
    6766:	e7cf      	b.n	6708 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    6768:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    676a:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    676c:	2300      	movs	r3, #0
    676e:	e7cb      	b.n	6708 <usart_read_wait+0x8>

00006770 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    6770:	b5f0      	push	{r4, r5, r6, r7, lr}
    6772:	46ce      	mov	lr, r9
    6774:	4647      	mov	r7, r8
    6776:	b580      	push	{r7, lr}
    6778:	b083      	sub	sp, #12
    677a:	0005      	movs	r5, r0
    677c:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    677e:	2017      	movs	r0, #23
	if (length == 0) {
    6780:	2a00      	cmp	r2, #0
    6782:	d104      	bne.n	678e <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    6784:	b003      	add	sp, #12
    6786:	bc0c      	pop	{r2, r3}
    6788:	4690      	mov	r8, r2
    678a:	4699      	mov	r9, r3
    678c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    678e:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    6790:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    6792:	2b00      	cmp	r3, #0
    6794:	d0f6      	beq.n	6784 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
    6796:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    6798:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    679a:	2b00      	cmp	r3, #0
    679c:	d1fc      	bne.n	6798 <usart_write_buffer_wait+0x28>
	while (length--) {
    679e:	3a01      	subs	r2, #1
    67a0:	b293      	uxth	r3, r2
    67a2:	4699      	mov	r9, r3
    67a4:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    67a6:	2701      	movs	r7, #1
	while (length--) {
    67a8:	4b1f      	ldr	r3, [pc, #124]	; (6828 <usart_write_buffer_wait+0xb8>)
    67aa:	4698      	mov	r8, r3
    67ac:	e011      	b.n	67d2 <usart_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
    67ae:	1c73      	adds	r3, r6, #1
    67b0:	b29b      	uxth	r3, r3
    67b2:	9a01      	ldr	r2, [sp, #4]
    67b4:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    67b6:	796a      	ldrb	r2, [r5, #5]
    67b8:	2a01      	cmp	r2, #1
    67ba:	d017      	beq.n	67ec <usart_write_buffer_wait+0x7c>
		uint16_t data_to_send = tx_data[tx_pos++];
    67bc:	b289      	uxth	r1, r1
    67be:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
    67c0:	0028      	movs	r0, r5
    67c2:	4b1a      	ldr	r3, [pc, #104]	; (682c <usart_write_buffer_wait+0xbc>)
    67c4:	4798      	blx	r3
	while (length--) {
    67c6:	464b      	mov	r3, r9
    67c8:	3b01      	subs	r3, #1
    67ca:	b29b      	uxth	r3, r3
    67cc:	4699      	mov	r9, r3
    67ce:	4543      	cmp	r3, r8
    67d0:	d013      	beq.n	67fa <usart_write_buffer_wait+0x8a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    67d2:	7e23      	ldrb	r3, [r4, #24]
    67d4:	423b      	tst	r3, r7
    67d6:	d1ea      	bne.n	67ae <usart_write_buffer_wait+0x3e>
    67d8:	4b13      	ldr	r3, [pc, #76]	; (6828 <usart_write_buffer_wait+0xb8>)
    67da:	7e22      	ldrb	r2, [r4, #24]
    67dc:	423a      	tst	r2, r7
    67de:	d1e6      	bne.n	67ae <usart_write_buffer_wait+0x3e>
			} else if (i == USART_TIMEOUT) {
    67e0:	2b01      	cmp	r3, #1
    67e2:	d019      	beq.n	6818 <usart_write_buffer_wait+0xa8>
    67e4:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    67e6:	2b00      	cmp	r3, #0
    67e8:	d1f7      	bne.n	67da <usart_write_buffer_wait+0x6a>
    67ea:	e7e0      	b.n	67ae <usart_write_buffer_wait+0x3e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    67ec:	3602      	adds	r6, #2
    67ee:	b2b6      	uxth	r6, r6
    67f0:	9a01      	ldr	r2, [sp, #4]
    67f2:	5cd3      	ldrb	r3, [r2, r3]
    67f4:	021b      	lsls	r3, r3, #8
    67f6:	4319      	orrs	r1, r3
    67f8:	e7e2      	b.n	67c0 <usart_write_buffer_wait+0x50>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    67fa:	7e23      	ldrb	r3, [r4, #24]
    67fc:	079b      	lsls	r3, r3, #30
    67fe:	d40d      	bmi.n	681c <usart_write_buffer_wait+0xac>
    6800:	4b09      	ldr	r3, [pc, #36]	; (6828 <usart_write_buffer_wait+0xb8>)
    6802:	2102      	movs	r1, #2
    6804:	7e22      	ldrb	r2, [r4, #24]
    6806:	420a      	tst	r2, r1
    6808:	d10a      	bne.n	6820 <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
    680a:	2b01      	cmp	r3, #1
    680c:	d00a      	beq.n	6824 <usart_write_buffer_wait+0xb4>
    680e:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    6810:	2b00      	cmp	r3, #0
    6812:	d1f7      	bne.n	6804 <usart_write_buffer_wait+0x94>
	return STATUS_OK;
    6814:	2000      	movs	r0, #0
    6816:	e7b5      	b.n	6784 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    6818:	2012      	movs	r0, #18
    681a:	e7b3      	b.n	6784 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    681c:	2000      	movs	r0, #0
    681e:	e7b1      	b.n	6784 <usart_write_buffer_wait+0x14>
    6820:	2000      	movs	r0, #0
    6822:	e7af      	b.n	6784 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    6824:	2012      	movs	r0, #18
    6826:	e7ad      	b.n	6784 <usart_write_buffer_wait+0x14>
    6828:	0000ffff 	.word	0x0000ffff
    682c:	000066d5 	.word	0x000066d5

00006830 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    6830:	b5f0      	push	{r4, r5, r6, r7, lr}
    6832:	46d6      	mov	lr, sl
    6834:	b500      	push	{lr}
    6836:	b084      	sub	sp, #16
    6838:	0004      	movs	r4, r0
    683a:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    683c:	2017      	movs	r0, #23
	if (length == 0) {
    683e:	2a00      	cmp	r2, #0
    6840:	d103      	bne.n	684a <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    6842:	b004      	add	sp, #16
    6844:	bc04      	pop	{r2}
    6846:	4692      	mov	sl, r2
    6848:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    684a:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    684c:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    684e:	2b00      	cmp	r3, #0
    6850:	d0f7      	beq.n	6842 <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    6852:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    6854:	3a01      	subs	r2, #1
    6856:	b293      	uxth	r3, r2
    6858:	469a      	mov	sl, r3
    685a:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    685c:	2704      	movs	r7, #4
    685e:	e019      	b.n	6894 <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    6860:	2300      	movs	r3, #0
    6862:	aa02      	add	r2, sp, #8
    6864:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    6866:	1d91      	adds	r1, r2, #6
    6868:	0020      	movs	r0, r4
    686a:	4b15      	ldr	r3, [pc, #84]	; (68c0 <usart_read_buffer_wait+0x90>)
    686c:	4798      	blx	r3
		if (retval != STATUS_OK) {
    686e:	2800      	cmp	r0, #0
    6870:	d1e7      	bne.n	6842 <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    6872:	1c69      	adds	r1, r5, #1
    6874:	b289      	uxth	r1, r1
    6876:	ab02      	add	r3, sp, #8
    6878:	88db      	ldrh	r3, [r3, #6]
    687a:	9a01      	ldr	r2, [sp, #4]
    687c:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    687e:	7962      	ldrb	r2, [r4, #5]
    6880:	2a01      	cmp	r2, #1
    6882:	d014      	beq.n	68ae <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    6884:	000d      	movs	r5, r1
	while (length--) {
    6886:	4653      	mov	r3, sl
    6888:	3b01      	subs	r3, #1
    688a:	b29b      	uxth	r3, r3
    688c:	469a      	mov	sl, r3
    688e:	4b0d      	ldr	r3, [pc, #52]	; (68c4 <usart_read_buffer_wait+0x94>)
    6890:	459a      	cmp	sl, r3
    6892:	d0d6      	beq.n	6842 <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    6894:	7e33      	ldrb	r3, [r6, #24]
    6896:	423b      	tst	r3, r7
    6898:	d1e2      	bne.n	6860 <usart_read_buffer_wait+0x30>
    689a:	4b0a      	ldr	r3, [pc, #40]	; (68c4 <usart_read_buffer_wait+0x94>)
    689c:	7e32      	ldrb	r2, [r6, #24]
    689e:	423a      	tst	r2, r7
    68a0:	d1de      	bne.n	6860 <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    68a2:	2b01      	cmp	r3, #1
    68a4:	d009      	beq.n	68ba <usart_read_buffer_wait+0x8a>
    68a6:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    68a8:	2b00      	cmp	r3, #0
    68aa:	d1f7      	bne.n	689c <usart_read_buffer_wait+0x6c>
    68ac:	e7d8      	b.n	6860 <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    68ae:	3502      	adds	r5, #2
    68b0:	b2ad      	uxth	r5, r5
    68b2:	0a1b      	lsrs	r3, r3, #8
    68b4:	9a01      	ldr	r2, [sp, #4]
    68b6:	5453      	strb	r3, [r2, r1]
    68b8:	e7e5      	b.n	6886 <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    68ba:	2012      	movs	r0, #18
    68bc:	e7c1      	b.n	6842 <usart_read_buffer_wait+0x12>
    68be:	46c0      	nop			; (mov r8, r8)
    68c0:	00006701 	.word	0x00006701
    68c4:	0000ffff 	.word	0x0000ffff

000068c8 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    68c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    68ca:	0080      	lsls	r0, r0, #2
    68cc:	4b62      	ldr	r3, [pc, #392]	; (6a58 <_usart_interrupt_handler+0x190>)
    68ce:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    68d0:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    68d2:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    68d4:	2b00      	cmp	r3, #0
    68d6:	d1fc      	bne.n	68d2 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    68d8:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    68da:	7da6      	ldrb	r6, [r4, #22]
    68dc:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    68de:	2330      	movs	r3, #48	; 0x30
    68e0:	5ceb      	ldrb	r3, [r5, r3]
    68e2:	2231      	movs	r2, #49	; 0x31
    68e4:	5caf      	ldrb	r7, [r5, r2]
    68e6:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    68e8:	07f3      	lsls	r3, r6, #31
    68ea:	d522      	bpl.n	6932 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    68ec:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    68ee:	b29b      	uxth	r3, r3
    68f0:	2b00      	cmp	r3, #0
    68f2:	d01c      	beq.n	692e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    68f4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    68f6:	7813      	ldrb	r3, [r2, #0]
    68f8:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    68fa:	1c51      	adds	r1, r2, #1
    68fc:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    68fe:	7969      	ldrb	r1, [r5, #5]
    6900:	2901      	cmp	r1, #1
    6902:	d00e      	beq.n	6922 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    6904:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    6906:	05db      	lsls	r3, r3, #23
    6908:	0ddb      	lsrs	r3, r3, #23
    690a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    690c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    690e:	3b01      	subs	r3, #1
    6910:	b29b      	uxth	r3, r3
    6912:	85eb      	strh	r3, [r5, #46]	; 0x2e
    6914:	2b00      	cmp	r3, #0
    6916:	d10c      	bne.n	6932 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    6918:	3301      	adds	r3, #1
    691a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    691c:	3301      	adds	r3, #1
    691e:	75a3      	strb	r3, [r4, #22]
    6920:	e007      	b.n	6932 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    6922:	7851      	ldrb	r1, [r2, #1]
    6924:	0209      	lsls	r1, r1, #8
    6926:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    6928:	3202      	adds	r2, #2
    692a:	62aa      	str	r2, [r5, #40]	; 0x28
    692c:	e7eb      	b.n	6906 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    692e:	2301      	movs	r3, #1
    6930:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    6932:	07b3      	lsls	r3, r6, #30
    6934:	d506      	bpl.n	6944 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    6936:	2302      	movs	r3, #2
    6938:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    693a:	2200      	movs	r2, #0
    693c:	3331      	adds	r3, #49	; 0x31
    693e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    6940:	07fb      	lsls	r3, r7, #31
    6942:	d41a      	bmi.n	697a <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    6944:	0773      	lsls	r3, r6, #29
    6946:	d565      	bpl.n	6a14 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    6948:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    694a:	b29b      	uxth	r3, r3
    694c:	2b00      	cmp	r3, #0
    694e:	d05f      	beq.n	6a10 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    6950:	8b63      	ldrh	r3, [r4, #26]
    6952:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    6954:	071a      	lsls	r2, r3, #28
    6956:	d414      	bmi.n	6982 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    6958:	223f      	movs	r2, #63	; 0x3f
    695a:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    695c:	2b00      	cmp	r3, #0
    695e:	d034      	beq.n	69ca <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    6960:	079a      	lsls	r2, r3, #30
    6962:	d511      	bpl.n	6988 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    6964:	221a      	movs	r2, #26
    6966:	2332      	movs	r3, #50	; 0x32
    6968:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    696a:	3b30      	subs	r3, #48	; 0x30
    696c:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    696e:	077b      	lsls	r3, r7, #29
    6970:	d550      	bpl.n	6a14 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    6972:	0028      	movs	r0, r5
    6974:	696b      	ldr	r3, [r5, #20]
    6976:	4798      	blx	r3
    6978:	e04c      	b.n	6a14 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    697a:	0028      	movs	r0, r5
    697c:	68eb      	ldr	r3, [r5, #12]
    697e:	4798      	blx	r3
    6980:	e7e0      	b.n	6944 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    6982:	2237      	movs	r2, #55	; 0x37
    6984:	4013      	ands	r3, r2
    6986:	e7e9      	b.n	695c <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    6988:	075a      	lsls	r2, r3, #29
    698a:	d505      	bpl.n	6998 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    698c:	221e      	movs	r2, #30
    698e:	2332      	movs	r3, #50	; 0x32
    6990:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    6992:	3b2e      	subs	r3, #46	; 0x2e
    6994:	8363      	strh	r3, [r4, #26]
    6996:	e7ea      	b.n	696e <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    6998:	07da      	lsls	r2, r3, #31
    699a:	d505      	bpl.n	69a8 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    699c:	2213      	movs	r2, #19
    699e:	2332      	movs	r3, #50	; 0x32
    69a0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    69a2:	3b31      	subs	r3, #49	; 0x31
    69a4:	8363      	strh	r3, [r4, #26]
    69a6:	e7e2      	b.n	696e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    69a8:	06da      	lsls	r2, r3, #27
    69aa:	d505      	bpl.n	69b8 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    69ac:	2242      	movs	r2, #66	; 0x42
    69ae:	2332      	movs	r3, #50	; 0x32
    69b0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    69b2:	3b22      	subs	r3, #34	; 0x22
    69b4:	8363      	strh	r3, [r4, #26]
    69b6:	e7da      	b.n	696e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    69b8:	2220      	movs	r2, #32
    69ba:	421a      	tst	r2, r3
    69bc:	d0d7      	beq.n	696e <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    69be:	3221      	adds	r2, #33	; 0x21
    69c0:	2332      	movs	r3, #50	; 0x32
    69c2:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    69c4:	3b12      	subs	r3, #18
    69c6:	8363      	strh	r3, [r4, #26]
    69c8:	e7d1      	b.n	696e <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    69ca:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    69cc:	05db      	lsls	r3, r3, #23
    69ce:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    69d0:	b2da      	uxtb	r2, r3
    69d2:	6a69      	ldr	r1, [r5, #36]	; 0x24
    69d4:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    69d6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    69d8:	1c51      	adds	r1, r2, #1
    69da:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    69dc:	7969      	ldrb	r1, [r5, #5]
    69de:	2901      	cmp	r1, #1
    69e0:	d010      	beq.n	6a04 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    69e2:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    69e4:	3b01      	subs	r3, #1
    69e6:	b29b      	uxth	r3, r3
    69e8:	85ab      	strh	r3, [r5, #44]	; 0x2c
    69ea:	2b00      	cmp	r3, #0
    69ec:	d112      	bne.n	6a14 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    69ee:	3304      	adds	r3, #4
    69f0:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    69f2:	2200      	movs	r2, #0
    69f4:	332e      	adds	r3, #46	; 0x2e
    69f6:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    69f8:	07bb      	lsls	r3, r7, #30
    69fa:	d50b      	bpl.n	6a14 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    69fc:	0028      	movs	r0, r5
    69fe:	692b      	ldr	r3, [r5, #16]
    6a00:	4798      	blx	r3
    6a02:	e007      	b.n	6a14 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    6a04:	0a1b      	lsrs	r3, r3, #8
    6a06:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    6a08:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    6a0a:	3301      	adds	r3, #1
    6a0c:	626b      	str	r3, [r5, #36]	; 0x24
    6a0e:	e7e8      	b.n	69e2 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    6a10:	2304      	movs	r3, #4
    6a12:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    6a14:	06f3      	lsls	r3, r6, #27
    6a16:	d504      	bpl.n	6a22 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    6a18:	2310      	movs	r3, #16
    6a1a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    6a1c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    6a1e:	06fb      	lsls	r3, r7, #27
    6a20:	d40e      	bmi.n	6a40 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    6a22:	06b3      	lsls	r3, r6, #26
    6a24:	d504      	bpl.n	6a30 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    6a26:	2320      	movs	r3, #32
    6a28:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    6a2a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    6a2c:	073b      	lsls	r3, r7, #28
    6a2e:	d40b      	bmi.n	6a48 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    6a30:	0733      	lsls	r3, r6, #28
    6a32:	d504      	bpl.n	6a3e <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    6a34:	2308      	movs	r3, #8
    6a36:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    6a38:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    6a3a:	06bb      	lsls	r3, r7, #26
    6a3c:	d408      	bmi.n	6a50 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    6a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    6a40:	0028      	movs	r0, r5
    6a42:	69eb      	ldr	r3, [r5, #28]
    6a44:	4798      	blx	r3
    6a46:	e7ec      	b.n	6a22 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    6a48:	0028      	movs	r0, r5
    6a4a:	69ab      	ldr	r3, [r5, #24]
    6a4c:	4798      	blx	r3
    6a4e:	e7ef      	b.n	6a30 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    6a50:	6a2b      	ldr	r3, [r5, #32]
    6a52:	0028      	movs	r0, r5
    6a54:	4798      	blx	r3
}
    6a56:	e7f2      	b.n	6a3e <_usart_interrupt_handler+0x176>
    6a58:	20002128 	.word	0x20002128

00006a5c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    6a5c:	b510      	push	{r4, lr}
	switch (clock_source) {
    6a5e:	2808      	cmp	r0, #8
    6a60:	d803      	bhi.n	6a6a <system_clock_source_get_hz+0xe>
    6a62:	0080      	lsls	r0, r0, #2
    6a64:	4b1c      	ldr	r3, [pc, #112]	; (6ad8 <system_clock_source_get_hz+0x7c>)
    6a66:	581b      	ldr	r3, [r3, r0]
    6a68:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    6a6a:	2000      	movs	r0, #0
    6a6c:	e032      	b.n	6ad4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    6a6e:	4b1b      	ldr	r3, [pc, #108]	; (6adc <system_clock_source_get_hz+0x80>)
    6a70:	6918      	ldr	r0, [r3, #16]
    6a72:	e02f      	b.n	6ad4 <system_clock_source_get_hz+0x78>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    6a74:	4b1a      	ldr	r3, [pc, #104]	; (6ae0 <system_clock_source_get_hz+0x84>)
    6a76:	7d18      	ldrb	r0, [r3, #20]
    6a78:	0700      	lsls	r0, r0, #28
    6a7a:	0f80      	lsrs	r0, r0, #30
    6a7c:	1c43      	adds	r3, r0, #1
    6a7e:	4819      	ldr	r0, [pc, #100]	; (6ae4 <system_clock_source_get_hz+0x88>)
    6a80:	4358      	muls	r0, r3
    6a82:	e027      	b.n	6ad4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    6a84:	4b15      	ldr	r3, [pc, #84]	; (6adc <system_clock_source_get_hz+0x80>)
    6a86:	6958      	ldr	r0, [r3, #20]
    6a88:	e024      	b.n	6ad4 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    6a8a:	4b14      	ldr	r3, [pc, #80]	; (6adc <system_clock_source_get_hz+0x80>)
    6a8c:	681b      	ldr	r3, [r3, #0]
			return 0;
    6a8e:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    6a90:	079b      	lsls	r3, r3, #30
    6a92:	d51f      	bpl.n	6ad4 <system_clock_source_get_hz+0x78>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    6a94:	4912      	ldr	r1, [pc, #72]	; (6ae0 <system_clock_source_get_hz+0x84>)
    6a96:	2280      	movs	r2, #128	; 0x80
    6a98:	0052      	lsls	r2, r2, #1
    6a9a:	68cb      	ldr	r3, [r1, #12]
    6a9c:	4213      	tst	r3, r2
    6a9e:	d0fc      	beq.n	6a9a <system_clock_source_get_hz+0x3e>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    6aa0:	4b0e      	ldr	r3, [pc, #56]	; (6adc <system_clock_source_get_hz+0x80>)
    6aa2:	681b      	ldr	r3, [r3, #0]
    6aa4:	075b      	lsls	r3, r3, #29
    6aa6:	d401      	bmi.n	6aac <system_clock_source_get_hz+0x50>
		return 48000000UL;
    6aa8:	480f      	ldr	r0, [pc, #60]	; (6ae8 <system_clock_source_get_hz+0x8c>)
    6aaa:	e013      	b.n	6ad4 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    6aac:	2000      	movs	r0, #0
    6aae:	4b0f      	ldr	r3, [pc, #60]	; (6aec <system_clock_source_get_hz+0x90>)
    6ab0:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    6ab2:	4b0a      	ldr	r3, [pc, #40]	; (6adc <system_clock_source_get_hz+0x80>)
    6ab4:	689b      	ldr	r3, [r3, #8]
    6ab6:	041b      	lsls	r3, r3, #16
    6ab8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    6aba:	4358      	muls	r0, r3
    6abc:	e00a      	b.n	6ad4 <system_clock_source_get_hz+0x78>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    6abe:	2328      	movs	r3, #40	; 0x28
    6ac0:	4a07      	ldr	r2, [pc, #28]	; (6ae0 <system_clock_source_get_hz+0x84>)
    6ac2:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    6ac4:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    6ac6:	079b      	lsls	r3, r3, #30
    6ac8:	d504      	bpl.n	6ad4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    6aca:	4b04      	ldr	r3, [pc, #16]	; (6adc <system_clock_source_get_hz+0x80>)
    6acc:	68d8      	ldr	r0, [r3, #12]
    6ace:	e001      	b.n	6ad4 <system_clock_source_get_hz+0x78>
		return 32768UL;
    6ad0:	2080      	movs	r0, #128	; 0x80
    6ad2:	0200      	lsls	r0, r0, #8
	}
}
    6ad4:	bd10      	pop	{r4, pc}
    6ad6:	46c0      	nop			; (mov r8, r8)
    6ad8:	00018468 	.word	0x00018468
    6adc:	200002e4 	.word	0x200002e4
    6ae0:	40000c00 	.word	0x40000c00
    6ae4:	003d0900 	.word	0x003d0900
    6ae8:	02dc6c00 	.word	0x02dc6c00
    6aec:	000070b5 	.word	0x000070b5

00006af0 <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
    6af0:	b570      	push	{r4, r5, r6, lr}
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
    6af2:	4c0b      	ldr	r4, [pc, #44]	; (6b20 <system_clock_source_osc16m_set_config+0x30>)
    6af4:	7d23      	ldrb	r3, [r4, #20]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
	temp.bit.ONDEMAND = config->on_demand;
    6af6:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;
    6af8:	7846      	ldrb	r6, [r0, #1]

	OSCCTRL->OSC16MCTRL = temp;
    6afa:	7802      	ldrb	r2, [r0, #0]
    6afc:	2103      	movs	r1, #3
    6afe:	4011      	ands	r1, r2
    6b00:	0089      	lsls	r1, r1, #2
    6b02:	220c      	movs	r2, #12
    6b04:	4393      	bics	r3, r2
    6b06:	430b      	orrs	r3, r1
    6b08:	3a0b      	subs	r2, #11
    6b0a:	4032      	ands	r2, r6
    6b0c:	0192      	lsls	r2, r2, #6
    6b0e:	2140      	movs	r1, #64	; 0x40
    6b10:	438b      	bics	r3, r1
    6b12:	4313      	orrs	r3, r2
    6b14:	01ed      	lsls	r5, r5, #7
    6b16:	227f      	movs	r2, #127	; 0x7f
    6b18:	4013      	ands	r3, r2
    6b1a:	432b      	orrs	r3, r5
    6b1c:	7523      	strb	r3, [r4, #20]
}
    6b1e:	bd70      	pop	{r4, r5, r6, pc}
    6b20:	40000c00 	.word	0x40000c00

00006b24 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    6b24:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b26:	46d6      	mov	lr, sl
    6b28:	464f      	mov	r7, r9
    6b2a:	4646      	mov	r6, r8
    6b2c:	b5c0      	push	{r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    6b2e:	4b20      	ldr	r3, [pc, #128]	; (6bb0 <system_clock_source_xosc32k_set_config+0x8c>)
    6b30:	469a      	mov	sl, r3
    6b32:	695b      	ldr	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    6b34:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    6b36:	7801      	ldrb	r1, [r0, #0]
    6b38:	424c      	negs	r4, r1
    6b3a:	414c      	adcs	r4, r1
    6b3c:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    6b3e:	7881      	ldrb	r1, [r0, #2]
    6b40:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
    6b42:	78c1      	ldrb	r1, [r0, #3]
    6b44:	4688      	mov	r8, r1

	temp.bit.ONDEMAND = config->on_demand;
    6b46:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    6b48:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
    6b4a:	7a84      	ldrb	r4, [r0, #10]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    6b4c:	6840      	ldr	r0, [r0, #4]
    6b4e:	4919      	ldr	r1, [pc, #100]	; (6bb4 <system_clock_source_xosc32k_set_config+0x90>)
    6b50:	6148      	str	r0, [r1, #20]

	OSC32KCTRL->XOSC32K = temp;
    6b52:	2101      	movs	r1, #1
    6b54:	4648      	mov	r0, r9
    6b56:	0080      	lsls	r0, r0, #2
    6b58:	2204      	movs	r2, #4
    6b5a:	4393      	bics	r3, r2
    6b5c:	4303      	orrs	r3, r0
    6b5e:	4640      	mov	r0, r8
    6b60:	4008      	ands	r0, r1
    6b62:	00c0      	lsls	r0, r0, #3
    6b64:	3204      	adds	r2, #4
    6b66:	4393      	bics	r3, r2
    6b68:	4303      	orrs	r3, r0
    6b6a:	4660      	mov	r0, ip
    6b6c:	4008      	ands	r0, r1
    6b6e:	0100      	lsls	r0, r0, #4
    6b70:	3208      	adds	r2, #8
    6b72:	4393      	bics	r3, r2
    6b74:	4303      	orrs	r3, r0
    6b76:	400f      	ands	r7, r1
    6b78:	01bf      	lsls	r7, r7, #6
    6b7a:	2040      	movs	r0, #64	; 0x40
    6b7c:	4383      	bics	r3, r0
    6b7e:	433b      	orrs	r3, r7
    6b80:	400e      	ands	r6, r1
    6b82:	01f6      	lsls	r6, r6, #7
    6b84:	3040      	adds	r0, #64	; 0x40
    6b86:	4383      	bics	r3, r0
    6b88:	4333      	orrs	r3, r6
    6b8a:	3879      	subs	r0, #121	; 0x79
    6b8c:	4005      	ands	r5, r0
    6b8e:	022d      	lsls	r5, r5, #8
    6b90:	4809      	ldr	r0, [pc, #36]	; (6bb8 <system_clock_source_xosc32k_set_config+0x94>)
    6b92:	4003      	ands	r3, r0
    6b94:	432b      	orrs	r3, r5
    6b96:	4021      	ands	r1, r4
    6b98:	0309      	lsls	r1, r1, #12
    6b9a:	4808      	ldr	r0, [pc, #32]	; (6bbc <system_clock_source_xosc32k_set_config+0x98>)
    6b9c:	4003      	ands	r3, r0
    6b9e:	430b      	orrs	r3, r1
    6ba0:	4652      	mov	r2, sl
    6ba2:	6153      	str	r3, [r2, #20]
}
    6ba4:	bc1c      	pop	{r2, r3, r4}
    6ba6:	4690      	mov	r8, r2
    6ba8:	4699      	mov	r9, r3
    6baa:	46a2      	mov	sl, r4
    6bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6bae:	46c0      	nop			; (mov r8, r8)
    6bb0:	40001000 	.word	0x40001000
    6bb4:	200002e4 	.word	0x200002e4
    6bb8:	fffff8ff 	.word	0xfffff8ff
    6bbc:	ffffefff 	.word	0xffffefff

00006bc0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    6bc0:	2808      	cmp	r0, #8
    6bc2:	d803      	bhi.n	6bcc <system_clock_source_enable+0xc>
    6bc4:	0080      	lsls	r0, r0, #2
    6bc6:	4b29      	ldr	r3, [pc, #164]	; (6c6c <system_clock_source_enable+0xac>)
    6bc8:	581b      	ldr	r3, [r3, r0]
    6bca:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    6bcc:	2017      	movs	r0, #23
    6bce:	e04b      	b.n	6c68 <system_clock_source_enable+0xa8>
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    6bd0:	4a27      	ldr	r2, [pc, #156]	; (6c70 <system_clock_source_enable+0xb0>)
    6bd2:	7d13      	ldrb	r3, [r2, #20]
    6bd4:	2102      	movs	r1, #2
    6bd6:	430b      	orrs	r3, r1
    6bd8:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    6bda:	2000      	movs	r0, #0
    6bdc:	e044      	b.n	6c68 <system_clock_source_enable+0xa8>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    6bde:	4a25      	ldr	r2, [pc, #148]	; (6c74 <system_clock_source_enable+0xb4>)
    6be0:	6993      	ldr	r3, [r2, #24]
    6be2:	2102      	movs	r1, #2
    6be4:	430b      	orrs	r3, r1
    6be6:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    6be8:	2000      	movs	r0, #0
		break;
    6bea:	e03d      	b.n	6c68 <system_clock_source_enable+0xa8>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    6bec:	4a20      	ldr	r2, [pc, #128]	; (6c70 <system_clock_source_enable+0xb0>)
    6bee:	8a13      	ldrh	r3, [r2, #16]
    6bf0:	2102      	movs	r1, #2
    6bf2:	430b      	orrs	r3, r1
    6bf4:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    6bf6:	2000      	movs	r0, #0
		break;
    6bf8:	e036      	b.n	6c68 <system_clock_source_enable+0xa8>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    6bfa:	4a1e      	ldr	r2, [pc, #120]	; (6c74 <system_clock_source_enable+0xb4>)
    6bfc:	6953      	ldr	r3, [r2, #20]
    6bfe:	2102      	movs	r1, #2
    6c00:	430b      	orrs	r3, r1
    6c02:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    6c04:	2000      	movs	r0, #0
		break;
    6c06:	e02f      	b.n	6c68 <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    6c08:	491b      	ldr	r1, [pc, #108]	; (6c78 <system_clock_source_enable+0xb8>)
    6c0a:	680b      	ldr	r3, [r1, #0]
    6c0c:	2202      	movs	r2, #2
    6c0e:	4313      	orrs	r3, r2
    6c10:	600b      	str	r3, [r1, #0]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    6c12:	4b17      	ldr	r3, [pc, #92]	; (6c70 <system_clock_source_enable+0xb0>)
    6c14:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    6c16:	0019      	movs	r1, r3
    6c18:	32fe      	adds	r2, #254	; 0xfe
    6c1a:	68cb      	ldr	r3, [r1, #12]
    6c1c:	4213      	tst	r3, r2
    6c1e:	d0fc      	beq.n	6c1a <system_clock_source_enable+0x5a>
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    6c20:	4a15      	ldr	r2, [pc, #84]	; (6c78 <system_clock_source_enable+0xb8>)
    6c22:	6891      	ldr	r1, [r2, #8]
    6c24:	4b12      	ldr	r3, [pc, #72]	; (6c70 <system_clock_source_enable+0xb0>)
    6c26:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    6c28:	6852      	ldr	r2, [r2, #4]
    6c2a:	61da      	str	r2, [r3, #28]
	OSCCTRL->DFLLCTRL.reg = 0;
    6c2c:	2200      	movs	r2, #0
    6c2e:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    6c30:	0019      	movs	r1, r3
    6c32:	3201      	adds	r2, #1
    6c34:	32ff      	adds	r2, #255	; 0xff
    6c36:	68cb      	ldr	r3, [r1, #12]
    6c38:	4213      	tst	r3, r2
    6c3a:	d0fc      	beq.n	6c36 <system_clock_source_enable+0x76>
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    6c3c:	4b0e      	ldr	r3, [pc, #56]	; (6c78 <system_clock_source_enable+0xb8>)
    6c3e:	681b      	ldr	r3, [r3, #0]
    6c40:	b29b      	uxth	r3, r3
    6c42:	4a0b      	ldr	r2, [pc, #44]	; (6c70 <system_clock_source_enable+0xb0>)
    6c44:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    6c46:	2000      	movs	r0, #0
    6c48:	e00e      	b.n	6c68 <system_clock_source_enable+0xa8>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    6c4a:	4909      	ldr	r1, [pc, #36]	; (6c70 <system_clock_source_enable+0xb0>)
    6c4c:	2228      	movs	r2, #40	; 0x28
    6c4e:	5c8b      	ldrb	r3, [r1, r2]
    6c50:	2002      	movs	r0, #2
    6c52:	4303      	orrs	r3, r0
    6c54:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    6c56:	0008      	movs	r0, r1
    6c58:	2138      	movs	r1, #56	; 0x38
    6c5a:	3a26      	subs	r2, #38	; 0x26
    6c5c:	5c43      	ldrb	r3, [r0, r1]
    6c5e:	4213      	tst	r3, r2
    6c60:	d1fc      	bne.n	6c5c <system_clock_source_enable+0x9c>
	return STATUS_OK;
    6c62:	2000      	movs	r0, #0
    6c64:	e000      	b.n	6c68 <system_clock_source_enable+0xa8>
		return STATUS_OK;
    6c66:	2000      	movs	r0, #0
}
    6c68:	4770      	bx	lr
    6c6a:	46c0      	nop			; (mov r8, r8)
    6c6c:	0001848c 	.word	0x0001848c
    6c70:	40000c00 	.word	0x40000c00
    6c74:	40001000 	.word	0x40001000
    6c78:	200002e4 	.word	0x200002e4

00006c7c <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    6c7c:	2808      	cmp	r0, #8
    6c7e:	d832      	bhi.n	6ce6 <system_clock_source_disable+0x6a>
    6c80:	0080      	lsls	r0, r0, #2
    6c82:	4b1a      	ldr	r3, [pc, #104]	; (6cec <system_clock_source_disable+0x70>)
    6c84:	581b      	ldr	r3, [r3, r0]
    6c86:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    6c88:	4a19      	ldr	r2, [pc, #100]	; (6cf0 <system_clock_source_disable+0x74>)
    6c8a:	7d13      	ldrb	r3, [r2, #20]
    6c8c:	2102      	movs	r1, #2
    6c8e:	438b      	bics	r3, r1
    6c90:	7513      	strb	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    6c92:	2000      	movs	r0, #0
}
    6c94:	4770      	bx	lr
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    6c96:	4a17      	ldr	r2, [pc, #92]	; (6cf4 <system_clock_source_disable+0x78>)
    6c98:	6993      	ldr	r3, [r2, #24]
    6c9a:	2102      	movs	r1, #2
    6c9c:	438b      	bics	r3, r1
    6c9e:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    6ca0:	2000      	movs	r0, #0
		break;
    6ca2:	e7f7      	b.n	6c94 <system_clock_source_disable+0x18>
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    6ca4:	4a12      	ldr	r2, [pc, #72]	; (6cf0 <system_clock_source_disable+0x74>)
    6ca6:	8a13      	ldrh	r3, [r2, #16]
    6ca8:	2102      	movs	r1, #2
    6caa:	438b      	bics	r3, r1
    6cac:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    6cae:	2000      	movs	r0, #0
		break;
    6cb0:	e7f0      	b.n	6c94 <system_clock_source_disable+0x18>
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    6cb2:	4a10      	ldr	r2, [pc, #64]	; (6cf4 <system_clock_source_disable+0x78>)
    6cb4:	6953      	ldr	r3, [r2, #20]
    6cb6:	2102      	movs	r1, #2
    6cb8:	438b      	bics	r3, r1
    6cba:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    6cbc:	2000      	movs	r0, #0
		break;
    6cbe:	e7e9      	b.n	6c94 <system_clock_source_disable+0x18>
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    6cc0:	4b0d      	ldr	r3, [pc, #52]	; (6cf8 <system_clock_source_disable+0x7c>)
    6cc2:	681a      	ldr	r2, [r3, #0]
    6cc4:	2102      	movs	r1, #2
    6cc6:	438a      	bics	r2, r1
    6cc8:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    6cca:	681b      	ldr	r3, [r3, #0]
    6ccc:	b29b      	uxth	r3, r3
    6cce:	4a08      	ldr	r2, [pc, #32]	; (6cf0 <system_clock_source_disable+0x74>)
    6cd0:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    6cd2:	2000      	movs	r0, #0
		break;
    6cd4:	e7de      	b.n	6c94 <system_clock_source_disable+0x18>
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    6cd6:	4906      	ldr	r1, [pc, #24]	; (6cf0 <system_clock_source_disable+0x74>)
    6cd8:	2228      	movs	r2, #40	; 0x28
    6cda:	5c8b      	ldrb	r3, [r1, r2]
    6cdc:	2002      	movs	r0, #2
    6cde:	4383      	bics	r3, r0
    6ce0:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    6ce2:	2000      	movs	r0, #0
		break;
    6ce4:	e7d6      	b.n	6c94 <system_clock_source_disable+0x18>
		return STATUS_ERR_INVALID_ARG;
    6ce6:	2017      	movs	r0, #23
    6ce8:	e7d4      	b.n	6c94 <system_clock_source_disable+0x18>
    6cea:	46c0      	nop			; (mov r8, r8)
    6cec:	000184b0 	.word	0x000184b0
    6cf0:	40000c00 	.word	0x40000c00
    6cf4:	40001000 	.word	0x40001000
    6cf8:	200002e4 	.word	0x200002e4

00006cfc <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    6cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    6cfe:	46d6      	mov	lr, sl
    6d00:	464f      	mov	r7, r9
    6d02:	4646      	mov	r6, r8
    6d04:	b5c0      	push	{r6, r7, lr}
    6d06:	b088      	sub	sp, #32
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    6d08:	2280      	movs	r2, #128	; 0x80
    6d0a:	0052      	lsls	r2, r2, #1
    6d0c:	4b56      	ldr	r3, [pc, #344]	; (6e68 <system_clock_init+0x16c>)
    6d0e:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    6d10:	3afd      	subs	r2, #253	; 0xfd
    6d12:	4b56      	ldr	r3, [pc, #344]	; (6e6c <system_clock_init+0x170>)
    6d14:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    6d16:	4a56      	ldr	r2, [pc, #344]	; (6e70 <system_clock_init+0x174>)
    6d18:	6853      	ldr	r3, [r2, #4]
    6d1a:	211e      	movs	r1, #30
    6d1c:	438b      	bics	r3, r1
    6d1e:	391a      	subs	r1, #26
    6d20:	430b      	orrs	r3, r1
    6d22:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    6d24:	2380      	movs	r3, #128	; 0x80
    6d26:	05db      	lsls	r3, r3, #23
    6d28:	789b      	ldrb	r3, [r3, #2]
    6d2a:	2b02      	cmp	r3, #2
    6d2c:	d00f      	beq.n	6d4e <system_clock_init+0x52>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB || SAMR34J || SAMR35J || (WLR089U0)
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    6d2e:	2380      	movs	r3, #128	; 0x80
    6d30:	05db      	lsls	r3, r3, #23
    6d32:	789b      	ldrb	r3, [r3, #2]
    6d34:	b25b      	sxtb	r3, r3
    6d36:	2b00      	cmp	r3, #0
    6d38:	db09      	blt.n	6d4e <system_clock_init+0x52>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    6d3a:	2380      	movs	r3, #128	; 0x80
    6d3c:	05db      	lsls	r3, r3, #23
    6d3e:	2201      	movs	r2, #1
    6d40:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    6d42:	3201      	adds	r2, #1
    6d44:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    6d46:	001a      	movs	r2, r3
    6d48:	7993      	ldrb	r3, [r2, #6]
    6d4a:	2b00      	cmp	r3, #0
    6d4c:	d0fc      	beq.n	6d48 <system_clock_init+0x4c>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    6d4e:	a805      	add	r0, sp, #20
    6d50:	2300      	movs	r3, #0
    6d52:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    6d54:	2280      	movs	r2, #128	; 0x80
    6d56:	0212      	lsls	r2, r2, #8
    6d58:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    6d5a:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    6d5c:	2201      	movs	r2, #1
    6d5e:	70c2      	strb	r2, [r0, #3]
	config->run_in_standby      = false;
    6d60:	7203      	strb	r3, [r0, #8]
	config->write_once          = false;
    6d62:	7283      	strb	r3, [r0, #10]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    6d64:	3203      	adds	r2, #3
    6d66:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    6d68:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    6d6a:	4b42      	ldr	r3, [pc, #264]	; (6e74 <system_clock_init+0x178>)
    6d6c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    6d6e:	2005      	movs	r0, #5
    6d70:	4b41      	ldr	r3, [pc, #260]	; (6e78 <system_clock_init+0x17c>)
    6d72:	4798      	blx	r3
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    6d74:	4941      	ldr	r1, [pc, #260]	; (6e7c <system_clock_init+0x180>)
    6d76:	2201      	movs	r2, #1
    6d78:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    6d7a:	421a      	tst	r2, r3
    6d7c:	d0fc      	beq.n	6d78 <system_clock_init+0x7c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		OSC32KCTRL->XOSC32K.bit.ONDEMAND = 1;
    6d7e:	4a3f      	ldr	r2, [pc, #252]	; (6e7c <system_clock_init+0x180>)
    6d80:	6953      	ldr	r3, [r2, #20]
    6d82:	2180      	movs	r1, #128	; 0x80
    6d84:	430b      	orrs	r3, r1
    6d86:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    6d88:	a902      	add	r1, sp, #8
    6d8a:	2501      	movs	r5, #1
    6d8c:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    6d8e:	2400      	movs	r4, #0
    6d90:	704c      	strb	r4, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    6d92:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    6d94:	724c      	strb	r4, [r1, #9]
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    6d96:	2303      	movs	r3, #3
    6d98:	700b      	strb	r3, [r1, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    6d9a:	2000      	movs	r0, #0
    6d9c:	4b38      	ldr	r3, [pc, #224]	; (6e80 <system_clock_init+0x184>)
    6d9e:	4798      	blx	r3
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    6da0:	2006      	movs	r0, #6
    6da2:	4b38      	ldr	r3, [pc, #224]	; (6e84 <system_clock_init+0x188>)
    6da4:	4798      	blx	r3
	config->run_in_standby  = false;
    6da6:	a801      	add	r0, sp, #4
    6da8:	7044      	strb	r4, [r0, #1]
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
    6daa:	7005      	strb	r5, [r0, #0]
	osc16m_conf.on_demand       = 0;
    6dac:	7084      	strb	r4, [r0, #2]
	system_clock_source_osc16m_set_config(&osc16m_conf);
    6dae:	4b36      	ldr	r3, [pc, #216]	; (6e88 <system_clock_init+0x18c>)
    6db0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
    6db2:	2006      	movs	r0, #6
    6db4:	4b30      	ldr	r3, [pc, #192]	; (6e78 <system_clock_init+0x17c>)
    6db6:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    6db8:	492b      	ldr	r1, [pc, #172]	; (6e68 <system_clock_init+0x16c>)
    6dba:	2210      	movs	r2, #16
    6dbc:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    6dbe:	421a      	tst	r2, r3
    6dc0:	d0fc      	beq.n	6dbc <system_clock_init+0xc0>
	config->division_factor    = 1;
    6dc2:	ac02      	add	r4, sp, #8
    6dc4:	2601      	movs	r6, #1
    6dc6:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    6dc8:	2500      	movs	r5, #0
    6dca:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    6dcc:	2306      	movs	r3, #6
    6dce:	469a      	mov	sl, r3
    6dd0:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    6dd2:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    6dd4:	7265      	strb	r5, [r4, #9]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    6dd6:	0021      	movs	r1, r4
    6dd8:	2000      	movs	r0, #0
    6dda:	4b29      	ldr	r3, [pc, #164]	; (6e80 <system_clock_init+0x184>)
    6ddc:	4698      	mov	r8, r3
    6dde:	4798      	blx	r3
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    6de0:	4b2a      	ldr	r3, [pc, #168]	; (6e8c <system_clock_init+0x190>)
    6de2:	4798      	blx	r3
	config->division_factor    = 1;
    6de4:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    6de6:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    6de8:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    6dea:	2305      	movs	r3, #5
    6dec:	7023      	strb	r3, [r4, #0]
    6dee:	7226      	strb	r6, [r4, #8]
    6df0:	0021      	movs	r1, r4
    6df2:	2001      	movs	r0, #1
    6df4:	47c0      	blx	r8
    6df6:	2001      	movs	r0, #1
    6df8:	4b25      	ldr	r3, [pc, #148]	; (6e90 <system_clock_init+0x194>)
    6dfa:	4699      	mov	r9, r3
    6dfc:	4798      	blx	r3
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    6dfe:	4f25      	ldr	r7, [pc, #148]	; (6e94 <system_clock_init+0x198>)
    6e00:	71be      	strb	r6, [r7, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    6e02:	717e      	strb	r6, [r7, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    6e04:	713e      	strb	r6, [r7, #4]
	config->division_factor    = 1;
    6e06:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    6e08:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    6e0a:	4653      	mov	r3, sl
    6e0c:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    6e0e:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    6e10:	7265      	strb	r5, [r4, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    6e12:	0021      	movs	r1, r4
    6e14:	2000      	movs	r0, #0
    6e16:	47c0      	blx	r8
    6e18:	2000      	movs	r0, #0
    6e1a:	47c8      	blx	r9
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    6e1c:	2000      	movs	r0, #0
    6e1e:	4b1e      	ldr	r3, [pc, #120]	; (6e98 <system_clock_init+0x19c>)
    6e20:	4798      	blx	r3
    6e22:	7939      	ldrb	r1, [r7, #4]
    6e24:	b2c9      	uxtb	r1, r1
    6e26:	4b1d      	ldr	r3, [pc, #116]	; (6e9c <system_clock_init+0x1a0>)
    6e28:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    6e2a:	4b1d      	ldr	r3, [pc, #116]	; (6ea0 <system_clock_init+0x1a4>)
    6e2c:	4298      	cmp	r0, r3
    6e2e:	d814      	bhi.n	6e5a <system_clock_init+0x15e>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    6e30:	2380      	movs	r3, #128	; 0x80
    6e32:	05db      	lsls	r3, r3, #23
    6e34:	789b      	ldrb	r3, [r3, #2]
    6e36:	2b00      	cmp	r3, #0
    6e38:	d00f      	beq.n	6e5a <system_clock_init+0x15e>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    6e3a:	2380      	movs	r3, #128	; 0x80
    6e3c:	05db      	lsls	r3, r3, #23
    6e3e:	789b      	ldrb	r3, [r3, #2]
    6e40:	b25b      	sxtb	r3, r3
    6e42:	2b00      	cmp	r3, #0
    6e44:	db09      	blt.n	6e5a <system_clock_init+0x15e>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    6e46:	2380      	movs	r3, #128	; 0x80
    6e48:	05db      	lsls	r3, r3, #23
    6e4a:	2201      	movs	r2, #1
    6e4c:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    6e4e:	2200      	movs	r2, #0
    6e50:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    6e52:	001a      	movs	r2, r3
    6e54:	7993      	ldrb	r3, [r2, #6]
    6e56:	2b00      	cmp	r3, #0
    6e58:	d0fc      	beq.n	6e54 <system_clock_init+0x158>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    6e5a:	b008      	add	sp, #32
    6e5c:	bc1c      	pop	{r2, r3, r4}
    6e5e:	4690      	mov	r8, r2
    6e60:	4699      	mov	r9, r3
    6e62:	46a2      	mov	sl, r4
    6e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6e66:	46c0      	nop			; (mov r8, r8)
    6e68:	40000c00 	.word	0x40000c00
    6e6c:	40001400 	.word	0x40001400
    6e70:	41004000 	.word	0x41004000
    6e74:	00006b25 	.word	0x00006b25
    6e78:	00006bc1 	.word	0x00006bc1
    6e7c:	40001000 	.word	0x40001000
    6e80:	00006ec9 	.word	0x00006ec9
    6e84:	00006c7d 	.word	0x00006c7d
    6e88:	00006af1 	.word	0x00006af1
    6e8c:	00006ea5 	.word	0x00006ea5
    6e90:	00006f75 	.word	0x00006f75
    6e94:	40000400 	.word	0x40000400
    6e98:	00006fb5 	.word	0x00006fb5
    6e9c:	000137ad 	.word	0x000137ad
    6ea0:	00b71b00 	.word	0x00b71b00

00006ea4 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    6ea4:	4a06      	ldr	r2, [pc, #24]	; (6ec0 <system_gclk_init+0x1c>)
    6ea6:	6953      	ldr	r3, [r2, #20]
    6ea8:	2140      	movs	r1, #64	; 0x40
    6eaa:	430b      	orrs	r3, r1
    6eac:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    6eae:	2201      	movs	r2, #1
    6eb0:	4b04      	ldr	r3, [pc, #16]	; (6ec4 <system_gclk_init+0x20>)
    6eb2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    6eb4:	0019      	movs	r1, r3
    6eb6:	780b      	ldrb	r3, [r1, #0]
    6eb8:	4213      	tst	r3, r2
    6eba:	d1fc      	bne.n	6eb6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    6ebc:	4770      	bx	lr
    6ebe:	46c0      	nop			; (mov r8, r8)
    6ec0:	40000400 	.word	0x40000400
    6ec4:	40001800 	.word	0x40001800

00006ec8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    6ec8:	b570      	push	{r4, r5, r6, lr}
    6eca:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    6ecc:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    6ece:	784b      	ldrb	r3, [r1, #1]
    6ed0:	2b00      	cmp	r3, #0
    6ed2:	d002      	beq.n	6eda <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    6ed4:	2380      	movs	r3, #128	; 0x80
    6ed6:	00db      	lsls	r3, r3, #3
    6ed8:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    6eda:	7a4b      	ldrb	r3, [r1, #9]
    6edc:	2b00      	cmp	r3, #0
    6ede:	d002      	beq.n	6ee6 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    6ee0:	2380      	movs	r3, #128	; 0x80
    6ee2:	011b      	lsls	r3, r3, #4
    6ee4:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    6ee6:	6848      	ldr	r0, [r1, #4]
    6ee8:	2801      	cmp	r0, #1
    6eea:	d90f      	bls.n	6f0c <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    6eec:	1e43      	subs	r3, r0, #1
    6eee:	4218      	tst	r0, r3
    6ef0:	d131      	bne.n	6f56 <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    6ef2:	2802      	cmp	r0, #2
    6ef4:	d92d      	bls.n	6f52 <system_gclk_gen_set_config+0x8a>
    6ef6:	2302      	movs	r3, #2
    6ef8:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    6efa:	3201      	adds	r2, #1
						mask <<= 1) {
    6efc:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    6efe:	4298      	cmp	r0, r3
    6f00:	d8fb      	bhi.n	6efa <system_gclk_gen_set_config+0x32>
    6f02:	2380      	movs	r3, #128	; 0x80
    6f04:	015b      	lsls	r3, r3, #5
    6f06:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    6f08:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    6f0a:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    6f0c:	7a0b      	ldrb	r3, [r1, #8]
    6f0e:	2b00      	cmp	r3, #0
    6f10:	d002      	beq.n	6f18 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    6f12:	2380      	movs	r3, #128	; 0x80
    6f14:	019b      	lsls	r3, r3, #6
    6f16:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    6f18:	2604      	movs	r6, #4
    6f1a:	40a6      	lsls	r6, r4
    6f1c:	4911      	ldr	r1, [pc, #68]	; (6f64 <system_gclk_gen_set_config+0x9c>)
    6f1e:	4a12      	ldr	r2, [pc, #72]	; (6f68 <system_gclk_gen_set_config+0xa0>)
    6f20:	684b      	ldr	r3, [r1, #4]
    6f22:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    6f24:	421e      	tst	r6, r3
    6f26:	d1fb      	bne.n	6f20 <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    6f28:	4b10      	ldr	r3, [pc, #64]	; (6f6c <system_gclk_gen_set_config+0xa4>)
    6f2a:	4798      	blx	r3
    6f2c:	00a4      	lsls	r4, r4, #2
    6f2e:	4b0d      	ldr	r3, [pc, #52]	; (6f64 <system_gclk_gen_set_config+0x9c>)
    6f30:	469c      	mov	ip, r3
    6f32:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    6f34:	6a22      	ldr	r2, [r4, #32]
    6f36:	2380      	movs	r3, #128	; 0x80
    6f38:	005b      	lsls	r3, r3, #1
    6f3a:	401a      	ands	r2, r3
    6f3c:	432a      	orrs	r2, r5
    6f3e:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    6f40:	4661      	mov	r1, ip
    6f42:	4a09      	ldr	r2, [pc, #36]	; (6f68 <system_gclk_gen_set_config+0xa0>)
    6f44:	684b      	ldr	r3, [r1, #4]
    6f46:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    6f48:	421e      	tst	r6, r3
    6f4a:	d1fb      	bne.n	6f44 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    6f4c:	4b08      	ldr	r3, [pc, #32]	; (6f70 <system_gclk_gen_set_config+0xa8>)
    6f4e:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    6f50:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    6f52:	2200      	movs	r2, #0
    6f54:	e7d5      	b.n	6f02 <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    6f56:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    6f58:	2380      	movs	r3, #128	; 0x80
    6f5a:	009b      	lsls	r3, r3, #2
    6f5c:	4318      	orrs	r0, r3
    6f5e:	4305      	orrs	r5, r0
    6f60:	e7d4      	b.n	6f0c <system_gclk_gen_set_config+0x44>
    6f62:	46c0      	nop			; (mov r8, r8)
    6f64:	40001800 	.word	0x40001800
    6f68:	000007fc 	.word	0x000007fc
    6f6c:	00004aa1 	.word	0x00004aa1
    6f70:	00004ae1 	.word	0x00004ae1

00006f74 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    6f74:	b510      	push	{r4, lr}
    6f76:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    6f78:	2204      	movs	r2, #4
    6f7a:	4082      	lsls	r2, r0
    6f7c:	4809      	ldr	r0, [pc, #36]	; (6fa4 <system_gclk_gen_enable+0x30>)
    6f7e:	490a      	ldr	r1, [pc, #40]	; (6fa8 <system_gclk_gen_enable+0x34>)
    6f80:	6843      	ldr	r3, [r0, #4]
    6f82:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    6f84:	421a      	tst	r2, r3
    6f86:	d1fb      	bne.n	6f80 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    6f88:	4b08      	ldr	r3, [pc, #32]	; (6fac <system_gclk_gen_enable+0x38>)
    6f8a:	4798      	blx	r3
    6f8c:	00a4      	lsls	r4, r4, #2
    6f8e:	4b05      	ldr	r3, [pc, #20]	; (6fa4 <system_gclk_gen_enable+0x30>)
    6f90:	469c      	mov	ip, r3
    6f92:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    6f94:	6a22      	ldr	r2, [r4, #32]
    6f96:	2380      	movs	r3, #128	; 0x80
    6f98:	005b      	lsls	r3, r3, #1
    6f9a:	4313      	orrs	r3, r2
    6f9c:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    6f9e:	4b04      	ldr	r3, [pc, #16]	; (6fb0 <system_gclk_gen_enable+0x3c>)
    6fa0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    6fa2:	bd10      	pop	{r4, pc}
    6fa4:	40001800 	.word	0x40001800
    6fa8:	000007fc 	.word	0x000007fc
    6fac:	00004aa1 	.word	0x00004aa1
    6fb0:	00004ae1 	.word	0x00004ae1

00006fb4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    6fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6fb6:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    6fb8:	2204      	movs	r2, #4
    6fba:	4082      	lsls	r2, r0
    6fbc:	4812      	ldr	r0, [pc, #72]	; (7008 <system_gclk_gen_get_hz+0x54>)
    6fbe:	4913      	ldr	r1, [pc, #76]	; (700c <system_gclk_gen_get_hz+0x58>)
    6fc0:	6843      	ldr	r3, [r0, #4]
    6fc2:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    6fc4:	421a      	tst	r2, r3
    6fc6:	d1fb      	bne.n	6fc0 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    6fc8:	4b11      	ldr	r3, [pc, #68]	; (7010 <system_gclk_gen_get_hz+0x5c>)
    6fca:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    6fcc:	4f0e      	ldr	r7, [pc, #56]	; (7008 <system_gclk_gen_get_hz+0x54>)
    6fce:	3408      	adds	r4, #8
    6fd0:	00a4      	lsls	r4, r4, #2
    6fd2:	59e0      	ldr	r0, [r4, r7]
    6fd4:	0700      	lsls	r0, r0, #28
    6fd6:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
    6fd8:	4b0e      	ldr	r3, [pc, #56]	; (7014 <system_gclk_gen_get_hz+0x60>)
    6fda:	4798      	blx	r3
    6fdc:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    6fde:	59e5      	ldr	r5, [r4, r7]
    6fe0:	04ed      	lsls	r5, r5, #19
    6fe2:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    6fe4:	59e4      	ldr	r4, [r4, r7]
    6fe6:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    6fe8:	4b0b      	ldr	r3, [pc, #44]	; (7018 <system_gclk_gen_get_hz+0x64>)
    6fea:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    6fec:	2d00      	cmp	r5, #0
    6fee:	d107      	bne.n	7000 <system_gclk_gen_get_hz+0x4c>
    6ff0:	2c01      	cmp	r4, #1
    6ff2:	d907      	bls.n	7004 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    6ff4:	0021      	movs	r1, r4
    6ff6:	0030      	movs	r0, r6
    6ff8:	4b08      	ldr	r3, [pc, #32]	; (701c <system_gclk_gen_get_hz+0x68>)
    6ffa:	4798      	blx	r3
    6ffc:	0006      	movs	r6, r0
    6ffe:	e001      	b.n	7004 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    7000:	3401      	adds	r4, #1
    7002:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    7004:	0030      	movs	r0, r6
    7006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7008:	40001800 	.word	0x40001800
    700c:	000007fc 	.word	0x000007fc
    7010:	00004aa1 	.word	0x00004aa1
    7014:	00006a5d 	.word	0x00006a5d
    7018:	00004ae1 	.word	0x00004ae1
    701c:	000137ad 	.word	0x000137ad

00007020 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    7020:	b510      	push	{r4, lr}
    7022:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    7024:	4b09      	ldr	r3, [pc, #36]	; (704c <system_gclk_chan_enable+0x2c>)
    7026:	4798      	blx	r3
    7028:	00a0      	lsls	r0, r4, #2
    702a:	4b09      	ldr	r3, [pc, #36]	; (7050 <system_gclk_chan_enable+0x30>)
    702c:	469c      	mov	ip, r3
    702e:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    7030:	2280      	movs	r2, #128	; 0x80
    7032:	5883      	ldr	r3, [r0, r2]
    7034:	2140      	movs	r1, #64	; 0x40
    7036:	430b      	orrs	r3, r1
    7038:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    703a:	3140      	adds	r1, #64	; 0x40
    703c:	3a40      	subs	r2, #64	; 0x40
    703e:	5843      	ldr	r3, [r0, r1]
    7040:	421a      	tst	r2, r3
    7042:	d0fc      	beq.n	703e <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    7044:	4b03      	ldr	r3, [pc, #12]	; (7054 <system_gclk_chan_enable+0x34>)
    7046:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    7048:	bd10      	pop	{r4, pc}
    704a:	46c0      	nop			; (mov r8, r8)
    704c:	00004aa1 	.word	0x00004aa1
    7050:	40001800 	.word	0x40001800
    7054:	00004ae1 	.word	0x00004ae1

00007058 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    7058:	b510      	push	{r4, lr}
    705a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    705c:	4b09      	ldr	r3, [pc, #36]	; (7084 <system_gclk_chan_disable+0x2c>)
    705e:	4798      	blx	r3
    7060:	00a0      	lsls	r0, r4, #2
    7062:	4b09      	ldr	r3, [pc, #36]	; (7088 <system_gclk_chan_disable+0x30>)
    7064:	469c      	mov	ip, r3
    7066:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    7068:	2280      	movs	r2, #128	; 0x80
    706a:	5883      	ldr	r3, [r0, r2]
    706c:	2140      	movs	r1, #64	; 0x40
    706e:	438b      	bics	r3, r1
    7070:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    7072:	3140      	adds	r1, #64	; 0x40
    7074:	3a40      	subs	r2, #64	; 0x40
    7076:	5843      	ldr	r3, [r0, r1]
    7078:	421a      	tst	r2, r3
    707a:	d1fc      	bne.n	7076 <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    707c:	4b03      	ldr	r3, [pc, #12]	; (708c <system_gclk_chan_disable+0x34>)
    707e:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    7080:	bd10      	pop	{r4, pc}
    7082:	46c0      	nop			; (mov r8, r8)
    7084:	00004aa1 	.word	0x00004aa1
    7088:	40001800 	.word	0x40001800
    708c:	00004ae1 	.word	0x00004ae1

00007090 <system_gclk_chan_set_config>:
{
    7090:	b570      	push	{r4, r5, r6, lr}
    7092:	0004      	movs	r4, r0
    7094:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    7096:	4b05      	ldr	r3, [pc, #20]	; (70ac <system_gclk_chan_set_config+0x1c>)
    7098:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    709a:	782a      	ldrb	r2, [r5, #0]
    709c:	230f      	movs	r3, #15
    709e:	4013      	ands	r3, r2
    70a0:	3420      	adds	r4, #32
    70a2:	00a4      	lsls	r4, r4, #2
    70a4:	4a02      	ldr	r2, [pc, #8]	; (70b0 <system_gclk_chan_set_config+0x20>)
    70a6:	50a3      	str	r3, [r4, r2]
}
    70a8:	bd70      	pop	{r4, r5, r6, pc}
    70aa:	46c0      	nop			; (mov r8, r8)
    70ac:	00007059 	.word	0x00007059
    70b0:	40001800 	.word	0x40001800

000070b4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    70b4:	b510      	push	{r4, lr}
    70b6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    70b8:	4b06      	ldr	r3, [pc, #24]	; (70d4 <system_gclk_chan_get_hz+0x20>)
    70ba:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    70bc:	3420      	adds	r4, #32
    70be:	00a4      	lsls	r4, r4, #2
    70c0:	4b05      	ldr	r3, [pc, #20]	; (70d8 <system_gclk_chan_get_hz+0x24>)
    70c2:	58e4      	ldr	r4, [r4, r3]
    70c4:	0724      	lsls	r4, r4, #28
    70c6:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    70c8:	4b04      	ldr	r3, [pc, #16]	; (70dc <system_gclk_chan_get_hz+0x28>)
    70ca:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    70cc:	0020      	movs	r0, r4
    70ce:	4b04      	ldr	r3, [pc, #16]	; (70e0 <system_gclk_chan_get_hz+0x2c>)
    70d0:	4798      	blx	r3
}
    70d2:	bd10      	pop	{r4, pc}
    70d4:	00004aa1 	.word	0x00004aa1
    70d8:	40001800 	.word	0x40001800
    70dc:	00004ae1 	.word	0x00004ae1
    70e0:	00006fb5 	.word	0x00006fb5

000070e4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    70e4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    70e6:	78d3      	ldrb	r3, [r2, #3]
    70e8:	2b00      	cmp	r3, #0
    70ea:	d135      	bne.n	7158 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    70ec:	7813      	ldrb	r3, [r2, #0]
    70ee:	2b80      	cmp	r3, #128	; 0x80
    70f0:	d029      	beq.n	7146 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    70f2:	061b      	lsls	r3, r3, #24
    70f4:	2480      	movs	r4, #128	; 0x80
    70f6:	0264      	lsls	r4, r4, #9
    70f8:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    70fa:	7854      	ldrb	r4, [r2, #1]
    70fc:	2502      	movs	r5, #2
    70fe:	43ac      	bics	r4, r5
    7100:	d106      	bne.n	7110 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    7102:	7894      	ldrb	r4, [r2, #2]
    7104:	2c00      	cmp	r4, #0
    7106:	d120      	bne.n	714a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    7108:	2480      	movs	r4, #128	; 0x80
    710a:	02a4      	lsls	r4, r4, #10
    710c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    710e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    7110:	7854      	ldrb	r4, [r2, #1]
    7112:	3c01      	subs	r4, #1
    7114:	2c01      	cmp	r4, #1
    7116:	d91c      	bls.n	7152 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    7118:	040d      	lsls	r5, r1, #16
    711a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    711c:	24a0      	movs	r4, #160	; 0xa0
    711e:	05e4      	lsls	r4, r4, #23
    7120:	432c      	orrs	r4, r5
    7122:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7124:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    7126:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    7128:	24d0      	movs	r4, #208	; 0xd0
    712a:	0624      	lsls	r4, r4, #24
    712c:	432c      	orrs	r4, r5
    712e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7130:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    7132:	78d4      	ldrb	r4, [r2, #3]
    7134:	2c00      	cmp	r4, #0
    7136:	d122      	bne.n	717e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    7138:	035b      	lsls	r3, r3, #13
    713a:	d51c      	bpl.n	7176 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    713c:	7893      	ldrb	r3, [r2, #2]
    713e:	2b01      	cmp	r3, #1
    7140:	d01e      	beq.n	7180 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    7142:	6141      	str	r1, [r0, #20]
    7144:	e017      	b.n	7176 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    7146:	2300      	movs	r3, #0
    7148:	e7d7      	b.n	70fa <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    714a:	24c0      	movs	r4, #192	; 0xc0
    714c:	02e4      	lsls	r4, r4, #11
    714e:	4323      	orrs	r3, r4
    7150:	e7dd      	b.n	710e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    7152:	4c0d      	ldr	r4, [pc, #52]	; (7188 <_system_pinmux_config+0xa4>)
    7154:	4023      	ands	r3, r4
    7156:	e7df      	b.n	7118 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    7158:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    715a:	040c      	lsls	r4, r1, #16
    715c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    715e:	23a0      	movs	r3, #160	; 0xa0
    7160:	05db      	lsls	r3, r3, #23
    7162:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7164:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    7166:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    7168:	23d0      	movs	r3, #208	; 0xd0
    716a:	061b      	lsls	r3, r3, #24
    716c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    716e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    7170:	78d3      	ldrb	r3, [r2, #3]
    7172:	2b00      	cmp	r3, #0
    7174:	d103      	bne.n	717e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    7176:	7853      	ldrb	r3, [r2, #1]
    7178:	3b01      	subs	r3, #1
    717a:	2b01      	cmp	r3, #1
    717c:	d902      	bls.n	7184 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    717e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    7180:	6181      	str	r1, [r0, #24]
    7182:	e7f8      	b.n	7176 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    7184:	6081      	str	r1, [r0, #8]
}
    7186:	e7fa      	b.n	717e <_system_pinmux_config+0x9a>
    7188:	fffbffff 	.word	0xfffbffff

0000718c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    718c:	b510      	push	{r4, lr}
    718e:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    7190:	09c1      	lsrs	r1, r0, #7
		return NULL;
    7192:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7194:	2900      	cmp	r1, #0
    7196:	d104      	bne.n	71a2 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    7198:	0943      	lsrs	r3, r0, #5
    719a:	01db      	lsls	r3, r3, #7
    719c:	4905      	ldr	r1, [pc, #20]	; (71b4 <system_pinmux_pin_set_config+0x28>)
    719e:	468c      	mov	ip, r1
    71a0:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    71a2:	241f      	movs	r4, #31
    71a4:	4020      	ands	r0, r4
    71a6:	2101      	movs	r1, #1
    71a8:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    71aa:	0018      	movs	r0, r3
    71ac:	4b02      	ldr	r3, [pc, #8]	; (71b8 <system_pinmux_pin_set_config+0x2c>)
    71ae:	4798      	blx	r3
}
    71b0:	bd10      	pop	{r4, pc}
    71b2:	46c0      	nop			; (mov r8, r8)
    71b4:	40002800 	.word	0x40002800
    71b8:	000070e5 	.word	0x000070e5

000071bc <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    71bc:	4770      	bx	lr
    71be:	Address 0x000071be is out of bounds.


000071c0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    71c0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    71c2:	4b05      	ldr	r3, [pc, #20]	; (71d8 <system_init+0x18>)
    71c4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    71c6:	4b05      	ldr	r3, [pc, #20]	; (71dc <system_init+0x1c>)
    71c8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    71ca:	4b05      	ldr	r3, [pc, #20]	; (71e0 <system_init+0x20>)
    71cc:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    71ce:	4b05      	ldr	r3, [pc, #20]	; (71e4 <system_init+0x24>)
    71d0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    71d2:	4b05      	ldr	r3, [pc, #20]	; (71e8 <system_init+0x28>)
    71d4:	4798      	blx	r3
}
    71d6:	bd10      	pop	{r4, pc}
    71d8:	00006cfd 	.word	0x00006cfd
    71dc:	00004b11 	.word	0x00004b11
    71e0:	000071bd 	.word	0x000071bd
    71e4:	00004e3d 	.word	0x00004e3d
    71e8:	000071bd 	.word	0x000071bd

000071ec <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    71ec:	1c93      	adds	r3, r2, #2
    71ee:	009b      	lsls	r3, r3, #2
    71f0:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    71f2:	2a02      	cmp	r2, #2
    71f4:	d009      	beq.n	720a <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    71f6:	2a03      	cmp	r2, #3
    71f8:	d00c      	beq.n	7214 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    71fa:	2301      	movs	r3, #1
    71fc:	4093      	lsls	r3, r2
    71fe:	001a      	movs	r2, r3
    7200:	7e03      	ldrb	r3, [r0, #24]
    7202:	4313      	orrs	r3, r2
    7204:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    7206:	2000      	movs	r0, #0
    7208:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    720a:	7e03      	ldrb	r3, [r0, #24]
    720c:	2210      	movs	r2, #16
    720e:	4313      	orrs	r3, r2
    7210:	7603      	strb	r3, [r0, #24]
    7212:	e7f8      	b.n	7206 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    7214:	7e03      	ldrb	r3, [r0, #24]
    7216:	2220      	movs	r2, #32
    7218:	4313      	orrs	r3, r2
    721a:	7603      	strb	r3, [r0, #24]
    721c:	e7f3      	b.n	7206 <tc_register_callback+0x1a>
    721e:	Address 0x0000721e is out of bounds.


00007220 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    7220:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    7222:	0080      	lsls	r0, r0, #2
    7224:	4b16      	ldr	r3, [pc, #88]	; (7280 <_tc_interrupt_handler+0x60>)
    7226:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    7228:	6823      	ldr	r3, [r4, #0]
    722a:	7a9d      	ldrb	r5, [r3, #10]
    722c:	7e22      	ldrb	r2, [r4, #24]
    722e:	7e63      	ldrb	r3, [r4, #25]
    7230:	4013      	ands	r3, r2
    7232:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    7234:	07eb      	lsls	r3, r5, #31
    7236:	d406      	bmi.n	7246 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    7238:	07ab      	lsls	r3, r5, #30
    723a:	d40b      	bmi.n	7254 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    723c:	06eb      	lsls	r3, r5, #27
    723e:	d410      	bmi.n	7262 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    7240:	06ab      	lsls	r3, r5, #26
    7242:	d415      	bmi.n	7270 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    7244:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    7246:	0020      	movs	r0, r4
    7248:	68a3      	ldr	r3, [r4, #8]
    724a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    724c:	2301      	movs	r3, #1
    724e:	6822      	ldr	r2, [r4, #0]
    7250:	7293      	strb	r3, [r2, #10]
    7252:	e7f1      	b.n	7238 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    7254:	0020      	movs	r0, r4
    7256:	68e3      	ldr	r3, [r4, #12]
    7258:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    725a:	2302      	movs	r3, #2
    725c:	6822      	ldr	r2, [r4, #0]
    725e:	7293      	strb	r3, [r2, #10]
    7260:	e7ec      	b.n	723c <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    7262:	0020      	movs	r0, r4
    7264:	6923      	ldr	r3, [r4, #16]
    7266:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    7268:	2310      	movs	r3, #16
    726a:	6822      	ldr	r2, [r4, #0]
    726c:	7293      	strb	r3, [r2, #10]
    726e:	e7e7      	b.n	7240 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    7270:	0020      	movs	r0, r4
    7272:	6963      	ldr	r3, [r4, #20]
    7274:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    7276:	6823      	ldr	r3, [r4, #0]
    7278:	2220      	movs	r2, #32
    727a:	729a      	strb	r2, [r3, #10]
}
    727c:	e7e2      	b.n	7244 <_tc_interrupt_handler+0x24>
    727e:	46c0      	nop			; (mov r8, r8)
    7280:	20002140 	.word	0x20002140

00007284 <TC0_Handler>:
	_TC_INTERRUPT_HANDLER(0,0)
    7284:	b510      	push	{r4, lr}
    7286:	2000      	movs	r0, #0
    7288:	4b01      	ldr	r3, [pc, #4]	; (7290 <TC0_Handler+0xc>)
    728a:	4798      	blx	r3
    728c:	bd10      	pop	{r4, pc}
    728e:	46c0      	nop			; (mov r8, r8)
    7290:	00007221 	.word	0x00007221

00007294 <TC1_Handler>:
	_TC_INTERRUPT_HANDLER(1,1)
    7294:	b510      	push	{r4, lr}
    7296:	2001      	movs	r0, #1
    7298:	4b01      	ldr	r3, [pc, #4]	; (72a0 <TC1_Handler+0xc>)
    729a:	4798      	blx	r3
    729c:	bd10      	pop	{r4, pc}
    729e:	46c0      	nop			; (mov r8, r8)
    72a0:	00007221 	.word	0x00007221

000072a4 <TC4_Handler>:
	_TC_INTERRUPT_HANDLER(4,2)
    72a4:	b510      	push	{r4, lr}
    72a6:	2002      	movs	r0, #2
    72a8:	4b01      	ldr	r3, [pc, #4]	; (72b0 <TC4_Handler+0xc>)
    72aa:	4798      	blx	r3
    72ac:	bd10      	pop	{r4, pc}
    72ae:	46c0      	nop			; (mov r8, r8)
    72b0:	00007221 	.word	0x00007221

000072b4 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    72b4:	b530      	push	{r4, r5, lr}
    72b6:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    72b8:	a901      	add	r1, sp, #4
    72ba:	4b0c      	ldr	r3, [pc, #48]	; (72ec <_tc_get_inst_index+0x38>)
    72bc:	000a      	movs	r2, r1
    72be:	cb32      	ldmia	r3!, {r1, r4, r5}
    72c0:	c232      	stmia	r2!, {r1, r4, r5}
    72c2:	cb12      	ldmia	r3!, {r1, r4}
    72c4:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    72c6:	9b01      	ldr	r3, [sp, #4]
    72c8:	4298      	cmp	r0, r3
    72ca:	d00b      	beq.n	72e4 <_tc_get_inst_index+0x30>
    72cc:	2301      	movs	r3, #1
    72ce:	a901      	add	r1, sp, #4
    72d0:	009a      	lsls	r2, r3, #2
    72d2:	5852      	ldr	r2, [r2, r1]
    72d4:	4282      	cmp	r2, r0
    72d6:	d006      	beq.n	72e6 <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    72d8:	3301      	adds	r3, #1
    72da:	2b05      	cmp	r3, #5
    72dc:	d1f8      	bne.n	72d0 <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    72de:	2000      	movs	r0, #0
}
    72e0:	b007      	add	sp, #28
    72e2:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    72e4:	2300      	movs	r3, #0
			return i;
    72e6:	b2d8      	uxtb	r0, r3
    72e8:	e7fa      	b.n	72e0 <_tc_get_inst_index+0x2c>
    72ea:	46c0      	nop			; (mov r8, r8)
    72ec:	000184fc 	.word	0x000184fc

000072f0 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    72f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    72f2:	46c6      	mov	lr, r8
    72f4:	b500      	push	{lr}
    72f6:	b08e      	sub	sp, #56	; 0x38
    72f8:	0004      	movs	r4, r0
    72fa:	000d      	movs	r5, r1
    72fc:	0016      	movs	r6, r2
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    72fe:	0008      	movs	r0, r1
    7300:	4bae      	ldr	r3, [pc, #696]	; (75bc <tc_init+0x2cc>)
    7302:	4798      	blx	r3
    7304:	4680      	mov	r8, r0
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC4};
#elif (SAML21J) || (SAMR34J) || (SAMR35J) || (WLR089U0)
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC2_GCLK_ID, TC3_GCLK_ID, TC4_GCLK_ID};
    7306:	ab0c      	add	r3, sp, #48	; 0x30
    7308:	221b      	movs	r2, #27
    730a:	701a      	strb	r2, [r3, #0]
    730c:	705a      	strb	r2, [r3, #1]
    730e:	3201      	adds	r2, #1
    7310:	709a      	strb	r2, [r3, #2]
    7312:	70da      	strb	r2, [r3, #3]
    7314:	3201      	adds	r2, #1
    7316:	711a      	strb	r2, [r3, #4]
	/* Array of MCLK APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    7318:	a902      	add	r1, sp, #8
    731a:	4ba9      	ldr	r3, [pc, #676]	; (75c0 <tc_init+0x2d0>)
    731c:	3314      	adds	r3, #20
    731e:	000a      	movs	r2, r1
    7320:	cb83      	ldmia	r3!, {r0, r1, r7}
    7322:	c283      	stmia	r2!, {r0, r1, r7}
    7324:	cb83      	ldmia	r3!, {r0, r1, r7}
    7326:	c283      	stmia	r2!, {r0, r1, r7}
    7328:	cb83      	ldmia	r3!, {r0, r1, r7}
    732a:	c283      	stmia	r2!, {r0, r1, r7}
    732c:	681b      	ldr	r3, [r3, #0]
    732e:	6013      	str	r3, [r2, #0]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    7330:	2300      	movs	r3, #0
    7332:	60a3      	str	r3, [r4, #8]
    7334:	60e3      	str	r3, [r4, #12]
    7336:	6123      	str	r3, [r4, #16]
    7338:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    733a:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    733c:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    733e:	4643      	mov	r3, r8
    7340:	009a      	lsls	r2, r3, #2
    7342:	4ba0      	ldr	r3, [pc, #640]	; (75c4 <tc_init+0x2d4>)
    7344:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    7346:	6025      	str	r5, [r4, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    7348:	2334      	movs	r3, #52	; 0x34
    734a:	5cf3      	ldrb	r3, [r6, r3]
    734c:	76a3      	strb	r3, [r4, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    734e:	78f3      	ldrb	r3, [r6, #3]
    7350:	2b08      	cmp	r3, #8
    7352:	d008      	beq.n	7366 <tc_init+0x76>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    7354:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    7356:	682b      	ldr	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    7358:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    735a:	07db      	lsls	r3, r3, #31
    735c:	d508      	bpl.n	7370 <tc_init+0x80>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    735e:	b00e      	add	sp, #56	; 0x38
    7360:	bc04      	pop	{r2}
    7362:	4690      	mov	r8, r2
    7364:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    7366:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    7368:	4642      	mov	r2, r8
    736a:	07d2      	lsls	r2, r2, #31
    736c:	d4f7      	bmi.n	735e <tc_init+0x6e>
    736e:	e7f1      	b.n	7354 <tc_init+0x64>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    7370:	7aeb      	ldrb	r3, [r5, #11]
		return STATUS_ERR_DENIED;
    7372:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    7374:	079b      	lsls	r3, r3, #30
    7376:	d4f2      	bmi.n	735e <tc_init+0x6e>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    7378:	682b      	ldr	r3, [r5, #0]
    737a:	079b      	lsls	r3, r3, #30
    737c:	d4ef      	bmi.n	735e <tc_init+0x6e>
	if (config->pwm_channel[0].enabled) {
    737e:	7c33      	ldrb	r3, [r6, #16]
    7380:	2b00      	cmp	r3, #0
    7382:	d112      	bne.n	73aa <tc_init+0xba>
	if (config->pwm_channel[1].enabled) {
    7384:	7f33      	ldrb	r3, [r6, #28]
    7386:	2b00      	cmp	r3, #0
    7388:	d11b      	bne.n	73c2 <tc_init+0xd2>
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    738a:	4643      	mov	r3, r8
    738c:	005a      	lsls	r2, r3, #1
    738e:	a902      	add	r1, sp, #8
    7390:	1c53      	adds	r3, r2, #1
    7392:	009b      	lsls	r3, r3, #2
    7394:	5858      	ldr	r0, [r3, r1]
    7396:	4643      	mov	r3, r8
    7398:	00db      	lsls	r3, r3, #3
    739a:	585b      	ldr	r3, [r3, r1]
	switch (bus) {
    739c:	b2d9      	uxtb	r1, r3
    739e:	2904      	cmp	r1, #4
    73a0:	d823      	bhi.n	73ea <tc_init+0xfa>
    73a2:	008b      	lsls	r3, r1, #2
    73a4:	4988      	ldr	r1, [pc, #544]	; (75c8 <tc_init+0x2d8>)
    73a6:	58cb      	ldr	r3, [r1, r3]
    73a8:	469f      	mov	pc, r3
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    73aa:	a901      	add	r1, sp, #4
    73ac:	2301      	movs	r3, #1
    73ae:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    73b0:	2200      	movs	r2, #0
    73b2:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    73b4:	7e32      	ldrb	r2, [r6, #24]
    73b6:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    73b8:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    73ba:	7d30      	ldrb	r0, [r6, #20]
    73bc:	4b83      	ldr	r3, [pc, #524]	; (75cc <tc_init+0x2dc>)
    73be:	4798      	blx	r3
    73c0:	e7e0      	b.n	7384 <tc_init+0x94>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    73c2:	a901      	add	r1, sp, #4
    73c4:	2301      	movs	r3, #1
    73c6:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    73c8:	2200      	movs	r2, #0
    73ca:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    73cc:	3224      	adds	r2, #36	; 0x24
    73ce:	18b2      	adds	r2, r6, r2
    73d0:	7812      	ldrb	r2, [r2, #0]
    73d2:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    73d4:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    73d6:	331f      	adds	r3, #31
    73d8:	18f3      	adds	r3, r6, r3
    73da:	7818      	ldrb	r0, [r3, #0]
    73dc:	4b7b      	ldr	r3, [pc, #492]	; (75cc <tc_init+0x2dc>)
    73de:	4798      	blx	r3
    73e0:	e7d3      	b.n	738a <tc_init+0x9a>
			MCLK->APBAMASK.reg |= mask;
    73e2:	497b      	ldr	r1, [pc, #492]	; (75d0 <tc_init+0x2e0>)
    73e4:	694b      	ldr	r3, [r1, #20]
    73e6:	4318      	orrs	r0, r3
    73e8:	6148      	str	r0, [r1, #20]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    73ea:	78f3      	ldrb	r3, [r6, #3]
    73ec:	2b08      	cmp	r3, #8
    73ee:	d100      	bne.n	73f2 <tc_init+0x102>
    73f0:	e086      	b.n	7500 <tc_init+0x210>
	gclk_chan_config.source_generator = config->clock_source;
    73f2:	7833      	ldrb	r3, [r6, #0]
    73f4:	466a      	mov	r2, sp
    73f6:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    73f8:	ab0c      	add	r3, sp, #48	; 0x30
    73fa:	4642      	mov	r2, r8
    73fc:	5c9f      	ldrb	r7, [r3, r2]
    73fe:	4669      	mov	r1, sp
    7400:	0038      	movs	r0, r7
    7402:	4b74      	ldr	r3, [pc, #464]	; (75d4 <tc_init+0x2e4>)
    7404:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    7406:	0038      	movs	r0, r7
    7408:	4b73      	ldr	r3, [pc, #460]	; (75d8 <tc_init+0x2e8>)
    740a:	4798      	blx	r3
			(uint32_t)config->counter_size |
    740c:	78f3      	ldrb	r3, [r6, #3]
    740e:	79f2      	ldrb	r2, [r6, #7]
    7410:	4313      	orrs	r3, r2
			(uint32_t)config->clock_prescaler;
    7412:	88b2      	ldrh	r2, [r6, #4]
	ctrla_tmp =
    7414:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    7416:	7a72      	ldrb	r2, [r6, #9]
    7418:	2a00      	cmp	r2, #0
    741a:	d002      	beq.n	7422 <tc_init+0x132>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    741c:	2280      	movs	r2, #128	; 0x80
    741e:	0252      	lsls	r2, r2, #9
    7420:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    7422:	7ab2      	ldrb	r2, [r6, #10]
    7424:	2a00      	cmp	r2, #0
    7426:	d002      	beq.n	742e <tc_init+0x13e>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    7428:	2280      	movs	r2, #128	; 0x80
    742a:	0292      	lsls	r2, r2, #10
    742c:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    742e:	7af2      	ldrb	r2, [r6, #11]
    7430:	2a00      	cmp	r2, #0
    7432:	d002      	beq.n	743a <tc_init+0x14a>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    7434:	2280      	movs	r2, #128	; 0x80
    7436:	0352      	lsls	r2, r2, #13
    7438:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    743a:	7b32      	ldrb	r2, [r6, #12]
    743c:	2a00      	cmp	r2, #0
    743e:	d002      	beq.n	7446 <tc_init+0x156>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    7440:	2280      	movs	r2, #128	; 0x80
    7442:	0392      	lsls	r2, r2, #14
    7444:	4313      	orrs	r3, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    7446:	7871      	ldrb	r1, [r6, #1]
    7448:	0189      	lsls	r1, r1, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    744a:	78b2      	ldrb	r2, [r6, #2]
    744c:	01d2      	lsls	r2, r2, #7
    744e:	4311      	orrs	r1, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    7450:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    7452:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	return (tc_module->SYNCBUSY.reg);
    7454:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    7456:	2b00      	cmp	r3, #0
    7458:	d1fc      	bne.n	7454 <tc_init+0x164>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    745a:	6029      	str	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    745c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    745e:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    7460:	2b00      	cmp	r3, #0
    7462:	d1fc      	bne.n	745e <tc_init+0x16e>
	hw->COUNT8.WAVE.reg = config->wave_generation;
    7464:	79b3      	ldrb	r3, [r6, #6]
    7466:	732b      	strb	r3, [r5, #12]
	if (config->oneshot) {
    7468:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    746a:	1e4b      	subs	r3, r1, #1
    746c:	4199      	sbcs	r1, r3
    746e:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    7470:	7bb3      	ldrb	r3, [r6, #14]
    7472:	2b00      	cmp	r3, #0
    7474:	d001      	beq.n	747a <tc_init+0x18a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    7476:	2301      	movs	r3, #1
    7478:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    747a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    747c:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    747e:	2b00      	cmp	r3, #0
    7480:	d1fc      	bne.n	747c <tc_init+0x18c>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    7482:	33ff      	adds	r3, #255	; 0xff
    7484:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    7486:	2900      	cmp	r1, #0
    7488:	d004      	beq.n	7494 <tc_init+0x1a4>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    748a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    748c:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
    748e:	2b00      	cmp	r3, #0
    7490:	d1fc      	bne.n	748c <tc_init+0x19c>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    7492:	7169      	strb	r1, [r5, #5]
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    7494:	7a33      	ldrb	r3, [r6, #8]
    7496:	736b      	strb	r3, [r5, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    7498:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    749a:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    749c:	2b00      	cmp	r3, #0
    749e:	d1fc      	bne.n	749a <tc_init+0x1aa>
	switch (module_inst->counter_size) {
    74a0:	7923      	ldrb	r3, [r4, #4]
    74a2:	2b04      	cmp	r3, #4
    74a4:	d059      	beq.n	755a <tc_init+0x26a>
    74a6:	2b08      	cmp	r3, #8
    74a8:	d074      	beq.n	7594 <tc_init+0x2a4>
	return STATUS_ERR_INVALID_ARG;
    74aa:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    74ac:	2b00      	cmp	r3, #0
    74ae:	d000      	beq.n	74b2 <tc_init+0x1c2>
    74b0:	e755      	b.n	735e <tc_init+0x6e>
    74b2:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    74b4:	2b00      	cmp	r3, #0
    74b6:	d1fc      	bne.n	74b2 <tc_init+0x1c2>
				= config->counter_16_bit.value;
    74b8:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    74ba:	82ab      	strh	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    74bc:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    74be:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    74c0:	2b00      	cmp	r3, #0
    74c2:	d1fc      	bne.n	74be <tc_init+0x1ce>
					config->counter_16_bit.compare_capture_channel[0];
    74c4:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    74c6:	83ab      	strh	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    74c8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    74ca:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    74cc:	2b00      	cmp	r3, #0
    74ce:	d1fc      	bne.n	74ca <tc_init+0x1da>
					config->counter_16_bit.compare_capture_channel[1];
    74d0:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    74d2:	83eb      	strh	r3, [r5, #30]
			return STATUS_OK;
    74d4:	2000      	movs	r0, #0
    74d6:	e742      	b.n	735e <tc_init+0x6e>
			MCLK->APBBMASK.reg |= mask;
    74d8:	493d      	ldr	r1, [pc, #244]	; (75d0 <tc_init+0x2e0>)
    74da:	698b      	ldr	r3, [r1, #24]
    74dc:	4318      	orrs	r0, r3
    74de:	6188      	str	r0, [r1, #24]
    74e0:	e783      	b.n	73ea <tc_init+0xfa>
			MCLK->APBCMASK.reg |= mask;
    74e2:	493b      	ldr	r1, [pc, #236]	; (75d0 <tc_init+0x2e0>)
    74e4:	69cb      	ldr	r3, [r1, #28]
    74e6:	4318      	orrs	r0, r3
    74e8:	61c8      	str	r0, [r1, #28]
    74ea:	e77e      	b.n	73ea <tc_init+0xfa>
			MCLK->APBDMASK.reg |= mask;
    74ec:	4938      	ldr	r1, [pc, #224]	; (75d0 <tc_init+0x2e0>)
    74ee:	6a0b      	ldr	r3, [r1, #32]
    74f0:	4318      	orrs	r0, r3
    74f2:	6208      	str	r0, [r1, #32]
    74f4:	e779      	b.n	73ea <tc_init+0xfa>
			MCLK->APBEMASK.reg |= mask;
    74f6:	4b36      	ldr	r3, [pc, #216]	; (75d0 <tc_init+0x2e0>)
    74f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
    74fa:	4308      	orrs	r0, r1
    74fc:	6258      	str	r0, [r3, #36]	; 0x24
    74fe:	e774      	b.n	73ea <tc_init+0xfa>
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    7500:	4643      	mov	r3, r8
    7502:	3301      	adds	r3, #1
    7504:	2b04      	cmp	r3, #4
    7506:	dd00      	ble.n	750a <tc_init+0x21a>
    7508:	e773      	b.n	73f2 <tc_init+0x102>
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    750a:	ab02      	add	r3, sp, #8
    750c:	1cd1      	adds	r1, r2, #3
    750e:	0089      	lsls	r1, r1, #2
    7510:	58c9      	ldr	r1, [r1, r3]
    7512:	3202      	adds	r2, #2
    7514:	0092      	lsls	r2, r2, #2
    7516:	58d3      	ldr	r3, [r2, r3]
	switch (bus) {
    7518:	b2da      	uxtb	r2, r3
    751a:	2a04      	cmp	r2, #4
    751c:	d900      	bls.n	7520 <tc_init+0x230>
    751e:	e768      	b.n	73f2 <tc_init+0x102>
    7520:	0093      	lsls	r3, r2, #2
    7522:	4a2e      	ldr	r2, [pc, #184]	; (75dc <tc_init+0x2ec>)
    7524:	58d3      	ldr	r3, [r2, r3]
    7526:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    7528:	4a29      	ldr	r2, [pc, #164]	; (75d0 <tc_init+0x2e0>)
    752a:	6953      	ldr	r3, [r2, #20]
    752c:	4319      	orrs	r1, r3
    752e:	6151      	str	r1, [r2, #20]
    7530:	e75f      	b.n	73f2 <tc_init+0x102>
			MCLK->APBBMASK.reg |= mask;
    7532:	4a27      	ldr	r2, [pc, #156]	; (75d0 <tc_init+0x2e0>)
    7534:	6993      	ldr	r3, [r2, #24]
    7536:	4319      	orrs	r1, r3
    7538:	6191      	str	r1, [r2, #24]
    753a:	e75a      	b.n	73f2 <tc_init+0x102>
			MCLK->APBCMASK.reg |= mask;
    753c:	4a24      	ldr	r2, [pc, #144]	; (75d0 <tc_init+0x2e0>)
    753e:	69d3      	ldr	r3, [r2, #28]
    7540:	4319      	orrs	r1, r3
    7542:	61d1      	str	r1, [r2, #28]
    7544:	e755      	b.n	73f2 <tc_init+0x102>
			MCLK->APBDMASK.reg |= mask;
    7546:	4a22      	ldr	r2, [pc, #136]	; (75d0 <tc_init+0x2e0>)
    7548:	6a13      	ldr	r3, [r2, #32]
    754a:	4319      	orrs	r1, r3
    754c:	6211      	str	r1, [r2, #32]
    754e:	e750      	b.n	73f2 <tc_init+0x102>
			MCLK->APBEMASK.reg |= mask;
    7550:	4b1f      	ldr	r3, [pc, #124]	; (75d0 <tc_init+0x2e0>)
    7552:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    7554:	4311      	orrs	r1, r2
    7556:	6259      	str	r1, [r3, #36]	; 0x24
    7558:	e74b      	b.n	73f2 <tc_init+0x102>
    755a:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    755c:	2b00      	cmp	r3, #0
    755e:	d1fc      	bne.n	755a <tc_init+0x26a>
					config->counter_8_bit.value;
    7560:	3328      	adds	r3, #40	; 0x28
    7562:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    7564:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    7566:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    7568:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    756a:	2b00      	cmp	r3, #0
    756c:	d1fc      	bne.n	7568 <tc_init+0x278>
					config->counter_8_bit.period;
    756e:	3329      	adds	r3, #41	; 0x29
    7570:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    7572:	76eb      	strb	r3, [r5, #27]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    7574:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    7576:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    7578:	2b00      	cmp	r3, #0
    757a:	d1fc      	bne.n	7576 <tc_init+0x286>
					config->counter_8_bit.compare_capture_channel[0];
    757c:	332a      	adds	r3, #42	; 0x2a
    757e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    7580:	772b      	strb	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    7582:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    7584:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    7586:	2b00      	cmp	r3, #0
    7588:	d1fc      	bne.n	7584 <tc_init+0x294>
					config->counter_8_bit.compare_capture_channel[1];
    758a:	332b      	adds	r3, #43	; 0x2b
    758c:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    758e:	776b      	strb	r3, [r5, #29]
			return STATUS_OK;
    7590:	2000      	movs	r0, #0
    7592:	e6e4      	b.n	735e <tc_init+0x6e>
    7594:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    7596:	2b00      	cmp	r3, #0
    7598:	d1fc      	bne.n	7594 <tc_init+0x2a4>
				= config->counter_32_bit.value;
    759a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    759c:	616b      	str	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    759e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    75a0:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    75a2:	2b00      	cmp	r3, #0
    75a4:	d1fc      	bne.n	75a0 <tc_init+0x2b0>
			hw->COUNT32.CC[0].reg =
    75a6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    75a8:	61eb      	str	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    75aa:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    75ac:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    75ae:	2b00      	cmp	r3, #0
    75b0:	d1fc      	bne.n	75ac <tc_init+0x2bc>
					config->counter_32_bit.compare_capture_channel[1];
    75b2:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    75b4:	622b      	str	r3, [r5, #32]
			return STATUS_OK;
    75b6:	2000      	movs	r0, #0
    75b8:	e6d1      	b.n	735e <tc_init+0x6e>
    75ba:	46c0      	nop			; (mov r8, r8)
    75bc:	000072b5 	.word	0x000072b5
    75c0:	000184fc 	.word	0x000184fc
    75c4:	20002140 	.word	0x20002140
    75c8:	000184d4 	.word	0x000184d4
    75cc:	0000718d 	.word	0x0000718d
    75d0:	40000400 	.word	0x40000400
    75d4:	00007091 	.word	0x00007091
    75d8:	00007021 	.word	0x00007021
    75dc:	000184e8 	.word	0x000184e8

000075e0 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    75e0:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    75e2:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    75e4:	2b00      	cmp	r3, #0
    75e6:	d1fc      	bne.n	75e2 <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    75e8:	7113      	strb	r3, [r2, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    75ea:	6801      	ldr	r1, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    75ec:	690b      	ldr	r3, [r1, #16]

	while (tc_is_syncing(module_inst)) {
    75ee:	2b00      	cmp	r3, #0
    75f0:	d1fc      	bne.n	75ec <tc_get_count_value+0xc>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_READSYNC_Val);
    75f2:	3380      	adds	r3, #128	; 0x80
    75f4:	7153      	strb	r3, [r2, #5]
#if (SAMC20) || (SAMC21) || (SAML21) || (SAML22) || (SAMR30) || (SAMR34) || (WLR089)
	/* wait for the CMD bits in CTRLBSET to be cleared, meaning the CMD has been executed */
	while(tc_module->CTRLBSET.reg & TC_CTRLBSET_CMD_READSYNC);	
    75f6:	7953      	ldrb	r3, [r2, #5]
    75f8:	b25b      	sxtb	r3, r3
    75fa:	2b00      	cmp	r3, #0
    75fc:	dbfb      	blt.n	75f6 <tc_get_count_value+0x16>

	/* Read synchronization */
	tc_sync_read_count(module_inst);
	
	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    75fe:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    7600:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    7602:	2b00      	cmp	r3, #0
    7604:	d1fc      	bne.n	7600 <tc_get_count_value+0x20>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    7606:	7903      	ldrb	r3, [r0, #4]
    7608:	2b04      	cmp	r3, #4
    760a:	d005      	beq.n	7618 <tc_get_count_value+0x38>
    760c:	2b08      	cmp	r3, #8
    760e:	d009      	beq.n	7624 <tc_get_count_value+0x44>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    7610:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    7612:	2b00      	cmp	r3, #0
    7614:	d003      	beq.n	761e <tc_get_count_value+0x3e>
}
    7616:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    7618:	7d10      	ldrb	r0, [r2, #20]
    761a:	b2c0      	uxtb	r0, r0
    761c:	e7fb      	b.n	7616 <tc_get_count_value+0x36>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    761e:	8a90      	ldrh	r0, [r2, #20]
    7620:	b280      	uxth	r0, r0
    7622:	e7f8      	b.n	7616 <tc_get_count_value+0x36>
			return tc_module->COUNT32.COUNT.reg;
    7624:	6950      	ldr	r0, [r2, #20]
    7626:	e7f6      	b.n	7616 <tc_get_count_value+0x36>

00007628 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    7628:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(compare);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    762a:	6804      	ldr	r4, [r0, #0]
    762c:	6923      	ldr	r3, [r4, #16]

	while (tc_is_syncing(module_inst)) {
    762e:	2b00      	cmp	r3, #0
    7630:	d1fc      	bne.n	762c <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    7632:	7903      	ldrb	r3, [r0, #4]
    7634:	2b04      	cmp	r3, #4
    7636:	d006      	beq.n	7646 <tc_set_compare_value+0x1e>
    7638:	2b08      	cmp	r3, #8
    763a:	d028      	beq.n	768e <tc_set_compare_value+0x66>
    763c:	2b00      	cmp	r3, #0
    763e:	d013      	beq.n	7668 <tc_set_compare_value+0x40>
				}
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    7640:	2317      	movs	r3, #23
}
    7642:	0018      	movs	r0, r3
    7644:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    7646:	2317      	movs	r3, #23
			if (channel_index <
    7648:	2901      	cmp	r1, #1
    764a:	d8fa      	bhi.n	7642 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    764c:	7e83      	ldrb	r3, [r0, #26]
    764e:	2b00      	cmp	r3, #0
    7650:	d005      	beq.n	765e <tc_set_compare_value+0x36>
							(uint8_t)compare;
    7652:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CCBUF[channel_index].reg =
    7654:	1861      	adds	r1, r4, r1
    7656:	3130      	adds	r1, #48	; 0x30
    7658:	700a      	strb	r2, [r1, #0]
				return STATUS_OK;
    765a:	2300      	movs	r3, #0
    765c:	e7f1      	b.n	7642 <tc_set_compare_value+0x1a>
							(uint8_t)compare;
    765e:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CC[channel_index].reg  =
    7660:	1864      	adds	r4, r4, r1
    7662:	7722      	strb	r2, [r4, #28]
				return STATUS_OK;
    7664:	2300      	movs	r3, #0
    7666:	e7ec      	b.n	7642 <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    7668:	2317      	movs	r3, #23
			if (channel_index <
    766a:	2901      	cmp	r1, #1
    766c:	d8e9      	bhi.n	7642 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    766e:	7e83      	ldrb	r3, [r0, #26]
    7670:	2b00      	cmp	r3, #0
    7672:	d005      	beq.n	7680 <tc_set_compare_value+0x58>
							(uint16_t)compare;
    7674:	b292      	uxth	r2, r2
					tc_module->COUNT16.CCBUF[channel_index].reg =
    7676:	3118      	adds	r1, #24
    7678:	0049      	lsls	r1, r1, #1
    767a:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    767c:	2300      	movs	r3, #0
    767e:	e7e0      	b.n	7642 <tc_set_compare_value+0x1a>
							(uint16_t)compare;
    7680:	b292      	uxth	r2, r2
					tc_module->COUNT16.CC[channel_index].reg =
    7682:	310c      	adds	r1, #12
    7684:	0049      	lsls	r1, r1, #1
    7686:	1864      	adds	r4, r4, r1
    7688:	80a2      	strh	r2, [r4, #4]
				return STATUS_OK;
    768a:	2300      	movs	r3, #0
    768c:	e7d9      	b.n	7642 <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    768e:	2317      	movs	r3, #23
			if (channel_index <
    7690:	2901      	cmp	r1, #1
    7692:	d8d6      	bhi.n	7642 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    7694:	7e83      	ldrb	r3, [r0, #26]
    7696:	2b00      	cmp	r3, #0
    7698:	d105      	bne.n	76a6 <tc_set_compare_value+0x7e>
					tc_module->COUNT32.CC[channel_index].reg =
    769a:	3106      	adds	r1, #6
    769c:	0089      	lsls	r1, r1, #2
    769e:	1864      	adds	r4, r4, r1
    76a0:	6062      	str	r2, [r4, #4]
				return STATUS_OK;
    76a2:	2300      	movs	r3, #0
    76a4:	e7cd      	b.n	7642 <tc_set_compare_value+0x1a>
					tc_module->COUNT32.CCBUF[channel_index].reg =
    76a6:	310c      	adds	r1, #12
    76a8:	0089      	lsls	r1, r1, #2
    76aa:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    76ac:	2300      	movs	r3, #0
    76ae:	e7c8      	b.n	7642 <tc_set_compare_value+0x1a>

000076b0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    76b0:	e7fe      	b.n	76b0 <Dummy_Handler>
    76b2:	Address 0x000076b2 is out of bounds.


000076b4 <Reset_Handler>:
{
    76b4:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    76b6:	4a1a      	ldr	r2, [pc, #104]	; (7720 <Reset_Handler+0x6c>)
    76b8:	4b1a      	ldr	r3, [pc, #104]	; (7724 <Reset_Handler+0x70>)
    76ba:	429a      	cmp	r2, r3
    76bc:	d011      	beq.n	76e2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    76be:	001a      	movs	r2, r3
    76c0:	4b19      	ldr	r3, [pc, #100]	; (7728 <Reset_Handler+0x74>)
    76c2:	429a      	cmp	r2, r3
    76c4:	d20d      	bcs.n	76e2 <Reset_Handler+0x2e>
    76c6:	4a19      	ldr	r2, [pc, #100]	; (772c <Reset_Handler+0x78>)
    76c8:	3303      	adds	r3, #3
    76ca:	1a9b      	subs	r3, r3, r2
    76cc:	089b      	lsrs	r3, r3, #2
    76ce:	3301      	adds	r3, #1
    76d0:	009b      	lsls	r3, r3, #2
    76d2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    76d4:	4813      	ldr	r0, [pc, #76]	; (7724 <Reset_Handler+0x70>)
    76d6:	4912      	ldr	r1, [pc, #72]	; (7720 <Reset_Handler+0x6c>)
    76d8:	588c      	ldr	r4, [r1, r2]
    76da:	5084      	str	r4, [r0, r2]
    76dc:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    76de:	429a      	cmp	r2, r3
    76e0:	d1fa      	bne.n	76d8 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    76e2:	4a13      	ldr	r2, [pc, #76]	; (7730 <Reset_Handler+0x7c>)
    76e4:	4b13      	ldr	r3, [pc, #76]	; (7734 <Reset_Handler+0x80>)
    76e6:	429a      	cmp	r2, r3
    76e8:	d20a      	bcs.n	7700 <Reset_Handler+0x4c>
    76ea:	43d3      	mvns	r3, r2
    76ec:	4911      	ldr	r1, [pc, #68]	; (7734 <Reset_Handler+0x80>)
    76ee:	185b      	adds	r3, r3, r1
    76f0:	2103      	movs	r1, #3
    76f2:	438b      	bics	r3, r1
    76f4:	3304      	adds	r3, #4
    76f6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    76f8:	2100      	movs	r1, #0
    76fa:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    76fc:	4293      	cmp	r3, r2
    76fe:	d1fc      	bne.n	76fa <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    7700:	4a0d      	ldr	r2, [pc, #52]	; (7738 <Reset_Handler+0x84>)
    7702:	21ff      	movs	r1, #255	; 0xff
    7704:	4b0d      	ldr	r3, [pc, #52]	; (773c <Reset_Handler+0x88>)
    7706:	438b      	bics	r3, r1
    7708:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    770a:	4a0d      	ldr	r2, [pc, #52]	; (7740 <Reset_Handler+0x8c>)
    770c:	6853      	ldr	r3, [r2, #4]
    770e:	397f      	subs	r1, #127	; 0x7f
    7710:	430b      	orrs	r3, r1
    7712:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    7714:	4b0b      	ldr	r3, [pc, #44]	; (7744 <Reset_Handler+0x90>)
    7716:	4798      	blx	r3
        main();
    7718:	4b0b      	ldr	r3, [pc, #44]	; (7748 <Reset_Handler+0x94>)
    771a:	4798      	blx	r3
    771c:	e7fe      	b.n	771c <Reset_Handler+0x68>
    771e:	46c0      	nop			; (mov r8, r8)
    7720:	00019548 	.word	0x00019548
    7724:	20000000 	.word	0x20000000
    7728:	20000090 	.word	0x20000090
    772c:	20000004 	.word	0x20000004
    7730:	20000090 	.word	0x20000090
    7734:	200036b4 	.word	0x200036b4
    7738:	e000ed00 	.word	0xe000ed00
    773c:	00000000 	.word	0x00000000
    7740:	41004000 	.word	0x41004000
    7744:	000169a9 	.word	0x000169a9
    7748:	00007d99 	.word	0x00007d99

0000774c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    774c:	b5f0      	push	{r4, r5, r6, r7, lr}
    774e:	46c6      	mov	lr, r8
    7750:	b500      	push	{lr}
    7752:	000c      	movs	r4, r1
    7754:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    7756:	2800      	cmp	r0, #0
    7758:	d10f      	bne.n	777a <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    775a:	2a00      	cmp	r2, #0
    775c:	dd11      	ble.n	7782 <_read+0x36>
    775e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    7760:	4e09      	ldr	r6, [pc, #36]	; (7788 <_read+0x3c>)
    7762:	4d0a      	ldr	r5, [pc, #40]	; (778c <_read+0x40>)
    7764:	6830      	ldr	r0, [r6, #0]
    7766:	0021      	movs	r1, r4
    7768:	682b      	ldr	r3, [r5, #0]
    776a:	4798      	blx	r3
		ptr++;
    776c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    776e:	42bc      	cmp	r4, r7
    7770:	d1f8      	bne.n	7764 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    7772:	4640      	mov	r0, r8
    7774:	bc04      	pop	{r2}
    7776:	4690      	mov	r8, r2
    7778:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    777a:	2301      	movs	r3, #1
    777c:	425b      	negs	r3, r3
    777e:	4698      	mov	r8, r3
    7780:	e7f7      	b.n	7772 <_read+0x26>
	for (; len > 0; --len) {
    7782:	4680      	mov	r8, r0
    7784:	e7f5      	b.n	7772 <_read+0x26>
    7786:	46c0      	nop			; (mov r8, r8)
    7788:	2000215c 	.word	0x2000215c
    778c:	20002154 	.word	0x20002154

00007790 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    7790:	b5f0      	push	{r4, r5, r6, r7, lr}
    7792:	46c6      	mov	lr, r8
    7794:	b500      	push	{lr}
    7796:	000e      	movs	r6, r1
    7798:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    779a:	3801      	subs	r0, #1
    779c:	2802      	cmp	r0, #2
    779e:	d810      	bhi.n	77c2 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    77a0:	2a00      	cmp	r2, #0
    77a2:	d011      	beq.n	77c8 <_write+0x38>
    77a4:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    77a6:	4b0c      	ldr	r3, [pc, #48]	; (77d8 <_write+0x48>)
    77a8:	4698      	mov	r8, r3
    77aa:	4f0c      	ldr	r7, [pc, #48]	; (77dc <_write+0x4c>)
    77ac:	4643      	mov	r3, r8
    77ae:	6818      	ldr	r0, [r3, #0]
    77b0:	5d31      	ldrb	r1, [r6, r4]
    77b2:	683b      	ldr	r3, [r7, #0]
    77b4:	4798      	blx	r3
    77b6:	2800      	cmp	r0, #0
    77b8:	db08      	blt.n	77cc <_write+0x3c>
			return -1;
		}
		++nChars;
    77ba:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    77bc:	42a5      	cmp	r5, r4
    77be:	d1f5      	bne.n	77ac <_write+0x1c>
    77c0:	e006      	b.n	77d0 <_write+0x40>
		return -1;
    77c2:	2401      	movs	r4, #1
    77c4:	4264      	negs	r4, r4
    77c6:	e003      	b.n	77d0 <_write+0x40>
	for (; len != 0; --len) {
    77c8:	0014      	movs	r4, r2
    77ca:	e001      	b.n	77d0 <_write+0x40>
			return -1;
    77cc:	2401      	movs	r4, #1
    77ce:	4264      	negs	r4, r4
	}
	return nChars;
}
    77d0:	0020      	movs	r0, r4
    77d2:	bc04      	pop	{r2}
    77d4:	4690      	mov	r8, r2
    77d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    77d8:	2000215c 	.word	0x2000215c
    77dc:	20002158 	.word	0x20002158

000077e0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    77e0:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    77e2:	4a06      	ldr	r2, [pc, #24]	; (77fc <_sbrk+0x1c>)
    77e4:	6812      	ldr	r2, [r2, #0]
    77e6:	2a00      	cmp	r2, #0
    77e8:	d004      	beq.n	77f4 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    77ea:	4a04      	ldr	r2, [pc, #16]	; (77fc <_sbrk+0x1c>)
    77ec:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    77ee:	18c3      	adds	r3, r0, r3
    77f0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    77f2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    77f4:	4902      	ldr	r1, [pc, #8]	; (7800 <_sbrk+0x20>)
    77f6:	4a01      	ldr	r2, [pc, #4]	; (77fc <_sbrk+0x1c>)
    77f8:	6011      	str	r1, [r2, #0]
    77fa:	e7f6      	b.n	77ea <_sbrk+0xa>
    77fc:	200002fc 	.word	0x200002fc
    7800:	200056b8 	.word	0x200056b8

00007804 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    7804:	2001      	movs	r0, #1
    7806:	4240      	negs	r0, r0
    7808:	4770      	bx	lr

0000780a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    780a:	2380      	movs	r3, #128	; 0x80
    780c:	019b      	lsls	r3, r3, #6
    780e:	604b      	str	r3, [r1, #4]

	return 0;
}
    7810:	2000      	movs	r0, #0
    7812:	4770      	bx	lr

00007814 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    7814:	2001      	movs	r0, #1
    7816:	4770      	bx	lr

00007818 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    7818:	2000      	movs	r0, #0
    781a:	4770      	bx	lr

0000781c <_exit>:

extern void _exit(int status)
{
	asm("BKPT #0");
    781c:	be00      	bkpt	0x0000
    781e:	e7fe      	b.n	781e <_exit+0x2>

00007820 <_kill>:
}

extern void _kill(int pid, int sig)
{
	return;
}
    7820:	4770      	bx	lr

00007822 <_getpid>:

extern int _getpid(void)
{
	return -1;
}
    7822:	2001      	movs	r0, #1
    7824:	4240      	negs	r0, r0
    7826:	4770      	bx	lr

00007828 <sal_FillSubKey>:
		}
	}
}

static void sal_FillSubKey( uint8_t *source, uint8_t *key, uint8_t size)
{
    7828:	b530      	push	{r4, r5, lr}
	uint8_t i = 0;
	uint8_t carry = 0;

	i=size;

	while(i--)
    782a:	1e53      	subs	r3, r2, #1
    782c:	b2db      	uxtb	r3, r3
    782e:	2a00      	cmp	r2, #0
    7830:	d00b      	beq.n	784a <sal_FillSubKey+0x22>
    7832:	2400      	movs	r4, #0
	{
		key[i] = (source[i] << 1) | carry;
    7834:	18c5      	adds	r5, r0, r3
    7836:	782a      	ldrb	r2, [r5, #0]
    7838:	0052      	lsls	r2, r2, #1
    783a:	4322      	orrs	r2, r4
    783c:	54ca      	strb	r2, [r1, r3]
		carry = !!(source[i] & 0x80);
    783e:	782c      	ldrb	r4, [r5, #0]
    7840:	09e4      	lsrs	r4, r4, #7
	while(i--)
    7842:	3b01      	subs	r3, #1
    7844:	b2db      	uxtb	r3, r3
    7846:	2bff      	cmp	r3, #255	; 0xff
    7848:	d1f4      	bne.n	7834 <sal_FillSubKey+0xc>
	}
}
    784a:	bd30      	pop	{r4, r5, pc}

0000784c <SAL_AESEncode>:
{
    784c:	b510      	push	{r4, lr}
    784e:	b084      	sub	sp, #16
    7850:	0004      	movs	r4, r0
    7852:	0011      	movs	r1, r2
	memcpy(useKey, key, sizeof(useKey));
    7854:	2210      	movs	r2, #16
    7856:	4668      	mov	r0, sp
    7858:	4b04      	ldr	r3, [pc, #16]	; (786c <SAL_AESEncode+0x20>)
    785a:	4798      	blx	r3
	AESEncode(buffer, useKey);
    785c:	4669      	mov	r1, sp
    785e:	0020      	movs	r0, r4
    7860:	4b03      	ldr	r3, [pc, #12]	; (7870 <SAL_AESEncode+0x24>)
    7862:	4798      	blx	r3
}
    7864:	2000      	movs	r0, #0
    7866:	b004      	add	sp, #16
    7868:	bd10      	pop	{r4, pc}
    786a:	46c0      	nop			; (mov r8, r8)
    786c:	00016a0f 	.word	0x00016a0f
    7870:	0000d19d 	.word	0x0000d19d

00007874 <SAL_DeriveSessionKey>:
{
    7874:	b510      	push	{r4, lr}
	sal_status = SAL_AESEncode(block, src_key, key);
    7876:	4b01      	ldr	r3, [pc, #4]	; (787c <SAL_DeriveSessionKey+0x8>)
    7878:	4798      	blx	r3
}
    787a:	bd10      	pop	{r4, pc}
    787c:	0000784d 	.word	0x0000784d

00007880 <SAL_Read>:
}
    7880:	2000      	movs	r0, #0
    7882:	4770      	bx	lr

00007884 <SAL_AESCmac>:
{
    7884:	b5f0      	push	{r4, r5, r6, r7, lr}
    7886:	46d6      	mov	lr, sl
    7888:	464f      	mov	r7, r9
    788a:	4646      	mov	r6, r8
    788c:	b5c0      	push	{r6, r7, lr}
    788e:	b0a4      	sub	sp, #144	; 0x90
    7890:	9001      	str	r0, [sp, #4]
    7892:	000f      	movs	r7, r1
    7894:	9102      	str	r1, [sp, #8]
    7896:	9203      	str	r2, [sp, #12]
    7898:	469a      	mov	sl, r3
    789a:	ab2c      	add	r3, sp, #176	; 0xb0
    789c:	881c      	ldrh	r4, [r3, #0]
	uint8_t const_Rb[16] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    789e:	ae08      	add	r6, sp, #32
    78a0:	2210      	movs	r2, #16
    78a2:	2100      	movs	r1, #0
    78a4:	0030      	movs	r0, r6
    78a6:	4d64      	ldr	r5, [pc, #400]	; (7a38 <SAL_AESCmac+0x1b4>)
    78a8:	47a8      	blx	r5
    78aa:	2387      	movs	r3, #135	; 0x87
    78ac:	73f3      	strb	r3, [r6, #15]
	memset(l, 0, sizeof(l));
    78ae:	2210      	movs	r2, #16
    78b0:	2100      	movs	r1, #0
    78b2:	a804      	add	r0, sp, #16
    78b4:	47a8      	blx	r5
	SAL_AESEncode(l, key_type, key);
    78b6:	9a01      	ldr	r2, [sp, #4]
    78b8:	0039      	movs	r1, r7
    78ba:	a804      	add	r0, sp, #16
    78bc:	4b5f      	ldr	r3, [pc, #380]	; (7a3c <SAL_AESCmac+0x1b8>)
    78be:	4798      	blx	r3
	if ( (l[0] & 0x80) == 0x00 )  // MSB( bufferLocal[0] ) is '0'
    78c0:	ab04      	add	r3, sp, #16
    78c2:	781b      	ldrb	r3, [r3, #0]
    78c4:	2b7f      	cmp	r3, #127	; 0x7f
    78c6:	d82d      	bhi.n	7924 <SAL_AESCmac+0xa0>
		sal_FillSubKey( l, k1, (sizeof(l) ) );
    78c8:	2210      	movs	r2, #16
    78ca:	a920      	add	r1, sp, #128	; 0x80
    78cc:	a804      	add	r0, sp, #16
    78ce:	4b5c      	ldr	r3, [pc, #368]	; (7a40 <SAL_AESCmac+0x1bc>)
    78d0:	4798      	blx	r3
	if ( (k1[0] & 0x80) == 0x00 )   // MSB( k1[0] ) is '0'
    78d2:	ab20      	add	r3, sp, #128	; 0x80
    78d4:	781b      	ldrb	r3, [r3, #0]
    78d6:	2b7f      	cmp	r3, #127	; 0x7f
    78d8:	d834      	bhi.n	7944 <SAL_AESCmac+0xc0>
		sal_FillSubKey( k1, k2, (sizeof(l)) );
    78da:	2210      	movs	r2, #16
    78dc:	a91c      	add	r1, sp, #112	; 0x70
    78de:	a820      	add	r0, sp, #128	; 0x80
    78e0:	4b57      	ldr	r3, [pc, #348]	; (7a40 <SAL_AESCmac+0x1bc>)
    78e2:	4798      	blx	r3
	n = (size + 15) >> 4;
    78e4:	0023      	movs	r3, r4
    78e6:	330f      	adds	r3, #15
    78e8:	111d      	asrs	r5, r3, #4
    78ea:	b2aa      	uxth	r2, r5
    78ec:	4690      	mov	r8, r2
	if (n == 0)
    78ee:	2a00      	cmp	r2, #0
    78f0:	d038      	beq.n	7964 <SAL_AESCmac+0xe0>
	if ( flag == 1 )
    78f2:	0722      	lsls	r2, r4, #28
    78f4:	d138      	bne.n	7968 <SAL_AESCmac+0xe4>
		for (i=((n-1) << 4); i<(n << 4); i++)
    78f6:	4642      	mov	r2, r8
    78f8:	3a01      	subs	r2, #1
    78fa:	0112      	lsls	r2, r2, #4
    78fc:	b296      	uxth	r6, r2
    78fe:	4f51      	ldr	r7, [pc, #324]	; (7a44 <SAL_AESCmac+0x1c0>)
    7900:	401f      	ands	r7, r3
    7902:	42be      	cmp	r6, r7
    7904:	da54      	bge.n	79b0 <SAL_AESCmac+0x12c>
    7906:	0033      	movs	r3, r6
			mLast[j] = input[i] ^ k1[j];
    7908:	a910      	add	r1, sp, #64	; 0x40
    790a:	aa20      	add	r2, sp, #128	; 0x80
    790c:	1b98      	subs	r0, r3, r6
    790e:	b280      	uxth	r0, r0
    7910:	4654      	mov	r4, sl
    7912:	5ce4      	ldrb	r4, [r4, r3]
    7914:	5c15      	ldrb	r5, [r2, r0]
    7916:	406c      	eors	r4, r5
    7918:	540c      	strb	r4, [r1, r0]
		for (i=((n-1) << 4); i<(n << 4); i++)
    791a:	3301      	adds	r3, #1
    791c:	b29b      	uxth	r3, r3
    791e:	42bb      	cmp	r3, r7
    7920:	dbf4      	blt.n	790c <SAL_AESCmac+0x88>
    7922:	e045      	b.n	79b0 <SAL_AESCmac+0x12c>
		sal_FillSubKey( l, k1, (sizeof(l) ) );
    7924:	2210      	movs	r2, #16
    7926:	a920      	add	r1, sp, #128	; 0x80
    7928:	a804      	add	r0, sp, #16
    792a:	4b45      	ldr	r3, [pc, #276]	; (7a40 <SAL_AESCmac+0x1bc>)
    792c:	4798      	blx	r3
    792e:	2300      	movs	r3, #0
			k1[i] ^= const_Rb[i];
    7930:	aa20      	add	r2, sp, #128	; 0x80
    7932:	a908      	add	r1, sp, #32
    7934:	5c98      	ldrb	r0, [r3, r2]
    7936:	5c5d      	ldrb	r5, [r3, r1]
    7938:	4068      	eors	r0, r5
    793a:	5498      	strb	r0, [r3, r2]
    793c:	3301      	adds	r3, #1
		for (i=0; i<sizeof(l); i++)
    793e:	2b10      	cmp	r3, #16
    7940:	d1f8      	bne.n	7934 <SAL_AESCmac+0xb0>
    7942:	e7c6      	b.n	78d2 <SAL_AESCmac+0x4e>
		sal_FillSubKey( k1, k2, (sizeof(l) ) );
    7944:	2210      	movs	r2, #16
    7946:	a91c      	add	r1, sp, #112	; 0x70
    7948:	a820      	add	r0, sp, #128	; 0x80
    794a:	4b3d      	ldr	r3, [pc, #244]	; (7a40 <SAL_AESCmac+0x1bc>)
    794c:	4798      	blx	r3
    794e:	2300      	movs	r3, #0
			k2[i] = k2[i] ^ const_Rb[i];
    7950:	aa1c      	add	r2, sp, #112	; 0x70
    7952:	a908      	add	r1, sp, #32
    7954:	5c98      	ldrb	r0, [r3, r2]
    7956:	5c5d      	ldrb	r5, [r3, r1]
    7958:	4068      	eors	r0, r5
    795a:	5498      	strb	r0, [r3, r2]
    795c:	3301      	adds	r3, #1
		for (i=0; i<sizeof(l); i++)
    795e:	2b10      	cmp	r3, #16
    7960:	d1f8      	bne.n	7954 <SAL_AESCmac+0xd0>
    7962:	e7bf      	b.n	78e4 <SAL_AESCmac+0x60>
		n = 1;
    7964:	2301      	movs	r3, #1
    7966:	4698      	mov	r8, r3
		ptr = &input[size - (size%16)];
    7968:	230f      	movs	r3, #15
    796a:	0020      	movs	r0, r4
    796c:	4398      	bics	r0, r3
    796e:	2300      	movs	r3, #0
			if ( i < (size%16) )
    7970:	220f      	movs	r2, #15
    7972:	4014      	ands	r4, r2
					padded[i] = 0x00;
    7974:	a90c      	add	r1, sp, #48	; 0x30
    7976:	2700      	movs	r7, #0
					padded[i] = 0x80;
    7978:	2680      	movs	r6, #128	; 0x80
				padded[i] = ptr[i];
    797a:	4450      	add	r0, sl
    797c:	e005      	b.n	798a <SAL_AESCmac+0x106>
				if ( i == (size%16) )
    797e:	4294      	cmp	r4, r2
    7980:	d009      	beq.n	7996 <SAL_AESCmac+0x112>
					padded[i] = 0x00;
    7982:	545f      	strb	r7, [r3, r1]
    7984:	3301      	adds	r3, #1
		for (i=0; i<16; i++)
    7986:	2b10      	cmp	r3, #16
    7988:	d007      	beq.n	799a <SAL_AESCmac+0x116>
    798a:	b29a      	uxth	r2, r3
			if ( i < (size%16) )
    798c:	4294      	cmp	r4, r2
    798e:	d9f6      	bls.n	797e <SAL_AESCmac+0xfa>
				padded[i] = ptr[i];
    7990:	5cc2      	ldrb	r2, [r0, r3]
    7992:	545a      	strb	r2, [r3, r1]
    7994:	e7f6      	b.n	7984 <SAL_AESCmac+0x100>
					padded[i] = 0x80;
    7996:	545e      	strb	r6, [r3, r1]
    7998:	e7f4      	b.n	7984 <SAL_AESCmac+0x100>
    799a:	2300      	movs	r3, #0
			mLast[i] = padded[i] ^ k2[i];
    799c:	a810      	add	r0, sp, #64	; 0x40
    799e:	a90c      	add	r1, sp, #48	; 0x30
    79a0:	aa1c      	add	r2, sp, #112	; 0x70
    79a2:	5c5c      	ldrb	r4, [r3, r1]
    79a4:	5c9d      	ldrb	r5, [r3, r2]
    79a6:	406c      	eors	r4, r5
    79a8:	541c      	strb	r4, [r3, r0]
    79aa:	3301      	adds	r3, #1
		for (i=0; i<sizeof(mLast); i++)
    79ac:	2b10      	cmp	r3, #16
    79ae:	d1f8      	bne.n	79a2 <SAL_AESCmac+0x11e>
	memset(x, 0, sizeof(x));
    79b0:	2210      	movs	r2, #16
    79b2:	2100      	movs	r1, #0
    79b4:	a818      	add	r0, sp, #96	; 0x60
    79b6:	4b20      	ldr	r3, [pc, #128]	; (7a38 <SAL_AESCmac+0x1b4>)
    79b8:	4798      	blx	r3
	for (i=0; i<(n-1); i++)
    79ba:	2301      	movs	r3, #1
    79bc:	425b      	negs	r3, r3
    79be:	4443      	add	r3, r8
    79c0:	4699      	mov	r9, r3
    79c2:	2000      	movs	r0, #0
    79c4:	2700      	movs	r7, #0
    79c6:	2b00      	cmp	r3, #0
    79c8:	dd1a      	ble.n	7a00 <SAL_AESCmac+0x17c>
			y[j] = x[j] ^ input[(i << 4)+j];
    79ca:	ad14      	add	r5, sp, #80	; 0x50
    79cc:	ac18      	add	r4, sp, #96	; 0x60
		memcpy(x, y, sizeof(y));
    79ce:	4e1e      	ldr	r6, [pc, #120]	; (7a48 <SAL_AESCmac+0x1c4>)
			y[j] = x[j] ^ input[(i << 4)+j];
    79d0:	0100      	lsls	r0, r0, #4
    79d2:	2300      	movs	r3, #0
    79d4:	4450      	add	r0, sl
    79d6:	5cc2      	ldrb	r2, [r0, r3]
    79d8:	5d19      	ldrb	r1, [r3, r4]
    79da:	404a      	eors	r2, r1
    79dc:	555a      	strb	r2, [r3, r5]
    79de:	3301      	adds	r3, #1
		for (j=0; j<16; j++)
    79e0:	2b10      	cmp	r3, #16
    79e2:	d1f8      	bne.n	79d6 <SAL_AESCmac+0x152>
		memcpy(x, y, sizeof(y));
    79e4:	2210      	movs	r2, #16
    79e6:	0029      	movs	r1, r5
    79e8:	0020      	movs	r0, r4
    79ea:	47b0      	blx	r6
		SAL_AESEncode(x, key_type, key);
    79ec:	9a01      	ldr	r2, [sp, #4]
    79ee:	9902      	ldr	r1, [sp, #8]
    79f0:	0020      	movs	r0, r4
    79f2:	4b12      	ldr	r3, [pc, #72]	; (7a3c <SAL_AESCmac+0x1b8>)
    79f4:	4798      	blx	r3
	for (i=0; i<(n-1); i++)
    79f6:	3701      	adds	r7, #1
    79f8:	b2bf      	uxth	r7, r7
    79fa:	0038      	movs	r0, r7
    79fc:	454f      	cmp	r7, r9
    79fe:	dbe7      	blt.n	79d0 <SAL_AESCmac+0x14c>
    7a00:	2300      	movs	r3, #0
		y[i] = x[i] ^ mLast[i];
    7a02:	ac14      	add	r4, sp, #80	; 0x50
    7a04:	a818      	add	r0, sp, #96	; 0x60
    7a06:	a910      	add	r1, sp, #64	; 0x40
    7a08:	5c1a      	ldrb	r2, [r3, r0]
    7a0a:	5c5d      	ldrb	r5, [r3, r1]
    7a0c:	406a      	eors	r2, r5
    7a0e:	551a      	strb	r2, [r3, r4]
    7a10:	3301      	adds	r3, #1
	for (i=0; i<sizeof(x); i++)
    7a12:	2b10      	cmp	r3, #16
    7a14:	d1f8      	bne.n	7a08 <SAL_AESCmac+0x184>
	SAL_AESEncode(y, key_type, key);
    7a16:	9a01      	ldr	r2, [sp, #4]
    7a18:	9902      	ldr	r1, [sp, #8]
    7a1a:	a814      	add	r0, sp, #80	; 0x50
    7a1c:	4b07      	ldr	r3, [pc, #28]	; (7a3c <SAL_AESCmac+0x1b8>)
    7a1e:	4798      	blx	r3
	memcpy(output, y, sizeof(y));
    7a20:	2210      	movs	r2, #16
    7a22:	a914      	add	r1, sp, #80	; 0x50
    7a24:	9803      	ldr	r0, [sp, #12]
    7a26:	4b08      	ldr	r3, [pc, #32]	; (7a48 <SAL_AESCmac+0x1c4>)
    7a28:	4798      	blx	r3
}
    7a2a:	2000      	movs	r0, #0
    7a2c:	b024      	add	sp, #144	; 0x90
    7a2e:	bc1c      	pop	{r2, r3, r4}
    7a30:	4690      	mov	r8, r2
    7a32:	4699      	mov	r9, r3
    7a34:	46a2      	mov	sl, r4
    7a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a38:	00016a21 	.word	0x00016a21
    7a3c:	0000784d 	.word	0x0000784d
    7a40:	00007829 	.word	0x00007829
    7a44:	000ffff0 	.word	0x000ffff0
    7a48:	00016a0f 	.word	0x00016a0f

00007a4c <DemoOutput_Greeting>:

bool PUSH_BUTTON_pressed;
MIWI_TICK PUSH_BUTTON_press_time;

void DemoOutput_Greeting(void)
{    
    7a4c:	b510      	push	{r4, lr}
#if defined (ENABLE_LCD)
	#if defined(PROTOCOL_P2P)
		LCDDisplay((char *)"Simple LoRa P2P Demo on \n SAMR34 Node ", 0, true);
    7a4e:	2201      	movs	r2, #1
    7a50:	2100      	movs	r1, #0
    7a52:	4810      	ldr	r0, [pc, #64]	; (7a94 <DemoOutput_Greeting+0x48>)
    7a54:	4b10      	ldr	r3, [pc, #64]	; (7a98 <DemoOutput_Greeting+0x4c>)
    7a56:	4798      	blx	r3
	#endif
#endif
    #if defined (ENABLE_CONSOLE)
        #if defined(PROTOCOL_P2P)
			printf("\n\r-----------------------------------------------------\n\r-----------------------------------------------------");
    7a58:	4810      	ldr	r0, [pc, #64]	; (7a9c <DemoOutput_Greeting+0x50>)
    7a5a:	4c11      	ldr	r4, [pc, #68]	; (7aa0 <DemoOutput_Greeting+0x54>)
    7a5c:	47a0      	blx	r4
            printf("\r\nStarting Node 1 of Simple Demo for LoRa P2P Stack ...");  
    7a5e:	4811      	ldr	r0, [pc, #68]	; (7aa4 <DemoOutput_Greeting+0x58>)
    7a60:	47a0      	blx	r4
        #endif
		#if defined(ENABLE_SLEEP_FEATURE)
			printf("\r\nReduced Function Device (RFD) operations") ;
		#else
			printf("\r\nFull Function Device (FFD) operations") ;
    7a62:	4811      	ldr	r0, [pc, #68]	; (7aa8 <DemoOutput_Greeting+0x5c>)
    7a64:	47a0      	blx	r4
		#endif
        printf("\r\n     RF Transceiver: SX_1276");
    7a66:	4811      	ldr	r0, [pc, #68]	; (7aac <DemoOutput_Greeting+0x60>)
    7a68:	47a0      	blx	r4
        printf("\r\n     Demo Instruction:");
    7a6a:	4811      	ldr	r0, [pc, #68]	; (7ab0 <DemoOutput_Greeting+0x64>)
    7a6c:	47a0      	blx	r4
        printf("\r\n                     Power on the board until LED 1 lights up");
    7a6e:	4811      	ldr	r0, [pc, #68]	; (7ab4 <DemoOutput_Greeting+0x68>)
    7a70:	47a0      	blx	r4
        printf("\r\n                     to indicate connecting with peer.");
    7a72:	4811      	ldr	r0, [pc, #68]	; (7ab8 <DemoOutput_Greeting+0x6c>)
    7a74:	47a0      	blx	r4
        printf("\r\n                     Push Button 1 to broadcast message.");
    7a76:	4811      	ldr	r0, [pc, #68]	; (7abc <DemoOutput_Greeting+0x70>)
    7a78:	47a0      	blx	r4
        printf("\r\n                     LED 1 will be toggled upon receiving messages. ");
    7a7a:	4811      	ldr	r0, [pc, #68]	; (7ac0 <DemoOutput_Greeting+0x74>)
    7a7c:	47a0      	blx	r4
        printf("\r\n\r\n");		
    7a7e:	4811      	ldr	r0, [pc, #68]	; (7ac4 <DemoOutput_Greeting+0x78>)
    7a80:	4c11      	ldr	r4, [pc, #68]	; (7ac8 <DemoOutput_Greeting+0x7c>)
    7a82:	47a0      	blx	r4
		#ifdef PERIODIC_TX
			printf("Periodic Transmission = Enable\r\n") ;
		#else
			printf("Periodic Transmission = Disable\r\n") ;
    7a84:	4811      	ldr	r0, [pc, #68]	; (7acc <DemoOutput_Greeting+0x80>)
    7a86:	47a0      	blx	r4
		#endif
		#ifdef DUTY_CYCLING
			printf("Duty Cycling support = Enable\r\n") ;
		#else
			printf("Duty Cycling support = Disable\r\n") ;
    7a88:	4811      	ldr	r0, [pc, #68]	; (7ad0 <DemoOutput_Greeting+0x84>)
    7a8a:	47a0      	blx	r4
		#endif
		#ifdef LBT_SUPPORT_ENABLED
			printf("LBT support = Enable\r\n") ;
		#else
			printf("LBT support = Disable\r\n") ;
    7a8c:	4811      	ldr	r0, [pc, #68]	; (7ad4 <DemoOutput_Greeting+0x88>)
    7a8e:	47a0      	blx	r4
		#endif
    #endif 
}        
    7a90:	bd10      	pop	{r4, pc}
    7a92:	46c0      	nop			; (mov r8, r8)
    7a94:	0001862c 	.word	0x0001862c
    7a98:	000084e9 	.word	0x000084e9
    7a9c:	00018654 	.word	0x00018654
    7aa0:	00016fc9 	.word	0x00016fc9
    7aa4:	000186c4 	.word	0x000186c4
    7aa8:	000186fc 	.word	0x000186fc
    7aac:	00018724 	.word	0x00018724
    7ab0:	00018744 	.word	0x00018744
    7ab4:	00018760 	.word	0x00018760
    7ab8:	000187a0 	.word	0x000187a0
    7abc:	000187dc 	.word	0x000187dc
    7ac0:	00018818 	.word	0x00018818
    7ac4:	00018860 	.word	0x00018860
    7ac8:	000170e5 	.word	0x000170e5
    7acc:	00018864 	.word	0x00018864
    7ad0:	00018888 	.word	0x00018888
    7ad4:	000188a8 	.word	0x000188a8

00007ad8 <DemoOutput_Channel>:
	LCDDisplay((char *)"SW: Use Nwk Freezer \nPress in 5 sec", 0, false);	
	delay_ms(1000);
#endif
}
void DemoOutput_Channel(uint8_t channel, uint8_t Step)
{
    7ad8:	b570      	push	{r4, r5, r6, lr}
    7ada:	0004      	movs	r4, r0
    if( Step == 0 )
    7adc:	2900      	cmp	r1, #0
    7ade:	d00e      	beq.n	7afe <DemoOutput_Channel+0x26>
#endif
    }
    else
    { 
#if defined (ENABLE_LCD)
        LCDDisplay((char *)"Connected Peer on \n Channel ", channel, true);
    7ae0:	2201      	movs	r2, #1
    7ae2:	0001      	movs	r1, r0
    7ae4:	480d      	ldr	r0, [pc, #52]	; (7b1c <DemoOutput_Channel+0x44>)
    7ae6:	4b0e      	ldr	r3, [pc, #56]	; (7b20 <DemoOutput_Channel+0x48>)
    7ae8:	4798      	blx	r3
#endif
#if defined (ENABLE_CONSOLE)
        #if !defined(MIWIKIT)
        printf("\r\nConnected Peer on Channel ");
    7aea:	480e      	ldr	r0, [pc, #56]	; (7b24 <DemoOutput_Channel+0x4c>)
    7aec:	4d0e      	ldr	r5, [pc, #56]	; (7b28 <DemoOutput_Channel+0x50>)
    7aee:	47a8      	blx	r5
        printf("%d",channel);
    7af0:	0021      	movs	r1, r4
    7af2:	480e      	ldr	r0, [pc, #56]	; (7b2c <DemoOutput_Channel+0x54>)
    7af4:	47a8      	blx	r5
        printf("\r\n");
    7af6:	480e      	ldr	r0, [pc, #56]	; (7b30 <DemoOutput_Channel+0x58>)
    7af8:	4b0e      	ldr	r3, [pc, #56]	; (7b34 <DemoOutput_Channel+0x5c>)
    7afa:	4798      	blx	r3
        #endif
#endif
    }
}    
    7afc:	bd70      	pop	{r4, r5, r6, pc}
        LCDDisplay((char *)"Connecting Peer on \n Channel ", channel, true);
    7afe:	2201      	movs	r2, #1
    7b00:	0001      	movs	r1, r0
    7b02:	480d      	ldr	r0, [pc, #52]	; (7b38 <DemoOutput_Channel+0x60>)
    7b04:	4b06      	ldr	r3, [pc, #24]	; (7b20 <DemoOutput_Channel+0x48>)
    7b06:	4798      	blx	r3
        printf("\r\nConnecting Peer on Channel ");
    7b08:	480c      	ldr	r0, [pc, #48]	; (7b3c <DemoOutput_Channel+0x64>)
    7b0a:	4d07      	ldr	r5, [pc, #28]	; (7b28 <DemoOutput_Channel+0x50>)
    7b0c:	47a8      	blx	r5
        printf("%d",channel);
    7b0e:	0021      	movs	r1, r4
    7b10:	4806      	ldr	r0, [pc, #24]	; (7b2c <DemoOutput_Channel+0x54>)
    7b12:	47a8      	blx	r5
        printf("\r\n");
    7b14:	4806      	ldr	r0, [pc, #24]	; (7b30 <DemoOutput_Channel+0x58>)
    7b16:	4b07      	ldr	r3, [pc, #28]	; (7b34 <DemoOutput_Channel+0x5c>)
    7b18:	4798      	blx	r3
    7b1a:	e7ef      	b.n	7afc <DemoOutput_Channel+0x24>
    7b1c:	000185a4 	.word	0x000185a4
    7b20:	000084e9 	.word	0x000084e9
    7b24:	000185c4 	.word	0x000185c4
    7b28:	00016fc9 	.word	0x00016fc9
    7b2c:	000185a0 	.word	0x000185a0
    7b30:	000190c0 	.word	0x000190c0
    7b34:	000170e5 	.word	0x000170e5
    7b38:	00018560 	.word	0x00018560
    7b3c:	00018580 	.word	0x00018580

00007b40 <DemoOutput_Instruction>:

void DemoOutput_Instruction(void)
{
    7b40:	b510      	push	{r4, lr}
#if defined (ENABLE_LCD)
	#if defined (EXT_BOARD_OLED1_XPLAINED_PRO)
		LCDDisplay((char *)"SW     : Broadcast \nBUTTON1: Unicast", 0, false);
    7b42:	2200      	movs	r2, #0
    7b44:	2100      	movs	r1, #0
    7b46:	4802      	ldr	r0, [pc, #8]	; (7b50 <DemoOutput_Instruction+0x10>)
    7b48:	4b02      	ldr	r3, [pc, #8]	; (7b54 <DemoOutput_Instruction+0x14>)
    7b4a:	4798      	blx	r3
	#else
		LCDDisplay((char *)"SW: Broadcast", 0, false);
	#endif
#endif
}
    7b4c:	bd10      	pop	{r4, pc}
    7b4e:	46c0      	nop			; (mov r8, r8)
    7b50:	0001891c 	.word	0x0001891c
    7b54:	000084e9 	.word	0x000084e9

00007b58 <DemoOutput_HandleMessage>:


void DemoOutput_HandleMessage(void)
{
    7b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;

    if( rxMessage.flags.bits.secEn )
    7b5a:	4b2a      	ldr	r3, [pc, #168]	; (7c04 <DemoOutput_HandleMessage+0xac>)
    7b5c:	781b      	ldrb	r3, [r3, #0]
    7b5e:	071b      	lsls	r3, r3, #28
    7b60:	d426      	bmi.n	7bb0 <DemoOutput_HandleMessage+0x58>
    {
        sio2host_tx((uint8_t *)"Secured ", sizeof("Secured "));
    }

    if( rxMessage.flags.bits.broadcast )
    7b62:	4b28      	ldr	r3, [pc, #160]	; (7c04 <DemoOutput_HandleMessage+0xac>)
    7b64:	781b      	ldrb	r3, [r3, #0]
    7b66:	079b      	lsls	r3, r3, #30
    7b68:	d027      	beq.n	7bba <DemoOutput_HandleMessage+0x62>
    {
        sio2host_tx((uint8_t *)"Broadcast Packet with RSSI ", sizeof("Broadcast Packet with RSSI "));
    7b6a:	211c      	movs	r1, #28
    7b6c:	4826      	ldr	r0, [pc, #152]	; (7c08 <DemoOutput_HandleMessage+0xb0>)
    7b6e:	4b27      	ldr	r3, [pc, #156]	; (7c0c <DemoOutput_HandleMessage+0xb4>)
    7b70:	4798      	blx	r3
    }
    else
    {
        sio2host_tx((uint8_t *)"Unicast Packet with RSSI ",sizeof("Unicast Packet with RSSI "));
    }
    printf("%02x", rxMessage.PacketRSSI);
    7b72:	4c24      	ldr	r4, [pc, #144]	; (7c04 <DemoOutput_HandleMessage+0xac>)
    7b74:	7b61      	ldrb	r1, [r4, #13]
    7b76:	4826      	ldr	r0, [pc, #152]	; (7c10 <DemoOutput_HandleMessage+0xb8>)
    7b78:	4b26      	ldr	r3, [pc, #152]	; (7c14 <DemoOutput_HandleMessage+0xbc>)
    7b7a:	4798      	blx	r3
    if( rxMessage.flags.bits.srcPrsnt )
    7b7c:	7823      	ldrb	r3, [r4, #0]
    7b7e:	065b      	lsls	r3, r3, #25
    7b80:	d420      	bmi.n	7bc4 <DemoOutput_HandleMessage+0x6c>
            {
                printf("%x", rxMessage.SourceAddress[MY_ADDRESS_LENGTH-1-i]);
            }    
        }
    }
    sio2host_tx((uint8_t *)": ",sizeof(": "));
    7b82:	2103      	movs	r1, #3
    7b84:	4824      	ldr	r0, [pc, #144]	; (7c18 <DemoOutput_HandleMessage+0xc0>)
    7b86:	4b21      	ldr	r3, [pc, #132]	; (7c0c <DemoOutput_HandleMessage+0xb4>)
    7b88:	4798      	blx	r3
    
    for(i = 0; i < rxMessage.PayloadSize; i++)
    7b8a:	4b1e      	ldr	r3, [pc, #120]	; (7c04 <DemoOutput_HandleMessage+0xac>)
    7b8c:	7b1b      	ldrb	r3, [r3, #12]
    7b8e:	2b00      	cmp	r3, #0
    7b90:	d00a      	beq.n	7ba8 <DemoOutput_HandleMessage+0x50>
    7b92:	2400      	movs	r4, #0
    {
        sio2host_putchar(rxMessage.Payload[i]);
    7b94:	4d1b      	ldr	r5, [pc, #108]	; (7c04 <DemoOutput_HandleMessage+0xac>)
    7b96:	4e21      	ldr	r6, [pc, #132]	; (7c1c <DemoOutput_HandleMessage+0xc4>)
    7b98:	68ab      	ldr	r3, [r5, #8]
    7b9a:	5d18      	ldrb	r0, [r3, r4]
    7b9c:	47b0      	blx	r6
    for(i = 0; i < rxMessage.PayloadSize; i++)
    7b9e:	3401      	adds	r4, #1
    7ba0:	b2e4      	uxtb	r4, r4
    7ba2:	7b2b      	ldrb	r3, [r5, #12]
    7ba4:	42a3      	cmp	r3, r4
    7ba6:	d8f7      	bhi.n	7b98 <DemoOutput_HandleMessage+0x40>
    }   
	printf("\r\n");    
    7ba8:	481d      	ldr	r0, [pc, #116]	; (7c20 <DemoOutput_HandleMessage+0xc8>)
    7baa:	4b1e      	ldr	r3, [pc, #120]	; (7c24 <DemoOutput_HandleMessage+0xcc>)
    7bac:	4798      	blx	r3
} 
    7bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        sio2host_tx((uint8_t *)"Secured ", sizeof("Secured "));
    7bb0:	2109      	movs	r1, #9
    7bb2:	481d      	ldr	r0, [pc, #116]	; (7c28 <DemoOutput_HandleMessage+0xd0>)
    7bb4:	4b15      	ldr	r3, [pc, #84]	; (7c0c <DemoOutput_HandleMessage+0xb4>)
    7bb6:	4798      	blx	r3
    7bb8:	e7d3      	b.n	7b62 <DemoOutput_HandleMessage+0xa>
        sio2host_tx((uint8_t *)"Unicast Packet with RSSI ",sizeof("Unicast Packet with RSSI "));
    7bba:	211a      	movs	r1, #26
    7bbc:	481b      	ldr	r0, [pc, #108]	; (7c2c <DemoOutput_HandleMessage+0xd4>)
    7bbe:	4b13      	ldr	r3, [pc, #76]	; (7c0c <DemoOutput_HandleMessage+0xb4>)
    7bc0:	4798      	blx	r3
    7bc2:	e7d6      	b.n	7b72 <DemoOutput_HandleMessage+0x1a>
        sio2host_tx((uint8_t *)" from ", sizeof(" from "));
    7bc4:	2107      	movs	r1, #7
    7bc6:	481a      	ldr	r0, [pc, #104]	; (7c30 <DemoOutput_HandleMessage+0xd8>)
    7bc8:	4b10      	ldr	r3, [pc, #64]	; (7c0c <DemoOutput_HandleMessage+0xb4>)
    7bca:	4798      	blx	r3
        if( rxMessage.flags.bits.altSrcAddr )
    7bcc:	4b0d      	ldr	r3, [pc, #52]	; (7c04 <DemoOutput_HandleMessage+0xac>)
    7bce:	781b      	ldrb	r3, [r3, #0]
    7bd0:	2407      	movs	r4, #7
    7bd2:	2b7f      	cmp	r3, #127	; 0x7f
    7bd4:	d809      	bhi.n	7bea <DemoOutput_HandleMessage+0x92>
                printf("%x", rxMessage.SourceAddress[MY_ADDRESS_LENGTH-1-i]);
    7bd6:	4f0b      	ldr	r7, [pc, #44]	; (7c04 <DemoOutput_HandleMessage+0xac>)
    7bd8:	4e16      	ldr	r6, [pc, #88]	; (7c34 <DemoOutput_HandleMessage+0xdc>)
    7bda:	4d0e      	ldr	r5, [pc, #56]	; (7c14 <DemoOutput_HandleMessage+0xbc>)
    7bdc:	687b      	ldr	r3, [r7, #4]
    7bde:	5d19      	ldrb	r1, [r3, r4]
    7be0:	0030      	movs	r0, r6
    7be2:	47a8      	blx	r5
            for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    7be4:	3c01      	subs	r4, #1
    7be6:	d2f9      	bcs.n	7bdc <DemoOutput_HandleMessage+0x84>
    7be8:	e7cb      	b.n	7b82 <DemoOutput_HandleMessage+0x2a>
            printf( "%x", rxMessage.SourceAddress[1]);
    7bea:	4e06      	ldr	r6, [pc, #24]	; (7c04 <DemoOutput_HandleMessage+0xac>)
    7bec:	6873      	ldr	r3, [r6, #4]
    7bee:	7859      	ldrb	r1, [r3, #1]
    7bf0:	4d10      	ldr	r5, [pc, #64]	; (7c34 <DemoOutput_HandleMessage+0xdc>)
    7bf2:	0028      	movs	r0, r5
    7bf4:	4c07      	ldr	r4, [pc, #28]	; (7c14 <DemoOutput_HandleMessage+0xbc>)
    7bf6:	47a0      	blx	r4
            printf( "%x", rxMessage.SourceAddress[0]);
    7bf8:	6873      	ldr	r3, [r6, #4]
    7bfa:	7819      	ldrb	r1, [r3, #0]
    7bfc:	0028      	movs	r0, r5
    7bfe:	47a0      	blx	r4
    7c00:	e7bf      	b.n	7b82 <DemoOutput_HandleMessage+0x2a>
    7c02:	46c0      	nop			; (mov r8, r8)
    7c04:	20002b28 	.word	0x20002b28
    7c08:	000188cc 	.word	0x000188cc
    7c0c:	0000c67d 	.word	0x0000c67d
    7c10:	00018904 	.word	0x00018904
    7c14:	00016fc9 	.word	0x00016fc9
    7c18:	00018918 	.word	0x00018918
    7c1c:	0000c6a9 	.word	0x0000c6a9
    7c20:	000190c0 	.word	0x000190c0
    7c24:	000170e5 	.word	0x000170e5
    7c28:	000188c0 	.word	0x000188c0
    7c2c:	000188e8 	.word	0x000188e8
    7c30:	0001890c 	.word	0x0001890c
    7c34:	00018914 	.word	0x00018914

00007c38 <DemoOutput_UpdateTxRx>:

void DemoOutput_UpdateTxRx(uint8_t TxNum, uint8_t RxNum)
{
    7c38:	b510      	push	{r4, lr}
#if defined (ENABLE_LCD)
    LCDTRXCount(TxNum, RxNum);  
    7c3a:	4b01      	ldr	r3, [pc, #4]	; (7c40 <DemoOutput_UpdateTxRx+0x8>)
    7c3c:	4798      	blx	r3
#endif
}
    7c3e:	bd10      	pop	{r4, pc}
    7c40:	0000848d 	.word	0x0000848d

00007c44 <DemoOutput_ChannelError>:

void DemoOutput_ChannelError(uint8_t channel)
{
    7c44:	b570      	push	{r4, r5, r6, lr}
    7c46:	0005      	movs	r5, r0
    #if defined (ENABLE_CONSOLE)
        printf("\r\nSelection of channel ");
    7c48:	4804      	ldr	r0, [pc, #16]	; (7c5c <DemoOutput_ChannelError+0x18>)
    7c4a:	4c05      	ldr	r4, [pc, #20]	; (7c60 <DemoOutput_ChannelError+0x1c>)
    7c4c:	47a0      	blx	r4
        printf("%d", channel);
    7c4e:	0029      	movs	r1, r5
    7c50:	4804      	ldr	r0, [pc, #16]	; (7c64 <DemoOutput_ChannelError+0x20>)
    7c52:	47a0      	blx	r4
        printf(" is not supported in current configuration.\r\n");
    7c54:	4804      	ldr	r0, [pc, #16]	; (7c68 <DemoOutput_ChannelError+0x24>)
    7c56:	4b05      	ldr	r3, [pc, #20]	; (7c6c <DemoOutput_ChannelError+0x28>)
    7c58:	4798      	blx	r3
    #endif
}
    7c5a:	bd70      	pop	{r4, r5, r6, pc}
    7c5c:	000185e4 	.word	0x000185e4
    7c60:	00016fc9 	.word	0x00016fc9
    7c64:	000185a0 	.word	0x000185a0
    7c68:	000185fc 	.word	0x000185fc
    7c6c:	000170e5 	.word	0x000170e5

00007c70 <DemoOutput_UnicastFail>:

void DemoOutput_UnicastFail(void)
{
    7c70:	b510      	push	{r4, lr}
    #if defined (ENABLE_CONSOLE)
        printf("\r\nUnicast Failed\r\n");
    7c72:	4804      	ldr	r0, [pc, #16]	; (7c84 <DemoOutput_UnicastFail+0x14>)
    7c74:	4b04      	ldr	r3, [pc, #16]	; (7c88 <DemoOutput_UnicastFail+0x18>)
    7c76:	4798      	blx	r3
    #endif
#if defined (ENABLE_LCD)
    LCDDisplay((char *)" Unicast Failed", 0, true);
    7c78:	2201      	movs	r2, #1
    7c7a:	2100      	movs	r1, #0
    7c7c:	4803      	ldr	r0, [pc, #12]	; (7c8c <DemoOutput_UnicastFail+0x1c>)
    7c7e:	4b04      	ldr	r3, [pc, #16]	; (7c90 <DemoOutput_UnicastFail+0x20>)
    7c80:	4798      	blx	r3
#endif
}    
    7c82:	bd10      	pop	{r4, pc}
    7c84:	00018944 	.word	0x00018944
    7c88:	000170e5 	.word	0x000170e5
    7c8c:	00018958 	.word	0x00018958
    7c90:	000084e9 	.word	0x000084e9

00007c94 <DemoOutput_BroadcastFail>:

void DemoOutput_BroadcastFail(void)
{
    7c94:	b510      	push	{r4, lr}
	#if defined (ENABLE_CONSOLE)
	printf("\r\nBroadcast Failed\r\n");
    7c96:	4804      	ldr	r0, [pc, #16]	; (7ca8 <DemoOutput_BroadcastFail+0x14>)
    7c98:	4b04      	ldr	r3, [pc, #16]	; (7cac <DemoOutput_BroadcastFail+0x18>)
    7c9a:	4798      	blx	r3
	#endif
	#if defined (ENABLE_LCD)
	LCDDisplay((char *)" Broadcast Failed", 0, true);
    7c9c:	2201      	movs	r2, #1
    7c9e:	2100      	movs	r1, #0
    7ca0:	4803      	ldr	r0, [pc, #12]	; (7cb0 <DemoOutput_BroadcastFail+0x1c>)
    7ca2:	4b04      	ldr	r3, [pc, #16]	; (7cb4 <DemoOutput_BroadcastFail+0x20>)
    7ca4:	4798      	blx	r3
	#endif
}    
    7ca6:	bd10      	pop	{r4, pc}
    7ca8:	00018538 	.word	0x00018538
    7cac:	000170e5 	.word	0x000170e5
    7cb0:	0001854c 	.word	0x0001854c
    7cb4:	000084e9 	.word	0x000084e9

00007cb8 <ButtonPressed>:
 *
 * Note:
 ********************************************************************/

uint8_t ButtonPressed(void)
{
    7cb8:	b510      	push	{r4, lr}
	return (port_base->IN.reg & pin_mask);
    7cba:	4b19      	ldr	r3, [pc, #100]	; (7d20 <ButtonPressed+0x68>)
    7cbc:	6a1b      	ldr	r3, [r3, #32]
    MIWI_TICK tickDifference;
    if(!port_pin_get_input_level(BUTTON_0_PIN))
    7cbe:	00db      	lsls	r3, r3, #3
    7cc0:	d40e      	bmi.n	7ce0 <ButtonPressed+0x28>
    {
        //if the button was previously not pressed
        if(PUSH_BUTTON_pressed == false)
    7cc2:	4b18      	ldr	r3, [pc, #96]	; (7d24 <ButtonPressed+0x6c>)
    7cc4:	781b      	ldrb	r3, [r3, #0]
        if(tickDifference.Val > DEBOUNCE_TIME)
        {
            PUSH_BUTTON_pressed = false;
        }
    }
    return 0;
    7cc6:	2000      	movs	r0, #0
        if(PUSH_BUTTON_pressed == false)
    7cc8:	2b00      	cmp	r3, #0
    7cca:	d000      	beq.n	7cce <ButtonPressed+0x16>
}
    7ccc:	bd10      	pop	{r4, pc}
            PUSH_BUTTON_pressed = true;
    7cce:	2201      	movs	r2, #1
    7cd0:	4b14      	ldr	r3, [pc, #80]	; (7d24 <ButtonPressed+0x6c>)
    7cd2:	701a      	strb	r2, [r3, #0]
            PUSH_BUTTON_press_time.Val = MiWi_TickGet();
    7cd4:	4b14      	ldr	r3, [pc, #80]	; (7d28 <ButtonPressed+0x70>)
    7cd6:	4798      	blx	r3
    7cd8:	4b14      	ldr	r3, [pc, #80]	; (7d2c <ButtonPressed+0x74>)
    7cda:	6018      	str	r0, [r3, #0]
            return 1;
    7cdc:	2001      	movs	r0, #1
    7cde:	e7f5      	b.n	7ccc <ButtonPressed+0x14>
    7ce0:	4b0f      	ldr	r3, [pc, #60]	; (7d20 <ButtonPressed+0x68>)
    7ce2:	6a1b      	ldr	r3, [r3, #32]
    else if(!port_pin_get_input_level(WING_BUTTON_1))
    7ce4:	025b      	lsls	r3, r3, #9
    7ce6:	d40d      	bmi.n	7d04 <ButtonPressed+0x4c>
	    if(PUSH_BUTTON_pressed == false)
    7ce8:	4b0e      	ldr	r3, [pc, #56]	; (7d24 <ButtonPressed+0x6c>)
    7cea:	781b      	ldrb	r3, [r3, #0]
    return 0;
    7cec:	2000      	movs	r0, #0
	    if(PUSH_BUTTON_pressed == false)
    7cee:	2b00      	cmp	r3, #0
    7cf0:	d1ec      	bne.n	7ccc <ButtonPressed+0x14>
		    PUSH_BUTTON_pressed = true;
    7cf2:	2201      	movs	r2, #1
    7cf4:	4b0b      	ldr	r3, [pc, #44]	; (7d24 <ButtonPressed+0x6c>)
    7cf6:	701a      	strb	r2, [r3, #0]
		    PUSH_BUTTON_press_time.Val = MiWi_TickGet();
    7cf8:	4b0b      	ldr	r3, [pc, #44]	; (7d28 <ButtonPressed+0x70>)
    7cfa:	4798      	blx	r3
    7cfc:	4b0b      	ldr	r3, [pc, #44]	; (7d2c <ButtonPressed+0x74>)
    7cfe:	6018      	str	r0, [r3, #0]
		    return 2;
    7d00:	2002      	movs	r0, #2
    7d02:	e7e3      	b.n	7ccc <ButtonPressed+0x14>
		t.Val = MiWi_TickGet();
    7d04:	4b08      	ldr	r3, [pc, #32]	; (7d28 <ButtonPressed+0x70>)
    7d06:	4798      	blx	r3
        tickDifference.Val = MiWi_TickGetDiff(t,PUSH_BUTTON_press_time);
    7d08:	4b08      	ldr	r3, [pc, #32]	; (7d2c <ButtonPressed+0x74>)
    7d0a:	6819      	ldr	r1, [r3, #0]
    7d0c:	4b08      	ldr	r3, [pc, #32]	; (7d30 <ButtonPressed+0x78>)
    7d0e:	4798      	blx	r3
        if(tickDifference.Val > DEBOUNCE_TIME)
    7d10:	4b08      	ldr	r3, [pc, #32]	; (7d34 <ButtonPressed+0x7c>)
    7d12:	4298      	cmp	r0, r3
    7d14:	d902      	bls.n	7d1c <ButtonPressed+0x64>
            PUSH_BUTTON_pressed = false;
    7d16:	2200      	movs	r2, #0
    7d18:	4b02      	ldr	r3, [pc, #8]	; (7d24 <ButtonPressed+0x6c>)
    7d1a:	701a      	strb	r2, [r3, #0]
    return 0;
    7d1c:	2000      	movs	r0, #0
    7d1e:	e7d5      	b.n	7ccc <ButtonPressed+0x14>
    7d20:	40002800 	.word	0x40002800
    7d24:	20002160 	.word	0x20002160
    7d28:	0000c41d 	.word	0x0000c41d
    7d2c:	20002164 	.word	0x20002164
    7d30:	0000c47d 	.word	0x0000c47d
    7d34:	00003fff 	.word	0x00003fff

00007d38 <Buttons_init>:
#if (defined EXT_BOARD_OLED1_XPLAINED_PRO)
/**
 * \brief Configures buttons
 */
void Buttons_init(void)
{
    7d38:	b530      	push	{r4, r5, lr}
    7d3a:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    7d3c:	ac01      	add	r4, sp, #4
    7d3e:	2300      	movs	r3, #0
    7d40:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    7d42:	2201      	movs	r2, #1
    7d44:	7062      	strb	r2, [r4, #1]
	config->powersave  = false;
    7d46:	70a3      	strb	r3, [r4, #2]

	conf.direction = PORT_PIN_DIR_INPUT;
	conf.input_pull = PORT_PIN_PULL_UP;

	/* Configure all three buttons as inputs */
	port_pin_set_config(WING_BUTTON_1, &conf);
    7d48:	0021      	movs	r1, r4
    7d4a:	2016      	movs	r0, #22
    7d4c:	4d04      	ldr	r5, [pc, #16]	; (7d60 <Buttons_init+0x28>)
    7d4e:	47a8      	blx	r5
	port_pin_set_config(WING_BUTTON_2, &conf);
    7d50:	0021      	movs	r1, r4
    7d52:	2006      	movs	r0, #6
    7d54:	47a8      	blx	r5
	port_pin_set_config(WING_BUTTON_3, &conf);
    7d56:	0021      	movs	r1, r4
    7d58:	2007      	movs	r0, #7
    7d5a:	47a8      	blx	r5
}
    7d5c:	b003      	add	sp, #12
    7d5e:	bd30      	pop	{r4, r5, pc}
    7d60:	00005151 	.word	0x00005151

00007d64 <APP_TaskHandler>:

/*********************************************************************//*
 \brief      Application Task Handler
 ************************************************************************/
SYSTEM_TaskStatus_t APP_TaskHandler(void)
{
    7d64:	b510      	push	{r4, lr}
    Run_Demo();
    7d66:	4b02      	ldr	r3, [pc, #8]	; (7d70 <APP_TaskHandler+0xc>)
    7d68:	4798      	blx	r3
    return SYSTEM_TASK_SUCCESS;
}
    7d6a:	2000      	movs	r0, #0
    7d6c:	bd10      	pop	{r4, pc}
    7d6e:	46c0      	nop			; (mov r8, r8)
    7d70:	00008435 	.word	0x00008435

00007d74 <ReadMacAddress>:
* Overview:		    Uses the MAC Address for addressing
*
* Note:			    
**********************************************************************/
void ReadMacAddress(void)
{
    7d74:	b510      	push	{r4, lr}
#if (BOARD == SAMR34_XPLAINED_PRO && defined(__SAMR34J18B__))
	// only applicable for SAM R34 Xpro with EDBG on-board
	uint8_t* peui64 = edbg_eui_read_eui64() ;
    7d76:	4b06      	ldr	r3, [pc, #24]	; (7d90 <ReadMacAddress+0x1c>)
    7d78:	4798      	blx	r3
    7d7a:	1dc3      	adds	r3, r0, #7
    7d7c:	4a05      	ldr	r2, [pc, #20]	; (7d94 <ReadMacAddress+0x20>)
    7d7e:	3801      	subs	r0, #1
	for (uint8_t i = 0; i < MY_ADDRESS_LENGTH; i++)
	{
		myLongAddress[i] = peui64[MY_ADDRESS_LENGTH-i-1] ;
    7d80:	7819      	ldrb	r1, [r3, #0]
    7d82:	7011      	strb	r1, [r2, #0]
    7d84:	3b01      	subs	r3, #1
    7d86:	3201      	adds	r2, #1
	for (uint8_t i = 0; i < MY_ADDRESS_LENGTH; i++)
    7d88:	4283      	cmp	r3, r0
    7d8a:	d1f9      	bne.n	7d80 <ReadMacAddress+0xc>
	for (i= 0; i < MY_ADDRESS_LENGTH; i++)
	{
		myLongAddress[i] = peui64[MY_ADDRESS_LENGTH-i-1] ;
	}
#endif
}
    7d8c:	bd10      	pop	{r4, pc}
    7d8e:	46c0      	nop			; (mov r8, r8)
    7d90:	0000e061 	.word	0x0000e061
    7d94:	20000020 	.word	0x20000020

00007d98 <main>:
{   
    7d98:	b570      	push	{r4, r5, r6, lr}
	system_init();
    7d9a:	4b10      	ldr	r3, [pc, #64]	; (7ddc <main+0x44>)
    7d9c:	4798      	blx	r3
	delay_init();
    7d9e:	4b10      	ldr	r3, [pc, #64]	; (7de0 <main+0x48>)
    7da0:	4798      	blx	r3
	cpu_irq_enable();
    7da2:	2201      	movs	r2, #1
    7da4:	4b0f      	ldr	r3, [pc, #60]	; (7de4 <main+0x4c>)
    7da6:	701a      	strb	r2, [r3, #0]
    7da8:	f3bf 8f5f 	dmb	sy
    7dac:	b662      	cpsie	i
	LCD_Initialize();
    7dae:	4b0e      	ldr	r3, [pc, #56]	; (7de8 <main+0x50>)
    7db0:	4798      	blx	r3
	sio2host_init();
    7db2:	4b0e      	ldr	r3, [pc, #56]	; (7dec <main+0x54>)
    7db4:	4798      	blx	r3
	ReadMacAddress(); 
    7db6:	4b0e      	ldr	r3, [pc, #56]	; (7df0 <main+0x58>)
    7db8:	4798      	blx	r3
	SystemTimerInit();
    7dba:	4b0e      	ldr	r3, [pc, #56]	; (7df4 <main+0x5c>)
    7dbc:	4798      	blx	r3
    DemoOutput_Greeting();	
    7dbe:	4b0e      	ldr	r3, [pc, #56]	; (7df8 <main+0x60>)
    7dc0:	4798      	blx	r3
    Buttons_init();
    7dc2:	4b0e      	ldr	r3, [pc, #56]	; (7dfc <main+0x64>)
    7dc4:	4798      	blx	r3
    Initialize_Demo(freezer_enable);
    7dc6:	2000      	movs	r0, #0
    7dc8:	4b0d      	ldr	r3, [pc, #52]	; (7e00 <main+0x68>)
    7dca:	4798      	blx	r3
    Stack_Init();
    7dcc:	4b0d      	ldr	r3, [pc, #52]	; (7e04 <main+0x6c>)
    7dce:	4798      	blx	r3
		SYSTEM_RunTasks();
    7dd0:	4d0d      	ldr	r5, [pc, #52]	; (7e08 <main+0x70>)
		Run_Demo();
    7dd2:	4c0e      	ldr	r4, [pc, #56]	; (7e0c <main+0x74>)
		SYSTEM_RunTasks();
    7dd4:	47a8      	blx	r5
		Run_Demo();
    7dd6:	47a0      	blx	r4
    7dd8:	e7fc      	b.n	7dd4 <main+0x3c>
    7dda:	46c0      	nop			; (mov r8, r8)
    7ddc:	000071c1 	.word	0x000071c1
    7de0:	000046ad 	.word	0x000046ad
    7de4:	20000014 	.word	0x20000014
    7de8:	00008449 	.word	0x00008449
    7dec:	0000c531 	.word	0x0000c531
    7df0:	00007d75 	.word	0x00007d75
    7df4:	0000d519 	.word	0x0000d519
    7df8:	00007a4d 	.word	0x00007a4d
    7dfc:	00007d39 	.word	0x00007d39
    7e00:	000081e5 	.word	0x000081e5
    7e04:	0000db51 	.word	0x0000db51
    7e08:	0000db61 	.word	0x0000db61
    7e0c:	00008435 	.word	0x00008435

00007e10 <TxToutCallback>:
}
#endif //#ifdef PERIODIC_UPLINK

// Transmission time-out callback
void TxToutCallback(void)
{
    7e10:	b510      	push	{r4, lr}
#if defined(ENABLE_SLEEP_FEATURE)
	send_data = 0;
#endif // #if defined(ENABLE_SLEEP_FEATURE)
	/* That bring the node back to continuous transaction cycle */
	PHY_DataConf(TRANSACTION_EXPIRED);
    7e12:	2005      	movs	r0, #5
    7e14:	4b03      	ldr	r3, [pc, #12]	; (7e24 <TxToutCallback+0x14>)
    7e16:	4798      	blx	r3
	SwTimerStop(TxTimerId);
    7e18:	4b03      	ldr	r3, [pc, #12]	; (7e28 <TxToutCallback+0x18>)
    7e1a:	7818      	ldrb	r0, [r3, #0]
    7e1c:	4b03      	ldr	r3, [pc, #12]	; (7e2c <TxToutCallback+0x1c>)
    7e1e:	4798      	blx	r3
}
    7e20:	bd10      	pop	{r4, pc}
    7e22:	46c0      	nop			; (mov r8, r8)
    7e24:	0000a1e5 	.word	0x0000a1e5
    7e28:	20000303 	.word	0x20000303
    7e2c:	0000d8cd 	.word	0x0000d8cd

00007e30 <dataConfcb>:

// Transmission callback
void dataConfcb(uint8_t handle, miwi_status_t status, uint8_t* msgPointer)
{
    7e30:	b510      	push	{r4, lr}
    7e32:	0014      	movs	r4, r2
#if defined (ENABLE_CONSOLE)
	printf("\nData Confirm: Handle: %d status:%d \r\n", handle, status);
    7e34:	000a      	movs	r2, r1
    7e36:	0001      	movs	r1, r0
    7e38:	4805      	ldr	r0, [pc, #20]	; (7e50 <dataConfcb+0x20>)
    7e3a:	4b06      	ldr	r3, [pc, #24]	; (7e54 <dataConfcb+0x24>)
    7e3c:	4798      	blx	r3
#endif // #if defined (ENABLE_CONSOLE)
#if defined(ENABLE_SLEEP_FEATURE)
	send_data = 0;
#endif // #if defined(ENABLE_SLEEP_FEATURE)
	/* Stop transmission timeout timer */
	SwTimerStop(TxTimerId);
    7e3e:	4b06      	ldr	r3, [pc, #24]	; (7e58 <dataConfcb+0x28>)
    7e40:	7818      	ldrb	r0, [r3, #0]
    7e42:	4b06      	ldr	r3, [pc, #24]	; (7e5c <dataConfcb+0x2c>)
    7e44:	4798      	blx	r3
	/* Free payload buffer allocated */
	MiMem_Free(msgPointer);
    7e46:	0020      	movs	r0, r4
    7e48:	4b05      	ldr	r3, [pc, #20]	; (7e60 <dataConfcb+0x30>)
    7e4a:	4798      	blx	r3
	SwTimerStart (DutyCyclingTimerId, MS_TO_US(dutyCyclingDurationMilliSec) , 0/*SW_TIMEOUT_RELATIVE*/, (void *)dutyCyclingCallback, NULL) ;
	#if defined (ENABLE_CONSOLE)
	printf("Send next data after: %ld ms\r\n", dutyCyclingDurationMilliSec) ;
	#endif
#endif // #ifdef DUTY_CYCLING
}
    7e4c:	bd10      	pop	{r4, pc}
    7e4e:	46c0      	nop			; (mov r8, r8)
    7e50:	0001899c 	.word	0x0001899c
    7e54:	00016fc9 	.word	0x00016fc9
    7e58:	20000303 	.word	0x20000303
    7e5c:	0000d8cd 	.word	0x0000d8cd
    7e60:	0000c299 	.word	0x0000c299

00007e64 <run_p2p_demo>:

void run_p2p_demo(void)
{
    7e64:	b570      	push	{r4, r5, r6, lr}
    7e66:	b086      	sub	sp, #24
		// Function ButtonPressed will return if any of the two buttons
		// has been pushed.
		/*******************************************************************/

		/* Read the button */
		uint8_t PressedButton = ButtonPressed();
    7e68:	4b6b      	ldr	r3, [pc, #428]	; (8018 <run_p2p_demo+0x1b4>)
    7e6a:	4798      	blx	r3
		switch( PressedButton )
    7e6c:	2801      	cmp	r0, #1
    7e6e:	d003      	beq.n	7e78 <run_p2p_demo+0x14>
    7e70:	2802      	cmp	r0, #2
    7e72:	d044      	beq.n	7efe <run_p2p_demo+0x9a>
			break;
			default:
			break;
		}
	}
}
    7e74:	b006      	add	sp, #24
    7e76:	bd70      	pop	{r4, r5, r6, pc}
				uint16_t broadcastAddress = 0xFFFF;
    7e78:	2201      	movs	r2, #1
    7e7a:	4252      	negs	r2, r2
    7e7c:	2316      	movs	r3, #22
    7e7e:	446b      	add	r3, sp
    7e80:	801a      	strh	r2, [r3, #0]
				dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(MAX_SEC_BCAST_PAYLOAD)); 
    7e82:	20e0      	movs	r0, #224	; 0xe0
    7e84:	4b65      	ldr	r3, [pc, #404]	; (801c <run_p2p_demo+0x1b8>)
    7e86:	4798      	blx	r3
				if (NULL == dataPtr)
    7e88:	2800      	cmp	r0, #0
    7e8a:	d0f3      	beq.n	7e74 <run_p2p_demo+0x10>
				for(i = 0; i < MAX_SEC_BCAST_PAYLOAD; i++) 
    7e8c:	2200      	movs	r2, #0
    7e8e:	4b64      	ldr	r3, [pc, #400]	; (8020 <run_p2p_demo+0x1bc>)
    7e90:	701a      	strb	r2, [r3, #0]
    7e92:	2400      	movs	r4, #0
					dataPtr[dataLen++] = 0x42;	// 'B'
    7e94:	2342      	movs	r3, #66	; 0x42
				for(i = 0; i < MAX_SEC_BCAST_PAYLOAD; i++) 
    7e96:	4d62      	ldr	r5, [pc, #392]	; (8020 <run_p2p_demo+0x1bc>)
					dataPtr[dataLen++] = 0x42;	// 'B'
    7e98:	1c62      	adds	r2, r4, #1
    7e9a:	b2d2      	uxtb	r2, r2
    7e9c:	5503      	strb	r3, [r0, r4]
				for(i = 0; i < MAX_SEC_BCAST_PAYLOAD; i++) 
    7e9e:	7829      	ldrb	r1, [r5, #0]
    7ea0:	3101      	adds	r1, #1
    7ea2:	b2c9      	uxtb	r1, r1
    7ea4:	7029      	strb	r1, [r5, #0]
					dataPtr[dataLen++] = 0x42;	// 'B'
    7ea6:	0014      	movs	r4, r2
				for(i = 0; i < MAX_SEC_BCAST_PAYLOAD; i++) 
    7ea8:	29d9      	cmp	r1, #217	; 0xd9
    7eaa:	d9f5      	bls.n	7e98 <run_p2p_demo+0x34>
				if(MiApp_SendData(SHORT_ADDR_LEN, (uint8_t *)&broadcastAddress, dataLen, dataPtr, msghandledemo++, true, dataConfcb)== false)
    7eac:	495d      	ldr	r1, [pc, #372]	; (8024 <run_p2p_demo+0x1c0>)
    7eae:	780b      	ldrb	r3, [r1, #0]
    7eb0:	1c5c      	adds	r4, r3, #1
    7eb2:	700c      	strb	r4, [r1, #0]
    7eb4:	495c      	ldr	r1, [pc, #368]	; (8028 <run_p2p_demo+0x1c4>)
    7eb6:	9102      	str	r1, [sp, #8]
    7eb8:	2101      	movs	r1, #1
    7eba:	9101      	str	r1, [sp, #4]
    7ebc:	9300      	str	r3, [sp, #0]
    7ebe:	0003      	movs	r3, r0
    7ec0:	3115      	adds	r1, #21
    7ec2:	4469      	add	r1, sp
    7ec4:	2002      	movs	r0, #2
    7ec6:	4c59      	ldr	r4, [pc, #356]	; (802c <run_p2p_demo+0x1c8>)
    7ec8:	47a0      	blx	r4
    7eca:	2800      	cmp	r0, #0
    7ecc:	d10d      	bne.n	7eea <run_p2p_demo+0x86>
					DemoOutput_BroadcastFail();
    7ece:	4b58      	ldr	r3, [pc, #352]	; (8030 <run_p2p_demo+0x1cc>)
    7ed0:	4798      	blx	r3
				DemoOutput_UpdateTxRx(++TxNum, RxNum);
    7ed2:	4b58      	ldr	r3, [pc, #352]	; (8034 <run_p2p_demo+0x1d0>)
    7ed4:	7818      	ldrb	r0, [r3, #0]
    7ed6:	3001      	adds	r0, #1
    7ed8:	b2c0      	uxtb	r0, r0
    7eda:	7018      	strb	r0, [r3, #0]
    7edc:	4b56      	ldr	r3, [pc, #344]	; (8038 <run_p2p_demo+0x1d4>)
    7ede:	7819      	ldrb	r1, [r3, #0]
    7ee0:	4b56      	ldr	r3, [pc, #344]	; (803c <run_p2p_demo+0x1d8>)
    7ee2:	4798      	blx	r3
				DemoOutput_Instruction();
    7ee4:	4b56      	ldr	r3, [pc, #344]	; (8040 <run_p2p_demo+0x1dc>)
    7ee6:	4798      	blx	r3
			break;
    7ee8:	e7c4      	b.n	7e74 <run_p2p_demo+0x10>
					SwTimerStart (TxTimerId, MS_TO_US(5000), 0/*SW_TIMEOUT_RELATIVE*/, (void *)TxToutCallback, NULL);
    7eea:	4b56      	ldr	r3, [pc, #344]	; (8044 <run_p2p_demo+0x1e0>)
    7eec:	7818      	ldrb	r0, [r3, #0]
    7eee:	2300      	movs	r3, #0
    7ef0:	9300      	str	r3, [sp, #0]
    7ef2:	4b55      	ldr	r3, [pc, #340]	; (8048 <run_p2p_demo+0x1e4>)
    7ef4:	2200      	movs	r2, #0
    7ef6:	4955      	ldr	r1, [pc, #340]	; (804c <run_p2p_demo+0x1e8>)
    7ef8:	4c55      	ldr	r4, [pc, #340]	; (8050 <run_p2p_demo+0x1ec>)
    7efa:	47a0      	blx	r4
    7efc:	e7e9      	b.n	7ed2 <run_p2p_demo+0x6e>
				chk_sel_status = true;
    7efe:	2301      	movs	r3, #1
    7f00:	4a54      	ldr	r2, [pc, #336]	; (8054 <run_p2p_demo+0x1f0>)
    7f02:	7013      	strb	r3, [r2, #0]
				select_ed = 0;
    7f04:	2100      	movs	r1, #0
    7f06:	4a54      	ldr	r2, [pc, #336]	; (8058 <run_p2p_demo+0x1f4>)
    7f08:	7011      	strb	r1, [r2, #0]
				update_ed = true;
    7f0a:	4a54      	ldr	r2, [pc, #336]	; (805c <run_p2p_demo+0x1f8>)
    7f0c:	7013      	strb	r3, [r2, #0]
						uint8_t switch_val = ButtonPressed();
    7f0e:	4c42      	ldr	r4, [pc, #264]	; (8018 <run_p2p_demo+0x1b4>)
				while(update_ed == true)
    7f10:	e039      	b.n	7f86 <run_p2p_demo+0x122>
							update_ed = false;
    7f12:	2300      	movs	r3, #0
    7f14:	4a51      	ldr	r2, [pc, #324]	; (805c <run_p2p_demo+0x1f8>)
    7f16:	7013      	strb	r3, [r2, #0]
							chk_sel_status = false;
    7f18:	4a4e      	ldr	r2, [pc, #312]	; (8054 <run_p2p_demo+0x1f0>)
    7f1a:	7013      	strb	r3, [r2, #0]
							dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(MAX_SEC_UCAST_PAYLOAD));
    7f1c:	30df      	adds	r0, #223	; 0xdf
    7f1e:	4b3f      	ldr	r3, [pc, #252]	; (801c <run_p2p_demo+0x1b8>)
    7f20:	4798      	blx	r3
							if (NULL == dataPtr)
    7f22:	2800      	cmp	r0, #0
    7f24:	d0a6      	beq.n	7e74 <run_p2p_demo+0x10>
							for(i = 0; i < MAX_SEC_UCAST_PAYLOAD; i++)        
    7f26:	2200      	movs	r2, #0
    7f28:	4b3d      	ldr	r3, [pc, #244]	; (8020 <run_p2p_demo+0x1bc>)
    7f2a:	701a      	strb	r2, [r3, #0]
    7f2c:	2500      	movs	r5, #0
								dataPtr[dataLen++] = 0x55;	// 'U'
    7f2e:	2355      	movs	r3, #85	; 0x55
							for(i = 0; i < MAX_SEC_UCAST_PAYLOAD; i++)        
    7f30:	4e3b      	ldr	r6, [pc, #236]	; (8020 <run_p2p_demo+0x1bc>)
								dataPtr[dataLen++] = 0x55;	// 'U'
    7f32:	1c6a      	adds	r2, r5, #1
    7f34:	b2d2      	uxtb	r2, r2
    7f36:	5543      	strb	r3, [r0, r5]
							for(i = 0; i < MAX_SEC_UCAST_PAYLOAD; i++)        
    7f38:	7831      	ldrb	r1, [r6, #0]
    7f3a:	3101      	adds	r1, #1
    7f3c:	b2c9      	uxtb	r1, r1
    7f3e:	7031      	strb	r1, [r6, #0]
								dataPtr[dataLen++] = 0x55;	// 'U'
    7f40:	0015      	movs	r5, r2
							for(i = 0; i < MAX_SEC_UCAST_PAYLOAD; i++)        
    7f42:	29d9      	cmp	r1, #217	; 0xd9
    7f44:	d9f5      	bls.n	7f32 <run_p2p_demo+0xce>
							if (MiApp_SendData(LONG_ADDR_LEN, ConnectionTable[select_ed].Address, dataLen, dataPtr, msghandledemo++, 1, dataConfcb) == false)
    7f46:	4b44      	ldr	r3, [pc, #272]	; (8058 <run_p2p_demo+0x1f4>)
    7f48:	781b      	ldrb	r3, [r3, #0]
    7f4a:	0099      	lsls	r1, r3, #2
    7f4c:	18c9      	adds	r1, r1, r3
    7f4e:	0049      	lsls	r1, r1, #1
    7f50:	4b43      	ldr	r3, [pc, #268]	; (8060 <run_p2p_demo+0x1fc>)
    7f52:	18c9      	adds	r1, r1, r3
    7f54:	4d33      	ldr	r5, [pc, #204]	; (8024 <run_p2p_demo+0x1c0>)
    7f56:	782b      	ldrb	r3, [r5, #0]
    7f58:	1c5e      	adds	r6, r3, #1
    7f5a:	702e      	strb	r6, [r5, #0]
    7f5c:	4d32      	ldr	r5, [pc, #200]	; (8028 <run_p2p_demo+0x1c4>)
    7f5e:	9502      	str	r5, [sp, #8]
    7f60:	2501      	movs	r5, #1
    7f62:	9501      	str	r5, [sp, #4]
    7f64:	9300      	str	r3, [sp, #0]
    7f66:	0003      	movs	r3, r0
    7f68:	2008      	movs	r0, #8
    7f6a:	4d30      	ldr	r5, [pc, #192]	; (802c <run_p2p_demo+0x1c8>)
    7f6c:	47a8      	blx	r5
    7f6e:	2800      	cmp	r0, #0
    7f70:	d140      	bne.n	7ff4 <run_p2p_demo+0x190>
								DemoOutput_UnicastFail();
    7f72:	4b3c      	ldr	r3, [pc, #240]	; (8064 <run_p2p_demo+0x200>)
    7f74:	4798      	blx	r3
							DemoOutput_UpdateTxRx(TxNum, RxNum);
    7f76:	4b30      	ldr	r3, [pc, #192]	; (8038 <run_p2p_demo+0x1d4>)
    7f78:	7819      	ldrb	r1, [r3, #0]
    7f7a:	4b2e      	ldr	r3, [pc, #184]	; (8034 <run_p2p_demo+0x1d0>)
    7f7c:	7818      	ldrb	r0, [r3, #0]
    7f7e:	4b2f      	ldr	r3, [pc, #188]	; (803c <run_p2p_demo+0x1d8>)
    7f80:	4798      	blx	r3
							DemoOutput_Instruction();
    7f82:	4b2f      	ldr	r3, [pc, #188]	; (8040 <run_p2p_demo+0x1dc>)
    7f84:	4798      	blx	r3
				while(update_ed == true)
    7f86:	4b35      	ldr	r3, [pc, #212]	; (805c <run_p2p_demo+0x1f8>)
    7f88:	781b      	ldrb	r3, [r3, #0]
    7f8a:	2b00      	cmp	r3, #0
    7f8c:	d100      	bne.n	7f90 <run_p2p_demo+0x12c>
    7f8e:	e771      	b.n	7e74 <run_p2p_demo+0x10>
					LCD_Erase();
    7f90:	4b35      	ldr	r3, [pc, #212]	; (8068 <run_p2p_demo+0x204>)
    7f92:	4798      	blx	r3
					snprintf(LCDText, sizeof(LCDText),(char*)"SW:%02d-%02x%02x%02x \nBUTTON1: Change node",select_ed,ConnectionTable[select_ed].Address[0],
    7f94:	4b30      	ldr	r3, [pc, #192]	; (8058 <run_p2p_demo+0x1f4>)
    7f96:	781b      	ldrb	r3, [r3, #0]
						ConnectionTable[select_ed].Address[1],ConnectionTable[select_ed].Address[2]);
    7f98:	4831      	ldr	r0, [pc, #196]	; (8060 <run_p2p_demo+0x1fc>)
    7f9a:	009a      	lsls	r2, r3, #2
    7f9c:	18d1      	adds	r1, r2, r3
    7f9e:	0049      	lsls	r1, r1, #1
    7fa0:	1841      	adds	r1, r0, r1
					snprintf(LCDText, sizeof(LCDText),(char*)"SW:%02d-%02x%02x%02x \nBUTTON1: Change node",select_ed,ConnectionTable[select_ed].Address[0],
    7fa2:	788d      	ldrb	r5, [r1, #2]
    7fa4:	9502      	str	r5, [sp, #8]
    7fa6:	7849      	ldrb	r1, [r1, #1]
    7fa8:	9101      	str	r1, [sp, #4]
    7faa:	18d2      	adds	r2, r2, r3
    7fac:	0052      	lsls	r2, r2, #1
    7fae:	5c12      	ldrb	r2, [r2, r0]
    7fb0:	9200      	str	r2, [sp, #0]
    7fb2:	4a2e      	ldr	r2, [pc, #184]	; (806c <run_p2p_demo+0x208>)
    7fb4:	2141      	movs	r1, #65	; 0x41
    7fb6:	482e      	ldr	r0, [pc, #184]	; (8070 <run_p2p_demo+0x20c>)
    7fb8:	4d2e      	ldr	r5, [pc, #184]	; (8074 <run_p2p_demo+0x210>)
    7fba:	47a8      	blx	r5
					LCD_Update();
    7fbc:	4b2e      	ldr	r3, [pc, #184]	; (8078 <run_p2p_demo+0x214>)
    7fbe:	4798      	blx	r3
					chk_sel_status = true;
    7fc0:	2201      	movs	r2, #1
    7fc2:	4b24      	ldr	r3, [pc, #144]	; (8054 <run_p2p_demo+0x1f0>)
    7fc4:	701a      	strb	r2, [r3, #0]
					while(chk_sel_status)
    7fc6:	001d      	movs	r5, r3
    7fc8:	782b      	ldrb	r3, [r5, #0]
    7fca:	2b00      	cmp	r3, #0
    7fcc:	d0db      	beq.n	7f86 <run_p2p_demo+0x122>
						uint8_t switch_val = ButtonPressed();
    7fce:	47a0      	blx	r4
						if(switch_val == 1)
    7fd0:	2801      	cmp	r0, #1
    7fd2:	d09e      	beq.n	7f12 <run_p2p_demo+0xae>
						else if(switch_val == 2)
    7fd4:	2802      	cmp	r0, #2
    7fd6:	d1f7      	bne.n	7fc8 <run_p2p_demo+0x164>
							if (select_ed > conn_size-2)
    7fd8:	4b1f      	ldr	r3, [pc, #124]	; (8058 <run_p2p_demo+0x1f4>)
    7fda:	781a      	ldrb	r2, [r3, #0]
    7fdc:	4b27      	ldr	r3, [pc, #156]	; (807c <run_p2p_demo+0x218>)
    7fde:	781b      	ldrb	r3, [r3, #0]
    7fe0:	3b02      	subs	r3, #2
    7fe2:	429a      	cmp	r2, r3
    7fe4:	dd14      	ble.n	8010 <run_p2p_demo+0x1ac>
								select_ed = 0;
    7fe6:	2200      	movs	r2, #0
    7fe8:	4b1b      	ldr	r3, [pc, #108]	; (8058 <run_p2p_demo+0x1f4>)
    7fea:	701a      	strb	r2, [r3, #0]
							chk_sel_status = false;
    7fec:	2200      	movs	r2, #0
    7fee:	4b19      	ldr	r3, [pc, #100]	; (8054 <run_p2p_demo+0x1f0>)
    7ff0:	701a      	strb	r2, [r3, #0]
    7ff2:	e7e9      	b.n	7fc8 <run_p2p_demo+0x164>
								TxNum++;
    7ff4:	4a0f      	ldr	r2, [pc, #60]	; (8034 <run_p2p_demo+0x1d0>)
    7ff6:	7813      	ldrb	r3, [r2, #0]
    7ff8:	3301      	adds	r3, #1
    7ffa:	7013      	strb	r3, [r2, #0]
								SwTimerStart (TxTimerId, MS_TO_US(5000), 0/*SW_TIMEOUT_RELATIVE*/, (void *)TxToutCallback, NULL);
    7ffc:	4b11      	ldr	r3, [pc, #68]	; (8044 <run_p2p_demo+0x1e0>)
    7ffe:	7818      	ldrb	r0, [r3, #0]
    8000:	2300      	movs	r3, #0
    8002:	9300      	str	r3, [sp, #0]
    8004:	4b10      	ldr	r3, [pc, #64]	; (8048 <run_p2p_demo+0x1e4>)
    8006:	2200      	movs	r2, #0
    8008:	4910      	ldr	r1, [pc, #64]	; (804c <run_p2p_demo+0x1e8>)
    800a:	4d11      	ldr	r5, [pc, #68]	; (8050 <run_p2p_demo+0x1ec>)
    800c:	47a8      	blx	r5
    800e:	e7b2      	b.n	7f76 <run_p2p_demo+0x112>
								select_ed = select_ed+1;
    8010:	3201      	adds	r2, #1
    8012:	4b11      	ldr	r3, [pc, #68]	; (8058 <run_p2p_demo+0x1f4>)
    8014:	701a      	strb	r2, [r3, #0]
    8016:	e7e9      	b.n	7fec <run_p2p_demo+0x188>
    8018:	00007cb9 	.word	0x00007cb9
    801c:	0000c1dd 	.word	0x0000c1dd
    8020:	2000216a 	.word	0x2000216a
    8024:	20000302 	.word	0x20000302
    8028:	00007e31 	.word	0x00007e31
    802c:	0000b01d 	.word	0x0000b01d
    8030:	00007c95 	.word	0x00007c95
    8034:	20000301 	.word	0x20000301
    8038:	20000300 	.word	0x20000300
    803c:	00007c39 	.word	0x00007c39
    8040:	00007b41 	.word	0x00007b41
    8044:	20000303 	.word	0x20000303
    8048:	00007e11 	.word	0x00007e11
    804c:	004c4b40 	.word	0x004c4b40
    8050:	0000d5b5 	.word	0x0000d5b5
    8054:	20000015 	.word	0x20000015
    8058:	20002169 	.word	0x20002169
    805c:	20002168 	.word	0x20002168
    8060:	20002844 	.word	0x20002844
    8064:	00007c71 	.word	0x00007c71
    8068:	00008455 	.word	0x00008455
    806c:	000189c4 	.word	0x000189c4
    8070:	2000216c 	.word	0x2000216c
    8074:	00017339 	.word	0x00017339
    8078:	00008471 	.word	0x00008471
    807c:	2000289d 	.word	0x2000289d

00008080 <ReceivedDataIndication>:

void ReceivedDataIndication (RECEIVED_MESSAGE *ind)
{
    8080:	b510      	push	{r4, lr}
    /*******************************************************************/
    // If a packet has been received, handle the information available
    // in rxMessage.
    /*******************************************************************/
	if ((myPANID.v[1] == ind->SourcePANID.v[1]) && (myPANID.v[0] == ind->SourcePANID.v[0]))
    8082:	4b0e      	ldr	r3, [pc, #56]	; (80bc <ReceivedDataIndication+0x3c>)
    8084:	881a      	ldrh	r2, [r3, #0]
    8086:	8843      	ldrh	r3, [r0, #2]
    8088:	429a      	cmp	r2, r3
    808a:	d005      	beq.n	8098 <ReceivedDataIndication+0x18>
		LED_Toggle(LED0);
		DemoOutput_Instruction();
	}
	else
	{
		printf("Packet received from other Source PAN ID : 0x%x%x\r\n",ind->SourcePANID.v[1],ind->SourcePANID.v[0]);
    808c:	7882      	ldrb	r2, [r0, #2]
    808e:	78c1      	ldrb	r1, [r0, #3]
    8090:	480b      	ldr	r0, [pc, #44]	; (80c0 <ReceivedDataIndication+0x40>)
    8092:	4b0c      	ldr	r3, [pc, #48]	; (80c4 <ReceivedDataIndication+0x44>)
    8094:	4798      	blx	r3
	}
}
    8096:	bd10      	pop	{r4, pc}
		DemoOutput_HandleMessage();
    8098:	4b0b      	ldr	r3, [pc, #44]	; (80c8 <ReceivedDataIndication+0x48>)
    809a:	4798      	blx	r3
		DemoOutput_UpdateTxRx(TxNum, ++RxNum);
    809c:	4b0b      	ldr	r3, [pc, #44]	; (80cc <ReceivedDataIndication+0x4c>)
    809e:	7818      	ldrb	r0, [r3, #0]
    80a0:	4b0b      	ldr	r3, [pc, #44]	; (80d0 <ReceivedDataIndication+0x50>)
    80a2:	7819      	ldrb	r1, [r3, #0]
    80a4:	3101      	adds	r1, #1
    80a6:	b2c9      	uxtb	r1, r1
    80a8:	7019      	strb	r1, [r3, #0]
    80aa:	4b0a      	ldr	r3, [pc, #40]	; (80d4 <ReceivedDataIndication+0x54>)
    80ac:	4798      	blx	r3
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    80ae:	2280      	movs	r2, #128	; 0x80
    80b0:	0312      	lsls	r2, r2, #12
    80b2:	4b09      	ldr	r3, [pc, #36]	; (80d8 <ReceivedDataIndication+0x58>)
    80b4:	61da      	str	r2, [r3, #28]
		DemoOutput_Instruction();
    80b6:	4b09      	ldr	r3, [pc, #36]	; (80dc <ReceivedDataIndication+0x5c>)
    80b8:	4798      	blx	r3
    80ba:	e7ec      	b.n	8096 <ReceivedDataIndication+0x16>
    80bc:	20002894 	.word	0x20002894
    80c0:	00018968 	.word	0x00018968
    80c4:	00016fc9 	.word	0x00016fc9
    80c8:	00007b59 	.word	0x00007b59
    80cc:	20000301 	.word	0x20000301
    80d0:	20000300 	.word	0x20000300
    80d4:	00007c39 	.word	0x00007c39
    80d8:	40002800 	.word	0x40002800
    80dc:	00007b41 	.word	0x00007b41

000080e0 <Connection_Confirm>:
#endif // #if defined (ENABLE_CONSOLE)
}
#endif // #ifdef ENABLE_ACTIVE_SCAN	

static void Connection_Confirm(miwi_status_t status)
{
    80e0:	b510      	push	{r4, lr}
    80e2:	0004      	movs	r4, r0
#if defined (ENABLE_CONSOLE)	
	printf("\r\nConnect Operation Status: %d\n", status) ;
    80e4:	0001      	movs	r1, r0
    80e6:	4806      	ldr	r0, [pc, #24]	; (8100 <Connection_Confirm+0x20>)
    80e8:	4b06      	ldr	r3, [pc, #24]	; (8104 <Connection_Confirm+0x24>)
    80ea:	4798      	blx	r3
#endif // #if defined (ENABLE_CONSOLE)

    if ((SUCCESS == status) || (ALREADY_EXISTS == status))
    80ec:	2c00      	cmp	r4, #0
    80ee:	d001      	beq.n	80f4 <Connection_Confirm+0x14>
    80f0:	2c06      	cmp	r4, #6
    80f2:	d104      	bne.n	80fe <Connection_Confirm+0x1e>
    {
#if defined (ENABLE_CONSOLE)
		printf("\r\nStarted Wireless Communication on Channel %u\r\n", currentChannel) ;
    80f4:	4b04      	ldr	r3, [pc, #16]	; (8108 <Connection_Confirm+0x28>)
    80f6:	7819      	ldrb	r1, [r3, #0]
    80f8:	4804      	ldr	r0, [pc, #16]	; (810c <Connection_Confirm+0x2c>)
    80fa:	4b02      	ldr	r3, [pc, #8]	; (8104 <Connection_Confirm+0x24>)
    80fc:	4798      	blx	r3

#ifdef DUTY_CYCLING
		SwTimerCreate(&DutyCyclingTimerId) ;
#endif // #ifdef DUTY_CYCLING
	}
}
    80fe:	bd10      	pop	{r4, pc}
    8100:	000189f0 	.word	0x000189f0
    8104:	00016fc9 	.word	0x00016fc9
    8108:	2000001d 	.word	0x2000001d
    810c:	00018a10 	.word	0x00018a10

00008110 <Scan_Confirm>:
{
    8110:	b5f0      	push	{r4, r5, r6, r7, lr}
    8112:	46de      	mov	lr, fp
    8114:	4657      	mov	r7, sl
    8116:	464e      	mov	r6, r9
    8118:	4645      	mov	r5, r8
    811a:	b5e0      	push	{r5, r6, r7, lr}
    811c:	b083      	sub	sp, #12
    811e:	0003      	movs	r3, r0
    8120:	9001      	str	r0, [sp, #4]
    8122:	468b      	mov	fp, r1
	for(uint8_t count =0; count <= ActiveScanResultCount-1; count++ )
    8124:	3b01      	subs	r3, #1
    8126:	4699      	mov	r9, r3
    8128:	d440      	bmi.n	81ac <Scan_Confirm+0x9c>
    812a:	2400      	movs	r4, #0
    812c:	2300      	movs	r3, #0
    812e:	4698      	mov	r8, r3
		printf("\nID\tDevice Address \t\tCapability \tPAN ID \tChannel \n");
    8130:	4b24      	ldr	r3, [pc, #144]	; (81c4 <Scan_Confirm+0xb4>)
    8132:	469a      	mov	sl, r3
		printf("%02x",count+1);
    8134:	464b      	mov	r3, r9
    8136:	9300      	str	r3, [sp, #0]
    8138:	e01f      	b.n	817a <Scan_Confirm+0x6a>
		printf("\t");
    813a:	2009      	movs	r0, #9
    813c:	4e22      	ldr	r6, [pc, #136]	; (81c8 <Scan_Confirm+0xb8>)
    813e:	47b0      	blx	r6
		printf("%02x",(ActiveScanResult[count].Capability.Val));	
    8140:	464b      	mov	r3, r9
    8142:	7b99      	ldrb	r1, [r3, #14]
    8144:	4c21      	ldr	r4, [pc, #132]	; (81cc <Scan_Confirm+0xbc>)
    8146:	0020      	movs	r0, r4
    8148:	4d21      	ldr	r5, [pc, #132]	; (81d0 <Scan_Confirm+0xc0>)
    814a:	47a8      	blx	r5
		printf("\t\t");
    814c:	4821      	ldr	r0, [pc, #132]	; (81d4 <Scan_Confirm+0xc4>)
    814e:	47a8      	blx	r5
		printf("%02x",(ActiveScanResult[count].PANID.Val));
    8150:	464b      	mov	r3, r9
    8152:	8959      	ldrh	r1, [r3, #10]
    8154:	0020      	movs	r0, r4
    8156:	47a8      	blx	r5
		printf("\t");
    8158:	2009      	movs	r0, #9
    815a:	47b0      	blx	r6
		printf("%02x",ActiveScanResult[count].Channel);
    815c:	464b      	mov	r3, r9
    815e:	7819      	ldrb	r1, [r3, #0]
    8160:	0020      	movs	r0, r4
    8162:	47a8      	blx	r5
		printf("\r\n");
    8164:	481c      	ldr	r0, [pc, #112]	; (81d8 <Scan_Confirm+0xc8>)
    8166:	4b17      	ldr	r3, [pc, #92]	; (81c4 <Scan_Confirm+0xb4>)
    8168:	4798      	blx	r3
	for(uint8_t count =0; count <= ActiveScanResultCount-1; count++ )
    816a:	4643      	mov	r3, r8
    816c:	3301      	adds	r3, #1
    816e:	b2db      	uxtb	r3, r3
    8170:	4698      	mov	r8, r3
    8172:	001c      	movs	r4, r3
    8174:	9b00      	ldr	r3, [sp, #0]
    8176:	4598      	cmp	r8, r3
    8178:	dc18      	bgt.n	81ac <Scan_Confirm+0x9c>
		printf("\nID\tDevice Address \t\tCapability \tPAN ID \tChannel \n");
    817a:	4818      	ldr	r0, [pc, #96]	; (81dc <Scan_Confirm+0xcc>)
    817c:	47d0      	blx	sl
		printf("%02x",count+1);
    817e:	1c61      	adds	r1, r4, #1
    8180:	4812      	ldr	r0, [pc, #72]	; (81cc <Scan_Confirm+0xbc>)
    8182:	4b13      	ldr	r3, [pc, #76]	; (81d0 <Scan_Confirm+0xc0>)
    8184:	4798      	blx	r3
		printf("\t");
    8186:	2009      	movs	r0, #9
    8188:	4b0f      	ldr	r3, [pc, #60]	; (81c8 <Scan_Confirm+0xb8>)
    818a:	4798      	blx	r3
				printf("%02x",ActiveScanResult[count].Address[MY_ADDRESS_LENGTH-1-j] );
    818c:	4643      	mov	r3, r8
    818e:	011b      	lsls	r3, r3, #4
    8190:	445b      	add	r3, fp
    8192:	4699      	mov	r9, r3
    8194:	001c      	movs	r4, r3
    8196:	3408      	adds	r4, #8
    8198:	001f      	movs	r7, r3
    819a:	4e0c      	ldr	r6, [pc, #48]	; (81cc <Scan_Confirm+0xbc>)
    819c:	4d0c      	ldr	r5, [pc, #48]	; (81d0 <Scan_Confirm+0xc0>)
    819e:	7821      	ldrb	r1, [r4, #0]
    81a0:	0030      	movs	r0, r6
    81a2:	47a8      	blx	r5
    81a4:	3c01      	subs	r4, #1
		for(uint8_t j = 0; j < 8; j++)
    81a6:	42a7      	cmp	r7, r4
    81a8:	d1f9      	bne.n	819e <Scan_Confirm+0x8e>
    81aa:	e7c6      	b.n	813a <Scan_Confirm+0x2a>
	printf("\r\n Scan Operation Status: %d device found",ActiveScanResultCount); 
    81ac:	9901      	ldr	r1, [sp, #4]
    81ae:	480c      	ldr	r0, [pc, #48]	; (81e0 <Scan_Confirm+0xd0>)
    81b0:	4b07      	ldr	r3, [pc, #28]	; (81d0 <Scan_Confirm+0xc0>)
    81b2:	4798      	blx	r3
}
    81b4:	b003      	add	sp, #12
    81b6:	bc3c      	pop	{r2, r3, r4, r5}
    81b8:	4690      	mov	r8, r2
    81ba:	4699      	mov	r9, r3
    81bc:	46a2      	mov	sl, r4
    81be:	46ab      	mov	fp, r5
    81c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    81c2:	46c0      	nop			; (mov r8, r8)
    81c4:	000170e5 	.word	0x000170e5
    81c8:	00016ffd 	.word	0x00016ffd
    81cc:	00018904 	.word	0x00018904
    81d0:	00016fc9 	.word	0x00016fc9
    81d4:	00018b40 	.word	0x00018b40
    81d8:	000190c0 	.word	0x000190c0
    81dc:	00018b0c 	.word	0x00018b0c
    81e0:	00018b44 	.word	0x00018b44

000081e4 <Initialize_Demo>:

bool Initialize_Demo(bool freezer_enable)
{
    81e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    81e6:	46ce      	mov	lr, r9
    81e8:	b500      	push	{lr}
    81ea:	b086      	sub	sp, #24
    81ec:	0004      	movs	r4, r0
    uint8_t i;

	bool invalidIEEEAddrFlag = false;
	uint64_t invalidIEEEAddr;

    MiApp_SubscribeDataIndicationCallback(ReceivedDataIndication);
    81ee:	486f      	ldr	r0, [pc, #444]	; (83ac <Initialize_Demo+0x1c8>)
    81f0:	4b6f      	ldr	r3, [pc, #444]	; (83b0 <Initialize_Demo+0x1cc>)
    81f2:	4798      	blx	r3

#ifdef ENABLE_SLEEP_FEATURE
	sm_init();
#endif

    if (freezer_enable)
    81f4:	2c00      	cmp	r4, #0
    81f6:	d035      	beq.n	8264 <Initialize_Demo+0x80>
    {
        MiApp_ProtocolInit(NULL, NULL);
    81f8:	2100      	movs	r1, #0
    81fa:	2000      	movs	r0, #0
    81fc:	4b6d      	ldr	r3, [pc, #436]	; (83b4 <Initialize_Demo+0x1d0>)
    81fe:	4798      	blx	r3
		srand(PHY_RandomReq());
    8200:	4b6d      	ldr	r3, [pc, #436]	; (83b8 <Initialize_Demo+0x1d4>)
    8202:	4798      	blx	r3
    8204:	4b6d      	ldr	r3, [pc, #436]	; (83bc <Initialize_Demo+0x1d8>)
    8206:	4798      	blx	r3
		/* Check if a valid IEEE address is available.
		0x0000000000000000 and 0xFFFFFFFFFFFFFFFF is presumed to be invalid */
		/* Check if IEEE address is 0x0000000000000000 */
		memset((uint8_t *)&invalidIEEEAddr, 0x00, LONG_ADDR_LEN);
    8208:	2200      	movs	r2, #0
    820a:	2300      	movs	r3, #0
    820c:	9204      	str	r2, [sp, #16]
    820e:	9305      	str	r3, [sp, #20]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    8210:	4e6b      	ldr	r6, [pc, #428]	; (83c0 <Initialize_Demo+0x1dc>)
    8212:	3208      	adds	r2, #8
    8214:	0031      	movs	r1, r6
    8216:	a804      	add	r0, sp, #16
    8218:	4d6a      	ldr	r5, [pc, #424]	; (83c4 <Initialize_Demo+0x1e0>)
    821a:	47a8      	blx	r5
    821c:	0004      	movs	r4, r0
		{
			invalidIEEEAddrFlag = true;
		}

		/* Check if IEEE address is 0xFFFFFFFFFFFFFFFF */
		memset((uint8_t *)&invalidIEEEAddr, 0xFF, LONG_ADDR_LEN);
    821e:	2201      	movs	r2, #1
    8220:	4252      	negs	r2, r2
    8222:	17d3      	asrs	r3, r2, #31
    8224:	9204      	str	r2, [sp, #16]
    8226:	9305      	str	r3, [sp, #20]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    8228:	3209      	adds	r2, #9
    822a:	0031      	movs	r1, r6
    822c:	a804      	add	r0, sp, #16
    822e:	47a8      	blx	r5
    8230:	2800      	cmp	r0, #0
    8232:	d001      	beq.n	8238 <Initialize_Demo+0x54>
		{
			invalidIEEEAddrFlag = true;
		}
		
		if (invalidIEEEAddrFlag)
    8234:	2c00      	cmp	r4, #0
    8236:	d108      	bne.n	824a <Initialize_Demo+0x66>
    8238:	4c61      	ldr	r4, [pc, #388]	; (83c0 <Initialize_Demo+0x1dc>)
    823a:	0026      	movs	r6, r4
    823c:	3608      	adds	r6, #8
			 * In production code this can be omitted.
			 */
			uint8_t* peui64 = (uint8_t *)&myLongAddress;
			for(i = 0; i<MY_ADDRESS_LENGTH; i++)
			{
				*peui64++ = (uint8_t)rand();
    823e:	4d62      	ldr	r5, [pc, #392]	; (83c8 <Initialize_Demo+0x1e4>)
    8240:	47a8      	blx	r5
    8242:	7020      	strb	r0, [r4, #0]
    8244:	3401      	adds	r4, #1
			for(i = 0; i<MY_ADDRESS_LENGTH; i++)
    8246:	42b4      	cmp	r4, r6
    8248:	d1fa      	bne.n	8240 <Initialize_Demo+0x5c>
			}
		}
		PHY_SetIEEEAddr((uint8_t *)&myLongAddress);
    824a:	485d      	ldr	r0, [pc, #372]	; (83c0 <Initialize_Demo+0x1dc>)
    824c:	4b5f      	ldr	r3, [pc, #380]	; (83cc <Initialize_Demo+0x1e8>)
    824e:	4798      	blx	r3
#if defined(PROTOCOL_P2P)  
		DemoOutput_Instruction();
    8250:	4b5f      	ldr	r3, [pc, #380]	; (83d0 <Initialize_Demo+0x1ec>)
    8252:	4798      	blx	r3
        DemoOutput_Instruction();
#endif    
    }
	
	/* Create SW timer for transmission timeout */
	SwTimerCreate(&TxTimerId) ;
    8254:	485f      	ldr	r0, [pc, #380]	; (83d4 <Initialize_Demo+0x1f0>)
    8256:	4b60      	ldr	r3, [pc, #384]	; (83d8 <Initialize_Demo+0x1f4>)
    8258:	4798      	blx	r3
	
	return true;
}
    825a:	2001      	movs	r0, #1
    825c:	b006      	add	sp, #24
    825e:	bc04      	pop	{r2}
    8260:	4691      	mov	r9, r2
    8262:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port_base->OUTSET.reg = pin_mask;
    8264:	2280      	movs	r2, #128	; 0x80
    8266:	0312      	lsls	r2, r2, #12
    8268:	4b5c      	ldr	r3, [pc, #368]	; (83dc <Initialize_Demo+0x1f8>)
    826a:	619a      	str	r2, [r3, #24]
        MiApp_ProtocolInit(NULL, NULL);
    826c:	2100      	movs	r1, #0
    826e:	2000      	movs	r0, #0
    8270:	4b50      	ldr	r3, [pc, #320]	; (83b4 <Initialize_Demo+0x1d0>)
    8272:	4798      	blx	r3
		uint8_t txPower = 0x1F ;
    8274:	240a      	movs	r4, #10
    8276:	446c      	add	r4, sp
    8278:	231f      	movs	r3, #31
    827a:	7023      	strb	r3, [r4, #0]
		RADIO_GetAttr(OUTPUT_POWER, (void *)&txPower) ;
    827c:	0021      	movs	r1, r4
    827e:	2004      	movs	r0, #4
    8280:	4d57      	ldr	r5, [pc, #348]	; (83e0 <Initialize_Demo+0x1fc>)
    8282:	47a8      	blx	r5
		uint8_t paBoost = 255 ;
    8284:	260b      	movs	r6, #11
    8286:	446e      	add	r6, sp
    8288:	23ff      	movs	r3, #255	; 0xff
    828a:	7033      	strb	r3, [r6, #0]
		RADIO_GetAttr(PABOOST, (void *)&paBoost) ;
    828c:	0031      	movs	r1, r6
    828e:	2008      	movs	r0, #8
    8290:	47a8      	blx	r5
		RadioDataRate_t sf = 33 ;
    8292:	ad03      	add	r5, sp, #12
    8294:	2321      	movs	r3, #33	; 0x21
    8296:	702b      	strb	r3, [r5, #0]
		PHY_GetAttribute(SPREADING_FACTOR, (void *)&sf) ;
    8298:	0029      	movs	r1, r5
    829a:	2016      	movs	r0, #22
    829c:	4f51      	ldr	r7, [pc, #324]	; (83e4 <Initialize_Demo+0x200>)
    829e:	47b8      	blx	r7
		PHY_GetAttribute(BANDWIDTH, (void *)&bw) ;
    82a0:	230d      	movs	r3, #13
    82a2:	446b      	add	r3, sp
    82a4:	4699      	mov	r9, r3
    82a6:	0019      	movs	r1, r3
    82a8:	2007      	movs	r0, #7
    82aa:	47b8      	blx	r7
		printf("\r\n-----------------------------------------------------\r\n") ;
    82ac:	484e      	ldr	r0, [pc, #312]	; (83e8 <Initialize_Demo+0x204>)
    82ae:	4f4f      	ldr	r7, [pc, #316]	; (83ec <Initialize_Demo+0x208>)
    82b0:	47b8      	blx	r7
		printf("RF Parameters\r\n") ;
    82b2:	484f      	ldr	r0, [pc, #316]	; (83f0 <Initialize_Demo+0x20c>)
    82b4:	47b8      	blx	r7
		printf(" - Tx output power: %d\r\n", txPower) ;
    82b6:	7821      	ldrb	r1, [r4, #0]
    82b8:	484e      	ldr	r0, [pc, #312]	; (83f4 <Initialize_Demo+0x210>)
    82ba:	4c4f      	ldr	r4, [pc, #316]	; (83f8 <Initialize_Demo+0x214>)
    82bc:	47a0      	blx	r4
		printf(" - PA boost: %d\r\n", paBoost) ;
    82be:	7831      	ldrb	r1, [r6, #0]
    82c0:	484e      	ldr	r0, [pc, #312]	; (83fc <Initialize_Demo+0x218>)
    82c2:	47a0      	blx	r4
		printf(" - Spreading factor: SF%d\r\n", sf) ;
    82c4:	7829      	ldrb	r1, [r5, #0]
    82c6:	484e      	ldr	r0, [pc, #312]	; (8400 <Initialize_Demo+0x21c>)
    82c8:	47a0      	blx	r4
		printf(" - Bandwidth (125kHz=7, 250kHz=8, 500kHz=9): %d", bw) ;
    82ca:	464b      	mov	r3, r9
    82cc:	7819      	ldrb	r1, [r3, #0]
    82ce:	484d      	ldr	r0, [pc, #308]	; (8404 <Initialize_Demo+0x220>)
    82d0:	47a0      	blx	r4
		printf("\r\n-----------------------------------------------------\r\n") ;
    82d2:	4845      	ldr	r0, [pc, #276]	; (83e8 <Initialize_Demo+0x204>)
    82d4:	47b8      	blx	r7
		srand(PHY_RandomReq());
    82d6:	4b38      	ldr	r3, [pc, #224]	; (83b8 <Initialize_Demo+0x1d4>)
    82d8:	4798      	blx	r3
    82da:	4b38      	ldr	r3, [pc, #224]	; (83bc <Initialize_Demo+0x1d8>)
    82dc:	4798      	blx	r3
		memset((uint8_t *)&invalidIEEEAddr, 0x00, LONG_ADDR_LEN);
    82de:	2200      	movs	r2, #0
    82e0:	2300      	movs	r3, #0
    82e2:	9204      	str	r2, [sp, #16]
    82e4:	9305      	str	r3, [sp, #20]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    82e6:	4e36      	ldr	r6, [pc, #216]	; (83c0 <Initialize_Demo+0x1dc>)
    82e8:	3208      	adds	r2, #8
    82ea:	0031      	movs	r1, r6
    82ec:	a804      	add	r0, sp, #16
    82ee:	4d35      	ldr	r5, [pc, #212]	; (83c4 <Initialize_Demo+0x1e0>)
    82f0:	47a8      	blx	r5
    82f2:	0004      	movs	r4, r0
		memset((uint8_t *)&invalidIEEEAddr, 0xFF, LONG_ADDR_LEN);
    82f4:	2201      	movs	r2, #1
    82f6:	4252      	negs	r2, r2
    82f8:	17d3      	asrs	r3, r2, #31
    82fa:	9204      	str	r2, [sp, #16]
    82fc:	9305      	str	r3, [sp, #20]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    82fe:	3209      	adds	r2, #9
    8300:	0031      	movs	r1, r6
    8302:	a804      	add	r0, sp, #16
    8304:	47a8      	blx	r5
    8306:	2800      	cmp	r0, #0
    8308:	d036      	beq.n	8378 <Initialize_Demo+0x194>
		if (invalidIEEEAddrFlag)
    830a:	2c00      	cmp	r4, #0
    830c:	d034      	beq.n	8378 <Initialize_Demo+0x194>
		PHY_SetIEEEAddr((uint8_t *)&myLongAddress);
    830e:	482c      	ldr	r0, [pc, #176]	; (83c0 <Initialize_Demo+0x1dc>)
    8310:	4b2e      	ldr	r3, [pc, #184]	; (83cc <Initialize_Demo+0x1e8>)
    8312:	4798      	blx	r3
        MiApp_ConnectionMode(ENABLE_ALL_CONN);
    8314:	2000      	movs	r0, #0
    8316:	4b3c      	ldr	r3, [pc, #240]	; (8408 <Initialize_Demo+0x224>)
    8318:	4798      	blx	r3
        DemoOutput_Channel(myChannel, 0);
    831a:	4c3c      	ldr	r4, [pc, #240]	; (840c <Initialize_Demo+0x228>)
    831c:	7820      	ldrb	r0, [r4, #0]
    831e:	2100      	movs	r1, #0
    8320:	4b3b      	ldr	r3, [pc, #236]	; (8410 <Initialize_Demo+0x22c>)
    8322:	4798      	blx	r3
		MiApp_SearchConnection(5, 0xFFFFFFFF, Scan_Confirm);
    8324:	4a3b      	ldr	r2, [pc, #236]	; (8414 <Initialize_Demo+0x230>)
    8326:	2101      	movs	r1, #1
    8328:	4249      	negs	r1, r1
    832a:	2005      	movs	r0, #5
    832c:	4b3a      	ldr	r3, [pc, #232]	; (8418 <Initialize_Demo+0x234>)
    832e:	4798      	blx	r3
        if( MiApp_Set(CHANNEL, &myChannel) == false )
    8330:	0021      	movs	r1, r4
    8332:	2000      	movs	r0, #0
    8334:	4b39      	ldr	r3, [pc, #228]	; (841c <Initialize_Demo+0x238>)
    8336:	4798      	blx	r3
    8338:	2800      	cmp	r0, #0
    833a:	d027      	beq.n	838c <Initialize_Demo+0x1a8>
		uint16_t broadcastAddress = 0xFFFF;
    833c:	220e      	movs	r2, #14
    833e:	446a      	add	r2, sp
    8340:	2301      	movs	r3, #1
    8342:	425b      	negs	r3, r3
    8344:	8013      	strh	r3, [r2, #0]
		i = MiApp_EstablishConnection(myChannel, 0, (uint8_t*)&broadcastAddress, 0, Connection_Confirm);
    8346:	4b31      	ldr	r3, [pc, #196]	; (840c <Initialize_Demo+0x228>)
    8348:	7818      	ldrb	r0, [r3, #0]
    834a:	4b35      	ldr	r3, [pc, #212]	; (8420 <Initialize_Demo+0x23c>)
    834c:	9300      	str	r3, [sp, #0]
    834e:	2300      	movs	r3, #0
    8350:	2100      	movs	r1, #0
    8352:	4c34      	ldr	r4, [pc, #208]	; (8424 <Initialize_Demo+0x240>)
    8354:	47a0      	blx	r4
        if( i != 0xFF )
    8356:	28ff      	cmp	r0, #255	; 0xff
    8358:	d01d      	beq.n	8396 <Initialize_Demo+0x1b2>
            DemoOutput_Channel(myChannel, 1);
    835a:	4b2c      	ldr	r3, [pc, #176]	; (840c <Initialize_Demo+0x228>)
    835c:	7818      	ldrb	r0, [r3, #0]
    835e:	2101      	movs	r1, #1
    8360:	4b2b      	ldr	r3, [pc, #172]	; (8410 <Initialize_Demo+0x22c>)
    8362:	4798      	blx	r3
		DumpConnection(0xFF);
    8364:	20ff      	movs	r0, #255	; 0xff
    8366:	4b30      	ldr	r3, [pc, #192]	; (8428 <Initialize_Demo+0x244>)
    8368:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    836a:	2280      	movs	r2, #128	; 0x80
    836c:	0312      	lsls	r2, r2, #12
    836e:	4b1b      	ldr	r3, [pc, #108]	; (83dc <Initialize_Demo+0x1f8>)
    8370:	615a      	str	r2, [r3, #20]
        DemoOutput_Instruction();
    8372:	4b17      	ldr	r3, [pc, #92]	; (83d0 <Initialize_Demo+0x1ec>)
    8374:	4798      	blx	r3
    8376:	e76d      	b.n	8254 <Initialize_Demo+0x70>
    8378:	4c11      	ldr	r4, [pc, #68]	; (83c0 <Initialize_Demo+0x1dc>)
    837a:	0026      	movs	r6, r4
    837c:	3608      	adds	r6, #8
				*peui64++ = (uint8_t)rand();
    837e:	4d12      	ldr	r5, [pc, #72]	; (83c8 <Initialize_Demo+0x1e4>)
    8380:	47a8      	blx	r5
    8382:	7020      	strb	r0, [r4, #0]
    8384:	3401      	adds	r4, #1
			for(i = 0; i<MY_ADDRESS_LENGTH; i++)
    8386:	42b4      	cmp	r4, r6
    8388:	d1fa      	bne.n	8380 <Initialize_Demo+0x19c>
    838a:	e7c0      	b.n	830e <Initialize_Demo+0x12a>
            DemoOutput_ChannelError(myChannel);
    838c:	4b1f      	ldr	r3, [pc, #124]	; (840c <Initialize_Demo+0x228>)
    838e:	7818      	ldrb	r0, [r3, #0]
    8390:	4b26      	ldr	r3, [pc, #152]	; (842c <Initialize_Demo+0x248>)
    8392:	4798      	blx	r3
    8394:	e7d2      	b.n	833c <Initialize_Demo+0x158>
            MiApp_StartConnection(START_CONN_DIRECT, 10, (1L << myChannel), Connection_Confirm);
    8396:	4b1d      	ldr	r3, [pc, #116]	; (840c <Initialize_Demo+0x228>)
    8398:	781b      	ldrb	r3, [r3, #0]
    839a:	2201      	movs	r2, #1
    839c:	409a      	lsls	r2, r3
    839e:	4b20      	ldr	r3, [pc, #128]	; (8420 <Initialize_Demo+0x23c>)
    83a0:	210a      	movs	r1, #10
    83a2:	2000      	movs	r0, #0
    83a4:	4c22      	ldr	r4, [pc, #136]	; (8430 <Initialize_Demo+0x24c>)
    83a6:	47a0      	blx	r4
    83a8:	e7dc      	b.n	8364 <Initialize_Demo+0x180>
    83aa:	46c0      	nop			; (mov r8, r8)
    83ac:	00008081 	.word	0x00008081
    83b0:	0000b5a9 	.word	0x0000b5a9
    83b4:	0000b175 	.word	0x0000b175
    83b8:	0000ad79 	.word	0x0000ad79
    83bc:	000170f9 	.word	0x000170f9
    83c0:	20000020 	.word	0x20000020
    83c4:	000169f1 	.word	0x000169f1
    83c8:	00017155 	.word	0x00017155
    83cc:	0000ad9d 	.word	0x0000ad9d
    83d0:	00007b41 	.word	0x00007b41
    83d4:	20000303 	.word	0x20000303
    83d8:	0000d581 	.word	0x0000d581
    83dc:	40002800 	.word	0x40002800
    83e0:	0000e48d 	.word	0x0000e48d
    83e4:	0000ac75 	.word	0x0000ac75
    83e8:	00018a44 	.word	0x00018a44
    83ec:	000170e5 	.word	0x000170e5
    83f0:	00018a80 	.word	0x00018a80
    83f4:	00018a90 	.word	0x00018a90
    83f8:	00016fc9 	.word	0x00016fc9
    83fc:	00018aac 	.word	0x00018aac
    8400:	00018ac0 	.word	0x00018ac0
    8404:	00018adc 	.word	0x00018adc
    8408:	0000b589 	.word	0x0000b589
    840c:	20000019 	.word	0x20000019
    8410:	00007ad9 	.word	0x00007ad9
    8414:	00008111 	.word	0x00008111
    8418:	0000c065 	.word	0x0000c065
    841c:	0000b151 	.word	0x0000b151
    8420:	000080e1 	.word	0x000080e1
    8424:	0000be71 	.word	0x0000be71
    8428:	0000b2c1 	.word	0x0000b2c1
    842c:	00007c45 	.word	0x00007c45
    8430:	0000b221 	.word	0x0000b221

00008434 <Run_Demo>:

void Run_Demo(void)
{
    8434:	b510      	push	{r4, lr}
    P2PTasks();
    8436:	4b02      	ldr	r3, [pc, #8]	; (8440 <Run_Demo+0xc>)
    8438:	4798      	blx	r3
    run_p2p_demo();   
    843a:	4b02      	ldr	r3, [pc, #8]	; (8444 <Run_Demo+0x10>)
    843c:	4798      	blx	r3
    843e:	bd10      	pop	{r4, pc}
    8440:	0000b71d 	.word	0x0000b71d
    8444:	00007e65 	.word	0x00007e65

00008448 <LCD_Initialize>:
* Overview:         Configure the LCD
*
* Note:             None
********************************************************************/
void LCD_Initialize(void)
{
    8448:	b510      	push	{r4, lr}
	gfx_mono_init();
    844a:	4b01      	ldr	r3, [pc, #4]	; (8450 <LCD_Initialize+0x8>)
    844c:	4798      	blx	r3
}    
    844e:	bd10      	pop	{r4, pc}
    8450:	000049e1 	.word	0x000049e1

00008454 <LCD_Erase>:
* Overview:         Clears LCD display
*
* Note:             None
********************************************************************/
void LCD_Erase(void)
{
    8454:	b510      	push	{r4, lr}
    8456:	b082      	sub	sp, #8
    /* Clear screen */
	gfx_mono_draw_filled_rect(0, 0, GFX_MONO_LCD_WIDTH, GFX_MONO_LCD_HEIGHT,
    8458:	2300      	movs	r3, #0
    845a:	9300      	str	r3, [sp, #0]
    845c:	3320      	adds	r3, #32
    845e:	2280      	movs	r2, #128	; 0x80
    8460:	2100      	movs	r1, #0
    8462:	2000      	movs	r0, #0
    8464:	4c01      	ldr	r4, [pc, #4]	; (846c <LCD_Erase+0x18>)
    8466:	47a0      	blx	r4
	GFX_PIXEL_CLR);
}
    8468:	b002      	add	sp, #8
    846a:	bd10      	pop	{r4, pc}
    846c:	00004839 	.word	0x00004839

00008470 <LCD_Update>:
* Overview:         LCD displays message
*
* Note:             None
********************************************************************/
void LCD_Update(void)
{
    8470:	b510      	push	{r4, lr}
	gfx_mono_draw_string(LCDText, 0, 0, &sysfont);
    8472:	4b03      	ldr	r3, [pc, #12]	; (8480 <LCD_Update+0x10>)
    8474:	2200      	movs	r2, #0
    8476:	2100      	movs	r1, #0
    8478:	4802      	ldr	r0, [pc, #8]	; (8484 <LCD_Update+0x14>)
    847a:	4c03      	ldr	r4, [pc, #12]	; (8488 <LCD_Update+0x18>)
    847c:	47a0      	blx	r4
}
    847e:	bd10      	pop	{r4, pc}
    8480:	20000008 	.word	0x20000008
    8484:	2000216c 	.word	0x2000216c
    8488:	0000493d 	.word	0x0000493d

0000848c <LCDTRXCount>:
 *
 * Note:            This routine is only effective if Explorer16 or
 *                  PIC18 Explorer demo boards are used
 ********************************************************************/
void LCDTRXCount(uint8_t txCount, uint8_t rxCount)
{
    848c:	b570      	push	{r4, r5, r6, lr}
    848e:	b082      	sub	sp, #8
    8490:	0005      	movs	r5, r0
    8492:	000e      	movs	r6, r1
	/* Clear screen */
	gfx_mono_draw_filled_rect(0, 0, GFX_MONO_LCD_WIDTH, GFX_MONO_LCD_HEIGHT/2, 
    8494:	2300      	movs	r3, #0
    8496:	9300      	str	r3, [sp, #0]
    8498:	3310      	adds	r3, #16
    849a:	2280      	movs	r2, #128	; 0x80
    849c:	2100      	movs	r1, #0
    849e:	2000      	movs	r0, #0
    84a0:	4c0a      	ldr	r4, [pc, #40]	; (84cc <LCDTRXCount+0x40>)
    84a2:	47a0      	blx	r4
	GFX_PIXEL_CLR);
    snprintf(LCDText, sizeof(LCDText), "TX Messages: %d \nRX Messages: %d", txCount, rxCount);
    84a4:	4c0a      	ldr	r4, [pc, #40]	; (84d0 <LCDTRXCount+0x44>)
    84a6:	9600      	str	r6, [sp, #0]
    84a8:	002b      	movs	r3, r5
    84aa:	4a0a      	ldr	r2, [pc, #40]	; (84d4 <LCDTRXCount+0x48>)
    84ac:	2141      	movs	r1, #65	; 0x41
    84ae:	0020      	movs	r0, r4
    84b0:	4d09      	ldr	r5, [pc, #36]	; (84d8 <LCDTRXCount+0x4c>)
    84b2:	47a8      	blx	r5
    gfx_mono_draw_string(LCDText, 0, 0, &sysfont); 
    84b4:	4b09      	ldr	r3, [pc, #36]	; (84dc <LCDTRXCount+0x50>)
    84b6:	2200      	movs	r2, #0
    84b8:	2100      	movs	r1, #0
    84ba:	0020      	movs	r0, r4
    84bc:	4c08      	ldr	r4, [pc, #32]	; (84e0 <LCDTRXCount+0x54>)
    84be:	47a0      	blx	r4
	delay_ms(200);
    84c0:	20c8      	movs	r0, #200	; 0xc8
    84c2:	4b08      	ldr	r3, [pc, #32]	; (84e4 <LCDTRXCount+0x58>)
    84c4:	4798      	blx	r3
}
    84c6:	b002      	add	sp, #8
    84c8:	bd70      	pop	{r4, r5, r6, pc}
    84ca:	46c0      	nop			; (mov r8, r8)
    84cc:	00004839 	.word	0x00004839
    84d0:	2000216c 	.word	0x2000216c
    84d4:	00018b70 	.word	0x00018b70
    84d8:	00017339 	.word	0x00017339
    84dc:	20000008 	.word	0x20000008
    84e0:	0000493d 	.word	0x0000493d
    84e4:	00004719 	.word	0x00004719

000084e8 <LCDDisplay>:
 *
 * Note:            This routine is only effective if Explorer16 or
 *                  PIC18 Explorer demo boards are used
 ********************************************************************/
void LCDDisplay(char *text, uint8_t value, bool delay)
{
    84e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    84ea:	b083      	sub	sp, #12
    84ec:	0005      	movs	r5, r0
    84ee:	000c      	movs	r4, r1
    84f0:	0016      	movs	r6, r2
	/* Clear screen */	
	gfx_mono_draw_filled_rect(0, 0, GFX_MONO_LCD_WIDTH, GFX_MONO_LCD_HEIGHT,
    84f2:	2300      	movs	r3, #0
    84f4:	9300      	str	r3, [sp, #0]
    84f6:	3320      	adds	r3, #32
    84f8:	2280      	movs	r2, #128	; 0x80
    84fa:	2100      	movs	r1, #0
    84fc:	2000      	movs	r0, #0
    84fe:	4f13      	ldr	r7, [pc, #76]	; (854c <LCDDisplay+0x64>)
    8500:	47b8      	blx	r7
			GFX_PIXEL_CLR);    

    snprintf(LCDText, sizeof(LCDText), text);
    8502:	002a      	movs	r2, r5
    8504:	2141      	movs	r1, #65	; 0x41
    8506:	4812      	ldr	r0, [pc, #72]	; (8550 <LCDDisplay+0x68>)
    8508:	4b12      	ldr	r3, [pc, #72]	; (8554 <LCDDisplay+0x6c>)
    850a:	4798      	blx	r3

    if (value)
    850c:	2c00      	cmp	r4, #0
    850e:	d00d      	beq.n	852c <LCDDisplay+0x44>
    8510:	2000      	movs	r0, #0
    {
		uint8_t char_count = 0;
		do {
           ++char_count;
    8512:	3001      	adds	r0, #1
    8514:	b2c0      	uxtb	r0, r0
		} while (*(++text));
    8516:	3501      	adds	r5, #1
    8518:	782b      	ldrb	r3, [r5, #0]
    851a:	2b00      	cmp	r3, #0
    851c:	d1f9      	bne.n	8512 <LCDDisplay+0x2a>
		
	    snprintf(LCDText+char_count, sizeof(LCDText), "%d", value);
    851e:	4b0c      	ldr	r3, [pc, #48]	; (8550 <LCDDisplay+0x68>)
    8520:	18c0      	adds	r0, r0, r3
    8522:	0023      	movs	r3, r4
    8524:	4a0c      	ldr	r2, [pc, #48]	; (8558 <LCDDisplay+0x70>)
    8526:	2141      	movs	r1, #65	; 0x41
    8528:	4c0a      	ldr	r4, [pc, #40]	; (8554 <LCDDisplay+0x6c>)
    852a:	47a0      	blx	r4
	}
	    
	gfx_mono_draw_string(LCDText, 0, 0, &sysfont);
    852c:	4b0b      	ldr	r3, [pc, #44]	; (855c <LCDDisplay+0x74>)
    852e:	2200      	movs	r2, #0
    8530:	2100      	movs	r1, #0
    8532:	4807      	ldr	r0, [pc, #28]	; (8550 <LCDDisplay+0x68>)
    8534:	4c0a      	ldr	r4, [pc, #40]	; (8560 <LCDDisplay+0x78>)
    8536:	47a0      	blx	r4
	
	if(delay)
    8538:	2e00      	cmp	r6, #0
    853a:	d101      	bne.n	8540 <LCDDisplay+0x58>
	{
	  delay_s(2);
	}
}
    853c:	b003      	add	sp, #12
    853e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  delay_s(2);
    8540:	20fa      	movs	r0, #250	; 0xfa
    8542:	00c0      	lsls	r0, r0, #3
    8544:	4b07      	ldr	r3, [pc, #28]	; (8564 <LCDDisplay+0x7c>)
    8546:	4798      	blx	r3
}
    8548:	e7f8      	b.n	853c <LCDDisplay+0x54>
    854a:	46c0      	nop			; (mov r8, r8)
    854c:	00004839 	.word	0x00004839
    8550:	2000216c 	.word	0x2000216c
    8554:	00017339 	.word	0x00017339
    8558:	000185a0 	.word	0x000185a0
    855c:	20000008 	.word	0x20000008
    8560:	0000493d 	.word	0x0000493d
    8564:	00004719 	.word	0x00004719

00008568 <CompareData>:
     Otherwise it is the start address of the buffer that contains the data to compare with
    \param numberOfBytes The number of bytes to compare
    \note offset+numberOfBytes must be <= D_NV_SECTOR_SIZE (meaning sector crossing is not permitted)
*/
static bool CompareData(uint8_t sector, uint16_t offset, uint8_t *pBuffer, D_Nv_Size_t numberOfBytes)
{
    8568:	b5f0      	push	{r4, r5, r6, r7, lr}
    856a:	46c6      	mov	lr, r8
    856c:	b500      	push	{lr}
    856e:	b084      	sub	sp, #16
    8570:	0014      	movs	r4, r2
    8572:	001f      	movs	r7, r3
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    8574:	4b29      	ldr	r3, [pc, #164]	; (861c <CompareData+0xb4>)
    8576:	18cb      	adds	r3, r1, r3
    8578:	0340      	lsls	r0, r0, #13
    857a:	181d      	adds	r5, r3, r0
  uint8_t  buffer[16U];

  assert(numberOfBytes);
    857c:	2f00      	cmp	r7, #0
    857e:	d01a      	beq.n	85b6 <CompareData+0x4e>
  assert(address <= D_NV_MEMORY_END);
    8580:	4b27      	ldr	r3, [pc, #156]	; (8620 <CompareData+0xb8>)
    8582:	1e5a      	subs	r2, r3, #1
    8584:	4295      	cmp	r5, r2
    8586:	d81c      	bhi.n	85c2 <CompareData+0x5a>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    8588:	197a      	adds	r2, r7, r5
    858a:	4293      	cmp	r3, r2
    858c:	d31f      	bcc.n	85ce <CompareData+0x66>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    858e:	19c9      	adds	r1, r1, r7
    8590:	2380      	movs	r3, #128	; 0x80
    8592:	019b      	lsls	r3, r3, #6
    8594:	4299      	cmp	r1, r3
    8596:	d820      	bhi.n	85da <CompareData+0x72>

  while(numberOfBytes)
  {
    uint16_t bytesToRead = MIN(sizeof(buffer), numberOfBytes);

    memcpy(buffer, (uint8_t FLASH_PTR *)address, bytesToRead);
    8598:	4b22      	ldr	r3, [pc, #136]	; (8624 <CompareData+0xbc>)
    859a:	4698      	mov	r8, r3
    uint16_t bytesToRead = MIN(sizeof(buffer), numberOfBytes);
    859c:	1c3e      	adds	r6, r7, #0
    859e:	2f10      	cmp	r7, #16
    85a0:	d900      	bls.n	85a4 <CompareData+0x3c>
    85a2:	2610      	movs	r6, #16
    85a4:	b2b6      	uxth	r6, r6
    memcpy(buffer, (uint8_t FLASH_PTR *)address, bytesToRead);
    85a6:	0032      	movs	r2, r6
    85a8:	0029      	movs	r1, r5
    85aa:	4668      	mov	r0, sp
    85ac:	47c0      	blx	r8
    for (uint8_t i = 0U; i < bytesToRead; i++)
    85ae:	2e00      	cmp	r6, #0
    85b0:	d028      	beq.n	8604 <CompareData+0x9c>
    85b2:	2300      	movs	r3, #0
    85b4:	e01f      	b.n	85f6 <CompareData+0x8e>
  assert(numberOfBytes);
    85b6:	4b1c      	ldr	r3, [pc, #112]	; (8628 <CompareData+0xc0>)
    85b8:	4a1c      	ldr	r2, [pc, #112]	; (862c <CompareData+0xc4>)
    85ba:	21d9      	movs	r1, #217	; 0xd9
    85bc:	481c      	ldr	r0, [pc, #112]	; (8630 <CompareData+0xc8>)
    85be:	4c1d      	ldr	r4, [pc, #116]	; (8634 <CompareData+0xcc>)
    85c0:	47a0      	blx	r4
  assert(address <= D_NV_MEMORY_END);
    85c2:	4b1d      	ldr	r3, [pc, #116]	; (8638 <CompareData+0xd0>)
    85c4:	4a19      	ldr	r2, [pc, #100]	; (862c <CompareData+0xc4>)
    85c6:	21da      	movs	r1, #218	; 0xda
    85c8:	4819      	ldr	r0, [pc, #100]	; (8630 <CompareData+0xc8>)
    85ca:	4c1a      	ldr	r4, [pc, #104]	; (8634 <CompareData+0xcc>)
    85cc:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    85ce:	4b1b      	ldr	r3, [pc, #108]	; (863c <CompareData+0xd4>)
    85d0:	4a16      	ldr	r2, [pc, #88]	; (862c <CompareData+0xc4>)
    85d2:	21db      	movs	r1, #219	; 0xdb
    85d4:	4816      	ldr	r0, [pc, #88]	; (8630 <CompareData+0xc8>)
    85d6:	4c17      	ldr	r4, [pc, #92]	; (8634 <CompareData+0xcc>)
    85d8:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    85da:	4b19      	ldr	r3, [pc, #100]	; (8640 <CompareData+0xd8>)
    85dc:	4a13      	ldr	r2, [pc, #76]	; (862c <CompareData+0xc4>)
    85de:	21dc      	movs	r1, #220	; 0xdc
    85e0:	4813      	ldr	r0, [pc, #76]	; (8630 <CompareData+0xc8>)
    85e2:	4c14      	ldr	r4, [pc, #80]	; (8634 <CompareData+0xcc>)
    85e4:	47a0      	blx	r4
      if (buffer[i] != ((pBuffer != NULL) ? *(pBuffer++) : 0xFF))
    85e6:	21ff      	movs	r1, #255	; 0xff
    85e8:	4291      	cmp	r1, r2
    85ea:	d112      	bne.n	8612 <CompareData+0xaa>
    for (uint8_t i = 0U; i < bytesToRead; i++)
    85ec:	3301      	adds	r3, #1
    85ee:	b2db      	uxtb	r3, r3
    85f0:	b29a      	uxth	r2, r3
    85f2:	4296      	cmp	r6, r2
    85f4:	d906      	bls.n	8604 <CompareData+0x9c>
      if (buffer[i] != ((pBuffer != NULL) ? *(pBuffer++) : 0xFF))
    85f6:	466a      	mov	r2, sp
    85f8:	5cd2      	ldrb	r2, [r2, r3]
    85fa:	2c00      	cmp	r4, #0
    85fc:	d0f3      	beq.n	85e6 <CompareData+0x7e>
    85fe:	7821      	ldrb	r1, [r4, #0]
    8600:	3401      	adds	r4, #1
    8602:	e7f1      	b.n	85e8 <CompareData+0x80>
        return false;

    numberOfBytes -= bytesToRead;
    8604:	1bbf      	subs	r7, r7, r6
    8606:	b2bf      	uxth	r7, r7
    address += bytesToRead;
    8608:	19ad      	adds	r5, r5, r6
  while(numberOfBytes)
    860a:	2f00      	cmp	r7, #0
    860c:	d1c6      	bne.n	859c <CompareData+0x34>
  }

  return true;
    860e:	2001      	movs	r0, #1
    8610:	e000      	b.n	8614 <CompareData+0xac>
        return false;
    8612:	2000      	movs	r0, #0
}
    8614:	b004      	add	sp, #16
    8616:	bc04      	pop	{r2}
    8618:	4690      	mov	r8, r2
    861a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    861c:	00000400 	.word	0x00000400
    8620:	00004400 	.word	0x00004400
    8624:	00016a0f 	.word	0x00016a0f
    8628:	00018b94 	.word	0x00018b94
    862c:	00018ca0 	.word	0x00018ca0
    8630:	00018ba4 	.word	0x00018ba4
    8634:	0001694d 	.word	0x0001694d
    8638:	00018be8 	.word	0x00018be8
    863c:	00018c04 	.word	0x00018c04
    8640:	00018c38 	.word	0x00018c38

00008644 <D_Nv_Read_Impl>:
{
    8644:	b570      	push	{r4, r5, r6, lr}
    8646:	0015      	movs	r5, r2
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    8648:	0344      	lsls	r4, r0, #13
    864a:	4813      	ldr	r0, [pc, #76]	; (8698 <D_Nv_Read_Impl+0x54>)
    864c:	1808      	adds	r0, r1, r0
    864e:	1824      	adds	r4, r4, r0
  assert(address <= D_NV_MEMORY_END);
    8650:	4a12      	ldr	r2, [pc, #72]	; (869c <D_Nv_Read_Impl+0x58>)
    8652:	1e50      	subs	r0, r2, #1
    8654:	4284      	cmp	r4, r0
    8656:	d80d      	bhi.n	8674 <D_Nv_Read_Impl+0x30>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    8658:	18e0      	adds	r0, r4, r3
    865a:	4282      	cmp	r2, r0
    865c:	d310      	bcc.n	8680 <D_Nv_Read_Impl+0x3c>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    865e:	18c9      	adds	r1, r1, r3
    8660:	2280      	movs	r2, #128	; 0x80
    8662:	0192      	lsls	r2, r2, #6
    8664:	4291      	cmp	r1, r2
    8666:	d811      	bhi.n	868c <D_Nv_Read_Impl+0x48>
  memcpy(pBuffer, (uint8_t FLASH_PTR *)address, numberOfBytes);
    8668:	001a      	movs	r2, r3
    866a:	0021      	movs	r1, r4
    866c:	0028      	movs	r0, r5
    866e:	4b0c      	ldr	r3, [pc, #48]	; (86a0 <D_Nv_Read_Impl+0x5c>)
    8670:	4798      	blx	r3
}
    8672:	bd70      	pop	{r4, r5, r6, pc}
  assert(address <= D_NV_MEMORY_END);
    8674:	4b0b      	ldr	r3, [pc, #44]	; (86a4 <D_Nv_Read_Impl+0x60>)
    8676:	4a0c      	ldr	r2, [pc, #48]	; (86a8 <D_Nv_Read_Impl+0x64>)
    8678:	2172      	movs	r1, #114	; 0x72
    867a:	480c      	ldr	r0, [pc, #48]	; (86ac <D_Nv_Read_Impl+0x68>)
    867c:	4c0c      	ldr	r4, [pc, #48]	; (86b0 <D_Nv_Read_Impl+0x6c>)
    867e:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    8680:	4b0c      	ldr	r3, [pc, #48]	; (86b4 <D_Nv_Read_Impl+0x70>)
    8682:	4a09      	ldr	r2, [pc, #36]	; (86a8 <D_Nv_Read_Impl+0x64>)
    8684:	2173      	movs	r1, #115	; 0x73
    8686:	4809      	ldr	r0, [pc, #36]	; (86ac <D_Nv_Read_Impl+0x68>)
    8688:	4c09      	ldr	r4, [pc, #36]	; (86b0 <D_Nv_Read_Impl+0x6c>)
    868a:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    868c:	4b0a      	ldr	r3, [pc, #40]	; (86b8 <D_Nv_Read_Impl+0x74>)
    868e:	4a06      	ldr	r2, [pc, #24]	; (86a8 <D_Nv_Read_Impl+0x64>)
    8690:	2174      	movs	r1, #116	; 0x74
    8692:	4806      	ldr	r0, [pc, #24]	; (86ac <D_Nv_Read_Impl+0x68>)
    8694:	4c06      	ldr	r4, [pc, #24]	; (86b0 <D_Nv_Read_Impl+0x6c>)
    8696:	47a0      	blx	r4
    8698:	00000400 	.word	0x00000400
    869c:	00004400 	.word	0x00004400
    86a0:	00016a0f 	.word	0x00016a0f
    86a4:	00018be8 	.word	0x00018be8
    86a8:	00018c68 	.word	0x00018c68
    86ac:	00018ba4 	.word	0x00018ba4
    86b0:	0001694d 	.word	0x0001694d
    86b4:	00018c04 	.word	0x00018c04
    86b8:	00018c38 	.word	0x00018c38

000086bc <D_Nv_Write_Impl>:
{
    86bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    86be:	46de      	mov	lr, fp
    86c0:	4657      	mov	r7, sl
    86c2:	464e      	mov	r6, r9
    86c4:	4645      	mov	r5, r8
    86c6:	b5e0      	push	{r5, r6, r7, lr}
    86c8:	b093      	sub	sp, #76	; 0x4c
    86ca:	9201      	str	r2, [sp, #4]
    86cc:	469a      	mov	sl, r3
  uint32_t  address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    86ce:	4c46      	ldr	r4, [pc, #280]	; (87e8 <D_Nv_Write_Impl+0x12c>)
    86d0:	190c      	adds	r4, r1, r4
    86d2:	0340      	lsls	r0, r0, #13
    86d4:	1825      	adds	r5, r4, r0
  assert(numberOfBytes);
    86d6:	2b00      	cmp	r3, #0
    86d8:	d047      	beq.n	876a <D_Nv_Write_Impl+0xae>
  assert(address <= D_NV_MEMORY_END);
    86da:	4b44      	ldr	r3, [pc, #272]	; (87ec <D_Nv_Write_Impl+0x130>)
    86dc:	1e5a      	subs	r2, r3, #1
    86de:	4295      	cmp	r5, r2
    86e0:	d849      	bhi.n	8776 <D_Nv_Write_Impl+0xba>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    86e2:	4652      	mov	r2, sl
    86e4:	1952      	adds	r2, r2, r5
    86e6:	4293      	cmp	r3, r2
    86e8:	d34b      	bcc.n	8782 <D_Nv_Write_Impl+0xc6>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    86ea:	46d3      	mov	fp, sl
    86ec:	4451      	add	r1, sl
    86ee:	2380      	movs	r3, #128	; 0x80
    86f0:	019b      	lsls	r3, r3, #6
    86f2:	4299      	cmp	r1, r3
    86f4:	d84b      	bhi.n	878e <D_Nv_Write_Impl+0xd2>
  if (s_pfSystemCheckCallback != NULL)
    86f6:	4b3e      	ldr	r3, [pc, #248]	; (87f0 <D_Nv_Write_Impl+0x134>)
    86f8:	681b      	ldr	r3, [r3, #0]
    86fa:	2b00      	cmp	r3, #0
    86fc:	d000      	beq.n	8700 <D_Nv_Write_Impl+0x44>
    s_pfSystemCheckCallback();
    86fe:	4798      	blx	r3
  pageOffset = address % NVMCTRL_PAGE_SIZE;
    8700:	273f      	movs	r7, #63	; 0x3f
    8702:	402f      	ands	r7, r5
  pageStart = address - pageOffset;
    8704:	1bec      	subs	r4, r5, r7
  numberOfPageBytes = MIN((NVMCTRL_PAGE_SIZE - pageOffset), numberOfBytes);
    8706:	2640      	movs	r6, #64	; 0x40
    8708:	1bf6      	subs	r6, r6, r7
    870a:	455e      	cmp	r6, fp
    870c:	dd00      	ble.n	8710 <D_Nv_Write_Impl+0x54>
    870e:	4656      	mov	r6, sl
    8710:	b2b3      	uxth	r3, r6
    8712:	469b      	mov	fp, r3
  memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    8714:	2240      	movs	r2, #64	; 0x40
    8716:	21ff      	movs	r1, #255	; 0xff
    8718:	a802      	add	r0, sp, #8
    871a:	4b36      	ldr	r3, [pc, #216]	; (87f4 <D_Nv_Write_Impl+0x138>)
    871c:	4798      	blx	r3
  memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    871e:	003b      	movs	r3, r7
    8720:	aa02      	add	r2, sp, #8
    8722:	4694      	mov	ip, r2
    8724:	4463      	add	r3, ip
    8726:	9300      	str	r3, [sp, #0]
    8728:	0436      	lsls	r6, r6, #16
    872a:	0c37      	lsrs	r7, r6, #16
    872c:	003a      	movs	r2, r7
    872e:	9901      	ldr	r1, [sp, #4]
    8730:	0018      	movs	r0, r3
    8732:	4b31      	ldr	r3, [pc, #196]	; (87f8 <D_Nv_Write_Impl+0x13c>)
    8734:	4798      	blx	r3
	cpu_irq_enter_critical();
    8736:	4b31      	ldr	r3, [pc, #196]	; (87fc <D_Nv_Write_Impl+0x140>)
    8738:	4798      	blx	r3
    error_code = nvm_write_buffer(pageStart, page_buf, NVMCTRL_PAGE_SIZE);
    873a:	4e31      	ldr	r6, [pc, #196]	; (8800 <D_Nv_Write_Impl+0x144>)
    873c:	2240      	movs	r2, #64	; 0x40
    873e:	a902      	add	r1, sp, #8
    8740:	0020      	movs	r0, r4
    8742:	47b0      	blx	r6
  } while (error_code == STATUS_BUSY);
    8744:	2805      	cmp	r0, #5
    8746:	d0f9      	beq.n	873c <D_Nv_Write_Impl+0x80>
	cpu_irq_leave_critical();
    8748:	4b2e      	ldr	r3, [pc, #184]	; (8804 <D_Nv_Write_Impl+0x148>)
    874a:	4798      	blx	r3
  numberOfBytes -= numberOfPageBytes;
    874c:	4653      	mov	r3, sl
    874e:	465a      	mov	r2, fp
    8750:	1a9e      	subs	r6, r3, r2
    8752:	b2b6      	uxth	r6, r6
  address += numberOfPageBytes;
    8754:	19ec      	adds	r4, r5, r7
  pBuffer += numberOfPageBytes;
    8756:	9b01      	ldr	r3, [sp, #4]
    8758:	4699      	mov	r9, r3
    875a:	44b9      	add	r9, r7
  while (0U < numberOfBytes)
    875c:	2e00      	cmp	r6, #0
    875e:	d03b      	beq.n	87d8 <D_Nv_Write_Impl+0x11c>
    memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    8760:	4b24      	ldr	r3, [pc, #144]	; (87f4 <D_Nv_Write_Impl+0x138>)
    8762:	469b      	mov	fp, r3
    memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    8764:	4b24      	ldr	r3, [pc, #144]	; (87f8 <D_Nv_Write_Impl+0x13c>)
    8766:	4698      	mov	r8, r3
    8768:	e031      	b.n	87ce <D_Nv_Write_Impl+0x112>
  assert(numberOfBytes);
    876a:	4b27      	ldr	r3, [pc, #156]	; (8808 <D_Nv_Write_Impl+0x14c>)
    876c:	4a27      	ldr	r2, [pc, #156]	; (880c <D_Nv_Write_Impl+0x150>)
    876e:	218a      	movs	r1, #138	; 0x8a
    8770:	4827      	ldr	r0, [pc, #156]	; (8810 <D_Nv_Write_Impl+0x154>)
    8772:	4c28      	ldr	r4, [pc, #160]	; (8814 <D_Nv_Write_Impl+0x158>)
    8774:	47a0      	blx	r4
  assert(address <= D_NV_MEMORY_END);
    8776:	4b28      	ldr	r3, [pc, #160]	; (8818 <D_Nv_Write_Impl+0x15c>)
    8778:	4a24      	ldr	r2, [pc, #144]	; (880c <D_Nv_Write_Impl+0x150>)
    877a:	218b      	movs	r1, #139	; 0x8b
    877c:	4824      	ldr	r0, [pc, #144]	; (8810 <D_Nv_Write_Impl+0x154>)
    877e:	4c25      	ldr	r4, [pc, #148]	; (8814 <D_Nv_Write_Impl+0x158>)
    8780:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    8782:	4b26      	ldr	r3, [pc, #152]	; (881c <D_Nv_Write_Impl+0x160>)
    8784:	4a21      	ldr	r2, [pc, #132]	; (880c <D_Nv_Write_Impl+0x150>)
    8786:	218c      	movs	r1, #140	; 0x8c
    8788:	4821      	ldr	r0, [pc, #132]	; (8810 <D_Nv_Write_Impl+0x154>)
    878a:	4c22      	ldr	r4, [pc, #136]	; (8814 <D_Nv_Write_Impl+0x158>)
    878c:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    878e:	4b24      	ldr	r3, [pc, #144]	; (8820 <D_Nv_Write_Impl+0x164>)
    8790:	4a1e      	ldr	r2, [pc, #120]	; (880c <D_Nv_Write_Impl+0x150>)
    8792:	218d      	movs	r1, #141	; 0x8d
    8794:	481e      	ldr	r0, [pc, #120]	; (8810 <D_Nv_Write_Impl+0x154>)
    8796:	4c1f      	ldr	r4, [pc, #124]	; (8814 <D_Nv_Write_Impl+0x158>)
    8798:	47a0      	blx	r4
    numberOfPageBytes = MIN(NVMCTRL_PAGE_SIZE, numberOfBytes);
    879a:	b29f      	uxth	r7, r3
    memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    879c:	2240      	movs	r2, #64	; 0x40
    879e:	21ff      	movs	r1, #255	; 0xff
    87a0:	a802      	add	r0, sp, #8
    87a2:	47d8      	blx	fp
    memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    87a4:	003a      	movs	r2, r7
    87a6:	4649      	mov	r1, r9
    87a8:	9800      	ldr	r0, [sp, #0]
    87aa:	47c0      	blx	r8
	cpu_irq_enter_critical();
    87ac:	4b13      	ldr	r3, [pc, #76]	; (87fc <D_Nv_Write_Impl+0x140>)
    87ae:	4798      	blx	r3
      error_code = nvm_write_buffer(address, page_buf, NVMCTRL_PAGE_SIZE);
    87b0:	4d13      	ldr	r5, [pc, #76]	; (8800 <D_Nv_Write_Impl+0x144>)
    87b2:	2240      	movs	r2, #64	; 0x40
    87b4:	a902      	add	r1, sp, #8
    87b6:	0020      	movs	r0, r4
    87b8:	47a8      	blx	r5
    } while (error_code == STATUS_BUSY);
    87ba:	2805      	cmp	r0, #5
    87bc:	d0f9      	beq.n	87b2 <D_Nv_Write_Impl+0xf6>
	cpu_irq_leave_critical();
    87be:	4b11      	ldr	r3, [pc, #68]	; (8804 <D_Nv_Write_Impl+0x148>)
    87c0:	4798      	blx	r3
    numberOfBytes -= numberOfPageBytes;
    87c2:	1bf6      	subs	r6, r6, r7
    87c4:	b2b6      	uxth	r6, r6
    address += numberOfPageBytes;
    87c6:	19e4      	adds	r4, r4, r7
    pBuffer += numberOfPageBytes;
    87c8:	44b9      	add	r9, r7
  while (0U < numberOfBytes)
    87ca:	2e00      	cmp	r6, #0
    87cc:	d004      	beq.n	87d8 <D_Nv_Write_Impl+0x11c>
    numberOfPageBytes = MIN(NVMCTRL_PAGE_SIZE, numberOfBytes);
    87ce:	1c33      	adds	r3, r6, #0
    87d0:	2e40      	cmp	r6, #64	; 0x40
    87d2:	d9e2      	bls.n	879a <D_Nv_Write_Impl+0xde>
    87d4:	2340      	movs	r3, #64	; 0x40
    87d6:	e7e0      	b.n	879a <D_Nv_Write_Impl+0xde>
}
    87d8:	b013      	add	sp, #76	; 0x4c
    87da:	bc3c      	pop	{r2, r3, r4, r5}
    87dc:	4690      	mov	r8, r2
    87de:	4699      	mov	r9, r3
    87e0:	46a2      	mov	sl, r4
    87e2:	46ab      	mov	fp, r5
    87e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    87e6:	46c0      	nop			; (mov r8, r8)
    87e8:	00000400 	.word	0x00000400
    87ec:	00004400 	.word	0x00004400
    87f0:	20000304 	.word	0x20000304
    87f4:	00016a21 	.word	0x00016a21
    87f8:	00016a0f 	.word	0x00016a0f
    87fc:	00004aa1 	.word	0x00004aa1
    8800:	00004ff1 	.word	0x00004ff1
    8804:	00004ae1 	.word	0x00004ae1
    8808:	00018b94 	.word	0x00018b94
    880c:	00018c78 	.word	0x00018c78
    8810:	00018ba4 	.word	0x00018ba4
    8814:	0001694d 	.word	0x0001694d
    8818:	00018be8 	.word	0x00018be8
    881c:	00018c04 	.word	0x00018c04
    8820:	00018c38 	.word	0x00018c38

00008824 <D_Nv_EraseSector_Impl>:
{
    8824:	b570      	push	{r4, r5, r6, lr}
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE;
    8826:	0344      	lsls	r4, r0, #13
    8828:	480c      	ldr	r0, [pc, #48]	; (885c <D_Nv_EraseSector_Impl+0x38>)
    882a:	1824      	adds	r4, r4, r0
  address &= ~(NVMCTRL_ROW_SIZE - 1);
    882c:	23ff      	movs	r3, #255	; 0xff
    882e:	439c      	bics	r4, r3
  assert(address <= D_NV_MEMORY_END);
    8830:	4b0b      	ldr	r3, [pc, #44]	; (8860 <D_Nv_EraseSector_Impl+0x3c>)
    8832:	3b01      	subs	r3, #1
    8834:	2280      	movs	r2, #128	; 0x80
    8836:	0192      	lsls	r2, r2, #6
    8838:	18a6      	adds	r6, r4, r2
    883a:	429c      	cmp	r4, r3
    883c:	d807      	bhi.n	884e <D_Nv_EraseSector_Impl+0x2a>
    nvm_erase_row (address);
    883e:	4d09      	ldr	r5, [pc, #36]	; (8864 <D_Nv_EraseSector_Impl+0x40>)
    8840:	0020      	movs	r0, r4
    8842:	47a8      	blx	r5
    address += NVMCTRL_ROW_SIZE;
    8844:	3401      	adds	r4, #1
    8846:	34ff      	adds	r4, #255	; 0xff
  for (uint8_t i = 0U; i < (D_NV_SECTOR_SIZE / NVMCTRL_ROW_SIZE); i++)
    8848:	42b4      	cmp	r4, r6
    884a:	d1f9      	bne.n	8840 <D_Nv_EraseSector_Impl+0x1c>
}
    884c:	bd70      	pop	{r4, r5, r6, pc}
  assert(address <= D_NV_MEMORY_END);
    884e:	4b06      	ldr	r3, [pc, #24]	; (8868 <D_Nv_EraseSector_Impl+0x44>)
    8850:	4a06      	ldr	r2, [pc, #24]	; (886c <D_Nv_EraseSector_Impl+0x48>)
    8852:	21c2      	movs	r1, #194	; 0xc2
    8854:	4806      	ldr	r0, [pc, #24]	; (8870 <D_Nv_EraseSector_Impl+0x4c>)
    8856:	4c07      	ldr	r4, [pc, #28]	; (8874 <D_Nv_EraseSector_Impl+0x50>)
    8858:	47a0      	blx	r4
    885a:	46c0      	nop			; (mov r8, r8)
    885c:	00000400 	.word	0x00000400
    8860:	00004400 	.word	0x00004400
    8864:	000050c9 	.word	0x000050c9
    8868:	00018be8 	.word	0x00018be8
    886c:	00018c88 	.word	0x00018c88
    8870:	00018ba4 	.word	0x00018ba4
    8874:	0001694d 	.word	0x0001694d

00008878 <D_Nv_IsEmpty_Impl>:
    \param numberOfBytes The number of bytes to check
    \returns true if the range is empty, FALSE otherwise.
    \note Sector crossing is not permitted
*/
bool D_Nv_IsEmpty(uint8_t sector, uint16_t offset, D_Nv_Size_t numberOfBytes)
{
    8878:	b510      	push	{r4, lr}
    887a:	0013      	movs	r3, r2
  return CompareData(sector, offset, NULL, numberOfBytes);
    887c:	2200      	movs	r2, #0
    887e:	4c01      	ldr	r4, [pc, #4]	; (8884 <D_Nv_IsEmpty_Impl+0xc>)
    8880:	47a0      	blx	r4
}
    8882:	bd10      	pop	{r4, pc}
    8884:	00008569 	.word	0x00008569

00008888 <D_Nv_IsEqual_Impl>:
    \param[in] pBuffer The start address of the buffer that contains the data to compare with
    \param numberOfBytes The number of bytes to compare
    \note offset+numberOfBytes must be <= D_NV_SECTOR_SIZE (meaning sector crossing is not permitted)
*/
bool D_Nv_IsEqual(uint8_t sector, uint16_t offset, uint8_t *pBuffer, D_Nv_Size_t numberOfBytes)
{
    8888:	b510      	push	{r4, lr}
  return CompareData(sector, offset, pBuffer, numberOfBytes);
    888a:	4c01      	ldr	r4, [pc, #4]	; (8890 <D_Nv_IsEqual_Impl+0x8>)
    888c:	47a0      	blx	r4
}
    888e:	bd10      	pop	{r4, pc}
    8890:	00008569 	.word	0x00008569

00008894 <PowerSupplyTooLow>:
/** Check the power supply.
    \returns TRUE if the power supply is too low, FALSE when the the power
             supply is OK or when there is no callback installed.
*/
static bool PowerSupplyTooLow()
{
    8894:	b510      	push	{r4, lr}
    bool result = false;
    if ( s_powerSupplyCheckingFunction != NULL )
    8896:	4b05      	ldr	r3, [pc, #20]	; (88ac <PowerSupplyTooLow+0x18>)
    8898:	681b      	ldr	r3, [r3, #0]
    889a:	2b00      	cmp	r3, #0
    889c:	d004      	beq.n	88a8 <PowerSupplyTooLow+0x14>
    {
        if ( !s_powerSupplyCheckingFunction() )
    889e:	4798      	blx	r3
    88a0:	2301      	movs	r3, #1
    88a2:	4058      	eors	r0, r3
    88a4:	b2c0      	uxtb	r0, r0
        {
            result = true;
        }
    }
    return result;
}
    88a6:	bd10      	pop	{r4, pc}
    bool result = false;
    88a8:	2000      	movs	r0, #0
    88aa:	e7fc      	b.n	88a6 <PowerSupplyTooLow+0x12>
    88ac:	20000470 	.word	0x20000470

000088b0 <UpdateSectorHead>:
*/

static void UpdateSectorHead(uint16_t increment, ItemAlignment_t itemAlignment )
{
    // Adjust the sector head according to the increment and alignment given
    switch(itemAlignment)
    88b0:	2901      	cmp	r1, #1
    88b2:	d009      	beq.n	88c8 <UpdateSectorHead+0x18>
    88b4:	2900      	cmp	r1, #0
    88b6:	d002      	beq.n	88be <UpdateSectorHead+0xe>
    88b8:	2902      	cmp	r1, #2
    88ba:	d00d      	beq.n	88d8 <UpdateSectorHead+0x28>
           s_sectorHead = (s_sectorHead + increment + 0x003Fu) & 0xFFC0u;
           break;
        default:
           break;
    }
}
    88bc:	4770      	bx	lr
           s_sectorHead = (s_sectorHead + increment);
    88be:	4b0a      	ldr	r3, [pc, #40]	; (88e8 <UpdateSectorHead+0x38>)
    88c0:	881a      	ldrh	r2, [r3, #0]
    88c2:	1880      	adds	r0, r0, r2
    88c4:	8018      	strh	r0, [r3, #0]
           break;
    88c6:	e7f9      	b.n	88bc <UpdateSectorHead+0xc>
           s_sectorHead = (s_sectorHead + increment + 0x000Fu) & 0xFFF0u;
    88c8:	4a07      	ldr	r2, [pc, #28]	; (88e8 <UpdateSectorHead+0x38>)
    88ca:	8813      	ldrh	r3, [r2, #0]
    88cc:	330f      	adds	r3, #15
    88ce:	18c0      	adds	r0, r0, r3
    88d0:	230f      	movs	r3, #15
    88d2:	4398      	bics	r0, r3
    88d4:	8010      	strh	r0, [r2, #0]
           break;
    88d6:	e7f1      	b.n	88bc <UpdateSectorHead+0xc>
           s_sectorHead = (s_sectorHead + increment + 0x003Fu) & 0xFFC0u;
    88d8:	4a03      	ldr	r2, [pc, #12]	; (88e8 <UpdateSectorHead+0x38>)
    88da:	8813      	ldrh	r3, [r2, #0]
    88dc:	333f      	adds	r3, #63	; 0x3f
    88de:	18c0      	adds	r0, r0, r3
    88e0:	233f      	movs	r3, #63	; 0x3f
    88e2:	4398      	bics	r0, r3
    88e4:	8010      	strh	r0, [r2, #0]
}
    88e6:	e7e9      	b.n	88bc <UpdateSectorHead+0xc>
    88e8:	20000476 	.word	0x20000476

000088ec <ComputeCrc>:
    // item not found
    return 0x0000u;
}

static uint16_t ComputeCrc(uint8_t* pData, uint16_t length, uint16_t crc)
{
    88ec:	b530      	push	{r4, r5, lr}
    for ( /* empty */ ; length != 0u; length-- )
    88ee:	2900      	cmp	r1, #0
    88f0:	d019      	beq.n	8926 <ComputeCrc+0x3a>
    {
        uint8_t x;
        uint8_t data;

        if (pData == NULL)
            data = 0xFF;
    88f2:	24ff      	movs	r4, #255	; 0xff
    88f4:	e013      	b.n	891e <ComputeCrc+0x32>
    88f6:	0023      	movs	r3, r4
        else
            data = *pData;

        x = (uint8_t) ((crc >> 8) ^ data);
    88f8:	0a15      	lsrs	r5, r2, #8
    88fa:	406b      	eors	r3, r5
        x = x ^ (x >> 4);
    88fc:	091d      	lsrs	r5, r3, #4
    88fe:	406b      	eors	r3, r5
        crc = (crc << 8) ^ ((uint16_t) x << 12) ^ ((uint16_t) x << 5) ^ (uint16_t) x;
    8900:	0212      	lsls	r2, r2, #8
    8902:	405a      	eors	r2, r3
    8904:	031d      	lsls	r5, r3, #12
    8906:	406a      	eors	r2, r5
    8908:	015b      	lsls	r3, r3, #5
    890a:	405a      	eors	r2, r3
    890c:	b292      	uxth	r2, r2

        if ( pData != NULL )
          pData++;
    890e:	0003      	movs	r3, r0
    8910:	1e5d      	subs	r5, r3, #1
    8912:	41ab      	sbcs	r3, r5
    8914:	18c0      	adds	r0, r0, r3
    for ( /* empty */ ; length != 0u; length-- )
    8916:	3901      	subs	r1, #1
    8918:	b289      	uxth	r1, r1
    891a:	2900      	cmp	r1, #0
    891c:	d003      	beq.n	8926 <ComputeCrc+0x3a>
        if (pData == NULL)
    891e:	2800      	cmp	r0, #0
    8920:	d0e9      	beq.n	88f6 <ComputeCrc+0xa>
            data = *pData;
    8922:	7803      	ldrb	r3, [r0, #0]
    8924:	e7e8      	b.n	88f8 <ComputeCrc+0xc>
    }

    return crc;
}
    8926:	0010      	movs	r0, r2
    8928:	bd30      	pop	{r4, r5, pc}
    892a:	Address 0x0000892a is out of bounds.


0000892c <GatherData>:
       be copied to the flash memory \ref s_sectorHead in sector \ref s_sector.

*/

static bool GatherData(uint8_t sourceSector, uint16_t lastBlockPointer, uint16_t offset, uint16_t length, void* pData)
{
    892c:	b5f0      	push	{r4, r5, r6, r7, lr}
    892e:	46de      	mov	lr, fp
    8930:	4657      	mov	r7, sl
    8932:	b580      	push	{r7, lr}
    8934:	b089      	sub	sp, #36	; 0x24
    8936:	9001      	str	r0, [sp, #4]
    8938:	9102      	str	r1, [sp, #8]
    893a:	4693      	mov	fp, r2
    uint16_t blockStart;
    uint16_t blockEnd;
    uint16_t count;

    // prepare the correct pointer
    if ( pData != NULL )
    893c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    893e:	2a00      	cmp	r2, #0
    8940:	d00d      	beq.n	895e <GatherData+0x32>
    {
        pDestination = (uint8_t*) pData + length;
    8942:	4692      	mov	sl, r2
    8944:	449a      	add	sl, r3

    // [readStart, readEnd> is the range of data that can be read during the current
    // pass over the blocks (the range includes readStart, but not readEnd).
    // it is initialized with the requested range
    uint16_t readStart = offset;
    uint16_t readEnd = offset + length;
    8946:	445b      	add	r3, fp
    8948:	b29d      	uxth	r5, r3

    // continue until we have all the data that was requested
    while ( readStart != readEnd )
    894a:	465e      	mov	r6, fp
    894c:	9c02      	ldr	r4, [sp, #8]
            sourcePointer -= count;
            pDestination -= count;
            D_Nv_Read(sourceSector, sourcePointer, (uint8_t*)pDestination, count);
        }
    }
    return true;
    894e:	2001      	movs	r0, #1
    while ( readStart != readEnd )
    8950:	45ab      	cmp	fp, r5
    8952:	d03e      	beq.n	89d2 <GatherData+0xa6>
            D_Nv_Read(sourceSector, currentBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8954:	4f22      	ldr	r7, [pc, #136]	; (89e0 <GatherData+0xb4>)
            if ( currentBlockPointer == 0x0000u )
    8956:	2c00      	cmp	r4, #0
    8958:	d108      	bne.n	896c <GatherData+0x40>
                return false;
    895a:	2000      	movs	r0, #0
    895c:	e039      	b.n	89d2 <GatherData+0xa6>
    uint8_t* pDestination = NULL;
    895e:	2200      	movs	r2, #0
    8960:	4692      	mov	sl, r2
    8962:	e7f0      	b.n	8946 <GatherData+0x1a>
            currentBlockPointer = blockHeader.previousBlock;
    8964:	ab04      	add	r3, sp, #16
    8966:	895c      	ldrh	r4, [r3, #10]
            if ( currentBlockPointer == 0x0000u )
    8968:	2c00      	cmp	r4, #0
    896a:	d031      	beq.n	89d0 <GatherData+0xa4>
            D_Nv_Read(sourceSector, currentBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    896c:	2310      	movs	r3, #16
    896e:	aa04      	add	r2, sp, #16
    8970:	0021      	movs	r1, r4
    8972:	9801      	ldr	r0, [sp, #4]
    8974:	47b8      	blx	r7
            blockStart = blockHeader.blockOffset;
    8976:	ab04      	add	r3, sp, #16
    8978:	889a      	ldrh	r2, [r3, #4]
            if ( (readEnd <= blockStart) || (readStart >= blockEnd) )
    897a:	42aa      	cmp	r2, r5
    897c:	d2f2      	bcs.n	8964 <GatherData+0x38>
            blockEnd = blockHeader.blockOffset + blockHeader.blockLength;
    897e:	88db      	ldrh	r3, [r3, #6]
    8980:	18d3      	adds	r3, r2, r3
    8982:	b29b      	uxth	r3, r3
            if ( (readEnd <= blockStart) || (readStart >= blockEnd) )
    8984:	42b3      	cmp	r3, r6
    8986:	d9ed      	bls.n	8964 <GatherData+0x38>
            else if ( readEnd > blockEnd )
    8988:	42ab      	cmp	r3, r5
    898a:	d201      	bcs.n	8990 <GatherData+0x64>
                readStart = blockEnd;
    898c:	001e      	movs	r6, r3
    898e:	e7e9      	b.n	8964 <GatherData+0x38>
        uint16_t sourcePointer = (currentBlockPointer + BLOCK_HEADER_SIZE) + (readEnd - blockStart);
    8990:	1aa9      	subs	r1, r5, r2
    8992:	b289      	uxth	r1, r1
        if ( readStart < blockStart )
    8994:	42b2      	cmp	r2, r6
    8996:	d915      	bls.n	89c4 <GatherData+0x98>
            currentBlockPointer = blockHeader.previousBlock;
    8998:	ab04      	add	r3, sp, #16
    899a:	895b      	ldrh	r3, [r3, #10]
    899c:	9303      	str	r3, [sp, #12]
            count = readEnd - blockStart;
    899e:	000b      	movs	r3, r1
        readEnd -= count;
    89a0:	1aed      	subs	r5, r5, r3
    89a2:	b2ad      	uxth	r5, r5
        if ( pDestination != NULL)
    89a4:	4652      	mov	r2, sl
    89a6:	2a00      	cmp	r2, #0
    89a8:	d008      	beq.n	89bc <GatherData+0x90>
        uint16_t sourcePointer = (currentBlockPointer + BLOCK_HEADER_SIZE) + (readEnd - blockStart);
    89aa:	3410      	adds	r4, #16
    89ac:	1909      	adds	r1, r1, r4
            pDestination -= count;
    89ae:	1ad2      	subs	r2, r2, r3
    89b0:	4692      	mov	sl, r2
            sourcePointer -= count;
    89b2:	1ac9      	subs	r1, r1, r3
            D_Nv_Read(sourceSector, sourcePointer, (uint8_t*)pDestination, count);
    89b4:	b289      	uxth	r1, r1
    89b6:	9801      	ldr	r0, [sp, #4]
    89b8:	4c09      	ldr	r4, [pc, #36]	; (89e0 <GatherData+0xb4>)
    89ba:	47a0      	blx	r4
    while ( readStart != readEnd )
    89bc:	42ae      	cmp	r6, r5
    89be:	d00d      	beq.n	89dc <GatherData+0xb0>
    89c0:	9c03      	ldr	r4, [sp, #12]
    89c2:	e7c8      	b.n	8956 <GatherData+0x2a>
            count = readEnd - readStart;
    89c4:	1bab      	subs	r3, r5, r6
    89c6:	b29b      	uxth	r3, r3
            readStart = offset;
    89c8:	465e      	mov	r6, fp
            currentBlockPointer = lastBlockPointer;
    89ca:	9a02      	ldr	r2, [sp, #8]
    89cc:	9203      	str	r2, [sp, #12]
    89ce:	e7e7      	b.n	89a0 <GatherData+0x74>
                return false;
    89d0:	2000      	movs	r0, #0
}
    89d2:	b009      	add	sp, #36	; 0x24
    89d4:	bc0c      	pop	{r2, r3}
    89d6:	4692      	mov	sl, r2
    89d8:	469b      	mov	fp, r3
    89da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return true;
    89dc:	2001      	movs	r0, #1
    89de:	e7f8      	b.n	89d2 <GatherData+0xa6>
    89e0:	00008645 	.word	0x00008645

000089e4 <ComputeDataCrc>:
{
    89e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    89e6:	46de      	mov	lr, fp
    89e8:	4647      	mov	r7, r8
    89ea:	b580      	push	{r7, lr}
    89ec:	b087      	sub	sp, #28
    89ee:	9004      	str	r0, [sp, #16]
    89f0:	9105      	str	r1, [sp, #20]
    length = pBlockHeader->blockLength;
    89f2:	7995      	ldrb	r5, [r2, #6]
    89f4:	79d3      	ldrb	r3, [r2, #7]
    89f6:	021b      	lsls	r3, r3, #8
    89f8:	431d      	orrs	r5, r3
    offset = pBlockHeader->blockOffset;
    89fa:	7917      	ldrb	r7, [r2, #4]
    89fc:	7953      	ldrb	r3, [r2, #5]
    89fe:	021b      	lsls	r3, r3, #8
    8a00:	431f      	orrs	r7, r3
    for(int8_t i= (length/sizeof(dataBlock)); i>=0; i--)
    8a02:	0a2c      	lsrs	r4, r5, #8
    8a04:	b264      	sxtb	r4, r4
    8a06:	2c00      	cmp	r4, #0
    8a08:	db2f      	blt.n	8a6a <ComputeDataCrc+0x86>
    8a0a:	4b1c      	ldr	r3, [pc, #112]	; (8a7c <ComputeDataCrc+0x98>)
    8a0c:	9303      	str	r3, [sp, #12]
            crc = ComputeCrc(((uint8_t*) &dataBlock), dataLength, crc);
    8a0e:	4b1c      	ldr	r3, [pc, #112]	; (8a80 <ComputeDataCrc+0x9c>)
    8a10:	4698      	mov	r8, r3
    8a12:	e011      	b.n	8a38 <ComputeDataCrc+0x54>
        if (dataLength == 0)
    8a14:	2d00      	cmp	r5, #0
    8a16:	d02a      	beq.n	8a6e <ComputeDataCrc+0x8a>
        if (GatherData(sourceSector, blockPointer, offset, dataLength, dataBlock))
    8a18:	4b1a      	ldr	r3, [pc, #104]	; (8a84 <ComputeDataCrc+0xa0>)
    8a1a:	9300      	str	r3, [sp, #0]
    8a1c:	002b      	movs	r3, r5
    8a1e:	003a      	movs	r2, r7
    8a20:	9905      	ldr	r1, [sp, #20]
    8a22:	9804      	ldr	r0, [sp, #16]
    8a24:	4e18      	ldr	r6, [pc, #96]	; (8a88 <ComputeDataCrc+0xa4>)
    8a26:	47b0      	blx	r6
    8a28:	2800      	cmp	r0, #0
    8a2a:	d020      	beq.n	8a6e <ComputeDataCrc+0x8a>
    8a2c:	0029      	movs	r1, r5
    8a2e:	e015      	b.n	8a5c <ComputeDataCrc+0x78>
    8a30:	3c01      	subs	r4, #1
    8a32:	b264      	sxtb	r4, r4
    for(int8_t i= (length/sizeof(dataBlock)); i>=0; i--)
    8a34:	1c63      	adds	r3, r4, #1
    8a36:	d01a      	beq.n	8a6e <ComputeDataCrc+0x8a>
        if (i)
    8a38:	2c00      	cmp	r4, #0
    8a3a:	d0eb      	beq.n	8a14 <ComputeDataCrc+0x30>
            length = length - sizeof(dataBlock);
    8a3c:	3d01      	subs	r5, #1
    8a3e:	3dff      	subs	r5, #255	; 0xff
    8a40:	b2ad      	uxth	r5, r5
        if (GatherData(sourceSector, blockPointer, offset, dataLength, dataBlock))
    8a42:	4b10      	ldr	r3, [pc, #64]	; (8a84 <ComputeDataCrc+0xa0>)
    8a44:	9300      	str	r3, [sp, #0]
    8a46:	2380      	movs	r3, #128	; 0x80
    8a48:	005b      	lsls	r3, r3, #1
    8a4a:	003a      	movs	r2, r7
    8a4c:	9905      	ldr	r1, [sp, #20]
    8a4e:	9804      	ldr	r0, [sp, #16]
    8a50:	4e0d      	ldr	r6, [pc, #52]	; (8a88 <ComputeDataCrc+0xa4>)
    8a52:	47b0      	blx	r6
    8a54:	2800      	cmp	r0, #0
    8a56:	d0eb      	beq.n	8a30 <ComputeDataCrc+0x4c>
            dataLength = sizeof(dataBlock);
    8a58:	2180      	movs	r1, #128	; 0x80
    8a5a:	0049      	lsls	r1, r1, #1
            offset = offset+dataLength;
    8a5c:	187f      	adds	r7, r7, r1
    8a5e:	b2bf      	uxth	r7, r7
            crc = ComputeCrc(((uint8_t*) &dataBlock), dataLength, crc);
    8a60:	9a03      	ldr	r2, [sp, #12]
    8a62:	4808      	ldr	r0, [pc, #32]	; (8a84 <ComputeDataCrc+0xa0>)
    8a64:	47c0      	blx	r8
    8a66:	9003      	str	r0, [sp, #12]
    8a68:	e7e2      	b.n	8a30 <ComputeDataCrc+0x4c>
    uint16_t crc = 0xFFFFu;
    8a6a:	4b04      	ldr	r3, [pc, #16]	; (8a7c <ComputeDataCrc+0x98>)
    8a6c:	9303      	str	r3, [sp, #12]
}
    8a6e:	9803      	ldr	r0, [sp, #12]
    8a70:	b007      	add	sp, #28
    8a72:	bc0c      	pop	{r2, r3}
    8a74:	4690      	mov	r8, r2
    8a76:	469b      	mov	fp, r3
    8a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8a7a:	46c0      	nop			; (mov r8, r8)
    8a7c:	0000ffff 	.word	0x0000ffff
    8a80:	000088ed 	.word	0x000088ed
    8a84:	20000338 	.word	0x20000338
    8a88:	0000892d 	.word	0x0000892d

00008a8c <FindItemCache>:
{
    8a8c:	b570      	push	{r4, r5, r6, lr}
    for ( uint8_t cacheIndex = 0u; cacheIndex < s_itemCount; cacheIndex++ )
    8a8e:	4b16      	ldr	r3, [pc, #88]	; (8ae8 <FindItemCache+0x5c>)
    8a90:	781c      	ldrb	r4, [r3, #0]
    8a92:	2c00      	cmp	r4, #0
    8a94:	d026      	beq.n	8ae4 <FindItemCache+0x58>
        if ( cache->id == id )
    8a96:	4b15      	ldr	r3, [pc, #84]	; (8aec <FindItemCache+0x60>)
    8a98:	881b      	ldrh	r3, [r3, #0]
    8a9a:	4283      	cmp	r3, r0
    8a9c:	d016      	beq.n	8acc <FindItemCache+0x40>
    8a9e:	2301      	movs	r3, #1
    8aa0:	4e12      	ldr	r6, [pc, #72]	; (8aec <FindItemCache+0x60>)
    for ( uint8_t cacheIndex = 0u; cacheIndex < s_itemCount; cacheIndex++ )
    8aa2:	b2da      	uxtb	r2, r3
    8aa4:	4294      	cmp	r4, r2
    8aa6:	d91b      	bls.n	8ae0 <FindItemCache+0x54>
        Item_t *cache = &s_itemCache[cacheIndex];
    8aa8:	001d      	movs	r5, r3
        if ( cache->id == id )
    8aaa:	1c59      	adds	r1, r3, #1
    8aac:	009a      	lsls	r2, r3, #2
    8aae:	5ab2      	ldrh	r2, [r6, r2]
    8ab0:	4282      	cmp	r2, r0
    8ab2:	d001      	beq.n	8ab8 <FindItemCache+0x2c>
    8ab4:	000b      	movs	r3, r1
    8ab6:	e7f4      	b.n	8aa2 <FindItemCache+0x16>
        Item_t *cache = &s_itemCache[cacheIndex];
    8ab8:	009b      	lsls	r3, r3, #2
    8aba:	480c      	ldr	r0, [pc, #48]	; (8aec <FindItemCache+0x60>)
    8abc:	18c0      	adds	r0, r0, r3
            assert(cache->lastBlock != 0x0000);
    8abe:	00ad      	lsls	r5, r5, #2
    8ac0:	4b0a      	ldr	r3, [pc, #40]	; (8aec <FindItemCache+0x60>)
    8ac2:	195d      	adds	r5, r3, r5
    8ac4:	886b      	ldrh	r3, [r5, #2]
    8ac6:	2b00      	cmp	r3, #0
    8ac8:	d003      	beq.n	8ad2 <FindItemCache+0x46>
}
    8aca:	bd70      	pop	{r4, r5, r6, pc}
        Item_t *cache = &s_itemCache[cacheIndex];
    8acc:	4807      	ldr	r0, [pc, #28]	; (8aec <FindItemCache+0x60>)
    8ace:	2500      	movs	r5, #0
    8ad0:	e7f5      	b.n	8abe <FindItemCache+0x32>
            assert(cache->lastBlock != 0x0000);
    8ad2:	4b07      	ldr	r3, [pc, #28]	; (8af0 <FindItemCache+0x64>)
    8ad4:	4a07      	ldr	r2, [pc, #28]	; (8af4 <FindItemCache+0x68>)
    8ad6:	218c      	movs	r1, #140	; 0x8c
    8ad8:	31ff      	adds	r1, #255	; 0xff
    8ada:	4807      	ldr	r0, [pc, #28]	; (8af8 <FindItemCache+0x6c>)
    8adc:	4c07      	ldr	r4, [pc, #28]	; (8afc <FindItemCache+0x70>)
    8ade:	47a0      	blx	r4
    return NULL;
    8ae0:	2000      	movs	r0, #0
    8ae2:	e7f2      	b.n	8aca <FindItemCache+0x3e>
    8ae4:	2000      	movs	r0, #0
    8ae6:	e7f0      	b.n	8aca <FindItemCache+0x3e>
    8ae8:	2000046c 	.word	0x2000046c
    8aec:	20000450 	.word	0x20000450
    8af0:	00018d00 	.word	0x00018d00
    8af4:	00018dec 	.word	0x00018dec
    8af8:	00018d1c 	.word	0x00018d1c
    8afc:	0001694d 	.word	0x0001694d

00008b00 <FindItem>:
{
    8b00:	b510      	push	{r4, lr}
    Item_t *cache = FindItemCache(id);
    8b02:	4b05      	ldr	r3, [pc, #20]	; (8b18 <FindItem+0x18>)
    8b04:	4798      	blx	r3
    if (cache)
    8b06:	2800      	cmp	r0, #0
    8b08:	d004      	beq.n	8b14 <FindItem+0x14>
        return cache->lastBlock;
    8b0a:	7883      	ldrb	r3, [r0, #2]
    8b0c:	78c0      	ldrb	r0, [r0, #3]
    8b0e:	0200      	lsls	r0, r0, #8
    8b10:	4318      	orrs	r0, r3
}
    8b12:	bd10      	pop	{r4, pc}
    return 0x0000u;
    8b14:	2000      	movs	r0, #0
    8b16:	e7fc      	b.n	8b12 <FindItem+0x12>
    8b18:	00008a8d 	.word	0x00008a8d

00008b1c <CreateItemCache>:
{
    8b1c:	b510      	push	{r4, lr}
    8b1e:	0004      	movs	r4, r0
    assert(FindItemCache(id) == NULL);
    8b20:	4b0e      	ldr	r3, [pc, #56]	; (8b5c <CreateItemCache+0x40>)
    8b22:	4798      	blx	r3
    8b24:	2800      	cmp	r0, #0
    8b26:	d10b      	bne.n	8b40 <CreateItemCache+0x24>
    assert(s_itemCount < MAX_ITEM_COUNT);
    8b28:	4b0d      	ldr	r3, [pc, #52]	; (8b60 <CreateItemCache+0x44>)
    8b2a:	781b      	ldrb	r3, [r3, #0]
    8b2c:	2b06      	cmp	r3, #6
    8b2e:	d80e      	bhi.n	8b4e <CreateItemCache+0x32>
    Item_t *cache = &s_itemCache[s_itemCount++];
    8b30:	1c59      	adds	r1, r3, #1
    8b32:	4a0b      	ldr	r2, [pc, #44]	; (8b60 <CreateItemCache+0x44>)
    8b34:	7011      	strb	r1, [r2, #0]
    cache->id = id;
    8b36:	480b      	ldr	r0, [pc, #44]	; (8b64 <CreateItemCache+0x48>)
    8b38:	009b      	lsls	r3, r3, #2
    8b3a:	521c      	strh	r4, [r3, r0]
    Item_t *cache = &s_itemCache[s_itemCount++];
    8b3c:	18c0      	adds	r0, r0, r3
}
    8b3e:	bd10      	pop	{r4, pc}
    assert(FindItemCache(id) == NULL);
    8b40:	4b09      	ldr	r3, [pc, #36]	; (8b68 <CreateItemCache+0x4c>)
    8b42:	4a0a      	ldr	r2, [pc, #40]	; (8b6c <CreateItemCache+0x50>)
    8b44:	21cc      	movs	r1, #204	; 0xcc
    8b46:	0049      	lsls	r1, r1, #1
    8b48:	4809      	ldr	r0, [pc, #36]	; (8b70 <CreateItemCache+0x54>)
    8b4a:	4c0a      	ldr	r4, [pc, #40]	; (8b74 <CreateItemCache+0x58>)
    8b4c:	47a0      	blx	r4
    assert(s_itemCount < MAX_ITEM_COUNT);
    8b4e:	4b0a      	ldr	r3, [pc, #40]	; (8b78 <CreateItemCache+0x5c>)
    8b50:	4a06      	ldr	r2, [pc, #24]	; (8b6c <CreateItemCache+0x50>)
    8b52:	219a      	movs	r1, #154	; 0x9a
    8b54:	31ff      	adds	r1, #255	; 0xff
    8b56:	4806      	ldr	r0, [pc, #24]	; (8b70 <CreateItemCache+0x54>)
    8b58:	4c06      	ldr	r4, [pc, #24]	; (8b74 <CreateItemCache+0x58>)
    8b5a:	47a0      	blx	r4
    8b5c:	00008a8d 	.word	0x00008a8d
    8b60:	2000046c 	.word	0x2000046c
    8b64:	20000450 	.word	0x20000450
    8b68:	00018cc4 	.word	0x00018cc4
    8b6c:	00018dfc 	.word	0x00018dfc
    8b70:	00018d1c 	.word	0x00018d1c
    8b74:	0001694d 	.word	0x0001694d
    8b78:	00018ce0 	.word	0x00018ce0

00008b7c <EraseSector>:

static bool EraseSector(void)
{
    8b7c:	b510      	push	{r4, lr}
    // Erase the sector
    D_Nv_EraseSector(s_sector);
    8b7e:	4c08      	ldr	r4, [pc, #32]	; (8ba0 <EraseSector+0x24>)
    8b80:	7820      	ldrb	r0, [r4, #0]
    8b82:	4b08      	ldr	r3, [pc, #32]	; (8ba4 <EraseSector+0x28>)
    8b84:	4798      	blx	r3
    // check if the erase succeeded
    if ( !D_Nv_IsEmpty(s_sector, 0u, SECTOR_SIZE) )
    8b86:	7820      	ldrb	r0, [r4, #0]
    8b88:	2280      	movs	r2, #128	; 0x80
    8b8a:	0192      	lsls	r2, r2, #6
    8b8c:	2100      	movs	r1, #0
    8b8e:	4b06      	ldr	r3, [pc, #24]	; (8ba8 <EraseSector+0x2c>)
    8b90:	4798      	blx	r3
    8b92:	2800      	cmp	r0, #0
    8b94:	d003      	beq.n	8b9e <EraseSector+0x22>
    {
        return false;
    }
    s_sectorHead =  ITEMS_AREA_START_ADDRESS;
    8b96:	2280      	movs	r2, #128	; 0x80
    8b98:	0052      	lsls	r2, r2, #1
    8b9a:	4b04      	ldr	r3, [pc, #16]	; (8bac <EraseSector+0x30>)
    8b9c:	801a      	strh	r2, [r3, #0]

    return true;
}
    8b9e:	bd10      	pop	{r4, pc}
    8ba0:	20000474 	.word	0x20000474
    8ba4:	00008825 	.word	0x00008825
    8ba8:	00008879 	.word	0x00008879
    8bac:	20000476 	.word	0x20000476

00008bb0 <WriteAndCheck>:
{
    8bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    8bb2:	b083      	sub	sp, #12
    8bb4:	9001      	str	r0, [sp, #4]
    8bb6:	000d      	movs	r5, r1
    8bb8:	0016      	movs	r6, r2
    D_Nv_Write(s_sector, offset, pData, length);
    8bba:	4f07      	ldr	r7, [pc, #28]	; (8bd8 <WriteAndCheck+0x28>)
    8bbc:	7838      	ldrb	r0, [r7, #0]
    8bbe:	0013      	movs	r3, r2
    8bc0:	000a      	movs	r2, r1
    8bc2:	9901      	ldr	r1, [sp, #4]
    8bc4:	4c05      	ldr	r4, [pc, #20]	; (8bdc <WriteAndCheck+0x2c>)
    8bc6:	47a0      	blx	r4
    return D_Nv_IsEqual(s_sector, offset, pData, length);
    8bc8:	7838      	ldrb	r0, [r7, #0]
    8bca:	0033      	movs	r3, r6
    8bcc:	002a      	movs	r2, r5
    8bce:	9901      	ldr	r1, [sp, #4]
    8bd0:	4c03      	ldr	r4, [pc, #12]	; (8be0 <WriteAndCheck+0x30>)
    8bd2:	47a0      	blx	r4
}
    8bd4:	b003      	add	sp, #12
    8bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8bd8:	20000474 	.word	0x20000474
    8bdc:	000086bd 	.word	0x000086bd
    8be0:	00008889 	.word	0x00008889

00008be4 <WriteSectorHeader>:

static bool WriteSectorHeader(uint32_t sequenceNumber)
{
    8be4:	b510      	push	{r4, lr}
    8be6:	b086      	sub	sp, #24
    // write sector header
    SectorHeader_t sectorHeader;
    sectorHeader.signature[0] = (uint8_t) 'A';
    8be8:	ac01      	add	r4, sp, #4
    8bea:	2341      	movs	r3, #65	; 0x41
    8bec:	70a3      	strb	r3, [r4, #2]
    sectorHeader.signature[1] = (uint8_t) 'T';
    8bee:	3313      	adds	r3, #19
    8bf0:	70e3      	strb	r3, [r4, #3]
    sectorHeader.signature[2] = (uint8_t) 'S';
    8bf2:	3b01      	subs	r3, #1
    8bf4:	7123      	strb	r3, [r4, #4]
    sectorHeader.signature[3] = (uint8_t) 'N';
    8bf6:	3b05      	subs	r3, #5
    8bf8:	7163      	strb	r3, [r4, #5]
    sectorHeader.signature[4] = (uint8_t) 'v';
    8bfa:	3328      	adds	r3, #40	; 0x28
    8bfc:	71a3      	strb	r3, [r4, #6]
    sectorHeader.signature[5] = (uint8_t) '2';
    8bfe:	3b44      	subs	r3, #68	; 0x44
    8c00:	71e3      	strb	r3, [r4, #7]
    sectorHeader.sequenceNumber = sequenceNumber;
    8c02:	9003      	str	r0, [sp, #12]
    sectorHeader.sequenceParity = sequenceNumber ^ 0xFFFFFFFFuL;
    8c04:	43c0      	mvns	r0, r0
    8c06:	9004      	str	r0, [sp, #16]
    sectorHeader.nextPageAddressAfterCompact = s_nextPageAddressAfterCompact;
    8c08:	4b08      	ldr	r3, [pc, #32]	; (8c2c <WriteSectorHeader+0x48>)
    8c0a:	881b      	ldrh	r3, [r3, #0]
    8c0c:	8223      	strh	r3, [r4, #16]
    return ComputeCrc(((uint8_t*) pSectorHeader) + sizeof(pSectorHeader->headerCrc), (sizeof(SectorHeader_t)- sizeof(pSectorHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    8c0e:	4a08      	ldr	r2, [pc, #32]	; (8c30 <WriteSectorHeader+0x4c>)
    8c10:	2110      	movs	r1, #16
    8c12:	466b      	mov	r3, sp
    8c14:	1d98      	adds	r0, r3, #6
    8c16:	4b07      	ldr	r3, [pc, #28]	; (8c34 <WriteSectorHeader+0x50>)
    8c18:	4798      	blx	r3
    sectorHeader.headerCrc = ComputeSectorHeaderCrc(&sectorHeader);
    8c1a:	8020      	strh	r0, [r4, #0]
    if ( !WriteAndCheck(0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE) )
    8c1c:	2212      	movs	r2, #18
    8c1e:	0021      	movs	r1, r4
    8c20:	2000      	movs	r0, #0
    8c22:	4b05      	ldr	r3, [pc, #20]	; (8c38 <WriteSectorHeader+0x54>)
    8c24:	4798      	blx	r3
    {
        return false;
    }
    return true;
}
    8c26:	b006      	add	sp, #24
    8c28:	bd10      	pop	{r4, pc}
    8c2a:	46c0      	nop			; (mov r8, r8)
    8c2c:	2000046e 	.word	0x2000046e
    8c30:	0000ffff 	.word	0x0000ffff
    8c34:	000088ed 	.word	0x000088ed
    8c38:	00008bb1 	.word	0x00008bb1

00008c3c <SmartCompacting>:
 * without following any alignements as normal item updates.Items are filled into
  256 byte buffer(= row size), committed in shot which takes 4 page writs maximum
 */

static bool SmartCompacting(uint8_t* compactBlock, uint16_t curItemLength)
{
    8c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8c3e:	0004      	movs	r4, r0
    8c40:	000d      	movs	r5, r1
    //manupulate the current compact length
    currentCompactLength += curItemLength;
    8c42:	4a21      	ldr	r2, [pc, #132]	; (8cc8 <SmartCompacting+0x8c>)
    8c44:	8813      	ldrh	r3, [r2, #0]
    8c46:	18cb      	adds	r3, r1, r3
    8c48:	b29b      	uxth	r3, r3
    8c4a:	8013      	strh	r3, [r2, #0]

    // if the complete buffer cannot be filled with the current item
    if ( currentCompactLength < ROW_SIZE)
    8c4c:	2bff      	cmp	r3, #255	; 0xff
    8c4e:	d92e      	bls.n	8cae <SmartCompacting+0x72>
    else  //(currentCompactLength >= ROW_SIZE) cases
    {
        uint16_t dataBlockOffset = 0;


        memcpy(compactBlock + compactBlockOffset, dataBlock, (ROW_SIZE - compactBlockOffset));
    8c50:	4b1e      	ldr	r3, [pc, #120]	; (8ccc <SmartCompacting+0x90>)
    8c52:	881a      	ldrh	r2, [r3, #0]
    8c54:	1880      	adds	r0, r0, r2
    8c56:	2580      	movs	r5, #128	; 0x80
    8c58:	006d      	lsls	r5, r5, #1
    8c5a:	1aaa      	subs	r2, r5, r2
    8c5c:	491c      	ldr	r1, [pc, #112]	; (8cd0 <SmartCompacting+0x94>)
    8c5e:	4b1d      	ldr	r3, [pc, #116]	; (8cd4 <SmartCompacting+0x98>)
    8c60:	4798      	blx	r3
        if ( !WriteAndCheck(s_sectorHead, compactBlock, ROW_SIZE ))
    8c62:	4b1d      	ldr	r3, [pc, #116]	; (8cd8 <SmartCompacting+0x9c>)
    8c64:	8818      	ldrh	r0, [r3, #0]
    8c66:	002a      	movs	r2, r5
    8c68:	0021      	movs	r1, r4
    8c6a:	4b1c      	ldr	r3, [pc, #112]	; (8cdc <SmartCompacting+0xa0>)
    8c6c:	4798      	blx	r3
    8c6e:	1e05      	subs	r5, r0, #0
    8c70:	d027      	beq.n	8cc2 <SmartCompacting+0x86>
        {
            return false;
        }
        UpdateSectorHead(ROW_SIZE, ITEM_NO_ALIGNMENT);
    8c72:	2100      	movs	r1, #0
    8c74:	2080      	movs	r0, #128	; 0x80
    8c76:	0040      	lsls	r0, r0, #1
    8c78:	4b19      	ldr	r3, [pc, #100]	; (8ce0 <SmartCompacting+0xa4>)
    8c7a:	4798      	blx	r3
        dataBlockOffset += (ROW_SIZE - compactBlockOffset);
    8c7c:	4b13      	ldr	r3, [pc, #76]	; (8ccc <SmartCompacting+0x90>)
    8c7e:	8818      	ldrh	r0, [r3, #0]
        compactBlockOffset = 0;
    8c80:	2200      	movs	r2, #0
    8c82:	801a      	strh	r2, [r3, #0]
        currentCompactLength -= ROW_SIZE;
    8c84:	4b10      	ldr	r3, [pc, #64]	; (8cc8 <SmartCompacting+0x8c>)
    8c86:	881e      	ldrh	r6, [r3, #0]
    8c88:	3e01      	subs	r6, #1
    8c8a:	3eff      	subs	r6, #255	; 0xff
    8c8c:	b2b6      	uxth	r6, r6
    8c8e:	801e      	strh	r6, [r3, #0]
        if (currentCompactLength)
    8c90:	2e00      	cmp	r6, #0
    8c92:	d016      	beq.n	8cc2 <SmartCompacting+0x86>
        dataBlockOffset += (ROW_SIZE - compactBlockOffset);
    8c94:	2180      	movs	r1, #128	; 0x80
    8c96:	0049      	lsls	r1, r1, #1
    8c98:	1a09      	subs	r1, r1, r0
        {
            memcpy(compactBlock, dataBlock + dataBlockOffset, currentCompactLength);
    8c9a:	b289      	uxth	r1, r1
    8c9c:	4b0c      	ldr	r3, [pc, #48]	; (8cd0 <SmartCompacting+0x94>)
    8c9e:	1859      	adds	r1, r3, r1
    8ca0:	0032      	movs	r2, r6
    8ca2:	0020      	movs	r0, r4
    8ca4:	4b0b      	ldr	r3, [pc, #44]	; (8cd4 <SmartCompacting+0x98>)
    8ca6:	4798      	blx	r3
            compactBlockOffset = currentCompactLength;
    8ca8:	4b08      	ldr	r3, [pc, #32]	; (8ccc <SmartCompacting+0x90>)
    8caa:	801e      	strh	r6, [r3, #0]
    8cac:	e009      	b.n	8cc2 <SmartCompacting+0x86>
        memcpy(compactBlock + compactBlockOffset, dataBlock, curItemLength);
    8cae:	4e07      	ldr	r6, [pc, #28]	; (8ccc <SmartCompacting+0x90>)
    8cb0:	8837      	ldrh	r7, [r6, #0]
    8cb2:	19c0      	adds	r0, r0, r7
    8cb4:	000a      	movs	r2, r1
    8cb6:	4906      	ldr	r1, [pc, #24]	; (8cd0 <SmartCompacting+0x94>)
    8cb8:	4b06      	ldr	r3, [pc, #24]	; (8cd4 <SmartCompacting+0x98>)
    8cba:	4798      	blx	r3
        compactBlockOffset += curItemLength;
    8cbc:	19ed      	adds	r5, r5, r7
    8cbe:	8035      	strh	r5, [r6, #0]
        return true;
    8cc0:	2501      	movs	r5, #1
        }
    }

    return true;

}
    8cc2:	0028      	movs	r0, r5
    8cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8cc6:	46c0      	nop			; (mov r8, r8)
    8cc8:	20000334 	.word	0x20000334
    8ccc:	20000308 	.word	0x20000308
    8cd0:	20000338 	.word	0x20000338
    8cd4:	00016a0f 	.word	0x00016a0f
    8cd8:	20000476 	.word	0x20000476
    8cdc:	00008bb1 	.word	0x00008bb1
    8ce0:	000088b1 	.word	0x000088b1

00008ce4 <CompactSector>:
 * This is because the itemCache, sector head and sector selector will
 * be messed up.
 */

static bool CompactSector(void)
{
    8ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
    8ce6:	46de      	mov	lr, fp
    8ce8:	4657      	mov	r7, sl
    8cea:	464e      	mov	r6, r9
    8cec:	4645      	mov	r5, r8
    8cee:	b5e0      	push	{r5, r6, r7, lr}
    8cf0:	b0d5      	sub	sp, #340	; 0x154
    PRINTA(("CompactSector(s=%X)", s_sector));
#endif
    uint8_t compactBlock[ROW_SIZE];

    // stop timer for preemptive compact sector as this will not be needed any more
    SYS_TimerStop(&compactSectorTimer);
    8cf2:	487b      	ldr	r0, [pc, #492]	; (8ee0 <CompactSector+0x1fc>)
    8cf4:	4b7b      	ldr	r3, [pc, #492]	; (8ee4 <CompactSector+0x200>)
    8cf6:	4798      	blx	r3

    // stop the compact item as a compact sector will compact all items
    s_compactItemId = 0u;
    8cf8:	2300      	movs	r3, #0
    8cfa:	4a7b      	ldr	r2, [pc, #492]	; (8ee8 <CompactSector+0x204>)
    8cfc:	8013      	strh	r3, [r2, #0]
    s_compactItemLength = 0u;
    8cfe:	4a7b      	ldr	r2, [pc, #492]	; (8eec <CompactSector+0x208>)
    8d00:	8013      	strh	r3, [r2, #0]

    compactBlockOffset = 0;
    8d02:	4a7b      	ldr	r2, [pc, #492]	; (8ef0 <CompactSector+0x20c>)
    8d04:	8013      	strh	r3, [r2, #0]
    currentCompactLength = 0;
    8d06:	4a7b      	ldr	r2, [pc, #492]	; (8ef4 <CompactSector+0x210>)
    8d08:	8013      	strh	r3, [r2, #0]

    uint8_t sourceSector = s_sector;
    8d0a:	4b7b      	ldr	r3, [pc, #492]	; (8ef8 <CompactSector+0x214>)
    8d0c:	781b      	ldrb	r3, [r3, #0]
    8d0e:	001f      	movs	r7, r3
    8d10:	9303      	str	r3, [sp, #12]

    // get the sector header for the source sector
    SectorHeader_t sectorHeader;
    D_Nv_Read(sourceSector, 0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE);
    8d12:	2312      	movs	r3, #18
    8d14:	aa0f      	add	r2, sp, #60	; 0x3c
    8d16:	2100      	movs	r1, #0
    8d18:	0038      	movs	r0, r7
    8d1a:	4c78      	ldr	r4, [pc, #480]	; (8efc <CompactSector+0x218>)
    8d1c:	47a0      	blx	r4

    uint32_t nextSequenceNumber = sectorHeader.sequenceNumber - 1uL;
    8d1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8d20:	9309      	str	r3, [sp, #36]	; 0x24

    // find and prepare a destination sector
    do
    {
        s_sector++;
    8d22:	4c75      	ldr	r4, [pc, #468]	; (8ef8 <CompactSector+0x214>)
        if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
        {
            s_sector = FIRST_SECTOR;
    8d24:	0025      	movs	r5, r4
        s_sector++;
    8d26:	0026      	movs	r6, r4
    8d28:	e008      	b.n	8d3c <CompactSector+0x58>
    8d2a:	7033      	strb	r3, [r6, #0]
        }

        if ( s_sector == sourceSector )
    8d2c:	4b72      	ldr	r3, [pc, #456]	; (8ef8 <CompactSector+0x214>)
    8d2e:	781b      	ldrb	r3, [r3, #0]
    8d30:	42bb      	cmp	r3, r7
    8d32:	d00b      	beq.n	8d4c <CompactSector+0x68>
        {
            // all sector failed to initialize
            assert(false);
        }
    }
    while ( !EraseSector());
    8d34:	4b72      	ldr	r3, [pc, #456]	; (8f00 <CompactSector+0x21c>)
    8d36:	4798      	blx	r3
    8d38:	2800      	cmp	r0, #0
    8d3a:	d10d      	bne.n	8d58 <CompactSector+0x74>
        s_sector++;
    8d3c:	7823      	ldrb	r3, [r4, #0]
    8d3e:	3301      	adds	r3, #1
    8d40:	b2db      	uxtb	r3, r3
        if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
    8d42:	2b01      	cmp	r3, #1
    8d44:	d9f1      	bls.n	8d2a <CompactSector+0x46>
            s_sector = FIRST_SECTOR;
    8d46:	2300      	movs	r3, #0
    8d48:	702b      	strb	r3, [r5, #0]
    8d4a:	e7ef      	b.n	8d2c <CompactSector+0x48>
            assert(false);
    8d4c:	4b6d      	ldr	r3, [pc, #436]	; (8f04 <CompactSector+0x220>)
    8d4e:	4a6e      	ldr	r2, [pc, #440]	; (8f08 <CompactSector+0x224>)
    8d50:	496e      	ldr	r1, [pc, #440]	; (8f0c <CompactSector+0x228>)
    8d52:	486f      	ldr	r0, [pc, #444]	; (8f10 <CompactSector+0x22c>)
    8d54:	4c6f      	ldr	r4, [pc, #444]	; (8f14 <CompactSector+0x230>)
    8d56:	47a0      	blx	r4

    // Traverse the item cache, writing all items to the new sector
    for (uint8_t cacheIndex = 0; cacheIndex < s_itemCount; cacheIndex++) {
    8d58:	4b6f      	ldr	r3, [pc, #444]	; (8f18 <CompactSector+0x234>)
    8d5a:	781b      	ldrb	r3, [r3, #0]
    8d5c:	2b00      	cmp	r3, #0
    8d5e:	d06a      	beq.n	8e36 <CompactSector+0x152>
    8d60:	2300      	movs	r3, #0
    8d62:	9306      	str	r3, [sp, #24]

        blockHeader.dataCrc =  ComputeDataCrc(sourceSector, lastBlockPointer, &blockHeader);

        blockHeader.headerCrc = ComputeHeaderCrc(&blockHeader);

        memset(dataBlock, 0xFF, sizeof(dataBlock));
    8d64:	3301      	adds	r3, #1
    8d66:	33ff      	adds	r3, #255	; 0xff
    8d68:	4699      	mov	r9, r3
            uint16_t bytesToGather;
            uint16_t inDataOffset = 0;

            do
            {
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    8d6a:	466a      	mov	r2, sp
    8d6c:	82d3      	strh	r3, [r2, #22]
            if (!GatherData(sourceSector, lastBlockPointer, 0u, blockHeader.itemLength, (dataBlock + BLOCK_HEADER_SIZE )))
    8d6e:	4b6b      	ldr	r3, [pc, #428]	; (8f1c <CompactSector+0x238>)
    8d70:	3310      	adds	r3, #16
    8d72:	9308      	str	r3, [sp, #32]
        Item_t *cache = &s_itemCache[cacheIndex];
    8d74:	9b06      	ldr	r3, [sp, #24]
    8d76:	9307      	str	r3, [sp, #28]
        uint16_t lastBlockPointer = cache->lastBlock;
    8d78:	009f      	lsls	r7, r3, #2
    8d7a:	4b69      	ldr	r3, [pc, #420]	; (8f20 <CompactSector+0x23c>)
    8d7c:	469c      	mov	ip, r3
    8d7e:	4467      	add	r7, ip
    8d80:	887b      	ldrh	r3, [r7, #2]
    8d82:	001d      	movs	r5, r3
    8d84:	9304      	str	r3, [sp, #16]
        D_Nv_Read(sourceSector, lastBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8d86:	2310      	movs	r3, #16
    8d88:	aa0b      	add	r2, sp, #44	; 0x2c
    8d8a:	0029      	movs	r1, r5
    8d8c:	9803      	ldr	r0, [sp, #12]
    8d8e:	4680      	mov	r8, r0
    8d90:	4c5a      	ldr	r4, [pc, #360]	; (8efc <CompactSector+0x218>)
    8d92:	47a0      	blx	r4
        blockHeader.blockOffset = 0x0000u;
    8d94:	ae0b      	add	r6, sp, #44	; 0x2c
    8d96:	2300      	movs	r3, #0
    8d98:	80b3      	strh	r3, [r6, #4]
        blockHeader.blockLength = blockHeader.itemLength;
    8d9a:	8934      	ldrh	r4, [r6, #8]
    8d9c:	80f4      	strh	r4, [r6, #6]
        blockHeader.previousBlock = 0x0000u;
    8d9e:	8173      	strh	r3, [r6, #10]
        blockHeader.writeCount = 0u;
    8da0:	81b3      	strh	r3, [r6, #12]
        uint16_t currLength = BLOCK_HEADER_SIZE + blockHeader.itemLength;
    8da2:	3410      	adds	r4, #16
    8da4:	b2a4      	uxth	r4, r4
        blockHeader.dataCrc =  ComputeDataCrc(sourceSector, lastBlockPointer, &blockHeader);
    8da6:	0032      	movs	r2, r6
    8da8:	0029      	movs	r1, r5
    8daa:	4640      	mov	r0, r8
    8dac:	4b5d      	ldr	r3, [pc, #372]	; (8f24 <CompactSector+0x240>)
    8dae:	4798      	blx	r3
    8db0:	8030      	strh	r0, [r6, #0]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    8db2:	4a5d      	ldr	r2, [pc, #372]	; (8f28 <CompactSector+0x244>)
    8db4:	210e      	movs	r1, #14
    8db6:	a80b      	add	r0, sp, #44	; 0x2c
    8db8:	4b5c      	ldr	r3, [pc, #368]	; (8f2c <CompactSector+0x248>)
    8dba:	4798      	blx	r3
        blockHeader.headerCrc = ComputeHeaderCrc(&blockHeader);
    8dbc:	81f0      	strh	r0, [r6, #14]
        memset(dataBlock, 0xFF, sizeof(dataBlock));
    8dbe:	4d57      	ldr	r5, [pc, #348]	; (8f1c <CompactSector+0x238>)
    8dc0:	464a      	mov	r2, r9
    8dc2:	21ff      	movs	r1, #255	; 0xff
    8dc4:	0028      	movs	r0, r5
    8dc6:	4b5a      	ldr	r3, [pc, #360]	; (8f30 <CompactSector+0x24c>)
    8dc8:	4798      	blx	r3
        memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    8dca:	002b      	movs	r3, r5
    8dcc:	ce07      	ldmia	r6!, {r0, r1, r2}
    8dce:	c307      	stmia	r3!, {r0, r1, r2}
    8dd0:	6832      	ldr	r2, [r6, #0]
    8dd2:	601a      	str	r2, [r3, #0]
        cache->lastBlock = s_sectorHead  + compactBlockOffset;
    8dd4:	4b57      	ldr	r3, [pc, #348]	; (8f34 <CompactSector+0x250>)
    8dd6:	881b      	ldrh	r3, [r3, #0]
    8dd8:	4a45      	ldr	r2, [pc, #276]	; (8ef0 <CompactSector+0x20c>)
    8dda:	8812      	ldrh	r2, [r2, #0]
    8ddc:	189b      	adds	r3, r3, r2
    8dde:	807b      	strh	r3, [r7, #2]
        if (currLength <= ROW_SIZE)
    8de0:	454c      	cmp	r4, r9
    8de2:	d904      	bls.n	8dee <CompactSector+0x10a>
    8de4:	2600      	movs	r6, #0
    8de6:	2310      	movs	r3, #16
              
              if (!GatherData(sourceSector, lastBlockPointer, inDataOffset, (bytesToGather - dataBlockOffset) , (dataBlock + dataBlockOffset)))
    8de8:	4a4c      	ldr	r2, [pc, #304]	; (8f1c <CompactSector+0x238>)
    8dea:	4690      	mov	r8, r2
    8dec:	e068      	b.n	8ec0 <CompactSector+0x1dc>
            if (!GatherData(sourceSector, lastBlockPointer, 0u, blockHeader.itemLength, (dataBlock + BLOCK_HEADER_SIZE )))
    8dee:	ab0b      	add	r3, sp, #44	; 0x2c
    8df0:	891b      	ldrh	r3, [r3, #8]
    8df2:	9a08      	ldr	r2, [sp, #32]
    8df4:	9200      	str	r2, [sp, #0]
    8df6:	2200      	movs	r2, #0
    8df8:	9904      	ldr	r1, [sp, #16]
    8dfa:	9803      	ldr	r0, [sp, #12]
    8dfc:	4e4e      	ldr	r6, [pc, #312]	; (8f38 <CompactSector+0x254>)
    8dfe:	47b0      	blx	r6
    8e00:	2800      	cmp	r0, #0
    8e02:	d063      	beq.n	8ecc <CompactSector+0x1e8>
            cache->lastBlock = s_sectorHead  + compactBlockOffset;
    8e04:	9b07      	ldr	r3, [sp, #28]
    8e06:	009d      	lsls	r5, r3, #2
    8e08:	4b45      	ldr	r3, [pc, #276]	; (8f20 <CompactSector+0x23c>)
    8e0a:	195d      	adds	r5, r3, r5
    8e0c:	4b49      	ldr	r3, [pc, #292]	; (8f34 <CompactSector+0x250>)
    8e0e:	881b      	ldrh	r3, [r3, #0]
    8e10:	4a37      	ldr	r2, [pc, #220]	; (8ef0 <CompactSector+0x20c>)
    8e12:	8812      	ldrh	r2, [r2, #0]
    8e14:	189b      	adds	r3, r3, r2
    8e16:	806b      	strh	r3, [r5, #2]
            if (!SmartCompacting(compactBlock, currLength))
    8e18:	0021      	movs	r1, r4
    8e1a:	a814      	add	r0, sp, #80	; 0x50
    8e1c:	4b47      	ldr	r3, [pc, #284]	; (8f3c <CompactSector+0x258>)
    8e1e:	4798      	blx	r3
    8e20:	2800      	cmp	r0, #0
    8e22:	d053      	beq.n	8ecc <CompactSector+0x1e8>
    for (uint8_t cacheIndex = 0; cacheIndex < s_itemCount; cacheIndex++) {
    8e24:	9b06      	ldr	r3, [sp, #24]
    8e26:	3301      	adds	r3, #1
    8e28:	b2db      	uxtb	r3, r3
    8e2a:	001a      	movs	r2, r3
    8e2c:	9306      	str	r3, [sp, #24]
    8e2e:	4b3a      	ldr	r3, [pc, #232]	; (8f18 <CompactSector+0x234>)
    8e30:	781b      	ldrb	r3, [r3, #0]
    8e32:	4293      	cmp	r3, r2
    8e34:	d89e      	bhi.n	8d74 <CompactSector+0x90>

            } while(currLength > 0);
        }
    }
    // if some uncommitted data avaialble, committ it
    if ( currentCompactLength)
    8e36:	4b2f      	ldr	r3, [pc, #188]	; (8ef4 <CompactSector+0x210>)
    8e38:	881a      	ldrh	r2, [r3, #0]
    8e3a:	2a00      	cmp	r2, #0
    8e3c:	d006      	beq.n	8e4c <CompactSector+0x168>
    {
        if ( !WriteAndCheck(s_sectorHead, compactBlock, currentCompactLength) )
    8e3e:	4b3d      	ldr	r3, [pc, #244]	; (8f34 <CompactSector+0x250>)
    8e40:	8818      	ldrh	r0, [r3, #0]
    8e42:	a914      	add	r1, sp, #80	; 0x50
    8e44:	4b3e      	ldr	r3, [pc, #248]	; (8f40 <CompactSector+0x25c>)
    8e46:	4798      	blx	r3
    8e48:	1e04      	subs	r4, r0, #0
    8e4a:	d040      	beq.n	8ece <CompactSector+0x1ea>
        {
            return false;
        }
    }
    // Just update sector header as per the the length of the data committed, no alignments
    UpdateSectorHead(currentCompactLength, ITEM_NO_ALIGNMENT);
    8e4c:	4b29      	ldr	r3, [pc, #164]	; (8ef4 <CompactSector+0x210>)
    8e4e:	8818      	ldrh	r0, [r3, #0]
    8e50:	2100      	movs	r1, #0
    8e52:	4b3c      	ldr	r3, [pc, #240]	; (8f44 <CompactSector+0x260>)
    8e54:	4798      	blx	r3

    s_nextPageAddressAfterCompact = s_sectorHead;
    8e56:	4b37      	ldr	r3, [pc, #220]	; (8f34 <CompactSector+0x250>)
    8e58:	881a      	ldrh	r2, [r3, #0]
    8e5a:	4b3b      	ldr	r3, [pc, #236]	; (8f48 <CompactSector+0x264>)
    8e5c:	801a      	strh	r2, [r3, #0]
    uint32_t nextSequenceNumber = sectorHeader.sequenceNumber - 1uL;
    8e5e:	9809      	ldr	r0, [sp, #36]	; 0x24
    8e60:	3801      	subs	r0, #1
    //SYS_PostEvent(BC_EVENT_UPGRADE_STRUCT_CHANGED_ITEMS, 0U);

    // update nextPageAddressAfterCompact in the sector header
    // All items moved, so now we just need to Write the Sector Header with 
    // nextPageAddressAfterCompact at the end of compact sector operation
    if ( !WriteSectorHeader(nextSequenceNumber))
    8e62:	4b3a      	ldr	r3, [pc, #232]	; (8f4c <CompactSector+0x268>)
    8e64:	4798      	blx	r3
    8e66:	1e04      	subs	r4, r0, #0
    8e68:	d031      	beq.n	8ece <CompactSector+0x1ea>
    {
        return false;
    }
    // Done with compact sector opration, Set the Sector Head to next page address for normal item update 
    UpdateSectorHead(0, ITEM_64BYTE_ALIGNMENT);
    8e6a:	2102      	movs	r1, #2
    8e6c:	2000      	movs	r0, #0
    8e6e:	4b35      	ldr	r3, [pc, #212]	; (8f44 <CompactSector+0x260>)
    8e70:	4798      	blx	r3

    // schedule an erase of the source sector,Restart the timer if it is already running.
    s_sectorToErase = sourceSector;
    8e72:	4b37      	ldr	r3, [pc, #220]	; (8f50 <CompactSector+0x26c>)
    8e74:	466a      	mov	r2, sp
    8e76:	7b12      	ldrb	r2, [r2, #12]
    8e78:	701a      	strb	r2, [r3, #0]
    SYS_TimerStop(&eraseSectorTimer);
    8e7a:	4d36      	ldr	r5, [pc, #216]	; (8f54 <CompactSector+0x270>)
    8e7c:	0028      	movs	r0, r5
    8e7e:	4b19      	ldr	r3, [pc, #100]	; (8ee4 <CompactSector+0x200>)
    8e80:	4798      	blx	r3
    SYS_TimerStart(&eraseSectorTimer);
    8e82:	0028      	movs	r0, r5
    8e84:	4b34      	ldr	r3, [pc, #208]	; (8f58 <CompactSector+0x274>)
    8e86:	4798      	blx	r3

    return true;
    8e88:	e021      	b.n	8ece <CompactSector+0x1ea>
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    8e8a:	b2ad      	uxth	r5, r5
              if (!GatherData(sourceSector, lastBlockPointer, inDataOffset, (bytesToGather - dataBlockOffset) , (dataBlock + dataBlockOffset)))
    8e8c:	1aef      	subs	r7, r5, r3
    8e8e:	b2ba      	uxth	r2, r7
    8e90:	4693      	mov	fp, r2
    8e92:	4443      	add	r3, r8
    8e94:	9300      	str	r3, [sp, #0]
    8e96:	0013      	movs	r3, r2
    8e98:	0032      	movs	r2, r6
    8e9a:	9904      	ldr	r1, [sp, #16]
    8e9c:	9803      	ldr	r0, [sp, #12]
    8e9e:	4f26      	ldr	r7, [pc, #152]	; (8f38 <CompactSector+0x254>)
    8ea0:	47b8      	blx	r7
    8ea2:	2800      	cmp	r0, #0
    8ea4:	d012      	beq.n	8ecc <CompactSector+0x1e8>
              if (!SmartCompacting(compactBlock, bytesToGather))
    8ea6:	0029      	movs	r1, r5
    8ea8:	a814      	add	r0, sp, #80	; 0x50
    8eaa:	4b24      	ldr	r3, [pc, #144]	; (8f3c <CompactSector+0x258>)
    8eac:	4798      	blx	r3
    8eae:	2800      	cmp	r0, #0
    8eb0:	d00c      	beq.n	8ecc <CompactSector+0x1e8>
              currLength -= bytesToGather;
    8eb2:	1b64      	subs	r4, r4, r5
    8eb4:	b2a4      	uxth	r4, r4
              inDataOffset += (bytesToGather - dataBlockOffset);
    8eb6:	445e      	add	r6, fp
    8eb8:	b2b6      	uxth	r6, r6
              dataBlockOffset = 0;
    8eba:	2300      	movs	r3, #0
            } while(currLength > 0);
    8ebc:	2c00      	cmp	r4, #0
    8ebe:	d0b1      	beq.n	8e24 <CompactSector+0x140>
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    8ec0:	1c25      	adds	r5, r4, #0
    8ec2:	454c      	cmp	r4, r9
    8ec4:	d9e1      	bls.n	8e8a <CompactSector+0x1a6>
    8ec6:	466a      	mov	r2, sp
    8ec8:	8ad5      	ldrh	r5, [r2, #22]
    8eca:	e7de      	b.n	8e8a <CompactSector+0x1a6>
                return false;
    8ecc:	2400      	movs	r4, #0
}
    8ece:	0020      	movs	r0, r4
    8ed0:	b055      	add	sp, #340	; 0x154
    8ed2:	bc3c      	pop	{r2, r3, r4, r5}
    8ed4:	4690      	mov	r8, r2
    8ed6:	4699      	mov	r9, r3
    8ed8:	46a2      	mov	sl, r4
    8eda:	46ab      	mov	fp, r5
    8edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8ede:	46c0      	nop			; (mov r8, r8)
    8ee0:	20000320 	.word	0x20000320
    8ee4:	0000c391 	.word	0x0000c391
    8ee8:	2000044c 	.word	0x2000044c
    8eec:	2000044e 	.word	0x2000044e
    8ef0:	20000308 	.word	0x20000308
    8ef4:	20000334 	.word	0x20000334
    8ef8:	20000474 	.word	0x20000474
    8efc:	00008645 	.word	0x00008645
    8f00:	00008b7d 	.word	0x00008b7d
    8f04:	00018cbc 	.word	0x00018cbc
    8f08:	00018e0c 	.word	0x00018e0c
    8f0c:	000003d5 	.word	0x000003d5
    8f10:	00018d1c 	.word	0x00018d1c
    8f14:	0001694d 	.word	0x0001694d
    8f18:	2000046c 	.word	0x2000046c
    8f1c:	20000338 	.word	0x20000338
    8f20:	20000450 	.word	0x20000450
    8f24:	000089e5 	.word	0x000089e5
    8f28:	0000ffff 	.word	0x0000ffff
    8f2c:	000088ed 	.word	0x000088ed
    8f30:	00016a21 	.word	0x00016a21
    8f34:	20000476 	.word	0x20000476
    8f38:	0000892d 	.word	0x0000892d
    8f3c:	00008c3d 	.word	0x00008c3d
    8f40:	00008bb1 	.word	0x00008bb1
    8f44:	000088b1 	.word	0x000088b1
    8f48:	2000046e 	.word	0x2000046e
    8f4c:	00008be5 	.word	0x00008be5
    8f50:	2000001a 	.word	0x2000001a
    8f54:	20000438 	.word	0x20000438
    8f58:	0000c3fd 	.word	0x0000c3fd

00008f5c <compactSectorTimerFired>:
{
    8f5c:	b510      	push	{r4, lr}
    if (!PowerSupplyTooLow()) {
    8f5e:	4b07      	ldr	r3, [pc, #28]	; (8f7c <compactSectorTimerFired+0x20>)
    8f60:	4798      	blx	r3
    8f62:	2800      	cmp	r0, #0
    8f64:	d000      	beq.n	8f68 <compactSectorTimerFired+0xc>
}
    8f66:	bd10      	pop	{r4, pc}
      status = CompactSector();
    8f68:	4b05      	ldr	r3, [pc, #20]	; (8f80 <compactSectorTimerFired+0x24>)
    8f6a:	4798      	blx	r3
      assert(false);
    8f6c:	4b05      	ldr	r3, [pc, #20]	; (8f84 <compactSectorTimerFired+0x28>)
    8f6e:	4a06      	ldr	r2, [pc, #24]	; (8f88 <compactSectorTimerFired+0x2c>)
    8f70:	212c      	movs	r1, #44	; 0x2c
    8f72:	31ff      	adds	r1, #255	; 0xff
    8f74:	4805      	ldr	r0, [pc, #20]	; (8f8c <compactSectorTimerFired+0x30>)
    8f76:	4c06      	ldr	r4, [pc, #24]	; (8f90 <compactSectorTimerFired+0x34>)
    8f78:	47a0      	blx	r4
    8f7a:	46c0      	nop			; (mov r8, r8)
    8f7c:	00008895 	.word	0x00008895
    8f80:	00008ce5 	.word	0x00008ce5
    8f84:	00018cbc 	.word	0x00018cbc
    8f88:	00018dd4 	.word	0x00018dd4
    8f8c:	00018d1c 	.word	0x00018d1c
    8f90:	0001694d 	.word	0x0001694d

00008f94 <CompactSectorIfNeeded>:

static void CompactSectorIfNeeded(uint16_t immediateThreshold)
{
    8f94:	b510      	push	{r4, lr}
    uint16_t freeSpace = SECTOR_SIZE - s_sectorHead;
    8f96:	4b12      	ldr	r3, [pc, #72]	; (8fe0 <CompactSectorIfNeeded+0x4c>)
    8f98:	881a      	ldrh	r2, [r3, #0]
    8f9a:	2380      	movs	r3, #128	; 0x80
    8f9c:	019b      	lsls	r3, r3, #6
    8f9e:	1a9b      	subs	r3, r3, r2
    8fa0:	b29b      	uxth	r3, r3

    if ( freeSpace < immediateThreshold )
    8fa2:	4283      	cmp	r3, r0
    8fa4:	d303      	bcc.n	8fae <CompactSectorIfNeeded+0x1a>
        {
            assert(false);
        }
        return;
    }
    if ( freeSpace < PREEMPTIVE_COMPACT_SECTOR_THRESHOLD )
    8fa6:	4a0f      	ldr	r2, [pc, #60]	; (8fe4 <CompactSectorIfNeeded+0x50>)
    8fa8:	4293      	cmp	r3, r2
    8faa:	d90a      	bls.n	8fc2 <CompactSectorIfNeeded+0x2e>
        compactSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
        //TODO: check timer to be started or not
        //SYS_StartTimer(&compactSectorTimer);
        }
    }
}
    8fac:	bd10      	pop	{r4, pc}
        if ( !CompactSector() )
    8fae:	4b0e      	ldr	r3, [pc, #56]	; (8fe8 <CompactSectorIfNeeded+0x54>)
    8fb0:	4798      	blx	r3
    8fb2:	2800      	cmp	r0, #0
    8fb4:	d1fa      	bne.n	8fac <CompactSectorIfNeeded+0x18>
            assert(false);
    8fb6:	4b0d      	ldr	r3, [pc, #52]	; (8fec <CompactSectorIfNeeded+0x58>)
    8fb8:	4a0d      	ldr	r2, [pc, #52]	; (8ff0 <CompactSectorIfNeeded+0x5c>)
    8fba:	490e      	ldr	r1, [pc, #56]	; (8ff4 <CompactSectorIfNeeded+0x60>)
    8fbc:	480e      	ldr	r0, [pc, #56]	; (8ff8 <CompactSectorIfNeeded+0x64>)
    8fbe:	4c0f      	ldr	r4, [pc, #60]	; (8ffc <CompactSectorIfNeeded+0x68>)
    8fc0:	47a0      	blx	r4
        if (!SYS_TimerStarted(&compactSectorTimer))
    8fc2:	480f      	ldr	r0, [pc, #60]	; (9000 <CompactSectorIfNeeded+0x6c>)
    8fc4:	4b0f      	ldr	r3, [pc, #60]	; (9004 <CompactSectorIfNeeded+0x70>)
    8fc6:	4798      	blx	r3
    8fc8:	2800      	cmp	r0, #0
    8fca:	d1ef      	bne.n	8fac <CompactSectorIfNeeded+0x18>
        compactSectorTimer.handler = compactSectorTimerFired;
    8fcc:	4b0c      	ldr	r3, [pc, #48]	; (9000 <CompactSectorIfNeeded+0x6c>)
    8fce:	4a0e      	ldr	r2, [pc, #56]	; (9008 <CompactSectorIfNeeded+0x74>)
    8fd0:	611a      	str	r2, [r3, #16]
        compactSectorTimer.timeout = COMPACT_SECTOR_DELAY_MS;
    8fd2:	4a0e      	ldr	r2, [pc, #56]	; (900c <CompactSectorIfNeeded+0x78>)
    8fd4:	605a      	str	r2, [r3, #4]
        compactSectorTimer.interval = COMPACT_SECTOR_DELAY_MS;
    8fd6:	609a      	str	r2, [r3, #8]
        compactSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
    8fd8:	2200      	movs	r2, #0
    8fda:	731a      	strb	r2, [r3, #12]
    8fdc:	e7e6      	b.n	8fac <CompactSectorIfNeeded+0x18>
    8fde:	46c0      	nop			; (mov r8, r8)
    8fe0:	20000476 	.word	0x20000476
    8fe4:	0000080f 	.word	0x0000080f
    8fe8:	00008ce5 	.word	0x00008ce5
    8fec:	00018cbc 	.word	0x00018cbc
    8ff0:	00018e1c 	.word	0x00018e1c
    8ff4:	0000044e 	.word	0x0000044e
    8ff8:	00018d1c 	.word	0x00018d1c
    8ffc:	0001694d 	.word	0x0001694d
    9000:	20000320 	.word	0x20000320
    9004:	0000c3d1 	.word	0x0000c3d1
    9008:	00008f5d 	.word	0x00008f5d
    900c:	00002710 	.word	0x00002710

00009010 <CompactItem>:

static S_Nv_ReturnValue_t CompactItem(void)
{
    9010:	b5f0      	push	{r4, r5, r6, r7, lr}
    9012:	46de      	mov	lr, fp
    9014:	4657      	mov	r7, sl
    9016:	464e      	mov	r6, r9
    9018:	4645      	mov	r5, r8
    901a:	b5e0      	push	{r5, r6, r7, lr}
    901c:	b08b      	sub	sp, #44	; 0x2c
#if defined(ENABLE_NV_COMPACT_LOGGING)
    PRINTA(("CompactItem(id=%X)", s_compactItemId));
#endif

    if ( PowerSupplyTooLow() )
    901e:	4b77      	ldr	r3, [pc, #476]	; (91fc <CompactItem+0x1ec>)
    9020:	4798      	blx	r3
    {
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    9022:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    9024:	2800      	cmp	r0, #0
    9026:	d007      	beq.n	9038 <CompactItem+0x28>
    s_compactItemLength = 0u;

    cache->lastBlock = lastBlock;

    return S_Nv_ReturnValue_Ok;
}
    9028:	0018      	movs	r0, r3
    902a:	b00b      	add	sp, #44	; 0x2c
    902c:	bc3c      	pop	{r2, r3, r4, r5}
    902e:	4690      	mov	r8, r2
    9030:	4699      	mov	r9, r3
    9032:	46a2      	mov	sl, r4
    9034:	46ab      	mov	fp, r5
    9036:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ( (s_compactItemLength == 0u) && ( s_compactItemId == 0u ) )
    9038:	4b71      	ldr	r3, [pc, #452]	; (9200 <CompactItem+0x1f0>)
    903a:	8818      	ldrh	r0, [r3, #0]
    903c:	2800      	cmp	r0, #0
    903e:	d146      	bne.n	90ce <CompactItem+0xbe>
    9040:	4b70      	ldr	r3, [pc, #448]	; (9204 <CompactItem+0x1f4>)
    9042:	881b      	ldrh	r3, [r3, #0]
    9044:	2b00      	cmp	r3, #0
    9046:	d100      	bne.n	904a <CompactItem+0x3a>
    9048:	e0d0      	b.n	91ec <CompactItem+0x1dc>
    Item_t *cache = FindItemCache(s_compactItemId);
    904a:	4b6e      	ldr	r3, [pc, #440]	; (9204 <CompactItem+0x1f4>)
    904c:	8818      	ldrh	r0, [r3, #0]
    904e:	4b6e      	ldr	r3, [pc, #440]	; (9208 <CompactItem+0x1f8>)
    9050:	4798      	blx	r3
    9052:	4683      	mov	fp, r0
    if ( cache == NULL )
    9054:	2800      	cmp	r0, #0
    9056:	d100      	bne.n	905a <CompactItem+0x4a>
    9058:	e0ca      	b.n	91f0 <CompactItem+0x1e0>
    uint16_t blockPointer = cache->lastBlock;
    905a:	7882      	ldrb	r2, [r0, #2]
    905c:	78c3      	ldrb	r3, [r0, #3]
    905e:	021b      	lsls	r3, r3, #8
    9060:	4313      	orrs	r3, r2
    9062:	0019      	movs	r1, r3
    9064:	9303      	str	r3, [sp, #12]
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    9066:	4b69      	ldr	r3, [pc, #420]	; (920c <CompactItem+0x1fc>)
    9068:	7818      	ldrb	r0, [r3, #0]
    906a:	2310      	movs	r3, #16
    906c:	aa06      	add	r2, sp, #24
    906e:	4c68      	ldr	r4, [pc, #416]	; (9210 <CompactItem+0x200>)
    9070:	47a0      	blx	r4
    if (s_compactItemLength == 0)
    9072:	4b63      	ldr	r3, [pc, #396]	; (9200 <CompactItem+0x1f0>)
    9074:	881a      	ldrh	r2, [r3, #0]
    9076:	2a00      	cmp	r2, #0
    9078:	d02e      	beq.n	90d8 <CompactItem+0xc8>
    uint16_t lastBlock = s_sectorHead;
    907a:	4b66      	ldr	r3, [pc, #408]	; (9214 <CompactItem+0x204>)
    907c:	881b      	ldrh	r3, [r3, #0]
    907e:	9305      	str	r3, [sp, #20]
    uint16_t bytesToGather = blockHeader.itemLength;
    9080:	ab06      	add	r3, sp, #24
    9082:	891b      	ldrh	r3, [r3, #8]
        blockHeader.itemLength = s_compactItemLength;
    9084:	a906      	add	r1, sp, #24
    9086:	810a      	strh	r2, [r1, #8]
    9088:	1c19      	adds	r1, r3, #0
    908a:	4293      	cmp	r3, r2
    908c:	d900      	bls.n	9090 <CompactItem+0x80>
    908e:	1c11      	adds	r1, r2, #0
    9090:	b28b      	uxth	r3, r1
    blockHeader.blockOffset = 0u;
    9092:	aa06      	add	r2, sp, #24
    9094:	2100      	movs	r1, #0
    9096:	8091      	strh	r1, [r2, #4]
    blockHeader.blockLength = blockHeader.itemLength;
    9098:	8910      	ldrh	r0, [r2, #8]
    909a:	80d0      	strh	r0, [r2, #6]
    blockHeader.previousBlock = 0x0000u;
    909c:	8151      	strh	r1, [r2, #10]
    blockHeader.writeCount = 0u;
    909e:	8191      	strh	r1, [r2, #12]
    uint16_t currLength = BLOCK_HEADER_SIZE + bytesToGather;
    90a0:	001c      	movs	r4, r3
    90a2:	3410      	adds	r4, #16
    90a4:	b2a4      	uxth	r4, r4
    memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    90a6:	495c      	ldr	r1, [pc, #368]	; (9218 <CompactItem+0x208>)
    90a8:	ca61      	ldmia	r2!, {r0, r5, r6}
    90aa:	c161      	stmia	r1!, {r0, r5, r6}
    90ac:	6812      	ldr	r2, [r2, #0]
    90ae:	600a      	str	r2, [r1, #0]
    if (currLength <= ROW_SIZE)
    90b0:	2280      	movs	r2, #128	; 0x80
    90b2:	0052      	lsls	r2, r2, #1
    90b4:	4294      	cmp	r4, r2
    90b6:	d939      	bls.n	912c <CompactItem+0x11c>
    90b8:	2600      	movs	r6, #0
    90ba:	2310      	movs	r3, #16
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    90bc:	2280      	movs	r2, #128	; 0x80
    90be:	0052      	lsls	r2, r2, #1
    90c0:	4691      	mov	r9, r2
    90c2:	4669      	mov	r1, sp
    90c4:	824a      	strh	r2, [r1, #18]
            if (!GatherData(s_sector, blockPointer, inDataOffset, bytesToGatherAndCommit - dataBlockOffset , (dataBlock + dataBlockOffset)))
    90c6:	4a51      	ldr	r2, [pc, #324]	; (920c <CompactItem+0x1fc>)
    90c8:	4692      	mov	sl, r2
    90ca:	001a      	movs	r2, r3
    90cc:	e088      	b.n	91e0 <CompactItem+0x1d0>
        CompactSectorIfNeeded(s_compactItemLength + BLOCK_HEADER_SIZE);
    90ce:	3010      	adds	r0, #16
    90d0:	b280      	uxth	r0, r0
    90d2:	4b52      	ldr	r3, [pc, #328]	; (921c <CompactItem+0x20c>)
    90d4:	4798      	blx	r3
    90d6:	e7b8      	b.n	904a <CompactItem+0x3a>
        CompactSectorIfNeeded(blockHeader.itemLength + BLOCK_HEADER_SIZE);
    90d8:	ab06      	add	r3, sp, #24
    90da:	8918      	ldrh	r0, [r3, #8]
    90dc:	3010      	adds	r0, #16
    90de:	b280      	uxth	r0, r0
    90e0:	4b4e      	ldr	r3, [pc, #312]	; (921c <CompactItem+0x20c>)
    90e2:	4798      	blx	r3
        cache = FindItemCache(s_compactItemId);
    90e4:	4b47      	ldr	r3, [pc, #284]	; (9204 <CompactItem+0x1f4>)
    90e6:	8818      	ldrh	r0, [r3, #0]
    90e8:	4b47      	ldr	r3, [pc, #284]	; (9208 <CompactItem+0x1f8>)
    90ea:	4798      	blx	r3
    90ec:	4683      	mov	fp, r0
        assert(cache != NULL);
    90ee:	2800      	cmp	r0, #0
    90f0:	d015      	beq.n	911e <CompactItem+0x10e>
        blockPointer = cache->lastBlock;
    90f2:	7882      	ldrb	r2, [r0, #2]
    90f4:	78c3      	ldrb	r3, [r0, #3]
    90f6:	021b      	lsls	r3, r3, #8
    90f8:	4313      	orrs	r3, r2
    90fa:	0019      	movs	r1, r3
    90fc:	9303      	str	r3, [sp, #12]
        D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    90fe:	ac06      	add	r4, sp, #24
    9100:	4b42      	ldr	r3, [pc, #264]	; (920c <CompactItem+0x1fc>)
    9102:	7818      	ldrb	r0, [r3, #0]
    9104:	2310      	movs	r3, #16
    9106:	0022      	movs	r2, r4
    9108:	4d41      	ldr	r5, [pc, #260]	; (9210 <CompactItem+0x200>)
    910a:	47a8      	blx	r5
    uint16_t lastBlock = s_sectorHead;
    910c:	4b41      	ldr	r3, [pc, #260]	; (9214 <CompactItem+0x204>)
    910e:	881b      	ldrh	r3, [r3, #0]
    9110:	9305      	str	r3, [sp, #20]
    uint16_t bytesToGather = blockHeader.itemLength;
    9112:	8923      	ldrh	r3, [r4, #8]
    if ( s_compactItemLength != 0u )
    9114:	4a3a      	ldr	r2, [pc, #232]	; (9200 <CompactItem+0x1f0>)
    9116:	8812      	ldrh	r2, [r2, #0]
    9118:	2a00      	cmp	r2, #0
    911a:	d0ba      	beq.n	9092 <CompactItem+0x82>
    911c:	e7b2      	b.n	9084 <CompactItem+0x74>
        assert(cache != NULL);
    911e:	4b40      	ldr	r3, [pc, #256]	; (9220 <CompactItem+0x210>)
    9120:	4a40      	ldr	r2, [pc, #256]	; (9224 <CompactItem+0x214>)
    9122:	2191      	movs	r1, #145	; 0x91
    9124:	00c9      	lsls	r1, r1, #3
    9126:	4840      	ldr	r0, [pc, #256]	; (9228 <CompactItem+0x218>)
    9128:	4c40      	ldr	r4, [pc, #256]	; (922c <CompactItem+0x21c>)
    912a:	47a0      	blx	r4
        if (!GatherData(s_sector, blockPointer, 0u, bytesToGather, (dataBlock + BLOCK_HEADER_SIZE )))
    912c:	4a37      	ldr	r2, [pc, #220]	; (920c <CompactItem+0x1fc>)
    912e:	7810      	ldrb	r0, [r2, #0]
    9130:	4a39      	ldr	r2, [pc, #228]	; (9218 <CompactItem+0x208>)
    9132:	3210      	adds	r2, #16
    9134:	9200      	str	r2, [sp, #0]
    9136:	2200      	movs	r2, #0
    9138:	9903      	ldr	r1, [sp, #12]
    913a:	4c3d      	ldr	r4, [pc, #244]	; (9230 <CompactItem+0x220>)
    913c:	47a0      	blx	r4
            return S_Nv_ReturnValue_Failure;
    913e:	2301      	movs	r3, #1
        if (!GatherData(s_sector, blockPointer, 0u, bytesToGather, (dataBlock + BLOCK_HEADER_SIZE )))
    9140:	2800      	cmp	r0, #0
    9142:	d100      	bne.n	9146 <CompactItem+0x136>
    9144:	e770      	b.n	9028 <CompactItem+0x18>
        memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    9146:	4934      	ldr	r1, [pc, #208]	; (9218 <CompactItem+0x208>)
    9148:	ab06      	add	r3, sp, #24
    914a:	000a      	movs	r2, r1
    914c:	0018      	movs	r0, r3
    914e:	c870      	ldmia	r0!, {r4, r5, r6}
    9150:	c270      	stmia	r2!, {r4, r5, r6}
    9152:	6800      	ldr	r0, [r0, #0]
    9154:	6010      	str	r0, [r2, #0]
        if ( !WriteAndCheck(s_sectorHead, dataBlock, blockHeader.blockLength + BLOCK_HEADER_SIZE) )
    9156:	88da      	ldrh	r2, [r3, #6]
    9158:	3210      	adds	r2, #16
    915a:	b292      	uxth	r2, r2
    915c:	4b2d      	ldr	r3, [pc, #180]	; (9214 <CompactItem+0x204>)
    915e:	8818      	ldrh	r0, [r3, #0]
    9160:	4b34      	ldr	r3, [pc, #208]	; (9234 <CompactItem+0x224>)
    9162:	4798      	blx	r3
            return false;
    9164:	2300      	movs	r3, #0
        if ( !WriteAndCheck(s_sectorHead, dataBlock, blockHeader.blockLength + BLOCK_HEADER_SIZE) )
    9166:	2800      	cmp	r0, #0
    9168:	d100      	bne.n	916c <CompactItem+0x15c>
    916a:	e75d      	b.n	9028 <CompactItem+0x18>
        UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), ITEM_64BYTE_ALIGNMENT);
    916c:	ab06      	add	r3, sp, #24
    916e:	88d8      	ldrh	r0, [r3, #6]
    9170:	3010      	adds	r0, #16
    9172:	b280      	uxth	r0, r0
    9174:	2102      	movs	r1, #2
    9176:	4b30      	ldr	r3, [pc, #192]	; (9238 <CompactItem+0x228>)
    9178:	4798      	blx	r3
    s_compactItemId = 0u;
    917a:	2300      	movs	r3, #0
    917c:	4a21      	ldr	r2, [pc, #132]	; (9204 <CompactItem+0x1f4>)
    917e:	8013      	strh	r3, [r2, #0]
    s_compactItemLength = 0u;
    9180:	4a1f      	ldr	r2, [pc, #124]	; (9200 <CompactItem+0x1f0>)
    9182:	8013      	strh	r3, [r2, #0]
    cache->lastBlock = lastBlock;
    9184:	465b      	mov	r3, fp
    9186:	9905      	ldr	r1, [sp, #20]
    9188:	7099      	strb	r1, [r3, #2]
    918a:	0a0b      	lsrs	r3, r1, #8
    918c:	465a      	mov	r2, fp
    918e:	70d3      	strb	r3, [r2, #3]
    return S_Nv_ReturnValue_Ok;
    9190:	2300      	movs	r3, #0
    9192:	e749      	b.n	9028 <CompactItem+0x18>
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    9194:	b2ad      	uxth	r5, r5
            if (!GatherData(s_sector, blockPointer, inDataOffset, bytesToGatherAndCommit - dataBlockOffset , (dataBlock + dataBlockOffset)))
    9196:	1aaf      	subs	r7, r5, r2
    9198:	b2bb      	uxth	r3, r7
    919a:	0019      	movs	r1, r3
    919c:	4653      	mov	r3, sl
    919e:	7818      	ldrb	r0, [r3, #0]
    91a0:	4b1d      	ldr	r3, [pc, #116]	; (9218 <CompactItem+0x208>)
    91a2:	189b      	adds	r3, r3, r2
    91a4:	9300      	str	r3, [sp, #0]
    91a6:	9102      	str	r1, [sp, #8]
    91a8:	000b      	movs	r3, r1
    91aa:	0032      	movs	r2, r6
    91ac:	9903      	ldr	r1, [sp, #12]
    91ae:	4f20      	ldr	r7, [pc, #128]	; (9230 <CompactItem+0x220>)
    91b0:	47b8      	blx	r7
    91b2:	2800      	cmp	r0, #0
    91b4:	d01e      	beq.n	91f4 <CompactItem+0x1e4>
            if ( !WriteAndCheck(s_sectorHead, dataBlock, bytesToGatherAndCommit) )
    91b6:	4b17      	ldr	r3, [pc, #92]	; (9214 <CompactItem+0x204>)
    91b8:	8818      	ldrh	r0, [r3, #0]
    91ba:	002a      	movs	r2, r5
    91bc:	4916      	ldr	r1, [pc, #88]	; (9218 <CompactItem+0x208>)
    91be:	4b1d      	ldr	r3, [pc, #116]	; (9234 <CompactItem+0x224>)
    91c0:	4798      	blx	r3
    91c2:	2800      	cmp	r0, #0
    91c4:	d018      	beq.n	91f8 <CompactItem+0x1e8>
            UpdateSectorHead(bytesToGatherAndCommit, ITEM_64BYTE_ALIGNMENT);
    91c6:	2102      	movs	r1, #2
    91c8:	0028      	movs	r0, r5
    91ca:	4b1b      	ldr	r3, [pc, #108]	; (9238 <CompactItem+0x228>)
    91cc:	4798      	blx	r3
            currLength -= bytesToGatherAndCommit;
    91ce:	1b64      	subs	r4, r4, r5
    91d0:	b2a4      	uxth	r4, r4
            inDataOffset += (bytesToGatherAndCommit - dataBlockOffset);
    91d2:	9902      	ldr	r1, [sp, #8]
    91d4:	468c      	mov	ip, r1
    91d6:	4466      	add	r6, ip
    91d8:	b2b6      	uxth	r6, r6
            dataBlockOffset = 0;
    91da:	2200      	movs	r2, #0
        } while(currLength > 0);
    91dc:	2c00      	cmp	r4, #0
    91de:	d0cc      	beq.n	917a <CompactItem+0x16a>
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    91e0:	1c25      	adds	r5, r4, #0
    91e2:	454c      	cmp	r4, r9
    91e4:	d9d6      	bls.n	9194 <CompactItem+0x184>
    91e6:	466b      	mov	r3, sp
    91e8:	8a5d      	ldrh	r5, [r3, #18]
    91ea:	e7d3      	b.n	9194 <CompactItem+0x184>
        return S_Nv_ReturnValue_Ok;
    91ec:	2300      	movs	r3, #0
    91ee:	e71b      	b.n	9028 <CompactItem+0x18>
        return S_Nv_ReturnValue_Ok;
    91f0:	2300      	movs	r3, #0
    91f2:	e719      	b.n	9028 <CompactItem+0x18>
                return S_Nv_ReturnValue_Failure;
    91f4:	2301      	movs	r3, #1
    91f6:	e717      	b.n	9028 <CompactItem+0x18>
                return false;
    91f8:	2300      	movs	r3, #0
    91fa:	e715      	b.n	9028 <CompactItem+0x18>
    91fc:	00008895 	.word	0x00008895
    9200:	2000044e 	.word	0x2000044e
    9204:	2000044c 	.word	0x2000044c
    9208:	00008a8d 	.word	0x00008a8d
    920c:	20000474 	.word	0x20000474
    9210:	00008645 	.word	0x00008645
    9214:	20000476 	.word	0x20000476
    9218:	20000338 	.word	0x20000338
    921c:	00008f95 	.word	0x00008f95
    9220:	00018cac 	.word	0x00018cac
    9224:	00018e34 	.word	0x00018e34
    9228:	00018d1c 	.word	0x00018d1c
    922c:	0001694d 	.word	0x0001694d
    9230:	0000892d 	.word	0x0000892d
    9234:	00008bb1 	.word	0x00008bb1
    9238:	000088b1 	.word	0x000088b1

0000923c <compactItemTimerFired>:
{
    923c:	b510      	push	{r4, lr}
    (void)CompactItem();
    923e:	4b01      	ldr	r3, [pc, #4]	; (9244 <compactItemTimerFired+0x8>)
    9240:	4798      	blx	r3
}
    9242:	bd10      	pop	{r4, pc}
    9244:	00009011 	.word	0x00009011

00009248 <WriteDataBlockAndHeader>:
{
    9248:	b5f0      	push	{r4, r5, r6, r7, lr}
    924a:	46de      	mov	lr, fp
    924c:	4657      	mov	r7, sl
    924e:	464e      	mov	r6, r9
    9250:	4645      	mov	r5, r8
    9252:	b5e0      	push	{r5, r6, r7, lr}
    9254:	b083      	sub	sp, #12
    9256:	0004      	movs	r4, r0
    9258:	468a      	mov	sl, r1
    memset(dataBlock, 0xFF, sizeof(dataBlock));
    925a:	4d46      	ldr	r5, [pc, #280]	; (9374 <WriteDataBlockAndHeader+0x12c>)
    925c:	2280      	movs	r2, #128	; 0x80
    925e:	0052      	lsls	r2, r2, #1
    9260:	21ff      	movs	r1, #255	; 0xff
    9262:	0028      	movs	r0, r5
    9264:	4b44      	ldr	r3, [pc, #272]	; (9378 <WriteDataBlockAndHeader+0x130>)
    9266:	4798      	blx	r3
    pBlockHeader->dataCrc = ComputeCrc(pData, pBlockHeader->blockLength, 0xFFFF);
    9268:	4e44      	ldr	r6, [pc, #272]	; (937c <WriteDataBlockAndHeader+0x134>)
    926a:	79a3      	ldrb	r3, [r4, #6]
    926c:	79e1      	ldrb	r1, [r4, #7]
    926e:	0209      	lsls	r1, r1, #8
    9270:	4319      	orrs	r1, r3
    9272:	0032      	movs	r2, r6
    9274:	4650      	mov	r0, sl
    9276:	4f42      	ldr	r7, [pc, #264]	; (9380 <WriteDataBlockAndHeader+0x138>)
    9278:	47b8      	blx	r7
    927a:	7020      	strb	r0, [r4, #0]
    927c:	0a00      	lsrs	r0, r0, #8
    927e:	7060      	strb	r0, [r4, #1]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    9280:	0032      	movs	r2, r6
    9282:	210e      	movs	r1, #14
    9284:	0020      	movs	r0, r4
    9286:	47b8      	blx	r7
    pBlockHeader->headerCrc = ComputeHeaderCrc(pBlockHeader);
    9288:	73a0      	strb	r0, [r4, #14]
    928a:	0a00      	lsrs	r0, r0, #8
    928c:	73e0      	strb	r0, [r4, #15]
    memcpy(dataBlock, pBlockHeader, BLOCK_HEADER_SIZE);
    928e:	2210      	movs	r2, #16
    9290:	0021      	movs	r1, r4
    9292:	0028      	movs	r0, r5
    9294:	4b3b      	ldr	r3, [pc, #236]	; (9384 <WriteDataBlockAndHeader+0x13c>)
    9296:	4798      	blx	r3
    currentLength = pBlockHeader->blockLength + BLOCK_HEADER_SIZE;
    9298:	79a3      	ldrb	r3, [r4, #6]
    929a:	79e2      	ldrb	r2, [r4, #7]
    929c:	0212      	lsls	r2, r2, #8
    929e:	431a      	orrs	r2, r3
    92a0:	0015      	movs	r5, r2
    92a2:	3510      	adds	r5, #16
    92a4:	b2ad      	uxth	r5, r5
    if (pData != NULL )
    92a6:	4653      	mov	r3, sl
    92a8:	2b00      	cmp	r3, #0
    92aa:	d012      	beq.n	92d2 <WriteDataBlockAndHeader+0x8a>
        if(currentLength <= ROW_SIZE)
    92ac:	2380      	movs	r3, #128	; 0x80
    92ae:	005b      	lsls	r3, r3, #1
    92b0:	429d      	cmp	r5, r3
    92b2:	d909      	bls.n	92c8 <WriteDataBlockAndHeader+0x80>
    92b4:	2600      	movs	r6, #0
    92b6:	2710      	movs	r7, #16
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    92b8:	2380      	movs	r3, #128	; 0x80
    92ba:	005b      	lsls	r3, r3, #1
    92bc:	469b      	mov	fp, r3
    92be:	466a      	mov	r2, sp
    92c0:	80d3      	strh	r3, [r2, #6]
                memcpy(dataBlock + dataBlockOffset, pData + inDataOffset, bytesToCommit - dataBlockOffset);
    92c2:	4b2c      	ldr	r3, [pc, #176]	; (9374 <WriteDataBlockAndHeader+0x12c>)
    92c4:	4699      	mov	r9, r3
    92c6:	e045      	b.n	9354 <WriteDataBlockAndHeader+0x10c>
            memcpy(dataBlock + BLOCK_HEADER_SIZE , pData, pBlockHeader->blockLength);
    92c8:	4651      	mov	r1, sl
    92ca:	482a      	ldr	r0, [pc, #168]	; (9374 <WriteDataBlockAndHeader+0x12c>)
    92cc:	3010      	adds	r0, #16
    92ce:	4b2d      	ldr	r3, [pc, #180]	; (9384 <WriteDataBlockAndHeader+0x13c>)
    92d0:	4798      	blx	r3
    if ( !WriteAndCheck(s_sectorHead, dataBlock, MIN((BLOCK_HEADER_SIZE + pBlockHeader->blockLength), ROW_SIZE)) )
    92d2:	79a3      	ldrb	r3, [r4, #6]
    92d4:	79e2      	ldrb	r2, [r4, #7]
    92d6:	0212      	lsls	r2, r2, #8
    92d8:	431a      	orrs	r2, r3
    92da:	3210      	adds	r2, #16
    92dc:	2380      	movs	r3, #128	; 0x80
    92de:	005b      	lsls	r3, r3, #1
    92e0:	429a      	cmp	r2, r3
    92e2:	dd00      	ble.n	92e6 <WriteDataBlockAndHeader+0x9e>
    92e4:	001a      	movs	r2, r3
    92e6:	b292      	uxth	r2, r2
    92e8:	4b27      	ldr	r3, [pc, #156]	; (9388 <WriteDataBlockAndHeader+0x140>)
    92ea:	8818      	ldrh	r0, [r3, #0]
    92ec:	4921      	ldr	r1, [pc, #132]	; (9374 <WriteDataBlockAndHeader+0x12c>)
    92ee:	4b27      	ldr	r3, [pc, #156]	; (938c <WriteDataBlockAndHeader+0x144>)
    92f0:	4798      	blx	r3
    92f2:	4680      	mov	r8, r0
    92f4:	2800      	cmp	r0, #0
    92f6:	d033      	beq.n	9360 <WriteDataBlockAndHeader+0x118>
    UpdateSectorHead((pBlockHeader->blockLength + BLOCK_HEADER_SIZE), ITEM_64BYTE_ALIGNMENT );
    92f8:	79a3      	ldrb	r3, [r4, #6]
    92fa:	79e0      	ldrb	r0, [r4, #7]
    92fc:	0200      	lsls	r0, r0, #8
    92fe:	4318      	orrs	r0, r3
    9300:	3010      	adds	r0, #16
    9302:	b280      	uxth	r0, r0
    9304:	2102      	movs	r1, #2
    9306:	4b22      	ldr	r3, [pc, #136]	; (9390 <WriteDataBlockAndHeader+0x148>)
    9308:	4798      	blx	r3
}
    930a:	4640      	mov	r0, r8
    930c:	b003      	add	sp, #12
    930e:	bc3c      	pop	{r2, r3, r4, r5}
    9310:	4690      	mov	r8, r2
    9312:	4699      	mov	r9, r3
    9314:	46a2      	mov	sl, r4
    9316:	46ab      	mov	fp, r5
    9318:	bdf0      	pop	{r4, r5, r6, r7, pc}
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    931a:	b2a4      	uxth	r4, r4
                memcpy(dataBlock + dataBlockOffset, pData + inDataOffset, bytesToCommit - dataBlockOffset);
    931c:	464b      	mov	r3, r9
    931e:	19d8      	adds	r0, r3, r7
    9320:	1be2      	subs	r2, r4, r7
    9322:	4653      	mov	r3, sl
    9324:	1999      	adds	r1, r3, r6
    9326:	4b17      	ldr	r3, [pc, #92]	; (9384 <WriteDataBlockAndHeader+0x13c>)
    9328:	4798      	blx	r3
                if ( !WriteAndCheck(s_sectorHead, dataBlock, bytesToCommit))
    932a:	4b17      	ldr	r3, [pc, #92]	; (9388 <WriteDataBlockAndHeader+0x140>)
    932c:	8818      	ldrh	r0, [r3, #0]
    932e:	0022      	movs	r2, r4
    9330:	4649      	mov	r1, r9
    9332:	4b16      	ldr	r3, [pc, #88]	; (938c <WriteDataBlockAndHeader+0x144>)
    9334:	4798      	blx	r3
    9336:	4680      	mov	r8, r0
    9338:	2800      	cmp	r0, #0
    933a:	d0e6      	beq.n	930a <WriteDataBlockAndHeader+0xc2>
                UpdateSectorHead(bytesToCommit, ITEM_64BYTE_ALIGNMENT);
    933c:	2102      	movs	r1, #2
    933e:	0020      	movs	r0, r4
    9340:	4b13      	ldr	r3, [pc, #76]	; (9390 <WriteDataBlockAndHeader+0x148>)
    9342:	4798      	blx	r3
                currentLength -= bytesToCommit;
    9344:	1b2d      	subs	r5, r5, r4
    9346:	b2ad      	uxth	r5, r5
                inDataOffset += (bytesToCommit - dataBlockOffset);
    9348:	1be4      	subs	r4, r4, r7
    934a:	1936      	adds	r6, r6, r4
    934c:	b2b6      	uxth	r6, r6
                dataBlockOffset = 0;
    934e:	2700      	movs	r7, #0
            } while(currentLength > 0);
    9350:	2d00      	cmp	r5, #0
    9352:	d0da      	beq.n	930a <WriteDataBlockAndHeader+0xc2>
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    9354:	1c2c      	adds	r4, r5, #0
    9356:	455d      	cmp	r5, fp
    9358:	d9df      	bls.n	931a <WriteDataBlockAndHeader+0xd2>
    935a:	466b      	mov	r3, sp
    935c:	88dc      	ldrh	r4, [r3, #6]
    935e:	e7dc      	b.n	931a <WriteDataBlockAndHeader+0xd2>
        UpdateSectorHead((pBlockHeader->blockLength + BLOCK_HEADER_SIZE), ITEM_64BYTE_ALIGNMENT);
    9360:	79a3      	ldrb	r3, [r4, #6]
    9362:	79e0      	ldrb	r0, [r4, #7]
    9364:	0200      	lsls	r0, r0, #8
    9366:	4318      	orrs	r0, r3
    9368:	3010      	adds	r0, #16
    936a:	b280      	uxth	r0, r0
    936c:	2102      	movs	r1, #2
    936e:	4b08      	ldr	r3, [pc, #32]	; (9390 <WriteDataBlockAndHeader+0x148>)
    9370:	4798      	blx	r3
        return false;
    9372:	e7ca      	b.n	930a <WriteDataBlockAndHeader+0xc2>
    9374:	20000338 	.word	0x20000338
    9378:	00016a21 	.word	0x00016a21
    937c:	0000ffff 	.word	0x0000ffff
    9380:	000088ed 	.word	0x000088ed
    9384:	00016a0f 	.word	0x00016a0f
    9388:	20000476 	.word	0x20000476
    938c:	00008bb1 	.word	0x00008bb1
    9390:	000088b1 	.word	0x000088b1

00009394 <S_Nv_Write_Impl>:
#if defined(S_XNV_LOGGING)
static S_Nv_ReturnValue_t S_Nv_Write_Original(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#else
S_Nv_ReturnValue_t S_Nv_Write_Impl(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#endif
{
    9394:	b5f0      	push	{r4, r5, r6, r7, lr}
    9396:	46ce      	mov	lr, r9
    9398:	4647      	mov	r7, r8
    939a:	b580      	push	{r7, lr}
    939c:	b087      	sub	sp, #28
    939e:	0004      	movs	r4, r0
    93a0:	9101      	str	r1, [sp, #4]
    93a2:	0015      	movs	r5, r2
    93a4:	001f      	movs	r7, r3
    assert((id != 0u) && (pData != NULL));
    93a6:	2800      	cmp	r0, #0
    93a8:	d00c      	beq.n	93c4 <S_Nv_Write_Impl+0x30>
    93aa:	2b00      	cmp	r3, #0
    93ac:	d00a      	beq.n	93c4 <S_Nv_Write_Impl+0x30>

    if ( PowerSupplyTooLow() )
    93ae:	4b35      	ldr	r3, [pc, #212]	; (9484 <S_Nv_Write_Impl+0xf0>)
    93b0:	4798      	blx	r3
    {
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    93b2:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    93b4:	2800      	cmp	r0, #0
    93b6:	d00b      	beq.n	93d0 <S_Nv_Write_Impl+0x3c>
        //SYS_StartTimer(&compactItemTimer);
        }
    }

    return S_Nv_ReturnValue_Ok;
}
    93b8:	0018      	movs	r0, r3
    93ba:	b007      	add	sp, #28
    93bc:	bc0c      	pop	{r2, r3}
    93be:	4690      	mov	r8, r2
    93c0:	4699      	mov	r9, r3
    93c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((id != 0u) && (pData != NULL));
    93c4:	4b30      	ldr	r3, [pc, #192]	; (9488 <S_Nv_Write_Impl+0xf4>)
    93c6:	4a31      	ldr	r2, [pc, #196]	; (948c <S_Nv_Write_Impl+0xf8>)
    93c8:	4931      	ldr	r1, [pc, #196]	; (9490 <S_Nv_Write_Impl+0xfc>)
    93ca:	4832      	ldr	r0, [pc, #200]	; (9494 <S_Nv_Write_Impl+0x100>)
    93cc:	4c32      	ldr	r4, [pc, #200]	; (9498 <S_Nv_Write_Impl+0x104>)
    93ce:	47a0      	blx	r4
    CompactSectorIfNeeded(BLOCK_HEADER_SIZE + dataLength);
    93d0:	0028      	movs	r0, r5
    93d2:	3010      	adds	r0, #16
    93d4:	b280      	uxth	r0, r0
    93d6:	4b31      	ldr	r3, [pc, #196]	; (949c <S_Nv_Write_Impl+0x108>)
    93d8:	4798      	blx	r3
    Item_t *cache = FindItemCache(id);
    93da:	0020      	movs	r0, r4
    93dc:	4b30      	ldr	r3, [pc, #192]	; (94a0 <S_Nv_Write_Impl+0x10c>)
    93de:	4798      	blx	r3
    93e0:	0006      	movs	r6, r0
        return S_Nv_ReturnValue_DoesNotExist;
    93e2:	2303      	movs	r3, #3
    if ( cache == NULL )
    93e4:	2800      	cmp	r0, #0
    93e6:	d0e7      	beq.n	93b8 <S_Nv_Write_Impl+0x24>
    uint16_t blockPointer = cache->lastBlock;
    93e8:	7883      	ldrb	r3, [r0, #2]
    93ea:	78c4      	ldrb	r4, [r0, #3]
    93ec:	0224      	lsls	r4, r4, #8
    93ee:	431c      	orrs	r4, r3
    93f0:	46a0      	mov	r8, r4
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    93f2:	4b2c      	ldr	r3, [pc, #176]	; (94a4 <S_Nv_Write_Impl+0x110>)
    93f4:	7818      	ldrb	r0, [r3, #0]
    93f6:	2310      	movs	r3, #16
    93f8:	aa02      	add	r2, sp, #8
    93fa:	0021      	movs	r1, r4
    93fc:	4c2a      	ldr	r4, [pc, #168]	; (94a8 <S_Nv_Write_Impl+0x114>)
    93fe:	47a0      	blx	r4
    if ( ((uint32_t) offset + (uint32_t) dataLength) > (uint32_t) blockHeader.itemLength )
    9400:	ab02      	add	r3, sp, #8
    9402:	8919      	ldrh	r1, [r3, #8]
    9404:	9b01      	ldr	r3, [sp, #4]
    9406:	195a      	adds	r2, r3, r5
        return S_Nv_ReturnValue_BeyondEnd;
    9408:	2304      	movs	r3, #4
    if ( ((uint32_t) offset + (uint32_t) dataLength) > (uint32_t) blockHeader.itemLength )
    940a:	428a      	cmp	r2, r1
    940c:	d8d4      	bhi.n	93b8 <S_Nv_Write_Impl+0x24>
    blockHeader.blockOffset = offset;
    940e:	ab02      	add	r3, sp, #8
    9410:	466a      	mov	r2, sp
    9412:	8892      	ldrh	r2, [r2, #4]
    9414:	809a      	strh	r2, [r3, #4]
    blockHeader.blockLength = dataLength;
    9416:	80dd      	strh	r5, [r3, #6]
    blockHeader.previousBlock = blockPointer;
    9418:	4642      	mov	r2, r8
    941a:	815a      	strh	r2, [r3, #10]
    if ( blockHeader.blockLength == blockHeader.itemLength )
    941c:	428d      	cmp	r5, r1
    941e:	d02c      	beq.n	947a <S_Nv_Write_Impl+0xe6>
        blockHeader.writeCount++;
    9420:	ab02      	add	r3, sp, #8
    9422:	899b      	ldrh	r3, [r3, #12]
    9424:	3301      	adds	r3, #1
    9426:	aa02      	add	r2, sp, #8
    9428:	8193      	strh	r3, [r2, #12]
    uint16_t newBlockPointer = s_sectorHead;
    942a:	4b20      	ldr	r3, [pc, #128]	; (94ac <S_Nv_Write_Impl+0x118>)
    942c:	881c      	ldrh	r4, [r3, #0]
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pData) )
    942e:	0039      	movs	r1, r7
    9430:	a802      	add	r0, sp, #8
    9432:	4b1f      	ldr	r3, [pc, #124]	; (94b0 <S_Nv_Write_Impl+0x11c>)
    9434:	4798      	blx	r3
        return S_Nv_ReturnValue_Failure;
    9436:	2301      	movs	r3, #1
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pData) )
    9438:	2800      	cmp	r0, #0
    943a:	d0bd      	beq.n	93b8 <S_Nv_Write_Impl+0x24>
    cache->lastBlock = newBlockPointer;
    943c:	70b4      	strb	r4, [r6, #2]
    943e:	0a24      	lsrs	r4, r4, #8
    9440:	70f4      	strb	r4, [r6, #3]
    if ( blockHeader.writeCount > COMPACT_ITEM_THRESHOLD )
    9442:	ab02      	add	r3, sp, #8
    9444:	899a      	ldrh	r2, [r3, #12]
    return S_Nv_ReturnValue_Ok;
    9446:	2300      	movs	r3, #0
    if ( blockHeader.writeCount > COMPACT_ITEM_THRESHOLD )
    9448:	2a64      	cmp	r2, #100	; 0x64
    944a:	d9b5      	bls.n	93b8 <S_Nv_Write_Impl+0x24>
        s_compactItemId = blockHeader.id;
    944c:	ab02      	add	r3, sp, #8
    944e:	885a      	ldrh	r2, [r3, #2]
    9450:	4b18      	ldr	r3, [pc, #96]	; (94b4 <S_Nv_Write_Impl+0x120>)
    9452:	801a      	strh	r2, [r3, #0]
        s_compactItemLength = 0u;           // no need to resize this item here
    9454:	2200      	movs	r2, #0
    9456:	4b18      	ldr	r3, [pc, #96]	; (94b8 <S_Nv_Write_Impl+0x124>)
    9458:	801a      	strh	r2, [r3, #0]
        if (!SYS_TimerStarted(&compactItemTimer))
    945a:	4818      	ldr	r0, [pc, #96]	; (94bc <S_Nv_Write_Impl+0x128>)
    945c:	4b18      	ldr	r3, [pc, #96]	; (94c0 <S_Nv_Write_Impl+0x12c>)
    945e:	4798      	blx	r3
    return S_Nv_ReturnValue_Ok;
    9460:	2300      	movs	r3, #0
        if (!SYS_TimerStarted(&compactItemTimer))
    9462:	2800      	cmp	r0, #0
    9464:	d1a8      	bne.n	93b8 <S_Nv_Write_Impl+0x24>
        compactItemTimer.handler = compactItemTimerFired;
    9466:	4b15      	ldr	r3, [pc, #84]	; (94bc <S_Nv_Write_Impl+0x128>)
    9468:	4a16      	ldr	r2, [pc, #88]	; (94c4 <S_Nv_Write_Impl+0x130>)
    946a:	611a      	str	r2, [r3, #16]
        compactItemTimer.timeout = COMPACT_ITEM_DELAY_MS;
    946c:	4a16      	ldr	r2, [pc, #88]	; (94c8 <S_Nv_Write_Impl+0x134>)
    946e:	605a      	str	r2, [r3, #4]
        compactItemTimer.interval = COMPACT_ITEM_DELAY_MS;
    9470:	609a      	str	r2, [r3, #8]
        compactItemTimer.mode = SYS_TIMER_INTERVAL_MODE;
    9472:	2200      	movs	r2, #0
    9474:	731a      	strb	r2, [r3, #12]
    return S_Nv_ReturnValue_Ok;
    9476:	2300      	movs	r3, #0
    9478:	e79e      	b.n	93b8 <S_Nv_Write_Impl+0x24>
        blockHeader.writeCount = 0u;
    947a:	2300      	movs	r3, #0
    947c:	aa02      	add	r2, sp, #8
    947e:	8193      	strh	r3, [r2, #12]
    9480:	e7d3      	b.n	942a <S_Nv_Write_Impl+0x96>
    9482:	46c0      	nop			; (mov r8, r8)
    9484:	00008895 	.word	0x00008895
    9488:	00018db4 	.word	0x00018db4
    948c:	00018e54 	.word	0x00018e54
    9490:	00000596 	.word	0x00000596
    9494:	00018d1c 	.word	0x00018d1c
    9498:	0001694d 	.word	0x0001694d
    949c:	00008f95 	.word	0x00008f95
    94a0:	00008a8d 	.word	0x00008a8d
    94a4:	20000474 	.word	0x20000474
    94a8:	00008645 	.word	0x00008645
    94ac:	20000476 	.word	0x20000476
    94b0:	00009249 	.word	0x00009249
    94b4:	2000044c 	.word	0x2000044c
    94b8:	2000044e 	.word	0x2000044e
    94bc:	2000030c 	.word	0x2000030c
    94c0:	0000c3d1 	.word	0x0000c3d1
    94c4:	0000923d 	.word	0x0000923d
    94c8:	00000bb8 	.word	0x00000bb8

000094cc <S_Nv_Read_Impl>:
#if defined(S_XNV_LOGGING)
static S_Nv_ReturnValue_t S_Nv_Read_Original(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#else
S_Nv_ReturnValue_t S_Nv_Read_Impl(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#endif
{
    94cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    94ce:	b083      	sub	sp, #12
    94d0:	000c      	movs	r4, r1
    94d2:	0015      	movs	r5, r2
    94d4:	001e      	movs	r6, r3
    assert((id != 0u) && (pData != NULL));
    94d6:	2800      	cmp	r0, #0
    94d8:	d009      	beq.n	94ee <S_Nv_Read_Impl+0x22>
    94da:	2b00      	cmp	r3, #0
    94dc:	d007      	beq.n	94ee <S_Nv_Read_Impl+0x22>

    // get the pointer to the last written block for the item
    uint16_t lastBlockPointer = FindItem(id);
    94de:	4b10      	ldr	r3, [pc, #64]	; (9520 <S_Nv_Read_Impl+0x54>)
    94e0:	4798      	blx	r3
    if ( lastBlockPointer == 0x0000u )
    {
        // item does not exist
        return S_Nv_ReturnValue_DoesNotExist;
    94e2:	2303      	movs	r3, #3
    if ( lastBlockPointer == 0x0000u )
    94e4:	2800      	cmp	r0, #0
    94e6:	d108      	bne.n	94fa <S_Nv_Read_Impl+0x2e>
    {
        return S_Nv_ReturnValue_BeyondEnd;
    }

    return S_Nv_ReturnValue_Ok;
}
    94e8:	0018      	movs	r0, r3
    94ea:	b003      	add	sp, #12
    94ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((id != 0u) && (pData != NULL));
    94ee:	4b0d      	ldr	r3, [pc, #52]	; (9524 <S_Nv_Read_Impl+0x58>)
    94f0:	4a0d      	ldr	r2, [pc, #52]	; (9528 <S_Nv_Read_Impl+0x5c>)
    94f2:	490e      	ldr	r1, [pc, #56]	; (952c <S_Nv_Read_Impl+0x60>)
    94f4:	480e      	ldr	r0, [pc, #56]	; (9530 <S_Nv_Read_Impl+0x64>)
    94f6:	4c0f      	ldr	r4, [pc, #60]	; (9534 <S_Nv_Read_Impl+0x68>)
    94f8:	47a0      	blx	r4
    if ( ((uint32_t) offset + (uint32_t) dataLength) >= 0x10000uL )
    94fa:	1962      	adds	r2, r4, r5
    94fc:	490e      	ldr	r1, [pc, #56]	; (9538 <S_Nv_Read_Impl+0x6c>)
        return S_Nv_ReturnValue_BeyondEnd;
    94fe:	3301      	adds	r3, #1
    if ( ((uint32_t) offset + (uint32_t) dataLength) >= 0x10000uL )
    9500:	428a      	cmp	r2, r1
    9502:	d8f1      	bhi.n	94e8 <S_Nv_Read_Impl+0x1c>
    if ( !GatherData(s_sector, lastBlockPointer, offset, dataLength, pData ))
    9504:	4b0d      	ldr	r3, [pc, #52]	; (953c <S_Nv_Read_Impl+0x70>)
    9506:	781f      	ldrb	r7, [r3, #0]
    9508:	9600      	str	r6, [sp, #0]
    950a:	002b      	movs	r3, r5
    950c:	0022      	movs	r2, r4
    950e:	0001      	movs	r1, r0
    9510:	0038      	movs	r0, r7
    9512:	4c0b      	ldr	r4, [pc, #44]	; (9540 <S_Nv_Read_Impl+0x74>)
    9514:	47a0      	blx	r4
    return S_Nv_ReturnValue_Ok;
    9516:	4243      	negs	r3, r0
    9518:	4143      	adcs	r3, r0
    951a:	009b      	lsls	r3, r3, #2
    951c:	e7e4      	b.n	94e8 <S_Nv_Read_Impl+0x1c>
    951e:	46c0      	nop			; (mov r8, r8)
    9520:	00008b01 	.word	0x00008b01
    9524:	00018db4 	.word	0x00018db4
    9528:	00018e64 	.word	0x00018e64
    952c:	000005ee 	.word	0x000005ee
    9530:	00018d1c 	.word	0x00018d1c
    9534:	0001694d 	.word	0x0001694d
    9538:	0000ffff 	.word	0x0000ffff
    953c:	20000474 	.word	0x20000474
    9540:	0000892d 	.word	0x0000892d

00009544 <S_Nv_ItemLength_Impl>:

/** Interface function, see \ref S_Nv_ItemLength. */
uint16_t S_Nv_ItemLength_Impl(S_Nv_ItemId_t id)
{
    9544:	b510      	push	{r4, lr}
    9546:	b084      	sub	sp, #16
    assert(id != 0u);
    9548:	2800      	cmp	r0, #0
    954a:	d005      	beq.n	9558 <S_Nv_ItemLength_Impl+0x14>

    uint16_t blockPointer = FindItem(id);
    954c:	4b0a      	ldr	r3, [pc, #40]	; (9578 <S_Nv_ItemLength_Impl+0x34>)
    954e:	4798      	blx	r3
    9550:	1e01      	subs	r1, r0, #0
    if ( blockPointer == 0x0000u )
    9552:	d107      	bne.n	9564 <S_Nv_ItemLength_Impl+0x20>

    // read last written item block header
    BlockHeader_t blockHeader;
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    return blockHeader.itemLength;
}
    9554:	b004      	add	sp, #16
    9556:	bd10      	pop	{r4, pc}
    assert(id != 0u);
    9558:	4b08      	ldr	r3, [pc, #32]	; (957c <S_Nv_ItemLength_Impl+0x38>)
    955a:	4a09      	ldr	r2, [pc, #36]	; (9580 <S_Nv_ItemLength_Impl+0x3c>)
    955c:	4909      	ldr	r1, [pc, #36]	; (9584 <S_Nv_ItemLength_Impl+0x40>)
    955e:	480a      	ldr	r0, [pc, #40]	; (9588 <S_Nv_ItemLength_Impl+0x44>)
    9560:	4c0a      	ldr	r4, [pc, #40]	; (958c <S_Nv_ItemLength_Impl+0x48>)
    9562:	47a0      	blx	r4
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    9564:	4b0a      	ldr	r3, [pc, #40]	; (9590 <S_Nv_ItemLength_Impl+0x4c>)
    9566:	7818      	ldrb	r0, [r3, #0]
    9568:	2310      	movs	r3, #16
    956a:	466a      	mov	r2, sp
    956c:	4c09      	ldr	r4, [pc, #36]	; (9594 <S_Nv_ItemLength_Impl+0x50>)
    956e:	47a0      	blx	r4
    return blockHeader.itemLength;
    9570:	466b      	mov	r3, sp
    9572:	8918      	ldrh	r0, [r3, #8]
    9574:	e7ee      	b.n	9554 <S_Nv_ItemLength_Impl+0x10>
    9576:	46c0      	nop			; (mov r8, r8)
    9578:	00008b01 	.word	0x00008b01
    957c:	00018da8 	.word	0x00018da8
    9580:	00018e74 	.word	0x00018e74
    9584:	0000060b 	.word	0x0000060b
    9588:	00018d1c 	.word	0x00018d1c
    958c:	0001694d 	.word	0x0001694d
    9590:	20000474 	.word	0x20000474
    9594:	00008645 	.word	0x00008645

00009598 <S_Nv_ItemInit_Impl>:
{
    9598:	b5f0      	push	{r4, r5, r6, r7, lr}
    959a:	b085      	sub	sp, #20
    959c:	0004      	movs	r4, r0
    959e:	000e      	movs	r6, r1
    95a0:	0015      	movs	r5, r2
    assert((id != 0u) && (id < 0xF000u) && (itemLength <= MAX_ITEM_LENGTH));
    95a2:	1e43      	subs	r3, r0, #1
    95a4:	b29b      	uxth	r3, r3
    95a6:	4a2e      	ldr	r2, [pc, #184]	; (9660 <S_Nv_ItemInit_Impl+0xc8>)
    95a8:	4293      	cmp	r3, r2
    95aa:	d81e      	bhi.n	95ea <S_Nv_ItemInit_Impl+0x52>
    95ac:	2380      	movs	r3, #128	; 0x80
    95ae:	011b      	lsls	r3, r3, #4
    95b0:	4299      	cmp	r1, r3
    95b2:	d81a      	bhi.n	95ea <S_Nv_ItemInit_Impl+0x52>
    if ( FindItem(id) != 0x0000u )
    95b4:	4b2b      	ldr	r3, [pc, #172]	; (9664 <S_Nv_ItemInit_Impl+0xcc>)
    95b6:	4798      	blx	r3
    95b8:	2800      	cmp	r0, #0
    95ba:	d01d      	beq.n	95f8 <S_Nv_ItemInit_Impl+0x60>
        uint16_t oldItemLength = S_Nv_ItemLength(id);
    95bc:	0020      	movs	r0, r4
    95be:	4b2a      	ldr	r3, [pc, #168]	; (9668 <S_Nv_ItemInit_Impl+0xd0>)
    95c0:	4798      	blx	r3
        if ( oldItemLength != itemLength )
    95c2:	4286      	cmp	r6, r0
    95c4:	d007      	beq.n	95d6 <S_Nv_ItemInit_Impl+0x3e>
            s_compactItemId = id;
    95c6:	4b29      	ldr	r3, [pc, #164]	; (966c <S_Nv_ItemInit_Impl+0xd4>)
    95c8:	801c      	strh	r4, [r3, #0]
            s_compactItemLength = itemLength;
    95ca:	4b29      	ldr	r3, [pc, #164]	; (9670 <S_Nv_ItemInit_Impl+0xd8>)
    95cc:	801e      	strh	r6, [r3, #0]
            S_Nv_ReturnValue_t resizeResult = CompactItem();
    95ce:	4b29      	ldr	r3, [pc, #164]	; (9674 <S_Nv_ItemInit_Impl+0xdc>)
    95d0:	4798      	blx	r3
    95d2:	1e03      	subs	r3, r0, #0
            if ( resizeResult != S_Nv_ReturnValue_Ok )
    95d4:	d115      	bne.n	9602 <S_Nv_ItemInit_Impl+0x6a>
        if (pDefaultData != NULL)
    95d6:	2d00      	cmp	r5, #0
    95d8:	d040      	beq.n	965c <S_Nv_ItemInit_Impl+0xc4>
            return S_Nv_Read(id, 0u, itemLength, pDefaultData);
    95da:	002b      	movs	r3, r5
    95dc:	0032      	movs	r2, r6
    95de:	2100      	movs	r1, #0
    95e0:	0020      	movs	r0, r4
    95e2:	4c25      	ldr	r4, [pc, #148]	; (9678 <S_Nv_ItemInit_Impl+0xe0>)
    95e4:	47a0      	blx	r4
    95e6:	0003      	movs	r3, r0
    95e8:	e00b      	b.n	9602 <S_Nv_ItemInit_Impl+0x6a>
    assert((id != 0u) && (id < 0xF000u) && (itemLength <= MAX_ITEM_LENGTH));
    95ea:	4b24      	ldr	r3, [pc, #144]	; (967c <S_Nv_ItemInit_Impl+0xe4>)
    95ec:	4a24      	ldr	r2, [pc, #144]	; (9680 <S_Nv_ItemInit_Impl+0xe8>)
    95ee:	21aa      	movs	r1, #170	; 0xaa
    95f0:	00c9      	lsls	r1, r1, #3
    95f2:	4824      	ldr	r0, [pc, #144]	; (9684 <S_Nv_ItemInit_Impl+0xec>)
    95f4:	4c24      	ldr	r4, [pc, #144]	; (9688 <S_Nv_ItemInit_Impl+0xf0>)
    95f6:	47a0      	blx	r4
    if ( PowerSupplyTooLow() )
    95f8:	4b24      	ldr	r3, [pc, #144]	; (968c <S_Nv_ItemInit_Impl+0xf4>)
    95fa:	4798      	blx	r3
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    95fc:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    95fe:	2800      	cmp	r0, #0
    9600:	d002      	beq.n	9608 <S_Nv_ItemInit_Impl+0x70>
}
    9602:	0018      	movs	r0, r3
    9604:	b005      	add	sp, #20
    9606:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CompactSectorIfNeeded(BLOCK_HEADER_SIZE + itemLength);
    9608:	0030      	movs	r0, r6
    960a:	3010      	adds	r0, #16
    960c:	b280      	uxth	r0, r0
    960e:	4b20      	ldr	r3, [pc, #128]	; (9690 <S_Nv_ItemInit_Impl+0xf8>)
    9610:	4798      	blx	r3
    assert(s_itemCount < MAX_ITEM_COUNT);
    9612:	4b20      	ldr	r3, [pc, #128]	; (9694 <S_Nv_ItemInit_Impl+0xfc>)
    9614:	781b      	ldrb	r3, [r3, #0]
    9616:	2b06      	cmp	r3, #6
    9618:	d819      	bhi.n	964e <S_Nv_ItemInit_Impl+0xb6>
    uint16_t newItemPointer = s_sectorHead;
    961a:	4b1f      	ldr	r3, [pc, #124]	; (9698 <S_Nv_ItemInit_Impl+0x100>)
    961c:	881f      	ldrh	r7, [r3, #0]
    blockHeader.id = newItemId;
    961e:	466b      	mov	r3, sp
    9620:	805c      	strh	r4, [r3, #2]
    blockHeader.blockOffset = 0x0000u;
    9622:	2300      	movs	r3, #0
    9624:	466a      	mov	r2, sp
    9626:	8093      	strh	r3, [r2, #4]
    blockHeader.blockLength = itemLength;
    9628:	80d6      	strh	r6, [r2, #6]
    blockHeader.itemLength = itemLength;
    962a:	8116      	strh	r6, [r2, #8]
    blockHeader.previousBlock = 0x0000u;
    962c:	8153      	strh	r3, [r2, #10]
    blockHeader.writeCount = 0u;
    962e:	8193      	strh	r3, [r2, #12]
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pDefaultData) )
    9630:	0029      	movs	r1, r5
    9632:	4668      	mov	r0, sp
    9634:	4b19      	ldr	r3, [pc, #100]	; (969c <S_Nv_ItemInit_Impl+0x104>)
    9636:	4798      	blx	r3
        return S_Nv_ReturnValue_Failure;
    9638:	2301      	movs	r3, #1
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pDefaultData) )
    963a:	2800      	cmp	r0, #0
    963c:	d0e1      	beq.n	9602 <S_Nv_ItemInit_Impl+0x6a>
    Item_t *newItemCache = CreateItemCache(newItemId);
    963e:	0020      	movs	r0, r4
    9640:	4b17      	ldr	r3, [pc, #92]	; (96a0 <S_Nv_ItemInit_Impl+0x108>)
    9642:	4798      	blx	r3
    newItemCache->lastBlock = newItemPointer;
    9644:	7087      	strb	r7, [r0, #2]
    9646:	0a3f      	lsrs	r7, r7, #8
    9648:	70c7      	strb	r7, [r0, #3]
    return S_Nv_ReturnValue_DidNotExist;
    964a:	2302      	movs	r3, #2
    964c:	e7d9      	b.n	9602 <S_Nv_ItemInit_Impl+0x6a>
    assert(s_itemCount < MAX_ITEM_COUNT);
    964e:	4b15      	ldr	r3, [pc, #84]	; (96a4 <S_Nv_ItemInit_Impl+0x10c>)
    9650:	4a0b      	ldr	r2, [pc, #44]	; (9680 <S_Nv_ItemInit_Impl+0xe8>)
    9652:	21af      	movs	r1, #175	; 0xaf
    9654:	00c9      	lsls	r1, r1, #3
    9656:	480b      	ldr	r0, [pc, #44]	; (9684 <S_Nv_ItemInit_Impl+0xec>)
    9658:	4c0b      	ldr	r4, [pc, #44]	; (9688 <S_Nv_ItemInit_Impl+0xf0>)
    965a:	47a0      	blx	r4
            return S_Nv_ReturnValue_Ok;
    965c:	2300      	movs	r3, #0
    965e:	e7d0      	b.n	9602 <S_Nv_ItemInit_Impl+0x6a>
    9660:	0000effe 	.word	0x0000effe
    9664:	00008b01 	.word	0x00008b01
    9668:	00009545 	.word	0x00009545
    966c:	2000044c 	.word	0x2000044c
    9670:	2000044e 	.word	0x2000044e
    9674:	00009011 	.word	0x00009011
    9678:	000094cd 	.word	0x000094cd
    967c:	00018d68 	.word	0x00018d68
    9680:	00018e40 	.word	0x00018e40
    9684:	00018d1c 	.word	0x00018d1c
    9688:	0001694d 	.word	0x0001694d
    968c:	00008895 	.word	0x00008895
    9690:	00008f95 	.word	0x00008f95
    9694:	2000046c 	.word	0x2000046c
    9698:	20000476 	.word	0x20000476
    969c:	00009249 	.word	0x00009249
    96a0:	00008b1d 	.word	0x00008b1d
    96a4:	00018ce0 	.word	0x00018ce0

000096a8 <S_Nv_IsItemAvailable_Impl>:
/** Interface function, see \ref S_Nv_IsItemAvailable.
 *
 * Important: This will check whether the item is found in the storage area
 */
bool S_Nv_IsItemAvailable_Impl(S_Nv_ItemId_t id)
{
    96a8:	b510      	push	{r4, lr}
  return ( FindItem(id) != 0x0000u );
    96aa:	4b03      	ldr	r3, [pc, #12]	; (96b8 <S_Nv_IsItemAvailable_Impl+0x10>)
    96ac:	4798      	blx	r3
    96ae:	1e43      	subs	r3, r0, #1
    96b0:	4198      	sbcs	r0, r3
    96b2:	b2c0      	uxtb	r0, r0
}
    96b4:	bd10      	pop	{r4, pc}
    96b6:	46c0      	nop			; (mov r8, r8)
    96b8:	00008b01 	.word	0x00008b01

000096bc <pdsInitItemMask>:
\param[in] itemMask - itemMask to be initialized

\return true itemMask is initialized, false otherwise
******************************************************************************/
static bool pdsInitItemMask(S_Nv_ItemId_t memoryId, uint8_t *itemMask)
{
    96bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    96be:	46d6      	mov	lr, sl
    96c0:	4647      	mov	r7, r8
    96c2:	b580      	push	{r7, lr}
    96c4:	b087      	sub	sp, #28
    96c6:	000f      	movs	r7, r1
  if (PDS_ALL_EXISTENT_MEMORY == memoryId)
    96c8:	4b20      	ldr	r3, [pc, #128]	; (974c <pdsInitItemMask+0x90>)
    96ca:	4298      	cmp	r0, r3
    96cc:	d012      	beq.n	96f4 <pdsInitItemMask+0x38>
  {
    memset(itemMask, 0xFFU, PDS_ITEM_MASK_SIZE);
    itemMask[0] &= 0xFEU;
  }
  else if (PDS_DIRECTORY_MASK & memoryId)
    96ce:	0443      	lsls	r3, r0, #17
    96d0:	d415      	bmi.n	96fe <pdsInitItemMask+0x42>
    else
      return false;
  }
  else
  {
    itemMask[memoryId / 8] |= 1 << (memoryId % 8);
    96d2:	08c3      	lsrs	r3, r0, #3
    96d4:	18cf      	adds	r7, r1, r3
    96d6:	2307      	movs	r3, #7
    96d8:	4018      	ands	r0, r3
    96da:	3b06      	subs	r3, #6
    96dc:	4083      	lsls	r3, r0
    96de:	783a      	ldrb	r2, [r7, #0]
    96e0:	4313      	orrs	r3, r2
    96e2:	703b      	strb	r3, [r7, #0]
  }

  return true;
    96e4:	2301      	movs	r3, #1
    96e6:	9301      	str	r3, [sp, #4]
}
    96e8:	9801      	ldr	r0, [sp, #4]
    96ea:	b007      	add	sp, #28
    96ec:	bc0c      	pop	{r2, r3}
    96ee:	4690      	mov	r8, r2
    96f0:	469a      	mov	sl, r3
    96f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    itemMask[0] &= 0xFEU;
    96f4:	23fe      	movs	r3, #254	; 0xfe
    96f6:	700b      	strb	r3, [r1, #0]
  return true;
    96f8:	3bfd      	subs	r3, #253	; 0xfd
    96fa:	9301      	str	r3, [sp, #4]
    96fc:	e7f4      	b.n	96e8 <pdsInitItemMask+0x2c>
    if (pdsGetDirDescr(memoryId, &dirDescr))
    96fe:	a904      	add	r1, sp, #16
    9700:	4b13      	ldr	r3, [pc, #76]	; (9750 <pdsInitItemMask+0x94>)
    9702:	4798      	blx	r3
    9704:	9001      	str	r0, [sp, #4]
    9706:	2800      	cmp	r0, #0
    9708:	d0ee      	beq.n	96e8 <pdsInitItemMask+0x2c>
      for (uint8_t index=0U; index < dirDescr.filesCount; index++)
    970a:	ab04      	add	r3, sp, #16
    970c:	889b      	ldrh	r3, [r3, #4]
    970e:	4698      	mov	r8, r3
    9710:	2b00      	cmp	r3, #0
    9712:	d0e9      	beq.n	96e8 <pdsInitItemMask+0x2c>
    9714:	2400      	movs	r4, #0
        memcpy(&memId, (void const FLASH_PTR*)(dirDescr.list + index), sizeof(uint16_t));
    9716:	ab02      	add	r3, sp, #8
    9718:	1d9d      	adds	r5, r3, #6
    971a:	4b0e      	ldr	r3, [pc, #56]	; (9754 <pdsInitItemMask+0x98>)
    971c:	469a      	mov	sl, r3
        itemMask[memId / 8U] |= 1U << (memId % 8U);
    971e:	2607      	movs	r6, #7
        memcpy(&memId, (void const FLASH_PTR*)(dirDescr.list + index), sizeof(uint16_t));
    9720:	0061      	lsls	r1, r4, #1
    9722:	9b04      	ldr	r3, [sp, #16]
    9724:	469c      	mov	ip, r3
    9726:	4461      	add	r1, ip
    9728:	2202      	movs	r2, #2
    972a:	0028      	movs	r0, r5
    972c:	47d0      	blx	sl
        itemMask[memId / 8U] |= 1U << (memId % 8U);
    972e:	8829      	ldrh	r1, [r5, #0]
    9730:	08ca      	lsrs	r2, r1, #3
    9732:	18ba      	adds	r2, r7, r2
    9734:	4031      	ands	r1, r6
    9736:	2301      	movs	r3, #1
    9738:	408b      	lsls	r3, r1
    973a:	7811      	ldrb	r1, [r2, #0]
    973c:	430b      	orrs	r3, r1
    973e:	7013      	strb	r3, [r2, #0]
      for (uint8_t index=0U; index < dirDescr.filesCount; index++)
    9740:	3401      	adds	r4, #1
    9742:	b2e4      	uxtb	r4, r4
    9744:	b2a3      	uxth	r3, r4
    9746:	4543      	cmp	r3, r8
    9748:	d3ea      	bcc.n	9720 <pdsInitItemMask+0x64>
    974a:	e7cd      	b.n	96e8 <pdsInitItemMask+0x2c>
    974c:	00004002 	.word	0x00004002
    9750:	00009969 	.word	0x00009969
    9754:	00016a0f 	.word	0x00016a0f

00009758 <PDS_Store>:
{
    9758:	b510      	push	{r4, lr}
  if (!pdsInitItemMask(memoryId, itemsToStore))
    975a:	4905      	ldr	r1, [pc, #20]	; (9770 <PDS_Store+0x18>)
    975c:	4b05      	ldr	r3, [pc, #20]	; (9774 <PDS_Store+0x1c>)
    975e:	4798      	blx	r3
    9760:	1e04      	subs	r4, r0, #0
    9762:	d101      	bne.n	9768 <PDS_Store+0x10>
}
    9764:	0020      	movs	r0, r4
    9766:	bd10      	pop	{r4, pc}
  pdsPostTask(PDS_STORE_ITEM_TASK_ID);
    9768:	2000      	movs	r0, #0
    976a:	4b03      	ldr	r3, [pc, #12]	; (9778 <PDS_Store+0x20>)
    976c:	4798      	blx	r3
  return true;
    976e:	e7f9      	b.n	9764 <PDS_Store+0xc>
    9770:	2000047c 	.word	0x2000047c
    9774:	000096bd 	.word	0x000096bd
    9778:	000098b9 	.word	0x000098b9

0000977c <pdsStoreItemTaskHandler>:
{
    977c:	b5f0      	push	{r4, r5, r6, r7, lr}
    977e:	b085      	sub	sp, #20
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    9780:	4b3e      	ldr	r3, [pc, #248]	; (987c <pdsStoreItemTaskHandler+0x100>)
    9782:	781b      	ldrb	r3, [r3, #0]
    9784:	3301      	adds	r3, #1
      bit_index %= 8;
    9786:	2207      	movs	r2, #7
    9788:	4013      	ands	r3, r2
      if (itemsToStore[byte_index] & (1U << bit_index))
    978a:	4a3d      	ldr	r2, [pc, #244]	; (9880 <pdsStoreItemTaskHandler+0x104>)
    978c:	7817      	ldrb	r7, [r2, #0]
    978e:	0038      	movs	r0, r7
    9790:	001e      	movs	r6, r3
    9792:	003a      	movs	r2, r7
    9794:	40da      	lsrs	r2, r3
    9796:	07d2      	lsls	r2, r2, #31
    9798:	d431      	bmi.n	97fe <pdsStoreItemTaskHandler+0x82>
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    979a:	3301      	adds	r3, #1
    979c:	b2db      	uxtb	r3, r3
    979e:	2207      	movs	r2, #7
      bit_index %= 8;
    97a0:	2507      	movs	r5, #7
      if (itemsToStore[byte_index] & (1U << bit_index))
    97a2:	2401      	movs	r4, #1
      bit_index %= 8;
    97a4:	402b      	ands	r3, r5
      if (itemsToStore[byte_index] & (1U << bit_index))
    97a6:	001e      	movs	r6, r3
    97a8:	0001      	movs	r1, r0
    97aa:	40d9      	lsrs	r1, r3
    97ac:	420c      	tst	r4, r1
    97ae:	d126      	bne.n	97fe <pdsStoreItemTaskHandler+0x82>
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    97b0:	3301      	adds	r3, #1
    97b2:	b2db      	uxtb	r3, r3
    97b4:	3a01      	subs	r2, #1
    97b6:	b2d2      	uxtb	r2, r2
    97b8:	2a00      	cmp	r2, #0
    97ba:	d1f3      	bne.n	97a4 <pdsStoreItemTaskHandler+0x28>
  for (i = 0U, byte_index = i_found + 1; i < PDS_ITEM_MASK_SIZE; i++, byte_index++)
    97bc:	2401      	movs	r4, #1
  if (!S_Nv_IsItemAvailable(((S_Nv_ItemId_t)byte_index << 3U) + bit_index))
    97be:	00e4      	lsls	r4, r4, #3
    97c0:	18e4      	adds	r4, r4, r3
    97c2:	0020      	movs	r0, r4
    97c4:	4b2f      	ldr	r3, [pc, #188]	; (9884 <pdsStoreItemTaskHandler+0x108>)
    97c6:	4798      	blx	r3
    97c8:	2800      	cmp	r0, #0
    97ca:	d124      	bne.n	9816 <pdsStoreItemTaskHandler+0x9a>
    if(pdsGetItemDescr(((S_Nv_ItemId_t)byte_index << 3U) + bit_index, &itemDescr))
    97cc:	4669      	mov	r1, sp
    97ce:	0020      	movs	r0, r4
    97d0:	4b2d      	ldr	r3, [pc, #180]	; (9888 <pdsStoreItemTaskHandler+0x10c>)
    97d2:	4798      	blx	r3
    97d4:	2800      	cmp	r0, #0
    97d6:	d038      	beq.n	984a <pdsStoreItemTaskHandler+0xce>
      if (itemDescr.filler)
    97d8:	9b02      	ldr	r3, [sp, #8]
    97da:	2b00      	cmp	r3, #0
    97dc:	d000      	beq.n	97e0 <pdsStoreItemTaskHandler+0x64>
        itemDescr.filler();
    97de:	4798      	blx	r3
      ret = S_Nv_ItemInit(((S_Nv_ItemId_t)byte_index << 3U) + bit_index, itemDescr.itemSize, itemDescr.itemData);
    97e0:	9a01      	ldr	r2, [sp, #4]
    97e2:	466b      	mov	r3, sp
    97e4:	8859      	ldrh	r1, [r3, #2]
    97e6:	0020      	movs	r0, r4
    97e8:	4b28      	ldr	r3, [pc, #160]	; (988c <pdsStoreItemTaskHandler+0x110>)
    97ea:	4798      	blx	r3
      assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    97ec:	23fd      	movs	r3, #253	; 0xfd
    97ee:	4218      	tst	r0, r3
    97f0:	d02b      	beq.n	984a <pdsStoreItemTaskHandler+0xce>
    97f2:	4b27      	ldr	r3, [pc, #156]	; (9890 <pdsStoreItemTaskHandler+0x114>)
    97f4:	4a27      	ldr	r2, [pc, #156]	; (9894 <pdsStoreItemTaskHandler+0x118>)
    97f6:	21ea      	movs	r1, #234	; 0xea
    97f8:	4827      	ldr	r0, [pc, #156]	; (9898 <pdsStoreItemTaskHandler+0x11c>)
    97fa:	4c28      	ldr	r4, [pc, #160]	; (989c <pdsStoreItemTaskHandler+0x120>)
    97fc:	47a0      	blx	r4
        itemsToStore[byte_index] &= ~(1U << bit_index);
    97fe:	2201      	movs	r2, #1
    9800:	40b2      	lsls	r2, r6
    9802:	4397      	bics	r7, r2
    9804:	4a1e      	ldr	r2, [pc, #120]	; (9880 <pdsStoreItemTaskHandler+0x104>)
    9806:	7017      	strb	r7, [r2, #0]
        i_found = byte_index;
    9808:	2100      	movs	r1, #0
    980a:	4a25      	ldr	r2, [pc, #148]	; (98a0 <pdsStoreItemTaskHandler+0x124>)
    980c:	7011      	strb	r1, [r2, #0]
        j_found = bit_index;
    980e:	4a1b      	ldr	r2, [pc, #108]	; (987c <pdsStoreItemTaskHandler+0x100>)
    9810:	7013      	strb	r3, [r2, #0]
    byte_index %= PDS_ITEM_MASK_SIZE;
    9812:	2400      	movs	r4, #0
    9814:	e7d3      	b.n	97be <pdsStoreItemTaskHandler+0x42>
  if (pdsGetItemDescr(id, &itemDescr))
    9816:	4669      	mov	r1, sp
    9818:	0020      	movs	r0, r4
    981a:	4b1b      	ldr	r3, [pc, #108]	; (9888 <pdsStoreItemTaskHandler+0x10c>)
    981c:	4798      	blx	r3
    981e:	2800      	cmp	r0, #0
    9820:	d013      	beq.n	984a <pdsStoreItemTaskHandler+0xce>
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    9822:	466b      	mov	r3, sp
    9824:	885b      	ldrh	r3, [r3, #2]
    9826:	2b00      	cmp	r3, #0
    9828:	d015      	beq.n	9856 <pdsStoreItemTaskHandler+0xda>
    982a:	9b01      	ldr	r3, [sp, #4]
    982c:	2b00      	cmp	r3, #0
    982e:	d012      	beq.n	9856 <pdsStoreItemTaskHandler+0xda>
    if (itemDescr.filler)
    9830:	9b02      	ldr	r3, [sp, #8]
    9832:	2b00      	cmp	r3, #0
    9834:	d000      	beq.n	9838 <pdsStoreItemTaskHandler+0xbc>
      itemDescr.filler();
    9836:	4798      	blx	r3
      ret = S_Nv_Write(id, 0U, itemDescr.itemSize, itemDescr.itemData);
    9838:	9b01      	ldr	r3, [sp, #4]
    983a:	466a      	mov	r2, sp
    983c:	8852      	ldrh	r2, [r2, #2]
    983e:	2100      	movs	r1, #0
    9840:	0020      	movs	r0, r4
    9842:	4c18      	ldr	r4, [pc, #96]	; (98a4 <pdsStoreItemTaskHandler+0x128>)
    9844:	47a0      	blx	r4
      assert(ret == S_Nv_ReturnValue_Ok);
    9846:	2800      	cmp	r0, #0
    9848:	d10c      	bne.n	9864 <pdsStoreItemTaskHandler+0xe8>
    if (itemsToStore[i])
    984a:	4b0d      	ldr	r3, [pc, #52]	; (9880 <pdsStoreItemTaskHandler+0x104>)
    984c:	781b      	ldrb	r3, [r3, #0]
    984e:	2b00      	cmp	r3, #0
    9850:	d10f      	bne.n	9872 <pdsStoreItemTaskHandler+0xf6>
}
    9852:	b005      	add	sp, #20
    9854:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    9856:	4b14      	ldr	r3, [pc, #80]	; (98a8 <pdsStoreItemTaskHandler+0x12c>)
    9858:	4a14      	ldr	r2, [pc, #80]	; (98ac <pdsStoreItemTaskHandler+0x130>)
    985a:	2134      	movs	r1, #52	; 0x34
    985c:	31ff      	adds	r1, #255	; 0xff
    985e:	480e      	ldr	r0, [pc, #56]	; (9898 <pdsStoreItemTaskHandler+0x11c>)
    9860:	4c0e      	ldr	r4, [pc, #56]	; (989c <pdsStoreItemTaskHandler+0x120>)
    9862:	47a0      	blx	r4
      assert(ret == S_Nv_ReturnValue_Ok);
    9864:	4b12      	ldr	r3, [pc, #72]	; (98b0 <pdsStoreItemTaskHandler+0x134>)
    9866:	4a11      	ldr	r2, [pc, #68]	; (98ac <pdsStoreItemTaskHandler+0x130>)
    9868:	2142      	movs	r1, #66	; 0x42
    986a:	31ff      	adds	r1, #255	; 0xff
    986c:	480a      	ldr	r0, [pc, #40]	; (9898 <pdsStoreItemTaskHandler+0x11c>)
    986e:	4c0b      	ldr	r4, [pc, #44]	; (989c <pdsStoreItemTaskHandler+0x120>)
    9870:	47a0      	blx	r4
      pdsPostTask(PDS_STORE_ITEM_TASK_ID);
    9872:	2000      	movs	r0, #0
    9874:	4b0f      	ldr	r3, [pc, #60]	; (98b4 <pdsStoreItemTaskHandler+0x138>)
    9876:	4798      	blx	r3
}
    9878:	e7eb      	b.n	9852 <pdsStoreItemTaskHandler+0xd6>
    987a:	46c0      	nop			; (mov r8, r8)
    987c:	2000047d 	.word	0x2000047d
    9880:	2000047c 	.word	0x2000047c
    9884:	000096a9 	.word	0x000096a9
    9888:	0000990d 	.word	0x0000990d
    988c:	00009599 	.word	0x00009599
    9890:	00018f18 	.word	0x00018f18
    9894:	00018f60 	.word	0x00018f60
    9898:	00018ec8 	.word	0x00018ec8
    989c:	0001694d 	.word	0x0001694d
    98a0:	20000478 	.word	0x20000478
    98a4:	00009395 	.word	0x00009395
    98a8:	00018e8c 	.word	0x00018e8c
    98ac:	00018f78 	.word	0x00018f78
    98b0:	00018f88 	.word	0x00018f88
    98b4:	000098b9 	.word	0x000098b9

000098b8 <pdsPostTask>:
\param[in] taskId - id of a task
******************************************************************************/

void pdsPostTask(PdsTaskId_t taskId)
{
  pendingTasks |= (1U << taskId);
    98b8:	4a03      	ldr	r2, [pc, #12]	; (98c8 <pdsPostTask+0x10>)
    98ba:	2301      	movs	r3, #1
    98bc:	4083      	lsls	r3, r0
    98be:	7811      	ldrb	r1, [r2, #0]
    98c0:	430b      	orrs	r3, r1
    98c2:	7013      	strb	r3, [r2, #0]
//  SYS_PostTask(PDS_TASK_ID);
}
    98c4:	4770      	bx	lr
    98c6:	46c0      	nop			; (mov r8, r8)
    98c8:	2000047e 	.word	0x2000047e

000098cc <PDS_TaskHandler>:

/******************************************************************************
\brief General PDS task handler
******************************************************************************/
void PDS_TaskHandler(void)
{
    98cc:	b570      	push	{r4, r5, r6, lr}
  if (pendingTasks)
    98ce:	4b0d      	ldr	r3, [pc, #52]	; (9904 <PDS_TaskHandler+0x38>)
    98d0:	781d      	ldrb	r5, [r3, #0]
    98d2:	2d00      	cmp	r5, #0
    98d4:	d012      	beq.n	98fc <PDS_TaskHandler+0x30>
  {
    uint8_t taskId = 0U;

    while (!(pendingTasks & (1U << taskId)))
    98d6:	0028      	movs	r0, r5
    98d8:	07eb      	lsls	r3, r5, #31
    98da:	d410      	bmi.n	98fe <PDS_TaskHandler+0x32>
    98dc:	2300      	movs	r3, #0
    98de:	2401      	movs	r4, #1
      taskId++;
    98e0:	3301      	adds	r3, #1
    98e2:	b2db      	uxtb	r3, r3
    while (!(pendingTasks & (1U << taskId)))
    98e4:	0019      	movs	r1, r3
    98e6:	0002      	movs	r2, r0
    98e8:	40da      	lsrs	r2, r3
    98ea:	4214      	tst	r4, r2
    98ec:	d0f8      	beq.n	98e0 <PDS_TaskHandler+0x14>

    pendingTasks ^= (1U << taskId);
    98ee:	2301      	movs	r3, #1
    98f0:	408b      	lsls	r3, r1
    98f2:	405d      	eors	r5, r3
    98f4:	4b03      	ldr	r3, [pc, #12]	; (9904 <PDS_TaskHandler+0x38>)
    98f6:	701d      	strb	r5, [r3, #0]
    pdsTaskHandlers[taskId]();
    98f8:	4b03      	ldr	r3, [pc, #12]	; (9908 <PDS_TaskHandler+0x3c>)
    98fa:	4798      	blx	r3
   
  }
}
    98fc:	bd70      	pop	{r4, r5, r6, pc}
    while (!(pendingTasks & (1U << taskId)))
    98fe:	2100      	movs	r1, #0
    9900:	e7f5      	b.n	98ee <PDS_TaskHandler+0x22>
    9902:	46c0      	nop			; (mov r8, r8)
    9904:	2000047e 	.word	0x2000047e
    9908:	0000977d 	.word	0x0000977d

0000990c <pdsGetItemDescr>:
\param[in] itemDescrToGet    - pointer to item descriptor to be loaded;

returns true if descriptor is found out for the given item ID, false - otherwise
******************************************************************************/
bool pdsGetItemDescr(S_Nv_ItemId_t itemId, ItemIdToMemoryMapping_t *itemDescrToGet )
{
    990c:	b5f0      	push	{r4, r5, r6, r7, lr}
    990e:	b087      	sub	sp, #28
    9910:	9101      	str	r1, [sp, #4]
  /* Calculate raw data size */
  for (uint8_t fileIdx = 0; fileIdx < PDS_ITEM_AMOUNT; fileIdx++)
  {
    ItemIdToMemoryMapping_t itemDescr;

    memcpy(&itemDescr, (void const *)itemDescrPtr, sizeof(ItemIdToMemoryMapping_t));
    9912:	aa02      	add	r2, sp, #8
    9914:	4b10      	ldr	r3, [pc, #64]	; (9958 <pdsGetItemDescr+0x4c>)
    9916:	0011      	movs	r1, r2
    9918:	cb70      	ldmia	r3!, {r4, r5, r6}
    991a:	c170      	stmia	r1!, {r4, r5, r6}
    991c:	681b      	ldr	r3, [r3, #0]
    991e:	600b      	str	r3, [r1, #0]

    if(itemDescr.itemId == itemId)
    9920:	8813      	ldrh	r3, [r2, #0]
    9922:	4283      	cmp	r3, r0
    9924:	d011      	beq.n	994a <pdsGetItemDescr+0x3e>
    {
      memcpy(itemDescrToGet, &itemDescr, sizeof(ItemIdToMemoryMapping_t));
      return true;
    }
    itemDescrPtr++;
    9926:	4b0d      	ldr	r3, [pc, #52]	; (995c <pdsGetItemDescr+0x50>)
    memcpy(&itemDescr, (void const *)itemDescrPtr, sizeof(ItemIdToMemoryMapping_t));
    9928:	aa02      	add	r2, sp, #8
    992a:	0011      	movs	r1, r2
    992c:	001c      	movs	r4, r3
    992e:	cce0      	ldmia	r4!, {r5, r6, r7}
    9930:	c1e0      	stmia	r1!, {r5, r6, r7}
    9932:	6824      	ldr	r4, [r4, #0]
    9934:	600c      	str	r4, [r1, #0]
    if(itemDescr.itemId == itemId)
    9936:	8811      	ldrh	r1, [r2, #0]
    9938:	4281      	cmp	r1, r0
    993a:	d006      	beq.n	994a <pdsGetItemDescr+0x3e>
    itemDescrPtr++;
    993c:	3310      	adds	r3, #16
  for (uint8_t fileIdx = 0; fileIdx < PDS_ITEM_AMOUNT; fileIdx++)
    993e:	4908      	ldr	r1, [pc, #32]	; (9960 <pdsGetItemDescr+0x54>)
    9940:	428b      	cmp	r3, r1
    9942:	d1f2      	bne.n	992a <pdsGetItemDescr+0x1e>

  }
  return false;
    9944:	2000      	movs	r0, #0
}
    9946:	b007      	add	sp, #28
    9948:	bdf0      	pop	{r4, r5, r6, r7, pc}
      memcpy(itemDescrToGet, &itemDescr, sizeof(ItemIdToMemoryMapping_t));
    994a:	2210      	movs	r2, #16
    994c:	a902      	add	r1, sp, #8
    994e:	9801      	ldr	r0, [sp, #4]
    9950:	4b04      	ldr	r3, [pc, #16]	; (9964 <pdsGetItemDescr+0x58>)
    9952:	4798      	blx	r3
      return true;
    9954:	2001      	movs	r0, #1
    9956:	e7f6      	b.n	9946 <pdsGetItemDescr+0x3a>
    9958:	00004400 	.word	0x00004400
    995c:	00004410 	.word	0x00004410
    9960:	00004470 	.word	0x00004470
    9964:	00016a0f 	.word	0x00016a0f

00009968 <pdsGetDirDescr>:
\param[in] dirDescrToGet    - pointer to dir descriptor to be loaded;

returns true if descriptor is found out for the given dir ID, false - otherwise
******************************************************************************/
bool pdsGetDirDescr(S_Nv_ItemId_t itemId, PDS_DirDescr_t *dirDescrToGet )
{
    9968:	b570      	push	{r4, r5, r6, lr}
    996a:	b082      	sub	sp, #8
    996c:	000c      	movs	r4, r1
  /* Calculate raw data size */
  for (uint8_t fileIdx = 0; fileIdx < PDS_DIRECTORIES_AMOUNT; fileIdx++)
  {
    PDS_DirDescr_t dirDescr;

    memcpy(&dirDescr, (void const *)dirDescrPtr, sizeof(PDS_DirDescr_t));
    996e:	466b      	mov	r3, sp
    9970:	4a08      	ldr	r2, [pc, #32]	; (9994 <pdsGetDirDescr+0x2c>)
    9972:	4669      	mov	r1, sp
    9974:	ca60      	ldmia	r2!, {r5, r6}
    9976:	c160      	stmia	r1!, {r5, r6}
    if(dirDescr.memoryId == itemId)
    9978:	88da      	ldrh	r2, [r3, #6]
      memcpy(dirDescrToGet, &dirDescr, sizeof(PDS_DirDescr_t));
      return true;
    }
    dirDescrPtr++;
  }
  return false;
    997a:	2300      	movs	r3, #0
    if(dirDescr.memoryId == itemId)
    997c:	4282      	cmp	r2, r0
    997e:	d002      	beq.n	9986 <pdsGetDirDescr+0x1e>
}
    9980:	0018      	movs	r0, r3
    9982:	b002      	add	sp, #8
    9984:	bd70      	pop	{r4, r5, r6, pc}
      memcpy(dirDescrToGet, &dirDescr, sizeof(PDS_DirDescr_t));
    9986:	2208      	movs	r2, #8
    9988:	4669      	mov	r1, sp
    998a:	0020      	movs	r0, r4
    998c:	4b02      	ldr	r3, [pc, #8]	; (9998 <pdsGetDirDescr+0x30>)
    998e:	4798      	blx	r3
      return true;
    9990:	2301      	movs	r3, #1
    9992:	e7f5      	b.n	9980 <pdsGetDirDescr+0x18>
    9994:	00004400 	.word	0x00004400
    9998:	00016a0f 	.word	0x00016a0f

0000999c <MiMAC_SetAltAddress>:
 *      None
 *
 *****************************************************************************************/

bool MiMAC_SetAltAddress( uint8_t *Address,  uint8_t *PanId)
{
    999c:	b510      	push	{r4, lr}
	myNetworkAddress.v[0] = Address[0];
    999e:	7802      	ldrb	r2, [r0, #0]
    99a0:	4b08      	ldr	r3, [pc, #32]	; (99c4 <MiMAC_SetAltAddress+0x28>)
    99a2:	701a      	strb	r2, [r3, #0]
	myNetworkAddress.v[1] = Address[1];
    99a4:	7842      	ldrb	r2, [r0, #1]
    99a6:	705a      	strb	r2, [r3, #1]
	MAC_PANID.v[0] = PanId[0];
    99a8:	780a      	ldrb	r2, [r1, #0]
    99aa:	4c07      	ldr	r4, [pc, #28]	; (99c8 <MiMAC_SetAltAddress+0x2c>)
    99ac:	7022      	strb	r2, [r4, #0]
	MAC_PANID.v[1] = PanId[1];
    99ae:	784a      	ldrb	r2, [r1, #1]
    99b0:	7062      	strb	r2, [r4, #1]
	PHY_SetShortAddr(myNetworkAddress.Val);
    99b2:	8818      	ldrh	r0, [r3, #0]
    99b4:	4b05      	ldr	r3, [pc, #20]	; (99cc <MiMAC_SetAltAddress+0x30>)
    99b6:	4798      	blx	r3
	PHY_SetPanId(MAC_PANID.Val);
    99b8:	8820      	ldrh	r0, [r4, #0]
    99ba:	4b05      	ldr	r3, [pc, #20]	; (99d0 <MiMAC_SetAltAddress+0x34>)
    99bc:	4798      	blx	r3
	return true;
}
    99be:	2001      	movs	r0, #1
    99c0:	bd10      	pop	{r4, pc}
    99c2:	46c0      	nop			; (mov r8, r8)
    99c4:	200022b4 	.word	0x200022b4
    99c8:	20002328 	.word	0x20002328
    99cc:	0000ac61 	.word	0x0000ac61
    99d0:	0000ac4d 	.word	0x0000ac4d

000099d4 <mic_generator>:

#if defined (ENABLE_SECURITY)
uint8_t addr[8] = {0xda , 0x98 , 0x22 , 0xfe , 0xff , 0xa3 , 0x04 , 0x00};
void mic_generator (uint8_t *Payloadinfo, uint8_t len , uint8_t frame_control ,  API_UINT32_UNION FrameCounter ,  uint8_t *SourceIEEEAddress)
{
    99d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    99d6:	46c6      	mov	lr, r8
    99d8:	b500      	push	{lr}
    99da:	b0c6      	sub	sp, #280	; 0x118
    99dc:	0006      	movs	r6, r0
    99de:	000c      	movs	r4, r1
    99e0:	469c      	mov	ip, r3
    99e2:	994c      	ldr	r1, [sp, #304]	; 0x130
	uint16_t i ;										
	uint8_t j , iterations  , copy_packet1[255] , cbc_header_with_padding[16];
	// Calculating No of blocks in the packet (1 block = 16 bytes of data)
	iterations = len/16;
    99e4:	0925      	lsrs	r5, r4, #4
	if (len % 16 != 0) iterations++;
    99e6:	0723      	lsls	r3, r4, #28
    99e8:	d000      	beq.n	99ec <mic_generator+0x18>
    99ea:	3501      	adds	r5, #1
	InitVect_in[0] = 0x49;//frame_control;
    99ec:	2049      	movs	r0, #73	; 0x49
    99ee:	4b40      	ldr	r3, [pc, #256]	; (9af0 <mic_generator+0x11c>)
    99f0:	7018      	strb	r0, [r3, #0]
	cbc_header_with_padding[0] = 0x00;  // l(a)
    99f2:	2300      	movs	r3, #0
    99f4:	a802      	add	r0, sp, #8
    99f6:	7003      	strb	r3, [r0, #0]
	cbc_header_with_padding[1] = 0x0d;  // l(a)Header Length
    99f8:	330d      	adds	r3, #13
    99fa:	7043      	strb	r3, [r0, #1]
	cbc_header_with_padding[2] = frame_control;  //frame_control;  //byte 1
    99fc:	7082      	strb	r2, [r0, #2]
    99fe:	2200      	movs	r2, #0
	for (i=0;i<8;i++)
	{
		InitVect_in[i+1] =  SourceIEEEAddress[i];
    9a00:	4b3b      	ldr	r3, [pc, #236]	; (9af0 <mic_generator+0x11c>)
    9a02:	5c8f      	ldrb	r7, [r1, r2]
    9a04:	18d0      	adds	r0, r2, r3
    9a06:	7047      	strb	r7, [r0, #1]
		cbc_header_with_padding[i+7] = SourceIEEEAddress[i];
    9a08:	0010      	movs	r0, r2
    9a0a:	af02      	add	r7, sp, #8
    9a0c:	46b8      	mov	r8, r7
    9a0e:	4440      	add	r0, r8
    9a10:	5c8f      	ldrb	r7, [r1, r2]
    9a12:	71c7      	strb	r7, [r0, #7]
    9a14:	3201      	adds	r2, #1
	for (i=0;i<8;i++)
    9a16:	2a08      	cmp	r2, #8
    9a18:	d1f3      	bne.n	9a02 <mic_generator+0x2e>
	}
	for (i=0;i<4;i++)
	{
		InitVect_in[i+9] = FrameCounter.v[i];
    9a1a:	4663      	mov	r3, ip
    9a1c:	466a      	mov	r2, sp
    9a1e:	71d3      	strb	r3, [r2, #7]
    9a20:	79d3      	ldrb	r3, [r2, #7]
    9a22:	4833      	ldr	r0, [pc, #204]	; (9af0 <mic_generator+0x11c>)
    9a24:	7243      	strb	r3, [r0, #9]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    9a26:	4642      	mov	r2, r8
    9a28:	70d3      	strb	r3, [r2, #3]
		InitVect_in[i+9] = FrameCounter.v[i];
    9a2a:	4663      	mov	r3, ip
    9a2c:	041b      	lsls	r3, r3, #16
    9a2e:	0e1b      	lsrs	r3, r3, #24
    9a30:	7283      	strb	r3, [r0, #10]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    9a32:	7113      	strb	r3, [r2, #4]
		InitVect_in[i+9] = FrameCounter.v[i];
    9a34:	4663      	mov	r3, ip
    9a36:	021b      	lsls	r3, r3, #8
    9a38:	0e1b      	lsrs	r3, r3, #24
    9a3a:	72c3      	strb	r3, [r0, #11]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    9a3c:	7153      	strb	r3, [r2, #5]
		InitVect_in[i+9] = FrameCounter.v[i];
    9a3e:	4663      	mov	r3, ip
    9a40:	0e1b      	lsrs	r3, r3, #24
    9a42:	7303      	strb	r3, [r0, #12]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    9a44:	7193      	strb	r3, [r2, #6]
	}
	//cbc_header_with_padding[14] = 0x00;  // Padding
	cbc_header_with_padding[15] = 0x00;   // Padding
    9a46:	2300      	movs	r3, #0
    9a48:	73d3      	strb	r3, [r2, #15]
	InitVect_in[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
    9a4a:	2204      	movs	r2, #4
    9a4c:	7342      	strb	r2, [r0, #13]
	InitVect_in[14] = 0x00; // 15 th byte padded to zero
    9a4e:	7383      	strb	r3, [r0, #14]
	InitVect_in[15] = len; // For MIC calculation All preceding blocks will be incremented by 1
    9a50:	73c4      	strb	r4, [r0, #15]
	PHY_EncryptReq(&InitVect_in[0], (uint8_t *)mySecurityKey);
    9a52:	4928      	ldr	r1, [pc, #160]	; (9af4 <mic_generator+0x120>)
    9a54:	4b28      	ldr	r3, [pc, #160]	; (9af8 <mic_generator+0x124>)
    9a56:	4798      	blx	r3
    9a58:	2300      	movs	r3, #0
	for (i=0;i<16;i++)
	{
		copy_packet1[i] = cbc_header_with_padding[i];
    9a5a:	a906      	add	r1, sp, #24
    9a5c:	aa02      	add	r2, sp, #8
    9a5e:	5c9a      	ldrb	r2, [r3, r2]
    9a60:	545a      	strb	r2, [r3, r1]
    9a62:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    9a64:	2b10      	cmp	r3, #16
    9a66:	d1f9      	bne.n	9a5c <mic_generator+0x88>
	}
	// Copy the Payload and Do the padding
	for (i=16;i<len+16;i++)
    9a68:	0027      	movs	r7, r4
    9a6a:	3710      	adds	r7, #16
    9a6c:	2f10      	cmp	r7, #16
    9a6e:	dd0a      	ble.n	9a86 <mic_generator+0xb2>
    9a70:	2010      	movs	r0, #16
	{
		copy_packet1[i]	= Payloadinfo[i-16];  // Copying the Payload
    9a72:	a906      	add	r1, sp, #24
    9a74:	18f2      	adds	r2, r6, r3
    9a76:	3a10      	subs	r2, #16
    9a78:	7812      	ldrb	r2, [r2, #0]
    9a7a:	540a      	strb	r2, [r1, r0]
	for (i=16;i<len+16;i++)
    9a7c:	3301      	adds	r3, #1
    9a7e:	b29b      	uxth	r3, r3
    9a80:	0018      	movs	r0, r3
    9a82:	42bb      	cmp	r3, r7
    9a84:	dbf6      	blt.n	9a74 <mic_generator+0xa0>
	}
	for (i=len+16;i<(iterations *16) + 16 ; i++ )
    9a86:	0023      	movs	r3, r4
    9a88:	3310      	adds	r3, #16
    9a8a:	001a      	movs	r2, r3
    9a8c:	3501      	adds	r5, #1
    9a8e:	0129      	lsls	r1, r5, #4
    9a90:	428b      	cmp	r3, r1
    9a92:	da07      	bge.n	9aa4 <mic_generator+0xd0>
	{
		copy_packet1[i] = 0; // Padding
    9a94:	ac06      	add	r4, sp, #24
    9a96:	2000      	movs	r0, #0
    9a98:	54a0      	strb	r0, [r4, r2]
	for (i=len+16;i<(iterations *16) + 16 ; i++ )
    9a9a:	3301      	adds	r3, #1
    9a9c:	b29b      	uxth	r3, r3
    9a9e:	001a      	movs	r2, r3
    9aa0:	428b      	cmp	r3, r1
    9aa2:	dbf9      	blt.n	9a98 <mic_generator+0xc4>
	}
	for (i=0;i<iterations+1;i++)
    9aa4:	2200      	movs	r2, #0
    9aa6:	2700      	movs	r7, #0
    9aa8:	2d00      	cmp	r5, #0
    9aaa:	dd15      	ble.n	9ad8 <mic_generator+0x104>
	{
		for (j=0;j<16;j++)
		{
			InitVect_in[j]	= InitVect_in[j] ^ copy_packet1[j+(i*16)];
    9aac:	4e10      	ldr	r6, [pc, #64]	; (9af0 <mic_generator+0x11c>)
    9aae:	0112      	lsls	r2, r2, #4
    9ab0:	2300      	movs	r3, #0
    9ab2:	a906      	add	r1, sp, #24
    9ab4:	188c      	adds	r4, r1, r2
    9ab6:	1999      	adds	r1, r3, r6
    9ab8:	5ce2      	ldrb	r2, [r4, r3]
    9aba:	7808      	ldrb	r0, [r1, #0]
    9abc:	4042      	eors	r2, r0
    9abe:	700a      	strb	r2, [r1, #0]
    9ac0:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    9ac2:	2b10      	cmp	r3, #16
    9ac4:	d1f7      	bne.n	9ab6 <mic_generator+0xe2>
		}
		PHY_EncryptReq(&InitVect_in[0], (uint8_t *)mySecurityKey);
    9ac6:	490b      	ldr	r1, [pc, #44]	; (9af4 <mic_generator+0x120>)
    9ac8:	4809      	ldr	r0, [pc, #36]	; (9af0 <mic_generator+0x11c>)
    9aca:	4b0b      	ldr	r3, [pc, #44]	; (9af8 <mic_generator+0x124>)
    9acc:	4798      	blx	r3
	for (i=0;i<iterations+1;i++)
    9ace:	3701      	adds	r7, #1
    9ad0:	b2bf      	uxth	r7, r7
    9ad2:	003a      	movs	r2, r7
    9ad4:	42af      	cmp	r7, r5
    9ad6:	dbea      	blt.n	9aae <mic_generator+0xda>
    9ad8:	2300      	movs	r3, #0
	}
	for (i=0;i<16;i++)
	{
		CBC_mic[i] = InitVect_in[i];
    9ada:	4808      	ldr	r0, [pc, #32]	; (9afc <mic_generator+0x128>)
    9adc:	4904      	ldr	r1, [pc, #16]	; (9af0 <mic_generator+0x11c>)
    9ade:	5cca      	ldrb	r2, [r1, r3]
    9ae0:	54c2      	strb	r2, [r0, r3]
    9ae2:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    9ae4:	2b10      	cmp	r3, #16
    9ae6:	d1fa      	bne.n	9ade <mic_generator+0x10a>
	}

}
    9ae8:	b046      	add	sp, #280	; 0x118
    9aea:	bc04      	pop	{r2}
    9aec:	4690      	mov	r8, r2
    9aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9af0:	200022c4 	.word	0x200022c4
    9af4:	00018fa4 	.word	0x00018fa4
    9af8:	0000ad91 	.word	0x0000ad91
    9afc:	20002308 	.word	0x20002308

00009b00 <DataEncrypt>:
 *
 *****************************************************************************************/

bool DataEncrypt(uint8_t *Payloadinfo, uint8_t *Payload_len, API_UINT32_UNION FrameCounter,
uint8_t FrameControl)
{
    9b00:	b5f0      	push	{r4, r5, r6, r7, lr}
    9b02:	46de      	mov	lr, fp
    9b04:	4657      	mov	r7, sl
    9b06:	464e      	mov	r6, r9
    9b08:	4645      	mov	r5, r8
    9b0a:	b5e0      	push	{r5, r6, r7, lr}
    9b0c:	b08d      	sub	sp, #52	; 0x34
    9b0e:	4680      	mov	r8, r0
    9b10:	000e      	movs	r6, r1
    9b12:	0014      	movs	r4, r2
    9b14:	001a      	movs	r2, r3
	uint16_t i ;
	uint8_t iterations , block[16] , j , CTR_Nonce_and_Counter[16];
	// Calculating No of blocks in the packet (1 block = 16 bytes of data)
	iterations = *Payload_len/16;
    9b16:	7809      	ldrb	r1, [r1, #0]
    9b18:	090d      	lsrs	r5, r1, #4
	if (*Payload_len % 16 != 0) iterations++;
    9b1a:	070b      	lsls	r3, r1, #28
    9b1c:	d000      	beq.n	9b20 <DataEncrypt+0x20>
    9b1e:	3501      	adds	r5, #1

	mic_generator(&Payloadinfo[0] , *Payload_len, FrameControl  , FrameCounter ,  MACInitParams.PAddress);
    9b20:	4b37      	ldr	r3, [pc, #220]	; (9c00 <DataEncrypt+0x100>)
    9b22:	685b      	ldr	r3, [r3, #4]
    9b24:	9300      	str	r3, [sp, #0]
    9b26:	0023      	movs	r3, r4
    9b28:	4640      	mov	r0, r8
    9b2a:	4f36      	ldr	r7, [pc, #216]	; (9c04 <DataEncrypt+0x104>)
    9b2c:	47b8      	blx	r7

	for (i=*Payload_len;i<iterations *16 ; i++ )
    9b2e:	7831      	ldrb	r1, [r6, #0]
    9b30:	b28b      	uxth	r3, r1
    9b32:	002e      	movs	r6, r5
    9b34:	012d      	lsls	r5, r5, #4
    9b36:	42a9      	cmp	r1, r5
    9b38:	da07      	bge.n	9b4a <DataEncrypt+0x4a>
	{
		Payloadinfo[i] = 0; // Padding
    9b3a:	2100      	movs	r1, #0
    9b3c:	4642      	mov	r2, r8
    9b3e:	54d1      	strb	r1, [r2, r3]
	for (i=*Payload_len;i<iterations *16 ; i++ )
    9b40:	3301      	adds	r3, #1
    9b42:	b29b      	uxth	r3, r3
    9b44:	42ab      	cmp	r3, r5
    9b46:	dbfa      	blt.n	9b3e <DataEncrypt+0x3e>
    9b48:	4690      	mov	r8, r2
	}
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    9b4a:	2201      	movs	r2, #1
    9b4c:	ab04      	add	r3, sp, #16
    9b4e:	701a      	strb	r2, [r3, #0]
	for (i=0;i<8;i++)
	{
		CTR_Nonce_and_Counter[i+1] = MACInitParams.PAddress[i];
    9b50:	4b2b      	ldr	r3, [pc, #172]	; (9c00 <DataEncrypt+0x100>)
    9b52:	6858      	ldr	r0, [r3, #4]
    9b54:	2300      	movs	r3, #0
    9b56:	aa04      	add	r2, sp, #16
    9b58:	18d2      	adds	r2, r2, r3
    9b5a:	5cc1      	ldrb	r1, [r0, r3]
    9b5c:	7051      	strb	r1, [r2, #1]
    9b5e:	3301      	adds	r3, #1
	for (i=0;i<8;i++)
    9b60:	2b08      	cmp	r3, #8
    9b62:	d1f8      	bne.n	9b56 <DataEncrypt+0x56>
	}
	for (i=0;i<4;i++)
	{
		CTR_Nonce_and_Counter[i+9] = FrameCounter.v[i];
    9b64:	ab04      	add	r3, sp, #16
    9b66:	725c      	strb	r4, [r3, #9]
    9b68:	0a22      	lsrs	r2, r4, #8
    9b6a:	729a      	strb	r2, [r3, #10]
    9b6c:	0c22      	lsrs	r2, r4, #16
    9b6e:	72da      	strb	r2, [r3, #11]
    9b70:	0e24      	lsrs	r4, r4, #24
    9b72:	731c      	strb	r4, [r3, #12]
	}
	CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
    9b74:	2204      	movs	r2, #4
    9b76:	735a      	strb	r2, [r3, #13]
	CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
    9b78:	2200      	movs	r2, #0
    9b7a:	739a      	strb	r2, [r3, #14]
	CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1
    9b7c:	73da      	strb	r2, [r3, #15]

	for (i=0;i<iterations+1;i++)
    9b7e:	1c73      	adds	r3, r6, #1
    9b80:	4699      	mov	r9, r3
    9b82:	2300      	movs	r3, #0
    9b84:	469b      	mov	fp, r3
    9b86:	9303      	str	r3, [sp, #12]
    9b88:	464b      	mov	r3, r9
    9b8a:	2b00      	cmp	r3, #0
    9b8c:	dd2f      	ble.n	9bee <DataEncrypt+0xee>
	{
		for (j=0;j<16;j++)
		{
			block[j] = CTR_Nonce_and_Counter[j];
    9b8e:	ac08      	add	r4, sp, #32
    9b90:	ad04      	add	r5, sp, #16
		}
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    9b92:	4b1d      	ldr	r3, [pc, #116]	; (9c08 <DataEncrypt+0x108>)
    9b94:	469a      	mov	sl, r3
		for (j=0;j<16;j++)
		{
			if (CTR_Nonce_and_Counter[15] == 0)
			{
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    9b96:	4e1d      	ldr	r6, [pc, #116]	; (9c0c <DataEncrypt+0x10c>)
    9b98:	e017      	b.n	9bca <DataEncrypt+0xca>
			}
			else
			{
				Payloadinfo[j+(i-1)*16] = block[j] ^ Payloadinfo[j+(i-1)*16];
    9b9a:	5d1a      	ldrb	r2, [r3, r4]
    9b9c:	5ccf      	ldrb	r7, [r1, r3]
    9b9e:	407a      	eors	r2, r7
    9ba0:	54ca      	strb	r2, [r1, r3]
    9ba2:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    9ba4:	2b10      	cmp	r3, #16
    9ba6:	d007      	beq.n	9bb8 <DataEncrypt+0xb8>
			if (CTR_Nonce_and_Counter[15] == 0)
    9ba8:	2800      	cmp	r0, #0
    9baa:	d1f6      	bne.n	9b9a <DataEncrypt+0x9a>
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    9bac:	5d1a      	ldrb	r2, [r3, r4]
    9bae:	4667      	mov	r7, ip
    9bb0:	5cff      	ldrb	r7, [r7, r3]
    9bb2:	407a      	eors	r2, r7
    9bb4:	54f2      	strb	r2, [r6, r3]
    9bb6:	e7f4      	b.n	9ba2 <DataEncrypt+0xa2>
			}
		}
		CTR_Nonce_and_Counter[15]++; // Increment Counter for next operation
    9bb8:	3001      	adds	r0, #1
    9bba:	73e8      	strb	r0, [r5, #15]
	for (i=0;i<iterations+1;i++)
    9bbc:	9f03      	ldr	r7, [sp, #12]
    9bbe:	3701      	adds	r7, #1
    9bc0:	b2bb      	uxth	r3, r7
    9bc2:	9303      	str	r3, [sp, #12]
    9bc4:	469b      	mov	fp, r3
    9bc6:	454b      	cmp	r3, r9
    9bc8:	da11      	bge.n	9bee <DataEncrypt+0xee>
		CTR_Nonce_and_Counter[i+1] = MACInitParams.PAddress[i];
    9bca:	2300      	movs	r3, #0
			block[j] = CTR_Nonce_and_Counter[j];
    9bcc:	5d5a      	ldrb	r2, [r3, r5]
    9bce:	551a      	strb	r2, [r3, r4]
    9bd0:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    9bd2:	2b10      	cmp	r3, #16
    9bd4:	d1fa      	bne.n	9bcc <DataEncrypt+0xcc>
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    9bd6:	490e      	ldr	r1, [pc, #56]	; (9c10 <DataEncrypt+0x110>)
    9bd8:	0020      	movs	r0, r4
    9bda:	47d0      	blx	sl
			if (CTR_Nonce_and_Counter[15] == 0)
    9bdc:	7be8      	ldrb	r0, [r5, #15]
				Payloadinfo[j+(i-1)*16] = block[j] ^ Payloadinfo[j+(i-1)*16];
    9bde:	4659      	mov	r1, fp
    9be0:	3901      	subs	r1, #1
    9be2:	0109      	lsls	r1, r1, #4
    9be4:	2300      	movs	r3, #0
    9be6:	4441      	add	r1, r8
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    9be8:	4a0a      	ldr	r2, [pc, #40]	; (9c14 <DataEncrypt+0x114>)
    9bea:	4694      	mov	ip, r2
    9bec:	e7dc      	b.n	9ba8 <DataEncrypt+0xa8>
	}
	return true;

}
    9bee:	2001      	movs	r0, #1
    9bf0:	b00d      	add	sp, #52	; 0x34
    9bf2:	bc3c      	pop	{r2, r3, r4, r5}
    9bf4:	4690      	mov	r8, r2
    9bf6:	4699      	mov	r9, r3
    9bf8:	46a2      	mov	sl, r4
    9bfa:	46ab      	mov	fp, r5
    9bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9bfe:	46c0      	nop			; (mov r8, r8)
    9c00:	200022bc 	.word	0x200022bc
    9c04:	000099d5 	.word	0x000099d5
    9c08:	0000ad91 	.word	0x0000ad91
    9c0c:	200022f0 	.word	0x200022f0
    9c10:	00018fa4 	.word	0x00018fa4
    9c14:	20002308 	.word	0x20002308

00009c18 <validate_mic>:
// Validates the Received mic with the mic computed from data packet decryption.
bool validate_mic(void)
{
	/*************************************************************/
	//SECURITY PATCH UPDATE
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3])
    9c18:	4b0e      	ldr	r3, [pc, #56]	; (9c54 <validate_mic+0x3c>)
    9c1a:	781a      	ldrb	r2, [r3, #0]
    9c1c:	4b0e      	ldr	r3, [pc, #56]	; (9c58 <validate_mic+0x40>)
    9c1e:	781b      	ldrb	r3, [r3, #0]
	/*************************************************************/
	{
		return false;
    9c20:	2000      	movs	r0, #0
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3])
    9c22:	429a      	cmp	r2, r3
    9c24:	d000      	beq.n	9c28 <validate_mic+0x10>
	}
	else
	{
		return true;
	}
}
    9c26:	4770      	bx	lr
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3])
    9c28:	4b0a      	ldr	r3, [pc, #40]	; (9c54 <validate_mic+0x3c>)
    9c2a:	785a      	ldrb	r2, [r3, #1]
    9c2c:	4b0a      	ldr	r3, [pc, #40]	; (9c58 <validate_mic+0x40>)
    9c2e:	785b      	ldrb	r3, [r3, #1]
    9c30:	429a      	cmp	r2, r3
    9c32:	d1f8      	bne.n	9c26 <validate_mic+0xe>
    9c34:	4b07      	ldr	r3, [pc, #28]	; (9c54 <validate_mic+0x3c>)
    9c36:	789a      	ldrb	r2, [r3, #2]
    9c38:	4b07      	ldr	r3, [pc, #28]	; (9c58 <validate_mic+0x40>)
    9c3a:	789b      	ldrb	r3, [r3, #2]
    9c3c:	429a      	cmp	r2, r3
    9c3e:	d1f2      	bne.n	9c26 <validate_mic+0xe>
    9c40:	4b04      	ldr	r3, [pc, #16]	; (9c54 <validate_mic+0x3c>)
    9c42:	78d8      	ldrb	r0, [r3, #3]
    9c44:	4b04      	ldr	r3, [pc, #16]	; (9c58 <validate_mic+0x40>)
    9c46:	78db      	ldrb	r3, [r3, #3]
    9c48:	1ac0      	subs	r0, r0, r3
    9c4a:	4243      	negs	r3, r0
    9c4c:	4158      	adcs	r0, r3
    9c4e:	b2c0      	uxtb	r0, r0
    9c50:	e7e9      	b.n	9c26 <validate_mic+0xe>
    9c52:	46c0      	nop			; (mov r8, r8)
    9c54:	200022f0 	.word	0x200022f0
    9c58:	20002318 	.word	0x20002318

00009c5c <DataDecrypt>:
 *      None
 *
 *****************************************************************************************/
bool DataDecrypt(uint8_t *Payload, uint8_t *PayloadLen, uint8_t *SourceIEEEAddress,
API_UINT32_UNION FrameCounter, uint8_t FrameControl)
{
    9c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9c5e:	46de      	mov	lr, fp
    9c60:	4657      	mov	r7, sl
    9c62:	464e      	mov	r6, r9
    9c64:	4645      	mov	r5, r8
    9c66:	b5e0      	push	{r5, r6, r7, lr}
    9c68:	b091      	sub	sp, #68	; 0x44
    9c6a:	4681      	mov	r9, r0
    9c6c:	9106      	str	r1, [sp, #24]
    9c6e:	9204      	str	r2, [sp, #16]
    9c70:	9305      	str	r3, [sp, #20]
    9c72:	ab1a      	add	r3, sp, #104	; 0x68
    9c74:	781b      	ldrb	r3, [r3, #0]
    9c76:	9307      	str	r3, [sp, #28]
	uint16_t i ;
	uint8_t iterations , block[16] , j , CTR_Nonce_and_Counter[16];
	// Calculating No of blocks in the packet (1 block = 16 bytes of data)
	iterations = *PayloadLen/16;
    9c78:	7809      	ldrb	r1, [r1, #0]
    9c7a:	090a      	lsrs	r2, r1, #4
	if (*PayloadLen % 16 != 0) iterations++;
    9c7c:	070b      	lsls	r3, r1, #28
    9c7e:	d000      	beq.n	9c82 <DataDecrypt+0x26>
    9c80:	3201      	adds	r2, #1

	//mic_generator(&Payloadinfo[0] , *Payload_len);

	for (i=*PayloadLen;i<iterations *16 ; i++ )
    9c82:	b28b      	uxth	r3, r1
    9c84:	0010      	movs	r0, r2
    9c86:	0112      	lsls	r2, r2, #4
    9c88:	4291      	cmp	r1, r2
    9c8a:	da07      	bge.n	9c9c <DataDecrypt+0x40>
	{
		Payload[i] = 0; // Padding
    9c8c:	2100      	movs	r1, #0
    9c8e:	464c      	mov	r4, r9
    9c90:	54e1      	strb	r1, [r4, r3]
	for (i=*PayloadLen;i<iterations *16 ; i++ )
    9c92:	3301      	adds	r3, #1
    9c94:	b29b      	uxth	r3, r3
    9c96:	4293      	cmp	r3, r2
    9c98:	dbfa      	blt.n	9c90 <DataDecrypt+0x34>
    9c9a:	46a1      	mov	r9, r4
	}
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    9c9c:	2201      	movs	r2, #1
    9c9e:	ab08      	add	r3, sp, #32
    9ca0:	701a      	strb	r2, [r3, #0]
    9ca2:	2300      	movs	r3, #0
	for (i=0;i<8;i++)
	{
		CTR_Nonce_and_Counter[i+1] = SourceIEEEAddress[i];
    9ca4:	9c04      	ldr	r4, [sp, #16]
    9ca6:	aa08      	add	r2, sp, #32
    9ca8:	18d2      	adds	r2, r2, r3
    9caa:	5ce1      	ldrb	r1, [r4, r3]
    9cac:	7051      	strb	r1, [r2, #1]
    9cae:	3301      	adds	r3, #1
	for (i=0;i<8;i++)
    9cb0:	2b08      	cmp	r3, #8
    9cb2:	d1f8      	bne.n	9ca6 <DataDecrypt+0x4a>
	}
	for (i=0;i<4;i++)
	{
		CTR_Nonce_and_Counter[i+9] = FrameCounter.v[i];
    9cb4:	ab08      	add	r3, sp, #32
    9cb6:	9905      	ldr	r1, [sp, #20]
    9cb8:	7259      	strb	r1, [r3, #9]
    9cba:	0a0a      	lsrs	r2, r1, #8
    9cbc:	729a      	strb	r2, [r3, #10]
    9cbe:	0c0a      	lsrs	r2, r1, #16
    9cc0:	72da      	strb	r2, [r3, #11]
    9cc2:	0e0a      	lsrs	r2, r1, #24
    9cc4:	731a      	strb	r2, [r3, #12]
	}
	CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode
    9cc6:	2204      	movs	r2, #4
    9cc8:	735a      	strb	r2, [r3, #13]
	CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
    9cca:	2200      	movs	r2, #0
    9ccc:	739a      	strb	r2, [r3, #14]
	CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1
    9cce:	73da      	strb	r2, [r3, #15]


	for (i=0;i<iterations+1;i++)
    9cd0:	1c43      	adds	r3, r0, #1
    9cd2:	469a      	mov	sl, r3
    9cd4:	2500      	movs	r5, #0
    9cd6:	2300      	movs	r3, #0
    9cd8:	4698      	mov	r8, r3
    9cda:	4653      	mov	r3, sl
    9cdc:	2b00      	cmp	r3, #0
    9cde:	dd2e      	ble.n	9d3e <DataDecrypt+0xe2>
	{
		for (j=0;j<16;j++)
		{
			block[j] = CTR_Nonce_and_Counter[j];
    9ce0:	ac0c      	add	r4, sp, #48	; 0x30
    9ce2:	ae08      	add	r6, sp, #32
		}
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    9ce4:	4b26      	ldr	r3, [pc, #152]	; (9d80 <DataDecrypt+0x124>)
    9ce6:	469b      	mov	fp, r3
		for (j=0;j<16;j++)
		{
			if (CTR_Nonce_and_Counter[15] == 0)
			{
				CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    9ce8:	4f26      	ldr	r7, [pc, #152]	; (9d84 <DataDecrypt+0x128>)
    9cea:	4643      	mov	r3, r8
    9cec:	9303      	str	r3, [sp, #12]
    9cee:	46a8      	mov	r8, r5
    9cf0:	e014      	b.n	9d1c <DataDecrypt+0xc0>
			}
			else
			{
				Payload[j+(i-1)*16] = block[j] ^ Payload[j+(i-1)*16];
    9cf2:	5d1a      	ldrb	r2, [r3, r4]
    9cf4:	5ce9      	ldrb	r1, [r5, r3]
    9cf6:	404a      	eors	r2, r1
    9cf8:	54ea      	strb	r2, [r5, r3]
    9cfa:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    9cfc:	2b10      	cmp	r3, #16
    9cfe:	d004      	beq.n	9d0a <DataDecrypt+0xae>
			if (CTR_Nonce_and_Counter[15] == 0)
    9d00:	2800      	cmp	r0, #0
    9d02:	d1f6      	bne.n	9cf2 <DataDecrypt+0x96>
				CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    9d04:	5d1a      	ldrb	r2, [r3, r4]
    9d06:	54fa      	strb	r2, [r7, r3]
    9d08:	e7f7      	b.n	9cfa <DataDecrypt+0x9e>
			}
		}
		CTR_Nonce_and_Counter[15]++; // Increment Counter for next opration
    9d0a:	3001      	adds	r0, #1
    9d0c:	73f0      	strb	r0, [r6, #15]
	for (i=0;i<iterations+1;i++)
    9d0e:	9d03      	ldr	r5, [sp, #12]
    9d10:	3501      	adds	r5, #1
    9d12:	b2ab      	uxth	r3, r5
    9d14:	9303      	str	r3, [sp, #12]
    9d16:	4698      	mov	r8, r3
    9d18:	4553      	cmp	r3, sl
    9d1a:	da10      	bge.n	9d3e <DataDecrypt+0xe2>
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    9d1c:	2300      	movs	r3, #0
			block[j] = CTR_Nonce_and_Counter[j];
    9d1e:	5d9a      	ldrb	r2, [r3, r6]
    9d20:	551a      	strb	r2, [r3, r4]
    9d22:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    9d24:	2b10      	cmp	r3, #16
    9d26:	d1fa      	bne.n	9d1e <DataDecrypt+0xc2>
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    9d28:	4917      	ldr	r1, [pc, #92]	; (9d88 <DataDecrypt+0x12c>)
    9d2a:	0020      	movs	r0, r4
    9d2c:	47d8      	blx	fp
			if (CTR_Nonce_and_Counter[15] == 0)
    9d2e:	7bf0      	ldrb	r0, [r6, #15]
				Payload[j+(i-1)*16] = block[j] ^ Payload[j+(i-1)*16];
    9d30:	4642      	mov	r2, r8
    9d32:	3a01      	subs	r2, #1
    9d34:	0112      	lsls	r2, r2, #4
    9d36:	2300      	movs	r3, #0
    9d38:	444a      	add	r2, r9
    9d3a:	0015      	movs	r5, r2
    9d3c:	e7e0      	b.n	9d00 <DataDecrypt+0xa4>
	}
	*PayloadLen = *PayloadLen-4;
    9d3e:	9b06      	ldr	r3, [sp, #24]
    9d40:	7819      	ldrb	r1, [r3, #0]
    9d42:	3904      	subs	r1, #4
    9d44:	b2c9      	uxtb	r1, r1
    9d46:	7019      	strb	r1, [r3, #0]
	mic_generator(&Payload[0] , *PayloadLen , FrameControl  , FrameCounter , SourceIEEEAddress);
    9d48:	9b04      	ldr	r3, [sp, #16]
    9d4a:	9300      	str	r3, [sp, #0]
    9d4c:	9b05      	ldr	r3, [sp, #20]
    9d4e:	9a07      	ldr	r2, [sp, #28]
    9d50:	4648      	mov	r0, r9
    9d52:	4c0e      	ldr	r4, [pc, #56]	; (9d8c <DataDecrypt+0x130>)
    9d54:	47a0      	blx	r4
    9d56:	2300      	movs	r3, #0
	for (i=0;i<16;i++)
	{
		final_mic_value[i] = CTR_mic[i] ^ CBC_mic[i];
    9d58:	4d0d      	ldr	r5, [pc, #52]	; (9d90 <DataDecrypt+0x134>)
    9d5a:	4c0a      	ldr	r4, [pc, #40]	; (9d84 <DataDecrypt+0x128>)
    9d5c:	480d      	ldr	r0, [pc, #52]	; (9d94 <DataDecrypt+0x138>)
    9d5e:	5ce2      	ldrb	r2, [r4, r3]
    9d60:	5cc1      	ldrb	r1, [r0, r3]
    9d62:	404a      	eors	r2, r1
    9d64:	54ea      	strb	r2, [r5, r3]
    9d66:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    9d68:	2b10      	cmp	r3, #16
    9d6a:	d1f8      	bne.n	9d5e <DataDecrypt+0x102>
	}
	return validate_mic();
    9d6c:	4b0a      	ldr	r3, [pc, #40]	; (9d98 <DataDecrypt+0x13c>)
    9d6e:	4798      	blx	r3

}
    9d70:	b011      	add	sp, #68	; 0x44
    9d72:	bc3c      	pop	{r2, r3, r4, r5}
    9d74:	4690      	mov	r8, r2
    9d76:	4699      	mov	r9, r3
    9d78:	46a2      	mov	sl, r4
    9d7a:	46ab      	mov	fp, r5
    9d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9d7e:	46c0      	nop			; (mov r8, r8)
    9d80:	0000ad91 	.word	0x0000ad91
    9d84:	200022e0 	.word	0x200022e0
    9d88:	00018fa4 	.word	0x00018fa4
    9d8c:	000099d5 	.word	0x000099d5
    9d90:	200022f0 	.word	0x200022f0
    9d94:	20002308 	.word	0x20002308
    9d98:	00009c19 	.word	0x00009c19

00009d9c <MiMAC_Set>:
     * Remarks:
     *      None
     *
     *****************************************************************************************/
bool MiMAC_Set(mac_set_params_t id, uint8_t *value)
{
    9d9c:	b510      	push	{r4, lr}
    switch(id)
    9d9e:	2800      	cmp	r0, #0
    9da0:	d109      	bne.n	9db6 <MiMAC_Set+0x1a>
    {
      case MAC_CHANNEL:
      {
         if(*value > LAST_CHANNEL_NUM) //26 // TODO: this check is necessary here? as we may connect a sub-gig or a 2.4gig?
    9da2:	780b      	ldrb	r3, [r1, #0]
    9da4:	2b19      	cmp	r3, #25
    9da6:	d807      	bhi.n	9db8 <MiMAC_Set+0x1c>
         {
           return false;
         }
          MACCurrentChannel = *value;
    9da8:	4a04      	ldr	r2, [pc, #16]	; (9dbc <MiMAC_Set+0x20>)
    9daa:	7013      	strb	r3, [r2, #0]
          PHY_SetChannel(MACCurrentChannel);
    9dac:	0018      	movs	r0, r3
    9dae:	4b04      	ldr	r3, [pc, #16]	; (9dc0 <MiMAC_Set+0x24>)
    9db0:	4798      	blx	r3
          return true;
    9db2:	2001      	movs	r0, #1
    9db4:	e000      	b.n	9db8 <MiMAC_Set+0x1c>
      break;

     default:
     break;
    }
    return false;
    9db6:	2000      	movs	r0, #0
}
    9db8:	bd10      	pop	{r4, pc}
    9dba:	46c0      	nop			; (mov r8, r8)
    9dbc:	2000232a 	.word	0x2000232a
    9dc0:	0000acdd 	.word	0x0000acdd

00009dc4 <MiMAC_Init>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
bool MiMAC_Init(MACINIT_PARAM initValue)
{
    9dc4:	b530      	push	{r4, r5, lr}
    9dc6:	b083      	sub	sp, #12
    9dc8:	466c      	mov	r4, sp
    9dca:	9000      	str	r0, [sp, #0]
    9dcc:	9101      	str	r1, [sp, #4]
	uint8_t i;

	PHY_Init();
    9dce:	4b10      	ldr	r3, [pc, #64]	; (9e10 <MiMAC_Init+0x4c>)
    9dd0:	4798      	blx	r3
	MACInitParams = initValue;
    9dd2:	4d10      	ldr	r5, [pc, #64]	; (9e14 <MiMAC_Init+0x50>)
    9dd4:	002b      	movs	r3, r5
    9dd6:	cc06      	ldmia	r4!, {r1, r2}
    9dd8:	c306      	stmia	r3!, {r1, r2}
	uint16_t x =  PHY_RandomReq();
    9dda:	4b0f      	ldr	r3, [pc, #60]	; (9e18 <MiMAC_Init+0x54>)
    9ddc:	4798      	blx	r3
    9dde:	0004      	movs	r4, r0
	// Set RF mode
	PHY_SetRxState(true);
    9de0:	2001      	movs	r0, #1
    9de2:	4b0e      	ldr	r3, [pc, #56]	; (9e1c <MiMAC_Init+0x58>)
    9de4:	4798      	blx	r3
	IEEESeqNum =   x & 0xff;
    9de6:	4b0e      	ldr	r3, [pc, #56]	; (9e20 <MiMAC_Init+0x5c>)
    9de8:	701c      	strb	r4, [r3, #0]

	// Set Node Address
	PHY_SetIEEEAddr(MACInitParams.PAddress);
    9dea:	6868      	ldr	r0, [r5, #4]
    9dec:	4b0d      	ldr	r3, [pc, #52]	; (9e24 <MiMAC_Init+0x60>)
    9dee:	4798      	blx	r3

	for (i = 0; i < BANK_SIZE; i++)
	{
		RxBuffer[i].PayloadLen = 0;
    9df0:	4b0d      	ldr	r3, [pc, #52]	; (9e28 <MiMAC_Init+0x64>)
    9df2:	2200      	movs	r2, #0
    9df4:	701a      	strb	r2, [r3, #0]
    9df6:	2102      	movs	r1, #2
    9df8:	31ff      	adds	r1, #255	; 0xff
    9dfa:	545a      	strb	r2, [r3, r1]
    9dfc:	490b      	ldr	r1, [pc, #44]	; (9e2c <MiMAC_Init+0x68>)
    9dfe:	545a      	strb	r2, [r3, r1]
    9e00:	490b      	ldr	r1, [pc, #44]	; (9e30 <MiMAC_Init+0x6c>)
    9e02:	545a      	strb	r2, [r3, r1]
				OutgoingFrameCounter.Val = 0;
				PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
				OutgoingFrameCounter.Val = 1;
			}
		#else
			OutgoingFrameCounter.Val = 1;
    9e04:	3201      	adds	r2, #1
    9e06:	4b0b      	ldr	r3, [pc, #44]	; (9e34 <MiMAC_Init+0x70>)
    9e08:	601a      	str	r2, [r3, #0]
		#endif
	#endif

	return true;
}
    9e0a:	2001      	movs	r0, #1
    9e0c:	b003      	add	sp, #12
    9e0e:	bd30      	pop	{r4, r5, pc}
    9e10:	0000ac0d 	.word	0x0000ac0d
    9e14:	200022bc 	.word	0x200022bc
    9e18:	0000ad79 	.word	0x0000ad79
    9e1c:	0000ac41 	.word	0x0000ac41
    9e20:	200021b1 	.word	0x200021b1
    9e24:	0000ad9d 	.word	0x0000ad9d
    9e28:	20002434 	.word	0x20002434
    9e2c:	00000202 	.word	0x00000202
    9e30:	00000303 	.word	0x00000303
    9e34:	20002304 	.word	0x20002304

00009e38 <MiMAC_SendPacket>:

bool MiMAC_SendPacket( MAC_TRANS_PARAM transParam,
         uint8_t *MACPayload,
         uint8_t MACPayloadLen, uint8_t msghandle,
         DataConf_callback_t ConfCallback)
{
    9e38:	b5f0      	push	{r4, r5, r6, r7, lr}
    9e3a:	46de      	mov	lr, fp
    9e3c:	4657      	mov	r7, sl
    9e3e:	464e      	mov	r6, r9
    9e40:	4645      	mov	r5, r8
    9e42:	b5e0      	push	{r5, r6, r7, lr}
    9e44:	b087      	sub	sp, #28
    9e46:	af03      	add	r7, sp, #12
    9e48:	1c04      	adds	r4, r0, #0
    9e4a:	9003      	str	r0, [sp, #12]
    9e4c:	0008      	movs	r0, r1
    9e4e:	9104      	str	r1, [sp, #16]
    9e50:	0015      	movs	r5, r2
    9e52:	0a2d      	lsrs	r5, r5, #8
    9e54:	9205      	str	r2, [sp, #20]
    9e56:	9300      	str	r3, [sp, #0]
    9e58:	ab11      	add	r3, sp, #68	; 0x44
    9e5a:	781b      	ldrb	r3, [r3, #0]
    9e5c:	469a      	mov	sl, r3
    9e5e:	b2e4      	uxtb	r4, r4
    9e60:	06a6      	lsls	r6, r4, #26
    9e62:	0ff6      	lsrs	r6, r6, #31
    9e64:	9002      	str	r0, [sp, #8]
    9e66:	b2d3      	uxtb	r3, r2
    9e68:	469c      	mov	ip, r3
    9e6a:	b2ed      	uxtb	r5, r5
    uint8_t headerLength;
    uint8_t loc = 0;
    uint8_t i = 0;

	uint8_t frameControl = 0;
	dataConfAvailable = false;
    9e6c:	2200      	movs	r2, #0
    9e6e:	4bc4      	ldr	r3, [pc, #784]	; (a180 <MiMAC_SendPacket+0x348>)
    9e70:	701a      	strb	r2, [r3, #0]
	#ifndef TARGET_SMALL
		bool IntraPAN;
	#endif
	
	MACdatatransParam = transParam;
    9e72:	4bc4      	ldr	r3, [pc, #784]	; (a184 <MiMAC_SendPacket+0x34c>)
    9e74:	cf07      	ldmia	r7!, {r0, r1, r2}
    9e76:	c307      	stmia	r3!, {r0, r1, r2}

    if (transParam.flags.bits.broadcast)
    9e78:	0763      	lsls	r3, r4, #29
    9e7a:	d501      	bpl.n	9e80 <MiMAC_SendPacket+0x48>
    {
        transParam.altDestAddr = true;
    9e7c:	2301      	movs	r3, #1
    9e7e:	469c      	mov	ip, r3
    }

    if (transParam.flags.bits.secEn)
    9e80:	2308      	movs	r3, #8
    9e82:	4023      	ands	r3, r4
    9e84:	001a      	movs	r2, r3
    {
        transParam.altSrcAddr = false;
    9e86:	4253      	negs	r3, r2
    9e88:	4153      	adcs	r3, r2
    9e8a:	425b      	negs	r3, r3
    9e8c:	401d      	ands	r5, r3
    }

    // set the frame control in variable i
    if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND)
    9e8e:	2303      	movs	r3, #3
    9e90:	4023      	ands	r3, r4
    9e92:	2b01      	cmp	r3, #1
    9e94:	d04d      	beq.n	9f32 <MiMAC_SendPacket+0xfa>
    {
        frameControl = 0x03;
    } else if (transParam.flags.bits.packetType == PACKET_TYPE_DATA)
    {
        frameControl = 0x01;
    9e96:	2201      	movs	r2, #1
    9e98:	4691      	mov	r9, r2
    } else if (transParam.flags.bits.packetType == PACKET_TYPE_DATA)
    9e9a:	2b00      	cmp	r3, #0
    9e9c:	d004      	beq.n	9ea8 <MiMAC_SendPacket+0x70>
    }
	else if (transParam.flags.bits.packetType == PACKET_TYPE_ACK)
    {
        frameControl = 0x02;
    9e9e:	1e9a      	subs	r2, r3, #2
    9ea0:	4251      	negs	r1, r2
    9ea2:	4151      	adcs	r1, r2
    9ea4:	004a      	lsls	r2, r1, #1
    9ea6:	4691      	mov	r9, r2
    }
    // decide the header length for different addressing mode
#ifndef TARGET_SMALL
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    9ea8:	aa03      	add	r2, sp, #12
    9eaa:	8952      	ldrh	r2, [r2, #10]
    9eac:	48b6      	ldr	r0, [pc, #728]	; (a188 <MiMAC_SendPacket+0x350>)
    9eae:	8800      	ldrh	r0, [r0, #0]
    9eb0:	4290      	cmp	r0, r2
    9eb2:	d041      	beq.n	9f38 <MiMAC_SendPacket+0x100>
    }
#ifndef TARGET_SMALL
    else
    {
        headerLength = 7;
        IntraPAN = false;
    9eb4:	2200      	movs	r2, #0
    9eb6:	4693      	mov	fp, r2
        headerLength = 7;
    9eb8:	3207      	adds	r2, #7
    }
#endif

    if (transParam.altDestAddr)
    9eba:	46e0      	mov	r8, ip
    {
        headerLength += 2;
    } else
    {
        headerLength += 8;
    9ebc:	0017      	movs	r7, r2
    9ebe:	3708      	adds	r7, #8
    if (transParam.altDestAddr)
    9ec0:	4661      	mov	r1, ip
    9ec2:	2900      	cmp	r1, #0
    9ec4:	d000      	beq.n	9ec8 <MiMAC_SendPacket+0x90>
        headerLength += 2;
    9ec6:	1c97      	adds	r7, r2, #2
    }

    if (transParam.altSrcAddr)
    9ec8:	2d00      	cmp	r5, #0
    9eca:	d044      	beq.n	9f56 <MiMAC_SendPacket+0x11e>
    {
        headerLength += 2;
    9ecc:	3702      	adds	r7, #2
    9ece:	b2fa      	uxtb	r2, r7
    9ed0:	9201      	str	r2, [sp, #4]
    } else
    {
        headerLength += 8;
    }

    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false)
    9ed2:	2224      	movs	r2, #36	; 0x24
    9ed4:	4014      	ands	r4, r2
    9ed6:	2c20      	cmp	r4, #32
    9ed8:	d041      	beq.n	9f5e <MiMAC_SendPacket+0x126>
    {
        frameControl |= 0x20;
    }

    // use PACKET_TYPE_RESERVE to represent beacon. Fixed format for beacon packet
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    9eda:	2b03      	cmp	r3, #3
    9edc:	d044      	beq.n	9f68 <MiMAC_SendPacket+0x130>
        IntraPAN = false;
#endif
        transParam.altSrcAddr = true;
        transParam.flags.bits.ackReq = false;
    }
	if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND) 
    9ede:	aa03      	add	r2, sp, #12
    9ee0:	0171      	lsls	r1, r6, #5
    9ee2:	7813      	ldrb	r3, [r2, #0]
    9ee4:	2020      	movs	r0, #32
    9ee6:	4383      	bics	r3, r0
    9ee8:	430b      	orrs	r3, r1
    9eea:	7013      	strb	r3, [r2, #0]
    9eec:	2203      	movs	r2, #3
    9eee:	4013      	ands	r3, r2
    9ef0:	2b01      	cmp	r3, #1
    9ef2:	d041      	beq.n	9f78 <MiMAC_SendPacket+0x140>
    {
        transParam.flags.bits.ackReq = false;
    }

#ifdef ENABLE_SECURITY
    if (transParam.flags.bits.secEn)
    9ef4:	ab03      	add	r3, sp, #12
    9ef6:	0172      	lsls	r2, r6, #5
    9ef8:	781c      	ldrb	r4, [r3, #0]
    9efa:	2120      	movs	r1, #32
    9efc:	438c      	bics	r4, r1
    9efe:	4314      	orrs	r4, r2
    9f00:	701c      	strb	r4, [r3, #0]
    9f02:	b2e4      	uxtb	r4, r4
    9f04:	0723      	lsls	r3, r4, #28
    9f06:	d439      	bmi.n	9f7c <MiMAC_SendPacket+0x144>
		// 4 byte mic and 5 byte outgoing frame counter
		packet[loc++] = MACPayloadLen+headerLength+9;
    } else
#endif
    {
		packet[loc++] = MACPayloadLen+headerLength;
    9f08:	ab10      	add	r3, sp, #64	; 0x40
    9f0a:	781b      	ldrb	r3, [r3, #0]
    9f0c:	9a01      	ldr	r2, [sp, #4]
    9f0e:	18d7      	adds	r7, r2, r3
    9f10:	4b9e      	ldr	r3, [pc, #632]	; (a18c <MiMAC_SendPacket+0x354>)
    9f12:	701f      	strb	r7, [r3, #0]
    }

    // set frame control LSB
	packet[loc++] = frameControl;
    9f14:	4b9d      	ldr	r3, [pc, #628]	; (a18c <MiMAC_SendPacket+0x354>)
    9f16:	464a      	mov	r2, r9
    9f18:	705a      	strb	r2, [r3, #1]

    // set frame control MSB
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    9f1a:	43e3      	mvns	r3, r4
    9f1c:	079b      	lsls	r3, r3, #30
    9f1e:	d040      	beq.n	9fa2 <MiMAC_SendPacket+0x16a>
		packet[loc++] = 0x80;
        // sequence number
		packet[loc++] = IEEESeqNum++;
    } else
    {
        if (transParam.altDestAddr && transParam.altSrcAddr)
    9f20:	4643      	mov	r3, r8
    9f22:	2b00      	cmp	r3, #0
    9f24:	d05f      	beq.n	9fe6 <MiMAC_SendPacket+0x1ae>
    9f26:	2d00      	cmp	r5, #0
    9f28:	d045      	beq.n	9fb6 <MiMAC_SendPacket+0x17e>
        {
			packet[loc++] = 0x88;
    9f2a:	2288      	movs	r2, #136	; 0x88
    9f2c:	4b97      	ldr	r3, [pc, #604]	; (a18c <MiMAC_SendPacket+0x354>)
    9f2e:	709a      	strb	r2, [r3, #2]
    9f30:	e044      	b.n	9fbc <MiMAC_SendPacket+0x184>
        frameControl = 0x03;
    9f32:	2203      	movs	r2, #3
    9f34:	4691      	mov	r9, r2
    9f36:	e7b7      	b.n	9ea8 <MiMAC_SendPacket+0x70>
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    9f38:	4895      	ldr	r0, [pc, #596]	; (a190 <MiMAC_SendPacket+0x358>)
    9f3a:	4282      	cmp	r2, r0
    9f3c:	d007      	beq.n	9f4e <MiMAC_SendPacket+0x116>
        frameControl |= 0x40;
    9f3e:	2240      	movs	r2, #64	; 0x40
    9f40:	4649      	mov	r1, r9
    9f42:	4311      	orrs	r1, r2
    9f44:	4689      	mov	r9, r1
        IntraPAN = true;
    9f46:	3a3f      	subs	r2, #63	; 0x3f
    9f48:	4693      	mov	fp, r2
        headerLength = 5;
    9f4a:	3204      	adds	r2, #4
        IntraPAN = true;
    9f4c:	e7b5      	b.n	9eba <MiMAC_SendPacket+0x82>
        IntraPAN = false;
    9f4e:	2200      	movs	r2, #0
    9f50:	4693      	mov	fp, r2
        headerLength = 7;
    9f52:	3207      	adds	r2, #7
    9f54:	e7b1      	b.n	9eba <MiMAC_SendPacket+0x82>
        headerLength += 8;
    9f56:	3708      	adds	r7, #8
    9f58:	b2fa      	uxtb	r2, r7
    9f5a:	9201      	str	r2, [sp, #4]
    9f5c:	e7b9      	b.n	9ed2 <MiMAC_SendPacket+0x9a>
        frameControl |= 0x20;
    9f5e:	3a04      	subs	r2, #4
    9f60:	4649      	mov	r1, r9
    9f62:	4311      	orrs	r1, r2
    9f64:	4689      	mov	r9, r1
    9f66:	e7b8      	b.n	9eda <MiMAC_SendPacket+0xa2>
        transParam.altSrcAddr = true;
    9f68:	2501      	movs	r5, #1
        transParam.flags.bits.ackReq = false;
    9f6a:	2600      	movs	r6, #0
        IntraPAN = false;
    9f6c:	2300      	movs	r3, #0
    9f6e:	469b      	mov	fp, r3
        frameControl = 0x00;
    9f70:	4699      	mov	r9, r3
        headerLength = 7;
    9f72:	3307      	adds	r3, #7
    9f74:	9301      	str	r3, [sp, #4]
    9f76:	e7b2      	b.n	9ede <MiMAC_SendPacket+0xa6>
        transParam.flags.bits.ackReq = false;
    9f78:	2600      	movs	r6, #0
    9f7a:	e7bb      	b.n	9ef4 <MiMAC_SendPacket+0xbc>
        frameControl |= 0x08;
    9f7c:	2308      	movs	r3, #8
    9f7e:	464a      	mov	r2, r9
    9f80:	431a      	orrs	r2, r3
    9f82:	4691      	mov	r9, r2
		DataEncrypt(MACPayload, &MACPayloadLen, OutgoingFrameCounter, frameControl);
    9f84:	4b83      	ldr	r3, [pc, #524]	; (a194 <MiMAC_SendPacket+0x35c>)
    9f86:	681a      	ldr	r2, [r3, #0]
    9f88:	464b      	mov	r3, r9
    9f8a:	a910      	add	r1, sp, #64	; 0x40
    9f8c:	9800      	ldr	r0, [sp, #0]
    9f8e:	4f82      	ldr	r7, [pc, #520]	; (a198 <MiMAC_SendPacket+0x360>)
    9f90:	47b8      	blx	r7
		packet[loc++] = MACPayloadLen+headerLength+9;
    9f92:	ab10      	add	r3, sp, #64	; 0x40
    9f94:	781b      	ldrb	r3, [r3, #0]
    9f96:	3309      	adds	r3, #9
    9f98:	9a01      	ldr	r2, [sp, #4]
    9f9a:	18d7      	adds	r7, r2, r3
    9f9c:	4b7b      	ldr	r3, [pc, #492]	; (a18c <MiMAC_SendPacket+0x354>)
    9f9e:	701f      	strb	r7, [r3, #0]
    9fa0:	e7b8      	b.n	9f14 <MiMAC_SendPacket+0xdc>
		packet[loc++] = 0x80;
    9fa2:	4b7a      	ldr	r3, [pc, #488]	; (a18c <MiMAC_SendPacket+0x354>)
    9fa4:	2280      	movs	r2, #128	; 0x80
    9fa6:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    9fa8:	497c      	ldr	r1, [pc, #496]	; (a19c <MiMAC_SendPacket+0x364>)
    9faa:	780a      	ldrb	r2, [r1, #0]
    9fac:	1c50      	adds	r0, r2, #1
    9fae:	7008      	strb	r0, [r1, #0]
    9fb0:	70da      	strb	r2, [r3, #3]
    9fb2:	2204      	movs	r2, #4
    9fb4:	e03e      	b.n	a034 <MiMAC_SendPacket+0x1fc>

        } else if (transParam.altDestAddr && transParam.altSrcAddr == 0)
        {
			packet[loc++] = 0xC8;
    9fb6:	22c8      	movs	r2, #200	; 0xc8
    9fb8:	4b74      	ldr	r3, [pc, #464]	; (a18c <MiMAC_SendPacket+0x354>)
    9fba:	709a      	strb	r2, [r3, #2]
        {
			packet[loc++] = 0xCC;
        }

        // sequence number
		packet[loc++] = IEEESeqNum++;
    9fbc:	4b77      	ldr	r3, [pc, #476]	; (a19c <MiMAC_SendPacket+0x364>)
    9fbe:	781a      	ldrb	r2, [r3, #0]
    9fc0:	1c51      	adds	r1, r2, #1
    9fc2:	7019      	strb	r1, [r3, #0]
    9fc4:	4b71      	ldr	r3, [pc, #452]	; (a18c <MiMAC_SendPacket+0x354>)
    9fc6:	70da      	strb	r2, [r3, #3]

        // destination PANID
		packet[loc++] = transParam.DestPANID.v[0];
    9fc8:	aa03      	add	r2, sp, #12
    9fca:	7a91      	ldrb	r1, [r2, #10]
    9fcc:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    9fce:	7ad2      	ldrb	r2, [r2, #11]
    9fd0:	715a      	strb	r2, [r3, #5]

        // destination address
        if (transParam.flags.bits.broadcast)
    9fd2:	0763      	lsls	r3, r4, #29
    9fd4:	d429      	bmi.n	a02a <MiMAC_SendPacket+0x1f2>
			packet[loc++] = 0xFF;
        } else
        {
            if (transParam.altDestAddr)
            {
				packet[loc++] = transParam.DestAddress[0];
    9fd6:	9902      	ldr	r1, [sp, #8]
    9fd8:	780a      	ldrb	r2, [r1, #0]
    9fda:	4b6c      	ldr	r3, [pc, #432]	; (a18c <MiMAC_SendPacket+0x354>)
    9fdc:	719a      	strb	r2, [r3, #6]
				packet[loc++] = transParam.DestAddress[1];
    9fde:	784a      	ldrb	r2, [r1, #1]
    9fe0:	71da      	strb	r2, [r3, #7]
    9fe2:	2208      	movs	r2, #8
    9fe4:	e026      	b.n	a034 <MiMAC_SendPacket+0x1fc>
        } else if (transParam.altDestAddr == 0 && transParam.altSrcAddr == 1)
    9fe6:	2d00      	cmp	r5, #0
    9fe8:	d00f      	beq.n	a00a <MiMAC_SendPacket+0x1d2>
			packet[loc++] = 0x8C;
    9fea:	4b68      	ldr	r3, [pc, #416]	; (a18c <MiMAC_SendPacket+0x354>)
    9fec:	228c      	movs	r2, #140	; 0x8c
    9fee:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    9ff0:	496a      	ldr	r1, [pc, #424]	; (a19c <MiMAC_SendPacket+0x364>)
    9ff2:	780a      	ldrb	r2, [r1, #0]
    9ff4:	1c50      	adds	r0, r2, #1
    9ff6:	7008      	strb	r0, [r1, #0]
    9ff8:	70da      	strb	r2, [r3, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    9ffa:	aa03      	add	r2, sp, #12
    9ffc:	7a91      	ldrb	r1, [r2, #10]
    9ffe:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    a000:	7ad2      	ldrb	r2, [r2, #11]
    a002:	715a      	strb	r2, [r3, #5]
        if (transParam.flags.bits.broadcast)
    a004:	0763      	lsls	r3, r4, #29
    a006:	d410      	bmi.n	a02a <MiMAC_SendPacket+0x1f2>
    a008:	e099      	b.n	a13e <MiMAC_SendPacket+0x306>
			packet[loc++] = 0xCC;
    a00a:	4b60      	ldr	r3, [pc, #384]	; (a18c <MiMAC_SendPacket+0x354>)
    a00c:	22cc      	movs	r2, #204	; 0xcc
    a00e:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    a010:	4962      	ldr	r1, [pc, #392]	; (a19c <MiMAC_SendPacket+0x364>)
    a012:	780a      	ldrb	r2, [r1, #0]
    a014:	1c50      	adds	r0, r2, #1
    a016:	7008      	strb	r0, [r1, #0]
    a018:	70da      	strb	r2, [r3, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    a01a:	aa03      	add	r2, sp, #12
    a01c:	7a91      	ldrb	r1, [r2, #10]
    a01e:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    a020:	7ad2      	ldrb	r2, [r2, #11]
    a022:	715a      	strb	r2, [r3, #5]
        if (transParam.flags.bits.broadcast)
    a024:	0763      	lsls	r3, r4, #29
    a026:	d400      	bmi.n	a02a <MiMAC_SendPacket+0x1f2>
    a028:	e085      	b.n	a136 <MiMAC_SendPacket+0x2fe>
			packet[loc++] = 0xFF;
    a02a:	4b58      	ldr	r3, [pc, #352]	; (a18c <MiMAC_SendPacket+0x354>)
    a02c:	22ff      	movs	r2, #255	; 0xff
    a02e:	719a      	strb	r2, [r3, #6]
			packet[loc++] = 0xFF;
    a030:	71da      	strb	r2, [r3, #7]
    a032:	3af7      	subs	r2, #247	; 0xf7
                }
            }
        }
    }
	
	if(transParam.flags.bits.ackReq)
    a034:	a903      	add	r1, sp, #12
    a036:	0170      	lsls	r0, r6, #5
    a038:	780b      	ldrb	r3, [r1, #0]
    a03a:	2420      	movs	r4, #32
    a03c:	43a3      	bics	r3, r4
    a03e:	4303      	orrs	r3, r0
    a040:	700b      	strb	r3, [r1, #0]
    a042:	069b      	lsls	r3, r3, #26
    a044:	d400      	bmi.n	a048 <MiMAC_SendPacket+0x210>
    a046:	e085      	b.n	a154 <MiMAC_SendPacket+0x31c>
	{
	 	AckSeqNum = IEEESeqNum-1;
    a048:	4b54      	ldr	r3, [pc, #336]	; (a19c <MiMAC_SendPacket+0x364>)
    a04a:	781b      	ldrb	r3, [r3, #0]
    a04c:	3b01      	subs	r3, #1
    a04e:	4954      	ldr	r1, [pc, #336]	; (a1a0 <MiMAC_SendPacket+0x368>)
    a050:	700b      	strb	r3, [r1, #0]
		 AckReqData = 1;
    a052:	2101      	movs	r1, #1
    a054:	4b53      	ldr	r3, [pc, #332]	; (a1a4 <MiMAC_SendPacket+0x36c>)
    a056:	7019      	strb	r1, [r3, #0]
	{
		AckReqData = 0;
	}
#ifndef TARGET_SMALL
    // source PANID if necessary
    if (IntraPAN == false)
    a058:	465b      	mov	r3, fp
    a05a:	2b00      	cmp	r3, #0
    a05c:	d109      	bne.n	a072 <MiMAC_SendPacket+0x23a>
    {
		packet[loc++] = MAC_PANID.v[0];
    a05e:	1c53      	adds	r3, r2, #1
    a060:	b2db      	uxtb	r3, r3
    a062:	494a      	ldr	r1, [pc, #296]	; (a18c <MiMAC_SendPacket+0x354>)
    a064:	4848      	ldr	r0, [pc, #288]	; (a188 <MiMAC_SendPacket+0x350>)
    a066:	7804      	ldrb	r4, [r0, #0]
    a068:	548c      	strb	r4, [r1, r2]
		packet[loc++] = MAC_PANID.v[1];
    a06a:	3202      	adds	r2, #2
    a06c:	b2d2      	uxtb	r2, r2
    a06e:	7840      	ldrb	r0, [r0, #1]
    a070:	54c8      	strb	r0, [r1, r3]
    }
#endif

    // source address
    if (transParam.altSrcAddr)
    a072:	2d00      	cmp	r5, #0
    a074:	d100      	bne.n	a078 <MiMAC_SendPacket+0x240>
    a076:	e071      	b.n	a15c <MiMAC_SendPacket+0x324>
    {
		packet[loc++] = myNetworkAddress.v[0];
    a078:	4944      	ldr	r1, [pc, #272]	; (a18c <MiMAC_SendPacket+0x354>)
    a07a:	484b      	ldr	r0, [pc, #300]	; (a1a8 <MiMAC_SendPacket+0x370>)
    a07c:	7803      	ldrb	r3, [r0, #0]
    a07e:	548b      	strb	r3, [r1, r2]
		packet[loc++] = myNetworkAddress.v[1];
    a080:	1c93      	adds	r3, r2, #2
    a082:	b2db      	uxtb	r3, r3
		packet[loc++] = myNetworkAddress.v[0];
    a084:	3201      	adds	r2, #1
		packet[loc++] = myNetworkAddress.v[1];
    a086:	b2d2      	uxtb	r2, r2
    a088:	7840      	ldrb	r0, [r0, #1]
    a08a:	5488      	strb	r0, [r1, r2]
        {
			packet[loc++] = MACInitParams.PAddress[i];
        }
    }
#ifdef ENABLE_SECURITY
if (transParam.flags.bits.secEn)
    a08c:	aa03      	add	r2, sp, #12
    a08e:	0171      	lsls	r1, r6, #5
    a090:	7816      	ldrb	r6, [r2, #0]
    a092:	2020      	movs	r0, #32
    a094:	4386      	bics	r6, r0
    a096:	430e      	orrs	r6, r1
    a098:	7016      	strb	r6, [r2, #0]
    a09a:	0732      	lsls	r2, r6, #28
    a09c:	d515      	bpl.n	a0ca <MiMAC_SendPacket+0x292>
    a09e:	0019      	movs	r1, r3
    a0a0:	2200      	movs	r2, #0
{
	// fill the additional security aux header
	for (i = 0; i < 4; i++)
	{
		packet[loc++] = OutgoingFrameCounter.v[i];
    a0a2:	4e3a      	ldr	r6, [pc, #232]	; (a18c <MiMAC_SendPacket+0x354>)
    a0a4:	4d3b      	ldr	r5, [pc, #236]	; (a194 <MiMAC_SendPacket+0x35c>)
    a0a6:	1c48      	adds	r0, r1, #1
    a0a8:	5cac      	ldrb	r4, [r5, r2]
    a0aa:	5474      	strb	r4, [r6, r1]
    a0ac:	3201      	adds	r2, #1
    a0ae:	b2c1      	uxtb	r1, r0
	for (i = 0; i < 4; i++)
    a0b0:	2a04      	cmp	r2, #4
    a0b2:	d1f8      	bne.n	a0a6 <MiMAC_SendPacket+0x26e>
    a0b4:	1d1a      	adds	r2, r3, #4
    a0b6:	b2d2      	uxtb	r2, r2
	}
	OutgoingFrameCounter.Val++;
    a0b8:	4836      	ldr	r0, [pc, #216]	; (a194 <MiMAC_SendPacket+0x35c>)
    a0ba:	6801      	ldr	r1, [r0, #0]
    a0bc:	3101      	adds	r1, #1
    a0be:	6001      	str	r1, [r0, #0]
	{
		PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
	}
	#endif
	//copy myKeySequenceNumber
	packet[loc++] = myKeySequenceNumber;
    a0c0:	3305      	adds	r3, #5
    a0c2:	b2db      	uxtb	r3, r3
    a0c4:	2000      	movs	r0, #0
    a0c6:	4931      	ldr	r1, [pc, #196]	; (a18c <MiMAC_SendPacket+0x354>)
    a0c8:	5488      	strb	r0, [r1, r2]
    {
		packet[loc++] = MACPayload[i];
    }
#else
    // write the payload
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    a0ca:	aa10      	add	r2, sp, #64	; 0x40
    a0cc:	7816      	ldrb	r6, [r2, #0]
    a0ce:	2e00      	cmp	r6, #0
    a0d0:	d053      	beq.n	a17a <MiMAC_SendPacket+0x342>
    a0d2:	9a00      	ldr	r2, [sp, #0]
    a0d4:	18f1      	adds	r1, r6, r3
    a0d6:	b2c9      	uxtb	r1, r1
    {
	    packet[loc++] = MACPayload[i];
    a0d8:	4d2c      	ldr	r5, [pc, #176]	; (a18c <MiMAC_SendPacket+0x354>)
    a0da:	1c58      	adds	r0, r3, #1
    a0dc:	7814      	ldrb	r4, [r2, #0]
    a0de:	54ec      	strb	r4, [r5, r3]
    a0e0:	3201      	adds	r2, #1
    a0e2:	b2c3      	uxtb	r3, r0
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    a0e4:	428b      	cmp	r3, r1
    a0e6:	d1f8      	bne.n	a0da <MiMAC_SendPacket+0x2a2>
    }
	packet[loc++] = final_mic_value[0];
    a0e8:	4828      	ldr	r0, [pc, #160]	; (a18c <MiMAC_SendPacket+0x354>)
    a0ea:	4b30      	ldr	r3, [pc, #192]	; (a1ac <MiMAC_SendPacket+0x374>)
    a0ec:	781a      	ldrb	r2, [r3, #0]
    a0ee:	5442      	strb	r2, [r0, r1]
    a0f0:	1c4a      	adds	r2, r1, #1
	packet[loc++] = final_mic_value[1];
    a0f2:	b2d2      	uxtb	r2, r2
    a0f4:	785c      	ldrb	r4, [r3, #1]
    a0f6:	5484      	strb	r4, [r0, r2]
    a0f8:	1c8a      	adds	r2, r1, #2
	packet[loc++] = final_mic_value[2];
    a0fa:	b2d2      	uxtb	r2, r2
    a0fc:	789c      	ldrb	r4, [r3, #2]
    a0fe:	5484      	strb	r4, [r0, r2]
    a100:	3103      	adds	r1, #3
	packet[loc++] = final_mic_value[3];
    a102:	b2c9      	uxtb	r1, r1
    a104:	78db      	ldrb	r3, [r3, #3]
    a106:	5443      	strb	r3, [r0, r1]
    } else
    {
        i = 0x01;
    }

    dataPointer = MACPayload;
    a108:	4b29      	ldr	r3, [pc, #164]	; (a1b0 <MiMAC_SendPacket+0x378>)
    a10a:	9a00      	ldr	r2, [sp, #0]
    a10c:	601a      	str	r2, [r3, #0]
	dataConfCallback = ConfCallback;
    a10e:	4b29      	ldr	r3, [pc, #164]	; (a1b4 <MiMAC_SendPacket+0x37c>)
    a110:	9a12      	ldr	r2, [sp, #72]	; 0x48
    a112:	601a      	str	r2, [r3, #0]
    dataHandle = msghandle;
    a114:	4b28      	ldr	r3, [pc, #160]	; (a1b8 <MiMAC_SendPacket+0x380>)
    a116:	4652      	mov	r2, sl
    a118:	701a      	strb	r2, [r3, #0]
	MACdataPayloadLen = MACPayloadLen;
    a11a:	4b28      	ldr	r3, [pc, #160]	; (a1bc <MiMAC_SendPacket+0x384>)
    a11c:	701e      	strb	r6, [r3, #0]
	//DataRetryCount = 0;

    // Now Trigger the Transmission of packet
    return PHY_DataReq(packet);					
    a11e:	4b28      	ldr	r3, [pc, #160]	; (a1c0 <MiMAC_SendPacket+0x388>)
    a120:	4798      	blx	r3
    a122:	1e43      	subs	r3, r0, #1
    a124:	4198      	sbcs	r0, r3
    a126:	b2c0      	uxtb	r0, r0
}
    a128:	b007      	add	sp, #28
    a12a:	bc3c      	pop	{r2, r3, r4, r5}
    a12c:	4690      	mov	r8, r2
    a12e:	4699      	mov	r9, r3
    a130:	46a2      	mov	sl, r4
    a132:	46ab      	mov	fp, r5
    a134:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (transParam.altDestAddr)
    a136:	4643      	mov	r3, r8
    a138:	2b00      	cmp	r3, #0
    a13a:	d000      	beq.n	a13e <MiMAC_SendPacket+0x306>
    a13c:	e74b      	b.n	9fd6 <MiMAC_SendPacket+0x19e>
        transParam.flags.bits.ackReq = false;
    a13e:	2300      	movs	r3, #0
					packet[loc++] = transParam.DestAddress[i];
    a140:	4812      	ldr	r0, [pc, #72]	; (a18c <MiMAC_SendPacket+0x354>)
    a142:	9c02      	ldr	r4, [sp, #8]
    a144:	5ce1      	ldrb	r1, [r4, r3]
    a146:	181a      	adds	r2, r3, r0
    a148:	7191      	strb	r1, [r2, #6]
    a14a:	3301      	adds	r3, #1
                for (i = 0; i < 8; i++)
    a14c:	2b08      	cmp	r3, #8
    a14e:	d1f9      	bne.n	a144 <MiMAC_SendPacket+0x30c>
					packet[loc++] = transParam.DestAddress[i];
    a150:	220e      	movs	r2, #14
    a152:	e76f      	b.n	a034 <MiMAC_SendPacket+0x1fc>
		AckReqData = 0;
    a154:	2100      	movs	r1, #0
    a156:	4b13      	ldr	r3, [pc, #76]	; (a1a4 <MiMAC_SendPacket+0x36c>)
    a158:	7019      	strb	r1, [r3, #0]
    a15a:	e77d      	b.n	a058 <MiMAC_SendPacket+0x220>
			packet[loc++] = MACInitParams.PAddress[i];
    a15c:	4b19      	ldr	r3, [pc, #100]	; (a1c4 <MiMAC_SendPacket+0x38c>)
    a15e:	6859      	ldr	r1, [r3, #4]
    a160:	0014      	movs	r4, r2
    a162:	3408      	adds	r4, #8
    a164:	b2e4      	uxtb	r4, r4
    a166:	4d09      	ldr	r5, [pc, #36]	; (a18c <MiMAC_SendPacket+0x354>)
    a168:	1c53      	adds	r3, r2, #1
    a16a:	b2db      	uxtb	r3, r3
    a16c:	7808      	ldrb	r0, [r1, #0]
    a16e:	54a8      	strb	r0, [r5, r2]
    a170:	3101      	adds	r1, #1
    a172:	001a      	movs	r2, r3
        for (i = 0; i < 8; i++)
    a174:	429c      	cmp	r4, r3
    a176:	d1f7      	bne.n	a168 <MiMAC_SendPacket+0x330>
    a178:	e788      	b.n	a08c <MiMAC_SendPacket+0x254>
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    a17a:	0019      	movs	r1, r3
    a17c:	e7b4      	b.n	a0e8 <MiMAC_SendPacket+0x2b0>
    a17e:	46c0      	nop			; (mov r8, r8)
    a180:	20000482 	.word	0x20000482
    a184:	200022d4 	.word	0x200022d4
    a188:	20002328 	.word	0x20002328
    a18c:	200021b4 	.word	0x200021b4
    a190:	0000ffff 	.word	0x0000ffff
    a194:	20002304 	.word	0x20002304
    a198:	00009b01 	.word	0x00009b01
    a19c:	200021b1 	.word	0x200021b1
    a1a0:	200021b0 	.word	0x200021b0
    a1a4:	2000047f 	.word	0x2000047f
    a1a8:	200022b4 	.word	0x200022b4
    a1ac:	200022f0 	.word	0x200022f0
    a1b0:	2000048c 	.word	0x2000048c
    a1b4:	20000484 	.word	0x20000484
    a1b8:	20000488 	.word	0x20000488
    a1bc:	20000481 	.word	0x20000481
    a1c0:	0000ad09 	.word	0x0000ad09
    a1c4:	200022bc 	.word	0x200022bc

0000a1c8 <MiMAC_DiscardPacket>:
 *
 *****************************************************************************************/
void MiMAC_DiscardPacket(void)
{
	//re-enable buffer for next packets
	if (BankIndex < BANK_SIZE)
    a1c8:	4b04      	ldr	r3, [pc, #16]	; (a1dc <MiMAC_DiscardPacket+0x14>)
    a1ca:	781b      	ldrb	r3, [r3, #0]
    a1cc:	2b03      	cmp	r3, #3
    a1ce:	d804      	bhi.n	a1da <MiMAC_DiscardPacket+0x12>
	{
		RxBuffer[BankIndex].PayloadLen = 0;
    a1d0:	021a      	lsls	r2, r3, #8
    a1d2:	18d3      	adds	r3, r2, r3
    a1d4:	2100      	movs	r1, #0
    a1d6:	4a02      	ldr	r2, [pc, #8]	; (a1e0 <MiMAC_DiscardPacket+0x18>)
    a1d8:	5499      	strb	r1, [r3, r2]
	}
}
    a1da:	4770      	bx	lr
    a1dc:	2000001b 	.word	0x2000001b
    a1e0:	20002434 	.word	0x20002434

0000a1e4 <PHY_DataConf>:
 *      None
 *
 *****************************************************************************************/
void PHY_DataConf(uint8_t status)
{
	DataRetryCount = 0;
    a1e4:	2200      	movs	r2, #0
    a1e6:	4b04      	ldr	r3, [pc, #16]	; (a1f8 <PHY_DataConf+0x14>)
    a1e8:	701a      	strb	r2, [r3, #0]
	dataStatus = (miwi_status_t)status;
    a1ea:	4b04      	ldr	r3, [pc, #16]	; (a1fc <PHY_DataConf+0x18>)
    a1ec:	7018      	strb	r0, [r3, #0]
	dataConfAvailable = true;
    a1ee:	3201      	adds	r2, #1
    a1f0:	4b03      	ldr	r3, [pc, #12]	; (a200 <PHY_DataConf+0x1c>)
    a1f2:	701a      	strb	r2, [r3, #0]
}
    a1f4:	4770      	bx	lr
    a1f6:	46c0      	nop			; (mov r8, r8)
    a1f8:	20000480 	.word	0x20000480
    a1fc:	20002300 	.word	0x20002300
    a200:	20000482 	.word	0x20000482

0000a204 <MiMAC_RetryPacket>:
{
    a204:	b510      	push	{r4, lr}
	DataRetryCount++;
    a206:	4a0b      	ldr	r2, [pc, #44]	; (a234 <MiMAC_RetryPacket+0x30>)
    a208:	7813      	ldrb	r3, [r2, #0]
    a20a:	3301      	adds	r3, #1
    a20c:	b2db      	uxtb	r3, r3
    a20e:	7013      	strb	r3, [r2, #0]
	if (DataRetryCount < DATA_RETRY_ATTEMPT)
    a210:	2b02      	cmp	r3, #2
    a212:	d904      	bls.n	a21e <MiMAC_RetryPacket+0x1a>
		PHY_DataConf(NO_ACK); // No Ack response
    a214:	2003      	movs	r0, #3
    a216:	4b08      	ldr	r3, [pc, #32]	; (a238 <MiMAC_RetryPacket+0x34>)
    a218:	4798      	blx	r3
	bool status = false;
    a21a:	2000      	movs	r0, #0
}
    a21c:	bd10      	pop	{r4, pc}
		AckReqData = 1;
    a21e:	2201      	movs	r2, #1
    a220:	4b06      	ldr	r3, [pc, #24]	; (a23c <MiMAC_RetryPacket+0x38>)
    a222:	701a      	strb	r2, [r3, #0]
		status = PHY_DataReq(packet);
    a224:	4806      	ldr	r0, [pc, #24]	; (a240 <MiMAC_RetryPacket+0x3c>)
    a226:	4b07      	ldr	r3, [pc, #28]	; (a244 <MiMAC_RetryPacket+0x40>)
    a228:	4798      	blx	r3
    a22a:	1e43      	subs	r3, r0, #1
    a22c:	4198      	sbcs	r0, r3
    a22e:	b2c0      	uxtb	r0, r0
    a230:	e7f4      	b.n	a21c <MiMAC_RetryPacket+0x18>
    a232:	46c0      	nop			; (mov r8, r8)
    a234:	20000480 	.word	0x20000480
    a238:	0000a1e5 	.word	0x0000a1e5
    a23c:	2000047f 	.word	0x2000047f
    a240:	200021b4 	.word	0x200021b4
    a244:	0000ad09 	.word	0x0000ad09

0000a248 <MiMAC_ReceivedPacket>:
{
    a248:	b5f0      	push	{r4, r5, r6, r7, lr}
    a24a:	46c6      	mov	lr, r8
    a24c:	b500      	push	{lr}
    a24e:	b088      	sub	sp, #32
	BankIndex = 0xFF;
    a250:	22ff      	movs	r2, #255	; 0xff
    a252:	4bcc      	ldr	r3, [pc, #816]	; (a584 <MiMAC_ReceivedPacket+0x33c>)
    a254:	701a      	strb	r2, [r3, #0]
		if (RxBuffer[i].PayloadLen > 0)
    a256:	4bcc      	ldr	r3, [pc, #816]	; (a588 <MiMAC_ReceivedPacket+0x340>)
    a258:	781b      	ldrb	r3, [r3, #0]
    a25a:	2b00      	cmp	r3, #0
    a25c:	d000      	beq.n	a260 <MiMAC_ReceivedPacket+0x18>
    a25e:	e354      	b.n	a90a <MiMAC_ReceivedPacket+0x6c2>
    a260:	2302      	movs	r3, #2
    a262:	33ff      	adds	r3, #255	; 0xff
    a264:	4ac8      	ldr	r2, [pc, #800]	; (a588 <MiMAC_ReceivedPacket+0x340>)
    a266:	5cd3      	ldrb	r3, [r2, r3]
    a268:	2b00      	cmp	r3, #0
    a26a:	d10e      	bne.n	a28a <MiMAC_ReceivedPacket+0x42>
    a26c:	4bc7      	ldr	r3, [pc, #796]	; (a58c <MiMAC_ReceivedPacket+0x344>)
    a26e:	5cd3      	ldrb	r3, [r2, r3]
    a270:	2b00      	cmp	r3, #0
    a272:	d140      	bne.n	a2f6 <MiMAC_ReceivedPacket+0xae>
    a274:	4bc6      	ldr	r3, [pc, #792]	; (a590 <MiMAC_ReceivedPacket+0x348>)
    a276:	5cd3      	ldrb	r3, [r2, r3]
	return false;
    a278:	2400      	movs	r4, #0
	for (i = 0; i < BANK_SIZE; i++)
    a27a:	2203      	movs	r2, #3
		if (RxBuffer[i].PayloadLen > 0)
    a27c:	2b00      	cmp	r3, #0
    a27e:	d105      	bne.n	a28c <MiMAC_ReceivedPacket+0x44>
}
    a280:	0020      	movs	r0, r4
    a282:	b008      	add	sp, #32
    a284:	bc04      	pop	{r2}
    a286:	4690      	mov	r8, r2
    a288:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < BANK_SIZE; i++)
    a28a:	2201      	movs	r2, #1
			BankIndex = i;
    a28c:	4bbd      	ldr	r3, [pc, #756]	; (a584 <MiMAC_ReceivedPacket+0x33c>)
    a28e:	701a      	strb	r2, [r3, #0]
	return false;
    a290:	2400      	movs	r4, #0
	if (BankIndex < BANK_SIZE)
    a292:	2a03      	cmp	r2, #3
    a294:	d8f4      	bhi.n	a280 <MiMAC_ReceivedPacket+0x38>
		if ((RxBuffer[BankIndex].Payload[0] & 0x40) == 0)
    a296:	0010      	movs	r0, r2
    a298:	0211      	lsls	r1, r2, #8
    a29a:	1889      	adds	r1, r1, r2
    a29c:	4bba      	ldr	r3, [pc, #744]	; (a588 <MiMAC_ReceivedPacket+0x340>)
    a29e:	185b      	adds	r3, r3, r1
    a2a0:	789d      	ldrb	r5, [r3, #2]
    a2a2:	2440      	movs	r4, #64	; 0x40
    a2a4:	4025      	ands	r5, r4
		MACRxPacket.flags.Val = 0;
    a2a6:	49bb      	ldr	r1, [pc, #748]	; (a594 <MiMAC_ReceivedPacket+0x34c>)
    a2a8:	2400      	movs	r4, #0
    a2aa:	700c      	strb	r4, [r1, #0]
		MACRxPacket.altSourceAddress = false;
    a2ac:	73cc      	strb	r4, [r1, #15]
		addrMode = RxBuffer[BankIndex].Payload[1] & 0xCC;
    a2ae:	78db      	ldrb	r3, [r3, #3]
    a2b0:	2133      	movs	r1, #51	; 0x33
    a2b2:	438b      	bics	r3, r1
		switch (addrMode)
    a2b4:	b2d9      	uxtb	r1, r3
    a2b6:	2988      	cmp	r1, #136	; 0x88
    a2b8:	d100      	bne.n	a2bc <MiMAC_ReceivedPacket+0x74>
    a2ba:	e12f      	b.n	a51c <MiMAC_ReceivedPacket+0x2d4>
    a2bc:	d91d      	bls.n	a2fa <MiMAC_ReceivedPacket+0xb2>
    a2be:	b2d9      	uxtb	r1, r3
    a2c0:	29c8      	cmp	r1, #200	; 0xc8
    a2c2:	d06f      	beq.n	a3a4 <MiMAC_ReceivedPacket+0x15c>
    a2c4:	29cc      	cmp	r1, #204	; 0xcc
    a2c6:	d100      	bne.n	a2ca <MiMAC_ReceivedPacket+0x82>
    a2c8:	e0b9      	b.n	a43e <MiMAC_ReceivedPacket+0x1f6>
    a2ca:	298c      	cmp	r1, #140	; 0x8c
    a2cc:	d100      	bne.n	a2d0 <MiMAC_ReceivedPacket+0x88>
    a2ce:	e1aa      	b.n	a626 <MiMAC_ReceivedPacket+0x3de>
			MiMAC_DiscardPacket();
    a2d0:	4bb1      	ldr	r3, [pc, #708]	; (a598 <MiMAC_ReceivedPacket+0x350>)
    a2d2:	4798      	blx	r3
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a2d4:	4bab      	ldr	r3, [pc, #684]	; (a584 <MiMAC_ReceivedPacket+0x33c>)
    a2d6:	781a      	ldrb	r2, [r3, #0]
    a2d8:	0213      	lsls	r3, r2, #8
    a2da:	189a      	adds	r2, r3, r2
    a2dc:	4baa      	ldr	r3, [pc, #680]	; (a588 <MiMAC_ReceivedPacket+0x340>)
    a2de:	189b      	adds	r3, r3, r2
    a2e0:	789b      	ldrb	r3, [r3, #2]
			return false;
    a2e2:	2400      	movs	r4, #0
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a2e4:	069b      	lsls	r3, r3, #26
    a2e6:	d5cb      	bpl.n	a280 <MiMAC_ReceivedPacket+0x38>
				MiRadioReceiveParam.action = RECEIVE_START;					
    a2e8:	a807      	add	r0, sp, #28
    a2ea:	2300      	movs	r3, #0
    a2ec:	7003      	strb	r3, [r0, #0]
				MiRadioReceiveParam.rxWindowSize = 0;
    a2ee:	8043      	strh	r3, [r0, #2]
				RADIO_Receive(&MiRadioReceiveParam);
    a2f0:	4baa      	ldr	r3, [pc, #680]	; (a59c <MiMAC_ReceivedPacket+0x354>)
    a2f2:	4798      	blx	r3
    a2f4:	e7c4      	b.n	a280 <MiMAC_ReceivedPacket+0x38>
	for (i = 0; i < BANK_SIZE; i++)
    a2f6:	2202      	movs	r2, #2
    a2f8:	e7c8      	b.n	a28c <MiMAC_ReceivedPacket+0x44>
		switch (addrMode)
    a2fa:	2b08      	cmp	r3, #8
    a2fc:	d100      	bne.n	a300 <MiMAC_ReceivedPacket+0xb8>
    a2fe:	e1e1      	b.n	a6c4 <MiMAC_ReceivedPacket+0x47c>
    a300:	2980      	cmp	r1, #128	; 0x80
    a302:	d1e5      	bne.n	a2d0 <MiMAC_ReceivedPacket+0x88>
				MACRxPacket.flags.bits.broadcast = 1;
    a304:	4ba3      	ldr	r3, [pc, #652]	; (a594 <MiMAC_ReceivedPacket+0x34c>)
    a306:	7819      	ldrb	r1, [r3, #0]
    a308:	2404      	movs	r4, #4
    a30a:	4321      	orrs	r1, r4
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    a30c:	2480      	movs	r4, #128	; 0x80
    a30e:	4264      	negs	r4, r4
    a310:	4321      	orrs	r1, r4
    a312:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    a314:	2101      	movs	r1, #1
    a316:	73d9      	strb	r1, [r3, #15]
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    a318:	4c9b      	ldr	r4, [pc, #620]	; (a588 <MiMAC_ReceivedPacket+0x340>)
    a31a:	0211      	lsls	r1, r2, #8
    a31c:	1888      	adds	r0, r1, r2
    a31e:	1821      	adds	r1, r4, r0
    a320:	794d      	ldrb	r5, [r1, #5]
    a322:	741d      	strb	r5, [r3, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    a324:	7989      	ldrb	r1, [r1, #6]
    a326:	7459      	strb	r1, [r3, #17]
    a328:	0211      	lsls	r1, r2, #8
    a32a:	188a      	adds	r2, r1, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[5]);
    a32c:	1dd1      	adds	r1, r2, #7
    a32e:	1909      	adds	r1, r1, r4
    a330:	6059      	str	r1, [r3, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 11;
    a332:	5d01      	ldrb	r1, [r0, r4]
    a334:	390b      	subs	r1, #11
    a336:	7319      	strb	r1, [r3, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    a338:	3209      	adds	r2, #9
    a33a:	1912      	adds	r2, r2, r4
    a33c:	609a      	str	r2, [r3, #8]
		if (RxBuffer[BankIndex].Payload[0] & 0x08)
    a33e:	4b91      	ldr	r3, [pc, #580]	; (a584 <MiMAC_ReceivedPacket+0x33c>)
    a340:	781a      	ldrb	r2, [r3, #0]
    a342:	0213      	lsls	r3, r2, #8
    a344:	189a      	adds	r2, r3, r2
    a346:	4b90      	ldr	r3, [pc, #576]	; (a588 <MiMAC_ReceivedPacket+0x340>)
    a348:	189b      	adds	r3, r3, r2
    a34a:	789b      	ldrb	r3, [r3, #2]
    a34c:	071b      	lsls	r3, r3, #28
    a34e:	d500      	bpl.n	a352 <MiMAC_ReceivedPacket+0x10a>
    a350:	e1d9      	b.n	a706 <MiMAC_ReceivedPacket+0x4be>
		switch (RxBuffer[BankIndex].Payload[0] & 0x07) // check frame type
    a352:	4b8c      	ldr	r3, [pc, #560]	; (a584 <MiMAC_ReceivedPacket+0x33c>)
    a354:	7818      	ldrb	r0, [r3, #0]
    a356:	0202      	lsls	r2, r0, #8
    a358:	1812      	adds	r2, r2, r0
    a35a:	4b8b      	ldr	r3, [pc, #556]	; (a588 <MiMAC_ReceivedPacket+0x340>)
    a35c:	189b      	adds	r3, r3, r2
    a35e:	7899      	ldrb	r1, [r3, #2]
    a360:	2307      	movs	r3, #7
    a362:	400b      	ands	r3, r1
    a364:	2b01      	cmp	r3, #1
    a366:	d100      	bne.n	a36a <MiMAC_ReceivedPacket+0x122>
    a368:	e24e      	b.n	a808 <MiMAC_ReceivedPacket+0x5c0>
    a36a:	2b00      	cmp	r3, #0
    a36c:	d100      	bne.n	a370 <MiMAC_ReceivedPacket+0x128>
    a36e:	e283      	b.n	a878 <MiMAC_ReceivedPacket+0x630>
    a370:	2b02      	cmp	r3, #2
    a372:	d100      	bne.n	a376 <MiMAC_ReceivedPacket+0x12e>
    a374:	e286      	b.n	a884 <MiMAC_ReceivedPacket+0x63c>
    a376:	2b03      	cmp	r3, #3
    a378:	d100      	bne.n	a37c <MiMAC_ReceivedPacket+0x134>
    a37a:	e275      	b.n	a868 <MiMAC_ReceivedPacket+0x620>
			MiMAC_DiscardPacket();
    a37c:	4b86      	ldr	r3, [pc, #536]	; (a598 <MiMAC_ReceivedPacket+0x350>)
    a37e:	4798      	blx	r3
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a380:	4b80      	ldr	r3, [pc, #512]	; (a584 <MiMAC_ReceivedPacket+0x33c>)
    a382:	781a      	ldrb	r2, [r3, #0]
    a384:	0213      	lsls	r3, r2, #8
    a386:	189a      	adds	r2, r3, r2
    a388:	4b7f      	ldr	r3, [pc, #508]	; (a588 <MiMAC_ReceivedPacket+0x340>)
    a38a:	189b      	adds	r3, r3, r2
    a38c:	789b      	ldrb	r3, [r3, #2]
			return false;
    a38e:	2400      	movs	r4, #0
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a390:	069b      	lsls	r3, r3, #26
    a392:	d400      	bmi.n	a396 <MiMAC_ReceivedPacket+0x14e>
    a394:	e774      	b.n	a280 <MiMAC_ReceivedPacket+0x38>
				MiRadioReceiveParam.action = RECEIVE_START;	
    a396:	a807      	add	r0, sp, #28
    a398:	2300      	movs	r3, #0
    a39a:	7003      	strb	r3, [r0, #0]
				MiRadioReceiveParam.rxWindowSize = 0;
    a39c:	8043      	strh	r3, [r0, #2]
				RADIO_Receive(&MiRadioReceiveParam);
    a39e:	4b7f      	ldr	r3, [pc, #508]	; (a59c <MiMAC_ReceivedPacket+0x354>)
    a3a0:	4798      	blx	r3
    a3a2:	e76d      	b.n	a280 <MiMAC_ReceivedPacket+0x38>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    a3a4:	0211      	lsls	r1, r2, #8
    a3a6:	1889      	adds	r1, r1, r2
    a3a8:	4b77      	ldr	r3, [pc, #476]	; (a588 <MiMAC_ReceivedPacket+0x340>)
    a3aa:	185b      	adds	r3, r3, r1
    a3ac:	79dc      	ldrb	r4, [r3, #7]
    a3ae:	2cff      	cmp	r4, #255	; 0xff
    a3b0:	d01e      	beq.n	a3f0 <MiMAC_ReceivedPacket+0x1a8>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    a3b2:	4978      	ldr	r1, [pc, #480]	; (a594 <MiMAC_ReceivedPacket+0x34c>)
    a3b4:	780e      	ldrb	r6, [r1, #0]
    a3b6:	2380      	movs	r3, #128	; 0x80
    a3b8:	425b      	negs	r3, r3
    a3ba:	4333      	orrs	r3, r6
    a3bc:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    a3be:	2d00      	cmp	r5, #0
    a3c0:	d000      	beq.n	a3c4 <MiMAC_ReceivedPacket+0x17c>
    a3c2:	e27d      	b.n	a8c0 <MiMAC_ReceivedPacket+0x678>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    a3c4:	4973      	ldr	r1, [pc, #460]	; (a594 <MiMAC_ReceivedPacket+0x34c>)
    a3c6:	4c70      	ldr	r4, [pc, #448]	; (a588 <MiMAC_ReceivedPacket+0x340>)
    a3c8:	0203      	lsls	r3, r0, #8
    a3ca:	1818      	adds	r0, r3, r0
    a3cc:	1823      	adds	r3, r4, r0
    a3ce:	7a5d      	ldrb	r5, [r3, #9]
    a3d0:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    a3d2:	7a9b      	ldrb	r3, [r3, #10]
    a3d4:	744b      	strb	r3, [r1, #17]
    a3d6:	0213      	lsls	r3, r2, #8
    a3d8:	189a      	adds	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    a3da:	0013      	movs	r3, r2
    a3dc:	330b      	adds	r3, #11
    a3de:	191b      	adds	r3, r3, r4
    a3e0:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    a3e2:	5d03      	ldrb	r3, [r0, r4]
    a3e4:	3b15      	subs	r3, #21
    a3e6:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    a3e8:	3213      	adds	r2, #19
    a3ea:	1912      	adds	r2, r2, r4
    a3ec:	608a      	str	r2, [r1, #8]
    a3ee:	e043      	b.n	a478 <MiMAC_ReceivedPacket+0x230>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    a3f0:	0211      	lsls	r1, r2, #8
    a3f2:	1889      	adds	r1, r1, r2
    a3f4:	4b64      	ldr	r3, [pc, #400]	; (a588 <MiMAC_ReceivedPacket+0x340>)
    a3f6:	185b      	adds	r3, r3, r1
    a3f8:	7a1b      	ldrb	r3, [r3, #8]
    a3fa:	2bff      	cmp	r3, #255	; 0xff
    a3fc:	d1d9      	bne.n	a3b2 <MiMAC_ReceivedPacket+0x16a>
				MACRxPacket.flags.bits.broadcast = 1;
    a3fe:	4965      	ldr	r1, [pc, #404]	; (a594 <MiMAC_ReceivedPacket+0x34c>)
    a400:	780b      	ldrb	r3, [r1, #0]
    a402:	2404      	movs	r4, #4
    a404:	4323      	orrs	r3, r4
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    a406:	2480      	movs	r4, #128	; 0x80
    a408:	4264      	negs	r4, r4
    a40a:	4323      	orrs	r3, r4
    a40c:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    a40e:	2d00      	cmp	r5, #0
    a410:	d000      	beq.n	a414 <MiMAC_ReceivedPacket+0x1cc>
    a412:	e264      	b.n	a8de <MiMAC_ReceivedPacket+0x696>
    a414:	e7d6      	b.n	a3c4 <MiMAC_ReceivedPacket+0x17c>
					MiMAC_DiscardPacket();
    a416:	4b60      	ldr	r3, [pc, #384]	; (a598 <MiMAC_ReceivedPacket+0x350>)
    a418:	4798      	blx	r3
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a41a:	4b5a      	ldr	r3, [pc, #360]	; (a584 <MiMAC_ReceivedPacket+0x33c>)
    a41c:	781a      	ldrb	r2, [r3, #0]
    a41e:	0213      	lsls	r3, r2, #8
    a420:	189a      	adds	r2, r3, r2
    a422:	4b59      	ldr	r3, [pc, #356]	; (a588 <MiMAC_ReceivedPacket+0x340>)
    a424:	189b      	adds	r3, r3, r2
    a426:	789b      	ldrb	r3, [r3, #2]
					return false;
    a428:	2400      	movs	r4, #0
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a42a:	069b      	lsls	r3, r3, #26
    a42c:	d400      	bmi.n	a430 <MiMAC_ReceivedPacket+0x1e8>
    a42e:	e727      	b.n	a280 <MiMAC_ReceivedPacket+0x38>
						MiRadioReceiveParam.action = RECEIVE_START;					
    a430:	a807      	add	r0, sp, #28
    a432:	2300      	movs	r3, #0
    a434:	7003      	strb	r3, [r0, #0]
						MiRadioReceiveParam.rxWindowSize = 0;
    a436:	8043      	strh	r3, [r0, #2]
						RADIO_Receive(&MiRadioReceiveParam);
    a438:	4b58      	ldr	r3, [pc, #352]	; (a59c <MiMAC_ReceivedPacket+0x354>)
    a43a:	4798      	blx	r3
    a43c:	e720      	b.n	a280 <MiMAC_ReceivedPacket+0x38>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    a43e:	4955      	ldr	r1, [pc, #340]	; (a594 <MiMAC_ReceivedPacket+0x34c>)
    a440:	780c      	ldrb	r4, [r1, #0]
    a442:	2380      	movs	r3, #128	; 0x80
    a444:	425b      	negs	r3, r3
    a446:	4323      	orrs	r3, r4
    a448:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    a44a:	2d00      	cmp	r5, #0
    a44c:	d133      	bne.n	a4b6 <MiMAC_ReceivedPacket+0x26e>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[13];
    a44e:	4951      	ldr	r1, [pc, #324]	; (a594 <MiMAC_ReceivedPacket+0x34c>)
    a450:	4c4d      	ldr	r4, [pc, #308]	; (a588 <MiMAC_ReceivedPacket+0x340>)
    a452:	0213      	lsls	r3, r2, #8
    a454:	1898      	adds	r0, r3, r2
    a456:	1823      	adds	r3, r4, r0
    a458:	7bdd      	ldrb	r5, [r3, #15]
    a45a:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[14];
    a45c:	7c1b      	ldrb	r3, [r3, #16]
    a45e:	744b      	strb	r3, [r1, #17]
    a460:	0213      	lsls	r3, r2, #8
    a462:	189a      	adds	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[15]);
    a464:	0013      	movs	r3, r2
    a466:	3311      	adds	r3, #17
    a468:	191b      	adds	r3, r3, r4
    a46a:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 27;
    a46c:	5d03      	ldrb	r3, [r0, r4]
    a46e:	3b1b      	subs	r3, #27
    a470:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[23]);
    a472:	3219      	adds	r2, #25
    a474:	1912      	adds	r2, r2, r4
    a476:	608a      	str	r2, [r1, #8]
		if (RxBuffer[BankIndex].Payload[0] & 0x08)
    a478:	4b42      	ldr	r3, [pc, #264]	; (a584 <MiMAC_ReceivedPacket+0x33c>)
    a47a:	781a      	ldrb	r2, [r3, #0]
    a47c:	0213      	lsls	r3, r2, #8
    a47e:	189a      	adds	r2, r3, r2
    a480:	4b41      	ldr	r3, [pc, #260]	; (a588 <MiMAC_ReceivedPacket+0x340>)
    a482:	189b      	adds	r3, r3, r2
    a484:	789b      	ldrb	r3, [r3, #2]
    a486:	071b      	lsls	r3, r3, #28
    a488:	d400      	bmi.n	a48c <MiMAC_ReceivedPacket+0x244>
    a48a:	e762      	b.n	a352 <MiMAC_ReceivedPacket+0x10a>
			FrameCounter.v[0] = MACRxPacket.Payload[0];
    a48c:	4b41      	ldr	r3, [pc, #260]	; (a594 <MiMAC_ReceivedPacket+0x34c>)
    a48e:	689b      	ldr	r3, [r3, #8]
			FrameCounter.v[1] = MACRxPacket.Payload[1];
    a490:	785f      	ldrb	r7, [r3, #1]
    a492:	023f      	lsls	r7, r7, #8
    a494:	781a      	ldrb	r2, [r3, #0]
    a496:	4317      	orrs	r7, r2
			FrameCounter.v[2] = MACRxPacket.Payload[2];
    a498:	789a      	ldrb	r2, [r3, #2]
    a49a:	0412      	lsls	r2, r2, #16
    a49c:	4940      	ldr	r1, [pc, #256]	; (a5a0 <MiMAC_ReceivedPacket+0x358>)
    a49e:	400f      	ands	r7, r1
    a4a0:	4317      	orrs	r7, r2
			FrameCounter.v[3] = MACRxPacket.Payload[3];
    a4a2:	78db      	ldrb	r3, [r3, #3]
    a4a4:	061b      	lsls	r3, r3, #24
    a4a6:	023f      	lsls	r7, r7, #8
    a4a8:	0a3f      	lsrs	r7, r7, #8
    a4aa:	431f      	orrs	r7, r3
    a4ac:	4d3d      	ldr	r5, [pc, #244]	; (a5a4 <MiMAC_ReceivedPacket+0x35c>)
    a4ae:	2600      	movs	r6, #0
			for (i = 0; i < CONNECTION_SIZE; i++)
    a4b0:	2400      	movs	r4, #0
				if ((ConnectionTable[i].status.bits.isValid) &&
    a4b2:	46a8      	mov	r8, r5
    a4b4:	e141      	b.n	a73a <MiMAC_ReceivedPacket+0x4f2>
				if(!(isSameAddress((uint8_t *)&DevIEEEaddr, &RxBuffer[BankIndex].Payload[5])))
    a4b6:	0211      	lsls	r1, r2, #8
    a4b8:	1889      	adds	r1, r1, r2
    a4ba:	3107      	adds	r1, #7
    a4bc:	4a32      	ldr	r2, [pc, #200]	; (a588 <MiMAC_ReceivedPacket+0x340>)
    a4be:	1889      	adds	r1, r1, r2
    a4c0:	4839      	ldr	r0, [pc, #228]	; (a5a8 <MiMAC_ReceivedPacket+0x360>)
    a4c2:	4b3a      	ldr	r3, [pc, #232]	; (a5ac <MiMAC_ReceivedPacket+0x364>)
    a4c4:	4798      	blx	r3
    a4c6:	1e04      	subs	r4, r0, #0
    a4c8:	d015      	beq.n	a4f6 <MiMAC_ReceivedPacket+0x2ae>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    a4ca:	4b2e      	ldr	r3, [pc, #184]	; (a584 <MiMAC_ReceivedPacket+0x33c>)
    a4cc:	7818      	ldrb	r0, [r3, #0]
    a4ce:	4a31      	ldr	r2, [pc, #196]	; (a594 <MiMAC_ReceivedPacket+0x34c>)
    a4d0:	492d      	ldr	r1, [pc, #180]	; (a588 <MiMAC_ReceivedPacket+0x340>)
    a4d2:	0203      	lsls	r3, r0, #8
    a4d4:	181b      	adds	r3, r3, r0
    a4d6:	18c8      	adds	r0, r1, r3
    a4d8:	7944      	ldrb	r4, [r0, #5]
    a4da:	7414      	strb	r4, [r2, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    a4dc:	7980      	ldrb	r0, [r0, #6]
    a4de:	7450      	strb	r0, [r2, #17]
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
    a4e0:	0018      	movs	r0, r3
    a4e2:	300f      	adds	r0, #15
    a4e4:	1840      	adds	r0, r0, r1
    a4e6:	6050      	str	r0, [r2, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 25;
    a4e8:	5c58      	ldrb	r0, [r3, r1]
    a4ea:	3819      	subs	r0, #25
    a4ec:	7310      	strb	r0, [r2, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[21]);
    a4ee:	3317      	adds	r3, #23
    a4f0:	185b      	adds	r3, r3, r1
    a4f2:	6093      	str	r3, [r2, #8]
    a4f4:	e7c0      	b.n	a478 <MiMAC_ReceivedPacket+0x230>
					MiMAC_DiscardPacket();
    a4f6:	4b28      	ldr	r3, [pc, #160]	; (a598 <MiMAC_ReceivedPacket+0x350>)
    a4f8:	4798      	blx	r3
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a4fa:	4b22      	ldr	r3, [pc, #136]	; (a584 <MiMAC_ReceivedPacket+0x33c>)
    a4fc:	781a      	ldrb	r2, [r3, #0]
    a4fe:	0213      	lsls	r3, r2, #8
    a500:	189a      	adds	r2, r3, r2
    a502:	4b21      	ldr	r3, [pc, #132]	; (a588 <MiMAC_ReceivedPacket+0x340>)
    a504:	189b      	adds	r3, r3, r2
    a506:	789b      	ldrb	r3, [r3, #2]
    a508:	069b      	lsls	r3, r3, #26
    a50a:	d400      	bmi.n	a50e <MiMAC_ReceivedPacket+0x2c6>
    a50c:	e6b8      	b.n	a280 <MiMAC_ReceivedPacket+0x38>
						MiRadioReceiveParam.action = RECEIVE_START;					
    a50e:	a807      	add	r0, sp, #28
    a510:	2300      	movs	r3, #0
    a512:	7003      	strb	r3, [r0, #0]
						MiRadioReceiveParam.rxWindowSize = 0;
    a514:	8043      	strh	r3, [r0, #2]
						RADIO_Receive(&MiRadioReceiveParam);
    a516:	4b21      	ldr	r3, [pc, #132]	; (a59c <MiMAC_ReceivedPacket+0x354>)
    a518:	4798      	blx	r3
    a51a:	e6b1      	b.n	a280 <MiMAC_ReceivedPacket+0x38>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    a51c:	0211      	lsls	r1, r2, #8
    a51e:	1889      	adds	r1, r1, r2
    a520:	4b19      	ldr	r3, [pc, #100]	; (a588 <MiMAC_ReceivedPacket+0x340>)
    a522:	185b      	adds	r3, r3, r1
    a524:	79dc      	ldrb	r4, [r3, #7]
    a526:	2cff      	cmp	r4, #255	; 0xff
    a528:	d01f      	beq.n	a56a <MiMAC_ReceivedPacket+0x322>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    a52a:	4b1a      	ldr	r3, [pc, #104]	; (a594 <MiMAC_ReceivedPacket+0x34c>)
    a52c:	781e      	ldrb	r6, [r3, #0]
    a52e:	2180      	movs	r1, #128	; 0x80
    a530:	4249      	negs	r1, r1
    a532:	4331      	orrs	r1, r6
    a534:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    a536:	2101      	movs	r1, #1
    a538:	73d9      	strb	r1, [r3, #15]
				if (bIntraPAN == false)
    a53a:	2d00      	cmp	r5, #0
    a53c:	d138      	bne.n	a5b0 <MiMAC_ReceivedPacket+0x368>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    a53e:	0019      	movs	r1, r3
    a540:	4c11      	ldr	r4, [pc, #68]	; (a588 <MiMAC_ReceivedPacket+0x340>)
    a542:	0203      	lsls	r3, r0, #8
    a544:	1818      	adds	r0, r3, r0
    a546:	1823      	adds	r3, r4, r0
    a548:	7a5d      	ldrb	r5, [r3, #9]
    a54a:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    a54c:	7a9b      	ldrb	r3, [r3, #10]
    a54e:	744b      	strb	r3, [r1, #17]
    a550:	0213      	lsls	r3, r2, #8
    a552:	189a      	adds	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    a554:	0013      	movs	r3, r2
    a556:	330b      	adds	r3, #11
    a558:	191b      	adds	r3, r3, r4
    a55a:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 15;
    a55c:	5d03      	ldrb	r3, [r0, r4]
    a55e:	3b0f      	subs	r3, #15
    a560:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[11]);
    a562:	320d      	adds	r2, #13
    a564:	1912      	adds	r2, r2, r4
    a566:	608a      	str	r2, [r1, #8]
    a568:	e6e9      	b.n	a33e <MiMAC_ReceivedPacket+0xf6>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    a56a:	0211      	lsls	r1, r2, #8
    a56c:	1889      	adds	r1, r1, r2
    a56e:	4b06      	ldr	r3, [pc, #24]	; (a588 <MiMAC_ReceivedPacket+0x340>)
    a570:	185b      	adds	r3, r3, r1
    a572:	7a1b      	ldrb	r3, [r3, #8]
    a574:	2bff      	cmp	r3, #255	; 0xff
    a576:	d1d8      	bne.n	a52a <MiMAC_ReceivedPacket+0x2e2>
					MACRxPacket.flags.bits.broadcast = 1;
    a578:	4906      	ldr	r1, [pc, #24]	; (a594 <MiMAC_ReceivedPacket+0x34c>)
    a57a:	780b      	ldrb	r3, [r1, #0]
    a57c:	2604      	movs	r6, #4
    a57e:	4333      	orrs	r3, r6
    a580:	700b      	strb	r3, [r1, #0]
    a582:	e7d2      	b.n	a52a <MiMAC_ReceivedPacket+0x2e2>
    a584:	2000001b 	.word	0x2000001b
    a588:	20002434 	.word	0x20002434
    a58c:	00000202 	.word	0x00000202
    a590:	00000303 	.word	0x00000303
    a594:	2000287c 	.word	0x2000287c
    a598:	0000a1c9 	.word	0x0000a1c9
    a59c:	0000f789 	.word	0x0000f789
    a5a0:	ff00ffff 	.word	0xff00ffff
    a5a4:	20002844 	.word	0x20002844
    a5a8:	2000242c 	.word	0x2000242c
    a5ac:	0000aff5 	.word	0x0000aff5
					if (!(((RxBuffer[BankIndex].Payload[5] == 0xFF) & (RxBuffer[BankIndex].Payload[6] == 0xFF)) ||((RxBuffer[BankIndex].Payload[5] == DevShortAddress[0]) & (RxBuffer[BankIndex].Payload[6] == DevShortAddress[1]))) )
    a5b0:	0201      	lsls	r1, r0, #8
    a5b2:	1809      	adds	r1, r1, r0
    a5b4:	4bd7      	ldr	r3, [pc, #860]	; (a914 <MiMAC_ReceivedPacket+0x6cc>)
    a5b6:	185b      	adds	r3, r3, r1
    a5b8:	7a1b      	ldrb	r3, [r3, #8]
    a5ba:	2cff      	cmp	r4, #255	; 0xff
    a5bc:	d117      	bne.n	a5ee <MiMAC_ReceivedPacket+0x3a6>
    a5be:	2bff      	cmp	r3, #255	; 0xff
    a5c0:	d115      	bne.n	a5ee <MiMAC_ReceivedPacket+0x3a6>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    a5c2:	49d5      	ldr	r1, [pc, #852]	; (a918 <MiMAC_ReceivedPacket+0x6d0>)
    a5c4:	4cd3      	ldr	r4, [pc, #844]	; (a914 <MiMAC_ReceivedPacket+0x6cc>)
    a5c6:	0203      	lsls	r3, r0, #8
    a5c8:	1818      	adds	r0, r3, r0
    a5ca:	1823      	adds	r3, r4, r0
    a5cc:	795d      	ldrb	r5, [r3, #5]
    a5ce:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    a5d0:	799b      	ldrb	r3, [r3, #6]
    a5d2:	744b      	strb	r3, [r1, #17]
    a5d4:	0213      	lsls	r3, r2, #8
    a5d6:	189a      	adds	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    a5d8:	0013      	movs	r3, r2
    a5da:	3309      	adds	r3, #9
    a5dc:	191b      	adds	r3, r3, r4
    a5de:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 13;
    a5e0:	5d03      	ldrb	r3, [r0, r4]
    a5e2:	3b0d      	subs	r3, #13
    a5e4:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[9]);
    a5e6:	320b      	adds	r2, #11
    a5e8:	1912      	adds	r2, r2, r4
    a5ea:	608a      	str	r2, [r1, #8]
    a5ec:	e6a7      	b.n	a33e <MiMAC_ReceivedPacket+0xf6>
					if (!(((RxBuffer[BankIndex].Payload[5] == 0xFF) & (RxBuffer[BankIndex].Payload[6] == 0xFF)) ||((RxBuffer[BankIndex].Payload[5] == DevShortAddress[0]) & (RxBuffer[BankIndex].Payload[6] == DevShortAddress[1]))) )
    a5ee:	49cb      	ldr	r1, [pc, #812]	; (a91c <MiMAC_ReceivedPacket+0x6d4>)
    a5f0:	7809      	ldrb	r1, [r1, #0]
    a5f2:	42a1      	cmp	r1, r4
    a5f4:	d103      	bne.n	a5fe <MiMAC_ReceivedPacket+0x3b6>
    a5f6:	49c9      	ldr	r1, [pc, #804]	; (a91c <MiMAC_ReceivedPacket+0x6d4>)
    a5f8:	7849      	ldrb	r1, [r1, #1]
    a5fa:	4299      	cmp	r1, r3
    a5fc:	d0e1      	beq.n	a5c2 <MiMAC_ReceivedPacket+0x37a>
						MiMAC_DiscardPacket();
    a5fe:	4bc8      	ldr	r3, [pc, #800]	; (a920 <MiMAC_ReceivedPacket+0x6d8>)
    a600:	4798      	blx	r3
						if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a602:	4bc8      	ldr	r3, [pc, #800]	; (a924 <MiMAC_ReceivedPacket+0x6dc>)
    a604:	781a      	ldrb	r2, [r3, #0]
    a606:	0213      	lsls	r3, r2, #8
    a608:	189a      	adds	r2, r3, r2
    a60a:	4bc2      	ldr	r3, [pc, #776]	; (a914 <MiMAC_ReceivedPacket+0x6cc>)
    a60c:	189b      	adds	r3, r3, r2
    a60e:	789b      	ldrb	r3, [r3, #2]
						return false;
    a610:	2400      	movs	r4, #0
						if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a612:	069b      	lsls	r3, r3, #26
    a614:	d400      	bmi.n	a618 <MiMAC_ReceivedPacket+0x3d0>
    a616:	e633      	b.n	a280 <MiMAC_ReceivedPacket+0x38>
							MiRadioReceiveParam.action = RECEIVE_START;	
    a618:	a807      	add	r0, sp, #28
    a61a:	2300      	movs	r3, #0
    a61c:	7003      	strb	r3, [r0, #0]
							MiRadioReceiveParam.rxWindowSize = 0;
    a61e:	8043      	strh	r3, [r0, #2]
							RADIO_Receive(&MiRadioReceiveParam);
    a620:	4bc1      	ldr	r3, [pc, #772]	; (a928 <MiMAC_ReceivedPacket+0x6e0>)
    a622:	4798      	blx	r3
    a624:	e62c      	b.n	a280 <MiMAC_ReceivedPacket+0x38>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    a626:	4bbc      	ldr	r3, [pc, #752]	; (a918 <MiMAC_ReceivedPacket+0x6d0>)
    a628:	781c      	ldrb	r4, [r3, #0]
    a62a:	2180      	movs	r1, #128	; 0x80
    a62c:	4249      	negs	r1, r1
    a62e:	4321      	orrs	r1, r4
    a630:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    a632:	2101      	movs	r1, #1
    a634:	73d9      	strb	r1, [r3, #15]
				if (bIntraPAN) // check if it is intraPAN
    a636:	2d00      	cmp	r5, #0
    a638:	d115      	bne.n	a666 <MiMAC_ReceivedPacket+0x41e>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[12];
    a63a:	49b7      	ldr	r1, [pc, #732]	; (a918 <MiMAC_ReceivedPacket+0x6d0>)
    a63c:	4cb5      	ldr	r4, [pc, #724]	; (a914 <MiMAC_ReceivedPacket+0x6cc>)
    a63e:	0213      	lsls	r3, r2, #8
    a640:	1898      	adds	r0, r3, r2
    a642:	1823      	adds	r3, r4, r0
    a644:	7b9d      	ldrb	r5, [r3, #14]
    a646:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[13];
    a648:	7bdb      	ldrb	r3, [r3, #15]
    a64a:	744b      	strb	r3, [r1, #17]
    a64c:	0213      	lsls	r3, r2, #8
    a64e:	189a      	adds	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[14]);
    a650:	0013      	movs	r3, r2
    a652:	3310      	adds	r3, #16
    a654:	191b      	adds	r3, r3, r4
    a656:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    a658:	5d03      	ldrb	r3, [r0, r4]
    a65a:	3b15      	subs	r3, #21
    a65c:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    a65e:	3213      	adds	r2, #19
    a660:	1912      	adds	r2, r2, r4
    a662:	608a      	str	r2, [r1, #8]
    a664:	e66b      	b.n	a33e <MiMAC_ReceivedPacket+0xf6>
					if(!(isSameAddress((uint8_t *)&DevIEEEaddr, &RxBuffer[BankIndex].Payload[5])))
    a666:	0211      	lsls	r1, r2, #8
    a668:	1889      	adds	r1, r1, r2
    a66a:	3107      	adds	r1, #7
    a66c:	4aa9      	ldr	r2, [pc, #676]	; (a914 <MiMAC_ReceivedPacket+0x6cc>)
    a66e:	1889      	adds	r1, r1, r2
    a670:	48ae      	ldr	r0, [pc, #696]	; (a92c <MiMAC_ReceivedPacket+0x6e4>)
    a672:	4baf      	ldr	r3, [pc, #700]	; (a930 <MiMAC_ReceivedPacket+0x6e8>)
    a674:	4798      	blx	r3
    a676:	1e04      	subs	r4, r0, #0
    a678:	d011      	beq.n	a69e <MiMAC_ReceivedPacket+0x456>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    a67a:	4baa      	ldr	r3, [pc, #680]	; (a924 <MiMAC_ReceivedPacket+0x6dc>)
    a67c:	7818      	ldrb	r0, [r3, #0]
    a67e:	4aa6      	ldr	r2, [pc, #664]	; (a918 <MiMAC_ReceivedPacket+0x6d0>)
    a680:	49a4      	ldr	r1, [pc, #656]	; (a914 <MiMAC_ReceivedPacket+0x6cc>)
    a682:	0203      	lsls	r3, r0, #8
    a684:	181b      	adds	r3, r3, r0
    a686:	18c8      	adds	r0, r1, r3
    a688:	7944      	ldrb	r4, [r0, #5]
    a68a:	7414      	strb	r4, [r2, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    a68c:	7980      	ldrb	r0, [r0, #6]
    a68e:	7450      	strb	r0, [r2, #17]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    a690:	5c58      	ldrb	r0, [r3, r1]
    a692:	3813      	subs	r0, #19
    a694:	7310      	strb	r0, [r2, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    a696:	3311      	adds	r3, #17
    a698:	185b      	adds	r3, r3, r1
    a69a:	6093      	str	r3, [r2, #8]
    a69c:	e64f      	b.n	a33e <MiMAC_ReceivedPacket+0xf6>
						MiMAC_DiscardPacket();
    a69e:	4ba0      	ldr	r3, [pc, #640]	; (a920 <MiMAC_ReceivedPacket+0x6d8>)
    a6a0:	4798      	blx	r3
						if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a6a2:	4ba0      	ldr	r3, [pc, #640]	; (a924 <MiMAC_ReceivedPacket+0x6dc>)
    a6a4:	781a      	ldrb	r2, [r3, #0]
    a6a6:	0213      	lsls	r3, r2, #8
    a6a8:	189a      	adds	r2, r3, r2
    a6aa:	4b9a      	ldr	r3, [pc, #616]	; (a914 <MiMAC_ReceivedPacket+0x6cc>)
    a6ac:	189b      	adds	r3, r3, r2
    a6ae:	789b      	ldrb	r3, [r3, #2]
    a6b0:	069b      	lsls	r3, r3, #26
    a6b2:	d400      	bmi.n	a6b6 <MiMAC_ReceivedPacket+0x46e>
    a6b4:	e5e4      	b.n	a280 <MiMAC_ReceivedPacket+0x38>
							MiRadioReceiveParam.action = RECEIVE_START;	
    a6b6:	a807      	add	r0, sp, #28
    a6b8:	2300      	movs	r3, #0
    a6ba:	7003      	strb	r3, [r0, #0]
							MiRadioReceiveParam.rxWindowSize = 0;
    a6bc:	8043      	strh	r3, [r0, #2]
							RADIO_Receive(&MiRadioReceiveParam);
    a6be:	4b9a      	ldr	r3, [pc, #616]	; (a928 <MiMAC_ReceivedPacket+0x6e0>)
    a6c0:	4798      	blx	r3
    a6c2:	e5dd      	b.n	a280 <MiMAC_ReceivedPacket+0x38>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    a6c4:	0211      	lsls	r1, r2, #8
    a6c6:	1889      	adds	r1, r1, r2
    a6c8:	4b92      	ldr	r3, [pc, #584]	; (a914 <MiMAC_ReceivedPacket+0x6cc>)
    a6ca:	185b      	adds	r3, r3, r1
    a6cc:	79db      	ldrb	r3, [r3, #7]
    a6ce:	2bff      	cmp	r3, #255	; 0xff
    a6d0:	d00c      	beq.n	a6ec <MiMAC_ReceivedPacket+0x4a4>
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 10;
    a6d2:	4991      	ldr	r1, [pc, #580]	; (a918 <MiMAC_ReceivedPacket+0x6d0>)
    a6d4:	4c8f      	ldr	r4, [pc, #572]	; (a914 <MiMAC_ReceivedPacket+0x6cc>)
    a6d6:	0203      	lsls	r3, r0, #8
    a6d8:	1818      	adds	r0, r3, r0
    a6da:	5d03      	ldrb	r3, [r0, r4]
    a6dc:	3b0a      	subs	r3, #10
    a6de:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    a6e0:	0213      	lsls	r3, r2, #8
    a6e2:	189a      	adds	r2, r3, r2
    a6e4:	3209      	adds	r2, #9
    a6e6:	1912      	adds	r2, r2, r4
    a6e8:	608a      	str	r2, [r1, #8]
			break;
    a6ea:	e628      	b.n	a33e <MiMAC_ReceivedPacket+0xf6>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    a6ec:	0211      	lsls	r1, r2, #8
    a6ee:	1889      	adds	r1, r1, r2
    a6f0:	4b88      	ldr	r3, [pc, #544]	; (a914 <MiMAC_ReceivedPacket+0x6cc>)
    a6f2:	185b      	adds	r3, r3, r1
    a6f4:	7a1b      	ldrb	r3, [r3, #8]
    a6f6:	2bff      	cmp	r3, #255	; 0xff
    a6f8:	d1eb      	bne.n	a6d2 <MiMAC_ReceivedPacket+0x48a>
					MACRxPacket.flags.bits.broadcast = 1;
    a6fa:	4987      	ldr	r1, [pc, #540]	; (a918 <MiMAC_ReceivedPacket+0x6d0>)
    a6fc:	780b      	ldrb	r3, [r1, #0]
    a6fe:	2404      	movs	r4, #4
    a700:	4323      	orrs	r3, r4
    a702:	700b      	strb	r3, [r1, #0]
    a704:	e7e5      	b.n	a6d2 <MiMAC_ReceivedPacket+0x48a>
				MiMAC_DiscardPacket();
    a706:	4b86      	ldr	r3, [pc, #536]	; (a920 <MiMAC_ReceivedPacket+0x6d8>)
    a708:	4798      	blx	r3
				if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a70a:	4b86      	ldr	r3, [pc, #536]	; (a924 <MiMAC_ReceivedPacket+0x6dc>)
    a70c:	781a      	ldrb	r2, [r3, #0]
    a70e:	0213      	lsls	r3, r2, #8
    a710:	189a      	adds	r2, r3, r2
    a712:	4b80      	ldr	r3, [pc, #512]	; (a914 <MiMAC_ReceivedPacket+0x6cc>)
    a714:	189b      	adds	r3, r3, r2
    a716:	789b      	ldrb	r3, [r3, #2]
    a718:	069b      	lsls	r3, r3, #26
    a71a:	d401      	bmi.n	a720 <MiMAC_ReceivedPacket+0x4d8>
				return false;
    a71c:	2400      	movs	r4, #0
    a71e:	e5af      	b.n	a280 <MiMAC_ReceivedPacket+0x38>
					MiRadioReceiveParam.action = RECEIVE_START;					
    a720:	a807      	add	r0, sp, #28
    a722:	2300      	movs	r3, #0
    a724:	7003      	strb	r3, [r0, #0]
					MiRadioReceiveParam.rxWindowSize = 0;
    a726:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&MiRadioReceiveParam);
    a728:	4b7f      	ldr	r3, [pc, #508]	; (a928 <MiMAC_ReceivedPacket+0x6e0>)
    a72a:	4798      	blx	r3
    a72c:	e7f6      	b.n	a71c <MiMAC_ReceivedPacket+0x4d4>
			for (i = 0; i < CONNECTION_SIZE; i++)
    a72e:	3401      	adds	r4, #1
    a730:	b2e4      	uxtb	r4, r4
    a732:	3601      	adds	r6, #1
    a734:	350a      	adds	r5, #10
    a736:	2c05      	cmp	r4, #5
    a738:	d014      	beq.n	a764 <MiMAC_ReceivedPacket+0x51c>
				if ((ConnectionTable[i].status.bits.isValid) &&
    a73a:	00b3      	lsls	r3, r6, #2
    a73c:	199b      	adds	r3, r3, r6
    a73e:	005b      	lsls	r3, r3, #1
    a740:	4443      	add	r3, r8
    a742:	7a1b      	ldrb	r3, [r3, #8]
    a744:	09db      	lsrs	r3, r3, #7
    a746:	d0f2      	beq.n	a72e <MiMAC_ReceivedPacket+0x4e6>
				isSameAddress(ConnectionTable[i].Address, MACRxPacket.SourceAddress))
    a748:	4b73      	ldr	r3, [pc, #460]	; (a918 <MiMAC_ReceivedPacket+0x6d0>)
    a74a:	6859      	ldr	r1, [r3, #4]
    a74c:	0028      	movs	r0, r5
    a74e:	4b78      	ldr	r3, [pc, #480]	; (a930 <MiMAC_ReceivedPacket+0x6e8>)
    a750:	4798      	blx	r3
				if ((ConnectionTable[i].status.bits.isValid) &&
    a752:	2800      	cmp	r0, #0
    a754:	d0eb      	beq.n	a72e <MiMAC_ReceivedPacket+0x4e6>
			if (i < CONNECTION_SIZE)
    a756:	2c04      	cmp	r4, #4
    a758:	d804      	bhi.n	a764 <MiMAC_ReceivedPacket+0x51c>
				if (IncomingFrameCounter[i].Val >= FrameCounter.Val)	// drop the packet if saved frame counter (IncomingFrameCounter) is equal or greater than the lastest received packet (FrameCounter.Val)
    a75a:	00a3      	lsls	r3, r4, #2
    a75c:	4a75      	ldr	r2, [pc, #468]	; (a934 <MiMAC_ReceivedPacket+0x6ec>)
    a75e:	589b      	ldr	r3, [r3, r2]
    a760:	42bb      	cmp	r3, r7
    a762:	d22d      	bcs.n	a7c0 <MiMAC_ReceivedPacket+0x578>
			MACRxPacket.PayloadLen -= 5;  // used to 5 for frame counter now -4 also added for MIC integrity
    a764:	496c      	ldr	r1, [pc, #432]	; (a918 <MiMAC_ReceivedPacket+0x6d0>)
    a766:	7b0b      	ldrb	r3, [r1, #12]
    a768:	3b05      	subs	r3, #5
    a76a:	b2db      	uxtb	r3, r3
    a76c:	730b      	strb	r3, [r1, #12]
			received_mic_values[0] = MACRxPacket.Payload[MACRxPacket.PayloadLen+1];
    a76e:	6888      	ldr	r0, [r1, #8]
    a770:	18c3      	adds	r3, r0, r3
    a772:	785d      	ldrb	r5, [r3, #1]
    a774:	4a70      	ldr	r2, [pc, #448]	; (a938 <MiMAC_ReceivedPacket+0x6f0>)
    a776:	7015      	strb	r5, [r2, #0]
			received_mic_values[1] = MACRxPacket.Payload[MACRxPacket.PayloadLen+2];
    a778:	789d      	ldrb	r5, [r3, #2]
    a77a:	7055      	strb	r5, [r2, #1]
			received_mic_values[2] = MACRxPacket.Payload[MACRxPacket.PayloadLen+3];
    a77c:	78dd      	ldrb	r5, [r3, #3]
    a77e:	7095      	strb	r5, [r2, #2]
			received_mic_values[3] = MACRxPacket.Payload[MACRxPacket.PayloadLen+4];
    a780:	791b      	ldrb	r3, [r3, #4]
    a782:	70d3      	strb	r3, [r2, #3]
			if (false == DataDecrypt(&(MACRxPacket.Payload[5]), &(MACRxPacket.PayloadLen), MACRxPacket.SourceAddress, FrameCounter, RxBuffer[BankIndex].Payload[0]))
    a784:	684a      	ldr	r2, [r1, #4]
    a786:	310c      	adds	r1, #12
    a788:	3005      	adds	r0, #5
    a78a:	4b66      	ldr	r3, [pc, #408]	; (a924 <MiMAC_ReceivedPacket+0x6dc>)
    a78c:	781d      	ldrb	r5, [r3, #0]
    a78e:	022b      	lsls	r3, r5, #8
    a790:	195d      	adds	r5, r3, r5
    a792:	4b60      	ldr	r3, [pc, #384]	; (a914 <MiMAC_ReceivedPacket+0x6cc>)
    a794:	195b      	adds	r3, r3, r5
    a796:	789b      	ldrb	r3, [r3, #2]
    a798:	9300      	str	r3, [sp, #0]
    a79a:	003b      	movs	r3, r7
    a79c:	4d67      	ldr	r5, [pc, #412]	; (a93c <MiMAC_ReceivedPacket+0x6f4>)
    a79e:	47a8      	blx	r5
    a7a0:	2800      	cmp	r0, #0
    a7a2:	d01f      	beq.n	a7e4 <MiMAC_ReceivedPacket+0x59c>
			if (i < CONNECTION_SIZE)
    a7a4:	2c04      	cmp	r4, #4
    a7a6:	d802      	bhi.n	a7ae <MiMAC_ReceivedPacket+0x566>
				IncomingFrameCounter[i].Val = FrameCounter.Val;
    a7a8:	00a4      	lsls	r4, r4, #2
    a7aa:	4b62      	ldr	r3, [pc, #392]	; (a934 <MiMAC_ReceivedPacket+0x6ec>)
    a7ac:	50e7      	str	r7, [r4, r3]
			MACRxPacket.Payload = &(MACRxPacket.Payload[5]);
    a7ae:	4b5a      	ldr	r3, [pc, #360]	; (a918 <MiMAC_ReceivedPacket+0x6d0>)
    a7b0:	689a      	ldr	r2, [r3, #8]
    a7b2:	3205      	adds	r2, #5
    a7b4:	609a      	str	r2, [r3, #8]
			MACRxPacket.flags.bits.secEn = 1;
    a7b6:	781a      	ldrb	r2, [r3, #0]
    a7b8:	2108      	movs	r1, #8
    a7ba:	430a      	orrs	r2, r1
    a7bc:	701a      	strb	r2, [r3, #0]
    a7be:	e5c8      	b.n	a352 <MiMAC_ReceivedPacket+0x10a>
					MiMAC_DiscardPacket();
    a7c0:	4b57      	ldr	r3, [pc, #348]	; (a920 <MiMAC_ReceivedPacket+0x6d8>)
    a7c2:	4798      	blx	r3
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a7c4:	4b57      	ldr	r3, [pc, #348]	; (a924 <MiMAC_ReceivedPacket+0x6dc>)
    a7c6:	781a      	ldrb	r2, [r3, #0]
    a7c8:	0213      	lsls	r3, r2, #8
    a7ca:	189a      	adds	r2, r3, r2
    a7cc:	4b51      	ldr	r3, [pc, #324]	; (a914 <MiMAC_ReceivedPacket+0x6cc>)
    a7ce:	189b      	adds	r3, r3, r2
    a7d0:	789b      	ldrb	r3, [r3, #2]
    a7d2:	069b      	lsls	r3, r3, #26
    a7d4:	d5a2      	bpl.n	a71c <MiMAC_ReceivedPacket+0x4d4>
						MiRadioReceiveParam.action = RECEIVE_START;					
    a7d6:	a807      	add	r0, sp, #28
    a7d8:	2300      	movs	r3, #0
    a7da:	7003      	strb	r3, [r0, #0]
						MiRadioReceiveParam.rxWindowSize = 0;
    a7dc:	8043      	strh	r3, [r0, #2]
						RADIO_Receive(&MiRadioReceiveParam);
    a7de:	4b52      	ldr	r3, [pc, #328]	; (a928 <MiMAC_ReceivedPacket+0x6e0>)
    a7e0:	4798      	blx	r3
    a7e2:	e79b      	b.n	a71c <MiMAC_ReceivedPacket+0x4d4>
				MiMAC_DiscardPacket();
    a7e4:	4b4e      	ldr	r3, [pc, #312]	; (a920 <MiMAC_ReceivedPacket+0x6d8>)
    a7e6:	4798      	blx	r3
				if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a7e8:	4b4e      	ldr	r3, [pc, #312]	; (a924 <MiMAC_ReceivedPacket+0x6dc>)
    a7ea:	781a      	ldrb	r2, [r3, #0]
    a7ec:	0213      	lsls	r3, r2, #8
    a7ee:	189a      	adds	r2, r3, r2
    a7f0:	4b48      	ldr	r3, [pc, #288]	; (a914 <MiMAC_ReceivedPacket+0x6cc>)
    a7f2:	189b      	adds	r3, r3, r2
    a7f4:	789b      	ldrb	r3, [r3, #2]
    a7f6:	069b      	lsls	r3, r3, #26
    a7f8:	d590      	bpl.n	a71c <MiMAC_ReceivedPacket+0x4d4>
					MiRadioReceiveParam.action = RECEIVE_START;					
    a7fa:	a807      	add	r0, sp, #28
    a7fc:	2300      	movs	r3, #0
    a7fe:	7003      	strb	r3, [r0, #0]
					MiRadioReceiveParam.rxWindowSize = 0;
    a800:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&MiRadioReceiveParam);
    a802:	4b49      	ldr	r3, [pc, #292]	; (a928 <MiMAC_ReceivedPacket+0x6e0>)
    a804:	4798      	blx	r3
    a806:	e789      	b.n	a71c <MiMAC_ReceivedPacket+0x4d4>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_DATA;
    a808:	4a43      	ldr	r2, [pc, #268]	; (a918 <MiMAC_ReceivedPacket+0x6d0>)
    a80a:	7813      	ldrb	r3, [r2, #0]
    a80c:	2403      	movs	r4, #3
    a80e:	43a3      	bics	r3, r4
    a810:	7013      	strb	r3, [r2, #0]
		MACRxPacket.LQIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 2];
    a812:	4c41      	ldr	r4, [pc, #260]	; (a918 <MiMAC_ReceivedPacket+0x6d0>)
    a814:	4b3f      	ldr	r3, [pc, #252]	; (a914 <MiMAC_ReceivedPacket+0x6cc>)
    a816:	0202      	lsls	r2, r0, #8
    a818:	1812      	adds	r2, r2, r0
    a81a:	5cd5      	ldrb	r5, [r2, r3]
    a81c:	189b      	adds	r3, r3, r2
    a81e:	5d5a      	ldrb	r2, [r3, r5]
    a820:	73a2      	strb	r2, [r4, #14]
		MACRxPacket.RSSIValue = RxBuffer[BankIndex].radioRSSI;				
    a822:	785b      	ldrb	r3, [r3, #1]
    a824:	7363      	strb	r3, [r4, #13]
		return true;
    a826:	2401      	movs	r4, #1
		if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a828:	068b      	lsls	r3, r1, #26
    a82a:	d400      	bmi.n	a82e <MiMAC_ReceivedPacket+0x5e6>
    a82c:	e528      	b.n	a280 <MiMAC_ReceivedPacket+0x38>
			    tParamAck.flags.Val = 0;
    a82e:	aa04      	add	r2, sp, #16
    a830:	2400      	movs	r4, #0
			    tParamAck.altSrcAddr = 0;
    a832:	7254      	strb	r4, [r2, #9]
			    tParamAck.altDestAddr = false;
    a834:	7214      	strb	r4, [r2, #8]
 			    tParamAck.flags.bits.sourcePrsnt = 1;
    a836:	233e      	movs	r3, #62	; 0x3e
    a838:	425b      	negs	r3, r3
    a83a:	7013      	strb	r3, [r2, #0]
			    tParamAck.DestAddress = MACRxPacket.SourceAddress;
    a83c:	4b36      	ldr	r3, [pc, #216]	; (a918 <MiMAC_ReceivedPacket+0x6d0>)
    a83e:	6859      	ldr	r1, [r3, #4]
    a840:	9105      	str	r1, [sp, #20]
			    tParamAck.DestPANID.Val = MACRxPacket.SourcePANID.Val;
    a842:	8a1b      	ldrh	r3, [r3, #16]
    a844:	8153      	strh	r3, [r2, #10]
			AckBuffer[0] = RxBuffer[BankIndex].Payload[2];	
    a846:	4b3e      	ldr	r3, [pc, #248]	; (a940 <MiMAC_ReceivedPacket+0x6f8>)
    a848:	0205      	lsls	r5, r0, #8
    a84a:	182d      	adds	r5, r5, r0
    a84c:	4831      	ldr	r0, [pc, #196]	; (a914 <MiMAC_ReceivedPacket+0x6cc>)
    a84e:	1940      	adds	r0, r0, r5
    a850:	7900      	ldrb	r0, [r0, #4]
    a852:	7018      	strb	r0, [r3, #0]
			MiMAC_SendPacket(tParamAck, AckBuffer, 1, 0, NULL);
    a854:	9402      	str	r4, [sp, #8]
    a856:	9401      	str	r4, [sp, #4]
    a858:	2001      	movs	r0, #1
    a85a:	9000      	str	r0, [sp, #0]
    a85c:	9804      	ldr	r0, [sp, #16]
    a85e:	9a06      	ldr	r2, [sp, #24]
    a860:	4c38      	ldr	r4, [pc, #224]	; (a944 <MiMAC_ReceivedPacket+0x6fc>)
    a862:	47a0      	blx	r4
		return true;
    a864:	2401      	movs	r4, #1
    a866:	e50b      	b.n	a280 <MiMAC_ReceivedPacket+0x38>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_COMMAND;
    a868:	4a2b      	ldr	r2, [pc, #172]	; (a918 <MiMAC_ReceivedPacket+0x6d0>)
    a86a:	7813      	ldrb	r3, [r2, #0]
    a86c:	2403      	movs	r4, #3
    a86e:	43a3      	bics	r3, r4
    a870:	2401      	movs	r4, #1
    a872:	4323      	orrs	r3, r4
    a874:	7013      	strb	r3, [r2, #0]
			break;
    a876:	e7cc      	b.n	a812 <MiMAC_ReceivedPacket+0x5ca>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_RESERVE;
    a878:	4a27      	ldr	r2, [pc, #156]	; (a918 <MiMAC_ReceivedPacket+0x6d0>)
    a87a:	7813      	ldrb	r3, [r2, #0]
    a87c:	2403      	movs	r4, #3
    a87e:	4323      	orrs	r3, r4
    a880:	7013      	strb	r3, [r2, #0]
			break;
    a882:	e7c6      	b.n	a812 <MiMAC_ReceivedPacket+0x5ca>
				MACRxPacket.flags.bits.packetType = PACKET_TYPE_ACK;
    a884:	4a24      	ldr	r2, [pc, #144]	; (a918 <MiMAC_ReceivedPacket+0x6d0>)
    a886:	7813      	ldrb	r3, [r2, #0]
    a888:	2103      	movs	r1, #3
    a88a:	438b      	bics	r3, r1
    a88c:	2102      	movs	r1, #2
    a88e:	430b      	orrs	r3, r1
    a890:	7013      	strb	r3, [r2, #0]
				if((AckSeqNum == *(MACRxPacket.Payload))&& (AckReqData))
    a892:	6893      	ldr	r3, [r2, #8]
    a894:	781a      	ldrb	r2, [r3, #0]
    a896:	4b2c      	ldr	r3, [pc, #176]	; (a948 <MiMAC_ReceivedPacket+0x700>)
    a898:	781b      	ldrb	r3, [r3, #0]
    a89a:	429a      	cmp	r2, r3
    a89c:	d003      	beq.n	a8a6 <MiMAC_ReceivedPacket+0x65e>
				MiMAC_DiscardPacket();
    a89e:	4b20      	ldr	r3, [pc, #128]	; (a920 <MiMAC_ReceivedPacket+0x6d8>)
    a8a0:	4798      	blx	r3
				return false;
    a8a2:	2400      	movs	r4, #0
    a8a4:	e4ec      	b.n	a280 <MiMAC_ReceivedPacket+0x38>
				if((AckSeqNum == *(MACRxPacket.Payload))&& (AckReqData))
    a8a6:	4b29      	ldr	r3, [pc, #164]	; (a94c <MiMAC_ReceivedPacket+0x704>)
    a8a8:	781b      	ldrb	r3, [r3, #0]
    a8aa:	2b00      	cmp	r3, #0
    a8ac:	d0f7      	beq.n	a89e <MiMAC_ReceivedPacket+0x656>
					DataTxAckTimer.Val = 0;
    a8ae:	2400      	movs	r4, #0
    a8b0:	4b27      	ldr	r3, [pc, #156]	; (a950 <MiMAC_ReceivedPacket+0x708>)
    a8b2:	601c      	str	r4, [r3, #0]
					PHY_DataConf(SUCCESS); 
    a8b4:	2000      	movs	r0, #0
    a8b6:	4b27      	ldr	r3, [pc, #156]	; (a954 <MiMAC_ReceivedPacket+0x70c>)
    a8b8:	4798      	blx	r3
					AckReqData = 0;
    a8ba:	4b24      	ldr	r3, [pc, #144]	; (a94c <MiMAC_ReceivedPacket+0x704>)
    a8bc:	701c      	strb	r4, [r3, #0]
    a8be:	e7ee      	b.n	a89e <MiMAC_ReceivedPacket+0x656>
				if (!(((RxBuffer[BankIndex].Payload[5] == 0xFF) & (RxBuffer[BankIndex].Payload[6] == 0xFF)) ||((RxBuffer[BankIndex].Payload[5] == DevShortAddress[0]) & (RxBuffer[BankIndex].Payload[6] == DevShortAddress[1]))) )
    a8c0:	0201      	lsls	r1, r0, #8
    a8c2:	1809      	adds	r1, r1, r0
    a8c4:	4b13      	ldr	r3, [pc, #76]	; (a914 <MiMAC_ReceivedPacket+0x6cc>)
    a8c6:	185b      	adds	r3, r3, r1
    a8c8:	4914      	ldr	r1, [pc, #80]	; (a91c <MiMAC_ReceivedPacket+0x6d4>)
    a8ca:	7849      	ldrb	r1, [r1, #1]
    a8cc:	7a1b      	ldrb	r3, [r3, #8]
    a8ce:	4299      	cmp	r1, r3
    a8d0:	d000      	beq.n	a8d4 <MiMAC_ReceivedPacket+0x68c>
    a8d2:	e5a0      	b.n	a416 <MiMAC_ReceivedPacket+0x1ce>
    a8d4:	4b11      	ldr	r3, [pc, #68]	; (a91c <MiMAC_ReceivedPacket+0x6d4>)
    a8d6:	781b      	ldrb	r3, [r3, #0]
    a8d8:	42a3      	cmp	r3, r4
    a8da:	d000      	beq.n	a8de <MiMAC_ReceivedPacket+0x696>
    a8dc:	e59b      	b.n	a416 <MiMAC_ReceivedPacket+0x1ce>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    a8de:	490e      	ldr	r1, [pc, #56]	; (a918 <MiMAC_ReceivedPacket+0x6d0>)
    a8e0:	4c0c      	ldr	r4, [pc, #48]	; (a914 <MiMAC_ReceivedPacket+0x6cc>)
    a8e2:	0203      	lsls	r3, r0, #8
    a8e4:	1818      	adds	r0, r3, r0
    a8e6:	1823      	adds	r3, r4, r0
    a8e8:	795d      	ldrb	r5, [r3, #5]
    a8ea:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    a8ec:	799b      	ldrb	r3, [r3, #6]
    a8ee:	744b      	strb	r3, [r1, #17]
    a8f0:	0213      	lsls	r3, r2, #8
    a8f2:	189a      	adds	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    a8f4:	0013      	movs	r3, r2
    a8f6:	3309      	adds	r3, #9
    a8f8:	191b      	adds	r3, r3, r4
    a8fa:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    a8fc:	5d03      	ldrb	r3, [r0, r4]
    a8fe:	3b13      	subs	r3, #19
    a900:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    a902:	3211      	adds	r2, #17
    a904:	1912      	adds	r2, r2, r4
    a906:	608a      	str	r2, [r1, #8]
    a908:	e5b6      	b.n	a478 <MiMAC_ReceivedPacket+0x230>
			BankIndex = i;
    a90a:	2200      	movs	r2, #0
    a90c:	4b05      	ldr	r3, [pc, #20]	; (a924 <MiMAC_ReceivedPacket+0x6dc>)
    a90e:	701a      	strb	r2, [r3, #0]
    a910:	e4c1      	b.n	a296 <MiMAC_ReceivedPacket+0x4e>
    a912:	46c0      	nop			; (mov r8, r8)
    a914:	20002434 	.word	0x20002434
    a918:	2000287c 	.word	0x2000287c
    a91c:	2000283c 	.word	0x2000283c
    a920:	0000a1c9 	.word	0x0000a1c9
    a924:	2000001b 	.word	0x2000001b
    a928:	0000f789 	.word	0x0000f789
    a92c:	2000242c 	.word	0x2000242c
    a930:	0000aff5 	.word	0x0000aff5
    a934:	200028a0 	.word	0x200028a0
    a938:	20002318 	.word	0x20002318
    a93c:	00009c5d 	.word	0x00009c5d
    a940:	2000231c 	.word	0x2000231c
    a944:	00009e39 	.word	0x00009e39
    a948:	200021b0 	.word	0x200021b0
    a94c:	2000047f 	.word	0x2000047f
    a950:	20002b3c 	.word	0x20002b3c
    a954:	0000a1e5 	.word	0x0000a1e5

0000a958 <MiMAC_Task>:

void MiMAC_Task(void)
{
    a958:	b510      	push	{r4, lr}
  PHY_TaskHandler();
    a95a:	4b0b      	ldr	r3, [pc, #44]	; (a988 <MiMAC_Task+0x30>)
    a95c:	4798      	blx	r3
  if(dataConfCallback && dataConfAvailable)
    a95e:	4b0b      	ldr	r3, [pc, #44]	; (a98c <MiMAC_Task+0x34>)
    a960:	681b      	ldr	r3, [r3, #0]
    a962:	2b00      	cmp	r3, #0
    a964:	d003      	beq.n	a96e <MiMAC_Task+0x16>
    a966:	4a0a      	ldr	r2, [pc, #40]	; (a990 <MiMAC_Task+0x38>)
    a968:	7812      	ldrb	r2, [r2, #0]
    a96a:	2a00      	cmp	r2, #0
    a96c:	d100      	bne.n	a970 <MiMAC_Task+0x18>
  {
	  dataConfAvailable = false;
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
  }
}
    a96e:	bd10      	pop	{r4, pc}
	  dataConfAvailable = false;
    a970:	2100      	movs	r1, #0
    a972:	4a07      	ldr	r2, [pc, #28]	; (a990 <MiMAC_Task+0x38>)
    a974:	7011      	strb	r1, [r2, #0]
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
    a976:	4a07      	ldr	r2, [pc, #28]	; (a994 <MiMAC_Task+0x3c>)
    a978:	6812      	ldr	r2, [r2, #0]
    a97a:	4907      	ldr	r1, [pc, #28]	; (a998 <MiMAC_Task+0x40>)
    a97c:	7809      	ldrb	r1, [r1, #0]
    a97e:	4807      	ldr	r0, [pc, #28]	; (a99c <MiMAC_Task+0x44>)
    a980:	7800      	ldrb	r0, [r0, #0]
    a982:	4798      	blx	r3
}
    a984:	e7f3      	b.n	a96e <MiMAC_Task+0x16>
    a986:	46c0      	nop			; (mov r8, r8)
    a988:	0000adb1 	.word	0x0000adb1
    a98c:	20000484 	.word	0x20000484
    a990:	20000482 	.word	0x20000482
    a994:	2000048c 	.word	0x2000048c
    a998:	20002300 	.word	0x20002300
    a99c:	20000488 	.word	0x20000488

0000a9a0 <phySetChannel>:
}

/*************************************************************************//**
*****************************************************************************/
static void phySetChannel(void)
{
    a9a0:	b500      	push	{lr}
    a9a2:	b083      	sub	sp, #12
	uint32_t frequncy_set;
	if(phyChannel) // Based on channel we need to set frequency 
    a9a4:	4b2f      	ldr	r3, [pc, #188]	; (aa64 <phySetChannel+0xc4>)
    a9a6:	781b      	ldrb	r3, [r3, #0]
    a9a8:	2b00      	cmp	r3, #0
    a9aa:	d007      	beq.n	a9bc <phySetChannel+0x1c>
	{
		switch(phyChannel)
    a9ac:	2b19      	cmp	r3, #25
    a9ae:	d856      	bhi.n	aa5e <phySetChannel+0xbe>
    a9b0:	009b      	lsls	r3, r3, #2
    a9b2:	4a2d      	ldr	r2, [pc, #180]	; (aa68 <phySetChannel+0xc8>)
    a9b4:	58d3      	ldr	r3, [r2, r3]
    a9b6:	469f      	mov	pc, r3
				//break;
			//case 8:
				//frequncy_set = FREQ_786000KHZ;
				//break;
			case 0:
				frequncy_set = FREQ_862000KHZ;
    a9b8:	4b2c      	ldr	r3, [pc, #176]	; (aa6c <phySetChannel+0xcc>)
    a9ba:	9301      	str	r3, [sp, #4]
				break;				
																									
		}
	}
		
	if(RADIO_SetAttr(CHANNEL_FREQUENCY,(void *)&frequncy_set) == 0)  
    a9bc:	a901      	add	r1, sp, #4
    a9be:	2001      	movs	r0, #1
    a9c0:	4b2b      	ldr	r3, [pc, #172]	; (aa70 <phySetChannel+0xd0>)
    a9c2:	4798      	blx	r3
	{
	}
}
    a9c4:	b003      	add	sp, #12
    a9c6:	bd00      	pop	{pc}
				frequncy_set = FREQ_863000KHZ;
    a9c8:	4b2a      	ldr	r3, [pc, #168]	; (aa74 <phySetChannel+0xd4>)
    a9ca:	9301      	str	r3, [sp, #4]
				break;
    a9cc:	e7f6      	b.n	a9bc <phySetChannel+0x1c>
				frequncy_set = FREQ_865000KHZ;
    a9ce:	4b2a      	ldr	r3, [pc, #168]	; (aa78 <phySetChannel+0xd8>)
    a9d0:	9301      	str	r3, [sp, #4]
				break;
    a9d2:	e7f3      	b.n	a9bc <phySetChannel+0x1c>
				frequncy_set = FREQ_866550KHZ;
    a9d4:	4b29      	ldr	r3, [pc, #164]	; (aa7c <phySetChannel+0xdc>)
    a9d6:	9301      	str	r3, [sp, #4]
				break;
    a9d8:	e7f0      	b.n	a9bc <phySetChannel+0x1c>
				frequncy_set = FREQ_867000KHZ;
    a9da:	4b29      	ldr	r3, [pc, #164]	; (aa80 <phySetChannel+0xe0>)
    a9dc:	9301      	str	r3, [sp, #4]
				break;			
    a9de:	e7ed      	b.n	a9bc <phySetChannel+0x1c>
				frequncy_set = FREQ_868100KHZ;
    a9e0:	4b28      	ldr	r3, [pc, #160]	; (aa84 <phySetChannel+0xe4>)
    a9e2:	9301      	str	r3, [sp, #4]
				break;
    a9e4:	e7ea      	b.n	a9bc <phySetChannel+0x1c>
				frequncy_set = FREQ_869525KHZ;
    a9e6:	4b28      	ldr	r3, [pc, #160]	; (aa88 <phySetChannel+0xe8>)
    a9e8:	9301      	str	r3, [sp, #4]
				break;			
    a9ea:	e7e7      	b.n	a9bc <phySetChannel+0x1c>
				frequncy_set = FREQ_870000KHZ;
    a9ec:	4b27      	ldr	r3, [pc, #156]	; (aa8c <phySetChannel+0xec>)
    a9ee:	9301      	str	r3, [sp, #4]
				break;
    a9f0:	e7e4      	b.n	a9bc <phySetChannel+0x1c>
				frequncy_set = FREQ_902300KHZ;
    a9f2:	4b27      	ldr	r3, [pc, #156]	; (aa90 <phySetChannel+0xf0>)
    a9f4:	9301      	str	r3, [sp, #4]
				break;
    a9f6:	e7e1      	b.n	a9bc <phySetChannel+0x1c>
				frequncy_set = FREQ_903000KHZ;
    a9f8:	4b26      	ldr	r3, [pc, #152]	; (aa94 <phySetChannel+0xf4>)
    a9fa:	9301      	str	r3, [sp, #4]
				break;
    a9fc:	e7de      	b.n	a9bc <phySetChannel+0x1c>
				frequncy_set = FREQ_915000KHZ;
    a9fe:	4b26      	ldr	r3, [pc, #152]	; (aa98 <phySetChannel+0xf8>)
    aa00:	9301      	str	r3, [sp, #4]
				break;
    aa02:	e7db      	b.n	a9bc <phySetChannel+0x1c>
				frequncy_set = FREQ_915200KHZ;
    aa04:	4b25      	ldr	r3, [pc, #148]	; (aa9c <phySetChannel+0xfc>)
    aa06:	9301      	str	r3, [sp, #4]
				break;
    aa08:	e7d8      	b.n	a9bc <phySetChannel+0x1c>
				frequncy_set = FREQ_915900KHZ;
    aa0a:	4b25      	ldr	r3, [pc, #148]	; (aaa0 <phySetChannel+0x100>)
    aa0c:	9301      	str	r3, [sp, #4]
				break;
    aa0e:	e7d5      	b.n	a9bc <phySetChannel+0x1c>
				frequncy_set = FREQ_920000KHZ;
    aa10:	4b24      	ldr	r3, [pc, #144]	; (aaa4 <phySetChannel+0x104>)
    aa12:	9301      	str	r3, [sp, #4]
				break;
    aa14:	e7d2      	b.n	a9bc <phySetChannel+0x1c>
				frequncy_set = FREQ_920900KHZ;
    aa16:	4b24      	ldr	r3, [pc, #144]	; (aaa8 <phySetChannel+0x108>)
    aa18:	9301      	str	r3, [sp, #4]
				break;
    aa1a:	e7cf      	b.n	a9bc <phySetChannel+0x1c>
				frequncy_set = FREQ_921900KHZ;
    aa1c:	4b23      	ldr	r3, [pc, #140]	; (aaac <phySetChannel+0x10c>)
    aa1e:	9301      	str	r3, [sp, #4]
				break;
    aa20:	e7cc      	b.n	a9bc <phySetChannel+0x1c>
				frequncy_set = FREQ_922000KHZ;
    aa22:	4b23      	ldr	r3, [pc, #140]	; (aab0 <phySetChannel+0x110>)
    aa24:	9301      	str	r3, [sp, #4]
				break;
    aa26:	e7c9      	b.n	a9bc <phySetChannel+0x1c>
				frequncy_set = FREQ_922100KHZ;
    aa28:	4b22      	ldr	r3, [pc, #136]	; (aab4 <phySetChannel+0x114>)
    aa2a:	9301      	str	r3, [sp, #4]
				break;
    aa2c:	e7c6      	b.n	a9bc <phySetChannel+0x1c>
				frequncy_set = FREQ_923000KHZ;
    aa2e:	4b22      	ldr	r3, [pc, #136]	; (aab8 <phySetChannel+0x118>)
    aa30:	9301      	str	r3, [sp, #4]
				break;
    aa32:	e7c3      	b.n	a9bc <phySetChannel+0x1c>
				frequncy_set = FREQ_923200KHZ;
    aa34:	4b21      	ldr	r3, [pc, #132]	; (aabc <phySetChannel+0x11c>)
    aa36:	9301      	str	r3, [sp, #4]
				break;
    aa38:	e7c0      	b.n	a9bc <phySetChannel+0x1c>
				frequncy_set = FREQ_923300KHZ;
    aa3a:	4b21      	ldr	r3, [pc, #132]	; (aac0 <phySetChannel+0x120>)
    aa3c:	9301      	str	r3, [sp, #4]
				break;
    aa3e:	e7bd      	b.n	a9bc <phySetChannel+0x1c>
				frequncy_set = FREQ_925000KHZ;
    aa40:	4b20      	ldr	r3, [pc, #128]	; (aac4 <phySetChannel+0x124>)
    aa42:	9301      	str	r3, [sp, #4]
				break;		
    aa44:	e7ba      	b.n	a9bc <phySetChannel+0x1c>
				frequncy_set = FREQ_927500KHZ;
    aa46:	4b20      	ldr	r3, [pc, #128]	; (aac8 <phySetChannel+0x128>)
    aa48:	9301      	str	r3, [sp, #4]
				break;
    aa4a:	e7b7      	b.n	a9bc <phySetChannel+0x1c>
				frequncy_set = FREQ_928000KHZ;
    aa4c:	4b1f      	ldr	r3, [pc, #124]	; (aacc <phySetChannel+0x12c>)
    aa4e:	9301      	str	r3, [sp, #4]
				break;
    aa50:	e7b4      	b.n	a9bc <phySetChannel+0x1c>
				frequncy_set = FREQ_928500KHZ;
    aa52:	4b1f      	ldr	r3, [pc, #124]	; (aad0 <phySetChannel+0x130>)
    aa54:	9301      	str	r3, [sp, #4]
				break;
    aa56:	e7b1      	b.n	a9bc <phySetChannel+0x1c>
				frequncy_set = FREQ_1020000KHZ;
    aa58:	4b1e      	ldr	r3, [pc, #120]	; (aad4 <phySetChannel+0x134>)
    aa5a:	9301      	str	r3, [sp, #4]
				break;
    aa5c:	e7ae      	b.n	a9bc <phySetChannel+0x1c>
				frequncy_set = FREQ_868100KHZ;
    aa5e:	4b09      	ldr	r3, [pc, #36]	; (aa84 <phySetChannel+0xe4>)
    aa60:	9301      	str	r3, [sp, #4]
				break;				
    aa62:	e7ab      	b.n	a9bc <phySetChannel+0x1c>
    aa64:	20000490 	.word	0x20000490
    aa68:	00018fb4 	.word	0x00018fb4
    aa6c:	33611380 	.word	0x33611380
    aa70:	0000e57d 	.word	0x0000e57d
    aa74:	337055c0 	.word	0x337055c0
    aa78:	338eda40 	.word	0x338eda40
    aa7c:	33a680f0 	.word	0x33a680f0
    aa80:	33ad5ec0 	.word	0x33ad5ec0
    aa84:	33be27a0 	.word	0x33be27a0
    aa88:	33d3e608 	.word	0x33d3e608
    aa8c:	33db2580 	.word	0x33db2580
    aa90:	35c80160 	.word	0x35c80160
    aa94:	35d2afc0 	.word	0x35d2afc0
    aa98:	3689cac0 	.word	0x3689cac0
    aa9c:	368cd800 	.word	0x368cd800
    aaa0:	36978660 	.word	0x36978660
    aaa4:	36d61600 	.word	0x36d61600
    aaa8:	36e3d1a0 	.word	0x36e3d1a0
    aaac:	36f313e0 	.word	0x36f313e0
    aab0:	36f49a80 	.word	0x36f49a80
    aab4:	36f62120 	.word	0x36f62120
    aab8:	3703dcc0 	.word	0x3703dcc0
    aabc:	3706ea00 	.word	0x3706ea00
    aac0:	370870a0 	.word	0x370870a0
    aac4:	37226140 	.word	0x37226140
    aac8:	374886e0 	.word	0x374886e0
    aacc:	37502800 	.word	0x37502800
    aad0:	3757c920 	.word	0x3757c920
    aad4:	3ccbf700 	.word	0x3ccbf700

0000aad8 <radioCallback>:
{
    aad8:	b570      	push	{r4, r5, r6, lr}
    aada:	b082      	sub	sp, #8
    aadc:	0004      	movs	r4, r0
    aade:	000d      	movs	r5, r1
	callbackBackup = callback;
    aae0:	4b3e      	ldr	r3, [pc, #248]	; (abdc <radioCallback+0x104>)
    aae2:	7018      	strb	r0, [r3, #0]
	int16_t rssi_readVal=0;
    aae4:	466b      	mov	r3, sp
    aae6:	1c98      	adds	r0, r3, #2
    aae8:	2300      	movs	r3, #0
    aaea:	8003      	strh	r3, [r0, #0]
	Radio_ReadRssi(&rssi_readVal);
    aaec:	4b3c      	ldr	r3, [pc, #240]	; (abe0 <radioCallback+0x108>)
    aaee:	4798      	blx	r3
	switch (callback)
    aaf0:	2c10      	cmp	r4, #16
    aaf2:	d853      	bhi.n	ab9c <radioCallback+0xc4>
    aaf4:	00a4      	lsls	r4, r4, #2
    aaf6:	4b3b      	ldr	r3, [pc, #236]	; (abe4 <radioCallback+0x10c>)
    aaf8:	591b      	ldr	r3, [r3, r4]
    aafa:	469f      	mov	pc, r3
					if (RxBuffer[i].PayloadLen == 0)
    aafc:	4b3a      	ldr	r3, [pc, #232]	; (abe8 <radioCallback+0x110>)
    aafe:	781a      	ldrb	r2, [r3, #0]
    ab00:	2a00      	cmp	r2, #0
    ab02:	d00e      	beq.n	ab22 <radioCallback+0x4a>
    ab04:	2302      	movs	r3, #2
    ab06:	33ff      	adds	r3, #255	; 0xff
    ab08:	4a37      	ldr	r2, [pc, #220]	; (abe8 <radioCallback+0x110>)
    ab0a:	5cd3      	ldrb	r3, [r2, r3]
    ab0c:	2b00      	cmp	r3, #0
    ab0e:	d04e      	beq.n	abae <radioCallback+0xd6>
    ab10:	4b36      	ldr	r3, [pc, #216]	; (abec <radioCallback+0x114>)
    ab12:	5cd3      	ldrb	r3, [r2, r3]
    ab14:	2b00      	cmp	r3, #0
    ab16:	d04c      	beq.n	abb2 <radioCallback+0xda>
    ab18:	4b35      	ldr	r3, [pc, #212]	; (abf0 <radioCallback+0x118>)
    ab1a:	5cd3      	ldrb	r3, [r2, r3]
	uint8_t i,RxBank=0xFF;
    ab1c:	22ff      	movs	r2, #255	; 0xff
					if (RxBuffer[i].PayloadLen == 0)
    ab1e:	2b00      	cmp	r3, #0
    ab20:	d043      	beq.n	abaa <radioCallback+0xd2>
				RxBuffer[RxBank].PayloadLen = callbackRx->RX.bufferLength;
    ab22:	0016      	movs	r6, r2
    ab24:	7a2c      	ldrb	r4, [r5, #8]
    ab26:	0213      	lsls	r3, r2, #8
    ab28:	189a      	adds	r2, r3, r2
    ab2a:	4b2f      	ldr	r3, [pc, #188]	; (abe8 <radioCallback+0x110>)
    ab2c:	54d4      	strb	r4, [r2, r3]
				if (RxBuffer[RxBank].PayloadLen < (RX_PACKET_SIZE - 4))			
    ab2e:	2cfa      	cmp	r4, #250	; 0xfa
    ab30:	d80d      	bhi.n	ab4e <radioCallback+0x76>
    ab32:	2300      	movs	r3, #0
						RxBuffer[RxBank].Payload[i] = callbackRx->RX.buffer[i];
    ab34:	0232      	lsls	r2, r6, #8
    ab36:	1992      	adds	r2, r2, r6
    ab38:	482b      	ldr	r0, [pc, #172]	; (abe8 <radioCallback+0x110>)
    ab3a:	1880      	adds	r0, r0, r2
    ab3c:	686a      	ldr	r2, [r5, #4]
    ab3e:	5cd1      	ldrb	r1, [r2, r3]
    ab40:	18c2      	adds	r2, r0, r3
    ab42:	7091      	strb	r1, [r2, #2]
					for (i = 0; i <= callbackRx->RX.bufferLength; i++)
    ab44:	3301      	adds	r3, #1
    ab46:	b2db      	uxtb	r3, r3
    ab48:	7a2a      	ldrb	r2, [r5, #8]
    ab4a:	429a      	cmp	r2, r3
    ab4c:	d2f6      	bcs.n	ab3c <radioCallback+0x64>
				RxBuffer[RxBank].PayloadLen +=4;
    ab4e:	4b26      	ldr	r3, [pc, #152]	; (abe8 <radioCallback+0x110>)
    ab50:	0232      	lsls	r2, r6, #8
    ab52:	1992      	adds	r2, r2, r6
    ab54:	3404      	adds	r4, #4
    ab56:	54d4      	strb	r4, [r2, r3]
				rssi_readVal = radioConfiguration.packetRSSI;
    ab58:	2156      	movs	r1, #86	; 0x56
    ab5a:	4826      	ldr	r0, [pc, #152]	; (abf4 <radioCallback+0x11c>)
    ab5c:	5e41      	ldrsh	r1, [r0, r1]
    ab5e:	4668      	mov	r0, sp
    ab60:	8041      	strh	r1, [r0, #2]
				RxBuffer[RxBank].radioRSSI = rssi_readVal;						
    ab62:	189b      	adds	r3, r3, r2
    ab64:	7059      	strb	r1, [r3, #1]
				if(RxBuffer[RxBank].Payload[0] & 0x20)
    ab66:	789b      	ldrb	r3, [r3, #2]
    ab68:	069b      	lsls	r3, r3, #26
    ab6a:	d524      	bpl.n	abb6 <radioCallback+0xde>
					RadioReceiveParam.action = RECEIVE_STOP;					
    ab6c:	a801      	add	r0, sp, #4
    ab6e:	2301      	movs	r3, #1
    ab70:	7003      	strb	r3, [r0, #0]
					RadioReceiveParam.rxWindowSize = 0;
    ab72:	2300      	movs	r3, #0
    ab74:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&RadioReceiveParam);
    ab76:	4b20      	ldr	r3, [pc, #128]	; (abf8 <radioCallback+0x120>)
    ab78:	4798      	blx	r3
    ab7a:	e00f      	b.n	ab9c <radioCallback+0xc4>
			if((!AckReqData)||(callbackRx->status != ERR_NONE))
    ab7c:	4b1f      	ldr	r3, [pc, #124]	; (abfc <radioCallback+0x124>)
    ab7e:	781b      	ldrb	r3, [r3, #0]
    ab80:	2b00      	cmp	r3, #0
    ab82:	d002      	beq.n	ab8a <radioCallback+0xb2>
    ab84:	782b      	ldrb	r3, [r5, #0]
    ab86:	2b00      	cmp	r3, #0
    ab88:	d00a      	beq.n	aba0 <radioCallback+0xc8>
				PHY_DataConf(callbackRx->status); // Need to convert LoRa status to MiWi status
    ab8a:	7828      	ldrb	r0, [r5, #0]
    ab8c:	4b1c      	ldr	r3, [pc, #112]	; (ac00 <radioCallback+0x128>)
    ab8e:	4798      	blx	r3
			RadioReceiveParam.action = RECEIVE_START;
    ab90:	a801      	add	r0, sp, #4
    ab92:	2300      	movs	r3, #0
    ab94:	7003      	strb	r3, [r0, #0]
			RadioReceiveParam.rxWindowSize = 0;
    ab96:	8043      	strh	r3, [r0, #2]
			RADIO_Receive(&RadioReceiveParam);
    ab98:	4b17      	ldr	r3, [pc, #92]	; (abf8 <radioCallback+0x120>)
    ab9a:	4798      	blx	r3
}
    ab9c:	b002      	add	sp, #8
    ab9e:	bd70      	pop	{r4, r5, r6, pc}
				DataTxAckTimer.Val = MiWi_TickGet();
    aba0:	4b18      	ldr	r3, [pc, #96]	; (ac04 <radioCallback+0x12c>)
    aba2:	4798      	blx	r3
    aba4:	4b18      	ldr	r3, [pc, #96]	; (ac08 <radioCallback+0x130>)
    aba6:	6018      	str	r0, [r3, #0]
    aba8:	e7f2      	b.n	ab90 <radioCallback+0xb8>
				for (i = 0; i < BANK_SIZE; i++)
    abaa:	3afc      	subs	r2, #252	; 0xfc
    abac:	e7b9      	b.n	ab22 <radioCallback+0x4a>
    abae:	2201      	movs	r2, #1
    abb0:	e7b7      	b.n	ab22 <radioCallback+0x4a>
    abb2:	2202      	movs	r2, #2
    abb4:	e7b5      	b.n	ab22 <radioCallback+0x4a>
					RadioReceiveParam.action = RECEIVE_START;
    abb6:	a801      	add	r0, sp, #4
    abb8:	2300      	movs	r3, #0
    abba:	7003      	strb	r3, [r0, #0]
					RadioReceiveParam.rxWindowSize = 0;
    abbc:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&RadioReceiveParam);	
    abbe:	4b0e      	ldr	r3, [pc, #56]	; (abf8 <radioCallback+0x120>)
    abc0:	4798      	blx	r3
    abc2:	e7eb      	b.n	ab9c <radioCallback+0xc4>
				RadioReceiveParam.action = RECEIVE_START;
    abc4:	ac01      	add	r4, sp, #4
    abc6:	2300      	movs	r3, #0
    abc8:	7023      	strb	r3, [r4, #0]
				RadioReceiveParam.rxWindowSize = 0;
    abca:	8063      	strh	r3, [r4, #2]
				PHY_DataConf(FAILURE);											
    abcc:	2001      	movs	r0, #1
    abce:	4b0c      	ldr	r3, [pc, #48]	; (ac00 <radioCallback+0x128>)
    abd0:	4798      	blx	r3
				RADIO_Receive(&RadioReceiveParam);
    abd2:	0020      	movs	r0, r4
    abd4:	4b08      	ldr	r3, [pc, #32]	; (abf8 <radioCallback+0x120>)
    abd6:	4798      	blx	r3
}
    abd8:	e7e0      	b.n	ab9c <radioCallback+0xc4>
    abda:	46c0      	nop			; (mov r8, r8)
    abdc:	2000242b 	.word	0x2000242b
    abe0:	0000ddb5 	.word	0x0000ddb5
    abe4:	0001901c 	.word	0x0001901c
    abe8:	20002434 	.word	0x20002434
    abec:	00000202 	.word	0x00000202
    abf0:	00000303 	.word	0x00000303
    abf4:	20002f50 	.word	0x20002f50
    abf8:	0000f789 	.word	0x0000f789
    abfc:	2000047f 	.word	0x2000047f
    ac00:	0000a1e5 	.word	0x0000a1e5
    ac04:	0000c41d 	.word	0x0000c41d
    ac08:	20002b3c 	.word	0x20002b3c

0000ac0c <PHY_Init>:
{
    ac0c:	b510      	push	{r4, lr}
    HAL_RadioInit();
    ac0e:	4b06      	ldr	r3, [pc, #24]	; (ac28 <PHY_Init+0x1c>)
    ac10:	4798      	blx	r3
    AESInit();	
    ac12:	4b06      	ldr	r3, [pc, #24]	; (ac2c <PHY_Init+0x20>)
    ac14:	4798      	blx	r3
	RADIO_Init();
    ac16:	4b06      	ldr	r3, [pc, #24]	; (ac30 <PHY_Init+0x24>)
    ac18:	4798      	blx	r3
	RADIO_SetAttr(RADIO_CALLBACK, (void *)&radioCallback);
    ac1a:	4906      	ldr	r1, [pc, #24]	; (ac34 <PHY_Init+0x28>)
    ac1c:	201a      	movs	r0, #26
    ac1e:	4b06      	ldr	r3, [pc, #24]	; (ac38 <PHY_Init+0x2c>)
    ac20:	4798      	blx	r3
   RADIO_InitDefaultAttributes();				
    ac22:	4b06      	ldr	r3, [pc, #24]	; (ac3c <PHY_Init+0x30>)
    ac24:	4798      	blx	r3
}
    ac26:	bd10      	pop	{r4, pc}
    ac28:	0000c7d1 	.word	0x0000c7d1
    ac2c:	0000d279 	.word	0x0000d279
    ac30:	0000e779 	.word	0x0000e779
    ac34:	0000aad9 	.word	0x0000aad9
    ac38:	0000e57d 	.word	0x0000e57d
    ac3c:	0000f595 	.word	0x0000f595

0000ac40 <PHY_SetRxState>:
{
    ac40:	b510      	push	{r4, lr}

/*************************************************************************//**
*****************************************************************************/
static void phySetRxState(void)
{
	RADIO_RxHandler();
    ac42:	4b01      	ldr	r3, [pc, #4]	; (ac48 <PHY_SetRxState+0x8>)
    ac44:	4798      	blx	r3
}
    ac46:	bd10      	pop	{r4, pc}
    ac48:	0000f47d 	.word	0x0000f47d

0000ac4c <PHY_SetPanId>:
{
    ac4c:	b082      	sub	sp, #8
	DevPanId[0]=d[0];
    ac4e:	b2c2      	uxtb	r2, r0
    ac50:	4b02      	ldr	r3, [pc, #8]	; (ac5c <PHY_SetPanId+0x10>)
    ac52:	701a      	strb	r2, [r3, #0]
	DevPanId[1]=d[1];
    ac54:	0a00      	lsrs	r0, r0, #8
    ac56:	7058      	strb	r0, [r3, #1]
}
    ac58:	b002      	add	sp, #8
    ac5a:	4770      	bx	lr
    ac5c:	20002838 	.word	0x20002838

0000ac60 <PHY_SetShortAddr>:
{
    ac60:	b082      	sub	sp, #8
	DevShortAddress[0]=d[0];
    ac62:	b2c2      	uxtb	r2, r0
    ac64:	4b02      	ldr	r3, [pc, #8]	; (ac70 <PHY_SetShortAddr+0x10>)
    ac66:	701a      	strb	r2, [r3, #0]
	DevShortAddress[1]=d[1];
    ac68:	0a00      	lsrs	r0, r0, #8
    ac6a:	7058      	strb	r0, [r3, #1]
}
    ac6c:	b002      	add	sp, #8
    ac6e:	4770      	bx	lr
    ac70:	2000283c 	.word	0x2000283c

0000ac74 <PHY_GetAttribute>:
{
    ac74:	b510      	push	{r4, lr}
	switch(RadioAttr)
    ac76:	2807      	cmp	r0, #7
    ac78:	d003      	beq.n	ac82 <PHY_GetAttribute+0xe>
    ac7a:	2816      	cmp	r0, #22
    ac7c:	d001      	beq.n	ac82 <PHY_GetAttribute+0xe>
			Status = ERR_INVALID_REQ;
    ac7e:	2003      	movs	r0, #3
}
    ac80:	bd10      	pop	{r4, pc}
			Status = RADIO_GetAttr(RadioAttr,AttrVal);
    ac82:	4b01      	ldr	r3, [pc, #4]	; (ac88 <PHY_GetAttribute+0x14>)
    ac84:	4798      	blx	r3
			break;
    ac86:	e7fb      	b.n	ac80 <PHY_GetAttribute+0xc>
    ac88:	0000e48d 	.word	0x0000e48d

0000ac8c <PHY_Wakeup>:
{
    ac8c:	b510      	push	{r4, lr}
	if (PHY_STATE_SLEEP == phyState)
    ac8e:	4b0c      	ldr	r3, [pc, #48]	; (acc0 <PHY_Wakeup+0x34>)
    ac90:	781b      	ldrb	r3, [r3, #0]
    ac92:	2b02      	cmp	r3, #2
    ac94:	d000      	beq.n	ac98 <PHY_Wakeup+0xc>
}
    ac96:	bd10      	pop	{r4, pc}
		HAL_TCXOPowerOn();
    ac98:	4b0a      	ldr	r3, [pc, #40]	; (acc4 <PHY_Wakeup+0x38>)
    ac9a:	4798      	blx	r3
		HAL_RadioInit();
    ac9c:	4b0a      	ldr	r3, [pc, #40]	; (acc8 <PHY_Wakeup+0x3c>)
    ac9e:	4798      	blx	r3
		RADIO_Reset();
    aca0:	4b0a      	ldr	r3, [pc, #40]	; (accc <PHY_Wakeup+0x40>)
    aca2:	4798      	blx	r3
		Radio_WriteMode(MODE_STANDBY, radioConfiguration.modulation, 0);
    aca4:	2334      	movs	r3, #52	; 0x34
    aca6:	4a0a      	ldr	r2, [pc, #40]	; (acd0 <PHY_Wakeup+0x44>)
    aca8:	5cd1      	ldrb	r1, [r2, r3]
    acaa:	2200      	movs	r2, #0
    acac:	2001      	movs	r0, #1
    acae:	4b09      	ldr	r3, [pc, #36]	; (acd4 <PHY_Wakeup+0x48>)
    acb0:	4798      	blx	r3
	RADIO_RxHandler();
    acb2:	4b09      	ldr	r3, [pc, #36]	; (acd8 <PHY_Wakeup+0x4c>)
    acb4:	4798      	blx	r3
	 	phyState = PHY_STATE_IDLE;
    acb6:	2201      	movs	r2, #1
    acb8:	4b01      	ldr	r3, [pc, #4]	; (acc0 <PHY_Wakeup+0x34>)
    acba:	701a      	strb	r2, [r3, #0]
}
    acbc:	e7eb      	b.n	ac96 <PHY_Wakeup+0xa>
    acbe:	46c0      	nop			; (mov r8, r8)
    acc0:	20000491 	.word	0x20000491
    acc4:	0000cb11 	.word	0x0000cb11
    acc8:	0000c7d1 	.word	0x0000c7d1
    accc:	0000c989 	.word	0x0000c989
    acd0:	20002f50 	.word	0x20002f50
    acd4:	0000dbf1 	.word	0x0000dbf1
    acd8:	0000f47d 	.word	0x0000f47d

0000acdc <PHY_SetChannel>:
{
    acdc:	b510      	push	{r4, lr}
	phyChannel = channel;
    acde:	4b06      	ldr	r3, [pc, #24]	; (acf8 <PHY_SetChannel+0x1c>)
    ace0:	7018      	strb	r0, [r3, #0]
	if (PHY_STATE_SLEEP == phyState)
    ace2:	4b06      	ldr	r3, [pc, #24]	; (acfc <PHY_SetChannel+0x20>)
    ace4:	781b      	ldrb	r3, [r3, #0]
    ace6:	2b02      	cmp	r3, #2
    ace8:	d002      	beq.n	acf0 <PHY_SetChannel+0x14>
	phySetChannel();
    acea:	4b05      	ldr	r3, [pc, #20]	; (ad00 <PHY_SetChannel+0x24>)
    acec:	4798      	blx	r3
}
    acee:	bd10      	pop	{r4, pc}
		PHY_Wakeup();
    acf0:	4b04      	ldr	r3, [pc, #16]	; (ad04 <PHY_SetChannel+0x28>)
    acf2:	4798      	blx	r3
    acf4:	e7f9      	b.n	acea <PHY_SetChannel+0xe>
    acf6:	46c0      	nop			; (mov r8, r8)
    acf8:	20000490 	.word	0x20000490
    acfc:	20000491 	.word	0x20000491
    ad00:	0000a9a1 	.word	0x0000a9a1
    ad04:	0000ac8d 	.word	0x0000ac8d

0000ad08 <PHY_DataReq>:
{
    ad08:	b500      	push	{lr}
    ad0a:	b085      	sub	sp, #20
		RadioTransmitParam.bufferLen = data[0];
    ad0c:	7803      	ldrb	r3, [r0, #0]
    ad0e:	aa02      	add	r2, sp, #8
    ad10:	7013      	strb	r3, [r2, #0]
		for (count = 0; count < data[0]; count++)
    ad12:	2b00      	cmp	r3, #0
    ad14:	d009      	beq.n	ad2a <PHY_DataReq+0x22>
    ad16:	2300      	movs	r3, #0
			DataRequestBuffer[count] = data[1+count];
    ad18:	4912      	ldr	r1, [pc, #72]	; (ad64 <PHY_DataReq+0x5c>)
    ad1a:	18c2      	adds	r2, r0, r3
    ad1c:	7852      	ldrb	r2, [r2, #1]
    ad1e:	54ca      	strb	r2, [r1, r3]
		for (count = 0; count < data[0]; count++)
    ad20:	3301      	adds	r3, #1
    ad22:	b2db      	uxtb	r3, r3
    ad24:	7802      	ldrb	r2, [r0, #0]
    ad26:	429a      	cmp	r2, r3
    ad28:	d8f7      	bhi.n	ad1a <PHY_DataReq+0x12>
		RadioTransmitParam.bufferPtr = (uint8_t *)&DataRequestBuffer;
    ad2a:	4b0e      	ldr	r3, [pc, #56]	; (ad64 <PHY_DataReq+0x5c>)
    ad2c:	9303      	str	r3, [sp, #12]
		RadioSetState(RADIO_STATE_IDLE);
    ad2e:	2001      	movs	r0, #1
    ad30:	4b0d      	ldr	r3, [pc, #52]	; (ad68 <PHY_DataReq+0x60>)
    ad32:	4798      	blx	r3
		phySetChannel();
    ad34:	4b0d      	ldr	r3, [pc, #52]	; (ad6c <PHY_DataReq+0x64>)
    ad36:	4798      	blx	r3
		localRadioLBTParams.lbtScanPeriod = 5 ;
    ad38:	2305      	movs	r3, #5
    ad3a:	466a      	mov	r2, sp
    ad3c:	8013      	strh	r3, [r2, #0]
		localRadioLBTParams.lbtThreshold = -90 ;
    ad3e:	3b5f      	subs	r3, #95	; 0x5f
    ad40:	8053      	strh	r3, [r2, #2]
		localRadioLBTParams.lbtNumOfSamples = 5;
    ad42:	2305      	movs	r3, #5
    ad44:	7113      	strb	r3, [r2, #4]
		localRadioLBTParams.lbtTransmitOn = 0;
    ad46:	2300      	movs	r3, #0
    ad48:	7153      	strb	r3, [r2, #5]
		status = RADIO_SetAttr(RADIO_LBT_PARAMS, &localRadioLBTParams);
    ad4a:	4669      	mov	r1, sp
    ad4c:	201d      	movs	r0, #29
    ad4e:	4b08      	ldr	r3, [pc, #32]	; (ad70 <PHY_DataReq+0x68>)
    ad50:	4798      	blx	r3
		status = RADIO_Transmit (&RadioTransmitParam);
    ad52:	a802      	add	r0, sp, #8
    ad54:	4b07      	ldr	r3, [pc, #28]	; (ad74 <PHY_DataReq+0x6c>)
    ad56:	4798      	blx	r3
		return (!status);							
    ad58:	4243      	negs	r3, r0
    ad5a:	4158      	adcs	r0, r3
    ad5c:	b2c0      	uxtb	r0, r0
}
    ad5e:	b005      	add	sp, #20
    ad60:	bd00      	pop	{pc}
    ad62:	46c0      	nop			; (mov r8, r8)
    ad64:	2000232c 	.word	0x2000232c
    ad68:	0000ee85 	.word	0x0000ee85
    ad6c:	0000a9a1 	.word	0x0000a9a1
    ad70:	0000e57d 	.word	0x0000e57d
    ad74:	0000eead 	.word	0x0000eead

0000ad78 <PHY_RandomReq>:
{
    ad78:	b510      	push	{r4, lr}
	rnd = RADIO_ReadRandom();
    ad7a:	4b03      	ldr	r3, [pc, #12]	; (ad88 <PHY_RandomReq+0x10>)
    ad7c:	4798      	blx	r3
    ad7e:	0004      	movs	r4, r0
	RADIO_RxHandler();
    ad80:	4b02      	ldr	r3, [pc, #8]	; (ad8c <PHY_RandomReq+0x14>)
    ad82:	4798      	blx	r3
}
    ad84:	0020      	movs	r0, r4
    ad86:	bd10      	pop	{r4, pc}
    ad88:	0000dd25 	.word	0x0000dd25
    ad8c:	0000f47d 	.word	0x0000f47d

0000ad90 <PHY_EncryptReq>:
{	
    ad90:	b510      	push	{r4, lr}
	AESEncode(text,key);
    ad92:	4b01      	ldr	r3, [pc, #4]	; (ad98 <PHY_EncryptReq+0x8>)
    ad94:	4798      	blx	r3
}
    ad96:	bd10      	pop	{r4, pc}
    ad98:	0000d19d 	.word	0x0000d19d

0000ad9c <PHY_SetIEEEAddr>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_SetIEEEAddr(uint8_t *ieee_addr)
{
    ad9c:	2300      	movs	r3, #0
	uint8_t *ptr_to_reg = ieee_addr;

	for (uint8_t i = 0; i < 8; i++)
	{
		DevIEEEaddr[i] = ptr_to_reg[i];
    ad9e:	4903      	ldr	r1, [pc, #12]	; (adac <PHY_SetIEEEAddr+0x10>)
    ada0:	5cc2      	ldrb	r2, [r0, r3]
    ada2:	54ca      	strb	r2, [r1, r3]
    ada4:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < 8; i++)
    ada6:	2b08      	cmp	r3, #8
    ada8:	d1fa      	bne.n	ada0 <PHY_SetIEEEAddr+0x4>
	}
}
    adaa:	4770      	bx	lr
    adac:	2000242c 	.word	0x2000242c

0000adb0 <PHY_TaskHandler>:
    if (PHY_STATE_SLEEP == phyState)
    {
        return;
    }
	// Handled in DIO interrupts 
}
    adb0:	4770      	bx	lr
    adb2:	Address 0x0000adb2 is out of bounds.


0000adb4 <CommandConfCallback>:

bool CheckForData(void);

/************************ FUNCTIONS ********************************/
void CommandConfCallback(uint8_t msgConfHandle, miwi_status_t status, uint8_t* msgPointer)
{
    adb4:	b510      	push	{r4, lr}
	#if defined (ENABLE_CONSOLE)
		//printf("\r\n  Command Conf : Handle %d & Status %02X  ",msgConfHandle , status );
	#endif
    MiMem_Free(msgPointer);
    adb6:	0010      	movs	r0, r2
    adb8:	4b01      	ldr	r3, [pc, #4]	; (adc0 <CommandConfCallback+0xc>)
    adba:	4798      	blx	r3
}
    adbc:	bd10      	pop	{r4, pc}
    adbe:	46c0      	nop			; (mov r8, r8)
    adc0:	0000c299 	.word	0x0000c299

0000adc4 <Total_Connections>:
{
    adc4:	2200      	movs	r2, #0
    uint8_t count=0 , i;
    adc6:	2000      	movs	r0, #0
        if (ConnectionTable[i].status.bits.isValid)
    adc8:	4907      	ldr	r1, [pc, #28]	; (ade8 <Total_Connections+0x24>)
    adca:	e002      	b.n	add2 <Total_Connections+0xe>
    adcc:	3201      	adds	r2, #1
    for (i=0;i<CONNECTION_SIZE;i++)
    adce:	2a05      	cmp	r2, #5
    add0:	d009      	beq.n	ade6 <Total_Connections+0x22>
        if (ConnectionTable[i].status.bits.isValid)
    add2:	0093      	lsls	r3, r2, #2
    add4:	189b      	adds	r3, r3, r2
    add6:	005b      	lsls	r3, r3, #1
    add8:	18cb      	adds	r3, r1, r3
    adda:	7a1b      	ldrb	r3, [r3, #8]
    addc:	09db      	lsrs	r3, r3, #7
    adde:	d0f5      	beq.n	adcc <Total_Connections+0x8>
            count++;
    ade0:	3001      	adds	r0, #1
    ade2:	b2c0      	uxtb	r0, r0
    ade4:	e7f2      	b.n	adcc <Total_Connections+0x8>
}
    ade6:	4770      	bx	lr
    ade8:	20002844 	.word	0x20002844

0000adec <IndirectPacket>:
							INPUT uint8_t* msgPtr,
							INPUT uint8_t msghandle,
							INPUT bool ackReq,
                            DataConf_callback_t ConfCallback)
    #endif                            
    { 
    adec:	b5f0      	push	{r4, r5, r6, r7, lr}
    adee:	46de      	mov	lr, fp
    adf0:	4657      	mov	r7, sl
    adf2:	464e      	mov	r6, r9
    adf4:	4645      	mov	r5, r8
    adf6:	b5e0      	push	{r5, r6, r7, lr}
    adf8:	b083      	sub	sp, #12
    adfa:	466c      	mov	r4, sp
    adfc:	8061      	strh	r1, [r4, #2]
    adfe:	ac0c      	add	r4, sp, #48	; 0x30
    ae00:	7827      	ldrb	r7, [r4, #0]
    ae02:	ac0d      	add	r4, sp, #52	; 0x34
    ae04:	7826      	ldrb	r6, [r4, #0]
    ae06:	ac0f      	add	r4, sp, #60	; 0x3c
    ae08:	7825      	ldrb	r5, [r4, #0]
    ae0a:	ac10      	add	r4, sp, #64	; 0x40
    ae0c:	7821      	ldrb	r1, [r4, #0]
    ae0e:	4688      	mov	r8, r1
        uint8_t i;
        
        #ifndef ENABLE_BROADCAST
            if( Broadcast )
    ae10:	2800      	cmp	r0, #0
    ae12:	d000      	beq.n	ae16 <IndirectPacket+0x2a>
    ae14:	e07e      	b.n	af14 <IndirectPacket+0x128>

        // loop through the available indirect message buffer and locate
        // the empty message slot
        for(i = 0; i < INDIRECT_MESSAGE_SIZE; i++)
        {
            if( indirectMessages[i].flags.bits.isValid == 0 )
    ae16:	4c40      	ldr	r4, [pc, #256]	; (af18 <IndirectPacket+0x12c>)
    ae18:	7ba4      	ldrb	r4, [r4, #14]
    ae1a:	07e1      	lsls	r1, r4, #31
    ae1c:	d400      	bmi.n	ae20 <IndirectPacket+0x34>
    ae1e:	e077      	b.n	af10 <IndirectPacket+0x124>
    ae20:	2491      	movs	r4, #145	; 0x91
    ae22:	0064      	lsls	r4, r4, #1
    ae24:	493c      	ldr	r1, [pc, #240]	; (af18 <IndirectPacket+0x12c>)
    ae26:	5d0c      	ldrb	r4, [r1, r4]
    ae28:	07e1      	lsls	r1, r4, #31
    ae2a:	d506      	bpl.n	ae3a <IndirectPacket+0x4e>
				indirectMessages[i].TickStart.Val = MiWi_TickGet();
                return true;
            }
        }
        return false;
    }
    ae2c:	b003      	add	sp, #12
    ae2e:	bc3c      	pop	{r2, r3, r4, r5}
    ae30:	4690      	mov	r8, r2
    ae32:	4699      	mov	r9, r3
    ae34:	46a2      	mov	sl, r4
    ae36:	46ab      	mov	fp, r5
    ae38:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( indirectMessages[i].flags.bits.isValid == 0 )
    ae3a:	2401      	movs	r4, #1
                indirectMessages[i].flags.bits.isValid          = true;
    ae3c:	208a      	movs	r0, #138	; 0x8a
    ae3e:	0040      	lsls	r0, r0, #1
    ae40:	4360      	muls	r0, r4
    ae42:	4935      	ldr	r1, [pc, #212]	; (af18 <IndirectPacket+0x12c>)
    ae44:	468c      	mov	ip, r1
    ae46:	4484      	add	ip, r0
    ae48:	2108      	movs	r1, #8
    ae4a:	4461      	add	r1, ip
    ae4c:	4689      	mov	r9, r1
    ae4e:	7989      	ldrb	r1, [r1, #6]
    ae50:	2001      	movs	r0, #1
    ae52:	4301      	orrs	r1, r0
    ae54:	468a      	mov	sl, r1
                indirectMessages[i].flags.bits.isCommand        = isCommand;
    ae56:	2001      	movs	r0, #1
    ae58:	4003      	ands	r3, r0
    ae5a:	0099      	lsls	r1, r3, #2
    ae5c:	9101      	str	r1, [sp, #4]
    ae5e:	21fd      	movs	r1, #253	; 0xfd
    ae60:	468b      	mov	fp, r1
    ae62:	4651      	mov	r1, sl
    ae64:	465b      	mov	r3, fp
    ae66:	4019      	ands	r1, r3
    ae68:	3bf9      	subs	r3, #249	; 0xf9
    ae6a:	4399      	bics	r1, r3
                indirectMessages[i].flags.bits.isSecured        = SecurityEnabled;
    ae6c:	4007      	ands	r7, r0
    ae6e:	00ff      	lsls	r7, r7, #3
    ae70:	000b      	movs	r3, r1
    ae72:	9901      	ldr	r1, [sp, #4]
    ae74:	4319      	orrs	r1, r3
    ae76:	000b      	movs	r3, r1
    ae78:	2108      	movs	r1, #8
    ae7a:	438b      	bics	r3, r1
				indirectMessages[i].flags.bits.ackReq           = ackReq;
    ae7c:	4641      	mov	r1, r8
    ae7e:	4008      	ands	r0, r1
    ae80:	0101      	lsls	r1, r0, #4
    ae82:	433b      	orrs	r3, r7
    ae84:	0018      	movs	r0, r3
    ae86:	2310      	movs	r3, #16
    ae88:	4398      	bics	r0, r3
    ae8a:	4308      	orrs	r0, r1
    ae8c:	464b      	mov	r3, r9
    ae8e:	7198      	strb	r0, [r3, #6]
                    indirectMessages[i].DestPANID.Val           = DestinationPANID.Val;
    ae90:	4663      	mov	r3, ip
    ae92:	4669      	mov	r1, sp
    ae94:	8849      	ldrh	r1, [r1, #2]
    ae96:	8099      	strh	r1, [r3, #4]
                if( DestinationAddress != NULL )
    ae98:	2a00      	cmp	r2, #0
    ae9a:	d00d      	beq.n	aeb8 <IndirectPacket+0xcc>
    ae9c:	0013      	movs	r3, r2
    ae9e:	218a      	movs	r1, #138	; 0x8a
    aea0:	0049      	lsls	r1, r1, #1
    aea2:	4361      	muls	r1, r4
    aea4:	3106      	adds	r1, #6
    aea6:	481c      	ldr	r0, [pc, #112]	; (af18 <IndirectPacket+0x12c>)
    aea8:	1809      	adds	r1, r1, r0
    aeaa:	3208      	adds	r2, #8
                        indirectMessages[i].DestAddress.DestLongAddress[j] = DestinationAddress[j];
    aeac:	7818      	ldrb	r0, [r3, #0]
    aeae:	7008      	strb	r0, [r1, #0]
    aeb0:	3301      	adds	r3, #1
    aeb2:	3101      	adds	r1, #1
                    for(j = 0; j < MY_ADDRESS_LENGTH; j++)
    aeb4:	4293      	cmp	r3, r2
    aeb6:	d1f9      	bne.n	aeac <IndirectPacket+0xc0>
                indirectMessages[i].PayLoadSize = msgLen;
    aeb8:	228a      	movs	r2, #138	; 0x8a
    aeba:	0052      	lsls	r2, r2, #1
    aebc:	4362      	muls	r2, r4
    aebe:	4b16      	ldr	r3, [pc, #88]	; (af18 <IndirectPacket+0x12c>)
    aec0:	189b      	adds	r3, r3, r2
    aec2:	73de      	strb	r6, [r3, #15]
                for(j = 0; j < msgLen; j++)
    aec4:	2e00      	cmp	r6, #0
    aec6:	d011      	beq.n	aeec <IndirectPacket+0x100>
    aec8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    aeca:	228a      	movs	r2, #138	; 0x8a
    aecc:	0052      	lsls	r2, r2, #1
    aece:	4362      	muls	r2, r4
    aed0:	3210      	adds	r2, #16
    aed2:	4911      	ldr	r1, [pc, #68]	; (af18 <IndirectPacket+0x12c>)
    aed4:	1852      	adds	r2, r2, r1
    aed6:	3e01      	subs	r6, #1
    aed8:	b2f0      	uxtb	r0, r6
    aeda:	3001      	adds	r0, #1
    aedc:	469c      	mov	ip, r3
    aede:	4460      	add	r0, ip
                    indirectMessages[i].PayLoad[j] = msgPtr[j];
    aee0:	7819      	ldrb	r1, [r3, #0]
    aee2:	7011      	strb	r1, [r2, #0]
    aee4:	3301      	adds	r3, #1
    aee6:	3201      	adds	r2, #1
                for(j = 0; j < msgLen; j++)
    aee8:	4283      	cmp	r3, r0
    aeea:	d1f9      	bne.n	aee0 <IndirectPacket+0xf4>
                indirectMessages[i].indirectDataHandle = msghandle;
    aeec:	4e0a      	ldr	r6, [pc, #40]	; (af18 <IndirectPacket+0x12c>)
    aeee:	238a      	movs	r3, #138	; 0x8a
    aef0:	005b      	lsls	r3, r3, #1
    aef2:	435c      	muls	r4, r3
    aef4:	1933      	adds	r3, r6, r4
    aef6:	001a      	movs	r2, r3
    aef8:	3210      	adds	r2, #16
    aefa:	32ff      	adds	r2, #255	; 0xff
    aefc:	7015      	strb	r5, [r2, #0]
				indirectMessages[i].indirectConfCallback = ConfCallback;
    aefe:	3311      	adds	r3, #17
    af00:	33ff      	adds	r3, #255	; 0xff
    af02:	9a11      	ldr	r2, [sp, #68]	; 0x44
    af04:	601a      	str	r2, [r3, #0]
				indirectMessages[i].TickStart.Val = MiWi_TickGet();
    af06:	4b05      	ldr	r3, [pc, #20]	; (af1c <IndirectPacket+0x130>)
    af08:	4798      	blx	r3
    af0a:	51a0      	str	r0, [r4, r6]
                return true;
    af0c:	2001      	movs	r0, #1
    af0e:	e78d      	b.n	ae2c <IndirectPacket+0x40>
            if( indirectMessages[i].flags.bits.isValid == 0 )
    af10:	2400      	movs	r4, #0
    af12:	e793      	b.n	ae3c <IndirectPacket+0x50>
                return false;
    af14:	2000      	movs	r0, #0
    af16:	e789      	b.n	ae2c <IndirectPacket+0x40>
    af18:	200028bc 	.word	0x200028bc
    af1c:	0000c41d 	.word	0x0000c41d

0000af20 <SendPacket>:
                    INPUT uint8_t* msgPtr,
                    INPUT uint8_t msghandle,
					INPUT bool ackReq,
                    INPUT DataConf_callback_t ConfCallback)
#endif                                        
{ 
    af20:	b5f0      	push	{r4, r5, r6, r7, lr}
    af22:	46ce      	mov	lr, r9
    af24:	4647      	mov	r7, r8
    af26:	b580      	push	{r7, lr}
    af28:	b08b      	sub	sp, #44	; 0x2c
    af2a:	0005      	movs	r5, r0
    af2c:	468c      	mov	ip, r1
    af2e:	9205      	str	r2, [sp, #20]
    af30:	a812      	add	r0, sp, #72	; 0x48
    af32:	7800      	ldrb	r0, [r0, #0]
    af34:	ac13      	add	r4, sp, #76	; 0x4c
    af36:	7826      	ldrb	r6, [r4, #0]
    af38:	ac15      	add	r4, sp, #84	; 0x54
    af3a:	7827      	ldrb	r7, [r4, #0]
    af3c:	ac16      	add	r4, sp, #88	; 0x58
    af3e:	7822      	ldrb	r2, [r4, #0]
    MAC_TRANS_PARAM tParam;
    bool status;

    tParam.flags.Val = 0;
    af40:	2400      	movs	r4, #0
    af42:	46a0      	mov	r8, r4
    af44:	ac07      	add	r4, sp, #28
    af46:	4641      	mov	r1, r8
    af48:	7021      	strb	r1, [r4, #0]
    //tParam.flags.bits.packetType = (isCommand) ? PACKET_TYPE_COMMAND : PACKET_TYPE_DATA;
	if(isCommand)
    af4a:	2b00      	cmp	r3, #0
    af4c:	d043      	beq.n	afd6 <SendPacket+0xb6>
		tParam.flags.bits.packetType = PACKET_TYPE_COMMAND;
    af4e:	0023      	movs	r3, r4
    af50:	b2cc      	uxtb	r4, r1
    af52:	2103      	movs	r1, #3
    af54:	438c      	bics	r4, r1
    af56:	2101      	movs	r1, #1
    af58:	4688      	mov	r8, r1
    af5a:	4641      	mov	r1, r8
    af5c:	430c      	orrs	r4, r1
    af5e:	701c      	strb	r4, [r3, #0]
	else
		tParam.flags.bits.packetType = PACKET_TYPE_DATA;
   // tParam.flags.bits.ackReq = (Broadcast) ? 0 : ackReq;
   if(Broadcast)
    af60:	2d00      	cmp	r5, #0
    af62:	d13e      	bne.n	afe2 <SendPacket+0xc2>
   {
	tParam.flags.bits.ackReq = 0;
   }
   else
   {
	   tParam.flags.bits.ackReq = ackReq;
    af64:	ac07      	add	r4, sp, #28
    af66:	2301      	movs	r3, #1
    af68:	4013      	ands	r3, r2
    af6a:	015a      	lsls	r2, r3, #5
    af6c:	7823      	ldrb	r3, [r4, #0]
    af6e:	2120      	movs	r1, #32
    af70:	438b      	bics	r3, r1
    af72:	4313      	orrs	r3, r2
    af74:	7023      	strb	r3, [r4, #0]
   }
    tParam.flags.bits.broadcast = Broadcast;
    af76:	ac07      	add	r4, sp, #28
    af78:	2201      	movs	r2, #1
    af7a:	0013      	movs	r3, r2
    af7c:	402b      	ands	r3, r5
    af7e:	009b      	lsls	r3, r3, #2
    af80:	4698      	mov	r8, r3
    af82:	7823      	ldrb	r3, [r4, #0]
    af84:	2104      	movs	r1, #4
    af86:	438b      	bics	r3, r1
    tParam.flags.bits.secEn = SecurityEnabled;
    af88:	4010      	ands	r0, r2
    af8a:	00c0      	lsls	r0, r0, #3
    af8c:	4641      	mov	r1, r8
    af8e:	430b      	orrs	r3, r1
    af90:	2108      	movs	r1, #8
    af92:	438b      	bics	r3, r1
    #if defined(IEEE_802_15_4)
        tParam.altSrcAddr = 0;
    af94:	2100      	movs	r1, #0
    af96:	7261      	strb	r1, [r4, #9]
        tParam.altDestAddr = (Broadcast) ? true : false;
    af98:	7225      	strb	r5, [r4, #8]
    #endif
    
    #if defined(INFER_DEST_ADDRESS)
        tParam.flags.bits.destPrsnt = 0;
    #else
        tParam.flags.bits.destPrsnt = (Broadcast) ? 0:1;
    af9a:	2101      	movs	r1, #1
    af9c:	4688      	mov	r8, r1
    af9e:	4641      	mov	r1, r8
    afa0:	404d      	eors	r5, r1
    afa2:	4015      	ands	r5, r2
    afa4:	01ad      	lsls	r5, r5, #6
    afa6:	4318      	orrs	r0, r3
    afa8:	2340      	movs	r3, #64	; 0x40
    afaa:	4398      	bics	r0, r3
        else
        {
            tParam.flags.bits.sourcePrsnt = 0;
        }
    #else
        tParam.flags.bits.sourcePrsnt = 1;
    afac:	4328      	orrs	r0, r5
    afae:	3bc0      	subs	r3, #192	; 0xc0
    afb0:	4318      	orrs	r0, r3
    afb2:	7020      	strb	r0, [r4, #0]
    #endif
    
    tParam.DestAddress = DestinationAddress;

    #if defined(IEEE_802_15_4)
        tParam.DestPANID.Val = DestinationPANID.Val;
    afb4:	4663      	mov	r3, ip
    afb6:	8163      	strh	r3, [r4, #10]
    #endif

    status = MiMAC_SendPacket(tParam, msgPtr, msgLen, msghandle, ConfCallback);
    afb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    afba:	9302      	str	r3, [sp, #8]
    afbc:	9701      	str	r7, [sp, #4]
    afbe:	9600      	str	r6, [sp, #0]
    afc0:	9b14      	ldr	r3, [sp, #80]	; 0x50
    afc2:	9807      	ldr	r0, [sp, #28]
    afc4:	9905      	ldr	r1, [sp, #20]
    afc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    afc8:	4c09      	ldr	r4, [pc, #36]	; (aff0 <SendPacket+0xd0>)
    afca:	47a0      	blx	r4
    
    return status;
}
    afcc:	b00b      	add	sp, #44	; 0x2c
    afce:	bc0c      	pop	{r2, r3}
    afd0:	4690      	mov	r8, r2
    afd2:	4699      	mov	r9, r3
    afd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tParam.flags.bits.packetType = PACKET_TYPE_DATA;
    afd6:	ab07      	add	r3, sp, #28
    afd8:	781c      	ldrb	r4, [r3, #0]
    afda:	2103      	movs	r1, #3
    afdc:	438c      	bics	r4, r1
    afde:	701c      	strb	r4, [r3, #0]
    afe0:	e7be      	b.n	af60 <SendPacket+0x40>
	tParam.flags.bits.ackReq = 0;
    afe2:	ac07      	add	r4, sp, #28
    afe4:	7823      	ldrb	r3, [r4, #0]
    afe6:	2220      	movs	r2, #32
    afe8:	4393      	bics	r3, r2
    afea:	7023      	strb	r3, [r4, #0]
    afec:	e7c3      	b.n	af76 <SendPacket+0x56>
    afee:	46c0      	nop			; (mov r8, r8)
    aff0:	00009e39 	.word	0x00009e39

0000aff4 <isSameAddress>:
 *
 * Side Effects:    
 *
 ********************************************************************/
bool    isSameAddress(INPUT uint8_t *Address1, INPUT uint8_t *Address2)
{
    aff4:	b510      	push	{r4, lr}
    uint8_t i;
    
    for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    {
        if( Address1[i] != Address2[i] )
    aff6:	7802      	ldrb	r2, [r0, #0]
    aff8:	780b      	ldrb	r3, [r1, #0]
    affa:	429a      	cmp	r2, r3
    affc:	d109      	bne.n	b012 <isSameAddress+0x1e>
    affe:	2301      	movs	r3, #1
    b000:	5cc4      	ldrb	r4, [r0, r3]
    b002:	5cca      	ldrb	r2, [r1, r3]
    b004:	4294      	cmp	r4, r2
    b006:	d106      	bne.n	b016 <isSameAddress+0x22>
    b008:	3301      	adds	r3, #1
    for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    b00a:	2b08      	cmp	r3, #8
    b00c:	d1f8      	bne.n	b000 <isSameAddress+0xc>
        {
            return false;
        }
    }
    return true;
    b00e:	2001      	movs	r0, #1
}
    b010:	bd10      	pop	{r4, pc}
            return false;
    b012:	2000      	movs	r0, #0
    b014:	e7fc      	b.n	b010 <isSameAddress+0x1c>
    b016:	2000      	movs	r0, #0
    b018:	e7fa      	b.n	b010 <isSameAddress+0x1c>
    b01a:	Address 0x0000b01a is out of bounds.


0000b01c <MiApp_SendData>:
   {
    b01c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b01e:	46de      	mov	lr, fp
    b020:	4657      	mov	r7, sl
    b022:	464e      	mov	r6, r9
    b024:	b5c0      	push	{r6, r7, lr}
    b026:	b088      	sub	sp, #32
    b028:	9107      	str	r1, [sp, #28]
    b02a:	0017      	movs	r7, r2
    b02c:	4699      	mov	r9, r3
    b02e:	ab10      	add	r3, sp, #64	; 0x40
    b030:	781b      	ldrb	r3, [r3, #0]
    b032:	469a      	mov	sl, r3
    b034:	ab11      	add	r3, sp, #68	; 0x44
    b036:	781b      	ldrb	r3, [r3, #0]
    b038:	469b      	mov	fp, r3
		if(addr_len == 2 && (DestinationAddress16 == 0xFFFF))
    b03a:	2802      	cmp	r0, #2
    b03c:	d003      	beq.n	b046 <MiApp_SendData+0x2a>
    b03e:	4d3e      	ldr	r5, [pc, #248]	; (b138 <MiApp_SendData+0x11c>)
    b040:	2400      	movs	r4, #0
            if( ConnectionTable[i].status.bits.isValid && (ConnectionTable[i].status.bits.RXOnWhenIdle == 0) &&
    b042:	002e      	movs	r6, r5
    b044:	e036      	b.n	b0b4 <MiApp_SendData+0x98>
		uint16_t DestinationAddress16 = ((addr[1] << 8) + addr[0]);	
    b046:	784a      	ldrb	r2, [r1, #1]
    b048:	0212      	lsls	r2, r2, #8
    b04a:	780b      	ldrb	r3, [r1, #0]
    b04c:	189b      	adds	r3, r3, r2
		if(addr_len == 2 && (DestinationAddress16 == 0xFFFF))
    b04e:	b29b      	uxth	r3, r3
    b050:	4a3a      	ldr	r2, [pc, #232]	; (b13c <MiApp_SendData+0x120>)
    b052:	4293      	cmp	r3, r2
    b054:	d1f3      	bne.n	b03e <MiApp_SendData+0x22>
    b056:	2100      	movs	r1, #0
				    if( ConnectionTable[i].status.bits.isValid && ConnectionTable[i].status.bits.RXOnWhenIdle == 0 )
    b058:	4837      	ldr	r0, [pc, #220]	; (b138 <MiApp_SendData+0x11c>)
    b05a:	0002      	movs	r2, r0
    b05c:	e002      	b.n	b064 <MiApp_SendData+0x48>
    b05e:	3101      	adds	r1, #1
			    for(i = 0; i < CONNECTION_SIZE; i++)
    b060:	2905      	cmp	r1, #5
    b062:	d021      	beq.n	b0a8 <MiApp_SendData+0x8c>
				    if( ConnectionTable[i].status.bits.isValid && ConnectionTable[i].status.bits.RXOnWhenIdle == 0 )
    b064:	008b      	lsls	r3, r1, #2
    b066:	185b      	adds	r3, r3, r1
    b068:	005b      	lsls	r3, r3, #1
    b06a:	18c3      	adds	r3, r0, r3
    b06c:	7a1b      	ldrb	r3, [r3, #8]
    b06e:	09db      	lsrs	r3, r3, #7
    b070:	d0f5      	beq.n	b05e <MiApp_SendData+0x42>
    b072:	008b      	lsls	r3, r1, #2
    b074:	185b      	adds	r3, r3, r1
    b076:	005b      	lsls	r3, r3, #1
    b078:	18d3      	adds	r3, r2, r3
    b07a:	7a1b      	ldrb	r3, [r3, #8]
    b07c:	07db      	lsls	r3, r3, #31
    b07e:	d4ee      	bmi.n	b05e <MiApp_SendData+0x42>
					    IndirectPacket(true, myPANID, NULL, false, true, msglen, msgpointer, msghandle, ackReq, ConfCallback);
    b080:	4b2f      	ldr	r3, [pc, #188]	; (b140 <MiApp_SendData+0x124>)
    b082:	8819      	ldrh	r1, [r3, #0]
    b084:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b086:	9305      	str	r3, [sp, #20]
    b088:	465b      	mov	r3, fp
    b08a:	9304      	str	r3, [sp, #16]
    b08c:	4653      	mov	r3, sl
    b08e:	9303      	str	r3, [sp, #12]
    b090:	464b      	mov	r3, r9
    b092:	9302      	str	r3, [sp, #8]
    b094:	9701      	str	r7, [sp, #4]
    b096:	2301      	movs	r3, #1
    b098:	9300      	str	r3, [sp, #0]
    b09a:	2300      	movs	r3, #0
    b09c:	2200      	movs	r2, #0
    b09e:	2001      	movs	r0, #1
    b0a0:	4c28      	ldr	r4, [pc, #160]	; (b144 <MiApp_SendData+0x128>)
    b0a2:	47a0      	blx	r4
			broadcast = true;
    b0a4:	2001      	movs	r0, #1
					    break;
    b0a6:	e02f      	b.n	b108 <MiApp_SendData+0xec>
			broadcast = true;
    b0a8:	2001      	movs	r0, #1
    b0aa:	e02d      	b.n	b108 <MiApp_SendData+0xec>
    b0ac:	3401      	adds	r4, #1
    b0ae:	350a      	adds	r5, #10
        for(i = 0; i < CONNECTION_SIZE; i++)
    b0b0:	2c05      	cmp	r4, #5
    b0b2:	d028      	beq.n	b106 <MiApp_SendData+0xea>
            if( ConnectionTable[i].status.bits.isValid && (ConnectionTable[i].status.bits.RXOnWhenIdle == 0) &&
    b0b4:	00a3      	lsls	r3, r4, #2
    b0b6:	191b      	adds	r3, r3, r4
    b0b8:	005b      	lsls	r3, r3, #1
    b0ba:	18f3      	adds	r3, r6, r3
    b0bc:	7a1b      	ldrb	r3, [r3, #8]
    b0be:	09db      	lsrs	r3, r3, #7
    b0c0:	d0f4      	beq.n	b0ac <MiApp_SendData+0x90>
    b0c2:	00a3      	lsls	r3, r4, #2
    b0c4:	191b      	adds	r3, r3, r4
    b0c6:	005b      	lsls	r3, r3, #1
    b0c8:	4a1b      	ldr	r2, [pc, #108]	; (b138 <MiApp_SendData+0x11c>)
    b0ca:	4694      	mov	ip, r2
    b0cc:	4463      	add	r3, ip
    b0ce:	7a1b      	ldrb	r3, [r3, #8]
    b0d0:	07db      	lsls	r3, r3, #31
    b0d2:	d4eb      	bmi.n	b0ac <MiApp_SendData+0x90>
                isSameAddress(addr, ConnectionTable[i].Address) )
    b0d4:	0029      	movs	r1, r5
    b0d6:	9807      	ldr	r0, [sp, #28]
    b0d8:	4b1b      	ldr	r3, [pc, #108]	; (b148 <MiApp_SendData+0x12c>)
    b0da:	4798      	blx	r3
            if( ConnectionTable[i].status.bits.isValid && (ConnectionTable[i].status.bits.RXOnWhenIdle == 0) &&
    b0dc:	2800      	cmp	r0, #0
    b0de:	d0e5      	beq.n	b0ac <MiApp_SendData+0x90>
                    return IndirectPacket(broadcast, myPANID, addr, false, true, msglen,
    b0e0:	4b17      	ldr	r3, [pc, #92]	; (b140 <MiApp_SendData+0x124>)
    b0e2:	8819      	ldrh	r1, [r3, #0]
    b0e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b0e6:	9305      	str	r3, [sp, #20]
    b0e8:	465b      	mov	r3, fp
    b0ea:	9304      	str	r3, [sp, #16]
    b0ec:	4653      	mov	r3, sl
    b0ee:	9303      	str	r3, [sp, #12]
    b0f0:	464b      	mov	r3, r9
    b0f2:	9302      	str	r3, [sp, #8]
    b0f4:	9701      	str	r7, [sp, #4]
    b0f6:	2301      	movs	r3, #1
    b0f8:	9300      	str	r3, [sp, #0]
    b0fa:	2300      	movs	r3, #0
    b0fc:	9a07      	ldr	r2, [sp, #28]
    b0fe:	2000      	movs	r0, #0
    b100:	4c10      	ldr	r4, [pc, #64]	; (b144 <MiApp_SendData+0x128>)
    b102:	47a0      	blx	r4
    b104:	e011      	b.n	b12a <MiApp_SendData+0x10e>
	    bool broadcast = false;
    b106:	2000      	movs	r0, #0
        return SendPacket(broadcast, myPANID, addr, false, true, msglen,
    b108:	4b0d      	ldr	r3, [pc, #52]	; (b140 <MiApp_SendData+0x124>)
    b10a:	8819      	ldrh	r1, [r3, #0]
    b10c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b10e:	9305      	str	r3, [sp, #20]
    b110:	465b      	mov	r3, fp
    b112:	9304      	str	r3, [sp, #16]
    b114:	4653      	mov	r3, sl
    b116:	9303      	str	r3, [sp, #12]
    b118:	464b      	mov	r3, r9
    b11a:	9302      	str	r3, [sp, #8]
    b11c:	9701      	str	r7, [sp, #4]
    b11e:	2301      	movs	r3, #1
    b120:	9300      	str	r3, [sp, #0]
    b122:	2300      	movs	r3, #0
    b124:	9a07      	ldr	r2, [sp, #28]
    b126:	4c09      	ldr	r4, [pc, #36]	; (b14c <MiApp_SendData+0x130>)
    b128:	47a0      	blx	r4
}
    b12a:	b008      	add	sp, #32
    b12c:	bc1c      	pop	{r2, r3, r4}
    b12e:	4691      	mov	r9, r2
    b130:	469a      	mov	sl, r3
    b132:	46a3      	mov	fp, r4
    b134:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b136:	46c0      	nop			; (mov r8, r8)
    b138:	20002844 	.word	0x20002844
    b13c:	0000ffff 	.word	0x0000ffff
    b140:	20002894 	.word	0x20002894
    b144:	0000aded 	.word	0x0000aded
    b148:	0000aff5 	.word	0x0000aff5
    b14c:	0000af21 	.word	0x0000af21

0000b150 <MiApp_Set>:


#endif

bool MiApp_Set(miwi_params_t id, uint8_t *value)
{
    b150:	b510      	push	{r4, lr}
    b152:	000c      	movs	r4, r1
    switch(id)
    b154:	2800      	cmp	r0, #0
    b156:	d001      	beq.n	b15c <MiApp_Set+0xc>
     break;

     default:
     break;
   }
    return false;
    b158:	2000      	movs	r0, #0
}
    b15a:	bd10      	pop	{r4, pc}
        if( MiMAC_Set(MAC_CHANNEL, value))
    b15c:	4b03      	ldr	r3, [pc, #12]	; (b16c <MiApp_Set+0x1c>)
    b15e:	4798      	blx	r3
    b160:	2800      	cmp	r0, #0
    b162:	d0fa      	beq.n	b15a <MiApp_Set+0xa>
          currentChannel = *value;
    b164:	7822      	ldrb	r2, [r4, #0]
    b166:	4b02      	ldr	r3, [pc, #8]	; (b170 <MiApp_Set+0x20>)
    b168:	701a      	strb	r2, [r3, #0]
          return true;
    b16a:	e7f6      	b.n	b15a <MiApp_Set+0xa>
    b16c:	00009d9d 	.word	0x00009d9d
    b170:	2000001d 	.word	0x2000001d

0000b174 <MiApp_ProtocolInit>:
{
    b174:	b500      	push	{lr}
    b176:	b085      	sub	sp, #20
    P2PStatus.Val = 0;
    b178:	2300      	movs	r3, #0
    b17a:	4a1d      	ldr	r2, [pc, #116]	; (b1f0 <MiApp_ProtocolInit+0x7c>)
    b17c:	7013      	strb	r3, [r2, #0]
            indirectMessages[i].flags.Val = 0;
    b17e:	4a1d      	ldr	r2, [pc, #116]	; (b1f4 <MiApp_ProtocolInit+0x80>)
    b180:	7393      	strb	r3, [r2, #14]
    b182:	2191      	movs	r1, #145	; 0x91
    b184:	0049      	lsls	r1, r1, #1
    b186:	5453      	strb	r3, [r2, r1]
            IncomingFrameCounter[i].Val = 0;
    b188:	4a1b      	ldr	r2, [pc, #108]	; (b1f8 <MiApp_ProtocolInit+0x84>)
    b18a:	6013      	str	r3, [r2, #0]
    b18c:	6053      	str	r3, [r2, #4]
    b18e:	6093      	str	r3, [r2, #8]
    b190:	60d3      	str	r3, [r2, #12]
    b192:	6113      	str	r3, [r2, #16]
            myPANID.Val = MY_PAN_ID; 
    b194:	4a19      	ldr	r2, [pc, #100]	; (b1fc <MiApp_ProtocolInit+0x88>)
    b196:	4b1a      	ldr	r3, [pc, #104]	; (b200 <MiApp_ProtocolInit+0x8c>)
    b198:	801a      	strh	r2, [r3, #0]
    initValue.PAddress = myLongAddress;
    b19a:	a902      	add	r1, sp, #8
    initValue.actionFlags.bits.CCAEnable = 1;
    b19c:	780b      	ldrb	r3, [r1, #0]
    b19e:	2202      	movs	r2, #2
    b1a0:	4313      	orrs	r3, r2
    initValue.actionFlags.bits.PAddrLength = MY_ADDRESS_LENGTH;
    b1a2:	2287      	movs	r2, #135	; 0x87
    b1a4:	4013      	ands	r3, r2
    b1a6:	2240      	movs	r2, #64	; 0x40
    b1a8:	4313      	orrs	r3, r2
    initValue.actionFlags.bits.RepeaterMode = 0;
    b1aa:	22c3      	movs	r2, #195	; 0xc3
    b1ac:	4013      	ands	r3, r2
    b1ae:	3ac2      	subs	r2, #194	; 0xc2
    b1b0:	4393      	bics	r3, r2
    b1b2:	700b      	strb	r3, [r1, #0]
    MiMAC_Init(initValue);
    b1b4:	9802      	ldr	r0, [sp, #8]
    b1b6:	4913      	ldr	r1, [pc, #76]	; (b204 <MiApp_ProtocolInit+0x90>)
    b1b8:	4b13      	ldr	r3, [pc, #76]	; (b208 <MiApp_ProtocolInit+0x94>)
    b1ba:	4798      	blx	r3
    if (currentChannel != 0xFF)
    b1bc:	4b13      	ldr	r3, [pc, #76]	; (b20c <MiApp_ProtocolInit+0x98>)
    b1be:	781b      	ldrb	r3, [r3, #0]
    b1c0:	2bff      	cmp	r3, #255	; 0xff
    b1c2:	d003      	beq.n	b1cc <MiApp_ProtocolInit+0x58>
	    MiApp_Set(CHANNEL, &currentChannel);
    b1c4:	4911      	ldr	r1, [pc, #68]	; (b20c <MiApp_ProtocolInit+0x98>)
    b1c6:	2000      	movs	r0, #0
    b1c8:	4b11      	ldr	r3, [pc, #68]	; (b210 <MiApp_ProtocolInit+0x9c>)
    b1ca:	4798      	blx	r3
            uint16_t tmp = 0xFFFF;
    b1cc:	466b      	mov	r3, sp
    b1ce:	1d98      	adds	r0, r3, #6
    b1d0:	2301      	movs	r3, #1
    b1d2:	425b      	negs	r3, r3
    b1d4:	8003      	strh	r3, [r0, #0]
            MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    b1d6:	490a      	ldr	r1, [pc, #40]	; (b200 <MiApp_ProtocolInit+0x8c>)
    b1d8:	4b0e      	ldr	r3, [pc, #56]	; (b214 <MiApp_ProtocolInit+0xa0>)
    b1da:	4798      	blx	r3
    P2PCapacityInfo |= (ConnMode << 4);
    b1dc:	4b0e      	ldr	r3, [pc, #56]	; (b218 <MiApp_ProtocolInit+0xa4>)
    b1de:	781b      	ldrb	r3, [r3, #0]
    b1e0:	011b      	lsls	r3, r3, #4
    b1e2:	2209      	movs	r2, #9
    b1e4:	4313      	orrs	r3, r2
    b1e6:	4a0d      	ldr	r2, [pc, #52]	; (b21c <MiApp_ProtocolInit+0xa8>)
    b1e8:	7013      	strb	r3, [r2, #0]
}
    b1ea:	2000      	movs	r0, #0
    b1ec:	b005      	add	sp, #20
    b1ee:	bd00      	pop	{pc}
    b1f0:	200028b8 	.word	0x200028b8
    b1f4:	200028bc 	.word	0x200028bc
    b1f8:	200028a0 	.word	0x200028a0
    b1fc:	00001234 	.word	0x00001234
    b200:	20002894 	.word	0x20002894
    b204:	20000020 	.word	0x20000020
    b208:	00009dc5 	.word	0x00009dc5
    b20c:	2000001d 	.word	0x2000001d
    b210:	0000b151 	.word	0x0000b151
    b214:	0000999d 	.word	0x0000999d
    b218:	2000001c 	.word	0x2000001c
    b21c:	20002891 	.word	0x20002891

0000b220 <MiApp_StartConnection>:
    {
    b220:	b530      	push	{r4, r5, lr}
    b222:	b083      	sub	sp, #12
    b224:	0014      	movs	r4, r2
    b226:	001d      	movs	r5, r3
        switch(Mode)
    b228:	2801      	cmp	r0, #1
    b22a:	d032      	beq.n	b292 <MiApp_StartConnection+0x72>
    b22c:	2800      	cmp	r0, #0
    b22e:	d005      	beq.n	b23c <MiApp_StartConnection+0x1c>
    b230:	2802      	cmp	r0, #2
    b232:	d032      	beq.n	b29a <MiApp_StartConnection+0x7a>
        ConfCallback(FAILURE);
    b234:	2001      	movs	r0, #1
    b236:	4798      	blx	r3
        return false;
    b238:	2000      	movs	r0, #0
    b23a:	e028      	b.n	b28e <MiApp_StartConnection+0x6e>
                uint8_t channel = 0;
    b23c:	2200      	movs	r2, #0
    b23e:	466b      	mov	r3, sp
    b240:	715a      	strb	r2, [r3, #5]
                        myPANID.Val = MY_PAN_ID;
    b242:	4918      	ldr	r1, [pc, #96]	; (b2a4 <MiApp_StartConnection+0x84>)
    b244:	4b18      	ldr	r3, [pc, #96]	; (b2a8 <MiApp_StartConnection+0x88>)
    b246:	800b      	strh	r3, [r1, #0]
                        uint16_t tmp = 0xFFFF;
    b248:	466b      	mov	r3, sp
    b24a:	1d98      	adds	r0, r3, #6
    b24c:	2301      	movs	r3, #1
    b24e:	425b      	negs	r3, r3
    b250:	8003      	strh	r3, [r0, #0]
                        MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    b252:	4b16      	ldr	r3, [pc, #88]	; (b2ac <MiApp_StartConnection+0x8c>)
    b254:	4798      	blx	r3
				while (!(index & ChannelMap))
    b256:	07e3      	lsls	r3, r4, #31
    b258:	d40a      	bmi.n	b270 <MiApp_StartConnection+0x50>
    b25a:	466b      	mov	r3, sp
    b25c:	3305      	adds	r3, #5
    b25e:	781b      	ldrb	r3, [r3, #0]
    b260:	2201      	movs	r2, #1
				index = index << 1;
    b262:	0052      	lsls	r2, r2, #1
				++channel;
    b264:	3301      	adds	r3, #1
    b266:	b2db      	uxtb	r3, r3
				while (!(index & ChannelMap))
    b268:	4222      	tst	r2, r4
    b26a:	d0fa      	beq.n	b262 <MiApp_StartConnection+0x42>
    b26c:	466a      	mov	r2, sp
    b26e:	7153      	strb	r3, [r2, #5]
				MiApp_Set(CHANNEL, &channel);
    b270:	466b      	mov	r3, sp
    b272:	1d59      	adds	r1, r3, #5
    b274:	2000      	movs	r0, #0
    b276:	4b0e      	ldr	r3, [pc, #56]	; (b2b0 <MiApp_StartConnection+0x90>)
    b278:	4798      	blx	r3
                tick1.Val = MiWi_TickGet();
    b27a:	4c0e      	ldr	r4, [pc, #56]	; (b2b4 <MiApp_StartConnection+0x94>)
    b27c:	47a0      	blx	r4
    b27e:	4b0e      	ldr	r3, [pc, #56]	; (b2b8 <MiApp_StartConnection+0x98>)
    b280:	6018      	str	r0, [r3, #0]
                tick4.Val = MiWi_TickGet();
    b282:	47a0      	blx	r4
    b284:	4b0d      	ldr	r3, [pc, #52]	; (b2bc <MiApp_StartConnection+0x9c>)
    b286:	6018      	str	r0, [r3, #0]
				ConfCallback(SUCCESS);
    b288:	2000      	movs	r0, #0
    b28a:	47a8      	blx	r5
                return true;
    b28c:	2001      	movs	r0, #1
    }
    b28e:	b003      	add	sp, #12
    b290:	bd30      	pop	{r4, r5, pc}
                    ConfCallback(FAILURE);
    b292:	2001      	movs	r0, #1
    b294:	4798      	blx	r3
                    return false;
    b296:	2000      	movs	r0, #0
    b298:	e7f9      	b.n	b28e <MiApp_StartConnection+0x6e>
                ConfCallback(FAILURE);
    b29a:	2001      	movs	r0, #1
    b29c:	4798      	blx	r3
                return false;
    b29e:	2000      	movs	r0, #0
    b2a0:	e7f5      	b.n	b28e <MiApp_StartConnection+0x6e>
    b2a2:	46c0      	nop			; (mov r8, r8)
    b2a4:	20002894 	.word	0x20002894
    b2a8:	00001234 	.word	0x00001234
    b2ac:	0000999d 	.word	0x0000999d
    b2b0:	0000b151 	.word	0x0000b151
    b2b4:	0000c41d 	.word	0x0000c41d
    b2b8:	20002ae4 	.word	0x20002ae4
    b2bc:	20002878 	.word	0x20002878

0000b2c0 <DumpConnection>:
     * Side Effects:    The content of the connection pointed by the index 
     *                  of the P2P Connection Entry will be printed out
     *
     ********************************************************************/
    void DumpConnection(INPUT uint8_t index)
    {
    b2c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b2c2:	46d6      	mov	lr, sl
    b2c4:	4647      	mov	r7, r8
    b2c6:	b580      	push	{r7, lr}
    b2c8:	b083      	sub	sp, #12
    b2ca:	0005      	movs	r5, r0
#if defined (ENABLE_CONSOLE)		
        uint8_t i, j;
        
        if( index > CONNECTION_SIZE )
    b2cc:	2805      	cmp	r0, #5
    b2ce:	d811      	bhi.n	b2f4 <DumpConnection+0x34>
            #endif
            printf("  Channel: ");
            printf("%d",currentChannel);
        }
            
        if( index < CONNECTION_SIZE )
    b2d0:	2d04      	cmp	r5, #4
    b2d2:	d85e      	bhi.n	b392 <DumpConnection+0xd2>
        {
            printf("\r\nConnection \tPeerLongAddress \tPeerInfo \tRxOnStatus1\r\n");  
    b2d4:	4851      	ldr	r0, [pc, #324]	; (b41c <DumpConnection+0x15c>)
    b2d6:	4b52      	ldr	r3, [pc, #328]	; (b420 <DumpConnection+0x160>)
    b2d8:	4798      	blx	r3
            if( ConnectionTable[index].status.bits.isValid )
    b2da:	00ab      	lsls	r3, r5, #2
    b2dc:	195b      	adds	r3, r3, r5
    b2de:	005b      	lsls	r3, r3, #1
    b2e0:	4a50      	ldr	r2, [pc, #320]	; (b424 <DumpConnection+0x164>)
    b2e2:	18d3      	adds	r3, r2, r3
    b2e4:	7a1b      	ldrb	r3, [r3, #8]
    b2e6:	09db      	lsrs	r3, r3, #7
    b2e8:	d123      	bne.n	b332 <DumpConnection+0x72>
					
                }  
            }
        }
#endif // #if defined (ENABLE_CONSOLE)		
    }
    b2ea:	b003      	add	sp, #12
    b2ec:	bc0c      	pop	{r2, r3}
    b2ee:	4690      	mov	r8, r2
    b2f0:	469a      	mov	sl, r3
    b2f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            printf("\r\n\r\nMy Address: 0x");
    b2f4:	484c      	ldr	r0, [pc, #304]	; (b428 <DumpConnection+0x168>)
    b2f6:	4b4d      	ldr	r3, [pc, #308]	; (b42c <DumpConnection+0x16c>)
    b2f8:	4798      	blx	r3
    b2fa:	4c4d      	ldr	r4, [pc, #308]	; (b430 <DumpConnection+0x170>)
    b2fc:	0026      	movs	r6, r4
    b2fe:	3e08      	subs	r6, #8
				printf("%02x",myLongAddress[MY_ADDRESS_LENGTH-1-i]);
    b300:	4f4a      	ldr	r7, [pc, #296]	; (b42c <DumpConnection+0x16c>)
    b302:	79e1      	ldrb	r1, [r4, #7]
    b304:	484b      	ldr	r0, [pc, #300]	; (b434 <DumpConnection+0x174>)
    b306:	47b8      	blx	r7
    b308:	3c01      	subs	r4, #1
            for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    b30a:	42b4      	cmp	r4, r6
    b30c:	d1f9      	bne.n	b302 <DumpConnection+0x42>
                printf("  PANID: 0x");
    b30e:	484a      	ldr	r0, [pc, #296]	; (b438 <DumpConnection+0x178>)
    b310:	4c46      	ldr	r4, [pc, #280]	; (b42c <DumpConnection+0x16c>)
    b312:	47a0      	blx	r4
                printf("%x",myPANID.v[1]);
    b314:	4f49      	ldr	r7, [pc, #292]	; (b43c <DumpConnection+0x17c>)
    b316:	7879      	ldrb	r1, [r7, #1]
    b318:	4e49      	ldr	r6, [pc, #292]	; (b440 <DumpConnection+0x180>)
    b31a:	0030      	movs	r0, r6
    b31c:	47a0      	blx	r4
                printf("%x",myPANID.v[0]);
    b31e:	7839      	ldrb	r1, [r7, #0]
    b320:	0030      	movs	r0, r6
    b322:	47a0      	blx	r4
            printf("  Channel: ");
    b324:	4847      	ldr	r0, [pc, #284]	; (b444 <DumpConnection+0x184>)
    b326:	47a0      	blx	r4
            printf("%d",currentChannel);
    b328:	4b47      	ldr	r3, [pc, #284]	; (b448 <DumpConnection+0x188>)
    b32a:	7819      	ldrb	r1, [r3, #0]
    b32c:	4847      	ldr	r0, [pc, #284]	; (b44c <DumpConnection+0x18c>)
    b32e:	47a0      	blx	r4
    b330:	e7ce      	b.n	b2d0 <DumpConnection+0x10>
                printf("%02x",index);
    b332:	0029      	movs	r1, r5
    b334:	483f      	ldr	r0, [pc, #252]	; (b434 <DumpConnection+0x174>)
    b336:	4c3d      	ldr	r4, [pc, #244]	; (b42c <DumpConnection+0x16c>)
    b338:	47a0      	blx	r4
                printf("\t\t\t");
    b33a:	4845      	ldr	r0, [pc, #276]	; (b450 <DumpConnection+0x190>)
    b33c:	47a0      	blx	r4
    b33e:	00ae      	lsls	r6, r5, #2
    b340:	1976      	adds	r6, r6, r5
    b342:	0076      	lsls	r6, r6, #1
    b344:	1df4      	adds	r4, r6, #7
    b346:	4b37      	ldr	r3, [pc, #220]	; (b424 <DumpConnection+0x164>)
    b348:	18e4      	adds	r4, r4, r3
    b34a:	3e01      	subs	r6, #1
    b34c:	18f6      	adds	r6, r6, r3
                        printf("%02x", ConnectionTable[index].Address[MY_ADDRESS_LENGTH-1-i] );
    b34e:	4f37      	ldr	r7, [pc, #220]	; (b42c <DumpConnection+0x16c>)
    b350:	7821      	ldrb	r1, [r4, #0]
    b352:	4838      	ldr	r0, [pc, #224]	; (b434 <DumpConnection+0x174>)
    b354:	47b8      	blx	r7
    b356:	3c01      	subs	r4, #1
                for(i = 0; i < 8; i++)
    b358:	42b4      	cmp	r4, r6
    b35a:	d1f9      	bne.n	b350 <DumpConnection+0x90>
                printf("/t");
    b35c:	483d      	ldr	r0, [pc, #244]	; (b454 <DumpConnection+0x194>)
    b35e:	4f33      	ldr	r7, [pc, #204]	; (b42c <DumpConnection+0x16c>)
    b360:	47b8      	blx	r7
                        printf("%02x", ConnectionTable[index].PeerInfo[i] );
    b362:	4e30      	ldr	r6, [pc, #192]	; (b424 <DumpConnection+0x164>)
    b364:	00ac      	lsls	r4, r5, #2
    b366:	1963      	adds	r3, r4, r5
    b368:	005b      	lsls	r3, r3, #1
    b36a:	18f3      	adds	r3, r6, r3
    b36c:	7a59      	ldrb	r1, [r3, #9]
    b36e:	4831      	ldr	r0, [pc, #196]	; (b434 <DumpConnection+0x174>)
    b370:	47b8      	blx	r7
				printf("\t");
    b372:	2009      	movs	r0, #9
    b374:	4b38      	ldr	r3, [pc, #224]	; (b458 <DumpConnection+0x198>)
    b376:	4698      	mov	r8, r3
    b378:	4798      	blx	r3
				printf("\t");
    b37a:	2009      	movs	r0, #9
    b37c:	47c0      	blx	r8
				printf("%d", ConnectionTable[index].status.Val );
    b37e:	1964      	adds	r4, r4, r5
    b380:	0064      	lsls	r4, r4, #1
    b382:	1934      	adds	r4, r6, r4
    b384:	7a21      	ldrb	r1, [r4, #8]
    b386:	4831      	ldr	r0, [pc, #196]	; (b44c <DumpConnection+0x18c>)
    b388:	47b8      	blx	r7
                printf("\r\n");
    b38a:	4834      	ldr	r0, [pc, #208]	; (b45c <DumpConnection+0x19c>)
    b38c:	4b24      	ldr	r3, [pc, #144]	; (b420 <DumpConnection+0x160>)
    b38e:	4798      	blx	r3
    b390:	e7ab      	b.n	b2ea <DumpConnection+0x2a>
            printf("\r\n\r\nConnection     PeerLongAddress     PeerInfo\tRxOnStatus\r\n");  
    b392:	4833      	ldr	r0, [pc, #204]	; (b460 <DumpConnection+0x1a0>)
    b394:	4b22      	ldr	r3, [pc, #136]	; (b420 <DumpConnection+0x160>)
    b396:	4798      	blx	r3
    b398:	4b32      	ldr	r3, [pc, #200]	; (b464 <DumpConnection+0x1a4>)
    b39a:	4698      	mov	r8, r3
    b39c:	2500      	movs	r5, #0
                if( ConnectionTable[i].status.bits.isValid )
    b39e:	4b21      	ldr	r3, [pc, #132]	; (b424 <DumpConnection+0x164>)
    b3a0:	469a      	mov	sl, r3
    b3a2:	e020      	b.n	b3e6 <DumpConnection+0x126>
                    printf("    ");
    b3a4:	4830      	ldr	r0, [pc, #192]	; (b468 <DumpConnection+0x1a8>)
    b3a6:	4e21      	ldr	r6, [pc, #132]	; (b42c <DumpConnection+0x16c>)
    b3a8:	47b0      	blx	r6
                            printf("%02x", ConnectionTable[i].PeerInfo[j] );
    b3aa:	4643      	mov	r3, r8
    b3ac:	7899      	ldrb	r1, [r3, #2]
    b3ae:	4821      	ldr	r0, [pc, #132]	; (b434 <DumpConnection+0x174>)
    b3b0:	47b0      	blx	r6
					printf("\t");
    b3b2:	2009      	movs	r0, #9
    b3b4:	4c28      	ldr	r4, [pc, #160]	; (b458 <DumpConnection+0x198>)
    b3b6:	47a0      	blx	r4
					printf("\t");
    b3b8:	2009      	movs	r0, #9
    b3ba:	47a0      	blx	r4
					printf("%02x", ConnectionTable[i].status.bits.RXOnWhenIdle );					
    b3bc:	9a01      	ldr	r2, [sp, #4]
    b3be:	0093      	lsls	r3, r2, #2
    b3c0:	189f      	adds	r7, r3, r2
    b3c2:	007f      	lsls	r7, r7, #1
    b3c4:	4b17      	ldr	r3, [pc, #92]	; (b424 <DumpConnection+0x164>)
    b3c6:	19df      	adds	r7, r3, r7
    b3c8:	7a39      	ldrb	r1, [r7, #8]
    b3ca:	07c9      	lsls	r1, r1, #31
    b3cc:	0fc9      	lsrs	r1, r1, #31
    b3ce:	4819      	ldr	r0, [pc, #100]	; (b434 <DumpConnection+0x174>)
    b3d0:	47b0      	blx	r6
                    printf("\r\n");
    b3d2:	4822      	ldr	r0, [pc, #136]	; (b45c <DumpConnection+0x19c>)
    b3d4:	4b12      	ldr	r3, [pc, #72]	; (b420 <DumpConnection+0x160>)
    b3d6:	4798      	blx	r3
    b3d8:	3501      	adds	r5, #1
    b3da:	230a      	movs	r3, #10
    b3dc:	469c      	mov	ip, r3
    b3de:	44e0      	add	r8, ip
            for(i = 0; i < CONNECTION_SIZE; i++)
    b3e0:	2d05      	cmp	r5, #5
    b3e2:	d100      	bne.n	b3e6 <DumpConnection+0x126>
    b3e4:	e781      	b.n	b2ea <DumpConnection+0x2a>
                if( ConnectionTable[i].status.bits.isValid )
    b3e6:	9501      	str	r5, [sp, #4]
    b3e8:	00ab      	lsls	r3, r5, #2
    b3ea:	195b      	adds	r3, r3, r5
    b3ec:	005b      	lsls	r3, r3, #1
    b3ee:	4453      	add	r3, sl
    b3f0:	7a1b      	ldrb	r3, [r3, #8]
    b3f2:	09db      	lsrs	r3, r3, #7
    b3f4:	d0f0      	beq.n	b3d8 <DumpConnection+0x118>
                    printf("%02x",i);
    b3f6:	0029      	movs	r1, r5
    b3f8:	480e      	ldr	r0, [pc, #56]	; (b434 <DumpConnection+0x174>)
    b3fa:	4b0c      	ldr	r3, [pc, #48]	; (b42c <DumpConnection+0x16c>)
    b3fc:	4798      	blx	r3
                    printf("             ");
    b3fe:	481b      	ldr	r0, [pc, #108]	; (b46c <DumpConnection+0x1ac>)
    b400:	4b0a      	ldr	r3, [pc, #40]	; (b42c <DumpConnection+0x16c>)
    b402:	4798      	blx	r3
    b404:	4647      	mov	r7, r8
    b406:	3f08      	subs	r7, #8
    b408:	4644      	mov	r4, r8
                            printf("%02x", ConnectionTable[i].Address[MY_ADDRESS_LENGTH-1-j] );
    b40a:	4e08      	ldr	r6, [pc, #32]	; (b42c <DumpConnection+0x16c>)
    b40c:	7821      	ldrb	r1, [r4, #0]
    b40e:	4809      	ldr	r0, [pc, #36]	; (b434 <DumpConnection+0x174>)
    b410:	47b0      	blx	r6
    b412:	3c01      	subs	r4, #1
                    for(j = 0; j < 8; j++)
    b414:	42bc      	cmp	r4, r7
    b416:	d1f9      	bne.n	b40c <DumpConnection+0x14c>
    b418:	e7c4      	b.n	b3a4 <DumpConnection+0xe4>
    b41a:	46c0      	nop			; (mov r8, r8)
    b41c:	0001908c 	.word	0x0001908c
    b420:	000170e5 	.word	0x000170e5
    b424:	20002844 	.word	0x20002844
    b428:	00019060 	.word	0x00019060
    b42c:	00016fc9 	.word	0x00016fc9
    b430:	20000020 	.word	0x20000020
    b434:	00018904 	.word	0x00018904
    b438:	00019074 	.word	0x00019074
    b43c:	20002894 	.word	0x20002894
    b440:	00018914 	.word	0x00018914
    b444:	00019080 	.word	0x00019080
    b448:	2000001d 	.word	0x2000001d
    b44c:	000185a0 	.word	0x000185a0
    b450:	000190c4 	.word	0x000190c4
    b454:	000190c8 	.word	0x000190c8
    b458:	00016ffd 	.word	0x00016ffd
    b45c:	000190c0 	.word	0x000190c0
    b460:	000190cc 	.word	0x000190cc
    b464:	2000284b 	.word	0x2000284b
    b468:	00019118 	.word	0x00019118
    b46c:	00019108 	.word	0x00019108

0000b470 <AddConnection>:
     *                  connection operation ends if an entry is added 
     *                  successfully
     *
     ********************************************************************/
    uint8_t AddConnection(void)
    {
    b470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b472:	46d6      	mov	lr, sl
    b474:	464f      	mov	r7, r9
    b476:	b580      	push	{r7, lr}
        {
            // check if the entry is valid
            if( ConnectionTable[i].status.bits.isValid )
            {
                // check if the entry address matches source address of current received packet
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    b478:	4b39      	ldr	r3, [pc, #228]	; (b560 <AddConnection+0xf0>)
    b47a:	685e      	ldr	r6, [r3, #4]
    b47c:	4d39      	ldr	r5, [pc, #228]	; (b564 <AddConnection+0xf4>)
    b47e:	2400      	movs	r4, #0
        uint8_t connectionSlot = 0xFF;
    b480:	27ff      	movs	r7, #255	; 0xff
            if( ConnectionTable[i].status.bits.isValid )
    b482:	46a9      	mov	r9, r5
    b484:	e005      	b.n	b492 <AddConnection+0x22>
                    connectionSlot = i;
                    status = STATUS_EXISTS;
                    break;
                }
            }
            else if( connectionSlot == 0xFF )
    b486:	2fff      	cmp	r7, #255	; 0xff
    b488:	d015      	beq.n	b4b6 <AddConnection+0x46>
    b48a:	3401      	adds	r4, #1
    b48c:	350a      	adds	r5, #10
        for(i = 0; i < CONNECTION_SIZE; i++)
    b48e:	2c05      	cmp	r4, #5
    b490:	d013      	beq.n	b4ba <AddConnection+0x4a>
    b492:	b2e3      	uxtb	r3, r4
    b494:	469a      	mov	sl, r3
            if( ConnectionTable[i].status.bits.isValid )
    b496:	00a3      	lsls	r3, r4, #2
    b498:	191b      	adds	r3, r3, r4
    b49a:	005b      	lsls	r3, r3, #1
    b49c:	444b      	add	r3, r9
    b49e:	7a1b      	ldrb	r3, [r3, #8]
    b4a0:	09db      	lsrs	r3, r3, #7
    b4a2:	d0f0      	beq.n	b486 <AddConnection+0x16>
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    b4a4:	0029      	movs	r1, r5
    b4a6:	0030      	movs	r0, r6
    b4a8:	4b2f      	ldr	r3, [pc, #188]	; (b568 <AddConnection+0xf8>)
    b4aa:	4798      	blx	r3
    b4ac:	2800      	cmp	r0, #0
    b4ae:	d0ec      	beq.n	b48a <AddConnection+0x1a>
    b4b0:	4657      	mov	r7, sl
                    status = STATUS_EXISTS;
    b4b2:	2401      	movs	r4, #1
    b4b4:	e002      	b.n	b4bc <AddConnection+0x4c>
            else if( connectionSlot == 0xFF )
    b4b6:	4657      	mov	r7, sl
    b4b8:	e7e7      	b.n	b48a <AddConnection+0x1a>
        uint8_t status = STATUS_SUCCESS;
    b4ba:	2400      	movs	r4, #0
                // store the first empty slot
                connectionSlot = i;
            }  
        }
            
        if( connectionSlot == 0xFF )
    b4bc:	2fff      	cmp	r7, #255	; 0xff
    b4be:	d049      	beq.n	b554 <AddConnection+0xe4>
        {
            return STATUS_NOT_ENOUGH_SPACE;
        }
        else 
        {
            if( ConnMode >= ENABLE_PREV_CONN )
    b4c0:	4b2a      	ldr	r3, [pc, #168]	; (b56c <AddConnection+0xfc>)
    b4c2:	781b      	ldrb	r3, [r3, #0]
    b4c4:	2b00      	cmp	r3, #0
    b4c6:	d146      	bne.n	b556 <AddConnection+0xe6>
            {
                return status;
            }
            MyindexinPC = connectionSlot;    
    b4c8:	4b29      	ldr	r3, [pc, #164]	; (b570 <AddConnection+0x100>)
    b4ca:	701f      	strb	r7, [r3, #0]
    b4cc:	00b9      	lsls	r1, r7, #2
    b4ce:	19c9      	adds	r1, r1, r7
    b4d0:	0049      	lsls	r1, r1, #1
    b4d2:	4b24      	ldr	r3, [pc, #144]	; (b564 <AddConnection+0xf4>)
    b4d4:	18c9      	adds	r1, r1, r3
    b4d6:	2300      	movs	r3, #0
            // store the source address
            for(i = 0; i < 8; i++)
            {
                ConnectionTable[connectionSlot].Address[i] = rxMessage.SourceAddress[i];
    b4d8:	0038      	movs	r0, r7
    b4da:	5cf2      	ldrb	r2, [r6, r3]
    b4dc:	54ca      	strb	r2, [r1, r3]
    b4de:	3301      	adds	r3, #1
            for(i = 0; i < 8; i++)
    b4e0:	2b08      	cmp	r3, #8
    b4e2:	d1fa      	bne.n	b4da <AddConnection+0x6a>
            }
			ConnectionTable[connectionSlot].status.bits.isValid = 1;
    b4e4:	0083      	lsls	r3, r0, #2
    b4e6:	181b      	adds	r3, r3, r0
    b4e8:	005b      	lsls	r3, r3, #1
    b4ea:	4a1e      	ldr	r2, [pc, #120]	; (b564 <AddConnection+0xf4>)
    b4ec:	18d3      	adds	r3, r2, r3
    b4ee:	7a19      	ldrb	r1, [r3, #8]
    b4f0:	2280      	movs	r2, #128	; 0x80
    b4f2:	4252      	negs	r2, r2
    b4f4:	430a      	orrs	r2, r1
    b4f6:	721a      	strb	r2, [r3, #8]
			if(rxMessage.Payload[2] & 0x01)
    b4f8:	4b19      	ldr	r3, [pc, #100]	; (b560 <AddConnection+0xf0>)
    b4fa:	689b      	ldr	r3, [r3, #8]
    b4fc:	789a      	ldrb	r2, [r3, #2]
    b4fe:	07d2      	lsls	r2, r2, #31
    b500:	d51e      	bpl.n	b540 <AddConnection+0xd0>
				{
					ConnectionTable[connectionSlot].status.bits.RXOnWhenIdle = 1;
    b502:	0082      	lsls	r2, r0, #2
    b504:	1812      	adds	r2, r2, r0
    b506:	0052      	lsls	r2, r2, #1
    b508:	4916      	ldr	r1, [pc, #88]	; (b564 <AddConnection+0xf4>)
    b50a:	188a      	adds	r2, r1, r2
    b50c:	7a11      	ldrb	r1, [r2, #8]
    b50e:	2501      	movs	r5, #1
    b510:	4329      	orrs	r1, r5
    b512:	7211      	strb	r1, [r2, #8]
            //ConnectionTable[connectionSlot].status.Val = temp;
            // store possible additional connection payload
            #if ADDITIONAL_NODE_ID_SIZE > 0
                for(i = 0; i < ADDITIONAL_NODE_ID_SIZE; i++)
                {
                    ConnectionTable[connectionSlot].PeerInfo[i] = rxMessage.Payload[3+i];
    b514:	78d9      	ldrb	r1, [r3, #3]
    b516:	0082      	lsls	r2, r0, #2
    b518:	1810      	adds	r0, r2, r0
    b51a:	0043      	lsls	r3, r0, #1
    b51c:	4811      	ldr	r0, [pc, #68]	; (b564 <AddConnection+0xf4>)
    b51e:	18c0      	adds	r0, r0, r3
    b520:	7241      	strb	r1, [r0, #9]
                }
            #endif
    
            #ifdef ENABLE_SECURITY
                // if security is enabled, clear the incoming frame control
                IncomingFrameCounter[connectionSlot].Val = 0;
    b522:	2100      	movs	r1, #0
    b524:	4b13      	ldr	r3, [pc, #76]	; (b574 <AddConnection+0x104>)
    b526:	50d1      	str	r1, [r2, r3]
            #endif
            LatestConnection = connectionSlot;
    b528:	4b13      	ldr	r3, [pc, #76]	; (b578 <AddConnection+0x108>)
    b52a:	701f      	strb	r7, [r3, #0]
            P2PStatus.bits.SearchConnection = 0;   
    b52c:	4a13      	ldr	r2, [pc, #76]	; (b57c <AddConnection+0x10c>)
    b52e:	7813      	ldrb	r3, [r2, #0]
    b530:	3110      	adds	r1, #16
    b532:	438b      	bics	r3, r1
    b534:	7013      	strb	r3, [r2, #0]
        }
        conn_size = Total_Connections();
    b536:	4b12      	ldr	r3, [pc, #72]	; (b580 <AddConnection+0x110>)
    b538:	4798      	blx	r3
    b53a:	4b12      	ldr	r3, [pc, #72]	; (b584 <AddConnection+0x114>)
    b53c:	7018      	strb	r0, [r3, #0]
    #if defined (ENABLE_NETWORK_FREEZER)
		PDS_Store(PDS_EDC_ID);
    #endif

        return status;
    b53e:	e00a      	b.n	b556 <AddConnection+0xe6>
					ConnectionTable[connectionSlot].status.bits.RXOnWhenIdle = 0;
    b540:	0082      	lsls	r2, r0, #2
    b542:	1812      	adds	r2, r2, r0
    b544:	0052      	lsls	r2, r2, #1
    b546:	4907      	ldr	r1, [pc, #28]	; (b564 <AddConnection+0xf4>)
    b548:	188a      	adds	r2, r1, r2
    b54a:	7a11      	ldrb	r1, [r2, #8]
    b54c:	2501      	movs	r5, #1
    b54e:	43a9      	bics	r1, r5
    b550:	7211      	strb	r1, [r2, #8]
    b552:	e7df      	b.n	b514 <AddConnection+0xa4>
            return STATUS_NOT_ENOUGH_SPACE;
    b554:	24f1      	movs	r4, #241	; 0xf1
    }
    b556:	0020      	movs	r0, r4
    b558:	bc0c      	pop	{r2, r3}
    b55a:	4691      	mov	r9, r2
    b55c:	469a      	mov	sl, r3
    b55e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b560:	20002b28 	.word	0x20002b28
    b564:	20002844 	.word	0x20002844
    b568:	0000aff5 	.word	0x0000aff5
    b56c:	2000001c 	.word	0x2000001c
    b570:	200028b4 	.word	0x200028b4
    b574:	200028a0 	.word	0x200028a0
    b578:	20002840 	.word	0x20002840
    b57c:	200028b8 	.word	0x200028b8
    b580:	0000adc5 	.word	0x0000adc5
    b584:	2000289d 	.word	0x2000289d

0000b588 <MiApp_ConnectionMode>:
 *      None
 *
 *****************************************************************************************/ 
void MiApp_ConnectionMode(INPUT uint8_t Mode)
{
    if( Mode > 3 )
    b588:	2803      	cmp	r0, #3
    b58a:	d808      	bhi.n	b59e <MiApp_ConnectionMode+0x16>
    {
        return;
    }
    ConnMode = Mode;
    b58c:	4b04      	ldr	r3, [pc, #16]	; (b5a0 <MiApp_ConnectionMode+0x18>)
    b58e:	7018      	strb	r0, [r3, #0]
    P2PCapacityInfo = (P2PCapacityInfo & 0x0F) | (ConnMode << 4);
    b590:	4a04      	ldr	r2, [pc, #16]	; (b5a4 <MiApp_ConnectionMode+0x1c>)
    b592:	7811      	ldrb	r1, [r2, #0]
    b594:	230f      	movs	r3, #15
    b596:	400b      	ands	r3, r1
    b598:	0100      	lsls	r0, r0, #4
    b59a:	4318      	orrs	r0, r3
    b59c:	7010      	strb	r0, [r2, #0]
    
    #if defined(ENABLE_NETWORK_FREEZER)
		PDS_Store(PDS_CONNECTION_MODE_ID);
    #endif
}
    b59e:	4770      	bx	lr
    b5a0:	2000001c 	.word	0x2000001c
    b5a4:	20002891 	.word	0x20002891

0000b5a8 <MiApp_SubscribeDataIndicationCallback>:
 *      None
 *
 *****************************************************************************************/      
bool  MiApp_SubscribeDataIndicationCallback(PacketIndCallback_t callback)
{
    if (NULL != callback)
    b5a8:	2800      	cmp	r0, #0
    b5aa:	d003      	beq.n	b5b4 <MiApp_SubscribeDataIndicationCallback+0xc>
    {
        pktRxcallback = callback;
    b5ac:	4b02      	ldr	r3, [pc, #8]	; (b5b8 <MiApp_SubscribeDataIndicationCallback+0x10>)
    b5ae:	6018      	str	r0, [r3, #0]
        return true;
    b5b0:	2001      	movs	r0, #1
    }
    return false;
}
    b5b2:	4770      	bx	lr
    return false;
    b5b4:	2000      	movs	r0, #0
    b5b6:	e7fc      	b.n	b5b2 <MiApp_SubscribeDataIndicationCallback+0xa>
    b5b8:	20000498 	.word	0x20000498

0000b5bc <calculate_ToA>:
	}
}
#endif

uint16_t calculate_ToA(uint8_t payload_length)
{
    b5bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    b5be:	46ce      	mov	lr, r9
    b5c0:	4647      	mov	r7, r8
    b5c2:	b580      	push	{r7, lr}
    b5c4:	b087      	sub	sp, #28
    b5c6:	4680      	mov	r8, r0
	   Rev.7 - May 2020 */
	
	/* Tested only with EU868 channel plan SF = 7 to 12 , BW = 125 kHz */
	 
	    //LoRa Modem Settings
	    uint8_t spreadFactor = 0;
    b5c8:	ab04      	add	r3, sp, #16
    b5ca:	1dde      	adds	r6, r3, #7
    b5cc:	2300      	movs	r3, #0
    b5ce:	7033      	strb	r3, [r6, #0]
	    uint8_t bandWidth = 125;
	    uint8_t codingRate = 0;
    b5d0:	aa04      	add	r2, sp, #16
    b5d2:	1d97      	adds	r7, r2, #6
    b5d4:	7193      	strb	r3, [r2, #6]
	    bool ldro = false;   //LowDataRateOptimize
	    
	    //Packet Configuration
	    uint16_t programmedPreambleLength = 0;
    b5d6:	ad05      	add	r5, sp, #20
    b5d8:	802b      	strh	r3, [r5, #0]
	    bool implicitHeaderMode = 0; //Implicit or Explicit header
	    bool crcEnable = 0; //CRC
    b5da:	3303      	adds	r3, #3
    b5dc:	4694      	mov	ip, r2
    b5de:	4463      	add	r3, ip
    b5e0:	4699      	mov	r9, r3
    b5e2:	2300      	movs	r3, #0
    b5e4:	464a      	mov	r2, r9
    b5e6:	7013      	strb	r3, [r2, #0]
		if(payload_length > 255)
		{
			payload_length = 255;
		}
			    
	    RADIO_GetAttr(SPREADING_FACTOR,(void *)&spreadFactor);
    b5e8:	0031      	movs	r1, r6
    b5ea:	2016      	movs	r0, #22
    b5ec:	4c39      	ldr	r4, [pc, #228]	; (b6d4 <calculate_ToA+0x118>)
    b5ee:	47a0      	blx	r4
	    RADIO_GetAttr(PREAMBLE_LEN,(void *)&programmedPreambleLength);
    b5f0:	0029      	movs	r1, r5
    b5f2:	2003      	movs	r0, #3
    b5f4:	47a0      	blx	r4
	    RADIO_GetAttr(CRC_ON,(void *)&crcEnable);
    b5f6:	4649      	mov	r1, r9
    b5f8:	2014      	movs	r0, #20
    b5fa:	47a0      	blx	r4
	    RADIO_GetAttr(ERROR_CODING_RATE,(void *)&codingRate);
    b5fc:	0039      	movs	r1, r7
    b5fe:	200b      	movs	r0, #11
    b600:	47a0      	blx	r4


	    symbolRate = (bandWidth * 1000) /  ((float)(1 << spreadFactor));
    b602:	7836      	ldrb	r6, [r6, #0]
    b604:	2001      	movs	r0, #1
    b606:	40b0      	lsls	r0, r6
    b608:	4b33      	ldr	r3, [pc, #204]	; (b6d8 <calculate_ToA+0x11c>)
    b60a:	4798      	blx	r3
    b60c:	1c01      	adds	r1, r0, #0
    b60e:	4c33      	ldr	r4, [pc, #204]	; (b6dc <calculate_ToA+0x120>)
    b610:	4833      	ldr	r0, [pc, #204]	; (b6e0 <calculate_ToA+0x124>)
    b612:	47a0      	blx	r4
    b614:	1c01      	adds	r1, r0, #0
	    symbolTime = 1000 / (symbolRate);
    b616:	4833      	ldr	r0, [pc, #204]	; (b6e4 <calculate_ToA+0x128>)
    b618:	47a0      	blx	r4
    b61a:	1c04      	adds	r4, r0, #0
	    preambleDuration = (programmedPreambleLength + 4.25) * symbolTime;
    b61c:	8828      	ldrh	r0, [r5, #0]
    b61e:	4b32      	ldr	r3, [pc, #200]	; (b6e8 <calculate_ToA+0x12c>)
    b620:	4798      	blx	r3
    b622:	2200      	movs	r2, #0
    b624:	4b31      	ldr	r3, [pc, #196]	; (b6ec <calculate_ToA+0x130>)
    b626:	4d32      	ldr	r5, [pc, #200]	; (b6f0 <calculate_ToA+0x134>)
    b628:	47a8      	blx	r5
    b62a:	9000      	str	r0, [sp, #0]
    b62c:	9101      	str	r1, [sp, #4]
    b62e:	1c20      	adds	r0, r4, #0
    b630:	4b30      	ldr	r3, [pc, #192]	; (b6f4 <calculate_ToA+0x138>)
    b632:	4798      	blx	r3
    b634:	0002      	movs	r2, r0
    b636:	000b      	movs	r3, r1
    b638:	9800      	ldr	r0, [sp, #0]
    b63a:	9901      	ldr	r1, [sp, #4]
    b63c:	4d2e      	ldr	r5, [pc, #184]	; (b6f8 <calculate_ToA+0x13c>)
    b63e:	47a8      	blx	r5
    b640:	4b2e      	ldr	r3, [pc, #184]	; (b6fc <calculate_ToA+0x140>)
    b642:	4798      	blx	r3
    b644:	9000      	str	r0, [sp, #0]

	    if ( ((spreadFactor == 12) && ((bandWidth == 125) || (bandWidth == 250))) || ((spreadFactor == 11) && (bandWidth == 125)))
    b646:	2e0c      	cmp	r6, #12
    b648:	d040      	beq.n	b6cc <calculate_ToA+0x110>
    b64a:	0033      	movs	r3, r6
    b64c:	3b0b      	subs	r3, #11
    b64e:	425a      	negs	r2, r3
    b650:	4153      	adcs	r3, r2
    b652:	b2db      	uxtb	r3, r3
	    {
		    ldro = false;
	    }
	    
	    ceilValueNumerator = (8 * payload_length - 4 * spreadFactor + 28 + 16 * crcEnable - 20 * implicitHeaderMode);
	    ceilValueDenominator= (4 * (spreadFactor - 2 * ldro));
    b654:	005b      	lsls	r3, r3, #1
    b656:	1af3      	subs	r3, r6, r3
    b658:	009b      	lsls	r3, r3, #2
	    ceilValue = (ceilValueNumerator + ceilValueDenominator - 1.0) / ceilValueDenominator;
    b65a:	b2df      	uxtb	r7, r3
	    ceilValueNumerator = (8 * payload_length - 4 * spreadFactor + 28 + 16 * crcEnable - 20 * implicitHeaderMode);
    b65c:	4643      	mov	r3, r8
    b65e:	0058      	lsls	r0, r3, #1
    b660:	1b80      	subs	r0, r0, r6
    b662:	3007      	adds	r0, #7
    b664:	ab04      	add	r3, sp, #16
    b666:	3303      	adds	r3, #3
    b668:	781b      	ldrb	r3, [r3, #0]
    b66a:	009b      	lsls	r3, r3, #2
    b66c:	18c0      	adds	r0, r0, r3
    b66e:	0080      	lsls	r0, r0, #2
	    ceilValue = (ceilValueNumerator + ceilValueDenominator - 1.0) / ceilValueDenominator;
    b670:	b280      	uxth	r0, r0
    b672:	19c0      	adds	r0, r0, r7
    b674:	4d1c      	ldr	r5, [pc, #112]	; (b6e8 <calculate_ToA+0x12c>)
    b676:	47a8      	blx	r5
    b678:	2200      	movs	r2, #0
    b67a:	4b21      	ldr	r3, [pc, #132]	; (b700 <calculate_ToA+0x144>)
    b67c:	4e21      	ldr	r6, [pc, #132]	; (b704 <calculate_ToA+0x148>)
    b67e:	47b0      	blx	r6
    b680:	9002      	str	r0, [sp, #8]
    b682:	9103      	str	r1, [sp, #12]
    b684:	0038      	movs	r0, r7
    b686:	47a8      	blx	r5
    b688:	0002      	movs	r2, r0
    b68a:	000b      	movs	r3, r1
    b68c:	9802      	ldr	r0, [sp, #8]
    b68e:	9903      	ldr	r1, [sp, #12]
    b690:	4e1d      	ldr	r6, [pc, #116]	; (b708 <calculate_ToA+0x14c>)
    b692:	47b0      	blx	r6
    b694:	4b1d      	ldr	r3, [pc, #116]	; (b70c <calculate_ToA+0x150>)
    b696:	4798      	blx	r3
	    
	    if ((ceilValue * (codingRate + 4)) > 0)
    b698:	b282      	uxth	r2, r0
    b69a:	ab04      	add	r3, sp, #16
    b69c:	7998      	ldrb	r0, [r3, #6]
    b69e:	3004      	adds	r0, #4
    b6a0:	4350      	muls	r0, r2
    b6a2:	2800      	cmp	r0, #0
    b6a4:	dd14      	ble.n	b6d0 <calculate_ToA+0x114>
	    {
		    maxCeilValue = ceilValue * (codingRate + 4);
    b6a6:	4b0c      	ldr	r3, [pc, #48]	; (b6d8 <calculate_ToA+0x11c>)
    b6a8:	4798      	blx	r3
	    else
	    {
		    maxCeilValue = 0;
	    }

	    numberOfPayloadSymbols = 8 + maxCeilValue;
    b6aa:	4e19      	ldr	r6, [pc, #100]	; (b710 <calculate_ToA+0x154>)
    b6ac:	2182      	movs	r1, #130	; 0x82
    b6ae:	05c9      	lsls	r1, r1, #23
    b6b0:	47b0      	blx	r6
	    payloadDuration = numberOfPayloadSymbols * symbolTime;
    b6b2:	1c21      	adds	r1, r4, #0
    b6b4:	4b17      	ldr	r3, [pc, #92]	; (b714 <calculate_ToA+0x158>)
    b6b6:	4798      	blx	r3
		
	    totalTimeOnAir = preambleDuration + payloadDuration;
    b6b8:	9900      	ldr	r1, [sp, #0]
    b6ba:	47b0      	blx	r6
		
		return ((uint16_t)totalTimeOnAir) ;
    b6bc:	4b16      	ldr	r3, [pc, #88]	; (b718 <calculate_ToA+0x15c>)
    b6be:	4798      	blx	r3
    b6c0:	b280      	uxth	r0, r0
    b6c2:	b007      	add	sp, #28
    b6c4:	bc0c      	pop	{r2, r3}
    b6c6:	4690      	mov	r8, r2
    b6c8:	4699      	mov	r9, r3
    b6ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		    ldro =  true;
    b6cc:	2301      	movs	r3, #1
    b6ce:	e7c1      	b.n	b654 <calculate_ToA+0x98>
		    maxCeilValue = 0;
    b6d0:	2000      	movs	r0, #0
    b6d2:	e7ea      	b.n	b6aa <calculate_ToA+0xee>
    b6d4:	0000e48d 	.word	0x0000e48d
    b6d8:	00014b05 	.word	0x00014b05
    b6dc:	0001416d 	.word	0x0001416d
    b6e0:	47f42400 	.word	0x47f42400
    b6e4:	447a0000 	.word	0x447a0000
    b6e8:	0001664d 	.word	0x0001664d
    b6ec:	40110000 	.word	0x40110000
    b6f0:	00014c31 	.word	0x00014c31
    b6f4:	00016741 	.word	0x00016741
    b6f8:	00015ab9 	.word	0x00015ab9
    b6fc:	000167e5 	.word	0x000167e5
    b700:	3ff00000 	.word	0x3ff00000
    b704:	00015fb9 	.word	0x00015fb9
    b708:	00015251 	.word	0x00015251
    b70c:	00013c4d 	.word	0x00013c4d
    b710:	00013e49 	.word	0x00013e49
    b714:	0001454d 	.word	0x0001454d
    b718:	00013c1d 	.word	0x00013c1d

0000b71c <P2PTasks>:
{
    b71c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b71e:	46de      	mov	lr, fp
    b720:	4657      	mov	r7, sl
    b722:	464e      	mov	r6, r9
    b724:	4645      	mov	r5, r8
    b726:	b5e0      	push	{r5, r6, r7, lr}
    b728:	b08b      	sub	sp, #44	; 0x2c
    MiMAC_Task();
    b72a:	4bb6      	ldr	r3, [pc, #728]	; (ba04 <P2PTasks+0x2e8>)
    b72c:	4798      	blx	r3
            if( indirectMessages[i].flags.bits.isValid )
    b72e:	4bb6      	ldr	r3, [pc, #728]	; (ba08 <P2PTasks+0x2ec>)
    b730:	7b9b      	ldrb	r3, [r3, #14]
    b732:	07db      	lsls	r3, r3, #31
    b734:	d423      	bmi.n	b77e <P2PTasks+0x62>
    b736:	2391      	movs	r3, #145	; 0x91
    b738:	005b      	lsls	r3, r3, #1
    b73a:	4ab3      	ldr	r2, [pc, #716]	; (ba08 <P2PTasks+0x2ec>)
    b73c:	5cd3      	ldrb	r3, [r2, r3]
    b73e:	07db      	lsls	r3, r3, #31
    b740:	d434      	bmi.n	b7ac <P2PTasks+0x90>
	ack_timeout_variable = calculate_ToA(PACKETLEN_ACK);
    b742:	2016      	movs	r0, #22
    b744:	4bb1      	ldr	r3, [pc, #708]	; (ba0c <P2PTasks+0x2f0>)
    b746:	4798      	blx	r3
	ack_timeout_variable = (ack_timeout_variable + TOTAL_ACK_PROCESSING_DELAY) * 1000;
    b748:	23fa      	movs	r3, #250	; 0xfa
    b74a:	009b      	lsls	r3, r3, #2
    b74c:	4358      	muls	r0, r3
    b74e:	4bb0      	ldr	r3, [pc, #704]	; (ba10 <P2PTasks+0x2f4>)
    b750:	469c      	mov	ip, r3
    b752:	4460      	add	r0, ip
    b754:	4baf      	ldr	r3, [pc, #700]	; (ba14 <P2PTasks+0x2f8>)
    b756:	6018      	str	r0, [r3, #0]
	if((AckReqData) && (DataTxAckTimer.Val)) // AckReqData
    b758:	4baf      	ldr	r3, [pc, #700]	; (ba18 <P2PTasks+0x2fc>)
    b75a:	781b      	ldrb	r3, [r3, #0]
    b75c:	2b00      	cmp	r3, #0
    b75e:	d003      	beq.n	b768 <P2PTasks+0x4c>
    b760:	4bae      	ldr	r3, [pc, #696]	; (ba1c <P2PTasks+0x300>)
    b762:	681b      	ldr	r3, [r3, #0]
    b764:	2b00      	cmp	r3, #0
    b766:	d13b      	bne.n	b7e0 <P2PTasks+0xc4>
    if( P2PStatus.bits.RxHasUserData == 0 && MiMAC_ReceivedPacket() )
    b768:	4bad      	ldr	r3, [pc, #692]	; (ba20 <P2PTasks+0x304>)
    b76a:	781b      	ldrb	r3, [r3, #0]
    b76c:	071b      	lsls	r3, r3, #28
    b76e:	d54c      	bpl.n	b80a <P2PTasks+0xee>
}
    b770:	b00b      	add	sp, #44	; 0x2c
    b772:	bc3c      	pop	{r2, r3, r4, r5}
    b774:	4690      	mov	r8, r2
    b776:	4699      	mov	r9, r3
    b778:	46a2      	mov	sl, r4
    b77a:	46ab      	mov	fp, r5
    b77c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                tmpTick.Val = MiWi_TickGet();
    b77e:	4ba9      	ldr	r3, [pc, #676]	; (ba24 <P2PTasks+0x308>)
    b780:	4798      	blx	r3
                if( MiWi_TickGetDiff(tmpTick, indirectMessages[i].TickStart) > INDIRECT_MESSAGE_TIMEOUT )
    b782:	4ba1      	ldr	r3, [pc, #644]	; (ba08 <P2PTasks+0x2ec>)
    b784:	6819      	ldr	r1, [r3, #0]
    b786:	4ba8      	ldr	r3, [pc, #672]	; (ba28 <P2PTasks+0x30c>)
    b788:	4798      	blx	r3
    b78a:	4ba8      	ldr	r3, [pc, #672]	; (ba2c <P2PTasks+0x310>)
    b78c:	4298      	cmp	r0, r3
    b78e:	d9d2      	bls.n	b736 <P2PTasks+0x1a>
                    indirectMessages[i].flags.Val = 0x00;   
    b790:	4b9d      	ldr	r3, [pc, #628]	; (ba08 <P2PTasks+0x2ec>)
    b792:	2200      	movs	r2, #0
    b794:	739a      	strb	r2, [r3, #14]
                    indirectMessages[i].indirectConfCallback(indirectMessages[i].indirectDataHandle, TRANSACTION_EXPIRED, indirectMessages[i].PayLoad);
    b796:	001a      	movs	r2, r3
    b798:	3210      	adds	r2, #16
    b79a:	2110      	movs	r1, #16
    b79c:	31ff      	adds	r1, #255	; 0xff
    b79e:	5c58      	ldrb	r0, [r3, r1]
    b7a0:	3101      	adds	r1, #1
    b7a2:	585b      	ldr	r3, [r3, r1]
    b7a4:	390c      	subs	r1, #12
    b7a6:	39ff      	subs	r1, #255	; 0xff
    b7a8:	4798      	blx	r3
    b7aa:	e7c4      	b.n	b736 <P2PTasks+0x1a>
                tmpTick.Val = MiWi_TickGet();
    b7ac:	4b9d      	ldr	r3, [pc, #628]	; (ba24 <P2PTasks+0x308>)
    b7ae:	4798      	blx	r3
                if( MiWi_TickGetDiff(tmpTick, indirectMessages[i].TickStart) > INDIRECT_MESSAGE_TIMEOUT )
    b7b0:	238a      	movs	r3, #138	; 0x8a
    b7b2:	005b      	lsls	r3, r3, #1
    b7b4:	4a94      	ldr	r2, [pc, #592]	; (ba08 <P2PTasks+0x2ec>)
    b7b6:	58d1      	ldr	r1, [r2, r3]
    b7b8:	4b9b      	ldr	r3, [pc, #620]	; (ba28 <P2PTasks+0x30c>)
    b7ba:	4798      	blx	r3
    b7bc:	4b9b      	ldr	r3, [pc, #620]	; (ba2c <P2PTasks+0x310>)
    b7be:	4298      	cmp	r0, r3
    b7c0:	d9bf      	bls.n	b742 <P2PTasks+0x26>
                    indirectMessages[i].flags.Val = 0x00;   
    b7c2:	4b91      	ldr	r3, [pc, #580]	; (ba08 <P2PTasks+0x2ec>)
    b7c4:	2100      	movs	r1, #0
    b7c6:	2291      	movs	r2, #145	; 0x91
    b7c8:	0052      	lsls	r2, r2, #1
    b7ca:	5499      	strb	r1, [r3, r2]
                    indirectMessages[i].indirectConfCallback(indirectMessages[i].indirectDataHandle, TRANSACTION_EXPIRED, indirectMessages[i].PayLoad);
    b7cc:	001a      	movs	r2, r3
    b7ce:	3225      	adds	r2, #37	; 0x25
    b7d0:	32ff      	adds	r2, #255	; 0xff
    b7d2:	4997      	ldr	r1, [pc, #604]	; (ba30 <P2PTasks+0x314>)
    b7d4:	5c58      	ldrb	r0, [r3, r1]
    b7d6:	3101      	adds	r1, #1
    b7d8:	585b      	ldr	r3, [r3, r1]
    b7da:	2105      	movs	r1, #5
    b7dc:	4798      	blx	r3
    b7de:	e7b0      	b.n	b742 <P2PTasks+0x26>
		tmpTick.Val = MiWi_TickGet();
    b7e0:	4b90      	ldr	r3, [pc, #576]	; (ba24 <P2PTasks+0x308>)
    b7e2:	4798      	blx	r3
		if( MiWi_TickGetDiff(tmpTick, DataTxAckTimer) > ((ack_timeout_variable) * ACK_TIMEOUT_INTERVAL) )
    b7e4:	4b8d      	ldr	r3, [pc, #564]	; (ba1c <P2PTasks+0x300>)
    b7e6:	6819      	ldr	r1, [r3, #0]
    b7e8:	4b8f      	ldr	r3, [pc, #572]	; (ba28 <P2PTasks+0x30c>)
    b7ea:	4798      	blx	r3
    b7ec:	4b89      	ldr	r3, [pc, #548]	; (ba14 <P2PTasks+0x2f8>)
    b7ee:	681b      	ldr	r3, [r3, #0]
    b7f0:	4298      	cmp	r0, r3
    b7f2:	d9b9      	bls.n	b768 <P2PTasks+0x4c>
			DataTxAckTimer.Val =0;
    b7f4:	2300      	movs	r3, #0
    b7f6:	4a89      	ldr	r2, [pc, #548]	; (ba1c <P2PTasks+0x300>)
    b7f8:	6013      	str	r3, [r2, #0]
			AckReqData = 0;
    b7fa:	4a87      	ldr	r2, [pc, #540]	; (ba18 <P2PTasks+0x2fc>)
    b7fc:	7013      	strb	r3, [r2, #0]
			MiMAC_RetryPacket();
    b7fe:	4b8d      	ldr	r3, [pc, #564]	; (ba34 <P2PTasks+0x318>)
    b800:	4798      	blx	r3
			printf("\r\n Ack Timeout\r\n");
    b802:	488d      	ldr	r0, [pc, #564]	; (ba38 <P2PTasks+0x31c>)
    b804:	4b8d      	ldr	r3, [pc, #564]	; (ba3c <P2PTasks+0x320>)
    b806:	4798      	blx	r3
    b808:	e7ae      	b.n	b768 <P2PTasks+0x4c>
    if( P2PStatus.bits.RxHasUserData == 0 && MiMAC_ReceivedPacket() )
    b80a:	4b8d      	ldr	r3, [pc, #564]	; (ba40 <P2PTasks+0x324>)
    b80c:	4798      	blx	r3
    b80e:	2800      	cmp	r0, #0
    b810:	d0ae      	beq.n	b770 <P2PTasks+0x54>
        FW_Stat = false;  // Used for SW_Generated ACK T PAN CO
    b812:	2200      	movs	r2, #0
    b814:	4b8b      	ldr	r3, [pc, #556]	; (ba44 <P2PTasks+0x328>)
    b816:	701a      	strb	r2, [r3, #0]
            temp_bit = MACRxPacket.flags.bits.broadcast;
    b818:	4b8b      	ldr	r3, [pc, #556]	; (ba48 <P2PTasks+0x32c>)
    b81a:	7819      	ldrb	r1, [r3, #0]
    b81c:	074b      	lsls	r3, r1, #29
    b81e:	0fdb      	lsrs	r3, r3, #31
    b820:	4a8a      	ldr	r2, [pc, #552]	; (ba4c <P2PTasks+0x330>)
    b822:	7013      	strb	r3, [r2, #0]
            rxMessage.flags.bits.broadcast = temp_bit;
    b824:	2203      	movs	r2, #3
        rxMessage.flags.bits.secEn = MACRxPacket.flags.bits.secEn;
    b826:	08cc      	lsrs	r4, r1, #3
    b828:	2001      	movs	r0, #1
    b82a:	4004      	ands	r4, r0
    b82c:	00e4      	lsls	r4, r4, #3
    b82e:	4013      	ands	r3, r2
        rxMessage.flags.bits.command = (MACRxPacket.flags.bits.packetType == PACKET_TYPE_COMMAND) ? 1:0;
    b830:	400a      	ands	r2, r1
    b832:	3a01      	subs	r2, #1
    b834:	4255      	negs	r5, r2
    b836:	416a      	adcs	r2, r5
    b838:	4002      	ands	r2, r0
    b83a:	0152      	lsls	r2, r2, #5
    b83c:	4323      	orrs	r3, r4
        rxMessage.flags.bits.srcPrsnt = MACRxPacket.flags.bits.sourcePrsnt;
    b83e:	09cc      	lsrs	r4, r1, #7
    b840:	4020      	ands	r0, r4
    b842:	0180      	lsls	r0, r0, #6
    b844:	4313      	orrs	r3, r2
    b846:	4303      	orrs	r3, r0
    b848:	4a81      	ldr	r2, [pc, #516]	; (ba50 <P2PTasks+0x334>)
    b84a:	7013      	strb	r3, [r2, #0]
        if( MACRxPacket.flags.bits.sourcePrsnt )
    b84c:	b249      	sxtb	r1, r1
    b84e:	2900      	cmp	r1, #0
    b850:	db36      	blt.n	b8c0 <P2PTasks+0x1a4>
            rxMessage.SourcePANID.Val = MACRxPacket.SourcePANID.Val;
    b852:	4a7d      	ldr	r2, [pc, #500]	; (ba48 <P2PTasks+0x32c>)
    b854:	8a17      	ldrh	r7, [r2, #16]
    b856:	4b7e      	ldr	r3, [pc, #504]	; (ba50 <P2PTasks+0x334>)
    b858:	805f      	strh	r7, [r3, #2]
        rxMessage.PayloadSize = MACRxPacket.PayloadLen;
    b85a:	7b11      	ldrb	r1, [r2, #12]
    b85c:	7319      	strb	r1, [r3, #12]
        rxMessage.Payload = MACRxPacket.Payload;
    b85e:	6895      	ldr	r5, [r2, #8]
    b860:	609d      	str	r5, [r3, #8]
            rxMessage.PacketLQI = MACRxPacket.LQIValue;
    b862:	7b90      	ldrb	r0, [r2, #14]
    b864:	4680      	mov	r8, r0
    b866:	7398      	strb	r0, [r3, #14]
            rxMessage.PacketRSSI = MACRxPacket.RSSIValue;
    b868:	7b52      	ldrb	r2, [r2, #13]
    b86a:	4691      	mov	r9, r2
    b86c:	735a      	strb	r2, [r3, #13]
        if( rxMessage.flags.bits.command )
    b86e:	781b      	ldrb	r3, [r3, #0]
    b870:	069b      	lsls	r3, r3, #26
    b872:	d400      	bmi.n	b876 <P2PTasks+0x15a>
    b874:	e277      	b.n	bd66 <P2PTasks+0x64a>
            switch( rxMessage.Payload[0] )
    b876:	782b      	ldrb	r3, [r5, #0]
    b878:	b2da      	uxtb	r2, r3
    b87a:	2a83      	cmp	r2, #131	; 0x83
    b87c:	d100      	bne.n	b880 <P2PTasks+0x164>
    b87e:	e210      	b.n	bca2 <P2PTasks+0x586>
    b880:	d923      	bls.n	b8ca <P2PTasks+0x1ae>
    b882:	b2da      	uxtb	r2, r3
    b884:	2a91      	cmp	r2, #145	; 0x91
    b886:	d100      	bne.n	b88a <P2PTasks+0x16e>
    b888:	e174      	b.n	bb74 <P2PTasks+0x458>
    b88a:	d935      	bls.n	b8f8 <P2PTasks+0x1dc>
    b88c:	b2da      	uxtb	r2, r3
    b88e:	2a92      	cmp	r2, #146	; 0x92
    b890:	d100      	bne.n	b894 <P2PTasks+0x178>
    b892:	e1e1      	b.n	bc58 <P2PTasks+0x53c>
    b894:	2a97      	cmp	r2, #151	; 0x97
    b896:	d11f      	bne.n	b8d8 <P2PTasks+0x1bc>
                            if( P2PStatus.bits.Resync )
    b898:	4b61      	ldr	r3, [pc, #388]	; (ba20 <P2PTasks+0x304>)
    b89a:	781b      	ldrb	r3, [r3, #0]
    b89c:	069b      	lsls	r3, r3, #26
    b89e:	d500      	bpl.n	b8a2 <P2PTasks+0x186>
    b8a0:	e198      	b.n	bbd4 <P2PTasks+0x4b8>
                                    for(; i < ActiveScanResultIndex; i++)
    b8a2:	4b6c      	ldr	r3, [pc, #432]	; (ba54 <P2PTasks+0x338>)
    b8a4:	781b      	ldrb	r3, [r3, #0]
    b8a6:	469a      	mov	sl, r3
    b8a8:	2b00      	cmp	r3, #0
    b8aa:	d100      	bne.n	b8ae <P2PTasks+0x192>
    b8ac:	e1af      	b.n	bc0e <P2PTasks+0x4f2>
                                        if( (ActiveScanResults[i].Channel == currentChannel) &&
    b8ae:	4b6a      	ldr	r3, [pc, #424]	; (ba58 <P2PTasks+0x33c>)
    b8b0:	781b      	ldrb	r3, [r3, #0]
    b8b2:	469b      	mov	fp, r3
                                            isSameAddress(ActiveScanResults[i].Address, rxMessage.SourceAddress)
    b8b4:	4b66      	ldr	r3, [pc, #408]	; (ba50 <P2PTasks+0x334>)
    b8b6:	685b      	ldr	r3, [r3, #4]
    b8b8:	9306      	str	r3, [sp, #24]
    b8ba:	4e68      	ldr	r6, [pc, #416]	; (ba5c <P2PTasks+0x340>)
    b8bc:	2400      	movs	r4, #0
    b8be:	e196      	b.n	bbee <P2PTasks+0x4d2>
            rxMessage.SourceAddress = MACRxPacket.SourceAddress;
    b8c0:	4b61      	ldr	r3, [pc, #388]	; (ba48 <P2PTasks+0x32c>)
    b8c2:	685a      	ldr	r2, [r3, #4]
    b8c4:	4b62      	ldr	r3, [pc, #392]	; (ba50 <P2PTasks+0x334>)
    b8c6:	605a      	str	r2, [r3, #4]
    b8c8:	e7c3      	b.n	b852 <P2PTasks+0x136>
            switch( rxMessage.Payload[0] )
    b8ca:	2a81      	cmp	r2, #129	; 0x81
    b8cc:	d023      	beq.n	b916 <P2PTasks+0x1fa>
    b8ce:	d900      	bls.n	b8d2 <P2PTasks+0x1b6>
    b8d0:	e118      	b.n	bb04 <P2PTasks+0x3e8>
    b8d2:	2b04      	cmp	r3, #4
    b8d4:	d100      	bne.n	b8d8 <P2PTasks+0x1bc>
    b8d6:	e1e4      	b.n	bca2 <P2PTasks+0x586>
                    P2PStatus.bits.RxHasUserData = 1;
    b8d8:	4c51      	ldr	r4, [pc, #324]	; (ba20 <P2PTasks+0x304>)
    b8da:	7823      	ldrb	r3, [r4, #0]
    b8dc:	2208      	movs	r2, #8
    b8de:	4313      	orrs	r3, r2
    b8e0:	7023      	strb	r3, [r4, #0]
					pktRxcallback(&rxMessage);
    b8e2:	4b5f      	ldr	r3, [pc, #380]	; (ba60 <P2PTasks+0x344>)
    b8e4:	681b      	ldr	r3, [r3, #0]
    b8e6:	485a      	ldr	r0, [pc, #360]	; (ba50 <P2PTasks+0x334>)
    b8e8:	4798      	blx	r3
					P2PStatus.bits.RxHasUserData = 0;
    b8ea:	7823      	ldrb	r3, [r4, #0]
    b8ec:	2208      	movs	r2, #8
    b8ee:	4393      	bics	r3, r2
    b8f0:	7023      	strb	r3, [r4, #0]
					MiMAC_DiscardPacket();
    b8f2:	4b5c      	ldr	r3, [pc, #368]	; (ba64 <P2PTasks+0x348>)
    b8f4:	4798      	blx	r3
                    break;
    b8f6:	e245      	b.n	bd84 <P2PTasks+0x668>
            switch( rxMessage.Payload[0] )
    b8f8:	2a87      	cmp	r2, #135	; 0x87
    b8fa:	d1ed      	bne.n	b8d8 <P2PTasks+0x1bc>
                        if(ConnMode > ENABLE_ACTIVE_SCAN_RSP)
    b8fc:	4b5a      	ldr	r3, [pc, #360]	; (ba68 <P2PTasks+0x34c>)
    b8fe:	781b      	ldrb	r3, [r3, #0]
    b900:	2b02      	cmp	r3, #2
    b902:	d87b      	bhi.n	b9fc <P2PTasks+0x2e0>
                            if( currentChannel != rxMessage.Payload[1] )
    b904:	786a      	ldrb	r2, [r5, #1]
    b906:	4b54      	ldr	r3, [pc, #336]	; (ba58 <P2PTasks+0x33c>)
    b908:	781b      	ldrb	r3, [r3, #0]
    b90a:	429a      	cmp	r2, r3
    b90c:	d100      	bne.n	b910 <P2PTasks+0x1f4>
    b90e:	e0c7      	b.n	baa0 <P2PTasks+0x384>
                                MiMAC_DiscardPacket();
    b910:	4b54      	ldr	r3, [pc, #336]	; (ba64 <P2PTasks+0x348>)
    b912:	4798      	blx	r3
                                break;
    b914:	e236      	b.n	bd84 <P2PTasks+0x668>
                                if( currentChannel != rxMessage.Payload[1] )
    b916:	786a      	ldrb	r2, [r5, #1]
    b918:	4b4f      	ldr	r3, [pc, #316]	; (ba58 <P2PTasks+0x33c>)
    b91a:	781b      	ldrb	r3, [r3, #0]
    b91c:	429a      	cmp	r2, r3
    b91e:	d002      	beq.n	b926 <P2PTasks+0x20a>
                                    MiMAC_DiscardPacket();
    b920:	4b50      	ldr	r3, [pc, #320]	; (ba64 <P2PTasks+0x348>)
    b922:	4798      	blx	r3
                                    break;
    b924:	e22e      	b.n	bd84 <P2PTasks+0x668>
                                if( ConnMode == DISABLE_ALL_CONN )
    b926:	4b50      	ldr	r3, [pc, #320]	; (ba68 <P2PTasks+0x34c>)
    b928:	781b      	ldrb	r3, [r3, #0]
    b92a:	2b03      	cmp	r3, #3
    b92c:	d047      	beq.n	b9be <P2PTasks+0x2a2>
                                    if( rxMessage.SourcePANID.Val != 0xFFFF &&
    b92e:	4b4f      	ldr	r3, [pc, #316]	; (ba6c <P2PTasks+0x350>)
    b930:	429f      	cmp	r7, r3
    b932:	d006      	beq.n	b942 <P2PTasks+0x226>
                                        rxMessage.SourcePANID.Val != myPANID.Val &&
    b934:	4b4e      	ldr	r3, [pc, #312]	; (ba70 <P2PTasks+0x354>)
                                    if( rxMessage.SourcePANID.Val != 0xFFFF &&
    b936:	881b      	ldrh	r3, [r3, #0]
    b938:	42bb      	cmp	r3, r7
    b93a:	d002      	beq.n	b942 <P2PTasks+0x226>
                                        rxMessage.SourcePANID.Val != myPANID.Val &&
    b93c:	2902      	cmp	r1, #2
    b93e:	d900      	bls.n	b942 <P2PTasks+0x226>
    b940:	e235      	b.n	bdae <P2PTasks+0x692>
                                    status = AddConnection();
    b942:	4b4c      	ldr	r3, [pc, #304]	; (ba74 <P2PTasks+0x358>)
    b944:	4798      	blx	r3
    b946:	0005      	movs	r5, r0
                                if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    b948:	4b47      	ldr	r3, [pc, #284]	; (ba68 <P2PTasks+0x34c>)
    b94a:	781b      	ldrb	r3, [r3, #0]
    b94c:	2b01      	cmp	r3, #1
    b94e:	d039      	beq.n	b9c4 <P2PTasks+0x2a8>
                                dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(TX_BUFFER_SIZE));
    b950:	20e0      	movs	r0, #224	; 0xe0
    b952:	4b49      	ldr	r3, [pc, #292]	; (ba78 <P2PTasks+0x35c>)
    b954:	4798      	blx	r3
    b956:	1e04      	subs	r4, r0, #0
                                if (NULL == dataPtr)
    b958:	d100      	bne.n	b95c <P2PTasks+0x240>
    b95a:	e709      	b.n	b770 <P2PTasks+0x54>
                                dataPtr[dataLen++] = CMD_P2P_CONNECTION_RESPONSE;
    b95c:	2391      	movs	r3, #145	; 0x91
    b95e:	7003      	strb	r3, [r0, #0]
                                dataPtr[dataLen++] = status;
    b960:	7045      	strb	r5, [r0, #1]
    b962:	2602      	movs	r6, #2
                                if( status == STATUS_SUCCESS ||
    b964:	2d01      	cmp	r5, #1
    b966:	d93d      	bls.n	b9e4 <P2PTasks+0x2c8>
                                MiMAC_DiscardPacket();
    b968:	4b3e      	ldr	r3, [pc, #248]	; (ba64 <P2PTasks+0x348>)
    b96a:	4798      	blx	r3
                                i = PHY_RandomReq();
    b96c:	4b43      	ldr	r3, [pc, #268]	; (ba7c <P2PTasks+0x360>)
    b96e:	4798      	blx	r3
    b970:	b2c5      	uxtb	r5, r0
                                delay_s(i % (CONNECTION_INTERVAL-1));
    b972:	2103      	movs	r1, #3
    b974:	0028      	movs	r0, r5
    b976:	4b42      	ldr	r3, [pc, #264]	; (ba80 <P2PTasks+0x364>)
    b978:	4798      	blx	r3
    b97a:	b2c9      	uxtb	r1, r1
    b97c:	2900      	cmp	r1, #0
    b97e:	d039      	beq.n	b9f4 <P2PTasks+0x2d8>
    b980:	20fa      	movs	r0, #250	; 0xfa
    b982:	0080      	lsls	r0, r0, #2
    b984:	4368      	muls	r0, r5
    b986:	2103      	movs	r1, #3
    b988:	4b3e      	ldr	r3, [pc, #248]	; (ba84 <P2PTasks+0x368>)
    b98a:	4798      	blx	r3
    b98c:	0008      	movs	r0, r1
    b98e:	4b3e      	ldr	r3, [pc, #248]	; (ba88 <P2PTasks+0x36c>)
    b990:	4798      	blx	r3
                                        SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn, 
    b992:	4b2f      	ldr	r3, [pc, #188]	; (ba50 <P2PTasks+0x334>)
    b994:	685a      	ldr	r2, [r3, #4]
    b996:	8859      	ldrh	r1, [r3, #2]
    b998:	483c      	ldr	r0, [pc, #240]	; (ba8c <P2PTasks+0x370>)
    b99a:	9005      	str	r0, [sp, #20]
    b99c:	2001      	movs	r0, #1
    b99e:	9004      	str	r0, [sp, #16]
    b9a0:	2000      	movs	r0, #0
    b9a2:	9003      	str	r0, [sp, #12]
    b9a4:	9402      	str	r4, [sp, #8]
    b9a6:	9601      	str	r6, [sp, #4]
    b9a8:	781b      	ldrb	r3, [r3, #0]
    b9aa:	071b      	lsls	r3, r3, #28
    b9ac:	0fdb      	lsrs	r3, r3, #31
    b9ae:	9300      	str	r3, [sp, #0]
    b9b0:	2301      	movs	r3, #1
    b9b2:	4c37      	ldr	r4, [pc, #220]	; (ba90 <P2PTasks+0x374>)
    b9b4:	47a0      	blx	r4
								delay_ms (100);
    b9b6:	2064      	movs	r0, #100	; 0x64
    b9b8:	4b33      	ldr	r3, [pc, #204]	; (ba88 <P2PTasks+0x36c>)
    b9ba:	4798      	blx	r3
                        break; 
    b9bc:	e1e2      	b.n	bd84 <P2PTasks+0x668>
                                    MiMAC_DiscardPacket();
    b9be:	4b29      	ldr	r3, [pc, #164]	; (ba64 <P2PTasks+0x348>)
    b9c0:	4798      	blx	r3
                                    break;
    b9c2:	e1df      	b.n	bd84 <P2PTasks+0x668>
                                if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    b9c4:	3801      	subs	r0, #1
    b9c6:	b2c0      	uxtb	r0, r0
    b9c8:	2801      	cmp	r0, #1
    b9ca:	d9c1      	bls.n	b950 <P2PTasks+0x234>
                                dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(TX_BUFFER_SIZE));
    b9cc:	20e0      	movs	r0, #224	; 0xe0
    b9ce:	4b2a      	ldr	r3, [pc, #168]	; (ba78 <P2PTasks+0x35c>)
    b9d0:	4798      	blx	r3
    b9d2:	1e04      	subs	r4, r0, #0
                                if (NULL == dataPtr)
    b9d4:	d100      	bne.n	b9d8 <P2PTasks+0x2bc>
    b9d6:	e6cb      	b.n	b770 <P2PTasks+0x54>
                                dataPtr[dataLen++] = CMD_P2P_CONNECTION_RESPONSE;
    b9d8:	2391      	movs	r3, #145	; 0x91
    b9da:	7023      	strb	r3, [r4, #0]
                                dataPtr[dataLen++] = status;
    b9dc:	3362      	adds	r3, #98	; 0x62
    b9de:	7063      	strb	r3, [r4, #1]
    b9e0:	2602      	movs	r6, #2
    b9e2:	e7c1      	b.n	b968 <P2PTasks+0x24c>
                                    dataPtr[dataLen++] = P2PCapacityInfo;
    b9e4:	4b2b      	ldr	r3, [pc, #172]	; (ba94 <P2PTasks+0x378>)
    b9e6:	781b      	ldrb	r3, [r3, #0]
    b9e8:	7083      	strb	r3, [r0, #2]
                                            dataPtr[dataLen++] = AdditionalNodeID[i];
    b9ea:	4b2b      	ldr	r3, [pc, #172]	; (ba98 <P2PTasks+0x37c>)
    b9ec:	781b      	ldrb	r3, [r3, #0]
    b9ee:	70c3      	strb	r3, [r0, #3]
    b9f0:	3602      	adds	r6, #2
    b9f2:	e7b9      	b.n	b968 <P2PTasks+0x24c>
                                delay_s(i % (CONNECTION_INTERVAL-1));
    b9f4:	2001      	movs	r0, #1
    b9f6:	4b29      	ldr	r3, [pc, #164]	; (ba9c <P2PTasks+0x380>)
    b9f8:	4798      	blx	r3
    b9fa:	e7ca      	b.n	b992 <P2PTasks+0x276>
                                MiMAC_DiscardPacket();
    b9fc:	4b19      	ldr	r3, [pc, #100]	; (ba64 <P2PTasks+0x348>)
    b9fe:	4798      	blx	r3
                                break;
    ba00:	e1c0      	b.n	bd84 <P2PTasks+0x668>
    ba02:	46c0      	nop			; (mov r8, r8)
    ba04:	0000a959 	.word	0x0000a959
    ba08:	200028bc 	.word	0x200028bc
    ba0c:	0000b5bd 	.word	0x0000b5bd
    ba10:	000c8708 	.word	0x000c8708
    ba14:	20000494 	.word	0x20000494
    ba18:	2000047f 	.word	0x2000047f
    ba1c:	20002b3c 	.word	0x20002b3c
    ba20:	200028b8 	.word	0x200028b8
    ba24:	0000c41d 	.word	0x0000c41d
    ba28:	0000c47d 	.word	0x0000c47d
    ba2c:	016e3600 	.word	0x016e3600
    ba30:	00000223 	.word	0x00000223
    ba34:	0000a205 	.word	0x0000a205
    ba38:	00019130 	.word	0x00019130
    ba3c:	000170e5 	.word	0x000170e5
    ba40:	0000a249 	.word	0x0000a249
    ba44:	2000289e 	.word	0x2000289e
    ba48:	2000287c 	.word	0x2000287c
    ba4c:	2000289c 	.word	0x2000289c
    ba50:	20002b28 	.word	0x20002b28
    ba54:	20002b38 	.word	0x20002b38
    ba58:	2000001d 	.word	0x2000001d
    ba5c:	20002ae8 	.word	0x20002ae8
    ba60:	20000498 	.word	0x20000498
    ba64:	0000a1c9 	.word	0x0000a1c9
    ba68:	2000001c 	.word	0x2000001c
    ba6c:	0000ffff 	.word	0x0000ffff
    ba70:	20002894 	.word	0x20002894
    ba74:	0000b471 	.word	0x0000b471
    ba78:	0000c1dd 	.word	0x0000c1dd
    ba7c:	0000ad79 	.word	0x0000ad79
    ba80:	000138b9 	.word	0x000138b9
    ba84:	00013a8d 	.word	0x00013a8d
    ba88:	00004719 	.word	0x00004719
    ba8c:	0000adb5 	.word	0x0000adb5
    ba90:	0000af21 	.word	0x0000af21
    ba94:	20002891 	.word	0x20002891
    ba98:	20000018 	.word	0x20000018
    ba9c:	000046ed 	.word	0x000046ed
                            dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_P2P_ACTIVE_SCAN_RESPONSE));
    baa0:	2010      	movs	r0, #16
    baa2:	4bc6      	ldr	r3, [pc, #792]	; (bdbc <P2PTasks+0x6a0>)
    baa4:	4798      	blx	r3
    baa6:	1e04      	subs	r4, r0, #0
                            if (NULL == dataPtr)
    baa8:	d100      	bne.n	baac <P2PTasks+0x390>
    baaa:	e661      	b.n	b770 <P2PTasks+0x54>
                            dataPtr[dataLen++] = CMD_P2P_ACTIVE_SCAN_RESPONSE;
    baac:	2397      	movs	r3, #151	; 0x97
    baae:	7003      	strb	r3, [r0, #0]
                            dataPtr[dataLen++] = P2PCapacityInfo;
    bab0:	4bc3      	ldr	r3, [pc, #780]	; (bdc0 <P2PTasks+0x6a4>)
    bab2:	781b      	ldrb	r3, [r3, #0]
    bab4:	7043      	strb	r3, [r0, #1]
                                    dataPtr[dataLen++] = (AdditionalNodeID[i]);
    bab6:	4bc3      	ldr	r3, [pc, #780]	; (bdc4 <P2PTasks+0x6a8>)
    bab8:	781b      	ldrb	r3, [r3, #0]
    baba:	7083      	strb	r3, [r0, #2]
                            MiMAC_DiscardPacket();
    babc:	4bc2      	ldr	r3, [pc, #776]	; (bdc8 <P2PTasks+0x6ac>)
    babe:	4798      	blx	r3
							i = PHY_RandomReq();
    bac0:	4bc2      	ldr	r3, [pc, #776]	; (bdcc <P2PTasks+0x6b0>)
    bac2:	4798      	blx	r3
							delay_ms(i*100);
    bac4:	b2c3      	uxtb	r3, r0
    bac6:	2064      	movs	r0, #100	; 0x64
    bac8:	4358      	muls	r0, r3
    baca:	2800      	cmp	r0, #0
    bacc:	d016      	beq.n	bafc <P2PTasks+0x3e0>
    bace:	4bc0      	ldr	r3, [pc, #768]	; (bdd0 <P2PTasks+0x6b4>)
    bad0:	4798      	blx	r3
                                    SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn, 
    bad2:	4bc0      	ldr	r3, [pc, #768]	; (bdd4 <P2PTasks+0x6b8>)
    bad4:	685a      	ldr	r2, [r3, #4]
    bad6:	8859      	ldrh	r1, [r3, #2]
    bad8:	48bf      	ldr	r0, [pc, #764]	; (bdd8 <P2PTasks+0x6bc>)
    bada:	9005      	str	r0, [sp, #20]
    badc:	2001      	movs	r0, #1
    bade:	9004      	str	r0, [sp, #16]
    bae0:	2000      	movs	r0, #0
    bae2:	9003      	str	r0, [sp, #12]
    bae4:	9402      	str	r4, [sp, #8]
    bae6:	3003      	adds	r0, #3
    bae8:	9001      	str	r0, [sp, #4]
    baea:	781b      	ldrb	r3, [r3, #0]
    baec:	071b      	lsls	r3, r3, #28
    baee:	0fdb      	lsrs	r3, r3, #31
    baf0:	9300      	str	r3, [sp, #0]
    baf2:	2301      	movs	r3, #1
    baf4:	2000      	movs	r0, #0
    baf6:	4cb9      	ldr	r4, [pc, #740]	; (bddc <P2PTasks+0x6c0>)
    baf8:	47a0      	blx	r4
                        break;
    bafa:	e143      	b.n	bd84 <P2PTasks+0x668>
							delay_ms(i*100);
    bafc:	2001      	movs	r0, #1
    bafe:	4bb8      	ldr	r3, [pc, #736]	; (bde0 <P2PTasks+0x6c4>)
    bb00:	4798      	blx	r3
    bb02:	e7e6      	b.n	bad2 <P2PTasks+0x3b6>
                            dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_P2P_CONNECTION_REMOVAL_RESPONSE));
    bb04:	2010      	movs	r0, #16
    bb06:	4bad      	ldr	r3, [pc, #692]	; (bdbc <P2PTasks+0x6a0>)
    bb08:	4798      	blx	r3
    bb0a:	4680      	mov	r8, r0
                            if (NULL == dataPtr)
    bb0c:	2800      	cmp	r0, #0
    bb0e:	d100      	bne.n	bb12 <P2PTasks+0x3f6>
    bb10:	e62e      	b.n	b770 <P2PTasks+0x54>
                            dataPtr[dataLen++] = CMD_P2P_CONNECTION_REMOVAL_RESPONSE;
    bb12:	2392      	movs	r3, #146	; 0x92
    bb14:	7003      	strb	r3, [r0, #0]
                                    if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    bb16:	4baf      	ldr	r3, [pc, #700]	; (bdd4 <P2PTasks+0x6b8>)
    bb18:	685b      	ldr	r3, [r3, #4]
    bb1a:	9307      	str	r3, [sp, #28]
    bb1c:	4eb1      	ldr	r6, [pc, #708]	; (bde4 <P2PTasks+0x6c8>)
    bb1e:	2700      	movs	r7, #0
                            for(i = 0; i < CONNECTION_SIZE; i++)
    bb20:	2400      	movs	r4, #0
                                if( ConnectionTable[i].status.bits.isValid )
    bb22:	0035      	movs	r5, r6
    bb24:	e006      	b.n	bb34 <P2PTasks+0x418>
                            for(i = 0; i < CONNECTION_SIZE; i++)
    bb26:	3401      	adds	r4, #1
    bb28:	b2e4      	uxtb	r4, r4
    bb2a:	3701      	adds	r7, #1
    bb2c:	360a      	adds	r6, #10
    bb2e:	2c05      	cmp	r4, #5
    bb30:	d100      	bne.n	bb34 <P2PTasks+0x418>
    bb32:	e179      	b.n	be28 <P2PTasks+0x70c>
                                if( ConnectionTable[i].status.bits.isValid )
    bb34:	9706      	str	r7, [sp, #24]
    bb36:	00bb      	lsls	r3, r7, #2
    bb38:	19db      	adds	r3, r3, r7
    bb3a:	005b      	lsls	r3, r3, #1
    bb3c:	18eb      	adds	r3, r5, r3
    bb3e:	7a1b      	ldrb	r3, [r3, #8]
    bb40:	09db      	lsrs	r3, r3, #7
    bb42:	d0f0      	beq.n	bb26 <P2PTasks+0x40a>
                                    if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    bb44:	0031      	movs	r1, r6
    bb46:	9807      	ldr	r0, [sp, #28]
    bb48:	4ba7      	ldr	r3, [pc, #668]	; (bde8 <P2PTasks+0x6cc>)
    bb4a:	4798      	blx	r3
    bb4c:	2800      	cmp	r0, #0
    bb4e:	d0ea      	beq.n	bb26 <P2PTasks+0x40a>
                                        ConnectionTable[i].status.Val = 0;
    bb50:	9a06      	ldr	r2, [sp, #24]
    bb52:	0093      	lsls	r3, r2, #2
    bb54:	189d      	adds	r5, r3, r2
    bb56:	006d      	lsls	r5, r5, #1
    bb58:	4ba2      	ldr	r3, [pc, #648]	; (bde4 <P2PTasks+0x6c8>)
    bb5a:	195d      	adds	r5, r3, r5
    bb5c:	2300      	movs	r3, #0
    bb5e:	722b      	strb	r3, [r5, #8]
                                        dataPtr[dataLen++] = STATUS_SUCCESS;
    bb60:	4642      	mov	r2, r8
    bb62:	7053      	strb	r3, [r2, #1]
                            MiMAC_DiscardPacket();
    bb64:	4b98      	ldr	r3, [pc, #608]	; (bdc8 <P2PTasks+0x6ac>)
    bb66:	4798      	blx	r3
                            if( i == CONNECTION_SIZE ) 
    bb68:	2c05      	cmp	r4, #5
    bb6a:	d001      	beq.n	bb70 <P2PTasks+0x454>
                                        dataPtr[dataLen++] = STATUS_SUCCESS;
    bb6c:	2402      	movs	r4, #2
    bb6e:	e162      	b.n	be36 <P2PTasks+0x71a>
    bb70:	2302      	movs	r3, #2
    bb72:	e15c      	b.n	be2e <P2PTasks+0x712>
                            switch( rxMessage.Payload[1] )
    bb74:	786b      	ldrb	r3, [r5, #1]
    bb76:	2b00      	cmp	r3, #0
    bb78:	d014      	beq.n	bba4 <P2PTasks+0x488>
    bb7a:	2b01      	cmp	r3, #1
    bb7c:	d10f      	bne.n	bb9e <P2PTasks+0x482>
                                    if (EstConfCallback)
    bb7e:	4b9b      	ldr	r3, [pc, #620]	; (bdec <P2PTasks+0x6d0>)
    bb80:	681b      	ldr	r3, [r3, #0]
    bb82:	2b00      	cmp	r3, #0
    bb84:	d004      	beq.n	bb90 <P2PTasks+0x474>
                                        EstConfCallback(ALREADY_EXISTS);
    bb86:	2006      	movs	r0, #6
    bb88:	4798      	blx	r3
                                        EstConfCallback = NULL;
    bb8a:	2200      	movs	r2, #0
    bb8c:	4b97      	ldr	r3, [pc, #604]	; (bdec <P2PTasks+0x6d0>)
    bb8e:	601a      	str	r2, [r3, #0]
                                        if( myPANID.Val == 0xFFFF )
    bb90:	4b97      	ldr	r3, [pc, #604]	; (bdf0 <P2PTasks+0x6d4>)
    bb92:	881a      	ldrh	r2, [r3, #0]
    bb94:	4b97      	ldr	r3, [pc, #604]	; (bdf4 <P2PTasks+0x6d8>)
    bb96:	429a      	cmp	r2, r3
    bb98:	d00e      	beq.n	bbb8 <P2PTasks+0x49c>
                                    AddConnection();
    bb9a:	4b97      	ldr	r3, [pc, #604]	; (bdf8 <P2PTasks+0x6dc>)
    bb9c:	4798      	blx	r3
                        MiMAC_DiscardPacket();
    bb9e:	4b8a      	ldr	r3, [pc, #552]	; (bdc8 <P2PTasks+0x6ac>)
    bba0:	4798      	blx	r3
                        break; 
    bba2:	e0ef      	b.n	bd84 <P2PTasks+0x668>
                                    if (EstConfCallback)
    bba4:	4b91      	ldr	r3, [pc, #580]	; (bdec <P2PTasks+0x6d0>)
    bba6:	681b      	ldr	r3, [r3, #0]
    bba8:	2b00      	cmp	r3, #0
    bbaa:	d0f1      	beq.n	bb90 <P2PTasks+0x474>
                                        EstConfCallback(SUCCESS);
    bbac:	2000      	movs	r0, #0
    bbae:	4798      	blx	r3
                                        EstConfCallback = NULL;
    bbb0:	2200      	movs	r2, #0
    bbb2:	4b8e      	ldr	r3, [pc, #568]	; (bdec <P2PTasks+0x6d0>)
    bbb4:	601a      	str	r2, [r3, #0]
    bbb6:	e7eb      	b.n	bb90 <P2PTasks+0x474>
                                            myPANID.Val = rxMessage.SourcePANID.Val;
    bbb8:	498d      	ldr	r1, [pc, #564]	; (bdf0 <P2PTasks+0x6d4>)
    bbba:	4b86      	ldr	r3, [pc, #536]	; (bdd4 <P2PTasks+0x6b8>)
    bbbc:	885b      	ldrh	r3, [r3, #2]
    bbbe:	800b      	strh	r3, [r1, #0]
                                                uint16_t tmp = 0xFFFF;
    bbc0:	201e      	movs	r0, #30
    bbc2:	ab02      	add	r3, sp, #8
    bbc4:	469c      	mov	ip, r3
    bbc6:	4460      	add	r0, ip
    bbc8:	2301      	movs	r3, #1
    bbca:	425b      	negs	r3, r3
    bbcc:	8003      	strh	r3, [r0, #0]
                                                MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    bbce:	4b8b      	ldr	r3, [pc, #556]	; (bdfc <P2PTasks+0x6e0>)
    bbd0:	4798      	blx	r3
    bbd2:	e7e2      	b.n	bb9a <P2PTasks+0x47e>
                                P2PStatus.bits.Resync = 0;   
    bbd4:	4a8a      	ldr	r2, [pc, #552]	; (be00 <P2PTasks+0x6e4>)
    bbd6:	7813      	ldrb	r3, [r2, #0]
    bbd8:	2120      	movs	r1, #32
    bbda:	438b      	bics	r3, r1
    bbdc:	7013      	strb	r3, [r2, #0]
                            MiMAC_DiscardPacket(); 
    bbde:	4b7a      	ldr	r3, [pc, #488]	; (bdc8 <P2PTasks+0x6ac>)
    bbe0:	4798      	blx	r3
                        break;                
    bbe2:	e0cf      	b.n	bd84 <P2PTasks+0x668>
                                    for(; i < ActiveScanResultIndex; i++)
    bbe4:	3401      	adds	r4, #1
    bbe6:	b2e4      	uxtb	r4, r4
    bbe8:	3610      	adds	r6, #16
    bbea:	4554      	cmp	r4, sl
    bbec:	d00d      	beq.n	bc0a <P2PTasks+0x4ee>
                                        if( (ActiveScanResults[i].Channel == currentChannel) &&
    bbee:	7833      	ldrb	r3, [r6, #0]
    bbf0:	455b      	cmp	r3, fp
    bbf2:	d1f7      	bne.n	bbe4 <P2PTasks+0x4c8>
    bbf4:	8973      	ldrh	r3, [r6, #10]
    bbf6:	42bb      	cmp	r3, r7
    bbf8:	d1f4      	bne.n	bbe4 <P2PTasks+0x4c8>
                                            isSameAddress(ActiveScanResults[i].Address, rxMessage.SourceAddress)
    bbfa:	1c70      	adds	r0, r6, #1
    bbfc:	9906      	ldr	r1, [sp, #24]
    bbfe:	4b7a      	ldr	r3, [pc, #488]	; (bde8 <P2PTasks+0x6cc>)
    bc00:	4798      	blx	r3
                                            (ActiveScanResults[i].PANID.Val == rxMessage.SourcePANID.Val) &&
    bc02:	2800      	cmp	r0, #0
    bc04:	d0ee      	beq.n	bbe4 <P2PTasks+0x4c8>
                                    if( i == ActiveScanResultIndex && (i < ACTIVE_SCAN_RESULT_SIZE))
    bc06:	45a2      	cmp	sl, r4
    bc08:	d1e9      	bne.n	bbde <P2PTasks+0x4c2>
    bc0a:	2c03      	cmp	r4, #3
    bc0c:	d8e7      	bhi.n	bbde <P2PTasks+0x4c2>
                                        ActiveScanResults[ActiveScanResultIndex].Channel = currentChannel;
    bc0e:	497d      	ldr	r1, [pc, #500]	; (be04 <P2PTasks+0x6e8>)
    bc10:	4653      	mov	r3, sl
    bc12:	011b      	lsls	r3, r3, #4
    bc14:	4a7c      	ldr	r2, [pc, #496]	; (be08 <P2PTasks+0x6ec>)
    bc16:	7812      	ldrb	r2, [r2, #0]
    bc18:	545a      	strb	r2, [r3, r1]
                                        ActiveScanResults[ActiveScanResultIndex].RSSIValue = rxMessage.PacketRSSI;
    bc1a:	18ca      	adds	r2, r1, r3
    bc1c:	4648      	mov	r0, r9
    bc1e:	7310      	strb	r0, [r2, #12]
                                        ActiveScanResults[ActiveScanResultIndex].LQIValue = rxMessage.PacketLQI;
    bc20:	4640      	mov	r0, r8
    bc22:	7350      	strb	r0, [r2, #13]
                                            ActiveScanResults[ActiveScanResultIndex].PANID.Val = rxMessage.SourcePANID.Val;
    bc24:	8157      	strh	r7, [r2, #10]
                                            ActiveScanResults[ActiveScanResultIndex].Address[i] = rxMessage.SourceAddress[i];
    bc26:	4a6b      	ldr	r2, [pc, #428]	; (bdd4 <P2PTasks+0x6b8>)
    bc28:	6852      	ldr	r2, [r2, #4]
    bc2a:	3301      	adds	r3, #1
    bc2c:	185b      	adds	r3, r3, r1
    bc2e:	0010      	movs	r0, r2
    bc30:	3008      	adds	r0, #8
    bc32:	7811      	ldrb	r1, [r2, #0]
    bc34:	7019      	strb	r1, [r3, #0]
    bc36:	3201      	adds	r2, #1
    bc38:	3301      	adds	r3, #1
                                        for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    bc3a:	4290      	cmp	r0, r2
    bc3c:	d1f9      	bne.n	bc32 <P2PTasks+0x516>
                                        ActiveScanResults[ActiveScanResultIndex].Capability.Val = rxMessage.Payload[1];
    bc3e:	786a      	ldrb	r2, [r5, #1]
    bc40:	4653      	mov	r3, sl
    bc42:	0119      	lsls	r1, r3, #4
    bc44:	4b6f      	ldr	r3, [pc, #444]	; (be04 <P2PTasks+0x6e8>)
    bc46:	185b      	adds	r3, r3, r1
    bc48:	739a      	strb	r2, [r3, #14]
                                                ActiveScanResults[ActiveScanResultIndex].PeerInfo[i] = rxMessage.Payload[2+i];
    bc4a:	78aa      	ldrb	r2, [r5, #2]
    bc4c:	73da      	strb	r2, [r3, #15]
                                        ActiveScanResultIndex++;
    bc4e:	4653      	mov	r3, sl
    bc50:	3301      	adds	r3, #1
    bc52:	4a6e      	ldr	r2, [pc, #440]	; (be0c <P2PTasks+0x6f0>)
    bc54:	7013      	strb	r3, [r2, #0]
    bc56:	e7c2      	b.n	bbde <P2PTasks+0x4c2>
                            if( rxMessage.Payload[1] == STATUS_SUCCESS )
    bc58:	786b      	ldrb	r3, [r5, #1]
    bc5a:	2b00      	cmp	r3, #0
    bc5c:	d11e      	bne.n	bc9c <P2PTasks+0x580>
                                        if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    bc5e:	4b5d      	ldr	r3, [pc, #372]	; (bdd4 <P2PTasks+0x6b8>)
    bc60:	685b      	ldr	r3, [r3, #4]
    bc62:	9306      	str	r3, [sp, #24]
    bc64:	4e5f      	ldr	r6, [pc, #380]	; (bde4 <P2PTasks+0x6c8>)
    bc66:	2700      	movs	r7, #0
                                    if( ConnectionTable[i].status.bits.isValid )
    bc68:	0035      	movs	r5, r6
    bc6a:	e003      	b.n	bc74 <P2PTasks+0x558>
    bc6c:	3701      	adds	r7, #1
    bc6e:	360a      	adds	r6, #10
                                for(i = 0; i < CONNECTION_SIZE; i++)
    bc70:	2f05      	cmp	r7, #5
    bc72:	d013      	beq.n	bc9c <P2PTasks+0x580>
                                    if( ConnectionTable[i].status.bits.isValid )
    bc74:	00bb      	lsls	r3, r7, #2
    bc76:	19db      	adds	r3, r3, r7
    bc78:	005b      	lsls	r3, r3, #1
    bc7a:	18eb      	adds	r3, r5, r3
    bc7c:	7a1b      	ldrb	r3, [r3, #8]
    bc7e:	09db      	lsrs	r3, r3, #7
    bc80:	d0f4      	beq.n	bc6c <P2PTasks+0x550>
                                        if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    bc82:	0031      	movs	r1, r6
    bc84:	9806      	ldr	r0, [sp, #24]
    bc86:	4b58      	ldr	r3, [pc, #352]	; (bde8 <P2PTasks+0x6cc>)
    bc88:	4798      	blx	r3
    bc8a:	2800      	cmp	r0, #0
    bc8c:	d0ee      	beq.n	bc6c <P2PTasks+0x550>
                                            ConnectionTable[i].status.Val = 0;
    bc8e:	00bb      	lsls	r3, r7, #2
    bc90:	19dc      	adds	r4, r3, r7
    bc92:	0064      	lsls	r4, r4, #1
    bc94:	4b53      	ldr	r3, [pc, #332]	; (bde4 <P2PTasks+0x6c8>)
    bc96:	191c      	adds	r4, r3, r4
    bc98:	2300      	movs	r3, #0
    bc9a:	7223      	strb	r3, [r4, #8]
                        MiMAC_DiscardPacket();
    bc9c:	4b4a      	ldr	r3, [pc, #296]	; (bdc8 <P2PTasks+0x6ac>)
    bc9e:	4798      	blx	r3
                        break;
    bca0:	e070      	b.n	bd84 <P2PTasks+0x668>
                            dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_TIME_SYNC_DATA_PACKET));
    bca2:	20e0      	movs	r0, #224	; 0xe0
    bca4:	4b45      	ldr	r3, [pc, #276]	; (bdbc <P2PTasks+0x6a0>)
    bca6:	4798      	blx	r3
    bca8:	1e04      	subs	r4, r0, #0
                            if (NULL == dataPtr)
    bcaa:	d100      	bne.n	bcae <P2PTasks+0x592>
    bcac:	e560      	b.n	b770 <P2PTasks+0x54>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    bcae:	4b49      	ldr	r3, [pc, #292]	; (bdd4 <P2PTasks+0x6b8>)
    bcb0:	685d      	ldr	r5, [r3, #4]
                                if( indirectMessages[i].flags.bits.isValid )
    bcb2:	4b57      	ldr	r3, [pc, #348]	; (be10 <P2PTasks+0x6f4>)
    bcb4:	7b9b      	ldrb	r3, [r3, #14]
    bcb6:	07db      	lsls	r3, r3, #31
    bcb8:	d505      	bpl.n	bcc6 <P2PTasks+0x5aa>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    bcba:	0029      	movs	r1, r5
    bcbc:	4855      	ldr	r0, [pc, #340]	; (be14 <P2PTasks+0x6f8>)
    bcbe:	4b4a      	ldr	r3, [pc, #296]	; (bde8 <P2PTasks+0x6cc>)
    bcc0:	4798      	blx	r3
    bcc2:	2800      	cmp	r0, #0
    bcc4:	d14c      	bne.n	bd60 <P2PTasks+0x644>
                                if( indirectMessages[i].flags.bits.isValid )
    bcc6:	2391      	movs	r3, #145	; 0x91
    bcc8:	005b      	lsls	r3, r3, #1
    bcca:	4a51      	ldr	r2, [pc, #324]	; (be10 <P2PTasks+0x6f4>)
    bccc:	5cd3      	ldrb	r3, [r2, r3]
    bcce:	07db      	lsls	r3, r3, #31
    bcd0:	d505      	bpl.n	bcde <P2PTasks+0x5c2>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    bcd2:	0029      	movs	r1, r5
    bcd4:	4850      	ldr	r0, [pc, #320]	; (be18 <P2PTasks+0x6fc>)
    bcd6:	4b44      	ldr	r3, [pc, #272]	; (bde8 <P2PTasks+0x6cc>)
    bcd8:	4798      	blx	r3
    bcda:	2800      	cmp	r0, #0
    bcdc:	d110      	bne.n	bd00 <P2PTasks+0x5e4>
                                        SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, isCommand, false, 
    bcde:	4b3d      	ldr	r3, [pc, #244]	; (bdd4 <P2PTasks+0x6b8>)
    bce0:	8859      	ldrh	r1, [r3, #2]
    bce2:	4b4e      	ldr	r3, [pc, #312]	; (be1c <P2PTasks+0x700>)
    bce4:	9305      	str	r3, [sp, #20]
    bce6:	2300      	movs	r3, #0
    bce8:	9304      	str	r3, [sp, #16]
    bcea:	9303      	str	r3, [sp, #12]
    bcec:	9402      	str	r4, [sp, #8]
    bcee:	9301      	str	r3, [sp, #4]
    bcf0:	9300      	str	r3, [sp, #0]
    bcf2:	002a      	movs	r2, r5
    bcf4:	2000      	movs	r0, #0
    bcf6:	4c39      	ldr	r4, [pc, #228]	; (bddc <P2PTasks+0x6c0>)
    bcf8:	47a0      	blx	r4
                            MiMAC_DiscardPacket();
    bcfa:	4b33      	ldr	r3, [pc, #204]	; (bdc8 <P2PTasks+0x6ac>)
    bcfc:	4798      	blx	r3
                        break;
    bcfe:	e041      	b.n	bd84 <P2PTasks+0x668>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    bd00:	4a45      	ldr	r2, [pc, #276]	; (be18 <P2PTasks+0x6fc>)
                                if( indirectMessages[i].flags.bits.isValid )
    bd02:	2001      	movs	r0, #1
                                        for(j = 0; j < indirectMessages[i].PayLoadSize; j++)
    bd04:	218a      	movs	r1, #138	; 0x8a
    bd06:	0049      	lsls	r1, r1, #1
    bd08:	4341      	muls	r1, r0
    bd0a:	4b41      	ldr	r3, [pc, #260]	; (be10 <P2PTasks+0x6f4>)
    bd0c:	185b      	adds	r3, r3, r1
    bd0e:	7bdb      	ldrb	r3, [r3, #15]
    bd10:	2b00      	cmp	r3, #0
    bd12:	d00e      	beq.n	bd32 <P2PTasks+0x616>
    bd14:	2600      	movs	r6, #0
                                            dataPtr[dataLen++] =indirectMessages[i].PayLoad[j];
    bd16:	000b      	movs	r3, r1
    bd18:	493d      	ldr	r1, [pc, #244]	; (be10 <P2PTasks+0x6f4>)
    bd1a:	18c9      	adds	r1, r1, r3
                                        for(j = 0; j < indirectMessages[i].PayLoadSize; j++)
    bd1c:	000f      	movs	r7, r1
    bd1e:	370f      	adds	r7, #15
                                            dataPtr[dataLen++] =indirectMessages[i].PayLoad[j];
    bd20:	1c73      	adds	r3, r6, #1
    bd22:	b2db      	uxtb	r3, r3
    bd24:	198d      	adds	r5, r1, r6
    bd26:	7c2d      	ldrb	r5, [r5, #16]
    bd28:	55a5      	strb	r5, [r4, r6]
    bd2a:	001e      	movs	r6, r3
                                        for(j = 0; j < indirectMessages[i].PayLoadSize; j++)
    bd2c:	783d      	ldrb	r5, [r7, #0]
    bd2e:	429d      	cmp	r5, r3
    bd30:	d8f6      	bhi.n	bd20 <P2PTasks+0x604>
                                            SendPacket(false, indirectMessages[i].DestPANID, indirectMessages[i].DestAddress.DestLongAddress, isCommand, (bool)indirectMessages[i].flags.bits.isSecured,
    bd32:	258a      	movs	r5, #138	; 0x8a
    bd34:	006d      	lsls	r5, r5, #1
    bd36:	4368      	muls	r0, r5
    bd38:	4d35      	ldr	r5, [pc, #212]	; (be10 <P2PTasks+0x6f4>)
    bd3a:	182d      	adds	r5, r5, r0
    bd3c:	88a9      	ldrh	r1, [r5, #4]
    bd3e:	4837      	ldr	r0, [pc, #220]	; (be1c <P2PTasks+0x700>)
    bd40:	9005      	str	r0, [sp, #20]
    bd42:	2600      	movs	r6, #0
    bd44:	9604      	str	r6, [sp, #16]
    bd46:	9603      	str	r6, [sp, #12]
    bd48:	9402      	str	r4, [sp, #8]
    bd4a:	9301      	str	r3, [sp, #4]
    bd4c:	7bab      	ldrb	r3, [r5, #14]
    bd4e:	071b      	lsls	r3, r3, #28
    bd50:	0fdb      	lsrs	r3, r3, #31
    bd52:	9300      	str	r3, [sp, #0]
    bd54:	2300      	movs	r3, #0
    bd56:	2000      	movs	r0, #0
    bd58:	4c20      	ldr	r4, [pc, #128]	; (bddc <P2PTasks+0x6c0>)
    bd5a:	47a0      	blx	r4
                                        indirectMessages[i].flags.Val = 0;   
    bd5c:	73ae      	strb	r6, [r5, #14]
                                        goto END_OF_SENDING_INDIRECT_MESSAGE;    
    bd5e:	e7cc      	b.n	bcfa <P2PTasks+0x5de>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    bd60:	4a2c      	ldr	r2, [pc, #176]	; (be14 <P2PTasks+0x6f8>)
                                if( indirectMessages[i].flags.bits.isValid )
    bd62:	2000      	movs	r0, #0
    bd64:	e7ce      	b.n	bd04 <P2PTasks+0x5e8>
            P2PStatus.bits.RxHasUserData = 1;
    bd66:	4c26      	ldr	r4, [pc, #152]	; (be00 <P2PTasks+0x6e4>)
    bd68:	7823      	ldrb	r3, [r4, #0]
    bd6a:	2208      	movs	r2, #8
    bd6c:	4313      	orrs	r3, r2
    bd6e:	7023      	strb	r3, [r4, #0]
			pktRxcallback(&rxMessage);
    bd70:	4b2b      	ldr	r3, [pc, #172]	; (be20 <P2PTasks+0x704>)
    bd72:	681b      	ldr	r3, [r3, #0]
    bd74:	4817      	ldr	r0, [pc, #92]	; (bdd4 <P2PTasks+0x6b8>)
    bd76:	4798      	blx	r3
			P2PStatus.bits.RxHasUserData = 0;
    bd78:	7823      	ldrb	r3, [r4, #0]
    bd7a:	2208      	movs	r2, #8
    bd7c:	4393      	bics	r3, r2
    bd7e:	7023      	strb	r3, [r4, #0]
			MiMAC_DiscardPacket();
    bd80:	4b11      	ldr	r3, [pc, #68]	; (bdc8 <P2PTasks+0x6ac>)
    bd82:	4798      	blx	r3
        if( rxMessage.PayloadSize == 0  || P2PStatus.bits.SearchConnection || P2PStatus.bits.Resync )
    bd84:	4b13      	ldr	r3, [pc, #76]	; (bdd4 <P2PTasks+0x6b8>)
    bd86:	7b1b      	ldrb	r3, [r3, #12]
    bd88:	2b00      	cmp	r3, #0
    bd8a:	d008      	beq.n	bd9e <P2PTasks+0x682>
    bd8c:	4b1c      	ldr	r3, [pc, #112]	; (be00 <P2PTasks+0x6e4>)
    bd8e:	781b      	ldrb	r3, [r3, #0]
    bd90:	06db      	lsls	r3, r3, #27
    bd92:	d404      	bmi.n	bd9e <P2PTasks+0x682>
    bd94:	4b1a      	ldr	r3, [pc, #104]	; (be00 <P2PTasks+0x6e4>)
    bd96:	781b      	ldrb	r3, [r3, #0]
    bd98:	069b      	lsls	r3, r3, #26
    bd9a:	d400      	bmi.n	bd9e <P2PTasks+0x682>
    bd9c:	e4e8      	b.n	b770 <P2PTasks+0x54>
            P2PStatus.bits.RxHasUserData = 0;
    bd9e:	4a18      	ldr	r2, [pc, #96]	; (be00 <P2PTasks+0x6e4>)
    bda0:	7813      	ldrb	r3, [r2, #0]
    bda2:	2108      	movs	r1, #8
    bda4:	438b      	bics	r3, r1
    bda6:	7013      	strb	r3, [r2, #0]
            MiMAC_DiscardPacket();
    bda8:	4b07      	ldr	r3, [pc, #28]	; (bdc8 <P2PTasks+0x6ac>)
    bdaa:	4798      	blx	r3
    bdac:	e4e0      	b.n	b770 <P2PTasks+0x54>
                                if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    bdae:	4b1d      	ldr	r3, [pc, #116]	; (be24 <P2PTasks+0x708>)
    bdb0:	781b      	ldrb	r3, [r3, #0]
    bdb2:	2b01      	cmp	r3, #1
    bdb4:	d100      	bne.n	bdb8 <P2PTasks+0x69c>
    bdb6:	e609      	b.n	b9cc <P2PTasks+0x2b0>
                                        status = STATUS_NOT_SAME_PAN;
    bdb8:	25f2      	movs	r5, #242	; 0xf2
    bdba:	e5c9      	b.n	b950 <P2PTasks+0x234>
    bdbc:	0000c1dd 	.word	0x0000c1dd
    bdc0:	20002891 	.word	0x20002891
    bdc4:	20000018 	.word	0x20000018
    bdc8:	0000a1c9 	.word	0x0000a1c9
    bdcc:	0000ad79 	.word	0x0000ad79
    bdd0:	00004719 	.word	0x00004719
    bdd4:	20002b28 	.word	0x20002b28
    bdd8:	0000adb5 	.word	0x0000adb5
    bddc:	0000af21 	.word	0x0000af21
    bde0:	000046ed 	.word	0x000046ed
    bde4:	20002844 	.word	0x20002844
    bde8:	0000aff5 	.word	0x0000aff5
    bdec:	20002898 	.word	0x20002898
    bdf0:	20002894 	.word	0x20002894
    bdf4:	0000ffff 	.word	0x0000ffff
    bdf8:	0000b471 	.word	0x0000b471
    bdfc:	0000999d 	.word	0x0000999d
    be00:	200028b8 	.word	0x200028b8
    be04:	20002ae8 	.word	0x20002ae8
    be08:	2000001d 	.word	0x2000001d
    be0c:	20002b38 	.word	0x20002b38
    be10:	200028bc 	.word	0x200028bc
    be14:	200028c2 	.word	0x200028c2
    be18:	200029d6 	.word	0x200029d6
    be1c:	00007e31 	.word	0x00007e31
    be20:	20000498 	.word	0x20000498
    be24:	2000001c 	.word	0x2000001c
                            MiMAC_DiscardPacket();
    be28:	4b0d      	ldr	r3, [pc, #52]	; (be60 <P2PTasks+0x744>)
    be2a:	4798      	blx	r3
                            dataPtr[dataLen++] = CMD_P2P_CONNECTION_REMOVAL_RESPONSE;
    be2c:	2301      	movs	r3, #1
                                dataPtr[dataLen++] = STATUS_ENTRY_NOT_EXIST;
    be2e:	1c5c      	adds	r4, r3, #1
    be30:	22f0      	movs	r2, #240	; 0xf0
    be32:	4641      	mov	r1, r8
    be34:	54ca      	strb	r2, [r1, r3]
                                    SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn, 
    be36:	4b0b      	ldr	r3, [pc, #44]	; (be64 <P2PTasks+0x748>)
    be38:	685a      	ldr	r2, [r3, #4]
    be3a:	8859      	ldrh	r1, [r3, #2]
    be3c:	480a      	ldr	r0, [pc, #40]	; (be68 <P2PTasks+0x74c>)
    be3e:	9005      	str	r0, [sp, #20]
    be40:	2001      	movs	r0, #1
    be42:	9004      	str	r0, [sp, #16]
    be44:	2000      	movs	r0, #0
    be46:	9003      	str	r0, [sp, #12]
    be48:	4640      	mov	r0, r8
    be4a:	9002      	str	r0, [sp, #8]
    be4c:	9401      	str	r4, [sp, #4]
    be4e:	781b      	ldrb	r3, [r3, #0]
    be50:	071b      	lsls	r3, r3, #28
    be52:	0fdb      	lsrs	r3, r3, #31
    be54:	9300      	str	r3, [sp, #0]
    be56:	2301      	movs	r3, #1
    be58:	2000      	movs	r0, #0
    be5a:	4c04      	ldr	r4, [pc, #16]	; (be6c <P2PTasks+0x750>)
    be5c:	47a0      	blx	r4
                            break;
    be5e:	e791      	b.n	bd84 <P2PTasks+0x668>
    be60:	0000a1c9 	.word	0x0000a1c9
    be64:	20002b28 	.word	0x20002b28
    be68:	0000adb5 	.word	0x0000adb5
    be6c:	0000af21 	.word	0x0000af21

0000be70 <MiApp_EstablishConnection>:
    {
    be70:	b5f0      	push	{r4, r5, r6, r7, lr}
    be72:	46de      	mov	lr, fp
    be74:	4657      	mov	r7, sl
    be76:	464e      	mov	r6, r9
    be78:	4645      	mov	r5, r8
    be7a:	b5e0      	push	{r5, r6, r7, lr}
    be7c:	b08b      	sub	sp, #44	; 0x2c
    be7e:	0016      	movs	r6, r2
    be80:	231f      	movs	r3, #31
    be82:	aa02      	add	r2, sp, #8
    be84:	4694      	mov	ip, r2
    be86:	4463      	add	r3, ip
    be88:	7018      	strb	r0, [r3, #0]
        uint8_t    tmpConnectionMode = ConnMode;
    be8a:	4c61      	ldr	r4, [pc, #388]	; (c010 <MiApp_EstablishConnection+0x1a0>)
    be8c:	7823      	ldrb	r3, [r4, #0]
    be8e:	9308      	str	r3, [sp, #32]
        tick1.Val = MiWi_TickGet();
    be90:	4d60      	ldr	r5, [pc, #384]	; (c014 <MiApp_EstablishConnection+0x1a4>)
    be92:	47a8      	blx	r5
    be94:	4b60      	ldr	r3, [pc, #384]	; (c018 <MiApp_EstablishConnection+0x1a8>)
    be96:	6018      	str	r0, [r3, #0]
        t1.Val = MiWi_TickGet();
    be98:	47a8      	blx	r5
        t1.Val -= (ONE_SECOND);
    be9a:	4b60      	ldr	r3, [pc, #384]	; (c01c <MiApp_EstablishConnection+0x1ac>)
    be9c:	18c5      	adds	r5, r0, r3
        ConnMode = ENABLE_ALL_CONN;
    be9e:	2300      	movs	r3, #0
    bea0:	7023      	strb	r3, [r4, #0]
        P2PStatus.bits.SearchConnection = 1;
    bea2:	4a5f      	ldr	r2, [pc, #380]	; (c020 <MiApp_EstablishConnection+0x1b0>)
    bea4:	7813      	ldrb	r3, [r2, #0]
    bea6:	2110      	movs	r1, #16
    bea8:	430b      	orrs	r3, r1
    beaa:	7013      	strb	r3, [r2, #0]
        EstConfCallback = ConfCallback;
    beac:	4b5d      	ldr	r3, [pc, #372]	; (c024 <MiApp_EstablishConnection+0x1b4>)
    beae:	9a14      	ldr	r2, [sp, #80]	; 0x50
    beb0:	601a      	str	r2, [r3, #0]
        uint8_t    connectionInterval = 0;
    beb2:	2400      	movs	r4, #0
        uint8_t    retry = CONNECTION_RETRY_TIMES;
    beb4:	2703      	movs	r7, #3
        while( P2PStatus.bits.SearchConnection )
    beb6:	4b5a      	ldr	r3, [pc, #360]	; (c020 <MiApp_EstablishConnection+0x1b0>)
    beb8:	4699      	mov	r9, r3
            t2.Val = MiWi_TickGet();
    beba:	4b56      	ldr	r3, [pc, #344]	; (c014 <MiApp_EstablishConnection+0x1a4>)
    bebc:	4698      	mov	r8, r3
    bebe:	002b      	movs	r3, r5
    bec0:	003d      	movs	r5, r7
    bec2:	001f      	movs	r7, r3
        while( P2PStatus.bits.SearchConnection )
    bec4:	e08c      	b.n	bfe0 <MiApp_EstablishConnection+0x170>
                if( retry-- == 0 )
    bec6:	1e6b      	subs	r3, r5, #1
    bec8:	b2db      	uxtb	r3, r3
    beca:	9307      	str	r3, [sp, #28]
    becc:	2d00      	cmp	r5, #0
    bece:	d02d      	beq.n	bf2c <MiApp_EstablishConnection+0xbc>
                MiApp_Set(CHANNEL, &Channel);
    bed0:	211f      	movs	r1, #31
    bed2:	ab02      	add	r3, sp, #8
    bed4:	469c      	mov	ip, r3
    bed6:	4461      	add	r1, ip
    bed8:	2000      	movs	r0, #0
    beda:	4b53      	ldr	r3, [pc, #332]	; (c028 <MiApp_EstablishConnection+0x1b8>)
    bedc:	4798      	blx	r3
                dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_P2P_CONNECTION_REQUEST));
    bede:	2010      	movs	r0, #16
    bee0:	4b52      	ldr	r3, [pc, #328]	; (c02c <MiApp_EstablishConnection+0x1bc>)
    bee2:	4798      	blx	r3
    bee4:	1e07      	subs	r7, r0, #0
                if (NULL == dataPtr)
    bee6:	d045      	beq.n	bf74 <MiApp_EstablishConnection+0x104>
                dataPtr[dataLen++] = CMD_P2P_CONNECTION_REQUEST;
    bee8:	2381      	movs	r3, #129	; 0x81
    beea:	7003      	strb	r3, [r0, #0]
                dataPtr[dataLen++] = currentChannel;
    beec:	4b50      	ldr	r3, [pc, #320]	; (c030 <MiApp_EstablishConnection+0x1c0>)
    beee:	781b      	ldrb	r3, [r3, #0]
    bef0:	7043      	strb	r3, [r0, #1]
                dataPtr[dataLen++] = P2PCapacityInfo;
    bef2:	4b50      	ldr	r3, [pc, #320]	; (c034 <MiApp_EstablishConnection+0x1c4>)
    bef4:	781b      	ldrb	r3, [r3, #0]
    bef6:	7083      	strb	r3, [r0, #2]
                            dataPtr[dataLen++] = AdditionalNodeID[i];
    bef8:	4b4f      	ldr	r3, [pc, #316]	; (c038 <MiApp_EstablishConnection+0x1c8>)
    befa:	781b      	ldrb	r3, [r3, #0]
    befc:	70c3      	strb	r3, [r0, #3]
                        uint16_t DestinationAddress16 = ((addr[1] << 8) + addr[0]);	
    befe:	7872      	ldrb	r2, [r6, #1]
    bf00:	0212      	lsls	r2, r2, #8
    bf02:	7833      	ldrb	r3, [r6, #0]
    bf04:	189b      	adds	r3, r3, r2
                        if( DestinationAddress16 == 0xFFFF )
    bf06:	b29b      	uxth	r3, r3
    bf08:	4a4c      	ldr	r2, [pc, #304]	; (c03c <MiApp_EstablishConnection+0x1cc>)
    bf0a:	4293      	cmp	r3, r2
    bf0c:	d015      	beq.n	bf3a <MiApp_EstablishConnection+0xca>
							MiApp_Set(CHANNEL, &Channel);
    bf0e:	211f      	movs	r1, #31
    bf10:	ab02      	add	r3, sp, #8
    bf12:	469c      	mov	ip, r3
    bf14:	4461      	add	r1, ip
    bf16:	2000      	movs	r0, #0
    bf18:	4b43      	ldr	r3, [pc, #268]	; (c028 <MiApp_EstablishConnection+0x1b8>)
    bf1a:	4798      	blx	r3
								  if (addr[j] != ActiveScanResults[i].Address[j])
    bf1c:	7833      	ldrb	r3, [r6, #0]
    bf1e:	469b      	mov	fp, r3
    bf20:	4b47      	ldr	r3, [pc, #284]	; (c040 <MiApp_EstablishConnection+0x1d0>)
    bf22:	0035      	movs	r5, r6
    bf24:	3508      	adds	r5, #8
    bf26:	46bc      	mov	ip, r7
    bf28:	001f      	movs	r7, r3
    bf2a:	e030      	b.n	bf8e <MiApp_EstablishConnection+0x11e>
                    P2PStatus.bits.SearchConnection = 0;
    bf2c:	4a3c      	ldr	r2, [pc, #240]	; (c020 <MiApp_EstablishConnection+0x1b0>)
    bf2e:	7813      	ldrb	r3, [r2, #0]
    bf30:	2110      	movs	r1, #16
    bf32:	438b      	bics	r3, r1
    bf34:	7013      	strb	r3, [r2, #0]
                    return 0xFF;
    bf36:	24ff      	movs	r4, #255	; 0xff
    bf38:	e01c      	b.n	bf74 <MiApp_EstablishConnection+0x104>
                            SendPacket(true, myPANID, NULL, true, false, dataLen, dataPtr,0, true, CommandConfCallback);
    bf3a:	4b42      	ldr	r3, [pc, #264]	; (c044 <MiApp_EstablishConnection+0x1d4>)
    bf3c:	8819      	ldrh	r1, [r3, #0]
    bf3e:	4b42      	ldr	r3, [pc, #264]	; (c048 <MiApp_EstablishConnection+0x1d8>)
    bf40:	9305      	str	r3, [sp, #20]
    bf42:	2301      	movs	r3, #1
    bf44:	9304      	str	r3, [sp, #16]
    bf46:	2300      	movs	r3, #0
    bf48:	9303      	str	r3, [sp, #12]
    bf4a:	9002      	str	r0, [sp, #8]
    bf4c:	2204      	movs	r2, #4
    bf4e:	9201      	str	r2, [sp, #4]
    bf50:	9300      	str	r3, [sp, #0]
    bf52:	3301      	adds	r3, #1
    bf54:	2200      	movs	r2, #0
    bf56:	2001      	movs	r0, #1
    bf58:	4c3c      	ldr	r4, [pc, #240]	; (c04c <MiApp_EstablishConnection+0x1dc>)
    bf5a:	47a0      	blx	r4
                t1.Val = t2.Val;
    bf5c:	9f06      	ldr	r7, [sp, #24]
                if( retry-- == 0 )
    bf5e:	9d07      	ldr	r5, [sp, #28]
                connectionInterval = CONNECTION_INTERVAL-1;
    bf60:	2403      	movs	r4, #3
    bf62:	e039      	b.n	bfd8 <MiApp_EstablishConnection+0x168>
        ConnMode = tmpConnectionMode;
    bf64:	4b2a      	ldr	r3, [pc, #168]	; (c010 <MiApp_EstablishConnection+0x1a0>)
    bf66:	466a      	mov	r2, sp
    bf68:	2120      	movs	r1, #32
    bf6a:	1852      	adds	r2, r2, r1
    bf6c:	7812      	ldrb	r2, [r2, #0]
    bf6e:	701a      	strb	r2, [r3, #0]
        return LatestConnection;
    bf70:	4b37      	ldr	r3, [pc, #220]	; (c050 <MiApp_EstablishConnection+0x1e0>)
    bf72:	781c      	ldrb	r4, [r3, #0]
    }
    bf74:	0020      	movs	r0, r4
    bf76:	b00b      	add	sp, #44	; 0x2c
    bf78:	bc3c      	pop	{r2, r3, r4, r5}
    bf7a:	4690      	mov	r8, r2
    bf7c:	4699      	mov	r9, r3
    bf7e:	46a2      	mov	sl, r4
    bf80:	46ab      	mov	fp, r5
    bf82:	bdf0      	pop	{r4, r5, r6, r7, pc}
							for(i = 0; i < ACTIVE_SCAN_RESULT_SIZE; i++)
    bf84:	3401      	adds	r4, #1
    bf86:	b2e4      	uxtb	r4, r4
    bf88:	3710      	adds	r7, #16
    bf8a:	2c04      	cmp	r4, #4
    bf8c:	d03b      	beq.n	c006 <MiApp_EstablishConnection+0x196>
								  if (addr[j] != ActiveScanResults[i].Address[j])
    bf8e:	787b      	ldrb	r3, [r7, #1]
    bf90:	455b      	cmp	r3, fp
    bf92:	d1f7      	bne.n	bf84 <MiApp_EstablishConnection+0x114>
    bf94:	1c73      	adds	r3, r6, #1
    bf96:	1cba      	adds	r2, r7, #2
    bf98:	7818      	ldrb	r0, [r3, #0]
    bf9a:	7811      	ldrb	r1, [r2, #0]
    bf9c:	4288      	cmp	r0, r1
    bf9e:	d1f1      	bne.n	bf84 <MiApp_EstablishConnection+0x114>
    bfa0:	3301      	adds	r3, #1
    bfa2:	3201      	adds	r2, #1
								for(j = 0; j < MY_ADDRESS_LENGTH; j++)
    bfa4:	42ab      	cmp	r3, r5
    bfa6:	d1f7      	bne.n	bf98 <MiApp_EstablishConnection+0x128>
    bfa8:	4667      	mov	r7, ip
								SendPacket(false, ActiveScanResults[i].PANID, ActiveScanResults[i].Address, true, false, 
    bfaa:	0124      	lsls	r4, r4, #4
    bfac:	1c62      	adds	r2, r4, #1
    bfae:	4b24      	ldr	r3, [pc, #144]	; (c040 <MiApp_EstablishConnection+0x1d0>)
    bfb0:	18d2      	adds	r2, r2, r3
    bfb2:	191b      	adds	r3, r3, r4
    bfb4:	8959      	ldrh	r1, [r3, #10]
    bfb6:	4b24      	ldr	r3, [pc, #144]	; (c048 <MiApp_EstablishConnection+0x1d8>)
    bfb8:	9305      	str	r3, [sp, #20]
    bfba:	2301      	movs	r3, #1
    bfbc:	9304      	str	r3, [sp, #16]
    bfbe:	2300      	movs	r3, #0
    bfc0:	9303      	str	r3, [sp, #12]
    bfc2:	9702      	str	r7, [sp, #8]
    bfc4:	2004      	movs	r0, #4
    bfc6:	9001      	str	r0, [sp, #4]
    bfc8:	9300      	str	r3, [sp, #0]
    bfca:	3301      	adds	r3, #1
    bfcc:	2000      	movs	r0, #0
    bfce:	4c1f      	ldr	r4, [pc, #124]	; (c04c <MiApp_EstablishConnection+0x1dc>)
    bfd0:	47a0      	blx	r4
                t1.Val = t2.Val;
    bfd2:	9f06      	ldr	r7, [sp, #24]
                if( retry-- == 0 )
    bfd4:	9d07      	ldr	r5, [sp, #28]
                connectionInterval = CONNECTION_INTERVAL-1;
    bfd6:	2403      	movs	r4, #3
            P2PTasks();
    bfd8:	4b1e      	ldr	r3, [pc, #120]	; (c054 <MiApp_EstablishConnection+0x1e4>)
    bfda:	4798      	blx	r3
			SYSTEM_RunTasks();
    bfdc:	4b1e      	ldr	r3, [pc, #120]	; (c058 <MiApp_EstablishConnection+0x1e8>)
    bfde:	4798      	blx	r3
        while( P2PStatus.bits.SearchConnection )
    bfe0:	464b      	mov	r3, r9
    bfe2:	781b      	ldrb	r3, [r3, #0]
    bfe4:	06db      	lsls	r3, r3, #27
    bfe6:	d5bd      	bpl.n	bf64 <MiApp_EstablishConnection+0xf4>
            t2.Val = MiWi_TickGet();
    bfe8:	47c0      	blx	r8
            if( MiWi_TickGetDiff(t2, t1) > (ONE_SECOND) )
    bfea:	0039      	movs	r1, r7
    bfec:	9006      	str	r0, [sp, #24]
    bfee:	4b1b      	ldr	r3, [pc, #108]	; (c05c <MiApp_EstablishConnection+0x1ec>)
    bff0:	4798      	blx	r3
    bff2:	4b1b      	ldr	r3, [pc, #108]	; (c060 <MiApp_EstablishConnection+0x1f0>)
    bff4:	4298      	cmp	r0, r3
    bff6:	d9ef      	bls.n	bfd8 <MiApp_EstablishConnection+0x168>
                if( connectionInterval-- > 0 )
    bff8:	2c00      	cmp	r4, #0
    bffa:	d100      	bne.n	bffe <MiApp_EstablishConnection+0x18e>
    bffc:	e763      	b.n	bec6 <MiApp_EstablishConnection+0x56>
    bffe:	3c01      	subs	r4, #1
    c000:	b2e4      	uxtb	r4, r4
                t1.Val = t2.Val;
    c002:	9f06      	ldr	r7, [sp, #24]
    c004:	e7ec      	b.n	bfe0 <MiApp_EstablishConnection+0x170>
    c006:	9f06      	ldr	r7, [sp, #24]
                if( retry-- == 0 )
    c008:	9d07      	ldr	r5, [sp, #28]
                connectionInterval = CONNECTION_INTERVAL-1;
    c00a:	3c01      	subs	r4, #1
    c00c:	e7e4      	b.n	bfd8 <MiApp_EstablishConnection+0x168>
    c00e:	46c0      	nop			; (mov r8, r8)
    c010:	2000001c 	.word	0x2000001c
    c014:	0000c41d 	.word	0x0000c41d
    c018:	20002ae4 	.word	0x20002ae4
    c01c:	fff0bdc0 	.word	0xfff0bdc0
    c020:	200028b8 	.word	0x200028b8
    c024:	20002898 	.word	0x20002898
    c028:	0000b151 	.word	0x0000b151
    c02c:	0000c1dd 	.word	0x0000c1dd
    c030:	2000001d 	.word	0x2000001d
    c034:	20002891 	.word	0x20002891
    c038:	20000018 	.word	0x20000018
    c03c:	0000ffff 	.word	0x0000ffff
    c040:	20002ae8 	.word	0x20002ae8
    c044:	20002894 	.word	0x20002894
    c048:	0000adb5 	.word	0x0000adb5
    c04c:	0000af21 	.word	0x0000af21
    c050:	20002840 	.word	0x20002840
    c054:	0000b71d 	.word	0x0000b71d
    c058:	0000db61 	.word	0x0000db61
    c05c:	0000c47d 	.word	0x0000c47d
    c060:	000f4240 	.word	0x000f4240

0000c064 <MiApp_SearchConnection>:
    {
    c064:	b5f0      	push	{r4, r5, r6, r7, lr}
    c066:	46d6      	mov	lr, sl
    c068:	464f      	mov	r7, r9
    c06a:	4646      	mov	r6, r8
    c06c:	b5c0      	push	{r6, r7, lr}
    c06e:	b08a      	sub	sp, #40	; 0x28
    c070:	4690      	mov	r8, r2
        uint8_t backupChannel = currentChannel;
    c072:	4b3d      	ldr	r3, [pc, #244]	; (c168 <MiApp_SearchConnection+0x104>)
    c074:	781a      	ldrb	r2, [r3, #0]
    c076:	231e      	movs	r3, #30
    c078:	ac02      	add	r4, sp, #8
    c07a:	46a4      	mov	ip, r4
    c07c:	4463      	add	r3, ip
    c07e:	701a      	strb	r2, [r3, #0]
            ActiveScanResults[i].Channel = 0xFF;
    c080:	4b3a      	ldr	r3, [pc, #232]	; (c16c <MiApp_SearchConnection+0x108>)
    c082:	22ff      	movs	r2, #255	; 0xff
    c084:	701a      	strb	r2, [r3, #0]
    c086:	741a      	strb	r2, [r3, #16]
    c088:	2420      	movs	r4, #32
    c08a:	551a      	strb	r2, [r3, r4]
    c08c:	3410      	adds	r4, #16
    c08e:	551a      	strb	r2, [r3, r4]
        ActiveScanResultIndex = 0;
    c090:	2300      	movs	r3, #0
    c092:	4a37      	ldr	r2, [pc, #220]	; (c170 <MiApp_SearchConnection+0x10c>)
    c094:	7013      	strb	r3, [r2, #0]
        i = 0;
    c096:	221f      	movs	r2, #31
    c098:	4462      	add	r2, ip
    c09a:	7013      	strb	r3, [r2, #0]
		scan_symbols =   ABASESUPERFRAMEDURATION *((1<<scan_duration) + 1);
    c09c:	3301      	adds	r3, #1
    c09e:	4083      	lsls	r3, r0
    c0a0:	3301      	adds	r3, #1
    c0a2:	011d      	lsls	r5, r3, #4
    c0a4:	1aeb      	subs	r3, r5, r3
    c0a6:	019b      	lsls	r3, r3, #6
		return SYMBOLS_TO_TICKS(scan_symbols);
    c0a8:	25fa      	movs	r5, #250	; 0xfa
    c0aa:	00ad      	lsls	r5, r5, #2
    c0ac:	435d      	muls	r5, r3
    c0ae:	2300      	movs	r3, #0
            if( ChannelMap & FULL_CHANNEL_MAP & (channelMask << i) )
    c0b0:	2603      	movs	r6, #3
    c0b2:	400e      	ands	r6, r1
    c0b4:	46b2      	mov	sl, r6
                printf("\r\nScan Channel ");
    c0b6:	4a2f      	ldr	r2, [pc, #188]	; (c174 <MiApp_SearchConnection+0x110>)
    c0b8:	4691      	mov	r9, r2
    c0ba:	e009      	b.n	c0d0 <MiApp_SearchConnection+0x6c>
            i++;
    c0bc:	221f      	movs	r2, #31
    c0be:	ab02      	add	r3, sp, #8
    c0c0:	469c      	mov	ip, r3
    c0c2:	4462      	add	r2, ip
    c0c4:	7813      	ldrb	r3, [r2, #0]
    c0c6:	3301      	adds	r3, #1
    c0c8:	b2db      	uxtb	r3, r3
    c0ca:	7013      	strb	r3, [r2, #0]
        while( i < 32 )
    c0cc:	2b1f      	cmp	r3, #31
    c0ce:	d83b      	bhi.n	c148 <MiApp_SearchConnection+0xe4>
            if( ChannelMap & FULL_CHANNEL_MAP & (channelMask << i) )
    c0d0:	2201      	movs	r2, #1
    c0d2:	409a      	lsls	r2, r3
    c0d4:	4653      	mov	r3, sl
    c0d6:	421a      	tst	r2, r3
    c0d8:	d0f0      	beq.n	c0bc <MiApp_SearchConnection+0x58>
                printf("\r\nScan Channel ");
    c0da:	4827      	ldr	r0, [pc, #156]	; (c178 <MiApp_SearchConnection+0x114>)
    c0dc:	47c8      	blx	r9
                printf("%d",i);
    c0de:	241f      	movs	r4, #31
    c0e0:	ab02      	add	r3, sp, #8
    c0e2:	469c      	mov	ip, r3
    c0e4:	4464      	add	r4, ip
    c0e6:	7821      	ldrb	r1, [r4, #0]
    c0e8:	4824      	ldr	r0, [pc, #144]	; (c17c <MiApp_SearchConnection+0x118>)
    c0ea:	47c8      	blx	r9
                MiApp_Set(CHANNEL, &i);
    c0ec:	0021      	movs	r1, r4
    c0ee:	2000      	movs	r0, #0
    c0f0:	4b23      	ldr	r3, [pc, #140]	; (c180 <MiApp_SearchConnection+0x11c>)
    c0f2:	4798      	blx	r3
                dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_P2P_ACTIVE_SCAN_REQUEST));
    c0f4:	2010      	movs	r0, #16
    c0f6:	4b23      	ldr	r3, [pc, #140]	; (c184 <MiApp_SearchConnection+0x120>)
    c0f8:	4798      	blx	r3
                if (NULL == dataPtr)
    c0fa:	2800      	cmp	r0, #0
    c0fc:	d02e      	beq.n	c15c <MiApp_SearchConnection+0xf8>
                dataPtr[dataLen++] = CMD_P2P_ACTIVE_SCAN_REQUEST;
    c0fe:	2387      	movs	r3, #135	; 0x87
    c100:	7003      	strb	r3, [r0, #0]
                dataPtr[dataLen++] = currentChannel;
    c102:	4b19      	ldr	r3, [pc, #100]	; (c168 <MiApp_SearchConnection+0x104>)
    c104:	781b      	ldrb	r3, [r3, #0]
    c106:	7043      	strb	r3, [r0, #1]
                    SendPacket(true, tmpPANID, NULL, true, false, dataLen, dataPtr,0, true, CommandConfCallback);
    c108:	4b1f      	ldr	r3, [pc, #124]	; (c188 <MiApp_SearchConnection+0x124>)
    c10a:	9305      	str	r3, [sp, #20]
    c10c:	2301      	movs	r3, #1
    c10e:	9304      	str	r3, [sp, #16]
    c110:	2300      	movs	r3, #0
    c112:	9303      	str	r3, [sp, #12]
    c114:	9002      	str	r0, [sp, #8]
    c116:	2202      	movs	r2, #2
    c118:	9201      	str	r2, [sp, #4]
    c11a:	9300      	str	r3, [sp, #0]
    c11c:	3301      	adds	r3, #1
    c11e:	2200      	movs	r2, #0
    c120:	2101      	movs	r1, #1
    c122:	4249      	negs	r1, r1
    c124:	2001      	movs	r0, #1
    c126:	4c19      	ldr	r4, [pc, #100]	; (c18c <MiApp_SearchConnection+0x128>)
    c128:	47a0      	blx	r4
                t1.Val = MiWi_TickGet();
    c12a:	4b19      	ldr	r3, [pc, #100]	; (c190 <MiApp_SearchConnection+0x12c>)
    c12c:	4798      	blx	r3
    c12e:	9007      	str	r0, [sp, #28]
                    P2PTasks();
    c130:	4e18      	ldr	r6, [pc, #96]	; (c194 <MiApp_SearchConnection+0x130>)
					SYSTEM_RunTasks();			
    c132:	4f19      	ldr	r7, [pc, #100]	; (c198 <MiApp_SearchConnection+0x134>)
                    t2.Val = MiWi_TickGet();
    c134:	4c16      	ldr	r4, [pc, #88]	; (c190 <MiApp_SearchConnection+0x12c>)
                    P2PTasks();
    c136:	47b0      	blx	r6
					SYSTEM_RunTasks();			
    c138:	47b8      	blx	r7
                    t2.Val = MiWi_TickGet();
    c13a:	47a0      	blx	r4
                    if( MiWi_TickGetDiff(t2, t1) > ((uint32_t)(miwi_scan_duration_ticks(ScanDuration))) )
    c13c:	9907      	ldr	r1, [sp, #28]
    c13e:	4b17      	ldr	r3, [pc, #92]	; (c19c <MiApp_SearchConnection+0x138>)
    c140:	4798      	blx	r3
    c142:	42a8      	cmp	r0, r5
    c144:	d9f7      	bls.n	c136 <MiApp_SearchConnection+0xd2>
    c146:	e7b9      	b.n	c0bc <MiApp_SearchConnection+0x58>
        MiApp_Set(CHANNEL, &backupChannel);
    c148:	211e      	movs	r1, #30
    c14a:	4461      	add	r1, ip
    c14c:	2000      	movs	r0, #0
    c14e:	4b0c      	ldr	r3, [pc, #48]	; (c180 <MiApp_SearchConnection+0x11c>)
    c150:	4798      	blx	r3
        ConfCallback(ActiveScanResultIndex, (uint8_t*)ActiveScanResults);
    c152:	4c07      	ldr	r4, [pc, #28]	; (c170 <MiApp_SearchConnection+0x10c>)
    c154:	7820      	ldrb	r0, [r4, #0]
    c156:	4905      	ldr	r1, [pc, #20]	; (c16c <MiApp_SearchConnection+0x108>)
    c158:	47c0      	blx	r8
        return ActiveScanResultIndex;
    c15a:	7820      	ldrb	r0, [r4, #0]
    }   
    c15c:	b00a      	add	sp, #40	; 0x28
    c15e:	bc1c      	pop	{r2, r3, r4}
    c160:	4690      	mov	r8, r2
    c162:	4699      	mov	r9, r3
    c164:	46a2      	mov	sl, r4
    c166:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c168:	2000001d 	.word	0x2000001d
    c16c:	20002ae8 	.word	0x20002ae8
    c170:	20002b38 	.word	0x20002b38
    c174:	00016fc9 	.word	0x00016fc9
    c178:	00019120 	.word	0x00019120
    c17c:	000185a0 	.word	0x000185a0
    c180:	0000b151 	.word	0x0000b151
    c184:	0000c1dd 	.word	0x0000c1dd
    c188:	0000adb5 	.word	0x0000adb5
    c18c:	0000af21 	.word	0x0000af21
    c190:	0000c41d 	.word	0x0000c41d
    c194:	0000b71d 	.word	0x0000b71d
    c198:	0000db61 	.word	0x0000db61
    c19c:	0000c47d 	.word	0x0000c47d

0000c1a0 <MiMem_Init>:
* Output:		    none
*
* Overview:		    This function will initialize the Mimem buffers
********************************************************************/
void MiMem_Init(void)
{
    c1a0:	b510      	push	{r4, lr}
	size_t startAddress =  ALIGN((size_t)heapMem);
    c1a2:	4a0b      	ldr	r2, [pc, #44]	; (c1d0 <MiMem_Init+0x30>)
    c1a4:	1e50      	subs	r0, r2, #1
    c1a6:	2403      	movs	r4, #3
    c1a8:	43a0      	bics	r0, r4
    c1aa:	1d01      	adds	r1, r0, #4

	/*Aligned heap is the base */
	base = (Block_t*) startAddress;
    c1ac:	4b09      	ldr	r3, [pc, #36]	; (c1d4 <MiMem_Init+0x34>)
    c1ae:	6019      	str	r1, [r3, #0]
	base->size = totalFreeBytesRemaining = HEAP_SIZE - (startAddress - (size_t)heapMem);
    c1b0:	4253      	negs	r3, r2
    c1b2:	43a3      	bics	r3, r4
    c1b4:	24c0      	movs	r4, #192	; 0xc0
    c1b6:	0164      	lsls	r4, r4, #5
    c1b8:	46a4      	mov	ip, r4
    c1ba:	4462      	add	r2, ip
    c1bc:	189b      	adds	r3, r3, r2
    c1be:	4a06      	ldr	r2, [pc, #24]	; (c1d8 <MiMem_Init+0x38>)
    c1c0:	6013      	str	r3, [r2, #0]
    c1c2:	60c3      	str	r3, [r0, #12]
	base->free = true;
    c1c4:	2301      	movs	r3, #1
    c1c6:	7403      	strb	r3, [r0, #16]
	base->next = NULL;
    c1c8:	2300      	movs	r3, #0
    c1ca:	6043      	str	r3, [r0, #4]
	base->prev = NULL;
    c1cc:	6083      	str	r3, [r0, #8]
}
    c1ce:	bd10      	pop	{r4, pc}
    c1d0:	200004a0 	.word	0x200004a0
    c1d4:	2000049c 	.word	0x2000049c
    c1d8:	20001ca0 	.word	0x20001ca0

0000c1dc <MiMem_Alloc>:
*  or returns NULL if no memory available
*
* Note:			    none
********************************************************************/
void* MiMem_Alloc(uint8_t size)
{
    c1dc:	b570      	push	{r4, r5, r6, lr}
    c1de:	0005      	movs	r5, r0
	size_t requestedSize = 0U;
	void* requestedMemPtr = NULL;

	/* Initialize the Heap */
	if (!base)
    c1e0:	4b29      	ldr	r3, [pc, #164]	; (c288 <MiMem_Alloc+0xac>)
    c1e2:	681b      	ldr	r3, [r3, #0]
    c1e4:	2b00      	cmp	r3, #0
    c1e6:	d012      	beq.n	c20e <MiMem_Alloc+0x32>
	{
		MiMem_Init();
	}
	/* if requested size is of non zero */
	if (size)
    c1e8:	2d00      	cmp	r5, #0
    c1ea:	d047      	beq.n	c27c <MiMem_Alloc+0xa0>
	{
		requestedSize =  size + blockMetaDataSize;
		requestedSize = ALIGN(requestedSize);
    c1ec:	0029      	movs	r1, r5
    c1ee:	310f      	adds	r1, #15
    c1f0:	2303      	movs	r3, #3
    c1f2:	4399      	bics	r1, r3
    c1f4:	3104      	adds	r1, #4
		if (requestedSize <= totalFreeBytesRemaining)
    c1f6:	4b25      	ldr	r3, [pc, #148]	; (c28c <MiMem_Alloc+0xb0>)
    c1f8:	6818      	ldr	r0, [r3, #0]
    c1fa:	4281      	cmp	r1, r0
    c1fc:	d840      	bhi.n	c280 <MiMem_Alloc+0xa4>
		{
			size_t receivedSize = (size_t)~0U;
			Block_t *requestedBlock = NULL;
			Block_t *blockPtr = base;
    c1fe:	4b22      	ldr	r3, [pc, #136]	; (c288 <MiMem_Alloc+0xac>)
    c200:	681b      	ldr	r3, [r3, #0]

			/* Find best fit free Block */
			while (blockPtr)
    c202:	2b00      	cmp	r3, #0
    c204:	d03e      	beq.n	c284 <MiMem_Alloc+0xa8>
    c206:	2600      	movs	r6, #0
    c208:	2401      	movs	r4, #1
    c20a:	4264      	negs	r4, r4
    c20c:	e005      	b.n	c21a <MiMem_Alloc+0x3e>
		MiMem_Init();
    c20e:	4b20      	ldr	r3, [pc, #128]	; (c290 <MiMem_Alloc+0xb4>)
    c210:	4798      	blx	r3
    c212:	e7e9      	b.n	c1e8 <MiMem_Alloc+0xc>
				if ((blockPtr->free) && (blockPtr->size >= requestedSize) && (blockPtr->size < receivedSize))
				{
					receivedSize = blockPtr->size;
					requestedBlock = blockPtr;
				}
				blockPtr = blockPtr->next;
    c214:	681b      	ldr	r3, [r3, #0]
			while (blockPtr)
    c216:	2b00      	cmp	r3, #0
    c218:	d00a      	beq.n	c230 <MiMem_Alloc+0x54>
				if ((blockPtr->free) && (blockPtr->size >= requestedSize) && (blockPtr->size < receivedSize))
    c21a:	7b1a      	ldrb	r2, [r3, #12]
    c21c:	2a00      	cmp	r2, #0
    c21e:	d0f9      	beq.n	c214 <MiMem_Alloc+0x38>
    c220:	689a      	ldr	r2, [r3, #8]
    c222:	4291      	cmp	r1, r2
    c224:	d8f6      	bhi.n	c214 <MiMem_Alloc+0x38>
    c226:	42a2      	cmp	r2, r4
    c228:	d2f4      	bcs.n	c214 <MiMem_Alloc+0x38>
    c22a:	001e      	movs	r6, r3
					receivedSize = blockPtr->size;
    c22c:	0014      	movs	r4, r2
    c22e:	e7f1      	b.n	c214 <MiMem_Alloc+0x38>
    c230:	2400      	movs	r4, #0
			}

			if (requestedBlock)
    c232:	2e00      	cmp	r6, #0
    c234:	d012      	beq.n	c25c <MiMem_Alloc+0x80>
			{
				if ((requestedBlock->size - requestedSize) > HEAP_MINIMUM_BLOCK_SIZE)
    c236:	68b3      	ldr	r3, [r6, #8]
    c238:	1a5b      	subs	r3, r3, r1
    c23a:	2b14      	cmp	r3, #20
    c23c:	d810      	bhi.n	c260 <MiMem_Alloc+0x84>
				splitBlock (requestedBlock, requestedSize);
				requestedBlock->free = false;
    c23e:	2300      	movs	r3, #0
    c240:	7333      	strb	r3, [r6, #12]
				totalFreeBytesRemaining -= requestedBlock->size;
    c242:	68b3      	ldr	r3, [r6, #8]
    c244:	1ac0      	subs	r0, r0, r3
    c246:	4b11      	ldr	r3, [pc, #68]	; (c28c <MiMem_Alloc+0xb0>)
    c248:	6018      	str	r0, [r3, #0]
				requestedMemPtr = ( void* )(((uint8_t*)requestedBlock) + blockMetaDataSize);
    c24a:	0034      	movs	r4, r6
    c24c:	3410      	adds	r4, #16
			}
		}
	}
	if (NULL != requestedMemPtr)
    c24e:	2c00      	cmp	r4, #0
    c250:	d004      	beq.n	c25c <MiMem_Alloc+0x80>
	{
		memset(requestedMemPtr, 0, size);
    c252:	002a      	movs	r2, r5
    c254:	2100      	movs	r1, #0
    c256:	0020      	movs	r0, r4
    c258:	4b0e      	ldr	r3, [pc, #56]	; (c294 <MiMem_Alloc+0xb8>)
    c25a:	4798      	blx	r3
	}
	return requestedMemPtr;
}
    c25c:	0020      	movs	r0, r4
    c25e:	bd70      	pop	{r4, r5, r6, pc}
  \param[in] size size of the memory chunk requested
  \return None.
 ******************************************************************************/
static void splitBlock(Block_t* blockTobeSplitted, size_t size)
{
	uint8_t* ptr = (uint8_t*)blockTobeSplitted + size;
    c260:	1872      	adds	r2, r6, r1
	Block_t* newBlock = (Block_t*)ptr;

	newBlock->size = blockTobeSplitted->size - size;
    c262:	6093      	str	r3, [r2, #8]

	if (blockTobeSplitted->next)
    c264:	6833      	ldr	r3, [r6, #0]
    c266:	2b00      	cmp	r3, #0
    c268:	d000      	beq.n	c26c <MiMem_Alloc+0x90>
		blockTobeSplitted->next->prev = newBlock;
    c26a:	605a      	str	r2, [r3, #4]

	newBlock->next = blockTobeSplitted->next;
    c26c:	6833      	ldr	r3, [r6, #0]
    c26e:	6013      	str	r3, [r2, #0]
	newBlock->prev = blockTobeSplitted;
    c270:	6056      	str	r6, [r2, #4]
	newBlock->free = true;
    c272:	2301      	movs	r3, #1
    c274:	7313      	strb	r3, [r2, #12]

	blockTobeSplitted->next = newBlock;
    c276:	6032      	str	r2, [r6, #0]
	blockTobeSplitted->size = size;
    c278:	60b1      	str	r1, [r6, #8]
    c27a:	e7e0      	b.n	c23e <MiMem_Alloc+0x62>
    c27c:	2400      	movs	r4, #0
    c27e:	e7ed      	b.n	c25c <MiMem_Alloc+0x80>
    c280:	2400      	movs	r4, #0
    c282:	e7eb      	b.n	c25c <MiMem_Alloc+0x80>
			while (blockPtr)
    c284:	2400      	movs	r4, #0
    c286:	e7e9      	b.n	c25c <MiMem_Alloc+0x80>
    c288:	2000049c 	.word	0x2000049c
    c28c:	20001ca0 	.word	0x20001ca0
    c290:	0000c1a1 	.word	0x0000c1a1
    c294:	00016a21 	.word	0x00016a21

0000c298 <MiMem_Free>:
	Block_t* blockPtr = base;
    c298:	4b1c      	ldr	r3, [pc, #112]	; (c30c <MiMem_Free+0x74>)
    c29a:	681b      	ldr	r3, [r3, #0]
	Block_t* freeBlockPtr = (Block_t*)((uint8_t*)ptr - (uint8_t*)blockMetaDataSize);
    c29c:	3810      	subs	r0, #16
	for(; ((blockPtr != NULL) && (blockPtr != freeBlockPtr)); blockPtr = blockPtr->next);
    c29e:	2b00      	cmp	r3, #0
    c2a0:	d030      	beq.n	c304 <MiMem_Free+0x6c>
    c2a2:	4283      	cmp	r3, r0
    c2a4:	d02f      	beq.n	c306 <MiMem_Free+0x6e>
    c2a6:	681b      	ldr	r3, [r3, #0]
    c2a8:	2b00      	cmp	r3, #0
    c2aa:	d02b      	beq.n	c304 <MiMem_Free+0x6c>
    c2ac:	4298      	cmp	r0, r3
    c2ae:	d1fa      	bne.n	c2a6 <MiMem_Free+0xe>
		blockPtr->free = true;
    c2b0:	2301      	movs	r3, #1
    c2b2:	7303      	strb	r3, [r0, #12]
		totalFreeBytesRemaining += blockPtr->size;
    c2b4:	6881      	ldr	r1, [r0, #8]
    c2b6:	4a16      	ldr	r2, [pc, #88]	; (c310 <MiMem_Free+0x78>)
    c2b8:	6813      	ldr	r3, [r2, #0]
    c2ba:	185b      	adds	r3, r3, r1
    c2bc:	6013      	str	r3, [r2, #0]
		if (blockPtr->prev && blockPtr->prev->free)
    c2be:	6843      	ldr	r3, [r0, #4]
    c2c0:	2b00      	cmp	r3, #0
    c2c2:	d00f      	beq.n	c2e4 <MiMem_Free+0x4c>
    c2c4:	7b1a      	ldrb	r2, [r3, #12]
    c2c6:	2a00      	cmp	r2, #0
    c2c8:	d00c      	beq.n	c2e4 <MiMem_Free+0x4c>
			blockPtr->prev->size += blockPtr->size;
    c2ca:	689a      	ldr	r2, [r3, #8]
    c2cc:	4694      	mov	ip, r2
    c2ce:	4461      	add	r1, ip
    c2d0:	6099      	str	r1, [r3, #8]
			if (blockPtr->next)
    c2d2:	6803      	ldr	r3, [r0, #0]
    c2d4:	2b00      	cmp	r3, #0
    c2d6:	d001      	beq.n	c2dc <MiMem_Free+0x44>
			blockPtr->next->prev = blockPtr->prev;
    c2d8:	6842      	ldr	r2, [r0, #4]
    c2da:	605a      	str	r2, [r3, #4]
			blockPtr->prev->next = blockPtr->next;
    c2dc:	6843      	ldr	r3, [r0, #4]
    c2de:	6802      	ldr	r2, [r0, #0]
    c2e0:	601a      	str	r2, [r3, #0]
			blockPtr = blockPtr->prev;
    c2e2:	6840      	ldr	r0, [r0, #4]
		if (blockPtr->next && blockPtr->next->free)
    c2e4:	6803      	ldr	r3, [r0, #0]
    c2e6:	2b00      	cmp	r3, #0
    c2e8:	d00c      	beq.n	c304 <MiMem_Free+0x6c>
    c2ea:	7b1a      	ldrb	r2, [r3, #12]
    c2ec:	2a00      	cmp	r2, #0
    c2ee:	d009      	beq.n	c304 <MiMem_Free+0x6c>
			blockPtr->size += blockPtr->next->size ;
    c2f0:	6882      	ldr	r2, [r0, #8]
    c2f2:	6899      	ldr	r1, [r3, #8]
    c2f4:	468c      	mov	ip, r1
    c2f6:	4462      	add	r2, ip
    c2f8:	6082      	str	r2, [r0, #8]
			blockPtr->next = blockPtr->next->next;
    c2fa:	681b      	ldr	r3, [r3, #0]
    c2fc:	6003      	str	r3, [r0, #0]
			if (blockPtr->next)
    c2fe:	2b00      	cmp	r3, #0
    c300:	d000      	beq.n	c304 <MiMem_Free+0x6c>
			blockPtr->next->prev = blockPtr;
    c302:	6058      	str	r0, [r3, #4]
}
    c304:	4770      	bx	lr
	Block_t* blockPtr = base;
    c306:	0018      	movs	r0, r3
    c308:	e7d2      	b.n	c2b0 <MiMem_Free+0x18>
    c30a:	46c0      	nop			; (mov r8, r8)
    c30c:	2000049c 	.word	0x2000049c
    c310:	20001ca0 	.word	0x20001ca0

0000c314 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    c314:	b530      	push	{r4, r5, lr}
	if (timers) {
    c316:	4b14      	ldr	r3, [pc, #80]	; (c368 <placeTimer+0x54>)
    c318:	681d      	ldr	r5, [r3, #0]
    c31a:	2d00      	cmp	r5, #0
    c31c:	d01c      	beq.n	c358 <placeTimer+0x44>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    c31e:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    c320:	6869      	ldr	r1, [r5, #4]
    c322:	428a      	cmp	r2, r1
    c324:	d309      	bcc.n	c33a <placeTimer+0x26>
    c326:	002c      	movs	r4, r5
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    c328:	1a52      	subs	r2, r2, r1
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    c32a:	6823      	ldr	r3, [r4, #0]
    c32c:	2b00      	cmp	r3, #0
    c32e:	d008      	beq.n	c342 <placeTimer+0x2e>
			if (timeout < t->timeout) {
    c330:	6859      	ldr	r1, [r3, #4]
    c332:	4291      	cmp	r1, r2
    c334:	d803      	bhi.n	c33e <placeTimer+0x2a>
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    c336:	001c      	movs	r4, r3
    c338:	e7f6      	b.n	c328 <placeTimer+0x14>
    c33a:	002b      	movs	r3, r5
		SYS_Timer_t *prev = NULL;
    c33c:	2400      	movs	r4, #0
				t->timeout -= timeout;
    c33e:	1a89      	subs	r1, r1, r2
    c340:	6059      	str	r1, [r3, #4]
			}

			prev = t;
		}

		timer->timeout = timeout;
    c342:	6042      	str	r2, [r0, #4]

		if (prev) {
    c344:	2c00      	cmp	r4, #0
    c346:	d003      	beq.n	c350 <placeTimer+0x3c>
			timer->next = prev->next;
    c348:	6823      	ldr	r3, [r4, #0]
    c34a:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    c34c:	6020      	str	r0, [r4, #0]
	} else {
		timer->next = NULL;
		timer->timeout = timer->interval;
		timers = timer;
	}
}
    c34e:	bd30      	pop	{r4, r5, pc}
			timer->next = timers;
    c350:	6005      	str	r5, [r0, #0]
			timers = timer;
    c352:	4b05      	ldr	r3, [pc, #20]	; (c368 <placeTimer+0x54>)
    c354:	6018      	str	r0, [r3, #0]
    c356:	e7fa      	b.n	c34e <placeTimer+0x3a>
		timer->next = NULL;
    c358:	2300      	movs	r3, #0
    c35a:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    c35c:	6883      	ldr	r3, [r0, #8]
    c35e:	6043      	str	r3, [r0, #4]
		timers = timer;
    c360:	4b01      	ldr	r3, [pc, #4]	; (c368 <placeTimer+0x54>)
    c362:	6018      	str	r0, [r3, #0]
}
    c364:	e7f3      	b.n	c34e <placeTimer+0x3a>
    c366:	46c0      	nop			; (mov r8, r8)
    c368:	20001ca4 	.word	0x20001ca4

0000c36c <SYS_HwOverflow_Cb>:
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
}

void SYS_HwOverflow_Cb(void)
{
	timerExtension1++;
    c36c:	4a06      	ldr	r2, [pc, #24]	; (c388 <SYS_HwOverflow_Cb+0x1c>)
    c36e:	7813      	ldrb	r3, [r2, #0]
    c370:	3301      	adds	r3, #1
    c372:	b2db      	uxtb	r3, r3
    c374:	7013      	strb	r3, [r2, #0]
	if(timerExtension1 == 0)
    c376:	7813      	ldrb	r3, [r2, #0]
    c378:	2b00      	cmp	r3, #0
    c37a:	d104      	bne.n	c386 <SYS_HwOverflow_Cb+0x1a>
	{
		timerExtension2++;
    c37c:	4a03      	ldr	r2, [pc, #12]	; (c38c <SYS_HwOverflow_Cb+0x20>)
    c37e:	7813      	ldrb	r3, [r2, #0]
    c380:	3301      	adds	r3, #1
    c382:	b2db      	uxtb	r3, r3
    c384:	7013      	strb	r3, [r2, #0]
	}
}
    c386:	4770      	bx	lr
    c388:	20002b44 	.word	0x20002b44
    c38c:	20002b45 	.word	0x20002b45

0000c390 <SYS_TimerStop>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    c390:	4b0e      	ldr	r3, [pc, #56]	; (c3cc <SYS_TimerStop+0x3c>)
    c392:	681a      	ldr	r2, [r3, #0]
    c394:	2a00      	cmp	r2, #0
    c396:	d014      	beq.n	c3c2 <SYS_TimerStop+0x32>
		if (t == timer) {
    c398:	4282      	cmp	r2, r0
    c39a:	d013      	beq.n	c3c4 <SYS_TimerStop+0x34>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    c39c:	6813      	ldr	r3, [r2, #0]
    c39e:	2b00      	cmp	r3, #0
    c3a0:	d00f      	beq.n	c3c2 <SYS_TimerStop+0x32>
		if (t == timer) {
    c3a2:	4298      	cmp	r0, r3
    c3a4:	d001      	beq.n	c3aa <SYS_TimerStop+0x1a>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    c3a6:	001a      	movs	r2, r3
    c3a8:	e7f8      	b.n	c39c <SYS_TimerStop+0xc>
			if (prev) {
    c3aa:	2a00      	cmp	r2, #0
    c3ac:	d00a      	beq.n	c3c4 <SYS_TimerStop+0x34>
				prev->next = t->next;
    c3ae:	6803      	ldr	r3, [r0, #0]
    c3b0:	6013      	str	r3, [r2, #0]
			if (t->next) {
    c3b2:	6803      	ldr	r3, [r0, #0]
    c3b4:	2b00      	cmp	r3, #0
    c3b6:	d004      	beq.n	c3c2 <SYS_TimerStop+0x32>
				t->next->timeout += timer->timeout;
    c3b8:	6842      	ldr	r2, [r0, #4]
    c3ba:	6859      	ldr	r1, [r3, #4]
    c3bc:	468c      	mov	ip, r1
    c3be:	4462      	add	r2, ip
    c3c0:	605a      	str	r2, [r3, #4]
}
    c3c2:	4770      	bx	lr
				timers = t->next;
    c3c4:	4b01      	ldr	r3, [pc, #4]	; (c3cc <SYS_TimerStop+0x3c>)
    c3c6:	6802      	ldr	r2, [r0, #0]
    c3c8:	601a      	str	r2, [r3, #0]
    c3ca:	e7f2      	b.n	c3b2 <SYS_TimerStop+0x22>
    c3cc:	20001ca4 	.word	0x20001ca4

0000c3d0 <SYS_TimerStarted>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    c3d0:	4b09      	ldr	r3, [pc, #36]	; (c3f8 <SYS_TimerStarted+0x28>)
    c3d2:	681b      	ldr	r3, [r3, #0]
    c3d4:	2b00      	cmp	r3, #0
    c3d6:	d00a      	beq.n	c3ee <SYS_TimerStarted+0x1e>
		if (t == timer) {
    c3d8:	4283      	cmp	r3, r0
    c3da:	d00a      	beq.n	c3f2 <SYS_TimerStarted+0x22>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    c3dc:	681b      	ldr	r3, [r3, #0]
    c3de:	2b00      	cmp	r3, #0
    c3e0:	d003      	beq.n	c3ea <SYS_TimerStarted+0x1a>
		if (t == timer) {
    c3e2:	4298      	cmp	r0, r3
    c3e4:	d1fa      	bne.n	c3dc <SYS_TimerStarted+0xc>
			return true;
    c3e6:	2001      	movs	r0, #1
    c3e8:	e000      	b.n	c3ec <SYS_TimerStarted+0x1c>
	return false;
    c3ea:	2000      	movs	r0, #0
}
    c3ec:	4770      	bx	lr
	return false;
    c3ee:	2000      	movs	r0, #0
    c3f0:	e7fc      	b.n	c3ec <SYS_TimerStarted+0x1c>
			return true;
    c3f2:	2001      	movs	r0, #1
    c3f4:	e7fa      	b.n	c3ec <SYS_TimerStarted+0x1c>
    c3f6:	46c0      	nop			; (mov r8, r8)
    c3f8:	20001ca4 	.word	0x20001ca4

0000c3fc <SYS_TimerStart>:
{
    c3fc:	b510      	push	{r4, lr}
    c3fe:	0004      	movs	r4, r0
	if (!SYS_TimerStarted(timer)) {
    c400:	4b04      	ldr	r3, [pc, #16]	; (c414 <SYS_TimerStart+0x18>)
    c402:	4798      	blx	r3
    c404:	2800      	cmp	r0, #0
    c406:	d000      	beq.n	c40a <SYS_TimerStart+0xe>
}
    c408:	bd10      	pop	{r4, pc}
		placeTimer(timer);
    c40a:	0020      	movs	r0, r4
    c40c:	4b02      	ldr	r3, [pc, #8]	; (c418 <SYS_TimerStart+0x1c>)
    c40e:	4798      	blx	r3
}
    c410:	e7fa      	b.n	c408 <SYS_TimerStart+0xc>
    c412:	46c0      	nop			; (mov r8, r8)
    c414:	0000c3d1 	.word	0x0000c3d1
    c418:	0000c315 	.word	0x0000c315

0000c41c <MiWi_TickGet>:
{
    c41c:	b570      	push	{r4, r5, r6, lr}
	uint8_t current_timerExtension1 = timerExtension1;
    c41e:	4e11      	ldr	r6, [pc, #68]	; (c464 <MiWi_TickGet+0x48>)
    c420:	7835      	ldrb	r5, [r6, #0]
    c422:	b2ed      	uxtb	r5, r5
	tmr_disable_ovf_interrupt();
    c424:	4b10      	ldr	r3, [pc, #64]	; (c468 <MiWi_TickGet+0x4c>)
    c426:	4798      	blx	r3
	currentTime.word.w0 = common_tc_read_count();
    c428:	4b10      	ldr	r3, [pc, #64]	; (c46c <MiWi_TickGet+0x50>)
    c42a:	4798      	blx	r3
    c42c:	0004      	movs	r4, r0
	tmr_enable_ovf_interrupt();
    c42e:	4b10      	ldr	r3, [pc, #64]	; (c470 <MiWi_TickGet+0x54>)
    c430:	4798      	blx	r3
  __ASM volatile ("nop");
    c432:	46c0      	nop			; (mov r8, r8)
	if (current_timerExtension1 != timerExtension1)
    c434:	7833      	ldrb	r3, [r6, #0]
    c436:	b2db      	uxtb	r3, r3
    c438:	429d      	cmp	r5, r3
    c43a:	d004      	beq.n	c446 <MiWi_TickGet+0x2a>
		currentTime.word.w0 = common_tc_read_count();
    c43c:	4b0b      	ldr	r3, [pc, #44]	; (c46c <MiWi_TickGet+0x50>)
    c43e:	4798      	blx	r3
    c440:	0c24      	lsrs	r4, r4, #16
    c442:	0424      	lsls	r4, r4, #16
    c444:	4304      	orrs	r4, r0
    currentTime.byte.b2 = timerExtension1;
    c446:	4b07      	ldr	r3, [pc, #28]	; (c464 <MiWi_TickGet+0x48>)
    c448:	781b      	ldrb	r3, [r3, #0]
    c44a:	041b      	lsls	r3, r3, #16
    c44c:	4809      	ldr	r0, [pc, #36]	; (c474 <MiWi_TickGet+0x58>)
    c44e:	4004      	ands	r4, r0
    c450:	431c      	orrs	r4, r3
    currentTime.byte.b3 = timerExtension2;
    c452:	4b09      	ldr	r3, [pc, #36]	; (c478 <MiWi_TickGet+0x5c>)
    c454:	781b      	ldrb	r3, [r3, #0]
    c456:	061b      	lsls	r3, r3, #24
    c458:	0224      	lsls	r4, r4, #8
    c45a:	0a24      	lsrs	r4, r4, #8
    c45c:	431c      	orrs	r4, r3
}
    c45e:	0020      	movs	r0, r4
    c460:	bd70      	pop	{r4, r5, r6, pc}
    c462:	46c0      	nop			; (mov r8, r8)
    c464:	20002b44 	.word	0x20002b44
    c468:	0000dea5 	.word	0x0000dea5
    c46c:	000135f5 	.word	0x000135f5
    c470:	0000deb9 	.word	0x0000deb9
    c474:	ff00ffff 	.word	0xff00ffff
    c478:	20002b45 	.word	0x20002b45

0000c47c <MiWi_TickGetDiff>:
	if (current_tick.Val > previous_tick.Val)
    c47c:	4288      	cmp	r0, r1
    c47e:	d802      	bhi.n	c486 <MiWi_TickGetDiff+0xa>
		ret_val = (0xFFFFFFFF - previous_tick.Val) + current_tick.Val;
    c480:	3801      	subs	r0, #1
    c482:	1a40      	subs	r0, r0, r1
}
    c484:	4770      	bx	lr
		ret_val = current_tick.Val - previous_tick.Val;
    c486:	1a40      	subs	r0, r0, r1
    c488:	e7fc      	b.n	c484 <MiWi_TickGetDiff+0x8>
    c48a:	Address 0x0000c48a is out of bounds.


0000c48c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    c48c:	b570      	push	{r4, r5, r6, lr}
    c48e:	b082      	sub	sp, #8
    c490:	0005      	movs	r5, r0
    c492:	000e      	movs	r6, r1
	uint16_t temp = 0;
    c494:	2200      	movs	r2, #0
    c496:	466b      	mov	r3, sp
    c498:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    c49a:	4c06      	ldr	r4, [pc, #24]	; (c4b4 <usart_serial_getchar+0x28>)
    c49c:	466b      	mov	r3, sp
    c49e:	1d99      	adds	r1, r3, #6
    c4a0:	0028      	movs	r0, r5
    c4a2:	47a0      	blx	r4
    c4a4:	2800      	cmp	r0, #0
    c4a6:	d1f9      	bne.n	c49c <usart_serial_getchar+0x10>

	*c = temp;
    c4a8:	466b      	mov	r3, sp
    c4aa:	3306      	adds	r3, #6
    c4ac:	881b      	ldrh	r3, [r3, #0]
    c4ae:	7033      	strb	r3, [r6, #0]
}
    c4b0:	b002      	add	sp, #8
    c4b2:	bd70      	pop	{r4, r5, r6, pc}
    c4b4:	00006701 	.word	0x00006701

0000c4b8 <usart_serial_putchar>:
{
    c4b8:	b570      	push	{r4, r5, r6, lr}
    c4ba:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    c4bc:	b28c      	uxth	r4, r1
    c4be:	4e03      	ldr	r6, [pc, #12]	; (c4cc <usart_serial_putchar+0x14>)
    c4c0:	0021      	movs	r1, r4
    c4c2:	0028      	movs	r0, r5
    c4c4:	47b0      	blx	r6
    c4c6:	2800      	cmp	r0, #0
    c4c8:	d1fa      	bne.n	c4c0 <usart_serial_putchar+0x8>
}
    c4ca:	bd70      	pop	{r4, r5, r6, pc}
    c4cc:	000066d5 	.word	0x000066d5

0000c4d0 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35 || WLR089
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    c4d0:	b510      	push	{r4, lr}
    c4d2:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    c4d4:	466b      	mov	r3, sp
    c4d6:	1ddc      	adds	r4, r3, #7
    c4d8:	2201      	movs	r2, #1
    c4da:	0021      	movs	r1, r4
    c4dc:	480f      	ldr	r0, [pc, #60]	; (c51c <USART_HOST_ISR_VECT+0x4c>)
    c4de:	4b10      	ldr	r3, [pc, #64]	; (c520 <USART_HOST_ISR_VECT+0x50>)
    c4e0:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    c4e2:	b672      	cpsid	i
  __ASM volatile ("dmb");
    c4e4:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    c4e8:	2200      	movs	r2, #0
    c4ea:	4b0e      	ldr	r3, [pc, #56]	; (c524 <USART_HOST_ISR_VECT+0x54>)
    c4ec:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    c4ee:	4b0e      	ldr	r3, [pc, #56]	; (c528 <USART_HOST_ISR_VECT+0x58>)
    c4f0:	781b      	ldrb	r3, [r3, #0]
    c4f2:	7821      	ldrb	r1, [r4, #0]
    c4f4:	4a0d      	ldr	r2, [pc, #52]	; (c52c <USART_HOST_ISR_VECT+0x5c>)
    c4f6:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    c4f8:	2b7f      	cmp	r3, #127	; 0x7f
    c4fa:	d00a      	beq.n	c512 <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    c4fc:	3301      	adds	r3, #1
    c4fe:	4a0a      	ldr	r2, [pc, #40]	; (c528 <USART_HOST_ISR_VECT+0x58>)
    c500:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    c502:	2201      	movs	r2, #1
    c504:	4b07      	ldr	r3, [pc, #28]	; (c524 <USART_HOST_ISR_VECT+0x54>)
    c506:	701a      	strb	r2, [r3, #0]
    c508:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    c50c:	b662      	cpsie	i
}
    c50e:	b002      	add	sp, #8
    c510:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
    c512:	2200      	movs	r2, #0
    c514:	4b04      	ldr	r3, [pc, #16]	; (c528 <USART_HOST_ISR_VECT+0x58>)
    c516:	701a      	strb	r2, [r3, #0]
    c518:	e7f3      	b.n	c502 <USART_HOST_ISR_VECT+0x32>
    c51a:	46c0      	nop			; (mov r8, r8)
    c51c:	20001ca8 	.word	0x20001ca8
    c520:	00006831 	.word	0x00006831
    c524:	20000014 	.word	0x20000014
    c528:	20001d5c 	.word	0x20001d5c
    c52c:	20001cdc 	.word	0x20001cdc

0000c530 <sio2host_init>:
{
    c530:	b5f0      	push	{r4, r5, r6, r7, lr}
    c532:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    c534:	2380      	movs	r3, #128	; 0x80
    c536:	05db      	lsls	r3, r3, #23
    c538:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    c53a:	2300      	movs	r3, #0
    c53c:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    c53e:	22ff      	movs	r2, #255	; 0xff
    c540:	4669      	mov	r1, sp
    c542:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    c544:	2200      	movs	r2, #0
    c546:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    c548:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    c54a:	2401      	movs	r4, #1
    c54c:	2124      	movs	r1, #36	; 0x24
    c54e:	4668      	mov	r0, sp
    c550:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    c552:	3101      	adds	r1, #1
    c554:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    c556:	3101      	adds	r1, #1
    c558:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    c55a:	3101      	adds	r1, #1
    c55c:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    c55e:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    c560:	3105      	adds	r1, #5
    c562:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    c564:	3101      	adds	r1, #1
    c566:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    c568:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    c56a:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    c56c:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    c56e:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    c570:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    c572:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    c574:	2313      	movs	r3, #19
    c576:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    c578:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    c57a:	2380      	movs	r3, #128	; 0x80
    c57c:	035b      	lsls	r3, r3, #13
    c57e:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    c580:	4b2f      	ldr	r3, [pc, #188]	; (c640 <sio2host_init+0x110>)
    c582:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    c584:	4b2f      	ldr	r3, [pc, #188]	; (c644 <sio2host_init+0x114>)
    c586:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    c588:	2301      	movs	r3, #1
    c58a:	425b      	negs	r3, r3
    c58c:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    c58e:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    c590:	23e1      	movs	r3, #225	; 0xe1
    c592:	025b      	lsls	r3, r3, #9
    c594:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    c596:	4d2c      	ldr	r5, [pc, #176]	; (c648 <sio2host_init+0x118>)
    c598:	4b2c      	ldr	r3, [pc, #176]	; (c64c <sio2host_init+0x11c>)
    c59a:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    c59c:	4a2c      	ldr	r2, [pc, #176]	; (c650 <sio2host_init+0x120>)
    c59e:	4b2d      	ldr	r3, [pc, #180]	; (c654 <sio2host_init+0x124>)
    c5a0:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    c5a2:	4a2d      	ldr	r2, [pc, #180]	; (c658 <sio2host_init+0x128>)
    c5a4:	4b2d      	ldr	r3, [pc, #180]	; (c65c <sio2host_init+0x12c>)
    c5a6:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    c5a8:	466a      	mov	r2, sp
    c5aa:	2184      	movs	r1, #132	; 0x84
    c5ac:	05c9      	lsls	r1, r1, #23
    c5ae:	0028      	movs	r0, r5
    c5b0:	4b2b      	ldr	r3, [pc, #172]	; (c660 <sio2host_init+0x130>)
    c5b2:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    c5b4:	4f2b      	ldr	r7, [pc, #172]	; (c664 <sio2host_init+0x134>)
    c5b6:	683b      	ldr	r3, [r7, #0]
    c5b8:	6898      	ldr	r0, [r3, #8]
    c5ba:	2100      	movs	r1, #0
    c5bc:	4e2a      	ldr	r6, [pc, #168]	; (c668 <sio2host_init+0x138>)
    c5be:	47b0      	blx	r6
	setbuf(stdin, NULL);
    c5c0:	683b      	ldr	r3, [r7, #0]
    c5c2:	6858      	ldr	r0, [r3, #4]
    c5c4:	2100      	movs	r1, #0
    c5c6:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    c5c8:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    c5ca:	0030      	movs	r0, r6
    c5cc:	4b27      	ldr	r3, [pc, #156]	; (c66c <sio2host_init+0x13c>)
    c5ce:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    c5d0:	231f      	movs	r3, #31
    c5d2:	4018      	ands	r0, r3
    c5d4:	4084      	lsls	r4, r0
    c5d6:	4b26      	ldr	r3, [pc, #152]	; (c670 <sio2host_init+0x140>)
    c5d8:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    c5da:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    c5dc:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    c5de:	2b00      	cmp	r3, #0
    c5e0:	d1fc      	bne.n	c5dc <sio2host_init+0xac>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    c5e2:	6833      	ldr	r3, [r6, #0]
    c5e4:	2202      	movs	r2, #2
    c5e6:	4313      	orrs	r3, r2
    c5e8:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    c5ea:	4b17      	ldr	r3, [pc, #92]	; (c648 <sio2host_init+0x118>)
    c5ec:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    c5ee:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    c5f0:	2a00      	cmp	r2, #0
    c5f2:	d1fc      	bne.n	c5ee <sio2host_init+0xbe>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    c5f4:	6859      	ldr	r1, [r3, #4]
    c5f6:	2280      	movs	r2, #128	; 0x80
    c5f8:	0252      	lsls	r2, r2, #9
    c5fa:	430a      	orrs	r2, r1
    c5fc:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    c5fe:	2101      	movs	r1, #1
    c600:	4a11      	ldr	r2, [pc, #68]	; (c648 <sio2host_init+0x118>)
    c602:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    c604:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    c606:	2a00      	cmp	r2, #0
    c608:	d1fc      	bne.n	c604 <sio2host_init+0xd4>
	return (usart_hw->SYNCBUSY.reg);
    c60a:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    c60c:	2a00      	cmp	r2, #0
    c60e:	d1fc      	bne.n	c60a <sio2host_init+0xda>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    c610:	6859      	ldr	r1, [r3, #4]
    c612:	2280      	movs	r2, #128	; 0x80
    c614:	0292      	lsls	r2, r2, #10
    c616:	430a      	orrs	r2, r1
    c618:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    c61a:	2101      	movs	r1, #1
    c61c:	4a0a      	ldr	r2, [pc, #40]	; (c648 <sio2host_init+0x118>)
    c61e:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    c620:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    c622:	2a00      	cmp	r2, #0
    c624:	d1fc      	bne.n	c620 <sio2host_init+0xf0>
	USART_HOST_RX_ISR_ENABLE();
    c626:	4913      	ldr	r1, [pc, #76]	; (c674 <sio2host_init+0x144>)
    c628:	2000      	movs	r0, #0
    c62a:	4b13      	ldr	r3, [pc, #76]	; (c678 <sio2host_init+0x148>)
    c62c:	4798      	blx	r3
    c62e:	2204      	movs	r2, #4
    c630:	2384      	movs	r3, #132	; 0x84
    c632:	05db      	lsls	r3, r3, #23
    c634:	759a      	strb	r2, [r3, #22]
    c636:	32fc      	adds	r2, #252	; 0xfc
    c638:	4b0d      	ldr	r3, [pc, #52]	; (c670 <sio2host_init+0x140>)
    c63a:	601a      	str	r2, [r3, #0]
}
    c63c:	b011      	add	sp, #68	; 0x44
    c63e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c640:	00040003 	.word	0x00040003
    c644:	00050003 	.word	0x00050003
    c648:	20001ca8 	.word	0x20001ca8
    c64c:	2000215c 	.word	0x2000215c
    c650:	0000c4b9 	.word	0x0000c4b9
    c654:	20002158 	.word	0x20002158
    c658:	0000c48d 	.word	0x0000c48d
    c65c:	20002154 	.word	0x20002154
    c660:	00006369 	.word	0x00006369
    c664:	2000002c 	.word	0x2000002c
    c668:	000171cd 	.word	0x000171cd
    c66c:	00005c95 	.word	0x00005c95
    c670:	e000e100 	.word	0xe000e100
    c674:	0000c4d1 	.word	0x0000c4d1
    c678:	00005c59 	.word	0x00005c59

0000c67c <sio2host_tx>:
{
    c67c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c67e:	b083      	sub	sp, #12
    c680:	0006      	movs	r6, r0
    c682:	9101      	str	r1, [sp, #4]
	return usart_write_buffer_wait(module, tx_data, length);
    c684:	466b      	mov	r3, sp
    c686:	889d      	ldrh	r5, [r3, #4]
    c688:	4c05      	ldr	r4, [pc, #20]	; (c6a0 <sio2host_tx+0x24>)
    c68a:	4f06      	ldr	r7, [pc, #24]	; (c6a4 <sio2host_tx+0x28>)
    c68c:	002a      	movs	r2, r5
    c68e:	0031      	movs	r1, r6
    c690:	0020      	movs	r0, r4
    c692:	47b8      	blx	r7
	} while (status != STATUS_OK);
    c694:	2800      	cmp	r0, #0
    c696:	d1f9      	bne.n	c68c <sio2host_tx+0x10>
}
    c698:	9801      	ldr	r0, [sp, #4]
    c69a:	b003      	add	sp, #12
    c69c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c69e:	46c0      	nop			; (mov r8, r8)
    c6a0:	20001ca8 	.word	0x20001ca8
    c6a4:	00006771 	.word	0x00006771

0000c6a8 <sio2host_putchar>:
{
    c6a8:	b500      	push	{lr}
    c6aa:	b083      	sub	sp, #12
    c6ac:	466b      	mov	r3, sp
    c6ae:	71d8      	strb	r0, [r3, #7]
    c6b0:	3307      	adds	r3, #7
	sio2host_tx(&ch, 1);
    c6b2:	2101      	movs	r1, #1
    c6b4:	0018      	movs	r0, r3
    c6b6:	4b02      	ldr	r3, [pc, #8]	; (c6c0 <sio2host_putchar+0x18>)
    c6b8:	4798      	blx	r3
}
    c6ba:	b003      	add	sp, #12
    c6bc:	bd00      	pop	{pc}
    c6be:	46c0      	nop			; (mov r8, r8)
    c6c0:	0000c67d 	.word	0x0000c67d

0000c6c4 <HAL_SPISend>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    c6c4:	4b13      	ldr	r3, [pc, #76]	; (c714 <HAL_SPISend+0x50>)
    c6c6:	681b      	ldr	r3, [r3, #0]
static uint8_t HAL_SPISend(uint8_t data)
{
	uint16_t read_val = 0;
	
	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master));
    c6c8:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    c6ca:	7e1a      	ldrb	r2, [r3, #24]
    c6cc:	420a      	tst	r2, r1
    c6ce:	d0fc      	beq.n	c6ca <HAL_SPISend+0x6>
    c6d0:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    c6d2:	07d2      	lsls	r2, r2, #31
    c6d4:	d500      	bpl.n	c6d8 <HAL_SPISend+0x14>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    c6d6:	6298      	str	r0, [r3, #40]	; 0x28
	spi_write(&master, data);
	while (!spi_is_write_complete(&master));
    c6d8:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    c6da:	7e1a      	ldrb	r2, [r3, #24]
    c6dc:	420a      	tst	r2, r1
    c6de:	d0fc      	beq.n	c6da <HAL_SPISend+0x16>
	
	while (!spi_is_ready_to_read(&master));
    c6e0:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    c6e2:	7e1a      	ldrb	r2, [r3, #24]
    c6e4:	420a      	tst	r2, r1
    c6e6:	d0fc      	beq.n	c6e2 <HAL_SPISend+0x1e>
    c6e8:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t read_val = 0;
    c6ea:	2000      	movs	r0, #0
	if (!spi_is_ready_to_read(module)) {
    c6ec:	0752      	lsls	r2, r2, #29
    c6ee:	d50a      	bpl.n	c706 <HAL_SPISend+0x42>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    c6f0:	8b5a      	ldrh	r2, [r3, #26]
    c6f2:	0752      	lsls	r2, r2, #29
    c6f4:	d501      	bpl.n	c6fa <HAL_SPISend+0x36>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    c6f6:	2204      	movs	r2, #4
    c6f8:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    c6fa:	4a06      	ldr	r2, [pc, #24]	; (c714 <HAL_SPISend+0x50>)
    c6fc:	7992      	ldrb	r2, [r2, #6]
    c6fe:	2a01      	cmp	r2, #1
    c700:	d003      	beq.n	c70a <HAL_SPISend+0x46>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    c702:	6a98      	ldr	r0, [r3, #40]	; 0x28
    c704:	b2c0      	uxtb	r0, r0
	spi_read(&master, &read_val);
	
	return ((uint8_t)read_val);
    c706:	b2c0      	uxtb	r0, r0
}
    c708:	4770      	bx	lr
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    c70a:	6a98      	ldr	r0, [r3, #40]	; 0x28
    c70c:	05c0      	lsls	r0, r0, #23
    c70e:	0dc0      	lsrs	r0, r0, #23
    c710:	e7f9      	b.n	c706 <HAL_SPISend+0x42>
    c712:	46c0      	nop			; (mov r8, r8)
    c714:	20001d6c 	.word	0x20001d6c

0000c718 <HAL_ResetPinMakeOutput>:
{
    c718:	b500      	push	{lr}
    c71a:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    c71c:	a901      	add	r1, sp, #4
    c71e:	2301      	movs	r3, #1
    c720:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    c722:	2200      	movs	r2, #0
    c724:	708a      	strb	r2, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    c726:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    c728:	202f      	movs	r0, #47	; 0x2f
    c72a:	4b02      	ldr	r3, [pc, #8]	; (c734 <HAL_ResetPinMakeOutput+0x1c>)
    c72c:	4798      	blx	r3
}
    c72e:	b003      	add	sp, #12
    c730:	bd00      	pop	{pc}
    c732:	46c0      	nop			; (mov r8, r8)
    c734:	00005151 	.word	0x00005151

0000c738 <HAL_RadioDIO2Callback>:
{
    c738:	b510      	push	{r4, lr}
  if (interruptHandlerDio2)
    c73a:	4b05      	ldr	r3, [pc, #20]	; (c750 <HAL_RadioDIO2Callback+0x18>)
    c73c:	681b      	ldr	r3, [r3, #0]
    c73e:	2b00      	cmp	r3, #0
    c740:	d004      	beq.n	c74c <HAL_RadioDIO2Callback+0x14>
	PMM_Wakeup();
    c742:	4b04      	ldr	r3, [pc, #16]	; (c754 <HAL_RadioDIO2Callback+0x1c>)
    c744:	4798      	blx	r3
    interruptHandlerDio2();
    c746:	4b02      	ldr	r3, [pc, #8]	; (c750 <HAL_RadioDIO2Callback+0x18>)
    c748:	681b      	ldr	r3, [r3, #0]
    c74a:	4798      	blx	r3
}
    c74c:	bd10      	pop	{r4, pc}
    c74e:	46c0      	nop			; (mov r8, r8)
    c750:	20001d68 	.word	0x20001d68
    c754:	0000cb99 	.word	0x0000cb99

0000c758 <HAL_RadioDIO1Callback>:
{
    c758:	b510      	push	{r4, lr}
  if (interruptHandlerDio1)
    c75a:	4b05      	ldr	r3, [pc, #20]	; (c770 <HAL_RadioDIO1Callback+0x18>)
    c75c:	681b      	ldr	r3, [r3, #0]
    c75e:	2b00      	cmp	r3, #0
    c760:	d004      	beq.n	c76c <HAL_RadioDIO1Callback+0x14>
	PMM_Wakeup();
    c762:	4b04      	ldr	r3, [pc, #16]	; (c774 <HAL_RadioDIO1Callback+0x1c>)
    c764:	4798      	blx	r3
    interruptHandlerDio1();
    c766:	4b02      	ldr	r3, [pc, #8]	; (c770 <HAL_RadioDIO1Callback+0x18>)
    c768:	681b      	ldr	r3, [r3, #0]
    c76a:	4798      	blx	r3
}
    c76c:	bd10      	pop	{r4, pc}
    c76e:	46c0      	nop			; (mov r8, r8)
    c770:	20001d64 	.word	0x20001d64
    c774:	0000cb99 	.word	0x0000cb99

0000c778 <HAL_RadioDIO0Callback>:
{
    c778:	b510      	push	{r4, lr}
  if (interruptHandlerDio0)
    c77a:	4b05      	ldr	r3, [pc, #20]	; (c790 <HAL_RadioDIO0Callback+0x18>)
    c77c:	681b      	ldr	r3, [r3, #0]
    c77e:	2b00      	cmp	r3, #0
    c780:	d004      	beq.n	c78c <HAL_RadioDIO0Callback+0x14>
	PMM_Wakeup();
    c782:	4b04      	ldr	r3, [pc, #16]	; (c794 <HAL_RadioDIO0Callback+0x1c>)
    c784:	4798      	blx	r3
    interruptHandlerDio0();
    c786:	4b02      	ldr	r3, [pc, #8]	; (c790 <HAL_RadioDIO0Callback+0x18>)
    c788:	681b      	ldr	r3, [r3, #0]
    c78a:	4798      	blx	r3
}
    c78c:	bd10      	pop	{r4, pc}
    c78e:	46c0      	nop			; (mov r8, r8)
    c790:	20001d60 	.word	0x20001d60
    c794:	0000cb99 	.word	0x0000cb99

0000c798 <HAL_SPICSAssert>:
{
    c798:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, true);
    c79a:	2201      	movs	r2, #1
    c79c:	4902      	ldr	r1, [pc, #8]	; (c7a8 <HAL_SPICSAssert+0x10>)
    c79e:	4803      	ldr	r0, [pc, #12]	; (c7ac <HAL_SPICSAssert+0x14>)
    c7a0:	4b03      	ldr	r3, [pc, #12]	; (c7b0 <HAL_SPICSAssert+0x18>)
    c7a2:	4798      	blx	r3
}
    c7a4:	bd10      	pop	{r4, pc}
    c7a6:	46c0      	nop			; (mov r8, r8)
    c7a8:	20002b48 	.word	0x20002b48
    c7ac:	20001d6c 	.word	0x20001d6c
    c7b0:	00006071 	.word	0x00006071

0000c7b4 <HAL_SPICSDeassert>:
{
    c7b4:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, false);
    c7b6:	2200      	movs	r2, #0
    c7b8:	4902      	ldr	r1, [pc, #8]	; (c7c4 <HAL_SPICSDeassert+0x10>)
    c7ba:	4803      	ldr	r0, [pc, #12]	; (c7c8 <HAL_SPICSDeassert+0x14>)
    c7bc:	4b03      	ldr	r3, [pc, #12]	; (c7cc <HAL_SPICSDeassert+0x18>)
    c7be:	4798      	blx	r3
}
    c7c0:	bd10      	pop	{r4, pc}
    c7c2:	46c0      	nop			; (mov r8, r8)
    c7c4:	20002b48 	.word	0x20002b48
    c7c8:	20001d6c 	.word	0x20001d6c
    c7cc:	00006071 	.word	0x00006071

0000c7d0 <HAL_RadioInit>:
{
    c7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c7d2:	46d6      	mov	lr, sl
    c7d4:	464f      	mov	r7, r9
    c7d6:	4646      	mov	r6, r8
    c7d8:	b5c0      	push	{r6, r7, lr}
    c7da:	b090      	sub	sp, #64	; 0x40
	config->input_pull = PORT_PIN_PULL_UP;
    c7dc:	ac01      	add	r4, sp, #4
    c7de:	2601      	movs	r6, #1
    c7e0:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    c7e2:	2500      	movs	r5, #0
    c7e4:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    c7e6:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(SX_RF_SPI_SCK, &pin_conf);
    c7e8:	0021      	movs	r1, r4
    c7ea:	2052      	movs	r0, #82	; 0x52
    c7ec:	4f52      	ldr	r7, [pc, #328]	; (c938 <HAL_RadioInit+0x168>)
    c7ee:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_MOSI, &pin_conf);
    c7f0:	0021      	movs	r1, r4
    c7f2:	203e      	movs	r0, #62	; 0x3e
    c7f4:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_CS, &pin_conf);
    c7f6:	0021      	movs	r1, r4
    c7f8:	203f      	movs	r0, #63	; 0x3f
    c7fa:	47b8      	blx	r7
	port_pin_set_config(SX_RF_RESET_PIN, &pin_conf);
    c7fc:	0021      	movs	r1, r4
    c7fe:	202f      	movs	r0, #47	; 0x2f
    c800:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    c802:	2280      	movs	r2, #128	; 0x80
    c804:	02d2      	lsls	r2, r2, #11
    c806:	4b4d      	ldr	r3, [pc, #308]	; (c93c <HAL_RadioInit+0x16c>)
    c808:	619a      	str	r2, [r3, #24]
    c80a:	4b4d      	ldr	r3, [pc, #308]	; (c940 <HAL_RadioInit+0x170>)
    c80c:	2280      	movs	r2, #128	; 0x80
    c80e:	05d2      	lsls	r2, r2, #23
    c810:	619a      	str	r2, [r3, #24]
    c812:	2280      	movs	r2, #128	; 0x80
    c814:	0612      	lsls	r2, r2, #24
    c816:	619a      	str	r2, [r3, #24]
    c818:	2280      	movs	r2, #128	; 0x80
    c81a:	0212      	lsls	r2, r2, #8
    c81c:	619a      	str	r2, [r3, #24]
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    c81e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(SX_RF_SPI_MISO, &pin_conf);
    c820:	0021      	movs	r1, r4
    c822:	2053      	movs	r0, #83	; 0x53
    c824:	47b8      	blx	r7
	extint_chan_get_config_defaults(&config_extint_chan);
    c826:	ac02      	add	r4, sp, #8
    c828:	0020      	movs	r0, r4
    c82a:	4b46      	ldr	r3, [pc, #280]	; (c944 <HAL_RadioInit+0x174>)
    c82c:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO0_EIC_PIN;
    c82e:	2330      	movs	r3, #48	; 0x30
    c830:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO0_EIC_MUX;
    c832:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    c834:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    c836:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO0_EIC_LINE, &config_extint_chan);
    c838:	0021      	movs	r1, r4
    c83a:	2000      	movs	r0, #0
    c83c:	4b42      	ldr	r3, [pc, #264]	; (c948 <HAL_RadioInit+0x178>)
    c83e:	469a      	mov	sl, r3
    c840:	4798      	blx	r3
	extint_register_callback(HAL_RadioDIO0Callback,DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    c842:	2200      	movs	r2, #0
    c844:	2100      	movs	r1, #0
    c846:	4841      	ldr	r0, [pc, #260]	; (c94c <HAL_RadioInit+0x17c>)
    c848:	4b41      	ldr	r3, [pc, #260]	; (c950 <HAL_RadioInit+0x180>)
    c84a:	4699      	mov	r9, r3
    c84c:	4798      	blx	r3
	extint_chan_enable_callback(DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    c84e:	2100      	movs	r1, #0
    c850:	2000      	movs	r0, #0
    c852:	4b40      	ldr	r3, [pc, #256]	; (c954 <HAL_RadioInit+0x184>)
    c854:	4698      	mov	r8, r3
    c856:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO1_EIC_PIN;
    c858:	230b      	movs	r3, #11
    c85a:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO1_EIC_MUX;
    c85c:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    c85e:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    c860:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO1_EIC_LINE, &config_extint_chan);
    c862:	0021      	movs	r1, r4
    c864:	200b      	movs	r0, #11
    c866:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO1Callback,DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    c868:	2200      	movs	r2, #0
    c86a:	210b      	movs	r1, #11
    c86c:	483a      	ldr	r0, [pc, #232]	; (c958 <HAL_RadioInit+0x188>)
    c86e:	47c8      	blx	r9
	extint_chan_enable_callback(DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    c870:	2100      	movs	r1, #0
    c872:	200b      	movs	r0, #11
    c874:	47c0      	blx	r8
	config_extint_chan.gpio_pin           = DIO2_EIC_PIN;
    c876:	230c      	movs	r3, #12
    c878:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO2_EIC_MUX;
    c87a:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    c87c:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    c87e:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO2_EIC_LINE, &config_extint_chan);
    c880:	0021      	movs	r1, r4
    c882:	200c      	movs	r0, #12
    c884:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO2Callback,DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    c886:	2200      	movs	r2, #0
    c888:	210c      	movs	r1, #12
    c88a:	4834      	ldr	r0, [pc, #208]	; (c95c <HAL_RadioInit+0x18c>)
    c88c:	47c8      	blx	r9
	extint_chan_enable_callback(DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    c88e:	2100      	movs	r1, #0
    c890:	200c      	movs	r0, #12
    c892:	47c0      	blx	r8
	slave->ss_pin          = config->ss_pin;
    c894:	4b32      	ldr	r3, [pc, #200]	; (c960 <HAL_RadioInit+0x190>)
    c896:	4698      	mov	r8, r3
    c898:	233f      	movs	r3, #63	; 0x3f
    c89a:	4642      	mov	r2, r8
    c89c:	7013      	strb	r3, [r2, #0]
	slave->address_enabled = config->address_enabled;
    c89e:	7055      	strb	r5, [r2, #1]
	slave->address         = config->address;
    c8a0:	7095      	strb	r5, [r2, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    c8a2:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    c8a4:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    c8a6:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    c8a8:	0021      	movs	r1, r4
    c8aa:	203f      	movs	r0, #63	; 0x3f
    c8ac:	47b8      	blx	r7
	port_pin_set_output_level(slave->ss_pin, true);
    c8ae:	4643      	mov	r3, r8
    c8b0:	781a      	ldrb	r2, [r3, #0]
	if (port_index < PORT_INST_NUM) {
    c8b2:	09d1      	lsrs	r1, r2, #7
		return NULL;
    c8b4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    c8b6:	2900      	cmp	r1, #0
    c8b8:	d104      	bne.n	c8c4 <HAL_RadioInit+0xf4>
		return &(ports[port_index]->Group[group_index]);
    c8ba:	0953      	lsrs	r3, r2, #5
    c8bc:	01db      	lsls	r3, r3, #7
    c8be:	4929      	ldr	r1, [pc, #164]	; (c964 <HAL_RadioInit+0x194>)
    c8c0:	468c      	mov	ip, r1
    c8c2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    c8c4:	211f      	movs	r1, #31
    c8c6:	4011      	ands	r1, r2
    c8c8:	2201      	movs	r2, #1
    c8ca:	0010      	movs	r0, r2
    c8cc:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    c8ce:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    c8d0:	ac02      	add	r4, sp, #8
    c8d2:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    c8d4:	2300      	movs	r3, #0
    c8d6:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    c8d8:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    c8da:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    c8dc:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    c8de:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    c8e0:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    c8e2:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    c8e4:	3223      	adds	r2, #35	; 0x23
    c8e6:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    c8e8:	3a18      	subs	r2, #24
    c8ea:	2100      	movs	r1, #0
    c8ec:	a808      	add	r0, sp, #32
    c8ee:	4b1e      	ldr	r3, [pc, #120]	; (c968 <HAL_RadioInit+0x198>)
    c8f0:	4798      	blx	r3
	config_spi_master.mode_specific.master.baudrate = SX_RF_SPI_BAUDRATE;
    c8f2:	4b1e      	ldr	r3, [pc, #120]	; (c96c <HAL_RadioInit+0x19c>)
    c8f4:	61a3      	str	r3, [r4, #24]
	config_spi_master.mux_setting = SX_RF_SPI_SERCOM_MUX_SETTING;
    c8f6:	2380      	movs	r3, #128	; 0x80
    c8f8:	025b      	lsls	r3, r3, #9
    c8fa:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = SX_RF_SPI_SERCOM_PINMUX_PAD0;
    c8fc:	4b1c      	ldr	r3, [pc, #112]	; (c970 <HAL_RadioInit+0x1a0>)
    c8fe:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    c900:	2301      	movs	r3, #1
    c902:	425b      	negs	r3, r3
    c904:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = SX_RF_SPI_SERCOM_PINMUX_PAD2;
    c906:	4b1b      	ldr	r3, [pc, #108]	; (c974 <HAL_RadioInit+0x1a4>)
    c908:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = SX_RF_SPI_SERCOM_PINMUX_PAD3;
    c90a:	4b1b      	ldr	r3, [pc, #108]	; (c978 <HAL_RadioInit+0x1a8>)
    c90c:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, SX_RF_SPI, &config_spi_master);	
    c90e:	4d1b      	ldr	r5, [pc, #108]	; (c97c <HAL_RadioInit+0x1ac>)
    c910:	0022      	movs	r2, r4
    c912:	491b      	ldr	r1, [pc, #108]	; (c980 <HAL_RadioInit+0x1b0>)
    c914:	0028      	movs	r0, r5
    c916:	4b1b      	ldr	r3, [pc, #108]	; (c984 <HAL_RadioInit+0x1b4>)
    c918:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    c91a:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    c91c:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    c91e:	2b00      	cmp	r3, #0
    c920:	d1fc      	bne.n	c91c <HAL_RadioInit+0x14c>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    c922:	6813      	ldr	r3, [r2, #0]
    c924:	2102      	movs	r1, #2
    c926:	430b      	orrs	r3, r1
    c928:	6013      	str	r3, [r2, #0]
}
    c92a:	b010      	add	sp, #64	; 0x40
    c92c:	bc1c      	pop	{r2, r3, r4}
    c92e:	4690      	mov	r8, r2
    c930:	4699      	mov	r9, r3
    c932:	46a2      	mov	sl, r4
    c934:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c936:	46c0      	nop			; (mov r8, r8)
    c938:	00005151 	.word	0x00005151
    c93c:	40002900 	.word	0x40002900
    c940:	40002880 	.word	0x40002880
    c944:	00004e9d 	.word	0x00004e9d
    c948:	00004eb1 	.word	0x00004eb1
    c94c:	0000c779 	.word	0x0000c779
    c950:	00004d5d 	.word	0x00004d5d
    c954:	00004d89 	.word	0x00004d89
    c958:	0000c759 	.word	0x0000c759
    c95c:	0000c739 	.word	0x0000c739
    c960:	20002b48 	.word	0x20002b48
    c964:	40002800 	.word	0x40002800
    c968:	00016a21 	.word	0x00016a21
    c96c:	001e8480 	.word	0x001e8480
    c970:	00530005 	.word	0x00530005
    c974:	003e0005 	.word	0x003e0005
    c978:	00520005 	.word	0x00520005
    c97c:	20001d6c 	.word	0x20001d6c
    c980:	42001000 	.word	0x42001000
    c984:	00005d25 	.word	0x00005d25

0000c988 <RADIO_Reset>:
{
    c988:	b570      	push	{r4, r5, r6, lr}
    c98a:	b082      	sub	sp, #8
	HAL_ResetPinMakeOutput();
    c98c:	4c0a      	ldr	r4, [pc, #40]	; (c9b8 <RADIO_Reset+0x30>)
    c98e:	47a0      	blx	r4
		port_base->OUTCLR.reg = pin_mask;
    c990:	4d0a      	ldr	r5, [pc, #40]	; (c9bc <RADIO_Reset+0x34>)
    c992:	2680      	movs	r6, #128	; 0x80
    c994:	0236      	lsls	r6, r6, #8
    c996:	616e      	str	r6, [r5, #20]
	SystemBlockingWaitMs(1);
    c998:	2001      	movs	r0, #1
    c99a:	4b09      	ldr	r3, [pc, #36]	; (c9c0 <RADIO_Reset+0x38>)
    c99c:	4798      	blx	r3
	config->direction  = PORT_PIN_DIR_INPUT;
    c99e:	a901      	add	r1, sp, #4
    c9a0:	2300      	movs	r3, #0
    c9a2:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    c9a4:	2201      	movs	r2, #1
    c9a6:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    c9a8:	708b      	strb	r3, [r1, #2]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    c9aa:	202f      	movs	r0, #47	; 0x2f
    c9ac:	4b05      	ldr	r3, [pc, #20]	; (c9c4 <RADIO_Reset+0x3c>)
    c9ae:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    c9b0:	61ae      	str	r6, [r5, #24]
	HAL_ResetPinMakeOutput();
    c9b2:	47a0      	blx	r4
}
    c9b4:	b002      	add	sp, #8
    c9b6:	bd70      	pop	{r4, r5, r6, pc}
    c9b8:	0000c719 	.word	0x0000c719
    c9bc:	40002880 	.word	0x40002880
    c9c0:	0000cb65 	.word	0x0000cb65
    c9c4:	00005151 	.word	0x00005151

0000c9c8 <RADIO_RegisterWrite>:
{
    c9c8:	b570      	push	{r4, r5, r6, lr}
    c9ca:	0004      	movs	r4, r0
    c9cc:	000d      	movs	r5, r1
	HAL_SPICSAssert();
    c9ce:	4b05      	ldr	r3, [pc, #20]	; (c9e4 <RADIO_RegisterWrite+0x1c>)
    c9d0:	4798      	blx	r3
	HAL_SPISend(REG_WRITE_CMD | reg);
    c9d2:	2080      	movs	r0, #128	; 0x80
    c9d4:	4320      	orrs	r0, r4
    c9d6:	4c04      	ldr	r4, [pc, #16]	; (c9e8 <RADIO_RegisterWrite+0x20>)
    c9d8:	47a0      	blx	r4
	HAL_SPISend(value);
    c9da:	0028      	movs	r0, r5
    c9dc:	47a0      	blx	r4
	HAL_SPICSDeassert();
    c9de:	4b03      	ldr	r3, [pc, #12]	; (c9ec <RADIO_RegisterWrite+0x24>)
    c9e0:	4798      	blx	r3
}
    c9e2:	bd70      	pop	{r4, r5, r6, pc}
    c9e4:	0000c799 	.word	0x0000c799
    c9e8:	0000c6c5 	.word	0x0000c6c5
    c9ec:	0000c7b5 	.word	0x0000c7b5

0000c9f0 <RADIO_RegisterRead>:
{
    c9f0:	b510      	push	{r4, lr}
    c9f2:	0004      	movs	r4, r0
	HAL_SPICSAssert();
    c9f4:	4b06      	ldr	r3, [pc, #24]	; (ca10 <RADIO_RegisterRead+0x20>)
    c9f6:	4798      	blx	r3
	HAL_SPISend(reg);
    c9f8:	207f      	movs	r0, #127	; 0x7f
    c9fa:	4020      	ands	r0, r4
    c9fc:	4c05      	ldr	r4, [pc, #20]	; (ca14 <RADIO_RegisterRead+0x24>)
    c9fe:	47a0      	blx	r4
	readValue = HAL_SPISend(0xFF);
    ca00:	20ff      	movs	r0, #255	; 0xff
    ca02:	47a0      	blx	r4
    ca04:	0004      	movs	r4, r0
	HAL_SPICSDeassert();
    ca06:	4b04      	ldr	r3, [pc, #16]	; (ca18 <RADIO_RegisterRead+0x28>)
    ca08:	4798      	blx	r3
}
    ca0a:	0020      	movs	r0, r4
    ca0c:	bd10      	pop	{r4, pc}
    ca0e:	46c0      	nop			; (mov r8, r8)
    ca10:	0000c799 	.word	0x0000c799
    ca14:	0000c6c5 	.word	0x0000c6c5
    ca18:	0000c7b5 	.word	0x0000c7b5

0000ca1c <RADIO_FrameWrite>:
{
    ca1c:	b570      	push	{r4, r5, r6, lr}
    ca1e:	0004      	movs	r4, r0
    ca20:	000e      	movs	r6, r1
    ca22:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    ca24:	4b0a      	ldr	r3, [pc, #40]	; (ca50 <RADIO_FrameWrite+0x34>)
    ca26:	4798      	blx	r3
    HAL_SPISend(REG_WRITE_CMD | offset);
    ca28:	2080      	movs	r0, #128	; 0x80
    ca2a:	4320      	orrs	r0, r4
    ca2c:	4b09      	ldr	r3, [pc, #36]	; (ca54 <RADIO_FrameWrite+0x38>)
    ca2e:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    ca30:	2d00      	cmp	r5, #0
    ca32:	d00a      	beq.n	ca4a <RADIO_FrameWrite+0x2e>
    ca34:	0034      	movs	r4, r6
    ca36:	3d01      	subs	r5, #1
    ca38:	b2ed      	uxtb	r5, r5
    ca3a:	3501      	adds	r5, #1
    ca3c:	1975      	adds	r5, r6, r5
	    HAL_SPISend(buffer[i]);
    ca3e:	4e05      	ldr	r6, [pc, #20]	; (ca54 <RADIO_FrameWrite+0x38>)
    ca40:	7820      	ldrb	r0, [r4, #0]
    ca42:	47b0      	blx	r6
    ca44:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    ca46:	42ac      	cmp	r4, r5
    ca48:	d1fa      	bne.n	ca40 <RADIO_FrameWrite+0x24>
    HAL_SPICSDeassert();
    ca4a:	4b03      	ldr	r3, [pc, #12]	; (ca58 <RADIO_FrameWrite+0x3c>)
    ca4c:	4798      	blx	r3
}
    ca4e:	bd70      	pop	{r4, r5, r6, pc}
    ca50:	0000c799 	.word	0x0000c799
    ca54:	0000c6c5 	.word	0x0000c6c5
    ca58:	0000c7b5 	.word	0x0000c7b5

0000ca5c <RADIO_FrameRead>:
{
    ca5c:	b570      	push	{r4, r5, r6, lr}
    ca5e:	0004      	movs	r4, r0
    ca60:	000e      	movs	r6, r1
    ca62:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    ca64:	4b0a      	ldr	r3, [pc, #40]	; (ca90 <RADIO_FrameRead+0x34>)
    ca66:	4798      	blx	r3
    HAL_SPISend(offset);
    ca68:	0020      	movs	r0, r4
    ca6a:	4b0a      	ldr	r3, [pc, #40]	; (ca94 <RADIO_FrameRead+0x38>)
    ca6c:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    ca6e:	2d00      	cmp	r5, #0
    ca70:	d00b      	beq.n	ca8a <RADIO_FrameRead+0x2e>
    ca72:	0034      	movs	r4, r6
    ca74:	3d01      	subs	r5, #1
    ca76:	b2ed      	uxtb	r5, r5
    ca78:	3501      	adds	r5, #1
    ca7a:	1975      	adds	r5, r6, r5
	    buffer[i] = HAL_SPISend(0xFF);
    ca7c:	4e05      	ldr	r6, [pc, #20]	; (ca94 <RADIO_FrameRead+0x38>)
    ca7e:	20ff      	movs	r0, #255	; 0xff
    ca80:	47b0      	blx	r6
    ca82:	7020      	strb	r0, [r4, #0]
    ca84:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    ca86:	42ac      	cmp	r4, r5
    ca88:	d1f9      	bne.n	ca7e <RADIO_FrameRead+0x22>
    HAL_SPICSDeassert();
    ca8a:	4b03      	ldr	r3, [pc, #12]	; (ca98 <RADIO_FrameRead+0x3c>)
    ca8c:	4798      	blx	r3
}
    ca8e:	bd70      	pop	{r4, r5, r6, pc}
    ca90:	0000c799 	.word	0x0000c799
    ca94:	0000c6c5 	.word	0x0000c6c5
    ca98:	0000c7b5 	.word	0x0000c7b5

0000ca9c <HAL_RegisterDioInterruptHandler>:
 * \param[in] dioPin  - DIO pin
 * \param[in] handler - function to be called upon given DIO interrupt
 */
void HAL_RegisterDioInterruptHandler(uint8_t dioPin, DioInterruptHandler_t handler)
{
  switch (dioPin)
    ca9c:	2802      	cmp	r0, #2
    ca9e:	d007      	beq.n	cab0 <HAL_RegisterDioInterruptHandler+0x14>
    caa0:	2804      	cmp	r0, #4
    caa2:	d008      	beq.n	cab6 <HAL_RegisterDioInterruptHandler+0x1a>
    caa4:	2801      	cmp	r0, #1
    caa6:	d000      	beq.n	caaa <HAL_RegisterDioInterruptHandler+0xe>
#endif

    default:
      break;
  }
}
    caa8:	4770      	bx	lr
      interruptHandlerDio0 = handler;
    caaa:	4b04      	ldr	r3, [pc, #16]	; (cabc <HAL_RegisterDioInterruptHandler+0x20>)
    caac:	6019      	str	r1, [r3, #0]
      break;
    caae:	e7fb      	b.n	caa8 <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio1 = handler;
    cab0:	4b03      	ldr	r3, [pc, #12]	; (cac0 <HAL_RegisterDioInterruptHandler+0x24>)
    cab2:	6019      	str	r1, [r3, #0]
      break;
    cab4:	e7f8      	b.n	caa8 <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio2 = handler;
    cab6:	4b03      	ldr	r3, [pc, #12]	; (cac4 <HAL_RegisterDioInterruptHandler+0x28>)
    cab8:	6019      	str	r1, [r3, #0]
}
    caba:	e7f5      	b.n	caa8 <HAL_RegisterDioInterruptHandler+0xc>
    cabc:	20001d60 	.word	0x20001d60
    cac0:	20001d64 	.word	0x20001d64
    cac4:	20001d68 	.word	0x20001d68

0000cac8 <HAL_EnableRFCtrl>:

void HAL_EnableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
   if ((RFCtrl1 == RFO_HF) || (RFCtrl2 == RX))
    cac8:	2801      	cmp	r0, #1
    caca:	d00a      	beq.n	cae2 <HAL_EnableRFCtrl+0x1a>
    cacc:	2900      	cmp	r1, #0
    cace:	d008      	beq.n	cae2 <HAL_EnableRFCtrl+0x1a>
   {
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_ACTIVE);		
   }
   else if ((RFCtrl1 == PA_BOOST) && (RFCtrl2 == TX))
    cad0:	2802      	cmp	r0, #2
    cad2:	d10a      	bne.n	caea <HAL_EnableRFCtrl+0x22>
    cad4:	2901      	cmp	r1, #1
    cad6:	d108      	bne.n	caea <HAL_EnableRFCtrl+0x22>
		port_base->OUTCLR.reg = pin_mask;
    cad8:	2280      	movs	r2, #128	; 0x80
    cada:	0192      	lsls	r2, r2, #6
    cadc:	4b03      	ldr	r3, [pc, #12]	; (caec <HAL_EnableRFCtrl+0x24>)
    cade:	615a      	str	r2, [r3, #20]
   {
	   port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);
   }
#endif	
}
    cae0:	e003      	b.n	caea <HAL_EnableRFCtrl+0x22>
		port_base->OUTSET.reg = pin_mask;
    cae2:	2280      	movs	r2, #128	; 0x80
    cae4:	0192      	lsls	r2, r2, #6
    cae6:	4b01      	ldr	r3, [pc, #4]	; (caec <HAL_EnableRFCtrl+0x24>)
    cae8:	619a      	str	r2, [r3, #24]
    caea:	4770      	bx	lr
    caec:	40002800 	.word	0x40002800

0000caf0 <HAL_DisableRFCtrl>:

void HAL_DisableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
	if ((RFCtrl1 == RFO_HF) || (RFCtrl2 == RX))
    caf0:	2801      	cmp	r0, #1
    caf2:	d001      	beq.n	caf8 <HAL_DisableRFCtrl+0x8>
    caf4:	2900      	cmp	r1, #0
    caf6:	d103      	bne.n	cb00 <HAL_DisableRFCtrl+0x10>
		port_base->OUTCLR.reg = pin_mask;
    caf8:	2280      	movs	r2, #128	; 0x80
    cafa:	0192      	lsls	r2, r2, #6
    cafc:	4b01      	ldr	r3, [pc, #4]	; (cb04 <HAL_DisableRFCtrl+0x14>)
    cafe:	615a      	str	r2, [r3, #20]
	{
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
	}
#endif	
}
    cb00:	4770      	bx	lr
    cb02:	46c0      	nop			; (mov r8, r8)
    cb04:	40002800 	.word	0x40002800

0000cb08 <HAL_GetRadioClkStabilizationDelay>:
 * \param[out] Time value in ms
 */
uint8_t HAL_GetRadioClkStabilizationDelay(void)
{
	return RADIO_CLK_STABILITATION_DELAY;
}
    cb08:	2002      	movs	r0, #2
    cb0a:	4770      	bx	lr

0000cb0c <HAL_GetRadioClkSrc>:
 * \param[out] Type of clock source TCXO or XTAL
 */
RadioClockSources_t HAL_GetRadioClkSrc(void)
{
	return RADIO_CLK_SRC;
}
    cb0c:	2000      	movs	r0, #0
    cb0e:	4770      	bx	lr

0000cb10 <HAL_TCXOPowerOn>:
 *
 * \param[in] None
 * \param[out] None
 */
void HAL_TCXOPowerOn(void)
{
    cb10:	b510      	push	{r4, lr}
		port_base->OUTSET.reg = pin_mask;
    cb12:	2280      	movs	r2, #128	; 0x80
    cb14:	0092      	lsls	r2, r2, #2
    cb16:	4b03      	ldr	r3, [pc, #12]	; (cb24 <HAL_TCXOPowerOn+0x14>)
    cb18:	619a      	str	r2, [r3, #24]
#ifdef TCXO_ENABLE
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_ACTIVE);
	delay_ms(RADIO_CLK_STABILITATION_DELAY);
    cb1a:	2002      	movs	r0, #2
    cb1c:	4b02      	ldr	r3, [pc, #8]	; (cb28 <HAL_TCXOPowerOn+0x18>)
    cb1e:	4798      	blx	r3
#endif
}
    cb20:	bd10      	pop	{r4, pc}
    cb22:	46c0      	nop			; (mov r8, r8)
    cb24:	40002800 	.word	0x40002800
    cb28:	00004719 	.word	0x00004719

0000cb2c <HAL_TCXOPowerOff>:
		port_base->OUTCLR.reg = pin_mask;
    cb2c:	2280      	movs	r2, #128	; 0x80
    cb2e:	0092      	lsls	r2, r2, #2
    cb30:	4b01      	ldr	r3, [pc, #4]	; (cb38 <HAL_TCXOPowerOff+0xc>)
    cb32:	615a      	str	r2, [r3, #20]
#ifdef TCXO_ENABLE
#ifndef TCXO_ALWAYS_ON
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
#endif
}
    cb34:	4770      	bx	lr
    cb36:	46c0      	nop			; (mov r8, r8)
    cb38:	40002800 	.word	0x40002800

0000cb3c <SleepTimerGetElapsedTime>:
/**
* \brief Calculate the Elapsed Time from the previous call of this function
* \retval Elapsed time in ticks
*/
uint32_t SleepTimerGetElapsedTime(void)
{
    cb3c:	b510      	push	{r4, lr}
	return rtc_count_get_count(&rtc);
    cb3e:	4802      	ldr	r0, [pc, #8]	; (cb48 <SleepTimerGetElapsedTime+0xc>)
    cb40:	4b02      	ldr	r3, [pc, #8]	; (cb4c <SleepTimerGetElapsedTime+0x10>)
    cb42:	4798      	blx	r3
}
    cb44:	bd10      	pop	{r4, pc}
    cb46:	46c0      	nop			; (mov r8, r8)
    cb48:	20002b4c 	.word	0x20002b4c
    cb4c:	00005181 	.word	0x00005181

0000cb50 <SleepTimerStop>:

/**
* \brief Stop the sleep timer
*/
void SleepTimerStop(void)
{
    cb50:	b510      	push	{r4, lr}
	rtc_count_disable_callback(&rtc, RTC_COUNT_CALLBACK_COMPARE_0);
    cb52:	2108      	movs	r1, #8
    cb54:	4801      	ldr	r0, [pc, #4]	; (cb5c <SleepTimerStop+0xc>)
    cb56:	4b02      	ldr	r3, [pc, #8]	; (cb60 <SleepTimerStop+0x10>)
    cb58:	4798      	blx	r3
}
    cb5a:	bd10      	pop	{r4, pc}
    cb5c:	20002b4c 	.word	0x20002b4c
    cb60:	000051ad 	.word	0x000051ad

0000cb64 <SystemBlockingWaitMs>:
 * waiting with the MCU in sleep.
 * Find out how long it takes the MCU to go to and wake up from sleep to see if
 * it makes sense to go to sleep at all 
 */
void SystemBlockingWaitMs(uint32_t ms)
{
    cb64:	b510      	push	{r4, lr}
#ifndef UT
    delay_ms(ms);
    cb66:	2800      	cmp	r0, #0
    cb68:	d103      	bne.n	cb72 <SystemBlockingWaitMs+0xe>
    cb6a:	2001      	movs	r0, #1
    cb6c:	4b02      	ldr	r3, [pc, #8]	; (cb78 <SystemBlockingWaitMs+0x14>)
    cb6e:	4798      	blx	r3
#endif
}
    cb70:	bd10      	pop	{r4, pc}
    delay_ms(ms);
    cb72:	4b02      	ldr	r3, [pc, #8]	; (cb7c <SystemBlockingWaitMs+0x18>)
    cb74:	4798      	blx	r3
    cb76:	e7fb      	b.n	cb70 <SystemBlockingWaitMs+0xc>
    cb78:	000046ed 	.word	0x000046ed
    cb7c:	00004719 	.word	0x00004719

0000cb80 <system_enter_critical_section>:
{

}

void system_enter_critical_section(void)
{
    cb80:	b510      	push	{r4, lr}
	cpu_irq_enter_critical();
    cb82:	4b01      	ldr	r3, [pc, #4]	; (cb88 <system_enter_critical_section+0x8>)
    cb84:	4798      	blx	r3
#ifndef UT
	system_interrupt_enter_critical_section();
#endif
}
    cb86:	bd10      	pop	{r4, pc}
    cb88:	00004aa1 	.word	0x00004aa1

0000cb8c <system_leave_critical_section>:

void system_leave_critical_section(void)
{
    cb8c:	b510      	push	{r4, lr}
	cpu_irq_leave_critical();
    cb8e:	4b01      	ldr	r3, [pc, #4]	; (cb94 <system_leave_critical_section+0x8>)
    cb90:	4798      	blx	r3
#ifndef UT
	system_interrupt_leave_critical_section();
#endif
}
    cb92:	bd10      	pop	{r4, pc}
    cb94:	00004ae1 	.word	0x00004ae1

0000cb98 <PMM_Wakeup>:

/**
* \brief Wakeup from sleep
*/
void PMM_Wakeup(void)
{
    cb98:	b570      	push	{r4, r5, r6, lr}
    uint64_t sleptTimeUs = 0;

    if (PMM_STATE_SLEEP == pmmState)
    cb9a:	4b16      	ldr	r3, [pc, #88]	; (cbf4 <PMM_Wakeup+0x5c>)
    cb9c:	781b      	ldrb	r3, [r3, #0]
    cb9e:	2b01      	cmp	r3, #1
    cba0:	d000      	beq.n	cba4 <PMM_Wakeup+0xc>
        {
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
            sleepReq = NULL;
        }
    }
}
    cba2:	bd70      	pop	{r4, r5, r6, pc}
		pmmState = PMM_STATE_ACTIVE;
    cba4:	2200      	movs	r2, #0
    cba6:	4b13      	ldr	r3, [pc, #76]	; (cbf4 <PMM_Wakeup+0x5c>)
    cba8:	701a      	strb	r2, [r3, #0]
        sleptTimeUs = SLEEP_TICKS_TO_US(SleepTimerGetElapsedTime());
    cbaa:	4b13      	ldr	r3, [pc, #76]	; (cbf8 <PMM_Wakeup+0x60>)
    cbac:	4798      	blx	r3
    cbae:	4b13      	ldr	r3, [pc, #76]	; (cbfc <PMM_Wakeup+0x64>)
    cbb0:	4798      	blx	r3
    cbb2:	4913      	ldr	r1, [pc, #76]	; (cc00 <PMM_Wakeup+0x68>)
    cbb4:	4b13      	ldr	r3, [pc, #76]	; (cc04 <PMM_Wakeup+0x6c>)
    cbb6:	4798      	blx	r3
    cbb8:	4b13      	ldr	r3, [pc, #76]	; (cc08 <PMM_Wakeup+0x70>)
    cbba:	4798      	blx	r3
    cbbc:	0004      	movs	r4, r0
    cbbe:	000d      	movs	r5, r1
        SleepTimerStop();
    cbc0:	4b12      	ldr	r3, [pc, #72]	; (cc0c <PMM_Wakeup+0x74>)
    cbc2:	4798      	blx	r3
        SystemTimerSync(sleptTimeUs);
    cbc4:	0020      	movs	r0, r4
    cbc6:	0029      	movs	r1, r5
    cbc8:	4b11      	ldr	r3, [pc, #68]	; (cc10 <PMM_Wakeup+0x78>)
    cbca:	4798      	blx	r3
        if (sleepReq && sleepReq->pmmWakeupCallback)
    cbcc:	4b11      	ldr	r3, [pc, #68]	; (cc14 <PMM_Wakeup+0x7c>)
    cbce:	681b      	ldr	r3, [r3, #0]
    cbd0:	2b00      	cmp	r3, #0
    cbd2:	d0e6      	beq.n	cba2 <PMM_Wakeup+0xa>
    cbd4:	689e      	ldr	r6, [r3, #8]
    cbd6:	2e00      	cmp	r6, #0
    cbd8:	d0e3      	beq.n	cba2 <PMM_Wakeup+0xa>
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
    cbda:	22fa      	movs	r2, #250	; 0xfa
    cbdc:	0092      	lsls	r2, r2, #2
    cbde:	2300      	movs	r3, #0
    cbe0:	0020      	movs	r0, r4
    cbe2:	0029      	movs	r1, r5
    cbe4:	4c0c      	ldr	r4, [pc, #48]	; (cc18 <PMM_Wakeup+0x80>)
    cbe6:	47a0      	blx	r4
    cbe8:	47b0      	blx	r6
            sleepReq = NULL;
    cbea:	2200      	movs	r2, #0
    cbec:	4b09      	ldr	r3, [pc, #36]	; (cc14 <PMM_Wakeup+0x7c>)
    cbee:	601a      	str	r2, [r3, #0]
}
    cbf0:	e7d7      	b.n	cba2 <PMM_Wakeup+0xa>
    cbf2:	46c0      	nop			; (mov r8, r8)
    cbf4:	20001d78 	.word	0x20001d78
    cbf8:	0000cb3d 	.word	0x0000cb3d
    cbfc:	00014ba5 	.word	0x00014ba5
    cc00:	41f423d7 	.word	0x41f423d7
    cc04:	0001454d 	.word	0x0001454d
    cc08:	00013c89 	.word	0x00013c89
    cc0c:	0000cb51 	.word	0x0000cb51
    cc10:	0000da75 	.word	0x0000da75
    cc14:	20001d7c 	.word	0x20001d7c
    cc18:	00013b89 	.word	0x00013b89

0000cc1c <InitDefault868Channels>:
/*
 * \brief This function initializes all the EU868 Channels to default values
 */
#if (EU_BAND == 1)
void InitDefault868Channels (void)
{
    cc1c:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    memset (RegParams.pChParams, 0, sizeof(DefaultChannels868) );
    cc1e:	4c39      	ldr	r4, [pc, #228]	; (cd04 <InitDefault868Channels+0xe8>)
    cc20:	7920      	ldrb	r0, [r4, #4]
    cc22:	7963      	ldrb	r3, [r4, #5]
    cc24:	021b      	lsls	r3, r3, #8
    cc26:	4303      	orrs	r3, r0
    cc28:	79a0      	ldrb	r0, [r4, #6]
    cc2a:	0400      	lsls	r0, r0, #16
    cc2c:	4303      	orrs	r3, r0
    cc2e:	79e0      	ldrb	r0, [r4, #7]
    cc30:	0600      	lsls	r0, r0, #24
    cc32:	4318      	orrs	r0, r3
    cc34:	2206      	movs	r2, #6
    cc36:	2100      	movs	r1, #0
    cc38:	4e33      	ldr	r6, [pc, #204]	; (cd08 <InitDefault868Channels+0xec>)
    cc3a:	47b0      	blx	r6
    memcpy (RegParams.pChParams, DefaultChannels868, sizeof(DefaultChannels868) );
    cc3c:	7920      	ldrb	r0, [r4, #4]
    cc3e:	7963      	ldrb	r3, [r4, #5]
    cc40:	021b      	lsls	r3, r3, #8
    cc42:	4303      	orrs	r3, r0
    cc44:	79a0      	ldrb	r0, [r4, #6]
    cc46:	0400      	lsls	r0, r0, #16
    cc48:	4303      	orrs	r3, r0
    cc4a:	79e0      	ldrb	r0, [r4, #7]
    cc4c:	0600      	lsls	r0, r0, #24
    cc4e:	4318      	orrs	r0, r3
    cc50:	2206      	movs	r2, #6
    cc52:	492e      	ldr	r1, [pc, #184]	; (cd0c <InitDefault868Channels+0xf0>)
    cc54:	4d2e      	ldr	r5, [pc, #184]	; (cd10 <InitDefault868Channels+0xf4>)
    cc56:	47a8      	blx	r5
    memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels868) );
    cc58:	7a20      	ldrb	r0, [r4, #8]
    cc5a:	7a63      	ldrb	r3, [r4, #9]
    cc5c:	021b      	lsls	r3, r3, #8
    cc5e:	4303      	orrs	r3, r0
    cc60:	7aa0      	ldrb	r0, [r4, #10]
    cc62:	0400      	lsls	r0, r0, #16
    cc64:	4303      	orrs	r3, r0
    cc66:	7ae0      	ldrb	r0, [r4, #11]
    cc68:	0600      	lsls	r0, r0, #24
    cc6a:	4318      	orrs	r0, r3
    cc6c:	2224      	movs	r2, #36	; 0x24
    cc6e:	2100      	movs	r1, #0
    cc70:	47b0      	blx	r6
    memcpy (RegParams.pOtherChParams, AdvChannels868, sizeof(AdvChannels868) );	
    cc72:	7a20      	ldrb	r0, [r4, #8]
    cc74:	7a63      	ldrb	r3, [r4, #9]
    cc76:	021b      	lsls	r3, r3, #8
    cc78:	4303      	orrs	r3, r0
    cc7a:	7aa0      	ldrb	r0, [r4, #10]
    cc7c:	0400      	lsls	r0, r0, #16
    cc7e:	4303      	orrs	r3, r0
    cc80:	7ae0      	ldrb	r0, [r4, #11]
    cc82:	0600      	lsls	r0, r0, #24
    cc84:	4318      	orrs	r0, r3
    cc86:	2224      	movs	r2, #36	; 0x24
    cc88:	4922      	ldr	r1, [pc, #136]	; (cd14 <InitDefault868Channels+0xf8>)
    cc8a:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParams868) );
    cc8c:	7b20      	ldrb	r0, [r4, #12]
    cc8e:	7b63      	ldrb	r3, [r4, #13]
    cc90:	021b      	lsls	r3, r3, #8
    cc92:	4303      	orrs	r3, r0
    cc94:	7ba0      	ldrb	r0, [r4, #14]
    cc96:	0400      	lsls	r0, r0, #16
    cc98:	4303      	orrs	r3, r0
    cc9a:	7be0      	ldrb	r0, [r4, #15]
    cc9c:	0600      	lsls	r0, r0, #24
    cc9e:	4318      	orrs	r0, r3
    cca0:	2248      	movs	r2, #72	; 0x48
    cca2:	2100      	movs	r1, #0
    cca4:	47b0      	blx	r6
	memcpy (RegParams.pSubBandParams, SubBandParams868, sizeof(SubBandParams868) );
    cca6:	7b20      	ldrb	r0, [r4, #12]
    cca8:	7b63      	ldrb	r3, [r4, #13]
    ccaa:	021b      	lsls	r3, r3, #8
    ccac:	4303      	orrs	r3, r0
    ccae:	7ba0      	ldrb	r0, [r4, #14]
    ccb0:	0400      	lsls	r0, r0, #16
    ccb2:	4303      	orrs	r3, r0
    ccb4:	7be0      	ldrb	r0, [r4, #15]
    ccb6:	0600      	lsls	r0, r0, #24
    ccb8:	4318      	orrs	r0, r3
    ccba:	2248      	movs	r2, #72	; 0x48
    ccbc:	4916      	ldr	r1, [pc, #88]	; (cd18 <InitDefault868Channels+0xfc>)
    ccbe:	47a8      	blx	r5
	memset(RegParams.cmnParams.paramsType2.subBandDutyCycle,0,sizeof(SubBandDutyCycle868));
	memcpy(RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycle868,sizeof(SubBandDutyCycle868));
    ccc0:	0020      	movs	r0, r4
    ccc2:	30af      	adds	r0, #175	; 0xaf
    ccc4:	30ff      	adds	r0, #255	; 0xff
    ccc6:	220c      	movs	r2, #12
    ccc8:	4914      	ldr	r1, [pc, #80]	; (cd1c <InitDefault868Channels+0x100>)
    ccca:	47a8      	blx	r5
    for (i = 3; i < RegParams.maxChannels; i++)
    cccc:	232a      	movs	r3, #42	; 0x2a
    ccce:	56e3      	ldrsb	r3, [r4, r3]
    ccd0:	2b03      	cmp	r3, #3
    ccd2:	dd15      	ble.n	cd00 <InitDefault868Channels+0xe4>
    ccd4:	2303      	movs	r3, #3
    {
        // for undefined channels the duty cycle should be a very big value, and the data range a not-valid value
        //duty cycle 0 means no duty cycle limitation, the bigger the duty cycle value, the greater the limitation
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    ccd6:	480b      	ldr	r0, [pc, #44]	; (cd04 <InitDefault868Channels+0xe8>)
    ccd8:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    ccda:	242a      	movs	r4, #42	; 0x2a
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    ccdc:	7902      	ldrb	r2, [r0, #4]
    ccde:	7941      	ldrb	r1, [r0, #5]
    cce0:	0209      	lsls	r1, r1, #8
    cce2:	4311      	orrs	r1, r2
    cce4:	7982      	ldrb	r2, [r0, #6]
    cce6:	0412      	lsls	r2, r2, #16
    cce8:	4311      	orrs	r1, r2
    ccea:	79c2      	ldrb	r2, [r0, #7]
    ccec:	0612      	lsls	r2, r2, #24
    ccee:	430a      	orrs	r2, r1
    ccf0:	0059      	lsls	r1, r3, #1
    ccf2:	188a      	adds	r2, r1, r2
    ccf4:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    ccf6:	3301      	adds	r3, #1
    ccf8:	b2db      	uxtb	r3, r3
    ccfa:	5702      	ldrsb	r2, [r0, r4]
    ccfc:	4293      	cmp	r3, r2
    ccfe:	dbed      	blt.n	ccdc <InitDefault868Channels+0xc0>
    }
}
    cd00:	bd70      	pop	{r4, r5, r6, pc}
    cd02:	46c0      	nop			; (mov r8, r8)
    cd04:	20002b88 	.word	0x20002b88
    cd08:	00016a21 	.word	0x00016a21
    cd0c:	00019190 	.word	0x00019190
    cd10:	00016a0f 	.word	0x00016a0f
    cd14:	00019164 	.word	0x00019164
    cd18:	000191b0 	.word	0x000191b0
    cd1c:	00019198 	.word	0x00019198

0000cd20 <InitDefault433Channels>:

/*
 * \brief This function initializes all the EU433 Channels to default values
 */
void InitDefault433Channels (void)
{
    cd20:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    memset (RegParams.pChParams, 0, sizeof(DefaultChannels433) );
    cd22:	4c36      	ldr	r4, [pc, #216]	; (cdfc <InitDefault433Channels+0xdc>)
    cd24:	7920      	ldrb	r0, [r4, #4]
    cd26:	7963      	ldrb	r3, [r4, #5]
    cd28:	021b      	lsls	r3, r3, #8
    cd2a:	4303      	orrs	r3, r0
    cd2c:	79a0      	ldrb	r0, [r4, #6]
    cd2e:	0400      	lsls	r0, r0, #16
    cd30:	4303      	orrs	r3, r0
    cd32:	79e0      	ldrb	r0, [r4, #7]
    cd34:	0600      	lsls	r0, r0, #24
    cd36:	4318      	orrs	r0, r3
    cd38:	2206      	movs	r2, #6
    cd3a:	2100      	movs	r1, #0
    cd3c:	4e30      	ldr	r6, [pc, #192]	; (ce00 <InitDefault433Channels+0xe0>)
    cd3e:	47b0      	blx	r6
    memcpy (RegParams.pChParams, DefaultChannels433, sizeof(DefaultChannels433) );
    cd40:	7920      	ldrb	r0, [r4, #4]
    cd42:	7963      	ldrb	r3, [r4, #5]
    cd44:	021b      	lsls	r3, r3, #8
    cd46:	4303      	orrs	r3, r0
    cd48:	79a0      	ldrb	r0, [r4, #6]
    cd4a:	0400      	lsls	r0, r0, #16
    cd4c:	4303      	orrs	r3, r0
    cd4e:	79e0      	ldrb	r0, [r4, #7]
    cd50:	0600      	lsls	r0, r0, #24
    cd52:	4318      	orrs	r0, r3
    cd54:	2206      	movs	r2, #6
    cd56:	492b      	ldr	r1, [pc, #172]	; (ce04 <InitDefault433Channels+0xe4>)
    cd58:	4d2b      	ldr	r5, [pc, #172]	; (ce08 <InitDefault433Channels+0xe8>)
    cd5a:	47a8      	blx	r5
    memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels433) );
    cd5c:	7a20      	ldrb	r0, [r4, #8]
    cd5e:	7a63      	ldrb	r3, [r4, #9]
    cd60:	021b      	lsls	r3, r3, #8
    cd62:	4303      	orrs	r3, r0
    cd64:	7aa0      	ldrb	r0, [r4, #10]
    cd66:	0400      	lsls	r0, r0, #16
    cd68:	4303      	orrs	r3, r0
    cd6a:	7ae0      	ldrb	r0, [r4, #11]
    cd6c:	0600      	lsls	r0, r0, #24
    cd6e:	4318      	orrs	r0, r3
    cd70:	2224      	movs	r2, #36	; 0x24
    cd72:	2100      	movs	r1, #0
    cd74:	47b0      	blx	r6
    memcpy (RegParams.pOtherChParams, AdvChannels433, sizeof(AdvChannels433) );
    cd76:	7a20      	ldrb	r0, [r4, #8]
    cd78:	7a63      	ldrb	r3, [r4, #9]
    cd7a:	021b      	lsls	r3, r3, #8
    cd7c:	4303      	orrs	r3, r0
    cd7e:	7aa0      	ldrb	r0, [r4, #10]
    cd80:	0400      	lsls	r0, r0, #16
    cd82:	4303      	orrs	r3, r0
    cd84:	7ae0      	ldrb	r0, [r4, #11]
    cd86:	0600      	lsls	r0, r0, #24
    cd88:	4318      	orrs	r0, r3
    cd8a:	2224      	movs	r2, #36	; 0x24
    cd8c:	491f      	ldr	r1, [pc, #124]	; (ce0c <InitDefault433Channels+0xec>)
    cd8e:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParams433) );
    cd90:	7b20      	ldrb	r0, [r4, #12]
    cd92:	7b63      	ldrb	r3, [r4, #13]
    cd94:	021b      	lsls	r3, r3, #8
    cd96:	4303      	orrs	r3, r0
    cd98:	7ba0      	ldrb	r0, [r4, #14]
    cd9a:	0400      	lsls	r0, r0, #16
    cd9c:	4303      	orrs	r3, r0
    cd9e:	7be0      	ldrb	r0, [r4, #15]
    cda0:	0600      	lsls	r0, r0, #24
    cda2:	4318      	orrs	r0, r3
    cda4:	220c      	movs	r2, #12
    cda6:	2100      	movs	r1, #0
    cda8:	47b0      	blx	r6
	memcpy (RegParams.pSubBandParams, SubBandParams433, sizeof(SubBandParams433) );	
    cdaa:	7b20      	ldrb	r0, [r4, #12]
    cdac:	7b63      	ldrb	r3, [r4, #13]
    cdae:	021b      	lsls	r3, r3, #8
    cdb0:	4303      	orrs	r3, r0
    cdb2:	7ba0      	ldrb	r0, [r4, #14]
    cdb4:	0400      	lsls	r0, r0, #16
    cdb6:	4303      	orrs	r3, r0
    cdb8:	7be0      	ldrb	r0, [r4, #15]
    cdba:	0600      	lsls	r0, r0, #24
    cdbc:	4318      	orrs	r0, r3
    cdbe:	220c      	movs	r2, #12
    cdc0:	4913      	ldr	r1, [pc, #76]	; (ce10 <InitDefault433Channels+0xf0>)
    cdc2:	47a8      	blx	r5
	
    for (i = 3; i < RegParams.maxChannels; i++)
    cdc4:	232a      	movs	r3, #42	; 0x2a
    cdc6:	56e3      	ldrsb	r3, [r4, r3]
    cdc8:	2b03      	cmp	r3, #3
    cdca:	dd15      	ble.n	cdf8 <InitDefault433Channels+0xd8>
    cdcc:	2303      	movs	r3, #3
    {
        // for undefined channels the duty cycle should be a very big value, and the data range a not-valid value
        //duty cycle 0 means no duty cycle limitation, the bigger the duty cycle value, the greater the limitation
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    cdce:	480b      	ldr	r0, [pc, #44]	; (cdfc <InitDefault433Channels+0xdc>)
    cdd0:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    cdd2:	242a      	movs	r4, #42	; 0x2a
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    cdd4:	7902      	ldrb	r2, [r0, #4]
    cdd6:	7941      	ldrb	r1, [r0, #5]
    cdd8:	0209      	lsls	r1, r1, #8
    cdda:	4311      	orrs	r1, r2
    cddc:	7982      	ldrb	r2, [r0, #6]
    cdde:	0412      	lsls	r2, r2, #16
    cde0:	4311      	orrs	r1, r2
    cde2:	79c2      	ldrb	r2, [r0, #7]
    cde4:	0612      	lsls	r2, r2, #24
    cde6:	430a      	orrs	r2, r1
    cde8:	0059      	lsls	r1, r3, #1
    cdea:	188a      	adds	r2, r1, r2
    cdec:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    cdee:	3301      	adds	r3, #1
    cdf0:	b2db      	uxtb	r3, r3
    cdf2:	5702      	ldrsb	r2, [r0, r4]
    cdf4:	4293      	cmp	r3, r2
    cdf6:	dbed      	blt.n	cdd4 <InitDefault433Channels+0xb4>
    }
}
    cdf8:	bd70      	pop	{r4, r5, r6, pc}
    cdfa:	46c0      	nop			; (mov r8, r8)
    cdfc:	20002b88 	.word	0x20002b88
    ce00:	00016a21 	.word	0x00016a21
    ce04:	00019188 	.word	0x00019188
    ce08:	00016a0f 	.word	0x00016a0f
    ce0c:	00019140 	.word	0x00019140
    ce10:	000191a4 	.word	0x000191a4

0000ce14 <InitDefault920Channels>:
/*
 * \brief This function initializes all the IN865 Channels to default values
 */
#if (JPN_BAND == 1)
void InitDefault920Channels (void)
{
    ce14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
    memset (RegParams.pChParams, 0, sizeof(DefaultChannels923JP) );
    ce16:	4c40      	ldr	r4, [pc, #256]	; (cf18 <InitDefault920Channels+0x104>)
    ce18:	7920      	ldrb	r0, [r4, #4]
    ce1a:	7963      	ldrb	r3, [r4, #5]
    ce1c:	021b      	lsls	r3, r3, #8
    ce1e:	4303      	orrs	r3, r0
    ce20:	79a0      	ldrb	r0, [r4, #6]
    ce22:	0400      	lsls	r0, r0, #16
    ce24:	4303      	orrs	r3, r0
    ce26:	79e0      	ldrb	r0, [r4, #7]
    ce28:	0600      	lsls	r0, r0, #24
    ce2a:	4318      	orrs	r0, r3
    ce2c:	2204      	movs	r2, #4
    ce2e:	2100      	movs	r1, #0
    ce30:	4e3a      	ldr	r6, [pc, #232]	; (cf1c <InitDefault920Channels+0x108>)
    ce32:	47b0      	blx	r6
	memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels923JP) );
    ce34:	7a20      	ldrb	r0, [r4, #8]
    ce36:	7a63      	ldrb	r3, [r4, #9]
    ce38:	021b      	lsls	r3, r3, #8
    ce3a:	4303      	orrs	r3, r0
    ce3c:	7aa0      	ldrb	r0, [r4, #10]
    ce3e:	0400      	lsls	r0, r0, #16
    ce40:	4303      	orrs	r3, r0
    ce42:	7ae0      	ldrb	r0, [r4, #11]
    ce44:	0600      	lsls	r0, r0, #24
    ce46:	4318      	orrs	r0, r3
    ce48:	2218      	movs	r2, #24
    ce4a:	2100      	movs	r1, #0
    ce4c:	47b0      	blx	r6
    memcpy (RegParams.pChParams, DefaultChannels923JP, sizeof(DefaultChannels923JP) );
    ce4e:	7920      	ldrb	r0, [r4, #4]
    ce50:	7963      	ldrb	r3, [r4, #5]
    ce52:	021b      	lsls	r3, r3, #8
    ce54:	4303      	orrs	r3, r0
    ce56:	79a0      	ldrb	r0, [r4, #6]
    ce58:	0400      	lsls	r0, r0, #16
    ce5a:	4303      	orrs	r3, r0
    ce5c:	79e0      	ldrb	r0, [r4, #7]
    ce5e:	0600      	lsls	r0, r0, #24
    ce60:	4318      	orrs	r0, r3
    ce62:	2204      	movs	r2, #4
    ce64:	492e      	ldr	r1, [pc, #184]	; (cf20 <InitDefault920Channels+0x10c>)
    ce66:	4d2f      	ldr	r5, [pc, #188]	; (cf24 <InitDefault920Channels+0x110>)
    ce68:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels923JP, sizeof(AdvChannels923JP) );
    ce6a:	7a20      	ldrb	r0, [r4, #8]
    ce6c:	7a63      	ldrb	r3, [r4, #9]
    ce6e:	021b      	lsls	r3, r3, #8
    ce70:	4303      	orrs	r3, r0
    ce72:	7aa0      	ldrb	r0, [r4, #10]
    ce74:	0400      	lsls	r0, r0, #16
    ce76:	4303      	orrs	r3, r0
    ce78:	7ae0      	ldrb	r0, [r4, #11]
    ce7a:	0600      	lsls	r0, r0, #24
    ce7c:	4318      	orrs	r0, r3
    ce7e:	2218      	movs	r2, #24
    ce80:	4929      	ldr	r1, [pc, #164]	; (cf28 <InitDefault920Channels+0x114>)
    ce82:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParamsJP923) );
    ce84:	7b20      	ldrb	r0, [r4, #12]
    ce86:	7b63      	ldrb	r3, [r4, #13]
    ce88:	021b      	lsls	r3, r3, #8
    ce8a:	4303      	orrs	r3, r0
    ce8c:	7ba0      	ldrb	r0, [r4, #14]
    ce8e:	0400      	lsls	r0, r0, #16
    ce90:	4303      	orrs	r3, r0
    ce92:	7be0      	ldrb	r0, [r4, #15]
    ce94:	0600      	lsls	r0, r0, #24
    ce96:	4318      	orrs	r0, r3
    ce98:	2218      	movs	r2, #24
    ce9a:	2100      	movs	r1, #0
    ce9c:	47b0      	blx	r6
	memcpy (RegParams.pSubBandParams, SubBandParamsJP923, sizeof(SubBandParamsJP923) );
    ce9e:	7b20      	ldrb	r0, [r4, #12]
    cea0:	7b63      	ldrb	r3, [r4, #13]
    cea2:	021b      	lsls	r3, r3, #8
    cea4:	4303      	orrs	r3, r0
    cea6:	7ba0      	ldrb	r0, [r4, #14]
    cea8:	0400      	lsls	r0, r0, #16
    ceaa:	4303      	orrs	r3, r0
    ceac:	7be0      	ldrb	r0, [r4, #15]
    ceae:	0600      	lsls	r0, r0, #24
    ceb0:	4318      	orrs	r0, r3
    ceb2:	2218      	movs	r2, #24
    ceb4:	491d      	ldr	r1, [pc, #116]	; (cf2c <InitDefault920Channels+0x118>)
    ceb6:	47a8      	blx	r5
	memset (RegParams.cmnParams.paramsType2.subBandDutyCycle,0,sizeof(SubBandDutyCycleJP923));
	memcpy (RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycleJP923,sizeof(SubBandDutyCycleJP923));
    ceb8:	0020      	movs	r0, r4
    ceba:	30af      	adds	r0, #175	; 0xaf
    cebc:	30ff      	adds	r0, #255	; 0xff
    cebe:	2204      	movs	r2, #4
    cec0:	491b      	ldr	r1, [pc, #108]	; (cf30 <InitDefault920Channels+0x11c>)
    cec2:	47a8      	blx	r5
    for (i = 2; i < RegParams.maxChannels; i++)
    cec4:	232a      	movs	r3, #42	; 0x2a
    cec6:	56e3      	ldrsb	r3, [r4, r3]
    cec8:	2b02      	cmp	r3, #2
    ceca:	dd1f      	ble.n	cf0c <InitDefault920Channels+0xf8>
    cecc:	2302      	movs	r3, #2
    cece:	2202      	movs	r2, #2
    {
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    ced0:	4911      	ldr	r1, [pc, #68]	; (cf18 <InitDefault920Channels+0x104>)
    ced2:	27ff      	movs	r7, #255	; 0xff
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    ced4:	2500      	movs	r5, #0
    for (i = 2; i < RegParams.maxChannels; i++)
    ced6:	262a      	movs	r6, #42	; 0x2a
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    ced8:	7908      	ldrb	r0, [r1, #4]
    ceda:	794c      	ldrb	r4, [r1, #5]
    cedc:	0224      	lsls	r4, r4, #8
    cede:	4304      	orrs	r4, r0
    cee0:	7988      	ldrb	r0, [r1, #6]
    cee2:	0400      	lsls	r0, r0, #16
    cee4:	4304      	orrs	r4, r0
    cee6:	79c8      	ldrb	r0, [r1, #7]
    cee8:	0600      	lsls	r0, r0, #24
    ceea:	4320      	orrs	r0, r4
    ceec:	0054      	lsls	r4, r2, #1
    ceee:	1820      	adds	r0, r4, r0
    cef0:	7047      	strb	r7, [r0, #1]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    cef2:	3358      	adds	r3, #88	; 0x58
    cef4:	009b      	lsls	r3, r3, #2
    cef6:	18cb      	adds	r3, r1, r3
    cef8:	725d      	strb	r5, [r3, #9]
    cefa:	729d      	strb	r5, [r3, #10]
    cefc:	72dd      	strb	r5, [r3, #11]
    cefe:	731d      	strb	r5, [r3, #12]
    for (i = 2; i < RegParams.maxChannels; i++)
    cf00:	3201      	adds	r2, #1
    cf02:	b2d2      	uxtb	r2, r2
    cf04:	0013      	movs	r3, r2
    cf06:	5788      	ldrsb	r0, [r1, r6]
    cf08:	4282      	cmp	r2, r0
    cf0a:	dbe5      	blt.n	ced8 <InitDefault920Channels+0xc4>
    }
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    cf0c:	21ff      	movs	r1, #255	; 0xff
    cf0e:	2330      	movs	r3, #48	; 0x30
    cf10:	4a01      	ldr	r2, [pc, #4]	; (cf18 <InitDefault920Channels+0x104>)
    cf12:	54d1      	strb	r1, [r2, r3]
}
    cf14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cf16:	46c0      	nop			; (mov r8, r8)
    cf18:	20002b88 	.word	0x20002b88
    cf1c:	00016a21 	.word	0x00016a21
    cf20:	00019210 	.word	0x00019210
    cf24:	00016a0f 	.word	0x00016a0f
    cf28:	000191f8 	.word	0x000191f8
    cf2c:	00019218 	.word	0x00019218
    cf30:	00019214 	.word	0x00019214

0000cf34 <InitDefault920ChannelsKR>:
/*
 * \brief This function initializes all the IN865 Channels to default values
 */
#if (KR_BAND == 1)
void InitDefault920ChannelsKR (void)
{
    cf34:	b5f0      	push	{r4, r5, r6, r7, lr}
    cf36:	46d6      	mov	lr, sl
    cf38:	464f      	mov	r7, r9
    cf3a:	4646      	mov	r6, r8
    cf3c:	b5c0      	push	{r6, r7, lr}
    uint8_t i;
    memset (RegParams.pChParams, 0, sizeof(DefaultChannels920KR) );
    cf3e:	4c46      	ldr	r4, [pc, #280]	; (d058 <InitDefault920ChannelsKR+0x124>)
    cf40:	7920      	ldrb	r0, [r4, #4]
    cf42:	7963      	ldrb	r3, [r4, #5]
    cf44:	021b      	lsls	r3, r3, #8
    cf46:	4303      	orrs	r3, r0
    cf48:	79a0      	ldrb	r0, [r4, #6]
    cf4a:	0400      	lsls	r0, r0, #16
    cf4c:	4303      	orrs	r3, r0
    cf4e:	79e0      	ldrb	r0, [r4, #7]
    cf50:	0600      	lsls	r0, r0, #24
    cf52:	4318      	orrs	r0, r3
    cf54:	2206      	movs	r2, #6
    cf56:	2100      	movs	r1, #0
    cf58:	4d40      	ldr	r5, [pc, #256]	; (d05c <InitDefault920ChannelsKR+0x128>)
    cf5a:	47a8      	blx	r5
	memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels920KR) );
    cf5c:	7a20      	ldrb	r0, [r4, #8]
    cf5e:	7a63      	ldrb	r3, [r4, #9]
    cf60:	021b      	lsls	r3, r3, #8
    cf62:	4303      	orrs	r3, r0
    cf64:	7aa0      	ldrb	r0, [r4, #10]
    cf66:	0400      	lsls	r0, r0, #16
    cf68:	4303      	orrs	r3, r0
    cf6a:	7ae0      	ldrb	r0, [r4, #11]
    cf6c:	0600      	lsls	r0, r0, #24
    cf6e:	4318      	orrs	r0, r3
    cf70:	2224      	movs	r2, #36	; 0x24
    cf72:	2100      	movs	r1, #0
    cf74:	47a8      	blx	r5
    memcpy (RegParams.pChParams, DefaultChannels920KR, sizeof(DefaultChannels920KR) );
    cf76:	7920      	ldrb	r0, [r4, #4]
    cf78:	7963      	ldrb	r3, [r4, #5]
    cf7a:	021b      	lsls	r3, r3, #8
    cf7c:	4303      	orrs	r3, r0
    cf7e:	79a0      	ldrb	r0, [r4, #6]
    cf80:	0400      	lsls	r0, r0, #16
    cf82:	4303      	orrs	r3, r0
    cf84:	79e0      	ldrb	r0, [r4, #7]
    cf86:	0600      	lsls	r0, r0, #24
    cf88:	4318      	orrs	r0, r3
    cf8a:	2206      	movs	r2, #6
    cf8c:	4934      	ldr	r1, [pc, #208]	; (d060 <InitDefault920ChannelsKR+0x12c>)
    cf8e:	4d35      	ldr	r5, [pc, #212]	; (d064 <InitDefault920ChannelsKR+0x130>)
    cf90:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels920KR, sizeof(AdvChannels920KR) );
    cf92:	7a20      	ldrb	r0, [r4, #8]
    cf94:	7a63      	ldrb	r3, [r4, #9]
    cf96:	021b      	lsls	r3, r3, #8
    cf98:	4303      	orrs	r3, r0
    cf9a:	7aa0      	ldrb	r0, [r4, #10]
    cf9c:	0400      	lsls	r0, r0, #16
    cf9e:	4303      	orrs	r3, r0
    cfa0:	7ae0      	ldrb	r0, [r4, #11]
    cfa2:	0600      	lsls	r0, r0, #24
    cfa4:	4318      	orrs	r0, r3
    cfa6:	2224      	movs	r2, #36	; 0x24
    cfa8:	492f      	ldr	r1, [pc, #188]	; (d068 <InitDefault920ChannelsKR+0x134>)
    cfaa:	47a8      	blx	r5
    for (i = 3; i < RegParams.maxChannels; i++)
    cfac:	232a      	movs	r3, #42	; 0x2a
    cfae:	56e3      	ldrsb	r3, [r4, r3]
    cfb0:	2b03      	cmp	r3, #3
    cfb2:	dd48      	ble.n	d046 <InitDefault920ChannelsKR+0x112>
    cfb4:	2103      	movs	r1, #3
    cfb6:	2003      	movs	r0, #3
    {
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    cfb8:	4b27      	ldr	r3, [pc, #156]	; (d058 <InitDefault920ChannelsKR+0x124>)
    cfba:	26ff      	movs	r6, #255	; 0xff
		RegParams.pChParams[i].status = DISABLED;
    cfbc:	2500      	movs	r5, #0
		RegParams.pOtherChParams[i].joinRequestChannel = DISABLED;
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    cfbe:	22e1      	movs	r2, #225	; 0xe1
    cfc0:	0052      	lsls	r2, r2, #1
    cfc2:	4690      	mov	r8, r2
    cfc4:	46b4      	mov	ip, r6
    for (i = 3; i < RegParams.maxChannels; i++)
    cfc6:	3a99      	subs	r2, #153	; 0x99
    cfc8:	3aff      	subs	r2, #255	; 0xff
    cfca:	4692      	mov	sl, r2
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    cfcc:	0042      	lsls	r2, r0, #1
    cfce:	791c      	ldrb	r4, [r3, #4]
    cfd0:	46a1      	mov	r9, r4
    cfd2:	795c      	ldrb	r4, [r3, #5]
    cfd4:	0224      	lsls	r4, r4, #8
    cfd6:	464f      	mov	r7, r9
    cfd8:	4327      	orrs	r7, r4
    cfda:	799c      	ldrb	r4, [r3, #6]
    cfdc:	0424      	lsls	r4, r4, #16
    cfde:	4327      	orrs	r7, r4
    cfe0:	79dc      	ldrb	r4, [r3, #7]
    cfe2:	0624      	lsls	r4, r4, #24
    cfe4:	433c      	orrs	r4, r7
    cfe6:	18a4      	adds	r4, r4, r2
    cfe8:	7066      	strb	r6, [r4, #1]
		RegParams.pChParams[i].status = DISABLED;
    cfea:	791c      	ldrb	r4, [r3, #4]
    cfec:	46a1      	mov	r9, r4
    cfee:	795c      	ldrb	r4, [r3, #5]
    cff0:	0224      	lsls	r4, r4, #8
    cff2:	464f      	mov	r7, r9
    cff4:	4327      	orrs	r7, r4
    cff6:	799c      	ldrb	r4, [r3, #6]
    cff8:	0424      	lsls	r4, r4, #16
    cffa:	4327      	orrs	r7, r4
    cffc:	79dc      	ldrb	r4, [r3, #7]
    cffe:	0624      	lsls	r4, r4, #24
    d000:	433c      	orrs	r4, r7
    d002:	54a5      	strb	r5, [r4, r2]
		RegParams.pOtherChParams[i].joinRequestChannel = DISABLED;
    d004:	7a1c      	ldrb	r4, [r3, #8]
    d006:	46a1      	mov	r9, r4
    d008:	7a5c      	ldrb	r4, [r3, #9]
    d00a:	0224      	lsls	r4, r4, #8
    d00c:	464f      	mov	r7, r9
    d00e:	4327      	orrs	r7, r4
    d010:	7a9c      	ldrb	r4, [r3, #10]
    d012:	0424      	lsls	r4, r4, #16
    d014:	4327      	orrs	r7, r4
    d016:	7adc      	ldrb	r4, [r3, #11]
    d018:	0624      	lsls	r4, r4, #24
    d01a:	433c      	orrs	r4, r7
    d01c:	1812      	adds	r2, r2, r0
    d01e:	0092      	lsls	r2, r2, #2
    d020:	1912      	adds	r2, r2, r4
    d022:	7255      	strb	r5, [r2, #9]
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    d024:	4642      	mov	r2, r8
    d026:	4664      	mov	r4, ip
    d028:	549c      	strb	r4, [r3, r2]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    d02a:	3158      	adds	r1, #88	; 0x58
    d02c:	0089      	lsls	r1, r1, #2
    d02e:	1859      	adds	r1, r3, r1
    d030:	724d      	strb	r5, [r1, #9]
    d032:	728d      	strb	r5, [r1, #10]
    d034:	72cd      	strb	r5, [r1, #11]
    d036:	730d      	strb	r5, [r1, #12]
    for (i = 3; i < RegParams.maxChannels; i++)
    d038:	3001      	adds	r0, #1
    d03a:	b2c0      	uxtb	r0, r0
    d03c:	0001      	movs	r1, r0
    d03e:	4652      	mov	r2, sl
    d040:	569a      	ldrsb	r2, [r3, r2]
    d042:	4290      	cmp	r0, r2
    d044:	dbc2      	blt.n	cfcc <InitDefault920ChannelsKR+0x98>
    }
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    d046:	21ff      	movs	r1, #255	; 0xff
    d048:	2330      	movs	r3, #48	; 0x30
    d04a:	4a03      	ldr	r2, [pc, #12]	; (d058 <InitDefault920ChannelsKR+0x124>)
    d04c:	54d1      	strb	r1, [r2, r3]
}
    d04e:	bc1c      	pop	{r2, r3, r4}
    d050:	4690      	mov	r8, r2
    d052:	4699      	mov	r9, r3
    d054:	46a2      	mov	sl, r4
    d056:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d058:	20002b88 	.word	0x20002b88
    d05c:	00016a21 	.word	0x00016a21
    d060:	00019254 	.word	0x00019254
    d064:	00016a0f 	.word	0x00016a0f
    d068:	00019230 	.word	0x00019230

0000d06c <LORAREG_GetAttr>:
 * \param[out] Result of the GET operation
 * \retval LORAWAN_SUCCESS : If GET is successful
 *	LORAWAN_INVALID_PARAMETER if the input attribute or the attribute type is invalid
 */
StackRetStatus_t LORAREG_GetAttr(LorawanRegionalAttributes_t attrType, void *attrInput, void *attrOutput)
{
    d06c:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    d06e:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    d070:	283c      	cmp	r0, #60	; 0x3c
    d072:	d901      	bls.n	d078 <LORAREG_GetAttr+0xc>
	{
	    result = pGetAttr[attrType](attrType, attrInput,attrOutput);	
	}

	return result;
}
    d074:	0018      	movs	r0, r3
    d076:	bd10      	pop	{r4, pc}
	    result = pGetAttr[attrType](attrType, attrInput,attrOutput);	
    d078:	0084      	lsls	r4, r0, #2
    d07a:	4b02      	ldr	r3, [pc, #8]	; (d084 <LORAREG_GetAttr+0x18>)
    d07c:	58e3      	ldr	r3, [r4, r3]
    d07e:	4798      	blx	r3
    d080:	0003      	movs	r3, r0
    d082:	e7f7      	b.n	d074 <LORAREG_GetAttr+0x8>
    d084:	20001d80 	.word	0x20001d80

0000d088 <LORAREG_ValidateAttr>:
 * \param[in] attrInput Input used to validate the attribute value
 * \retval LORAWAN_SUCCESS : If Validate is successful
 *	LORAWAN_INVALID_PARAMETER if the input attribute or the attribute type is invalid
 */
StackRetStatus_t LORAREG_ValidateAttr(LorawanRegionalAttributes_t attrType, void *attrInput)
{
    d088:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    d08a:	230a      	movs	r3, #10
	
	if(attrType < REG_NUM_ATTRIBUTES)
    d08c:	283c      	cmp	r0, #60	; 0x3c
    d08e:	d901      	bls.n	d094 <LORAREG_ValidateAttr+0xc>
	{
	    result = pValidateAttr[attrType](attrType, attrInput);		
	}

	return result;
}
    d090:	0018      	movs	r0, r3
    d092:	bd10      	pop	{r4, pc}
	    result = pValidateAttr[attrType](attrType, attrInput);		
    d094:	0082      	lsls	r2, r0, #2
    d096:	4b02      	ldr	r3, [pc, #8]	; (d0a0 <LORAREG_ValidateAttr+0x18>)
    d098:	58d3      	ldr	r3, [r2, r3]
    d09a:	4798      	blx	r3
    d09c:	0003      	movs	r3, r0
    d09e:	e7f7      	b.n	d090 <LORAREG_ValidateAttr+0x8>
    d0a0:	20001f68 	.word	0x20001f68

0000d0a4 <LORAREG_SetAttr>:
 * \param[in] attrInput Input used to update the attribute value
 * \retval LORAWAN_SUCCESS : If Update is successful
 *	LORAWAN_INVALID_PARAMETER if the input attribute or the attribute type is invalid
 */
StackRetStatus_t LORAREG_SetAttr(LorawanRegionalAttributes_t attrType, void *attrInput)
{
    d0a4:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    d0a6:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    d0a8:	283c      	cmp	r0, #60	; 0x3c
    d0aa:	d901      	bls.n	d0b0 <LORAREG_SetAttr+0xc>
	{
	    result = pSetAttr[attrType](attrType, attrInput);		
	}

	return result;
}
    d0ac:	0018      	movs	r0, r3
    d0ae:	bd10      	pop	{r4, pc}
	    result = pSetAttr[attrType](attrType, attrInput);		
    d0b0:	0082      	lsls	r2, r0, #2
    d0b2:	4b02      	ldr	r3, [pc, #8]	; (d0bc <LORAREG_SetAttr+0x18>)
    d0b4:	58d3      	ldr	r3, [r2, r3]
    d0b6:	4798      	blx	r3
    d0b8:	0003      	movs	r3, r0
    d0ba:	e7f7      	b.n	d0ac <LORAREG_SetAttr+0x8>
    d0bc:	20001e74 	.word	0x20001e74

0000d0c0 <setDefaultTxPower>:
}
#endif
StackRetStatus_t setDefaultTxPower(IsmBand_t ismBand)
{   
	StackRetStatus_t result = LORAWAN_SUCCESS;
	if(ismBand == ISM_EU868)
    d0c0:	2800      	cmp	r0, #0
    d0c2:	d00e      	beq.n	d0e2 <setDefaultTxPower+0x22>
	{
			RegParams.MacTxPower = MAC_DEF_TX_POWER_EU;
	}
	else if(ismBand == ISM_JPN923)
    d0c4:	2805      	cmp	r0, #5
    d0c6:	d013      	beq.n	d0f0 <setDefaultTxPower+0x30>
	{
		RegParams.MacTxPower = MAC_DEF_TX_POWER_JP;
	}
	else if (ismBand == ISM_KR920)
    d0c8:	2804      	cmp	r0, #4
    d0ca:	d017      	beq.n	d0fc <setDefaultTxPower+0x3c>
	}
	else if (ismBand == ISM_ASBAND)
	{
		RegParams.MacTxPower = MAC_DEF_TX_POWER_AS;
	}
	else if(ismBand == ISM_AU915)
    d0cc:	2803      	cmp	r0, #3
    d0ce:	d01b      	beq.n	d108 <setDefaultTxPower+0x48>
	{
		RegParams.MacTxPower = MAC_DEF_TX_POWER_NA;
	}
	else
	{
		result = LORAWAN_INVALID_PARAMETER;
    d0d0:	230a      	movs	r3, #10
	else if(ismBand == ISM_NA915)
    d0d2:	2802      	cmp	r0, #2
    d0d4:	d10a      	bne.n	d0ec <setDefaultTxPower+0x2c>
		RegParams.MacTxPower = MAC_DEF_TX_POWER_NA;
    d0d6:	2107      	movs	r1, #7
    d0d8:	331d      	adds	r3, #29
    d0da:	4a0e      	ldr	r2, [pc, #56]	; (d114 <setDefaultTxPower+0x54>)
    d0dc:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    d0de:	3b1f      	subs	r3, #31
    d0e0:	e004      	b.n	d0ec <setDefaultTxPower+0x2c>
			RegParams.MacTxPower = MAC_DEF_TX_POWER_EU;
    d0e2:	2101      	movs	r1, #1
    d0e4:	2327      	movs	r3, #39	; 0x27
    d0e6:	4a0b      	ldr	r2, [pc, #44]	; (d114 <setDefaultTxPower+0x54>)
    d0e8:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    d0ea:	3b1f      	subs	r3, #31
	}
#if (ENABLE_PDS==1)
	PDS_STORE(RegParams.MacTxPower);
#endif
	return result;
}
    d0ec:	0018      	movs	r0, r3
    d0ee:	4770      	bx	lr
		RegParams.MacTxPower = MAC_DEF_TX_POWER_JP;
    d0f0:	2101      	movs	r1, #1
    d0f2:	2327      	movs	r3, #39	; 0x27
    d0f4:	4a07      	ldr	r2, [pc, #28]	; (d114 <setDefaultTxPower+0x54>)
    d0f6:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    d0f8:	3b1f      	subs	r3, #31
    d0fa:	e7f7      	b.n	d0ec <setDefaultTxPower+0x2c>
		RegParams.MacTxPower = MAC_DEF_TX_POWER_KR;
    d0fc:	2101      	movs	r1, #1
    d0fe:	2327      	movs	r3, #39	; 0x27
    d100:	4a04      	ldr	r2, [pc, #16]	; (d114 <setDefaultTxPower+0x54>)
    d102:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    d104:	3b1f      	subs	r3, #31
    d106:	e7f1      	b.n	d0ec <setDefaultTxPower+0x2c>
		RegParams.MacTxPower = MAC_DEF_TX_POWER_AU;
    d108:	2107      	movs	r1, #7
    d10a:	2327      	movs	r3, #39	; 0x27
    d10c:	4a01      	ldr	r2, [pc, #4]	; (d114 <setDefaultTxPower+0x54>)
    d10e:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    d110:	3b1f      	subs	r3, #31
    d112:	e7eb      	b.n	d0ec <setDefaultTxPower+0x2c>
    d114:	20002b88 	.word	0x20002b88

0000d118 <Enableallchannels>:
	}
	return status;
}
#endif
void Enableallchannels()
{
    d118:	b510      	push	{r4, lr}
    d11a:	2000      	movs	r0, #0
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
	{
		RegParams.pChParams[i].status = ENABLED;
    d11c:	490a      	ldr	r1, [pc, #40]	; (d148 <Enableallchannels+0x30>)
    d11e:	2401      	movs	r4, #1
    d120:	790b      	ldrb	r3, [r1, #4]
    d122:	794a      	ldrb	r2, [r1, #5]
    d124:	0212      	lsls	r2, r2, #8
    d126:	431a      	orrs	r2, r3
    d128:	798b      	ldrb	r3, [r1, #6]
    d12a:	041b      	lsls	r3, r3, #16
    d12c:	431a      	orrs	r2, r3
    d12e:	79cb      	ldrb	r3, [r1, #7]
    d130:	061b      	lsls	r3, r3, #24
    d132:	4313      	orrs	r3, r2
    d134:	541c      	strb	r4, [r3, r0]
    d136:	3002      	adds	r0, #2
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
    d138:	2890      	cmp	r0, #144	; 0x90
    d13a:	d1f1      	bne.n	d120 <Enableallchannels+0x8>
	}
	RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    d13c:	2100      	movs	r1, #0
    d13e:	23ac      	movs	r3, #172	; 0xac
    d140:	005b      	lsls	r3, r3, #1
    d142:	4a01      	ldr	r2, [pc, #4]	; (d148 <Enableallchannels+0x30>)
    d144:	54d1      	strb	r1, [r2, r3]
#if (ENABLE_PDS == 1)
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
	PDS_STORE(RegParams.regParamItems.lastUsedSB);
#endif
}
    d146:	bd10      	pop	{r4, pc}
    d148:	20002b88 	.word	0x20002b88

0000d14c <LORAREG_EnableallChannels>:
StackRetStatus_t LORAREG_EnableallChannels(IsmBand_t ismBand)
{
    d14c:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_SUCCESS;
	if(ismBand == ISM_EU868)
    d14e:	2800      	cmp	r0, #0
    d150:	d00a      	beq.n	d168 <LORAREG_EnableallChannels+0x1c>
	{
		 InitDefault868Channels();
	}
	else if (ismBand == ISM_EU433)
    d152:	2801      	cmp	r0, #1
    d154:	d00b      	beq.n	d16e <LORAREG_EnableallChannels+0x22>
	{
		 InitDefault433Channels();
	}
	else if(ismBand == ISM_JPN923)
    d156:	2805      	cmp	r0, #5
    d158:	d00c      	beq.n	d174 <LORAREG_EnableallChannels+0x28>
	{
		 InitDefault920Channels();	
	}
	else if (ismBand == ISM_KR920)
    d15a:	2804      	cmp	r0, #4
    d15c:	d00d      	beq.n	d17a <LORAREG_EnableallChannels+0x2e>
	}
	else if (ismBand == ISM_ASBAND)
	{
		 InitDefault923Channels ();
	}
	else if(ismBand == ISM_AU915 || ismBand == ISM_NA915)
    d15e:	3802      	subs	r0, #2
    d160:	2801      	cmp	r0, #1
    d162:	d90d      	bls.n	d180 <LORAREG_EnableallChannels+0x34>
	{
		 Enableallchannels();
	}
	return result;
}
    d164:	2008      	movs	r0, #8
    d166:	bd10      	pop	{r4, pc}
		 InitDefault868Channels();
    d168:	4b07      	ldr	r3, [pc, #28]	; (d188 <LORAREG_EnableallChannels+0x3c>)
    d16a:	4798      	blx	r3
    d16c:	e7fa      	b.n	d164 <LORAREG_EnableallChannels+0x18>
		 InitDefault433Channels();
    d16e:	4b07      	ldr	r3, [pc, #28]	; (d18c <LORAREG_EnableallChannels+0x40>)
    d170:	4798      	blx	r3
    d172:	e7f7      	b.n	d164 <LORAREG_EnableallChannels+0x18>
		 InitDefault920Channels();	
    d174:	4b06      	ldr	r3, [pc, #24]	; (d190 <LORAREG_EnableallChannels+0x44>)
    d176:	4798      	blx	r3
    d178:	e7f4      	b.n	d164 <LORAREG_EnableallChannels+0x18>
		 InitDefault920ChannelsKR();
    d17a:	4b06      	ldr	r3, [pc, #24]	; (d194 <LORAREG_EnableallChannels+0x48>)
    d17c:	4798      	blx	r3
    d17e:	e7f1      	b.n	d164 <LORAREG_EnableallChannels+0x18>
		 Enableallchannels();
    d180:	4b05      	ldr	r3, [pc, #20]	; (d198 <LORAREG_EnableallChannels+0x4c>)
    d182:	4798      	blx	r3
    d184:	e7ee      	b.n	d164 <LORAREG_EnableallChannels+0x18>
    d186:	46c0      	nop			; (mov r8, r8)
    d188:	0000cc1d 	.word	0x0000cc1d
    d18c:	0000cd21 	.word	0x0000cd21
    d190:	0000ce15 	.word	0x0000ce15
    d194:	0000cf35 	.word	0x0000cf35
    d198:	0000d119 	.word	0x0000d119

0000d19c <AESEncode>:
 * \brief Encrypts the given block of data
 * \param[in,out] block Block of input data to be encrypted
 * \param[in] key Cryptographic key to be used in AES encryption
 */
void AESEncode(unsigned char* block, unsigned char* masterKey)
{
    d19c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d19e:	b083      	sub	sp, #12
    d1a0:	0004      	movs	r4, r0
    d1a2:	000e      	movs	r6, r1
#ifndef UT	
	
	/* Configure the AES. */
	g_aes_cfg.encrypt_mode = AES_ENCRYPTION;
    d1a4:	4a2b      	ldr	r2, [pc, #172]	; (d254 <AESEncode+0xb8>)
    d1a6:	2101      	movs	r1, #1
    d1a8:	7011      	strb	r1, [r2, #0]
	g_aes_cfg.key_size = AES_KEY_SIZE_128;
    d1aa:	2300      	movs	r3, #0
    d1ac:	7053      	strb	r3, [r2, #1]
	g_aes_cfg.start_mode = AES_AUTO_START;
    d1ae:	7091      	strb	r1, [r2, #2]
	g_aes_cfg.opmode = AES_ECB_MODE;
    d1b0:	70d3      	strb	r3, [r2, #3]
	g_aes_cfg.cfb_size = AES_CFB_SIZE_128;
    d1b2:	7113      	strb	r3, [r2, #4]
	g_aes_cfg.lod = false;
    d1b4:	7213      	strb	r3, [r2, #8]
	aes_set_config(&aes_instance,AES, &g_aes_cfg);
    d1b6:	4928      	ldr	r1, [pc, #160]	; (d258 <AESEncode+0xbc>)
    d1b8:	4828      	ldr	r0, [pc, #160]	; (d25c <AESEncode+0xc0>)
    d1ba:	4b29      	ldr	r3, [pc, #164]	; (d260 <AESEncode+0xc4>)
    d1bc:	4798      	blx	r3
    d1be:	2100      	movs	r1, #0
		uint8_t u8[4];
	}long_addr;
	uint8_t index;
	for (index = 0; index < 4; index++)
	{
		long_addr.u8[index] = *data++;
    d1c0:	ad01      	add	r5, sp, #4
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(masterKey+(i*(sizeof(uint32_t))));
    d1c2:	4f28      	ldr	r7, [pc, #160]	; (d264 <AESEncode+0xc8>)
    d1c4:	1870      	adds	r0, r6, r1
    d1c6:	2300      	movs	r3, #0
    d1c8:	5cc2      	ldrb	r2, [r0, r3]
    d1ca:	555a      	strb	r2, [r3, r5]
    d1cc:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    d1ce:	2b04      	cmp	r3, #4
    d1d0:	d1fa      	bne.n	d1c8 <AESEncode+0x2c>
    d1d2:	9b01      	ldr	r3, [sp, #4]
    d1d4:	51cb      	str	r3, [r1, r7]
    d1d6:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    d1d8:	2910      	cmp	r1, #16
    d1da:	d1f3      	bne.n	d1c4 <AESEncode+0x28>
	}
	
	/* Set the cryptographic key. */
	aes_write_key(&aes_instance, io_data);
    d1dc:	4d1f      	ldr	r5, [pc, #124]	; (d25c <AESEncode+0xc0>)
    d1de:	4921      	ldr	r1, [pc, #132]	; (d264 <AESEncode+0xc8>)
    d1e0:	0028      	movs	r0, r5
    d1e2:	4b21      	ldr	r3, [pc, #132]	; (d268 <AESEncode+0xcc>)
    d1e4:	4798      	blx	r3
 */
static inline void aes_set_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg |= AES_CTRLB_NEWMSG;
    d1e6:	682a      	ldr	r2, [r5, #0]
    d1e8:	7913      	ldrb	r3, [r2, #4]
    d1ea:	2102      	movs	r1, #2
    d1ec:	430b      	orrs	r3, r1
    d1ee:	7113      	strb	r3, [r2, #4]
    d1f0:	2100      	movs	r1, #0
		long_addr.u8[index] = *data++;
    d1f2:	ad01      	add	r5, sp, #4
	
	aes_set_new_message(&aes_instance);
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(block+(i*(sizeof(uint32_t))));			
    d1f4:	4e1b      	ldr	r6, [pc, #108]	; (d264 <AESEncode+0xc8>)
    d1f6:	1860      	adds	r0, r4, r1
    d1f8:	2300      	movs	r3, #0
    d1fa:	5cc2      	ldrb	r2, [r0, r3]
    d1fc:	555a      	strb	r2, [r3, r5]
    d1fe:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    d200:	2b04      	cmp	r3, #4
    d202:	d1fa      	bne.n	d1fa <AESEncode+0x5e>
    d204:	9b01      	ldr	r3, [sp, #4]
    d206:	518b      	str	r3, [r1, r6]
    d208:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    d20a:	2910      	cmp	r1, #16
    d20c:	d1f3      	bne.n	d1f6 <AESEncode+0x5a>
	}
		
	/* Write the data to be ciphered to the input data registers. */
	aes_write_input_data(&aes_instance, io_data);
    d20e:	4d13      	ldr	r5, [pc, #76]	; (d25c <AESEncode+0xc0>)
    d210:	4914      	ldr	r1, [pc, #80]	; (d264 <AESEncode+0xc8>)
    d212:	0028      	movs	r0, r5
    d214:	4b15      	ldr	r3, [pc, #84]	; (d26c <AESEncode+0xd0>)
    d216:	4798      	blx	r3
 */
static inline void aes_clear_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg &= ~AES_CTRLB_NEWMSG;
    d218:	682d      	ldr	r5, [r5, #0]
    d21a:	792b      	ldrb	r3, [r5, #4]
    d21c:	2202      	movs	r2, #2
    d21e:	4393      	bics	r3, r2
    d220:	712b      	strb	r3, [r5, #4]
	Assert(module->hw);

	uint32_t int_flags = module->hw->INTFLAG.reg;
	uint32_t status_flags = 0;

	if (int_flags & AES_INTFLAG_ENCCMP) {
    d222:	2101      	movs	r1, #1
		status_flags |= AES_ENCRYPTION_COMPLETE;
	}

	if (int_flags & AES_INTFLAG_GFMCMP) {
    d224:	2002      	movs	r0, #2
    d226:	e001      	b.n	d22c <AESEncode+0x90>
	aes_clear_new_message(&aes_instance);
	/* Wait for the end of the encryption process. */
	while (!(aes_get_status(&aes_instance) & AES_ENCRYPTION_COMPLETE)) {
    d228:	4211      	tst	r1, r2
    d22a:	d107      	bne.n	d23c <AESEncode+0xa0>
	uint32_t int_flags = module->hw->INTFLAG.reg;
    d22c:	79eb      	ldrb	r3, [r5, #7]
    d22e:	b2db      	uxtb	r3, r3
	if (int_flags & AES_INTFLAG_ENCCMP) {
    d230:	000a      	movs	r2, r1
    d232:	401a      	ands	r2, r3
	if (int_flags & AES_INTFLAG_GFMCMP) {
    d234:	4218      	tst	r0, r3
    d236:	d0f7      	beq.n	d228 <AESEncode+0x8c>
		status_flags |= AES_GF_MULTI_COMPLETE;
    d238:	4302      	orrs	r2, r0
    d23a:	e7f5      	b.n	d228 <AESEncode+0x8c>
	}
	aes_read_output_data(&aes_instance,io_data);
    d23c:	4d09      	ldr	r5, [pc, #36]	; (d264 <AESEncode+0xc8>)
    d23e:	0029      	movs	r1, r5
    d240:	4806      	ldr	r0, [pc, #24]	; (d25c <AESEncode+0xc0>)
    d242:	4b0b      	ldr	r3, [pc, #44]	; (d270 <AESEncode+0xd4>)
    d244:	4798      	blx	r3
	
	memcpy(block,io_data,BLOCKSIZE);
    d246:	2210      	movs	r2, #16
    d248:	0029      	movs	r1, r5
    d24a:	0020      	movs	r0, r4
    d24c:	4b09      	ldr	r3, [pc, #36]	; (d274 <AESEncode+0xd8>)
    d24e:	4798      	blx	r3
#endif	
}
    d250:	b003      	add	sp, #12
    d252:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d254:	20002d94 	.word	0x20002d94
    d258:	42003400 	.word	0x42003400
    d25c:	20002da0 	.word	0x20002da0
    d260:	00004bb9 	.word	0x00004bb9
    d264:	2000205c 	.word	0x2000205c
    d268:	00004c4d 	.word	0x00004c4d
    d26c:	00004c81 	.word	0x00004c81
    d270:	00004cd1 	.word	0x00004cd1
    d274:	00016a0f 	.word	0x00016a0f

0000d278 <AESInit>:

/**
 * \brief Initializes the AES Engine.
 */
void AESInit(void)
{
    d278:	b570      	push	{r4, r5, r6, lr}
#ifndef UT	
	//! [setup_config]
	aes_get_config_defaults(&g_aes_cfg);
    d27a:	4d07      	ldr	r5, [pc, #28]	; (d298 <AESInit+0x20>)
    d27c:	0028      	movs	r0, r5
    d27e:	4b07      	ldr	r3, [pc, #28]	; (d29c <AESInit+0x24>)
    d280:	4798      	blx	r3
	//! [setup_config]

	//! [setup_config_defaults]
	aes_init(&aes_instance,AES, &g_aes_cfg);
    d282:	4c07      	ldr	r4, [pc, #28]	; (d2a0 <AESInit+0x28>)
    d284:	002a      	movs	r2, r5
    d286:	4907      	ldr	r1, [pc, #28]	; (d2a4 <AESInit+0x2c>)
    d288:	0020      	movs	r0, r4
    d28a:	4b07      	ldr	r3, [pc, #28]	; (d2a8 <AESInit+0x30>)
    d28c:	4798      	blx	r3
	//! [setup_config_defaults]
	//! [module_enable]
	aes_enable(&aes_instance);
    d28e:	0020      	movs	r0, r4
    d290:	4b06      	ldr	r3, [pc, #24]	; (d2ac <AESInit+0x34>)
    d292:	4798      	blx	r3
#endif	
}
    d294:	bd70      	pop	{r4, r5, r6, pc}
    d296:	46c0      	nop			; (mov r8, r8)
    d298:	20002d94 	.word	0x20002d94
    d29c:	00004b7d 	.word	0x00004b7d
    d2a0:	20002da0 	.word	0x20002da0
    d2a4:	42003400 	.word	0x42003400
    d2a8:	00004c2d 	.word	0x00004c2d
    d2ac:	00004b97 	.word	0x00004b97

0000d2b0 <hwTimerExpiryCallback>:
	SYS_HwOverflow_Cb();
}

/* ISR to handle CC0 interrupt from TC0 */
static void hwTimerExpiryCallback(void)
{
    d2b0:	b510      	push	{r4, lr}
    if (0 < runningTimers)
    d2b2:	4b06      	ldr	r3, [pc, #24]	; (d2cc <hwTimerExpiryCallback+0x1c>)
    d2b4:	781b      	ldrb	r3, [r3, #0]
    d2b6:	2b00      	cmp	r3, #0
    d2b8:	d100      	bne.n	d2bc <hwTimerExpiryCallback+0xc>
    {
        isTimerTriggered = true;
        SYSTEM_PostTask(TIMER_TASK_ID);
    }
}
    d2ba:	bd10      	pop	{r4, pc}
        isTimerTriggered = true;
    d2bc:	2201      	movs	r2, #1
    d2be:	4b04      	ldr	r3, [pc, #16]	; (d2d0 <hwTimerExpiryCallback+0x20>)
    d2c0:	701a      	strb	r2, [r3, #0]
        SYSTEM_PostTask(TIMER_TASK_ID);
    d2c2:	2001      	movs	r0, #1
    d2c4:	4b03      	ldr	r3, [pc, #12]	; (d2d4 <hwTimerExpiryCallback+0x24>)
    d2c6:	4798      	blx	r3
}
    d2c8:	e7f7      	b.n	d2ba <hwTimerExpiryCallback+0xa>
    d2ca:	46c0      	nop			; (mov r8, r8)
    d2cc:	2000207c 	.word	0x2000207c
    d2d0:	20002f4a 	.word	0x20002f4a
    d2d4:	0000dbcd 	.word	0x0000dbcd

0000d2d8 <hwTimerOverflowCallback>:
{
    d2d8:	b510      	push	{r4, lr}
    d2da:	b082      	sub	sp, #8
    uint16_t temp = sysTime;
    d2dc:	4925      	ldr	r1, [pc, #148]	; (d374 <hwTimerOverflowCallback+0x9c>)
    d2de:	880a      	ldrh	r2, [r1, #0]
    d2e0:	b292      	uxth	r2, r2
    if (++sysTime < temp)
    d2e2:	880b      	ldrh	r3, [r1, #0]
    d2e4:	3301      	adds	r3, #1
    d2e6:	b29b      	uxth	r3, r3
    d2e8:	800b      	strh	r3, [r1, #0]
    d2ea:	429a      	cmp	r2, r3
    d2ec:	d903      	bls.n	d2f6 <hwTimerOverflowCallback+0x1e>
        sysTimeOvf++;
    d2ee:	4a22      	ldr	r2, [pc, #136]	; (d378 <hwTimerOverflowCallback+0xa0>)
    d2f0:	6813      	ldr	r3, [r2, #0]
    d2f2:	3301      	adds	r3, #1
    d2f4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    d2f6:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d2fa:	425a      	negs	r2, r3
    d2fc:	4153      	adcs	r3, r2
    d2fe:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    d300:	b672      	cpsid	i
    d302:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d306:	2200      	movs	r2, #0
    d308:	4b1c      	ldr	r3, [pc, #112]	; (d37c <hwTimerOverflowCallback+0xa4>)
    d30a:	701a      	strb	r2, [r3, #0]
	return flags;
    d30c:	9c01      	ldr	r4, [sp, #4]
{
    uint32_t tmo32;
    uint16_t tmoHigh16, tmoLow16;
    uint8_t flags = cpu_irq_save();

    if (SWTIMER_INVALID != runningTimerQueueHead && !swTimers[runningTimerQueueHead].loaded)
    d30e:	4b1c      	ldr	r3, [pc, #112]	; (d380 <hwTimerOverflowCallback+0xa8>)
    d310:	681b      	ldr	r3, [r3, #0]
    d312:	2bff      	cmp	r3, #255	; 0xff
    d314:	d00d      	beq.n	d332 <hwTimerOverflowCallback+0x5a>
    d316:	0119      	lsls	r1, r3, #4
    d318:	4a1a      	ldr	r2, [pc, #104]	; (d384 <hwTimerOverflowCallback+0xac>)
    d31a:	1852      	adds	r2, r2, r1
    d31c:	7b52      	ldrb	r2, [r2, #13]
    d31e:	2a00      	cmp	r2, #0
    d320:	d107      	bne.n	d332 <hwTimerOverflowCallback+0x5a>
    {
        tmo32 = swTimers[runningTimerQueueHead].absoluteExpiryTime;
    d322:	4a18      	ldr	r2, [pc, #96]	; (d384 <hwTimerOverflowCallback+0xac>)
    d324:	5888      	ldr	r0, [r1, r2]
        tmoHigh16 = (uint16_t)(tmo32 >> SWTIMER_SYSTIME_SHIFTMASK);

        if (tmoHigh16 == sysTime)
    d326:	4b13      	ldr	r3, [pc, #76]	; (d374 <hwTimerOverflowCallback+0x9c>)
    d328:	881b      	ldrh	r3, [r3, #0]
    d32a:	b29b      	uxth	r3, r3
    d32c:	0c02      	lsrs	r2, r0, #16
    d32e:	429a      	cmp	r2, r3
    d330:	d00c      	beq.n	d34c <hwTimerOverflowCallback+0x74>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    d332:	23ff      	movs	r3, #255	; 0xff
    d334:	4223      	tst	r3, r4
    d336:	d005      	beq.n	d344 <hwTimerOverflowCallback+0x6c>
		cpu_irq_enable();
    d338:	2201      	movs	r2, #1
    d33a:	4b10      	ldr	r3, [pc, #64]	; (d37c <hwTimerOverflowCallback+0xa4>)
    d33c:	701a      	strb	r2, [r3, #0]
    d33e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d342:	b662      	cpsie	i
	SYS_HwOverflow_Cb();
    d344:	4b10      	ldr	r3, [pc, #64]	; (d388 <hwTimerOverflowCallback+0xb0>)
    d346:	4798      	blx	r3
}
    d348:	b002      	add	sp, #8
    d34a:	bd10      	pop	{r4, pc}
        {
            tmoLow16 = (uint16_t)(tmo32 & SWTIMER_HWTIME_MASK);
    d34c:	b280      	uxth	r0, r0
            if (SWTIMER_MIN_TIMEOUT < tmoLow16)
    d34e:	28ff      	cmp	r0, #255	; 0xff
    d350:	d909      	bls.n	d366 <hwTimerOverflowCallback+0x8e>
            {
                common_tc_delay(tmoLow16);
    d352:	4b0e      	ldr	r3, [pc, #56]	; (d38c <hwTimerOverflowCallback+0xb4>)
    d354:	4798      	blx	r3
                swTimers[runningTimerQueueHead].loaded = true;
    d356:	4b0a      	ldr	r3, [pc, #40]	; (d380 <hwTimerOverflowCallback+0xa8>)
    d358:	681a      	ldr	r2, [r3, #0]
    d35a:	0112      	lsls	r2, r2, #4
    d35c:	4b09      	ldr	r3, [pc, #36]	; (d384 <hwTimerOverflowCallback+0xac>)
    d35e:	189b      	adds	r3, r3, r2
    d360:	2201      	movs	r2, #1
    d362:	735a      	strb	r2, [r3, #13]
    d364:	e7e5      	b.n	d332 <hwTimerOverflowCallback+0x5a>
            }
            else
            {
                isTimerTriggered = true;
    d366:	2201      	movs	r2, #1
    d368:	4b09      	ldr	r3, [pc, #36]	; (d390 <hwTimerOverflowCallback+0xb8>)
    d36a:	701a      	strb	r2, [r3, #0]
                SYSTEM_PostTask(TIMER_TASK_ID);
    d36c:	2001      	movs	r0, #1
    d36e:	4b09      	ldr	r3, [pc, #36]	; (d394 <hwTimerOverflowCallback+0xbc>)
    d370:	4798      	blx	r3
    d372:	e7de      	b.n	d332 <hwTimerOverflowCallback+0x5a>
    d374:	20002f48 	.word	0x20002f48
    d378:	20002f4c 	.word	0x20002f4c
    d37c:	20000014 	.word	0x20000014
    d380:	20002078 	.word	0x20002078
    d384:	20002db8 	.word	0x20002db8
    d388:	0000c36d 	.word	0x0000c36d
    d38c:	00013669 	.word	0x00013669
    d390:	20002f4a 	.word	0x20002f4a
    d394:	0000dbcd 	.word	0x0000dbcd

0000d398 <loadHwTimer>:
{
    d398:	b570      	push	{r4, r5, r6, lr}
    d39a:	0004      	movs	r4, r0
    if (SWTIMER_INVALID != timerId)
    d39c:	28ff      	cmp	r0, #255	; 0xff
    d39e:	d030      	beq.n	d402 <loadHwTimer+0x6a>
    time |= ((uint64_t) sysTimeOvf) << 32;
    d3a0:	4b19      	ldr	r3, [pc, #100]	; (d408 <loadHwTimer+0x70>)
    d3a2:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    d3a4:	4b19      	ldr	r3, [pc, #100]	; (d40c <loadHwTimer+0x74>)
    d3a6:	881d      	ldrh	r5, [r3, #0]
    d3a8:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    d3aa:	4b19      	ldr	r3, [pc, #100]	; (d410 <loadHwTimer+0x78>)
    d3ac:	4798      	blx	r3
        uint32_t expiryTime = swTimers[timerId].absoluteExpiryTime;
    d3ae:	0123      	lsls	r3, r4, #4
    time |= (uint64_t) common_tc_read_count();
    d3b0:	4328      	orrs	r0, r5
    return ((t2 - t1) < INT32_MAX);
    d3b2:	4a18      	ldr	r2, [pc, #96]	; (d414 <loadHwTimer+0x7c>)
    d3b4:	589b      	ldr	r3, [r3, r2]
    d3b6:	1a18      	subs	r0, r3, r0
        if (swtimerCompareTime(now, expiryTime))
    d3b8:	4b17      	ldr	r3, [pc, #92]	; (d418 <loadHwTimer+0x80>)
    d3ba:	4298      	cmp	r0, r3
    d3bc:	d81a      	bhi.n	d3f4 <loadHwTimer+0x5c>
            if (!swTimers[timerId].loaded)
    d3be:	0122      	lsls	r2, r4, #4
    d3c0:	4b14      	ldr	r3, [pc, #80]	; (d414 <loadHwTimer+0x7c>)
    d3c2:	189b      	adds	r3, r3, r2
    d3c4:	7b5b      	ldrb	r3, [r3, #13]
    d3c6:	2b00      	cmp	r3, #0
    d3c8:	d11d      	bne.n	d406 <loadHwTimer+0x6e>
                if (SWTIMER_MIN_TIMEOUT >= timeDiff)
    d3ca:	28ff      	cmp	r0, #255	; 0xff
    d3cc:	d90b      	bls.n	d3e6 <loadHwTimer+0x4e>
                else  if ((uint32_t)TIMER_PERIOD >= timeDiff)
    d3ce:	4b13      	ldr	r3, [pc, #76]	; (d41c <loadHwTimer+0x84>)
    d3d0:	4298      	cmp	r0, r3
    d3d2:	d818      	bhi.n	d406 <loadHwTimer+0x6e>
                    common_tc_delay((uint16_t)timeDiff);
    d3d4:	b280      	uxth	r0, r0
    d3d6:	4b12      	ldr	r3, [pc, #72]	; (d420 <loadHwTimer+0x88>)
    d3d8:	4798      	blx	r3
                    swTimers[timerId].loaded = true;
    d3da:	0124      	lsls	r4, r4, #4
    d3dc:	4b0d      	ldr	r3, [pc, #52]	; (d414 <loadHwTimer+0x7c>)
    d3de:	191c      	adds	r4, r3, r4
    d3e0:	2301      	movs	r3, #1
    d3e2:	7363      	strb	r3, [r4, #13]
    d3e4:	e00f      	b.n	d406 <loadHwTimer+0x6e>
                    isTimerTriggered = true;
    d3e6:	2201      	movs	r2, #1
    d3e8:	4b0e      	ldr	r3, [pc, #56]	; (d424 <loadHwTimer+0x8c>)
    d3ea:	701a      	strb	r2, [r3, #0]
                    SYSTEM_PostTask(TIMER_TASK_ID);
    d3ec:	2001      	movs	r0, #1
    d3ee:	4b0e      	ldr	r3, [pc, #56]	; (d428 <loadHwTimer+0x90>)
    d3f0:	4798      	blx	r3
    d3f2:	e008      	b.n	d406 <loadHwTimer+0x6e>
            isTimerTriggered = true;
    d3f4:	2201      	movs	r2, #1
    d3f6:	4b0b      	ldr	r3, [pc, #44]	; (d424 <loadHwTimer+0x8c>)
    d3f8:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    d3fa:	2001      	movs	r0, #1
    d3fc:	4b0a      	ldr	r3, [pc, #40]	; (d428 <loadHwTimer+0x90>)
    d3fe:	4798      	blx	r3
    d400:	e001      	b.n	d406 <loadHwTimer+0x6e>
        common_tc_compare_stop();
    d402:	4b0a      	ldr	r3, [pc, #40]	; (d42c <loadHwTimer+0x94>)
    d404:	4798      	blx	r3
}
    d406:	bd70      	pop	{r4, r5, r6, pc}
    d408:	20002f4c 	.word	0x20002f4c
    d40c:	20002f48 	.word	0x20002f48
    d410:	000135f5 	.word	0x000135f5
    d414:	20002db8 	.word	0x20002db8
    d418:	7ffffffe 	.word	0x7ffffffe
    d41c:	0000ffff 	.word	0x0000ffff
    d420:	00013669 	.word	0x00013669
    d424:	20002f4a 	.word	0x20002f4a
    d428:	0000dbcd 	.word	0x0000dbcd
    d42c:	00013641 	.word	0x00013641

0000d430 <swtimerInternalHandler>:

/**************************************************************************//**
\brief Internal handler for the timer trigger
******************************************************************************/
static void swtimerInternalHandler(void)
{
    d430:	b510      	push	{r4, lr}
    if (isTimerTriggered)
    d432:	4b1d      	ldr	r3, [pc, #116]	; (d4a8 <swtimerInternalHandler+0x78>)
    d434:	781b      	ldrb	r3, [r3, #0]
    d436:	2b00      	cmp	r3, #0
    d438:	d027      	beq.n	d48a <swtimerInternalHandler+0x5a>
    {
        isTimerTriggered = false;
    d43a:	2200      	movs	r2, #0
    d43c:	4b1a      	ldr	r3, [pc, #104]	; (d4a8 <swtimerInternalHandler+0x78>)
    d43e:	701a      	strb	r2, [r3, #0]

        if (0 < runningTimers)
    d440:	4b1a      	ldr	r3, [pc, #104]	; (d4ac <swtimerInternalHandler+0x7c>)
    d442:	781b      	ldrb	r3, [r3, #0]
    d444:	2b00      	cmp	r3, #0
    d446:	d020      	beq.n	d48a <swtimerInternalHandler+0x5a>
        { /* Holds the number of running timers */
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    d448:	4b19      	ldr	r3, [pc, #100]	; (d4b0 <swtimerInternalHandler+0x80>)
    d44a:	681b      	ldr	r3, [r3, #0]
    d44c:	2bff      	cmp	r3, #255	; 0xff
    d44e:	d01d      	beq.n	d48c <swtimerInternalHandler+0x5c>
                expiredTimerQueueHead = runningTimerQueueHead;
                expiredTimerQueueTail = runningTimerQueueHead;
            }
            else
            { /* there were already some timers expired before this one */
                swTimers[expiredTimerQueueTail].nextTimer = runningTimerQueueHead;
    d450:	4b18      	ldr	r3, [pc, #96]	; (d4b4 <swtimerInternalHandler+0x84>)
    d452:	6818      	ldr	r0, [r3, #0]
    d454:	4918      	ldr	r1, [pc, #96]	; (d4b8 <swtimerInternalHandler+0x88>)
    d456:	680b      	ldr	r3, [r1, #0]
    d458:	011a      	lsls	r2, r3, #4
    d45a:	4b18      	ldr	r3, [pc, #96]	; (d4bc <swtimerInternalHandler+0x8c>)
    d45c:	189b      	adds	r3, r3, r2
    d45e:	7318      	strb	r0, [r3, #12]
                expiredTimerQueueTail = runningTimerQueueHead;
    d460:	6008      	str	r0, [r1, #0]
            }

            runningTimerQueueHead = swTimers[runningTimerQueueHead].nextTimer;
    d462:	4a16      	ldr	r2, [pc, #88]	; (d4bc <swtimerInternalHandler+0x8c>)
    d464:	4913      	ldr	r1, [pc, #76]	; (d4b4 <swtimerInternalHandler+0x84>)
    d466:	680b      	ldr	r3, [r1, #0]
    d468:	011b      	lsls	r3, r3, #4
    d46a:	18d3      	adds	r3, r2, r3
    d46c:	7b18      	ldrb	r0, [r3, #12]
    d46e:	6008      	str	r0, [r1, #0]

            swTimers[expiredTimerQueueTail].nextTimer = SWTIMER_INVALID;
    d470:	4b11      	ldr	r3, [pc, #68]	; (d4b8 <swtimerInternalHandler+0x88>)
    d472:	681b      	ldr	r3, [r3, #0]
    d474:	011b      	lsls	r3, r3, #4
    d476:	18d2      	adds	r2, r2, r3
    d478:	23ff      	movs	r3, #255	; 0xff
    d47a:	7313      	strb	r3, [r2, #12]

            if ((--runningTimers) > 0)
    d47c:	4a0b      	ldr	r2, [pc, #44]	; (d4ac <swtimerInternalHandler+0x7c>)
    d47e:	7813      	ldrb	r3, [r2, #0]
    d480:	3b01      	subs	r3, #1
    d482:	b2db      	uxtb	r3, r3
    d484:	7013      	strb	r3, [r2, #0]
    d486:	2b00      	cmp	r3, #0
    d488:	d10b      	bne.n	d4a2 <swtimerInternalHandler+0x72>
            { /* keep the ball rolling! load the next head timer from the queue */
                loadHwTimer(runningTimerQueueHead);
            }
        }
    }
}
    d48a:	bd10      	pop	{r4, pc}
                (expiredTimerQueueTail == SWTIMER_INVALID))
    d48c:	4b0a      	ldr	r3, [pc, #40]	; (d4b8 <swtimerInternalHandler+0x88>)
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    d48e:	681b      	ldr	r3, [r3, #0]
    d490:	2bff      	cmp	r3, #255	; 0xff
    d492:	d1dd      	bne.n	d450 <swtimerInternalHandler+0x20>
                expiredTimerQueueHead = runningTimerQueueHead;
    d494:	4b07      	ldr	r3, [pc, #28]	; (d4b4 <swtimerInternalHandler+0x84>)
    d496:	681b      	ldr	r3, [r3, #0]
    d498:	4a05      	ldr	r2, [pc, #20]	; (d4b0 <swtimerInternalHandler+0x80>)
    d49a:	6013      	str	r3, [r2, #0]
                expiredTimerQueueTail = runningTimerQueueHead;
    d49c:	4a06      	ldr	r2, [pc, #24]	; (d4b8 <swtimerInternalHandler+0x88>)
    d49e:	6013      	str	r3, [r2, #0]
    d4a0:	e7df      	b.n	d462 <swtimerInternalHandler+0x32>
                loadHwTimer(runningTimerQueueHead);
    d4a2:	4b07      	ldr	r3, [pc, #28]	; (d4c0 <swtimerInternalHandler+0x90>)
    d4a4:	4798      	blx	r3
}
    d4a6:	e7f0      	b.n	d48a <swtimerInternalHandler+0x5a>
    d4a8:	20002f4a 	.word	0x20002f4a
    d4ac:	2000207c 	.word	0x2000207c
    d4b0:	20002070 	.word	0x20002070
    d4b4:	20002078 	.word	0x20002078
    d4b8:	20002074 	.word	0x20002074
    d4bc:	20002db8 	.word	0x20002db8
    d4c0:	0000d399 	.word	0x0000d399

0000d4c4 <SwTimerReset>:
    /*
    * Initialize the timer resources like timer arrays queues, timer registers
    */
    uint8_t index;

    runningTimers = 0u;
    d4c4:	2300      	movs	r3, #0
    d4c6:	4a0d      	ldr	r2, [pc, #52]	; (d4fc <SwTimerReset+0x38>)
    d4c8:	7013      	strb	r3, [r2, #0]
    isTimerTriggered = false;
    d4ca:	4a0d      	ldr	r2, [pc, #52]	; (d500 <SwTimerReset+0x3c>)
    d4cc:	7013      	strb	r3, [r2, #0]

    runningTimerQueueHead = SWTIMER_INVALID;
    d4ce:	33ff      	adds	r3, #255	; 0xff
    d4d0:	4a0c      	ldr	r2, [pc, #48]	; (d504 <SwTimerReset+0x40>)
    d4d2:	6013      	str	r3, [r2, #0]
    expiredTimerQueueHead = SWTIMER_INVALID;
    d4d4:	4a0c      	ldr	r2, [pc, #48]	; (d508 <SwTimerReset+0x44>)
    d4d6:	6013      	str	r3, [r2, #0]
    expiredTimerQueueTail = SWTIMER_INVALID;
    d4d8:	4a0c      	ldr	r2, [pc, #48]	; (d50c <SwTimerReset+0x48>)
    d4da:	6013      	str	r3, [r2, #0]
    d4dc:	4b0c      	ldr	r3, [pc, #48]	; (d510 <SwTimerReset+0x4c>)
    d4de:	0018      	movs	r0, r3
    d4e0:	3091      	adds	r0, #145	; 0x91
    d4e2:	30ff      	adds	r0, #255	; 0xff

    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    {
        swTimers[index].nextTimer = SWTIMER_INVALID;
    d4e4:	21ff      	movs	r1, #255	; 0xff
        swTimers[index].timerCb = NULL;
    d4e6:	2200      	movs	r2, #0
        swTimers[index].nextTimer = SWTIMER_INVALID;
    d4e8:	7219      	strb	r1, [r3, #8]
        swTimers[index].timerCb = NULL;
    d4ea:	601a      	str	r2, [r3, #0]
    d4ec:	3310      	adds	r3, #16
    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    d4ee:	4283      	cmp	r3, r0
    d4f0:	d1fa      	bne.n	d4e8 <SwTimerReset+0x24>
    }

    allocatedTimerId = 0u;
    d4f2:	2200      	movs	r2, #0
    d4f4:	4b07      	ldr	r3, [pc, #28]	; (d514 <SwTimerReset+0x50>)
    d4f6:	701a      	strb	r2, [r3, #0]
}
    d4f8:	4770      	bx	lr
    d4fa:	46c0      	nop			; (mov r8, r8)
    d4fc:	2000207c 	.word	0x2000207c
    d500:	20002f4a 	.word	0x20002f4a
    d504:	20002078 	.word	0x20002078
    d508:	20002070 	.word	0x20002070
    d50c:	20002074 	.word	0x20002074
    d510:	20002dbc 	.word	0x20002dbc
    d514:	2000206c 	.word	0x2000206c

0000d518 <SystemTimerInit>:

/**************************************************************************//**
\brief Initializes the Software Timer module
******************************************************************************/
void SystemTimerInit(void)
{
    d518:	b510      	push	{r4, lr}
    SwTimerReset();
    d51a:	4b08      	ldr	r3, [pc, #32]	; (d53c <SystemTimerInit+0x24>)
    d51c:	4798      	blx	r3

    /* initialize system time parameters */
    sysTimeOvf = 0x00000000;
    d51e:	2300      	movs	r3, #0
    d520:	4a07      	ldr	r2, [pc, #28]	; (d540 <SystemTimerInit+0x28>)
    d522:	6013      	str	r3, [r2, #0]
    sysTime = 0x0000;
    d524:	4a07      	ldr	r2, [pc, #28]	; (d544 <SystemTimerInit+0x2c>)
    d526:	8013      	strh	r3, [r2, #0]

    common_tc_init();
    d528:	4b07      	ldr	r3, [pc, #28]	; (d548 <SystemTimerInit+0x30>)
    d52a:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    d52c:	4807      	ldr	r0, [pc, #28]	; (d54c <SystemTimerInit+0x34>)
    d52e:	4b08      	ldr	r3, [pc, #32]	; (d550 <SystemTimerInit+0x38>)
    d530:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    d532:	4808      	ldr	r0, [pc, #32]	; (d554 <SystemTimerInit+0x3c>)
    d534:	4b08      	ldr	r3, [pc, #32]	; (d558 <SystemTimerInit+0x40>)
    d536:	4798      	blx	r3
}
    d538:	bd10      	pop	{r4, pc}
    d53a:	46c0      	nop			; (mov r8, r8)
    d53c:	0000d4c5 	.word	0x0000d4c5
    d540:	20002f4c 	.word	0x20002f4c
    d544:	20002f48 	.word	0x20002f48
    d548:	000136d5 	.word	0x000136d5
    d54c:	0000d2d9 	.word	0x0000d2d9
    d550:	00013759 	.word	0x00013759
    d554:	0000d2b1 	.word	0x0000d2b1
    d558:	00013765 	.word	0x00013765

0000d55c <SwTimerGetTime>:
/**************************************************************************//**
\brief Get current system time.
\return Returns current system time in microseconds
******************************************************************************/
uint64_t SwTimerGetTime(void)
{
    d55c:	b570      	push	{r4, r5, r6, lr}
    time |= ((uint64_t) sysTimeOvf) << 32;
    d55e:	4b05      	ldr	r3, [pc, #20]	; (d574 <SwTimerGetTime+0x18>)
    d560:	681c      	ldr	r4, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    d562:	4b05      	ldr	r3, [pc, #20]	; (d578 <SwTimerGetTime+0x1c>)
    d564:	881d      	ldrh	r5, [r3, #0]
    d566:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    d568:	4b04      	ldr	r3, [pc, #16]	; (d57c <SwTimerGetTime+0x20>)
    d56a:	4798      	blx	r3
    d56c:	4328      	orrs	r0, r5
    return gettime();
}
    d56e:	0021      	movs	r1, r4
    d570:	bd70      	pop	{r4, r5, r6, pc}
    d572:	46c0      	nop			; (mov r8, r8)
    d574:	20002f4c 	.word	0x20002f4c
    d578:	20002f48 	.word	0x20002f48
    d57c:	000135f5 	.word	0x000135f5

0000d580 <SwTimerCreate>:

\return LORAWAN_SUCCESS if new timerId is allocated
        LORAWAN_RESOURCE_UNAVAILABLE if there is no more timerId to allocate
******************************************************************************/
StackRetStatus_t SwTimerCreate(uint8_t *timerId)
{
    d580:	b510      	push	{r4, lr}
    d582:	0004      	movs	r4, r0
    StackRetStatus_t retVal = LORAWAN_SUCCESS;

    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    d584:	4b08      	ldr	r3, [pc, #32]	; (d5a8 <SwTimerCreate+0x28>)
    d586:	781b      	ldrb	r3, [r3, #0]
        * If you reach this spot it means the TOTAL_NUMBER_OF_SW_TIMERS
        * is #defined to a lower value than the number of timers that have
        * been SwTimerCreate()
        */
        SYS_ASSERT_FATAL(ASSERT_HAL_TIMERID_EXHAUSTED);
        retVal = LORAWAN_RESOURCE_UNAVAILABLE;
    d588:	2014      	movs	r0, #20
    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    d58a:	2b18      	cmp	r3, #24
    d58c:	d900      	bls.n	d590 <SwTimerCreate+0x10>
    }

    return retVal;
}
    d58e:	bd10      	pop	{r4, pc}
        ATOMIC_SECTION_ENTER
    d590:	4b06      	ldr	r3, [pc, #24]	; (d5ac <SwTimerCreate+0x2c>)
    d592:	4798      	blx	r3
        *timerId = allocatedTimerId;
    d594:	4a04      	ldr	r2, [pc, #16]	; (d5a8 <SwTimerCreate+0x28>)
    d596:	7813      	ldrb	r3, [r2, #0]
    d598:	7023      	strb	r3, [r4, #0]
        allocatedTimerId++;
    d59a:	3301      	adds	r3, #1
    d59c:	7013      	strb	r3, [r2, #0]
        ATOMIC_SECTION_EXIT
    d59e:	4b04      	ldr	r3, [pc, #16]	; (d5b0 <SwTimerCreate+0x30>)
    d5a0:	4798      	blx	r3
    StackRetStatus_t retVal = LORAWAN_SUCCESS;
    d5a2:	2008      	movs	r0, #8
    d5a4:	e7f3      	b.n	d58e <SwTimerCreate+0xe>
    d5a6:	46c0      	nop			; (mov r8, r8)
    d5a8:	2000206c 	.word	0x2000206c
    d5ac:	0000cb81 	.word	0x0000cb81
    d5b0:	0000cb8d 	.word	0x0000cb8d

0000d5b4 <SwTimerStart>:
        LORAWAN_INVALID_REQUEST if \timerId is already running
        LORAWAN_SUCCESS if \timerId is successfully queued for running
******************************************************************************/
StackRetStatus_t SwTimerStart(uint8_t timerId, uint32_t timerCount,
    SwTimeoutType_t timeoutType, void *timerCb, void *paramCb)
{
    d5b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d5b6:	46d6      	mov	lr, sl
    d5b8:	464f      	mov	r7, r9
    d5ba:	4646      	mov	r6, r8
    d5bc:	b5c0      	push	{r6, r7, lr}
    d5be:	b084      	sub	sp, #16
    d5c0:	0007      	movs	r7, r0
    d5c2:	000d      	movs	r5, r1
    d5c4:	0016      	movs	r6, r2
    d5c6:	001c      	movs	r4, r3
    uint32_t pointInTime;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    d5c8:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    d5ca:	2f18      	cmp	r7, #24
    d5cc:	d809      	bhi.n	d5e2 <SwTimerStart+0x2e>
    d5ce:	2b00      	cmp	r3, #0
    d5d0:	d100      	bne.n	d5d4 <SwTimerStart+0x20>
    d5d2:	e08c      	b.n	d6ee <SwTimerStart+0x13a>
    }

    if (NULL != swTimers[timerId].timerCb)
    d5d4:	013a      	lsls	r2, r7, #4
    d5d6:	4b52      	ldr	r3, [pc, #328]	; (d720 <SwTimerStart+0x16c>)
    d5d8:	189b      	adds	r3, r3, r2
    d5da:	685b      	ldr	r3, [r3, #4]
        /*
        * Timer is already running if the callback function of the
        * corresponding timer index in the timer array is not NULL.
        */
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_REQUEST;
    d5dc:	300b      	adds	r0, #11
    if (NULL != swTimers[timerId].timerCb)
    d5de:	2b00      	cmp	r3, #0
    d5e0:	d005      	beq.n	d5ee <SwTimerStart+0x3a>
        }
    }

    swtimerStartAbsoluteTimer(timerId, pointInTime, timerCb, paramCb);
    return LORAWAN_SUCCESS;
}
    d5e2:	b004      	add	sp, #16
    d5e4:	bc1c      	pop	{r2, r3, r4}
    d5e6:	4690      	mov	r8, r2
    d5e8:	4699      	mov	r9, r3
    d5ea:	46a2      	mov	sl, r4
    d5ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    time |= ((uint64_t) sysTimeOvf) << 32;
    d5ee:	4b4d      	ldr	r3, [pc, #308]	; (d724 <SwTimerStart+0x170>)
    d5f0:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    d5f2:	4b4d      	ldr	r3, [pc, #308]	; (d728 <SwTimerStart+0x174>)
    d5f4:	8818      	ldrh	r0, [r3, #0]
    d5f6:	0403      	lsls	r3, r0, #16
    d5f8:	4698      	mov	r8, r3
    time |= (uint64_t) common_tc_read_count();
    d5fa:	4b4c      	ldr	r3, [pc, #304]	; (d72c <SwTimerStart+0x178>)
    d5fc:	4798      	blx	r3
    d5fe:	4643      	mov	r3, r8
    d600:	4303      	orrs	r3, r0
    switch (timeoutType)
    d602:	2e00      	cmp	r6, #0
    d604:	d003      	beq.n	d60e <SwTimerStart+0x5a>
    d606:	2e01      	cmp	r6, #1
    d608:	d038      	beq.n	d67c <SwTimerStart+0xc8>
            return LORAWAN_INVALID_PARAMETER;
    d60a:	200a      	movs	r0, #10
    d60c:	e7e9      	b.n	d5e2 <SwTimerStart+0x2e>
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    d60e:	4948      	ldr	r1, [pc, #288]	; (d730 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    d610:	200a      	movs	r0, #10
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    d612:	002a      	movs	r2, r5
    d614:	3aff      	subs	r2, #255	; 0xff
            pointInTime = ADD_TIME(timerCount, now);
    d616:	18ed      	adds	r5, r5, r3
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    d618:	428a      	cmp	r2, r1
    d61a:	d8e2      	bhi.n	d5e2 <SwTimerStart+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    d61c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d620:	425a      	negs	r2, r3
    d622:	4153      	adcs	r3, r2
    d624:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    d626:	b672      	cpsid	i
    d628:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d62c:	2600      	movs	r6, #0
    d62e:	4b41      	ldr	r3, [pc, #260]	; (d734 <SwTimerStart+0x180>)
    d630:	701e      	strb	r6, [r3, #0]
	return flags;
    d632:	9b03      	ldr	r3, [sp, #12]
    d634:	4699      	mov	r9, r3
    swtimerInternalHandler();
    d636:	4b40      	ldr	r3, [pc, #256]	; (d738 <SwTimerStart+0x184>)
    d638:	4798      	blx	r3
    swTimers[timerId].absoluteExpiryTime = pointInTime;
    d63a:	4b39      	ldr	r3, [pc, #228]	; (d720 <SwTimerStart+0x16c>)
    d63c:	013a      	lsls	r2, r7, #4
    d63e:	50d5      	str	r5, [r2, r3]
    swTimers[timerId].timerCb = (void (*)(void*))handlerCb;
    d640:	189b      	adds	r3, r3, r2
    d642:	605c      	str	r4, [r3, #4]
    swTimers[timerId].paramCb = parameter;
    d644:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d646:	609a      	str	r2, [r3, #8]
    swTimers[timerId].loaded = false;
    d648:	735e      	strb	r6, [r3, #13]
    runningTimers++;
    d64a:	4a3c      	ldr	r2, [pc, #240]	; (d73c <SwTimerStart+0x188>)
    d64c:	7813      	ldrb	r3, [r2, #0]
    d64e:	3301      	adds	r3, #1
    d650:	b2db      	uxtb	r3, r3
    d652:	7013      	strb	r3, [r2, #0]
    if (SWTIMER_INVALID == runningTimerQueueHead)
    d654:	4b3a      	ldr	r3, [pc, #232]	; (d740 <SwTimerStart+0x18c>)
    d656:	681b      	ldr	r3, [r3, #0]
    d658:	469a      	mov	sl, r3
    d65a:	2bff      	cmp	r3, #255	; 0xff
    d65c:	d016      	beq.n	d68c <SwTimerStart+0xd8>
        uint8_t currIndex = runningTimerQueueHead;
    d65e:	466a      	mov	r2, sp
    d660:	7013      	strb	r3, [r2, #0]
    d662:	7812      	ldrb	r2, [r2, #0]
        for (index = 0; index < runningTimers; index++)
    d664:	4b35      	ldr	r3, [pc, #212]	; (d73c <SwTimerStart+0x188>)
    d666:	781b      	ldrb	r3, [r3, #0]
    d668:	2b00      	cmp	r3, #0
    d66a:	d042      	beq.n	d6f2 <SwTimerStart+0x13e>
    d66c:	9200      	str	r2, [sp, #0]
    d66e:	2300      	movs	r3, #0
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    d670:	492b      	ldr	r1, [pc, #172]	; (d720 <SwTimerStart+0x16c>)
    d672:	4688      	mov	r8, r1
    d674:	4833      	ldr	r0, [pc, #204]	; (d744 <SwTimerStart+0x190>)
                    currIndex = swTimers[currIndex].nextTimer;
    d676:	468c      	mov	ip, r1
        for (index = 0; index < runningTimers; index++)
    d678:	4c30      	ldr	r4, [pc, #192]	; (d73c <SwTimerStart+0x188>)
    d67a:	e02a      	b.n	d6d2 <SwTimerStart+0x11e>
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    d67c:	0028      	movs	r0, r5
    d67e:	38ff      	subs	r0, #255	; 0xff
    d680:	1ac3      	subs	r3, r0, r3
    d682:	4a2b      	ldr	r2, [pc, #172]	; (d730 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    d684:	200a      	movs	r0, #10
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    d686:	4293      	cmp	r3, r2
    d688:	d9c8      	bls.n	d61c <SwTimerStart+0x68>
    d68a:	e7aa      	b.n	d5e2 <SwTimerStart+0x2e>
        runningTimerQueueHead = timerId;
    d68c:	4b2c      	ldr	r3, [pc, #176]	; (d740 <SwTimerStart+0x18c>)
    d68e:	601f      	str	r7, [r3, #0]
        loadHwTimer(runningTimerQueueHead);
    d690:	0038      	movs	r0, r7
    d692:	4b2d      	ldr	r3, [pc, #180]	; (d748 <SwTimerStart+0x194>)
    d694:	4798      	blx	r3
    d696:	e036      	b.n	d706 <SwTimerStart+0x152>
                    swTimers[timerId].nextTimer = currIndex;
    d698:	4b21      	ldr	r3, [pc, #132]	; (d720 <SwTimerStart+0x16c>)
    d69a:	013c      	lsls	r4, r7, #4
    d69c:	191c      	adds	r4, r3, r4
    d69e:	7322      	strb	r2, [r4, #12]
                    swTimers[currIndex].loaded = false;
    d6a0:	9901      	ldr	r1, [sp, #4]
    d6a2:	0109      	lsls	r1, r1, #4
    d6a4:	1859      	adds	r1, r3, r1
    d6a6:	2300      	movs	r3, #0
    d6a8:	734b      	strb	r3, [r1, #13]
                    if (runningTimerQueueHead == currIndex)
    d6aa:	4592      	cmp	sl, r2
    d6ac:	d005      	beq.n	d6ba <SwTimerStart+0x106>
                        swTimers[prevIndex].nextTimer = timerId;
    d6ae:	9b00      	ldr	r3, [sp, #0]
    d6b0:	0118      	lsls	r0, r3, #4
    d6b2:	4b1b      	ldr	r3, [pc, #108]	; (d720 <SwTimerStart+0x16c>)
    d6b4:	1818      	adds	r0, r3, r0
    d6b6:	7307      	strb	r7, [r0, #12]
    d6b8:	e025      	b.n	d706 <SwTimerStart+0x152>
                        runningTimerQueueHead = timerId;
    d6ba:	4b21      	ldr	r3, [pc, #132]	; (d740 <SwTimerStart+0x18c>)
    d6bc:	601f      	str	r7, [r3, #0]
                        loadHwTimer(runningTimerQueueHead);
    d6be:	0038      	movs	r0, r7
    d6c0:	4b21      	ldr	r3, [pc, #132]	; (d748 <SwTimerStart+0x194>)
    d6c2:	4798      	blx	r3
    d6c4:	e01f      	b.n	d706 <SwTimerStart+0x152>
        for (index = 0; index < runningTimers; index++)
    d6c6:	3301      	adds	r3, #1
    d6c8:	b2db      	uxtb	r3, r3
    d6ca:	7821      	ldrb	r1, [r4, #0]
    d6cc:	b2c9      	uxtb	r1, r1
    d6ce:	428b      	cmp	r3, r1
    d6d0:	d210      	bcs.n	d6f4 <SwTimerStart+0x140>
            if (SWTIMER_INVALID != currIndex)
    d6d2:	2aff      	cmp	r2, #255	; 0xff
    d6d4:	d0f7      	beq.n	d6c6 <SwTimerStart+0x112>
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    d6d6:	9201      	str	r2, [sp, #4]
    d6d8:	0111      	lsls	r1, r2, #4
    return ((t2 - t1) < INT32_MAX);
    d6da:	4646      	mov	r6, r8
    d6dc:	5989      	ldr	r1, [r1, r6]
    d6de:	1a69      	subs	r1, r5, r1
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    d6e0:	4281      	cmp	r1, r0
    d6e2:	d8d9      	bhi.n	d698 <SwTimerStart+0xe4>
                    currIndex = swTimers[currIndex].nextTimer;
    d6e4:	0111      	lsls	r1, r2, #4
    d6e6:	4461      	add	r1, ip
    d6e8:	9200      	str	r2, [sp, #0]
    d6ea:	7b0a      	ldrb	r2, [r1, #12]
    d6ec:	e7eb      	b.n	d6c6 <SwTimerStart+0x112>
        return LORAWAN_INVALID_PARAMETER;
    d6ee:	200a      	movs	r0, #10
    d6f0:	e777      	b.n	d5e2 <SwTimerStart+0x2e>
        uint8_t prevIndex = runningTimerQueueHead;
    d6f2:	9200      	str	r2, [sp, #0]
            swTimers[prevIndex].nextTimer = timerId;
    d6f4:	4b0a      	ldr	r3, [pc, #40]	; (d720 <SwTimerStart+0x16c>)
    d6f6:	9a00      	ldr	r2, [sp, #0]
    d6f8:	0110      	lsls	r0, r2, #4
    d6fa:	1818      	adds	r0, r3, r0
    d6fc:	7307      	strb	r7, [r0, #12]
            swTimers[timerId].nextTimer = SWTIMER_INVALID;
    d6fe:	013f      	lsls	r7, r7, #4
    d700:	19df      	adds	r7, r3, r7
    d702:	23ff      	movs	r3, #255	; 0xff
    d704:	733b      	strb	r3, [r7, #12]
	if (cpu_irq_is_enabled_flags(flags))
    d706:	23ff      	movs	r3, #255	; 0xff
    return LORAWAN_SUCCESS;
    d708:	2008      	movs	r0, #8
    d70a:	464a      	mov	r2, r9
    d70c:	4213      	tst	r3, r2
    d70e:	d100      	bne.n	d712 <SwTimerStart+0x15e>
    d710:	e767      	b.n	d5e2 <SwTimerStart+0x2e>
		cpu_irq_enable();
    d712:	2201      	movs	r2, #1
    d714:	4b07      	ldr	r3, [pc, #28]	; (d734 <SwTimerStart+0x180>)
    d716:	701a      	strb	r2, [r3, #0]
    d718:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d71c:	b662      	cpsie	i
    d71e:	e760      	b.n	d5e2 <SwTimerStart+0x2e>
    d720:	20002db8 	.word	0x20002db8
    d724:	20002f4c 	.word	0x20002f4c
    d728:	20002f48 	.word	0x20002f48
    d72c:	000135f5 	.word	0x000135f5
    d730:	7fffff00 	.word	0x7fffff00
    d734:	20000014 	.word	0x20000014
    d738:	0000d431 	.word	0x0000d431
    d73c:	2000207c 	.word	0x2000207c
    d740:	20002078 	.word	0x20002078
    d744:	7ffffffe 	.word	0x7ffffffe
    d748:	0000d399 	.word	0x0000d399

0000d74c <SwTimerIsRunning>:
\param[in] timerId Timer ID to be checked for running
\return True if the timer is running else False
******************************************************************************/
bool SwTimerIsRunning(uint8_t timerId)
{
    if (NULL == swTimers[timerId].timerCb)
    d74c:	0103      	lsls	r3, r0, #4
    d74e:	4803      	ldr	r0, [pc, #12]	; (d75c <SwTimerIsRunning+0x10>)
    d750:	18c0      	adds	r0, r0, r3
    d752:	6840      	ldr	r0, [r0, #4]
    d754:	1e43      	subs	r3, r0, #1
    d756:	4198      	sbcs	r0, r3
    d758:	b2c0      	uxtb	r0, r0
    {
        return false;
    }

    return true;
}
    d75a:	4770      	bx	lr
    d75c:	20002db8 	.word	0x20002db8

0000d760 <SwTimerReadValue>:
\brief Returns the remaining timeout for the given timerId
\param[in] timerId Timer ID to get the remaining time
\return Remaining time until expiry in microseconds
******************************************************************************/
uint32_t SwTimerReadValue(uint8_t timerId)
{
    d760:	b570      	push	{r4, r5, r6, lr}
    uint32_t remainingTime = 0u;
    uint32_t timerExpiryTime = 0u;
    uint32_t currentSysTime = 0u;
    if ( NULL != swTimers[timerId].timerCb )
    d762:	0102      	lsls	r2, r0, #4
    d764:	4b0d      	ldr	r3, [pc, #52]	; (d79c <SwTimerReadValue+0x3c>)
    d766:	189b      	adds	r3, r3, r2
    d768:	685b      	ldr	r3, [r3, #4]
    d76a:	2b00      	cmp	r3, #0
    d76c:	d014      	beq.n	d798 <SwTimerReadValue+0x38>
    {
	    timerExpiryTime = swTimers[timerId].absoluteExpiryTime;
    d76e:	4b0b      	ldr	r3, [pc, #44]	; (d79c <SwTimerReadValue+0x3c>)
    d770:	58d5      	ldr	r5, [r2, r3]
    time |= ((uint64_t) sysTimeOvf) << 32;
    d772:	4b0b      	ldr	r3, [pc, #44]	; (d7a0 <SwTimerReadValue+0x40>)
    d774:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    d776:	4b0b      	ldr	r3, [pc, #44]	; (d7a4 <SwTimerReadValue+0x44>)
    d778:	881c      	ldrh	r4, [r3, #0]
    d77a:	0424      	lsls	r4, r4, #16
    time |= (uint64_t) common_tc_read_count();
    d77c:	4b0a      	ldr	r3, [pc, #40]	; (d7a8 <SwTimerReadValue+0x48>)
    d77e:	4798      	blx	r3
    d780:	4320      	orrs	r0, r4
	    currentSysTime = (uint32_t) gettime();
	    if ( currentSysTime <= timerExpiryTime )
    d782:	4285      	cmp	r5, r0
    d784:	d305      	bcc.n	d792 <SwTimerReadValue+0x32>
	    {
		    remainingTime = timerExpiryTime - currentSysTime;
    d786:	1a28      	subs	r0, r5, r0
	    else if ( currentSysTime > timerExpiryTime )
	    {
		    remainingTime = (UINT32_MAX - currentSysTime) + timerExpiryTime;
	    }

        if (remainingTime >= SWTIMER_MAX_TIMEOUT)
    d788:	4b08      	ldr	r3, [pc, #32]	; (d7ac <SwTimerReadValue+0x4c>)
    d78a:	4298      	cmp	r0, r3
    d78c:	d900      	bls.n	d790 <SwTimerReadValue+0x30>
        {
            /* Diff cannot be more than max timeout */
            remainingTime = 0;
    d78e:	2000      	movs	r0, #0
        }
    }
    return remainingTime;
}
    d790:	bd70      	pop	{r4, r5, r6, pc}
		    remainingTime = (UINT32_MAX - currentSysTime) + timerExpiryTime;
    d792:	3d01      	subs	r5, #1
    d794:	1a28      	subs	r0, r5, r0
    d796:	e7f7      	b.n	d788 <SwTimerReadValue+0x28>
    uint32_t remainingTime = 0u;
    d798:	2000      	movs	r0, #0
    return remainingTime;
    d79a:	e7f9      	b.n	d790 <SwTimerReadValue+0x30>
    d79c:	20002db8 	.word	0x20002db8
    d7a0:	20002f4c 	.word	0x20002f4c
    d7a4:	20002f48 	.word	0x20002f48
    d7a8:	000135f5 	.word	0x000135f5
    d7ac:	7ffffffe 	.word	0x7ffffffe

0000d7b0 <SwTimerNextExpiryDuration>:
/**************************************************************************//**
\brief Returns the duration until the next timer expiry
\return Returns the duration until the next timeout in microseconds
******************************************************************************/
uint32_t SwTimerNextExpiryDuration(void)
{
    d7b0:	b510      	push	{r4, lr}
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;

    if (SWTIMER_INVALID != runningTimerQueueHead)
    d7b2:	4b05      	ldr	r3, [pc, #20]	; (d7c8 <SwTimerNextExpiryDuration+0x18>)
    d7b4:	6818      	ldr	r0, [r3, #0]
    d7b6:	28ff      	cmp	r0, #255	; 0xff
    d7b8:	d102      	bne.n	d7c0 <SwTimerNextExpiryDuration+0x10>
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;
    d7ba:	2001      	movs	r0, #1
    d7bc:	4240      	negs	r0, r0
    {
        duration = SwTimerReadValue(runningTimerQueueHead);
    }

    return duration;
}
    d7be:	bd10      	pop	{r4, pc}
        duration = SwTimerReadValue(runningTimerQueueHead);
    d7c0:	b2c0      	uxtb	r0, r0
    d7c2:	4b02      	ldr	r3, [pc, #8]	; (d7cc <SwTimerNextExpiryDuration+0x1c>)
    d7c4:	4798      	blx	r3
    d7c6:	e7fa      	b.n	d7be <SwTimerNextExpiryDuration+0xe>
    d7c8:	20002078 	.word	0x20002078
    d7cc:	0000d761 	.word	0x0000d761

0000d7d0 <SwTimersExecute>:

/**************************************************************************//**
\brief Handles Queues and Callbacks for Expired Timers
******************************************************************************/
void SwTimersExecute(void)
{
    d7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d7d2:	46de      	mov	lr, fp
    d7d4:	4657      	mov	r7, sl
    d7d6:	464e      	mov	r6, r9
    d7d8:	4645      	mov	r5, r8
    d7da:	b5e0      	push	{r5, r6, r7, lr}
    d7dc:	b083      	sub	sp, #12
    time |= ((uint64_t) sysTimeOvf) << 32;
    d7de:	4b2f      	ldr	r3, [pc, #188]	; (d89c <SwTimersExecute+0xcc>)
    d7e0:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    d7e2:	4b2f      	ldr	r3, [pc, #188]	; (d8a0 <SwTimersExecute+0xd0>)
    d7e4:	881b      	ldrh	r3, [r3, #0]
    time |= (uint64_t) common_tc_read_count();
    d7e6:	4b2f      	ldr	r3, [pc, #188]	; (d8a4 <SwTimersExecute+0xd4>)
    d7e8:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    d7ea:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d7ee:	4253      	negs	r3, r2
    d7f0:	4153      	adcs	r3, r2
    d7f2:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    d7f4:	b672      	cpsid	i
    d7f6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d7fa:	2200      	movs	r2, #0
    d7fc:	4b2a      	ldr	r3, [pc, #168]	; (d8a8 <SwTimersExecute+0xd8>)
    d7fe:	701a      	strb	r2, [r3, #0]
	return flags;
    d800:	9c00      	ldr	r4, [sp, #0]
    uint64_t now = gettime();

    uint8_t flags = cpu_irq_save();
    swtimerInternalHandler();
    d802:	4b2a      	ldr	r3, [pc, #168]	; (d8ac <SwTimersExecute+0xdc>)
    d804:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    d806:	23ff      	movs	r3, #255	; 0xff
    d808:	4223      	tst	r3, r4
    d80a:	d005      	beq.n	d818 <SwTimersExecute+0x48>
		cpu_irq_enable();
    d80c:	2201      	movs	r2, #1
    d80e:	4b26      	ldr	r3, [pc, #152]	; (d8a8 <SwTimersExecute+0xd8>)
    d810:	701a      	strb	r2, [r3, #0]
    d812:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d816:	b662      	cpsie	i
	cpu_irq_disable();
    d818:	4b23      	ldr	r3, [pc, #140]	; (d8a8 <SwTimersExecute+0xd8>)
    d81a:	469a      	mov	sl, r3
        /* Expired timer if any will be processed here */
        while (SWTIMER_INVALID != expiredTimerQueueHead)
        {
            flags = cpu_irq_save();

            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    d81c:	4c24      	ldr	r4, [pc, #144]	; (d8b0 <SwTimersExecute+0xe0>)
    d81e:	4b25      	ldr	r3, [pc, #148]	; (d8b4 <SwTimersExecute+0xe4>)
    d820:	4699      	mov	r9, r3
    d822:	2200      	movs	r2, #0

            /*
            * The expired timer's structure elements are updated
            * and the timer is taken out of expired timer queue
            */
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    d824:	20ff      	movs	r0, #255	; 0xff
            */
            expiredTimerQueueHead = nextExpiredTimer;

            if (SWTIMER_INVALID == expiredTimerQueueHead)
            {
                expiredTimerQueueTail = SWTIMER_INVALID;
    d826:	4b24      	ldr	r3, [pc, #144]	; (d8b8 <SwTimersExecute+0xe8>)
    d828:	4698      	mov	r8, r3
		cpu_irq_enable();
    d82a:	4b1f      	ldr	r3, [pc, #124]	; (d8a8 <SwTimersExecute+0xd8>)
    d82c:	469c      	mov	ip, r3
    d82e:	e004      	b.n	d83a <SwTimersExecute+0x6a>
    d830:	4643      	mov	r3, r8
    d832:	6018      	str	r0, [r3, #0]
    d834:	e01e      	b.n	d874 <SwTimersExecute+0xa4>
            }

            cpu_irq_restore(flags);

            if (NULL != callback)
    d836:	2e00      	cmp	r6, #0
    d838:	d125      	bne.n	d886 <SwTimersExecute+0xb6>
        while (SWTIMER_INVALID != expiredTimerQueueHead)
    d83a:	4b1d      	ldr	r3, [pc, #116]	; (d8b0 <SwTimersExecute+0xe0>)
    d83c:	681b      	ldr	r3, [r3, #0]
    d83e:	2bff      	cmp	r3, #255	; 0xff
    d840:	d024      	beq.n	d88c <SwTimersExecute+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    d842:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d846:	424b      	negs	r3, r1
    d848:	414b      	adcs	r3, r1
    d84a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    d84c:	b672      	cpsid	i
    d84e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d852:	4653      	mov	r3, sl
    d854:	701a      	strb	r2, [r3, #0]
	return flags;
    d856:	9f01      	ldr	r7, [sp, #4]
            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    d858:	6823      	ldr	r3, [r4, #0]
    d85a:	011b      	lsls	r3, r3, #4
    d85c:	444b      	add	r3, r9
    d85e:	7b19      	ldrb	r1, [r3, #12]
            callback = (SwTimerCallbackFunc_t)swTimers[expiredTimerQueueHead].timerCb;
    d860:	685e      	ldr	r6, [r3, #4]
            cbParam = swTimers[expiredTimerQueueHead].paramCb;
    d862:	689d      	ldr	r5, [r3, #8]
    d864:	46ab      	mov	fp, r5
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    d866:	7318      	strb	r0, [r3, #12]
            swTimers[expiredTimerQueueHead].timerCb = NULL;
    d868:	605a      	str	r2, [r3, #4]
            swTimers[expiredTimerQueueHead].paramCb = NULL;
    d86a:	609a      	str	r2, [r3, #8]
            swTimers[expiredTimerQueueHead].loaded = false;
    d86c:	735a      	strb	r2, [r3, #13]
            expiredTimerQueueHead = nextExpiredTimer;
    d86e:	6021      	str	r1, [r4, #0]
            if (SWTIMER_INVALID == expiredTimerQueueHead)
    d870:	29ff      	cmp	r1, #255	; 0xff
    d872:	d0dd      	beq.n	d830 <SwTimersExecute+0x60>
	if (cpu_irq_is_enabled_flags(flags))
    d874:	4238      	tst	r0, r7
    d876:	d0de      	beq.n	d836 <SwTimersExecute+0x66>
		cpu_irq_enable();
    d878:	2301      	movs	r3, #1
    d87a:	4661      	mov	r1, ip
    d87c:	700b      	strb	r3, [r1, #0]
    d87e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d882:	b662      	cpsie	i
    d884:	e7d7      	b.n	d836 <SwTimersExecute+0x66>
            {
                /* Callback function is called */
                callback(cbParam);
    d886:	4658      	mov	r0, fp
    d888:	47b0      	blx	r6
    d88a:	e7ca      	b.n	d822 <SwTimersExecute+0x52>
                (void)now;
            }
        }
    }
}
    d88c:	b003      	add	sp, #12
    d88e:	bc3c      	pop	{r2, r3, r4, r5}
    d890:	4690      	mov	r8, r2
    d892:	4699      	mov	r9, r3
    d894:	46a2      	mov	sl, r4
    d896:	46ab      	mov	fp, r5
    d898:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d89a:	46c0      	nop			; (mov r8, r8)
    d89c:	20002f4c 	.word	0x20002f4c
    d8a0:	20002f48 	.word	0x20002f48
    d8a4:	000135f5 	.word	0x000135f5
    d8a8:	20000014 	.word	0x20000014
    d8ac:	0000d431 	.word	0x0000d431
    d8b0:	20002070 	.word	0x20002070
    d8b4:	20002db8 	.word	0x20002db8
    d8b8:	20002074 	.word	0x20002074

0000d8bc <TIMER_TaskHandler>:
{
    d8bc:	b510      	push	{r4, lr}
    SwTimersExecute();
    d8be:	4b02      	ldr	r3, [pc, #8]	; (d8c8 <TIMER_TaskHandler+0xc>)
    d8c0:	4798      	blx	r3
}
    d8c2:	2000      	movs	r0, #0
    d8c4:	bd10      	pop	{r4, pc}
    d8c6:	46c0      	nop			; (mov r8, r8)
    d8c8:	0000d7d1 	.word	0x0000d7d1

0000d8cc <SwTimerStop>:
        LORAWAN_INVALID_PARAMETER if timerId is not valid
        LORAWAN_INVALID_REQUEST if timerId was not started before
        LORAWAN_SUCCESS if it is successfully stopped
******************************************************************************/
StackRetStatus_t SwTimerStop(uint8_t timerId)
{
    d8cc:	b570      	push	{r4, r5, r6, lr}
    d8ce:	b082      	sub	sp, #8
    d8d0:	0004      	movs	r4, r0
    uint8_t prevIndex;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    d8d2:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    d8d4:	2c18      	cmp	r4, #24
    d8d6:	d901      	bls.n	d8dc <SwTimerStop+0x10>
        return LORAWAN_SUCCESS;
    }

    SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
    return LORAWAN_INVALID_REQUEST;
}
    d8d8:	b002      	add	sp, #8
    d8da:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    d8dc:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d8e0:	425a      	negs	r2, r3
    d8e2:	4153      	adcs	r3, r2
    d8e4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    d8e6:	b672      	cpsid	i
    d8e8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d8ec:	2200      	movs	r2, #0
    d8ee:	4b47      	ldr	r3, [pc, #284]	; (da0c <SwTimerStop+0x140>)
    d8f0:	701a      	strb	r2, [r3, #0]
	return flags;
    d8f2:	9d01      	ldr	r5, [sp, #4]
    swtimerInternalHandler();
    d8f4:	4b46      	ldr	r3, [pc, #280]	; (da10 <SwTimerStop+0x144>)
    d8f6:	4798      	blx	r3
    if (runningTimers > 0)
    d8f8:	4b46      	ldr	r3, [pc, #280]	; (da14 <SwTimerStop+0x148>)
    d8fa:	781b      	ldrb	r3, [r3, #0]
    d8fc:	2b00      	cmp	r3, #0
    d8fe:	d040      	beq.n	d982 <SwTimerStop+0xb6>
        uint8_t timer_count = runningTimers;
    d900:	4b44      	ldr	r3, [pc, #272]	; (da14 <SwTimerStop+0x148>)
    d902:	781b      	ldrb	r3, [r3, #0]
    d904:	b2db      	uxtb	r3, r3
        prevIndex = currIndex = runningTimerQueueHead;
    d906:	4a44      	ldr	r2, [pc, #272]	; (da18 <SwTimerStop+0x14c>)
    d908:	6816      	ldr	r6, [r2, #0]
    d90a:	b2f1      	uxtb	r1, r6
        while (timer_count > 0)
    d90c:	2b00      	cmp	r3, #0
    d90e:	d038      	beq.n	d982 <SwTimerStop+0xb6>
            if (timerId == currIndex)
    d910:	428c      	cmp	r4, r1
    d912:	d00b      	beq.n	d92c <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    d914:	4841      	ldr	r0, [pc, #260]	; (da1c <SwTimerStop+0x150>)
    d916:	010a      	lsls	r2, r1, #4
    d918:	1882      	adds	r2, r0, r2
    d91a:	7b12      	ldrb	r2, [r2, #12]
            timer_count--;
    d91c:	3b01      	subs	r3, #1
    d91e:	b2db      	uxtb	r3, r3
        while (timer_count > 0)
    d920:	2b00      	cmp	r3, #0
    d922:	d02e      	beq.n	d982 <SwTimerStop+0xb6>
            if (timerId == currIndex)
    d924:	4294      	cmp	r4, r2
    d926:	d001      	beq.n	d92c <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    d928:	0011      	movs	r1, r2
    d92a:	e7f4      	b.n	d916 <SwTimerStop+0x4a>
                if (timerId == runningTimerQueueHead)
    d92c:	42a6      	cmp	r6, r4
    d92e:	d01d      	beq.n	d96c <SwTimerStop+0xa0>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    d930:	4b3a      	ldr	r3, [pc, #232]	; (da1c <SwTimerStop+0x150>)
    d932:	0122      	lsls	r2, r4, #4
    d934:	189a      	adds	r2, r3, r2
    d936:	7b12      	ldrb	r2, [r2, #12]
    d938:	0109      	lsls	r1, r1, #4
    d93a:	1859      	adds	r1, r3, r1
    d93c:	730a      	strb	r2, [r1, #12]
                swTimers[timerId].nextTimer  = SWTIMER_INVALID;
    d93e:	0122      	lsls	r2, r4, #4
    d940:	4b36      	ldr	r3, [pc, #216]	; (da1c <SwTimerStop+0x150>)
    d942:	189b      	adds	r3, r3, r2
    d944:	22ff      	movs	r2, #255	; 0xff
    d946:	731a      	strb	r2, [r3, #12]
            runningTimers--;
    d948:	4a32      	ldr	r2, [pc, #200]	; (da14 <SwTimerStop+0x148>)
    d94a:	7813      	ldrb	r3, [r2, #0]
    d94c:	3b01      	subs	r3, #1
    d94e:	b2db      	uxtb	r3, r3
    d950:	7013      	strb	r3, [r2, #0]
        swTimers[timerId].timerCb = NULL;
    d952:	0124      	lsls	r4, r4, #4
    d954:	4b31      	ldr	r3, [pc, #196]	; (da1c <SwTimerStop+0x150>)
    d956:	191c      	adds	r4, r3, r4
    d958:	2300      	movs	r3, #0
    d95a:	6063      	str	r3, [r4, #4]
        swTimers[timerId].paramCb = NULL;
    d95c:	60a3      	str	r3, [r4, #8]
        swTimers[timerId].loaded = false;
    d95e:	7363      	strb	r3, [r4, #13]
	if (cpu_irq_is_enabled_flags(flags))
    d960:	33ff      	adds	r3, #255	; 0xff
        return LORAWAN_SUCCESS;
    d962:	2008      	movs	r0, #8
    d964:	422b      	tst	r3, r5
    d966:	d0b7      	beq.n	d8d8 <SwTimerStop+0xc>
    d968:	2301      	movs	r3, #1
    d96a:	e040      	b.n	d9ee <SwTimerStop+0x122>
                    common_tc_compare_stop();
    d96c:	4b2c      	ldr	r3, [pc, #176]	; (da20 <SwTimerStop+0x154>)
    d96e:	4798      	blx	r3
                    runningTimerQueueHead = swTimers[timerId].nextTimer;
    d970:	0122      	lsls	r2, r4, #4
    d972:	4b2a      	ldr	r3, [pc, #168]	; (da1c <SwTimerStop+0x150>)
    d974:	189b      	adds	r3, r3, r2
    d976:	7b18      	ldrb	r0, [r3, #12]
    d978:	4b27      	ldr	r3, [pc, #156]	; (da18 <SwTimerStop+0x14c>)
    d97a:	6018      	str	r0, [r3, #0]
                    loadHwTimer(runningTimerQueueHead);
    d97c:	4b29      	ldr	r3, [pc, #164]	; (da24 <SwTimerStop+0x158>)
    d97e:	4798      	blx	r3
    d980:	e7dd      	b.n	d93e <SwTimerStop+0x72>
        prevIndex = currIndex = expiredTimerQueueHead;
    d982:	4b29      	ldr	r3, [pc, #164]	; (da28 <SwTimerStop+0x15c>)
    d984:	6818      	ldr	r0, [r3, #0]
    d986:	b2c2      	uxtb	r2, r0
        while (SWTIMER_INVALID != currIndex)
    d988:	2aff      	cmp	r2, #255	; 0xff
    d98a:	d02c      	beq.n	d9e6 <SwTimerStop+0x11a>
            if (timerId == currIndex)
    d98c:	4294      	cmp	r4, r2
    d98e:	d009      	beq.n	d9a4 <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    d990:	4922      	ldr	r1, [pc, #136]	; (da1c <SwTimerStop+0x150>)
    d992:	0113      	lsls	r3, r2, #4
    d994:	18cb      	adds	r3, r1, r3
    d996:	7b1b      	ldrb	r3, [r3, #12]
        while (SWTIMER_INVALID != currIndex)
    d998:	2bff      	cmp	r3, #255	; 0xff
    d99a:	d024      	beq.n	d9e6 <SwTimerStop+0x11a>
            if (timerId == currIndex)
    d99c:	429c      	cmp	r4, r3
    d99e:	d001      	beq.n	d9a4 <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    d9a0:	001a      	movs	r2, r3
    d9a2:	e7f6      	b.n	d992 <SwTimerStop+0xc6>
                if (timerId == expiredTimerQueueHead)
    d9a4:	42a0      	cmp	r0, r4
    d9a6:	d00d      	beq.n	d9c4 <SwTimerStop+0xf8>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    d9a8:	4b1c      	ldr	r3, [pc, #112]	; (da1c <SwTimerStop+0x150>)
    d9aa:	0121      	lsls	r1, r4, #4
    d9ac:	1859      	adds	r1, r3, r1
    d9ae:	7b09      	ldrb	r1, [r1, #12]
    d9b0:	0110      	lsls	r0, r2, #4
    d9b2:	181b      	adds	r3, r3, r0
    d9b4:	7319      	strb	r1, [r3, #12]
                    if (timerId == expiredTimerQueueTail)
    d9b6:	4b1d      	ldr	r3, [pc, #116]	; (da2c <SwTimerStop+0x160>)
    d9b8:	681b      	ldr	r3, [r3, #0]
    d9ba:	429c      	cmp	r4, r3
    d9bc:	d1c9      	bne.n	d952 <SwTimerStop+0x86>
                        expiredTimerQueueTail = prevIndex;
    d9be:	4b1b      	ldr	r3, [pc, #108]	; (da2c <SwTimerStop+0x160>)
    d9c0:	601a      	str	r2, [r3, #0]
    d9c2:	e7c6      	b.n	d952 <SwTimerStop+0x86>
                    if (expiredTimerQueueHead == expiredTimerQueueTail)
    d9c4:	4b19      	ldr	r3, [pc, #100]	; (da2c <SwTimerStop+0x160>)
    d9c6:	681b      	ldr	r3, [r3, #0]
    d9c8:	4298      	cmp	r0, r3
    d9ca:	d006      	beq.n	d9da <SwTimerStop+0x10e>
                        expiredTimerQueueHead = swTimers[expiredTimerQueueHead].nextTimer;
    d9cc:	0100      	lsls	r0, r0, #4
    d9ce:	4b13      	ldr	r3, [pc, #76]	; (da1c <SwTimerStop+0x150>)
    d9d0:	1818      	adds	r0, r3, r0
    d9d2:	7b02      	ldrb	r2, [r0, #12]
    d9d4:	4b14      	ldr	r3, [pc, #80]	; (da28 <SwTimerStop+0x15c>)
    d9d6:	601a      	str	r2, [r3, #0]
    d9d8:	e7bb      	b.n	d952 <SwTimerStop+0x86>
                        expiredTimerQueueHead = expiredTimerQueueTail = SWTIMER_INVALID;
    d9da:	23ff      	movs	r3, #255	; 0xff
    d9dc:	4a13      	ldr	r2, [pc, #76]	; (da2c <SwTimerStop+0x160>)
    d9de:	6013      	str	r3, [r2, #0]
    d9e0:	4a11      	ldr	r2, [pc, #68]	; (da28 <SwTimerStop+0x15c>)
    d9e2:	6013      	str	r3, [r2, #0]
    d9e4:	e7b5      	b.n	d952 <SwTimerStop+0x86>
    d9e6:	23ff      	movs	r3, #255	; 0xff
    d9e8:	422b      	tst	r3, r5
    d9ea:	d00a      	beq.n	da02 <SwTimerStop+0x136>
    d9ec:	2300      	movs	r3, #0
		cpu_irq_enable();
    d9ee:	2101      	movs	r1, #1
    d9f0:	4a06      	ldr	r2, [pc, #24]	; (da0c <SwTimerStop+0x140>)
    d9f2:	7011      	strb	r1, [r2, #0]
    d9f4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d9f8:	b662      	cpsie	i
    if (timerStopReqStatus)
    d9fa:	2b00      	cmp	r3, #0
    d9fc:	d103      	bne.n	da06 <SwTimerStop+0x13a>
    return LORAWAN_INVALID_REQUEST;
    d9fe:	2015      	movs	r0, #21
    da00:	e76a      	b.n	d8d8 <SwTimerStop+0xc>
    da02:	2015      	movs	r0, #21
    da04:	e768      	b.n	d8d8 <SwTimerStop+0xc>
        return LORAWAN_SUCCESS;
    da06:	2008      	movs	r0, #8
    da08:	e766      	b.n	d8d8 <SwTimerStop+0xc>
    da0a:	46c0      	nop			; (mov r8, r8)
    da0c:	20000014 	.word	0x20000014
    da10:	0000d431 	.word	0x0000d431
    da14:	2000207c 	.word	0x2000207c
    da18:	20002078 	.word	0x20002078
    da1c:	20002db8 	.word	0x20002db8
    da20:	00013641 	.word	0x00013641
    da24:	0000d399 	.word	0x0000d399
    da28:	20002070 	.word	0x20002070
    da2c:	20002074 	.word	0x20002074

0000da30 <SwTimerRunRemainingTime>:
{
    da30:	b5f0      	push	{r4, r5, r6, r7, lr}
    da32:	b083      	sub	sp, #12
    da34:	0005      	movs	r5, r0
    void * timerCb = (void*)(swTimers[runningTimerQueueHead].timerCb);
    da36:	4b0b      	ldr	r3, [pc, #44]	; (da64 <SwTimerRunRemainingTime+0x34>)
    da38:	681c      	ldr	r4, [r3, #0]
    da3a:	0122      	lsls	r2, r4, #4
    da3c:	4b0a      	ldr	r3, [pc, #40]	; (da68 <SwTimerRunRemainingTime+0x38>)
    da3e:	189b      	adds	r3, r3, r2
    da40:	685e      	ldr	r6, [r3, #4]
    void *paramCb = swTimers[runningTimerQueueHead].paramCb;
    da42:	689f      	ldr	r7, [r3, #8]
    uint8_t timerId = runningTimerQueueHead;
    da44:	b2e4      	uxtb	r4, r4
    if (LORAWAN_SUCCESS == SwTimerStop(runningTimerQueueHead))
    da46:	0020      	movs	r0, r4
    da48:	4b08      	ldr	r3, [pc, #32]	; (da6c <SwTimerRunRemainingTime+0x3c>)
    da4a:	4798      	blx	r3
    da4c:	2808      	cmp	r0, #8
    da4e:	d001      	beq.n	da54 <SwTimerRunRemainingTime+0x24>
}
    da50:	b003      	add	sp, #12
    da52:	bdf0      	pop	{r4, r5, r6, r7, pc}
        SwTimerStart(timerId, offset, SW_TIMEOUT_RELATIVE, timerCb, paramCb);
    da54:	9700      	str	r7, [sp, #0]
    da56:	0033      	movs	r3, r6
    da58:	2200      	movs	r2, #0
    da5a:	0029      	movs	r1, r5
    da5c:	0020      	movs	r0, r4
    da5e:	4c04      	ldr	r4, [pc, #16]	; (da70 <SwTimerRunRemainingTime+0x40>)
    da60:	47a0      	blx	r4
}
    da62:	e7f5      	b.n	da50 <SwTimerRunRemainingTime+0x20>
    da64:	20002078 	.word	0x20002078
    da68:	20002db8 	.word	0x20002db8
    da6c:	0000d8cd 	.word	0x0000d8cd
    da70:	0000d5b5 	.word	0x0000d5b5

0000da74 <SystemTimerSync>:
/**************************************************************************//**
\brief Resumes the software timer by offseting it with given time
\param[in] timeToSync Amount of duration to offset from known system time
******************************************************************************/
void SystemTimerSync(uint64_t timeToSync)
{
    da74:	b570      	push	{r4, r5, r6, lr}
    uint8_t timerId;
    uint16_t adjustOffset;

    sysTimeLastKnown += timeToSync;
    da76:	4b22      	ldr	r3, [pc, #136]	; (db00 <SystemTimerSync+0x8c>)
    da78:	681c      	ldr	r4, [r3, #0]
    da7a:	685d      	ldr	r5, [r3, #4]
    da7c:	1900      	adds	r0, r0, r4
    da7e:	4169      	adcs	r1, r5
    da80:	6018      	str	r0, [r3, #0]
    da82:	6059      	str	r1, [r3, #4]

    /* 1. Update system time */
    sysTimeOvf = (uint32_t) (sysTimeLastKnown >> 32);
    da84:	4b1f      	ldr	r3, [pc, #124]	; (db04 <SystemTimerSync+0x90>)
    da86:	6019      	str	r1, [r3, #0]
    sysTime = (uint16_t) ((sysTimeLastKnown >> SWTIMER_SYSTIME_SHIFTMASK) & 0xffff);
    da88:	0c02      	lsrs	r2, r0, #16
    da8a:	4b1f      	ldr	r3, [pc, #124]	; (db08 <SystemTimerSync+0x94>)
    da8c:	801a      	strh	r2, [r3, #0]

    /* 2. Adjust expiration of running timers */
    adjustOffset = (uint16_t) sysTimeLastKnown;
    da8e:	b280      	uxth	r0, r0
    timerId = runningTimerQueueHead;
    da90:	4b1e      	ldr	r3, [pc, #120]	; (db0c <SystemTimerSync+0x98>)
    da92:	781b      	ldrb	r3, [r3, #0]
    for (uint8_t index = 0; index < runningTimers; index++)
    da94:	4a1e      	ldr	r2, [pc, #120]	; (db10 <SystemTimerSync+0x9c>)
    da96:	7812      	ldrb	r2, [r2, #0]
    da98:	2a00      	cmp	r2, #0
    da9a:	d012      	beq.n	dac2 <SystemTimerSync+0x4e>
    da9c:	2200      	movs	r2, #0
    {
        if (SWTIMER_INVALID != timerId)
        {
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    da9e:	4c1d      	ldr	r4, [pc, #116]	; (db14 <SystemTimerSync+0xa0>)
    for (uint8_t index = 0; index < runningTimers; index++)
    daa0:	4d1b      	ldr	r5, [pc, #108]	; (db10 <SystemTimerSync+0x9c>)
    daa2:	e005      	b.n	dab0 <SystemTimerSync+0x3c>
    daa4:	3201      	adds	r2, #1
    daa6:	b2d2      	uxtb	r2, r2
    daa8:	7829      	ldrb	r1, [r5, #0]
    daaa:	b2c9      	uxtb	r1, r1
    daac:	4291      	cmp	r1, r2
    daae:	d908      	bls.n	dac2 <SystemTimerSync+0x4e>
        if (SWTIMER_INVALID != timerId)
    dab0:	2bff      	cmp	r3, #255	; 0xff
    dab2:	d0f7      	beq.n	daa4 <SystemTimerSync+0x30>
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    dab4:	011b      	lsls	r3, r3, #4
    dab6:	5919      	ldr	r1, [r3, r4]
    dab8:	1a09      	subs	r1, r1, r0
    daba:	5119      	str	r1, [r3, r4]
            timerId = swTimers[timerId].nextTimer;
    dabc:	18e3      	adds	r3, r4, r3
    dabe:	7b1b      	ldrb	r3, [r3, #12]
    dac0:	e7f0      	b.n	daa4 <SystemTimerSync+0x30>
        }
    }

    /* 3. Start hardware timer */
    common_tc_init();
    dac2:	4b15      	ldr	r3, [pc, #84]	; (db18 <SystemTimerSync+0xa4>)
    dac4:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    dac6:	4815      	ldr	r0, [pc, #84]	; (db1c <SystemTimerSync+0xa8>)
    dac8:	4b15      	ldr	r3, [pc, #84]	; (db20 <SystemTimerSync+0xac>)
    daca:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    dacc:	4815      	ldr	r0, [pc, #84]	; (db24 <SystemTimerSync+0xb0>)
    dace:	4b16      	ldr	r3, [pc, #88]	; (db28 <SystemTimerSync+0xb4>)
    dad0:	4798      	blx	r3

    /* 4. Resume timer queue operations */
    if (runningTimers && (SWTIMER_INVALID != runningTimerQueueHead))
    dad2:	4b0f      	ldr	r3, [pc, #60]	; (db10 <SystemTimerSync+0x9c>)
    dad4:	781b      	ldrb	r3, [r3, #0]
    dad6:	2b00      	cmp	r3, #0
    dad8:	d009      	beq.n	daee <SystemTimerSync+0x7a>
    dada:	4b0c      	ldr	r3, [pc, #48]	; (db0c <SystemTimerSync+0x98>)
    dadc:	681b      	ldr	r3, [r3, #0]
    dade:	2bff      	cmp	r3, #255	; 0xff
    dae0:	d005      	beq.n	daee <SystemTimerSync+0x7a>
    {
        uint32_t remainingTime = SwTimerNextExpiryDuration();
    dae2:	4b12      	ldr	r3, [pc, #72]	; (db2c <SystemTimerSync+0xb8>)
    dae4:	4798      	blx	r3

        if (SWTIMER_MIN_TIMEOUT > remainingTime)
    dae6:	28fe      	cmp	r0, #254	; 0xfe
    dae8:	d902      	bls.n	daf0 <SystemTimerSync+0x7c>
        else
        {
            /*
            * There is some time left in head timer, so restart it.
            */
            SwTimerRunRemainingTime(remainingTime);
    daea:	4b11      	ldr	r3, [pc, #68]	; (db30 <SystemTimerSync+0xbc>)
    daec:	4798      	blx	r3
        }
    }
}
    daee:	bd70      	pop	{r4, r5, r6, pc}
            isTimerTriggered = true;
    daf0:	2201      	movs	r2, #1
    daf2:	4b10      	ldr	r3, [pc, #64]	; (db34 <SystemTimerSync+0xc0>)
    daf4:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    daf6:	2001      	movs	r0, #1
    daf8:	4b0f      	ldr	r3, [pc, #60]	; (db38 <SystemTimerSync+0xc4>)
    dafa:	4798      	blx	r3
    dafc:	e7f7      	b.n	daee <SystemTimerSync+0x7a>
    dafe:	46c0      	nop			; (mov r8, r8)
    db00:	20002080 	.word	0x20002080
    db04:	20002f4c 	.word	0x20002f4c
    db08:	20002f48 	.word	0x20002f48
    db0c:	20002078 	.word	0x20002078
    db10:	2000207c 	.word	0x2000207c
    db14:	20002db8 	.word	0x20002db8
    db18:	000136d5 	.word	0x000136d5
    db1c:	0000d2d9 	.word	0x0000d2d9
    db20:	00013759 	.word	0x00013759
    db24:	0000d2b1 	.word	0x0000d2b1
    db28:	00013765 	.word	0x00013765
    db2c:	0000d7b1 	.word	0x0000d7b1
    db30:	0000da31 	.word	0x0000da31
    db34:	20002f4a 	.word	0x20002f4a
    db38:	0000dbcd 	.word	0x0000dbcd

0000db3c <SwTimerWriteTimestamp>:
\param[in] index Index of the system timestamp
\param[in] *timestamp Pointer-to-timestamp to be stored in the given index
******************************************************************************/
void SwTimerWriteTimestamp(uint8_t index, SwTimestamp_t *timestamp)
{
    swTimestamp[index] = *timestamp;
    db3c:	680a      	ldr	r2, [r1, #0]
    db3e:	684b      	ldr	r3, [r1, #4]
    db40:	00c1      	lsls	r1, r0, #3
    db42:	4802      	ldr	r0, [pc, #8]	; (db4c <SwTimerWriteTimestamp+0x10>)
    db44:	1840      	adds	r0, r0, r1
    db46:	6002      	str	r2, [r0, #0]
    db48:	6043      	str	r3, [r0, #4]
}
    db4a:	4770      	bx	lr
    db4c:	20002da8 	.word	0x20002da8

0000db50 <Stack_Init>:
/**************************************************************************//**
\brief Initializes the system. This is the first stack function to be called
       by the application in the main() function.
******************************************************************************/
void Stack_Init(void)
{
    db50:	b510      	push	{r4, lr}
	
	/* LORAWAN_Init() should have been called form here, 
	   but parser application has a round-about way to call it now */
 
	/* Post application task to initiate the execution from there */
	SYSTEM_PostTask(APP_TASK_ID);
    db52:	2010      	movs	r0, #16
    db54:	4b01      	ldr	r3, [pc, #4]	; (db5c <Stack_Init+0xc>)
    db56:	4798      	blx	r3
}
    db58:	bd10      	pop	{r4, pc}
    db5a:	46c0      	nop			; (mov r8, r8)
    db5c:	0000dbcd 	.word	0x0000dbcd

0000db60 <SYSTEM_RunTasks>:
/************************************************************************/
/*********************************************************************//**
\brief System tasks execution entry point
*************************************************************************/
void SYSTEM_RunTasks(void)
{
    db60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ((1 << SYSTEM_TASK_ID_COUNT) > sysTaskFlag)
    db62:	4b16      	ldr	r3, [pc, #88]	; (dbbc <SYSTEM_RunTasks+0x5c>)
    db64:	881b      	ldrh	r3, [r3, #0]
    db66:	b29b      	uxth	r3, r3
    db68:	2b1f      	cmp	r3, #31
    db6a:	d922      	bls.n	dbb2 <SYSTEM_RunTasks+0x52>
    db6c:	e7fe      	b.n	db6c <SYSTEM_RunTasks+0xc>
    { /* Only valid task bits are set */
        while (sysTaskFlag)
        { /* One or more task are pending to execute */
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
            {
                if ((1 << taskId) & sysTaskFlag)
    db6e:	2500      	movs	r5, #0
                    /*
                    * Reset the task bit since it is to be executed now.
                    * It is done inside atomic section to avoid any interrupt context
                    * corrupting the bits.
                    */
                    ATOMIC_SECTION_ENTER
    db70:	4b13      	ldr	r3, [pc, #76]	; (dbc0 <SYSTEM_RunTasks+0x60>)
    db72:	4798      	blx	r3
                    sysTaskFlag &= ~(1 << taskId);
    db74:	4911      	ldr	r1, [pc, #68]	; (dbbc <SYSTEM_RunTasks+0x5c>)
    db76:	880b      	ldrh	r3, [r1, #0]
    db78:	2201      	movs	r2, #1
    db7a:	40aa      	lsls	r2, r5
    db7c:	4393      	bics	r3, r2
    db7e:	800b      	strh	r3, [r1, #0]
                    ATOMIC_SECTION_EXIT
    db80:	4b10      	ldr	r3, [pc, #64]	; (dbc4 <SYSTEM_RunTasks+0x64>)
    db82:	4798      	blx	r3

                    /* Return value is not used now, can be used later */
                    taskHandlers[taskId]();
    db84:	00ad      	lsls	r5, r5, #2
    db86:	4b10      	ldr	r3, [pc, #64]	; (dbc8 <SYSTEM_RunTasks+0x68>)
    db88:	58eb      	ldr	r3, [r5, r3]
    db8a:	4798      	blx	r3
                if ((1 << taskId) & sysTaskFlag)
    db8c:	2101      	movs	r1, #1
        while (sysTaskFlag)
    db8e:	883b      	ldrh	r3, [r7, #0]
    db90:	b29b      	uxth	r3, r3
    db92:	2b00      	cmp	r3, #0
    db94:	d011      	beq.n	dbba <SYSTEM_RunTasks+0x5a>
                if ((1 << taskId) & sysTaskFlag)
    db96:	8823      	ldrh	r3, [r4, #0]
    db98:	420b      	tst	r3, r1
    db9a:	d1e8      	bne.n	db6e <SYSTEM_RunTasks+0xe>
    db9c:	2201      	movs	r2, #1
    db9e:	8833      	ldrh	r3, [r6, #0]
    dba0:	b29b      	uxth	r3, r3
    dba2:	0015      	movs	r5, r2
    dba4:	4113      	asrs	r3, r2
    dba6:	4219      	tst	r1, r3
    dba8:	d1e2      	bne.n	db70 <SYSTEM_RunTasks+0x10>
    dbaa:	3201      	adds	r2, #1
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
    dbac:	2a05      	cmp	r2, #5
    dbae:	d1f6      	bne.n	db9e <SYSTEM_RunTasks+0x3e>
    dbb0:	e7ed      	b.n	db8e <SYSTEM_RunTasks+0x2e>
        while (sysTaskFlag)
    dbb2:	4f02      	ldr	r7, [pc, #8]	; (dbbc <SYSTEM_RunTasks+0x5c>)
                if ((1 << taskId) & sysTaskFlag)
    dbb4:	003c      	movs	r4, r7
    dbb6:	003e      	movs	r6, r7
    dbb8:	e7e8      	b.n	db8c <SYSTEM_RunTasks+0x2c>
        * Can happen only due to corruption, so halt
        * TODO : replace this with assert implementation
        */
        while(1);
    }
}
    dbba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dbbc:	20002088 	.word	0x20002088
    dbc0:	0000cb81 	.word	0x0000cb81
    dbc4:	0000cb8d 	.word	0x0000cb8d
    dbc8:	0001925c 	.word	0x0001925c

0000dbcc <SYSTEM_PostTask>:

\param[in] task - ID of the posted task.
*************************************************************************/

void SYSTEM_PostTask(SYSTEM_Task_t task)
{
    dbcc:	b510      	push	{r4, lr}
    dbce:	0004      	movs	r4, r0
    ATOMIC_SECTION_ENTER
    dbd0:	4b04      	ldr	r3, [pc, #16]	; (dbe4 <SYSTEM_PostTask+0x18>)
    dbd2:	4798      	blx	r3
    sysTaskFlag |= task;
    dbd4:	4b04      	ldr	r3, [pc, #16]	; (dbe8 <SYSTEM_PostTask+0x1c>)
    dbd6:	8818      	ldrh	r0, [r3, #0]
    dbd8:	4320      	orrs	r0, r4
    dbda:	8018      	strh	r0, [r3, #0]
    ATOMIC_SECTION_EXIT
    dbdc:	4b03      	ldr	r3, [pc, #12]	; (dbec <SYSTEM_PostTask+0x20>)
    dbde:	4798      	blx	r3
}
    dbe0:	bd10      	pop	{r4, pc}
    dbe2:	46c0      	nop			; (mov r8, r8)
    dbe4:	0000cb81 	.word	0x0000cb81
    dbe8:	20002088 	.word	0x20002088
    dbec:	0000cb8d 	.word	0x0000cb8d

0000dbf0 <Radio_WriteMode>:
\param newModulation	- Sets the modulation.
\param blocking			- Sets if its blocking call or not.
\return					- none.
*************************************************************************/
void Radio_WriteMode(RadioMode_t newMode, RadioModulation_t newModulation, uint8_t blocking)
{
    dbf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    dbf2:	46d6      	mov	lr, sl
    dbf4:	464f      	mov	r7, r9
    dbf6:	b580      	push	{r7, lr}
    dbf8:	b083      	sub	sp, #12
    dbfa:	9201      	str	r2, [sp, #4]
    uint8_t opMode;
    uint8_t dioMapping;
    RadioModulation_t currentModulation;
    RadioMode_t currentMode;

    if ((MODULATION_FSK == newModulation) &&
    dbfc:	2900      	cmp	r1, #0
    dbfe:	d102      	bne.n	dc06 <Radio_WriteMode+0x16>
    dc00:	1f83      	subs	r3, r0, #6
    dc02:	2b01      	cmp	r3, #1
    dc04:	d92a      	bls.n	dc5c <Radio_WriteMode+0x6c>
        // Unavailable modes for FSK. Just return.
        return;
    }

    // Sanity enforcement on parameters
    newMode &= 0x07;
    dc06:	2307      	movs	r3, #7
    dc08:	4699      	mov	r9, r3
    dc0a:	001c      	movs	r4, r3
    dc0c:	4004      	ands	r4, r0
    newModulation &= 0x01;
    dc0e:	2601      	movs	r6, #1
    dc10:	400e      	ands	r6, r1

    opMode = RADIO_RegisterRead(REG_OPMODE);
    dc12:	2001      	movs	r0, #1
    dc14:	4b2b      	ldr	r3, [pc, #172]	; (dcc4 <Radio_WriteMode+0xd4>)
    dc16:	4798      	blx	r3
    dc18:	0005      	movs	r5, r0
    dc1a:	0007      	movs	r7, r0

    if ((opMode & 0x80) != 0)
    dc1c:	b243      	sxtb	r3, r0
    dc1e:	469a      	mov	sl, r3
    else
    {
        currentModulation = MODULATION_FSK;
    }

    currentMode = opMode & 0x07;
    dc20:	464b      	mov	r3, r9
    dc22:	4003      	ands	r3, r0

    // If we need to change modulation, we need to do this in sleep mode.
    // Otherwise, we can go straight to changing the current mode to newMode.
    if (newModulation != currentModulation)
    dc24:	4652      	mov	r2, sl
    dc26:	0fd2      	lsrs	r2, r2, #31
    dc28:	4296      	cmp	r6, r2
    dc2a:	d00a      	beq.n	dc42 <Radio_WriteMode+0x52>
    {
        // Go to sleep
        if (MODE_SLEEP != currentMode)
    dc2c:	2b00      	cmp	r3, #0
    dc2e:	d11a      	bne.n	dc66 <Radio_WriteMode+0x76>
            // Clear mode bits, effectively going to sleep
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
            currentMode = MODE_SLEEP;
        }
        // Change modulation
        if (MODULATION_FSK == newModulation)
    dc30:	2e00      	cmp	r6, #0
    dc32:	d11e      	bne.n	dc72 <Radio_WriteMode+0x82>
        {
            // Clear MSB and sleep bits to make it stay in sleep
            opMode = opMode & (~0x87);
    dc34:	2778      	movs	r7, #120	; 0x78
    dc36:	402f      	ands	r7, r5
        else
        {
            // LoRa mode. Set MSB and clear sleep bits to make it stay in sleep
            opMode = 0x80 | (opMode & (~0x87));
        }
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    dc38:	0039      	movs	r1, r7
    dc3a:	2001      	movs	r0, #1
    dc3c:	4b22      	ldr	r3, [pc, #136]	; (dcc8 <Radio_WriteMode+0xd8>)
    dc3e:	4798      	blx	r3
    dc40:	2300      	movs	r3, #0

    // From here on currentModulation is no longer current, we will use
    // newModulation instead as it reflects the chip configuration.
    // opMode reflects the actual configuration of the chip.

    if (newMode != currentMode)
    dc42:	42a3      	cmp	r3, r4
    dc44:	d00a      	beq.n	dc5c <Radio_WriteMode+0x6c>
    {
        // If we need to block until the mode switch is ready, configure the
        // DIO5 pin to relay this information.
        if ((MODE_SLEEP != newMode) && (1 == blocking))
    dc46:	2c00      	cmp	r4, #0
    dc48:	d030      	beq.n	dcac <Radio_WriteMode+0xbc>
    dc4a:	9b01      	ldr	r3, [sp, #4]
    dc4c:	2b01      	cmp	r3, #1
    dc4e:	d016      	beq.n	dc7e <Radio_WriteMode+0x8e>
            }
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
        }

        // Do the actual mode switch.
        opMode &= ~0x07;                // Clear old mode bits
    dc50:	21f8      	movs	r1, #248	; 0xf8
    dc52:	4039      	ands	r1, r7
        opMode |= newMode;              // Set new mode bits
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    dc54:	4321      	orrs	r1, r4
    dc56:	2001      	movs	r0, #1
    dc58:	4b1b      	ldr	r3, [pc, #108]	; (dcc8 <Radio_WriteMode+0xd8>)
    dc5a:	4798      	blx	r3
                SystemBlockingWaitMs(1);
            }
        }
    }
#endif
}
    dc5c:	b003      	add	sp, #12
    dc5e:	bc0c      	pop	{r2, r3}
    dc60:	4691      	mov	r9, r2
    dc62:	469a      	mov	sl, r3
    dc64:	bdf0      	pop	{r4, r5, r6, r7, pc}
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
    dc66:	21f8      	movs	r1, #248	; 0xf8
    dc68:	4001      	ands	r1, r0
    dc6a:	2001      	movs	r0, #1
    dc6c:	4b16      	ldr	r3, [pc, #88]	; (dcc8 <Radio_WriteMode+0xd8>)
    dc6e:	4798      	blx	r3
    dc70:	e7de      	b.n	dc30 <Radio_WriteMode+0x40>
            opMode = 0x80 | (opMode & (~0x87));
    dc72:	2778      	movs	r7, #120	; 0x78
    dc74:	4653      	mov	r3, sl
    dc76:	401f      	ands	r7, r3
    dc78:	2180      	movs	r1, #128	; 0x80
    dc7a:	430f      	orrs	r7, r1
    dc7c:	e7dc      	b.n	dc38 <Radio_WriteMode+0x48>
            dioMapping = RADIO_RegisterRead(REG_DIOMAPPING2);
    dc7e:	2041      	movs	r0, #65	; 0x41
    dc80:	4b10      	ldr	r3, [pc, #64]	; (dcc4 <Radio_WriteMode+0xd4>)
    dc82:	4798      	blx	r3
            if (MODULATION_FSK == newModulation)
    dc84:	2e00      	cmp	r6, #0
    dc86:	d10e      	bne.n	dca6 <Radio_WriteMode+0xb6>
                dioMapping |= 0x30;     // DIO5 = 11 means ModeReady in FSK mode
    dc88:	2130      	movs	r1, #48	; 0x30
    dc8a:	4301      	orrs	r1, r0
    dc8c:	b2c9      	uxtb	r1, r1
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
    dc8e:	2041      	movs	r0, #65	; 0x41
    dc90:	4d0d      	ldr	r5, [pc, #52]	; (dcc8 <Radio_WriteMode+0xd8>)
    dc92:	47a8      	blx	r5
        opMode &= ~0x07;                // Clear old mode bits
    dc94:	21f8      	movs	r1, #248	; 0xf8
    dc96:	4039      	ands	r1, r7
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    dc98:	4321      	orrs	r1, r4
    dc9a:	2001      	movs	r0, #1
    dc9c:	47a8      	blx	r5
			   delay_ms(1);
    dc9e:	2001      	movs	r0, #1
    dca0:	4b0a      	ldr	r3, [pc, #40]	; (dccc <Radio_WriteMode+0xdc>)
    dca2:	4798      	blx	r3
    dca4:	e7da      	b.n	dc5c <Radio_WriteMode+0x6c>
                dioMapping &= ~0x30;    // DIO5 = 00 means ModeReady in LoRa mode
    dca6:	21cf      	movs	r1, #207	; 0xcf
    dca8:	4001      	ands	r1, r0
    dcaa:	e7f0      	b.n	dc8e <Radio_WriteMode+0x9e>
        opMode &= ~0x07;                // Clear old mode bits
    dcac:	21f8      	movs	r1, #248	; 0xf8
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    dcae:	4039      	ands	r1, r7
    dcb0:	2001      	movs	r0, #1
    dcb2:	4b05      	ldr	r3, [pc, #20]	; (dcc8 <Radio_WriteMode+0xd8>)
    dcb4:	4798      	blx	r3
        if (1 == blocking)
    dcb6:	9b01      	ldr	r3, [sp, #4]
    dcb8:	2b01      	cmp	r3, #1
    dcba:	d1cf      	bne.n	dc5c <Radio_WriteMode+0x6c>
                SystemBlockingWaitMs(1);
    dcbc:	2001      	movs	r0, #1
    dcbe:	4b04      	ldr	r3, [pc, #16]	; (dcd0 <Radio_WriteMode+0xe0>)
    dcc0:	4798      	blx	r3
    dcc2:	e7cb      	b.n	dc5c <Radio_WriteMode+0x6c>
    dcc4:	0000c9f1 	.word	0x0000c9f1
    dcc8:	0000c9c9 	.word	0x0000c9c9
    dccc:	00004719 	.word	0x00004719
    dcd0:	0000cb65 	.word	0x0000cb65

0000dcd4 <RADIO_FHSSChangeChannel>:

\param		- none	
\return		- none.
*************************************************************************/
void RADIO_FHSSChangeChannel(void)
{
    dcd4:	b500      	push	{lr}
    dcd6:	b083      	sub	sp, #12
    uint32_t freq;
    RADIO_RegisterRead(REG_LORA_IRQFLAGS);
    dcd8:	2012      	movs	r0, #18
    dcda:	4b0d      	ldr	r3, [pc, #52]	; (dd10 <RADIO_FHSSChangeChannel+0x3c>)
    dcdc:	4798      	blx	r3

    if (radioConfiguration.frequencyHopPeriod)
    dcde:	4b0d      	ldr	r3, [pc, #52]	; (dd14 <RADIO_FHSSChangeChannel+0x40>)
    dce0:	8adb      	ldrh	r3, [r3, #22]
    dce2:	2b00      	cmp	r3, #0
    dce4:	d007      	beq.n	dcf6 <RADIO_FHSSChangeChannel+0x22>
    {
        if ((radioConfiguration.radioCallback) &&
    dce6:	4b0b      	ldr	r3, [pc, #44]	; (dd14 <RADIO_FHSSChangeChannel+0x40>)
    dce8:	691b      	ldr	r3, [r3, #16]
    dcea:	2b00      	cmp	r3, #0
    dcec:	d003      	beq.n	dcf6 <RADIO_FHSSChangeChannel+0x22>
            (1 == radioCallbackMask.BitMask.radioFhssfreqCallback))
    dcee:	4a0a      	ldr	r2, [pc, #40]	; (dd18 <RADIO_FHSSChangeChannel+0x44>)
    dcf0:	7812      	ldrb	r2, [r2, #0]
        if ((radioConfiguration.radioCallback) &&
    dcf2:	0692      	lsls	r2, r2, #26
    dcf4:	d405      	bmi.n	dd02 <RADIO_FHSSChangeChannel+0x2e>
            Radio_WriteFrequency(freq);
        }
    }

    // Clear FHSSChangeChannel interrupt
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 1 << SHIFT1);
    dcf6:	2102      	movs	r1, #2
    dcf8:	2012      	movs	r0, #18
    dcfa:	4b08      	ldr	r3, [pc, #32]	; (dd1c <RADIO_FHSSChangeChannel+0x48>)
    dcfc:	4798      	blx	r3
}
    dcfe:	b003      	add	sp, #12
    dd00:	bd00      	pop	{pc}
            radioConfiguration.radioCallback(RADIO_FHSS_NEXT_FREQ_CALLBACK, (void *)&freq);
    dd02:	a901      	add	r1, sp, #4
    dd04:	2020      	movs	r0, #32
    dd06:	4798      	blx	r3
            Radio_WriteFrequency(freq);
    dd08:	9801      	ldr	r0, [sp, #4]
    dd0a:	4b05      	ldr	r3, [pc, #20]	; (dd20 <RADIO_FHSSChangeChannel+0x4c>)
    dd0c:	4798      	blx	r3
    dd0e:	e7f2      	b.n	dcf6 <RADIO_FHSSChangeChannel+0x22>
    dd10:	0000c9f1 	.word	0x0000c9f1
    dd14:	20002f50 	.word	0x20002f50
    dd18:	2000321e 	.word	0x2000321e
    dd1c:	0000c9c9 	.word	0x0000c9c9
    dd20:	0000e7d1 	.word	0x0000e7d1

0000dd24 <RADIO_ReadRandom>:

\param		- none	
\return		- returns the random number generated.
*************************************************************************/
uint16_t RADIO_ReadRandom(void)
{
    dd24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
    uint16_t retVal;
    retVal = 0;
	
	// Turn on the RF switch.
	Radio_EnableRfControl(RADIO_RFCTRL_RX); 
    dd26:	2000      	movs	r0, #0
    dd28:	4b1a      	ldr	r3, [pc, #104]	; (dd94 <RADIO_ReadRandom+0x70>)
    dd2a:	4798      	blx	r3
	// Enabling Radio Clock
	Radio_SetClockInput();
    dd2c:	4b1a      	ldr	r3, [pc, #104]	; (dd98 <RADIO_ReadRandom+0x74>)
    dd2e:	4798      	blx	r3
	
    // Mask all interrupts, do many measurements of RSSI
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    dd30:	2201      	movs	r2, #1
    dd32:	2101      	movs	r1, #1
    dd34:	2000      	movs	r0, #0
    dd36:	4c19      	ldr	r4, [pc, #100]	; (dd9c <RADIO_ReadRandom+0x78>)
    dd38:	47a0      	blx	r4
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0xFF);
    dd3a:	21ff      	movs	r1, #255	; 0xff
    dd3c:	2011      	movs	r0, #17
    dd3e:	4b18      	ldr	r3, [pc, #96]	; (dda0 <RADIO_ReadRandom+0x7c>)
    dd40:	4798      	blx	r3
    Radio_WriteMode(MODE_RXCONT, MODULATION_LORA, 1);
    dd42:	2201      	movs	r2, #1
    dd44:	2101      	movs	r1, #1
    dd46:	2005      	movs	r0, #5
    dd48:	47a0      	blx	r4
    dd4a:	2410      	movs	r4, #16
    retVal = 0;
    dd4c:	2500      	movs	r5, #0
    for (i = 0; i < 16; i++)
    {
        SystemBlockingWaitMs(1);
    dd4e:	4f15      	ldr	r7, [pc, #84]	; (dda4 <RADIO_ReadRandom+0x80>)
        retVal <<= SHIFT1;
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    dd50:	4e15      	ldr	r6, [pc, #84]	; (dda8 <RADIO_ReadRandom+0x84>)
        SystemBlockingWaitMs(1);
    dd52:	2001      	movs	r0, #1
    dd54:	47b8      	blx	r7
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    dd56:	202c      	movs	r0, #44	; 0x2c
    dd58:	47b0      	blx	r6
    dd5a:	2301      	movs	r3, #1
    dd5c:	4018      	ands	r0, r3
        retVal <<= SHIFT1;
    dd5e:	006d      	lsls	r5, r5, #1
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    dd60:	4305      	orrs	r5, r0
    dd62:	b2ad      	uxth	r5, r5
    dd64:	3c01      	subs	r4, #1
    dd66:	b2e4      	uxtb	r4, r4
    for (i = 0; i < 16; i++)
    dd68:	2c00      	cmp	r4, #0
    dd6a:	d1f2      	bne.n	dd52 <RADIO_ReadRandom+0x2e>
    }
	
	// Turning off the RF switch now.
	Radio_DisableRfControl(RADIO_RFCTRL_RX);
    dd6c:	2000      	movs	r0, #0
    dd6e:	4b0f      	ldr	r3, [pc, #60]	; (ddac <RADIO_ReadRandom+0x88>)
    dd70:	4798      	blx	r3
	
    // Return radio to sleep
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    dd72:	2201      	movs	r2, #1
    dd74:	2101      	movs	r1, #1
    dd76:	2000      	movs	r0, #0
    dd78:	4b08      	ldr	r3, [pc, #32]	; (dd9c <RADIO_ReadRandom+0x78>)
    dd7a:	4798      	blx	r3
    // Clear interrupts in case any have been generated
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 0xFF);
    dd7c:	21ff      	movs	r1, #255	; 0xff
    dd7e:	2012      	movs	r0, #18
    dd80:	4c07      	ldr	r4, [pc, #28]	; (dda0 <RADIO_ReadRandom+0x7c>)
    dd82:	47a0      	blx	r4
    // Unmask all interrupts
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0x00);
    dd84:	2100      	movs	r1, #0
    dd86:	2011      	movs	r0, #17
    dd88:	47a0      	blx	r4
	// Disabling Radio Clock save power
	Radio_ResetClockInput();
    dd8a:	4b09      	ldr	r3, [pc, #36]	; (ddb0 <RADIO_ReadRandom+0x8c>)
    dd8c:	4798      	blx	r3
	
    return retVal;
}
    dd8e:	0028      	movs	r0, r5
    dd90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dd92:	46c0      	nop			; (mov r8, r8)
    dd94:	0000f08d 	.word	0x0000f08d
    dd98:	0000f449 	.word	0x0000f449
    dd9c:	0000dbf1 	.word	0x0000dbf1
    dda0:	0000c9c9 	.word	0x0000c9c9
    dda4:	0000cb65 	.word	0x0000cb65
    dda8:	0000c9f1 	.word	0x0000c9f1
    ddac:	0000f0c1 	.word	0x0000f0c1
    ddb0:	0000f579 	.word	0x0000f579

0000ddb4 <Radio_ReadRssi>:

\param rssi	- The RSSI measured in the channel.
\return		- ERR_NONE. Other types are not used now.
*************************************************************************/
RadioError_t Radio_ReadRssi(int16_t *rssi)
{
    ddb4:	b510      	push	{r4, lr}
    ddb6:	0004      	movs	r4, r0
	if (MODULATION_LORA == radioConfiguration.modulation)
    ddb8:	2334      	movs	r3, #52	; 0x34
    ddba:	4a11      	ldr	r2, [pc, #68]	; (de00 <Radio_ReadRssi+0x4c>)
    ddbc:	5cd3      	ldrb	r3, [r2, r3]
    ddbe:	2b01      	cmp	r3, #1
    ddc0:	d003      	beq.n	ddca <Radio_ReadRssi+0x16>
		*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
	#endif // UT
	}
	else
	{
		return ERR_UNSUPPORTED_ATTR;
    ddc2:	2006      	movs	r0, #6
	else if (MODULATION_FSK == radioConfiguration.modulation)
    ddc4:	2b00      	cmp	r3, #0
    ddc6:	d012      	beq.n	ddee <Radio_ReadRssi+0x3a>
	}
	return ERR_NONE;
}
    ddc8:	bd10      	pop	{r4, pc}
		if (radioConfiguration.frequency >= HF_FREQ_HZ)
    ddca:	4b0e      	ldr	r3, [pc, #56]	; (de04 <Radio_ReadRssi+0x50>)
    ddcc:	6812      	ldr	r2, [r2, #0]
    ddce:	429a      	cmp	r2, r3
    ddd0:	d906      	bls.n	dde0 <Radio_ReadRssi+0x2c>
			*rssi = RSSI_HF_OFFSET + RADIO_RegisterRead(REG_LORA_PKTRSSIVALUE);
    ddd2:	201a      	movs	r0, #26
    ddd4:	4b0c      	ldr	r3, [pc, #48]	; (de08 <Radio_ReadRssi+0x54>)
    ddd6:	4798      	blx	r3
    ddd8:	389d      	subs	r0, #157	; 0x9d
    ddda:	8020      	strh	r0, [r4, #0]
	return ERR_NONE;
    dddc:	2000      	movs	r0, #0
    ddde:	e7f3      	b.n	ddc8 <Radio_ReadRssi+0x14>
			*rssi = RSSI_LF_OFFSET + RADIO_RegisterRead(REG_LORA_PKTRSSIVALUE);
    dde0:	201a      	movs	r0, #26
    dde2:	4b09      	ldr	r3, [pc, #36]	; (de08 <Radio_ReadRssi+0x54>)
    dde4:	4798      	blx	r3
    dde6:	38a4      	subs	r0, #164	; 0xa4
    dde8:	8020      	strh	r0, [r4, #0]
	return ERR_NONE;
    ddea:	2000      	movs	r0, #0
    ddec:	e7ec      	b.n	ddc8 <Radio_ReadRssi+0x14>
		*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
    ddee:	300b      	adds	r0, #11
    ddf0:	4b05      	ldr	r3, [pc, #20]	; (de08 <Radio_ReadRssi+0x54>)
    ddf2:	4798      	blx	r3
    ddf4:	0840      	lsrs	r0, r0, #1
    ddf6:	b2c3      	uxtb	r3, r0
    ddf8:	425b      	negs	r3, r3
    ddfa:	8023      	strh	r3, [r4, #0]
	return ERR_NONE;
    ddfc:	2000      	movs	r0, #0
    ddfe:	e7e3      	b.n	ddc8 <Radio_ReadRssi+0x14>
    de00:	20002f50 	.word	0x20002f50
    de04:	3361137f 	.word	0x3361137f
    de08:	0000c9f1 	.word	0x0000c9f1

0000de0c <Radio_ReadFSKRssi>:

\param rssi	- The RSSI measured in the channel.
\return		- ERR_NONE. Other types are not used now.
*************************************************************************/
RadioError_t Radio_ReadFSKRssi(int16_t *rssi)
{	
    de0c:	b510      	push	{r4, lr}
    de0e:	0004      	movs	r4, r0
#ifdef UT
	*rssi = testRssi;
#else // UT
	*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
    de10:	2011      	movs	r0, #17
    de12:	4b04      	ldr	r3, [pc, #16]	; (de24 <Radio_ReadFSKRssi+0x18>)
    de14:	4798      	blx	r3
    de16:	0840      	lsrs	r0, r0, #1
    de18:	b2c0      	uxtb	r0, r0
    de1a:	4240      	negs	r0, r0
    de1c:	8020      	strh	r0, [r4, #0]
#endif // UT
	
	return ERR_NONE;
}
    de1e:	2000      	movs	r0, #0
    de20:	bd10      	pop	{r4, pc}
    de22:	46c0      	nop			; (mov r8, r8)
    de24:	0000c9f1 	.word	0x0000c9f1

0000de28 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    de28:	b510      	push	{r4, lr}
	tmr_cca_callback();
    de2a:	4b01      	ldr	r3, [pc, #4]	; (de30 <tc_cca_callback+0x8>)
    de2c:	4798      	blx	r3
}
    de2e:	bd10      	pop	{r4, pc}
    de30:	0001373d 	.word	0x0001373d

0000de34 <tc_ovf_callback>:
{
    de34:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    de36:	4b01      	ldr	r3, [pc, #4]	; (de3c <tc_ovf_callback+0x8>)
    de38:	4798      	blx	r3
}
    de3a:	bd10      	pop	{r4, pc}
    de3c:	000136f5 	.word	0x000136f5

0000de40 <tmr_read_count>:
{
    de40:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    de42:	4802      	ldr	r0, [pc, #8]	; (de4c <tmr_read_count+0xc>)
    de44:	4b02      	ldr	r3, [pc, #8]	; (de50 <tmr_read_count+0x10>)
    de46:	4798      	blx	r3
    de48:	b280      	uxth	r0, r0
}
    de4a:	bd10      	pop	{r4, pc}
    de4c:	20002fe4 	.word	0x20002fe4
    de50:	000075e1 	.word	0x000075e1

0000de54 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    de54:	4b03      	ldr	r3, [pc, #12]	; (de64 <tmr_disable_cc_interrupt+0x10>)
    de56:	2110      	movs	r1, #16
    de58:	681a      	ldr	r2, [r3, #0]
    de5a:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    de5c:	7e5a      	ldrb	r2, [r3, #25]
    de5e:	438a      	bics	r2, r1
    de60:	765a      	strb	r2, [r3, #25]
}
    de62:	4770      	bx	lr
    de64:	20002fe4 	.word	0x20002fe4

0000de68 <tmr_enable_cc_interrupt>:
{
    de68:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    de6a:	4c0a      	ldr	r4, [pc, #40]	; (de94 <tmr_enable_cc_interrupt+0x2c>)
    de6c:	6820      	ldr	r0, [r4, #0]
    de6e:	4b0a      	ldr	r3, [pc, #40]	; (de98 <tmr_enable_cc_interrupt+0x30>)
    de70:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    de72:	4b0a      	ldr	r3, [pc, #40]	; (de9c <tmr_enable_cc_interrupt+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    de74:	5c1b      	ldrb	r3, [r3, r0]
    de76:	221f      	movs	r2, #31
    de78:	401a      	ands	r2, r3
    de7a:	2301      	movs	r3, #1
    de7c:	4093      	lsls	r3, r2
    de7e:	4a08      	ldr	r2, [pc, #32]	; (dea0 <tmr_enable_cc_interrupt+0x38>)
    de80:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    de82:	7e63      	ldrb	r3, [r4, #25]
    de84:	2210      	movs	r2, #16
    de86:	4313      	orrs	r3, r2
    de88:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    de8a:	6823      	ldr	r3, [r4, #0]
    de8c:	2210      	movs	r2, #16
    de8e:	725a      	strb	r2, [r3, #9]
}
    de90:	bd10      	pop	{r4, pc}
    de92:	46c0      	nop			; (mov r8, r8)
    de94:	20002fe4 	.word	0x20002fe4
    de98:	000072b5 	.word	0x000072b5
    de9c:	00019270 	.word	0x00019270
    dea0:	e000e100 	.word	0xe000e100

0000dea4 <tmr_disable_ovf_interrupt>:
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(2);
		module->enable_callback_mask &= ~TC_INTFLAG_MC(2);
	}
	else {
		module->hw->COUNT8.INTENCLR.reg = (1 << callback_type);
    dea4:	4b03      	ldr	r3, [pc, #12]	; (deb4 <tmr_disable_ovf_interrupt+0x10>)
    dea6:	2101      	movs	r1, #1
    dea8:	681a      	ldr	r2, [r3, #0]
    deaa:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~(1 << callback_type);
    deac:	7e5a      	ldrb	r2, [r3, #25]
    deae:	438a      	bics	r2, r1
    deb0:	765a      	strb	r2, [r3, #25]
}
    deb2:	4770      	bx	lr
    deb4:	20002fe4 	.word	0x20002fe4

0000deb8 <tmr_enable_ovf_interrupt>:
{
    deb8:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    deba:	4c0a      	ldr	r4, [pc, #40]	; (dee4 <tmr_enable_ovf_interrupt+0x2c>)
    debc:	6820      	ldr	r0, [r4, #0]
    debe:	4b0a      	ldr	r3, [pc, #40]	; (dee8 <tmr_enable_ovf_interrupt+0x30>)
    dec0:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    dec2:	4b0a      	ldr	r3, [pc, #40]	; (deec <tmr_enable_ovf_interrupt+0x34>)
    dec4:	5c1a      	ldrb	r2, [r3, r0]
    dec6:	231f      	movs	r3, #31
    dec8:	4013      	ands	r3, r2
    deca:	2201      	movs	r2, #1
    decc:	0011      	movs	r1, r2
    dece:	4099      	lsls	r1, r3
    ded0:	4b07      	ldr	r3, [pc, #28]	; (def0 <tmr_enable_ovf_interrupt+0x38>)
    ded2:	6019      	str	r1, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    ded4:	7e63      	ldrb	r3, [r4, #25]
    ded6:	2101      	movs	r1, #1
    ded8:	430b      	orrs	r3, r1
    deda:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    dedc:	6823      	ldr	r3, [r4, #0]
    dede:	725a      	strb	r2, [r3, #9]
}
    dee0:	bd10      	pop	{r4, pc}
    dee2:	46c0      	nop			; (mov r8, r8)
    dee4:	20002fe4 	.word	0x20002fe4
    dee8:	000072b5 	.word	0x000072b5
    deec:	00019270 	.word	0x00019270
    def0:	e000e100 	.word	0xe000e100

0000def4 <tmr_write_cmpreg>:
{
    def4:	b510      	push	{r4, lr}
    def6:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    def8:	2100      	movs	r1, #0
    defa:	4802      	ldr	r0, [pc, #8]	; (df04 <tmr_write_cmpreg+0x10>)
    defc:	4b02      	ldr	r3, [pc, #8]	; (df08 <tmr_write_cmpreg+0x14>)
    defe:	4798      	blx	r3
}
    df00:	bd10      	pop	{r4, pc}
    df02:	46c0      	nop			; (mov r8, r8)
    df04:	20002fe4 	.word	0x20002fe4
    df08:	00007629 	.word	0x00007629

0000df0c <save_cpu_interrupt>:
{
    df0c:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    df0e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    df12:	425a      	negs	r2, r3
    df14:	4153      	adcs	r3, r2
    df16:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    df18:	b672      	cpsid	i
    df1a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    df1e:	2200      	movs	r2, #0
    df20:	4b02      	ldr	r3, [pc, #8]	; (df2c <save_cpu_interrupt+0x20>)
    df22:	701a      	strb	r2, [r3, #0]
	return flags;
    df24:	9801      	ldr	r0, [sp, #4]
	return cpu_irq_save();
    df26:	b2c0      	uxtb	r0, r0
}
    df28:	b002      	add	sp, #8
    df2a:	4770      	bx	lr
    df2c:	20000014 	.word	0x20000014

0000df30 <restore_cpu_interrupt>:
	if (cpu_irq_is_enabled_flags(flags))
    df30:	2800      	cmp	r0, #0
    df32:	d005      	beq.n	df40 <restore_cpu_interrupt+0x10>
		cpu_irq_enable();
    df34:	2201      	movs	r2, #1
    df36:	4b03      	ldr	r3, [pc, #12]	; (df44 <restore_cpu_interrupt+0x14>)
    df38:	701a      	strb	r2, [r3, #0]
    df3a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    df3e:	b662      	cpsie	i
}
    df40:	4770      	bx	lr
    df42:	46c0      	nop			; (mov r8, r8)
    df44:	20000014 	.word	0x20000014

0000df48 <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    df48:	b570      	push	{r4, r5, r6, lr}
	config->clock_source               = GCLK_GENERATOR_0;
    df4a:	4a33      	ldr	r2, [pc, #204]	; (e018 <tmr_init+0xd0>)
    df4c:	2100      	movs	r1, #0
    df4e:	2300      	movs	r3, #0
    df50:	7011      	strb	r1, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    df52:	70d1      	strb	r1, [r2, #3]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    df54:	2000      	movs	r0, #0
    df56:	8091      	strh	r1, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    df58:	7190      	strb	r0, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    df5a:	71d3      	strb	r3, [r2, #7]
	config->run_in_standby             = false;
    df5c:	7053      	strb	r3, [r2, #1]
	config->on_demand                  = false;
    df5e:	7093      	strb	r3, [r2, #2]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    df60:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    df62:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    df64:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    df66:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    df68:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    df6a:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    df6c:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    df6e:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    df70:	6151      	str	r1, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    df72:	6191      	str	r1, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    df74:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    df76:	6211      	str	r1, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    df78:	6251      	str	r1, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    df7a:	8511      	strh	r1, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    df7c:	8591      	strh	r1, [r2, #44]	; 0x2c
	config->double_buffering_enabled = false;
    df7e:	2334      	movs	r3, #52	; 0x34
    df80:	54d0      	strb	r0, [r2, r3]
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    df82:	3b35      	subs	r3, #53	; 0x35
    df84:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    df86:	4c25      	ldr	r4, [pc, #148]	; (e01c <tmr_init+0xd4>)
    df88:	4925      	ldr	r1, [pc, #148]	; (e020 <tmr_init+0xd8>)
    df8a:	0020      	movs	r0, r4
    df8c:	4b25      	ldr	r3, [pc, #148]	; (e024 <tmr_init+0xdc>)
    df8e:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    df90:	2200      	movs	r2, #0
    df92:	4925      	ldr	r1, [pc, #148]	; (e028 <tmr_init+0xe0>)
    df94:	0020      	movs	r0, r4
    df96:	4d25      	ldr	r5, [pc, #148]	; (e02c <tmr_init+0xe4>)
    df98:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    df9a:	2202      	movs	r2, #2
    df9c:	4924      	ldr	r1, [pc, #144]	; (e030 <tmr_init+0xe8>)
    df9e:	0020      	movs	r0, r4
    dfa0:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    dfa2:	6820      	ldr	r0, [r4, #0]
    dfa4:	4b23      	ldr	r3, [pc, #140]	; (e034 <tmr_init+0xec>)
    dfa6:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    dfa8:	4b23      	ldr	r3, [pc, #140]	; (e038 <tmr_init+0xf0>)
    dfaa:	5c1a      	ldrb	r2, [r3, r0]
    dfac:	231f      	movs	r3, #31
    dfae:	4013      	ands	r3, r2
    dfb0:	2101      	movs	r1, #1
    dfb2:	000a      	movs	r2, r1
    dfb4:	409a      	lsls	r2, r3
    dfb6:	4b21      	ldr	r3, [pc, #132]	; (e03c <tmr_init+0xf4>)
    dfb8:	601a      	str	r2, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    dfba:	7e63      	ldrb	r3, [r4, #25]
    dfbc:	2201      	movs	r2, #1
    dfbe:	4313      	orrs	r3, r2
    dfc0:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    dfc2:	6822      	ldr	r2, [r4, #0]
    dfc4:	7251      	strb	r1, [r2, #9]
	return (tc_module->SYNCBUSY.reg);
    dfc6:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    dfc8:	2b00      	cmp	r3, #0
    dfca:	d1fc      	bne.n	dfc6 <tmr_init+0x7e>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    dfcc:	6813      	ldr	r3, [r2, #0]
    dfce:	2102      	movs	r1, #2
    dfd0:	430b      	orrs	r3, r1
    dfd2:	6013      	str	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;	
    dfd4:	2000      	movs	r0, #0
    dfd6:	4b1a      	ldr	r3, [pc, #104]	; (e040 <tmr_init+0xf8>)
    dfd8:	4798      	blx	r3
    dfda:	4d1a      	ldr	r5, [pc, #104]	; (e044 <tmr_init+0xfc>)
    dfdc:	47a8      	blx	r5
    dfde:	491a      	ldr	r1, [pc, #104]	; (e048 <tmr_init+0x100>)
    dfe0:	4b1a      	ldr	r3, [pc, #104]	; (e04c <tmr_init+0x104>)
    dfe2:	4798      	blx	r3
    dfe4:	1c04      	adds	r4, r0, #0
	#endif
	
	if ((timer_multiplier - (uint32_t)timer_multiplier) >= 0.5f)
    dfe6:	4b1a      	ldr	r3, [pc, #104]	; (e050 <tmr_init+0x108>)
    dfe8:	4798      	blx	r3
    dfea:	47a8      	blx	r5
    dfec:	1c01      	adds	r1, r0, #0
    dfee:	1c20      	adds	r0, r4, #0
    dff0:	4b18      	ldr	r3, [pc, #96]	; (e054 <tmr_init+0x10c>)
    dff2:	4798      	blx	r3
    dff4:	21fc      	movs	r1, #252	; 0xfc
    dff6:	0589      	lsls	r1, r1, #22
    dff8:	4b17      	ldr	r3, [pc, #92]	; (e058 <tmr_init+0x110>)
    dffa:	4798      	blx	r3
    dffc:	2800      	cmp	r0, #0
    dffe:	d005      	beq.n	e00c <tmr_init+0xc4>
	{
		timer_multiplier += 1.0f;
    e000:	21fe      	movs	r1, #254	; 0xfe
    e002:	0589      	lsls	r1, r1, #22
    e004:	1c20      	adds	r0, r4, #0
    e006:	4b15      	ldr	r3, [pc, #84]	; (e05c <tmr_init+0x114>)
    e008:	4798      	blx	r3
    e00a:	1c04      	adds	r4, r0, #0
	}
	
	return (uint8_t) timer_multiplier;
    e00c:	1c20      	adds	r0, r4, #0
    e00e:	4b10      	ldr	r3, [pc, #64]	; (e050 <tmr_init+0x108>)
    e010:	4798      	blx	r3
    e012:	b2c0      	uxtb	r0, r0
}
    e014:	bd70      	pop	{r4, r5, r6, pc}
    e016:	46c0      	nop			; (mov r8, r8)
    e018:	20002fac 	.word	0x20002fac
    e01c:	20002fe4 	.word	0x20002fe4
    e020:	42002000 	.word	0x42002000
    e024:	000072f1 	.word	0x000072f1
    e028:	0000de35 	.word	0x0000de35
    e02c:	000071ed 	.word	0x000071ed
    e030:	0000de29 	.word	0x0000de29
    e034:	000072b5 	.word	0x000072b5
    e038:	00019270 	.word	0x00019270
    e03c:	e000e100 	.word	0xe000e100
    e040:	00006fb5 	.word	0x00006fb5
    e044:	00014ba5 	.word	0x00014ba5
    e048:	49742400 	.word	0x49742400
    e04c:	0001416d 	.word	0x0001416d
    e050:	00013c1d 	.word	0x00013c1d
    e054:	0001478d 	.word	0x0001478d
    e058:	00013b75 	.word	0x00013b75
    e05c:	00013e49 	.word	0x00013e49

0000e060 <edbg_eui_read_eui64>:
#define LEN_EUI    256
uint8_t readbuf[LEN_EUI];

uint8_t *
edbg_eui_read_eui64(void)
{
    e060:	b570      	push	{r4, r5, r6, lr}
    e062:	b090      	sub	sp, #64	; 0x40
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    e064:	aa03      	add	r2, sp, #12
    e066:	2364      	movs	r3, #100	; 0x64
    e068:	9303      	str	r3, [sp, #12]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    e06a:	4b54      	ldr	r3, [pc, #336]	; (e1bc <edbg_eui_read_eui64+0x15c>)
    e06c:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    e06e:	2300      	movs	r3, #0
    e070:	6093      	str	r3, [r2, #8]
	config->generator_source = GCLK_GENERATOR_0;
    e072:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    e074:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    e076:	2180      	movs	r1, #128	; 0x80
    e078:	0389      	lsls	r1, r1, #14
    e07a:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
    e07c:	2101      	movs	r1, #1
    e07e:	4249      	negs	r1, r1
    e080:	82d1      	strh	r1, [r2, #22]
	config->unknown_bus_state_timeout = 65535;
    e082:	8291      	strh	r1, [r2, #20]
	config->scl_low_timeout  = false;
    e084:	3125      	adds	r1, #37	; 0x25
    e086:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    e088:	6293      	str	r3, [r2, #40]	; 0x28
	config->scl_stretch_only_after_ack_bit = false;
    e08a:	3108      	adds	r1, #8
    e08c:	5453      	strb	r3, [r2, r1]
	config->slave_scl_low_extend_timeout   = false;
    e08e:	3101      	adds	r1, #1
    e090:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    e092:	3101      	adds	r1, #1
    e094:	5453      	strb	r3, [r2, r1]
	config->sda_scl_rise_time_ns = 215;
    e096:	33d7      	adds	r3, #215	; 0xd7
    e098:	8613      	strh	r3, [r2, #48]	; 0x30
  int timeout2 = 0;
  bool random_mac_address = false;
  uint8_t edbg_status = 0xFF;
  struct i2c_master_config config_i2c_master;
  i2c_master_get_config_defaults(&config_i2c_master);
  config_i2c_master.pinmux_pad0  = EDBG_I2C_SERCOM_PINMUX_PAD0;
    e09a:	4b49      	ldr	r3, [pc, #292]	; (e1c0 <edbg_eui_read_eui64+0x160>)
    e09c:	61d3      	str	r3, [r2, #28]
  config_i2c_master.pinmux_pad1  = EDBG_I2C_SERCOM_PINMUX_PAD1;
    e09e:	4b49      	ldr	r3, [pc, #292]	; (e1c4 <edbg_eui_read_eui64+0x164>)
    e0a0:	6213      	str	r3, [r2, #32]

  i2c_master_init(&i2c_master_instance, EDBG_I2C_MODULE, &config_i2c_master);
    e0a2:	4c49      	ldr	r4, [pc, #292]	; (e1c8 <edbg_eui_read_eui64+0x168>)
    e0a4:	4949      	ldr	r1, [pc, #292]	; (e1cc <edbg_eui_read_eui64+0x16c>)
    e0a6:	0020      	movs	r0, r4
    e0a8:	4b49      	ldr	r3, [pc, #292]	; (e1d0 <edbg_eui_read_eui64+0x170>)
    e0aa:	4798      	blx	r3
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    e0ac:	6822      	ldr	r2, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    e0ae:	2107      	movs	r1, #7
    e0b0:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
    e0b2:	4219      	tst	r1, r3
    e0b4:	d1fc      	bne.n	e0b0 <edbg_eui_read_eui64+0x50>
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    e0b6:	6813      	ldr	r3, [r2, #0]
    e0b8:	2102      	movs	r1, #2
    e0ba:	430b      	orrs	r3, r1
    e0bc:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    e0be:	4b42      	ldr	r3, [pc, #264]	; (e1c8 <edbg_eui_read_eui64+0x168>)
    e0c0:	88dc      	ldrh	r4, [r3, #6]
	uint32_t timeout_counter = 0;
    e0c2:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    e0c4:	2010      	movs	r0, #16
    e0c6:	8b51      	ldrh	r1, [r2, #26]
    e0c8:	4201      	tst	r1, r0
    e0ca:	d104      	bne.n	e0d6 <edbg_eui_read_eui64+0x76>
		timeout_counter++;
    e0cc:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    e0ce:	42a3      	cmp	r3, r4
    e0d0:	d3f9      	bcc.n	e0c6 <edbg_eui_read_eui64+0x66>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    e0d2:	2310      	movs	r3, #16
    e0d4:	8353      	strh	r3, [r2, #26]

  i2c_master_enable(&i2c_master_instance);

  struct i2c_master_packet packet = {
    e0d6:	466a      	mov	r2, sp
    e0d8:	4b3e      	ldr	r3, [pc, #248]	; (e1d4 <edbg_eui_read_eui64+0x174>)
    e0da:	cb13      	ldmia	r3!, {r0, r1, r4}
    e0dc:	c213      	stmia	r2!, {r0, r1, r4}
  int timeout2 = 0;
    e0de:	2600      	movs	r6, #0
    .hs_master_code  = 0x0,
  };
   
    do
    {
	    edbg_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &packet);
    e0e0:	4c39      	ldr	r4, [pc, #228]	; (e1c8 <edbg_eui_read_eui64+0x168>)
    e0e2:	4d3d      	ldr	r5, [pc, #244]	; (e1d8 <edbg_eui_read_eui64+0x178>)
    e0e4:	e003      	b.n	e0ee <edbg_eui_read_eui64+0x8e>
	    if(edbg_status == STATUS_ERR_BAD_ADDRESS)
		{
			if(timeout2++ == SLAVE_WAIT_TIMEOUT)
    e0e6:	1c73      	adds	r3, r6, #1
    e0e8:	2e0a      	cmp	r6, #10
    e0ea:	d033      	beq.n	e154 <edbg_eui_read_eui64+0xf4>
    e0ec:	001e      	movs	r6, r3
	    edbg_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &packet);
    e0ee:	4669      	mov	r1, sp
    e0f0:	0020      	movs	r0, r4
    e0f2:	47a8      	blx	r5
	    if(edbg_status == STATUS_ERR_BAD_ADDRESS)
    e0f4:	2818      	cmp	r0, #24
    e0f6:	d0f6      	beq.n	e0e6 <edbg_eui_read_eui64+0x86>
				random_mac_address = true;
				timeout2 = 0;
				break;
			}
		}
		else if(edbg_status == STATUS_ERR_TIMEOUT) {
    e0f8:	2812      	cmp	r0, #18
    e0fa:	d02f      	beq.n	e15c <edbg_eui_read_eui64+0xfc>
		PRINTF("Timeout 1\n");
		random_mac_address = true;	
		break;
		}
    } while (edbg_status!=STATUS_OK && edbg_status!=0xFF);
    e0fc:	3801      	subs	r0, #1
    e0fe:	b2c0      	uxtb	r0, r0
    e100:	28fd      	cmp	r0, #253	; 0xfd
    e102:	d9f4      	bls.n	e0ee <edbg_eui_read_eui64+0x8e>
	
  packet.data = readbuf;
    e104:	4b35      	ldr	r3, [pc, #212]	; (e1dc <edbg_eui_read_eui64+0x17c>)
    e106:	9301      	str	r3, [sp, #4]
  packet.data_length = sizeof(readbuf);
    e108:	2380      	movs	r3, #128	; 0x80
    e10a:	005b      	lsls	r3, r3, #1
    e10c:	466a      	mov	r2, sp
    e10e:	8053      	strh	r3, [r2, #2]
if(random_mac_address == false)
{
  do 
  {
	  edbg_status = i2c_master_read_packet_wait(&i2c_master_instance, &packet) ;
    e110:	4c2d      	ldr	r4, [pc, #180]	; (e1c8 <edbg_eui_read_eui64+0x168>)
    e112:	4d33      	ldr	r5, [pc, #204]	; (e1e0 <edbg_eui_read_eui64+0x180>)
    e114:	4669      	mov	r1, sp
    e116:	0020      	movs	r0, r4
    e118:	47a8      	blx	r5
	    if(edbg_status==STATUS_ERR_BAD_ADDRESS)
    e11a:	2818      	cmp	r0, #24
    e11c:	d043      	beq.n	e1a6 <edbg_eui_read_eui64+0x146>
	    {			
			PRINTF("I2C Slave Not Available");
			random_mac_address = true;	
		    break;
	    }
		else if(edbg_status == STATUS_ERR_TIMEOUT) {
    e11e:	2812      	cmp	r0, #18
    e120:	d048      	beq.n	e1b4 <edbg_eui_read_eui64+0x154>
			random_mac_address = true;	
			PRINTF("Timeout 2\n");
			break;
		}		
  } while (edbg_status!=STATUS_OK && edbg_status!=0xFF);
    e122:	3801      	subs	r0, #1
    e124:	b2c0      	uxtb	r0, r0
    e126:	28fd      	cmp	r0, #253	; 0xfd
    e128:	d9f4      	bls.n	e114 <edbg_eui_read_eui64+0xb4>
}
  i2c_master_reset(&i2c_master_instance);
    e12a:	4827      	ldr	r0, [pc, #156]	; (e1c8 <edbg_eui_read_eui64+0x168>)
    e12c:	4b2d      	ldr	r3, [pc, #180]	; (e1e4 <edbg_eui_read_eui64+0x184>)
    e12e:	4798      	blx	r3
  if(random_mac_address || !(readbuf[0] ^ readbuf[1] ^ readbuf[2] ^ readbuf[3] ^ readbuf[4] ^ readbuf[5] ^ readbuf[6] ^ readbuf[7]))
    e130:	4a2a      	ldr	r2, [pc, #168]	; (e1dc <edbg_eui_read_eui64+0x17c>)
    e132:	7813      	ldrb	r3, [r2, #0]
    e134:	7851      	ldrb	r1, [r2, #1]
    e136:	404b      	eors	r3, r1
    e138:	7891      	ldrb	r1, [r2, #2]
    e13a:	404b      	eors	r3, r1
    e13c:	78d1      	ldrb	r1, [r2, #3]
    e13e:	404b      	eors	r3, r1
    e140:	7911      	ldrb	r1, [r2, #4]
    e142:	404b      	eors	r3, r1
    e144:	7951      	ldrb	r1, [r2, #5]
    e146:	404b      	eors	r3, r1
    e148:	7991      	ldrb	r1, [r2, #6]
    e14a:	79d2      	ldrb	r2, [r2, #7]
    e14c:	404b      	eors	r3, r1
    e14e:	429a      	cmp	r2, r3
    e150:	d126      	bne.n	e1a0 <edbg_eui_read_eui64+0x140>
    e152:	e00f      	b.n	e174 <edbg_eui_read_eui64+0x114>
				PRINTF("I2C Slave Not Available");
    e154:	4824      	ldr	r0, [pc, #144]	; (e1e8 <edbg_eui_read_eui64+0x188>)
    e156:	4b25      	ldr	r3, [pc, #148]	; (e1ec <edbg_eui_read_eui64+0x18c>)
    e158:	4798      	blx	r3
				break;
    e15a:	e002      	b.n	e162 <edbg_eui_read_eui64+0x102>
		PRINTF("Timeout 1\n");
    e15c:	4824      	ldr	r0, [pc, #144]	; (e1f0 <edbg_eui_read_eui64+0x190>)
    e15e:	4b25      	ldr	r3, [pc, #148]	; (e1f4 <edbg_eui_read_eui64+0x194>)
    e160:	4798      	blx	r3
  packet.data = readbuf;
    e162:	4b1e      	ldr	r3, [pc, #120]	; (e1dc <edbg_eui_read_eui64+0x17c>)
    e164:	9301      	str	r3, [sp, #4]
  packet.data_length = sizeof(readbuf);
    e166:	2380      	movs	r3, #128	; 0x80
    e168:	005b      	lsls	r3, r3, #1
    e16a:	466a      	mov	r2, sp
    e16c:	8053      	strh	r3, [r2, #2]
  i2c_master_reset(&i2c_master_instance);
    e16e:	4816      	ldr	r0, [pc, #88]	; (e1c8 <edbg_eui_read_eui64+0x168>)
    e170:	4b1c      	ldr	r3, [pc, #112]	; (e1e4 <edbg_eui_read_eui64+0x184>)
    e172:	4798      	blx	r3
  {
	  unsigned int seed;
	  seed = ((*S_NO_WORD0) ^ (*S_NO_WORD1) ^ (*S_NO_WORD2) ^ (*S_NO_WORD3));
    e174:	4b20      	ldr	r3, [pc, #128]	; (e1f8 <edbg_eui_read_eui64+0x198>)
    e176:	6818      	ldr	r0, [r3, #0]
    e178:	4b20      	ldr	r3, [pc, #128]	; (e1fc <edbg_eui_read_eui64+0x19c>)
    e17a:	681b      	ldr	r3, [r3, #0]
    e17c:	4058      	eors	r0, r3
    e17e:	4b20      	ldr	r3, [pc, #128]	; (e200 <edbg_eui_read_eui64+0x1a0>)
    e180:	681b      	ldr	r3, [r3, #0]
    e182:	4058      	eors	r0, r3
    e184:	4b1f      	ldr	r3, [pc, #124]	; (e204 <edbg_eui_read_eui64+0x1a4>)
    e186:	681b      	ldr	r3, [r3, #0]
    e188:	4058      	eors	r0, r3
	  srand(seed);
    e18a:	4b1f      	ldr	r3, [pc, #124]	; (e208 <edbg_eui_read_eui64+0x1a8>)
    e18c:	4798      	blx	r3
    e18e:	4c13      	ldr	r4, [pc, #76]	; (e1dc <edbg_eui_read_eui64+0x17c>)
    e190:	0026      	movs	r6, r4
    e192:	3608      	adds	r6, #8
	  //printf("\r\n Generating Random MAC \r\n");
	  for (uint8_t i = 0; i < 8; i++) {
		  *(readbuf+i) = rand();
    e194:	4d1d      	ldr	r5, [pc, #116]	; (e20c <edbg_eui_read_eui64+0x1ac>)
    e196:	47a8      	blx	r5
    e198:	7020      	strb	r0, [r4, #0]
    e19a:	3401      	adds	r4, #1
	  for (uint8_t i = 0; i < 8; i++) {
    e19c:	42a6      	cmp	r6, r4
    e19e:	d1fa      	bne.n	e196 <edbg_eui_read_eui64+0x136>
	  }
	  
  }
  return readbuf;
}
    e1a0:	480e      	ldr	r0, [pc, #56]	; (e1dc <edbg_eui_read_eui64+0x17c>)
    e1a2:	b010      	add	sp, #64	; 0x40
    e1a4:	bd70      	pop	{r4, r5, r6, pc}
			PRINTF("I2C Slave Not Available");
    e1a6:	4810      	ldr	r0, [pc, #64]	; (e1e8 <edbg_eui_read_eui64+0x188>)
    e1a8:	4b10      	ldr	r3, [pc, #64]	; (e1ec <edbg_eui_read_eui64+0x18c>)
    e1aa:	4798      	blx	r3
  i2c_master_reset(&i2c_master_instance);
    e1ac:	4806      	ldr	r0, [pc, #24]	; (e1c8 <edbg_eui_read_eui64+0x168>)
    e1ae:	4b0d      	ldr	r3, [pc, #52]	; (e1e4 <edbg_eui_read_eui64+0x184>)
    e1b0:	4798      	blx	r3
    e1b2:	e7df      	b.n	e174 <edbg_eui_read_eui64+0x114>
			PRINTF("Timeout 2\n");
    e1b4:	4816      	ldr	r0, [pc, #88]	; (e210 <edbg_eui_read_eui64+0x1b0>)
    e1b6:	4b0f      	ldr	r3, [pc, #60]	; (e1f4 <edbg_eui_read_eui64+0x194>)
    e1b8:	4798      	blx	r3
			break;
    e1ba:	e7f7      	b.n	e1ac <edbg_eui_read_eui64+0x14c>
    e1bc:	00000d48 	.word	0x00000d48
    e1c0:	00100002 	.word	0x00100002
    e1c4:	00110002 	.word	0x00110002
    e1c8:	20003100 	.word	0x20003100
    e1cc:	42000400 	.word	0x42000400
    e1d0:	000052bd 	.word	0x000052bd
    e1d4:	00019278 	.word	0x00019278
    e1d8:	000058e9 	.word	0x000058e9
    e1dc:	20003000 	.word	0x20003000
    e1e0:	000058d5 	.word	0x000058d5
    e1e4:	00005599 	.word	0x00005599
    e1e8:	00019284 	.word	0x00019284
    e1ec:	00016fc9 	.word	0x00016fc9
    e1f0:	0001929c 	.word	0x0001929c
    e1f4:	000170e5 	.word	0x000170e5
    e1f8:	0080a00c 	.word	0x0080a00c
    e1fc:	0080a040 	.word	0x0080a040
    e200:	0080a044 	.word	0x0080a044
    e204:	0080a048 	.word	0x0080a048
    e208:	000170f9 	.word	0x000170f9
    e20c:	00017155 	.word	0x00017155
    e210:	000192a8 	.word	0x000192a8

0000e214 <LORAWAN_TxHandler>:
    e214:	b5f0      	push	{r4, r5, r6, r7, lr}
    e216:	b087      	sub	sp, #28
    e218:	466b      	mov	r3, sp
    e21a:	2501      	movs	r5, #1
    e21c:	4c2f      	ldr	r4, [pc, #188]	; (e2dc <LORAWAN_TxHandler+0xc8>)
    e21e:	701d      	strb	r5, [r3, #0]
    e220:	0023      	movs	r3, r4
    e222:	466a      	mov	r2, sp
    e224:	33e9      	adds	r3, #233	; 0xe9
    e226:	781b      	ldrb	r3, [r3, #0]
    e228:	4669      	mov	r1, sp
    e22a:	7053      	strb	r3, [r2, #1]
    e22c:	0023      	movs	r3, r4
    e22e:	33e7      	adds	r3, #231	; 0xe7
    e230:	781b      	ldrb	r3, [r3, #0]
    e232:	202e      	movs	r0, #46	; 0x2e
    e234:	7093      	strb	r3, [r2, #2]
    e236:	aa03      	add	r2, sp, #12
    e238:	4b29      	ldr	r3, [pc, #164]	; (e2e0 <LORAWAN_TxHandler+0xcc>)
    e23a:	4798      	blx	r3
    e23c:	2808      	cmp	r0, #8
    e23e:	d004      	beq.n	e24a <LORAWAN_TxHandler+0x36>
    e240:	4b28      	ldr	r3, [pc, #160]	; (e2e4 <LORAWAN_TxHandler+0xd0>)
    e242:	4798      	blx	r3
    e244:	2000      	movs	r0, #0
    e246:	b007      	add	sp, #28
    e248:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e24a:	0023      	movs	r3, r4
    e24c:	33fd      	adds	r3, #253	; 0xfd
    e24e:	781b      	ldrb	r3, [r3, #0]
    e250:	ae01      	add	r6, sp, #4
    e252:	2b04      	cmp	r3, #4
    e254:	d103      	bne.n	e25e <LORAWAN_TxHandler+0x4a>
    e256:	0030      	movs	r0, r6
    e258:	4b23      	ldr	r3, [pc, #140]	; (e2e8 <LORAWAN_TxHandler+0xd4>)
    e25a:	7035      	strb	r5, [r6, #0]
    e25c:	4798      	blx	r3
    e25e:	4b23      	ldr	r3, [pc, #140]	; (e2ec <LORAWAN_TxHandler+0xd8>)
    e260:	9803      	ldr	r0, [sp, #12]
    e262:	9904      	ldr	r1, [sp, #16]
    e264:	9a05      	ldr	r2, [sp, #20]
    e266:	4798      	blx	r3
    e268:	0023      	movs	r3, r4
    e26a:	33fc      	adds	r3, #252	; 0xfc
    e26c:	68dd      	ldr	r5, [r3, #12]
    e26e:	4f20      	ldr	r7, [pc, #128]	; (e2f0 <LORAWAN_TxHandler+0xdc>)
    e270:	4b20      	ldr	r3, [pc, #128]	; (e2f4 <LORAWAN_TxHandler+0xe0>)
    e272:	2d00      	cmp	r5, #0
    e274:	d023      	beq.n	e2be <LORAWAN_TxHandler+0xaa>
    e276:	2201      	movs	r2, #1
    e278:	54e2      	strb	r2, [r4, r3]
    e27a:	7828      	ldrb	r0, [r5, #0]
    e27c:	7a2b      	ldrb	r3, [r5, #8]
    e27e:	1e42      	subs	r2, r0, #1
    e280:	4190      	sbcs	r0, r2
    e282:	7869      	ldrb	r1, [r5, #1]
    e284:	686a      	ldr	r2, [r5, #4]
    e286:	b2c0      	uxtb	r0, r0
    e288:	47b8      	blx	r7
    e28a:	0023      	movs	r3, r4
    e28c:	33ce      	adds	r3, #206	; 0xce
    e28e:	881b      	ldrh	r3, [r3, #0]
    e290:	0030      	movs	r0, r6
    e292:	7033      	strb	r3, [r6, #0]
    e294:	4b18      	ldr	r3, [pc, #96]	; (e2f8 <LORAWAN_TxHandler+0xe4>)
    e296:	6073      	str	r3, [r6, #4]
    e298:	4b18      	ldr	r3, [pc, #96]	; (e2fc <LORAWAN_TxHandler+0xe8>)
    e29a:	4798      	blx	r3
    e29c:	2800      	cmp	r0, #0
    e29e:	d114      	bne.n	e2ca <LORAWAN_TxHandler+0xb6>
    e2a0:	0021      	movs	r1, r4
    e2a2:	220e      	movs	r2, #14
    e2a4:	3184      	adds	r1, #132	; 0x84
    e2a6:	780b      	ldrb	r3, [r1, #0]
    e2a8:	4393      	bics	r3, r2
    e2aa:	001a      	movs	r2, r3
    e2ac:	2302      	movs	r3, #2
    e2ae:	4313      	orrs	r3, r2
    e2b0:	700b      	strb	r3, [r1, #0]
    e2b2:	2208      	movs	r2, #8
    e2b4:	3494      	adds	r4, #148	; 0x94
    e2b6:	7823      	ldrb	r3, [r4, #0]
    e2b8:	4393      	bics	r3, r2
    e2ba:	7023      	strb	r3, [r4, #0]
    e2bc:	e7c2      	b.n	e244 <LORAWAN_TxHandler+0x30>
    e2be:	54e5      	strb	r5, [r4, r3]
    e2c0:	002a      	movs	r2, r5
    e2c2:	002b      	movs	r3, r5
    e2c4:	0029      	movs	r1, r5
    e2c6:	0028      	movs	r0, r5
    e2c8:	e7de      	b.n	e288 <LORAWAN_TxHandler+0x74>
    e2ca:	0022      	movs	r2, r4
    e2cc:	2120      	movs	r1, #32
    e2ce:	3294      	adds	r2, #148	; 0x94
    e2d0:	7813      	ldrb	r3, [r2, #0]
    e2d2:	438b      	bics	r3, r1
    e2d4:	7013      	strb	r3, [r2, #0]
    e2d6:	4b03      	ldr	r3, [pc, #12]	; (e2e4 <LORAWAN_TxHandler+0xd0>)
    e2d8:	4798      	blx	r3
    e2da:	e7ea      	b.n	e2b2 <LORAWAN_TxHandler+0x9e>
    e2dc:	20003348 	.word	0x20003348
    e2e0:	0000d06d 	.word	0x0000d06d
    e2e4:	00011059 	.word	0x00011059
    e2e8:	0000f789 	.word	0x0000f789
    e2ec:	00010bf1 	.word	0x00010bf1
    e2f0:	00012b7d 	.word	0x00012b7d
    e2f4:	0000022a 	.word	0x0000022a
    e2f8:	200035a0 	.word	0x200035a0
    e2fc:	0000eead 	.word	0x0000eead

0000e300 <LORAWAN_JoinReqHandler>:
    e300:	b530      	push	{r4, r5, lr}
    e302:	b087      	sub	sp, #28
    e304:	466a      	mov	r2, sp
    e306:	2300      	movs	r3, #0
    e308:	4c25      	ldr	r4, [pc, #148]	; (e3a0 <LORAWAN_JoinReqHandler+0xa0>)
    e30a:	7013      	strb	r3, [r2, #0]
    e30c:	0023      	movs	r3, r4
    e30e:	33e9      	adds	r3, #233	; 0xe9
    e310:	781b      	ldrb	r3, [r3, #0]
    e312:	7053      	strb	r3, [r2, #1]
    e314:	0023      	movs	r3, r4
    e316:	33e7      	adds	r3, #231	; 0xe7
    e318:	781b      	ldrb	r3, [r3, #0]
    e31a:	7093      	strb	r3, [r2, #2]
    e31c:	0023      	movs	r3, r4
    e31e:	33ff      	adds	r3, #255	; 0xff
    e320:	7f5b      	ldrb	r3, [r3, #29]
    e322:	069b      	lsls	r3, r3, #26
    e324:	d507      	bpl.n	e336 <LORAWAN_JoinReqHandler+0x36>
    e326:	6f63      	ldr	r3, [r4, #116]	; 0x74
    e328:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    e32a:	4313      	orrs	r3, r2
    e32c:	d103      	bne.n	e336 <LORAWAN_JoinReqHandler+0x36>
    e32e:	0023      	movs	r3, r4
    e330:	2201      	movs	r2, #1
    e332:	3380      	adds	r3, #128	; 0x80
    e334:	701a      	strb	r2, [r3, #0]
    e336:	aa03      	add	r2, sp, #12
    e338:	4669      	mov	r1, sp
    e33a:	202e      	movs	r0, #46	; 0x2e
    e33c:	4b19      	ldr	r3, [pc, #100]	; (e3a4 <LORAWAN_JoinReqHandler+0xa4>)
    e33e:	4798      	blx	r3
    e340:	2808      	cmp	r0, #8
    e342:	d004      	beq.n	e34e <LORAWAN_JoinReqHandler+0x4e>
    e344:	4b18      	ldr	r3, [pc, #96]	; (e3a8 <LORAWAN_JoinReqHandler+0xa8>)
    e346:	4798      	blx	r3
    e348:	2000      	movs	r0, #0
    e34a:	b007      	add	sp, #28
    e34c:	bd30      	pop	{r4, r5, pc}
    e34e:	4b17      	ldr	r3, [pc, #92]	; (e3ac <LORAWAN_JoinReqHandler+0xac>)
    e350:	9803      	ldr	r0, [sp, #12]
    e352:	9904      	ldr	r1, [sp, #16]
    e354:	9a05      	ldr	r2, [sp, #20]
    e356:	4798      	blx	r3
    e358:	0023      	movs	r3, r4
    e35a:	33fd      	adds	r3, #253	; 0xfd
    e35c:	781b      	ldrb	r3, [r3, #0]
    e35e:	ad01      	add	r5, sp, #4
    e360:	2b04      	cmp	r3, #4
    e362:	d104      	bne.n	e36e <LORAWAN_JoinReqHandler+0x6e>
    e364:	3b03      	subs	r3, #3
    e366:	702b      	strb	r3, [r5, #0]
    e368:	0028      	movs	r0, r5
    e36a:	4b11      	ldr	r3, [pc, #68]	; (e3b0 <LORAWAN_JoinReqHandler+0xb0>)
    e36c:	4798      	blx	r3
    e36e:	2200      	movs	r2, #0
    e370:	4b10      	ldr	r3, [pc, #64]	; (e3b4 <LORAWAN_JoinReqHandler+0xb4>)
    e372:	54e2      	strb	r2, [r4, r3]
    e374:	4b10      	ldr	r3, [pc, #64]	; (e3b8 <LORAWAN_JoinReqHandler+0xb8>)
    e376:	4798      	blx	r3
    e378:	4b10      	ldr	r3, [pc, #64]	; (e3bc <LORAWAN_JoinReqHandler+0xbc>)
    e37a:	7028      	strb	r0, [r5, #0]
    e37c:	606b      	str	r3, [r5, #4]
    e37e:	0028      	movs	r0, r5
    e380:	4b0f      	ldr	r3, [pc, #60]	; (e3c0 <LORAWAN_JoinReqHandler+0xc0>)
    e382:	4798      	blx	r3
    e384:	2800      	cmp	r0, #0
    e386:	d001      	beq.n	e38c <LORAWAN_JoinReqHandler+0x8c>
    e388:	201b      	movs	r0, #27
    e38a:	e7db      	b.n	e344 <LORAWAN_JoinReqHandler+0x44>
    e38c:	220e      	movs	r2, #14
    e38e:	3484      	adds	r4, #132	; 0x84
    e390:	7823      	ldrb	r3, [r4, #0]
    e392:	4393      	bics	r3, r2
    e394:	001a      	movs	r2, r3
    e396:	2302      	movs	r3, #2
    e398:	4313      	orrs	r3, r2
    e39a:	7023      	strb	r3, [r4, #0]
    e39c:	e7d4      	b.n	e348 <LORAWAN_JoinReqHandler+0x48>
    e39e:	46c0      	nop			; (mov r8, r8)
    e3a0:	20003348 	.word	0x20003348
    e3a4:	0000d06d 	.word	0x0000d06d
    e3a8:	000106b9 	.word	0x000106b9
    e3ac:	00010bf1 	.word	0x00010bf1
    e3b0:	0000f789 	.word	0x0000f789
    e3b4:	0000022a 	.word	0x0000022a
    e3b8:	00010ab5 	.word	0x00010ab5
    e3bc:	20003590 	.word	0x20003590
    e3c0:	0000eead 	.word	0x0000eead

0000e3c4 <LORAWAN_RxHandler>:
    e3c4:	b513      	push	{r0, r1, r4, lr}
    e3c6:	4b0c      	ldr	r3, [pc, #48]	; (e3f8 <LORAWAN_RxHandler+0x34>)
    e3c8:	781b      	ldrb	r3, [r3, #0]
    e3ca:	2b08      	cmp	r3, #8
    e3cc:	d011      	beq.n	e3f2 <LORAWAN_RxHandler+0x2e>
    e3ce:	2b10      	cmp	r3, #16
    e3d0:	d001      	beq.n	e3d6 <LORAWAN_RxHandler+0x12>
    e3d2:	2b01      	cmp	r3, #1
    e3d4:	d10b      	bne.n	e3ee <LORAWAN_RxHandler+0x2a>
    e3d6:	466b      	mov	r3, sp
    e3d8:	1c9c      	adds	r4, r3, #2
    e3da:	0021      	movs	r1, r4
    e3dc:	a801      	add	r0, sp, #4
    e3de:	4b07      	ldr	r3, [pc, #28]	; (e3fc <LORAWAN_RxHandler+0x38>)
    e3e0:	4798      	blx	r3
    e3e2:	9801      	ldr	r0, [sp, #4]
    e3e4:	2800      	cmp	r0, #0
    e3e6:	d002      	beq.n	e3ee <LORAWAN_RxHandler+0x2a>
    e3e8:	7821      	ldrb	r1, [r4, #0]
    e3ea:	4b05      	ldr	r3, [pc, #20]	; (e400 <LORAWAN_RxHandler+0x3c>)
    e3ec:	4798      	blx	r3
    e3ee:	2000      	movs	r0, #0
    e3f0:	bd16      	pop	{r1, r2, r4, pc}
    e3f2:	4b04      	ldr	r3, [pc, #16]	; (e404 <LORAWAN_RxHandler+0x40>)
    e3f4:	4798      	blx	r3
    e3f6:	e7fa      	b.n	e3ee <LORAWAN_RxHandler+0x2a>
    e3f8:	2000242b 	.word	0x2000242b
    e3fc:	0000f079 	.word	0x0000f079
    e400:	00011ad9 	.word	0x00011ad9
    e404:	000113ed 	.word	0x000113ed

0000e408 <LORAWAN_PostTask>:
    e408:	b510      	push	{r4, lr}
    e40a:	4b08      	ldr	r3, [pc, #32]	; (e42c <LORAWAN_PostTask+0x24>)
    e40c:	0004      	movs	r4, r0
    e40e:	4798      	blx	r3
    e410:	2201      	movs	r2, #1
    e412:	40a2      	lsls	r2, r4
    e414:	4906      	ldr	r1, [pc, #24]	; (e430 <LORAWAN_PostTask+0x28>)
    e416:	780b      	ldrb	r3, [r1, #0]
    e418:	4313      	orrs	r3, r2
    e41a:	b2db      	uxtb	r3, r3
    e41c:	700b      	strb	r3, [r1, #0]
    e41e:	4b05      	ldr	r3, [pc, #20]	; (e434 <LORAWAN_PostTask+0x2c>)
    e420:	4798      	blx	r3
    e422:	2004      	movs	r0, #4
    e424:	4b04      	ldr	r3, [pc, #16]	; (e438 <LORAWAN_PostTask+0x30>)
    e426:	4798      	blx	r3
    e428:	bd10      	pop	{r4, pc}
    e42a:	46c0      	nop			; (mov r8, r8)
    e42c:	0000cb81 	.word	0x0000cb81
    e430:	2000208a 	.word	0x2000208a
    e434:	0000cb8d 	.word	0x0000cb8d
    e438:	0000dbcd 	.word	0x0000dbcd

0000e43c <LORAWAN_TaskHandler>:
    e43c:	b570      	push	{r4, r5, r6, lr}
    e43e:	2601      	movs	r6, #1
    e440:	4d0e      	ldr	r5, [pc, #56]	; (e47c <LORAWAN_TaskHandler+0x40>)
    e442:	e015      	b.n	e470 <LORAWAN_TaskHandler+0x34>
    e444:	2400      	movs	r4, #0
    e446:	782b      	ldrb	r3, [r5, #0]
    e448:	4123      	asrs	r3, r4
    e44a:	4233      	tst	r3, r6
    e44c:	d00d      	beq.n	e46a <LORAWAN_TaskHandler+0x2e>
    e44e:	4b0c      	ldr	r3, [pc, #48]	; (e480 <LORAWAN_TaskHandler+0x44>)
    e450:	4798      	blx	r3
    e452:	0032      	movs	r2, r6
    e454:	40a2      	lsls	r2, r4
    e456:	782b      	ldrb	r3, [r5, #0]
    e458:	00a4      	lsls	r4, r4, #2
    e45a:	4393      	bics	r3, r2
    e45c:	702b      	strb	r3, [r5, #0]
    e45e:	4b09      	ldr	r3, [pc, #36]	; (e484 <LORAWAN_TaskHandler+0x48>)
    e460:	4798      	blx	r3
    e462:	4b09      	ldr	r3, [pc, #36]	; (e488 <LORAWAN_TaskHandler+0x4c>)
    e464:	58e3      	ldr	r3, [r4, r3]
    e466:	4798      	blx	r3
    e468:	e7ea      	b.n	e440 <LORAWAN_TaskHandler+0x4>
    e46a:	3401      	adds	r4, #1
    e46c:	2c03      	cmp	r4, #3
    e46e:	d1ea      	bne.n	e446 <LORAWAN_TaskHandler+0xa>
    e470:	7828      	ldrb	r0, [r5, #0]
    e472:	b2c0      	uxtb	r0, r0
    e474:	2800      	cmp	r0, #0
    e476:	d1e5      	bne.n	e444 <LORAWAN_TaskHandler+0x8>
    e478:	bd70      	pop	{r4, r5, r6, pc}
    e47a:	46c0      	nop			; (mov r8, r8)
    e47c:	2000208a 	.word	0x2000208a
    e480:	0000cb81 	.word	0x0000cb81
    e484:	0000cb8d 	.word	0x0000cb8d
    e488:	000192b4 	.word	0x000192b4

0000e48c <RADIO_GetAttr>:
    e48c:	b510      	push	{r4, lr}
    e48e:	000b      	movs	r3, r1
    e490:	281f      	cmp	r0, #31
    e492:	d900      	bls.n	e496 <RADIO_GetAttr+0xa>
    e494:	e069      	b.n	e56a <RADIO_GetAttr+0xde>
    e496:	f005 f96b 	bl	13770 <__gnu_thumb1_case_uqi>
    e49a:	1410      	.short	0x1410
    e49c:	68201c19 	.word	0x68201c19
    e4a0:	312e2a27 	.word	0x312e2a27
    e4a4:	3d3a3734 	.word	0x3d3a3734
    e4a8:	46434054 	.word	0x46434054
    e4ac:	68245149 	.word	0x68245149
    e4b0:	68686859 	.word	0x68686859
    e4b4:	5c686817 	.word	0x5c686817
    e4b8:	6360      	.short	0x6360
    e4ba:	4a2d      	ldr	r2, [pc, #180]	; (e570 <RADIO_GetAttr+0xe4>)
    e4bc:	7e12      	ldrb	r2, [r2, #24]
    e4be:	701a      	strb	r2, [r3, #0]
    e4c0:	e002      	b.n	e4c8 <RADIO_GetAttr+0x3c>
    e4c2:	4a2b      	ldr	r2, [pc, #172]	; (e570 <RADIO_GetAttr+0xe4>)
    e4c4:	6812      	ldr	r2, [r2, #0]
    e4c6:	601a      	str	r2, [r3, #0]
    e4c8:	2000      	movs	r0, #0
    e4ca:	bd10      	pop	{r4, pc}
    e4cc:	4a28      	ldr	r2, [pc, #160]	; (e570 <RADIO_GetAttr+0xe4>)
    e4ce:	6852      	ldr	r2, [r2, #4]
    e4d0:	e7f9      	b.n	e4c6 <RADIO_GetAttr+0x3a>
    e4d2:	4a27      	ldr	r2, [pc, #156]	; (e570 <RADIO_GetAttr+0xe4>)
    e4d4:	8a92      	ldrh	r2, [r2, #20]
    e4d6:	801a      	strh	r2, [r3, #0]
    e4d8:	e7f6      	b.n	e4c8 <RADIO_GetAttr+0x3c>
    e4da:	4a25      	ldr	r2, [pc, #148]	; (e570 <RADIO_GetAttr+0xe4>)
    e4dc:	3203      	adds	r2, #3
    e4de:	7fd2      	ldrb	r2, [r2, #31]
    e4e0:	e7ed      	b.n	e4be <RADIO_GetAttr+0x32>
    e4e2:	4a23      	ldr	r2, [pc, #140]	; (e570 <RADIO_GetAttr+0xe4>)
    e4e4:	3204      	adds	r2, #4
    e4e6:	e7fa      	b.n	e4de <RADIO_GetAttr+0x52>
    e4e8:	4a21      	ldr	r2, [pc, #132]	; (e570 <RADIO_GetAttr+0xe4>)
    e4ea:	3206      	adds	r2, #6
    e4ec:	e7f7      	b.n	e4de <RADIO_GetAttr+0x52>
    e4ee:	4a20      	ldr	r2, [pc, #128]	; (e570 <RADIO_GetAttr+0xe4>)
    e4f0:	3236      	adds	r2, #54	; 0x36
    e4f2:	7812      	ldrb	r2, [r2, #0]
    e4f4:	e7e3      	b.n	e4be <RADIO_GetAttr+0x32>
    e4f6:	4a1e      	ldr	r2, [pc, #120]	; (e570 <RADIO_GetAttr+0xe4>)
    e4f8:	3205      	adds	r2, #5
    e4fa:	e7f0      	b.n	e4de <RADIO_GetAttr+0x52>
    e4fc:	4a1c      	ldr	r2, [pc, #112]	; (e570 <RADIO_GetAttr+0xe4>)
    e4fe:	3234      	adds	r2, #52	; 0x34
    e500:	e7f7      	b.n	e4f2 <RADIO_GetAttr+0x66>
    e502:	4a1b      	ldr	r2, [pc, #108]	; (e570 <RADIO_GetAttr+0xe4>)
    e504:	8ad2      	ldrh	r2, [r2, #22]
    e506:	e7e6      	b.n	e4d6 <RADIO_GetAttr+0x4a>
    e508:	4a19      	ldr	r2, [pc, #100]	; (e570 <RADIO_GetAttr+0xe4>)
    e50a:	3233      	adds	r2, #51	; 0x33
    e50c:	e7f1      	b.n	e4f2 <RADIO_GetAttr+0x66>
    e50e:	4a18      	ldr	r2, [pc, #96]	; (e570 <RADIO_GetAttr+0xe4>)
    e510:	68d2      	ldr	r2, [r2, #12]
    e512:	e7d8      	b.n	e4c6 <RADIO_GetAttr+0x3a>
    e514:	4a16      	ldr	r2, [pc, #88]	; (e570 <RADIO_GetAttr+0xe4>)
    e516:	6892      	ldr	r2, [r2, #8]
    e518:	e7d5      	b.n	e4c6 <RADIO_GetAttr+0x3a>
    e51a:	4a15      	ldr	r2, [pc, #84]	; (e570 <RADIO_GetAttr+0xe4>)
    e51c:	3237      	adds	r2, #55	; 0x37
    e51e:	e7e8      	b.n	e4f2 <RADIO_GetAttr+0x66>
    e520:	4a13      	ldr	r2, [pc, #76]	; (e570 <RADIO_GetAttr+0xe4>)
    e522:	3238      	adds	r2, #56	; 0x38
    e524:	e7e5      	b.n	e4f2 <RADIO_GetAttr+0x66>
    e526:	4a12      	ldr	r2, [pc, #72]	; (e570 <RADIO_GetAttr+0xe4>)
    e528:	3239      	adds	r2, #57	; 0x39
    e52a:	e7e2      	b.n	e4f2 <RADIO_GetAttr+0x66>
    e52c:	4a10      	ldr	r2, [pc, #64]	; (e570 <RADIO_GetAttr+0xe4>)
    e52e:	4911      	ldr	r1, [pc, #68]	; (e574 <RADIO_GetAttr+0xe8>)
    e530:	3202      	adds	r2, #2
    e532:	7fd2      	ldrb	r2, [r2, #31]
    e534:	0018      	movs	r0, r3
    e536:	4b10      	ldr	r3, [pc, #64]	; (e578 <RADIO_GetAttr+0xec>)
    e538:	4798      	blx	r3
    e53a:	e7c5      	b.n	e4c8 <RADIO_GetAttr+0x3c>
    e53c:	4a0c      	ldr	r2, [pc, #48]	; (e570 <RADIO_GetAttr+0xe4>)
    e53e:	3202      	adds	r2, #2
    e540:	e7cd      	b.n	e4de <RADIO_GetAttr+0x52>
    e542:	4a0b      	ldr	r2, [pc, #44]	; (e570 <RADIO_GetAttr+0xe4>)
    e544:	3232      	adds	r2, #50	; 0x32
    e546:	7812      	ldrb	r2, [r2, #0]
    e548:	b252      	sxtb	r2, r2
    e54a:	e7b8      	b.n	e4be <RADIO_GetAttr+0x32>
    e54c:	4a08      	ldr	r2, [pc, #32]	; (e570 <RADIO_GetAttr+0xe4>)
    e54e:	3235      	adds	r2, #53	; 0x35
    e550:	e7cf      	b.n	e4f2 <RADIO_GetAttr+0x66>
    e552:	4907      	ldr	r1, [pc, #28]	; (e570 <RADIO_GetAttr+0xe4>)
    e554:	2206      	movs	r2, #6
    e556:	313c      	adds	r1, #60	; 0x3c
    e558:	e7ec      	b.n	e534 <RADIO_GetAttr+0xa8>
    e55a:	4a05      	ldr	r2, [pc, #20]	; (e570 <RADIO_GetAttr+0xe4>)
    e55c:	3254      	adds	r2, #84	; 0x54
    e55e:	e7c8      	b.n	e4f2 <RADIO_GetAttr+0x66>
    e560:	4a03      	ldr	r2, [pc, #12]	; (e570 <RADIO_GetAttr+0xe4>)
    e562:	3256      	adds	r2, #86	; 0x56
    e564:	2100      	movs	r1, #0
    e566:	5e52      	ldrsh	r2, [r2, r1]
    e568:	e7b5      	b.n	e4d6 <RADIO_GetAttr+0x4a>
    e56a:	2005      	movs	r0, #5
    e56c:	e7ad      	b.n	e4ca <RADIO_GetAttr+0x3e>
    e56e:	46c0      	nop			; (mov r8, r8)
    e570:	20002f50 	.word	0x20002f50
    e574:	20002f69 	.word	0x20002f69
    e578:	00016a0f 	.word	0x00016a0f

0000e57c <RADIO_SetAttr>:
    e57c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e57e:	4b71      	ldr	r3, [pc, #452]	; (e744 <RADIO_SetAttr+0x1c8>)
    e580:	0004      	movs	r4, r0
    e582:	000d      	movs	r5, r1
    e584:	4798      	blx	r3
    e586:	2304      	movs	r3, #4
    e588:	2801      	cmp	r0, #1
    e58a:	d11a      	bne.n	e5c2 <RADIO_SetAttr+0x46>
    e58c:	2c1d      	cmp	r4, #29
    e58e:	d900      	bls.n	e592 <RADIO_SetAttr+0x16>
    e590:	e0d5      	b.n	e73e <RADIO_SetAttr+0x1c2>
    e592:	0020      	movs	r0, r4
    e594:	f005 f8ec 	bl	13770 <__gnu_thumb1_case_uqi>
    e598:	605c4844 	.word	0x605c4844
    e59c:	7770d364 	.word	0x7770d364
    e5a0:	908c8480 	.word	0x908c8480
    e5a4:	a0d39c99 	.word	0xa0d39c99
    e5a8:	c2bab1a8 	.word	0xc2bab1a8
    e5ac:	d3cad369 	.word	0xd3cad369
    e5b0:	d30fd3d3 	.word	0xd30fd3d3
    e5b4:	17d3      	.short	0x17d3
    e5b6:	2303      	movs	r3, #3
    e5b8:	2d00      	cmp	r5, #0
    e5ba:	d002      	beq.n	e5c2 <RADIO_SetAttr+0x46>
    e5bc:	4b62      	ldr	r3, [pc, #392]	; (e748 <RADIO_SetAttr+0x1cc>)
    e5be:	611d      	str	r5, [r3, #16]
    e5c0:	2300      	movs	r3, #0
    e5c2:	0018      	movs	r0, r3
    e5c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e5c6:	796c      	ldrb	r4, [r5, #5]
    e5c8:	2c00      	cmp	r4, #0
    e5ca:	d109      	bne.n	e5e0 <RADIO_SetAttr+0x64>
    e5cc:	4b5e      	ldr	r3, [pc, #376]	; (e748 <RADIO_SetAttr+0x1cc>)
    e5ce:	001a      	movs	r2, r3
    e5d0:	649c      	str	r4, [r3, #72]	; 0x48
    e5d2:	879c      	strh	r4, [r3, #60]	; 0x3c
    e5d4:	87dc      	strh	r4, [r3, #62]	; 0x3e
    e5d6:	3240      	adds	r2, #64	; 0x40
    e5d8:	3341      	adds	r3, #65	; 0x41
    e5da:	7014      	strb	r4, [r2, #0]
    e5dc:	701c      	strb	r4, [r3, #0]
    e5de:	e7ef      	b.n	e5c0 <RADIO_SetAttr+0x44>
    e5e0:	882f      	ldrh	r7, [r5, #0]
    e5e2:	2303      	movs	r3, #3
    e5e4:	2f00      	cmp	r7, #0
    e5e6:	d0ec      	beq.n	e5c2 <RADIO_SetAttr+0x46>
    e5e8:	792e      	ldrb	r6, [r5, #4]
    e5ea:	2e00      	cmp	r6, #0
    e5ec:	d0e9      	beq.n	e5c2 <RADIO_SetAttr+0x46>
    e5ee:	20fa      	movs	r0, #250	; 0xfa
    e5f0:	2202      	movs	r2, #2
    e5f2:	5eab      	ldrsh	r3, [r5, r2]
    e5f4:	0080      	lsls	r0, r0, #2
    e5f6:	0031      	movs	r1, r6
    e5f8:	9301      	str	r3, [sp, #4]
    e5fa:	4378      	muls	r0, r7
    e5fc:	4b53      	ldr	r3, [pc, #332]	; (e74c <RADIO_SetAttr+0x1d0>)
    e5fe:	4798      	blx	r3
    e600:	4b53      	ldr	r3, [pc, #332]	; (e750 <RADIO_SetAttr+0x1d4>)
    e602:	4798      	blx	r3
    e604:	4b53      	ldr	r3, [pc, #332]	; (e754 <RADIO_SetAttr+0x1d8>)
    e606:	4798      	blx	r3
    e608:	466b      	mov	r3, sp
    e60a:	4d4f      	ldr	r5, [pc, #316]	; (e748 <RADIO_SetAttr+0x1cc>)
    e60c:	889b      	ldrh	r3, [r3, #4]
    e60e:	64a8      	str	r0, [r5, #72]	; 0x48
    e610:	87eb      	strh	r3, [r5, #62]	; 0x3e
    e612:	002b      	movs	r3, r5
    e614:	87af      	strh	r7, [r5, #60]	; 0x3c
    e616:	3340      	adds	r3, #64	; 0x40
    e618:	3541      	adds	r5, #65	; 0x41
    e61a:	701e      	strb	r6, [r3, #0]
    e61c:	702c      	strb	r4, [r5, #0]
    e61e:	e7cf      	b.n	e5c0 <RADIO_SetAttr+0x44>
    e620:	782a      	ldrb	r2, [r5, #0]
    e622:	4b49      	ldr	r3, [pc, #292]	; (e748 <RADIO_SetAttr+0x1cc>)
    e624:	761a      	strb	r2, [r3, #24]
    e626:	e7cb      	b.n	e5c0 <RADIO_SetAttr+0x44>
    e628:	4b4b      	ldr	r3, [pc, #300]	; (e758 <RADIO_SetAttr+0x1dc>)
    e62a:	682a      	ldr	r2, [r5, #0]
    e62c:	18d1      	adds	r1, r2, r3
    e62e:	4b4b      	ldr	r3, [pc, #300]	; (e75c <RADIO_SetAttr+0x1e0>)
    e630:	4299      	cmp	r1, r3
    e632:	d90a      	bls.n	e64a <RADIO_SetAttr+0xce>
    e634:	4b4a      	ldr	r3, [pc, #296]	; (e760 <RADIO_SetAttr+0x1e4>)
    e636:	494b      	ldr	r1, [pc, #300]	; (e764 <RADIO_SetAttr+0x1e8>)
    e638:	18d3      	adds	r3, r2, r3
    e63a:	428b      	cmp	r3, r1
    e63c:	d905      	bls.n	e64a <RADIO_SetAttr+0xce>
    e63e:	494a      	ldr	r1, [pc, #296]	; (e768 <RADIO_SetAttr+0x1ec>)
    e640:	484a      	ldr	r0, [pc, #296]	; (e76c <RADIO_SetAttr+0x1f0>)
    e642:	1851      	adds	r1, r2, r1
    e644:	2305      	movs	r3, #5
    e646:	4281      	cmp	r1, r0
    e648:	d8bb      	bhi.n	e5c2 <RADIO_SetAttr+0x46>
    e64a:	4b3f      	ldr	r3, [pc, #252]	; (e748 <RADIO_SetAttr+0x1cc>)
    e64c:	601a      	str	r2, [r3, #0]
    e64e:	e7b7      	b.n	e5c0 <RADIO_SetAttr+0x44>
    e650:	682a      	ldr	r2, [r5, #0]
    e652:	4b3d      	ldr	r3, [pc, #244]	; (e748 <RADIO_SetAttr+0x1cc>)
    e654:	605a      	str	r2, [r3, #4]
    e656:	e7b3      	b.n	e5c0 <RADIO_SetAttr+0x44>
    e658:	882a      	ldrh	r2, [r5, #0]
    e65a:	4b3b      	ldr	r3, [pc, #236]	; (e748 <RADIO_SetAttr+0x1cc>)
    e65c:	829a      	strh	r2, [r3, #20]
    e65e:	e7af      	b.n	e5c0 <RADIO_SetAttr+0x44>
    e660:	4b39      	ldr	r3, [pc, #228]	; (e748 <RADIO_SetAttr+0x1cc>)
    e662:	782a      	ldrb	r2, [r5, #0]
    e664:	3303      	adds	r3, #3
    e666:	77da      	strb	r2, [r3, #31]
    e668:	e7aa      	b.n	e5c0 <RADIO_SetAttr+0x44>
    e66a:	782a      	ldrb	r2, [r5, #0]
    e66c:	2305      	movs	r3, #5
    e66e:	2a01      	cmp	r2, #1
    e670:	d8a7      	bhi.n	e5c2 <RADIO_SetAttr+0x46>
    e672:	4b35      	ldr	r3, [pc, #212]	; (e748 <RADIO_SetAttr+0x1cc>)
    e674:	3304      	adds	r3, #4
    e676:	e7f6      	b.n	e666 <RADIO_SetAttr+0xea>
    e678:	782a      	ldrb	r2, [r5, #0]
    e67a:	2305      	movs	r3, #5
    e67c:	2a01      	cmp	r2, #1
    e67e:	d8a0      	bhi.n	e5c2 <RADIO_SetAttr+0x46>
    e680:	4b31      	ldr	r3, [pc, #196]	; (e748 <RADIO_SetAttr+0x1cc>)
    e682:	3306      	adds	r3, #6
    e684:	e7ef      	b.n	e666 <RADIO_SetAttr+0xea>
    e686:	782a      	ldrb	r2, [r5, #0]
    e688:	2305      	movs	r3, #5
    e68a:	1fd1      	subs	r1, r2, #7
    e68c:	2902      	cmp	r1, #2
    e68e:	d898      	bhi.n	e5c2 <RADIO_SetAttr+0x46>
    e690:	4b2d      	ldr	r3, [pc, #180]	; (e748 <RADIO_SetAttr+0x1cc>)
    e692:	3336      	adds	r3, #54	; 0x36
    e694:	701a      	strb	r2, [r3, #0]
    e696:	e793      	b.n	e5c0 <RADIO_SetAttr+0x44>
    e698:	4b2b      	ldr	r3, [pc, #172]	; (e748 <RADIO_SetAttr+0x1cc>)
    e69a:	782a      	ldrb	r2, [r5, #0]
    e69c:	3305      	adds	r3, #5
    e69e:	e7e2      	b.n	e666 <RADIO_SetAttr+0xea>
    e6a0:	782a      	ldrb	r2, [r5, #0]
    e6a2:	2305      	movs	r3, #5
    e6a4:	2a01      	cmp	r2, #1
    e6a6:	d900      	bls.n	e6aa <RADIO_SetAttr+0x12e>
    e6a8:	e78b      	b.n	e5c2 <RADIO_SetAttr+0x46>
    e6aa:	4b27      	ldr	r3, [pc, #156]	; (e748 <RADIO_SetAttr+0x1cc>)
    e6ac:	3334      	adds	r3, #52	; 0x34
    e6ae:	e7f1      	b.n	e694 <RADIO_SetAttr+0x118>
    e6b0:	882a      	ldrh	r2, [r5, #0]
    e6b2:	4b25      	ldr	r3, [pc, #148]	; (e748 <RADIO_SetAttr+0x1cc>)
    e6b4:	82da      	strh	r2, [r3, #22]
    e6b6:	e783      	b.n	e5c0 <RADIO_SetAttr+0x44>
    e6b8:	782a      	ldrb	r2, [r5, #0]
    e6ba:	2305      	movs	r3, #5
    e6bc:	1e51      	subs	r1, r2, #1
    e6be:	2903      	cmp	r1, #3
    e6c0:	d900      	bls.n	e6c4 <RADIO_SetAttr+0x148>
    e6c2:	e77e      	b.n	e5c2 <RADIO_SetAttr+0x46>
    e6c4:	4b20      	ldr	r3, [pc, #128]	; (e748 <RADIO_SetAttr+0x1cc>)
    e6c6:	3333      	adds	r3, #51	; 0x33
    e6c8:	e7e4      	b.n	e694 <RADIO_SetAttr+0x118>
    e6ca:	4b1f      	ldr	r3, [pc, #124]	; (e748 <RADIO_SetAttr+0x1cc>)
    e6cc:	682a      	ldr	r2, [r5, #0]
    e6ce:	60da      	str	r2, [r3, #12]
    e6d0:	682a      	ldr	r2, [r5, #0]
    e6d2:	4b1d      	ldr	r3, [pc, #116]	; (e748 <RADIO_SetAttr+0x1cc>)
    e6d4:	609a      	str	r2, [r3, #8]
    e6d6:	e773      	b.n	e5c0 <RADIO_SetAttr+0x44>
    e6d8:	782a      	ldrb	r2, [r5, #0]
    e6da:	2305      	movs	r3, #5
    e6dc:	2a03      	cmp	r2, #3
    e6de:	d900      	bls.n	e6e2 <RADIO_SetAttr+0x166>
    e6e0:	e76f      	b.n	e5c2 <RADIO_SetAttr+0x46>
    e6e2:	4b19      	ldr	r3, [pc, #100]	; (e748 <RADIO_SetAttr+0x1cc>)
    e6e4:	3337      	adds	r3, #55	; 0x37
    e6e6:	e7d5      	b.n	e694 <RADIO_SetAttr+0x118>
    e6e8:	782a      	ldrb	r2, [r5, #0]
    e6ea:	2305      	movs	r3, #5
    e6ec:	1e51      	subs	r1, r2, #1
    e6ee:	2916      	cmp	r1, #22
    e6f0:	d900      	bls.n	e6f4 <RADIO_SetAttr+0x178>
    e6f2:	e766      	b.n	e5c2 <RADIO_SetAttr+0x46>
    e6f4:	4b14      	ldr	r3, [pc, #80]	; (e748 <RADIO_SetAttr+0x1cc>)
    e6f6:	3338      	adds	r3, #56	; 0x38
    e6f8:	e7cc      	b.n	e694 <RADIO_SetAttr+0x118>
    e6fa:	782a      	ldrb	r2, [r5, #0]
    e6fc:	2305      	movs	r3, #5
    e6fe:	1e51      	subs	r1, r2, #1
    e700:	2916      	cmp	r1, #22
    e702:	d900      	bls.n	e706 <RADIO_SetAttr+0x18a>
    e704:	e75d      	b.n	e5c2 <RADIO_SetAttr+0x46>
    e706:	4b10      	ldr	r3, [pc, #64]	; (e748 <RADIO_SetAttr+0x1cc>)
    e708:	3339      	adds	r3, #57	; 0x39
    e70a:	e7c3      	b.n	e694 <RADIO_SetAttr+0x118>
    e70c:	4b0e      	ldr	r3, [pc, #56]	; (e748 <RADIO_SetAttr+0x1cc>)
    e70e:	0029      	movs	r1, r5
    e710:	3302      	adds	r3, #2
    e712:	7fda      	ldrb	r2, [r3, #31]
    e714:	4816      	ldr	r0, [pc, #88]	; (e770 <RADIO_SetAttr+0x1f4>)
    e716:	4b17      	ldr	r3, [pc, #92]	; (e774 <RADIO_SetAttr+0x1f8>)
    e718:	4798      	blx	r3
    e71a:	e751      	b.n	e5c0 <RADIO_SetAttr+0x44>
    e71c:	782b      	ldrb	r3, [r5, #0]
    e71e:	1c1a      	adds	r2, r3, #0
    e720:	2b08      	cmp	r3, #8
    e722:	d900      	bls.n	e726 <RADIO_SetAttr+0x1aa>
    e724:	2208      	movs	r2, #8
    e726:	4b08      	ldr	r3, [pc, #32]	; (e748 <RADIO_SetAttr+0x1cc>)
    e728:	3302      	adds	r3, #2
    e72a:	e79c      	b.n	e666 <RADIO_SetAttr+0xea>
    e72c:	2305      	movs	r3, #5
    e72e:	782a      	ldrb	r2, [r5, #0]
    e730:	1fd1      	subs	r1, r2, #7
    e732:	4299      	cmp	r1, r3
    e734:	d900      	bls.n	e738 <RADIO_SetAttr+0x1bc>
    e736:	e744      	b.n	e5c2 <RADIO_SetAttr+0x46>
    e738:	4b03      	ldr	r3, [pc, #12]	; (e748 <RADIO_SetAttr+0x1cc>)
    e73a:	3335      	adds	r3, #53	; 0x35
    e73c:	e7aa      	b.n	e694 <RADIO_SetAttr+0x118>
    e73e:	2305      	movs	r3, #5
    e740:	e73f      	b.n	e5c2 <RADIO_SetAttr+0x46>
    e742:	46c0      	nop			; (mov r8, r8)
    e744:	0000ee91 	.word	0x0000ee91
    e748:	20002f50 	.word	0x20002f50
    e74c:	000138c1 	.word	0x000138c1
    e750:	00014b05 	.word	0x00014b05
    e754:	00013c1d 	.word	0x00013c1d
    e758:	f7d58bc0 	.word	0xf7d58bc0
    e75c:	0243d580 	.word	0x0243d580
    e760:	e78fe580 	.word	0xe78fe580
    e764:	06dac2c0 	.word	0x06dac2c0
    e768:	cc9eec80 	.word	0xcc9eec80
    e76c:	096ae380 	.word	0x096ae380
    e770:	20002f69 	.word	0x20002f69
    e774:	00016a0f 	.word	0x00016a0f

0000e778 <RADIO_Init>:
    e778:	b510      	push	{r4, lr}
    e77a:	4b0c      	ldr	r3, [pc, #48]	; (e7ac <RADIO_Init+0x34>)
    e77c:	4798      	blx	r3
    e77e:	4b0c      	ldr	r3, [pc, #48]	; (e7b0 <RADIO_Init+0x38>)
    e780:	201f      	movs	r0, #31
    e782:	4798      	blx	r3
    e784:	4c0b      	ldr	r4, [pc, #44]	; (e7b4 <RADIO_Init+0x3c>)
    e786:	490c      	ldr	r1, [pc, #48]	; (e7b8 <RADIO_Init+0x40>)
    e788:	2001      	movs	r0, #1
    e78a:	47a0      	blx	r4
    e78c:	490b      	ldr	r1, [pc, #44]	; (e7bc <RADIO_Init+0x44>)
    e78e:	2002      	movs	r0, #2
    e790:	47a0      	blx	r4
    e792:	490b      	ldr	r1, [pc, #44]	; (e7c0 <RADIO_Init+0x48>)
    e794:	2004      	movs	r0, #4
    e796:	47a0      	blx	r4
    e798:	490a      	ldr	r1, [pc, #40]	; (e7c4 <RADIO_Init+0x4c>)
    e79a:	2008      	movs	r0, #8
    e79c:	47a0      	blx	r4
    e79e:	490a      	ldr	r1, [pc, #40]	; (e7c8 <RADIO_Init+0x50>)
    e7a0:	2010      	movs	r0, #16
    e7a2:	47a0      	blx	r4
    e7a4:	4909      	ldr	r1, [pc, #36]	; (e7cc <RADIO_Init+0x54>)
    e7a6:	2020      	movs	r0, #32
    e7a8:	47a0      	blx	r4
    e7aa:	bd10      	pop	{r4, pc}
    e7ac:	0000f595 	.word	0x0000f595
    e7b0:	0000ee9d 	.word	0x0000ee9d
    e7b4:	0000ca9d 	.word	0x0000ca9d
    e7b8:	0000ec29 	.word	0x0000ec29
    e7bc:	0000eca1 	.word	0x0000eca1
    e7c0:	0000ed11 	.word	0x0000ed11
    e7c4:	0000ed61 	.word	0x0000ed61
    e7c8:	0000ed89 	.word	0x0000ed89
    e7cc:	0000edb1 	.word	0x0000edb1

0000e7d0 <Radio_WriteFrequency>:
    e7d0:	b570      	push	{r4, r5, r6, lr}
    e7d2:	490d      	ldr	r1, [pc, #52]	; (e808 <Radio_WriteFrequency+0x38>)
    e7d4:	4d0d      	ldr	r5, [pc, #52]	; (e80c <Radio_WriteFrequency+0x3c>)
    e7d6:	0006      	movs	r6, r0
    e7d8:	47a8      	blx	r5
    e7da:	4b0d      	ldr	r3, [pc, #52]	; (e810 <Radio_WriteFrequency+0x40>)
    e7dc:	0004      	movs	r4, r0
    e7de:	490a      	ldr	r1, [pc, #40]	; (e808 <Radio_WriteFrequency+0x38>)
    e7e0:	0030      	movs	r0, r6
    e7e2:	4798      	blx	r3
    e7e4:	0208      	lsls	r0, r1, #8
    e7e6:	4908      	ldr	r1, [pc, #32]	; (e808 <Radio_WriteFrequency+0x38>)
    e7e8:	47a8      	blx	r5
    e7ea:	0224      	lsls	r4, r4, #8
    e7ec:	1904      	adds	r4, r0, r4
    e7ee:	0c21      	lsrs	r1, r4, #16
    e7f0:	4d08      	ldr	r5, [pc, #32]	; (e814 <Radio_WriteFrequency+0x44>)
    e7f2:	b2c9      	uxtb	r1, r1
    e7f4:	2006      	movs	r0, #6
    e7f6:	47a8      	blx	r5
    e7f8:	0a21      	lsrs	r1, r4, #8
    e7fa:	b2c9      	uxtb	r1, r1
    e7fc:	2007      	movs	r0, #7
    e7fe:	47a8      	blx	r5
    e800:	b2e1      	uxtb	r1, r4
    e802:	2008      	movs	r0, #8
    e804:	47a8      	blx	r5
    e806:	bd70      	pop	{r4, r5, r6, pc}
    e808:	00003d09 	.word	0x00003d09
    e80c:	000137ad 	.word	0x000137ad
    e810:	000138b9 	.word	0x000138b9
    e814:	0000c9c9 	.word	0x0000c9c9

0000e818 <Radio_WriteConfiguration>:
    e818:	b5f0      	push	{r4, r5, r6, r7, lr}
    e81a:	4cb0      	ldr	r4, [pc, #704]	; (eadc <Radio_WriteConfiguration+0x2c4>)
    e81c:	2200      	movs	r2, #0
    e81e:	0023      	movs	r3, r4
    e820:	b085      	sub	sp, #20
    e822:	9002      	str	r0, [sp, #8]
    e824:	3334      	adds	r3, #52	; 0x34
    e826:	0010      	movs	r0, r2
    e828:	7819      	ldrb	r1, [r3, #0]
    e82a:	4bad      	ldr	r3, [pc, #692]	; (eae0 <Radio_WriteConfiguration+0x2c8>)
    e82c:	4798      	blx	r3
    e82e:	4bad      	ldr	r3, [pc, #692]	; (eae4 <Radio_WriteConfiguration+0x2cc>)
    e830:	6820      	ldr	r0, [r4, #0]
    e832:	4798      	blx	r3
    e834:	1ce3      	adds	r3, r4, #3
    e836:	1d62      	adds	r2, r4, #5
    e838:	7fdb      	ldrb	r3, [r3, #31]
    e83a:	7fd2      	ldrb	r2, [r2, #31]
    e83c:	b25b      	sxtb	r3, r3
    e83e:	4eaa      	ldr	r6, [pc, #680]	; (eae8 <Radio_WriteConfiguration+0x2d0>)
    e840:	4daa      	ldr	r5, [pc, #680]	; (eaec <Radio_WriteConfiguration+0x2d4>)
    e842:	2a00      	cmp	r2, #0
    e844:	d000      	beq.n	e848 <Radio_WriteConfiguration+0x30>
    e846:	e0fc      	b.n	ea42 <Radio_WriteConfiguration+0x22a>
    e848:	1c1f      	adds	r7, r3, #0
    e84a:	2b0f      	cmp	r3, #15
    e84c:	dc00      	bgt.n	e850 <Radio_WriteConfiguration+0x38>
    e84e:	e0ec      	b.n	ea2a <Radio_WriteConfiguration+0x212>
    e850:	270f      	movs	r7, #15
    e852:	b27b      	sxtb	r3, r7
    e854:	204d      	movs	r0, #77	; 0x4d
    e856:	9301      	str	r3, [sp, #4]
    e858:	47b0      	blx	r6
    e85a:	21f8      	movs	r1, #248	; 0xf8
    e85c:	4008      	ands	r0, r1
    e85e:	39f4      	subs	r1, #244	; 0xf4
    e860:	4301      	orrs	r1, r0
    e862:	204d      	movs	r0, #77	; 0x4d
    e864:	47a8      	blx	r5
    e866:	b27b      	sxtb	r3, r7
    e868:	2b00      	cmp	r3, #0
    e86a:	db00      	blt.n	e86e <Radio_WriteConfiguration+0x56>
    e86c:	e0e4      	b.n	ea38 <Radio_WriteConfiguration+0x220>
    e86e:	3703      	adds	r7, #3
    e870:	b2f9      	uxtb	r1, r7
    e872:	2720      	movs	r7, #32
    e874:	4339      	orrs	r1, r7
    e876:	2009      	movs	r0, #9
    e878:	47a8      	blx	r5
    e87a:	0023      	movs	r3, r4
    e87c:	3334      	adds	r3, #52	; 0x34
    e87e:	781f      	ldrb	r7, [r3, #0]
    e880:	2f01      	cmp	r7, #1
    e882:	d000      	beq.n	e886 <Radio_WriteConfiguration+0x6e>
    e884:	e144      	b.n	eb10 <Radio_WriteConfiguration+0x2f8>
    e886:	7e21      	ldrb	r1, [r4, #24]
    e888:	2039      	movs	r0, #57	; 0x39
    e88a:	47a8      	blx	r5
    e88c:	4b98      	ldr	r3, [pc, #608]	; (eaf0 <Radio_WriteConfiguration+0x2d8>)
    e88e:	201d      	movs	r0, #29
    e890:	7819      	ldrb	r1, [r3, #0]
    e892:	0023      	movs	r3, r4
    e894:	3333      	adds	r3, #51	; 0x33
    e896:	781b      	ldrb	r3, [r3, #0]
    e898:	0109      	lsls	r1, r1, #4
    e89a:	005b      	lsls	r3, r3, #1
    e89c:	4319      	orrs	r1, r3
    e89e:	1de3      	adds	r3, r4, #7
    e8a0:	7fdb      	ldrb	r3, [r3, #31]
    e8a2:	401f      	ands	r7, r3
    e8a4:	4339      	orrs	r1, r7
    e8a6:	b2c9      	uxtb	r1, r1
    e8a8:	47a8      	blx	r5
    e8aa:	1d23      	adds	r3, r4, #4
    e8ac:	7fd9      	ldrb	r1, [r3, #31]
    e8ae:	2304      	movs	r3, #4
    e8b0:	0089      	lsls	r1, r1, #2
    e8b2:	4019      	ands	r1, r3
    e8b4:	0023      	movs	r3, r4
    e8b6:	3335      	adds	r3, #53	; 0x35
    e8b8:	781b      	ldrb	r3, [r3, #0]
    e8ba:	201e      	movs	r0, #30
    e8bc:	011b      	lsls	r3, r3, #4
    e8be:	4319      	orrs	r1, r3
    e8c0:	9b02      	ldr	r3, [sp, #8]
    e8c2:	059b      	lsls	r3, r3, #22
    e8c4:	0f9b      	lsrs	r3, r3, #30
    e8c6:	4319      	orrs	r1, r3
    e8c8:	b2c9      	uxtb	r1, r1
    e8ca:	47a8      	blx	r5
    e8cc:	2300      	movs	r3, #0
    e8ce:	8ae1      	ldrh	r1, [r4, #22]
    e8d0:	4299      	cmp	r1, r3
    e8d2:	d011      	beq.n	e8f8 <Radio_WriteConfiguration+0xe0>
    e8d4:	4a86      	ldr	r2, [pc, #536]	; (eaf0 <Radio_WriteConfiguration+0x2d8>)
    e8d6:	7812      	ldrb	r2, [r2, #0]
    e8d8:	2a08      	cmp	r2, #8
    e8da:	d100      	bne.n	e8de <Radio_WriteConfiguration+0xc6>
    e8dc:	e0e4      	b.n	eaa8 <Radio_WriteConfiguration+0x290>
    e8de:	2a09      	cmp	r2, #9
    e8e0:	d100      	bne.n	e8e4 <Radio_WriteConfiguration+0xcc>
    e8e2:	e0e3      	b.n	eaac <Radio_WriteConfiguration+0x294>
    e8e4:	2a07      	cmp	r2, #7
    e8e6:	d000      	beq.n	e8ea <Radio_WriteConfiguration+0xd2>
    e8e8:	e0e3      	b.n	eab2 <Radio_WriteConfiguration+0x29a>
    e8ea:	337d      	adds	r3, #125	; 0x7d
    e8ec:	4359      	muls	r1, r3
    e8ee:	0023      	movs	r3, r4
    e8f0:	3335      	adds	r3, #53	; 0x35
    e8f2:	781b      	ldrb	r3, [r3, #0]
    e8f4:	40d9      	lsrs	r1, r3
    e8f6:	000b      	movs	r3, r1
    e8f8:	b2d9      	uxtb	r1, r3
    e8fa:	2024      	movs	r0, #36	; 0x24
    e8fc:	4d7b      	ldr	r5, [pc, #492]	; (eaec <Radio_WriteConfiguration+0x2d4>)
    e8fe:	47a8      	blx	r5
    e900:	466b      	mov	r3, sp
    e902:	201f      	movs	r0, #31
    e904:	7a19      	ldrb	r1, [r3, #8]
    e906:	47a8      	blx	r5
    e908:	2026      	movs	r0, #38	; 0x26
    e90a:	47b0      	blx	r6
    e90c:	0023      	movs	r3, r4
    e90e:	3335      	adds	r3, #53	; 0x35
    e910:	781b      	ldrb	r3, [r3, #0]
    e912:	2b0c      	cmp	r3, #12
    e914:	d105      	bne.n	e922 <Radio_WriteConfiguration+0x10a>
    e916:	0023      	movs	r3, r4
    e918:	3336      	adds	r3, #54	; 0x36
    e91a:	781b      	ldrb	r3, [r3, #0]
    e91c:	3b07      	subs	r3, #7
    e91e:	2b01      	cmp	r3, #1
    e920:	d906      	bls.n	e930 <Radio_WriteConfiguration+0x118>
    e922:	6b62      	ldr	r2, [r4, #52]	; 0x34
    e924:	4b73      	ldr	r3, [pc, #460]	; (eaf4 <Radio_WriteConfiguration+0x2dc>)
    e926:	4013      	ands	r3, r2
    e928:	4a73      	ldr	r2, [pc, #460]	; (eaf8 <Radio_WriteConfiguration+0x2e0>)
    e92a:	4293      	cmp	r3, r2
    e92c:	d000      	beq.n	e930 <Radio_WriteConfiguration+0x118>
    e92e:	e0c2      	b.n	eab6 <Radio_WriteConfiguration+0x29e>
    e930:	2108      	movs	r1, #8
    e932:	4308      	orrs	r0, r1
    e934:	b2c0      	uxtb	r0, r0
    e936:	2104      	movs	r1, #4
    e938:	4301      	orrs	r1, r0
    e93a:	2026      	movs	r0, #38	; 0x26
    e93c:	47a8      	blx	r5
    e93e:	2031      	movs	r0, #49	; 0x31
    e940:	47b0      	blx	r6
    e942:	21f8      	movs	r1, #248	; 0xf8
    e944:	4008      	ands	r0, r1
    e946:	39f5      	subs	r1, #245	; 0xf5
    e948:	4301      	orrs	r1, r0
    e94a:	2031      	movs	r0, #49	; 0x31
    e94c:	47a8      	blx	r5
    e94e:	210a      	movs	r1, #10
    e950:	2037      	movs	r0, #55	; 0x37
    e952:	47a8      	blx	r5
    e954:	0023      	movs	r3, r4
    e956:	3331      	adds	r3, #49	; 0x31
    e958:	781b      	ldrb	r3, [r3, #0]
    e95a:	2b12      	cmp	r3, #18
    e95c:	d11e      	bne.n	e99c <Radio_WriteConfiguration+0x184>
    e95e:	0023      	movs	r3, r4
    e960:	3336      	adds	r3, #54	; 0x36
    e962:	781b      	ldrb	r3, [r3, #0]
    e964:	3b07      	subs	r3, #7
    e966:	2b01      	cmp	r3, #1
    e968:	d80b      	bhi.n	e982 <Radio_WriteConfiguration+0x16a>
    e96a:	2031      	movs	r0, #49	; 0x31
    e96c:	47b0      	blx	r6
    e96e:	217f      	movs	r1, #127	; 0x7f
    e970:	4001      	ands	r1, r0
    e972:	2031      	movs	r0, #49	; 0x31
    e974:	47a8      	blx	r5
    e976:	2140      	movs	r1, #64	; 0x40
    e978:	202f      	movs	r0, #47	; 0x2f
    e97a:	47a8      	blx	r5
    e97c:	2100      	movs	r1, #0
    e97e:	2030      	movs	r0, #48	; 0x30
    e980:	47a8      	blx	r5
    e982:	0023      	movs	r3, r4
    e984:	3336      	adds	r3, #54	; 0x36
    e986:	781b      	ldrb	r3, [r3, #0]
    e988:	2b09      	cmp	r3, #9
    e98a:	d107      	bne.n	e99c <Radio_WriteConfiguration+0x184>
    e98c:	2031      	movs	r0, #49	; 0x31
    e98e:	47b0      	blx	r6
    e990:	2180      	movs	r1, #128	; 0x80
    e992:	4249      	negs	r1, r1
    e994:	4301      	orrs	r1, r0
    e996:	b2c9      	uxtb	r1, r1
    e998:	2031      	movs	r0, #49	; 0x31
    e99a:	47a8      	blx	r5
    e99c:	2033      	movs	r0, #51	; 0x33
    e99e:	47b0      	blx	r6
    e9a0:	1da3      	adds	r3, r4, #6
    e9a2:	7fd9      	ldrb	r1, [r3, #31]
    e9a4:	2340      	movs	r3, #64	; 0x40
    e9a6:	0189      	lsls	r1, r1, #6
    e9a8:	4398      	bics	r0, r3
    e9aa:	4019      	ands	r1, r3
    e9ac:	4301      	orrs	r1, r0
    e9ae:	b2c9      	uxtb	r1, r1
    e9b0:	2033      	movs	r0, #51	; 0x33
    e9b2:	47a8      	blx	r5
    e9b4:	8aa1      	ldrh	r1, [r4, #20]
    e9b6:	2020      	movs	r0, #32
    e9b8:	0a09      	lsrs	r1, r1, #8
    e9ba:	47a8      	blx	r5
    e9bc:	7d21      	ldrb	r1, [r4, #20]
    e9be:	2021      	movs	r0, #33	; 0x21
    e9c0:	47a8      	blx	r5
    e9c2:	2100      	movs	r1, #0
    e9c4:	200d      	movs	r0, #13
    e9c6:	47a8      	blx	r5
    e9c8:	2100      	movs	r1, #0
    e9ca:	200e      	movs	r0, #14
    e9cc:	47a8      	blx	r5
    e9ce:	2100      	movs	r1, #0
    e9d0:	200f      	movs	r0, #15
    e9d2:	47a8      	blx	r5
    e9d4:	0023      	movs	r3, r4
    e9d6:	3331      	adds	r3, #49	; 0x31
    e9d8:	781b      	ldrb	r3, [r3, #0]
    e9da:	2b12      	cmp	r3, #18
    e9dc:	d120      	bne.n	ea20 <Radio_WriteConfiguration+0x208>
    e9de:	0023      	movs	r3, r4
    e9e0:	3336      	adds	r3, #54	; 0x36
    e9e2:	781b      	ldrb	r3, [r3, #0]
    e9e4:	2b09      	cmp	r3, #9
    e9e6:	d000      	beq.n	e9ea <Radio_WriteConfiguration+0x1d2>
    e9e8:	e072      	b.n	ead0 <Radio_WriteConfiguration+0x2b8>
    e9ea:	4a44      	ldr	r2, [pc, #272]	; (eafc <Radio_WriteConfiguration+0x2e4>)
    e9ec:	6823      	ldr	r3, [r4, #0]
    e9ee:	1899      	adds	r1, r3, r2
    e9f0:	4a43      	ldr	r2, [pc, #268]	; (eb00 <Radio_WriteConfiguration+0x2e8>)
    e9f2:	4291      	cmp	r1, r2
    e9f4:	d862      	bhi.n	eabc <Radio_WriteConfiguration+0x2a4>
    e9f6:	2102      	movs	r1, #2
    e9f8:	2036      	movs	r0, #54	; 0x36
    e9fa:	47a8      	blx	r5
    e9fc:	2164      	movs	r1, #100	; 0x64
    e9fe:	203a      	movs	r0, #58	; 0x3a
    ea00:	47a8      	blx	r5
    ea02:	0023      	movs	r3, r4
    ea04:	3336      	adds	r3, #54	; 0x36
    ea06:	781b      	ldrb	r3, [r3, #0]
    ea08:	2165      	movs	r1, #101	; 0x65
    ea0a:	203a      	movs	r0, #58	; 0x3a
    ea0c:	2b09      	cmp	r3, #9
    ea0e:	d162      	bne.n	ead6 <Radio_WriteConfiguration+0x2be>
    ea10:	3406      	adds	r4, #6
    ea12:	7fe3      	ldrb	r3, [r4, #31]
    ea14:	2b01      	cmp	r3, #1
    ea16:	d15e      	bne.n	ead6 <Radio_WriteConfiguration+0x2be>
    ea18:	47a8      	blx	r5
    ea1a:	2119      	movs	r1, #25
    ea1c:	203b      	movs	r0, #59	; 0x3b
    ea1e:	47a8      	blx	r5
    ea20:	21ff      	movs	r1, #255	; 0xff
    ea22:	2012      	movs	r0, #18
    ea24:	47a8      	blx	r5
    ea26:	b005      	add	sp, #20
    ea28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ea2a:	b25b      	sxtb	r3, r3
    ea2c:	3303      	adds	r3, #3
    ea2e:	db00      	blt.n	ea32 <Radio_WriteConfiguration+0x21a>
    ea30:	e70f      	b.n	e852 <Radio_WriteConfiguration+0x3a>
    ea32:	4b34      	ldr	r3, [pc, #208]	; (eb04 <Radio_WriteConfiguration+0x2ec>)
    ea34:	781f      	ldrb	r7, [r3, #0]
    ea36:	e70c      	b.n	e852 <Radio_WriteConfiguration+0x3a>
    ea38:	2170      	movs	r1, #112	; 0x70
    ea3a:	9b01      	ldr	r3, [sp, #4]
    ea3c:	4319      	orrs	r1, r3
    ea3e:	b2c9      	uxtb	r1, r1
    ea40:	e719      	b.n	e876 <Radio_WriteConfiguration+0x5e>
    ea42:	2b01      	cmp	r3, #1
    ea44:	dd07      	ble.n	ea56 <Radio_WriteConfiguration+0x23e>
    ea46:	2714      	movs	r7, #20
    ea48:	2b13      	cmp	r3, #19
    ea4a:	dc06      	bgt.n	ea5a <Radio_WriteConfiguration+0x242>
    ea4c:	1c1f      	adds	r7, r3, #0
    ea4e:	2b11      	cmp	r3, #17
    ea50:	dd02      	ble.n	ea58 <Radio_WriteConfiguration+0x240>
    ea52:	2711      	movs	r7, #17
    ea54:	e000      	b.n	ea58 <Radio_WriteConfiguration+0x240>
    ea56:	2702      	movs	r7, #2
    ea58:	b27f      	sxtb	r7, r7
    ea5a:	200b      	movs	r0, #11
    ea5c:	47b0      	blx	r6
    ea5e:	9003      	str	r0, [sp, #12]
    ea60:	204d      	movs	r0, #77	; 0x4d
    ea62:	47b0      	blx	r6
    ea64:	2307      	movs	r3, #7
    ea66:	4398      	bics	r0, r3
    ea68:	b2c1      	uxtb	r1, r0
    ea6a:	2f14      	cmp	r7, #20
    ea6c:	d112      	bne.n	ea94 <Radio_WriteConfiguration+0x27c>
    ea6e:	4319      	orrs	r1, r3
    ea70:	9b03      	ldr	r3, [sp, #12]
    ea72:	37cb      	adds	r7, #203	; 0xcb
    ea74:	403b      	ands	r3, r7
    ea76:	001f      	movs	r7, r3
    ea78:	230f      	movs	r3, #15
    ea7a:	9301      	str	r3, [sp, #4]
    ea7c:	204d      	movs	r0, #77	; 0x4d
    ea7e:	47a8      	blx	r5
    ea80:	2180      	movs	r1, #128	; 0x80
    ea82:	9b01      	ldr	r3, [sp, #4]
    ea84:	4249      	negs	r1, r1
    ea86:	4319      	orrs	r1, r3
    ea88:	b2c9      	uxtb	r1, r1
    ea8a:	2009      	movs	r0, #9
    ea8c:	47a8      	blx	r5
    ea8e:	0039      	movs	r1, r7
    ea90:	200b      	movs	r0, #11
    ea92:	e6f1      	b.n	e878 <Radio_WriteConfiguration+0x60>
    ea94:	3f02      	subs	r7, #2
    ea96:	b27b      	sxtb	r3, r7
    ea98:	2720      	movs	r7, #32
    ea9a:	2004      	movs	r0, #4
    ea9c:	9301      	str	r3, [sp, #4]
    ea9e:	9b03      	ldr	r3, [sp, #12]
    eaa0:	4301      	orrs	r1, r0
    eaa2:	431f      	orrs	r7, r3
    eaa4:	b2ff      	uxtb	r7, r7
    eaa6:	e7e9      	b.n	ea7c <Radio_WriteConfiguration+0x264>
    eaa8:	23fa      	movs	r3, #250	; 0xfa
    eaaa:	e71f      	b.n	e8ec <Radio_WriteConfiguration+0xd4>
    eaac:	23fa      	movs	r3, #250	; 0xfa
    eaae:	005b      	lsls	r3, r3, #1
    eab0:	e71c      	b.n	e8ec <Radio_WriteConfiguration+0xd4>
    eab2:	0019      	movs	r1, r3
    eab4:	e71b      	b.n	e8ee <Radio_WriteConfiguration+0xd6>
    eab6:	21f7      	movs	r1, #247	; 0xf7
    eab8:	4008      	ands	r0, r1
    eaba:	e73c      	b.n	e936 <Radio_WriteConfiguration+0x11e>
    eabc:	4a12      	ldr	r2, [pc, #72]	; (eb08 <Radio_WriteConfiguration+0x2f0>)
    eabe:	189b      	adds	r3, r3, r2
    eac0:	4a12      	ldr	r2, [pc, #72]	; (eb0c <Radio_WriteConfiguration+0x2f4>)
    eac2:	4293      	cmp	r3, r2
    eac4:	d804      	bhi.n	ead0 <Radio_WriteConfiguration+0x2b8>
    eac6:	2102      	movs	r1, #2
    eac8:	2036      	movs	r0, #54	; 0x36
    eaca:	47a8      	blx	r5
    eacc:	217f      	movs	r1, #127	; 0x7f
    eace:	e796      	b.n	e9fe <Radio_WriteConfiguration+0x1e6>
    ead0:	2103      	movs	r1, #3
    ead2:	2036      	movs	r0, #54	; 0x36
    ead4:	e794      	b.n	ea00 <Radio_WriteConfiguration+0x1e8>
    ead6:	47a8      	blx	r5
    ead8:	211d      	movs	r1, #29
    eada:	e79f      	b.n	ea1c <Radio_WriteConfiguration+0x204>
    eadc:	20002f50 	.word	0x20002f50
    eae0:	0000dbf1 	.word	0x0000dbf1
    eae4:	0000e7d1 	.word	0x0000e7d1
    eae8:	0000c9f1 	.word	0x0000c9f1
    eaec:	0000c9c9 	.word	0x0000c9c9
    eaf0:	20002f86 	.word	0x20002f86
    eaf4:	00ffff00 	.word	0x00ffff00
    eaf8:	00070b00 	.word	0x00070b00
    eafc:	cc9eec80 	.word	0xcc9eec80
    eb00:	096ae380 	.word	0x096ae380
    eb04:	000192c0 	.word	0x000192c0
    eb08:	e78fe580 	.word	0xe78fe580
    eb0c:	06dac2c0 	.word	0x06dac2c0
    eb10:	6863      	ldr	r3, [r4, #4]
    eb12:	492c      	ldr	r1, [pc, #176]	; (ebc4 <Radio_WriteConfiguration+0x3ac>)
    eb14:	0218      	lsls	r0, r3, #8
    eb16:	4b2c      	ldr	r3, [pc, #176]	; (ebc8 <Radio_WriteConfiguration+0x3b0>)
    eb18:	4798      	blx	r3
    eb1a:	0007      	movs	r7, r0
    eb1c:	0a01      	lsrs	r1, r0, #8
    eb1e:	b2c9      	uxtb	r1, r1
    eb20:	2004      	movs	r0, #4
    eb22:	47a8      	blx	r5
    eb24:	b2f9      	uxtb	r1, r7
    eb26:	2005      	movs	r0, #5
    eb28:	47a8      	blx	r5
    eb2a:	4b27      	ldr	r3, [pc, #156]	; (ebc8 <Radio_WriteConfiguration+0x3b0>)
    eb2c:	68a1      	ldr	r1, [r4, #8]
    eb2e:	4827      	ldr	r0, [pc, #156]	; (ebcc <Radio_WriteConfiguration+0x3b4>)
    eb30:	4798      	blx	r3
    eb32:	0007      	movs	r7, r0
    eb34:	0a01      	lsrs	r1, r0, #8
    eb36:	b2c9      	uxtb	r1, r1
    eb38:	2002      	movs	r0, #2
    eb3a:	47a8      	blx	r5
    eb3c:	b2f9      	uxtb	r1, r7
    eb3e:	2003      	movs	r0, #3
    eb40:	47a8      	blx	r5
    eb42:	2100      	movs	r1, #0
    eb44:	205d      	movs	r0, #93	; 0x5d
    eb46:	47a8      	blx	r5
    eb48:	8aa1      	ldrh	r1, [r4, #20]
    eb4a:	2025      	movs	r0, #37	; 0x25
    eb4c:	0a09      	lsrs	r1, r1, #8
    eb4e:	47a8      	blx	r5
    eb50:	7d21      	ldrb	r1, [r4, #20]
    eb52:	2026      	movs	r0, #38	; 0x26
    eb54:	47a8      	blx	r5
    eb56:	219e      	movs	r1, #158	; 0x9e
    eb58:	200d      	movs	r0, #13
    eb5a:	47a8      	blx	r5
    eb5c:	21bf      	movs	r1, #191	; 0xbf
    eb5e:	2035      	movs	r0, #53	; 0x35
    eb60:	47a8      	blx	r5
    eb62:	200a      	movs	r0, #10
    eb64:	47b0      	blx	r6
    eb66:	0023      	movs	r3, r4
    eb68:	3337      	adds	r3, #55	; 0x37
    eb6a:	7819      	ldrb	r1, [r3, #0]
    eb6c:	2360      	movs	r3, #96	; 0x60
    eb6e:	0149      	lsls	r1, r1, #5
    eb70:	4398      	bics	r0, r3
    eb72:	4301      	orrs	r1, r0
    eb74:	b2c9      	uxtb	r1, r1
    eb76:	200a      	movs	r0, #10
    eb78:	47a8      	blx	r5
    eb7a:	1d23      	adds	r3, r4, #4
    eb7c:	7fdb      	ldrb	r3, [r3, #31]
    eb7e:	21c0      	movs	r1, #192	; 0xc0
    eb80:	2b00      	cmp	r3, #0
    eb82:	d000      	beq.n	eb86 <Radio_WriteConfiguration+0x36e>
    eb84:	3110      	adds	r1, #16
    eb86:	2030      	movs	r0, #48	; 0x30
    eb88:	47a8      	blx	r5
    eb8a:	2600      	movs	r6, #0
    eb8c:	1ca3      	adds	r3, r4, #2
    eb8e:	7fd9      	ldrb	r1, [r3, #31]
    eb90:	428e      	cmp	r6, r1
    eb92:	d30d      	bcc.n	ebb0 <Radio_WriteConfiguration+0x398>
    eb94:	2900      	cmp	r1, #0
    eb96:	d003      	beq.n	eba0 <Radio_WriteConfiguration+0x388>
    eb98:	2310      	movs	r3, #16
    eb9a:	3901      	subs	r1, #1
    eb9c:	4319      	orrs	r1, r3
    eb9e:	b2c9      	uxtb	r1, r1
    eba0:	2027      	movs	r0, #39	; 0x27
    eba2:	47a8      	blx	r5
    eba4:	21ff      	movs	r1, #255	; 0xff
    eba6:	203e      	movs	r0, #62	; 0x3e
    eba8:	47a8      	blx	r5
    ebaa:	21ff      	movs	r1, #255	; 0xff
    ebac:	203f      	movs	r0, #63	; 0x3f
    ebae:	e739      	b.n	ea24 <Radio_WriteConfiguration+0x20c>
    ebb0:	0030      	movs	r0, r6
    ebb2:	19a3      	adds	r3, r4, r6
    ebb4:	3028      	adds	r0, #40	; 0x28
    ebb6:	7e59      	ldrb	r1, [r3, #25]
    ebb8:	b2c0      	uxtb	r0, r0
    ebba:	3601      	adds	r6, #1
    ebbc:	47a8      	blx	r5
    ebbe:	b2f6      	uxtb	r6, r6
    ebc0:	e7e4      	b.n	eb8c <Radio_WriteConfiguration+0x374>
    ebc2:	46c0      	nop			; (mov r8, r8)
    ebc4:	00003d09 	.word	0x00003d09
    ebc8:	000137ad 	.word	0x000137ad
    ebcc:	01e84800 	.word	0x01e84800

0000ebd0 <RADIO_getMappingAndOpmode>:
    ebd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ebd2:	0006      	movs	r6, r0
    ebd4:	4d06      	ldr	r5, [pc, #24]	; (ebf0 <RADIO_getMappingAndOpmode+0x20>)
    ebd6:	2040      	movs	r0, #64	; 0x40
    ebd8:	001f      	movs	r7, r3
    ebda:	0014      	movs	r4, r2
    ebdc:	9101      	str	r1, [sp, #4]
    ebde:	47a8      	blx	r5
    ebe0:	4004      	ands	r4, r0
    ebe2:	413c      	asrs	r4, r7
    ebe4:	2001      	movs	r0, #1
    ebe6:	7034      	strb	r4, [r6, #0]
    ebe8:	47a8      	blx	r5
    ebea:	9b01      	ldr	r3, [sp, #4]
    ebec:	7018      	strb	r0, [r3, #0]
    ebee:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    ebf0:	0000c9f1 	.word	0x0000c9f1

0000ebf4 <RADIO_UnhandledInterrupt.part.0>:
    ebf4:	b510      	push	{r4, lr}
    ebf6:	21ff      	movs	r1, #255	; 0xff
    ebf8:	2012      	movs	r0, #18
    ebfa:	4b01      	ldr	r3, [pc, #4]	; (ec00 <RADIO_UnhandledInterrupt.part.0+0xc>)
    ebfc:	4798      	blx	r3
    ebfe:	bd10      	pop	{r4, pc}
    ec00:	0000c9c9 	.word	0x0000c9c9

0000ec04 <RADIO_UnhandledInterrupt>:
    ec04:	b510      	push	{r4, lr}
    ec06:	2801      	cmp	r0, #1
    ec08:	d102      	bne.n	ec10 <RADIO_UnhandledInterrupt+0xc>
    ec0a:	4b05      	ldr	r3, [pc, #20]	; (ec20 <RADIO_UnhandledInterrupt+0x1c>)
    ec0c:	4798      	blx	r3
    ec0e:	bd10      	pop	{r4, pc}
    ec10:	21ff      	movs	r1, #255	; 0xff
    ec12:	203e      	movs	r0, #62	; 0x3e
    ec14:	4c03      	ldr	r4, [pc, #12]	; (ec24 <RADIO_UnhandledInterrupt+0x20>)
    ec16:	47a0      	blx	r4
    ec18:	21ff      	movs	r1, #255	; 0xff
    ec1a:	203f      	movs	r0, #63	; 0x3f
    ec1c:	47a0      	blx	r4
    ec1e:	e7f6      	b.n	ec0e <RADIO_UnhandledInterrupt+0xa>
    ec20:	0000ebf5 	.word	0x0000ebf5
    ec24:	0000c9c9 	.word	0x0000c9c9

0000ec28 <RADIO_DIO0>:
    ec28:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ec2a:	466b      	mov	r3, sp
    ec2c:	1ddc      	adds	r4, r3, #7
    ec2e:	1d9d      	adds	r5, r3, #6
    ec30:	22c0      	movs	r2, #192	; 0xc0
    ec32:	2306      	movs	r3, #6
    ec34:	0028      	movs	r0, r5
    ec36:	0021      	movs	r1, r4
    ec38:	4e12      	ldr	r6, [pc, #72]	; (ec84 <RADIO_DIO0+0x5c>)
    ec3a:	47b0      	blx	r6
    ec3c:	7823      	ldrb	r3, [r4, #0]
    ec3e:	7828      	ldrb	r0, [r5, #0]
    ec40:	b25a      	sxtb	r2, r3
    ec42:	b2c0      	uxtb	r0, r0
    ec44:	2a00      	cmp	r2, #0
    ec46:	da0b      	bge.n	ec60 <RADIO_DIO0+0x38>
    ec48:	2800      	cmp	r0, #0
    ec4a:	d004      	beq.n	ec56 <RADIO_DIO0+0x2e>
    ec4c:	2801      	cmp	r0, #1
    ec4e:	d005      	beq.n	ec5c <RADIO_DIO0+0x34>
    ec50:	4b0d      	ldr	r3, [pc, #52]	; (ec88 <RADIO_DIO0+0x60>)
    ec52:	4798      	blx	r3
    ec54:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    ec56:	4b0d      	ldr	r3, [pc, #52]	; (ec8c <RADIO_DIO0+0x64>)
    ec58:	4798      	blx	r3
    ec5a:	e7fb      	b.n	ec54 <RADIO_DIO0+0x2c>
    ec5c:	4b0c      	ldr	r3, [pc, #48]	; (ec90 <RADIO_DIO0+0x68>)
    ec5e:	e7fb      	b.n	ec58 <RADIO_DIO0+0x30>
    ec60:	2800      	cmp	r0, #0
    ec62:	d10a      	bne.n	ec7a <RADIO_DIO0+0x52>
    ec64:	2207      	movs	r2, #7
    ec66:	4013      	ands	r3, r2
    ec68:	7023      	strb	r3, [r4, #0]
    ec6a:	2b03      	cmp	r3, #3
    ec6c:	d101      	bne.n	ec72 <RADIO_DIO0+0x4a>
    ec6e:	4b09      	ldr	r3, [pc, #36]	; (ec94 <RADIO_DIO0+0x6c>)
    ec70:	e7f2      	b.n	ec58 <RADIO_DIO0+0x30>
    ec72:	2b05      	cmp	r3, #5
    ec74:	d102      	bne.n	ec7c <RADIO_DIO0+0x54>
    ec76:	4b08      	ldr	r3, [pc, #32]	; (ec98 <RADIO_DIO0+0x70>)
    ec78:	e7ee      	b.n	ec58 <RADIO_DIO0+0x30>
    ec7a:	2000      	movs	r0, #0
    ec7c:	4b07      	ldr	r3, [pc, #28]	; (ec9c <RADIO_DIO0+0x74>)
    ec7e:	4798      	blx	r3
    ec80:	e7e8      	b.n	ec54 <RADIO_DIO0+0x2c>
    ec82:	46c0      	nop			; (mov r8, r8)
    ec84:	0000ebd1 	.word	0x0000ebd1
    ec88:	0000ebf5 	.word	0x0000ebf5
    ec8c:	0000f2b9 	.word	0x0000f2b9
    ec90:	0000f1bd 	.word	0x0000f1bd
    ec94:	0000f239 	.word	0x0000f239
    ec98:	0000f335 	.word	0x0000f335
    ec9c:	0000ec05 	.word	0x0000ec05

0000eca0 <RADIO_DIO1>:
    eca0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    eca2:	466b      	mov	r3, sp
    eca4:	1ddc      	adds	r4, r3, #7
    eca6:	1d9d      	adds	r5, r3, #6
    eca8:	2230      	movs	r2, #48	; 0x30
    ecaa:	2304      	movs	r3, #4
    ecac:	0021      	movs	r1, r4
    ecae:	0028      	movs	r0, r5
    ecb0:	4e11      	ldr	r6, [pc, #68]	; (ecf8 <RADIO_DIO1+0x58>)
    ecb2:	47b0      	blx	r6
    ecb4:	7822      	ldrb	r2, [r4, #0]
    ecb6:	782b      	ldrb	r3, [r5, #0]
    ecb8:	b251      	sxtb	r1, r2
    ecba:	2900      	cmp	r1, #0
    ecbc:	da0c      	bge.n	ecd8 <RADIO_DIO1+0x38>
    ecbe:	b2db      	uxtb	r3, r3
    ecc0:	2b00      	cmp	r3, #0
    ecc2:	d004      	beq.n	ecce <RADIO_DIO1+0x2e>
    ecc4:	2b01      	cmp	r3, #1
    ecc6:	d005      	beq.n	ecd4 <RADIO_DIO1+0x34>
    ecc8:	4b0c      	ldr	r3, [pc, #48]	; (ecfc <RADIO_DIO1+0x5c>)
    ecca:	4798      	blx	r3
    eccc:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    ecce:	4b0c      	ldr	r3, [pc, #48]	; (ed00 <RADIO_DIO1+0x60>)
    ecd0:	4798      	blx	r3
    ecd2:	e7fb      	b.n	eccc <RADIO_DIO1+0x2c>
    ecd4:	4b0b      	ldr	r3, [pc, #44]	; (ed04 <RADIO_DIO1+0x64>)
    ecd6:	e7fb      	b.n	ecd0 <RADIO_DIO1+0x30>
    ecd8:	2107      	movs	r1, #7
    ecda:	b2db      	uxtb	r3, r3
    ecdc:	400a      	ands	r2, r1
    ecde:	7022      	strb	r2, [r4, #0]
    ece0:	2b00      	cmp	r3, #0
    ece2:	d005      	beq.n	ecf0 <RADIO_DIO1+0x50>
    ece4:	2b01      	cmp	r3, #1
    ece6:	d1f1      	bne.n	eccc <RADIO_DIO1+0x2c>
    ece8:	2a03      	cmp	r2, #3
    ecea:	d1ef      	bne.n	eccc <RADIO_DIO1+0x2c>
    ecec:	4b06      	ldr	r3, [pc, #24]	; (ed08 <RADIO_DIO1+0x68>)
    ecee:	e7ef      	b.n	ecd0 <RADIO_DIO1+0x30>
    ecf0:	4b06      	ldr	r3, [pc, #24]	; (ed0c <RADIO_DIO1+0x6c>)
    ecf2:	2a05      	cmp	r2, #5
    ecf4:	d1ea      	bne.n	eccc <RADIO_DIO1+0x2c>
    ecf6:	e7eb      	b.n	ecd0 <RADIO_DIO1+0x30>
    ecf8:	0000ebd1 	.word	0x0000ebd1
    ecfc:	0000ebf5 	.word	0x0000ebf5
    ed00:	0000f141 	.word	0x0000f141
    ed04:	0000dcd5 	.word	0x0000dcd5
    ed08:	0000f05d 	.word	0x0000f05d
    ed0c:	0000efc1 	.word	0x0000efc1

0000ed10 <RADIO_DIO2>:
    ed10:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ed12:	466b      	mov	r3, sp
    ed14:	1ddc      	adds	r4, r3, #7
    ed16:	1d9d      	adds	r5, r3, #6
    ed18:	220c      	movs	r2, #12
    ed1a:	2302      	movs	r3, #2
    ed1c:	0021      	movs	r1, r4
    ed1e:	0028      	movs	r0, r5
    ed20:	4e0b      	ldr	r6, [pc, #44]	; (ed50 <RADIO_DIO2+0x40>)
    ed22:	47b0      	blx	r6
    ed24:	7823      	ldrb	r3, [r4, #0]
    ed26:	782a      	ldrb	r2, [r5, #0]
    ed28:	b259      	sxtb	r1, r3
    ed2a:	2900      	cmp	r1, #0
    ed2c:	da05      	bge.n	ed3a <RADIO_DIO2+0x2a>
    ed2e:	4b09      	ldr	r3, [pc, #36]	; (ed54 <RADIO_DIO2+0x44>)
    ed30:	2a02      	cmp	r2, #2
    ed32:	d90a      	bls.n	ed4a <RADIO_DIO2+0x3a>
    ed34:	4b08      	ldr	r3, [pc, #32]	; (ed58 <RADIO_DIO2+0x48>)
    ed36:	4798      	blx	r3
    ed38:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    ed3a:	2107      	movs	r1, #7
    ed3c:	400b      	ands	r3, r1
    ed3e:	7023      	strb	r3, [r4, #0]
    ed40:	2a03      	cmp	r2, #3
    ed42:	d1f9      	bne.n	ed38 <RADIO_DIO2+0x28>
    ed44:	2b05      	cmp	r3, #5
    ed46:	d1f7      	bne.n	ed38 <RADIO_DIO2+0x28>
    ed48:	4b04      	ldr	r3, [pc, #16]	; (ed5c <RADIO_DIO2+0x4c>)
    ed4a:	4798      	blx	r3
    ed4c:	e7f4      	b.n	ed38 <RADIO_DIO2+0x28>
    ed4e:	46c0      	nop			; (mov r8, r8)
    ed50:	0000ebd1 	.word	0x0000ebd1
    ed54:	0000dcd5 	.word	0x0000dcd5
    ed58:	0000ebf5 	.word	0x0000ebf5
    ed5c:	0000ef91 	.word	0x0000ef91

0000ed60 <RADIO_DIO3>:
    ed60:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ed62:	466b      	mov	r3, sp
    ed64:	4668      	mov	r0, sp
    ed66:	1ddc      	adds	r4, r3, #7
    ed68:	2203      	movs	r2, #3
    ed6a:	2300      	movs	r3, #0
    ed6c:	0021      	movs	r1, r4
    ed6e:	3006      	adds	r0, #6
    ed70:	4d03      	ldr	r5, [pc, #12]	; (ed80 <RADIO_DIO3+0x20>)
    ed72:	47a8      	blx	r5
    ed74:	7823      	ldrb	r3, [r4, #0]
    ed76:	2b7f      	cmp	r3, #127	; 0x7f
    ed78:	d901      	bls.n	ed7e <RADIO_DIO3+0x1e>
    ed7a:	4b02      	ldr	r3, [pc, #8]	; (ed84 <RADIO_DIO3+0x24>)
    ed7c:	4798      	blx	r3
    ed7e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    ed80:	0000ebd1 	.word	0x0000ebd1
    ed84:	0000ebf5 	.word	0x0000ebf5

0000ed88 <RADIO_DIO4>:
    ed88:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ed8a:	466b      	mov	r3, sp
    ed8c:	4668      	mov	r0, sp
    ed8e:	1ddc      	adds	r4, r3, #7
    ed90:	2306      	movs	r3, #6
    ed92:	22c0      	movs	r2, #192	; 0xc0
    ed94:	18c0      	adds	r0, r0, r3
    ed96:	0021      	movs	r1, r4
    ed98:	4d03      	ldr	r5, [pc, #12]	; (eda8 <RADIO_DIO4+0x20>)
    ed9a:	47a8      	blx	r5
    ed9c:	7823      	ldrb	r3, [r4, #0]
    ed9e:	2b7f      	cmp	r3, #127	; 0x7f
    eda0:	d901      	bls.n	eda6 <RADIO_DIO4+0x1e>
    eda2:	4b02      	ldr	r3, [pc, #8]	; (edac <RADIO_DIO4+0x24>)
    eda4:	4798      	blx	r3
    eda6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    eda8:	0000ebd1 	.word	0x0000ebd1
    edac:	0000ebf5 	.word	0x0000ebf5

0000edb0 <RADIO_DIO5>:
    edb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    edb2:	466b      	mov	r3, sp
    edb4:	4668      	mov	r0, sp
    edb6:	1ddc      	adds	r4, r3, #7
    edb8:	2230      	movs	r2, #48	; 0x30
    edba:	2304      	movs	r3, #4
    edbc:	0021      	movs	r1, r4
    edbe:	3006      	adds	r0, #6
    edc0:	4d03      	ldr	r5, [pc, #12]	; (edd0 <RADIO_DIO5+0x20>)
    edc2:	47a8      	blx	r5
    edc4:	7823      	ldrb	r3, [r4, #0]
    edc6:	2b7f      	cmp	r3, #127	; 0x7f
    edc8:	d901      	bls.n	edce <RADIO_DIO5+0x1e>
    edca:	4b02      	ldr	r3, [pc, #8]	; (edd4 <RADIO_DIO5+0x24>)
    edcc:	4798      	blx	r3
    edce:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    edd0:	0000ebd1 	.word	0x0000ebd1
    edd4:	0000ebf5 	.word	0x0000ebf5

0000edd8 <radioPostTask>:
    edd8:	b510      	push	{r4, lr}
    edda:	0004      	movs	r4, r0
    eddc:	4b05      	ldr	r3, [pc, #20]	; (edf4 <radioPostTask+0x1c>)
    edde:	4798      	blx	r3
    ede0:	4b05      	ldr	r3, [pc, #20]	; (edf8 <radioPostTask+0x20>)
    ede2:	8818      	ldrh	r0, [r3, #0]
    ede4:	4320      	orrs	r0, r4
    ede6:	8018      	strh	r0, [r3, #0]
    ede8:	4b04      	ldr	r3, [pc, #16]	; (edfc <radioPostTask+0x24>)
    edea:	4798      	blx	r3
    edec:	2002      	movs	r0, #2
    edee:	4b04      	ldr	r3, [pc, #16]	; (ee00 <radioPostTask+0x28>)
    edf0:	4798      	blx	r3
    edf2:	bd10      	pop	{r4, pc}
    edf4:	0000cb81 	.word	0x0000cb81
    edf8:	2000208c 	.word	0x2000208c
    edfc:	0000cb8d 	.word	0x0000cb8d
    ee00:	0000dbcd 	.word	0x0000dbcd

0000ee04 <radioClearTask>:
    ee04:	b510      	push	{r4, lr}
    ee06:	0004      	movs	r4, r0
    ee08:	4b04      	ldr	r3, [pc, #16]	; (ee1c <radioClearTask+0x18>)
    ee0a:	4798      	blx	r3
    ee0c:	4a04      	ldr	r2, [pc, #16]	; (ee20 <radioClearTask+0x1c>)
    ee0e:	8813      	ldrh	r3, [r2, #0]
    ee10:	43a3      	bics	r3, r4
    ee12:	8013      	strh	r3, [r2, #0]
    ee14:	4b03      	ldr	r3, [pc, #12]	; (ee24 <radioClearTask+0x20>)
    ee16:	4798      	blx	r3
    ee18:	bd10      	pop	{r4, pc}
    ee1a:	46c0      	nop			; (mov r8, r8)
    ee1c:	0000cb81 	.word	0x0000cb81
    ee20:	2000208c 	.word	0x2000208c
    ee24:	0000cb8d 	.word	0x0000cb8d

0000ee28 <RADIO_TaskHandler>:
    ee28:	b570      	push	{r4, r5, r6, lr}
    ee2a:	2400      	movs	r4, #0
    ee2c:	4d10      	ldr	r5, [pc, #64]	; (ee70 <RADIO_TaskHandler+0x48>)
    ee2e:	2601      	movs	r6, #1
    ee30:	882b      	ldrh	r3, [r5, #0]
    ee32:	42a3      	cmp	r3, r4
    ee34:	d015      	beq.n	ee62 <RADIO_TaskHandler+0x3a>
    ee36:	882b      	ldrh	r3, [r5, #0]
    ee38:	4123      	asrs	r3, r4
    ee3a:	4233      	tst	r3, r6
    ee3c:	d013      	beq.n	ee66 <RADIO_TaskHandler+0x3e>
    ee3e:	40a6      	lsls	r6, r4
    ee40:	4b0c      	ldr	r3, [pc, #48]	; (ee74 <RADIO_TaskHandler+0x4c>)
    ee42:	4798      	blx	r3
    ee44:	882b      	ldrh	r3, [r5, #0]
    ee46:	00a4      	lsls	r4, r4, #2
    ee48:	43b3      	bics	r3, r6
    ee4a:	802b      	strh	r3, [r5, #0]
    ee4c:	4b0a      	ldr	r3, [pc, #40]	; (ee78 <RADIO_TaskHandler+0x50>)
    ee4e:	4798      	blx	r3
    ee50:	4b0a      	ldr	r3, [pc, #40]	; (ee7c <RADIO_TaskHandler+0x54>)
    ee52:	58e3      	ldr	r3, [r4, r3]
    ee54:	4798      	blx	r3
    ee56:	882b      	ldrh	r3, [r5, #0]
    ee58:	2b00      	cmp	r3, #0
    ee5a:	d002      	beq.n	ee62 <RADIO_TaskHandler+0x3a>
    ee5c:	2002      	movs	r0, #2
    ee5e:	4b08      	ldr	r3, [pc, #32]	; (ee80 <RADIO_TaskHandler+0x58>)
    ee60:	4798      	blx	r3
    ee62:	2000      	movs	r0, #0
    ee64:	bd70      	pop	{r4, r5, r6, pc}
    ee66:	3401      	adds	r4, #1
    ee68:	2c05      	cmp	r4, #5
    ee6a:	d1e4      	bne.n	ee36 <RADIO_TaskHandler+0xe>
    ee6c:	e7f9      	b.n	ee62 <RADIO_TaskHandler+0x3a>
    ee6e:	46c0      	nop			; (mov r8, r8)
    ee70:	2000208c 	.word	0x2000208c
    ee74:	0000cb81 	.word	0x0000cb81
    ee78:	0000cb8d 	.word	0x0000cb8d
    ee7c:	000192c4 	.word	0x000192c4
    ee80:	0000dbcd 	.word	0x0000dbcd

0000ee84 <RadioSetState>:
    ee84:	4b01      	ldr	r3, [pc, #4]	; (ee8c <RadioSetState+0x8>)
    ee86:	7018      	strb	r0, [r3, #0]
    ee88:	4770      	bx	lr
    ee8a:	46c0      	nop			; (mov r8, r8)
    ee8c:	2000321f 	.word	0x2000321f

0000ee90 <RADIO_GetState>:
    ee90:	4b01      	ldr	r3, [pc, #4]	; (ee98 <RADIO_GetState+0x8>)
    ee92:	7818      	ldrb	r0, [r3, #0]
    ee94:	b2c0      	uxtb	r0, r0
    ee96:	4770      	bx	lr
    ee98:	2000321f 	.word	0x2000321f

0000ee9c <RADIO_SetCallbackBitmask>:
    ee9c:	4a02      	ldr	r2, [pc, #8]	; (eea8 <RADIO_SetCallbackBitmask+0xc>)
    ee9e:	7813      	ldrb	r3, [r2, #0]
    eea0:	4318      	orrs	r0, r3
    eea2:	7010      	strb	r0, [r2, #0]
    eea4:	4770      	bx	lr
    eea6:	46c0      	nop			; (mov r8, r8)
    eea8:	2000321e 	.word	0x2000321e

0000eeac <RADIO_Transmit>:
    eeac:	b570      	push	{r4, r5, r6, lr}
    eeae:	4d10      	ldr	r5, [pc, #64]	; (eef0 <RADIO_Transmit+0x44>)
    eeb0:	0006      	movs	r6, r0
    eeb2:	782b      	ldrb	r3, [r5, #0]
    eeb4:	2004      	movs	r0, #4
    eeb6:	2b01      	cmp	r3, #1
    eeb8:	d118      	bne.n	eeec <RADIO_Transmit+0x40>
    eeba:	4c0e      	ldr	r4, [pc, #56]	; (eef4 <RADIO_Transmit+0x48>)
    eebc:	0023      	movs	r3, r4
    eebe:	332f      	adds	r3, #47	; 0x2f
    eec0:	7818      	ldrb	r0, [r3, #0]
    eec2:	4b0d      	ldr	r3, [pc, #52]	; (eef8 <RADIO_Transmit+0x4c>)
    eec4:	4798      	blx	r3
    eec6:	4b0d      	ldr	r3, [pc, #52]	; (eefc <RADIO_Transmit+0x50>)
    eec8:	7832      	ldrb	r2, [r6, #0]
    eeca:	6871      	ldr	r1, [r6, #4]
    eecc:	701a      	strb	r2, [r3, #0]
    eece:	4b0c      	ldr	r3, [pc, #48]	; (ef00 <RADIO_Transmit+0x54>)
    eed0:	3434      	adds	r4, #52	; 0x34
    eed2:	6019      	str	r1, [r3, #0]
    eed4:	7821      	ldrb	r1, [r4, #0]
    eed6:	2302      	movs	r3, #2
    eed8:	2900      	cmp	r1, #0
    eeda:	d102      	bne.n	eee2 <RADIO_Transmit+0x36>
    eedc:	0018      	movs	r0, r3
    eede:	2a3f      	cmp	r2, #63	; 0x3f
    eee0:	d804      	bhi.n	eeec <RADIO_Transmit+0x40>
    eee2:	702b      	strb	r3, [r5, #0]
    eee4:	2004      	movs	r0, #4
    eee6:	4b07      	ldr	r3, [pc, #28]	; (ef04 <RADIO_Transmit+0x58>)
    eee8:	4798      	blx	r3
    eeea:	2000      	movs	r0, #0
    eeec:	bd70      	pop	{r4, r5, r6, pc}
    eeee:	46c0      	nop			; (mov r8, r8)
    eef0:	2000321f 	.word	0x2000321f
    eef4:	20002f50 	.word	0x20002f50
    eef8:	0000d8cd 	.word	0x0000d8cd
    eefc:	200020a4 	.word	0x200020a4
    ef00:	200020a0 	.word	0x200020a0
    ef04:	0000edd9 	.word	0x0000edd9

0000ef08 <Radio_FSKTxPayloadHandler>:
    ef08:	b570      	push	{r4, r5, r6, lr}
    ef0a:	4b1c      	ldr	r3, [pc, #112]	; (ef7c <Radio_FSKTxPayloadHandler+0x74>)
    ef0c:	000d      	movs	r5, r1
    ef0e:	4798      	blx	r3
    ef10:	4c1b      	ldr	r4, [pc, #108]	; (ef80 <Radio_FSKTxPayloadHandler+0x78>)
    ef12:	3458      	adds	r4, #88	; 0x58
    ef14:	7820      	ldrb	r0, [r4, #0]
    ef16:	b2c0      	uxtb	r0, r0
    ef18:	2800      	cmp	r0, #0
    ef1a:	d112      	bne.n	ef42 <Radio_FSKTxPayloadHandler+0x3a>
    ef1c:	2d00      	cmp	r5, #0
    ef1e:	d007      	beq.n	ef30 <Radio_FSKTxPayloadHandler+0x28>
    ef20:	4918      	ldr	r1, [pc, #96]	; (ef84 <Radio_FSKTxPayloadHandler+0x7c>)
    ef22:	4b19      	ldr	r3, [pc, #100]	; (ef88 <Radio_FSKTxPayloadHandler+0x80>)
    ef24:	2d3e      	cmp	r5, #62	; 0x3e
    ef26:	d806      	bhi.n	ef36 <Radio_FSKTxPayloadHandler+0x2e>
    ef28:	002a      	movs	r2, r5
    ef2a:	6809      	ldr	r1, [r1, #0]
    ef2c:	4798      	blx	r3
    ef2e:	7025      	strb	r5, [r4, #0]
    ef30:	4b16      	ldr	r3, [pc, #88]	; (ef8c <Radio_FSKTxPayloadHandler+0x84>)
    ef32:	4798      	blx	r3
    ef34:	bd70      	pop	{r4, r5, r6, pc}
    ef36:	223f      	movs	r2, #63	; 0x3f
    ef38:	6809      	ldr	r1, [r1, #0]
    ef3a:	4798      	blx	r3
    ef3c:	233f      	movs	r3, #63	; 0x3f
    ef3e:	7023      	strb	r3, [r4, #0]
    ef40:	e7f6      	b.n	ef30 <Radio_FSKTxPayloadHandler+0x28>
    ef42:	7823      	ldrb	r3, [r4, #0]
    ef44:	429d      	cmp	r5, r3
    ef46:	d0f3      	beq.n	ef30 <Radio_FSKTxPayloadHandler+0x28>
    ef48:	7822      	ldrb	r2, [r4, #0]
    ef4a:	480e      	ldr	r0, [pc, #56]	; (ef84 <Radio_FSKTxPayloadHandler+0x7c>)
    ef4c:	1aaa      	subs	r2, r5, r2
    ef4e:	b2d2      	uxtb	r2, r2
    ef50:	4b0d      	ldr	r3, [pc, #52]	; (ef88 <Radio_FSKTxPayloadHandler+0x80>)
    ef52:	2a3f      	cmp	r2, #63	; 0x3f
    ef54:	d807      	bhi.n	ef66 <Radio_FSKTxPayloadHandler+0x5e>
    ef56:	7826      	ldrb	r6, [r4, #0]
    ef58:	7822      	ldrb	r2, [r4, #0]
    ef5a:	6801      	ldr	r1, [r0, #0]
    ef5c:	1aaa      	subs	r2, r5, r2
    ef5e:	b2d2      	uxtb	r2, r2
    ef60:	1989      	adds	r1, r1, r6
    ef62:	2000      	movs	r0, #0
    ef64:	e7e2      	b.n	ef2c <Radio_FSKTxPayloadHandler+0x24>
    ef66:	7822      	ldrb	r2, [r4, #0]
    ef68:	6801      	ldr	r1, [r0, #0]
    ef6a:	2000      	movs	r0, #0
    ef6c:	1889      	adds	r1, r1, r2
    ef6e:	223f      	movs	r2, #63	; 0x3f
    ef70:	4798      	blx	r3
    ef72:	7823      	ldrb	r3, [r4, #0]
    ef74:	333f      	adds	r3, #63	; 0x3f
    ef76:	b2db      	uxtb	r3, r3
    ef78:	e7e1      	b.n	ef3e <Radio_FSKTxPayloadHandler+0x36>
    ef7a:	46c0      	nop			; (mov r8, r8)
    ef7c:	00004aa1 	.word	0x00004aa1
    ef80:	20002f50 	.word	0x20002f50
    ef84:	200020a0 	.word	0x200020a0
    ef88:	0000ca1d 	.word	0x0000ca1d
    ef8c:	00004ae1 	.word	0x00004ae1

0000ef90 <RADIO_FSKSyncAddr>:
    ef90:	4b08      	ldr	r3, [pc, #32]	; (efb4 <RADIO_FSKSyncAddr+0x24>)
    ef92:	b510      	push	{r4, lr}
    ef94:	4798      	blx	r3
    ef96:	4b08      	ldr	r3, [pc, #32]	; (efb8 <RADIO_FSKSyncAddr+0x28>)
    ef98:	001a      	movs	r2, r3
    ef9a:	3234      	adds	r2, #52	; 0x34
    ef9c:	7812      	ldrb	r2, [r2, #0]
    ef9e:	2a00      	cmp	r2, #0
    efa0:	d104      	bne.n	efac <RADIO_FSKSyncAddr+0x1c>
    efa2:	0019      	movs	r1, r3
    efa4:	3358      	adds	r3, #88	; 0x58
    efa6:	312c      	adds	r1, #44	; 0x2c
    efa8:	700a      	strb	r2, [r1, #0]
    efaa:	701a      	strb	r2, [r3, #0]
    efac:	4b03      	ldr	r3, [pc, #12]	; (efbc <RADIO_FSKSyncAddr+0x2c>)
    efae:	4798      	blx	r3
    efb0:	bd10      	pop	{r4, pc}
    efb2:	46c0      	nop			; (mov r8, r8)
    efb4:	00004aa1 	.word	0x00004aa1
    efb8:	20002f50 	.word	0x20002f50
    efbc:	00004ae1 	.word	0x00004ae1

0000efc0 <RADIO_FSKFifoLevel>:
    efc0:	b570      	push	{r4, r5, r6, lr}
    efc2:	4b22      	ldr	r3, [pc, #136]	; (f04c <RADIO_FSKFifoLevel+0x8c>)
    efc4:	4798      	blx	r3
    efc6:	4d22      	ldr	r5, [pc, #136]	; (f050 <RADIO_FSKFifoLevel+0x90>)
    efc8:	002a      	movs	r2, r5
    efca:	002b      	movs	r3, r5
    efcc:	322c      	adds	r2, #44	; 0x2c
    efce:	3358      	adds	r3, #88	; 0x58
    efd0:	7810      	ldrb	r0, [r2, #0]
    efd2:	7819      	ldrb	r1, [r3, #0]
    efd4:	4288      	cmp	r0, r1
    efd6:	d105      	bne.n	efe4 <RADIO_FSKFifoLevel+0x24>
    efd8:	7812      	ldrb	r2, [r2, #0]
    efda:	2a00      	cmp	r2, #0
    efdc:	d002      	beq.n	efe4 <RADIO_FSKFifoLevel+0x24>
    efde:	781b      	ldrb	r3, [r3, #0]
    efe0:	2b00      	cmp	r3, #0
    efe2:	d11f      	bne.n	f024 <RADIO_FSKFifoLevel+0x64>
    efe4:	0029      	movs	r1, r5
    efe6:	312c      	adds	r1, #44	; 0x2c
    efe8:	7808      	ldrb	r0, [r1, #0]
    efea:	b2c0      	uxtb	r0, r0
    efec:	2800      	cmp	r0, #0
    efee:	d102      	bne.n	eff6 <RADIO_FSKFifoLevel+0x36>
    eff0:	2201      	movs	r2, #1
    eff2:	4b18      	ldr	r3, [pc, #96]	; (f054 <RADIO_FSKFifoLevel+0x94>)
    eff4:	4798      	blx	r3
    eff6:	002e      	movs	r6, r5
    eff8:	002c      	movs	r4, r5
    effa:	362c      	adds	r6, #44	; 0x2c
    effc:	3458      	adds	r4, #88	; 0x58
    effe:	7833      	ldrb	r3, [r6, #0]
    f000:	7822      	ldrb	r2, [r4, #0]
    f002:	1a9b      	subs	r3, r3, r2
    f004:	b2db      	uxtb	r3, r3
    f006:	2b3e      	cmp	r3, #62	; 0x3e
    f008:	d80f      	bhi.n	f02a <RADIO_FSKFifoLevel+0x6a>
    f00a:	7823      	ldrb	r3, [r4, #0]
    f00c:	7832      	ldrb	r2, [r6, #0]
    f00e:	7821      	ldrb	r1, [r4, #0]
    f010:	2000      	movs	r0, #0
    f012:	1a52      	subs	r2, r2, r1
    f014:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    f016:	b2d2      	uxtb	r2, r2
    f018:	18c9      	adds	r1, r1, r3
    f01a:	4b0e      	ldr	r3, [pc, #56]	; (f054 <RADIO_FSKFifoLevel+0x94>)
    f01c:	4798      	blx	r3
    f01e:	7833      	ldrb	r3, [r6, #0]
    f020:	b2db      	uxtb	r3, r3
    f022:	7023      	strb	r3, [r4, #0]
    f024:	4b0c      	ldr	r3, [pc, #48]	; (f058 <RADIO_FSKFifoLevel+0x98>)
    f026:	4798      	blx	r3
    f028:	bd70      	pop	{r4, r5, r6, pc}
    f02a:	7833      	ldrb	r3, [r6, #0]
    f02c:	7822      	ldrb	r2, [r4, #0]
    f02e:	1a9b      	subs	r3, r3, r2
    f030:	b2db      	uxtb	r3, r3
    f032:	2b3f      	cmp	r3, #63	; 0x3f
    f034:	d9f6      	bls.n	f024 <RADIO_FSKFifoLevel+0x64>
    f036:	7823      	ldrb	r3, [r4, #0]
    f038:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    f03a:	223f      	movs	r2, #63	; 0x3f
    f03c:	18c9      	adds	r1, r1, r3
    f03e:	2000      	movs	r0, #0
    f040:	4b04      	ldr	r3, [pc, #16]	; (f054 <RADIO_FSKFifoLevel+0x94>)
    f042:	4798      	blx	r3
    f044:	7823      	ldrb	r3, [r4, #0]
    f046:	333f      	adds	r3, #63	; 0x3f
    f048:	e7ea      	b.n	f020 <RADIO_FSKFifoLevel+0x60>
    f04a:	46c0      	nop			; (mov r8, r8)
    f04c:	00004aa1 	.word	0x00004aa1
    f050:	20002f50 	.word	0x20002f50
    f054:	0000ca5d 	.word	0x0000ca5d
    f058:	00004ae1 	.word	0x00004ae1

0000f05c <RADIO_FSKFifoEmpty>:
    f05c:	b510      	push	{r4, lr}
    f05e:	4b03      	ldr	r3, [pc, #12]	; (f06c <RADIO_FSKFifoEmpty+0x10>)
    f060:	7819      	ldrb	r1, [r3, #0]
    f062:	4b03      	ldr	r3, [pc, #12]	; (f070 <RADIO_FSKFifoEmpty+0x14>)
    f064:	6818      	ldr	r0, [r3, #0]
    f066:	4b03      	ldr	r3, [pc, #12]	; (f074 <RADIO_FSKFifoEmpty+0x18>)
    f068:	4798      	blx	r3
    f06a:	bd10      	pop	{r4, pc}
    f06c:	200020a4 	.word	0x200020a4
    f070:	200020a0 	.word	0x200020a0
    f074:	0000ef09 	.word	0x0000ef09

0000f078 <RADIO_GetData>:
    f078:	4b03      	ldr	r3, [pc, #12]	; (f088 <RADIO_GetData+0x10>)
    f07a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f07c:	332c      	adds	r3, #44	; 0x2c
    f07e:	6002      	str	r2, [r0, #0]
    f080:	781b      	ldrb	r3, [r3, #0]
    f082:	2000      	movs	r0, #0
    f084:	800b      	strh	r3, [r1, #0]
    f086:	4770      	bx	lr
    f088:	20002f50 	.word	0x20002f50

0000f08c <Radio_EnableRfControl>:
    f08c:	b510      	push	{r4, lr}
    f08e:	4b08      	ldr	r3, [pc, #32]	; (f0b0 <Radio_EnableRfControl+0x24>)
    f090:	0001      	movs	r1, r0
    f092:	681a      	ldr	r2, [r3, #0]
    f094:	4807      	ldr	r0, [pc, #28]	; (f0b4 <Radio_EnableRfControl+0x28>)
    f096:	4c08      	ldr	r4, [pc, #32]	; (f0b8 <Radio_EnableRfControl+0x2c>)
    f098:	1812      	adds	r2, r2, r0
    f09a:	2000      	movs	r0, #0
    f09c:	42a2      	cmp	r2, r4
    f09e:	d804      	bhi.n	f0aa <Radio_EnableRfControl+0x1e>
    f0a0:	3305      	adds	r3, #5
    f0a2:	7fdb      	ldrb	r3, [r3, #31]
    f0a4:	1e58      	subs	r0, r3, #1
    f0a6:	4183      	sbcs	r3, r0
    f0a8:	1c58      	adds	r0, r3, #1
    f0aa:	4b04      	ldr	r3, [pc, #16]	; (f0bc <Radio_EnableRfControl+0x30>)
    f0ac:	4798      	blx	r3
    f0ae:	bd10      	pop	{r4, pc}
    f0b0:	20002f50 	.word	0x20002f50
    f0b4:	cc9eec80 	.word	0xcc9eec80
    f0b8:	096ae380 	.word	0x096ae380
    f0bc:	0000cac9 	.word	0x0000cac9

0000f0c0 <Radio_DisableRfControl>:
    f0c0:	b510      	push	{r4, lr}
    f0c2:	4b08      	ldr	r3, [pc, #32]	; (f0e4 <Radio_DisableRfControl+0x24>)
    f0c4:	0001      	movs	r1, r0
    f0c6:	681a      	ldr	r2, [r3, #0]
    f0c8:	4807      	ldr	r0, [pc, #28]	; (f0e8 <Radio_DisableRfControl+0x28>)
    f0ca:	4c08      	ldr	r4, [pc, #32]	; (f0ec <Radio_DisableRfControl+0x2c>)
    f0cc:	1812      	adds	r2, r2, r0
    f0ce:	2000      	movs	r0, #0
    f0d0:	42a2      	cmp	r2, r4
    f0d2:	d804      	bhi.n	f0de <Radio_DisableRfControl+0x1e>
    f0d4:	3305      	adds	r3, #5
    f0d6:	7fdb      	ldrb	r3, [r3, #31]
    f0d8:	1e58      	subs	r0, r3, #1
    f0da:	4183      	sbcs	r3, r0
    f0dc:	1c58      	adds	r0, r3, #1
    f0de:	4b04      	ldr	r3, [pc, #16]	; (f0f0 <Radio_DisableRfControl+0x30>)
    f0e0:	4798      	blx	r3
    f0e2:	bd10      	pop	{r4, pc}
    f0e4:	20002f50 	.word	0x20002f50
    f0e8:	cc9eec80 	.word	0xcc9eec80
    f0ec:	096ae380 	.word	0x096ae380
    f0f0:	0000caf1 	.word	0x0000caf1

0000f0f4 <Radio_WatchdogTimeout>:
    f0f4:	b510      	push	{r4, lr}
    f0f6:	4b0e      	ldr	r3, [pc, #56]	; (f130 <Radio_WatchdogTimeout+0x3c>)
    f0f8:	781a      	ldrb	r2, [r3, #0]
    f0fa:	2a04      	cmp	r2, #4
    f0fc:	d10b      	bne.n	f116 <Radio_WatchdogTimeout+0x22>
    f0fe:	2320      	movs	r3, #32
    f100:	4a0c      	ldr	r2, [pc, #48]	; (f134 <Radio_WatchdogTimeout+0x40>)
    f102:	2000      	movs	r0, #0
    f104:	8811      	ldrh	r1, [r2, #0]
    f106:	430b      	orrs	r3, r1
    f108:	8013      	strh	r3, [r2, #0]
    f10a:	4b0b      	ldr	r3, [pc, #44]	; (f138 <Radio_WatchdogTimeout+0x44>)
    f10c:	4798      	blx	r3
    f10e:	2002      	movs	r0, #2
    f110:	4b0a      	ldr	r3, [pc, #40]	; (f13c <Radio_WatchdogTimeout+0x48>)
    f112:	4798      	blx	r3
    f114:	bd10      	pop	{r4, pc}
    f116:	781b      	ldrb	r3, [r3, #0]
    f118:	2b02      	cmp	r3, #2
    f11a:	d1fb      	bne.n	f114 <Radio_WatchdogTimeout+0x20>
    f11c:	4a05      	ldr	r2, [pc, #20]	; (f134 <Radio_WatchdogTimeout+0x40>)
    f11e:	330e      	adds	r3, #14
    f120:	8811      	ldrh	r1, [r2, #0]
    f122:	2001      	movs	r0, #1
    f124:	430b      	orrs	r3, r1
    f126:	8013      	strh	r3, [r2, #0]
    f128:	4b03      	ldr	r3, [pc, #12]	; (f138 <Radio_WatchdogTimeout+0x44>)
    f12a:	4798      	blx	r3
    f12c:	2001      	movs	r0, #1
    f12e:	e7ef      	b.n	f110 <Radio_WatchdogTimeout+0x1c>
    f130:	2000321f 	.word	0x2000321f
    f134:	2000321c 	.word	0x2000321c
    f138:	0000f0c1 	.word	0x0000f0c1
    f13c:	0000edd9 	.word	0x0000edd9

0000f140 <RADIO_RxTimeout>:
    f140:	b510      	push	{r4, lr}
    f142:	4b0a      	ldr	r3, [pc, #40]	; (f16c <RADIO_RxTimeout+0x2c>)
    f144:	332f      	adds	r3, #47	; 0x2f
    f146:	7818      	ldrb	r0, [r3, #0]
    f148:	4b09      	ldr	r3, [pc, #36]	; (f170 <RADIO_RxTimeout+0x30>)
    f14a:	4798      	blx	r3
    f14c:	2000      	movs	r0, #0
    f14e:	4b09      	ldr	r3, [pc, #36]	; (f174 <RADIO_RxTimeout+0x34>)
    f150:	4798      	blx	r3
    f152:	2180      	movs	r1, #128	; 0x80
    f154:	2012      	movs	r0, #18
    f156:	4b08      	ldr	r3, [pc, #32]	; (f178 <RADIO_RxTimeout+0x38>)
    f158:	4798      	blx	r3
    f15a:	2340      	movs	r3, #64	; 0x40
    f15c:	4a07      	ldr	r2, [pc, #28]	; (f17c <RADIO_RxTimeout+0x3c>)
    f15e:	2002      	movs	r0, #2
    f160:	8811      	ldrh	r1, [r2, #0]
    f162:	430b      	orrs	r3, r1
    f164:	8013      	strh	r3, [r2, #0]
    f166:	4b06      	ldr	r3, [pc, #24]	; (f180 <RADIO_RxTimeout+0x40>)
    f168:	4798      	blx	r3
    f16a:	bd10      	pop	{r4, pc}
    f16c:	20002f50 	.word	0x20002f50
    f170:	0000d8cd 	.word	0x0000d8cd
    f174:	0000f0c1 	.word	0x0000f0c1
    f178:	0000c9c9 	.word	0x0000c9c9
    f17c:	2000321c 	.word	0x2000321c
    f180:	0000edd9 	.word	0x0000edd9

0000f184 <Radio_RxFSKTimeout>:
    f184:	b510      	push	{r4, lr}
    f186:	4b08      	ldr	r3, [pc, #32]	; (f1a8 <Radio_RxFSKTimeout+0x24>)
    f188:	332f      	adds	r3, #47	; 0x2f
    f18a:	7818      	ldrb	r0, [r3, #0]
    f18c:	4b07      	ldr	r3, [pc, #28]	; (f1ac <Radio_RxFSKTimeout+0x28>)
    f18e:	4798      	blx	r3
    f190:	2000      	movs	r0, #0
    f192:	4b07      	ldr	r3, [pc, #28]	; (f1b0 <Radio_RxFSKTimeout+0x2c>)
    f194:	4798      	blx	r3
    f196:	2380      	movs	r3, #128	; 0x80
    f198:	4a06      	ldr	r2, [pc, #24]	; (f1b4 <Radio_RxFSKTimeout+0x30>)
    f19a:	2002      	movs	r0, #2
    f19c:	8811      	ldrh	r1, [r2, #0]
    f19e:	430b      	orrs	r3, r1
    f1a0:	8013      	strh	r3, [r2, #0]
    f1a2:	4b05      	ldr	r3, [pc, #20]	; (f1b8 <Radio_RxFSKTimeout+0x34>)
    f1a4:	4798      	blx	r3
    f1a6:	bd10      	pop	{r4, pc}
    f1a8:	20002f50 	.word	0x20002f50
    f1ac:	0000d8cd 	.word	0x0000d8cd
    f1b0:	0000f0c1 	.word	0x0000f0c1
    f1b4:	2000321c 	.word	0x2000321c
    f1b8:	0000edd9 	.word	0x0000edd9

0000f1bc <RADIO_TxDone>:
    f1bc:	b570      	push	{r4, r5, r6, lr}
    f1be:	4b14      	ldr	r3, [pc, #80]	; (f210 <RADIO_TxDone+0x54>)
    f1c0:	332f      	adds	r3, #47	; 0x2f
    f1c2:	7818      	ldrb	r0, [r3, #0]
    f1c4:	4b13      	ldr	r3, [pc, #76]	; (f214 <RADIO_TxDone+0x58>)
    f1c6:	4798      	blx	r3
    f1c8:	2001      	movs	r0, #1
    f1ca:	4b13      	ldr	r3, [pc, #76]	; (f218 <RADIO_TxDone+0x5c>)
    f1cc:	4798      	blx	r3
    f1ce:	4b13      	ldr	r3, [pc, #76]	; (f21c <RADIO_TxDone+0x60>)
    f1d0:	2108      	movs	r1, #8
    f1d2:	2012      	movs	r0, #18
    f1d4:	4798      	blx	r3
    f1d6:	4b12      	ldr	r3, [pc, #72]	; (f220 <RADIO_TxDone+0x64>)
    f1d8:	781a      	ldrb	r2, [r3, #0]
    f1da:	4b12      	ldr	r3, [pc, #72]	; (f224 <RADIO_TxDone+0x68>)
    f1dc:	2a02      	cmp	r2, #2
    f1de:	d002      	beq.n	f1e6 <RADIO_TxDone+0x2a>
    f1e0:	881a      	ldrh	r2, [r3, #0]
    f1e2:	0692      	lsls	r2, r2, #26
    f1e4:	d413      	bmi.n	f20e <RADIO_TxDone+0x52>
    f1e6:	2001      	movs	r0, #1
    f1e8:	881a      	ldrh	r2, [r3, #0]
    f1ea:	4302      	orrs	r2, r0
    f1ec:	801a      	strh	r2, [r3, #0]
    f1ee:	4b0e      	ldr	r3, [pc, #56]	; (f228 <RADIO_TxDone+0x6c>)
    f1f0:	4798      	blx	r3
    f1f2:	4b0e      	ldr	r3, [pc, #56]	; (f22c <RADIO_TxDone+0x70>)
    f1f4:	4798      	blx	r3
    f1f6:	4c0e      	ldr	r4, [pc, #56]	; (f230 <RADIO_TxDone+0x74>)
    f1f8:	4d0e      	ldr	r5, [pc, #56]	; (f234 <RADIO_TxDone+0x78>)
    f1fa:	6822      	ldr	r2, [r4, #0]
    f1fc:	6863      	ldr	r3, [r4, #4]
    f1fe:	1a80      	subs	r0, r0, r2
    f200:	4199      	sbcs	r1, r3
    f202:	22fa      	movs	r2, #250	; 0xfa
    f204:	2300      	movs	r3, #0
    f206:	0092      	lsls	r2, r2, #2
    f208:	47a8      	blx	r5
    f20a:	6020      	str	r0, [r4, #0]
    f20c:	6061      	str	r1, [r4, #4]
    f20e:	bd70      	pop	{r4, r5, r6, pc}
    f210:	20002f50 	.word	0x20002f50
    f214:	0000d8cd 	.word	0x0000d8cd
    f218:	0000f0c1 	.word	0x0000f0c1
    f21c:	0000c9c9 	.word	0x0000c9c9
    f220:	2000321f 	.word	0x2000321f
    f224:	2000321c 	.word	0x2000321c
    f228:	0000edd9 	.word	0x0000edd9
    f22c:	0000d55d 	.word	0x0000d55d
    f230:	20002098 	.word	0x20002098
    f234:	00013b89 	.word	0x00013b89

0000f238 <RADIO_FSKPacketSent>:
    f238:	b570      	push	{r4, r5, r6, lr}
    f23a:	4b15      	ldr	r3, [pc, #84]	; (f290 <RADIO_FSKPacketSent+0x58>)
    f23c:	203f      	movs	r0, #63	; 0x3f
    f23e:	4798      	blx	r3
    f240:	0703      	lsls	r3, r0, #28
    f242:	d524      	bpl.n	f28e <RADIO_FSKPacketSent+0x56>
    f244:	4b13      	ldr	r3, [pc, #76]	; (f294 <RADIO_FSKPacketSent+0x5c>)
    f246:	332f      	adds	r3, #47	; 0x2f
    f248:	7818      	ldrb	r0, [r3, #0]
    f24a:	4b13      	ldr	r3, [pc, #76]	; (f298 <RADIO_FSKPacketSent+0x60>)
    f24c:	4798      	blx	r3
    f24e:	4b13      	ldr	r3, [pc, #76]	; (f29c <RADIO_FSKPacketSent+0x64>)
    f250:	2001      	movs	r0, #1
    f252:	4798      	blx	r3
    f254:	4b12      	ldr	r3, [pc, #72]	; (f2a0 <RADIO_FSKPacketSent+0x68>)
    f256:	4c13      	ldr	r4, [pc, #76]	; (f2a4 <RADIO_FSKPacketSent+0x6c>)
    f258:	781b      	ldrb	r3, [r3, #0]
    f25a:	2b02      	cmp	r3, #2
    f25c:	d002      	beq.n	f264 <RADIO_FSKPacketSent+0x2c>
    f25e:	8823      	ldrh	r3, [r4, #0]
    f260:	069b      	lsls	r3, r3, #26
    f262:	d414      	bmi.n	f28e <RADIO_FSKPacketSent+0x56>
    f264:	4b10      	ldr	r3, [pc, #64]	; (f2a8 <RADIO_FSKPacketSent+0x70>)
    f266:	4798      	blx	r3
    f268:	4d10      	ldr	r5, [pc, #64]	; (f2ac <RADIO_FSKPacketSent+0x74>)
    f26a:	4e11      	ldr	r6, [pc, #68]	; (f2b0 <RADIO_FSKPacketSent+0x78>)
    f26c:	682a      	ldr	r2, [r5, #0]
    f26e:	686b      	ldr	r3, [r5, #4]
    f270:	1a80      	subs	r0, r0, r2
    f272:	4199      	sbcs	r1, r3
    f274:	22fa      	movs	r2, #250	; 0xfa
    f276:	2300      	movs	r3, #0
    f278:	0092      	lsls	r2, r2, #2
    f27a:	47b0      	blx	r6
    f27c:	4b0d      	ldr	r3, [pc, #52]	; (f2b4 <RADIO_FSKPacketSent+0x7c>)
    f27e:	6028      	str	r0, [r5, #0]
    f280:	6069      	str	r1, [r5, #4]
    f282:	2001      	movs	r0, #1
    f284:	4798      	blx	r3
    f286:	2304      	movs	r3, #4
    f288:	8822      	ldrh	r2, [r4, #0]
    f28a:	4313      	orrs	r3, r2
    f28c:	8023      	strh	r3, [r4, #0]
    f28e:	bd70      	pop	{r4, r5, r6, pc}
    f290:	0000c9f1 	.word	0x0000c9f1
    f294:	20002f50 	.word	0x20002f50
    f298:	0000d8cd 	.word	0x0000d8cd
    f29c:	0000f0c1 	.word	0x0000f0c1
    f2a0:	2000321f 	.word	0x2000321f
    f2a4:	2000321c 	.word	0x2000321c
    f2a8:	0000d55d 	.word	0x0000d55d
    f2ac:	20002098 	.word	0x20002098
    f2b0:	00013b89 	.word	0x00013b89
    f2b4:	0000edd9 	.word	0x0000edd9

0000f2b8 <RADIO_RxDone>:
    f2b8:	b570      	push	{r4, r5, r6, lr}
    f2ba:	2012      	movs	r0, #18
    f2bc:	4e16      	ldr	r6, [pc, #88]	; (f318 <RADIO_RxDone+0x60>)
    f2be:	47b0      	blx	r6
    f2c0:	4b16      	ldr	r3, [pc, #88]	; (f31c <RADIO_RxDone+0x64>)
    f2c2:	0005      	movs	r5, r0
    f2c4:	2170      	movs	r1, #112	; 0x70
    f2c6:	2012      	movs	r0, #18
    f2c8:	4798      	blx	r3
    f2ca:	2350      	movs	r3, #80	; 0x50
    f2cc:	402b      	ands	r3, r5
    f2ce:	2b50      	cmp	r3, #80	; 0x50
    f2d0:	d119      	bne.n	f306 <RADIO_RxDone+0x4e>
    f2d2:	4c13      	ldr	r4, [pc, #76]	; (f320 <RADIO_RxDone+0x68>)
    f2d4:	0023      	movs	r3, r4
    f2d6:	332f      	adds	r3, #47	; 0x2f
    f2d8:	7818      	ldrb	r0, [r3, #0]
    f2da:	4b12      	ldr	r3, [pc, #72]	; (f324 <RADIO_RxDone+0x6c>)
    f2dc:	4798      	blx	r3
    f2de:	4b12      	ldr	r3, [pc, #72]	; (f328 <RADIO_RxDone+0x70>)
    f2e0:	2000      	movs	r0, #0
    f2e2:	4798      	blx	r3
    f2e4:	3404      	adds	r4, #4
    f2e6:	201c      	movs	r0, #28
    f2e8:	47b0      	blx	r6
    f2ea:	7fe2      	ldrb	r2, [r4, #31]
    f2ec:	4b0f      	ldr	r3, [pc, #60]	; (f32c <RADIO_RxDone+0x74>)
    f2ee:	4910      	ldr	r1, [pc, #64]	; (f330 <RADIO_RxDone+0x78>)
    f2f0:	2a00      	cmp	r2, #0
    f2f2:	d003      	beq.n	f2fc <RADIO_RxDone+0x44>
    f2f4:	06aa      	lsls	r2, r5, #26
    f2f6:	d407      	bmi.n	f308 <RADIO_RxDone+0x50>
    f2f8:	0642      	lsls	r2, r0, #25
    f2fa:	d505      	bpl.n	f308 <RADIO_RxDone+0x50>
    f2fc:	2002      	movs	r0, #2
    f2fe:	881a      	ldrh	r2, [r3, #0]
    f300:	4302      	orrs	r2, r0
    f302:	801a      	strh	r2, [r3, #0]
    f304:	4788      	blx	r1
    f306:	bd70      	pop	{r4, r5, r6, pc}
    f308:	2280      	movs	r2, #128	; 0x80
    f30a:	8818      	ldrh	r0, [r3, #0]
    f30c:	0052      	lsls	r2, r2, #1
    f30e:	4302      	orrs	r2, r0
    f310:	801a      	strh	r2, [r3, #0]
    f312:	2002      	movs	r0, #2
    f314:	e7f6      	b.n	f304 <RADIO_RxDone+0x4c>
    f316:	46c0      	nop			; (mov r8, r8)
    f318:	0000c9f1 	.word	0x0000c9f1
    f31c:	0000c9c9 	.word	0x0000c9c9
    f320:	20002f50 	.word	0x20002f50
    f324:	0000d8cd 	.word	0x0000d8cd
    f328:	0000f0c1 	.word	0x0000f0c1
    f32c:	2000321c 	.word	0x2000321c
    f330:	0000edd9 	.word	0x0000edd9

0000f334 <RADIO_FSKPayloadReady>:
    f334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f336:	203f      	movs	r0, #63	; 0x3f
    f338:	4b39      	ldr	r3, [pc, #228]	; (f420 <RADIO_FSKPayloadReady+0xec>)
    f33a:	4798      	blx	r3
    f33c:	0743      	lsls	r3, r0, #29
    f33e:	d559      	bpl.n	f3f4 <RADIO_FSKPayloadReady+0xc0>
    f340:	4c38      	ldr	r4, [pc, #224]	; (f424 <RADIO_FSKPayloadReady+0xf0>)
    f342:	4d39      	ldr	r5, [pc, #228]	; (f428 <RADIO_FSKPayloadReady+0xf4>)
    f344:	1d23      	adds	r3, r4, #4
    f346:	7fdb      	ldrb	r3, [r3, #31]
    f348:	2b01      	cmp	r3, #1
    f34a:	d154      	bne.n	f3f6 <RADIO_FSKPayloadReady+0xc2>
    f34c:	2202      	movs	r2, #2
    f34e:	4210      	tst	r0, r2
    f350:	d048      	beq.n	f3e4 <RADIO_FSKPayloadReady+0xb0>
    f352:	0023      	movs	r3, r4
    f354:	332f      	adds	r3, #47	; 0x2f
    f356:	7818      	ldrb	r0, [r3, #0]
    f358:	4e34      	ldr	r6, [pc, #208]	; (f42c <RADIO_FSKPayloadReady+0xf8>)
    f35a:	47b0      	blx	r6
    f35c:	0023      	movs	r3, r4
    f35e:	332e      	adds	r3, #46	; 0x2e
    f360:	7818      	ldrb	r0, [r3, #0]
    f362:	47b0      	blx	r6
    f364:	4b32      	ldr	r3, [pc, #200]	; (f430 <RADIO_FSKPayloadReady+0xfc>)
    f366:	4798      	blx	r3
    f368:	0022      	movs	r2, r4
    f36a:	0023      	movs	r3, r4
    f36c:	322c      	adds	r2, #44	; 0x2c
    f36e:	3358      	adds	r3, #88	; 0x58
    f370:	7810      	ldrb	r0, [r2, #0]
    f372:	7819      	ldrb	r1, [r3, #0]
    f374:	4288      	cmp	r0, r1
    f376:	d105      	bne.n	f384 <RADIO_FSKPayloadReady+0x50>
    f378:	7812      	ldrb	r2, [r2, #0]
    f37a:	2a00      	cmp	r2, #0
    f37c:	d002      	beq.n	f384 <RADIO_FSKPayloadReady+0x50>
    f37e:	781b      	ldrb	r3, [r3, #0]
    f380:	2b00      	cmp	r3, #0
    f382:	d118      	bne.n	f3b6 <RADIO_FSKPayloadReady+0x82>
    f384:	0021      	movs	r1, r4
    f386:	312c      	adds	r1, #44	; 0x2c
    f388:	7808      	ldrb	r0, [r1, #0]
    f38a:	b2c0      	uxtb	r0, r0
    f38c:	2800      	cmp	r0, #0
    f38e:	d102      	bne.n	f396 <RADIO_FSKPayloadReady+0x62>
    f390:	2201      	movs	r2, #1
    f392:	4b28      	ldr	r3, [pc, #160]	; (f434 <RADIO_FSKPayloadReady+0x100>)
    f394:	4798      	blx	r3
    f396:	0026      	movs	r6, r4
    f398:	0027      	movs	r7, r4
    f39a:	3658      	adds	r6, #88	; 0x58
    f39c:	7830      	ldrb	r0, [r6, #0]
    f39e:	372c      	adds	r7, #44	; 0x2c
    f3a0:	b2c0      	uxtb	r0, r0
    f3a2:	2800      	cmp	r0, #0
    f3a4:	d110      	bne.n	f3c8 <RADIO_FSKPayloadReady+0x94>
    f3a6:	783a      	ldrb	r2, [r7, #0]
    f3a8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    f3aa:	b2d2      	uxtb	r2, r2
    f3ac:	4b21      	ldr	r3, [pc, #132]	; (f434 <RADIO_FSKPayloadReady+0x100>)
    f3ae:	4798      	blx	r3
    f3b0:	783b      	ldrb	r3, [r7, #0]
    f3b2:	b2db      	uxtb	r3, r3
    f3b4:	7033      	strb	r3, [r6, #0]
    f3b6:	4b20      	ldr	r3, [pc, #128]	; (f438 <RADIO_FSKPayloadReady+0x104>)
    f3b8:	4798      	blx	r3
    f3ba:	4b20      	ldr	r3, [pc, #128]	; (f43c <RADIO_FSKPayloadReady+0x108>)
    f3bc:	2000      	movs	r0, #0
    f3be:	4798      	blx	r3
    f3c0:	2308      	movs	r3, #8
    f3c2:	882a      	ldrh	r2, [r5, #0]
    f3c4:	4313      	orrs	r3, r2
    f3c6:	e011      	b.n	f3ec <RADIO_FSKPayloadReady+0xb8>
    f3c8:	783b      	ldrb	r3, [r7, #0]
    f3ca:	7832      	ldrb	r2, [r6, #0]
    f3cc:	1a9b      	subs	r3, r3, r2
    f3ce:	2b00      	cmp	r3, #0
    f3d0:	ddf1      	ble.n	f3b6 <RADIO_FSKPayloadReady+0x82>
    f3d2:	7833      	ldrb	r3, [r6, #0]
    f3d4:	783a      	ldrb	r2, [r7, #0]
    f3d6:	7831      	ldrb	r1, [r6, #0]
    f3d8:	2000      	movs	r0, #0
    f3da:	1a52      	subs	r2, r2, r1
    f3dc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    f3de:	b2d2      	uxtb	r2, r2
    f3e0:	18c9      	adds	r1, r1, r3
    f3e2:	e7e3      	b.n	f3ac <RADIO_FSKPayloadReady+0x78>
    f3e4:	2380      	movs	r3, #128	; 0x80
    f3e6:	8829      	ldrh	r1, [r5, #0]
    f3e8:	005b      	lsls	r3, r3, #1
    f3ea:	430b      	orrs	r3, r1
    f3ec:	802b      	strh	r3, [r5, #0]
    f3ee:	2002      	movs	r0, #2
    f3f0:	4b13      	ldr	r3, [pc, #76]	; (f440 <RADIO_FSKPayloadReady+0x10c>)
    f3f2:	4798      	blx	r3
    f3f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f3f6:	0023      	movs	r3, r4
    f3f8:	332f      	adds	r3, #47	; 0x2f
    f3fa:	4e0c      	ldr	r6, [pc, #48]	; (f42c <RADIO_FSKPayloadReady+0xf8>)
    f3fc:	7818      	ldrb	r0, [r3, #0]
    f3fe:	47b0      	blx	r6
    f400:	0023      	movs	r3, r4
    f402:	332e      	adds	r3, #46	; 0x2e
    f404:	7818      	ldrb	r0, [r3, #0]
    f406:	47b0      	blx	r6
    f408:	4e0e      	ldr	r6, [pc, #56]	; (f444 <RADIO_FSKPayloadReady+0x110>)
    f40a:	2201      	movs	r2, #1
    f40c:	0031      	movs	r1, r6
    f40e:	2000      	movs	r0, #0
    f410:	4f08      	ldr	r7, [pc, #32]	; (f434 <RADIO_FSKPayloadReady+0x100>)
    f412:	47b8      	blx	r7
    f414:	7832      	ldrb	r2, [r6, #0]
    f416:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    f418:	b2d2      	uxtb	r2, r2
    f41a:	2000      	movs	r0, #0
    f41c:	47b8      	blx	r7
    f41e:	e7cc      	b.n	f3ba <RADIO_FSKPayloadReady+0x86>
    f420:	0000c9f1 	.word	0x0000c9f1
    f424:	20002f50 	.word	0x20002f50
    f428:	2000321c 	.word	0x2000321c
    f42c:	0000d8cd 	.word	0x0000d8cd
    f430:	00004aa1 	.word	0x00004aa1
    f434:	0000ca5d 	.word	0x0000ca5d
    f438:	00004ae1 	.word	0x00004ae1
    f43c:	0000f0c1 	.word	0x0000f0c1
    f440:	0000edd9 	.word	0x0000edd9
    f444:	20002f7c 	.word	0x20002f7c

0000f448 <Radio_SetClockInput>:
    f448:	b510      	push	{r4, lr}
    f44a:	4b08      	ldr	r3, [pc, #32]	; (f46c <Radio_SetClockInput+0x24>)
    f44c:	3355      	adds	r3, #85	; 0x55
    f44e:	781b      	ldrb	r3, [r3, #0]
    f450:	2b00      	cmp	r3, #0
    f452:	d10a      	bne.n	f46a <Radio_SetClockInput+0x22>
    f454:	4b06      	ldr	r3, [pc, #24]	; (f470 <Radio_SetClockInput+0x28>)
    f456:	204b      	movs	r0, #75	; 0x4b
    f458:	4798      	blx	r3
    f45a:	2110      	movs	r1, #16
    f45c:	4301      	orrs	r1, r0
    f45e:	4b05      	ldr	r3, [pc, #20]	; (f474 <Radio_SetClockInput+0x2c>)
    f460:	b2c9      	uxtb	r1, r1
    f462:	204b      	movs	r0, #75	; 0x4b
    f464:	4798      	blx	r3
    f466:	4b04      	ldr	r3, [pc, #16]	; (f478 <Radio_SetClockInput+0x30>)
    f468:	4798      	blx	r3
    f46a:	bd10      	pop	{r4, pc}
    f46c:	20002f50 	.word	0x20002f50
    f470:	0000c9f1 	.word	0x0000c9f1
    f474:	0000c9c9 	.word	0x0000c9c9
    f478:	0000cb11 	.word	0x0000cb11

0000f47c <RADIO_RxHandler>:
    f47c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f47e:	4b34      	ldr	r3, [pc, #208]	; (f550 <RADIO_RxHandler+0xd4>)
    f480:	4798      	blx	r3
    f482:	2000      	movs	r0, #0
    f484:	4b33      	ldr	r3, [pc, #204]	; (f554 <RADIO_RxHandler+0xd8>)
    f486:	4798      	blx	r3
    f488:	4e33      	ldr	r6, [pc, #204]	; (f558 <RADIO_RxHandler+0xdc>)
    f48a:	4b34      	ldr	r3, [pc, #208]	; (f55c <RADIO_RxHandler+0xe0>)
    f48c:	8830      	ldrh	r0, [r6, #0]
    f48e:	2800      	cmp	r0, #0
    f490:	d100      	bne.n	f494 <RADIO_RxHandler+0x18>
    f492:	3004      	adds	r0, #4
    f494:	4798      	blx	r3
    f496:	4c32      	ldr	r4, [pc, #200]	; (f560 <RADIO_RxHandler+0xe4>)
    f498:	4d32      	ldr	r5, [pc, #200]	; (f564 <RADIO_RxHandler+0xe8>)
    f49a:	0023      	movs	r3, r4
    f49c:	3334      	adds	r3, #52	; 0x34
    f49e:	7819      	ldrb	r1, [r3, #0]
    f4a0:	2901      	cmp	r1, #1
    f4a2:	d122      	bne.n	f4ea <RADIO_RxHandler+0x6e>
    f4a4:	2022      	movs	r0, #34	; 0x22
    f4a6:	47a8      	blx	r5
    f4a8:	2100      	movs	r1, #0
    f4aa:	2040      	movs	r0, #64	; 0x40
    f4ac:	47a8      	blx	r5
    f4ae:	2100      	movs	r1, #0
    f4b0:	2041      	movs	r0, #65	; 0x41
    f4b2:	47a8      	blx	r5
    f4b4:	8832      	ldrh	r2, [r6, #0]
    f4b6:	4b2c      	ldr	r3, [pc, #176]	; (f568 <RADIO_RxHandler+0xec>)
    f4b8:	2a00      	cmp	r2, #0
    f4ba:	d131      	bne.n	f520 <RADIO_RxHandler+0xa4>
    f4bc:	0021      	movs	r1, r4
    f4be:	2005      	movs	r0, #5
    f4c0:	3134      	adds	r1, #52	; 0x34
    f4c2:	7809      	ldrb	r1, [r1, #0]
    f4c4:	4798      	blx	r3
    f4c6:	68e3      	ldr	r3, [r4, #12]
    f4c8:	2b00      	cmp	r3, #0
    f4ca:	d00c      	beq.n	f4e6 <RADIO_RxHandler+0x6a>
    f4cc:	8832      	ldrh	r2, [r6, #0]
    f4ce:	2a00      	cmp	r2, #0
    f4d0:	d009      	beq.n	f4e6 <RADIO_RxHandler+0x6a>
    f4d2:	21fa      	movs	r1, #250	; 0xfa
    f4d4:	2200      	movs	r2, #0
    f4d6:	342f      	adds	r4, #47	; 0x2f
    f4d8:	0089      	lsls	r1, r1, #2
    f4da:	7820      	ldrb	r0, [r4, #0]
    f4dc:	4359      	muls	r1, r3
    f4de:	9200      	str	r2, [sp, #0]
    f4e0:	4b22      	ldr	r3, [pc, #136]	; (f56c <RADIO_RxHandler+0xf0>)
    f4e2:	4c23      	ldr	r4, [pc, #140]	; (f570 <RADIO_RxHandler+0xf4>)
    f4e4:	47a0      	blx	r4
    f4e6:	2000      	movs	r0, #0
    f4e8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    f4ea:	0023      	movs	r3, r4
    f4ec:	3338      	adds	r3, #56	; 0x38
    f4ee:	7819      	ldrb	r1, [r3, #0]
    f4f0:	2012      	movs	r0, #18
    f4f2:	47a8      	blx	r5
    f4f4:	0023      	movs	r3, r4
    f4f6:	3339      	adds	r3, #57	; 0x39
    f4f8:	7819      	ldrb	r1, [r3, #0]
    f4fa:	2013      	movs	r0, #19
    f4fc:	47a8      	blx	r5
    f4fe:	210c      	movs	r1, #12
    f500:	2040      	movs	r0, #64	; 0x40
    f502:	47a8      	blx	r5
    f504:	2100      	movs	r1, #0
    f506:	2041      	movs	r0, #65	; 0x41
    f508:	47a8      	blx	r5
    f50a:	0022      	movs	r2, r4
    f50c:	2300      	movs	r3, #0
    f50e:	3256      	adds	r2, #86	; 0x56
    f510:	8013      	strh	r3, [r2, #0]
    f512:	0022      	movs	r2, r4
    f514:	322c      	adds	r2, #44	; 0x2c
    f516:	7013      	strb	r3, [r2, #0]
    f518:	0022      	movs	r2, r4
    f51a:	3258      	adds	r2, #88	; 0x58
    f51c:	7013      	strb	r3, [r2, #0]
    f51e:	e7c9      	b.n	f4b4 <RADIO_RxHandler+0x38>
    f520:	0022      	movs	r2, r4
    f522:	3234      	adds	r2, #52	; 0x34
    f524:	7811      	ldrb	r1, [r2, #0]
    f526:	2200      	movs	r2, #0
    f528:	2901      	cmp	r1, #1
    f52a:	d101      	bne.n	f530 <RADIO_RxHandler+0xb4>
    f52c:	2006      	movs	r0, #6
    f52e:	e7c9      	b.n	f4c4 <RADIO_RxHandler+0x48>
    f530:	0011      	movs	r1, r2
    f532:	2005      	movs	r0, #5
    f534:	4798      	blx	r3
    f536:	21fa      	movs	r1, #250	; 0xfa
    f538:	8833      	ldrh	r3, [r6, #0]
    f53a:	0089      	lsls	r1, r1, #2
    f53c:	4359      	muls	r1, r3
    f53e:	0023      	movs	r3, r4
    f540:	2200      	movs	r2, #0
    f542:	332e      	adds	r3, #46	; 0x2e
    f544:	7818      	ldrb	r0, [r3, #0]
    f546:	4d0a      	ldr	r5, [pc, #40]	; (f570 <RADIO_RxHandler+0xf4>)
    f548:	9200      	str	r2, [sp, #0]
    f54a:	4b0a      	ldr	r3, [pc, #40]	; (f574 <RADIO_RxHandler+0xf8>)
    f54c:	47a8      	blx	r5
    f54e:	e7ba      	b.n	f4c6 <RADIO_RxHandler+0x4a>
    f550:	0000f449 	.word	0x0000f449
    f554:	0000f08d 	.word	0x0000f08d
    f558:	20002090 	.word	0x20002090
    f55c:	0000e819 	.word	0x0000e819
    f560:	20002f50 	.word	0x20002f50
    f564:	0000c9c9 	.word	0x0000c9c9
    f568:	0000dbf1 	.word	0x0000dbf1
    f56c:	0000f0f5 	.word	0x0000f0f5
    f570:	0000d5b5 	.word	0x0000d5b5
    f574:	0000f185 	.word	0x0000f185

0000f578 <Radio_ResetClockInput>:
    f578:	b510      	push	{r4, lr}
    f57a:	4b04      	ldr	r3, [pc, #16]	; (f58c <Radio_ResetClockInput+0x14>)
    f57c:	3355      	adds	r3, #85	; 0x55
    f57e:	781b      	ldrb	r3, [r3, #0]
    f580:	2b00      	cmp	r3, #0
    f582:	d101      	bne.n	f588 <Radio_ResetClockInput+0x10>
    f584:	4b02      	ldr	r3, [pc, #8]	; (f590 <Radio_ResetClockInput+0x18>)
    f586:	4798      	blx	r3
    f588:	bd10      	pop	{r4, pc}
    f58a:	46c0      	nop			; (mov r8, r8)
    f58c:	20002f50 	.word	0x20002f50
    f590:	0000cb2d 	.word	0x0000cb2d

0000f594 <RADIO_InitDefaultAttributes>:
    f594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f596:	2501      	movs	r5, #1
    f598:	4b64      	ldr	r3, [pc, #400]	; (f72c <RADIO_InitDefaultAttributes+0x198>)
    f59a:	4c65      	ldr	r4, [pc, #404]	; (f730 <RADIO_InitDefaultAttributes+0x19c>)
    f59c:	701d      	strb	r5, [r3, #0]
    f59e:	4b65      	ldr	r3, [pc, #404]	; (f734 <RADIO_InitDefaultAttributes+0x1a0>)
    f5a0:	2207      	movs	r2, #7
    f5a2:	6023      	str	r3, [r4, #0]
    f5a4:	4b64      	ldr	r3, [pc, #400]	; (f738 <RADIO_InitDefaultAttributes+0x1a4>)
    f5a6:	18a1      	adds	r1, r4, r2
    f5a8:	6063      	str	r3, [r4, #4]
    f5aa:	4b64      	ldr	r3, [pc, #400]	; (f73c <RADIO_InitDefaultAttributes+0x1a8>)
    f5ac:	0027      	movs	r7, r4
    f5ae:	60a3      	str	r3, [r4, #8]
    f5b0:	0023      	movs	r3, r4
    f5b2:	3334      	adds	r3, #52	; 0x34
    f5b4:	701d      	strb	r5, [r3, #0]
    f5b6:	0023      	movs	r3, r4
    f5b8:	3336      	adds	r3, #54	; 0x36
    f5ba:	701a      	strb	r2, [r3, #0]
    f5bc:	1ce3      	adds	r3, r4, #3
    f5be:	77dd      	strb	r5, [r3, #31]
    f5c0:	0023      	movs	r3, r4
    f5c2:	3333      	adds	r3, #51	; 0x33
    f5c4:	701d      	strb	r5, [r3, #0]
    f5c6:	2300      	movs	r3, #0
    f5c8:	77cb      	strb	r3, [r1, #31]
    f5ca:	2108      	movs	r1, #8
    f5cc:	82a1      	strh	r1, [r4, #20]
    f5ce:	0021      	movs	r1, r4
    f5d0:	3135      	adds	r1, #53	; 0x35
    f5d2:	700a      	strb	r2, [r1, #0]
    f5d4:	1d22      	adds	r2, r4, #4
    f5d6:	77d5      	strb	r5, [r2, #31]
    f5d8:	1d62      	adds	r2, r4, #5
    f5da:	77d3      	strb	r3, [r2, #31]
    f5dc:	1da2      	adds	r2, r4, #6
    f5de:	77d3      	strb	r3, [r2, #31]
    f5e0:	2194      	movs	r1, #148	; 0x94
    f5e2:	22c1      	movs	r2, #193	; 0xc1
    f5e4:	76a1      	strb	r1, [r4, #26]
    f5e6:	7662      	strb	r2, [r4, #25]
    f5e8:	76e2      	strb	r2, [r4, #27]
    f5ea:	3991      	subs	r1, #145	; 0x91
    f5ec:	1ca2      	adds	r2, r4, #2
    f5ee:	77d1      	strb	r1, [r2, #31]
    f5f0:	2234      	movs	r2, #52	; 0x34
    f5f2:	7622      	strb	r2, [r4, #24]
    f5f4:	0022      	movs	r2, r4
    f5f6:	317d      	adds	r1, #125	; 0x7d
    f5f8:	3232      	adds	r2, #50	; 0x32
    f5fa:	7011      	strb	r1, [r2, #0]
    f5fc:	4a50      	ldr	r2, [pc, #320]	; (f740 <RADIO_InitDefaultAttributes+0x1ac>)
    f5fe:	397e      	subs	r1, #126	; 0x7e
    f600:	60e2      	str	r2, [r4, #12]
    f602:	0022      	movs	r2, r4
    f604:	3237      	adds	r2, #55	; 0x37
    f606:	7011      	strb	r1, [r2, #0]
    f608:	0022      	movs	r2, r4
    f60a:	3109      	adds	r1, #9
    f60c:	3238      	adds	r2, #56	; 0x38
    f60e:	7011      	strb	r1, [r2, #0]
    f610:	0022      	movs	r2, r4
    f612:	3107      	adds	r1, #7
    f614:	3239      	adds	r2, #57	; 0x39
    f616:	7011      	strb	r1, [r2, #0]
    f618:	0022      	movs	r2, r4
    f61a:	322c      	adds	r2, #44	; 0x2c
    f61c:	7013      	strb	r3, [r2, #0]
    f61e:	4a49      	ldr	r2, [pc, #292]	; (f744 <RADIO_InitDefaultAttributes+0x1b0>)
    f620:	82e3      	strh	r3, [r4, #22]
    f622:	62a2      	str	r2, [r4, #40]	; 0x28
    f624:	0022      	movs	r2, r4
    f626:	324c      	adds	r2, #76	; 0x4c
    f628:	8013      	strh	r3, [r2, #0]
    f62a:	0022      	movs	r2, r4
    f62c:	324e      	adds	r2, #78	; 0x4e
    f62e:	7013      	strb	r3, [r2, #0]
    f630:	0022      	movs	r2, r4
    f632:	324f      	adds	r2, #79	; 0x4f
    f634:	7013      	strb	r3, [r2, #0]
    f636:	0022      	movs	r2, r4
    f638:	3240      	adds	r2, #64	; 0x40
    f63a:	7013      	strb	r3, [r2, #0]
    f63c:	0022      	movs	r2, r4
    f63e:	3241      	adds	r2, #65	; 0x41
    f640:	7013      	strb	r3, [r2, #0]
    f642:	0022      	movs	r2, r4
    f644:	3254      	adds	r2, #84	; 0x54
    f646:	7013      	strb	r3, [r2, #0]
    f648:	0022      	movs	r2, r4
    f64a:	3255      	adds	r2, #85	; 0x55
    f64c:	7015      	strb	r5, [r2, #0]
    f64e:	0022      	movs	r2, r4
    f650:	3258      	adds	r2, #88	; 0x58
    f652:	6463      	str	r3, [r4, #68]	; 0x44
    f654:	64a3      	str	r3, [r4, #72]	; 0x48
    f656:	87a3      	strh	r3, [r4, #60]	; 0x3c
    f658:	87e3      	strh	r3, [r4, #62]	; 0x3e
    f65a:	7013      	strb	r3, [r2, #0]
    f65c:	3730      	adds	r7, #48	; 0x30
    f65e:	783b      	ldrb	r3, [r7, #0]
    f660:	2b00      	cmp	r3, #0
    f662:	d151      	bne.n	f708 <RADIO_InitDefaultAttributes+0x174>
    f664:	4838      	ldr	r0, [pc, #224]	; (f748 <RADIO_InitDefaultAttributes+0x1b4>)
    f666:	4e39      	ldr	r6, [pc, #228]	; (f74c <RADIO_InitDefaultAttributes+0x1b8>)
    f668:	47b0      	blx	r6
    f66a:	2808      	cmp	r0, #8
    f66c:	d149      	bne.n	f702 <RADIO_InitDefaultAttributes+0x16e>
    f66e:	4838      	ldr	r0, [pc, #224]	; (f750 <RADIO_InitDefaultAttributes+0x1bc>)
    f670:	47b0      	blx	r6
    f672:	2808      	cmp	r0, #8
    f674:	d145      	bne.n	f702 <RADIO_InitDefaultAttributes+0x16e>
    f676:	4837      	ldr	r0, [pc, #220]	; (f754 <RADIO_InitDefaultAttributes+0x1c0>)
    f678:	47b0      	blx	r6
    f67a:	2808      	cmp	r0, #8
    f67c:	d141      	bne.n	f702 <RADIO_InitDefaultAttributes+0x16e>
    f67e:	4836      	ldr	r0, [pc, #216]	; (f758 <RADIO_InitDefaultAttributes+0x1c4>)
    f680:	47b0      	blx	r6
    f682:	2808      	cmp	r0, #8
    f684:	d13d      	bne.n	f702 <RADIO_InitDefaultAttributes+0x16e>
    f686:	703d      	strb	r5, [r7, #0]
    f688:	4b34      	ldr	r3, [pc, #208]	; (f75c <RADIO_InitDefaultAttributes+0x1c8>)
    f68a:	4798      	blx	r3
    f68c:	4b34      	ldr	r3, [pc, #208]	; (f760 <RADIO_InitDefaultAttributes+0x1cc>)
    f68e:	4798      	blx	r3
    f690:	2800      	cmp	r0, #0
    f692:	d107      	bne.n	f6a4 <RADIO_InitDefaultAttributes+0x110>
    f694:	0023      	movs	r3, r4
    f696:	3355      	adds	r3, #85	; 0x55
    f698:	7018      	strb	r0, [r3, #0]
    f69a:	4b32      	ldr	r3, [pc, #200]	; (f764 <RADIO_InitDefaultAttributes+0x1d0>)
    f69c:	4798      	blx	r3
    f69e:	0023      	movs	r3, r4
    f6a0:	3354      	adds	r3, #84	; 0x54
    f6a2:	7018      	strb	r0, [r3, #0]
    f6a4:	4b30      	ldr	r3, [pc, #192]	; (f768 <RADIO_InitDefaultAttributes+0x1d4>)
    f6a6:	4798      	blx	r3
    f6a8:	2201      	movs	r2, #1
    f6aa:	2100      	movs	r1, #0
    f6ac:	0010      	movs	r0, r2
    f6ae:	4f2f      	ldr	r7, [pc, #188]	; (f76c <RADIO_InitDefaultAttributes+0x1d8>)
    f6b0:	47b8      	blx	r7
    f6b2:	6820      	ldr	r0, [r4, #0]
    f6b4:	4b2e      	ldr	r3, [pc, #184]	; (f770 <RADIO_InitDefaultAttributes+0x1dc>)
    f6b6:	4798      	blx	r3
    f6b8:	2142      	movs	r1, #66	; 0x42
    f6ba:	203b      	movs	r0, #59	; 0x3b
    f6bc:	4d2d      	ldr	r5, [pc, #180]	; (f774 <RADIO_InitDefaultAttributes+0x1e0>)
    f6be:	47a8      	blx	r5
    f6c0:	203b      	movs	r0, #59	; 0x3b
    f6c2:	4b2d      	ldr	r3, [pc, #180]	; (f778 <RADIO_InitDefaultAttributes+0x1e4>)
    f6c4:	4798      	blx	r3
    f6c6:	2620      	movs	r6, #32
    f6c8:	4006      	ands	r6, r0
    f6ca:	d1f9      	bne.n	f6c0 <RADIO_InitDefaultAttributes+0x12c>
    f6cc:	2123      	movs	r1, #35	; 0x23
    f6ce:	200c      	movs	r0, #12
    f6d0:	47a8      	blx	r5
    f6d2:	21aa      	movs	r1, #170	; 0xaa
    f6d4:	201f      	movs	r0, #31
    f6d6:	47a8      	blx	r5
    f6d8:	21ff      	movs	r1, #255	; 0xff
    f6da:	2032      	movs	r0, #50	; 0x32
    f6dc:	47a8      	blx	r5
    f6de:	2140      	movs	r1, #64	; 0x40
    f6e0:	2031      	movs	r0, #49	; 0x31
    f6e2:	47a8      	blx	r5
    f6e4:	2201      	movs	r2, #1
    f6e6:	0030      	movs	r0, r6
    f6e8:	0011      	movs	r1, r2
    f6ea:	47b8      	blx	r7
    f6ec:	21ff      	movs	r1, #255	; 0xff
    f6ee:	2023      	movs	r0, #35	; 0x23
    f6f0:	47a8      	blx	r5
    f6f2:	4b21      	ldr	r3, [pc, #132]	; (f778 <RADIO_InitDefaultAttributes+0x1e4>)
    f6f4:	2042      	movs	r0, #66	; 0x42
    f6f6:	4798      	blx	r3
    f6f8:	3431      	adds	r4, #49	; 0x31
    f6fa:	4b20      	ldr	r3, [pc, #128]	; (f77c <RADIO_InitDefaultAttributes+0x1e8>)
    f6fc:	7020      	strb	r0, [r4, #0]
    f6fe:	4798      	blx	r3
    f700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f702:	4b1f      	ldr	r3, [pc, #124]	; (f780 <RADIO_InitDefaultAttributes+0x1ec>)
    f704:	4798      	blx	r3
    f706:	e7bf      	b.n	f688 <RADIO_InitDefaultAttributes+0xf4>
    f708:	0023      	movs	r3, r4
    f70a:	332d      	adds	r3, #45	; 0x2d
    f70c:	4d1d      	ldr	r5, [pc, #116]	; (f784 <RADIO_InitDefaultAttributes+0x1f0>)
    f70e:	7818      	ldrb	r0, [r3, #0]
    f710:	47a8      	blx	r5
    f712:	0023      	movs	r3, r4
    f714:	332e      	adds	r3, #46	; 0x2e
    f716:	7818      	ldrb	r0, [r3, #0]
    f718:	47a8      	blx	r5
    f71a:	0023      	movs	r3, r4
    f71c:	332f      	adds	r3, #47	; 0x2f
    f71e:	7818      	ldrb	r0, [r3, #0]
    f720:	47a8      	blx	r5
    f722:	0023      	movs	r3, r4
    f724:	3350      	adds	r3, #80	; 0x50
    f726:	7818      	ldrb	r0, [r3, #0]
    f728:	47a8      	blx	r5
    f72a:	e7ad      	b.n	f688 <RADIO_InitDefaultAttributes+0xf4>
    f72c:	2000321f 	.word	0x2000321f
    f730:	20002f50 	.word	0x20002f50
    f734:	33be27a0 	.word	0x33be27a0
    f738:	000061a8 	.word	0x000061a8
    f73c:	0000c350 	.word	0x0000c350
    f740:	00003a98 	.word	0x00003a98
    f744:	2000311c 	.word	0x2000311c
    f748:	20002f7d 	.word	0x20002f7d
    f74c:	0000d581 	.word	0x0000d581
    f750:	20002f7e 	.word	0x20002f7e
    f754:	20002f7f 	.word	0x20002f7f
    f758:	20002fa0 	.word	0x20002fa0
    f75c:	0000c989 	.word	0x0000c989
    f760:	0000cb0d 	.word	0x0000cb0d
    f764:	0000cb09 	.word	0x0000cb09
    f768:	0000f449 	.word	0x0000f449
    f76c:	0000dbf1 	.word	0x0000dbf1
    f770:	0000e7d1 	.word	0x0000e7d1
    f774:	0000c9c9 	.word	0x0000c9c9
    f778:	0000c9f1 	.word	0x0000c9f1
    f77c:	0000f579 	.word	0x0000f579
    f780:	0000d4c5 	.word	0x0000d4c5
    f784:	0000d8cd 	.word	0x0000d8cd

0000f788 <RADIO_Receive>:
    f788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f78a:	7803      	ldrb	r3, [r0, #0]
    f78c:	0006      	movs	r6, r0
    f78e:	4d24      	ldr	r5, [pc, #144]	; (f820 <RADIO_Receive+0x98>)
    f790:	2b00      	cmp	r3, #0
    f792:	d11d      	bne.n	f7d0 <RADIO_Receive+0x48>
    f794:	782b      	ldrb	r3, [r5, #0]
    f796:	2004      	movs	r0, #4
    f798:	2b01      	cmp	r3, #1
    f79a:	d118      	bne.n	f7ce <RADIO_Receive+0x46>
    f79c:	4c21      	ldr	r4, [pc, #132]	; (f824 <RADIO_Receive+0x9c>)
    f79e:	4f22      	ldr	r7, [pc, #136]	; (f828 <RADIO_Receive+0xa0>)
    f7a0:	0023      	movs	r3, r4
    f7a2:	332f      	adds	r3, #47	; 0x2f
    f7a4:	7818      	ldrb	r0, [r3, #0]
    f7a6:	47b8      	blx	r7
    f7a8:	0023      	movs	r3, r4
    f7aa:	3334      	adds	r3, #52	; 0x34
    f7ac:	781b      	ldrb	r3, [r3, #0]
    f7ae:	2b00      	cmp	r3, #0
    f7b0:	d102      	bne.n	f7b8 <RADIO_Receive+0x30>
    f7b2:	342e      	adds	r4, #46	; 0x2e
    f7b4:	7820      	ldrb	r0, [r4, #0]
    f7b6:	47b8      	blx	r7
    f7b8:	8872      	ldrh	r2, [r6, #2]
    f7ba:	4b1c      	ldr	r3, [pc, #112]	; (f82c <RADIO_Receive+0xa4>)
    f7bc:	2008      	movs	r0, #8
    f7be:	801a      	strh	r2, [r3, #0]
    f7c0:	2304      	movs	r3, #4
    f7c2:	702b      	strb	r3, [r5, #0]
    f7c4:	4b1a      	ldr	r3, [pc, #104]	; (f830 <RADIO_Receive+0xa8>)
    f7c6:	4798      	blx	r3
    f7c8:	4b1a      	ldr	r3, [pc, #104]	; (f834 <RADIO_Receive+0xac>)
    f7ca:	4798      	blx	r3
    f7cc:	2000      	movs	r0, #0
    f7ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f7d0:	782b      	ldrb	r3, [r5, #0]
    f7d2:	2000      	movs	r0, #0
    f7d4:	2b01      	cmp	r3, #1
    f7d6:	d0fa      	beq.n	f7ce <RADIO_Receive+0x46>
    f7d8:	782b      	ldrb	r3, [r5, #0]
    f7da:	3003      	adds	r0, #3
    f7dc:	2b04      	cmp	r3, #4
    f7de:	d1f6      	bne.n	f7ce <RADIO_Receive+0x46>
    f7e0:	4c10      	ldr	r4, [pc, #64]	; (f824 <RADIO_Receive+0x9c>)
    f7e2:	4e11      	ldr	r6, [pc, #68]	; (f828 <RADIO_Receive+0xa0>)
    f7e4:	0023      	movs	r3, r4
    f7e6:	332f      	adds	r3, #47	; 0x2f
    f7e8:	7818      	ldrb	r0, [r3, #0]
    f7ea:	47b0      	blx	r6
    f7ec:	0023      	movs	r3, r4
    f7ee:	3334      	adds	r3, #52	; 0x34
    f7f0:	781b      	ldrb	r3, [r3, #0]
    f7f2:	2b00      	cmp	r3, #0
    f7f4:	d103      	bne.n	f7fe <RADIO_Receive+0x76>
    f7f6:	0023      	movs	r3, r4
    f7f8:	332e      	adds	r3, #46	; 0x2e
    f7fa:	7818      	ldrb	r0, [r3, #0]
    f7fc:	47b0      	blx	r6
    f7fe:	2200      	movs	r2, #0
    f800:	3434      	adds	r4, #52	; 0x34
    f802:	7821      	ldrb	r1, [r4, #0]
    f804:	0010      	movs	r0, r2
    f806:	4b0c      	ldr	r3, [pc, #48]	; (f838 <RADIO_Receive+0xb0>)
    f808:	4798      	blx	r3
    f80a:	4b0c      	ldr	r3, [pc, #48]	; (f83c <RADIO_Receive+0xb4>)
    f80c:	4798      	blx	r3
    f80e:	2301      	movs	r3, #1
    f810:	2008      	movs	r0, #8
    f812:	4c0b      	ldr	r4, [pc, #44]	; (f840 <RADIO_Receive+0xb8>)
    f814:	702b      	strb	r3, [r5, #0]
    f816:	47a0      	blx	r4
    f818:	2002      	movs	r0, #2
    f81a:	47a0      	blx	r4
    f81c:	e7d6      	b.n	f7cc <RADIO_Receive+0x44>
    f81e:	46c0      	nop			; (mov r8, r8)
    f820:	2000321f 	.word	0x2000321f
    f824:	20002f50 	.word	0x20002f50
    f828:	0000d8cd 	.word	0x0000d8cd
    f82c:	20002090 	.word	0x20002090
    f830:	0000edd9 	.word	0x0000edd9
    f834:	0000f449 	.word	0x0000f449
    f838:	0000dbf1 	.word	0x0000dbf1
    f83c:	0000f579 	.word	0x0000f579
    f840:	0000ee05 	.word	0x0000ee05

0000f844 <RADIO_TxHandler>:
    f844:	b5f0      	push	{r4, r5, r6, r7, lr}
    f846:	2500      	movs	r5, #0
    f848:	b087      	sub	sp, #28
    f84a:	ae03      	add	r6, sp, #12
    f84c:	4f56      	ldr	r7, [pc, #344]	; (f9a8 <RADIO_TxHandler+0x164>)
    f84e:	7035      	strb	r5, [r6, #0]
    f850:	47b8      	blx	r7
    f852:	4c56      	ldr	r4, [pc, #344]	; (f9ac <RADIO_TxHandler+0x168>)
    f854:	0023      	movs	r3, r4
    f856:	332d      	adds	r3, #45	; 0x2d
    f858:	7818      	ldrb	r0, [r3, #0]
    f85a:	4b55      	ldr	r3, [pc, #340]	; (f9b0 <RADIO_TxHandler+0x16c>)
    f85c:	4798      	blx	r3
    f85e:	0023      	movs	r3, r4
    f860:	3341      	adds	r3, #65	; 0x41
    f862:	781b      	ldrb	r3, [r3, #0]
    f864:	42ab      	cmp	r3, r5
    f866:	d021      	beq.n	f8ac <RADIO_TxHandler+0x68>
    f868:	2214      	movs	r2, #20
    f86a:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    f86c:	4353      	muls	r3, r2
    f86e:	0022      	movs	r2, r4
    f870:	3240      	adds	r2, #64	; 0x40
    f872:	7013      	strb	r3, [r2, #0]
    f874:	47b8      	blx	r7
    f876:	0028      	movs	r0, r5
    f878:	4b4e      	ldr	r3, [pc, #312]	; (f9b4 <RADIO_TxHandler+0x170>)
    f87a:	4798      	blx	r3
    f87c:	6820      	ldr	r0, [r4, #0]
    f87e:	4b4e      	ldr	r3, [pc, #312]	; (f9b8 <RADIO_TxHandler+0x174>)
    f880:	4798      	blx	r3
    f882:	0023      	movs	r3, r4
    f884:	2201      	movs	r2, #1
    f886:	334c      	adds	r3, #76	; 0x4c
    f888:	0029      	movs	r1, r5
    f88a:	0028      	movs	r0, r5
    f88c:	4f4b      	ldr	r7, [pc, #300]	; (f9bc <RADIO_TxHandler+0x178>)
    f88e:	801d      	strh	r5, [r3, #0]
    f890:	47b8      	blx	r7
    f892:	2109      	movs	r1, #9
    f894:	2012      	movs	r0, #18
    f896:	4b4a      	ldr	r3, [pc, #296]	; (f9c0 <RADIO_TxHandler+0x17c>)
    f898:	4798      	blx	r3
    f89a:	2201      	movs	r2, #1
    f89c:	0029      	movs	r1, r5
    f89e:	2005      	movs	r0, #5
    f8a0:	47b8      	blx	r7
    f8a2:	0023      	movs	r3, r4
    f8a4:	3340      	adds	r3, #64	; 0x40
    f8a6:	781b      	ldrb	r3, [r3, #0]
    f8a8:	42ab      	cmp	r3, r5
    f8aa:	d846      	bhi.n	f93a <RADIO_TxHandler+0xf6>
    f8ac:	7833      	ldrb	r3, [r6, #0]
    f8ae:	2b07      	cmp	r3, #7
    f8b0:	d076      	beq.n	f9a0 <RADIO_TxHandler+0x15c>
    f8b2:	2001      	movs	r0, #1
    f8b4:	4b3f      	ldr	r3, [pc, #252]	; (f9b4 <RADIO_TxHandler+0x170>)
    f8b6:	4798      	blx	r3
    f8b8:	4b42      	ldr	r3, [pc, #264]	; (f9c4 <RADIO_TxHandler+0x180>)
    f8ba:	2004      	movs	r0, #4
    f8bc:	4798      	blx	r3
    f8be:	4b42      	ldr	r3, [pc, #264]	; (f9c8 <RADIO_TxHandler+0x184>)
    f8c0:	4d3f      	ldr	r5, [pc, #252]	; (f9c0 <RADIO_TxHandler+0x17c>)
    f8c2:	781f      	ldrb	r7, [r3, #0]
    f8c4:	4e41      	ldr	r6, [pc, #260]	; (f9cc <RADIO_TxHandler+0x188>)
    f8c6:	2f01      	cmp	r7, #1
    f8c8:	d144      	bne.n	f954 <RADIO_TxHandler+0x110>
    f8ca:	7831      	ldrb	r1, [r6, #0]
    f8cc:	2022      	movs	r0, #34	; 0x22
    f8ce:	47a8      	blx	r5
    f8d0:	4b3f      	ldr	r3, [pc, #252]	; (f9d0 <RADIO_TxHandler+0x18c>)
    f8d2:	200a      	movs	r0, #10
    f8d4:	4798      	blx	r3
    f8d6:	21f0      	movs	r1, #240	; 0xf0
    f8d8:	4008      	ands	r0, r1
    f8da:	39e8      	subs	r1, #232	; 0xe8
    f8dc:	4301      	orrs	r1, r0
    f8de:	200a      	movs	r0, #10
    f8e0:	47a8      	blx	r5
    f8e2:	2140      	movs	r1, #64	; 0x40
    f8e4:	0008      	movs	r0, r1
    f8e6:	47a8      	blx	r5
    f8e8:	2100      	movs	r1, #0
    f8ea:	2041      	movs	r0, #65	; 0x41
    f8ec:	47a8      	blx	r5
    f8ee:	4b36      	ldr	r3, [pc, #216]	; (f9c8 <RADIO_TxHandler+0x184>)
    f8f0:	003a      	movs	r2, r7
    f8f2:	7819      	ldrb	r1, [r3, #0]
    f8f4:	0038      	movs	r0, r7
    f8f6:	4b31      	ldr	r3, [pc, #196]	; (f9bc <RADIO_TxHandler+0x178>)
    f8f8:	4798      	blx	r3
    f8fa:	4b36      	ldr	r3, [pc, #216]	; (f9d4 <RADIO_TxHandler+0x190>)
    f8fc:	7832      	ldrb	r2, [r6, #0]
    f8fe:	6819      	ldr	r1, [r3, #0]
    f900:	2000      	movs	r0, #0
    f902:	4b35      	ldr	r3, [pc, #212]	; (f9d8 <RADIO_TxHandler+0x194>)
    f904:	4798      	blx	r3
    f906:	0023      	movs	r3, r4
    f908:	3334      	adds	r3, #52	; 0x34
    f90a:	7819      	ldrb	r1, [r3, #0]
    f90c:	2200      	movs	r2, #0
    f90e:	2003      	movs	r0, #3
    f910:	4b2a      	ldr	r3, [pc, #168]	; (f9bc <RADIO_TxHandler+0x178>)
    f912:	4798      	blx	r3
    f914:	4b31      	ldr	r3, [pc, #196]	; (f9dc <RADIO_TxHandler+0x198>)
    f916:	4798      	blx	r3
    f918:	4b31      	ldr	r3, [pc, #196]	; (f9e0 <RADIO_TxHandler+0x19c>)
    f91a:	6018      	str	r0, [r3, #0]
    f91c:	6059      	str	r1, [r3, #4]
    f91e:	68e3      	ldr	r3, [r4, #12]
    f920:	2b00      	cmp	r3, #0
    f922:	d03d      	beq.n	f9a0 <RADIO_TxHandler+0x15c>
    f924:	21fa      	movs	r1, #250	; 0xfa
    f926:	2200      	movs	r2, #0
    f928:	342f      	adds	r4, #47	; 0x2f
    f92a:	0089      	lsls	r1, r1, #2
    f92c:	4359      	muls	r1, r3
    f92e:	7820      	ldrb	r0, [r4, #0]
    f930:	4b2c      	ldr	r3, [pc, #176]	; (f9e4 <RADIO_TxHandler+0x1a0>)
    f932:	9200      	str	r2, [sp, #0]
    f934:	4c2c      	ldr	r4, [pc, #176]	; (f9e8 <RADIO_TxHandler+0x1a4>)
    f936:	47a0      	blx	r4
    f938:	e032      	b.n	f9a0 <RADIO_TxHandler+0x15c>
    f93a:	4f2c      	ldr	r7, [pc, #176]	; (f9ec <RADIO_TxHandler+0x1a8>)
    f93c:	4b2c      	ldr	r3, [pc, #176]	; (f9f0 <RADIO_TxHandler+0x1ac>)
    f93e:	0038      	movs	r0, r7
    f940:	4798      	blx	r3
    f942:	233e      	movs	r3, #62	; 0x3e
    f944:	5ee2      	ldrsh	r2, [r4, r3]
    f946:	2100      	movs	r1, #0
    f948:	5e7b      	ldrsh	r3, [r7, r1]
    f94a:	429a      	cmp	r2, r3
    f94c:	db14      	blt.n	f978 <RADIO_TxHandler+0x134>
    f94e:	3501      	adds	r5, #1
    f950:	b2ed      	uxtb	r5, r5
    f952:	e7a6      	b.n	f8a2 <RADIO_TxHandler+0x5e>
    f954:	2100      	movs	r1, #0
    f956:	2040      	movs	r0, #64	; 0x40
    f958:	47a8      	blx	r5
    f95a:	2100      	movs	r1, #0
    f95c:	2041      	movs	r0, #65	; 0x41
    f95e:	47a8      	blx	r5
    f960:	0023      	movs	r3, r4
    f962:	2000      	movs	r0, #0
    f964:	3358      	adds	r3, #88	; 0x58
    f966:	7831      	ldrb	r1, [r6, #0]
    f968:	7018      	strb	r0, [r3, #0]
    f96a:	47a8      	blx	r5
    f96c:	4b19      	ldr	r3, [pc, #100]	; (f9d4 <RADIO_TxHandler+0x190>)
    f96e:	7831      	ldrb	r1, [r6, #0]
    f970:	6818      	ldr	r0, [r3, #0]
    f972:	4b20      	ldr	r3, [pc, #128]	; (f9f4 <RADIO_TxHandler+0x1b0>)
    f974:	4798      	blx	r3
    f976:	e7c6      	b.n	f906 <RADIO_TxHandler+0xc2>
    f978:	2000      	movs	r0, #0
    f97a:	4b1f      	ldr	r3, [pc, #124]	; (f9f8 <RADIO_TxHandler+0x1b4>)
    f97c:	4798      	blx	r3
    f97e:	4b1f      	ldr	r3, [pc, #124]	; (f9fc <RADIO_TxHandler+0x1b8>)
    f980:	4798      	blx	r3
    f982:	2307      	movs	r3, #7
    f984:	2201      	movs	r2, #1
    f986:	7033      	strb	r3, [r6, #0]
    f988:	4b1d      	ldr	r3, [pc, #116]	; (fa00 <RADIO_TxHandler+0x1bc>)
    f98a:	701a      	strb	r2, [r3, #0]
    f98c:	4b1d      	ldr	r3, [pc, #116]	; (fa04 <RADIO_TxHandler+0x1c0>)
    f98e:	781b      	ldrb	r3, [r3, #0]
    f990:	079b      	lsls	r3, r3, #30
    f992:	d58b      	bpl.n	f8ac <RADIO_TxHandler+0x68>
    f994:	6923      	ldr	r3, [r4, #16]
    f996:	2b00      	cmp	r3, #0
    f998:	d088      	beq.n	f8ac <RADIO_TxHandler+0x68>
    f99a:	0031      	movs	r1, r6
    f99c:	2002      	movs	r0, #2
    f99e:	4798      	blx	r3
    f9a0:	2000      	movs	r0, #0
    f9a2:	b007      	add	sp, #28
    f9a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f9a6:	46c0      	nop			; (mov r8, r8)
    f9a8:	0000f449 	.word	0x0000f449
    f9ac:	20002f50 	.word	0x20002f50
    f9b0:	0000d8cd 	.word	0x0000d8cd
    f9b4:	0000f08d 	.word	0x0000f08d
    f9b8:	0000e7d1 	.word	0x0000e7d1
    f9bc:	0000dbf1 	.word	0x0000dbf1
    f9c0:	0000c9c9 	.word	0x0000c9c9
    f9c4:	0000e819 	.word	0x0000e819
    f9c8:	20002f84 	.word	0x20002f84
    f9cc:	200020a4 	.word	0x200020a4
    f9d0:	0000c9f1 	.word	0x0000c9f1
    f9d4:	200020a0 	.word	0x200020a0
    f9d8:	0000ca1d 	.word	0x0000ca1d
    f9dc:	0000d55d 	.word	0x0000d55d
    f9e0:	20002098 	.word	0x20002098
    f9e4:	0000f0f5 	.word	0x0000f0f5
    f9e8:	0000d5b5 	.word	0x0000d5b5
    f9ec:	2000208e 	.word	0x2000208e
    f9f0:	0000de0d 	.word	0x0000de0d
    f9f4:	0000ef09 	.word	0x0000ef09
    f9f8:	0000f0c1 	.word	0x0000f0c1
    f9fc:	0000f579 	.word	0x0000f579
    fa00:	2000321f 	.word	0x2000321f
    fa04:	2000321e 	.word	0x2000321e

0000fa08 <RADIO_TxDoneHandler>:
    fa08:	b5f0      	push	{r4, r5, r6, r7, lr}
    fa0a:	4b35      	ldr	r3, [pc, #212]	; (fae0 <RADIO_TxDoneHandler+0xd8>)
    fa0c:	b087      	sub	sp, #28
    fa0e:	881a      	ldrh	r2, [r3, #0]
    fa10:	06d2      	lsls	r2, r2, #27
    fa12:	0fd2      	lsrs	r2, r2, #31
    fa14:	9200      	str	r2, [sp, #0]
    fa16:	466a      	mov	r2, sp
    fa18:	7810      	ldrb	r0, [r2, #0]
    fa1a:	881a      	ldrh	r2, [r3, #0]
    fa1c:	2801      	cmp	r0, #1
    fa1e:	d12b      	bne.n	fa78 <RADIO_TxDoneHandler+0x70>
    fa20:	4c30      	ldr	r4, [pc, #192]	; (fae4 <RADIO_TxDoneHandler+0xdc>)
    fa22:	2110      	movs	r1, #16
    fa24:	0027      	movs	r7, r4
    fa26:	2500      	movs	r5, #0
    fa28:	438a      	bics	r2, r1
    fa2a:	801a      	strh	r2, [r3, #0]
    fa2c:	3734      	adds	r7, #52	; 0x34
    fa2e:	0002      	movs	r2, r0
    fa30:	7839      	ldrb	r1, [r7, #0]
    fa32:	4b2d      	ldr	r3, [pc, #180]	; (fae8 <RADIO_TxDoneHandler+0xe0>)
    fa34:	4798      	blx	r3
    fa36:	68e3      	ldr	r3, [r4, #12]
    fa38:	ae03      	add	r6, sp, #12
    fa3a:	9304      	str	r3, [sp, #16]
    fa3c:	7035      	strb	r5, [r6, #0]
    fa3e:	002a      	movs	r2, r5
    fa40:	4b29      	ldr	r3, [pc, #164]	; (fae8 <RADIO_TxDoneHandler+0xe0>)
    fa42:	7839      	ldrb	r1, [r7, #0]
    fa44:	0028      	movs	r0, r5
    fa46:	4798      	blx	r3
    fa48:	466a      	mov	r2, sp
    fa4a:	4b28      	ldr	r3, [pc, #160]	; (faec <RADIO_TxDoneHandler+0xe4>)
    fa4c:	7812      	ldrb	r2, [r2, #0]
    fa4e:	701a      	strb	r2, [r3, #0]
    fa50:	0023      	movs	r3, r4
    fa52:	3358      	adds	r3, #88	; 0x58
    fa54:	701d      	strb	r5, [r3, #0]
    fa56:	4b26      	ldr	r3, [pc, #152]	; (faf0 <RADIO_TxDoneHandler+0xe8>)
    fa58:	781b      	ldrb	r3, [r3, #0]
    fa5a:	075b      	lsls	r3, r3, #29
    fa5c:	d505      	bpl.n	fa6a <RADIO_TxDoneHandler+0x62>
    fa5e:	6923      	ldr	r3, [r4, #16]
    fa60:	42ab      	cmp	r3, r5
    fa62:	d002      	beq.n	fa6a <RADIO_TxDoneHandler+0x62>
    fa64:	0031      	movs	r1, r6
    fa66:	2004      	movs	r0, #4
    fa68:	4798      	blx	r3
    fa6a:	4b22      	ldr	r3, [pc, #136]	; (faf4 <RADIO_TxDoneHandler+0xec>)
    fa6c:	4798      	blx	r3
    fa6e:	4b22      	ldr	r3, [pc, #136]	; (faf8 <RADIO_TxDoneHandler+0xf0>)
    fa70:	4798      	blx	r3
    fa72:	2000      	movs	r0, #0
    fa74:	b007      	add	sp, #28
    fa76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fa78:	07d2      	lsls	r2, r2, #31
    fa7a:	d402      	bmi.n	fa82 <RADIO_TxDoneHandler+0x7a>
    fa7c:	881a      	ldrh	r2, [r3, #0]
    fa7e:	0752      	lsls	r2, r2, #29
    fa80:	d527      	bpl.n	fad2 <RADIO_TxDoneHandler+0xca>
    fa82:	2601      	movs	r6, #1
    fa84:	2104      	movs	r1, #4
    fa86:	881a      	ldrh	r2, [r3, #0]
    fa88:	4f16      	ldr	r7, [pc, #88]	; (fae4 <RADIO_TxDoneHandler+0xdc>)
    fa8a:	43b2      	bics	r2, r6
    fa8c:	801a      	strh	r2, [r3, #0]
    fa8e:	881a      	ldrh	r2, [r3, #0]
    fa90:	2400      	movs	r4, #0
    fa92:	438a      	bics	r2, r1
    fa94:	801a      	strh	r2, [r3, #0]
    fa96:	4b19      	ldr	r3, [pc, #100]	; (fafc <RADIO_TxDoneHandler+0xf4>)
    fa98:	ad03      	add	r5, sp, #12
    fa9a:	681b      	ldr	r3, [r3, #0]
    fa9c:	702c      	strb	r4, [r5, #0]
    fa9e:	9304      	str	r3, [sp, #16]
    faa0:	003b      	movs	r3, r7
    faa2:	3334      	adds	r3, #52	; 0x34
    faa4:	7819      	ldrb	r1, [r3, #0]
    faa6:	0022      	movs	r2, r4
    faa8:	0020      	movs	r0, r4
    faaa:	4b0f      	ldr	r3, [pc, #60]	; (fae8 <RADIO_TxDoneHandler+0xe0>)
    faac:	4798      	blx	r3
    faae:	4b14      	ldr	r3, [pc, #80]	; (fb00 <RADIO_TxDoneHandler+0xf8>)
    fab0:	4798      	blx	r3
    fab2:	4b0e      	ldr	r3, [pc, #56]	; (faec <RADIO_TxDoneHandler+0xe4>)
    fab4:	701e      	strb	r6, [r3, #0]
    fab6:	003b      	movs	r3, r7
    fab8:	3358      	adds	r3, #88	; 0x58
    faba:	701c      	strb	r4, [r3, #0]
    fabc:	4b0c      	ldr	r3, [pc, #48]	; (faf0 <RADIO_TxDoneHandler+0xe8>)
    fabe:	781b      	ldrb	r3, [r3, #0]
    fac0:	079b      	lsls	r3, r3, #30
    fac2:	d5d6      	bpl.n	fa72 <RADIO_TxDoneHandler+0x6a>
    fac4:	693b      	ldr	r3, [r7, #16]
    fac6:	42a3      	cmp	r3, r4
    fac8:	d0d3      	beq.n	fa72 <RADIO_TxDoneHandler+0x6a>
    faca:	0029      	movs	r1, r5
    facc:	2002      	movs	r0, #2
    face:	4798      	blx	r3
    fad0:	e7cf      	b.n	fa72 <RADIO_TxDoneHandler+0x6a>
    fad2:	881b      	ldrh	r3, [r3, #0]
    fad4:	059b      	lsls	r3, r3, #22
    fad6:	d5cc      	bpl.n	fa72 <RADIO_TxDoneHandler+0x6a>
    fad8:	4b0a      	ldr	r3, [pc, #40]	; (fb04 <RADIO_TxDoneHandler+0xfc>)
    fada:	4798      	blx	r3
    fadc:	e7c9      	b.n	fa72 <RADIO_TxDoneHandler+0x6a>
    fade:	46c0      	nop			; (mov r8, r8)
    fae0:	2000321c 	.word	0x2000321c
    fae4:	20002f50 	.word	0x20002f50
    fae8:	0000dbf1 	.word	0x0000dbf1
    faec:	2000321f 	.word	0x2000321f
    faf0:	2000321e 	.word	0x2000321e
    faf4:	0000c989 	.word	0x0000c989
    faf8:	0000f595 	.word	0x0000f595
    fafc:	20002098 	.word	0x20002098
    fb00:	0000f579 	.word	0x0000f579
    fb04:	0001356d 	.word	0x0001356d

0000fb08 <RADIO_RxDoneHandler>:
    fb08:	b5f0      	push	{r4, r5, r6, r7, lr}
    fb0a:	4b97      	ldr	r3, [pc, #604]	; (fd68 <RADIO_RxDoneHandler+0x260>)
    fb0c:	b085      	sub	sp, #20
    fb0e:	881c      	ldrh	r4, [r3, #0]
    fb10:	881a      	ldrh	r2, [r3, #0]
    fb12:	06a4      	lsls	r4, r4, #26
    fb14:	0fe4      	lsrs	r4, r4, #31
    fb16:	b2e0      	uxtb	r0, r4
    fb18:	2801      	cmp	r0, #1
    fb1a:	d126      	bne.n	fb6a <RADIO_RxDoneHandler+0x62>
    fb1c:	4d93      	ldr	r5, [pc, #588]	; (fd6c <RADIO_RxDoneHandler+0x264>)
    fb1e:	2120      	movs	r1, #32
    fb20:	002e      	movs	r6, r5
    fb22:	438a      	bics	r2, r1
    fb24:	801a      	strh	r2, [r3, #0]
    fb26:	3634      	adds	r6, #52	; 0x34
    fb28:	0002      	movs	r2, r0
    fb2a:	7831      	ldrb	r1, [r6, #0]
    fb2c:	4f90      	ldr	r7, [pc, #576]	; (fd70 <RADIO_RxDoneHandler+0x268>)
    fb2e:	47b8      	blx	r7
    fb30:	2200      	movs	r2, #0
    fb32:	7831      	ldrb	r1, [r6, #0]
    fb34:	0010      	movs	r0, r2
    fb36:	47b8      	blx	r7
    fb38:	4b8e      	ldr	r3, [pc, #568]	; (fd74 <RADIO_RxDoneHandler+0x26c>)
    fb3a:	4798      	blx	r3
    fb3c:	4b8e      	ldr	r3, [pc, #568]	; (fd78 <RADIO_RxDoneHandler+0x270>)
    fb3e:	002a      	movs	r2, r5
    fb40:	701c      	strb	r4, [r3, #0]
    fb42:	2300      	movs	r3, #0
    fb44:	322c      	adds	r2, #44	; 0x2c
    fb46:	7013      	strb	r3, [r2, #0]
    fb48:	002a      	movs	r2, r5
    fb4a:	a901      	add	r1, sp, #4
    fb4c:	3258      	adds	r2, #88	; 0x58
    fb4e:	7013      	strb	r3, [r2, #0]
    fb50:	700b      	strb	r3, [r1, #0]
    fb52:	4b8a      	ldr	r3, [pc, #552]	; (fd7c <RADIO_RxDoneHandler+0x274>)
    fb54:	781b      	ldrb	r3, [r3, #0]
    fb56:	071b      	lsls	r3, r3, #28
    fb58:	d504      	bpl.n	fb64 <RADIO_RxDoneHandler+0x5c>
    fb5a:	692b      	ldr	r3, [r5, #16]
    fb5c:	2008      	movs	r0, #8
    fb5e:	2b00      	cmp	r3, #0
    fb60:	d000      	beq.n	fb64 <RADIO_RxDoneHandler+0x5c>
    fb62:	e084      	b.n	fc6e <RADIO_RxDoneHandler+0x166>
    fb64:	2000      	movs	r0, #0
    fb66:	b005      	add	sp, #20
    fb68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fb6a:	0652      	lsls	r2, r2, #25
    fb6c:	d402      	bmi.n	fb74 <RADIO_RxDoneHandler+0x6c>
    fb6e:	881a      	ldrh	r2, [r3, #0]
    fb70:	0612      	lsls	r2, r2, #24
    fb72:	d523      	bpl.n	fbbc <RADIO_RxDoneHandler+0xb4>
    fb74:	2140      	movs	r1, #64	; 0x40
    fb76:	881a      	ldrh	r2, [r3, #0]
    fb78:	4c7c      	ldr	r4, [pc, #496]	; (fd6c <RADIO_RxDoneHandler+0x264>)
    fb7a:	438a      	bics	r2, r1
    fb7c:	801a      	strh	r2, [r3, #0]
    fb7e:	881a      	ldrh	r2, [r3, #0]
    fb80:	1849      	adds	r1, r1, r1
    fb82:	438a      	bics	r2, r1
    fb84:	801a      	strh	r2, [r3, #0]
    fb86:	0023      	movs	r3, r4
    fb88:	2200      	movs	r2, #0
    fb8a:	3334      	adds	r3, #52	; 0x34
    fb8c:	7819      	ldrb	r1, [r3, #0]
    fb8e:	0010      	movs	r0, r2
    fb90:	4b77      	ldr	r3, [pc, #476]	; (fd70 <RADIO_RxDoneHandler+0x268>)
    fb92:	4798      	blx	r3
    fb94:	4b77      	ldr	r3, [pc, #476]	; (fd74 <RADIO_RxDoneHandler+0x26c>)
    fb96:	4798      	blx	r3
    fb98:	2201      	movs	r2, #1
    fb9a:	4b77      	ldr	r3, [pc, #476]	; (fd78 <RADIO_RxDoneHandler+0x270>)
    fb9c:	a901      	add	r1, sp, #4
    fb9e:	701a      	strb	r2, [r3, #0]
    fba0:	0022      	movs	r2, r4
    fba2:	2300      	movs	r3, #0
    fba4:	322c      	adds	r2, #44	; 0x2c
    fba6:	7013      	strb	r3, [r2, #0]
    fba8:	0022      	movs	r2, r4
    fbaa:	3258      	adds	r2, #88	; 0x58
    fbac:	7013      	strb	r3, [r2, #0]
    fbae:	700b      	strb	r3, [r1, #0]
    fbb0:	4b72      	ldr	r3, [pc, #456]	; (fd7c <RADIO_RxDoneHandler+0x274>)
    fbb2:	781b      	ldrb	r3, [r3, #0]
    fbb4:	071b      	lsls	r3, r3, #28
    fbb6:	d5d5      	bpl.n	fb64 <RADIO_RxDoneHandler+0x5c>
    fbb8:	6923      	ldr	r3, [r4, #16]
    fbba:	e7cf      	b.n	fb5c <RADIO_RxDoneHandler+0x54>
    fbbc:	881a      	ldrh	r2, [r3, #0]
    fbbe:	0792      	lsls	r2, r2, #30
    fbc0:	d571      	bpl.n	fca6 <RADIO_RxDoneHandler+0x19e>
    fbc2:	2102      	movs	r1, #2
    fbc4:	881a      	ldrh	r2, [r3, #0]
    fbc6:	4d6e      	ldr	r5, [pc, #440]	; (fd80 <RADIO_RxDoneHandler+0x278>)
    fbc8:	438a      	bics	r2, r1
    fbca:	801a      	strh	r2, [r3, #0]
    fbcc:	2013      	movs	r0, #19
    fbce:	47a8      	blx	r5
    fbd0:	4c66      	ldr	r4, [pc, #408]	; (fd6c <RADIO_RxDoneHandler+0x264>)
    fbd2:	2100      	movs	r1, #0
    fbd4:	0026      	movs	r6, r4
    fbd6:	362c      	adds	r6, #44	; 0x2c
    fbd8:	7030      	strb	r0, [r6, #0]
    fbda:	4b6a      	ldr	r3, [pc, #424]	; (fd84 <RADIO_RxDoneHandler+0x27c>)
    fbdc:	200d      	movs	r0, #13
    fbde:	4798      	blx	r3
    fbe0:	7832      	ldrb	r2, [r6, #0]
    fbe2:	4b69      	ldr	r3, [pc, #420]	; (fd88 <RADIO_RxDoneHandler+0x280>)
    fbe4:	b2d2      	uxtb	r2, r2
    fbe6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    fbe8:	2000      	movs	r0, #0
    fbea:	4798      	blx	r3
    fbec:	2019      	movs	r0, #25
    fbee:	47a8      	blx	r5
    fbf0:	0023      	movs	r3, r4
    fbf2:	b240      	sxtb	r0, r0
    fbf4:	3332      	adds	r3, #50	; 0x32
    fbf6:	2800      	cmp	r0, #0
    fbf8:	da3b      	bge.n	fc72 <RADIO_RxDoneHandler+0x16a>
    fbfa:	4240      	negs	r0, r0
    fbfc:	1080      	asrs	r0, r0, #2
    fbfe:	4240      	negs	r0, r0
    fc00:	7018      	strb	r0, [r3, #0]
    fc02:	201a      	movs	r0, #26
    fc04:	47a8      	blx	r5
    fc06:	0023      	movs	r3, r4
    fc08:	3332      	adds	r3, #50	; 0x32
    fc0a:	781b      	ldrb	r3, [r3, #0]
    fc0c:	b202      	sxth	r2, r0
    fc0e:	b25b      	sxtb	r3, r3
    fc10:	4d5e      	ldr	r5, [pc, #376]	; (fd8c <RADIO_RxDoneHandler+0x284>)
    fc12:	2b00      	cmp	r3, #0
    fc14:	da36      	bge.n	fc84 <RADIO_RxDoneHandler+0x17c>
    fc16:	6821      	ldr	r1, [r4, #0]
    fc18:	4e5d      	ldr	r6, [pc, #372]	; (fd90 <RADIO_RxDoneHandler+0x288>)
    fc1a:	198e      	adds	r6, r1, r6
    fc1c:	42ae      	cmp	r6, r5
    fc1e:	d82a      	bhi.n	fc76 <RADIO_RxDoneHandler+0x16e>
    fc20:	3b9d      	subs	r3, #157	; 0x9d
    fc22:	181b      	adds	r3, r3, r0
    fc24:	1112      	asrs	r2, r2, #4
    fc26:	189b      	adds	r3, r3, r2
    fc28:	0022      	movs	r2, r4
    fc2a:	3256      	adds	r2, #86	; 0x56
    fc2c:	8013      	strh	r3, [r2, #0]
    fc2e:	0023      	movs	r3, r4
    fc30:	2200      	movs	r2, #0
    fc32:	3334      	adds	r3, #52	; 0x34
    fc34:	7819      	ldrb	r1, [r3, #0]
    fc36:	0010      	movs	r0, r2
    fc38:	4b4d      	ldr	r3, [pc, #308]	; (fd70 <RADIO_RxDoneHandler+0x268>)
    fc3a:	4798      	blx	r3
    fc3c:	4b4d      	ldr	r3, [pc, #308]	; (fd74 <RADIO_RxDoneHandler+0x26c>)
    fc3e:	4798      	blx	r3
    fc40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    fc42:	a901      	add	r1, sp, #4
    fc44:	604b      	str	r3, [r1, #4]
    fc46:	0023      	movs	r3, r4
    fc48:	332c      	adds	r3, #44	; 0x2c
    fc4a:	781b      	ldrb	r3, [r3, #0]
    fc4c:	2201      	movs	r2, #1
    fc4e:	720b      	strb	r3, [r1, #8]
    fc50:	2300      	movs	r3, #0
    fc52:	700b      	strb	r3, [r1, #0]
    fc54:	4b48      	ldr	r3, [pc, #288]	; (fd78 <RADIO_RxDoneHandler+0x270>)
    fc56:	701a      	strb	r2, [r3, #0]
    fc58:	4b48      	ldr	r3, [pc, #288]	; (fd7c <RADIO_RxDoneHandler+0x274>)
    fc5a:	7818      	ldrb	r0, [r3, #0]
    fc5c:	07c0      	lsls	r0, r0, #31
    fc5e:	0fc0      	lsrs	r0, r0, #31
    fc60:	4290      	cmp	r0, r2
    fc62:	d000      	beq.n	fc66 <RADIO_RxDoneHandler+0x15e>
    fc64:	e77e      	b.n	fb64 <RADIO_RxDoneHandler+0x5c>
    fc66:	6923      	ldr	r3, [r4, #16]
    fc68:	2b00      	cmp	r3, #0
    fc6a:	d100      	bne.n	fc6e <RADIO_RxDoneHandler+0x166>
    fc6c:	e77a      	b.n	fb64 <RADIO_RxDoneHandler+0x5c>
    fc6e:	4798      	blx	r3
    fc70:	e778      	b.n	fb64 <RADIO_RxDoneHandler+0x5c>
    fc72:	1080      	asrs	r0, r0, #2
    fc74:	e7c4      	b.n	fc00 <RADIO_RxDoneHandler+0xf8>
    fc76:	4d47      	ldr	r5, [pc, #284]	; (fd94 <RADIO_RxDoneHandler+0x28c>)
    fc78:	1949      	adds	r1, r1, r5
    fc7a:	4d47      	ldr	r5, [pc, #284]	; (fd98 <RADIO_RxDoneHandler+0x290>)
    fc7c:	42a9      	cmp	r1, r5
    fc7e:	d8d6      	bhi.n	fc2e <RADIO_RxDoneHandler+0x126>
    fc80:	3ba4      	subs	r3, #164	; 0xa4
    fc82:	e7ce      	b.n	fc22 <RADIO_RxDoneHandler+0x11a>
    fc84:	6823      	ldr	r3, [r4, #0]
    fc86:	4942      	ldr	r1, [pc, #264]	; (fd90 <RADIO_RxDoneHandler+0x288>)
    fc88:	1859      	adds	r1, r3, r1
    fc8a:	42a9      	cmp	r1, r5
    fc8c:	d802      	bhi.n	fc94 <RADIO_RxDoneHandler+0x18c>
    fc8e:	0003      	movs	r3, r0
    fc90:	3b9d      	subs	r3, #157	; 0x9d
    fc92:	e7c7      	b.n	fc24 <RADIO_RxDoneHandler+0x11c>
    fc94:	493f      	ldr	r1, [pc, #252]	; (fd94 <RADIO_RxDoneHandler+0x28c>)
    fc96:	185b      	adds	r3, r3, r1
    fc98:	493f      	ldr	r1, [pc, #252]	; (fd98 <RADIO_RxDoneHandler+0x290>)
    fc9a:	428b      	cmp	r3, r1
    fc9c:	d8c7      	bhi.n	fc2e <RADIO_RxDoneHandler+0x126>
    fc9e:	38a4      	subs	r0, #164	; 0xa4
    fca0:	1113      	asrs	r3, r2, #4
    fca2:	18c3      	adds	r3, r0, r3
    fca4:	e7c0      	b.n	fc28 <RADIO_RxDoneHandler+0x120>
    fca6:	881a      	ldrh	r2, [r3, #0]
    fca8:	0712      	lsls	r2, r2, #28
    fcaa:	0fd5      	lsrs	r5, r2, #31
    fcac:	2a00      	cmp	r2, #0
    fcae:	da27      	bge.n	fd00 <RADIO_RxDoneHandler+0x1f8>
    fcb0:	2108      	movs	r1, #8
    fcb2:	881a      	ldrh	r2, [r3, #0]
    fcb4:	4c2d      	ldr	r4, [pc, #180]	; (fd6c <RADIO_RxDoneHandler+0x264>)
    fcb6:	438a      	bics	r2, r1
    fcb8:	801a      	strh	r2, [r3, #0]
    fcba:	0023      	movs	r3, r4
    fcbc:	2280      	movs	r2, #128	; 0x80
    fcbe:	3332      	adds	r3, #50	; 0x32
    fcc0:	701a      	strb	r2, [r3, #0]
    fcc2:	0023      	movs	r3, r4
    fcc4:	2200      	movs	r2, #0
    fcc6:	3334      	adds	r3, #52	; 0x34
    fcc8:	7819      	ldrb	r1, [r3, #0]
    fcca:	0010      	movs	r0, r2
    fccc:	4b28      	ldr	r3, [pc, #160]	; (fd70 <RADIO_RxDoneHandler+0x268>)
    fcce:	4798      	blx	r3
    fcd0:	4b28      	ldr	r3, [pc, #160]	; (fd74 <RADIO_RxDoneHandler+0x26c>)
    fcd2:	4798      	blx	r3
    fcd4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    fcd6:	a901      	add	r1, sp, #4
    fcd8:	604b      	str	r3, [r1, #4]
    fcda:	0023      	movs	r3, r4
    fcdc:	332c      	adds	r3, #44	; 0x2c
    fcde:	781b      	ldrb	r3, [r3, #0]
    fce0:	0022      	movs	r2, r4
    fce2:	720b      	strb	r3, [r1, #8]
    fce4:	2300      	movs	r3, #0
    fce6:	3258      	adds	r2, #88	; 0x58
    fce8:	7013      	strb	r3, [r2, #0]
    fcea:	700b      	strb	r3, [r1, #0]
    fcec:	4b22      	ldr	r3, [pc, #136]	; (fd78 <RADIO_RxDoneHandler+0x270>)
    fcee:	701d      	strb	r5, [r3, #0]
    fcf0:	4b22      	ldr	r3, [pc, #136]	; (fd7c <RADIO_RxDoneHandler+0x274>)
    fcf2:	7818      	ldrb	r0, [r3, #0]
    fcf4:	07c0      	lsls	r0, r0, #31
    fcf6:	0fc0      	lsrs	r0, r0, #31
    fcf8:	2801      	cmp	r0, #1
    fcfa:	d000      	beq.n	fcfe <RADIO_RxDoneHandler+0x1f6>
    fcfc:	e732      	b.n	fb64 <RADIO_RxDoneHandler+0x5c>
    fcfe:	e7b2      	b.n	fc66 <RADIO_RxDoneHandler+0x15e>
    fd00:	881a      	ldrh	r2, [r3, #0]
    fd02:	05d2      	lsls	r2, r2, #23
    fd04:	0fd5      	lsrs	r5, r2, #31
    fd06:	2a00      	cmp	r2, #0
    fd08:	db00      	blt.n	fd0c <RADIO_RxDoneHandler+0x204>
    fd0a:	e72b      	b.n	fb64 <RADIO_RxDoneHandler+0x5c>
    fd0c:	4c17      	ldr	r4, [pc, #92]	; (fd6c <RADIO_RxDoneHandler+0x264>)
    fd0e:	881a      	ldrh	r2, [r3, #0]
    fd10:	0026      	movs	r6, r4
    fd12:	4922      	ldr	r1, [pc, #136]	; (fd9c <RADIO_RxDoneHandler+0x294>)
    fd14:	362c      	adds	r6, #44	; 0x2c
    fd16:	400a      	ands	r2, r1
    fd18:	801a      	strh	r2, [r3, #0]
    fd1a:	7832      	ldrb	r2, [r6, #0]
    fd1c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    fd1e:	b2d2      	uxtb	r2, r2
    fd20:	2000      	movs	r0, #0
    fd22:	4b19      	ldr	r3, [pc, #100]	; (fd88 <RADIO_RxDoneHandler+0x280>)
    fd24:	4798      	blx	r3
    fd26:	0023      	movs	r3, r4
    fd28:	2200      	movs	r2, #0
    fd2a:	3334      	adds	r3, #52	; 0x34
    fd2c:	7819      	ldrb	r1, [r3, #0]
    fd2e:	0010      	movs	r0, r2
    fd30:	4b0f      	ldr	r3, [pc, #60]	; (fd70 <RADIO_RxDoneHandler+0x268>)
    fd32:	4798      	blx	r3
    fd34:	4b0f      	ldr	r3, [pc, #60]	; (fd74 <RADIO_RxDoneHandler+0x26c>)
    fd36:	4798      	blx	r3
    fd38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    fd3a:	a901      	add	r1, sp, #4
    fd3c:	604b      	str	r3, [r1, #4]
    fd3e:	7833      	ldrb	r3, [r6, #0]
    fd40:	0022      	movs	r2, r4
    fd42:	720b      	strb	r3, [r1, #8]
    fd44:	2300      	movs	r3, #0
    fd46:	3258      	adds	r2, #88	; 0x58
    fd48:	7013      	strb	r3, [r2, #0]
    fd4a:	700b      	strb	r3, [r1, #0]
    fd4c:	4b0a      	ldr	r3, [pc, #40]	; (fd78 <RADIO_RxDoneHandler+0x270>)
    fd4e:	701d      	strb	r5, [r3, #0]
    fd50:	4b0a      	ldr	r3, [pc, #40]	; (fd7c <RADIO_RxDoneHandler+0x274>)
    fd52:	781b      	ldrb	r3, [r3, #0]
    fd54:	06db      	lsls	r3, r3, #27
    fd56:	d400      	bmi.n	fd5a <RADIO_RxDoneHandler+0x252>
    fd58:	e704      	b.n	fb64 <RADIO_RxDoneHandler+0x5c>
    fd5a:	6923      	ldr	r3, [r4, #16]
    fd5c:	2b00      	cmp	r3, #0
    fd5e:	d100      	bne.n	fd62 <RADIO_RxDoneHandler+0x25a>
    fd60:	e700      	b.n	fb64 <RADIO_RxDoneHandler+0x5c>
    fd62:	2010      	movs	r0, #16
    fd64:	e783      	b.n	fc6e <RADIO_RxDoneHandler+0x166>
    fd66:	46c0      	nop			; (mov r8, r8)
    fd68:	2000321c 	.word	0x2000321c
    fd6c:	20002f50 	.word	0x20002f50
    fd70:	0000dbf1 	.word	0x0000dbf1
    fd74:	0000f579 	.word	0x0000f579
    fd78:	2000321f 	.word	0x2000321f
    fd7c:	2000321e 	.word	0x2000321e
    fd80:	0000c9f1 	.word	0x0000c9f1
    fd84:	0000c9c9 	.word	0x0000c9c9
    fd88:	0000ca5d 	.word	0x0000ca5d
    fd8c:	096ae380 	.word	0x096ae380
    fd90:	cc9eec80 	.word	0xcc9eec80
    fd94:	e78fe580 	.word	0xe78fe580
    fd98:	06dac2c0 	.word	0x06dac2c0
    fd9c:	fffffeff 	.word	0xfffffeff

0000fda0 <MacClearCommands>:
    fda0:	490e      	ldr	r1, [pc, #56]	; (fddc <MacClearCommands+0x3c>)
    fda2:	b570      	push	{r4, r5, r6, lr}
    fda4:	000b      	movs	r3, r1
    fda6:	33e0      	adds	r3, #224	; 0xe0
    fda8:	7818      	ldrb	r0, [r3, #0]
    fdaa:	2303      	movs	r3, #3
    fdac:	25a4      	movs	r5, #164	; 0xa4
    fdae:	4343      	muls	r3, r0
    fdb0:	2401      	movs	r4, #1
    fdb2:	20ff      	movs	r0, #255	; 0xff
    fdb4:	3399      	adds	r3, #153	; 0x99
    fdb6:	4a0a      	ldr	r2, [pc, #40]	; (fde0 <MacClearCommands+0x40>)
    fdb8:	185b      	adds	r3, r3, r1
    fdba:	00ed      	lsls	r5, r5, #3
    fdbc:	429a      	cmp	r2, r3
    fdbe:	d100      	bne.n	fdc2 <MacClearCommands+0x22>
    fdc0:	bd70      	pop	{r4, r5, r6, pc}
    fdc2:	7811      	ldrb	r1, [r2, #0]
    fdc4:	29ff      	cmp	r1, #255	; 0xff
    fdc6:	d006      	beq.n	fdd6 <MacClearCommands+0x36>
    fdc8:	290a      	cmp	r1, #10
    fdca:	d803      	bhi.n	fdd4 <MacClearCommands+0x34>
    fdcc:	0026      	movs	r6, r4
    fdce:	408e      	lsls	r6, r1
    fdd0:	422e      	tst	r6, r5
    fdd2:	d100      	bne.n	fdd6 <MacClearCommands+0x36>
    fdd4:	7010      	strb	r0, [r2, #0]
    fdd6:	3203      	adds	r2, #3
    fdd8:	e7f0      	b.n	fdbc <MacClearCommands+0x1c>
    fdda:	46c0      	nop			; (mov r8, r8)
    fddc:	20003348 	.word	0x20003348
    fde0:	200033e1 	.word	0x200033e1

0000fde4 <CountfOptsLength>:
    fde4:	2200      	movs	r2, #0
    fde6:	490d      	ldr	r1, [pc, #52]	; (fe1c <CountfOptsLength+0x38>)
    fde8:	b570      	push	{r4, r5, r6, lr}
    fdea:	000b      	movs	r3, r1
    fdec:	0010      	movs	r0, r2
    fdee:	2503      	movs	r5, #3
    fdf0:	33e0      	adds	r3, #224	; 0xe0
    fdf2:	781c      	ldrb	r4, [r3, #0]
    fdf4:	4e0a      	ldr	r6, [pc, #40]	; (fe20 <CountfOptsLength+0x3c>)
    fdf6:	b2d3      	uxtb	r3, r2
    fdf8:	429c      	cmp	r4, r3
    fdfa:	d800      	bhi.n	fdfe <CountfOptsLength+0x1a>
    fdfc:	bd70      	pop	{r4, r5, r6, pc}
    fdfe:	002b      	movs	r3, r5
    fe00:	4353      	muls	r3, r2
    fe02:	3399      	adds	r3, #153	; 0x99
    fe04:	5ccb      	ldrb	r3, [r1, r3]
    fe06:	2bff      	cmp	r3, #255	; 0xff
    fe08:	d006      	beq.n	fe18 <CountfOptsLength+0x34>
    fe0a:	18f3      	adds	r3, r6, r3
    fe0c:	3b02      	subs	r3, #2
    fe0e:	781b      	ldrb	r3, [r3, #0]
    fe10:	18c3      	adds	r3, r0, r3
    fe12:	2b0f      	cmp	r3, #15
    fe14:	dcf2      	bgt.n	fdfc <CountfOptsLength+0x18>
    fe16:	b2d8      	uxtb	r0, r3
    fe18:	3201      	adds	r2, #1
    fe1a:	e7ec      	b.n	fdf6 <CountfOptsLength+0x12>
    fe1c:	20003348 	.word	0x20003348
    fe20:	000192e7 	.word	0x000192e7

0000fe24 <LorawanGetMaxPayloadSize>:
    fe24:	b513      	push	{r0, r1, r4, lr}
    fe26:	466b      	mov	r3, sp
    fe28:	1ddc      	adds	r4, r3, #7
    fe2a:	2300      	movs	r3, #0
    fe2c:	0022      	movs	r2, r4
    fe2e:	7023      	strb	r3, [r4, #0]
    fe30:	4903      	ldr	r1, [pc, #12]	; (fe40 <LorawanGetMaxPayloadSize+0x1c>)
    fe32:	4b04      	ldr	r3, [pc, #16]	; (fe44 <LorawanGetMaxPayloadSize+0x20>)
    fe34:	2005      	movs	r0, #5
    fe36:	4798      	blx	r3
    fe38:	7820      	ldrb	r0, [r4, #0]
    fe3a:	3808      	subs	r0, #8
    fe3c:	b2c0      	uxtb	r0, r0
    fe3e:	bd16      	pop	{r1, r2, r4, pc}
    fe40:	2000342f 	.word	0x2000342f
    fe44:	0000d06d 	.word	0x0000d06d

0000fe48 <UpdateReceiveDelays>:
    fe48:	23fa      	movs	r3, #250	; 0xfa
    fe4a:	b570      	push	{r4, r5, r6, lr}
    fe4c:	009b      	lsls	r3, r3, #2
    fe4e:	4c0b      	ldr	r4, [pc, #44]	; (fe7c <UpdateReceiveDelays+0x34>)
    fe50:	2800      	cmp	r0, #0
    fe52:	d000      	beq.n	fe56 <UpdateReceiveDelays+0xe>
    fe54:	4343      	muls	r3, r0
    fe56:	0022      	movs	r2, r4
    fe58:	4d09      	ldr	r5, [pc, #36]	; (fe80 <UpdateReceiveDelays+0x38>)
    fe5a:	32d0      	adds	r2, #208	; 0xd0
    fe5c:	210c      	movs	r1, #12
    fe5e:	2000      	movs	r0, #0
    fe60:	8013      	strh	r3, [r2, #0]
    fe62:	47a8      	blx	r5
    fe64:	0023      	movs	r3, r4
    fe66:	22fa      	movs	r2, #250	; 0xfa
    fe68:	33d0      	adds	r3, #208	; 0xd0
    fe6a:	881b      	ldrh	r3, [r3, #0]
    fe6c:	0092      	lsls	r2, r2, #2
    fe6e:	189b      	adds	r3, r3, r2
    fe70:	34d2      	adds	r4, #210	; 0xd2
    fe72:	210d      	movs	r1, #13
    fe74:	2000      	movs	r0, #0
    fe76:	8023      	strh	r3, [r4, #0]
    fe78:	47a8      	blx	r5
    fe7a:	bd70      	pop	{r4, r5, r6, pc}
    fe7c:	20003348 	.word	0x20003348
    fe80:	00009759 	.word	0x00009759

0000fe84 <IncludeMacCommandsResponse>:
    fe84:	b5f0      	push	{r4, r5, r6, r7, lr}
    fe86:	0005      	movs	r5, r0
    fe88:	2600      	movs	r6, #0
    fe8a:	b087      	sub	sp, #28
    fe8c:	880c      	ldrh	r4, [r1, #0]
    fe8e:	9101      	str	r1, [sp, #4]
    fe90:	9203      	str	r2, [sp, #12]
    fe92:	4f77      	ldr	r7, [pc, #476]	; (10070 <IncludeMacCommandsResponse+0x1ec>)
    fe94:	003b      	movs	r3, r7
    fe96:	33e0      	adds	r3, #224	; 0xe0
    fe98:	781b      	ldrb	r3, [r3, #0]
    fe9a:	42b3      	cmp	r3, r6
    fe9c:	d913      	bls.n	fec6 <IncludeMacCommandsResponse+0x42>
    fe9e:	9b03      	ldr	r3, [sp, #12]
    fea0:	2b00      	cmp	r3, #0
    fea2:	d019      	beq.n	fed8 <IncludeMacCommandsResponse+0x54>
    fea4:	2303      	movs	r3, #3
    fea6:	4373      	muls	r3, r6
    fea8:	18fb      	adds	r3, r7, r3
    feaa:	3399      	adds	r3, #153	; 0x99
    feac:	7819      	ldrb	r1, [r3, #0]
    feae:	29ff      	cmp	r1, #255	; 0xff
    feb0:	d012      	beq.n	fed8 <IncludeMacCommandsResponse+0x54>
    feb2:	9b01      	ldr	r3, [sp, #4]
    feb4:	881a      	ldrh	r2, [r3, #0]
    feb6:	4b6f      	ldr	r3, [pc, #444]	; (10074 <IncludeMacCommandsResponse+0x1f0>)
    feb8:	1aa2      	subs	r2, r4, r2
    feba:	185b      	adds	r3, r3, r1
    febc:	3b02      	subs	r3, #2
    febe:	781b      	ldrb	r3, [r3, #0]
    fec0:	18d3      	adds	r3, r2, r3
    fec2:	2b0f      	cmp	r3, #15
    fec4:	dd08      	ble.n	fed8 <IncludeMacCommandsResponse+0x54>
    fec6:	2207      	movs	r2, #7
    fec8:	2100      	movs	r1, #0
    feca:	4b6b      	ldr	r3, [pc, #428]	; (10078 <IncludeMacCommandsResponse+0x1f4>)
    fecc:	486b      	ldr	r0, [pc, #428]	; (1007c <IncludeMacCommandsResponse+0x1f8>)
    fece:	4798      	blx	r3
    fed0:	9b01      	ldr	r3, [sp, #4]
    fed2:	801c      	strh	r4, [r3, #0]
    fed4:	b007      	add	sp, #28
    fed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fed8:	2303      	movs	r3, #3
    feda:	4373      	muls	r3, r6
    fedc:	18fb      	adds	r3, r7, r3
    fede:	3399      	adds	r3, #153	; 0x99
    fee0:	781b      	ldrb	r3, [r3, #0]
    fee2:	1e98      	subs	r0, r3, #2
    fee4:	280b      	cmp	r0, #11
    fee6:	d862      	bhi.n	ffae <IncludeMacCommandsResponse+0x12a>
    fee8:	f003 fc42 	bl	13770 <__gnu_thumb1_case_uqi>
    feec:	27a20698 	.word	0x27a20698
    fef0:	7da26748 	.word	0x7da26748
    fef4:	a6616182 	.word	0xa6616182
    fef8:	2303      	movs	r3, #3
    fefa:	2200      	movs	r2, #0
    fefc:	552b      	strb	r3, [r5, r4]
    fefe:	1c63      	adds	r3, r4, #1
    ff00:	b29b      	uxth	r3, r3
    ff02:	18eb      	adds	r3, r5, r3
    ff04:	4f5a      	ldr	r7, [pc, #360]	; (10070 <IncludeMacCommandsResponse+0x1ec>)
    ff06:	485e      	ldr	r0, [pc, #376]	; (10080 <IncludeMacCommandsResponse+0x1fc>)
    ff08:	701a      	strb	r2, [r3, #0]
    ff0a:	5c39      	ldrb	r1, [r7, r0]
    ff0c:	3201      	adds	r2, #1
    ff0e:	4011      	ands	r1, r2
    ff10:	466a      	mov	r2, sp
    ff12:	9102      	str	r1, [sp, #8]
    ff14:	7a12      	ldrb	r2, [r2, #8]
    ff16:	701a      	strb	r2, [r3, #0]
    ff18:	5c3a      	ldrb	r2, [r7, r0]
    ff1a:	4694      	mov	ip, r2
    ff1c:	2202      	movs	r2, #2
    ff1e:	4661      	mov	r1, ip
    ff20:	4211      	tst	r1, r2
    ff22:	d002      	beq.n	ff2a <IncludeMacCommandsResponse+0xa6>
    ff24:	9902      	ldr	r1, [sp, #8]
    ff26:	430a      	orrs	r2, r1
    ff28:	701a      	strb	r2, [r3, #0]
    ff2a:	2204      	movs	r2, #4
    ff2c:	5c39      	ldrb	r1, [r7, r0]
    ff2e:	4211      	tst	r1, r2
    ff30:	d071      	beq.n	10016 <IncludeMacCommandsResponse+0x192>
    ff32:	7819      	ldrb	r1, [r3, #0]
    ff34:	430a      	orrs	r2, r1
    ff36:	701a      	strb	r2, [r3, #0]
    ff38:	e06d      	b.n	10016 <IncludeMacCommandsResponse+0x192>
    ff3a:	2305      	movs	r3, #5
    ff3c:	2103      	movs	r1, #3
    ff3e:	2200      	movs	r2, #0
    ff40:	552b      	strb	r3, [r5, r4]
    ff42:	1c63      	adds	r3, r4, #1
    ff44:	b29b      	uxth	r3, r3
    ff46:	4371      	muls	r1, r6
    ff48:	18eb      	adds	r3, r5, r3
    ff4a:	701a      	strb	r2, [r3, #0]
    ff4c:	4a48      	ldr	r2, [pc, #288]	; (10070 <IncludeMacCommandsResponse+0x1ec>)
    ff4e:	1851      	adds	r1, r2, r1
    ff50:	3198      	adds	r1, #152	; 0x98
    ff52:	7888      	ldrb	r0, [r1, #2]
    ff54:	0700      	lsls	r0, r0, #28
    ff56:	0fc0      	lsrs	r0, r0, #31
    ff58:	7018      	strb	r0, [r3, #0]
    ff5a:	7889      	ldrb	r1, [r1, #2]
    ff5c:	b2c7      	uxtb	r7, r0
    ff5e:	06c9      	lsls	r1, r1, #27
    ff60:	d502      	bpl.n	ff68 <IncludeMacCommandsResponse+0xe4>
    ff62:	2102      	movs	r1, #2
    ff64:	4339      	orrs	r1, r7
    ff66:	7019      	strb	r1, [r3, #0]
    ff68:	2103      	movs	r1, #3
    ff6a:	4371      	muls	r1, r6
    ff6c:	1852      	adds	r2, r2, r1
    ff6e:	3298      	adds	r2, #152	; 0x98
    ff70:	7892      	ldrb	r2, [r2, #2]
    ff72:	0692      	lsls	r2, r2, #26
    ff74:	d54f      	bpl.n	10016 <IncludeMacCommandsResponse+0x192>
    ff76:	7819      	ldrb	r1, [r3, #0]
    ff78:	2204      	movs	r2, #4
    ff7a:	e7db      	b.n	ff34 <IncludeMacCommandsResponse+0xb0>
    ff7c:	a904      	add	r1, sp, #16
    ff7e:	4b41      	ldr	r3, [pc, #260]	; (10084 <IncludeMacCommandsResponse+0x200>)
    ff80:	200e      	movs	r0, #14
    ff82:	4798      	blx	r3
    ff84:	2306      	movs	r3, #6
    ff86:	4a3a      	ldr	r2, [pc, #232]	; (10070 <IncludeMacCommandsResponse+0x1ec>)
    ff88:	552b      	strb	r3, [r5, r4]
    ff8a:	32e8      	adds	r2, #232	; 0xe8
    ff8c:	7811      	ldrb	r1, [r2, #0]
    ff8e:	1c62      	adds	r2, r4, #1
    ff90:	b292      	uxth	r2, r2
    ff92:	54a9      	strb	r1, [r5, r2]
    ff94:	aa04      	add	r2, sp, #16
    ff96:	7812      	ldrb	r2, [r2, #0]
    ff98:	1ca3      	adds	r3, r4, #2
    ff9a:	0011      	movs	r1, r2
    ff9c:	3120      	adds	r1, #32
    ff9e:	3403      	adds	r4, #3
    ffa0:	b2c9      	uxtb	r1, r1
    ffa2:	b29b      	uxth	r3, r3
    ffa4:	b2a4      	uxth	r4, r4
    ffa6:	293f      	cmp	r1, #63	; 0x3f
    ffa8:	d904      	bls.n	ffb4 <IncludeMacCommandsResponse+0x130>
    ffaa:	2220      	movs	r2, #32
    ffac:	54ea      	strb	r2, [r5, r3]
    ffae:	3601      	adds	r6, #1
    ffb0:	b2f6      	uxtb	r6, r6
    ffb2:	e76e      	b.n	fe92 <IncludeMacCommandsResponse+0xe>
    ffb4:	213f      	movs	r1, #63	; 0x3f
    ffb6:	400a      	ands	r2, r1
    ffb8:	e7f8      	b.n	ffac <IncludeMacCommandsResponse+0x128>
    ffba:	2307      	movs	r3, #7
    ffbc:	2103      	movs	r1, #3
    ffbe:	2200      	movs	r2, #0
    ffc0:	552b      	strb	r3, [r5, r4]
    ffc2:	1c63      	adds	r3, r4, #1
    ffc4:	4371      	muls	r1, r6
    ffc6:	b29b      	uxth	r3, r3
    ffc8:	18eb      	adds	r3, r5, r3
    ffca:	701a      	strb	r2, [r3, #0]
    ffcc:	4a28      	ldr	r2, [pc, #160]	; (10070 <IncludeMacCommandsResponse+0x1ec>)
    ffce:	1852      	adds	r2, r2, r1
    ffd0:	3298      	adds	r2, #152	; 0x98
    ffd2:	7891      	ldrb	r1, [r2, #2]
    ffd4:	09c9      	lsrs	r1, r1, #7
    ffd6:	7019      	strb	r1, [r3, #0]
    ffd8:	7892      	ldrb	r2, [r2, #2]
    ffda:	b2c8      	uxtb	r0, r1
    ffdc:	0652      	lsls	r2, r2, #25
    ffde:	d51a      	bpl.n	10016 <IncludeMacCommandsResponse+0x192>
    ffe0:	2202      	movs	r2, #2
    ffe2:	4302      	orrs	r2, r0
    ffe4:	e7a7      	b.n	ff36 <IncludeMacCommandsResponse+0xb2>
    ffe6:	2209      	movs	r2, #9
    ffe8:	1c63      	adds	r3, r4, #1
    ffea:	552a      	strb	r2, [r5, r4]
    ffec:	b29c      	uxth	r4, r3
    ffee:	e7de      	b.n	ffae <IncludeMacCommandsResponse+0x12a>
    fff0:	230a      	movs	r3, #10
    fff2:	2103      	movs	r1, #3
    fff4:	2200      	movs	r2, #0
    fff6:	552b      	strb	r3, [r5, r4]
    fff8:	1c63      	adds	r3, r4, #1
    fffa:	4371      	muls	r1, r6
    fffc:	b29b      	uxth	r3, r3
    fffe:	18eb      	adds	r3, r5, r3
   10000:	701a      	strb	r2, [r3, #0]
   10002:	4a1b      	ldr	r2, [pc, #108]	; (10070 <IncludeMacCommandsResponse+0x1ec>)
   10004:	1852      	adds	r2, r2, r1
   10006:	3298      	adds	r2, #152	; 0x98
   10008:	7891      	ldrb	r1, [r2, #2]
   1000a:	09c9      	lsrs	r1, r1, #7
   1000c:	7019      	strb	r1, [r3, #0]
   1000e:	78d2      	ldrb	r2, [r2, #3]
   10010:	b2c8      	uxtb	r0, r1
   10012:	07d2      	lsls	r2, r2, #31
   10014:	d4e4      	bmi.n	ffe0 <IncludeMacCommandsResponse+0x15c>
   10016:	3402      	adds	r4, #2
   10018:	b2a4      	uxth	r4, r4
   1001a:	e7c8      	b.n	ffae <IncludeMacCommandsResponse+0x12a>
   1001c:	003b      	movs	r3, r7
   1001e:	22ff      	movs	r2, #255	; 0xff
   10020:	33e5      	adds	r3, #229	; 0xe5
   10022:	701a      	strb	r2, [r3, #0]
   10024:	2300      	movs	r3, #0
   10026:	37e6      	adds	r7, #230	; 0xe6
   10028:	703b      	strb	r3, [r7, #0]
   1002a:	3afd      	subs	r2, #253	; 0xfd
   1002c:	1c63      	adds	r3, r4, #1
   1002e:	e7dc      	b.n	ffea <IncludeMacCommandsResponse+0x166>
   10030:	1c62      	adds	r2, r4, #1
   10032:	552b      	strb	r3, [r5, r4]
   10034:	b294      	uxth	r4, r2
   10036:	e7ba      	b.n	ffae <IncludeMacCommandsResponse+0x12a>
   10038:	2201      	movs	r2, #1
   1003a:	4252      	negs	r2, r2
   1003c:	17d3      	asrs	r3, r2, #31
   1003e:	9204      	str	r2, [sp, #16]
   10040:	9305      	str	r3, [sp, #20]
   10042:	4b11      	ldr	r3, [pc, #68]	; (10088 <IncludeMacCommandsResponse+0x204>)
   10044:	a904      	add	r1, sp, #16
   10046:	5cf8      	ldrb	r0, [r7, r3]
   10048:	4b10      	ldr	r3, [pc, #64]	; (1008c <IncludeMacCommandsResponse+0x208>)
   1004a:	4798      	blx	r3
   1004c:	2301      	movs	r3, #1
   1004e:	228d      	movs	r2, #141	; 0x8d
   10050:	425b      	negs	r3, r3
   10052:	0092      	lsls	r2, r2, #2
   10054:	50bb      	str	r3, [r7, r2]
   10056:	3204      	adds	r2, #4
   10058:	54bb      	strb	r3, [r7, r2]
   1005a:	238c      	movs	r3, #140	; 0x8c
   1005c:	2201      	movs	r2, #1
   1005e:	009b      	lsls	r3, r3, #2
   10060:	54fa      	strb	r2, [r7, r3]
   10062:	2303      	movs	r3, #3
   10064:	4373      	muls	r3, r6
   10066:	18ff      	adds	r7, r7, r3
   10068:	3799      	adds	r7, #153	; 0x99
   1006a:	18a2      	adds	r2, r4, r2
   1006c:	783b      	ldrb	r3, [r7, #0]
   1006e:	e7e0      	b.n	10032 <IncludeMacCommandsResponse+0x1ae>
   10070:	20003348 	.word	0x20003348
   10074:	000192e7 	.word	0x000192e7
   10078:	00016a21 	.word	0x00016a21
   1007c:	2000356b 	.word	0x2000356b
   10080:	00000223 	.word	0x00000223
   10084:	0000e48d 	.word	0x0000e48d
   10088:	00000231 	.word	0x00000231
   1008c:	0000db3d 	.word	0x0000db3d

00010090 <UpdateJoinSuccessState>:
   10090:	b5f0      	push	{r4, r5, r6, r7, lr}
   10092:	4c32      	ldr	r4, [pc, #200]	; (1015c <UpdateJoinSuccessState+0xcc>)
   10094:	2104      	movs	r1, #4
   10096:	0022      	movs	r2, r4
   10098:	3294      	adds	r2, #148	; 0x94
   1009a:	7813      	ldrb	r3, [r2, #0]
   1009c:	2001      	movs	r0, #1
   1009e:	438b      	bics	r3, r1
   100a0:	7013      	strb	r3, [r2, #0]
   100a2:	0022      	movs	r2, r4
   100a4:	3284      	adds	r2, #132	; 0x84
   100a6:	7813      	ldrb	r3, [r2, #0]
   100a8:	b087      	sub	sp, #28
   100aa:	4303      	orrs	r3, r0
   100ac:	3107      	adds	r1, #7
   100ae:	4f2c      	ldr	r7, [pc, #176]	; (10160 <UpdateJoinSuccessState+0xd0>)
   100b0:	7013      	strb	r3, [r2, #0]
   100b2:	2500      	movs	r5, #0
   100b4:	47b8      	blx	r7
   100b6:	0023      	movs	r3, r4
   100b8:	2115      	movs	r1, #21
   100ba:	3388      	adds	r3, #136	; 0x88
   100bc:	0028      	movs	r0, r5
   100be:	601d      	str	r5, [r3, #0]
   100c0:	47b8      	blx	r7
   100c2:	0023      	movs	r3, r4
   100c4:	2020      	movs	r0, #32
   100c6:	33ff      	adds	r3, #255	; 0xff
   100c8:	7f5b      	ldrb	r3, [r3, #29]
   100ca:	4e26      	ldr	r6, [pc, #152]	; (10164 <UpdateJoinSuccessState+0xd4>)
   100cc:	4203      	tst	r3, r0
   100ce:	d00c      	beq.n	100ea <UpdateJoinSuccessState+0x5a>
   100d0:	0023      	movs	r3, r4
   100d2:	a904      	add	r1, sp, #16
   100d4:	3380      	adds	r3, #128	; 0x80
   100d6:	710d      	strb	r5, [r1, #4]
   100d8:	701d      	strb	r5, [r3, #0]
   100da:	6765      	str	r5, [r4, #116]	; 0x74
   100dc:	67a5      	str	r5, [r4, #120]	; 0x78
   100de:	47b0      	blx	r6
   100e0:	210f      	movs	r1, #15
   100e2:	2021      	movs	r0, #33	; 0x21
   100e4:	4469      	add	r1, sp
   100e6:	700d      	strb	r5, [r1, #0]
   100e8:	47b0      	blx	r6
   100ea:	0023      	movs	r3, r4
   100ec:	2500      	movs	r5, #0
   100ee:	338c      	adds	r3, #140	; 0x8c
   100f0:	210a      	movs	r1, #10
   100f2:	2001      	movs	r0, #1
   100f4:	601d      	str	r5, [r3, #0]
   100f6:	47b8      	blx	r7
   100f8:	0023      	movs	r3, r4
   100fa:	33ca      	adds	r3, #202	; 0xca
   100fc:	801d      	strh	r5, [r3, #0]
   100fe:	0022      	movs	r2, r4
   10100:	0023      	movs	r3, r4
   10102:	210e      	movs	r1, #14
   10104:	3284      	adds	r2, #132	; 0x84
   10106:	33f6      	adds	r3, #246	; 0xf6
   10108:	701d      	strb	r5, [r3, #0]
   1010a:	7813      	ldrb	r3, [r2, #0]
   1010c:	2039      	movs	r0, #57	; 0x39
   1010e:	438b      	bics	r3, r1
   10110:	0029      	movs	r1, r5
   10112:	7013      	strb	r3, [r2, #0]
   10114:	47b0      	blx	r6
   10116:	0023      	movs	r3, r4
   10118:	3385      	adds	r3, #133	; 0x85
   1011a:	781b      	ldrb	r3, [r3, #0]
   1011c:	079b      	lsls	r3, r3, #30
   1011e:	d50c      	bpl.n	1013a <UpdateJoinSuccessState+0xaa>
   10120:	0023      	movs	r3, r4
   10122:	21fa      	movs	r1, #250	; 0xfa
   10124:	3390      	adds	r3, #144	; 0x90
   10126:	681b      	ldr	r3, [r3, #0]
   10128:	34f0      	adds	r4, #240	; 0xf0
   1012a:	0089      	lsls	r1, r1, #2
   1012c:	7820      	ldrb	r0, [r4, #0]
   1012e:	4359      	muls	r1, r3
   10130:	9500      	str	r5, [sp, #0]
   10132:	4b0d      	ldr	r3, [pc, #52]	; (10168 <UpdateJoinSuccessState+0xd8>)
   10134:	002a      	movs	r2, r5
   10136:	4c0d      	ldr	r4, [pc, #52]	; (1016c <UpdateJoinSuccessState+0xdc>)
   10138:	47a0      	blx	r4
   1013a:	490d      	ldr	r1, [pc, #52]	; (10170 <UpdateJoinSuccessState+0xe0>)
   1013c:	794a      	ldrb	r2, [r1, #5]
   1013e:	790b      	ldrb	r3, [r1, #4]
   10140:	0212      	lsls	r2, r2, #8
   10142:	431a      	orrs	r2, r3
   10144:	798b      	ldrb	r3, [r1, #6]
   10146:	041b      	lsls	r3, r3, #16
   10148:	431a      	orrs	r2, r3
   1014a:	79cb      	ldrb	r3, [r1, #7]
   1014c:	061b      	lsls	r3, r3, #24
   1014e:	4313      	orrs	r3, r2
   10150:	d001      	beq.n	10156 <UpdateJoinSuccessState+0xc6>
   10152:	2008      	movs	r0, #8
   10154:	4798      	blx	r3
   10156:	b007      	add	sp, #28
   10158:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1015a:	46c0      	nop			; (mov r8, r8)
   1015c:	20003348 	.word	0x20003348
   10160:	00009759 	.word	0x00009759
   10164:	0000d0a5 	.word	0x0000d0a5
   10168:	000102b1 	.word	0x000102b1
   1016c:	0000d5b5 	.word	0x0000d5b5
   10170:	200036a4 	.word	0x200036a4

00010174 <PrepareSessionKeys>:
   10174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10176:	0004      	movs	r4, r0
   10178:	2603      	movs	r6, #3
   1017a:	000d      	movs	r5, r1
   1017c:	0017      	movs	r7, r2
   1017e:	4b09      	ldr	r3, [pc, #36]	; (101a4 <PrepareSessionKeys+0x30>)
   10180:	2210      	movs	r2, #16
   10182:	2100      	movs	r1, #0
   10184:	4798      	blx	r3
   10186:	0032      	movs	r2, r6
   10188:	0029      	movs	r1, r5
   1018a:	1c60      	adds	r0, r4, #1
   1018c:	4d06      	ldr	r5, [pc, #24]	; (101a8 <PrepareSessionKeys+0x34>)
   1018e:	47a8      	blx	r5
   10190:	0032      	movs	r2, r6
   10192:	0039      	movs	r1, r7
   10194:	1d20      	adds	r0, r4, #4
   10196:	47a8      	blx	r5
   10198:	1de0      	adds	r0, r4, #7
   1019a:	2202      	movs	r2, #2
   1019c:	4903      	ldr	r1, [pc, #12]	; (101ac <PrepareSessionKeys+0x38>)
   1019e:	47a8      	blx	r5
   101a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   101a2:	46c0      	nop			; (mov r8, r8)
   101a4:	00016a21 	.word	0x00016a21
   101a8:	00016a0f 	.word	0x00016a0f
   101ac:	20003414 	.word	0x20003414

000101b0 <AssembleEncryptionBlock>:
   101b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   101b2:	001e      	movs	r6, r3
   101b4:	4c0b      	ldr	r4, [pc, #44]	; (101e4 <AssembleEncryptionBlock+0x34>)
   101b6:	0017      	movs	r7, r2
   101b8:	4b0b      	ldr	r3, [pc, #44]	; (101e8 <AssembleEncryptionBlock+0x38>)
   101ba:	0005      	movs	r5, r0
   101bc:	9101      	str	r1, [sp, #4]
   101be:	2210      	movs	r2, #16
   101c0:	2100      	movs	r1, #0
   101c2:	0020      	movs	r0, r4
   101c4:	4798      	blx	r3
   101c6:	7026      	strb	r6, [r4, #0]
   101c8:	2604      	movs	r6, #4
   101ca:	7165      	strb	r5, [r4, #5]
   101cc:	0032      	movs	r2, r6
   101ce:	4d07      	ldr	r5, [pc, #28]	; (101ec <AssembleEncryptionBlock+0x3c>)
   101d0:	a908      	add	r1, sp, #32
   101d2:	1da0      	adds	r0, r4, #6
   101d4:	47a8      	blx	r5
   101d6:	0020      	movs	r0, r4
   101d8:	0032      	movs	r2, r6
   101da:	a901      	add	r1, sp, #4
   101dc:	300a      	adds	r0, #10
   101de:	47a8      	blx	r5
   101e0:	73e7      	strb	r7, [r4, #15]
   101e2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   101e4:	200020a5 	.word	0x200020a5
   101e8:	00016a21 	.word	0x00016a21
   101ec:	00016a0f 	.word	0x00016a0f

000101f0 <ConfigureRadio>:
   101f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   101f2:	0001      	movs	r1, r0
   101f4:	0005      	movs	r5, r0
   101f6:	4c11      	ldr	r4, [pc, #68]	; (1023c <ConfigureRadio+0x4c>)
   101f8:	3109      	adds	r1, #9
   101fa:	2009      	movs	r0, #9
   101fc:	47a0      	blx	r4
   101fe:	0029      	movs	r1, r5
   10200:	2001      	movs	r0, #1
   10202:	47a0      	blx	r4
   10204:	1d29      	adds	r1, r5, #4
   10206:	200a      	movs	r0, #10
   10208:	47a0      	blx	r4
   1020a:	7a6b      	ldrb	r3, [r5, #9]
   1020c:	2b01      	cmp	r3, #1
   1020e:	d10b      	bne.n	10228 <ConfigureRadio+0x38>
   10210:	0029      	movs	r1, r5
   10212:	2016      	movs	r0, #22
   10214:	310b      	adds	r1, #11
   10216:	47a0      	blx	r4
   10218:	0029      	movs	r1, r5
   1021a:	2007      	movs	r0, #7
   1021c:	310a      	adds	r1, #10
   1021e:	47a0      	blx	r4
   10220:	2000      	movs	r0, #0
   10222:	4907      	ldr	r1, [pc, #28]	; (10240 <ConfigureRadio+0x50>)
   10224:	47a0      	blx	r4
   10226:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   10228:	466b      	mov	r3, sp
   1022a:	1dd9      	adds	r1, r3, #7
   1022c:	2303      	movs	r3, #3
   1022e:	2013      	movs	r0, #19
   10230:	700b      	strb	r3, [r1, #0]
   10232:	47a0      	blx	r4
   10234:	4903      	ldr	r1, [pc, #12]	; (10244 <ConfigureRadio+0x54>)
   10236:	2012      	movs	r0, #18
   10238:	e7f4      	b.n	10224 <ConfigureRadio+0x34>
   1023a:	46c0      	nop			; (mov r8, r8)
   1023c:	0000e57d 	.word	0x0000e57d
   10240:	20003448 	.word	0x20003448
   10244:	000192d8 	.word	0x000192d8

00010248 <StopReceiveWindow2Timer>:
   10248:	b510      	push	{r4, lr}
   1024a:	4c0b      	ldr	r4, [pc, #44]	; (10278 <StopReceiveWindow2Timer+0x30>)
   1024c:	0022      	movs	r2, r4
   1024e:	32fd      	adds	r2, #253	; 0xfd
   10250:	7812      	ldrb	r2, [r2, #0]
   10252:	2a01      	cmp	r2, #1
   10254:	d10e      	bne.n	10274 <StopReceiveWindow2Timer+0x2c>
   10256:	0021      	movs	r1, r4
   10258:	200e      	movs	r0, #14
   1025a:	3184      	adds	r1, #132	; 0x84
   1025c:	780a      	ldrb	r2, [r1, #0]
   1025e:	34ee      	adds	r4, #238	; 0xee
   10260:	4382      	bics	r2, r0
   10262:	700a      	strb	r2, [r1, #0]
   10264:	7820      	ldrb	r0, [r4, #0]
   10266:	4b05      	ldr	r3, [pc, #20]	; (1027c <StopReceiveWindow2Timer+0x34>)
   10268:	4798      	blx	r3
   1026a:	2800      	cmp	r0, #0
   1026c:	d002      	beq.n	10274 <StopReceiveWindow2Timer+0x2c>
   1026e:	7820      	ldrb	r0, [r4, #0]
   10270:	4b03      	ldr	r3, [pc, #12]	; (10280 <StopReceiveWindow2Timer+0x38>)
   10272:	4798      	blx	r3
   10274:	bd10      	pop	{r4, pc}
   10276:	46c0      	nop			; (mov r8, r8)
   10278:	20003348 	.word	0x20003348
   1027c:	0000d74d 	.word	0x0000d74d
   10280:	0000d8cd 	.word	0x0000d8cd

00010284 <LorawanLinkCheckCallback.part.1>:
   10284:	4b07      	ldr	r3, [pc, #28]	; (102a4 <LorawanLinkCheckCallback.part.1+0x20>)
   10286:	b513      	push	{r0, r1, r4, lr}
   10288:	001a      	movs	r2, r3
   1028a:	21fa      	movs	r1, #250	; 0xfa
   1028c:	3290      	adds	r2, #144	; 0x90
   1028e:	6812      	ldr	r2, [r2, #0]
   10290:	0089      	lsls	r1, r1, #2
   10292:	4351      	muls	r1, r2
   10294:	2200      	movs	r2, #0
   10296:	33f0      	adds	r3, #240	; 0xf0
   10298:	7818      	ldrb	r0, [r3, #0]
   1029a:	4c03      	ldr	r4, [pc, #12]	; (102a8 <LorawanLinkCheckCallback.part.1+0x24>)
   1029c:	9200      	str	r2, [sp, #0]
   1029e:	4b03      	ldr	r3, [pc, #12]	; (102ac <LorawanLinkCheckCallback.part.1+0x28>)
   102a0:	47a0      	blx	r4
   102a2:	bd13      	pop	{r0, r1, r4, pc}
   102a4:	20003348 	.word	0x20003348
   102a8:	0000d5b5 	.word	0x0000d5b5
   102ac:	000102b1 	.word	0x000102b1

000102b0 <LorawanLinkCheckCallback>:
   102b0:	4b17      	ldr	r3, [pc, #92]	; (10310 <LorawanLinkCheckCallback+0x60>)
   102b2:	20a0      	movs	r0, #160	; 0xa0
   102b4:	001a      	movs	r2, r3
   102b6:	2180      	movs	r1, #128	; 0x80
   102b8:	b510      	push	{r4, lr}
   102ba:	3284      	adds	r2, #132	; 0x84
   102bc:	8812      	ldrh	r2, [r2, #0]
   102be:	0080      	lsls	r0, r0, #2
   102c0:	0089      	lsls	r1, r1, #2
   102c2:	4002      	ands	r2, r0
   102c4:	428a      	cmp	r2, r1
   102c6:	d11c      	bne.n	10302 <LorawanLinkCheckCallback+0x52>
   102c8:	001a      	movs	r2, r3
   102ca:	32e0      	adds	r2, #224	; 0xe0
   102cc:	7810      	ldrb	r0, [r2, #0]
   102ce:	2403      	movs	r4, #3
   102d0:	2200      	movs	r2, #0
   102d2:	b2d1      	uxtb	r1, r2
   102d4:	4281      	cmp	r1, r0
   102d6:	d30d      	bcc.n	102f4 <LorawanLinkCheckCallback+0x44>
   102d8:	d113      	bne.n	10302 <LorawanLinkCheckCallback+0x52>
   102da:	2203      	movs	r2, #3
   102dc:	434a      	muls	r2, r1
   102de:	2102      	movs	r1, #2
   102e0:	189a      	adds	r2, r3, r2
   102e2:	3299      	adds	r2, #153	; 0x99
   102e4:	7011      	strb	r1, [r2, #0]
   102e6:	280f      	cmp	r0, #15
   102e8:	d80b      	bhi.n	10302 <LorawanLinkCheckCallback+0x52>
   102ea:	001a      	movs	r2, r3
   102ec:	3001      	adds	r0, #1
   102ee:	32e0      	adds	r2, #224	; 0xe0
   102f0:	7010      	strb	r0, [r2, #0]
   102f2:	e006      	b.n	10302 <LorawanLinkCheckCallback+0x52>
   102f4:	0021      	movs	r1, r4
   102f6:	3201      	adds	r2, #1
   102f8:	4351      	muls	r1, r2
   102fa:	3196      	adds	r1, #150	; 0x96
   102fc:	5c59      	ldrb	r1, [r3, r1]
   102fe:	2902      	cmp	r1, #2
   10300:	d1e7      	bne.n	102d2 <LorawanLinkCheckCallback+0x22>
   10302:	3385      	adds	r3, #133	; 0x85
   10304:	781b      	ldrb	r3, [r3, #0]
   10306:	079b      	lsls	r3, r3, #30
   10308:	d501      	bpl.n	1030e <LorawanLinkCheckCallback+0x5e>
   1030a:	4b02      	ldr	r3, [pc, #8]	; (10314 <LorawanLinkCheckCallback+0x64>)
   1030c:	4798      	blx	r3
   1030e:	bd10      	pop	{r4, pc}
   10310:	20003348 	.word	0x20003348
   10314:	00010285 	.word	0x00010285

00010318 <LORAWAN_Send>:
   10318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1031a:	4c37      	ldr	r4, [pc, #220]	; (103f8 <LORAWAN_Send+0xe0>)
   1031c:	0006      	movs	r6, r0
   1031e:	0023      	movs	r3, r4
   10320:	3384      	adds	r3, #132	; 0x84
   10322:	781b      	ldrb	r3, [r3, #0]
   10324:	250f      	movs	r5, #15
   10326:	b25a      	sxtb	r2, r3
   10328:	2a00      	cmp	r2, #0
   1032a:	db0b      	blt.n	10344 <LORAWAN_Send+0x2c>
   1032c:	3d03      	subs	r5, #3
   1032e:	065a      	lsls	r2, r3, #25
   10330:	d408      	bmi.n	10344 <LORAWAN_Send+0x2c>
   10332:	3d03      	subs	r5, #3
   10334:	07db      	lsls	r3, r3, #31
   10336:	d505      	bpl.n	10344 <LORAWAN_Send+0x2c>
   10338:	2388      	movs	r3, #136	; 0x88
   1033a:	009b      	lsls	r3, r3, #2
   1033c:	5ce7      	ldrb	r7, [r4, r3]
   1033e:	2f00      	cmp	r7, #0
   10340:	d102      	bne.n	10348 <LORAWAN_Send+0x30>
   10342:	2511      	movs	r5, #17
   10344:	0028      	movs	r0, r5
   10346:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10348:	2800      	cmp	r0, #0
   1034a:	d10f      	bne.n	1036c <LORAWAN_Send+0x54>
   1034c:	2700      	movs	r7, #0
   1034e:	0023      	movs	r3, r4
   10350:	3388      	adds	r3, #136	; 0x88
   10352:	681b      	ldr	r3, [r3, #0]
   10354:	3301      	adds	r3, #1
   10356:	d123      	bne.n	103a0 <LORAWAN_Send+0x88>
   10358:	2001      	movs	r0, #1
   1035a:	3484      	adds	r4, #132	; 0x84
   1035c:	78a3      	ldrb	r3, [r4, #2]
   1035e:	210b      	movs	r1, #11
   10360:	4303      	orrs	r3, r0
   10362:	70a3      	strb	r3, [r4, #2]
   10364:	4b25      	ldr	r3, [pc, #148]	; (103fc <LORAWAN_Send+0xe4>)
   10366:	4798      	blx	r3
   10368:	250d      	movs	r5, #13
   1036a:	e7eb      	b.n	10344 <LORAWAN_Send+0x2c>
   1036c:	7843      	ldrb	r3, [r0, #1]
   1036e:	7a02      	ldrb	r2, [r0, #8]
   10370:	3b01      	subs	r3, #1
   10372:	b2db      	uxtb	r3, r3
   10374:	9201      	str	r2, [sp, #4]
   10376:	2bdf      	cmp	r3, #223	; 0xdf
   10378:	d902      	bls.n	10380 <LORAWAN_Send+0x68>
   1037a:	250a      	movs	r5, #10
   1037c:	2a00      	cmp	r2, #0
   1037e:	d1e1      	bne.n	10344 <LORAWAN_Send+0x2c>
   10380:	4b1f      	ldr	r3, [pc, #124]	; (10400 <LORAWAN_Send+0xe8>)
   10382:	4798      	blx	r3
   10384:	4684      	mov	ip, r0
   10386:	9b01      	ldr	r3, [sp, #4]
   10388:	9000      	str	r0, [sp, #0]
   1038a:	4463      	add	r3, ip
   1038c:	001d      	movs	r5, r3
   1038e:	4b1d      	ldr	r3, [pc, #116]	; (10404 <LORAWAN_Send+0xec>)
   10390:	4798      	blx	r3
   10392:	4285      	cmp	r5, r0
   10394:	ddda      	ble.n	1034c <LORAWAN_Send+0x34>
   10396:	9b00      	ldr	r3, [sp, #0]
   10398:	250e      	movs	r5, #14
   1039a:	2b00      	cmp	r3, #0
   1039c:	d0d2      	beq.n	10344 <LORAWAN_Send+0x2c>
   1039e:	e7d6      	b.n	1034e <LORAWAN_Send+0x36>
   103a0:	0023      	movs	r3, r4
   103a2:	33fd      	adds	r3, #253	; 0xfd
   103a4:	781b      	ldrb	r3, [r3, #0]
   103a6:	2b04      	cmp	r3, #4
   103a8:	d01d      	beq.n	103e6 <LORAWAN_Send+0xce>
   103aa:	0023      	movs	r3, r4
   103ac:	33fd      	adds	r3, #253	; 0xfd
   103ae:	781b      	ldrb	r3, [r3, #0]
   103b0:	2b01      	cmp	r3, #1
   103b2:	d105      	bne.n	103c0 <LORAWAN_Send+0xa8>
   103b4:	0023      	movs	r3, r4
   103b6:	3384      	adds	r3, #132	; 0x84
   103b8:	781a      	ldrb	r2, [r3, #0]
   103ba:	230e      	movs	r3, #14
   103bc:	421a      	tst	r2, r3
   103be:	d1c0      	bne.n	10342 <LORAWAN_Send+0x2a>
   103c0:	0023      	movs	r3, r4
   103c2:	33fc      	adds	r3, #252	; 0xfc
   103c4:	2f00      	cmp	r7, #0
   103c6:	d113      	bne.n	103f0 <LORAWAN_Send+0xd8>
   103c8:	2508      	movs	r5, #8
   103ca:	60de      	str	r6, [r3, #12]
   103cc:	2388      	movs	r3, #136	; 0x88
   103ce:	2200      	movs	r2, #0
   103d0:	009b      	lsls	r3, r3, #2
   103d2:	54e2      	strb	r2, [r4, r3]
   103d4:	2001      	movs	r0, #1
   103d6:	4b0c      	ldr	r3, [pc, #48]	; (10408 <LORAWAN_Send+0xf0>)
   103d8:	4798      	blx	r3
   103da:	2320      	movs	r3, #32
   103dc:	3494      	adds	r4, #148	; 0x94
   103de:	7822      	ldrb	r2, [r4, #0]
   103e0:	4313      	orrs	r3, r2
   103e2:	7023      	strb	r3, [r4, #0]
   103e4:	e7ae      	b.n	10344 <LORAWAN_Send+0x2c>
   103e6:	4b09      	ldr	r3, [pc, #36]	; (1040c <LORAWAN_Send+0xf4>)
   103e8:	4798      	blx	r3
   103ea:	2808      	cmp	r0, #8
   103ec:	d1a9      	bne.n	10342 <LORAWAN_Send+0x2a>
   103ee:	e7dc      	b.n	103aa <LORAWAN_Send+0x92>
   103f0:	2200      	movs	r2, #0
   103f2:	2511      	movs	r5, #17
   103f4:	60da      	str	r2, [r3, #12]
   103f6:	e7e9      	b.n	103cc <LORAWAN_Send+0xb4>
   103f8:	20003348 	.word	0x20003348
   103fc:	00009759 	.word	0x00009759
   10400:	0000fde5 	.word	0x0000fde5
   10404:	0000fe25 	.word	0x0000fe25
   10408:	0000e409 	.word	0x0000e409
   1040c:	00012f55 	.word	0x00012f55

00010410 <AutomaticReplyCallback>:
   10410:	b510      	push	{r4, lr}
   10412:	4c0d      	ldr	r4, [pc, #52]	; (10448 <AutomaticReplyCallback+0x38>)
   10414:	0023      	movs	r3, r4
   10416:	33fd      	adds	r3, #253	; 0xfd
   10418:	781b      	ldrb	r3, [r3, #0]
   1041a:	2b01      	cmp	r3, #1
   1041c:	d10e      	bne.n	1043c <AutomaticReplyCallback+0x2c>
   1041e:	0022      	movs	r2, r4
   10420:	210e      	movs	r1, #14
   10422:	3284      	adds	r2, #132	; 0x84
   10424:	7813      	ldrb	r3, [r2, #0]
   10426:	438b      	bics	r3, r1
   10428:	7013      	strb	r3, [r2, #0]
   1042a:	4b08      	ldr	r3, [pc, #32]	; (1044c <AutomaticReplyCallback+0x3c>)
   1042c:	2000      	movs	r0, #0
   1042e:	4798      	blx	r3
   10430:	2208      	movs	r2, #8
   10432:	3494      	adds	r4, #148	; 0x94
   10434:	7823      	ldrb	r3, [r4, #0]
   10436:	4393      	bics	r3, r2
   10438:	7023      	strb	r3, [r4, #0]
   1043a:	bd10      	pop	{r4, pc}
   1043c:	2b04      	cmp	r3, #4
   1043e:	d1f4      	bne.n	1042a <AutomaticReplyCallback+0x1a>
   10440:	4b03      	ldr	r3, [pc, #12]	; (10450 <AutomaticReplyCallback+0x40>)
   10442:	4798      	blx	r3
   10444:	e7f1      	b.n	1042a <AutomaticReplyCallback+0x1a>
   10446:	46c0      	nop			; (mov r8, r8)
   10448:	20003348 	.word	0x20003348
   1044c:	00010319 	.word	0x00010319
   10450:	0000ee91 	.word	0x0000ee91

00010454 <LorawanLinkCheckConfigure>:
   10454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10456:	23fa      	movs	r3, #250	; 0xfa
   10458:	4c21      	ldr	r4, [pc, #132]	; (104e0 <LorawanLinkCheckConfigure+0x8c>)
   1045a:	009b      	lsls	r3, r3, #2
   1045c:	0022      	movs	r2, r4
   1045e:	0025      	movs	r5, r4
   10460:	4343      	muls	r3, r0
   10462:	3290      	adds	r2, #144	; 0x90
   10464:	0006      	movs	r6, r0
   10466:	2102      	movs	r1, #2
   10468:	2000      	movs	r0, #0
   1046a:	4f1e      	ldr	r7, [pc, #120]	; (104e4 <LorawanLinkCheckConfigure+0x90>)
   1046c:	6013      	str	r3, [r2, #0]
   1046e:	3584      	adds	r5, #132	; 0x84
   10470:	47b8      	blx	r7
   10472:	2e00      	cmp	r6, #0
   10474:	d127      	bne.n	104c6 <LorawanLinkCheckConfigure+0x72>
   10476:	0023      	movs	r3, r4
   10478:	33f0      	adds	r3, #240	; 0xf0
   1047a:	7818      	ldrb	r0, [r3, #0]
   1047c:	4b1a      	ldr	r3, [pc, #104]	; (104e8 <LorawanLinkCheckConfigure+0x94>)
   1047e:	4798      	blx	r3
   10480:	2202      	movs	r2, #2
   10482:	786b      	ldrb	r3, [r5, #1]
   10484:	210b      	movs	r1, #11
   10486:	4393      	bics	r3, r2
   10488:	706b      	strb	r3, [r5, #1]
   1048a:	2001      	movs	r0, #1
   1048c:	47b8      	blx	r7
   1048e:	0023      	movs	r3, r4
   10490:	2701      	movs	r7, #1
   10492:	33e0      	adds	r3, #224	; 0xe0
   10494:	781b      	ldrb	r3, [r3, #0]
   10496:	0030      	movs	r0, r6
   10498:	0032      	movs	r2, r6
   1049a:	36ff      	adds	r6, #255	; 0xff
   1049c:	429a      	cmp	r2, r3
   1049e:	d304      	bcc.n	104aa <LorawanLinkCheckConfigure+0x56>
   104a0:	2800      	cmp	r0, #0
   104a2:	d001      	beq.n	104a8 <LorawanLinkCheckConfigure+0x54>
   104a4:	34e0      	adds	r4, #224	; 0xe0
   104a6:	7023      	strb	r3, [r4, #0]
   104a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   104aa:	2103      	movs	r1, #3
   104ac:	4351      	muls	r1, r2
   104ae:	1861      	adds	r1, r4, r1
   104b0:	3199      	adds	r1, #153	; 0x99
   104b2:	780d      	ldrb	r5, [r1, #0]
   104b4:	2d02      	cmp	r5, #2
   104b6:	d103      	bne.n	104c0 <LorawanLinkCheckConfigure+0x6c>
   104b8:	0038      	movs	r0, r7
   104ba:	3b01      	subs	r3, #1
   104bc:	700e      	strb	r6, [r1, #0]
   104be:	b2db      	uxtb	r3, r3
   104c0:	3201      	adds	r2, #1
   104c2:	b2d2      	uxtb	r2, r2
   104c4:	e7ea      	b.n	1049c <LorawanLinkCheckConfigure+0x48>
   104c6:	2302      	movs	r3, #2
   104c8:	786a      	ldrb	r2, [r5, #1]
   104ca:	210b      	movs	r1, #11
   104cc:	4313      	orrs	r3, r2
   104ce:	706b      	strb	r3, [r5, #1]
   104d0:	2001      	movs	r0, #1
   104d2:	47b8      	blx	r7
   104d4:	782b      	ldrb	r3, [r5, #0]
   104d6:	07db      	lsls	r3, r3, #31
   104d8:	d5e6      	bpl.n	104a8 <LorawanLinkCheckConfigure+0x54>
   104da:	4b04      	ldr	r3, [pc, #16]	; (104ec <LorawanLinkCheckConfigure+0x98>)
   104dc:	4798      	blx	r3
   104de:	e7e3      	b.n	104a8 <LorawanLinkCheckConfigure+0x54>
   104e0:	20003348 	.word	0x20003348
   104e4:	00009759 	.word	0x00009759
   104e8:	0000d8cd 	.word	0x0000d8cd
   104ec:	00010285 	.word	0x00010285

000104f0 <EncodeDeviceTimeReq>:
   104f0:	4b08      	ldr	r3, [pc, #32]	; (10514 <EncodeDeviceTimeReq+0x24>)
   104f2:	b510      	push	{r4, lr}
   104f4:	001c      	movs	r4, r3
   104f6:	34e0      	adds	r4, #224	; 0xe0
   104f8:	7822      	ldrb	r2, [r4, #0]
   104fa:	2015      	movs	r0, #21
   104fc:	2a0f      	cmp	r2, #15
   104fe:	d808      	bhi.n	10512 <EncodeDeviceTimeReq+0x22>
   10500:	2103      	movs	r1, #3
   10502:	4351      	muls	r1, r2
   10504:	185b      	adds	r3, r3, r1
   10506:	210d      	movs	r1, #13
   10508:	3399      	adds	r3, #153	; 0x99
   1050a:	3201      	adds	r2, #1
   1050c:	7019      	strb	r1, [r3, #0]
   1050e:	7022      	strb	r2, [r4, #0]
   10510:	380d      	subs	r0, #13
   10512:	bd10      	pop	{r4, pc}
   10514:	20003348 	.word	0x20003348

00010518 <EncodeLinkCheckReq>:
   10518:	4b08      	ldr	r3, [pc, #32]	; (1053c <EncodeLinkCheckReq+0x24>)
   1051a:	b510      	push	{r4, lr}
   1051c:	001c      	movs	r4, r3
   1051e:	34e0      	adds	r4, #224	; 0xe0
   10520:	7822      	ldrb	r2, [r4, #0]
   10522:	2015      	movs	r0, #21
   10524:	2a0f      	cmp	r2, #15
   10526:	d808      	bhi.n	1053a <EncodeLinkCheckReq+0x22>
   10528:	2103      	movs	r1, #3
   1052a:	4351      	muls	r1, r2
   1052c:	185b      	adds	r3, r3, r1
   1052e:	2102      	movs	r1, #2
   10530:	3399      	adds	r3, #153	; 0x99
   10532:	3201      	adds	r2, #1
   10534:	7019      	strb	r1, [r3, #0]
   10536:	7022      	strb	r2, [r4, #0]
   10538:	380d      	subs	r0, #13
   1053a:	bd10      	pop	{r4, pc}
   1053c:	20003348 	.word	0x20003348

00010540 <UpdateCurrentDataRate>:
   10540:	b510      	push	{r4, lr}
   10542:	4b04      	ldr	r3, [pc, #16]	; (10554 <UpdateCurrentDataRate+0x14>)
   10544:	210c      	movs	r1, #12
   10546:	33e7      	adds	r3, #231	; 0xe7
   10548:	7018      	strb	r0, [r3, #0]
   1054a:	2001      	movs	r0, #1
   1054c:	4b02      	ldr	r3, [pc, #8]	; (10558 <UpdateCurrentDataRate+0x18>)
   1054e:	4798      	blx	r3
   10550:	bd10      	pop	{r4, pc}
   10552:	46c0      	nop			; (mov r8, r8)
   10554:	20003348 	.word	0x20003348
   10558:	00009759 	.word	0x00009759

0001055c <UpdateDLSettings>:
   1055c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1055e:	466b      	mov	r3, sp
   10560:	1dde      	adds	r6, r3, #7
   10562:	1d9c      	adds	r4, r3, #6
   10564:	71d8      	strb	r0, [r3, #7]
   10566:	7021      	strb	r1, [r4, #0]
   10568:	2017      	movs	r0, #23
   1056a:	0031      	movs	r1, r6
   1056c:	4d0c      	ldr	r5, [pc, #48]	; (105a0 <UpdateDLSettings+0x44>)
   1056e:	47a8      	blx	r5
   10570:	2808      	cmp	r0, #8
   10572:	d107      	bne.n	10584 <UpdateDLSettings+0x28>
   10574:	4b0b      	ldr	r3, [pc, #44]	; (105a4 <UpdateDLSettings+0x48>)
   10576:	7832      	ldrb	r2, [r6, #0]
   10578:	336e      	adds	r3, #110	; 0x6e
   1057a:	701a      	strb	r2, [r3, #0]
   1057c:	2100      	movs	r1, #0
   1057e:	3807      	subs	r0, #7
   10580:	4b09      	ldr	r3, [pc, #36]	; (105a8 <UpdateDLSettings+0x4c>)
   10582:	4798      	blx	r3
   10584:	0021      	movs	r1, r4
   10586:	2018      	movs	r0, #24
   10588:	47a8      	blx	r5
   1058a:	2808      	cmp	r0, #8
   1058c:	d107      	bne.n	1059e <UpdateDLSettings+0x42>
   1058e:	2101      	movs	r1, #1
   10590:	4b04      	ldr	r3, [pc, #16]	; (105a4 <UpdateDLSettings+0x48>)
   10592:	7822      	ldrb	r2, [r4, #0]
   10594:	33f7      	adds	r3, #247	; 0xf7
   10596:	701a      	strb	r2, [r3, #0]
   10598:	0008      	movs	r0, r1
   1059a:	4b03      	ldr	r3, [pc, #12]	; (105a8 <UpdateDLSettings+0x4c>)
   1059c:	4798      	blx	r3
   1059e:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   105a0:	0000d089 	.word	0x0000d089
   105a4:	20003348 	.word	0x20003348
   105a8:	00009759 	.word	0x00009759

000105ac <UpdateTxPower>:
   105ac:	b510      	push	{r4, lr}
   105ae:	4b04      	ldr	r3, [pc, #16]	; (105c0 <UpdateTxPower+0x14>)
   105b0:	210a      	movs	r1, #10
   105b2:	33e9      	adds	r3, #233	; 0xe9
   105b4:	7018      	strb	r0, [r3, #0]
   105b6:	2000      	movs	r0, #0
   105b8:	4b02      	ldr	r3, [pc, #8]	; (105c4 <UpdateTxPower+0x18>)
   105ba:	4798      	blx	r3
   105bc:	bd10      	pop	{r4, pc}
   105be:	46c0      	nop			; (mov r8, r8)
   105c0:	20003348 	.word	0x20003348
   105c4:	00009759 	.word	0x00009759

000105c8 <UpdateRetransmissionAckTimeoutState>:
   105c8:	4b10      	ldr	r3, [pc, #64]	; (1060c <UpdateRetransmissionAckTimeoutState+0x44>)
   105ca:	b513      	push	{r0, r1, r4, lr}
   105cc:	001a      	movs	r2, r3
   105ce:	32fd      	adds	r2, #253	; 0xfd
   105d0:	7812      	ldrb	r2, [r2, #0]
   105d2:	2a01      	cmp	r2, #1
   105d4:	d108      	bne.n	105e8 <UpdateRetransmissionAckTimeoutState+0x20>
   105d6:	0018      	movs	r0, r3
   105d8:	210e      	movs	r1, #14
   105da:	3084      	adds	r0, #132	; 0x84
   105dc:	7802      	ldrb	r2, [r0, #0]
   105de:	438a      	bics	r2, r1
   105e0:	0011      	movs	r1, r2
   105e2:	220c      	movs	r2, #12
   105e4:	430a      	orrs	r2, r1
   105e6:	7002      	strb	r2, [r0, #0]
   105e8:	001a      	movs	r2, r3
   105ea:	32da      	adds	r2, #218	; 0xda
   105ec:	8811      	ldrh	r1, [r2, #0]
   105ee:	4a08      	ldr	r2, [pc, #32]	; (10610 <UpdateRetransmissionAckTimeoutState+0x48>)
   105f0:	4c08      	ldr	r4, [pc, #32]	; (10614 <UpdateRetransmissionAckTimeoutState+0x4c>)
   105f2:	5c9a      	ldrb	r2, [r3, r2]
   105f4:	33f1      	adds	r3, #241	; 0xf1
   105f6:	1a8a      	subs	r2, r1, r2
   105f8:	21fa      	movs	r1, #250	; 0xfa
   105fa:	0089      	lsls	r1, r1, #2
   105fc:	4351      	muls	r1, r2
   105fe:	2200      	movs	r2, #0
   10600:	7818      	ldrb	r0, [r3, #0]
   10602:	9200      	str	r2, [sp, #0]
   10604:	4b04      	ldr	r3, [pc, #16]	; (10618 <UpdateRetransmissionAckTimeoutState+0x50>)
   10606:	47a0      	blx	r4
   10608:	bd13      	pop	{r0, r1, r4, pc}
   1060a:	46c0      	nop			; (mov r8, r8)
   1060c:	20003348 	.word	0x20003348
   10610:	0000022b 	.word	0x0000022b
   10614:	0000d5b5 	.word	0x0000d5b5
   10618:	00011359 	.word	0x00011359

0001061c <UpdateReceiveWindow2Parameters>:
   1061c:	4b0f      	ldr	r3, [pc, #60]	; (1065c <UpdateReceiveWindow2Parameters+0x40>)
   1061e:	b570      	push	{r4, r5, r6, lr}
   10620:	001a      	movs	r2, r3
   10622:	326e      	adds	r2, #110	; 0x6e
   10624:	7011      	strb	r1, [r2, #0]
   10626:	001a      	movs	r2, r3
   10628:	0c04      	lsrs	r4, r0, #16
   1062a:	326a      	adds	r2, #106	; 0x6a
   1062c:	8010      	strh	r0, [r2, #0]
   1062e:	8054      	strh	r4, [r2, #2]
   10630:	001a      	movs	r2, r3
   10632:	25fd      	movs	r5, #253	; 0xfd
   10634:	32fd      	adds	r2, #253	; 0xfd
   10636:	7812      	ldrb	r2, [r2, #0]
   10638:	3a02      	subs	r2, #2
   1063a:	422a      	tst	r2, r5
   1063c:	d109      	bne.n	10652 <UpdateReceiveWindow2Parameters+0x36>
   1063e:	001a      	movs	r2, r3
   10640:	336f      	adds	r3, #111	; 0x6f
   10642:	3273      	adds	r2, #115	; 0x73
   10644:	7011      	strb	r1, [r2, #0]
   10646:	7018      	strb	r0, [r3, #0]
   10648:	0a02      	lsrs	r2, r0, #8
   1064a:	0e00      	lsrs	r0, r0, #24
   1064c:	705a      	strb	r2, [r3, #1]
   1064e:	709c      	strb	r4, [r3, #2]
   10650:	70d8      	strb	r0, [r3, #3]
   10652:	2100      	movs	r1, #0
   10654:	4b02      	ldr	r3, [pc, #8]	; (10660 <UpdateReceiveWindow2Parameters+0x44>)
   10656:	2001      	movs	r0, #1
   10658:	4798      	blx	r3
   1065a:	bd70      	pop	{r4, r5, r6, pc}
   1065c:	20003348 	.word	0x20003348
   10660:	00009759 	.word	0x00009759

00010664 <ResetParametersForConfirmedTransmission>:
   10664:	4b0a      	ldr	r3, [pc, #40]	; (10690 <ResetParametersForConfirmedTransmission+0x2c>)
   10666:	001a      	movs	r2, r3
   10668:	32fd      	adds	r2, #253	; 0xfd
   1066a:	7812      	ldrb	r2, [r2, #0]
   1066c:	2a01      	cmp	r2, #1
   1066e:	d105      	bne.n	1067c <ResetParametersForConfirmedTransmission+0x18>
   10670:	0019      	movs	r1, r3
   10672:	200e      	movs	r0, #14
   10674:	3184      	adds	r1, #132	; 0x84
   10676:	780a      	ldrb	r2, [r1, #0]
   10678:	4382      	bics	r2, r0
   1067a:	700a      	strb	r2, [r1, #0]
   1067c:	001a      	movs	r2, r3
   1067e:	2100      	movs	r1, #0
   10680:	3394      	adds	r3, #148	; 0x94
   10682:	32e4      	adds	r2, #228	; 0xe4
   10684:	7011      	strb	r1, [r2, #0]
   10686:	781a      	ldrb	r2, [r3, #0]
   10688:	3101      	adds	r1, #1
   1068a:	438a      	bics	r2, r1
   1068c:	701a      	strb	r2, [r3, #0]
   1068e:	4770      	bx	lr
   10690:	20003348 	.word	0x20003348

00010694 <ResetParametersForUnconfirmedTransmission>:
   10694:	4b07      	ldr	r3, [pc, #28]	; (106b4 <ResetParametersForUnconfirmedTransmission+0x20>)
   10696:	001a      	movs	r2, r3
   10698:	32fd      	adds	r2, #253	; 0xfd
   1069a:	7812      	ldrb	r2, [r2, #0]
   1069c:	2a01      	cmp	r2, #1
   1069e:	d105      	bne.n	106ac <ResetParametersForUnconfirmedTransmission+0x18>
   106a0:	0019      	movs	r1, r3
   106a2:	200e      	movs	r0, #14
   106a4:	3184      	adds	r1, #132	; 0x84
   106a6:	780a      	ldrb	r2, [r1, #0]
   106a8:	4382      	bics	r2, r0
   106aa:	700a      	strb	r2, [r1, #0]
   106ac:	2200      	movs	r2, #0
   106ae:	33e3      	adds	r3, #227	; 0xe3
   106b0:	701a      	strb	r2, [r3, #0]
   106b2:	4770      	bx	lr
   106b4:	20003348 	.word	0x20003348

000106b8 <SetJoinFailState>:
   106b8:	b570      	push	{r4, r5, r6, lr}
   106ba:	4c15      	ldr	r4, [pc, #84]	; (10710 <SetJoinFailState+0x58>)
   106bc:	2604      	movs	r6, #4
   106be:	0025      	movs	r5, r4
   106c0:	3594      	adds	r5, #148	; 0x94
   106c2:	782a      	ldrb	r2, [r5, #0]
   106c4:	0021      	movs	r1, r4
   106c6:	43b2      	bics	r2, r6
   106c8:	702a      	strb	r2, [r5, #0]
   106ca:	22f0      	movs	r2, #240	; 0xf0
   106cc:	3184      	adds	r1, #132	; 0x84
   106ce:	780b      	ldrb	r3, [r1, #0]
   106d0:	4013      	ands	r3, r2
   106d2:	700b      	strb	r3, [r1, #0]
   106d4:	0023      	movs	r3, r4
   106d6:	33ff      	adds	r3, #255	; 0xff
   106d8:	7f5b      	ldrb	r3, [r3, #29]
   106da:	069b      	lsls	r3, r3, #26
   106dc:	d503      	bpl.n	106e6 <SetJoinFailState+0x2e>
   106de:	0023      	movs	r3, r4
   106e0:	2200      	movs	r2, #0
   106e2:	3380      	adds	r3, #128	; 0x80
   106e4:	701a      	strb	r2, [r3, #0]
   106e6:	490b      	ldr	r1, [pc, #44]	; (10714 <SetJoinFailState+0x5c>)
   106e8:	794a      	ldrb	r2, [r1, #5]
   106ea:	790b      	ldrb	r3, [r1, #4]
   106ec:	0212      	lsls	r2, r2, #8
   106ee:	431a      	orrs	r2, r3
   106f0:	798b      	ldrb	r3, [r1, #6]
   106f2:	041b      	lsls	r3, r3, #16
   106f4:	431a      	orrs	r2, r3
   106f6:	79cb      	ldrb	r3, [r1, #7]
   106f8:	061b      	lsls	r3, r3, #24
   106fa:	4313      	orrs	r3, r2
   106fc:	d000      	beq.n	10700 <SetJoinFailState+0x48>
   106fe:	4798      	blx	r3
   10700:	2300      	movs	r3, #0
   10702:	34f9      	adds	r4, #249	; 0xf9
   10704:	7023      	strb	r3, [r4, #0]
   10706:	210b      	movs	r1, #11
   10708:	4b03      	ldr	r3, [pc, #12]	; (10718 <SetJoinFailState+0x60>)
   1070a:	2001      	movs	r0, #1
   1070c:	4798      	blx	r3
   1070e:	bd70      	pop	{r4, r5, r6, pc}
   10710:	20003348 	.word	0x20003348
   10714:	200036a4 	.word	0x200036a4
   10718:	00009759 	.word	0x00009759

0001071c <ExecuteRxParamSetupReq>:
   1071c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1071e:	b085      	sub	sp, #20
   10720:	7805      	ldrb	r5, [r0, #0]
   10722:	0004      	movs	r4, r0
   10724:	1c41      	adds	r1, r0, #1
   10726:	2204      	movs	r2, #4
   10728:	4b36      	ldr	r3, [pc, #216]	; (10804 <ExecuteRxParamSetupReq+0xe8>)
   1072a:	a803      	add	r0, sp, #12
   1072c:	4798      	blx	r3
   1072e:	2264      	movs	r2, #100	; 0x64
   10730:	9b03      	ldr	r3, [sp, #12]
   10732:	a903      	add	r1, sp, #12
   10734:	021b      	lsls	r3, r3, #8
   10736:	0a1b      	lsrs	r3, r3, #8
   10738:	4353      	muls	r3, r2
   1073a:	9303      	str	r3, [sp, #12]
   1073c:	1d23      	adds	r3, r4, #4
   1073e:	9301      	str	r3, [sp, #4]
   10740:	072b      	lsls	r3, r5, #28
   10742:	0f1b      	lsrs	r3, r3, #28
   10744:	b2da      	uxtb	r2, r3
   10746:	9200      	str	r2, [sp, #0]
   10748:	aa02      	add	r2, sp, #8
   1074a:	1c96      	adds	r6, r2, #2
   1074c:	066d      	lsls	r5, r5, #25
   1074e:	7033      	strb	r3, [r6, #0]
   10750:	1cd7      	adds	r7, r2, #3
   10752:	0f6d      	lsrs	r5, r5, #29
   10754:	2001      	movs	r0, #1
   10756:	4b2c      	ldr	r3, [pc, #176]	; (10808 <ExecuteRxParamSetupReq+0xec>)
   10758:	703d      	strb	r5, [r7, #0]
   1075a:	4798      	blx	r3
   1075c:	4c2b      	ldr	r4, [pc, #172]	; (1080c <ExecuteRxParamSetupReq+0xf0>)
   1075e:	2808      	cmp	r0, #8
   10760:	d109      	bne.n	10776 <ExecuteRxParamSetupReq+0x5a>
   10762:	0023      	movs	r3, r4
   10764:	33e0      	adds	r3, #224	; 0xe0
   10766:	781a      	ldrb	r2, [r3, #0]
   10768:	2303      	movs	r3, #3
   1076a:	4353      	muls	r3, r2
   1076c:	18e3      	adds	r3, r4, r3
   1076e:	3398      	adds	r3, #152	; 0x98
   10770:	789a      	ldrb	r2, [r3, #2]
   10772:	4310      	orrs	r0, r2
   10774:	7098      	strb	r0, [r3, #2]
   10776:	0031      	movs	r1, r6
   10778:	200f      	movs	r0, #15
   1077a:	4e23      	ldr	r6, [pc, #140]	; (10808 <ExecuteRxParamSetupReq+0xec>)
   1077c:	47b0      	blx	r6
   1077e:	2808      	cmp	r0, #8
   10780:	d10a      	bne.n	10798 <ExecuteRxParamSetupReq+0x7c>
   10782:	0023      	movs	r3, r4
   10784:	33e0      	adds	r3, #224	; 0xe0
   10786:	781a      	ldrb	r2, [r3, #0]
   10788:	2303      	movs	r3, #3
   1078a:	4353      	muls	r3, r2
   1078c:	2210      	movs	r2, #16
   1078e:	18e3      	adds	r3, r4, r3
   10790:	3398      	adds	r3, #152	; 0x98
   10792:	7899      	ldrb	r1, [r3, #2]
   10794:	430a      	orrs	r2, r1
   10796:	709a      	strb	r2, [r3, #2]
   10798:	0039      	movs	r1, r7
   1079a:	2018      	movs	r0, #24
   1079c:	47b0      	blx	r6
   1079e:	2808      	cmp	r0, #8
   107a0:	d10a      	bne.n	107b8 <ExecuteRxParamSetupReq+0x9c>
   107a2:	0023      	movs	r3, r4
   107a4:	33e0      	adds	r3, #224	; 0xe0
   107a6:	781a      	ldrb	r2, [r3, #0]
   107a8:	2303      	movs	r3, #3
   107aa:	4353      	muls	r3, r2
   107ac:	2220      	movs	r2, #32
   107ae:	18e3      	adds	r3, r4, r3
   107b0:	3398      	adds	r3, #152	; 0x98
   107b2:	7899      	ldrb	r1, [r3, #2]
   107b4:	430a      	orrs	r2, r1
   107b6:	709a      	strb	r2, [r3, #2]
   107b8:	0023      	movs	r3, r4
   107ba:	33e0      	adds	r3, #224	; 0xe0
   107bc:	781a      	ldrb	r2, [r3, #0]
   107be:	2303      	movs	r3, #3
   107c0:	4353      	muls	r3, r2
   107c2:	18e3      	adds	r3, r4, r3
   107c4:	3398      	adds	r3, #152	; 0x98
   107c6:	789e      	ldrb	r6, [r3, #2]
   107c8:	06f3      	lsls	r3, r6, #27
   107ca:	d518      	bpl.n	107fe <ExecuteRxParamSetupReq+0xe2>
   107cc:	0733      	lsls	r3, r6, #28
   107ce:	d516      	bpl.n	107fe <ExecuteRxParamSetupReq+0xe2>
   107d0:	06b6      	lsls	r6, r6, #26
   107d2:	0ff6      	lsrs	r6, r6, #31
   107d4:	2e01      	cmp	r6, #1
   107d6:	d112      	bne.n	107fe <ExecuteRxParamSetupReq+0xe2>
   107d8:	0023      	movs	r3, r4
   107da:	33f7      	adds	r3, #247	; 0xf7
   107dc:	701d      	strb	r5, [r3, #0]
   107de:	0031      	movs	r1, r6
   107e0:	0030      	movs	r0, r6
   107e2:	4d0b      	ldr	r5, [pc, #44]	; (10810 <ExecuteRxParamSetupReq+0xf4>)
   107e4:	47a8      	blx	r5
   107e6:	9900      	ldr	r1, [sp, #0]
   107e8:	9803      	ldr	r0, [sp, #12]
   107ea:	4b0a      	ldr	r3, [pc, #40]	; (10814 <ExecuteRxParamSetupReq+0xf8>)
   107ec:	4798      	blx	r3
   107ee:	2340      	movs	r3, #64	; 0x40
   107f0:	3484      	adds	r4, #132	; 0x84
   107f2:	7862      	ldrb	r2, [r4, #1]
   107f4:	210b      	movs	r1, #11
   107f6:	4313      	orrs	r3, r2
   107f8:	7063      	strb	r3, [r4, #1]
   107fa:	0030      	movs	r0, r6
   107fc:	47a8      	blx	r5
   107fe:	9801      	ldr	r0, [sp, #4]
   10800:	b005      	add	sp, #20
   10802:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10804:	00016a0f 	.word	0x00016a0f
   10808:	0000d089 	.word	0x0000d089
   1080c:	20003348 	.word	0x20003348
   10810:	00009759 	.word	0x00009759
   10814:	0001061d 	.word	0x0001061d

00010818 <ExecuteDutyCycle>:
   10818:	b570      	push	{r4, r5, r6, lr}
   1081a:	7803      	ldrb	r3, [r0, #0]
   1081c:	1c46      	adds	r6, r0, #1
   1081e:	2b0f      	cmp	r3, #15
   10820:	d80f      	bhi.n	10842 <ExecuteDutyCycle+0x2a>
   10822:	4c09      	ldr	r4, [pc, #36]	; (10848 <ExecuteDutyCycle+0x30>)
   10824:	210b      	movs	r1, #11
   10826:	0022      	movs	r2, r4
   10828:	2000      	movs	r0, #0
   1082a:	3298      	adds	r2, #152	; 0x98
   1082c:	4d07      	ldr	r5, [pc, #28]	; (1084c <ExecuteDutyCycle+0x34>)
   1082e:	7013      	strb	r3, [r2, #0]
   10830:	47a8      	blx	r5
   10832:	2320      	movs	r3, #32
   10834:	3484      	adds	r4, #132	; 0x84
   10836:	7862      	ldrb	r2, [r4, #1]
   10838:	210b      	movs	r1, #11
   1083a:	4313      	orrs	r3, r2
   1083c:	7063      	strb	r3, [r4, #1]
   1083e:	2001      	movs	r0, #1
   10840:	47a8      	blx	r5
   10842:	0030      	movs	r0, r6
   10844:	bd70      	pop	{r4, r5, r6, pc}
   10846:	46c0      	nop			; (mov r8, r8)
   10848:	20003348 	.word	0x20003348
   1084c:	00009759 	.word	0x00009759

00010850 <ExecuteDlChannel>:
   10850:	b5f0      	push	{r4, r5, r6, r7, lr}
   10852:	b089      	sub	sp, #36	; 0x24
   10854:	7805      	ldrb	r5, [r0, #0]
   10856:	ab02      	add	r3, sp, #8
   10858:	1c41      	adds	r1, r0, #1
   1085a:	0007      	movs	r7, r0
   1085c:	719d      	strb	r5, [r3, #6]
   1085e:	1d9e      	adds	r6, r3, #6
   10860:	2204      	movs	r2, #4
   10862:	4b23      	ldr	r3, [pc, #140]	; (108f0 <ExecuteDlChannel+0xa0>)
   10864:	a805      	add	r0, sp, #20
   10866:	4798      	blx	r3
   10868:	9b05      	ldr	r3, [sp, #20]
   1086a:	a904      	add	r1, sp, #16
   1086c:	021c      	lsls	r4, r3, #8
   1086e:	2364      	movs	r3, #100	; 0x64
   10870:	0a24      	lsrs	r4, r4, #8
   10872:	435c      	muls	r4, r3
   10874:	1d3b      	adds	r3, r7, #4
   10876:	9301      	str	r3, [sp, #4]
   10878:	2301      	movs	r3, #1
   1087a:	2015      	movs	r0, #21
   1087c:	704b      	strb	r3, [r1, #1]
   1087e:	4b1d      	ldr	r3, [pc, #116]	; (108f4 <ExecuteDlChannel+0xa4>)
   10880:	9405      	str	r4, [sp, #20]
   10882:	700d      	strb	r5, [r1, #0]
   10884:	4798      	blx	r3
   10886:	2808      	cmp	r0, #8
   10888:	d12f      	bne.n	108ea <ExecuteDlChannel+0x9a>
   1088a:	ab02      	add	r3, sp, #8
   1088c:	1ddd      	adds	r5, r3, #7
   1088e:	2300      	movs	r3, #0
   10890:	702b      	strb	r3, [r5, #0]
   10892:	7833      	ldrb	r3, [r6, #0]
   10894:	af06      	add	r7, sp, #24
   10896:	713b      	strb	r3, [r7, #4]
   10898:	002a      	movs	r2, r5
   1089a:	0031      	movs	r1, r6
   1089c:	300e      	adds	r0, #14
   1089e:	4b16      	ldr	r3, [pc, #88]	; (108f8 <ExecuteDlChannel+0xa8>)
   108a0:	9406      	str	r4, [sp, #24]
   108a2:	4798      	blx	r3
   108a4:	280a      	cmp	r0, #10
   108a6:	d00d      	beq.n	108c4 <ExecuteDlChannel+0x74>
   108a8:	782a      	ldrb	r2, [r5, #0]
   108aa:	2a01      	cmp	r2, #1
   108ac:	d10a      	bne.n	108c4 <ExecuteDlChannel+0x74>
   108ae:	4b13      	ldr	r3, [pc, #76]	; (108fc <ExecuteDlChannel+0xac>)
   108b0:	0019      	movs	r1, r3
   108b2:	31e0      	adds	r1, #224	; 0xe0
   108b4:	7808      	ldrb	r0, [r1, #0]
   108b6:	2103      	movs	r1, #3
   108b8:	4341      	muls	r1, r0
   108ba:	185b      	adds	r3, r3, r1
   108bc:	3398      	adds	r3, #152	; 0x98
   108be:	78d9      	ldrb	r1, [r3, #3]
   108c0:	430a      	orrs	r2, r1
   108c2:	70da      	strb	r2, [r3, #3]
   108c4:	0039      	movs	r1, r7
   108c6:	2033      	movs	r0, #51	; 0x33
   108c8:	4b0d      	ldr	r3, [pc, #52]	; (10900 <ExecuteDlChannel+0xb0>)
   108ca:	4798      	blx	r3
   108cc:	2808      	cmp	r0, #8
   108ce:	d10c      	bne.n	108ea <ExecuteDlChannel+0x9a>
   108d0:	4b0a      	ldr	r3, [pc, #40]	; (108fc <ExecuteDlChannel+0xac>)
   108d2:	001a      	movs	r2, r3
   108d4:	32e0      	adds	r2, #224	; 0xe0
   108d6:	7811      	ldrb	r1, [r2, #0]
   108d8:	2203      	movs	r2, #3
   108da:	434a      	muls	r2, r1
   108dc:	189b      	adds	r3, r3, r2
   108de:	2280      	movs	r2, #128	; 0x80
   108e0:	3398      	adds	r3, #152	; 0x98
   108e2:	7899      	ldrb	r1, [r3, #2]
   108e4:	4252      	negs	r2, r2
   108e6:	430a      	orrs	r2, r1
   108e8:	709a      	strb	r2, [r3, #2]
   108ea:	9801      	ldr	r0, [sp, #4]
   108ec:	b009      	add	sp, #36	; 0x24
   108ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   108f0:	00016a0f 	.word	0x00016a0f
   108f4:	0000d089 	.word	0x0000d089
   108f8:	0000d06d 	.word	0x0000d06d
   108fc:	20003348 	.word	0x20003348
   10900:	0000d0a5 	.word	0x0000d0a5

00010904 <ExecuteTxParamSetup>:
   10904:	220f      	movs	r2, #15
   10906:	b513      	push	{r0, r1, r4, lr}
   10908:	7803      	ldrb	r3, [r0, #0]
   1090a:	4c0f      	ldr	r4, [pc, #60]	; (10948 <ExecuteTxParamSetup+0x44>)
   1090c:	401a      	ands	r2, r3
   1090e:	5ca2      	ldrb	r2, [r4, r2]
   10910:	2401      	movs	r4, #1
   10912:	a901      	add	r1, sp, #4
   10914:	700a      	strb	r2, [r1, #0]
   10916:	111a      	asrs	r2, r3, #4
   10918:	115b      	asrs	r3, r3, #5
   1091a:	4023      	ands	r3, r4
   1091c:	40a3      	lsls	r3, r4
   1091e:	4022      	ands	r2, r4
   10920:	4313      	orrs	r3, r2
   10922:	704b      	strb	r3, [r1, #1]
   10924:	1904      	adds	r4, r0, r4
   10926:	4b09      	ldr	r3, [pc, #36]	; (1094c <ExecuteTxParamSetup+0x48>)
   10928:	2034      	movs	r0, #52	; 0x34
   1092a:	4798      	blx	r3
   1092c:	2808      	cmp	r0, #8
   1092e:	d009      	beq.n	10944 <ExecuteTxParamSetup+0x40>
   10930:	4b07      	ldr	r3, [pc, #28]	; (10950 <ExecuteTxParamSetup+0x4c>)
   10932:	001a      	movs	r2, r3
   10934:	32e0      	adds	r2, #224	; 0xe0
   10936:	7811      	ldrb	r1, [r2, #0]
   10938:	2203      	movs	r2, #3
   1093a:	434a      	muls	r2, r1
   1093c:	189b      	adds	r3, r3, r2
   1093e:	22ff      	movs	r2, #255	; 0xff
   10940:	3399      	adds	r3, #153	; 0x99
   10942:	701a      	strb	r2, [r3, #0]
   10944:	0020      	movs	r0, r4
   10946:	bd16      	pop	{r1, r2, r4, pc}
   10948:	000192f9 	.word	0x000192f9
   1094c:	0000d0a5 	.word	0x0000d0a5
   10950:	20003348 	.word	0x20003348

00010954 <ExecuteLinkAdr>:
   10954:	220f      	movs	r2, #15
   10956:	b5f0      	push	{r4, r5, r6, r7, lr}
   10958:	0006      	movs	r6, r0
   1095a:	7803      	ldrb	r3, [r0, #0]
   1095c:	b089      	sub	sp, #36	; 0x24
   1095e:	401a      	ands	r2, r3
   10960:	a905      	add	r1, sp, #20
   10962:	700a      	strb	r2, [r1, #0]
   10964:	aa04      	add	r2, sp, #16
   10966:	1d97      	adds	r7, r2, #6
   10968:	091b      	lsrs	r3, r3, #4
   1096a:	7153      	strb	r3, [r2, #5]
   1096c:	1c41      	adds	r1, r0, #1
   1096e:	2202      	movs	r2, #2
   10970:	0038      	movs	r0, r7
   10972:	4b3d      	ldr	r3, [pc, #244]	; (10a68 <ExecuteLinkAdr+0x114>)
   10974:	4798      	blx	r3
   10976:	2201      	movs	r2, #1
   10978:	1d33      	adds	r3, r6, #4
   1097a:	9303      	str	r3, [sp, #12]
   1097c:	78f3      	ldrb	r3, [r6, #3]
   1097e:	4c3b      	ldr	r4, [pc, #236]	; (10a6c <ExecuteLinkAdr+0x118>)
   10980:	4d3b      	ldr	r5, [pc, #236]	; (10a70 <ExecuteLinkAdr+0x11c>)
   10982:	065b      	lsls	r3, r3, #25
   10984:	0f5b      	lsrs	r3, r3, #29
   10986:	9300      	str	r3, [sp, #0]
   10988:	5d63      	ldrb	r3, [r4, r5]
   1098a:	a906      	add	r1, sp, #24
   1098c:	4393      	bics	r3, r2
   1098e:	1892      	adds	r2, r2, r2
   10990:	4393      	bics	r3, r2
   10992:	3202      	adds	r2, #2
   10994:	4393      	bics	r3, r2
   10996:	5563      	strb	r3, [r4, r5]
   10998:	883b      	ldrh	r3, [r7, #0]
   1099a:	2037      	movs	r0, #55	; 0x37
   1099c:	9302      	str	r3, [sp, #8]
   1099e:	466b      	mov	r3, sp
   109a0:	891b      	ldrh	r3, [r3, #8]
   109a2:	4f34      	ldr	r7, [pc, #208]	; (10a74 <ExecuteLinkAdr+0x120>)
   109a4:	804b      	strh	r3, [r1, #2]
   109a6:	466b      	mov	r3, sp
   109a8:	781b      	ldrb	r3, [r3, #0]
   109aa:	700b      	strb	r3, [r1, #0]
   109ac:	47b8      	blx	r7
   109ae:	2808      	cmp	r0, #8
   109b0:	d117      	bne.n	109e2 <ExecuteLinkAdr+0x8e>
   109b2:	466b      	mov	r3, sp
   109b4:	891b      	ldrh	r3, [r3, #8]
   109b6:	a907      	add	r1, sp, #28
   109b8:	800b      	strh	r3, [r1, #0]
   109ba:	466b      	mov	r3, sp
   109bc:	781b      	ldrb	r3, [r3, #0]
   109be:	3014      	adds	r0, #20
   109c0:	708b      	strb	r3, [r1, #2]
   109c2:	4b2d      	ldr	r3, [pc, #180]	; (10a78 <ExecuteLinkAdr+0x124>)
   109c4:	4798      	blx	r3
   109c6:	2201      	movs	r2, #1
   109c8:	5d63      	ldrb	r3, [r4, r5]
   109ca:	2010      	movs	r0, #16
   109cc:	4313      	orrs	r3, r2
   109ce:	5563      	strb	r3, [r4, r5]
   109d0:	ab04      	add	r3, sp, #16
   109d2:	1d59      	adds	r1, r3, #5
   109d4:	47b8      	blx	r7
   109d6:	2808      	cmp	r0, #8
   109d8:	d103      	bne.n	109e2 <ExecuteLinkAdr+0x8e>
   109da:	2202      	movs	r2, #2
   109dc:	5d63      	ldrb	r3, [r4, r5]
   109de:	4313      	orrs	r3, r2
   109e0:	5563      	strb	r3, [r4, r5]
   109e2:	af05      	add	r7, sp, #20
   109e4:	4b23      	ldr	r3, [pc, #140]	; (10a74 <ExecuteLinkAdr+0x120>)
   109e6:	0039      	movs	r1, r7
   109e8:	201d      	movs	r0, #29
   109ea:	4798      	blx	r3
   109ec:	4b1f      	ldr	r3, [pc, #124]	; (10a6c <ExecuteLinkAdr+0x118>)
   109ee:	2808      	cmp	r0, #8
   109f0:	d103      	bne.n	109fa <ExecuteLinkAdr+0xa6>
   109f2:	2204      	movs	r2, #4
   109f4:	5d59      	ldrb	r1, [r3, r5]
   109f6:	430a      	orrs	r2, r1
   109f8:	555a      	strb	r2, [r3, r5]
   109fa:	5d5a      	ldrb	r2, [r3, r5]
   109fc:	43d2      	mvns	r2, r2
   109fe:	0752      	lsls	r2, r2, #29
   10a00:	d12a      	bne.n	10a58 <ExecuteLinkAdr+0x104>
   10a02:	4669      	mov	r1, sp
   10a04:	4a1d      	ldr	r2, [pc, #116]	; (10a7c <ExecuteLinkAdr+0x128>)
   10a06:	7a09      	ldrb	r1, [r1, #8]
   10a08:	5499      	strb	r1, [r3, r2]
   10a0a:	9a02      	ldr	r2, [sp, #8]
   10a0c:	491b      	ldr	r1, [pc, #108]	; (10a7c <ExecuteLinkAdr+0x128>)
   10a0e:	0a12      	lsrs	r2, r2, #8
   10a10:	1859      	adds	r1, r3, r1
   10a12:	704a      	strb	r2, [r1, #1]
   10a14:	aa04      	add	r2, sp, #16
   10a16:	3205      	adds	r2, #5
   10a18:	7812      	ldrb	r2, [r2, #0]
   10a1a:	2a0f      	cmp	r2, #15
   10a1c:	d101      	bne.n	10a22 <ExecuteLinkAdr+0xce>
   10a1e:	33e7      	adds	r3, #231	; 0xe7
   10a20:	781a      	ldrb	r2, [r3, #0]
   10a22:	2389      	movs	r3, #137	; 0x89
   10a24:	2170      	movs	r1, #112	; 0x70
   10a26:	2070      	movs	r0, #112	; 0x70
   10a28:	009b      	lsls	r3, r3, #2
   10a2a:	54e2      	strb	r2, [r4, r3]
   10a2c:	78f3      	ldrb	r3, [r6, #3]
   10a2e:	4a14      	ldr	r2, [pc, #80]	; (10a80 <ExecuteLinkAdr+0x12c>)
   10a30:	4019      	ands	r1, r3
   10a32:	5ca3      	ldrb	r3, [r4, r2]
   10a34:	4383      	bics	r3, r0
   10a36:	430b      	orrs	r3, r1
   10a38:	54a3      	strb	r3, [r4, r2]
   10a3a:	78f1      	ldrb	r1, [r6, #3]
   10a3c:	3861      	subs	r0, #97	; 0x61
   10a3e:	b2db      	uxtb	r3, r3
   10a40:	4001      	ands	r1, r0
   10a42:	4383      	bics	r3, r0
   10a44:	430b      	orrs	r3, r1
   10a46:	54a3      	strb	r3, [r4, r2]
   10a48:	783b      	ldrb	r3, [r7, #0]
   10a4a:	4283      	cmp	r3, r0
   10a4c:	d101      	bne.n	10a52 <ExecuteLinkAdr+0xfe>
   10a4e:	34e9      	adds	r4, #233	; 0xe9
   10a50:	7823      	ldrb	r3, [r4, #0]
   10a52:	4a0c      	ldr	r2, [pc, #48]	; (10a84 <ExecuteLinkAdr+0x130>)
   10a54:	4905      	ldr	r1, [pc, #20]	; (10a6c <ExecuteLinkAdr+0x118>)
   10a56:	548b      	strb	r3, [r1, r2]
   10a58:	4904      	ldr	r1, [pc, #16]	; (10a6c <ExecuteLinkAdr+0x118>)
   10a5a:	4a0b      	ldr	r2, [pc, #44]	; (10a88 <ExecuteLinkAdr+0x134>)
   10a5c:	9803      	ldr	r0, [sp, #12]
   10a5e:	5c8b      	ldrb	r3, [r1, r2]
   10a60:	3301      	adds	r3, #1
   10a62:	548b      	strb	r3, [r1, r2]
   10a64:	b009      	add	sp, #36	; 0x24
   10a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10a68:	00016a0f 	.word	0x00016a0f
   10a6c:	20003348 	.word	0x20003348
   10a70:	00000223 	.word	0x00000223
   10a74:	0000d089 	.word	0x0000d089
   10a78:	0000d0a5 	.word	0x0000d0a5
   10a7c:	00000227 	.word	0x00000227
   10a80:	00000229 	.word	0x00000229
   10a84:	00000225 	.word	0x00000225
   10a88:	00000226 	.word	0x00000226

00010a8c <ExecuteDevTimeAns>:
   10a8c:	b510      	push	{r4, lr}
   10a8e:	0001      	movs	r1, r0
   10a90:	0004      	movs	r4, r0
   10a92:	2204      	movs	r2, #4
   10a94:	4b04      	ldr	r3, [pc, #16]	; (10aa8 <ExecuteDevTimeAns+0x1c>)
   10a96:	4805      	ldr	r0, [pc, #20]	; (10aac <ExecuteDevTimeAns+0x20>)
   10a98:	4798      	blx	r3
   10a9a:	238e      	movs	r3, #142	; 0x8e
   10a9c:	7921      	ldrb	r1, [r4, #4]
   10a9e:	4a04      	ldr	r2, [pc, #16]	; (10ab0 <ExecuteDevTimeAns+0x24>)
   10aa0:	009b      	lsls	r3, r3, #2
   10aa2:	1d60      	adds	r0, r4, #5
   10aa4:	54d1      	strb	r1, [r2, r3]
   10aa6:	bd10      	pop	{r4, pc}
   10aa8:	00016a0f 	.word	0x00016a0f
   10aac:	2000357c 	.word	0x2000357c
   10ab0:	20003348 	.word	0x20003348

00010ab4 <PrepareJoinRequestFrame>:
   10ab4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   10ab6:	2210      	movs	r2, #16
   10ab8:	4d22      	ldr	r5, [pc, #136]	; (10b44 <PrepareJoinRequestFrame+0x90>)
   10aba:	4b23      	ldr	r3, [pc, #140]	; (10b48 <PrepareJoinRequestFrame+0x94>)
   10abc:	32ff      	adds	r2, #255	; 0xff
   10abe:	2100      	movs	r1, #0
   10ac0:	0028      	movs	r0, r5
   10ac2:	4798      	blx	r3
   10ac4:	2300      	movs	r3, #0
   10ac6:	4c21      	ldr	r4, [pc, #132]	; (10b4c <PrepareJoinRequestFrame+0x98>)
   10ac8:	702b      	strb	r3, [r5, #0]
   10aca:	4b21      	ldr	r3, [pc, #132]	; (10b50 <PrepareJoinRequestFrame+0x9c>)
   10acc:	5ce3      	ldrb	r3, [r4, r3]
   10ace:	2b00      	cmp	r3, #0
   10ad0:	d006      	beq.n	10ae0 <PrepareJoinRequestFrame+0x2c>
   10ad2:	4920      	ldr	r1, [pc, #128]	; (10b54 <PrepareJoinRequestFrame+0xa0>)
   10ad4:	2006      	movs	r0, #6
   10ad6:	4e20      	ldr	r6, [pc, #128]	; (10b58 <PrepareJoinRequestFrame+0xa4>)
   10ad8:	47b0      	blx	r6
   10ada:	4920      	ldr	r1, [pc, #128]	; (10b5c <PrepareJoinRequestFrame+0xa8>)
   10adc:	2007      	movs	r0, #7
   10ade:	47b0      	blx	r6
   10ae0:	2300      	movs	r3, #0
   10ae2:	205c      	movs	r0, #92	; 0x5c
   10ae4:	1ac1      	subs	r1, r0, r3
   10ae6:	5c61      	ldrb	r1, [r4, r1]
   10ae8:	18ea      	adds	r2, r5, r3
   10aea:	3301      	adds	r3, #1
   10aec:	7051      	strb	r1, [r2, #1]
   10aee:	2b08      	cmp	r3, #8
   10af0:	d1f8      	bne.n	10ae4 <PrepareJoinRequestFrame+0x30>
   10af2:	2300      	movs	r3, #0
   10af4:	2064      	movs	r0, #100	; 0x64
   10af6:	1ac1      	subs	r1, r0, r3
   10af8:	5c61      	ldrb	r1, [r4, r1]
   10afa:	18ea      	adds	r2, r5, r3
   10afc:	3301      	adds	r3, #1
   10afe:	7251      	strb	r1, [r2, #9]
   10b00:	2b08      	cmp	r3, #8
   10b02:	d1f8      	bne.n	10af6 <PrepareJoinRequestFrame+0x42>
   10b04:	4b16      	ldr	r3, [pc, #88]	; (10b60 <PrepareJoinRequestFrame+0xac>)
   10b06:	4798      	blx	r3
   10b08:	4b16      	ldr	r3, [pc, #88]	; (10b64 <PrepareJoinRequestFrame+0xb0>)
   10b0a:	4917      	ldr	r1, [pc, #92]	; (10b68 <PrepareJoinRequestFrame+0xb4>)
   10b0c:	4798      	blx	r3
   10b0e:	34cc      	adds	r4, #204	; 0xcc
   10b10:	8021      	strh	r1, [r4, #0]
   10b12:	2202      	movs	r2, #2
   10b14:	0021      	movs	r1, r4
   10b16:	4815      	ldr	r0, [pc, #84]	; (10b6c <PrepareJoinRequestFrame+0xb8>)
   10b18:	4c15      	ldr	r4, [pc, #84]	; (10b70 <PrepareJoinRequestFrame+0xbc>)
   10b1a:	47a0      	blx	r4
   10b1c:	2313      	movs	r3, #19
   10b1e:	4e15      	ldr	r6, [pc, #84]	; (10b74 <PrepareJoinRequestFrame+0xc0>)
   10b20:	9300      	str	r3, [sp, #0]
   10b22:	0032      	movs	r2, r6
   10b24:	002b      	movs	r3, r5
   10b26:	2100      	movs	r1, #0
   10b28:	4d13      	ldr	r5, [pc, #76]	; (10b78 <PrepareJoinRequestFrame+0xc4>)
   10b2a:	4814      	ldr	r0, [pc, #80]	; (10b7c <PrepareJoinRequestFrame+0xc8>)
   10b2c:	47a8      	blx	r5
   10b2e:	0031      	movs	r1, r6
   10b30:	2204      	movs	r2, #4
   10b32:	a803      	add	r0, sp, #12
   10b34:	47a0      	blx	r4
   10b36:	2204      	movs	r2, #4
   10b38:	a903      	add	r1, sp, #12
   10b3a:	4811      	ldr	r0, [pc, #68]	; (10b80 <PrepareJoinRequestFrame+0xcc>)
   10b3c:	47a0      	blx	r4
   10b3e:	2017      	movs	r0, #23
   10b40:	b004      	add	sp, #16
   10b42:	bd70      	pop	{r4, r5, r6, pc}
   10b44:	20003590 	.word	0x20003590
   10b48:	00016a21 	.word	0x00016a21
   10b4c:	20003348 	.word	0x20003348
   10b50:	0000022d 	.word	0x0000022d
   10b54:	2000339d 	.word	0x2000339d
   10b58:	00007881 	.word	0x00007881
   10b5c:	200033a5 	.word	0x200033a5
   10b60:	00017155 	.word	0x00017155
   10b64:	00013a8d 	.word	0x00013a8d
   10b68:	0000ffff 	.word	0x0000ffff
   10b6c:	200035a1 	.word	0x200035a1
   10b70:	00016a0f 	.word	0x00016a0f
   10b74:	200020a5 	.word	0x200020a5
   10b78:	00007885 	.word	0x00007885
   10b7c:	2000338d 	.word	0x2000338d
   10b80:	200035a3 	.word	0x200035a3

00010b84 <ConfigureRadioRx>:
   10b84:	b5f0      	push	{r4, r5, r6, r7, lr}
   10b86:	b087      	sub	sp, #28
   10b88:	466b      	mov	r3, sp
   10b8a:	2600      	movs	r6, #0
   10b8c:	1ddc      	adds	r4, r3, #7
   10b8e:	71d8      	strb	r0, [r3, #7]
   10b90:	729e      	strb	r6, [r3, #10]
   10b92:	466a      	mov	r2, sp
   10b94:	2301      	movs	r3, #1
   10b96:	72d3      	strb	r3, [r2, #11]
   10b98:	2215      	movs	r2, #21
   10b9a:	ad03      	add	r5, sp, #12
   10b9c:	4f11      	ldr	r7, [pc, #68]	; (10be4 <ConfigureRadioRx+0x60>)
   10b9e:	9100      	str	r1, [sp, #0]
   10ba0:	446a      	add	r2, sp
   10ba2:	0021      	movs	r1, r4
   10ba4:	2023      	movs	r0, #35	; 0x23
   10ba6:	80ae      	strh	r6, [r5, #4]
   10ba8:	47b8      	blx	r7
   10baa:	2216      	movs	r2, #22
   10bac:	0021      	movs	r1, r4
   10bae:	446a      	add	r2, sp
   10bb0:	2024      	movs	r0, #36	; 0x24
   10bb2:	47b8      	blx	r7
   10bb4:	2217      	movs	r2, #23
   10bb6:	0021      	movs	r1, r4
   10bb8:	446a      	add	r2, sp
   10bba:	2025      	movs	r0, #37	; 0x25
   10bbc:	47b8      	blx	r7
   10bbe:	9b00      	ldr	r3, [sp, #0]
   10bc0:	0028      	movs	r0, r5
   10bc2:	9303      	str	r3, [sp, #12]
   10bc4:	4b08      	ldr	r3, [pc, #32]	; (10be8 <ConfigureRadioRx+0x64>)
   10bc6:	80ae      	strh	r6, [r5, #4]
   10bc8:	4798      	blx	r3
   10bca:	230a      	movs	r3, #10
   10bcc:	446b      	add	r3, sp
   10bce:	0019      	movs	r1, r3
   10bd0:	4c06      	ldr	r4, [pc, #24]	; (10bec <ConfigureRadioRx+0x68>)
   10bd2:	2014      	movs	r0, #20
   10bd4:	47a0      	blx	r4
   10bd6:	230b      	movs	r3, #11
   10bd8:	446b      	add	r3, sp
   10bda:	0019      	movs	r1, r3
   10bdc:	2006      	movs	r0, #6
   10bde:	47a0      	blx	r4
   10be0:	b007      	add	sp, #28
   10be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10be4:	0000d06d 	.word	0x0000d06d
   10be8:	000101f1 	.word	0x000101f1
   10bec:	0000e57d 	.word	0x0000e57d

00010bf0 <ConfigureRadioTx>:
   10bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
   10bf2:	2517      	movs	r5, #23
   10bf4:	2300      	movs	r3, #0
   10bf6:	2616      	movs	r6, #22
   10bf8:	2701      	movs	r7, #1
   10bfa:	b087      	sub	sp, #28
   10bfc:	ac01      	add	r4, sp, #4
   10bfe:	446d      	add	r5, sp
   10c00:	9001      	str	r0, [sp, #4]
   10c02:	702b      	strb	r3, [r5, #0]
   10c04:	0020      	movs	r0, r4
   10c06:	4b10      	ldr	r3, [pc, #64]	; (10c48 <ConfigureRadioTx+0x58>)
   10c08:	446e      	add	r6, sp
   10c0a:	9102      	str	r1, [sp, #8]
   10c0c:	9203      	str	r2, [sp, #12]
   10c0e:	7037      	strb	r7, [r6, #0]
   10c10:	4798      	blx	r3
   10c12:	79e3      	ldrb	r3, [r4, #7]
   10c14:	4c0d      	ldr	r4, [pc, #52]	; (10c4c <ConfigureRadioTx+0x5c>)
   10c16:	2b00      	cmp	r3, #0
   10c18:	d00a      	beq.n	10c30 <ConfigureRadioTx+0x40>
   10c1a:	4b0d      	ldr	r3, [pc, #52]	; (10c50 <ConfigureRadioTx+0x60>)
   10c1c:	4a0d      	ldr	r2, [pc, #52]	; (10c54 <ConfigureRadioTx+0x64>)
   10c1e:	490e      	ldr	r1, [pc, #56]	; (10c58 <ConfigureRadioTx+0x68>)
   10c20:	54d7      	strb	r7, [r2, r3]
   10c22:	200b      	movs	r0, #11
   10c24:	4b0d      	ldr	r3, [pc, #52]	; (10c5c <ConfigureRadioTx+0x6c>)
   10c26:	4798      	blx	r3
   10c28:	210a      	movs	r1, #10
   10c2a:	200b      	movs	r0, #11
   10c2c:	4469      	add	r1, sp
   10c2e:	47a0      	blx	r4
   10c30:	a903      	add	r1, sp, #12
   10c32:	2004      	movs	r0, #4
   10c34:	47a0      	blx	r4
   10c36:	0031      	movs	r1, r6
   10c38:	2014      	movs	r0, #20
   10c3a:	47a0      	blx	r4
   10c3c:	0029      	movs	r1, r5
   10c3e:	2006      	movs	r0, #6
   10c40:	47a0      	blx	r4
   10c42:	b007      	add	sp, #28
   10c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10c46:	46c0      	nop			; (mov r8, r8)
   10c48:	000101f1 	.word	0x000101f1
   10c4c:	0000e57d 	.word	0x0000e57d
   10c50:	00000222 	.word	0x00000222
   10c54:	20003348 	.word	0x20003348
   10c58:	20003569 	.word	0x20003569
   10c5c:	0000e48d 	.word	0x0000e48d

00010c60 <LorawanGetChAndInitiateRadioTransmit>:
   10c60:	2301      	movs	r3, #1
   10c62:	b530      	push	{r4, r5, lr}
   10c64:	4c46      	ldr	r4, [pc, #280]	; (10d80 <LorawanGetChAndInitiateRadioTransmit+0x120>)
   10c66:	b089      	sub	sp, #36	; 0x24
   10c68:	a902      	add	r1, sp, #8
   10c6a:	700b      	strb	r3, [r1, #0]
   10c6c:	0023      	movs	r3, r4
   10c6e:	33e9      	adds	r3, #233	; 0xe9
   10c70:	781b      	ldrb	r3, [r3, #0]
   10c72:	704b      	strb	r3, [r1, #1]
   10c74:	0023      	movs	r3, r4
   10c76:	33e7      	adds	r3, #231	; 0xe7
   10c78:	781b      	ldrb	r3, [r3, #0]
   10c7a:	708b      	strb	r3, [r1, #2]
   10c7c:	0023      	movs	r3, r4
   10c7e:	33fd      	adds	r3, #253	; 0xfd
   10c80:	781b      	ldrb	r3, [r3, #0]
   10c82:	2b01      	cmp	r3, #1
   10c84:	d108      	bne.n	10c98 <LorawanGetChAndInitiateRadioTransmit+0x38>
   10c86:	0020      	movs	r0, r4
   10c88:	220e      	movs	r2, #14
   10c8a:	3084      	adds	r0, #132	; 0x84
   10c8c:	7803      	ldrb	r3, [r0, #0]
   10c8e:	4393      	bics	r3, r2
   10c90:	001a      	movs	r2, r3
   10c92:	230c      	movs	r3, #12
   10c94:	4313      	orrs	r3, r2
   10c96:	7003      	strb	r3, [r0, #0]
   10c98:	aa05      	add	r2, sp, #20
   10c9a:	202e      	movs	r0, #46	; 0x2e
   10c9c:	4d39      	ldr	r5, [pc, #228]	; (10d84 <LorawanGetChAndInitiateRadioTransmit+0x124>)
   10c9e:	47a8      	blx	r5
   10ca0:	0023      	movs	r3, r4
   10ca2:	2808      	cmp	r0, #8
   10ca4:	d135      	bne.n	10d12 <LorawanGetChAndInitiateRadioTransmit+0xb2>
   10ca6:	33fd      	adds	r3, #253	; 0xfd
   10ca8:	781b      	ldrb	r3, [r3, #0]
   10caa:	ad03      	add	r5, sp, #12
   10cac:	2b04      	cmp	r3, #4
   10cae:	d108      	bne.n	10cc2 <LorawanGetChAndInitiateRadioTransmit+0x62>
   10cb0:	2390      	movs	r3, #144	; 0x90
   10cb2:	2200      	movs	r2, #0
   10cb4:	009b      	lsls	r3, r3, #2
   10cb6:	54e2      	strb	r2, [r4, r3]
   10cb8:	2301      	movs	r3, #1
   10cba:	0028      	movs	r0, r5
   10cbc:	702b      	strb	r3, [r5, #0]
   10cbe:	4b32      	ldr	r3, [pc, #200]	; (10d88 <LorawanGetChAndInitiateRadioTransmit+0x128>)
   10cc0:	4798      	blx	r3
   10cc2:	9805      	ldr	r0, [sp, #20]
   10cc4:	4b31      	ldr	r3, [pc, #196]	; (10d8c <LorawanGetChAndInitiateRadioTransmit+0x12c>)
   10cc6:	9906      	ldr	r1, [sp, #24]
   10cc8:	9a07      	ldr	r2, [sp, #28]
   10cca:	4798      	blx	r3
   10ccc:	0023      	movs	r3, r4
   10cce:	33ce      	adds	r3, #206	; 0xce
   10cd0:	881b      	ldrh	r3, [r3, #0]
   10cd2:	0028      	movs	r0, r5
   10cd4:	702b      	strb	r3, [r5, #0]
   10cd6:	4b2e      	ldr	r3, [pc, #184]	; (10d90 <LorawanGetChAndInitiateRadioTransmit+0x130>)
   10cd8:	606b      	str	r3, [r5, #4]
   10cda:	4b2e      	ldr	r3, [pc, #184]	; (10d94 <LorawanGetChAndInitiateRadioTransmit+0x134>)
   10cdc:	4798      	blx	r3
   10cde:	2800      	cmp	r0, #0
   10ce0:	d109      	bne.n	10cf6 <LorawanGetChAndInitiateRadioTransmit+0x96>
   10ce2:	220e      	movs	r2, #14
   10ce4:	3484      	adds	r4, #132	; 0x84
   10ce6:	7823      	ldrb	r3, [r4, #0]
   10ce8:	4393      	bics	r3, r2
   10cea:	001a      	movs	r2, r3
   10cec:	2302      	movs	r3, #2
   10cee:	4313      	orrs	r3, r2
   10cf0:	7023      	strb	r3, [r4, #0]
   10cf2:	b009      	add	sp, #36	; 0x24
   10cf4:	bd30      	pop	{r4, r5, pc}
   10cf6:	2200      	movs	r2, #0
   10cf8:	4b27      	ldr	r3, [pc, #156]	; (10d98 <LorawanGetChAndInitiateRadioTransmit+0x138>)
   10cfa:	4928      	ldr	r1, [pc, #160]	; (10d9c <LorawanGetChAndInitiateRadioTransmit+0x13c>)
   10cfc:	5ce3      	ldrb	r3, [r4, r3]
   10cfe:	34fc      	adds	r4, #252	; 0xfc
   10d00:	4359      	muls	r1, r3
   10d02:	4b27      	ldr	r3, [pc, #156]	; (10da0 <LorawanGetChAndInitiateRadioTransmit+0x140>)
   10d04:	7820      	ldrb	r0, [r4, #0]
   10d06:	18c9      	adds	r1, r1, r3
   10d08:	4b26      	ldr	r3, [pc, #152]	; (10da4 <LorawanGetChAndInitiateRadioTransmit+0x144>)
   10d0a:	9200      	str	r2, [sp, #0]
   10d0c:	4c26      	ldr	r4, [pc, #152]	; (10da8 <LorawanGetChAndInitiateRadioTransmit+0x148>)
   10d0e:	47a0      	blx	r4
   10d10:	e7ef      	b.n	10cf2 <LorawanGetChAndInitiateRadioTransmit+0x92>
   10d12:	33ff      	adds	r3, #255	; 0xff
   10d14:	7f5b      	ldrb	r3, [r3, #29]
   10d16:	079a      	lsls	r2, r3, #30
   10d18:	d515      	bpl.n	10d46 <LorawanGetChAndInitiateRadioTransmit+0xe6>
   10d1a:	aa03      	add	r2, sp, #12
   10d1c:	4923      	ldr	r1, [pc, #140]	; (10dac <LorawanGetChAndInitiateRadioTransmit+0x14c>)
   10d1e:	2026      	movs	r0, #38	; 0x26
   10d20:	47a8      	blx	r5
   10d22:	9b03      	ldr	r3, [sp, #12]
   10d24:	1c5a      	adds	r2, r3, #1
   10d26:	d001      	beq.n	10d2c <LorawanGetChAndInitiateRadioTransmit+0xcc>
   10d28:	3314      	adds	r3, #20
   10d2a:	9303      	str	r3, [sp, #12]
   10d2c:	21fa      	movs	r1, #250	; 0xfa
   10d2e:	4b1a      	ldr	r3, [pc, #104]	; (10d98 <LorawanGetChAndInitiateRadioTransmit+0x138>)
   10d30:	9a03      	ldr	r2, [sp, #12]
   10d32:	5ce3      	ldrb	r3, [r4, r3]
   10d34:	0089      	lsls	r1, r1, #2
   10d36:	1ad3      	subs	r3, r2, r3
   10d38:	2200      	movs	r2, #0
   10d3a:	4359      	muls	r1, r3
   10d3c:	34f2      	adds	r4, #242	; 0xf2
   10d3e:	7820      	ldrb	r0, [r4, #0]
   10d40:	9200      	str	r2, [sp, #0]
   10d42:	4b1b      	ldr	r3, [pc, #108]	; (10db0 <LorawanGetChAndInitiateRadioTransmit+0x150>)
   10d44:	e7e2      	b.n	10d0c <LorawanGetChAndInitiateRadioTransmit+0xac>
   10d46:	075b      	lsls	r3, r3, #29
   10d48:	d508      	bpl.n	10d5c <LorawanGetChAndInitiateRadioTransmit+0xfc>
   10d4a:	aa03      	add	r2, sp, #12
   10d4c:	4917      	ldr	r1, [pc, #92]	; (10dac <LorawanGetChAndInitiateRadioTransmit+0x14c>)
   10d4e:	2032      	movs	r0, #50	; 0x32
   10d50:	47a8      	blx	r5
   10d52:	9b03      	ldr	r3, [sp, #12]
   10d54:	1c5a      	adds	r2, r3, #1
   10d56:	d0e9      	beq.n	10d2c <LorawanGetChAndInitiateRadioTransmit+0xcc>
   10d58:	3301      	adds	r3, #1
   10d5a:	e7e6      	b.n	10d2a <LorawanGetChAndInitiateRadioTransmit+0xca>
   10d5c:	0023      	movs	r3, r4
   10d5e:	2201      	movs	r2, #1
   10d60:	3394      	adds	r3, #148	; 0x94
   10d62:	781b      	ldrb	r3, [r3, #0]
   10d64:	401a      	ands	r2, r3
   10d66:	d108      	bne.n	10d7a <LorawanGetChAndInitiateRadioTransmit+0x11a>
   10d68:	4b0b      	ldr	r3, [pc, #44]	; (10d98 <LorawanGetChAndInitiateRadioTransmit+0x138>)
   10d6a:	490c      	ldr	r1, [pc, #48]	; (10d9c <LorawanGetChAndInitiateRadioTransmit+0x13c>)
   10d6c:	5ce3      	ldrb	r3, [r4, r3]
   10d6e:	34f2      	adds	r4, #242	; 0xf2
   10d70:	4359      	muls	r1, r3
   10d72:	4b0b      	ldr	r3, [pc, #44]	; (10da0 <LorawanGetChAndInitiateRadioTransmit+0x140>)
   10d74:	7820      	ldrb	r0, [r4, #0]
   10d76:	18c9      	adds	r1, r1, r3
   10d78:	e7e2      	b.n	10d40 <LorawanGetChAndInitiateRadioTransmit+0xe0>
   10d7a:	4b0e      	ldr	r3, [pc, #56]	; (10db4 <LorawanGetChAndInitiateRadioTransmit+0x154>)
   10d7c:	4798      	blx	r3
   10d7e:	e7b8      	b.n	10cf2 <LorawanGetChAndInitiateRadioTransmit+0x92>
   10d80:	20003348 	.word	0x20003348
   10d84:	0000d06d 	.word	0x0000d06d
   10d88:	0000f789 	.word	0x0000f789
   10d8c:	00010bf1 	.word	0x00010bf1
   10d90:	200035a0 	.word	0x200035a0
   10d94:	0000eead 	.word	0x0000eead
   10d98:	0000022b 	.word	0x0000022b
   10d9c:	fffffc18 	.word	0xfffffc18
   10da0:	001e8480 	.word	0x001e8480
   10da4:	00010db9 	.word	0x00010db9
   10da8:	0000d5b5 	.word	0x0000d5b5
   10dac:	2000342f 	.word	0x2000342f
   10db0:	00010e71 	.word	0x00010e71
   10db4:	000105c9 	.word	0x000105c9

00010db8 <TransmissionErrorCallback>:
   10db8:	b530      	push	{r4, r5, lr}
   10dba:	4c22      	ldr	r4, [pc, #136]	; (10e44 <TransmissionErrorCallback+0x8c>)
   10dbc:	2501      	movs	r5, #1
   10dbe:	0023      	movs	r3, r4
   10dc0:	b08b      	sub	sp, #44	; 0x2c
   10dc2:	a903      	add	r1, sp, #12
   10dc4:	700d      	strb	r5, [r1, #0]
   10dc6:	33e9      	adds	r3, #233	; 0xe9
   10dc8:	781b      	ldrb	r3, [r3, #0]
   10dca:	aa07      	add	r2, sp, #28
   10dcc:	704b      	strb	r3, [r1, #1]
   10dce:	0023      	movs	r3, r4
   10dd0:	33e7      	adds	r3, #231	; 0xe7
   10dd2:	781b      	ldrb	r3, [r3, #0]
   10dd4:	202e      	movs	r0, #46	; 0x2e
   10dd6:	708b      	strb	r3, [r1, #2]
   10dd8:	4b1b      	ldr	r3, [pc, #108]	; (10e48 <TransmissionErrorCallback+0x90>)
   10dda:	4798      	blx	r3
   10ddc:	2808      	cmp	r0, #8
   10dde:	d121      	bne.n	10e24 <TransmissionErrorCallback+0x6c>
   10de0:	a804      	add	r0, sp, #16
   10de2:	4b1a      	ldr	r3, [pc, #104]	; (10e4c <TransmissionErrorCallback+0x94>)
   10de4:	7005      	strb	r5, [r0, #0]
   10de6:	4798      	blx	r3
   10de8:	9807      	ldr	r0, [sp, #28]
   10dea:	4b19      	ldr	r3, [pc, #100]	; (10e50 <TransmissionErrorCallback+0x98>)
   10dec:	9908      	ldr	r1, [sp, #32]
   10dee:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10df0:	4798      	blx	r3
   10df2:	0023      	movs	r3, r4
   10df4:	33ce      	adds	r3, #206	; 0xce
   10df6:	881b      	ldrh	r3, [r3, #0]
   10df8:	a805      	add	r0, sp, #20
   10dfa:	7003      	strb	r3, [r0, #0]
   10dfc:	4b15      	ldr	r3, [pc, #84]	; (10e54 <TransmissionErrorCallback+0x9c>)
   10dfe:	6043      	str	r3, [r0, #4]
   10e00:	4b15      	ldr	r3, [pc, #84]	; (10e58 <TransmissionErrorCallback+0xa0>)
   10e02:	4798      	blx	r3
   10e04:	2800      	cmp	r0, #0
   10e06:	d01a      	beq.n	10e3e <TransmissionErrorCallback+0x86>
   10e08:	0023      	movs	r3, r4
   10e0a:	33fd      	adds	r3, #253	; 0xfd
   10e0c:	781b      	ldrb	r3, [r3, #0]
   10e0e:	42ab      	cmp	r3, r5
   10e10:	d108      	bne.n	10e24 <TransmissionErrorCallback+0x6c>
   10e12:	0021      	movs	r1, r4
   10e14:	220e      	movs	r2, #14
   10e16:	3184      	adds	r1, #132	; 0x84
   10e18:	780b      	ldrb	r3, [r1, #0]
   10e1a:	4393      	bics	r3, r2
   10e1c:	001a      	movs	r2, r3
   10e1e:	230c      	movs	r3, #12
   10e20:	4313      	orrs	r3, r2
   10e22:	700b      	strb	r3, [r1, #0]
   10e24:	2200      	movs	r2, #0
   10e26:	4b0d      	ldr	r3, [pc, #52]	; (10e5c <TransmissionErrorCallback+0xa4>)
   10e28:	490d      	ldr	r1, [pc, #52]	; (10e60 <TransmissionErrorCallback+0xa8>)
   10e2a:	5ce3      	ldrb	r3, [r4, r3]
   10e2c:	34fc      	adds	r4, #252	; 0xfc
   10e2e:	4359      	muls	r1, r3
   10e30:	4b0c      	ldr	r3, [pc, #48]	; (10e64 <TransmissionErrorCallback+0xac>)
   10e32:	7820      	ldrb	r0, [r4, #0]
   10e34:	18c9      	adds	r1, r1, r3
   10e36:	9200      	str	r2, [sp, #0]
   10e38:	4b0b      	ldr	r3, [pc, #44]	; (10e68 <TransmissionErrorCallback+0xb0>)
   10e3a:	4c0c      	ldr	r4, [pc, #48]	; (10e6c <TransmissionErrorCallback+0xb4>)
   10e3c:	47a0      	blx	r4
   10e3e:	b00b      	add	sp, #44	; 0x2c
   10e40:	bd30      	pop	{r4, r5, pc}
   10e42:	46c0      	nop			; (mov r8, r8)
   10e44:	20003348 	.word	0x20003348
   10e48:	0000d06d 	.word	0x0000d06d
   10e4c:	0000f789 	.word	0x0000f789
   10e50:	00010bf1 	.word	0x00010bf1
   10e54:	200035a0 	.word	0x200035a0
   10e58:	0000eead 	.word	0x0000eead
   10e5c:	0000022b 	.word	0x0000022b
   10e60:	fffffc18 	.word	0xfffffc18
   10e64:	001e8480 	.word	0x001e8480
   10e68:	00010db9 	.word	0x00010db9
   10e6c:	0000d5b5 	.word	0x0000d5b5

00010e70 <UnconfirmedTransmissionCallback>:
   10e70:	b5f0      	push	{r4, r5, r6, r7, lr}
   10e72:	4c3a      	ldr	r4, [pc, #232]	; (10f5c <UnconfirmedTransmissionCallback+0xec>)
   10e74:	b08b      	sub	sp, #44	; 0x2c
   10e76:	0023      	movs	r3, r4
   10e78:	33ce      	adds	r3, #206	; 0xce
   10e7a:	881b      	ldrh	r3, [r3, #0]
   10e7c:	af05      	add	r7, sp, #20
   10e7e:	703b      	strb	r3, [r7, #0]
   10e80:	4b37      	ldr	r3, [pc, #220]	; (10f60 <UnconfirmedTransmissionCallback+0xf0>)
   10e82:	a903      	add	r1, sp, #12
   10e84:	9306      	str	r3, [sp, #24]
   10e86:	2301      	movs	r3, #1
   10e88:	700b      	strb	r3, [r1, #0]
   10e8a:	0023      	movs	r3, r4
   10e8c:	0026      	movs	r6, r4
   10e8e:	33e9      	adds	r3, #233	; 0xe9
   10e90:	781b      	ldrb	r3, [r3, #0]
   10e92:	36e7      	adds	r6, #231	; 0xe7
   10e94:	704b      	strb	r3, [r1, #1]
   10e96:	7833      	ldrb	r3, [r6, #0]
   10e98:	aa07      	add	r2, sp, #28
   10e9a:	202e      	movs	r0, #46	; 0x2e
   10e9c:	4d31      	ldr	r5, [pc, #196]	; (10f64 <UnconfirmedTransmissionCallback+0xf4>)
   10e9e:	708b      	strb	r3, [r1, #2]
   10ea0:	47a8      	blx	r5
   10ea2:	2808      	cmp	r0, #8
   10ea4:	d12b      	bne.n	10efe <UnconfirmedTransmissionCallback+0x8e>
   10ea6:	2301      	movs	r3, #1
   10ea8:	a804      	add	r0, sp, #16
   10eaa:	7003      	strb	r3, [r0, #0]
   10eac:	4b2e      	ldr	r3, [pc, #184]	; (10f68 <UnconfirmedTransmissionCallback+0xf8>)
   10eae:	4798      	blx	r3
   10eb0:	9807      	ldr	r0, [sp, #28]
   10eb2:	4b2e      	ldr	r3, [pc, #184]	; (10f6c <UnconfirmedTransmissionCallback+0xfc>)
   10eb4:	9908      	ldr	r1, [sp, #32]
   10eb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10eb8:	4798      	blx	r3
   10eba:	0038      	movs	r0, r7
   10ebc:	4b2c      	ldr	r3, [pc, #176]	; (10f70 <UnconfirmedTransmissionCallback+0x100>)
   10ebe:	4798      	blx	r3
   10ec0:	2800      	cmp	r0, #0
   10ec2:	d01a      	beq.n	10efa <UnconfirmedTransmissionCallback+0x8a>
   10ec4:	0023      	movs	r3, r4
   10ec6:	33fd      	adds	r3, #253	; 0xfd
   10ec8:	781b      	ldrb	r3, [r3, #0]
   10eca:	2b01      	cmp	r3, #1
   10ecc:	d108      	bne.n	10ee0 <UnconfirmedTransmissionCallback+0x70>
   10ece:	0021      	movs	r1, r4
   10ed0:	220e      	movs	r2, #14
   10ed2:	3184      	adds	r1, #132	; 0x84
   10ed4:	780b      	ldrb	r3, [r1, #0]
   10ed6:	4393      	bics	r3, r2
   10ed8:	001a      	movs	r2, r3
   10eda:	230c      	movs	r3, #12
   10edc:	4313      	orrs	r3, r2
   10ede:	700b      	strb	r3, [r1, #0]
   10ee0:	2200      	movs	r2, #0
   10ee2:	4b24      	ldr	r3, [pc, #144]	; (10f74 <UnconfirmedTransmissionCallback+0x104>)
   10ee4:	4924      	ldr	r1, [pc, #144]	; (10f78 <UnconfirmedTransmissionCallback+0x108>)
   10ee6:	5ce3      	ldrb	r3, [r4, r3]
   10ee8:	34fc      	adds	r4, #252	; 0xfc
   10eea:	4359      	muls	r1, r3
   10eec:	4b23      	ldr	r3, [pc, #140]	; (10f7c <UnconfirmedTransmissionCallback+0x10c>)
   10eee:	7820      	ldrb	r0, [r4, #0]
   10ef0:	18c9      	adds	r1, r1, r3
   10ef2:	4b23      	ldr	r3, [pc, #140]	; (10f80 <UnconfirmedTransmissionCallback+0x110>)
   10ef4:	9200      	str	r2, [sp, #0]
   10ef6:	4c23      	ldr	r4, [pc, #140]	; (10f84 <UnconfirmedTransmissionCallback+0x114>)
   10ef8:	47a0      	blx	r4
   10efa:	b00b      	add	sp, #44	; 0x2c
   10efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10efe:	4b22      	ldr	r3, [pc, #136]	; (10f88 <UnconfirmedTransmissionCallback+0x118>)
   10f00:	4798      	blx	r3
   10f02:	4b22      	ldr	r3, [pc, #136]	; (10f8c <UnconfirmedTransmissionCallback+0x11c>)
   10f04:	4922      	ldr	r1, [pc, #136]	; (10f90 <UnconfirmedTransmissionCallback+0x120>)
   10f06:	4798      	blx	r3
   10f08:	23fa      	movs	r3, #250	; 0xfa
   10f0a:	009b      	lsls	r3, r3, #2
   10f0c:	18c9      	adds	r1, r1, r3
   10f0e:	0023      	movs	r3, r4
   10f10:	9104      	str	r1, [sp, #16]
   10f12:	33ff      	adds	r3, #255	; 0xff
   10f14:	7f5b      	ldrb	r3, [r3, #29]
   10f16:	079a      	lsls	r2, r3, #30
   10f18:	d515      	bpl.n	10f46 <UnconfirmedTransmissionCallback+0xd6>
   10f1a:	aa04      	add	r2, sp, #16
   10f1c:	0031      	movs	r1, r6
   10f1e:	2026      	movs	r0, #38	; 0x26
   10f20:	47a8      	blx	r5
   10f22:	9b04      	ldr	r3, [sp, #16]
   10f24:	1c5a      	adds	r2, r3, #1
   10f26:	d001      	beq.n	10f2c <UnconfirmedTransmissionCallback+0xbc>
   10f28:	3314      	adds	r3, #20
   10f2a:	9304      	str	r3, [sp, #16]
   10f2c:	4b11      	ldr	r3, [pc, #68]	; (10f74 <UnconfirmedTransmissionCallback+0x104>)
   10f2e:	9a04      	ldr	r2, [sp, #16]
   10f30:	5ce3      	ldrb	r3, [r4, r3]
   10f32:	21fa      	movs	r1, #250	; 0xfa
   10f34:	1ad3      	subs	r3, r2, r3
   10f36:	2200      	movs	r2, #0
   10f38:	0089      	lsls	r1, r1, #2
   10f3a:	34f2      	adds	r4, #242	; 0xf2
   10f3c:	4359      	muls	r1, r3
   10f3e:	7820      	ldrb	r0, [r4, #0]
   10f40:	4b14      	ldr	r3, [pc, #80]	; (10f94 <UnconfirmedTransmissionCallback+0x124>)
   10f42:	9200      	str	r2, [sp, #0]
   10f44:	e7d7      	b.n	10ef6 <UnconfirmedTransmissionCallback+0x86>
   10f46:	075b      	lsls	r3, r3, #29
   10f48:	d5f0      	bpl.n	10f2c <UnconfirmedTransmissionCallback+0xbc>
   10f4a:	aa04      	add	r2, sp, #16
   10f4c:	0031      	movs	r1, r6
   10f4e:	2032      	movs	r0, #50	; 0x32
   10f50:	47a8      	blx	r5
   10f52:	9b04      	ldr	r3, [sp, #16]
   10f54:	1c5a      	adds	r2, r3, #1
   10f56:	d0e9      	beq.n	10f2c <UnconfirmedTransmissionCallback+0xbc>
   10f58:	3301      	adds	r3, #1
   10f5a:	e7e6      	b.n	10f2a <UnconfirmedTransmissionCallback+0xba>
   10f5c:	20003348 	.word	0x20003348
   10f60:	200035a0 	.word	0x200035a0
   10f64:	0000d06d 	.word	0x0000d06d
   10f68:	0000f789 	.word	0x0000f789
   10f6c:	00010bf1 	.word	0x00010bf1
   10f70:	0000eead 	.word	0x0000eead
   10f74:	0000022b 	.word	0x0000022b
   10f78:	fffffc18 	.word	0xfffffc18
   10f7c:	001e8480 	.word	0x001e8480
   10f80:	00010db9 	.word	0x00010db9
   10f84:	0000d5b5 	.word	0x0000d5b5
   10f88:	00017155 	.word	0x00017155
   10f8c:	00013a8d 	.word	0x00013a8d
   10f90:	000007d1 	.word	0x000007d1
   10f94:	00010e71 	.word	0x00010e71

00010f98 <EncryptFRMPayload>:
   10f98:	b5f0      	push	{r4, r5, r6, r7, lr}
   10f9a:	0007      	movs	r7, r0
   10f9c:	2401      	movs	r4, #1
   10f9e:	b089      	sub	sp, #36	; 0x24
   10fa0:	9306      	str	r3, [sp, #24]
   10fa2:	ab10      	add	r3, sp, #64	; 0x40
   10fa4:	881d      	ldrh	r5, [r3, #0]
   10fa6:	090b      	lsrs	r3, r1, #4
   10fa8:	9104      	str	r1, [sp, #16]
   10faa:	9205      	str	r2, [sp, #20]
   10fac:	9303      	str	r3, [sp, #12]
   10fae:	9b03      	ldr	r3, [sp, #12]
   10fb0:	429c      	cmp	r4, r3
   10fb2:	d907      	bls.n	10fc4 <EncryptFRMPayload+0x2c>
   10fb4:	260f      	movs	r6, #15
   10fb6:	9b04      	ldr	r3, [sp, #16]
   10fb8:	4033      	ands	r3, r6
   10fba:	1e1e      	subs	r6, r3, #0
   10fbc:	d126      	bne.n	1100c <EncryptFRMPayload+0x74>
   10fbe:	2000      	movs	r0, #0
   10fc0:	b009      	add	sp, #36	; 0x24
   10fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10fc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10fc6:	0022      	movs	r2, r4
   10fc8:	9300      	str	r3, [sp, #0]
   10fca:	9906      	ldr	r1, [sp, #24]
   10fcc:	2301      	movs	r3, #1
   10fce:	9805      	ldr	r0, [sp, #20]
   10fd0:	4e1e      	ldr	r6, [pc, #120]	; (1104c <EncryptFRMPayload+0xb4>)
   10fd2:	47b0      	blx	r6
   10fd4:	4e1e      	ldr	r6, [pc, #120]	; (11050 <EncryptFRMPayload+0xb8>)
   10fd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10fd8:	2101      	movs	r1, #1
   10fda:	0030      	movs	r0, r6
   10fdc:	4b1d      	ldr	r3, [pc, #116]	; (11054 <EncryptFRMPayload+0xbc>)
   10fde:	4798      	blx	r3
   10fe0:	2800      	cmp	r0, #0
   10fe2:	d1ed      	bne.n	10fc0 <EncryptFRMPayload+0x28>
   10fe4:	1e63      	subs	r3, r4, #1
   10fe6:	011b      	lsls	r3, r3, #4
   10fe8:	18fb      	adds	r3, r7, r3
   10fea:	9307      	str	r3, [sp, #28]
   10fec:	9b07      	ldr	r3, [sp, #28]
   10fee:	182a      	adds	r2, r5, r0
   10ff0:	5c19      	ldrb	r1, [r3, r0]
   10ff2:	5d83      	ldrb	r3, [r0, r6]
   10ff4:	b292      	uxth	r2, r2
   10ff6:	4059      	eors	r1, r3
   10ff8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10ffa:	3001      	adds	r0, #1
   10ffc:	5499      	strb	r1, [r3, r2]
   10ffe:	2810      	cmp	r0, #16
   11000:	d1f4      	bne.n	10fec <EncryptFRMPayload+0x54>
   11002:	3510      	adds	r5, #16
   11004:	3401      	adds	r4, #1
   11006:	b2ad      	uxth	r5, r5
   11008:	b2e4      	uxtb	r4, r4
   1100a:	e7d0      	b.n	10fae <EncryptFRMPayload+0x16>
   1100c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1100e:	0022      	movs	r2, r4
   11010:	9300      	str	r3, [sp, #0]
   11012:	9906      	ldr	r1, [sp, #24]
   11014:	2301      	movs	r3, #1
   11016:	9805      	ldr	r0, [sp, #20]
   11018:	4c0c      	ldr	r4, [pc, #48]	; (1104c <EncryptFRMPayload+0xb4>)
   1101a:	47a0      	blx	r4
   1101c:	4c0c      	ldr	r4, [pc, #48]	; (11050 <EncryptFRMPayload+0xb8>)
   1101e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11020:	2101      	movs	r1, #1
   11022:	0020      	movs	r0, r4
   11024:	4b0b      	ldr	r3, [pc, #44]	; (11054 <EncryptFRMPayload+0xbc>)
   11026:	4798      	blx	r3
   11028:	2800      	cmp	r0, #0
   1102a:	d1c9      	bne.n	10fc0 <EncryptFRMPayload+0x28>
   1102c:	9b03      	ldr	r3, [sp, #12]
   1102e:	011b      	lsls	r3, r3, #4
   11030:	18fb      	adds	r3, r7, r3
   11032:	5d07      	ldrb	r7, [r0, r4]
   11034:	5c19      	ldrb	r1, [r3, r0]
   11036:	182a      	adds	r2, r5, r0
   11038:	4079      	eors	r1, r7
   1103a:	9f11      	ldr	r7, [sp, #68]	; 0x44
   1103c:	b292      	uxth	r2, r2
   1103e:	3001      	adds	r0, #1
   11040:	54b9      	strb	r1, [r7, r2]
   11042:	b2c2      	uxtb	r2, r0
   11044:	4296      	cmp	r6, r2
   11046:	d8f4      	bhi.n	11032 <EncryptFRMPayload+0x9a>
   11048:	e7b9      	b.n	10fbe <EncryptFRMPayload+0x26>
   1104a:	46c0      	nop			; (mov r8, r8)
   1104c:	000101b1 	.word	0x000101b1
   11050:	200020a5 	.word	0x200020a5
   11054:	0000784d 	.word	0x0000784d

00011058 <UpdateTransactionCompleteCbParams>:
   11058:	2388      	movs	r3, #136	; 0x88
   1105a:	2201      	movs	r2, #1
   1105c:	b570      	push	{r4, r5, r6, lr}
   1105e:	0001      	movs	r1, r0
   11060:	4c13      	ldr	r4, [pc, #76]	; (110b0 <UpdateTransactionCompleteCbParams+0x58>)
   11062:	4814      	ldr	r0, [pc, #80]	; (110b4 <UpdateTransactionCompleteCbParams+0x5c>)
   11064:	009b      	lsls	r3, r3, #2
   11066:	54e2      	strb	r2, [r4, r3]
   11068:	7842      	ldrb	r2, [r0, #1]
   1106a:	7803      	ldrb	r3, [r0, #0]
   1106c:	0212      	lsls	r2, r2, #8
   1106e:	431a      	orrs	r2, r3
   11070:	7883      	ldrb	r3, [r0, #2]
   11072:	041b      	lsls	r3, r3, #16
   11074:	431a      	orrs	r2, r3
   11076:	78c3      	ldrb	r3, [r0, #3]
   11078:	061b      	lsls	r3, r3, #24
   1107a:	4313      	orrs	r3, r2
   1107c:	d00e      	beq.n	1109c <UpdateTransactionCompleteCbParams+0x44>
   1107e:	0022      	movs	r2, r4
   11080:	2504      	movs	r5, #4
   11082:	32fc      	adds	r2, #252	; 0xfc
   11084:	6890      	ldr	r0, [r2, #8]
   11086:	4228      	tst	r0, r5
   11088:	d008      	beq.n	1109c <UpdateTransactionCompleteCbParams+0x44>
   1108a:	68d0      	ldr	r0, [r2, #12]
   1108c:	2800      	cmp	r0, #0
   1108e:	d005      	beq.n	1109c <UpdateTransactionCompleteCbParams+0x44>
   11090:	0022      	movs	r2, r4
   11092:	32ff      	adds	r2, #255	; 0xff
   11094:	7451      	strb	r1, [r2, #17]
   11096:	7355      	strb	r5, [r2, #13]
   11098:	4907      	ldr	r1, [pc, #28]	; (110b8 <UpdateTransactionCompleteCbParams+0x60>)
   1109a:	4798      	blx	r3
   1109c:	2388      	movs	r3, #136	; 0x88
   1109e:	009b      	lsls	r3, r3, #2
   110a0:	5ce3      	ldrb	r3, [r4, r3]
   110a2:	2b00      	cmp	r3, #0
   110a4:	d002      	beq.n	110ac <UpdateTransactionCompleteCbParams+0x54>
   110a6:	2300      	movs	r3, #0
   110a8:	34fc      	adds	r4, #252	; 0xfc
   110aa:	60e3      	str	r3, [r4, #12]
   110ac:	bd70      	pop	{r4, r5, r6, pc}
   110ae:	46c0      	nop			; (mov r8, r8)
   110b0:	20003348 	.word	0x20003348
   110b4:	200036a4 	.word	0x200036a4
   110b8:	20003454 	.word	0x20003454

000110bc <UpdateRxDataAvailableCbParams>:
   110bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   110be:	4e0f      	ldr	r6, [pc, #60]	; (110fc <UpdateRxDataAvailableCbParams+0x40>)
   110c0:	469c      	mov	ip, r3
   110c2:	7875      	ldrb	r5, [r6, #1]
   110c4:	7834      	ldrb	r4, [r6, #0]
   110c6:	022d      	lsls	r5, r5, #8
   110c8:	4325      	orrs	r5, r4
   110ca:	78b4      	ldrb	r4, [r6, #2]
   110cc:	0424      	lsls	r4, r4, #16
   110ce:	4325      	orrs	r5, r4
   110d0:	78f4      	ldrb	r4, [r6, #3]
   110d2:	0624      	lsls	r4, r4, #24
   110d4:	432c      	orrs	r4, r5
   110d6:	d010      	beq.n	110fa <UpdateRxDataAvailableCbParams+0x3e>
   110d8:	4d09      	ldr	r5, [pc, #36]	; (11100 <UpdateRxDataAvailableCbParams+0x44>)
   110da:	2702      	movs	r7, #2
   110dc:	002e      	movs	r6, r5
   110de:	36fc      	adds	r6, #252	; 0xfc
   110e0:	68b3      	ldr	r3, [r6, #8]
   110e2:	423b      	tst	r3, r7
   110e4:	d009      	beq.n	110fa <UpdateRxDataAvailableCbParams+0x3e>
   110e6:	4663      	mov	r3, ip
   110e8:	35ff      	adds	r5, #255	; 0xff
   110ea:	6170      	str	r0, [r6, #20]
   110ec:	61b1      	str	r1, [r6, #24]
   110ee:	736f      	strb	r7, [r5, #13]
   110f0:	766a      	strb	r2, [r5, #25]
   110f2:	76ab      	strb	r3, [r5, #26]
   110f4:	4903      	ldr	r1, [pc, #12]	; (11104 <UpdateRxDataAvailableCbParams+0x48>)
   110f6:	68f0      	ldr	r0, [r6, #12]
   110f8:	47a0      	blx	r4
   110fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   110fc:	200036a4 	.word	0x200036a4
   11100:	20003348 	.word	0x20003348
   11104:	20003454 	.word	0x20003454

00011108 <LorawanNotifyAppOnRxdone>:
   11108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1110a:	4c25      	ldr	r4, [pc, #148]	; (111a0 <LorawanNotifyAppOnRxdone+0x98>)
   1110c:	0007      	movs	r7, r0
   1110e:	0023      	movs	r3, r4
   11110:	33fd      	adds	r3, #253	; 0xfd
   11112:	781b      	ldrb	r3, [r3, #0]
   11114:	000d      	movs	r5, r1
   11116:	0016      	movs	r6, r2
   11118:	2b01      	cmp	r3, #1
   1111a:	d136      	bne.n	1118a <LorawanNotifyAppOnRxdone+0x82>
   1111c:	0022      	movs	r2, r4
   1111e:	210e      	movs	r1, #14
   11120:	3284      	adds	r2, #132	; 0x84
   11122:	7813      	ldrb	r3, [r2, #0]
   11124:	438b      	bics	r3, r1
   11126:	7013      	strb	r3, [r2, #0]
   11128:	491e      	ldr	r1, [pc, #120]	; (111a4 <LorawanNotifyAppOnRxdone+0x9c>)
   1112a:	784a      	ldrb	r2, [r1, #1]
   1112c:	780b      	ldrb	r3, [r1, #0]
   1112e:	0212      	lsls	r2, r2, #8
   11130:	431a      	orrs	r2, r3
   11132:	788b      	ldrb	r3, [r1, #2]
   11134:	041b      	lsls	r3, r3, #16
   11136:	431a      	orrs	r2, r3
   11138:	78cb      	ldrb	r3, [r1, #3]
   1113a:	061b      	lsls	r3, r3, #24
   1113c:	4313      	orrs	r3, r2
   1113e:	d023      	beq.n	11188 <LorawanNotifyAppOnRxdone+0x80>
   11140:	0022      	movs	r2, r4
   11142:	2120      	movs	r1, #32
   11144:	3294      	adds	r2, #148	; 0x94
   11146:	7813      	ldrb	r3, [r2, #0]
   11148:	438b      	bics	r3, r1
   1114a:	7013      	strb	r3, [r2, #0]
   1114c:	0023      	movs	r3, r4
   1114e:	33fd      	adds	r3, #253	; 0xfd
   11150:	781b      	ldrb	r3, [r3, #0]
   11152:	7878      	ldrb	r0, [r7, #1]
   11154:	469c      	mov	ip, r3
   11156:	78fa      	ldrb	r2, [r7, #3]
   11158:	78b9      	ldrb	r1, [r7, #2]
   1115a:	793b      	ldrb	r3, [r7, #4]
   1115c:	4667      	mov	r7, ip
   1115e:	0209      	lsls	r1, r1, #8
   11160:	4301      	orrs	r1, r0
   11162:	0410      	lsls	r0, r2, #16
   11164:	4308      	orrs	r0, r1
   11166:	061b      	lsls	r3, r3, #24
   11168:	4318      	orrs	r0, r3
   1116a:	0032      	movs	r2, r6
   1116c:	2308      	movs	r3, #8
   1116e:	0029      	movs	r1, r5
   11170:	2f04      	cmp	r7, #4
   11172:	d112      	bne.n	1119a <LorawanNotifyAppOnRxdone+0x92>
   11174:	4d0c      	ldr	r5, [pc, #48]	; (111a8 <LorawanNotifyAppOnRxdone+0xa0>)
   11176:	47a8      	blx	r5
   11178:	2388      	movs	r3, #136	; 0x88
   1117a:	009b      	lsls	r3, r3, #2
   1117c:	5ce3      	ldrb	r3, [r4, r3]
   1117e:	2b00      	cmp	r3, #0
   11180:	d102      	bne.n	11188 <LorawanNotifyAppOnRxdone+0x80>
   11182:	2008      	movs	r0, #8
   11184:	4b09      	ldr	r3, [pc, #36]	; (111ac <LorawanNotifyAppOnRxdone+0xa4>)
   11186:	4798      	blx	r3
   11188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1118a:	2b04      	cmp	r3, #4
   1118c:	d1cc      	bne.n	11128 <LorawanNotifyAppOnRxdone+0x20>
   1118e:	0023      	movs	r3, r4
   11190:	33f1      	adds	r3, #241	; 0xf1
   11192:	7818      	ldrb	r0, [r3, #0]
   11194:	4b06      	ldr	r3, [pc, #24]	; (111b0 <LorawanNotifyAppOnRxdone+0xa8>)
   11196:	4798      	blx	r3
   11198:	e7c6      	b.n	11128 <LorawanNotifyAppOnRxdone+0x20>
   1119a:	4d06      	ldr	r5, [pc, #24]	; (111b4 <LorawanNotifyAppOnRxdone+0xac>)
   1119c:	47a8      	blx	r5
   1119e:	e7eb      	b.n	11178 <LorawanNotifyAppOnRxdone+0x70>
   111a0:	20003348 	.word	0x20003348
   111a4:	200036a4 	.word	0x200036a4
   111a8:	00013061 	.word	0x00013061
   111ac:	00011059 	.word	0x00011059
   111b0:	0000d8cd 	.word	0x0000d8cd
   111b4:	000110bd 	.word	0x000110bd

000111b8 <LorawanSetReceiveWindow2Parameters>:
   111b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   111ba:	466b      	mov	r3, sp
   111bc:	1cdd      	adds	r5, r3, #3
   111be:	9001      	str	r0, [sp, #4]
   111c0:	7029      	strb	r1, [r5, #0]
   111c2:	2001      	movs	r0, #1
   111c4:	a901      	add	r1, sp, #4
   111c6:	4c09      	ldr	r4, [pc, #36]	; (111ec <LorawanSetReceiveWindow2Parameters+0x34>)
   111c8:	47a0      	blx	r4
   111ca:	2808      	cmp	r0, #8
   111cc:	d002      	beq.n	111d4 <LorawanSetReceiveWindow2Parameters+0x1c>
   111ce:	240a      	movs	r4, #10
   111d0:	0020      	movs	r0, r4
   111d2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   111d4:	0029      	movs	r1, r5
   111d6:	200f      	movs	r0, #15
   111d8:	47a0      	blx	r4
   111da:	0004      	movs	r4, r0
   111dc:	2808      	cmp	r0, #8
   111de:	d1f6      	bne.n	111ce <LorawanSetReceiveWindow2Parameters+0x16>
   111e0:	7829      	ldrb	r1, [r5, #0]
   111e2:	9801      	ldr	r0, [sp, #4]
   111e4:	4b02      	ldr	r3, [pc, #8]	; (111f0 <LorawanSetReceiveWindow2Parameters+0x38>)
   111e6:	4798      	blx	r3
   111e8:	e7f2      	b.n	111d0 <LorawanSetReceiveWindow2Parameters+0x18>
   111ea:	46c0      	nop			; (mov r8, r8)
   111ec:	0000d089 	.word	0x0000d089
   111f0:	0001061d 	.word	0x0001061d

000111f4 <LorawanSetReceiveWindowCParameters>:
   111f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   111f6:	466b      	mov	r3, sp
   111f8:	1cdc      	adds	r4, r3, #3
   111fa:	9001      	str	r0, [sp, #4]
   111fc:	7021      	strb	r1, [r4, #0]
   111fe:	2001      	movs	r0, #1
   11200:	a901      	add	r1, sp, #4
   11202:	4d0d      	ldr	r5, [pc, #52]	; (11238 <LorawanSetReceiveWindowCParameters+0x44>)
   11204:	47a8      	blx	r5
   11206:	2808      	cmp	r0, #8
   11208:	d001      	beq.n	1120e <LorawanSetReceiveWindowCParameters+0x1a>
   1120a:	200a      	movs	r0, #10
   1120c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1120e:	0021      	movs	r1, r4
   11210:	200f      	movs	r0, #15
   11212:	47a8      	blx	r5
   11214:	2808      	cmp	r0, #8
   11216:	d1f8      	bne.n	1120a <LorawanSetReceiveWindowCParameters+0x16>
   11218:	4b08      	ldr	r3, [pc, #32]	; (1123c <LorawanSetReceiveWindowCParameters+0x48>)
   1121a:	9a01      	ldr	r2, [sp, #4]
   1121c:	0019      	movs	r1, r3
   1121e:	7824      	ldrb	r4, [r4, #0]
   11220:	3173      	adds	r1, #115	; 0x73
   11222:	336f      	adds	r3, #111	; 0x6f
   11224:	700c      	strb	r4, [r1, #0]
   11226:	0a11      	lsrs	r1, r2, #8
   11228:	701a      	strb	r2, [r3, #0]
   1122a:	7059      	strb	r1, [r3, #1]
   1122c:	0c11      	lsrs	r1, r2, #16
   1122e:	0e12      	lsrs	r2, r2, #24
   11230:	7099      	strb	r1, [r3, #2]
   11232:	70da      	strb	r2, [r3, #3]
   11234:	e7ea      	b.n	1120c <LorawanSetReceiveWindowCParameters+0x18>
   11236:	46c0      	nop			; (mov r8, r8)
   11238:	0000d089 	.word	0x0000d089
   1123c:	20003348 	.word	0x20003348

00011240 <LorawanSetFrequency>:
   11240:	b507      	push	{r0, r1, r2, lr}
   11242:	466b      	mov	r3, sp
   11244:	9100      	str	r1, [sp, #0]
   11246:	7118      	strb	r0, [r3, #4]
   11248:	4669      	mov	r1, sp
   1124a:	2000      	movs	r0, #0
   1124c:	4b01      	ldr	r3, [pc, #4]	; (11254 <LorawanSetFrequency+0x14>)
   1124e:	4798      	blx	r3
   11250:	bd0e      	pop	{r1, r2, r3, pc}
   11252:	46c0      	nop			; (mov r8, r8)
   11254:	0000d0a5 	.word	0x0000d0a5

00011258 <LorawanCheckAndDoRetryOnTimeout>:
   11258:	b513      	push	{r0, r1, r4, lr}
   1125a:	4c33      	ldr	r4, [pc, #204]	; (11328 <LorawanCheckAndDoRetryOnTimeout+0xd0>)
   1125c:	0023      	movs	r3, r4
   1125e:	3394      	adds	r3, #148	; 0x94
   11260:	781b      	ldrb	r3, [r3, #0]
   11262:	0022      	movs	r2, r4
   11264:	07db      	lsls	r3, r3, #31
   11266:	d54b      	bpl.n	11300 <LorawanCheckAndDoRetryOnTimeout+0xa8>
   11268:	0023      	movs	r3, r4
   1126a:	32e4      	adds	r2, #228	; 0xe4
   1126c:	33e2      	adds	r3, #226	; 0xe2
   1126e:	7812      	ldrb	r2, [r2, #0]
   11270:	781b      	ldrb	r3, [r3, #0]
   11272:	429a      	cmp	r2, r3
   11274:	d836      	bhi.n	112e4 <LorawanCheckAndDoRetryOnTimeout+0x8c>
   11276:	4b2d      	ldr	r3, [pc, #180]	; (1132c <LorawanCheckAndDoRetryOnTimeout+0xd4>)
   11278:	5ce3      	ldrb	r3, [r4, r3]
   1127a:	2b00      	cmp	r3, #0
   1127c:	d032      	beq.n	112e4 <LorawanCheckAndDoRetryOnTimeout+0x8c>
   1127e:	0023      	movs	r3, r4
   11280:	33fd      	adds	r3, #253	; 0xfd
   11282:	781b      	ldrb	r3, [r3, #0]
   11284:	2b01      	cmp	r3, #1
   11286:	d119      	bne.n	112bc <LorawanCheckAndDoRetryOnTimeout+0x64>
   11288:	0021      	movs	r1, r4
   1128a:	220e      	movs	r2, #14
   1128c:	3184      	adds	r1, #132	; 0x84
   1128e:	780b      	ldrb	r3, [r1, #0]
   11290:	4393      	bics	r3, r2
   11292:	001a      	movs	r2, r3
   11294:	230c      	movs	r3, #12
   11296:	4313      	orrs	r3, r2
   11298:	700b      	strb	r3, [r1, #0]
   1129a:	0023      	movs	r3, r4
   1129c:	33da      	adds	r3, #218	; 0xda
   1129e:	8819      	ldrh	r1, [r3, #0]
   112a0:	4b23      	ldr	r3, [pc, #140]	; (11330 <LorawanCheckAndDoRetryOnTimeout+0xd8>)
   112a2:	2200      	movs	r2, #0
   112a4:	5ce3      	ldrb	r3, [r4, r3]
   112a6:	34f1      	adds	r4, #241	; 0xf1
   112a8:	1acb      	subs	r3, r1, r3
   112aa:	21fa      	movs	r1, #250	; 0xfa
   112ac:	0089      	lsls	r1, r1, #2
   112ae:	7820      	ldrb	r0, [r4, #0]
   112b0:	4359      	muls	r1, r3
   112b2:	9200      	str	r2, [sp, #0]
   112b4:	4b1f      	ldr	r3, [pc, #124]	; (11334 <LorawanCheckAndDoRetryOnTimeout+0xdc>)
   112b6:	4c20      	ldr	r4, [pc, #128]	; (11338 <LorawanCheckAndDoRetryOnTimeout+0xe0>)
   112b8:	47a0      	blx	r4
   112ba:	bd13      	pop	{r0, r1, r4, pc}
   112bc:	2b04      	cmp	r3, #4
   112be:	d1fc      	bne.n	112ba <LorawanCheckAndDoRetryOnTimeout+0x62>
   112c0:	4b1e      	ldr	r3, [pc, #120]	; (1133c <LorawanCheckAndDoRetryOnTimeout+0xe4>)
   112c2:	4798      	blx	r3
   112c4:	34ce      	adds	r4, #206	; 0xce
   112c6:	300d      	adds	r0, #13
   112c8:	8823      	ldrh	r3, [r4, #0]
   112ca:	b280      	uxth	r0, r0
   112cc:	4283      	cmp	r3, r0
   112ce:	d802      	bhi.n	112d6 <LorawanCheckAndDoRetryOnTimeout+0x7e>
   112d0:	4b1b      	ldr	r3, [pc, #108]	; (11340 <LorawanCheckAndDoRetryOnTimeout+0xe8>)
   112d2:	4798      	blx	r3
   112d4:	e7f1      	b.n	112ba <LorawanCheckAndDoRetryOnTimeout+0x62>
   112d6:	200e      	movs	r0, #14
   112d8:	4b1a      	ldr	r3, [pc, #104]	; (11344 <LorawanCheckAndDoRetryOnTimeout+0xec>)
   112da:	4798      	blx	r3
   112dc:	4b1a      	ldr	r3, [pc, #104]	; (11348 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
   112de:	4798      	blx	r3
   112e0:	4b1a      	ldr	r3, [pc, #104]	; (1134c <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   112e2:	e7f6      	b.n	112d2 <LorawanCheckAndDoRetryOnTimeout+0x7a>
   112e4:	2012      	movs	r0, #18
   112e6:	4b17      	ldr	r3, [pc, #92]	; (11344 <LorawanCheckAndDoRetryOnTimeout+0xec>)
   112e8:	4798      	blx	r3
   112ea:	4b17      	ldr	r3, [pc, #92]	; (11348 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
   112ec:	4798      	blx	r3
   112ee:	34fd      	adds	r4, #253	; 0xfd
   112f0:	4b16      	ldr	r3, [pc, #88]	; (1134c <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   112f2:	4798      	blx	r3
   112f4:	7823      	ldrb	r3, [r4, #0]
   112f6:	2b04      	cmp	r3, #4
   112f8:	d1df      	bne.n	112ba <LorawanCheckAndDoRetryOnTimeout+0x62>
   112fa:	4b15      	ldr	r3, [pc, #84]	; (11350 <LorawanCheckAndDoRetryOnTimeout+0xf8>)
   112fc:	4798      	blx	r3
   112fe:	e7dc      	b.n	112ba <LorawanCheckAndDoRetryOnTimeout+0x62>
   11300:	0023      	movs	r3, r4
   11302:	32e3      	adds	r2, #227	; 0xe3
   11304:	33e1      	adds	r3, #225	; 0xe1
   11306:	7812      	ldrb	r2, [r2, #0]
   11308:	781b      	ldrb	r3, [r3, #0]
   1130a:	429a      	cmp	r2, r3
   1130c:	d803      	bhi.n	11316 <LorawanCheckAndDoRetryOnTimeout+0xbe>
   1130e:	4b07      	ldr	r3, [pc, #28]	; (1132c <LorawanCheckAndDoRetryOnTimeout+0xd4>)
   11310:	5ce3      	ldrb	r3, [r4, r3]
   11312:	2b00      	cmp	r3, #0
   11314:	d1dc      	bne.n	112d0 <LorawanCheckAndDoRetryOnTimeout+0x78>
   11316:	4b0f      	ldr	r3, [pc, #60]	; (11354 <LorawanCheckAndDoRetryOnTimeout+0xfc>)
   11318:	4798      	blx	r3
   1131a:	4b0c      	ldr	r3, [pc, #48]	; (1134c <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   1131c:	4798      	blx	r3
   1131e:	2008      	movs	r0, #8
   11320:	4b08      	ldr	r3, [pc, #32]	; (11344 <LorawanCheckAndDoRetryOnTimeout+0xec>)
   11322:	4798      	blx	r3
   11324:	e7c9      	b.n	112ba <LorawanCheckAndDoRetryOnTimeout+0x62>
   11326:	46c0      	nop			; (mov r8, r8)
   11328:	20003348 	.word	0x20003348
   1132c:	0000022a 	.word	0x0000022a
   11330:	0000022b 	.word	0x0000022b
   11334:	00011359 	.word	0x00011359
   11338:	0000d5b5 	.word	0x0000d5b5
   1133c:	0000fe25 	.word	0x0000fe25
   11340:	00010c61 	.word	0x00010c61
   11344:	00011059 	.word	0x00011059
   11348:	00010665 	.word	0x00010665
   1134c:	0000fda1 	.word	0x0000fda1
   11350:	0000ee91 	.word	0x0000ee91
   11354:	00010695 	.word	0x00010695

00011358 <AckRetransmissionCallback>:
   11358:	b510      	push	{r4, lr}
   1135a:	4c1c      	ldr	r4, [pc, #112]	; (113cc <AckRetransmissionCallback+0x74>)
   1135c:	0023      	movs	r3, r4
   1135e:	3384      	adds	r3, #132	; 0x84
   11360:	781b      	ldrb	r3, [r3, #0]
   11362:	2b7f      	cmp	r3, #127	; 0x7f
   11364:	d82d      	bhi.n	113c2 <AckRetransmissionCallback+0x6a>
   11366:	0023      	movs	r3, r4
   11368:	33fd      	adds	r3, #253	; 0xfd
   1136a:	781b      	ldrb	r3, [r3, #0]
   1136c:	2b04      	cmp	r3, #4
   1136e:	d102      	bne.n	11376 <AckRetransmissionCallback+0x1e>
   11370:	4b17      	ldr	r3, [pc, #92]	; (113d0 <AckRetransmissionCallback+0x78>)
   11372:	4798      	blx	r3
   11374:	e01e      	b.n	113b4 <AckRetransmissionCallback+0x5c>
   11376:	2b01      	cmp	r3, #1
   11378:	d11c      	bne.n	113b4 <AckRetransmissionCallback+0x5c>
   1137a:	0022      	movs	r2, r4
   1137c:	0023      	movs	r3, r4
   1137e:	32e4      	adds	r2, #228	; 0xe4
   11380:	33e2      	adds	r3, #226	; 0xe2
   11382:	7812      	ldrb	r2, [r2, #0]
   11384:	781b      	ldrb	r3, [r3, #0]
   11386:	429a      	cmp	r2, r3
   11388:	d815      	bhi.n	113b6 <AckRetransmissionCallback+0x5e>
   1138a:	4b12      	ldr	r3, [pc, #72]	; (113d4 <AckRetransmissionCallback+0x7c>)
   1138c:	5ce3      	ldrb	r3, [r4, r3]
   1138e:	2b00      	cmp	r3, #0
   11390:	d011      	beq.n	113b6 <AckRetransmissionCallback+0x5e>
   11392:	4b11      	ldr	r3, [pc, #68]	; (113d8 <AckRetransmissionCallback+0x80>)
   11394:	4798      	blx	r3
   11396:	34ce      	adds	r4, #206	; 0xce
   11398:	300d      	adds	r0, #13
   1139a:	8823      	ldrh	r3, [r4, #0]
   1139c:	b280      	uxth	r0, r0
   1139e:	4283      	cmp	r3, r0
   113a0:	d801      	bhi.n	113a6 <AckRetransmissionCallback+0x4e>
   113a2:	4b0e      	ldr	r3, [pc, #56]	; (113dc <AckRetransmissionCallback+0x84>)
   113a4:	e7e5      	b.n	11372 <AckRetransmissionCallback+0x1a>
   113a6:	4b0e      	ldr	r3, [pc, #56]	; (113e0 <AckRetransmissionCallback+0x88>)
   113a8:	4798      	blx	r3
   113aa:	4b0e      	ldr	r3, [pc, #56]	; (113e4 <AckRetransmissionCallback+0x8c>)
   113ac:	4798      	blx	r3
   113ae:	200e      	movs	r0, #14
   113b0:	4b0d      	ldr	r3, [pc, #52]	; (113e8 <AckRetransmissionCallback+0x90>)
   113b2:	4798      	blx	r3
   113b4:	bd10      	pop	{r4, pc}
   113b6:	4b0a      	ldr	r3, [pc, #40]	; (113e0 <AckRetransmissionCallback+0x88>)
   113b8:	4798      	blx	r3
   113ba:	4b0a      	ldr	r3, [pc, #40]	; (113e4 <AckRetransmissionCallback+0x8c>)
   113bc:	4798      	blx	r3
   113be:	2012      	movs	r0, #18
   113c0:	e7f6      	b.n	113b0 <AckRetransmissionCallback+0x58>
   113c2:	4b07      	ldr	r3, [pc, #28]	; (113e0 <AckRetransmissionCallback+0x88>)
   113c4:	4798      	blx	r3
   113c6:	4b07      	ldr	r3, [pc, #28]	; (113e4 <AckRetransmissionCallback+0x8c>)
   113c8:	e7d3      	b.n	11372 <AckRetransmissionCallback+0x1a>
   113ca:	46c0      	nop			; (mov r8, r8)
   113cc:	20003348 	.word	0x20003348
   113d0:	00011259 	.word	0x00011259
   113d4:	0000022a 	.word	0x0000022a
   113d8:	0000fe25 	.word	0x0000fe25
   113dc:	00010c61 	.word	0x00010c61
   113e0:	00010665 	.word	0x00010665
   113e4:	0000fda1 	.word	0x0000fda1
   113e8:	00011059 	.word	0x00011059

000113ec <LORAWAN_RxTimeout>:
   113ec:	4b24      	ldr	r3, [pc, #144]	; (11480 <LORAWAN_RxTimeout+0x94>)
   113ee:	b510      	push	{r4, lr}
   113f0:	001a      	movs	r2, r3
   113f2:	3284      	adds	r2, #132	; 0x84
   113f4:	7812      	ldrb	r2, [r2, #0]
   113f6:	b251      	sxtb	r1, r2
   113f8:	2900      	cmp	r1, #0
   113fa:	db27      	blt.n	1144c <LORAWAN_RxTimeout+0x60>
   113fc:	0019      	movs	r1, r3
   113fe:	31fd      	adds	r1, #253	; 0xfd
   11400:	7809      	ldrb	r1, [r1, #0]
   11402:	2904      	cmp	r1, #4
   11404:	d108      	bne.n	11418 <LORAWAN_RxTimeout+0x2c>
   11406:	3903      	subs	r1, #3
   11408:	420a      	tst	r2, r1
   1140a:	d005      	beq.n	11418 <LORAWAN_RxTimeout+0x2c>
   1140c:	2290      	movs	r2, #144	; 0x90
   1140e:	0092      	lsls	r2, r2, #2
   11410:	5499      	strb	r1, [r3, r2]
   11412:	4b1c      	ldr	r3, [pc, #112]	; (11484 <LORAWAN_RxTimeout+0x98>)
   11414:	4798      	blx	r3
   11416:	bd10      	pop	{r4, pc}
   11418:	210e      	movs	r1, #14
   1141a:	0010      	movs	r0, r2
   1141c:	4008      	ands	r0, r1
   1141e:	2806      	cmp	r0, #6
   11420:	d107      	bne.n	11432 <LORAWAN_RxTimeout+0x46>
   11422:	3384      	adds	r3, #132	; 0x84
   11424:	781a      	ldrb	r2, [r3, #0]
   11426:	438a      	bics	r2, r1
   11428:	0011      	movs	r1, r2
   1142a:	2208      	movs	r2, #8
   1142c:	430a      	orrs	r2, r1
   1142e:	701a      	strb	r2, [r3, #0]
   11430:	e7f1      	b.n	11416 <LORAWAN_RxTimeout+0x2a>
   11432:	2004      	movs	r0, #4
   11434:	3394      	adds	r3, #148	; 0x94
   11436:	781b      	ldrb	r3, [r3, #0]
   11438:	4203      	tst	r3, r0
   1143a:	d002      	beq.n	11442 <LORAWAN_RxTimeout+0x56>
   1143c:	4b12      	ldr	r3, [pc, #72]	; (11488 <LORAWAN_RxTimeout+0x9c>)
   1143e:	4798      	blx	r3
   11440:	e7e9      	b.n	11416 <LORAWAN_RxTimeout+0x2a>
   11442:	07d3      	lsls	r3, r2, #31
   11444:	d5e7      	bpl.n	11416 <LORAWAN_RxTimeout+0x2a>
   11446:	4b11      	ldr	r3, [pc, #68]	; (1148c <LORAWAN_RxTimeout+0xa0>)
   11448:	4798      	blx	r3
   1144a:	e7e4      	b.n	11416 <LORAWAN_RxTimeout+0x2a>
   1144c:	4810      	ldr	r0, [pc, #64]	; (11490 <LORAWAN_RxTimeout+0xa4>)
   1144e:	7841      	ldrb	r1, [r0, #1]
   11450:	7802      	ldrb	r2, [r0, #0]
   11452:	0209      	lsls	r1, r1, #8
   11454:	4311      	orrs	r1, r2
   11456:	7882      	ldrb	r2, [r0, #2]
   11458:	0412      	lsls	r2, r2, #16
   1145a:	4311      	orrs	r1, r2
   1145c:	78c2      	ldrb	r2, [r0, #3]
   1145e:	0612      	lsls	r2, r2, #24
   11460:	430a      	orrs	r2, r1
   11462:	d0d8      	beq.n	11416 <LORAWAN_RxTimeout+0x2a>
   11464:	2188      	movs	r1, #136	; 0x88
   11466:	2001      	movs	r0, #1
   11468:	0089      	lsls	r1, r1, #2
   1146a:	5458      	strb	r0, [r3, r1]
   1146c:	0019      	movs	r1, r3
   1146e:	2404      	movs	r4, #4
   11470:	31ff      	adds	r1, #255	; 0xff
   11472:	33fc      	adds	r3, #252	; 0xfc
   11474:	734c      	strb	r4, [r1, #13]
   11476:	7448      	strb	r0, [r1, #17]
   11478:	4906      	ldr	r1, [pc, #24]	; (11494 <LORAWAN_RxTimeout+0xa8>)
   1147a:	68d8      	ldr	r0, [r3, #12]
   1147c:	4790      	blx	r2
   1147e:	e7ca      	b.n	11416 <LORAWAN_RxTimeout+0x2a>
   11480:	20003348 	.word	0x20003348
   11484:	00013025 	.word	0x00013025
   11488:	000106b9 	.word	0x000106b9
   1148c:	00011259 	.word	0x00011259
   11490:	200036a4 	.word	0x200036a4
   11494:	20003454 	.word	0x20003454

00011498 <LorawanConfigureRadioForRX2>:
   11498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1149a:	466b      	mov	r3, sp
   1149c:	1cdd      	adds	r5, r3, #3
   1149e:	2300      	movs	r3, #0
   114a0:	702b      	strb	r3, [r5, #0]
   114a2:	2390      	movs	r3, #144	; 0x90
   114a4:	4c29      	ldr	r4, [pc, #164]	; (1154c <LorawanConfigureRadioForRX2+0xb4>)
   114a6:	009b      	lsls	r3, r3, #2
   114a8:	5ce1      	ldrb	r1, [r4, r3]
   114aa:	0006      	movs	r6, r0
   114ac:	0023      	movs	r3, r4
   114ae:	2900      	cmp	r1, #0
   114b0:	d02f      	beq.n	11512 <LorawanConfigureRadioForRX2+0x7a>
   114b2:	3373      	adds	r3, #115	; 0x73
   114b4:	781b      	ldrb	r3, [r3, #0]
   114b6:	702b      	strb	r3, [r5, #0]
   114b8:	0023      	movs	r3, r4
   114ba:	6f22      	ldr	r2, [r4, #112]	; 0x70
   114bc:	336f      	adds	r3, #111	; 0x6f
   114be:	781b      	ldrb	r3, [r3, #0]
   114c0:	0211      	lsls	r1, r2, #8
   114c2:	4319      	orrs	r1, r3
   114c4:	7828      	ldrb	r0, [r5, #0]
   114c6:	4b22      	ldr	r3, [pc, #136]	; (11550 <LorawanConfigureRadioForRX2+0xb8>)
   114c8:	4798      	blx	r3
   114ca:	2300      	movs	r3, #0
   114cc:	0022      	movs	r2, r4
   114ce:	af01      	add	r7, sp, #4
   114d0:	703b      	strb	r3, [r7, #0]
   114d2:	32fd      	adds	r2, #253	; 0xfd
   114d4:	7812      	ldrb	r2, [r2, #0]
   114d6:	2a04      	cmp	r2, #4
   114d8:	d130      	bne.n	1153c <LorawanConfigureRadioForRX2+0xa4>
   114da:	0022      	movs	r2, r4
   114dc:	3284      	adds	r2, #132	; 0x84
   114de:	7812      	ldrb	r2, [r2, #0]
   114e0:	07d2      	lsls	r2, r2, #31
   114e2:	d52b      	bpl.n	1153c <LorawanConfigureRadioForRX2+0xa4>
   114e4:	2290      	movs	r2, #144	; 0x90
   114e6:	0092      	lsls	r2, r2, #2
   114e8:	5ca2      	ldrb	r2, [r4, r2]
   114ea:	429a      	cmp	r2, r3
   114ec:	d026      	beq.n	1153c <LorawanConfigureRadioForRX2+0xa4>
   114ee:	807b      	strh	r3, [r7, #2]
   114f0:	0038      	movs	r0, r7
   114f2:	4b18      	ldr	r3, [pc, #96]	; (11554 <LorawanConfigureRadioForRX2+0xbc>)
   114f4:	4798      	blx	r3
   114f6:	1e04      	subs	r4, r0, #0
   114f8:	d00a      	beq.n	11510 <LorawanConfigureRadioForRX2+0x78>
   114fa:	4b17      	ldr	r3, [pc, #92]	; (11558 <LorawanConfigureRadioForRX2+0xc0>)
   114fc:	4798      	blx	r3
   114fe:	4b17      	ldr	r3, [pc, #92]	; (1155c <LorawanConfigureRadioForRX2+0xc4>)
   11500:	4798      	blx	r3
   11502:	4b17      	ldr	r3, [pc, #92]	; (11560 <LorawanConfigureRadioForRX2+0xc8>)
   11504:	4798      	blx	r3
   11506:	2e00      	cmp	r6, #0
   11508:	d002      	beq.n	11510 <LorawanConfigureRadioForRX2+0x78>
   1150a:	0020      	movs	r0, r4
   1150c:	4b15      	ldr	r3, [pc, #84]	; (11564 <LorawanConfigureRadioForRX2+0xcc>)
   1150e:	4798      	blx	r3
   11510:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   11512:	3394      	adds	r3, #148	; 0x94
   11514:	781b      	ldrb	r3, [r3, #0]
   11516:	075b      	lsls	r3, r3, #29
   11518:	d50b      	bpl.n	11532 <LorawanConfigureRadioForRX2+0x9a>
   1151a:	002a      	movs	r2, r5
   1151c:	2009      	movs	r0, #9
   1151e:	4b12      	ldr	r3, [pc, #72]	; (11568 <LorawanConfigureRadioForRX2+0xd0>)
   11520:	4798      	blx	r3
   11522:	0022      	movs	r2, r4
   11524:	0023      	movs	r3, r4
   11526:	326c      	adds	r2, #108	; 0x6c
   11528:	8811      	ldrh	r1, [r2, #0]
   1152a:	336a      	adds	r3, #106	; 0x6a
   1152c:	881b      	ldrh	r3, [r3, #0]
   1152e:	0409      	lsls	r1, r1, #16
   11530:	e7c7      	b.n	114c2 <LorawanConfigureRadioForRX2+0x2a>
   11532:	0023      	movs	r3, r4
   11534:	336e      	adds	r3, #110	; 0x6e
   11536:	781b      	ldrb	r3, [r3, #0]
   11538:	702b      	strb	r3, [r5, #0]
   1153a:	e7f2      	b.n	11522 <LorawanConfigureRadioForRX2+0x8a>
   1153c:	466b      	mov	r3, sp
   1153e:	0029      	movs	r1, r5
   11540:	1d9a      	adds	r2, r3, #6
   11542:	2003      	movs	r0, #3
   11544:	4b08      	ldr	r3, [pc, #32]	; (11568 <LorawanConfigureRadioForRX2+0xd0>)
   11546:	4798      	blx	r3
   11548:	e7d2      	b.n	114f0 <LorawanConfigureRadioForRX2+0x58>
   1154a:	46c0      	nop			; (mov r8, r8)
   1154c:	20003348 	.word	0x20003348
   11550:	00010b85 	.word	0x00010b85
   11554:	0000f789 	.word	0x0000f789
   11558:	00010665 	.word	0x00010665
   1155c:	00010695 	.word	0x00010695
   11560:	0000fda1 	.word	0x0000fda1
   11564:	00011059 	.word	0x00011059
   11568:	0000d06d 	.word	0x0000d06d

0001156c <SetReceptionNotOkState>:
   1156c:	4a0c      	ldr	r2, [pc, #48]	; (115a0 <SetReceptionNotOkState+0x34>)
   1156e:	b510      	push	{r4, lr}
   11570:	0013      	movs	r3, r2
   11572:	33fd      	adds	r3, #253	; 0xfd
   11574:	7819      	ldrb	r1, [r3, #0]
   11576:	0013      	movs	r3, r2
   11578:	4c0a      	ldr	r4, [pc, #40]	; (115a4 <SetReceptionNotOkState+0x38>)
   1157a:	3384      	adds	r3, #132	; 0x84
   1157c:	2904      	cmp	r1, #4
   1157e:	d105      	bne.n	1158c <SetReceptionNotOkState+0x20>
   11580:	2088      	movs	r0, #136	; 0x88
   11582:	3903      	subs	r1, #3
   11584:	0080      	lsls	r0, r0, #2
   11586:	5411      	strb	r1, [r2, r0]
   11588:	3020      	adds	r0, #32
   1158a:	5411      	strb	r1, [r2, r0]
   1158c:	210e      	movs	r1, #14
   1158e:	781a      	ldrb	r2, [r3, #0]
   11590:	2000      	movs	r0, #0
   11592:	438a      	bics	r2, r1
   11594:	0011      	movs	r1, r2
   11596:	220a      	movs	r2, #10
   11598:	430a      	orrs	r2, r1
   1159a:	701a      	strb	r2, [r3, #0]
   1159c:	47a0      	blx	r4
   1159e:	bd10      	pop	{r4, pc}
   115a0:	20003348 	.word	0x20003348
   115a4:	00011499 	.word	0x00011499

000115a8 <LorawanProcessFcntDown>:
   115a8:	b570      	push	{r4, r5, r6, lr}
   115aa:	79c3      	ldrb	r3, [r0, #7]
   115ac:	7982      	ldrb	r2, [r0, #6]
   115ae:	4c1f      	ldr	r4, [pc, #124]	; (1162c <LorawanProcessFcntDown+0x84>)
   115b0:	021b      	lsls	r3, r3, #8
   115b2:	4313      	orrs	r3, r2
   115b4:	0022      	movs	r2, r4
   115b6:	218b      	movs	r1, #139	; 0x8b
   115b8:	328c      	adds	r2, #140	; 0x8c
   115ba:	8810      	ldrh	r0, [r2, #0]
   115bc:	0089      	lsls	r1, r1, #2
   115be:	8013      	strh	r3, [r2, #0]
   115c0:	4298      	cmp	r0, r3
   115c2:	d80f      	bhi.n	115e4 <LorawanProcessFcntDown+0x3c>
   115c4:	5c61      	ldrb	r1, [r4, r1]
   115c6:	2900      	cmp	r1, #0
   115c8:	d007      	beq.n	115da <LorawanProcessFcntDown+0x32>
   115ca:	2301      	movs	r3, #1
   115cc:	408b      	lsls	r3, r1
   115ce:	6812      	ldr	r2, [r2, #0]
   115d0:	3b01      	subs	r3, #1
   115d2:	421a      	tst	r2, r3
   115d4:	d001      	beq.n	115da <LorawanProcessFcntDown+0x32>
   115d6:	2008      	movs	r0, #8
   115d8:	bd70      	pop	{r4, r5, r6, pc}
   115da:	210a      	movs	r1, #10
   115dc:	4b14      	ldr	r3, [pc, #80]	; (11630 <LorawanProcessFcntDown+0x88>)
   115de:	2001      	movs	r0, #1
   115e0:	4798      	blx	r3
   115e2:	e7f8      	b.n	115d6 <LorawanProcessFcntDown+0x2e>
   115e4:	0020      	movs	r0, r4
   115e6:	308e      	adds	r0, #142	; 0x8e
   115e8:	8803      	ldrh	r3, [r0, #0]
   115ea:	3301      	adds	r3, #1
   115ec:	8003      	strh	r3, [r0, #0]
   115ee:	5c61      	ldrb	r1, [r4, r1]
   115f0:	2900      	cmp	r1, #0
   115f2:	d005      	beq.n	11600 <LorawanProcessFcntDown+0x58>
   115f4:	2301      	movs	r3, #1
   115f6:	408b      	lsls	r3, r1
   115f8:	6812      	ldr	r2, [r2, #0]
   115fa:	3b01      	subs	r3, #1
   115fc:	421a      	tst	r2, r3
   115fe:	d103      	bne.n	11608 <LorawanProcessFcntDown+0x60>
   11600:	210a      	movs	r1, #10
   11602:	2001      	movs	r0, #1
   11604:	4b0a      	ldr	r3, [pc, #40]	; (11630 <LorawanProcessFcntDown+0x88>)
   11606:	4798      	blx	r3
   11608:	0023      	movs	r3, r4
   1160a:	338c      	adds	r3, #140	; 0x8c
   1160c:	681b      	ldr	r3, [r3, #0]
   1160e:	3301      	adds	r3, #1
   11610:	d1e1      	bne.n	115d6 <LorawanProcessFcntDown+0x2e>
   11612:	2501      	movs	r5, #1
   11614:	3484      	adds	r4, #132	; 0x84
   11616:	78a3      	ldrb	r3, [r4, #2]
   11618:	432b      	orrs	r3, r5
   1161a:	70a3      	strb	r3, [r4, #2]
   1161c:	4b05      	ldr	r3, [pc, #20]	; (11634 <LorawanProcessFcntDown+0x8c>)
   1161e:	4798      	blx	r3
   11620:	210b      	movs	r1, #11
   11622:	0028      	movs	r0, r5
   11624:	4b02      	ldr	r3, [pc, #8]	; (11630 <LorawanProcessFcntDown+0x88>)
   11626:	4798      	blx	r3
   11628:	200d      	movs	r0, #13
   1162a:	e7d5      	b.n	115d8 <LorawanProcessFcntDown+0x30>
   1162c:	20003348 	.word	0x20003348
   11630:	00009759 	.word	0x00009759
   11634:	0001156d 	.word	0x0001156d

00011638 <UpdateCurrentDataRateAfterDataRangeChanges>:
   11638:	4b09      	ldr	r3, [pc, #36]	; (11660 <UpdateCurrentDataRateAfterDataRangeChanges+0x28>)
   1163a:	001a      	movs	r2, r3
   1163c:	32f4      	adds	r2, #244	; 0xf4
   1163e:	7811      	ldrb	r1, [r2, #0]
   11640:	001a      	movs	r2, r3
   11642:	32e7      	adds	r2, #231	; 0xe7
   11644:	7810      	ldrb	r0, [r2, #0]
   11646:	4288      	cmp	r0, r1
   11648:	d900      	bls.n	1164c <UpdateCurrentDataRateAfterDataRangeChanges+0x14>
   1164a:	7011      	strb	r1, [r2, #0]
   1164c:	001a      	movs	r2, r3
   1164e:	33e7      	adds	r3, #231	; 0xe7
   11650:	32f3      	adds	r2, #243	; 0xf3
   11652:	7812      	ldrb	r2, [r2, #0]
   11654:	7819      	ldrb	r1, [r3, #0]
   11656:	4291      	cmp	r1, r2
   11658:	d200      	bcs.n	1165c <UpdateCurrentDataRateAfterDataRangeChanges+0x24>
   1165a:	701a      	strb	r2, [r3, #0]
   1165c:	4770      	bx	lr
   1165e:	46c0      	nop			; (mov r8, r8)
   11660:	20003348 	.word	0x20003348

00011664 <ExecuteNewChannel>:
   11664:	b5f0      	push	{r4, r5, r6, r7, lr}
   11666:	b08d      	sub	sp, #52	; 0x34
   11668:	7807      	ldrb	r7, [r0, #0]
   1166a:	ab02      	add	r3, sp, #8
   1166c:	0006      	movs	r6, r0
   1166e:	71df      	strb	r7, [r3, #7]
   11670:	1c41      	adds	r1, r0, #1
   11672:	4b59      	ldr	r3, [pc, #356]	; (117d8 <ExecuteNewChannel+0x174>)
   11674:	2204      	movs	r2, #4
   11676:	a808      	add	r0, sp, #32
   11678:	4798      	blx	r3
   1167a:	9b08      	ldr	r3, [sp, #32]
   1167c:	4c57      	ldr	r4, [pc, #348]	; (117dc <ExecuteNewChannel+0x178>)
   1167e:	021d      	lsls	r5, r3, #8
   11680:	2364      	movs	r3, #100	; 0x64
   11682:	0a2d      	lsrs	r5, r5, #8
   11684:	435d      	muls	r5, r3
   11686:	1d73      	adds	r3, r6, #5
   11688:	9301      	str	r3, [sp, #4]
   1168a:	0023      	movs	r3, r4
   1168c:	9508      	str	r5, [sp, #32]
   1168e:	33ff      	adds	r3, #255	; 0xff
   11690:	781b      	ldrb	r3, [r3, #0]
   11692:	3b02      	subs	r3, #2
   11694:	2b01      	cmp	r3, #1
   11696:	d800      	bhi.n	1169a <ExecuteNewChannel+0x36>
   11698:	e092      	b.n	117c0 <ExecuteNewChannel+0x15c>
   1169a:	7933      	ldrb	r3, [r6, #4]
   1169c:	a904      	add	r1, sp, #16
   1169e:	9300      	str	r3, [sp, #0]
   116a0:	2300      	movs	r3, #0
   116a2:	2015      	movs	r0, #21
   116a4:	4e4e      	ldr	r6, [pc, #312]	; (117e0 <ExecuteNewChannel+0x17c>)
   116a6:	700f      	strb	r7, [r1, #0]
   116a8:	704b      	strb	r3, [r1, #1]
   116aa:	47b0      	blx	r6
   116ac:	2808      	cmp	r0, #8
   116ae:	d12b      	bne.n	11708 <ExecuteNewChannel+0xa4>
   116b0:	466a      	mov	r2, sp
   116b2:	ab02      	add	r3, sp, #8
   116b4:	79db      	ldrb	r3, [r3, #7]
   116b6:	7812      	ldrb	r2, [r2, #0]
   116b8:	af06      	add	r7, sp, #24
   116ba:	a90a      	add	r1, sp, #40	; 0x28
   116bc:	3806      	subs	r0, #6
   116be:	703b      	strb	r3, [r7, #0]
   116c0:	707a      	strb	r2, [r7, #1]
   116c2:	710b      	strb	r3, [r1, #4]
   116c4:	950a      	str	r5, [sp, #40]	; 0x28
   116c6:	47b0      	blx	r6
   116c8:	2808      	cmp	r0, #8
   116ca:	d001      	beq.n	116d0 <ExecuteNewChannel+0x6c>
   116cc:	2d00      	cmp	r5, #0
   116ce:	d10b      	bne.n	116e8 <ExecuteNewChannel+0x84>
   116d0:	0023      	movs	r3, r4
   116d2:	33e0      	adds	r3, #224	; 0xe0
   116d4:	781a      	ldrb	r2, [r3, #0]
   116d6:	2303      	movs	r3, #3
   116d8:	4353      	muls	r3, r2
   116da:	2280      	movs	r2, #128	; 0x80
   116dc:	18e3      	adds	r3, r4, r3
   116de:	3398      	adds	r3, #152	; 0x98
   116e0:	7899      	ldrb	r1, [r3, #2]
   116e2:	4252      	negs	r2, r2
   116e4:	430a      	orrs	r2, r1
   116e6:	709a      	strb	r2, [r3, #2]
   116e8:	0039      	movs	r1, r7
   116ea:	2012      	movs	r0, #18
   116ec:	47b0      	blx	r6
   116ee:	2808      	cmp	r0, #8
   116f0:	d10a      	bne.n	11708 <ExecuteNewChannel+0xa4>
   116f2:	0023      	movs	r3, r4
   116f4:	33e0      	adds	r3, #224	; 0xe0
   116f6:	781a      	ldrb	r2, [r3, #0]
   116f8:	2303      	movs	r3, #3
   116fa:	4353      	muls	r3, r2
   116fc:	2240      	movs	r2, #64	; 0x40
   116fe:	18e3      	adds	r3, r4, r3
   11700:	3398      	adds	r3, #152	; 0x98
   11702:	7899      	ldrb	r1, [r3, #2]
   11704:	430a      	orrs	r2, r1
   11706:	709a      	strb	r2, [r3, #2]
   11708:	0023      	movs	r3, r4
   1170a:	33e0      	adds	r3, #224	; 0xe0
   1170c:	781a      	ldrb	r2, [r3, #0]
   1170e:	2303      	movs	r3, #3
   11710:	4353      	muls	r3, r2
   11712:	18e3      	adds	r3, r4, r3
   11714:	3398      	adds	r3, #152	; 0x98
   11716:	789b      	ldrb	r3, [r3, #2]
   11718:	09da      	lsrs	r2, r3, #7
   1171a:	2a01      	cmp	r2, #1
   1171c:	d150      	bne.n	117c0 <ExecuteNewChannel+0x15c>
   1171e:	065b      	lsls	r3, r3, #25
   11720:	d54e      	bpl.n	117c0 <ExecuteNewChannel+0x15c>
   11722:	4e30      	ldr	r6, [pc, #192]	; (117e4 <ExecuteNewChannel+0x180>)
   11724:	2d00      	cmp	r5, #0
   11726:	d04e      	beq.n	117c6 <ExecuteNewChannel+0x162>
   11728:	a906      	add	r1, sp, #24
   1172a:	2012      	movs	r0, #18
   1172c:	47b0      	blx	r6
   1172e:	ad07      	add	r5, sp, #28
   11730:	a90a      	add	r1, sp, #40	; 0x28
   11732:	2000      	movs	r0, #0
   11734:	47b0      	blx	r6
   11736:	002a      	movs	r2, r5
   11738:	2100      	movs	r1, #0
   1173a:	2014      	movs	r0, #20
   1173c:	4f2a      	ldr	r7, [pc, #168]	; (117e8 <ExecuteNewChannel+0x184>)
   1173e:	47b8      	blx	r7
   11740:	0023      	movs	r3, r4
   11742:	782a      	ldrb	r2, [r5, #0]
   11744:	33f3      	adds	r3, #243	; 0xf3
   11746:	701a      	strb	r2, [r3, #0]
   11748:	0023      	movs	r3, r4
   1174a:	786a      	ldrb	r2, [r5, #1]
   1174c:	33f4      	adds	r3, #244	; 0xf4
   1174e:	701a      	strb	r2, [r3, #0]
   11750:	34ff      	adds	r4, #255	; 0xff
   11752:	4b26      	ldr	r3, [pc, #152]	; (117ec <ExecuteNewChannel+0x188>)
   11754:	4798      	blx	r3
   11756:	7f63      	ldrb	r3, [r4, #29]
   11758:	079b      	lsls	r3, r3, #30
   1175a:	d50e      	bpl.n	1177a <ExecuteNewChannel+0x116>
   1175c:	2416      	movs	r4, #22
   1175e:	ab02      	add	r3, sp, #8
   11760:	18e4      	adds	r4, r4, r3
   11762:	1dd9      	adds	r1, r3, #7
   11764:	0022      	movs	r2, r4
   11766:	201e      	movs	r0, #30
   11768:	47b8      	blx	r7
   1176a:	ab02      	add	r3, sp, #8
   1176c:	79db      	ldrb	r3, [r3, #7]
   1176e:	a909      	add	r1, sp, #36	; 0x24
   11770:	708b      	strb	r3, [r1, #2]
   11772:	8823      	ldrh	r3, [r4, #0]
   11774:	201e      	movs	r0, #30
   11776:	800b      	strh	r3, [r1, #0]
   11778:	47b0      	blx	r6
   1177a:	ab02      	add	r3, sp, #8
   1177c:	79db      	ldrb	r3, [r3, #7]
   1177e:	a905      	add	r1, sp, #20
   11780:	700b      	strb	r3, [r1, #0]
   11782:	2301      	movs	r3, #1
   11784:	2016      	movs	r0, #22
   11786:	704b      	strb	r3, [r1, #1]
   11788:	4b16      	ldr	r3, [pc, #88]	; (117e4 <ExecuteNewChannel+0x180>)
   1178a:	4798      	blx	r3
   1178c:	ad09      	add	r5, sp, #36	; 0x24
   1178e:	2100      	movs	r1, #0
   11790:	002a      	movs	r2, r5
   11792:	4b15      	ldr	r3, [pc, #84]	; (117e8 <ExecuteNewChannel+0x184>)
   11794:	2014      	movs	r0, #20
   11796:	4798      	blx	r3
   11798:	4c10      	ldr	r4, [pc, #64]	; (117dc <ExecuteNewChannel+0x178>)
   1179a:	782a      	ldrb	r2, [r5, #0]
   1179c:	0023      	movs	r3, r4
   1179e:	33f3      	adds	r3, #243	; 0xf3
   117a0:	701a      	strb	r2, [r3, #0]
   117a2:	0023      	movs	r3, r4
   117a4:	786a      	ldrb	r2, [r5, #1]
   117a6:	33f4      	adds	r3, #244	; 0xf4
   117a8:	701a      	strb	r2, [r3, #0]
   117aa:	4b10      	ldr	r3, [pc, #64]	; (117ec <ExecuteNewChannel+0x188>)
   117ac:	4798      	blx	r3
   117ae:	2304      	movs	r3, #4
   117b0:	3484      	adds	r4, #132	; 0x84
   117b2:	7862      	ldrb	r2, [r4, #1]
   117b4:	210b      	movs	r1, #11
   117b6:	4313      	orrs	r3, r2
   117b8:	7063      	strb	r3, [r4, #1]
   117ba:	2001      	movs	r0, #1
   117bc:	4b0c      	ldr	r3, [pc, #48]	; (117f0 <ExecuteNewChannel+0x18c>)
   117be:	4798      	blx	r3
   117c0:	9801      	ldr	r0, [sp, #4]
   117c2:	b00d      	add	sp, #52	; 0x34
   117c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   117c6:	ab02      	add	r3, sp, #8
   117c8:	79db      	ldrb	r3, [r3, #7]
   117ca:	a905      	add	r1, sp, #20
   117cc:	2016      	movs	r0, #22
   117ce:	700b      	strb	r3, [r1, #0]
   117d0:	704d      	strb	r5, [r1, #1]
   117d2:	47b0      	blx	r6
   117d4:	e7da      	b.n	1178c <ExecuteNewChannel+0x128>
   117d6:	46c0      	nop			; (mov r8, r8)
   117d8:	00016a0f 	.word	0x00016a0f
   117dc:	20003348 	.word	0x20003348
   117e0:	0000d089 	.word	0x0000d089
   117e4:	0000d0a5 	.word	0x0000d0a5
   117e8:	0000d06d 	.word	0x0000d06d
   117ec:	00011639 	.word	0x00011639
   117f0:	00009759 	.word	0x00009759

000117f4 <MacExecuteCommands>:
   117f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   117f6:	1843      	adds	r3, r0, r1
   117f8:	b087      	sub	sp, #28
   117fa:	9301      	str	r3, [sp, #4]
   117fc:	2300      	movs	r3, #0
   117fe:	0007      	movs	r7, r0
   11800:	2501      	movs	r5, #1
   11802:	9302      	str	r3, [sp, #8]
   11804:	9b01      	ldr	r3, [sp, #4]
   11806:	4e71      	ldr	r6, [pc, #452]	; (119cc <MacExecuteCommands+0x1d8>)
   11808:	429f      	cmp	r7, r3
   1180a:	d362      	bcc.n	118d2 <MacExecuteCommands+0xde>
   1180c:	4b70      	ldr	r3, [pc, #448]	; (119d0 <MacExecuteCommands+0x1dc>)
   1180e:	5cf3      	ldrb	r3, [r6, r3]
   11810:	2b00      	cmp	r3, #0
   11812:	d000      	beq.n	11816 <MacExecuteCommands+0x22>
   11814:	e08f      	b.n	11936 <MacExecuteCommands+0x142>
   11816:	0038      	movs	r0, r7
   11818:	b007      	add	sp, #28
   1181a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1181c:	0032      	movs	r2, r6
   1181e:	7879      	ldrb	r1, [r7, #1]
   11820:	32e5      	adds	r2, #229	; 0xe5
   11822:	7011      	strb	r1, [r2, #0]
   11824:	0032      	movs	r2, r6
   11826:	78b9      	ldrb	r1, [r7, #2]
   11828:	32e6      	adds	r2, #230	; 0xe6
   1182a:	1cfc      	adds	r4, r7, #3
   1182c:	7011      	strb	r1, [r2, #0]
   1182e:	2203      	movs	r2, #3
   11830:	4353      	muls	r3, r2
   11832:	18f3      	adds	r3, r6, r3
   11834:	3399      	adds	r3, #153	; 0x99
   11836:	32fc      	adds	r2, #252	; 0xfc
   11838:	701a      	strb	r2, [r3, #0]
   1183a:	e020      	b.n	1187e <MacExecuteCommands+0x8a>
   1183c:	0020      	movs	r0, r4
   1183e:	4b65      	ldr	r3, [pc, #404]	; (119d4 <MacExecuteCommands+0x1e0>)
   11840:	4798      	blx	r3
   11842:	0004      	movs	r4, r0
   11844:	e01b      	b.n	1187e <MacExecuteCommands+0x8a>
   11846:	0020      	movs	r0, r4
   11848:	4b63      	ldr	r3, [pc, #396]	; (119d8 <MacExecuteCommands+0x1e4>)
   1184a:	e7f9      	b.n	11840 <MacExecuteCommands+0x4c>
   1184c:	0020      	movs	r0, r4
   1184e:	4b63      	ldr	r3, [pc, #396]	; (119dc <MacExecuteCommands+0x1e8>)
   11850:	e7f6      	b.n	11840 <MacExecuteCommands+0x4c>
   11852:	0020      	movs	r0, r4
   11854:	4b62      	ldr	r3, [pc, #392]	; (119e0 <MacExecuteCommands+0x1ec>)
   11856:	e7f3      	b.n	11840 <MacExecuteCommands+0x4c>
   11858:	7878      	ldrb	r0, [r7, #1]
   1185a:	230f      	movs	r3, #15
   1185c:	0002      	movs	r2, r0
   1185e:	1cbc      	adds	r4, r7, #2
   11860:	439a      	bics	r2, r3
   11862:	d10c      	bne.n	1187e <MacExecuteCommands+0x8a>
   11864:	4b5f      	ldr	r3, [pc, #380]	; (119e4 <MacExecuteCommands+0x1f0>)
   11866:	4798      	blx	r3
   11868:	0032      	movs	r2, r6
   1186a:	2380      	movs	r3, #128	; 0x80
   1186c:	3284      	adds	r2, #132	; 0x84
   1186e:	7851      	ldrb	r1, [r2, #1]
   11870:	425b      	negs	r3, r3
   11872:	430b      	orrs	r3, r1
   11874:	7053      	strb	r3, [r2, #1]
   11876:	210b      	movs	r1, #11
   11878:	0028      	movs	r0, r5
   1187a:	4b5b      	ldr	r3, [pc, #364]	; (119e8 <MacExecuteCommands+0x1f4>)
   1187c:	4798      	blx	r3
   1187e:	0032      	movs	r2, r6
   11880:	2103      	movs	r1, #3
   11882:	32e0      	adds	r2, #224	; 0xe0
   11884:	7813      	ldrb	r3, [r2, #0]
   11886:	4359      	muls	r1, r3
   11888:	1876      	adds	r6, r6, r1
   1188a:	3699      	adds	r6, #153	; 0x99
   1188c:	7831      	ldrb	r1, [r6, #0]
   1188e:	29ff      	cmp	r1, #255	; 0xff
   11890:	d003      	beq.n	1189a <MacExecuteCommands+0xa6>
   11892:	2b0f      	cmp	r3, #15
   11894:	d801      	bhi.n	1189a <MacExecuteCommands+0xa6>
   11896:	3301      	adds	r3, #1
   11898:	7013      	strb	r3, [r2, #0]
   1189a:	0027      	movs	r7, r4
   1189c:	e7b2      	b.n	11804 <MacExecuteCommands+0x10>
   1189e:	0020      	movs	r0, r4
   118a0:	4b52      	ldr	r3, [pc, #328]	; (119ec <MacExecuteCommands+0x1f8>)
   118a2:	e7cd      	b.n	11840 <MacExecuteCommands+0x4c>
   118a4:	0020      	movs	r0, r4
   118a6:	4b52      	ldr	r3, [pc, #328]	; (119f0 <MacExecuteCommands+0x1fc>)
   118a8:	e7ca      	b.n	11840 <MacExecuteCommands+0x4c>
   118aa:	0020      	movs	r0, r4
   118ac:	4b51      	ldr	r3, [pc, #324]	; (119f4 <MacExecuteCommands+0x200>)
   118ae:	4798      	blx	r3
   118b0:	0033      	movs	r3, r6
   118b2:	33e0      	adds	r3, #224	; 0xe0
   118b4:	0004      	movs	r4, r0
   118b6:	781b      	ldrb	r3, [r3, #0]
   118b8:	e7b9      	b.n	1182e <MacExecuteCommands+0x3a>
   118ba:	2203      	movs	r2, #3
   118bc:	4353      	muls	r3, r2
   118be:	18f3      	adds	r3, r6, r3
   118c0:	3399      	adds	r3, #153	; 0x99
   118c2:	32fc      	adds	r2, #252	; 0xfc
   118c4:	701a      	strb	r2, [r3, #0]
   118c6:	9c01      	ldr	r4, [sp, #4]
   118c8:	9502      	str	r5, [sp, #8]
   118ca:	e7d8      	b.n	1187e <MacExecuteCommands+0x8a>
   118cc:	23ff      	movs	r3, #255	; 0xff
   118ce:	7013      	strb	r3, [r2, #0]
   118d0:	e7f9      	b.n	118c6 <MacExecuteCommands+0xd2>
   118d2:	9b02      	ldr	r3, [sp, #8]
   118d4:	2b00      	cmp	r3, #0
   118d6:	d199      	bne.n	1180c <MacExecuteCommands+0x18>
   118d8:	0033      	movs	r3, r6
   118da:	2203      	movs	r2, #3
   118dc:	33e0      	adds	r3, #224	; 0xe0
   118de:	781b      	ldrb	r3, [r3, #0]
   118e0:	2401      	movs	r4, #1
   118e2:	435a      	muls	r2, r3
   118e4:	18b2      	adds	r2, r6, r2
   118e6:	0010      	movs	r0, r2
   118e8:	3098      	adds	r0, #152	; 0x98
   118ea:	7881      	ldrb	r1, [r0, #2]
   118ec:	3299      	adds	r2, #153	; 0x99
   118ee:	43a9      	bics	r1, r5
   118f0:	4021      	ands	r1, r4
   118f2:	7081      	strb	r1, [r0, #2]
   118f4:	78c1      	ldrb	r1, [r0, #3]
   118f6:	193c      	adds	r4, r7, r4
   118f8:	43a9      	bics	r1, r5
   118fa:	70c1      	strb	r1, [r0, #3]
   118fc:	7839      	ldrb	r1, [r7, #0]
   118fe:	7011      	strb	r1, [r2, #0]
   11900:	7838      	ldrb	r0, [r7, #0]
   11902:	493d      	ldr	r1, [pc, #244]	; (119f8 <MacExecuteCommands+0x204>)
   11904:	1809      	adds	r1, r1, r0
   11906:	3902      	subs	r1, #2
   11908:	7809      	ldrb	r1, [r1, #0]
   1190a:	1861      	adds	r1, r4, r1
   1190c:	468c      	mov	ip, r1
   1190e:	9901      	ldr	r1, [sp, #4]
   11910:	4561      	cmp	r1, ip
   11912:	d3db      	bcc.n	118cc <MacExecuteCommands+0xd8>
   11914:	3802      	subs	r0, #2
   11916:	280b      	cmp	r0, #11
   11918:	d8cf      	bhi.n	118ba <MacExecuteCommands+0xc6>
   1191a:	f001 ff33 	bl	13784 <__gnu_thumb1_case_shi>
   1191e:	ff7f      	.short	0xff7f
   11920:	ff94ff8f 	.word	0xff94ff8f
   11924:	ffb0ff97 	.word	0xffb0ff97
   11928:	ff9dff9a 	.word	0xff9dff9a
   1192c:	ffc3ffc0 	.word	0xffc3ffc0
   11930:	ffceffce 	.word	0xffceffce
   11934:	ffc6      	.short	0xffc6
   11936:	4b31      	ldr	r3, [pc, #196]	; (119fc <MacExecuteCommands+0x208>)
   11938:	5cf3      	ldrb	r3, [r6, r3]
   1193a:	43db      	mvns	r3, r3
   1193c:	075b      	lsls	r3, r3, #29
   1193e:	d000      	beq.n	11942 <MacExecuteCommands+0x14e>
   11940:	e769      	b.n	11816 <MacExecuteCommands+0x22>
   11942:	4b2f      	ldr	r3, [pc, #188]	; (11a00 <MacExecuteCommands+0x20c>)
   11944:	ad05      	add	r5, sp, #20
   11946:	5cf4      	ldrb	r4, [r6, r3]
   11948:	2100      	movs	r1, #0
   1194a:	0724      	lsls	r4, r4, #28
   1194c:	0f24      	lsrs	r4, r4, #28
   1194e:	b2e3      	uxtb	r3, r4
   11950:	9301      	str	r3, [sp, #4]
   11952:	4b2c      	ldr	r3, [pc, #176]	; (11a04 <MacExecuteCommands+0x210>)
   11954:	002a      	movs	r2, r5
   11956:	5cf3      	ldrb	r3, [r6, r3]
   11958:	2014      	movs	r0, #20
   1195a:	9302      	str	r3, [sp, #8]
   1195c:	2389      	movs	r3, #137	; 0x89
   1195e:	009b      	lsls	r3, r3, #2
   11960:	5cf3      	ldrb	r3, [r6, r3]
   11962:	9303      	str	r3, [sp, #12]
   11964:	4b28      	ldr	r3, [pc, #160]	; (11a08 <MacExecuteCommands+0x214>)
   11966:	4798      	blx	r3
   11968:	0033      	movs	r3, r6
   1196a:	782a      	ldrb	r2, [r5, #0]
   1196c:	33f3      	adds	r3, #243	; 0xf3
   1196e:	701a      	strb	r2, [r3, #0]
   11970:	0033      	movs	r3, r6
   11972:	786a      	ldrb	r2, [r5, #1]
   11974:	33f4      	adds	r3, #244	; 0xf4
   11976:	701a      	strb	r2, [r3, #0]
   11978:	4b24      	ldr	r3, [pc, #144]	; (11a0c <MacExecuteCommands+0x218>)
   1197a:	4798      	blx	r3
   1197c:	9802      	ldr	r0, [sp, #8]
   1197e:	4b24      	ldr	r3, [pc, #144]	; (11a10 <MacExecuteCommands+0x21c>)
   11980:	4798      	blx	r3
   11982:	0032      	movs	r2, r6
   11984:	2308      	movs	r3, #8
   11986:	3284      	adds	r2, #132	; 0x84
   11988:	7851      	ldrb	r1, [r2, #1]
   1198a:	430b      	orrs	r3, r1
   1198c:	7053      	strb	r3, [r2, #1]
   1198e:	9803      	ldr	r0, [sp, #12]
   11990:	4b20      	ldr	r3, [pc, #128]	; (11a14 <MacExecuteCommands+0x220>)
   11992:	4798      	blx	r3
   11994:	0033      	movs	r3, r6
   11996:	b2e2      	uxtb	r2, r4
   11998:	33e1      	adds	r3, #225	; 0xe1
   1199a:	2a00      	cmp	r2, #0
   1199c:	d10e      	bne.n	119bc <MacExecuteCommands+0x1c8>
   1199e:	701c      	strb	r4, [r3, #0]
   119a0:	2113      	movs	r1, #19
   119a2:	4c11      	ldr	r4, [pc, #68]	; (119e8 <MacExecuteCommands+0x1f4>)
   119a4:	2000      	movs	r0, #0
   119a6:	47a0      	blx	r4
   119a8:	2210      	movs	r2, #16
   119aa:	4b08      	ldr	r3, [pc, #32]	; (119cc <MacExecuteCommands+0x1d8>)
   119ac:	2001      	movs	r0, #1
   119ae:	3384      	adds	r3, #132	; 0x84
   119b0:	7859      	ldrb	r1, [r3, #1]
   119b2:	430a      	orrs	r2, r1
   119b4:	705a      	strb	r2, [r3, #1]
   119b6:	210b      	movs	r1, #11
   119b8:	47a0      	blx	r4
   119ba:	e72c      	b.n	11816 <MacExecuteCommands+0x22>
   119bc:	9a01      	ldr	r2, [sp, #4]
   119be:	3a01      	subs	r2, #1
   119c0:	b2d2      	uxtb	r2, r2
   119c2:	701a      	strb	r2, [r3, #0]
   119c4:	0033      	movs	r3, r6
   119c6:	33e2      	adds	r3, #226	; 0xe2
   119c8:	701a      	strb	r2, [r3, #0]
   119ca:	e7e9      	b.n	119a0 <MacExecuteCommands+0x1ac>
   119cc:	20003348 	.word	0x20003348
   119d0:	00000226 	.word	0x00000226
   119d4:	00010955 	.word	0x00010955
   119d8:	00010819 	.word	0x00010819
   119dc:	0001071d 	.word	0x0001071d
   119e0:	00011665 	.word	0x00011665
   119e4:	0000fe49 	.word	0x0000fe49
   119e8:	00009759 	.word	0x00009759
   119ec:	00010905 	.word	0x00010905
   119f0:	00010851 	.word	0x00010851
   119f4:	00010a8d 	.word	0x00010a8d
   119f8:	000192db 	.word	0x000192db
   119fc:	00000223 	.word	0x00000223
   11a00:	00000229 	.word	0x00000229
   11a04:	00000225 	.word	0x00000225
   11a08:	0000d06d 	.word	0x0000d06d
   11a0c:	00011639 	.word	0x00011639
   11a10:	000105ad 	.word	0x000105ad
   11a14:	00010541 	.word	0x00010541

00011a18 <LorawanSetDataRange>:
   11a18:	2201      	movs	r2, #1
   11a1a:	b530      	push	{r4, r5, lr}
   11a1c:	b085      	sub	sp, #20
   11a1e:	ab01      	add	r3, sp, #4
   11a20:	ac02      	add	r4, sp, #8
   11a22:	7018      	strb	r0, [r3, #0]
   11a24:	7020      	strb	r0, [r4, #0]
   11a26:	7061      	strb	r1, [r4, #1]
   11a28:	2015      	movs	r0, #21
   11a2a:	0019      	movs	r1, r3
   11a2c:	4d11      	ldr	r5, [pc, #68]	; (11a74 <LorawanSetDataRange+0x5c>)
   11a2e:	705a      	strb	r2, [r3, #1]
   11a30:	47a8      	blx	r5
   11a32:	2808      	cmp	r0, #8
   11a34:	d003      	beq.n	11a3e <LorawanSetDataRange+0x26>
   11a36:	250a      	movs	r5, #10
   11a38:	0028      	movs	r0, r5
   11a3a:	b005      	add	sp, #20
   11a3c:	bd30      	pop	{r4, r5, pc}
   11a3e:	0021      	movs	r1, r4
   11a40:	2012      	movs	r0, #18
   11a42:	47a8      	blx	r5
   11a44:	0005      	movs	r5, r0
   11a46:	2808      	cmp	r0, #8
   11a48:	d1f5      	bne.n	11a36 <LorawanSetDataRange+0x1e>
   11a4a:	0021      	movs	r1, r4
   11a4c:	4b0a      	ldr	r3, [pc, #40]	; (11a78 <LorawanSetDataRange+0x60>)
   11a4e:	ac03      	add	r4, sp, #12
   11a50:	2012      	movs	r0, #18
   11a52:	4798      	blx	r3
   11a54:	0022      	movs	r2, r4
   11a56:	2100      	movs	r1, #0
   11a58:	4b08      	ldr	r3, [pc, #32]	; (11a7c <LorawanSetDataRange+0x64>)
   11a5a:	2014      	movs	r0, #20
   11a5c:	4798      	blx	r3
   11a5e:	4b08      	ldr	r3, [pc, #32]	; (11a80 <LorawanSetDataRange+0x68>)
   11a60:	7821      	ldrb	r1, [r4, #0]
   11a62:	001a      	movs	r2, r3
   11a64:	32f3      	adds	r2, #243	; 0xf3
   11a66:	7011      	strb	r1, [r2, #0]
   11a68:	7862      	ldrb	r2, [r4, #1]
   11a6a:	33f4      	adds	r3, #244	; 0xf4
   11a6c:	701a      	strb	r2, [r3, #0]
   11a6e:	4b05      	ldr	r3, [pc, #20]	; (11a84 <LorawanSetDataRange+0x6c>)
   11a70:	4798      	blx	r3
   11a72:	e7e1      	b.n	11a38 <LorawanSetDataRange+0x20>
   11a74:	0000d089 	.word	0x0000d089
   11a78:	0000d0a5 	.word	0x0000d0a5
   11a7c:	0000d06d 	.word	0x0000d06d
   11a80:	20003348 	.word	0x20003348
   11a84:	00011639 	.word	0x00011639

00011a88 <LorawanSetChannelIdStatus>:
   11a88:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11a8a:	466b      	mov	r3, sp
   11a8c:	7018      	strb	r0, [r3, #0]
   11a8e:	7059      	strb	r1, [r3, #1]
   11a90:	2016      	movs	r0, #22
   11a92:	4669      	mov	r1, sp
   11a94:	4b0c      	ldr	r3, [pc, #48]	; (11ac8 <LorawanSetChannelIdStatus+0x40>)
   11a96:	4798      	blx	r3
   11a98:	0004      	movs	r4, r0
   11a9a:	2808      	cmp	r0, #8
   11a9c:	d111      	bne.n	11ac2 <LorawanSetChannelIdStatus+0x3a>
   11a9e:	ad01      	add	r5, sp, #4
   11aa0:	002a      	movs	r2, r5
   11aa2:	2100      	movs	r1, #0
   11aa4:	4b09      	ldr	r3, [pc, #36]	; (11acc <LorawanSetChannelIdStatus+0x44>)
   11aa6:	2014      	movs	r0, #20
   11aa8:	4798      	blx	r3
   11aaa:	4b09      	ldr	r3, [pc, #36]	; (11ad0 <LorawanSetChannelIdStatus+0x48>)
   11aac:	7829      	ldrb	r1, [r5, #0]
   11aae:	001a      	movs	r2, r3
   11ab0:	32f3      	adds	r2, #243	; 0xf3
   11ab2:	7011      	strb	r1, [r2, #0]
   11ab4:	786a      	ldrb	r2, [r5, #1]
   11ab6:	33f4      	adds	r3, #244	; 0xf4
   11ab8:	701a      	strb	r2, [r3, #0]
   11aba:	4b06      	ldr	r3, [pc, #24]	; (11ad4 <LorawanSetChannelIdStatus+0x4c>)
   11abc:	4798      	blx	r3
   11abe:	0020      	movs	r0, r4
   11ac0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   11ac2:	240a      	movs	r4, #10
   11ac4:	e7fb      	b.n	11abe <LorawanSetChannelIdStatus+0x36>
   11ac6:	46c0      	nop			; (mov r8, r8)
   11ac8:	0000d0a5 	.word	0x0000d0a5
   11acc:	0000d06d 	.word	0x0000d06d
   11ad0:	20003348 	.word	0x20003348
   11ad4:	00011639 	.word	0x00011639

00011ad8 <LORAWAN_RxDone>:
   11ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
   11ada:	4bc4      	ldr	r3, [pc, #784]	; (11dec <LORAWAN_RxDone+0x314>)
   11adc:	b093      	sub	sp, #76	; 0x4c
   11ade:	781b      	ldrb	r3, [r3, #0]
   11ae0:	0007      	movs	r7, r0
   11ae2:	b25a      	sxtb	r2, r3
   11ae4:	9106      	str	r1, [sp, #24]
   11ae6:	4cc2      	ldr	r4, [pc, #776]	; (11df0 <LORAWAN_RxDone+0x318>)
   11ae8:	2a00      	cmp	r2, #0
   11aea:	da01      	bge.n	11af0 <LORAWAN_RxDone+0x18>
   11aec:	f000 fc86 	bl	123fc <LORAWAN_RxDone+0x924>
   11af0:	7801      	ldrb	r1, [r0, #0]
   11af2:	221f      	movs	r2, #31
   11af4:	000e      	movs	r6, r1
   11af6:	4396      	bics	r6, r2
   11af8:	2e20      	cmp	r6, #32
   11afa:	d000      	beq.n	11afe <LORAWAN_RxDone+0x26>
   11afc:	e1ae      	b.n	11e5c <LORAWAN_RxDone+0x384>
   11afe:	7822      	ldrb	r2, [r4, #0]
   11b00:	2a00      	cmp	r2, #0
   11b02:	d001      	beq.n	11b08 <LORAWAN_RxDone+0x30>
   11b04:	f000 fc66 	bl	123d4 <LORAWAN_RxDone+0x8fc>
   11b08:	0022      	movs	r2, r4
   11b0a:	3294      	adds	r2, #148	; 0x94
   11b0c:	7812      	ldrb	r2, [r2, #0]
   11b0e:	0752      	lsls	r2, r2, #29
   11b10:	d401      	bmi.n	11b16 <LORAWAN_RxDone+0x3e>
   11b12:	f000 fc5f 	bl	123d4 <LORAWAN_RxDone+0x8fc>
   11b16:	9b06      	ldr	r3, [sp, #24]
   11b18:	3b01      	subs	r3, #1
   11b1a:	b2db      	uxtb	r3, r3
   11b1c:	9307      	str	r3, [sp, #28]
   11b1e:	4bb5      	ldr	r3, [pc, #724]	; (11df4 <LORAWAN_RxDone+0x31c>)
   11b20:	469c      	mov	ip, r3
   11b22:	9b07      	ldr	r3, [sp, #28]
   11b24:	2b00      	cmp	r3, #0
   11b26:	d12c      	bne.n	11b82 <LORAWAN_RxDone+0xaa>
   11b28:	9b06      	ldr	r3, [sp, #24]
   11b2a:	4660      	mov	r0, ip
   11b2c:	1f1d      	subs	r5, r3, #4
   11b2e:	b2eb      	uxtb	r3, r5
   11b30:	9300      	str	r3, [sp, #0]
   11b32:	4ab1      	ldr	r2, [pc, #708]	; (11df8 <LORAWAN_RxDone+0x320>)
   11b34:	003b      	movs	r3, r7
   11b36:	9907      	ldr	r1, [sp, #28]
   11b38:	4eb0      	ldr	r6, [pc, #704]	; (11dfc <LORAWAN_RxDone+0x324>)
   11b3a:	47b0      	blx	r6
   11b3c:	2204      	movs	r2, #4
   11b3e:	49ae      	ldr	r1, [pc, #696]	; (11df8 <LORAWAN_RxDone+0x320>)
   11b40:	4baf      	ldr	r3, [pc, #700]	; (11e00 <LORAWAN_RxDone+0x328>)
   11b42:	a810      	add	r0, sp, #64	; 0x40
   11b44:	4798      	blx	r3
   11b46:	9e10      	ldr	r6, [sp, #64]	; 0x40
   11b48:	1979      	adds	r1, r7, r5
   11b4a:	2204      	movs	r2, #4
   11b4c:	4bac      	ldr	r3, [pc, #688]	; (11e00 <LORAWAN_RxDone+0x328>)
   11b4e:	a810      	add	r0, sp, #64	; 0x40
   11b50:	960d      	str	r6, [sp, #52]	; 0x34
   11b52:	4798      	blx	r3
   11b54:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11b56:	4ba6      	ldr	r3, [pc, #664]	; (11df0 <LORAWAN_RxDone+0x318>)
   11b58:	210e      	movs	r1, #14
   11b5a:	42b2      	cmp	r2, r6
   11b5c:	d029      	beq.n	11bb2 <LORAWAN_RxDone+0xda>
   11b5e:	001a      	movs	r2, r3
   11b60:	3284      	adds	r2, #132	; 0x84
   11b62:	7812      	ldrb	r2, [r2, #0]
   11b64:	400a      	ands	r2, r1
   11b66:	2a0a      	cmp	r2, #10
   11b68:	d005      	beq.n	11b76 <LORAWAN_RxDone+0x9e>
   11b6a:	2a06      	cmp	r2, #6
   11b6c:	d106      	bne.n	11b7c <LORAWAN_RxDone+0xa4>
   11b6e:	33f9      	adds	r3, #249	; 0xf9
   11b70:	781b      	ldrb	r3, [r3, #0]
   11b72:	2b00      	cmp	r3, #0
   11b74:	d002      	beq.n	11b7c <LORAWAN_RxDone+0xa4>
   11b76:	2018      	movs	r0, #24
   11b78:	4ba2      	ldr	r3, [pc, #648]	; (11e04 <LORAWAN_RxDone+0x32c>)
   11b7a:	4798      	blx	r3
   11b7c:	4ba2      	ldr	r3, [pc, #648]	; (11e08 <LORAWAN_RxDone+0x330>)
   11b7e:	4798      	blx	r3
   11b80:	e1d0      	b.n	11f24 <LORAWAN_RxDone+0x44c>
   11b82:	9b06      	ldr	r3, [sp, #24]
   11b84:	9a07      	ldr	r2, [sp, #28]
   11b86:	2100      	movs	r1, #0
   11b88:	1a98      	subs	r0, r3, r2
   11b8a:	1838      	adds	r0, r7, r0
   11b8c:	4662      	mov	r2, ip
   11b8e:	4b9f      	ldr	r3, [pc, #636]	; (11e0c <LORAWAN_RxDone+0x334>)
   11b90:	4798      	blx	r3
   11b92:	2800      	cmp	r0, #0
   11b94:	d006      	beq.n	11ba4 <LORAWAN_RxDone+0xcc>
   11b96:	4b9b      	ldr	r3, [pc, #620]	; (11e04 <LORAWAN_RxDone+0x32c>)
   11b98:	4798      	blx	r3
   11b9a:	4b9b      	ldr	r3, [pc, #620]	; (11e08 <LORAWAN_RxDone+0x330>)
   11b9c:	4798      	blx	r3
   11b9e:	201f      	movs	r0, #31
   11ba0:	b013      	add	sp, #76	; 0x4c
   11ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11ba4:	9b07      	ldr	r3, [sp, #28]
   11ba6:	2b10      	cmp	r3, #16
   11ba8:	d901      	bls.n	11bae <LORAWAN_RxDone+0xd6>
   11baa:	3b10      	subs	r3, #16
   11bac:	e7b5      	b.n	11b1a <LORAWAN_RxDone+0x42>
   11bae:	9007      	str	r0, [sp, #28]
   11bb0:	e7b5      	b.n	11b1e <LORAWAN_RxDone+0x46>
   11bb2:	001a      	movs	r2, r3
   11bb4:	3284      	adds	r2, #132	; 0x84
   11bb6:	7812      	ldrb	r2, [r2, #0]
   11bb8:	400a      	ands	r2, r1
   11bba:	2a06      	cmp	r2, #6
   11bbc:	d103      	bne.n	11bc6 <LORAWAN_RxDone+0xee>
   11bbe:	33ec      	adds	r3, #236	; 0xec
   11bc0:	7818      	ldrb	r0, [r3, #0]
   11bc2:	4b93      	ldr	r3, [pc, #588]	; (11e10 <LORAWAN_RxDone+0x338>)
   11bc4:	4798      	blx	r3
   11bc6:	7a3a      	ldrb	r2, [r7, #8]
   11bc8:	79fb      	ldrb	r3, [r7, #7]
   11bca:	0212      	lsls	r2, r2, #8
   11bcc:	431a      	orrs	r2, r3
   11bce:	7a7b      	ldrb	r3, [r7, #9]
   11bd0:	2001      	movs	r0, #1
   11bd2:	041b      	lsls	r3, r3, #16
   11bd4:	431a      	orrs	r2, r3
   11bd6:	7abb      	ldrb	r3, [r7, #10]
   11bd8:	061b      	lsls	r3, r3, #24
   11bda:	4313      	orrs	r3, r2
   11bdc:	0a19      	lsrs	r1, r3, #8
   11bde:	7063      	strb	r3, [r4, #1]
   11be0:	70a1      	strb	r1, [r4, #2]
   11be2:	0c19      	lsrs	r1, r3, #16
   11be4:	0e1b      	lsrs	r3, r3, #24
   11be6:	70e1      	strb	r1, [r4, #3]
   11be8:	7123      	strb	r3, [r4, #4]
   11bea:	240f      	movs	r4, #15
   11bec:	2103      	movs	r1, #3
   11bee:	4b89      	ldr	r3, [pc, #548]	; (11e14 <LORAWAN_RxDone+0x33c>)
   11bf0:	4798      	blx	r3
   11bf2:	7b38      	ldrb	r0, [r7, #12]
   11bf4:	4b88      	ldr	r3, [pc, #544]	; (11e18 <LORAWAN_RxDone+0x340>)
   11bf6:	4020      	ands	r0, r4
   11bf8:	4798      	blx	r3
   11bfa:	7af8      	ldrb	r0, [r7, #11]
   11bfc:	4b87      	ldr	r3, [pc, #540]	; (11e1c <LORAWAN_RxDone+0x344>)
   11bfe:	0641      	lsls	r1, r0, #25
   11c00:	0700      	lsls	r0, r0, #28
   11c02:	0f49      	lsrs	r1, r1, #29
   11c04:	0f00      	lsrs	r0, r0, #28
   11c06:	4798      	blx	r3
   11c08:	4b85      	ldr	r3, [pc, #532]	; (11e20 <LORAWAN_RxDone+0x348>)
   11c0a:	2100      	movs	r1, #0
   11c0c:	203b      	movs	r0, #59	; 0x3b
   11c0e:	4798      	blx	r3
   11c10:	9b06      	ldr	r3, [sp, #24]
   11c12:	2b21      	cmp	r3, #33	; 0x21
   11c14:	d000      	beq.n	11c18 <LORAWAN_RxDone+0x140>
   11c16:	e08c      	b.n	11d32 <LORAWAN_RxDone+0x25a>
   11c18:	251a      	movs	r5, #26
   11c1a:	ab04      	add	r3, sp, #16
   11c1c:	18ed      	adds	r5, r5, r3
   11c1e:	002a      	movs	r2, r5
   11c20:	4b80      	ldr	r3, [pc, #512]	; (11e24 <LORAWAN_RxDone+0x34c>)
   11c22:	4981      	ldr	r1, [pc, #516]	; (11e28 <LORAWAN_RxDone+0x350>)
   11c24:	2007      	movs	r0, #7
   11c26:	4798      	blx	r3
   11c28:	782b      	ldrb	r3, [r5, #0]
   11c2a:	2bff      	cmp	r3, #255	; 0xff
   11c2c:	d100      	bne.n	11c30 <LORAWAN_RxDone+0x158>
   11c2e:	e080      	b.n	11d32 <LORAWAN_RxDone+0x25a>
   11c30:	2350      	movs	r3, #80	; 0x50
   11c32:	43a3      	bics	r3, r4
   11c34:	9308      	str	r3, [sp, #32]
   11c36:	003b      	movs	r3, r7
   11c38:	330d      	adds	r3, #13
   11c3a:	9306      	str	r3, [sp, #24]
   11c3c:	2600      	movs	r6, #0
   11c3e:	2203      	movs	r2, #3
   11c40:	9906      	ldr	r1, [sp, #24]
   11c42:	4b6f      	ldr	r3, [pc, #444]	; (11e00 <LORAWAN_RxDone+0x328>)
   11c44:	a80e      	add	r0, sp, #56	; 0x38
   11c46:	960e      	str	r6, [sp, #56]	; 0x38
   11c48:	4798      	blx	r3
   11c4a:	2364      	movs	r3, #100	; 0x64
   11c4c:	990e      	ldr	r1, [sp, #56]	; 0x38
   11c4e:	aa04      	add	r2, sp, #16
   11c50:	4359      	muls	r1, r3
   11c52:	3b4a      	subs	r3, #74	; 0x4a
   11c54:	189b      	adds	r3, r3, r2
   11c56:	7818      	ldrb	r0, [r3, #0]
   11c58:	9b07      	ldr	r3, [sp, #28]
   11c5a:	910e      	str	r1, [sp, #56]	; 0x38
   11c5c:	1818      	adds	r0, r3, r0
   11c5e:	b2c0      	uxtb	r0, r0
   11c60:	76d0      	strb	r0, [r2, #27]
   11c62:	42b1      	cmp	r1, r6
   11c64:	d100      	bne.n	11c68 <LORAWAN_RxDone+0x190>
   11c66:	e0a7      	b.n	11db8 <LORAWAN_RxDone+0x2e0>
   11c68:	466b      	mov	r3, sp
   11c6a:	2220      	movs	r2, #32
   11c6c:	189b      	adds	r3, r3, r2
   11c6e:	781b      	ldrb	r3, [r3, #0]
   11c70:	ad10      	add	r5, sp, #64	; 0x40
   11c72:	ac0b      	add	r4, sp, #44	; 0x2c
   11c74:	7128      	strb	r0, [r5, #4]
   11c76:	9110      	str	r1, [sp, #64]	; 0x40
   11c78:	7020      	strb	r0, [r4, #0]
   11c7a:	7063      	strb	r3, [r4, #1]
   11c7c:	0029      	movs	r1, r5
   11c7e:	2002      	movs	r0, #2
   11c80:	4b6a      	ldr	r3, [pc, #424]	; (11e2c <LORAWAN_RxDone+0x354>)
   11c82:	4798      	blx	r3
   11c84:	2808      	cmp	r0, #8
   11c86:	d140      	bne.n	11d0a <LORAWAN_RxDone+0x232>
   11c88:	0029      	movs	r1, r5
   11c8a:	0030      	movs	r0, r6
   11c8c:	4b64      	ldr	r3, [pc, #400]	; (11e20 <LORAWAN_RxDone+0x348>)
   11c8e:	4798      	blx	r3
   11c90:	ad0c      	add	r5, sp, #48	; 0x30
   11c92:	0021      	movs	r1, r4
   11c94:	4b62      	ldr	r3, [pc, #392]	; (11e20 <LORAWAN_RxDone+0x348>)
   11c96:	2012      	movs	r0, #18
   11c98:	4798      	blx	r3
   11c9a:	0031      	movs	r1, r6
   11c9c:	002a      	movs	r2, r5
   11c9e:	4e61      	ldr	r6, [pc, #388]	; (11e24 <LORAWAN_RxDone+0x34c>)
   11ca0:	2014      	movs	r0, #20
   11ca2:	47b0      	blx	r6
   11ca4:	4c52      	ldr	r4, [pc, #328]	; (11df0 <LORAWAN_RxDone+0x318>)
   11ca6:	782a      	ldrb	r2, [r5, #0]
   11ca8:	0023      	movs	r3, r4
   11caa:	33f3      	adds	r3, #243	; 0xf3
   11cac:	701a      	strb	r2, [r3, #0]
   11cae:	0023      	movs	r3, r4
   11cb0:	786a      	ldrb	r2, [r5, #1]
   11cb2:	2522      	movs	r5, #34	; 0x22
   11cb4:	33f4      	adds	r3, #244	; 0xf4
   11cb6:	701a      	strb	r2, [r3, #0]
   11cb8:	4b5d      	ldr	r3, [pc, #372]	; (11e30 <LORAWAN_RxDone+0x358>)
   11cba:	4798      	blx	r3
   11cbc:	ab04      	add	r3, sp, #16
   11cbe:	18ed      	adds	r5, r5, r3
   11cc0:	231b      	movs	r3, #27
   11cc2:	a904      	add	r1, sp, #16
   11cc4:	185b      	adds	r3, r3, r1
   11cc6:	0019      	movs	r1, r3
   11cc8:	002a      	movs	r2, r5
   11cca:	201e      	movs	r0, #30
   11ccc:	47b0      	blx	r6
   11cce:	0023      	movs	r3, r4
   11cd0:	33ff      	adds	r3, #255	; 0xff
   11cd2:	7f5b      	ldrb	r3, [r3, #29]
   11cd4:	079b      	lsls	r3, r3, #30
   11cd6:	d508      	bpl.n	11cea <LORAWAN_RxDone+0x212>
   11cd8:	ab04      	add	r3, sp, #16
   11cda:	7edb      	ldrb	r3, [r3, #27]
   11cdc:	a90f      	add	r1, sp, #60	; 0x3c
   11cde:	708b      	strb	r3, [r1, #2]
   11ce0:	882b      	ldrh	r3, [r5, #0]
   11ce2:	201e      	movs	r0, #30
   11ce4:	800b      	strh	r3, [r1, #0]
   11ce6:	4b4e      	ldr	r3, [pc, #312]	; (11e20 <LORAWAN_RxDone+0x348>)
   11ce8:	4798      	blx	r3
   11cea:	231b      	movs	r3, #27
   11cec:	aa04      	add	r2, sp, #16
   11cee:	189b      	adds	r3, r3, r2
   11cf0:	7818      	ldrb	r0, [r3, #0]
   11cf2:	2101      	movs	r1, #1
   11cf4:	4b4f      	ldr	r3, [pc, #316]	; (11e34 <LORAWAN_RxDone+0x35c>)
   11cf6:	4798      	blx	r3
   11cf8:	2204      	movs	r2, #4
   11cfa:	3484      	adds	r4, #132	; 0x84
   11cfc:	7863      	ldrb	r3, [r4, #1]
   11cfe:	210b      	movs	r1, #11
   11d00:	4313      	orrs	r3, r2
   11d02:	7063      	strb	r3, [r4, #1]
   11d04:	2001      	movs	r0, #1
   11d06:	4b43      	ldr	r3, [pc, #268]	; (11e14 <LORAWAN_RxDone+0x33c>)
   11d08:	4798      	blx	r3
   11d0a:	9b07      	ldr	r3, [sp, #28]
   11d0c:	3301      	adds	r3, #1
   11d0e:	b2db      	uxtb	r3, r3
   11d10:	9307      	str	r3, [sp, #28]
   11d12:	9b06      	ldr	r3, [sp, #24]
   11d14:	3303      	adds	r3, #3
   11d16:	9306      	str	r3, [sp, #24]
   11d18:	9b07      	ldr	r3, [sp, #28]
   11d1a:	2b05      	cmp	r3, #5
   11d1c:	d18e      	bne.n	11c3c <LORAWAN_RxDone+0x164>
   11d1e:	2204      	movs	r2, #4
   11d20:	4b33      	ldr	r3, [pc, #204]	; (11df0 <LORAWAN_RxDone+0x318>)
   11d22:	2001      	movs	r0, #1
   11d24:	3384      	adds	r3, #132	; 0x84
   11d26:	7859      	ldrb	r1, [r3, #1]
   11d28:	430a      	orrs	r2, r1
   11d2a:	705a      	strb	r2, [r3, #1]
   11d2c:	210b      	movs	r1, #11
   11d2e:	4b39      	ldr	r3, [pc, #228]	; (11e14 <LORAWAN_RxDone+0x33c>)
   11d30:	4798      	blx	r3
   11d32:	4d41      	ldr	r5, [pc, #260]	; (11e38 <LORAWAN_RxDone+0x360>)
   11d34:	1c7e      	adds	r6, r7, #1
   11d36:	3704      	adds	r7, #4
   11d38:	0028      	movs	r0, r5
   11d3a:	003a      	movs	r2, r7
   11d3c:	0031      	movs	r1, r6
   11d3e:	4b3f      	ldr	r3, [pc, #252]	; (11e3c <LORAWAN_RxDone+0x364>)
   11d40:	4798      	blx	r3
   11d42:	2302      	movs	r3, #2
   11d44:	4c2a      	ldr	r4, [pc, #168]	; (11df0 <LORAWAN_RxDone+0x318>)
   11d46:	0028      	movs	r0, r5
   11d48:	7563      	strb	r3, [r4, #21]
   11d4a:	4a2a      	ldr	r2, [pc, #168]	; (11df4 <LORAWAN_RxDone+0x31c>)
   11d4c:	3b01      	subs	r3, #1
   11d4e:	2100      	movs	r1, #0
   11d50:	4d3b      	ldr	r5, [pc, #236]	; (11e40 <LORAWAN_RxDone+0x368>)
   11d52:	47a8      	blx	r5
   11d54:	2800      	cmp	r0, #0
   11d56:	d003      	beq.n	11d60 <LORAWAN_RxDone+0x288>
   11d58:	4b2a      	ldr	r3, [pc, #168]	; (11e04 <LORAWAN_RxDone+0x32c>)
   11d5a:	4798      	blx	r3
   11d5c:	4b2a      	ldr	r3, [pc, #168]	; (11e08 <LORAWAN_RxDone+0x330>)
   11d5e:	4798      	blx	r3
   11d60:	2105      	movs	r1, #5
   11d62:	4b2c      	ldr	r3, [pc, #176]	; (11e14 <LORAWAN_RxDone+0x33c>)
   11d64:	2001      	movs	r0, #1
   11d66:	4798      	blx	r3
   11d68:	4d36      	ldr	r5, [pc, #216]	; (11e44 <LORAWAN_RxDone+0x36c>)
   11d6a:	003a      	movs	r2, r7
   11d6c:	0028      	movs	r0, r5
   11d6e:	0031      	movs	r1, r6
   11d70:	4b32      	ldr	r3, [pc, #200]	; (11e3c <LORAWAN_RxDone+0x364>)
   11d72:	4798      	blx	r3
   11d74:	2301      	movs	r3, #1
   11d76:	0028      	movs	r0, r5
   11d78:	7163      	strb	r3, [r4, #5]
   11d7a:	4a1e      	ldr	r2, [pc, #120]	; (11df4 <LORAWAN_RxDone+0x31c>)
   11d7c:	18db      	adds	r3, r3, r3
   11d7e:	2100      	movs	r1, #0
   11d80:	4d2f      	ldr	r5, [pc, #188]	; (11e40 <LORAWAN_RxDone+0x368>)
   11d82:	47a8      	blx	r5
   11d84:	2800      	cmp	r0, #0
   11d86:	d003      	beq.n	11d90 <LORAWAN_RxDone+0x2b8>
   11d88:	4b1e      	ldr	r3, [pc, #120]	; (11e04 <LORAWAN_RxDone+0x32c>)
   11d8a:	4798      	blx	r3
   11d8c:	4b1e      	ldr	r3, [pc, #120]	; (11e08 <LORAWAN_RxDone+0x330>)
   11d8e:	4798      	blx	r3
   11d90:	4b20      	ldr	r3, [pc, #128]	; (11e14 <LORAWAN_RxDone+0x33c>)
   11d92:	2104      	movs	r1, #4
   11d94:	2001      	movs	r0, #1
   11d96:	4798      	blx	r3
   11d98:	4b2b      	ldr	r3, [pc, #172]	; (11e48 <LORAWAN_RxDone+0x370>)
   11d9a:	5ce3      	ldrb	r3, [r4, r3]
   11d9c:	2b00      	cmp	r3, #0
   11d9e:	d017      	beq.n	11dd0 <LORAWAN_RxDone+0x2f8>
   11da0:	492a      	ldr	r1, [pc, #168]	; (11e4c <LORAWAN_RxDone+0x374>)
   11da2:	2002      	movs	r0, #2
   11da4:	4c2a      	ldr	r4, [pc, #168]	; (11e50 <LORAWAN_RxDone+0x378>)
   11da6:	47a0      	blx	r4
   11da8:	2800      	cmp	r0, #0
   11daa:	d008      	beq.n	11dbe <LORAWAN_RxDone+0x2e6>
   11dac:	4b15      	ldr	r3, [pc, #84]	; (11e04 <LORAWAN_RxDone+0x32c>)
   11dae:	4798      	blx	r3
   11db0:	4b15      	ldr	r3, [pc, #84]	; (11e08 <LORAWAN_RxDone+0x330>)
   11db2:	4798      	blx	r3
   11db4:	2023      	movs	r0, #35	; 0x23
   11db6:	e6f3      	b.n	11ba0 <LORAWAN_RxDone+0xc8>
   11db8:	4b1e      	ldr	r3, [pc, #120]	; (11e34 <LORAWAN_RxDone+0x35c>)
   11dba:	4798      	blx	r3
   11dbc:	e7a5      	b.n	11d0a <LORAWAN_RxDone+0x232>
   11dbe:	4925      	ldr	r1, [pc, #148]	; (11e54 <LORAWAN_RxDone+0x37c>)
   11dc0:	2001      	movs	r0, #1
   11dc2:	47a0      	blx	r4
   11dc4:	2800      	cmp	r0, #0
   11dc6:	d1f1      	bne.n	11dac <LORAWAN_RxDone+0x2d4>
   11dc8:	4b23      	ldr	r3, [pc, #140]	; (11e58 <LORAWAN_RxDone+0x380>)
   11dca:	4798      	blx	r3
   11dcc:	2008      	movs	r0, #8
   11dce:	e6e7      	b.n	11ba0 <LORAWAN_RxDone+0xc8>
   11dd0:	0020      	movs	r0, r4
   11dd2:	0021      	movs	r1, r4
   11dd4:	2210      	movs	r2, #16
   11dd6:	3115      	adds	r1, #21
   11dd8:	4d09      	ldr	r5, [pc, #36]	; (11e00 <LORAWAN_RxDone+0x328>)
   11dda:	3035      	adds	r0, #53	; 0x35
   11ddc:	47a8      	blx	r5
   11dde:	0020      	movs	r0, r4
   11de0:	1d61      	adds	r1, r4, #5
   11de2:	2210      	movs	r2, #16
   11de4:	3025      	adds	r0, #37	; 0x25
   11de6:	47a8      	blx	r5
   11de8:	e7ee      	b.n	11dc8 <LORAWAN_RxDone+0x2f0>
   11dea:	46c0      	nop			; (mov r8, r8)
   11dec:	200033cc 	.word	0x200033cc
   11df0:	20003348 	.word	0x20003348
   11df4:	2000338d 	.word	0x2000338d
   11df8:	200020a5 	.word	0x200020a5
   11dfc:	00007885 	.word	0x00007885
   11e00:	00016a0f 	.word	0x00016a0f
   11e04:	000106b9 	.word	0x000106b9
   11e08:	0001156d 	.word	0x0001156d
   11e0c:	0000784d 	.word	0x0000784d
   11e10:	0000d8cd 	.word	0x0000d8cd
   11e14:	00009759 	.word	0x00009759
   11e18:	0000fe49 	.word	0x0000fe49
   11e1c:	0001055d 	.word	0x0001055d
   11e20:	0000d0a5 	.word	0x0000d0a5
   11e24:	0000d06d 	.word	0x0000d06d
   11e28:	2000342f 	.word	0x2000342f
   11e2c:	0000d089 	.word	0x0000d089
   11e30:	00011639 	.word	0x00011639
   11e34:	00011a89 	.word	0x00011a89
   11e38:	2000335d 	.word	0x2000335d
   11e3c:	00010175 	.word	0x00010175
   11e40:	00007875 	.word	0x00007875
   11e44:	2000334d 	.word	0x2000334d
   11e48:	0000022d 	.word	0x0000022d
   11e4c:	2000336d 	.word	0x2000336d
   11e50:	00007881 	.word	0x00007881
   11e54:	2000337d 	.word	0x2000337d
   11e58:	00010091 	.word	0x00010091
   11e5c:	22bf      	movs	r2, #191	; 0xbf
   11e5e:	3e60      	subs	r6, #96	; 0x60
   11e60:	4016      	ands	r6, r2
   11e62:	d000      	beq.n	11e66 <LORAWAN_RxDone+0x38e>
   11e64:	e2b6      	b.n	123d4 <LORAWAN_RxDone+0x8fc>
   11e66:	2501      	movs	r5, #1
   11e68:	422b      	tst	r3, r5
   11e6a:	d100      	bne.n	11e6e <LORAWAN_RxDone+0x396>
   11e6c:	e2b2      	b.n	123d4 <LORAWAN_RxDone+0x8fc>
   11e6e:	7922      	ldrb	r2, [r4, #4]
   11e70:	6823      	ldr	r3, [r4, #0]
   11e72:	0612      	lsls	r2, r2, #24
   11e74:	0a1b      	lsrs	r3, r3, #8
   11e76:	431a      	orrs	r2, r3
   11e78:	0023      	movs	r3, r4
   11e7a:	33e0      	adds	r3, #224	; 0xe0
   11e7c:	701e      	strb	r6, [r3, #0]
   11e7e:	9207      	str	r2, [sp, #28]
   11e80:	7882      	ldrb	r2, [r0, #2]
   11e82:	7843      	ldrb	r3, [r0, #1]
   11e84:	0212      	lsls	r2, r2, #8
   11e86:	431a      	orrs	r2, r3
   11e88:	78c3      	ldrb	r3, [r0, #3]
   11e8a:	041b      	lsls	r3, r3, #16
   11e8c:	431a      	orrs	r2, r3
   11e8e:	7903      	ldrb	r3, [r0, #4]
   11e90:	061b      	lsls	r3, r3, #24
   11e92:	4313      	orrs	r3, r2
   11e94:	9a07      	ldr	r2, [sp, #28]
   11e96:	429a      	cmp	r2, r3
   11e98:	d100      	bne.n	11e9c <LORAWAN_RxDone+0x3c4>
   11e9a:	e2cc      	b.n	12436 <LORAWAN_RxDone+0x95e>
   11e9c:	ab04      	add	r3, sp, #16
   11e9e:	3521      	adds	r5, #33	; 0x21
   11ea0:	18ed      	adds	r5, r5, r3
   11ea2:	7a02      	ldrb	r2, [r0, #8]
   11ea4:	0949      	lsrs	r1, r1, #5
   11ea6:	002b      	movs	r3, r5
   11ea8:	4eda      	ldr	r6, [pc, #872]	; (12214 <LORAWAN_RxDone+0x73c>)
   11eaa:	47b0      	blx	r6
   11eac:	2808      	cmp	r0, #8
   11eae:	d131      	bne.n	11f14 <LORAWAN_RxDone+0x43c>
   11eb0:	233c      	movs	r3, #60	; 0x3c
   11eb2:	7829      	ldrb	r1, [r5, #0]
   11eb4:	434b      	muls	r3, r1
   11eb6:	001d      	movs	r5, r3
   11eb8:	3535      	adds	r5, #53	; 0x35
   11eba:	35ff      	adds	r5, #255	; 0xff
   11ebc:	192d      	adds	r5, r5, r4
   11ebe:	18e4      	adds	r4, r4, r3
   11ec0:	0023      	movs	r3, r4
   11ec2:	33fc      	adds	r3, #252	; 0xfc
   11ec4:	6b58      	ldr	r0, [r3, #52]	; 0x34
   11ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   11ec8:	9308      	str	r3, [sp, #32]
   11eca:	79fb      	ldrb	r3, [r7, #7]
   11ecc:	79ba      	ldrb	r2, [r7, #6]
   11ece:	021b      	lsls	r3, r3, #8
   11ed0:	4313      	orrs	r3, r2
   11ed2:	0022      	movs	r2, r4
   11ed4:	3255      	adds	r2, #85	; 0x55
   11ed6:	32ff      	adds	r2, #255	; 0xff
   11ed8:	8816      	ldrh	r6, [r2, #0]
   11eda:	429e      	cmp	r6, r3
   11edc:	d908      	bls.n	11ef0 <LORAWAN_RxDone+0x418>
   11ede:	3457      	adds	r4, #87	; 0x57
   11ee0:	34ff      	adds	r4, #255	; 0xff
   11ee2:	8823      	ldrh	r3, [r4, #0]
   11ee4:	3301      	adds	r3, #1
   11ee6:	8023      	strh	r3, [r4, #0]
   11ee8:	79fb      	ldrb	r3, [r7, #7]
   11eea:	79bc      	ldrb	r4, [r7, #6]
   11eec:	021b      	lsls	r3, r3, #8
   11eee:	4323      	orrs	r3, r4
   11ef0:	8013      	strh	r3, [r2, #0]
   11ef2:	9b06      	ldr	r3, [sp, #24]
   11ef4:	9000      	str	r0, [sp, #0]
   11ef6:	1f1a      	subs	r2, r3, #4
   11ef8:	233c      	movs	r3, #60	; 0x3c
   11efa:	434b      	muls	r3, r1
   11efc:	49c6      	ldr	r1, [pc, #792]	; (12218 <LORAWAN_RxDone+0x740>)
   11efe:	b2d2      	uxtb	r2, r2
   11f00:	18c9      	adds	r1, r1, r3
   11f02:	31fc      	adds	r1, #252	; 0xfc
   11f04:	2349      	movs	r3, #73	; 0x49
   11f06:	6d89      	ldr	r1, [r1, #88]	; 0x58
   11f08:	2001      	movs	r0, #1
   11f0a:	4cc4      	ldr	r4, [pc, #784]	; (1221c <LORAWAN_RxDone+0x744>)
   11f0c:	47a0      	blx	r4
   11f0e:	2301      	movs	r3, #1
   11f10:	9307      	str	r3, [sp, #28]
   11f12:	e2a6      	b.n	12462 <LORAWAN_RxDone+0x98a>
   11f14:	220e      	movs	r2, #14
   11f16:	4bc2      	ldr	r3, [pc, #776]	; (12220 <LORAWAN_RxDone+0x748>)
   11f18:	781b      	ldrb	r3, [r3, #0]
   11f1a:	4013      	ands	r3, r2
   11f1c:	2b0a      	cmp	r3, #10
   11f1e:	d008      	beq.n	11f32 <LORAWAN_RxDone+0x45a>
   11f20:	2b06      	cmp	r3, #6
   11f22:	d001      	beq.n	11f28 <LORAWAN_RxDone+0x450>
   11f24:	200a      	movs	r0, #10
   11f26:	e63b      	b.n	11ba0 <LORAWAN_RxDone+0xc8>
   11f28:	0023      	movs	r3, r4
   11f2a:	33f9      	adds	r3, #249	; 0xf9
   11f2c:	781b      	ldrb	r3, [r3, #0]
   11f2e:	2b00      	cmp	r3, #0
   11f30:	d0f8      	beq.n	11f24 <LORAWAN_RxDone+0x44c>
   11f32:	2220      	movs	r2, #32
   11f34:	201e      	movs	r0, #30
   11f36:	3494      	adds	r4, #148	; 0x94
   11f38:	7823      	ldrb	r3, [r4, #0]
   11f3a:	4393      	bics	r3, r2
   11f3c:	7023      	strb	r3, [r4, #0]
   11f3e:	4bb9      	ldr	r3, [pc, #740]	; (12224 <LORAWAN_RxDone+0x74c>)
   11f40:	e61b      	b.n	11b7a <LORAWAN_RxDone+0xa2>
   11f42:	0022      	movs	r2, r4
   11f44:	2102      	movs	r1, #2
   11f46:	e2a6      	b.n	12496 <LORAWAN_RxDone+0x9be>
   11f48:	9b08      	ldr	r3, [sp, #32]
   11f4a:	328c      	adds	r2, #140	; 0x8c
   11f4c:	6013      	str	r3, [r2, #0]
   11f4e:	e2e3      	b.n	12518 <LORAWAN_RxDone+0xa40>
   11f50:	9b07      	ldr	r3, [sp, #28]
   11f52:	4cb1      	ldr	r4, [pc, #708]	; (12218 <LORAWAN_RxDone+0x740>)
   11f54:	2b00      	cmp	r3, #0
   11f56:	d000      	beq.n	11f5a <LORAWAN_RxDone+0x482>
   11f58:	e224      	b.n	123a4 <LORAWAN_RxDone+0x8cc>
   11f5a:	466a      	mov	r2, sp
   11f5c:	0023      	movs	r3, r4
   11f5e:	7f12      	ldrb	r2, [r2, #28]
   11f60:	33e3      	adds	r3, #227	; 0xe3
   11f62:	701a      	strb	r2, [r3, #0]
   11f64:	797b      	ldrb	r3, [r7, #5]
   11f66:	2b7f      	cmp	r3, #127	; 0x7f
   11f68:	d909      	bls.n	11f7e <LORAWAN_RxDone+0x4a6>
   11f6a:	0022      	movs	r2, r4
   11f6c:	2320      	movs	r3, #32
   11f6e:	3284      	adds	r2, #132	; 0x84
   11f70:	7811      	ldrb	r1, [r2, #0]
   11f72:	2001      	movs	r0, #1
   11f74:	430b      	orrs	r3, r1
   11f76:	7013      	strb	r3, [r2, #0]
   11f78:	210b      	movs	r1, #11
   11f7a:	4bab      	ldr	r3, [pc, #684]	; (12228 <LORAWAN_RxDone+0x750>)
   11f7c:	4798      	blx	r3
   11f7e:	797b      	ldrb	r3, [r7, #5]
   11f80:	06db      	lsls	r3, r3, #27
   11f82:	d505      	bpl.n	11f90 <LORAWAN_RxDone+0x4b8>
   11f84:	0022      	movs	r2, r4
   11f86:	2308      	movs	r3, #8
   11f88:	3294      	adds	r2, #148	; 0x94
   11f8a:	7811      	ldrb	r1, [r2, #0]
   11f8c:	430b      	orrs	r3, r1
   11f8e:	7013      	strb	r3, [r2, #0]
   11f90:	797b      	ldrb	r3, [r7, #5]
   11f92:	065b      	lsls	r3, r3, #25
   11f94:	d505      	bpl.n	11fa2 <LORAWAN_RxDone+0x4ca>
   11f96:	0022      	movs	r2, r4
   11f98:	2310      	movs	r3, #16
   11f9a:	3294      	adds	r2, #148	; 0x94
   11f9c:	7811      	ldrb	r1, [r2, #0]
   11f9e:	430b      	orrs	r3, r1
   11fa0:	7013      	strb	r3, [r2, #0]
   11fa2:	221f      	movs	r2, #31
   11fa4:	783b      	ldrb	r3, [r7, #0]
   11fa6:	4393      	bics	r3, r2
   11fa8:	2ba0      	cmp	r3, #160	; 0xa0
   11faa:	d105      	bne.n	11fb8 <LORAWAN_RxDone+0x4e0>
   11fac:	0022      	movs	r2, r4
   11fae:	3294      	adds	r2, #148	; 0x94
   11fb0:	7811      	ldrb	r1, [r2, #0]
   11fb2:	3b9e      	subs	r3, #158	; 0x9e
   11fb4:	430b      	orrs	r3, r1
   11fb6:	7013      	strb	r3, [r2, #0]
   11fb8:	7979      	ldrb	r1, [r7, #5]
   11fba:	070b      	lsls	r3, r1, #28
   11fbc:	d100      	bne.n	11fc0 <LORAWAN_RxDone+0x4e8>
   11fbe:	e0d4      	b.n	1216a <LORAWAN_RxDone+0x692>
   11fc0:	0709      	lsls	r1, r1, #28
   11fc2:	0f09      	lsrs	r1, r1, #28
   11fc4:	187b      	adds	r3, r7, r1
   11fc6:	7a1b      	ldrb	r3, [r3, #8]
   11fc8:	2b00      	cmp	r3, #0
   11fca:	d100      	bne.n	11fce <LORAWAN_RxDone+0x4f6>
   11fcc:	e0a9      	b.n	12122 <LORAWAN_RxDone+0x64a>
   11fce:	0038      	movs	r0, r7
   11fd0:	4b96      	ldr	r3, [pc, #600]	; (1222c <LORAWAN_RxDone+0x754>)
   11fd2:	3008      	adds	r0, #8
   11fd4:	4798      	blx	r3
   11fd6:	2301      	movs	r3, #1
   11fd8:	0006      	movs	r6, r0
   11fda:	9307      	str	r3, [sp, #28]
   11fdc:	7978      	ldrb	r0, [r7, #5]
   11fde:	9906      	ldr	r1, [sp, #24]
   11fe0:	0703      	lsls	r3, r0, #28
   11fe2:	0f1b      	lsrs	r3, r3, #28
   11fe4:	001a      	movs	r2, r3
   11fe6:	320c      	adds	r2, #12
   11fe8:	4291      	cmp	r1, r2
   11fea:	d100      	bne.n	11fee <LORAWAN_RxDone+0x516>
   11fec:	e0f1      	b.n	121d2 <LORAWAN_RxDone+0x6fa>
   11fee:	7832      	ldrb	r2, [r6, #0]
   11ff0:	1ac9      	subs	r1, r1, r3
   11ff2:	b2c9      	uxtb	r1, r1
   11ff4:	9208      	str	r2, [sp, #32]
   11ff6:	000a      	movs	r2, r1
   11ff8:	3319      	adds	r3, #25
   11ffa:	3a0c      	subs	r2, #12
   11ffc:	469c      	mov	ip, r3
   11ffe:	9b08      	ldr	r3, [sp, #32]
   12000:	b2d2      	uxtb	r2, r2
   12002:	9206      	str	r2, [sp, #24]
   12004:	1c75      	adds	r5, r6, #1
   12006:	4a84      	ldr	r2, [pc, #528]	; (12218 <LORAWAN_RxDone+0x740>)
   12008:	2b00      	cmp	r3, #0
   1200a:	d100      	bne.n	1200e <LORAWAN_RxDone+0x536>
   1200c:	e0b0      	b.n	12170 <LORAWAN_RxDone+0x698>
   1200e:	6813      	ldr	r3, [r2, #0]
   12010:	0010      	movs	r0, r2
   12012:	7912      	ldrb	r2, [r2, #4]
   12014:	0a1c      	lsrs	r4, r3, #8
   12016:	0612      	lsls	r2, r2, #24
   12018:	4322      	orrs	r2, r4
   1201a:	9204      	str	r2, [sp, #16]
   1201c:	4a84      	ldr	r2, [pc, #528]	; (12230 <LORAWAN_RxDone+0x758>)
   1201e:	4663      	mov	r3, ip
   12020:	9203      	str	r2, [sp, #12]
   12022:	466a      	mov	r2, sp
   12024:	8493      	strh	r3, [r2, #36]	; 0x24
   12026:	8c93      	ldrh	r3, [r2, #36]	; 0x24
   12028:	2201      	movs	r2, #1
   1202a:	9302      	str	r3, [sp, #8]
   1202c:	4b81      	ldr	r3, [pc, #516]	; (12234 <LORAWAN_RxDone+0x75c>)
   1202e:	308c      	adds	r0, #140	; 0x8c
   12030:	390d      	subs	r1, #13
   12032:	9201      	str	r2, [sp, #4]
   12034:	9300      	str	r3, [sp, #0]
   12036:	6803      	ldr	r3, [r0, #0]
   12038:	b2c9      	uxtb	r1, r1
   1203a:	0028      	movs	r0, r5
   1203c:	4c7e      	ldr	r4, [pc, #504]	; (12238 <LORAWAN_RxDone+0x760>)
   1203e:	47a0      	blx	r4
   12040:	2800      	cmp	r0, #0
   12042:	d004      	beq.n	1204e <LORAWAN_RxDone+0x576>
   12044:	4b7d      	ldr	r3, [pc, #500]	; (1223c <LORAWAN_RxDone+0x764>)
   12046:	4798      	blx	r3
   12048:	201f      	movs	r0, #31
   1204a:	4b76      	ldr	r3, [pc, #472]	; (12224 <LORAWAN_RxDone+0x74c>)
   1204c:	4798      	blx	r3
   1204e:	4c72      	ldr	r4, [pc, #456]	; (12218 <LORAWAN_RxDone+0x740>)
   12050:	2300      	movs	r3, #0
   12052:	0022      	movs	r2, r4
   12054:	32ca      	adds	r2, #202	; 0xca
   12056:	8013      	strh	r3, [r2, #0]
   12058:	0022      	movs	r2, r4
   1205a:	32f6      	adds	r2, #246	; 0xf6
   1205c:	7013      	strb	r3, [r2, #0]
   1205e:	0022      	movs	r2, r4
   12060:	2110      	movs	r1, #16
   12062:	3294      	adds	r2, #148	; 0x94
   12064:	7813      	ldrb	r3, [r2, #0]
   12066:	438b      	bics	r3, r1
   12068:	7013      	strb	r3, [r2, #0]
   1206a:	0023      	movs	r3, r4
   1206c:	2201      	movs	r2, #1
   1206e:	3384      	adds	r3, #132	; 0x84
   12070:	7859      	ldrb	r1, [r3, #1]
   12072:	430a      	orrs	r2, r1
   12074:	705a      	strb	r2, [r3, #1]
   12076:	220e      	movs	r2, #14
   12078:	781b      	ldrb	r3, [r3, #0]
   1207a:	4013      	ands	r3, r2
   1207c:	2b06      	cmp	r3, #6
   1207e:	d104      	bne.n	1208a <LORAWAN_RxDone+0x5b2>
   12080:	0023      	movs	r3, r4
   12082:	33ee      	adds	r3, #238	; 0xee
   12084:	7818      	ldrb	r0, [r3, #0]
   12086:	4b6e      	ldr	r3, [pc, #440]	; (12240 <LORAWAN_RxDone+0x768>)
   12088:	4798      	blx	r3
   1208a:	0025      	movs	r5, r4
   1208c:	2201      	movs	r2, #1
   1208e:	3594      	adds	r5, #148	; 0x94
   12090:	782b      	ldrb	r3, [r5, #0]
   12092:	4213      	tst	r3, r2
   12094:	d100      	bne.n	12098 <LORAWAN_RxDone+0x5c0>
   12096:	e107      	b.n	122a8 <LORAWAN_RxDone+0x7d0>
   12098:	797b      	ldrb	r3, [r7, #5]
   1209a:	321f      	adds	r2, #31
   1209c:	4213      	tst	r3, r2
   1209e:	d100      	bne.n	120a2 <LORAWAN_RxDone+0x5ca>
   120a0:	e0e8      	b.n	12274 <LORAWAN_RxDone+0x79c>
   120a2:	4b68      	ldr	r3, [pc, #416]	; (12244 <LORAWAN_RxDone+0x76c>)
   120a4:	4798      	blx	r3
   120a6:	0023      	movs	r3, r4
   120a8:	2101      	movs	r1, #1
   120aa:	3384      	adds	r3, #132	; 0x84
   120ac:	785a      	ldrb	r2, [r3, #1]
   120ae:	438a      	bics	r2, r1
   120b0:	705a      	strb	r2, [r3, #1]
   120b2:	9a08      	ldr	r2, [sp, #32]
   120b4:	2a00      	cmp	r2, #0
   120b6:	d100      	bne.n	120ba <LORAWAN_RxDone+0x5e2>
   120b8:	e093      	b.n	121e2 <LORAWAN_RxDone+0x70a>
   120ba:	9a06      	ldr	r2, [sp, #24]
   120bc:	0031      	movs	r1, r6
   120be:	0038      	movs	r0, r7
   120c0:	4b61      	ldr	r3, [pc, #388]	; (12248 <LORAWAN_RxDone+0x770>)
   120c2:	4798      	blx	r3
   120c4:	4b56      	ldr	r3, [pc, #344]	; (12220 <LORAWAN_RxDone+0x748>)
   120c6:	4d54      	ldr	r5, [pc, #336]	; (12218 <LORAWAN_RxDone+0x740>)
   120c8:	781b      	ldrb	r3, [r3, #0]
   120ca:	06db      	lsls	r3, r3, #27
   120cc:	d400      	bmi.n	120d0 <LORAWAN_RxDone+0x5f8>
   120ce:	e160      	b.n	12392 <LORAWAN_RxDone+0x8ba>
   120d0:	2220      	movs	r2, #32
   120d2:	4b5e      	ldr	r3, [pc, #376]	; (1224c <LORAWAN_RxDone+0x774>)
   120d4:	781b      	ldrb	r3, [r3, #0]
   120d6:	401a      	ands	r2, r3
   120d8:	9206      	str	r2, [sp, #24]
   120da:	d000      	beq.n	120de <LORAWAN_RxDone+0x606>
   120dc:	e159      	b.n	12392 <LORAWAN_RxDone+0x8ba>
   120de:	320a      	adds	r2, #10
   120e0:	4213      	tst	r3, r2
   120e2:	d100      	bne.n	120e6 <LORAWAN_RxDone+0x60e>
   120e4:	e155      	b.n	12392 <LORAWAN_RxDone+0x8ba>
   120e6:	002b      	movs	r3, r5
   120e8:	33f5      	adds	r3, #245	; 0xf5
   120ea:	781b      	ldrb	r3, [r3, #0]
   120ec:	a90f      	add	r1, sp, #60	; 0x3c
   120ee:	704b      	strb	r3, [r1, #1]
   120f0:	002e      	movs	r6, r5
   120f2:	2301      	movs	r3, #1
   120f4:	36e7      	adds	r6, #231	; 0xe7
   120f6:	700b      	strb	r3, [r1, #0]
   120f8:	7833      	ldrb	r3, [r6, #0]
   120fa:	aa0e      	add	r2, sp, #56	; 0x38
   120fc:	202f      	movs	r0, #47	; 0x2f
   120fe:	4f54      	ldr	r7, [pc, #336]	; (12250 <LORAWAN_RxDone+0x778>)
   12100:	708b      	strb	r3, [r1, #2]
   12102:	47b8      	blx	r7
   12104:	9007      	str	r0, [sp, #28]
   12106:	2808      	cmp	r0, #8
   12108:	d000      	beq.n	1210c <LORAWAN_RxDone+0x634>
   1210a:	e0fb      	b.n	12304 <LORAWAN_RxDone+0x82c>
   1210c:	4b51      	ldr	r3, [pc, #324]	; (12254 <LORAWAN_RxDone+0x77c>)
   1210e:	9806      	ldr	r0, [sp, #24]
   12110:	4798      	blx	r3
   12112:	4b4e      	ldr	r3, [pc, #312]	; (1224c <LORAWAN_RxDone+0x774>)
   12114:	9a07      	ldr	r2, [sp, #28]
   12116:	781b      	ldrb	r3, [r3, #0]
   12118:	4393      	bics	r3, r2
   1211a:	4a4c      	ldr	r2, [pc, #304]	; (1224c <LORAWAN_RxDone+0x774>)
   1211c:	7013      	strb	r3, [r2, #0]
   1211e:	2001      	movs	r0, #1
   12120:	e53e      	b.n	11ba0 <LORAWAN_RxDone+0xc8>
   12122:	0023      	movs	r3, r4
   12124:	220e      	movs	r2, #14
   12126:	3384      	adds	r3, #132	; 0x84
   12128:	781b      	ldrb	r3, [r3, #0]
   1212a:	4013      	ands	r3, r2
   1212c:	2b06      	cmp	r3, #6
   1212e:	d101      	bne.n	12134 <LORAWAN_RxDone+0x65c>
   12130:	4b49      	ldr	r3, [pc, #292]	; (12258 <LORAWAN_RxDone+0x780>)
   12132:	4798      	blx	r3
   12134:	4949      	ldr	r1, [pc, #292]	; (1225c <LORAWAN_RxDone+0x784>)
   12136:	784a      	ldrb	r2, [r1, #1]
   12138:	780b      	ldrb	r3, [r1, #0]
   1213a:	0212      	lsls	r2, r2, #8
   1213c:	431a      	orrs	r2, r3
   1213e:	788b      	ldrb	r3, [r1, #2]
   12140:	041b      	lsls	r3, r3, #16
   12142:	431a      	orrs	r2, r3
   12144:	78cb      	ldrb	r3, [r1, #3]
   12146:	061b      	lsls	r3, r3, #24
   12148:	4313      	orrs	r3, r2
   1214a:	d008      	beq.n	1215e <LORAWAN_RxDone+0x686>
   1214c:	0022      	movs	r2, r4
   1214e:	2120      	movs	r1, #32
   12150:	3294      	adds	r2, #148	; 0x94
   12152:	7813      	ldrb	r3, [r2, #0]
   12154:	201e      	movs	r0, #30
   12156:	438b      	bics	r3, r1
   12158:	7013      	strb	r3, [r2, #0]
   1215a:	4b32      	ldr	r3, [pc, #200]	; (12224 <LORAWAN_RxDone+0x74c>)
   1215c:	4798      	blx	r3
   1215e:	2300      	movs	r3, #0
   12160:	34e0      	adds	r4, #224	; 0xe0
   12162:	7023      	strb	r3, [r4, #0]
   12164:	4b35      	ldr	r3, [pc, #212]	; (1223c <LORAWAN_RxDone+0x764>)
   12166:	4798      	blx	r3
   12168:	e7d9      	b.n	1211e <LORAWAN_RxDone+0x646>
   1216a:	003e      	movs	r6, r7
   1216c:	3608      	adds	r6, #8
   1216e:	e735      	b.n	11fdc <LORAWAN_RxDone+0x504>
   12170:	9b06      	ldr	r3, [sp, #24]
   12172:	2b00      	cmp	r3, #0
   12174:	d031      	beq.n	121da <LORAWAN_RxDone+0x702>
   12176:	0703      	lsls	r3, r0, #28
   12178:	d1d3      	bne.n	12122 <LORAWAN_RxDone+0x64a>
   1217a:	390d      	subs	r1, #13
   1217c:	6813      	ldr	r3, [r2, #0]
   1217e:	b2cc      	uxtb	r4, r1
   12180:	0011      	movs	r1, r2
   12182:	7912      	ldrb	r2, [r2, #4]
   12184:	0a18      	lsrs	r0, r3, #8
   12186:	0612      	lsls	r2, r2, #24
   12188:	4302      	orrs	r2, r0
   1218a:	9204      	str	r2, [sp, #16]
   1218c:	4a28      	ldr	r2, [pc, #160]	; (12230 <LORAWAN_RxDone+0x758>)
   1218e:	4663      	mov	r3, ip
   12190:	9203      	str	r2, [sp, #12]
   12192:	466a      	mov	r2, sp
   12194:	8313      	strh	r3, [r2, #24]
   12196:	8b13      	ldrh	r3, [r2, #24]
   12198:	318c      	adds	r1, #140	; 0x8c
   1219a:	9302      	str	r3, [sp, #8]
   1219c:	2302      	movs	r3, #2
   1219e:	9301      	str	r3, [sp, #4]
   121a0:	4b2f      	ldr	r3, [pc, #188]	; (12260 <LORAWAN_RxDone+0x788>)
   121a2:	2201      	movs	r2, #1
   121a4:	9300      	str	r3, [sp, #0]
   121a6:	680b      	ldr	r3, [r1, #0]
   121a8:	0028      	movs	r0, r5
   121aa:	0021      	movs	r1, r4
   121ac:	4e22      	ldr	r6, [pc, #136]	; (12238 <LORAWAN_RxDone+0x760>)
   121ae:	47b0      	blx	r6
   121b0:	2800      	cmp	r0, #0
   121b2:	d004      	beq.n	121be <LORAWAN_RxDone+0x6e6>
   121b4:	4b21      	ldr	r3, [pc, #132]	; (1223c <LORAWAN_RxDone+0x764>)
   121b6:	4798      	blx	r3
   121b8:	201f      	movs	r0, #31
   121ba:	4b1a      	ldr	r3, [pc, #104]	; (12224 <LORAWAN_RxDone+0x74c>)
   121bc:	4798      	blx	r3
   121be:	4b1b      	ldr	r3, [pc, #108]	; (1222c <LORAWAN_RxDone+0x754>)
   121c0:	0021      	movs	r1, r4
   121c2:	0028      	movs	r0, r5
   121c4:	4798      	blx	r3
   121c6:	2300      	movs	r3, #0
   121c8:	9306      	str	r3, [sp, #24]
   121ca:	3301      	adds	r3, #1
   121cc:	9307      	str	r3, [sp, #28]
   121ce:	2600      	movs	r6, #0
   121d0:	e73d      	b.n	1204e <LORAWAN_RxDone+0x576>
   121d2:	2600      	movs	r6, #0
   121d4:	9608      	str	r6, [sp, #32]
   121d6:	9606      	str	r6, [sp, #24]
   121d8:	e739      	b.n	1204e <LORAWAN_RxDone+0x576>
   121da:	9b06      	ldr	r3, [sp, #24]
   121dc:	9308      	str	r3, [sp, #32]
   121de:	001e      	movs	r6, r3
   121e0:	e735      	b.n	1204e <LORAWAN_RxDone+0x576>
   121e2:	2120      	movs	r1, #32
   121e4:	782a      	ldrb	r2, [r5, #0]
   121e6:	438a      	bics	r2, r1
   121e8:	702a      	strb	r2, [r5, #0]
   121ea:	0022      	movs	r2, r4
   121ec:	32fd      	adds	r2, #253	; 0xfd
   121ee:	7812      	ldrb	r2, [r2, #0]
   121f0:	2a01      	cmp	r2, #1
   121f2:	d137      	bne.n	12264 <LORAWAN_RxDone+0x78c>
   121f4:	781a      	ldrb	r2, [r3, #0]
   121f6:	3912      	subs	r1, #18
   121f8:	438a      	bics	r2, r1
   121fa:	701a      	strb	r2, [r3, #0]
   121fc:	2388      	movs	r3, #136	; 0x88
   121fe:	4a06      	ldr	r2, [pc, #24]	; (12218 <LORAWAN_RxDone+0x740>)
   12200:	009b      	lsls	r3, r3, #2
   12202:	5cd3      	ldrb	r3, [r2, r3]
   12204:	2b00      	cmp	r3, #0
   12206:	d000      	beq.n	1220a <LORAWAN_RxDone+0x732>
   12208:	e75c      	b.n	120c4 <LORAWAN_RxDone+0x5ec>
   1220a:	2008      	movs	r0, #8
   1220c:	4b05      	ldr	r3, [pc, #20]	; (12224 <LORAWAN_RxDone+0x74c>)
   1220e:	4798      	blx	r3
   12210:	e758      	b.n	120c4 <LORAWAN_RxDone+0x5ec>
   12212:	46c0      	nop			; (mov r8, r8)
   12214:	0001310d 	.word	0x0001310d
   12218:	20003348 	.word	0x20003348
   1221c:	000101b1 	.word	0x000101b1
   12220:	200033cc 	.word	0x200033cc
   12224:	00011059 	.word	0x00011059
   12228:	00009759 	.word	0x00009759
   1222c:	000117f5 	.word	0x000117f5
   12230:	2000310c 	.word	0x2000310c
   12234:	2000337d 	.word	0x2000337d
   12238:	00010f99 	.word	0x00010f99
   1223c:	0001156d 	.word	0x0001156d
   12240:	0000d8cd 	.word	0x0000d8cd
   12244:	00010665 	.word	0x00010665
   12248:	00011109 	.word	0x00011109
   1224c:	200033dc 	.word	0x200033dc
   12250:	0000d06d 	.word	0x0000d06d
   12254:	00010319 	.word	0x00010319
   12258:	00010249 	.word	0x00010249
   1225c:	200036a4 	.word	0x200036a4
   12260:	2000336d 	.word	0x2000336d
   12264:	2a04      	cmp	r2, #4
   12266:	d1c9      	bne.n	121fc <LORAWAN_RxDone+0x724>
   12268:	0023      	movs	r3, r4
   1226a:	33f1      	adds	r3, #241	; 0xf1
   1226c:	7818      	ldrb	r0, [r3, #0]
   1226e:	4bab      	ldr	r3, [pc, #684]	; (1251c <LORAWAN_RxDone+0xa44>)
   12270:	4798      	blx	r3
   12272:	e7c3      	b.n	121fc <LORAWAN_RxDone+0x724>
   12274:	9b07      	ldr	r3, [sp, #28]
   12276:	2b00      	cmp	r3, #0
   12278:	d013      	beq.n	122a2 <LORAWAN_RxDone+0x7ca>
   1227a:	0023      	movs	r3, r4
   1227c:	33fd      	adds	r3, #253	; 0xfd
   1227e:	781e      	ldrb	r6, [r3, #0]
   12280:	2e01      	cmp	r6, #1
   12282:	d10e      	bne.n	122a2 <LORAWAN_RxDone+0x7ca>
   12284:	4ba6      	ldr	r3, [pc, #664]	; (12520 <LORAWAN_RxDone+0xa48>)
   12286:	4798      	blx	r3
   12288:	0022      	movs	r2, r4
   1228a:	3284      	adds	r2, #132	; 0x84
   1228c:	7853      	ldrb	r3, [r2, #1]
   1228e:	43b3      	bics	r3, r6
   12290:	7053      	strb	r3, [r2, #1]
   12292:	2220      	movs	r2, #32
   12294:	782b      	ldrb	r3, [r5, #0]
   12296:	4393      	bics	r3, r2
   12298:	702b      	strb	r3, [r5, #0]
   1229a:	2388      	movs	r3, #136	; 0x88
   1229c:	009b      	lsls	r3, r3, #2
   1229e:	5ce3      	ldrb	r3, [r4, r3]
   122a0:	e7b0      	b.n	12204 <LORAWAN_RxDone+0x72c>
   122a2:	4ba0      	ldr	r3, [pc, #640]	; (12524 <LORAWAN_RxDone+0xa4c>)
   122a4:	4798      	blx	r3
   122a6:	e70d      	b.n	120c4 <LORAWAN_RxDone+0x5ec>
   122a8:	9a08      	ldr	r2, [sp, #32]
   122aa:	2a00      	cmp	r2, #0
   122ac:	d00b      	beq.n	122c6 <LORAWAN_RxDone+0x7ee>
   122ae:	9a06      	ldr	r2, [sp, #24]
   122b0:	0031      	movs	r1, r6
   122b2:	0038      	movs	r0, r7
   122b4:	4b9c      	ldr	r3, [pc, #624]	; (12528 <LORAWAN_RxDone+0xa50>)
   122b6:	4798      	blx	r3
   122b8:	0022      	movs	r2, r4
   122ba:	2101      	movs	r1, #1
   122bc:	3284      	adds	r2, #132	; 0x84
   122be:	7853      	ldrb	r3, [r2, #1]
   122c0:	438b      	bics	r3, r1
   122c2:	7053      	strb	r3, [r2, #1]
   122c4:	e6fe      	b.n	120c4 <LORAWAN_RxDone+0x5ec>
   122c6:	2220      	movs	r2, #32
   122c8:	4393      	bics	r3, r2
   122ca:	702b      	strb	r3, [r5, #0]
   122cc:	0023      	movs	r3, r4
   122ce:	33fd      	adds	r3, #253	; 0xfd
   122d0:	781b      	ldrb	r3, [r3, #0]
   122d2:	2b01      	cmp	r3, #1
   122d4:	d10e      	bne.n	122f4 <LORAWAN_RxDone+0x81c>
   122d6:	0022      	movs	r2, r4
   122d8:	210e      	movs	r1, #14
   122da:	3284      	adds	r2, #132	; 0x84
   122dc:	7813      	ldrb	r3, [r2, #0]
   122de:	438b      	bics	r3, r1
   122e0:	7013      	strb	r3, [r2, #0]
   122e2:	2388      	movs	r3, #136	; 0x88
   122e4:	009b      	lsls	r3, r3, #2
   122e6:	5ce3      	ldrb	r3, [r4, r3]
   122e8:	2b00      	cmp	r3, #0
   122ea:	d1e5      	bne.n	122b8 <LORAWAN_RxDone+0x7e0>
   122ec:	2008      	movs	r0, #8
   122ee:	4b8f      	ldr	r3, [pc, #572]	; (1252c <LORAWAN_RxDone+0xa54>)
   122f0:	4798      	blx	r3
   122f2:	e7e1      	b.n	122b8 <LORAWAN_RxDone+0x7e0>
   122f4:	2b04      	cmp	r3, #4
   122f6:	d1f4      	bne.n	122e2 <LORAWAN_RxDone+0x80a>
   122f8:	0023      	movs	r3, r4
   122fa:	33f1      	adds	r3, #241	; 0xf1
   122fc:	7818      	ldrb	r0, [r3, #0]
   122fe:	4b87      	ldr	r3, [pc, #540]	; (1251c <LORAWAN_RxDone+0xa44>)
   12300:	4798      	blx	r3
   12302:	e7ee      	b.n	122e2 <LORAWAN_RxDone+0x80a>
   12304:	35ff      	adds	r5, #255	; 0xff
   12306:	7f6b      	ldrb	r3, [r5, #29]
   12308:	079a      	lsls	r2, r3, #30
   1230a:	d520      	bpl.n	1234e <LORAWAN_RxDone+0x876>
   1230c:	aa10      	add	r2, sp, #64	; 0x40
   1230e:	0031      	movs	r1, r6
   12310:	2026      	movs	r0, #38	; 0x26
   12312:	47b8      	blx	r7
   12314:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12316:	1c5a      	adds	r2, r3, #1
   12318:	d001      	beq.n	1231e <LORAWAN_RxDone+0x846>
   1231a:	3314      	adds	r3, #20
   1231c:	9310      	str	r3, [sp, #64]	; 0x40
   1231e:	0021      	movs	r1, r4
   12320:	220e      	movs	r2, #14
   12322:	3184      	adds	r1, #132	; 0x84
   12324:	780b      	ldrb	r3, [r1, #0]
   12326:	4393      	bics	r3, r2
   12328:	001a      	movs	r2, r3
   1232a:	230c      	movs	r3, #12
   1232c:	4313      	orrs	r3, r2
   1232e:	700b      	strb	r3, [r1, #0]
   12330:	4b7f      	ldr	r3, [pc, #508]	; (12530 <LORAWAN_RxDone+0xa58>)
   12332:	9a10      	ldr	r2, [sp, #64]	; 0x40
   12334:	5ce3      	ldrb	r3, [r4, r3]
   12336:	21fa      	movs	r1, #250	; 0xfa
   12338:	1ad3      	subs	r3, r2, r3
   1233a:	2200      	movs	r2, #0
   1233c:	0089      	lsls	r1, r1, #2
   1233e:	4359      	muls	r1, r3
   12340:	34ef      	adds	r4, #239	; 0xef
   12342:	4b7c      	ldr	r3, [pc, #496]	; (12534 <LORAWAN_RxDone+0xa5c>)
   12344:	7820      	ldrb	r0, [r4, #0]
   12346:	9200      	str	r2, [sp, #0]
   12348:	4c7b      	ldr	r4, [pc, #492]	; (12538 <LORAWAN_RxDone+0xa60>)
   1234a:	47a0      	blx	r4
   1234c:	e6e7      	b.n	1211e <LORAWAN_RxDone+0x646>
   1234e:	075b      	lsls	r3, r3, #29
   12350:	d400      	bmi.n	12354 <LORAWAN_RxDone+0x87c>
   12352:	e6e4      	b.n	1211e <LORAWAN_RxDone+0x646>
   12354:	aa10      	add	r2, sp, #64	; 0x40
   12356:	0031      	movs	r1, r6
   12358:	2032      	movs	r0, #50	; 0x32
   1235a:	47b8      	blx	r7
   1235c:	220e      	movs	r2, #14
   1235e:	4b77      	ldr	r3, [pc, #476]	; (1253c <LORAWAN_RxDone+0xa64>)
   12360:	781b      	ldrb	r3, [r3, #0]
   12362:	4393      	bics	r3, r2
   12364:	001a      	movs	r2, r3
   12366:	230c      	movs	r3, #12
   12368:	4313      	orrs	r3, r2
   1236a:	4a74      	ldr	r2, [pc, #464]	; (1253c <LORAWAN_RxDone+0xa64>)
   1236c:	7013      	strb	r3, [r2, #0]
   1236e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12370:	1c5a      	adds	r2, r3, #1
   12372:	d001      	beq.n	12378 <LORAWAN_RxDone+0x8a0>
   12374:	3301      	adds	r3, #1
   12376:	9310      	str	r3, [sp, #64]	; 0x40
   12378:	4b6d      	ldr	r3, [pc, #436]	; (12530 <LORAWAN_RxDone+0xa58>)
   1237a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1237c:	5ce3      	ldrb	r3, [r4, r3]
   1237e:	21fa      	movs	r1, #250	; 0xfa
   12380:	1ad3      	subs	r3, r2, r3
   12382:	2200      	movs	r2, #0
   12384:	0089      	lsls	r1, r1, #2
   12386:	34f2      	adds	r4, #242	; 0xf2
   12388:	4359      	muls	r1, r3
   1238a:	7820      	ldrb	r0, [r4, #0]
   1238c:	4b6c      	ldr	r3, [pc, #432]	; (12540 <LORAWAN_RxDone+0xa68>)
   1238e:	9200      	str	r2, [sp, #0]
   12390:	e7da      	b.n	12348 <LORAWAN_RxDone+0x870>
   12392:	35fd      	adds	r5, #253	; 0xfd
   12394:	782b      	ldrb	r3, [r5, #0]
   12396:	2b04      	cmp	r3, #4
   12398:	d000      	beq.n	1239c <LORAWAN_RxDone+0x8c4>
   1239a:	e6c0      	b.n	1211e <LORAWAN_RxDone+0x646>
   1239c:	0038      	movs	r0, r7
   1239e:	4b69      	ldr	r3, [pc, #420]	; (12544 <LORAWAN_RxDone+0xa6c>)
   123a0:	4798      	blx	r3
   123a2:	e6bc      	b.n	1211e <LORAWAN_RxDone+0x646>
   123a4:	2390      	movs	r3, #144	; 0x90
   123a6:	009b      	lsls	r3, r3, #2
   123a8:	5ce3      	ldrb	r3, [r4, r3]
   123aa:	2b00      	cmp	r3, #0
   123ac:	d009      	beq.n	123c2 <LORAWAN_RxDone+0x8ea>
   123ae:	2322      	movs	r3, #34	; 0x22
   123b0:	aa04      	add	r2, sp, #16
   123b2:	189b      	adds	r3, r3, r2
   123b4:	781b      	ldrb	r3, [r3, #0]
   123b6:	003a      	movs	r2, r7
   123b8:	9906      	ldr	r1, [sp, #24]
   123ba:	0038      	movs	r0, r7
   123bc:	4c62      	ldr	r4, [pc, #392]	; (12548 <LORAWAN_RxDone+0xa70>)
   123be:	47a0      	blx	r4
   123c0:	e6ad      	b.n	1211e <LORAWAN_RxDone+0x646>
   123c2:	2220      	movs	r2, #32
   123c4:	3494      	adds	r4, #148	; 0x94
   123c6:	7823      	ldrb	r3, [r4, #0]
   123c8:	201e      	movs	r0, #30
   123ca:	4393      	bics	r3, r2
   123cc:	7023      	strb	r3, [r4, #0]
   123ce:	4b57      	ldr	r3, [pc, #348]	; (1252c <LORAWAN_RxDone+0xa54>)
   123d0:	4798      	blx	r3
   123d2:	e6c7      	b.n	12164 <LORAWAN_RxDone+0x68c>
   123d4:	220e      	movs	r2, #14
   123d6:	4013      	ands	r3, r2
   123d8:	2b0a      	cmp	r3, #10
   123da:	d008      	beq.n	123ee <LORAWAN_RxDone+0x916>
   123dc:	2b06      	cmp	r3, #6
   123de:	d000      	beq.n	123e2 <LORAWAN_RxDone+0x90a>
   123e0:	e5a0      	b.n	11f24 <LORAWAN_RxDone+0x44c>
   123e2:	0023      	movs	r3, r4
   123e4:	33f9      	adds	r3, #249	; 0xf9
   123e6:	781b      	ldrb	r3, [r3, #0]
   123e8:	2b00      	cmp	r3, #0
   123ea:	d100      	bne.n	123ee <LORAWAN_RxDone+0x916>
   123ec:	e59a      	b.n	11f24 <LORAWAN_RxDone+0x44c>
   123ee:	2220      	movs	r2, #32
   123f0:	3494      	adds	r4, #148	; 0x94
   123f2:	7823      	ldrb	r3, [r4, #0]
   123f4:	2019      	movs	r0, #25
   123f6:	4393      	bics	r3, r2
   123f8:	7023      	strb	r3, [r4, #0]
   123fa:	e5a0      	b.n	11f3e <LORAWAN_RxDone+0x466>
   123fc:	4953      	ldr	r1, [pc, #332]	; (1254c <LORAWAN_RxDone+0xa74>)
   123fe:	784a      	ldrb	r2, [r1, #1]
   12400:	780b      	ldrb	r3, [r1, #0]
   12402:	0212      	lsls	r2, r2, #8
   12404:	431a      	orrs	r2, r3
   12406:	788b      	ldrb	r3, [r1, #2]
   12408:	041b      	lsls	r3, r3, #16
   1240a:	431a      	orrs	r2, r3
   1240c:	78cb      	ldrb	r3, [r1, #3]
   1240e:	061b      	lsls	r3, r3, #24
   12410:	4313      	orrs	r3, r2
   12412:	d100      	bne.n	12416 <LORAWAN_RxDone+0x93e>
   12414:	e683      	b.n	1211e <LORAWAN_RxDone+0x646>
   12416:	4b4e      	ldr	r3, [pc, #312]	; (12550 <LORAWAN_RxDone+0xa78>)
   12418:	4c4e      	ldr	r4, [pc, #312]	; (12554 <LORAWAN_RxDone+0xa7c>)
   1241a:	781b      	ldrb	r3, [r3, #0]
   1241c:	2b10      	cmp	r3, #16
   1241e:	d105      	bne.n	1242c <LORAWAN_RxDone+0x954>
   12420:	0001      	movs	r1, r0
   12422:	2000      	movs	r0, #0
   12424:	9a06      	ldr	r2, [sp, #24]
   12426:	3b0c      	subs	r3, #12
   12428:	47a0      	blx	r4
   1242a:	e678      	b.n	1211e <LORAWAN_RxDone+0x646>
   1242c:	2300      	movs	r3, #0
   1242e:	0001      	movs	r1, r0
   12430:	9a06      	ldr	r2, [sp, #24]
   12432:	0018      	movs	r0, r3
   12434:	e7f8      	b.n	12428 <LORAWAN_RxDone+0x950>
   12436:	348c      	adds	r4, #140	; 0x8c
   12438:	6823      	ldr	r3, [r4, #0]
   1243a:	0031      	movs	r1, r6
   1243c:	9308      	str	r3, [sp, #32]
   1243e:	4b46      	ldr	r3, [pc, #280]	; (12558 <LORAWAN_RxDone+0xa80>)
   12440:	4798      	blx	r3
   12442:	2808      	cmp	r0, #8
   12444:	d001      	beq.n	1244a <LORAWAN_RxDone+0x972>
   12446:	f7ff fbab 	bl	11ba0 <LORAWAN_RxDone+0xc8>
   1244a:	9b06      	ldr	r3, [sp, #24]
   1244c:	0028      	movs	r0, r5
   1244e:	1f1a      	subs	r2, r3, #4
   12450:	9b07      	ldr	r3, [sp, #28]
   12452:	b2d2      	uxtb	r2, r2
   12454:	9300      	str	r3, [sp, #0]
   12456:	6821      	ldr	r1, [r4, #0]
   12458:	2349      	movs	r3, #73	; 0x49
   1245a:	4c40      	ldr	r4, [pc, #256]	; (1255c <LORAWAN_RxDone+0xa84>)
   1245c:	47a0      	blx	r4
   1245e:	4d40      	ldr	r5, [pc, #256]	; (12560 <LORAWAN_RxDone+0xa88>)
   12460:	9607      	str	r6, [sp, #28]
   12462:	4e40      	ldr	r6, [pc, #256]	; (12564 <LORAWAN_RxDone+0xa8c>)
   12464:	4c40      	ldr	r4, [pc, #256]	; (12568 <LORAWAN_RxDone+0xa90>)
   12466:	2210      	movs	r2, #16
   12468:	0021      	movs	r1, r4
   1246a:	4b40      	ldr	r3, [pc, #256]	; (1256c <LORAWAN_RxDone+0xa94>)
   1246c:	0030      	movs	r0, r6
   1246e:	4798      	blx	r3
   12470:	9b06      	ldr	r3, [sp, #24]
   12472:	0039      	movs	r1, r7
   12474:	3b04      	subs	r3, #4
   12476:	001a      	movs	r2, r3
   12478:	9309      	str	r3, [sp, #36]	; 0x24
   1247a:	483d      	ldr	r0, [pc, #244]	; (12570 <LORAWAN_RxDone+0xa98>)
   1247c:	4b3b      	ldr	r3, [pc, #236]	; (1256c <LORAWAN_RxDone+0xa94>)
   1247e:	4798      	blx	r3
   12480:	9b06      	ldr	r3, [sp, #24]
   12482:	9a07      	ldr	r2, [sp, #28]
   12484:	330c      	adds	r3, #12
   12486:	b29b      	uxth	r3, r3
   12488:	9300      	str	r3, [sp, #0]
   1248a:	0033      	movs	r3, r6
   1248c:	2a00      	cmp	r2, #0
   1248e:	d100      	bne.n	12492 <LORAWAN_RxDone+0x9ba>
   12490:	e557      	b.n	11f42 <LORAWAN_RxDone+0x46a>
   12492:	0022      	movs	r2, r4
   12494:	2104      	movs	r1, #4
   12496:	4c37      	ldr	r4, [pc, #220]	; (12574 <LORAWAN_RxDone+0xa9c>)
   12498:	0028      	movs	r0, r5
   1249a:	47a0      	blx	r4
   1249c:	2204      	movs	r2, #4
   1249e:	4932      	ldr	r1, [pc, #200]	; (12568 <LORAWAN_RxDone+0xa90>)
   124a0:	4c32      	ldr	r4, [pc, #200]	; (1256c <LORAWAN_RxDone+0xa94>)
   124a2:	a80d      	add	r0, sp, #52	; 0x34
   124a4:	47a0      	blx	r4
   124a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   124a8:	2204      	movs	r2, #4
   124aa:	18f9      	adds	r1, r7, r3
   124ac:	a810      	add	r0, sp, #64	; 0x40
   124ae:	47a0      	blx	r4
   124b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   124b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   124b4:	4293      	cmp	r3, r2
   124b6:	d100      	bne.n	124ba <LORAWAN_RxDone+0x9e2>
   124b8:	e54a      	b.n	11f50 <LORAWAN_RxDone+0x478>
   124ba:	9b07      	ldr	r3, [sp, #28]
   124bc:	2b00      	cmp	r3, #0
   124be:	d108      	bne.n	124d2 <LORAWAN_RxDone+0x9fa>
   124c0:	220e      	movs	r2, #14
   124c2:	4b2d      	ldr	r3, [pc, #180]	; (12578 <LORAWAN_RxDone+0xaa0>)
   124c4:	3384      	adds	r3, #132	; 0x84
   124c6:	781b      	ldrb	r3, [r3, #0]
   124c8:	4013      	ands	r3, r2
   124ca:	2b06      	cmp	r3, #6
   124cc:	d101      	bne.n	124d2 <LORAWAN_RxDone+0x9fa>
   124ce:	4b2b      	ldr	r3, [pc, #172]	; (1257c <LORAWAN_RxDone+0xaa4>)
   124d0:	4798      	blx	r3
   124d2:	491e      	ldr	r1, [pc, #120]	; (1254c <LORAWAN_RxDone+0xa74>)
   124d4:	784a      	ldrb	r2, [r1, #1]
   124d6:	780b      	ldrb	r3, [r1, #0]
   124d8:	0212      	lsls	r2, r2, #8
   124da:	431a      	orrs	r2, r3
   124dc:	788b      	ldrb	r3, [r1, #2]
   124de:	041b      	lsls	r3, r3, #16
   124e0:	431a      	orrs	r2, r3
   124e2:	78cb      	ldrb	r3, [r1, #3]
   124e4:	061b      	lsls	r3, r3, #24
   124e6:	4313      	orrs	r3, r2
   124e8:	d101      	bne.n	124ee <LORAWAN_RxDone+0xa16>
   124ea:	f7ff fb47 	bl	11b7c <LORAWAN_RxDone+0xa4>
   124ee:	4a22      	ldr	r2, [pc, #136]	; (12578 <LORAWAN_RxDone+0xaa0>)
   124f0:	2020      	movs	r0, #32
   124f2:	0011      	movs	r1, r2
   124f4:	3194      	adds	r1, #148	; 0x94
   124f6:	780b      	ldrb	r3, [r1, #0]
   124f8:	4383      	bics	r3, r0
   124fa:	700b      	strb	r3, [r1, #0]
   124fc:	9b07      	ldr	r3, [sp, #28]
   124fe:	2b00      	cmp	r3, #0
   12500:	d100      	bne.n	12504 <LORAWAN_RxDone+0xa2c>
   12502:	e521      	b.n	11f48 <LORAWAN_RxDone+0x470>
   12504:	2322      	movs	r3, #34	; 0x22
   12506:	a904      	add	r1, sp, #16
   12508:	185b      	adds	r3, r3, r1
   1250a:	7819      	ldrb	r1, [r3, #0]
   1250c:	233c      	movs	r3, #60	; 0x3c
   1250e:	434b      	muls	r3, r1
   12510:	18d3      	adds	r3, r2, r3
   12512:	9a08      	ldr	r2, [sp, #32]
   12514:	33fc      	adds	r3, #252	; 0xfc
   12516:	659a      	str	r2, [r3, #88]	; 0x58
   12518:	2018      	movs	r0, #24
   1251a:	e510      	b.n	11f3e <LORAWAN_RxDone+0x466>
   1251c:	0000d8cd 	.word	0x0000d8cd
   12520:	00010665 	.word	0x00010665
   12524:	000105c9 	.word	0x000105c9
   12528:	00011109 	.word	0x00011109
   1252c:	00011059 	.word	0x00011059
   12530:	0000022b 	.word	0x0000022b
   12534:	00010411 	.word	0x00010411
   12538:	0000d5b5 	.word	0x0000d5b5
   1253c:	200033cc 	.word	0x200033cc
   12540:	00010e71 	.word	0x00010e71
   12544:	00012f8d 	.word	0x00012f8d
   12548:	00013181 	.word	0x00013181
   1254c:	200036a4 	.word	0x200036a4
   12550:	2000242b 	.word	0x2000242b
   12554:	000110bd 	.word	0x000110bd
   12558:	000115a9 	.word	0x000115a9
   1255c:	000101b1 	.word	0x000101b1
   12560:	2000336d 	.word	0x2000336d
   12564:	2000310c 	.word	0x2000310c
   12568:	200020a5 	.word	0x200020a5
   1256c:	00016a0f 	.word	0x00016a0f
   12570:	2000311c 	.word	0x2000311c
   12574:	00007885 	.word	0x00007885
   12578:	20003348 	.word	0x20003348
   1257c:	00010249 	.word	0x00010249

00012580 <LorawanSetEdClass>:
   12580:	2388      	movs	r3, #136	; 0x88
   12582:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12584:	4d1a      	ldr	r5, [pc, #104]	; (125f0 <LorawanSetEdClass+0x70>)
   12586:	009b      	lsls	r3, r3, #2
   12588:	5ceb      	ldrb	r3, [r5, r3]
   1258a:	0004      	movs	r4, r0
   1258c:	2011      	movs	r0, #17
   1258e:	2b00      	cmp	r3, #0
   12590:	d013      	beq.n	125ba <LorawanSetEdClass+0x3a>
   12592:	002b      	movs	r3, r5
   12594:	33fe      	adds	r3, #254	; 0xfe
   12596:	781b      	ldrb	r3, [r3, #0]
   12598:	3807      	subs	r0, #7
   1259a:	4223      	tst	r3, r4
   1259c:	d00d      	beq.n	125ba <LorawanSetEdClass+0x3a>
   1259e:	002b      	movs	r3, r5
   125a0:	33fd      	adds	r3, #253	; 0xfd
   125a2:	7819      	ldrb	r1, [r3, #0]
   125a4:	428c      	cmp	r4, r1
   125a6:	d007      	beq.n	125b8 <LorawanSetEdClass+0x38>
   125a8:	2901      	cmp	r1, #1
   125aa:	d107      	bne.n	125bc <LorawanSetEdClass+0x3c>
   125ac:	2c04      	cmp	r4, #4
   125ae:	d104      	bne.n	125ba <LorawanSetEdClass+0x3a>
   125b0:	701c      	strb	r4, [r3, #0]
   125b2:	2000      	movs	r0, #0
   125b4:	4b0f      	ldr	r3, [pc, #60]	; (125f4 <LorawanSetEdClass+0x74>)
   125b6:	4798      	blx	r3
   125b8:	2008      	movs	r0, #8
   125ba:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   125bc:	2904      	cmp	r1, #4
   125be:	d1fc      	bne.n	125ba <LorawanSetEdClass+0x3a>
   125c0:	2c01      	cmp	r4, #1
   125c2:	d1fa      	bne.n	125ba <LorawanSetEdClass+0x3a>
   125c4:	701c      	strb	r4, [r3, #0]
   125c6:	0021      	movs	r1, r4
   125c8:	4b0a      	ldr	r3, [pc, #40]	; (125f4 <LorawanSetEdClass+0x74>)
   125ca:	2000      	movs	r0, #0
   125cc:	4798      	blx	r3
   125ce:	002a      	movs	r2, r5
   125d0:	210e      	movs	r1, #14
   125d2:	3284      	adds	r2, #132	; 0x84
   125d4:	7813      	ldrb	r3, [r2, #0]
   125d6:	a801      	add	r0, sp, #4
   125d8:	438b      	bics	r3, r1
   125da:	7013      	strb	r3, [r2, #0]
   125dc:	4b06      	ldr	r3, [pc, #24]	; (125f8 <LorawanSetEdClass+0x78>)
   125de:	7004      	strb	r4, [r0, #0]
   125e0:	4798      	blx	r3
   125e2:	2394      	movs	r3, #148	; 0x94
   125e4:	005b      	lsls	r3, r3, #1
   125e6:	5ce8      	ldrb	r0, [r5, r3]
   125e8:	4b04      	ldr	r3, [pc, #16]	; (125fc <LorawanSetEdClass+0x7c>)
   125ea:	4798      	blx	r3
   125ec:	e7e4      	b.n	125b8 <LorawanSetEdClass+0x38>
   125ee:	46c0      	nop			; (mov r8, r8)
   125f0:	20003348 	.word	0x20003348
   125f4:	00009759 	.word	0x00009759
   125f8:	0000f789 	.word	0x0000f789
   125fc:	0000d8cd 	.word	0x0000d8cd

00012600 <LORAWAN_SetAttr>:
   12600:	2388      	movs	r3, #136	; 0x88
   12602:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12604:	4cbb      	ldr	r4, [pc, #748]	; (128f4 <LORAWAN_SetAttr+0x2f4>)
   12606:	009b      	lsls	r3, r3, #2
   12608:	5ce3      	ldrb	r3, [r4, r3]
   1260a:	000d      	movs	r5, r1
   1260c:	2611      	movs	r6, #17
   1260e:	2b00      	cmp	r3, #0
   12610:	d100      	bne.n	12614 <LORAWAN_SetAttr+0x14>
   12612:	e11f      	b.n	12854 <LORAWAN_SetAttr+0x254>
   12614:	2846      	cmp	r0, #70	; 0x46
   12616:	d878      	bhi.n	1270a <LORAWAN_SetAttr+0x10a>
   12618:	f001 f8be 	bl	13798 <__gnu_thumb1_case_uhi>
   1261c:	00930047 	.word	0x00930047
   12620:	00fc00b2 	.word	0x00fc00b2
   12624:	00e600c5 	.word	0x00e600c5
   12628:	0134011e 	.word	0x0134011e
   1262c:	01660154 	.word	0x01660154
   12630:	01830178 	.word	0x01830178
   12634:	01a6018d 	.word	0x01a6018d
   12638:	007701ab 	.word	0x007701ab
   1263c:	01b501b0 	.word	0x01b501b0
   12640:	01bf01ba 	.word	0x01bf01ba
   12644:	01e601c4 	.word	0x01e601c4
   12648:	01cb01eb 	.word	0x01cb01eb
   1264c:	01fc01c8 	.word	0x01fc01c8
   12650:	01e101f8 	.word	0x01e101f8
   12654:	01d701dd 	.word	0x01d701dd
   12658:	00770077 	.word	0x00770077
   1265c:	0077019e 	.word	0x0077019e
   12660:	00770077 	.word	0x00770077
   12664:	00770077 	.word	0x00770077
   12668:	02000077 	.word	0x02000077
   1266c:	02030066 	.word	0x02030066
   12670:	020d0211 	.word	0x020d0211
   12674:	00770208 	.word	0x00770208
   12678:	02190215 	.word	0x02190215
   1267c:	0221021d 	.word	0x0221021d
   12680:	02290225 	.word	0x02290225
   12684:	00770249 	.word	0x00770249
   12688:	00770077 	.word	0x00770077
   1268c:	00770077 	.word	0x00770077
   12690:	00770077 	.word	0x00770077
   12694:	00770077 	.word	0x00770077
   12698:	02600077 	.word	0x02600077
   1269c:	026e026a 	.word	0x026e026a
   126a0:	00770077 	.word	0x00770077
   126a4:	02730077 	.word	0x02730077
   126a8:	0271      	.short	0x0271
   126aa:	260a      	movs	r6, #10
   126ac:	2900      	cmp	r1, #0
   126ae:	d100      	bne.n	126b2 <LORAWAN_SetAttr+0xb2>
   126b0:	e0d0      	b.n	12854 <LORAWAN_SetAttr+0x254>
   126b2:	0020      	movs	r0, r4
   126b4:	2208      	movs	r2, #8
   126b6:	4b90      	ldr	r3, [pc, #576]	; (128f8 <LORAWAN_SetAttr+0x2f8>)
   126b8:	305d      	adds	r0, #93	; 0x5d
   126ba:	4798      	blx	r3
   126bc:	2108      	movs	r1, #8
   126be:	4e8f      	ldr	r6, [pc, #572]	; (128fc <LORAWAN_SetAttr+0x2fc>)
   126c0:	2001      	movs	r0, #1
   126c2:	47b0      	blx	r6
   126c4:	0022      	movs	r2, r4
   126c6:	2501      	movs	r5, #1
   126c8:	32de      	adds	r2, #222	; 0xde
   126ca:	7813      	ldrb	r3, [r2, #0]
   126cc:	2109      	movs	r1, #9
   126ce:	432b      	orrs	r3, r5
   126d0:	3484      	adds	r4, #132	; 0x84
   126d2:	0028      	movs	r0, r5
   126d4:	7013      	strb	r3, [r2, #0]
   126d6:	47b0      	blx	r6
   126d8:	7823      	ldrb	r3, [r4, #0]
   126da:	210b      	movs	r1, #11
   126dc:	43ab      	bics	r3, r5
   126de:	0028      	movs	r0, r5
   126e0:	7023      	strb	r3, [r4, #0]
   126e2:	47b0      	blx	r6
   126e4:	2608      	movs	r6, #8
   126e6:	e0b5      	b.n	12854 <LORAWAN_SetAttr+0x254>
   126e8:	0023      	movs	r3, r4
   126ea:	33ff      	adds	r3, #255	; 0xff
   126ec:	7f5b      	ldrb	r3, [r3, #29]
   126ee:	260a      	movs	r6, #10
   126f0:	075b      	lsls	r3, r3, #29
   126f2:	d400      	bmi.n	126f6 <LORAWAN_SetAttr+0xf6>
   126f4:	e0ae      	b.n	12854 <LORAWAN_SetAttr+0x254>
   126f6:	79ca      	ldrb	r2, [r1, #7]
   126f8:	4b81      	ldr	r3, [pc, #516]	; (12900 <LORAWAN_SetAttr+0x300>)
   126fa:	2a00      	cmp	r2, #0
   126fc:	d10e      	bne.n	1271c <LORAWAN_SetAttr+0x11c>
   126fe:	4669      	mov	r1, sp
   12700:	201d      	movs	r0, #29
   12702:	714a      	strb	r2, [r1, #5]
   12704:	4798      	blx	r3
   12706:	2800      	cmp	r0, #0
   12708:	d001      	beq.n	1270e <LORAWAN_SetAttr+0x10e>
   1270a:	260a      	movs	r6, #10
   1270c:	e0a2      	b.n	12854 <LORAWAN_SetAttr+0x254>
   1270e:	2109      	movs	r1, #9
   12710:	34fe      	adds	r4, #254	; 0xfe
   12712:	8460      	strh	r0, [r4, #34]	; 0x22
   12714:	8420      	strh	r0, [r4, #32]
   12716:	4b79      	ldr	r3, [pc, #484]	; (128fc <LORAWAN_SetAttr+0x2fc>)
   12718:	4798      	blx	r3
   1271a:	e7e3      	b.n	126e4 <LORAWAN_SetAttr+0xe4>
   1271c:	2002      	movs	r0, #2
   1271e:	5e2a      	ldrsh	r2, [r5, r0]
   12720:	88ae      	ldrh	r6, [r5, #4]
   12722:	79a8      	ldrb	r0, [r5, #6]
   12724:	466d      	mov	r5, sp
   12726:	806a      	strh	r2, [r5, #2]
   12728:	2201      	movs	r2, #1
   1272a:	8809      	ldrh	r1, [r1, #0]
   1272c:	7128      	strb	r0, [r5, #4]
   1272e:	8029      	strh	r1, [r5, #0]
   12730:	201d      	movs	r0, #29
   12732:	4669      	mov	r1, sp
   12734:	716a      	strb	r2, [r5, #5]
   12736:	4798      	blx	r3
   12738:	2800      	cmp	r0, #0
   1273a:	d1e6      	bne.n	1270a <LORAWAN_SetAttr+0x10a>
   1273c:	34fe      	adds	r4, #254	; 0xfe
   1273e:	8466      	strh	r6, [r4, #34]	; 0x22
   12740:	e7d0      	b.n	126e4 <LORAWAN_SetAttr+0xe4>
   12742:	260a      	movs	r6, #10
   12744:	2900      	cmp	r1, #0
   12746:	d100      	bne.n	1274a <LORAWAN_SetAttr+0x14a>
   12748:	e084      	b.n	12854 <LORAWAN_SetAttr+0x254>
   1274a:	0020      	movs	r0, r4
   1274c:	2208      	movs	r2, #8
   1274e:	4b6a      	ldr	r3, [pc, #424]	; (128f8 <LORAWAN_SetAttr+0x2f8>)
   12750:	3055      	adds	r0, #85	; 0x55
   12752:	4798      	blx	r3
   12754:	2107      	movs	r1, #7
   12756:	4d69      	ldr	r5, [pc, #420]	; (128fc <LORAWAN_SetAttr+0x2fc>)
   12758:	2001      	movs	r0, #1
   1275a:	47a8      	blx	r5
   1275c:	0022      	movs	r2, r4
   1275e:	2302      	movs	r3, #2
   12760:	32de      	adds	r2, #222	; 0xde
   12762:	7811      	ldrb	r1, [r2, #0]
   12764:	2001      	movs	r0, #1
   12766:	430b      	orrs	r3, r1
   12768:	2109      	movs	r1, #9
   1276a:	7013      	strb	r3, [r2, #0]
   1276c:	47a8      	blx	r5
   1276e:	2001      	movs	r0, #1
   12770:	3484      	adds	r4, #132	; 0x84
   12772:	7823      	ldrb	r3, [r4, #0]
   12774:	210b      	movs	r1, #11
   12776:	4383      	bics	r3, r0
   12778:	7023      	strb	r3, [r4, #0]
   1277a:	47a8      	blx	r5
   1277c:	3e02      	subs	r6, #2
   1277e:	e069      	b.n	12854 <LORAWAN_SetAttr+0x254>
   12780:	680b      	ldr	r3, [r1, #0]
   12782:	2001      	movs	r0, #1
   12784:	0a19      	lsrs	r1, r3, #8
   12786:	70a1      	strb	r1, [r4, #2]
   12788:	0c19      	lsrs	r1, r3, #16
   1278a:	7063      	strb	r3, [r4, #1]
   1278c:	70e1      	strb	r1, [r4, #3]
   1278e:	0e1b      	lsrs	r3, r3, #24
   12790:	2103      	movs	r1, #3
   12792:	4d5a      	ldr	r5, [pc, #360]	; (128fc <LORAWAN_SetAttr+0x2fc>)
   12794:	7123      	strb	r3, [r4, #4]
   12796:	47a8      	blx	r5
   12798:	0022      	movs	r2, r4
   1279a:	2304      	movs	r3, #4
   1279c:	32de      	adds	r2, #222	; 0xde
   1279e:	7811      	ldrb	r1, [r2, #0]
   127a0:	430b      	orrs	r3, r1
   127a2:	7013      	strb	r3, [r2, #0]
   127a4:	e015      	b.n	127d2 <LORAWAN_SetAttr+0x1d2>
   127a6:	260a      	movs	r6, #10
   127a8:	2900      	cmp	r1, #0
   127aa:	d053      	beq.n	12854 <LORAWAN_SetAttr+0x254>
   127ac:	3606      	adds	r6, #6
   127ae:	0032      	movs	r2, r6
   127b0:	4f51      	ldr	r7, [pc, #324]	; (128f8 <LORAWAN_SetAttr+0x2f8>)
   127b2:	1d60      	adds	r0, r4, #5
   127b4:	47b8      	blx	r7
   127b6:	0020      	movs	r0, r4
   127b8:	0032      	movs	r2, r6
   127ba:	0029      	movs	r1, r5
   127bc:	3025      	adds	r0, #37	; 0x25
   127be:	47b8      	blx	r7
   127c0:	2104      	movs	r1, #4
   127c2:	2001      	movs	r0, #1
   127c4:	4d4d      	ldr	r5, [pc, #308]	; (128fc <LORAWAN_SetAttr+0x2fc>)
   127c6:	47a8      	blx	r5
   127c8:	0023      	movs	r3, r4
   127ca:	33de      	adds	r3, #222	; 0xde
   127cc:	781a      	ldrb	r2, [r3, #0]
   127ce:	4316      	orrs	r6, r2
   127d0:	701e      	strb	r6, [r3, #0]
   127d2:	2109      	movs	r1, #9
   127d4:	2001      	movs	r0, #1
   127d6:	47a8      	blx	r5
   127d8:	2001      	movs	r0, #1
   127da:	210b      	movs	r1, #11
   127dc:	3484      	adds	r4, #132	; 0x84
   127de:	7823      	ldrb	r3, [r4, #0]
   127e0:	4383      	bics	r3, r0
   127e2:	7023      	strb	r3, [r4, #0]
   127e4:	47a8      	blx	r5
   127e6:	e77d      	b.n	126e4 <LORAWAN_SetAttr+0xe4>
   127e8:	260a      	movs	r6, #10
   127ea:	2900      	cmp	r1, #0
   127ec:	d032      	beq.n	12854 <LORAWAN_SetAttr+0x254>
   127ee:	0020      	movs	r0, r4
   127f0:	2210      	movs	r2, #16
   127f2:	4e41      	ldr	r6, [pc, #260]	; (128f8 <LORAWAN_SetAttr+0x2f8>)
   127f4:	3015      	adds	r0, #21
   127f6:	47b0      	blx	r6
   127f8:	0020      	movs	r0, r4
   127fa:	2210      	movs	r2, #16
   127fc:	0029      	movs	r1, r5
   127fe:	3035      	adds	r0, #53	; 0x35
   12800:	47b0      	blx	r6
   12802:	2105      	movs	r1, #5
   12804:	2001      	movs	r0, #1
   12806:	4d3d      	ldr	r5, [pc, #244]	; (128fc <LORAWAN_SetAttr+0x2fc>)
   12808:	47a8      	blx	r5
   1280a:	0022      	movs	r2, r4
   1280c:	32de      	adds	r2, #222	; 0xde
   1280e:	7811      	ldrb	r1, [r2, #0]
   12810:	2320      	movs	r3, #32
   12812:	e7c5      	b.n	127a0 <LORAWAN_SetAttr+0x1a0>
   12814:	260a      	movs	r6, #10
   12816:	2900      	cmp	r1, #0
   12818:	d01c      	beq.n	12854 <LORAWAN_SetAttr+0x254>
   1281a:	4b3a      	ldr	r3, [pc, #232]	; (12904 <LORAWAN_SetAttr+0x304>)
   1281c:	3e02      	subs	r6, #2
   1281e:	5ce3      	ldrb	r3, [r4, r3]
   12820:	2b00      	cmp	r3, #0
   12822:	d117      	bne.n	12854 <LORAWAN_SetAttr+0x254>
   12824:	0020      	movs	r0, r4
   12826:	2210      	movs	r2, #16
   12828:	4b33      	ldr	r3, [pc, #204]	; (128f8 <LORAWAN_SetAttr+0x2f8>)
   1282a:	3045      	adds	r0, #69	; 0x45
   1282c:	4798      	blx	r3
   1282e:	2106      	movs	r1, #6
   12830:	4d32      	ldr	r5, [pc, #200]	; (128fc <LORAWAN_SetAttr+0x2fc>)
   12832:	2001      	movs	r0, #1
   12834:	47a8      	blx	r5
   12836:	0022      	movs	r2, r4
   12838:	32de      	adds	r2, #222	; 0xde
   1283a:	7813      	ldrb	r3, [r2, #0]
   1283c:	2109      	movs	r1, #9
   1283e:	4333      	orrs	r3, r6
   12840:	2001      	movs	r0, #1
   12842:	7013      	strb	r3, [r2, #0]
   12844:	47a8      	blx	r5
   12846:	2001      	movs	r0, #1
   12848:	3484      	adds	r4, #132	; 0x84
   1284a:	7823      	ldrb	r3, [r4, #0]
   1284c:	210b      	movs	r1, #11
   1284e:	4383      	bics	r3, r0
   12850:	7023      	strb	r3, [r4, #0]
   12852:	47a8      	blx	r5
   12854:	0030      	movs	r0, r6
   12856:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   12858:	780b      	ldrb	r3, [r1, #0]
   1285a:	2001      	movs	r0, #1
   1285c:	0021      	movs	r1, r4
   1285e:	2520      	movs	r5, #32
   12860:	3184      	adds	r1, #132	; 0x84
   12862:	4003      	ands	r3, r0
   12864:	015a      	lsls	r2, r3, #5
   12866:	780b      	ldrb	r3, [r1, #0]
   12868:	43ab      	bics	r3, r5
   1286a:	4313      	orrs	r3, r2
   1286c:	700b      	strb	r3, [r1, #0]
   1286e:	0023      	movs	r3, r4
   12870:	2200      	movs	r2, #0
   12872:	33ca      	adds	r3, #202	; 0xca
   12874:	3494      	adds	r4, #148	; 0x94
   12876:	801a      	strh	r2, [r3, #0]
   12878:	7823      	ldrb	r3, [r4, #0]
   1287a:	3210      	adds	r2, #16
   1287c:	4393      	bics	r3, r2
   1287e:	7023      	strb	r3, [r4, #0]
   12880:	210b      	movs	r1, #11
   12882:	e748      	b.n	12716 <LORAWAN_SetAttr+0x116>
   12884:	466a      	mov	r2, sp
   12886:	780b      	ldrb	r3, [r1, #0]
   12888:	7013      	strb	r3, [r2, #0]
   1288a:	0022      	movs	r2, r4
   1288c:	32f3      	adds	r2, #243	; 0xf3
   1288e:	7812      	ldrb	r2, [r2, #0]
   12890:	429a      	cmp	r2, r3
   12892:	d900      	bls.n	12896 <LORAWAN_SetAttr+0x296>
   12894:	e739      	b.n	1270a <LORAWAN_SetAttr+0x10a>
   12896:	0022      	movs	r2, r4
   12898:	32f4      	adds	r2, #244	; 0xf4
   1289a:	7812      	ldrb	r2, [r2, #0]
   1289c:	429a      	cmp	r2, r3
   1289e:	d200      	bcs.n	128a2 <LORAWAN_SetAttr+0x2a2>
   128a0:	e733      	b.n	1270a <LORAWAN_SetAttr+0x10a>
   128a2:	4669      	mov	r1, sp
   128a4:	2010      	movs	r0, #16
   128a6:	4b18      	ldr	r3, [pc, #96]	; (12908 <LORAWAN_SetAttr+0x308>)
   128a8:	4798      	blx	r3
   128aa:	0006      	movs	r6, r0
   128ac:	2808      	cmp	r0, #8
   128ae:	d000      	beq.n	128b2 <LORAWAN_SetAttr+0x2b2>
   128b0:	e72b      	b.n	1270a <LORAWAN_SetAttr+0x10a>
   128b2:	466b      	mov	r3, sp
   128b4:	210c      	movs	r1, #12
   128b6:	2001      	movs	r0, #1
   128b8:	781b      	ldrb	r3, [r3, #0]
   128ba:	34e7      	adds	r4, #231	; 0xe7
   128bc:	7023      	strb	r3, [r4, #0]
   128be:	4b0f      	ldr	r3, [pc, #60]	; (128fc <LORAWAN_SetAttr+0x2fc>)
   128c0:	4798      	blx	r3
   128c2:	e7c7      	b.n	12854 <LORAWAN_SetAttr+0x254>
   128c4:	466a      	mov	r2, sp
   128c6:	780b      	ldrb	r3, [r1, #0]
   128c8:	201d      	movs	r0, #29
   128ca:	7013      	strb	r3, [r2, #0]
   128cc:	4669      	mov	r1, sp
   128ce:	4b0e      	ldr	r3, [pc, #56]	; (12908 <LORAWAN_SetAttr+0x308>)
   128d0:	4798      	blx	r3
   128d2:	0006      	movs	r6, r0
   128d4:	2808      	cmp	r0, #8
   128d6:	d000      	beq.n	128da <LORAWAN_SetAttr+0x2da>
   128d8:	e717      	b.n	1270a <LORAWAN_SetAttr+0x10a>
   128da:	466b      	mov	r3, sp
   128dc:	781b      	ldrb	r3, [r3, #0]
   128de:	34e9      	adds	r4, #233	; 0xe9
   128e0:	7023      	strb	r3, [r4, #0]
   128e2:	210a      	movs	r1, #10
   128e4:	2000      	movs	r0, #0
   128e6:	e7ea      	b.n	128be <LORAWAN_SetAttr+0x2be>
   128e8:	780b      	ldrb	r3, [r1, #0]
   128ea:	2103      	movs	r1, #3
   128ec:	34ff      	adds	r4, #255	; 0xff
   128ee:	7063      	strb	r3, [r4, #1]
   128f0:	2000      	movs	r0, #0
   128f2:	e710      	b.n	12716 <LORAWAN_SetAttr+0x116>
   128f4:	20003348 	.word	0x20003348
   128f8:	00016a0f 	.word	0x00016a0f
   128fc:	00009759 	.word	0x00009759
   12900:	0000e57d 	.word	0x0000e57d
   12904:	0000022d 	.word	0x0000022d
   12908:	0000d089 	.word	0x0000d089
   1290c:	680b      	ldr	r3, [r1, #0]
   1290e:	260a      	movs	r6, #10
   12910:	1c5a      	adds	r2, r3, #1
   12912:	d09f      	beq.n	12854 <LORAWAN_SetAttr+0x254>
   12914:	2115      	movs	r1, #21
   12916:	2000      	movs	r0, #0
   12918:	3488      	adds	r4, #136	; 0x88
   1291a:	6023      	str	r3, [r4, #0]
   1291c:	4b7f      	ldr	r3, [pc, #508]	; (12b1c <LORAWAN_SetAttr+0x51c>)
   1291e:	4798      	blx	r3
   12920:	e72c      	b.n	1277c <LORAWAN_SetAttr+0x17c>
   12922:	680b      	ldr	r3, [r1, #0]
   12924:	260a      	movs	r6, #10
   12926:	1c5a      	adds	r2, r3, #1
   12928:	d100      	bne.n	1292c <LORAWAN_SetAttr+0x32c>
   1292a:	e793      	b.n	12854 <LORAWAN_SetAttr+0x254>
   1292c:	0031      	movs	r1, r6
   1292e:	348c      	adds	r4, #140	; 0x8c
   12930:	6023      	str	r3, [r4, #0]
   12932:	2001      	movs	r0, #1
   12934:	e7f2      	b.n	1291c <LORAWAN_SetAttr+0x31c>
   12936:	0026      	movs	r6, r4
   12938:	880b      	ldrh	r3, [r1, #0]
   1293a:	36d0      	adds	r6, #208	; 0xd0
   1293c:	210c      	movs	r1, #12
   1293e:	2000      	movs	r0, #0
   12940:	4d76      	ldr	r5, [pc, #472]	; (12b1c <LORAWAN_SetAttr+0x51c>)
   12942:	8033      	strh	r3, [r6, #0]
   12944:	47a8      	blx	r5
   12946:	22fa      	movs	r2, #250	; 0xfa
   12948:	8833      	ldrh	r3, [r6, #0]
   1294a:	0092      	lsls	r2, r2, #2
   1294c:	189b      	adds	r3, r3, r2
   1294e:	34d2      	adds	r4, #210	; 0xd2
   12950:	8023      	strh	r3, [r4, #0]
   12952:	210d      	movs	r1, #13
   12954:	2000      	movs	r0, #0
   12956:	e745      	b.n	127e4 <LORAWAN_SetAttr+0x1e4>
   12958:	780b      	ldrb	r3, [r1, #0]
   1295a:	260a      	movs	r6, #10
   1295c:	2b0f      	cmp	r3, #15
   1295e:	d900      	bls.n	12962 <LORAWAN_SetAttr+0x362>
   12960:	e778      	b.n	12854 <LORAWAN_SetAttr+0x254>
   12962:	3498      	adds	r4, #152	; 0x98
   12964:	7023      	strb	r3, [r4, #0]
   12966:	e709      	b.n	1277c <LORAWAN_SetAttr+0x17c>
   12968:	880b      	ldrh	r3, [r1, #0]
   1296a:	34d4      	adds	r4, #212	; 0xd4
   1296c:	8023      	strh	r3, [r4, #0]
   1296e:	210e      	movs	r1, #14
   12970:	e7be      	b.n	128f0 <LORAWAN_SetAttr+0x2f0>
   12972:	880b      	ldrh	r3, [r1, #0]
   12974:	34d6      	adds	r4, #214	; 0xd6
   12976:	8023      	strh	r3, [r4, #0]
   12978:	210f      	movs	r1, #15
   1297a:	e7b9      	b.n	128f0 <LORAWAN_SetAttr+0x2f0>
   1297c:	780b      	ldrb	r3, [r1, #0]
   1297e:	34dc      	adds	r4, #220	; 0xdc
   12980:	7023      	strb	r3, [r4, #0]
   12982:	2111      	movs	r1, #17
   12984:	e7b4      	b.n	128f0 <LORAWAN_SetAttr+0x2f0>
   12986:	780b      	ldrb	r3, [r1, #0]
   12988:	34dd      	adds	r4, #221	; 0xdd
   1298a:	7023      	strb	r3, [r4, #0]
   1298c:	2112      	movs	r1, #18
   1298e:	e7af      	b.n	128f0 <LORAWAN_SetAttr+0x2f0>
   12990:	880b      	ldrh	r3, [r1, #0]
   12992:	34da      	adds	r4, #218	; 0xda
   12994:	8023      	strh	r3, [r4, #0]
   12996:	2110      	movs	r1, #16
   12998:	e7aa      	b.n	128f0 <LORAWAN_SetAttr+0x2f0>
   1299a:	780b      	ldrb	r3, [r1, #0]
   1299c:	34e2      	adds	r4, #226	; 0xe2
   1299e:	7023      	strb	r3, [r4, #0]
   129a0:	2114      	movs	r1, #20
   129a2:	e7a5      	b.n	128f0 <LORAWAN_SetAttr+0x2f0>
   129a4:	780b      	ldrb	r3, [r1, #0]
   129a6:	34e1      	adds	r4, #225	; 0xe1
   129a8:	7023      	strb	r3, [r4, #0]
   129aa:	e69b      	b.n	126e4 <LORAWAN_SetAttr+0xe4>
   129ac:	780b      	ldrb	r3, [r1, #0]
   129ae:	34e8      	adds	r4, #232	; 0xe8
   129b0:	e7fa      	b.n	129a8 <LORAWAN_SetAttr+0x3a8>
   129b2:	2001      	movs	r0, #1
   129b4:	780b      	ldrb	r3, [r1, #0]
   129b6:	2110      	movs	r1, #16
   129b8:	3484      	adds	r4, #132	; 0x84
   129ba:	4003      	ands	r3, r0
   129bc:	011a      	lsls	r2, r3, #4
   129be:	7823      	ldrb	r3, [r4, #0]
   129c0:	438b      	bics	r3, r1
   129c2:	4313      	orrs	r3, r2
   129c4:	7023      	strb	r3, [r4, #0]
   129c6:	3905      	subs	r1, #5
   129c8:	e6a5      	b.n	12716 <LORAWAN_SetAttr+0x116>
   129ca:	7909      	ldrb	r1, [r1, #4]
   129cc:	7828      	ldrb	r0, [r5, #0]
   129ce:	4b54      	ldr	r3, [pc, #336]	; (12b20 <LORAWAN_SetAttr+0x520>)
   129d0:	4798      	blx	r3
   129d2:	0006      	movs	r6, r0
   129d4:	e73e      	b.n	12854 <LORAWAN_SetAttr+0x254>
   129d6:	7909      	ldrb	r1, [r1, #4]
   129d8:	7828      	ldrb	r0, [r5, #0]
   129da:	4b52      	ldr	r3, [pc, #328]	; (12b24 <LORAWAN_SetAttr+0x524>)
   129dc:	e7f8      	b.n	129d0 <LORAWAN_SetAttr+0x3d0>
   129de:	7808      	ldrb	r0, [r1, #0]
   129e0:	4b51      	ldr	r3, [pc, #324]	; (12b28 <LORAWAN_SetAttr+0x528>)
   129e2:	6849      	ldr	r1, [r1, #4]
   129e4:	4798      	blx	r3
   129e6:	e7f4      	b.n	129d2 <LORAWAN_SetAttr+0x3d2>
   129e8:	7909      	ldrb	r1, [r1, #4]
   129ea:	6828      	ldr	r0, [r5, #0]
   129ec:	4b4f      	ldr	r3, [pc, #316]	; (12b2c <LORAWAN_SetAttr+0x52c>)
   129ee:	4798      	blx	r3
   129f0:	e7ef      	b.n	129d2 <LORAWAN_SetAttr+0x3d2>
   129f2:	786b      	ldrb	r3, [r5, #1]
   129f4:	7828      	ldrb	r0, [r5, #0]
   129f6:	021b      	lsls	r3, r3, #8
   129f8:	4303      	orrs	r3, r0
   129fa:	78a8      	ldrb	r0, [r5, #2]
   129fc:	7909      	ldrb	r1, [r1, #4]
   129fe:	0400      	lsls	r0, r0, #16
   12a00:	4303      	orrs	r3, r0
   12a02:	78e8      	ldrb	r0, [r5, #3]
   12a04:	0600      	lsls	r0, r0, #24
   12a06:	4318      	orrs	r0, r3
   12a08:	4b49      	ldr	r3, [pc, #292]	; (12b30 <LORAWAN_SetAttr+0x530>)
   12a0a:	e7f0      	b.n	129ee <LORAWAN_SetAttr+0x3ee>
   12a0c:	7808      	ldrb	r0, [r1, #0]
   12a0e:	4b49      	ldr	r3, [pc, #292]	; (12b34 <LORAWAN_SetAttr+0x534>)
   12a10:	4798      	blx	r3
   12a12:	e7de      	b.n	129d2 <LORAWAN_SetAttr+0x3d2>
   12a14:	8808      	ldrh	r0, [r1, #0]
   12a16:	4b48      	ldr	r3, [pc, #288]	; (12b38 <LORAWAN_SetAttr+0x538>)
   12a18:	4798      	blx	r3
   12a1a:	e663      	b.n	126e4 <LORAWAN_SetAttr+0xe4>
   12a1c:	4b47      	ldr	r3, [pc, #284]	; (12b3c <LORAWAN_SetAttr+0x53c>)
   12a1e:	6019      	str	r1, [r3, #0]
   12a20:	e673      	b.n	1270a <LORAWAN_SetAttr+0x10a>
   12a22:	7809      	ldrb	r1, [r1, #0]
   12a24:	7868      	ldrb	r0, [r5, #1]
   12a26:	4b46      	ldr	r3, [pc, #280]	; (12b40 <LORAWAN_SetAttr+0x540>)
   12a28:	4798      	blx	r3
   12a2a:	e7d2      	b.n	129d2 <LORAWAN_SetAttr+0x3d2>
   12a2c:	7809      	ldrb	r1, [r1, #0]
   12a2e:	4b45      	ldr	r3, [pc, #276]	; (12b44 <LORAWAN_SetAttr+0x544>)
   12a30:	1c68      	adds	r0, r5, #1
   12a32:	4798      	blx	r3
   12a34:	e7cd      	b.n	129d2 <LORAWAN_SetAttr+0x3d2>
   12a36:	7809      	ldrb	r1, [r1, #0]
   12a38:	1c68      	adds	r0, r5, #1
   12a3a:	4b43      	ldr	r3, [pc, #268]	; (12b48 <LORAWAN_SetAttr+0x548>)
   12a3c:	e7f9      	b.n	12a32 <LORAWAN_SetAttr+0x432>
   12a3e:	7809      	ldrb	r1, [r1, #0]
   12a40:	6868      	ldr	r0, [r5, #4]
   12a42:	4b42      	ldr	r3, [pc, #264]	; (12b4c <LORAWAN_SetAttr+0x54c>)
   12a44:	e7f5      	b.n	12a32 <LORAWAN_SetAttr+0x432>
   12a46:	7809      	ldrb	r1, [r1, #0]
   12a48:	6868      	ldr	r0, [r5, #4]
   12a4a:	4b41      	ldr	r3, [pc, #260]	; (12b50 <LORAWAN_SetAttr+0x550>)
   12a4c:	e7f1      	b.n	12a32 <LORAWAN_SetAttr+0x432>
   12a4e:	7809      	ldrb	r1, [r1, #0]
   12a50:	6868      	ldr	r0, [r5, #4]
   12a52:	4b40      	ldr	r3, [pc, #256]	; (12b54 <LORAWAN_SetAttr+0x554>)
   12a54:	e7ed      	b.n	12a32 <LORAWAN_SetAttr+0x432>
   12a56:	7809      	ldrb	r1, [r1, #0]
   12a58:	6868      	ldr	r0, [r5, #4]
   12a5a:	4b3f      	ldr	r3, [pc, #252]	; (12b58 <LORAWAN_SetAttr+0x558>)
   12a5c:	e7e9      	b.n	12a32 <LORAWAN_SetAttr+0x432>
   12a5e:	7809      	ldrb	r1, [r1, #0]
   12a60:	7868      	ldrb	r0, [r5, #1]
   12a62:	4b3e      	ldr	r3, [pc, #248]	; (12b5c <LORAWAN_SetAttr+0x55c>)
   12a64:	e7e0      	b.n	12a28 <LORAWAN_SetAttr+0x428>
   12a66:	7809      	ldrb	r1, [r1, #0]
   12a68:	7868      	ldrb	r0, [r5, #1]
   12a6a:	4b3d      	ldr	r3, [pc, #244]	; (12b60 <LORAWAN_SetAttr+0x560>)
   12a6c:	e7dc      	b.n	12a28 <LORAWAN_SetAttr+0x428>
   12a6e:	2300      	movs	r3, #0
   12a70:	466a      	mov	r2, sp
   12a72:	7809      	ldrb	r1, [r1, #0]
   12a74:	7013      	strb	r3, [r2, #0]
   12a76:	4299      	cmp	r1, r3
   12a78:	d014      	beq.n	12aa4 <LORAWAN_SetAttr+0x4a4>
   12a7a:	0022      	movs	r2, r4
   12a7c:	2102      	movs	r1, #2
   12a7e:	32ff      	adds	r2, #255	; 0xff
   12a80:	7f53      	ldrb	r3, [r2, #29]
   12a82:	420b      	tst	r3, r1
   12a84:	d001      	beq.n	12a8a <LORAWAN_SetAttr+0x48a>
   12a86:	438b      	bics	r3, r1
   12a88:	7753      	strb	r3, [r2, #29]
   12a8a:	2220      	movs	r2, #32
   12a8c:	34ff      	adds	r4, #255	; 0xff
   12a8e:	7f63      	ldrb	r3, [r4, #29]
   12a90:	4213      	tst	r3, r2
   12a92:	d100      	bne.n	12a96 <LORAWAN_SetAttr+0x496>
   12a94:	e626      	b.n	126e4 <LORAWAN_SetAttr+0xe4>
   12a96:	4393      	bics	r3, r2
   12a98:	7763      	strb	r3, [r4, #29]
   12a9a:	4669      	mov	r1, sp
   12a9c:	4b31      	ldr	r3, [pc, #196]	; (12b64 <LORAWAN_SetAttr+0x564>)
   12a9e:	2038      	movs	r0, #56	; 0x38
   12aa0:	4798      	blx	r3
   12aa2:	e61f      	b.n	126e4 <LORAWAN_SetAttr+0xe4>
   12aa4:	4a30      	ldr	r2, [pc, #192]	; (12b68 <LORAWAN_SetAttr+0x568>)
   12aa6:	4b31      	ldr	r3, [pc, #196]	; (12b6c <LORAWAN_SetAttr+0x56c>)
   12aa8:	200e      	movs	r0, #14
   12aaa:	4798      	blx	r3
   12aac:	e61a      	b.n	126e4 <LORAWAN_SetAttr+0xe4>
   12aae:	466b      	mov	r3, sp
   12ab0:	780a      	ldrb	r2, [r1, #0]
   12ab2:	34ff      	adds	r4, #255	; 0xff
   12ab4:	701a      	strb	r2, [r3, #0]
   12ab6:	2320      	movs	r3, #32
   12ab8:	2a00      	cmp	r2, #0
   12aba:	d007      	beq.n	12acc <LORAWAN_SetAttr+0x4cc>
   12abc:	7f62      	ldrb	r2, [r4, #29]
   12abe:	4313      	orrs	r3, r2
   12ac0:	7763      	strb	r3, [r4, #29]
   12ac2:	4669      	mov	r1, sp
   12ac4:	4b27      	ldr	r3, [pc, #156]	; (12b64 <LORAWAN_SetAttr+0x564>)
   12ac6:	2038      	movs	r0, #56	; 0x38
   12ac8:	4798      	blx	r3
   12aca:	e782      	b.n	129d2 <LORAWAN_SetAttr+0x3d2>
   12acc:	7f62      	ldrb	r2, [r4, #29]
   12ace:	260a      	movs	r6, #10
   12ad0:	421a      	tst	r2, r3
   12ad2:	d100      	bne.n	12ad6 <LORAWAN_SetAttr+0x4d6>
   12ad4:	e6be      	b.n	12854 <LORAWAN_SetAttr+0x254>
   12ad6:	439a      	bics	r2, r3
   12ad8:	7762      	strb	r2, [r4, #29]
   12ada:	e7f2      	b.n	12ac2 <LORAWAN_SetAttr+0x4c2>
   12adc:	780b      	ldrb	r3, [r1, #0]
   12ade:	260a      	movs	r6, #10
   12ae0:	2b08      	cmp	r3, #8
   12ae2:	d900      	bls.n	12ae6 <LORAWAN_SetAttr+0x4e6>
   12ae4:	e6b6      	b.n	12854 <LORAWAN_SetAttr+0x254>
   12ae6:	228b      	movs	r2, #139	; 0x8b
   12ae8:	0092      	lsls	r2, r2, #2
   12aea:	54a3      	strb	r3, [r4, r2]
   12aec:	210d      	movs	r1, #13
   12aee:	e720      	b.n	12932 <LORAWAN_SetAttr+0x332>
   12af0:	780a      	ldrb	r2, [r1, #0]
   12af2:	4b1f      	ldr	r3, [pc, #124]	; (12b70 <LORAWAN_SetAttr+0x570>)
   12af4:	54e2      	strb	r2, [r4, r3]
   12af6:	e5f5      	b.n	126e4 <LORAWAN_SetAttr+0xe4>
   12af8:	4b1e      	ldr	r3, [pc, #120]	; (12b74 <LORAWAN_SetAttr+0x574>)
   12afa:	4798      	blx	r3
   12afc:	e769      	b.n	129d2 <LORAWAN_SetAttr+0x3d2>
   12afe:	4b1e      	ldr	r3, [pc, #120]	; (12b78 <LORAWAN_SetAttr+0x578>)
   12b00:	e7fb      	b.n	12afa <LORAWAN_SetAttr+0x4fa>
   12b02:	780a      	ldrb	r2, [r1, #0]
   12b04:	2302      	movs	r3, #2
   12b06:	34ff      	adds	r4, #255	; 0xff
   12b08:	2a00      	cmp	r2, #0
   12b0a:	d003      	beq.n	12b14 <LORAWAN_SetAttr+0x514>
   12b0c:	7f62      	ldrb	r2, [r4, #29]
   12b0e:	4313      	orrs	r3, r2
   12b10:	7763      	strb	r3, [r4, #29]
   12b12:	e5e7      	b.n	126e4 <LORAWAN_SetAttr+0xe4>
   12b14:	7f62      	ldrb	r2, [r4, #29]
   12b16:	439a      	bics	r2, r3
   12b18:	7762      	strb	r2, [r4, #29]
   12b1a:	e5e3      	b.n	126e4 <LORAWAN_SetAttr+0xe4>
   12b1c:	00009759 	.word	0x00009759
   12b20:	00011a89 	.word	0x00011a89
   12b24:	00011a19 	.word	0x00011a19
   12b28:	00011241 	.word	0x00011241
   12b2c:	000111b9 	.word	0x000111b9
   12b30:	000111f5 	.word	0x000111f5
   12b34:	00012581 	.word	0x00012581
   12b38:	00010455 	.word	0x00010455
   12b3c:	200036a0 	.word	0x200036a0
   12b40:	00013095 	.word	0x00013095
   12b44:	000132f5 	.word	0x000132f5
   12b48:	00013341 	.word	0x00013341
   12b4c:	000132ad 	.word	0x000132ad
   12b50:	0001338d 	.word	0x0001338d
   12b54:	000133ad 	.word	0x000133ad
   12b58:	000133c9 	.word	0x000133c9
   12b5c:	0001340d 	.word	0x0001340d
   12b60:	00013449 	.word	0x00013449
   12b64:	0000d0a5 	.word	0x0000d0a5
   12b68:	20003464 	.word	0x20003464
   12b6c:	0000d06d 	.word	0x0000d06d
   12b70:	0000022d 	.word	0x0000022d
   12b74:	000104f1 	.word	0x000104f1
   12b78:	00010519 	.word	0x00010519

00012b7c <AssemblePacket>:
   12b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   12b7e:	2710      	movs	r7, #16
   12b80:	b08f      	sub	sp, #60	; 0x3c
   12b82:	9308      	str	r3, [sp, #32]
   12b84:	ab0d      	add	r3, sp, #52	; 0x34
   12b86:	801f      	strh	r7, [r3, #0]
   12b88:	231e      	movs	r3, #30
   12b8a:	920a      	str	r2, [sp, #40]	; 0x28
   12b8c:	aa06      	add	r2, sp, #24
   12b8e:	189b      	adds	r3, r3, r2
   12b90:	2500      	movs	r5, #0
   12b92:	2210      	movs	r2, #16
   12b94:	ac0c      	add	r4, sp, #48	; 0x30
   12b96:	9006      	str	r0, [sp, #24]
   12b98:	910b      	str	r1, [sp, #44]	; 0x2c
   12b9a:	32ff      	adds	r2, #255	; 0xff
   12b9c:	0029      	movs	r1, r5
   12b9e:	4ed1      	ldr	r6, [pc, #836]	; (12ee4 <AssemblePacket+0x368>)
   12ba0:	7025      	strb	r5, [r4, #0]
   12ba2:	48d1      	ldr	r0, [pc, #836]	; (12ee8 <AssemblePacket+0x36c>)
   12ba4:	801d      	strh	r5, [r3, #0]
   12ba6:	47b0      	blx	r6
   12ba8:	003a      	movs	r2, r7
   12baa:	0029      	movs	r1, r5
   12bac:	48cf      	ldr	r0, [pc, #828]	; (12eec <AssemblePacket+0x370>)
   12bae:	47b0      	blx	r6
   12bb0:	221f      	movs	r2, #31
   12bb2:	7823      	ldrb	r3, [r4, #0]
   12bb4:	9906      	ldr	r1, [sp, #24]
   12bb6:	4013      	ands	r3, r2
   12bb8:	42a9      	cmp	r1, r5
   12bba:	d100      	bne.n	12bbe <AssemblePacket+0x42>
   12bbc:	e0dc      	b.n	12d78 <AssemblePacket+0x1fc>
   12bbe:	3a9f      	subs	r2, #159	; 0x9f
   12bc0:	4313      	orrs	r3, r2
   12bc2:	7023      	strb	r3, [r4, #0]
   12bc4:	4bca      	ldr	r3, [pc, #808]	; (12ef0 <AssemblePacket+0x374>)
   12bc6:	3281      	adds	r2, #129	; 0x81
   12bc8:	3394      	adds	r3, #148	; 0x94
   12bca:	7819      	ldrb	r1, [r3, #0]
   12bcc:	430a      	orrs	r2, r1
   12bce:	701a      	strb	r2, [r3, #0]
   12bd0:	22e0      	movs	r2, #224	; 0xe0
   12bd2:	7823      	ldrb	r3, [r4, #0]
   12bd4:	48c4      	ldr	r0, [pc, #784]	; (12ee8 <AssemblePacket+0x36c>)
   12bd6:	4013      	ands	r3, r2
   12bd8:	7023      	strb	r3, [r4, #0]
   12bda:	4cc5      	ldr	r4, [pc, #788]	; (12ef0 <AssemblePacket+0x374>)
   12bdc:	7403      	strb	r3, [r0, #16]
   12bde:	3adc      	subs	r2, #220	; 0xdc
   12be0:	4bc4      	ldr	r3, [pc, #784]	; (12ef4 <AssemblePacket+0x378>)
   12be2:	3011      	adds	r0, #17
   12be4:	1c61      	adds	r1, r4, #1
   12be6:	4798      	blx	r3
   12be8:	2215      	movs	r2, #21
   12bea:	ab0d      	add	r3, sp, #52	; 0x34
   12bec:	0025      	movs	r5, r4
   12bee:	801a      	strh	r2, [r3, #0]
   12bf0:	2600      	movs	r6, #0
   12bf2:	466b      	mov	r3, sp
   12bf4:	3584      	adds	r5, #132	; 0x84
   12bf6:	761e      	strb	r6, [r3, #24]
   12bf8:	782b      	ldrb	r3, [r5, #0]
   12bfa:	069b      	lsls	r3, r3, #26
   12bfc:	d400      	bmi.n	12c00 <AssemblePacket+0x84>
   12bfe:	e130      	b.n	12e62 <AssemblePacket+0x2e6>
   12c00:	0027      	movs	r7, r4
   12c02:	4bbd      	ldr	r3, [pc, #756]	; (12ef8 <AssemblePacket+0x37c>)
   12c04:	37f3      	adds	r7, #243	; 0xf3
   12c06:	781a      	ldrb	r2, [r3, #0]
   12c08:	783b      	ldrb	r3, [r7, #0]
   12c0a:	429a      	cmp	r2, r3
   12c0c:	d31e      	bcc.n	12c4c <AssemblePacket+0xd0>
   12c0e:	2180      	movs	r1, #128	; 0x80
   12c10:	466b      	mov	r3, sp
   12c12:	0022      	movs	r2, r4
   12c14:	4249      	negs	r1, r1
   12c16:	32ca      	adds	r2, #202	; 0xca
   12c18:	7619      	strb	r1, [r3, #24]
   12c1a:	8813      	ldrh	r3, [r2, #0]
   12c1c:	3301      	adds	r3, #1
   12c1e:	b29b      	uxth	r3, r3
   12c20:	8013      	strh	r3, [r2, #0]
   12c22:	0022      	movs	r2, r4
   12c24:	32dc      	adds	r2, #220	; 0xdc
   12c26:	7812      	ldrb	r2, [r2, #0]
   12c28:	4293      	cmp	r3, r2
   12c2a:	d30f      	bcc.n	12c4c <AssemblePacket+0xd0>
   12c2c:	2040      	movs	r0, #64	; 0x40
   12c2e:	4308      	orrs	r0, r1
   12c30:	9006      	str	r0, [sp, #24]
   12c32:	0020      	movs	r0, r4
   12c34:	3094      	adds	r0, #148	; 0x94
   12c36:	7801      	ldrb	r1, [r0, #0]
   12c38:	4684      	mov	ip, r0
   12c3a:	2010      	movs	r0, #16
   12c3c:	4301      	orrs	r1, r0
   12c3e:	4660      	mov	r0, ip
   12c40:	7001      	strb	r1, [r0, #0]
   12c42:	4293      	cmp	r3, r2
   12c44:	d000      	beq.n	12c48 <AssemblePacket+0xcc>
   12c46:	e09b      	b.n	12d80 <AssemblePacket+0x204>
   12c48:	34f6      	adds	r4, #246	; 0xf6
   12c4a:	7026      	strb	r6, [r4, #0]
   12c4c:	4da8      	ldr	r5, [pc, #672]	; (12ef0 <AssemblePacket+0x374>)
   12c4e:	2102      	movs	r1, #2
   12c50:	002a      	movs	r2, r5
   12c52:	3294      	adds	r2, #148	; 0x94
   12c54:	7813      	ldrb	r3, [r2, #0]
   12c56:	420b      	tst	r3, r1
   12c58:	d005      	beq.n	12c66 <AssemblePacket+0xea>
   12c5a:	2020      	movs	r0, #32
   12c5c:	9c06      	ldr	r4, [sp, #24]
   12c5e:	438b      	bics	r3, r1
   12c60:	4304      	orrs	r4, r0
   12c62:	9406      	str	r4, [sp, #24]
   12c64:	7013      	strb	r3, [r2, #0]
   12c66:	2310      	movs	r3, #16
   12c68:	9c06      	ldr	r4, [sp, #24]
   12c6a:	439c      	bics	r4, r3
   12c6c:	002b      	movs	r3, r5
   12c6e:	33e0      	adds	r3, #224	; 0xe0
   12c70:	781b      	ldrb	r3, [r3, #0]
   12c72:	9309      	str	r3, [sp, #36]	; 0x24
   12c74:	2b00      	cmp	r3, #0
   12c76:	d003      	beq.n	12c80 <AssemblePacket+0x104>
   12c78:	9b08      	ldr	r3, [sp, #32]
   12c7a:	2b00      	cmp	r3, #0
   12c7c:	d000      	beq.n	12c80 <AssemblePacket+0x104>
   12c7e:	e0f6      	b.n	12e6e <AssemblePacket+0x2f2>
   12c80:	230f      	movs	r3, #15
   12c82:	439c      	bics	r4, r3
   12c84:	466b      	mov	r3, sp
   12c86:	9406      	str	r4, [sp, #24]
   12c88:	ac0d      	add	r4, sp, #52	; 0x34
   12c8a:	8826      	ldrh	r6, [r4, #0]
   12c8c:	4f96      	ldr	r7, [pc, #600]	; (12ee8 <AssemblePacket+0x36c>)
   12c8e:	7e1b      	ldrb	r3, [r3, #24]
   12c90:	1c70      	adds	r0, r6, #1
   12c92:	b280      	uxth	r0, r0
   12c94:	55bb      	strb	r3, [r7, r6]
   12c96:	19c0      	adds	r0, r0, r7
   12c98:	4b96      	ldr	r3, [pc, #600]	; (12ef4 <AssemblePacket+0x378>)
   12c9a:	2202      	movs	r2, #2
   12c9c:	4997      	ldr	r1, [pc, #604]	; (12efc <AssemblePacket+0x380>)
   12c9e:	4798      	blx	r3
   12ca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12ca2:	3603      	adds	r6, #3
   12ca4:	8026      	strh	r6, [r4, #0]
   12ca6:	2b00      	cmp	r3, #0
   12ca8:	d100      	bne.n	12cac <AssemblePacket+0x130>
   12caa:	e0e7      	b.n	12e7c <AssemblePacket+0x300>
   12cac:	9b08      	ldr	r3, [sp, #32]
   12cae:	2b00      	cmp	r3, #0
   12cb0:	d004      	beq.n	12cbc <AssemblePacket+0x140>
   12cb2:	2201      	movs	r2, #1
   12cb4:	0021      	movs	r1, r4
   12cb6:	0038      	movs	r0, r7
   12cb8:	4b91      	ldr	r3, [pc, #580]	; (12f00 <AssemblePacket+0x384>)
   12cba:	4798      	blx	r3
   12cbc:	466a      	mov	r2, sp
   12cbe:	212c      	movs	r1, #44	; 0x2c
   12cc0:	1852      	adds	r2, r2, r1
   12cc2:	8823      	ldrh	r3, [r4, #0]
   12cc4:	7812      	ldrb	r2, [r2, #0]
   12cc6:	1c5e      	adds	r6, r3, #1
   12cc8:	54fa      	strb	r2, [r7, r3]
   12cca:	9b08      	ldr	r3, [sp, #32]
   12ccc:	b2b6      	uxth	r6, r6
   12cce:	8026      	strh	r6, [r4, #0]
   12cd0:	2b00      	cmp	r3, #0
   12cd2:	d100      	bne.n	12cd6 <AssemblePacket+0x15a>
   12cd4:	e0d6      	b.n	12e84 <AssemblePacket+0x308>
   12cd6:	001a      	movs	r2, r3
   12cd8:	990a      	ldr	r1, [sp, #40]	; 0x28
   12cda:	4b86      	ldr	r3, [pc, #536]	; (12ef4 <AssemblePacket+0x378>)
   12cdc:	19b8      	adds	r0, r7, r6
   12cde:	4798      	blx	r3
   12ce0:	2120      	movs	r1, #32
   12ce2:	466b      	mov	r3, sp
   12ce4:	185b      	adds	r3, r3, r1
   12ce6:	7819      	ldrb	r1, [r3, #0]
   12ce8:	682b      	ldr	r3, [r5, #0]
   12cea:	002a      	movs	r2, r5
   12cec:	0a18      	lsrs	r0, r3, #8
   12cee:	792b      	ldrb	r3, [r5, #4]
   12cf0:	3288      	adds	r2, #136	; 0x88
   12cf2:	061b      	lsls	r3, r3, #24
   12cf4:	4303      	orrs	r3, r0
   12cf6:	9304      	str	r3, [sp, #16]
   12cf8:	2301      	movs	r3, #1
   12cfa:	9301      	str	r3, [sp, #4]
   12cfc:	4b81      	ldr	r3, [pc, #516]	; (12f04 <AssemblePacket+0x388>)
   12cfe:	9703      	str	r7, [sp, #12]
   12d00:	9602      	str	r6, [sp, #8]
   12d02:	9300      	str	r3, [sp, #0]
   12d04:	6813      	ldr	r3, [r2, #0]
   12d06:	980a      	ldr	r0, [sp, #40]	; 0x28
   12d08:	2200      	movs	r2, #0
   12d0a:	4c7f      	ldr	r4, [pc, #508]	; (12f08 <AssemblePacket+0x38c>)
   12d0c:	47a0      	blx	r4
   12d0e:	2800      	cmp	r0, #0
   12d10:	d002      	beq.n	12d18 <AssemblePacket+0x19c>
   12d12:	2020      	movs	r0, #32
   12d14:	4b7d      	ldr	r3, [pc, #500]	; (12f0c <AssemblePacket+0x390>)
   12d16:	4798      	blx	r3
   12d18:	aa0d      	add	r2, sp, #52	; 0x34
   12d1a:	8813      	ldrh	r3, [r2, #0]
   12d1c:	9908      	ldr	r1, [sp, #32]
   12d1e:	18cb      	adds	r3, r1, r3
   12d20:	8013      	strh	r3, [r2, #0]
   12d22:	4c73      	ldr	r4, [pc, #460]	; (12ef0 <AssemblePacket+0x374>)
   12d24:	ae0d      	add	r6, sp, #52	; 0x34
   12d26:	0021      	movs	r1, r4
   12d28:	6823      	ldr	r3, [r4, #0]
   12d2a:	8832      	ldrh	r2, [r6, #0]
   12d2c:	0a18      	lsrs	r0, r3, #8
   12d2e:	7923      	ldrb	r3, [r4, #4]
   12d30:	3a10      	subs	r2, #16
   12d32:	061b      	lsls	r3, r3, #24
   12d34:	4303      	orrs	r3, r0
   12d36:	9300      	str	r3, [sp, #0]
   12d38:	3188      	adds	r1, #136	; 0x88
   12d3a:	b2d2      	uxtb	r2, r2
   12d3c:	2349      	movs	r3, #73	; 0x49
   12d3e:	6809      	ldr	r1, [r1, #0]
   12d40:	2000      	movs	r0, #0
   12d42:	4d73      	ldr	r5, [pc, #460]	; (12f10 <AssemblePacket+0x394>)
   12d44:	47a8      	blx	r5
   12d46:	4f68      	ldr	r7, [pc, #416]	; (12ee8 <AssemblePacket+0x36c>)
   12d48:	2210      	movs	r2, #16
   12d4a:	4968      	ldr	r1, [pc, #416]	; (12eec <AssemblePacket+0x370>)
   12d4c:	0038      	movs	r0, r7
   12d4e:	4b69      	ldr	r3, [pc, #420]	; (12ef4 <AssemblePacket+0x378>)
   12d50:	4798      	blx	r3
   12d52:	8833      	ldrh	r3, [r6, #0]
   12d54:	4a65      	ldr	r2, [pc, #404]	; (12eec <AssemblePacket+0x370>)
   12d56:	9300      	str	r3, [sp, #0]
   12d58:	2102      	movs	r1, #2
   12d5a:	003b      	movs	r3, r7
   12d5c:	4d6d      	ldr	r5, [pc, #436]	; (12f14 <AssemblePacket+0x398>)
   12d5e:	486e      	ldr	r0, [pc, #440]	; (12f18 <AssemblePacket+0x39c>)
   12d60:	47a8      	blx	r5
   12d62:	8836      	ldrh	r6, [r6, #0]
   12d64:	2204      	movs	r2, #4
   12d66:	19f0      	adds	r0, r6, r7
   12d68:	4960      	ldr	r1, [pc, #384]	; (12eec <AssemblePacket+0x370>)
   12d6a:	4b62      	ldr	r3, [pc, #392]	; (12ef4 <AssemblePacket+0x378>)
   12d6c:	4798      	blx	r3
   12d6e:	3e0c      	subs	r6, #12
   12d70:	34ce      	adds	r4, #206	; 0xce
   12d72:	8026      	strh	r6, [r4, #0]
   12d74:	b00f      	add	sp, #60	; 0x3c
   12d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12d78:	2240      	movs	r2, #64	; 0x40
   12d7a:	4313      	orrs	r3, r2
   12d7c:	7023      	strb	r3, [r4, #0]
   12d7e:	e727      	b.n	12bd0 <AssemblePacket+0x54>
   12d80:	4293      	cmp	r3, r2
   12d82:	d800      	bhi.n	12d86 <AssemblePacket+0x20a>
   12d84:	e762      	b.n	12c4c <AssemblePacket+0xd0>
   12d86:	0022      	movs	r2, r4
   12d88:	0021      	movs	r1, r4
   12d8a:	32f6      	adds	r2, #246	; 0xf6
   12d8c:	7813      	ldrb	r3, [r2, #0]
   12d8e:	31dd      	adds	r1, #221	; 0xdd
   12d90:	3301      	adds	r3, #1
   12d92:	b2db      	uxtb	r3, r3
   12d94:	7013      	strb	r3, [r2, #0]
   12d96:	7809      	ldrb	r1, [r1, #0]
   12d98:	4299      	cmp	r1, r3
   12d9a:	d900      	bls.n	12d9e <AssemblePacket+0x222>
   12d9c:	e756      	b.n	12c4c <AssemblePacket+0xd0>
   12d9e:	231a      	movs	r3, #26
   12da0:	7016      	strb	r6, [r2, #0]
   12da2:	aa06      	add	r2, sp, #24
   12da4:	189b      	adds	r3, r3, r2
   12da6:	001a      	movs	r2, r3
   12da8:	0031      	movs	r1, r6
   12daa:	4b5c      	ldr	r3, [pc, #368]	; (12f1c <AssemblePacket+0x3a0>)
   12dac:	203c      	movs	r0, #60	; 0x3c
   12dae:	4798      	blx	r3
   12db0:	4b5b      	ldr	r3, [pc, #364]	; (12f20 <AssemblePacket+0x3a4>)
   12db2:	781a      	ldrb	r2, [r3, #0]
   12db4:	ab06      	add	r3, sp, #24
   12db6:	7e9b      	ldrb	r3, [r3, #26]
   12db8:	429a      	cmp	r2, r3
   12dba:	d00d      	beq.n	12dd8 <AssemblePacket+0x25c>
   12dbc:	34ff      	adds	r4, #255	; 0xff
   12dbe:	7820      	ldrb	r0, [r4, #0]
   12dc0:	4b58      	ldr	r3, [pc, #352]	; (12f24 <AssemblePacket+0x3a8>)
   12dc2:	4798      	blx	r3
   12dc4:	0031      	movs	r1, r6
   12dc6:	4a56      	ldr	r2, [pc, #344]	; (12f20 <AssemblePacket+0x3a4>)
   12dc8:	4b54      	ldr	r3, [pc, #336]	; (12f1c <AssemblePacket+0x3a0>)
   12dca:	2035      	movs	r0, #53	; 0x35
   12dcc:	4798      	blx	r3
   12dce:	210a      	movs	r1, #10
   12dd0:	0030      	movs	r0, r6
   12dd2:	4b55      	ldr	r3, [pc, #340]	; (12f28 <AssemblePacket+0x3ac>)
   12dd4:	4798      	blx	r3
   12dd6:	e739      	b.n	12c4c <AssemblePacket+0xd0>
   12dd8:	4b47      	ldr	r3, [pc, #284]	; (12ef8 <AssemblePacket+0x37c>)
   12dda:	783a      	ldrb	r2, [r7, #0]
   12ddc:	781b      	ldrb	r3, [r3, #0]
   12dde:	4293      	cmp	r3, r2
   12de0:	d022      	beq.n	12e28 <AssemblePacket+0x2ac>
   12de2:	d800      	bhi.n	12de6 <AssemblePacket+0x26a>
   12de4:	e732      	b.n	12c4c <AssemblePacket+0xd0>
   12de6:	221b      	movs	r2, #27
   12de8:	003d      	movs	r5, r7
   12dea:	a906      	add	r1, sp, #24
   12dec:	3b01      	subs	r3, #1
   12dee:	1852      	adds	r2, r2, r1
   12df0:	7013      	strb	r3, [r2, #0]
   12df2:	261b      	movs	r6, #27
   12df4:	ab06      	add	r3, sp, #24
   12df6:	18f6      	adds	r6, r6, r3
   12df8:	782a      	ldrb	r2, [r5, #0]
   12dfa:	7833      	ldrb	r3, [r6, #0]
   12dfc:	429a      	cmp	r2, r3
   12dfe:	d900      	bls.n	12e02 <AssemblePacket+0x286>
   12e00:	e724      	b.n	12c4c <AssemblePacket+0xd0>
   12e02:	0031      	movs	r1, r6
   12e04:	2010      	movs	r0, #16
   12e06:	4f49      	ldr	r7, [pc, #292]	; (12f2c <AssemblePacket+0x3b0>)
   12e08:	47b8      	blx	r7
   12e0a:	2808      	cmp	r0, #8
   12e0c:	d000      	beq.n	12e10 <AssemblePacket+0x294>
   12e0e:	e71d      	b.n	12c4c <AssemblePacket+0xd0>
   12e10:	0031      	movs	r1, r6
   12e12:	3009      	adds	r0, #9
   12e14:	47b8      	blx	r7
   12e16:	7833      	ldrb	r3, [r6, #0]
   12e18:	2808      	cmp	r0, #8
   12e1a:	d061      	beq.n	12ee0 <AssemblePacket+0x364>
   12e1c:	782a      	ldrb	r2, [r5, #0]
   12e1e:	429a      	cmp	r2, r3
   12e20:	d2e7      	bcs.n	12df2 <AssemblePacket+0x276>
   12e22:	3b01      	subs	r3, #1
   12e24:	7033      	strb	r3, [r6, #0]
   12e26:	e7e4      	b.n	12df2 <AssemblePacket+0x276>
   12e28:	34ff      	adds	r4, #255	; 0xff
   12e2a:	7820      	ldrb	r0, [r4, #0]
   12e2c:	4b40      	ldr	r3, [pc, #256]	; (12f30 <AssemblePacket+0x3b4>)
   12e2e:	4798      	blx	r3
   12e30:	231b      	movs	r3, #27
   12e32:	aa06      	add	r2, sp, #24
   12e34:	189b      	adds	r3, r3, r2
   12e36:	0019      	movs	r1, r3
   12e38:	4c3e      	ldr	r4, [pc, #248]	; (12f34 <AssemblePacket+0x3b8>)
   12e3a:	2013      	movs	r0, #19
   12e3c:	47a0      	blx	r4
   12e3e:	231b      	movs	r3, #27
   12e40:	aa06      	add	r2, sp, #24
   12e42:	189b      	adds	r3, r3, r2
   12e44:	0019      	movs	r1, r3
   12e46:	2014      	movs	r0, #20
   12e48:	47a0      	blx	r4
   12e4a:	2113      	movs	r1, #19
   12e4c:	0030      	movs	r0, r6
   12e4e:	4c36      	ldr	r4, [pc, #216]	; (12f28 <AssemblePacket+0x3ac>)
   12e50:	47a0      	blx	r4
   12e52:	2210      	movs	r2, #16
   12e54:	786b      	ldrb	r3, [r5, #1]
   12e56:	210b      	movs	r1, #11
   12e58:	4313      	orrs	r3, r2
   12e5a:	706b      	strb	r3, [r5, #1]
   12e5c:	2001      	movs	r0, #1
   12e5e:	47a0      	blx	r4
   12e60:	e6f4      	b.n	12c4c <AssemblePacket+0xd0>
   12e62:	2210      	movs	r2, #16
   12e64:	3494      	adds	r4, #148	; 0x94
   12e66:	7823      	ldrb	r3, [r4, #0]
   12e68:	4393      	bics	r3, r2
   12e6a:	7023      	strb	r3, [r4, #0]
   12e6c:	e6ee      	b.n	12c4c <AssemblePacket+0xd0>
   12e6e:	4b32      	ldr	r3, [pc, #200]	; (12f38 <AssemblePacket+0x3bc>)
   12e70:	4798      	blx	r3
   12e72:	230f      	movs	r3, #15
   12e74:	4018      	ands	r0, r3
   12e76:	439c      	bics	r4, r3
   12e78:	4304      	orrs	r4, r0
   12e7a:	e703      	b.n	12c84 <AssemblePacket+0x108>
   12e7c:	9b08      	ldr	r3, [sp, #32]
   12e7e:	2b00      	cmp	r3, #0
   12e80:	d000      	beq.n	12e84 <AssemblePacket+0x308>
   12e82:	e71b      	b.n	12cbc <AssemblePacket+0x140>
   12e84:	4d1a      	ldr	r5, [pc, #104]	; (12ef0 <AssemblePacket+0x374>)
   12e86:	002b      	movs	r3, r5
   12e88:	33e0      	adds	r3, #224	; 0xe0
   12e8a:	781b      	ldrb	r3, [r3, #0]
   12e8c:	2b00      	cmp	r3, #0
   12e8e:	d100      	bne.n	12e92 <AssemblePacket+0x316>
   12e90:	e747      	b.n	12d22 <AssemblePacket+0x1a6>
   12e92:	261e      	movs	r6, #30
   12e94:	ab06      	add	r3, sp, #24
   12e96:	18f6      	adds	r6, r6, r3
   12e98:	2200      	movs	r2, #0
   12e9a:	0031      	movs	r1, r6
   12e9c:	4827      	ldr	r0, [pc, #156]	; (12f3c <AssemblePacket+0x3c0>)
   12e9e:	4b18      	ldr	r3, [pc, #96]	; (12f00 <AssemblePacket+0x384>)
   12ea0:	4798      	blx	r3
   12ea2:	682b      	ldr	r3, [r5, #0]
   12ea4:	7831      	ldrb	r1, [r6, #0]
   12ea6:	0a18      	lsrs	r0, r3, #8
   12ea8:	792b      	ldrb	r3, [r5, #4]
   12eaa:	9703      	str	r7, [sp, #12]
   12eac:	061b      	lsls	r3, r3, #24
   12eae:	4303      	orrs	r3, r0
   12eb0:	9304      	str	r3, [sp, #16]
   12eb2:	8823      	ldrh	r3, [r4, #0]
   12eb4:	002a      	movs	r2, r5
   12eb6:	9302      	str	r3, [sp, #8]
   12eb8:	2302      	movs	r3, #2
   12eba:	9301      	str	r3, [sp, #4]
   12ebc:	4b16      	ldr	r3, [pc, #88]	; (12f18 <AssemblePacket+0x39c>)
   12ebe:	3288      	adds	r2, #136	; 0x88
   12ec0:	9300      	str	r3, [sp, #0]
   12ec2:	6813      	ldr	r3, [r2, #0]
   12ec4:	481d      	ldr	r0, [pc, #116]	; (12f3c <AssemblePacket+0x3c0>)
   12ec6:	2200      	movs	r2, #0
   12ec8:	4d0f      	ldr	r5, [pc, #60]	; (12f08 <AssemblePacket+0x38c>)
   12eca:	47a8      	blx	r5
   12ecc:	2800      	cmp	r0, #0
   12ece:	d002      	beq.n	12ed6 <AssemblePacket+0x35a>
   12ed0:	2020      	movs	r0, #32
   12ed2:	4b0e      	ldr	r3, [pc, #56]	; (12f0c <AssemblePacket+0x390>)
   12ed4:	4798      	blx	r3
   12ed6:	8823      	ldrh	r3, [r4, #0]
   12ed8:	8832      	ldrh	r2, [r6, #0]
   12eda:	189b      	adds	r3, r3, r2
   12edc:	8023      	strh	r3, [r4, #0]
   12ede:	e720      	b.n	12d22 <AssemblePacket+0x1a6>
   12ee0:	34e7      	adds	r4, #231	; 0xe7
   12ee2:	e7c2      	b.n	12e6a <AssemblePacket+0x2ee>
   12ee4:	00016a21 	.word	0x00016a21
   12ee8:	20003590 	.word	0x20003590
   12eec:	200020a5 	.word	0x200020a5
   12ef0:	20003348 	.word	0x20003348
   12ef4:	00016a0f 	.word	0x00016a0f
   12ef8:	2000342f 	.word	0x2000342f
   12efc:	200033d0 	.word	0x200033d0
   12f00:	0000fe85 	.word	0x0000fe85
   12f04:	2000337d 	.word	0x2000337d
   12f08:	00010f99 	.word	0x00010f99
   12f0c:	00011059 	.word	0x00011059
   12f10:	000101b1 	.word	0x000101b1
   12f14:	00007885 	.word	0x00007885
   12f18:	2000336d 	.word	0x2000336d
   12f1c:	0000d06d 	.word	0x0000d06d
   12f20:	20003431 	.word	0x20003431
   12f24:	0000d0c1 	.word	0x0000d0c1
   12f28:	00009759 	.word	0x00009759
   12f2c:	0000d089 	.word	0x0000d089
   12f30:	0000d14d 	.word	0x0000d14d
   12f34:	00012601 	.word	0x00012601
   12f38:	0000fde5 	.word	0x0000fde5
   12f3c:	2000310c 	.word	0x2000310c

00012f40 <LorawanClasscUlAckTimerCallback>:
   12f40:	2102      	movs	r1, #2
   12f42:	4b03      	ldr	r3, [pc, #12]	; (12f50 <LorawanClasscUlAckTimerCallback+0x10>)
   12f44:	3394      	adds	r3, #148	; 0x94
   12f46:	781a      	ldrb	r2, [r3, #0]
   12f48:	438a      	bics	r2, r1
   12f4a:	701a      	strb	r2, [r3, #0]
   12f4c:	4770      	bx	lr
   12f4e:	46c0      	nop			; (mov r8, r8)
   12f50:	20003348 	.word	0x20003348

00012f54 <LorawanClasscValidateSend>:
   12f54:	2388      	movs	r3, #136	; 0x88
   12f56:	b510      	push	{r4, lr}
   12f58:	4c0a      	ldr	r4, [pc, #40]	; (12f84 <LorawanClasscValidateSend+0x30>)
   12f5a:	009b      	lsls	r3, r3, #2
   12f5c:	5ce3      	ldrb	r3, [r4, r3]
   12f5e:	2b00      	cmp	r3, #0
   12f60:	d008      	beq.n	12f74 <LorawanClasscValidateSend+0x20>
   12f62:	220e      	movs	r2, #14
   12f64:	3484      	adds	r4, #132	; 0x84
   12f66:	7823      	ldrb	r3, [r4, #0]
   12f68:	2008      	movs	r0, #8
   12f6a:	4013      	ands	r3, r2
   12f6c:	2b02      	cmp	r3, #2
   12f6e:	d100      	bne.n	12f72 <LorawanClasscValidateSend+0x1e>
   12f70:	2011      	movs	r0, #17
   12f72:	bd10      	pop	{r4, pc}
   12f74:	2394      	movs	r3, #148	; 0x94
   12f76:	005b      	lsls	r3, r3, #1
   12f78:	5ce0      	ldrb	r0, [r4, r3]
   12f7a:	4b03      	ldr	r3, [pc, #12]	; (12f88 <LorawanClasscValidateSend+0x34>)
   12f7c:	4798      	blx	r3
   12f7e:	2800      	cmp	r0, #0
   12f80:	d1ef      	bne.n	12f62 <LorawanClasscValidateSend+0xe>
   12f82:	e7f5      	b.n	12f70 <LorawanClasscValidateSend+0x1c>
   12f84:	20003348 	.word	0x20003348
   12f88:	0000d74d 	.word	0x0000d74d

00012f8c <LorawanClasscRxDone>:
   12f8c:	221f      	movs	r2, #31
   12f8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12f90:	7803      	ldrb	r3, [r0, #0]
   12f92:	4c1c      	ldr	r4, [pc, #112]	; (13004 <LorawanClasscRxDone+0x78>)
   12f94:	4393      	bics	r3, r2
   12f96:	2ba0      	cmp	r3, #160	; 0xa0
   12f98:	d10c      	bne.n	12fb4 <LorawanClasscRxDone+0x28>
   12f9a:	2694      	movs	r6, #148	; 0x94
   12f9c:	0076      	lsls	r6, r6, #1
   12f9e:	5da0      	ldrb	r0, [r4, r6]
   12fa0:	4b19      	ldr	r3, [pc, #100]	; (13008 <LorawanClasscRxDone+0x7c>)
   12fa2:	4798      	blx	r3
   12fa4:	1e05      	subs	r5, r0, #0
   12fa6:	d019      	beq.n	12fdc <LorawanClasscRxDone+0x50>
   12fa8:	0022      	movs	r2, r4
   12faa:	2102      	movs	r1, #2
   12fac:	3294      	adds	r2, #148	; 0x94
   12fae:	7813      	ldrb	r3, [r2, #0]
   12fb0:	438b      	bics	r3, r1
   12fb2:	7013      	strb	r3, [r2, #0]
   12fb4:	0021      	movs	r1, r4
   12fb6:	3184      	adds	r1, #132	; 0x84
   12fb8:	780b      	ldrb	r3, [r1, #0]
   12fba:	220e      	movs	r2, #14
   12fbc:	0018      	movs	r0, r3
   12fbe:	4010      	ands	r0, r2
   12fc0:	2806      	cmp	r0, #6
   12fc2:	d103      	bne.n	12fcc <LorawanClasscRxDone+0x40>
   12fc4:	4393      	bics	r3, r2
   12fc6:	3a04      	subs	r2, #4
   12fc8:	4313      	orrs	r3, r2
   12fca:	700b      	strb	r3, [r1, #0]
   12fcc:	2390      	movs	r3, #144	; 0x90
   12fce:	2201      	movs	r2, #1
   12fd0:	009b      	lsls	r3, r3, #2
   12fd2:	54e2      	strb	r2, [r4, r3]
   12fd4:	2000      	movs	r0, #0
   12fd6:	4b0d      	ldr	r3, [pc, #52]	; (1300c <LorawanClasscRxDone+0x80>)
   12fd8:	4798      	blx	r3
   12fda:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   12fdc:	4b0c      	ldr	r3, [pc, #48]	; (13010 <LorawanClasscRxDone+0x84>)
   12fde:	5da6      	ldrb	r6, [r4, r6]
   12fe0:	4798      	blx	r3
   12fe2:	4b0c      	ldr	r3, [pc, #48]	; (13014 <LorawanClasscRxDone+0x88>)
   12fe4:	490c      	ldr	r1, [pc, #48]	; (13018 <LorawanClasscRxDone+0x8c>)
   12fe6:	4798      	blx	r3
   12fe8:	23fa      	movs	r3, #250	; 0xfa
   12fea:	009b      	lsls	r3, r3, #2
   12fec:	18cb      	adds	r3, r1, r3
   12fee:	21fa      	movs	r1, #250	; 0xfa
   12ff0:	0089      	lsls	r1, r1, #2
   12ff2:	4359      	muls	r1, r3
   12ff4:	9500      	str	r5, [sp, #0]
   12ff6:	002a      	movs	r2, r5
   12ff8:	4b08      	ldr	r3, [pc, #32]	; (1301c <LorawanClasscRxDone+0x90>)
   12ffa:	0030      	movs	r0, r6
   12ffc:	4d08      	ldr	r5, [pc, #32]	; (13020 <LorawanClasscRxDone+0x94>)
   12ffe:	47a8      	blx	r5
   13000:	e7d8      	b.n	12fb4 <LorawanClasscRxDone+0x28>
   13002:	46c0      	nop			; (mov r8, r8)
   13004:	20003348 	.word	0x20003348
   13008:	0000d74d 	.word	0x0000d74d
   1300c:	00011499 	.word	0x00011499
   13010:	00017155 	.word	0x00017155
   13014:	00013a8d 	.word	0x00013a8d
   13018:	000007d1 	.word	0x000007d1
   1301c:	00012f41 	.word	0x00012f41
   13020:	0000d5b5 	.word	0x0000d5b5

00013024 <LorawanClasscRxTimeout>:
   13024:	4a0c      	ldr	r2, [pc, #48]	; (13058 <LorawanClasscRxTimeout+0x34>)
   13026:	b510      	push	{r4, lr}
   13028:	0010      	movs	r0, r2
   1302a:	3084      	adds	r0, #132	; 0x84
   1302c:	7803      	ldrb	r3, [r0, #0]
   1302e:	240e      	movs	r4, #14
   13030:	0019      	movs	r1, r3
   13032:	4021      	ands	r1, r4
   13034:	2906      	cmp	r1, #6
   13036:	d107      	bne.n	13048 <LorawanClasscRxTimeout+0x24>
   13038:	2208      	movs	r2, #8
   1303a:	43a3      	bics	r3, r4
   1303c:	4313      	orrs	r3, r2
   1303e:	7003      	strb	r3, [r0, #0]
   13040:	2000      	movs	r0, #0
   13042:	4b06      	ldr	r3, [pc, #24]	; (1305c <LorawanClasscRxTimeout+0x38>)
   13044:	4798      	blx	r3
   13046:	e006      	b.n	13056 <LorawanClasscRxTimeout+0x32>
   13048:	290a      	cmp	r1, #10
   1304a:	d1f9      	bne.n	13040 <LorawanClasscRxTimeout+0x1c>
   1304c:	2388      	movs	r3, #136	; 0x88
   1304e:	009b      	lsls	r3, r3, #2
   13050:	5cd3      	ldrb	r3, [r2, r3]
   13052:	2b00      	cmp	r3, #0
   13054:	d0f4      	beq.n	13040 <LorawanClasscRxTimeout+0x1c>
   13056:	bd10      	pop	{r4, pc}
   13058:	20003348 	.word	0x20003348
   1305c:	00011499 	.word	0x00011499

00013060 <LorawanClasscNotifyAppOnReceive>:
   13060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13062:	001f      	movs	r7, r3
   13064:	2394      	movs	r3, #148	; 0x94
   13066:	0016      	movs	r6, r2
   13068:	4a07      	ldr	r2, [pc, #28]	; (13088 <LorawanClasscNotifyAppOnReceive+0x28>)
   1306a:	005b      	lsls	r3, r3, #1
   1306c:	0004      	movs	r4, r0
   1306e:	5cd0      	ldrb	r0, [r2, r3]
   13070:	4b06      	ldr	r3, [pc, #24]	; (1308c <LorawanClasscNotifyAppOnReceive+0x2c>)
   13072:	000d      	movs	r5, r1
   13074:	4798      	blx	r3
   13076:	2800      	cmp	r0, #0
   13078:	d105      	bne.n	13086 <LorawanClasscNotifyAppOnReceive+0x26>
   1307a:	0020      	movs	r0, r4
   1307c:	003b      	movs	r3, r7
   1307e:	0032      	movs	r2, r6
   13080:	0029      	movs	r1, r5
   13082:	4c03      	ldr	r4, [pc, #12]	; (13090 <LorawanClasscNotifyAppOnReceive+0x30>)
   13084:	47a0      	blx	r4
   13086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13088:	20003348 	.word	0x20003348
   1308c:	0000d74d 	.word	0x0000d74d
   13090:	000110bd 	.word	0x000110bd

00013094 <LorawanMcastEnable>:
   13094:	0002      	movs	r2, r0
   13096:	b510      	push	{r4, lr}
   13098:	200a      	movs	r0, #10
   1309a:	2903      	cmp	r1, #3
   1309c:	d822      	bhi.n	130e4 <LorawanMcastEnable+0x50>
   1309e:	4b1a      	ldr	r3, [pc, #104]	; (13108 <LorawanMcastEnable+0x74>)
   130a0:	2a00      	cmp	r2, #0
   130a2:	d020      	beq.n	130e6 <LorawanMcastEnable+0x52>
   130a4:	223c      	movs	r2, #60	; 0x3c
   130a6:	434a      	muls	r2, r1
   130a8:	189a      	adds	r2, r3, r2
   130aa:	3259      	adds	r2, #89	; 0x59
   130ac:	32ff      	adds	r2, #255	; 0xff
   130ae:	7a12      	ldrb	r2, [r2, #8]
   130b0:	0754      	lsls	r4, r2, #29
   130b2:	d512      	bpl.n	130da <LorawanMcastEnable+0x46>
   130b4:	0794      	lsls	r4, r2, #30
   130b6:	d510      	bpl.n	130da <LorawanMcastEnable+0x46>
   130b8:	07d2      	lsls	r2, r2, #31
   130ba:	0fd2      	lsrs	r2, r2, #31
   130bc:	2a01      	cmp	r2, #1
   130be:	d10c      	bne.n	130da <LorawanMcastEnable+0x46>
   130c0:	001c      	movs	r4, r3
   130c2:	34fd      	adds	r4, #253	; 0xfd
   130c4:	7824      	ldrb	r4, [r4, #0]
   130c6:	0764      	lsls	r4, r4, #29
   130c8:	d007      	beq.n	130da <LorawanMcastEnable+0x46>
   130ca:	202e      	movs	r0, #46	; 0x2e
   130cc:	408a      	lsls	r2, r1
   130ce:	30ff      	adds	r0, #255	; 0xff
   130d0:	5c19      	ldrb	r1, [r3, r0]
   130d2:	430a      	orrs	r2, r1
   130d4:	541a      	strb	r2, [r3, r0]
   130d6:	3826      	subs	r0, #38	; 0x26
   130d8:	38ff      	subs	r0, #255	; 0xff
   130da:	2196      	movs	r1, #150	; 0x96
   130dc:	0049      	lsls	r1, r1, #1
   130de:	5c5a      	ldrb	r2, [r3, r1]
   130e0:	3201      	adds	r2, #1
   130e2:	545a      	strb	r2, [r3, r1]
   130e4:	bd10      	pop	{r4, pc}
   130e6:	2201      	movs	r2, #1
   130e8:	408a      	lsls	r2, r1
   130ea:	202e      	movs	r0, #46	; 0x2e
   130ec:	0011      	movs	r1, r2
   130ee:	30ff      	adds	r0, #255	; 0xff
   130f0:	5c1a      	ldrb	r2, [r3, r0]
   130f2:	438a      	bics	r2, r1
   130f4:	2196      	movs	r1, #150	; 0x96
   130f6:	541a      	strb	r2, [r3, r0]
   130f8:	0049      	lsls	r1, r1, #1
   130fa:	5c5a      	ldrb	r2, [r3, r1]
   130fc:	3826      	subs	r0, #38	; 0x26
   130fe:	3a01      	subs	r2, #1
   13100:	545a      	strb	r2, [r3, r1]
   13102:	38ff      	subs	r0, #255	; 0xff
   13104:	e7ee      	b.n	130e4 <LorawanMcastEnable+0x50>
   13106:	46c0      	nop			; (mov r8, r8)
   13108:	20003348 	.word	0x20003348

0001310c <LorawanMcastValidateHdr>:
   1310c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1310e:	469c      	mov	ip, r3
   13110:	2400      	movs	r4, #0
   13112:	230a      	movs	r3, #10
   13114:	4f18      	ldr	r7, [pc, #96]	; (13178 <LorawanMcastValidateHdr+0x6c>)
   13116:	b2e5      	uxtb	r5, r4
   13118:	9501      	str	r5, [sp, #4]
   1311a:	252e      	movs	r5, #46	; 0x2e
   1311c:	35ff      	adds	r5, #255	; 0xff
   1311e:	5d7d      	ldrb	r5, [r7, r5]
   13120:	2601      	movs	r6, #1
   13122:	4125      	asrs	r5, r4
   13124:	4235      	tst	r5, r6
   13126:	d022      	beq.n	1316e <LorawanMcastValidateHdr+0x62>
   13128:	7886      	ldrb	r6, [r0, #2]
   1312a:	7845      	ldrb	r5, [r0, #1]
   1312c:	0236      	lsls	r6, r6, #8
   1312e:	432e      	orrs	r6, r5
   13130:	78c5      	ldrb	r5, [r0, #3]
   13132:	042d      	lsls	r5, r5, #16
   13134:	432e      	orrs	r6, r5
   13136:	7905      	ldrb	r5, [r0, #4]
   13138:	062d      	lsls	r5, r5, #24
   1313a:	4335      	orrs	r5, r6
   1313c:	263c      	movs	r6, #60	; 0x3c
   1313e:	4366      	muls	r6, r4
   13140:	3631      	adds	r6, #49	; 0x31
   13142:	36ff      	adds	r6, #255	; 0xff
   13144:	59be      	ldr	r6, [r7, r6]
   13146:	42b5      	cmp	r5, r6
   13148:	d111      	bne.n	1316e <LorawanMcastValidateHdr+0x62>
   1314a:	4d0c      	ldr	r5, [pc, #48]	; (1317c <LorawanMcastValidateHdr+0x70>)
   1314c:	782e      	ldrb	r6, [r5, #0]
   1314e:	2506      	movs	r5, #6
   13150:	422e      	tst	r6, r5
   13152:	d00c      	beq.n	1316e <LorawanMcastValidateHdr+0x62>
   13154:	2a00      	cmp	r2, #0
   13156:	d00a      	beq.n	1316e <LorawanMcastValidateHdr+0x62>
   13158:	7946      	ldrb	r6, [r0, #5]
   1315a:	3569      	adds	r5, #105	; 0x69
   1315c:	422e      	tst	r6, r5
   1315e:	d106      	bne.n	1316e <LorawanMcastValidateHdr+0x62>
   13160:	2903      	cmp	r1, #3
   13162:	d104      	bne.n	1316e <LorawanMcastValidateHdr+0x62>
   13164:	466d      	mov	r5, sp
   13166:	4663      	mov	r3, ip
   13168:	792d      	ldrb	r5, [r5, #4]
   1316a:	701d      	strb	r5, [r3, #0]
   1316c:	2308      	movs	r3, #8
   1316e:	3401      	adds	r4, #1
   13170:	2c04      	cmp	r4, #4
   13172:	d1d0      	bne.n	13116 <LorawanMcastValidateHdr+0xa>
   13174:	0018      	movs	r0, r3
   13176:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   13178:	20003348 	.word	0x20003348
   1317c:	20003445 	.word	0x20003445

00013180 <LorawanMcastProcessPkt>:
   13180:	b5f0      	push	{r4, r5, r6, r7, lr}
   13182:	0015      	movs	r5, r2
   13184:	223c      	movs	r2, #60	; 0x3c
   13186:	435a      	muls	r2, r3
   13188:	b089      	sub	sp, #36	; 0x24
   1318a:	9107      	str	r1, [sp, #28]
   1318c:	493f      	ldr	r1, [pc, #252]	; (1328c <LorawanMcastProcessPkt+0x10c>)
   1318e:	9006      	str	r0, [sp, #24]
   13190:	1889      	adds	r1, r1, r2
   13192:	31fc      	adds	r1, #252	; 0xfc
   13194:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
   13196:	6e08      	ldr	r0, [r1, #96]	; 0x60
   13198:	6d8a      	ldr	r2, [r1, #88]	; 0x58
   1319a:	4284      	cmp	r4, r0
   1319c:	d224      	bcs.n	131e8 <LorawanMcastProcessPkt+0x68>
   1319e:	2100      	movs	r1, #0
   131a0:	4294      	cmp	r4, r2
   131a2:	d802      	bhi.n	131aa <LorawanMcastProcessPkt+0x2a>
   131a4:	4282      	cmp	r2, r0
   131a6:	4192      	sbcs	r2, r2
   131a8:	4251      	negs	r1, r2
   131aa:	270a      	movs	r7, #10
   131ac:	2900      	cmp	r1, #0
   131ae:	d11d      	bne.n	131ec <LorawanMcastProcessPkt+0x6c>
   131b0:	4a36      	ldr	r2, [pc, #216]	; (1328c <LorawanMcastProcessPkt+0x10c>)
   131b2:	210e      	movs	r1, #14
   131b4:	0010      	movs	r0, r2
   131b6:	3084      	adds	r0, #132	; 0x84
   131b8:	7803      	ldrb	r3, [r0, #0]
   131ba:	001c      	movs	r4, r3
   131bc:	400c      	ands	r4, r1
   131be:	2c06      	cmp	r4, #6
   131c0:	d108      	bne.n	131d4 <LorawanMcastProcessPkt+0x54>
   131c2:	0014      	movs	r4, r2
   131c4:	34fd      	adds	r4, #253	; 0xfd
   131c6:	7824      	ldrb	r4, [r4, #0]
   131c8:	2c04      	cmp	r4, #4
   131ca:	d103      	bne.n	131d4 <LorawanMcastProcessPkt+0x54>
   131cc:	438b      	bics	r3, r1
   131ce:	3904      	subs	r1, #4
   131d0:	430b      	orrs	r3, r1
   131d2:	7003      	strb	r3, [r0, #0]
   131d4:	2390      	movs	r3, #144	; 0x90
   131d6:	2101      	movs	r1, #1
   131d8:	009b      	lsls	r3, r3, #2
   131da:	54d1      	strb	r1, [r2, r3]
   131dc:	2000      	movs	r0, #0
   131de:	4b2c      	ldr	r3, [pc, #176]	; (13290 <LorawanMcastProcessPkt+0x110>)
   131e0:	4798      	blx	r3
   131e2:	0038      	movs	r0, r7
   131e4:	b009      	add	sp, #36	; 0x24
   131e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   131e8:	4294      	cmp	r4, r2
   131ea:	d8db      	bhi.n	131a4 <LorawanMcastProcessPkt+0x24>
   131ec:	243c      	movs	r4, #60	; 0x3c
   131ee:	435c      	muls	r4, r3
   131f0:	4e26      	ldr	r6, [pc, #152]	; (1328c <LorawanMcastProcessPkt+0x10c>)
   131f2:	79ea      	ldrb	r2, [r5, #7]
   131f4:	1937      	adds	r7, r6, r4
   131f6:	003b      	movs	r3, r7
   131f8:	79a9      	ldrb	r1, [r5, #6]
   131fa:	0212      	lsls	r2, r2, #8
   131fc:	3355      	adds	r3, #85	; 0x55
   131fe:	430a      	orrs	r2, r1
   13200:	33ff      	adds	r3, #255	; 0xff
   13202:	801a      	strh	r2, [r3, #0]
   13204:	2105      	movs	r1, #5
   13206:	4b23      	ldr	r3, [pc, #140]	; (13294 <LorawanMcastProcessPkt+0x114>)
   13208:	37fc      	adds	r7, #252	; 0xfc
   1320a:	2000      	movs	r0, #0
   1320c:	4798      	blx	r3
   1320e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13210:	3445      	adds	r4, #69	; 0x45
   13212:	9304      	str	r3, [sp, #16]
   13214:	4b20      	ldr	r3, [pc, #128]	; (13298 <LorawanMcastProcessPkt+0x118>)
   13216:	9907      	ldr	r1, [sp, #28]
   13218:	9303      	str	r3, [sp, #12]
   1321a:	2319      	movs	r3, #25
   1321c:	34ff      	adds	r4, #255	; 0xff
   1321e:	9302      	str	r3, [sp, #8]
   13220:	19a4      	adds	r4, r4, r6
   13222:	3b16      	subs	r3, #22
   13224:	9806      	ldr	r0, [sp, #24]
   13226:	9400      	str	r4, [sp, #0]
   13228:	390d      	subs	r1, #13
   1322a:	9301      	str	r3, [sp, #4]
   1322c:	b2c9      	uxtb	r1, r1
   1322e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   13230:	2201      	movs	r2, #1
   13232:	3009      	adds	r0, #9
   13234:	4c19      	ldr	r4, [pc, #100]	; (1329c <LorawanMcastProcessPkt+0x11c>)
   13236:	47a0      	blx	r4
   13238:	2800      	cmp	r0, #0
   1323a:	d002      	beq.n	13242 <LorawanMcastProcessPkt+0xc2>
   1323c:	201f      	movs	r0, #31
   1323e:	4b18      	ldr	r3, [pc, #96]	; (132a0 <LorawanMcastProcessPkt+0x120>)
   13240:	4798      	blx	r3
   13242:	4918      	ldr	r1, [pc, #96]	; (132a4 <LorawanMcastProcessPkt+0x124>)
   13244:	2708      	movs	r7, #8
   13246:	784a      	ldrb	r2, [r1, #1]
   13248:	780b      	ldrb	r3, [r1, #0]
   1324a:	0212      	lsls	r2, r2, #8
   1324c:	431a      	orrs	r2, r3
   1324e:	788b      	ldrb	r3, [r1, #2]
   13250:	041b      	lsls	r3, r3, #16
   13252:	431a      	orrs	r2, r3
   13254:	78cb      	ldrb	r3, [r1, #3]
   13256:	061b      	lsls	r3, r3, #24
   13258:	4313      	orrs	r3, r2
   1325a:	d0a9      	beq.n	131b0 <LorawanMcastProcessPkt+0x30>
   1325c:	2220      	movs	r2, #32
   1325e:	3694      	adds	r6, #148	; 0x94
   13260:	7833      	ldrb	r3, [r6, #0]
   13262:	9906      	ldr	r1, [sp, #24]
   13264:	4393      	bics	r3, r2
   13266:	7033      	strb	r3, [r6, #0]
   13268:	78ab      	ldrb	r3, [r5, #2]
   1326a:	7868      	ldrb	r0, [r5, #1]
   1326c:	40bb      	lsls	r3, r7
   1326e:	4303      	orrs	r3, r0
   13270:	78e8      	ldrb	r0, [r5, #3]
   13272:	9a07      	ldr	r2, [sp, #28]
   13274:	0400      	lsls	r0, r0, #16
   13276:	4303      	orrs	r3, r0
   13278:	7928      	ldrb	r0, [r5, #4]
   1327a:	3a0c      	subs	r2, #12
   1327c:	0600      	lsls	r0, r0, #24
   1327e:	4318      	orrs	r0, r3
   13280:	b2d2      	uxtb	r2, r2
   13282:	19c9      	adds	r1, r1, r7
   13284:	003b      	movs	r3, r7
   13286:	4c08      	ldr	r4, [pc, #32]	; (132a8 <LorawanMcastProcessPkt+0x128>)
   13288:	47a0      	blx	r4
   1328a:	e791      	b.n	131b0 <LorawanMcastProcessPkt+0x30>
   1328c:	20003348 	.word	0x20003348
   13290:	00011499 	.word	0x00011499
   13294:	00009759 	.word	0x00009759
   13298:	2000310c 	.word	0x2000310c
   1329c:	00010f99 	.word	0x00010f99
   132a0:	00011059 	.word	0x00011059
   132a4:	200036a4 	.word	0x200036a4
   132a8:	000110bd 	.word	0x000110bd

000132ac <LorawanAddMcastAddr>:
   132ac:	b570      	push	{r4, r5, r6, lr}
   132ae:	260a      	movs	r6, #10
   132b0:	2903      	cmp	r1, #3
   132b2:	d818      	bhi.n	132e6 <LorawanAddMcastAddr+0x3a>
   132b4:	4b0d      	ldr	r3, [pc, #52]	; (132ec <LorawanAddMcastAddr+0x40>)
   132b6:	681a      	ldr	r2, [r3, #0]
   132b8:	0a15      	lsrs	r5, r2, #8
   132ba:	791a      	ldrb	r2, [r3, #4]
   132bc:	0612      	lsls	r2, r2, #24
   132be:	432a      	orrs	r2, r5
   132c0:	4282      	cmp	r2, r0
   132c2:	d010      	beq.n	132e6 <LorawanAddMcastAddr+0x3a>
   132c4:	243c      	movs	r4, #60	; 0x3c
   132c6:	434c      	muls	r4, r1
   132c8:	191c      	adds	r4, r3, r4
   132ca:	0023      	movs	r3, r4
   132cc:	33fc      	adds	r3, #252	; 0xfc
   132ce:	6358      	str	r0, [r3, #52]	; 0x34
   132d0:	2106      	movs	r1, #6
   132d2:	2000      	movs	r0, #0
   132d4:	4b06      	ldr	r3, [pc, #24]	; (132f0 <LorawanAddMcastAddr+0x44>)
   132d6:	4798      	blx	r3
   132d8:	2201      	movs	r2, #1
   132da:	3459      	adds	r4, #89	; 0x59
   132dc:	34ff      	adds	r4, #255	; 0xff
   132de:	7a21      	ldrb	r1, [r4, #8]
   132e0:	3e02      	subs	r6, #2
   132e2:	430a      	orrs	r2, r1
   132e4:	7222      	strb	r2, [r4, #8]
   132e6:	0030      	movs	r0, r6
   132e8:	bd70      	pop	{r4, r5, r6, pc}
   132ea:	46c0      	nop			; (mov r8, r8)
   132ec:	20003348 	.word	0x20003348
   132f0:	00009759 	.word	0x00009759

000132f4 <LorawanAddMcastAppskey>:
   132f4:	b570      	push	{r4, r5, r6, lr}
   132f6:	0006      	movs	r6, r0
   132f8:	200a      	movs	r0, #10
   132fa:	2903      	cmp	r1, #3
   132fc:	d818      	bhi.n	13330 <LorawanAddMcastAppskey+0x3c>
   132fe:	2e00      	cmp	r6, #0
   13300:	d016      	beq.n	13330 <LorawanAddMcastAppskey+0x3c>
   13302:	253c      	movs	r5, #60	; 0x3c
   13304:	434d      	muls	r5, r1
   13306:	0028      	movs	r0, r5
   13308:	4c0a      	ldr	r4, [pc, #40]	; (13334 <LorawanAddMcastAppskey+0x40>)
   1330a:	3045      	adds	r0, #69	; 0x45
   1330c:	30ff      	adds	r0, #255	; 0xff
   1330e:	2210      	movs	r2, #16
   13310:	1900      	adds	r0, r0, r4
   13312:	0031      	movs	r1, r6
   13314:	4b08      	ldr	r3, [pc, #32]	; (13338 <LorawanAddMcastAppskey+0x44>)
   13316:	4798      	blx	r3
   13318:	4b08      	ldr	r3, [pc, #32]	; (1333c <LorawanAddMcastAppskey+0x48>)
   1331a:	2107      	movs	r1, #7
   1331c:	2000      	movs	r0, #0
   1331e:	4798      	blx	r3
   13320:	2304      	movs	r3, #4
   13322:	2008      	movs	r0, #8
   13324:	1964      	adds	r4, r4, r5
   13326:	3459      	adds	r4, #89	; 0x59
   13328:	34ff      	adds	r4, #255	; 0xff
   1332a:	7a22      	ldrb	r2, [r4, #8]
   1332c:	4313      	orrs	r3, r2
   1332e:	7223      	strb	r3, [r4, #8]
   13330:	bd70      	pop	{r4, r5, r6, pc}
   13332:	46c0      	nop			; (mov r8, r8)
   13334:	20003348 	.word	0x20003348
   13338:	00016a0f 	.word	0x00016a0f
   1333c:	00009759 	.word	0x00009759

00013340 <LorawanAddMcastNwkskey>:
   13340:	b570      	push	{r4, r5, r6, lr}
   13342:	0006      	movs	r6, r0
   13344:	200a      	movs	r0, #10
   13346:	2903      	cmp	r1, #3
   13348:	d818      	bhi.n	1337c <LorawanAddMcastNwkskey+0x3c>
   1334a:	2e00      	cmp	r6, #0
   1334c:	d016      	beq.n	1337c <LorawanAddMcastNwkskey+0x3c>
   1334e:	253c      	movs	r5, #60	; 0x3c
   13350:	434d      	muls	r5, r1
   13352:	0028      	movs	r0, r5
   13354:	4c0a      	ldr	r4, [pc, #40]	; (13380 <LorawanAddMcastNwkskey+0x40>)
   13356:	3035      	adds	r0, #53	; 0x35
   13358:	30ff      	adds	r0, #255	; 0xff
   1335a:	2210      	movs	r2, #16
   1335c:	1900      	adds	r0, r0, r4
   1335e:	0031      	movs	r1, r6
   13360:	4b08      	ldr	r3, [pc, #32]	; (13384 <LorawanAddMcastNwkskey+0x44>)
   13362:	4798      	blx	r3
   13364:	4b08      	ldr	r3, [pc, #32]	; (13388 <LorawanAddMcastNwkskey+0x48>)
   13366:	2108      	movs	r1, #8
   13368:	2000      	movs	r0, #0
   1336a:	4798      	blx	r3
   1336c:	2302      	movs	r3, #2
   1336e:	2008      	movs	r0, #8
   13370:	1964      	adds	r4, r4, r5
   13372:	3459      	adds	r4, #89	; 0x59
   13374:	34ff      	adds	r4, #255	; 0xff
   13376:	7a22      	ldrb	r2, [r4, #8]
   13378:	4313      	orrs	r3, r2
   1337a:	7223      	strb	r3, [r4, #8]
   1337c:	bd70      	pop	{r4, r5, r6, pc}
   1337e:	46c0      	nop			; (mov r8, r8)
   13380:	20003348 	.word	0x20003348
   13384:	00016a0f 	.word	0x00016a0f
   13388:	00009759 	.word	0x00009759

0001338c <LorawanAddMcastFcntMin>:
   1338c:	220a      	movs	r2, #10
   1338e:	2903      	cmp	r1, #3
   13390:	d807      	bhi.n	133a2 <LorawanAddMcastFcntMin+0x16>
   13392:	233c      	movs	r3, #60	; 0x3c
   13394:	434b      	muls	r3, r1
   13396:	4904      	ldr	r1, [pc, #16]	; (133a8 <LorawanAddMcastFcntMin+0x1c>)
   13398:	3a02      	subs	r2, #2
   1339a:	18c9      	adds	r1, r1, r3
   1339c:	31fc      	adds	r1, #252	; 0xfc
   1339e:	65c8      	str	r0, [r1, #92]	; 0x5c
   133a0:	6588      	str	r0, [r1, #88]	; 0x58
   133a2:	0010      	movs	r0, r2
   133a4:	4770      	bx	lr
   133a6:	46c0      	nop			; (mov r8, r8)
   133a8:	20003348 	.word	0x20003348

000133ac <LorawanAddMcastFcntMax>:
   133ac:	220a      	movs	r2, #10
   133ae:	2903      	cmp	r1, #3
   133b0:	d806      	bhi.n	133c0 <LorawanAddMcastFcntMax+0x14>
   133b2:	233c      	movs	r3, #60	; 0x3c
   133b4:	434b      	muls	r3, r1
   133b6:	4903      	ldr	r1, [pc, #12]	; (133c4 <LorawanAddMcastFcntMax+0x18>)
   133b8:	3a02      	subs	r2, #2
   133ba:	18c9      	adds	r1, r1, r3
   133bc:	31fc      	adds	r1, #252	; 0xfc
   133be:	6608      	str	r0, [r1, #96]	; 0x60
   133c0:	0010      	movs	r0, r2
   133c2:	4770      	bx	lr
   133c4:	20003348 	.word	0x20003348

000133c8 <LorawanAddMcastDlFrequency>:
   133c8:	b513      	push	{r0, r1, r4, lr}
   133ca:	000c      	movs	r4, r1
   133cc:	9001      	str	r0, [sp, #4]
   133ce:	2903      	cmp	r1, #3
   133d0:	d901      	bls.n	133d6 <LorawanAddMcastDlFrequency+0xe>
   133d2:	200a      	movs	r0, #10
   133d4:	bd16      	pop	{r1, r2, r4, pc}
   133d6:	a901      	add	r1, sp, #4
   133d8:	2001      	movs	r0, #1
   133da:	4b0a      	ldr	r3, [pc, #40]	; (13404 <LorawanAddMcastDlFrequency+0x3c>)
   133dc:	4798      	blx	r3
   133de:	2808      	cmp	r0, #8
   133e0:	d1f7      	bne.n	133d2 <LorawanAddMcastDlFrequency+0xa>
   133e2:	213c      	movs	r1, #60	; 0x3c
   133e4:	4361      	muls	r1, r4
   133e6:	4b08      	ldr	r3, [pc, #32]	; (13408 <LorawanAddMcastDlFrequency+0x40>)
   133e8:	9a01      	ldr	r2, [sp, #4]
   133ea:	1859      	adds	r1, r3, r1
   133ec:	31fc      	adds	r1, #252	; 0xfc
   133ee:	336f      	adds	r3, #111	; 0x6f
   133f0:	668a      	str	r2, [r1, #104]	; 0x68
   133f2:	0a11      	lsrs	r1, r2, #8
   133f4:	701a      	strb	r2, [r3, #0]
   133f6:	7059      	strb	r1, [r3, #1]
   133f8:	0c11      	lsrs	r1, r2, #16
   133fa:	0e12      	lsrs	r2, r2, #24
   133fc:	7099      	strb	r1, [r3, #2]
   133fe:	70da      	strb	r2, [r3, #3]
   13400:	e7e8      	b.n	133d4 <LorawanAddMcastDlFrequency+0xc>
   13402:	46c0      	nop			; (mov r8, r8)
   13404:	0000d089 	.word	0x0000d089
   13408:	20003348 	.word	0x20003348

0001340c <LorawanAddMcastDatarate>:
   1340c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1340e:	466b      	mov	r3, sp
   13410:	1ddd      	adds	r5, r3, #7
   13412:	000c      	movs	r4, r1
   13414:	7028      	strb	r0, [r5, #0]
   13416:	2903      	cmp	r1, #3
   13418:	d901      	bls.n	1341e <LorawanAddMcastDatarate+0x12>
   1341a:	200a      	movs	r0, #10
   1341c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1341e:	0029      	movs	r1, r5
   13420:	200f      	movs	r0, #15
   13422:	4b07      	ldr	r3, [pc, #28]	; (13440 <LorawanAddMcastDatarate+0x34>)
   13424:	4798      	blx	r3
   13426:	2808      	cmp	r0, #8
   13428:	d1f7      	bne.n	1341a <LorawanAddMcastDatarate+0xe>
   1342a:	213c      	movs	r1, #60	; 0x3c
   1342c:	4361      	muls	r1, r4
   1342e:	4b05      	ldr	r3, [pc, #20]	; (13444 <LorawanAddMcastDatarate+0x38>)
   13430:	782a      	ldrb	r2, [r5, #0]
   13432:	1859      	adds	r1, r3, r1
   13434:	3169      	adds	r1, #105	; 0x69
   13436:	31ff      	adds	r1, #255	; 0xff
   13438:	3373      	adds	r3, #115	; 0x73
   1343a:	700a      	strb	r2, [r1, #0]
   1343c:	701a      	strb	r2, [r3, #0]
   1343e:	e7ed      	b.n	1341c <LorawanAddMcastDatarate+0x10>
   13440:	0000d089 	.word	0x0000d089
   13444:	20003348 	.word	0x20003348

00013448 <LorawanAddMcastPeriodicity>:
   13448:	220a      	movs	r2, #10
   1344a:	2903      	cmp	r1, #3
   1344c:	d809      	bhi.n	13462 <LorawanAddMcastPeriodicity+0x1a>
   1344e:	2807      	cmp	r0, #7
   13450:	d807      	bhi.n	13462 <LorawanAddMcastPeriodicity+0x1a>
   13452:	233c      	movs	r3, #60	; 0x3c
   13454:	434b      	muls	r3, r1
   13456:	4904      	ldr	r1, [pc, #16]	; (13468 <LorawanAddMcastPeriodicity+0x20>)
   13458:	3a02      	subs	r2, #2
   1345a:	18c9      	adds	r1, r1, r3
   1345c:	316a      	adds	r1, #106	; 0x6a
   1345e:	31ff      	adds	r1, #255	; 0xff
   13460:	7008      	strb	r0, [r1, #0]
   13462:	0010      	movs	r0, r2
   13464:	4770      	bx	lr
   13466:	46c0      	nop			; (mov r8, r8)
   13468:	20003348 	.word	0x20003348

0001346c <Radio_LBTScanTimeout>:
   1346c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1346e:	4c1c      	ldr	r4, [pc, #112]	; (134e0 <Radio_LBTScanTimeout+0x74>)
   13470:	0025      	movs	r5, r4
   13472:	0023      	movs	r3, r4
   13474:	354f      	adds	r5, #79	; 0x4f
   13476:	7829      	ldrb	r1, [r5, #0]
   13478:	3340      	adds	r3, #64	; 0x40
   1347a:	3101      	adds	r1, #1
   1347c:	b2c9      	uxtb	r1, r1
   1347e:	7029      	strb	r1, [r5, #0]
   13480:	781b      	ldrb	r3, [r3, #0]
   13482:	428b      	cmp	r3, r1
   13484:	d315      	bcc.n	134b2 <Radio_LBTScanTimeout+0x46>
   13486:	260e      	movs	r6, #14
   13488:	446e      	add	r6, sp
   1348a:	4b16      	ldr	r3, [pc, #88]	; (134e4 <Radio_LBTScanTimeout+0x78>)
   1348c:	0030      	movs	r0, r6
   1348e:	4798      	blx	r3
   13490:	2300      	movs	r3, #0
   13492:	5ef2      	ldrsh	r2, [r6, r3]
   13494:	782b      	ldrb	r3, [r5, #0]
   13496:	4353      	muls	r3, r2
   13498:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1349a:	189b      	adds	r3, r3, r2
   1349c:	6463      	str	r3, [r4, #68]	; 0x44
   1349e:	0023      	movs	r3, r4
   134a0:	2200      	movs	r2, #0
   134a2:	3350      	adds	r3, #80	; 0x50
   134a4:	7818      	ldrb	r0, [r3, #0]
   134a6:	9200      	str	r2, [sp, #0]
   134a8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   134aa:	4b0f      	ldr	r3, [pc, #60]	; (134e8 <Radio_LBTScanTimeout+0x7c>)
   134ac:	4c0f      	ldr	r4, [pc, #60]	; (134ec <Radio_LBTScanTimeout+0x80>)
   134ae:	47a0      	blx	r4
   134b0:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
   134b2:	2380      	movs	r3, #128	; 0x80
   134b4:	4a0e      	ldr	r2, [pc, #56]	; (134f0 <Radio_LBTScanTimeout+0x84>)
   134b6:	009b      	lsls	r3, r3, #2
   134b8:	8810      	ldrh	r0, [r2, #0]
   134ba:	4303      	orrs	r3, r0
   134bc:	8013      	strh	r3, [r2, #0]
   134be:	6c63      	ldr	r3, [r4, #68]	; 0x44
   134c0:	0058      	lsls	r0, r3, #1
   134c2:	1e4b      	subs	r3, r1, #1
   134c4:	4359      	muls	r1, r3
   134c6:	4b0b      	ldr	r3, [pc, #44]	; (134f4 <Radio_LBTScanTimeout+0x88>)
   134c8:	b289      	uxth	r1, r1
   134ca:	4798      	blx	r3
   134cc:	0023      	movs	r3, r4
   134ce:	334c      	adds	r3, #76	; 0x4c
   134d0:	8018      	strh	r0, [r3, #0]
   134d2:	2300      	movs	r3, #0
   134d4:	2001      	movs	r0, #1
   134d6:	702b      	strb	r3, [r5, #0]
   134d8:	6463      	str	r3, [r4, #68]	; 0x44
   134da:	4b07      	ldr	r3, [pc, #28]	; (134f8 <Radio_LBTScanTimeout+0x8c>)
   134dc:	4798      	blx	r3
   134de:	e7e7      	b.n	134b0 <Radio_LBTScanTimeout+0x44>
   134e0:	20002f50 	.word	0x20002f50
   134e4:	0000de0d 	.word	0x0000de0d
   134e8:	0001346d 	.word	0x0001346d
   134ec:	0000d5b5 	.word	0x0000d5b5
   134f0:	2000321c 	.word	0x2000321c
   134f4:	000138c1 	.word	0x000138c1
   134f8:	0000edd9 	.word	0x0000edd9

000134fc <RADIO_ScanHandler>:
   134fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   134fe:	4b12      	ldr	r3, [pc, #72]	; (13548 <RADIO_ScanHandler+0x4c>)
   13500:	4798      	blx	r3
   13502:	2000      	movs	r0, #0
   13504:	4b11      	ldr	r3, [pc, #68]	; (1354c <RADIO_ScanHandler+0x50>)
   13506:	4798      	blx	r3
   13508:	4d11      	ldr	r5, [pc, #68]	; (13550 <RADIO_ScanHandler+0x54>)
   1350a:	4b12      	ldr	r3, [pc, #72]	; (13554 <RADIO_ScanHandler+0x58>)
   1350c:	6828      	ldr	r0, [r5, #0]
   1350e:	2400      	movs	r4, #0
   13510:	4798      	blx	r3
   13512:	002b      	movs	r3, r5
   13514:	4e10      	ldr	r6, [pc, #64]	; (13558 <RADIO_ScanHandler+0x5c>)
   13516:	334c      	adds	r3, #76	; 0x4c
   13518:	2201      	movs	r2, #1
   1351a:	0021      	movs	r1, r4
   1351c:	0020      	movs	r0, r4
   1351e:	801c      	strh	r4, [r3, #0]
   13520:	47b0      	blx	r6
   13522:	4b0e      	ldr	r3, [pc, #56]	; (1355c <RADIO_ScanHandler+0x60>)
   13524:	2109      	movs	r1, #9
   13526:	2012      	movs	r0, #18
   13528:	4798      	blx	r3
   1352a:	3550      	adds	r5, #80	; 0x50
   1352c:	0022      	movs	r2, r4
   1352e:	0021      	movs	r1, r4
   13530:	2005      	movs	r0, #5
   13532:	47b0      	blx	r6
   13534:	7828      	ldrb	r0, [r5, #0]
   13536:	4b0a      	ldr	r3, [pc, #40]	; (13560 <RADIO_ScanHandler+0x64>)
   13538:	4d0a      	ldr	r5, [pc, #40]	; (13564 <RADIO_ScanHandler+0x68>)
   1353a:	9400      	str	r4, [sp, #0]
   1353c:	0022      	movs	r2, r4
   1353e:	490a      	ldr	r1, [pc, #40]	; (13568 <RADIO_ScanHandler+0x6c>)
   13540:	47a8      	blx	r5
   13542:	0020      	movs	r0, r4
   13544:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   13546:	46c0      	nop			; (mov r8, r8)
   13548:	0000f449 	.word	0x0000f449
   1354c:	0000f08d 	.word	0x0000f08d
   13550:	20002f50 	.word	0x20002f50
   13554:	0000e7d1 	.word	0x0000e7d1
   13558:	0000dbf1 	.word	0x0000dbf1
   1355c:	0000c9c9 	.word	0x0000c9c9
   13560:	0001346d 	.word	0x0001346d
   13564:	0000d5b5 	.word	0x0000d5b5
   13568:	00002328 	.word	0x00002328

0001356c <radioScanDoneHandler>:
   1356c:	b530      	push	{r4, r5, lr}
   1356e:	4a18      	ldr	r2, [pc, #96]	; (135d0 <radioScanDoneHandler+0x64>)
   13570:	4918      	ldr	r1, [pc, #96]	; (135d4 <radioScanDoneHandler+0x68>)
   13572:	8813      	ldrh	r3, [r2, #0]
   13574:	b085      	sub	sp, #20
   13576:	400b      	ands	r3, r1
   13578:	8013      	strh	r3, [r2, #0]
   1357a:	2200      	movs	r2, #0
   1357c:	4b16      	ldr	r3, [pc, #88]	; (135d8 <radioScanDoneHandler+0x6c>)
   1357e:	0011      	movs	r1, r2
   13580:	0010      	movs	r0, r2
   13582:	4798      	blx	r3
   13584:	2000      	movs	r0, #0
   13586:	4b15      	ldr	r3, [pc, #84]	; (135dc <radioScanDoneHandler+0x70>)
   13588:	4798      	blx	r3
   1358a:	4b15      	ldr	r3, [pc, #84]	; (135e0 <radioScanDoneHandler+0x74>)
   1358c:	4798      	blx	r3
   1358e:	4c15      	ldr	r4, [pc, #84]	; (135e4 <radioScanDoneHandler+0x78>)
   13590:	0023      	movs	r3, r4
   13592:	334c      	adds	r3, #76	; 0x4c
   13594:	2100      	movs	r1, #0
   13596:	5e59      	ldrsh	r1, [r3, r1]
   13598:	233e      	movs	r3, #62	; 0x3e
   1359a:	5ee2      	ldrsh	r2, [r4, r3]
   1359c:	4b12      	ldr	r3, [pc, #72]	; (135e8 <radioScanDoneHandler+0x7c>)
   1359e:	4291      	cmp	r1, r2
   135a0:	da06      	bge.n	135b0 <radioScanDoneHandler+0x44>
   135a2:	2002      	movs	r0, #2
   135a4:	4798      	blx	r3
   135a6:	4b11      	ldr	r3, [pc, #68]	; (135ec <radioScanDoneHandler+0x80>)
   135a8:	4798      	blx	r3
   135aa:	2000      	movs	r0, #0
   135ac:	b005      	add	sp, #20
   135ae:	bd30      	pop	{r4, r5, pc}
   135b0:	2207      	movs	r2, #7
   135b2:	ad01      	add	r5, sp, #4
   135b4:	2001      	movs	r0, #1
   135b6:	702a      	strb	r2, [r5, #0]
   135b8:	4798      	blx	r3
   135ba:	4b0d      	ldr	r3, [pc, #52]	; (135f0 <radioScanDoneHandler+0x84>)
   135bc:	781b      	ldrb	r3, [r3, #0]
   135be:	079b      	lsls	r3, r3, #30
   135c0:	d5f3      	bpl.n	135aa <radioScanDoneHandler+0x3e>
   135c2:	6923      	ldr	r3, [r4, #16]
   135c4:	2b00      	cmp	r3, #0
   135c6:	d0f0      	beq.n	135aa <radioScanDoneHandler+0x3e>
   135c8:	0029      	movs	r1, r5
   135ca:	2002      	movs	r0, #2
   135cc:	4798      	blx	r3
   135ce:	e7ec      	b.n	135aa <radioScanDoneHandler+0x3e>
   135d0:	2000321c 	.word	0x2000321c
   135d4:	fffffdff 	.word	0xfffffdff
   135d8:	0000dbf1 	.word	0x0000dbf1
   135dc:	0000f0c1 	.word	0x0000f0c1
   135e0:	0000f579 	.word	0x0000f579
   135e4:	20002f50 	.word	0x20002f50
   135e8:	0000ee85 	.word	0x0000ee85
   135ec:	0000f845 	.word	0x0000f845
   135f0:	2000321e 	.word	0x2000321e

000135f4 <common_tc_read_count>:
   135f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   135f6:	4b0d      	ldr	r3, [pc, #52]	; (1362c <common_tc_read_count+0x38>)
   135f8:	4798      	blx	r3
   135fa:	4b0d      	ldr	r3, [pc, #52]	; (13630 <common_tc_read_count+0x3c>)
   135fc:	781b      	ldrb	r3, [r3, #0]
   135fe:	2b00      	cmp	r3, #0
   13600:	d00e      	beq.n	13620 <common_tc_read_count+0x2c>
   13602:	4b0c      	ldr	r3, [pc, #48]	; (13634 <common_tc_read_count+0x40>)
   13604:	781d      	ldrb	r5, [r3, #0]
   13606:	4b0a      	ldr	r3, [pc, #40]	; (13630 <common_tc_read_count+0x3c>)
   13608:	781f      	ldrb	r7, [r3, #0]
   1360a:	4c0b      	ldr	r4, [pc, #44]	; (13638 <common_tc_read_count+0x44>)
   1360c:	1c29      	adds	r1, r5, #0
   1360e:	47a0      	blx	r4
   13610:	1c06      	adds	r6, r0, #0
   13612:	480a      	ldr	r0, [pc, #40]	; (1363c <common_tc_read_count+0x48>)
   13614:	1c29      	adds	r1, r5, #0
   13616:	47a0      	blx	r4
   13618:	4378      	muls	r0, r7
   1361a:	1830      	adds	r0, r6, r0
   1361c:	b280      	uxth	r0, r0
   1361e:	e004      	b.n	1362a <common_tc_read_count+0x36>
   13620:	4b04      	ldr	r3, [pc, #16]	; (13634 <common_tc_read_count+0x40>)
   13622:	7819      	ldrb	r1, [r3, #0]
   13624:	4b04      	ldr	r3, [pc, #16]	; (13638 <common_tc_read_count+0x44>)
   13626:	4798      	blx	r3
   13628:	b280      	uxth	r0, r0
   1362a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1362c:	0000de41 	.word	0x0000de41
   13630:	200020b8 	.word	0x200020b8
   13634:	200036ac 	.word	0x200036ac
   13638:	000138c1 	.word	0x000138c1
   1363c:	0000ffff 	.word	0x0000ffff

00013640 <common_tc_compare_stop>:
   13640:	b508      	push	{r3, lr}
   13642:	4b05      	ldr	r3, [pc, #20]	; (13658 <common_tc_compare_stop+0x18>)
   13644:	4798      	blx	r3
   13646:	4b05      	ldr	r3, [pc, #20]	; (1365c <common_tc_compare_stop+0x1c>)
   13648:	4798      	blx	r3
   1364a:	4b05      	ldr	r3, [pc, #20]	; (13660 <common_tc_compare_stop+0x20>)
   1364c:	2200      	movs	r2, #0
   1364e:	605a      	str	r2, [r3, #4]
   13650:	811a      	strh	r2, [r3, #8]
   13652:	4b04      	ldr	r3, [pc, #16]	; (13664 <common_tc_compare_stop+0x24>)
   13654:	4798      	blx	r3
   13656:	bd08      	pop	{r3, pc}
   13658:	0000de55 	.word	0x0000de55
   1365c:	0000df0d 	.word	0x0000df0d
   13660:	200020b8 	.word	0x200020b8
   13664:	0000df31 	.word	0x0000df31

00013668 <common_tc_delay>:
   13668:	b510      	push	{r4, lr}
   1366a:	1c04      	adds	r4, r0, #0
   1366c:	4b13      	ldr	r3, [pc, #76]	; (136bc <common_tc_delay+0x54>)
   1366e:	4798      	blx	r3
   13670:	4b13      	ldr	r3, [pc, #76]	; (136c0 <common_tc_delay+0x58>)
   13672:	781a      	ldrb	r2, [r3, #0]
   13674:	4362      	muls	r2, r4
   13676:	1881      	adds	r1, r0, r2
   13678:	4b12      	ldr	r3, [pc, #72]	; (136c4 <common_tc_delay+0x5c>)
   1367a:	6059      	str	r1, [r3, #4]
   1367c:	6859      	ldr	r1, [r3, #4]
   1367e:	0c09      	lsrs	r1, r1, #16
   13680:	6059      	str	r1, [r3, #4]
   13682:	685b      	ldr	r3, [r3, #4]
   13684:	2b00      	cmp	r3, #0
   13686:	d007      	beq.n	13698 <common_tc_delay+0x30>
   13688:	4b0e      	ldr	r3, [pc, #56]	; (136c4 <common_tc_delay+0x5c>)
   1368a:	6859      	ldr	r1, [r3, #4]
   1368c:	3201      	adds	r2, #1
   1368e:	1880      	adds	r0, r0, r2
   13690:	8118      	strh	r0, [r3, #8]
   13692:	4b0d      	ldr	r3, [pc, #52]	; (136c8 <common_tc_delay+0x60>)
   13694:	4798      	blx	r3
   13696:	e004      	b.n	136a2 <common_tc_delay+0x3a>
   13698:	1882      	adds	r2, r0, r2
   1369a:	4b0a      	ldr	r3, [pc, #40]	; (136c4 <common_tc_delay+0x5c>)
   1369c:	811a      	strh	r2, [r3, #8]
   1369e:	4b0b      	ldr	r3, [pc, #44]	; (136cc <common_tc_delay+0x64>)
   136a0:	4798      	blx	r3
   136a2:	4b08      	ldr	r3, [pc, #32]	; (136c4 <common_tc_delay+0x5c>)
   136a4:	891b      	ldrh	r3, [r3, #8]
   136a6:	2b63      	cmp	r3, #99	; 0x63
   136a8:	d802      	bhi.n	136b0 <common_tc_delay+0x48>
   136aa:	3364      	adds	r3, #100	; 0x64
   136ac:	4a05      	ldr	r2, [pc, #20]	; (136c4 <common_tc_delay+0x5c>)
   136ae:	8113      	strh	r3, [r2, #8]
   136b0:	4b04      	ldr	r3, [pc, #16]	; (136c4 <common_tc_delay+0x5c>)
   136b2:	8918      	ldrh	r0, [r3, #8]
   136b4:	4b06      	ldr	r3, [pc, #24]	; (136d0 <common_tc_delay+0x68>)
   136b6:	4798      	blx	r3
   136b8:	bd10      	pop	{r4, pc}
   136ba:	46c0      	nop			; (mov r8, r8)
   136bc:	0000de41 	.word	0x0000de41
   136c0:	200036ac 	.word	0x200036ac
   136c4:	200020b8 	.word	0x200020b8
   136c8:	0000de55 	.word	0x0000de55
   136cc:	0000de69 	.word	0x0000de69
   136d0:	0000def5 	.word	0x0000def5

000136d4 <common_tc_init>:
   136d4:	b508      	push	{r3, lr}
   136d6:	2200      	movs	r2, #0
   136d8:	4b03      	ldr	r3, [pc, #12]	; (136e8 <common_tc_init+0x14>)
   136da:	701a      	strb	r2, [r3, #0]
   136dc:	4b03      	ldr	r3, [pc, #12]	; (136ec <common_tc_init+0x18>)
   136de:	4798      	blx	r3
   136e0:	4b03      	ldr	r3, [pc, #12]	; (136f0 <common_tc_init+0x1c>)
   136e2:	7018      	strb	r0, [r3, #0]
   136e4:	bd08      	pop	{r3, pc}
   136e6:	46c0      	nop			; (mov r8, r8)
   136e8:	200020b8 	.word	0x200020b8
   136ec:	0000df49 	.word	0x0000df49
   136f0:	200036ac 	.word	0x200036ac

000136f4 <tmr_ovf_callback>:
   136f4:	b508      	push	{r3, lr}
   136f6:	4b0e      	ldr	r3, [pc, #56]	; (13730 <tmr_ovf_callback+0x3c>)
   136f8:	685b      	ldr	r3, [r3, #4]
   136fa:	2b00      	cmp	r3, #0
   136fc:	d007      	beq.n	1370e <tmr_ovf_callback+0x1a>
   136fe:	4a0c      	ldr	r2, [pc, #48]	; (13730 <tmr_ovf_callback+0x3c>)
   13700:	6853      	ldr	r3, [r2, #4]
   13702:	3b01      	subs	r3, #1
   13704:	6053      	str	r3, [r2, #4]
   13706:	2b00      	cmp	r3, #0
   13708:	d101      	bne.n	1370e <tmr_ovf_callback+0x1a>
   1370a:	4b0a      	ldr	r3, [pc, #40]	; (13734 <tmr_ovf_callback+0x40>)
   1370c:	4798      	blx	r3
   1370e:	4a08      	ldr	r2, [pc, #32]	; (13730 <tmr_ovf_callback+0x3c>)
   13710:	7813      	ldrb	r3, [r2, #0]
   13712:	3301      	adds	r3, #1
   13714:	b2db      	uxtb	r3, r3
   13716:	7013      	strb	r3, [r2, #0]
   13718:	4a07      	ldr	r2, [pc, #28]	; (13738 <tmr_ovf_callback+0x44>)
   1371a:	7812      	ldrb	r2, [r2, #0]
   1371c:	429a      	cmp	r2, r3
   1371e:	d806      	bhi.n	1372e <tmr_ovf_callback+0x3a>
   13720:	4b03      	ldr	r3, [pc, #12]	; (13730 <tmr_ovf_callback+0x3c>)
   13722:	2200      	movs	r2, #0
   13724:	701a      	strb	r2, [r3, #0]
   13726:	68db      	ldr	r3, [r3, #12]
   13728:	2b00      	cmp	r3, #0
   1372a:	d000      	beq.n	1372e <tmr_ovf_callback+0x3a>
   1372c:	4798      	blx	r3
   1372e:	bd08      	pop	{r3, pc}
   13730:	200020b8 	.word	0x200020b8
   13734:	0000de69 	.word	0x0000de69
   13738:	200036ac 	.word	0x200036ac

0001373c <tmr_cca_callback>:
   1373c:	b508      	push	{r3, lr}
   1373e:	4b04      	ldr	r3, [pc, #16]	; (13750 <tmr_cca_callback+0x14>)
   13740:	4798      	blx	r3
   13742:	4b04      	ldr	r3, [pc, #16]	; (13754 <tmr_cca_callback+0x18>)
   13744:	691b      	ldr	r3, [r3, #16]
   13746:	2b00      	cmp	r3, #0
   13748:	d000      	beq.n	1374c <tmr_cca_callback+0x10>
   1374a:	4798      	blx	r3
   1374c:	bd08      	pop	{r3, pc}
   1374e:	46c0      	nop			; (mov r8, r8)
   13750:	0000de55 	.word	0x0000de55
   13754:	200020b8 	.word	0x200020b8

00013758 <set_common_tc_overflow_callback>:
   13758:	4b01      	ldr	r3, [pc, #4]	; (13760 <set_common_tc_overflow_callback+0x8>)
   1375a:	60d8      	str	r0, [r3, #12]
   1375c:	4770      	bx	lr
   1375e:	46c0      	nop			; (mov r8, r8)
   13760:	200020b8 	.word	0x200020b8

00013764 <set_common_tc_expiry_callback>:
   13764:	4b01      	ldr	r3, [pc, #4]	; (1376c <set_common_tc_expiry_callback+0x8>)
   13766:	6118      	str	r0, [r3, #16]
   13768:	4770      	bx	lr
   1376a:	46c0      	nop			; (mov r8, r8)
   1376c:	200020b8 	.word	0x200020b8

00013770 <__gnu_thumb1_case_uqi>:
   13770:	b402      	push	{r1}
   13772:	4671      	mov	r1, lr
   13774:	0849      	lsrs	r1, r1, #1
   13776:	0049      	lsls	r1, r1, #1
   13778:	5c09      	ldrb	r1, [r1, r0]
   1377a:	0049      	lsls	r1, r1, #1
   1377c:	448e      	add	lr, r1
   1377e:	bc02      	pop	{r1}
   13780:	4770      	bx	lr
   13782:	46c0      	nop			; (mov r8, r8)

00013784 <__gnu_thumb1_case_shi>:
   13784:	b403      	push	{r0, r1}
   13786:	4671      	mov	r1, lr
   13788:	0849      	lsrs	r1, r1, #1
   1378a:	0040      	lsls	r0, r0, #1
   1378c:	0049      	lsls	r1, r1, #1
   1378e:	5e09      	ldrsh	r1, [r1, r0]
   13790:	0049      	lsls	r1, r1, #1
   13792:	448e      	add	lr, r1
   13794:	bc03      	pop	{r0, r1}
   13796:	4770      	bx	lr

00013798 <__gnu_thumb1_case_uhi>:
   13798:	b403      	push	{r0, r1}
   1379a:	4671      	mov	r1, lr
   1379c:	0849      	lsrs	r1, r1, #1
   1379e:	0040      	lsls	r0, r0, #1
   137a0:	0049      	lsls	r1, r1, #1
   137a2:	5a09      	ldrh	r1, [r1, r0]
   137a4:	0049      	lsls	r1, r1, #1
   137a6:	448e      	add	lr, r1
   137a8:	bc03      	pop	{r0, r1}
   137aa:	4770      	bx	lr

000137ac <__udivsi3>:
   137ac:	2200      	movs	r2, #0
   137ae:	0843      	lsrs	r3, r0, #1
   137b0:	428b      	cmp	r3, r1
   137b2:	d374      	bcc.n	1389e <__udivsi3+0xf2>
   137b4:	0903      	lsrs	r3, r0, #4
   137b6:	428b      	cmp	r3, r1
   137b8:	d35f      	bcc.n	1387a <__udivsi3+0xce>
   137ba:	0a03      	lsrs	r3, r0, #8
   137bc:	428b      	cmp	r3, r1
   137be:	d344      	bcc.n	1384a <__udivsi3+0x9e>
   137c0:	0b03      	lsrs	r3, r0, #12
   137c2:	428b      	cmp	r3, r1
   137c4:	d328      	bcc.n	13818 <__udivsi3+0x6c>
   137c6:	0c03      	lsrs	r3, r0, #16
   137c8:	428b      	cmp	r3, r1
   137ca:	d30d      	bcc.n	137e8 <__udivsi3+0x3c>
   137cc:	22ff      	movs	r2, #255	; 0xff
   137ce:	0209      	lsls	r1, r1, #8
   137d0:	ba12      	rev	r2, r2
   137d2:	0c03      	lsrs	r3, r0, #16
   137d4:	428b      	cmp	r3, r1
   137d6:	d302      	bcc.n	137de <__udivsi3+0x32>
   137d8:	1212      	asrs	r2, r2, #8
   137da:	0209      	lsls	r1, r1, #8
   137dc:	d065      	beq.n	138aa <__udivsi3+0xfe>
   137de:	0b03      	lsrs	r3, r0, #12
   137e0:	428b      	cmp	r3, r1
   137e2:	d319      	bcc.n	13818 <__udivsi3+0x6c>
   137e4:	e000      	b.n	137e8 <__udivsi3+0x3c>
   137e6:	0a09      	lsrs	r1, r1, #8
   137e8:	0bc3      	lsrs	r3, r0, #15
   137ea:	428b      	cmp	r3, r1
   137ec:	d301      	bcc.n	137f2 <__udivsi3+0x46>
   137ee:	03cb      	lsls	r3, r1, #15
   137f0:	1ac0      	subs	r0, r0, r3
   137f2:	4152      	adcs	r2, r2
   137f4:	0b83      	lsrs	r3, r0, #14
   137f6:	428b      	cmp	r3, r1
   137f8:	d301      	bcc.n	137fe <__udivsi3+0x52>
   137fa:	038b      	lsls	r3, r1, #14
   137fc:	1ac0      	subs	r0, r0, r3
   137fe:	4152      	adcs	r2, r2
   13800:	0b43      	lsrs	r3, r0, #13
   13802:	428b      	cmp	r3, r1
   13804:	d301      	bcc.n	1380a <__udivsi3+0x5e>
   13806:	034b      	lsls	r3, r1, #13
   13808:	1ac0      	subs	r0, r0, r3
   1380a:	4152      	adcs	r2, r2
   1380c:	0b03      	lsrs	r3, r0, #12
   1380e:	428b      	cmp	r3, r1
   13810:	d301      	bcc.n	13816 <__udivsi3+0x6a>
   13812:	030b      	lsls	r3, r1, #12
   13814:	1ac0      	subs	r0, r0, r3
   13816:	4152      	adcs	r2, r2
   13818:	0ac3      	lsrs	r3, r0, #11
   1381a:	428b      	cmp	r3, r1
   1381c:	d301      	bcc.n	13822 <__udivsi3+0x76>
   1381e:	02cb      	lsls	r3, r1, #11
   13820:	1ac0      	subs	r0, r0, r3
   13822:	4152      	adcs	r2, r2
   13824:	0a83      	lsrs	r3, r0, #10
   13826:	428b      	cmp	r3, r1
   13828:	d301      	bcc.n	1382e <__udivsi3+0x82>
   1382a:	028b      	lsls	r3, r1, #10
   1382c:	1ac0      	subs	r0, r0, r3
   1382e:	4152      	adcs	r2, r2
   13830:	0a43      	lsrs	r3, r0, #9
   13832:	428b      	cmp	r3, r1
   13834:	d301      	bcc.n	1383a <__udivsi3+0x8e>
   13836:	024b      	lsls	r3, r1, #9
   13838:	1ac0      	subs	r0, r0, r3
   1383a:	4152      	adcs	r2, r2
   1383c:	0a03      	lsrs	r3, r0, #8
   1383e:	428b      	cmp	r3, r1
   13840:	d301      	bcc.n	13846 <__udivsi3+0x9a>
   13842:	020b      	lsls	r3, r1, #8
   13844:	1ac0      	subs	r0, r0, r3
   13846:	4152      	adcs	r2, r2
   13848:	d2cd      	bcs.n	137e6 <__udivsi3+0x3a>
   1384a:	09c3      	lsrs	r3, r0, #7
   1384c:	428b      	cmp	r3, r1
   1384e:	d301      	bcc.n	13854 <__udivsi3+0xa8>
   13850:	01cb      	lsls	r3, r1, #7
   13852:	1ac0      	subs	r0, r0, r3
   13854:	4152      	adcs	r2, r2
   13856:	0983      	lsrs	r3, r0, #6
   13858:	428b      	cmp	r3, r1
   1385a:	d301      	bcc.n	13860 <__udivsi3+0xb4>
   1385c:	018b      	lsls	r3, r1, #6
   1385e:	1ac0      	subs	r0, r0, r3
   13860:	4152      	adcs	r2, r2
   13862:	0943      	lsrs	r3, r0, #5
   13864:	428b      	cmp	r3, r1
   13866:	d301      	bcc.n	1386c <__udivsi3+0xc0>
   13868:	014b      	lsls	r3, r1, #5
   1386a:	1ac0      	subs	r0, r0, r3
   1386c:	4152      	adcs	r2, r2
   1386e:	0903      	lsrs	r3, r0, #4
   13870:	428b      	cmp	r3, r1
   13872:	d301      	bcc.n	13878 <__udivsi3+0xcc>
   13874:	010b      	lsls	r3, r1, #4
   13876:	1ac0      	subs	r0, r0, r3
   13878:	4152      	adcs	r2, r2
   1387a:	08c3      	lsrs	r3, r0, #3
   1387c:	428b      	cmp	r3, r1
   1387e:	d301      	bcc.n	13884 <__udivsi3+0xd8>
   13880:	00cb      	lsls	r3, r1, #3
   13882:	1ac0      	subs	r0, r0, r3
   13884:	4152      	adcs	r2, r2
   13886:	0883      	lsrs	r3, r0, #2
   13888:	428b      	cmp	r3, r1
   1388a:	d301      	bcc.n	13890 <__udivsi3+0xe4>
   1388c:	008b      	lsls	r3, r1, #2
   1388e:	1ac0      	subs	r0, r0, r3
   13890:	4152      	adcs	r2, r2
   13892:	0843      	lsrs	r3, r0, #1
   13894:	428b      	cmp	r3, r1
   13896:	d301      	bcc.n	1389c <__udivsi3+0xf0>
   13898:	004b      	lsls	r3, r1, #1
   1389a:	1ac0      	subs	r0, r0, r3
   1389c:	4152      	adcs	r2, r2
   1389e:	1a41      	subs	r1, r0, r1
   138a0:	d200      	bcs.n	138a4 <__udivsi3+0xf8>
   138a2:	4601      	mov	r1, r0
   138a4:	4152      	adcs	r2, r2
   138a6:	4610      	mov	r0, r2
   138a8:	4770      	bx	lr
   138aa:	e7ff      	b.n	138ac <__udivsi3+0x100>
   138ac:	b501      	push	{r0, lr}
   138ae:	2000      	movs	r0, #0
   138b0:	f000 f8f0 	bl	13a94 <__aeabi_idiv0>
   138b4:	bd02      	pop	{r1, pc}
   138b6:	46c0      	nop			; (mov r8, r8)

000138b8 <__aeabi_uidivmod>:
   138b8:	2900      	cmp	r1, #0
   138ba:	d0f7      	beq.n	138ac <__udivsi3+0x100>
   138bc:	e776      	b.n	137ac <__udivsi3>
   138be:	4770      	bx	lr

000138c0 <__divsi3>:
   138c0:	4603      	mov	r3, r0
   138c2:	430b      	orrs	r3, r1
   138c4:	d47f      	bmi.n	139c6 <__divsi3+0x106>
   138c6:	2200      	movs	r2, #0
   138c8:	0843      	lsrs	r3, r0, #1
   138ca:	428b      	cmp	r3, r1
   138cc:	d374      	bcc.n	139b8 <__divsi3+0xf8>
   138ce:	0903      	lsrs	r3, r0, #4
   138d0:	428b      	cmp	r3, r1
   138d2:	d35f      	bcc.n	13994 <__divsi3+0xd4>
   138d4:	0a03      	lsrs	r3, r0, #8
   138d6:	428b      	cmp	r3, r1
   138d8:	d344      	bcc.n	13964 <__divsi3+0xa4>
   138da:	0b03      	lsrs	r3, r0, #12
   138dc:	428b      	cmp	r3, r1
   138de:	d328      	bcc.n	13932 <__divsi3+0x72>
   138e0:	0c03      	lsrs	r3, r0, #16
   138e2:	428b      	cmp	r3, r1
   138e4:	d30d      	bcc.n	13902 <__divsi3+0x42>
   138e6:	22ff      	movs	r2, #255	; 0xff
   138e8:	0209      	lsls	r1, r1, #8
   138ea:	ba12      	rev	r2, r2
   138ec:	0c03      	lsrs	r3, r0, #16
   138ee:	428b      	cmp	r3, r1
   138f0:	d302      	bcc.n	138f8 <__divsi3+0x38>
   138f2:	1212      	asrs	r2, r2, #8
   138f4:	0209      	lsls	r1, r1, #8
   138f6:	d065      	beq.n	139c4 <__divsi3+0x104>
   138f8:	0b03      	lsrs	r3, r0, #12
   138fa:	428b      	cmp	r3, r1
   138fc:	d319      	bcc.n	13932 <__divsi3+0x72>
   138fe:	e000      	b.n	13902 <__divsi3+0x42>
   13900:	0a09      	lsrs	r1, r1, #8
   13902:	0bc3      	lsrs	r3, r0, #15
   13904:	428b      	cmp	r3, r1
   13906:	d301      	bcc.n	1390c <__divsi3+0x4c>
   13908:	03cb      	lsls	r3, r1, #15
   1390a:	1ac0      	subs	r0, r0, r3
   1390c:	4152      	adcs	r2, r2
   1390e:	0b83      	lsrs	r3, r0, #14
   13910:	428b      	cmp	r3, r1
   13912:	d301      	bcc.n	13918 <__divsi3+0x58>
   13914:	038b      	lsls	r3, r1, #14
   13916:	1ac0      	subs	r0, r0, r3
   13918:	4152      	adcs	r2, r2
   1391a:	0b43      	lsrs	r3, r0, #13
   1391c:	428b      	cmp	r3, r1
   1391e:	d301      	bcc.n	13924 <__divsi3+0x64>
   13920:	034b      	lsls	r3, r1, #13
   13922:	1ac0      	subs	r0, r0, r3
   13924:	4152      	adcs	r2, r2
   13926:	0b03      	lsrs	r3, r0, #12
   13928:	428b      	cmp	r3, r1
   1392a:	d301      	bcc.n	13930 <__divsi3+0x70>
   1392c:	030b      	lsls	r3, r1, #12
   1392e:	1ac0      	subs	r0, r0, r3
   13930:	4152      	adcs	r2, r2
   13932:	0ac3      	lsrs	r3, r0, #11
   13934:	428b      	cmp	r3, r1
   13936:	d301      	bcc.n	1393c <__divsi3+0x7c>
   13938:	02cb      	lsls	r3, r1, #11
   1393a:	1ac0      	subs	r0, r0, r3
   1393c:	4152      	adcs	r2, r2
   1393e:	0a83      	lsrs	r3, r0, #10
   13940:	428b      	cmp	r3, r1
   13942:	d301      	bcc.n	13948 <__divsi3+0x88>
   13944:	028b      	lsls	r3, r1, #10
   13946:	1ac0      	subs	r0, r0, r3
   13948:	4152      	adcs	r2, r2
   1394a:	0a43      	lsrs	r3, r0, #9
   1394c:	428b      	cmp	r3, r1
   1394e:	d301      	bcc.n	13954 <__divsi3+0x94>
   13950:	024b      	lsls	r3, r1, #9
   13952:	1ac0      	subs	r0, r0, r3
   13954:	4152      	adcs	r2, r2
   13956:	0a03      	lsrs	r3, r0, #8
   13958:	428b      	cmp	r3, r1
   1395a:	d301      	bcc.n	13960 <__divsi3+0xa0>
   1395c:	020b      	lsls	r3, r1, #8
   1395e:	1ac0      	subs	r0, r0, r3
   13960:	4152      	adcs	r2, r2
   13962:	d2cd      	bcs.n	13900 <__divsi3+0x40>
   13964:	09c3      	lsrs	r3, r0, #7
   13966:	428b      	cmp	r3, r1
   13968:	d301      	bcc.n	1396e <__divsi3+0xae>
   1396a:	01cb      	lsls	r3, r1, #7
   1396c:	1ac0      	subs	r0, r0, r3
   1396e:	4152      	adcs	r2, r2
   13970:	0983      	lsrs	r3, r0, #6
   13972:	428b      	cmp	r3, r1
   13974:	d301      	bcc.n	1397a <__divsi3+0xba>
   13976:	018b      	lsls	r3, r1, #6
   13978:	1ac0      	subs	r0, r0, r3
   1397a:	4152      	adcs	r2, r2
   1397c:	0943      	lsrs	r3, r0, #5
   1397e:	428b      	cmp	r3, r1
   13980:	d301      	bcc.n	13986 <__divsi3+0xc6>
   13982:	014b      	lsls	r3, r1, #5
   13984:	1ac0      	subs	r0, r0, r3
   13986:	4152      	adcs	r2, r2
   13988:	0903      	lsrs	r3, r0, #4
   1398a:	428b      	cmp	r3, r1
   1398c:	d301      	bcc.n	13992 <__divsi3+0xd2>
   1398e:	010b      	lsls	r3, r1, #4
   13990:	1ac0      	subs	r0, r0, r3
   13992:	4152      	adcs	r2, r2
   13994:	08c3      	lsrs	r3, r0, #3
   13996:	428b      	cmp	r3, r1
   13998:	d301      	bcc.n	1399e <__divsi3+0xde>
   1399a:	00cb      	lsls	r3, r1, #3
   1399c:	1ac0      	subs	r0, r0, r3
   1399e:	4152      	adcs	r2, r2
   139a0:	0883      	lsrs	r3, r0, #2
   139a2:	428b      	cmp	r3, r1
   139a4:	d301      	bcc.n	139aa <__divsi3+0xea>
   139a6:	008b      	lsls	r3, r1, #2
   139a8:	1ac0      	subs	r0, r0, r3
   139aa:	4152      	adcs	r2, r2
   139ac:	0843      	lsrs	r3, r0, #1
   139ae:	428b      	cmp	r3, r1
   139b0:	d301      	bcc.n	139b6 <__divsi3+0xf6>
   139b2:	004b      	lsls	r3, r1, #1
   139b4:	1ac0      	subs	r0, r0, r3
   139b6:	4152      	adcs	r2, r2
   139b8:	1a41      	subs	r1, r0, r1
   139ba:	d200      	bcs.n	139be <__divsi3+0xfe>
   139bc:	4601      	mov	r1, r0
   139be:	4152      	adcs	r2, r2
   139c0:	4610      	mov	r0, r2
   139c2:	4770      	bx	lr
   139c4:	e05d      	b.n	13a82 <__divsi3+0x1c2>
   139c6:	0fca      	lsrs	r2, r1, #31
   139c8:	d000      	beq.n	139cc <__divsi3+0x10c>
   139ca:	4249      	negs	r1, r1
   139cc:	1003      	asrs	r3, r0, #32
   139ce:	d300      	bcc.n	139d2 <__divsi3+0x112>
   139d0:	4240      	negs	r0, r0
   139d2:	4053      	eors	r3, r2
   139d4:	2200      	movs	r2, #0
   139d6:	469c      	mov	ip, r3
   139d8:	0903      	lsrs	r3, r0, #4
   139da:	428b      	cmp	r3, r1
   139dc:	d32d      	bcc.n	13a3a <__divsi3+0x17a>
   139de:	0a03      	lsrs	r3, r0, #8
   139e0:	428b      	cmp	r3, r1
   139e2:	d312      	bcc.n	13a0a <__divsi3+0x14a>
   139e4:	22fc      	movs	r2, #252	; 0xfc
   139e6:	0189      	lsls	r1, r1, #6
   139e8:	ba12      	rev	r2, r2
   139ea:	0a03      	lsrs	r3, r0, #8
   139ec:	428b      	cmp	r3, r1
   139ee:	d30c      	bcc.n	13a0a <__divsi3+0x14a>
   139f0:	0189      	lsls	r1, r1, #6
   139f2:	1192      	asrs	r2, r2, #6
   139f4:	428b      	cmp	r3, r1
   139f6:	d308      	bcc.n	13a0a <__divsi3+0x14a>
   139f8:	0189      	lsls	r1, r1, #6
   139fa:	1192      	asrs	r2, r2, #6
   139fc:	428b      	cmp	r3, r1
   139fe:	d304      	bcc.n	13a0a <__divsi3+0x14a>
   13a00:	0189      	lsls	r1, r1, #6
   13a02:	d03a      	beq.n	13a7a <__divsi3+0x1ba>
   13a04:	1192      	asrs	r2, r2, #6
   13a06:	e000      	b.n	13a0a <__divsi3+0x14a>
   13a08:	0989      	lsrs	r1, r1, #6
   13a0a:	09c3      	lsrs	r3, r0, #7
   13a0c:	428b      	cmp	r3, r1
   13a0e:	d301      	bcc.n	13a14 <__divsi3+0x154>
   13a10:	01cb      	lsls	r3, r1, #7
   13a12:	1ac0      	subs	r0, r0, r3
   13a14:	4152      	adcs	r2, r2
   13a16:	0983      	lsrs	r3, r0, #6
   13a18:	428b      	cmp	r3, r1
   13a1a:	d301      	bcc.n	13a20 <__divsi3+0x160>
   13a1c:	018b      	lsls	r3, r1, #6
   13a1e:	1ac0      	subs	r0, r0, r3
   13a20:	4152      	adcs	r2, r2
   13a22:	0943      	lsrs	r3, r0, #5
   13a24:	428b      	cmp	r3, r1
   13a26:	d301      	bcc.n	13a2c <__divsi3+0x16c>
   13a28:	014b      	lsls	r3, r1, #5
   13a2a:	1ac0      	subs	r0, r0, r3
   13a2c:	4152      	adcs	r2, r2
   13a2e:	0903      	lsrs	r3, r0, #4
   13a30:	428b      	cmp	r3, r1
   13a32:	d301      	bcc.n	13a38 <__divsi3+0x178>
   13a34:	010b      	lsls	r3, r1, #4
   13a36:	1ac0      	subs	r0, r0, r3
   13a38:	4152      	adcs	r2, r2
   13a3a:	08c3      	lsrs	r3, r0, #3
   13a3c:	428b      	cmp	r3, r1
   13a3e:	d301      	bcc.n	13a44 <__divsi3+0x184>
   13a40:	00cb      	lsls	r3, r1, #3
   13a42:	1ac0      	subs	r0, r0, r3
   13a44:	4152      	adcs	r2, r2
   13a46:	0883      	lsrs	r3, r0, #2
   13a48:	428b      	cmp	r3, r1
   13a4a:	d301      	bcc.n	13a50 <__divsi3+0x190>
   13a4c:	008b      	lsls	r3, r1, #2
   13a4e:	1ac0      	subs	r0, r0, r3
   13a50:	4152      	adcs	r2, r2
   13a52:	d2d9      	bcs.n	13a08 <__divsi3+0x148>
   13a54:	0843      	lsrs	r3, r0, #1
   13a56:	428b      	cmp	r3, r1
   13a58:	d301      	bcc.n	13a5e <__divsi3+0x19e>
   13a5a:	004b      	lsls	r3, r1, #1
   13a5c:	1ac0      	subs	r0, r0, r3
   13a5e:	4152      	adcs	r2, r2
   13a60:	1a41      	subs	r1, r0, r1
   13a62:	d200      	bcs.n	13a66 <__divsi3+0x1a6>
   13a64:	4601      	mov	r1, r0
   13a66:	4663      	mov	r3, ip
   13a68:	4152      	adcs	r2, r2
   13a6a:	105b      	asrs	r3, r3, #1
   13a6c:	4610      	mov	r0, r2
   13a6e:	d301      	bcc.n	13a74 <__divsi3+0x1b4>
   13a70:	4240      	negs	r0, r0
   13a72:	2b00      	cmp	r3, #0
   13a74:	d500      	bpl.n	13a78 <__divsi3+0x1b8>
   13a76:	4249      	negs	r1, r1
   13a78:	4770      	bx	lr
   13a7a:	4663      	mov	r3, ip
   13a7c:	105b      	asrs	r3, r3, #1
   13a7e:	d300      	bcc.n	13a82 <__divsi3+0x1c2>
   13a80:	4240      	negs	r0, r0
   13a82:	b501      	push	{r0, lr}
   13a84:	2000      	movs	r0, #0
   13a86:	f000 f805 	bl	13a94 <__aeabi_idiv0>
   13a8a:	bd02      	pop	{r1, pc}

00013a8c <__aeabi_idivmod>:
   13a8c:	2900      	cmp	r1, #0
   13a8e:	d0f8      	beq.n	13a82 <__divsi3+0x1c2>
   13a90:	e716      	b.n	138c0 <__divsi3>
   13a92:	4770      	bx	lr

00013a94 <__aeabi_idiv0>:
   13a94:	4770      	bx	lr
   13a96:	46c0      	nop			; (mov r8, r8)

00013a98 <__aeabi_cdrcmple>:
   13a98:	4684      	mov	ip, r0
   13a9a:	1c10      	adds	r0, r2, #0
   13a9c:	4662      	mov	r2, ip
   13a9e:	468c      	mov	ip, r1
   13aa0:	1c19      	adds	r1, r3, #0
   13aa2:	4663      	mov	r3, ip
   13aa4:	e000      	b.n	13aa8 <__aeabi_cdcmpeq>
   13aa6:	46c0      	nop			; (mov r8, r8)

00013aa8 <__aeabi_cdcmpeq>:
   13aa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   13aaa:	f001 ffa3 	bl	159f4 <__ledf2>
   13aae:	2800      	cmp	r0, #0
   13ab0:	d401      	bmi.n	13ab6 <__aeabi_cdcmpeq+0xe>
   13ab2:	2100      	movs	r1, #0
   13ab4:	42c8      	cmn	r0, r1
   13ab6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00013ab8 <__aeabi_dcmpeq>:
   13ab8:	b510      	push	{r4, lr}
   13aba:	f001 fefd 	bl	158b8 <__eqdf2>
   13abe:	4240      	negs	r0, r0
   13ac0:	3001      	adds	r0, #1
   13ac2:	bd10      	pop	{r4, pc}

00013ac4 <__aeabi_dcmplt>:
   13ac4:	b510      	push	{r4, lr}
   13ac6:	f001 ff95 	bl	159f4 <__ledf2>
   13aca:	2800      	cmp	r0, #0
   13acc:	db01      	blt.n	13ad2 <__aeabi_dcmplt+0xe>
   13ace:	2000      	movs	r0, #0
   13ad0:	bd10      	pop	{r4, pc}
   13ad2:	2001      	movs	r0, #1
   13ad4:	bd10      	pop	{r4, pc}
   13ad6:	46c0      	nop			; (mov r8, r8)

00013ad8 <__aeabi_dcmple>:
   13ad8:	b510      	push	{r4, lr}
   13ada:	f001 ff8b 	bl	159f4 <__ledf2>
   13ade:	2800      	cmp	r0, #0
   13ae0:	dd01      	ble.n	13ae6 <__aeabi_dcmple+0xe>
   13ae2:	2000      	movs	r0, #0
   13ae4:	bd10      	pop	{r4, pc}
   13ae6:	2001      	movs	r0, #1
   13ae8:	bd10      	pop	{r4, pc}
   13aea:	46c0      	nop			; (mov r8, r8)

00013aec <__aeabi_dcmpgt>:
   13aec:	b510      	push	{r4, lr}
   13aee:	f001 ff1d 	bl	1592c <__gedf2>
   13af2:	2800      	cmp	r0, #0
   13af4:	dc01      	bgt.n	13afa <__aeabi_dcmpgt+0xe>
   13af6:	2000      	movs	r0, #0
   13af8:	bd10      	pop	{r4, pc}
   13afa:	2001      	movs	r0, #1
   13afc:	bd10      	pop	{r4, pc}
   13afe:	46c0      	nop			; (mov r8, r8)

00013b00 <__aeabi_dcmpge>:
   13b00:	b510      	push	{r4, lr}
   13b02:	f001 ff13 	bl	1592c <__gedf2>
   13b06:	2800      	cmp	r0, #0
   13b08:	da01      	bge.n	13b0e <__aeabi_dcmpge+0xe>
   13b0a:	2000      	movs	r0, #0
   13b0c:	bd10      	pop	{r4, pc}
   13b0e:	2001      	movs	r0, #1
   13b10:	bd10      	pop	{r4, pc}
   13b12:	46c0      	nop			; (mov r8, r8)

00013b14 <__aeabi_cfrcmple>:
   13b14:	4684      	mov	ip, r0
   13b16:	1c08      	adds	r0, r1, #0
   13b18:	4661      	mov	r1, ip
   13b1a:	e7ff      	b.n	13b1c <__aeabi_cfcmpeq>

00013b1c <__aeabi_cfcmpeq>:
   13b1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   13b1e:	f000 fcd3 	bl	144c8 <__lesf2>
   13b22:	2800      	cmp	r0, #0
   13b24:	d401      	bmi.n	13b2a <__aeabi_cfcmpeq+0xe>
   13b26:	2100      	movs	r1, #0
   13b28:	42c8      	cmn	r0, r1
   13b2a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00013b2c <__aeabi_fcmpeq>:
   13b2c:	b510      	push	{r4, lr}
   13b2e:	f000 fc65 	bl	143fc <__eqsf2>
   13b32:	4240      	negs	r0, r0
   13b34:	3001      	adds	r0, #1
   13b36:	bd10      	pop	{r4, pc}

00013b38 <__aeabi_fcmplt>:
   13b38:	b510      	push	{r4, lr}
   13b3a:	f000 fcc5 	bl	144c8 <__lesf2>
   13b3e:	2800      	cmp	r0, #0
   13b40:	db01      	blt.n	13b46 <__aeabi_fcmplt+0xe>
   13b42:	2000      	movs	r0, #0
   13b44:	bd10      	pop	{r4, pc}
   13b46:	2001      	movs	r0, #1
   13b48:	bd10      	pop	{r4, pc}
   13b4a:	46c0      	nop			; (mov r8, r8)

00013b4c <__aeabi_fcmple>:
   13b4c:	b510      	push	{r4, lr}
   13b4e:	f000 fcbb 	bl	144c8 <__lesf2>
   13b52:	2800      	cmp	r0, #0
   13b54:	dd01      	ble.n	13b5a <__aeabi_fcmple+0xe>
   13b56:	2000      	movs	r0, #0
   13b58:	bd10      	pop	{r4, pc}
   13b5a:	2001      	movs	r0, #1
   13b5c:	bd10      	pop	{r4, pc}
   13b5e:	46c0      	nop			; (mov r8, r8)

00013b60 <__aeabi_fcmpgt>:
   13b60:	b510      	push	{r4, lr}
   13b62:	f000 fc71 	bl	14448 <__gesf2>
   13b66:	2800      	cmp	r0, #0
   13b68:	dc01      	bgt.n	13b6e <__aeabi_fcmpgt+0xe>
   13b6a:	2000      	movs	r0, #0
   13b6c:	bd10      	pop	{r4, pc}
   13b6e:	2001      	movs	r0, #1
   13b70:	bd10      	pop	{r4, pc}
   13b72:	46c0      	nop			; (mov r8, r8)

00013b74 <__aeabi_fcmpge>:
   13b74:	b510      	push	{r4, lr}
   13b76:	f000 fc67 	bl	14448 <__gesf2>
   13b7a:	2800      	cmp	r0, #0
   13b7c:	da01      	bge.n	13b82 <__aeabi_fcmpge+0xe>
   13b7e:	2000      	movs	r0, #0
   13b80:	bd10      	pop	{r4, pc}
   13b82:	2001      	movs	r0, #1
   13b84:	bd10      	pop	{r4, pc}
   13b86:	46c0      	nop			; (mov r8, r8)

00013b88 <__aeabi_uldivmod>:
   13b88:	2b00      	cmp	r3, #0
   13b8a:	d111      	bne.n	13bb0 <__aeabi_uldivmod+0x28>
   13b8c:	2a00      	cmp	r2, #0
   13b8e:	d10f      	bne.n	13bb0 <__aeabi_uldivmod+0x28>
   13b90:	2900      	cmp	r1, #0
   13b92:	d100      	bne.n	13b96 <__aeabi_uldivmod+0xe>
   13b94:	2800      	cmp	r0, #0
   13b96:	d002      	beq.n	13b9e <__aeabi_uldivmod+0x16>
   13b98:	2100      	movs	r1, #0
   13b9a:	43c9      	mvns	r1, r1
   13b9c:	1c08      	adds	r0, r1, #0
   13b9e:	b407      	push	{r0, r1, r2}
   13ba0:	4802      	ldr	r0, [pc, #8]	; (13bac <__aeabi_uldivmod+0x24>)
   13ba2:	a102      	add	r1, pc, #8	; (adr r1, 13bac <__aeabi_uldivmod+0x24>)
   13ba4:	1840      	adds	r0, r0, r1
   13ba6:	9002      	str	r0, [sp, #8]
   13ba8:	bd03      	pop	{r0, r1, pc}
   13baa:	46c0      	nop			; (mov r8, r8)
   13bac:	fffffee9 	.word	0xfffffee9
   13bb0:	b403      	push	{r0, r1}
   13bb2:	4668      	mov	r0, sp
   13bb4:	b501      	push	{r0, lr}
   13bb6:	9802      	ldr	r0, [sp, #8]
   13bb8:	f000 f886 	bl	13cc8 <__udivmoddi4>
   13bbc:	9b01      	ldr	r3, [sp, #4]
   13bbe:	469e      	mov	lr, r3
   13bc0:	b002      	add	sp, #8
   13bc2:	bc0c      	pop	{r2, r3}
   13bc4:	4770      	bx	lr
   13bc6:	46c0      	nop			; (mov r8, r8)

00013bc8 <__aeabi_lmul>:
   13bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   13bca:	46ce      	mov	lr, r9
   13bcc:	4647      	mov	r7, r8
   13bce:	0415      	lsls	r5, r2, #16
   13bd0:	0c2d      	lsrs	r5, r5, #16
   13bd2:	002e      	movs	r6, r5
   13bd4:	b580      	push	{r7, lr}
   13bd6:	0407      	lsls	r7, r0, #16
   13bd8:	0c14      	lsrs	r4, r2, #16
   13bda:	0c3f      	lsrs	r7, r7, #16
   13bdc:	4699      	mov	r9, r3
   13bde:	0c03      	lsrs	r3, r0, #16
   13be0:	437e      	muls	r6, r7
   13be2:	435d      	muls	r5, r3
   13be4:	4367      	muls	r7, r4
   13be6:	4363      	muls	r3, r4
   13be8:	197f      	adds	r7, r7, r5
   13bea:	0c34      	lsrs	r4, r6, #16
   13bec:	19e4      	adds	r4, r4, r7
   13bee:	469c      	mov	ip, r3
   13bf0:	42a5      	cmp	r5, r4
   13bf2:	d903      	bls.n	13bfc <__aeabi_lmul+0x34>
   13bf4:	2380      	movs	r3, #128	; 0x80
   13bf6:	025b      	lsls	r3, r3, #9
   13bf8:	4698      	mov	r8, r3
   13bfa:	44c4      	add	ip, r8
   13bfc:	464b      	mov	r3, r9
   13bfe:	4351      	muls	r1, r2
   13c00:	4343      	muls	r3, r0
   13c02:	0436      	lsls	r6, r6, #16
   13c04:	0c36      	lsrs	r6, r6, #16
   13c06:	0c25      	lsrs	r5, r4, #16
   13c08:	0424      	lsls	r4, r4, #16
   13c0a:	4465      	add	r5, ip
   13c0c:	19a4      	adds	r4, r4, r6
   13c0e:	1859      	adds	r1, r3, r1
   13c10:	1949      	adds	r1, r1, r5
   13c12:	0020      	movs	r0, r4
   13c14:	bc0c      	pop	{r2, r3}
   13c16:	4690      	mov	r8, r2
   13c18:	4699      	mov	r9, r3
   13c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00013c1c <__aeabi_f2uiz>:
   13c1c:	219e      	movs	r1, #158	; 0x9e
   13c1e:	b510      	push	{r4, lr}
   13c20:	05c9      	lsls	r1, r1, #23
   13c22:	1c04      	adds	r4, r0, #0
   13c24:	f7ff ffa6 	bl	13b74 <__aeabi_fcmpge>
   13c28:	2800      	cmp	r0, #0
   13c2a:	d103      	bne.n	13c34 <__aeabi_f2uiz+0x18>
   13c2c:	1c20      	adds	r0, r4, #0
   13c2e:	f000 ff49 	bl	14ac4 <__aeabi_f2iz>
   13c32:	bd10      	pop	{r4, pc}
   13c34:	219e      	movs	r1, #158	; 0x9e
   13c36:	1c20      	adds	r0, r4, #0
   13c38:	05c9      	lsls	r1, r1, #23
   13c3a:	f000 fda7 	bl	1478c <__aeabi_fsub>
   13c3e:	f000 ff41 	bl	14ac4 <__aeabi_f2iz>
   13c42:	2380      	movs	r3, #128	; 0x80
   13c44:	061b      	lsls	r3, r3, #24
   13c46:	469c      	mov	ip, r3
   13c48:	4460      	add	r0, ip
   13c4a:	e7f2      	b.n	13c32 <__aeabi_f2uiz+0x16>

00013c4c <__aeabi_d2uiz>:
   13c4c:	b570      	push	{r4, r5, r6, lr}
   13c4e:	2200      	movs	r2, #0
   13c50:	4b0c      	ldr	r3, [pc, #48]	; (13c84 <__aeabi_d2uiz+0x38>)
   13c52:	0004      	movs	r4, r0
   13c54:	000d      	movs	r5, r1
   13c56:	f7ff ff53 	bl	13b00 <__aeabi_dcmpge>
   13c5a:	2800      	cmp	r0, #0
   13c5c:	d104      	bne.n	13c68 <__aeabi_d2uiz+0x1c>
   13c5e:	0020      	movs	r0, r4
   13c60:	0029      	movs	r1, r5
   13c62:	f002 fcbf 	bl	165e4 <__aeabi_d2iz>
   13c66:	bd70      	pop	{r4, r5, r6, pc}
   13c68:	4b06      	ldr	r3, [pc, #24]	; (13c84 <__aeabi_d2uiz+0x38>)
   13c6a:	2200      	movs	r2, #0
   13c6c:	0020      	movs	r0, r4
   13c6e:	0029      	movs	r1, r5
   13c70:	f002 f9a2 	bl	15fb8 <__aeabi_dsub>
   13c74:	f002 fcb6 	bl	165e4 <__aeabi_d2iz>
   13c78:	2380      	movs	r3, #128	; 0x80
   13c7a:	061b      	lsls	r3, r3, #24
   13c7c:	469c      	mov	ip, r3
   13c7e:	4460      	add	r0, ip
   13c80:	e7f1      	b.n	13c66 <__aeabi_d2uiz+0x1a>
   13c82:	46c0      	nop			; (mov r8, r8)
   13c84:	41e00000 	.word	0x41e00000

00013c88 <__aeabi_f2ulz>:
   13c88:	b570      	push	{r4, r5, r6, lr}
   13c8a:	f002 fd59 	bl	16740 <__aeabi_f2d>
   13c8e:	2200      	movs	r2, #0
   13c90:	4b0b      	ldr	r3, [pc, #44]	; (13cc0 <__aeabi_f2ulz+0x38>)
   13c92:	000d      	movs	r5, r1
   13c94:	0004      	movs	r4, r0
   13c96:	f001 ff0f 	bl	15ab8 <__aeabi_dmul>
   13c9a:	f7ff ffd7 	bl	13c4c <__aeabi_d2uiz>
   13c9e:	0006      	movs	r6, r0
   13ca0:	f002 fd16 	bl	166d0 <__aeabi_ui2d>
   13ca4:	2200      	movs	r2, #0
   13ca6:	4b07      	ldr	r3, [pc, #28]	; (13cc4 <__aeabi_f2ulz+0x3c>)
   13ca8:	f001 ff06 	bl	15ab8 <__aeabi_dmul>
   13cac:	0002      	movs	r2, r0
   13cae:	000b      	movs	r3, r1
   13cb0:	0020      	movs	r0, r4
   13cb2:	0029      	movs	r1, r5
   13cb4:	f002 f980 	bl	15fb8 <__aeabi_dsub>
   13cb8:	f7ff ffc8 	bl	13c4c <__aeabi_d2uiz>
   13cbc:	0031      	movs	r1, r6
   13cbe:	bd70      	pop	{r4, r5, r6, pc}
   13cc0:	3df00000 	.word	0x3df00000
   13cc4:	41f00000 	.word	0x41f00000

00013cc8 <__udivmoddi4>:
   13cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   13cca:	4657      	mov	r7, sl
   13ccc:	464e      	mov	r6, r9
   13cce:	4645      	mov	r5, r8
   13cd0:	46de      	mov	lr, fp
   13cd2:	b5e0      	push	{r5, r6, r7, lr}
   13cd4:	0004      	movs	r4, r0
   13cd6:	b083      	sub	sp, #12
   13cd8:	000d      	movs	r5, r1
   13cda:	4692      	mov	sl, r2
   13cdc:	4699      	mov	r9, r3
   13cde:	428b      	cmp	r3, r1
   13ce0:	d82f      	bhi.n	13d42 <__udivmoddi4+0x7a>
   13ce2:	d02c      	beq.n	13d3e <__udivmoddi4+0x76>
   13ce4:	4649      	mov	r1, r9
   13ce6:	4650      	mov	r0, sl
   13ce8:	f002 fe24 	bl	16934 <__clzdi2>
   13cec:	0029      	movs	r1, r5
   13cee:	0006      	movs	r6, r0
   13cf0:	0020      	movs	r0, r4
   13cf2:	f002 fe1f 	bl	16934 <__clzdi2>
   13cf6:	1a33      	subs	r3, r6, r0
   13cf8:	4698      	mov	r8, r3
   13cfa:	3b20      	subs	r3, #32
   13cfc:	469b      	mov	fp, r3
   13cfe:	d500      	bpl.n	13d02 <__udivmoddi4+0x3a>
   13d00:	e074      	b.n	13dec <__udivmoddi4+0x124>
   13d02:	4653      	mov	r3, sl
   13d04:	465a      	mov	r2, fp
   13d06:	4093      	lsls	r3, r2
   13d08:	001f      	movs	r7, r3
   13d0a:	4653      	mov	r3, sl
   13d0c:	4642      	mov	r2, r8
   13d0e:	4093      	lsls	r3, r2
   13d10:	001e      	movs	r6, r3
   13d12:	42af      	cmp	r7, r5
   13d14:	d829      	bhi.n	13d6a <__udivmoddi4+0xa2>
   13d16:	d026      	beq.n	13d66 <__udivmoddi4+0x9e>
   13d18:	465b      	mov	r3, fp
   13d1a:	1ba4      	subs	r4, r4, r6
   13d1c:	41bd      	sbcs	r5, r7
   13d1e:	2b00      	cmp	r3, #0
   13d20:	da00      	bge.n	13d24 <__udivmoddi4+0x5c>
   13d22:	e079      	b.n	13e18 <__udivmoddi4+0x150>
   13d24:	2200      	movs	r2, #0
   13d26:	2300      	movs	r3, #0
   13d28:	9200      	str	r2, [sp, #0]
   13d2a:	9301      	str	r3, [sp, #4]
   13d2c:	2301      	movs	r3, #1
   13d2e:	465a      	mov	r2, fp
   13d30:	4093      	lsls	r3, r2
   13d32:	9301      	str	r3, [sp, #4]
   13d34:	2301      	movs	r3, #1
   13d36:	4642      	mov	r2, r8
   13d38:	4093      	lsls	r3, r2
   13d3a:	9300      	str	r3, [sp, #0]
   13d3c:	e019      	b.n	13d72 <__udivmoddi4+0xaa>
   13d3e:	4282      	cmp	r2, r0
   13d40:	d9d0      	bls.n	13ce4 <__udivmoddi4+0x1c>
   13d42:	2200      	movs	r2, #0
   13d44:	2300      	movs	r3, #0
   13d46:	9200      	str	r2, [sp, #0]
   13d48:	9301      	str	r3, [sp, #4]
   13d4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13d4c:	2b00      	cmp	r3, #0
   13d4e:	d001      	beq.n	13d54 <__udivmoddi4+0x8c>
   13d50:	601c      	str	r4, [r3, #0]
   13d52:	605d      	str	r5, [r3, #4]
   13d54:	9800      	ldr	r0, [sp, #0]
   13d56:	9901      	ldr	r1, [sp, #4]
   13d58:	b003      	add	sp, #12
   13d5a:	bc3c      	pop	{r2, r3, r4, r5}
   13d5c:	4690      	mov	r8, r2
   13d5e:	4699      	mov	r9, r3
   13d60:	46a2      	mov	sl, r4
   13d62:	46ab      	mov	fp, r5
   13d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13d66:	42a3      	cmp	r3, r4
   13d68:	d9d6      	bls.n	13d18 <__udivmoddi4+0x50>
   13d6a:	2200      	movs	r2, #0
   13d6c:	2300      	movs	r3, #0
   13d6e:	9200      	str	r2, [sp, #0]
   13d70:	9301      	str	r3, [sp, #4]
   13d72:	4643      	mov	r3, r8
   13d74:	2b00      	cmp	r3, #0
   13d76:	d0e8      	beq.n	13d4a <__udivmoddi4+0x82>
   13d78:	07fb      	lsls	r3, r7, #31
   13d7a:	0872      	lsrs	r2, r6, #1
   13d7c:	431a      	orrs	r2, r3
   13d7e:	4646      	mov	r6, r8
   13d80:	087b      	lsrs	r3, r7, #1
   13d82:	e00e      	b.n	13da2 <__udivmoddi4+0xda>
   13d84:	42ab      	cmp	r3, r5
   13d86:	d101      	bne.n	13d8c <__udivmoddi4+0xc4>
   13d88:	42a2      	cmp	r2, r4
   13d8a:	d80c      	bhi.n	13da6 <__udivmoddi4+0xde>
   13d8c:	1aa4      	subs	r4, r4, r2
   13d8e:	419d      	sbcs	r5, r3
   13d90:	2001      	movs	r0, #1
   13d92:	1924      	adds	r4, r4, r4
   13d94:	416d      	adcs	r5, r5
   13d96:	2100      	movs	r1, #0
   13d98:	3e01      	subs	r6, #1
   13d9a:	1824      	adds	r4, r4, r0
   13d9c:	414d      	adcs	r5, r1
   13d9e:	2e00      	cmp	r6, #0
   13da0:	d006      	beq.n	13db0 <__udivmoddi4+0xe8>
   13da2:	42ab      	cmp	r3, r5
   13da4:	d9ee      	bls.n	13d84 <__udivmoddi4+0xbc>
   13da6:	3e01      	subs	r6, #1
   13da8:	1924      	adds	r4, r4, r4
   13daa:	416d      	adcs	r5, r5
   13dac:	2e00      	cmp	r6, #0
   13dae:	d1f8      	bne.n	13da2 <__udivmoddi4+0xda>
   13db0:	465b      	mov	r3, fp
   13db2:	9800      	ldr	r0, [sp, #0]
   13db4:	9901      	ldr	r1, [sp, #4]
   13db6:	1900      	adds	r0, r0, r4
   13db8:	4169      	adcs	r1, r5
   13dba:	2b00      	cmp	r3, #0
   13dbc:	db22      	blt.n	13e04 <__udivmoddi4+0x13c>
   13dbe:	002b      	movs	r3, r5
   13dc0:	465a      	mov	r2, fp
   13dc2:	40d3      	lsrs	r3, r2
   13dc4:	002a      	movs	r2, r5
   13dc6:	4644      	mov	r4, r8
   13dc8:	40e2      	lsrs	r2, r4
   13dca:	001c      	movs	r4, r3
   13dcc:	465b      	mov	r3, fp
   13dce:	0015      	movs	r5, r2
   13dd0:	2b00      	cmp	r3, #0
   13dd2:	db2c      	blt.n	13e2e <__udivmoddi4+0x166>
   13dd4:	0026      	movs	r6, r4
   13dd6:	409e      	lsls	r6, r3
   13dd8:	0033      	movs	r3, r6
   13dda:	0026      	movs	r6, r4
   13ddc:	4647      	mov	r7, r8
   13dde:	40be      	lsls	r6, r7
   13de0:	0032      	movs	r2, r6
   13de2:	1a80      	subs	r0, r0, r2
   13de4:	4199      	sbcs	r1, r3
   13de6:	9000      	str	r0, [sp, #0]
   13de8:	9101      	str	r1, [sp, #4]
   13dea:	e7ae      	b.n	13d4a <__udivmoddi4+0x82>
   13dec:	4642      	mov	r2, r8
   13dee:	2320      	movs	r3, #32
   13df0:	1a9b      	subs	r3, r3, r2
   13df2:	4652      	mov	r2, sl
   13df4:	40da      	lsrs	r2, r3
   13df6:	4641      	mov	r1, r8
   13df8:	0013      	movs	r3, r2
   13dfa:	464a      	mov	r2, r9
   13dfc:	408a      	lsls	r2, r1
   13dfe:	0017      	movs	r7, r2
   13e00:	431f      	orrs	r7, r3
   13e02:	e782      	b.n	13d0a <__udivmoddi4+0x42>
   13e04:	4642      	mov	r2, r8
   13e06:	2320      	movs	r3, #32
   13e08:	1a9b      	subs	r3, r3, r2
   13e0a:	002a      	movs	r2, r5
   13e0c:	4646      	mov	r6, r8
   13e0e:	409a      	lsls	r2, r3
   13e10:	0023      	movs	r3, r4
   13e12:	40f3      	lsrs	r3, r6
   13e14:	4313      	orrs	r3, r2
   13e16:	e7d5      	b.n	13dc4 <__udivmoddi4+0xfc>
   13e18:	4642      	mov	r2, r8
   13e1a:	2320      	movs	r3, #32
   13e1c:	2100      	movs	r1, #0
   13e1e:	1a9b      	subs	r3, r3, r2
   13e20:	2200      	movs	r2, #0
   13e22:	9100      	str	r1, [sp, #0]
   13e24:	9201      	str	r2, [sp, #4]
   13e26:	2201      	movs	r2, #1
   13e28:	40da      	lsrs	r2, r3
   13e2a:	9201      	str	r2, [sp, #4]
   13e2c:	e782      	b.n	13d34 <__udivmoddi4+0x6c>
   13e2e:	4642      	mov	r2, r8
   13e30:	2320      	movs	r3, #32
   13e32:	0026      	movs	r6, r4
   13e34:	1a9b      	subs	r3, r3, r2
   13e36:	40de      	lsrs	r6, r3
   13e38:	002f      	movs	r7, r5
   13e3a:	46b4      	mov	ip, r6
   13e3c:	4097      	lsls	r7, r2
   13e3e:	4666      	mov	r6, ip
   13e40:	003b      	movs	r3, r7
   13e42:	4333      	orrs	r3, r6
   13e44:	e7c9      	b.n	13dda <__udivmoddi4+0x112>
   13e46:	46c0      	nop			; (mov r8, r8)

00013e48 <__aeabi_fadd>:
   13e48:	b5f0      	push	{r4, r5, r6, r7, lr}
   13e4a:	46c6      	mov	lr, r8
   13e4c:	024e      	lsls	r6, r1, #9
   13e4e:	0247      	lsls	r7, r0, #9
   13e50:	0a76      	lsrs	r6, r6, #9
   13e52:	0a7b      	lsrs	r3, r7, #9
   13e54:	0044      	lsls	r4, r0, #1
   13e56:	0fc5      	lsrs	r5, r0, #31
   13e58:	00f7      	lsls	r7, r6, #3
   13e5a:	0048      	lsls	r0, r1, #1
   13e5c:	4698      	mov	r8, r3
   13e5e:	b500      	push	{lr}
   13e60:	0e24      	lsrs	r4, r4, #24
   13e62:	002a      	movs	r2, r5
   13e64:	00db      	lsls	r3, r3, #3
   13e66:	0e00      	lsrs	r0, r0, #24
   13e68:	0fc9      	lsrs	r1, r1, #31
   13e6a:	46bc      	mov	ip, r7
   13e6c:	428d      	cmp	r5, r1
   13e6e:	d067      	beq.n	13f40 <__aeabi_fadd+0xf8>
   13e70:	1a22      	subs	r2, r4, r0
   13e72:	2a00      	cmp	r2, #0
   13e74:	dc00      	bgt.n	13e78 <__aeabi_fadd+0x30>
   13e76:	e0a5      	b.n	13fc4 <__aeabi_fadd+0x17c>
   13e78:	2800      	cmp	r0, #0
   13e7a:	d13a      	bne.n	13ef2 <__aeabi_fadd+0xaa>
   13e7c:	2f00      	cmp	r7, #0
   13e7e:	d100      	bne.n	13e82 <__aeabi_fadd+0x3a>
   13e80:	e093      	b.n	13faa <__aeabi_fadd+0x162>
   13e82:	1e51      	subs	r1, r2, #1
   13e84:	2900      	cmp	r1, #0
   13e86:	d000      	beq.n	13e8a <__aeabi_fadd+0x42>
   13e88:	e0bc      	b.n	14004 <__aeabi_fadd+0x1bc>
   13e8a:	2401      	movs	r4, #1
   13e8c:	1bdb      	subs	r3, r3, r7
   13e8e:	015a      	lsls	r2, r3, #5
   13e90:	d546      	bpl.n	13f20 <__aeabi_fadd+0xd8>
   13e92:	019b      	lsls	r3, r3, #6
   13e94:	099e      	lsrs	r6, r3, #6
   13e96:	0030      	movs	r0, r6
   13e98:	f002 fd2e 	bl	168f8 <__clzsi2>
   13e9c:	3805      	subs	r0, #5
   13e9e:	4086      	lsls	r6, r0
   13ea0:	4284      	cmp	r4, r0
   13ea2:	dd00      	ble.n	13ea6 <__aeabi_fadd+0x5e>
   13ea4:	e09d      	b.n	13fe2 <__aeabi_fadd+0x19a>
   13ea6:	1b04      	subs	r4, r0, r4
   13ea8:	0032      	movs	r2, r6
   13eaa:	2020      	movs	r0, #32
   13eac:	3401      	adds	r4, #1
   13eae:	40e2      	lsrs	r2, r4
   13eb0:	1b04      	subs	r4, r0, r4
   13eb2:	40a6      	lsls	r6, r4
   13eb4:	0033      	movs	r3, r6
   13eb6:	1e5e      	subs	r6, r3, #1
   13eb8:	41b3      	sbcs	r3, r6
   13eba:	2400      	movs	r4, #0
   13ebc:	4313      	orrs	r3, r2
   13ebe:	075a      	lsls	r2, r3, #29
   13ec0:	d004      	beq.n	13ecc <__aeabi_fadd+0x84>
   13ec2:	220f      	movs	r2, #15
   13ec4:	401a      	ands	r2, r3
   13ec6:	2a04      	cmp	r2, #4
   13ec8:	d000      	beq.n	13ecc <__aeabi_fadd+0x84>
   13eca:	3304      	adds	r3, #4
   13ecc:	015a      	lsls	r2, r3, #5
   13ece:	d529      	bpl.n	13f24 <__aeabi_fadd+0xdc>
   13ed0:	3401      	adds	r4, #1
   13ed2:	2cff      	cmp	r4, #255	; 0xff
   13ed4:	d100      	bne.n	13ed8 <__aeabi_fadd+0x90>
   13ed6:	e081      	b.n	13fdc <__aeabi_fadd+0x194>
   13ed8:	002a      	movs	r2, r5
   13eda:	019b      	lsls	r3, r3, #6
   13edc:	0a5b      	lsrs	r3, r3, #9
   13ede:	b2e4      	uxtb	r4, r4
   13ee0:	025b      	lsls	r3, r3, #9
   13ee2:	05e4      	lsls	r4, r4, #23
   13ee4:	0a58      	lsrs	r0, r3, #9
   13ee6:	07d2      	lsls	r2, r2, #31
   13ee8:	4320      	orrs	r0, r4
   13eea:	4310      	orrs	r0, r2
   13eec:	bc04      	pop	{r2}
   13eee:	4690      	mov	r8, r2
   13ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13ef2:	2cff      	cmp	r4, #255	; 0xff
   13ef4:	d0e3      	beq.n	13ebe <__aeabi_fadd+0x76>
   13ef6:	2180      	movs	r1, #128	; 0x80
   13ef8:	0038      	movs	r0, r7
   13efa:	04c9      	lsls	r1, r1, #19
   13efc:	4308      	orrs	r0, r1
   13efe:	4684      	mov	ip, r0
   13f00:	2a1b      	cmp	r2, #27
   13f02:	dd00      	ble.n	13f06 <__aeabi_fadd+0xbe>
   13f04:	e082      	b.n	1400c <__aeabi_fadd+0x1c4>
   13f06:	2020      	movs	r0, #32
   13f08:	4661      	mov	r1, ip
   13f0a:	40d1      	lsrs	r1, r2
   13f0c:	1a82      	subs	r2, r0, r2
   13f0e:	4660      	mov	r0, ip
   13f10:	4090      	lsls	r0, r2
   13f12:	0002      	movs	r2, r0
   13f14:	1e50      	subs	r0, r2, #1
   13f16:	4182      	sbcs	r2, r0
   13f18:	430a      	orrs	r2, r1
   13f1a:	1a9b      	subs	r3, r3, r2
   13f1c:	015a      	lsls	r2, r3, #5
   13f1e:	d4b8      	bmi.n	13e92 <__aeabi_fadd+0x4a>
   13f20:	075a      	lsls	r2, r3, #29
   13f22:	d1ce      	bne.n	13ec2 <__aeabi_fadd+0x7a>
   13f24:	08de      	lsrs	r6, r3, #3
   13f26:	002a      	movs	r2, r5
   13f28:	2cff      	cmp	r4, #255	; 0xff
   13f2a:	d13a      	bne.n	13fa2 <__aeabi_fadd+0x15a>
   13f2c:	2e00      	cmp	r6, #0
   13f2e:	d100      	bne.n	13f32 <__aeabi_fadd+0xea>
   13f30:	e0ae      	b.n	14090 <__aeabi_fadd+0x248>
   13f32:	2380      	movs	r3, #128	; 0x80
   13f34:	03db      	lsls	r3, r3, #15
   13f36:	4333      	orrs	r3, r6
   13f38:	025b      	lsls	r3, r3, #9
   13f3a:	0a5b      	lsrs	r3, r3, #9
   13f3c:	24ff      	movs	r4, #255	; 0xff
   13f3e:	e7cf      	b.n	13ee0 <__aeabi_fadd+0x98>
   13f40:	1a21      	subs	r1, r4, r0
   13f42:	2900      	cmp	r1, #0
   13f44:	dd52      	ble.n	13fec <__aeabi_fadd+0x1a4>
   13f46:	2800      	cmp	r0, #0
   13f48:	d031      	beq.n	13fae <__aeabi_fadd+0x166>
   13f4a:	2cff      	cmp	r4, #255	; 0xff
   13f4c:	d0b7      	beq.n	13ebe <__aeabi_fadd+0x76>
   13f4e:	2080      	movs	r0, #128	; 0x80
   13f50:	003e      	movs	r6, r7
   13f52:	04c0      	lsls	r0, r0, #19
   13f54:	4306      	orrs	r6, r0
   13f56:	46b4      	mov	ip, r6
   13f58:	291b      	cmp	r1, #27
   13f5a:	dd00      	ble.n	13f5e <__aeabi_fadd+0x116>
   13f5c:	e0aa      	b.n	140b4 <__aeabi_fadd+0x26c>
   13f5e:	2620      	movs	r6, #32
   13f60:	4660      	mov	r0, ip
   13f62:	40c8      	lsrs	r0, r1
   13f64:	1a71      	subs	r1, r6, r1
   13f66:	4666      	mov	r6, ip
   13f68:	408e      	lsls	r6, r1
   13f6a:	0031      	movs	r1, r6
   13f6c:	1e4e      	subs	r6, r1, #1
   13f6e:	41b1      	sbcs	r1, r6
   13f70:	4301      	orrs	r1, r0
   13f72:	185b      	adds	r3, r3, r1
   13f74:	0159      	lsls	r1, r3, #5
   13f76:	d5d3      	bpl.n	13f20 <__aeabi_fadd+0xd8>
   13f78:	3401      	adds	r4, #1
   13f7a:	2cff      	cmp	r4, #255	; 0xff
   13f7c:	d100      	bne.n	13f80 <__aeabi_fadd+0x138>
   13f7e:	e087      	b.n	14090 <__aeabi_fadd+0x248>
   13f80:	2201      	movs	r2, #1
   13f82:	4978      	ldr	r1, [pc, #480]	; (14164 <__aeabi_fadd+0x31c>)
   13f84:	401a      	ands	r2, r3
   13f86:	085b      	lsrs	r3, r3, #1
   13f88:	400b      	ands	r3, r1
   13f8a:	4313      	orrs	r3, r2
   13f8c:	e797      	b.n	13ebe <__aeabi_fadd+0x76>
   13f8e:	2c00      	cmp	r4, #0
   13f90:	d000      	beq.n	13f94 <__aeabi_fadd+0x14c>
   13f92:	e0a7      	b.n	140e4 <__aeabi_fadd+0x29c>
   13f94:	2b00      	cmp	r3, #0
   13f96:	d000      	beq.n	13f9a <__aeabi_fadd+0x152>
   13f98:	e0b6      	b.n	14108 <__aeabi_fadd+0x2c0>
   13f9a:	1e3b      	subs	r3, r7, #0
   13f9c:	d162      	bne.n	14064 <__aeabi_fadd+0x21c>
   13f9e:	2600      	movs	r6, #0
   13fa0:	2200      	movs	r2, #0
   13fa2:	0273      	lsls	r3, r6, #9
   13fa4:	0a5b      	lsrs	r3, r3, #9
   13fa6:	b2e4      	uxtb	r4, r4
   13fa8:	e79a      	b.n	13ee0 <__aeabi_fadd+0x98>
   13faa:	0014      	movs	r4, r2
   13fac:	e787      	b.n	13ebe <__aeabi_fadd+0x76>
   13fae:	2f00      	cmp	r7, #0
   13fb0:	d04d      	beq.n	1404e <__aeabi_fadd+0x206>
   13fb2:	1e48      	subs	r0, r1, #1
   13fb4:	2800      	cmp	r0, #0
   13fb6:	d157      	bne.n	14068 <__aeabi_fadd+0x220>
   13fb8:	4463      	add	r3, ip
   13fba:	2401      	movs	r4, #1
   13fbc:	015a      	lsls	r2, r3, #5
   13fbe:	d5af      	bpl.n	13f20 <__aeabi_fadd+0xd8>
   13fc0:	2402      	movs	r4, #2
   13fc2:	e7dd      	b.n	13f80 <__aeabi_fadd+0x138>
   13fc4:	2a00      	cmp	r2, #0
   13fc6:	d124      	bne.n	14012 <__aeabi_fadd+0x1ca>
   13fc8:	1c62      	adds	r2, r4, #1
   13fca:	b2d2      	uxtb	r2, r2
   13fcc:	2a01      	cmp	r2, #1
   13fce:	ddde      	ble.n	13f8e <__aeabi_fadd+0x146>
   13fd0:	1bde      	subs	r6, r3, r7
   13fd2:	0172      	lsls	r2, r6, #5
   13fd4:	d535      	bpl.n	14042 <__aeabi_fadd+0x1fa>
   13fd6:	1afe      	subs	r6, r7, r3
   13fd8:	000d      	movs	r5, r1
   13fda:	e75c      	b.n	13e96 <__aeabi_fadd+0x4e>
   13fdc:	002a      	movs	r2, r5
   13fde:	2300      	movs	r3, #0
   13fe0:	e77e      	b.n	13ee0 <__aeabi_fadd+0x98>
   13fe2:	0033      	movs	r3, r6
   13fe4:	4a60      	ldr	r2, [pc, #384]	; (14168 <__aeabi_fadd+0x320>)
   13fe6:	1a24      	subs	r4, r4, r0
   13fe8:	4013      	ands	r3, r2
   13fea:	e768      	b.n	13ebe <__aeabi_fadd+0x76>
   13fec:	2900      	cmp	r1, #0
   13fee:	d163      	bne.n	140b8 <__aeabi_fadd+0x270>
   13ff0:	1c61      	adds	r1, r4, #1
   13ff2:	b2c8      	uxtb	r0, r1
   13ff4:	2801      	cmp	r0, #1
   13ff6:	dd4e      	ble.n	14096 <__aeabi_fadd+0x24e>
   13ff8:	29ff      	cmp	r1, #255	; 0xff
   13ffa:	d049      	beq.n	14090 <__aeabi_fadd+0x248>
   13ffc:	4463      	add	r3, ip
   13ffe:	085b      	lsrs	r3, r3, #1
   14000:	000c      	movs	r4, r1
   14002:	e75c      	b.n	13ebe <__aeabi_fadd+0x76>
   14004:	2aff      	cmp	r2, #255	; 0xff
   14006:	d041      	beq.n	1408c <__aeabi_fadd+0x244>
   14008:	000a      	movs	r2, r1
   1400a:	e779      	b.n	13f00 <__aeabi_fadd+0xb8>
   1400c:	2201      	movs	r2, #1
   1400e:	1a9b      	subs	r3, r3, r2
   14010:	e784      	b.n	13f1c <__aeabi_fadd+0xd4>
   14012:	2c00      	cmp	r4, #0
   14014:	d01d      	beq.n	14052 <__aeabi_fadd+0x20a>
   14016:	28ff      	cmp	r0, #255	; 0xff
   14018:	d022      	beq.n	14060 <__aeabi_fadd+0x218>
   1401a:	2480      	movs	r4, #128	; 0x80
   1401c:	04e4      	lsls	r4, r4, #19
   1401e:	4252      	negs	r2, r2
   14020:	4323      	orrs	r3, r4
   14022:	2a1b      	cmp	r2, #27
   14024:	dd00      	ble.n	14028 <__aeabi_fadd+0x1e0>
   14026:	e08a      	b.n	1413e <__aeabi_fadd+0x2f6>
   14028:	001c      	movs	r4, r3
   1402a:	2520      	movs	r5, #32
   1402c:	40d4      	lsrs	r4, r2
   1402e:	1aaa      	subs	r2, r5, r2
   14030:	4093      	lsls	r3, r2
   14032:	1e5a      	subs	r2, r3, #1
   14034:	4193      	sbcs	r3, r2
   14036:	4323      	orrs	r3, r4
   14038:	4662      	mov	r2, ip
   1403a:	0004      	movs	r4, r0
   1403c:	1ad3      	subs	r3, r2, r3
   1403e:	000d      	movs	r5, r1
   14040:	e725      	b.n	13e8e <__aeabi_fadd+0x46>
   14042:	2e00      	cmp	r6, #0
   14044:	d000      	beq.n	14048 <__aeabi_fadd+0x200>
   14046:	e726      	b.n	13e96 <__aeabi_fadd+0x4e>
   14048:	2200      	movs	r2, #0
   1404a:	2400      	movs	r4, #0
   1404c:	e7a9      	b.n	13fa2 <__aeabi_fadd+0x15a>
   1404e:	000c      	movs	r4, r1
   14050:	e735      	b.n	13ebe <__aeabi_fadd+0x76>
   14052:	2b00      	cmp	r3, #0
   14054:	d04d      	beq.n	140f2 <__aeabi_fadd+0x2aa>
   14056:	43d2      	mvns	r2, r2
   14058:	2a00      	cmp	r2, #0
   1405a:	d0ed      	beq.n	14038 <__aeabi_fadd+0x1f0>
   1405c:	28ff      	cmp	r0, #255	; 0xff
   1405e:	d1e0      	bne.n	14022 <__aeabi_fadd+0x1da>
   14060:	4663      	mov	r3, ip
   14062:	24ff      	movs	r4, #255	; 0xff
   14064:	000d      	movs	r5, r1
   14066:	e72a      	b.n	13ebe <__aeabi_fadd+0x76>
   14068:	29ff      	cmp	r1, #255	; 0xff
   1406a:	d00f      	beq.n	1408c <__aeabi_fadd+0x244>
   1406c:	0001      	movs	r1, r0
   1406e:	e773      	b.n	13f58 <__aeabi_fadd+0x110>
   14070:	2b00      	cmp	r3, #0
   14072:	d061      	beq.n	14138 <__aeabi_fadd+0x2f0>
   14074:	24ff      	movs	r4, #255	; 0xff
   14076:	2f00      	cmp	r7, #0
   14078:	d100      	bne.n	1407c <__aeabi_fadd+0x234>
   1407a:	e720      	b.n	13ebe <__aeabi_fadd+0x76>
   1407c:	2280      	movs	r2, #128	; 0x80
   1407e:	4641      	mov	r1, r8
   14080:	03d2      	lsls	r2, r2, #15
   14082:	4211      	tst	r1, r2
   14084:	d002      	beq.n	1408c <__aeabi_fadd+0x244>
   14086:	4216      	tst	r6, r2
   14088:	d100      	bne.n	1408c <__aeabi_fadd+0x244>
   1408a:	003b      	movs	r3, r7
   1408c:	24ff      	movs	r4, #255	; 0xff
   1408e:	e716      	b.n	13ebe <__aeabi_fadd+0x76>
   14090:	24ff      	movs	r4, #255	; 0xff
   14092:	2300      	movs	r3, #0
   14094:	e724      	b.n	13ee0 <__aeabi_fadd+0x98>
   14096:	2c00      	cmp	r4, #0
   14098:	d1ea      	bne.n	14070 <__aeabi_fadd+0x228>
   1409a:	2b00      	cmp	r3, #0
   1409c:	d058      	beq.n	14150 <__aeabi_fadd+0x308>
   1409e:	2f00      	cmp	r7, #0
   140a0:	d100      	bne.n	140a4 <__aeabi_fadd+0x25c>
   140a2:	e70c      	b.n	13ebe <__aeabi_fadd+0x76>
   140a4:	4463      	add	r3, ip
   140a6:	015a      	lsls	r2, r3, #5
   140a8:	d400      	bmi.n	140ac <__aeabi_fadd+0x264>
   140aa:	e739      	b.n	13f20 <__aeabi_fadd+0xd8>
   140ac:	4a2e      	ldr	r2, [pc, #184]	; (14168 <__aeabi_fadd+0x320>)
   140ae:	000c      	movs	r4, r1
   140b0:	4013      	ands	r3, r2
   140b2:	e704      	b.n	13ebe <__aeabi_fadd+0x76>
   140b4:	2101      	movs	r1, #1
   140b6:	e75c      	b.n	13f72 <__aeabi_fadd+0x12a>
   140b8:	2c00      	cmp	r4, #0
   140ba:	d11e      	bne.n	140fa <__aeabi_fadd+0x2b2>
   140bc:	2b00      	cmp	r3, #0
   140be:	d040      	beq.n	14142 <__aeabi_fadd+0x2fa>
   140c0:	43c9      	mvns	r1, r1
   140c2:	2900      	cmp	r1, #0
   140c4:	d00b      	beq.n	140de <__aeabi_fadd+0x296>
   140c6:	28ff      	cmp	r0, #255	; 0xff
   140c8:	d036      	beq.n	14138 <__aeabi_fadd+0x2f0>
   140ca:	291b      	cmp	r1, #27
   140cc:	dc47      	bgt.n	1415e <__aeabi_fadd+0x316>
   140ce:	001c      	movs	r4, r3
   140d0:	2620      	movs	r6, #32
   140d2:	40cc      	lsrs	r4, r1
   140d4:	1a71      	subs	r1, r6, r1
   140d6:	408b      	lsls	r3, r1
   140d8:	1e59      	subs	r1, r3, #1
   140da:	418b      	sbcs	r3, r1
   140dc:	4323      	orrs	r3, r4
   140de:	4463      	add	r3, ip
   140e0:	0004      	movs	r4, r0
   140e2:	e747      	b.n	13f74 <__aeabi_fadd+0x12c>
   140e4:	2b00      	cmp	r3, #0
   140e6:	d118      	bne.n	1411a <__aeabi_fadd+0x2d2>
   140e8:	1e3b      	subs	r3, r7, #0
   140ea:	d02d      	beq.n	14148 <__aeabi_fadd+0x300>
   140ec:	000d      	movs	r5, r1
   140ee:	24ff      	movs	r4, #255	; 0xff
   140f0:	e6e5      	b.n	13ebe <__aeabi_fadd+0x76>
   140f2:	003b      	movs	r3, r7
   140f4:	0004      	movs	r4, r0
   140f6:	000d      	movs	r5, r1
   140f8:	e6e1      	b.n	13ebe <__aeabi_fadd+0x76>
   140fa:	28ff      	cmp	r0, #255	; 0xff
   140fc:	d01c      	beq.n	14138 <__aeabi_fadd+0x2f0>
   140fe:	2480      	movs	r4, #128	; 0x80
   14100:	04e4      	lsls	r4, r4, #19
   14102:	4249      	negs	r1, r1
   14104:	4323      	orrs	r3, r4
   14106:	e7e0      	b.n	140ca <__aeabi_fadd+0x282>
   14108:	2f00      	cmp	r7, #0
   1410a:	d100      	bne.n	1410e <__aeabi_fadd+0x2c6>
   1410c:	e6d7      	b.n	13ebe <__aeabi_fadd+0x76>
   1410e:	1bde      	subs	r6, r3, r7
   14110:	0172      	lsls	r2, r6, #5
   14112:	d51f      	bpl.n	14154 <__aeabi_fadd+0x30c>
   14114:	1afb      	subs	r3, r7, r3
   14116:	000d      	movs	r5, r1
   14118:	e6d1      	b.n	13ebe <__aeabi_fadd+0x76>
   1411a:	24ff      	movs	r4, #255	; 0xff
   1411c:	2f00      	cmp	r7, #0
   1411e:	d100      	bne.n	14122 <__aeabi_fadd+0x2da>
   14120:	e6cd      	b.n	13ebe <__aeabi_fadd+0x76>
   14122:	2280      	movs	r2, #128	; 0x80
   14124:	4640      	mov	r0, r8
   14126:	03d2      	lsls	r2, r2, #15
   14128:	4210      	tst	r0, r2
   1412a:	d0af      	beq.n	1408c <__aeabi_fadd+0x244>
   1412c:	4216      	tst	r6, r2
   1412e:	d1ad      	bne.n	1408c <__aeabi_fadd+0x244>
   14130:	003b      	movs	r3, r7
   14132:	000d      	movs	r5, r1
   14134:	24ff      	movs	r4, #255	; 0xff
   14136:	e6c2      	b.n	13ebe <__aeabi_fadd+0x76>
   14138:	4663      	mov	r3, ip
   1413a:	24ff      	movs	r4, #255	; 0xff
   1413c:	e6bf      	b.n	13ebe <__aeabi_fadd+0x76>
   1413e:	2301      	movs	r3, #1
   14140:	e77a      	b.n	14038 <__aeabi_fadd+0x1f0>
   14142:	003b      	movs	r3, r7
   14144:	0004      	movs	r4, r0
   14146:	e6ba      	b.n	13ebe <__aeabi_fadd+0x76>
   14148:	2680      	movs	r6, #128	; 0x80
   1414a:	2200      	movs	r2, #0
   1414c:	03f6      	lsls	r6, r6, #15
   1414e:	e6f0      	b.n	13f32 <__aeabi_fadd+0xea>
   14150:	003b      	movs	r3, r7
   14152:	e6b4      	b.n	13ebe <__aeabi_fadd+0x76>
   14154:	1e33      	subs	r3, r6, #0
   14156:	d000      	beq.n	1415a <__aeabi_fadd+0x312>
   14158:	e6e2      	b.n	13f20 <__aeabi_fadd+0xd8>
   1415a:	2200      	movs	r2, #0
   1415c:	e721      	b.n	13fa2 <__aeabi_fadd+0x15a>
   1415e:	2301      	movs	r3, #1
   14160:	e7bd      	b.n	140de <__aeabi_fadd+0x296>
   14162:	46c0      	nop			; (mov r8, r8)
   14164:	7dffffff 	.word	0x7dffffff
   14168:	fbffffff 	.word	0xfbffffff

0001416c <__aeabi_fdiv>:
   1416c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1416e:	4657      	mov	r7, sl
   14170:	464e      	mov	r6, r9
   14172:	46de      	mov	lr, fp
   14174:	4645      	mov	r5, r8
   14176:	b5e0      	push	{r5, r6, r7, lr}
   14178:	0244      	lsls	r4, r0, #9
   1417a:	0043      	lsls	r3, r0, #1
   1417c:	0fc6      	lsrs	r6, r0, #31
   1417e:	b083      	sub	sp, #12
   14180:	1c0f      	adds	r7, r1, #0
   14182:	0a64      	lsrs	r4, r4, #9
   14184:	0e1b      	lsrs	r3, r3, #24
   14186:	46b2      	mov	sl, r6
   14188:	d053      	beq.n	14232 <__aeabi_fdiv+0xc6>
   1418a:	2bff      	cmp	r3, #255	; 0xff
   1418c:	d027      	beq.n	141de <__aeabi_fdiv+0x72>
   1418e:	2280      	movs	r2, #128	; 0x80
   14190:	00e4      	lsls	r4, r4, #3
   14192:	04d2      	lsls	r2, r2, #19
   14194:	4314      	orrs	r4, r2
   14196:	227f      	movs	r2, #127	; 0x7f
   14198:	4252      	negs	r2, r2
   1419a:	4690      	mov	r8, r2
   1419c:	4498      	add	r8, r3
   1419e:	2300      	movs	r3, #0
   141a0:	4699      	mov	r9, r3
   141a2:	469b      	mov	fp, r3
   141a4:	027d      	lsls	r5, r7, #9
   141a6:	0078      	lsls	r0, r7, #1
   141a8:	0ffb      	lsrs	r3, r7, #31
   141aa:	0a6d      	lsrs	r5, r5, #9
   141ac:	0e00      	lsrs	r0, r0, #24
   141ae:	9300      	str	r3, [sp, #0]
   141b0:	d024      	beq.n	141fc <__aeabi_fdiv+0x90>
   141b2:	28ff      	cmp	r0, #255	; 0xff
   141b4:	d046      	beq.n	14244 <__aeabi_fdiv+0xd8>
   141b6:	2380      	movs	r3, #128	; 0x80
   141b8:	2100      	movs	r1, #0
   141ba:	00ed      	lsls	r5, r5, #3
   141bc:	04db      	lsls	r3, r3, #19
   141be:	431d      	orrs	r5, r3
   141c0:	387f      	subs	r0, #127	; 0x7f
   141c2:	4647      	mov	r7, r8
   141c4:	1a38      	subs	r0, r7, r0
   141c6:	464f      	mov	r7, r9
   141c8:	430f      	orrs	r7, r1
   141ca:	00bf      	lsls	r7, r7, #2
   141cc:	46b9      	mov	r9, r7
   141ce:	0033      	movs	r3, r6
   141d0:	9a00      	ldr	r2, [sp, #0]
   141d2:	4f87      	ldr	r7, [pc, #540]	; (143f0 <__aeabi_fdiv+0x284>)
   141d4:	4053      	eors	r3, r2
   141d6:	464a      	mov	r2, r9
   141d8:	58ba      	ldr	r2, [r7, r2]
   141da:	9301      	str	r3, [sp, #4]
   141dc:	4697      	mov	pc, r2
   141de:	2c00      	cmp	r4, #0
   141e0:	d14e      	bne.n	14280 <__aeabi_fdiv+0x114>
   141e2:	2308      	movs	r3, #8
   141e4:	4699      	mov	r9, r3
   141e6:	33f7      	adds	r3, #247	; 0xf7
   141e8:	4698      	mov	r8, r3
   141ea:	3bfd      	subs	r3, #253	; 0xfd
   141ec:	469b      	mov	fp, r3
   141ee:	027d      	lsls	r5, r7, #9
   141f0:	0078      	lsls	r0, r7, #1
   141f2:	0ffb      	lsrs	r3, r7, #31
   141f4:	0a6d      	lsrs	r5, r5, #9
   141f6:	0e00      	lsrs	r0, r0, #24
   141f8:	9300      	str	r3, [sp, #0]
   141fa:	d1da      	bne.n	141b2 <__aeabi_fdiv+0x46>
   141fc:	2d00      	cmp	r5, #0
   141fe:	d126      	bne.n	1424e <__aeabi_fdiv+0xe2>
   14200:	2000      	movs	r0, #0
   14202:	2101      	movs	r1, #1
   14204:	0033      	movs	r3, r6
   14206:	9a00      	ldr	r2, [sp, #0]
   14208:	4f7a      	ldr	r7, [pc, #488]	; (143f4 <__aeabi_fdiv+0x288>)
   1420a:	4053      	eors	r3, r2
   1420c:	4642      	mov	r2, r8
   1420e:	1a10      	subs	r0, r2, r0
   14210:	464a      	mov	r2, r9
   14212:	430a      	orrs	r2, r1
   14214:	0092      	lsls	r2, r2, #2
   14216:	58ba      	ldr	r2, [r7, r2]
   14218:	001d      	movs	r5, r3
   1421a:	4697      	mov	pc, r2
   1421c:	9b00      	ldr	r3, [sp, #0]
   1421e:	002c      	movs	r4, r5
   14220:	469a      	mov	sl, r3
   14222:	468b      	mov	fp, r1
   14224:	465b      	mov	r3, fp
   14226:	2b02      	cmp	r3, #2
   14228:	d131      	bne.n	1428e <__aeabi_fdiv+0x122>
   1422a:	4653      	mov	r3, sl
   1422c:	21ff      	movs	r1, #255	; 0xff
   1422e:	2400      	movs	r4, #0
   14230:	e038      	b.n	142a4 <__aeabi_fdiv+0x138>
   14232:	2c00      	cmp	r4, #0
   14234:	d117      	bne.n	14266 <__aeabi_fdiv+0xfa>
   14236:	2304      	movs	r3, #4
   14238:	4699      	mov	r9, r3
   1423a:	2300      	movs	r3, #0
   1423c:	4698      	mov	r8, r3
   1423e:	3301      	adds	r3, #1
   14240:	469b      	mov	fp, r3
   14242:	e7af      	b.n	141a4 <__aeabi_fdiv+0x38>
   14244:	20ff      	movs	r0, #255	; 0xff
   14246:	2d00      	cmp	r5, #0
   14248:	d10b      	bne.n	14262 <__aeabi_fdiv+0xf6>
   1424a:	2102      	movs	r1, #2
   1424c:	e7da      	b.n	14204 <__aeabi_fdiv+0x98>
   1424e:	0028      	movs	r0, r5
   14250:	f002 fb52 	bl	168f8 <__clzsi2>
   14254:	1f43      	subs	r3, r0, #5
   14256:	409d      	lsls	r5, r3
   14258:	2376      	movs	r3, #118	; 0x76
   1425a:	425b      	negs	r3, r3
   1425c:	1a18      	subs	r0, r3, r0
   1425e:	2100      	movs	r1, #0
   14260:	e7af      	b.n	141c2 <__aeabi_fdiv+0x56>
   14262:	2103      	movs	r1, #3
   14264:	e7ad      	b.n	141c2 <__aeabi_fdiv+0x56>
   14266:	0020      	movs	r0, r4
   14268:	f002 fb46 	bl	168f8 <__clzsi2>
   1426c:	1f43      	subs	r3, r0, #5
   1426e:	409c      	lsls	r4, r3
   14270:	2376      	movs	r3, #118	; 0x76
   14272:	425b      	negs	r3, r3
   14274:	1a1b      	subs	r3, r3, r0
   14276:	4698      	mov	r8, r3
   14278:	2300      	movs	r3, #0
   1427a:	4699      	mov	r9, r3
   1427c:	469b      	mov	fp, r3
   1427e:	e791      	b.n	141a4 <__aeabi_fdiv+0x38>
   14280:	230c      	movs	r3, #12
   14282:	4699      	mov	r9, r3
   14284:	33f3      	adds	r3, #243	; 0xf3
   14286:	4698      	mov	r8, r3
   14288:	3bfc      	subs	r3, #252	; 0xfc
   1428a:	469b      	mov	fp, r3
   1428c:	e78a      	b.n	141a4 <__aeabi_fdiv+0x38>
   1428e:	2b03      	cmp	r3, #3
   14290:	d100      	bne.n	14294 <__aeabi_fdiv+0x128>
   14292:	e0a5      	b.n	143e0 <__aeabi_fdiv+0x274>
   14294:	4655      	mov	r5, sl
   14296:	2b01      	cmp	r3, #1
   14298:	d000      	beq.n	1429c <__aeabi_fdiv+0x130>
   1429a:	e081      	b.n	143a0 <__aeabi_fdiv+0x234>
   1429c:	2301      	movs	r3, #1
   1429e:	2100      	movs	r1, #0
   142a0:	2400      	movs	r4, #0
   142a2:	402b      	ands	r3, r5
   142a4:	0264      	lsls	r4, r4, #9
   142a6:	05c9      	lsls	r1, r1, #23
   142a8:	0a60      	lsrs	r0, r4, #9
   142aa:	07db      	lsls	r3, r3, #31
   142ac:	4308      	orrs	r0, r1
   142ae:	4318      	orrs	r0, r3
   142b0:	b003      	add	sp, #12
   142b2:	bc3c      	pop	{r2, r3, r4, r5}
   142b4:	4690      	mov	r8, r2
   142b6:	4699      	mov	r9, r3
   142b8:	46a2      	mov	sl, r4
   142ba:	46ab      	mov	fp, r5
   142bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   142be:	2480      	movs	r4, #128	; 0x80
   142c0:	2300      	movs	r3, #0
   142c2:	03e4      	lsls	r4, r4, #15
   142c4:	21ff      	movs	r1, #255	; 0xff
   142c6:	e7ed      	b.n	142a4 <__aeabi_fdiv+0x138>
   142c8:	21ff      	movs	r1, #255	; 0xff
   142ca:	2400      	movs	r4, #0
   142cc:	e7ea      	b.n	142a4 <__aeabi_fdiv+0x138>
   142ce:	2301      	movs	r3, #1
   142d0:	1a59      	subs	r1, r3, r1
   142d2:	291b      	cmp	r1, #27
   142d4:	dd66      	ble.n	143a4 <__aeabi_fdiv+0x238>
   142d6:	9a01      	ldr	r2, [sp, #4]
   142d8:	4013      	ands	r3, r2
   142da:	2100      	movs	r1, #0
   142dc:	2400      	movs	r4, #0
   142de:	e7e1      	b.n	142a4 <__aeabi_fdiv+0x138>
   142e0:	2380      	movs	r3, #128	; 0x80
   142e2:	03db      	lsls	r3, r3, #15
   142e4:	421c      	tst	r4, r3
   142e6:	d038      	beq.n	1435a <__aeabi_fdiv+0x1ee>
   142e8:	421d      	tst	r5, r3
   142ea:	d051      	beq.n	14390 <__aeabi_fdiv+0x224>
   142ec:	431c      	orrs	r4, r3
   142ee:	0264      	lsls	r4, r4, #9
   142f0:	0a64      	lsrs	r4, r4, #9
   142f2:	0033      	movs	r3, r6
   142f4:	21ff      	movs	r1, #255	; 0xff
   142f6:	e7d5      	b.n	142a4 <__aeabi_fdiv+0x138>
   142f8:	0163      	lsls	r3, r4, #5
   142fa:	016c      	lsls	r4, r5, #5
   142fc:	42a3      	cmp	r3, r4
   142fe:	d23b      	bcs.n	14378 <__aeabi_fdiv+0x20c>
   14300:	261b      	movs	r6, #27
   14302:	2100      	movs	r1, #0
   14304:	3801      	subs	r0, #1
   14306:	2501      	movs	r5, #1
   14308:	001f      	movs	r7, r3
   1430a:	0049      	lsls	r1, r1, #1
   1430c:	005b      	lsls	r3, r3, #1
   1430e:	2f00      	cmp	r7, #0
   14310:	db01      	blt.n	14316 <__aeabi_fdiv+0x1aa>
   14312:	429c      	cmp	r4, r3
   14314:	d801      	bhi.n	1431a <__aeabi_fdiv+0x1ae>
   14316:	1b1b      	subs	r3, r3, r4
   14318:	4329      	orrs	r1, r5
   1431a:	3e01      	subs	r6, #1
   1431c:	2e00      	cmp	r6, #0
   1431e:	d1f3      	bne.n	14308 <__aeabi_fdiv+0x19c>
   14320:	001c      	movs	r4, r3
   14322:	1e63      	subs	r3, r4, #1
   14324:	419c      	sbcs	r4, r3
   14326:	430c      	orrs	r4, r1
   14328:	0001      	movs	r1, r0
   1432a:	317f      	adds	r1, #127	; 0x7f
   1432c:	2900      	cmp	r1, #0
   1432e:	ddce      	ble.n	142ce <__aeabi_fdiv+0x162>
   14330:	0763      	lsls	r3, r4, #29
   14332:	d004      	beq.n	1433e <__aeabi_fdiv+0x1d2>
   14334:	230f      	movs	r3, #15
   14336:	4023      	ands	r3, r4
   14338:	2b04      	cmp	r3, #4
   1433a:	d000      	beq.n	1433e <__aeabi_fdiv+0x1d2>
   1433c:	3404      	adds	r4, #4
   1433e:	0123      	lsls	r3, r4, #4
   14340:	d503      	bpl.n	1434a <__aeabi_fdiv+0x1de>
   14342:	0001      	movs	r1, r0
   14344:	4b2c      	ldr	r3, [pc, #176]	; (143f8 <__aeabi_fdiv+0x28c>)
   14346:	3180      	adds	r1, #128	; 0x80
   14348:	401c      	ands	r4, r3
   1434a:	29fe      	cmp	r1, #254	; 0xfe
   1434c:	dd0d      	ble.n	1436a <__aeabi_fdiv+0x1fe>
   1434e:	2301      	movs	r3, #1
   14350:	9a01      	ldr	r2, [sp, #4]
   14352:	21ff      	movs	r1, #255	; 0xff
   14354:	4013      	ands	r3, r2
   14356:	2400      	movs	r4, #0
   14358:	e7a4      	b.n	142a4 <__aeabi_fdiv+0x138>
   1435a:	2380      	movs	r3, #128	; 0x80
   1435c:	03db      	lsls	r3, r3, #15
   1435e:	431c      	orrs	r4, r3
   14360:	0264      	lsls	r4, r4, #9
   14362:	0a64      	lsrs	r4, r4, #9
   14364:	0033      	movs	r3, r6
   14366:	21ff      	movs	r1, #255	; 0xff
   14368:	e79c      	b.n	142a4 <__aeabi_fdiv+0x138>
   1436a:	2301      	movs	r3, #1
   1436c:	9a01      	ldr	r2, [sp, #4]
   1436e:	01a4      	lsls	r4, r4, #6
   14370:	0a64      	lsrs	r4, r4, #9
   14372:	b2c9      	uxtb	r1, r1
   14374:	4013      	ands	r3, r2
   14376:	e795      	b.n	142a4 <__aeabi_fdiv+0x138>
   14378:	1b1b      	subs	r3, r3, r4
   1437a:	261a      	movs	r6, #26
   1437c:	2101      	movs	r1, #1
   1437e:	e7c2      	b.n	14306 <__aeabi_fdiv+0x19a>
   14380:	9b00      	ldr	r3, [sp, #0]
   14382:	468b      	mov	fp, r1
   14384:	469a      	mov	sl, r3
   14386:	2400      	movs	r4, #0
   14388:	e74c      	b.n	14224 <__aeabi_fdiv+0xb8>
   1438a:	0263      	lsls	r3, r4, #9
   1438c:	d5e5      	bpl.n	1435a <__aeabi_fdiv+0x1ee>
   1438e:	2500      	movs	r5, #0
   14390:	2480      	movs	r4, #128	; 0x80
   14392:	03e4      	lsls	r4, r4, #15
   14394:	432c      	orrs	r4, r5
   14396:	0264      	lsls	r4, r4, #9
   14398:	0a64      	lsrs	r4, r4, #9
   1439a:	9b00      	ldr	r3, [sp, #0]
   1439c:	21ff      	movs	r1, #255	; 0xff
   1439e:	e781      	b.n	142a4 <__aeabi_fdiv+0x138>
   143a0:	9501      	str	r5, [sp, #4]
   143a2:	e7c1      	b.n	14328 <__aeabi_fdiv+0x1bc>
   143a4:	0023      	movs	r3, r4
   143a6:	2020      	movs	r0, #32
   143a8:	40cb      	lsrs	r3, r1
   143aa:	1a41      	subs	r1, r0, r1
   143ac:	408c      	lsls	r4, r1
   143ae:	1e61      	subs	r1, r4, #1
   143b0:	418c      	sbcs	r4, r1
   143b2:	431c      	orrs	r4, r3
   143b4:	0763      	lsls	r3, r4, #29
   143b6:	d004      	beq.n	143c2 <__aeabi_fdiv+0x256>
   143b8:	230f      	movs	r3, #15
   143ba:	4023      	ands	r3, r4
   143bc:	2b04      	cmp	r3, #4
   143be:	d000      	beq.n	143c2 <__aeabi_fdiv+0x256>
   143c0:	3404      	adds	r4, #4
   143c2:	0163      	lsls	r3, r4, #5
   143c4:	d505      	bpl.n	143d2 <__aeabi_fdiv+0x266>
   143c6:	2301      	movs	r3, #1
   143c8:	9a01      	ldr	r2, [sp, #4]
   143ca:	2101      	movs	r1, #1
   143cc:	4013      	ands	r3, r2
   143ce:	2400      	movs	r4, #0
   143d0:	e768      	b.n	142a4 <__aeabi_fdiv+0x138>
   143d2:	2301      	movs	r3, #1
   143d4:	9a01      	ldr	r2, [sp, #4]
   143d6:	01a4      	lsls	r4, r4, #6
   143d8:	0a64      	lsrs	r4, r4, #9
   143da:	4013      	ands	r3, r2
   143dc:	2100      	movs	r1, #0
   143de:	e761      	b.n	142a4 <__aeabi_fdiv+0x138>
   143e0:	2380      	movs	r3, #128	; 0x80
   143e2:	03db      	lsls	r3, r3, #15
   143e4:	431c      	orrs	r4, r3
   143e6:	0264      	lsls	r4, r4, #9
   143e8:	0a64      	lsrs	r4, r4, #9
   143ea:	4653      	mov	r3, sl
   143ec:	21ff      	movs	r1, #255	; 0xff
   143ee:	e759      	b.n	142a4 <__aeabi_fdiv+0x138>
   143f0:	0001930c 	.word	0x0001930c
   143f4:	0001934c 	.word	0x0001934c
   143f8:	f7ffffff 	.word	0xf7ffffff

000143fc <__eqsf2>:
   143fc:	b570      	push	{r4, r5, r6, lr}
   143fe:	0042      	lsls	r2, r0, #1
   14400:	0245      	lsls	r5, r0, #9
   14402:	024e      	lsls	r6, r1, #9
   14404:	004c      	lsls	r4, r1, #1
   14406:	0fc3      	lsrs	r3, r0, #31
   14408:	0a6d      	lsrs	r5, r5, #9
   1440a:	0e12      	lsrs	r2, r2, #24
   1440c:	0a76      	lsrs	r6, r6, #9
   1440e:	0e24      	lsrs	r4, r4, #24
   14410:	0fc9      	lsrs	r1, r1, #31
   14412:	2001      	movs	r0, #1
   14414:	2aff      	cmp	r2, #255	; 0xff
   14416:	d006      	beq.n	14426 <__eqsf2+0x2a>
   14418:	2cff      	cmp	r4, #255	; 0xff
   1441a:	d003      	beq.n	14424 <__eqsf2+0x28>
   1441c:	42a2      	cmp	r2, r4
   1441e:	d101      	bne.n	14424 <__eqsf2+0x28>
   14420:	42b5      	cmp	r5, r6
   14422:	d006      	beq.n	14432 <__eqsf2+0x36>
   14424:	bd70      	pop	{r4, r5, r6, pc}
   14426:	2d00      	cmp	r5, #0
   14428:	d1fc      	bne.n	14424 <__eqsf2+0x28>
   1442a:	2cff      	cmp	r4, #255	; 0xff
   1442c:	d1fa      	bne.n	14424 <__eqsf2+0x28>
   1442e:	2e00      	cmp	r6, #0
   14430:	d1f8      	bne.n	14424 <__eqsf2+0x28>
   14432:	428b      	cmp	r3, r1
   14434:	d006      	beq.n	14444 <__eqsf2+0x48>
   14436:	2001      	movs	r0, #1
   14438:	2a00      	cmp	r2, #0
   1443a:	d1f3      	bne.n	14424 <__eqsf2+0x28>
   1443c:	0028      	movs	r0, r5
   1443e:	1e45      	subs	r5, r0, #1
   14440:	41a8      	sbcs	r0, r5
   14442:	e7ef      	b.n	14424 <__eqsf2+0x28>
   14444:	2000      	movs	r0, #0
   14446:	e7ed      	b.n	14424 <__eqsf2+0x28>

00014448 <__gesf2>:
   14448:	b5f0      	push	{r4, r5, r6, r7, lr}
   1444a:	0042      	lsls	r2, r0, #1
   1444c:	0245      	lsls	r5, r0, #9
   1444e:	024c      	lsls	r4, r1, #9
   14450:	0fc3      	lsrs	r3, r0, #31
   14452:	0048      	lsls	r0, r1, #1
   14454:	0a6d      	lsrs	r5, r5, #9
   14456:	0e12      	lsrs	r2, r2, #24
   14458:	0a64      	lsrs	r4, r4, #9
   1445a:	0e00      	lsrs	r0, r0, #24
   1445c:	0fc9      	lsrs	r1, r1, #31
   1445e:	2aff      	cmp	r2, #255	; 0xff
   14460:	d01e      	beq.n	144a0 <__gesf2+0x58>
   14462:	28ff      	cmp	r0, #255	; 0xff
   14464:	d021      	beq.n	144aa <__gesf2+0x62>
   14466:	2a00      	cmp	r2, #0
   14468:	d10a      	bne.n	14480 <__gesf2+0x38>
   1446a:	426e      	negs	r6, r5
   1446c:	416e      	adcs	r6, r5
   1446e:	b2f6      	uxtb	r6, r6
   14470:	2800      	cmp	r0, #0
   14472:	d10f      	bne.n	14494 <__gesf2+0x4c>
   14474:	2c00      	cmp	r4, #0
   14476:	d10d      	bne.n	14494 <__gesf2+0x4c>
   14478:	2000      	movs	r0, #0
   1447a:	2d00      	cmp	r5, #0
   1447c:	d009      	beq.n	14492 <__gesf2+0x4a>
   1447e:	e005      	b.n	1448c <__gesf2+0x44>
   14480:	2800      	cmp	r0, #0
   14482:	d101      	bne.n	14488 <__gesf2+0x40>
   14484:	2c00      	cmp	r4, #0
   14486:	d001      	beq.n	1448c <__gesf2+0x44>
   14488:	428b      	cmp	r3, r1
   1448a:	d011      	beq.n	144b0 <__gesf2+0x68>
   1448c:	2101      	movs	r1, #1
   1448e:	4258      	negs	r0, r3
   14490:	4308      	orrs	r0, r1
   14492:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14494:	2e00      	cmp	r6, #0
   14496:	d0f7      	beq.n	14488 <__gesf2+0x40>
   14498:	2001      	movs	r0, #1
   1449a:	3901      	subs	r1, #1
   1449c:	4308      	orrs	r0, r1
   1449e:	e7f8      	b.n	14492 <__gesf2+0x4a>
   144a0:	2d00      	cmp	r5, #0
   144a2:	d0de      	beq.n	14462 <__gesf2+0x1a>
   144a4:	2002      	movs	r0, #2
   144a6:	4240      	negs	r0, r0
   144a8:	e7f3      	b.n	14492 <__gesf2+0x4a>
   144aa:	2c00      	cmp	r4, #0
   144ac:	d0db      	beq.n	14466 <__gesf2+0x1e>
   144ae:	e7f9      	b.n	144a4 <__gesf2+0x5c>
   144b0:	4282      	cmp	r2, r0
   144b2:	dceb      	bgt.n	1448c <__gesf2+0x44>
   144b4:	db04      	blt.n	144c0 <__gesf2+0x78>
   144b6:	42a5      	cmp	r5, r4
   144b8:	d8e8      	bhi.n	1448c <__gesf2+0x44>
   144ba:	2000      	movs	r0, #0
   144bc:	42a5      	cmp	r5, r4
   144be:	d2e8      	bcs.n	14492 <__gesf2+0x4a>
   144c0:	2101      	movs	r1, #1
   144c2:	1e58      	subs	r0, r3, #1
   144c4:	4308      	orrs	r0, r1
   144c6:	e7e4      	b.n	14492 <__gesf2+0x4a>

000144c8 <__lesf2>:
   144c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   144ca:	0042      	lsls	r2, r0, #1
   144cc:	024d      	lsls	r5, r1, #9
   144ce:	004c      	lsls	r4, r1, #1
   144d0:	0246      	lsls	r6, r0, #9
   144d2:	0a76      	lsrs	r6, r6, #9
   144d4:	0e12      	lsrs	r2, r2, #24
   144d6:	0fc3      	lsrs	r3, r0, #31
   144d8:	0a6d      	lsrs	r5, r5, #9
   144da:	0e24      	lsrs	r4, r4, #24
   144dc:	0fc9      	lsrs	r1, r1, #31
   144de:	2aff      	cmp	r2, #255	; 0xff
   144e0:	d016      	beq.n	14510 <__lesf2+0x48>
   144e2:	2cff      	cmp	r4, #255	; 0xff
   144e4:	d018      	beq.n	14518 <__lesf2+0x50>
   144e6:	2a00      	cmp	r2, #0
   144e8:	d10a      	bne.n	14500 <__lesf2+0x38>
   144ea:	4270      	negs	r0, r6
   144ec:	4170      	adcs	r0, r6
   144ee:	b2c0      	uxtb	r0, r0
   144f0:	2c00      	cmp	r4, #0
   144f2:	d015      	beq.n	14520 <__lesf2+0x58>
   144f4:	2800      	cmp	r0, #0
   144f6:	d005      	beq.n	14504 <__lesf2+0x3c>
   144f8:	2001      	movs	r0, #1
   144fa:	3901      	subs	r1, #1
   144fc:	4308      	orrs	r0, r1
   144fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14500:	2c00      	cmp	r4, #0
   14502:	d013      	beq.n	1452c <__lesf2+0x64>
   14504:	4299      	cmp	r1, r3
   14506:	d014      	beq.n	14532 <__lesf2+0x6a>
   14508:	2001      	movs	r0, #1
   1450a:	425b      	negs	r3, r3
   1450c:	4318      	orrs	r0, r3
   1450e:	e7f6      	b.n	144fe <__lesf2+0x36>
   14510:	2002      	movs	r0, #2
   14512:	2e00      	cmp	r6, #0
   14514:	d1f3      	bne.n	144fe <__lesf2+0x36>
   14516:	e7e4      	b.n	144e2 <__lesf2+0x1a>
   14518:	2002      	movs	r0, #2
   1451a:	2d00      	cmp	r5, #0
   1451c:	d1ef      	bne.n	144fe <__lesf2+0x36>
   1451e:	e7e2      	b.n	144e6 <__lesf2+0x1e>
   14520:	2d00      	cmp	r5, #0
   14522:	d1e7      	bne.n	144f4 <__lesf2+0x2c>
   14524:	2000      	movs	r0, #0
   14526:	2e00      	cmp	r6, #0
   14528:	d0e9      	beq.n	144fe <__lesf2+0x36>
   1452a:	e7ed      	b.n	14508 <__lesf2+0x40>
   1452c:	2d00      	cmp	r5, #0
   1452e:	d1e9      	bne.n	14504 <__lesf2+0x3c>
   14530:	e7ea      	b.n	14508 <__lesf2+0x40>
   14532:	42a2      	cmp	r2, r4
   14534:	dc06      	bgt.n	14544 <__lesf2+0x7c>
   14536:	dbdf      	blt.n	144f8 <__lesf2+0x30>
   14538:	42ae      	cmp	r6, r5
   1453a:	d803      	bhi.n	14544 <__lesf2+0x7c>
   1453c:	2000      	movs	r0, #0
   1453e:	42ae      	cmp	r6, r5
   14540:	d3da      	bcc.n	144f8 <__lesf2+0x30>
   14542:	e7dc      	b.n	144fe <__lesf2+0x36>
   14544:	2001      	movs	r0, #1
   14546:	4249      	negs	r1, r1
   14548:	4308      	orrs	r0, r1
   1454a:	e7d8      	b.n	144fe <__lesf2+0x36>

0001454c <__aeabi_fmul>:
   1454c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1454e:	4657      	mov	r7, sl
   14550:	464e      	mov	r6, r9
   14552:	4645      	mov	r5, r8
   14554:	46de      	mov	lr, fp
   14556:	b5e0      	push	{r5, r6, r7, lr}
   14558:	0247      	lsls	r7, r0, #9
   1455a:	0046      	lsls	r6, r0, #1
   1455c:	4688      	mov	r8, r1
   1455e:	0a7f      	lsrs	r7, r7, #9
   14560:	0e36      	lsrs	r6, r6, #24
   14562:	0fc4      	lsrs	r4, r0, #31
   14564:	2e00      	cmp	r6, #0
   14566:	d047      	beq.n	145f8 <__aeabi_fmul+0xac>
   14568:	2eff      	cmp	r6, #255	; 0xff
   1456a:	d024      	beq.n	145b6 <__aeabi_fmul+0x6a>
   1456c:	00fb      	lsls	r3, r7, #3
   1456e:	2780      	movs	r7, #128	; 0x80
   14570:	04ff      	lsls	r7, r7, #19
   14572:	431f      	orrs	r7, r3
   14574:	2300      	movs	r3, #0
   14576:	4699      	mov	r9, r3
   14578:	469a      	mov	sl, r3
   1457a:	3e7f      	subs	r6, #127	; 0x7f
   1457c:	4643      	mov	r3, r8
   1457e:	025d      	lsls	r5, r3, #9
   14580:	0058      	lsls	r0, r3, #1
   14582:	0fdb      	lsrs	r3, r3, #31
   14584:	0a6d      	lsrs	r5, r5, #9
   14586:	0e00      	lsrs	r0, r0, #24
   14588:	4698      	mov	r8, r3
   1458a:	d043      	beq.n	14614 <__aeabi_fmul+0xc8>
   1458c:	28ff      	cmp	r0, #255	; 0xff
   1458e:	d03b      	beq.n	14608 <__aeabi_fmul+0xbc>
   14590:	00eb      	lsls	r3, r5, #3
   14592:	2580      	movs	r5, #128	; 0x80
   14594:	2200      	movs	r2, #0
   14596:	04ed      	lsls	r5, r5, #19
   14598:	431d      	orrs	r5, r3
   1459a:	387f      	subs	r0, #127	; 0x7f
   1459c:	1836      	adds	r6, r6, r0
   1459e:	1c73      	adds	r3, r6, #1
   145a0:	4641      	mov	r1, r8
   145a2:	469b      	mov	fp, r3
   145a4:	464b      	mov	r3, r9
   145a6:	4061      	eors	r1, r4
   145a8:	4313      	orrs	r3, r2
   145aa:	2b0f      	cmp	r3, #15
   145ac:	d864      	bhi.n	14678 <__aeabi_fmul+0x12c>
   145ae:	4875      	ldr	r0, [pc, #468]	; (14784 <__aeabi_fmul+0x238>)
   145b0:	009b      	lsls	r3, r3, #2
   145b2:	58c3      	ldr	r3, [r0, r3]
   145b4:	469f      	mov	pc, r3
   145b6:	2f00      	cmp	r7, #0
   145b8:	d142      	bne.n	14640 <__aeabi_fmul+0xf4>
   145ba:	2308      	movs	r3, #8
   145bc:	4699      	mov	r9, r3
   145be:	3b06      	subs	r3, #6
   145c0:	26ff      	movs	r6, #255	; 0xff
   145c2:	469a      	mov	sl, r3
   145c4:	e7da      	b.n	1457c <__aeabi_fmul+0x30>
   145c6:	4641      	mov	r1, r8
   145c8:	2a02      	cmp	r2, #2
   145ca:	d028      	beq.n	1461e <__aeabi_fmul+0xd2>
   145cc:	2a03      	cmp	r2, #3
   145ce:	d100      	bne.n	145d2 <__aeabi_fmul+0x86>
   145d0:	e0ce      	b.n	14770 <__aeabi_fmul+0x224>
   145d2:	2a01      	cmp	r2, #1
   145d4:	d000      	beq.n	145d8 <__aeabi_fmul+0x8c>
   145d6:	e0ac      	b.n	14732 <__aeabi_fmul+0x1e6>
   145d8:	4011      	ands	r1, r2
   145da:	2000      	movs	r0, #0
   145dc:	2200      	movs	r2, #0
   145de:	b2cc      	uxtb	r4, r1
   145e0:	0240      	lsls	r0, r0, #9
   145e2:	05d2      	lsls	r2, r2, #23
   145e4:	0a40      	lsrs	r0, r0, #9
   145e6:	07e4      	lsls	r4, r4, #31
   145e8:	4310      	orrs	r0, r2
   145ea:	4320      	orrs	r0, r4
   145ec:	bc3c      	pop	{r2, r3, r4, r5}
   145ee:	4690      	mov	r8, r2
   145f0:	4699      	mov	r9, r3
   145f2:	46a2      	mov	sl, r4
   145f4:	46ab      	mov	fp, r5
   145f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   145f8:	2f00      	cmp	r7, #0
   145fa:	d115      	bne.n	14628 <__aeabi_fmul+0xdc>
   145fc:	2304      	movs	r3, #4
   145fe:	4699      	mov	r9, r3
   14600:	3b03      	subs	r3, #3
   14602:	2600      	movs	r6, #0
   14604:	469a      	mov	sl, r3
   14606:	e7b9      	b.n	1457c <__aeabi_fmul+0x30>
   14608:	20ff      	movs	r0, #255	; 0xff
   1460a:	2202      	movs	r2, #2
   1460c:	2d00      	cmp	r5, #0
   1460e:	d0c5      	beq.n	1459c <__aeabi_fmul+0x50>
   14610:	2203      	movs	r2, #3
   14612:	e7c3      	b.n	1459c <__aeabi_fmul+0x50>
   14614:	2d00      	cmp	r5, #0
   14616:	d119      	bne.n	1464c <__aeabi_fmul+0x100>
   14618:	2000      	movs	r0, #0
   1461a:	2201      	movs	r2, #1
   1461c:	e7be      	b.n	1459c <__aeabi_fmul+0x50>
   1461e:	2401      	movs	r4, #1
   14620:	22ff      	movs	r2, #255	; 0xff
   14622:	400c      	ands	r4, r1
   14624:	2000      	movs	r0, #0
   14626:	e7db      	b.n	145e0 <__aeabi_fmul+0x94>
   14628:	0038      	movs	r0, r7
   1462a:	f002 f965 	bl	168f8 <__clzsi2>
   1462e:	2676      	movs	r6, #118	; 0x76
   14630:	1f43      	subs	r3, r0, #5
   14632:	409f      	lsls	r7, r3
   14634:	2300      	movs	r3, #0
   14636:	4276      	negs	r6, r6
   14638:	1a36      	subs	r6, r6, r0
   1463a:	4699      	mov	r9, r3
   1463c:	469a      	mov	sl, r3
   1463e:	e79d      	b.n	1457c <__aeabi_fmul+0x30>
   14640:	230c      	movs	r3, #12
   14642:	4699      	mov	r9, r3
   14644:	3b09      	subs	r3, #9
   14646:	26ff      	movs	r6, #255	; 0xff
   14648:	469a      	mov	sl, r3
   1464a:	e797      	b.n	1457c <__aeabi_fmul+0x30>
   1464c:	0028      	movs	r0, r5
   1464e:	f002 f953 	bl	168f8 <__clzsi2>
   14652:	1f43      	subs	r3, r0, #5
   14654:	409d      	lsls	r5, r3
   14656:	2376      	movs	r3, #118	; 0x76
   14658:	425b      	negs	r3, r3
   1465a:	1a18      	subs	r0, r3, r0
   1465c:	2200      	movs	r2, #0
   1465e:	e79d      	b.n	1459c <__aeabi_fmul+0x50>
   14660:	2080      	movs	r0, #128	; 0x80
   14662:	2400      	movs	r4, #0
   14664:	03c0      	lsls	r0, r0, #15
   14666:	22ff      	movs	r2, #255	; 0xff
   14668:	e7ba      	b.n	145e0 <__aeabi_fmul+0x94>
   1466a:	003d      	movs	r5, r7
   1466c:	4652      	mov	r2, sl
   1466e:	e7ab      	b.n	145c8 <__aeabi_fmul+0x7c>
   14670:	003d      	movs	r5, r7
   14672:	0021      	movs	r1, r4
   14674:	4652      	mov	r2, sl
   14676:	e7a7      	b.n	145c8 <__aeabi_fmul+0x7c>
   14678:	0c3b      	lsrs	r3, r7, #16
   1467a:	469c      	mov	ip, r3
   1467c:	042a      	lsls	r2, r5, #16
   1467e:	0c12      	lsrs	r2, r2, #16
   14680:	0c2b      	lsrs	r3, r5, #16
   14682:	0014      	movs	r4, r2
   14684:	4660      	mov	r0, ip
   14686:	4665      	mov	r5, ip
   14688:	043f      	lsls	r7, r7, #16
   1468a:	0c3f      	lsrs	r7, r7, #16
   1468c:	437c      	muls	r4, r7
   1468e:	4342      	muls	r2, r0
   14690:	435d      	muls	r5, r3
   14692:	437b      	muls	r3, r7
   14694:	0c27      	lsrs	r7, r4, #16
   14696:	189b      	adds	r3, r3, r2
   14698:	18ff      	adds	r7, r7, r3
   1469a:	42ba      	cmp	r2, r7
   1469c:	d903      	bls.n	146a6 <__aeabi_fmul+0x15a>
   1469e:	2380      	movs	r3, #128	; 0x80
   146a0:	025b      	lsls	r3, r3, #9
   146a2:	469c      	mov	ip, r3
   146a4:	4465      	add	r5, ip
   146a6:	0424      	lsls	r4, r4, #16
   146a8:	043a      	lsls	r2, r7, #16
   146aa:	0c24      	lsrs	r4, r4, #16
   146ac:	1912      	adds	r2, r2, r4
   146ae:	0193      	lsls	r3, r2, #6
   146b0:	1e5c      	subs	r4, r3, #1
   146b2:	41a3      	sbcs	r3, r4
   146b4:	0c3f      	lsrs	r7, r7, #16
   146b6:	0e92      	lsrs	r2, r2, #26
   146b8:	197d      	adds	r5, r7, r5
   146ba:	431a      	orrs	r2, r3
   146bc:	01ad      	lsls	r5, r5, #6
   146be:	4315      	orrs	r5, r2
   146c0:	012b      	lsls	r3, r5, #4
   146c2:	d504      	bpl.n	146ce <__aeabi_fmul+0x182>
   146c4:	2301      	movs	r3, #1
   146c6:	465e      	mov	r6, fp
   146c8:	086a      	lsrs	r2, r5, #1
   146ca:	401d      	ands	r5, r3
   146cc:	4315      	orrs	r5, r2
   146ce:	0032      	movs	r2, r6
   146d0:	327f      	adds	r2, #127	; 0x7f
   146d2:	2a00      	cmp	r2, #0
   146d4:	dd25      	ble.n	14722 <__aeabi_fmul+0x1d6>
   146d6:	076b      	lsls	r3, r5, #29
   146d8:	d004      	beq.n	146e4 <__aeabi_fmul+0x198>
   146da:	230f      	movs	r3, #15
   146dc:	402b      	ands	r3, r5
   146de:	2b04      	cmp	r3, #4
   146e0:	d000      	beq.n	146e4 <__aeabi_fmul+0x198>
   146e2:	3504      	adds	r5, #4
   146e4:	012b      	lsls	r3, r5, #4
   146e6:	d503      	bpl.n	146f0 <__aeabi_fmul+0x1a4>
   146e8:	0032      	movs	r2, r6
   146ea:	4b27      	ldr	r3, [pc, #156]	; (14788 <__aeabi_fmul+0x23c>)
   146ec:	3280      	adds	r2, #128	; 0x80
   146ee:	401d      	ands	r5, r3
   146f0:	2afe      	cmp	r2, #254	; 0xfe
   146f2:	dc94      	bgt.n	1461e <__aeabi_fmul+0xd2>
   146f4:	2401      	movs	r4, #1
   146f6:	01a8      	lsls	r0, r5, #6
   146f8:	0a40      	lsrs	r0, r0, #9
   146fa:	b2d2      	uxtb	r2, r2
   146fc:	400c      	ands	r4, r1
   146fe:	e76f      	b.n	145e0 <__aeabi_fmul+0x94>
   14700:	2080      	movs	r0, #128	; 0x80
   14702:	03c0      	lsls	r0, r0, #15
   14704:	4207      	tst	r7, r0
   14706:	d007      	beq.n	14718 <__aeabi_fmul+0x1cc>
   14708:	4205      	tst	r5, r0
   1470a:	d105      	bne.n	14718 <__aeabi_fmul+0x1cc>
   1470c:	4328      	orrs	r0, r5
   1470e:	0240      	lsls	r0, r0, #9
   14710:	0a40      	lsrs	r0, r0, #9
   14712:	4644      	mov	r4, r8
   14714:	22ff      	movs	r2, #255	; 0xff
   14716:	e763      	b.n	145e0 <__aeabi_fmul+0x94>
   14718:	4338      	orrs	r0, r7
   1471a:	0240      	lsls	r0, r0, #9
   1471c:	0a40      	lsrs	r0, r0, #9
   1471e:	22ff      	movs	r2, #255	; 0xff
   14720:	e75e      	b.n	145e0 <__aeabi_fmul+0x94>
   14722:	2401      	movs	r4, #1
   14724:	1aa3      	subs	r3, r4, r2
   14726:	2b1b      	cmp	r3, #27
   14728:	dd05      	ble.n	14736 <__aeabi_fmul+0x1ea>
   1472a:	400c      	ands	r4, r1
   1472c:	2200      	movs	r2, #0
   1472e:	2000      	movs	r0, #0
   14730:	e756      	b.n	145e0 <__aeabi_fmul+0x94>
   14732:	465e      	mov	r6, fp
   14734:	e7cb      	b.n	146ce <__aeabi_fmul+0x182>
   14736:	002a      	movs	r2, r5
   14738:	2020      	movs	r0, #32
   1473a:	40da      	lsrs	r2, r3
   1473c:	1ac3      	subs	r3, r0, r3
   1473e:	409d      	lsls	r5, r3
   14740:	002b      	movs	r3, r5
   14742:	1e5d      	subs	r5, r3, #1
   14744:	41ab      	sbcs	r3, r5
   14746:	4313      	orrs	r3, r2
   14748:	075a      	lsls	r2, r3, #29
   1474a:	d004      	beq.n	14756 <__aeabi_fmul+0x20a>
   1474c:	220f      	movs	r2, #15
   1474e:	401a      	ands	r2, r3
   14750:	2a04      	cmp	r2, #4
   14752:	d000      	beq.n	14756 <__aeabi_fmul+0x20a>
   14754:	3304      	adds	r3, #4
   14756:	015a      	lsls	r2, r3, #5
   14758:	d504      	bpl.n	14764 <__aeabi_fmul+0x218>
   1475a:	2401      	movs	r4, #1
   1475c:	2201      	movs	r2, #1
   1475e:	400c      	ands	r4, r1
   14760:	2000      	movs	r0, #0
   14762:	e73d      	b.n	145e0 <__aeabi_fmul+0x94>
   14764:	2401      	movs	r4, #1
   14766:	019b      	lsls	r3, r3, #6
   14768:	0a58      	lsrs	r0, r3, #9
   1476a:	400c      	ands	r4, r1
   1476c:	2200      	movs	r2, #0
   1476e:	e737      	b.n	145e0 <__aeabi_fmul+0x94>
   14770:	2080      	movs	r0, #128	; 0x80
   14772:	2401      	movs	r4, #1
   14774:	03c0      	lsls	r0, r0, #15
   14776:	4328      	orrs	r0, r5
   14778:	0240      	lsls	r0, r0, #9
   1477a:	0a40      	lsrs	r0, r0, #9
   1477c:	400c      	ands	r4, r1
   1477e:	22ff      	movs	r2, #255	; 0xff
   14780:	e72e      	b.n	145e0 <__aeabi_fmul+0x94>
   14782:	46c0      	nop			; (mov r8, r8)
   14784:	0001938c 	.word	0x0001938c
   14788:	f7ffffff 	.word	0xf7ffffff

0001478c <__aeabi_fsub>:
   1478c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1478e:	464f      	mov	r7, r9
   14790:	46d6      	mov	lr, sl
   14792:	4646      	mov	r6, r8
   14794:	0044      	lsls	r4, r0, #1
   14796:	b5c0      	push	{r6, r7, lr}
   14798:	0fc2      	lsrs	r2, r0, #31
   1479a:	0247      	lsls	r7, r0, #9
   1479c:	0248      	lsls	r0, r1, #9
   1479e:	0a40      	lsrs	r0, r0, #9
   147a0:	4684      	mov	ip, r0
   147a2:	4666      	mov	r6, ip
   147a4:	0a7b      	lsrs	r3, r7, #9
   147a6:	0048      	lsls	r0, r1, #1
   147a8:	0fc9      	lsrs	r1, r1, #31
   147aa:	469a      	mov	sl, r3
   147ac:	0e24      	lsrs	r4, r4, #24
   147ae:	0015      	movs	r5, r2
   147b0:	00db      	lsls	r3, r3, #3
   147b2:	0e00      	lsrs	r0, r0, #24
   147b4:	4689      	mov	r9, r1
   147b6:	00f6      	lsls	r6, r6, #3
   147b8:	28ff      	cmp	r0, #255	; 0xff
   147ba:	d100      	bne.n	147be <__aeabi_fsub+0x32>
   147bc:	e08f      	b.n	148de <__aeabi_fsub+0x152>
   147be:	2101      	movs	r1, #1
   147c0:	464f      	mov	r7, r9
   147c2:	404f      	eors	r7, r1
   147c4:	0039      	movs	r1, r7
   147c6:	4291      	cmp	r1, r2
   147c8:	d066      	beq.n	14898 <__aeabi_fsub+0x10c>
   147ca:	1a22      	subs	r2, r4, r0
   147cc:	2a00      	cmp	r2, #0
   147ce:	dc00      	bgt.n	147d2 <__aeabi_fsub+0x46>
   147d0:	e09d      	b.n	1490e <__aeabi_fsub+0x182>
   147d2:	2800      	cmp	r0, #0
   147d4:	d13d      	bne.n	14852 <__aeabi_fsub+0xc6>
   147d6:	2e00      	cmp	r6, #0
   147d8:	d100      	bne.n	147dc <__aeabi_fsub+0x50>
   147da:	e08b      	b.n	148f4 <__aeabi_fsub+0x168>
   147dc:	1e51      	subs	r1, r2, #1
   147de:	2900      	cmp	r1, #0
   147e0:	d000      	beq.n	147e4 <__aeabi_fsub+0x58>
   147e2:	e0b5      	b.n	14950 <__aeabi_fsub+0x1c4>
   147e4:	2401      	movs	r4, #1
   147e6:	1b9b      	subs	r3, r3, r6
   147e8:	015a      	lsls	r2, r3, #5
   147ea:	d544      	bpl.n	14876 <__aeabi_fsub+0xea>
   147ec:	019b      	lsls	r3, r3, #6
   147ee:	099f      	lsrs	r7, r3, #6
   147f0:	0038      	movs	r0, r7
   147f2:	f002 f881 	bl	168f8 <__clzsi2>
   147f6:	3805      	subs	r0, #5
   147f8:	4087      	lsls	r7, r0
   147fa:	4284      	cmp	r4, r0
   147fc:	dd00      	ble.n	14800 <__aeabi_fsub+0x74>
   147fe:	e096      	b.n	1492e <__aeabi_fsub+0x1a2>
   14800:	1b04      	subs	r4, r0, r4
   14802:	003a      	movs	r2, r7
   14804:	2020      	movs	r0, #32
   14806:	3401      	adds	r4, #1
   14808:	40e2      	lsrs	r2, r4
   1480a:	1b04      	subs	r4, r0, r4
   1480c:	40a7      	lsls	r7, r4
   1480e:	003b      	movs	r3, r7
   14810:	1e5f      	subs	r7, r3, #1
   14812:	41bb      	sbcs	r3, r7
   14814:	2400      	movs	r4, #0
   14816:	4313      	orrs	r3, r2
   14818:	075a      	lsls	r2, r3, #29
   1481a:	d004      	beq.n	14826 <__aeabi_fsub+0x9a>
   1481c:	220f      	movs	r2, #15
   1481e:	401a      	ands	r2, r3
   14820:	2a04      	cmp	r2, #4
   14822:	d000      	beq.n	14826 <__aeabi_fsub+0x9a>
   14824:	3304      	adds	r3, #4
   14826:	015a      	lsls	r2, r3, #5
   14828:	d527      	bpl.n	1487a <__aeabi_fsub+0xee>
   1482a:	3401      	adds	r4, #1
   1482c:	2cff      	cmp	r4, #255	; 0xff
   1482e:	d100      	bne.n	14832 <__aeabi_fsub+0xa6>
   14830:	e079      	b.n	14926 <__aeabi_fsub+0x19a>
   14832:	2201      	movs	r2, #1
   14834:	019b      	lsls	r3, r3, #6
   14836:	0a5b      	lsrs	r3, r3, #9
   14838:	b2e4      	uxtb	r4, r4
   1483a:	402a      	ands	r2, r5
   1483c:	025b      	lsls	r3, r3, #9
   1483e:	05e4      	lsls	r4, r4, #23
   14840:	0a58      	lsrs	r0, r3, #9
   14842:	07d2      	lsls	r2, r2, #31
   14844:	4320      	orrs	r0, r4
   14846:	4310      	orrs	r0, r2
   14848:	bc1c      	pop	{r2, r3, r4}
   1484a:	4690      	mov	r8, r2
   1484c:	4699      	mov	r9, r3
   1484e:	46a2      	mov	sl, r4
   14850:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14852:	2cff      	cmp	r4, #255	; 0xff
   14854:	d0e0      	beq.n	14818 <__aeabi_fsub+0x8c>
   14856:	2180      	movs	r1, #128	; 0x80
   14858:	04c9      	lsls	r1, r1, #19
   1485a:	430e      	orrs	r6, r1
   1485c:	2a1b      	cmp	r2, #27
   1485e:	dc7b      	bgt.n	14958 <__aeabi_fsub+0x1cc>
   14860:	0031      	movs	r1, r6
   14862:	2020      	movs	r0, #32
   14864:	40d1      	lsrs	r1, r2
   14866:	1a82      	subs	r2, r0, r2
   14868:	4096      	lsls	r6, r2
   1486a:	1e72      	subs	r2, r6, #1
   1486c:	4196      	sbcs	r6, r2
   1486e:	430e      	orrs	r6, r1
   14870:	1b9b      	subs	r3, r3, r6
   14872:	015a      	lsls	r2, r3, #5
   14874:	d4ba      	bmi.n	147ec <__aeabi_fsub+0x60>
   14876:	075a      	lsls	r2, r3, #29
   14878:	d1d0      	bne.n	1481c <__aeabi_fsub+0x90>
   1487a:	2201      	movs	r2, #1
   1487c:	08df      	lsrs	r7, r3, #3
   1487e:	402a      	ands	r2, r5
   14880:	2cff      	cmp	r4, #255	; 0xff
   14882:	d133      	bne.n	148ec <__aeabi_fsub+0x160>
   14884:	2f00      	cmp	r7, #0
   14886:	d100      	bne.n	1488a <__aeabi_fsub+0xfe>
   14888:	e0a8      	b.n	149dc <__aeabi_fsub+0x250>
   1488a:	2380      	movs	r3, #128	; 0x80
   1488c:	03db      	lsls	r3, r3, #15
   1488e:	433b      	orrs	r3, r7
   14890:	025b      	lsls	r3, r3, #9
   14892:	0a5b      	lsrs	r3, r3, #9
   14894:	24ff      	movs	r4, #255	; 0xff
   14896:	e7d1      	b.n	1483c <__aeabi_fsub+0xb0>
   14898:	1a21      	subs	r1, r4, r0
   1489a:	2900      	cmp	r1, #0
   1489c:	dd4c      	ble.n	14938 <__aeabi_fsub+0x1ac>
   1489e:	2800      	cmp	r0, #0
   148a0:	d02a      	beq.n	148f8 <__aeabi_fsub+0x16c>
   148a2:	2cff      	cmp	r4, #255	; 0xff
   148a4:	d0b8      	beq.n	14818 <__aeabi_fsub+0x8c>
   148a6:	2080      	movs	r0, #128	; 0x80
   148a8:	04c0      	lsls	r0, r0, #19
   148aa:	4306      	orrs	r6, r0
   148ac:	291b      	cmp	r1, #27
   148ae:	dd00      	ble.n	148b2 <__aeabi_fsub+0x126>
   148b0:	e0af      	b.n	14a12 <__aeabi_fsub+0x286>
   148b2:	0030      	movs	r0, r6
   148b4:	2720      	movs	r7, #32
   148b6:	40c8      	lsrs	r0, r1
   148b8:	1a79      	subs	r1, r7, r1
   148ba:	408e      	lsls	r6, r1
   148bc:	1e71      	subs	r1, r6, #1
   148be:	418e      	sbcs	r6, r1
   148c0:	4306      	orrs	r6, r0
   148c2:	199b      	adds	r3, r3, r6
   148c4:	0159      	lsls	r1, r3, #5
   148c6:	d5d6      	bpl.n	14876 <__aeabi_fsub+0xea>
   148c8:	3401      	adds	r4, #1
   148ca:	2cff      	cmp	r4, #255	; 0xff
   148cc:	d100      	bne.n	148d0 <__aeabi_fsub+0x144>
   148ce:	e085      	b.n	149dc <__aeabi_fsub+0x250>
   148d0:	2201      	movs	r2, #1
   148d2:	497a      	ldr	r1, [pc, #488]	; (14abc <__aeabi_fsub+0x330>)
   148d4:	401a      	ands	r2, r3
   148d6:	085b      	lsrs	r3, r3, #1
   148d8:	400b      	ands	r3, r1
   148da:	4313      	orrs	r3, r2
   148dc:	e79c      	b.n	14818 <__aeabi_fsub+0x8c>
   148de:	2e00      	cmp	r6, #0
   148e0:	d000      	beq.n	148e4 <__aeabi_fsub+0x158>
   148e2:	e770      	b.n	147c6 <__aeabi_fsub+0x3a>
   148e4:	e76b      	b.n	147be <__aeabi_fsub+0x32>
   148e6:	1e3b      	subs	r3, r7, #0
   148e8:	d1c5      	bne.n	14876 <__aeabi_fsub+0xea>
   148ea:	2200      	movs	r2, #0
   148ec:	027b      	lsls	r3, r7, #9
   148ee:	0a5b      	lsrs	r3, r3, #9
   148f0:	b2e4      	uxtb	r4, r4
   148f2:	e7a3      	b.n	1483c <__aeabi_fsub+0xb0>
   148f4:	0014      	movs	r4, r2
   148f6:	e78f      	b.n	14818 <__aeabi_fsub+0x8c>
   148f8:	2e00      	cmp	r6, #0
   148fa:	d04d      	beq.n	14998 <__aeabi_fsub+0x20c>
   148fc:	1e48      	subs	r0, r1, #1
   148fe:	2800      	cmp	r0, #0
   14900:	d157      	bne.n	149b2 <__aeabi_fsub+0x226>
   14902:	199b      	adds	r3, r3, r6
   14904:	2401      	movs	r4, #1
   14906:	015a      	lsls	r2, r3, #5
   14908:	d5b5      	bpl.n	14876 <__aeabi_fsub+0xea>
   1490a:	2402      	movs	r4, #2
   1490c:	e7e0      	b.n	148d0 <__aeabi_fsub+0x144>
   1490e:	2a00      	cmp	r2, #0
   14910:	d125      	bne.n	1495e <__aeabi_fsub+0x1d2>
   14912:	1c62      	adds	r2, r4, #1
   14914:	b2d2      	uxtb	r2, r2
   14916:	2a01      	cmp	r2, #1
   14918:	dd72      	ble.n	14a00 <__aeabi_fsub+0x274>
   1491a:	1b9f      	subs	r7, r3, r6
   1491c:	017a      	lsls	r2, r7, #5
   1491e:	d535      	bpl.n	1498c <__aeabi_fsub+0x200>
   14920:	1af7      	subs	r7, r6, r3
   14922:	000d      	movs	r5, r1
   14924:	e764      	b.n	147f0 <__aeabi_fsub+0x64>
   14926:	2201      	movs	r2, #1
   14928:	2300      	movs	r3, #0
   1492a:	402a      	ands	r2, r5
   1492c:	e786      	b.n	1483c <__aeabi_fsub+0xb0>
   1492e:	003b      	movs	r3, r7
   14930:	4a63      	ldr	r2, [pc, #396]	; (14ac0 <__aeabi_fsub+0x334>)
   14932:	1a24      	subs	r4, r4, r0
   14934:	4013      	ands	r3, r2
   14936:	e76f      	b.n	14818 <__aeabi_fsub+0x8c>
   14938:	2900      	cmp	r1, #0
   1493a:	d16c      	bne.n	14a16 <__aeabi_fsub+0x28a>
   1493c:	1c61      	adds	r1, r4, #1
   1493e:	b2c8      	uxtb	r0, r1
   14940:	2801      	cmp	r0, #1
   14942:	dd4e      	ble.n	149e2 <__aeabi_fsub+0x256>
   14944:	29ff      	cmp	r1, #255	; 0xff
   14946:	d049      	beq.n	149dc <__aeabi_fsub+0x250>
   14948:	199b      	adds	r3, r3, r6
   1494a:	085b      	lsrs	r3, r3, #1
   1494c:	000c      	movs	r4, r1
   1494e:	e763      	b.n	14818 <__aeabi_fsub+0x8c>
   14950:	2aff      	cmp	r2, #255	; 0xff
   14952:	d041      	beq.n	149d8 <__aeabi_fsub+0x24c>
   14954:	000a      	movs	r2, r1
   14956:	e781      	b.n	1485c <__aeabi_fsub+0xd0>
   14958:	2601      	movs	r6, #1
   1495a:	1b9b      	subs	r3, r3, r6
   1495c:	e789      	b.n	14872 <__aeabi_fsub+0xe6>
   1495e:	2c00      	cmp	r4, #0
   14960:	d01c      	beq.n	1499c <__aeabi_fsub+0x210>
   14962:	28ff      	cmp	r0, #255	; 0xff
   14964:	d021      	beq.n	149aa <__aeabi_fsub+0x21e>
   14966:	2480      	movs	r4, #128	; 0x80
   14968:	04e4      	lsls	r4, r4, #19
   1496a:	4252      	negs	r2, r2
   1496c:	4323      	orrs	r3, r4
   1496e:	2a1b      	cmp	r2, #27
   14970:	dd00      	ble.n	14974 <__aeabi_fsub+0x1e8>
   14972:	e096      	b.n	14aa2 <__aeabi_fsub+0x316>
   14974:	001c      	movs	r4, r3
   14976:	2520      	movs	r5, #32
   14978:	40d4      	lsrs	r4, r2
   1497a:	1aaa      	subs	r2, r5, r2
   1497c:	4093      	lsls	r3, r2
   1497e:	1e5a      	subs	r2, r3, #1
   14980:	4193      	sbcs	r3, r2
   14982:	4323      	orrs	r3, r4
   14984:	1af3      	subs	r3, r6, r3
   14986:	0004      	movs	r4, r0
   14988:	000d      	movs	r5, r1
   1498a:	e72d      	b.n	147e8 <__aeabi_fsub+0x5c>
   1498c:	2f00      	cmp	r7, #0
   1498e:	d000      	beq.n	14992 <__aeabi_fsub+0x206>
   14990:	e72e      	b.n	147f0 <__aeabi_fsub+0x64>
   14992:	2200      	movs	r2, #0
   14994:	2400      	movs	r4, #0
   14996:	e7a9      	b.n	148ec <__aeabi_fsub+0x160>
   14998:	000c      	movs	r4, r1
   1499a:	e73d      	b.n	14818 <__aeabi_fsub+0x8c>
   1499c:	2b00      	cmp	r3, #0
   1499e:	d058      	beq.n	14a52 <__aeabi_fsub+0x2c6>
   149a0:	43d2      	mvns	r2, r2
   149a2:	2a00      	cmp	r2, #0
   149a4:	d0ee      	beq.n	14984 <__aeabi_fsub+0x1f8>
   149a6:	28ff      	cmp	r0, #255	; 0xff
   149a8:	d1e1      	bne.n	1496e <__aeabi_fsub+0x1e2>
   149aa:	0033      	movs	r3, r6
   149ac:	24ff      	movs	r4, #255	; 0xff
   149ae:	000d      	movs	r5, r1
   149b0:	e732      	b.n	14818 <__aeabi_fsub+0x8c>
   149b2:	29ff      	cmp	r1, #255	; 0xff
   149b4:	d010      	beq.n	149d8 <__aeabi_fsub+0x24c>
   149b6:	0001      	movs	r1, r0
   149b8:	e778      	b.n	148ac <__aeabi_fsub+0x120>
   149ba:	2b00      	cmp	r3, #0
   149bc:	d06e      	beq.n	14a9c <__aeabi_fsub+0x310>
   149be:	24ff      	movs	r4, #255	; 0xff
   149c0:	2e00      	cmp	r6, #0
   149c2:	d100      	bne.n	149c6 <__aeabi_fsub+0x23a>
   149c4:	e728      	b.n	14818 <__aeabi_fsub+0x8c>
   149c6:	2280      	movs	r2, #128	; 0x80
   149c8:	4651      	mov	r1, sl
   149ca:	03d2      	lsls	r2, r2, #15
   149cc:	4211      	tst	r1, r2
   149ce:	d003      	beq.n	149d8 <__aeabi_fsub+0x24c>
   149d0:	4661      	mov	r1, ip
   149d2:	4211      	tst	r1, r2
   149d4:	d100      	bne.n	149d8 <__aeabi_fsub+0x24c>
   149d6:	0033      	movs	r3, r6
   149d8:	24ff      	movs	r4, #255	; 0xff
   149da:	e71d      	b.n	14818 <__aeabi_fsub+0x8c>
   149dc:	24ff      	movs	r4, #255	; 0xff
   149de:	2300      	movs	r3, #0
   149e0:	e72c      	b.n	1483c <__aeabi_fsub+0xb0>
   149e2:	2c00      	cmp	r4, #0
   149e4:	d1e9      	bne.n	149ba <__aeabi_fsub+0x22e>
   149e6:	2b00      	cmp	r3, #0
   149e8:	d063      	beq.n	14ab2 <__aeabi_fsub+0x326>
   149ea:	2e00      	cmp	r6, #0
   149ec:	d100      	bne.n	149f0 <__aeabi_fsub+0x264>
   149ee:	e713      	b.n	14818 <__aeabi_fsub+0x8c>
   149f0:	199b      	adds	r3, r3, r6
   149f2:	015a      	lsls	r2, r3, #5
   149f4:	d400      	bmi.n	149f8 <__aeabi_fsub+0x26c>
   149f6:	e73e      	b.n	14876 <__aeabi_fsub+0xea>
   149f8:	4a31      	ldr	r2, [pc, #196]	; (14ac0 <__aeabi_fsub+0x334>)
   149fa:	000c      	movs	r4, r1
   149fc:	4013      	ands	r3, r2
   149fe:	e70b      	b.n	14818 <__aeabi_fsub+0x8c>
   14a00:	2c00      	cmp	r4, #0
   14a02:	d11e      	bne.n	14a42 <__aeabi_fsub+0x2b6>
   14a04:	2b00      	cmp	r3, #0
   14a06:	d12f      	bne.n	14a68 <__aeabi_fsub+0x2dc>
   14a08:	2e00      	cmp	r6, #0
   14a0a:	d04f      	beq.n	14aac <__aeabi_fsub+0x320>
   14a0c:	0033      	movs	r3, r6
   14a0e:	000d      	movs	r5, r1
   14a10:	e702      	b.n	14818 <__aeabi_fsub+0x8c>
   14a12:	2601      	movs	r6, #1
   14a14:	e755      	b.n	148c2 <__aeabi_fsub+0x136>
   14a16:	2c00      	cmp	r4, #0
   14a18:	d11f      	bne.n	14a5a <__aeabi_fsub+0x2ce>
   14a1a:	2b00      	cmp	r3, #0
   14a1c:	d043      	beq.n	14aa6 <__aeabi_fsub+0x31a>
   14a1e:	43c9      	mvns	r1, r1
   14a20:	2900      	cmp	r1, #0
   14a22:	d00b      	beq.n	14a3c <__aeabi_fsub+0x2b0>
   14a24:	28ff      	cmp	r0, #255	; 0xff
   14a26:	d039      	beq.n	14a9c <__aeabi_fsub+0x310>
   14a28:	291b      	cmp	r1, #27
   14a2a:	dc44      	bgt.n	14ab6 <__aeabi_fsub+0x32a>
   14a2c:	001c      	movs	r4, r3
   14a2e:	2720      	movs	r7, #32
   14a30:	40cc      	lsrs	r4, r1
   14a32:	1a79      	subs	r1, r7, r1
   14a34:	408b      	lsls	r3, r1
   14a36:	1e59      	subs	r1, r3, #1
   14a38:	418b      	sbcs	r3, r1
   14a3a:	4323      	orrs	r3, r4
   14a3c:	199b      	adds	r3, r3, r6
   14a3e:	0004      	movs	r4, r0
   14a40:	e740      	b.n	148c4 <__aeabi_fsub+0x138>
   14a42:	2b00      	cmp	r3, #0
   14a44:	d11a      	bne.n	14a7c <__aeabi_fsub+0x2f0>
   14a46:	2e00      	cmp	r6, #0
   14a48:	d124      	bne.n	14a94 <__aeabi_fsub+0x308>
   14a4a:	2780      	movs	r7, #128	; 0x80
   14a4c:	2200      	movs	r2, #0
   14a4e:	03ff      	lsls	r7, r7, #15
   14a50:	e71b      	b.n	1488a <__aeabi_fsub+0xfe>
   14a52:	0033      	movs	r3, r6
   14a54:	0004      	movs	r4, r0
   14a56:	000d      	movs	r5, r1
   14a58:	e6de      	b.n	14818 <__aeabi_fsub+0x8c>
   14a5a:	28ff      	cmp	r0, #255	; 0xff
   14a5c:	d01e      	beq.n	14a9c <__aeabi_fsub+0x310>
   14a5e:	2480      	movs	r4, #128	; 0x80
   14a60:	04e4      	lsls	r4, r4, #19
   14a62:	4249      	negs	r1, r1
   14a64:	4323      	orrs	r3, r4
   14a66:	e7df      	b.n	14a28 <__aeabi_fsub+0x29c>
   14a68:	2e00      	cmp	r6, #0
   14a6a:	d100      	bne.n	14a6e <__aeabi_fsub+0x2e2>
   14a6c:	e6d4      	b.n	14818 <__aeabi_fsub+0x8c>
   14a6e:	1b9f      	subs	r7, r3, r6
   14a70:	017a      	lsls	r2, r7, #5
   14a72:	d400      	bmi.n	14a76 <__aeabi_fsub+0x2ea>
   14a74:	e737      	b.n	148e6 <__aeabi_fsub+0x15a>
   14a76:	1af3      	subs	r3, r6, r3
   14a78:	000d      	movs	r5, r1
   14a7a:	e6cd      	b.n	14818 <__aeabi_fsub+0x8c>
   14a7c:	24ff      	movs	r4, #255	; 0xff
   14a7e:	2e00      	cmp	r6, #0
   14a80:	d100      	bne.n	14a84 <__aeabi_fsub+0x2f8>
   14a82:	e6c9      	b.n	14818 <__aeabi_fsub+0x8c>
   14a84:	2280      	movs	r2, #128	; 0x80
   14a86:	4650      	mov	r0, sl
   14a88:	03d2      	lsls	r2, r2, #15
   14a8a:	4210      	tst	r0, r2
   14a8c:	d0a4      	beq.n	149d8 <__aeabi_fsub+0x24c>
   14a8e:	4660      	mov	r0, ip
   14a90:	4210      	tst	r0, r2
   14a92:	d1a1      	bne.n	149d8 <__aeabi_fsub+0x24c>
   14a94:	0033      	movs	r3, r6
   14a96:	000d      	movs	r5, r1
   14a98:	24ff      	movs	r4, #255	; 0xff
   14a9a:	e6bd      	b.n	14818 <__aeabi_fsub+0x8c>
   14a9c:	0033      	movs	r3, r6
   14a9e:	24ff      	movs	r4, #255	; 0xff
   14aa0:	e6ba      	b.n	14818 <__aeabi_fsub+0x8c>
   14aa2:	2301      	movs	r3, #1
   14aa4:	e76e      	b.n	14984 <__aeabi_fsub+0x1f8>
   14aa6:	0033      	movs	r3, r6
   14aa8:	0004      	movs	r4, r0
   14aaa:	e6b5      	b.n	14818 <__aeabi_fsub+0x8c>
   14aac:	2700      	movs	r7, #0
   14aae:	2200      	movs	r2, #0
   14ab0:	e71c      	b.n	148ec <__aeabi_fsub+0x160>
   14ab2:	0033      	movs	r3, r6
   14ab4:	e6b0      	b.n	14818 <__aeabi_fsub+0x8c>
   14ab6:	2301      	movs	r3, #1
   14ab8:	e7c0      	b.n	14a3c <__aeabi_fsub+0x2b0>
   14aba:	46c0      	nop			; (mov r8, r8)
   14abc:	7dffffff 	.word	0x7dffffff
   14ac0:	fbffffff 	.word	0xfbffffff

00014ac4 <__aeabi_f2iz>:
   14ac4:	0241      	lsls	r1, r0, #9
   14ac6:	0043      	lsls	r3, r0, #1
   14ac8:	0fc2      	lsrs	r2, r0, #31
   14aca:	0a49      	lsrs	r1, r1, #9
   14acc:	0e1b      	lsrs	r3, r3, #24
   14ace:	2000      	movs	r0, #0
   14ad0:	2b7e      	cmp	r3, #126	; 0x7e
   14ad2:	dd0d      	ble.n	14af0 <__aeabi_f2iz+0x2c>
   14ad4:	2b9d      	cmp	r3, #157	; 0x9d
   14ad6:	dc0c      	bgt.n	14af2 <__aeabi_f2iz+0x2e>
   14ad8:	2080      	movs	r0, #128	; 0x80
   14ada:	0400      	lsls	r0, r0, #16
   14adc:	4301      	orrs	r1, r0
   14ade:	2b95      	cmp	r3, #149	; 0x95
   14ae0:	dc0a      	bgt.n	14af8 <__aeabi_f2iz+0x34>
   14ae2:	2096      	movs	r0, #150	; 0x96
   14ae4:	1ac3      	subs	r3, r0, r3
   14ae6:	40d9      	lsrs	r1, r3
   14ae8:	4248      	negs	r0, r1
   14aea:	2a00      	cmp	r2, #0
   14aec:	d100      	bne.n	14af0 <__aeabi_f2iz+0x2c>
   14aee:	0008      	movs	r0, r1
   14af0:	4770      	bx	lr
   14af2:	4b03      	ldr	r3, [pc, #12]	; (14b00 <__aeabi_f2iz+0x3c>)
   14af4:	18d0      	adds	r0, r2, r3
   14af6:	e7fb      	b.n	14af0 <__aeabi_f2iz+0x2c>
   14af8:	3b96      	subs	r3, #150	; 0x96
   14afa:	4099      	lsls	r1, r3
   14afc:	e7f4      	b.n	14ae8 <__aeabi_f2iz+0x24>
   14afe:	46c0      	nop			; (mov r8, r8)
   14b00:	7fffffff 	.word	0x7fffffff

00014b04 <__aeabi_i2f>:
   14b04:	b570      	push	{r4, r5, r6, lr}
   14b06:	2800      	cmp	r0, #0
   14b08:	d030      	beq.n	14b6c <__aeabi_i2f+0x68>
   14b0a:	17c3      	asrs	r3, r0, #31
   14b0c:	18c4      	adds	r4, r0, r3
   14b0e:	405c      	eors	r4, r3
   14b10:	0fc5      	lsrs	r5, r0, #31
   14b12:	0020      	movs	r0, r4
   14b14:	f001 fef0 	bl	168f8 <__clzsi2>
   14b18:	239e      	movs	r3, #158	; 0x9e
   14b1a:	1a1b      	subs	r3, r3, r0
   14b1c:	2b96      	cmp	r3, #150	; 0x96
   14b1e:	dc0d      	bgt.n	14b3c <__aeabi_i2f+0x38>
   14b20:	2296      	movs	r2, #150	; 0x96
   14b22:	1ad2      	subs	r2, r2, r3
   14b24:	4094      	lsls	r4, r2
   14b26:	002a      	movs	r2, r5
   14b28:	0264      	lsls	r4, r4, #9
   14b2a:	0a64      	lsrs	r4, r4, #9
   14b2c:	b2db      	uxtb	r3, r3
   14b2e:	0264      	lsls	r4, r4, #9
   14b30:	05db      	lsls	r3, r3, #23
   14b32:	0a60      	lsrs	r0, r4, #9
   14b34:	07d2      	lsls	r2, r2, #31
   14b36:	4318      	orrs	r0, r3
   14b38:	4310      	orrs	r0, r2
   14b3a:	bd70      	pop	{r4, r5, r6, pc}
   14b3c:	2b99      	cmp	r3, #153	; 0x99
   14b3e:	dc19      	bgt.n	14b74 <__aeabi_i2f+0x70>
   14b40:	2299      	movs	r2, #153	; 0x99
   14b42:	1ad2      	subs	r2, r2, r3
   14b44:	2a00      	cmp	r2, #0
   14b46:	dd29      	ble.n	14b9c <__aeabi_i2f+0x98>
   14b48:	4094      	lsls	r4, r2
   14b4a:	0022      	movs	r2, r4
   14b4c:	4c14      	ldr	r4, [pc, #80]	; (14ba0 <__aeabi_i2f+0x9c>)
   14b4e:	4014      	ands	r4, r2
   14b50:	0751      	lsls	r1, r2, #29
   14b52:	d004      	beq.n	14b5e <__aeabi_i2f+0x5a>
   14b54:	210f      	movs	r1, #15
   14b56:	400a      	ands	r2, r1
   14b58:	2a04      	cmp	r2, #4
   14b5a:	d000      	beq.n	14b5e <__aeabi_i2f+0x5a>
   14b5c:	3404      	adds	r4, #4
   14b5e:	0162      	lsls	r2, r4, #5
   14b60:	d413      	bmi.n	14b8a <__aeabi_i2f+0x86>
   14b62:	01a4      	lsls	r4, r4, #6
   14b64:	0a64      	lsrs	r4, r4, #9
   14b66:	b2db      	uxtb	r3, r3
   14b68:	002a      	movs	r2, r5
   14b6a:	e7e0      	b.n	14b2e <__aeabi_i2f+0x2a>
   14b6c:	2200      	movs	r2, #0
   14b6e:	2300      	movs	r3, #0
   14b70:	2400      	movs	r4, #0
   14b72:	e7dc      	b.n	14b2e <__aeabi_i2f+0x2a>
   14b74:	2205      	movs	r2, #5
   14b76:	0021      	movs	r1, r4
   14b78:	1a12      	subs	r2, r2, r0
   14b7a:	40d1      	lsrs	r1, r2
   14b7c:	22b9      	movs	r2, #185	; 0xb9
   14b7e:	1ad2      	subs	r2, r2, r3
   14b80:	4094      	lsls	r4, r2
   14b82:	1e62      	subs	r2, r4, #1
   14b84:	4194      	sbcs	r4, r2
   14b86:	430c      	orrs	r4, r1
   14b88:	e7da      	b.n	14b40 <__aeabi_i2f+0x3c>
   14b8a:	4b05      	ldr	r3, [pc, #20]	; (14ba0 <__aeabi_i2f+0x9c>)
   14b8c:	002a      	movs	r2, r5
   14b8e:	401c      	ands	r4, r3
   14b90:	239f      	movs	r3, #159	; 0x9f
   14b92:	01a4      	lsls	r4, r4, #6
   14b94:	1a1b      	subs	r3, r3, r0
   14b96:	0a64      	lsrs	r4, r4, #9
   14b98:	b2db      	uxtb	r3, r3
   14b9a:	e7c8      	b.n	14b2e <__aeabi_i2f+0x2a>
   14b9c:	0022      	movs	r2, r4
   14b9e:	e7d5      	b.n	14b4c <__aeabi_i2f+0x48>
   14ba0:	fbffffff 	.word	0xfbffffff

00014ba4 <__aeabi_ui2f>:
   14ba4:	b510      	push	{r4, lr}
   14ba6:	1e04      	subs	r4, r0, #0
   14ba8:	d027      	beq.n	14bfa <__aeabi_ui2f+0x56>
   14baa:	f001 fea5 	bl	168f8 <__clzsi2>
   14bae:	239e      	movs	r3, #158	; 0x9e
   14bb0:	1a1b      	subs	r3, r3, r0
   14bb2:	2b96      	cmp	r3, #150	; 0x96
   14bb4:	dc0a      	bgt.n	14bcc <__aeabi_ui2f+0x28>
   14bb6:	2296      	movs	r2, #150	; 0x96
   14bb8:	1ad2      	subs	r2, r2, r3
   14bba:	4094      	lsls	r4, r2
   14bbc:	0264      	lsls	r4, r4, #9
   14bbe:	0a64      	lsrs	r4, r4, #9
   14bc0:	b2db      	uxtb	r3, r3
   14bc2:	0264      	lsls	r4, r4, #9
   14bc4:	05db      	lsls	r3, r3, #23
   14bc6:	0a60      	lsrs	r0, r4, #9
   14bc8:	4318      	orrs	r0, r3
   14bca:	bd10      	pop	{r4, pc}
   14bcc:	2b99      	cmp	r3, #153	; 0x99
   14bce:	dc17      	bgt.n	14c00 <__aeabi_ui2f+0x5c>
   14bd0:	2299      	movs	r2, #153	; 0x99
   14bd2:	1ad2      	subs	r2, r2, r3
   14bd4:	2a00      	cmp	r2, #0
   14bd6:	dd27      	ble.n	14c28 <__aeabi_ui2f+0x84>
   14bd8:	4094      	lsls	r4, r2
   14bda:	0022      	movs	r2, r4
   14bdc:	4c13      	ldr	r4, [pc, #76]	; (14c2c <__aeabi_ui2f+0x88>)
   14bde:	4014      	ands	r4, r2
   14be0:	0751      	lsls	r1, r2, #29
   14be2:	d004      	beq.n	14bee <__aeabi_ui2f+0x4a>
   14be4:	210f      	movs	r1, #15
   14be6:	400a      	ands	r2, r1
   14be8:	2a04      	cmp	r2, #4
   14bea:	d000      	beq.n	14bee <__aeabi_ui2f+0x4a>
   14bec:	3404      	adds	r4, #4
   14bee:	0162      	lsls	r2, r4, #5
   14bf0:	d412      	bmi.n	14c18 <__aeabi_ui2f+0x74>
   14bf2:	01a4      	lsls	r4, r4, #6
   14bf4:	0a64      	lsrs	r4, r4, #9
   14bf6:	b2db      	uxtb	r3, r3
   14bf8:	e7e3      	b.n	14bc2 <__aeabi_ui2f+0x1e>
   14bfa:	2300      	movs	r3, #0
   14bfc:	2400      	movs	r4, #0
   14bfe:	e7e0      	b.n	14bc2 <__aeabi_ui2f+0x1e>
   14c00:	22b9      	movs	r2, #185	; 0xb9
   14c02:	0021      	movs	r1, r4
   14c04:	1ad2      	subs	r2, r2, r3
   14c06:	4091      	lsls	r1, r2
   14c08:	000a      	movs	r2, r1
   14c0a:	1e51      	subs	r1, r2, #1
   14c0c:	418a      	sbcs	r2, r1
   14c0e:	2105      	movs	r1, #5
   14c10:	1a09      	subs	r1, r1, r0
   14c12:	40cc      	lsrs	r4, r1
   14c14:	4314      	orrs	r4, r2
   14c16:	e7db      	b.n	14bd0 <__aeabi_ui2f+0x2c>
   14c18:	4b04      	ldr	r3, [pc, #16]	; (14c2c <__aeabi_ui2f+0x88>)
   14c1a:	401c      	ands	r4, r3
   14c1c:	239f      	movs	r3, #159	; 0x9f
   14c1e:	01a4      	lsls	r4, r4, #6
   14c20:	1a1b      	subs	r3, r3, r0
   14c22:	0a64      	lsrs	r4, r4, #9
   14c24:	b2db      	uxtb	r3, r3
   14c26:	e7cc      	b.n	14bc2 <__aeabi_ui2f+0x1e>
   14c28:	0022      	movs	r2, r4
   14c2a:	e7d7      	b.n	14bdc <__aeabi_ui2f+0x38>
   14c2c:	fbffffff 	.word	0xfbffffff

00014c30 <__aeabi_dadd>:
   14c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14c32:	4645      	mov	r5, r8
   14c34:	46de      	mov	lr, fp
   14c36:	4657      	mov	r7, sl
   14c38:	464e      	mov	r6, r9
   14c3a:	030c      	lsls	r4, r1, #12
   14c3c:	b5e0      	push	{r5, r6, r7, lr}
   14c3e:	004e      	lsls	r6, r1, #1
   14c40:	0fc9      	lsrs	r1, r1, #31
   14c42:	4688      	mov	r8, r1
   14c44:	000d      	movs	r5, r1
   14c46:	0a61      	lsrs	r1, r4, #9
   14c48:	0f44      	lsrs	r4, r0, #29
   14c4a:	430c      	orrs	r4, r1
   14c4c:	00c7      	lsls	r7, r0, #3
   14c4e:	0319      	lsls	r1, r3, #12
   14c50:	0058      	lsls	r0, r3, #1
   14c52:	0fdb      	lsrs	r3, r3, #31
   14c54:	469b      	mov	fp, r3
   14c56:	0a4b      	lsrs	r3, r1, #9
   14c58:	0f51      	lsrs	r1, r2, #29
   14c5a:	430b      	orrs	r3, r1
   14c5c:	0d76      	lsrs	r6, r6, #21
   14c5e:	0d40      	lsrs	r0, r0, #21
   14c60:	0019      	movs	r1, r3
   14c62:	00d2      	lsls	r2, r2, #3
   14c64:	45d8      	cmp	r8, fp
   14c66:	d100      	bne.n	14c6a <__aeabi_dadd+0x3a>
   14c68:	e0ae      	b.n	14dc8 <__aeabi_dadd+0x198>
   14c6a:	1a35      	subs	r5, r6, r0
   14c6c:	2d00      	cmp	r5, #0
   14c6e:	dc00      	bgt.n	14c72 <__aeabi_dadd+0x42>
   14c70:	e0f6      	b.n	14e60 <__aeabi_dadd+0x230>
   14c72:	2800      	cmp	r0, #0
   14c74:	d10f      	bne.n	14c96 <__aeabi_dadd+0x66>
   14c76:	4313      	orrs	r3, r2
   14c78:	d100      	bne.n	14c7c <__aeabi_dadd+0x4c>
   14c7a:	e0db      	b.n	14e34 <__aeabi_dadd+0x204>
   14c7c:	1e6b      	subs	r3, r5, #1
   14c7e:	2b00      	cmp	r3, #0
   14c80:	d000      	beq.n	14c84 <__aeabi_dadd+0x54>
   14c82:	e137      	b.n	14ef4 <__aeabi_dadd+0x2c4>
   14c84:	1aba      	subs	r2, r7, r2
   14c86:	4297      	cmp	r7, r2
   14c88:	41bf      	sbcs	r7, r7
   14c8a:	1a64      	subs	r4, r4, r1
   14c8c:	427f      	negs	r7, r7
   14c8e:	1be4      	subs	r4, r4, r7
   14c90:	2601      	movs	r6, #1
   14c92:	0017      	movs	r7, r2
   14c94:	e024      	b.n	14ce0 <__aeabi_dadd+0xb0>
   14c96:	4bc6      	ldr	r3, [pc, #792]	; (14fb0 <__aeabi_dadd+0x380>)
   14c98:	429e      	cmp	r6, r3
   14c9a:	d04d      	beq.n	14d38 <__aeabi_dadd+0x108>
   14c9c:	2380      	movs	r3, #128	; 0x80
   14c9e:	041b      	lsls	r3, r3, #16
   14ca0:	4319      	orrs	r1, r3
   14ca2:	2d38      	cmp	r5, #56	; 0x38
   14ca4:	dd00      	ble.n	14ca8 <__aeabi_dadd+0x78>
   14ca6:	e107      	b.n	14eb8 <__aeabi_dadd+0x288>
   14ca8:	2d1f      	cmp	r5, #31
   14caa:	dd00      	ble.n	14cae <__aeabi_dadd+0x7e>
   14cac:	e138      	b.n	14f20 <__aeabi_dadd+0x2f0>
   14cae:	2020      	movs	r0, #32
   14cb0:	1b43      	subs	r3, r0, r5
   14cb2:	469a      	mov	sl, r3
   14cb4:	000b      	movs	r3, r1
   14cb6:	4650      	mov	r0, sl
   14cb8:	4083      	lsls	r3, r0
   14cba:	4699      	mov	r9, r3
   14cbc:	0013      	movs	r3, r2
   14cbe:	4648      	mov	r0, r9
   14cc0:	40eb      	lsrs	r3, r5
   14cc2:	4318      	orrs	r0, r3
   14cc4:	0003      	movs	r3, r0
   14cc6:	4650      	mov	r0, sl
   14cc8:	4082      	lsls	r2, r0
   14cca:	1e50      	subs	r0, r2, #1
   14ccc:	4182      	sbcs	r2, r0
   14cce:	40e9      	lsrs	r1, r5
   14cd0:	431a      	orrs	r2, r3
   14cd2:	1aba      	subs	r2, r7, r2
   14cd4:	1a61      	subs	r1, r4, r1
   14cd6:	4297      	cmp	r7, r2
   14cd8:	41a4      	sbcs	r4, r4
   14cda:	0017      	movs	r7, r2
   14cdc:	4264      	negs	r4, r4
   14cde:	1b0c      	subs	r4, r1, r4
   14ce0:	0223      	lsls	r3, r4, #8
   14ce2:	d562      	bpl.n	14daa <__aeabi_dadd+0x17a>
   14ce4:	0264      	lsls	r4, r4, #9
   14ce6:	0a65      	lsrs	r5, r4, #9
   14ce8:	2d00      	cmp	r5, #0
   14cea:	d100      	bne.n	14cee <__aeabi_dadd+0xbe>
   14cec:	e0df      	b.n	14eae <__aeabi_dadd+0x27e>
   14cee:	0028      	movs	r0, r5
   14cf0:	f001 fe02 	bl	168f8 <__clzsi2>
   14cf4:	0003      	movs	r3, r0
   14cf6:	3b08      	subs	r3, #8
   14cf8:	2b1f      	cmp	r3, #31
   14cfa:	dd00      	ble.n	14cfe <__aeabi_dadd+0xce>
   14cfc:	e0d2      	b.n	14ea4 <__aeabi_dadd+0x274>
   14cfe:	2220      	movs	r2, #32
   14d00:	003c      	movs	r4, r7
   14d02:	1ad2      	subs	r2, r2, r3
   14d04:	409d      	lsls	r5, r3
   14d06:	40d4      	lsrs	r4, r2
   14d08:	409f      	lsls	r7, r3
   14d0a:	4325      	orrs	r5, r4
   14d0c:	429e      	cmp	r6, r3
   14d0e:	dd00      	ble.n	14d12 <__aeabi_dadd+0xe2>
   14d10:	e0c4      	b.n	14e9c <__aeabi_dadd+0x26c>
   14d12:	1b9e      	subs	r6, r3, r6
   14d14:	1c73      	adds	r3, r6, #1
   14d16:	2b1f      	cmp	r3, #31
   14d18:	dd00      	ble.n	14d1c <__aeabi_dadd+0xec>
   14d1a:	e0f1      	b.n	14f00 <__aeabi_dadd+0x2d0>
   14d1c:	2220      	movs	r2, #32
   14d1e:	0038      	movs	r0, r7
   14d20:	0029      	movs	r1, r5
   14d22:	1ad2      	subs	r2, r2, r3
   14d24:	40d8      	lsrs	r0, r3
   14d26:	4091      	lsls	r1, r2
   14d28:	4097      	lsls	r7, r2
   14d2a:	002c      	movs	r4, r5
   14d2c:	4301      	orrs	r1, r0
   14d2e:	1e78      	subs	r0, r7, #1
   14d30:	4187      	sbcs	r7, r0
   14d32:	40dc      	lsrs	r4, r3
   14d34:	2600      	movs	r6, #0
   14d36:	430f      	orrs	r7, r1
   14d38:	077b      	lsls	r3, r7, #29
   14d3a:	d009      	beq.n	14d50 <__aeabi_dadd+0x120>
   14d3c:	230f      	movs	r3, #15
   14d3e:	403b      	ands	r3, r7
   14d40:	2b04      	cmp	r3, #4
   14d42:	d005      	beq.n	14d50 <__aeabi_dadd+0x120>
   14d44:	1d3b      	adds	r3, r7, #4
   14d46:	42bb      	cmp	r3, r7
   14d48:	41bf      	sbcs	r7, r7
   14d4a:	427f      	negs	r7, r7
   14d4c:	19e4      	adds	r4, r4, r7
   14d4e:	001f      	movs	r7, r3
   14d50:	0223      	lsls	r3, r4, #8
   14d52:	d52c      	bpl.n	14dae <__aeabi_dadd+0x17e>
   14d54:	4b96      	ldr	r3, [pc, #600]	; (14fb0 <__aeabi_dadd+0x380>)
   14d56:	3601      	adds	r6, #1
   14d58:	429e      	cmp	r6, r3
   14d5a:	d100      	bne.n	14d5e <__aeabi_dadd+0x12e>
   14d5c:	e09a      	b.n	14e94 <__aeabi_dadd+0x264>
   14d5e:	4645      	mov	r5, r8
   14d60:	4b94      	ldr	r3, [pc, #592]	; (14fb4 <__aeabi_dadd+0x384>)
   14d62:	08ff      	lsrs	r7, r7, #3
   14d64:	401c      	ands	r4, r3
   14d66:	0760      	lsls	r0, r4, #29
   14d68:	0576      	lsls	r6, r6, #21
   14d6a:	0264      	lsls	r4, r4, #9
   14d6c:	4307      	orrs	r7, r0
   14d6e:	0b24      	lsrs	r4, r4, #12
   14d70:	0d76      	lsrs	r6, r6, #21
   14d72:	2100      	movs	r1, #0
   14d74:	0324      	lsls	r4, r4, #12
   14d76:	0b23      	lsrs	r3, r4, #12
   14d78:	0d0c      	lsrs	r4, r1, #20
   14d7a:	4a8f      	ldr	r2, [pc, #572]	; (14fb8 <__aeabi_dadd+0x388>)
   14d7c:	0524      	lsls	r4, r4, #20
   14d7e:	431c      	orrs	r4, r3
   14d80:	4014      	ands	r4, r2
   14d82:	0533      	lsls	r3, r6, #20
   14d84:	4323      	orrs	r3, r4
   14d86:	005b      	lsls	r3, r3, #1
   14d88:	07ed      	lsls	r5, r5, #31
   14d8a:	085b      	lsrs	r3, r3, #1
   14d8c:	432b      	orrs	r3, r5
   14d8e:	0038      	movs	r0, r7
   14d90:	0019      	movs	r1, r3
   14d92:	bc3c      	pop	{r2, r3, r4, r5}
   14d94:	4690      	mov	r8, r2
   14d96:	4699      	mov	r9, r3
   14d98:	46a2      	mov	sl, r4
   14d9a:	46ab      	mov	fp, r5
   14d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14d9e:	4664      	mov	r4, ip
   14da0:	4304      	orrs	r4, r0
   14da2:	d100      	bne.n	14da6 <__aeabi_dadd+0x176>
   14da4:	e211      	b.n	151ca <__aeabi_dadd+0x59a>
   14da6:	0004      	movs	r4, r0
   14da8:	4667      	mov	r7, ip
   14daa:	077b      	lsls	r3, r7, #29
   14dac:	d1c6      	bne.n	14d3c <__aeabi_dadd+0x10c>
   14dae:	4645      	mov	r5, r8
   14db0:	0760      	lsls	r0, r4, #29
   14db2:	08ff      	lsrs	r7, r7, #3
   14db4:	4307      	orrs	r7, r0
   14db6:	08e4      	lsrs	r4, r4, #3
   14db8:	4b7d      	ldr	r3, [pc, #500]	; (14fb0 <__aeabi_dadd+0x380>)
   14dba:	429e      	cmp	r6, r3
   14dbc:	d030      	beq.n	14e20 <__aeabi_dadd+0x1f0>
   14dbe:	0324      	lsls	r4, r4, #12
   14dc0:	0576      	lsls	r6, r6, #21
   14dc2:	0b24      	lsrs	r4, r4, #12
   14dc4:	0d76      	lsrs	r6, r6, #21
   14dc6:	e7d4      	b.n	14d72 <__aeabi_dadd+0x142>
   14dc8:	1a33      	subs	r3, r6, r0
   14dca:	469a      	mov	sl, r3
   14dcc:	2b00      	cmp	r3, #0
   14dce:	dd78      	ble.n	14ec2 <__aeabi_dadd+0x292>
   14dd0:	2800      	cmp	r0, #0
   14dd2:	d031      	beq.n	14e38 <__aeabi_dadd+0x208>
   14dd4:	4876      	ldr	r0, [pc, #472]	; (14fb0 <__aeabi_dadd+0x380>)
   14dd6:	4286      	cmp	r6, r0
   14dd8:	d0ae      	beq.n	14d38 <__aeabi_dadd+0x108>
   14dda:	2080      	movs	r0, #128	; 0x80
   14ddc:	0400      	lsls	r0, r0, #16
   14dde:	4301      	orrs	r1, r0
   14de0:	4653      	mov	r3, sl
   14de2:	2b38      	cmp	r3, #56	; 0x38
   14de4:	dc00      	bgt.n	14de8 <__aeabi_dadd+0x1b8>
   14de6:	e0e9      	b.n	14fbc <__aeabi_dadd+0x38c>
   14de8:	430a      	orrs	r2, r1
   14dea:	1e51      	subs	r1, r2, #1
   14dec:	418a      	sbcs	r2, r1
   14dee:	2100      	movs	r1, #0
   14df0:	19d2      	adds	r2, r2, r7
   14df2:	42ba      	cmp	r2, r7
   14df4:	41bf      	sbcs	r7, r7
   14df6:	1909      	adds	r1, r1, r4
   14df8:	427c      	negs	r4, r7
   14dfa:	0017      	movs	r7, r2
   14dfc:	190c      	adds	r4, r1, r4
   14dfe:	0223      	lsls	r3, r4, #8
   14e00:	d5d3      	bpl.n	14daa <__aeabi_dadd+0x17a>
   14e02:	4b6b      	ldr	r3, [pc, #428]	; (14fb0 <__aeabi_dadd+0x380>)
   14e04:	3601      	adds	r6, #1
   14e06:	429e      	cmp	r6, r3
   14e08:	d100      	bne.n	14e0c <__aeabi_dadd+0x1dc>
   14e0a:	e13a      	b.n	15082 <__aeabi_dadd+0x452>
   14e0c:	2001      	movs	r0, #1
   14e0e:	4b69      	ldr	r3, [pc, #420]	; (14fb4 <__aeabi_dadd+0x384>)
   14e10:	401c      	ands	r4, r3
   14e12:	087b      	lsrs	r3, r7, #1
   14e14:	4007      	ands	r7, r0
   14e16:	431f      	orrs	r7, r3
   14e18:	07e0      	lsls	r0, r4, #31
   14e1a:	4307      	orrs	r7, r0
   14e1c:	0864      	lsrs	r4, r4, #1
   14e1e:	e78b      	b.n	14d38 <__aeabi_dadd+0x108>
   14e20:	0023      	movs	r3, r4
   14e22:	433b      	orrs	r3, r7
   14e24:	d100      	bne.n	14e28 <__aeabi_dadd+0x1f8>
   14e26:	e1cb      	b.n	151c0 <__aeabi_dadd+0x590>
   14e28:	2280      	movs	r2, #128	; 0x80
   14e2a:	0312      	lsls	r2, r2, #12
   14e2c:	4314      	orrs	r4, r2
   14e2e:	0324      	lsls	r4, r4, #12
   14e30:	0b24      	lsrs	r4, r4, #12
   14e32:	e79e      	b.n	14d72 <__aeabi_dadd+0x142>
   14e34:	002e      	movs	r6, r5
   14e36:	e77f      	b.n	14d38 <__aeabi_dadd+0x108>
   14e38:	0008      	movs	r0, r1
   14e3a:	4310      	orrs	r0, r2
   14e3c:	d100      	bne.n	14e40 <__aeabi_dadd+0x210>
   14e3e:	e0b4      	b.n	14faa <__aeabi_dadd+0x37a>
   14e40:	1e58      	subs	r0, r3, #1
   14e42:	2800      	cmp	r0, #0
   14e44:	d000      	beq.n	14e48 <__aeabi_dadd+0x218>
   14e46:	e0de      	b.n	15006 <__aeabi_dadd+0x3d6>
   14e48:	18ba      	adds	r2, r7, r2
   14e4a:	42ba      	cmp	r2, r7
   14e4c:	419b      	sbcs	r3, r3
   14e4e:	1864      	adds	r4, r4, r1
   14e50:	425b      	negs	r3, r3
   14e52:	18e4      	adds	r4, r4, r3
   14e54:	0017      	movs	r7, r2
   14e56:	2601      	movs	r6, #1
   14e58:	0223      	lsls	r3, r4, #8
   14e5a:	d5a6      	bpl.n	14daa <__aeabi_dadd+0x17a>
   14e5c:	2602      	movs	r6, #2
   14e5e:	e7d5      	b.n	14e0c <__aeabi_dadd+0x1dc>
   14e60:	2d00      	cmp	r5, #0
   14e62:	d16e      	bne.n	14f42 <__aeabi_dadd+0x312>
   14e64:	1c70      	adds	r0, r6, #1
   14e66:	0540      	lsls	r0, r0, #21
   14e68:	0d40      	lsrs	r0, r0, #21
   14e6a:	2801      	cmp	r0, #1
   14e6c:	dc00      	bgt.n	14e70 <__aeabi_dadd+0x240>
   14e6e:	e0f9      	b.n	15064 <__aeabi_dadd+0x434>
   14e70:	1ab8      	subs	r0, r7, r2
   14e72:	4684      	mov	ip, r0
   14e74:	4287      	cmp	r7, r0
   14e76:	4180      	sbcs	r0, r0
   14e78:	1ae5      	subs	r5, r4, r3
   14e7a:	4240      	negs	r0, r0
   14e7c:	1a2d      	subs	r5, r5, r0
   14e7e:	0228      	lsls	r0, r5, #8
   14e80:	d400      	bmi.n	14e84 <__aeabi_dadd+0x254>
   14e82:	e089      	b.n	14f98 <__aeabi_dadd+0x368>
   14e84:	1bd7      	subs	r7, r2, r7
   14e86:	42ba      	cmp	r2, r7
   14e88:	4192      	sbcs	r2, r2
   14e8a:	1b1c      	subs	r4, r3, r4
   14e8c:	4252      	negs	r2, r2
   14e8e:	1aa5      	subs	r5, r4, r2
   14e90:	46d8      	mov	r8, fp
   14e92:	e729      	b.n	14ce8 <__aeabi_dadd+0xb8>
   14e94:	4645      	mov	r5, r8
   14e96:	2400      	movs	r4, #0
   14e98:	2700      	movs	r7, #0
   14e9a:	e76a      	b.n	14d72 <__aeabi_dadd+0x142>
   14e9c:	4c45      	ldr	r4, [pc, #276]	; (14fb4 <__aeabi_dadd+0x384>)
   14e9e:	1af6      	subs	r6, r6, r3
   14ea0:	402c      	ands	r4, r5
   14ea2:	e749      	b.n	14d38 <__aeabi_dadd+0x108>
   14ea4:	003d      	movs	r5, r7
   14ea6:	3828      	subs	r0, #40	; 0x28
   14ea8:	4085      	lsls	r5, r0
   14eaa:	2700      	movs	r7, #0
   14eac:	e72e      	b.n	14d0c <__aeabi_dadd+0xdc>
   14eae:	0038      	movs	r0, r7
   14eb0:	f001 fd22 	bl	168f8 <__clzsi2>
   14eb4:	3020      	adds	r0, #32
   14eb6:	e71d      	b.n	14cf4 <__aeabi_dadd+0xc4>
   14eb8:	430a      	orrs	r2, r1
   14eba:	1e51      	subs	r1, r2, #1
   14ebc:	418a      	sbcs	r2, r1
   14ebe:	2100      	movs	r1, #0
   14ec0:	e707      	b.n	14cd2 <__aeabi_dadd+0xa2>
   14ec2:	2b00      	cmp	r3, #0
   14ec4:	d000      	beq.n	14ec8 <__aeabi_dadd+0x298>
   14ec6:	e0f3      	b.n	150b0 <__aeabi_dadd+0x480>
   14ec8:	1c70      	adds	r0, r6, #1
   14eca:	0543      	lsls	r3, r0, #21
   14ecc:	0d5b      	lsrs	r3, r3, #21
   14ece:	2b01      	cmp	r3, #1
   14ed0:	dc00      	bgt.n	14ed4 <__aeabi_dadd+0x2a4>
   14ed2:	e0ad      	b.n	15030 <__aeabi_dadd+0x400>
   14ed4:	4b36      	ldr	r3, [pc, #216]	; (14fb0 <__aeabi_dadd+0x380>)
   14ed6:	4298      	cmp	r0, r3
   14ed8:	d100      	bne.n	14edc <__aeabi_dadd+0x2ac>
   14eda:	e0d1      	b.n	15080 <__aeabi_dadd+0x450>
   14edc:	18ba      	adds	r2, r7, r2
   14ede:	42ba      	cmp	r2, r7
   14ee0:	41bf      	sbcs	r7, r7
   14ee2:	1864      	adds	r4, r4, r1
   14ee4:	427f      	negs	r7, r7
   14ee6:	19e4      	adds	r4, r4, r7
   14ee8:	07e7      	lsls	r7, r4, #31
   14eea:	0852      	lsrs	r2, r2, #1
   14eec:	4317      	orrs	r7, r2
   14eee:	0864      	lsrs	r4, r4, #1
   14ef0:	0006      	movs	r6, r0
   14ef2:	e721      	b.n	14d38 <__aeabi_dadd+0x108>
   14ef4:	482e      	ldr	r0, [pc, #184]	; (14fb0 <__aeabi_dadd+0x380>)
   14ef6:	4285      	cmp	r5, r0
   14ef8:	d100      	bne.n	14efc <__aeabi_dadd+0x2cc>
   14efa:	e093      	b.n	15024 <__aeabi_dadd+0x3f4>
   14efc:	001d      	movs	r5, r3
   14efe:	e6d0      	b.n	14ca2 <__aeabi_dadd+0x72>
   14f00:	0029      	movs	r1, r5
   14f02:	3e1f      	subs	r6, #31
   14f04:	40f1      	lsrs	r1, r6
   14f06:	2b20      	cmp	r3, #32
   14f08:	d100      	bne.n	14f0c <__aeabi_dadd+0x2dc>
   14f0a:	e08d      	b.n	15028 <__aeabi_dadd+0x3f8>
   14f0c:	2240      	movs	r2, #64	; 0x40
   14f0e:	1ad3      	subs	r3, r2, r3
   14f10:	409d      	lsls	r5, r3
   14f12:	432f      	orrs	r7, r5
   14f14:	1e7d      	subs	r5, r7, #1
   14f16:	41af      	sbcs	r7, r5
   14f18:	2400      	movs	r4, #0
   14f1a:	430f      	orrs	r7, r1
   14f1c:	2600      	movs	r6, #0
   14f1e:	e744      	b.n	14daa <__aeabi_dadd+0x17a>
   14f20:	002b      	movs	r3, r5
   14f22:	0008      	movs	r0, r1
   14f24:	3b20      	subs	r3, #32
   14f26:	40d8      	lsrs	r0, r3
   14f28:	0003      	movs	r3, r0
   14f2a:	2d20      	cmp	r5, #32
   14f2c:	d100      	bne.n	14f30 <__aeabi_dadd+0x300>
   14f2e:	e07d      	b.n	1502c <__aeabi_dadd+0x3fc>
   14f30:	2040      	movs	r0, #64	; 0x40
   14f32:	1b45      	subs	r5, r0, r5
   14f34:	40a9      	lsls	r1, r5
   14f36:	430a      	orrs	r2, r1
   14f38:	1e51      	subs	r1, r2, #1
   14f3a:	418a      	sbcs	r2, r1
   14f3c:	2100      	movs	r1, #0
   14f3e:	431a      	orrs	r2, r3
   14f40:	e6c7      	b.n	14cd2 <__aeabi_dadd+0xa2>
   14f42:	2e00      	cmp	r6, #0
   14f44:	d050      	beq.n	14fe8 <__aeabi_dadd+0x3b8>
   14f46:	4e1a      	ldr	r6, [pc, #104]	; (14fb0 <__aeabi_dadd+0x380>)
   14f48:	42b0      	cmp	r0, r6
   14f4a:	d057      	beq.n	14ffc <__aeabi_dadd+0x3cc>
   14f4c:	2680      	movs	r6, #128	; 0x80
   14f4e:	426b      	negs	r3, r5
   14f50:	4699      	mov	r9, r3
   14f52:	0436      	lsls	r6, r6, #16
   14f54:	4334      	orrs	r4, r6
   14f56:	464b      	mov	r3, r9
   14f58:	2b38      	cmp	r3, #56	; 0x38
   14f5a:	dd00      	ble.n	14f5e <__aeabi_dadd+0x32e>
   14f5c:	e0d6      	b.n	1510c <__aeabi_dadd+0x4dc>
   14f5e:	2b1f      	cmp	r3, #31
   14f60:	dd00      	ble.n	14f64 <__aeabi_dadd+0x334>
   14f62:	e135      	b.n	151d0 <__aeabi_dadd+0x5a0>
   14f64:	2620      	movs	r6, #32
   14f66:	1af5      	subs	r5, r6, r3
   14f68:	0026      	movs	r6, r4
   14f6a:	40ae      	lsls	r6, r5
   14f6c:	46b2      	mov	sl, r6
   14f6e:	003e      	movs	r6, r7
   14f70:	40de      	lsrs	r6, r3
   14f72:	46ac      	mov	ip, r5
   14f74:	0035      	movs	r5, r6
   14f76:	4656      	mov	r6, sl
   14f78:	432e      	orrs	r6, r5
   14f7a:	4665      	mov	r5, ip
   14f7c:	40af      	lsls	r7, r5
   14f7e:	1e7d      	subs	r5, r7, #1
   14f80:	41af      	sbcs	r7, r5
   14f82:	40dc      	lsrs	r4, r3
   14f84:	4337      	orrs	r7, r6
   14f86:	1bd7      	subs	r7, r2, r7
   14f88:	42ba      	cmp	r2, r7
   14f8a:	4192      	sbcs	r2, r2
   14f8c:	1b0c      	subs	r4, r1, r4
   14f8e:	4252      	negs	r2, r2
   14f90:	1aa4      	subs	r4, r4, r2
   14f92:	0006      	movs	r6, r0
   14f94:	46d8      	mov	r8, fp
   14f96:	e6a3      	b.n	14ce0 <__aeabi_dadd+0xb0>
   14f98:	4664      	mov	r4, ip
   14f9a:	4667      	mov	r7, ip
   14f9c:	432c      	orrs	r4, r5
   14f9e:	d000      	beq.n	14fa2 <__aeabi_dadd+0x372>
   14fa0:	e6a2      	b.n	14ce8 <__aeabi_dadd+0xb8>
   14fa2:	2500      	movs	r5, #0
   14fa4:	2600      	movs	r6, #0
   14fa6:	2700      	movs	r7, #0
   14fa8:	e706      	b.n	14db8 <__aeabi_dadd+0x188>
   14faa:	001e      	movs	r6, r3
   14fac:	e6c4      	b.n	14d38 <__aeabi_dadd+0x108>
   14fae:	46c0      	nop			; (mov r8, r8)
   14fb0:	000007ff 	.word	0x000007ff
   14fb4:	ff7fffff 	.word	0xff7fffff
   14fb8:	800fffff 	.word	0x800fffff
   14fbc:	2b1f      	cmp	r3, #31
   14fbe:	dc63      	bgt.n	15088 <__aeabi_dadd+0x458>
   14fc0:	2020      	movs	r0, #32
   14fc2:	1ac3      	subs	r3, r0, r3
   14fc4:	0008      	movs	r0, r1
   14fc6:	4098      	lsls	r0, r3
   14fc8:	469c      	mov	ip, r3
   14fca:	4683      	mov	fp, r0
   14fcc:	4653      	mov	r3, sl
   14fce:	0010      	movs	r0, r2
   14fd0:	40d8      	lsrs	r0, r3
   14fd2:	0003      	movs	r3, r0
   14fd4:	4658      	mov	r0, fp
   14fd6:	4318      	orrs	r0, r3
   14fd8:	4663      	mov	r3, ip
   14fda:	409a      	lsls	r2, r3
   14fdc:	1e53      	subs	r3, r2, #1
   14fde:	419a      	sbcs	r2, r3
   14fe0:	4653      	mov	r3, sl
   14fe2:	4302      	orrs	r2, r0
   14fe4:	40d9      	lsrs	r1, r3
   14fe6:	e703      	b.n	14df0 <__aeabi_dadd+0x1c0>
   14fe8:	0026      	movs	r6, r4
   14fea:	433e      	orrs	r6, r7
   14fec:	d006      	beq.n	14ffc <__aeabi_dadd+0x3cc>
   14fee:	43eb      	mvns	r3, r5
   14ff0:	4699      	mov	r9, r3
   14ff2:	2b00      	cmp	r3, #0
   14ff4:	d0c7      	beq.n	14f86 <__aeabi_dadd+0x356>
   14ff6:	4e94      	ldr	r6, [pc, #592]	; (15248 <__aeabi_dadd+0x618>)
   14ff8:	42b0      	cmp	r0, r6
   14ffa:	d1ac      	bne.n	14f56 <__aeabi_dadd+0x326>
   14ffc:	000c      	movs	r4, r1
   14ffe:	0017      	movs	r7, r2
   15000:	0006      	movs	r6, r0
   15002:	46d8      	mov	r8, fp
   15004:	e698      	b.n	14d38 <__aeabi_dadd+0x108>
   15006:	4b90      	ldr	r3, [pc, #576]	; (15248 <__aeabi_dadd+0x618>)
   15008:	459a      	cmp	sl, r3
   1500a:	d00b      	beq.n	15024 <__aeabi_dadd+0x3f4>
   1500c:	4682      	mov	sl, r0
   1500e:	e6e7      	b.n	14de0 <__aeabi_dadd+0x1b0>
   15010:	2800      	cmp	r0, #0
   15012:	d000      	beq.n	15016 <__aeabi_dadd+0x3e6>
   15014:	e09e      	b.n	15154 <__aeabi_dadd+0x524>
   15016:	0018      	movs	r0, r3
   15018:	4310      	orrs	r0, r2
   1501a:	d100      	bne.n	1501e <__aeabi_dadd+0x3ee>
   1501c:	e0e9      	b.n	151f2 <__aeabi_dadd+0x5c2>
   1501e:	001c      	movs	r4, r3
   15020:	0017      	movs	r7, r2
   15022:	46d8      	mov	r8, fp
   15024:	4e88      	ldr	r6, [pc, #544]	; (15248 <__aeabi_dadd+0x618>)
   15026:	e687      	b.n	14d38 <__aeabi_dadd+0x108>
   15028:	2500      	movs	r5, #0
   1502a:	e772      	b.n	14f12 <__aeabi_dadd+0x2e2>
   1502c:	2100      	movs	r1, #0
   1502e:	e782      	b.n	14f36 <__aeabi_dadd+0x306>
   15030:	0023      	movs	r3, r4
   15032:	433b      	orrs	r3, r7
   15034:	2e00      	cmp	r6, #0
   15036:	d000      	beq.n	1503a <__aeabi_dadd+0x40a>
   15038:	e0ab      	b.n	15192 <__aeabi_dadd+0x562>
   1503a:	2b00      	cmp	r3, #0
   1503c:	d100      	bne.n	15040 <__aeabi_dadd+0x410>
   1503e:	e0e7      	b.n	15210 <__aeabi_dadd+0x5e0>
   15040:	000b      	movs	r3, r1
   15042:	4313      	orrs	r3, r2
   15044:	d100      	bne.n	15048 <__aeabi_dadd+0x418>
   15046:	e677      	b.n	14d38 <__aeabi_dadd+0x108>
   15048:	18ba      	adds	r2, r7, r2
   1504a:	42ba      	cmp	r2, r7
   1504c:	41bf      	sbcs	r7, r7
   1504e:	1864      	adds	r4, r4, r1
   15050:	427f      	negs	r7, r7
   15052:	19e4      	adds	r4, r4, r7
   15054:	0223      	lsls	r3, r4, #8
   15056:	d400      	bmi.n	1505a <__aeabi_dadd+0x42a>
   15058:	e0f2      	b.n	15240 <__aeabi_dadd+0x610>
   1505a:	4b7c      	ldr	r3, [pc, #496]	; (1524c <__aeabi_dadd+0x61c>)
   1505c:	0017      	movs	r7, r2
   1505e:	401c      	ands	r4, r3
   15060:	0006      	movs	r6, r0
   15062:	e669      	b.n	14d38 <__aeabi_dadd+0x108>
   15064:	0020      	movs	r0, r4
   15066:	4338      	orrs	r0, r7
   15068:	2e00      	cmp	r6, #0
   1506a:	d1d1      	bne.n	15010 <__aeabi_dadd+0x3e0>
   1506c:	2800      	cmp	r0, #0
   1506e:	d15b      	bne.n	15128 <__aeabi_dadd+0x4f8>
   15070:	001c      	movs	r4, r3
   15072:	4314      	orrs	r4, r2
   15074:	d100      	bne.n	15078 <__aeabi_dadd+0x448>
   15076:	e0a8      	b.n	151ca <__aeabi_dadd+0x59a>
   15078:	001c      	movs	r4, r3
   1507a:	0017      	movs	r7, r2
   1507c:	46d8      	mov	r8, fp
   1507e:	e65b      	b.n	14d38 <__aeabi_dadd+0x108>
   15080:	0006      	movs	r6, r0
   15082:	2400      	movs	r4, #0
   15084:	2700      	movs	r7, #0
   15086:	e697      	b.n	14db8 <__aeabi_dadd+0x188>
   15088:	4650      	mov	r0, sl
   1508a:	000b      	movs	r3, r1
   1508c:	3820      	subs	r0, #32
   1508e:	40c3      	lsrs	r3, r0
   15090:	4699      	mov	r9, r3
   15092:	4653      	mov	r3, sl
   15094:	2b20      	cmp	r3, #32
   15096:	d100      	bne.n	1509a <__aeabi_dadd+0x46a>
   15098:	e095      	b.n	151c6 <__aeabi_dadd+0x596>
   1509a:	2340      	movs	r3, #64	; 0x40
   1509c:	4650      	mov	r0, sl
   1509e:	1a1b      	subs	r3, r3, r0
   150a0:	4099      	lsls	r1, r3
   150a2:	430a      	orrs	r2, r1
   150a4:	1e51      	subs	r1, r2, #1
   150a6:	418a      	sbcs	r2, r1
   150a8:	464b      	mov	r3, r9
   150aa:	2100      	movs	r1, #0
   150ac:	431a      	orrs	r2, r3
   150ae:	e69f      	b.n	14df0 <__aeabi_dadd+0x1c0>
   150b0:	2e00      	cmp	r6, #0
   150b2:	d130      	bne.n	15116 <__aeabi_dadd+0x4e6>
   150b4:	0026      	movs	r6, r4
   150b6:	433e      	orrs	r6, r7
   150b8:	d067      	beq.n	1518a <__aeabi_dadd+0x55a>
   150ba:	43db      	mvns	r3, r3
   150bc:	469a      	mov	sl, r3
   150be:	2b00      	cmp	r3, #0
   150c0:	d01c      	beq.n	150fc <__aeabi_dadd+0x4cc>
   150c2:	4e61      	ldr	r6, [pc, #388]	; (15248 <__aeabi_dadd+0x618>)
   150c4:	42b0      	cmp	r0, r6
   150c6:	d060      	beq.n	1518a <__aeabi_dadd+0x55a>
   150c8:	4653      	mov	r3, sl
   150ca:	2b38      	cmp	r3, #56	; 0x38
   150cc:	dd00      	ble.n	150d0 <__aeabi_dadd+0x4a0>
   150ce:	e096      	b.n	151fe <__aeabi_dadd+0x5ce>
   150d0:	2b1f      	cmp	r3, #31
   150d2:	dd00      	ble.n	150d6 <__aeabi_dadd+0x4a6>
   150d4:	e09f      	b.n	15216 <__aeabi_dadd+0x5e6>
   150d6:	2620      	movs	r6, #32
   150d8:	1af3      	subs	r3, r6, r3
   150da:	0026      	movs	r6, r4
   150dc:	409e      	lsls	r6, r3
   150de:	469c      	mov	ip, r3
   150e0:	46b3      	mov	fp, r6
   150e2:	4653      	mov	r3, sl
   150e4:	003e      	movs	r6, r7
   150e6:	40de      	lsrs	r6, r3
   150e8:	0033      	movs	r3, r6
   150ea:	465e      	mov	r6, fp
   150ec:	431e      	orrs	r6, r3
   150ee:	4663      	mov	r3, ip
   150f0:	409f      	lsls	r7, r3
   150f2:	1e7b      	subs	r3, r7, #1
   150f4:	419f      	sbcs	r7, r3
   150f6:	4653      	mov	r3, sl
   150f8:	40dc      	lsrs	r4, r3
   150fa:	4337      	orrs	r7, r6
   150fc:	18bf      	adds	r7, r7, r2
   150fe:	4297      	cmp	r7, r2
   15100:	4192      	sbcs	r2, r2
   15102:	1864      	adds	r4, r4, r1
   15104:	4252      	negs	r2, r2
   15106:	18a4      	adds	r4, r4, r2
   15108:	0006      	movs	r6, r0
   1510a:	e678      	b.n	14dfe <__aeabi_dadd+0x1ce>
   1510c:	4327      	orrs	r7, r4
   1510e:	1e7c      	subs	r4, r7, #1
   15110:	41a7      	sbcs	r7, r4
   15112:	2400      	movs	r4, #0
   15114:	e737      	b.n	14f86 <__aeabi_dadd+0x356>
   15116:	4e4c      	ldr	r6, [pc, #304]	; (15248 <__aeabi_dadd+0x618>)
   15118:	42b0      	cmp	r0, r6
   1511a:	d036      	beq.n	1518a <__aeabi_dadd+0x55a>
   1511c:	2680      	movs	r6, #128	; 0x80
   1511e:	425b      	negs	r3, r3
   15120:	0436      	lsls	r6, r6, #16
   15122:	469a      	mov	sl, r3
   15124:	4334      	orrs	r4, r6
   15126:	e7cf      	b.n	150c8 <__aeabi_dadd+0x498>
   15128:	0018      	movs	r0, r3
   1512a:	4310      	orrs	r0, r2
   1512c:	d100      	bne.n	15130 <__aeabi_dadd+0x500>
   1512e:	e603      	b.n	14d38 <__aeabi_dadd+0x108>
   15130:	1ab8      	subs	r0, r7, r2
   15132:	4684      	mov	ip, r0
   15134:	4567      	cmp	r7, ip
   15136:	41ad      	sbcs	r5, r5
   15138:	1ae0      	subs	r0, r4, r3
   1513a:	426d      	negs	r5, r5
   1513c:	1b40      	subs	r0, r0, r5
   1513e:	0205      	lsls	r5, r0, #8
   15140:	d400      	bmi.n	15144 <__aeabi_dadd+0x514>
   15142:	e62c      	b.n	14d9e <__aeabi_dadd+0x16e>
   15144:	1bd7      	subs	r7, r2, r7
   15146:	42ba      	cmp	r2, r7
   15148:	4192      	sbcs	r2, r2
   1514a:	1b1c      	subs	r4, r3, r4
   1514c:	4252      	negs	r2, r2
   1514e:	1aa4      	subs	r4, r4, r2
   15150:	46d8      	mov	r8, fp
   15152:	e5f1      	b.n	14d38 <__aeabi_dadd+0x108>
   15154:	0018      	movs	r0, r3
   15156:	4310      	orrs	r0, r2
   15158:	d100      	bne.n	1515c <__aeabi_dadd+0x52c>
   1515a:	e763      	b.n	15024 <__aeabi_dadd+0x3f4>
   1515c:	08f8      	lsrs	r0, r7, #3
   1515e:	0767      	lsls	r7, r4, #29
   15160:	4307      	orrs	r7, r0
   15162:	2080      	movs	r0, #128	; 0x80
   15164:	08e4      	lsrs	r4, r4, #3
   15166:	0300      	lsls	r0, r0, #12
   15168:	4204      	tst	r4, r0
   1516a:	d008      	beq.n	1517e <__aeabi_dadd+0x54e>
   1516c:	08dd      	lsrs	r5, r3, #3
   1516e:	4205      	tst	r5, r0
   15170:	d105      	bne.n	1517e <__aeabi_dadd+0x54e>
   15172:	08d2      	lsrs	r2, r2, #3
   15174:	0759      	lsls	r1, r3, #29
   15176:	4311      	orrs	r1, r2
   15178:	000f      	movs	r7, r1
   1517a:	002c      	movs	r4, r5
   1517c:	46d8      	mov	r8, fp
   1517e:	0f7b      	lsrs	r3, r7, #29
   15180:	00e4      	lsls	r4, r4, #3
   15182:	431c      	orrs	r4, r3
   15184:	00ff      	lsls	r7, r7, #3
   15186:	4e30      	ldr	r6, [pc, #192]	; (15248 <__aeabi_dadd+0x618>)
   15188:	e5d6      	b.n	14d38 <__aeabi_dadd+0x108>
   1518a:	000c      	movs	r4, r1
   1518c:	0017      	movs	r7, r2
   1518e:	0006      	movs	r6, r0
   15190:	e5d2      	b.n	14d38 <__aeabi_dadd+0x108>
   15192:	2b00      	cmp	r3, #0
   15194:	d038      	beq.n	15208 <__aeabi_dadd+0x5d8>
   15196:	000b      	movs	r3, r1
   15198:	4313      	orrs	r3, r2
   1519a:	d100      	bne.n	1519e <__aeabi_dadd+0x56e>
   1519c:	e742      	b.n	15024 <__aeabi_dadd+0x3f4>
   1519e:	08f8      	lsrs	r0, r7, #3
   151a0:	0767      	lsls	r7, r4, #29
   151a2:	4307      	orrs	r7, r0
   151a4:	2080      	movs	r0, #128	; 0x80
   151a6:	08e4      	lsrs	r4, r4, #3
   151a8:	0300      	lsls	r0, r0, #12
   151aa:	4204      	tst	r4, r0
   151ac:	d0e7      	beq.n	1517e <__aeabi_dadd+0x54e>
   151ae:	08cb      	lsrs	r3, r1, #3
   151b0:	4203      	tst	r3, r0
   151b2:	d1e4      	bne.n	1517e <__aeabi_dadd+0x54e>
   151b4:	08d2      	lsrs	r2, r2, #3
   151b6:	0749      	lsls	r1, r1, #29
   151b8:	4311      	orrs	r1, r2
   151ba:	000f      	movs	r7, r1
   151bc:	001c      	movs	r4, r3
   151be:	e7de      	b.n	1517e <__aeabi_dadd+0x54e>
   151c0:	2700      	movs	r7, #0
   151c2:	2400      	movs	r4, #0
   151c4:	e5d5      	b.n	14d72 <__aeabi_dadd+0x142>
   151c6:	2100      	movs	r1, #0
   151c8:	e76b      	b.n	150a2 <__aeabi_dadd+0x472>
   151ca:	2500      	movs	r5, #0
   151cc:	2700      	movs	r7, #0
   151ce:	e5f3      	b.n	14db8 <__aeabi_dadd+0x188>
   151d0:	464e      	mov	r6, r9
   151d2:	0025      	movs	r5, r4
   151d4:	3e20      	subs	r6, #32
   151d6:	40f5      	lsrs	r5, r6
   151d8:	464b      	mov	r3, r9
   151da:	002e      	movs	r6, r5
   151dc:	2b20      	cmp	r3, #32
   151de:	d02d      	beq.n	1523c <__aeabi_dadd+0x60c>
   151e0:	2540      	movs	r5, #64	; 0x40
   151e2:	1aed      	subs	r5, r5, r3
   151e4:	40ac      	lsls	r4, r5
   151e6:	4327      	orrs	r7, r4
   151e8:	1e7c      	subs	r4, r7, #1
   151ea:	41a7      	sbcs	r7, r4
   151ec:	2400      	movs	r4, #0
   151ee:	4337      	orrs	r7, r6
   151f0:	e6c9      	b.n	14f86 <__aeabi_dadd+0x356>
   151f2:	2480      	movs	r4, #128	; 0x80
   151f4:	2500      	movs	r5, #0
   151f6:	0324      	lsls	r4, r4, #12
   151f8:	4e13      	ldr	r6, [pc, #76]	; (15248 <__aeabi_dadd+0x618>)
   151fa:	2700      	movs	r7, #0
   151fc:	e5dc      	b.n	14db8 <__aeabi_dadd+0x188>
   151fe:	4327      	orrs	r7, r4
   15200:	1e7c      	subs	r4, r7, #1
   15202:	41a7      	sbcs	r7, r4
   15204:	2400      	movs	r4, #0
   15206:	e779      	b.n	150fc <__aeabi_dadd+0x4cc>
   15208:	000c      	movs	r4, r1
   1520a:	0017      	movs	r7, r2
   1520c:	4e0e      	ldr	r6, [pc, #56]	; (15248 <__aeabi_dadd+0x618>)
   1520e:	e593      	b.n	14d38 <__aeabi_dadd+0x108>
   15210:	000c      	movs	r4, r1
   15212:	0017      	movs	r7, r2
   15214:	e590      	b.n	14d38 <__aeabi_dadd+0x108>
   15216:	4656      	mov	r6, sl
   15218:	0023      	movs	r3, r4
   1521a:	3e20      	subs	r6, #32
   1521c:	40f3      	lsrs	r3, r6
   1521e:	4699      	mov	r9, r3
   15220:	4653      	mov	r3, sl
   15222:	2b20      	cmp	r3, #32
   15224:	d00e      	beq.n	15244 <__aeabi_dadd+0x614>
   15226:	2340      	movs	r3, #64	; 0x40
   15228:	4656      	mov	r6, sl
   1522a:	1b9b      	subs	r3, r3, r6
   1522c:	409c      	lsls	r4, r3
   1522e:	4327      	orrs	r7, r4
   15230:	1e7c      	subs	r4, r7, #1
   15232:	41a7      	sbcs	r7, r4
   15234:	464b      	mov	r3, r9
   15236:	2400      	movs	r4, #0
   15238:	431f      	orrs	r7, r3
   1523a:	e75f      	b.n	150fc <__aeabi_dadd+0x4cc>
   1523c:	2400      	movs	r4, #0
   1523e:	e7d2      	b.n	151e6 <__aeabi_dadd+0x5b6>
   15240:	0017      	movs	r7, r2
   15242:	e5b2      	b.n	14daa <__aeabi_dadd+0x17a>
   15244:	2400      	movs	r4, #0
   15246:	e7f2      	b.n	1522e <__aeabi_dadd+0x5fe>
   15248:	000007ff 	.word	0x000007ff
   1524c:	ff7fffff 	.word	0xff7fffff

00015250 <__aeabi_ddiv>:
   15250:	b5f0      	push	{r4, r5, r6, r7, lr}
   15252:	4657      	mov	r7, sl
   15254:	4645      	mov	r5, r8
   15256:	46de      	mov	lr, fp
   15258:	464e      	mov	r6, r9
   1525a:	b5e0      	push	{r5, r6, r7, lr}
   1525c:	004c      	lsls	r4, r1, #1
   1525e:	030e      	lsls	r6, r1, #12
   15260:	b087      	sub	sp, #28
   15262:	4683      	mov	fp, r0
   15264:	4692      	mov	sl, r2
   15266:	001d      	movs	r5, r3
   15268:	4680      	mov	r8, r0
   1526a:	0b36      	lsrs	r6, r6, #12
   1526c:	0d64      	lsrs	r4, r4, #21
   1526e:	0fcf      	lsrs	r7, r1, #31
   15270:	2c00      	cmp	r4, #0
   15272:	d04f      	beq.n	15314 <__aeabi_ddiv+0xc4>
   15274:	4b6f      	ldr	r3, [pc, #444]	; (15434 <__aeabi_ddiv+0x1e4>)
   15276:	429c      	cmp	r4, r3
   15278:	d035      	beq.n	152e6 <__aeabi_ddiv+0x96>
   1527a:	2380      	movs	r3, #128	; 0x80
   1527c:	0f42      	lsrs	r2, r0, #29
   1527e:	041b      	lsls	r3, r3, #16
   15280:	00f6      	lsls	r6, r6, #3
   15282:	4313      	orrs	r3, r2
   15284:	4333      	orrs	r3, r6
   15286:	4699      	mov	r9, r3
   15288:	00c3      	lsls	r3, r0, #3
   1528a:	4698      	mov	r8, r3
   1528c:	4b6a      	ldr	r3, [pc, #424]	; (15438 <__aeabi_ddiv+0x1e8>)
   1528e:	2600      	movs	r6, #0
   15290:	469c      	mov	ip, r3
   15292:	2300      	movs	r3, #0
   15294:	4464      	add	r4, ip
   15296:	9303      	str	r3, [sp, #12]
   15298:	032b      	lsls	r3, r5, #12
   1529a:	0b1b      	lsrs	r3, r3, #12
   1529c:	469b      	mov	fp, r3
   1529e:	006b      	lsls	r3, r5, #1
   152a0:	0fed      	lsrs	r5, r5, #31
   152a2:	4650      	mov	r0, sl
   152a4:	0d5b      	lsrs	r3, r3, #21
   152a6:	9501      	str	r5, [sp, #4]
   152a8:	d05e      	beq.n	15368 <__aeabi_ddiv+0x118>
   152aa:	4a62      	ldr	r2, [pc, #392]	; (15434 <__aeabi_ddiv+0x1e4>)
   152ac:	4293      	cmp	r3, r2
   152ae:	d053      	beq.n	15358 <__aeabi_ddiv+0x108>
   152b0:	465a      	mov	r2, fp
   152b2:	00d1      	lsls	r1, r2, #3
   152b4:	2280      	movs	r2, #128	; 0x80
   152b6:	0f40      	lsrs	r0, r0, #29
   152b8:	0412      	lsls	r2, r2, #16
   152ba:	4302      	orrs	r2, r0
   152bc:	430a      	orrs	r2, r1
   152be:	4693      	mov	fp, r2
   152c0:	4652      	mov	r2, sl
   152c2:	00d1      	lsls	r1, r2, #3
   152c4:	4a5c      	ldr	r2, [pc, #368]	; (15438 <__aeabi_ddiv+0x1e8>)
   152c6:	4694      	mov	ip, r2
   152c8:	2200      	movs	r2, #0
   152ca:	4463      	add	r3, ip
   152cc:	0038      	movs	r0, r7
   152ce:	4068      	eors	r0, r5
   152d0:	4684      	mov	ip, r0
   152d2:	9002      	str	r0, [sp, #8]
   152d4:	1ae4      	subs	r4, r4, r3
   152d6:	4316      	orrs	r6, r2
   152d8:	2e0f      	cmp	r6, #15
   152da:	d900      	bls.n	152de <__aeabi_ddiv+0x8e>
   152dc:	e0b4      	b.n	15448 <__aeabi_ddiv+0x1f8>
   152de:	4b57      	ldr	r3, [pc, #348]	; (1543c <__aeabi_ddiv+0x1ec>)
   152e0:	00b6      	lsls	r6, r6, #2
   152e2:	599b      	ldr	r3, [r3, r6]
   152e4:	469f      	mov	pc, r3
   152e6:	0003      	movs	r3, r0
   152e8:	4333      	orrs	r3, r6
   152ea:	4699      	mov	r9, r3
   152ec:	d16c      	bne.n	153c8 <__aeabi_ddiv+0x178>
   152ee:	2300      	movs	r3, #0
   152f0:	4698      	mov	r8, r3
   152f2:	3302      	adds	r3, #2
   152f4:	2608      	movs	r6, #8
   152f6:	9303      	str	r3, [sp, #12]
   152f8:	e7ce      	b.n	15298 <__aeabi_ddiv+0x48>
   152fa:	46cb      	mov	fp, r9
   152fc:	4641      	mov	r1, r8
   152fe:	9a03      	ldr	r2, [sp, #12]
   15300:	9701      	str	r7, [sp, #4]
   15302:	2a02      	cmp	r2, #2
   15304:	d165      	bne.n	153d2 <__aeabi_ddiv+0x182>
   15306:	9b01      	ldr	r3, [sp, #4]
   15308:	4c4a      	ldr	r4, [pc, #296]	; (15434 <__aeabi_ddiv+0x1e4>)
   1530a:	469c      	mov	ip, r3
   1530c:	2300      	movs	r3, #0
   1530e:	2200      	movs	r2, #0
   15310:	4698      	mov	r8, r3
   15312:	e06b      	b.n	153ec <__aeabi_ddiv+0x19c>
   15314:	0003      	movs	r3, r0
   15316:	4333      	orrs	r3, r6
   15318:	4699      	mov	r9, r3
   1531a:	d04e      	beq.n	153ba <__aeabi_ddiv+0x16a>
   1531c:	2e00      	cmp	r6, #0
   1531e:	d100      	bne.n	15322 <__aeabi_ddiv+0xd2>
   15320:	e1bc      	b.n	1569c <__aeabi_ddiv+0x44c>
   15322:	0030      	movs	r0, r6
   15324:	f001 fae8 	bl	168f8 <__clzsi2>
   15328:	0003      	movs	r3, r0
   1532a:	3b0b      	subs	r3, #11
   1532c:	2b1c      	cmp	r3, #28
   1532e:	dd00      	ble.n	15332 <__aeabi_ddiv+0xe2>
   15330:	e1ac      	b.n	1568c <__aeabi_ddiv+0x43c>
   15332:	221d      	movs	r2, #29
   15334:	1ad3      	subs	r3, r2, r3
   15336:	465a      	mov	r2, fp
   15338:	0001      	movs	r1, r0
   1533a:	40da      	lsrs	r2, r3
   1533c:	3908      	subs	r1, #8
   1533e:	408e      	lsls	r6, r1
   15340:	0013      	movs	r3, r2
   15342:	4333      	orrs	r3, r6
   15344:	4699      	mov	r9, r3
   15346:	465b      	mov	r3, fp
   15348:	408b      	lsls	r3, r1
   1534a:	4698      	mov	r8, r3
   1534c:	2300      	movs	r3, #0
   1534e:	4c3c      	ldr	r4, [pc, #240]	; (15440 <__aeabi_ddiv+0x1f0>)
   15350:	2600      	movs	r6, #0
   15352:	1a24      	subs	r4, r4, r0
   15354:	9303      	str	r3, [sp, #12]
   15356:	e79f      	b.n	15298 <__aeabi_ddiv+0x48>
   15358:	4651      	mov	r1, sl
   1535a:	465a      	mov	r2, fp
   1535c:	4311      	orrs	r1, r2
   1535e:	d129      	bne.n	153b4 <__aeabi_ddiv+0x164>
   15360:	2200      	movs	r2, #0
   15362:	4693      	mov	fp, r2
   15364:	3202      	adds	r2, #2
   15366:	e7b1      	b.n	152cc <__aeabi_ddiv+0x7c>
   15368:	4659      	mov	r1, fp
   1536a:	4301      	orrs	r1, r0
   1536c:	d01e      	beq.n	153ac <__aeabi_ddiv+0x15c>
   1536e:	465b      	mov	r3, fp
   15370:	2b00      	cmp	r3, #0
   15372:	d100      	bne.n	15376 <__aeabi_ddiv+0x126>
   15374:	e19e      	b.n	156b4 <__aeabi_ddiv+0x464>
   15376:	4658      	mov	r0, fp
   15378:	f001 fabe 	bl	168f8 <__clzsi2>
   1537c:	0003      	movs	r3, r0
   1537e:	3b0b      	subs	r3, #11
   15380:	2b1c      	cmp	r3, #28
   15382:	dd00      	ble.n	15386 <__aeabi_ddiv+0x136>
   15384:	e18f      	b.n	156a6 <__aeabi_ddiv+0x456>
   15386:	0002      	movs	r2, r0
   15388:	4659      	mov	r1, fp
   1538a:	3a08      	subs	r2, #8
   1538c:	4091      	lsls	r1, r2
   1538e:	468b      	mov	fp, r1
   15390:	211d      	movs	r1, #29
   15392:	1acb      	subs	r3, r1, r3
   15394:	4651      	mov	r1, sl
   15396:	40d9      	lsrs	r1, r3
   15398:	000b      	movs	r3, r1
   1539a:	4659      	mov	r1, fp
   1539c:	430b      	orrs	r3, r1
   1539e:	4651      	mov	r1, sl
   153a0:	469b      	mov	fp, r3
   153a2:	4091      	lsls	r1, r2
   153a4:	4b26      	ldr	r3, [pc, #152]	; (15440 <__aeabi_ddiv+0x1f0>)
   153a6:	2200      	movs	r2, #0
   153a8:	1a1b      	subs	r3, r3, r0
   153aa:	e78f      	b.n	152cc <__aeabi_ddiv+0x7c>
   153ac:	2300      	movs	r3, #0
   153ae:	2201      	movs	r2, #1
   153b0:	469b      	mov	fp, r3
   153b2:	e78b      	b.n	152cc <__aeabi_ddiv+0x7c>
   153b4:	4651      	mov	r1, sl
   153b6:	2203      	movs	r2, #3
   153b8:	e788      	b.n	152cc <__aeabi_ddiv+0x7c>
   153ba:	2300      	movs	r3, #0
   153bc:	4698      	mov	r8, r3
   153be:	3301      	adds	r3, #1
   153c0:	2604      	movs	r6, #4
   153c2:	2400      	movs	r4, #0
   153c4:	9303      	str	r3, [sp, #12]
   153c6:	e767      	b.n	15298 <__aeabi_ddiv+0x48>
   153c8:	2303      	movs	r3, #3
   153ca:	46b1      	mov	r9, r6
   153cc:	9303      	str	r3, [sp, #12]
   153ce:	260c      	movs	r6, #12
   153d0:	e762      	b.n	15298 <__aeabi_ddiv+0x48>
   153d2:	2a03      	cmp	r2, #3
   153d4:	d100      	bne.n	153d8 <__aeabi_ddiv+0x188>
   153d6:	e25c      	b.n	15892 <__aeabi_ddiv+0x642>
   153d8:	9b01      	ldr	r3, [sp, #4]
   153da:	2a01      	cmp	r2, #1
   153dc:	d000      	beq.n	153e0 <__aeabi_ddiv+0x190>
   153de:	e1e4      	b.n	157aa <__aeabi_ddiv+0x55a>
   153e0:	4013      	ands	r3, r2
   153e2:	469c      	mov	ip, r3
   153e4:	2300      	movs	r3, #0
   153e6:	2400      	movs	r4, #0
   153e8:	2200      	movs	r2, #0
   153ea:	4698      	mov	r8, r3
   153ec:	2100      	movs	r1, #0
   153ee:	0312      	lsls	r2, r2, #12
   153f0:	0b13      	lsrs	r3, r2, #12
   153f2:	0d0a      	lsrs	r2, r1, #20
   153f4:	0512      	lsls	r2, r2, #20
   153f6:	431a      	orrs	r2, r3
   153f8:	0523      	lsls	r3, r4, #20
   153fa:	4c12      	ldr	r4, [pc, #72]	; (15444 <__aeabi_ddiv+0x1f4>)
   153fc:	4640      	mov	r0, r8
   153fe:	4022      	ands	r2, r4
   15400:	4313      	orrs	r3, r2
   15402:	4662      	mov	r2, ip
   15404:	005b      	lsls	r3, r3, #1
   15406:	07d2      	lsls	r2, r2, #31
   15408:	085b      	lsrs	r3, r3, #1
   1540a:	4313      	orrs	r3, r2
   1540c:	0019      	movs	r1, r3
   1540e:	b007      	add	sp, #28
   15410:	bc3c      	pop	{r2, r3, r4, r5}
   15412:	4690      	mov	r8, r2
   15414:	4699      	mov	r9, r3
   15416:	46a2      	mov	sl, r4
   15418:	46ab      	mov	fp, r5
   1541a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1541c:	2300      	movs	r3, #0
   1541e:	2280      	movs	r2, #128	; 0x80
   15420:	469c      	mov	ip, r3
   15422:	0312      	lsls	r2, r2, #12
   15424:	4698      	mov	r8, r3
   15426:	4c03      	ldr	r4, [pc, #12]	; (15434 <__aeabi_ddiv+0x1e4>)
   15428:	e7e0      	b.n	153ec <__aeabi_ddiv+0x19c>
   1542a:	2300      	movs	r3, #0
   1542c:	4c01      	ldr	r4, [pc, #4]	; (15434 <__aeabi_ddiv+0x1e4>)
   1542e:	2200      	movs	r2, #0
   15430:	4698      	mov	r8, r3
   15432:	e7db      	b.n	153ec <__aeabi_ddiv+0x19c>
   15434:	000007ff 	.word	0x000007ff
   15438:	fffffc01 	.word	0xfffffc01
   1543c:	000193cc 	.word	0x000193cc
   15440:	fffffc0d 	.word	0xfffffc0d
   15444:	800fffff 	.word	0x800fffff
   15448:	45d9      	cmp	r9, fp
   1544a:	d900      	bls.n	1544e <__aeabi_ddiv+0x1fe>
   1544c:	e139      	b.n	156c2 <__aeabi_ddiv+0x472>
   1544e:	d100      	bne.n	15452 <__aeabi_ddiv+0x202>
   15450:	e134      	b.n	156bc <__aeabi_ddiv+0x46c>
   15452:	2300      	movs	r3, #0
   15454:	4646      	mov	r6, r8
   15456:	464d      	mov	r5, r9
   15458:	469a      	mov	sl, r3
   1545a:	3c01      	subs	r4, #1
   1545c:	465b      	mov	r3, fp
   1545e:	0e0a      	lsrs	r2, r1, #24
   15460:	021b      	lsls	r3, r3, #8
   15462:	431a      	orrs	r2, r3
   15464:	020b      	lsls	r3, r1, #8
   15466:	0c17      	lsrs	r7, r2, #16
   15468:	9303      	str	r3, [sp, #12]
   1546a:	0413      	lsls	r3, r2, #16
   1546c:	0c1b      	lsrs	r3, r3, #16
   1546e:	0039      	movs	r1, r7
   15470:	0028      	movs	r0, r5
   15472:	4690      	mov	r8, r2
   15474:	9301      	str	r3, [sp, #4]
   15476:	f7fe f999 	bl	137ac <__udivsi3>
   1547a:	0002      	movs	r2, r0
   1547c:	9b01      	ldr	r3, [sp, #4]
   1547e:	4683      	mov	fp, r0
   15480:	435a      	muls	r2, r3
   15482:	0028      	movs	r0, r5
   15484:	0039      	movs	r1, r7
   15486:	4691      	mov	r9, r2
   15488:	f7fe fa16 	bl	138b8 <__aeabi_uidivmod>
   1548c:	0c35      	lsrs	r5, r6, #16
   1548e:	0409      	lsls	r1, r1, #16
   15490:	430d      	orrs	r5, r1
   15492:	45a9      	cmp	r9, r5
   15494:	d90d      	bls.n	154b2 <__aeabi_ddiv+0x262>
   15496:	465b      	mov	r3, fp
   15498:	4445      	add	r5, r8
   1549a:	3b01      	subs	r3, #1
   1549c:	45a8      	cmp	r8, r5
   1549e:	d900      	bls.n	154a2 <__aeabi_ddiv+0x252>
   154a0:	e13a      	b.n	15718 <__aeabi_ddiv+0x4c8>
   154a2:	45a9      	cmp	r9, r5
   154a4:	d800      	bhi.n	154a8 <__aeabi_ddiv+0x258>
   154a6:	e137      	b.n	15718 <__aeabi_ddiv+0x4c8>
   154a8:	2302      	movs	r3, #2
   154aa:	425b      	negs	r3, r3
   154ac:	469c      	mov	ip, r3
   154ae:	4445      	add	r5, r8
   154b0:	44e3      	add	fp, ip
   154b2:	464b      	mov	r3, r9
   154b4:	1aeb      	subs	r3, r5, r3
   154b6:	0039      	movs	r1, r7
   154b8:	0018      	movs	r0, r3
   154ba:	9304      	str	r3, [sp, #16]
   154bc:	f7fe f976 	bl	137ac <__udivsi3>
   154c0:	9b01      	ldr	r3, [sp, #4]
   154c2:	0005      	movs	r5, r0
   154c4:	4343      	muls	r3, r0
   154c6:	0039      	movs	r1, r7
   154c8:	9804      	ldr	r0, [sp, #16]
   154ca:	4699      	mov	r9, r3
   154cc:	f7fe f9f4 	bl	138b8 <__aeabi_uidivmod>
   154d0:	0433      	lsls	r3, r6, #16
   154d2:	0409      	lsls	r1, r1, #16
   154d4:	0c1b      	lsrs	r3, r3, #16
   154d6:	430b      	orrs	r3, r1
   154d8:	4599      	cmp	r9, r3
   154da:	d909      	bls.n	154f0 <__aeabi_ddiv+0x2a0>
   154dc:	4443      	add	r3, r8
   154de:	1e6a      	subs	r2, r5, #1
   154e0:	4598      	cmp	r8, r3
   154e2:	d900      	bls.n	154e6 <__aeabi_ddiv+0x296>
   154e4:	e11a      	b.n	1571c <__aeabi_ddiv+0x4cc>
   154e6:	4599      	cmp	r9, r3
   154e8:	d800      	bhi.n	154ec <__aeabi_ddiv+0x29c>
   154ea:	e117      	b.n	1571c <__aeabi_ddiv+0x4cc>
   154ec:	3d02      	subs	r5, #2
   154ee:	4443      	add	r3, r8
   154f0:	464a      	mov	r2, r9
   154f2:	1a9b      	subs	r3, r3, r2
   154f4:	465a      	mov	r2, fp
   154f6:	0412      	lsls	r2, r2, #16
   154f8:	432a      	orrs	r2, r5
   154fa:	9903      	ldr	r1, [sp, #12]
   154fc:	4693      	mov	fp, r2
   154fe:	0c10      	lsrs	r0, r2, #16
   15500:	0c0a      	lsrs	r2, r1, #16
   15502:	4691      	mov	r9, r2
   15504:	0409      	lsls	r1, r1, #16
   15506:	465a      	mov	r2, fp
   15508:	0c09      	lsrs	r1, r1, #16
   1550a:	464e      	mov	r6, r9
   1550c:	000d      	movs	r5, r1
   1550e:	0412      	lsls	r2, r2, #16
   15510:	0c12      	lsrs	r2, r2, #16
   15512:	4345      	muls	r5, r0
   15514:	9105      	str	r1, [sp, #20]
   15516:	4351      	muls	r1, r2
   15518:	4372      	muls	r2, r6
   1551a:	4370      	muls	r0, r6
   1551c:	1952      	adds	r2, r2, r5
   1551e:	0c0e      	lsrs	r6, r1, #16
   15520:	18b2      	adds	r2, r6, r2
   15522:	4295      	cmp	r5, r2
   15524:	d903      	bls.n	1552e <__aeabi_ddiv+0x2de>
   15526:	2580      	movs	r5, #128	; 0x80
   15528:	026d      	lsls	r5, r5, #9
   1552a:	46ac      	mov	ip, r5
   1552c:	4460      	add	r0, ip
   1552e:	0c15      	lsrs	r5, r2, #16
   15530:	0409      	lsls	r1, r1, #16
   15532:	0412      	lsls	r2, r2, #16
   15534:	0c09      	lsrs	r1, r1, #16
   15536:	1828      	adds	r0, r5, r0
   15538:	1852      	adds	r2, r2, r1
   1553a:	4283      	cmp	r3, r0
   1553c:	d200      	bcs.n	15540 <__aeabi_ddiv+0x2f0>
   1553e:	e0ce      	b.n	156de <__aeabi_ddiv+0x48e>
   15540:	d100      	bne.n	15544 <__aeabi_ddiv+0x2f4>
   15542:	e0c8      	b.n	156d6 <__aeabi_ddiv+0x486>
   15544:	1a1d      	subs	r5, r3, r0
   15546:	4653      	mov	r3, sl
   15548:	1a9e      	subs	r6, r3, r2
   1554a:	45b2      	cmp	sl, r6
   1554c:	4192      	sbcs	r2, r2
   1554e:	4252      	negs	r2, r2
   15550:	1aab      	subs	r3, r5, r2
   15552:	469a      	mov	sl, r3
   15554:	4598      	cmp	r8, r3
   15556:	d100      	bne.n	1555a <__aeabi_ddiv+0x30a>
   15558:	e117      	b.n	1578a <__aeabi_ddiv+0x53a>
   1555a:	0039      	movs	r1, r7
   1555c:	0018      	movs	r0, r3
   1555e:	f7fe f925 	bl	137ac <__udivsi3>
   15562:	9b01      	ldr	r3, [sp, #4]
   15564:	0005      	movs	r5, r0
   15566:	4343      	muls	r3, r0
   15568:	0039      	movs	r1, r7
   1556a:	4650      	mov	r0, sl
   1556c:	9304      	str	r3, [sp, #16]
   1556e:	f7fe f9a3 	bl	138b8 <__aeabi_uidivmod>
   15572:	9804      	ldr	r0, [sp, #16]
   15574:	040b      	lsls	r3, r1, #16
   15576:	0c31      	lsrs	r1, r6, #16
   15578:	4319      	orrs	r1, r3
   1557a:	4288      	cmp	r0, r1
   1557c:	d909      	bls.n	15592 <__aeabi_ddiv+0x342>
   1557e:	4441      	add	r1, r8
   15580:	1e6b      	subs	r3, r5, #1
   15582:	4588      	cmp	r8, r1
   15584:	d900      	bls.n	15588 <__aeabi_ddiv+0x338>
   15586:	e107      	b.n	15798 <__aeabi_ddiv+0x548>
   15588:	4288      	cmp	r0, r1
   1558a:	d800      	bhi.n	1558e <__aeabi_ddiv+0x33e>
   1558c:	e104      	b.n	15798 <__aeabi_ddiv+0x548>
   1558e:	3d02      	subs	r5, #2
   15590:	4441      	add	r1, r8
   15592:	9b04      	ldr	r3, [sp, #16]
   15594:	1acb      	subs	r3, r1, r3
   15596:	0018      	movs	r0, r3
   15598:	0039      	movs	r1, r7
   1559a:	9304      	str	r3, [sp, #16]
   1559c:	f7fe f906 	bl	137ac <__udivsi3>
   155a0:	9b01      	ldr	r3, [sp, #4]
   155a2:	4682      	mov	sl, r0
   155a4:	4343      	muls	r3, r0
   155a6:	0039      	movs	r1, r7
   155a8:	9804      	ldr	r0, [sp, #16]
   155aa:	9301      	str	r3, [sp, #4]
   155ac:	f7fe f984 	bl	138b8 <__aeabi_uidivmod>
   155b0:	9801      	ldr	r0, [sp, #4]
   155b2:	040b      	lsls	r3, r1, #16
   155b4:	0431      	lsls	r1, r6, #16
   155b6:	0c09      	lsrs	r1, r1, #16
   155b8:	4319      	orrs	r1, r3
   155ba:	4288      	cmp	r0, r1
   155bc:	d90d      	bls.n	155da <__aeabi_ddiv+0x38a>
   155be:	4653      	mov	r3, sl
   155c0:	4441      	add	r1, r8
   155c2:	3b01      	subs	r3, #1
   155c4:	4588      	cmp	r8, r1
   155c6:	d900      	bls.n	155ca <__aeabi_ddiv+0x37a>
   155c8:	e0e8      	b.n	1579c <__aeabi_ddiv+0x54c>
   155ca:	4288      	cmp	r0, r1
   155cc:	d800      	bhi.n	155d0 <__aeabi_ddiv+0x380>
   155ce:	e0e5      	b.n	1579c <__aeabi_ddiv+0x54c>
   155d0:	2302      	movs	r3, #2
   155d2:	425b      	negs	r3, r3
   155d4:	469c      	mov	ip, r3
   155d6:	4441      	add	r1, r8
   155d8:	44e2      	add	sl, ip
   155da:	9b01      	ldr	r3, [sp, #4]
   155dc:	042d      	lsls	r5, r5, #16
   155de:	1ace      	subs	r6, r1, r3
   155e0:	4651      	mov	r1, sl
   155e2:	4329      	orrs	r1, r5
   155e4:	9d05      	ldr	r5, [sp, #20]
   155e6:	464f      	mov	r7, r9
   155e8:	002a      	movs	r2, r5
   155ea:	040b      	lsls	r3, r1, #16
   155ec:	0c08      	lsrs	r0, r1, #16
   155ee:	0c1b      	lsrs	r3, r3, #16
   155f0:	435a      	muls	r2, r3
   155f2:	4345      	muls	r5, r0
   155f4:	437b      	muls	r3, r7
   155f6:	4378      	muls	r0, r7
   155f8:	195b      	adds	r3, r3, r5
   155fa:	0c17      	lsrs	r7, r2, #16
   155fc:	18fb      	adds	r3, r7, r3
   155fe:	429d      	cmp	r5, r3
   15600:	d903      	bls.n	1560a <__aeabi_ddiv+0x3ba>
   15602:	2580      	movs	r5, #128	; 0x80
   15604:	026d      	lsls	r5, r5, #9
   15606:	46ac      	mov	ip, r5
   15608:	4460      	add	r0, ip
   1560a:	0c1d      	lsrs	r5, r3, #16
   1560c:	0412      	lsls	r2, r2, #16
   1560e:	041b      	lsls	r3, r3, #16
   15610:	0c12      	lsrs	r2, r2, #16
   15612:	1828      	adds	r0, r5, r0
   15614:	189b      	adds	r3, r3, r2
   15616:	4286      	cmp	r6, r0
   15618:	d200      	bcs.n	1561c <__aeabi_ddiv+0x3cc>
   1561a:	e093      	b.n	15744 <__aeabi_ddiv+0x4f4>
   1561c:	d100      	bne.n	15620 <__aeabi_ddiv+0x3d0>
   1561e:	e08e      	b.n	1573e <__aeabi_ddiv+0x4ee>
   15620:	2301      	movs	r3, #1
   15622:	4319      	orrs	r1, r3
   15624:	4ba0      	ldr	r3, [pc, #640]	; (158a8 <__aeabi_ddiv+0x658>)
   15626:	18e3      	adds	r3, r4, r3
   15628:	2b00      	cmp	r3, #0
   1562a:	dc00      	bgt.n	1562e <__aeabi_ddiv+0x3de>
   1562c:	e099      	b.n	15762 <__aeabi_ddiv+0x512>
   1562e:	074a      	lsls	r2, r1, #29
   15630:	d000      	beq.n	15634 <__aeabi_ddiv+0x3e4>
   15632:	e09e      	b.n	15772 <__aeabi_ddiv+0x522>
   15634:	465a      	mov	r2, fp
   15636:	01d2      	lsls	r2, r2, #7
   15638:	d506      	bpl.n	15648 <__aeabi_ddiv+0x3f8>
   1563a:	465a      	mov	r2, fp
   1563c:	4b9b      	ldr	r3, [pc, #620]	; (158ac <__aeabi_ddiv+0x65c>)
   1563e:	401a      	ands	r2, r3
   15640:	2380      	movs	r3, #128	; 0x80
   15642:	4693      	mov	fp, r2
   15644:	00db      	lsls	r3, r3, #3
   15646:	18e3      	adds	r3, r4, r3
   15648:	4a99      	ldr	r2, [pc, #612]	; (158b0 <__aeabi_ddiv+0x660>)
   1564a:	4293      	cmp	r3, r2
   1564c:	dd68      	ble.n	15720 <__aeabi_ddiv+0x4d0>
   1564e:	2301      	movs	r3, #1
   15650:	9a02      	ldr	r2, [sp, #8]
   15652:	4c98      	ldr	r4, [pc, #608]	; (158b4 <__aeabi_ddiv+0x664>)
   15654:	401a      	ands	r2, r3
   15656:	2300      	movs	r3, #0
   15658:	4694      	mov	ip, r2
   1565a:	4698      	mov	r8, r3
   1565c:	2200      	movs	r2, #0
   1565e:	e6c5      	b.n	153ec <__aeabi_ddiv+0x19c>
   15660:	2280      	movs	r2, #128	; 0x80
   15662:	464b      	mov	r3, r9
   15664:	0312      	lsls	r2, r2, #12
   15666:	4213      	tst	r3, r2
   15668:	d00a      	beq.n	15680 <__aeabi_ddiv+0x430>
   1566a:	465b      	mov	r3, fp
   1566c:	4213      	tst	r3, r2
   1566e:	d106      	bne.n	1567e <__aeabi_ddiv+0x42e>
   15670:	431a      	orrs	r2, r3
   15672:	0312      	lsls	r2, r2, #12
   15674:	0b12      	lsrs	r2, r2, #12
   15676:	46ac      	mov	ip, r5
   15678:	4688      	mov	r8, r1
   1567a:	4c8e      	ldr	r4, [pc, #568]	; (158b4 <__aeabi_ddiv+0x664>)
   1567c:	e6b6      	b.n	153ec <__aeabi_ddiv+0x19c>
   1567e:	464b      	mov	r3, r9
   15680:	431a      	orrs	r2, r3
   15682:	0312      	lsls	r2, r2, #12
   15684:	0b12      	lsrs	r2, r2, #12
   15686:	46bc      	mov	ip, r7
   15688:	4c8a      	ldr	r4, [pc, #552]	; (158b4 <__aeabi_ddiv+0x664>)
   1568a:	e6af      	b.n	153ec <__aeabi_ddiv+0x19c>
   1568c:	0003      	movs	r3, r0
   1568e:	465a      	mov	r2, fp
   15690:	3b28      	subs	r3, #40	; 0x28
   15692:	409a      	lsls	r2, r3
   15694:	2300      	movs	r3, #0
   15696:	4691      	mov	r9, r2
   15698:	4698      	mov	r8, r3
   1569a:	e657      	b.n	1534c <__aeabi_ddiv+0xfc>
   1569c:	4658      	mov	r0, fp
   1569e:	f001 f92b 	bl	168f8 <__clzsi2>
   156a2:	3020      	adds	r0, #32
   156a4:	e640      	b.n	15328 <__aeabi_ddiv+0xd8>
   156a6:	0003      	movs	r3, r0
   156a8:	4652      	mov	r2, sl
   156aa:	3b28      	subs	r3, #40	; 0x28
   156ac:	409a      	lsls	r2, r3
   156ae:	2100      	movs	r1, #0
   156b0:	4693      	mov	fp, r2
   156b2:	e677      	b.n	153a4 <__aeabi_ddiv+0x154>
   156b4:	f001 f920 	bl	168f8 <__clzsi2>
   156b8:	3020      	adds	r0, #32
   156ba:	e65f      	b.n	1537c <__aeabi_ddiv+0x12c>
   156bc:	4588      	cmp	r8, r1
   156be:	d200      	bcs.n	156c2 <__aeabi_ddiv+0x472>
   156c0:	e6c7      	b.n	15452 <__aeabi_ddiv+0x202>
   156c2:	464b      	mov	r3, r9
   156c4:	07de      	lsls	r6, r3, #31
   156c6:	085d      	lsrs	r5, r3, #1
   156c8:	4643      	mov	r3, r8
   156ca:	085b      	lsrs	r3, r3, #1
   156cc:	431e      	orrs	r6, r3
   156ce:	4643      	mov	r3, r8
   156d0:	07db      	lsls	r3, r3, #31
   156d2:	469a      	mov	sl, r3
   156d4:	e6c2      	b.n	1545c <__aeabi_ddiv+0x20c>
   156d6:	2500      	movs	r5, #0
   156d8:	4592      	cmp	sl, r2
   156da:	d300      	bcc.n	156de <__aeabi_ddiv+0x48e>
   156dc:	e733      	b.n	15546 <__aeabi_ddiv+0x2f6>
   156de:	9e03      	ldr	r6, [sp, #12]
   156e0:	4659      	mov	r1, fp
   156e2:	46b4      	mov	ip, r6
   156e4:	44e2      	add	sl, ip
   156e6:	45b2      	cmp	sl, r6
   156e8:	41ad      	sbcs	r5, r5
   156ea:	426d      	negs	r5, r5
   156ec:	4445      	add	r5, r8
   156ee:	18eb      	adds	r3, r5, r3
   156f0:	3901      	subs	r1, #1
   156f2:	4598      	cmp	r8, r3
   156f4:	d207      	bcs.n	15706 <__aeabi_ddiv+0x4b6>
   156f6:	4298      	cmp	r0, r3
   156f8:	d900      	bls.n	156fc <__aeabi_ddiv+0x4ac>
   156fa:	e07f      	b.n	157fc <__aeabi_ddiv+0x5ac>
   156fc:	d100      	bne.n	15700 <__aeabi_ddiv+0x4b0>
   156fe:	e0bc      	b.n	1587a <__aeabi_ddiv+0x62a>
   15700:	1a1d      	subs	r5, r3, r0
   15702:	468b      	mov	fp, r1
   15704:	e71f      	b.n	15546 <__aeabi_ddiv+0x2f6>
   15706:	4598      	cmp	r8, r3
   15708:	d1fa      	bne.n	15700 <__aeabi_ddiv+0x4b0>
   1570a:	9d03      	ldr	r5, [sp, #12]
   1570c:	4555      	cmp	r5, sl
   1570e:	d9f2      	bls.n	156f6 <__aeabi_ddiv+0x4a6>
   15710:	4643      	mov	r3, r8
   15712:	468b      	mov	fp, r1
   15714:	1a1d      	subs	r5, r3, r0
   15716:	e716      	b.n	15546 <__aeabi_ddiv+0x2f6>
   15718:	469b      	mov	fp, r3
   1571a:	e6ca      	b.n	154b2 <__aeabi_ddiv+0x262>
   1571c:	0015      	movs	r5, r2
   1571e:	e6e7      	b.n	154f0 <__aeabi_ddiv+0x2a0>
   15720:	465a      	mov	r2, fp
   15722:	08c9      	lsrs	r1, r1, #3
   15724:	0752      	lsls	r2, r2, #29
   15726:	430a      	orrs	r2, r1
   15728:	055b      	lsls	r3, r3, #21
   1572a:	4690      	mov	r8, r2
   1572c:	0d5c      	lsrs	r4, r3, #21
   1572e:	465a      	mov	r2, fp
   15730:	2301      	movs	r3, #1
   15732:	9902      	ldr	r1, [sp, #8]
   15734:	0252      	lsls	r2, r2, #9
   15736:	4019      	ands	r1, r3
   15738:	0b12      	lsrs	r2, r2, #12
   1573a:	468c      	mov	ip, r1
   1573c:	e656      	b.n	153ec <__aeabi_ddiv+0x19c>
   1573e:	2b00      	cmp	r3, #0
   15740:	d100      	bne.n	15744 <__aeabi_ddiv+0x4f4>
   15742:	e76f      	b.n	15624 <__aeabi_ddiv+0x3d4>
   15744:	4446      	add	r6, r8
   15746:	1e4a      	subs	r2, r1, #1
   15748:	45b0      	cmp	r8, r6
   1574a:	d929      	bls.n	157a0 <__aeabi_ddiv+0x550>
   1574c:	0011      	movs	r1, r2
   1574e:	4286      	cmp	r6, r0
   15750:	d000      	beq.n	15754 <__aeabi_ddiv+0x504>
   15752:	e765      	b.n	15620 <__aeabi_ddiv+0x3d0>
   15754:	9a03      	ldr	r2, [sp, #12]
   15756:	4293      	cmp	r3, r2
   15758:	d000      	beq.n	1575c <__aeabi_ddiv+0x50c>
   1575a:	e761      	b.n	15620 <__aeabi_ddiv+0x3d0>
   1575c:	e762      	b.n	15624 <__aeabi_ddiv+0x3d4>
   1575e:	2101      	movs	r1, #1
   15760:	4249      	negs	r1, r1
   15762:	2001      	movs	r0, #1
   15764:	1ac2      	subs	r2, r0, r3
   15766:	2a38      	cmp	r2, #56	; 0x38
   15768:	dd21      	ble.n	157ae <__aeabi_ddiv+0x55e>
   1576a:	9b02      	ldr	r3, [sp, #8]
   1576c:	4003      	ands	r3, r0
   1576e:	469c      	mov	ip, r3
   15770:	e638      	b.n	153e4 <__aeabi_ddiv+0x194>
   15772:	220f      	movs	r2, #15
   15774:	400a      	ands	r2, r1
   15776:	2a04      	cmp	r2, #4
   15778:	d100      	bne.n	1577c <__aeabi_ddiv+0x52c>
   1577a:	e75b      	b.n	15634 <__aeabi_ddiv+0x3e4>
   1577c:	000a      	movs	r2, r1
   1577e:	1d11      	adds	r1, r2, #4
   15780:	4291      	cmp	r1, r2
   15782:	4192      	sbcs	r2, r2
   15784:	4252      	negs	r2, r2
   15786:	4493      	add	fp, r2
   15788:	e754      	b.n	15634 <__aeabi_ddiv+0x3e4>
   1578a:	4b47      	ldr	r3, [pc, #284]	; (158a8 <__aeabi_ddiv+0x658>)
   1578c:	18e3      	adds	r3, r4, r3
   1578e:	2b00      	cmp	r3, #0
   15790:	dde5      	ble.n	1575e <__aeabi_ddiv+0x50e>
   15792:	2201      	movs	r2, #1
   15794:	4252      	negs	r2, r2
   15796:	e7f2      	b.n	1577e <__aeabi_ddiv+0x52e>
   15798:	001d      	movs	r5, r3
   1579a:	e6fa      	b.n	15592 <__aeabi_ddiv+0x342>
   1579c:	469a      	mov	sl, r3
   1579e:	e71c      	b.n	155da <__aeabi_ddiv+0x38a>
   157a0:	42b0      	cmp	r0, r6
   157a2:	d839      	bhi.n	15818 <__aeabi_ddiv+0x5c8>
   157a4:	d06e      	beq.n	15884 <__aeabi_ddiv+0x634>
   157a6:	0011      	movs	r1, r2
   157a8:	e73a      	b.n	15620 <__aeabi_ddiv+0x3d0>
   157aa:	9302      	str	r3, [sp, #8]
   157ac:	e73a      	b.n	15624 <__aeabi_ddiv+0x3d4>
   157ae:	2a1f      	cmp	r2, #31
   157b0:	dc3c      	bgt.n	1582c <__aeabi_ddiv+0x5dc>
   157b2:	2320      	movs	r3, #32
   157b4:	1a9b      	subs	r3, r3, r2
   157b6:	000c      	movs	r4, r1
   157b8:	4658      	mov	r0, fp
   157ba:	4099      	lsls	r1, r3
   157bc:	4098      	lsls	r0, r3
   157be:	1e4b      	subs	r3, r1, #1
   157c0:	4199      	sbcs	r1, r3
   157c2:	465b      	mov	r3, fp
   157c4:	40d4      	lsrs	r4, r2
   157c6:	40d3      	lsrs	r3, r2
   157c8:	4320      	orrs	r0, r4
   157ca:	4308      	orrs	r0, r1
   157cc:	001a      	movs	r2, r3
   157ce:	0743      	lsls	r3, r0, #29
   157d0:	d009      	beq.n	157e6 <__aeabi_ddiv+0x596>
   157d2:	230f      	movs	r3, #15
   157d4:	4003      	ands	r3, r0
   157d6:	2b04      	cmp	r3, #4
   157d8:	d005      	beq.n	157e6 <__aeabi_ddiv+0x596>
   157da:	0001      	movs	r1, r0
   157dc:	1d08      	adds	r0, r1, #4
   157de:	4288      	cmp	r0, r1
   157e0:	419b      	sbcs	r3, r3
   157e2:	425b      	negs	r3, r3
   157e4:	18d2      	adds	r2, r2, r3
   157e6:	0213      	lsls	r3, r2, #8
   157e8:	d53a      	bpl.n	15860 <__aeabi_ddiv+0x610>
   157ea:	2301      	movs	r3, #1
   157ec:	9a02      	ldr	r2, [sp, #8]
   157ee:	2401      	movs	r4, #1
   157f0:	401a      	ands	r2, r3
   157f2:	2300      	movs	r3, #0
   157f4:	4694      	mov	ip, r2
   157f6:	4698      	mov	r8, r3
   157f8:	2200      	movs	r2, #0
   157fa:	e5f7      	b.n	153ec <__aeabi_ddiv+0x19c>
   157fc:	2102      	movs	r1, #2
   157fe:	4249      	negs	r1, r1
   15800:	468c      	mov	ip, r1
   15802:	9d03      	ldr	r5, [sp, #12]
   15804:	44e3      	add	fp, ip
   15806:	46ac      	mov	ip, r5
   15808:	44e2      	add	sl, ip
   1580a:	45aa      	cmp	sl, r5
   1580c:	41ad      	sbcs	r5, r5
   1580e:	426d      	negs	r5, r5
   15810:	4445      	add	r5, r8
   15812:	18ed      	adds	r5, r5, r3
   15814:	1a2d      	subs	r5, r5, r0
   15816:	e696      	b.n	15546 <__aeabi_ddiv+0x2f6>
   15818:	1e8a      	subs	r2, r1, #2
   1581a:	9903      	ldr	r1, [sp, #12]
   1581c:	004d      	lsls	r5, r1, #1
   1581e:	428d      	cmp	r5, r1
   15820:	4189      	sbcs	r1, r1
   15822:	4249      	negs	r1, r1
   15824:	4441      	add	r1, r8
   15826:	1876      	adds	r6, r6, r1
   15828:	9503      	str	r5, [sp, #12]
   1582a:	e78f      	b.n	1574c <__aeabi_ddiv+0x4fc>
   1582c:	201f      	movs	r0, #31
   1582e:	4240      	negs	r0, r0
   15830:	1ac3      	subs	r3, r0, r3
   15832:	4658      	mov	r0, fp
   15834:	40d8      	lsrs	r0, r3
   15836:	0003      	movs	r3, r0
   15838:	2a20      	cmp	r2, #32
   1583a:	d028      	beq.n	1588e <__aeabi_ddiv+0x63e>
   1583c:	2040      	movs	r0, #64	; 0x40
   1583e:	465d      	mov	r5, fp
   15840:	1a82      	subs	r2, r0, r2
   15842:	4095      	lsls	r5, r2
   15844:	4329      	orrs	r1, r5
   15846:	1e4a      	subs	r2, r1, #1
   15848:	4191      	sbcs	r1, r2
   1584a:	4319      	orrs	r1, r3
   1584c:	2307      	movs	r3, #7
   1584e:	2200      	movs	r2, #0
   15850:	400b      	ands	r3, r1
   15852:	d009      	beq.n	15868 <__aeabi_ddiv+0x618>
   15854:	230f      	movs	r3, #15
   15856:	2200      	movs	r2, #0
   15858:	400b      	ands	r3, r1
   1585a:	0008      	movs	r0, r1
   1585c:	2b04      	cmp	r3, #4
   1585e:	d1bd      	bne.n	157dc <__aeabi_ddiv+0x58c>
   15860:	0001      	movs	r1, r0
   15862:	0753      	lsls	r3, r2, #29
   15864:	0252      	lsls	r2, r2, #9
   15866:	0b12      	lsrs	r2, r2, #12
   15868:	08c9      	lsrs	r1, r1, #3
   1586a:	4319      	orrs	r1, r3
   1586c:	2301      	movs	r3, #1
   1586e:	4688      	mov	r8, r1
   15870:	9902      	ldr	r1, [sp, #8]
   15872:	2400      	movs	r4, #0
   15874:	4019      	ands	r1, r3
   15876:	468c      	mov	ip, r1
   15878:	e5b8      	b.n	153ec <__aeabi_ddiv+0x19c>
   1587a:	4552      	cmp	r2, sl
   1587c:	d8be      	bhi.n	157fc <__aeabi_ddiv+0x5ac>
   1587e:	468b      	mov	fp, r1
   15880:	2500      	movs	r5, #0
   15882:	e660      	b.n	15546 <__aeabi_ddiv+0x2f6>
   15884:	9d03      	ldr	r5, [sp, #12]
   15886:	429d      	cmp	r5, r3
   15888:	d3c6      	bcc.n	15818 <__aeabi_ddiv+0x5c8>
   1588a:	0011      	movs	r1, r2
   1588c:	e762      	b.n	15754 <__aeabi_ddiv+0x504>
   1588e:	2500      	movs	r5, #0
   15890:	e7d8      	b.n	15844 <__aeabi_ddiv+0x5f4>
   15892:	2280      	movs	r2, #128	; 0x80
   15894:	465b      	mov	r3, fp
   15896:	0312      	lsls	r2, r2, #12
   15898:	431a      	orrs	r2, r3
   1589a:	9b01      	ldr	r3, [sp, #4]
   1589c:	0312      	lsls	r2, r2, #12
   1589e:	0b12      	lsrs	r2, r2, #12
   158a0:	469c      	mov	ip, r3
   158a2:	4688      	mov	r8, r1
   158a4:	4c03      	ldr	r4, [pc, #12]	; (158b4 <__aeabi_ddiv+0x664>)
   158a6:	e5a1      	b.n	153ec <__aeabi_ddiv+0x19c>
   158a8:	000003ff 	.word	0x000003ff
   158ac:	feffffff 	.word	0xfeffffff
   158b0:	000007fe 	.word	0x000007fe
   158b4:	000007ff 	.word	0x000007ff

000158b8 <__eqdf2>:
   158b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   158ba:	464f      	mov	r7, r9
   158bc:	4646      	mov	r6, r8
   158be:	46d6      	mov	lr, sl
   158c0:	005c      	lsls	r4, r3, #1
   158c2:	b5c0      	push	{r6, r7, lr}
   158c4:	031f      	lsls	r7, r3, #12
   158c6:	0fdb      	lsrs	r3, r3, #31
   158c8:	469a      	mov	sl, r3
   158ca:	4b17      	ldr	r3, [pc, #92]	; (15928 <__eqdf2+0x70>)
   158cc:	030e      	lsls	r6, r1, #12
   158ce:	004d      	lsls	r5, r1, #1
   158d0:	4684      	mov	ip, r0
   158d2:	4680      	mov	r8, r0
   158d4:	0b36      	lsrs	r6, r6, #12
   158d6:	0d6d      	lsrs	r5, r5, #21
   158d8:	0fc9      	lsrs	r1, r1, #31
   158da:	4691      	mov	r9, r2
   158dc:	0b3f      	lsrs	r7, r7, #12
   158de:	0d64      	lsrs	r4, r4, #21
   158e0:	2001      	movs	r0, #1
   158e2:	429d      	cmp	r5, r3
   158e4:	d008      	beq.n	158f8 <__eqdf2+0x40>
   158e6:	429c      	cmp	r4, r3
   158e8:	d001      	beq.n	158ee <__eqdf2+0x36>
   158ea:	42a5      	cmp	r5, r4
   158ec:	d00b      	beq.n	15906 <__eqdf2+0x4e>
   158ee:	bc1c      	pop	{r2, r3, r4}
   158f0:	4690      	mov	r8, r2
   158f2:	4699      	mov	r9, r3
   158f4:	46a2      	mov	sl, r4
   158f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   158f8:	4663      	mov	r3, ip
   158fa:	4333      	orrs	r3, r6
   158fc:	d1f7      	bne.n	158ee <__eqdf2+0x36>
   158fe:	42ac      	cmp	r4, r5
   15900:	d1f5      	bne.n	158ee <__eqdf2+0x36>
   15902:	433a      	orrs	r2, r7
   15904:	d1f3      	bne.n	158ee <__eqdf2+0x36>
   15906:	2001      	movs	r0, #1
   15908:	42be      	cmp	r6, r7
   1590a:	d1f0      	bne.n	158ee <__eqdf2+0x36>
   1590c:	45c8      	cmp	r8, r9
   1590e:	d1ee      	bne.n	158ee <__eqdf2+0x36>
   15910:	4551      	cmp	r1, sl
   15912:	d007      	beq.n	15924 <__eqdf2+0x6c>
   15914:	2d00      	cmp	r5, #0
   15916:	d1ea      	bne.n	158ee <__eqdf2+0x36>
   15918:	4663      	mov	r3, ip
   1591a:	431e      	orrs	r6, r3
   1591c:	0030      	movs	r0, r6
   1591e:	1e46      	subs	r6, r0, #1
   15920:	41b0      	sbcs	r0, r6
   15922:	e7e4      	b.n	158ee <__eqdf2+0x36>
   15924:	2000      	movs	r0, #0
   15926:	e7e2      	b.n	158ee <__eqdf2+0x36>
   15928:	000007ff 	.word	0x000007ff

0001592c <__gedf2>:
   1592c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1592e:	4645      	mov	r5, r8
   15930:	46de      	mov	lr, fp
   15932:	4657      	mov	r7, sl
   15934:	464e      	mov	r6, r9
   15936:	b5e0      	push	{r5, r6, r7, lr}
   15938:	031f      	lsls	r7, r3, #12
   1593a:	0b3d      	lsrs	r5, r7, #12
   1593c:	4f2c      	ldr	r7, [pc, #176]	; (159f0 <__gedf2+0xc4>)
   1593e:	030e      	lsls	r6, r1, #12
   15940:	004c      	lsls	r4, r1, #1
   15942:	46ab      	mov	fp, r5
   15944:	005d      	lsls	r5, r3, #1
   15946:	4684      	mov	ip, r0
   15948:	0b36      	lsrs	r6, r6, #12
   1594a:	0d64      	lsrs	r4, r4, #21
   1594c:	0fc9      	lsrs	r1, r1, #31
   1594e:	4690      	mov	r8, r2
   15950:	0d6d      	lsrs	r5, r5, #21
   15952:	0fdb      	lsrs	r3, r3, #31
   15954:	42bc      	cmp	r4, r7
   15956:	d02a      	beq.n	159ae <__gedf2+0x82>
   15958:	4f25      	ldr	r7, [pc, #148]	; (159f0 <__gedf2+0xc4>)
   1595a:	42bd      	cmp	r5, r7
   1595c:	d02d      	beq.n	159ba <__gedf2+0x8e>
   1595e:	2c00      	cmp	r4, #0
   15960:	d10f      	bne.n	15982 <__gedf2+0x56>
   15962:	4330      	orrs	r0, r6
   15964:	0007      	movs	r7, r0
   15966:	4681      	mov	r9, r0
   15968:	4278      	negs	r0, r7
   1596a:	4178      	adcs	r0, r7
   1596c:	b2c0      	uxtb	r0, r0
   1596e:	2d00      	cmp	r5, #0
   15970:	d117      	bne.n	159a2 <__gedf2+0x76>
   15972:	465f      	mov	r7, fp
   15974:	433a      	orrs	r2, r7
   15976:	d114      	bne.n	159a2 <__gedf2+0x76>
   15978:	464b      	mov	r3, r9
   1597a:	2000      	movs	r0, #0
   1597c:	2b00      	cmp	r3, #0
   1597e:	d00a      	beq.n	15996 <__gedf2+0x6a>
   15980:	e006      	b.n	15990 <__gedf2+0x64>
   15982:	2d00      	cmp	r5, #0
   15984:	d102      	bne.n	1598c <__gedf2+0x60>
   15986:	4658      	mov	r0, fp
   15988:	4302      	orrs	r2, r0
   1598a:	d001      	beq.n	15990 <__gedf2+0x64>
   1598c:	4299      	cmp	r1, r3
   1598e:	d018      	beq.n	159c2 <__gedf2+0x96>
   15990:	4248      	negs	r0, r1
   15992:	2101      	movs	r1, #1
   15994:	4308      	orrs	r0, r1
   15996:	bc3c      	pop	{r2, r3, r4, r5}
   15998:	4690      	mov	r8, r2
   1599a:	4699      	mov	r9, r3
   1599c:	46a2      	mov	sl, r4
   1599e:	46ab      	mov	fp, r5
   159a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   159a2:	2800      	cmp	r0, #0
   159a4:	d0f2      	beq.n	1598c <__gedf2+0x60>
   159a6:	2001      	movs	r0, #1
   159a8:	3b01      	subs	r3, #1
   159aa:	4318      	orrs	r0, r3
   159ac:	e7f3      	b.n	15996 <__gedf2+0x6a>
   159ae:	0037      	movs	r7, r6
   159b0:	4307      	orrs	r7, r0
   159b2:	d0d1      	beq.n	15958 <__gedf2+0x2c>
   159b4:	2002      	movs	r0, #2
   159b6:	4240      	negs	r0, r0
   159b8:	e7ed      	b.n	15996 <__gedf2+0x6a>
   159ba:	465f      	mov	r7, fp
   159bc:	4317      	orrs	r7, r2
   159be:	d0ce      	beq.n	1595e <__gedf2+0x32>
   159c0:	e7f8      	b.n	159b4 <__gedf2+0x88>
   159c2:	42ac      	cmp	r4, r5
   159c4:	dce4      	bgt.n	15990 <__gedf2+0x64>
   159c6:	da03      	bge.n	159d0 <__gedf2+0xa4>
   159c8:	1e48      	subs	r0, r1, #1
   159ca:	2101      	movs	r1, #1
   159cc:	4308      	orrs	r0, r1
   159ce:	e7e2      	b.n	15996 <__gedf2+0x6a>
   159d0:	455e      	cmp	r6, fp
   159d2:	d8dd      	bhi.n	15990 <__gedf2+0x64>
   159d4:	d006      	beq.n	159e4 <__gedf2+0xb8>
   159d6:	2000      	movs	r0, #0
   159d8:	455e      	cmp	r6, fp
   159da:	d2dc      	bcs.n	15996 <__gedf2+0x6a>
   159dc:	2301      	movs	r3, #1
   159de:	1e48      	subs	r0, r1, #1
   159e0:	4318      	orrs	r0, r3
   159e2:	e7d8      	b.n	15996 <__gedf2+0x6a>
   159e4:	45c4      	cmp	ip, r8
   159e6:	d8d3      	bhi.n	15990 <__gedf2+0x64>
   159e8:	2000      	movs	r0, #0
   159ea:	45c4      	cmp	ip, r8
   159ec:	d3f6      	bcc.n	159dc <__gedf2+0xb0>
   159ee:	e7d2      	b.n	15996 <__gedf2+0x6a>
   159f0:	000007ff 	.word	0x000007ff

000159f4 <__ledf2>:
   159f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   159f6:	464e      	mov	r6, r9
   159f8:	4645      	mov	r5, r8
   159fa:	46de      	mov	lr, fp
   159fc:	4657      	mov	r7, sl
   159fe:	005c      	lsls	r4, r3, #1
   15a00:	b5e0      	push	{r5, r6, r7, lr}
   15a02:	031f      	lsls	r7, r3, #12
   15a04:	0fdb      	lsrs	r3, r3, #31
   15a06:	4699      	mov	r9, r3
   15a08:	4b2a      	ldr	r3, [pc, #168]	; (15ab4 <__ledf2+0xc0>)
   15a0a:	030e      	lsls	r6, r1, #12
   15a0c:	004d      	lsls	r5, r1, #1
   15a0e:	0fc9      	lsrs	r1, r1, #31
   15a10:	4684      	mov	ip, r0
   15a12:	0b36      	lsrs	r6, r6, #12
   15a14:	0d6d      	lsrs	r5, r5, #21
   15a16:	468b      	mov	fp, r1
   15a18:	4690      	mov	r8, r2
   15a1a:	0b3f      	lsrs	r7, r7, #12
   15a1c:	0d64      	lsrs	r4, r4, #21
   15a1e:	429d      	cmp	r5, r3
   15a20:	d020      	beq.n	15a64 <__ledf2+0x70>
   15a22:	4b24      	ldr	r3, [pc, #144]	; (15ab4 <__ledf2+0xc0>)
   15a24:	429c      	cmp	r4, r3
   15a26:	d022      	beq.n	15a6e <__ledf2+0x7a>
   15a28:	2d00      	cmp	r5, #0
   15a2a:	d112      	bne.n	15a52 <__ledf2+0x5e>
   15a2c:	4330      	orrs	r0, r6
   15a2e:	4243      	negs	r3, r0
   15a30:	4143      	adcs	r3, r0
   15a32:	b2db      	uxtb	r3, r3
   15a34:	2c00      	cmp	r4, #0
   15a36:	d01f      	beq.n	15a78 <__ledf2+0x84>
   15a38:	2b00      	cmp	r3, #0
   15a3a:	d00c      	beq.n	15a56 <__ledf2+0x62>
   15a3c:	464b      	mov	r3, r9
   15a3e:	2001      	movs	r0, #1
   15a40:	3b01      	subs	r3, #1
   15a42:	4303      	orrs	r3, r0
   15a44:	0018      	movs	r0, r3
   15a46:	bc3c      	pop	{r2, r3, r4, r5}
   15a48:	4690      	mov	r8, r2
   15a4a:	4699      	mov	r9, r3
   15a4c:	46a2      	mov	sl, r4
   15a4e:	46ab      	mov	fp, r5
   15a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15a52:	2c00      	cmp	r4, #0
   15a54:	d016      	beq.n	15a84 <__ledf2+0x90>
   15a56:	45cb      	cmp	fp, r9
   15a58:	d017      	beq.n	15a8a <__ledf2+0x96>
   15a5a:	465b      	mov	r3, fp
   15a5c:	4259      	negs	r1, r3
   15a5e:	2301      	movs	r3, #1
   15a60:	430b      	orrs	r3, r1
   15a62:	e7ef      	b.n	15a44 <__ledf2+0x50>
   15a64:	0031      	movs	r1, r6
   15a66:	2302      	movs	r3, #2
   15a68:	4301      	orrs	r1, r0
   15a6a:	d1eb      	bne.n	15a44 <__ledf2+0x50>
   15a6c:	e7d9      	b.n	15a22 <__ledf2+0x2e>
   15a6e:	0039      	movs	r1, r7
   15a70:	2302      	movs	r3, #2
   15a72:	4311      	orrs	r1, r2
   15a74:	d1e6      	bne.n	15a44 <__ledf2+0x50>
   15a76:	e7d7      	b.n	15a28 <__ledf2+0x34>
   15a78:	433a      	orrs	r2, r7
   15a7a:	d1dd      	bne.n	15a38 <__ledf2+0x44>
   15a7c:	2300      	movs	r3, #0
   15a7e:	2800      	cmp	r0, #0
   15a80:	d0e0      	beq.n	15a44 <__ledf2+0x50>
   15a82:	e7ea      	b.n	15a5a <__ledf2+0x66>
   15a84:	433a      	orrs	r2, r7
   15a86:	d1e6      	bne.n	15a56 <__ledf2+0x62>
   15a88:	e7e7      	b.n	15a5a <__ledf2+0x66>
   15a8a:	42a5      	cmp	r5, r4
   15a8c:	dce5      	bgt.n	15a5a <__ledf2+0x66>
   15a8e:	db05      	blt.n	15a9c <__ledf2+0xa8>
   15a90:	42be      	cmp	r6, r7
   15a92:	d8e2      	bhi.n	15a5a <__ledf2+0x66>
   15a94:	d007      	beq.n	15aa6 <__ledf2+0xb2>
   15a96:	2300      	movs	r3, #0
   15a98:	42be      	cmp	r6, r7
   15a9a:	d2d3      	bcs.n	15a44 <__ledf2+0x50>
   15a9c:	4659      	mov	r1, fp
   15a9e:	2301      	movs	r3, #1
   15aa0:	3901      	subs	r1, #1
   15aa2:	430b      	orrs	r3, r1
   15aa4:	e7ce      	b.n	15a44 <__ledf2+0x50>
   15aa6:	45c4      	cmp	ip, r8
   15aa8:	d8d7      	bhi.n	15a5a <__ledf2+0x66>
   15aaa:	2300      	movs	r3, #0
   15aac:	45c4      	cmp	ip, r8
   15aae:	d3f5      	bcc.n	15a9c <__ledf2+0xa8>
   15ab0:	e7c8      	b.n	15a44 <__ledf2+0x50>
   15ab2:	46c0      	nop			; (mov r8, r8)
   15ab4:	000007ff 	.word	0x000007ff

00015ab8 <__aeabi_dmul>:
   15ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
   15aba:	4657      	mov	r7, sl
   15abc:	4645      	mov	r5, r8
   15abe:	46de      	mov	lr, fp
   15ac0:	464e      	mov	r6, r9
   15ac2:	b5e0      	push	{r5, r6, r7, lr}
   15ac4:	030c      	lsls	r4, r1, #12
   15ac6:	4698      	mov	r8, r3
   15ac8:	004e      	lsls	r6, r1, #1
   15aca:	0b23      	lsrs	r3, r4, #12
   15acc:	b087      	sub	sp, #28
   15ace:	0007      	movs	r7, r0
   15ad0:	4692      	mov	sl, r2
   15ad2:	469b      	mov	fp, r3
   15ad4:	0d76      	lsrs	r6, r6, #21
   15ad6:	0fcd      	lsrs	r5, r1, #31
   15ad8:	2e00      	cmp	r6, #0
   15ada:	d06b      	beq.n	15bb4 <__aeabi_dmul+0xfc>
   15adc:	4b6d      	ldr	r3, [pc, #436]	; (15c94 <__aeabi_dmul+0x1dc>)
   15ade:	429e      	cmp	r6, r3
   15ae0:	d035      	beq.n	15b4e <__aeabi_dmul+0x96>
   15ae2:	2480      	movs	r4, #128	; 0x80
   15ae4:	465b      	mov	r3, fp
   15ae6:	0f42      	lsrs	r2, r0, #29
   15ae8:	0424      	lsls	r4, r4, #16
   15aea:	00db      	lsls	r3, r3, #3
   15aec:	4314      	orrs	r4, r2
   15aee:	431c      	orrs	r4, r3
   15af0:	00c3      	lsls	r3, r0, #3
   15af2:	4699      	mov	r9, r3
   15af4:	4b68      	ldr	r3, [pc, #416]	; (15c98 <__aeabi_dmul+0x1e0>)
   15af6:	46a3      	mov	fp, r4
   15af8:	469c      	mov	ip, r3
   15afa:	2300      	movs	r3, #0
   15afc:	2700      	movs	r7, #0
   15afe:	4466      	add	r6, ip
   15b00:	9302      	str	r3, [sp, #8]
   15b02:	4643      	mov	r3, r8
   15b04:	031c      	lsls	r4, r3, #12
   15b06:	005a      	lsls	r2, r3, #1
   15b08:	0fdb      	lsrs	r3, r3, #31
   15b0a:	4650      	mov	r0, sl
   15b0c:	0b24      	lsrs	r4, r4, #12
   15b0e:	0d52      	lsrs	r2, r2, #21
   15b10:	4698      	mov	r8, r3
   15b12:	d100      	bne.n	15b16 <__aeabi_dmul+0x5e>
   15b14:	e076      	b.n	15c04 <__aeabi_dmul+0x14c>
   15b16:	4b5f      	ldr	r3, [pc, #380]	; (15c94 <__aeabi_dmul+0x1dc>)
   15b18:	429a      	cmp	r2, r3
   15b1a:	d06d      	beq.n	15bf8 <__aeabi_dmul+0x140>
   15b1c:	2380      	movs	r3, #128	; 0x80
   15b1e:	0f41      	lsrs	r1, r0, #29
   15b20:	041b      	lsls	r3, r3, #16
   15b22:	430b      	orrs	r3, r1
   15b24:	495c      	ldr	r1, [pc, #368]	; (15c98 <__aeabi_dmul+0x1e0>)
   15b26:	00e4      	lsls	r4, r4, #3
   15b28:	468c      	mov	ip, r1
   15b2a:	431c      	orrs	r4, r3
   15b2c:	00c3      	lsls	r3, r0, #3
   15b2e:	2000      	movs	r0, #0
   15b30:	4462      	add	r2, ip
   15b32:	4641      	mov	r1, r8
   15b34:	18b6      	adds	r6, r6, r2
   15b36:	4069      	eors	r1, r5
   15b38:	1c72      	adds	r2, r6, #1
   15b3a:	9101      	str	r1, [sp, #4]
   15b3c:	4694      	mov	ip, r2
   15b3e:	4307      	orrs	r7, r0
   15b40:	2f0f      	cmp	r7, #15
   15b42:	d900      	bls.n	15b46 <__aeabi_dmul+0x8e>
   15b44:	e0b0      	b.n	15ca8 <__aeabi_dmul+0x1f0>
   15b46:	4a55      	ldr	r2, [pc, #340]	; (15c9c <__aeabi_dmul+0x1e4>)
   15b48:	00bf      	lsls	r7, r7, #2
   15b4a:	59d2      	ldr	r2, [r2, r7]
   15b4c:	4697      	mov	pc, r2
   15b4e:	465b      	mov	r3, fp
   15b50:	4303      	orrs	r3, r0
   15b52:	4699      	mov	r9, r3
   15b54:	d000      	beq.n	15b58 <__aeabi_dmul+0xa0>
   15b56:	e087      	b.n	15c68 <__aeabi_dmul+0x1b0>
   15b58:	2300      	movs	r3, #0
   15b5a:	469b      	mov	fp, r3
   15b5c:	3302      	adds	r3, #2
   15b5e:	2708      	movs	r7, #8
   15b60:	9302      	str	r3, [sp, #8]
   15b62:	e7ce      	b.n	15b02 <__aeabi_dmul+0x4a>
   15b64:	4642      	mov	r2, r8
   15b66:	9201      	str	r2, [sp, #4]
   15b68:	2802      	cmp	r0, #2
   15b6a:	d067      	beq.n	15c3c <__aeabi_dmul+0x184>
   15b6c:	2803      	cmp	r0, #3
   15b6e:	d100      	bne.n	15b72 <__aeabi_dmul+0xba>
   15b70:	e20e      	b.n	15f90 <__aeabi_dmul+0x4d8>
   15b72:	2801      	cmp	r0, #1
   15b74:	d000      	beq.n	15b78 <__aeabi_dmul+0xc0>
   15b76:	e162      	b.n	15e3e <__aeabi_dmul+0x386>
   15b78:	2300      	movs	r3, #0
   15b7a:	2400      	movs	r4, #0
   15b7c:	2200      	movs	r2, #0
   15b7e:	4699      	mov	r9, r3
   15b80:	9901      	ldr	r1, [sp, #4]
   15b82:	4001      	ands	r1, r0
   15b84:	b2cd      	uxtb	r5, r1
   15b86:	2100      	movs	r1, #0
   15b88:	0312      	lsls	r2, r2, #12
   15b8a:	0d0b      	lsrs	r3, r1, #20
   15b8c:	0b12      	lsrs	r2, r2, #12
   15b8e:	051b      	lsls	r3, r3, #20
   15b90:	4313      	orrs	r3, r2
   15b92:	4a43      	ldr	r2, [pc, #268]	; (15ca0 <__aeabi_dmul+0x1e8>)
   15b94:	0524      	lsls	r4, r4, #20
   15b96:	4013      	ands	r3, r2
   15b98:	431c      	orrs	r4, r3
   15b9a:	0064      	lsls	r4, r4, #1
   15b9c:	07ed      	lsls	r5, r5, #31
   15b9e:	0864      	lsrs	r4, r4, #1
   15ba0:	432c      	orrs	r4, r5
   15ba2:	4648      	mov	r0, r9
   15ba4:	0021      	movs	r1, r4
   15ba6:	b007      	add	sp, #28
   15ba8:	bc3c      	pop	{r2, r3, r4, r5}
   15baa:	4690      	mov	r8, r2
   15bac:	4699      	mov	r9, r3
   15bae:	46a2      	mov	sl, r4
   15bb0:	46ab      	mov	fp, r5
   15bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15bb4:	4303      	orrs	r3, r0
   15bb6:	4699      	mov	r9, r3
   15bb8:	d04f      	beq.n	15c5a <__aeabi_dmul+0x1a2>
   15bba:	465b      	mov	r3, fp
   15bbc:	2b00      	cmp	r3, #0
   15bbe:	d100      	bne.n	15bc2 <__aeabi_dmul+0x10a>
   15bc0:	e189      	b.n	15ed6 <__aeabi_dmul+0x41e>
   15bc2:	4658      	mov	r0, fp
   15bc4:	f000 fe98 	bl	168f8 <__clzsi2>
   15bc8:	0003      	movs	r3, r0
   15bca:	3b0b      	subs	r3, #11
   15bcc:	2b1c      	cmp	r3, #28
   15bce:	dd00      	ble.n	15bd2 <__aeabi_dmul+0x11a>
   15bd0:	e17a      	b.n	15ec8 <__aeabi_dmul+0x410>
   15bd2:	221d      	movs	r2, #29
   15bd4:	1ad3      	subs	r3, r2, r3
   15bd6:	003a      	movs	r2, r7
   15bd8:	0001      	movs	r1, r0
   15bda:	465c      	mov	r4, fp
   15bdc:	40da      	lsrs	r2, r3
   15bde:	3908      	subs	r1, #8
   15be0:	408c      	lsls	r4, r1
   15be2:	0013      	movs	r3, r2
   15be4:	408f      	lsls	r7, r1
   15be6:	4323      	orrs	r3, r4
   15be8:	469b      	mov	fp, r3
   15bea:	46b9      	mov	r9, r7
   15bec:	2300      	movs	r3, #0
   15bee:	4e2d      	ldr	r6, [pc, #180]	; (15ca4 <__aeabi_dmul+0x1ec>)
   15bf0:	2700      	movs	r7, #0
   15bf2:	1a36      	subs	r6, r6, r0
   15bf4:	9302      	str	r3, [sp, #8]
   15bf6:	e784      	b.n	15b02 <__aeabi_dmul+0x4a>
   15bf8:	4653      	mov	r3, sl
   15bfa:	4323      	orrs	r3, r4
   15bfc:	d12a      	bne.n	15c54 <__aeabi_dmul+0x19c>
   15bfe:	2400      	movs	r4, #0
   15c00:	2002      	movs	r0, #2
   15c02:	e796      	b.n	15b32 <__aeabi_dmul+0x7a>
   15c04:	4653      	mov	r3, sl
   15c06:	4323      	orrs	r3, r4
   15c08:	d020      	beq.n	15c4c <__aeabi_dmul+0x194>
   15c0a:	2c00      	cmp	r4, #0
   15c0c:	d100      	bne.n	15c10 <__aeabi_dmul+0x158>
   15c0e:	e157      	b.n	15ec0 <__aeabi_dmul+0x408>
   15c10:	0020      	movs	r0, r4
   15c12:	f000 fe71 	bl	168f8 <__clzsi2>
   15c16:	0003      	movs	r3, r0
   15c18:	3b0b      	subs	r3, #11
   15c1a:	2b1c      	cmp	r3, #28
   15c1c:	dd00      	ble.n	15c20 <__aeabi_dmul+0x168>
   15c1e:	e149      	b.n	15eb4 <__aeabi_dmul+0x3fc>
   15c20:	211d      	movs	r1, #29
   15c22:	1acb      	subs	r3, r1, r3
   15c24:	4651      	mov	r1, sl
   15c26:	0002      	movs	r2, r0
   15c28:	40d9      	lsrs	r1, r3
   15c2a:	4653      	mov	r3, sl
   15c2c:	3a08      	subs	r2, #8
   15c2e:	4094      	lsls	r4, r2
   15c30:	4093      	lsls	r3, r2
   15c32:	430c      	orrs	r4, r1
   15c34:	4a1b      	ldr	r2, [pc, #108]	; (15ca4 <__aeabi_dmul+0x1ec>)
   15c36:	1a12      	subs	r2, r2, r0
   15c38:	2000      	movs	r0, #0
   15c3a:	e77a      	b.n	15b32 <__aeabi_dmul+0x7a>
   15c3c:	2501      	movs	r5, #1
   15c3e:	9b01      	ldr	r3, [sp, #4]
   15c40:	4c14      	ldr	r4, [pc, #80]	; (15c94 <__aeabi_dmul+0x1dc>)
   15c42:	401d      	ands	r5, r3
   15c44:	2300      	movs	r3, #0
   15c46:	2200      	movs	r2, #0
   15c48:	4699      	mov	r9, r3
   15c4a:	e79c      	b.n	15b86 <__aeabi_dmul+0xce>
   15c4c:	2400      	movs	r4, #0
   15c4e:	2200      	movs	r2, #0
   15c50:	2001      	movs	r0, #1
   15c52:	e76e      	b.n	15b32 <__aeabi_dmul+0x7a>
   15c54:	4653      	mov	r3, sl
   15c56:	2003      	movs	r0, #3
   15c58:	e76b      	b.n	15b32 <__aeabi_dmul+0x7a>
   15c5a:	2300      	movs	r3, #0
   15c5c:	469b      	mov	fp, r3
   15c5e:	3301      	adds	r3, #1
   15c60:	2704      	movs	r7, #4
   15c62:	2600      	movs	r6, #0
   15c64:	9302      	str	r3, [sp, #8]
   15c66:	e74c      	b.n	15b02 <__aeabi_dmul+0x4a>
   15c68:	2303      	movs	r3, #3
   15c6a:	4681      	mov	r9, r0
   15c6c:	270c      	movs	r7, #12
   15c6e:	9302      	str	r3, [sp, #8]
   15c70:	e747      	b.n	15b02 <__aeabi_dmul+0x4a>
   15c72:	2280      	movs	r2, #128	; 0x80
   15c74:	2300      	movs	r3, #0
   15c76:	2500      	movs	r5, #0
   15c78:	0312      	lsls	r2, r2, #12
   15c7a:	4699      	mov	r9, r3
   15c7c:	4c05      	ldr	r4, [pc, #20]	; (15c94 <__aeabi_dmul+0x1dc>)
   15c7e:	e782      	b.n	15b86 <__aeabi_dmul+0xce>
   15c80:	465c      	mov	r4, fp
   15c82:	464b      	mov	r3, r9
   15c84:	9802      	ldr	r0, [sp, #8]
   15c86:	e76f      	b.n	15b68 <__aeabi_dmul+0xb0>
   15c88:	465c      	mov	r4, fp
   15c8a:	464b      	mov	r3, r9
   15c8c:	9501      	str	r5, [sp, #4]
   15c8e:	9802      	ldr	r0, [sp, #8]
   15c90:	e76a      	b.n	15b68 <__aeabi_dmul+0xb0>
   15c92:	46c0      	nop			; (mov r8, r8)
   15c94:	000007ff 	.word	0x000007ff
   15c98:	fffffc01 	.word	0xfffffc01
   15c9c:	0001940c 	.word	0x0001940c
   15ca0:	800fffff 	.word	0x800fffff
   15ca4:	fffffc0d 	.word	0xfffffc0d
   15ca8:	464a      	mov	r2, r9
   15caa:	4649      	mov	r1, r9
   15cac:	0c17      	lsrs	r7, r2, #16
   15cae:	0c1a      	lsrs	r2, r3, #16
   15cb0:	041b      	lsls	r3, r3, #16
   15cb2:	0c1b      	lsrs	r3, r3, #16
   15cb4:	0408      	lsls	r0, r1, #16
   15cb6:	0019      	movs	r1, r3
   15cb8:	0c00      	lsrs	r0, r0, #16
   15cba:	4341      	muls	r1, r0
   15cbc:	0015      	movs	r5, r2
   15cbe:	4688      	mov	r8, r1
   15cc0:	0019      	movs	r1, r3
   15cc2:	437d      	muls	r5, r7
   15cc4:	4379      	muls	r1, r7
   15cc6:	9503      	str	r5, [sp, #12]
   15cc8:	4689      	mov	r9, r1
   15cca:	0029      	movs	r1, r5
   15ccc:	0015      	movs	r5, r2
   15cce:	4345      	muls	r5, r0
   15cd0:	444d      	add	r5, r9
   15cd2:	9502      	str	r5, [sp, #8]
   15cd4:	4645      	mov	r5, r8
   15cd6:	0c2d      	lsrs	r5, r5, #16
   15cd8:	46aa      	mov	sl, r5
   15cda:	9d02      	ldr	r5, [sp, #8]
   15cdc:	4455      	add	r5, sl
   15cde:	45a9      	cmp	r9, r5
   15ce0:	d906      	bls.n	15cf0 <__aeabi_dmul+0x238>
   15ce2:	468a      	mov	sl, r1
   15ce4:	2180      	movs	r1, #128	; 0x80
   15ce6:	0249      	lsls	r1, r1, #9
   15ce8:	4689      	mov	r9, r1
   15cea:	44ca      	add	sl, r9
   15cec:	4651      	mov	r1, sl
   15cee:	9103      	str	r1, [sp, #12]
   15cf0:	0c29      	lsrs	r1, r5, #16
   15cf2:	9104      	str	r1, [sp, #16]
   15cf4:	4641      	mov	r1, r8
   15cf6:	0409      	lsls	r1, r1, #16
   15cf8:	042d      	lsls	r5, r5, #16
   15cfa:	0c09      	lsrs	r1, r1, #16
   15cfc:	4688      	mov	r8, r1
   15cfe:	0029      	movs	r1, r5
   15d00:	0c25      	lsrs	r5, r4, #16
   15d02:	0424      	lsls	r4, r4, #16
   15d04:	4441      	add	r1, r8
   15d06:	0c24      	lsrs	r4, r4, #16
   15d08:	9105      	str	r1, [sp, #20]
   15d0a:	0021      	movs	r1, r4
   15d0c:	4341      	muls	r1, r0
   15d0e:	4688      	mov	r8, r1
   15d10:	0021      	movs	r1, r4
   15d12:	4379      	muls	r1, r7
   15d14:	468a      	mov	sl, r1
   15d16:	4368      	muls	r0, r5
   15d18:	4641      	mov	r1, r8
   15d1a:	4450      	add	r0, sl
   15d1c:	4681      	mov	r9, r0
   15d1e:	0c08      	lsrs	r0, r1, #16
   15d20:	4448      	add	r0, r9
   15d22:	436f      	muls	r7, r5
   15d24:	4582      	cmp	sl, r0
   15d26:	d903      	bls.n	15d30 <__aeabi_dmul+0x278>
   15d28:	2180      	movs	r1, #128	; 0x80
   15d2a:	0249      	lsls	r1, r1, #9
   15d2c:	4689      	mov	r9, r1
   15d2e:	444f      	add	r7, r9
   15d30:	0c01      	lsrs	r1, r0, #16
   15d32:	4689      	mov	r9, r1
   15d34:	0039      	movs	r1, r7
   15d36:	4449      	add	r1, r9
   15d38:	9102      	str	r1, [sp, #8]
   15d3a:	4641      	mov	r1, r8
   15d3c:	040f      	lsls	r7, r1, #16
   15d3e:	9904      	ldr	r1, [sp, #16]
   15d40:	0c3f      	lsrs	r7, r7, #16
   15d42:	4688      	mov	r8, r1
   15d44:	0400      	lsls	r0, r0, #16
   15d46:	19c0      	adds	r0, r0, r7
   15d48:	4480      	add	r8, r0
   15d4a:	4641      	mov	r1, r8
   15d4c:	9104      	str	r1, [sp, #16]
   15d4e:	4659      	mov	r1, fp
   15d50:	0c0f      	lsrs	r7, r1, #16
   15d52:	0409      	lsls	r1, r1, #16
   15d54:	0c09      	lsrs	r1, r1, #16
   15d56:	4688      	mov	r8, r1
   15d58:	4359      	muls	r1, r3
   15d5a:	468a      	mov	sl, r1
   15d5c:	0039      	movs	r1, r7
   15d5e:	4351      	muls	r1, r2
   15d60:	4689      	mov	r9, r1
   15d62:	4641      	mov	r1, r8
   15d64:	434a      	muls	r2, r1
   15d66:	4651      	mov	r1, sl
   15d68:	0c09      	lsrs	r1, r1, #16
   15d6a:	468b      	mov	fp, r1
   15d6c:	437b      	muls	r3, r7
   15d6e:	18d2      	adds	r2, r2, r3
   15d70:	445a      	add	r2, fp
   15d72:	4293      	cmp	r3, r2
   15d74:	d903      	bls.n	15d7e <__aeabi_dmul+0x2c6>
   15d76:	2380      	movs	r3, #128	; 0x80
   15d78:	025b      	lsls	r3, r3, #9
   15d7a:	469b      	mov	fp, r3
   15d7c:	44d9      	add	r9, fp
   15d7e:	4651      	mov	r1, sl
   15d80:	0409      	lsls	r1, r1, #16
   15d82:	0c09      	lsrs	r1, r1, #16
   15d84:	468a      	mov	sl, r1
   15d86:	4641      	mov	r1, r8
   15d88:	4361      	muls	r1, r4
   15d8a:	437c      	muls	r4, r7
   15d8c:	0c13      	lsrs	r3, r2, #16
   15d8e:	0412      	lsls	r2, r2, #16
   15d90:	444b      	add	r3, r9
   15d92:	4452      	add	r2, sl
   15d94:	46a1      	mov	r9, r4
   15d96:	468a      	mov	sl, r1
   15d98:	003c      	movs	r4, r7
   15d9a:	4641      	mov	r1, r8
   15d9c:	436c      	muls	r4, r5
   15d9e:	434d      	muls	r5, r1
   15da0:	4651      	mov	r1, sl
   15da2:	444d      	add	r5, r9
   15da4:	0c0f      	lsrs	r7, r1, #16
   15da6:	197d      	adds	r5, r7, r5
   15da8:	45a9      	cmp	r9, r5
   15daa:	d903      	bls.n	15db4 <__aeabi_dmul+0x2fc>
   15dac:	2180      	movs	r1, #128	; 0x80
   15dae:	0249      	lsls	r1, r1, #9
   15db0:	4688      	mov	r8, r1
   15db2:	4444      	add	r4, r8
   15db4:	9f04      	ldr	r7, [sp, #16]
   15db6:	9903      	ldr	r1, [sp, #12]
   15db8:	46b8      	mov	r8, r7
   15dba:	4441      	add	r1, r8
   15dbc:	468b      	mov	fp, r1
   15dbe:	4583      	cmp	fp, r0
   15dc0:	4180      	sbcs	r0, r0
   15dc2:	4241      	negs	r1, r0
   15dc4:	4688      	mov	r8, r1
   15dc6:	4651      	mov	r1, sl
   15dc8:	0408      	lsls	r0, r1, #16
   15dca:	042f      	lsls	r7, r5, #16
   15dcc:	0c00      	lsrs	r0, r0, #16
   15dce:	183f      	adds	r7, r7, r0
   15dd0:	4658      	mov	r0, fp
   15dd2:	9902      	ldr	r1, [sp, #8]
   15dd4:	1810      	adds	r0, r2, r0
   15dd6:	4689      	mov	r9, r1
   15dd8:	4290      	cmp	r0, r2
   15dda:	4192      	sbcs	r2, r2
   15ddc:	444f      	add	r7, r9
   15dde:	46ba      	mov	sl, r7
   15de0:	4252      	negs	r2, r2
   15de2:	4699      	mov	r9, r3
   15de4:	4693      	mov	fp, r2
   15de6:	44c2      	add	sl, r8
   15de8:	44d1      	add	r9, sl
   15dea:	44cb      	add	fp, r9
   15dec:	428f      	cmp	r7, r1
   15dee:	41bf      	sbcs	r7, r7
   15df0:	45c2      	cmp	sl, r8
   15df2:	4189      	sbcs	r1, r1
   15df4:	4599      	cmp	r9, r3
   15df6:	419b      	sbcs	r3, r3
   15df8:	4593      	cmp	fp, r2
   15dfa:	4192      	sbcs	r2, r2
   15dfc:	427f      	negs	r7, r7
   15dfe:	4249      	negs	r1, r1
   15e00:	0c2d      	lsrs	r5, r5, #16
   15e02:	4252      	negs	r2, r2
   15e04:	430f      	orrs	r7, r1
   15e06:	425b      	negs	r3, r3
   15e08:	4313      	orrs	r3, r2
   15e0a:	197f      	adds	r7, r7, r5
   15e0c:	18ff      	adds	r7, r7, r3
   15e0e:	465b      	mov	r3, fp
   15e10:	193c      	adds	r4, r7, r4
   15e12:	0ddb      	lsrs	r3, r3, #23
   15e14:	9a05      	ldr	r2, [sp, #20]
   15e16:	0264      	lsls	r4, r4, #9
   15e18:	431c      	orrs	r4, r3
   15e1a:	0243      	lsls	r3, r0, #9
   15e1c:	4313      	orrs	r3, r2
   15e1e:	1e5d      	subs	r5, r3, #1
   15e20:	41ab      	sbcs	r3, r5
   15e22:	465a      	mov	r2, fp
   15e24:	0dc0      	lsrs	r0, r0, #23
   15e26:	4303      	orrs	r3, r0
   15e28:	0252      	lsls	r2, r2, #9
   15e2a:	4313      	orrs	r3, r2
   15e2c:	01e2      	lsls	r2, r4, #7
   15e2e:	d556      	bpl.n	15ede <__aeabi_dmul+0x426>
   15e30:	2001      	movs	r0, #1
   15e32:	085a      	lsrs	r2, r3, #1
   15e34:	4003      	ands	r3, r0
   15e36:	4313      	orrs	r3, r2
   15e38:	07e2      	lsls	r2, r4, #31
   15e3a:	4313      	orrs	r3, r2
   15e3c:	0864      	lsrs	r4, r4, #1
   15e3e:	485a      	ldr	r0, [pc, #360]	; (15fa8 <__aeabi_dmul+0x4f0>)
   15e40:	4460      	add	r0, ip
   15e42:	2800      	cmp	r0, #0
   15e44:	dd4d      	ble.n	15ee2 <__aeabi_dmul+0x42a>
   15e46:	075a      	lsls	r2, r3, #29
   15e48:	d009      	beq.n	15e5e <__aeabi_dmul+0x3a6>
   15e4a:	220f      	movs	r2, #15
   15e4c:	401a      	ands	r2, r3
   15e4e:	2a04      	cmp	r2, #4
   15e50:	d005      	beq.n	15e5e <__aeabi_dmul+0x3a6>
   15e52:	1d1a      	adds	r2, r3, #4
   15e54:	429a      	cmp	r2, r3
   15e56:	419b      	sbcs	r3, r3
   15e58:	425b      	negs	r3, r3
   15e5a:	18e4      	adds	r4, r4, r3
   15e5c:	0013      	movs	r3, r2
   15e5e:	01e2      	lsls	r2, r4, #7
   15e60:	d504      	bpl.n	15e6c <__aeabi_dmul+0x3b4>
   15e62:	2080      	movs	r0, #128	; 0x80
   15e64:	4a51      	ldr	r2, [pc, #324]	; (15fac <__aeabi_dmul+0x4f4>)
   15e66:	00c0      	lsls	r0, r0, #3
   15e68:	4014      	ands	r4, r2
   15e6a:	4460      	add	r0, ip
   15e6c:	4a50      	ldr	r2, [pc, #320]	; (15fb0 <__aeabi_dmul+0x4f8>)
   15e6e:	4290      	cmp	r0, r2
   15e70:	dd00      	ble.n	15e74 <__aeabi_dmul+0x3bc>
   15e72:	e6e3      	b.n	15c3c <__aeabi_dmul+0x184>
   15e74:	2501      	movs	r5, #1
   15e76:	08db      	lsrs	r3, r3, #3
   15e78:	0762      	lsls	r2, r4, #29
   15e7a:	431a      	orrs	r2, r3
   15e7c:	0264      	lsls	r4, r4, #9
   15e7e:	9b01      	ldr	r3, [sp, #4]
   15e80:	4691      	mov	r9, r2
   15e82:	0b22      	lsrs	r2, r4, #12
   15e84:	0544      	lsls	r4, r0, #21
   15e86:	0d64      	lsrs	r4, r4, #21
   15e88:	401d      	ands	r5, r3
   15e8a:	e67c      	b.n	15b86 <__aeabi_dmul+0xce>
   15e8c:	2280      	movs	r2, #128	; 0x80
   15e8e:	4659      	mov	r1, fp
   15e90:	0312      	lsls	r2, r2, #12
   15e92:	4211      	tst	r1, r2
   15e94:	d008      	beq.n	15ea8 <__aeabi_dmul+0x3f0>
   15e96:	4214      	tst	r4, r2
   15e98:	d106      	bne.n	15ea8 <__aeabi_dmul+0x3f0>
   15e9a:	4322      	orrs	r2, r4
   15e9c:	0312      	lsls	r2, r2, #12
   15e9e:	0b12      	lsrs	r2, r2, #12
   15ea0:	4645      	mov	r5, r8
   15ea2:	4699      	mov	r9, r3
   15ea4:	4c43      	ldr	r4, [pc, #268]	; (15fb4 <__aeabi_dmul+0x4fc>)
   15ea6:	e66e      	b.n	15b86 <__aeabi_dmul+0xce>
   15ea8:	465b      	mov	r3, fp
   15eaa:	431a      	orrs	r2, r3
   15eac:	0312      	lsls	r2, r2, #12
   15eae:	0b12      	lsrs	r2, r2, #12
   15eb0:	4c40      	ldr	r4, [pc, #256]	; (15fb4 <__aeabi_dmul+0x4fc>)
   15eb2:	e668      	b.n	15b86 <__aeabi_dmul+0xce>
   15eb4:	0003      	movs	r3, r0
   15eb6:	4654      	mov	r4, sl
   15eb8:	3b28      	subs	r3, #40	; 0x28
   15eba:	409c      	lsls	r4, r3
   15ebc:	2300      	movs	r3, #0
   15ebe:	e6b9      	b.n	15c34 <__aeabi_dmul+0x17c>
   15ec0:	f000 fd1a 	bl	168f8 <__clzsi2>
   15ec4:	3020      	adds	r0, #32
   15ec6:	e6a6      	b.n	15c16 <__aeabi_dmul+0x15e>
   15ec8:	0003      	movs	r3, r0
   15eca:	3b28      	subs	r3, #40	; 0x28
   15ecc:	409f      	lsls	r7, r3
   15ece:	2300      	movs	r3, #0
   15ed0:	46bb      	mov	fp, r7
   15ed2:	4699      	mov	r9, r3
   15ed4:	e68a      	b.n	15bec <__aeabi_dmul+0x134>
   15ed6:	f000 fd0f 	bl	168f8 <__clzsi2>
   15eda:	3020      	adds	r0, #32
   15edc:	e674      	b.n	15bc8 <__aeabi_dmul+0x110>
   15ede:	46b4      	mov	ip, r6
   15ee0:	e7ad      	b.n	15e3e <__aeabi_dmul+0x386>
   15ee2:	2501      	movs	r5, #1
   15ee4:	1a2a      	subs	r2, r5, r0
   15ee6:	2a38      	cmp	r2, #56	; 0x38
   15ee8:	dd06      	ble.n	15ef8 <__aeabi_dmul+0x440>
   15eea:	9b01      	ldr	r3, [sp, #4]
   15eec:	2400      	movs	r4, #0
   15eee:	401d      	ands	r5, r3
   15ef0:	2300      	movs	r3, #0
   15ef2:	2200      	movs	r2, #0
   15ef4:	4699      	mov	r9, r3
   15ef6:	e646      	b.n	15b86 <__aeabi_dmul+0xce>
   15ef8:	2a1f      	cmp	r2, #31
   15efa:	dc21      	bgt.n	15f40 <__aeabi_dmul+0x488>
   15efc:	2520      	movs	r5, #32
   15efe:	0020      	movs	r0, r4
   15f00:	1aad      	subs	r5, r5, r2
   15f02:	001e      	movs	r6, r3
   15f04:	40ab      	lsls	r3, r5
   15f06:	40a8      	lsls	r0, r5
   15f08:	40d6      	lsrs	r6, r2
   15f0a:	1e5d      	subs	r5, r3, #1
   15f0c:	41ab      	sbcs	r3, r5
   15f0e:	4330      	orrs	r0, r6
   15f10:	4318      	orrs	r0, r3
   15f12:	40d4      	lsrs	r4, r2
   15f14:	0743      	lsls	r3, r0, #29
   15f16:	d009      	beq.n	15f2c <__aeabi_dmul+0x474>
   15f18:	230f      	movs	r3, #15
   15f1a:	4003      	ands	r3, r0
   15f1c:	2b04      	cmp	r3, #4
   15f1e:	d005      	beq.n	15f2c <__aeabi_dmul+0x474>
   15f20:	0003      	movs	r3, r0
   15f22:	1d18      	adds	r0, r3, #4
   15f24:	4298      	cmp	r0, r3
   15f26:	419b      	sbcs	r3, r3
   15f28:	425b      	negs	r3, r3
   15f2a:	18e4      	adds	r4, r4, r3
   15f2c:	0223      	lsls	r3, r4, #8
   15f2e:	d521      	bpl.n	15f74 <__aeabi_dmul+0x4bc>
   15f30:	2501      	movs	r5, #1
   15f32:	9b01      	ldr	r3, [sp, #4]
   15f34:	2401      	movs	r4, #1
   15f36:	401d      	ands	r5, r3
   15f38:	2300      	movs	r3, #0
   15f3a:	2200      	movs	r2, #0
   15f3c:	4699      	mov	r9, r3
   15f3e:	e622      	b.n	15b86 <__aeabi_dmul+0xce>
   15f40:	251f      	movs	r5, #31
   15f42:	0021      	movs	r1, r4
   15f44:	426d      	negs	r5, r5
   15f46:	1a28      	subs	r0, r5, r0
   15f48:	40c1      	lsrs	r1, r0
   15f4a:	0008      	movs	r0, r1
   15f4c:	2a20      	cmp	r2, #32
   15f4e:	d01d      	beq.n	15f8c <__aeabi_dmul+0x4d4>
   15f50:	355f      	adds	r5, #95	; 0x5f
   15f52:	1aaa      	subs	r2, r5, r2
   15f54:	4094      	lsls	r4, r2
   15f56:	4323      	orrs	r3, r4
   15f58:	1e5c      	subs	r4, r3, #1
   15f5a:	41a3      	sbcs	r3, r4
   15f5c:	2507      	movs	r5, #7
   15f5e:	4303      	orrs	r3, r0
   15f60:	401d      	ands	r5, r3
   15f62:	2200      	movs	r2, #0
   15f64:	2d00      	cmp	r5, #0
   15f66:	d009      	beq.n	15f7c <__aeabi_dmul+0x4c4>
   15f68:	220f      	movs	r2, #15
   15f6a:	2400      	movs	r4, #0
   15f6c:	401a      	ands	r2, r3
   15f6e:	0018      	movs	r0, r3
   15f70:	2a04      	cmp	r2, #4
   15f72:	d1d6      	bne.n	15f22 <__aeabi_dmul+0x46a>
   15f74:	0003      	movs	r3, r0
   15f76:	0765      	lsls	r5, r4, #29
   15f78:	0264      	lsls	r4, r4, #9
   15f7a:	0b22      	lsrs	r2, r4, #12
   15f7c:	08db      	lsrs	r3, r3, #3
   15f7e:	432b      	orrs	r3, r5
   15f80:	2501      	movs	r5, #1
   15f82:	4699      	mov	r9, r3
   15f84:	9b01      	ldr	r3, [sp, #4]
   15f86:	2400      	movs	r4, #0
   15f88:	401d      	ands	r5, r3
   15f8a:	e5fc      	b.n	15b86 <__aeabi_dmul+0xce>
   15f8c:	2400      	movs	r4, #0
   15f8e:	e7e2      	b.n	15f56 <__aeabi_dmul+0x49e>
   15f90:	2280      	movs	r2, #128	; 0x80
   15f92:	2501      	movs	r5, #1
   15f94:	0312      	lsls	r2, r2, #12
   15f96:	4322      	orrs	r2, r4
   15f98:	9901      	ldr	r1, [sp, #4]
   15f9a:	0312      	lsls	r2, r2, #12
   15f9c:	0b12      	lsrs	r2, r2, #12
   15f9e:	400d      	ands	r5, r1
   15fa0:	4699      	mov	r9, r3
   15fa2:	4c04      	ldr	r4, [pc, #16]	; (15fb4 <__aeabi_dmul+0x4fc>)
   15fa4:	e5ef      	b.n	15b86 <__aeabi_dmul+0xce>
   15fa6:	46c0      	nop			; (mov r8, r8)
   15fa8:	000003ff 	.word	0x000003ff
   15fac:	feffffff 	.word	0xfeffffff
   15fb0:	000007fe 	.word	0x000007fe
   15fb4:	000007ff 	.word	0x000007ff

00015fb8 <__aeabi_dsub>:
   15fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   15fba:	4646      	mov	r6, r8
   15fbc:	46d6      	mov	lr, sl
   15fbe:	464f      	mov	r7, r9
   15fc0:	030c      	lsls	r4, r1, #12
   15fc2:	b5c0      	push	{r6, r7, lr}
   15fc4:	0fcd      	lsrs	r5, r1, #31
   15fc6:	004e      	lsls	r6, r1, #1
   15fc8:	0a61      	lsrs	r1, r4, #9
   15fca:	0f44      	lsrs	r4, r0, #29
   15fcc:	430c      	orrs	r4, r1
   15fce:	00c1      	lsls	r1, r0, #3
   15fd0:	0058      	lsls	r0, r3, #1
   15fd2:	0d40      	lsrs	r0, r0, #21
   15fd4:	4684      	mov	ip, r0
   15fd6:	468a      	mov	sl, r1
   15fd8:	000f      	movs	r7, r1
   15fda:	0319      	lsls	r1, r3, #12
   15fdc:	0f50      	lsrs	r0, r2, #29
   15fde:	0a49      	lsrs	r1, r1, #9
   15fe0:	4301      	orrs	r1, r0
   15fe2:	48c6      	ldr	r0, [pc, #792]	; (162fc <__aeabi_dsub+0x344>)
   15fe4:	0d76      	lsrs	r6, r6, #21
   15fe6:	46a8      	mov	r8, r5
   15fe8:	0fdb      	lsrs	r3, r3, #31
   15fea:	00d2      	lsls	r2, r2, #3
   15fec:	4584      	cmp	ip, r0
   15fee:	d100      	bne.n	15ff2 <__aeabi_dsub+0x3a>
   15ff0:	e0d8      	b.n	161a4 <__aeabi_dsub+0x1ec>
   15ff2:	2001      	movs	r0, #1
   15ff4:	4043      	eors	r3, r0
   15ff6:	42ab      	cmp	r3, r5
   15ff8:	d100      	bne.n	15ffc <__aeabi_dsub+0x44>
   15ffa:	e0a6      	b.n	1614a <__aeabi_dsub+0x192>
   15ffc:	4660      	mov	r0, ip
   15ffe:	1a35      	subs	r5, r6, r0
   16000:	2d00      	cmp	r5, #0
   16002:	dc00      	bgt.n	16006 <__aeabi_dsub+0x4e>
   16004:	e105      	b.n	16212 <__aeabi_dsub+0x25a>
   16006:	2800      	cmp	r0, #0
   16008:	d110      	bne.n	1602c <__aeabi_dsub+0x74>
   1600a:	000b      	movs	r3, r1
   1600c:	4313      	orrs	r3, r2
   1600e:	d100      	bne.n	16012 <__aeabi_dsub+0x5a>
   16010:	e0d7      	b.n	161c2 <__aeabi_dsub+0x20a>
   16012:	1e6b      	subs	r3, r5, #1
   16014:	2b00      	cmp	r3, #0
   16016:	d000      	beq.n	1601a <__aeabi_dsub+0x62>
   16018:	e14b      	b.n	162b2 <__aeabi_dsub+0x2fa>
   1601a:	4653      	mov	r3, sl
   1601c:	1a9f      	subs	r7, r3, r2
   1601e:	45ba      	cmp	sl, r7
   16020:	4180      	sbcs	r0, r0
   16022:	1a64      	subs	r4, r4, r1
   16024:	4240      	negs	r0, r0
   16026:	1a24      	subs	r4, r4, r0
   16028:	2601      	movs	r6, #1
   1602a:	e01e      	b.n	1606a <__aeabi_dsub+0xb2>
   1602c:	4bb3      	ldr	r3, [pc, #716]	; (162fc <__aeabi_dsub+0x344>)
   1602e:	429e      	cmp	r6, r3
   16030:	d048      	beq.n	160c4 <__aeabi_dsub+0x10c>
   16032:	2380      	movs	r3, #128	; 0x80
   16034:	041b      	lsls	r3, r3, #16
   16036:	4319      	orrs	r1, r3
   16038:	2d38      	cmp	r5, #56	; 0x38
   1603a:	dd00      	ble.n	1603e <__aeabi_dsub+0x86>
   1603c:	e119      	b.n	16272 <__aeabi_dsub+0x2ba>
   1603e:	2d1f      	cmp	r5, #31
   16040:	dd00      	ble.n	16044 <__aeabi_dsub+0x8c>
   16042:	e14c      	b.n	162de <__aeabi_dsub+0x326>
   16044:	2320      	movs	r3, #32
   16046:	000f      	movs	r7, r1
   16048:	1b5b      	subs	r3, r3, r5
   1604a:	0010      	movs	r0, r2
   1604c:	409a      	lsls	r2, r3
   1604e:	409f      	lsls	r7, r3
   16050:	40e8      	lsrs	r0, r5
   16052:	1e53      	subs	r3, r2, #1
   16054:	419a      	sbcs	r2, r3
   16056:	40e9      	lsrs	r1, r5
   16058:	4307      	orrs	r7, r0
   1605a:	4317      	orrs	r7, r2
   1605c:	4653      	mov	r3, sl
   1605e:	1bdf      	subs	r7, r3, r7
   16060:	1a61      	subs	r1, r4, r1
   16062:	45ba      	cmp	sl, r7
   16064:	41a4      	sbcs	r4, r4
   16066:	4264      	negs	r4, r4
   16068:	1b0c      	subs	r4, r1, r4
   1606a:	0223      	lsls	r3, r4, #8
   1606c:	d400      	bmi.n	16070 <__aeabi_dsub+0xb8>
   1606e:	e0c5      	b.n	161fc <__aeabi_dsub+0x244>
   16070:	0264      	lsls	r4, r4, #9
   16072:	0a65      	lsrs	r5, r4, #9
   16074:	2d00      	cmp	r5, #0
   16076:	d100      	bne.n	1607a <__aeabi_dsub+0xc2>
   16078:	e0f6      	b.n	16268 <__aeabi_dsub+0x2b0>
   1607a:	0028      	movs	r0, r5
   1607c:	f000 fc3c 	bl	168f8 <__clzsi2>
   16080:	0003      	movs	r3, r0
   16082:	3b08      	subs	r3, #8
   16084:	2b1f      	cmp	r3, #31
   16086:	dd00      	ble.n	1608a <__aeabi_dsub+0xd2>
   16088:	e0e9      	b.n	1625e <__aeabi_dsub+0x2a6>
   1608a:	2220      	movs	r2, #32
   1608c:	003c      	movs	r4, r7
   1608e:	1ad2      	subs	r2, r2, r3
   16090:	409d      	lsls	r5, r3
   16092:	40d4      	lsrs	r4, r2
   16094:	409f      	lsls	r7, r3
   16096:	4325      	orrs	r5, r4
   16098:	429e      	cmp	r6, r3
   1609a:	dd00      	ble.n	1609e <__aeabi_dsub+0xe6>
   1609c:	e0db      	b.n	16256 <__aeabi_dsub+0x29e>
   1609e:	1b9e      	subs	r6, r3, r6
   160a0:	1c73      	adds	r3, r6, #1
   160a2:	2b1f      	cmp	r3, #31
   160a4:	dd00      	ble.n	160a8 <__aeabi_dsub+0xf0>
   160a6:	e10a      	b.n	162be <__aeabi_dsub+0x306>
   160a8:	2220      	movs	r2, #32
   160aa:	0038      	movs	r0, r7
   160ac:	1ad2      	subs	r2, r2, r3
   160ae:	0029      	movs	r1, r5
   160b0:	4097      	lsls	r7, r2
   160b2:	002c      	movs	r4, r5
   160b4:	4091      	lsls	r1, r2
   160b6:	40d8      	lsrs	r0, r3
   160b8:	1e7a      	subs	r2, r7, #1
   160ba:	4197      	sbcs	r7, r2
   160bc:	40dc      	lsrs	r4, r3
   160be:	2600      	movs	r6, #0
   160c0:	4301      	orrs	r1, r0
   160c2:	430f      	orrs	r7, r1
   160c4:	077b      	lsls	r3, r7, #29
   160c6:	d009      	beq.n	160dc <__aeabi_dsub+0x124>
   160c8:	230f      	movs	r3, #15
   160ca:	403b      	ands	r3, r7
   160cc:	2b04      	cmp	r3, #4
   160ce:	d005      	beq.n	160dc <__aeabi_dsub+0x124>
   160d0:	1d3b      	adds	r3, r7, #4
   160d2:	42bb      	cmp	r3, r7
   160d4:	41bf      	sbcs	r7, r7
   160d6:	427f      	negs	r7, r7
   160d8:	19e4      	adds	r4, r4, r7
   160da:	001f      	movs	r7, r3
   160dc:	0223      	lsls	r3, r4, #8
   160de:	d525      	bpl.n	1612c <__aeabi_dsub+0x174>
   160e0:	4b86      	ldr	r3, [pc, #536]	; (162fc <__aeabi_dsub+0x344>)
   160e2:	3601      	adds	r6, #1
   160e4:	429e      	cmp	r6, r3
   160e6:	d100      	bne.n	160ea <__aeabi_dsub+0x132>
   160e8:	e0af      	b.n	1624a <__aeabi_dsub+0x292>
   160ea:	4b85      	ldr	r3, [pc, #532]	; (16300 <__aeabi_dsub+0x348>)
   160ec:	2501      	movs	r5, #1
   160ee:	401c      	ands	r4, r3
   160f0:	4643      	mov	r3, r8
   160f2:	0762      	lsls	r2, r4, #29
   160f4:	08ff      	lsrs	r7, r7, #3
   160f6:	0264      	lsls	r4, r4, #9
   160f8:	0576      	lsls	r6, r6, #21
   160fa:	4317      	orrs	r7, r2
   160fc:	0b24      	lsrs	r4, r4, #12
   160fe:	0d76      	lsrs	r6, r6, #21
   16100:	401d      	ands	r5, r3
   16102:	2100      	movs	r1, #0
   16104:	0324      	lsls	r4, r4, #12
   16106:	0b23      	lsrs	r3, r4, #12
   16108:	0d0c      	lsrs	r4, r1, #20
   1610a:	4a7e      	ldr	r2, [pc, #504]	; (16304 <__aeabi_dsub+0x34c>)
   1610c:	0524      	lsls	r4, r4, #20
   1610e:	431c      	orrs	r4, r3
   16110:	4014      	ands	r4, r2
   16112:	0533      	lsls	r3, r6, #20
   16114:	4323      	orrs	r3, r4
   16116:	005b      	lsls	r3, r3, #1
   16118:	07ed      	lsls	r5, r5, #31
   1611a:	085b      	lsrs	r3, r3, #1
   1611c:	432b      	orrs	r3, r5
   1611e:	0038      	movs	r0, r7
   16120:	0019      	movs	r1, r3
   16122:	bc1c      	pop	{r2, r3, r4}
   16124:	4690      	mov	r8, r2
   16126:	4699      	mov	r9, r3
   16128:	46a2      	mov	sl, r4
   1612a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1612c:	2501      	movs	r5, #1
   1612e:	4643      	mov	r3, r8
   16130:	0762      	lsls	r2, r4, #29
   16132:	08ff      	lsrs	r7, r7, #3
   16134:	4317      	orrs	r7, r2
   16136:	08e4      	lsrs	r4, r4, #3
   16138:	401d      	ands	r5, r3
   1613a:	4b70      	ldr	r3, [pc, #448]	; (162fc <__aeabi_dsub+0x344>)
   1613c:	429e      	cmp	r6, r3
   1613e:	d036      	beq.n	161ae <__aeabi_dsub+0x1f6>
   16140:	0324      	lsls	r4, r4, #12
   16142:	0576      	lsls	r6, r6, #21
   16144:	0b24      	lsrs	r4, r4, #12
   16146:	0d76      	lsrs	r6, r6, #21
   16148:	e7db      	b.n	16102 <__aeabi_dsub+0x14a>
   1614a:	4663      	mov	r3, ip
   1614c:	1af3      	subs	r3, r6, r3
   1614e:	2b00      	cmp	r3, #0
   16150:	dc00      	bgt.n	16154 <__aeabi_dsub+0x19c>
   16152:	e094      	b.n	1627e <__aeabi_dsub+0x2c6>
   16154:	4660      	mov	r0, ip
   16156:	2800      	cmp	r0, #0
   16158:	d035      	beq.n	161c6 <__aeabi_dsub+0x20e>
   1615a:	4868      	ldr	r0, [pc, #416]	; (162fc <__aeabi_dsub+0x344>)
   1615c:	4286      	cmp	r6, r0
   1615e:	d0b1      	beq.n	160c4 <__aeabi_dsub+0x10c>
   16160:	2780      	movs	r7, #128	; 0x80
   16162:	043f      	lsls	r7, r7, #16
   16164:	4339      	orrs	r1, r7
   16166:	2b38      	cmp	r3, #56	; 0x38
   16168:	dc00      	bgt.n	1616c <__aeabi_dsub+0x1b4>
   1616a:	e0fd      	b.n	16368 <__aeabi_dsub+0x3b0>
   1616c:	430a      	orrs	r2, r1
   1616e:	0017      	movs	r7, r2
   16170:	2100      	movs	r1, #0
   16172:	1e7a      	subs	r2, r7, #1
   16174:	4197      	sbcs	r7, r2
   16176:	4457      	add	r7, sl
   16178:	4557      	cmp	r7, sl
   1617a:	4180      	sbcs	r0, r0
   1617c:	1909      	adds	r1, r1, r4
   1617e:	4244      	negs	r4, r0
   16180:	190c      	adds	r4, r1, r4
   16182:	0223      	lsls	r3, r4, #8
   16184:	d53a      	bpl.n	161fc <__aeabi_dsub+0x244>
   16186:	4b5d      	ldr	r3, [pc, #372]	; (162fc <__aeabi_dsub+0x344>)
   16188:	3601      	adds	r6, #1
   1618a:	429e      	cmp	r6, r3
   1618c:	d100      	bne.n	16190 <__aeabi_dsub+0x1d8>
   1618e:	e14b      	b.n	16428 <__aeabi_dsub+0x470>
   16190:	2201      	movs	r2, #1
   16192:	4b5b      	ldr	r3, [pc, #364]	; (16300 <__aeabi_dsub+0x348>)
   16194:	401c      	ands	r4, r3
   16196:	087b      	lsrs	r3, r7, #1
   16198:	4017      	ands	r7, r2
   1619a:	431f      	orrs	r7, r3
   1619c:	07e2      	lsls	r2, r4, #31
   1619e:	4317      	orrs	r7, r2
   161a0:	0864      	lsrs	r4, r4, #1
   161a2:	e78f      	b.n	160c4 <__aeabi_dsub+0x10c>
   161a4:	0008      	movs	r0, r1
   161a6:	4310      	orrs	r0, r2
   161a8:	d000      	beq.n	161ac <__aeabi_dsub+0x1f4>
   161aa:	e724      	b.n	15ff6 <__aeabi_dsub+0x3e>
   161ac:	e721      	b.n	15ff2 <__aeabi_dsub+0x3a>
   161ae:	0023      	movs	r3, r4
   161b0:	433b      	orrs	r3, r7
   161b2:	d100      	bne.n	161b6 <__aeabi_dsub+0x1fe>
   161b4:	e1b9      	b.n	1652a <__aeabi_dsub+0x572>
   161b6:	2280      	movs	r2, #128	; 0x80
   161b8:	0312      	lsls	r2, r2, #12
   161ba:	4314      	orrs	r4, r2
   161bc:	0324      	lsls	r4, r4, #12
   161be:	0b24      	lsrs	r4, r4, #12
   161c0:	e79f      	b.n	16102 <__aeabi_dsub+0x14a>
   161c2:	002e      	movs	r6, r5
   161c4:	e77e      	b.n	160c4 <__aeabi_dsub+0x10c>
   161c6:	0008      	movs	r0, r1
   161c8:	4310      	orrs	r0, r2
   161ca:	d100      	bne.n	161ce <__aeabi_dsub+0x216>
   161cc:	e0ca      	b.n	16364 <__aeabi_dsub+0x3ac>
   161ce:	1e58      	subs	r0, r3, #1
   161d0:	4684      	mov	ip, r0
   161d2:	2800      	cmp	r0, #0
   161d4:	d000      	beq.n	161d8 <__aeabi_dsub+0x220>
   161d6:	e0e7      	b.n	163a8 <__aeabi_dsub+0x3f0>
   161d8:	4452      	add	r2, sl
   161da:	4552      	cmp	r2, sl
   161dc:	4180      	sbcs	r0, r0
   161de:	1864      	adds	r4, r4, r1
   161e0:	4240      	negs	r0, r0
   161e2:	1824      	adds	r4, r4, r0
   161e4:	0017      	movs	r7, r2
   161e6:	2601      	movs	r6, #1
   161e8:	0223      	lsls	r3, r4, #8
   161ea:	d507      	bpl.n	161fc <__aeabi_dsub+0x244>
   161ec:	2602      	movs	r6, #2
   161ee:	e7cf      	b.n	16190 <__aeabi_dsub+0x1d8>
   161f0:	4664      	mov	r4, ip
   161f2:	432c      	orrs	r4, r5
   161f4:	d100      	bne.n	161f8 <__aeabi_dsub+0x240>
   161f6:	e1b3      	b.n	16560 <__aeabi_dsub+0x5a8>
   161f8:	002c      	movs	r4, r5
   161fa:	4667      	mov	r7, ip
   161fc:	077b      	lsls	r3, r7, #29
   161fe:	d000      	beq.n	16202 <__aeabi_dsub+0x24a>
   16200:	e762      	b.n	160c8 <__aeabi_dsub+0x110>
   16202:	0763      	lsls	r3, r4, #29
   16204:	08ff      	lsrs	r7, r7, #3
   16206:	431f      	orrs	r7, r3
   16208:	2501      	movs	r5, #1
   1620a:	4643      	mov	r3, r8
   1620c:	08e4      	lsrs	r4, r4, #3
   1620e:	401d      	ands	r5, r3
   16210:	e793      	b.n	1613a <__aeabi_dsub+0x182>
   16212:	2d00      	cmp	r5, #0
   16214:	d178      	bne.n	16308 <__aeabi_dsub+0x350>
   16216:	1c75      	adds	r5, r6, #1
   16218:	056d      	lsls	r5, r5, #21
   1621a:	0d6d      	lsrs	r5, r5, #21
   1621c:	2d01      	cmp	r5, #1
   1621e:	dc00      	bgt.n	16222 <__aeabi_dsub+0x26a>
   16220:	e0f2      	b.n	16408 <__aeabi_dsub+0x450>
   16222:	4650      	mov	r0, sl
   16224:	1a80      	subs	r0, r0, r2
   16226:	4582      	cmp	sl, r0
   16228:	41bf      	sbcs	r7, r7
   1622a:	1a65      	subs	r5, r4, r1
   1622c:	427f      	negs	r7, r7
   1622e:	1bed      	subs	r5, r5, r7
   16230:	4684      	mov	ip, r0
   16232:	0228      	lsls	r0, r5, #8
   16234:	d400      	bmi.n	16238 <__aeabi_dsub+0x280>
   16236:	e08c      	b.n	16352 <__aeabi_dsub+0x39a>
   16238:	4650      	mov	r0, sl
   1623a:	1a17      	subs	r7, r2, r0
   1623c:	42ba      	cmp	r2, r7
   1623e:	4192      	sbcs	r2, r2
   16240:	1b0c      	subs	r4, r1, r4
   16242:	4255      	negs	r5, r2
   16244:	1b65      	subs	r5, r4, r5
   16246:	4698      	mov	r8, r3
   16248:	e714      	b.n	16074 <__aeabi_dsub+0xbc>
   1624a:	2501      	movs	r5, #1
   1624c:	4643      	mov	r3, r8
   1624e:	2400      	movs	r4, #0
   16250:	401d      	ands	r5, r3
   16252:	2700      	movs	r7, #0
   16254:	e755      	b.n	16102 <__aeabi_dsub+0x14a>
   16256:	4c2a      	ldr	r4, [pc, #168]	; (16300 <__aeabi_dsub+0x348>)
   16258:	1af6      	subs	r6, r6, r3
   1625a:	402c      	ands	r4, r5
   1625c:	e732      	b.n	160c4 <__aeabi_dsub+0x10c>
   1625e:	003d      	movs	r5, r7
   16260:	3828      	subs	r0, #40	; 0x28
   16262:	4085      	lsls	r5, r0
   16264:	2700      	movs	r7, #0
   16266:	e717      	b.n	16098 <__aeabi_dsub+0xe0>
   16268:	0038      	movs	r0, r7
   1626a:	f000 fb45 	bl	168f8 <__clzsi2>
   1626e:	3020      	adds	r0, #32
   16270:	e706      	b.n	16080 <__aeabi_dsub+0xc8>
   16272:	430a      	orrs	r2, r1
   16274:	0017      	movs	r7, r2
   16276:	2100      	movs	r1, #0
   16278:	1e7a      	subs	r2, r7, #1
   1627a:	4197      	sbcs	r7, r2
   1627c:	e6ee      	b.n	1605c <__aeabi_dsub+0xa4>
   1627e:	2b00      	cmp	r3, #0
   16280:	d000      	beq.n	16284 <__aeabi_dsub+0x2cc>
   16282:	e0e5      	b.n	16450 <__aeabi_dsub+0x498>
   16284:	1c73      	adds	r3, r6, #1
   16286:	469c      	mov	ip, r3
   16288:	055b      	lsls	r3, r3, #21
   1628a:	0d5b      	lsrs	r3, r3, #21
   1628c:	2b01      	cmp	r3, #1
   1628e:	dc00      	bgt.n	16292 <__aeabi_dsub+0x2da>
   16290:	e09f      	b.n	163d2 <__aeabi_dsub+0x41a>
   16292:	4b1a      	ldr	r3, [pc, #104]	; (162fc <__aeabi_dsub+0x344>)
   16294:	459c      	cmp	ip, r3
   16296:	d100      	bne.n	1629a <__aeabi_dsub+0x2e2>
   16298:	e0c5      	b.n	16426 <__aeabi_dsub+0x46e>
   1629a:	4452      	add	r2, sl
   1629c:	4552      	cmp	r2, sl
   1629e:	4180      	sbcs	r0, r0
   162a0:	1864      	adds	r4, r4, r1
   162a2:	4240      	negs	r0, r0
   162a4:	1824      	adds	r4, r4, r0
   162a6:	07e7      	lsls	r7, r4, #31
   162a8:	0852      	lsrs	r2, r2, #1
   162aa:	4317      	orrs	r7, r2
   162ac:	0864      	lsrs	r4, r4, #1
   162ae:	4666      	mov	r6, ip
   162b0:	e708      	b.n	160c4 <__aeabi_dsub+0x10c>
   162b2:	4812      	ldr	r0, [pc, #72]	; (162fc <__aeabi_dsub+0x344>)
   162b4:	4285      	cmp	r5, r0
   162b6:	d100      	bne.n	162ba <__aeabi_dsub+0x302>
   162b8:	e085      	b.n	163c6 <__aeabi_dsub+0x40e>
   162ba:	001d      	movs	r5, r3
   162bc:	e6bc      	b.n	16038 <__aeabi_dsub+0x80>
   162be:	0029      	movs	r1, r5
   162c0:	3e1f      	subs	r6, #31
   162c2:	40f1      	lsrs	r1, r6
   162c4:	2b20      	cmp	r3, #32
   162c6:	d100      	bne.n	162ca <__aeabi_dsub+0x312>
   162c8:	e07f      	b.n	163ca <__aeabi_dsub+0x412>
   162ca:	2240      	movs	r2, #64	; 0x40
   162cc:	1ad3      	subs	r3, r2, r3
   162ce:	409d      	lsls	r5, r3
   162d0:	432f      	orrs	r7, r5
   162d2:	1e7d      	subs	r5, r7, #1
   162d4:	41af      	sbcs	r7, r5
   162d6:	2400      	movs	r4, #0
   162d8:	430f      	orrs	r7, r1
   162da:	2600      	movs	r6, #0
   162dc:	e78e      	b.n	161fc <__aeabi_dsub+0x244>
   162de:	002b      	movs	r3, r5
   162e0:	000f      	movs	r7, r1
   162e2:	3b20      	subs	r3, #32
   162e4:	40df      	lsrs	r7, r3
   162e6:	2d20      	cmp	r5, #32
   162e8:	d071      	beq.n	163ce <__aeabi_dsub+0x416>
   162ea:	2340      	movs	r3, #64	; 0x40
   162ec:	1b5d      	subs	r5, r3, r5
   162ee:	40a9      	lsls	r1, r5
   162f0:	430a      	orrs	r2, r1
   162f2:	1e51      	subs	r1, r2, #1
   162f4:	418a      	sbcs	r2, r1
   162f6:	2100      	movs	r1, #0
   162f8:	4317      	orrs	r7, r2
   162fa:	e6af      	b.n	1605c <__aeabi_dsub+0xa4>
   162fc:	000007ff 	.word	0x000007ff
   16300:	ff7fffff 	.word	0xff7fffff
   16304:	800fffff 	.word	0x800fffff
   16308:	2e00      	cmp	r6, #0
   1630a:	d03e      	beq.n	1638a <__aeabi_dsub+0x3d2>
   1630c:	4eb3      	ldr	r6, [pc, #716]	; (165dc <__aeabi_dsub+0x624>)
   1630e:	45b4      	cmp	ip, r6
   16310:	d045      	beq.n	1639e <__aeabi_dsub+0x3e6>
   16312:	2680      	movs	r6, #128	; 0x80
   16314:	0436      	lsls	r6, r6, #16
   16316:	426d      	negs	r5, r5
   16318:	4334      	orrs	r4, r6
   1631a:	2d38      	cmp	r5, #56	; 0x38
   1631c:	dd00      	ble.n	16320 <__aeabi_dsub+0x368>
   1631e:	e0a8      	b.n	16472 <__aeabi_dsub+0x4ba>
   16320:	2d1f      	cmp	r5, #31
   16322:	dd00      	ble.n	16326 <__aeabi_dsub+0x36e>
   16324:	e11f      	b.n	16566 <__aeabi_dsub+0x5ae>
   16326:	2620      	movs	r6, #32
   16328:	0027      	movs	r7, r4
   1632a:	4650      	mov	r0, sl
   1632c:	1b76      	subs	r6, r6, r5
   1632e:	40b7      	lsls	r7, r6
   16330:	40e8      	lsrs	r0, r5
   16332:	4307      	orrs	r7, r0
   16334:	4650      	mov	r0, sl
   16336:	40b0      	lsls	r0, r6
   16338:	1e46      	subs	r6, r0, #1
   1633a:	41b0      	sbcs	r0, r6
   1633c:	40ec      	lsrs	r4, r5
   1633e:	4338      	orrs	r0, r7
   16340:	1a17      	subs	r7, r2, r0
   16342:	42ba      	cmp	r2, r7
   16344:	4192      	sbcs	r2, r2
   16346:	1b0c      	subs	r4, r1, r4
   16348:	4252      	negs	r2, r2
   1634a:	1aa4      	subs	r4, r4, r2
   1634c:	4666      	mov	r6, ip
   1634e:	4698      	mov	r8, r3
   16350:	e68b      	b.n	1606a <__aeabi_dsub+0xb2>
   16352:	4664      	mov	r4, ip
   16354:	4667      	mov	r7, ip
   16356:	432c      	orrs	r4, r5
   16358:	d000      	beq.n	1635c <__aeabi_dsub+0x3a4>
   1635a:	e68b      	b.n	16074 <__aeabi_dsub+0xbc>
   1635c:	2500      	movs	r5, #0
   1635e:	2600      	movs	r6, #0
   16360:	2700      	movs	r7, #0
   16362:	e6ea      	b.n	1613a <__aeabi_dsub+0x182>
   16364:	001e      	movs	r6, r3
   16366:	e6ad      	b.n	160c4 <__aeabi_dsub+0x10c>
   16368:	2b1f      	cmp	r3, #31
   1636a:	dc60      	bgt.n	1642e <__aeabi_dsub+0x476>
   1636c:	2720      	movs	r7, #32
   1636e:	1af8      	subs	r0, r7, r3
   16370:	000f      	movs	r7, r1
   16372:	4684      	mov	ip, r0
   16374:	4087      	lsls	r7, r0
   16376:	0010      	movs	r0, r2
   16378:	40d8      	lsrs	r0, r3
   1637a:	4307      	orrs	r7, r0
   1637c:	4660      	mov	r0, ip
   1637e:	4082      	lsls	r2, r0
   16380:	1e50      	subs	r0, r2, #1
   16382:	4182      	sbcs	r2, r0
   16384:	40d9      	lsrs	r1, r3
   16386:	4317      	orrs	r7, r2
   16388:	e6f5      	b.n	16176 <__aeabi_dsub+0x1be>
   1638a:	0026      	movs	r6, r4
   1638c:	4650      	mov	r0, sl
   1638e:	4306      	orrs	r6, r0
   16390:	d005      	beq.n	1639e <__aeabi_dsub+0x3e6>
   16392:	43ed      	mvns	r5, r5
   16394:	2d00      	cmp	r5, #0
   16396:	d0d3      	beq.n	16340 <__aeabi_dsub+0x388>
   16398:	4e90      	ldr	r6, [pc, #576]	; (165dc <__aeabi_dsub+0x624>)
   1639a:	45b4      	cmp	ip, r6
   1639c:	d1bd      	bne.n	1631a <__aeabi_dsub+0x362>
   1639e:	000c      	movs	r4, r1
   163a0:	0017      	movs	r7, r2
   163a2:	4666      	mov	r6, ip
   163a4:	4698      	mov	r8, r3
   163a6:	e68d      	b.n	160c4 <__aeabi_dsub+0x10c>
   163a8:	488c      	ldr	r0, [pc, #560]	; (165dc <__aeabi_dsub+0x624>)
   163aa:	4283      	cmp	r3, r0
   163ac:	d00b      	beq.n	163c6 <__aeabi_dsub+0x40e>
   163ae:	4663      	mov	r3, ip
   163b0:	e6d9      	b.n	16166 <__aeabi_dsub+0x1ae>
   163b2:	2d00      	cmp	r5, #0
   163b4:	d000      	beq.n	163b8 <__aeabi_dsub+0x400>
   163b6:	e096      	b.n	164e6 <__aeabi_dsub+0x52e>
   163b8:	0008      	movs	r0, r1
   163ba:	4310      	orrs	r0, r2
   163bc:	d100      	bne.n	163c0 <__aeabi_dsub+0x408>
   163be:	e0e2      	b.n	16586 <__aeabi_dsub+0x5ce>
   163c0:	000c      	movs	r4, r1
   163c2:	0017      	movs	r7, r2
   163c4:	4698      	mov	r8, r3
   163c6:	4e85      	ldr	r6, [pc, #532]	; (165dc <__aeabi_dsub+0x624>)
   163c8:	e67c      	b.n	160c4 <__aeabi_dsub+0x10c>
   163ca:	2500      	movs	r5, #0
   163cc:	e780      	b.n	162d0 <__aeabi_dsub+0x318>
   163ce:	2100      	movs	r1, #0
   163d0:	e78e      	b.n	162f0 <__aeabi_dsub+0x338>
   163d2:	0023      	movs	r3, r4
   163d4:	4650      	mov	r0, sl
   163d6:	4303      	orrs	r3, r0
   163d8:	2e00      	cmp	r6, #0
   163da:	d000      	beq.n	163de <__aeabi_dsub+0x426>
   163dc:	e0a8      	b.n	16530 <__aeabi_dsub+0x578>
   163de:	2b00      	cmp	r3, #0
   163e0:	d100      	bne.n	163e4 <__aeabi_dsub+0x42c>
   163e2:	e0de      	b.n	165a2 <__aeabi_dsub+0x5ea>
   163e4:	000b      	movs	r3, r1
   163e6:	4313      	orrs	r3, r2
   163e8:	d100      	bne.n	163ec <__aeabi_dsub+0x434>
   163ea:	e66b      	b.n	160c4 <__aeabi_dsub+0x10c>
   163ec:	4452      	add	r2, sl
   163ee:	4552      	cmp	r2, sl
   163f0:	4180      	sbcs	r0, r0
   163f2:	1864      	adds	r4, r4, r1
   163f4:	4240      	negs	r0, r0
   163f6:	1824      	adds	r4, r4, r0
   163f8:	0017      	movs	r7, r2
   163fa:	0223      	lsls	r3, r4, #8
   163fc:	d400      	bmi.n	16400 <__aeabi_dsub+0x448>
   163fe:	e6fd      	b.n	161fc <__aeabi_dsub+0x244>
   16400:	4b77      	ldr	r3, [pc, #476]	; (165e0 <__aeabi_dsub+0x628>)
   16402:	4666      	mov	r6, ip
   16404:	401c      	ands	r4, r3
   16406:	e65d      	b.n	160c4 <__aeabi_dsub+0x10c>
   16408:	0025      	movs	r5, r4
   1640a:	4650      	mov	r0, sl
   1640c:	4305      	orrs	r5, r0
   1640e:	2e00      	cmp	r6, #0
   16410:	d1cf      	bne.n	163b2 <__aeabi_dsub+0x3fa>
   16412:	2d00      	cmp	r5, #0
   16414:	d14f      	bne.n	164b6 <__aeabi_dsub+0x4fe>
   16416:	000c      	movs	r4, r1
   16418:	4314      	orrs	r4, r2
   1641a:	d100      	bne.n	1641e <__aeabi_dsub+0x466>
   1641c:	e0a0      	b.n	16560 <__aeabi_dsub+0x5a8>
   1641e:	000c      	movs	r4, r1
   16420:	0017      	movs	r7, r2
   16422:	4698      	mov	r8, r3
   16424:	e64e      	b.n	160c4 <__aeabi_dsub+0x10c>
   16426:	4666      	mov	r6, ip
   16428:	2400      	movs	r4, #0
   1642a:	2700      	movs	r7, #0
   1642c:	e685      	b.n	1613a <__aeabi_dsub+0x182>
   1642e:	001f      	movs	r7, r3
   16430:	0008      	movs	r0, r1
   16432:	3f20      	subs	r7, #32
   16434:	40f8      	lsrs	r0, r7
   16436:	0007      	movs	r7, r0
   16438:	2b20      	cmp	r3, #32
   1643a:	d100      	bne.n	1643e <__aeabi_dsub+0x486>
   1643c:	e08e      	b.n	1655c <__aeabi_dsub+0x5a4>
   1643e:	2040      	movs	r0, #64	; 0x40
   16440:	1ac3      	subs	r3, r0, r3
   16442:	4099      	lsls	r1, r3
   16444:	430a      	orrs	r2, r1
   16446:	1e51      	subs	r1, r2, #1
   16448:	418a      	sbcs	r2, r1
   1644a:	2100      	movs	r1, #0
   1644c:	4317      	orrs	r7, r2
   1644e:	e692      	b.n	16176 <__aeabi_dsub+0x1be>
   16450:	2e00      	cmp	r6, #0
   16452:	d114      	bne.n	1647e <__aeabi_dsub+0x4c6>
   16454:	0026      	movs	r6, r4
   16456:	4650      	mov	r0, sl
   16458:	4306      	orrs	r6, r0
   1645a:	d062      	beq.n	16522 <__aeabi_dsub+0x56a>
   1645c:	43db      	mvns	r3, r3
   1645e:	2b00      	cmp	r3, #0
   16460:	d15c      	bne.n	1651c <__aeabi_dsub+0x564>
   16462:	1887      	adds	r7, r0, r2
   16464:	4297      	cmp	r7, r2
   16466:	4192      	sbcs	r2, r2
   16468:	1864      	adds	r4, r4, r1
   1646a:	4252      	negs	r2, r2
   1646c:	18a4      	adds	r4, r4, r2
   1646e:	4666      	mov	r6, ip
   16470:	e687      	b.n	16182 <__aeabi_dsub+0x1ca>
   16472:	4650      	mov	r0, sl
   16474:	4320      	orrs	r0, r4
   16476:	1e44      	subs	r4, r0, #1
   16478:	41a0      	sbcs	r0, r4
   1647a:	2400      	movs	r4, #0
   1647c:	e760      	b.n	16340 <__aeabi_dsub+0x388>
   1647e:	4e57      	ldr	r6, [pc, #348]	; (165dc <__aeabi_dsub+0x624>)
   16480:	45b4      	cmp	ip, r6
   16482:	d04e      	beq.n	16522 <__aeabi_dsub+0x56a>
   16484:	2680      	movs	r6, #128	; 0x80
   16486:	0436      	lsls	r6, r6, #16
   16488:	425b      	negs	r3, r3
   1648a:	4334      	orrs	r4, r6
   1648c:	2b38      	cmp	r3, #56	; 0x38
   1648e:	dd00      	ble.n	16492 <__aeabi_dsub+0x4da>
   16490:	e07f      	b.n	16592 <__aeabi_dsub+0x5da>
   16492:	2b1f      	cmp	r3, #31
   16494:	dd00      	ble.n	16498 <__aeabi_dsub+0x4e0>
   16496:	e08b      	b.n	165b0 <__aeabi_dsub+0x5f8>
   16498:	2620      	movs	r6, #32
   1649a:	0027      	movs	r7, r4
   1649c:	4650      	mov	r0, sl
   1649e:	1af6      	subs	r6, r6, r3
   164a0:	40b7      	lsls	r7, r6
   164a2:	40d8      	lsrs	r0, r3
   164a4:	4307      	orrs	r7, r0
   164a6:	4650      	mov	r0, sl
   164a8:	40b0      	lsls	r0, r6
   164aa:	1e46      	subs	r6, r0, #1
   164ac:	41b0      	sbcs	r0, r6
   164ae:	4307      	orrs	r7, r0
   164b0:	40dc      	lsrs	r4, r3
   164b2:	18bf      	adds	r7, r7, r2
   164b4:	e7d6      	b.n	16464 <__aeabi_dsub+0x4ac>
   164b6:	000d      	movs	r5, r1
   164b8:	4315      	orrs	r5, r2
   164ba:	d100      	bne.n	164be <__aeabi_dsub+0x506>
   164bc:	e602      	b.n	160c4 <__aeabi_dsub+0x10c>
   164be:	4650      	mov	r0, sl
   164c0:	1a80      	subs	r0, r0, r2
   164c2:	4582      	cmp	sl, r0
   164c4:	41bf      	sbcs	r7, r7
   164c6:	1a65      	subs	r5, r4, r1
   164c8:	427f      	negs	r7, r7
   164ca:	1bed      	subs	r5, r5, r7
   164cc:	4684      	mov	ip, r0
   164ce:	0228      	lsls	r0, r5, #8
   164d0:	d400      	bmi.n	164d4 <__aeabi_dsub+0x51c>
   164d2:	e68d      	b.n	161f0 <__aeabi_dsub+0x238>
   164d4:	4650      	mov	r0, sl
   164d6:	1a17      	subs	r7, r2, r0
   164d8:	42ba      	cmp	r2, r7
   164da:	4192      	sbcs	r2, r2
   164dc:	1b0c      	subs	r4, r1, r4
   164de:	4252      	negs	r2, r2
   164e0:	1aa4      	subs	r4, r4, r2
   164e2:	4698      	mov	r8, r3
   164e4:	e5ee      	b.n	160c4 <__aeabi_dsub+0x10c>
   164e6:	000d      	movs	r5, r1
   164e8:	4315      	orrs	r5, r2
   164ea:	d100      	bne.n	164ee <__aeabi_dsub+0x536>
   164ec:	e76b      	b.n	163c6 <__aeabi_dsub+0x40e>
   164ee:	4650      	mov	r0, sl
   164f0:	0767      	lsls	r7, r4, #29
   164f2:	08c0      	lsrs	r0, r0, #3
   164f4:	4307      	orrs	r7, r0
   164f6:	2080      	movs	r0, #128	; 0x80
   164f8:	08e4      	lsrs	r4, r4, #3
   164fa:	0300      	lsls	r0, r0, #12
   164fc:	4204      	tst	r4, r0
   164fe:	d007      	beq.n	16510 <__aeabi_dsub+0x558>
   16500:	08cd      	lsrs	r5, r1, #3
   16502:	4205      	tst	r5, r0
   16504:	d104      	bne.n	16510 <__aeabi_dsub+0x558>
   16506:	002c      	movs	r4, r5
   16508:	4698      	mov	r8, r3
   1650a:	08d7      	lsrs	r7, r2, #3
   1650c:	0749      	lsls	r1, r1, #29
   1650e:	430f      	orrs	r7, r1
   16510:	0f7b      	lsrs	r3, r7, #29
   16512:	00e4      	lsls	r4, r4, #3
   16514:	431c      	orrs	r4, r3
   16516:	00ff      	lsls	r7, r7, #3
   16518:	4e30      	ldr	r6, [pc, #192]	; (165dc <__aeabi_dsub+0x624>)
   1651a:	e5d3      	b.n	160c4 <__aeabi_dsub+0x10c>
   1651c:	4e2f      	ldr	r6, [pc, #188]	; (165dc <__aeabi_dsub+0x624>)
   1651e:	45b4      	cmp	ip, r6
   16520:	d1b4      	bne.n	1648c <__aeabi_dsub+0x4d4>
   16522:	000c      	movs	r4, r1
   16524:	0017      	movs	r7, r2
   16526:	4666      	mov	r6, ip
   16528:	e5cc      	b.n	160c4 <__aeabi_dsub+0x10c>
   1652a:	2700      	movs	r7, #0
   1652c:	2400      	movs	r4, #0
   1652e:	e5e8      	b.n	16102 <__aeabi_dsub+0x14a>
   16530:	2b00      	cmp	r3, #0
   16532:	d039      	beq.n	165a8 <__aeabi_dsub+0x5f0>
   16534:	000b      	movs	r3, r1
   16536:	4313      	orrs	r3, r2
   16538:	d100      	bne.n	1653c <__aeabi_dsub+0x584>
   1653a:	e744      	b.n	163c6 <__aeabi_dsub+0x40e>
   1653c:	08c0      	lsrs	r0, r0, #3
   1653e:	0767      	lsls	r7, r4, #29
   16540:	4307      	orrs	r7, r0
   16542:	2080      	movs	r0, #128	; 0x80
   16544:	08e4      	lsrs	r4, r4, #3
   16546:	0300      	lsls	r0, r0, #12
   16548:	4204      	tst	r4, r0
   1654a:	d0e1      	beq.n	16510 <__aeabi_dsub+0x558>
   1654c:	08cb      	lsrs	r3, r1, #3
   1654e:	4203      	tst	r3, r0
   16550:	d1de      	bne.n	16510 <__aeabi_dsub+0x558>
   16552:	08d7      	lsrs	r7, r2, #3
   16554:	0749      	lsls	r1, r1, #29
   16556:	430f      	orrs	r7, r1
   16558:	001c      	movs	r4, r3
   1655a:	e7d9      	b.n	16510 <__aeabi_dsub+0x558>
   1655c:	2100      	movs	r1, #0
   1655e:	e771      	b.n	16444 <__aeabi_dsub+0x48c>
   16560:	2500      	movs	r5, #0
   16562:	2700      	movs	r7, #0
   16564:	e5e9      	b.n	1613a <__aeabi_dsub+0x182>
   16566:	002e      	movs	r6, r5
   16568:	0027      	movs	r7, r4
   1656a:	3e20      	subs	r6, #32
   1656c:	40f7      	lsrs	r7, r6
   1656e:	2d20      	cmp	r5, #32
   16570:	d02f      	beq.n	165d2 <__aeabi_dsub+0x61a>
   16572:	2640      	movs	r6, #64	; 0x40
   16574:	1b75      	subs	r5, r6, r5
   16576:	40ac      	lsls	r4, r5
   16578:	4650      	mov	r0, sl
   1657a:	4320      	orrs	r0, r4
   1657c:	1e44      	subs	r4, r0, #1
   1657e:	41a0      	sbcs	r0, r4
   16580:	2400      	movs	r4, #0
   16582:	4338      	orrs	r0, r7
   16584:	e6dc      	b.n	16340 <__aeabi_dsub+0x388>
   16586:	2480      	movs	r4, #128	; 0x80
   16588:	2500      	movs	r5, #0
   1658a:	0324      	lsls	r4, r4, #12
   1658c:	4e13      	ldr	r6, [pc, #76]	; (165dc <__aeabi_dsub+0x624>)
   1658e:	2700      	movs	r7, #0
   16590:	e5d3      	b.n	1613a <__aeabi_dsub+0x182>
   16592:	4650      	mov	r0, sl
   16594:	4320      	orrs	r0, r4
   16596:	0007      	movs	r7, r0
   16598:	1e78      	subs	r0, r7, #1
   1659a:	4187      	sbcs	r7, r0
   1659c:	2400      	movs	r4, #0
   1659e:	18bf      	adds	r7, r7, r2
   165a0:	e760      	b.n	16464 <__aeabi_dsub+0x4ac>
   165a2:	000c      	movs	r4, r1
   165a4:	0017      	movs	r7, r2
   165a6:	e58d      	b.n	160c4 <__aeabi_dsub+0x10c>
   165a8:	000c      	movs	r4, r1
   165aa:	0017      	movs	r7, r2
   165ac:	4e0b      	ldr	r6, [pc, #44]	; (165dc <__aeabi_dsub+0x624>)
   165ae:	e589      	b.n	160c4 <__aeabi_dsub+0x10c>
   165b0:	001e      	movs	r6, r3
   165b2:	0027      	movs	r7, r4
   165b4:	3e20      	subs	r6, #32
   165b6:	40f7      	lsrs	r7, r6
   165b8:	2b20      	cmp	r3, #32
   165ba:	d00c      	beq.n	165d6 <__aeabi_dsub+0x61e>
   165bc:	2640      	movs	r6, #64	; 0x40
   165be:	1af3      	subs	r3, r6, r3
   165c0:	409c      	lsls	r4, r3
   165c2:	4650      	mov	r0, sl
   165c4:	4320      	orrs	r0, r4
   165c6:	1e44      	subs	r4, r0, #1
   165c8:	41a0      	sbcs	r0, r4
   165ca:	4307      	orrs	r7, r0
   165cc:	2400      	movs	r4, #0
   165ce:	18bf      	adds	r7, r7, r2
   165d0:	e748      	b.n	16464 <__aeabi_dsub+0x4ac>
   165d2:	2400      	movs	r4, #0
   165d4:	e7d0      	b.n	16578 <__aeabi_dsub+0x5c0>
   165d6:	2400      	movs	r4, #0
   165d8:	e7f3      	b.n	165c2 <__aeabi_dsub+0x60a>
   165da:	46c0      	nop			; (mov r8, r8)
   165dc:	000007ff 	.word	0x000007ff
   165e0:	ff7fffff 	.word	0xff7fffff

000165e4 <__aeabi_d2iz>:
   165e4:	b530      	push	{r4, r5, lr}
   165e6:	4d13      	ldr	r5, [pc, #76]	; (16634 <__aeabi_d2iz+0x50>)
   165e8:	030a      	lsls	r2, r1, #12
   165ea:	004b      	lsls	r3, r1, #1
   165ec:	0b12      	lsrs	r2, r2, #12
   165ee:	0d5b      	lsrs	r3, r3, #21
   165f0:	0fc9      	lsrs	r1, r1, #31
   165f2:	2400      	movs	r4, #0
   165f4:	42ab      	cmp	r3, r5
   165f6:	dd10      	ble.n	1661a <__aeabi_d2iz+0x36>
   165f8:	4c0f      	ldr	r4, [pc, #60]	; (16638 <__aeabi_d2iz+0x54>)
   165fa:	42a3      	cmp	r3, r4
   165fc:	dc0f      	bgt.n	1661e <__aeabi_d2iz+0x3a>
   165fe:	2480      	movs	r4, #128	; 0x80
   16600:	4d0e      	ldr	r5, [pc, #56]	; (1663c <__aeabi_d2iz+0x58>)
   16602:	0364      	lsls	r4, r4, #13
   16604:	4322      	orrs	r2, r4
   16606:	1aed      	subs	r5, r5, r3
   16608:	2d1f      	cmp	r5, #31
   1660a:	dd0b      	ble.n	16624 <__aeabi_d2iz+0x40>
   1660c:	480c      	ldr	r0, [pc, #48]	; (16640 <__aeabi_d2iz+0x5c>)
   1660e:	1ac3      	subs	r3, r0, r3
   16610:	40da      	lsrs	r2, r3
   16612:	4254      	negs	r4, r2
   16614:	2900      	cmp	r1, #0
   16616:	d100      	bne.n	1661a <__aeabi_d2iz+0x36>
   16618:	0014      	movs	r4, r2
   1661a:	0020      	movs	r0, r4
   1661c:	bd30      	pop	{r4, r5, pc}
   1661e:	4b09      	ldr	r3, [pc, #36]	; (16644 <__aeabi_d2iz+0x60>)
   16620:	18cc      	adds	r4, r1, r3
   16622:	e7fa      	b.n	1661a <__aeabi_d2iz+0x36>
   16624:	4c08      	ldr	r4, [pc, #32]	; (16648 <__aeabi_d2iz+0x64>)
   16626:	40e8      	lsrs	r0, r5
   16628:	46a4      	mov	ip, r4
   1662a:	4463      	add	r3, ip
   1662c:	409a      	lsls	r2, r3
   1662e:	4302      	orrs	r2, r0
   16630:	e7ef      	b.n	16612 <__aeabi_d2iz+0x2e>
   16632:	46c0      	nop			; (mov r8, r8)
   16634:	000003fe 	.word	0x000003fe
   16638:	0000041d 	.word	0x0000041d
   1663c:	00000433 	.word	0x00000433
   16640:	00000413 	.word	0x00000413
   16644:	7fffffff 	.word	0x7fffffff
   16648:	fffffbed 	.word	0xfffffbed

0001664c <__aeabi_i2d>:
   1664c:	b570      	push	{r4, r5, r6, lr}
   1664e:	2800      	cmp	r0, #0
   16650:	d030      	beq.n	166b4 <__aeabi_i2d+0x68>
   16652:	17c3      	asrs	r3, r0, #31
   16654:	18c4      	adds	r4, r0, r3
   16656:	405c      	eors	r4, r3
   16658:	0fc5      	lsrs	r5, r0, #31
   1665a:	0020      	movs	r0, r4
   1665c:	f000 f94c 	bl	168f8 <__clzsi2>
   16660:	4b17      	ldr	r3, [pc, #92]	; (166c0 <__aeabi_i2d+0x74>)
   16662:	4a18      	ldr	r2, [pc, #96]	; (166c4 <__aeabi_i2d+0x78>)
   16664:	1a1b      	subs	r3, r3, r0
   16666:	1ad2      	subs	r2, r2, r3
   16668:	2a1f      	cmp	r2, #31
   1666a:	dd18      	ble.n	1669e <__aeabi_i2d+0x52>
   1666c:	4a16      	ldr	r2, [pc, #88]	; (166c8 <__aeabi_i2d+0x7c>)
   1666e:	1ad2      	subs	r2, r2, r3
   16670:	4094      	lsls	r4, r2
   16672:	2200      	movs	r2, #0
   16674:	0324      	lsls	r4, r4, #12
   16676:	055b      	lsls	r3, r3, #21
   16678:	0b24      	lsrs	r4, r4, #12
   1667a:	0d5b      	lsrs	r3, r3, #21
   1667c:	2100      	movs	r1, #0
   1667e:	0010      	movs	r0, r2
   16680:	0324      	lsls	r4, r4, #12
   16682:	0d0a      	lsrs	r2, r1, #20
   16684:	0b24      	lsrs	r4, r4, #12
   16686:	0512      	lsls	r2, r2, #20
   16688:	4322      	orrs	r2, r4
   1668a:	4c10      	ldr	r4, [pc, #64]	; (166cc <__aeabi_i2d+0x80>)
   1668c:	051b      	lsls	r3, r3, #20
   1668e:	4022      	ands	r2, r4
   16690:	4313      	orrs	r3, r2
   16692:	005b      	lsls	r3, r3, #1
   16694:	07ed      	lsls	r5, r5, #31
   16696:	085b      	lsrs	r3, r3, #1
   16698:	432b      	orrs	r3, r5
   1669a:	0019      	movs	r1, r3
   1669c:	bd70      	pop	{r4, r5, r6, pc}
   1669e:	0021      	movs	r1, r4
   166a0:	4091      	lsls	r1, r2
   166a2:	000a      	movs	r2, r1
   166a4:	210b      	movs	r1, #11
   166a6:	1a08      	subs	r0, r1, r0
   166a8:	40c4      	lsrs	r4, r0
   166aa:	055b      	lsls	r3, r3, #21
   166ac:	0324      	lsls	r4, r4, #12
   166ae:	0b24      	lsrs	r4, r4, #12
   166b0:	0d5b      	lsrs	r3, r3, #21
   166b2:	e7e3      	b.n	1667c <__aeabi_i2d+0x30>
   166b4:	2500      	movs	r5, #0
   166b6:	2300      	movs	r3, #0
   166b8:	2400      	movs	r4, #0
   166ba:	2200      	movs	r2, #0
   166bc:	e7de      	b.n	1667c <__aeabi_i2d+0x30>
   166be:	46c0      	nop			; (mov r8, r8)
   166c0:	0000041e 	.word	0x0000041e
   166c4:	00000433 	.word	0x00000433
   166c8:	00000413 	.word	0x00000413
   166cc:	800fffff 	.word	0x800fffff

000166d0 <__aeabi_ui2d>:
   166d0:	b510      	push	{r4, lr}
   166d2:	1e04      	subs	r4, r0, #0
   166d4:	d028      	beq.n	16728 <__aeabi_ui2d+0x58>
   166d6:	f000 f90f 	bl	168f8 <__clzsi2>
   166da:	4b15      	ldr	r3, [pc, #84]	; (16730 <__aeabi_ui2d+0x60>)
   166dc:	4a15      	ldr	r2, [pc, #84]	; (16734 <__aeabi_ui2d+0x64>)
   166de:	1a1b      	subs	r3, r3, r0
   166e0:	1ad2      	subs	r2, r2, r3
   166e2:	2a1f      	cmp	r2, #31
   166e4:	dd15      	ble.n	16712 <__aeabi_ui2d+0x42>
   166e6:	4a14      	ldr	r2, [pc, #80]	; (16738 <__aeabi_ui2d+0x68>)
   166e8:	1ad2      	subs	r2, r2, r3
   166ea:	4094      	lsls	r4, r2
   166ec:	2200      	movs	r2, #0
   166ee:	0324      	lsls	r4, r4, #12
   166f0:	055b      	lsls	r3, r3, #21
   166f2:	0b24      	lsrs	r4, r4, #12
   166f4:	0d5b      	lsrs	r3, r3, #21
   166f6:	2100      	movs	r1, #0
   166f8:	0010      	movs	r0, r2
   166fa:	0324      	lsls	r4, r4, #12
   166fc:	0d0a      	lsrs	r2, r1, #20
   166fe:	0b24      	lsrs	r4, r4, #12
   16700:	0512      	lsls	r2, r2, #20
   16702:	4322      	orrs	r2, r4
   16704:	4c0d      	ldr	r4, [pc, #52]	; (1673c <__aeabi_ui2d+0x6c>)
   16706:	051b      	lsls	r3, r3, #20
   16708:	4022      	ands	r2, r4
   1670a:	4313      	orrs	r3, r2
   1670c:	005b      	lsls	r3, r3, #1
   1670e:	0859      	lsrs	r1, r3, #1
   16710:	bd10      	pop	{r4, pc}
   16712:	0021      	movs	r1, r4
   16714:	4091      	lsls	r1, r2
   16716:	000a      	movs	r2, r1
   16718:	210b      	movs	r1, #11
   1671a:	1a08      	subs	r0, r1, r0
   1671c:	40c4      	lsrs	r4, r0
   1671e:	055b      	lsls	r3, r3, #21
   16720:	0324      	lsls	r4, r4, #12
   16722:	0b24      	lsrs	r4, r4, #12
   16724:	0d5b      	lsrs	r3, r3, #21
   16726:	e7e6      	b.n	166f6 <__aeabi_ui2d+0x26>
   16728:	2300      	movs	r3, #0
   1672a:	2400      	movs	r4, #0
   1672c:	2200      	movs	r2, #0
   1672e:	e7e2      	b.n	166f6 <__aeabi_ui2d+0x26>
   16730:	0000041e 	.word	0x0000041e
   16734:	00000433 	.word	0x00000433
   16738:	00000413 	.word	0x00000413
   1673c:	800fffff 	.word	0x800fffff

00016740 <__aeabi_f2d>:
   16740:	0041      	lsls	r1, r0, #1
   16742:	0e09      	lsrs	r1, r1, #24
   16744:	1c4b      	adds	r3, r1, #1
   16746:	b570      	push	{r4, r5, r6, lr}
   16748:	b2db      	uxtb	r3, r3
   1674a:	0246      	lsls	r6, r0, #9
   1674c:	0a75      	lsrs	r5, r6, #9
   1674e:	0fc4      	lsrs	r4, r0, #31
   16750:	2b01      	cmp	r3, #1
   16752:	dd14      	ble.n	1677e <__aeabi_f2d+0x3e>
   16754:	23e0      	movs	r3, #224	; 0xe0
   16756:	009b      	lsls	r3, r3, #2
   16758:	076d      	lsls	r5, r5, #29
   1675a:	0b36      	lsrs	r6, r6, #12
   1675c:	18cb      	adds	r3, r1, r3
   1675e:	2100      	movs	r1, #0
   16760:	0d0a      	lsrs	r2, r1, #20
   16762:	0028      	movs	r0, r5
   16764:	0512      	lsls	r2, r2, #20
   16766:	4d1c      	ldr	r5, [pc, #112]	; (167d8 <__aeabi_f2d+0x98>)
   16768:	4332      	orrs	r2, r6
   1676a:	055b      	lsls	r3, r3, #21
   1676c:	402a      	ands	r2, r5
   1676e:	085b      	lsrs	r3, r3, #1
   16770:	4313      	orrs	r3, r2
   16772:	005b      	lsls	r3, r3, #1
   16774:	07e4      	lsls	r4, r4, #31
   16776:	085b      	lsrs	r3, r3, #1
   16778:	4323      	orrs	r3, r4
   1677a:	0019      	movs	r1, r3
   1677c:	bd70      	pop	{r4, r5, r6, pc}
   1677e:	2900      	cmp	r1, #0
   16780:	d114      	bne.n	167ac <__aeabi_f2d+0x6c>
   16782:	2d00      	cmp	r5, #0
   16784:	d01e      	beq.n	167c4 <__aeabi_f2d+0x84>
   16786:	0028      	movs	r0, r5
   16788:	f000 f8b6 	bl	168f8 <__clzsi2>
   1678c:	280a      	cmp	r0, #10
   1678e:	dc1c      	bgt.n	167ca <__aeabi_f2d+0x8a>
   16790:	230b      	movs	r3, #11
   16792:	002a      	movs	r2, r5
   16794:	1a1b      	subs	r3, r3, r0
   16796:	40da      	lsrs	r2, r3
   16798:	0003      	movs	r3, r0
   1679a:	3315      	adds	r3, #21
   1679c:	409d      	lsls	r5, r3
   1679e:	4b0f      	ldr	r3, [pc, #60]	; (167dc <__aeabi_f2d+0x9c>)
   167a0:	0312      	lsls	r2, r2, #12
   167a2:	1a1b      	subs	r3, r3, r0
   167a4:	055b      	lsls	r3, r3, #21
   167a6:	0b16      	lsrs	r6, r2, #12
   167a8:	0d5b      	lsrs	r3, r3, #21
   167aa:	e7d8      	b.n	1675e <__aeabi_f2d+0x1e>
   167ac:	2d00      	cmp	r5, #0
   167ae:	d006      	beq.n	167be <__aeabi_f2d+0x7e>
   167b0:	0b32      	lsrs	r2, r6, #12
   167b2:	2680      	movs	r6, #128	; 0x80
   167b4:	0336      	lsls	r6, r6, #12
   167b6:	076d      	lsls	r5, r5, #29
   167b8:	4316      	orrs	r6, r2
   167ba:	4b09      	ldr	r3, [pc, #36]	; (167e0 <__aeabi_f2d+0xa0>)
   167bc:	e7cf      	b.n	1675e <__aeabi_f2d+0x1e>
   167be:	4b08      	ldr	r3, [pc, #32]	; (167e0 <__aeabi_f2d+0xa0>)
   167c0:	2600      	movs	r6, #0
   167c2:	e7cc      	b.n	1675e <__aeabi_f2d+0x1e>
   167c4:	2300      	movs	r3, #0
   167c6:	2600      	movs	r6, #0
   167c8:	e7c9      	b.n	1675e <__aeabi_f2d+0x1e>
   167ca:	0003      	movs	r3, r0
   167cc:	002a      	movs	r2, r5
   167ce:	3b0b      	subs	r3, #11
   167d0:	409a      	lsls	r2, r3
   167d2:	2500      	movs	r5, #0
   167d4:	e7e3      	b.n	1679e <__aeabi_f2d+0x5e>
   167d6:	46c0      	nop			; (mov r8, r8)
   167d8:	800fffff 	.word	0x800fffff
   167dc:	00000389 	.word	0x00000389
   167e0:	000007ff 	.word	0x000007ff

000167e4 <__aeabi_d2f>:
   167e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   167e6:	004c      	lsls	r4, r1, #1
   167e8:	0d64      	lsrs	r4, r4, #21
   167ea:	030b      	lsls	r3, r1, #12
   167ec:	1c62      	adds	r2, r4, #1
   167ee:	0f45      	lsrs	r5, r0, #29
   167f0:	0a5b      	lsrs	r3, r3, #9
   167f2:	0552      	lsls	r2, r2, #21
   167f4:	432b      	orrs	r3, r5
   167f6:	0fc9      	lsrs	r1, r1, #31
   167f8:	00c5      	lsls	r5, r0, #3
   167fa:	0d52      	lsrs	r2, r2, #21
   167fc:	2a01      	cmp	r2, #1
   167fe:	dd28      	ble.n	16852 <__aeabi_d2f+0x6e>
   16800:	4a3a      	ldr	r2, [pc, #232]	; (168ec <__aeabi_d2f+0x108>)
   16802:	18a6      	adds	r6, r4, r2
   16804:	2efe      	cmp	r6, #254	; 0xfe
   16806:	dc1b      	bgt.n	16840 <__aeabi_d2f+0x5c>
   16808:	2e00      	cmp	r6, #0
   1680a:	dd3e      	ble.n	1688a <__aeabi_d2f+0xa6>
   1680c:	0180      	lsls	r0, r0, #6
   1680e:	0002      	movs	r2, r0
   16810:	1e50      	subs	r0, r2, #1
   16812:	4182      	sbcs	r2, r0
   16814:	0f6d      	lsrs	r5, r5, #29
   16816:	432a      	orrs	r2, r5
   16818:	00db      	lsls	r3, r3, #3
   1681a:	4313      	orrs	r3, r2
   1681c:	075a      	lsls	r2, r3, #29
   1681e:	d004      	beq.n	1682a <__aeabi_d2f+0x46>
   16820:	220f      	movs	r2, #15
   16822:	401a      	ands	r2, r3
   16824:	2a04      	cmp	r2, #4
   16826:	d000      	beq.n	1682a <__aeabi_d2f+0x46>
   16828:	3304      	adds	r3, #4
   1682a:	2280      	movs	r2, #128	; 0x80
   1682c:	04d2      	lsls	r2, r2, #19
   1682e:	401a      	ands	r2, r3
   16830:	d05a      	beq.n	168e8 <__aeabi_d2f+0x104>
   16832:	3601      	adds	r6, #1
   16834:	2eff      	cmp	r6, #255	; 0xff
   16836:	d003      	beq.n	16840 <__aeabi_d2f+0x5c>
   16838:	019b      	lsls	r3, r3, #6
   1683a:	0a5b      	lsrs	r3, r3, #9
   1683c:	b2f4      	uxtb	r4, r6
   1683e:	e001      	b.n	16844 <__aeabi_d2f+0x60>
   16840:	24ff      	movs	r4, #255	; 0xff
   16842:	2300      	movs	r3, #0
   16844:	0258      	lsls	r0, r3, #9
   16846:	05e4      	lsls	r4, r4, #23
   16848:	0a40      	lsrs	r0, r0, #9
   1684a:	07c9      	lsls	r1, r1, #31
   1684c:	4320      	orrs	r0, r4
   1684e:	4308      	orrs	r0, r1
   16850:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16852:	2c00      	cmp	r4, #0
   16854:	d007      	beq.n	16866 <__aeabi_d2f+0x82>
   16856:	431d      	orrs	r5, r3
   16858:	d0f2      	beq.n	16840 <__aeabi_d2f+0x5c>
   1685a:	2080      	movs	r0, #128	; 0x80
   1685c:	00db      	lsls	r3, r3, #3
   1685e:	0480      	lsls	r0, r0, #18
   16860:	4303      	orrs	r3, r0
   16862:	26ff      	movs	r6, #255	; 0xff
   16864:	e7da      	b.n	1681c <__aeabi_d2f+0x38>
   16866:	432b      	orrs	r3, r5
   16868:	d003      	beq.n	16872 <__aeabi_d2f+0x8e>
   1686a:	2305      	movs	r3, #5
   1686c:	08db      	lsrs	r3, r3, #3
   1686e:	2cff      	cmp	r4, #255	; 0xff
   16870:	d003      	beq.n	1687a <__aeabi_d2f+0x96>
   16872:	025b      	lsls	r3, r3, #9
   16874:	0a5b      	lsrs	r3, r3, #9
   16876:	b2e4      	uxtb	r4, r4
   16878:	e7e4      	b.n	16844 <__aeabi_d2f+0x60>
   1687a:	2b00      	cmp	r3, #0
   1687c:	d032      	beq.n	168e4 <__aeabi_d2f+0x100>
   1687e:	2080      	movs	r0, #128	; 0x80
   16880:	03c0      	lsls	r0, r0, #15
   16882:	4303      	orrs	r3, r0
   16884:	025b      	lsls	r3, r3, #9
   16886:	0a5b      	lsrs	r3, r3, #9
   16888:	e7dc      	b.n	16844 <__aeabi_d2f+0x60>
   1688a:	0032      	movs	r2, r6
   1688c:	3217      	adds	r2, #23
   1688e:	db14      	blt.n	168ba <__aeabi_d2f+0xd6>
   16890:	2280      	movs	r2, #128	; 0x80
   16892:	271e      	movs	r7, #30
   16894:	0412      	lsls	r2, r2, #16
   16896:	4313      	orrs	r3, r2
   16898:	1bbf      	subs	r7, r7, r6
   1689a:	2f1f      	cmp	r7, #31
   1689c:	dc0f      	bgt.n	168be <__aeabi_d2f+0xda>
   1689e:	4a14      	ldr	r2, [pc, #80]	; (168f0 <__aeabi_d2f+0x10c>)
   168a0:	4694      	mov	ip, r2
   168a2:	4464      	add	r4, ip
   168a4:	002a      	movs	r2, r5
   168a6:	40a5      	lsls	r5, r4
   168a8:	002e      	movs	r6, r5
   168aa:	40a3      	lsls	r3, r4
   168ac:	1e75      	subs	r5, r6, #1
   168ae:	41ae      	sbcs	r6, r5
   168b0:	40fa      	lsrs	r2, r7
   168b2:	4333      	orrs	r3, r6
   168b4:	4313      	orrs	r3, r2
   168b6:	2600      	movs	r6, #0
   168b8:	e7b0      	b.n	1681c <__aeabi_d2f+0x38>
   168ba:	2400      	movs	r4, #0
   168bc:	e7d5      	b.n	1686a <__aeabi_d2f+0x86>
   168be:	2202      	movs	r2, #2
   168c0:	4252      	negs	r2, r2
   168c2:	1b96      	subs	r6, r2, r6
   168c4:	001a      	movs	r2, r3
   168c6:	40f2      	lsrs	r2, r6
   168c8:	2f20      	cmp	r7, #32
   168ca:	d009      	beq.n	168e0 <__aeabi_d2f+0xfc>
   168cc:	4809      	ldr	r0, [pc, #36]	; (168f4 <__aeabi_d2f+0x110>)
   168ce:	4684      	mov	ip, r0
   168d0:	4464      	add	r4, ip
   168d2:	40a3      	lsls	r3, r4
   168d4:	432b      	orrs	r3, r5
   168d6:	1e5d      	subs	r5, r3, #1
   168d8:	41ab      	sbcs	r3, r5
   168da:	2600      	movs	r6, #0
   168dc:	4313      	orrs	r3, r2
   168de:	e79d      	b.n	1681c <__aeabi_d2f+0x38>
   168e0:	2300      	movs	r3, #0
   168e2:	e7f7      	b.n	168d4 <__aeabi_d2f+0xf0>
   168e4:	2300      	movs	r3, #0
   168e6:	e7ad      	b.n	16844 <__aeabi_d2f+0x60>
   168e8:	0034      	movs	r4, r6
   168ea:	e7bf      	b.n	1686c <__aeabi_d2f+0x88>
   168ec:	fffffc80 	.word	0xfffffc80
   168f0:	fffffc82 	.word	0xfffffc82
   168f4:	fffffca2 	.word	0xfffffca2

000168f8 <__clzsi2>:
   168f8:	211c      	movs	r1, #28
   168fa:	2301      	movs	r3, #1
   168fc:	041b      	lsls	r3, r3, #16
   168fe:	4298      	cmp	r0, r3
   16900:	d301      	bcc.n	16906 <__clzsi2+0xe>
   16902:	0c00      	lsrs	r0, r0, #16
   16904:	3910      	subs	r1, #16
   16906:	0a1b      	lsrs	r3, r3, #8
   16908:	4298      	cmp	r0, r3
   1690a:	d301      	bcc.n	16910 <__clzsi2+0x18>
   1690c:	0a00      	lsrs	r0, r0, #8
   1690e:	3908      	subs	r1, #8
   16910:	091b      	lsrs	r3, r3, #4
   16912:	4298      	cmp	r0, r3
   16914:	d301      	bcc.n	1691a <__clzsi2+0x22>
   16916:	0900      	lsrs	r0, r0, #4
   16918:	3904      	subs	r1, #4
   1691a:	a202      	add	r2, pc, #8	; (adr r2, 16924 <__clzsi2+0x2c>)
   1691c:	5c10      	ldrb	r0, [r2, r0]
   1691e:	1840      	adds	r0, r0, r1
   16920:	4770      	bx	lr
   16922:	46c0      	nop			; (mov r8, r8)
   16924:	02020304 	.word	0x02020304
   16928:	01010101 	.word	0x01010101
	...

00016934 <__clzdi2>:
   16934:	b510      	push	{r4, lr}
   16936:	2900      	cmp	r1, #0
   16938:	d103      	bne.n	16942 <__clzdi2+0xe>
   1693a:	f7ff ffdd 	bl	168f8 <__clzsi2>
   1693e:	3020      	adds	r0, #32
   16940:	e002      	b.n	16948 <__clzdi2+0x14>
   16942:	1c08      	adds	r0, r1, #0
   16944:	f7ff ffd8 	bl	168f8 <__clzsi2>
   16948:	bd10      	pop	{r4, pc}
   1694a:	46c0      	nop			; (mov r8, r8)

0001694c <__assert_func>:
   1694c:	b530      	push	{r4, r5, lr}
   1694e:	001c      	movs	r4, r3
   16950:	4b09      	ldr	r3, [pc, #36]	; (16978 <__assert_func+0x2c>)
   16952:	0005      	movs	r5, r0
   16954:	681b      	ldr	r3, [r3, #0]
   16956:	b085      	sub	sp, #20
   16958:	68d8      	ldr	r0, [r3, #12]
   1695a:	4b08      	ldr	r3, [pc, #32]	; (1697c <__assert_func+0x30>)
   1695c:	2a00      	cmp	r2, #0
   1695e:	d101      	bne.n	16964 <__assert_func+0x18>
   16960:	4b07      	ldr	r3, [pc, #28]	; (16980 <__assert_func+0x34>)
   16962:	001a      	movs	r2, r3
   16964:	9202      	str	r2, [sp, #8]
   16966:	9301      	str	r3, [sp, #4]
   16968:	9100      	str	r1, [sp, #0]
   1696a:	002b      	movs	r3, r5
   1696c:	0022      	movs	r2, r4
   1696e:	4905      	ldr	r1, [pc, #20]	; (16984 <__assert_func+0x38>)
   16970:	f000 f80a 	bl	16988 <fiprintf>
   16974:	f000 fdde 	bl	17534 <abort>
   16978:	2000002c 	.word	0x2000002c
   1697c:	0001944c 	.word	0x0001944c
   16980:	00019487 	.word	0x00019487
   16984:	00019459 	.word	0x00019459

00016988 <fiprintf>:
   16988:	b40e      	push	{r1, r2, r3}
   1698a:	b503      	push	{r0, r1, lr}
   1698c:	0001      	movs	r1, r0
   1698e:	ab03      	add	r3, sp, #12
   16990:	4804      	ldr	r0, [pc, #16]	; (169a4 <fiprintf+0x1c>)
   16992:	cb04      	ldmia	r3!, {r2}
   16994:	6800      	ldr	r0, [r0, #0]
   16996:	9301      	str	r3, [sp, #4]
   16998:	f000 f872 	bl	16a80 <_vfiprintf_r>
   1699c:	b002      	add	sp, #8
   1699e:	bc08      	pop	{r3}
   169a0:	b003      	add	sp, #12
   169a2:	4718      	bx	r3
   169a4:	2000002c 	.word	0x2000002c

000169a8 <__libc_init_array>:
   169a8:	b570      	push	{r4, r5, r6, lr}
   169aa:	2600      	movs	r6, #0
   169ac:	4d0c      	ldr	r5, [pc, #48]	; (169e0 <__libc_init_array+0x38>)
   169ae:	4c0d      	ldr	r4, [pc, #52]	; (169e4 <__libc_init_array+0x3c>)
   169b0:	1b64      	subs	r4, r4, r5
   169b2:	10a4      	asrs	r4, r4, #2
   169b4:	42a6      	cmp	r6, r4
   169b6:	d109      	bne.n	169cc <__libc_init_array+0x24>
   169b8:	2600      	movs	r6, #0
   169ba:	f002 fdb1 	bl	19520 <_init>
   169be:	4d0a      	ldr	r5, [pc, #40]	; (169e8 <__libc_init_array+0x40>)
   169c0:	4c0a      	ldr	r4, [pc, #40]	; (169ec <__libc_init_array+0x44>)
   169c2:	1b64      	subs	r4, r4, r5
   169c4:	10a4      	asrs	r4, r4, #2
   169c6:	42a6      	cmp	r6, r4
   169c8:	d105      	bne.n	169d6 <__libc_init_array+0x2e>
   169ca:	bd70      	pop	{r4, r5, r6, pc}
   169cc:	00b3      	lsls	r3, r6, #2
   169ce:	58eb      	ldr	r3, [r5, r3]
   169d0:	4798      	blx	r3
   169d2:	3601      	adds	r6, #1
   169d4:	e7ee      	b.n	169b4 <__libc_init_array+0xc>
   169d6:	00b3      	lsls	r3, r6, #2
   169d8:	58eb      	ldr	r3, [r5, r3]
   169da:	4798      	blx	r3
   169dc:	3601      	adds	r6, #1
   169de:	e7f2      	b.n	169c6 <__libc_init_array+0x1e>
   169e0:	0001952c 	.word	0x0001952c
   169e4:	0001952c 	.word	0x0001952c
   169e8:	0001952c 	.word	0x0001952c
   169ec:	00019530 	.word	0x00019530

000169f0 <memcmp>:
   169f0:	b530      	push	{r4, r5, lr}
   169f2:	2400      	movs	r4, #0
   169f4:	42a2      	cmp	r2, r4
   169f6:	d101      	bne.n	169fc <memcmp+0xc>
   169f8:	2000      	movs	r0, #0
   169fa:	e005      	b.n	16a08 <memcmp+0x18>
   169fc:	5d03      	ldrb	r3, [r0, r4]
   169fe:	1c65      	adds	r5, r4, #1
   16a00:	5d0c      	ldrb	r4, [r1, r4]
   16a02:	42a3      	cmp	r3, r4
   16a04:	d001      	beq.n	16a0a <memcmp+0x1a>
   16a06:	1b18      	subs	r0, r3, r4
   16a08:	bd30      	pop	{r4, r5, pc}
   16a0a:	002c      	movs	r4, r5
   16a0c:	e7f2      	b.n	169f4 <memcmp+0x4>

00016a0e <memcpy>:
   16a0e:	2300      	movs	r3, #0
   16a10:	b510      	push	{r4, lr}
   16a12:	429a      	cmp	r2, r3
   16a14:	d100      	bne.n	16a18 <memcpy+0xa>
   16a16:	bd10      	pop	{r4, pc}
   16a18:	5ccc      	ldrb	r4, [r1, r3]
   16a1a:	54c4      	strb	r4, [r0, r3]
   16a1c:	3301      	adds	r3, #1
   16a1e:	e7f8      	b.n	16a12 <memcpy+0x4>

00016a20 <memset>:
   16a20:	0003      	movs	r3, r0
   16a22:	1882      	adds	r2, r0, r2
   16a24:	4293      	cmp	r3, r2
   16a26:	d100      	bne.n	16a2a <memset+0xa>
   16a28:	4770      	bx	lr
   16a2a:	7019      	strb	r1, [r3, #0]
   16a2c:	3301      	adds	r3, #1
   16a2e:	e7f9      	b.n	16a24 <memset+0x4>

00016a30 <__sfputc_r>:
   16a30:	6893      	ldr	r3, [r2, #8]
   16a32:	b510      	push	{r4, lr}
   16a34:	3b01      	subs	r3, #1
   16a36:	6093      	str	r3, [r2, #8]
   16a38:	2b00      	cmp	r3, #0
   16a3a:	da05      	bge.n	16a48 <__sfputc_r+0x18>
   16a3c:	6994      	ldr	r4, [r2, #24]
   16a3e:	42a3      	cmp	r3, r4
   16a40:	db08      	blt.n	16a54 <__sfputc_r+0x24>
   16a42:	b2cb      	uxtb	r3, r1
   16a44:	2b0a      	cmp	r3, #10
   16a46:	d005      	beq.n	16a54 <__sfputc_r+0x24>
   16a48:	6813      	ldr	r3, [r2, #0]
   16a4a:	1c58      	adds	r0, r3, #1
   16a4c:	6010      	str	r0, [r2, #0]
   16a4e:	7019      	strb	r1, [r3, #0]
   16a50:	b2c8      	uxtb	r0, r1
   16a52:	bd10      	pop	{r4, pc}
   16a54:	f000 fca2 	bl	1739c <__swbuf_r>
   16a58:	e7fb      	b.n	16a52 <__sfputc_r+0x22>

00016a5a <__sfputs_r>:
   16a5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16a5c:	0006      	movs	r6, r0
   16a5e:	000f      	movs	r7, r1
   16a60:	0014      	movs	r4, r2
   16a62:	18d5      	adds	r5, r2, r3
   16a64:	42ac      	cmp	r4, r5
   16a66:	d101      	bne.n	16a6c <__sfputs_r+0x12>
   16a68:	2000      	movs	r0, #0
   16a6a:	e007      	b.n	16a7c <__sfputs_r+0x22>
   16a6c:	7821      	ldrb	r1, [r4, #0]
   16a6e:	003a      	movs	r2, r7
   16a70:	0030      	movs	r0, r6
   16a72:	f7ff ffdd 	bl	16a30 <__sfputc_r>
   16a76:	3401      	adds	r4, #1
   16a78:	1c43      	adds	r3, r0, #1
   16a7a:	d1f3      	bne.n	16a64 <__sfputs_r+0xa>
   16a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16a7e:	Address 0x00016a7e is out of bounds.


00016a80 <_vfiprintf_r>:
   16a80:	b5f0      	push	{r4, r5, r6, r7, lr}
   16a82:	b09f      	sub	sp, #124	; 0x7c
   16a84:	0006      	movs	r6, r0
   16a86:	000f      	movs	r7, r1
   16a88:	0014      	movs	r4, r2
   16a8a:	9305      	str	r3, [sp, #20]
   16a8c:	2800      	cmp	r0, #0
   16a8e:	d004      	beq.n	16a9a <_vfiprintf_r+0x1a>
   16a90:	6983      	ldr	r3, [r0, #24]
   16a92:	2b00      	cmp	r3, #0
   16a94:	d101      	bne.n	16a9a <_vfiprintf_r+0x1a>
   16a96:	f000 fe4d 	bl	17734 <__sinit>
   16a9a:	4b7f      	ldr	r3, [pc, #508]	; (16c98 <_vfiprintf_r+0x218>)
   16a9c:	429f      	cmp	r7, r3
   16a9e:	d15c      	bne.n	16b5a <_vfiprintf_r+0xda>
   16aa0:	6877      	ldr	r7, [r6, #4]
   16aa2:	89bb      	ldrh	r3, [r7, #12]
   16aa4:	071b      	lsls	r3, r3, #28
   16aa6:	d562      	bpl.n	16b6e <_vfiprintf_r+0xee>
   16aa8:	693b      	ldr	r3, [r7, #16]
   16aaa:	2b00      	cmp	r3, #0
   16aac:	d05f      	beq.n	16b6e <_vfiprintf_r+0xee>
   16aae:	2300      	movs	r3, #0
   16ab0:	ad06      	add	r5, sp, #24
   16ab2:	616b      	str	r3, [r5, #20]
   16ab4:	3320      	adds	r3, #32
   16ab6:	766b      	strb	r3, [r5, #25]
   16ab8:	3310      	adds	r3, #16
   16aba:	76ab      	strb	r3, [r5, #26]
   16abc:	9402      	str	r4, [sp, #8]
   16abe:	9c02      	ldr	r4, [sp, #8]
   16ac0:	7823      	ldrb	r3, [r4, #0]
   16ac2:	2b00      	cmp	r3, #0
   16ac4:	d15d      	bne.n	16b82 <_vfiprintf_r+0x102>
   16ac6:	9b02      	ldr	r3, [sp, #8]
   16ac8:	1ae3      	subs	r3, r4, r3
   16aca:	9304      	str	r3, [sp, #16]
   16acc:	d00d      	beq.n	16aea <_vfiprintf_r+0x6a>
   16ace:	9b04      	ldr	r3, [sp, #16]
   16ad0:	9a02      	ldr	r2, [sp, #8]
   16ad2:	0039      	movs	r1, r7
   16ad4:	0030      	movs	r0, r6
   16ad6:	f7ff ffc0 	bl	16a5a <__sfputs_r>
   16ada:	1c43      	adds	r3, r0, #1
   16adc:	d100      	bne.n	16ae0 <_vfiprintf_r+0x60>
   16ade:	e0cc      	b.n	16c7a <_vfiprintf_r+0x1fa>
   16ae0:	696a      	ldr	r2, [r5, #20]
   16ae2:	9b04      	ldr	r3, [sp, #16]
   16ae4:	4694      	mov	ip, r2
   16ae6:	4463      	add	r3, ip
   16ae8:	616b      	str	r3, [r5, #20]
   16aea:	7823      	ldrb	r3, [r4, #0]
   16aec:	2b00      	cmp	r3, #0
   16aee:	d100      	bne.n	16af2 <_vfiprintf_r+0x72>
   16af0:	e0c3      	b.n	16c7a <_vfiprintf_r+0x1fa>
   16af2:	2201      	movs	r2, #1
   16af4:	2300      	movs	r3, #0
   16af6:	4252      	negs	r2, r2
   16af8:	606a      	str	r2, [r5, #4]
   16afa:	a902      	add	r1, sp, #8
   16afc:	3254      	adds	r2, #84	; 0x54
   16afe:	1852      	adds	r2, r2, r1
   16b00:	3401      	adds	r4, #1
   16b02:	602b      	str	r3, [r5, #0]
   16b04:	60eb      	str	r3, [r5, #12]
   16b06:	60ab      	str	r3, [r5, #8]
   16b08:	7013      	strb	r3, [r2, #0]
   16b0a:	65ab      	str	r3, [r5, #88]	; 0x58
   16b0c:	7821      	ldrb	r1, [r4, #0]
   16b0e:	2205      	movs	r2, #5
   16b10:	4862      	ldr	r0, [pc, #392]	; (16c9c <_vfiprintf_r+0x21c>)
   16b12:	f000 ff1b 	bl	1794c <memchr>
   16b16:	1c63      	adds	r3, r4, #1
   16b18:	469c      	mov	ip, r3
   16b1a:	2800      	cmp	r0, #0
   16b1c:	d135      	bne.n	16b8a <_vfiprintf_r+0x10a>
   16b1e:	6829      	ldr	r1, [r5, #0]
   16b20:	06cb      	lsls	r3, r1, #27
   16b22:	d504      	bpl.n	16b2e <_vfiprintf_r+0xae>
   16b24:	2353      	movs	r3, #83	; 0x53
   16b26:	aa02      	add	r2, sp, #8
   16b28:	3020      	adds	r0, #32
   16b2a:	189b      	adds	r3, r3, r2
   16b2c:	7018      	strb	r0, [r3, #0]
   16b2e:	070b      	lsls	r3, r1, #28
   16b30:	d504      	bpl.n	16b3c <_vfiprintf_r+0xbc>
   16b32:	2353      	movs	r3, #83	; 0x53
   16b34:	202b      	movs	r0, #43	; 0x2b
   16b36:	aa02      	add	r2, sp, #8
   16b38:	189b      	adds	r3, r3, r2
   16b3a:	7018      	strb	r0, [r3, #0]
   16b3c:	7823      	ldrb	r3, [r4, #0]
   16b3e:	2b2a      	cmp	r3, #42	; 0x2a
   16b40:	d02c      	beq.n	16b9c <_vfiprintf_r+0x11c>
   16b42:	2000      	movs	r0, #0
   16b44:	210a      	movs	r1, #10
   16b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16b48:	7822      	ldrb	r2, [r4, #0]
   16b4a:	3a30      	subs	r2, #48	; 0x30
   16b4c:	2a09      	cmp	r2, #9
   16b4e:	d800      	bhi.n	16b52 <_vfiprintf_r+0xd2>
   16b50:	e06b      	b.n	16c2a <_vfiprintf_r+0x1aa>
   16b52:	2800      	cmp	r0, #0
   16b54:	d02a      	beq.n	16bac <_vfiprintf_r+0x12c>
   16b56:	9309      	str	r3, [sp, #36]	; 0x24
   16b58:	e028      	b.n	16bac <_vfiprintf_r+0x12c>
   16b5a:	4b51      	ldr	r3, [pc, #324]	; (16ca0 <_vfiprintf_r+0x220>)
   16b5c:	429f      	cmp	r7, r3
   16b5e:	d101      	bne.n	16b64 <_vfiprintf_r+0xe4>
   16b60:	68b7      	ldr	r7, [r6, #8]
   16b62:	e79e      	b.n	16aa2 <_vfiprintf_r+0x22>
   16b64:	4b4f      	ldr	r3, [pc, #316]	; (16ca4 <_vfiprintf_r+0x224>)
   16b66:	429f      	cmp	r7, r3
   16b68:	d19b      	bne.n	16aa2 <_vfiprintf_r+0x22>
   16b6a:	68f7      	ldr	r7, [r6, #12]
   16b6c:	e799      	b.n	16aa2 <_vfiprintf_r+0x22>
   16b6e:	0039      	movs	r1, r7
   16b70:	0030      	movs	r0, r6
   16b72:	f000 fc69 	bl	17448 <__swsetup_r>
   16b76:	2800      	cmp	r0, #0
   16b78:	d099      	beq.n	16aae <_vfiprintf_r+0x2e>
   16b7a:	2001      	movs	r0, #1
   16b7c:	4240      	negs	r0, r0
   16b7e:	b01f      	add	sp, #124	; 0x7c
   16b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16b82:	2b25      	cmp	r3, #37	; 0x25
   16b84:	d09f      	beq.n	16ac6 <_vfiprintf_r+0x46>
   16b86:	3401      	adds	r4, #1
   16b88:	e79a      	b.n	16ac0 <_vfiprintf_r+0x40>
   16b8a:	4b44      	ldr	r3, [pc, #272]	; (16c9c <_vfiprintf_r+0x21c>)
   16b8c:	6829      	ldr	r1, [r5, #0]
   16b8e:	1ac0      	subs	r0, r0, r3
   16b90:	2301      	movs	r3, #1
   16b92:	4083      	lsls	r3, r0
   16b94:	430b      	orrs	r3, r1
   16b96:	602b      	str	r3, [r5, #0]
   16b98:	4664      	mov	r4, ip
   16b9a:	e7b7      	b.n	16b0c <_vfiprintf_r+0x8c>
   16b9c:	9b05      	ldr	r3, [sp, #20]
   16b9e:	1d18      	adds	r0, r3, #4
   16ba0:	681b      	ldr	r3, [r3, #0]
   16ba2:	9005      	str	r0, [sp, #20]
   16ba4:	2b00      	cmp	r3, #0
   16ba6:	db3a      	blt.n	16c1e <_vfiprintf_r+0x19e>
   16ba8:	9309      	str	r3, [sp, #36]	; 0x24
   16baa:	4664      	mov	r4, ip
   16bac:	7823      	ldrb	r3, [r4, #0]
   16bae:	2b2e      	cmp	r3, #46	; 0x2e
   16bb0:	d10b      	bne.n	16bca <_vfiprintf_r+0x14a>
   16bb2:	7863      	ldrb	r3, [r4, #1]
   16bb4:	1c62      	adds	r2, r4, #1
   16bb6:	2b2a      	cmp	r3, #42	; 0x2a
   16bb8:	d13f      	bne.n	16c3a <_vfiprintf_r+0x1ba>
   16bba:	9b05      	ldr	r3, [sp, #20]
   16bbc:	3402      	adds	r4, #2
   16bbe:	1d1a      	adds	r2, r3, #4
   16bc0:	681b      	ldr	r3, [r3, #0]
   16bc2:	9205      	str	r2, [sp, #20]
   16bc4:	2b00      	cmp	r3, #0
   16bc6:	db35      	blt.n	16c34 <_vfiprintf_r+0x1b4>
   16bc8:	9307      	str	r3, [sp, #28]
   16bca:	7821      	ldrb	r1, [r4, #0]
   16bcc:	2203      	movs	r2, #3
   16bce:	4836      	ldr	r0, [pc, #216]	; (16ca8 <_vfiprintf_r+0x228>)
   16bd0:	f000 febc 	bl	1794c <memchr>
   16bd4:	2800      	cmp	r0, #0
   16bd6:	d007      	beq.n	16be8 <_vfiprintf_r+0x168>
   16bd8:	4b33      	ldr	r3, [pc, #204]	; (16ca8 <_vfiprintf_r+0x228>)
   16bda:	682a      	ldr	r2, [r5, #0]
   16bdc:	1ac0      	subs	r0, r0, r3
   16bde:	2340      	movs	r3, #64	; 0x40
   16be0:	4083      	lsls	r3, r0
   16be2:	4313      	orrs	r3, r2
   16be4:	602b      	str	r3, [r5, #0]
   16be6:	3401      	adds	r4, #1
   16be8:	7821      	ldrb	r1, [r4, #0]
   16bea:	1c63      	adds	r3, r4, #1
   16bec:	2206      	movs	r2, #6
   16bee:	482f      	ldr	r0, [pc, #188]	; (16cac <_vfiprintf_r+0x22c>)
   16bf0:	9302      	str	r3, [sp, #8]
   16bf2:	7629      	strb	r1, [r5, #24]
   16bf4:	f000 feaa 	bl	1794c <memchr>
   16bf8:	2800      	cmp	r0, #0
   16bfa:	d044      	beq.n	16c86 <_vfiprintf_r+0x206>
   16bfc:	4b2c      	ldr	r3, [pc, #176]	; (16cb0 <_vfiprintf_r+0x230>)
   16bfe:	2b00      	cmp	r3, #0
   16c00:	d12f      	bne.n	16c62 <_vfiprintf_r+0x1e2>
   16c02:	6829      	ldr	r1, [r5, #0]
   16c04:	9b05      	ldr	r3, [sp, #20]
   16c06:	2207      	movs	r2, #7
   16c08:	05c9      	lsls	r1, r1, #23
   16c0a:	d528      	bpl.n	16c5e <_vfiprintf_r+0x1de>
   16c0c:	189b      	adds	r3, r3, r2
   16c0e:	4393      	bics	r3, r2
   16c10:	3308      	adds	r3, #8
   16c12:	9305      	str	r3, [sp, #20]
   16c14:	696b      	ldr	r3, [r5, #20]
   16c16:	9a03      	ldr	r2, [sp, #12]
   16c18:	189b      	adds	r3, r3, r2
   16c1a:	616b      	str	r3, [r5, #20]
   16c1c:	e74f      	b.n	16abe <_vfiprintf_r+0x3e>
   16c1e:	425b      	negs	r3, r3
   16c20:	60eb      	str	r3, [r5, #12]
   16c22:	2302      	movs	r3, #2
   16c24:	430b      	orrs	r3, r1
   16c26:	602b      	str	r3, [r5, #0]
   16c28:	e7bf      	b.n	16baa <_vfiprintf_r+0x12a>
   16c2a:	434b      	muls	r3, r1
   16c2c:	3401      	adds	r4, #1
   16c2e:	189b      	adds	r3, r3, r2
   16c30:	2001      	movs	r0, #1
   16c32:	e789      	b.n	16b48 <_vfiprintf_r+0xc8>
   16c34:	2301      	movs	r3, #1
   16c36:	425b      	negs	r3, r3
   16c38:	e7c6      	b.n	16bc8 <_vfiprintf_r+0x148>
   16c3a:	2300      	movs	r3, #0
   16c3c:	0014      	movs	r4, r2
   16c3e:	200a      	movs	r0, #10
   16c40:	001a      	movs	r2, r3
   16c42:	606b      	str	r3, [r5, #4]
   16c44:	7821      	ldrb	r1, [r4, #0]
   16c46:	3930      	subs	r1, #48	; 0x30
   16c48:	2909      	cmp	r1, #9
   16c4a:	d903      	bls.n	16c54 <_vfiprintf_r+0x1d4>
   16c4c:	2b00      	cmp	r3, #0
   16c4e:	d0bc      	beq.n	16bca <_vfiprintf_r+0x14a>
   16c50:	9207      	str	r2, [sp, #28]
   16c52:	e7ba      	b.n	16bca <_vfiprintf_r+0x14a>
   16c54:	4342      	muls	r2, r0
   16c56:	3401      	adds	r4, #1
   16c58:	1852      	adds	r2, r2, r1
   16c5a:	2301      	movs	r3, #1
   16c5c:	e7f2      	b.n	16c44 <_vfiprintf_r+0x1c4>
   16c5e:	3307      	adds	r3, #7
   16c60:	e7d5      	b.n	16c0e <_vfiprintf_r+0x18e>
   16c62:	ab05      	add	r3, sp, #20
   16c64:	9300      	str	r3, [sp, #0]
   16c66:	003a      	movs	r2, r7
   16c68:	4b12      	ldr	r3, [pc, #72]	; (16cb4 <_vfiprintf_r+0x234>)
   16c6a:	0029      	movs	r1, r5
   16c6c:	0030      	movs	r0, r6
   16c6e:	e000      	b.n	16c72 <_vfiprintf_r+0x1f2>
   16c70:	bf00      	nop
   16c72:	9003      	str	r0, [sp, #12]
   16c74:	9b03      	ldr	r3, [sp, #12]
   16c76:	3301      	adds	r3, #1
   16c78:	d1cc      	bne.n	16c14 <_vfiprintf_r+0x194>
   16c7a:	89bb      	ldrh	r3, [r7, #12]
   16c7c:	065b      	lsls	r3, r3, #25
   16c7e:	d500      	bpl.n	16c82 <_vfiprintf_r+0x202>
   16c80:	e77b      	b.n	16b7a <_vfiprintf_r+0xfa>
   16c82:	980b      	ldr	r0, [sp, #44]	; 0x2c
   16c84:	e77b      	b.n	16b7e <_vfiprintf_r+0xfe>
   16c86:	ab05      	add	r3, sp, #20
   16c88:	9300      	str	r3, [sp, #0]
   16c8a:	003a      	movs	r2, r7
   16c8c:	4b09      	ldr	r3, [pc, #36]	; (16cb4 <_vfiprintf_r+0x234>)
   16c8e:	0029      	movs	r1, r5
   16c90:	0030      	movs	r0, r6
   16c92:	f000 f87f 	bl	16d94 <_printf_i>
   16c96:	e7ec      	b.n	16c72 <_vfiprintf_r+0x1f2>
   16c98:	000194e0 	.word	0x000194e0
   16c9c:	0001948c 	.word	0x0001948c
   16ca0:	00019500 	.word	0x00019500
   16ca4:	000194c0 	.word	0x000194c0
   16ca8:	00019492 	.word	0x00019492
   16cac:	00019496 	.word	0x00019496
   16cb0:	00000000 	.word	0x00000000
   16cb4:	00016a5b 	.word	0x00016a5b

00016cb8 <_printf_common>:
   16cb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16cba:	0015      	movs	r5, r2
   16cbc:	9301      	str	r3, [sp, #4]
   16cbe:	688a      	ldr	r2, [r1, #8]
   16cc0:	690b      	ldr	r3, [r1, #16]
   16cc2:	9000      	str	r0, [sp, #0]
   16cc4:	000c      	movs	r4, r1
   16cc6:	4293      	cmp	r3, r2
   16cc8:	da00      	bge.n	16ccc <_printf_common+0x14>
   16cca:	0013      	movs	r3, r2
   16ccc:	0022      	movs	r2, r4
   16cce:	602b      	str	r3, [r5, #0]
   16cd0:	3243      	adds	r2, #67	; 0x43
   16cd2:	7812      	ldrb	r2, [r2, #0]
   16cd4:	2a00      	cmp	r2, #0
   16cd6:	d001      	beq.n	16cdc <_printf_common+0x24>
   16cd8:	3301      	adds	r3, #1
   16cda:	602b      	str	r3, [r5, #0]
   16cdc:	6823      	ldr	r3, [r4, #0]
   16cde:	069b      	lsls	r3, r3, #26
   16ce0:	d502      	bpl.n	16ce8 <_printf_common+0x30>
   16ce2:	682b      	ldr	r3, [r5, #0]
   16ce4:	3302      	adds	r3, #2
   16ce6:	602b      	str	r3, [r5, #0]
   16ce8:	2706      	movs	r7, #6
   16cea:	6823      	ldr	r3, [r4, #0]
   16cec:	401f      	ands	r7, r3
   16cee:	d027      	beq.n	16d40 <_printf_common+0x88>
   16cf0:	0023      	movs	r3, r4
   16cf2:	3343      	adds	r3, #67	; 0x43
   16cf4:	781b      	ldrb	r3, [r3, #0]
   16cf6:	1e5a      	subs	r2, r3, #1
   16cf8:	4193      	sbcs	r3, r2
   16cfa:	6822      	ldr	r2, [r4, #0]
   16cfc:	0692      	lsls	r2, r2, #26
   16cfe:	d430      	bmi.n	16d62 <_printf_common+0xaa>
   16d00:	0022      	movs	r2, r4
   16d02:	9901      	ldr	r1, [sp, #4]
   16d04:	3243      	adds	r2, #67	; 0x43
   16d06:	9800      	ldr	r0, [sp, #0]
   16d08:	9e08      	ldr	r6, [sp, #32]
   16d0a:	47b0      	blx	r6
   16d0c:	1c43      	adds	r3, r0, #1
   16d0e:	d025      	beq.n	16d5c <_printf_common+0xa4>
   16d10:	2306      	movs	r3, #6
   16d12:	6820      	ldr	r0, [r4, #0]
   16d14:	682a      	ldr	r2, [r5, #0]
   16d16:	68e1      	ldr	r1, [r4, #12]
   16d18:	4003      	ands	r3, r0
   16d1a:	2500      	movs	r5, #0
   16d1c:	2b04      	cmp	r3, #4
   16d1e:	d103      	bne.n	16d28 <_printf_common+0x70>
   16d20:	1a8d      	subs	r5, r1, r2
   16d22:	43eb      	mvns	r3, r5
   16d24:	17db      	asrs	r3, r3, #31
   16d26:	401d      	ands	r5, r3
   16d28:	68a3      	ldr	r3, [r4, #8]
   16d2a:	6922      	ldr	r2, [r4, #16]
   16d2c:	4293      	cmp	r3, r2
   16d2e:	dd01      	ble.n	16d34 <_printf_common+0x7c>
   16d30:	1a9b      	subs	r3, r3, r2
   16d32:	18ed      	adds	r5, r5, r3
   16d34:	2700      	movs	r7, #0
   16d36:	42bd      	cmp	r5, r7
   16d38:	d120      	bne.n	16d7c <_printf_common+0xc4>
   16d3a:	2000      	movs	r0, #0
   16d3c:	e010      	b.n	16d60 <_printf_common+0xa8>
   16d3e:	3701      	adds	r7, #1
   16d40:	68e3      	ldr	r3, [r4, #12]
   16d42:	682a      	ldr	r2, [r5, #0]
   16d44:	1a9b      	subs	r3, r3, r2
   16d46:	429f      	cmp	r7, r3
   16d48:	dad2      	bge.n	16cf0 <_printf_common+0x38>
   16d4a:	0022      	movs	r2, r4
   16d4c:	2301      	movs	r3, #1
   16d4e:	3219      	adds	r2, #25
   16d50:	9901      	ldr	r1, [sp, #4]
   16d52:	9800      	ldr	r0, [sp, #0]
   16d54:	9e08      	ldr	r6, [sp, #32]
   16d56:	47b0      	blx	r6
   16d58:	1c43      	adds	r3, r0, #1
   16d5a:	d1f0      	bne.n	16d3e <_printf_common+0x86>
   16d5c:	2001      	movs	r0, #1
   16d5e:	4240      	negs	r0, r0
   16d60:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   16d62:	2030      	movs	r0, #48	; 0x30
   16d64:	18e1      	adds	r1, r4, r3
   16d66:	3143      	adds	r1, #67	; 0x43
   16d68:	7008      	strb	r0, [r1, #0]
   16d6a:	0021      	movs	r1, r4
   16d6c:	1c5a      	adds	r2, r3, #1
   16d6e:	3145      	adds	r1, #69	; 0x45
   16d70:	7809      	ldrb	r1, [r1, #0]
   16d72:	18a2      	adds	r2, r4, r2
   16d74:	3243      	adds	r2, #67	; 0x43
   16d76:	3302      	adds	r3, #2
   16d78:	7011      	strb	r1, [r2, #0]
   16d7a:	e7c1      	b.n	16d00 <_printf_common+0x48>
   16d7c:	0022      	movs	r2, r4
   16d7e:	2301      	movs	r3, #1
   16d80:	321a      	adds	r2, #26
   16d82:	9901      	ldr	r1, [sp, #4]
   16d84:	9800      	ldr	r0, [sp, #0]
   16d86:	9e08      	ldr	r6, [sp, #32]
   16d88:	47b0      	blx	r6
   16d8a:	1c43      	adds	r3, r0, #1
   16d8c:	d0e6      	beq.n	16d5c <_printf_common+0xa4>
   16d8e:	3701      	adds	r7, #1
   16d90:	e7d1      	b.n	16d36 <_printf_common+0x7e>
   16d92:	Address 0x00016d92 is out of bounds.


00016d94 <_printf_i>:
   16d94:	b5f0      	push	{r4, r5, r6, r7, lr}
   16d96:	b08b      	sub	sp, #44	; 0x2c
   16d98:	9206      	str	r2, [sp, #24]
   16d9a:	000a      	movs	r2, r1
   16d9c:	3243      	adds	r2, #67	; 0x43
   16d9e:	9307      	str	r3, [sp, #28]
   16da0:	9005      	str	r0, [sp, #20]
   16da2:	9204      	str	r2, [sp, #16]
   16da4:	7e0a      	ldrb	r2, [r1, #24]
   16da6:	000c      	movs	r4, r1
   16da8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   16daa:	2a6e      	cmp	r2, #110	; 0x6e
   16dac:	d100      	bne.n	16db0 <_printf_i+0x1c>
   16dae:	e08f      	b.n	16ed0 <_printf_i+0x13c>
   16db0:	d817      	bhi.n	16de2 <_printf_i+0x4e>
   16db2:	2a63      	cmp	r2, #99	; 0x63
   16db4:	d02c      	beq.n	16e10 <_printf_i+0x7c>
   16db6:	d808      	bhi.n	16dca <_printf_i+0x36>
   16db8:	2a00      	cmp	r2, #0
   16dba:	d100      	bne.n	16dbe <_printf_i+0x2a>
   16dbc:	e099      	b.n	16ef2 <_printf_i+0x15e>
   16dbe:	2a58      	cmp	r2, #88	; 0x58
   16dc0:	d054      	beq.n	16e6c <_printf_i+0xd8>
   16dc2:	0026      	movs	r6, r4
   16dc4:	3642      	adds	r6, #66	; 0x42
   16dc6:	7032      	strb	r2, [r6, #0]
   16dc8:	e029      	b.n	16e1e <_printf_i+0x8a>
   16dca:	2a64      	cmp	r2, #100	; 0x64
   16dcc:	d001      	beq.n	16dd2 <_printf_i+0x3e>
   16dce:	2a69      	cmp	r2, #105	; 0x69
   16dd0:	d1f7      	bne.n	16dc2 <_printf_i+0x2e>
   16dd2:	6821      	ldr	r1, [r4, #0]
   16dd4:	681a      	ldr	r2, [r3, #0]
   16dd6:	0608      	lsls	r0, r1, #24
   16dd8:	d523      	bpl.n	16e22 <_printf_i+0x8e>
   16dda:	1d11      	adds	r1, r2, #4
   16ddc:	6019      	str	r1, [r3, #0]
   16dde:	6815      	ldr	r5, [r2, #0]
   16de0:	e025      	b.n	16e2e <_printf_i+0x9a>
   16de2:	2a73      	cmp	r2, #115	; 0x73
   16de4:	d100      	bne.n	16de8 <_printf_i+0x54>
   16de6:	e088      	b.n	16efa <_printf_i+0x166>
   16de8:	d808      	bhi.n	16dfc <_printf_i+0x68>
   16dea:	2a6f      	cmp	r2, #111	; 0x6f
   16dec:	d029      	beq.n	16e42 <_printf_i+0xae>
   16dee:	2a70      	cmp	r2, #112	; 0x70
   16df0:	d1e7      	bne.n	16dc2 <_printf_i+0x2e>
   16df2:	2220      	movs	r2, #32
   16df4:	6809      	ldr	r1, [r1, #0]
   16df6:	430a      	orrs	r2, r1
   16df8:	6022      	str	r2, [r4, #0]
   16dfa:	e003      	b.n	16e04 <_printf_i+0x70>
   16dfc:	2a75      	cmp	r2, #117	; 0x75
   16dfe:	d020      	beq.n	16e42 <_printf_i+0xae>
   16e00:	2a78      	cmp	r2, #120	; 0x78
   16e02:	d1de      	bne.n	16dc2 <_printf_i+0x2e>
   16e04:	0022      	movs	r2, r4
   16e06:	2178      	movs	r1, #120	; 0x78
   16e08:	3245      	adds	r2, #69	; 0x45
   16e0a:	7011      	strb	r1, [r2, #0]
   16e0c:	4a6c      	ldr	r2, [pc, #432]	; (16fc0 <_printf_i+0x22c>)
   16e0e:	e030      	b.n	16e72 <_printf_i+0xde>
   16e10:	000e      	movs	r6, r1
   16e12:	681a      	ldr	r2, [r3, #0]
   16e14:	3642      	adds	r6, #66	; 0x42
   16e16:	1d11      	adds	r1, r2, #4
   16e18:	6019      	str	r1, [r3, #0]
   16e1a:	6813      	ldr	r3, [r2, #0]
   16e1c:	7033      	strb	r3, [r6, #0]
   16e1e:	2301      	movs	r3, #1
   16e20:	e079      	b.n	16f16 <_printf_i+0x182>
   16e22:	0649      	lsls	r1, r1, #25
   16e24:	d5d9      	bpl.n	16dda <_printf_i+0x46>
   16e26:	1d11      	adds	r1, r2, #4
   16e28:	6019      	str	r1, [r3, #0]
   16e2a:	2300      	movs	r3, #0
   16e2c:	5ed5      	ldrsh	r5, [r2, r3]
   16e2e:	2d00      	cmp	r5, #0
   16e30:	da03      	bge.n	16e3a <_printf_i+0xa6>
   16e32:	232d      	movs	r3, #45	; 0x2d
   16e34:	9a04      	ldr	r2, [sp, #16]
   16e36:	426d      	negs	r5, r5
   16e38:	7013      	strb	r3, [r2, #0]
   16e3a:	4b62      	ldr	r3, [pc, #392]	; (16fc4 <_printf_i+0x230>)
   16e3c:	270a      	movs	r7, #10
   16e3e:	9303      	str	r3, [sp, #12]
   16e40:	e02f      	b.n	16ea2 <_printf_i+0x10e>
   16e42:	6820      	ldr	r0, [r4, #0]
   16e44:	6819      	ldr	r1, [r3, #0]
   16e46:	0605      	lsls	r5, r0, #24
   16e48:	d503      	bpl.n	16e52 <_printf_i+0xbe>
   16e4a:	1d08      	adds	r0, r1, #4
   16e4c:	6018      	str	r0, [r3, #0]
   16e4e:	680d      	ldr	r5, [r1, #0]
   16e50:	e005      	b.n	16e5e <_printf_i+0xca>
   16e52:	0640      	lsls	r0, r0, #25
   16e54:	d5f9      	bpl.n	16e4a <_printf_i+0xb6>
   16e56:	680d      	ldr	r5, [r1, #0]
   16e58:	1d08      	adds	r0, r1, #4
   16e5a:	6018      	str	r0, [r3, #0]
   16e5c:	b2ad      	uxth	r5, r5
   16e5e:	4b59      	ldr	r3, [pc, #356]	; (16fc4 <_printf_i+0x230>)
   16e60:	2708      	movs	r7, #8
   16e62:	9303      	str	r3, [sp, #12]
   16e64:	2a6f      	cmp	r2, #111	; 0x6f
   16e66:	d018      	beq.n	16e9a <_printf_i+0x106>
   16e68:	270a      	movs	r7, #10
   16e6a:	e016      	b.n	16e9a <_printf_i+0x106>
   16e6c:	3145      	adds	r1, #69	; 0x45
   16e6e:	700a      	strb	r2, [r1, #0]
   16e70:	4a54      	ldr	r2, [pc, #336]	; (16fc4 <_printf_i+0x230>)
   16e72:	9203      	str	r2, [sp, #12]
   16e74:	681a      	ldr	r2, [r3, #0]
   16e76:	6821      	ldr	r1, [r4, #0]
   16e78:	1d10      	adds	r0, r2, #4
   16e7a:	6018      	str	r0, [r3, #0]
   16e7c:	6815      	ldr	r5, [r2, #0]
   16e7e:	0608      	lsls	r0, r1, #24
   16e80:	d522      	bpl.n	16ec8 <_printf_i+0x134>
   16e82:	07cb      	lsls	r3, r1, #31
   16e84:	d502      	bpl.n	16e8c <_printf_i+0xf8>
   16e86:	2320      	movs	r3, #32
   16e88:	4319      	orrs	r1, r3
   16e8a:	6021      	str	r1, [r4, #0]
   16e8c:	2710      	movs	r7, #16
   16e8e:	2d00      	cmp	r5, #0
   16e90:	d103      	bne.n	16e9a <_printf_i+0x106>
   16e92:	2320      	movs	r3, #32
   16e94:	6822      	ldr	r2, [r4, #0]
   16e96:	439a      	bics	r2, r3
   16e98:	6022      	str	r2, [r4, #0]
   16e9a:	0023      	movs	r3, r4
   16e9c:	2200      	movs	r2, #0
   16e9e:	3343      	adds	r3, #67	; 0x43
   16ea0:	701a      	strb	r2, [r3, #0]
   16ea2:	6863      	ldr	r3, [r4, #4]
   16ea4:	60a3      	str	r3, [r4, #8]
   16ea6:	2b00      	cmp	r3, #0
   16ea8:	db5c      	blt.n	16f64 <_printf_i+0x1d0>
   16eaa:	2204      	movs	r2, #4
   16eac:	6821      	ldr	r1, [r4, #0]
   16eae:	4391      	bics	r1, r2
   16eb0:	6021      	str	r1, [r4, #0]
   16eb2:	2d00      	cmp	r5, #0
   16eb4:	d158      	bne.n	16f68 <_printf_i+0x1d4>
   16eb6:	9e04      	ldr	r6, [sp, #16]
   16eb8:	2b00      	cmp	r3, #0
   16eba:	d064      	beq.n	16f86 <_printf_i+0x1f2>
   16ebc:	0026      	movs	r6, r4
   16ebe:	9b03      	ldr	r3, [sp, #12]
   16ec0:	3642      	adds	r6, #66	; 0x42
   16ec2:	781b      	ldrb	r3, [r3, #0]
   16ec4:	7033      	strb	r3, [r6, #0]
   16ec6:	e05e      	b.n	16f86 <_printf_i+0x1f2>
   16ec8:	0648      	lsls	r0, r1, #25
   16eca:	d5da      	bpl.n	16e82 <_printf_i+0xee>
   16ecc:	b2ad      	uxth	r5, r5
   16ece:	e7d8      	b.n	16e82 <_printf_i+0xee>
   16ed0:	6809      	ldr	r1, [r1, #0]
   16ed2:	681a      	ldr	r2, [r3, #0]
   16ed4:	0608      	lsls	r0, r1, #24
   16ed6:	d505      	bpl.n	16ee4 <_printf_i+0x150>
   16ed8:	1d11      	adds	r1, r2, #4
   16eda:	6019      	str	r1, [r3, #0]
   16edc:	6813      	ldr	r3, [r2, #0]
   16ede:	6962      	ldr	r2, [r4, #20]
   16ee0:	601a      	str	r2, [r3, #0]
   16ee2:	e006      	b.n	16ef2 <_printf_i+0x15e>
   16ee4:	0649      	lsls	r1, r1, #25
   16ee6:	d5f7      	bpl.n	16ed8 <_printf_i+0x144>
   16ee8:	1d11      	adds	r1, r2, #4
   16eea:	6019      	str	r1, [r3, #0]
   16eec:	6813      	ldr	r3, [r2, #0]
   16eee:	8aa2      	ldrh	r2, [r4, #20]
   16ef0:	801a      	strh	r2, [r3, #0]
   16ef2:	2300      	movs	r3, #0
   16ef4:	9e04      	ldr	r6, [sp, #16]
   16ef6:	6123      	str	r3, [r4, #16]
   16ef8:	e054      	b.n	16fa4 <_printf_i+0x210>
   16efa:	681a      	ldr	r2, [r3, #0]
   16efc:	1d11      	adds	r1, r2, #4
   16efe:	6019      	str	r1, [r3, #0]
   16f00:	6816      	ldr	r6, [r2, #0]
   16f02:	2100      	movs	r1, #0
   16f04:	6862      	ldr	r2, [r4, #4]
   16f06:	0030      	movs	r0, r6
   16f08:	f000 fd20 	bl	1794c <memchr>
   16f0c:	2800      	cmp	r0, #0
   16f0e:	d001      	beq.n	16f14 <_printf_i+0x180>
   16f10:	1b80      	subs	r0, r0, r6
   16f12:	6060      	str	r0, [r4, #4]
   16f14:	6863      	ldr	r3, [r4, #4]
   16f16:	6123      	str	r3, [r4, #16]
   16f18:	2300      	movs	r3, #0
   16f1a:	9a04      	ldr	r2, [sp, #16]
   16f1c:	7013      	strb	r3, [r2, #0]
   16f1e:	e041      	b.n	16fa4 <_printf_i+0x210>
   16f20:	6923      	ldr	r3, [r4, #16]
   16f22:	0032      	movs	r2, r6
   16f24:	9906      	ldr	r1, [sp, #24]
   16f26:	9805      	ldr	r0, [sp, #20]
   16f28:	9d07      	ldr	r5, [sp, #28]
   16f2a:	47a8      	blx	r5
   16f2c:	1c43      	adds	r3, r0, #1
   16f2e:	d043      	beq.n	16fb8 <_printf_i+0x224>
   16f30:	6823      	ldr	r3, [r4, #0]
   16f32:	2500      	movs	r5, #0
   16f34:	079b      	lsls	r3, r3, #30
   16f36:	d40f      	bmi.n	16f58 <_printf_i+0x1c4>
   16f38:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16f3a:	68e0      	ldr	r0, [r4, #12]
   16f3c:	4298      	cmp	r0, r3
   16f3e:	da3d      	bge.n	16fbc <_printf_i+0x228>
   16f40:	0018      	movs	r0, r3
   16f42:	e03b      	b.n	16fbc <_printf_i+0x228>
   16f44:	0022      	movs	r2, r4
   16f46:	2301      	movs	r3, #1
   16f48:	3219      	adds	r2, #25
   16f4a:	9906      	ldr	r1, [sp, #24]
   16f4c:	9805      	ldr	r0, [sp, #20]
   16f4e:	9e07      	ldr	r6, [sp, #28]
   16f50:	47b0      	blx	r6
   16f52:	1c43      	adds	r3, r0, #1
   16f54:	d030      	beq.n	16fb8 <_printf_i+0x224>
   16f56:	3501      	adds	r5, #1
   16f58:	68e3      	ldr	r3, [r4, #12]
   16f5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   16f5c:	1a9b      	subs	r3, r3, r2
   16f5e:	429d      	cmp	r5, r3
   16f60:	dbf0      	blt.n	16f44 <_printf_i+0x1b0>
   16f62:	e7e9      	b.n	16f38 <_printf_i+0x1a4>
   16f64:	2d00      	cmp	r5, #0
   16f66:	d0a9      	beq.n	16ebc <_printf_i+0x128>
   16f68:	9e04      	ldr	r6, [sp, #16]
   16f6a:	0028      	movs	r0, r5
   16f6c:	0039      	movs	r1, r7
   16f6e:	f7fc fca3 	bl	138b8 <__aeabi_uidivmod>
   16f72:	9b03      	ldr	r3, [sp, #12]
   16f74:	3e01      	subs	r6, #1
   16f76:	5c5b      	ldrb	r3, [r3, r1]
   16f78:	0028      	movs	r0, r5
   16f7a:	7033      	strb	r3, [r6, #0]
   16f7c:	0039      	movs	r1, r7
   16f7e:	f7fc fc15 	bl	137ac <__udivsi3>
   16f82:	1e05      	subs	r5, r0, #0
   16f84:	d1f1      	bne.n	16f6a <_printf_i+0x1d6>
   16f86:	2f08      	cmp	r7, #8
   16f88:	d109      	bne.n	16f9e <_printf_i+0x20a>
   16f8a:	6823      	ldr	r3, [r4, #0]
   16f8c:	07db      	lsls	r3, r3, #31
   16f8e:	d506      	bpl.n	16f9e <_printf_i+0x20a>
   16f90:	6863      	ldr	r3, [r4, #4]
   16f92:	6922      	ldr	r2, [r4, #16]
   16f94:	4293      	cmp	r3, r2
   16f96:	dc02      	bgt.n	16f9e <_printf_i+0x20a>
   16f98:	2330      	movs	r3, #48	; 0x30
   16f9a:	3e01      	subs	r6, #1
   16f9c:	7033      	strb	r3, [r6, #0]
   16f9e:	9b04      	ldr	r3, [sp, #16]
   16fa0:	1b9b      	subs	r3, r3, r6
   16fa2:	6123      	str	r3, [r4, #16]
   16fa4:	9b07      	ldr	r3, [sp, #28]
   16fa6:	aa09      	add	r2, sp, #36	; 0x24
   16fa8:	9300      	str	r3, [sp, #0]
   16faa:	0021      	movs	r1, r4
   16fac:	9b06      	ldr	r3, [sp, #24]
   16fae:	9805      	ldr	r0, [sp, #20]
   16fb0:	f7ff fe82 	bl	16cb8 <_printf_common>
   16fb4:	1c43      	adds	r3, r0, #1
   16fb6:	d1b3      	bne.n	16f20 <_printf_i+0x18c>
   16fb8:	2001      	movs	r0, #1
   16fba:	4240      	negs	r0, r0
   16fbc:	b00b      	add	sp, #44	; 0x2c
   16fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16fc0:	000194ae 	.word	0x000194ae
   16fc4:	0001949d 	.word	0x0001949d

00016fc8 <iprintf>:
   16fc8:	b40f      	push	{r0, r1, r2, r3}
   16fca:	4b0b      	ldr	r3, [pc, #44]	; (16ff8 <iprintf+0x30>)
   16fcc:	b513      	push	{r0, r1, r4, lr}
   16fce:	681c      	ldr	r4, [r3, #0]
   16fd0:	2c00      	cmp	r4, #0
   16fd2:	d005      	beq.n	16fe0 <iprintf+0x18>
   16fd4:	69a3      	ldr	r3, [r4, #24]
   16fd6:	2b00      	cmp	r3, #0
   16fd8:	d102      	bne.n	16fe0 <iprintf+0x18>
   16fda:	0020      	movs	r0, r4
   16fdc:	f000 fbaa 	bl	17734 <__sinit>
   16fe0:	ab05      	add	r3, sp, #20
   16fe2:	9a04      	ldr	r2, [sp, #16]
   16fe4:	68a1      	ldr	r1, [r4, #8]
   16fe6:	0020      	movs	r0, r4
   16fe8:	9301      	str	r3, [sp, #4]
   16fea:	f7ff fd49 	bl	16a80 <_vfiprintf_r>
   16fee:	bc16      	pop	{r1, r2, r4}
   16ff0:	bc08      	pop	{r3}
   16ff2:	b004      	add	sp, #16
   16ff4:	4718      	bx	r3
   16ff6:	46c0      	nop			; (mov r8, r8)
   16ff8:	2000002c 	.word	0x2000002c

00016ffc <putchar>:
   16ffc:	4b08      	ldr	r3, [pc, #32]	; (17020 <putchar+0x24>)
   16ffe:	b570      	push	{r4, r5, r6, lr}
   17000:	681c      	ldr	r4, [r3, #0]
   17002:	0005      	movs	r5, r0
   17004:	2c00      	cmp	r4, #0
   17006:	d005      	beq.n	17014 <putchar+0x18>
   17008:	69a3      	ldr	r3, [r4, #24]
   1700a:	2b00      	cmp	r3, #0
   1700c:	d102      	bne.n	17014 <putchar+0x18>
   1700e:	0020      	movs	r0, r4
   17010:	f000 fb90 	bl	17734 <__sinit>
   17014:	0029      	movs	r1, r5
   17016:	68a2      	ldr	r2, [r4, #8]
   17018:	0020      	movs	r0, r4
   1701a:	f000 fee9 	bl	17df0 <_putc_r>
   1701e:	bd70      	pop	{r4, r5, r6, pc}
   17020:	2000002c 	.word	0x2000002c

00017024 <_puts_r>:
   17024:	b570      	push	{r4, r5, r6, lr}
   17026:	0005      	movs	r5, r0
   17028:	000e      	movs	r6, r1
   1702a:	2800      	cmp	r0, #0
   1702c:	d004      	beq.n	17038 <_puts_r+0x14>
   1702e:	6983      	ldr	r3, [r0, #24]
   17030:	2b00      	cmp	r3, #0
   17032:	d101      	bne.n	17038 <_puts_r+0x14>
   17034:	f000 fb7e 	bl	17734 <__sinit>
   17038:	69ab      	ldr	r3, [r5, #24]
   1703a:	68ac      	ldr	r4, [r5, #8]
   1703c:	2b00      	cmp	r3, #0
   1703e:	d102      	bne.n	17046 <_puts_r+0x22>
   17040:	0028      	movs	r0, r5
   17042:	f000 fb77 	bl	17734 <__sinit>
   17046:	4b24      	ldr	r3, [pc, #144]	; (170d8 <_puts_r+0xb4>)
   17048:	429c      	cmp	r4, r3
   1704a:	d10f      	bne.n	1706c <_puts_r+0x48>
   1704c:	686c      	ldr	r4, [r5, #4]
   1704e:	89a3      	ldrh	r3, [r4, #12]
   17050:	071b      	lsls	r3, r3, #28
   17052:	d502      	bpl.n	1705a <_puts_r+0x36>
   17054:	6923      	ldr	r3, [r4, #16]
   17056:	2b00      	cmp	r3, #0
   17058:	d120      	bne.n	1709c <_puts_r+0x78>
   1705a:	0021      	movs	r1, r4
   1705c:	0028      	movs	r0, r5
   1705e:	f000 f9f3 	bl	17448 <__swsetup_r>
   17062:	2800      	cmp	r0, #0
   17064:	d01a      	beq.n	1709c <_puts_r+0x78>
   17066:	2001      	movs	r0, #1
   17068:	4240      	negs	r0, r0
   1706a:	bd70      	pop	{r4, r5, r6, pc}
   1706c:	4b1b      	ldr	r3, [pc, #108]	; (170dc <_puts_r+0xb8>)
   1706e:	429c      	cmp	r4, r3
   17070:	d101      	bne.n	17076 <_puts_r+0x52>
   17072:	68ac      	ldr	r4, [r5, #8]
   17074:	e7eb      	b.n	1704e <_puts_r+0x2a>
   17076:	4b1a      	ldr	r3, [pc, #104]	; (170e0 <_puts_r+0xbc>)
   17078:	429c      	cmp	r4, r3
   1707a:	d1e8      	bne.n	1704e <_puts_r+0x2a>
   1707c:	68ec      	ldr	r4, [r5, #12]
   1707e:	e7e6      	b.n	1704e <_puts_r+0x2a>
   17080:	3b01      	subs	r3, #1
   17082:	3601      	adds	r6, #1
   17084:	60a3      	str	r3, [r4, #8]
   17086:	2b00      	cmp	r3, #0
   17088:	da04      	bge.n	17094 <_puts_r+0x70>
   1708a:	69a2      	ldr	r2, [r4, #24]
   1708c:	4293      	cmp	r3, r2
   1708e:	db16      	blt.n	170be <_puts_r+0x9a>
   17090:	290a      	cmp	r1, #10
   17092:	d014      	beq.n	170be <_puts_r+0x9a>
   17094:	6823      	ldr	r3, [r4, #0]
   17096:	1c5a      	adds	r2, r3, #1
   17098:	6022      	str	r2, [r4, #0]
   1709a:	7019      	strb	r1, [r3, #0]
   1709c:	7831      	ldrb	r1, [r6, #0]
   1709e:	68a3      	ldr	r3, [r4, #8]
   170a0:	2900      	cmp	r1, #0
   170a2:	d1ed      	bne.n	17080 <_puts_r+0x5c>
   170a4:	3b01      	subs	r3, #1
   170a6:	60a3      	str	r3, [r4, #8]
   170a8:	2b00      	cmp	r3, #0
   170aa:	da0f      	bge.n	170cc <_puts_r+0xa8>
   170ac:	0022      	movs	r2, r4
   170ae:	310a      	adds	r1, #10
   170b0:	0028      	movs	r0, r5
   170b2:	f000 f973 	bl	1739c <__swbuf_r>
   170b6:	1c43      	adds	r3, r0, #1
   170b8:	d0d5      	beq.n	17066 <_puts_r+0x42>
   170ba:	200a      	movs	r0, #10
   170bc:	e7d5      	b.n	1706a <_puts_r+0x46>
   170be:	0022      	movs	r2, r4
   170c0:	0028      	movs	r0, r5
   170c2:	f000 f96b 	bl	1739c <__swbuf_r>
   170c6:	1c43      	adds	r3, r0, #1
   170c8:	d1e8      	bne.n	1709c <_puts_r+0x78>
   170ca:	e7cc      	b.n	17066 <_puts_r+0x42>
   170cc:	200a      	movs	r0, #10
   170ce:	6823      	ldr	r3, [r4, #0]
   170d0:	1c5a      	adds	r2, r3, #1
   170d2:	6022      	str	r2, [r4, #0]
   170d4:	7018      	strb	r0, [r3, #0]
   170d6:	e7c8      	b.n	1706a <_puts_r+0x46>
   170d8:	000194e0 	.word	0x000194e0
   170dc:	00019500 	.word	0x00019500
   170e0:	000194c0 	.word	0x000194c0

000170e4 <puts>:
   170e4:	b510      	push	{r4, lr}
   170e6:	4b03      	ldr	r3, [pc, #12]	; (170f4 <puts+0x10>)
   170e8:	0001      	movs	r1, r0
   170ea:	6818      	ldr	r0, [r3, #0]
   170ec:	f7ff ff9a 	bl	17024 <_puts_r>
   170f0:	bd10      	pop	{r4, pc}
   170f2:	46c0      	nop			; (mov r8, r8)
   170f4:	2000002c 	.word	0x2000002c

000170f8 <srand>:
   170f8:	4b10      	ldr	r3, [pc, #64]	; (1713c <srand+0x44>)
   170fa:	b570      	push	{r4, r5, r6, lr}
   170fc:	681c      	ldr	r4, [r3, #0]
   170fe:	0005      	movs	r5, r0
   17100:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   17102:	2b00      	cmp	r3, #0
   17104:	d115      	bne.n	17132 <srand+0x3a>
   17106:	2018      	movs	r0, #24
   17108:	f000 fc16 	bl	17938 <malloc>
   1710c:	4b0c      	ldr	r3, [pc, #48]	; (17140 <srand+0x48>)
   1710e:	63a0      	str	r0, [r4, #56]	; 0x38
   17110:	8003      	strh	r3, [r0, #0]
   17112:	4b0c      	ldr	r3, [pc, #48]	; (17144 <srand+0x4c>)
   17114:	2201      	movs	r2, #1
   17116:	8043      	strh	r3, [r0, #2]
   17118:	4b0b      	ldr	r3, [pc, #44]	; (17148 <srand+0x50>)
   1711a:	8083      	strh	r3, [r0, #4]
   1711c:	4b0b      	ldr	r3, [pc, #44]	; (1714c <srand+0x54>)
   1711e:	80c3      	strh	r3, [r0, #6]
   17120:	4b0b      	ldr	r3, [pc, #44]	; (17150 <srand+0x58>)
   17122:	8103      	strh	r3, [r0, #8]
   17124:	2305      	movs	r3, #5
   17126:	8143      	strh	r3, [r0, #10]
   17128:	3306      	adds	r3, #6
   1712a:	8183      	strh	r3, [r0, #12]
   1712c:	2300      	movs	r3, #0
   1712e:	6102      	str	r2, [r0, #16]
   17130:	6143      	str	r3, [r0, #20]
   17132:	2200      	movs	r2, #0
   17134:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   17136:	611d      	str	r5, [r3, #16]
   17138:	615a      	str	r2, [r3, #20]
   1713a:	bd70      	pop	{r4, r5, r6, pc}
   1713c:	2000002c 	.word	0x2000002c
   17140:	0000330e 	.word	0x0000330e
   17144:	ffffabcd 	.word	0xffffabcd
   17148:	00001234 	.word	0x00001234
   1714c:	ffffe66d 	.word	0xffffe66d
   17150:	ffffdeec 	.word	0xffffdeec

00017154 <rand>:
   17154:	4b15      	ldr	r3, [pc, #84]	; (171ac <rand+0x58>)
   17156:	b510      	push	{r4, lr}
   17158:	681c      	ldr	r4, [r3, #0]
   1715a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1715c:	2b00      	cmp	r3, #0
   1715e:	d115      	bne.n	1718c <rand+0x38>
   17160:	2018      	movs	r0, #24
   17162:	f000 fbe9 	bl	17938 <malloc>
   17166:	4b12      	ldr	r3, [pc, #72]	; (171b0 <rand+0x5c>)
   17168:	63a0      	str	r0, [r4, #56]	; 0x38
   1716a:	8003      	strh	r3, [r0, #0]
   1716c:	4b11      	ldr	r3, [pc, #68]	; (171b4 <rand+0x60>)
   1716e:	2201      	movs	r2, #1
   17170:	8043      	strh	r3, [r0, #2]
   17172:	4b11      	ldr	r3, [pc, #68]	; (171b8 <rand+0x64>)
   17174:	8083      	strh	r3, [r0, #4]
   17176:	4b11      	ldr	r3, [pc, #68]	; (171bc <rand+0x68>)
   17178:	80c3      	strh	r3, [r0, #6]
   1717a:	4b11      	ldr	r3, [pc, #68]	; (171c0 <rand+0x6c>)
   1717c:	8103      	strh	r3, [r0, #8]
   1717e:	2305      	movs	r3, #5
   17180:	8143      	strh	r3, [r0, #10]
   17182:	3306      	adds	r3, #6
   17184:	8183      	strh	r3, [r0, #12]
   17186:	2300      	movs	r3, #0
   17188:	6102      	str	r2, [r0, #16]
   1718a:	6143      	str	r3, [r0, #20]
   1718c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   1718e:	4a0d      	ldr	r2, [pc, #52]	; (171c4 <rand+0x70>)
   17190:	6920      	ldr	r0, [r4, #16]
   17192:	6961      	ldr	r1, [r4, #20]
   17194:	4b0c      	ldr	r3, [pc, #48]	; (171c8 <rand+0x74>)
   17196:	f7fc fd17 	bl	13bc8 <__aeabi_lmul>
   1719a:	2201      	movs	r2, #1
   1719c:	2300      	movs	r3, #0
   1719e:	1880      	adds	r0, r0, r2
   171a0:	4159      	adcs	r1, r3
   171a2:	6120      	str	r0, [r4, #16]
   171a4:	6161      	str	r1, [r4, #20]
   171a6:	0048      	lsls	r0, r1, #1
   171a8:	0840      	lsrs	r0, r0, #1
   171aa:	bd10      	pop	{r4, pc}
   171ac:	2000002c 	.word	0x2000002c
   171b0:	0000330e 	.word	0x0000330e
   171b4:	ffffabcd 	.word	0xffffabcd
   171b8:	00001234 	.word	0x00001234
   171bc:	ffffe66d 	.word	0xffffe66d
   171c0:	ffffdeec 	.word	0xffffdeec
   171c4:	4c957f2d 	.word	0x4c957f2d
   171c8:	5851f42d 	.word	0x5851f42d

000171cc <setbuf>:
   171cc:	424a      	negs	r2, r1
   171ce:	414a      	adcs	r2, r1
   171d0:	2380      	movs	r3, #128	; 0x80
   171d2:	b510      	push	{r4, lr}
   171d4:	0052      	lsls	r2, r2, #1
   171d6:	00db      	lsls	r3, r3, #3
   171d8:	f000 f802 	bl	171e0 <setvbuf>
   171dc:	bd10      	pop	{r4, pc}
   171de:	Address 0x000171de is out of bounds.


000171e0 <setvbuf>:
   171e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   171e2:	001d      	movs	r5, r3
   171e4:	4b4f      	ldr	r3, [pc, #316]	; (17324 <setvbuf+0x144>)
   171e6:	b085      	sub	sp, #20
   171e8:	681e      	ldr	r6, [r3, #0]
   171ea:	0004      	movs	r4, r0
   171ec:	000f      	movs	r7, r1
   171ee:	9200      	str	r2, [sp, #0]
   171f0:	2e00      	cmp	r6, #0
   171f2:	d005      	beq.n	17200 <setvbuf+0x20>
   171f4:	69b3      	ldr	r3, [r6, #24]
   171f6:	2b00      	cmp	r3, #0
   171f8:	d102      	bne.n	17200 <setvbuf+0x20>
   171fa:	0030      	movs	r0, r6
   171fc:	f000 fa9a 	bl	17734 <__sinit>
   17200:	4b49      	ldr	r3, [pc, #292]	; (17328 <setvbuf+0x148>)
   17202:	429c      	cmp	r4, r3
   17204:	d150      	bne.n	172a8 <setvbuf+0xc8>
   17206:	6874      	ldr	r4, [r6, #4]
   17208:	9b00      	ldr	r3, [sp, #0]
   1720a:	2b02      	cmp	r3, #2
   1720c:	d005      	beq.n	1721a <setvbuf+0x3a>
   1720e:	2b01      	cmp	r3, #1
   17210:	d900      	bls.n	17214 <setvbuf+0x34>
   17212:	e084      	b.n	1731e <setvbuf+0x13e>
   17214:	2d00      	cmp	r5, #0
   17216:	da00      	bge.n	1721a <setvbuf+0x3a>
   17218:	e081      	b.n	1731e <setvbuf+0x13e>
   1721a:	0021      	movs	r1, r4
   1721c:	0030      	movs	r0, r6
   1721e:	f000 fa1b 	bl	17658 <_fflush_r>
   17222:	6b61      	ldr	r1, [r4, #52]	; 0x34
   17224:	2900      	cmp	r1, #0
   17226:	d008      	beq.n	1723a <setvbuf+0x5a>
   17228:	0023      	movs	r3, r4
   1722a:	3344      	adds	r3, #68	; 0x44
   1722c:	4299      	cmp	r1, r3
   1722e:	d002      	beq.n	17236 <setvbuf+0x56>
   17230:	0030      	movs	r0, r6
   17232:	f000 fba9 	bl	17988 <_free_r>
   17236:	2300      	movs	r3, #0
   17238:	6363      	str	r3, [r4, #52]	; 0x34
   1723a:	2300      	movs	r3, #0
   1723c:	61a3      	str	r3, [r4, #24]
   1723e:	6063      	str	r3, [r4, #4]
   17240:	89a3      	ldrh	r3, [r4, #12]
   17242:	061b      	lsls	r3, r3, #24
   17244:	d503      	bpl.n	1724e <setvbuf+0x6e>
   17246:	6921      	ldr	r1, [r4, #16]
   17248:	0030      	movs	r0, r6
   1724a:	f000 fb9d 	bl	17988 <_free_r>
   1724e:	89a3      	ldrh	r3, [r4, #12]
   17250:	4a36      	ldr	r2, [pc, #216]	; (1732c <setvbuf+0x14c>)
   17252:	4013      	ands	r3, r2
   17254:	81a3      	strh	r3, [r4, #12]
   17256:	9b00      	ldr	r3, [sp, #0]
   17258:	2b02      	cmp	r3, #2
   1725a:	d05a      	beq.n	17312 <setvbuf+0x132>
   1725c:	ab03      	add	r3, sp, #12
   1725e:	aa02      	add	r2, sp, #8
   17260:	0021      	movs	r1, r4
   17262:	0030      	movs	r0, r6
   17264:	f000 fafc 	bl	17860 <__swhatbuf_r>
   17268:	89a3      	ldrh	r3, [r4, #12]
   1726a:	4318      	orrs	r0, r3
   1726c:	81a0      	strh	r0, [r4, #12]
   1726e:	2d00      	cmp	r5, #0
   17270:	d124      	bne.n	172bc <setvbuf+0xdc>
   17272:	9d02      	ldr	r5, [sp, #8]
   17274:	0028      	movs	r0, r5
   17276:	f000 fb5f 	bl	17938 <malloc>
   1727a:	9501      	str	r5, [sp, #4]
   1727c:	1e07      	subs	r7, r0, #0
   1727e:	d142      	bne.n	17306 <setvbuf+0x126>
   17280:	9b02      	ldr	r3, [sp, #8]
   17282:	9301      	str	r3, [sp, #4]
   17284:	42ab      	cmp	r3, r5
   17286:	d139      	bne.n	172fc <setvbuf+0x11c>
   17288:	2001      	movs	r0, #1
   1728a:	4240      	negs	r0, r0
   1728c:	2302      	movs	r3, #2
   1728e:	89a2      	ldrh	r2, [r4, #12]
   17290:	4313      	orrs	r3, r2
   17292:	81a3      	strh	r3, [r4, #12]
   17294:	2300      	movs	r3, #0
   17296:	60a3      	str	r3, [r4, #8]
   17298:	0023      	movs	r3, r4
   1729a:	3347      	adds	r3, #71	; 0x47
   1729c:	6023      	str	r3, [r4, #0]
   1729e:	6123      	str	r3, [r4, #16]
   172a0:	2301      	movs	r3, #1
   172a2:	6163      	str	r3, [r4, #20]
   172a4:	b005      	add	sp, #20
   172a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   172a8:	4b21      	ldr	r3, [pc, #132]	; (17330 <setvbuf+0x150>)
   172aa:	429c      	cmp	r4, r3
   172ac:	d101      	bne.n	172b2 <setvbuf+0xd2>
   172ae:	68b4      	ldr	r4, [r6, #8]
   172b0:	e7aa      	b.n	17208 <setvbuf+0x28>
   172b2:	4b20      	ldr	r3, [pc, #128]	; (17334 <setvbuf+0x154>)
   172b4:	429c      	cmp	r4, r3
   172b6:	d1a7      	bne.n	17208 <setvbuf+0x28>
   172b8:	68f4      	ldr	r4, [r6, #12]
   172ba:	e7a5      	b.n	17208 <setvbuf+0x28>
   172bc:	2f00      	cmp	r7, #0
   172be:	d0d9      	beq.n	17274 <setvbuf+0x94>
   172c0:	69b3      	ldr	r3, [r6, #24]
   172c2:	2b00      	cmp	r3, #0
   172c4:	d102      	bne.n	172cc <setvbuf+0xec>
   172c6:	0030      	movs	r0, r6
   172c8:	f000 fa34 	bl	17734 <__sinit>
   172cc:	9b00      	ldr	r3, [sp, #0]
   172ce:	2b01      	cmp	r3, #1
   172d0:	d103      	bne.n	172da <setvbuf+0xfa>
   172d2:	89a3      	ldrh	r3, [r4, #12]
   172d4:	9a00      	ldr	r2, [sp, #0]
   172d6:	431a      	orrs	r2, r3
   172d8:	81a2      	strh	r2, [r4, #12]
   172da:	2008      	movs	r0, #8
   172dc:	89a3      	ldrh	r3, [r4, #12]
   172de:	6027      	str	r7, [r4, #0]
   172e0:	6127      	str	r7, [r4, #16]
   172e2:	6165      	str	r5, [r4, #20]
   172e4:	4018      	ands	r0, r3
   172e6:	d018      	beq.n	1731a <setvbuf+0x13a>
   172e8:	2001      	movs	r0, #1
   172ea:	4018      	ands	r0, r3
   172ec:	2300      	movs	r3, #0
   172ee:	4298      	cmp	r0, r3
   172f0:	d011      	beq.n	17316 <setvbuf+0x136>
   172f2:	426d      	negs	r5, r5
   172f4:	60a3      	str	r3, [r4, #8]
   172f6:	61a5      	str	r5, [r4, #24]
   172f8:	0018      	movs	r0, r3
   172fa:	e7d3      	b.n	172a4 <setvbuf+0xc4>
   172fc:	9801      	ldr	r0, [sp, #4]
   172fe:	f000 fb1b 	bl	17938 <malloc>
   17302:	1e07      	subs	r7, r0, #0
   17304:	d0c0      	beq.n	17288 <setvbuf+0xa8>
   17306:	2380      	movs	r3, #128	; 0x80
   17308:	89a2      	ldrh	r2, [r4, #12]
   1730a:	9d01      	ldr	r5, [sp, #4]
   1730c:	4313      	orrs	r3, r2
   1730e:	81a3      	strh	r3, [r4, #12]
   17310:	e7d6      	b.n	172c0 <setvbuf+0xe0>
   17312:	2000      	movs	r0, #0
   17314:	e7ba      	b.n	1728c <setvbuf+0xac>
   17316:	60a5      	str	r5, [r4, #8]
   17318:	e7c4      	b.n	172a4 <setvbuf+0xc4>
   1731a:	60a0      	str	r0, [r4, #8]
   1731c:	e7c2      	b.n	172a4 <setvbuf+0xc4>
   1731e:	2001      	movs	r0, #1
   17320:	4240      	negs	r0, r0
   17322:	e7bf      	b.n	172a4 <setvbuf+0xc4>
   17324:	2000002c 	.word	0x2000002c
   17328:	000194e0 	.word	0x000194e0
   1732c:	fffff35c 	.word	0xfffff35c
   17330:	00019500 	.word	0x00019500
   17334:	000194c0 	.word	0x000194c0

00017338 <sniprintf>:
   17338:	b40c      	push	{r2, r3}
   1733a:	b530      	push	{r4, r5, lr}
   1733c:	4b16      	ldr	r3, [pc, #88]	; (17398 <sniprintf+0x60>)
   1733e:	b09d      	sub	sp, #116	; 0x74
   17340:	1e0c      	subs	r4, r1, #0
   17342:	681d      	ldr	r5, [r3, #0]
   17344:	da08      	bge.n	17358 <sniprintf+0x20>
   17346:	238b      	movs	r3, #139	; 0x8b
   17348:	2001      	movs	r0, #1
   1734a:	602b      	str	r3, [r5, #0]
   1734c:	4240      	negs	r0, r0
   1734e:	b01d      	add	sp, #116	; 0x74
   17350:	bc30      	pop	{r4, r5}
   17352:	bc08      	pop	{r3}
   17354:	b002      	add	sp, #8
   17356:	4718      	bx	r3
   17358:	2382      	movs	r3, #130	; 0x82
   1735a:	a902      	add	r1, sp, #8
   1735c:	009b      	lsls	r3, r3, #2
   1735e:	818b      	strh	r3, [r1, #12]
   17360:	2300      	movs	r3, #0
   17362:	9002      	str	r0, [sp, #8]
   17364:	6108      	str	r0, [r1, #16]
   17366:	429c      	cmp	r4, r3
   17368:	d000      	beq.n	1736c <sniprintf+0x34>
   1736a:	1e63      	subs	r3, r4, #1
   1736c:	608b      	str	r3, [r1, #8]
   1736e:	614b      	str	r3, [r1, #20]
   17370:	2301      	movs	r3, #1
   17372:	425b      	negs	r3, r3
   17374:	81cb      	strh	r3, [r1, #14]
   17376:	9a20      	ldr	r2, [sp, #128]	; 0x80
   17378:	ab21      	add	r3, sp, #132	; 0x84
   1737a:	0028      	movs	r0, r5
   1737c:	9301      	str	r3, [sp, #4]
   1737e:	f000 fc33 	bl	17be8 <_svfiprintf_r>
   17382:	1c43      	adds	r3, r0, #1
   17384:	da01      	bge.n	1738a <sniprintf+0x52>
   17386:	238b      	movs	r3, #139	; 0x8b
   17388:	602b      	str	r3, [r5, #0]
   1738a:	2c00      	cmp	r4, #0
   1738c:	d0df      	beq.n	1734e <sniprintf+0x16>
   1738e:	2300      	movs	r3, #0
   17390:	9a02      	ldr	r2, [sp, #8]
   17392:	7013      	strb	r3, [r2, #0]
   17394:	e7db      	b.n	1734e <sniprintf+0x16>
   17396:	46c0      	nop			; (mov r8, r8)
   17398:	2000002c 	.word	0x2000002c

0001739c <__swbuf_r>:
   1739c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1739e:	0005      	movs	r5, r0
   173a0:	000e      	movs	r6, r1
   173a2:	0014      	movs	r4, r2
   173a4:	2800      	cmp	r0, #0
   173a6:	d004      	beq.n	173b2 <__swbuf_r+0x16>
   173a8:	6983      	ldr	r3, [r0, #24]
   173aa:	2b00      	cmp	r3, #0
   173ac:	d101      	bne.n	173b2 <__swbuf_r+0x16>
   173ae:	f000 f9c1 	bl	17734 <__sinit>
   173b2:	4b22      	ldr	r3, [pc, #136]	; (1743c <__swbuf_r+0xa0>)
   173b4:	429c      	cmp	r4, r3
   173b6:	d12d      	bne.n	17414 <__swbuf_r+0x78>
   173b8:	686c      	ldr	r4, [r5, #4]
   173ba:	69a3      	ldr	r3, [r4, #24]
   173bc:	60a3      	str	r3, [r4, #8]
   173be:	89a3      	ldrh	r3, [r4, #12]
   173c0:	071b      	lsls	r3, r3, #28
   173c2:	d531      	bpl.n	17428 <__swbuf_r+0x8c>
   173c4:	6923      	ldr	r3, [r4, #16]
   173c6:	2b00      	cmp	r3, #0
   173c8:	d02e      	beq.n	17428 <__swbuf_r+0x8c>
   173ca:	6823      	ldr	r3, [r4, #0]
   173cc:	6922      	ldr	r2, [r4, #16]
   173ce:	b2f7      	uxtb	r7, r6
   173d0:	1a98      	subs	r0, r3, r2
   173d2:	6963      	ldr	r3, [r4, #20]
   173d4:	b2f6      	uxtb	r6, r6
   173d6:	4298      	cmp	r0, r3
   173d8:	db05      	blt.n	173e6 <__swbuf_r+0x4a>
   173da:	0021      	movs	r1, r4
   173dc:	0028      	movs	r0, r5
   173de:	f000 f93b 	bl	17658 <_fflush_r>
   173e2:	2800      	cmp	r0, #0
   173e4:	d126      	bne.n	17434 <__swbuf_r+0x98>
   173e6:	68a3      	ldr	r3, [r4, #8]
   173e8:	3001      	adds	r0, #1
   173ea:	3b01      	subs	r3, #1
   173ec:	60a3      	str	r3, [r4, #8]
   173ee:	6823      	ldr	r3, [r4, #0]
   173f0:	1c5a      	adds	r2, r3, #1
   173f2:	6022      	str	r2, [r4, #0]
   173f4:	701f      	strb	r7, [r3, #0]
   173f6:	6963      	ldr	r3, [r4, #20]
   173f8:	4298      	cmp	r0, r3
   173fa:	d004      	beq.n	17406 <__swbuf_r+0x6a>
   173fc:	89a3      	ldrh	r3, [r4, #12]
   173fe:	07db      	lsls	r3, r3, #31
   17400:	d51a      	bpl.n	17438 <__swbuf_r+0x9c>
   17402:	2e0a      	cmp	r6, #10
   17404:	d118      	bne.n	17438 <__swbuf_r+0x9c>
   17406:	0021      	movs	r1, r4
   17408:	0028      	movs	r0, r5
   1740a:	f000 f925 	bl	17658 <_fflush_r>
   1740e:	2800      	cmp	r0, #0
   17410:	d012      	beq.n	17438 <__swbuf_r+0x9c>
   17412:	e00f      	b.n	17434 <__swbuf_r+0x98>
   17414:	4b0a      	ldr	r3, [pc, #40]	; (17440 <__swbuf_r+0xa4>)
   17416:	429c      	cmp	r4, r3
   17418:	d101      	bne.n	1741e <__swbuf_r+0x82>
   1741a:	68ac      	ldr	r4, [r5, #8]
   1741c:	e7cd      	b.n	173ba <__swbuf_r+0x1e>
   1741e:	4b09      	ldr	r3, [pc, #36]	; (17444 <__swbuf_r+0xa8>)
   17420:	429c      	cmp	r4, r3
   17422:	d1ca      	bne.n	173ba <__swbuf_r+0x1e>
   17424:	68ec      	ldr	r4, [r5, #12]
   17426:	e7c8      	b.n	173ba <__swbuf_r+0x1e>
   17428:	0021      	movs	r1, r4
   1742a:	0028      	movs	r0, r5
   1742c:	f000 f80c 	bl	17448 <__swsetup_r>
   17430:	2800      	cmp	r0, #0
   17432:	d0ca      	beq.n	173ca <__swbuf_r+0x2e>
   17434:	2601      	movs	r6, #1
   17436:	4276      	negs	r6, r6
   17438:	0030      	movs	r0, r6
   1743a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1743c:	000194e0 	.word	0x000194e0
   17440:	00019500 	.word	0x00019500
   17444:	000194c0 	.word	0x000194c0

00017448 <__swsetup_r>:
   17448:	4b36      	ldr	r3, [pc, #216]	; (17524 <__swsetup_r+0xdc>)
   1744a:	b570      	push	{r4, r5, r6, lr}
   1744c:	681d      	ldr	r5, [r3, #0]
   1744e:	0006      	movs	r6, r0
   17450:	000c      	movs	r4, r1
   17452:	2d00      	cmp	r5, #0
   17454:	d005      	beq.n	17462 <__swsetup_r+0x1a>
   17456:	69ab      	ldr	r3, [r5, #24]
   17458:	2b00      	cmp	r3, #0
   1745a:	d102      	bne.n	17462 <__swsetup_r+0x1a>
   1745c:	0028      	movs	r0, r5
   1745e:	f000 f969 	bl	17734 <__sinit>
   17462:	4b31      	ldr	r3, [pc, #196]	; (17528 <__swsetup_r+0xe0>)
   17464:	429c      	cmp	r4, r3
   17466:	d10f      	bne.n	17488 <__swsetup_r+0x40>
   17468:	686c      	ldr	r4, [r5, #4]
   1746a:	230c      	movs	r3, #12
   1746c:	5ee2      	ldrsh	r2, [r4, r3]
   1746e:	b293      	uxth	r3, r2
   17470:	0719      	lsls	r1, r3, #28
   17472:	d42d      	bmi.n	174d0 <__swsetup_r+0x88>
   17474:	06d9      	lsls	r1, r3, #27
   17476:	d411      	bmi.n	1749c <__swsetup_r+0x54>
   17478:	2309      	movs	r3, #9
   1747a:	2001      	movs	r0, #1
   1747c:	6033      	str	r3, [r6, #0]
   1747e:	3337      	adds	r3, #55	; 0x37
   17480:	4313      	orrs	r3, r2
   17482:	81a3      	strh	r3, [r4, #12]
   17484:	4240      	negs	r0, r0
   17486:	bd70      	pop	{r4, r5, r6, pc}
   17488:	4b28      	ldr	r3, [pc, #160]	; (1752c <__swsetup_r+0xe4>)
   1748a:	429c      	cmp	r4, r3
   1748c:	d101      	bne.n	17492 <__swsetup_r+0x4a>
   1748e:	68ac      	ldr	r4, [r5, #8]
   17490:	e7eb      	b.n	1746a <__swsetup_r+0x22>
   17492:	4b27      	ldr	r3, [pc, #156]	; (17530 <__swsetup_r+0xe8>)
   17494:	429c      	cmp	r4, r3
   17496:	d1e8      	bne.n	1746a <__swsetup_r+0x22>
   17498:	68ec      	ldr	r4, [r5, #12]
   1749a:	e7e6      	b.n	1746a <__swsetup_r+0x22>
   1749c:	075b      	lsls	r3, r3, #29
   1749e:	d513      	bpl.n	174c8 <__swsetup_r+0x80>
   174a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
   174a2:	2900      	cmp	r1, #0
   174a4:	d008      	beq.n	174b8 <__swsetup_r+0x70>
   174a6:	0023      	movs	r3, r4
   174a8:	3344      	adds	r3, #68	; 0x44
   174aa:	4299      	cmp	r1, r3
   174ac:	d002      	beq.n	174b4 <__swsetup_r+0x6c>
   174ae:	0030      	movs	r0, r6
   174b0:	f000 fa6a 	bl	17988 <_free_r>
   174b4:	2300      	movs	r3, #0
   174b6:	6363      	str	r3, [r4, #52]	; 0x34
   174b8:	2224      	movs	r2, #36	; 0x24
   174ba:	89a3      	ldrh	r3, [r4, #12]
   174bc:	4393      	bics	r3, r2
   174be:	81a3      	strh	r3, [r4, #12]
   174c0:	2300      	movs	r3, #0
   174c2:	6063      	str	r3, [r4, #4]
   174c4:	6923      	ldr	r3, [r4, #16]
   174c6:	6023      	str	r3, [r4, #0]
   174c8:	2308      	movs	r3, #8
   174ca:	89a2      	ldrh	r2, [r4, #12]
   174cc:	4313      	orrs	r3, r2
   174ce:	81a3      	strh	r3, [r4, #12]
   174d0:	6923      	ldr	r3, [r4, #16]
   174d2:	2b00      	cmp	r3, #0
   174d4:	d10b      	bne.n	174ee <__swsetup_r+0xa6>
   174d6:	21a0      	movs	r1, #160	; 0xa0
   174d8:	2280      	movs	r2, #128	; 0x80
   174da:	89a3      	ldrh	r3, [r4, #12]
   174dc:	0089      	lsls	r1, r1, #2
   174de:	0092      	lsls	r2, r2, #2
   174e0:	400b      	ands	r3, r1
   174e2:	4293      	cmp	r3, r2
   174e4:	d003      	beq.n	174ee <__swsetup_r+0xa6>
   174e6:	0021      	movs	r1, r4
   174e8:	0030      	movs	r0, r6
   174ea:	f000 f9e1 	bl	178b0 <__smakebuf_r>
   174ee:	2301      	movs	r3, #1
   174f0:	89a2      	ldrh	r2, [r4, #12]
   174f2:	4013      	ands	r3, r2
   174f4:	d011      	beq.n	1751a <__swsetup_r+0xd2>
   174f6:	2300      	movs	r3, #0
   174f8:	60a3      	str	r3, [r4, #8]
   174fa:	6963      	ldr	r3, [r4, #20]
   174fc:	425b      	negs	r3, r3
   174fe:	61a3      	str	r3, [r4, #24]
   17500:	2000      	movs	r0, #0
   17502:	6923      	ldr	r3, [r4, #16]
   17504:	4283      	cmp	r3, r0
   17506:	d1be      	bne.n	17486 <__swsetup_r+0x3e>
   17508:	230c      	movs	r3, #12
   1750a:	5ee2      	ldrsh	r2, [r4, r3]
   1750c:	0613      	lsls	r3, r2, #24
   1750e:	d5ba      	bpl.n	17486 <__swsetup_r+0x3e>
   17510:	2340      	movs	r3, #64	; 0x40
   17512:	4313      	orrs	r3, r2
   17514:	81a3      	strh	r3, [r4, #12]
   17516:	3801      	subs	r0, #1
   17518:	e7b5      	b.n	17486 <__swsetup_r+0x3e>
   1751a:	0792      	lsls	r2, r2, #30
   1751c:	d400      	bmi.n	17520 <__swsetup_r+0xd8>
   1751e:	6963      	ldr	r3, [r4, #20]
   17520:	60a3      	str	r3, [r4, #8]
   17522:	e7ed      	b.n	17500 <__swsetup_r+0xb8>
   17524:	2000002c 	.word	0x2000002c
   17528:	000194e0 	.word	0x000194e0
   1752c:	00019500 	.word	0x00019500
   17530:	000194c0 	.word	0x000194c0

00017534 <abort>:
   17534:	b510      	push	{r4, lr}
   17536:	2006      	movs	r0, #6
   17538:	f000 fccc 	bl	17ed4 <raise>
   1753c:	2001      	movs	r0, #1
   1753e:	f7f0 f96d 	bl	781c <_exit>
   17542:	Address 0x00017542 is out of bounds.


00017544 <__sflush_r>:
   17544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17546:	898a      	ldrh	r2, [r1, #12]
   17548:	0005      	movs	r5, r0
   1754a:	000c      	movs	r4, r1
   1754c:	0713      	lsls	r3, r2, #28
   1754e:	d460      	bmi.n	17612 <__sflush_r+0xce>
   17550:	684b      	ldr	r3, [r1, #4]
   17552:	2b00      	cmp	r3, #0
   17554:	dc04      	bgt.n	17560 <__sflush_r+0x1c>
   17556:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   17558:	2b00      	cmp	r3, #0
   1755a:	dc01      	bgt.n	17560 <__sflush_r+0x1c>
   1755c:	2000      	movs	r0, #0
   1755e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   17560:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   17562:	2f00      	cmp	r7, #0
   17564:	d0fa      	beq.n	1755c <__sflush_r+0x18>
   17566:	2300      	movs	r3, #0
   17568:	682e      	ldr	r6, [r5, #0]
   1756a:	602b      	str	r3, [r5, #0]
   1756c:	2380      	movs	r3, #128	; 0x80
   1756e:	015b      	lsls	r3, r3, #5
   17570:	401a      	ands	r2, r3
   17572:	d034      	beq.n	175de <__sflush_r+0x9a>
   17574:	6d60      	ldr	r0, [r4, #84]	; 0x54
   17576:	89a3      	ldrh	r3, [r4, #12]
   17578:	075b      	lsls	r3, r3, #29
   1757a:	d506      	bpl.n	1758a <__sflush_r+0x46>
   1757c:	6863      	ldr	r3, [r4, #4]
   1757e:	1ac0      	subs	r0, r0, r3
   17580:	6b63      	ldr	r3, [r4, #52]	; 0x34
   17582:	2b00      	cmp	r3, #0
   17584:	d001      	beq.n	1758a <__sflush_r+0x46>
   17586:	6c23      	ldr	r3, [r4, #64]	; 0x40
   17588:	1ac0      	subs	r0, r0, r3
   1758a:	0002      	movs	r2, r0
   1758c:	6a21      	ldr	r1, [r4, #32]
   1758e:	2300      	movs	r3, #0
   17590:	0028      	movs	r0, r5
   17592:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   17594:	47b8      	blx	r7
   17596:	89a1      	ldrh	r1, [r4, #12]
   17598:	1c43      	adds	r3, r0, #1
   1759a:	d106      	bne.n	175aa <__sflush_r+0x66>
   1759c:	682b      	ldr	r3, [r5, #0]
   1759e:	2b1d      	cmp	r3, #29
   175a0:	d831      	bhi.n	17606 <__sflush_r+0xc2>
   175a2:	4a2c      	ldr	r2, [pc, #176]	; (17654 <__sflush_r+0x110>)
   175a4:	40da      	lsrs	r2, r3
   175a6:	07d3      	lsls	r3, r2, #31
   175a8:	d52d      	bpl.n	17606 <__sflush_r+0xc2>
   175aa:	2300      	movs	r3, #0
   175ac:	6063      	str	r3, [r4, #4]
   175ae:	6923      	ldr	r3, [r4, #16]
   175b0:	6023      	str	r3, [r4, #0]
   175b2:	04cb      	lsls	r3, r1, #19
   175b4:	d505      	bpl.n	175c2 <__sflush_r+0x7e>
   175b6:	1c43      	adds	r3, r0, #1
   175b8:	d102      	bne.n	175c0 <__sflush_r+0x7c>
   175ba:	682b      	ldr	r3, [r5, #0]
   175bc:	2b00      	cmp	r3, #0
   175be:	d100      	bne.n	175c2 <__sflush_r+0x7e>
   175c0:	6560      	str	r0, [r4, #84]	; 0x54
   175c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
   175c4:	602e      	str	r6, [r5, #0]
   175c6:	2900      	cmp	r1, #0
   175c8:	d0c8      	beq.n	1755c <__sflush_r+0x18>
   175ca:	0023      	movs	r3, r4
   175cc:	3344      	adds	r3, #68	; 0x44
   175ce:	4299      	cmp	r1, r3
   175d0:	d002      	beq.n	175d8 <__sflush_r+0x94>
   175d2:	0028      	movs	r0, r5
   175d4:	f000 f9d8 	bl	17988 <_free_r>
   175d8:	2000      	movs	r0, #0
   175da:	6360      	str	r0, [r4, #52]	; 0x34
   175dc:	e7bf      	b.n	1755e <__sflush_r+0x1a>
   175de:	2301      	movs	r3, #1
   175e0:	6a21      	ldr	r1, [r4, #32]
   175e2:	0028      	movs	r0, r5
   175e4:	47b8      	blx	r7
   175e6:	1c43      	adds	r3, r0, #1
   175e8:	d1c5      	bne.n	17576 <__sflush_r+0x32>
   175ea:	682b      	ldr	r3, [r5, #0]
   175ec:	2b00      	cmp	r3, #0
   175ee:	d0c2      	beq.n	17576 <__sflush_r+0x32>
   175f0:	2b1d      	cmp	r3, #29
   175f2:	d001      	beq.n	175f8 <__sflush_r+0xb4>
   175f4:	2b16      	cmp	r3, #22
   175f6:	d101      	bne.n	175fc <__sflush_r+0xb8>
   175f8:	602e      	str	r6, [r5, #0]
   175fa:	e7af      	b.n	1755c <__sflush_r+0x18>
   175fc:	2340      	movs	r3, #64	; 0x40
   175fe:	89a2      	ldrh	r2, [r4, #12]
   17600:	4313      	orrs	r3, r2
   17602:	81a3      	strh	r3, [r4, #12]
   17604:	e7ab      	b.n	1755e <__sflush_r+0x1a>
   17606:	2340      	movs	r3, #64	; 0x40
   17608:	430b      	orrs	r3, r1
   1760a:	2001      	movs	r0, #1
   1760c:	81a3      	strh	r3, [r4, #12]
   1760e:	4240      	negs	r0, r0
   17610:	e7a5      	b.n	1755e <__sflush_r+0x1a>
   17612:	690f      	ldr	r7, [r1, #16]
   17614:	2f00      	cmp	r7, #0
   17616:	d0a1      	beq.n	1755c <__sflush_r+0x18>
   17618:	680b      	ldr	r3, [r1, #0]
   1761a:	600f      	str	r7, [r1, #0]
   1761c:	1bdb      	subs	r3, r3, r7
   1761e:	9301      	str	r3, [sp, #4]
   17620:	2300      	movs	r3, #0
   17622:	0792      	lsls	r2, r2, #30
   17624:	d100      	bne.n	17628 <__sflush_r+0xe4>
   17626:	694b      	ldr	r3, [r1, #20]
   17628:	60a3      	str	r3, [r4, #8]
   1762a:	9b01      	ldr	r3, [sp, #4]
   1762c:	2b00      	cmp	r3, #0
   1762e:	dc00      	bgt.n	17632 <__sflush_r+0xee>
   17630:	e794      	b.n	1755c <__sflush_r+0x18>
   17632:	9b01      	ldr	r3, [sp, #4]
   17634:	003a      	movs	r2, r7
   17636:	6a21      	ldr	r1, [r4, #32]
   17638:	0028      	movs	r0, r5
   1763a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1763c:	47b0      	blx	r6
   1763e:	2800      	cmp	r0, #0
   17640:	dc03      	bgt.n	1764a <__sflush_r+0x106>
   17642:	2340      	movs	r3, #64	; 0x40
   17644:	89a2      	ldrh	r2, [r4, #12]
   17646:	4313      	orrs	r3, r2
   17648:	e7df      	b.n	1760a <__sflush_r+0xc6>
   1764a:	9b01      	ldr	r3, [sp, #4]
   1764c:	183f      	adds	r7, r7, r0
   1764e:	1a1b      	subs	r3, r3, r0
   17650:	9301      	str	r3, [sp, #4]
   17652:	e7ea      	b.n	1762a <__sflush_r+0xe6>
   17654:	20400001 	.word	0x20400001

00017658 <_fflush_r>:
   17658:	690b      	ldr	r3, [r1, #16]
   1765a:	b570      	push	{r4, r5, r6, lr}
   1765c:	0005      	movs	r5, r0
   1765e:	000c      	movs	r4, r1
   17660:	2b00      	cmp	r3, #0
   17662:	d101      	bne.n	17668 <_fflush_r+0x10>
   17664:	2000      	movs	r0, #0
   17666:	bd70      	pop	{r4, r5, r6, pc}
   17668:	2800      	cmp	r0, #0
   1766a:	d004      	beq.n	17676 <_fflush_r+0x1e>
   1766c:	6983      	ldr	r3, [r0, #24]
   1766e:	2b00      	cmp	r3, #0
   17670:	d101      	bne.n	17676 <_fflush_r+0x1e>
   17672:	f000 f85f 	bl	17734 <__sinit>
   17676:	4b0b      	ldr	r3, [pc, #44]	; (176a4 <_fflush_r+0x4c>)
   17678:	429c      	cmp	r4, r3
   1767a:	d109      	bne.n	17690 <_fflush_r+0x38>
   1767c:	686c      	ldr	r4, [r5, #4]
   1767e:	220c      	movs	r2, #12
   17680:	5ea3      	ldrsh	r3, [r4, r2]
   17682:	2b00      	cmp	r3, #0
   17684:	d0ee      	beq.n	17664 <_fflush_r+0xc>
   17686:	0021      	movs	r1, r4
   17688:	0028      	movs	r0, r5
   1768a:	f7ff ff5b 	bl	17544 <__sflush_r>
   1768e:	e7ea      	b.n	17666 <_fflush_r+0xe>
   17690:	4b05      	ldr	r3, [pc, #20]	; (176a8 <_fflush_r+0x50>)
   17692:	429c      	cmp	r4, r3
   17694:	d101      	bne.n	1769a <_fflush_r+0x42>
   17696:	68ac      	ldr	r4, [r5, #8]
   17698:	e7f1      	b.n	1767e <_fflush_r+0x26>
   1769a:	4b04      	ldr	r3, [pc, #16]	; (176ac <_fflush_r+0x54>)
   1769c:	429c      	cmp	r4, r3
   1769e:	d1ee      	bne.n	1767e <_fflush_r+0x26>
   176a0:	68ec      	ldr	r4, [r5, #12]
   176a2:	e7ec      	b.n	1767e <_fflush_r+0x26>
   176a4:	000194e0 	.word	0x000194e0
   176a8:	00019500 	.word	0x00019500
   176ac:	000194c0 	.word	0x000194c0

000176b0 <_cleanup_r>:
   176b0:	b510      	push	{r4, lr}
   176b2:	4902      	ldr	r1, [pc, #8]	; (176bc <_cleanup_r+0xc>)
   176b4:	f000 f8b2 	bl	1781c <_fwalk_reent>
   176b8:	bd10      	pop	{r4, pc}
   176ba:	46c0      	nop			; (mov r8, r8)
   176bc:	00017659 	.word	0x00017659

000176c0 <std.isra.0>:
   176c0:	2300      	movs	r3, #0
   176c2:	b510      	push	{r4, lr}
   176c4:	0004      	movs	r4, r0
   176c6:	6003      	str	r3, [r0, #0]
   176c8:	6043      	str	r3, [r0, #4]
   176ca:	6083      	str	r3, [r0, #8]
   176cc:	8181      	strh	r1, [r0, #12]
   176ce:	6643      	str	r3, [r0, #100]	; 0x64
   176d0:	81c2      	strh	r2, [r0, #14]
   176d2:	6103      	str	r3, [r0, #16]
   176d4:	6143      	str	r3, [r0, #20]
   176d6:	6183      	str	r3, [r0, #24]
   176d8:	0019      	movs	r1, r3
   176da:	2208      	movs	r2, #8
   176dc:	305c      	adds	r0, #92	; 0x5c
   176de:	f7ff f99f 	bl	16a20 <memset>
   176e2:	4b05      	ldr	r3, [pc, #20]	; (176f8 <std.isra.0+0x38>)
   176e4:	6224      	str	r4, [r4, #32]
   176e6:	6263      	str	r3, [r4, #36]	; 0x24
   176e8:	4b04      	ldr	r3, [pc, #16]	; (176fc <std.isra.0+0x3c>)
   176ea:	62a3      	str	r3, [r4, #40]	; 0x28
   176ec:	4b04      	ldr	r3, [pc, #16]	; (17700 <std.isra.0+0x40>)
   176ee:	62e3      	str	r3, [r4, #44]	; 0x2c
   176f0:	4b04      	ldr	r3, [pc, #16]	; (17704 <std.isra.0+0x44>)
   176f2:	6323      	str	r3, [r4, #48]	; 0x30
   176f4:	bd10      	pop	{r4, pc}
   176f6:	46c0      	nop			; (mov r8, r8)
   176f8:	00017f15 	.word	0x00017f15
   176fc:	00017f3d 	.word	0x00017f3d
   17700:	00017f75 	.word	0x00017f75
   17704:	00017fa1 	.word	0x00017fa1

00017708 <__sfmoreglue>:
   17708:	b570      	push	{r4, r5, r6, lr}
   1770a:	2568      	movs	r5, #104	; 0x68
   1770c:	1e4a      	subs	r2, r1, #1
   1770e:	4355      	muls	r5, r2
   17710:	000e      	movs	r6, r1
   17712:	0029      	movs	r1, r5
   17714:	3174      	adds	r1, #116	; 0x74
   17716:	f000 f981 	bl	17a1c <_malloc_r>
   1771a:	1e04      	subs	r4, r0, #0
   1771c:	d008      	beq.n	17730 <__sfmoreglue+0x28>
   1771e:	2100      	movs	r1, #0
   17720:	002a      	movs	r2, r5
   17722:	6001      	str	r1, [r0, #0]
   17724:	6046      	str	r6, [r0, #4]
   17726:	300c      	adds	r0, #12
   17728:	60a0      	str	r0, [r4, #8]
   1772a:	3268      	adds	r2, #104	; 0x68
   1772c:	f7ff f978 	bl	16a20 <memset>
   17730:	0020      	movs	r0, r4
   17732:	bd70      	pop	{r4, r5, r6, pc}

00017734 <__sinit>:
   17734:	6983      	ldr	r3, [r0, #24]
   17736:	b513      	push	{r0, r1, r4, lr}
   17738:	0004      	movs	r4, r0
   1773a:	2b00      	cmp	r3, #0
   1773c:	d128      	bne.n	17790 <__sinit+0x5c>
   1773e:	6483      	str	r3, [r0, #72]	; 0x48
   17740:	64c3      	str	r3, [r0, #76]	; 0x4c
   17742:	6503      	str	r3, [r0, #80]	; 0x50
   17744:	4b13      	ldr	r3, [pc, #76]	; (17794 <__sinit+0x60>)
   17746:	4a14      	ldr	r2, [pc, #80]	; (17798 <__sinit+0x64>)
   17748:	681b      	ldr	r3, [r3, #0]
   1774a:	6282      	str	r2, [r0, #40]	; 0x28
   1774c:	9301      	str	r3, [sp, #4]
   1774e:	4298      	cmp	r0, r3
   17750:	d101      	bne.n	17756 <__sinit+0x22>
   17752:	2301      	movs	r3, #1
   17754:	6183      	str	r3, [r0, #24]
   17756:	0020      	movs	r0, r4
   17758:	f000 f820 	bl	1779c <__sfp>
   1775c:	6060      	str	r0, [r4, #4]
   1775e:	0020      	movs	r0, r4
   17760:	f000 f81c 	bl	1779c <__sfp>
   17764:	60a0      	str	r0, [r4, #8]
   17766:	0020      	movs	r0, r4
   17768:	f000 f818 	bl	1779c <__sfp>
   1776c:	2200      	movs	r2, #0
   1776e:	60e0      	str	r0, [r4, #12]
   17770:	2104      	movs	r1, #4
   17772:	6860      	ldr	r0, [r4, #4]
   17774:	f7ff ffa4 	bl	176c0 <std.isra.0>
   17778:	2201      	movs	r2, #1
   1777a:	2109      	movs	r1, #9
   1777c:	68a0      	ldr	r0, [r4, #8]
   1777e:	f7ff ff9f 	bl	176c0 <std.isra.0>
   17782:	2202      	movs	r2, #2
   17784:	2112      	movs	r1, #18
   17786:	68e0      	ldr	r0, [r4, #12]
   17788:	f7ff ff9a 	bl	176c0 <std.isra.0>
   1778c:	2301      	movs	r3, #1
   1778e:	61a3      	str	r3, [r4, #24]
   17790:	bd13      	pop	{r0, r1, r4, pc}
   17792:	46c0      	nop			; (mov r8, r8)
   17794:	00019488 	.word	0x00019488
   17798:	000176b1 	.word	0x000176b1

0001779c <__sfp>:
   1779c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1779e:	4b1e      	ldr	r3, [pc, #120]	; (17818 <__sfp+0x7c>)
   177a0:	0007      	movs	r7, r0
   177a2:	681e      	ldr	r6, [r3, #0]
   177a4:	69b3      	ldr	r3, [r6, #24]
   177a6:	2b00      	cmp	r3, #0
   177a8:	d102      	bne.n	177b0 <__sfp+0x14>
   177aa:	0030      	movs	r0, r6
   177ac:	f7ff ffc2 	bl	17734 <__sinit>
   177b0:	3648      	adds	r6, #72	; 0x48
   177b2:	68b4      	ldr	r4, [r6, #8]
   177b4:	6873      	ldr	r3, [r6, #4]
   177b6:	3b01      	subs	r3, #1
   177b8:	d504      	bpl.n	177c4 <__sfp+0x28>
   177ba:	6833      	ldr	r3, [r6, #0]
   177bc:	2b00      	cmp	r3, #0
   177be:	d007      	beq.n	177d0 <__sfp+0x34>
   177c0:	6836      	ldr	r6, [r6, #0]
   177c2:	e7f6      	b.n	177b2 <__sfp+0x16>
   177c4:	220c      	movs	r2, #12
   177c6:	5ea5      	ldrsh	r5, [r4, r2]
   177c8:	2d00      	cmp	r5, #0
   177ca:	d00d      	beq.n	177e8 <__sfp+0x4c>
   177cc:	3468      	adds	r4, #104	; 0x68
   177ce:	e7f2      	b.n	177b6 <__sfp+0x1a>
   177d0:	2104      	movs	r1, #4
   177d2:	0038      	movs	r0, r7
   177d4:	f7ff ff98 	bl	17708 <__sfmoreglue>
   177d8:	6030      	str	r0, [r6, #0]
   177da:	2800      	cmp	r0, #0
   177dc:	d1f0      	bne.n	177c0 <__sfp+0x24>
   177de:	230c      	movs	r3, #12
   177e0:	0004      	movs	r4, r0
   177e2:	603b      	str	r3, [r7, #0]
   177e4:	0020      	movs	r0, r4
   177e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   177e8:	2301      	movs	r3, #1
   177ea:	0020      	movs	r0, r4
   177ec:	425b      	negs	r3, r3
   177ee:	81e3      	strh	r3, [r4, #14]
   177f0:	3302      	adds	r3, #2
   177f2:	81a3      	strh	r3, [r4, #12]
   177f4:	6665      	str	r5, [r4, #100]	; 0x64
   177f6:	6025      	str	r5, [r4, #0]
   177f8:	60a5      	str	r5, [r4, #8]
   177fa:	6065      	str	r5, [r4, #4]
   177fc:	6125      	str	r5, [r4, #16]
   177fe:	6165      	str	r5, [r4, #20]
   17800:	61a5      	str	r5, [r4, #24]
   17802:	2208      	movs	r2, #8
   17804:	0029      	movs	r1, r5
   17806:	305c      	adds	r0, #92	; 0x5c
   17808:	f7ff f90a 	bl	16a20 <memset>
   1780c:	6365      	str	r5, [r4, #52]	; 0x34
   1780e:	63a5      	str	r5, [r4, #56]	; 0x38
   17810:	64a5      	str	r5, [r4, #72]	; 0x48
   17812:	64e5      	str	r5, [r4, #76]	; 0x4c
   17814:	e7e6      	b.n	177e4 <__sfp+0x48>
   17816:	46c0      	nop			; (mov r8, r8)
   17818:	00019488 	.word	0x00019488

0001781c <_fwalk_reent>:
   1781c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1781e:	0004      	movs	r4, r0
   17820:	0007      	movs	r7, r0
   17822:	2600      	movs	r6, #0
   17824:	9101      	str	r1, [sp, #4]
   17826:	3448      	adds	r4, #72	; 0x48
   17828:	2c00      	cmp	r4, #0
   1782a:	d101      	bne.n	17830 <_fwalk_reent+0x14>
   1782c:	0030      	movs	r0, r6
   1782e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   17830:	6863      	ldr	r3, [r4, #4]
   17832:	68a5      	ldr	r5, [r4, #8]
   17834:	9300      	str	r3, [sp, #0]
   17836:	9b00      	ldr	r3, [sp, #0]
   17838:	3b01      	subs	r3, #1
   1783a:	9300      	str	r3, [sp, #0]
   1783c:	d501      	bpl.n	17842 <_fwalk_reent+0x26>
   1783e:	6824      	ldr	r4, [r4, #0]
   17840:	e7f2      	b.n	17828 <_fwalk_reent+0xc>
   17842:	89ab      	ldrh	r3, [r5, #12]
   17844:	2b01      	cmp	r3, #1
   17846:	d908      	bls.n	1785a <_fwalk_reent+0x3e>
   17848:	220e      	movs	r2, #14
   1784a:	5eab      	ldrsh	r3, [r5, r2]
   1784c:	3301      	adds	r3, #1
   1784e:	d004      	beq.n	1785a <_fwalk_reent+0x3e>
   17850:	0029      	movs	r1, r5
   17852:	0038      	movs	r0, r7
   17854:	9b01      	ldr	r3, [sp, #4]
   17856:	4798      	blx	r3
   17858:	4306      	orrs	r6, r0
   1785a:	3568      	adds	r5, #104	; 0x68
   1785c:	e7eb      	b.n	17836 <_fwalk_reent+0x1a>
   1785e:	Address 0x0001785e is out of bounds.


00017860 <__swhatbuf_r>:
   17860:	b570      	push	{r4, r5, r6, lr}
   17862:	000e      	movs	r6, r1
   17864:	001d      	movs	r5, r3
   17866:	230e      	movs	r3, #14
   17868:	5ec9      	ldrsh	r1, [r1, r3]
   1786a:	b090      	sub	sp, #64	; 0x40
   1786c:	0014      	movs	r4, r2
   1786e:	2900      	cmp	r1, #0
   17870:	da07      	bge.n	17882 <__swhatbuf_r+0x22>
   17872:	2300      	movs	r3, #0
   17874:	602b      	str	r3, [r5, #0]
   17876:	89b3      	ldrh	r3, [r6, #12]
   17878:	061b      	lsls	r3, r3, #24
   1787a:	d411      	bmi.n	178a0 <__swhatbuf_r+0x40>
   1787c:	2380      	movs	r3, #128	; 0x80
   1787e:	00db      	lsls	r3, r3, #3
   17880:	e00f      	b.n	178a2 <__swhatbuf_r+0x42>
   17882:	aa01      	add	r2, sp, #4
   17884:	f000 fbb8 	bl	17ff8 <_fstat_r>
   17888:	2800      	cmp	r0, #0
   1788a:	dbf2      	blt.n	17872 <__swhatbuf_r+0x12>
   1788c:	22f0      	movs	r2, #240	; 0xf0
   1788e:	9b02      	ldr	r3, [sp, #8]
   17890:	0212      	lsls	r2, r2, #8
   17892:	4013      	ands	r3, r2
   17894:	4a05      	ldr	r2, [pc, #20]	; (178ac <__swhatbuf_r+0x4c>)
   17896:	189b      	adds	r3, r3, r2
   17898:	425a      	negs	r2, r3
   1789a:	4153      	adcs	r3, r2
   1789c:	602b      	str	r3, [r5, #0]
   1789e:	e7ed      	b.n	1787c <__swhatbuf_r+0x1c>
   178a0:	2340      	movs	r3, #64	; 0x40
   178a2:	2000      	movs	r0, #0
   178a4:	6023      	str	r3, [r4, #0]
   178a6:	b010      	add	sp, #64	; 0x40
   178a8:	bd70      	pop	{r4, r5, r6, pc}
   178aa:	46c0      	nop			; (mov r8, r8)
   178ac:	ffffe000 	.word	0xffffe000

000178b0 <__smakebuf_r>:
   178b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   178b2:	2602      	movs	r6, #2
   178b4:	898b      	ldrh	r3, [r1, #12]
   178b6:	0005      	movs	r5, r0
   178b8:	000c      	movs	r4, r1
   178ba:	4233      	tst	r3, r6
   178bc:	d006      	beq.n	178cc <__smakebuf_r+0x1c>
   178be:	0023      	movs	r3, r4
   178c0:	3347      	adds	r3, #71	; 0x47
   178c2:	6023      	str	r3, [r4, #0]
   178c4:	6123      	str	r3, [r4, #16]
   178c6:	2301      	movs	r3, #1
   178c8:	6163      	str	r3, [r4, #20]
   178ca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   178cc:	ab01      	add	r3, sp, #4
   178ce:	466a      	mov	r2, sp
   178d0:	f7ff ffc6 	bl	17860 <__swhatbuf_r>
   178d4:	9900      	ldr	r1, [sp, #0]
   178d6:	0007      	movs	r7, r0
   178d8:	0028      	movs	r0, r5
   178da:	f000 f89f 	bl	17a1c <_malloc_r>
   178de:	2800      	cmp	r0, #0
   178e0:	d108      	bne.n	178f4 <__smakebuf_r+0x44>
   178e2:	220c      	movs	r2, #12
   178e4:	5ea3      	ldrsh	r3, [r4, r2]
   178e6:	059a      	lsls	r2, r3, #22
   178e8:	d4ef      	bmi.n	178ca <__smakebuf_r+0x1a>
   178ea:	2203      	movs	r2, #3
   178ec:	4393      	bics	r3, r2
   178ee:	431e      	orrs	r6, r3
   178f0:	81a6      	strh	r6, [r4, #12]
   178f2:	e7e4      	b.n	178be <__smakebuf_r+0xe>
   178f4:	4b0f      	ldr	r3, [pc, #60]	; (17934 <__smakebuf_r+0x84>)
   178f6:	62ab      	str	r3, [r5, #40]	; 0x28
   178f8:	2380      	movs	r3, #128	; 0x80
   178fa:	89a2      	ldrh	r2, [r4, #12]
   178fc:	6020      	str	r0, [r4, #0]
   178fe:	4313      	orrs	r3, r2
   17900:	81a3      	strh	r3, [r4, #12]
   17902:	9b00      	ldr	r3, [sp, #0]
   17904:	6120      	str	r0, [r4, #16]
   17906:	6163      	str	r3, [r4, #20]
   17908:	9b01      	ldr	r3, [sp, #4]
   1790a:	2b00      	cmp	r3, #0
   1790c:	d00d      	beq.n	1792a <__smakebuf_r+0x7a>
   1790e:	230e      	movs	r3, #14
   17910:	5ee1      	ldrsh	r1, [r4, r3]
   17912:	0028      	movs	r0, r5
   17914:	f000 fb82 	bl	1801c <_isatty_r>
   17918:	2800      	cmp	r0, #0
   1791a:	d006      	beq.n	1792a <__smakebuf_r+0x7a>
   1791c:	2203      	movs	r2, #3
   1791e:	89a3      	ldrh	r3, [r4, #12]
   17920:	4393      	bics	r3, r2
   17922:	001a      	movs	r2, r3
   17924:	2301      	movs	r3, #1
   17926:	4313      	orrs	r3, r2
   17928:	81a3      	strh	r3, [r4, #12]
   1792a:	89a0      	ldrh	r0, [r4, #12]
   1792c:	4338      	orrs	r0, r7
   1792e:	81a0      	strh	r0, [r4, #12]
   17930:	e7cb      	b.n	178ca <__smakebuf_r+0x1a>
   17932:	46c0      	nop			; (mov r8, r8)
   17934:	000176b1 	.word	0x000176b1

00017938 <malloc>:
   17938:	b510      	push	{r4, lr}
   1793a:	4b03      	ldr	r3, [pc, #12]	; (17948 <malloc+0x10>)
   1793c:	0001      	movs	r1, r0
   1793e:	6818      	ldr	r0, [r3, #0]
   17940:	f000 f86c 	bl	17a1c <_malloc_r>
   17944:	bd10      	pop	{r4, pc}
   17946:	46c0      	nop			; (mov r8, r8)
   17948:	2000002c 	.word	0x2000002c

0001794c <memchr>:
   1794c:	b2c9      	uxtb	r1, r1
   1794e:	1882      	adds	r2, r0, r2
   17950:	4290      	cmp	r0, r2
   17952:	d101      	bne.n	17958 <memchr+0xc>
   17954:	2000      	movs	r0, #0
   17956:	4770      	bx	lr
   17958:	7803      	ldrb	r3, [r0, #0]
   1795a:	428b      	cmp	r3, r1
   1795c:	d0fb      	beq.n	17956 <memchr+0xa>
   1795e:	3001      	adds	r0, #1
   17960:	e7f6      	b.n	17950 <memchr+0x4>

00017962 <memmove>:
   17962:	b510      	push	{r4, lr}
   17964:	4288      	cmp	r0, r1
   17966:	d902      	bls.n	1796e <memmove+0xc>
   17968:	188b      	adds	r3, r1, r2
   1796a:	4298      	cmp	r0, r3
   1796c:	d308      	bcc.n	17980 <memmove+0x1e>
   1796e:	2300      	movs	r3, #0
   17970:	429a      	cmp	r2, r3
   17972:	d007      	beq.n	17984 <memmove+0x22>
   17974:	5ccc      	ldrb	r4, [r1, r3]
   17976:	54c4      	strb	r4, [r0, r3]
   17978:	3301      	adds	r3, #1
   1797a:	e7f9      	b.n	17970 <memmove+0xe>
   1797c:	5c8b      	ldrb	r3, [r1, r2]
   1797e:	5483      	strb	r3, [r0, r2]
   17980:	3a01      	subs	r2, #1
   17982:	d2fb      	bcs.n	1797c <memmove+0x1a>
   17984:	bd10      	pop	{r4, pc}
   17986:	Address 0x00017986 is out of bounds.


00017988 <_free_r>:
   17988:	b570      	push	{r4, r5, r6, lr}
   1798a:	0005      	movs	r5, r0
   1798c:	2900      	cmp	r1, #0
   1798e:	d010      	beq.n	179b2 <_free_r+0x2a>
   17990:	1f0c      	subs	r4, r1, #4
   17992:	6823      	ldr	r3, [r4, #0]
   17994:	2b00      	cmp	r3, #0
   17996:	da00      	bge.n	1799a <_free_r+0x12>
   17998:	18e4      	adds	r4, r4, r3
   1799a:	0028      	movs	r0, r5
   1799c:	f000 fb64 	bl	18068 <__malloc_lock>
   179a0:	4a1d      	ldr	r2, [pc, #116]	; (17a18 <_free_r+0x90>)
   179a2:	6813      	ldr	r3, [r2, #0]
   179a4:	2b00      	cmp	r3, #0
   179a6:	d105      	bne.n	179b4 <_free_r+0x2c>
   179a8:	6063      	str	r3, [r4, #4]
   179aa:	6014      	str	r4, [r2, #0]
   179ac:	0028      	movs	r0, r5
   179ae:	f000 fb5c 	bl	1806a <__malloc_unlock>
   179b2:	bd70      	pop	{r4, r5, r6, pc}
   179b4:	42a3      	cmp	r3, r4
   179b6:	d909      	bls.n	179cc <_free_r+0x44>
   179b8:	6821      	ldr	r1, [r4, #0]
   179ba:	1860      	adds	r0, r4, r1
   179bc:	4283      	cmp	r3, r0
   179be:	d1f3      	bne.n	179a8 <_free_r+0x20>
   179c0:	6818      	ldr	r0, [r3, #0]
   179c2:	685b      	ldr	r3, [r3, #4]
   179c4:	1841      	adds	r1, r0, r1
   179c6:	6021      	str	r1, [r4, #0]
   179c8:	e7ee      	b.n	179a8 <_free_r+0x20>
   179ca:	0013      	movs	r3, r2
   179cc:	685a      	ldr	r2, [r3, #4]
   179ce:	2a00      	cmp	r2, #0
   179d0:	d001      	beq.n	179d6 <_free_r+0x4e>
   179d2:	42a2      	cmp	r2, r4
   179d4:	d9f9      	bls.n	179ca <_free_r+0x42>
   179d6:	6819      	ldr	r1, [r3, #0]
   179d8:	1858      	adds	r0, r3, r1
   179da:	42a0      	cmp	r0, r4
   179dc:	d10b      	bne.n	179f6 <_free_r+0x6e>
   179de:	6820      	ldr	r0, [r4, #0]
   179e0:	1809      	adds	r1, r1, r0
   179e2:	1858      	adds	r0, r3, r1
   179e4:	6019      	str	r1, [r3, #0]
   179e6:	4282      	cmp	r2, r0
   179e8:	d1e0      	bne.n	179ac <_free_r+0x24>
   179ea:	6810      	ldr	r0, [r2, #0]
   179ec:	6852      	ldr	r2, [r2, #4]
   179ee:	1841      	adds	r1, r0, r1
   179f0:	6019      	str	r1, [r3, #0]
   179f2:	605a      	str	r2, [r3, #4]
   179f4:	e7da      	b.n	179ac <_free_r+0x24>
   179f6:	42a0      	cmp	r0, r4
   179f8:	d902      	bls.n	17a00 <_free_r+0x78>
   179fa:	230c      	movs	r3, #12
   179fc:	602b      	str	r3, [r5, #0]
   179fe:	e7d5      	b.n	179ac <_free_r+0x24>
   17a00:	6821      	ldr	r1, [r4, #0]
   17a02:	1860      	adds	r0, r4, r1
   17a04:	4282      	cmp	r2, r0
   17a06:	d103      	bne.n	17a10 <_free_r+0x88>
   17a08:	6810      	ldr	r0, [r2, #0]
   17a0a:	6852      	ldr	r2, [r2, #4]
   17a0c:	1841      	adds	r1, r0, r1
   17a0e:	6021      	str	r1, [r4, #0]
   17a10:	6062      	str	r2, [r4, #4]
   17a12:	605c      	str	r4, [r3, #4]
   17a14:	e7ca      	b.n	179ac <_free_r+0x24>
   17a16:	46c0      	nop			; (mov r8, r8)
   17a18:	200020cc 	.word	0x200020cc

00017a1c <_malloc_r>:
   17a1c:	2303      	movs	r3, #3
   17a1e:	b570      	push	{r4, r5, r6, lr}
   17a20:	1ccd      	adds	r5, r1, #3
   17a22:	439d      	bics	r5, r3
   17a24:	3508      	adds	r5, #8
   17a26:	0006      	movs	r6, r0
   17a28:	2d0c      	cmp	r5, #12
   17a2a:	d21e      	bcs.n	17a6a <_malloc_r+0x4e>
   17a2c:	250c      	movs	r5, #12
   17a2e:	42a9      	cmp	r1, r5
   17a30:	d81d      	bhi.n	17a6e <_malloc_r+0x52>
   17a32:	0030      	movs	r0, r6
   17a34:	f000 fb18 	bl	18068 <__malloc_lock>
   17a38:	4a25      	ldr	r2, [pc, #148]	; (17ad0 <_malloc_r+0xb4>)
   17a3a:	6814      	ldr	r4, [r2, #0]
   17a3c:	0021      	movs	r1, r4
   17a3e:	2900      	cmp	r1, #0
   17a40:	d119      	bne.n	17a76 <_malloc_r+0x5a>
   17a42:	4c24      	ldr	r4, [pc, #144]	; (17ad4 <_malloc_r+0xb8>)
   17a44:	6823      	ldr	r3, [r4, #0]
   17a46:	2b00      	cmp	r3, #0
   17a48:	d103      	bne.n	17a52 <_malloc_r+0x36>
   17a4a:	0030      	movs	r0, r6
   17a4c:	f000 fa06 	bl	17e5c <_sbrk_r>
   17a50:	6020      	str	r0, [r4, #0]
   17a52:	0029      	movs	r1, r5
   17a54:	0030      	movs	r0, r6
   17a56:	f000 fa01 	bl	17e5c <_sbrk_r>
   17a5a:	1c43      	adds	r3, r0, #1
   17a5c:	d12c      	bne.n	17ab8 <_malloc_r+0x9c>
   17a5e:	230c      	movs	r3, #12
   17a60:	0030      	movs	r0, r6
   17a62:	6033      	str	r3, [r6, #0]
   17a64:	f000 fb01 	bl	1806a <__malloc_unlock>
   17a68:	e003      	b.n	17a72 <_malloc_r+0x56>
   17a6a:	2d00      	cmp	r5, #0
   17a6c:	dadf      	bge.n	17a2e <_malloc_r+0x12>
   17a6e:	230c      	movs	r3, #12
   17a70:	6033      	str	r3, [r6, #0]
   17a72:	2000      	movs	r0, #0
   17a74:	bd70      	pop	{r4, r5, r6, pc}
   17a76:	680b      	ldr	r3, [r1, #0]
   17a78:	1b5b      	subs	r3, r3, r5
   17a7a:	d41a      	bmi.n	17ab2 <_malloc_r+0x96>
   17a7c:	2b0b      	cmp	r3, #11
   17a7e:	d903      	bls.n	17a88 <_malloc_r+0x6c>
   17a80:	600b      	str	r3, [r1, #0]
   17a82:	18cc      	adds	r4, r1, r3
   17a84:	6025      	str	r5, [r4, #0]
   17a86:	e003      	b.n	17a90 <_malloc_r+0x74>
   17a88:	428c      	cmp	r4, r1
   17a8a:	d10e      	bne.n	17aaa <_malloc_r+0x8e>
   17a8c:	6863      	ldr	r3, [r4, #4]
   17a8e:	6013      	str	r3, [r2, #0]
   17a90:	0030      	movs	r0, r6
   17a92:	f000 faea 	bl	1806a <__malloc_unlock>
   17a96:	0020      	movs	r0, r4
   17a98:	2207      	movs	r2, #7
   17a9a:	300b      	adds	r0, #11
   17a9c:	1d23      	adds	r3, r4, #4
   17a9e:	4390      	bics	r0, r2
   17aa0:	1ac3      	subs	r3, r0, r3
   17aa2:	d0e7      	beq.n	17a74 <_malloc_r+0x58>
   17aa4:	425a      	negs	r2, r3
   17aa6:	50e2      	str	r2, [r4, r3]
   17aa8:	e7e4      	b.n	17a74 <_malloc_r+0x58>
   17aaa:	684b      	ldr	r3, [r1, #4]
   17aac:	6063      	str	r3, [r4, #4]
   17aae:	000c      	movs	r4, r1
   17ab0:	e7ee      	b.n	17a90 <_malloc_r+0x74>
   17ab2:	000c      	movs	r4, r1
   17ab4:	6849      	ldr	r1, [r1, #4]
   17ab6:	e7c2      	b.n	17a3e <_malloc_r+0x22>
   17ab8:	2303      	movs	r3, #3
   17aba:	1cc4      	adds	r4, r0, #3
   17abc:	439c      	bics	r4, r3
   17abe:	42a0      	cmp	r0, r4
   17ac0:	d0e0      	beq.n	17a84 <_malloc_r+0x68>
   17ac2:	1a21      	subs	r1, r4, r0
   17ac4:	0030      	movs	r0, r6
   17ac6:	f000 f9c9 	bl	17e5c <_sbrk_r>
   17aca:	1c43      	adds	r3, r0, #1
   17acc:	d1da      	bne.n	17a84 <_malloc_r+0x68>
   17ace:	e7c6      	b.n	17a5e <_malloc_r+0x42>
   17ad0:	200020cc 	.word	0x200020cc
   17ad4:	200020d0 	.word	0x200020d0

00017ad8 <_realloc_r>:
   17ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17ada:	0007      	movs	r7, r0
   17adc:	000d      	movs	r5, r1
   17ade:	0016      	movs	r6, r2
   17ae0:	2900      	cmp	r1, #0
   17ae2:	d105      	bne.n	17af0 <_realloc_r+0x18>
   17ae4:	0011      	movs	r1, r2
   17ae6:	f7ff ff99 	bl	17a1c <_malloc_r>
   17aea:	0004      	movs	r4, r0
   17aec:	0020      	movs	r0, r4
   17aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17af0:	2a00      	cmp	r2, #0
   17af2:	d103      	bne.n	17afc <_realloc_r+0x24>
   17af4:	f7ff ff48 	bl	17988 <_free_r>
   17af8:	0034      	movs	r4, r6
   17afa:	e7f7      	b.n	17aec <_realloc_r+0x14>
   17afc:	f000 fab6 	bl	1806c <_malloc_usable_size_r>
   17b00:	002c      	movs	r4, r5
   17b02:	4286      	cmp	r6, r0
   17b04:	d9f2      	bls.n	17aec <_realloc_r+0x14>
   17b06:	0031      	movs	r1, r6
   17b08:	0038      	movs	r0, r7
   17b0a:	f7ff ff87 	bl	17a1c <_malloc_r>
   17b0e:	1e04      	subs	r4, r0, #0
   17b10:	d0ec      	beq.n	17aec <_realloc_r+0x14>
   17b12:	0029      	movs	r1, r5
   17b14:	0032      	movs	r2, r6
   17b16:	f7fe ff7a 	bl	16a0e <memcpy>
   17b1a:	0029      	movs	r1, r5
   17b1c:	0038      	movs	r0, r7
   17b1e:	f7ff ff33 	bl	17988 <_free_r>
   17b22:	e7e3      	b.n	17aec <_realloc_r+0x14>

00017b24 <__ssputs_r>:
   17b24:	b5f0      	push	{r4, r5, r6, r7, lr}
   17b26:	688e      	ldr	r6, [r1, #8]
   17b28:	b085      	sub	sp, #20
   17b2a:	0007      	movs	r7, r0
   17b2c:	000c      	movs	r4, r1
   17b2e:	9203      	str	r2, [sp, #12]
   17b30:	9301      	str	r3, [sp, #4]
   17b32:	429e      	cmp	r6, r3
   17b34:	d839      	bhi.n	17baa <__ssputs_r+0x86>
   17b36:	2390      	movs	r3, #144	; 0x90
   17b38:	898a      	ldrh	r2, [r1, #12]
   17b3a:	00db      	lsls	r3, r3, #3
   17b3c:	421a      	tst	r2, r3
   17b3e:	d034      	beq.n	17baa <__ssputs_r+0x86>
   17b40:	2503      	movs	r5, #3
   17b42:	6909      	ldr	r1, [r1, #16]
   17b44:	6823      	ldr	r3, [r4, #0]
   17b46:	1a5b      	subs	r3, r3, r1
   17b48:	9302      	str	r3, [sp, #8]
   17b4a:	6963      	ldr	r3, [r4, #20]
   17b4c:	9802      	ldr	r0, [sp, #8]
   17b4e:	435d      	muls	r5, r3
   17b50:	0feb      	lsrs	r3, r5, #31
   17b52:	195d      	adds	r5, r3, r5
   17b54:	9b01      	ldr	r3, [sp, #4]
   17b56:	106d      	asrs	r5, r5, #1
   17b58:	3301      	adds	r3, #1
   17b5a:	181b      	adds	r3, r3, r0
   17b5c:	42ab      	cmp	r3, r5
   17b5e:	d900      	bls.n	17b62 <__ssputs_r+0x3e>
   17b60:	001d      	movs	r5, r3
   17b62:	0553      	lsls	r3, r2, #21
   17b64:	d532      	bpl.n	17bcc <__ssputs_r+0xa8>
   17b66:	0029      	movs	r1, r5
   17b68:	0038      	movs	r0, r7
   17b6a:	f7ff ff57 	bl	17a1c <_malloc_r>
   17b6e:	1e06      	subs	r6, r0, #0
   17b70:	d109      	bne.n	17b86 <__ssputs_r+0x62>
   17b72:	230c      	movs	r3, #12
   17b74:	603b      	str	r3, [r7, #0]
   17b76:	2340      	movs	r3, #64	; 0x40
   17b78:	2001      	movs	r0, #1
   17b7a:	89a2      	ldrh	r2, [r4, #12]
   17b7c:	4240      	negs	r0, r0
   17b7e:	4313      	orrs	r3, r2
   17b80:	81a3      	strh	r3, [r4, #12]
   17b82:	b005      	add	sp, #20
   17b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17b86:	9a02      	ldr	r2, [sp, #8]
   17b88:	6921      	ldr	r1, [r4, #16]
   17b8a:	f7fe ff40 	bl	16a0e <memcpy>
   17b8e:	89a3      	ldrh	r3, [r4, #12]
   17b90:	4a14      	ldr	r2, [pc, #80]	; (17be4 <__ssputs_r+0xc0>)
   17b92:	401a      	ands	r2, r3
   17b94:	2380      	movs	r3, #128	; 0x80
   17b96:	4313      	orrs	r3, r2
   17b98:	81a3      	strh	r3, [r4, #12]
   17b9a:	9b02      	ldr	r3, [sp, #8]
   17b9c:	6126      	str	r6, [r4, #16]
   17b9e:	18f6      	adds	r6, r6, r3
   17ba0:	6026      	str	r6, [r4, #0]
   17ba2:	6165      	str	r5, [r4, #20]
   17ba4:	9e01      	ldr	r6, [sp, #4]
   17ba6:	1aed      	subs	r5, r5, r3
   17ba8:	60a5      	str	r5, [r4, #8]
   17baa:	9b01      	ldr	r3, [sp, #4]
   17bac:	42b3      	cmp	r3, r6
   17bae:	d200      	bcs.n	17bb2 <__ssputs_r+0x8e>
   17bb0:	001e      	movs	r6, r3
   17bb2:	0032      	movs	r2, r6
   17bb4:	9903      	ldr	r1, [sp, #12]
   17bb6:	6820      	ldr	r0, [r4, #0]
   17bb8:	f7ff fed3 	bl	17962 <memmove>
   17bbc:	68a3      	ldr	r3, [r4, #8]
   17bbe:	2000      	movs	r0, #0
   17bc0:	1b9b      	subs	r3, r3, r6
   17bc2:	60a3      	str	r3, [r4, #8]
   17bc4:	6823      	ldr	r3, [r4, #0]
   17bc6:	199e      	adds	r6, r3, r6
   17bc8:	6026      	str	r6, [r4, #0]
   17bca:	e7da      	b.n	17b82 <__ssputs_r+0x5e>
   17bcc:	002a      	movs	r2, r5
   17bce:	0038      	movs	r0, r7
   17bd0:	f7ff ff82 	bl	17ad8 <_realloc_r>
   17bd4:	1e06      	subs	r6, r0, #0
   17bd6:	d1e0      	bne.n	17b9a <__ssputs_r+0x76>
   17bd8:	6921      	ldr	r1, [r4, #16]
   17bda:	0038      	movs	r0, r7
   17bdc:	f7ff fed4 	bl	17988 <_free_r>
   17be0:	e7c7      	b.n	17b72 <__ssputs_r+0x4e>
   17be2:	46c0      	nop			; (mov r8, r8)
   17be4:	fffffb7f 	.word	0xfffffb7f

00017be8 <_svfiprintf_r>:
   17be8:	b5f0      	push	{r4, r5, r6, r7, lr}
   17bea:	b09f      	sub	sp, #124	; 0x7c
   17bec:	9002      	str	r0, [sp, #8]
   17bee:	9305      	str	r3, [sp, #20]
   17bf0:	898b      	ldrh	r3, [r1, #12]
   17bf2:	000f      	movs	r7, r1
   17bf4:	0016      	movs	r6, r2
   17bf6:	061b      	lsls	r3, r3, #24
   17bf8:	d511      	bpl.n	17c1e <_svfiprintf_r+0x36>
   17bfa:	690b      	ldr	r3, [r1, #16]
   17bfc:	2b00      	cmp	r3, #0
   17bfe:	d10e      	bne.n	17c1e <_svfiprintf_r+0x36>
   17c00:	2140      	movs	r1, #64	; 0x40
   17c02:	f7ff ff0b 	bl	17a1c <_malloc_r>
   17c06:	6038      	str	r0, [r7, #0]
   17c08:	6138      	str	r0, [r7, #16]
   17c0a:	2800      	cmp	r0, #0
   17c0c:	d105      	bne.n	17c1a <_svfiprintf_r+0x32>
   17c0e:	230c      	movs	r3, #12
   17c10:	9a02      	ldr	r2, [sp, #8]
   17c12:	3801      	subs	r0, #1
   17c14:	6013      	str	r3, [r2, #0]
   17c16:	b01f      	add	sp, #124	; 0x7c
   17c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17c1a:	2340      	movs	r3, #64	; 0x40
   17c1c:	617b      	str	r3, [r7, #20]
   17c1e:	2300      	movs	r3, #0
   17c20:	ad06      	add	r5, sp, #24
   17c22:	616b      	str	r3, [r5, #20]
   17c24:	3320      	adds	r3, #32
   17c26:	766b      	strb	r3, [r5, #25]
   17c28:	3310      	adds	r3, #16
   17c2a:	76ab      	strb	r3, [r5, #26]
   17c2c:	0034      	movs	r4, r6
   17c2e:	7823      	ldrb	r3, [r4, #0]
   17c30:	2b00      	cmp	r3, #0
   17c32:	d147      	bne.n	17cc4 <_svfiprintf_r+0xdc>
   17c34:	1ba3      	subs	r3, r4, r6
   17c36:	9304      	str	r3, [sp, #16]
   17c38:	d00d      	beq.n	17c56 <_svfiprintf_r+0x6e>
   17c3a:	1ba3      	subs	r3, r4, r6
   17c3c:	0032      	movs	r2, r6
   17c3e:	0039      	movs	r1, r7
   17c40:	9802      	ldr	r0, [sp, #8]
   17c42:	f7ff ff6f 	bl	17b24 <__ssputs_r>
   17c46:	1c43      	adds	r3, r0, #1
   17c48:	d100      	bne.n	17c4c <_svfiprintf_r+0x64>
   17c4a:	e0b5      	b.n	17db8 <_svfiprintf_r+0x1d0>
   17c4c:	696a      	ldr	r2, [r5, #20]
   17c4e:	9b04      	ldr	r3, [sp, #16]
   17c50:	4694      	mov	ip, r2
   17c52:	4463      	add	r3, ip
   17c54:	616b      	str	r3, [r5, #20]
   17c56:	7823      	ldrb	r3, [r4, #0]
   17c58:	2b00      	cmp	r3, #0
   17c5a:	d100      	bne.n	17c5e <_svfiprintf_r+0x76>
   17c5c:	e0ac      	b.n	17db8 <_svfiprintf_r+0x1d0>
   17c5e:	2201      	movs	r2, #1
   17c60:	2300      	movs	r3, #0
   17c62:	4252      	negs	r2, r2
   17c64:	606a      	str	r2, [r5, #4]
   17c66:	a902      	add	r1, sp, #8
   17c68:	3254      	adds	r2, #84	; 0x54
   17c6a:	1852      	adds	r2, r2, r1
   17c6c:	3401      	adds	r4, #1
   17c6e:	602b      	str	r3, [r5, #0]
   17c70:	60eb      	str	r3, [r5, #12]
   17c72:	60ab      	str	r3, [r5, #8]
   17c74:	7013      	strb	r3, [r2, #0]
   17c76:	65ab      	str	r3, [r5, #88]	; 0x58
   17c78:	4e58      	ldr	r6, [pc, #352]	; (17ddc <_svfiprintf_r+0x1f4>)
   17c7a:	2205      	movs	r2, #5
   17c7c:	7821      	ldrb	r1, [r4, #0]
   17c7e:	0030      	movs	r0, r6
   17c80:	f7ff fe64 	bl	1794c <memchr>
   17c84:	1c62      	adds	r2, r4, #1
   17c86:	2800      	cmp	r0, #0
   17c88:	d120      	bne.n	17ccc <_svfiprintf_r+0xe4>
   17c8a:	6829      	ldr	r1, [r5, #0]
   17c8c:	06cb      	lsls	r3, r1, #27
   17c8e:	d504      	bpl.n	17c9a <_svfiprintf_r+0xb2>
   17c90:	2353      	movs	r3, #83	; 0x53
   17c92:	ae02      	add	r6, sp, #8
   17c94:	3020      	adds	r0, #32
   17c96:	199b      	adds	r3, r3, r6
   17c98:	7018      	strb	r0, [r3, #0]
   17c9a:	070b      	lsls	r3, r1, #28
   17c9c:	d504      	bpl.n	17ca8 <_svfiprintf_r+0xc0>
   17c9e:	2353      	movs	r3, #83	; 0x53
   17ca0:	202b      	movs	r0, #43	; 0x2b
   17ca2:	ae02      	add	r6, sp, #8
   17ca4:	199b      	adds	r3, r3, r6
   17ca6:	7018      	strb	r0, [r3, #0]
   17ca8:	7823      	ldrb	r3, [r4, #0]
   17caa:	2b2a      	cmp	r3, #42	; 0x2a
   17cac:	d016      	beq.n	17cdc <_svfiprintf_r+0xf4>
   17cae:	2000      	movs	r0, #0
   17cb0:	210a      	movs	r1, #10
   17cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17cb4:	7822      	ldrb	r2, [r4, #0]
   17cb6:	3a30      	subs	r2, #48	; 0x30
   17cb8:	2a09      	cmp	r2, #9
   17cba:	d955      	bls.n	17d68 <_svfiprintf_r+0x180>
   17cbc:	2800      	cmp	r0, #0
   17cbe:	d015      	beq.n	17cec <_svfiprintf_r+0x104>
   17cc0:	9309      	str	r3, [sp, #36]	; 0x24
   17cc2:	e013      	b.n	17cec <_svfiprintf_r+0x104>
   17cc4:	2b25      	cmp	r3, #37	; 0x25
   17cc6:	d0b5      	beq.n	17c34 <_svfiprintf_r+0x4c>
   17cc8:	3401      	adds	r4, #1
   17cca:	e7b0      	b.n	17c2e <_svfiprintf_r+0x46>
   17ccc:	2301      	movs	r3, #1
   17cce:	1b80      	subs	r0, r0, r6
   17cd0:	4083      	lsls	r3, r0
   17cd2:	6829      	ldr	r1, [r5, #0]
   17cd4:	0014      	movs	r4, r2
   17cd6:	430b      	orrs	r3, r1
   17cd8:	602b      	str	r3, [r5, #0]
   17cda:	e7cd      	b.n	17c78 <_svfiprintf_r+0x90>
   17cdc:	9b05      	ldr	r3, [sp, #20]
   17cde:	1d18      	adds	r0, r3, #4
   17ce0:	681b      	ldr	r3, [r3, #0]
   17ce2:	9005      	str	r0, [sp, #20]
   17ce4:	2b00      	cmp	r3, #0
   17ce6:	db39      	blt.n	17d5c <_svfiprintf_r+0x174>
   17ce8:	9309      	str	r3, [sp, #36]	; 0x24
   17cea:	0014      	movs	r4, r2
   17cec:	7823      	ldrb	r3, [r4, #0]
   17cee:	2b2e      	cmp	r3, #46	; 0x2e
   17cf0:	d10b      	bne.n	17d0a <_svfiprintf_r+0x122>
   17cf2:	7863      	ldrb	r3, [r4, #1]
   17cf4:	1c62      	adds	r2, r4, #1
   17cf6:	2b2a      	cmp	r3, #42	; 0x2a
   17cf8:	d13e      	bne.n	17d78 <_svfiprintf_r+0x190>
   17cfa:	9b05      	ldr	r3, [sp, #20]
   17cfc:	3402      	adds	r4, #2
   17cfe:	1d1a      	adds	r2, r3, #4
   17d00:	681b      	ldr	r3, [r3, #0]
   17d02:	9205      	str	r2, [sp, #20]
   17d04:	2b00      	cmp	r3, #0
   17d06:	db34      	blt.n	17d72 <_svfiprintf_r+0x18a>
   17d08:	9307      	str	r3, [sp, #28]
   17d0a:	4e35      	ldr	r6, [pc, #212]	; (17de0 <_svfiprintf_r+0x1f8>)
   17d0c:	7821      	ldrb	r1, [r4, #0]
   17d0e:	2203      	movs	r2, #3
   17d10:	0030      	movs	r0, r6
   17d12:	f7ff fe1b 	bl	1794c <memchr>
   17d16:	2800      	cmp	r0, #0
   17d18:	d006      	beq.n	17d28 <_svfiprintf_r+0x140>
   17d1a:	2340      	movs	r3, #64	; 0x40
   17d1c:	1b80      	subs	r0, r0, r6
   17d1e:	4083      	lsls	r3, r0
   17d20:	682a      	ldr	r2, [r5, #0]
   17d22:	3401      	adds	r4, #1
   17d24:	4313      	orrs	r3, r2
   17d26:	602b      	str	r3, [r5, #0]
   17d28:	7821      	ldrb	r1, [r4, #0]
   17d2a:	2206      	movs	r2, #6
   17d2c:	482d      	ldr	r0, [pc, #180]	; (17de4 <_svfiprintf_r+0x1fc>)
   17d2e:	1c66      	adds	r6, r4, #1
   17d30:	7629      	strb	r1, [r5, #24]
   17d32:	f7ff fe0b 	bl	1794c <memchr>
   17d36:	2800      	cmp	r0, #0
   17d38:	d046      	beq.n	17dc8 <_svfiprintf_r+0x1e0>
   17d3a:	4b2b      	ldr	r3, [pc, #172]	; (17de8 <_svfiprintf_r+0x200>)
   17d3c:	2b00      	cmp	r3, #0
   17d3e:	d12f      	bne.n	17da0 <_svfiprintf_r+0x1b8>
   17d40:	6829      	ldr	r1, [r5, #0]
   17d42:	9b05      	ldr	r3, [sp, #20]
   17d44:	2207      	movs	r2, #7
   17d46:	05c9      	lsls	r1, r1, #23
   17d48:	d528      	bpl.n	17d9c <_svfiprintf_r+0x1b4>
   17d4a:	189b      	adds	r3, r3, r2
   17d4c:	4393      	bics	r3, r2
   17d4e:	3308      	adds	r3, #8
   17d50:	9305      	str	r3, [sp, #20]
   17d52:	696b      	ldr	r3, [r5, #20]
   17d54:	9a03      	ldr	r2, [sp, #12]
   17d56:	189b      	adds	r3, r3, r2
   17d58:	616b      	str	r3, [r5, #20]
   17d5a:	e767      	b.n	17c2c <_svfiprintf_r+0x44>
   17d5c:	425b      	negs	r3, r3
   17d5e:	60eb      	str	r3, [r5, #12]
   17d60:	2302      	movs	r3, #2
   17d62:	430b      	orrs	r3, r1
   17d64:	602b      	str	r3, [r5, #0]
   17d66:	e7c0      	b.n	17cea <_svfiprintf_r+0x102>
   17d68:	434b      	muls	r3, r1
   17d6a:	3401      	adds	r4, #1
   17d6c:	189b      	adds	r3, r3, r2
   17d6e:	2001      	movs	r0, #1
   17d70:	e7a0      	b.n	17cb4 <_svfiprintf_r+0xcc>
   17d72:	2301      	movs	r3, #1
   17d74:	425b      	negs	r3, r3
   17d76:	e7c7      	b.n	17d08 <_svfiprintf_r+0x120>
   17d78:	2300      	movs	r3, #0
   17d7a:	0014      	movs	r4, r2
   17d7c:	200a      	movs	r0, #10
   17d7e:	001a      	movs	r2, r3
   17d80:	606b      	str	r3, [r5, #4]
   17d82:	7821      	ldrb	r1, [r4, #0]
   17d84:	3930      	subs	r1, #48	; 0x30
   17d86:	2909      	cmp	r1, #9
   17d88:	d903      	bls.n	17d92 <_svfiprintf_r+0x1aa>
   17d8a:	2b00      	cmp	r3, #0
   17d8c:	d0bd      	beq.n	17d0a <_svfiprintf_r+0x122>
   17d8e:	9207      	str	r2, [sp, #28]
   17d90:	e7bb      	b.n	17d0a <_svfiprintf_r+0x122>
   17d92:	4342      	muls	r2, r0
   17d94:	3401      	adds	r4, #1
   17d96:	1852      	adds	r2, r2, r1
   17d98:	2301      	movs	r3, #1
   17d9a:	e7f2      	b.n	17d82 <_svfiprintf_r+0x19a>
   17d9c:	3307      	adds	r3, #7
   17d9e:	e7d5      	b.n	17d4c <_svfiprintf_r+0x164>
   17da0:	ab05      	add	r3, sp, #20
   17da2:	9300      	str	r3, [sp, #0]
   17da4:	003a      	movs	r2, r7
   17da6:	4b11      	ldr	r3, [pc, #68]	; (17dec <_svfiprintf_r+0x204>)
   17da8:	0029      	movs	r1, r5
   17daa:	9802      	ldr	r0, [sp, #8]
   17dac:	e000      	b.n	17db0 <_svfiprintf_r+0x1c8>
   17dae:	bf00      	nop
   17db0:	9003      	str	r0, [sp, #12]
   17db2:	9b03      	ldr	r3, [sp, #12]
   17db4:	3301      	adds	r3, #1
   17db6:	d1cc      	bne.n	17d52 <_svfiprintf_r+0x16a>
   17db8:	89bb      	ldrh	r3, [r7, #12]
   17dba:	980b      	ldr	r0, [sp, #44]	; 0x2c
   17dbc:	065b      	lsls	r3, r3, #25
   17dbe:	d400      	bmi.n	17dc2 <_svfiprintf_r+0x1da>
   17dc0:	e729      	b.n	17c16 <_svfiprintf_r+0x2e>
   17dc2:	2001      	movs	r0, #1
   17dc4:	4240      	negs	r0, r0
   17dc6:	e726      	b.n	17c16 <_svfiprintf_r+0x2e>
   17dc8:	ab05      	add	r3, sp, #20
   17dca:	9300      	str	r3, [sp, #0]
   17dcc:	003a      	movs	r2, r7
   17dce:	4b07      	ldr	r3, [pc, #28]	; (17dec <_svfiprintf_r+0x204>)
   17dd0:	0029      	movs	r1, r5
   17dd2:	9802      	ldr	r0, [sp, #8]
   17dd4:	f7fe ffde 	bl	16d94 <_printf_i>
   17dd8:	e7ea      	b.n	17db0 <_svfiprintf_r+0x1c8>
   17dda:	46c0      	nop			; (mov r8, r8)
   17ddc:	0001948c 	.word	0x0001948c
   17de0:	00019492 	.word	0x00019492
   17de4:	00019496 	.word	0x00019496
   17de8:	00000000 	.word	0x00000000
   17dec:	00017b25 	.word	0x00017b25

00017df0 <_putc_r>:
   17df0:	b570      	push	{r4, r5, r6, lr}
   17df2:	0006      	movs	r6, r0
   17df4:	000d      	movs	r5, r1
   17df6:	0014      	movs	r4, r2
   17df8:	2800      	cmp	r0, #0
   17dfa:	d004      	beq.n	17e06 <_putc_r+0x16>
   17dfc:	6983      	ldr	r3, [r0, #24]
   17dfe:	2b00      	cmp	r3, #0
   17e00:	d101      	bne.n	17e06 <_putc_r+0x16>
   17e02:	f7ff fc97 	bl	17734 <__sinit>
   17e06:	4b12      	ldr	r3, [pc, #72]	; (17e50 <_putc_r+0x60>)
   17e08:	429c      	cmp	r4, r3
   17e0a:	d111      	bne.n	17e30 <_putc_r+0x40>
   17e0c:	6874      	ldr	r4, [r6, #4]
   17e0e:	68a3      	ldr	r3, [r4, #8]
   17e10:	3b01      	subs	r3, #1
   17e12:	60a3      	str	r3, [r4, #8]
   17e14:	2b00      	cmp	r3, #0
   17e16:	da05      	bge.n	17e24 <_putc_r+0x34>
   17e18:	69a2      	ldr	r2, [r4, #24]
   17e1a:	4293      	cmp	r3, r2
   17e1c:	db12      	blt.n	17e44 <_putc_r+0x54>
   17e1e:	b2eb      	uxtb	r3, r5
   17e20:	2b0a      	cmp	r3, #10
   17e22:	d00f      	beq.n	17e44 <_putc_r+0x54>
   17e24:	6823      	ldr	r3, [r4, #0]
   17e26:	b2e8      	uxtb	r0, r5
   17e28:	1c5a      	adds	r2, r3, #1
   17e2a:	6022      	str	r2, [r4, #0]
   17e2c:	701d      	strb	r5, [r3, #0]
   17e2e:	bd70      	pop	{r4, r5, r6, pc}
   17e30:	4b08      	ldr	r3, [pc, #32]	; (17e54 <_putc_r+0x64>)
   17e32:	429c      	cmp	r4, r3
   17e34:	d101      	bne.n	17e3a <_putc_r+0x4a>
   17e36:	68b4      	ldr	r4, [r6, #8]
   17e38:	e7e9      	b.n	17e0e <_putc_r+0x1e>
   17e3a:	4b07      	ldr	r3, [pc, #28]	; (17e58 <_putc_r+0x68>)
   17e3c:	429c      	cmp	r4, r3
   17e3e:	d1e6      	bne.n	17e0e <_putc_r+0x1e>
   17e40:	68f4      	ldr	r4, [r6, #12]
   17e42:	e7e4      	b.n	17e0e <_putc_r+0x1e>
   17e44:	0022      	movs	r2, r4
   17e46:	0029      	movs	r1, r5
   17e48:	0030      	movs	r0, r6
   17e4a:	f7ff faa7 	bl	1739c <__swbuf_r>
   17e4e:	e7ee      	b.n	17e2e <_putc_r+0x3e>
   17e50:	000194e0 	.word	0x000194e0
   17e54:	00019500 	.word	0x00019500
   17e58:	000194c0 	.word	0x000194c0

00017e5c <_sbrk_r>:
   17e5c:	2300      	movs	r3, #0
   17e5e:	b570      	push	{r4, r5, r6, lr}
   17e60:	4c06      	ldr	r4, [pc, #24]	; (17e7c <_sbrk_r+0x20>)
   17e62:	0005      	movs	r5, r0
   17e64:	0008      	movs	r0, r1
   17e66:	6023      	str	r3, [r4, #0]
   17e68:	f7ef fcba 	bl	77e0 <_sbrk>
   17e6c:	1c43      	adds	r3, r0, #1
   17e6e:	d103      	bne.n	17e78 <_sbrk_r+0x1c>
   17e70:	6823      	ldr	r3, [r4, #0]
   17e72:	2b00      	cmp	r3, #0
   17e74:	d000      	beq.n	17e78 <_sbrk_r+0x1c>
   17e76:	602b      	str	r3, [r5, #0]
   17e78:	bd70      	pop	{r4, r5, r6, pc}
   17e7a:	46c0      	nop			; (mov r8, r8)
   17e7c:	200036b0 	.word	0x200036b0

00017e80 <_raise_r>:
   17e80:	b570      	push	{r4, r5, r6, lr}
   17e82:	0004      	movs	r4, r0
   17e84:	000d      	movs	r5, r1
   17e86:	291f      	cmp	r1, #31
   17e88:	d904      	bls.n	17e94 <_raise_r+0x14>
   17e8a:	2316      	movs	r3, #22
   17e8c:	6003      	str	r3, [r0, #0]
   17e8e:	2001      	movs	r0, #1
   17e90:	4240      	negs	r0, r0
   17e92:	bd70      	pop	{r4, r5, r6, pc}
   17e94:	6c43      	ldr	r3, [r0, #68]	; 0x44
   17e96:	2b00      	cmp	r3, #0
   17e98:	d004      	beq.n	17ea4 <_raise_r+0x24>
   17e9a:	008a      	lsls	r2, r1, #2
   17e9c:	189b      	adds	r3, r3, r2
   17e9e:	681a      	ldr	r2, [r3, #0]
   17ea0:	2a00      	cmp	r2, #0
   17ea2:	d108      	bne.n	17eb6 <_raise_r+0x36>
   17ea4:	0020      	movs	r0, r4
   17ea6:	f000 f831 	bl	17f0c <_getpid_r>
   17eaa:	002a      	movs	r2, r5
   17eac:	0001      	movs	r1, r0
   17eae:	0020      	movs	r0, r4
   17eb0:	f000 f81a 	bl	17ee8 <_kill_r>
   17eb4:	e7ed      	b.n	17e92 <_raise_r+0x12>
   17eb6:	2000      	movs	r0, #0
   17eb8:	2a01      	cmp	r2, #1
   17eba:	d0ea      	beq.n	17e92 <_raise_r+0x12>
   17ebc:	1c51      	adds	r1, r2, #1
   17ebe:	d103      	bne.n	17ec8 <_raise_r+0x48>
   17ec0:	2316      	movs	r3, #22
   17ec2:	3001      	adds	r0, #1
   17ec4:	6023      	str	r3, [r4, #0]
   17ec6:	e7e4      	b.n	17e92 <_raise_r+0x12>
   17ec8:	2400      	movs	r4, #0
   17eca:	0028      	movs	r0, r5
   17ecc:	601c      	str	r4, [r3, #0]
   17ece:	4790      	blx	r2
   17ed0:	0020      	movs	r0, r4
   17ed2:	e7de      	b.n	17e92 <_raise_r+0x12>

00017ed4 <raise>:
   17ed4:	b510      	push	{r4, lr}
   17ed6:	4b03      	ldr	r3, [pc, #12]	; (17ee4 <raise+0x10>)
   17ed8:	0001      	movs	r1, r0
   17eda:	6818      	ldr	r0, [r3, #0]
   17edc:	f7ff ffd0 	bl	17e80 <_raise_r>
   17ee0:	bd10      	pop	{r4, pc}
   17ee2:	46c0      	nop			; (mov r8, r8)
   17ee4:	2000002c 	.word	0x2000002c

00017ee8 <_kill_r>:
   17ee8:	2300      	movs	r3, #0
   17eea:	b570      	push	{r4, r5, r6, lr}
   17eec:	4c06      	ldr	r4, [pc, #24]	; (17f08 <_kill_r+0x20>)
   17eee:	0005      	movs	r5, r0
   17ef0:	0008      	movs	r0, r1
   17ef2:	0011      	movs	r1, r2
   17ef4:	6023      	str	r3, [r4, #0]
   17ef6:	f7ef fc93 	bl	7820 <_kill>
   17efa:	1c43      	adds	r3, r0, #1
   17efc:	d103      	bne.n	17f06 <_kill_r+0x1e>
   17efe:	6823      	ldr	r3, [r4, #0]
   17f00:	2b00      	cmp	r3, #0
   17f02:	d000      	beq.n	17f06 <_kill_r+0x1e>
   17f04:	602b      	str	r3, [r5, #0]
   17f06:	bd70      	pop	{r4, r5, r6, pc}
   17f08:	200036b0 	.word	0x200036b0

00017f0c <_getpid_r>:
   17f0c:	b510      	push	{r4, lr}
   17f0e:	f7ef fc88 	bl	7822 <_getpid>
   17f12:	bd10      	pop	{r4, pc}

00017f14 <__sread>:
   17f14:	b570      	push	{r4, r5, r6, lr}
   17f16:	000c      	movs	r4, r1
   17f18:	250e      	movs	r5, #14
   17f1a:	5f49      	ldrsh	r1, [r1, r5]
   17f1c:	f000 f8ae 	bl	1807c <_read_r>
   17f20:	2800      	cmp	r0, #0
   17f22:	db03      	blt.n	17f2c <__sread+0x18>
   17f24:	6d63      	ldr	r3, [r4, #84]	; 0x54
   17f26:	181b      	adds	r3, r3, r0
   17f28:	6563      	str	r3, [r4, #84]	; 0x54
   17f2a:	bd70      	pop	{r4, r5, r6, pc}
   17f2c:	89a3      	ldrh	r3, [r4, #12]
   17f2e:	4a02      	ldr	r2, [pc, #8]	; (17f38 <__sread+0x24>)
   17f30:	4013      	ands	r3, r2
   17f32:	81a3      	strh	r3, [r4, #12]
   17f34:	e7f9      	b.n	17f2a <__sread+0x16>
   17f36:	46c0      	nop			; (mov r8, r8)
   17f38:	ffffefff 	.word	0xffffefff

00017f3c <__swrite>:
   17f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17f3e:	001f      	movs	r7, r3
   17f40:	898b      	ldrh	r3, [r1, #12]
   17f42:	0005      	movs	r5, r0
   17f44:	000c      	movs	r4, r1
   17f46:	0016      	movs	r6, r2
   17f48:	05db      	lsls	r3, r3, #23
   17f4a:	d505      	bpl.n	17f58 <__swrite+0x1c>
   17f4c:	230e      	movs	r3, #14
   17f4e:	5ec9      	ldrsh	r1, [r1, r3]
   17f50:	2200      	movs	r2, #0
   17f52:	2302      	movs	r3, #2
   17f54:	f000 f874 	bl	18040 <_lseek_r>
   17f58:	89a3      	ldrh	r3, [r4, #12]
   17f5a:	4a05      	ldr	r2, [pc, #20]	; (17f70 <__swrite+0x34>)
   17f5c:	0028      	movs	r0, r5
   17f5e:	4013      	ands	r3, r2
   17f60:	81a3      	strh	r3, [r4, #12]
   17f62:	0032      	movs	r2, r6
   17f64:	230e      	movs	r3, #14
   17f66:	5ee1      	ldrsh	r1, [r4, r3]
   17f68:	003b      	movs	r3, r7
   17f6a:	f000 f81f 	bl	17fac <_write_r>
   17f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17f70:	ffffefff 	.word	0xffffefff

00017f74 <__sseek>:
   17f74:	b570      	push	{r4, r5, r6, lr}
   17f76:	000c      	movs	r4, r1
   17f78:	250e      	movs	r5, #14
   17f7a:	5f49      	ldrsh	r1, [r1, r5]
   17f7c:	f000 f860 	bl	18040 <_lseek_r>
   17f80:	89a3      	ldrh	r3, [r4, #12]
   17f82:	1c42      	adds	r2, r0, #1
   17f84:	d103      	bne.n	17f8e <__sseek+0x1a>
   17f86:	4a05      	ldr	r2, [pc, #20]	; (17f9c <__sseek+0x28>)
   17f88:	4013      	ands	r3, r2
   17f8a:	81a3      	strh	r3, [r4, #12]
   17f8c:	bd70      	pop	{r4, r5, r6, pc}
   17f8e:	2280      	movs	r2, #128	; 0x80
   17f90:	0152      	lsls	r2, r2, #5
   17f92:	4313      	orrs	r3, r2
   17f94:	81a3      	strh	r3, [r4, #12]
   17f96:	6560      	str	r0, [r4, #84]	; 0x54
   17f98:	e7f8      	b.n	17f8c <__sseek+0x18>
   17f9a:	46c0      	nop			; (mov r8, r8)
   17f9c:	ffffefff 	.word	0xffffefff

00017fa0 <__sclose>:
   17fa0:	b510      	push	{r4, lr}
   17fa2:	230e      	movs	r3, #14
   17fa4:	5ec9      	ldrsh	r1, [r1, r3]
   17fa6:	f000 f815 	bl	17fd4 <_close_r>
   17faa:	bd10      	pop	{r4, pc}

00017fac <_write_r>:
   17fac:	b570      	push	{r4, r5, r6, lr}
   17fae:	0005      	movs	r5, r0
   17fb0:	0008      	movs	r0, r1
   17fb2:	0011      	movs	r1, r2
   17fb4:	2200      	movs	r2, #0
   17fb6:	4c06      	ldr	r4, [pc, #24]	; (17fd0 <_write_r+0x24>)
   17fb8:	6022      	str	r2, [r4, #0]
   17fba:	001a      	movs	r2, r3
   17fbc:	f7ef fbe8 	bl	7790 <_write>
   17fc0:	1c43      	adds	r3, r0, #1
   17fc2:	d103      	bne.n	17fcc <_write_r+0x20>
   17fc4:	6823      	ldr	r3, [r4, #0]
   17fc6:	2b00      	cmp	r3, #0
   17fc8:	d000      	beq.n	17fcc <_write_r+0x20>
   17fca:	602b      	str	r3, [r5, #0]
   17fcc:	bd70      	pop	{r4, r5, r6, pc}
   17fce:	46c0      	nop			; (mov r8, r8)
   17fd0:	200036b0 	.word	0x200036b0

00017fd4 <_close_r>:
   17fd4:	2300      	movs	r3, #0
   17fd6:	b570      	push	{r4, r5, r6, lr}
   17fd8:	4c06      	ldr	r4, [pc, #24]	; (17ff4 <_close_r+0x20>)
   17fda:	0005      	movs	r5, r0
   17fdc:	0008      	movs	r0, r1
   17fde:	6023      	str	r3, [r4, #0]
   17fe0:	f7ef fc10 	bl	7804 <_close>
   17fe4:	1c43      	adds	r3, r0, #1
   17fe6:	d103      	bne.n	17ff0 <_close_r+0x1c>
   17fe8:	6823      	ldr	r3, [r4, #0]
   17fea:	2b00      	cmp	r3, #0
   17fec:	d000      	beq.n	17ff0 <_close_r+0x1c>
   17fee:	602b      	str	r3, [r5, #0]
   17ff0:	bd70      	pop	{r4, r5, r6, pc}
   17ff2:	46c0      	nop			; (mov r8, r8)
   17ff4:	200036b0 	.word	0x200036b0

00017ff8 <_fstat_r>:
   17ff8:	2300      	movs	r3, #0
   17ffa:	b570      	push	{r4, r5, r6, lr}
   17ffc:	4c06      	ldr	r4, [pc, #24]	; (18018 <_fstat_r+0x20>)
   17ffe:	0005      	movs	r5, r0
   18000:	0008      	movs	r0, r1
   18002:	0011      	movs	r1, r2
   18004:	6023      	str	r3, [r4, #0]
   18006:	f7ef fc00 	bl	780a <_fstat>
   1800a:	1c43      	adds	r3, r0, #1
   1800c:	d103      	bne.n	18016 <_fstat_r+0x1e>
   1800e:	6823      	ldr	r3, [r4, #0]
   18010:	2b00      	cmp	r3, #0
   18012:	d000      	beq.n	18016 <_fstat_r+0x1e>
   18014:	602b      	str	r3, [r5, #0]
   18016:	bd70      	pop	{r4, r5, r6, pc}
   18018:	200036b0 	.word	0x200036b0

0001801c <_isatty_r>:
   1801c:	2300      	movs	r3, #0
   1801e:	b570      	push	{r4, r5, r6, lr}
   18020:	4c06      	ldr	r4, [pc, #24]	; (1803c <_isatty_r+0x20>)
   18022:	0005      	movs	r5, r0
   18024:	0008      	movs	r0, r1
   18026:	6023      	str	r3, [r4, #0]
   18028:	f7ef fbf4 	bl	7814 <_isatty>
   1802c:	1c43      	adds	r3, r0, #1
   1802e:	d103      	bne.n	18038 <_isatty_r+0x1c>
   18030:	6823      	ldr	r3, [r4, #0]
   18032:	2b00      	cmp	r3, #0
   18034:	d000      	beq.n	18038 <_isatty_r+0x1c>
   18036:	602b      	str	r3, [r5, #0]
   18038:	bd70      	pop	{r4, r5, r6, pc}
   1803a:	46c0      	nop			; (mov r8, r8)
   1803c:	200036b0 	.word	0x200036b0

00018040 <_lseek_r>:
   18040:	b570      	push	{r4, r5, r6, lr}
   18042:	0005      	movs	r5, r0
   18044:	0008      	movs	r0, r1
   18046:	0011      	movs	r1, r2
   18048:	2200      	movs	r2, #0
   1804a:	4c06      	ldr	r4, [pc, #24]	; (18064 <_lseek_r+0x24>)
   1804c:	6022      	str	r2, [r4, #0]
   1804e:	001a      	movs	r2, r3
   18050:	f7ef fbe2 	bl	7818 <_lseek>
   18054:	1c43      	adds	r3, r0, #1
   18056:	d103      	bne.n	18060 <_lseek_r+0x20>
   18058:	6823      	ldr	r3, [r4, #0]
   1805a:	2b00      	cmp	r3, #0
   1805c:	d000      	beq.n	18060 <_lseek_r+0x20>
   1805e:	602b      	str	r3, [r5, #0]
   18060:	bd70      	pop	{r4, r5, r6, pc}
   18062:	46c0      	nop			; (mov r8, r8)
   18064:	200036b0 	.word	0x200036b0

00018068 <__malloc_lock>:
   18068:	4770      	bx	lr

0001806a <__malloc_unlock>:
   1806a:	4770      	bx	lr

0001806c <_malloc_usable_size_r>:
   1806c:	1f0b      	subs	r3, r1, #4
   1806e:	681b      	ldr	r3, [r3, #0]
   18070:	1f18      	subs	r0, r3, #4
   18072:	2b00      	cmp	r3, #0
   18074:	da01      	bge.n	1807a <_malloc_usable_size_r+0xe>
   18076:	580b      	ldr	r3, [r1, r0]
   18078:	18c0      	adds	r0, r0, r3
   1807a:	4770      	bx	lr

0001807c <_read_r>:
   1807c:	b570      	push	{r4, r5, r6, lr}
   1807e:	0005      	movs	r5, r0
   18080:	0008      	movs	r0, r1
   18082:	0011      	movs	r1, r2
   18084:	2200      	movs	r2, #0
   18086:	4c06      	ldr	r4, [pc, #24]	; (180a0 <_read_r+0x24>)
   18088:	6022      	str	r2, [r4, #0]
   1808a:	001a      	movs	r2, r3
   1808c:	f7ef fb5e 	bl	774c <_read>
   18090:	1c43      	adds	r3, r0, #1
   18092:	d103      	bne.n	1809c <_read_r+0x20>
   18094:	6823      	ldr	r3, [r4, #0]
   18096:	2b00      	cmp	r3, #0
   18098:	d000      	beq.n	1809c <_read_r+0x20>
   1809a:	602b      	str	r3, [r5, #0]
   1809c:	bd70      	pop	{r4, r5, r6, pc}
   1809e:	46c0      	nop			; (mov r8, r8)
   180a0:	200036b0 	.word	0x200036b0

000180a4 <sysfont_glyphs>:
   180a4:	00000000 20000000 20202020 50502000     .......     . PP
   180b4:	00000050 f8505000 5050f850 70a07820     P....PP.P.PP x.p
   180c4:	c020f028 402010c8 90601898 90a840a0     (. ... @..`..@..
   180d4:	40206068 00000000 40402010 40102040     h` @..... @@@ .@
   180e4:	10101020 50004020 5020f820 20200000      ... @.P . P..  
   180f4:	002020f8 00000000 00402060 00f80000     .  .....` @.....
   18104:	00000000 60000000 10080060 00804020     .......``... @..
   18114:	a8988870 207088c8 20202060 88707020     p.....p `    pp.
   18124:	40201008 2010f8f8 70880810 90503010     .. @... ...p.0P.
   18134:	f81010f8 0808f080 40307088 8888f080     .........p0@....
   18144:	1008f870 40404020 70888870 70708888     p... @@@p..p..pp
   18154:	08788888 60006010 60600060 60600000     ..x..`.``.``..``
   18164:	40206000 40201008 00081020 f800f800     .` @.. @ .......
   18174:	40800000 40201020 08887080 20002010     ...@ . @.p... . 
   18184:	68088870 7070a8a8 f8888888 88f08888     p..h..pp........
   18194:	8888f088 808870f0 70888080 888890e0     .....p.....p....
   181a4:	f8e09088 80f08080 80f8f880 8080e080     ................
   181b4:	80887080 70889880 f8888888 70888888     .p.....p.......p
   181c4:	20202020 10387020 90101010 a0908860          p8.....`...
   181d4:	8890a0c0 80808080 88f88080 8888a8d8     ................
   181e4:	88888888 8898a8c8 88887088 70888888     .........p.....p
   181f4:	f08888f0 70808080 a8888888 88f06890     .......p.....h..
   18204:	90a0f088 80807888 f0080870 202020f8     .....x..p....   
   18214:	88202020 88888888 88887088 50888888        ......p.....P
   18224:	88888820 88d8a8a8 20508888 88888850      .........P P...
   18234:	20205088 08f82020 80402010 202038f8     .P    ... @..8  
   18244:	38202020 20408000 e0000810 20202020        8..@ ....    
   18254:	5020e020 00000088 00000000 f8000000      . P............
   18264:	00102040 00000000 78087000 80807888     @ .......p.x.x..
   18274:	8888c8b0 700000f0 70888080 98680808     .......p...p..h.
   18284:	00788888 f8887000 48307080 4040e040     ..x..p...p0H@.@@
   18294:	78000040 30087888 c8b08080 20888888     @..x.x.0....... 
   182a4:	20206000 00107020 90101030 48404060     .`   p..0...`@@H
   182b4:	48506050 20202060 00702020 a8a8d000     P`PH`     p.....
   182c4:	00008888 8888c8b0 70000088 70888888     ...........p...p
   182d4:	88f00000 008080f0 78986800 00000808     .........h.x....
   182e4:	8080c8b0 70000080 f0087080 40e04040     .......p.p..@@.@
   182f4:	00304840 88888800 00006898 50888888     @H0......h.....P
   18304:	88000020 50a8a888 50880000 00885020      ......P...P P..
   18314:	78888800 00007008 402010f8 202010f8     ...x.p.... @..  
   18324:	10202040 20202020 40202020 20102020     @  .       @  . 
   18334:	ffff4020 00004fce 00004fce 00004faa      @...O...O...O..
   18344:	00004fce 00004faa 00004f90 00004f90     .O...O...O...O..
   18354:	00004fce 00004fce 00004fce 00004fce     .O...O...O...O..
   18364:	00004fce 00004fce 00004fce 00004fce     .O...O...O...O..
   18374:	00004fce 00004fce 00004fce 00004fce     .O...O...O...O..
   18384:	00004fce 00004fce 00004fce 00004fce     .O...O...O...O..
   18394:	00004fce 00004fce 00004fce 00004faa     .O...O...O...O..
   183a4:	00004fce 00004faa 00004fce 00004fce     .O...O...O...O..
   183b4:	00004fce 00004fce 00004fce 00004fce     .O...O...O...O..
   183c4:	00004fce 00004fce 00004fce 00004fce     .O...O...O...O..
   183d4:	00004fce 00004fce 00004fce 00004fce     .O...O...O...O..
   183e4:	00004fce 00004fce 00004fce 00004fce     .O...O...O...O..
   183f4:	00004fce 00004fce 00004fce 00004fce     .O...O...O...O..
   18404:	00004fce 00004fce 00004fce 00004fce     .O...O...O...O..
   18414:	00004fce 00004fce 00004fce 00004fce     .O...O...O...O..
   18424:	00004fce 00004fce 00004fce 00004fce     .O...O...O...O..
   18434:	00004fce 00004faa 00004faa 00004fb2     .O...O...O...O..
   18444:	00004fb2 00004fb2 00004fb2 42000000     .O...O...O.....B
   18454:	42000400 42000800 42000c00 42001000     ...B...B...B...B
   18464:	43000400 00006a6e 00006a6a 00006a6a     ...Cnj..jj..jj..
   18474:	00006ad0 00006ad0 00006a84 00006a74     .j...j...j..tj..
   18484:	00006a8a 00006abe 00006bec 00006bcc     .j...j...k...k..
   18494:	00006bcc 00006c66 00006bde 00006bfa     .k..fl...k...k..
   184a4:	00006bd0 00006c08 00006c4a 00006ca4     .k...l..Jl...l..
   184b4:	00006ce6 00006ce6 00006ce6 00006c96     .l...l...l...l..
   184c4:	00006cb2 00006c88 00006cc0 00006cd6     .l...l...l...l..
   184d4:	000073e2 000074d8 000074e2 000074ec     .s...t...t...t..
   184e4:	000074f6 00007528 00007532 0000753c     .t..(u..2u..<u..
   184f4:	00007546 00007550 42002000 42002400     Fu..Pu... .B.$.B
   18504:	42002800 42002c00 43000800 00000002     .(.B.,.B...C....
   18514:	00000100 00000002 00000200 00000002     ................
   18524:	00000400 00000002 00000800 00000003     ................
   18534:	00000004 72420a0d 6364616f 20747361     ......Broadcast 
   18544:	6c696146 000d6465 6f724220 61636461     Failed.. Broadca
   18554:	46207473 656c6961 ffff0064 6e6e6f43     st Failed...Conn
   18564:	69746365 5020676e 20726565 0a206e6f     ecting Peer on .
   18574:	61684320 6c656e6e 00000020 6f430a0d      Channel .....Co
   18584:	63656e6e 676e6974 65655020 6e6f2072     nnecting Peer on
   18594:	61684320 6c656e6e 00000020 00006425      Channel ...%d..
   185a4:	6e6e6f43 65746365 65502064 6f207265     Connected Peer o
   185b4:	200a206e 6e616843 206c656e 00000000     n . Channel ....
   185c4:	6f430a0d 63656e6e 20646574 72656550     ..Connected Peer
   185d4:	206e6f20 6e616843 206c656e ffffff00      on Channel ....
   185e4:	65530a0d 7463656c 206e6f69 6320666f     ..Selection of c
   185f4:	6e6e6168 00206c65 20736920 20746f6e     hannel . is not 
   18604:	70707573 6574726f 6e692064 72756320     supported in cur
   18614:	746e6572 6e6f6320 75676966 69746172     rent configurati
   18624:	0d2e6e6f ffffff00 706d6953 4c20656c     on......Simple L
   18634:	2061526f 20503250 6f6d6544 206e6f20     oRa P2P Demo on 
   18644:	4153200a 3433524d 646f4e20 00002065     . SAMR34 Node ..
   18654:	2d2d0d0a 2d2d2d2d 2d2d2d2d 2d2d2d2d     ..--------------
   18664:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   18674:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   18684:	2d2d2d2d 0a2d2d2d 2d2d2d0d 2d2d2d2d     -------..-------
   18694:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   186a4:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   186b4:	2d2d2d2d 2d2d2d2d 2d2d2d2d 00002d2d     --------------..
   186c4:	74530a0d 69747261 4e20676e 2065646f     ..Starting Node 
   186d4:	666f2031 6d695320 20656c70 6f6d6544     1 of Simple Demo
   186e4:	726f6620 526f4c20 32502061 74532050      for LoRa P2P St
   186f4:	206b6361 002e2e2e 75460a0d 46206c6c     ack ......Full F
   18704:	74636e75 206e6f69 69766544 28206563     unction Device (
   18714:	29444646 65706f20 69746172 00736e6f     FFD) operations.
   18724:	20200a0d 52202020 72542046 63736e61     ..     RF Transc
   18734:	65766965 53203a72 32315f58 00003637     eiver: SX_1276..
   18744:	20200a0d 44202020 206f6d65 74736e49     ..     Demo Inst
   18754:	74637572 3a6e6f69 00000000 20200a0d     ruction:......  
   18764:	20202020 20202020 20202020 20202020                     
   18774:	50202020 7265776f 206e6f20 20656874        Power on the 
   18784:	72616f62 6e752064 206c6974 2044454c     board until LED 
   18794:	696c2031 73746867 00707520 20200a0d     1 lights up...  
   187a4:	20202020 20202020 20202020 20202020                     
   187b4:	74202020 6e69206f 61636964 63206574        to indicate c
   187c4:	656e6e6f 6e697463 69772067 70206874     onnecting with p
   187d4:	2e726565 00000000 20200a0d 20202020     eer.......      
   187e4:	20202020 20202020 20202020 50202020                    P
   187f4:	20687375 74747542 31206e6f 206f7420     ush Button 1 to 
   18804:	616f7262 73616364 656d2074 67617373     broadcast messag
   18814:	00002e65 20200a0d 20202020 20202020     e.....          
   18824:	20202020 20202020 4c202020 31204445                LED 1
   18834:	6c697720 6562206c 676f7420 64656c67      will be toggled
   18844:	6f707520 6572206e 76696563 20676e69      upon receiving 
   18854:	7373656d 73656761 0000202e 000d0a0d     messages. ......
   18864:	69726550 6369646f 61725420 696d736e     Periodic Transmi
   18874:	6f697373 203d206e 61736944 0d656c62     ssion = Disable.
   18884:	00000000 79747544 63794320 676e696c     ....Duty Cycling
   18894:	70757320 74726f70 44203d20 62617369      support = Disab
   188a4:	000d656c 2054424c 70707573 2074726f     le..LBT support 
   188b4:	6944203d 6c626173 ff000d65 75636553     = Disable...Secu
   188c4:	20646572 00000000 616f7242 73616364     red ....Broadcas
   188d4:	61502074 74656b63 74697720 53522068     t Packet with RS
   188e4:	00204953 63696e55 20747361 6b636150     SI .Unicast Pack
   188f4:	77207465 20687469 49535352 00000020     et with RSSI ...
   18904:	78323025 00000000 6f726620 0000206d     %02x.... from ..
   18914:	00007825 ff00203a 20205753 3a202020     %x..: ..SW     :
   18924:	6f724220 61636461 0a207473 54545542      Broadcast .BUTT
   18934:	3a314e4f 696e5520 74736163 ffffff00     ON1: Unicast....
   18944:	6e550a0d 73616369 61462074 64656c69     ..Unicast Failed
   18954:	0000000d 696e5520 74736163 69614620     .... Unicast Fai
   18964:	0064656c 6b636150 72207465 69656365     led.Packet recei
   18974:	20646576 6d6f7266 68746f20 53207265     ved from other S
   18984:	6372756f 41502065 4449204e 30203a20     ource PAN ID : 0
   18994:	25782578 000a0d78 7461440a 6f432061     x%x%x....Data Co
   189a4:	7269666e 48203a6d 6c646e61 25203a65     nfirm: Handle: %
   189b4:	74732064 73757461 2064253a ff000a0d     d status:%d ....
   189c4:	253a5753 2d643230 78323025 78323025     SW:%02d-%02x%02x
   189d4:	78323025 55420a20 4e4f5454 43203a31     %02x .BUTTON1: C
   189e4:	676e6168 6f6e2065 ff006564 6f430a0d     hange node....Co
   189f4:	63656e6e 704f2074 74617265 206e6f69     nnect Operation 
   18a04:	74617453 203a7375 000a6425 74530a0d     Status: %d....St
   18a14:	65747261 69572064 656c6572 43207373     arted Wireless C
   18a24:	756d6d6f 6163696e 6e6f6974 206e6f20     ommunication on 
   18a34:	6e616843 206c656e 0a0d7525 ffffff00     Channel %u......
   18a44:	2d2d0a0d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ..--------------
   18a54:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   18a64:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   18a74:	2d2d2d2d 0d2d2d2d 00000000 50204652     -------.....RF P
   18a84:	6d617261 72657465 00000d73 54202d20     arameters... - T
   18a94:	756f2078 74757074 776f7020 203a7265     x output power: 
   18aa4:	0a0d6425 00000000 50202d20 6f622041     %d...... - PA bo
   18ab4:	3a74736f 0d642520 0000000a 53202d20     ost: %d..... - S
   18ac4:	61657270 676e6964 63616620 3a726f74     preading factor:
   18ad4:	25465320 000a0d64 42202d20 77646e61      SF%d... - Bandw
   18ae4:	68746469 32312820 7a486b35 202c373d     idth (125kHz=7, 
   18af4:	6b303532 383d7a48 3035202c 7a486b30     250kHz=8, 500kHz
   18b04:	3a29393d 00642520 0944490a 69766544     =9): %d..ID.Devi
   18b14:	41206563 65726464 09207373 70614309     ce Address ..Cap
   18b24:	6c696261 20797469 4e415009 20444920     ability .PAN ID 
   18b34:	61684309 6c656e6e 00000020 00000909     .Channel .......
   18b44:	53200a0d 206e6163 7265704f 6f697461     .. Scan Operatio
   18b54:	7453206e 73757461 6425203a 76656420     n Status: %d dev
   18b64:	20656369 6e756f66 ffff0064 4d205854     ice found...TX M
   18b74:	61737365 3a736567 20642520 2058520a     essages: %d .RX 
   18b84:	7373654d 73656761 6425203a ffffff00     Messages: %d....
   18b94:	626d756e 664f7265 65747942 00000073     numberOfBytes...
   18ba4:	732f2e2e 412f6372 742f4653 64726968     ../src/ASF/third
   18bb4:	74726170 69772f79 656c6572 4c2f7373     party/wireless/L
   18bc4:	5f61526f 2f503250 76726573 73656369     oRa_P2P/services
   18bd4:	7364702f 6372732f 2f766e2f 764e5f44     /pds/src/nv/D_Nv
   18be4:	0000632e 72646461 20737365 44203d3c     .c..address <= D
   18bf4:	5f564e5f 4f4d454d 455f5952 0000444e     _NV_MEMORY_END..
   18c04:	64646128 73736572 6e202b20 65626d75     (address + numbe
   18c14:	42664f72 73657479 3d3c2029 5f442820     rOfBytes) <= (D_
   18c24:	4d5f564e 524f4d45 4e455f59 202b2044     NV_MEMORY_END + 
   18c34:	00295531 66666f28 20746573 756e202b     1U).(offset + nu
   18c44:	7265626d 7942664f 29736574 203d3c20     mberOfBytes) <= 
   18c54:	564e5f44 4345535f 5f524f54 455a4953     D_NV_SECTOR_SIZE
   18c64:	ffffff00                                ....

00018c68 <__func__.13289>:
   18c68:	764e5f44 6165525f 6d495f64 ff006c70     D_Nv_Read_Impl..

00018c78 <__func__.13302>:
   18c78:	764e5f44 6972575f 495f6574 006c706d     D_Nv_Write_Impl.

00018c88 <__func__.13314>:
   18c88:	764e5f44 6172455f 65536573 726f7463     D_Nv_EraseSector
   18c98:	706d495f ffff006c                       _Impl...

00018ca0 <__func__.13327>:
   18ca0:	706d6f43 44657261 00617461 68636163     CompareData.cach
   18cb0:	3d212065 4c554e20 ffff004c 736c6166     e != NULL...fals
   18cc0:	ffff0065 646e6946 6d657449 68636143     e...FindItemCach
   18cd0:	64692865 3d3d2029 4c554e20 0000004c     e(id) == NULL...
   18ce0:	74695f73 6f436d65 20746e75 414d203c     s_itemCount < MA
   18cf0:	54495f58 435f4d45 544e554f ffffff00     X_ITEM_COUNT....
   18d00:	68636163 6c3e2d65 42747361 6b636f6c     cache->lastBlock
   18d10:	203d2120 30307830 00003030 732f2e2e      != 0x0000..../s
   18d20:	412f6372 742f4653 64726968 74726170     rc/ASF/thirdpart
   18d30:	69772f79 656c6572 4c2f7373 5f61526f     y/wireless/LoRa_
   18d40:	2f503250 76726573 73656369 7364702f     P2P/services/pds
   18d50:	6372732f 2f766e2f 764e5f53 6d61532d     /src/nv/S_Nv-Sam
   18d60:	2e313252 ffff0063 20646928 30203d21     R21.c...(id != 0
   18d70:	26202975 69282026 203c2064 30467830     u) && (id < 0xF0
   18d80:	29753030 20262620 65746928 6e654c6d     00u) && (itemLen
   18d90:	20687467 4d203d3c 495f5841 5f4d4554     gth <= MAX_ITEM_
   18da0:	474e454c 00294854 21206469 7530203d     LENGTH).id != 0u
   18db0:	ffffff00 20646928 30203d21 26202975     ....(id != 0u) &
   18dc0:	70282026 61746144 203d2120 4c4c554e     & (pData != NULL
   18dd0:	ffff0029                                )...

00018dd4 <__func__.13289>:
   18dd4:	706d6f63 53746361 6f746365 6d695472     compactSectorTim
   18de4:	69467265 00646572                       erFired.

00018dec <__func__.13325>:
   18dec:	646e6946 6d657449 68636143 ffff0065     FindItemCache...

00018dfc <__func__.13332>:
   18dfc:	61657243 74496574 61436d65 00656863     CreateItemCache.

00018e0c <__func__.13452>:
   18e0c:	706d6f43 53746361 6f746365 ffff0072     CompactSector...

00018e1c <__func__.13472>:
   18e1c:	706d6f43 53746361 6f746365 4e664972     CompactSectorIfN
   18e2c:	65646565 ffff0064                       eeded...

00018e34 <__func__.13479>:
   18e34:	706d6f43 49746361 006d6574              CompactItem.

00018e40 <__func__.13513>:
   18e40:	764e5f53 6574495f 696e496d 6d495f74     S_Nv_ItemInit_Im
   18e50:	ff006c70                                pl..

00018e54 <__func__.13526>:
   18e54:	764e5f53 6972575f 495f6574 006c706d     S_Nv_Write_Impl.

00018e64 <__func__.13537>:
   18e64:	764e5f53 6165525f 6d495f64 ff006c70     S_Nv_Read_Impl..

00018e74 <__func__.13542>:
   18e74:	764e5f53 6574495f 6e654c6d 5f687467     S_Nv_ItemLength_
   18e84:	6c706d49 ffffff00 20553028 69203d21     Impl....(0U != i
   18e94:	446d6574 72637365 6574692e 7a69536d     temDescr.itemSiz
   18ea4:	26202965 4e282026 204c4c55 69203d21     e) && (NULL != i
   18eb4:	446d6574 72637365 6574692e 7461446d     temDescr.itemDat
   18ec4:	00002961 732f2e2e 412f6372 742f4653     a)..../src/ASF/t
   18ed4:	64726968 74726170 69772f79 656c6572     hirdparty/wirele
   18ee4:	4c2f7373 5f61526f 2f503250 76726573     ss/LoRa_P2P/serv
   18ef4:	73656369 7364702f 6372732f 2f6c772f     ices/pds/src/wl/
   18f04:	64506c77 74614473 72655361 2e726576     wlPdsDataServer.
   18f14:	00000063 4e5f5328 65525f76 6e727574     c...(S_Nv_Return
   18f24:	756c6156 69445f65 746f4e64 73697845     Value_DidNotExis
   18f34:	3d3d2074 74657220 7c7c2029 5f532820     t == ret) || (S_
   18f44:	525f764e 72757465 6c61566e 4f5f6575     Nv_ReturnValue_O
   18f54:	3d3d206b 74657220 ffff0029              k == ret)...

00018f60 <__func__.13202>:
   18f60:	53736470 65726f74 6d657449 6b736154     pdsStoreItemTask
   18f70:	646e6148 0072656c                       Handler.

00018f78 <__func__.13222>:
   18f78:	53736470 65726f74 6d657449 ffffff00     pdsStoreItem....
   18f88:	20746572 53203d3d 5f764e5f 75746552     ret == S_Nv_Retu
   18f98:	61566e72 5f65756c ff006b4f              rnValue_Ok..

00018fa4 <mySecurityKey>:
   18fa4:	03020100 07060504 0b0a0908 0f0e0d0c     ................
   18fb4:	0000a9b8 0000a9c8 0000a9ce 0000a9d4     ................
   18fc4:	0000a9da 0000a9e0 0000a9e6 0000a9ec     ................
   18fd4:	0000a9f2 0000a9f8 0000a9fe 0000aa04     ................
   18fe4:	0000aa0a 0000aa10 0000aa16 0000aa1c     ................
   18ff4:	0000aa22 0000aa28 0000aa2e 0000aa34     "...(.......4...
   19004:	0000aa3a 0000aa40 0000aa46 0000aa4c     :...@...F...L...
   19014:	0000aa52 0000aa58 0000ab9c 0000aafc     R...X...........
   19024:	0000ab7c 0000ab9c 0000ab7c 0000ab9c     |.......|.......
   19034:	0000ab9c 0000ab9c 0000aafc 0000ab9c     ................
   19044:	0000ab9c 0000ab9c 0000ab9c 0000ab9c     ................
   19054:	0000ab9c 0000ab9c 0000abc4 0a0d0a0d     ................
   19064:	4120794d 65726464 203a7373 00007830     My Address: 0x..
   19074:	41502020 3a44494e 00783020 68432020       PANID: 0x.  Ch
   19084:	656e6e61 00203a6c 6f430a0d 63656e6e     annel: ...Connec
   19094:	6e6f6974 65500920 6f4c7265 6441676e     tion .PeerLongAd
   190a4:	73657264 50092073 49726565 206f666e     dress .PeerInfo 
   190b4:	4f785209 6174536e 31737574 0000000d     .RxOnStatus1....
   190c4:	00090909 0000742f 0a0d0a0d 6e6e6f43     ..../t......Conn
   190d4:	69746365 20206e6f 50202020 4c726565     ection     PeerL
   190e4:	41676e6f 65726464 20207373 50202020     ongAddress     P
   190f4:	49726565 096f666e 6e4f7852 74617453     eerInfo.RxOnStat
   19104:	000d7375 20202020 20202020 20202020     us..            
   19114:	00000020 20202020 ffffff00 63530a0d      ...    ......Sc
   19124:	43206e61 6e6e6168 00206c65 41200a0d     an Channel ... A
   19134:	54206b63 6f656d69 000d7475              ck Timeout..

00019140 <AdvChannels433>:
   19140:	19d1b9d8 19d1b9d8 ff0c0101 19d4c718     ................
   19150:	19d4c718 ff0c0101 19d7d458 19d7d458     ........X...X...
   19160:	ff0c0101                                ....

00019164 <AdvChannels868>:
   19164:	33be27a0 33be27a0 ff100101 33c134e0     .'.3.'.3.....4.3
   19174:	33c134e0 ff100101 33c44220 33c44220     .4.3.... B.3 B.3
   19184:	ff100101                                ....

00019188 <DefaultChannels433>:
   19188:	50015001 ffff5001                       .P.P.P..

00019190 <DefaultChannels868>:
   19190:	50015001 ffff5001                       .P.P.P..

00019198 <SubBandDutyCycle868>:
   19198:	006403e8 03e80064 0064000a              ..d.d.....d.

000191a4 <SubBandParams433>:
   191a4:	19cf0e40 19ea8580 00000000              @...........

000191b0 <SubBandParams868>:
   191b0:	337055c0 338eda40 00000000 338eda41     .Up3@..3....A..3
   191c0:	33bca100 00000000 33bca101 33c5c8c0     ...3.......3...3
   191d0:	00000000 33c74f60 33cef080 00000000     ....`O.3...3....
   191e0:	33d1fdc0 33d5ce50 00000000 33d691a0     ...3P..3.......3
   191f0:	33db2580 00000000                       .%.3....

000191f8 <AdvChannels923JP>:
   191f8:	3706ea00 3706ea00 ff100101 3709f740     ...7...7....@..7
   19208:	3709f740 ff100101                       @..7....

00019210 <DefaultChannels923JP>:
   19210:	50015001                                .P.P

00019214 <SubBandDutyCycleJP923>:
   19214:	000a0064                                d...

00019218 <SubBandParamsJP923>:
   19218:	36d61600 36f7a7c0 00000000 36fab500     ...6...6.......6
   19228:	37502800 00000000                       .(P7....

00019230 <AdvChannels920KR>:
   19230:	36f62120 36f62120 ff0e0100 36f92e60      !.6 !.6....`..6
   19240:	36f92e60 ff0e0100 36fc3ba0 36fc3ba0     `..6.....;.6.;.6
   19250:	ff0e0100                                ....

00019254 <DefaultChannels920KR>:
   19254:	50015001 ffff5001                       .P.P.P..

0001925c <taskHandlers>:
   1925c:	0000d8bd 0000ee29 0000e43d 000098cd     ....)...=.......
   1926c:	00007d65                                e}..

00019270 <tc_interrupt_vectors.13447>:
   19270:	00151211 ffffff00 00020028 20000028     ........(...(.. 
   19280:	00000000 20433249 76616c53 6f4e2065     ....I2C Slave No
   19290:	76412074 616c6961 00656c62 656d6954     t Available.Time
   192a0:	2074756f 00000031 656d6954 2074756f     out 1...Timeout 
   192b0:	00000032                                2...

000192b4 <lorawanHandlers>:
   192b4:	0000e301 0000e215 0000e3c5 fffffffd     ................

000192c4 <radioTaskHandlers>:
   192c4:	0000fa09 0000fb09 0000f845 0000f47d     ........E...}...
   192d4:	000134fd                                .4..

000192d8 <FskSyncWordBuff>:
   192d8:	02c194c1                                         ...

000192db <macEndDevCmdInputLen>:
   192db:	04010402 01010500 05000004              ............

000192e7 <macEndDevCmdReplyLen>:
   192e7:	02010201 01010203 01000002 02020000     ................
   192f7:	0a080200                                         ..

000192f9 <maxEIRPTable>:
   192f9:	0d0c0a08 1412100e 1b1a1815 24211e1d     ..............!$
   19309:	f8ffffff c8000142 da000142 1c000142     ....B...B...B...
   19319:	da000142 be000142 da000142 1c000142     B...B...B...B...
   19329:	c8000142 c8000142 be000142 1c000142     B...B...B...B...
   19339:	24000142 24000142 24000142 e0000142     B..$B..$B..$B...
   19349:	c8000142 c8000142 9c000142 80000142     B...B...B...B...
   19359:	9c000143 be000142 9c000142 80000142     C...B...B...B...
   19369:	c8000143 c8000142 be000142 80000142     C...B...B...B...
   19379:	24000143 24000142 24000142 8a000142     C..$B..$B..$B...
   19389:	78000143 c8000146 c8000145 c6000145     C..xF...E...E...
   19399:	6a000145 6a000146 60000146 c6000146     E..jF..jF..`F...
   193a9:	6a000145 60000146 6a000146 c6000146     E..jF..`F..jF...
   193b9:	70000145 70000146 70000146 00000146     E..pF..pF..pF...
   193c9:	48000147 2a000154 e4000154 02000153     G..HT..*T...S...
   193d9:	e4000153 1c000153 e4000154 02000153     S...S...T...S...
   193e9:	2a000153 2a000154 1c000154 02000154     S..*T..*T...T...
   193f9:	fa000153 fa000152 fa000152 60000152     S...R...R...R..`
   19409:	a8000156 6800015c 6800015b 6400015b     V...\..h[..h[..d
   19419:	8000015b 8000015c 7200015c 6400015c     [...\...\..r\..d
   19429:	8000015b 7200015c 8000015c 6400015c     [...\..r\...\..d
   19439:	8800015b 8800015c 8800015c 8c00015c     [...\...\...\...
   19449:	2c00015e 6e756620 6f697463 00203a6e     ^.., function: .
   19459:	65737361 6f697472 2522206e 66202273     assertion "%s" f
   19469:	656c6961 66203a64 20656c69 22732522     ailed: file "%s"
   19479:	696c202c 2520656e 25732564 30000a73              , line %d%s%s..

00019488 <_global_impure_ptr>:
   19488:	20000030 2b302d23 6c680020 6665004c     0.. #-0+ .hlL.ef
   19498:	47464567 32313000 36353433 41393837     gEFG.0123456789A
   194a8:	45444342 31300046 35343332 39383736     BCDEF.0123456789
   194b8:	64636261 ff006665                       abcdef..

000194c0 <__sf_fake_stderr>:
	...

000194e0 <__sf_fake_stdin>:
	...

00019500 <__sf_fake_stdout>:
	...

00019520 <_init>:
   19520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19522:	46c0      	nop			; (mov r8, r8)
   19524:	bcf8      	pop	{r3, r4, r5, r6, r7}
   19526:	bc08      	pop	{r3}
   19528:	469e      	mov	lr, r3
   1952a:	4770      	bx	lr

0001952c <__init_array_start>:
   1952c:	00004429 	.word	0x00004429

00019530 <_fini>:
   19530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19532:	46c0      	nop			; (mov r8, r8)
   19534:	bcf8      	pop	{r3, r4, r5, r6, r7}
   19536:	bc08      	pop	{r3}
   19538:	469e      	mov	lr, r3
   1953a:	4770      	bx	lr

0001953c <__fini_array_start>:
   1953c:	00004401 	.word	0x00004401
