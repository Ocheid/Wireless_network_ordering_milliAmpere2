
LoRa_v0.6_Terminal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00018568  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00018568  00018568  00028568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000084  20000000  00018570  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .lpram        00000000  30000000  30000000  00030084  2**0
                  CONTENTS
  4 .bss          00003454  20000088  000185f8  00030084  2**3
                  ALLOC
  5 .stack        00002004  200034dc  0001ba4c  00030084  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  00030084  2**0
                  CONTENTS, READONLY
  7 .comment      0000008c  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY
  8 .debug_info   000939ee  00000000  00000000  00030138  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000ce31  00000000  00000000  000c3b26  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001d615  00000000  00000000  000d0957  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000018c8  00000000  00000000  000edf6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002480  00000000  00000000  000ef834  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001a90d  00000000  00000000  000f1cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000335f7  00000000  00000000  0010c5c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b5576  00000000  00000000  0013fbb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000050d0  00000000  00000000  001f5130  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e0 54 00 20 91 6f 00 00 8d 6f 00 00 8d 6f 00 00     .T. .o...o...o..
	...
      2c:	8d 6f 00 00 00 00 00 00 00 00 00 00 8d 6f 00 00     .o...........o..
      3c:	8d 6f 00 00 8d 6f 00 00 8d 6f 00 00 45 4c 00 00     .o...o...o..EL..
      4c:	01 48 00 00 8d 6f 00 00 8d 6f 00 00 8d 6f 00 00     .H...o...o...o..
      5c:	8d 6f 00 00 1d 57 00 00 2d 57 00 00 3d 57 00 00     .o...W..-W..=W..
      6c:	4d 57 00 00 5d 57 00 00 6d 57 00 00 8d 6f 00 00     MW..]W..mW...o..
      7c:	8d 6f 00 00 8d 6f 00 00 61 6b 00 00 71 6b 00 00     .o...o..ak..qk..
      8c:	8d 6f 00 00 8d 6f 00 00 81 6b 00 00 8d 6f 00 00     .o...o...k...o..
      9c:	8d 6f 00 00 8d 6f 00 00 8d 6f 00 00 79 47 00 00     .o...o...o..yG..
      ac:	8d 6f 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .o..............
	...

00000400 <__d_nv_mem_start>:
     400:	ffffffff 	.word	0xffffffff
     404:	ffffffff 	.word	0xffffffff
     408:	ffffffff 	.word	0xffffffff
     40c:	ffffffff 	.word	0xffffffff
     410:	ffffffff 	.word	0xffffffff
     414:	ffffffff 	.word	0xffffffff
     418:	ffffffff 	.word	0xffffffff
     41c:	ffffffff 	.word	0xffffffff
     420:	ffffffff 	.word	0xffffffff
     424:	ffffffff 	.word	0xffffffff
     428:	ffffffff 	.word	0xffffffff
     42c:	ffffffff 	.word	0xffffffff
     430:	ffffffff 	.word	0xffffffff
     434:	ffffffff 	.word	0xffffffff
     438:	ffffffff 	.word	0xffffffff
     43c:	ffffffff 	.word	0xffffffff
     440:	ffffffff 	.word	0xffffffff
     444:	ffffffff 	.word	0xffffffff
     448:	ffffffff 	.word	0xffffffff
     44c:	ffffffff 	.word	0xffffffff
     450:	ffffffff 	.word	0xffffffff
     454:	ffffffff 	.word	0xffffffff
     458:	ffffffff 	.word	0xffffffff
     45c:	ffffffff 	.word	0xffffffff
     460:	ffffffff 	.word	0xffffffff
     464:	ffffffff 	.word	0xffffffff
     468:	ffffffff 	.word	0xffffffff
     46c:	ffffffff 	.word	0xffffffff
     470:	ffffffff 	.word	0xffffffff
     474:	ffffffff 	.word	0xffffffff
     478:	ffffffff 	.word	0xffffffff
     47c:	ffffffff 	.word	0xffffffff
     480:	ffffffff 	.word	0xffffffff
     484:	ffffffff 	.word	0xffffffff
     488:	ffffffff 	.word	0xffffffff
     48c:	ffffffff 	.word	0xffffffff
     490:	ffffffff 	.word	0xffffffff
     494:	ffffffff 	.word	0xffffffff
     498:	ffffffff 	.word	0xffffffff
     49c:	ffffffff 	.word	0xffffffff
     4a0:	ffffffff 	.word	0xffffffff
     4a4:	ffffffff 	.word	0xffffffff
     4a8:	ffffffff 	.word	0xffffffff
     4ac:	ffffffff 	.word	0xffffffff
     4b0:	ffffffff 	.word	0xffffffff
     4b4:	ffffffff 	.word	0xffffffff
     4b8:	ffffffff 	.word	0xffffffff
     4bc:	ffffffff 	.word	0xffffffff
     4c0:	ffffffff 	.word	0xffffffff
     4c4:	ffffffff 	.word	0xffffffff
     4c8:	ffffffff 	.word	0xffffffff
     4cc:	ffffffff 	.word	0xffffffff
     4d0:	ffffffff 	.word	0xffffffff
     4d4:	ffffffff 	.word	0xffffffff
     4d8:	ffffffff 	.word	0xffffffff
     4dc:	ffffffff 	.word	0xffffffff
     4e0:	ffffffff 	.word	0xffffffff
     4e4:	ffffffff 	.word	0xffffffff
     4e8:	ffffffff 	.word	0xffffffff
     4ec:	ffffffff 	.word	0xffffffff
     4f0:	ffffffff 	.word	0xffffffff
     4f4:	ffffffff 	.word	0xffffffff
     4f8:	ffffffff 	.word	0xffffffff
     4fc:	ffffffff 	.word	0xffffffff
     500:	ffffffff 	.word	0xffffffff
     504:	ffffffff 	.word	0xffffffff
     508:	ffffffff 	.word	0xffffffff
     50c:	ffffffff 	.word	0xffffffff
     510:	ffffffff 	.word	0xffffffff
     514:	ffffffff 	.word	0xffffffff
     518:	ffffffff 	.word	0xffffffff
     51c:	ffffffff 	.word	0xffffffff
     520:	ffffffff 	.word	0xffffffff
     524:	ffffffff 	.word	0xffffffff
     528:	ffffffff 	.word	0xffffffff
     52c:	ffffffff 	.word	0xffffffff
     530:	ffffffff 	.word	0xffffffff
     534:	ffffffff 	.word	0xffffffff
     538:	ffffffff 	.word	0xffffffff
     53c:	ffffffff 	.word	0xffffffff
     540:	ffffffff 	.word	0xffffffff
     544:	ffffffff 	.word	0xffffffff
     548:	ffffffff 	.word	0xffffffff
     54c:	ffffffff 	.word	0xffffffff
     550:	ffffffff 	.word	0xffffffff
     554:	ffffffff 	.word	0xffffffff
     558:	ffffffff 	.word	0xffffffff
     55c:	ffffffff 	.word	0xffffffff
     560:	ffffffff 	.word	0xffffffff
     564:	ffffffff 	.word	0xffffffff
     568:	ffffffff 	.word	0xffffffff
     56c:	ffffffff 	.word	0xffffffff
     570:	ffffffff 	.word	0xffffffff
     574:	ffffffff 	.word	0xffffffff
     578:	ffffffff 	.word	0xffffffff
     57c:	ffffffff 	.word	0xffffffff
     580:	ffffffff 	.word	0xffffffff
     584:	ffffffff 	.word	0xffffffff
     588:	ffffffff 	.word	0xffffffff
     58c:	ffffffff 	.word	0xffffffff
     590:	ffffffff 	.word	0xffffffff
     594:	ffffffff 	.word	0xffffffff
     598:	ffffffff 	.word	0xffffffff
     59c:	ffffffff 	.word	0xffffffff
     5a0:	ffffffff 	.word	0xffffffff
     5a4:	ffffffff 	.word	0xffffffff
     5a8:	ffffffff 	.word	0xffffffff
     5ac:	ffffffff 	.word	0xffffffff
     5b0:	ffffffff 	.word	0xffffffff
     5b4:	ffffffff 	.word	0xffffffff
     5b8:	ffffffff 	.word	0xffffffff
     5bc:	ffffffff 	.word	0xffffffff
     5c0:	ffffffff 	.word	0xffffffff
     5c4:	ffffffff 	.word	0xffffffff
     5c8:	ffffffff 	.word	0xffffffff
     5cc:	ffffffff 	.word	0xffffffff
     5d0:	ffffffff 	.word	0xffffffff
     5d4:	ffffffff 	.word	0xffffffff
     5d8:	ffffffff 	.word	0xffffffff
     5dc:	ffffffff 	.word	0xffffffff
     5e0:	ffffffff 	.word	0xffffffff
     5e4:	ffffffff 	.word	0xffffffff
     5e8:	ffffffff 	.word	0xffffffff
     5ec:	ffffffff 	.word	0xffffffff
     5f0:	ffffffff 	.word	0xffffffff
     5f4:	ffffffff 	.word	0xffffffff
     5f8:	ffffffff 	.word	0xffffffff
     5fc:	ffffffff 	.word	0xffffffff
     600:	ffffffff 	.word	0xffffffff
     604:	ffffffff 	.word	0xffffffff
     608:	ffffffff 	.word	0xffffffff
     60c:	ffffffff 	.word	0xffffffff
     610:	ffffffff 	.word	0xffffffff
     614:	ffffffff 	.word	0xffffffff
     618:	ffffffff 	.word	0xffffffff
     61c:	ffffffff 	.word	0xffffffff
     620:	ffffffff 	.word	0xffffffff
     624:	ffffffff 	.word	0xffffffff
     628:	ffffffff 	.word	0xffffffff
     62c:	ffffffff 	.word	0xffffffff
     630:	ffffffff 	.word	0xffffffff
     634:	ffffffff 	.word	0xffffffff
     638:	ffffffff 	.word	0xffffffff
     63c:	ffffffff 	.word	0xffffffff
     640:	ffffffff 	.word	0xffffffff
     644:	ffffffff 	.word	0xffffffff
     648:	ffffffff 	.word	0xffffffff
     64c:	ffffffff 	.word	0xffffffff
     650:	ffffffff 	.word	0xffffffff
     654:	ffffffff 	.word	0xffffffff
     658:	ffffffff 	.word	0xffffffff
     65c:	ffffffff 	.word	0xffffffff
     660:	ffffffff 	.word	0xffffffff
     664:	ffffffff 	.word	0xffffffff
     668:	ffffffff 	.word	0xffffffff
     66c:	ffffffff 	.word	0xffffffff
     670:	ffffffff 	.word	0xffffffff
     674:	ffffffff 	.word	0xffffffff
     678:	ffffffff 	.word	0xffffffff
     67c:	ffffffff 	.word	0xffffffff
     680:	ffffffff 	.word	0xffffffff
     684:	ffffffff 	.word	0xffffffff
     688:	ffffffff 	.word	0xffffffff
     68c:	ffffffff 	.word	0xffffffff
     690:	ffffffff 	.word	0xffffffff
     694:	ffffffff 	.word	0xffffffff
     698:	ffffffff 	.word	0xffffffff
     69c:	ffffffff 	.word	0xffffffff
     6a0:	ffffffff 	.word	0xffffffff
     6a4:	ffffffff 	.word	0xffffffff
     6a8:	ffffffff 	.word	0xffffffff
     6ac:	ffffffff 	.word	0xffffffff
     6b0:	ffffffff 	.word	0xffffffff
     6b4:	ffffffff 	.word	0xffffffff
     6b8:	ffffffff 	.word	0xffffffff
     6bc:	ffffffff 	.word	0xffffffff
     6c0:	ffffffff 	.word	0xffffffff
     6c4:	ffffffff 	.word	0xffffffff
     6c8:	ffffffff 	.word	0xffffffff
     6cc:	ffffffff 	.word	0xffffffff
     6d0:	ffffffff 	.word	0xffffffff
     6d4:	ffffffff 	.word	0xffffffff
     6d8:	ffffffff 	.word	0xffffffff
     6dc:	ffffffff 	.word	0xffffffff
     6e0:	ffffffff 	.word	0xffffffff
     6e4:	ffffffff 	.word	0xffffffff
     6e8:	ffffffff 	.word	0xffffffff
     6ec:	ffffffff 	.word	0xffffffff
     6f0:	ffffffff 	.word	0xffffffff
     6f4:	ffffffff 	.word	0xffffffff
     6f8:	ffffffff 	.word	0xffffffff
     6fc:	ffffffff 	.word	0xffffffff
     700:	ffffffff 	.word	0xffffffff
     704:	ffffffff 	.word	0xffffffff
     708:	ffffffff 	.word	0xffffffff
     70c:	ffffffff 	.word	0xffffffff
     710:	ffffffff 	.word	0xffffffff
     714:	ffffffff 	.word	0xffffffff
     718:	ffffffff 	.word	0xffffffff
     71c:	ffffffff 	.word	0xffffffff
     720:	ffffffff 	.word	0xffffffff
     724:	ffffffff 	.word	0xffffffff
     728:	ffffffff 	.word	0xffffffff
     72c:	ffffffff 	.word	0xffffffff
     730:	ffffffff 	.word	0xffffffff
     734:	ffffffff 	.word	0xffffffff
     738:	ffffffff 	.word	0xffffffff
     73c:	ffffffff 	.word	0xffffffff
     740:	ffffffff 	.word	0xffffffff
     744:	ffffffff 	.word	0xffffffff
     748:	ffffffff 	.word	0xffffffff
     74c:	ffffffff 	.word	0xffffffff
     750:	ffffffff 	.word	0xffffffff
     754:	ffffffff 	.word	0xffffffff
     758:	ffffffff 	.word	0xffffffff
     75c:	ffffffff 	.word	0xffffffff
     760:	ffffffff 	.word	0xffffffff
     764:	ffffffff 	.word	0xffffffff
     768:	ffffffff 	.word	0xffffffff
     76c:	ffffffff 	.word	0xffffffff
     770:	ffffffff 	.word	0xffffffff
     774:	ffffffff 	.word	0xffffffff
     778:	ffffffff 	.word	0xffffffff
     77c:	ffffffff 	.word	0xffffffff
     780:	ffffffff 	.word	0xffffffff
     784:	ffffffff 	.word	0xffffffff
     788:	ffffffff 	.word	0xffffffff
     78c:	ffffffff 	.word	0xffffffff
     790:	ffffffff 	.word	0xffffffff
     794:	ffffffff 	.word	0xffffffff
     798:	ffffffff 	.word	0xffffffff
     79c:	ffffffff 	.word	0xffffffff
     7a0:	ffffffff 	.word	0xffffffff
     7a4:	ffffffff 	.word	0xffffffff
     7a8:	ffffffff 	.word	0xffffffff
     7ac:	ffffffff 	.word	0xffffffff
     7b0:	ffffffff 	.word	0xffffffff
     7b4:	ffffffff 	.word	0xffffffff
     7b8:	ffffffff 	.word	0xffffffff
     7bc:	ffffffff 	.word	0xffffffff
     7c0:	ffffffff 	.word	0xffffffff
     7c4:	ffffffff 	.word	0xffffffff
     7c8:	ffffffff 	.word	0xffffffff
     7cc:	ffffffff 	.word	0xffffffff
     7d0:	ffffffff 	.word	0xffffffff
     7d4:	ffffffff 	.word	0xffffffff
     7d8:	ffffffff 	.word	0xffffffff
     7dc:	ffffffff 	.word	0xffffffff
     7e0:	ffffffff 	.word	0xffffffff
     7e4:	ffffffff 	.word	0xffffffff
     7e8:	ffffffff 	.word	0xffffffff
     7ec:	ffffffff 	.word	0xffffffff
     7f0:	ffffffff 	.word	0xffffffff
     7f4:	ffffffff 	.word	0xffffffff
     7f8:	ffffffff 	.word	0xffffffff
     7fc:	ffffffff 	.word	0xffffffff
     800:	ffffffff 	.word	0xffffffff
     804:	ffffffff 	.word	0xffffffff
     808:	ffffffff 	.word	0xffffffff
     80c:	ffffffff 	.word	0xffffffff
     810:	ffffffff 	.word	0xffffffff
     814:	ffffffff 	.word	0xffffffff
     818:	ffffffff 	.word	0xffffffff
     81c:	ffffffff 	.word	0xffffffff
     820:	ffffffff 	.word	0xffffffff
     824:	ffffffff 	.word	0xffffffff
     828:	ffffffff 	.word	0xffffffff
     82c:	ffffffff 	.word	0xffffffff
     830:	ffffffff 	.word	0xffffffff
     834:	ffffffff 	.word	0xffffffff
     838:	ffffffff 	.word	0xffffffff
     83c:	ffffffff 	.word	0xffffffff
     840:	ffffffff 	.word	0xffffffff
     844:	ffffffff 	.word	0xffffffff
     848:	ffffffff 	.word	0xffffffff
     84c:	ffffffff 	.word	0xffffffff
     850:	ffffffff 	.word	0xffffffff
     854:	ffffffff 	.word	0xffffffff
     858:	ffffffff 	.word	0xffffffff
     85c:	ffffffff 	.word	0xffffffff
     860:	ffffffff 	.word	0xffffffff
     864:	ffffffff 	.word	0xffffffff
     868:	ffffffff 	.word	0xffffffff
     86c:	ffffffff 	.word	0xffffffff
     870:	ffffffff 	.word	0xffffffff
     874:	ffffffff 	.word	0xffffffff
     878:	ffffffff 	.word	0xffffffff
     87c:	ffffffff 	.word	0xffffffff
     880:	ffffffff 	.word	0xffffffff
     884:	ffffffff 	.word	0xffffffff
     888:	ffffffff 	.word	0xffffffff
     88c:	ffffffff 	.word	0xffffffff
     890:	ffffffff 	.word	0xffffffff
     894:	ffffffff 	.word	0xffffffff
     898:	ffffffff 	.word	0xffffffff
     89c:	ffffffff 	.word	0xffffffff
     8a0:	ffffffff 	.word	0xffffffff
     8a4:	ffffffff 	.word	0xffffffff
     8a8:	ffffffff 	.word	0xffffffff
     8ac:	ffffffff 	.word	0xffffffff
     8b0:	ffffffff 	.word	0xffffffff
     8b4:	ffffffff 	.word	0xffffffff
     8b8:	ffffffff 	.word	0xffffffff
     8bc:	ffffffff 	.word	0xffffffff
     8c0:	ffffffff 	.word	0xffffffff
     8c4:	ffffffff 	.word	0xffffffff
     8c8:	ffffffff 	.word	0xffffffff
     8cc:	ffffffff 	.word	0xffffffff
     8d0:	ffffffff 	.word	0xffffffff
     8d4:	ffffffff 	.word	0xffffffff
     8d8:	ffffffff 	.word	0xffffffff
     8dc:	ffffffff 	.word	0xffffffff
     8e0:	ffffffff 	.word	0xffffffff
     8e4:	ffffffff 	.word	0xffffffff
     8e8:	ffffffff 	.word	0xffffffff
     8ec:	ffffffff 	.word	0xffffffff
     8f0:	ffffffff 	.word	0xffffffff
     8f4:	ffffffff 	.word	0xffffffff
     8f8:	ffffffff 	.word	0xffffffff
     8fc:	ffffffff 	.word	0xffffffff
     900:	ffffffff 	.word	0xffffffff
     904:	ffffffff 	.word	0xffffffff
     908:	ffffffff 	.word	0xffffffff
     90c:	ffffffff 	.word	0xffffffff
     910:	ffffffff 	.word	0xffffffff
     914:	ffffffff 	.word	0xffffffff
     918:	ffffffff 	.word	0xffffffff
     91c:	ffffffff 	.word	0xffffffff
     920:	ffffffff 	.word	0xffffffff
     924:	ffffffff 	.word	0xffffffff
     928:	ffffffff 	.word	0xffffffff
     92c:	ffffffff 	.word	0xffffffff
     930:	ffffffff 	.word	0xffffffff
     934:	ffffffff 	.word	0xffffffff
     938:	ffffffff 	.word	0xffffffff
     93c:	ffffffff 	.word	0xffffffff
     940:	ffffffff 	.word	0xffffffff
     944:	ffffffff 	.word	0xffffffff
     948:	ffffffff 	.word	0xffffffff
     94c:	ffffffff 	.word	0xffffffff
     950:	ffffffff 	.word	0xffffffff
     954:	ffffffff 	.word	0xffffffff
     958:	ffffffff 	.word	0xffffffff
     95c:	ffffffff 	.word	0xffffffff
     960:	ffffffff 	.word	0xffffffff
     964:	ffffffff 	.word	0xffffffff
     968:	ffffffff 	.word	0xffffffff
     96c:	ffffffff 	.word	0xffffffff
     970:	ffffffff 	.word	0xffffffff
     974:	ffffffff 	.word	0xffffffff
     978:	ffffffff 	.word	0xffffffff
     97c:	ffffffff 	.word	0xffffffff
     980:	ffffffff 	.word	0xffffffff
     984:	ffffffff 	.word	0xffffffff
     988:	ffffffff 	.word	0xffffffff
     98c:	ffffffff 	.word	0xffffffff
     990:	ffffffff 	.word	0xffffffff
     994:	ffffffff 	.word	0xffffffff
     998:	ffffffff 	.word	0xffffffff
     99c:	ffffffff 	.word	0xffffffff
     9a0:	ffffffff 	.word	0xffffffff
     9a4:	ffffffff 	.word	0xffffffff
     9a8:	ffffffff 	.word	0xffffffff
     9ac:	ffffffff 	.word	0xffffffff
     9b0:	ffffffff 	.word	0xffffffff
     9b4:	ffffffff 	.word	0xffffffff
     9b8:	ffffffff 	.word	0xffffffff
     9bc:	ffffffff 	.word	0xffffffff
     9c0:	ffffffff 	.word	0xffffffff
     9c4:	ffffffff 	.word	0xffffffff
     9c8:	ffffffff 	.word	0xffffffff
     9cc:	ffffffff 	.word	0xffffffff
     9d0:	ffffffff 	.word	0xffffffff
     9d4:	ffffffff 	.word	0xffffffff
     9d8:	ffffffff 	.word	0xffffffff
     9dc:	ffffffff 	.word	0xffffffff
     9e0:	ffffffff 	.word	0xffffffff
     9e4:	ffffffff 	.word	0xffffffff
     9e8:	ffffffff 	.word	0xffffffff
     9ec:	ffffffff 	.word	0xffffffff
     9f0:	ffffffff 	.word	0xffffffff
     9f4:	ffffffff 	.word	0xffffffff
     9f8:	ffffffff 	.word	0xffffffff
     9fc:	ffffffff 	.word	0xffffffff
     a00:	ffffffff 	.word	0xffffffff
     a04:	ffffffff 	.word	0xffffffff
     a08:	ffffffff 	.word	0xffffffff
     a0c:	ffffffff 	.word	0xffffffff
     a10:	ffffffff 	.word	0xffffffff
     a14:	ffffffff 	.word	0xffffffff
     a18:	ffffffff 	.word	0xffffffff
     a1c:	ffffffff 	.word	0xffffffff
     a20:	ffffffff 	.word	0xffffffff
     a24:	ffffffff 	.word	0xffffffff
     a28:	ffffffff 	.word	0xffffffff
     a2c:	ffffffff 	.word	0xffffffff
     a30:	ffffffff 	.word	0xffffffff
     a34:	ffffffff 	.word	0xffffffff
     a38:	ffffffff 	.word	0xffffffff
     a3c:	ffffffff 	.word	0xffffffff
     a40:	ffffffff 	.word	0xffffffff
     a44:	ffffffff 	.word	0xffffffff
     a48:	ffffffff 	.word	0xffffffff
     a4c:	ffffffff 	.word	0xffffffff
     a50:	ffffffff 	.word	0xffffffff
     a54:	ffffffff 	.word	0xffffffff
     a58:	ffffffff 	.word	0xffffffff
     a5c:	ffffffff 	.word	0xffffffff
     a60:	ffffffff 	.word	0xffffffff
     a64:	ffffffff 	.word	0xffffffff
     a68:	ffffffff 	.word	0xffffffff
     a6c:	ffffffff 	.word	0xffffffff
     a70:	ffffffff 	.word	0xffffffff
     a74:	ffffffff 	.word	0xffffffff
     a78:	ffffffff 	.word	0xffffffff
     a7c:	ffffffff 	.word	0xffffffff
     a80:	ffffffff 	.word	0xffffffff
     a84:	ffffffff 	.word	0xffffffff
     a88:	ffffffff 	.word	0xffffffff
     a8c:	ffffffff 	.word	0xffffffff
     a90:	ffffffff 	.word	0xffffffff
     a94:	ffffffff 	.word	0xffffffff
     a98:	ffffffff 	.word	0xffffffff
     a9c:	ffffffff 	.word	0xffffffff
     aa0:	ffffffff 	.word	0xffffffff
     aa4:	ffffffff 	.word	0xffffffff
     aa8:	ffffffff 	.word	0xffffffff
     aac:	ffffffff 	.word	0xffffffff
     ab0:	ffffffff 	.word	0xffffffff
     ab4:	ffffffff 	.word	0xffffffff
     ab8:	ffffffff 	.word	0xffffffff
     abc:	ffffffff 	.word	0xffffffff
     ac0:	ffffffff 	.word	0xffffffff
     ac4:	ffffffff 	.word	0xffffffff
     ac8:	ffffffff 	.word	0xffffffff
     acc:	ffffffff 	.word	0xffffffff
     ad0:	ffffffff 	.word	0xffffffff
     ad4:	ffffffff 	.word	0xffffffff
     ad8:	ffffffff 	.word	0xffffffff
     adc:	ffffffff 	.word	0xffffffff
     ae0:	ffffffff 	.word	0xffffffff
     ae4:	ffffffff 	.word	0xffffffff
     ae8:	ffffffff 	.word	0xffffffff
     aec:	ffffffff 	.word	0xffffffff
     af0:	ffffffff 	.word	0xffffffff
     af4:	ffffffff 	.word	0xffffffff
     af8:	ffffffff 	.word	0xffffffff
     afc:	ffffffff 	.word	0xffffffff
     b00:	ffffffff 	.word	0xffffffff
     b04:	ffffffff 	.word	0xffffffff
     b08:	ffffffff 	.word	0xffffffff
     b0c:	ffffffff 	.word	0xffffffff
     b10:	ffffffff 	.word	0xffffffff
     b14:	ffffffff 	.word	0xffffffff
     b18:	ffffffff 	.word	0xffffffff
     b1c:	ffffffff 	.word	0xffffffff
     b20:	ffffffff 	.word	0xffffffff
     b24:	ffffffff 	.word	0xffffffff
     b28:	ffffffff 	.word	0xffffffff
     b2c:	ffffffff 	.word	0xffffffff
     b30:	ffffffff 	.word	0xffffffff
     b34:	ffffffff 	.word	0xffffffff
     b38:	ffffffff 	.word	0xffffffff
     b3c:	ffffffff 	.word	0xffffffff
     b40:	ffffffff 	.word	0xffffffff
     b44:	ffffffff 	.word	0xffffffff
     b48:	ffffffff 	.word	0xffffffff
     b4c:	ffffffff 	.word	0xffffffff
     b50:	ffffffff 	.word	0xffffffff
     b54:	ffffffff 	.word	0xffffffff
     b58:	ffffffff 	.word	0xffffffff
     b5c:	ffffffff 	.word	0xffffffff
     b60:	ffffffff 	.word	0xffffffff
     b64:	ffffffff 	.word	0xffffffff
     b68:	ffffffff 	.word	0xffffffff
     b6c:	ffffffff 	.word	0xffffffff
     b70:	ffffffff 	.word	0xffffffff
     b74:	ffffffff 	.word	0xffffffff
     b78:	ffffffff 	.word	0xffffffff
     b7c:	ffffffff 	.word	0xffffffff
     b80:	ffffffff 	.word	0xffffffff
     b84:	ffffffff 	.word	0xffffffff
     b88:	ffffffff 	.word	0xffffffff
     b8c:	ffffffff 	.word	0xffffffff
     b90:	ffffffff 	.word	0xffffffff
     b94:	ffffffff 	.word	0xffffffff
     b98:	ffffffff 	.word	0xffffffff
     b9c:	ffffffff 	.word	0xffffffff
     ba0:	ffffffff 	.word	0xffffffff
     ba4:	ffffffff 	.word	0xffffffff
     ba8:	ffffffff 	.word	0xffffffff
     bac:	ffffffff 	.word	0xffffffff
     bb0:	ffffffff 	.word	0xffffffff
     bb4:	ffffffff 	.word	0xffffffff
     bb8:	ffffffff 	.word	0xffffffff
     bbc:	ffffffff 	.word	0xffffffff
     bc0:	ffffffff 	.word	0xffffffff
     bc4:	ffffffff 	.word	0xffffffff
     bc8:	ffffffff 	.word	0xffffffff
     bcc:	ffffffff 	.word	0xffffffff
     bd0:	ffffffff 	.word	0xffffffff
     bd4:	ffffffff 	.word	0xffffffff
     bd8:	ffffffff 	.word	0xffffffff
     bdc:	ffffffff 	.word	0xffffffff
     be0:	ffffffff 	.word	0xffffffff
     be4:	ffffffff 	.word	0xffffffff
     be8:	ffffffff 	.word	0xffffffff
     bec:	ffffffff 	.word	0xffffffff
     bf0:	ffffffff 	.word	0xffffffff
     bf4:	ffffffff 	.word	0xffffffff
     bf8:	ffffffff 	.word	0xffffffff
     bfc:	ffffffff 	.word	0xffffffff
     c00:	ffffffff 	.word	0xffffffff
     c04:	ffffffff 	.word	0xffffffff
     c08:	ffffffff 	.word	0xffffffff
     c0c:	ffffffff 	.word	0xffffffff
     c10:	ffffffff 	.word	0xffffffff
     c14:	ffffffff 	.word	0xffffffff
     c18:	ffffffff 	.word	0xffffffff
     c1c:	ffffffff 	.word	0xffffffff
     c20:	ffffffff 	.word	0xffffffff
     c24:	ffffffff 	.word	0xffffffff
     c28:	ffffffff 	.word	0xffffffff
     c2c:	ffffffff 	.word	0xffffffff
     c30:	ffffffff 	.word	0xffffffff
     c34:	ffffffff 	.word	0xffffffff
     c38:	ffffffff 	.word	0xffffffff
     c3c:	ffffffff 	.word	0xffffffff
     c40:	ffffffff 	.word	0xffffffff
     c44:	ffffffff 	.word	0xffffffff
     c48:	ffffffff 	.word	0xffffffff
     c4c:	ffffffff 	.word	0xffffffff
     c50:	ffffffff 	.word	0xffffffff
     c54:	ffffffff 	.word	0xffffffff
     c58:	ffffffff 	.word	0xffffffff
     c5c:	ffffffff 	.word	0xffffffff
     c60:	ffffffff 	.word	0xffffffff
     c64:	ffffffff 	.word	0xffffffff
     c68:	ffffffff 	.word	0xffffffff
     c6c:	ffffffff 	.word	0xffffffff
     c70:	ffffffff 	.word	0xffffffff
     c74:	ffffffff 	.word	0xffffffff
     c78:	ffffffff 	.word	0xffffffff
     c7c:	ffffffff 	.word	0xffffffff
     c80:	ffffffff 	.word	0xffffffff
     c84:	ffffffff 	.word	0xffffffff
     c88:	ffffffff 	.word	0xffffffff
     c8c:	ffffffff 	.word	0xffffffff
     c90:	ffffffff 	.word	0xffffffff
     c94:	ffffffff 	.word	0xffffffff
     c98:	ffffffff 	.word	0xffffffff
     c9c:	ffffffff 	.word	0xffffffff
     ca0:	ffffffff 	.word	0xffffffff
     ca4:	ffffffff 	.word	0xffffffff
     ca8:	ffffffff 	.word	0xffffffff
     cac:	ffffffff 	.word	0xffffffff
     cb0:	ffffffff 	.word	0xffffffff
     cb4:	ffffffff 	.word	0xffffffff
     cb8:	ffffffff 	.word	0xffffffff
     cbc:	ffffffff 	.word	0xffffffff
     cc0:	ffffffff 	.word	0xffffffff
     cc4:	ffffffff 	.word	0xffffffff
     cc8:	ffffffff 	.word	0xffffffff
     ccc:	ffffffff 	.word	0xffffffff
     cd0:	ffffffff 	.word	0xffffffff
     cd4:	ffffffff 	.word	0xffffffff
     cd8:	ffffffff 	.word	0xffffffff
     cdc:	ffffffff 	.word	0xffffffff
     ce0:	ffffffff 	.word	0xffffffff
     ce4:	ffffffff 	.word	0xffffffff
     ce8:	ffffffff 	.word	0xffffffff
     cec:	ffffffff 	.word	0xffffffff
     cf0:	ffffffff 	.word	0xffffffff
     cf4:	ffffffff 	.word	0xffffffff
     cf8:	ffffffff 	.word	0xffffffff
     cfc:	ffffffff 	.word	0xffffffff
     d00:	ffffffff 	.word	0xffffffff
     d04:	ffffffff 	.word	0xffffffff
     d08:	ffffffff 	.word	0xffffffff
     d0c:	ffffffff 	.word	0xffffffff
     d10:	ffffffff 	.word	0xffffffff
     d14:	ffffffff 	.word	0xffffffff
     d18:	ffffffff 	.word	0xffffffff
     d1c:	ffffffff 	.word	0xffffffff
     d20:	ffffffff 	.word	0xffffffff
     d24:	ffffffff 	.word	0xffffffff
     d28:	ffffffff 	.word	0xffffffff
     d2c:	ffffffff 	.word	0xffffffff
     d30:	ffffffff 	.word	0xffffffff
     d34:	ffffffff 	.word	0xffffffff
     d38:	ffffffff 	.word	0xffffffff
     d3c:	ffffffff 	.word	0xffffffff
     d40:	ffffffff 	.word	0xffffffff
     d44:	ffffffff 	.word	0xffffffff
     d48:	ffffffff 	.word	0xffffffff
     d4c:	ffffffff 	.word	0xffffffff
     d50:	ffffffff 	.word	0xffffffff
     d54:	ffffffff 	.word	0xffffffff
     d58:	ffffffff 	.word	0xffffffff
     d5c:	ffffffff 	.word	0xffffffff
     d60:	ffffffff 	.word	0xffffffff
     d64:	ffffffff 	.word	0xffffffff
     d68:	ffffffff 	.word	0xffffffff
     d6c:	ffffffff 	.word	0xffffffff
     d70:	ffffffff 	.word	0xffffffff
     d74:	ffffffff 	.word	0xffffffff
     d78:	ffffffff 	.word	0xffffffff
     d7c:	ffffffff 	.word	0xffffffff
     d80:	ffffffff 	.word	0xffffffff
     d84:	ffffffff 	.word	0xffffffff
     d88:	ffffffff 	.word	0xffffffff
     d8c:	ffffffff 	.word	0xffffffff
     d90:	ffffffff 	.word	0xffffffff
     d94:	ffffffff 	.word	0xffffffff
     d98:	ffffffff 	.word	0xffffffff
     d9c:	ffffffff 	.word	0xffffffff
     da0:	ffffffff 	.word	0xffffffff
     da4:	ffffffff 	.word	0xffffffff
     da8:	ffffffff 	.word	0xffffffff
     dac:	ffffffff 	.word	0xffffffff
     db0:	ffffffff 	.word	0xffffffff
     db4:	ffffffff 	.word	0xffffffff
     db8:	ffffffff 	.word	0xffffffff
     dbc:	ffffffff 	.word	0xffffffff
     dc0:	ffffffff 	.word	0xffffffff
     dc4:	ffffffff 	.word	0xffffffff
     dc8:	ffffffff 	.word	0xffffffff
     dcc:	ffffffff 	.word	0xffffffff
     dd0:	ffffffff 	.word	0xffffffff
     dd4:	ffffffff 	.word	0xffffffff
     dd8:	ffffffff 	.word	0xffffffff
     ddc:	ffffffff 	.word	0xffffffff
     de0:	ffffffff 	.word	0xffffffff
     de4:	ffffffff 	.word	0xffffffff
     de8:	ffffffff 	.word	0xffffffff
     dec:	ffffffff 	.word	0xffffffff
     df0:	ffffffff 	.word	0xffffffff
     df4:	ffffffff 	.word	0xffffffff
     df8:	ffffffff 	.word	0xffffffff
     dfc:	ffffffff 	.word	0xffffffff
     e00:	ffffffff 	.word	0xffffffff
     e04:	ffffffff 	.word	0xffffffff
     e08:	ffffffff 	.word	0xffffffff
     e0c:	ffffffff 	.word	0xffffffff
     e10:	ffffffff 	.word	0xffffffff
     e14:	ffffffff 	.word	0xffffffff
     e18:	ffffffff 	.word	0xffffffff
     e1c:	ffffffff 	.word	0xffffffff
     e20:	ffffffff 	.word	0xffffffff
     e24:	ffffffff 	.word	0xffffffff
     e28:	ffffffff 	.word	0xffffffff
     e2c:	ffffffff 	.word	0xffffffff
     e30:	ffffffff 	.word	0xffffffff
     e34:	ffffffff 	.word	0xffffffff
     e38:	ffffffff 	.word	0xffffffff
     e3c:	ffffffff 	.word	0xffffffff
     e40:	ffffffff 	.word	0xffffffff
     e44:	ffffffff 	.word	0xffffffff
     e48:	ffffffff 	.word	0xffffffff
     e4c:	ffffffff 	.word	0xffffffff
     e50:	ffffffff 	.word	0xffffffff
     e54:	ffffffff 	.word	0xffffffff
     e58:	ffffffff 	.word	0xffffffff
     e5c:	ffffffff 	.word	0xffffffff
     e60:	ffffffff 	.word	0xffffffff
     e64:	ffffffff 	.word	0xffffffff
     e68:	ffffffff 	.word	0xffffffff
     e6c:	ffffffff 	.word	0xffffffff
     e70:	ffffffff 	.word	0xffffffff
     e74:	ffffffff 	.word	0xffffffff
     e78:	ffffffff 	.word	0xffffffff
     e7c:	ffffffff 	.word	0xffffffff
     e80:	ffffffff 	.word	0xffffffff
     e84:	ffffffff 	.word	0xffffffff
     e88:	ffffffff 	.word	0xffffffff
     e8c:	ffffffff 	.word	0xffffffff
     e90:	ffffffff 	.word	0xffffffff
     e94:	ffffffff 	.word	0xffffffff
     e98:	ffffffff 	.word	0xffffffff
     e9c:	ffffffff 	.word	0xffffffff
     ea0:	ffffffff 	.word	0xffffffff
     ea4:	ffffffff 	.word	0xffffffff
     ea8:	ffffffff 	.word	0xffffffff
     eac:	ffffffff 	.word	0xffffffff
     eb0:	ffffffff 	.word	0xffffffff
     eb4:	ffffffff 	.word	0xffffffff
     eb8:	ffffffff 	.word	0xffffffff
     ebc:	ffffffff 	.word	0xffffffff
     ec0:	ffffffff 	.word	0xffffffff
     ec4:	ffffffff 	.word	0xffffffff
     ec8:	ffffffff 	.word	0xffffffff
     ecc:	ffffffff 	.word	0xffffffff
     ed0:	ffffffff 	.word	0xffffffff
     ed4:	ffffffff 	.word	0xffffffff
     ed8:	ffffffff 	.word	0xffffffff
     edc:	ffffffff 	.word	0xffffffff
     ee0:	ffffffff 	.word	0xffffffff
     ee4:	ffffffff 	.word	0xffffffff
     ee8:	ffffffff 	.word	0xffffffff
     eec:	ffffffff 	.word	0xffffffff
     ef0:	ffffffff 	.word	0xffffffff
     ef4:	ffffffff 	.word	0xffffffff
     ef8:	ffffffff 	.word	0xffffffff
     efc:	ffffffff 	.word	0xffffffff
     f00:	ffffffff 	.word	0xffffffff
     f04:	ffffffff 	.word	0xffffffff
     f08:	ffffffff 	.word	0xffffffff
     f0c:	ffffffff 	.word	0xffffffff
     f10:	ffffffff 	.word	0xffffffff
     f14:	ffffffff 	.word	0xffffffff
     f18:	ffffffff 	.word	0xffffffff
     f1c:	ffffffff 	.word	0xffffffff
     f20:	ffffffff 	.word	0xffffffff
     f24:	ffffffff 	.word	0xffffffff
     f28:	ffffffff 	.word	0xffffffff
     f2c:	ffffffff 	.word	0xffffffff
     f30:	ffffffff 	.word	0xffffffff
     f34:	ffffffff 	.word	0xffffffff
     f38:	ffffffff 	.word	0xffffffff
     f3c:	ffffffff 	.word	0xffffffff
     f40:	ffffffff 	.word	0xffffffff
     f44:	ffffffff 	.word	0xffffffff
     f48:	ffffffff 	.word	0xffffffff
     f4c:	ffffffff 	.word	0xffffffff
     f50:	ffffffff 	.word	0xffffffff
     f54:	ffffffff 	.word	0xffffffff
     f58:	ffffffff 	.word	0xffffffff
     f5c:	ffffffff 	.word	0xffffffff
     f60:	ffffffff 	.word	0xffffffff
     f64:	ffffffff 	.word	0xffffffff
     f68:	ffffffff 	.word	0xffffffff
     f6c:	ffffffff 	.word	0xffffffff
     f70:	ffffffff 	.word	0xffffffff
     f74:	ffffffff 	.word	0xffffffff
     f78:	ffffffff 	.word	0xffffffff
     f7c:	ffffffff 	.word	0xffffffff
     f80:	ffffffff 	.word	0xffffffff
     f84:	ffffffff 	.word	0xffffffff
     f88:	ffffffff 	.word	0xffffffff
     f8c:	ffffffff 	.word	0xffffffff
     f90:	ffffffff 	.word	0xffffffff
     f94:	ffffffff 	.word	0xffffffff
     f98:	ffffffff 	.word	0xffffffff
     f9c:	ffffffff 	.word	0xffffffff
     fa0:	ffffffff 	.word	0xffffffff
     fa4:	ffffffff 	.word	0xffffffff
     fa8:	ffffffff 	.word	0xffffffff
     fac:	ffffffff 	.word	0xffffffff
     fb0:	ffffffff 	.word	0xffffffff
     fb4:	ffffffff 	.word	0xffffffff
     fb8:	ffffffff 	.word	0xffffffff
     fbc:	ffffffff 	.word	0xffffffff
     fc0:	ffffffff 	.word	0xffffffff
     fc4:	ffffffff 	.word	0xffffffff
     fc8:	ffffffff 	.word	0xffffffff
     fcc:	ffffffff 	.word	0xffffffff
     fd0:	ffffffff 	.word	0xffffffff
     fd4:	ffffffff 	.word	0xffffffff
     fd8:	ffffffff 	.word	0xffffffff
     fdc:	ffffffff 	.word	0xffffffff
     fe0:	ffffffff 	.word	0xffffffff
     fe4:	ffffffff 	.word	0xffffffff
     fe8:	ffffffff 	.word	0xffffffff
     fec:	ffffffff 	.word	0xffffffff
     ff0:	ffffffff 	.word	0xffffffff
     ff4:	ffffffff 	.word	0xffffffff
     ff8:	ffffffff 	.word	0xffffffff
     ffc:	ffffffff 	.word	0xffffffff
    1000:	ffffffff 	.word	0xffffffff
    1004:	ffffffff 	.word	0xffffffff
    1008:	ffffffff 	.word	0xffffffff
    100c:	ffffffff 	.word	0xffffffff
    1010:	ffffffff 	.word	0xffffffff
    1014:	ffffffff 	.word	0xffffffff
    1018:	ffffffff 	.word	0xffffffff
    101c:	ffffffff 	.word	0xffffffff
    1020:	ffffffff 	.word	0xffffffff
    1024:	ffffffff 	.word	0xffffffff
    1028:	ffffffff 	.word	0xffffffff
    102c:	ffffffff 	.word	0xffffffff
    1030:	ffffffff 	.word	0xffffffff
    1034:	ffffffff 	.word	0xffffffff
    1038:	ffffffff 	.word	0xffffffff
    103c:	ffffffff 	.word	0xffffffff
    1040:	ffffffff 	.word	0xffffffff
    1044:	ffffffff 	.word	0xffffffff
    1048:	ffffffff 	.word	0xffffffff
    104c:	ffffffff 	.word	0xffffffff
    1050:	ffffffff 	.word	0xffffffff
    1054:	ffffffff 	.word	0xffffffff
    1058:	ffffffff 	.word	0xffffffff
    105c:	ffffffff 	.word	0xffffffff
    1060:	ffffffff 	.word	0xffffffff
    1064:	ffffffff 	.word	0xffffffff
    1068:	ffffffff 	.word	0xffffffff
    106c:	ffffffff 	.word	0xffffffff
    1070:	ffffffff 	.word	0xffffffff
    1074:	ffffffff 	.word	0xffffffff
    1078:	ffffffff 	.word	0xffffffff
    107c:	ffffffff 	.word	0xffffffff
    1080:	ffffffff 	.word	0xffffffff
    1084:	ffffffff 	.word	0xffffffff
    1088:	ffffffff 	.word	0xffffffff
    108c:	ffffffff 	.word	0xffffffff
    1090:	ffffffff 	.word	0xffffffff
    1094:	ffffffff 	.word	0xffffffff
    1098:	ffffffff 	.word	0xffffffff
    109c:	ffffffff 	.word	0xffffffff
    10a0:	ffffffff 	.word	0xffffffff
    10a4:	ffffffff 	.word	0xffffffff
    10a8:	ffffffff 	.word	0xffffffff
    10ac:	ffffffff 	.word	0xffffffff
    10b0:	ffffffff 	.word	0xffffffff
    10b4:	ffffffff 	.word	0xffffffff
    10b8:	ffffffff 	.word	0xffffffff
    10bc:	ffffffff 	.word	0xffffffff
    10c0:	ffffffff 	.word	0xffffffff
    10c4:	ffffffff 	.word	0xffffffff
    10c8:	ffffffff 	.word	0xffffffff
    10cc:	ffffffff 	.word	0xffffffff
    10d0:	ffffffff 	.word	0xffffffff
    10d4:	ffffffff 	.word	0xffffffff
    10d8:	ffffffff 	.word	0xffffffff
    10dc:	ffffffff 	.word	0xffffffff
    10e0:	ffffffff 	.word	0xffffffff
    10e4:	ffffffff 	.word	0xffffffff
    10e8:	ffffffff 	.word	0xffffffff
    10ec:	ffffffff 	.word	0xffffffff
    10f0:	ffffffff 	.word	0xffffffff
    10f4:	ffffffff 	.word	0xffffffff
    10f8:	ffffffff 	.word	0xffffffff
    10fc:	ffffffff 	.word	0xffffffff
    1100:	ffffffff 	.word	0xffffffff
    1104:	ffffffff 	.word	0xffffffff
    1108:	ffffffff 	.word	0xffffffff
    110c:	ffffffff 	.word	0xffffffff
    1110:	ffffffff 	.word	0xffffffff
    1114:	ffffffff 	.word	0xffffffff
    1118:	ffffffff 	.word	0xffffffff
    111c:	ffffffff 	.word	0xffffffff
    1120:	ffffffff 	.word	0xffffffff
    1124:	ffffffff 	.word	0xffffffff
    1128:	ffffffff 	.word	0xffffffff
    112c:	ffffffff 	.word	0xffffffff
    1130:	ffffffff 	.word	0xffffffff
    1134:	ffffffff 	.word	0xffffffff
    1138:	ffffffff 	.word	0xffffffff
    113c:	ffffffff 	.word	0xffffffff
    1140:	ffffffff 	.word	0xffffffff
    1144:	ffffffff 	.word	0xffffffff
    1148:	ffffffff 	.word	0xffffffff
    114c:	ffffffff 	.word	0xffffffff
    1150:	ffffffff 	.word	0xffffffff
    1154:	ffffffff 	.word	0xffffffff
    1158:	ffffffff 	.word	0xffffffff
    115c:	ffffffff 	.word	0xffffffff
    1160:	ffffffff 	.word	0xffffffff
    1164:	ffffffff 	.word	0xffffffff
    1168:	ffffffff 	.word	0xffffffff
    116c:	ffffffff 	.word	0xffffffff
    1170:	ffffffff 	.word	0xffffffff
    1174:	ffffffff 	.word	0xffffffff
    1178:	ffffffff 	.word	0xffffffff
    117c:	ffffffff 	.word	0xffffffff
    1180:	ffffffff 	.word	0xffffffff
    1184:	ffffffff 	.word	0xffffffff
    1188:	ffffffff 	.word	0xffffffff
    118c:	ffffffff 	.word	0xffffffff
    1190:	ffffffff 	.word	0xffffffff
    1194:	ffffffff 	.word	0xffffffff
    1198:	ffffffff 	.word	0xffffffff
    119c:	ffffffff 	.word	0xffffffff
    11a0:	ffffffff 	.word	0xffffffff
    11a4:	ffffffff 	.word	0xffffffff
    11a8:	ffffffff 	.word	0xffffffff
    11ac:	ffffffff 	.word	0xffffffff
    11b0:	ffffffff 	.word	0xffffffff
    11b4:	ffffffff 	.word	0xffffffff
    11b8:	ffffffff 	.word	0xffffffff
    11bc:	ffffffff 	.word	0xffffffff
    11c0:	ffffffff 	.word	0xffffffff
    11c4:	ffffffff 	.word	0xffffffff
    11c8:	ffffffff 	.word	0xffffffff
    11cc:	ffffffff 	.word	0xffffffff
    11d0:	ffffffff 	.word	0xffffffff
    11d4:	ffffffff 	.word	0xffffffff
    11d8:	ffffffff 	.word	0xffffffff
    11dc:	ffffffff 	.word	0xffffffff
    11e0:	ffffffff 	.word	0xffffffff
    11e4:	ffffffff 	.word	0xffffffff
    11e8:	ffffffff 	.word	0xffffffff
    11ec:	ffffffff 	.word	0xffffffff
    11f0:	ffffffff 	.word	0xffffffff
    11f4:	ffffffff 	.word	0xffffffff
    11f8:	ffffffff 	.word	0xffffffff
    11fc:	ffffffff 	.word	0xffffffff
    1200:	ffffffff 	.word	0xffffffff
    1204:	ffffffff 	.word	0xffffffff
    1208:	ffffffff 	.word	0xffffffff
    120c:	ffffffff 	.word	0xffffffff
    1210:	ffffffff 	.word	0xffffffff
    1214:	ffffffff 	.word	0xffffffff
    1218:	ffffffff 	.word	0xffffffff
    121c:	ffffffff 	.word	0xffffffff
    1220:	ffffffff 	.word	0xffffffff
    1224:	ffffffff 	.word	0xffffffff
    1228:	ffffffff 	.word	0xffffffff
    122c:	ffffffff 	.word	0xffffffff
    1230:	ffffffff 	.word	0xffffffff
    1234:	ffffffff 	.word	0xffffffff
    1238:	ffffffff 	.word	0xffffffff
    123c:	ffffffff 	.word	0xffffffff
    1240:	ffffffff 	.word	0xffffffff
    1244:	ffffffff 	.word	0xffffffff
    1248:	ffffffff 	.word	0xffffffff
    124c:	ffffffff 	.word	0xffffffff
    1250:	ffffffff 	.word	0xffffffff
    1254:	ffffffff 	.word	0xffffffff
    1258:	ffffffff 	.word	0xffffffff
    125c:	ffffffff 	.word	0xffffffff
    1260:	ffffffff 	.word	0xffffffff
    1264:	ffffffff 	.word	0xffffffff
    1268:	ffffffff 	.word	0xffffffff
    126c:	ffffffff 	.word	0xffffffff
    1270:	ffffffff 	.word	0xffffffff
    1274:	ffffffff 	.word	0xffffffff
    1278:	ffffffff 	.word	0xffffffff
    127c:	ffffffff 	.word	0xffffffff
    1280:	ffffffff 	.word	0xffffffff
    1284:	ffffffff 	.word	0xffffffff
    1288:	ffffffff 	.word	0xffffffff
    128c:	ffffffff 	.word	0xffffffff
    1290:	ffffffff 	.word	0xffffffff
    1294:	ffffffff 	.word	0xffffffff
    1298:	ffffffff 	.word	0xffffffff
    129c:	ffffffff 	.word	0xffffffff
    12a0:	ffffffff 	.word	0xffffffff
    12a4:	ffffffff 	.word	0xffffffff
    12a8:	ffffffff 	.word	0xffffffff
    12ac:	ffffffff 	.word	0xffffffff
    12b0:	ffffffff 	.word	0xffffffff
    12b4:	ffffffff 	.word	0xffffffff
    12b8:	ffffffff 	.word	0xffffffff
    12bc:	ffffffff 	.word	0xffffffff
    12c0:	ffffffff 	.word	0xffffffff
    12c4:	ffffffff 	.word	0xffffffff
    12c8:	ffffffff 	.word	0xffffffff
    12cc:	ffffffff 	.word	0xffffffff
    12d0:	ffffffff 	.word	0xffffffff
    12d4:	ffffffff 	.word	0xffffffff
    12d8:	ffffffff 	.word	0xffffffff
    12dc:	ffffffff 	.word	0xffffffff
    12e0:	ffffffff 	.word	0xffffffff
    12e4:	ffffffff 	.word	0xffffffff
    12e8:	ffffffff 	.word	0xffffffff
    12ec:	ffffffff 	.word	0xffffffff
    12f0:	ffffffff 	.word	0xffffffff
    12f4:	ffffffff 	.word	0xffffffff
    12f8:	ffffffff 	.word	0xffffffff
    12fc:	ffffffff 	.word	0xffffffff
    1300:	ffffffff 	.word	0xffffffff
    1304:	ffffffff 	.word	0xffffffff
    1308:	ffffffff 	.word	0xffffffff
    130c:	ffffffff 	.word	0xffffffff
    1310:	ffffffff 	.word	0xffffffff
    1314:	ffffffff 	.word	0xffffffff
    1318:	ffffffff 	.word	0xffffffff
    131c:	ffffffff 	.word	0xffffffff
    1320:	ffffffff 	.word	0xffffffff
    1324:	ffffffff 	.word	0xffffffff
    1328:	ffffffff 	.word	0xffffffff
    132c:	ffffffff 	.word	0xffffffff
    1330:	ffffffff 	.word	0xffffffff
    1334:	ffffffff 	.word	0xffffffff
    1338:	ffffffff 	.word	0xffffffff
    133c:	ffffffff 	.word	0xffffffff
    1340:	ffffffff 	.word	0xffffffff
    1344:	ffffffff 	.word	0xffffffff
    1348:	ffffffff 	.word	0xffffffff
    134c:	ffffffff 	.word	0xffffffff
    1350:	ffffffff 	.word	0xffffffff
    1354:	ffffffff 	.word	0xffffffff
    1358:	ffffffff 	.word	0xffffffff
    135c:	ffffffff 	.word	0xffffffff
    1360:	ffffffff 	.word	0xffffffff
    1364:	ffffffff 	.word	0xffffffff
    1368:	ffffffff 	.word	0xffffffff
    136c:	ffffffff 	.word	0xffffffff
    1370:	ffffffff 	.word	0xffffffff
    1374:	ffffffff 	.word	0xffffffff
    1378:	ffffffff 	.word	0xffffffff
    137c:	ffffffff 	.word	0xffffffff
    1380:	ffffffff 	.word	0xffffffff
    1384:	ffffffff 	.word	0xffffffff
    1388:	ffffffff 	.word	0xffffffff
    138c:	ffffffff 	.word	0xffffffff
    1390:	ffffffff 	.word	0xffffffff
    1394:	ffffffff 	.word	0xffffffff
    1398:	ffffffff 	.word	0xffffffff
    139c:	ffffffff 	.word	0xffffffff
    13a0:	ffffffff 	.word	0xffffffff
    13a4:	ffffffff 	.word	0xffffffff
    13a8:	ffffffff 	.word	0xffffffff
    13ac:	ffffffff 	.word	0xffffffff
    13b0:	ffffffff 	.word	0xffffffff
    13b4:	ffffffff 	.word	0xffffffff
    13b8:	ffffffff 	.word	0xffffffff
    13bc:	ffffffff 	.word	0xffffffff
    13c0:	ffffffff 	.word	0xffffffff
    13c4:	ffffffff 	.word	0xffffffff
    13c8:	ffffffff 	.word	0xffffffff
    13cc:	ffffffff 	.word	0xffffffff
    13d0:	ffffffff 	.word	0xffffffff
    13d4:	ffffffff 	.word	0xffffffff
    13d8:	ffffffff 	.word	0xffffffff
    13dc:	ffffffff 	.word	0xffffffff
    13e0:	ffffffff 	.word	0xffffffff
    13e4:	ffffffff 	.word	0xffffffff
    13e8:	ffffffff 	.word	0xffffffff
    13ec:	ffffffff 	.word	0xffffffff
    13f0:	ffffffff 	.word	0xffffffff
    13f4:	ffffffff 	.word	0xffffffff
    13f8:	ffffffff 	.word	0xffffffff
    13fc:	ffffffff 	.word	0xffffffff
    1400:	ffffffff 	.word	0xffffffff
    1404:	ffffffff 	.word	0xffffffff
    1408:	ffffffff 	.word	0xffffffff
    140c:	ffffffff 	.word	0xffffffff
    1410:	ffffffff 	.word	0xffffffff
    1414:	ffffffff 	.word	0xffffffff
    1418:	ffffffff 	.word	0xffffffff
    141c:	ffffffff 	.word	0xffffffff
    1420:	ffffffff 	.word	0xffffffff
    1424:	ffffffff 	.word	0xffffffff
    1428:	ffffffff 	.word	0xffffffff
    142c:	ffffffff 	.word	0xffffffff
    1430:	ffffffff 	.word	0xffffffff
    1434:	ffffffff 	.word	0xffffffff
    1438:	ffffffff 	.word	0xffffffff
    143c:	ffffffff 	.word	0xffffffff
    1440:	ffffffff 	.word	0xffffffff
    1444:	ffffffff 	.word	0xffffffff
    1448:	ffffffff 	.word	0xffffffff
    144c:	ffffffff 	.word	0xffffffff
    1450:	ffffffff 	.word	0xffffffff
    1454:	ffffffff 	.word	0xffffffff
    1458:	ffffffff 	.word	0xffffffff
    145c:	ffffffff 	.word	0xffffffff
    1460:	ffffffff 	.word	0xffffffff
    1464:	ffffffff 	.word	0xffffffff
    1468:	ffffffff 	.word	0xffffffff
    146c:	ffffffff 	.word	0xffffffff
    1470:	ffffffff 	.word	0xffffffff
    1474:	ffffffff 	.word	0xffffffff
    1478:	ffffffff 	.word	0xffffffff
    147c:	ffffffff 	.word	0xffffffff
    1480:	ffffffff 	.word	0xffffffff
    1484:	ffffffff 	.word	0xffffffff
    1488:	ffffffff 	.word	0xffffffff
    148c:	ffffffff 	.word	0xffffffff
    1490:	ffffffff 	.word	0xffffffff
    1494:	ffffffff 	.word	0xffffffff
    1498:	ffffffff 	.word	0xffffffff
    149c:	ffffffff 	.word	0xffffffff
    14a0:	ffffffff 	.word	0xffffffff
    14a4:	ffffffff 	.word	0xffffffff
    14a8:	ffffffff 	.word	0xffffffff
    14ac:	ffffffff 	.word	0xffffffff
    14b0:	ffffffff 	.word	0xffffffff
    14b4:	ffffffff 	.word	0xffffffff
    14b8:	ffffffff 	.word	0xffffffff
    14bc:	ffffffff 	.word	0xffffffff
    14c0:	ffffffff 	.word	0xffffffff
    14c4:	ffffffff 	.word	0xffffffff
    14c8:	ffffffff 	.word	0xffffffff
    14cc:	ffffffff 	.word	0xffffffff
    14d0:	ffffffff 	.word	0xffffffff
    14d4:	ffffffff 	.word	0xffffffff
    14d8:	ffffffff 	.word	0xffffffff
    14dc:	ffffffff 	.word	0xffffffff
    14e0:	ffffffff 	.word	0xffffffff
    14e4:	ffffffff 	.word	0xffffffff
    14e8:	ffffffff 	.word	0xffffffff
    14ec:	ffffffff 	.word	0xffffffff
    14f0:	ffffffff 	.word	0xffffffff
    14f4:	ffffffff 	.word	0xffffffff
    14f8:	ffffffff 	.word	0xffffffff
    14fc:	ffffffff 	.word	0xffffffff
    1500:	ffffffff 	.word	0xffffffff
    1504:	ffffffff 	.word	0xffffffff
    1508:	ffffffff 	.word	0xffffffff
    150c:	ffffffff 	.word	0xffffffff
    1510:	ffffffff 	.word	0xffffffff
    1514:	ffffffff 	.word	0xffffffff
    1518:	ffffffff 	.word	0xffffffff
    151c:	ffffffff 	.word	0xffffffff
    1520:	ffffffff 	.word	0xffffffff
    1524:	ffffffff 	.word	0xffffffff
    1528:	ffffffff 	.word	0xffffffff
    152c:	ffffffff 	.word	0xffffffff
    1530:	ffffffff 	.word	0xffffffff
    1534:	ffffffff 	.word	0xffffffff
    1538:	ffffffff 	.word	0xffffffff
    153c:	ffffffff 	.word	0xffffffff
    1540:	ffffffff 	.word	0xffffffff
    1544:	ffffffff 	.word	0xffffffff
    1548:	ffffffff 	.word	0xffffffff
    154c:	ffffffff 	.word	0xffffffff
    1550:	ffffffff 	.word	0xffffffff
    1554:	ffffffff 	.word	0xffffffff
    1558:	ffffffff 	.word	0xffffffff
    155c:	ffffffff 	.word	0xffffffff
    1560:	ffffffff 	.word	0xffffffff
    1564:	ffffffff 	.word	0xffffffff
    1568:	ffffffff 	.word	0xffffffff
    156c:	ffffffff 	.word	0xffffffff
    1570:	ffffffff 	.word	0xffffffff
    1574:	ffffffff 	.word	0xffffffff
    1578:	ffffffff 	.word	0xffffffff
    157c:	ffffffff 	.word	0xffffffff
    1580:	ffffffff 	.word	0xffffffff
    1584:	ffffffff 	.word	0xffffffff
    1588:	ffffffff 	.word	0xffffffff
    158c:	ffffffff 	.word	0xffffffff
    1590:	ffffffff 	.word	0xffffffff
    1594:	ffffffff 	.word	0xffffffff
    1598:	ffffffff 	.word	0xffffffff
    159c:	ffffffff 	.word	0xffffffff
    15a0:	ffffffff 	.word	0xffffffff
    15a4:	ffffffff 	.word	0xffffffff
    15a8:	ffffffff 	.word	0xffffffff
    15ac:	ffffffff 	.word	0xffffffff
    15b0:	ffffffff 	.word	0xffffffff
    15b4:	ffffffff 	.word	0xffffffff
    15b8:	ffffffff 	.word	0xffffffff
    15bc:	ffffffff 	.word	0xffffffff
    15c0:	ffffffff 	.word	0xffffffff
    15c4:	ffffffff 	.word	0xffffffff
    15c8:	ffffffff 	.word	0xffffffff
    15cc:	ffffffff 	.word	0xffffffff
    15d0:	ffffffff 	.word	0xffffffff
    15d4:	ffffffff 	.word	0xffffffff
    15d8:	ffffffff 	.word	0xffffffff
    15dc:	ffffffff 	.word	0xffffffff
    15e0:	ffffffff 	.word	0xffffffff
    15e4:	ffffffff 	.word	0xffffffff
    15e8:	ffffffff 	.word	0xffffffff
    15ec:	ffffffff 	.word	0xffffffff
    15f0:	ffffffff 	.word	0xffffffff
    15f4:	ffffffff 	.word	0xffffffff
    15f8:	ffffffff 	.word	0xffffffff
    15fc:	ffffffff 	.word	0xffffffff
    1600:	ffffffff 	.word	0xffffffff
    1604:	ffffffff 	.word	0xffffffff
    1608:	ffffffff 	.word	0xffffffff
    160c:	ffffffff 	.word	0xffffffff
    1610:	ffffffff 	.word	0xffffffff
    1614:	ffffffff 	.word	0xffffffff
    1618:	ffffffff 	.word	0xffffffff
    161c:	ffffffff 	.word	0xffffffff
    1620:	ffffffff 	.word	0xffffffff
    1624:	ffffffff 	.word	0xffffffff
    1628:	ffffffff 	.word	0xffffffff
    162c:	ffffffff 	.word	0xffffffff
    1630:	ffffffff 	.word	0xffffffff
    1634:	ffffffff 	.word	0xffffffff
    1638:	ffffffff 	.word	0xffffffff
    163c:	ffffffff 	.word	0xffffffff
    1640:	ffffffff 	.word	0xffffffff
    1644:	ffffffff 	.word	0xffffffff
    1648:	ffffffff 	.word	0xffffffff
    164c:	ffffffff 	.word	0xffffffff
    1650:	ffffffff 	.word	0xffffffff
    1654:	ffffffff 	.word	0xffffffff
    1658:	ffffffff 	.word	0xffffffff
    165c:	ffffffff 	.word	0xffffffff
    1660:	ffffffff 	.word	0xffffffff
    1664:	ffffffff 	.word	0xffffffff
    1668:	ffffffff 	.word	0xffffffff
    166c:	ffffffff 	.word	0xffffffff
    1670:	ffffffff 	.word	0xffffffff
    1674:	ffffffff 	.word	0xffffffff
    1678:	ffffffff 	.word	0xffffffff
    167c:	ffffffff 	.word	0xffffffff
    1680:	ffffffff 	.word	0xffffffff
    1684:	ffffffff 	.word	0xffffffff
    1688:	ffffffff 	.word	0xffffffff
    168c:	ffffffff 	.word	0xffffffff
    1690:	ffffffff 	.word	0xffffffff
    1694:	ffffffff 	.word	0xffffffff
    1698:	ffffffff 	.word	0xffffffff
    169c:	ffffffff 	.word	0xffffffff
    16a0:	ffffffff 	.word	0xffffffff
    16a4:	ffffffff 	.word	0xffffffff
    16a8:	ffffffff 	.word	0xffffffff
    16ac:	ffffffff 	.word	0xffffffff
    16b0:	ffffffff 	.word	0xffffffff
    16b4:	ffffffff 	.word	0xffffffff
    16b8:	ffffffff 	.word	0xffffffff
    16bc:	ffffffff 	.word	0xffffffff
    16c0:	ffffffff 	.word	0xffffffff
    16c4:	ffffffff 	.word	0xffffffff
    16c8:	ffffffff 	.word	0xffffffff
    16cc:	ffffffff 	.word	0xffffffff
    16d0:	ffffffff 	.word	0xffffffff
    16d4:	ffffffff 	.word	0xffffffff
    16d8:	ffffffff 	.word	0xffffffff
    16dc:	ffffffff 	.word	0xffffffff
    16e0:	ffffffff 	.word	0xffffffff
    16e4:	ffffffff 	.word	0xffffffff
    16e8:	ffffffff 	.word	0xffffffff
    16ec:	ffffffff 	.word	0xffffffff
    16f0:	ffffffff 	.word	0xffffffff
    16f4:	ffffffff 	.word	0xffffffff
    16f8:	ffffffff 	.word	0xffffffff
    16fc:	ffffffff 	.word	0xffffffff
    1700:	ffffffff 	.word	0xffffffff
    1704:	ffffffff 	.word	0xffffffff
    1708:	ffffffff 	.word	0xffffffff
    170c:	ffffffff 	.word	0xffffffff
    1710:	ffffffff 	.word	0xffffffff
    1714:	ffffffff 	.word	0xffffffff
    1718:	ffffffff 	.word	0xffffffff
    171c:	ffffffff 	.word	0xffffffff
    1720:	ffffffff 	.word	0xffffffff
    1724:	ffffffff 	.word	0xffffffff
    1728:	ffffffff 	.word	0xffffffff
    172c:	ffffffff 	.word	0xffffffff
    1730:	ffffffff 	.word	0xffffffff
    1734:	ffffffff 	.word	0xffffffff
    1738:	ffffffff 	.word	0xffffffff
    173c:	ffffffff 	.word	0xffffffff
    1740:	ffffffff 	.word	0xffffffff
    1744:	ffffffff 	.word	0xffffffff
    1748:	ffffffff 	.word	0xffffffff
    174c:	ffffffff 	.word	0xffffffff
    1750:	ffffffff 	.word	0xffffffff
    1754:	ffffffff 	.word	0xffffffff
    1758:	ffffffff 	.word	0xffffffff
    175c:	ffffffff 	.word	0xffffffff
    1760:	ffffffff 	.word	0xffffffff
    1764:	ffffffff 	.word	0xffffffff
    1768:	ffffffff 	.word	0xffffffff
    176c:	ffffffff 	.word	0xffffffff
    1770:	ffffffff 	.word	0xffffffff
    1774:	ffffffff 	.word	0xffffffff
    1778:	ffffffff 	.word	0xffffffff
    177c:	ffffffff 	.word	0xffffffff
    1780:	ffffffff 	.word	0xffffffff
    1784:	ffffffff 	.word	0xffffffff
    1788:	ffffffff 	.word	0xffffffff
    178c:	ffffffff 	.word	0xffffffff
    1790:	ffffffff 	.word	0xffffffff
    1794:	ffffffff 	.word	0xffffffff
    1798:	ffffffff 	.word	0xffffffff
    179c:	ffffffff 	.word	0xffffffff
    17a0:	ffffffff 	.word	0xffffffff
    17a4:	ffffffff 	.word	0xffffffff
    17a8:	ffffffff 	.word	0xffffffff
    17ac:	ffffffff 	.word	0xffffffff
    17b0:	ffffffff 	.word	0xffffffff
    17b4:	ffffffff 	.word	0xffffffff
    17b8:	ffffffff 	.word	0xffffffff
    17bc:	ffffffff 	.word	0xffffffff
    17c0:	ffffffff 	.word	0xffffffff
    17c4:	ffffffff 	.word	0xffffffff
    17c8:	ffffffff 	.word	0xffffffff
    17cc:	ffffffff 	.word	0xffffffff
    17d0:	ffffffff 	.word	0xffffffff
    17d4:	ffffffff 	.word	0xffffffff
    17d8:	ffffffff 	.word	0xffffffff
    17dc:	ffffffff 	.word	0xffffffff
    17e0:	ffffffff 	.word	0xffffffff
    17e4:	ffffffff 	.word	0xffffffff
    17e8:	ffffffff 	.word	0xffffffff
    17ec:	ffffffff 	.word	0xffffffff
    17f0:	ffffffff 	.word	0xffffffff
    17f4:	ffffffff 	.word	0xffffffff
    17f8:	ffffffff 	.word	0xffffffff
    17fc:	ffffffff 	.word	0xffffffff
    1800:	ffffffff 	.word	0xffffffff
    1804:	ffffffff 	.word	0xffffffff
    1808:	ffffffff 	.word	0xffffffff
    180c:	ffffffff 	.word	0xffffffff
    1810:	ffffffff 	.word	0xffffffff
    1814:	ffffffff 	.word	0xffffffff
    1818:	ffffffff 	.word	0xffffffff
    181c:	ffffffff 	.word	0xffffffff
    1820:	ffffffff 	.word	0xffffffff
    1824:	ffffffff 	.word	0xffffffff
    1828:	ffffffff 	.word	0xffffffff
    182c:	ffffffff 	.word	0xffffffff
    1830:	ffffffff 	.word	0xffffffff
    1834:	ffffffff 	.word	0xffffffff
    1838:	ffffffff 	.word	0xffffffff
    183c:	ffffffff 	.word	0xffffffff
    1840:	ffffffff 	.word	0xffffffff
    1844:	ffffffff 	.word	0xffffffff
    1848:	ffffffff 	.word	0xffffffff
    184c:	ffffffff 	.word	0xffffffff
    1850:	ffffffff 	.word	0xffffffff
    1854:	ffffffff 	.word	0xffffffff
    1858:	ffffffff 	.word	0xffffffff
    185c:	ffffffff 	.word	0xffffffff
    1860:	ffffffff 	.word	0xffffffff
    1864:	ffffffff 	.word	0xffffffff
    1868:	ffffffff 	.word	0xffffffff
    186c:	ffffffff 	.word	0xffffffff
    1870:	ffffffff 	.word	0xffffffff
    1874:	ffffffff 	.word	0xffffffff
    1878:	ffffffff 	.word	0xffffffff
    187c:	ffffffff 	.word	0xffffffff
    1880:	ffffffff 	.word	0xffffffff
    1884:	ffffffff 	.word	0xffffffff
    1888:	ffffffff 	.word	0xffffffff
    188c:	ffffffff 	.word	0xffffffff
    1890:	ffffffff 	.word	0xffffffff
    1894:	ffffffff 	.word	0xffffffff
    1898:	ffffffff 	.word	0xffffffff
    189c:	ffffffff 	.word	0xffffffff
    18a0:	ffffffff 	.word	0xffffffff
    18a4:	ffffffff 	.word	0xffffffff
    18a8:	ffffffff 	.word	0xffffffff
    18ac:	ffffffff 	.word	0xffffffff
    18b0:	ffffffff 	.word	0xffffffff
    18b4:	ffffffff 	.word	0xffffffff
    18b8:	ffffffff 	.word	0xffffffff
    18bc:	ffffffff 	.word	0xffffffff
    18c0:	ffffffff 	.word	0xffffffff
    18c4:	ffffffff 	.word	0xffffffff
    18c8:	ffffffff 	.word	0xffffffff
    18cc:	ffffffff 	.word	0xffffffff
    18d0:	ffffffff 	.word	0xffffffff
    18d4:	ffffffff 	.word	0xffffffff
    18d8:	ffffffff 	.word	0xffffffff
    18dc:	ffffffff 	.word	0xffffffff
    18e0:	ffffffff 	.word	0xffffffff
    18e4:	ffffffff 	.word	0xffffffff
    18e8:	ffffffff 	.word	0xffffffff
    18ec:	ffffffff 	.word	0xffffffff
    18f0:	ffffffff 	.word	0xffffffff
    18f4:	ffffffff 	.word	0xffffffff
    18f8:	ffffffff 	.word	0xffffffff
    18fc:	ffffffff 	.word	0xffffffff
    1900:	ffffffff 	.word	0xffffffff
    1904:	ffffffff 	.word	0xffffffff
    1908:	ffffffff 	.word	0xffffffff
    190c:	ffffffff 	.word	0xffffffff
    1910:	ffffffff 	.word	0xffffffff
    1914:	ffffffff 	.word	0xffffffff
    1918:	ffffffff 	.word	0xffffffff
    191c:	ffffffff 	.word	0xffffffff
    1920:	ffffffff 	.word	0xffffffff
    1924:	ffffffff 	.word	0xffffffff
    1928:	ffffffff 	.word	0xffffffff
    192c:	ffffffff 	.word	0xffffffff
    1930:	ffffffff 	.word	0xffffffff
    1934:	ffffffff 	.word	0xffffffff
    1938:	ffffffff 	.word	0xffffffff
    193c:	ffffffff 	.word	0xffffffff
    1940:	ffffffff 	.word	0xffffffff
    1944:	ffffffff 	.word	0xffffffff
    1948:	ffffffff 	.word	0xffffffff
    194c:	ffffffff 	.word	0xffffffff
    1950:	ffffffff 	.word	0xffffffff
    1954:	ffffffff 	.word	0xffffffff
    1958:	ffffffff 	.word	0xffffffff
    195c:	ffffffff 	.word	0xffffffff
    1960:	ffffffff 	.word	0xffffffff
    1964:	ffffffff 	.word	0xffffffff
    1968:	ffffffff 	.word	0xffffffff
    196c:	ffffffff 	.word	0xffffffff
    1970:	ffffffff 	.word	0xffffffff
    1974:	ffffffff 	.word	0xffffffff
    1978:	ffffffff 	.word	0xffffffff
    197c:	ffffffff 	.word	0xffffffff
    1980:	ffffffff 	.word	0xffffffff
    1984:	ffffffff 	.word	0xffffffff
    1988:	ffffffff 	.word	0xffffffff
    198c:	ffffffff 	.word	0xffffffff
    1990:	ffffffff 	.word	0xffffffff
    1994:	ffffffff 	.word	0xffffffff
    1998:	ffffffff 	.word	0xffffffff
    199c:	ffffffff 	.word	0xffffffff
    19a0:	ffffffff 	.word	0xffffffff
    19a4:	ffffffff 	.word	0xffffffff
    19a8:	ffffffff 	.word	0xffffffff
    19ac:	ffffffff 	.word	0xffffffff
    19b0:	ffffffff 	.word	0xffffffff
    19b4:	ffffffff 	.word	0xffffffff
    19b8:	ffffffff 	.word	0xffffffff
    19bc:	ffffffff 	.word	0xffffffff
    19c0:	ffffffff 	.word	0xffffffff
    19c4:	ffffffff 	.word	0xffffffff
    19c8:	ffffffff 	.word	0xffffffff
    19cc:	ffffffff 	.word	0xffffffff
    19d0:	ffffffff 	.word	0xffffffff
    19d4:	ffffffff 	.word	0xffffffff
    19d8:	ffffffff 	.word	0xffffffff
    19dc:	ffffffff 	.word	0xffffffff
    19e0:	ffffffff 	.word	0xffffffff
    19e4:	ffffffff 	.word	0xffffffff
    19e8:	ffffffff 	.word	0xffffffff
    19ec:	ffffffff 	.word	0xffffffff
    19f0:	ffffffff 	.word	0xffffffff
    19f4:	ffffffff 	.word	0xffffffff
    19f8:	ffffffff 	.word	0xffffffff
    19fc:	ffffffff 	.word	0xffffffff
    1a00:	ffffffff 	.word	0xffffffff
    1a04:	ffffffff 	.word	0xffffffff
    1a08:	ffffffff 	.word	0xffffffff
    1a0c:	ffffffff 	.word	0xffffffff
    1a10:	ffffffff 	.word	0xffffffff
    1a14:	ffffffff 	.word	0xffffffff
    1a18:	ffffffff 	.word	0xffffffff
    1a1c:	ffffffff 	.word	0xffffffff
    1a20:	ffffffff 	.word	0xffffffff
    1a24:	ffffffff 	.word	0xffffffff
    1a28:	ffffffff 	.word	0xffffffff
    1a2c:	ffffffff 	.word	0xffffffff
    1a30:	ffffffff 	.word	0xffffffff
    1a34:	ffffffff 	.word	0xffffffff
    1a38:	ffffffff 	.word	0xffffffff
    1a3c:	ffffffff 	.word	0xffffffff
    1a40:	ffffffff 	.word	0xffffffff
    1a44:	ffffffff 	.word	0xffffffff
    1a48:	ffffffff 	.word	0xffffffff
    1a4c:	ffffffff 	.word	0xffffffff
    1a50:	ffffffff 	.word	0xffffffff
    1a54:	ffffffff 	.word	0xffffffff
    1a58:	ffffffff 	.word	0xffffffff
    1a5c:	ffffffff 	.word	0xffffffff
    1a60:	ffffffff 	.word	0xffffffff
    1a64:	ffffffff 	.word	0xffffffff
    1a68:	ffffffff 	.word	0xffffffff
    1a6c:	ffffffff 	.word	0xffffffff
    1a70:	ffffffff 	.word	0xffffffff
    1a74:	ffffffff 	.word	0xffffffff
    1a78:	ffffffff 	.word	0xffffffff
    1a7c:	ffffffff 	.word	0xffffffff
    1a80:	ffffffff 	.word	0xffffffff
    1a84:	ffffffff 	.word	0xffffffff
    1a88:	ffffffff 	.word	0xffffffff
    1a8c:	ffffffff 	.word	0xffffffff
    1a90:	ffffffff 	.word	0xffffffff
    1a94:	ffffffff 	.word	0xffffffff
    1a98:	ffffffff 	.word	0xffffffff
    1a9c:	ffffffff 	.word	0xffffffff
    1aa0:	ffffffff 	.word	0xffffffff
    1aa4:	ffffffff 	.word	0xffffffff
    1aa8:	ffffffff 	.word	0xffffffff
    1aac:	ffffffff 	.word	0xffffffff
    1ab0:	ffffffff 	.word	0xffffffff
    1ab4:	ffffffff 	.word	0xffffffff
    1ab8:	ffffffff 	.word	0xffffffff
    1abc:	ffffffff 	.word	0xffffffff
    1ac0:	ffffffff 	.word	0xffffffff
    1ac4:	ffffffff 	.word	0xffffffff
    1ac8:	ffffffff 	.word	0xffffffff
    1acc:	ffffffff 	.word	0xffffffff
    1ad0:	ffffffff 	.word	0xffffffff
    1ad4:	ffffffff 	.word	0xffffffff
    1ad8:	ffffffff 	.word	0xffffffff
    1adc:	ffffffff 	.word	0xffffffff
    1ae0:	ffffffff 	.word	0xffffffff
    1ae4:	ffffffff 	.word	0xffffffff
    1ae8:	ffffffff 	.word	0xffffffff
    1aec:	ffffffff 	.word	0xffffffff
    1af0:	ffffffff 	.word	0xffffffff
    1af4:	ffffffff 	.word	0xffffffff
    1af8:	ffffffff 	.word	0xffffffff
    1afc:	ffffffff 	.word	0xffffffff
    1b00:	ffffffff 	.word	0xffffffff
    1b04:	ffffffff 	.word	0xffffffff
    1b08:	ffffffff 	.word	0xffffffff
    1b0c:	ffffffff 	.word	0xffffffff
    1b10:	ffffffff 	.word	0xffffffff
    1b14:	ffffffff 	.word	0xffffffff
    1b18:	ffffffff 	.word	0xffffffff
    1b1c:	ffffffff 	.word	0xffffffff
    1b20:	ffffffff 	.word	0xffffffff
    1b24:	ffffffff 	.word	0xffffffff
    1b28:	ffffffff 	.word	0xffffffff
    1b2c:	ffffffff 	.word	0xffffffff
    1b30:	ffffffff 	.word	0xffffffff
    1b34:	ffffffff 	.word	0xffffffff
    1b38:	ffffffff 	.word	0xffffffff
    1b3c:	ffffffff 	.word	0xffffffff
    1b40:	ffffffff 	.word	0xffffffff
    1b44:	ffffffff 	.word	0xffffffff
    1b48:	ffffffff 	.word	0xffffffff
    1b4c:	ffffffff 	.word	0xffffffff
    1b50:	ffffffff 	.word	0xffffffff
    1b54:	ffffffff 	.word	0xffffffff
    1b58:	ffffffff 	.word	0xffffffff
    1b5c:	ffffffff 	.word	0xffffffff
    1b60:	ffffffff 	.word	0xffffffff
    1b64:	ffffffff 	.word	0xffffffff
    1b68:	ffffffff 	.word	0xffffffff
    1b6c:	ffffffff 	.word	0xffffffff
    1b70:	ffffffff 	.word	0xffffffff
    1b74:	ffffffff 	.word	0xffffffff
    1b78:	ffffffff 	.word	0xffffffff
    1b7c:	ffffffff 	.word	0xffffffff
    1b80:	ffffffff 	.word	0xffffffff
    1b84:	ffffffff 	.word	0xffffffff
    1b88:	ffffffff 	.word	0xffffffff
    1b8c:	ffffffff 	.word	0xffffffff
    1b90:	ffffffff 	.word	0xffffffff
    1b94:	ffffffff 	.word	0xffffffff
    1b98:	ffffffff 	.word	0xffffffff
    1b9c:	ffffffff 	.word	0xffffffff
    1ba0:	ffffffff 	.word	0xffffffff
    1ba4:	ffffffff 	.word	0xffffffff
    1ba8:	ffffffff 	.word	0xffffffff
    1bac:	ffffffff 	.word	0xffffffff
    1bb0:	ffffffff 	.word	0xffffffff
    1bb4:	ffffffff 	.word	0xffffffff
    1bb8:	ffffffff 	.word	0xffffffff
    1bbc:	ffffffff 	.word	0xffffffff
    1bc0:	ffffffff 	.word	0xffffffff
    1bc4:	ffffffff 	.word	0xffffffff
    1bc8:	ffffffff 	.word	0xffffffff
    1bcc:	ffffffff 	.word	0xffffffff
    1bd0:	ffffffff 	.word	0xffffffff
    1bd4:	ffffffff 	.word	0xffffffff
    1bd8:	ffffffff 	.word	0xffffffff
    1bdc:	ffffffff 	.word	0xffffffff
    1be0:	ffffffff 	.word	0xffffffff
    1be4:	ffffffff 	.word	0xffffffff
    1be8:	ffffffff 	.word	0xffffffff
    1bec:	ffffffff 	.word	0xffffffff
    1bf0:	ffffffff 	.word	0xffffffff
    1bf4:	ffffffff 	.word	0xffffffff
    1bf8:	ffffffff 	.word	0xffffffff
    1bfc:	ffffffff 	.word	0xffffffff
    1c00:	ffffffff 	.word	0xffffffff
    1c04:	ffffffff 	.word	0xffffffff
    1c08:	ffffffff 	.word	0xffffffff
    1c0c:	ffffffff 	.word	0xffffffff
    1c10:	ffffffff 	.word	0xffffffff
    1c14:	ffffffff 	.word	0xffffffff
    1c18:	ffffffff 	.word	0xffffffff
    1c1c:	ffffffff 	.word	0xffffffff
    1c20:	ffffffff 	.word	0xffffffff
    1c24:	ffffffff 	.word	0xffffffff
    1c28:	ffffffff 	.word	0xffffffff
    1c2c:	ffffffff 	.word	0xffffffff
    1c30:	ffffffff 	.word	0xffffffff
    1c34:	ffffffff 	.word	0xffffffff
    1c38:	ffffffff 	.word	0xffffffff
    1c3c:	ffffffff 	.word	0xffffffff
    1c40:	ffffffff 	.word	0xffffffff
    1c44:	ffffffff 	.word	0xffffffff
    1c48:	ffffffff 	.word	0xffffffff
    1c4c:	ffffffff 	.word	0xffffffff
    1c50:	ffffffff 	.word	0xffffffff
    1c54:	ffffffff 	.word	0xffffffff
    1c58:	ffffffff 	.word	0xffffffff
    1c5c:	ffffffff 	.word	0xffffffff
    1c60:	ffffffff 	.word	0xffffffff
    1c64:	ffffffff 	.word	0xffffffff
    1c68:	ffffffff 	.word	0xffffffff
    1c6c:	ffffffff 	.word	0xffffffff
    1c70:	ffffffff 	.word	0xffffffff
    1c74:	ffffffff 	.word	0xffffffff
    1c78:	ffffffff 	.word	0xffffffff
    1c7c:	ffffffff 	.word	0xffffffff
    1c80:	ffffffff 	.word	0xffffffff
    1c84:	ffffffff 	.word	0xffffffff
    1c88:	ffffffff 	.word	0xffffffff
    1c8c:	ffffffff 	.word	0xffffffff
    1c90:	ffffffff 	.word	0xffffffff
    1c94:	ffffffff 	.word	0xffffffff
    1c98:	ffffffff 	.word	0xffffffff
    1c9c:	ffffffff 	.word	0xffffffff
    1ca0:	ffffffff 	.word	0xffffffff
    1ca4:	ffffffff 	.word	0xffffffff
    1ca8:	ffffffff 	.word	0xffffffff
    1cac:	ffffffff 	.word	0xffffffff
    1cb0:	ffffffff 	.word	0xffffffff
    1cb4:	ffffffff 	.word	0xffffffff
    1cb8:	ffffffff 	.word	0xffffffff
    1cbc:	ffffffff 	.word	0xffffffff
    1cc0:	ffffffff 	.word	0xffffffff
    1cc4:	ffffffff 	.word	0xffffffff
    1cc8:	ffffffff 	.word	0xffffffff
    1ccc:	ffffffff 	.word	0xffffffff
    1cd0:	ffffffff 	.word	0xffffffff
    1cd4:	ffffffff 	.word	0xffffffff
    1cd8:	ffffffff 	.word	0xffffffff
    1cdc:	ffffffff 	.word	0xffffffff
    1ce0:	ffffffff 	.word	0xffffffff
    1ce4:	ffffffff 	.word	0xffffffff
    1ce8:	ffffffff 	.word	0xffffffff
    1cec:	ffffffff 	.word	0xffffffff
    1cf0:	ffffffff 	.word	0xffffffff
    1cf4:	ffffffff 	.word	0xffffffff
    1cf8:	ffffffff 	.word	0xffffffff
    1cfc:	ffffffff 	.word	0xffffffff
    1d00:	ffffffff 	.word	0xffffffff
    1d04:	ffffffff 	.word	0xffffffff
    1d08:	ffffffff 	.word	0xffffffff
    1d0c:	ffffffff 	.word	0xffffffff
    1d10:	ffffffff 	.word	0xffffffff
    1d14:	ffffffff 	.word	0xffffffff
    1d18:	ffffffff 	.word	0xffffffff
    1d1c:	ffffffff 	.word	0xffffffff
    1d20:	ffffffff 	.word	0xffffffff
    1d24:	ffffffff 	.word	0xffffffff
    1d28:	ffffffff 	.word	0xffffffff
    1d2c:	ffffffff 	.word	0xffffffff
    1d30:	ffffffff 	.word	0xffffffff
    1d34:	ffffffff 	.word	0xffffffff
    1d38:	ffffffff 	.word	0xffffffff
    1d3c:	ffffffff 	.word	0xffffffff
    1d40:	ffffffff 	.word	0xffffffff
    1d44:	ffffffff 	.word	0xffffffff
    1d48:	ffffffff 	.word	0xffffffff
    1d4c:	ffffffff 	.word	0xffffffff
    1d50:	ffffffff 	.word	0xffffffff
    1d54:	ffffffff 	.word	0xffffffff
    1d58:	ffffffff 	.word	0xffffffff
    1d5c:	ffffffff 	.word	0xffffffff
    1d60:	ffffffff 	.word	0xffffffff
    1d64:	ffffffff 	.word	0xffffffff
    1d68:	ffffffff 	.word	0xffffffff
    1d6c:	ffffffff 	.word	0xffffffff
    1d70:	ffffffff 	.word	0xffffffff
    1d74:	ffffffff 	.word	0xffffffff
    1d78:	ffffffff 	.word	0xffffffff
    1d7c:	ffffffff 	.word	0xffffffff
    1d80:	ffffffff 	.word	0xffffffff
    1d84:	ffffffff 	.word	0xffffffff
    1d88:	ffffffff 	.word	0xffffffff
    1d8c:	ffffffff 	.word	0xffffffff
    1d90:	ffffffff 	.word	0xffffffff
    1d94:	ffffffff 	.word	0xffffffff
    1d98:	ffffffff 	.word	0xffffffff
    1d9c:	ffffffff 	.word	0xffffffff
    1da0:	ffffffff 	.word	0xffffffff
    1da4:	ffffffff 	.word	0xffffffff
    1da8:	ffffffff 	.word	0xffffffff
    1dac:	ffffffff 	.word	0xffffffff
    1db0:	ffffffff 	.word	0xffffffff
    1db4:	ffffffff 	.word	0xffffffff
    1db8:	ffffffff 	.word	0xffffffff
    1dbc:	ffffffff 	.word	0xffffffff
    1dc0:	ffffffff 	.word	0xffffffff
    1dc4:	ffffffff 	.word	0xffffffff
    1dc8:	ffffffff 	.word	0xffffffff
    1dcc:	ffffffff 	.word	0xffffffff
    1dd0:	ffffffff 	.word	0xffffffff
    1dd4:	ffffffff 	.word	0xffffffff
    1dd8:	ffffffff 	.word	0xffffffff
    1ddc:	ffffffff 	.word	0xffffffff
    1de0:	ffffffff 	.word	0xffffffff
    1de4:	ffffffff 	.word	0xffffffff
    1de8:	ffffffff 	.word	0xffffffff
    1dec:	ffffffff 	.word	0xffffffff
    1df0:	ffffffff 	.word	0xffffffff
    1df4:	ffffffff 	.word	0xffffffff
    1df8:	ffffffff 	.word	0xffffffff
    1dfc:	ffffffff 	.word	0xffffffff
    1e00:	ffffffff 	.word	0xffffffff
    1e04:	ffffffff 	.word	0xffffffff
    1e08:	ffffffff 	.word	0xffffffff
    1e0c:	ffffffff 	.word	0xffffffff
    1e10:	ffffffff 	.word	0xffffffff
    1e14:	ffffffff 	.word	0xffffffff
    1e18:	ffffffff 	.word	0xffffffff
    1e1c:	ffffffff 	.word	0xffffffff
    1e20:	ffffffff 	.word	0xffffffff
    1e24:	ffffffff 	.word	0xffffffff
    1e28:	ffffffff 	.word	0xffffffff
    1e2c:	ffffffff 	.word	0xffffffff
    1e30:	ffffffff 	.word	0xffffffff
    1e34:	ffffffff 	.word	0xffffffff
    1e38:	ffffffff 	.word	0xffffffff
    1e3c:	ffffffff 	.word	0xffffffff
    1e40:	ffffffff 	.word	0xffffffff
    1e44:	ffffffff 	.word	0xffffffff
    1e48:	ffffffff 	.word	0xffffffff
    1e4c:	ffffffff 	.word	0xffffffff
    1e50:	ffffffff 	.word	0xffffffff
    1e54:	ffffffff 	.word	0xffffffff
    1e58:	ffffffff 	.word	0xffffffff
    1e5c:	ffffffff 	.word	0xffffffff
    1e60:	ffffffff 	.word	0xffffffff
    1e64:	ffffffff 	.word	0xffffffff
    1e68:	ffffffff 	.word	0xffffffff
    1e6c:	ffffffff 	.word	0xffffffff
    1e70:	ffffffff 	.word	0xffffffff
    1e74:	ffffffff 	.word	0xffffffff
    1e78:	ffffffff 	.word	0xffffffff
    1e7c:	ffffffff 	.word	0xffffffff
    1e80:	ffffffff 	.word	0xffffffff
    1e84:	ffffffff 	.word	0xffffffff
    1e88:	ffffffff 	.word	0xffffffff
    1e8c:	ffffffff 	.word	0xffffffff
    1e90:	ffffffff 	.word	0xffffffff
    1e94:	ffffffff 	.word	0xffffffff
    1e98:	ffffffff 	.word	0xffffffff
    1e9c:	ffffffff 	.word	0xffffffff
    1ea0:	ffffffff 	.word	0xffffffff
    1ea4:	ffffffff 	.word	0xffffffff
    1ea8:	ffffffff 	.word	0xffffffff
    1eac:	ffffffff 	.word	0xffffffff
    1eb0:	ffffffff 	.word	0xffffffff
    1eb4:	ffffffff 	.word	0xffffffff
    1eb8:	ffffffff 	.word	0xffffffff
    1ebc:	ffffffff 	.word	0xffffffff
    1ec0:	ffffffff 	.word	0xffffffff
    1ec4:	ffffffff 	.word	0xffffffff
    1ec8:	ffffffff 	.word	0xffffffff
    1ecc:	ffffffff 	.word	0xffffffff
    1ed0:	ffffffff 	.word	0xffffffff
    1ed4:	ffffffff 	.word	0xffffffff
    1ed8:	ffffffff 	.word	0xffffffff
    1edc:	ffffffff 	.word	0xffffffff
    1ee0:	ffffffff 	.word	0xffffffff
    1ee4:	ffffffff 	.word	0xffffffff
    1ee8:	ffffffff 	.word	0xffffffff
    1eec:	ffffffff 	.word	0xffffffff
    1ef0:	ffffffff 	.word	0xffffffff
    1ef4:	ffffffff 	.word	0xffffffff
    1ef8:	ffffffff 	.word	0xffffffff
    1efc:	ffffffff 	.word	0xffffffff
    1f00:	ffffffff 	.word	0xffffffff
    1f04:	ffffffff 	.word	0xffffffff
    1f08:	ffffffff 	.word	0xffffffff
    1f0c:	ffffffff 	.word	0xffffffff
    1f10:	ffffffff 	.word	0xffffffff
    1f14:	ffffffff 	.word	0xffffffff
    1f18:	ffffffff 	.word	0xffffffff
    1f1c:	ffffffff 	.word	0xffffffff
    1f20:	ffffffff 	.word	0xffffffff
    1f24:	ffffffff 	.word	0xffffffff
    1f28:	ffffffff 	.word	0xffffffff
    1f2c:	ffffffff 	.word	0xffffffff
    1f30:	ffffffff 	.word	0xffffffff
    1f34:	ffffffff 	.word	0xffffffff
    1f38:	ffffffff 	.word	0xffffffff
    1f3c:	ffffffff 	.word	0xffffffff
    1f40:	ffffffff 	.word	0xffffffff
    1f44:	ffffffff 	.word	0xffffffff
    1f48:	ffffffff 	.word	0xffffffff
    1f4c:	ffffffff 	.word	0xffffffff
    1f50:	ffffffff 	.word	0xffffffff
    1f54:	ffffffff 	.word	0xffffffff
    1f58:	ffffffff 	.word	0xffffffff
    1f5c:	ffffffff 	.word	0xffffffff
    1f60:	ffffffff 	.word	0xffffffff
    1f64:	ffffffff 	.word	0xffffffff
    1f68:	ffffffff 	.word	0xffffffff
    1f6c:	ffffffff 	.word	0xffffffff
    1f70:	ffffffff 	.word	0xffffffff
    1f74:	ffffffff 	.word	0xffffffff
    1f78:	ffffffff 	.word	0xffffffff
    1f7c:	ffffffff 	.word	0xffffffff
    1f80:	ffffffff 	.word	0xffffffff
    1f84:	ffffffff 	.word	0xffffffff
    1f88:	ffffffff 	.word	0xffffffff
    1f8c:	ffffffff 	.word	0xffffffff
    1f90:	ffffffff 	.word	0xffffffff
    1f94:	ffffffff 	.word	0xffffffff
    1f98:	ffffffff 	.word	0xffffffff
    1f9c:	ffffffff 	.word	0xffffffff
    1fa0:	ffffffff 	.word	0xffffffff
    1fa4:	ffffffff 	.word	0xffffffff
    1fa8:	ffffffff 	.word	0xffffffff
    1fac:	ffffffff 	.word	0xffffffff
    1fb0:	ffffffff 	.word	0xffffffff
    1fb4:	ffffffff 	.word	0xffffffff
    1fb8:	ffffffff 	.word	0xffffffff
    1fbc:	ffffffff 	.word	0xffffffff
    1fc0:	ffffffff 	.word	0xffffffff
    1fc4:	ffffffff 	.word	0xffffffff
    1fc8:	ffffffff 	.word	0xffffffff
    1fcc:	ffffffff 	.word	0xffffffff
    1fd0:	ffffffff 	.word	0xffffffff
    1fd4:	ffffffff 	.word	0xffffffff
    1fd8:	ffffffff 	.word	0xffffffff
    1fdc:	ffffffff 	.word	0xffffffff
    1fe0:	ffffffff 	.word	0xffffffff
    1fe4:	ffffffff 	.word	0xffffffff
    1fe8:	ffffffff 	.word	0xffffffff
    1fec:	ffffffff 	.word	0xffffffff
    1ff0:	ffffffff 	.word	0xffffffff
    1ff4:	ffffffff 	.word	0xffffffff
    1ff8:	ffffffff 	.word	0xffffffff
    1ffc:	ffffffff 	.word	0xffffffff
    2000:	ffffffff 	.word	0xffffffff
    2004:	ffffffff 	.word	0xffffffff
    2008:	ffffffff 	.word	0xffffffff
    200c:	ffffffff 	.word	0xffffffff
    2010:	ffffffff 	.word	0xffffffff
    2014:	ffffffff 	.word	0xffffffff
    2018:	ffffffff 	.word	0xffffffff
    201c:	ffffffff 	.word	0xffffffff
    2020:	ffffffff 	.word	0xffffffff
    2024:	ffffffff 	.word	0xffffffff
    2028:	ffffffff 	.word	0xffffffff
    202c:	ffffffff 	.word	0xffffffff
    2030:	ffffffff 	.word	0xffffffff
    2034:	ffffffff 	.word	0xffffffff
    2038:	ffffffff 	.word	0xffffffff
    203c:	ffffffff 	.word	0xffffffff
    2040:	ffffffff 	.word	0xffffffff
    2044:	ffffffff 	.word	0xffffffff
    2048:	ffffffff 	.word	0xffffffff
    204c:	ffffffff 	.word	0xffffffff
    2050:	ffffffff 	.word	0xffffffff
    2054:	ffffffff 	.word	0xffffffff
    2058:	ffffffff 	.word	0xffffffff
    205c:	ffffffff 	.word	0xffffffff
    2060:	ffffffff 	.word	0xffffffff
    2064:	ffffffff 	.word	0xffffffff
    2068:	ffffffff 	.word	0xffffffff
    206c:	ffffffff 	.word	0xffffffff
    2070:	ffffffff 	.word	0xffffffff
    2074:	ffffffff 	.word	0xffffffff
    2078:	ffffffff 	.word	0xffffffff
    207c:	ffffffff 	.word	0xffffffff
    2080:	ffffffff 	.word	0xffffffff
    2084:	ffffffff 	.word	0xffffffff
    2088:	ffffffff 	.word	0xffffffff
    208c:	ffffffff 	.word	0xffffffff
    2090:	ffffffff 	.word	0xffffffff
    2094:	ffffffff 	.word	0xffffffff
    2098:	ffffffff 	.word	0xffffffff
    209c:	ffffffff 	.word	0xffffffff
    20a0:	ffffffff 	.word	0xffffffff
    20a4:	ffffffff 	.word	0xffffffff
    20a8:	ffffffff 	.word	0xffffffff
    20ac:	ffffffff 	.word	0xffffffff
    20b0:	ffffffff 	.word	0xffffffff
    20b4:	ffffffff 	.word	0xffffffff
    20b8:	ffffffff 	.word	0xffffffff
    20bc:	ffffffff 	.word	0xffffffff
    20c0:	ffffffff 	.word	0xffffffff
    20c4:	ffffffff 	.word	0xffffffff
    20c8:	ffffffff 	.word	0xffffffff
    20cc:	ffffffff 	.word	0xffffffff
    20d0:	ffffffff 	.word	0xffffffff
    20d4:	ffffffff 	.word	0xffffffff
    20d8:	ffffffff 	.word	0xffffffff
    20dc:	ffffffff 	.word	0xffffffff
    20e0:	ffffffff 	.word	0xffffffff
    20e4:	ffffffff 	.word	0xffffffff
    20e8:	ffffffff 	.word	0xffffffff
    20ec:	ffffffff 	.word	0xffffffff
    20f0:	ffffffff 	.word	0xffffffff
    20f4:	ffffffff 	.word	0xffffffff
    20f8:	ffffffff 	.word	0xffffffff
    20fc:	ffffffff 	.word	0xffffffff
    2100:	ffffffff 	.word	0xffffffff
    2104:	ffffffff 	.word	0xffffffff
    2108:	ffffffff 	.word	0xffffffff
    210c:	ffffffff 	.word	0xffffffff
    2110:	ffffffff 	.word	0xffffffff
    2114:	ffffffff 	.word	0xffffffff
    2118:	ffffffff 	.word	0xffffffff
    211c:	ffffffff 	.word	0xffffffff
    2120:	ffffffff 	.word	0xffffffff
    2124:	ffffffff 	.word	0xffffffff
    2128:	ffffffff 	.word	0xffffffff
    212c:	ffffffff 	.word	0xffffffff
    2130:	ffffffff 	.word	0xffffffff
    2134:	ffffffff 	.word	0xffffffff
    2138:	ffffffff 	.word	0xffffffff
    213c:	ffffffff 	.word	0xffffffff
    2140:	ffffffff 	.word	0xffffffff
    2144:	ffffffff 	.word	0xffffffff
    2148:	ffffffff 	.word	0xffffffff
    214c:	ffffffff 	.word	0xffffffff
    2150:	ffffffff 	.word	0xffffffff
    2154:	ffffffff 	.word	0xffffffff
    2158:	ffffffff 	.word	0xffffffff
    215c:	ffffffff 	.word	0xffffffff
    2160:	ffffffff 	.word	0xffffffff
    2164:	ffffffff 	.word	0xffffffff
    2168:	ffffffff 	.word	0xffffffff
    216c:	ffffffff 	.word	0xffffffff
    2170:	ffffffff 	.word	0xffffffff
    2174:	ffffffff 	.word	0xffffffff
    2178:	ffffffff 	.word	0xffffffff
    217c:	ffffffff 	.word	0xffffffff
    2180:	ffffffff 	.word	0xffffffff
    2184:	ffffffff 	.word	0xffffffff
    2188:	ffffffff 	.word	0xffffffff
    218c:	ffffffff 	.word	0xffffffff
    2190:	ffffffff 	.word	0xffffffff
    2194:	ffffffff 	.word	0xffffffff
    2198:	ffffffff 	.word	0xffffffff
    219c:	ffffffff 	.word	0xffffffff
    21a0:	ffffffff 	.word	0xffffffff
    21a4:	ffffffff 	.word	0xffffffff
    21a8:	ffffffff 	.word	0xffffffff
    21ac:	ffffffff 	.word	0xffffffff
    21b0:	ffffffff 	.word	0xffffffff
    21b4:	ffffffff 	.word	0xffffffff
    21b8:	ffffffff 	.word	0xffffffff
    21bc:	ffffffff 	.word	0xffffffff
    21c0:	ffffffff 	.word	0xffffffff
    21c4:	ffffffff 	.word	0xffffffff
    21c8:	ffffffff 	.word	0xffffffff
    21cc:	ffffffff 	.word	0xffffffff
    21d0:	ffffffff 	.word	0xffffffff
    21d4:	ffffffff 	.word	0xffffffff
    21d8:	ffffffff 	.word	0xffffffff
    21dc:	ffffffff 	.word	0xffffffff
    21e0:	ffffffff 	.word	0xffffffff
    21e4:	ffffffff 	.word	0xffffffff
    21e8:	ffffffff 	.word	0xffffffff
    21ec:	ffffffff 	.word	0xffffffff
    21f0:	ffffffff 	.word	0xffffffff
    21f4:	ffffffff 	.word	0xffffffff
    21f8:	ffffffff 	.word	0xffffffff
    21fc:	ffffffff 	.word	0xffffffff
    2200:	ffffffff 	.word	0xffffffff
    2204:	ffffffff 	.word	0xffffffff
    2208:	ffffffff 	.word	0xffffffff
    220c:	ffffffff 	.word	0xffffffff
    2210:	ffffffff 	.word	0xffffffff
    2214:	ffffffff 	.word	0xffffffff
    2218:	ffffffff 	.word	0xffffffff
    221c:	ffffffff 	.word	0xffffffff
    2220:	ffffffff 	.word	0xffffffff
    2224:	ffffffff 	.word	0xffffffff
    2228:	ffffffff 	.word	0xffffffff
    222c:	ffffffff 	.word	0xffffffff
    2230:	ffffffff 	.word	0xffffffff
    2234:	ffffffff 	.word	0xffffffff
    2238:	ffffffff 	.word	0xffffffff
    223c:	ffffffff 	.word	0xffffffff
    2240:	ffffffff 	.word	0xffffffff
    2244:	ffffffff 	.word	0xffffffff
    2248:	ffffffff 	.word	0xffffffff
    224c:	ffffffff 	.word	0xffffffff
    2250:	ffffffff 	.word	0xffffffff
    2254:	ffffffff 	.word	0xffffffff
    2258:	ffffffff 	.word	0xffffffff
    225c:	ffffffff 	.word	0xffffffff
    2260:	ffffffff 	.word	0xffffffff
    2264:	ffffffff 	.word	0xffffffff
    2268:	ffffffff 	.word	0xffffffff
    226c:	ffffffff 	.word	0xffffffff
    2270:	ffffffff 	.word	0xffffffff
    2274:	ffffffff 	.word	0xffffffff
    2278:	ffffffff 	.word	0xffffffff
    227c:	ffffffff 	.word	0xffffffff
    2280:	ffffffff 	.word	0xffffffff
    2284:	ffffffff 	.word	0xffffffff
    2288:	ffffffff 	.word	0xffffffff
    228c:	ffffffff 	.word	0xffffffff
    2290:	ffffffff 	.word	0xffffffff
    2294:	ffffffff 	.word	0xffffffff
    2298:	ffffffff 	.word	0xffffffff
    229c:	ffffffff 	.word	0xffffffff
    22a0:	ffffffff 	.word	0xffffffff
    22a4:	ffffffff 	.word	0xffffffff
    22a8:	ffffffff 	.word	0xffffffff
    22ac:	ffffffff 	.word	0xffffffff
    22b0:	ffffffff 	.word	0xffffffff
    22b4:	ffffffff 	.word	0xffffffff
    22b8:	ffffffff 	.word	0xffffffff
    22bc:	ffffffff 	.word	0xffffffff
    22c0:	ffffffff 	.word	0xffffffff
    22c4:	ffffffff 	.word	0xffffffff
    22c8:	ffffffff 	.word	0xffffffff
    22cc:	ffffffff 	.word	0xffffffff
    22d0:	ffffffff 	.word	0xffffffff
    22d4:	ffffffff 	.word	0xffffffff
    22d8:	ffffffff 	.word	0xffffffff
    22dc:	ffffffff 	.word	0xffffffff
    22e0:	ffffffff 	.word	0xffffffff
    22e4:	ffffffff 	.word	0xffffffff
    22e8:	ffffffff 	.word	0xffffffff
    22ec:	ffffffff 	.word	0xffffffff
    22f0:	ffffffff 	.word	0xffffffff
    22f4:	ffffffff 	.word	0xffffffff
    22f8:	ffffffff 	.word	0xffffffff
    22fc:	ffffffff 	.word	0xffffffff
    2300:	ffffffff 	.word	0xffffffff
    2304:	ffffffff 	.word	0xffffffff
    2308:	ffffffff 	.word	0xffffffff
    230c:	ffffffff 	.word	0xffffffff
    2310:	ffffffff 	.word	0xffffffff
    2314:	ffffffff 	.word	0xffffffff
    2318:	ffffffff 	.word	0xffffffff
    231c:	ffffffff 	.word	0xffffffff
    2320:	ffffffff 	.word	0xffffffff
    2324:	ffffffff 	.word	0xffffffff
    2328:	ffffffff 	.word	0xffffffff
    232c:	ffffffff 	.word	0xffffffff
    2330:	ffffffff 	.word	0xffffffff
    2334:	ffffffff 	.word	0xffffffff
    2338:	ffffffff 	.word	0xffffffff
    233c:	ffffffff 	.word	0xffffffff
    2340:	ffffffff 	.word	0xffffffff
    2344:	ffffffff 	.word	0xffffffff
    2348:	ffffffff 	.word	0xffffffff
    234c:	ffffffff 	.word	0xffffffff
    2350:	ffffffff 	.word	0xffffffff
    2354:	ffffffff 	.word	0xffffffff
    2358:	ffffffff 	.word	0xffffffff
    235c:	ffffffff 	.word	0xffffffff
    2360:	ffffffff 	.word	0xffffffff
    2364:	ffffffff 	.word	0xffffffff
    2368:	ffffffff 	.word	0xffffffff
    236c:	ffffffff 	.word	0xffffffff
    2370:	ffffffff 	.word	0xffffffff
    2374:	ffffffff 	.word	0xffffffff
    2378:	ffffffff 	.word	0xffffffff
    237c:	ffffffff 	.word	0xffffffff
    2380:	ffffffff 	.word	0xffffffff
    2384:	ffffffff 	.word	0xffffffff
    2388:	ffffffff 	.word	0xffffffff
    238c:	ffffffff 	.word	0xffffffff
    2390:	ffffffff 	.word	0xffffffff
    2394:	ffffffff 	.word	0xffffffff
    2398:	ffffffff 	.word	0xffffffff
    239c:	ffffffff 	.word	0xffffffff
    23a0:	ffffffff 	.word	0xffffffff
    23a4:	ffffffff 	.word	0xffffffff
    23a8:	ffffffff 	.word	0xffffffff
    23ac:	ffffffff 	.word	0xffffffff
    23b0:	ffffffff 	.word	0xffffffff
    23b4:	ffffffff 	.word	0xffffffff
    23b8:	ffffffff 	.word	0xffffffff
    23bc:	ffffffff 	.word	0xffffffff
    23c0:	ffffffff 	.word	0xffffffff
    23c4:	ffffffff 	.word	0xffffffff
    23c8:	ffffffff 	.word	0xffffffff
    23cc:	ffffffff 	.word	0xffffffff
    23d0:	ffffffff 	.word	0xffffffff
    23d4:	ffffffff 	.word	0xffffffff
    23d8:	ffffffff 	.word	0xffffffff
    23dc:	ffffffff 	.word	0xffffffff
    23e0:	ffffffff 	.word	0xffffffff
    23e4:	ffffffff 	.word	0xffffffff
    23e8:	ffffffff 	.word	0xffffffff
    23ec:	ffffffff 	.word	0xffffffff
    23f0:	ffffffff 	.word	0xffffffff
    23f4:	ffffffff 	.word	0xffffffff
    23f8:	ffffffff 	.word	0xffffffff
    23fc:	ffffffff 	.word	0xffffffff
    2400:	ffffffff 	.word	0xffffffff
    2404:	ffffffff 	.word	0xffffffff
    2408:	ffffffff 	.word	0xffffffff
    240c:	ffffffff 	.word	0xffffffff
    2410:	ffffffff 	.word	0xffffffff
    2414:	ffffffff 	.word	0xffffffff
    2418:	ffffffff 	.word	0xffffffff
    241c:	ffffffff 	.word	0xffffffff
    2420:	ffffffff 	.word	0xffffffff
    2424:	ffffffff 	.word	0xffffffff
    2428:	ffffffff 	.word	0xffffffff
    242c:	ffffffff 	.word	0xffffffff
    2430:	ffffffff 	.word	0xffffffff
    2434:	ffffffff 	.word	0xffffffff
    2438:	ffffffff 	.word	0xffffffff
    243c:	ffffffff 	.word	0xffffffff
    2440:	ffffffff 	.word	0xffffffff
    2444:	ffffffff 	.word	0xffffffff
    2448:	ffffffff 	.word	0xffffffff
    244c:	ffffffff 	.word	0xffffffff
    2450:	ffffffff 	.word	0xffffffff
    2454:	ffffffff 	.word	0xffffffff
    2458:	ffffffff 	.word	0xffffffff
    245c:	ffffffff 	.word	0xffffffff
    2460:	ffffffff 	.word	0xffffffff
    2464:	ffffffff 	.word	0xffffffff
    2468:	ffffffff 	.word	0xffffffff
    246c:	ffffffff 	.word	0xffffffff
    2470:	ffffffff 	.word	0xffffffff
    2474:	ffffffff 	.word	0xffffffff
    2478:	ffffffff 	.word	0xffffffff
    247c:	ffffffff 	.word	0xffffffff
    2480:	ffffffff 	.word	0xffffffff
    2484:	ffffffff 	.word	0xffffffff
    2488:	ffffffff 	.word	0xffffffff
    248c:	ffffffff 	.word	0xffffffff
    2490:	ffffffff 	.word	0xffffffff
    2494:	ffffffff 	.word	0xffffffff
    2498:	ffffffff 	.word	0xffffffff
    249c:	ffffffff 	.word	0xffffffff
    24a0:	ffffffff 	.word	0xffffffff
    24a4:	ffffffff 	.word	0xffffffff
    24a8:	ffffffff 	.word	0xffffffff
    24ac:	ffffffff 	.word	0xffffffff
    24b0:	ffffffff 	.word	0xffffffff
    24b4:	ffffffff 	.word	0xffffffff
    24b8:	ffffffff 	.word	0xffffffff
    24bc:	ffffffff 	.word	0xffffffff
    24c0:	ffffffff 	.word	0xffffffff
    24c4:	ffffffff 	.word	0xffffffff
    24c8:	ffffffff 	.word	0xffffffff
    24cc:	ffffffff 	.word	0xffffffff
    24d0:	ffffffff 	.word	0xffffffff
    24d4:	ffffffff 	.word	0xffffffff
    24d8:	ffffffff 	.word	0xffffffff
    24dc:	ffffffff 	.word	0xffffffff
    24e0:	ffffffff 	.word	0xffffffff
    24e4:	ffffffff 	.word	0xffffffff
    24e8:	ffffffff 	.word	0xffffffff
    24ec:	ffffffff 	.word	0xffffffff
    24f0:	ffffffff 	.word	0xffffffff
    24f4:	ffffffff 	.word	0xffffffff
    24f8:	ffffffff 	.word	0xffffffff
    24fc:	ffffffff 	.word	0xffffffff
    2500:	ffffffff 	.word	0xffffffff
    2504:	ffffffff 	.word	0xffffffff
    2508:	ffffffff 	.word	0xffffffff
    250c:	ffffffff 	.word	0xffffffff
    2510:	ffffffff 	.word	0xffffffff
    2514:	ffffffff 	.word	0xffffffff
    2518:	ffffffff 	.word	0xffffffff
    251c:	ffffffff 	.word	0xffffffff
    2520:	ffffffff 	.word	0xffffffff
    2524:	ffffffff 	.word	0xffffffff
    2528:	ffffffff 	.word	0xffffffff
    252c:	ffffffff 	.word	0xffffffff
    2530:	ffffffff 	.word	0xffffffff
    2534:	ffffffff 	.word	0xffffffff
    2538:	ffffffff 	.word	0xffffffff
    253c:	ffffffff 	.word	0xffffffff
    2540:	ffffffff 	.word	0xffffffff
    2544:	ffffffff 	.word	0xffffffff
    2548:	ffffffff 	.word	0xffffffff
    254c:	ffffffff 	.word	0xffffffff
    2550:	ffffffff 	.word	0xffffffff
    2554:	ffffffff 	.word	0xffffffff
    2558:	ffffffff 	.word	0xffffffff
    255c:	ffffffff 	.word	0xffffffff
    2560:	ffffffff 	.word	0xffffffff
    2564:	ffffffff 	.word	0xffffffff
    2568:	ffffffff 	.word	0xffffffff
    256c:	ffffffff 	.word	0xffffffff
    2570:	ffffffff 	.word	0xffffffff
    2574:	ffffffff 	.word	0xffffffff
    2578:	ffffffff 	.word	0xffffffff
    257c:	ffffffff 	.word	0xffffffff
    2580:	ffffffff 	.word	0xffffffff
    2584:	ffffffff 	.word	0xffffffff
    2588:	ffffffff 	.word	0xffffffff
    258c:	ffffffff 	.word	0xffffffff
    2590:	ffffffff 	.word	0xffffffff
    2594:	ffffffff 	.word	0xffffffff
    2598:	ffffffff 	.word	0xffffffff
    259c:	ffffffff 	.word	0xffffffff
    25a0:	ffffffff 	.word	0xffffffff
    25a4:	ffffffff 	.word	0xffffffff
    25a8:	ffffffff 	.word	0xffffffff
    25ac:	ffffffff 	.word	0xffffffff
    25b0:	ffffffff 	.word	0xffffffff
    25b4:	ffffffff 	.word	0xffffffff
    25b8:	ffffffff 	.word	0xffffffff
    25bc:	ffffffff 	.word	0xffffffff
    25c0:	ffffffff 	.word	0xffffffff
    25c4:	ffffffff 	.word	0xffffffff
    25c8:	ffffffff 	.word	0xffffffff
    25cc:	ffffffff 	.word	0xffffffff
    25d0:	ffffffff 	.word	0xffffffff
    25d4:	ffffffff 	.word	0xffffffff
    25d8:	ffffffff 	.word	0xffffffff
    25dc:	ffffffff 	.word	0xffffffff
    25e0:	ffffffff 	.word	0xffffffff
    25e4:	ffffffff 	.word	0xffffffff
    25e8:	ffffffff 	.word	0xffffffff
    25ec:	ffffffff 	.word	0xffffffff
    25f0:	ffffffff 	.word	0xffffffff
    25f4:	ffffffff 	.word	0xffffffff
    25f8:	ffffffff 	.word	0xffffffff
    25fc:	ffffffff 	.word	0xffffffff
    2600:	ffffffff 	.word	0xffffffff
    2604:	ffffffff 	.word	0xffffffff
    2608:	ffffffff 	.word	0xffffffff
    260c:	ffffffff 	.word	0xffffffff
    2610:	ffffffff 	.word	0xffffffff
    2614:	ffffffff 	.word	0xffffffff
    2618:	ffffffff 	.word	0xffffffff
    261c:	ffffffff 	.word	0xffffffff
    2620:	ffffffff 	.word	0xffffffff
    2624:	ffffffff 	.word	0xffffffff
    2628:	ffffffff 	.word	0xffffffff
    262c:	ffffffff 	.word	0xffffffff
    2630:	ffffffff 	.word	0xffffffff
    2634:	ffffffff 	.word	0xffffffff
    2638:	ffffffff 	.word	0xffffffff
    263c:	ffffffff 	.word	0xffffffff
    2640:	ffffffff 	.word	0xffffffff
    2644:	ffffffff 	.word	0xffffffff
    2648:	ffffffff 	.word	0xffffffff
    264c:	ffffffff 	.word	0xffffffff
    2650:	ffffffff 	.word	0xffffffff
    2654:	ffffffff 	.word	0xffffffff
    2658:	ffffffff 	.word	0xffffffff
    265c:	ffffffff 	.word	0xffffffff
    2660:	ffffffff 	.word	0xffffffff
    2664:	ffffffff 	.word	0xffffffff
    2668:	ffffffff 	.word	0xffffffff
    266c:	ffffffff 	.word	0xffffffff
    2670:	ffffffff 	.word	0xffffffff
    2674:	ffffffff 	.word	0xffffffff
    2678:	ffffffff 	.word	0xffffffff
    267c:	ffffffff 	.word	0xffffffff
    2680:	ffffffff 	.word	0xffffffff
    2684:	ffffffff 	.word	0xffffffff
    2688:	ffffffff 	.word	0xffffffff
    268c:	ffffffff 	.word	0xffffffff
    2690:	ffffffff 	.word	0xffffffff
    2694:	ffffffff 	.word	0xffffffff
    2698:	ffffffff 	.word	0xffffffff
    269c:	ffffffff 	.word	0xffffffff
    26a0:	ffffffff 	.word	0xffffffff
    26a4:	ffffffff 	.word	0xffffffff
    26a8:	ffffffff 	.word	0xffffffff
    26ac:	ffffffff 	.word	0xffffffff
    26b0:	ffffffff 	.word	0xffffffff
    26b4:	ffffffff 	.word	0xffffffff
    26b8:	ffffffff 	.word	0xffffffff
    26bc:	ffffffff 	.word	0xffffffff
    26c0:	ffffffff 	.word	0xffffffff
    26c4:	ffffffff 	.word	0xffffffff
    26c8:	ffffffff 	.word	0xffffffff
    26cc:	ffffffff 	.word	0xffffffff
    26d0:	ffffffff 	.word	0xffffffff
    26d4:	ffffffff 	.word	0xffffffff
    26d8:	ffffffff 	.word	0xffffffff
    26dc:	ffffffff 	.word	0xffffffff
    26e0:	ffffffff 	.word	0xffffffff
    26e4:	ffffffff 	.word	0xffffffff
    26e8:	ffffffff 	.word	0xffffffff
    26ec:	ffffffff 	.word	0xffffffff
    26f0:	ffffffff 	.word	0xffffffff
    26f4:	ffffffff 	.word	0xffffffff
    26f8:	ffffffff 	.word	0xffffffff
    26fc:	ffffffff 	.word	0xffffffff
    2700:	ffffffff 	.word	0xffffffff
    2704:	ffffffff 	.word	0xffffffff
    2708:	ffffffff 	.word	0xffffffff
    270c:	ffffffff 	.word	0xffffffff
    2710:	ffffffff 	.word	0xffffffff
    2714:	ffffffff 	.word	0xffffffff
    2718:	ffffffff 	.word	0xffffffff
    271c:	ffffffff 	.word	0xffffffff
    2720:	ffffffff 	.word	0xffffffff
    2724:	ffffffff 	.word	0xffffffff
    2728:	ffffffff 	.word	0xffffffff
    272c:	ffffffff 	.word	0xffffffff
    2730:	ffffffff 	.word	0xffffffff
    2734:	ffffffff 	.word	0xffffffff
    2738:	ffffffff 	.word	0xffffffff
    273c:	ffffffff 	.word	0xffffffff
    2740:	ffffffff 	.word	0xffffffff
    2744:	ffffffff 	.word	0xffffffff
    2748:	ffffffff 	.word	0xffffffff
    274c:	ffffffff 	.word	0xffffffff
    2750:	ffffffff 	.word	0xffffffff
    2754:	ffffffff 	.word	0xffffffff
    2758:	ffffffff 	.word	0xffffffff
    275c:	ffffffff 	.word	0xffffffff
    2760:	ffffffff 	.word	0xffffffff
    2764:	ffffffff 	.word	0xffffffff
    2768:	ffffffff 	.word	0xffffffff
    276c:	ffffffff 	.word	0xffffffff
    2770:	ffffffff 	.word	0xffffffff
    2774:	ffffffff 	.word	0xffffffff
    2778:	ffffffff 	.word	0xffffffff
    277c:	ffffffff 	.word	0xffffffff
    2780:	ffffffff 	.word	0xffffffff
    2784:	ffffffff 	.word	0xffffffff
    2788:	ffffffff 	.word	0xffffffff
    278c:	ffffffff 	.word	0xffffffff
    2790:	ffffffff 	.word	0xffffffff
    2794:	ffffffff 	.word	0xffffffff
    2798:	ffffffff 	.word	0xffffffff
    279c:	ffffffff 	.word	0xffffffff
    27a0:	ffffffff 	.word	0xffffffff
    27a4:	ffffffff 	.word	0xffffffff
    27a8:	ffffffff 	.word	0xffffffff
    27ac:	ffffffff 	.word	0xffffffff
    27b0:	ffffffff 	.word	0xffffffff
    27b4:	ffffffff 	.word	0xffffffff
    27b8:	ffffffff 	.word	0xffffffff
    27bc:	ffffffff 	.word	0xffffffff
    27c0:	ffffffff 	.word	0xffffffff
    27c4:	ffffffff 	.word	0xffffffff
    27c8:	ffffffff 	.word	0xffffffff
    27cc:	ffffffff 	.word	0xffffffff
    27d0:	ffffffff 	.word	0xffffffff
    27d4:	ffffffff 	.word	0xffffffff
    27d8:	ffffffff 	.word	0xffffffff
    27dc:	ffffffff 	.word	0xffffffff
    27e0:	ffffffff 	.word	0xffffffff
    27e4:	ffffffff 	.word	0xffffffff
    27e8:	ffffffff 	.word	0xffffffff
    27ec:	ffffffff 	.word	0xffffffff
    27f0:	ffffffff 	.word	0xffffffff
    27f4:	ffffffff 	.word	0xffffffff
    27f8:	ffffffff 	.word	0xffffffff
    27fc:	ffffffff 	.word	0xffffffff
    2800:	ffffffff 	.word	0xffffffff
    2804:	ffffffff 	.word	0xffffffff
    2808:	ffffffff 	.word	0xffffffff
    280c:	ffffffff 	.word	0xffffffff
    2810:	ffffffff 	.word	0xffffffff
    2814:	ffffffff 	.word	0xffffffff
    2818:	ffffffff 	.word	0xffffffff
    281c:	ffffffff 	.word	0xffffffff
    2820:	ffffffff 	.word	0xffffffff
    2824:	ffffffff 	.word	0xffffffff
    2828:	ffffffff 	.word	0xffffffff
    282c:	ffffffff 	.word	0xffffffff
    2830:	ffffffff 	.word	0xffffffff
    2834:	ffffffff 	.word	0xffffffff
    2838:	ffffffff 	.word	0xffffffff
    283c:	ffffffff 	.word	0xffffffff
    2840:	ffffffff 	.word	0xffffffff
    2844:	ffffffff 	.word	0xffffffff
    2848:	ffffffff 	.word	0xffffffff
    284c:	ffffffff 	.word	0xffffffff
    2850:	ffffffff 	.word	0xffffffff
    2854:	ffffffff 	.word	0xffffffff
    2858:	ffffffff 	.word	0xffffffff
    285c:	ffffffff 	.word	0xffffffff
    2860:	ffffffff 	.word	0xffffffff
    2864:	ffffffff 	.word	0xffffffff
    2868:	ffffffff 	.word	0xffffffff
    286c:	ffffffff 	.word	0xffffffff
    2870:	ffffffff 	.word	0xffffffff
    2874:	ffffffff 	.word	0xffffffff
    2878:	ffffffff 	.word	0xffffffff
    287c:	ffffffff 	.word	0xffffffff
    2880:	ffffffff 	.word	0xffffffff
    2884:	ffffffff 	.word	0xffffffff
    2888:	ffffffff 	.word	0xffffffff
    288c:	ffffffff 	.word	0xffffffff
    2890:	ffffffff 	.word	0xffffffff
    2894:	ffffffff 	.word	0xffffffff
    2898:	ffffffff 	.word	0xffffffff
    289c:	ffffffff 	.word	0xffffffff
    28a0:	ffffffff 	.word	0xffffffff
    28a4:	ffffffff 	.word	0xffffffff
    28a8:	ffffffff 	.word	0xffffffff
    28ac:	ffffffff 	.word	0xffffffff
    28b0:	ffffffff 	.word	0xffffffff
    28b4:	ffffffff 	.word	0xffffffff
    28b8:	ffffffff 	.word	0xffffffff
    28bc:	ffffffff 	.word	0xffffffff
    28c0:	ffffffff 	.word	0xffffffff
    28c4:	ffffffff 	.word	0xffffffff
    28c8:	ffffffff 	.word	0xffffffff
    28cc:	ffffffff 	.word	0xffffffff
    28d0:	ffffffff 	.word	0xffffffff
    28d4:	ffffffff 	.word	0xffffffff
    28d8:	ffffffff 	.word	0xffffffff
    28dc:	ffffffff 	.word	0xffffffff
    28e0:	ffffffff 	.word	0xffffffff
    28e4:	ffffffff 	.word	0xffffffff
    28e8:	ffffffff 	.word	0xffffffff
    28ec:	ffffffff 	.word	0xffffffff
    28f0:	ffffffff 	.word	0xffffffff
    28f4:	ffffffff 	.word	0xffffffff
    28f8:	ffffffff 	.word	0xffffffff
    28fc:	ffffffff 	.word	0xffffffff
    2900:	ffffffff 	.word	0xffffffff
    2904:	ffffffff 	.word	0xffffffff
    2908:	ffffffff 	.word	0xffffffff
    290c:	ffffffff 	.word	0xffffffff
    2910:	ffffffff 	.word	0xffffffff
    2914:	ffffffff 	.word	0xffffffff
    2918:	ffffffff 	.word	0xffffffff
    291c:	ffffffff 	.word	0xffffffff
    2920:	ffffffff 	.word	0xffffffff
    2924:	ffffffff 	.word	0xffffffff
    2928:	ffffffff 	.word	0xffffffff
    292c:	ffffffff 	.word	0xffffffff
    2930:	ffffffff 	.word	0xffffffff
    2934:	ffffffff 	.word	0xffffffff
    2938:	ffffffff 	.word	0xffffffff
    293c:	ffffffff 	.word	0xffffffff
    2940:	ffffffff 	.word	0xffffffff
    2944:	ffffffff 	.word	0xffffffff
    2948:	ffffffff 	.word	0xffffffff
    294c:	ffffffff 	.word	0xffffffff
    2950:	ffffffff 	.word	0xffffffff
    2954:	ffffffff 	.word	0xffffffff
    2958:	ffffffff 	.word	0xffffffff
    295c:	ffffffff 	.word	0xffffffff
    2960:	ffffffff 	.word	0xffffffff
    2964:	ffffffff 	.word	0xffffffff
    2968:	ffffffff 	.word	0xffffffff
    296c:	ffffffff 	.word	0xffffffff
    2970:	ffffffff 	.word	0xffffffff
    2974:	ffffffff 	.word	0xffffffff
    2978:	ffffffff 	.word	0xffffffff
    297c:	ffffffff 	.word	0xffffffff
    2980:	ffffffff 	.word	0xffffffff
    2984:	ffffffff 	.word	0xffffffff
    2988:	ffffffff 	.word	0xffffffff
    298c:	ffffffff 	.word	0xffffffff
    2990:	ffffffff 	.word	0xffffffff
    2994:	ffffffff 	.word	0xffffffff
    2998:	ffffffff 	.word	0xffffffff
    299c:	ffffffff 	.word	0xffffffff
    29a0:	ffffffff 	.word	0xffffffff
    29a4:	ffffffff 	.word	0xffffffff
    29a8:	ffffffff 	.word	0xffffffff
    29ac:	ffffffff 	.word	0xffffffff
    29b0:	ffffffff 	.word	0xffffffff
    29b4:	ffffffff 	.word	0xffffffff
    29b8:	ffffffff 	.word	0xffffffff
    29bc:	ffffffff 	.word	0xffffffff
    29c0:	ffffffff 	.word	0xffffffff
    29c4:	ffffffff 	.word	0xffffffff
    29c8:	ffffffff 	.word	0xffffffff
    29cc:	ffffffff 	.word	0xffffffff
    29d0:	ffffffff 	.word	0xffffffff
    29d4:	ffffffff 	.word	0xffffffff
    29d8:	ffffffff 	.word	0xffffffff
    29dc:	ffffffff 	.word	0xffffffff
    29e0:	ffffffff 	.word	0xffffffff
    29e4:	ffffffff 	.word	0xffffffff
    29e8:	ffffffff 	.word	0xffffffff
    29ec:	ffffffff 	.word	0xffffffff
    29f0:	ffffffff 	.word	0xffffffff
    29f4:	ffffffff 	.word	0xffffffff
    29f8:	ffffffff 	.word	0xffffffff
    29fc:	ffffffff 	.word	0xffffffff
    2a00:	ffffffff 	.word	0xffffffff
    2a04:	ffffffff 	.word	0xffffffff
    2a08:	ffffffff 	.word	0xffffffff
    2a0c:	ffffffff 	.word	0xffffffff
    2a10:	ffffffff 	.word	0xffffffff
    2a14:	ffffffff 	.word	0xffffffff
    2a18:	ffffffff 	.word	0xffffffff
    2a1c:	ffffffff 	.word	0xffffffff
    2a20:	ffffffff 	.word	0xffffffff
    2a24:	ffffffff 	.word	0xffffffff
    2a28:	ffffffff 	.word	0xffffffff
    2a2c:	ffffffff 	.word	0xffffffff
    2a30:	ffffffff 	.word	0xffffffff
    2a34:	ffffffff 	.word	0xffffffff
    2a38:	ffffffff 	.word	0xffffffff
    2a3c:	ffffffff 	.word	0xffffffff
    2a40:	ffffffff 	.word	0xffffffff
    2a44:	ffffffff 	.word	0xffffffff
    2a48:	ffffffff 	.word	0xffffffff
    2a4c:	ffffffff 	.word	0xffffffff
    2a50:	ffffffff 	.word	0xffffffff
    2a54:	ffffffff 	.word	0xffffffff
    2a58:	ffffffff 	.word	0xffffffff
    2a5c:	ffffffff 	.word	0xffffffff
    2a60:	ffffffff 	.word	0xffffffff
    2a64:	ffffffff 	.word	0xffffffff
    2a68:	ffffffff 	.word	0xffffffff
    2a6c:	ffffffff 	.word	0xffffffff
    2a70:	ffffffff 	.word	0xffffffff
    2a74:	ffffffff 	.word	0xffffffff
    2a78:	ffffffff 	.word	0xffffffff
    2a7c:	ffffffff 	.word	0xffffffff
    2a80:	ffffffff 	.word	0xffffffff
    2a84:	ffffffff 	.word	0xffffffff
    2a88:	ffffffff 	.word	0xffffffff
    2a8c:	ffffffff 	.word	0xffffffff
    2a90:	ffffffff 	.word	0xffffffff
    2a94:	ffffffff 	.word	0xffffffff
    2a98:	ffffffff 	.word	0xffffffff
    2a9c:	ffffffff 	.word	0xffffffff
    2aa0:	ffffffff 	.word	0xffffffff
    2aa4:	ffffffff 	.word	0xffffffff
    2aa8:	ffffffff 	.word	0xffffffff
    2aac:	ffffffff 	.word	0xffffffff
    2ab0:	ffffffff 	.word	0xffffffff
    2ab4:	ffffffff 	.word	0xffffffff
    2ab8:	ffffffff 	.word	0xffffffff
    2abc:	ffffffff 	.word	0xffffffff
    2ac0:	ffffffff 	.word	0xffffffff
    2ac4:	ffffffff 	.word	0xffffffff
    2ac8:	ffffffff 	.word	0xffffffff
    2acc:	ffffffff 	.word	0xffffffff
    2ad0:	ffffffff 	.word	0xffffffff
    2ad4:	ffffffff 	.word	0xffffffff
    2ad8:	ffffffff 	.word	0xffffffff
    2adc:	ffffffff 	.word	0xffffffff
    2ae0:	ffffffff 	.word	0xffffffff
    2ae4:	ffffffff 	.word	0xffffffff
    2ae8:	ffffffff 	.word	0xffffffff
    2aec:	ffffffff 	.word	0xffffffff
    2af0:	ffffffff 	.word	0xffffffff
    2af4:	ffffffff 	.word	0xffffffff
    2af8:	ffffffff 	.word	0xffffffff
    2afc:	ffffffff 	.word	0xffffffff
    2b00:	ffffffff 	.word	0xffffffff
    2b04:	ffffffff 	.word	0xffffffff
    2b08:	ffffffff 	.word	0xffffffff
    2b0c:	ffffffff 	.word	0xffffffff
    2b10:	ffffffff 	.word	0xffffffff
    2b14:	ffffffff 	.word	0xffffffff
    2b18:	ffffffff 	.word	0xffffffff
    2b1c:	ffffffff 	.word	0xffffffff
    2b20:	ffffffff 	.word	0xffffffff
    2b24:	ffffffff 	.word	0xffffffff
    2b28:	ffffffff 	.word	0xffffffff
    2b2c:	ffffffff 	.word	0xffffffff
    2b30:	ffffffff 	.word	0xffffffff
    2b34:	ffffffff 	.word	0xffffffff
    2b38:	ffffffff 	.word	0xffffffff
    2b3c:	ffffffff 	.word	0xffffffff
    2b40:	ffffffff 	.word	0xffffffff
    2b44:	ffffffff 	.word	0xffffffff
    2b48:	ffffffff 	.word	0xffffffff
    2b4c:	ffffffff 	.word	0xffffffff
    2b50:	ffffffff 	.word	0xffffffff
    2b54:	ffffffff 	.word	0xffffffff
    2b58:	ffffffff 	.word	0xffffffff
    2b5c:	ffffffff 	.word	0xffffffff
    2b60:	ffffffff 	.word	0xffffffff
    2b64:	ffffffff 	.word	0xffffffff
    2b68:	ffffffff 	.word	0xffffffff
    2b6c:	ffffffff 	.word	0xffffffff
    2b70:	ffffffff 	.word	0xffffffff
    2b74:	ffffffff 	.word	0xffffffff
    2b78:	ffffffff 	.word	0xffffffff
    2b7c:	ffffffff 	.word	0xffffffff
    2b80:	ffffffff 	.word	0xffffffff
    2b84:	ffffffff 	.word	0xffffffff
    2b88:	ffffffff 	.word	0xffffffff
    2b8c:	ffffffff 	.word	0xffffffff
    2b90:	ffffffff 	.word	0xffffffff
    2b94:	ffffffff 	.word	0xffffffff
    2b98:	ffffffff 	.word	0xffffffff
    2b9c:	ffffffff 	.word	0xffffffff
    2ba0:	ffffffff 	.word	0xffffffff
    2ba4:	ffffffff 	.word	0xffffffff
    2ba8:	ffffffff 	.word	0xffffffff
    2bac:	ffffffff 	.word	0xffffffff
    2bb0:	ffffffff 	.word	0xffffffff
    2bb4:	ffffffff 	.word	0xffffffff
    2bb8:	ffffffff 	.word	0xffffffff
    2bbc:	ffffffff 	.word	0xffffffff
    2bc0:	ffffffff 	.word	0xffffffff
    2bc4:	ffffffff 	.word	0xffffffff
    2bc8:	ffffffff 	.word	0xffffffff
    2bcc:	ffffffff 	.word	0xffffffff
    2bd0:	ffffffff 	.word	0xffffffff
    2bd4:	ffffffff 	.word	0xffffffff
    2bd8:	ffffffff 	.word	0xffffffff
    2bdc:	ffffffff 	.word	0xffffffff
    2be0:	ffffffff 	.word	0xffffffff
    2be4:	ffffffff 	.word	0xffffffff
    2be8:	ffffffff 	.word	0xffffffff
    2bec:	ffffffff 	.word	0xffffffff
    2bf0:	ffffffff 	.word	0xffffffff
    2bf4:	ffffffff 	.word	0xffffffff
    2bf8:	ffffffff 	.word	0xffffffff
    2bfc:	ffffffff 	.word	0xffffffff
    2c00:	ffffffff 	.word	0xffffffff
    2c04:	ffffffff 	.word	0xffffffff
    2c08:	ffffffff 	.word	0xffffffff
    2c0c:	ffffffff 	.word	0xffffffff
    2c10:	ffffffff 	.word	0xffffffff
    2c14:	ffffffff 	.word	0xffffffff
    2c18:	ffffffff 	.word	0xffffffff
    2c1c:	ffffffff 	.word	0xffffffff
    2c20:	ffffffff 	.word	0xffffffff
    2c24:	ffffffff 	.word	0xffffffff
    2c28:	ffffffff 	.word	0xffffffff
    2c2c:	ffffffff 	.word	0xffffffff
    2c30:	ffffffff 	.word	0xffffffff
    2c34:	ffffffff 	.word	0xffffffff
    2c38:	ffffffff 	.word	0xffffffff
    2c3c:	ffffffff 	.word	0xffffffff
    2c40:	ffffffff 	.word	0xffffffff
    2c44:	ffffffff 	.word	0xffffffff
    2c48:	ffffffff 	.word	0xffffffff
    2c4c:	ffffffff 	.word	0xffffffff
    2c50:	ffffffff 	.word	0xffffffff
    2c54:	ffffffff 	.word	0xffffffff
    2c58:	ffffffff 	.word	0xffffffff
    2c5c:	ffffffff 	.word	0xffffffff
    2c60:	ffffffff 	.word	0xffffffff
    2c64:	ffffffff 	.word	0xffffffff
    2c68:	ffffffff 	.word	0xffffffff
    2c6c:	ffffffff 	.word	0xffffffff
    2c70:	ffffffff 	.word	0xffffffff
    2c74:	ffffffff 	.word	0xffffffff
    2c78:	ffffffff 	.word	0xffffffff
    2c7c:	ffffffff 	.word	0xffffffff
    2c80:	ffffffff 	.word	0xffffffff
    2c84:	ffffffff 	.word	0xffffffff
    2c88:	ffffffff 	.word	0xffffffff
    2c8c:	ffffffff 	.word	0xffffffff
    2c90:	ffffffff 	.word	0xffffffff
    2c94:	ffffffff 	.word	0xffffffff
    2c98:	ffffffff 	.word	0xffffffff
    2c9c:	ffffffff 	.word	0xffffffff
    2ca0:	ffffffff 	.word	0xffffffff
    2ca4:	ffffffff 	.word	0xffffffff
    2ca8:	ffffffff 	.word	0xffffffff
    2cac:	ffffffff 	.word	0xffffffff
    2cb0:	ffffffff 	.word	0xffffffff
    2cb4:	ffffffff 	.word	0xffffffff
    2cb8:	ffffffff 	.word	0xffffffff
    2cbc:	ffffffff 	.word	0xffffffff
    2cc0:	ffffffff 	.word	0xffffffff
    2cc4:	ffffffff 	.word	0xffffffff
    2cc8:	ffffffff 	.word	0xffffffff
    2ccc:	ffffffff 	.word	0xffffffff
    2cd0:	ffffffff 	.word	0xffffffff
    2cd4:	ffffffff 	.word	0xffffffff
    2cd8:	ffffffff 	.word	0xffffffff
    2cdc:	ffffffff 	.word	0xffffffff
    2ce0:	ffffffff 	.word	0xffffffff
    2ce4:	ffffffff 	.word	0xffffffff
    2ce8:	ffffffff 	.word	0xffffffff
    2cec:	ffffffff 	.word	0xffffffff
    2cf0:	ffffffff 	.word	0xffffffff
    2cf4:	ffffffff 	.word	0xffffffff
    2cf8:	ffffffff 	.word	0xffffffff
    2cfc:	ffffffff 	.word	0xffffffff
    2d00:	ffffffff 	.word	0xffffffff
    2d04:	ffffffff 	.word	0xffffffff
    2d08:	ffffffff 	.word	0xffffffff
    2d0c:	ffffffff 	.word	0xffffffff
    2d10:	ffffffff 	.word	0xffffffff
    2d14:	ffffffff 	.word	0xffffffff
    2d18:	ffffffff 	.word	0xffffffff
    2d1c:	ffffffff 	.word	0xffffffff
    2d20:	ffffffff 	.word	0xffffffff
    2d24:	ffffffff 	.word	0xffffffff
    2d28:	ffffffff 	.word	0xffffffff
    2d2c:	ffffffff 	.word	0xffffffff
    2d30:	ffffffff 	.word	0xffffffff
    2d34:	ffffffff 	.word	0xffffffff
    2d38:	ffffffff 	.word	0xffffffff
    2d3c:	ffffffff 	.word	0xffffffff
    2d40:	ffffffff 	.word	0xffffffff
    2d44:	ffffffff 	.word	0xffffffff
    2d48:	ffffffff 	.word	0xffffffff
    2d4c:	ffffffff 	.word	0xffffffff
    2d50:	ffffffff 	.word	0xffffffff
    2d54:	ffffffff 	.word	0xffffffff
    2d58:	ffffffff 	.word	0xffffffff
    2d5c:	ffffffff 	.word	0xffffffff
    2d60:	ffffffff 	.word	0xffffffff
    2d64:	ffffffff 	.word	0xffffffff
    2d68:	ffffffff 	.word	0xffffffff
    2d6c:	ffffffff 	.word	0xffffffff
    2d70:	ffffffff 	.word	0xffffffff
    2d74:	ffffffff 	.word	0xffffffff
    2d78:	ffffffff 	.word	0xffffffff
    2d7c:	ffffffff 	.word	0xffffffff
    2d80:	ffffffff 	.word	0xffffffff
    2d84:	ffffffff 	.word	0xffffffff
    2d88:	ffffffff 	.word	0xffffffff
    2d8c:	ffffffff 	.word	0xffffffff
    2d90:	ffffffff 	.word	0xffffffff
    2d94:	ffffffff 	.word	0xffffffff
    2d98:	ffffffff 	.word	0xffffffff
    2d9c:	ffffffff 	.word	0xffffffff
    2da0:	ffffffff 	.word	0xffffffff
    2da4:	ffffffff 	.word	0xffffffff
    2da8:	ffffffff 	.word	0xffffffff
    2dac:	ffffffff 	.word	0xffffffff
    2db0:	ffffffff 	.word	0xffffffff
    2db4:	ffffffff 	.word	0xffffffff
    2db8:	ffffffff 	.word	0xffffffff
    2dbc:	ffffffff 	.word	0xffffffff
    2dc0:	ffffffff 	.word	0xffffffff
    2dc4:	ffffffff 	.word	0xffffffff
    2dc8:	ffffffff 	.word	0xffffffff
    2dcc:	ffffffff 	.word	0xffffffff
    2dd0:	ffffffff 	.word	0xffffffff
    2dd4:	ffffffff 	.word	0xffffffff
    2dd8:	ffffffff 	.word	0xffffffff
    2ddc:	ffffffff 	.word	0xffffffff
    2de0:	ffffffff 	.word	0xffffffff
    2de4:	ffffffff 	.word	0xffffffff
    2de8:	ffffffff 	.word	0xffffffff
    2dec:	ffffffff 	.word	0xffffffff
    2df0:	ffffffff 	.word	0xffffffff
    2df4:	ffffffff 	.word	0xffffffff
    2df8:	ffffffff 	.word	0xffffffff
    2dfc:	ffffffff 	.word	0xffffffff
    2e00:	ffffffff 	.word	0xffffffff
    2e04:	ffffffff 	.word	0xffffffff
    2e08:	ffffffff 	.word	0xffffffff
    2e0c:	ffffffff 	.word	0xffffffff
    2e10:	ffffffff 	.word	0xffffffff
    2e14:	ffffffff 	.word	0xffffffff
    2e18:	ffffffff 	.word	0xffffffff
    2e1c:	ffffffff 	.word	0xffffffff
    2e20:	ffffffff 	.word	0xffffffff
    2e24:	ffffffff 	.word	0xffffffff
    2e28:	ffffffff 	.word	0xffffffff
    2e2c:	ffffffff 	.word	0xffffffff
    2e30:	ffffffff 	.word	0xffffffff
    2e34:	ffffffff 	.word	0xffffffff
    2e38:	ffffffff 	.word	0xffffffff
    2e3c:	ffffffff 	.word	0xffffffff
    2e40:	ffffffff 	.word	0xffffffff
    2e44:	ffffffff 	.word	0xffffffff
    2e48:	ffffffff 	.word	0xffffffff
    2e4c:	ffffffff 	.word	0xffffffff
    2e50:	ffffffff 	.word	0xffffffff
    2e54:	ffffffff 	.word	0xffffffff
    2e58:	ffffffff 	.word	0xffffffff
    2e5c:	ffffffff 	.word	0xffffffff
    2e60:	ffffffff 	.word	0xffffffff
    2e64:	ffffffff 	.word	0xffffffff
    2e68:	ffffffff 	.word	0xffffffff
    2e6c:	ffffffff 	.word	0xffffffff
    2e70:	ffffffff 	.word	0xffffffff
    2e74:	ffffffff 	.word	0xffffffff
    2e78:	ffffffff 	.word	0xffffffff
    2e7c:	ffffffff 	.word	0xffffffff
    2e80:	ffffffff 	.word	0xffffffff
    2e84:	ffffffff 	.word	0xffffffff
    2e88:	ffffffff 	.word	0xffffffff
    2e8c:	ffffffff 	.word	0xffffffff
    2e90:	ffffffff 	.word	0xffffffff
    2e94:	ffffffff 	.word	0xffffffff
    2e98:	ffffffff 	.word	0xffffffff
    2e9c:	ffffffff 	.word	0xffffffff
    2ea0:	ffffffff 	.word	0xffffffff
    2ea4:	ffffffff 	.word	0xffffffff
    2ea8:	ffffffff 	.word	0xffffffff
    2eac:	ffffffff 	.word	0xffffffff
    2eb0:	ffffffff 	.word	0xffffffff
    2eb4:	ffffffff 	.word	0xffffffff
    2eb8:	ffffffff 	.word	0xffffffff
    2ebc:	ffffffff 	.word	0xffffffff
    2ec0:	ffffffff 	.word	0xffffffff
    2ec4:	ffffffff 	.word	0xffffffff
    2ec8:	ffffffff 	.word	0xffffffff
    2ecc:	ffffffff 	.word	0xffffffff
    2ed0:	ffffffff 	.word	0xffffffff
    2ed4:	ffffffff 	.word	0xffffffff
    2ed8:	ffffffff 	.word	0xffffffff
    2edc:	ffffffff 	.word	0xffffffff
    2ee0:	ffffffff 	.word	0xffffffff
    2ee4:	ffffffff 	.word	0xffffffff
    2ee8:	ffffffff 	.word	0xffffffff
    2eec:	ffffffff 	.word	0xffffffff
    2ef0:	ffffffff 	.word	0xffffffff
    2ef4:	ffffffff 	.word	0xffffffff
    2ef8:	ffffffff 	.word	0xffffffff
    2efc:	ffffffff 	.word	0xffffffff
    2f00:	ffffffff 	.word	0xffffffff
    2f04:	ffffffff 	.word	0xffffffff
    2f08:	ffffffff 	.word	0xffffffff
    2f0c:	ffffffff 	.word	0xffffffff
    2f10:	ffffffff 	.word	0xffffffff
    2f14:	ffffffff 	.word	0xffffffff
    2f18:	ffffffff 	.word	0xffffffff
    2f1c:	ffffffff 	.word	0xffffffff
    2f20:	ffffffff 	.word	0xffffffff
    2f24:	ffffffff 	.word	0xffffffff
    2f28:	ffffffff 	.word	0xffffffff
    2f2c:	ffffffff 	.word	0xffffffff
    2f30:	ffffffff 	.word	0xffffffff
    2f34:	ffffffff 	.word	0xffffffff
    2f38:	ffffffff 	.word	0xffffffff
    2f3c:	ffffffff 	.word	0xffffffff
    2f40:	ffffffff 	.word	0xffffffff
    2f44:	ffffffff 	.word	0xffffffff
    2f48:	ffffffff 	.word	0xffffffff
    2f4c:	ffffffff 	.word	0xffffffff
    2f50:	ffffffff 	.word	0xffffffff
    2f54:	ffffffff 	.word	0xffffffff
    2f58:	ffffffff 	.word	0xffffffff
    2f5c:	ffffffff 	.word	0xffffffff
    2f60:	ffffffff 	.word	0xffffffff
    2f64:	ffffffff 	.word	0xffffffff
    2f68:	ffffffff 	.word	0xffffffff
    2f6c:	ffffffff 	.word	0xffffffff
    2f70:	ffffffff 	.word	0xffffffff
    2f74:	ffffffff 	.word	0xffffffff
    2f78:	ffffffff 	.word	0xffffffff
    2f7c:	ffffffff 	.word	0xffffffff
    2f80:	ffffffff 	.word	0xffffffff
    2f84:	ffffffff 	.word	0xffffffff
    2f88:	ffffffff 	.word	0xffffffff
    2f8c:	ffffffff 	.word	0xffffffff
    2f90:	ffffffff 	.word	0xffffffff
    2f94:	ffffffff 	.word	0xffffffff
    2f98:	ffffffff 	.word	0xffffffff
    2f9c:	ffffffff 	.word	0xffffffff
    2fa0:	ffffffff 	.word	0xffffffff
    2fa4:	ffffffff 	.word	0xffffffff
    2fa8:	ffffffff 	.word	0xffffffff
    2fac:	ffffffff 	.word	0xffffffff
    2fb0:	ffffffff 	.word	0xffffffff
    2fb4:	ffffffff 	.word	0xffffffff
    2fb8:	ffffffff 	.word	0xffffffff
    2fbc:	ffffffff 	.word	0xffffffff
    2fc0:	ffffffff 	.word	0xffffffff
    2fc4:	ffffffff 	.word	0xffffffff
    2fc8:	ffffffff 	.word	0xffffffff
    2fcc:	ffffffff 	.word	0xffffffff
    2fd0:	ffffffff 	.word	0xffffffff
    2fd4:	ffffffff 	.word	0xffffffff
    2fd8:	ffffffff 	.word	0xffffffff
    2fdc:	ffffffff 	.word	0xffffffff
    2fe0:	ffffffff 	.word	0xffffffff
    2fe4:	ffffffff 	.word	0xffffffff
    2fe8:	ffffffff 	.word	0xffffffff
    2fec:	ffffffff 	.word	0xffffffff
    2ff0:	ffffffff 	.word	0xffffffff
    2ff4:	ffffffff 	.word	0xffffffff
    2ff8:	ffffffff 	.word	0xffffffff
    2ffc:	ffffffff 	.word	0xffffffff
    3000:	ffffffff 	.word	0xffffffff
    3004:	ffffffff 	.word	0xffffffff
    3008:	ffffffff 	.word	0xffffffff
    300c:	ffffffff 	.word	0xffffffff
    3010:	ffffffff 	.word	0xffffffff
    3014:	ffffffff 	.word	0xffffffff
    3018:	ffffffff 	.word	0xffffffff
    301c:	ffffffff 	.word	0xffffffff
    3020:	ffffffff 	.word	0xffffffff
    3024:	ffffffff 	.word	0xffffffff
    3028:	ffffffff 	.word	0xffffffff
    302c:	ffffffff 	.word	0xffffffff
    3030:	ffffffff 	.word	0xffffffff
    3034:	ffffffff 	.word	0xffffffff
    3038:	ffffffff 	.word	0xffffffff
    303c:	ffffffff 	.word	0xffffffff
    3040:	ffffffff 	.word	0xffffffff
    3044:	ffffffff 	.word	0xffffffff
    3048:	ffffffff 	.word	0xffffffff
    304c:	ffffffff 	.word	0xffffffff
    3050:	ffffffff 	.word	0xffffffff
    3054:	ffffffff 	.word	0xffffffff
    3058:	ffffffff 	.word	0xffffffff
    305c:	ffffffff 	.word	0xffffffff
    3060:	ffffffff 	.word	0xffffffff
    3064:	ffffffff 	.word	0xffffffff
    3068:	ffffffff 	.word	0xffffffff
    306c:	ffffffff 	.word	0xffffffff
    3070:	ffffffff 	.word	0xffffffff
    3074:	ffffffff 	.word	0xffffffff
    3078:	ffffffff 	.word	0xffffffff
    307c:	ffffffff 	.word	0xffffffff
    3080:	ffffffff 	.word	0xffffffff
    3084:	ffffffff 	.word	0xffffffff
    3088:	ffffffff 	.word	0xffffffff
    308c:	ffffffff 	.word	0xffffffff
    3090:	ffffffff 	.word	0xffffffff
    3094:	ffffffff 	.word	0xffffffff
    3098:	ffffffff 	.word	0xffffffff
    309c:	ffffffff 	.word	0xffffffff
    30a0:	ffffffff 	.word	0xffffffff
    30a4:	ffffffff 	.word	0xffffffff
    30a8:	ffffffff 	.word	0xffffffff
    30ac:	ffffffff 	.word	0xffffffff
    30b0:	ffffffff 	.word	0xffffffff
    30b4:	ffffffff 	.word	0xffffffff
    30b8:	ffffffff 	.word	0xffffffff
    30bc:	ffffffff 	.word	0xffffffff
    30c0:	ffffffff 	.word	0xffffffff
    30c4:	ffffffff 	.word	0xffffffff
    30c8:	ffffffff 	.word	0xffffffff
    30cc:	ffffffff 	.word	0xffffffff
    30d0:	ffffffff 	.word	0xffffffff
    30d4:	ffffffff 	.word	0xffffffff
    30d8:	ffffffff 	.word	0xffffffff
    30dc:	ffffffff 	.word	0xffffffff
    30e0:	ffffffff 	.word	0xffffffff
    30e4:	ffffffff 	.word	0xffffffff
    30e8:	ffffffff 	.word	0xffffffff
    30ec:	ffffffff 	.word	0xffffffff
    30f0:	ffffffff 	.word	0xffffffff
    30f4:	ffffffff 	.word	0xffffffff
    30f8:	ffffffff 	.word	0xffffffff
    30fc:	ffffffff 	.word	0xffffffff
    3100:	ffffffff 	.word	0xffffffff
    3104:	ffffffff 	.word	0xffffffff
    3108:	ffffffff 	.word	0xffffffff
    310c:	ffffffff 	.word	0xffffffff
    3110:	ffffffff 	.word	0xffffffff
    3114:	ffffffff 	.word	0xffffffff
    3118:	ffffffff 	.word	0xffffffff
    311c:	ffffffff 	.word	0xffffffff
    3120:	ffffffff 	.word	0xffffffff
    3124:	ffffffff 	.word	0xffffffff
    3128:	ffffffff 	.word	0xffffffff
    312c:	ffffffff 	.word	0xffffffff
    3130:	ffffffff 	.word	0xffffffff
    3134:	ffffffff 	.word	0xffffffff
    3138:	ffffffff 	.word	0xffffffff
    313c:	ffffffff 	.word	0xffffffff
    3140:	ffffffff 	.word	0xffffffff
    3144:	ffffffff 	.word	0xffffffff
    3148:	ffffffff 	.word	0xffffffff
    314c:	ffffffff 	.word	0xffffffff
    3150:	ffffffff 	.word	0xffffffff
    3154:	ffffffff 	.word	0xffffffff
    3158:	ffffffff 	.word	0xffffffff
    315c:	ffffffff 	.word	0xffffffff
    3160:	ffffffff 	.word	0xffffffff
    3164:	ffffffff 	.word	0xffffffff
    3168:	ffffffff 	.word	0xffffffff
    316c:	ffffffff 	.word	0xffffffff
    3170:	ffffffff 	.word	0xffffffff
    3174:	ffffffff 	.word	0xffffffff
    3178:	ffffffff 	.word	0xffffffff
    317c:	ffffffff 	.word	0xffffffff
    3180:	ffffffff 	.word	0xffffffff
    3184:	ffffffff 	.word	0xffffffff
    3188:	ffffffff 	.word	0xffffffff
    318c:	ffffffff 	.word	0xffffffff
    3190:	ffffffff 	.word	0xffffffff
    3194:	ffffffff 	.word	0xffffffff
    3198:	ffffffff 	.word	0xffffffff
    319c:	ffffffff 	.word	0xffffffff
    31a0:	ffffffff 	.word	0xffffffff
    31a4:	ffffffff 	.word	0xffffffff
    31a8:	ffffffff 	.word	0xffffffff
    31ac:	ffffffff 	.word	0xffffffff
    31b0:	ffffffff 	.word	0xffffffff
    31b4:	ffffffff 	.word	0xffffffff
    31b8:	ffffffff 	.word	0xffffffff
    31bc:	ffffffff 	.word	0xffffffff
    31c0:	ffffffff 	.word	0xffffffff
    31c4:	ffffffff 	.word	0xffffffff
    31c8:	ffffffff 	.word	0xffffffff
    31cc:	ffffffff 	.word	0xffffffff
    31d0:	ffffffff 	.word	0xffffffff
    31d4:	ffffffff 	.word	0xffffffff
    31d8:	ffffffff 	.word	0xffffffff
    31dc:	ffffffff 	.word	0xffffffff
    31e0:	ffffffff 	.word	0xffffffff
    31e4:	ffffffff 	.word	0xffffffff
    31e8:	ffffffff 	.word	0xffffffff
    31ec:	ffffffff 	.word	0xffffffff
    31f0:	ffffffff 	.word	0xffffffff
    31f4:	ffffffff 	.word	0xffffffff
    31f8:	ffffffff 	.word	0xffffffff
    31fc:	ffffffff 	.word	0xffffffff
    3200:	ffffffff 	.word	0xffffffff
    3204:	ffffffff 	.word	0xffffffff
    3208:	ffffffff 	.word	0xffffffff
    320c:	ffffffff 	.word	0xffffffff
    3210:	ffffffff 	.word	0xffffffff
    3214:	ffffffff 	.word	0xffffffff
    3218:	ffffffff 	.word	0xffffffff
    321c:	ffffffff 	.word	0xffffffff
    3220:	ffffffff 	.word	0xffffffff
    3224:	ffffffff 	.word	0xffffffff
    3228:	ffffffff 	.word	0xffffffff
    322c:	ffffffff 	.word	0xffffffff
    3230:	ffffffff 	.word	0xffffffff
    3234:	ffffffff 	.word	0xffffffff
    3238:	ffffffff 	.word	0xffffffff
    323c:	ffffffff 	.word	0xffffffff
    3240:	ffffffff 	.word	0xffffffff
    3244:	ffffffff 	.word	0xffffffff
    3248:	ffffffff 	.word	0xffffffff
    324c:	ffffffff 	.word	0xffffffff
    3250:	ffffffff 	.word	0xffffffff
    3254:	ffffffff 	.word	0xffffffff
    3258:	ffffffff 	.word	0xffffffff
    325c:	ffffffff 	.word	0xffffffff
    3260:	ffffffff 	.word	0xffffffff
    3264:	ffffffff 	.word	0xffffffff
    3268:	ffffffff 	.word	0xffffffff
    326c:	ffffffff 	.word	0xffffffff
    3270:	ffffffff 	.word	0xffffffff
    3274:	ffffffff 	.word	0xffffffff
    3278:	ffffffff 	.word	0xffffffff
    327c:	ffffffff 	.word	0xffffffff
    3280:	ffffffff 	.word	0xffffffff
    3284:	ffffffff 	.word	0xffffffff
    3288:	ffffffff 	.word	0xffffffff
    328c:	ffffffff 	.word	0xffffffff
    3290:	ffffffff 	.word	0xffffffff
    3294:	ffffffff 	.word	0xffffffff
    3298:	ffffffff 	.word	0xffffffff
    329c:	ffffffff 	.word	0xffffffff
    32a0:	ffffffff 	.word	0xffffffff
    32a4:	ffffffff 	.word	0xffffffff
    32a8:	ffffffff 	.word	0xffffffff
    32ac:	ffffffff 	.word	0xffffffff
    32b0:	ffffffff 	.word	0xffffffff
    32b4:	ffffffff 	.word	0xffffffff
    32b8:	ffffffff 	.word	0xffffffff
    32bc:	ffffffff 	.word	0xffffffff
    32c0:	ffffffff 	.word	0xffffffff
    32c4:	ffffffff 	.word	0xffffffff
    32c8:	ffffffff 	.word	0xffffffff
    32cc:	ffffffff 	.word	0xffffffff
    32d0:	ffffffff 	.word	0xffffffff
    32d4:	ffffffff 	.word	0xffffffff
    32d8:	ffffffff 	.word	0xffffffff
    32dc:	ffffffff 	.word	0xffffffff
    32e0:	ffffffff 	.word	0xffffffff
    32e4:	ffffffff 	.word	0xffffffff
    32e8:	ffffffff 	.word	0xffffffff
    32ec:	ffffffff 	.word	0xffffffff
    32f0:	ffffffff 	.word	0xffffffff
    32f4:	ffffffff 	.word	0xffffffff
    32f8:	ffffffff 	.word	0xffffffff
    32fc:	ffffffff 	.word	0xffffffff
    3300:	ffffffff 	.word	0xffffffff
    3304:	ffffffff 	.word	0xffffffff
    3308:	ffffffff 	.word	0xffffffff
    330c:	ffffffff 	.word	0xffffffff
    3310:	ffffffff 	.word	0xffffffff
    3314:	ffffffff 	.word	0xffffffff
    3318:	ffffffff 	.word	0xffffffff
    331c:	ffffffff 	.word	0xffffffff
    3320:	ffffffff 	.word	0xffffffff
    3324:	ffffffff 	.word	0xffffffff
    3328:	ffffffff 	.word	0xffffffff
    332c:	ffffffff 	.word	0xffffffff
    3330:	ffffffff 	.word	0xffffffff
    3334:	ffffffff 	.word	0xffffffff
    3338:	ffffffff 	.word	0xffffffff
    333c:	ffffffff 	.word	0xffffffff
    3340:	ffffffff 	.word	0xffffffff
    3344:	ffffffff 	.word	0xffffffff
    3348:	ffffffff 	.word	0xffffffff
    334c:	ffffffff 	.word	0xffffffff
    3350:	ffffffff 	.word	0xffffffff
    3354:	ffffffff 	.word	0xffffffff
    3358:	ffffffff 	.word	0xffffffff
    335c:	ffffffff 	.word	0xffffffff
    3360:	ffffffff 	.word	0xffffffff
    3364:	ffffffff 	.word	0xffffffff
    3368:	ffffffff 	.word	0xffffffff
    336c:	ffffffff 	.word	0xffffffff
    3370:	ffffffff 	.word	0xffffffff
    3374:	ffffffff 	.word	0xffffffff
    3378:	ffffffff 	.word	0xffffffff
    337c:	ffffffff 	.word	0xffffffff
    3380:	ffffffff 	.word	0xffffffff
    3384:	ffffffff 	.word	0xffffffff
    3388:	ffffffff 	.word	0xffffffff
    338c:	ffffffff 	.word	0xffffffff
    3390:	ffffffff 	.word	0xffffffff
    3394:	ffffffff 	.word	0xffffffff
    3398:	ffffffff 	.word	0xffffffff
    339c:	ffffffff 	.word	0xffffffff
    33a0:	ffffffff 	.word	0xffffffff
    33a4:	ffffffff 	.word	0xffffffff
    33a8:	ffffffff 	.word	0xffffffff
    33ac:	ffffffff 	.word	0xffffffff
    33b0:	ffffffff 	.word	0xffffffff
    33b4:	ffffffff 	.word	0xffffffff
    33b8:	ffffffff 	.word	0xffffffff
    33bc:	ffffffff 	.word	0xffffffff
    33c0:	ffffffff 	.word	0xffffffff
    33c4:	ffffffff 	.word	0xffffffff
    33c8:	ffffffff 	.word	0xffffffff
    33cc:	ffffffff 	.word	0xffffffff
    33d0:	ffffffff 	.word	0xffffffff
    33d4:	ffffffff 	.word	0xffffffff
    33d8:	ffffffff 	.word	0xffffffff
    33dc:	ffffffff 	.word	0xffffffff
    33e0:	ffffffff 	.word	0xffffffff
    33e4:	ffffffff 	.word	0xffffffff
    33e8:	ffffffff 	.word	0xffffffff
    33ec:	ffffffff 	.word	0xffffffff
    33f0:	ffffffff 	.word	0xffffffff
    33f4:	ffffffff 	.word	0xffffffff
    33f8:	ffffffff 	.word	0xffffffff
    33fc:	ffffffff 	.word	0xffffffff
    3400:	ffffffff 	.word	0xffffffff
    3404:	ffffffff 	.word	0xffffffff
    3408:	ffffffff 	.word	0xffffffff
    340c:	ffffffff 	.word	0xffffffff
    3410:	ffffffff 	.word	0xffffffff
    3414:	ffffffff 	.word	0xffffffff
    3418:	ffffffff 	.word	0xffffffff
    341c:	ffffffff 	.word	0xffffffff
    3420:	ffffffff 	.word	0xffffffff
    3424:	ffffffff 	.word	0xffffffff
    3428:	ffffffff 	.word	0xffffffff
    342c:	ffffffff 	.word	0xffffffff
    3430:	ffffffff 	.word	0xffffffff
    3434:	ffffffff 	.word	0xffffffff
    3438:	ffffffff 	.word	0xffffffff
    343c:	ffffffff 	.word	0xffffffff
    3440:	ffffffff 	.word	0xffffffff
    3444:	ffffffff 	.word	0xffffffff
    3448:	ffffffff 	.word	0xffffffff
    344c:	ffffffff 	.word	0xffffffff
    3450:	ffffffff 	.word	0xffffffff
    3454:	ffffffff 	.word	0xffffffff
    3458:	ffffffff 	.word	0xffffffff
    345c:	ffffffff 	.word	0xffffffff
    3460:	ffffffff 	.word	0xffffffff
    3464:	ffffffff 	.word	0xffffffff
    3468:	ffffffff 	.word	0xffffffff
    346c:	ffffffff 	.word	0xffffffff
    3470:	ffffffff 	.word	0xffffffff
    3474:	ffffffff 	.word	0xffffffff
    3478:	ffffffff 	.word	0xffffffff
    347c:	ffffffff 	.word	0xffffffff
    3480:	ffffffff 	.word	0xffffffff
    3484:	ffffffff 	.word	0xffffffff
    3488:	ffffffff 	.word	0xffffffff
    348c:	ffffffff 	.word	0xffffffff
    3490:	ffffffff 	.word	0xffffffff
    3494:	ffffffff 	.word	0xffffffff
    3498:	ffffffff 	.word	0xffffffff
    349c:	ffffffff 	.word	0xffffffff
    34a0:	ffffffff 	.word	0xffffffff
    34a4:	ffffffff 	.word	0xffffffff
    34a8:	ffffffff 	.word	0xffffffff
    34ac:	ffffffff 	.word	0xffffffff
    34b0:	ffffffff 	.word	0xffffffff
    34b4:	ffffffff 	.word	0xffffffff
    34b8:	ffffffff 	.word	0xffffffff
    34bc:	ffffffff 	.word	0xffffffff
    34c0:	ffffffff 	.word	0xffffffff
    34c4:	ffffffff 	.word	0xffffffff
    34c8:	ffffffff 	.word	0xffffffff
    34cc:	ffffffff 	.word	0xffffffff
    34d0:	ffffffff 	.word	0xffffffff
    34d4:	ffffffff 	.word	0xffffffff
    34d8:	ffffffff 	.word	0xffffffff
    34dc:	ffffffff 	.word	0xffffffff
    34e0:	ffffffff 	.word	0xffffffff
    34e4:	ffffffff 	.word	0xffffffff
    34e8:	ffffffff 	.word	0xffffffff
    34ec:	ffffffff 	.word	0xffffffff
    34f0:	ffffffff 	.word	0xffffffff
    34f4:	ffffffff 	.word	0xffffffff
    34f8:	ffffffff 	.word	0xffffffff
    34fc:	ffffffff 	.word	0xffffffff
    3500:	ffffffff 	.word	0xffffffff
    3504:	ffffffff 	.word	0xffffffff
    3508:	ffffffff 	.word	0xffffffff
    350c:	ffffffff 	.word	0xffffffff
    3510:	ffffffff 	.word	0xffffffff
    3514:	ffffffff 	.word	0xffffffff
    3518:	ffffffff 	.word	0xffffffff
    351c:	ffffffff 	.word	0xffffffff
    3520:	ffffffff 	.word	0xffffffff
    3524:	ffffffff 	.word	0xffffffff
    3528:	ffffffff 	.word	0xffffffff
    352c:	ffffffff 	.word	0xffffffff
    3530:	ffffffff 	.word	0xffffffff
    3534:	ffffffff 	.word	0xffffffff
    3538:	ffffffff 	.word	0xffffffff
    353c:	ffffffff 	.word	0xffffffff
    3540:	ffffffff 	.word	0xffffffff
    3544:	ffffffff 	.word	0xffffffff
    3548:	ffffffff 	.word	0xffffffff
    354c:	ffffffff 	.word	0xffffffff
    3550:	ffffffff 	.word	0xffffffff
    3554:	ffffffff 	.word	0xffffffff
    3558:	ffffffff 	.word	0xffffffff
    355c:	ffffffff 	.word	0xffffffff
    3560:	ffffffff 	.word	0xffffffff
    3564:	ffffffff 	.word	0xffffffff
    3568:	ffffffff 	.word	0xffffffff
    356c:	ffffffff 	.word	0xffffffff
    3570:	ffffffff 	.word	0xffffffff
    3574:	ffffffff 	.word	0xffffffff
    3578:	ffffffff 	.word	0xffffffff
    357c:	ffffffff 	.word	0xffffffff
    3580:	ffffffff 	.word	0xffffffff
    3584:	ffffffff 	.word	0xffffffff
    3588:	ffffffff 	.word	0xffffffff
    358c:	ffffffff 	.word	0xffffffff
    3590:	ffffffff 	.word	0xffffffff
    3594:	ffffffff 	.word	0xffffffff
    3598:	ffffffff 	.word	0xffffffff
    359c:	ffffffff 	.word	0xffffffff
    35a0:	ffffffff 	.word	0xffffffff
    35a4:	ffffffff 	.word	0xffffffff
    35a8:	ffffffff 	.word	0xffffffff
    35ac:	ffffffff 	.word	0xffffffff
    35b0:	ffffffff 	.word	0xffffffff
    35b4:	ffffffff 	.word	0xffffffff
    35b8:	ffffffff 	.word	0xffffffff
    35bc:	ffffffff 	.word	0xffffffff
    35c0:	ffffffff 	.word	0xffffffff
    35c4:	ffffffff 	.word	0xffffffff
    35c8:	ffffffff 	.word	0xffffffff
    35cc:	ffffffff 	.word	0xffffffff
    35d0:	ffffffff 	.word	0xffffffff
    35d4:	ffffffff 	.word	0xffffffff
    35d8:	ffffffff 	.word	0xffffffff
    35dc:	ffffffff 	.word	0xffffffff
    35e0:	ffffffff 	.word	0xffffffff
    35e4:	ffffffff 	.word	0xffffffff
    35e8:	ffffffff 	.word	0xffffffff
    35ec:	ffffffff 	.word	0xffffffff
    35f0:	ffffffff 	.word	0xffffffff
    35f4:	ffffffff 	.word	0xffffffff
    35f8:	ffffffff 	.word	0xffffffff
    35fc:	ffffffff 	.word	0xffffffff
    3600:	ffffffff 	.word	0xffffffff
    3604:	ffffffff 	.word	0xffffffff
    3608:	ffffffff 	.word	0xffffffff
    360c:	ffffffff 	.word	0xffffffff
    3610:	ffffffff 	.word	0xffffffff
    3614:	ffffffff 	.word	0xffffffff
    3618:	ffffffff 	.word	0xffffffff
    361c:	ffffffff 	.word	0xffffffff
    3620:	ffffffff 	.word	0xffffffff
    3624:	ffffffff 	.word	0xffffffff
    3628:	ffffffff 	.word	0xffffffff
    362c:	ffffffff 	.word	0xffffffff
    3630:	ffffffff 	.word	0xffffffff
    3634:	ffffffff 	.word	0xffffffff
    3638:	ffffffff 	.word	0xffffffff
    363c:	ffffffff 	.word	0xffffffff
    3640:	ffffffff 	.word	0xffffffff
    3644:	ffffffff 	.word	0xffffffff
    3648:	ffffffff 	.word	0xffffffff
    364c:	ffffffff 	.word	0xffffffff
    3650:	ffffffff 	.word	0xffffffff
    3654:	ffffffff 	.word	0xffffffff
    3658:	ffffffff 	.word	0xffffffff
    365c:	ffffffff 	.word	0xffffffff
    3660:	ffffffff 	.word	0xffffffff
    3664:	ffffffff 	.word	0xffffffff
    3668:	ffffffff 	.word	0xffffffff
    366c:	ffffffff 	.word	0xffffffff
    3670:	ffffffff 	.word	0xffffffff
    3674:	ffffffff 	.word	0xffffffff
    3678:	ffffffff 	.word	0xffffffff
    367c:	ffffffff 	.word	0xffffffff
    3680:	ffffffff 	.word	0xffffffff
    3684:	ffffffff 	.word	0xffffffff
    3688:	ffffffff 	.word	0xffffffff
    368c:	ffffffff 	.word	0xffffffff
    3690:	ffffffff 	.word	0xffffffff
    3694:	ffffffff 	.word	0xffffffff
    3698:	ffffffff 	.word	0xffffffff
    369c:	ffffffff 	.word	0xffffffff
    36a0:	ffffffff 	.word	0xffffffff
    36a4:	ffffffff 	.word	0xffffffff
    36a8:	ffffffff 	.word	0xffffffff
    36ac:	ffffffff 	.word	0xffffffff
    36b0:	ffffffff 	.word	0xffffffff
    36b4:	ffffffff 	.word	0xffffffff
    36b8:	ffffffff 	.word	0xffffffff
    36bc:	ffffffff 	.word	0xffffffff
    36c0:	ffffffff 	.word	0xffffffff
    36c4:	ffffffff 	.word	0xffffffff
    36c8:	ffffffff 	.word	0xffffffff
    36cc:	ffffffff 	.word	0xffffffff
    36d0:	ffffffff 	.word	0xffffffff
    36d4:	ffffffff 	.word	0xffffffff
    36d8:	ffffffff 	.word	0xffffffff
    36dc:	ffffffff 	.word	0xffffffff
    36e0:	ffffffff 	.word	0xffffffff
    36e4:	ffffffff 	.word	0xffffffff
    36e8:	ffffffff 	.word	0xffffffff
    36ec:	ffffffff 	.word	0xffffffff
    36f0:	ffffffff 	.word	0xffffffff
    36f4:	ffffffff 	.word	0xffffffff
    36f8:	ffffffff 	.word	0xffffffff
    36fc:	ffffffff 	.word	0xffffffff
    3700:	ffffffff 	.word	0xffffffff
    3704:	ffffffff 	.word	0xffffffff
    3708:	ffffffff 	.word	0xffffffff
    370c:	ffffffff 	.word	0xffffffff
    3710:	ffffffff 	.word	0xffffffff
    3714:	ffffffff 	.word	0xffffffff
    3718:	ffffffff 	.word	0xffffffff
    371c:	ffffffff 	.word	0xffffffff
    3720:	ffffffff 	.word	0xffffffff
    3724:	ffffffff 	.word	0xffffffff
    3728:	ffffffff 	.word	0xffffffff
    372c:	ffffffff 	.word	0xffffffff
    3730:	ffffffff 	.word	0xffffffff
    3734:	ffffffff 	.word	0xffffffff
    3738:	ffffffff 	.word	0xffffffff
    373c:	ffffffff 	.word	0xffffffff
    3740:	ffffffff 	.word	0xffffffff
    3744:	ffffffff 	.word	0xffffffff
    3748:	ffffffff 	.word	0xffffffff
    374c:	ffffffff 	.word	0xffffffff
    3750:	ffffffff 	.word	0xffffffff
    3754:	ffffffff 	.word	0xffffffff
    3758:	ffffffff 	.word	0xffffffff
    375c:	ffffffff 	.word	0xffffffff
    3760:	ffffffff 	.word	0xffffffff
    3764:	ffffffff 	.word	0xffffffff
    3768:	ffffffff 	.word	0xffffffff
    376c:	ffffffff 	.word	0xffffffff
    3770:	ffffffff 	.word	0xffffffff
    3774:	ffffffff 	.word	0xffffffff
    3778:	ffffffff 	.word	0xffffffff
    377c:	ffffffff 	.word	0xffffffff
    3780:	ffffffff 	.word	0xffffffff
    3784:	ffffffff 	.word	0xffffffff
    3788:	ffffffff 	.word	0xffffffff
    378c:	ffffffff 	.word	0xffffffff
    3790:	ffffffff 	.word	0xffffffff
    3794:	ffffffff 	.word	0xffffffff
    3798:	ffffffff 	.word	0xffffffff
    379c:	ffffffff 	.word	0xffffffff
    37a0:	ffffffff 	.word	0xffffffff
    37a4:	ffffffff 	.word	0xffffffff
    37a8:	ffffffff 	.word	0xffffffff
    37ac:	ffffffff 	.word	0xffffffff
    37b0:	ffffffff 	.word	0xffffffff
    37b4:	ffffffff 	.word	0xffffffff
    37b8:	ffffffff 	.word	0xffffffff
    37bc:	ffffffff 	.word	0xffffffff
    37c0:	ffffffff 	.word	0xffffffff
    37c4:	ffffffff 	.word	0xffffffff
    37c8:	ffffffff 	.word	0xffffffff
    37cc:	ffffffff 	.word	0xffffffff
    37d0:	ffffffff 	.word	0xffffffff
    37d4:	ffffffff 	.word	0xffffffff
    37d8:	ffffffff 	.word	0xffffffff
    37dc:	ffffffff 	.word	0xffffffff
    37e0:	ffffffff 	.word	0xffffffff
    37e4:	ffffffff 	.word	0xffffffff
    37e8:	ffffffff 	.word	0xffffffff
    37ec:	ffffffff 	.word	0xffffffff
    37f0:	ffffffff 	.word	0xffffffff
    37f4:	ffffffff 	.word	0xffffffff
    37f8:	ffffffff 	.word	0xffffffff
    37fc:	ffffffff 	.word	0xffffffff
    3800:	ffffffff 	.word	0xffffffff
    3804:	ffffffff 	.word	0xffffffff
    3808:	ffffffff 	.word	0xffffffff
    380c:	ffffffff 	.word	0xffffffff
    3810:	ffffffff 	.word	0xffffffff
    3814:	ffffffff 	.word	0xffffffff
    3818:	ffffffff 	.word	0xffffffff
    381c:	ffffffff 	.word	0xffffffff
    3820:	ffffffff 	.word	0xffffffff
    3824:	ffffffff 	.word	0xffffffff
    3828:	ffffffff 	.word	0xffffffff
    382c:	ffffffff 	.word	0xffffffff
    3830:	ffffffff 	.word	0xffffffff
    3834:	ffffffff 	.word	0xffffffff
    3838:	ffffffff 	.word	0xffffffff
    383c:	ffffffff 	.word	0xffffffff
    3840:	ffffffff 	.word	0xffffffff
    3844:	ffffffff 	.word	0xffffffff
    3848:	ffffffff 	.word	0xffffffff
    384c:	ffffffff 	.word	0xffffffff
    3850:	ffffffff 	.word	0xffffffff
    3854:	ffffffff 	.word	0xffffffff
    3858:	ffffffff 	.word	0xffffffff
    385c:	ffffffff 	.word	0xffffffff
    3860:	ffffffff 	.word	0xffffffff
    3864:	ffffffff 	.word	0xffffffff
    3868:	ffffffff 	.word	0xffffffff
    386c:	ffffffff 	.word	0xffffffff
    3870:	ffffffff 	.word	0xffffffff
    3874:	ffffffff 	.word	0xffffffff
    3878:	ffffffff 	.word	0xffffffff
    387c:	ffffffff 	.word	0xffffffff
    3880:	ffffffff 	.word	0xffffffff
    3884:	ffffffff 	.word	0xffffffff
    3888:	ffffffff 	.word	0xffffffff
    388c:	ffffffff 	.word	0xffffffff
    3890:	ffffffff 	.word	0xffffffff
    3894:	ffffffff 	.word	0xffffffff
    3898:	ffffffff 	.word	0xffffffff
    389c:	ffffffff 	.word	0xffffffff
    38a0:	ffffffff 	.word	0xffffffff
    38a4:	ffffffff 	.word	0xffffffff
    38a8:	ffffffff 	.word	0xffffffff
    38ac:	ffffffff 	.word	0xffffffff
    38b0:	ffffffff 	.word	0xffffffff
    38b4:	ffffffff 	.word	0xffffffff
    38b8:	ffffffff 	.word	0xffffffff
    38bc:	ffffffff 	.word	0xffffffff
    38c0:	ffffffff 	.word	0xffffffff
    38c4:	ffffffff 	.word	0xffffffff
    38c8:	ffffffff 	.word	0xffffffff
    38cc:	ffffffff 	.word	0xffffffff
    38d0:	ffffffff 	.word	0xffffffff
    38d4:	ffffffff 	.word	0xffffffff
    38d8:	ffffffff 	.word	0xffffffff
    38dc:	ffffffff 	.word	0xffffffff
    38e0:	ffffffff 	.word	0xffffffff
    38e4:	ffffffff 	.word	0xffffffff
    38e8:	ffffffff 	.word	0xffffffff
    38ec:	ffffffff 	.word	0xffffffff
    38f0:	ffffffff 	.word	0xffffffff
    38f4:	ffffffff 	.word	0xffffffff
    38f8:	ffffffff 	.word	0xffffffff
    38fc:	ffffffff 	.word	0xffffffff
    3900:	ffffffff 	.word	0xffffffff
    3904:	ffffffff 	.word	0xffffffff
    3908:	ffffffff 	.word	0xffffffff
    390c:	ffffffff 	.word	0xffffffff
    3910:	ffffffff 	.word	0xffffffff
    3914:	ffffffff 	.word	0xffffffff
    3918:	ffffffff 	.word	0xffffffff
    391c:	ffffffff 	.word	0xffffffff
    3920:	ffffffff 	.word	0xffffffff
    3924:	ffffffff 	.word	0xffffffff
    3928:	ffffffff 	.word	0xffffffff
    392c:	ffffffff 	.word	0xffffffff
    3930:	ffffffff 	.word	0xffffffff
    3934:	ffffffff 	.word	0xffffffff
    3938:	ffffffff 	.word	0xffffffff
    393c:	ffffffff 	.word	0xffffffff
    3940:	ffffffff 	.word	0xffffffff
    3944:	ffffffff 	.word	0xffffffff
    3948:	ffffffff 	.word	0xffffffff
    394c:	ffffffff 	.word	0xffffffff
    3950:	ffffffff 	.word	0xffffffff
    3954:	ffffffff 	.word	0xffffffff
    3958:	ffffffff 	.word	0xffffffff
    395c:	ffffffff 	.word	0xffffffff
    3960:	ffffffff 	.word	0xffffffff
    3964:	ffffffff 	.word	0xffffffff
    3968:	ffffffff 	.word	0xffffffff
    396c:	ffffffff 	.word	0xffffffff
    3970:	ffffffff 	.word	0xffffffff
    3974:	ffffffff 	.word	0xffffffff
    3978:	ffffffff 	.word	0xffffffff
    397c:	ffffffff 	.word	0xffffffff
    3980:	ffffffff 	.word	0xffffffff
    3984:	ffffffff 	.word	0xffffffff
    3988:	ffffffff 	.word	0xffffffff
    398c:	ffffffff 	.word	0xffffffff
    3990:	ffffffff 	.word	0xffffffff
    3994:	ffffffff 	.word	0xffffffff
    3998:	ffffffff 	.word	0xffffffff
    399c:	ffffffff 	.word	0xffffffff
    39a0:	ffffffff 	.word	0xffffffff
    39a4:	ffffffff 	.word	0xffffffff
    39a8:	ffffffff 	.word	0xffffffff
    39ac:	ffffffff 	.word	0xffffffff
    39b0:	ffffffff 	.word	0xffffffff
    39b4:	ffffffff 	.word	0xffffffff
    39b8:	ffffffff 	.word	0xffffffff
    39bc:	ffffffff 	.word	0xffffffff
    39c0:	ffffffff 	.word	0xffffffff
    39c4:	ffffffff 	.word	0xffffffff
    39c8:	ffffffff 	.word	0xffffffff
    39cc:	ffffffff 	.word	0xffffffff
    39d0:	ffffffff 	.word	0xffffffff
    39d4:	ffffffff 	.word	0xffffffff
    39d8:	ffffffff 	.word	0xffffffff
    39dc:	ffffffff 	.word	0xffffffff
    39e0:	ffffffff 	.word	0xffffffff
    39e4:	ffffffff 	.word	0xffffffff
    39e8:	ffffffff 	.word	0xffffffff
    39ec:	ffffffff 	.word	0xffffffff
    39f0:	ffffffff 	.word	0xffffffff
    39f4:	ffffffff 	.word	0xffffffff
    39f8:	ffffffff 	.word	0xffffffff
    39fc:	ffffffff 	.word	0xffffffff
    3a00:	ffffffff 	.word	0xffffffff
    3a04:	ffffffff 	.word	0xffffffff
    3a08:	ffffffff 	.word	0xffffffff
    3a0c:	ffffffff 	.word	0xffffffff
    3a10:	ffffffff 	.word	0xffffffff
    3a14:	ffffffff 	.word	0xffffffff
    3a18:	ffffffff 	.word	0xffffffff
    3a1c:	ffffffff 	.word	0xffffffff
    3a20:	ffffffff 	.word	0xffffffff
    3a24:	ffffffff 	.word	0xffffffff
    3a28:	ffffffff 	.word	0xffffffff
    3a2c:	ffffffff 	.word	0xffffffff
    3a30:	ffffffff 	.word	0xffffffff
    3a34:	ffffffff 	.word	0xffffffff
    3a38:	ffffffff 	.word	0xffffffff
    3a3c:	ffffffff 	.word	0xffffffff
    3a40:	ffffffff 	.word	0xffffffff
    3a44:	ffffffff 	.word	0xffffffff
    3a48:	ffffffff 	.word	0xffffffff
    3a4c:	ffffffff 	.word	0xffffffff
    3a50:	ffffffff 	.word	0xffffffff
    3a54:	ffffffff 	.word	0xffffffff
    3a58:	ffffffff 	.word	0xffffffff
    3a5c:	ffffffff 	.word	0xffffffff
    3a60:	ffffffff 	.word	0xffffffff
    3a64:	ffffffff 	.word	0xffffffff
    3a68:	ffffffff 	.word	0xffffffff
    3a6c:	ffffffff 	.word	0xffffffff
    3a70:	ffffffff 	.word	0xffffffff
    3a74:	ffffffff 	.word	0xffffffff
    3a78:	ffffffff 	.word	0xffffffff
    3a7c:	ffffffff 	.word	0xffffffff
    3a80:	ffffffff 	.word	0xffffffff
    3a84:	ffffffff 	.word	0xffffffff
    3a88:	ffffffff 	.word	0xffffffff
    3a8c:	ffffffff 	.word	0xffffffff
    3a90:	ffffffff 	.word	0xffffffff
    3a94:	ffffffff 	.word	0xffffffff
    3a98:	ffffffff 	.word	0xffffffff
    3a9c:	ffffffff 	.word	0xffffffff
    3aa0:	ffffffff 	.word	0xffffffff
    3aa4:	ffffffff 	.word	0xffffffff
    3aa8:	ffffffff 	.word	0xffffffff
    3aac:	ffffffff 	.word	0xffffffff
    3ab0:	ffffffff 	.word	0xffffffff
    3ab4:	ffffffff 	.word	0xffffffff
    3ab8:	ffffffff 	.word	0xffffffff
    3abc:	ffffffff 	.word	0xffffffff
    3ac0:	ffffffff 	.word	0xffffffff
    3ac4:	ffffffff 	.word	0xffffffff
    3ac8:	ffffffff 	.word	0xffffffff
    3acc:	ffffffff 	.word	0xffffffff
    3ad0:	ffffffff 	.word	0xffffffff
    3ad4:	ffffffff 	.word	0xffffffff
    3ad8:	ffffffff 	.word	0xffffffff
    3adc:	ffffffff 	.word	0xffffffff
    3ae0:	ffffffff 	.word	0xffffffff
    3ae4:	ffffffff 	.word	0xffffffff
    3ae8:	ffffffff 	.word	0xffffffff
    3aec:	ffffffff 	.word	0xffffffff
    3af0:	ffffffff 	.word	0xffffffff
    3af4:	ffffffff 	.word	0xffffffff
    3af8:	ffffffff 	.word	0xffffffff
    3afc:	ffffffff 	.word	0xffffffff
    3b00:	ffffffff 	.word	0xffffffff
    3b04:	ffffffff 	.word	0xffffffff
    3b08:	ffffffff 	.word	0xffffffff
    3b0c:	ffffffff 	.word	0xffffffff
    3b10:	ffffffff 	.word	0xffffffff
    3b14:	ffffffff 	.word	0xffffffff
    3b18:	ffffffff 	.word	0xffffffff
    3b1c:	ffffffff 	.word	0xffffffff
    3b20:	ffffffff 	.word	0xffffffff
    3b24:	ffffffff 	.word	0xffffffff
    3b28:	ffffffff 	.word	0xffffffff
    3b2c:	ffffffff 	.word	0xffffffff
    3b30:	ffffffff 	.word	0xffffffff
    3b34:	ffffffff 	.word	0xffffffff
    3b38:	ffffffff 	.word	0xffffffff
    3b3c:	ffffffff 	.word	0xffffffff
    3b40:	ffffffff 	.word	0xffffffff
    3b44:	ffffffff 	.word	0xffffffff
    3b48:	ffffffff 	.word	0xffffffff
    3b4c:	ffffffff 	.word	0xffffffff
    3b50:	ffffffff 	.word	0xffffffff
    3b54:	ffffffff 	.word	0xffffffff
    3b58:	ffffffff 	.word	0xffffffff
    3b5c:	ffffffff 	.word	0xffffffff
    3b60:	ffffffff 	.word	0xffffffff
    3b64:	ffffffff 	.word	0xffffffff
    3b68:	ffffffff 	.word	0xffffffff
    3b6c:	ffffffff 	.word	0xffffffff
    3b70:	ffffffff 	.word	0xffffffff
    3b74:	ffffffff 	.word	0xffffffff
    3b78:	ffffffff 	.word	0xffffffff
    3b7c:	ffffffff 	.word	0xffffffff
    3b80:	ffffffff 	.word	0xffffffff
    3b84:	ffffffff 	.word	0xffffffff
    3b88:	ffffffff 	.word	0xffffffff
    3b8c:	ffffffff 	.word	0xffffffff
    3b90:	ffffffff 	.word	0xffffffff
    3b94:	ffffffff 	.word	0xffffffff
    3b98:	ffffffff 	.word	0xffffffff
    3b9c:	ffffffff 	.word	0xffffffff
    3ba0:	ffffffff 	.word	0xffffffff
    3ba4:	ffffffff 	.word	0xffffffff
    3ba8:	ffffffff 	.word	0xffffffff
    3bac:	ffffffff 	.word	0xffffffff
    3bb0:	ffffffff 	.word	0xffffffff
    3bb4:	ffffffff 	.word	0xffffffff
    3bb8:	ffffffff 	.word	0xffffffff
    3bbc:	ffffffff 	.word	0xffffffff
    3bc0:	ffffffff 	.word	0xffffffff
    3bc4:	ffffffff 	.word	0xffffffff
    3bc8:	ffffffff 	.word	0xffffffff
    3bcc:	ffffffff 	.word	0xffffffff
    3bd0:	ffffffff 	.word	0xffffffff
    3bd4:	ffffffff 	.word	0xffffffff
    3bd8:	ffffffff 	.word	0xffffffff
    3bdc:	ffffffff 	.word	0xffffffff
    3be0:	ffffffff 	.word	0xffffffff
    3be4:	ffffffff 	.word	0xffffffff
    3be8:	ffffffff 	.word	0xffffffff
    3bec:	ffffffff 	.word	0xffffffff
    3bf0:	ffffffff 	.word	0xffffffff
    3bf4:	ffffffff 	.word	0xffffffff
    3bf8:	ffffffff 	.word	0xffffffff
    3bfc:	ffffffff 	.word	0xffffffff
    3c00:	ffffffff 	.word	0xffffffff
    3c04:	ffffffff 	.word	0xffffffff
    3c08:	ffffffff 	.word	0xffffffff
    3c0c:	ffffffff 	.word	0xffffffff
    3c10:	ffffffff 	.word	0xffffffff
    3c14:	ffffffff 	.word	0xffffffff
    3c18:	ffffffff 	.word	0xffffffff
    3c1c:	ffffffff 	.word	0xffffffff
    3c20:	ffffffff 	.word	0xffffffff
    3c24:	ffffffff 	.word	0xffffffff
    3c28:	ffffffff 	.word	0xffffffff
    3c2c:	ffffffff 	.word	0xffffffff
    3c30:	ffffffff 	.word	0xffffffff
    3c34:	ffffffff 	.word	0xffffffff
    3c38:	ffffffff 	.word	0xffffffff
    3c3c:	ffffffff 	.word	0xffffffff
    3c40:	ffffffff 	.word	0xffffffff
    3c44:	ffffffff 	.word	0xffffffff
    3c48:	ffffffff 	.word	0xffffffff
    3c4c:	ffffffff 	.word	0xffffffff
    3c50:	ffffffff 	.word	0xffffffff
    3c54:	ffffffff 	.word	0xffffffff
    3c58:	ffffffff 	.word	0xffffffff
    3c5c:	ffffffff 	.word	0xffffffff
    3c60:	ffffffff 	.word	0xffffffff
    3c64:	ffffffff 	.word	0xffffffff
    3c68:	ffffffff 	.word	0xffffffff
    3c6c:	ffffffff 	.word	0xffffffff
    3c70:	ffffffff 	.word	0xffffffff
    3c74:	ffffffff 	.word	0xffffffff
    3c78:	ffffffff 	.word	0xffffffff
    3c7c:	ffffffff 	.word	0xffffffff
    3c80:	ffffffff 	.word	0xffffffff
    3c84:	ffffffff 	.word	0xffffffff
    3c88:	ffffffff 	.word	0xffffffff
    3c8c:	ffffffff 	.word	0xffffffff
    3c90:	ffffffff 	.word	0xffffffff
    3c94:	ffffffff 	.word	0xffffffff
    3c98:	ffffffff 	.word	0xffffffff
    3c9c:	ffffffff 	.word	0xffffffff
    3ca0:	ffffffff 	.word	0xffffffff
    3ca4:	ffffffff 	.word	0xffffffff
    3ca8:	ffffffff 	.word	0xffffffff
    3cac:	ffffffff 	.word	0xffffffff
    3cb0:	ffffffff 	.word	0xffffffff
    3cb4:	ffffffff 	.word	0xffffffff
    3cb8:	ffffffff 	.word	0xffffffff
    3cbc:	ffffffff 	.word	0xffffffff
    3cc0:	ffffffff 	.word	0xffffffff
    3cc4:	ffffffff 	.word	0xffffffff
    3cc8:	ffffffff 	.word	0xffffffff
    3ccc:	ffffffff 	.word	0xffffffff
    3cd0:	ffffffff 	.word	0xffffffff
    3cd4:	ffffffff 	.word	0xffffffff
    3cd8:	ffffffff 	.word	0xffffffff
    3cdc:	ffffffff 	.word	0xffffffff
    3ce0:	ffffffff 	.word	0xffffffff
    3ce4:	ffffffff 	.word	0xffffffff
    3ce8:	ffffffff 	.word	0xffffffff
    3cec:	ffffffff 	.word	0xffffffff
    3cf0:	ffffffff 	.word	0xffffffff
    3cf4:	ffffffff 	.word	0xffffffff
    3cf8:	ffffffff 	.word	0xffffffff
    3cfc:	ffffffff 	.word	0xffffffff
    3d00:	ffffffff 	.word	0xffffffff
    3d04:	ffffffff 	.word	0xffffffff
    3d08:	ffffffff 	.word	0xffffffff
    3d0c:	ffffffff 	.word	0xffffffff
    3d10:	ffffffff 	.word	0xffffffff
    3d14:	ffffffff 	.word	0xffffffff
    3d18:	ffffffff 	.word	0xffffffff
    3d1c:	ffffffff 	.word	0xffffffff
    3d20:	ffffffff 	.word	0xffffffff
    3d24:	ffffffff 	.word	0xffffffff
    3d28:	ffffffff 	.word	0xffffffff
    3d2c:	ffffffff 	.word	0xffffffff
    3d30:	ffffffff 	.word	0xffffffff
    3d34:	ffffffff 	.word	0xffffffff
    3d38:	ffffffff 	.word	0xffffffff
    3d3c:	ffffffff 	.word	0xffffffff
    3d40:	ffffffff 	.word	0xffffffff
    3d44:	ffffffff 	.word	0xffffffff
    3d48:	ffffffff 	.word	0xffffffff
    3d4c:	ffffffff 	.word	0xffffffff
    3d50:	ffffffff 	.word	0xffffffff
    3d54:	ffffffff 	.word	0xffffffff
    3d58:	ffffffff 	.word	0xffffffff
    3d5c:	ffffffff 	.word	0xffffffff
    3d60:	ffffffff 	.word	0xffffffff
    3d64:	ffffffff 	.word	0xffffffff
    3d68:	ffffffff 	.word	0xffffffff
    3d6c:	ffffffff 	.word	0xffffffff
    3d70:	ffffffff 	.word	0xffffffff
    3d74:	ffffffff 	.word	0xffffffff
    3d78:	ffffffff 	.word	0xffffffff
    3d7c:	ffffffff 	.word	0xffffffff
    3d80:	ffffffff 	.word	0xffffffff
    3d84:	ffffffff 	.word	0xffffffff
    3d88:	ffffffff 	.word	0xffffffff
    3d8c:	ffffffff 	.word	0xffffffff
    3d90:	ffffffff 	.word	0xffffffff
    3d94:	ffffffff 	.word	0xffffffff
    3d98:	ffffffff 	.word	0xffffffff
    3d9c:	ffffffff 	.word	0xffffffff
    3da0:	ffffffff 	.word	0xffffffff
    3da4:	ffffffff 	.word	0xffffffff
    3da8:	ffffffff 	.word	0xffffffff
    3dac:	ffffffff 	.word	0xffffffff
    3db0:	ffffffff 	.word	0xffffffff
    3db4:	ffffffff 	.word	0xffffffff
    3db8:	ffffffff 	.word	0xffffffff
    3dbc:	ffffffff 	.word	0xffffffff
    3dc0:	ffffffff 	.word	0xffffffff
    3dc4:	ffffffff 	.word	0xffffffff
    3dc8:	ffffffff 	.word	0xffffffff
    3dcc:	ffffffff 	.word	0xffffffff
    3dd0:	ffffffff 	.word	0xffffffff
    3dd4:	ffffffff 	.word	0xffffffff
    3dd8:	ffffffff 	.word	0xffffffff
    3ddc:	ffffffff 	.word	0xffffffff
    3de0:	ffffffff 	.word	0xffffffff
    3de4:	ffffffff 	.word	0xffffffff
    3de8:	ffffffff 	.word	0xffffffff
    3dec:	ffffffff 	.word	0xffffffff
    3df0:	ffffffff 	.word	0xffffffff
    3df4:	ffffffff 	.word	0xffffffff
    3df8:	ffffffff 	.word	0xffffffff
    3dfc:	ffffffff 	.word	0xffffffff
    3e00:	ffffffff 	.word	0xffffffff
    3e04:	ffffffff 	.word	0xffffffff
    3e08:	ffffffff 	.word	0xffffffff
    3e0c:	ffffffff 	.word	0xffffffff
    3e10:	ffffffff 	.word	0xffffffff
    3e14:	ffffffff 	.word	0xffffffff
    3e18:	ffffffff 	.word	0xffffffff
    3e1c:	ffffffff 	.word	0xffffffff
    3e20:	ffffffff 	.word	0xffffffff
    3e24:	ffffffff 	.word	0xffffffff
    3e28:	ffffffff 	.word	0xffffffff
    3e2c:	ffffffff 	.word	0xffffffff
    3e30:	ffffffff 	.word	0xffffffff
    3e34:	ffffffff 	.word	0xffffffff
    3e38:	ffffffff 	.word	0xffffffff
    3e3c:	ffffffff 	.word	0xffffffff
    3e40:	ffffffff 	.word	0xffffffff
    3e44:	ffffffff 	.word	0xffffffff
    3e48:	ffffffff 	.word	0xffffffff
    3e4c:	ffffffff 	.word	0xffffffff
    3e50:	ffffffff 	.word	0xffffffff
    3e54:	ffffffff 	.word	0xffffffff
    3e58:	ffffffff 	.word	0xffffffff
    3e5c:	ffffffff 	.word	0xffffffff
    3e60:	ffffffff 	.word	0xffffffff
    3e64:	ffffffff 	.word	0xffffffff
    3e68:	ffffffff 	.word	0xffffffff
    3e6c:	ffffffff 	.word	0xffffffff
    3e70:	ffffffff 	.word	0xffffffff
    3e74:	ffffffff 	.word	0xffffffff
    3e78:	ffffffff 	.word	0xffffffff
    3e7c:	ffffffff 	.word	0xffffffff
    3e80:	ffffffff 	.word	0xffffffff
    3e84:	ffffffff 	.word	0xffffffff
    3e88:	ffffffff 	.word	0xffffffff
    3e8c:	ffffffff 	.word	0xffffffff
    3e90:	ffffffff 	.word	0xffffffff
    3e94:	ffffffff 	.word	0xffffffff
    3e98:	ffffffff 	.word	0xffffffff
    3e9c:	ffffffff 	.word	0xffffffff
    3ea0:	ffffffff 	.word	0xffffffff
    3ea4:	ffffffff 	.word	0xffffffff
    3ea8:	ffffffff 	.word	0xffffffff
    3eac:	ffffffff 	.word	0xffffffff
    3eb0:	ffffffff 	.word	0xffffffff
    3eb4:	ffffffff 	.word	0xffffffff
    3eb8:	ffffffff 	.word	0xffffffff
    3ebc:	ffffffff 	.word	0xffffffff
    3ec0:	ffffffff 	.word	0xffffffff
    3ec4:	ffffffff 	.word	0xffffffff
    3ec8:	ffffffff 	.word	0xffffffff
    3ecc:	ffffffff 	.word	0xffffffff
    3ed0:	ffffffff 	.word	0xffffffff
    3ed4:	ffffffff 	.word	0xffffffff
    3ed8:	ffffffff 	.word	0xffffffff
    3edc:	ffffffff 	.word	0xffffffff
    3ee0:	ffffffff 	.word	0xffffffff
    3ee4:	ffffffff 	.word	0xffffffff
    3ee8:	ffffffff 	.word	0xffffffff
    3eec:	ffffffff 	.word	0xffffffff
    3ef0:	ffffffff 	.word	0xffffffff
    3ef4:	ffffffff 	.word	0xffffffff
    3ef8:	ffffffff 	.word	0xffffffff
    3efc:	ffffffff 	.word	0xffffffff
    3f00:	ffffffff 	.word	0xffffffff
    3f04:	ffffffff 	.word	0xffffffff
    3f08:	ffffffff 	.word	0xffffffff
    3f0c:	ffffffff 	.word	0xffffffff
    3f10:	ffffffff 	.word	0xffffffff
    3f14:	ffffffff 	.word	0xffffffff
    3f18:	ffffffff 	.word	0xffffffff
    3f1c:	ffffffff 	.word	0xffffffff
    3f20:	ffffffff 	.word	0xffffffff
    3f24:	ffffffff 	.word	0xffffffff
    3f28:	ffffffff 	.word	0xffffffff
    3f2c:	ffffffff 	.word	0xffffffff
    3f30:	ffffffff 	.word	0xffffffff
    3f34:	ffffffff 	.word	0xffffffff
    3f38:	ffffffff 	.word	0xffffffff
    3f3c:	ffffffff 	.word	0xffffffff
    3f40:	ffffffff 	.word	0xffffffff
    3f44:	ffffffff 	.word	0xffffffff
    3f48:	ffffffff 	.word	0xffffffff
    3f4c:	ffffffff 	.word	0xffffffff
    3f50:	ffffffff 	.word	0xffffffff
    3f54:	ffffffff 	.word	0xffffffff
    3f58:	ffffffff 	.word	0xffffffff
    3f5c:	ffffffff 	.word	0xffffffff
    3f60:	ffffffff 	.word	0xffffffff
    3f64:	ffffffff 	.word	0xffffffff
    3f68:	ffffffff 	.word	0xffffffff
    3f6c:	ffffffff 	.word	0xffffffff
    3f70:	ffffffff 	.word	0xffffffff
    3f74:	ffffffff 	.word	0xffffffff
    3f78:	ffffffff 	.word	0xffffffff
    3f7c:	ffffffff 	.word	0xffffffff
    3f80:	ffffffff 	.word	0xffffffff
    3f84:	ffffffff 	.word	0xffffffff
    3f88:	ffffffff 	.word	0xffffffff
    3f8c:	ffffffff 	.word	0xffffffff
    3f90:	ffffffff 	.word	0xffffffff
    3f94:	ffffffff 	.word	0xffffffff
    3f98:	ffffffff 	.word	0xffffffff
    3f9c:	ffffffff 	.word	0xffffffff
    3fa0:	ffffffff 	.word	0xffffffff
    3fa4:	ffffffff 	.word	0xffffffff
    3fa8:	ffffffff 	.word	0xffffffff
    3fac:	ffffffff 	.word	0xffffffff
    3fb0:	ffffffff 	.word	0xffffffff
    3fb4:	ffffffff 	.word	0xffffffff
    3fb8:	ffffffff 	.word	0xffffffff
    3fbc:	ffffffff 	.word	0xffffffff
    3fc0:	ffffffff 	.word	0xffffffff
    3fc4:	ffffffff 	.word	0xffffffff
    3fc8:	ffffffff 	.word	0xffffffff
    3fcc:	ffffffff 	.word	0xffffffff
    3fd0:	ffffffff 	.word	0xffffffff
    3fd4:	ffffffff 	.word	0xffffffff
    3fd8:	ffffffff 	.word	0xffffffff
    3fdc:	ffffffff 	.word	0xffffffff
    3fe0:	ffffffff 	.word	0xffffffff
    3fe4:	ffffffff 	.word	0xffffffff
    3fe8:	ffffffff 	.word	0xffffffff
    3fec:	ffffffff 	.word	0xffffffff
    3ff0:	ffffffff 	.word	0xffffffff
    3ff4:	ffffffff 	.word	0xffffffff
    3ff8:	ffffffff 	.word	0xffffffff
    3ffc:	ffffffff 	.word	0xffffffff
    4000:	ffffffff 	.word	0xffffffff
    4004:	ffffffff 	.word	0xffffffff
    4008:	ffffffff 	.word	0xffffffff
    400c:	ffffffff 	.word	0xffffffff
    4010:	ffffffff 	.word	0xffffffff
    4014:	ffffffff 	.word	0xffffffff
    4018:	ffffffff 	.word	0xffffffff
    401c:	ffffffff 	.word	0xffffffff
    4020:	ffffffff 	.word	0xffffffff
    4024:	ffffffff 	.word	0xffffffff
    4028:	ffffffff 	.word	0xffffffff
    402c:	ffffffff 	.word	0xffffffff
    4030:	ffffffff 	.word	0xffffffff
    4034:	ffffffff 	.word	0xffffffff
    4038:	ffffffff 	.word	0xffffffff
    403c:	ffffffff 	.word	0xffffffff
    4040:	ffffffff 	.word	0xffffffff
    4044:	ffffffff 	.word	0xffffffff
    4048:	ffffffff 	.word	0xffffffff
    404c:	ffffffff 	.word	0xffffffff
    4050:	ffffffff 	.word	0xffffffff
    4054:	ffffffff 	.word	0xffffffff
    4058:	ffffffff 	.word	0xffffffff
    405c:	ffffffff 	.word	0xffffffff
    4060:	ffffffff 	.word	0xffffffff
    4064:	ffffffff 	.word	0xffffffff
    4068:	ffffffff 	.word	0xffffffff
    406c:	ffffffff 	.word	0xffffffff
    4070:	ffffffff 	.word	0xffffffff
    4074:	ffffffff 	.word	0xffffffff
    4078:	ffffffff 	.word	0xffffffff
    407c:	ffffffff 	.word	0xffffffff
    4080:	ffffffff 	.word	0xffffffff
    4084:	ffffffff 	.word	0xffffffff
    4088:	ffffffff 	.word	0xffffffff
    408c:	ffffffff 	.word	0xffffffff
    4090:	ffffffff 	.word	0xffffffff
    4094:	ffffffff 	.word	0xffffffff
    4098:	ffffffff 	.word	0xffffffff
    409c:	ffffffff 	.word	0xffffffff
    40a0:	ffffffff 	.word	0xffffffff
    40a4:	ffffffff 	.word	0xffffffff
    40a8:	ffffffff 	.word	0xffffffff
    40ac:	ffffffff 	.word	0xffffffff
    40b0:	ffffffff 	.word	0xffffffff
    40b4:	ffffffff 	.word	0xffffffff
    40b8:	ffffffff 	.word	0xffffffff
    40bc:	ffffffff 	.word	0xffffffff
    40c0:	ffffffff 	.word	0xffffffff
    40c4:	ffffffff 	.word	0xffffffff
    40c8:	ffffffff 	.word	0xffffffff
    40cc:	ffffffff 	.word	0xffffffff
    40d0:	ffffffff 	.word	0xffffffff
    40d4:	ffffffff 	.word	0xffffffff
    40d8:	ffffffff 	.word	0xffffffff
    40dc:	ffffffff 	.word	0xffffffff
    40e0:	ffffffff 	.word	0xffffffff
    40e4:	ffffffff 	.word	0xffffffff
    40e8:	ffffffff 	.word	0xffffffff
    40ec:	ffffffff 	.word	0xffffffff
    40f0:	ffffffff 	.word	0xffffffff
    40f4:	ffffffff 	.word	0xffffffff
    40f8:	ffffffff 	.word	0xffffffff
    40fc:	ffffffff 	.word	0xffffffff
    4100:	ffffffff 	.word	0xffffffff
    4104:	ffffffff 	.word	0xffffffff
    4108:	ffffffff 	.word	0xffffffff
    410c:	ffffffff 	.word	0xffffffff
    4110:	ffffffff 	.word	0xffffffff
    4114:	ffffffff 	.word	0xffffffff
    4118:	ffffffff 	.word	0xffffffff
    411c:	ffffffff 	.word	0xffffffff
    4120:	ffffffff 	.word	0xffffffff
    4124:	ffffffff 	.word	0xffffffff
    4128:	ffffffff 	.word	0xffffffff
    412c:	ffffffff 	.word	0xffffffff
    4130:	ffffffff 	.word	0xffffffff
    4134:	ffffffff 	.word	0xffffffff
    4138:	ffffffff 	.word	0xffffffff
    413c:	ffffffff 	.word	0xffffffff
    4140:	ffffffff 	.word	0xffffffff
    4144:	ffffffff 	.word	0xffffffff
    4148:	ffffffff 	.word	0xffffffff
    414c:	ffffffff 	.word	0xffffffff
    4150:	ffffffff 	.word	0xffffffff
    4154:	ffffffff 	.word	0xffffffff
    4158:	ffffffff 	.word	0xffffffff
    415c:	ffffffff 	.word	0xffffffff
    4160:	ffffffff 	.word	0xffffffff
    4164:	ffffffff 	.word	0xffffffff
    4168:	ffffffff 	.word	0xffffffff
    416c:	ffffffff 	.word	0xffffffff
    4170:	ffffffff 	.word	0xffffffff
    4174:	ffffffff 	.word	0xffffffff
    4178:	ffffffff 	.word	0xffffffff
    417c:	ffffffff 	.word	0xffffffff
    4180:	ffffffff 	.word	0xffffffff
    4184:	ffffffff 	.word	0xffffffff
    4188:	ffffffff 	.word	0xffffffff
    418c:	ffffffff 	.word	0xffffffff
    4190:	ffffffff 	.word	0xffffffff
    4194:	ffffffff 	.word	0xffffffff
    4198:	ffffffff 	.word	0xffffffff
    419c:	ffffffff 	.word	0xffffffff
    41a0:	ffffffff 	.word	0xffffffff
    41a4:	ffffffff 	.word	0xffffffff
    41a8:	ffffffff 	.word	0xffffffff
    41ac:	ffffffff 	.word	0xffffffff
    41b0:	ffffffff 	.word	0xffffffff
    41b4:	ffffffff 	.word	0xffffffff
    41b8:	ffffffff 	.word	0xffffffff
    41bc:	ffffffff 	.word	0xffffffff
    41c0:	ffffffff 	.word	0xffffffff
    41c4:	ffffffff 	.word	0xffffffff
    41c8:	ffffffff 	.word	0xffffffff
    41cc:	ffffffff 	.word	0xffffffff
    41d0:	ffffffff 	.word	0xffffffff
    41d4:	ffffffff 	.word	0xffffffff
    41d8:	ffffffff 	.word	0xffffffff
    41dc:	ffffffff 	.word	0xffffffff
    41e0:	ffffffff 	.word	0xffffffff
    41e4:	ffffffff 	.word	0xffffffff
    41e8:	ffffffff 	.word	0xffffffff
    41ec:	ffffffff 	.word	0xffffffff
    41f0:	ffffffff 	.word	0xffffffff
    41f4:	ffffffff 	.word	0xffffffff
    41f8:	ffffffff 	.word	0xffffffff
    41fc:	ffffffff 	.word	0xffffffff
    4200:	ffffffff 	.word	0xffffffff
    4204:	ffffffff 	.word	0xffffffff
    4208:	ffffffff 	.word	0xffffffff
    420c:	ffffffff 	.word	0xffffffff
    4210:	ffffffff 	.word	0xffffffff
    4214:	ffffffff 	.word	0xffffffff
    4218:	ffffffff 	.word	0xffffffff
    421c:	ffffffff 	.word	0xffffffff
    4220:	ffffffff 	.word	0xffffffff
    4224:	ffffffff 	.word	0xffffffff
    4228:	ffffffff 	.word	0xffffffff
    422c:	ffffffff 	.word	0xffffffff
    4230:	ffffffff 	.word	0xffffffff
    4234:	ffffffff 	.word	0xffffffff
    4238:	ffffffff 	.word	0xffffffff
    423c:	ffffffff 	.word	0xffffffff
    4240:	ffffffff 	.word	0xffffffff
    4244:	ffffffff 	.word	0xffffffff
    4248:	ffffffff 	.word	0xffffffff
    424c:	ffffffff 	.word	0xffffffff
    4250:	ffffffff 	.word	0xffffffff
    4254:	ffffffff 	.word	0xffffffff
    4258:	ffffffff 	.word	0xffffffff
    425c:	ffffffff 	.word	0xffffffff
    4260:	ffffffff 	.word	0xffffffff
    4264:	ffffffff 	.word	0xffffffff
    4268:	ffffffff 	.word	0xffffffff
    426c:	ffffffff 	.word	0xffffffff
    4270:	ffffffff 	.word	0xffffffff
    4274:	ffffffff 	.word	0xffffffff
    4278:	ffffffff 	.word	0xffffffff
    427c:	ffffffff 	.word	0xffffffff
    4280:	ffffffff 	.word	0xffffffff
    4284:	ffffffff 	.word	0xffffffff
    4288:	ffffffff 	.word	0xffffffff
    428c:	ffffffff 	.word	0xffffffff
    4290:	ffffffff 	.word	0xffffffff
    4294:	ffffffff 	.word	0xffffffff
    4298:	ffffffff 	.word	0xffffffff
    429c:	ffffffff 	.word	0xffffffff
    42a0:	ffffffff 	.word	0xffffffff
    42a4:	ffffffff 	.word	0xffffffff
    42a8:	ffffffff 	.word	0xffffffff
    42ac:	ffffffff 	.word	0xffffffff
    42b0:	ffffffff 	.word	0xffffffff
    42b4:	ffffffff 	.word	0xffffffff
    42b8:	ffffffff 	.word	0xffffffff
    42bc:	ffffffff 	.word	0xffffffff
    42c0:	ffffffff 	.word	0xffffffff
    42c4:	ffffffff 	.word	0xffffffff
    42c8:	ffffffff 	.word	0xffffffff
    42cc:	ffffffff 	.word	0xffffffff
    42d0:	ffffffff 	.word	0xffffffff
    42d4:	ffffffff 	.word	0xffffffff
    42d8:	ffffffff 	.word	0xffffffff
    42dc:	ffffffff 	.word	0xffffffff
    42e0:	ffffffff 	.word	0xffffffff
    42e4:	ffffffff 	.word	0xffffffff
    42e8:	ffffffff 	.word	0xffffffff
    42ec:	ffffffff 	.word	0xffffffff
    42f0:	ffffffff 	.word	0xffffffff
    42f4:	ffffffff 	.word	0xffffffff
    42f8:	ffffffff 	.word	0xffffffff
    42fc:	ffffffff 	.word	0xffffffff
    4300:	ffffffff 	.word	0xffffffff
    4304:	ffffffff 	.word	0xffffffff
    4308:	ffffffff 	.word	0xffffffff
    430c:	ffffffff 	.word	0xffffffff
    4310:	ffffffff 	.word	0xffffffff
    4314:	ffffffff 	.word	0xffffffff
    4318:	ffffffff 	.word	0xffffffff
    431c:	ffffffff 	.word	0xffffffff
    4320:	ffffffff 	.word	0xffffffff
    4324:	ffffffff 	.word	0xffffffff
    4328:	ffffffff 	.word	0xffffffff
    432c:	ffffffff 	.word	0xffffffff
    4330:	ffffffff 	.word	0xffffffff
    4334:	ffffffff 	.word	0xffffffff
    4338:	ffffffff 	.word	0xffffffff
    433c:	ffffffff 	.word	0xffffffff
    4340:	ffffffff 	.word	0xffffffff
    4344:	ffffffff 	.word	0xffffffff
    4348:	ffffffff 	.word	0xffffffff
    434c:	ffffffff 	.word	0xffffffff
    4350:	ffffffff 	.word	0xffffffff
    4354:	ffffffff 	.word	0xffffffff
    4358:	ffffffff 	.word	0xffffffff
    435c:	ffffffff 	.word	0xffffffff
    4360:	ffffffff 	.word	0xffffffff
    4364:	ffffffff 	.word	0xffffffff
    4368:	ffffffff 	.word	0xffffffff
    436c:	ffffffff 	.word	0xffffffff
    4370:	ffffffff 	.word	0xffffffff
    4374:	ffffffff 	.word	0xffffffff
    4378:	ffffffff 	.word	0xffffffff
    437c:	ffffffff 	.word	0xffffffff
    4380:	ffffffff 	.word	0xffffffff
    4384:	ffffffff 	.word	0xffffffff
    4388:	ffffffff 	.word	0xffffffff
    438c:	ffffffff 	.word	0xffffffff
    4390:	ffffffff 	.word	0xffffffff
    4394:	ffffffff 	.word	0xffffffff
    4398:	ffffffff 	.word	0xffffffff
    439c:	ffffffff 	.word	0xffffffff
    43a0:	ffffffff 	.word	0xffffffff
    43a4:	ffffffff 	.word	0xffffffff
    43a8:	ffffffff 	.word	0xffffffff
    43ac:	ffffffff 	.word	0xffffffff
    43b0:	ffffffff 	.word	0xffffffff
    43b4:	ffffffff 	.word	0xffffffff
    43b8:	ffffffff 	.word	0xffffffff
    43bc:	ffffffff 	.word	0xffffffff
    43c0:	ffffffff 	.word	0xffffffff
    43c4:	ffffffff 	.word	0xffffffff
    43c8:	ffffffff 	.word	0xffffffff
    43cc:	ffffffff 	.word	0xffffffff
    43d0:	ffffffff 	.word	0xffffffff
    43d4:	ffffffff 	.word	0xffffffff
    43d8:	ffffffff 	.word	0xffffffff
    43dc:	ffffffff 	.word	0xffffffff
    43e0:	ffffffff 	.word	0xffffffff
    43e4:	ffffffff 	.word	0xffffffff
    43e8:	ffffffff 	.word	0xffffffff
    43ec:	ffffffff 	.word	0xffffffff
    43f0:	ffffffff 	.word	0xffffffff
    43f4:	ffffffff 	.word	0xffffffff
    43f8:	ffffffff 	.word	0xffffffff
    43fc:	ffffffff 	.word	0xffffffff

00004400 <__do_global_dtors_aux>:
    4400:	b510      	push	{r4, lr}
    4402:	4c06      	ldr	r4, [pc, #24]	; (441c <__do_global_dtors_aux+0x1c>)
    4404:	7823      	ldrb	r3, [r4, #0]
    4406:	2b00      	cmp	r3, #0
    4408:	d107      	bne.n	441a <__do_global_dtors_aux+0x1a>
    440a:	4b05      	ldr	r3, [pc, #20]	; (4420 <__do_global_dtors_aux+0x20>)
    440c:	2b00      	cmp	r3, #0
    440e:	d002      	beq.n	4416 <__do_global_dtors_aux+0x16>
    4410:	4804      	ldr	r0, [pc, #16]	; (4424 <__do_global_dtors_aux+0x24>)
    4412:	e000      	b.n	4416 <__do_global_dtors_aux+0x16>
    4414:	bf00      	nop
    4416:	2301      	movs	r3, #1
    4418:	7023      	strb	r3, [r4, #0]
    441a:	bd10      	pop	{r4, pc}
    441c:	20000088 	.word	0x20000088
    4420:	00000000 	.word	0x00000000
    4424:	00018570 	.word	0x00018570

00004428 <frame_dummy>:
    4428:	4b08      	ldr	r3, [pc, #32]	; (444c <frame_dummy+0x24>)
    442a:	b510      	push	{r4, lr}
    442c:	2b00      	cmp	r3, #0
    442e:	d003      	beq.n	4438 <frame_dummy+0x10>
    4430:	4907      	ldr	r1, [pc, #28]	; (4450 <frame_dummy+0x28>)
    4432:	4808      	ldr	r0, [pc, #32]	; (4454 <frame_dummy+0x2c>)
    4434:	e000      	b.n	4438 <frame_dummy+0x10>
    4436:	bf00      	nop
    4438:	4807      	ldr	r0, [pc, #28]	; (4458 <frame_dummy+0x30>)
    443a:	6803      	ldr	r3, [r0, #0]
    443c:	2b00      	cmp	r3, #0
    443e:	d100      	bne.n	4442 <frame_dummy+0x1a>
    4440:	bd10      	pop	{r4, pc}
    4442:	4b06      	ldr	r3, [pc, #24]	; (445c <frame_dummy+0x34>)
    4444:	2b00      	cmp	r3, #0
    4446:	d0fb      	beq.n	4440 <frame_dummy+0x18>
    4448:	4798      	blx	r3
    444a:	e7f9      	b.n	4440 <frame_dummy+0x18>
    444c:	00000000 	.word	0x00000000
    4450:	2000008c 	.word	0x2000008c
    4454:	00018570 	.word	0x00018570
    4458:	00018570 	.word	0x00018570
    445c:	00000000 	.word	0x00000000

00004460 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    4460:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    4462:	2000      	movs	r0, #0
    4464:	4b08      	ldr	r3, [pc, #32]	; (4488 <delay_init+0x28>)
    4466:	4798      	blx	r3
    4468:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    446a:	4c08      	ldr	r4, [pc, #32]	; (448c <delay_init+0x2c>)
    446c:	21fa      	movs	r1, #250	; 0xfa
    446e:	0089      	lsls	r1, r1, #2
    4470:	47a0      	blx	r4
    4472:	4b07      	ldr	r3, [pc, #28]	; (4490 <delay_init+0x30>)
    4474:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    4476:	4907      	ldr	r1, [pc, #28]	; (4494 <delay_init+0x34>)
    4478:	0028      	movs	r0, r5
    447a:	47a0      	blx	r4
    447c:	4b06      	ldr	r3, [pc, #24]	; (4498 <delay_init+0x38>)
    447e:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    4480:	2205      	movs	r2, #5
    4482:	4b06      	ldr	r3, [pc, #24]	; (449c <delay_init+0x3c>)
    4484:	601a      	str	r2, [r3, #0]
}
    4486:	bd70      	pop	{r4, r5, r6, pc}
    4488:	00006891 	.word	0x00006891
    448c:	00012edd 	.word	0x00012edd
    4490:	20000000 	.word	0x20000000
    4494:	000f4240 	.word	0x000f4240
    4498:	20000004 	.word	0x20000004
    449c:	e000e010 	.word	0xe000e010

000044a0 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    44a0:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    44a2:	4b08      	ldr	r3, [pc, #32]	; (44c4 <delay_cycles_us+0x24>)
    44a4:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    44a6:	4a08      	ldr	r2, [pc, #32]	; (44c8 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    44a8:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    44aa:	2180      	movs	r1, #128	; 0x80
    44ac:	0249      	lsls	r1, r1, #9
	while (n--) {
    44ae:	3801      	subs	r0, #1
    44b0:	d307      	bcc.n	44c2 <delay_cycles_us+0x22>
	if (n > 0) {
    44b2:	2c00      	cmp	r4, #0
    44b4:	d0fb      	beq.n	44ae <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    44b6:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    44b8:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    44ba:	6813      	ldr	r3, [r2, #0]
    44bc:	420b      	tst	r3, r1
    44be:	d0fc      	beq.n	44ba <delay_cycles_us+0x1a>
    44c0:	e7f5      	b.n	44ae <delay_cycles_us+0xe>
	}
}
    44c2:	bd30      	pop	{r4, r5, pc}
    44c4:	20000004 	.word	0x20000004
    44c8:	e000e010 	.word	0xe000e010

000044cc <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    44cc:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    44ce:	4b08      	ldr	r3, [pc, #32]	; (44f0 <delay_cycles_ms+0x24>)
    44d0:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    44d2:	4a08      	ldr	r2, [pc, #32]	; (44f4 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    44d4:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    44d6:	2180      	movs	r1, #128	; 0x80
    44d8:	0249      	lsls	r1, r1, #9
	while (n--) {
    44da:	3801      	subs	r0, #1
    44dc:	d307      	bcc.n	44ee <delay_cycles_ms+0x22>
	if (n > 0) {
    44de:	2c00      	cmp	r4, #0
    44e0:	d0fb      	beq.n	44da <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    44e2:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    44e4:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    44e6:	6813      	ldr	r3, [r2, #0]
    44e8:	420b      	tst	r3, r1
    44ea:	d0fc      	beq.n	44e6 <delay_cycles_ms+0x1a>
    44ec:	e7f5      	b.n	44da <delay_cycles_ms+0xe>
	}
}
    44ee:	bd30      	pop	{r4, r5, pc}
    44f0:	20000000 	.word	0x20000000
    44f4:	e000e010 	.word	0xe000e010

000044f8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    44f8:	4b0c      	ldr	r3, [pc, #48]	; (452c <cpu_irq_enter_critical+0x34>)
    44fa:	681b      	ldr	r3, [r3, #0]
    44fc:	2b00      	cmp	r3, #0
    44fe:	d106      	bne.n	450e <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4500:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    4504:	2b00      	cmp	r3, #0
    4506:	d007      	beq.n	4518 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    4508:	2200      	movs	r2, #0
    450a:	4b09      	ldr	r3, [pc, #36]	; (4530 <cpu_irq_enter_critical+0x38>)
    450c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    450e:	4a07      	ldr	r2, [pc, #28]	; (452c <cpu_irq_enter_critical+0x34>)
    4510:	6813      	ldr	r3, [r2, #0]
    4512:	3301      	adds	r3, #1
    4514:	6013      	str	r3, [r2, #0]
}
    4516:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    4518:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    451a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    451e:	2200      	movs	r2, #0
    4520:	4b04      	ldr	r3, [pc, #16]	; (4534 <cpu_irq_enter_critical+0x3c>)
    4522:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    4524:	3201      	adds	r2, #1
    4526:	4b02      	ldr	r3, [pc, #8]	; (4530 <cpu_irq_enter_critical+0x38>)
    4528:	701a      	strb	r2, [r3, #0]
    452a:	e7f0      	b.n	450e <cpu_irq_enter_critical+0x16>
    452c:	200000a4 	.word	0x200000a4
    4530:	200000a8 	.word	0x200000a8
    4534:	20000008 	.word	0x20000008

00004538 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    4538:	4b08      	ldr	r3, [pc, #32]	; (455c <cpu_irq_leave_critical+0x24>)
    453a:	681a      	ldr	r2, [r3, #0]
    453c:	3a01      	subs	r2, #1
    453e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    4540:	681b      	ldr	r3, [r3, #0]
    4542:	2b00      	cmp	r3, #0
    4544:	d109      	bne.n	455a <cpu_irq_leave_critical+0x22>
    4546:	4b06      	ldr	r3, [pc, #24]	; (4560 <cpu_irq_leave_critical+0x28>)
    4548:	781b      	ldrb	r3, [r3, #0]
    454a:	2b00      	cmp	r3, #0
    454c:	d005      	beq.n	455a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    454e:	2201      	movs	r2, #1
    4550:	4b04      	ldr	r3, [pc, #16]	; (4564 <cpu_irq_leave_critical+0x2c>)
    4552:	701a      	strb	r2, [r3, #0]
    4554:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4558:	b662      	cpsie	i
	}
}
    455a:	4770      	bx	lr
    455c:	200000a4 	.word	0x200000a4
    4560:	200000a8 	.word	0x200000a8
    4564:	20000008 	.word	0x20000008

00004568 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    4568:	b5f0      	push	{r4, r5, r6, r7, lr}
    456a:	46c6      	mov	lr, r8
    456c:	b500      	push	{lr}
    456e:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    4570:	ac01      	add	r4, sp, #4
    4572:	2501      	movs	r5, #1
    4574:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    4576:	2300      	movs	r3, #0
    4578:	4698      	mov	r8, r3
    457a:	70a3      	strb	r3, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    457c:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    457e:	0021      	movs	r1, r4
    4580:	2013      	movs	r0, #19
    4582:	4e12      	ldr	r6, [pc, #72]	; (45cc <system_board_init+0x64>)
    4584:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    4586:	4f12      	ldr	r7, [pc, #72]	; (45d0 <system_board_init+0x68>)
    4588:	2380      	movs	r3, #128	; 0x80
    458a:	031b      	lsls	r3, r3, #12
    458c:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    458e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_1_PIN, &pin_conf);
    4590:	0021      	movs	r1, r4
    4592:	2012      	movs	r0, #18
    4594:	47b0      	blx	r6
    4596:	2380      	movs	r3, #128	; 0x80
    4598:	02db      	lsls	r3, r3, #11
    459a:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_1_PIN, LED_1_INACTIVE);
#ifdef RFSWITCH_ENABLE
	/* Configure RFSWITCH as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    459c:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(RF_SWITCH_PIN, &pin_conf);
    459e:	0021      	movs	r1, r4
    45a0:	200d      	movs	r0, #13
    45a2:	47b0      	blx	r6
	} else {
		port_base->OUTCLR.reg = pin_mask;
    45a4:	2380      	movs	r3, #128	; 0x80
    45a6:	019b      	lsls	r3, r3, #6
    45a8:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
#endif

#ifdef TCXO_ENABLE
	/* Configure TXPO PWR as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    45aa:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(TCXO_PWR_PIN, &pin_conf);
    45ac:	0021      	movs	r1, r4
    45ae:	2009      	movs	r0, #9
    45b0:	47b0      	blx	r6
    45b2:	2380      	movs	r3, #128	; 0x80
    45b4:	009b      	lsls	r3, r3, #2
    45b6:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    45b8:	4643      	mov	r3, r8
    45ba:	7023      	strb	r3, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    45bc:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    45be:	0021      	movs	r1, r4
    45c0:	201c      	movs	r0, #28
    45c2:	47b0      	blx	r6
		
}
    45c4:	b002      	add	sp, #8
    45c6:	bc04      	pop	{r2}
    45c8:	4690      	mov	r8, r2
    45ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    45cc:	00004ba9 	.word	0x00004ba9
    45d0:	40002800 	.word	0x40002800

000045d4 <aes_get_config_defaults>:
		struct aes_config *const config)
{

	/* Sanity check arguments */
	Assert(config);
	config->encrypt_mode = AES_ENCRYPTION;
    45d4:	2301      	movs	r3, #1
    45d6:	7003      	strb	r3, [r0, #0]
	config->key_size = AES_KEY_SIZE_128;
    45d8:	2300      	movs	r3, #0
    45da:	7043      	strb	r3, [r0, #1]
	config->start_mode = AES_MANUAL_START;
    45dc:	7083      	strb	r3, [r0, #2]
	config->opmode= AES_ECB_MODE;
    45de:	70c3      	strb	r3, [r0, #3]
	config->cfb_size = AES_CFB_SIZE_128;
    45e0:	7103      	strb	r3, [r0, #4]
	config->ctype = AES_COUNTERMEASURE_TYPE_ALL;
    45e2:	220f      	movs	r2, #15
    45e4:	7142      	strb	r2, [r0, #5]
	config->enable_xor_key = false;
    45e6:	7183      	strb	r3, [r0, #6]
	config->enable_key_gen = false;
    45e8:	71c3      	strb	r3, [r0, #7]
	config->lod = false;
    45ea:	7203      	strb	r3, [r0, #8]
}
    45ec:	4770      	bx	lr

000045ee <aes_enable>:
 */
void aes_enable(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLA.reg |= AES_CTRLA_ENABLE;
    45ee:	6802      	ldr	r2, [r0, #0]
    45f0:	6813      	ldr	r3, [r2, #0]
    45f2:	2102      	movs	r1, #2
    45f4:	430b      	orrs	r3, r1
    45f6:	6013      	str	r3, [r2, #0]

}
    45f8:	4770      	bx	lr

000045fa <aes_disable>:
{
	Assert(module);
	Assert(module->hw);

	/* Disbale interrupt */
	module->hw->INTENCLR.reg = AES_INTENCLR_MASK;
    45fa:	2303      	movs	r3, #3
    45fc:	6802      	ldr	r2, [r0, #0]
    45fe:	7153      	strb	r3, [r2, #5]
	/* Clear interrupt flag */
	module->hw->INTFLAG.reg = AES_INTFLAG_MASK;
    4600:	6802      	ldr	r2, [r0, #0]
    4602:	71d3      	strb	r3, [r2, #7]

	module->hw->CTRLA.reg &= (~AES_CTRLA_ENABLE);
    4604:	6802      	ldr	r2, [r0, #0]
    4606:	6813      	ldr	r3, [r2, #0]
    4608:	2102      	movs	r1, #2
    460a:	438b      	bics	r3, r1
    460c:	6013      	str	r3, [r2, #0]
}
    460e:	4770      	bx	lr

00004610 <aes_set_config>:
 */
void aes_set_config(
		struct aes_module *const module,
		Aes *const hw,
		struct aes_config *const config)
{
    4610:	b570      	push	{r4, r5, r6, lr}
    4612:	0004      	movs	r4, r0
    4614:	000d      	movs	r5, r1
	/* Validate arguments. */
	Assert(hw);
	Assert(config);
	Assert(module);

	module->opmode = config->opmode;
    4616:	78d3      	ldrb	r3, [r2, #3]
    4618:	7103      	strb	r3, [r0, #4]
	module->hw = hw;
    461a:	6021      	str	r1, [r4, #0]
	module->key_size = config->key_size;
    461c:	7853      	ldrb	r3, [r2, #1]
    461e:	7143      	strb	r3, [r0, #5]
	module->cfb_size = config->cfb_size;
    4620:	7913      	ldrb	r3, [r2, #4]
    4622:	7183      	strb	r3, [r0, #6]

	ul_mode |= (config->encrypt_mode << AES_CTRLA_CIPHER_Pos)
    4624:	7813      	ldrb	r3, [r2, #0]
    4626:	029b      	lsls	r3, r3, #10
			 | (config->start_mode << AES_CTRLA_STARTMODE_Pos)
    4628:	7891      	ldrb	r1, [r2, #2]
    462a:	02c9      	lsls	r1, r1, #11
    462c:	430b      	orrs	r3, r1
			 | (config->key_size << AES_CTRLA_KEYSIZE_Pos)
    462e:	7851      	ldrb	r1, [r2, #1]
    4630:	0209      	lsls	r1, r1, #8
    4632:	430b      	orrs	r3, r1
			 | (config->opmode << AES_CTRLA_AESMODE_Pos)
    4634:	78d1      	ldrb	r1, [r2, #3]
    4636:	0089      	lsls	r1, r1, #2
    4638:	430b      	orrs	r3, r1
			 | (config->cfb_size << AES_CTRLA_CFBS_Pos)
    463a:	7911      	ldrb	r1, [r2, #4]
    463c:	0149      	lsls	r1, r1, #5
    463e:	430b      	orrs	r3, r1
			 | (AES_CTRLA_CTYPE(config->ctype))
			 | (config->enable_xor_key << AES_CTRLA_XORKEY_Pos)
    4640:	7991      	ldrb	r1, [r2, #6]
    4642:	0389      	lsls	r1, r1, #14
			 | (config->enable_key_gen << AES_CTRLA_KEYGEN_Pos)
    4644:	79d0      	ldrb	r0, [r2, #7]
    4646:	0340      	lsls	r0, r0, #13
			 | (config->lod << AES_CTRLA_LOD_Pos);
    4648:	4301      	orrs	r1, r0
    464a:	7a10      	ldrb	r0, [r2, #8]
    464c:	0300      	lsls	r0, r0, #12
    464e:	4301      	orrs	r1, r0
			 | (AES_CTRLA_CTYPE(config->ctype))
    4650:	7952      	ldrb	r2, [r2, #5]
    4652:	0412      	lsls	r2, r2, #16
    4654:	20f0      	movs	r0, #240	; 0xf0
    4656:	0300      	lsls	r0, r0, #12
    4658:	4002      	ands	r2, r0
			 | (config->lod << AES_CTRLA_LOD_Pos);
    465a:	430a      	orrs	r2, r1
    465c:	4313      	orrs	r3, r2
    465e:	001e      	movs	r6, r3
	if (hw->CTRLA.reg & AES_CTRLA_ENABLE) {
    4660:	682b      	ldr	r3, [r5, #0]
    4662:	079b      	lsls	r3, r3, #30
    4664:	d401      	bmi.n	466a <aes_set_config+0x5a>
		aes_disable(module);
		hw->CTRLA.reg = ul_mode;
		aes_enable(module);
	} else {
		hw->CTRLA.reg = ul_mode;
    4666:	602e      	str	r6, [r5, #0]
	}
}
    4668:	bd70      	pop	{r4, r5, r6, pc}
		aes_disable(module);
    466a:	0020      	movs	r0, r4
    466c:	4b03      	ldr	r3, [pc, #12]	; (467c <aes_set_config+0x6c>)
    466e:	4798      	blx	r3
		hw->CTRLA.reg = ul_mode;
    4670:	602e      	str	r6, [r5, #0]
		aes_enable(module);
    4672:	0020      	movs	r0, r4
    4674:	4b02      	ldr	r3, [pc, #8]	; (4680 <aes_set_config+0x70>)
    4676:	4798      	blx	r3
    4678:	e7f6      	b.n	4668 <aes_set_config+0x58>
    467a:	46c0      	nop			; (mov r8, r8)
    467c:	000045fb 	.word	0x000045fb
    4680:	000045ef 	.word	0x000045ef

00004684 <aes_init>:
{
    4684:	b570      	push	{r4, r5, r6, lr}
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    4686:	4c05      	ldr	r4, [pc, #20]	; (469c <aes_init+0x18>)
    4688:	69e5      	ldr	r5, [r4, #28]
    468a:	2380      	movs	r3, #128	; 0x80
    468c:	019b      	lsls	r3, r3, #6
    468e:	432b      	orrs	r3, r5
    4690:	61e3      	str	r3, [r4, #28]
	hw->CTRLA.reg = AES_CTRLA_SWRST;
    4692:	2301      	movs	r3, #1
    4694:	600b      	str	r3, [r1, #0]
	aes_set_config(module,hw, config);
    4696:	4b02      	ldr	r3, [pc, #8]	; (46a0 <aes_init+0x1c>)
    4698:	4798      	blx	r3
}
    469a:	bd70      	pop	{r4, r5, r6, pc}
    469c:	40000400 	.word	0x40000400
    46a0:	00004611 	.word	0x00004611

000046a4 <aes_write_key>:
 * \note The key size depends on the current AES configuration.
 */
void aes_write_key(
		struct aes_module *const module,
		const uint32_t *key)
{
    46a4:	b570      	push	{r4, r5, r6, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(key);

	switch (module->key_size) {
    46a6:	7943      	ldrb	r3, [r0, #5]
    46a8:	2b01      	cmp	r3, #1
    46aa:	d005      	beq.n	46b8 <aes_write_key+0x14>
    46ac:	2b00      	cmp	r3, #0
    46ae:	d010      	beq.n	46d2 <aes_write_key+0x2e>
    46b0:	2b02      	cmp	r3, #2
    46b2:	d10d      	bne.n	46d0 <aes_write_key+0x2c>
	case AES_KEY_SIZE_192:
		key_length = 6;
		break;

	case AES_KEY_SIZE_256:
		key_length = 8;
    46b4:	2508      	movs	r5, #8
    46b6:	e000      	b.n	46ba <aes_write_key+0x16>
		key_length = 6;
    46b8:	2506      	movs	r5, #6
{
    46ba:	2300      	movs	r3, #0
	default:
		break;
	}

	for (i = 0; i < key_length; i++) {
		module->hw->KEYWORD[i].reg = *key;
    46bc:	c910      	ldmia	r1!, {r4}
    46be:	1c9a      	adds	r2, r3, #2
    46c0:	0092      	lsls	r2, r2, #2
    46c2:	6806      	ldr	r6, [r0, #0]
    46c4:	46b4      	mov	ip, r6
    46c6:	4462      	add	r2, ip
    46c8:	6054      	str	r4, [r2, #4]
	for (i = 0; i < key_length; i++) {
    46ca:	3301      	adds	r3, #1
    46cc:	42ab      	cmp	r3, r5
    46ce:	d3f5      	bcc.n	46bc <aes_write_key+0x18>
		key++;
	}
}
    46d0:	bd70      	pop	{r4, r5, r6, pc}
		key_length = 4;
    46d2:	2504      	movs	r5, #4
    46d4:	e7f1      	b.n	46ba <aes_write_key+0x16>
    46d6:	Address 0x000046d6 is out of bounds.


000046d8 <aes_write_input_data>:
 * \param[in] input_data_buffer Pointer to an input data buffer
 */
void aes_write_input_data(
		struct aes_module *const module,
		const uint32_t *input_data_buffer)
{
    46d8:	b510      	push	{r4, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);;
	Assert(input_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
    46da:	2300      	movs	r3, #0
    46dc:	6802      	ldr	r2, [r0, #0]
    46de:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
    46e0:	4b0f      	ldr	r3, [pc, #60]	; (4720 <aes_write_input_data+0x48>)
    46e2:	6842      	ldr	r2, [r0, #4]
    46e4:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
    46e6:	4a0f      	ldr	r2, [pc, #60]	; (4724 <aes_write_input_data+0x4c>)
    46e8:	4293      	cmp	r3, r2
    46ea:	d00a      	beq.n	4702 <aes_write_input_data+0x2a>
		for (i = 0; i < 2; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
			input_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
    46ec:	7903      	ldrb	r3, [r0, #4]
    46ee:	2b03      	cmp	r3, #3
    46f0:	d00e      	beq.n	4710 <aes_write_input_data+0x38>
    46f2:	000c      	movs	r4, r1
    46f4:	3410      	adds	r4, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		module->hw->INDATA.reg = *input_data_buffer;
	} else {
		for (i = 0; i < 4; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
    46f6:	6803      	ldr	r3, [r0, #0]
    46f8:	c904      	ldmia	r1!, {r2}
    46fa:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < 4; i++) {
    46fc:	428c      	cmp	r4, r1
    46fe:	d1fa      	bne.n	46f6 <aes_write_input_data+0x1e>
			input_data_buffer++;
		}
	}
}
    4700:	bd10      	pop	{r4, pc}
			module->hw->INDATA.reg = *input_data_buffer;
    4702:	6803      	ldr	r3, [r0, #0]
    4704:	680a      	ldr	r2, [r1, #0]
    4706:	639a      	str	r2, [r3, #56]	; 0x38
    4708:	6803      	ldr	r3, [r0, #0]
    470a:	684a      	ldr	r2, [r1, #4]
    470c:	639a      	str	r2, [r3, #56]	; 0x38
    470e:	e7f7      	b.n	4700 <aes_write_input_data+0x28>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
    4710:	7983      	ldrb	r3, [r0, #6]
    4712:	3b02      	subs	r3, #2
    4714:	2b01      	cmp	r3, #1
    4716:	d8ec      	bhi.n	46f2 <aes_write_input_data+0x1a>
		module->hw->INDATA.reg = *input_data_buffer;
    4718:	6803      	ldr	r3, [r0, #0]
    471a:	680a      	ldr	r2, [r1, #0]
    471c:	639a      	str	r2, [r3, #56]	; 0x38
    471e:	e7ef      	b.n	4700 <aes_write_input_data+0x28>
    4720:	00ff00ff 	.word	0x00ff00ff
    4724:	00010003 	.word	0x00010003

00004728 <aes_read_output_data>:
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(output_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
    4728:	2300      	movs	r3, #0
    472a:	6802      	ldr	r2, [r0, #0]
    472c:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
    472e:	4b10      	ldr	r3, [pc, #64]	; (4770 <aes_read_output_data+0x48>)
    4730:	6842      	ldr	r2, [r0, #4]
    4732:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
    4734:	4a0f      	ldr	r2, [pc, #60]	; (4774 <aes_read_output_data+0x4c>)
    4736:	4293      	cmp	r3, r2
    4738:	d00a      	beq.n	4750 <aes_read_output_data+0x28>
		for (i = 0; i < 2; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
			output_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
    473a:	7903      	ldrb	r3, [r0, #4]
    473c:	2b03      	cmp	r3, #3
    473e:	d00e      	beq.n	475e <aes_read_output_data+0x36>
    4740:	000a      	movs	r2, r1
    4742:	3210      	adds	r2, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		*output_data_buffer = module->hw->INDATA.reg;
	} else {
		for (i = 0; i < 4; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
    4744:	6803      	ldr	r3, [r0, #0]
    4746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4748:	c108      	stmia	r1!, {r3}
		for (i = 0; i < 4; i++) {
    474a:	428a      	cmp	r2, r1
    474c:	d1fa      	bne.n	4744 <aes_read_output_data+0x1c>
			output_data_buffer++;
		}
	}
}
    474e:	4770      	bx	lr
			*output_data_buffer = module->hw->INDATA.reg;
    4750:	6803      	ldr	r3, [r0, #0]
    4752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4754:	600b      	str	r3, [r1, #0]
    4756:	6803      	ldr	r3, [r0, #0]
    4758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    475a:	604b      	str	r3, [r1, #4]
    475c:	e7f7      	b.n	474e <aes_read_output_data+0x26>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
    475e:	7983      	ldrb	r3, [r0, #6]
    4760:	3b02      	subs	r3, #2
    4762:	2b01      	cmp	r3, #1
    4764:	d8ec      	bhi.n	4740 <aes_read_output_data+0x18>
		*output_data_buffer = module->hw->INDATA.reg;
    4766:	6803      	ldr	r3, [r0, #0]
    4768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    476a:	600b      	str	r3, [r1, #0]
    476c:	e7ef      	b.n	474e <aes_read_output_data+0x26>
    476e:	46c0      	nop			; (mov r8, r8)
    4770:	00ff00ff 	.word	0x00ff00ff
    4774:	00010003 	.word	0x00010003

00004778 <AES_Handler>:

/**
* \internal The AES interrupt handler.
*/
void AES_Handler(void)
{
    4778:	b510      	push	{r4, lr}
	uint32_t status = AES->INTFLAG.reg;
    477a:	4b0c      	ldr	r3, [pc, #48]	; (47ac <AES_Handler+0x34>)
    477c:	79dc      	ldrb	r4, [r3, #7]
    477e:	b2e4      	uxtb	r4, r4

	if (status & AES_INTFLAG_ENCCMP) {
    4780:	07e3      	lsls	r3, r4, #31
    4782:	d507      	bpl.n	4794 <AES_Handler+0x1c>
		if (aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]) {
    4784:	4b0a      	ldr	r3, [pc, #40]	; (47b0 <AES_Handler+0x38>)
    4786:	681b      	ldr	r3, [r3, #0]
    4788:	2b00      	cmp	r3, #0
    478a:	d00d      	beq.n	47a8 <AES_Handler+0x30>
			AES->INTFLAG.reg = AES_INTFLAG_ENCCMP;
    478c:	2101      	movs	r1, #1
    478e:	4a07      	ldr	r2, [pc, #28]	; (47ac <AES_Handler+0x34>)
    4790:	71d1      	strb	r1, [r2, #7]
			aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]();
    4792:	4798      	blx	r3
		}
	}

	if (status & AES_INTFLAG_GFMCMP) {
    4794:	07a3      	lsls	r3, r4, #30
    4796:	d507      	bpl.n	47a8 <AES_Handler+0x30>
		if (aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]) {
    4798:	4b05      	ldr	r3, [pc, #20]	; (47b0 <AES_Handler+0x38>)
    479a:	681b      	ldr	r3, [r3, #0]
    479c:	2b00      	cmp	r3, #0
    479e:	d003      	beq.n	47a8 <AES_Handler+0x30>
			AES->INTFLAG.reg = AES_INTFLAG_GFMCMP;
    47a0:	2102      	movs	r1, #2
    47a2:	4a02      	ldr	r2, [pc, #8]	; (47ac <AES_Handler+0x34>)
    47a4:	71d1      	strb	r1, [r2, #7]
			aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]();
    47a6:	4798      	blx	r3
		}
	}
}
    47a8:	bd10      	pop	{r4, pc}
    47aa:	46c0      	nop			; (mov r8, r8)
    47ac:	42003400 	.word	0x42003400
    47b0:	200000ac 	.word	0x200000ac

000047b4 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    47b4:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    47b6:	2a00      	cmp	r2, #0
    47b8:	d001      	beq.n	47be <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    47ba:	0018      	movs	r0, r3
    47bc:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    47be:	008b      	lsls	r3, r1, #2
    47c0:	4a06      	ldr	r2, [pc, #24]	; (47dc <extint_register_callback+0x28>)
    47c2:	589b      	ldr	r3, [r3, r2]
    47c4:	2b00      	cmp	r3, #0
    47c6:	d003      	beq.n	47d0 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    47c8:	4283      	cmp	r3, r0
    47ca:	d005      	beq.n	47d8 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    47cc:	231d      	movs	r3, #29
    47ce:	e7f4      	b.n	47ba <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    47d0:	0089      	lsls	r1, r1, #2
    47d2:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    47d4:	2300      	movs	r3, #0
    47d6:	e7f0      	b.n	47ba <extint_register_callback+0x6>
		return STATUS_OK;
    47d8:	2300      	movs	r3, #0
    47da:	e7ee      	b.n	47ba <extint_register_callback+0x6>
    47dc:	20001ed0 	.word	0x20001ed0

000047e0 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    47e0:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    47e2:	2900      	cmp	r1, #0
    47e4:	d001      	beq.n	47ea <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    47e6:	0018      	movs	r0, r3
    47e8:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    47ea:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    47ec:	281f      	cmp	r0, #31
    47ee:	d800      	bhi.n	47f2 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    47f0:	4a02      	ldr	r2, [pc, #8]	; (47fc <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    47f2:	2301      	movs	r3, #1
    47f4:	4083      	lsls	r3, r0
    47f6:	6113      	str	r3, [r2, #16]
	return STATUS_OK;
    47f8:	2300      	movs	r3, #0
    47fa:	e7f4      	b.n	47e6 <extint_chan_enable_callback+0x6>
    47fc:	40002400 	.word	0x40002400

00004800 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    4800:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4802:	2200      	movs	r2, #0
    4804:	4b10      	ldr	r3, [pc, #64]	; (4848 <EIC_Handler+0x48>)
    4806:	701a      	strb	r2, [r3, #0]
    4808:	2300      	movs	r3, #0
    480a:	4910      	ldr	r1, [pc, #64]	; (484c <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    480c:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    480e:	4e10      	ldr	r6, [pc, #64]	; (4850 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4810:	4c0d      	ldr	r4, [pc, #52]	; (4848 <EIC_Handler+0x48>)
    4812:	e00a      	b.n	482a <EIC_Handler+0x2a>
		return eics[eic_index];
    4814:	490d      	ldr	r1, [pc, #52]	; (484c <EIC_Handler+0x4c>)
    4816:	e008      	b.n	482a <EIC_Handler+0x2a>
    4818:	7823      	ldrb	r3, [r4, #0]
    481a:	3301      	adds	r3, #1
    481c:	b2db      	uxtb	r3, r3
    481e:	7023      	strb	r3, [r4, #0]
    4820:	2b0f      	cmp	r3, #15
    4822:	d810      	bhi.n	4846 <EIC_Handler+0x46>
		return NULL;
    4824:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    4826:	2b1f      	cmp	r3, #31
    4828:	d9f4      	bls.n	4814 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    482a:	0028      	movs	r0, r5
    482c:	4018      	ands	r0, r3
    482e:	2201      	movs	r2, #1
    4830:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    4832:	6948      	ldr	r0, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
    4834:	4210      	tst	r0, r2
    4836:	d0ef      	beq.n	4818 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    4838:	614a      	str	r2, [r1, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    483a:	009b      	lsls	r3, r3, #2
    483c:	599b      	ldr	r3, [r3, r6]
    483e:	2b00      	cmp	r3, #0
    4840:	d0ea      	beq.n	4818 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    4842:	4798      	blx	r3
    4844:	e7e8      	b.n	4818 <EIC_Handler+0x18>
			}
		}
	}
}
    4846:	bd70      	pop	{r4, r5, r6, pc}
    4848:	20001ecc 	.word	0x20001ecc
    484c:	40002400 	.word	0x40002400
    4850:	20001ed0 	.word	0x20001ed0

00004854 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
    4854:	4a06      	ldr	r2, [pc, #24]	; (4870 <_extint_enable+0x1c>)
    4856:	7813      	ldrb	r3, [r2, #0]
    4858:	2102      	movs	r1, #2
    485a:	430b      	orrs	r3, r1
    485c:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    485e:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4860:	6853      	ldr	r3, [r2, #4]
    4862:	4219      	tst	r1, r3
    4864:	d1fc      	bne.n	4860 <_extint_enable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4866:	6853      	ldr	r3, [r2, #4]
    4868:	4218      	tst	r0, r3
    486a:	d1f9      	bne.n	4860 <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    486c:	4770      	bx	lr
    486e:	46c0      	nop			; (mov r8, r8)
    4870:	40002400 	.word	0x40002400

00004874 <_extint_disable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    4874:	4a06      	ldr	r2, [pc, #24]	; (4890 <_extint_disable+0x1c>)
    4876:	7813      	ldrb	r3, [r2, #0]
    4878:	2102      	movs	r1, #2
    487a:	438b      	bics	r3, r1
    487c:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    487e:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4880:	6853      	ldr	r3, [r2, #4]
    4882:	4219      	tst	r1, r3
    4884:	d1fc      	bne.n	4880 <_extint_disable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4886:	6853      	ldr	r3, [r2, #4]
    4888:	4218      	tst	r0, r3
    488a:	d1f9      	bne.n	4880 <_extint_disable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    488c:	4770      	bx	lr
    488e:	46c0      	nop			; (mov r8, r8)
    4890:	40002400 	.word	0x40002400

00004894 <_system_extint_init>:
{
    4894:	b510      	push	{r4, lr}
			MCLK->APBAMASK.reg |= mask;
    4896:	4a12      	ldr	r2, [pc, #72]	; (48e0 <_system_extint_init+0x4c>)
    4898:	6951      	ldr	r1, [r2, #20]
    489a:	2380      	movs	r3, #128	; 0x80
    489c:	009b      	lsls	r3, r3, #2
    489e:	430b      	orrs	r3, r1
    48a0:	6153      	str	r3, [r2, #20]
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
    48a2:	4a10      	ldr	r2, [pc, #64]	; (48e4 <_system_extint_init+0x50>)
    48a4:	7813      	ldrb	r3, [r2, #0]
    48a6:	2101      	movs	r1, #1
    48a8:	430b      	orrs	r3, r1
    48aa:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    48ac:	3101      	adds	r1, #1
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    48ae:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    48b0:	6853      	ldr	r3, [r2, #4]
    48b2:	4219      	tst	r1, r3
    48b4:	d1fc      	bne.n	48b0 <_system_extint_init+0x1c>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    48b6:	6853      	ldr	r3, [r2, #4]
    48b8:	4218      	tst	r0, r3
    48ba:	d1f9      	bne.n	48b0 <_system_extint_init+0x1c>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_ULP32K;
    48bc:	4a09      	ldr	r2, [pc, #36]	; (48e4 <_system_extint_init+0x50>)
    48be:	7813      	ldrb	r3, [r2, #0]
    48c0:	2110      	movs	r1, #16
    48c2:	430b      	orrs	r3, r1
    48c4:	7013      	strb	r3, [r2, #0]
    48c6:	4b08      	ldr	r3, [pc, #32]	; (48e8 <_system_extint_init+0x54>)
    48c8:	0019      	movs	r1, r3
    48ca:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    48cc:	2200      	movs	r2, #0
    48ce:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    48d0:	428b      	cmp	r3, r1
    48d2:	d1fc      	bne.n	48ce <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    48d4:	2208      	movs	r2, #8
    48d6:	4b05      	ldr	r3, [pc, #20]	; (48ec <_system_extint_init+0x58>)
    48d8:	601a      	str	r2, [r3, #0]
	_extint_enable();
    48da:	4b05      	ldr	r3, [pc, #20]	; (48f0 <_system_extint_init+0x5c>)
    48dc:	4798      	blx	r3
}
    48de:	bd10      	pop	{r4, pc}
    48e0:	40000400 	.word	0x40000400
    48e4:	40002400 	.word	0x40002400
    48e8:	20001ed0 	.word	0x20001ed0
    48ec:	e000e100 	.word	0xe000e100
    48f0:	00004855 	.word	0x00004855

000048f4 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    48f4:	2300      	movs	r3, #0
    48f6:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    48f8:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    48fa:	2201      	movs	r2, #1
    48fc:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
    48fe:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    4900:	3201      	adds	r2, #1
    4902:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
    4904:	7243      	strb	r3, [r0, #9]
}
    4906:	4770      	bx	lr

00004908 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    4908:	b5f0      	push	{r4, r5, r6, r7, lr}
    490a:	b083      	sub	sp, #12
    490c:	0005      	movs	r5, r0
    490e:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
    4910:	4b1c      	ldr	r3, [pc, #112]	; (4984 <extint_chan_set_config+0x7c>)
    4912:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4914:	a901      	add	r1, sp, #4
    4916:	2300      	movs	r3, #0
    4918:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    491a:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    491c:	7923      	ldrb	r3, [r4, #4]
    491e:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    4920:	7a23      	ldrb	r3, [r4, #8]
    4922:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    4924:	7820      	ldrb	r0, [r4, #0]
    4926:	4b18      	ldr	r3, [pc, #96]	; (4988 <extint_chan_set_config+0x80>)
    4928:	4798      	blx	r3
		return NULL;
    492a:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    492c:	2d1f      	cmp	r5, #31
    492e:	d800      	bhi.n	4932 <extint_chan_set_config+0x2a>
		return eics[eic_index];
    4930:	4916      	ldr	r1, [pc, #88]	; (498c <extint_chan_set_config+0x84>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    4932:	2207      	movs	r2, #7
    4934:	402a      	ands	r2, r5
    4936:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    4938:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    493a:	7aa3      	ldrb	r3, [r4, #10]
    493c:	2b00      	cmp	r3, #0
    493e:	d001      	beq.n	4944 <extint_chan_set_config+0x3c>
    4940:	2308      	movs	r3, #8
    4942:	431f      	orrs	r7, r3
    4944:	08eb      	lsrs	r3, r5, #3
    4946:	009b      	lsls	r3, r3, #2
    4948:	18cb      	adds	r3, r1, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    494a:	69d8      	ldr	r0, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    494c:	260f      	movs	r6, #15
    494e:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    4950:	43b0      	bics	r0, r6
			(new_config << config_pos);
    4952:	4097      	lsls	r7, r2
    4954:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4956:	4302      	orrs	r2, r0
		= (EIC_module->CONFIG[channel / 8].reg &
    4958:	61da      	str	r2, [r3, #28]
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
    495a:	7a63      	ldrb	r3, [r4, #9]
    495c:	2b00      	cmp	r3, #0
    495e:	d10b      	bne.n	4978 <extint_chan_set_config+0x70>
		EIC_module->ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
    4960:	698a      	ldr	r2, [r1, #24]
    4962:	2301      	movs	r3, #1
    4964:	40ab      	lsls	r3, r5
    4966:	43db      	mvns	r3, r3
    4968:	041b      	lsls	r3, r3, #16
    496a:	0c1b      	lsrs	r3, r3, #16
    496c:	4013      	ands	r3, r2
    496e:	618b      	str	r3, [r1, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
    4970:	4b07      	ldr	r3, [pc, #28]	; (4990 <extint_chan_set_config+0x88>)
    4972:	4798      	blx	r3
}
    4974:	b003      	add	sp, #12
    4976:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->ASYNCH.reg |= (1UL << channel);
    4978:	698a      	ldr	r2, [r1, #24]
    497a:	2301      	movs	r3, #1
    497c:	40ab      	lsls	r3, r5
    497e:	4313      	orrs	r3, r2
    4980:	618b      	str	r3, [r1, #24]
    4982:	e7f5      	b.n	4970 <extint_chan_set_config+0x68>
    4984:	00004875 	.word	0x00004875
    4988:	00006a69 	.word	0x00006a69
    498c:	40002400 	.word	0x40002400
    4990:	00004855 	.word	0x00004855

00004994 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    4994:	b530      	push	{r4, r5, lr}
    4996:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    4998:	4a25      	ldr	r2, [pc, #148]	; (4a30 <nvm_execute_command+0x9c>)
    499a:	8810      	ldrh	r0, [r2, #0]
    499c:	8853      	ldrh	r3, [r2, #2]
    499e:	4343      	muls	r3, r0
    49a0:	428b      	cmp	r3, r1
    49a2:	d20b      	bcs.n	49bc <nvm_execute_command+0x28>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    49a4:	2280      	movs	r2, #128	; 0x80
    49a6:	0192      	lsls	r2, r2, #6
    49a8:	4b22      	ldr	r3, [pc, #136]	; (4a34 <nvm_execute_command+0xa0>)
    49aa:	18cb      	adds	r3, r1, r3
    49ac:	4293      	cmp	r3, r2
    49ae:	d905      	bls.n	49bc <nvm_execute_command+0x28>
#ifdef FEATURE_NVM_RWWEE
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    49b0:	4a21      	ldr	r2, [pc, #132]	; (4a38 <nvm_execute_command+0xa4>)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    49b2:	2018      	movs	r0, #24
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    49b4:	4b21      	ldr	r3, [pc, #132]	; (4a3c <nvm_execute_command+0xa8>)
    49b6:	18cb      	adds	r3, r1, r3
    49b8:	4293      	cmp	r3, r2
    49ba:	d80e      	bhi.n	49da <nvm_execute_command+0x46>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    49bc:	4b20      	ldr	r3, [pc, #128]	; (4a40 <nvm_execute_command+0xac>)
    49be:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    49c0:	2280      	movs	r2, #128	; 0x80
    49c2:	02d2      	lsls	r2, r2, #11
    49c4:	432a      	orrs	r2, r5
    49c6:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    49c8:	2220      	movs	r2, #32
    49ca:	32ff      	adds	r2, #255	; 0xff
    49cc:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    49ce:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    49d0:	07db      	lsls	r3, r3, #31
    49d2:	d403      	bmi.n	49dc <nvm_execute_command+0x48>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    49d4:	4b1a      	ldr	r3, [pc, #104]	; (4a40 <nvm_execute_command+0xac>)
    49d6:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
    49d8:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    49da:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    49dc:	2c45      	cmp	r4, #69	; 0x45
    49de:	d822      	bhi.n	4a26 <nvm_execute_command+0x92>
    49e0:	00a3      	lsls	r3, r4, #2
    49e2:	4a18      	ldr	r2, [pc, #96]	; (4a44 <nvm_execute_command+0xb0>)
    49e4:	58d3      	ldr	r3, [r2, r3]
    49e6:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    49e8:	4b15      	ldr	r3, [pc, #84]	; (4a40 <nvm_execute_command+0xac>)
    49ea:	8b1b      	ldrh	r3, [r3, #24]
    49ec:	05db      	lsls	r3, r3, #23
    49ee:	d503      	bpl.n	49f8 <nvm_execute_command+0x64>
				nvm_module->CTRLB.reg = ctrlb_bak;
    49f0:	4b13      	ldr	r3, [pc, #76]	; (4a40 <nvm_execute_command+0xac>)
    49f2:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
    49f4:	2010      	movs	r0, #16
    49f6:	e7f0      	b.n	49da <nvm_execute_command+0x46>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    49f8:	0889      	lsrs	r1, r1, #2
    49fa:	0049      	lsls	r1, r1, #1
    49fc:	4b10      	ldr	r3, [pc, #64]	; (4a40 <nvm_execute_command+0xac>)
    49fe:	61d9      	str	r1, [r3, #28]
			break;
    4a00:	e003      	b.n	4a0a <nvm_execute_command+0x76>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    4a02:	0889      	lsrs	r1, r1, #2
    4a04:	0049      	lsls	r1, r1, #1
    4a06:	4b0e      	ldr	r3, [pc, #56]	; (4a40 <nvm_execute_command+0xac>)
    4a08:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    4a0a:	20a5      	movs	r0, #165	; 0xa5
    4a0c:	0200      	lsls	r0, r0, #8
    4a0e:	4304      	orrs	r4, r0
    4a10:	4b0b      	ldr	r3, [pc, #44]	; (4a40 <nvm_execute_command+0xac>)
    4a12:	801c      	strh	r4, [r3, #0]
    4a14:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    4a16:	2201      	movs	r2, #1
    4a18:	7d0b      	ldrb	r3, [r1, #20]
    4a1a:	4213      	tst	r3, r2
    4a1c:	d0fc      	beq.n	4a18 <nvm_execute_command+0x84>
	nvm_module->CTRLB.reg = ctrlb_bak;
    4a1e:	4b08      	ldr	r3, [pc, #32]	; (4a40 <nvm_execute_command+0xac>)
    4a20:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
    4a22:	2000      	movs	r0, #0
    4a24:	e7d9      	b.n	49da <nvm_execute_command+0x46>
			nvm_module->CTRLB.reg = ctrlb_bak;
    4a26:	4b06      	ldr	r3, [pc, #24]	; (4a40 <nvm_execute_command+0xac>)
    4a28:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    4a2a:	2017      	movs	r0, #23
    4a2c:	e7d5      	b.n	49da <nvm_execute_command+0x46>
    4a2e:	46c0      	nop			; (mov r8, r8)
    4a30:	200000b4 	.word	0x200000b4
    4a34:	ff7fc000 	.word	0xff7fc000
    4a38:	00001fff 	.word	0x00001fff
    4a3c:	ffc00000 	.word	0xffc00000
    4a40:	41004000 	.word	0x41004000
    4a44:	00017424 	.word	0x00017424

00004a48 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    4a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    4a4a:	4b2f      	ldr	r3, [pc, #188]	; (4b08 <nvm_write_buffer+0xc0>)
    4a4c:	881c      	ldrh	r4, [r3, #0]
    4a4e:	885b      	ldrh	r3, [r3, #2]
    4a50:	4363      	muls	r3, r4
	if (destination_address >
    4a52:	4283      	cmp	r3, r0
    4a54:	d207      	bcs.n	4a66 <nvm_write_buffer+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4a56:	4e2d      	ldr	r6, [pc, #180]	; (4b0c <nvm_write_buffer+0xc4>)
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    4a58:	2518      	movs	r5, #24
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4a5a:	4b2d      	ldr	r3, [pc, #180]	; (4b10 <nvm_write_buffer+0xc8>)
    4a5c:	18c3      	adds	r3, r0, r3
    4a5e:	42b3      	cmp	r3, r6
    4a60:	d806      	bhi.n	4a70 <nvm_write_buffer+0x28>
		}
		is_rww_eeprom = true;
    4a62:	2601      	movs	r6, #1
    4a64:	e000      	b.n	4a68 <nvm_write_buffer+0x20>
	bool is_rww_eeprom = false;
    4a66:	2600      	movs	r6, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    4a68:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
    4a6a:	2518      	movs	r5, #24
	if (destination_address & (_nvm_dev.page_size - 1)) {
    4a6c:	4218      	tst	r0, r3
    4a6e:	d001      	beq.n	4a74 <nvm_write_buffer+0x2c>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    4a70:	0028      	movs	r0, r5
    4a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    4a74:	3d01      	subs	r5, #1
	if (length > _nvm_dev.page_size) {
    4a76:	4294      	cmp	r4, r2
    4a78:	d3fa      	bcc.n	4a70 <nvm_write_buffer+0x28>
    4a7a:	4b26      	ldr	r3, [pc, #152]	; (4b14 <nvm_write_buffer+0xcc>)
    4a7c:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    4a7e:	3d12      	subs	r5, #18
	if (!nvm_is_ready()) {
    4a80:	07db      	lsls	r3, r3, #31
    4a82:	d5f5      	bpl.n	4a70 <nvm_write_buffer+0x28>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    4a84:	4c24      	ldr	r4, [pc, #144]	; (4b18 <nvm_write_buffer+0xd0>)
    4a86:	4b23      	ldr	r3, [pc, #140]	; (4b14 <nvm_write_buffer+0xcc>)
    4a88:	801c      	strh	r4, [r3, #0]
    4a8a:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    4a8c:	2401      	movs	r4, #1
    4a8e:	7d2b      	ldrb	r3, [r5, #20]
    4a90:	4223      	tst	r3, r4
    4a92:	d0fc      	beq.n	4a8e <nvm_write_buffer+0x46>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4a94:	2420      	movs	r4, #32
    4a96:	34ff      	adds	r4, #255	; 0xff
    4a98:	4b1e      	ldr	r3, [pc, #120]	; (4b14 <nvm_write_buffer+0xcc>)
    4a9a:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    4a9c:	2a00      	cmp	r2, #0
    4a9e:	d02c      	beq.n	4afa <nvm_write_buffer+0xb2>
    4aa0:	2301      	movs	r3, #1
    4aa2:	0005      	movs	r5, r0
    4aa4:	439d      	bics	r5, r3
    4aa6:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    4aa8:	1e54      	subs	r4, r2, #1
    4aaa:	46a4      	mov	ip, r4
    4aac:	e009      	b.n	4ac2 <nvm_write_buffer+0x7a>
			data |= (buffer[i + 1] << 8);
    4aae:	18cf      	adds	r7, r1, r3
    4ab0:	787f      	ldrb	r7, [r7, #1]
    4ab2:	023f      	lsls	r7, r7, #8
    4ab4:	433c      	orrs	r4, r7
		NVM_MEMORY[nvm_address++] = data;
    4ab6:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    4ab8:	3302      	adds	r3, #2
    4aba:	b29b      	uxth	r3, r3
    4abc:	3502      	adds	r5, #2
    4abe:	429a      	cmp	r2, r3
    4ac0:	d904      	bls.n	4acc <nvm_write_buffer+0x84>
		data = buffer[i];
    4ac2:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    4ac4:	4563      	cmp	r3, ip
    4ac6:	dbf2      	blt.n	4aae <nvm_write_buffer+0x66>
		data = buffer[i];
    4ac8:	b2a4      	uxth	r4, r4
    4aca:	e7f4      	b.n	4ab6 <nvm_write_buffer+0x6e>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4acc:	4b0e      	ldr	r3, [pc, #56]	; (4b08 <nvm_write_buffer+0xc0>)
    4ace:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    4ad0:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4ad2:	2b00      	cmp	r3, #0
    4ad4:	d1cc      	bne.n	4a70 <nvm_write_buffer+0x28>
    4ad6:	2a3f      	cmp	r2, #63	; 0x3f
    4ad8:	d8ca      	bhi.n	4a70 <nvm_write_buffer+0x28>
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
    4ada:	2e00      	cmp	r6, #0
    4adc:	d106      	bne.n	4aec <nvm_write_buffer+0xa4>
    4ade:	2200      	movs	r2, #0
    4ae0:	0001      	movs	r1, r0
    4ae2:	2004      	movs	r0, #4
    4ae4:	4b0d      	ldr	r3, [pc, #52]	; (4b1c <nvm_write_buffer+0xd4>)
    4ae6:	4798      	blx	r3
    4ae8:	0005      	movs	r5, r0
    4aea:	e7c1      	b.n	4a70 <nvm_write_buffer+0x28>
    4aec:	2200      	movs	r2, #0
    4aee:	0001      	movs	r1, r0
    4af0:	201c      	movs	r0, #28
    4af2:	4b0a      	ldr	r3, [pc, #40]	; (4b1c <nvm_write_buffer+0xd4>)
    4af4:	4798      	blx	r3
    4af6:	0005      	movs	r5, r0
    4af8:	e7ba      	b.n	4a70 <nvm_write_buffer+0x28>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4afa:	4b03      	ldr	r3, [pc, #12]	; (4b08 <nvm_write_buffer+0xc0>)
    4afc:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    4afe:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4b00:	2b00      	cmp	r3, #0
    4b02:	d0ea      	beq.n	4ada <nvm_write_buffer+0x92>
    4b04:	e7b4      	b.n	4a70 <nvm_write_buffer+0x28>
    4b06:	46c0      	nop			; (mov r8, r8)
    4b08:	200000b4 	.word	0x200000b4
    4b0c:	00001fff 	.word	0x00001fff
    4b10:	ffc00000 	.word	0xffc00000
    4b14:	41004000 	.word	0x41004000
    4b18:	ffffa544 	.word	0xffffa544
    4b1c:	00004995 	.word	0x00004995

00004b20 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    4b20:	b510      	push	{r4, lr}
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    4b22:	4a1b      	ldr	r2, [pc, #108]	; (4b90 <nvm_erase_row+0x70>)
    4b24:	8813      	ldrh	r3, [r2, #0]
    4b26:	8852      	ldrh	r2, [r2, #2]
    4b28:	435a      	muls	r2, r3
	if (row_address >
    4b2a:	4282      	cmp	r2, r0
    4b2c:	d207      	bcs.n	4b3e <nvm_erase_row+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4b2e:	4c19      	ldr	r4, [pc, #100]	; (4b94 <nvm_erase_row+0x74>)
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    4b30:	2218      	movs	r2, #24
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4b32:	4919      	ldr	r1, [pc, #100]	; (4b98 <nvm_erase_row+0x78>)
    4b34:	1841      	adds	r1, r0, r1
    4b36:	42a1      	cmp	r1, r4
    4b38:	d807      	bhi.n	4b4a <nvm_erase_row+0x2a>
		}
		is_rww_eeprom = true;
    4b3a:	2101      	movs	r1, #1
    4b3c:	e000      	b.n	4b40 <nvm_erase_row+0x20>
		bool is_rww_eeprom = false;
    4b3e:	2100      	movs	r1, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    4b40:	009b      	lsls	r3, r3, #2
    4b42:	3b01      	subs	r3, #1
		return STATUS_ERR_BAD_ADDRESS;
    4b44:	2218      	movs	r2, #24
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    4b46:	4218      	tst	r0, r3
    4b48:	d001      	beq.n	4b4e <nvm_erase_row+0x2e>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    4b4a:	0010      	movs	r0, r2
    4b4c:	bd10      	pop	{r4, pc}
    4b4e:	4b13      	ldr	r3, [pc, #76]	; (4b9c <nvm_erase_row+0x7c>)
    4b50:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    4b52:	3a13      	subs	r2, #19
	if (!nvm_is_ready()) {
    4b54:	07db      	lsls	r3, r3, #31
    4b56:	d5f8      	bpl.n	4b4a <nvm_erase_row+0x2a>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4b58:	4b10      	ldr	r3, [pc, #64]	; (4b9c <nvm_erase_row+0x7c>)
    4b5a:	2220      	movs	r2, #32
    4b5c:	32ff      	adds	r2, #255	; 0xff
    4b5e:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    4b60:	0880      	lsrs	r0, r0, #2
    4b62:	0040      	lsls	r0, r0, #1
    4b64:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
    4b66:	2900      	cmp	r1, #0
    4b68:	d10f      	bne.n	4b8a <nvm_erase_row+0x6a>
    4b6a:	4a0d      	ldr	r2, [pc, #52]	; (4ba0 <nvm_erase_row+0x80>)
    4b6c:	4b0b      	ldr	r3, [pc, #44]	; (4b9c <nvm_erase_row+0x7c>)
    4b6e:	801a      	strh	r2, [r3, #0]
    4b70:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    4b72:	2201      	movs	r2, #1
    4b74:	7d0b      	ldrb	r3, [r1, #20]
    4b76:	4213      	tst	r3, r2
    4b78:	d0fc      	beq.n	4b74 <nvm_erase_row+0x54>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    4b7a:	4b08      	ldr	r3, [pc, #32]	; (4b9c <nvm_erase_row+0x7c>)
    4b7c:	8b1a      	ldrh	r2, [r3, #24]
    4b7e:	201c      	movs	r0, #28
    4b80:	4002      	ands	r2, r0
	return STATUS_OK;
    4b82:	1e50      	subs	r0, r2, #1
    4b84:	4182      	sbcs	r2, r0
    4b86:	0092      	lsls	r2, r2, #2
    4b88:	e7df      	b.n	4b4a <nvm_erase_row+0x2a>
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
    4b8a:	4a06      	ldr	r2, [pc, #24]	; (4ba4 <nvm_erase_row+0x84>)
    4b8c:	e7ee      	b.n	4b6c <nvm_erase_row+0x4c>
    4b8e:	46c0      	nop			; (mov r8, r8)
    4b90:	200000b4 	.word	0x200000b4
    4b94:	00001fff 	.word	0x00001fff
    4b98:	ffc00000 	.word	0xffc00000
    4b9c:	41004000 	.word	0x41004000
    4ba0:	0000a502 	.word	0x0000a502
    4ba4:	0000a51a 	.word	0x0000a51a

00004ba8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    4ba8:	b500      	push	{lr}
    4baa:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4bac:	ab01      	add	r3, sp, #4
    4bae:	2280      	movs	r2, #128	; 0x80
    4bb0:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    4bb2:	780a      	ldrb	r2, [r1, #0]
    4bb4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    4bb6:	784a      	ldrb	r2, [r1, #1]
    4bb8:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    4bba:	788a      	ldrb	r2, [r1, #2]
    4bbc:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    4bbe:	0019      	movs	r1, r3
    4bc0:	4b01      	ldr	r3, [pc, #4]	; (4bc8 <port_pin_set_config+0x20>)
    4bc2:	4798      	blx	r3
}
    4bc4:	b003      	add	sp, #12
    4bc6:	bd00      	pop	{pc}
    4bc8:	00006a69 	.word	0x00006a69

00004bcc <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4bcc:	6803      	ldr	r3, [r0, #0]

	if (rtc_module->MODE0.SYNCBUSY.reg) {
    4bce:	6918      	ldr	r0, [r3, #16]
    4bd0:	1e43      	subs	r3, r0, #1
    4bd2:	4198      	sbcs	r0, r3
    4bd4:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
    4bd6:	4770      	bx	lr

00004bd8 <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
    4bd8:	b570      	push	{r4, r5, r6, lr}
    4bda:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4bdc:	6806      	ldr	r6, [r0, #0]

	/* Initialize return value. */
	uint32_t ret_val;

	while (rtc_count_is_syncing(module)) {
    4bde:	4d08      	ldr	r5, [pc, #32]	; (4c00 <rtc_count_get_count+0x28>)
    4be0:	0020      	movs	r0, r4
    4be2:	47a8      	blx	r5
    4be4:	2800      	cmp	r0, #0
    4be6:	d1fb      	bne.n	4be0 <rtc_count_get_count+0x8>
		/* Wait for synchronization */
	}

	/* Read value based on mode. */
	switch (module->mode) {
    4be8:	7923      	ldrb	r3, [r4, #4]
    4bea:	2b00      	cmp	r3, #0
    4bec:	d004      	beq.n	4bf8 <rtc_count_get_count+0x20>
			break;

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
    4bee:	2000      	movs	r0, #0
	switch (module->mode) {
    4bf0:	2b01      	cmp	r3, #1
    4bf2:	d100      	bne.n	4bf6 <rtc_count_get_count+0x1e>
			ret_val = rtc_module->MODE0.COUNT.reg;
    4bf4:	69b0      	ldr	r0, [r6, #24]
			break;
	}

	return ret_val;
}
    4bf6:	bd70      	pop	{r4, r5, r6, pc}
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
    4bf8:	8b30      	ldrh	r0, [r6, #24]
    4bfa:	b280      	uxth	r0, r0
			break;
    4bfc:	e7fb      	b.n	4bf6 <rtc_count_get_count+0x1e>
    4bfe:	46c0      	nop			; (mov r8, r8)
    4c00:	00004bcd 	.word	0x00004bcd

00004c04 <rtc_count_disable_callback>:
 * \param[in]     callback_type Callback type to disable
 */
void rtc_count_disable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    4c04:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4c06:	6802      	ldr	r2, [r0, #0]

	/* Disable interrupt */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    4c08:	290a      	cmp	r1, #10
    4c0a:	d010      	beq.n	4c2e <rtc_count_disable_callback+0x2a>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if(callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    4c0c:	2907      	cmp	r1, #7
    4c0e:	d911      	bls.n	4c34 <rtc_count_disable_callback+0x30>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7){
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
	}else {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    4c10:	2380      	movs	r3, #128	; 0x80
    4c12:	005b      	lsls	r3, r3, #1
    4c14:	000c      	movs	r4, r1
    4c16:	3c08      	subs	r4, #8
    4c18:	40a3      	lsls	r3, r4
    4c1a:	24c0      	movs	r4, #192	; 0xc0
    4c1c:	00a4      	lsls	r4, r4, #2
    4c1e:	4023      	ands	r3, r4
    4c20:	8113      	strh	r3, [r2, #8]
	}

	/* Mark callback as disabled. */
	module->enabled_callback &= ~(1 << callback_type);
    4c22:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    4c24:	2201      	movs	r2, #1
    4c26:	408a      	lsls	r2, r1
    4c28:	4393      	bics	r3, r2
    4c2a:	86c3      	strh	r3, [r0, #54]	; 0x36
}
    4c2c:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
    4c2e:	4b04      	ldr	r3, [pc, #16]	; (4c40 <rtc_count_disable_callback+0x3c>)
    4c30:	8113      	strh	r3, [r2, #8]
    4c32:	e7f6      	b.n	4c22 <rtc_count_disable_callback+0x1e>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
    4c34:	2401      	movs	r4, #1
    4c36:	408c      	lsls	r4, r1
    4c38:	23ff      	movs	r3, #255	; 0xff
    4c3a:	4023      	ands	r3, r4
    4c3c:	8113      	strh	r3, [r2, #8]
    4c3e:	e7f0      	b.n	4c22 <rtc_count_disable_callback+0x1e>
    4c40:	ffff8000 	.word	0xffff8000

00004c44 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    4c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c46:	46de      	mov	lr, fp
    4c48:	4657      	mov	r7, sl
    4c4a:	464e      	mov	r6, r9
    4c4c:	4645      	mov	r5, r8
    4c4e:	b5e0      	push	{r5, r6, r7, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    4c50:	4b2b      	ldr	r3, [pc, #172]	; (4d00 <RTC_Handler+0xbc>)
    4c52:	681b      	ldr	r3, [r3, #0]
    4c54:	469a      	mov	sl, r3
	Rtc *const rtc_module = module->hw;
    4c56:	681e      	ldr	r6, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
    4c58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
	callback_mask &= module->registered_callback;
    4c5a:	4652      	mov	r2, sl
    4c5c:	8e92      	ldrh	r2, [r2, #52]	; 0x34
    4c5e:	401a      	ands	r2, r3
    4c60:	4690      	mov	r8, r2
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    4c62:	89b2      	ldrh	r2, [r6, #12]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    4c64:	8973      	ldrh	r3, [r6, #10]
    4c66:	4013      	ands	r3, r2
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    4c68:	b21a      	sxth	r2, r3
    4c6a:	2a00      	cmp	r2, #0
    4c6c:	db08      	blt.n	4c80 <RTC_Handler+0x3c>
    4c6e:	27ff      	movs	r7, #255	; 0xff
    4c70:	401f      	ands	r7, r3
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
    4c72:	d02a      	beq.n	4cca <RTC_Handler+0x86>
    4c74:	2400      	movs	r4, #0
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    4c76:	2301      	movs	r3, #1
    4c78:	4699      	mov	r9, r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    4c7a:	33fe      	adds	r3, #254	; 0xfe
    4c7c:	469b      	mov	fp, r3
    4c7e:	e014      	b.n	4caa <RTC_Handler+0x66>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    4c80:	4643      	mov	r3, r8
    4c82:	055b      	lsls	r3, r3, #21
    4c84:	d407      	bmi.n	4c96 <RTC_Handler+0x52>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    4c86:	4b1f      	ldr	r3, [pc, #124]	; (4d04 <RTC_Handler+0xc0>)
    4c88:	81b3      	strh	r3, [r6, #12]
	_rtc_interrupt_handler(0);
}
    4c8a:	bc3c      	pop	{r2, r3, r4, r5}
    4c8c:	4690      	mov	r8, r2
    4c8e:	4699      	mov	r9, r3
    4c90:	46a2      	mov	sl, r4
    4c92:	46ab      	mov	fp, r5
    4c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    4c96:	4653      	mov	r3, sl
    4c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4c9a:	4798      	blx	r3
    4c9c:	e7f3      	b.n	4c86 <RTC_Handler+0x42>
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    4c9e:	465b      	mov	r3, fp
    4ca0:	401d      	ands	r5, r3
    4ca2:	81b5      	strh	r5, [r6, #12]
    4ca4:	3401      	adds	r4, #1
		for ( i = 0;i < RTC_PER_NUM;i++) {
    4ca6:	2c08      	cmp	r4, #8
    4ca8:	d0ef      	beq.n	4c8a <RTC_Handler+0x46>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    4caa:	0023      	movs	r3, r4
    4cac:	464d      	mov	r5, r9
    4cae:	40a5      	lsls	r5, r4
    4cb0:	422f      	tst	r7, r5
    4cb2:	d0f4      	beq.n	4c9e <RTC_Handler+0x5a>
			  && (callback_mask & (1 << i))) {
    4cb4:	4642      	mov	r2, r8
    4cb6:	4122      	asrs	r2, r4
    4cb8:	4649      	mov	r1, r9
    4cba:	4211      	tst	r1, r2
    4cbc:	d0ef      	beq.n	4c9e <RTC_Handler+0x5a>
				module->callbacks[i]();
    4cbe:	3302      	adds	r3, #2
    4cc0:	009b      	lsls	r3, r3, #2
    4cc2:	4652      	mov	r2, sl
    4cc4:	589b      	ldr	r3, [r3, r2]
    4cc6:	4798      	blx	r3
    4cc8:	e7e9      	b.n	4c9e <RTC_Handler+0x5a>
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    4cca:	05da      	lsls	r2, r3, #23
    4ccc:	d50a      	bpl.n	4ce4 <RTC_Handler+0xa0>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    4cce:	4643      	mov	r3, r8
    4cd0:	05db      	lsls	r3, r3, #23
    4cd2:	d403      	bmi.n	4cdc <RTC_Handler+0x98>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    4cd4:	2380      	movs	r3, #128	; 0x80
    4cd6:	005b      	lsls	r3, r3, #1
    4cd8:	81b3      	strh	r3, [r6, #12]
    4cda:	e7d6      	b.n	4c8a <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    4cdc:	4653      	mov	r3, sl
    4cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4ce0:	4798      	blx	r3
    4ce2:	e7f7      	b.n	4cd4 <RTC_Handler+0x90>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    4ce4:	059b      	lsls	r3, r3, #22
    4ce6:	d5d0      	bpl.n	4c8a <RTC_Handler+0x46>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    4ce8:	4643      	mov	r3, r8
    4cea:	059b      	lsls	r3, r3, #22
    4cec:	d403      	bmi.n	4cf6 <RTC_Handler+0xb2>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    4cee:	2380      	movs	r3, #128	; 0x80
    4cf0:	009b      	lsls	r3, r3, #2
    4cf2:	81b3      	strh	r3, [r6, #12]
}
    4cf4:	e7c9      	b.n	4c8a <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    4cf6:	4653      	mov	r3, sl
    4cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4cfa:	4798      	blx	r3
    4cfc:	e7f7      	b.n	4cee <RTC_Handler+0xaa>
    4cfe:	46c0      	nop			; (mov r8, r8)
    4d00:	20001f10 	.word	0x20001f10
    4d04:	ffff8000 	.word	0xffff8000

00004d08 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    4d08:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    4d0a:	2207      	movs	r2, #7
    4d0c:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    4d0e:	421a      	tst	r2, r3
    4d10:	d1fc      	bne.n	4d0c <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
    4d12:	4770      	bx	lr

00004d14 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    4d14:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d16:	46d6      	mov	lr, sl
    4d18:	464f      	mov	r7, r9
    4d1a:	4646      	mov	r6, r8
    4d1c:	b5c0      	push	{r6, r7, lr}
    4d1e:	b08a      	sub	sp, #40	; 0x28
    4d20:	0007      	movs	r7, r0
    4d22:	000e      	movs	r6, r1
    4d24:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    4d26:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4d28:	0008      	movs	r0, r1
    4d2a:	4b9c      	ldr	r3, [pc, #624]	; (4f9c <i2c_master_init+0x288>)
    4d2c:	4798      	blx	r3

#if (SAML22) || (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
    4d2e:	2805      	cmp	r0, #5
    4d30:	d100      	bne.n	4d34 <i2c_master_init+0x20>
    4d32:	e12b      	b.n	4f8c <i2c_master_init+0x278>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4d34:	0005      	movs	r5, r0
    4d36:	3512      	adds	r5, #18
			MCLK->APBCMASK.reg |= mask;
    4d38:	4a99      	ldr	r2, [pc, #612]	; (4fa0 <i2c_master_init+0x28c>)
    4d3a:	69d1      	ldr	r1, [r2, #28]
	/* Turn on module in PM */
#if (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4d3c:	2301      	movs	r3, #1
    4d3e:	4083      	lsls	r3, r0
    4d40:	430b      	orrs	r3, r1
    4d42:	61d3      	str	r3, [r2, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    4d44:	a909      	add	r1, sp, #36	; 0x24
    4d46:	7b23      	ldrb	r3, [r4, #12]
    4d48:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4d4a:	b2ed      	uxtb	r5, r5
    4d4c:	0028      	movs	r0, r5
    4d4e:	4b95      	ldr	r3, [pc, #596]	; (4fa4 <i2c_master_init+0x290>)
    4d50:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4d52:	0028      	movs	r0, r5
    4d54:	4b94      	ldr	r3, [pc, #592]	; (4fa8 <i2c_master_init+0x294>)
    4d56:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4d58:	7b20      	ldrb	r0, [r4, #12]
    4d5a:	2100      	movs	r1, #0
    4d5c:	4b93      	ldr	r3, [pc, #588]	; (4fac <i2c_master_init+0x298>)
    4d5e:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    4d60:	6833      	ldr	r3, [r6, #0]
		return STATUS_ERR_DENIED;
    4d62:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    4d64:	079b      	lsls	r3, r3, #30
    4d66:	d505      	bpl.n	4d74 <i2c_master_init+0x60>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    4d68:	b00a      	add	sp, #40	; 0x28
    4d6a:	bc1c      	pop	{r2, r3, r4}
    4d6c:	4690      	mov	r8, r2
    4d6e:	4699      	mov	r9, r3
    4d70:	46a2      	mov	sl, r4
    4d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    4d74:	6833      	ldr	r3, [r6, #0]
		return STATUS_BUSY;
    4d76:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    4d78:	07db      	lsls	r3, r3, #31
    4d7a:	d4f5      	bmi.n	4d68 <i2c_master_init+0x54>
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    4d7c:	2314      	movs	r3, #20
    4d7e:	6033      	str	r3, [r6, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4d80:	683b      	ldr	r3, [r7, #0]
    4d82:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    4d84:	0018      	movs	r0, r3
    4d86:	4b85      	ldr	r3, [pc, #532]	; (4f9c <i2c_master_init+0x288>)
    4d88:	4798      	blx	r3
    4d8a:	0005      	movs	r5, r0
    4d8c:	2380      	movs	r3, #128	; 0x80
    4d8e:	aa08      	add	r2, sp, #32
    4d90:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4d92:	2300      	movs	r3, #0
    4d94:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4d96:	2201      	movs	r2, #1
    4d98:	a908      	add	r1, sp, #32
    4d9a:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
    4d9c:	70cb      	strb	r3, [r1, #3]
	uint32_t pad0 = config->pinmux_pad0;
    4d9e:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    4da0:	6a26      	ldr	r6, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
    4da2:	2800      	cmp	r0, #0
    4da4:	d100      	bne.n	4da8 <i2c_master_init+0x94>
    4da6:	e0ae      	b.n	4f06 <i2c_master_init+0x1f2>
	pin_conf.mux_position = pad0 & 0xFFFF;
    4da8:	ab08      	add	r3, sp, #32
    4daa:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    4dac:	2302      	movs	r3, #2
    4dae:	aa08      	add	r2, sp, #32
    4db0:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    4db2:	0c00      	lsrs	r0, r0, #16
    4db4:	b2c0      	uxtb	r0, r0
    4db6:	0011      	movs	r1, r2
    4db8:	4b7d      	ldr	r3, [pc, #500]	; (4fb0 <i2c_master_init+0x29c>)
    4dba:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    4dbc:	2e00      	cmp	r6, #0
    4dbe:	d100      	bne.n	4dc2 <i2c_master_init+0xae>
    4dc0:	e0a6      	b.n	4f10 <i2c_master_init+0x1fc>
	pin_conf.mux_position = pad1 & 0xFFFF;
    4dc2:	ab08      	add	r3, sp, #32
    4dc4:	701e      	strb	r6, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    4dc6:	2302      	movs	r3, #2
    4dc8:	aa08      	add	r2, sp, #32
    4dca:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    4dcc:	0c36      	lsrs	r6, r6, #16
    4dce:	b2f0      	uxtb	r0, r6
    4dd0:	0011      	movs	r1, r2
    4dd2:	4b77      	ldr	r3, [pc, #476]	; (4fb0 <i2c_master_init+0x29c>)
    4dd4:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    4dd6:	8aa3      	ldrh	r3, [r4, #20]
    4dd8:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
    4dda:	8ae3      	ldrh	r3, [r4, #22]
    4ddc:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    4dde:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    4de0:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    4de2:	2b00      	cmp	r3, #0
    4de4:	d104      	bne.n	4df0 <i2c_master_init+0xdc>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    4de6:	4b73      	ldr	r3, [pc, #460]	; (4fb4 <i2c_master_init+0x2a0>)
    4de8:	789b      	ldrb	r3, [r3, #2]
    4dea:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    4dec:	0fdb      	lsrs	r3, r3, #31
    4dee:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    4df0:	68a1      	ldr	r1, [r4, #8]
    4df2:	6923      	ldr	r3, [r4, #16]
    4df4:	430b      	orrs	r3, r1
    4df6:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    4df8:	2224      	movs	r2, #36	; 0x24
    4dfa:	5ca2      	ldrb	r2, [r4, r2]
    4dfc:	2a00      	cmp	r2, #0
    4dfe:	d002      	beq.n	4e06 <i2c_master_init+0xf2>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    4e00:	2280      	movs	r2, #128	; 0x80
    4e02:	05d2      	lsls	r2, r2, #23
    4e04:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    4e06:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4e08:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    4e0a:	222c      	movs	r2, #44	; 0x2c
    4e0c:	5ca2      	ldrb	r2, [r4, r2]
    4e0e:	2a00      	cmp	r2, #0
    4e10:	d103      	bne.n	4e1a <i2c_master_init+0x106>
    4e12:	2280      	movs	r2, #128	; 0x80
    4e14:	0492      	lsls	r2, r2, #18
    4e16:	4291      	cmp	r1, r2
    4e18:	d102      	bne.n	4e20 <i2c_master_init+0x10c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    4e1a:	2280      	movs	r2, #128	; 0x80
    4e1c:	0512      	lsls	r2, r2, #20
    4e1e:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    4e20:	222d      	movs	r2, #45	; 0x2d
    4e22:	5ca2      	ldrb	r2, [r4, r2]
    4e24:	2a00      	cmp	r2, #0
    4e26:	d002      	beq.n	4e2e <i2c_master_init+0x11a>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    4e28:	2280      	movs	r2, #128	; 0x80
    4e2a:	0412      	lsls	r2, r2, #16
    4e2c:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    4e2e:	222e      	movs	r2, #46	; 0x2e
    4e30:	5ca2      	ldrb	r2, [r4, r2]
    4e32:	2a00      	cmp	r2, #0
    4e34:	d002      	beq.n	4e3c <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    4e36:	2280      	movs	r2, #128	; 0x80
    4e38:	03d2      	lsls	r2, r2, #15
    4e3a:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    4e3c:	4642      	mov	r2, r8
    4e3e:	6812      	ldr	r2, [r2, #0]
    4e40:	4313      	orrs	r3, r2
    4e42:	4642      	mov	r2, r8
    4e44:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    4e46:	2380      	movs	r3, #128	; 0x80
    4e48:	005b      	lsls	r3, r3, #1
    4e4a:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    4e4c:	3512      	adds	r5, #18
    4e4e:	b2e8      	uxtb	r0, r5
    4e50:	4b59      	ldr	r3, [pc, #356]	; (4fb8 <i2c_master_init+0x2a4>)
    4e52:	4798      	blx	r3
    4e54:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    4e56:	23fa      	movs	r3, #250	; 0xfa
    4e58:	009b      	lsls	r3, r3, #2
    4e5a:	6822      	ldr	r2, [r4, #0]
    4e5c:	435a      	muls	r2, r3
    4e5e:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    4e60:	6863      	ldr	r3, [r4, #4]
    4e62:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    4e64:	4d55      	ldr	r5, [pc, #340]	; (4fbc <i2c_master_init+0x2a8>)
    4e66:	47a8      	blx	r5
    4e68:	9000      	str	r0, [sp, #0]
    4e6a:	9101      	str	r1, [sp, #4]
    4e6c:	464b      	mov	r3, r9
    4e6e:	0058      	lsls	r0, r3, #1
    4e70:	47a8      	blx	r5
    4e72:	9002      	str	r0, [sp, #8]
    4e74:	9103      	str	r1, [sp, #12]
    4e76:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    4e78:	47a8      	blx	r5
    4e7a:	9004      	str	r0, [sp, #16]
    4e7c:	9105      	str	r1, [sp, #20]
    4e7e:	4f50      	ldr	r7, [pc, #320]	; (4fc0 <i2c_master_init+0x2ac>)
    4e80:	4a50      	ldr	r2, [pc, #320]	; (4fc4 <i2c_master_init+0x2b0>)
    4e82:	4b51      	ldr	r3, [pc, #324]	; (4fc8 <i2c_master_init+0x2b4>)
    4e84:	9800      	ldr	r0, [sp, #0]
    4e86:	9901      	ldr	r1, [sp, #4]
    4e88:	47b8      	blx	r7
    4e8a:	0002      	movs	r2, r0
    4e8c:	000b      	movs	r3, r1
    4e8e:	9804      	ldr	r0, [sp, #16]
    4e90:	9905      	ldr	r1, [sp, #20]
    4e92:	47b8      	blx	r7
    4e94:	4e4d      	ldr	r6, [pc, #308]	; (4fcc <i2c_master_init+0x2b8>)
    4e96:	2200      	movs	r2, #0
    4e98:	4b4d      	ldr	r3, [pc, #308]	; (4fd0 <i2c_master_init+0x2bc>)
    4e9a:	47b0      	blx	r6
    4e9c:	9004      	str	r0, [sp, #16]
    4e9e:	9105      	str	r1, [sp, #20]
    4ea0:	4648      	mov	r0, r9
    4ea2:	47a8      	blx	r5
    4ea4:	0002      	movs	r2, r0
    4ea6:	000b      	movs	r3, r1
    4ea8:	9804      	ldr	r0, [sp, #16]
    4eaa:	9905      	ldr	r1, [sp, #20]
    4eac:	47b8      	blx	r7
    4eae:	0002      	movs	r2, r0
    4eb0:	000b      	movs	r3, r1
    4eb2:	4d48      	ldr	r5, [pc, #288]	; (4fd4 <i2c_master_init+0x2c0>)
    4eb4:	9800      	ldr	r0, [sp, #0]
    4eb6:	9901      	ldr	r1, [sp, #4]
    4eb8:	47a8      	blx	r5
    4eba:	9a02      	ldr	r2, [sp, #8]
    4ebc:	9b03      	ldr	r3, [sp, #12]
    4ebe:	47b0      	blx	r6
    4ec0:	2200      	movs	r2, #0
    4ec2:	4b45      	ldr	r3, [pc, #276]	; (4fd8 <i2c_master_init+0x2c4>)
    4ec4:	47a8      	blx	r5
    4ec6:	9a02      	ldr	r2, [sp, #8]
    4ec8:	9b03      	ldr	r3, [sp, #12]
    4eca:	4d44      	ldr	r5, [pc, #272]	; (4fdc <i2c_master_init+0x2c8>)
    4ecc:	47a8      	blx	r5
    4ece:	4b44      	ldr	r3, [pc, #272]	; (4fe0 <i2c_master_init+0x2cc>)
    4ed0:	4798      	blx	r3
    4ed2:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    4ed4:	2380      	movs	r3, #128	; 0x80
    4ed6:	049b      	lsls	r3, r3, #18
    4ed8:	68a2      	ldr	r2, [r4, #8]
    4eda:	429a      	cmp	r2, r3
    4edc:	d01e      	beq.n	4f1c <i2c_master_init+0x208>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    4ede:	0003      	movs	r3, r0
    4ee0:	2040      	movs	r0, #64	; 0x40
    4ee2:	2dff      	cmp	r5, #255	; 0xff
    4ee4:	d900      	bls.n	4ee8 <i2c_master_init+0x1d4>
    4ee6:	e73f      	b.n	4d68 <i2c_master_init+0x54>
	int32_t tmp_baudlow_hs = 0;
    4ee8:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    4eea:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    4eec:	25ff      	movs	r5, #255	; 0xff
    4eee:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    4ef0:	0624      	lsls	r4, r4, #24
    4ef2:	4325      	orrs	r5, r4
    4ef4:	0400      	lsls	r0, r0, #16
    4ef6:	23ff      	movs	r3, #255	; 0xff
    4ef8:	041b      	lsls	r3, r3, #16
    4efa:	4018      	ands	r0, r3
    4efc:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    4efe:	4643      	mov	r3, r8
    4f00:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    4f02:	2000      	movs	r0, #0
    4f04:	e730      	b.n	4d68 <i2c_master_init+0x54>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    4f06:	2100      	movs	r1, #0
    4f08:	4640      	mov	r0, r8
    4f0a:	4b36      	ldr	r3, [pc, #216]	; (4fe4 <i2c_master_init+0x2d0>)
    4f0c:	4798      	blx	r3
    4f0e:	e74b      	b.n	4da8 <i2c_master_init+0x94>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    4f10:	2101      	movs	r1, #1
    4f12:	4640      	mov	r0, r8
    4f14:	4b33      	ldr	r3, [pc, #204]	; (4fe4 <i2c_master_init+0x2d0>)
    4f16:	4798      	blx	r3
    4f18:	0006      	movs	r6, r0
    4f1a:	e752      	b.n	4dc2 <i2c_master_init+0xae>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    4f1c:	26fa      	movs	r6, #250	; 0xfa
    4f1e:	00b6      	lsls	r6, r6, #2
    4f20:	4653      	mov	r3, sl
    4f22:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    4f24:	9800      	ldr	r0, [sp, #0]
    4f26:	9901      	ldr	r1, [sp, #4]
    4f28:	0002      	movs	r2, r0
    4f2a:	000b      	movs	r3, r1
    4f2c:	4c27      	ldr	r4, [pc, #156]	; (4fcc <i2c_master_init+0x2b8>)
    4f2e:	47a0      	blx	r4
    4f30:	9000      	str	r0, [sp, #0]
    4f32:	9101      	str	r1, [sp, #4]
    4f34:	0030      	movs	r0, r6
    4f36:	4b21      	ldr	r3, [pc, #132]	; (4fbc <i2c_master_init+0x2a8>)
    4f38:	4798      	blx	r3
    4f3a:	2200      	movs	r2, #0
    4f3c:	4b2a      	ldr	r3, [pc, #168]	; (4fe8 <i2c_master_init+0x2d4>)
    4f3e:	47b8      	blx	r7
    4f40:	0002      	movs	r2, r0
    4f42:	000b      	movs	r3, r1
    4f44:	9800      	ldr	r0, [sp, #0]
    4f46:	9901      	ldr	r1, [sp, #4]
    4f48:	4c24      	ldr	r4, [pc, #144]	; (4fdc <i2c_master_init+0x2c8>)
    4f4a:	47a0      	blx	r4
    4f4c:	2200      	movs	r2, #0
    4f4e:	4b22      	ldr	r3, [pc, #136]	; (4fd8 <i2c_master_init+0x2c4>)
    4f50:	4c20      	ldr	r4, [pc, #128]	; (4fd4 <i2c_master_init+0x2c0>)
    4f52:	47a0      	blx	r4
    4f54:	4b22      	ldr	r3, [pc, #136]	; (4fe0 <i2c_master_init+0x2cc>)
    4f56:	4798      	blx	r3
    4f58:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    4f5a:	d00c      	beq.n	4f76 <i2c_master_init+0x262>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    4f5c:	0031      	movs	r1, r6
    4f5e:	9807      	ldr	r0, [sp, #28]
    4f60:	4b22      	ldr	r3, [pc, #136]	; (4fec <i2c_master_init+0x2d8>)
    4f62:	4798      	blx	r3
    4f64:	3802      	subs	r0, #2
    4f66:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    4f68:	002b      	movs	r3, r5
    4f6a:	2dff      	cmp	r5, #255	; 0xff
    4f6c:	d80c      	bhi.n	4f88 <i2c_master_init+0x274>
    4f6e:	28ff      	cmp	r0, #255	; 0xff
    4f70:	d9bc      	bls.n	4eec <i2c_master_init+0x1d8>
    4f72:	2040      	movs	r0, #64	; 0x40
    4f74:	e6f8      	b.n	4d68 <i2c_master_init+0x54>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    4f76:	0071      	lsls	r1, r6, #1
    4f78:	1e48      	subs	r0, r1, #1
    4f7a:	9b07      	ldr	r3, [sp, #28]
    4f7c:	469c      	mov	ip, r3
    4f7e:	4460      	add	r0, ip
    4f80:	4b1a      	ldr	r3, [pc, #104]	; (4fec <i2c_master_init+0x2d8>)
    4f82:	4798      	blx	r3
    4f84:	3801      	subs	r0, #1
    4f86:	e7ef      	b.n	4f68 <i2c_master_init+0x254>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    4f88:	2040      	movs	r0, #64	; 0x40
    4f8a:	e6ed      	b.n	4d68 <i2c_master_init+0x54>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    4f8c:	4a04      	ldr	r2, [pc, #16]	; (4fa0 <i2c_master_init+0x28c>)
    4f8e:	6a13      	ldr	r3, [r2, #32]
    4f90:	2102      	movs	r1, #2
    4f92:	430b      	orrs	r3, r1
    4f94:	6213      	str	r3, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    4f96:	2518      	movs	r5, #24
    4f98:	e6d4      	b.n	4d44 <i2c_master_init+0x30>
    4f9a:	46c0      	nop			; (mov r8, r8)
    4f9c:	00005675 	.word	0x00005675
    4fa0:	40000400 	.word	0x40000400
    4fa4:	0000696d 	.word	0x0000696d
    4fa8:	000068fd 	.word	0x000068fd
    4fac:	000054cd 	.word	0x000054cd
    4fb0:	00006a69 	.word	0x00006a69
    4fb4:	41002000 	.word	0x41002000
    4fb8:	00006991 	.word	0x00006991
    4fbc:	00015e01 	.word	0x00015e01
    4fc0:	000151e9 	.word	0x000151e9
    4fc4:	e826d695 	.word	0xe826d695
    4fc8:	3e112e0b 	.word	0x3e112e0b
    4fcc:	00014361 	.word	0x00014361
    4fd0:	40240000 	.word	0x40240000
    4fd4:	000156e9 	.word	0x000156e9
    4fd8:	3ff00000 	.word	0x3ff00000
    4fdc:	00014981 	.word	0x00014981
    4fe0:	00015d15 	.word	0x00015d15
    4fe4:	00005519 	.word	0x00005519
    4fe8:	40080000 	.word	0x40080000
    4fec:	00012edd 	.word	0x00012edd

00004ff0 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
    4ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4ff2:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4ff4:	6807      	ldr	r7, [r0, #0]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    4ff6:	4e08      	ldr	r6, [pc, #32]	; (5018 <i2c_master_reset+0x28>)
    4ff8:	47b0      	blx	r6
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4ffa:	6825      	ldr	r5, [r4, #0]
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    4ffc:	0020      	movs	r0, r4
    4ffe:	47b0      	blx	r6

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    5000:	2383      	movs	r3, #131	; 0x83
    5002:	752b      	strb	r3, [r5, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    5004:	762b      	strb	r3, [r5, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    5006:	682b      	ldr	r3, [r5, #0]
    5008:	2202      	movs	r2, #2
    500a:	4393      	bics	r3, r2
    500c:	602b      	str	r3, [r5, #0]
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
	system_interrupt_leave_critical_section();
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    500e:	0020      	movs	r0, r4
    5010:	47b0      	blx	r6

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
    5012:	2301      	movs	r3, #1
    5014:	603b      	str	r3, [r7, #0]
}
    5016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5018:	00004d09 	.word	0x00004d09

0000501c <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    501c:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    501e:	7e1a      	ldrb	r2, [r3, #24]
    5020:	0792      	lsls	r2, r2, #30
    5022:	d507      	bpl.n	5034 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    5024:	2202      	movs	r2, #2
    5026:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    5028:	8b5b      	ldrh	r3, [r3, #26]
    502a:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    502c:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    502e:	17db      	asrs	r3, r3, #31
    5030:	4018      	ands	r0, r3
}
    5032:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    5034:	8b5a      	ldrh	r2, [r3, #26]
    5036:	0752      	lsls	r2, r2, #29
    5038:	d506      	bpl.n	5048 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    503a:	6859      	ldr	r1, [r3, #4]
    503c:	22c0      	movs	r2, #192	; 0xc0
    503e:	0292      	lsls	r2, r2, #10
    5040:	430a      	orrs	r2, r1
    5042:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    5044:	2018      	movs	r0, #24
    5046:	e7f4      	b.n	5032 <_i2c_master_address_response+0x16>
	return STATUS_OK;
    5048:	2000      	movs	r0, #0
    504a:	e7f2      	b.n	5032 <_i2c_master_address_response+0x16>

0000504c <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    504c:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    504e:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    5050:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    5052:	2401      	movs	r4, #1
    5054:	2502      	movs	r5, #2
    5056:	7e11      	ldrb	r1, [r2, #24]
    5058:	4221      	tst	r1, r4
    505a:	d10b      	bne.n	5074 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    505c:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    505e:	4229      	tst	r1, r5
    5060:	d106      	bne.n	5070 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    5062:	3301      	adds	r3, #1
    5064:	b29b      	uxth	r3, r3
    5066:	8901      	ldrh	r1, [r0, #8]
    5068:	4299      	cmp	r1, r3
    506a:	d8f4      	bhi.n	5056 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    506c:	2012      	movs	r0, #18
    506e:	e002      	b.n	5076 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    5070:	2000      	movs	r0, #0
    5072:	e000      	b.n	5076 <_i2c_master_wait_for_bus+0x2a>
    5074:	2000      	movs	r0, #0
}
    5076:	bd30      	pop	{r4, r5, pc}

00005078 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    5078:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    507a:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    507c:	6862      	ldr	r2, [r4, #4]
    507e:	2380      	movs	r3, #128	; 0x80
    5080:	02db      	lsls	r3, r3, #11
    5082:	4313      	orrs	r3, r2
    5084:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    5086:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    5088:	4b02      	ldr	r3, [pc, #8]	; (5094 <_i2c_master_send_hs_master_code+0x1c>)
    508a:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    508c:	2301      	movs	r3, #1
    508e:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    5090:	bd10      	pop	{r4, pc}
    5092:	46c0      	nop			; (mov r8, r8)
    5094:	0000504d 	.word	0x0000504d

00005098 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    5098:	b5f0      	push	{r4, r5, r6, r7, lr}
    509a:	46de      	mov	lr, fp
    509c:	4657      	mov	r7, sl
    509e:	464e      	mov	r6, r9
    50a0:	4645      	mov	r5, r8
    50a2:	b5e0      	push	{r5, r6, r7, lr}
    50a4:	b083      	sub	sp, #12
    50a6:	0006      	movs	r6, r0
    50a8:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    50aa:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    50ac:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    50ae:	682b      	ldr	r3, [r5, #0]
    50b0:	011b      	lsls	r3, r3, #4
    50b2:	0fdb      	lsrs	r3, r3, #31
    50b4:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    50b6:	7a4b      	ldrb	r3, [r1, #9]
    50b8:	2b00      	cmp	r3, #0
    50ba:	d12b      	bne.n	5114 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    50bc:	686b      	ldr	r3, [r5, #4]
    50be:	4a58      	ldr	r2, [pc, #352]	; (5220 <_i2c_master_read_packet+0x188>)
    50c0:	4013      	ands	r3, r2
    50c2:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    50c4:	464b      	mov	r3, r9
    50c6:	7a1b      	ldrb	r3, [r3, #8]
    50c8:	2b00      	cmp	r3, #0
    50ca:	d127      	bne.n	511c <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    50cc:	464b      	mov	r3, r9
    50ce:	881b      	ldrh	r3, [r3, #0]
    50d0:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    50d2:	464a      	mov	r2, r9
    50d4:	7a52      	ldrb	r2, [r2, #9]
    50d6:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    50d8:	4313      	orrs	r3, r2
    50da:	2201      	movs	r2, #1
    50dc:	4313      	orrs	r3, r2
    50de:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    50e0:	0030      	movs	r0, r6
    50e2:	4b50      	ldr	r3, [pc, #320]	; (5224 <_i2c_master_read_packet+0x18c>)
    50e4:	4798      	blx	r3
    50e6:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    50e8:	4653      	mov	r3, sl
    50ea:	2b00      	cmp	r3, #0
    50ec:	d003      	beq.n	50f6 <_i2c_master_read_packet+0x5e>
    50ee:	464b      	mov	r3, r9
    50f0:	885b      	ldrh	r3, [r3, #2]
    50f2:	2b01      	cmp	r3, #1
    50f4:	d03b      	beq.n	516e <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    50f6:	686b      	ldr	r3, [r5, #4]
    50f8:	4a49      	ldr	r2, [pc, #292]	; (5220 <_i2c_master_read_packet+0x188>)
    50fa:	4013      	ands	r3, r2
    50fc:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    50fe:	9b01      	ldr	r3, [sp, #4]
    5100:	2b00      	cmp	r3, #0
    5102:	d03a      	beq.n	517a <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
    5104:	9801      	ldr	r0, [sp, #4]
    5106:	b003      	add	sp, #12
    5108:	bc3c      	pop	{r2, r3, r4, r5}
    510a:	4690      	mov	r8, r2
    510c:	4699      	mov	r9, r3
    510e:	46a2      	mov	sl, r4
    5110:	46ab      	mov	fp, r5
    5112:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    5114:	7a89      	ldrb	r1, [r1, #10]
    5116:	4b44      	ldr	r3, [pc, #272]	; (5228 <_i2c_master_read_packet+0x190>)
    5118:	4798      	blx	r3
    511a:	e7cf      	b.n	50bc <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
    511c:	464b      	mov	r3, r9
    511e:	881b      	ldrh	r3, [r3, #0]
    5120:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    5122:	464a      	mov	r2, r9
    5124:	7a52      	ldrb	r2, [r2, #9]
    5126:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    5128:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    512a:	2280      	movs	r2, #128	; 0x80
    512c:	0212      	lsls	r2, r2, #8
    512e:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    5130:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
    5132:	0030      	movs	r0, r6
    5134:	4b3b      	ldr	r3, [pc, #236]	; (5224 <_i2c_master_read_packet+0x18c>)
    5136:	4798      	blx	r3
    5138:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    513a:	686b      	ldr	r3, [r5, #4]
    513c:	4a38      	ldr	r2, [pc, #224]	; (5220 <_i2c_master_read_packet+0x188>)
    513e:	4013      	ands	r3, r2
    5140:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
    5142:	2800      	cmp	r0, #0
    5144:	d1de      	bne.n	5104 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
    5146:	0030      	movs	r0, r6
    5148:	4b38      	ldr	r3, [pc, #224]	; (522c <_i2c_master_read_packet+0x194>)
    514a:	4798      	blx	r3
    514c:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
    514e:	2800      	cmp	r0, #0
    5150:	d1d8      	bne.n	5104 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    5152:	464b      	mov	r3, r9
    5154:	881b      	ldrh	r3, [r3, #0]
    5156:	0a1b      	lsrs	r3, r3, #8
    5158:	2278      	movs	r2, #120	; 0x78
    515a:	4313      	orrs	r3, r2
    515c:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    515e:	464a      	mov	r2, r9
    5160:	7a52      	ldrb	r2, [r2, #9]
    5162:	0392      	lsls	r2, r2, #14
    5164:	2101      	movs	r1, #1
    5166:	430a      	orrs	r2, r1
    5168:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    516a:	626b      	str	r3, [r5, #36]	; 0x24
    516c:	e7b8      	b.n	50e0 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    516e:	686a      	ldr	r2, [r5, #4]
    5170:	2380      	movs	r3, #128	; 0x80
    5172:	02db      	lsls	r3, r3, #11
    5174:	4313      	orrs	r3, r2
    5176:	606b      	str	r3, [r5, #4]
    5178:	e7c1      	b.n	50fe <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
    517a:	0030      	movs	r0, r6
    517c:	4b2b      	ldr	r3, [pc, #172]	; (522c <_i2c_master_read_packet+0x194>)
    517e:	4798      	blx	r3
    5180:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    5182:	2800      	cmp	r0, #0
    5184:	d1be      	bne.n	5104 <_i2c_master_read_packet+0x6c>
    5186:	3c01      	subs	r4, #1
    5188:	b2a4      	uxth	r4, r4
    518a:	4680      	mov	r8, r0
		while (tmp_data_length--) {
    518c:	4b28      	ldr	r3, [pc, #160]	; (5230 <_i2c_master_read_packet+0x198>)
    518e:	469b      	mov	fp, r3
    5190:	e015      	b.n	51be <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    5192:	2c01      	cmp	r4, #1
    5194:	d020      	beq.n	51d8 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
    5196:	0030      	movs	r0, r6
    5198:	4b26      	ldr	r3, [pc, #152]	; (5234 <_i2c_master_read_packet+0x19c>)
    519a:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    519c:	4643      	mov	r3, r8
    519e:	1c5f      	adds	r7, r3, #1
    51a0:	b2bf      	uxth	r7, r7
    51a2:	2328      	movs	r3, #40	; 0x28
    51a4:	5ceb      	ldrb	r3, [r5, r3]
    51a6:	464a      	mov	r2, r9
    51a8:	6852      	ldr	r2, [r2, #4]
    51aa:	4641      	mov	r1, r8
    51ac:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
    51ae:	0030      	movs	r0, r6
    51b0:	4b1c      	ldr	r3, [pc, #112]	; (5224 <_i2c_master_read_packet+0x18c>)
    51b2:	4798      	blx	r3
    51b4:	3c01      	subs	r4, #1
    51b6:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
    51b8:	2800      	cmp	r0, #0
    51ba:	d115      	bne.n	51e8 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
    51bc:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
    51be:	455c      	cmp	r4, fp
    51c0:	d014      	beq.n	51ec <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    51c2:	8b6b      	ldrh	r3, [r5, #26]
    51c4:	069b      	lsls	r3, r3, #26
    51c6:	d527      	bpl.n	5218 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    51c8:	7af3      	ldrb	r3, [r6, #11]
    51ca:	2b00      	cmp	r3, #0
    51cc:	d0e3      	beq.n	5196 <_i2c_master_read_packet+0xfe>
    51ce:	4653      	mov	r3, sl
    51d0:	2b00      	cmp	r3, #0
    51d2:	d1de      	bne.n	5192 <_i2c_master_read_packet+0xfa>
    51d4:	2c00      	cmp	r4, #0
    51d6:	d1de      	bne.n	5196 <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    51d8:	686a      	ldr	r2, [r5, #4]
    51da:	2380      	movs	r3, #128	; 0x80
    51dc:	02db      	lsls	r3, r3, #11
    51de:	4313      	orrs	r3, r2
    51e0:	606b      	str	r3, [r5, #4]
    51e2:	3c01      	subs	r4, #1
    51e4:	b2a4      	uxth	r4, r4
    51e6:	e7ea      	b.n	51be <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
    51e8:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
    51ea:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    51ec:	7ab3      	ldrb	r3, [r6, #10]
    51ee:	2b00      	cmp	r3, #0
    51f0:	d109      	bne.n	5206 <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
    51f2:	0030      	movs	r0, r6
    51f4:	4b0f      	ldr	r3, [pc, #60]	; (5234 <_i2c_master_read_packet+0x19c>)
    51f6:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    51f8:	2328      	movs	r3, #40	; 0x28
    51fa:	5cea      	ldrb	r2, [r5, r3]
    51fc:	464b      	mov	r3, r9
    51fe:	685b      	ldr	r3, [r3, #4]
    5200:	4641      	mov	r1, r8
    5202:	545a      	strb	r2, [r3, r1]
    5204:	e77e      	b.n	5104 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
    5206:	0030      	movs	r0, r6
    5208:	4b0a      	ldr	r3, [pc, #40]	; (5234 <_i2c_master_read_packet+0x19c>)
    520a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    520c:	686a      	ldr	r2, [r5, #4]
    520e:	23c0      	movs	r3, #192	; 0xc0
    5210:	029b      	lsls	r3, r3, #10
    5212:	4313      	orrs	r3, r2
    5214:	606b      	str	r3, [r5, #4]
    5216:	e7ec      	b.n	51f2 <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
    5218:	2341      	movs	r3, #65	; 0x41
    521a:	9301      	str	r3, [sp, #4]
    521c:	e772      	b.n	5104 <_i2c_master_read_packet+0x6c>
    521e:	46c0      	nop			; (mov r8, r8)
    5220:	fffbffff 	.word	0xfffbffff
    5224:	0000504d 	.word	0x0000504d
    5228:	00005079 	.word	0x00005079
    522c:	0000501d 	.word	0x0000501d
    5230:	0000ffff 	.word	0x0000ffff
    5234:	00004d09 	.word	0x00004d09

00005238 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    5238:	b5f0      	push	{r4, r5, r6, r7, lr}
    523a:	46de      	mov	lr, fp
    523c:	4657      	mov	r7, sl
    523e:	464e      	mov	r6, r9
    5240:	4645      	mov	r5, r8
    5242:	b5e0      	push	{r5, r6, r7, lr}
    5244:	b083      	sub	sp, #12
    5246:	0006      	movs	r6, r0
    5248:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    524a:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    524c:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    524e:	4b32      	ldr	r3, [pc, #200]	; (5318 <_i2c_master_write_packet+0xe0>)
    5250:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    5252:	7a7b      	ldrb	r3, [r7, #9]
    5254:	2b00      	cmp	r3, #0
    5256:	d11d      	bne.n	5294 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5258:	686b      	ldr	r3, [r5, #4]
    525a:	4a30      	ldr	r2, [pc, #192]	; (531c <_i2c_master_write_packet+0xe4>)
    525c:	4013      	ands	r3, r2
    525e:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    5260:	7a3b      	ldrb	r3, [r7, #8]
    5262:	2b00      	cmp	r3, #0
    5264:	d01b      	beq.n	529e <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    5266:	883b      	ldrh	r3, [r7, #0]
    5268:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    526a:	7a7a      	ldrb	r2, [r7, #9]
    526c:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    526e:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    5270:	2280      	movs	r2, #128	; 0x80
    5272:	0212      	lsls	r2, r2, #8
    5274:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    5276:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    5278:	0030      	movs	r0, r6
    527a:	4b29      	ldr	r3, [pc, #164]	; (5320 <_i2c_master_write_packet+0xe8>)
    527c:	4798      	blx	r3
    527e:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    5280:	2800      	cmp	r0, #0
    5282:	d013      	beq.n	52ac <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    5284:	9801      	ldr	r0, [sp, #4]
    5286:	b003      	add	sp, #12
    5288:	bc3c      	pop	{r2, r3, r4, r5}
    528a:	4690      	mov	r8, r2
    528c:	4699      	mov	r9, r3
    528e:	46a2      	mov	sl, r4
    5290:	46ab      	mov	fp, r5
    5292:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    5294:	7ab9      	ldrb	r1, [r7, #10]
    5296:	0030      	movs	r0, r6
    5298:	4b22      	ldr	r3, [pc, #136]	; (5324 <_i2c_master_write_packet+0xec>)
    529a:	4798      	blx	r3
    529c:	e7dc      	b.n	5258 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    529e:	883b      	ldrh	r3, [r7, #0]
    52a0:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    52a2:	7a7a      	ldrb	r2, [r7, #9]
    52a4:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    52a6:	4313      	orrs	r3, r2
    52a8:	626b      	str	r3, [r5, #36]	; 0x24
    52aa:	e7e5      	b.n	5278 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
    52ac:	0030      	movs	r0, r6
    52ae:	4b1e      	ldr	r3, [pc, #120]	; (5328 <_i2c_master_write_packet+0xf0>)
    52b0:	4798      	blx	r3
    52b2:	1e03      	subs	r3, r0, #0
    52b4:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    52b6:	d1e5      	bne.n	5284 <_i2c_master_write_packet+0x4c>
    52b8:	46a0      	mov	r8, r4
    52ba:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    52bc:	3320      	adds	r3, #32
    52be:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
    52c0:	4b15      	ldr	r3, [pc, #84]	; (5318 <_i2c_master_write_packet+0xe0>)
    52c2:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
    52c4:	4b16      	ldr	r3, [pc, #88]	; (5320 <_i2c_master_write_packet+0xe8>)
    52c6:	469a      	mov	sl, r3
		while (tmp_data_length--) {
    52c8:	4544      	cmp	r4, r8
    52ca:	d015      	beq.n	52f8 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    52cc:	8b6b      	ldrh	r3, [r5, #26]
    52ce:	464a      	mov	r2, r9
    52d0:	4213      	tst	r3, r2
    52d2:	d01d      	beq.n	5310 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
    52d4:	0030      	movs	r0, r6
    52d6:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    52d8:	687b      	ldr	r3, [r7, #4]
    52da:	5d1a      	ldrb	r2, [r3, r4]
    52dc:	2328      	movs	r3, #40	; 0x28
    52de:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
    52e0:	0030      	movs	r0, r6
    52e2:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
    52e4:	2800      	cmp	r0, #0
    52e6:	d106      	bne.n	52f6 <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    52e8:	8b6b      	ldrh	r3, [r5, #26]
    52ea:	3401      	adds	r4, #1
    52ec:	075b      	lsls	r3, r3, #29
    52ee:	d5eb      	bpl.n	52c8 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
    52f0:	231e      	movs	r3, #30
    52f2:	9301      	str	r3, [sp, #4]
    52f4:	e000      	b.n	52f8 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
    52f6:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    52f8:	7ab3      	ldrb	r3, [r6, #10]
    52fa:	2b00      	cmp	r3, #0
    52fc:	d0c2      	beq.n	5284 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
    52fe:	0030      	movs	r0, r6
    5300:	4b05      	ldr	r3, [pc, #20]	; (5318 <_i2c_master_write_packet+0xe0>)
    5302:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    5304:	686a      	ldr	r2, [r5, #4]
    5306:	23c0      	movs	r3, #192	; 0xc0
    5308:	029b      	lsls	r3, r3, #10
    530a:	4313      	orrs	r3, r2
    530c:	606b      	str	r3, [r5, #4]
    530e:	e7b9      	b.n	5284 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
    5310:	2341      	movs	r3, #65	; 0x41
    5312:	9301      	str	r3, [sp, #4]
    5314:	e7b6      	b.n	5284 <_i2c_master_write_packet+0x4c>
    5316:	46c0      	nop			; (mov r8, r8)
    5318:	00004d09 	.word	0x00004d09
    531c:	fffbffff 	.word	0xfffbffff
    5320:	0000504d 	.word	0x0000504d
    5324:	00005079 	.word	0x00005079
    5328:	0000501d 	.word	0x0000501d

0000532c <i2c_master_read_packet_wait>:
{
    532c:	b510      	push	{r4, lr}
	module->send_stop = true;
    532e:	2301      	movs	r3, #1
    5330:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    5332:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    5334:	4b01      	ldr	r3, [pc, #4]	; (533c <i2c_master_read_packet_wait+0x10>)
    5336:	4798      	blx	r3
}
    5338:	bd10      	pop	{r4, pc}
    533a:	46c0      	nop			; (mov r8, r8)
    533c:	00005099 	.word	0x00005099

00005340 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    5340:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = false;
    5342:	2300      	movs	r3, #0
    5344:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    5346:	3301      	adds	r3, #1
    5348:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
    534a:	4b01      	ldr	r3, [pc, #4]	; (5350 <i2c_master_write_packet_wait_no_stop+0x10>)
    534c:	4798      	blx	r3
}
    534e:	bd10      	pop	{r4, pc}
    5350:	00005239 	.word	0x00005239

00005354 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    5354:	b5f0      	push	{r4, r5, r6, r7, lr}
    5356:	46de      	mov	lr, fp
    5358:	4657      	mov	r7, sl
    535a:	464e      	mov	r6, r9
    535c:	4645      	mov	r5, r8
    535e:	b5e0      	push	{r5, r6, r7, lr}
    5360:	b087      	sub	sp, #28
    5362:	4680      	mov	r8, r0
    5364:	9104      	str	r1, [sp, #16]
    5366:	0016      	movs	r6, r2
    5368:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    536a:	2200      	movs	r2, #0
    536c:	2300      	movs	r3, #0
    536e:	2100      	movs	r1, #0
    5370:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    5372:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    5374:	2001      	movs	r0, #1
    5376:	0021      	movs	r1, r4
    5378:	9600      	str	r6, [sp, #0]
    537a:	9701      	str	r7, [sp, #4]
    537c:	465c      	mov	r4, fp
    537e:	9403      	str	r4, [sp, #12]
    5380:	4644      	mov	r4, r8
    5382:	9405      	str	r4, [sp, #20]
    5384:	e013      	b.n	53ae <long_division+0x5a>
    5386:	2420      	movs	r4, #32
    5388:	1a64      	subs	r4, r4, r1
    538a:	0005      	movs	r5, r0
    538c:	40e5      	lsrs	r5, r4
    538e:	46a8      	mov	r8, r5
    5390:	e014      	b.n	53bc <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    5392:	9c00      	ldr	r4, [sp, #0]
    5394:	9d01      	ldr	r5, [sp, #4]
    5396:	1b12      	subs	r2, r2, r4
    5398:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    539a:	465c      	mov	r4, fp
    539c:	464d      	mov	r5, r9
    539e:	432c      	orrs	r4, r5
    53a0:	46a3      	mov	fp, r4
    53a2:	9c03      	ldr	r4, [sp, #12]
    53a4:	4645      	mov	r5, r8
    53a6:	432c      	orrs	r4, r5
    53a8:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    53aa:	3901      	subs	r1, #1
    53ac:	d325      	bcc.n	53fa <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    53ae:	2420      	movs	r4, #32
    53b0:	4264      	negs	r4, r4
    53b2:	190c      	adds	r4, r1, r4
    53b4:	d4e7      	bmi.n	5386 <long_division+0x32>
    53b6:	0005      	movs	r5, r0
    53b8:	40a5      	lsls	r5, r4
    53ba:	46a8      	mov	r8, r5
    53bc:	0004      	movs	r4, r0
    53be:	408c      	lsls	r4, r1
    53c0:	46a1      	mov	r9, r4
		r = r << 1;
    53c2:	1892      	adds	r2, r2, r2
    53c4:	415b      	adcs	r3, r3
    53c6:	0014      	movs	r4, r2
    53c8:	001d      	movs	r5, r3
		if (n & bit_shift) {
    53ca:	9e05      	ldr	r6, [sp, #20]
    53cc:	464f      	mov	r7, r9
    53ce:	403e      	ands	r6, r7
    53d0:	46b4      	mov	ip, r6
    53d2:	9e04      	ldr	r6, [sp, #16]
    53d4:	4647      	mov	r7, r8
    53d6:	403e      	ands	r6, r7
    53d8:	46b2      	mov	sl, r6
    53da:	4666      	mov	r6, ip
    53dc:	4657      	mov	r7, sl
    53de:	433e      	orrs	r6, r7
    53e0:	d003      	beq.n	53ea <long_division+0x96>
			r |= 0x01;
    53e2:	0006      	movs	r6, r0
    53e4:	4326      	orrs	r6, r4
    53e6:	0032      	movs	r2, r6
    53e8:	002b      	movs	r3, r5
		if (r >= d) {
    53ea:	9c00      	ldr	r4, [sp, #0]
    53ec:	9d01      	ldr	r5, [sp, #4]
    53ee:	429d      	cmp	r5, r3
    53f0:	d8db      	bhi.n	53aa <long_division+0x56>
    53f2:	d1ce      	bne.n	5392 <long_division+0x3e>
    53f4:	4294      	cmp	r4, r2
    53f6:	d8d8      	bhi.n	53aa <long_division+0x56>
    53f8:	e7cb      	b.n	5392 <long_division+0x3e>
    53fa:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    53fc:	4658      	mov	r0, fp
    53fe:	0019      	movs	r1, r3
    5400:	b007      	add	sp, #28
    5402:	bc3c      	pop	{r2, r3, r4, r5}
    5404:	4690      	mov	r8, r2
    5406:	4699      	mov	r9, r3
    5408:	46a2      	mov	sl, r4
    540a:	46ab      	mov	fp, r5
    540c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000540e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    540e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    5410:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5412:	2340      	movs	r3, #64	; 0x40
    5414:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    5416:	4281      	cmp	r1, r0
    5418:	d202      	bcs.n	5420 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    541a:	0018      	movs	r0, r3
    541c:	bd10      	pop	{r4, pc}
		baud_calculated++;
    541e:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    5420:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    5422:	1c63      	adds	r3, r4, #1
    5424:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    5426:	4288      	cmp	r0, r1
    5428:	d9f9      	bls.n	541e <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    542a:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    542c:	2cff      	cmp	r4, #255	; 0xff
    542e:	d8f4      	bhi.n	541a <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    5430:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    5432:	2300      	movs	r3, #0
    5434:	e7f1      	b.n	541a <_sercom_get_sync_baud_val+0xc>
    5436:	Address 0x00005436 is out of bounds.


00005438 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    5438:	b5f0      	push	{r4, r5, r6, r7, lr}
    543a:	b083      	sub	sp, #12
    543c:	000f      	movs	r7, r1
    543e:	0016      	movs	r6, r2
    5440:	aa08      	add	r2, sp, #32
    5442:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    5444:	0004      	movs	r4, r0
    5446:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5448:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    544a:	42bc      	cmp	r4, r7
    544c:	d902      	bls.n	5454 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    544e:	0010      	movs	r0, r2
    5450:	b003      	add	sp, #12
    5452:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    5454:	2b00      	cmp	r3, #0
    5456:	d114      	bne.n	5482 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    5458:	0002      	movs	r2, r0
    545a:	0008      	movs	r0, r1
    545c:	2100      	movs	r1, #0
    545e:	4c19      	ldr	r4, [pc, #100]	; (54c4 <_sercom_get_async_baud_val+0x8c>)
    5460:	47a0      	blx	r4
    5462:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    5464:	003a      	movs	r2, r7
    5466:	2300      	movs	r3, #0
    5468:	2000      	movs	r0, #0
    546a:	4c17      	ldr	r4, [pc, #92]	; (54c8 <_sercom_get_async_baud_val+0x90>)
    546c:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    546e:	2200      	movs	r2, #0
    5470:	2301      	movs	r3, #1
    5472:	1a12      	subs	r2, r2, r0
    5474:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    5476:	0c12      	lsrs	r2, r2, #16
    5478:	041b      	lsls	r3, r3, #16
    547a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    547c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    547e:	2200      	movs	r2, #0
    5480:	e7e5      	b.n	544e <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    5482:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    5484:	2b01      	cmp	r3, #1
    5486:	d1f9      	bne.n	547c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    5488:	000a      	movs	r2, r1
    548a:	2300      	movs	r3, #0
    548c:	2100      	movs	r1, #0
    548e:	4c0d      	ldr	r4, [pc, #52]	; (54c4 <_sercom_get_async_baud_val+0x8c>)
    5490:	47a0      	blx	r4
    5492:	0002      	movs	r2, r0
    5494:	000b      	movs	r3, r1
    5496:	9200      	str	r2, [sp, #0]
    5498:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    549a:	0038      	movs	r0, r7
    549c:	2100      	movs	r1, #0
    549e:	4c0a      	ldr	r4, [pc, #40]	; (54c8 <_sercom_get_async_baud_val+0x90>)
    54a0:	47a0      	blx	r4
    54a2:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    54a4:	2380      	movs	r3, #128	; 0x80
    54a6:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    54a8:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    54aa:	4298      	cmp	r0, r3
    54ac:	d8cf      	bhi.n	544e <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    54ae:	0f79      	lsrs	r1, r7, #29
    54b0:	00f8      	lsls	r0, r7, #3
    54b2:	9a00      	ldr	r2, [sp, #0]
    54b4:	9b01      	ldr	r3, [sp, #4]
    54b6:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    54b8:	00ea      	lsls	r2, r5, #3
    54ba:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    54bc:	b2d2      	uxtb	r2, r2
    54be:	0352      	lsls	r2, r2, #13
    54c0:	432a      	orrs	r2, r5
    54c2:	e7db      	b.n	547c <_sercom_get_async_baud_val+0x44>
    54c4:	000132f9 	.word	0x000132f9
    54c8:	00005355 	.word	0x00005355

000054cc <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    54cc:	b510      	push	{r4, lr}
    54ce:	b082      	sub	sp, #8
    54d0:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    54d2:	4b0e      	ldr	r3, [pc, #56]	; (550c <sercom_set_gclk_generator+0x40>)
    54d4:	781b      	ldrb	r3, [r3, #0]
    54d6:	2b00      	cmp	r3, #0
    54d8:	d007      	beq.n	54ea <sercom_set_gclk_generator+0x1e>
    54da:	2900      	cmp	r1, #0
    54dc:	d105      	bne.n	54ea <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    54de:	4b0b      	ldr	r3, [pc, #44]	; (550c <sercom_set_gclk_generator+0x40>)
    54e0:	785b      	ldrb	r3, [r3, #1]
    54e2:	4283      	cmp	r3, r0
    54e4:	d010      	beq.n	5508 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    54e6:	201d      	movs	r0, #29
    54e8:	e00c      	b.n	5504 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    54ea:	a901      	add	r1, sp, #4
    54ec:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    54ee:	2011      	movs	r0, #17
    54f0:	4b07      	ldr	r3, [pc, #28]	; (5510 <sercom_set_gclk_generator+0x44>)
    54f2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    54f4:	2011      	movs	r0, #17
    54f6:	4b07      	ldr	r3, [pc, #28]	; (5514 <sercom_set_gclk_generator+0x48>)
    54f8:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    54fa:	4b04      	ldr	r3, [pc, #16]	; (550c <sercom_set_gclk_generator+0x40>)
    54fc:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    54fe:	2201      	movs	r2, #1
    5500:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    5502:	2000      	movs	r0, #0
}
    5504:	b002      	add	sp, #8
    5506:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    5508:	2000      	movs	r0, #0
    550a:	e7fb      	b.n	5504 <sercom_set_gclk_generator+0x38>
    550c:	200000bc 	.word	0x200000bc
    5510:	0000696d 	.word	0x0000696d
    5514:	000068fd 	.word	0x000068fd

00005518 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    5518:	4b3c      	ldr	r3, [pc, #240]	; (560c <_sercom_get_default_pad+0xf4>)
    551a:	4298      	cmp	r0, r3
    551c:	d032      	beq.n	5584 <_sercom_get_default_pad+0x6c>
    551e:	d90a      	bls.n	5536 <_sercom_get_default_pad+0x1e>
    5520:	4b3b      	ldr	r3, [pc, #236]	; (5610 <_sercom_get_default_pad+0xf8>)
    5522:	4298      	cmp	r0, r3
    5524:	d04e      	beq.n	55c4 <_sercom_get_default_pad+0xac>
    5526:	4b3b      	ldr	r3, [pc, #236]	; (5614 <_sercom_get_default_pad+0xfc>)
    5528:	4298      	cmp	r0, r3
    552a:	d055      	beq.n	55d8 <_sercom_get_default_pad+0xc0>
    552c:	4b3a      	ldr	r3, [pc, #232]	; (5618 <_sercom_get_default_pad+0x100>)
    552e:	4298      	cmp	r0, r3
    5530:	d038      	beq.n	55a4 <_sercom_get_default_pad+0x8c>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    5532:	2000      	movs	r0, #0
}
    5534:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    5536:	2384      	movs	r3, #132	; 0x84
    5538:	05db      	lsls	r3, r3, #23
    553a:	4298      	cmp	r0, r3
    553c:	d00c      	beq.n	5558 <_sercom_get_default_pad+0x40>
    553e:	4b37      	ldr	r3, [pc, #220]	; (561c <_sercom_get_default_pad+0x104>)
    5540:	4298      	cmp	r0, r3
    5542:	d1f6      	bne.n	5532 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5544:	2901      	cmp	r1, #1
    5546:	d017      	beq.n	5578 <_sercom_get_default_pad+0x60>
    5548:	2900      	cmp	r1, #0
    554a:	d057      	beq.n	55fc <_sercom_get_default_pad+0xe4>
    554c:	2902      	cmp	r1, #2
    554e:	d015      	beq.n	557c <_sercom_get_default_pad+0x64>
    5550:	2903      	cmp	r1, #3
    5552:	d015      	beq.n	5580 <_sercom_get_default_pad+0x68>
	return 0;
    5554:	2000      	movs	r0, #0
    5556:	e7ed      	b.n	5534 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5558:	2901      	cmp	r1, #1
    555a:	d007      	beq.n	556c <_sercom_get_default_pad+0x54>
    555c:	2900      	cmp	r1, #0
    555e:	d04b      	beq.n	55f8 <_sercom_get_default_pad+0xe0>
    5560:	2902      	cmp	r1, #2
    5562:	d005      	beq.n	5570 <_sercom_get_default_pad+0x58>
    5564:	2903      	cmp	r1, #3
    5566:	d005      	beq.n	5574 <_sercom_get_default_pad+0x5c>
	return 0;
    5568:	2000      	movs	r0, #0
    556a:	e7e3      	b.n	5534 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    556c:	482c      	ldr	r0, [pc, #176]	; (5620 <_sercom_get_default_pad+0x108>)
    556e:	e7e1      	b.n	5534 <_sercom_get_default_pad+0x1c>
    5570:	482c      	ldr	r0, [pc, #176]	; (5624 <_sercom_get_default_pad+0x10c>)
    5572:	e7df      	b.n	5534 <_sercom_get_default_pad+0x1c>
    5574:	482c      	ldr	r0, [pc, #176]	; (5628 <_sercom_get_default_pad+0x110>)
    5576:	e7dd      	b.n	5534 <_sercom_get_default_pad+0x1c>
    5578:	482c      	ldr	r0, [pc, #176]	; (562c <_sercom_get_default_pad+0x114>)
    557a:	e7db      	b.n	5534 <_sercom_get_default_pad+0x1c>
    557c:	482c      	ldr	r0, [pc, #176]	; (5630 <_sercom_get_default_pad+0x118>)
    557e:	e7d9      	b.n	5534 <_sercom_get_default_pad+0x1c>
    5580:	482c      	ldr	r0, [pc, #176]	; (5634 <_sercom_get_default_pad+0x11c>)
    5582:	e7d7      	b.n	5534 <_sercom_get_default_pad+0x1c>
    5584:	2901      	cmp	r1, #1
    5586:	d007      	beq.n	5598 <_sercom_get_default_pad+0x80>
    5588:	2900      	cmp	r1, #0
    558a:	d039      	beq.n	5600 <_sercom_get_default_pad+0xe8>
    558c:	2902      	cmp	r1, #2
    558e:	d005      	beq.n	559c <_sercom_get_default_pad+0x84>
    5590:	2903      	cmp	r1, #3
    5592:	d005      	beq.n	55a0 <_sercom_get_default_pad+0x88>
	return 0;
    5594:	2000      	movs	r0, #0
    5596:	e7cd      	b.n	5534 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5598:	4827      	ldr	r0, [pc, #156]	; (5638 <_sercom_get_default_pad+0x120>)
    559a:	e7cb      	b.n	5534 <_sercom_get_default_pad+0x1c>
    559c:	4827      	ldr	r0, [pc, #156]	; (563c <_sercom_get_default_pad+0x124>)
    559e:	e7c9      	b.n	5534 <_sercom_get_default_pad+0x1c>
    55a0:	4827      	ldr	r0, [pc, #156]	; (5640 <_sercom_get_default_pad+0x128>)
    55a2:	e7c7      	b.n	5534 <_sercom_get_default_pad+0x1c>
    55a4:	2901      	cmp	r1, #1
    55a6:	d007      	beq.n	55b8 <_sercom_get_default_pad+0xa0>
    55a8:	2900      	cmp	r1, #0
    55aa:	d02b      	beq.n	5604 <_sercom_get_default_pad+0xec>
    55ac:	2902      	cmp	r1, #2
    55ae:	d005      	beq.n	55bc <_sercom_get_default_pad+0xa4>
    55b0:	2903      	cmp	r1, #3
    55b2:	d005      	beq.n	55c0 <_sercom_get_default_pad+0xa8>
	return 0;
    55b4:	2000      	movs	r0, #0
    55b6:	e7bd      	b.n	5534 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    55b8:	4822      	ldr	r0, [pc, #136]	; (5644 <_sercom_get_default_pad+0x12c>)
    55ba:	e7bb      	b.n	5534 <_sercom_get_default_pad+0x1c>
    55bc:	4822      	ldr	r0, [pc, #136]	; (5648 <_sercom_get_default_pad+0x130>)
    55be:	e7b9      	b.n	5534 <_sercom_get_default_pad+0x1c>
    55c0:	4822      	ldr	r0, [pc, #136]	; (564c <_sercom_get_default_pad+0x134>)
    55c2:	e7b7      	b.n	5534 <_sercom_get_default_pad+0x1c>
    55c4:	2902      	cmp	r1, #2
    55c6:	d003      	beq.n	55d0 <_sercom_get_default_pad+0xb8>
    55c8:	2903      	cmp	r1, #3
    55ca:	d003      	beq.n	55d4 <_sercom_get_default_pad+0xbc>
    55cc:	2000      	movs	r0, #0
    55ce:	e7b1      	b.n	5534 <_sercom_get_default_pad+0x1c>
    55d0:	481f      	ldr	r0, [pc, #124]	; (5650 <_sercom_get_default_pad+0x138>)
    55d2:	e7af      	b.n	5534 <_sercom_get_default_pad+0x1c>
    55d4:	481f      	ldr	r0, [pc, #124]	; (5654 <_sercom_get_default_pad+0x13c>)
    55d6:	e7ad      	b.n	5534 <_sercom_get_default_pad+0x1c>
    55d8:	2901      	cmp	r1, #1
    55da:	d007      	beq.n	55ec <_sercom_get_default_pad+0xd4>
    55dc:	2900      	cmp	r1, #0
    55de:	d013      	beq.n	5608 <_sercom_get_default_pad+0xf0>
    55e0:	2902      	cmp	r1, #2
    55e2:	d005      	beq.n	55f0 <_sercom_get_default_pad+0xd8>
    55e4:	2903      	cmp	r1, #3
    55e6:	d005      	beq.n	55f4 <_sercom_get_default_pad+0xdc>
	return 0;
    55e8:	2000      	movs	r0, #0
    55ea:	e7a3      	b.n	5534 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    55ec:	481a      	ldr	r0, [pc, #104]	; (5658 <_sercom_get_default_pad+0x140>)
    55ee:	e7a1      	b.n	5534 <_sercom_get_default_pad+0x1c>
    55f0:	481a      	ldr	r0, [pc, #104]	; (565c <_sercom_get_default_pad+0x144>)
    55f2:	e79f      	b.n	5534 <_sercom_get_default_pad+0x1c>
    55f4:	481a      	ldr	r0, [pc, #104]	; (5660 <_sercom_get_default_pad+0x148>)
    55f6:	e79d      	b.n	5534 <_sercom_get_default_pad+0x1c>
    55f8:	481a      	ldr	r0, [pc, #104]	; (5664 <_sercom_get_default_pad+0x14c>)
    55fa:	e79b      	b.n	5534 <_sercom_get_default_pad+0x1c>
    55fc:	2003      	movs	r0, #3
    55fe:	e799      	b.n	5534 <_sercom_get_default_pad+0x1c>
    5600:	4819      	ldr	r0, [pc, #100]	; (5668 <_sercom_get_default_pad+0x150>)
    5602:	e797      	b.n	5534 <_sercom_get_default_pad+0x1c>
    5604:	4819      	ldr	r0, [pc, #100]	; (566c <_sercom_get_default_pad+0x154>)
    5606:	e795      	b.n	5534 <_sercom_get_default_pad+0x1c>
    5608:	4819      	ldr	r0, [pc, #100]	; (5670 <_sercom_get_default_pad+0x158>)
    560a:	e793      	b.n	5534 <_sercom_get_default_pad+0x1c>
    560c:	42000800 	.word	0x42000800
    5610:	42001000 	.word	0x42001000
    5614:	43000400 	.word	0x43000400
    5618:	42000c00 	.word	0x42000c00
    561c:	42000400 	.word	0x42000400
    5620:	00050003 	.word	0x00050003
    5624:	00060003 	.word	0x00060003
    5628:	00070003 	.word	0x00070003
    562c:	00010003 	.word	0x00010003
    5630:	001e0003 	.word	0x001e0003
    5634:	001f0003 	.word	0x001f0003
    5638:	00090003 	.word	0x00090003
    563c:	000a0003 	.word	0x000a0003
    5640:	000b0003 	.word	0x000b0003
    5644:	00110003 	.word	0x00110003
    5648:	00120003 	.word	0x00120003
    564c:	00130003 	.word	0x00130003
    5650:	000e0003 	.word	0x000e0003
    5654:	000f0003 	.word	0x000f0003
    5658:	00170003 	.word	0x00170003
    565c:	00180003 	.word	0x00180003
    5660:	00190003 	.word	0x00190003
    5664:	00040003 	.word	0x00040003
    5668:	00080003 	.word	0x00080003
    566c:	00100003 	.word	0x00100003
    5670:	00160003 	.word	0x00160003

00005674 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    5674:	b530      	push	{r4, r5, lr}
    5676:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    5678:	4b0b      	ldr	r3, [pc, #44]	; (56a8 <_sercom_get_sercom_inst_index+0x34>)
    567a:	466a      	mov	r2, sp
    567c:	cb32      	ldmia	r3!, {r1, r4, r5}
    567e:	c232      	stmia	r2!, {r1, r4, r5}
    5680:	cb32      	ldmia	r3!, {r1, r4, r5}
    5682:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    5684:	9b00      	ldr	r3, [sp, #0]
    5686:	4283      	cmp	r3, r0
    5688:	d00b      	beq.n	56a2 <_sercom_get_sercom_inst_index+0x2e>
    568a:	2301      	movs	r3, #1
    568c:	009a      	lsls	r2, r3, #2
    568e:	4669      	mov	r1, sp
    5690:	5852      	ldr	r2, [r2, r1]
    5692:	4282      	cmp	r2, r0
    5694:	d006      	beq.n	56a4 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5696:	3301      	adds	r3, #1
    5698:	2b06      	cmp	r3, #6
    569a:	d1f7      	bne.n	568c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    569c:	2000      	movs	r0, #0
}
    569e:	b007      	add	sp, #28
    56a0:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    56a2:	2300      	movs	r3, #0
			return i;
    56a4:	b2d8      	uxtb	r0, r3
    56a6:	e7fa      	b.n	569e <_sercom_get_sercom_inst_index+0x2a>
    56a8:	0001753c 	.word	0x0001753c

000056ac <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    56ac:	4770      	bx	lr
    56ae:	Address 0x000056ae is out of bounds.


000056b0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    56b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    56b2:	4b0a      	ldr	r3, [pc, #40]	; (56dc <_sercom_set_handler+0x2c>)
    56b4:	781b      	ldrb	r3, [r3, #0]
    56b6:	2b00      	cmp	r3, #0
    56b8:	d10c      	bne.n	56d4 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    56ba:	4f09      	ldr	r7, [pc, #36]	; (56e0 <_sercom_set_handler+0x30>)
    56bc:	4e09      	ldr	r6, [pc, #36]	; (56e4 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    56be:	4d0a      	ldr	r5, [pc, #40]	; (56e8 <_sercom_set_handler+0x38>)
    56c0:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    56c2:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    56c4:	195a      	adds	r2, r3, r5
    56c6:	6014      	str	r4, [r2, #0]
    56c8:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    56ca:	2b18      	cmp	r3, #24
    56cc:	d1f9      	bne.n	56c2 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    56ce:	2201      	movs	r2, #1
    56d0:	4b02      	ldr	r3, [pc, #8]	; (56dc <_sercom_set_handler+0x2c>)
    56d2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    56d4:	0080      	lsls	r0, r0, #2
    56d6:	4b02      	ldr	r3, [pc, #8]	; (56e0 <_sercom_set_handler+0x30>)
    56d8:	50c1      	str	r1, [r0, r3]
}
    56da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    56dc:	200000be 	.word	0x200000be
    56e0:	200000c0 	.word	0x200000c0
    56e4:	000056ad 	.word	0x000056ad
    56e8:	20001f14 	.word	0x20001f14

000056ec <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    56ec:	b500      	push	{lr}
    56ee:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    56f0:	2308      	movs	r3, #8
    56f2:	466a      	mov	r2, sp
    56f4:	7013      	strb	r3, [r2, #0]
    56f6:	3301      	adds	r3, #1
    56f8:	7053      	strb	r3, [r2, #1]
    56fa:	3301      	adds	r3, #1
    56fc:	7093      	strb	r3, [r2, #2]
    56fe:	3301      	adds	r3, #1
    5700:	70d3      	strb	r3, [r2, #3]
    5702:	3301      	adds	r3, #1
    5704:	7113      	strb	r3, [r2, #4]
    5706:	3301      	adds	r3, #1
    5708:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    570a:	4b03      	ldr	r3, [pc, #12]	; (5718 <_sercom_get_interrupt_vector+0x2c>)
    570c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    570e:	466b      	mov	r3, sp
    5710:	5618      	ldrsb	r0, [r3, r0]
}
    5712:	b003      	add	sp, #12
    5714:	bd00      	pop	{pc}
    5716:	46c0      	nop			; (mov r8, r8)
    5718:	00005675 	.word	0x00005675

0000571c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    571c:	b510      	push	{r4, lr}
    571e:	4b02      	ldr	r3, [pc, #8]	; (5728 <SERCOM0_Handler+0xc>)
    5720:	681b      	ldr	r3, [r3, #0]
    5722:	2000      	movs	r0, #0
    5724:	4798      	blx	r3
    5726:	bd10      	pop	{r4, pc}
    5728:	200000c0 	.word	0x200000c0

0000572c <SERCOM1_Handler>:
    572c:	b510      	push	{r4, lr}
    572e:	4b02      	ldr	r3, [pc, #8]	; (5738 <SERCOM1_Handler+0xc>)
    5730:	685b      	ldr	r3, [r3, #4]
    5732:	2001      	movs	r0, #1
    5734:	4798      	blx	r3
    5736:	bd10      	pop	{r4, pc}
    5738:	200000c0 	.word	0x200000c0

0000573c <SERCOM2_Handler>:
    573c:	b510      	push	{r4, lr}
    573e:	4b02      	ldr	r3, [pc, #8]	; (5748 <SERCOM2_Handler+0xc>)
    5740:	689b      	ldr	r3, [r3, #8]
    5742:	2002      	movs	r0, #2
    5744:	4798      	blx	r3
    5746:	bd10      	pop	{r4, pc}
    5748:	200000c0 	.word	0x200000c0

0000574c <SERCOM3_Handler>:
    574c:	b510      	push	{r4, lr}
    574e:	4b02      	ldr	r3, [pc, #8]	; (5758 <SERCOM3_Handler+0xc>)
    5750:	68db      	ldr	r3, [r3, #12]
    5752:	2003      	movs	r0, #3
    5754:	4798      	blx	r3
    5756:	bd10      	pop	{r4, pc}
    5758:	200000c0 	.word	0x200000c0

0000575c <SERCOM4_Handler>:
    575c:	b510      	push	{r4, lr}
    575e:	4b02      	ldr	r3, [pc, #8]	; (5768 <SERCOM4_Handler+0xc>)
    5760:	691b      	ldr	r3, [r3, #16]
    5762:	2004      	movs	r0, #4
    5764:	4798      	blx	r3
    5766:	bd10      	pop	{r4, pc}
    5768:	200000c0 	.word	0x200000c0

0000576c <SERCOM5_Handler>:
    576c:	b510      	push	{r4, lr}
    576e:	4b02      	ldr	r3, [pc, #8]	; (5778 <SERCOM5_Handler+0xc>)
    5770:	695b      	ldr	r3, [r3, #20]
    5772:	2005      	movs	r0, #5
    5774:	4798      	blx	r3
    5776:	bd10      	pop	{r4, pc}
    5778:	200000c0 	.word	0x200000c0

0000577c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    577c:	b5f0      	push	{r4, r5, r6, r7, lr}
    577e:	46d6      	mov	lr, sl
    5780:	464f      	mov	r7, r9
    5782:	4646      	mov	r6, r8
    5784:	b5c0      	push	{r6, r7, lr}
    5786:	b08a      	sub	sp, #40	; 0x28
    5788:	0006      	movs	r6, r0
    578a:	000f      	movs	r7, r1
    578c:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    578e:	6031      	str	r1, [r6, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    5790:	680b      	ldr	r3, [r1, #0]
    5792:	079b      	lsls	r3, r3, #30
    5794:	d40a      	bmi.n	57ac <spi_init+0x30>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    5796:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    5798:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    579a:	07db      	lsls	r3, r3, #31
    579c:	d400      	bmi.n	57a0 <spi_init+0x24>
    579e:	e0af      	b.n	5900 <spi_init+0x184>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    57a0:	b00a      	add	sp, #40	; 0x28
    57a2:	bc1c      	pop	{r2, r3, r4}
    57a4:	4690      	mov	r8, r2
    57a6:	4699      	mov	r9, r3
    57a8:	46a2      	mov	sl, r4
    57aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    57ac:	6a93      	ldr	r3, [r2, #40]	; 0x28
    57ae:	9305      	str	r3, [sp, #20]
    57b0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    57b2:	9306      	str	r3, [sp, #24]
    57b4:	6b13      	ldr	r3, [r2, #48]	; 0x30
    57b6:	9307      	str	r3, [sp, #28]
    57b8:	6b53      	ldr	r3, [r2, #52]	; 0x34
    57ba:	9308      	str	r3, [sp, #32]
    57bc:	2500      	movs	r5, #0
    57be:	e00a      	b.n	57d6 <spi_init+0x5a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    57c0:	0038      	movs	r0, r7
    57c2:	4bb6      	ldr	r3, [pc, #728]	; (5a9c <spi_init+0x320>)
    57c4:	4798      	blx	r3
    57c6:	e00e      	b.n	57e6 <spi_init+0x6a>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    57c8:	230f      	movs	r3, #15
    57ca:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    57cc:	4581      	cmp	r9, r0
    57ce:	d130      	bne.n	5832 <spi_init+0xb6>
    57d0:	3501      	adds	r5, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    57d2:	2d04      	cmp	r5, #4
    57d4:	d031      	beq.n	583a <spi_init+0xbe>
    57d6:	b2e9      	uxtb	r1, r5
		uint32_t current_pinmux = pad_pinmuxes[pad];
    57d8:	00ab      	lsls	r3, r5, #2
    57da:	aa02      	add	r2, sp, #8
    57dc:	200c      	movs	r0, #12
    57de:	1812      	adds	r2, r2, r0
    57e0:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    57e2:	2800      	cmp	r0, #0
    57e4:	d0ec      	beq.n	57c0 <spi_init+0x44>
		if (current_pinmux == PINMUX_UNUSED) {
    57e6:	1c43      	adds	r3, r0, #1
    57e8:	d0f2      	beq.n	57d0 <spi_init+0x54>
		if ((current_pinmux & 0xFFFF) !=
    57ea:	0401      	lsls	r1, r0, #16
    57ec:	0c0b      	lsrs	r3, r1, #16
    57ee:	4699      	mov	r9, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    57f0:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    57f2:	b2c3      	uxtb	r3, r0
    57f4:	469c      	mov	ip, r3
		return NULL;
    57f6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    57f8:	0602      	lsls	r2, r0, #24
    57fa:	d405      	bmi.n	5808 <spi_init+0x8c>
		return &(ports[port_index]->Group[group_index]);
    57fc:	4663      	mov	r3, ip
    57fe:	095b      	lsrs	r3, r3, #5
    5800:	01db      	lsls	r3, r3, #7
    5802:	4aa7      	ldr	r2, [pc, #668]	; (5aa0 <spi_init+0x324>)
    5804:	4690      	mov	r8, r2
    5806:	4443      	add	r3, r8
	uint32_t pin_index = (gpio_pin % 32);
    5808:	221f      	movs	r2, #31
    580a:	4660      	mov	r0, ip
    580c:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    580e:	1898      	adds	r0, r3, r2
    5810:	3040      	adds	r0, #64	; 0x40
    5812:	7800      	ldrb	r0, [r0, #0]
    5814:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    5816:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    5818:	4651      	mov	r1, sl
    581a:	07c9      	lsls	r1, r1, #31
    581c:	d5d6      	bpl.n	57cc <spi_init+0x50>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    581e:	0852      	lsrs	r2, r2, #1
    5820:	189b      	adds	r3, r3, r2
    5822:	3330      	adds	r3, #48	; 0x30
    5824:	7818      	ldrb	r0, [r3, #0]
    5826:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    5828:	4663      	mov	r3, ip
    582a:	07db      	lsls	r3, r3, #31
    582c:	d5cc      	bpl.n	57c8 <spi_init+0x4c>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    582e:	0900      	lsrs	r0, r0, #4
    5830:	e7cc      	b.n	57cc <spi_init+0x50>
			module->hw = NULL;
    5832:	2300      	movs	r3, #0
    5834:	6033      	str	r3, [r6, #0]
			return STATUS_ERR_DENIED;
    5836:	201c      	movs	r0, #28
    5838:	e7b2      	b.n	57a0 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    583a:	2011      	movs	r0, #17
    583c:	4b99      	ldr	r3, [pc, #612]	; (5aa4 <spi_init+0x328>)
    583e:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    5840:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    5842:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    5844:	2a01      	cmp	r2, #1
    5846:	d016      	beq.n	5876 <spi_init+0xfa>
	if (config->mode == SPI_MODE_SLAVE) {
    5848:	7821      	ldrb	r1, [r4, #0]
    584a:	2900      	cmp	r1, #0
    584c:	d127      	bne.n	589e <spi_init+0x122>
		if (spi_module->CTRLA.reg != addr) {
    584e:	683b      	ldr	r3, [r7, #0]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    5850:	7fe2      	ldrb	r2, [r4, #31]
    5852:	0412      	lsls	r2, r2, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    5854:	7fa0      	ldrb	r0, [r4, #30]
    5856:	4302      	orrs	r2, r0
			return STATUS_ERR_DENIED;
    5858:	201c      	movs	r0, #28
		if (spi_module->CTRLA.reg != addr) {
    585a:	429a      	cmp	r2, r3
    585c:	d1a0      	bne.n	57a0 <spi_init+0x24>
		ctrla |= config->mode_specific.slave.frame_format;
    585e:	69a3      	ldr	r3, [r4, #24]
		ctrlb |= config->mode_specific.slave.address_mode;
    5860:	8ba2      	ldrh	r2, [r4, #28]
		if (config->mode_specific.slave.preload_enable) {
    5862:	3004      	adds	r0, #4
    5864:	5c20      	ldrb	r0, [r4, r0]
    5866:	2800      	cmp	r0, #0
    5868:	d001      	beq.n	586e <spi_init+0xf2>
    586a:	2040      	movs	r0, #64	; 0x40
    586c:	4302      	orrs	r2, r0
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
    586e:	2008      	movs	r0, #8
    5870:	4303      	orrs	r3, r0
    5872:	431d      	orrs	r5, r3
    5874:	e014      	b.n	58a0 <spi_init+0x124>
		enum status_code error_code = _sercom_get_sync_baud_val(
    5876:	aa04      	add	r2, sp, #16
    5878:	0001      	movs	r1, r0
    587a:	69a0      	ldr	r0, [r4, #24]
    587c:	4b8a      	ldr	r3, [pc, #552]	; (5aa8 <spi_init+0x32c>)
    587e:	4798      	blx	r3
    5880:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    5882:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    5884:	2b00      	cmp	r3, #0
    5886:	d000      	beq.n	588a <spi_init+0x10e>
    5888:	e78a      	b.n	57a0 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    588a:	7b3b      	ldrb	r3, [r7, #12]
    588c:	b2db      	uxtb	r3, r3
    588e:	aa04      	add	r2, sp, #16
    5890:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    5892:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    5894:	429a      	cmp	r2, r3
    5896:	d000      	beq.n	589a <spi_init+0x11e>
    5898:	e782      	b.n	57a0 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    589a:	350c      	adds	r5, #12
    589c:	e7d4      	b.n	5848 <spi_init+0xcc>
	uint32_t ctrlb = 0;
    589e:	2200      	movs	r2, #0
	ctrla |= config->mux_setting;
    58a0:	6863      	ldr	r3, [r4, #4]
    58a2:	68a0      	ldr	r0, [r4, #8]
    58a4:	4303      	orrs	r3, r0
    58a6:	68e0      	ldr	r0, [r4, #12]
    58a8:	4303      	orrs	r3, r0
    58aa:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    58ac:	7c20      	ldrb	r0, [r4, #16]
    58ae:	4302      	orrs	r2, r0
	if (config->run_in_standby) {
    58b0:	7c60      	ldrb	r0, [r4, #17]
    58b2:	2800      	cmp	r0, #0
    58b4:	d001      	beq.n	58ba <spi_init+0x13e>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    58b6:	2080      	movs	r0, #128	; 0x80
    58b8:	4303      	orrs	r3, r0
	if (config->receiver_enable) {
    58ba:	7ca0      	ldrb	r0, [r4, #18]
    58bc:	2800      	cmp	r0, #0
    58be:	d002      	beq.n	58c6 <spi_init+0x14a>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    58c0:	2080      	movs	r0, #128	; 0x80
    58c2:	0280      	lsls	r0, r0, #10
    58c4:	4302      	orrs	r2, r0
	if (config->select_slave_low_detect_enable) {
    58c6:	7ce0      	ldrb	r0, [r4, #19]
    58c8:	2800      	cmp	r0, #0
    58ca:	d002      	beq.n	58d2 <spi_init+0x156>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    58cc:	2080      	movs	r0, #128	; 0x80
    58ce:	0080      	lsls	r0, r0, #2
    58d0:	4302      	orrs	r2, r0
	if (config->master_slave_select_enable) {
    58d2:	7d20      	ldrb	r0, [r4, #20]
    58d4:	2800      	cmp	r0, #0
    58d6:	d002      	beq.n	58de <spi_init+0x162>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    58d8:	2080      	movs	r0, #128	; 0x80
    58da:	0180      	lsls	r0, r0, #6
    58dc:	4302      	orrs	r2, r0
	if (spi_module->CTRLA.reg == ctrla &&
    58de:	6838      	ldr	r0, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    58e0:	2502      	movs	r5, #2
    58e2:	432b      	orrs	r3, r5
	if (spi_module->CTRLA.reg == ctrla &&
    58e4:	4283      	cmp	r3, r0
    58e6:	d003      	beq.n	58f0 <spi_init+0x174>
	module->hw = NULL;
    58e8:	2300      	movs	r3, #0
    58ea:	6033      	str	r3, [r6, #0]
	return STATUS_ERR_DENIED;
    58ec:	201c      	movs	r0, #28
    58ee:	e757      	b.n	57a0 <spi_init+0x24>
			spi_module->CTRLB.reg == ctrlb) {
    58f0:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    58f2:	4293      	cmp	r3, r2
    58f4:	d1f8      	bne.n	58e8 <spi_init+0x16c>
		module->mode           = config->mode;
    58f6:	7171      	strb	r1, [r6, #5]
		module->character_size = config->character_size;
    58f8:	7c23      	ldrb	r3, [r4, #16]
    58fa:	71b3      	strb	r3, [r6, #6]
		return STATUS_OK;
    58fc:	2000      	movs	r0, #0
    58fe:	e74f      	b.n	57a0 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5900:	0008      	movs	r0, r1
    5902:	4b6a      	ldr	r3, [pc, #424]	; (5aac <spi_init+0x330>)
    5904:	4798      	blx	r3
	if (sercom_index == 5) {
    5906:	2805      	cmp	r0, #5
    5908:	d100      	bne.n	590c <spi_init+0x190>
    590a:	e0bf      	b.n	5a8c <spi_init+0x310>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    590c:	0003      	movs	r3, r0
    590e:	3312      	adds	r3, #18
			MCLK->APBCMASK.reg |= mask;
    5910:	4967      	ldr	r1, [pc, #412]	; (5ab0 <spi_init+0x334>)
    5912:	69cd      	ldr	r5, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    5914:	2201      	movs	r2, #1
    5916:	4082      	lsls	r2, r0
    5918:	432a      	orrs	r2, r5
    591a:	61ca      	str	r2, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    591c:	a909      	add	r1, sp, #36	; 0x24
    591e:	2524      	movs	r5, #36	; 0x24
    5920:	5d62      	ldrb	r2, [r4, r5]
    5922:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    5924:	b2db      	uxtb	r3, r3
    5926:	9301      	str	r3, [sp, #4]
    5928:	0018      	movs	r0, r3
    592a:	4b62      	ldr	r3, [pc, #392]	; (5ab4 <spi_init+0x338>)
    592c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    592e:	9801      	ldr	r0, [sp, #4]
    5930:	4b61      	ldr	r3, [pc, #388]	; (5ab8 <spi_init+0x33c>)
    5932:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5934:	5d60      	ldrb	r0, [r4, r5]
    5936:	2100      	movs	r1, #0
    5938:	4b60      	ldr	r3, [pc, #384]	; (5abc <spi_init+0x340>)
    593a:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    593c:	7823      	ldrb	r3, [r4, #0]
    593e:	2b01      	cmp	r3, #1
    5940:	d020      	beq.n	5984 <spi_init+0x208>
	if (config->mode == SPI_MODE_SLAVE) {
    5942:	7823      	ldrb	r3, [r4, #0]
    5944:	2b00      	cmp	r3, #0
    5946:	d103      	bne.n	5950 <spi_init+0x1d4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    5948:	683b      	ldr	r3, [r7, #0]
    594a:	2208      	movs	r2, #8
    594c:	4313      	orrs	r3, r2
    594e:	603b      	str	r3, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5950:	6833      	ldr	r3, [r6, #0]
    5952:	4698      	mov	r8, r3
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5954:	ab04      	add	r3, sp, #16
    5956:	2280      	movs	r2, #128	; 0x80
    5958:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    595a:	2200      	movs	r2, #0
    595c:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    595e:	2101      	movs	r1, #1
    5960:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    5962:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    5964:	7823      	ldrb	r3, [r4, #0]
    5966:	2b00      	cmp	r3, #0
    5968:	d101      	bne.n	596e <spi_init+0x1f2>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    596a:	ab04      	add	r3, sp, #16
    596c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    596e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5970:	9305      	str	r3, [sp, #20]
    5972:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5974:	9306      	str	r3, [sp, #24]
    5976:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5978:	9307      	str	r3, [sp, #28]
    597a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    597c:	9308      	str	r3, [sp, #32]
    597e:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5980:	ad05      	add	r5, sp, #20
    5982:	e011      	b.n	59a8 <spi_init+0x22c>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    5984:	683b      	ldr	r3, [r7, #0]
    5986:	220c      	movs	r2, #12
    5988:	4313      	orrs	r3, r2
    598a:	603b      	str	r3, [r7, #0]
    598c:	e7d9      	b.n	5942 <spi_init+0x1c6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    598e:	4640      	mov	r0, r8
    5990:	4b42      	ldr	r3, [pc, #264]	; (5a9c <spi_init+0x320>)
    5992:	4798      	blx	r3
    5994:	e00d      	b.n	59b2 <spi_init+0x236>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    5996:	a904      	add	r1, sp, #16
    5998:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    599a:	0c00      	lsrs	r0, r0, #16
    599c:	b2c0      	uxtb	r0, r0
    599e:	4b48      	ldr	r3, [pc, #288]	; (5ac0 <spi_init+0x344>)
    59a0:	4798      	blx	r3
    59a2:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    59a4:	2f04      	cmp	r7, #4
    59a6:	d007      	beq.n	59b8 <spi_init+0x23c>
    59a8:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    59aa:	00bb      	lsls	r3, r7, #2
    59ac:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    59ae:	2800      	cmp	r0, #0
    59b0:	d0ed      	beq.n	598e <spi_init+0x212>
		if (current_pinmux != PINMUX_UNUSED) {
    59b2:	1c43      	adds	r3, r0, #1
    59b4:	d1ef      	bne.n	5996 <spi_init+0x21a>
    59b6:	e7f4      	b.n	59a2 <spi_init+0x226>
	module->mode             = config->mode;
    59b8:	7823      	ldrb	r3, [r4, #0]
    59ba:	7173      	strb	r3, [r6, #5]
	module->character_size   = config->character_size;
    59bc:	7c23      	ldrb	r3, [r4, #16]
    59be:	71b3      	strb	r3, [r6, #6]
	module->receiver_enabled = config->receiver_enable;
    59c0:	7ca3      	ldrb	r3, [r4, #18]
    59c2:	71f3      	strb	r3, [r6, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    59c4:	7d23      	ldrb	r3, [r4, #20]
    59c6:	7233      	strb	r3, [r6, #8]
	uint16_t baud = 0;
    59c8:	2200      	movs	r2, #0
    59ca:	ab02      	add	r3, sp, #8
    59cc:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    59ce:	7823      	ldrb	r3, [r4, #0]
    59d0:	2b01      	cmp	r3, #1
    59d2:	d014      	beq.n	59fe <spi_init+0x282>
	if (config->mode == SPI_MODE_SLAVE) {
    59d4:	7823      	ldrb	r3, [r4, #0]
    59d6:	2b00      	cmp	r3, #0
    59d8:	d129      	bne.n	5a2e <spi_init+0x2b2>
		ctrla = config->mode_specific.slave.frame_format;
    59da:	69a0      	ldr	r0, [r4, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    59dc:	8ba2      	ldrh	r2, [r4, #28]
		spi_module->ADDR.reg |=
    59de:	4643      	mov	r3, r8
    59e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    59e2:	7fe1      	ldrb	r1, [r4, #31]
    59e4:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    59e6:	7fa5      	ldrb	r5, [r4, #30]
    59e8:	4329      	orrs	r1, r5
		spi_module->ADDR.reg |=
    59ea:	4319      	orrs	r1, r3
    59ec:	4643      	mov	r3, r8
    59ee:	6259      	str	r1, [r3, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    59f0:	2320      	movs	r3, #32
    59f2:	5ce3      	ldrb	r3, [r4, r3]
    59f4:	2b00      	cmp	r3, #0
    59f6:	d01c      	beq.n	5a32 <spi_init+0x2b6>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    59f8:	2340      	movs	r3, #64	; 0x40
    59fa:	431a      	orrs	r2, r3
    59fc:	e019      	b.n	5a32 <spi_init+0x2b6>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    59fe:	6830      	ldr	r0, [r6, #0]
    5a00:	4b2a      	ldr	r3, [pc, #168]	; (5aac <spi_init+0x330>)
    5a02:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5a04:	3012      	adds	r0, #18
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    5a06:	b2c0      	uxtb	r0, r0
    5a08:	4b26      	ldr	r3, [pc, #152]	; (5aa4 <spi_init+0x328>)
    5a0a:	4798      	blx	r3
    5a0c:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    5a0e:	ab02      	add	r3, sp, #8
    5a10:	1d9a      	adds	r2, r3, #6
    5a12:	69a0      	ldr	r0, [r4, #24]
    5a14:	4b24      	ldr	r3, [pc, #144]	; (5aa8 <spi_init+0x32c>)
    5a16:	4798      	blx	r3
    5a18:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    5a1a:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    5a1c:	2b00      	cmp	r3, #0
    5a1e:	d000      	beq.n	5a22 <spi_init+0x2a6>
    5a20:	e6be      	b.n	57a0 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    5a22:	ab02      	add	r3, sp, #8
    5a24:	3306      	adds	r3, #6
    5a26:	781b      	ldrb	r3, [r3, #0]
    5a28:	4642      	mov	r2, r8
    5a2a:	7313      	strb	r3, [r2, #12]
    5a2c:	e7d2      	b.n	59d4 <spi_init+0x258>
	uint32_t ctrlb = 0;
    5a2e:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    5a30:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    5a32:	6863      	ldr	r3, [r4, #4]
    5a34:	68a1      	ldr	r1, [r4, #8]
    5a36:	430b      	orrs	r3, r1
    5a38:	68e1      	ldr	r1, [r4, #12]
    5a3a:	430b      	orrs	r3, r1
    5a3c:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    5a3e:	7c21      	ldrb	r1, [r4, #16]
    5a40:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    5a42:	7c61      	ldrb	r1, [r4, #17]
    5a44:	2900      	cmp	r1, #0
    5a46:	d103      	bne.n	5a50 <spi_init+0x2d4>
    5a48:	491e      	ldr	r1, [pc, #120]	; (5ac4 <spi_init+0x348>)
    5a4a:	7889      	ldrb	r1, [r1, #2]
    5a4c:	0789      	lsls	r1, r1, #30
    5a4e:	d501      	bpl.n	5a54 <spi_init+0x2d8>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    5a50:	2180      	movs	r1, #128	; 0x80
    5a52:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    5a54:	7ca1      	ldrb	r1, [r4, #18]
    5a56:	2900      	cmp	r1, #0
    5a58:	d002      	beq.n	5a60 <spi_init+0x2e4>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    5a5a:	2180      	movs	r1, #128	; 0x80
    5a5c:	0289      	lsls	r1, r1, #10
    5a5e:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    5a60:	7ce1      	ldrb	r1, [r4, #19]
    5a62:	2900      	cmp	r1, #0
    5a64:	d002      	beq.n	5a6c <spi_init+0x2f0>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    5a66:	2180      	movs	r1, #128	; 0x80
    5a68:	0089      	lsls	r1, r1, #2
    5a6a:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    5a6c:	7d21      	ldrb	r1, [r4, #20]
    5a6e:	2900      	cmp	r1, #0
    5a70:	d002      	beq.n	5a78 <spi_init+0x2fc>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    5a72:	2180      	movs	r1, #128	; 0x80
    5a74:	0189      	lsls	r1, r1, #6
    5a76:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    5a78:	4641      	mov	r1, r8
    5a7a:	6809      	ldr	r1, [r1, #0]
    5a7c:	430b      	orrs	r3, r1
    5a7e:	4641      	mov	r1, r8
    5a80:	600b      	str	r3, [r1, #0]
	spi_module->CTRLB.reg |= ctrlb;
    5a82:	684b      	ldr	r3, [r1, #4]
    5a84:	431a      	orrs	r2, r3
    5a86:	604a      	str	r2, [r1, #4]
	return STATUS_OK;
    5a88:	2000      	movs	r0, #0
    5a8a:	e689      	b.n	57a0 <spi_init+0x24>
			MCLK->APBDMASK.reg |= mask;
    5a8c:	4a08      	ldr	r2, [pc, #32]	; (5ab0 <spi_init+0x334>)
    5a8e:	6a13      	ldr	r3, [r2, #32]
    5a90:	2102      	movs	r1, #2
    5a92:	430b      	orrs	r3, r1
    5a94:	6213      	str	r3, [r2, #32]
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
    5a96:	2318      	movs	r3, #24
    5a98:	e740      	b.n	591c <spi_init+0x1a0>
    5a9a:	46c0      	nop			; (mov r8, r8)
    5a9c:	00005519 	.word	0x00005519
    5aa0:	40002800 	.word	0x40002800
    5aa4:	00006991 	.word	0x00006991
    5aa8:	0000540f 	.word	0x0000540f
    5aac:	00005675 	.word	0x00005675
    5ab0:	40000400 	.word	0x40000400
    5ab4:	0000696d 	.word	0x0000696d
    5ab8:	000068fd 	.word	0x000068fd
    5abc:	000054cd 	.word	0x000054cd
    5ac0:	00006a69 	.word	0x00006a69
    5ac4:	41002000 	.word	0x41002000

00005ac8 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    5ac8:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    5aca:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    5acc:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    5ace:	2c01      	cmp	r4, #1
    5ad0:	d001      	beq.n	5ad6 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    5ad2:	0018      	movs	r0, r3
    5ad4:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    5ad6:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    5ad8:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    5ada:	2c00      	cmp	r4, #0
    5adc:	d1f9      	bne.n	5ad2 <spi_select_slave+0xa>
		if (select) {
    5ade:	2a00      	cmp	r2, #0
    5ae0:	d058      	beq.n	5b94 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    5ae2:	784b      	ldrb	r3, [r1, #1]
    5ae4:	2b00      	cmp	r3, #0
    5ae6:	d044      	beq.n	5b72 <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5ae8:	6803      	ldr	r3, [r0, #0]
    5aea:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    5aec:	07db      	lsls	r3, r3, #31
    5aee:	d410      	bmi.n	5b12 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    5af0:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5af2:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5af4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5af6:	2900      	cmp	r1, #0
    5af8:	d104      	bne.n	5b04 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    5afa:	0953      	lsrs	r3, r2, #5
    5afc:	01db      	lsls	r3, r3, #7
    5afe:	492e      	ldr	r1, [pc, #184]	; (5bb8 <spi_select_slave+0xf0>)
    5b00:	468c      	mov	ip, r1
    5b02:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5b04:	211f      	movs	r1, #31
    5b06:	4011      	ands	r1, r2
    5b08:	2201      	movs	r2, #1
    5b0a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5b0c:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    5b0e:	2305      	movs	r3, #5
    5b10:	e7df      	b.n	5ad2 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    5b12:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5b14:	09d4      	lsrs	r4, r2, #7
		return NULL;
    5b16:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5b18:	2c00      	cmp	r4, #0
    5b1a:	d104      	bne.n	5b26 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    5b1c:	0953      	lsrs	r3, r2, #5
    5b1e:	01db      	lsls	r3, r3, #7
    5b20:	4c25      	ldr	r4, [pc, #148]	; (5bb8 <spi_select_slave+0xf0>)
    5b22:	46a4      	mov	ip, r4
    5b24:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5b26:	241f      	movs	r4, #31
    5b28:	4014      	ands	r4, r2
    5b2a:	2201      	movs	r2, #1
    5b2c:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    5b2e:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5b30:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5b32:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    5b34:	07d2      	lsls	r2, r2, #31
    5b36:	d501      	bpl.n	5b3c <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5b38:	788a      	ldrb	r2, [r1, #2]
    5b3a:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    5b3c:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    5b3e:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    5b40:	2a00      	cmp	r2, #0
    5b42:	d1c6      	bne.n	5ad2 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5b44:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    5b46:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5b48:	7e13      	ldrb	r3, [r2, #24]
    5b4a:	420b      	tst	r3, r1
    5b4c:	d0fc      	beq.n	5b48 <spi_select_slave+0x80>
    5b4e:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    5b50:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    5b52:	0749      	lsls	r1, r1, #29
    5b54:	d5bd      	bpl.n	5ad2 <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5b56:	8b53      	ldrh	r3, [r2, #26]
    5b58:	075b      	lsls	r3, r3, #29
    5b5a:	d501      	bpl.n	5b60 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5b5c:	2304      	movs	r3, #4
    5b5e:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5b60:	7983      	ldrb	r3, [r0, #6]
    5b62:	2b01      	cmp	r3, #1
    5b64:	d002      	beq.n	5b6c <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5b66:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5b68:	2300      	movs	r3, #0
    5b6a:	e7b2      	b.n	5ad2 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5b6c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5b6e:	2300      	movs	r3, #0
    5b70:	e7af      	b.n	5ad2 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    5b72:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5b74:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5b76:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5b78:	2900      	cmp	r1, #0
    5b7a:	d104      	bne.n	5b86 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    5b7c:	0953      	lsrs	r3, r2, #5
    5b7e:	01db      	lsls	r3, r3, #7
    5b80:	490d      	ldr	r1, [pc, #52]	; (5bb8 <spi_select_slave+0xf0>)
    5b82:	468c      	mov	ip, r1
    5b84:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5b86:	211f      	movs	r1, #31
    5b88:	4011      	ands	r1, r2
    5b8a:	2201      	movs	r2, #1
    5b8c:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    5b8e:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    5b90:	2300      	movs	r3, #0
    5b92:	e79e      	b.n	5ad2 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    5b94:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5b96:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5b98:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5b9a:	2900      	cmp	r1, #0
    5b9c:	d104      	bne.n	5ba8 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    5b9e:	0953      	lsrs	r3, r2, #5
    5ba0:	01db      	lsls	r3, r3, #7
    5ba2:	4905      	ldr	r1, [pc, #20]	; (5bb8 <spi_select_slave+0xf0>)
    5ba4:	468c      	mov	ip, r1
    5ba6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5ba8:	211f      	movs	r1, #31
    5baa:	4011      	ands	r1, r2
    5bac:	2201      	movs	r2, #1
    5bae:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5bb0:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    5bb2:	2300      	movs	r3, #0
    5bb4:	e78d      	b.n	5ad2 <spi_select_slave+0xa>
    5bb6:	46c0      	nop			; (mov r8, r8)
    5bb8:	40002800 	.word	0x40002800

00005bbc <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    5bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    5bbe:	46de      	mov	lr, fp
    5bc0:	4657      	mov	r7, sl
    5bc2:	464e      	mov	r6, r9
    5bc4:	4645      	mov	r5, r8
    5bc6:	b5e0      	push	{r5, r6, r7, lr}
    5bc8:	b091      	sub	sp, #68	; 0x44
    5bca:	0005      	movs	r5, r0
    5bcc:	000c      	movs	r4, r1
    5bce:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    5bd0:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5bd2:	0008      	movs	r0, r1
    5bd4:	4bc6      	ldr	r3, [pc, #792]	; (5ef0 <usart_init+0x334>)
    5bd6:	4798      	blx	r3
    5bd8:	0002      	movs	r2, r0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
    5bda:	2805      	cmp	r0, #5
    5bdc:	d00d      	beq.n	5bfa <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5bde:	0007      	movs	r7, r0
    5be0:	3712      	adds	r7, #18
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    5be2:	0003      	movs	r3, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    5be4:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    5be6:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    5be8:	07c9      	lsls	r1, r1, #31
    5bea:	d509      	bpl.n	5c00 <usart_init+0x44>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    5bec:	b011      	add	sp, #68	; 0x44
    5bee:	bc3c      	pop	{r2, r3, r4, r5}
    5bf0:	4690      	mov	r8, r2
    5bf2:	4699      	mov	r9, r3
    5bf4:	46a2      	mov	sl, r4
    5bf6:	46ab      	mov	fp, r5
    5bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    5bfa:	2718      	movs	r7, #24
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    5bfc:	2301      	movs	r3, #1
    5bfe:	e7f1      	b.n	5be4 <usart_init+0x28>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    5c00:	6821      	ldr	r1, [r4, #0]
		return STATUS_ERR_DENIED;
    5c02:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    5c04:	0789      	lsls	r1, r1, #30
    5c06:	d4f1      	bmi.n	5bec <usart_init+0x30>
	if (sercom_index == 5) {
    5c08:	2a05      	cmp	r2, #5
    5c0a:	d049      	beq.n	5ca0 <usart_init+0xe4>
			MCLK->APBCMASK.reg |= mask;
    5c0c:	49b9      	ldr	r1, [pc, #740]	; (5ef4 <usart_init+0x338>)
    5c0e:	69c8      	ldr	r0, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
    5c10:	2201      	movs	r2, #1
    5c12:	409a      	lsls	r2, r3
    5c14:	0013      	movs	r3, r2
    5c16:	4303      	orrs	r3, r0
    5c18:	61cb      	str	r3, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    5c1a:	a90f      	add	r1, sp, #60	; 0x3c
    5c1c:	232d      	movs	r3, #45	; 0x2d
    5c1e:	4698      	mov	r8, r3
    5c20:	5cf3      	ldrb	r3, [r6, r3]
    5c22:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    5c24:	b2ff      	uxtb	r7, r7
    5c26:	0038      	movs	r0, r7
    5c28:	4bb3      	ldr	r3, [pc, #716]	; (5ef8 <usart_init+0x33c>)
    5c2a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    5c2c:	0038      	movs	r0, r7
    5c2e:	4bb3      	ldr	r3, [pc, #716]	; (5efc <usart_init+0x340>)
    5c30:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5c32:	4643      	mov	r3, r8
    5c34:	5cf0      	ldrb	r0, [r6, r3]
    5c36:	2100      	movs	r1, #0
    5c38:	4bb1      	ldr	r3, [pc, #708]	; (5f00 <usart_init+0x344>)
    5c3a:	4798      	blx	r3
	module->character_size = config->character_size;
    5c3c:	7af3      	ldrb	r3, [r6, #11]
    5c3e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    5c40:	2324      	movs	r3, #36	; 0x24
    5c42:	5cf3      	ldrb	r3, [r6, r3]
    5c44:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    5c46:	2325      	movs	r3, #37	; 0x25
    5c48:	5cf3      	ldrb	r3, [r6, r3]
    5c4a:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    5c4c:	7ef3      	ldrb	r3, [r6, #27]
    5c4e:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    5c50:	7f33      	ldrb	r3, [r6, #28]
    5c52:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5c54:	682b      	ldr	r3, [r5, #0]
    5c56:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5c58:	0018      	movs	r0, r3
    5c5a:	4ba5      	ldr	r3, [pc, #660]	; (5ef0 <usart_init+0x334>)
    5c5c:	4798      	blx	r3
	if (sercom_index == 5) {
    5c5e:	2805      	cmp	r0, #5
    5c60:	d026      	beq.n	5cb0 <usart_init+0xf4>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5c62:	3012      	adds	r0, #18
	uint16_t baud  = 0;
    5c64:	2200      	movs	r2, #0
    5c66:	230e      	movs	r3, #14
    5c68:	a906      	add	r1, sp, #24
    5c6a:	468c      	mov	ip, r1
    5c6c:	4463      	add	r3, ip
    5c6e:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    5c70:	8a32      	ldrh	r2, [r6, #16]
    5c72:	9202      	str	r2, [sp, #8]
    5c74:	2380      	movs	r3, #128	; 0x80
    5c76:	01db      	lsls	r3, r3, #7
    5c78:	429a      	cmp	r2, r3
    5c7a:	d100      	bne.n	5c7e <usart_init+0xc2>
    5c7c:	e0ab      	b.n	5dd6 <usart_init+0x21a>
    5c7e:	d919      	bls.n	5cb4 <usart_init+0xf8>
    5c80:	23c0      	movs	r3, #192	; 0xc0
    5c82:	01db      	lsls	r3, r3, #7
    5c84:	9a02      	ldr	r2, [sp, #8]
    5c86:	429a      	cmp	r2, r3
    5c88:	d100      	bne.n	5c8c <usart_init+0xd0>
    5c8a:	e09f      	b.n	5dcc <usart_init+0x210>
    5c8c:	2380      	movs	r3, #128	; 0x80
    5c8e:	021b      	lsls	r3, r3, #8
    5c90:	429a      	cmp	r2, r3
    5c92:	d000      	beq.n	5c96 <usart_init+0xda>
    5c94:	e127      	b.n	5ee6 <usart_init+0x32a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    5c96:	2303      	movs	r3, #3
    5c98:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5c9a:	2300      	movs	r3, #0
    5c9c:	9307      	str	r3, [sp, #28]
    5c9e:	e012      	b.n	5cc6 <usart_init+0x10a>
			MCLK->APBDMASK.reg |= mask;
    5ca0:	4994      	ldr	r1, [pc, #592]	; (5ef4 <usart_init+0x338>)
    5ca2:	6a08      	ldr	r0, [r1, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    5ca4:	3a04      	subs	r2, #4
    5ca6:	409a      	lsls	r2, r3
    5ca8:	0013      	movs	r3, r2
    5caa:	4303      	orrs	r3, r0
    5cac:	620b      	str	r3, [r1, #32]
    5cae:	e7b4      	b.n	5c1a <usart_init+0x5e>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    5cb0:	2018      	movs	r0, #24
    5cb2:	e7d7      	b.n	5c64 <usart_init+0xa8>
	switch (config->sample_rate) {
    5cb4:	2380      	movs	r3, #128	; 0x80
    5cb6:	019b      	lsls	r3, r3, #6
    5cb8:	429a      	cmp	r2, r3
    5cba:	d000      	beq.n	5cbe <usart_init+0x102>
    5cbc:	e113      	b.n	5ee6 <usart_init+0x32a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5cbe:	2310      	movs	r3, #16
    5cc0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5cc2:	3b0f      	subs	r3, #15
    5cc4:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    5cc6:	6833      	ldr	r3, [r6, #0]
    5cc8:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    5cca:	68f3      	ldr	r3, [r6, #12]
    5ccc:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    5cce:	6973      	ldr	r3, [r6, #20]
    5cd0:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5cd2:	7e33      	ldrb	r3, [r6, #24]
    5cd4:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5cd6:	2326      	movs	r3, #38	; 0x26
    5cd8:	5cf3      	ldrb	r3, [r6, r3]
    5cda:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    5cdc:	6873      	ldr	r3, [r6, #4]
    5cde:	4699      	mov	r9, r3
	switch (transfer_mode)
    5ce0:	2b00      	cmp	r3, #0
    5ce2:	d100      	bne.n	5ce6 <usart_init+0x12a>
    5ce4:	e09f      	b.n	5e26 <usart_init+0x26a>
    5ce6:	2380      	movs	r3, #128	; 0x80
    5ce8:	055b      	lsls	r3, r3, #21
    5cea:	4599      	cmp	r9, r3
    5cec:	d104      	bne.n	5cf8 <usart_init+0x13c>
			if (!config->use_external_clock) {
    5cee:	2327      	movs	r3, #39	; 0x27
    5cf0:	5cf3      	ldrb	r3, [r6, r3]
    5cf2:	2b00      	cmp	r3, #0
    5cf4:	d100      	bne.n	5cf8 <usart_init+0x13c>
    5cf6:	e084      	b.n	5e02 <usart_init+0x246>
	if(config->encoding_format_enable) {
    5cf8:	7e73      	ldrb	r3, [r6, #25]
    5cfa:	2b00      	cmp	r3, #0
    5cfc:	d002      	beq.n	5d04 <usart_init+0x148>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    5cfe:	7eb3      	ldrb	r3, [r6, #26]
    5d00:	4642      	mov	r2, r8
    5d02:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    5d04:	682a      	ldr	r2, [r5, #0]
    5d06:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    5d08:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    5d0a:	2b00      	cmp	r3, #0
    5d0c:	d1fc      	bne.n	5d08 <usart_init+0x14c>
	usart_hw->BAUD.reg = baud;
    5d0e:	330e      	adds	r3, #14
    5d10:	aa06      	add	r2, sp, #24
    5d12:	4694      	mov	ip, r2
    5d14:	4463      	add	r3, ip
    5d16:	881b      	ldrh	r3, [r3, #0]
    5d18:	4642      	mov	r2, r8
    5d1a:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    5d1c:	9b05      	ldr	r3, [sp, #20]
    5d1e:	9a03      	ldr	r2, [sp, #12]
    5d20:	4313      	orrs	r3, r2
    5d22:	9a04      	ldr	r2, [sp, #16]
    5d24:	4313      	orrs	r3, r2
    5d26:	464a      	mov	r2, r9
    5d28:	4313      	orrs	r3, r2
    5d2a:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5d2c:	465b      	mov	r3, fp
    5d2e:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    5d30:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5d32:	4653      	mov	r3, sl
    5d34:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    5d36:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    5d38:	2327      	movs	r3, #39	; 0x27
    5d3a:	5cf3      	ldrb	r3, [r6, r3]
    5d3c:	2b00      	cmp	r3, #0
    5d3e:	d101      	bne.n	5d44 <usart_init+0x188>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    5d40:	3304      	adds	r3, #4
    5d42:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    5d44:	7e73      	ldrb	r3, [r6, #25]
    5d46:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5d48:	7f32      	ldrb	r2, [r6, #28]
    5d4a:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    5d4c:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    5d4e:	7f72      	ldrb	r2, [r6, #29]
    5d50:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5d52:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5d54:	2224      	movs	r2, #36	; 0x24
    5d56:	5cb2      	ldrb	r2, [r6, r2]
    5d58:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    5d5a:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    5d5c:	2225      	movs	r2, #37	; 0x25
    5d5e:	5cb2      	ldrb	r2, [r6, r2]
    5d60:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5d62:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    5d64:	7ab1      	ldrb	r1, [r6, #10]
    5d66:	7af2      	ldrb	r2, [r6, #11]
    5d68:	4311      	orrs	r1, r2
    5d6a:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    5d6c:	8933      	ldrh	r3, [r6, #8]
    5d6e:	2bff      	cmp	r3, #255	; 0xff
    5d70:	d07d      	beq.n	5e6e <usart_init+0x2b2>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    5d72:	2280      	movs	r2, #128	; 0x80
    5d74:	0452      	lsls	r2, r2, #17
    5d76:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    5d78:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    5d7a:	232c      	movs	r3, #44	; 0x2c
    5d7c:	5cf3      	ldrb	r3, [r6, r3]
    5d7e:	2b00      	cmp	r3, #0
    5d80:	d103      	bne.n	5d8a <usart_init+0x1ce>
    5d82:	4b60      	ldr	r3, [pc, #384]	; (5f04 <usart_init+0x348>)
    5d84:	789b      	ldrb	r3, [r3, #2]
    5d86:	079b      	lsls	r3, r3, #30
    5d88:	d501      	bpl.n	5d8e <usart_init+0x1d2>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    5d8a:	2380      	movs	r3, #128	; 0x80
    5d8c:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    5d8e:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    5d90:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    5d92:	2b00      	cmp	r3, #0
    5d94:	d1fc      	bne.n	5d90 <usart_init+0x1d4>
	usart_hw->CTRLB.reg = ctrlb;
    5d96:	4643      	mov	r3, r8
    5d98:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5d9a:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    5d9c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    5d9e:	2b00      	cmp	r3, #0
    5da0:	d1fc      	bne.n	5d9c <usart_init+0x1e0>
	usart_hw->CTRLA.reg = ctrla;
    5da2:	4643      	mov	r3, r8
    5da4:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5da6:	ab0e      	add	r3, sp, #56	; 0x38
    5da8:	2280      	movs	r2, #128	; 0x80
    5daa:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5dac:	2200      	movs	r2, #0
    5dae:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    5db0:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    5db2:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    5db4:	6b33      	ldr	r3, [r6, #48]	; 0x30
    5db6:	930a      	str	r3, [sp, #40]	; 0x28
    5db8:	6b73      	ldr	r3, [r6, #52]	; 0x34
    5dba:	930b      	str	r3, [sp, #44]	; 0x2c
    5dbc:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    5dbe:	930c      	str	r3, [sp, #48]	; 0x30
    5dc0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    5dc2:	9302      	str	r3, [sp, #8]
    5dc4:	930d      	str	r3, [sp, #52]	; 0x34
    5dc6:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5dc8:	ae0a      	add	r6, sp, #40	; 0x28
    5dca:	e05e      	b.n	5e8a <usart_init+0x2ce>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5dcc:	2308      	movs	r3, #8
    5dce:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5dd0:	3b07      	subs	r3, #7
    5dd2:	9307      	str	r3, [sp, #28]
    5dd4:	e777      	b.n	5cc6 <usart_init+0x10a>
	ctrla = (uint32_t)config->data_order |
    5dd6:	6833      	ldr	r3, [r6, #0]
    5dd8:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    5dda:	68f3      	ldr	r3, [r6, #12]
    5ddc:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    5dde:	6973      	ldr	r3, [r6, #20]
    5de0:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5de2:	7e33      	ldrb	r3, [r6, #24]
    5de4:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5de6:	2326      	movs	r3, #38	; 0x26
    5de8:	5cf3      	ldrb	r3, [r6, r3]
    5dea:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    5dec:	6873      	ldr	r3, [r6, #4]
    5dee:	4699      	mov	r9, r3
	switch (transfer_mode)
    5df0:	2b00      	cmp	r3, #0
    5df2:	d014      	beq.n	5e1e <usart_init+0x262>
    5df4:	2380      	movs	r3, #128	; 0x80
    5df6:	055b      	lsls	r3, r3, #21
    5df8:	4599      	cmp	r9, r3
    5dfa:	d100      	bne.n	5dfe <usart_init+0x242>
    5dfc:	e777      	b.n	5cee <usart_init+0x132>
	enum status_code status_code = STATUS_OK;
    5dfe:	2000      	movs	r0, #0
    5e00:	e020      	b.n	5e44 <usart_init+0x288>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    5e02:	6a33      	ldr	r3, [r6, #32]
    5e04:	001f      	movs	r7, r3
    5e06:	b2c0      	uxtb	r0, r0
    5e08:	4b3f      	ldr	r3, [pc, #252]	; (5f08 <usart_init+0x34c>)
    5e0a:	4798      	blx	r3
    5e0c:	0001      	movs	r1, r0
    5e0e:	220e      	movs	r2, #14
    5e10:	ab06      	add	r3, sp, #24
    5e12:	469c      	mov	ip, r3
    5e14:	4462      	add	r2, ip
    5e16:	0038      	movs	r0, r7
    5e18:	4b3c      	ldr	r3, [pc, #240]	; (5f0c <usart_init+0x350>)
    5e1a:	4798      	blx	r3
    5e1c:	e012      	b.n	5e44 <usart_init+0x288>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5e1e:	2308      	movs	r3, #8
    5e20:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5e22:	2300      	movs	r3, #0
    5e24:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    5e26:	2327      	movs	r3, #39	; 0x27
    5e28:	5cf3      	ldrb	r3, [r6, r3]
    5e2a:	2b00      	cmp	r3, #0
    5e2c:	d00e      	beq.n	5e4c <usart_init+0x290>
				status_code =
    5e2e:	9b06      	ldr	r3, [sp, #24]
    5e30:	9300      	str	r3, [sp, #0]
    5e32:	9b07      	ldr	r3, [sp, #28]
    5e34:	220e      	movs	r2, #14
    5e36:	a906      	add	r1, sp, #24
    5e38:	468c      	mov	ip, r1
    5e3a:	4462      	add	r2, ip
    5e3c:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    5e3e:	6a30      	ldr	r0, [r6, #32]
    5e40:	4f33      	ldr	r7, [pc, #204]	; (5f10 <usart_init+0x354>)
    5e42:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    5e44:	2800      	cmp	r0, #0
    5e46:	d000      	beq.n	5e4a <usart_init+0x28e>
    5e48:	e6d0      	b.n	5bec <usart_init+0x30>
    5e4a:	e755      	b.n	5cf8 <usart_init+0x13c>
						_sercom_get_async_baud_val(config->baudrate,
    5e4c:	6a33      	ldr	r3, [r6, #32]
    5e4e:	001f      	movs	r7, r3
    5e50:	b2c0      	uxtb	r0, r0
    5e52:	4b2d      	ldr	r3, [pc, #180]	; (5f08 <usart_init+0x34c>)
    5e54:	4798      	blx	r3
    5e56:	0001      	movs	r1, r0
				status_code =
    5e58:	9b06      	ldr	r3, [sp, #24]
    5e5a:	9300      	str	r3, [sp, #0]
    5e5c:	9b07      	ldr	r3, [sp, #28]
    5e5e:	220e      	movs	r2, #14
    5e60:	a806      	add	r0, sp, #24
    5e62:	4684      	mov	ip, r0
    5e64:	4462      	add	r2, ip
    5e66:	0038      	movs	r0, r7
    5e68:	4f29      	ldr	r7, [pc, #164]	; (5f10 <usart_init+0x354>)
    5e6a:	47b8      	blx	r7
    5e6c:	e7ea      	b.n	5e44 <usart_init+0x288>
		if(config->lin_slave_enable) {
    5e6e:	7ef3      	ldrb	r3, [r6, #27]
    5e70:	2b00      	cmp	r3, #0
    5e72:	d082      	beq.n	5d7a <usart_init+0x1be>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    5e74:	2380      	movs	r3, #128	; 0x80
    5e76:	04db      	lsls	r3, r3, #19
    5e78:	431f      	orrs	r7, r3
    5e7a:	e77e      	b.n	5d7a <usart_init+0x1be>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5e7c:	0020      	movs	r0, r4
    5e7e:	4b25      	ldr	r3, [pc, #148]	; (5f14 <usart_init+0x358>)
    5e80:	4798      	blx	r3
    5e82:	e007      	b.n	5e94 <usart_init+0x2d8>
    5e84:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    5e86:	2f04      	cmp	r7, #4
    5e88:	d00d      	beq.n	5ea6 <usart_init+0x2ea>
    5e8a:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5e8c:	00bb      	lsls	r3, r7, #2
    5e8e:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    5e90:	2800      	cmp	r0, #0
    5e92:	d0f3      	beq.n	5e7c <usart_init+0x2c0>
		if (current_pinmux != PINMUX_UNUSED) {
    5e94:	1c43      	adds	r3, r0, #1
    5e96:	d0f5      	beq.n	5e84 <usart_init+0x2c8>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    5e98:	a90e      	add	r1, sp, #56	; 0x38
    5e9a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    5e9c:	0c00      	lsrs	r0, r0, #16
    5e9e:	b2c0      	uxtb	r0, r0
    5ea0:	4b1d      	ldr	r3, [pc, #116]	; (5f18 <usart_init+0x35c>)
    5ea2:	4798      	blx	r3
    5ea4:	e7ee      	b.n	5e84 <usart_init+0x2c8>
		module->callback[i]            = NULL;
    5ea6:	2300      	movs	r3, #0
    5ea8:	60eb      	str	r3, [r5, #12]
    5eaa:	612b      	str	r3, [r5, #16]
    5eac:	616b      	str	r3, [r5, #20]
    5eae:	61ab      	str	r3, [r5, #24]
    5eb0:	61eb      	str	r3, [r5, #28]
    5eb2:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    5eb4:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    5eb6:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    5eb8:	2200      	movs	r2, #0
    5eba:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    5ebc:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    5ebe:	3330      	adds	r3, #48	; 0x30
    5ec0:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    5ec2:	3301      	adds	r3, #1
    5ec4:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    5ec6:	3301      	adds	r3, #1
    5ec8:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    5eca:	3301      	adds	r3, #1
    5ecc:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    5ece:	6828      	ldr	r0, [r5, #0]
    5ed0:	4b07      	ldr	r3, [pc, #28]	; (5ef0 <usart_init+0x334>)
    5ed2:	4798      	blx	r3
    5ed4:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    5ed6:	4911      	ldr	r1, [pc, #68]	; (5f1c <usart_init+0x360>)
    5ed8:	4b11      	ldr	r3, [pc, #68]	; (5f20 <usart_init+0x364>)
    5eda:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    5edc:	00a4      	lsls	r4, r4, #2
    5ede:	4b11      	ldr	r3, [pc, #68]	; (5f24 <usart_init+0x368>)
    5ee0:	50e5      	str	r5, [r4, r3]
	return status_code;
    5ee2:	2000      	movs	r0, #0
    5ee4:	e682      	b.n	5bec <usart_init+0x30>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5ee6:	2310      	movs	r3, #16
    5ee8:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5eea:	2300      	movs	r3, #0
    5eec:	9307      	str	r3, [sp, #28]
    5eee:	e6ea      	b.n	5cc6 <usart_init+0x10a>
    5ef0:	00005675 	.word	0x00005675
    5ef4:	40000400 	.word	0x40000400
    5ef8:	0000696d 	.word	0x0000696d
    5efc:	000068fd 	.word	0x000068fd
    5f00:	000054cd 	.word	0x000054cd
    5f04:	41002000 	.word	0x41002000
    5f08:	00006991 	.word	0x00006991
    5f0c:	0000540f 	.word	0x0000540f
    5f10:	00005439 	.word	0x00005439
    5f14:	00005519 	.word	0x00005519
    5f18:	00006a69 	.word	0x00006a69
    5f1c:	000061a5 	.word	0x000061a5
    5f20:	000056b1 	.word	0x000056b1
    5f24:	20001f14 	.word	0x20001f14

00005f28 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    5f28:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    5f2a:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    5f2c:	2a00      	cmp	r2, #0
    5f2e:	d101      	bne.n	5f34 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    5f30:	0018      	movs	r0, r3
    5f32:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    5f34:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    5f36:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    5f38:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    5f3a:	2a00      	cmp	r2, #0
    5f3c:	d1f8      	bne.n	5f30 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    5f3e:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    5f40:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    5f42:	2a00      	cmp	r2, #0
    5f44:	d1fc      	bne.n	5f40 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    5f46:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    5f48:	2102      	movs	r1, #2
    5f4a:	7e1a      	ldrb	r2, [r3, #24]
    5f4c:	420a      	tst	r2, r1
    5f4e:	d0fc      	beq.n	5f4a <usart_write_wait+0x22>
	return STATUS_OK;
    5f50:	2300      	movs	r3, #0
    5f52:	e7ed      	b.n	5f30 <usart_write_wait+0x8>

00005f54 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    5f54:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    5f56:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    5f58:	2a00      	cmp	r2, #0
    5f5a:	d101      	bne.n	5f60 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    5f5c:	0018      	movs	r0, r3
    5f5e:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    5f60:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    5f62:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    5f64:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    5f66:	2a00      	cmp	r2, #0
    5f68:	d1f8      	bne.n	5f5c <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    5f6a:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    5f6c:	7e10      	ldrb	r0, [r2, #24]
    5f6e:	0740      	lsls	r0, r0, #29
    5f70:	d5f4      	bpl.n	5f5c <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    5f72:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    5f74:	2b00      	cmp	r3, #0
    5f76:	d1fc      	bne.n	5f72 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    5f78:	8b53      	ldrh	r3, [r2, #26]
    5f7a:	b2db      	uxtb	r3, r3
	if (error_code) {
    5f7c:	0698      	lsls	r0, r3, #26
    5f7e:	d01d      	beq.n	5fbc <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    5f80:	0798      	lsls	r0, r3, #30
    5f82:	d503      	bpl.n	5f8c <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    5f84:	2302      	movs	r3, #2
    5f86:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    5f88:	3318      	adds	r3, #24
    5f8a:	e7e7      	b.n	5f5c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    5f8c:	0758      	lsls	r0, r3, #29
    5f8e:	d503      	bpl.n	5f98 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    5f90:	2304      	movs	r3, #4
    5f92:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    5f94:	331a      	adds	r3, #26
    5f96:	e7e1      	b.n	5f5c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    5f98:	07d8      	lsls	r0, r3, #31
    5f9a:	d503      	bpl.n	5fa4 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    5f9c:	2301      	movs	r3, #1
    5f9e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    5fa0:	3312      	adds	r3, #18
    5fa2:	e7db      	b.n	5f5c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    5fa4:	06d8      	lsls	r0, r3, #27
    5fa6:	d503      	bpl.n	5fb0 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    5fa8:	2310      	movs	r3, #16
    5faa:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    5fac:	3332      	adds	r3, #50	; 0x32
    5fae:	e7d5      	b.n	5f5c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    5fb0:	069b      	lsls	r3, r3, #26
    5fb2:	d503      	bpl.n	5fbc <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    5fb4:	2320      	movs	r3, #32
    5fb6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    5fb8:	3321      	adds	r3, #33	; 0x21
    5fba:	e7cf      	b.n	5f5c <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    5fbc:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    5fbe:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    5fc0:	2300      	movs	r3, #0
    5fc2:	e7cb      	b.n	5f5c <usart_read_wait+0x8>

00005fc4 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    5fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5fc6:	46ce      	mov	lr, r9
    5fc8:	4647      	mov	r7, r8
    5fca:	b580      	push	{r7, lr}
    5fcc:	b083      	sub	sp, #12
    5fce:	0005      	movs	r5, r0
    5fd0:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    5fd2:	2017      	movs	r0, #23
	if (length == 0) {
    5fd4:	2a00      	cmp	r2, #0
    5fd6:	d104      	bne.n	5fe2 <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    5fd8:	b003      	add	sp, #12
    5fda:	bc0c      	pop	{r2, r3}
    5fdc:	4690      	mov	r8, r2
    5fde:	4699      	mov	r9, r3
    5fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    5fe2:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    5fe4:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    5fe6:	2b00      	cmp	r3, #0
    5fe8:	d0f6      	beq.n	5fd8 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
    5fea:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    5fec:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    5fee:	2b00      	cmp	r3, #0
    5ff0:	d1fc      	bne.n	5fec <usart_write_buffer_wait+0x28>
	while (length--) {
    5ff2:	3a01      	subs	r2, #1
    5ff4:	b293      	uxth	r3, r2
    5ff6:	4699      	mov	r9, r3
    5ff8:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    5ffa:	2701      	movs	r7, #1
	while (length--) {
    5ffc:	4b1f      	ldr	r3, [pc, #124]	; (607c <usart_write_buffer_wait+0xb8>)
    5ffe:	4698      	mov	r8, r3
    6000:	e011      	b.n	6026 <usart_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
    6002:	1c73      	adds	r3, r6, #1
    6004:	b29b      	uxth	r3, r3
    6006:	9a01      	ldr	r2, [sp, #4]
    6008:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    600a:	796a      	ldrb	r2, [r5, #5]
    600c:	2a01      	cmp	r2, #1
    600e:	d017      	beq.n	6040 <usart_write_buffer_wait+0x7c>
		uint16_t data_to_send = tx_data[tx_pos++];
    6010:	b289      	uxth	r1, r1
    6012:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
    6014:	0028      	movs	r0, r5
    6016:	4b1a      	ldr	r3, [pc, #104]	; (6080 <usart_write_buffer_wait+0xbc>)
    6018:	4798      	blx	r3
	while (length--) {
    601a:	464b      	mov	r3, r9
    601c:	3b01      	subs	r3, #1
    601e:	b29b      	uxth	r3, r3
    6020:	4699      	mov	r9, r3
    6022:	4543      	cmp	r3, r8
    6024:	d013      	beq.n	604e <usart_write_buffer_wait+0x8a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    6026:	7e23      	ldrb	r3, [r4, #24]
    6028:	423b      	tst	r3, r7
    602a:	d1ea      	bne.n	6002 <usart_write_buffer_wait+0x3e>
    602c:	4b13      	ldr	r3, [pc, #76]	; (607c <usart_write_buffer_wait+0xb8>)
    602e:	7e22      	ldrb	r2, [r4, #24]
    6030:	423a      	tst	r2, r7
    6032:	d1e6      	bne.n	6002 <usart_write_buffer_wait+0x3e>
			} else if (i == USART_TIMEOUT) {
    6034:	2b01      	cmp	r3, #1
    6036:	d019      	beq.n	606c <usart_write_buffer_wait+0xa8>
    6038:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    603a:	2b00      	cmp	r3, #0
    603c:	d1f7      	bne.n	602e <usart_write_buffer_wait+0x6a>
    603e:	e7e0      	b.n	6002 <usart_write_buffer_wait+0x3e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    6040:	3602      	adds	r6, #2
    6042:	b2b6      	uxth	r6, r6
    6044:	9a01      	ldr	r2, [sp, #4]
    6046:	5cd3      	ldrb	r3, [r2, r3]
    6048:	021b      	lsls	r3, r3, #8
    604a:	4319      	orrs	r1, r3
    604c:	e7e2      	b.n	6014 <usart_write_buffer_wait+0x50>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    604e:	7e23      	ldrb	r3, [r4, #24]
    6050:	079b      	lsls	r3, r3, #30
    6052:	d40d      	bmi.n	6070 <usart_write_buffer_wait+0xac>
    6054:	4b09      	ldr	r3, [pc, #36]	; (607c <usart_write_buffer_wait+0xb8>)
    6056:	2102      	movs	r1, #2
    6058:	7e22      	ldrb	r2, [r4, #24]
    605a:	420a      	tst	r2, r1
    605c:	d10a      	bne.n	6074 <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
    605e:	2b01      	cmp	r3, #1
    6060:	d00a      	beq.n	6078 <usart_write_buffer_wait+0xb4>
    6062:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    6064:	2b00      	cmp	r3, #0
    6066:	d1f7      	bne.n	6058 <usart_write_buffer_wait+0x94>
	return STATUS_OK;
    6068:	2000      	movs	r0, #0
    606a:	e7b5      	b.n	5fd8 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    606c:	2012      	movs	r0, #18
    606e:	e7b3      	b.n	5fd8 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    6070:	2000      	movs	r0, #0
    6072:	e7b1      	b.n	5fd8 <usart_write_buffer_wait+0x14>
    6074:	2000      	movs	r0, #0
    6076:	e7af      	b.n	5fd8 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    6078:	2012      	movs	r0, #18
    607a:	e7ad      	b.n	5fd8 <usart_write_buffer_wait+0x14>
    607c:	0000ffff 	.word	0x0000ffff
    6080:	00005f29 	.word	0x00005f29

00006084 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    6084:	b5f0      	push	{r4, r5, r6, r7, lr}
    6086:	46d6      	mov	lr, sl
    6088:	b500      	push	{lr}
    608a:	b084      	sub	sp, #16
    608c:	0004      	movs	r4, r0
    608e:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    6090:	2017      	movs	r0, #23
	if (length == 0) {
    6092:	2a00      	cmp	r2, #0
    6094:	d103      	bne.n	609e <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    6096:	b004      	add	sp, #16
    6098:	bc04      	pop	{r2}
    609a:	4692      	mov	sl, r2
    609c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    609e:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    60a0:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    60a2:	2b00      	cmp	r3, #0
    60a4:	d0f7      	beq.n	6096 <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    60a6:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    60a8:	3a01      	subs	r2, #1
    60aa:	b293      	uxth	r3, r2
    60ac:	469a      	mov	sl, r3
    60ae:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    60b0:	2704      	movs	r7, #4
    60b2:	e019      	b.n	60e8 <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    60b4:	2300      	movs	r3, #0
    60b6:	aa02      	add	r2, sp, #8
    60b8:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    60ba:	1d91      	adds	r1, r2, #6
    60bc:	0020      	movs	r0, r4
    60be:	4b15      	ldr	r3, [pc, #84]	; (6114 <usart_read_buffer_wait+0x90>)
    60c0:	4798      	blx	r3
		if (retval != STATUS_OK) {
    60c2:	2800      	cmp	r0, #0
    60c4:	d1e7      	bne.n	6096 <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    60c6:	1c69      	adds	r1, r5, #1
    60c8:	b289      	uxth	r1, r1
    60ca:	ab02      	add	r3, sp, #8
    60cc:	88db      	ldrh	r3, [r3, #6]
    60ce:	9a01      	ldr	r2, [sp, #4]
    60d0:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    60d2:	7962      	ldrb	r2, [r4, #5]
    60d4:	2a01      	cmp	r2, #1
    60d6:	d014      	beq.n	6102 <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    60d8:	000d      	movs	r5, r1
	while (length--) {
    60da:	4653      	mov	r3, sl
    60dc:	3b01      	subs	r3, #1
    60de:	b29b      	uxth	r3, r3
    60e0:	469a      	mov	sl, r3
    60e2:	4b0d      	ldr	r3, [pc, #52]	; (6118 <usart_read_buffer_wait+0x94>)
    60e4:	459a      	cmp	sl, r3
    60e6:	d0d6      	beq.n	6096 <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    60e8:	7e33      	ldrb	r3, [r6, #24]
    60ea:	423b      	tst	r3, r7
    60ec:	d1e2      	bne.n	60b4 <usart_read_buffer_wait+0x30>
    60ee:	4b0a      	ldr	r3, [pc, #40]	; (6118 <usart_read_buffer_wait+0x94>)
    60f0:	7e32      	ldrb	r2, [r6, #24]
    60f2:	423a      	tst	r2, r7
    60f4:	d1de      	bne.n	60b4 <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    60f6:	2b01      	cmp	r3, #1
    60f8:	d009      	beq.n	610e <usart_read_buffer_wait+0x8a>
    60fa:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    60fc:	2b00      	cmp	r3, #0
    60fe:	d1f7      	bne.n	60f0 <usart_read_buffer_wait+0x6c>
    6100:	e7d8      	b.n	60b4 <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    6102:	3502      	adds	r5, #2
    6104:	b2ad      	uxth	r5, r5
    6106:	0a1b      	lsrs	r3, r3, #8
    6108:	9a01      	ldr	r2, [sp, #4]
    610a:	5453      	strb	r3, [r2, r1]
    610c:	e7e5      	b.n	60da <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    610e:	2012      	movs	r0, #18
    6110:	e7c1      	b.n	6096 <usart_read_buffer_wait+0x12>
    6112:	46c0      	nop			; (mov r8, r8)
    6114:	00005f55 	.word	0x00005f55
    6118:	0000ffff 	.word	0x0000ffff

0000611c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    611c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    611e:	0004      	movs	r4, r0
    6120:	000d      	movs	r5, r1
    6122:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    6124:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    6126:	4b0f      	ldr	r3, [pc, #60]	; (6164 <_usart_read_buffer+0x48>)
    6128:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    612a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    612c:	b29b      	uxth	r3, r3
    612e:	2b00      	cmp	r3, #0
    6130:	d003      	beq.n	613a <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    6132:	4b0d      	ldr	r3, [pc, #52]	; (6168 <_usart_read_buffer+0x4c>)
    6134:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    6136:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    6138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    613a:	85a6      	strh	r6, [r4, #44]	; 0x2c
    613c:	4b0a      	ldr	r3, [pc, #40]	; (6168 <_usart_read_buffer+0x4c>)
    613e:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    6140:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    6142:	2205      	movs	r2, #5
    6144:	2332      	movs	r3, #50	; 0x32
    6146:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    6148:	3b2e      	subs	r3, #46	; 0x2e
    614a:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    614c:	7a23      	ldrb	r3, [r4, #8]
    614e:	2b00      	cmp	r3, #0
    6150:	d001      	beq.n	6156 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    6152:	2320      	movs	r3, #32
    6154:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    6156:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    6158:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    615a:	2b00      	cmp	r3, #0
    615c:	d0ec      	beq.n	6138 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    615e:	2308      	movs	r3, #8
    6160:	75bb      	strb	r3, [r7, #22]
    6162:	e7e9      	b.n	6138 <_usart_read_buffer+0x1c>
    6164:	000044f9 	.word	0x000044f9
    6168:	00004539 	.word	0x00004539

0000616c <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    616c:	1c93      	adds	r3, r2, #2
    616e:	009b      	lsls	r3, r3, #2
    6170:	18c3      	adds	r3, r0, r3
    6172:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    6174:	2130      	movs	r1, #48	; 0x30
    6176:	2301      	movs	r3, #1
    6178:	4093      	lsls	r3, r2
    617a:	001a      	movs	r2, r3
    617c:	5c43      	ldrb	r3, [r0, r1]
    617e:	4313      	orrs	r3, r2
    6180:	5443      	strb	r3, [r0, r1]
}
    6182:	4770      	bx	lr

00006184 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    6184:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    6186:	2317      	movs	r3, #23
	if (length == 0) {
    6188:	2a00      	cmp	r2, #0
    618a:	d101      	bne.n	6190 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    618c:	0018      	movs	r0, r3
    618e:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    6190:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    6192:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    6194:	2c00      	cmp	r4, #0
    6196:	d0f9      	beq.n	618c <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    6198:	4b01      	ldr	r3, [pc, #4]	; (61a0 <usart_read_buffer_job+0x1c>)
    619a:	4798      	blx	r3
    619c:	0003      	movs	r3, r0
    619e:	e7f5      	b.n	618c <usart_read_buffer_job+0x8>
    61a0:	0000611d 	.word	0x0000611d

000061a4 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    61a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    61a6:	0080      	lsls	r0, r0, #2
    61a8:	4b62      	ldr	r3, [pc, #392]	; (6334 <_usart_interrupt_handler+0x190>)
    61aa:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    61ac:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    61ae:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    61b0:	2b00      	cmp	r3, #0
    61b2:	d1fc      	bne.n	61ae <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    61b4:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    61b6:	7da6      	ldrb	r6, [r4, #22]
    61b8:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    61ba:	2330      	movs	r3, #48	; 0x30
    61bc:	5ceb      	ldrb	r3, [r5, r3]
    61be:	2231      	movs	r2, #49	; 0x31
    61c0:	5caf      	ldrb	r7, [r5, r2]
    61c2:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    61c4:	07f3      	lsls	r3, r6, #31
    61c6:	d522      	bpl.n	620e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    61c8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    61ca:	b29b      	uxth	r3, r3
    61cc:	2b00      	cmp	r3, #0
    61ce:	d01c      	beq.n	620a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    61d0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    61d2:	7813      	ldrb	r3, [r2, #0]
    61d4:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    61d6:	1c51      	adds	r1, r2, #1
    61d8:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    61da:	7969      	ldrb	r1, [r5, #5]
    61dc:	2901      	cmp	r1, #1
    61de:	d00e      	beq.n	61fe <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    61e0:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    61e2:	05db      	lsls	r3, r3, #23
    61e4:	0ddb      	lsrs	r3, r3, #23
    61e6:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    61e8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    61ea:	3b01      	subs	r3, #1
    61ec:	b29b      	uxth	r3, r3
    61ee:	85eb      	strh	r3, [r5, #46]	; 0x2e
    61f0:	2b00      	cmp	r3, #0
    61f2:	d10c      	bne.n	620e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    61f4:	3301      	adds	r3, #1
    61f6:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    61f8:	3301      	adds	r3, #1
    61fa:	75a3      	strb	r3, [r4, #22]
    61fc:	e007      	b.n	620e <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    61fe:	7851      	ldrb	r1, [r2, #1]
    6200:	0209      	lsls	r1, r1, #8
    6202:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    6204:	3202      	adds	r2, #2
    6206:	62aa      	str	r2, [r5, #40]	; 0x28
    6208:	e7eb      	b.n	61e2 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    620a:	2301      	movs	r3, #1
    620c:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    620e:	07b3      	lsls	r3, r6, #30
    6210:	d506      	bpl.n	6220 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    6212:	2302      	movs	r3, #2
    6214:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    6216:	2200      	movs	r2, #0
    6218:	3331      	adds	r3, #49	; 0x31
    621a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    621c:	07fb      	lsls	r3, r7, #31
    621e:	d41a      	bmi.n	6256 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    6220:	0773      	lsls	r3, r6, #29
    6222:	d565      	bpl.n	62f0 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    6224:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    6226:	b29b      	uxth	r3, r3
    6228:	2b00      	cmp	r3, #0
    622a:	d05f      	beq.n	62ec <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    622c:	8b63      	ldrh	r3, [r4, #26]
    622e:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    6230:	071a      	lsls	r2, r3, #28
    6232:	d414      	bmi.n	625e <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    6234:	223f      	movs	r2, #63	; 0x3f
    6236:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    6238:	2b00      	cmp	r3, #0
    623a:	d034      	beq.n	62a6 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    623c:	079a      	lsls	r2, r3, #30
    623e:	d511      	bpl.n	6264 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    6240:	221a      	movs	r2, #26
    6242:	2332      	movs	r3, #50	; 0x32
    6244:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    6246:	3b30      	subs	r3, #48	; 0x30
    6248:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    624a:	077b      	lsls	r3, r7, #29
    624c:	d550      	bpl.n	62f0 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    624e:	0028      	movs	r0, r5
    6250:	696b      	ldr	r3, [r5, #20]
    6252:	4798      	blx	r3
    6254:	e04c      	b.n	62f0 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    6256:	0028      	movs	r0, r5
    6258:	68eb      	ldr	r3, [r5, #12]
    625a:	4798      	blx	r3
    625c:	e7e0      	b.n	6220 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    625e:	2237      	movs	r2, #55	; 0x37
    6260:	4013      	ands	r3, r2
    6262:	e7e9      	b.n	6238 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    6264:	075a      	lsls	r2, r3, #29
    6266:	d505      	bpl.n	6274 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    6268:	221e      	movs	r2, #30
    626a:	2332      	movs	r3, #50	; 0x32
    626c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    626e:	3b2e      	subs	r3, #46	; 0x2e
    6270:	8363      	strh	r3, [r4, #26]
    6272:	e7ea      	b.n	624a <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    6274:	07da      	lsls	r2, r3, #31
    6276:	d505      	bpl.n	6284 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    6278:	2213      	movs	r2, #19
    627a:	2332      	movs	r3, #50	; 0x32
    627c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    627e:	3b31      	subs	r3, #49	; 0x31
    6280:	8363      	strh	r3, [r4, #26]
    6282:	e7e2      	b.n	624a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    6284:	06da      	lsls	r2, r3, #27
    6286:	d505      	bpl.n	6294 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    6288:	2242      	movs	r2, #66	; 0x42
    628a:	2332      	movs	r3, #50	; 0x32
    628c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    628e:	3b22      	subs	r3, #34	; 0x22
    6290:	8363      	strh	r3, [r4, #26]
    6292:	e7da      	b.n	624a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    6294:	2220      	movs	r2, #32
    6296:	421a      	tst	r2, r3
    6298:	d0d7      	beq.n	624a <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    629a:	3221      	adds	r2, #33	; 0x21
    629c:	2332      	movs	r3, #50	; 0x32
    629e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    62a0:	3b12      	subs	r3, #18
    62a2:	8363      	strh	r3, [r4, #26]
    62a4:	e7d1      	b.n	624a <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    62a6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    62a8:	05db      	lsls	r3, r3, #23
    62aa:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    62ac:	b2da      	uxtb	r2, r3
    62ae:	6a69      	ldr	r1, [r5, #36]	; 0x24
    62b0:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    62b2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    62b4:	1c51      	adds	r1, r2, #1
    62b6:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    62b8:	7969      	ldrb	r1, [r5, #5]
    62ba:	2901      	cmp	r1, #1
    62bc:	d010      	beq.n	62e0 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    62be:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    62c0:	3b01      	subs	r3, #1
    62c2:	b29b      	uxth	r3, r3
    62c4:	85ab      	strh	r3, [r5, #44]	; 0x2c
    62c6:	2b00      	cmp	r3, #0
    62c8:	d112      	bne.n	62f0 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    62ca:	3304      	adds	r3, #4
    62cc:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    62ce:	2200      	movs	r2, #0
    62d0:	332e      	adds	r3, #46	; 0x2e
    62d2:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    62d4:	07bb      	lsls	r3, r7, #30
    62d6:	d50b      	bpl.n	62f0 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    62d8:	0028      	movs	r0, r5
    62da:	692b      	ldr	r3, [r5, #16]
    62dc:	4798      	blx	r3
    62de:	e007      	b.n	62f0 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    62e0:	0a1b      	lsrs	r3, r3, #8
    62e2:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    62e4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    62e6:	3301      	adds	r3, #1
    62e8:	626b      	str	r3, [r5, #36]	; 0x24
    62ea:	e7e8      	b.n	62be <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    62ec:	2304      	movs	r3, #4
    62ee:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    62f0:	06f3      	lsls	r3, r6, #27
    62f2:	d504      	bpl.n	62fe <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    62f4:	2310      	movs	r3, #16
    62f6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    62f8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    62fa:	06fb      	lsls	r3, r7, #27
    62fc:	d40e      	bmi.n	631c <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    62fe:	06b3      	lsls	r3, r6, #26
    6300:	d504      	bpl.n	630c <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    6302:	2320      	movs	r3, #32
    6304:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    6306:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    6308:	073b      	lsls	r3, r7, #28
    630a:	d40b      	bmi.n	6324 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    630c:	0733      	lsls	r3, r6, #28
    630e:	d504      	bpl.n	631a <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    6310:	2308      	movs	r3, #8
    6312:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    6314:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    6316:	06bb      	lsls	r3, r7, #26
    6318:	d408      	bmi.n	632c <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    631a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    631c:	0028      	movs	r0, r5
    631e:	69eb      	ldr	r3, [r5, #28]
    6320:	4798      	blx	r3
    6322:	e7ec      	b.n	62fe <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    6324:	0028      	movs	r0, r5
    6326:	69ab      	ldr	r3, [r5, #24]
    6328:	4798      	blx	r3
    632a:	e7ef      	b.n	630c <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    632c:	6a2b      	ldr	r3, [r5, #32]
    632e:	0028      	movs	r0, r5
    6330:	4798      	blx	r3
}
    6332:	e7f2      	b.n	631a <_usart_interrupt_handler+0x176>
    6334:	20001f14 	.word	0x20001f14

00006338 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    6338:	b510      	push	{r4, lr}
	switch (clock_source) {
    633a:	2808      	cmp	r0, #8
    633c:	d803      	bhi.n	6346 <system_clock_source_get_hz+0xe>
    633e:	0080      	lsls	r0, r0, #2
    6340:	4b1c      	ldr	r3, [pc, #112]	; (63b4 <system_clock_source_get_hz+0x7c>)
    6342:	581b      	ldr	r3, [r3, r0]
    6344:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    6346:	2000      	movs	r0, #0
    6348:	e032      	b.n	63b0 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    634a:	4b1b      	ldr	r3, [pc, #108]	; (63b8 <system_clock_source_get_hz+0x80>)
    634c:	6918      	ldr	r0, [r3, #16]
    634e:	e02f      	b.n	63b0 <system_clock_source_get_hz+0x78>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    6350:	4b1a      	ldr	r3, [pc, #104]	; (63bc <system_clock_source_get_hz+0x84>)
    6352:	7d18      	ldrb	r0, [r3, #20]
    6354:	0700      	lsls	r0, r0, #28
    6356:	0f80      	lsrs	r0, r0, #30
    6358:	1c43      	adds	r3, r0, #1
    635a:	4819      	ldr	r0, [pc, #100]	; (63c0 <system_clock_source_get_hz+0x88>)
    635c:	4358      	muls	r0, r3
    635e:	e027      	b.n	63b0 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    6360:	4b15      	ldr	r3, [pc, #84]	; (63b8 <system_clock_source_get_hz+0x80>)
    6362:	6958      	ldr	r0, [r3, #20]
    6364:	e024      	b.n	63b0 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    6366:	4b14      	ldr	r3, [pc, #80]	; (63b8 <system_clock_source_get_hz+0x80>)
    6368:	681b      	ldr	r3, [r3, #0]
			return 0;
    636a:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    636c:	079b      	lsls	r3, r3, #30
    636e:	d51f      	bpl.n	63b0 <system_clock_source_get_hz+0x78>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    6370:	4912      	ldr	r1, [pc, #72]	; (63bc <system_clock_source_get_hz+0x84>)
    6372:	2280      	movs	r2, #128	; 0x80
    6374:	0052      	lsls	r2, r2, #1
    6376:	68cb      	ldr	r3, [r1, #12]
    6378:	4213      	tst	r3, r2
    637a:	d0fc      	beq.n	6376 <system_clock_source_get_hz+0x3e>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    637c:	4b0e      	ldr	r3, [pc, #56]	; (63b8 <system_clock_source_get_hz+0x80>)
    637e:	681b      	ldr	r3, [r3, #0]
    6380:	075b      	lsls	r3, r3, #29
    6382:	d401      	bmi.n	6388 <system_clock_source_get_hz+0x50>
		return 48000000UL;
    6384:	480f      	ldr	r0, [pc, #60]	; (63c4 <system_clock_source_get_hz+0x8c>)
    6386:	e013      	b.n	63b0 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    6388:	2000      	movs	r0, #0
    638a:	4b0f      	ldr	r3, [pc, #60]	; (63c8 <system_clock_source_get_hz+0x90>)
    638c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    638e:	4b0a      	ldr	r3, [pc, #40]	; (63b8 <system_clock_source_get_hz+0x80>)
    6390:	689b      	ldr	r3, [r3, #8]
    6392:	041b      	lsls	r3, r3, #16
    6394:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    6396:	4358      	muls	r0, r3
    6398:	e00a      	b.n	63b0 <system_clock_source_get_hz+0x78>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    639a:	2328      	movs	r3, #40	; 0x28
    639c:	4a07      	ldr	r2, [pc, #28]	; (63bc <system_clock_source_get_hz+0x84>)
    639e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    63a0:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    63a2:	079b      	lsls	r3, r3, #30
    63a4:	d504      	bpl.n	63b0 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    63a6:	4b04      	ldr	r3, [pc, #16]	; (63b8 <system_clock_source_get_hz+0x80>)
    63a8:	68d8      	ldr	r0, [r3, #12]
    63aa:	e001      	b.n	63b0 <system_clock_source_get_hz+0x78>
		return 32768UL;
    63ac:	2080      	movs	r0, #128	; 0x80
    63ae:	0200      	lsls	r0, r0, #8
	}
}
    63b0:	bd10      	pop	{r4, pc}
    63b2:	46c0      	nop			; (mov r8, r8)
    63b4:	00017554 	.word	0x00017554
    63b8:	200000d8 	.word	0x200000d8
    63bc:	40000c00 	.word	0x40000c00
    63c0:	003d0900 	.word	0x003d0900
    63c4:	02dc6c00 	.word	0x02dc6c00
    63c8:	00006991 	.word	0x00006991

000063cc <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
    63cc:	b570      	push	{r4, r5, r6, lr}
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
    63ce:	4c0b      	ldr	r4, [pc, #44]	; (63fc <system_clock_source_osc16m_set_config+0x30>)
    63d0:	7d23      	ldrb	r3, [r4, #20]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
	temp.bit.ONDEMAND = config->on_demand;
    63d2:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;
    63d4:	7846      	ldrb	r6, [r0, #1]

	OSCCTRL->OSC16MCTRL = temp;
    63d6:	7802      	ldrb	r2, [r0, #0]
    63d8:	2103      	movs	r1, #3
    63da:	4011      	ands	r1, r2
    63dc:	0089      	lsls	r1, r1, #2
    63de:	220c      	movs	r2, #12
    63e0:	4393      	bics	r3, r2
    63e2:	430b      	orrs	r3, r1
    63e4:	3a0b      	subs	r2, #11
    63e6:	4032      	ands	r2, r6
    63e8:	0192      	lsls	r2, r2, #6
    63ea:	2140      	movs	r1, #64	; 0x40
    63ec:	438b      	bics	r3, r1
    63ee:	4313      	orrs	r3, r2
    63f0:	01ed      	lsls	r5, r5, #7
    63f2:	227f      	movs	r2, #127	; 0x7f
    63f4:	4013      	ands	r3, r2
    63f6:	432b      	orrs	r3, r5
    63f8:	7523      	strb	r3, [r4, #20]
}
    63fa:	bd70      	pop	{r4, r5, r6, pc}
    63fc:	40000c00 	.word	0x40000c00

00006400 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    6400:	b5f0      	push	{r4, r5, r6, r7, lr}
    6402:	46d6      	mov	lr, sl
    6404:	464f      	mov	r7, r9
    6406:	4646      	mov	r6, r8
    6408:	b5c0      	push	{r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    640a:	4b20      	ldr	r3, [pc, #128]	; (648c <system_clock_source_xosc32k_set_config+0x8c>)
    640c:	469a      	mov	sl, r3
    640e:	695b      	ldr	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    6410:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    6412:	7801      	ldrb	r1, [r0, #0]
    6414:	424c      	negs	r4, r1
    6416:	414c      	adcs	r4, r1
    6418:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    641a:	7881      	ldrb	r1, [r0, #2]
    641c:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
    641e:	78c1      	ldrb	r1, [r0, #3]
    6420:	4688      	mov	r8, r1

	temp.bit.ONDEMAND = config->on_demand;
    6422:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    6424:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
    6426:	7a84      	ldrb	r4, [r0, #10]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    6428:	6840      	ldr	r0, [r0, #4]
    642a:	4919      	ldr	r1, [pc, #100]	; (6490 <system_clock_source_xosc32k_set_config+0x90>)
    642c:	6148      	str	r0, [r1, #20]

	OSC32KCTRL->XOSC32K = temp;
    642e:	2101      	movs	r1, #1
    6430:	4648      	mov	r0, r9
    6432:	0080      	lsls	r0, r0, #2
    6434:	2204      	movs	r2, #4
    6436:	4393      	bics	r3, r2
    6438:	4303      	orrs	r3, r0
    643a:	4640      	mov	r0, r8
    643c:	4008      	ands	r0, r1
    643e:	00c0      	lsls	r0, r0, #3
    6440:	3204      	adds	r2, #4
    6442:	4393      	bics	r3, r2
    6444:	4303      	orrs	r3, r0
    6446:	4660      	mov	r0, ip
    6448:	4008      	ands	r0, r1
    644a:	0100      	lsls	r0, r0, #4
    644c:	3208      	adds	r2, #8
    644e:	4393      	bics	r3, r2
    6450:	4303      	orrs	r3, r0
    6452:	400f      	ands	r7, r1
    6454:	01bf      	lsls	r7, r7, #6
    6456:	2040      	movs	r0, #64	; 0x40
    6458:	4383      	bics	r3, r0
    645a:	433b      	orrs	r3, r7
    645c:	400e      	ands	r6, r1
    645e:	01f6      	lsls	r6, r6, #7
    6460:	3040      	adds	r0, #64	; 0x40
    6462:	4383      	bics	r3, r0
    6464:	4333      	orrs	r3, r6
    6466:	3879      	subs	r0, #121	; 0x79
    6468:	4005      	ands	r5, r0
    646a:	022d      	lsls	r5, r5, #8
    646c:	4809      	ldr	r0, [pc, #36]	; (6494 <system_clock_source_xosc32k_set_config+0x94>)
    646e:	4003      	ands	r3, r0
    6470:	432b      	orrs	r3, r5
    6472:	4021      	ands	r1, r4
    6474:	0309      	lsls	r1, r1, #12
    6476:	4808      	ldr	r0, [pc, #32]	; (6498 <system_clock_source_xosc32k_set_config+0x98>)
    6478:	4003      	ands	r3, r0
    647a:	430b      	orrs	r3, r1
    647c:	4652      	mov	r2, sl
    647e:	6153      	str	r3, [r2, #20]
}
    6480:	bc1c      	pop	{r2, r3, r4}
    6482:	4690      	mov	r8, r2
    6484:	4699      	mov	r9, r3
    6486:	46a2      	mov	sl, r4
    6488:	bdf0      	pop	{r4, r5, r6, r7, pc}
    648a:	46c0      	nop			; (mov r8, r8)
    648c:	40001000 	.word	0x40001000
    6490:	200000d8 	.word	0x200000d8
    6494:	fffff8ff 	.word	0xfffff8ff
    6498:	ffffefff 	.word	0xffffefff

0000649c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    649c:	2808      	cmp	r0, #8
    649e:	d803      	bhi.n	64a8 <system_clock_source_enable+0xc>
    64a0:	0080      	lsls	r0, r0, #2
    64a2:	4b29      	ldr	r3, [pc, #164]	; (6548 <system_clock_source_enable+0xac>)
    64a4:	581b      	ldr	r3, [r3, r0]
    64a6:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    64a8:	2017      	movs	r0, #23
    64aa:	e04b      	b.n	6544 <system_clock_source_enable+0xa8>
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    64ac:	4a27      	ldr	r2, [pc, #156]	; (654c <system_clock_source_enable+0xb0>)
    64ae:	7d13      	ldrb	r3, [r2, #20]
    64b0:	2102      	movs	r1, #2
    64b2:	430b      	orrs	r3, r1
    64b4:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    64b6:	2000      	movs	r0, #0
    64b8:	e044      	b.n	6544 <system_clock_source_enable+0xa8>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    64ba:	4a25      	ldr	r2, [pc, #148]	; (6550 <system_clock_source_enable+0xb4>)
    64bc:	6993      	ldr	r3, [r2, #24]
    64be:	2102      	movs	r1, #2
    64c0:	430b      	orrs	r3, r1
    64c2:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    64c4:	2000      	movs	r0, #0
		break;
    64c6:	e03d      	b.n	6544 <system_clock_source_enable+0xa8>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    64c8:	4a20      	ldr	r2, [pc, #128]	; (654c <system_clock_source_enable+0xb0>)
    64ca:	8a13      	ldrh	r3, [r2, #16]
    64cc:	2102      	movs	r1, #2
    64ce:	430b      	orrs	r3, r1
    64d0:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    64d2:	2000      	movs	r0, #0
		break;
    64d4:	e036      	b.n	6544 <system_clock_source_enable+0xa8>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    64d6:	4a1e      	ldr	r2, [pc, #120]	; (6550 <system_clock_source_enable+0xb4>)
    64d8:	6953      	ldr	r3, [r2, #20]
    64da:	2102      	movs	r1, #2
    64dc:	430b      	orrs	r3, r1
    64de:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    64e0:	2000      	movs	r0, #0
		break;
    64e2:	e02f      	b.n	6544 <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    64e4:	491b      	ldr	r1, [pc, #108]	; (6554 <system_clock_source_enable+0xb8>)
    64e6:	680b      	ldr	r3, [r1, #0]
    64e8:	2202      	movs	r2, #2
    64ea:	4313      	orrs	r3, r2
    64ec:	600b      	str	r3, [r1, #0]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    64ee:	4b17      	ldr	r3, [pc, #92]	; (654c <system_clock_source_enable+0xb0>)
    64f0:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    64f2:	0019      	movs	r1, r3
    64f4:	32fe      	adds	r2, #254	; 0xfe
    64f6:	68cb      	ldr	r3, [r1, #12]
    64f8:	4213      	tst	r3, r2
    64fa:	d0fc      	beq.n	64f6 <system_clock_source_enable+0x5a>
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    64fc:	4a15      	ldr	r2, [pc, #84]	; (6554 <system_clock_source_enable+0xb8>)
    64fe:	6891      	ldr	r1, [r2, #8]
    6500:	4b12      	ldr	r3, [pc, #72]	; (654c <system_clock_source_enable+0xb0>)
    6502:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    6504:	6852      	ldr	r2, [r2, #4]
    6506:	61da      	str	r2, [r3, #28]
	OSCCTRL->DFLLCTRL.reg = 0;
    6508:	2200      	movs	r2, #0
    650a:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    650c:	0019      	movs	r1, r3
    650e:	3201      	adds	r2, #1
    6510:	32ff      	adds	r2, #255	; 0xff
    6512:	68cb      	ldr	r3, [r1, #12]
    6514:	4213      	tst	r3, r2
    6516:	d0fc      	beq.n	6512 <system_clock_source_enable+0x76>
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    6518:	4b0e      	ldr	r3, [pc, #56]	; (6554 <system_clock_source_enable+0xb8>)
    651a:	681b      	ldr	r3, [r3, #0]
    651c:	b29b      	uxth	r3, r3
    651e:	4a0b      	ldr	r2, [pc, #44]	; (654c <system_clock_source_enable+0xb0>)
    6520:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    6522:	2000      	movs	r0, #0
    6524:	e00e      	b.n	6544 <system_clock_source_enable+0xa8>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    6526:	4909      	ldr	r1, [pc, #36]	; (654c <system_clock_source_enable+0xb0>)
    6528:	2228      	movs	r2, #40	; 0x28
    652a:	5c8b      	ldrb	r3, [r1, r2]
    652c:	2002      	movs	r0, #2
    652e:	4303      	orrs	r3, r0
    6530:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    6532:	0008      	movs	r0, r1
    6534:	2138      	movs	r1, #56	; 0x38
    6536:	3a26      	subs	r2, #38	; 0x26
    6538:	5c43      	ldrb	r3, [r0, r1]
    653a:	4213      	tst	r3, r2
    653c:	d1fc      	bne.n	6538 <system_clock_source_enable+0x9c>
	return STATUS_OK;
    653e:	2000      	movs	r0, #0
    6540:	e000      	b.n	6544 <system_clock_source_enable+0xa8>
		return STATUS_OK;
    6542:	2000      	movs	r0, #0
}
    6544:	4770      	bx	lr
    6546:	46c0      	nop			; (mov r8, r8)
    6548:	00017578 	.word	0x00017578
    654c:	40000c00 	.word	0x40000c00
    6550:	40001000 	.word	0x40001000
    6554:	200000d8 	.word	0x200000d8

00006558 <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    6558:	2808      	cmp	r0, #8
    655a:	d832      	bhi.n	65c2 <system_clock_source_disable+0x6a>
    655c:	0080      	lsls	r0, r0, #2
    655e:	4b1a      	ldr	r3, [pc, #104]	; (65c8 <system_clock_source_disable+0x70>)
    6560:	581b      	ldr	r3, [r3, r0]
    6562:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    6564:	4a19      	ldr	r2, [pc, #100]	; (65cc <system_clock_source_disable+0x74>)
    6566:	7d13      	ldrb	r3, [r2, #20]
    6568:	2102      	movs	r1, #2
    656a:	438b      	bics	r3, r1
    656c:	7513      	strb	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    656e:	2000      	movs	r0, #0
}
    6570:	4770      	bx	lr
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    6572:	4a17      	ldr	r2, [pc, #92]	; (65d0 <system_clock_source_disable+0x78>)
    6574:	6993      	ldr	r3, [r2, #24]
    6576:	2102      	movs	r1, #2
    6578:	438b      	bics	r3, r1
    657a:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    657c:	2000      	movs	r0, #0
		break;
    657e:	e7f7      	b.n	6570 <system_clock_source_disable+0x18>
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    6580:	4a12      	ldr	r2, [pc, #72]	; (65cc <system_clock_source_disable+0x74>)
    6582:	8a13      	ldrh	r3, [r2, #16]
    6584:	2102      	movs	r1, #2
    6586:	438b      	bics	r3, r1
    6588:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    658a:	2000      	movs	r0, #0
		break;
    658c:	e7f0      	b.n	6570 <system_clock_source_disable+0x18>
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    658e:	4a10      	ldr	r2, [pc, #64]	; (65d0 <system_clock_source_disable+0x78>)
    6590:	6953      	ldr	r3, [r2, #20]
    6592:	2102      	movs	r1, #2
    6594:	438b      	bics	r3, r1
    6596:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    6598:	2000      	movs	r0, #0
		break;
    659a:	e7e9      	b.n	6570 <system_clock_source_disable+0x18>
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    659c:	4b0d      	ldr	r3, [pc, #52]	; (65d4 <system_clock_source_disable+0x7c>)
    659e:	681a      	ldr	r2, [r3, #0]
    65a0:	2102      	movs	r1, #2
    65a2:	438a      	bics	r2, r1
    65a4:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    65a6:	681b      	ldr	r3, [r3, #0]
    65a8:	b29b      	uxth	r3, r3
    65aa:	4a08      	ldr	r2, [pc, #32]	; (65cc <system_clock_source_disable+0x74>)
    65ac:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    65ae:	2000      	movs	r0, #0
		break;
    65b0:	e7de      	b.n	6570 <system_clock_source_disable+0x18>
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    65b2:	4906      	ldr	r1, [pc, #24]	; (65cc <system_clock_source_disable+0x74>)
    65b4:	2228      	movs	r2, #40	; 0x28
    65b6:	5c8b      	ldrb	r3, [r1, r2]
    65b8:	2002      	movs	r0, #2
    65ba:	4383      	bics	r3, r0
    65bc:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    65be:	2000      	movs	r0, #0
		break;
    65c0:	e7d6      	b.n	6570 <system_clock_source_disable+0x18>
		return STATUS_ERR_INVALID_ARG;
    65c2:	2017      	movs	r0, #23
    65c4:	e7d4      	b.n	6570 <system_clock_source_disable+0x18>
    65c6:	46c0      	nop			; (mov r8, r8)
    65c8:	0001759c 	.word	0x0001759c
    65cc:	40000c00 	.word	0x40000c00
    65d0:	40001000 	.word	0x40001000
    65d4:	200000d8 	.word	0x200000d8

000065d8 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    65d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    65da:	46d6      	mov	lr, sl
    65dc:	464f      	mov	r7, r9
    65de:	4646      	mov	r6, r8
    65e0:	b5c0      	push	{r6, r7, lr}
    65e2:	b088      	sub	sp, #32
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    65e4:	2280      	movs	r2, #128	; 0x80
    65e6:	0052      	lsls	r2, r2, #1
    65e8:	4b56      	ldr	r3, [pc, #344]	; (6744 <system_clock_init+0x16c>)
    65ea:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    65ec:	3afd      	subs	r2, #253	; 0xfd
    65ee:	4b56      	ldr	r3, [pc, #344]	; (6748 <system_clock_init+0x170>)
    65f0:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    65f2:	4a56      	ldr	r2, [pc, #344]	; (674c <system_clock_init+0x174>)
    65f4:	6853      	ldr	r3, [r2, #4]
    65f6:	211e      	movs	r1, #30
    65f8:	438b      	bics	r3, r1
    65fa:	391a      	subs	r1, #26
    65fc:	430b      	orrs	r3, r1
    65fe:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    6600:	2380      	movs	r3, #128	; 0x80
    6602:	05db      	lsls	r3, r3, #23
    6604:	789b      	ldrb	r3, [r3, #2]
    6606:	2b02      	cmp	r3, #2
    6608:	d00f      	beq.n	662a <system_clock_init+0x52>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB || SAMR34J || SAMR35J || (WLR089U0)
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    660a:	2380      	movs	r3, #128	; 0x80
    660c:	05db      	lsls	r3, r3, #23
    660e:	789b      	ldrb	r3, [r3, #2]
    6610:	b25b      	sxtb	r3, r3
    6612:	2b00      	cmp	r3, #0
    6614:	db09      	blt.n	662a <system_clock_init+0x52>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    6616:	2380      	movs	r3, #128	; 0x80
    6618:	05db      	lsls	r3, r3, #23
    661a:	2201      	movs	r2, #1
    661c:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    661e:	3201      	adds	r2, #1
    6620:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    6622:	001a      	movs	r2, r3
    6624:	7993      	ldrb	r3, [r2, #6]
    6626:	2b00      	cmp	r3, #0
    6628:	d0fc      	beq.n	6624 <system_clock_init+0x4c>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    662a:	a805      	add	r0, sp, #20
    662c:	2300      	movs	r3, #0
    662e:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    6630:	2280      	movs	r2, #128	; 0x80
    6632:	0212      	lsls	r2, r2, #8
    6634:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    6636:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    6638:	2201      	movs	r2, #1
    663a:	70c2      	strb	r2, [r0, #3]
	config->run_in_standby      = false;
    663c:	7203      	strb	r3, [r0, #8]
	config->write_once          = false;
    663e:	7283      	strb	r3, [r0, #10]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    6640:	3203      	adds	r2, #3
    6642:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    6644:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    6646:	4b42      	ldr	r3, [pc, #264]	; (6750 <system_clock_init+0x178>)
    6648:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    664a:	2005      	movs	r0, #5
    664c:	4b41      	ldr	r3, [pc, #260]	; (6754 <system_clock_init+0x17c>)
    664e:	4798      	blx	r3
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    6650:	4941      	ldr	r1, [pc, #260]	; (6758 <system_clock_init+0x180>)
    6652:	2201      	movs	r2, #1
    6654:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    6656:	421a      	tst	r2, r3
    6658:	d0fc      	beq.n	6654 <system_clock_init+0x7c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		OSC32KCTRL->XOSC32K.bit.ONDEMAND = 1;
    665a:	4a3f      	ldr	r2, [pc, #252]	; (6758 <system_clock_init+0x180>)
    665c:	6953      	ldr	r3, [r2, #20]
    665e:	2180      	movs	r1, #128	; 0x80
    6660:	430b      	orrs	r3, r1
    6662:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    6664:	a902      	add	r1, sp, #8
    6666:	2501      	movs	r5, #1
    6668:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    666a:	2400      	movs	r4, #0
    666c:	704c      	strb	r4, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    666e:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    6670:	724c      	strb	r4, [r1, #9]
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    6672:	2303      	movs	r3, #3
    6674:	700b      	strb	r3, [r1, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    6676:	2000      	movs	r0, #0
    6678:	4b38      	ldr	r3, [pc, #224]	; (675c <system_clock_init+0x184>)
    667a:	4798      	blx	r3
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    667c:	2006      	movs	r0, #6
    667e:	4b38      	ldr	r3, [pc, #224]	; (6760 <system_clock_init+0x188>)
    6680:	4798      	blx	r3
	config->run_in_standby  = false;
    6682:	a801      	add	r0, sp, #4
    6684:	7044      	strb	r4, [r0, #1]
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
    6686:	7005      	strb	r5, [r0, #0]
	osc16m_conf.on_demand       = 0;
    6688:	7084      	strb	r4, [r0, #2]
	system_clock_source_osc16m_set_config(&osc16m_conf);
    668a:	4b36      	ldr	r3, [pc, #216]	; (6764 <system_clock_init+0x18c>)
    668c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
    668e:	2006      	movs	r0, #6
    6690:	4b30      	ldr	r3, [pc, #192]	; (6754 <system_clock_init+0x17c>)
    6692:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    6694:	492b      	ldr	r1, [pc, #172]	; (6744 <system_clock_init+0x16c>)
    6696:	2210      	movs	r2, #16
    6698:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    669a:	421a      	tst	r2, r3
    669c:	d0fc      	beq.n	6698 <system_clock_init+0xc0>
	config->division_factor    = 1;
    669e:	ac02      	add	r4, sp, #8
    66a0:	2601      	movs	r6, #1
    66a2:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    66a4:	2500      	movs	r5, #0
    66a6:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    66a8:	2306      	movs	r3, #6
    66aa:	469a      	mov	sl, r3
    66ac:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    66ae:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    66b0:	7265      	strb	r5, [r4, #9]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    66b2:	0021      	movs	r1, r4
    66b4:	2000      	movs	r0, #0
    66b6:	4b29      	ldr	r3, [pc, #164]	; (675c <system_clock_init+0x184>)
    66b8:	4698      	mov	r8, r3
    66ba:	4798      	blx	r3
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    66bc:	4b2a      	ldr	r3, [pc, #168]	; (6768 <system_clock_init+0x190>)
    66be:	4798      	blx	r3
	config->division_factor    = 1;
    66c0:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    66c2:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    66c4:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    66c6:	2305      	movs	r3, #5
    66c8:	7023      	strb	r3, [r4, #0]
    66ca:	7226      	strb	r6, [r4, #8]
    66cc:	0021      	movs	r1, r4
    66ce:	2001      	movs	r0, #1
    66d0:	47c0      	blx	r8
    66d2:	2001      	movs	r0, #1
    66d4:	4b25      	ldr	r3, [pc, #148]	; (676c <system_clock_init+0x194>)
    66d6:	4699      	mov	r9, r3
    66d8:	4798      	blx	r3
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    66da:	4f25      	ldr	r7, [pc, #148]	; (6770 <system_clock_init+0x198>)
    66dc:	71be      	strb	r6, [r7, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    66de:	717e      	strb	r6, [r7, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    66e0:	713e      	strb	r6, [r7, #4]
	config->division_factor    = 1;
    66e2:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    66e4:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    66e6:	4653      	mov	r3, sl
    66e8:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    66ea:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    66ec:	7265      	strb	r5, [r4, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    66ee:	0021      	movs	r1, r4
    66f0:	2000      	movs	r0, #0
    66f2:	47c0      	blx	r8
    66f4:	2000      	movs	r0, #0
    66f6:	47c8      	blx	r9
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    66f8:	2000      	movs	r0, #0
    66fa:	4b1e      	ldr	r3, [pc, #120]	; (6774 <system_clock_init+0x19c>)
    66fc:	4798      	blx	r3
    66fe:	7939      	ldrb	r1, [r7, #4]
    6700:	b2c9      	uxtb	r1, r1
    6702:	4b1d      	ldr	r3, [pc, #116]	; (6778 <system_clock_init+0x1a0>)
    6704:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    6706:	4b1d      	ldr	r3, [pc, #116]	; (677c <system_clock_init+0x1a4>)
    6708:	4298      	cmp	r0, r3
    670a:	d814      	bhi.n	6736 <system_clock_init+0x15e>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    670c:	2380      	movs	r3, #128	; 0x80
    670e:	05db      	lsls	r3, r3, #23
    6710:	789b      	ldrb	r3, [r3, #2]
    6712:	2b00      	cmp	r3, #0
    6714:	d00f      	beq.n	6736 <system_clock_init+0x15e>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    6716:	2380      	movs	r3, #128	; 0x80
    6718:	05db      	lsls	r3, r3, #23
    671a:	789b      	ldrb	r3, [r3, #2]
    671c:	b25b      	sxtb	r3, r3
    671e:	2b00      	cmp	r3, #0
    6720:	db09      	blt.n	6736 <system_clock_init+0x15e>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    6722:	2380      	movs	r3, #128	; 0x80
    6724:	05db      	lsls	r3, r3, #23
    6726:	2201      	movs	r2, #1
    6728:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    672a:	2200      	movs	r2, #0
    672c:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    672e:	001a      	movs	r2, r3
    6730:	7993      	ldrb	r3, [r2, #6]
    6732:	2b00      	cmp	r3, #0
    6734:	d0fc      	beq.n	6730 <system_clock_init+0x158>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    6736:	b008      	add	sp, #32
    6738:	bc1c      	pop	{r2, r3, r4}
    673a:	4690      	mov	r8, r2
    673c:	4699      	mov	r9, r3
    673e:	46a2      	mov	sl, r4
    6740:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6742:	46c0      	nop			; (mov r8, r8)
    6744:	40000c00 	.word	0x40000c00
    6748:	40001400 	.word	0x40001400
    674c:	41004000 	.word	0x41004000
    6750:	00006401 	.word	0x00006401
    6754:	0000649d 	.word	0x0000649d
    6758:	40001000 	.word	0x40001000
    675c:	000067a5 	.word	0x000067a5
    6760:	00006559 	.word	0x00006559
    6764:	000063cd 	.word	0x000063cd
    6768:	00006781 	.word	0x00006781
    676c:	00006851 	.word	0x00006851
    6770:	40000400 	.word	0x40000400
    6774:	00006891 	.word	0x00006891
    6778:	00012edd 	.word	0x00012edd
    677c:	00b71b00 	.word	0x00b71b00

00006780 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    6780:	4a06      	ldr	r2, [pc, #24]	; (679c <system_gclk_init+0x1c>)
    6782:	6953      	ldr	r3, [r2, #20]
    6784:	2140      	movs	r1, #64	; 0x40
    6786:	430b      	orrs	r3, r1
    6788:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    678a:	2201      	movs	r2, #1
    678c:	4b04      	ldr	r3, [pc, #16]	; (67a0 <system_gclk_init+0x20>)
    678e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    6790:	0019      	movs	r1, r3
    6792:	780b      	ldrb	r3, [r1, #0]
    6794:	4213      	tst	r3, r2
    6796:	d1fc      	bne.n	6792 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    6798:	4770      	bx	lr
    679a:	46c0      	nop			; (mov r8, r8)
    679c:	40000400 	.word	0x40000400
    67a0:	40001800 	.word	0x40001800

000067a4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    67a4:	b570      	push	{r4, r5, r6, lr}
    67a6:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    67a8:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    67aa:	784b      	ldrb	r3, [r1, #1]
    67ac:	2b00      	cmp	r3, #0
    67ae:	d002      	beq.n	67b6 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    67b0:	2380      	movs	r3, #128	; 0x80
    67b2:	00db      	lsls	r3, r3, #3
    67b4:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    67b6:	7a4b      	ldrb	r3, [r1, #9]
    67b8:	2b00      	cmp	r3, #0
    67ba:	d002      	beq.n	67c2 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    67bc:	2380      	movs	r3, #128	; 0x80
    67be:	011b      	lsls	r3, r3, #4
    67c0:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    67c2:	6848      	ldr	r0, [r1, #4]
    67c4:	2801      	cmp	r0, #1
    67c6:	d90f      	bls.n	67e8 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    67c8:	1e43      	subs	r3, r0, #1
    67ca:	4218      	tst	r0, r3
    67cc:	d131      	bne.n	6832 <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    67ce:	2802      	cmp	r0, #2
    67d0:	d92d      	bls.n	682e <system_gclk_gen_set_config+0x8a>
    67d2:	2302      	movs	r3, #2
    67d4:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    67d6:	3201      	adds	r2, #1
						mask <<= 1) {
    67d8:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    67da:	4298      	cmp	r0, r3
    67dc:	d8fb      	bhi.n	67d6 <system_gclk_gen_set_config+0x32>
    67de:	2380      	movs	r3, #128	; 0x80
    67e0:	015b      	lsls	r3, r3, #5
    67e2:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    67e4:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    67e6:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    67e8:	7a0b      	ldrb	r3, [r1, #8]
    67ea:	2b00      	cmp	r3, #0
    67ec:	d002      	beq.n	67f4 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    67ee:	2380      	movs	r3, #128	; 0x80
    67f0:	019b      	lsls	r3, r3, #6
    67f2:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    67f4:	2604      	movs	r6, #4
    67f6:	40a6      	lsls	r6, r4
    67f8:	4911      	ldr	r1, [pc, #68]	; (6840 <system_gclk_gen_set_config+0x9c>)
    67fa:	4a12      	ldr	r2, [pc, #72]	; (6844 <system_gclk_gen_set_config+0xa0>)
    67fc:	684b      	ldr	r3, [r1, #4]
    67fe:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    6800:	421e      	tst	r6, r3
    6802:	d1fb      	bne.n	67fc <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    6804:	4b10      	ldr	r3, [pc, #64]	; (6848 <system_gclk_gen_set_config+0xa4>)
    6806:	4798      	blx	r3
    6808:	00a4      	lsls	r4, r4, #2
    680a:	4b0d      	ldr	r3, [pc, #52]	; (6840 <system_gclk_gen_set_config+0x9c>)
    680c:	469c      	mov	ip, r3
    680e:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    6810:	6a22      	ldr	r2, [r4, #32]
    6812:	2380      	movs	r3, #128	; 0x80
    6814:	005b      	lsls	r3, r3, #1
    6816:	401a      	ands	r2, r3
    6818:	432a      	orrs	r2, r5
    681a:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    681c:	4661      	mov	r1, ip
    681e:	4a09      	ldr	r2, [pc, #36]	; (6844 <system_gclk_gen_set_config+0xa0>)
    6820:	684b      	ldr	r3, [r1, #4]
    6822:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    6824:	421e      	tst	r6, r3
    6826:	d1fb      	bne.n	6820 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    6828:	4b08      	ldr	r3, [pc, #32]	; (684c <system_gclk_gen_set_config+0xa8>)
    682a:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    682c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    682e:	2200      	movs	r2, #0
    6830:	e7d5      	b.n	67de <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    6832:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    6834:	2380      	movs	r3, #128	; 0x80
    6836:	009b      	lsls	r3, r3, #2
    6838:	4318      	orrs	r0, r3
    683a:	4305      	orrs	r5, r0
    683c:	e7d4      	b.n	67e8 <system_gclk_gen_set_config+0x44>
    683e:	46c0      	nop			; (mov r8, r8)
    6840:	40001800 	.word	0x40001800
    6844:	000007fc 	.word	0x000007fc
    6848:	000044f9 	.word	0x000044f9
    684c:	00004539 	.word	0x00004539

00006850 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    6850:	b510      	push	{r4, lr}
    6852:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    6854:	2204      	movs	r2, #4
    6856:	4082      	lsls	r2, r0
    6858:	4809      	ldr	r0, [pc, #36]	; (6880 <system_gclk_gen_enable+0x30>)
    685a:	490a      	ldr	r1, [pc, #40]	; (6884 <system_gclk_gen_enable+0x34>)
    685c:	6843      	ldr	r3, [r0, #4]
    685e:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    6860:	421a      	tst	r2, r3
    6862:	d1fb      	bne.n	685c <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    6864:	4b08      	ldr	r3, [pc, #32]	; (6888 <system_gclk_gen_enable+0x38>)
    6866:	4798      	blx	r3
    6868:	00a4      	lsls	r4, r4, #2
    686a:	4b05      	ldr	r3, [pc, #20]	; (6880 <system_gclk_gen_enable+0x30>)
    686c:	469c      	mov	ip, r3
    686e:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    6870:	6a22      	ldr	r2, [r4, #32]
    6872:	2380      	movs	r3, #128	; 0x80
    6874:	005b      	lsls	r3, r3, #1
    6876:	4313      	orrs	r3, r2
    6878:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    687a:	4b04      	ldr	r3, [pc, #16]	; (688c <system_gclk_gen_enable+0x3c>)
    687c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    687e:	bd10      	pop	{r4, pc}
    6880:	40001800 	.word	0x40001800
    6884:	000007fc 	.word	0x000007fc
    6888:	000044f9 	.word	0x000044f9
    688c:	00004539 	.word	0x00004539

00006890 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    6890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6892:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    6894:	2204      	movs	r2, #4
    6896:	4082      	lsls	r2, r0
    6898:	4812      	ldr	r0, [pc, #72]	; (68e4 <system_gclk_gen_get_hz+0x54>)
    689a:	4913      	ldr	r1, [pc, #76]	; (68e8 <system_gclk_gen_get_hz+0x58>)
    689c:	6843      	ldr	r3, [r0, #4]
    689e:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    68a0:	421a      	tst	r2, r3
    68a2:	d1fb      	bne.n	689c <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    68a4:	4b11      	ldr	r3, [pc, #68]	; (68ec <system_gclk_gen_get_hz+0x5c>)
    68a6:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    68a8:	4f0e      	ldr	r7, [pc, #56]	; (68e4 <system_gclk_gen_get_hz+0x54>)
    68aa:	3408      	adds	r4, #8
    68ac:	00a4      	lsls	r4, r4, #2
    68ae:	59e0      	ldr	r0, [r4, r7]
    68b0:	0700      	lsls	r0, r0, #28
    68b2:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
    68b4:	4b0e      	ldr	r3, [pc, #56]	; (68f0 <system_gclk_gen_get_hz+0x60>)
    68b6:	4798      	blx	r3
    68b8:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    68ba:	59e5      	ldr	r5, [r4, r7]
    68bc:	04ed      	lsls	r5, r5, #19
    68be:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    68c0:	59e4      	ldr	r4, [r4, r7]
    68c2:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    68c4:	4b0b      	ldr	r3, [pc, #44]	; (68f4 <system_gclk_gen_get_hz+0x64>)
    68c6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    68c8:	2d00      	cmp	r5, #0
    68ca:	d107      	bne.n	68dc <system_gclk_gen_get_hz+0x4c>
    68cc:	2c01      	cmp	r4, #1
    68ce:	d907      	bls.n	68e0 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    68d0:	0021      	movs	r1, r4
    68d2:	0030      	movs	r0, r6
    68d4:	4b08      	ldr	r3, [pc, #32]	; (68f8 <system_gclk_gen_get_hz+0x68>)
    68d6:	4798      	blx	r3
    68d8:	0006      	movs	r6, r0
    68da:	e001      	b.n	68e0 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    68dc:	3401      	adds	r4, #1
    68de:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    68e0:	0030      	movs	r0, r6
    68e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    68e4:	40001800 	.word	0x40001800
    68e8:	000007fc 	.word	0x000007fc
    68ec:	000044f9 	.word	0x000044f9
    68f0:	00006339 	.word	0x00006339
    68f4:	00004539 	.word	0x00004539
    68f8:	00012edd 	.word	0x00012edd

000068fc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    68fc:	b510      	push	{r4, lr}
    68fe:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    6900:	4b09      	ldr	r3, [pc, #36]	; (6928 <system_gclk_chan_enable+0x2c>)
    6902:	4798      	blx	r3
    6904:	00a0      	lsls	r0, r4, #2
    6906:	4b09      	ldr	r3, [pc, #36]	; (692c <system_gclk_chan_enable+0x30>)
    6908:	469c      	mov	ip, r3
    690a:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    690c:	2280      	movs	r2, #128	; 0x80
    690e:	5883      	ldr	r3, [r0, r2]
    6910:	2140      	movs	r1, #64	; 0x40
    6912:	430b      	orrs	r3, r1
    6914:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    6916:	3140      	adds	r1, #64	; 0x40
    6918:	3a40      	subs	r2, #64	; 0x40
    691a:	5843      	ldr	r3, [r0, r1]
    691c:	421a      	tst	r2, r3
    691e:	d0fc      	beq.n	691a <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    6920:	4b03      	ldr	r3, [pc, #12]	; (6930 <system_gclk_chan_enable+0x34>)
    6922:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    6924:	bd10      	pop	{r4, pc}
    6926:	46c0      	nop			; (mov r8, r8)
    6928:	000044f9 	.word	0x000044f9
    692c:	40001800 	.word	0x40001800
    6930:	00004539 	.word	0x00004539

00006934 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    6934:	b510      	push	{r4, lr}
    6936:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    6938:	4b09      	ldr	r3, [pc, #36]	; (6960 <system_gclk_chan_disable+0x2c>)
    693a:	4798      	blx	r3
    693c:	00a0      	lsls	r0, r4, #2
    693e:	4b09      	ldr	r3, [pc, #36]	; (6964 <system_gclk_chan_disable+0x30>)
    6940:	469c      	mov	ip, r3
    6942:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    6944:	2280      	movs	r2, #128	; 0x80
    6946:	5883      	ldr	r3, [r0, r2]
    6948:	2140      	movs	r1, #64	; 0x40
    694a:	438b      	bics	r3, r1
    694c:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    694e:	3140      	adds	r1, #64	; 0x40
    6950:	3a40      	subs	r2, #64	; 0x40
    6952:	5843      	ldr	r3, [r0, r1]
    6954:	421a      	tst	r2, r3
    6956:	d1fc      	bne.n	6952 <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    6958:	4b03      	ldr	r3, [pc, #12]	; (6968 <system_gclk_chan_disable+0x34>)
    695a:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    695c:	bd10      	pop	{r4, pc}
    695e:	46c0      	nop			; (mov r8, r8)
    6960:	000044f9 	.word	0x000044f9
    6964:	40001800 	.word	0x40001800
    6968:	00004539 	.word	0x00004539

0000696c <system_gclk_chan_set_config>:
{
    696c:	b570      	push	{r4, r5, r6, lr}
    696e:	0004      	movs	r4, r0
    6970:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    6972:	4b05      	ldr	r3, [pc, #20]	; (6988 <system_gclk_chan_set_config+0x1c>)
    6974:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    6976:	782a      	ldrb	r2, [r5, #0]
    6978:	230f      	movs	r3, #15
    697a:	4013      	ands	r3, r2
    697c:	3420      	adds	r4, #32
    697e:	00a4      	lsls	r4, r4, #2
    6980:	4a02      	ldr	r2, [pc, #8]	; (698c <system_gclk_chan_set_config+0x20>)
    6982:	50a3      	str	r3, [r4, r2]
}
    6984:	bd70      	pop	{r4, r5, r6, pc}
    6986:	46c0      	nop			; (mov r8, r8)
    6988:	00006935 	.word	0x00006935
    698c:	40001800 	.word	0x40001800

00006990 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    6990:	b510      	push	{r4, lr}
    6992:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    6994:	4b06      	ldr	r3, [pc, #24]	; (69b0 <system_gclk_chan_get_hz+0x20>)
    6996:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    6998:	3420      	adds	r4, #32
    699a:	00a4      	lsls	r4, r4, #2
    699c:	4b05      	ldr	r3, [pc, #20]	; (69b4 <system_gclk_chan_get_hz+0x24>)
    699e:	58e4      	ldr	r4, [r4, r3]
    69a0:	0724      	lsls	r4, r4, #28
    69a2:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    69a4:	4b04      	ldr	r3, [pc, #16]	; (69b8 <system_gclk_chan_get_hz+0x28>)
    69a6:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    69a8:	0020      	movs	r0, r4
    69aa:	4b04      	ldr	r3, [pc, #16]	; (69bc <system_gclk_chan_get_hz+0x2c>)
    69ac:	4798      	blx	r3
}
    69ae:	bd10      	pop	{r4, pc}
    69b0:	000044f9 	.word	0x000044f9
    69b4:	40001800 	.word	0x40001800
    69b8:	00004539 	.word	0x00004539
    69bc:	00006891 	.word	0x00006891

000069c0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    69c0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    69c2:	78d3      	ldrb	r3, [r2, #3]
    69c4:	2b00      	cmp	r3, #0
    69c6:	d135      	bne.n	6a34 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    69c8:	7813      	ldrb	r3, [r2, #0]
    69ca:	2b80      	cmp	r3, #128	; 0x80
    69cc:	d029      	beq.n	6a22 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    69ce:	061b      	lsls	r3, r3, #24
    69d0:	2480      	movs	r4, #128	; 0x80
    69d2:	0264      	lsls	r4, r4, #9
    69d4:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    69d6:	7854      	ldrb	r4, [r2, #1]
    69d8:	2502      	movs	r5, #2
    69da:	43ac      	bics	r4, r5
    69dc:	d106      	bne.n	69ec <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    69de:	7894      	ldrb	r4, [r2, #2]
    69e0:	2c00      	cmp	r4, #0
    69e2:	d120      	bne.n	6a26 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    69e4:	2480      	movs	r4, #128	; 0x80
    69e6:	02a4      	lsls	r4, r4, #10
    69e8:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    69ea:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    69ec:	7854      	ldrb	r4, [r2, #1]
    69ee:	3c01      	subs	r4, #1
    69f0:	2c01      	cmp	r4, #1
    69f2:	d91c      	bls.n	6a2e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    69f4:	040d      	lsls	r5, r1, #16
    69f6:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    69f8:	24a0      	movs	r4, #160	; 0xa0
    69fa:	05e4      	lsls	r4, r4, #23
    69fc:	432c      	orrs	r4, r5
    69fe:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6a00:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    6a02:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6a04:	24d0      	movs	r4, #208	; 0xd0
    6a06:	0624      	lsls	r4, r4, #24
    6a08:	432c      	orrs	r4, r5
    6a0a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6a0c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    6a0e:	78d4      	ldrb	r4, [r2, #3]
    6a10:	2c00      	cmp	r4, #0
    6a12:	d122      	bne.n	6a5a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    6a14:	035b      	lsls	r3, r3, #13
    6a16:	d51c      	bpl.n	6a52 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    6a18:	7893      	ldrb	r3, [r2, #2]
    6a1a:	2b01      	cmp	r3, #1
    6a1c:	d01e      	beq.n	6a5c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    6a1e:	6141      	str	r1, [r0, #20]
    6a20:	e017      	b.n	6a52 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    6a22:	2300      	movs	r3, #0
    6a24:	e7d7      	b.n	69d6 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    6a26:	24c0      	movs	r4, #192	; 0xc0
    6a28:	02e4      	lsls	r4, r4, #11
    6a2a:	4323      	orrs	r3, r4
    6a2c:	e7dd      	b.n	69ea <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    6a2e:	4c0d      	ldr	r4, [pc, #52]	; (6a64 <_system_pinmux_config+0xa4>)
    6a30:	4023      	ands	r3, r4
    6a32:	e7df      	b.n	69f4 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    6a34:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6a36:	040c      	lsls	r4, r1, #16
    6a38:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6a3a:	23a0      	movs	r3, #160	; 0xa0
    6a3c:	05db      	lsls	r3, r3, #23
    6a3e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6a40:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    6a42:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6a44:	23d0      	movs	r3, #208	; 0xd0
    6a46:	061b      	lsls	r3, r3, #24
    6a48:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6a4a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    6a4c:	78d3      	ldrb	r3, [r2, #3]
    6a4e:	2b00      	cmp	r3, #0
    6a50:	d103      	bne.n	6a5a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6a52:	7853      	ldrb	r3, [r2, #1]
    6a54:	3b01      	subs	r3, #1
    6a56:	2b01      	cmp	r3, #1
    6a58:	d902      	bls.n	6a60 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    6a5a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    6a5c:	6181      	str	r1, [r0, #24]
    6a5e:	e7f8      	b.n	6a52 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    6a60:	6081      	str	r1, [r0, #8]
}
    6a62:	e7fa      	b.n	6a5a <_system_pinmux_config+0x9a>
    6a64:	fffbffff 	.word	0xfffbffff

00006a68 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    6a68:	b510      	push	{r4, lr}
    6a6a:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    6a6c:	09c1      	lsrs	r1, r0, #7
		return NULL;
    6a6e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    6a70:	2900      	cmp	r1, #0
    6a72:	d104      	bne.n	6a7e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    6a74:	0943      	lsrs	r3, r0, #5
    6a76:	01db      	lsls	r3, r3, #7
    6a78:	4905      	ldr	r1, [pc, #20]	; (6a90 <system_pinmux_pin_set_config+0x28>)
    6a7a:	468c      	mov	ip, r1
    6a7c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    6a7e:	241f      	movs	r4, #31
    6a80:	4020      	ands	r0, r4
    6a82:	2101      	movs	r1, #1
    6a84:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    6a86:	0018      	movs	r0, r3
    6a88:	4b02      	ldr	r3, [pc, #8]	; (6a94 <system_pinmux_pin_set_config+0x2c>)
    6a8a:	4798      	blx	r3
}
    6a8c:	bd10      	pop	{r4, pc}
    6a8e:	46c0      	nop			; (mov r8, r8)
    6a90:	40002800 	.word	0x40002800
    6a94:	000069c1 	.word	0x000069c1

00006a98 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    6a98:	4770      	bx	lr
    6a9a:	Address 0x00006a9a is out of bounds.


00006a9c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6a9c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    6a9e:	4b05      	ldr	r3, [pc, #20]	; (6ab4 <system_init+0x18>)
    6aa0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    6aa2:	4b05      	ldr	r3, [pc, #20]	; (6ab8 <system_init+0x1c>)
    6aa4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    6aa6:	4b05      	ldr	r3, [pc, #20]	; (6abc <system_init+0x20>)
    6aa8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    6aaa:	4b05      	ldr	r3, [pc, #20]	; (6ac0 <system_init+0x24>)
    6aac:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    6aae:	4b05      	ldr	r3, [pc, #20]	; (6ac4 <system_init+0x28>)
    6ab0:	4798      	blx	r3
}
    6ab2:	bd10      	pop	{r4, pc}
    6ab4:	000065d9 	.word	0x000065d9
    6ab8:	00004569 	.word	0x00004569
    6abc:	00006a99 	.word	0x00006a99
    6ac0:	00004895 	.word	0x00004895
    6ac4:	00006a99 	.word	0x00006a99

00006ac8 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    6ac8:	1c93      	adds	r3, r2, #2
    6aca:	009b      	lsls	r3, r3, #2
    6acc:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    6ace:	2a02      	cmp	r2, #2
    6ad0:	d009      	beq.n	6ae6 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    6ad2:	2a03      	cmp	r2, #3
    6ad4:	d00c      	beq.n	6af0 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    6ad6:	2301      	movs	r3, #1
    6ad8:	4093      	lsls	r3, r2
    6ada:	001a      	movs	r2, r3
    6adc:	7e03      	ldrb	r3, [r0, #24]
    6ade:	4313      	orrs	r3, r2
    6ae0:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    6ae2:	2000      	movs	r0, #0
    6ae4:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    6ae6:	7e03      	ldrb	r3, [r0, #24]
    6ae8:	2210      	movs	r2, #16
    6aea:	4313      	orrs	r3, r2
    6aec:	7603      	strb	r3, [r0, #24]
    6aee:	e7f8      	b.n	6ae2 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    6af0:	7e03      	ldrb	r3, [r0, #24]
    6af2:	2220      	movs	r2, #32
    6af4:	4313      	orrs	r3, r2
    6af6:	7603      	strb	r3, [r0, #24]
    6af8:	e7f3      	b.n	6ae2 <tc_register_callback+0x1a>
    6afa:	Address 0x00006afa is out of bounds.


00006afc <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    6afc:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    6afe:	0080      	lsls	r0, r0, #2
    6b00:	4b16      	ldr	r3, [pc, #88]	; (6b5c <_tc_interrupt_handler+0x60>)
    6b02:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    6b04:	6823      	ldr	r3, [r4, #0]
    6b06:	7a9d      	ldrb	r5, [r3, #10]
    6b08:	7e22      	ldrb	r2, [r4, #24]
    6b0a:	7e63      	ldrb	r3, [r4, #25]
    6b0c:	4013      	ands	r3, r2
    6b0e:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    6b10:	07eb      	lsls	r3, r5, #31
    6b12:	d406      	bmi.n	6b22 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    6b14:	07ab      	lsls	r3, r5, #30
    6b16:	d40b      	bmi.n	6b30 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    6b18:	06eb      	lsls	r3, r5, #27
    6b1a:	d410      	bmi.n	6b3e <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    6b1c:	06ab      	lsls	r3, r5, #26
    6b1e:	d415      	bmi.n	6b4c <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    6b20:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    6b22:	0020      	movs	r0, r4
    6b24:	68a3      	ldr	r3, [r4, #8]
    6b26:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    6b28:	2301      	movs	r3, #1
    6b2a:	6822      	ldr	r2, [r4, #0]
    6b2c:	7293      	strb	r3, [r2, #10]
    6b2e:	e7f1      	b.n	6b14 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    6b30:	0020      	movs	r0, r4
    6b32:	68e3      	ldr	r3, [r4, #12]
    6b34:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    6b36:	2302      	movs	r3, #2
    6b38:	6822      	ldr	r2, [r4, #0]
    6b3a:	7293      	strb	r3, [r2, #10]
    6b3c:	e7ec      	b.n	6b18 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    6b3e:	0020      	movs	r0, r4
    6b40:	6923      	ldr	r3, [r4, #16]
    6b42:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    6b44:	2310      	movs	r3, #16
    6b46:	6822      	ldr	r2, [r4, #0]
    6b48:	7293      	strb	r3, [r2, #10]
    6b4a:	e7e7      	b.n	6b1c <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    6b4c:	0020      	movs	r0, r4
    6b4e:	6963      	ldr	r3, [r4, #20]
    6b50:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    6b52:	6823      	ldr	r3, [r4, #0]
    6b54:	2220      	movs	r2, #32
    6b56:	729a      	strb	r2, [r3, #10]
}
    6b58:	e7e2      	b.n	6b20 <_tc_interrupt_handler+0x24>
    6b5a:	46c0      	nop			; (mov r8, r8)
    6b5c:	20001f2c 	.word	0x20001f2c

00006b60 <TC0_Handler>:
	_TC_INTERRUPT_HANDLER(0,0)
    6b60:	b510      	push	{r4, lr}
    6b62:	2000      	movs	r0, #0
    6b64:	4b01      	ldr	r3, [pc, #4]	; (6b6c <TC0_Handler+0xc>)
    6b66:	4798      	blx	r3
    6b68:	bd10      	pop	{r4, pc}
    6b6a:	46c0      	nop			; (mov r8, r8)
    6b6c:	00006afd 	.word	0x00006afd

00006b70 <TC1_Handler>:
	_TC_INTERRUPT_HANDLER(1,1)
    6b70:	b510      	push	{r4, lr}
    6b72:	2001      	movs	r0, #1
    6b74:	4b01      	ldr	r3, [pc, #4]	; (6b7c <TC1_Handler+0xc>)
    6b76:	4798      	blx	r3
    6b78:	bd10      	pop	{r4, pc}
    6b7a:	46c0      	nop			; (mov r8, r8)
    6b7c:	00006afd 	.word	0x00006afd

00006b80 <TC4_Handler>:
	_TC_INTERRUPT_HANDLER(4,2)
    6b80:	b510      	push	{r4, lr}
    6b82:	2002      	movs	r0, #2
    6b84:	4b01      	ldr	r3, [pc, #4]	; (6b8c <TC4_Handler+0xc>)
    6b86:	4798      	blx	r3
    6b88:	bd10      	pop	{r4, pc}
    6b8a:	46c0      	nop			; (mov r8, r8)
    6b8c:	00006afd 	.word	0x00006afd

00006b90 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    6b90:	b530      	push	{r4, r5, lr}
    6b92:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    6b94:	a901      	add	r1, sp, #4
    6b96:	4b0c      	ldr	r3, [pc, #48]	; (6bc8 <_tc_get_inst_index+0x38>)
    6b98:	000a      	movs	r2, r1
    6b9a:	cb32      	ldmia	r3!, {r1, r4, r5}
    6b9c:	c232      	stmia	r2!, {r1, r4, r5}
    6b9e:	cb12      	ldmia	r3!, {r1, r4}
    6ba0:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    6ba2:	9b01      	ldr	r3, [sp, #4]
    6ba4:	4298      	cmp	r0, r3
    6ba6:	d00b      	beq.n	6bc0 <_tc_get_inst_index+0x30>
    6ba8:	2301      	movs	r3, #1
    6baa:	a901      	add	r1, sp, #4
    6bac:	009a      	lsls	r2, r3, #2
    6bae:	5852      	ldr	r2, [r2, r1]
    6bb0:	4282      	cmp	r2, r0
    6bb2:	d006      	beq.n	6bc2 <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    6bb4:	3301      	adds	r3, #1
    6bb6:	2b05      	cmp	r3, #5
    6bb8:	d1f8      	bne.n	6bac <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    6bba:	2000      	movs	r0, #0
}
    6bbc:	b007      	add	sp, #28
    6bbe:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    6bc0:	2300      	movs	r3, #0
			return i;
    6bc2:	b2d8      	uxtb	r0, r3
    6bc4:	e7fa      	b.n	6bbc <_tc_get_inst_index+0x2c>
    6bc6:	46c0      	nop			; (mov r8, r8)
    6bc8:	000175e8 	.word	0x000175e8

00006bcc <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    6bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    6bce:	46c6      	mov	lr, r8
    6bd0:	b500      	push	{lr}
    6bd2:	b08e      	sub	sp, #56	; 0x38
    6bd4:	0004      	movs	r4, r0
    6bd6:	000d      	movs	r5, r1
    6bd8:	0016      	movs	r6, r2
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    6bda:	0008      	movs	r0, r1
    6bdc:	4bae      	ldr	r3, [pc, #696]	; (6e98 <tc_init+0x2cc>)
    6bde:	4798      	blx	r3
    6be0:	4680      	mov	r8, r0
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC4};
#elif (SAML21J) || (SAMR34J) || (SAMR35J) || (WLR089U0)
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC2_GCLK_ID, TC3_GCLK_ID, TC4_GCLK_ID};
    6be2:	ab0c      	add	r3, sp, #48	; 0x30
    6be4:	221b      	movs	r2, #27
    6be6:	701a      	strb	r2, [r3, #0]
    6be8:	705a      	strb	r2, [r3, #1]
    6bea:	3201      	adds	r2, #1
    6bec:	709a      	strb	r2, [r3, #2]
    6bee:	70da      	strb	r2, [r3, #3]
    6bf0:	3201      	adds	r2, #1
    6bf2:	711a      	strb	r2, [r3, #4]
	/* Array of MCLK APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    6bf4:	a902      	add	r1, sp, #8
    6bf6:	4ba9      	ldr	r3, [pc, #676]	; (6e9c <tc_init+0x2d0>)
    6bf8:	3314      	adds	r3, #20
    6bfa:	000a      	movs	r2, r1
    6bfc:	cb83      	ldmia	r3!, {r0, r1, r7}
    6bfe:	c283      	stmia	r2!, {r0, r1, r7}
    6c00:	cb83      	ldmia	r3!, {r0, r1, r7}
    6c02:	c283      	stmia	r2!, {r0, r1, r7}
    6c04:	cb83      	ldmia	r3!, {r0, r1, r7}
    6c06:	c283      	stmia	r2!, {r0, r1, r7}
    6c08:	681b      	ldr	r3, [r3, #0]
    6c0a:	6013      	str	r3, [r2, #0]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    6c0c:	2300      	movs	r3, #0
    6c0e:	60a3      	str	r3, [r4, #8]
    6c10:	60e3      	str	r3, [r4, #12]
    6c12:	6123      	str	r3, [r4, #16]
    6c14:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    6c16:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    6c18:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    6c1a:	4643      	mov	r3, r8
    6c1c:	009a      	lsls	r2, r3, #2
    6c1e:	4ba0      	ldr	r3, [pc, #640]	; (6ea0 <tc_init+0x2d4>)
    6c20:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    6c22:	6025      	str	r5, [r4, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    6c24:	2334      	movs	r3, #52	; 0x34
    6c26:	5cf3      	ldrb	r3, [r6, r3]
    6c28:	76a3      	strb	r3, [r4, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    6c2a:	78f3      	ldrb	r3, [r6, #3]
    6c2c:	2b08      	cmp	r3, #8
    6c2e:	d008      	beq.n	6c42 <tc_init+0x76>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    6c30:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    6c32:	682b      	ldr	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    6c34:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    6c36:	07db      	lsls	r3, r3, #31
    6c38:	d508      	bpl.n	6c4c <tc_init+0x80>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    6c3a:	b00e      	add	sp, #56	; 0x38
    6c3c:	bc04      	pop	{r2}
    6c3e:	4690      	mov	r8, r2
    6c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    6c42:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    6c44:	4642      	mov	r2, r8
    6c46:	07d2      	lsls	r2, r2, #31
    6c48:	d4f7      	bmi.n	6c3a <tc_init+0x6e>
    6c4a:	e7f1      	b.n	6c30 <tc_init+0x64>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    6c4c:	7aeb      	ldrb	r3, [r5, #11]
		return STATUS_ERR_DENIED;
    6c4e:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    6c50:	079b      	lsls	r3, r3, #30
    6c52:	d4f2      	bmi.n	6c3a <tc_init+0x6e>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    6c54:	682b      	ldr	r3, [r5, #0]
    6c56:	079b      	lsls	r3, r3, #30
    6c58:	d4ef      	bmi.n	6c3a <tc_init+0x6e>
	if (config->pwm_channel[0].enabled) {
    6c5a:	7c33      	ldrb	r3, [r6, #16]
    6c5c:	2b00      	cmp	r3, #0
    6c5e:	d112      	bne.n	6c86 <tc_init+0xba>
	if (config->pwm_channel[1].enabled) {
    6c60:	7f33      	ldrb	r3, [r6, #28]
    6c62:	2b00      	cmp	r3, #0
    6c64:	d11b      	bne.n	6c9e <tc_init+0xd2>
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    6c66:	4643      	mov	r3, r8
    6c68:	005a      	lsls	r2, r3, #1
    6c6a:	a902      	add	r1, sp, #8
    6c6c:	1c53      	adds	r3, r2, #1
    6c6e:	009b      	lsls	r3, r3, #2
    6c70:	5858      	ldr	r0, [r3, r1]
    6c72:	4643      	mov	r3, r8
    6c74:	00db      	lsls	r3, r3, #3
    6c76:	585b      	ldr	r3, [r3, r1]
	switch (bus) {
    6c78:	b2d9      	uxtb	r1, r3
    6c7a:	2904      	cmp	r1, #4
    6c7c:	d823      	bhi.n	6cc6 <tc_init+0xfa>
    6c7e:	008b      	lsls	r3, r1, #2
    6c80:	4988      	ldr	r1, [pc, #544]	; (6ea4 <tc_init+0x2d8>)
    6c82:	58cb      	ldr	r3, [r1, r3]
    6c84:	469f      	mov	pc, r3
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6c86:	a901      	add	r1, sp, #4
    6c88:	2301      	movs	r3, #1
    6c8a:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    6c8c:	2200      	movs	r2, #0
    6c8e:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    6c90:	7e32      	ldrb	r2, [r6, #24]
    6c92:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    6c94:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    6c96:	7d30      	ldrb	r0, [r6, #20]
    6c98:	4b83      	ldr	r3, [pc, #524]	; (6ea8 <tc_init+0x2dc>)
    6c9a:	4798      	blx	r3
    6c9c:	e7e0      	b.n	6c60 <tc_init+0x94>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6c9e:	a901      	add	r1, sp, #4
    6ca0:	2301      	movs	r3, #1
    6ca2:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    6ca4:	2200      	movs	r2, #0
    6ca6:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    6ca8:	3224      	adds	r2, #36	; 0x24
    6caa:	18b2      	adds	r2, r6, r2
    6cac:	7812      	ldrb	r2, [r2, #0]
    6cae:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    6cb0:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    6cb2:	331f      	adds	r3, #31
    6cb4:	18f3      	adds	r3, r6, r3
    6cb6:	7818      	ldrb	r0, [r3, #0]
    6cb8:	4b7b      	ldr	r3, [pc, #492]	; (6ea8 <tc_init+0x2dc>)
    6cba:	4798      	blx	r3
    6cbc:	e7d3      	b.n	6c66 <tc_init+0x9a>
			MCLK->APBAMASK.reg |= mask;
    6cbe:	497b      	ldr	r1, [pc, #492]	; (6eac <tc_init+0x2e0>)
    6cc0:	694b      	ldr	r3, [r1, #20]
    6cc2:	4318      	orrs	r0, r3
    6cc4:	6148      	str	r0, [r1, #20]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    6cc6:	78f3      	ldrb	r3, [r6, #3]
    6cc8:	2b08      	cmp	r3, #8
    6cca:	d100      	bne.n	6cce <tc_init+0x102>
    6ccc:	e086      	b.n	6ddc <tc_init+0x210>
	gclk_chan_config.source_generator = config->clock_source;
    6cce:	7833      	ldrb	r3, [r6, #0]
    6cd0:	466a      	mov	r2, sp
    6cd2:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    6cd4:	ab0c      	add	r3, sp, #48	; 0x30
    6cd6:	4642      	mov	r2, r8
    6cd8:	5c9f      	ldrb	r7, [r3, r2]
    6cda:	4669      	mov	r1, sp
    6cdc:	0038      	movs	r0, r7
    6cde:	4b74      	ldr	r3, [pc, #464]	; (6eb0 <tc_init+0x2e4>)
    6ce0:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    6ce2:	0038      	movs	r0, r7
    6ce4:	4b73      	ldr	r3, [pc, #460]	; (6eb4 <tc_init+0x2e8>)
    6ce6:	4798      	blx	r3
			(uint32_t)config->counter_size |
    6ce8:	78f3      	ldrb	r3, [r6, #3]
    6cea:	79f2      	ldrb	r2, [r6, #7]
    6cec:	4313      	orrs	r3, r2
			(uint32_t)config->clock_prescaler;
    6cee:	88b2      	ldrh	r2, [r6, #4]
	ctrla_tmp =
    6cf0:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    6cf2:	7a72      	ldrb	r2, [r6, #9]
    6cf4:	2a00      	cmp	r2, #0
    6cf6:	d002      	beq.n	6cfe <tc_init+0x132>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    6cf8:	2280      	movs	r2, #128	; 0x80
    6cfa:	0252      	lsls	r2, r2, #9
    6cfc:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    6cfe:	7ab2      	ldrb	r2, [r6, #10]
    6d00:	2a00      	cmp	r2, #0
    6d02:	d002      	beq.n	6d0a <tc_init+0x13e>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    6d04:	2280      	movs	r2, #128	; 0x80
    6d06:	0292      	lsls	r2, r2, #10
    6d08:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    6d0a:	7af2      	ldrb	r2, [r6, #11]
    6d0c:	2a00      	cmp	r2, #0
    6d0e:	d002      	beq.n	6d16 <tc_init+0x14a>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    6d10:	2280      	movs	r2, #128	; 0x80
    6d12:	0352      	lsls	r2, r2, #13
    6d14:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    6d16:	7b32      	ldrb	r2, [r6, #12]
    6d18:	2a00      	cmp	r2, #0
    6d1a:	d002      	beq.n	6d22 <tc_init+0x156>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    6d1c:	2280      	movs	r2, #128	; 0x80
    6d1e:	0392      	lsls	r2, r2, #14
    6d20:	4313      	orrs	r3, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    6d22:	7871      	ldrb	r1, [r6, #1]
    6d24:	0189      	lsls	r1, r1, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    6d26:	78b2      	ldrb	r2, [r6, #2]
    6d28:	01d2      	lsls	r2, r2, #7
    6d2a:	4311      	orrs	r1, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    6d2c:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6d2e:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	return (tc_module->SYNCBUSY.reg);
    6d30:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    6d32:	2b00      	cmp	r3, #0
    6d34:	d1fc      	bne.n	6d30 <tc_init+0x164>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    6d36:	6029      	str	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6d38:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6d3a:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    6d3c:	2b00      	cmp	r3, #0
    6d3e:	d1fc      	bne.n	6d3a <tc_init+0x16e>
	hw->COUNT8.WAVE.reg = config->wave_generation;
    6d40:	79b3      	ldrb	r3, [r6, #6]
    6d42:	732b      	strb	r3, [r5, #12]
	if (config->oneshot) {
    6d44:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    6d46:	1e4b      	subs	r3, r1, #1
    6d48:	4199      	sbcs	r1, r3
    6d4a:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    6d4c:	7bb3      	ldrb	r3, [r6, #14]
    6d4e:	2b00      	cmp	r3, #0
    6d50:	d001      	beq.n	6d56 <tc_init+0x18a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    6d52:	2301      	movs	r3, #1
    6d54:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6d56:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6d58:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    6d5a:	2b00      	cmp	r3, #0
    6d5c:	d1fc      	bne.n	6d58 <tc_init+0x18c>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    6d5e:	33ff      	adds	r3, #255	; 0xff
    6d60:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    6d62:	2900      	cmp	r1, #0
    6d64:	d004      	beq.n	6d70 <tc_init+0x1a4>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6d66:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6d68:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
    6d6a:	2b00      	cmp	r3, #0
    6d6c:	d1fc      	bne.n	6d68 <tc_init+0x19c>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    6d6e:	7169      	strb	r1, [r5, #5]
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    6d70:	7a33      	ldrb	r3, [r6, #8]
    6d72:	736b      	strb	r3, [r5, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6d74:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6d76:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    6d78:	2b00      	cmp	r3, #0
    6d7a:	d1fc      	bne.n	6d76 <tc_init+0x1aa>
	switch (module_inst->counter_size) {
    6d7c:	7923      	ldrb	r3, [r4, #4]
    6d7e:	2b04      	cmp	r3, #4
    6d80:	d059      	beq.n	6e36 <tc_init+0x26a>
    6d82:	2b08      	cmp	r3, #8
    6d84:	d074      	beq.n	6e70 <tc_init+0x2a4>
	return STATUS_ERR_INVALID_ARG;
    6d86:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    6d88:	2b00      	cmp	r3, #0
    6d8a:	d000      	beq.n	6d8e <tc_init+0x1c2>
    6d8c:	e755      	b.n	6c3a <tc_init+0x6e>
    6d8e:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6d90:	2b00      	cmp	r3, #0
    6d92:	d1fc      	bne.n	6d8e <tc_init+0x1c2>
				= config->counter_16_bit.value;
    6d94:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    6d96:	82ab      	strh	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6d98:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6d9a:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6d9c:	2b00      	cmp	r3, #0
    6d9e:	d1fc      	bne.n	6d9a <tc_init+0x1ce>
					config->counter_16_bit.compare_capture_channel[0];
    6da0:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    6da2:	83ab      	strh	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6da4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6da6:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6da8:	2b00      	cmp	r3, #0
    6daa:	d1fc      	bne.n	6da6 <tc_init+0x1da>
					config->counter_16_bit.compare_capture_channel[1];
    6dac:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    6dae:	83eb      	strh	r3, [r5, #30]
			return STATUS_OK;
    6db0:	2000      	movs	r0, #0
    6db2:	e742      	b.n	6c3a <tc_init+0x6e>
			MCLK->APBBMASK.reg |= mask;
    6db4:	493d      	ldr	r1, [pc, #244]	; (6eac <tc_init+0x2e0>)
    6db6:	698b      	ldr	r3, [r1, #24]
    6db8:	4318      	orrs	r0, r3
    6dba:	6188      	str	r0, [r1, #24]
    6dbc:	e783      	b.n	6cc6 <tc_init+0xfa>
			MCLK->APBCMASK.reg |= mask;
    6dbe:	493b      	ldr	r1, [pc, #236]	; (6eac <tc_init+0x2e0>)
    6dc0:	69cb      	ldr	r3, [r1, #28]
    6dc2:	4318      	orrs	r0, r3
    6dc4:	61c8      	str	r0, [r1, #28]
    6dc6:	e77e      	b.n	6cc6 <tc_init+0xfa>
			MCLK->APBDMASK.reg |= mask;
    6dc8:	4938      	ldr	r1, [pc, #224]	; (6eac <tc_init+0x2e0>)
    6dca:	6a0b      	ldr	r3, [r1, #32]
    6dcc:	4318      	orrs	r0, r3
    6dce:	6208      	str	r0, [r1, #32]
    6dd0:	e779      	b.n	6cc6 <tc_init+0xfa>
			MCLK->APBEMASK.reg |= mask;
    6dd2:	4b36      	ldr	r3, [pc, #216]	; (6eac <tc_init+0x2e0>)
    6dd4:	6a59      	ldr	r1, [r3, #36]	; 0x24
    6dd6:	4308      	orrs	r0, r1
    6dd8:	6258      	str	r0, [r3, #36]	; 0x24
    6dda:	e774      	b.n	6cc6 <tc_init+0xfa>
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    6ddc:	4643      	mov	r3, r8
    6dde:	3301      	adds	r3, #1
    6de0:	2b04      	cmp	r3, #4
    6de2:	dd00      	ble.n	6de6 <tc_init+0x21a>
    6de4:	e773      	b.n	6cce <tc_init+0x102>
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    6de6:	ab02      	add	r3, sp, #8
    6de8:	1cd1      	adds	r1, r2, #3
    6dea:	0089      	lsls	r1, r1, #2
    6dec:	58c9      	ldr	r1, [r1, r3]
    6dee:	3202      	adds	r2, #2
    6df0:	0092      	lsls	r2, r2, #2
    6df2:	58d3      	ldr	r3, [r2, r3]
	switch (bus) {
    6df4:	b2da      	uxtb	r2, r3
    6df6:	2a04      	cmp	r2, #4
    6df8:	d900      	bls.n	6dfc <tc_init+0x230>
    6dfa:	e768      	b.n	6cce <tc_init+0x102>
    6dfc:	0093      	lsls	r3, r2, #2
    6dfe:	4a2e      	ldr	r2, [pc, #184]	; (6eb8 <tc_init+0x2ec>)
    6e00:	58d3      	ldr	r3, [r2, r3]
    6e02:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    6e04:	4a29      	ldr	r2, [pc, #164]	; (6eac <tc_init+0x2e0>)
    6e06:	6953      	ldr	r3, [r2, #20]
    6e08:	4319      	orrs	r1, r3
    6e0a:	6151      	str	r1, [r2, #20]
    6e0c:	e75f      	b.n	6cce <tc_init+0x102>
			MCLK->APBBMASK.reg |= mask;
    6e0e:	4a27      	ldr	r2, [pc, #156]	; (6eac <tc_init+0x2e0>)
    6e10:	6993      	ldr	r3, [r2, #24]
    6e12:	4319      	orrs	r1, r3
    6e14:	6191      	str	r1, [r2, #24]
    6e16:	e75a      	b.n	6cce <tc_init+0x102>
			MCLK->APBCMASK.reg |= mask;
    6e18:	4a24      	ldr	r2, [pc, #144]	; (6eac <tc_init+0x2e0>)
    6e1a:	69d3      	ldr	r3, [r2, #28]
    6e1c:	4319      	orrs	r1, r3
    6e1e:	61d1      	str	r1, [r2, #28]
    6e20:	e755      	b.n	6cce <tc_init+0x102>
			MCLK->APBDMASK.reg |= mask;
    6e22:	4a22      	ldr	r2, [pc, #136]	; (6eac <tc_init+0x2e0>)
    6e24:	6a13      	ldr	r3, [r2, #32]
    6e26:	4319      	orrs	r1, r3
    6e28:	6211      	str	r1, [r2, #32]
    6e2a:	e750      	b.n	6cce <tc_init+0x102>
			MCLK->APBEMASK.reg |= mask;
    6e2c:	4b1f      	ldr	r3, [pc, #124]	; (6eac <tc_init+0x2e0>)
    6e2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    6e30:	4311      	orrs	r1, r2
    6e32:	6259      	str	r1, [r3, #36]	; 0x24
    6e34:	e74b      	b.n	6cce <tc_init+0x102>
    6e36:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6e38:	2b00      	cmp	r3, #0
    6e3a:	d1fc      	bne.n	6e36 <tc_init+0x26a>
					config->counter_8_bit.value;
    6e3c:	3328      	adds	r3, #40	; 0x28
    6e3e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    6e40:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6e42:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6e44:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6e46:	2b00      	cmp	r3, #0
    6e48:	d1fc      	bne.n	6e44 <tc_init+0x278>
					config->counter_8_bit.period;
    6e4a:	3329      	adds	r3, #41	; 0x29
    6e4c:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    6e4e:	76eb      	strb	r3, [r5, #27]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6e50:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6e52:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6e54:	2b00      	cmp	r3, #0
    6e56:	d1fc      	bne.n	6e52 <tc_init+0x286>
					config->counter_8_bit.compare_capture_channel[0];
    6e58:	332a      	adds	r3, #42	; 0x2a
    6e5a:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    6e5c:	772b      	strb	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6e5e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6e60:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6e62:	2b00      	cmp	r3, #0
    6e64:	d1fc      	bne.n	6e60 <tc_init+0x294>
					config->counter_8_bit.compare_capture_channel[1];
    6e66:	332b      	adds	r3, #43	; 0x2b
    6e68:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    6e6a:	776b      	strb	r3, [r5, #29]
			return STATUS_OK;
    6e6c:	2000      	movs	r0, #0
    6e6e:	e6e4      	b.n	6c3a <tc_init+0x6e>
    6e70:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6e72:	2b00      	cmp	r3, #0
    6e74:	d1fc      	bne.n	6e70 <tc_init+0x2a4>
				= config->counter_32_bit.value;
    6e76:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    6e78:	616b      	str	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6e7a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6e7c:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6e7e:	2b00      	cmp	r3, #0
    6e80:	d1fc      	bne.n	6e7c <tc_init+0x2b0>
			hw->COUNT32.CC[0].reg =
    6e82:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    6e84:	61eb      	str	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6e86:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6e88:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6e8a:	2b00      	cmp	r3, #0
    6e8c:	d1fc      	bne.n	6e88 <tc_init+0x2bc>
					config->counter_32_bit.compare_capture_channel[1];
    6e8e:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    6e90:	622b      	str	r3, [r5, #32]
			return STATUS_OK;
    6e92:	2000      	movs	r0, #0
    6e94:	e6d1      	b.n	6c3a <tc_init+0x6e>
    6e96:	46c0      	nop			; (mov r8, r8)
    6e98:	00006b91 	.word	0x00006b91
    6e9c:	000175e8 	.word	0x000175e8
    6ea0:	20001f2c 	.word	0x20001f2c
    6ea4:	000175c0 	.word	0x000175c0
    6ea8:	00006a69 	.word	0x00006a69
    6eac:	40000400 	.word	0x40000400
    6eb0:	0000696d 	.word	0x0000696d
    6eb4:	000068fd 	.word	0x000068fd
    6eb8:	000175d4 	.word	0x000175d4

00006ebc <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6ebc:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    6ebe:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    6ec0:	2b00      	cmp	r3, #0
    6ec2:	d1fc      	bne.n	6ebe <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    6ec4:	7113      	strb	r3, [r2, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6ec6:	6801      	ldr	r1, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    6ec8:	690b      	ldr	r3, [r1, #16]

	while (tc_is_syncing(module_inst)) {
    6eca:	2b00      	cmp	r3, #0
    6ecc:	d1fc      	bne.n	6ec8 <tc_get_count_value+0xc>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_READSYNC_Val);
    6ece:	3380      	adds	r3, #128	; 0x80
    6ed0:	7153      	strb	r3, [r2, #5]
#if (SAMC20) || (SAMC21) || (SAML21) || (SAML22) || (SAMR30) || (SAMR34) || (WLR089)
	/* wait for the CMD bits in CTRLBSET to be cleared, meaning the CMD has been executed */
	while(tc_module->CTRLBSET.reg & TC_CTRLBSET_CMD_READSYNC);	
    6ed2:	7953      	ldrb	r3, [r2, #5]
    6ed4:	b25b      	sxtb	r3, r3
    6ed6:	2b00      	cmp	r3, #0
    6ed8:	dbfb      	blt.n	6ed2 <tc_get_count_value+0x16>

	/* Read synchronization */
	tc_sync_read_count(module_inst);
	
	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    6eda:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    6edc:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    6ede:	2b00      	cmp	r3, #0
    6ee0:	d1fc      	bne.n	6edc <tc_get_count_value+0x20>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    6ee2:	7903      	ldrb	r3, [r0, #4]
    6ee4:	2b04      	cmp	r3, #4
    6ee6:	d005      	beq.n	6ef4 <tc_get_count_value+0x38>
    6ee8:	2b08      	cmp	r3, #8
    6eea:	d009      	beq.n	6f00 <tc_get_count_value+0x44>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    6eec:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    6eee:	2b00      	cmp	r3, #0
    6ef0:	d003      	beq.n	6efa <tc_get_count_value+0x3e>
}
    6ef2:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    6ef4:	7d10      	ldrb	r0, [r2, #20]
    6ef6:	b2c0      	uxtb	r0, r0
    6ef8:	e7fb      	b.n	6ef2 <tc_get_count_value+0x36>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    6efa:	8a90      	ldrh	r0, [r2, #20]
    6efc:	b280      	uxth	r0, r0
    6efe:	e7f8      	b.n	6ef2 <tc_get_count_value+0x36>
			return tc_module->COUNT32.COUNT.reg;
    6f00:	6950      	ldr	r0, [r2, #20]
    6f02:	e7f6      	b.n	6ef2 <tc_get_count_value+0x36>

00006f04 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    6f04:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(compare);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    6f06:	6804      	ldr	r4, [r0, #0]
    6f08:	6923      	ldr	r3, [r4, #16]

	while (tc_is_syncing(module_inst)) {
    6f0a:	2b00      	cmp	r3, #0
    6f0c:	d1fc      	bne.n	6f08 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    6f0e:	7903      	ldrb	r3, [r0, #4]
    6f10:	2b04      	cmp	r3, #4
    6f12:	d006      	beq.n	6f22 <tc_set_compare_value+0x1e>
    6f14:	2b08      	cmp	r3, #8
    6f16:	d028      	beq.n	6f6a <tc_set_compare_value+0x66>
    6f18:	2b00      	cmp	r3, #0
    6f1a:	d013      	beq.n	6f44 <tc_set_compare_value+0x40>
				}
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    6f1c:	2317      	movs	r3, #23
}
    6f1e:	0018      	movs	r0, r3
    6f20:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    6f22:	2317      	movs	r3, #23
			if (channel_index <
    6f24:	2901      	cmp	r1, #1
    6f26:	d8fa      	bhi.n	6f1e <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    6f28:	7e83      	ldrb	r3, [r0, #26]
    6f2a:	2b00      	cmp	r3, #0
    6f2c:	d005      	beq.n	6f3a <tc_set_compare_value+0x36>
							(uint8_t)compare;
    6f2e:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CCBUF[channel_index].reg =
    6f30:	1861      	adds	r1, r4, r1
    6f32:	3130      	adds	r1, #48	; 0x30
    6f34:	700a      	strb	r2, [r1, #0]
				return STATUS_OK;
    6f36:	2300      	movs	r3, #0
    6f38:	e7f1      	b.n	6f1e <tc_set_compare_value+0x1a>
							(uint8_t)compare;
    6f3a:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CC[channel_index].reg  =
    6f3c:	1864      	adds	r4, r4, r1
    6f3e:	7722      	strb	r2, [r4, #28]
				return STATUS_OK;
    6f40:	2300      	movs	r3, #0
    6f42:	e7ec      	b.n	6f1e <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    6f44:	2317      	movs	r3, #23
			if (channel_index <
    6f46:	2901      	cmp	r1, #1
    6f48:	d8e9      	bhi.n	6f1e <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    6f4a:	7e83      	ldrb	r3, [r0, #26]
    6f4c:	2b00      	cmp	r3, #0
    6f4e:	d005      	beq.n	6f5c <tc_set_compare_value+0x58>
							(uint16_t)compare;
    6f50:	b292      	uxth	r2, r2
					tc_module->COUNT16.CCBUF[channel_index].reg =
    6f52:	3118      	adds	r1, #24
    6f54:	0049      	lsls	r1, r1, #1
    6f56:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    6f58:	2300      	movs	r3, #0
    6f5a:	e7e0      	b.n	6f1e <tc_set_compare_value+0x1a>
							(uint16_t)compare;
    6f5c:	b292      	uxth	r2, r2
					tc_module->COUNT16.CC[channel_index].reg =
    6f5e:	310c      	adds	r1, #12
    6f60:	0049      	lsls	r1, r1, #1
    6f62:	1864      	adds	r4, r4, r1
    6f64:	80a2      	strh	r2, [r4, #4]
				return STATUS_OK;
    6f66:	2300      	movs	r3, #0
    6f68:	e7d9      	b.n	6f1e <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    6f6a:	2317      	movs	r3, #23
			if (channel_index <
    6f6c:	2901      	cmp	r1, #1
    6f6e:	d8d6      	bhi.n	6f1e <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    6f70:	7e83      	ldrb	r3, [r0, #26]
    6f72:	2b00      	cmp	r3, #0
    6f74:	d105      	bne.n	6f82 <tc_set_compare_value+0x7e>
					tc_module->COUNT32.CC[channel_index].reg =
    6f76:	3106      	adds	r1, #6
    6f78:	0089      	lsls	r1, r1, #2
    6f7a:	1864      	adds	r4, r4, r1
    6f7c:	6062      	str	r2, [r4, #4]
				return STATUS_OK;
    6f7e:	2300      	movs	r3, #0
    6f80:	e7cd      	b.n	6f1e <tc_set_compare_value+0x1a>
					tc_module->COUNT32.CCBUF[channel_index].reg =
    6f82:	310c      	adds	r1, #12
    6f84:	0089      	lsls	r1, r1, #2
    6f86:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    6f88:	2300      	movs	r3, #0
    6f8a:	e7c8      	b.n	6f1e <tc_set_compare_value+0x1a>

00006f8c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    6f8c:	e7fe      	b.n	6f8c <Dummy_Handler>
    6f8e:	Address 0x00006f8e is out of bounds.


00006f90 <Reset_Handler>:
{
    6f90:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    6f92:	4a1a      	ldr	r2, [pc, #104]	; (6ffc <Reset_Handler+0x6c>)
    6f94:	4b1a      	ldr	r3, [pc, #104]	; (7000 <Reset_Handler+0x70>)
    6f96:	429a      	cmp	r2, r3
    6f98:	d011      	beq.n	6fbe <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    6f9a:	001a      	movs	r2, r3
    6f9c:	4b19      	ldr	r3, [pc, #100]	; (7004 <Reset_Handler+0x74>)
    6f9e:	429a      	cmp	r2, r3
    6fa0:	d20d      	bcs.n	6fbe <Reset_Handler+0x2e>
    6fa2:	4a19      	ldr	r2, [pc, #100]	; (7008 <Reset_Handler+0x78>)
    6fa4:	3303      	adds	r3, #3
    6fa6:	1a9b      	subs	r3, r3, r2
    6fa8:	089b      	lsrs	r3, r3, #2
    6faa:	3301      	adds	r3, #1
    6fac:	009b      	lsls	r3, r3, #2
    6fae:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    6fb0:	4813      	ldr	r0, [pc, #76]	; (7000 <Reset_Handler+0x70>)
    6fb2:	4912      	ldr	r1, [pc, #72]	; (6ffc <Reset_Handler+0x6c>)
    6fb4:	588c      	ldr	r4, [r1, r2]
    6fb6:	5084      	str	r4, [r0, r2]
    6fb8:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    6fba:	429a      	cmp	r2, r3
    6fbc:	d1fa      	bne.n	6fb4 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    6fbe:	4a13      	ldr	r2, [pc, #76]	; (700c <Reset_Handler+0x7c>)
    6fc0:	4b13      	ldr	r3, [pc, #76]	; (7010 <Reset_Handler+0x80>)
    6fc2:	429a      	cmp	r2, r3
    6fc4:	d20a      	bcs.n	6fdc <Reset_Handler+0x4c>
    6fc6:	43d3      	mvns	r3, r2
    6fc8:	4911      	ldr	r1, [pc, #68]	; (7010 <Reset_Handler+0x80>)
    6fca:	185b      	adds	r3, r3, r1
    6fcc:	2103      	movs	r1, #3
    6fce:	438b      	bics	r3, r1
    6fd0:	3304      	adds	r3, #4
    6fd2:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    6fd4:	2100      	movs	r1, #0
    6fd6:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    6fd8:	4293      	cmp	r3, r2
    6fda:	d1fc      	bne.n	6fd6 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    6fdc:	4a0d      	ldr	r2, [pc, #52]	; (7014 <Reset_Handler+0x84>)
    6fde:	21ff      	movs	r1, #255	; 0xff
    6fe0:	4b0d      	ldr	r3, [pc, #52]	; (7018 <Reset_Handler+0x88>)
    6fe2:	438b      	bics	r3, r1
    6fe4:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    6fe6:	4a0d      	ldr	r2, [pc, #52]	; (701c <Reset_Handler+0x8c>)
    6fe8:	6853      	ldr	r3, [r2, #4]
    6fea:	397f      	subs	r1, #127	; 0x7f
    6fec:	430b      	orrs	r3, r1
    6fee:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    6ff0:	4b0b      	ldr	r3, [pc, #44]	; (7020 <Reset_Handler+0x90>)
    6ff2:	4798      	blx	r3
        main();
    6ff4:	4b0b      	ldr	r3, [pc, #44]	; (7024 <Reset_Handler+0x94>)
    6ff6:	4798      	blx	r3
    6ff8:	e7fe      	b.n	6ff8 <Reset_Handler+0x68>
    6ffa:	46c0      	nop			; (mov r8, r8)
    6ffc:	00018570 	.word	0x00018570
    7000:	20000000 	.word	0x20000000
    7004:	20000084 	.word	0x20000084
    7008:	20000004 	.word	0x20000004
    700c:	20000088 	.word	0x20000088
    7010:	200034dc 	.word	0x200034dc
    7014:	e000ed00 	.word	0xe000ed00
    7018:	00000000 	.word	0x00000000
    701c:	41004000 	.word	0x41004000
    7020:	000160d9 	.word	0x000160d9
    7024:	000077bd 	.word	0x000077bd

00007028 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    7028:	b5f0      	push	{r4, r5, r6, r7, lr}
    702a:	46c6      	mov	lr, r8
    702c:	b500      	push	{lr}
    702e:	000c      	movs	r4, r1
    7030:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    7032:	2800      	cmp	r0, #0
    7034:	d10f      	bne.n	7056 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    7036:	2a00      	cmp	r2, #0
    7038:	dd11      	ble.n	705e <_read+0x36>
    703a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    703c:	4e09      	ldr	r6, [pc, #36]	; (7064 <_read+0x3c>)
    703e:	4d0a      	ldr	r5, [pc, #40]	; (7068 <_read+0x40>)
    7040:	6830      	ldr	r0, [r6, #0]
    7042:	0021      	movs	r1, r4
    7044:	682b      	ldr	r3, [r5, #0]
    7046:	4798      	blx	r3
		ptr++;
    7048:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    704a:	42bc      	cmp	r4, r7
    704c:	d1f8      	bne.n	7040 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    704e:	4640      	mov	r0, r8
    7050:	bc04      	pop	{r2}
    7052:	4690      	mov	r8, r2
    7054:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    7056:	2301      	movs	r3, #1
    7058:	425b      	negs	r3, r3
    705a:	4698      	mov	r8, r3
    705c:	e7f7      	b.n	704e <_read+0x26>
	for (; len > 0; --len) {
    705e:	4680      	mov	r8, r0
    7060:	e7f5      	b.n	704e <_read+0x26>
    7062:	46c0      	nop			; (mov r8, r8)
    7064:	20001f48 	.word	0x20001f48
    7068:	20001f40 	.word	0x20001f40

0000706c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    706c:	b5f0      	push	{r4, r5, r6, r7, lr}
    706e:	46c6      	mov	lr, r8
    7070:	b500      	push	{lr}
    7072:	000e      	movs	r6, r1
    7074:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    7076:	3801      	subs	r0, #1
    7078:	2802      	cmp	r0, #2
    707a:	d810      	bhi.n	709e <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    707c:	2a00      	cmp	r2, #0
    707e:	d011      	beq.n	70a4 <_write+0x38>
    7080:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    7082:	4b0c      	ldr	r3, [pc, #48]	; (70b4 <_write+0x48>)
    7084:	4698      	mov	r8, r3
    7086:	4f0c      	ldr	r7, [pc, #48]	; (70b8 <_write+0x4c>)
    7088:	4643      	mov	r3, r8
    708a:	6818      	ldr	r0, [r3, #0]
    708c:	5d31      	ldrb	r1, [r6, r4]
    708e:	683b      	ldr	r3, [r7, #0]
    7090:	4798      	blx	r3
    7092:	2800      	cmp	r0, #0
    7094:	db08      	blt.n	70a8 <_write+0x3c>
			return -1;
		}
		++nChars;
    7096:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    7098:	42a5      	cmp	r5, r4
    709a:	d1f5      	bne.n	7088 <_write+0x1c>
    709c:	e006      	b.n	70ac <_write+0x40>
		return -1;
    709e:	2401      	movs	r4, #1
    70a0:	4264      	negs	r4, r4
    70a2:	e003      	b.n	70ac <_write+0x40>
	for (; len != 0; --len) {
    70a4:	0014      	movs	r4, r2
    70a6:	e001      	b.n	70ac <_write+0x40>
			return -1;
    70a8:	2401      	movs	r4, #1
    70aa:	4264      	negs	r4, r4
	}
	return nChars;
}
    70ac:	0020      	movs	r0, r4
    70ae:	bc04      	pop	{r2}
    70b0:	4690      	mov	r8, r2
    70b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    70b4:	20001f48 	.word	0x20001f48
    70b8:	20001f44 	.word	0x20001f44

000070bc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    70bc:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    70be:	4a06      	ldr	r2, [pc, #24]	; (70d8 <_sbrk+0x1c>)
    70c0:	6812      	ldr	r2, [r2, #0]
    70c2:	2a00      	cmp	r2, #0
    70c4:	d004      	beq.n	70d0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    70c6:	4a04      	ldr	r2, [pc, #16]	; (70d8 <_sbrk+0x1c>)
    70c8:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    70ca:	18c3      	adds	r3, r0, r3
    70cc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    70ce:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    70d0:	4902      	ldr	r1, [pc, #8]	; (70dc <_sbrk+0x20>)
    70d2:	4a01      	ldr	r2, [pc, #4]	; (70d8 <_sbrk+0x1c>)
    70d4:	6011      	str	r1, [r2, #0]
    70d6:	e7f6      	b.n	70c6 <_sbrk+0xa>
    70d8:	200000f0 	.word	0x200000f0
    70dc:	200054e0 	.word	0x200054e0

000070e0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    70e0:	2001      	movs	r0, #1
    70e2:	4240      	negs	r0, r0
    70e4:	4770      	bx	lr

000070e6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    70e6:	2380      	movs	r3, #128	; 0x80
    70e8:	019b      	lsls	r3, r3, #6
    70ea:	604b      	str	r3, [r1, #4]

	return 0;
}
    70ec:	2000      	movs	r0, #0
    70ee:	4770      	bx	lr

000070f0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    70f0:	2001      	movs	r0, #1
    70f2:	4770      	bx	lr

000070f4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    70f4:	2000      	movs	r0, #0
    70f6:	4770      	bx	lr

000070f8 <_exit>:

extern void _exit(int status)
{
	asm("BKPT #0");
    70f8:	be00      	bkpt	0x0000
    70fa:	e7fe      	b.n	70fa <_exit+0x2>

000070fc <_kill>:
}

extern void _kill(int pid, int sig)
{
	return;
}
    70fc:	4770      	bx	lr

000070fe <_getpid>:

extern int _getpid(void)
{
	return -1;
}
    70fe:	2001      	movs	r0, #1
    7100:	4240      	negs	r0, r0
    7102:	4770      	bx	lr

00007104 <sal_FillSubKey>:
		}
	}
}

static void sal_FillSubKey( uint8_t *source, uint8_t *key, uint8_t size)
{
    7104:	b530      	push	{r4, r5, lr}
	uint8_t i = 0;
	uint8_t carry = 0;

	i=size;

	while(i--)
    7106:	1e53      	subs	r3, r2, #1
    7108:	b2db      	uxtb	r3, r3
    710a:	2a00      	cmp	r2, #0
    710c:	d00b      	beq.n	7126 <sal_FillSubKey+0x22>
    710e:	2400      	movs	r4, #0
	{
		key[i] = (source[i] << 1) | carry;
    7110:	18c5      	adds	r5, r0, r3
    7112:	782a      	ldrb	r2, [r5, #0]
    7114:	0052      	lsls	r2, r2, #1
    7116:	4322      	orrs	r2, r4
    7118:	54ca      	strb	r2, [r1, r3]
		carry = !!(source[i] & 0x80);
    711a:	782c      	ldrb	r4, [r5, #0]
    711c:	09e4      	lsrs	r4, r4, #7
	while(i--)
    711e:	3b01      	subs	r3, #1
    7120:	b2db      	uxtb	r3, r3
    7122:	2bff      	cmp	r3, #255	; 0xff
    7124:	d1f4      	bne.n	7110 <sal_FillSubKey+0xc>
	}
}
    7126:	bd30      	pop	{r4, r5, pc}

00007128 <SAL_AESEncode>:
{
    7128:	b510      	push	{r4, lr}
    712a:	b084      	sub	sp, #16
    712c:	0004      	movs	r4, r0
    712e:	0011      	movs	r1, r2
	memcpy(useKey, key, sizeof(useKey));
    7130:	2210      	movs	r2, #16
    7132:	4668      	mov	r0, sp
    7134:	4b04      	ldr	r3, [pc, #16]	; (7148 <SAL_AESEncode+0x20>)
    7136:	4798      	blx	r3
	AESEncode(buffer, useKey);
    7138:	4669      	mov	r1, sp
    713a:	0020      	movs	r0, r4
    713c:	4b03      	ldr	r3, [pc, #12]	; (714c <SAL_AESEncode+0x24>)
    713e:	4798      	blx	r3
}
    7140:	2000      	movs	r0, #0
    7142:	b004      	add	sp, #16
    7144:	bd10      	pop	{r4, pc}
    7146:	46c0      	nop			; (mov r8, r8)
    7148:	0001613f 	.word	0x0001613f
    714c:	0000c795 	.word	0x0000c795

00007150 <SAL_DeriveSessionKey>:
{
    7150:	b510      	push	{r4, lr}
	sal_status = SAL_AESEncode(block, src_key, key);
    7152:	4b01      	ldr	r3, [pc, #4]	; (7158 <SAL_DeriveSessionKey+0x8>)
    7154:	4798      	blx	r3
}
    7156:	bd10      	pop	{r4, pc}
    7158:	00007129 	.word	0x00007129

0000715c <SAL_Read>:
}
    715c:	2000      	movs	r0, #0
    715e:	4770      	bx	lr

00007160 <SAL_AESCmac>:
{
    7160:	b5f0      	push	{r4, r5, r6, r7, lr}
    7162:	46d6      	mov	lr, sl
    7164:	464f      	mov	r7, r9
    7166:	4646      	mov	r6, r8
    7168:	b5c0      	push	{r6, r7, lr}
    716a:	b0a4      	sub	sp, #144	; 0x90
    716c:	9001      	str	r0, [sp, #4]
    716e:	000f      	movs	r7, r1
    7170:	9102      	str	r1, [sp, #8]
    7172:	9203      	str	r2, [sp, #12]
    7174:	469a      	mov	sl, r3
    7176:	ab2c      	add	r3, sp, #176	; 0xb0
    7178:	881c      	ldrh	r4, [r3, #0]
	uint8_t const_Rb[16] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    717a:	ae08      	add	r6, sp, #32
    717c:	2210      	movs	r2, #16
    717e:	2100      	movs	r1, #0
    7180:	0030      	movs	r0, r6
    7182:	4d64      	ldr	r5, [pc, #400]	; (7314 <SAL_AESCmac+0x1b4>)
    7184:	47a8      	blx	r5
    7186:	2387      	movs	r3, #135	; 0x87
    7188:	73f3      	strb	r3, [r6, #15]
	memset(l, 0, sizeof(l));
    718a:	2210      	movs	r2, #16
    718c:	2100      	movs	r1, #0
    718e:	a804      	add	r0, sp, #16
    7190:	47a8      	blx	r5
	SAL_AESEncode(l, key_type, key);
    7192:	9a01      	ldr	r2, [sp, #4]
    7194:	0039      	movs	r1, r7
    7196:	a804      	add	r0, sp, #16
    7198:	4b5f      	ldr	r3, [pc, #380]	; (7318 <SAL_AESCmac+0x1b8>)
    719a:	4798      	blx	r3
	if ( (l[0] & 0x80) == 0x00 )  // MSB( bufferLocal[0] ) is '0'
    719c:	ab04      	add	r3, sp, #16
    719e:	781b      	ldrb	r3, [r3, #0]
    71a0:	2b7f      	cmp	r3, #127	; 0x7f
    71a2:	d82d      	bhi.n	7200 <SAL_AESCmac+0xa0>
		sal_FillSubKey( l, k1, (sizeof(l) ) );
    71a4:	2210      	movs	r2, #16
    71a6:	a920      	add	r1, sp, #128	; 0x80
    71a8:	a804      	add	r0, sp, #16
    71aa:	4b5c      	ldr	r3, [pc, #368]	; (731c <SAL_AESCmac+0x1bc>)
    71ac:	4798      	blx	r3
	if ( (k1[0] & 0x80) == 0x00 )   // MSB( k1[0] ) is '0'
    71ae:	ab20      	add	r3, sp, #128	; 0x80
    71b0:	781b      	ldrb	r3, [r3, #0]
    71b2:	2b7f      	cmp	r3, #127	; 0x7f
    71b4:	d834      	bhi.n	7220 <SAL_AESCmac+0xc0>
		sal_FillSubKey( k1, k2, (sizeof(l)) );
    71b6:	2210      	movs	r2, #16
    71b8:	a91c      	add	r1, sp, #112	; 0x70
    71ba:	a820      	add	r0, sp, #128	; 0x80
    71bc:	4b57      	ldr	r3, [pc, #348]	; (731c <SAL_AESCmac+0x1bc>)
    71be:	4798      	blx	r3
	n = (size + 15) >> 4;
    71c0:	0023      	movs	r3, r4
    71c2:	330f      	adds	r3, #15
    71c4:	111d      	asrs	r5, r3, #4
    71c6:	b2aa      	uxth	r2, r5
    71c8:	4690      	mov	r8, r2
	if (n == 0)
    71ca:	2a00      	cmp	r2, #0
    71cc:	d038      	beq.n	7240 <SAL_AESCmac+0xe0>
	if ( flag == 1 )
    71ce:	0722      	lsls	r2, r4, #28
    71d0:	d138      	bne.n	7244 <SAL_AESCmac+0xe4>
		for (i=((n-1) << 4); i<(n << 4); i++)
    71d2:	4642      	mov	r2, r8
    71d4:	3a01      	subs	r2, #1
    71d6:	0112      	lsls	r2, r2, #4
    71d8:	b296      	uxth	r6, r2
    71da:	4f51      	ldr	r7, [pc, #324]	; (7320 <SAL_AESCmac+0x1c0>)
    71dc:	401f      	ands	r7, r3
    71de:	42be      	cmp	r6, r7
    71e0:	da54      	bge.n	728c <SAL_AESCmac+0x12c>
    71e2:	0033      	movs	r3, r6
			mLast[j] = input[i] ^ k1[j];
    71e4:	a910      	add	r1, sp, #64	; 0x40
    71e6:	aa20      	add	r2, sp, #128	; 0x80
    71e8:	1b98      	subs	r0, r3, r6
    71ea:	b280      	uxth	r0, r0
    71ec:	4654      	mov	r4, sl
    71ee:	5ce4      	ldrb	r4, [r4, r3]
    71f0:	5c15      	ldrb	r5, [r2, r0]
    71f2:	406c      	eors	r4, r5
    71f4:	540c      	strb	r4, [r1, r0]
		for (i=((n-1) << 4); i<(n << 4); i++)
    71f6:	3301      	adds	r3, #1
    71f8:	b29b      	uxth	r3, r3
    71fa:	42bb      	cmp	r3, r7
    71fc:	dbf4      	blt.n	71e8 <SAL_AESCmac+0x88>
    71fe:	e045      	b.n	728c <SAL_AESCmac+0x12c>
		sal_FillSubKey( l, k1, (sizeof(l) ) );
    7200:	2210      	movs	r2, #16
    7202:	a920      	add	r1, sp, #128	; 0x80
    7204:	a804      	add	r0, sp, #16
    7206:	4b45      	ldr	r3, [pc, #276]	; (731c <SAL_AESCmac+0x1bc>)
    7208:	4798      	blx	r3
    720a:	2300      	movs	r3, #0
			k1[i] ^= const_Rb[i];
    720c:	aa20      	add	r2, sp, #128	; 0x80
    720e:	a908      	add	r1, sp, #32
    7210:	5c98      	ldrb	r0, [r3, r2]
    7212:	5c5d      	ldrb	r5, [r3, r1]
    7214:	4068      	eors	r0, r5
    7216:	5498      	strb	r0, [r3, r2]
    7218:	3301      	adds	r3, #1
		for (i=0; i<sizeof(l); i++)
    721a:	2b10      	cmp	r3, #16
    721c:	d1f8      	bne.n	7210 <SAL_AESCmac+0xb0>
    721e:	e7c6      	b.n	71ae <SAL_AESCmac+0x4e>
		sal_FillSubKey( k1, k2, (sizeof(l) ) );
    7220:	2210      	movs	r2, #16
    7222:	a91c      	add	r1, sp, #112	; 0x70
    7224:	a820      	add	r0, sp, #128	; 0x80
    7226:	4b3d      	ldr	r3, [pc, #244]	; (731c <SAL_AESCmac+0x1bc>)
    7228:	4798      	blx	r3
    722a:	2300      	movs	r3, #0
			k2[i] = k2[i] ^ const_Rb[i];
    722c:	aa1c      	add	r2, sp, #112	; 0x70
    722e:	a908      	add	r1, sp, #32
    7230:	5c98      	ldrb	r0, [r3, r2]
    7232:	5c5d      	ldrb	r5, [r3, r1]
    7234:	4068      	eors	r0, r5
    7236:	5498      	strb	r0, [r3, r2]
    7238:	3301      	adds	r3, #1
		for (i=0; i<sizeof(l); i++)
    723a:	2b10      	cmp	r3, #16
    723c:	d1f8      	bne.n	7230 <SAL_AESCmac+0xd0>
    723e:	e7bf      	b.n	71c0 <SAL_AESCmac+0x60>
		n = 1;
    7240:	2301      	movs	r3, #1
    7242:	4698      	mov	r8, r3
		ptr = &input[size - (size%16)];
    7244:	230f      	movs	r3, #15
    7246:	0020      	movs	r0, r4
    7248:	4398      	bics	r0, r3
    724a:	2300      	movs	r3, #0
			if ( i < (size%16) )
    724c:	220f      	movs	r2, #15
    724e:	4014      	ands	r4, r2
					padded[i] = 0x00;
    7250:	a90c      	add	r1, sp, #48	; 0x30
    7252:	2700      	movs	r7, #0
					padded[i] = 0x80;
    7254:	2680      	movs	r6, #128	; 0x80
				padded[i] = ptr[i];
    7256:	4450      	add	r0, sl
    7258:	e005      	b.n	7266 <SAL_AESCmac+0x106>
				if ( i == (size%16) )
    725a:	4294      	cmp	r4, r2
    725c:	d009      	beq.n	7272 <SAL_AESCmac+0x112>
					padded[i] = 0x00;
    725e:	545f      	strb	r7, [r3, r1]
    7260:	3301      	adds	r3, #1
		for (i=0; i<16; i++)
    7262:	2b10      	cmp	r3, #16
    7264:	d007      	beq.n	7276 <SAL_AESCmac+0x116>
    7266:	b29a      	uxth	r2, r3
			if ( i < (size%16) )
    7268:	4294      	cmp	r4, r2
    726a:	d9f6      	bls.n	725a <SAL_AESCmac+0xfa>
				padded[i] = ptr[i];
    726c:	5cc2      	ldrb	r2, [r0, r3]
    726e:	545a      	strb	r2, [r3, r1]
    7270:	e7f6      	b.n	7260 <SAL_AESCmac+0x100>
					padded[i] = 0x80;
    7272:	545e      	strb	r6, [r3, r1]
    7274:	e7f4      	b.n	7260 <SAL_AESCmac+0x100>
    7276:	2300      	movs	r3, #0
			mLast[i] = padded[i] ^ k2[i];
    7278:	a810      	add	r0, sp, #64	; 0x40
    727a:	a90c      	add	r1, sp, #48	; 0x30
    727c:	aa1c      	add	r2, sp, #112	; 0x70
    727e:	5c5c      	ldrb	r4, [r3, r1]
    7280:	5c9d      	ldrb	r5, [r3, r2]
    7282:	406c      	eors	r4, r5
    7284:	541c      	strb	r4, [r3, r0]
    7286:	3301      	adds	r3, #1
		for (i=0; i<sizeof(mLast); i++)
    7288:	2b10      	cmp	r3, #16
    728a:	d1f8      	bne.n	727e <SAL_AESCmac+0x11e>
	memset(x, 0, sizeof(x));
    728c:	2210      	movs	r2, #16
    728e:	2100      	movs	r1, #0
    7290:	a818      	add	r0, sp, #96	; 0x60
    7292:	4b20      	ldr	r3, [pc, #128]	; (7314 <SAL_AESCmac+0x1b4>)
    7294:	4798      	blx	r3
	for (i=0; i<(n-1); i++)
    7296:	2301      	movs	r3, #1
    7298:	425b      	negs	r3, r3
    729a:	4443      	add	r3, r8
    729c:	4699      	mov	r9, r3
    729e:	2000      	movs	r0, #0
    72a0:	2700      	movs	r7, #0
    72a2:	2b00      	cmp	r3, #0
    72a4:	dd1a      	ble.n	72dc <SAL_AESCmac+0x17c>
			y[j] = x[j] ^ input[(i << 4)+j];
    72a6:	ad14      	add	r5, sp, #80	; 0x50
    72a8:	ac18      	add	r4, sp, #96	; 0x60
		memcpy(x, y, sizeof(y));
    72aa:	4e1e      	ldr	r6, [pc, #120]	; (7324 <SAL_AESCmac+0x1c4>)
			y[j] = x[j] ^ input[(i << 4)+j];
    72ac:	0100      	lsls	r0, r0, #4
    72ae:	2300      	movs	r3, #0
    72b0:	4450      	add	r0, sl
    72b2:	5cc2      	ldrb	r2, [r0, r3]
    72b4:	5d19      	ldrb	r1, [r3, r4]
    72b6:	404a      	eors	r2, r1
    72b8:	555a      	strb	r2, [r3, r5]
    72ba:	3301      	adds	r3, #1
		for (j=0; j<16; j++)
    72bc:	2b10      	cmp	r3, #16
    72be:	d1f8      	bne.n	72b2 <SAL_AESCmac+0x152>
		memcpy(x, y, sizeof(y));
    72c0:	2210      	movs	r2, #16
    72c2:	0029      	movs	r1, r5
    72c4:	0020      	movs	r0, r4
    72c6:	47b0      	blx	r6
		SAL_AESEncode(x, key_type, key);
    72c8:	9a01      	ldr	r2, [sp, #4]
    72ca:	9902      	ldr	r1, [sp, #8]
    72cc:	0020      	movs	r0, r4
    72ce:	4b12      	ldr	r3, [pc, #72]	; (7318 <SAL_AESCmac+0x1b8>)
    72d0:	4798      	blx	r3
	for (i=0; i<(n-1); i++)
    72d2:	3701      	adds	r7, #1
    72d4:	b2bf      	uxth	r7, r7
    72d6:	0038      	movs	r0, r7
    72d8:	454f      	cmp	r7, r9
    72da:	dbe7      	blt.n	72ac <SAL_AESCmac+0x14c>
    72dc:	2300      	movs	r3, #0
		y[i] = x[i] ^ mLast[i];
    72de:	ac14      	add	r4, sp, #80	; 0x50
    72e0:	a818      	add	r0, sp, #96	; 0x60
    72e2:	a910      	add	r1, sp, #64	; 0x40
    72e4:	5c1a      	ldrb	r2, [r3, r0]
    72e6:	5c5d      	ldrb	r5, [r3, r1]
    72e8:	406a      	eors	r2, r5
    72ea:	551a      	strb	r2, [r3, r4]
    72ec:	3301      	adds	r3, #1
	for (i=0; i<sizeof(x); i++)
    72ee:	2b10      	cmp	r3, #16
    72f0:	d1f8      	bne.n	72e4 <SAL_AESCmac+0x184>
	SAL_AESEncode(y, key_type, key);
    72f2:	9a01      	ldr	r2, [sp, #4]
    72f4:	9902      	ldr	r1, [sp, #8]
    72f6:	a814      	add	r0, sp, #80	; 0x50
    72f8:	4b07      	ldr	r3, [pc, #28]	; (7318 <SAL_AESCmac+0x1b8>)
    72fa:	4798      	blx	r3
	memcpy(output, y, sizeof(y));
    72fc:	2210      	movs	r2, #16
    72fe:	a914      	add	r1, sp, #80	; 0x50
    7300:	9803      	ldr	r0, [sp, #12]
    7302:	4b08      	ldr	r3, [pc, #32]	; (7324 <SAL_AESCmac+0x1c4>)
    7304:	4798      	blx	r3
}
    7306:	2000      	movs	r0, #0
    7308:	b024      	add	sp, #144	; 0x90
    730a:	bc1c      	pop	{r2, r3, r4}
    730c:	4690      	mov	r8, r2
    730e:	4699      	mov	r9, r3
    7310:	46a2      	mov	sl, r4
    7312:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7314:	00016151 	.word	0x00016151
    7318:	00007129 	.word	0x00007129
    731c:	00007105 	.word	0x00007105
    7320:	000ffff0 	.word	0x000ffff0
    7324:	0001613f 	.word	0x0001613f

00007328 <DemoOutput_Greeting>:

bool PUSH_BUTTON_pressed;
MIWI_TICK PUSH_BUTTON_press_time;

void DemoOutput_Greeting(void)
{    
    7328:	b510      	push	{r4, lr}
		LCDDisplay((char *)"Simple LoRa P2P Demo on \n SAMR34 Node ", 0, true);
	#endif
#endif
    #if defined (ENABLE_CONSOLE)
        #if defined(PROTOCOL_P2P)
			printf("\n\r-----------------------------------------------------\n\r-----------------------------------------------------");
    732a:	480e      	ldr	r0, [pc, #56]	; (7364 <DemoOutput_Greeting+0x3c>)
    732c:	4c0e      	ldr	r4, [pc, #56]	; (7368 <DemoOutput_Greeting+0x40>)
    732e:	47a0      	blx	r4
            printf("\r\nStarting Node 1 of Simple Demo for LoRa P2P Stack ...");  
    7330:	480e      	ldr	r0, [pc, #56]	; (736c <DemoOutput_Greeting+0x44>)
    7332:	47a0      	blx	r4
        #endif
		#if defined(ENABLE_SLEEP_FEATURE)
			printf("\r\nReduced Function Device (RFD) operations") ;
		#else
			printf("\r\nFull Function Device (FFD) operations") ;
    7334:	480e      	ldr	r0, [pc, #56]	; (7370 <DemoOutput_Greeting+0x48>)
    7336:	47a0      	blx	r4
		#endif
        printf("\r\n     RF Transceiver: SX_1276");
    7338:	480e      	ldr	r0, [pc, #56]	; (7374 <DemoOutput_Greeting+0x4c>)
    733a:	47a0      	blx	r4
        printf("\r\n     Demo Instruction:");
    733c:	480e      	ldr	r0, [pc, #56]	; (7378 <DemoOutput_Greeting+0x50>)
    733e:	47a0      	blx	r4
        printf("\r\n                     Power on the board until LED 1 lights up");
    7340:	480e      	ldr	r0, [pc, #56]	; (737c <DemoOutput_Greeting+0x54>)
    7342:	47a0      	blx	r4
        printf("\r\n                     to indicate connecting with peer.");
    7344:	480e      	ldr	r0, [pc, #56]	; (7380 <DemoOutput_Greeting+0x58>)
    7346:	47a0      	blx	r4
        printf("\r\n                     Push Button 1 to broadcast message.");
    7348:	480e      	ldr	r0, [pc, #56]	; (7384 <DemoOutput_Greeting+0x5c>)
    734a:	47a0      	blx	r4
        printf("\r\n                     LED 1 will be toggled upon receiving messages. ");
    734c:	480e      	ldr	r0, [pc, #56]	; (7388 <DemoOutput_Greeting+0x60>)
    734e:	47a0      	blx	r4
        printf("\r\n\r\n");		
    7350:	480e      	ldr	r0, [pc, #56]	; (738c <DemoOutput_Greeting+0x64>)
    7352:	4c0f      	ldr	r4, [pc, #60]	; (7390 <DemoOutput_Greeting+0x68>)
    7354:	47a0      	blx	r4
		#ifdef PERIODIC_TX
			printf("Periodic Transmission = Enable\r\n") ;
		#else
			printf("Periodic Transmission = Disable\r\n") ;
    7356:	480f      	ldr	r0, [pc, #60]	; (7394 <DemoOutput_Greeting+0x6c>)
    7358:	47a0      	blx	r4
		#endif
		#ifdef DUTY_CYCLING
			printf("Duty Cycling support = Enable\r\n") ;
		#else
			printf("Duty Cycling support = Disable\r\n") ;
    735a:	480f      	ldr	r0, [pc, #60]	; (7398 <DemoOutput_Greeting+0x70>)
    735c:	47a0      	blx	r4
		#endif
		#ifdef LBT_SUPPORT_ENABLED
			printf("LBT support = Enable\r\n") ;
		#else
			printf("LBT support = Disable\r\n") ;
    735e:	480f      	ldr	r0, [pc, #60]	; (739c <DemoOutput_Greeting+0x74>)
    7360:	47a0      	blx	r4
		#endif
    #endif 
}        
    7362:	bd10      	pop	{r4, pc}
    7364:	000176c4 	.word	0x000176c4
    7368:	000166f9 	.word	0x000166f9
    736c:	00017734 	.word	0x00017734
    7370:	0001776c 	.word	0x0001776c
    7374:	00017794 	.word	0x00017794
    7378:	000177b4 	.word	0x000177b4
    737c:	000177d0 	.word	0x000177d0
    7380:	00017810 	.word	0x00017810
    7384:	0001784c 	.word	0x0001784c
    7388:	00017888 	.word	0x00017888
    738c:	000178d0 	.word	0x000178d0
    7390:	00016815 	.word	0x00016815
    7394:	000178d4 	.word	0x000178d4
    7398:	000178f8 	.word	0x000178f8
    739c:	00017918 	.word	0x00017918

000073a0 <DemoOutput_Channel>:
	LCDDisplay((char *)"SW: Use Nwk Freezer \nPress in 5 sec", 0, false);	
	delay_ms(1000);
#endif
}
void DemoOutput_Channel(uint8_t channel, uint8_t Step)
{
    73a0:	b570      	push	{r4, r5, r6, lr}
    73a2:	0004      	movs	r4, r0
    if( Step == 0 )
    73a4:	2900      	cmp	r1, #0
    73a6:	d009      	beq.n	73bc <DemoOutput_Channel+0x1c>
#if defined (ENABLE_LCD)
        LCDDisplay((char *)"Connected Peer on \n Channel ", channel, true);
#endif
#if defined (ENABLE_CONSOLE)
        #if !defined(MIWIKIT)
        printf("\r\nConnected Peer on Channel ");
    73a8:	4809      	ldr	r0, [pc, #36]	; (73d0 <DemoOutput_Channel+0x30>)
    73aa:	4d0a      	ldr	r5, [pc, #40]	; (73d4 <DemoOutput_Channel+0x34>)
    73ac:	47a8      	blx	r5
        printf("%d",channel);
    73ae:	0021      	movs	r1, r4
    73b0:	4809      	ldr	r0, [pc, #36]	; (73d8 <DemoOutput_Channel+0x38>)
    73b2:	47a8      	blx	r5
        printf("\r\n");
    73b4:	4809      	ldr	r0, [pc, #36]	; (73dc <DemoOutput_Channel+0x3c>)
    73b6:	4b0a      	ldr	r3, [pc, #40]	; (73e0 <DemoOutput_Channel+0x40>)
    73b8:	4798      	blx	r3
        #endif
#endif
    }
}    
    73ba:	bd70      	pop	{r4, r5, r6, pc}
        printf("\r\nConnecting Peer on Channel ");
    73bc:	4809      	ldr	r0, [pc, #36]	; (73e4 <DemoOutput_Channel+0x44>)
    73be:	4d05      	ldr	r5, [pc, #20]	; (73d4 <DemoOutput_Channel+0x34>)
    73c0:	47a8      	blx	r5
        printf("%d",channel);
    73c2:	0021      	movs	r1, r4
    73c4:	4804      	ldr	r0, [pc, #16]	; (73d8 <DemoOutput_Channel+0x38>)
    73c6:	47a8      	blx	r5
        printf("\r\n");
    73c8:	4804      	ldr	r0, [pc, #16]	; (73dc <DemoOutput_Channel+0x3c>)
    73ca:	4b05      	ldr	r3, [pc, #20]	; (73e0 <DemoOutput_Channel+0x40>)
    73cc:	4798      	blx	r3
    73ce:	e7f4      	b.n	73ba <DemoOutput_Channel+0x1a>
    73d0:	0001765c 	.word	0x0001765c
    73d4:	000166f9 	.word	0x000166f9
    73d8:	00017658 	.word	0x00017658
    73dc:	000180e8 	.word	0x000180e8
    73e0:	00016815 	.word	0x00016815
    73e4:	00017638 	.word	0x00017638

000073e8 <DemoOutput_Instruction>:
		LCDDisplay((char *)"SW     : Broadcast \nBUTTON1: Unicast", 0, false);
	#else
		LCDDisplay((char *)"SW: Broadcast", 0, false);
	#endif
#endif
}
    73e8:	4770      	bx	lr
    73ea:	Address 0x000073ea is out of bounds.


000073ec <DemoOutput_HandleMessage>:


void DemoOutput_HandleMessage(void)
{
    73ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;

    if( rxMessage.flags.bits.secEn )
    73ee:	4b2a      	ldr	r3, [pc, #168]	; (7498 <DemoOutput_HandleMessage+0xac>)
    73f0:	781b      	ldrb	r3, [r3, #0]
    73f2:	071b      	lsls	r3, r3, #28
    73f4:	d426      	bmi.n	7444 <DemoOutput_HandleMessage+0x58>
    {
        sio2host_tx((uint8_t *)"Secured ", sizeof("Secured "));
    }

    if( rxMessage.flags.bits.broadcast )
    73f6:	4b28      	ldr	r3, [pc, #160]	; (7498 <DemoOutput_HandleMessage+0xac>)
    73f8:	781b      	ldrb	r3, [r3, #0]
    73fa:	079b      	lsls	r3, r3, #30
    73fc:	d027      	beq.n	744e <DemoOutput_HandleMessage+0x62>
    {
        sio2host_tx((uint8_t *)"Broadcast Packet with RSSI ", sizeof("Broadcast Packet with RSSI "));
    73fe:	211c      	movs	r1, #28
    7400:	4826      	ldr	r0, [pc, #152]	; (749c <DemoOutput_HandleMessage+0xb0>)
    7402:	4b27      	ldr	r3, [pc, #156]	; (74a0 <DemoOutput_HandleMessage+0xb4>)
    7404:	4798      	blx	r3
    }
    else
    {
        sio2host_tx((uint8_t *)"Unicast Packet with RSSI ",sizeof("Unicast Packet with RSSI "));
    }
    printf("%02x", rxMessage.PacketRSSI);
    7406:	4c24      	ldr	r4, [pc, #144]	; (7498 <DemoOutput_HandleMessage+0xac>)
    7408:	7b61      	ldrb	r1, [r4, #13]
    740a:	4826      	ldr	r0, [pc, #152]	; (74a4 <DemoOutput_HandleMessage+0xb8>)
    740c:	4b26      	ldr	r3, [pc, #152]	; (74a8 <DemoOutput_HandleMessage+0xbc>)
    740e:	4798      	blx	r3
    if( rxMessage.flags.bits.srcPrsnt )
    7410:	7823      	ldrb	r3, [r4, #0]
    7412:	065b      	lsls	r3, r3, #25
    7414:	d420      	bmi.n	7458 <DemoOutput_HandleMessage+0x6c>
            {
                printf("%x", rxMessage.SourceAddress[MY_ADDRESS_LENGTH-1-i]);
            }    
        }
    }
    sio2host_tx((uint8_t *)": ",sizeof(": "));
    7416:	2103      	movs	r1, #3
    7418:	4824      	ldr	r0, [pc, #144]	; (74ac <DemoOutput_HandleMessage+0xc0>)
    741a:	4b21      	ldr	r3, [pc, #132]	; (74a0 <DemoOutput_HandleMessage+0xb4>)
    741c:	4798      	blx	r3
    
    for(i = 0; i < rxMessage.PayloadSize; i++)
    741e:	4b1e      	ldr	r3, [pc, #120]	; (7498 <DemoOutput_HandleMessage+0xac>)
    7420:	7b1b      	ldrb	r3, [r3, #12]
    7422:	2b00      	cmp	r3, #0
    7424:	d00a      	beq.n	743c <DemoOutput_HandleMessage+0x50>
    7426:	2400      	movs	r4, #0
    {
        sio2host_putchar(rxMessage.Payload[i]);
    7428:	4d1b      	ldr	r5, [pc, #108]	; (7498 <DemoOutput_HandleMessage+0xac>)
    742a:	4e21      	ldr	r6, [pc, #132]	; (74b0 <DemoOutput_HandleMessage+0xc4>)
    742c:	68ab      	ldr	r3, [r5, #8]
    742e:	5d18      	ldrb	r0, [r3, r4]
    7430:	47b0      	blx	r6
    for(i = 0; i < rxMessage.PayloadSize; i++)
    7432:	3401      	adds	r4, #1
    7434:	b2e4      	uxtb	r4, r4
    7436:	7b2b      	ldrb	r3, [r5, #12]
    7438:	42a3      	cmp	r3, r4
    743a:	d8f7      	bhi.n	742c <DemoOutput_HandleMessage+0x40>
    }   
	printf("\r\n");    
    743c:	481d      	ldr	r0, [pc, #116]	; (74b4 <DemoOutput_HandleMessage+0xc8>)
    743e:	4b1e      	ldr	r3, [pc, #120]	; (74b8 <DemoOutput_HandleMessage+0xcc>)
    7440:	4798      	blx	r3
} 
    7442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        sio2host_tx((uint8_t *)"Secured ", sizeof("Secured "));
    7444:	2109      	movs	r1, #9
    7446:	481d      	ldr	r0, [pc, #116]	; (74bc <DemoOutput_HandleMessage+0xd0>)
    7448:	4b15      	ldr	r3, [pc, #84]	; (74a0 <DemoOutput_HandleMessage+0xb4>)
    744a:	4798      	blx	r3
    744c:	e7d3      	b.n	73f6 <DemoOutput_HandleMessage+0xa>
        sio2host_tx((uint8_t *)"Unicast Packet with RSSI ",sizeof("Unicast Packet with RSSI "));
    744e:	211a      	movs	r1, #26
    7450:	481b      	ldr	r0, [pc, #108]	; (74c0 <DemoOutput_HandleMessage+0xd4>)
    7452:	4b13      	ldr	r3, [pc, #76]	; (74a0 <DemoOutput_HandleMessage+0xb4>)
    7454:	4798      	blx	r3
    7456:	e7d6      	b.n	7406 <DemoOutput_HandleMessage+0x1a>
        sio2host_tx((uint8_t *)" from ", sizeof(" from "));
    7458:	2107      	movs	r1, #7
    745a:	481a      	ldr	r0, [pc, #104]	; (74c4 <DemoOutput_HandleMessage+0xd8>)
    745c:	4b10      	ldr	r3, [pc, #64]	; (74a0 <DemoOutput_HandleMessage+0xb4>)
    745e:	4798      	blx	r3
        if( rxMessage.flags.bits.altSrcAddr )
    7460:	4b0d      	ldr	r3, [pc, #52]	; (7498 <DemoOutput_HandleMessage+0xac>)
    7462:	781b      	ldrb	r3, [r3, #0]
    7464:	2407      	movs	r4, #7
    7466:	2b7f      	cmp	r3, #127	; 0x7f
    7468:	d809      	bhi.n	747e <DemoOutput_HandleMessage+0x92>
                printf("%x", rxMessage.SourceAddress[MY_ADDRESS_LENGTH-1-i]);
    746a:	4f0b      	ldr	r7, [pc, #44]	; (7498 <DemoOutput_HandleMessage+0xac>)
    746c:	4e16      	ldr	r6, [pc, #88]	; (74c8 <DemoOutput_HandleMessage+0xdc>)
    746e:	4d0e      	ldr	r5, [pc, #56]	; (74a8 <DemoOutput_HandleMessage+0xbc>)
    7470:	687b      	ldr	r3, [r7, #4]
    7472:	5d19      	ldrb	r1, [r3, r4]
    7474:	0030      	movs	r0, r6
    7476:	47a8      	blx	r5
            for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    7478:	3c01      	subs	r4, #1
    747a:	d2f9      	bcs.n	7470 <DemoOutput_HandleMessage+0x84>
    747c:	e7cb      	b.n	7416 <DemoOutput_HandleMessage+0x2a>
            printf( "%x", rxMessage.SourceAddress[1]);
    747e:	4e06      	ldr	r6, [pc, #24]	; (7498 <DemoOutput_HandleMessage+0xac>)
    7480:	6873      	ldr	r3, [r6, #4]
    7482:	7859      	ldrb	r1, [r3, #1]
    7484:	4d10      	ldr	r5, [pc, #64]	; (74c8 <DemoOutput_HandleMessage+0xdc>)
    7486:	0028      	movs	r0, r5
    7488:	4c07      	ldr	r4, [pc, #28]	; (74a8 <DemoOutput_HandleMessage+0xbc>)
    748a:	47a0      	blx	r4
            printf( "%x", rxMessage.SourceAddress[0]);
    748c:	6873      	ldr	r3, [r6, #4]
    748e:	7819      	ldrb	r1, [r3, #0]
    7490:	0028      	movs	r0, r5
    7492:	47a0      	blx	r4
    7494:	e7bf      	b.n	7416 <DemoOutput_HandleMessage+0x2a>
    7496:	46c0      	nop			; (mov r8, r8)
    7498:	2000294c 	.word	0x2000294c
    749c:	0001793c 	.word	0x0001793c
    74a0:	0000bc75 	.word	0x0000bc75
    74a4:	00017974 	.word	0x00017974
    74a8:	000166f9 	.word	0x000166f9
    74ac:	00017988 	.word	0x00017988
    74b0:	0000bca1 	.word	0x0000bca1
    74b4:	000180e8 	.word	0x000180e8
    74b8:	00016815 	.word	0x00016815
    74bc:	00017930 	.word	0x00017930
    74c0:	00017958 	.word	0x00017958
    74c4:	0001797c 	.word	0x0001797c
    74c8:	00017984 	.word	0x00017984

000074cc <DemoOutput_UpdateTxRx>:
void DemoOutput_UpdateTxRx(uint8_t TxNum, uint8_t RxNum)
{
#if defined (ENABLE_LCD)
    LCDTRXCount(TxNum, RxNum);  
#endif
}
    74cc:	4770      	bx	lr
    74ce:	Address 0x000074ce is out of bounds.


000074d0 <DemoOutput_ChannelError>:

void DemoOutput_ChannelError(uint8_t channel)
{
    74d0:	b570      	push	{r4, r5, r6, lr}
    74d2:	0005      	movs	r5, r0
    #if defined (ENABLE_CONSOLE)
        printf("\r\nSelection of channel ");
    74d4:	4804      	ldr	r0, [pc, #16]	; (74e8 <DemoOutput_ChannelError+0x18>)
    74d6:	4c05      	ldr	r4, [pc, #20]	; (74ec <DemoOutput_ChannelError+0x1c>)
    74d8:	47a0      	blx	r4
        printf("%d", channel);
    74da:	0029      	movs	r1, r5
    74dc:	4804      	ldr	r0, [pc, #16]	; (74f0 <DemoOutput_ChannelError+0x20>)
    74de:	47a0      	blx	r4
        printf(" is not supported in current configuration.\r\n");
    74e0:	4804      	ldr	r0, [pc, #16]	; (74f4 <DemoOutput_ChannelError+0x24>)
    74e2:	4b05      	ldr	r3, [pc, #20]	; (74f8 <DemoOutput_ChannelError+0x28>)
    74e4:	4798      	blx	r3
    #endif
}
    74e6:	bd70      	pop	{r4, r5, r6, pc}
    74e8:	0001767c 	.word	0x0001767c
    74ec:	000166f9 	.word	0x000166f9
    74f0:	00017658 	.word	0x00017658
    74f4:	00017694 	.word	0x00017694
    74f8:	00016815 	.word	0x00016815

000074fc <DemoOutput_BroadcastFail>:
    LCDDisplay((char *)" Unicast Failed", 0, true);
#endif
}    

void DemoOutput_BroadcastFail(void)
{
    74fc:	b510      	push	{r4, lr}
	#if defined (ENABLE_CONSOLE)
	printf("\r\nBroadcast Failed\r\n");
    74fe:	4802      	ldr	r0, [pc, #8]	; (7508 <DemoOutput_BroadcastFail+0xc>)
    7500:	4b02      	ldr	r3, [pc, #8]	; (750c <DemoOutput_BroadcastFail+0x10>)
    7502:	4798      	blx	r3
	#endif
	#if defined (ENABLE_LCD)
	LCDDisplay((char *)" Broadcast Failed", 0, true);
	#endif
}    
    7504:	bd10      	pop	{r4, pc}
    7506:	46c0      	nop			; (mov r8, r8)
    7508:	00017624 	.word	0x00017624
    750c:	00016815 	.word	0x00016815

00007510 <ButtonPressed>:
 *
 * Note:
 ********************************************************************/

uint8_t ButtonPressed(void)
{
    7510:	b500      	push	{lr}
    7512:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    7514:	a901      	add	r1, sp, #4
    7516:	2300      	movs	r3, #0
    7518:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    751a:	2201      	movs	r2, #1
    751c:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    751e:	708b      	strb	r3, [r1, #2]
	struct port_config test_conf;
	port_get_config_defaults(&test_conf);
	test_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(PIN_PA07, &test_conf);
    7520:	2007      	movs	r0, #7
    7522:	4b12      	ldr	r3, [pc, #72]	; (756c <ButtonPressed+0x5c>)
    7524:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    7526:	4b12      	ldr	r3, [pc, #72]	; (7570 <ButtonPressed+0x60>)
    7528:	6a1b      	ldr	r3, [r3, #32]
	
    MIWI_TICK tickDifference;
    //if(!port_pin_get_input_level(BUTTON_0_PIN))
	if(port_pin_get_input_level(PIN_PA07))
    752a:	061b      	lsls	r3, r3, #24
    752c:	d50f      	bpl.n	754e <ButtonPressed+0x3e>
    {
        //if the button was previously not pressed
        if(PUSH_BUTTON_pressed == false)
    752e:	4b11      	ldr	r3, [pc, #68]	; (7574 <ButtonPressed+0x64>)
    7530:	781b      	ldrb	r3, [r3, #0]
        if(tickDifference.Val > DEBOUNCE_TIME)
        {
            PUSH_BUTTON_pressed = false;
        }
    }
    return 0;
    7532:	2000      	movs	r0, #0
        if(PUSH_BUTTON_pressed == false)
    7534:	2b00      	cmp	r3, #0
    7536:	d001      	beq.n	753c <ButtonPressed+0x2c>
}
    7538:	b003      	add	sp, #12
    753a:	bd00      	pop	{pc}
            PUSH_BUTTON_pressed = true;
    753c:	2201      	movs	r2, #1
    753e:	4b0d      	ldr	r3, [pc, #52]	; (7574 <ButtonPressed+0x64>)
    7540:	701a      	strb	r2, [r3, #0]
            PUSH_BUTTON_press_time.Val = MiWi_TickGet();
    7542:	4b0d      	ldr	r3, [pc, #52]	; (7578 <ButtonPressed+0x68>)
    7544:	4798      	blx	r3
    7546:	4b0d      	ldr	r3, [pc, #52]	; (757c <ButtonPressed+0x6c>)
    7548:	6018      	str	r0, [r3, #0]
            return 1;
    754a:	2001      	movs	r0, #1
    754c:	e7f4      	b.n	7538 <ButtonPressed+0x28>
		t.Val = MiWi_TickGet();
    754e:	4b0a      	ldr	r3, [pc, #40]	; (7578 <ButtonPressed+0x68>)
    7550:	4798      	blx	r3
        tickDifference.Val = MiWi_TickGetDiff(t,PUSH_BUTTON_press_time);
    7552:	4b0a      	ldr	r3, [pc, #40]	; (757c <ButtonPressed+0x6c>)
    7554:	6819      	ldr	r1, [r3, #0]
    7556:	4b0a      	ldr	r3, [pc, #40]	; (7580 <ButtonPressed+0x70>)
    7558:	4798      	blx	r3
        if(tickDifference.Val > DEBOUNCE_TIME)
    755a:	4b0a      	ldr	r3, [pc, #40]	; (7584 <ButtonPressed+0x74>)
    755c:	4298      	cmp	r0, r3
    755e:	d902      	bls.n	7566 <ButtonPressed+0x56>
            PUSH_BUTTON_pressed = false;
    7560:	2200      	movs	r2, #0
    7562:	4b04      	ldr	r3, [pc, #16]	; (7574 <ButtonPressed+0x64>)
    7564:	701a      	strb	r2, [r3, #0]
    return 0;
    7566:	2000      	movs	r0, #0
    7568:	e7e6      	b.n	7538 <ButtonPressed+0x28>
    756a:	46c0      	nop			; (mov r8, r8)
    756c:	00004ba9 	.word	0x00004ba9
    7570:	40002800 	.word	0x40002800
    7574:	20001f4c 	.word	0x20001f4c
    7578:	0000ba15 	.word	0x0000ba15
    757c:	20001f50 	.word	0x20001f50
    7580:	0000ba75 	.word	0x0000ba75
    7584:	00003fff 	.word	0x00003fff

00007588 <TxToutCallback>:




void TxToutCallback(void)
{
    7588:	b510      	push	{r4, lr}
	/* That bring the node back to continuous transaction cycle */
	PHY_DataConf(TRANSACTION_EXPIRED);
    758a:	2005      	movs	r0, #5
    758c:	4b03      	ldr	r3, [pc, #12]	; (759c <TxToutCallback+0x14>)
    758e:	4798      	blx	r3
	SwTimerStop(TxTimerId);
    7590:	4b03      	ldr	r3, [pc, #12]	; (75a0 <TxToutCallback+0x18>)
    7592:	7818      	ldrb	r0, [r3, #0]
    7594:	4b03      	ldr	r3, [pc, #12]	; (75a4 <TxToutCallback+0x1c>)
    7596:	4798      	blx	r3
}
    7598:	bd10      	pop	{r4, pc}
    759a:	46c0      	nop			; (mov r8, r8)
    759c:	00009795 	.word	0x00009795
    75a0:	200000f7 	.word	0x200000f7
    75a4:	0000cec5 	.word	0x0000cec5

000075a8 <dataConfcb>:


// Transmission callback
void dataConfcb(uint8_t handle, miwi_status_t status, uint8_t* msgPointer)
{
    75a8:	b510      	push	{r4, lr}
    75aa:	0014      	movs	r4, r2
#if defined (ENABLE_CONSOLE)
	printf("\nData Confirm: Handle: %d status:%d \r\n", handle, status);
    75ac:	000a      	movs	r2, r1
    75ae:	0001      	movs	r1, r0
    75b0:	4805      	ldr	r0, [pc, #20]	; (75c8 <dataConfcb+0x20>)
    75b2:	4b06      	ldr	r3, [pc, #24]	; (75cc <dataConfcb+0x24>)
    75b4:	4798      	blx	r3
#endif // #if defined (ENABLE_CONSOLE)
	/* Stop transmission timeout timer */
	SwTimerStop(TxTimerId);
    75b6:	4b06      	ldr	r3, [pc, #24]	; (75d0 <dataConfcb+0x28>)
    75b8:	7818      	ldrb	r0, [r3, #0]
    75ba:	4b06      	ldr	r3, [pc, #24]	; (75d4 <dataConfcb+0x2c>)
    75bc:	4798      	blx	r3
	/* Free payload buffer allocated */
	MiMem_Free(msgPointer);
    75be:	0020      	movs	r0, r4
    75c0:	4b05      	ldr	r3, [pc, #20]	; (75d8 <dataConfcb+0x30>)
    75c2:	4798      	blx	r3
	
}
    75c4:	bd10      	pop	{r4, pc}
    75c6:	46c0      	nop			; (mov r8, r8)
    75c8:	00017a60 	.word	0x00017a60
    75cc:	000166f9 	.word	0x000166f9
    75d0:	200000f7 	.word	0x200000f7
    75d4:	0000cec5 	.word	0x0000cec5
    75d8:	0000b891 	.word	0x0000b891

000075dc <T_BroadcastMessageToFerry>:
}



void T_BroadcastMessageToFerry(uint8_t signal)
{
    75dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    75de:	46c6      	mov	lr, r8
    75e0:	b500      	push	{lr}
    75e2:	b086      	sub	sp, #24
    75e4:	0007      	movs	r7, r0
	uint8_t* dataPtr = NULL;
	uint8_t dataLen = 0;
	uint16_t broadcastAddress = 0xFFFF;
    75e6:	2201      	movs	r2, #1
    75e8:	4252      	negs	r2, r2
    75ea:	2316      	movs	r3, #22
    75ec:	446b      	add	r3, sp
    75ee:	801a      	strh	r2, [r3, #0]
	
	dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PAYLOAD_TERMINAL));
    75f0:	2010      	movs	r0, #16
    75f2:	4b1c      	ldr	r3, [pc, #112]	; (7664 <T_BroadcastMessageToFerry+0x88>)
    75f4:	4798      	blx	r3
    75f6:	1e06      	subs	r6, r0, #0
	
	if (NULL == dataPtr) return;
    75f8:	d026      	beq.n	7648 <T_BroadcastMessageToFerry+0x6c>
	
	for (i = 0; i < PAYLOAD_TERMINAL; i++)
    75fa:	2200      	movs	r2, #0
    75fc:	4b1a      	ldr	r3, [pc, #104]	; (7668 <T_BroadcastMessageToFerry+0x8c>)
    75fe:	701a      	strb	r2, [r3, #0]
	{
		dataPtr[dataLen++] = signal;
		sio2host_putchar(dataPtr[i]);
    7600:	001d      	movs	r5, r3
    7602:	4b1a      	ldr	r3, [pc, #104]	; (766c <T_BroadcastMessageToFerry+0x90>)
    7604:	4698      	mov	r8, r3
		dataPtr[dataLen++] = signal;
    7606:	1c54      	adds	r4, r2, #1
    7608:	b2e4      	uxtb	r4, r4
    760a:	54b7      	strb	r7, [r6, r2]
		sio2host_putchar(dataPtr[i]);
    760c:	782b      	ldrb	r3, [r5, #0]
    760e:	5cf0      	ldrb	r0, [r6, r3]
    7610:	47c0      	blx	r8
	for (i = 0; i < PAYLOAD_TERMINAL; i++)
    7612:	782b      	ldrb	r3, [r5, #0]
    7614:	3301      	adds	r3, #1
    7616:	b2db      	uxtb	r3, r3
    7618:	702b      	strb	r3, [r5, #0]
		dataPtr[dataLen++] = signal;
    761a:	0022      	movs	r2, r4
	for (i = 0; i < PAYLOAD_TERMINAL; i++)
    761c:	2b00      	cmp	r3, #0
    761e:	d0f2      	beq.n	7606 <T_BroadcastMessageToFerry+0x2a>
	}
			
	// Broadcast the message
	if (MiApp_SendData(SHORT_ADDR_LEN, (uint8_t *)&broadcastAddress, dataLen, dataPtr, msghandledemo++, true, dataConfcb) == false)
    7620:	4a13      	ldr	r2, [pc, #76]	; (7670 <T_BroadcastMessageToFerry+0x94>)
    7622:	7813      	ldrb	r3, [r2, #0]
    7624:	1c59      	adds	r1, r3, #1
    7626:	7011      	strb	r1, [r2, #0]
    7628:	4a12      	ldr	r2, [pc, #72]	; (7674 <T_BroadcastMessageToFerry+0x98>)
    762a:	9202      	str	r2, [sp, #8]
    762c:	2201      	movs	r2, #1
    762e:	9201      	str	r2, [sp, #4]
    7630:	9300      	str	r3, [sp, #0]
    7632:	0033      	movs	r3, r6
    7634:	0022      	movs	r2, r4
    7636:	2116      	movs	r1, #22
    7638:	4469      	add	r1, sp
    763a:	2002      	movs	r0, #2
    763c:	4c0e      	ldr	r4, [pc, #56]	; (7678 <T_BroadcastMessageToFerry+0x9c>)
    763e:	47a0      	blx	r4
    7640:	2800      	cmp	r0, #0
    7642:	d105      	bne.n	7650 <T_BroadcastMessageToFerry+0x74>
	{
		DemoOutput_BroadcastFail();
    7644:	4b0d      	ldr	r3, [pc, #52]	; (767c <T_BroadcastMessageToFerry+0xa0>)
    7646:	4798      	blx	r3
	else
	{
		SwTimerStart(TxTimerId, MS_TO_US(5000), 0, (void *)TxToutCallback, NULL);
	}
	
}
    7648:	b006      	add	sp, #24
    764a:	bc04      	pop	{r2}
    764c:	4690      	mov	r8, r2
    764e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SwTimerStart(TxTimerId, MS_TO_US(5000), 0, (void *)TxToutCallback, NULL);
    7650:	4b0b      	ldr	r3, [pc, #44]	; (7680 <T_BroadcastMessageToFerry+0xa4>)
    7652:	7818      	ldrb	r0, [r3, #0]
    7654:	2300      	movs	r3, #0
    7656:	9300      	str	r3, [sp, #0]
    7658:	4b0a      	ldr	r3, [pc, #40]	; (7684 <T_BroadcastMessageToFerry+0xa8>)
    765a:	2200      	movs	r2, #0
    765c:	490a      	ldr	r1, [pc, #40]	; (7688 <T_BroadcastMessageToFerry+0xac>)
    765e:	4c0b      	ldr	r4, [pc, #44]	; (768c <T_BroadcastMessageToFerry+0xb0>)
    7660:	47a0      	blx	r4
    7662:	e7f1      	b.n	7648 <T_BroadcastMessageToFerry+0x6c>
    7664:	0000b7d5 	.word	0x0000b7d5
    7668:	20001f68 	.word	0x20001f68
    766c:	0000bca1 	.word	0x0000bca1
    7670:	200000f6 	.word	0x200000f6
    7674:	000075a9 	.word	0x000075a9
    7678:	0000a615 	.word	0x0000a615
    767c:	000074fd 	.word	0x000074fd
    7680:	200000f7 	.word	0x200000f7
    7684:	00007589 	.word	0x00007589
    7688:	004c4b40 	.word	0x004c4b40
    768c:	0000cbad 	.word	0x0000cbad

00007690 <run_system>:
{
    7690:	b510      	push	{r4, lr}
	usart_read_buffer_job(&UART_LoRa, (uint8_t*)rx_buffer_LoRa, LoRa_UART_RX_BUFFER_LENGTH);
    7692:	2201      	movs	r2, #1
    7694:	4906      	ldr	r1, [pc, #24]	; (76b0 <run_system+0x20>)
    7696:	4807      	ldr	r0, [pc, #28]	; (76b4 <run_system+0x24>)
    7698:	4b07      	ldr	r3, [pc, #28]	; (76b8 <run_system+0x28>)
    769a:	4798      	blx	r3
	uint8_t pressedButton = ButtonPressed();
    769c:	4b07      	ldr	r3, [pc, #28]	; (76bc <run_system+0x2c>)
    769e:	4798      	blx	r3
	switch(pressedButton)
    76a0:	2801      	cmp	r0, #1
    76a2:	d000      	beq.n	76a6 <run_system+0x16>
}
    76a4:	bd10      	pop	{r4, pc}
			T_BroadcastMessageToFerry(TEBID_GCOMMAND_OPEN);
    76a6:	3031      	adds	r0, #49	; 0x31
    76a8:	4b05      	ldr	r3, [pc, #20]	; (76c0 <run_system+0x30>)
    76aa:	4798      	blx	r3
}
    76ac:	e7fa      	b.n	76a4 <run_system+0x14>
    76ae:	46c0      	nop			; (mov r8, r8)
    76b0:	20001f54 	.word	0x20001f54
    76b4:	20001fa0 	.word	0x20001fa0
    76b8:	00006185 	.word	0x00006185
    76bc:	00007511 	.word	0x00007511
    76c0:	000075dd 	.word	0x000075dd

000076c4 <T_SendReceivedLoRaMessage>:
	}
}

// Send received LoRa message with UART
void T_SendReceivedLoRaMessage(uint8_t message)
{
    76c4:	b500      	push	{lr}
    76c6:	b083      	sub	sp, #12
    76c8:	466b      	mov	r3, sp
    76ca:	71d8      	strb	r0, [r3, #7]
	// Checks if received message is meant for terminal A
	if (T_A_CheckIdentifier(message))
    76cc:	2820      	cmp	r0, #32
    76ce:	d103      	bne.n	76d8 <T_SendReceivedLoRaMessage+0x14>
				//T_BroadcastMessageToFerry(previousData[0]);
				break;
				
			/* Ask for new message if received message was not in register */	
			default:
				T_BroadcastMessageToFerry(SEND_MESSAGE_AGAIN);		
    76d0:	3812      	subs	r0, #18
    76d2:	4b0d      	ldr	r3, [pc, #52]	; (7708 <T_SendReceivedLoRaMessage+0x44>)
    76d4:	4798      	blx	r3
				break;
    76d6:	e00b      	b.n	76f0 <T_SendReceivedLoRaMessage+0x2c>
			
		}
	}
	else
	{
		switch(message)
    76d8:	380d      	subs	r0, #13
    76da:	b2c3      	uxtb	r3, r0
    76dc:	2b27      	cmp	r3, #39	; 0x27
    76de:	d80e      	bhi.n	76fe <T_SendReceivedLoRaMessage+0x3a>
    76e0:	0098      	lsls	r0, r3, #2
    76e2:	4b0a      	ldr	r3, [pc, #40]	; (770c <T_SendReceivedLoRaMessage+0x48>)
    76e4:	581b      	ldr	r3, [r3, r0]
    76e6:	469f      	mov	pc, r3
		{
			case TEBID_GCOMMAND_RESET:			// Do nothing
				break;
				
			case TEBID_GCOMMAND_OPEN:			// Update screen							
				UART_SAM_To_RPi(&message);
    76e8:	466b      	mov	r3, sp
    76ea:	1dd8      	adds	r0, r3, #7
    76ec:	4b08      	ldr	r3, [pc, #32]	; (7710 <T_SendReceivedLoRaMessage+0x4c>)
    76ee:	4798      	blx	r3
			default:
				T_BroadcastMessageToFerry(SEND_MESSAGE_AGAIN);
				break;
		}
	}	
}
    76f0:	b003      	add	sp, #12
    76f2:	bd00      	pop	{pc}
				UART_SAM_To_RPi(&message);
    76f4:	466b      	mov	r3, sp
    76f6:	1dd8      	adds	r0, r3, #7
    76f8:	4b05      	ldr	r3, [pc, #20]	; (7710 <T_SendReceivedLoRaMessage+0x4c>)
    76fa:	4798      	blx	r3
				break;
    76fc:	e7f8      	b.n	76f0 <T_SendReceivedLoRaMessage+0x2c>
				T_BroadcastMessageToFerry(SEND_MESSAGE_AGAIN);
    76fe:	200e      	movs	r0, #14
    7700:	4b01      	ldr	r3, [pc, #4]	; (7708 <T_SendReceivedLoRaMessage+0x44>)
    7702:	4798      	blx	r3
}
    7704:	e7f4      	b.n	76f0 <T_SendReceivedLoRaMessage+0x2c>
    7706:	46c0      	nop			; (mov r8, r8)
    7708:	000075dd 	.word	0x000075dd
    770c:	0001798c 	.word	0x0001798c
    7710:	0000d92d 	.word	0x0000d92d

00007714 <ReceivedDataIndication>:
{
    7714:	b510      	push	{r4, lr}
	if ((myPANID.v[1] == ind->SourcePANID.v[1]) && (myPANID.v[0] == ind->SourcePANID.v[0]))
    7716:	4b11      	ldr	r3, [pc, #68]	; (775c <ReceivedDataIndication+0x48>)
    7718:	881a      	ldrh	r2, [r3, #0]
    771a:	8843      	ldrh	r3, [r0, #2]
    771c:	429a      	cmp	r2, r3
    771e:	d005      	beq.n	772c <ReceivedDataIndication+0x18>
		printf("Packet received from other Source PAN ID : 0x%x%x\r\n",ind->SourcePANID.v[1],ind->SourcePANID.v[0]);
    7720:	7882      	ldrb	r2, [r0, #2]
    7722:	78c1      	ldrb	r1, [r0, #3]
    7724:	480e      	ldr	r0, [pc, #56]	; (7760 <ReceivedDataIndication+0x4c>)
    7726:	4b0f      	ldr	r3, [pc, #60]	; (7764 <ReceivedDataIndication+0x50>)
    7728:	4798      	blx	r3
}
    772a:	bd10      	pop	{r4, pc}
		T_SendReceivedLoRaMessage(rxMessage.Payload[0]);
    772c:	4b0e      	ldr	r3, [pc, #56]	; (7768 <ReceivedDataIndication+0x54>)
    772e:	689b      	ldr	r3, [r3, #8]
    7730:	7818      	ldrb	r0, [r3, #0]
    7732:	4b0e      	ldr	r3, [pc, #56]	; (776c <ReceivedDataIndication+0x58>)
    7734:	4798      	blx	r3
		DemoOutput_HandleMessage();
    7736:	4b0e      	ldr	r3, [pc, #56]	; (7770 <ReceivedDataIndication+0x5c>)
    7738:	4798      	blx	r3
		DemoOutput_UpdateTxRx(TxNum, ++RxNum);
    773a:	4b0e      	ldr	r3, [pc, #56]	; (7774 <ReceivedDataIndication+0x60>)
    773c:	7818      	ldrb	r0, [r3, #0]
    773e:	4b0e      	ldr	r3, [pc, #56]	; (7778 <ReceivedDataIndication+0x64>)
    7740:	7819      	ldrb	r1, [r3, #0]
    7742:	3101      	adds	r1, #1
    7744:	b2c9      	uxtb	r1, r1
    7746:	7019      	strb	r1, [r3, #0]
    7748:	4b0c      	ldr	r3, [pc, #48]	; (777c <ReceivedDataIndication+0x68>)
    774a:	4798      	blx	r3
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    774c:	2280      	movs	r2, #128	; 0x80
    774e:	0312      	lsls	r2, r2, #12
    7750:	4b0b      	ldr	r3, [pc, #44]	; (7780 <ReceivedDataIndication+0x6c>)
    7752:	61da      	str	r2, [r3, #28]
		DemoOutput_Instruction();
    7754:	4b0b      	ldr	r3, [pc, #44]	; (7784 <ReceivedDataIndication+0x70>)
    7756:	4798      	blx	r3
    7758:	e7e7      	b.n	772a <ReceivedDataIndication+0x16>
    775a:	46c0      	nop			; (mov r8, r8)
    775c:	200026b8 	.word	0x200026b8
    7760:	00017a2c 	.word	0x00017a2c
    7764:	000166f9 	.word	0x000166f9
    7768:	2000294c 	.word	0x2000294c
    776c:	000076c5 	.word	0x000076c5
    7770:	000073ed 	.word	0x000073ed
    7774:	200000f5 	.word	0x200000f5
    7778:	200000f4 	.word	0x200000f4
    777c:	000074cd 	.word	0x000074cd
    7780:	40002800 	.word	0x40002800
    7784:	000073e9 	.word	0x000073e9

00007788 <APP_TaskHandler>:

/*********************************************************************//*
 \brief      Application Task Handler
 ************************************************************************/
SYSTEM_TaskStatus_t APP_TaskHandler(void)
{
    7788:	b510      	push	{r4, lr}
    Run_Communication();
    778a:	4b02      	ldr	r3, [pc, #8]	; (7794 <APP_TaskHandler+0xc>)
    778c:	4798      	blx	r3
    return SYSTEM_TASK_SUCCESS;
}
    778e:	2000      	movs	r0, #0
    7790:	bd10      	pop	{r4, pc}
    7792:	46c0      	nop			; (mov r8, r8)
    7794:	00007b05 	.word	0x00007b05

00007798 <ReadMacAddress>:
* Overview:		    Uses the MAC Address for addressing
*
* Note:			    
**********************************************************************/
void ReadMacAddress(void)
{
    7798:	b510      	push	{r4, lr}
	#if (BOARD == SAMR34_XPLAINED_PRO && defined(__SAMR34J18B__))
	// only applicable for SAM R34 Xpro with EDBG on-board
	uint8_t* peui64 = edbg_eui_read_eui64() ;
    779a:	4b06      	ldr	r3, [pc, #24]	; (77b4 <ReadMacAddress+0x1c>)
    779c:	4798      	blx	r3
    779e:	1dc3      	adds	r3, r0, #7
    77a0:	4a05      	ldr	r2, [pc, #20]	; (77b8 <ReadMacAddress+0x20>)
    77a2:	3801      	subs	r0, #1
	for (uint8_t i = 0; i < MY_ADDRESS_LENGTH; i++)
	{
		myLongAddress[i] = peui64[MY_ADDRESS_LENGTH-i-1] ;
    77a4:	7819      	ldrb	r1, [r3, #0]
    77a6:	7011      	strb	r1, [r2, #0]
    77a8:	3b01      	subs	r3, #1
    77aa:	3201      	adds	r2, #1
	for (uint8_t i = 0; i < MY_ADDRESS_LENGTH; i++)
    77ac:	4283      	cmp	r3, r0
    77ae:	d1f9      	bne.n	77a4 <ReadMacAddress+0xc>
	for (i= 0; i < MY_ADDRESS_LENGTH; i++)
	{
		myLongAddress[i] = peui64[MY_ADDRESS_LENGTH-i-1] ;
	}
	#endif
}
    77b0:	bd10      	pop	{r4, pc}
    77b2:	46c0      	nop			; (mov r8, r8)
    77b4:	0000d659 	.word	0x0000d659
    77b8:	20000014 	.word	0x20000014

000077bc <main>:
{   
    77bc:	b570      	push	{r4, r5, r6, lr}
	system_init();
    77be:	4b0f      	ldr	r3, [pc, #60]	; (77fc <main+0x40>)
    77c0:	4798      	blx	r3
	delay_init();
    77c2:	4b0f      	ldr	r3, [pc, #60]	; (7800 <main+0x44>)
    77c4:	4798      	blx	r3
	UART_init();
    77c6:	4b0f      	ldr	r3, [pc, #60]	; (7804 <main+0x48>)
    77c8:	4798      	blx	r3
	UART_cb_init();
    77ca:	4b0f      	ldr	r3, [pc, #60]	; (7808 <main+0x4c>)
    77cc:	4798      	blx	r3
	cpu_irq_enable();
    77ce:	2201      	movs	r2, #1
    77d0:	4b0e      	ldr	r3, [pc, #56]	; (780c <main+0x50>)
    77d2:	701a      	strb	r2, [r3, #0]
    77d4:	f3bf 8f5f 	dmb	sy
    77d8:	b662      	cpsie	i
	sio2host_init();
    77da:	4b0d      	ldr	r3, [pc, #52]	; (7810 <main+0x54>)
    77dc:	4798      	blx	r3
	ReadMacAddress(); 
    77de:	4b0d      	ldr	r3, [pc, #52]	; (7814 <main+0x58>)
    77e0:	4798      	blx	r3
	SystemTimerInit();
    77e2:	4b0d      	ldr	r3, [pc, #52]	; (7818 <main+0x5c>)
    77e4:	4798      	blx	r3
    DemoOutput_Greeting();	
    77e6:	4b0d      	ldr	r3, [pc, #52]	; (781c <main+0x60>)
    77e8:	4798      	blx	r3
    Initialize_LoRa();
    77ea:	4b0d      	ldr	r3, [pc, #52]	; (7820 <main+0x64>)
    77ec:	4798      	blx	r3
    Stack_Init();
    77ee:	4b0d      	ldr	r3, [pc, #52]	; (7824 <main+0x68>)
    77f0:	4798      	blx	r3
		SYSTEM_RunTasks();
    77f2:	4d0d      	ldr	r5, [pc, #52]	; (7828 <main+0x6c>)
		Run_Communication();
    77f4:	4c0d      	ldr	r4, [pc, #52]	; (782c <main+0x70>)
		SYSTEM_RunTasks();
    77f6:	47a8      	blx	r5
		Run_Communication();
    77f8:	47a0      	blx	r4
    77fa:	e7fc      	b.n	77f6 <main+0x3a>
    77fc:	00006a9d 	.word	0x00006a9d
    7800:	00004461 	.word	0x00004461
    7804:	0000d8ed 	.word	0x0000d8ed
    7808:	0000d921 	.word	0x0000d921
    780c:	20000008 	.word	0x20000008
    7810:	0000bb29 	.word	0x0000bb29
    7814:	00007799 	.word	0x00007799
    7818:	0000cb11 	.word	0x0000cb11
    781c:	00007329 	.word	0x00007329
    7820:	00007935 	.word	0x00007935
    7824:	0000d149 	.word	0x0000d149
    7828:	0000d159 	.word	0x0000d159
    782c:	00007b05 	.word	0x00007b05

00007830 <Connection_Confirm>:
#endif // #if defined (ENABLE_CONSOLE)
}
#endif // #ifdef ENABLE_ACTIVE_SCAN	

static void Connection_Confirm(miwi_status_t status)
{
    7830:	b510      	push	{r4, lr}
    7832:	0004      	movs	r4, r0
#if defined (ENABLE_CONSOLE)	
	printf("\r\nConnect Operation Status: %d\n", status) ;
    7834:	0001      	movs	r1, r0
    7836:	4806      	ldr	r0, [pc, #24]	; (7850 <Connection_Confirm+0x20>)
    7838:	4b06      	ldr	r3, [pc, #24]	; (7854 <Connection_Confirm+0x24>)
    783a:	4798      	blx	r3
#endif // #if defined (ENABLE_CONSOLE)

    if ((SUCCESS == status) || (ALREADY_EXISTS == status))
    783c:	2c00      	cmp	r4, #0
    783e:	d001      	beq.n	7844 <Connection_Confirm+0x14>
    7840:	2c06      	cmp	r4, #6
    7842:	d104      	bne.n	784e <Connection_Confirm+0x1e>
    {
#if defined (ENABLE_CONSOLE)
		printf("\r\nStarted Wireless Communication on Channel %u\r\n", currentChannel) ;
    7844:	4b04      	ldr	r3, [pc, #16]	; (7858 <Connection_Confirm+0x28>)
    7846:	7819      	ldrb	r1, [r3, #0]
    7848:	4804      	ldr	r0, [pc, #16]	; (785c <Connection_Confirm+0x2c>)
    784a:	4b02      	ldr	r3, [pc, #8]	; (7854 <Connection_Confirm+0x24>)
    784c:	4798      	blx	r3
		//DumpConnection(0xFF) ;
#endif // #if defined (ENABLE_CONSOLE)

	}
}
    784e:	bd10      	pop	{r4, pc}
    7850:	00017a88 	.word	0x00017a88
    7854:	000166f9 	.word	0x000166f9
    7858:	20000011 	.word	0x20000011
    785c:	00017aa8 	.word	0x00017aa8

00007860 <Scan_Confirm>:
{
    7860:	b5f0      	push	{r4, r5, r6, r7, lr}
    7862:	46de      	mov	lr, fp
    7864:	4657      	mov	r7, sl
    7866:	464e      	mov	r6, r9
    7868:	4645      	mov	r5, r8
    786a:	b5e0      	push	{r5, r6, r7, lr}
    786c:	b083      	sub	sp, #12
    786e:	0003      	movs	r3, r0
    7870:	9001      	str	r0, [sp, #4]
    7872:	468b      	mov	fp, r1
	for(uint8_t count =0; count <= ActiveScanResultCount-1; count++ )
    7874:	3b01      	subs	r3, #1
    7876:	4699      	mov	r9, r3
    7878:	d440      	bmi.n	78fc <Scan_Confirm+0x9c>
    787a:	2400      	movs	r4, #0
    787c:	2300      	movs	r3, #0
    787e:	4698      	mov	r8, r3
		printf("\nID\tDevice Address \t\tCapability \tPAN ID \tChannel \n");
    7880:	4b24      	ldr	r3, [pc, #144]	; (7914 <Scan_Confirm+0xb4>)
    7882:	469a      	mov	sl, r3
		printf("%02x",count+1);
    7884:	464b      	mov	r3, r9
    7886:	9300      	str	r3, [sp, #0]
    7888:	e01f      	b.n	78ca <Scan_Confirm+0x6a>
		printf("\t");
    788a:	2009      	movs	r0, #9
    788c:	4e22      	ldr	r6, [pc, #136]	; (7918 <Scan_Confirm+0xb8>)
    788e:	47b0      	blx	r6
		printf("%02x",(ActiveScanResult[count].Capability.Val));	
    7890:	464b      	mov	r3, r9
    7892:	7b99      	ldrb	r1, [r3, #14]
    7894:	4c21      	ldr	r4, [pc, #132]	; (791c <Scan_Confirm+0xbc>)
    7896:	0020      	movs	r0, r4
    7898:	4d21      	ldr	r5, [pc, #132]	; (7920 <Scan_Confirm+0xc0>)
    789a:	47a8      	blx	r5
		printf("\t\t");
    789c:	4821      	ldr	r0, [pc, #132]	; (7924 <Scan_Confirm+0xc4>)
    789e:	47a8      	blx	r5
		printf("%02x",(ActiveScanResult[count].PANID.Val));
    78a0:	464b      	mov	r3, r9
    78a2:	8959      	ldrh	r1, [r3, #10]
    78a4:	0020      	movs	r0, r4
    78a6:	47a8      	blx	r5
		printf("\t");
    78a8:	2009      	movs	r0, #9
    78aa:	47b0      	blx	r6
		printf("%02x",ActiveScanResult[count].Channel);
    78ac:	464b      	mov	r3, r9
    78ae:	7819      	ldrb	r1, [r3, #0]
    78b0:	0020      	movs	r0, r4
    78b2:	47a8      	blx	r5
		printf("\r\n");
    78b4:	481c      	ldr	r0, [pc, #112]	; (7928 <Scan_Confirm+0xc8>)
    78b6:	4b17      	ldr	r3, [pc, #92]	; (7914 <Scan_Confirm+0xb4>)
    78b8:	4798      	blx	r3
	for(uint8_t count =0; count <= ActiveScanResultCount-1; count++ )
    78ba:	4643      	mov	r3, r8
    78bc:	3301      	adds	r3, #1
    78be:	b2db      	uxtb	r3, r3
    78c0:	4698      	mov	r8, r3
    78c2:	001c      	movs	r4, r3
    78c4:	9b00      	ldr	r3, [sp, #0]
    78c6:	4598      	cmp	r8, r3
    78c8:	dc18      	bgt.n	78fc <Scan_Confirm+0x9c>
		printf("\nID\tDevice Address \t\tCapability \tPAN ID \tChannel \n");
    78ca:	4818      	ldr	r0, [pc, #96]	; (792c <Scan_Confirm+0xcc>)
    78cc:	47d0      	blx	sl
		printf("%02x",count+1);
    78ce:	1c61      	adds	r1, r4, #1
    78d0:	4812      	ldr	r0, [pc, #72]	; (791c <Scan_Confirm+0xbc>)
    78d2:	4b13      	ldr	r3, [pc, #76]	; (7920 <Scan_Confirm+0xc0>)
    78d4:	4798      	blx	r3
		printf("\t");
    78d6:	2009      	movs	r0, #9
    78d8:	4b0f      	ldr	r3, [pc, #60]	; (7918 <Scan_Confirm+0xb8>)
    78da:	4798      	blx	r3
				printf("%02x",ActiveScanResult[count].Address[MY_ADDRESS_LENGTH-1-j] );
    78dc:	4643      	mov	r3, r8
    78de:	011b      	lsls	r3, r3, #4
    78e0:	445b      	add	r3, fp
    78e2:	4699      	mov	r9, r3
    78e4:	001c      	movs	r4, r3
    78e6:	3408      	adds	r4, #8
    78e8:	001f      	movs	r7, r3
    78ea:	4e0c      	ldr	r6, [pc, #48]	; (791c <Scan_Confirm+0xbc>)
    78ec:	4d0c      	ldr	r5, [pc, #48]	; (7920 <Scan_Confirm+0xc0>)
    78ee:	7821      	ldrb	r1, [r4, #0]
    78f0:	0030      	movs	r0, r6
    78f2:	47a8      	blx	r5
    78f4:	3c01      	subs	r4, #1
		for(uint8_t j = 0; j < 8; j++)
    78f6:	42a7      	cmp	r7, r4
    78f8:	d1f9      	bne.n	78ee <Scan_Confirm+0x8e>
    78fa:	e7c6      	b.n	788a <Scan_Confirm+0x2a>
	printf("\r\n Scan Operation Status: %d device found",ActiveScanResultCount); 
    78fc:	9901      	ldr	r1, [sp, #4]
    78fe:	480c      	ldr	r0, [pc, #48]	; (7930 <Scan_Confirm+0xd0>)
    7900:	4b07      	ldr	r3, [pc, #28]	; (7920 <Scan_Confirm+0xc0>)
    7902:	4798      	blx	r3
}
    7904:	b003      	add	sp, #12
    7906:	bc3c      	pop	{r2, r3, r4, r5}
    7908:	4690      	mov	r8, r2
    790a:	4699      	mov	r9, r3
    790c:	46a2      	mov	sl, r4
    790e:	46ab      	mov	fp, r5
    7910:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7912:	46c0      	nop			; (mov r8, r8)
    7914:	00016815 	.word	0x00016815
    7918:	0001672d 	.word	0x0001672d
    791c:	00017974 	.word	0x00017974
    7920:	000166f9 	.word	0x000166f9
    7924:	00017b8c 	.word	0x00017b8c
    7928:	000180e8 	.word	0x000180e8
    792c:	00017b58 	.word	0x00017b58
    7930:	00017b90 	.word	0x00017b90

00007934 <Initialize_LoRa>:

bool Initialize_LoRa(void)
{
    7934:	b5f0      	push	{r4, r5, r6, r7, lr}
    7936:	b087      	sub	sp, #28
    uint8_t i;

	bool invalidIEEEAddrFlag = false;
	uint64_t invalidIEEEAddr;

    MiApp_SubscribeDataIndicationCallback(ReceivedDataIndication);
    7938:	4852      	ldr	r0, [pc, #328]	; (7a84 <Initialize_LoRa+0x150>)
    793a:	4b53      	ldr	r3, [pc, #332]	; (7a88 <Initialize_LoRa+0x154>)
    793c:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    793e:	2280      	movs	r2, #128	; 0x80
    7940:	0312      	lsls	r2, r2, #12
    7942:	4b52      	ldr	r3, [pc, #328]	; (7a8c <Initialize_LoRa+0x158>)
    7944:	619a      	str	r2, [r3, #24]
	

		LED_Off(LED0);

        MiApp_ProtocolInit(NULL, NULL);
    7946:	2100      	movs	r1, #0
    7948:	2000      	movs	r0, #0
    794a:	4b51      	ldr	r3, [pc, #324]	; (7a90 <Initialize_LoRa+0x15c>)
    794c:	4798      	blx	r3

////////		
		// -- For reference: set RF parameters just after protocol initialization
		// Set Tx Output Power
		uint8_t txPower = 0x01 ; // 1 dBm
    794e:	240f      	movs	r4, #15
    7950:	446c      	add	r4, sp
    7952:	2301      	movs	r3, #1
    7954:	7023      	strb	r3, [r4, #0]
		PHY_SetTxPower(txPower) ;
    7956:	2001      	movs	r0, #1
    7958:	4b4e      	ldr	r3, [pc, #312]	; (7a94 <Initialize_LoRa+0x160>)
    795a:	4798      	blx	r3
		// Read back and print Tx output power
		txPower = 255 ;
    795c:	27ff      	movs	r7, #255	; 0xff
    795e:	7027      	strb	r7, [r4, #0]
		RADIO_GetAttr(OUTPUT_POWER, (void *)&txPower) ;
    7960:	0021      	movs	r1, r4
    7962:	2004      	movs	r0, #4
    7964:	4e4c      	ldr	r6, [pc, #304]	; (7a98 <Initialize_LoRa+0x164>)
    7966:	47b0      	blx	r6
		printf("\nCurrent Tx output power: %d\r\n", txPower) ;
    7968:	7821      	ldrb	r1, [r4, #0]
    796a:	484c      	ldr	r0, [pc, #304]	; (7a9c <Initialize_LoRa+0x168>)
    796c:	4c4c      	ldr	r4, [pc, #304]	; (7aa0 <Initialize_LoRa+0x16c>)
    796e:	47a0      	blx	r4
		// Read and print PA_BOOST status
		uint8_t paBoost = 255 ;
    7970:	250e      	movs	r5, #14
    7972:	446d      	add	r5, sp
    7974:	702f      	strb	r7, [r5, #0]
		RADIO_GetAttr(PABOOST, (void *)&paBoost) ;
    7976:	0029      	movs	r1, r5
    7978:	2008      	movs	r0, #8
    797a:	47b0      	blx	r6
		printf("PA BOOST status: %d\r\n", paBoost) ;
    797c:	7829      	ldrb	r1, [r5, #0]
    797e:	4849      	ldr	r0, [pc, #292]	; (7aa4 <Initialize_LoRa+0x170>)
    7980:	47a0      	blx	r4
		// Read and print spreading factor
		RadioDataRate_t sf = SF_7 ;
    7982:	250d      	movs	r5, #13
    7984:	446d      	add	r5, sp
    7986:	2307      	movs	r3, #7
    7988:	702b      	strb	r3, [r5, #0]
		PHY_GetAttribute(SPREADING_FACTOR, (void *)&sf) ;
    798a:	0029      	movs	r1, r5
    798c:	2016      	movs	r0, #22
    798e:	4e46      	ldr	r6, [pc, #280]	; (7aa8 <Initialize_LoRa+0x174>)
    7990:	47b0      	blx	r6
		printf("Current SF: SF%d\r\n", sf) ;
    7992:	7829      	ldrb	r1, [r5, #0]
    7994:	4845      	ldr	r0, [pc, #276]	; (7aac <Initialize_LoRa+0x178>)
    7996:	47a0      	blx	r4
		// Read and print bandwidth
		RadioLoRaBandWidth_t bw ;
		PHY_GetAttribute(BANDWIDTH, (void *)&bw) ;
    7998:	ad03      	add	r5, sp, #12
    799a:	0029      	movs	r1, r5
    799c:	2007      	movs	r0, #7
    799e:	47b0      	blx	r6
		printf("Current BW (125kHz=7, 250kHz=8, 500kHz=9): %d\r\n", bw) ;
    79a0:	7829      	ldrb	r1, [r5, #0]
    79a2:	4843      	ldr	r0, [pc, #268]	; (7ab0 <Initialize_LoRa+0x17c>)
    79a4:	47a0      	blx	r4
		// Modify spreading factor
/////

		srand(PHY_RandomReq());
    79a6:	4b43      	ldr	r3, [pc, #268]	; (7ab4 <Initialize_LoRa+0x180>)
    79a8:	4798      	blx	r3
    79aa:	4b43      	ldr	r3, [pc, #268]	; (7ab8 <Initialize_LoRa+0x184>)
    79ac:	4798      	blx	r3
		/* Check if a valid IEEE address is available.
		0x0000000000000000 and 0xFFFFFFFFFFFFFFFF is presumed to be invalid */
		/* Check if IEEE address is 0x0000000000000000 */
		memset((uint8_t *)&invalidIEEEAddr, 0x00, LONG_ADDR_LEN);
    79ae:	2200      	movs	r2, #0
    79b0:	2300      	movs	r3, #0
    79b2:	9204      	str	r2, [sp, #16]
    79b4:	9305      	str	r3, [sp, #20]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    79b6:	4e41      	ldr	r6, [pc, #260]	; (7abc <Initialize_LoRa+0x188>)
    79b8:	3208      	adds	r2, #8
    79ba:	0031      	movs	r1, r6
    79bc:	a804      	add	r0, sp, #16
    79be:	4d40      	ldr	r5, [pc, #256]	; (7ac0 <Initialize_LoRa+0x18c>)
    79c0:	47a8      	blx	r5
    79c2:	0004      	movs	r4, r0
		{
			invalidIEEEAddrFlag = true;
		}

		/* Check if IEEE address is 0xFFFFFFFFFFFFFFFF */
		memset((uint8_t *)&invalidIEEEAddr, 0xFF, LONG_ADDR_LEN);
    79c4:	2201      	movs	r2, #1
    79c6:	4252      	negs	r2, r2
    79c8:	17d3      	asrs	r3, r2, #31
    79ca:	9204      	str	r2, [sp, #16]
    79cc:	9305      	str	r3, [sp, #20]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    79ce:	3209      	adds	r2, #9
    79d0:	0031      	movs	r1, r6
    79d2:	a804      	add	r0, sp, #16
    79d4:	47a8      	blx	r5
    79d6:	2800      	cmp	r0, #0
    79d8:	d03b      	beq.n	7a52 <Initialize_LoRa+0x11e>
		{
			invalidIEEEAddrFlag = true;
		}
		
		if (invalidIEEEAddrFlag)
    79da:	2c00      	cmp	r4, #0
    79dc:	d039      	beq.n	7a52 <Initialize_LoRa+0x11e>
			for(i = 0; i<MY_ADDRESS_LENGTH; i++)
			{
				*peui64++ = (uint8_t)rand();
			}
		}
		PHY_SetIEEEAddr((uint8_t *)&myLongAddress);
    79de:	4837      	ldr	r0, [pc, #220]	; (7abc <Initialize_LoRa+0x188>)
    79e0:	4b38      	ldr	r3, [pc, #224]	; (7ac4 <Initialize_LoRa+0x190>)
    79e2:	4798      	blx	r3
        //  ENABLE_PREV_CONN:   Only allow connection already exists in 
        //                      connection table
        //  ENABL_ACTIVE_SCAN_RSP:  Allow response to Active scan
        //  DISABLE_ALL_CONN:   Disable all connections. 
        /*******************************************************************/
        MiApp_ConnectionMode(ENABLE_ALL_CONN);
    79e4:	2000      	movs	r0, #0
    79e6:	4b38      	ldr	r3, [pc, #224]	; (7ac8 <Initialize_LoRa+0x194>)
    79e8:	4798      	blx	r3
        DemoOutput_Channel(myChannel, 0);
    79ea:	4c38      	ldr	r4, [pc, #224]	; (7acc <Initialize_LoRa+0x198>)
    79ec:	7820      	ldrb	r0, [r4, #0]
    79ee:	2100      	movs	r1, #0
    79f0:	4b37      	ldr	r3, [pc, #220]	; (7ad0 <Initialize_LoRa+0x19c>)
    79f2:	4798      	blx	r3


#ifdef ENABLE_ACTIVE_SCAN		
		MiApp_SearchConnection(5, 0xFFFFFFFF, Scan_Confirm);
    79f4:	4a37      	ldr	r2, [pc, #220]	; (7ad4 <Initialize_LoRa+0x1a0>)
    79f6:	2101      	movs	r1, #1
    79f8:	4249      	negs	r1, r1
    79fa:	2005      	movs	r0, #5
    79fc:	4b36      	ldr	r3, [pc, #216]	; (7ad8 <Initialize_LoRa+0x1a4>)
    79fe:	4798      	blx	r3
        //      either direct or indirect. Direct mode means connection 
        //      within the radio range; indirect mode means connection 
        //      may or may not in the radio range. 
        /*******************************************************************/
        // Set default channel
        if( MiApp_Set(CHANNEL, &myChannel) == false )
    7a00:	0021      	movs	r1, r4
    7a02:	2000      	movs	r0, #0
    7a04:	4b35      	ldr	r3, [pc, #212]	; (7adc <Initialize_LoRa+0x1a8>)
    7a06:	4798      	blx	r3
    7a08:	2800      	cmp	r0, #0
    7a0a:	d02c      	beq.n	7a66 <Initialize_LoRa+0x132>
        {
            DemoOutput_ChannelError(myChannel);
        }
				
		uint16_t broadcastAddress = 0xFFFF;
    7a0c:	220a      	movs	r2, #10
    7a0e:	446a      	add	r2, sp
    7a10:	2301      	movs	r3, #1
    7a12:	425b      	negs	r3, r3
    7a14:	8013      	strh	r3, [r2, #0]
		i = MiApp_EstablishConnection(myChannel, 0, (uint8_t*)&broadcastAddress, 0, Connection_Confirm);
    7a16:	4b2d      	ldr	r3, [pc, #180]	; (7acc <Initialize_LoRa+0x198>)
    7a18:	7818      	ldrb	r0, [r3, #0]
    7a1a:	4b31      	ldr	r3, [pc, #196]	; (7ae0 <Initialize_LoRa+0x1ac>)
    7a1c:	9300      	str	r3, [sp, #0]
    7a1e:	2300      	movs	r3, #0
    7a20:	2100      	movs	r1, #0
    7a22:	4c30      	ldr	r4, [pc, #192]	; (7ae4 <Initialize_LoRa+0x1b0>)
    7a24:	47a0      	blx	r4

        /*******************************************************************/
        // Display current operation on LCD of demo board, if applicable
        /*******************************************************************/
        if( i != 0xFF )
    7a26:	28ff      	cmp	r0, #255	; 0xff
    7a28:	d022      	beq.n	7a70 <Initialize_LoRa+0x13c>
        {
            DemoOutput_Channel(myChannel, 1);
    7a2a:	4b28      	ldr	r3, [pc, #160]	; (7acc <Initialize_LoRa+0x198>)
    7a2c:	7818      	ldrb	r0, [r3, #0]
    7a2e:	2101      	movs	r1, #1
    7a30:	4b27      	ldr	r3, [pc, #156]	; (7ad0 <Initialize_LoRa+0x19c>)
    7a32:	4798      	blx	r3
        //  Connection Entry. The value of 0xFF means to print out all
        //  valid Connection Entry; otherwise, the Connection Entry
        //  of the input index will be printed out.
        /*******************************************************************/
#if defined(ENABLE_CONSOLE)
		DumpConnection(0xFF);
    7a34:	20ff      	movs	r0, #255	; 0xff
    7a36:	4b2c      	ldr	r3, [pc, #176]	; (7ae8 <Initialize_LoRa+0x1b4>)
    7a38:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    7a3a:	2280      	movs	r2, #128	; 0x80
    7a3c:	0312      	lsls	r2, r2, #12
    7a3e:	4b13      	ldr	r3, [pc, #76]	; (7a8c <Initialize_LoRa+0x158>)
    7a40:	615a      	str	r2, [r3, #20]
#endif

        // Turn on LED 1 to indicate connection established
		LED_On(LED0);
#if defined(PROTOCOL_P2P)
        DemoOutput_Instruction();
    7a42:	4b2a      	ldr	r3, [pc, #168]	; (7aec <Initialize_LoRa+0x1b8>)
    7a44:	4798      	blx	r3
#endif    
    
	
	/* Create SW timer for transmission timeout */
	SwTimerCreate(&TxTimerId) ;
    7a46:	482a      	ldr	r0, [pc, #168]	; (7af0 <Initialize_LoRa+0x1bc>)
    7a48:	4b2a      	ldr	r3, [pc, #168]	; (7af4 <Initialize_LoRa+0x1c0>)
    7a4a:	4798      	blx	r3
	
	return true;
}
    7a4c:	2001      	movs	r0, #1
    7a4e:	b007      	add	sp, #28
    7a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a52:	4c1a      	ldr	r4, [pc, #104]	; (7abc <Initialize_LoRa+0x188>)
    7a54:	0026      	movs	r6, r4
    7a56:	3608      	adds	r6, #8
				*peui64++ = (uint8_t)rand();
    7a58:	4d27      	ldr	r5, [pc, #156]	; (7af8 <Initialize_LoRa+0x1c4>)
    7a5a:	47a8      	blx	r5
    7a5c:	7020      	strb	r0, [r4, #0]
    7a5e:	3401      	adds	r4, #1
			for(i = 0; i<MY_ADDRESS_LENGTH; i++)
    7a60:	42b4      	cmp	r4, r6
    7a62:	d1fa      	bne.n	7a5a <Initialize_LoRa+0x126>
    7a64:	e7bb      	b.n	79de <Initialize_LoRa+0xaa>
            DemoOutput_ChannelError(myChannel);
    7a66:	4b19      	ldr	r3, [pc, #100]	; (7acc <Initialize_LoRa+0x198>)
    7a68:	7818      	ldrb	r0, [r3, #0]
    7a6a:	4b24      	ldr	r3, [pc, #144]	; (7afc <Initialize_LoRa+0x1c8>)
    7a6c:	4798      	blx	r3
    7a6e:	e7cd      	b.n	7a0c <Initialize_LoRa+0xd8>
            MiApp_StartConnection(START_CONN_DIRECT, 10, (1L << myChannel), Connection_Confirm);
    7a70:	4b16      	ldr	r3, [pc, #88]	; (7acc <Initialize_LoRa+0x198>)
    7a72:	781b      	ldrb	r3, [r3, #0]
    7a74:	2201      	movs	r2, #1
    7a76:	409a      	lsls	r2, r3
    7a78:	4b19      	ldr	r3, [pc, #100]	; (7ae0 <Initialize_LoRa+0x1ac>)
    7a7a:	210a      	movs	r1, #10
    7a7c:	2000      	movs	r0, #0
    7a7e:	4c20      	ldr	r4, [pc, #128]	; (7b00 <Initialize_LoRa+0x1cc>)
    7a80:	47a0      	blx	r4
    7a82:	e7d7      	b.n	7a34 <Initialize_LoRa+0x100>
    7a84:	00007715 	.word	0x00007715
    7a88:	0000aba1 	.word	0x0000aba1
    7a8c:	40002800 	.word	0x40002800
    7a90:	0000a76d 	.word	0x0000a76d
    7a94:	0000a225 	.word	0x0000a225
    7a98:	0000dbbd 	.word	0x0000dbbd
    7a9c:	00017adc 	.word	0x00017adc
    7aa0:	000166f9 	.word	0x000166f9
    7aa4:	00017afc 	.word	0x00017afc
    7aa8:	0000a26d 	.word	0x0000a26d
    7aac:	00017b14 	.word	0x00017b14
    7ab0:	00017b28 	.word	0x00017b28
    7ab4:	0000a371 	.word	0x0000a371
    7ab8:	00016829 	.word	0x00016829
    7abc:	20000014 	.word	0x20000014
    7ac0:	00016121 	.word	0x00016121
    7ac4:	0000a395 	.word	0x0000a395
    7ac8:	0000ab81 	.word	0x0000ab81
    7acc:	2000000d 	.word	0x2000000d
    7ad0:	000073a1 	.word	0x000073a1
    7ad4:	00007861 	.word	0x00007861
    7ad8:	0000b65d 	.word	0x0000b65d
    7adc:	0000a749 	.word	0x0000a749
    7ae0:	00007831 	.word	0x00007831
    7ae4:	0000b469 	.word	0x0000b469
    7ae8:	0000a8b9 	.word	0x0000a8b9
    7aec:	000073e9 	.word	0x000073e9
    7af0:	200000f7 	.word	0x200000f7
    7af4:	0000cb79 	.word	0x0000cb79
    7af8:	00016885 	.word	0x00016885
    7afc:	000074d1 	.word	0x000074d1
    7b00:	0000a819 	.word	0x0000a819

00007b04 <Run_Communication>:

void Run_Communication(void)
{
    7b04:	b510      	push	{r4, lr}
    P2PTasks();
    7b06:	4b02      	ldr	r3, [pc, #8]	; (7b10 <Run_Communication+0xc>)
    7b08:	4798      	blx	r3
	run_system();
    7b0a:	4b02      	ldr	r3, [pc, #8]	; (7b14 <Run_Communication+0x10>)
    7b0c:	4798      	blx	r3
    7b0e:	bd10      	pop	{r4, pc}
    7b10:	0000ad15 	.word	0x0000ad15
    7b14:	00007691 	.word	0x00007691

00007b18 <CompareData>:
     Otherwise it is the start address of the buffer that contains the data to compare with
    \param numberOfBytes The number of bytes to compare
    \note offset+numberOfBytes must be <= D_NV_SECTOR_SIZE (meaning sector crossing is not permitted)
*/
static bool CompareData(uint8_t sector, uint16_t offset, uint8_t *pBuffer, D_Nv_Size_t numberOfBytes)
{
    7b18:	b5f0      	push	{r4, r5, r6, r7, lr}
    7b1a:	46c6      	mov	lr, r8
    7b1c:	b500      	push	{lr}
    7b1e:	b084      	sub	sp, #16
    7b20:	0014      	movs	r4, r2
    7b22:	001f      	movs	r7, r3
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    7b24:	4b29      	ldr	r3, [pc, #164]	; (7bcc <CompareData+0xb4>)
    7b26:	18cb      	adds	r3, r1, r3
    7b28:	0340      	lsls	r0, r0, #13
    7b2a:	181d      	adds	r5, r3, r0
  uint8_t  buffer[16U];

  assert(numberOfBytes);
    7b2c:	2f00      	cmp	r7, #0
    7b2e:	d01a      	beq.n	7b66 <CompareData+0x4e>
  assert(address <= D_NV_MEMORY_END);
    7b30:	4b27      	ldr	r3, [pc, #156]	; (7bd0 <CompareData+0xb8>)
    7b32:	1e5a      	subs	r2, r3, #1
    7b34:	4295      	cmp	r5, r2
    7b36:	d81c      	bhi.n	7b72 <CompareData+0x5a>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    7b38:	197a      	adds	r2, r7, r5
    7b3a:	4293      	cmp	r3, r2
    7b3c:	d31f      	bcc.n	7b7e <CompareData+0x66>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    7b3e:	19c9      	adds	r1, r1, r7
    7b40:	2380      	movs	r3, #128	; 0x80
    7b42:	019b      	lsls	r3, r3, #6
    7b44:	4299      	cmp	r1, r3
    7b46:	d820      	bhi.n	7b8a <CompareData+0x72>

  while(numberOfBytes)
  {
    uint16_t bytesToRead = MIN(sizeof(buffer), numberOfBytes);

    memcpy(buffer, (uint8_t FLASH_PTR *)address, bytesToRead);
    7b48:	4b22      	ldr	r3, [pc, #136]	; (7bd4 <CompareData+0xbc>)
    7b4a:	4698      	mov	r8, r3
    uint16_t bytesToRead = MIN(sizeof(buffer), numberOfBytes);
    7b4c:	1c3e      	adds	r6, r7, #0
    7b4e:	2f10      	cmp	r7, #16
    7b50:	d900      	bls.n	7b54 <CompareData+0x3c>
    7b52:	2610      	movs	r6, #16
    7b54:	b2b6      	uxth	r6, r6
    memcpy(buffer, (uint8_t FLASH_PTR *)address, bytesToRead);
    7b56:	0032      	movs	r2, r6
    7b58:	0029      	movs	r1, r5
    7b5a:	4668      	mov	r0, sp
    7b5c:	47c0      	blx	r8
    for (uint8_t i = 0U; i < bytesToRead; i++)
    7b5e:	2e00      	cmp	r6, #0
    7b60:	d028      	beq.n	7bb4 <CompareData+0x9c>
    7b62:	2300      	movs	r3, #0
    7b64:	e01f      	b.n	7ba6 <CompareData+0x8e>
  assert(numberOfBytes);
    7b66:	4b1c      	ldr	r3, [pc, #112]	; (7bd8 <CompareData+0xc0>)
    7b68:	4a1c      	ldr	r2, [pc, #112]	; (7bdc <CompareData+0xc4>)
    7b6a:	21d9      	movs	r1, #217	; 0xd9
    7b6c:	481c      	ldr	r0, [pc, #112]	; (7be0 <CompareData+0xc8>)
    7b6e:	4c1d      	ldr	r4, [pc, #116]	; (7be4 <CompareData+0xcc>)
    7b70:	47a0      	blx	r4
  assert(address <= D_NV_MEMORY_END);
    7b72:	4b1d      	ldr	r3, [pc, #116]	; (7be8 <CompareData+0xd0>)
    7b74:	4a19      	ldr	r2, [pc, #100]	; (7bdc <CompareData+0xc4>)
    7b76:	21da      	movs	r1, #218	; 0xda
    7b78:	4819      	ldr	r0, [pc, #100]	; (7be0 <CompareData+0xc8>)
    7b7a:	4c1a      	ldr	r4, [pc, #104]	; (7be4 <CompareData+0xcc>)
    7b7c:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    7b7e:	4b1b      	ldr	r3, [pc, #108]	; (7bec <CompareData+0xd4>)
    7b80:	4a16      	ldr	r2, [pc, #88]	; (7bdc <CompareData+0xc4>)
    7b82:	21db      	movs	r1, #219	; 0xdb
    7b84:	4816      	ldr	r0, [pc, #88]	; (7be0 <CompareData+0xc8>)
    7b86:	4c17      	ldr	r4, [pc, #92]	; (7be4 <CompareData+0xcc>)
    7b88:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    7b8a:	4b19      	ldr	r3, [pc, #100]	; (7bf0 <CompareData+0xd8>)
    7b8c:	4a13      	ldr	r2, [pc, #76]	; (7bdc <CompareData+0xc4>)
    7b8e:	21dc      	movs	r1, #220	; 0xdc
    7b90:	4813      	ldr	r0, [pc, #76]	; (7be0 <CompareData+0xc8>)
    7b92:	4c14      	ldr	r4, [pc, #80]	; (7be4 <CompareData+0xcc>)
    7b94:	47a0      	blx	r4
      if (buffer[i] != ((pBuffer != NULL) ? *(pBuffer++) : 0xFF))
    7b96:	21ff      	movs	r1, #255	; 0xff
    7b98:	4291      	cmp	r1, r2
    7b9a:	d112      	bne.n	7bc2 <CompareData+0xaa>
    for (uint8_t i = 0U; i < bytesToRead; i++)
    7b9c:	3301      	adds	r3, #1
    7b9e:	b2db      	uxtb	r3, r3
    7ba0:	b29a      	uxth	r2, r3
    7ba2:	4296      	cmp	r6, r2
    7ba4:	d906      	bls.n	7bb4 <CompareData+0x9c>
      if (buffer[i] != ((pBuffer != NULL) ? *(pBuffer++) : 0xFF))
    7ba6:	466a      	mov	r2, sp
    7ba8:	5cd2      	ldrb	r2, [r2, r3]
    7baa:	2c00      	cmp	r4, #0
    7bac:	d0f3      	beq.n	7b96 <CompareData+0x7e>
    7bae:	7821      	ldrb	r1, [r4, #0]
    7bb0:	3401      	adds	r4, #1
    7bb2:	e7f1      	b.n	7b98 <CompareData+0x80>
        return false;

    numberOfBytes -= bytesToRead;
    7bb4:	1bbf      	subs	r7, r7, r6
    7bb6:	b2bf      	uxth	r7, r7
    address += bytesToRead;
    7bb8:	19ad      	adds	r5, r5, r6
  while(numberOfBytes)
    7bba:	2f00      	cmp	r7, #0
    7bbc:	d1c6      	bne.n	7b4c <CompareData+0x34>
  }

  return true;
    7bbe:	2001      	movs	r0, #1
    7bc0:	e000      	b.n	7bc4 <CompareData+0xac>
        return false;
    7bc2:	2000      	movs	r0, #0
}
    7bc4:	b004      	add	sp, #16
    7bc6:	bc04      	pop	{r2}
    7bc8:	4690      	mov	r8, r2
    7bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7bcc:	00000400 	.word	0x00000400
    7bd0:	00004400 	.word	0x00004400
    7bd4:	0001613f 	.word	0x0001613f
    7bd8:	00017bbc 	.word	0x00017bbc
    7bdc:	00017cc8 	.word	0x00017cc8
    7be0:	00017bcc 	.word	0x00017bcc
    7be4:	0001607d 	.word	0x0001607d
    7be8:	00017c10 	.word	0x00017c10
    7bec:	00017c2c 	.word	0x00017c2c
    7bf0:	00017c60 	.word	0x00017c60

00007bf4 <D_Nv_Read_Impl>:
{
    7bf4:	b570      	push	{r4, r5, r6, lr}
    7bf6:	0015      	movs	r5, r2
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    7bf8:	0344      	lsls	r4, r0, #13
    7bfa:	4813      	ldr	r0, [pc, #76]	; (7c48 <D_Nv_Read_Impl+0x54>)
    7bfc:	1808      	adds	r0, r1, r0
    7bfe:	1824      	adds	r4, r4, r0
  assert(address <= D_NV_MEMORY_END);
    7c00:	4a12      	ldr	r2, [pc, #72]	; (7c4c <D_Nv_Read_Impl+0x58>)
    7c02:	1e50      	subs	r0, r2, #1
    7c04:	4284      	cmp	r4, r0
    7c06:	d80d      	bhi.n	7c24 <D_Nv_Read_Impl+0x30>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    7c08:	18e0      	adds	r0, r4, r3
    7c0a:	4282      	cmp	r2, r0
    7c0c:	d310      	bcc.n	7c30 <D_Nv_Read_Impl+0x3c>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    7c0e:	18c9      	adds	r1, r1, r3
    7c10:	2280      	movs	r2, #128	; 0x80
    7c12:	0192      	lsls	r2, r2, #6
    7c14:	4291      	cmp	r1, r2
    7c16:	d811      	bhi.n	7c3c <D_Nv_Read_Impl+0x48>
  memcpy(pBuffer, (uint8_t FLASH_PTR *)address, numberOfBytes);
    7c18:	001a      	movs	r2, r3
    7c1a:	0021      	movs	r1, r4
    7c1c:	0028      	movs	r0, r5
    7c1e:	4b0c      	ldr	r3, [pc, #48]	; (7c50 <D_Nv_Read_Impl+0x5c>)
    7c20:	4798      	blx	r3
}
    7c22:	bd70      	pop	{r4, r5, r6, pc}
  assert(address <= D_NV_MEMORY_END);
    7c24:	4b0b      	ldr	r3, [pc, #44]	; (7c54 <D_Nv_Read_Impl+0x60>)
    7c26:	4a0c      	ldr	r2, [pc, #48]	; (7c58 <D_Nv_Read_Impl+0x64>)
    7c28:	2172      	movs	r1, #114	; 0x72
    7c2a:	480c      	ldr	r0, [pc, #48]	; (7c5c <D_Nv_Read_Impl+0x68>)
    7c2c:	4c0c      	ldr	r4, [pc, #48]	; (7c60 <D_Nv_Read_Impl+0x6c>)
    7c2e:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    7c30:	4b0c      	ldr	r3, [pc, #48]	; (7c64 <D_Nv_Read_Impl+0x70>)
    7c32:	4a09      	ldr	r2, [pc, #36]	; (7c58 <D_Nv_Read_Impl+0x64>)
    7c34:	2173      	movs	r1, #115	; 0x73
    7c36:	4809      	ldr	r0, [pc, #36]	; (7c5c <D_Nv_Read_Impl+0x68>)
    7c38:	4c09      	ldr	r4, [pc, #36]	; (7c60 <D_Nv_Read_Impl+0x6c>)
    7c3a:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    7c3c:	4b0a      	ldr	r3, [pc, #40]	; (7c68 <D_Nv_Read_Impl+0x74>)
    7c3e:	4a06      	ldr	r2, [pc, #24]	; (7c58 <D_Nv_Read_Impl+0x64>)
    7c40:	2174      	movs	r1, #116	; 0x74
    7c42:	4806      	ldr	r0, [pc, #24]	; (7c5c <D_Nv_Read_Impl+0x68>)
    7c44:	4c06      	ldr	r4, [pc, #24]	; (7c60 <D_Nv_Read_Impl+0x6c>)
    7c46:	47a0      	blx	r4
    7c48:	00000400 	.word	0x00000400
    7c4c:	00004400 	.word	0x00004400
    7c50:	0001613f 	.word	0x0001613f
    7c54:	00017c10 	.word	0x00017c10
    7c58:	00017c90 	.word	0x00017c90
    7c5c:	00017bcc 	.word	0x00017bcc
    7c60:	0001607d 	.word	0x0001607d
    7c64:	00017c2c 	.word	0x00017c2c
    7c68:	00017c60 	.word	0x00017c60

00007c6c <D_Nv_Write_Impl>:
{
    7c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c6e:	46de      	mov	lr, fp
    7c70:	4657      	mov	r7, sl
    7c72:	464e      	mov	r6, r9
    7c74:	4645      	mov	r5, r8
    7c76:	b5e0      	push	{r5, r6, r7, lr}
    7c78:	b093      	sub	sp, #76	; 0x4c
    7c7a:	9201      	str	r2, [sp, #4]
    7c7c:	469a      	mov	sl, r3
  uint32_t  address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    7c7e:	4c46      	ldr	r4, [pc, #280]	; (7d98 <D_Nv_Write_Impl+0x12c>)
    7c80:	190c      	adds	r4, r1, r4
    7c82:	0340      	lsls	r0, r0, #13
    7c84:	1825      	adds	r5, r4, r0
  assert(numberOfBytes);
    7c86:	2b00      	cmp	r3, #0
    7c88:	d047      	beq.n	7d1a <D_Nv_Write_Impl+0xae>
  assert(address <= D_NV_MEMORY_END);
    7c8a:	4b44      	ldr	r3, [pc, #272]	; (7d9c <D_Nv_Write_Impl+0x130>)
    7c8c:	1e5a      	subs	r2, r3, #1
    7c8e:	4295      	cmp	r5, r2
    7c90:	d849      	bhi.n	7d26 <D_Nv_Write_Impl+0xba>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    7c92:	4652      	mov	r2, sl
    7c94:	1952      	adds	r2, r2, r5
    7c96:	4293      	cmp	r3, r2
    7c98:	d34b      	bcc.n	7d32 <D_Nv_Write_Impl+0xc6>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    7c9a:	46d3      	mov	fp, sl
    7c9c:	4451      	add	r1, sl
    7c9e:	2380      	movs	r3, #128	; 0x80
    7ca0:	019b      	lsls	r3, r3, #6
    7ca2:	4299      	cmp	r1, r3
    7ca4:	d84b      	bhi.n	7d3e <D_Nv_Write_Impl+0xd2>
  if (s_pfSystemCheckCallback != NULL)
    7ca6:	4b3e      	ldr	r3, [pc, #248]	; (7da0 <D_Nv_Write_Impl+0x134>)
    7ca8:	681b      	ldr	r3, [r3, #0]
    7caa:	2b00      	cmp	r3, #0
    7cac:	d000      	beq.n	7cb0 <D_Nv_Write_Impl+0x44>
    s_pfSystemCheckCallback();
    7cae:	4798      	blx	r3
  pageOffset = address % NVMCTRL_PAGE_SIZE;
    7cb0:	273f      	movs	r7, #63	; 0x3f
    7cb2:	402f      	ands	r7, r5
  pageStart = address - pageOffset;
    7cb4:	1bec      	subs	r4, r5, r7
  numberOfPageBytes = MIN((NVMCTRL_PAGE_SIZE - pageOffset), numberOfBytes);
    7cb6:	2640      	movs	r6, #64	; 0x40
    7cb8:	1bf6      	subs	r6, r6, r7
    7cba:	455e      	cmp	r6, fp
    7cbc:	dd00      	ble.n	7cc0 <D_Nv_Write_Impl+0x54>
    7cbe:	4656      	mov	r6, sl
    7cc0:	b2b3      	uxth	r3, r6
    7cc2:	469b      	mov	fp, r3
  memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    7cc4:	2240      	movs	r2, #64	; 0x40
    7cc6:	21ff      	movs	r1, #255	; 0xff
    7cc8:	a802      	add	r0, sp, #8
    7cca:	4b36      	ldr	r3, [pc, #216]	; (7da4 <D_Nv_Write_Impl+0x138>)
    7ccc:	4798      	blx	r3
  memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    7cce:	003b      	movs	r3, r7
    7cd0:	aa02      	add	r2, sp, #8
    7cd2:	4694      	mov	ip, r2
    7cd4:	4463      	add	r3, ip
    7cd6:	9300      	str	r3, [sp, #0]
    7cd8:	0436      	lsls	r6, r6, #16
    7cda:	0c37      	lsrs	r7, r6, #16
    7cdc:	003a      	movs	r2, r7
    7cde:	9901      	ldr	r1, [sp, #4]
    7ce0:	0018      	movs	r0, r3
    7ce2:	4b31      	ldr	r3, [pc, #196]	; (7da8 <D_Nv_Write_Impl+0x13c>)
    7ce4:	4798      	blx	r3
	cpu_irq_enter_critical();
    7ce6:	4b31      	ldr	r3, [pc, #196]	; (7dac <D_Nv_Write_Impl+0x140>)
    7ce8:	4798      	blx	r3
    error_code = nvm_write_buffer(pageStart, page_buf, NVMCTRL_PAGE_SIZE);
    7cea:	4e31      	ldr	r6, [pc, #196]	; (7db0 <D_Nv_Write_Impl+0x144>)
    7cec:	2240      	movs	r2, #64	; 0x40
    7cee:	a902      	add	r1, sp, #8
    7cf0:	0020      	movs	r0, r4
    7cf2:	47b0      	blx	r6
  } while (error_code == STATUS_BUSY);
    7cf4:	2805      	cmp	r0, #5
    7cf6:	d0f9      	beq.n	7cec <D_Nv_Write_Impl+0x80>
	cpu_irq_leave_critical();
    7cf8:	4b2e      	ldr	r3, [pc, #184]	; (7db4 <D_Nv_Write_Impl+0x148>)
    7cfa:	4798      	blx	r3
  numberOfBytes -= numberOfPageBytes;
    7cfc:	4653      	mov	r3, sl
    7cfe:	465a      	mov	r2, fp
    7d00:	1a9e      	subs	r6, r3, r2
    7d02:	b2b6      	uxth	r6, r6
  address += numberOfPageBytes;
    7d04:	19ec      	adds	r4, r5, r7
  pBuffer += numberOfPageBytes;
    7d06:	9b01      	ldr	r3, [sp, #4]
    7d08:	4699      	mov	r9, r3
    7d0a:	44b9      	add	r9, r7
  while (0U < numberOfBytes)
    7d0c:	2e00      	cmp	r6, #0
    7d0e:	d03b      	beq.n	7d88 <D_Nv_Write_Impl+0x11c>
    memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    7d10:	4b24      	ldr	r3, [pc, #144]	; (7da4 <D_Nv_Write_Impl+0x138>)
    7d12:	469b      	mov	fp, r3
    memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    7d14:	4b24      	ldr	r3, [pc, #144]	; (7da8 <D_Nv_Write_Impl+0x13c>)
    7d16:	4698      	mov	r8, r3
    7d18:	e031      	b.n	7d7e <D_Nv_Write_Impl+0x112>
  assert(numberOfBytes);
    7d1a:	4b27      	ldr	r3, [pc, #156]	; (7db8 <D_Nv_Write_Impl+0x14c>)
    7d1c:	4a27      	ldr	r2, [pc, #156]	; (7dbc <D_Nv_Write_Impl+0x150>)
    7d1e:	218a      	movs	r1, #138	; 0x8a
    7d20:	4827      	ldr	r0, [pc, #156]	; (7dc0 <D_Nv_Write_Impl+0x154>)
    7d22:	4c28      	ldr	r4, [pc, #160]	; (7dc4 <D_Nv_Write_Impl+0x158>)
    7d24:	47a0      	blx	r4
  assert(address <= D_NV_MEMORY_END);
    7d26:	4b28      	ldr	r3, [pc, #160]	; (7dc8 <D_Nv_Write_Impl+0x15c>)
    7d28:	4a24      	ldr	r2, [pc, #144]	; (7dbc <D_Nv_Write_Impl+0x150>)
    7d2a:	218b      	movs	r1, #139	; 0x8b
    7d2c:	4824      	ldr	r0, [pc, #144]	; (7dc0 <D_Nv_Write_Impl+0x154>)
    7d2e:	4c25      	ldr	r4, [pc, #148]	; (7dc4 <D_Nv_Write_Impl+0x158>)
    7d30:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    7d32:	4b26      	ldr	r3, [pc, #152]	; (7dcc <D_Nv_Write_Impl+0x160>)
    7d34:	4a21      	ldr	r2, [pc, #132]	; (7dbc <D_Nv_Write_Impl+0x150>)
    7d36:	218c      	movs	r1, #140	; 0x8c
    7d38:	4821      	ldr	r0, [pc, #132]	; (7dc0 <D_Nv_Write_Impl+0x154>)
    7d3a:	4c22      	ldr	r4, [pc, #136]	; (7dc4 <D_Nv_Write_Impl+0x158>)
    7d3c:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    7d3e:	4b24      	ldr	r3, [pc, #144]	; (7dd0 <D_Nv_Write_Impl+0x164>)
    7d40:	4a1e      	ldr	r2, [pc, #120]	; (7dbc <D_Nv_Write_Impl+0x150>)
    7d42:	218d      	movs	r1, #141	; 0x8d
    7d44:	481e      	ldr	r0, [pc, #120]	; (7dc0 <D_Nv_Write_Impl+0x154>)
    7d46:	4c1f      	ldr	r4, [pc, #124]	; (7dc4 <D_Nv_Write_Impl+0x158>)
    7d48:	47a0      	blx	r4
    numberOfPageBytes = MIN(NVMCTRL_PAGE_SIZE, numberOfBytes);
    7d4a:	b29f      	uxth	r7, r3
    memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    7d4c:	2240      	movs	r2, #64	; 0x40
    7d4e:	21ff      	movs	r1, #255	; 0xff
    7d50:	a802      	add	r0, sp, #8
    7d52:	47d8      	blx	fp
    memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    7d54:	003a      	movs	r2, r7
    7d56:	4649      	mov	r1, r9
    7d58:	9800      	ldr	r0, [sp, #0]
    7d5a:	47c0      	blx	r8
	cpu_irq_enter_critical();
    7d5c:	4b13      	ldr	r3, [pc, #76]	; (7dac <D_Nv_Write_Impl+0x140>)
    7d5e:	4798      	blx	r3
      error_code = nvm_write_buffer(address, page_buf, NVMCTRL_PAGE_SIZE);
    7d60:	4d13      	ldr	r5, [pc, #76]	; (7db0 <D_Nv_Write_Impl+0x144>)
    7d62:	2240      	movs	r2, #64	; 0x40
    7d64:	a902      	add	r1, sp, #8
    7d66:	0020      	movs	r0, r4
    7d68:	47a8      	blx	r5
    } while (error_code == STATUS_BUSY);
    7d6a:	2805      	cmp	r0, #5
    7d6c:	d0f9      	beq.n	7d62 <D_Nv_Write_Impl+0xf6>
	cpu_irq_leave_critical();
    7d6e:	4b11      	ldr	r3, [pc, #68]	; (7db4 <D_Nv_Write_Impl+0x148>)
    7d70:	4798      	blx	r3
    numberOfBytes -= numberOfPageBytes;
    7d72:	1bf6      	subs	r6, r6, r7
    7d74:	b2b6      	uxth	r6, r6
    address += numberOfPageBytes;
    7d76:	19e4      	adds	r4, r4, r7
    pBuffer += numberOfPageBytes;
    7d78:	44b9      	add	r9, r7
  while (0U < numberOfBytes)
    7d7a:	2e00      	cmp	r6, #0
    7d7c:	d004      	beq.n	7d88 <D_Nv_Write_Impl+0x11c>
    numberOfPageBytes = MIN(NVMCTRL_PAGE_SIZE, numberOfBytes);
    7d7e:	1c33      	adds	r3, r6, #0
    7d80:	2e40      	cmp	r6, #64	; 0x40
    7d82:	d9e2      	bls.n	7d4a <D_Nv_Write_Impl+0xde>
    7d84:	2340      	movs	r3, #64	; 0x40
    7d86:	e7e0      	b.n	7d4a <D_Nv_Write_Impl+0xde>
}
    7d88:	b013      	add	sp, #76	; 0x4c
    7d8a:	bc3c      	pop	{r2, r3, r4, r5}
    7d8c:	4690      	mov	r8, r2
    7d8e:	4699      	mov	r9, r3
    7d90:	46a2      	mov	sl, r4
    7d92:	46ab      	mov	fp, r5
    7d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7d96:	46c0      	nop			; (mov r8, r8)
    7d98:	00000400 	.word	0x00000400
    7d9c:	00004400 	.word	0x00004400
    7da0:	200000f8 	.word	0x200000f8
    7da4:	00016151 	.word	0x00016151
    7da8:	0001613f 	.word	0x0001613f
    7dac:	000044f9 	.word	0x000044f9
    7db0:	00004a49 	.word	0x00004a49
    7db4:	00004539 	.word	0x00004539
    7db8:	00017bbc 	.word	0x00017bbc
    7dbc:	00017ca0 	.word	0x00017ca0
    7dc0:	00017bcc 	.word	0x00017bcc
    7dc4:	0001607d 	.word	0x0001607d
    7dc8:	00017c10 	.word	0x00017c10
    7dcc:	00017c2c 	.word	0x00017c2c
    7dd0:	00017c60 	.word	0x00017c60

00007dd4 <D_Nv_EraseSector_Impl>:
{
    7dd4:	b570      	push	{r4, r5, r6, lr}
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE;
    7dd6:	0344      	lsls	r4, r0, #13
    7dd8:	480c      	ldr	r0, [pc, #48]	; (7e0c <D_Nv_EraseSector_Impl+0x38>)
    7dda:	1824      	adds	r4, r4, r0
  address &= ~(NVMCTRL_ROW_SIZE - 1);
    7ddc:	23ff      	movs	r3, #255	; 0xff
    7dde:	439c      	bics	r4, r3
  assert(address <= D_NV_MEMORY_END);
    7de0:	4b0b      	ldr	r3, [pc, #44]	; (7e10 <D_Nv_EraseSector_Impl+0x3c>)
    7de2:	3b01      	subs	r3, #1
    7de4:	2280      	movs	r2, #128	; 0x80
    7de6:	0192      	lsls	r2, r2, #6
    7de8:	18a6      	adds	r6, r4, r2
    7dea:	429c      	cmp	r4, r3
    7dec:	d807      	bhi.n	7dfe <D_Nv_EraseSector_Impl+0x2a>
    nvm_erase_row (address);
    7dee:	4d09      	ldr	r5, [pc, #36]	; (7e14 <D_Nv_EraseSector_Impl+0x40>)
    7df0:	0020      	movs	r0, r4
    7df2:	47a8      	blx	r5
    address += NVMCTRL_ROW_SIZE;
    7df4:	3401      	adds	r4, #1
    7df6:	34ff      	adds	r4, #255	; 0xff
  for (uint8_t i = 0U; i < (D_NV_SECTOR_SIZE / NVMCTRL_ROW_SIZE); i++)
    7df8:	42b4      	cmp	r4, r6
    7dfa:	d1f9      	bne.n	7df0 <D_Nv_EraseSector_Impl+0x1c>
}
    7dfc:	bd70      	pop	{r4, r5, r6, pc}
  assert(address <= D_NV_MEMORY_END);
    7dfe:	4b06      	ldr	r3, [pc, #24]	; (7e18 <D_Nv_EraseSector_Impl+0x44>)
    7e00:	4a06      	ldr	r2, [pc, #24]	; (7e1c <D_Nv_EraseSector_Impl+0x48>)
    7e02:	21c2      	movs	r1, #194	; 0xc2
    7e04:	4806      	ldr	r0, [pc, #24]	; (7e20 <D_Nv_EraseSector_Impl+0x4c>)
    7e06:	4c07      	ldr	r4, [pc, #28]	; (7e24 <D_Nv_EraseSector_Impl+0x50>)
    7e08:	47a0      	blx	r4
    7e0a:	46c0      	nop			; (mov r8, r8)
    7e0c:	00000400 	.word	0x00000400
    7e10:	00004400 	.word	0x00004400
    7e14:	00004b21 	.word	0x00004b21
    7e18:	00017c10 	.word	0x00017c10
    7e1c:	00017cb0 	.word	0x00017cb0
    7e20:	00017bcc 	.word	0x00017bcc
    7e24:	0001607d 	.word	0x0001607d

00007e28 <D_Nv_IsEmpty_Impl>:
    \param numberOfBytes The number of bytes to check
    \returns true if the range is empty, FALSE otherwise.
    \note Sector crossing is not permitted
*/
bool D_Nv_IsEmpty(uint8_t sector, uint16_t offset, D_Nv_Size_t numberOfBytes)
{
    7e28:	b510      	push	{r4, lr}
    7e2a:	0013      	movs	r3, r2
  return CompareData(sector, offset, NULL, numberOfBytes);
    7e2c:	2200      	movs	r2, #0
    7e2e:	4c01      	ldr	r4, [pc, #4]	; (7e34 <D_Nv_IsEmpty_Impl+0xc>)
    7e30:	47a0      	blx	r4
}
    7e32:	bd10      	pop	{r4, pc}
    7e34:	00007b19 	.word	0x00007b19

00007e38 <D_Nv_IsEqual_Impl>:
    \param[in] pBuffer The start address of the buffer that contains the data to compare with
    \param numberOfBytes The number of bytes to compare
    \note offset+numberOfBytes must be <= D_NV_SECTOR_SIZE (meaning sector crossing is not permitted)
*/
bool D_Nv_IsEqual(uint8_t sector, uint16_t offset, uint8_t *pBuffer, D_Nv_Size_t numberOfBytes)
{
    7e38:	b510      	push	{r4, lr}
  return CompareData(sector, offset, pBuffer, numberOfBytes);
    7e3a:	4c01      	ldr	r4, [pc, #4]	; (7e40 <D_Nv_IsEqual_Impl+0x8>)
    7e3c:	47a0      	blx	r4
}
    7e3e:	bd10      	pop	{r4, pc}
    7e40:	00007b19 	.word	0x00007b19

00007e44 <PowerSupplyTooLow>:
/** Check the power supply.
    \returns TRUE if the power supply is too low, FALSE when the the power
             supply is OK or when there is no callback installed.
*/
static bool PowerSupplyTooLow()
{
    7e44:	b510      	push	{r4, lr}
    bool result = false;
    if ( s_powerSupplyCheckingFunction != NULL )
    7e46:	4b05      	ldr	r3, [pc, #20]	; (7e5c <PowerSupplyTooLow+0x18>)
    7e48:	681b      	ldr	r3, [r3, #0]
    7e4a:	2b00      	cmp	r3, #0
    7e4c:	d004      	beq.n	7e58 <PowerSupplyTooLow+0x14>
    {
        if ( !s_powerSupplyCheckingFunction() )
    7e4e:	4798      	blx	r3
    7e50:	2301      	movs	r3, #1
    7e52:	4058      	eors	r0, r3
    7e54:	b2c0      	uxtb	r0, r0
        {
            result = true;
        }
    }
    return result;
}
    7e56:	bd10      	pop	{r4, pc}
    bool result = false;
    7e58:	2000      	movs	r0, #0
    7e5a:	e7fc      	b.n	7e56 <PowerSupplyTooLow+0x12>
    7e5c:	20000264 	.word	0x20000264

00007e60 <UpdateSectorHead>:
*/

static void UpdateSectorHead(uint16_t increment, ItemAlignment_t itemAlignment )
{
    // Adjust the sector head according to the increment and alignment given
    switch(itemAlignment)
    7e60:	2901      	cmp	r1, #1
    7e62:	d009      	beq.n	7e78 <UpdateSectorHead+0x18>
    7e64:	2900      	cmp	r1, #0
    7e66:	d002      	beq.n	7e6e <UpdateSectorHead+0xe>
    7e68:	2902      	cmp	r1, #2
    7e6a:	d00d      	beq.n	7e88 <UpdateSectorHead+0x28>
           s_sectorHead = (s_sectorHead + increment + 0x003Fu) & 0xFFC0u;
           break;
        default:
           break;
    }
}
    7e6c:	4770      	bx	lr
           s_sectorHead = (s_sectorHead + increment);
    7e6e:	4b0a      	ldr	r3, [pc, #40]	; (7e98 <UpdateSectorHead+0x38>)
    7e70:	881a      	ldrh	r2, [r3, #0]
    7e72:	1880      	adds	r0, r0, r2
    7e74:	8018      	strh	r0, [r3, #0]
           break;
    7e76:	e7f9      	b.n	7e6c <UpdateSectorHead+0xc>
           s_sectorHead = (s_sectorHead + increment + 0x000Fu) & 0xFFF0u;
    7e78:	4a07      	ldr	r2, [pc, #28]	; (7e98 <UpdateSectorHead+0x38>)
    7e7a:	8813      	ldrh	r3, [r2, #0]
    7e7c:	330f      	adds	r3, #15
    7e7e:	18c0      	adds	r0, r0, r3
    7e80:	230f      	movs	r3, #15
    7e82:	4398      	bics	r0, r3
    7e84:	8010      	strh	r0, [r2, #0]
           break;
    7e86:	e7f1      	b.n	7e6c <UpdateSectorHead+0xc>
           s_sectorHead = (s_sectorHead + increment + 0x003Fu) & 0xFFC0u;
    7e88:	4a03      	ldr	r2, [pc, #12]	; (7e98 <UpdateSectorHead+0x38>)
    7e8a:	8813      	ldrh	r3, [r2, #0]
    7e8c:	333f      	adds	r3, #63	; 0x3f
    7e8e:	18c0      	adds	r0, r0, r3
    7e90:	233f      	movs	r3, #63	; 0x3f
    7e92:	4398      	bics	r0, r3
    7e94:	8010      	strh	r0, [r2, #0]
}
    7e96:	e7e9      	b.n	7e6c <UpdateSectorHead+0xc>
    7e98:	2000026a 	.word	0x2000026a

00007e9c <ComputeCrc>:
    // item not found
    return 0x0000u;
}

static uint16_t ComputeCrc(uint8_t* pData, uint16_t length, uint16_t crc)
{
    7e9c:	b530      	push	{r4, r5, lr}
    for ( /* empty */ ; length != 0u; length-- )
    7e9e:	2900      	cmp	r1, #0
    7ea0:	d019      	beq.n	7ed6 <ComputeCrc+0x3a>
    {
        uint8_t x;
        uint8_t data;

        if (pData == NULL)
            data = 0xFF;
    7ea2:	24ff      	movs	r4, #255	; 0xff
    7ea4:	e013      	b.n	7ece <ComputeCrc+0x32>
    7ea6:	0023      	movs	r3, r4
        else
            data = *pData;

        x = (uint8_t) ((crc >> 8) ^ data);
    7ea8:	0a15      	lsrs	r5, r2, #8
    7eaa:	406b      	eors	r3, r5
        x = x ^ (x >> 4);
    7eac:	091d      	lsrs	r5, r3, #4
    7eae:	406b      	eors	r3, r5
        crc = (crc << 8) ^ ((uint16_t) x << 12) ^ ((uint16_t) x << 5) ^ (uint16_t) x;
    7eb0:	0212      	lsls	r2, r2, #8
    7eb2:	405a      	eors	r2, r3
    7eb4:	031d      	lsls	r5, r3, #12
    7eb6:	406a      	eors	r2, r5
    7eb8:	015b      	lsls	r3, r3, #5
    7eba:	405a      	eors	r2, r3
    7ebc:	b292      	uxth	r2, r2

        if ( pData != NULL )
          pData++;
    7ebe:	0003      	movs	r3, r0
    7ec0:	1e5d      	subs	r5, r3, #1
    7ec2:	41ab      	sbcs	r3, r5
    7ec4:	18c0      	adds	r0, r0, r3
    for ( /* empty */ ; length != 0u; length-- )
    7ec6:	3901      	subs	r1, #1
    7ec8:	b289      	uxth	r1, r1
    7eca:	2900      	cmp	r1, #0
    7ecc:	d003      	beq.n	7ed6 <ComputeCrc+0x3a>
        if (pData == NULL)
    7ece:	2800      	cmp	r0, #0
    7ed0:	d0e9      	beq.n	7ea6 <ComputeCrc+0xa>
            data = *pData;
    7ed2:	7803      	ldrb	r3, [r0, #0]
    7ed4:	e7e8      	b.n	7ea8 <ComputeCrc+0xc>
    }

    return crc;
}
    7ed6:	0010      	movs	r0, r2
    7ed8:	bd30      	pop	{r4, r5, pc}
    7eda:	Address 0x00007eda is out of bounds.


00007edc <GatherData>:
       be copied to the flash memory \ref s_sectorHead in sector \ref s_sector.

*/

static bool GatherData(uint8_t sourceSector, uint16_t lastBlockPointer, uint16_t offset, uint16_t length, void* pData)
{
    7edc:	b5f0      	push	{r4, r5, r6, r7, lr}
    7ede:	46de      	mov	lr, fp
    7ee0:	4657      	mov	r7, sl
    7ee2:	b580      	push	{r7, lr}
    7ee4:	b089      	sub	sp, #36	; 0x24
    7ee6:	9001      	str	r0, [sp, #4]
    7ee8:	9102      	str	r1, [sp, #8]
    7eea:	4693      	mov	fp, r2
    uint16_t blockStart;
    uint16_t blockEnd;
    uint16_t count;

    // prepare the correct pointer
    if ( pData != NULL )
    7eec:	9a10      	ldr	r2, [sp, #64]	; 0x40
    7eee:	2a00      	cmp	r2, #0
    7ef0:	d00d      	beq.n	7f0e <GatherData+0x32>
    {
        pDestination = (uint8_t*) pData + length;
    7ef2:	4692      	mov	sl, r2
    7ef4:	449a      	add	sl, r3

    // [readStart, readEnd> is the range of data that can be read during the current
    // pass over the blocks (the range includes readStart, but not readEnd).
    // it is initialized with the requested range
    uint16_t readStart = offset;
    uint16_t readEnd = offset + length;
    7ef6:	445b      	add	r3, fp
    7ef8:	b29d      	uxth	r5, r3

    // continue until we have all the data that was requested
    while ( readStart != readEnd )
    7efa:	465e      	mov	r6, fp
    7efc:	9c02      	ldr	r4, [sp, #8]
            sourcePointer -= count;
            pDestination -= count;
            D_Nv_Read(sourceSector, sourcePointer, (uint8_t*)pDestination, count);
        }
    }
    return true;
    7efe:	2001      	movs	r0, #1
    while ( readStart != readEnd )
    7f00:	45ab      	cmp	fp, r5
    7f02:	d03e      	beq.n	7f82 <GatherData+0xa6>
            D_Nv_Read(sourceSector, currentBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    7f04:	4f22      	ldr	r7, [pc, #136]	; (7f90 <GatherData+0xb4>)
            if ( currentBlockPointer == 0x0000u )
    7f06:	2c00      	cmp	r4, #0
    7f08:	d108      	bne.n	7f1c <GatherData+0x40>
                return false;
    7f0a:	2000      	movs	r0, #0
    7f0c:	e039      	b.n	7f82 <GatherData+0xa6>
    uint8_t* pDestination = NULL;
    7f0e:	2200      	movs	r2, #0
    7f10:	4692      	mov	sl, r2
    7f12:	e7f0      	b.n	7ef6 <GatherData+0x1a>
            currentBlockPointer = blockHeader.previousBlock;
    7f14:	ab04      	add	r3, sp, #16
    7f16:	895c      	ldrh	r4, [r3, #10]
            if ( currentBlockPointer == 0x0000u )
    7f18:	2c00      	cmp	r4, #0
    7f1a:	d031      	beq.n	7f80 <GatherData+0xa4>
            D_Nv_Read(sourceSector, currentBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    7f1c:	2310      	movs	r3, #16
    7f1e:	aa04      	add	r2, sp, #16
    7f20:	0021      	movs	r1, r4
    7f22:	9801      	ldr	r0, [sp, #4]
    7f24:	47b8      	blx	r7
            blockStart = blockHeader.blockOffset;
    7f26:	ab04      	add	r3, sp, #16
    7f28:	889a      	ldrh	r2, [r3, #4]
            if ( (readEnd <= blockStart) || (readStart >= blockEnd) )
    7f2a:	42aa      	cmp	r2, r5
    7f2c:	d2f2      	bcs.n	7f14 <GatherData+0x38>
            blockEnd = blockHeader.blockOffset + blockHeader.blockLength;
    7f2e:	88db      	ldrh	r3, [r3, #6]
    7f30:	18d3      	adds	r3, r2, r3
    7f32:	b29b      	uxth	r3, r3
            if ( (readEnd <= blockStart) || (readStart >= blockEnd) )
    7f34:	42b3      	cmp	r3, r6
    7f36:	d9ed      	bls.n	7f14 <GatherData+0x38>
            else if ( readEnd > blockEnd )
    7f38:	42ab      	cmp	r3, r5
    7f3a:	d201      	bcs.n	7f40 <GatherData+0x64>
                readStart = blockEnd;
    7f3c:	001e      	movs	r6, r3
    7f3e:	e7e9      	b.n	7f14 <GatherData+0x38>
        uint16_t sourcePointer = (currentBlockPointer + BLOCK_HEADER_SIZE) + (readEnd - blockStart);
    7f40:	1aa9      	subs	r1, r5, r2
    7f42:	b289      	uxth	r1, r1
        if ( readStart < blockStart )
    7f44:	42b2      	cmp	r2, r6
    7f46:	d915      	bls.n	7f74 <GatherData+0x98>
            currentBlockPointer = blockHeader.previousBlock;
    7f48:	ab04      	add	r3, sp, #16
    7f4a:	895b      	ldrh	r3, [r3, #10]
    7f4c:	9303      	str	r3, [sp, #12]
            count = readEnd - blockStart;
    7f4e:	000b      	movs	r3, r1
        readEnd -= count;
    7f50:	1aed      	subs	r5, r5, r3
    7f52:	b2ad      	uxth	r5, r5
        if ( pDestination != NULL)
    7f54:	4652      	mov	r2, sl
    7f56:	2a00      	cmp	r2, #0
    7f58:	d008      	beq.n	7f6c <GatherData+0x90>
        uint16_t sourcePointer = (currentBlockPointer + BLOCK_HEADER_SIZE) + (readEnd - blockStart);
    7f5a:	3410      	adds	r4, #16
    7f5c:	1909      	adds	r1, r1, r4
            pDestination -= count;
    7f5e:	1ad2      	subs	r2, r2, r3
    7f60:	4692      	mov	sl, r2
            sourcePointer -= count;
    7f62:	1ac9      	subs	r1, r1, r3
            D_Nv_Read(sourceSector, sourcePointer, (uint8_t*)pDestination, count);
    7f64:	b289      	uxth	r1, r1
    7f66:	9801      	ldr	r0, [sp, #4]
    7f68:	4c09      	ldr	r4, [pc, #36]	; (7f90 <GatherData+0xb4>)
    7f6a:	47a0      	blx	r4
    while ( readStart != readEnd )
    7f6c:	42ae      	cmp	r6, r5
    7f6e:	d00d      	beq.n	7f8c <GatherData+0xb0>
    7f70:	9c03      	ldr	r4, [sp, #12]
    7f72:	e7c8      	b.n	7f06 <GatherData+0x2a>
            count = readEnd - readStart;
    7f74:	1bab      	subs	r3, r5, r6
    7f76:	b29b      	uxth	r3, r3
            readStart = offset;
    7f78:	465e      	mov	r6, fp
            currentBlockPointer = lastBlockPointer;
    7f7a:	9a02      	ldr	r2, [sp, #8]
    7f7c:	9203      	str	r2, [sp, #12]
    7f7e:	e7e7      	b.n	7f50 <GatherData+0x74>
                return false;
    7f80:	2000      	movs	r0, #0
}
    7f82:	b009      	add	sp, #36	; 0x24
    7f84:	bc0c      	pop	{r2, r3}
    7f86:	4692      	mov	sl, r2
    7f88:	469b      	mov	fp, r3
    7f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return true;
    7f8c:	2001      	movs	r0, #1
    7f8e:	e7f8      	b.n	7f82 <GatherData+0xa6>
    7f90:	00007bf5 	.word	0x00007bf5

00007f94 <ComputeDataCrc>:
{
    7f94:	b5f0      	push	{r4, r5, r6, r7, lr}
    7f96:	46de      	mov	lr, fp
    7f98:	4647      	mov	r7, r8
    7f9a:	b580      	push	{r7, lr}
    7f9c:	b087      	sub	sp, #28
    7f9e:	9004      	str	r0, [sp, #16]
    7fa0:	9105      	str	r1, [sp, #20]
    length = pBlockHeader->blockLength;
    7fa2:	7995      	ldrb	r5, [r2, #6]
    7fa4:	79d3      	ldrb	r3, [r2, #7]
    7fa6:	021b      	lsls	r3, r3, #8
    7fa8:	431d      	orrs	r5, r3
    offset = pBlockHeader->blockOffset;
    7faa:	7917      	ldrb	r7, [r2, #4]
    7fac:	7953      	ldrb	r3, [r2, #5]
    7fae:	021b      	lsls	r3, r3, #8
    7fb0:	431f      	orrs	r7, r3
    for(int8_t i= (length/sizeof(dataBlock)); i>=0; i--)
    7fb2:	0a2c      	lsrs	r4, r5, #8
    7fb4:	b264      	sxtb	r4, r4
    7fb6:	2c00      	cmp	r4, #0
    7fb8:	db2f      	blt.n	801a <ComputeDataCrc+0x86>
    7fba:	4b1c      	ldr	r3, [pc, #112]	; (802c <ComputeDataCrc+0x98>)
    7fbc:	9303      	str	r3, [sp, #12]
            crc = ComputeCrc(((uint8_t*) &dataBlock), dataLength, crc);
    7fbe:	4b1c      	ldr	r3, [pc, #112]	; (8030 <ComputeDataCrc+0x9c>)
    7fc0:	4698      	mov	r8, r3
    7fc2:	e011      	b.n	7fe8 <ComputeDataCrc+0x54>
        if (dataLength == 0)
    7fc4:	2d00      	cmp	r5, #0
    7fc6:	d02a      	beq.n	801e <ComputeDataCrc+0x8a>
        if (GatherData(sourceSector, blockPointer, offset, dataLength, dataBlock))
    7fc8:	4b1a      	ldr	r3, [pc, #104]	; (8034 <ComputeDataCrc+0xa0>)
    7fca:	9300      	str	r3, [sp, #0]
    7fcc:	002b      	movs	r3, r5
    7fce:	003a      	movs	r2, r7
    7fd0:	9905      	ldr	r1, [sp, #20]
    7fd2:	9804      	ldr	r0, [sp, #16]
    7fd4:	4e18      	ldr	r6, [pc, #96]	; (8038 <ComputeDataCrc+0xa4>)
    7fd6:	47b0      	blx	r6
    7fd8:	2800      	cmp	r0, #0
    7fda:	d020      	beq.n	801e <ComputeDataCrc+0x8a>
    7fdc:	0029      	movs	r1, r5
    7fde:	e015      	b.n	800c <ComputeDataCrc+0x78>
    7fe0:	3c01      	subs	r4, #1
    7fe2:	b264      	sxtb	r4, r4
    for(int8_t i= (length/sizeof(dataBlock)); i>=0; i--)
    7fe4:	1c63      	adds	r3, r4, #1
    7fe6:	d01a      	beq.n	801e <ComputeDataCrc+0x8a>
        if (i)
    7fe8:	2c00      	cmp	r4, #0
    7fea:	d0eb      	beq.n	7fc4 <ComputeDataCrc+0x30>
            length = length - sizeof(dataBlock);
    7fec:	3d01      	subs	r5, #1
    7fee:	3dff      	subs	r5, #255	; 0xff
    7ff0:	b2ad      	uxth	r5, r5
        if (GatherData(sourceSector, blockPointer, offset, dataLength, dataBlock))
    7ff2:	4b10      	ldr	r3, [pc, #64]	; (8034 <ComputeDataCrc+0xa0>)
    7ff4:	9300      	str	r3, [sp, #0]
    7ff6:	2380      	movs	r3, #128	; 0x80
    7ff8:	005b      	lsls	r3, r3, #1
    7ffa:	003a      	movs	r2, r7
    7ffc:	9905      	ldr	r1, [sp, #20]
    7ffe:	9804      	ldr	r0, [sp, #16]
    8000:	4e0d      	ldr	r6, [pc, #52]	; (8038 <ComputeDataCrc+0xa4>)
    8002:	47b0      	blx	r6
    8004:	2800      	cmp	r0, #0
    8006:	d0eb      	beq.n	7fe0 <ComputeDataCrc+0x4c>
            dataLength = sizeof(dataBlock);
    8008:	2180      	movs	r1, #128	; 0x80
    800a:	0049      	lsls	r1, r1, #1
            offset = offset+dataLength;
    800c:	187f      	adds	r7, r7, r1
    800e:	b2bf      	uxth	r7, r7
            crc = ComputeCrc(((uint8_t*) &dataBlock), dataLength, crc);
    8010:	9a03      	ldr	r2, [sp, #12]
    8012:	4808      	ldr	r0, [pc, #32]	; (8034 <ComputeDataCrc+0xa0>)
    8014:	47c0      	blx	r8
    8016:	9003      	str	r0, [sp, #12]
    8018:	e7e2      	b.n	7fe0 <ComputeDataCrc+0x4c>
    uint16_t crc = 0xFFFFu;
    801a:	4b04      	ldr	r3, [pc, #16]	; (802c <ComputeDataCrc+0x98>)
    801c:	9303      	str	r3, [sp, #12]
}
    801e:	9803      	ldr	r0, [sp, #12]
    8020:	b007      	add	sp, #28
    8022:	bc0c      	pop	{r2, r3}
    8024:	4690      	mov	r8, r2
    8026:	469b      	mov	fp, r3
    8028:	bdf0      	pop	{r4, r5, r6, r7, pc}
    802a:	46c0      	nop			; (mov r8, r8)
    802c:	0000ffff 	.word	0x0000ffff
    8030:	00007e9d 	.word	0x00007e9d
    8034:	2000012c 	.word	0x2000012c
    8038:	00007edd 	.word	0x00007edd

0000803c <FindItemCache>:
{
    803c:	b570      	push	{r4, r5, r6, lr}
    for ( uint8_t cacheIndex = 0u; cacheIndex < s_itemCount; cacheIndex++ )
    803e:	4b16      	ldr	r3, [pc, #88]	; (8098 <FindItemCache+0x5c>)
    8040:	781c      	ldrb	r4, [r3, #0]
    8042:	2c00      	cmp	r4, #0
    8044:	d026      	beq.n	8094 <FindItemCache+0x58>
        if ( cache->id == id )
    8046:	4b15      	ldr	r3, [pc, #84]	; (809c <FindItemCache+0x60>)
    8048:	881b      	ldrh	r3, [r3, #0]
    804a:	4283      	cmp	r3, r0
    804c:	d016      	beq.n	807c <FindItemCache+0x40>
    804e:	2301      	movs	r3, #1
    8050:	4e12      	ldr	r6, [pc, #72]	; (809c <FindItemCache+0x60>)
    for ( uint8_t cacheIndex = 0u; cacheIndex < s_itemCount; cacheIndex++ )
    8052:	b2da      	uxtb	r2, r3
    8054:	4294      	cmp	r4, r2
    8056:	d91b      	bls.n	8090 <FindItemCache+0x54>
        Item_t *cache = &s_itemCache[cacheIndex];
    8058:	001d      	movs	r5, r3
        if ( cache->id == id )
    805a:	1c59      	adds	r1, r3, #1
    805c:	009a      	lsls	r2, r3, #2
    805e:	5ab2      	ldrh	r2, [r6, r2]
    8060:	4282      	cmp	r2, r0
    8062:	d001      	beq.n	8068 <FindItemCache+0x2c>
    8064:	000b      	movs	r3, r1
    8066:	e7f4      	b.n	8052 <FindItemCache+0x16>
        Item_t *cache = &s_itemCache[cacheIndex];
    8068:	009b      	lsls	r3, r3, #2
    806a:	480c      	ldr	r0, [pc, #48]	; (809c <FindItemCache+0x60>)
    806c:	18c0      	adds	r0, r0, r3
            assert(cache->lastBlock != 0x0000);
    806e:	00ad      	lsls	r5, r5, #2
    8070:	4b0a      	ldr	r3, [pc, #40]	; (809c <FindItemCache+0x60>)
    8072:	195d      	adds	r5, r3, r5
    8074:	886b      	ldrh	r3, [r5, #2]
    8076:	2b00      	cmp	r3, #0
    8078:	d003      	beq.n	8082 <FindItemCache+0x46>
}
    807a:	bd70      	pop	{r4, r5, r6, pc}
        Item_t *cache = &s_itemCache[cacheIndex];
    807c:	4807      	ldr	r0, [pc, #28]	; (809c <FindItemCache+0x60>)
    807e:	2500      	movs	r5, #0
    8080:	e7f5      	b.n	806e <FindItemCache+0x32>
            assert(cache->lastBlock != 0x0000);
    8082:	4b07      	ldr	r3, [pc, #28]	; (80a0 <FindItemCache+0x64>)
    8084:	4a07      	ldr	r2, [pc, #28]	; (80a4 <FindItemCache+0x68>)
    8086:	218c      	movs	r1, #140	; 0x8c
    8088:	31ff      	adds	r1, #255	; 0xff
    808a:	4807      	ldr	r0, [pc, #28]	; (80a8 <FindItemCache+0x6c>)
    808c:	4c07      	ldr	r4, [pc, #28]	; (80ac <FindItemCache+0x70>)
    808e:	47a0      	blx	r4
    return NULL;
    8090:	2000      	movs	r0, #0
    8092:	e7f2      	b.n	807a <FindItemCache+0x3e>
    8094:	2000      	movs	r0, #0
    8096:	e7f0      	b.n	807a <FindItemCache+0x3e>
    8098:	20000260 	.word	0x20000260
    809c:	20000244 	.word	0x20000244
    80a0:	00017d28 	.word	0x00017d28
    80a4:	00017e14 	.word	0x00017e14
    80a8:	00017d44 	.word	0x00017d44
    80ac:	0001607d 	.word	0x0001607d

000080b0 <FindItem>:
{
    80b0:	b510      	push	{r4, lr}
    Item_t *cache = FindItemCache(id);
    80b2:	4b05      	ldr	r3, [pc, #20]	; (80c8 <FindItem+0x18>)
    80b4:	4798      	blx	r3
    if (cache)
    80b6:	2800      	cmp	r0, #0
    80b8:	d004      	beq.n	80c4 <FindItem+0x14>
        return cache->lastBlock;
    80ba:	7883      	ldrb	r3, [r0, #2]
    80bc:	78c0      	ldrb	r0, [r0, #3]
    80be:	0200      	lsls	r0, r0, #8
    80c0:	4318      	orrs	r0, r3
}
    80c2:	bd10      	pop	{r4, pc}
    return 0x0000u;
    80c4:	2000      	movs	r0, #0
    80c6:	e7fc      	b.n	80c2 <FindItem+0x12>
    80c8:	0000803d 	.word	0x0000803d

000080cc <CreateItemCache>:
{
    80cc:	b510      	push	{r4, lr}
    80ce:	0004      	movs	r4, r0
    assert(FindItemCache(id) == NULL);
    80d0:	4b0e      	ldr	r3, [pc, #56]	; (810c <CreateItemCache+0x40>)
    80d2:	4798      	blx	r3
    80d4:	2800      	cmp	r0, #0
    80d6:	d10b      	bne.n	80f0 <CreateItemCache+0x24>
    assert(s_itemCount < MAX_ITEM_COUNT);
    80d8:	4b0d      	ldr	r3, [pc, #52]	; (8110 <CreateItemCache+0x44>)
    80da:	781b      	ldrb	r3, [r3, #0]
    80dc:	2b06      	cmp	r3, #6
    80de:	d80e      	bhi.n	80fe <CreateItemCache+0x32>
    Item_t *cache = &s_itemCache[s_itemCount++];
    80e0:	1c59      	adds	r1, r3, #1
    80e2:	4a0b      	ldr	r2, [pc, #44]	; (8110 <CreateItemCache+0x44>)
    80e4:	7011      	strb	r1, [r2, #0]
    cache->id = id;
    80e6:	480b      	ldr	r0, [pc, #44]	; (8114 <CreateItemCache+0x48>)
    80e8:	009b      	lsls	r3, r3, #2
    80ea:	521c      	strh	r4, [r3, r0]
    Item_t *cache = &s_itemCache[s_itemCount++];
    80ec:	18c0      	adds	r0, r0, r3
}
    80ee:	bd10      	pop	{r4, pc}
    assert(FindItemCache(id) == NULL);
    80f0:	4b09      	ldr	r3, [pc, #36]	; (8118 <CreateItemCache+0x4c>)
    80f2:	4a0a      	ldr	r2, [pc, #40]	; (811c <CreateItemCache+0x50>)
    80f4:	21cc      	movs	r1, #204	; 0xcc
    80f6:	0049      	lsls	r1, r1, #1
    80f8:	4809      	ldr	r0, [pc, #36]	; (8120 <CreateItemCache+0x54>)
    80fa:	4c0a      	ldr	r4, [pc, #40]	; (8124 <CreateItemCache+0x58>)
    80fc:	47a0      	blx	r4
    assert(s_itemCount < MAX_ITEM_COUNT);
    80fe:	4b0a      	ldr	r3, [pc, #40]	; (8128 <CreateItemCache+0x5c>)
    8100:	4a06      	ldr	r2, [pc, #24]	; (811c <CreateItemCache+0x50>)
    8102:	219a      	movs	r1, #154	; 0x9a
    8104:	31ff      	adds	r1, #255	; 0xff
    8106:	4806      	ldr	r0, [pc, #24]	; (8120 <CreateItemCache+0x54>)
    8108:	4c06      	ldr	r4, [pc, #24]	; (8124 <CreateItemCache+0x58>)
    810a:	47a0      	blx	r4
    810c:	0000803d 	.word	0x0000803d
    8110:	20000260 	.word	0x20000260
    8114:	20000244 	.word	0x20000244
    8118:	00017cec 	.word	0x00017cec
    811c:	00017e24 	.word	0x00017e24
    8120:	00017d44 	.word	0x00017d44
    8124:	0001607d 	.word	0x0001607d
    8128:	00017d08 	.word	0x00017d08

0000812c <EraseSector>:

static bool EraseSector(void)
{
    812c:	b510      	push	{r4, lr}
    // Erase the sector
    D_Nv_EraseSector(s_sector);
    812e:	4c08      	ldr	r4, [pc, #32]	; (8150 <EraseSector+0x24>)
    8130:	7820      	ldrb	r0, [r4, #0]
    8132:	4b08      	ldr	r3, [pc, #32]	; (8154 <EraseSector+0x28>)
    8134:	4798      	blx	r3
    // check if the erase succeeded
    if ( !D_Nv_IsEmpty(s_sector, 0u, SECTOR_SIZE) )
    8136:	7820      	ldrb	r0, [r4, #0]
    8138:	2280      	movs	r2, #128	; 0x80
    813a:	0192      	lsls	r2, r2, #6
    813c:	2100      	movs	r1, #0
    813e:	4b06      	ldr	r3, [pc, #24]	; (8158 <EraseSector+0x2c>)
    8140:	4798      	blx	r3
    8142:	2800      	cmp	r0, #0
    8144:	d003      	beq.n	814e <EraseSector+0x22>
    {
        return false;
    }
    s_sectorHead =  ITEMS_AREA_START_ADDRESS;
    8146:	2280      	movs	r2, #128	; 0x80
    8148:	0052      	lsls	r2, r2, #1
    814a:	4b04      	ldr	r3, [pc, #16]	; (815c <EraseSector+0x30>)
    814c:	801a      	strh	r2, [r3, #0]

    return true;
}
    814e:	bd10      	pop	{r4, pc}
    8150:	20000268 	.word	0x20000268
    8154:	00007dd5 	.word	0x00007dd5
    8158:	00007e29 	.word	0x00007e29
    815c:	2000026a 	.word	0x2000026a

00008160 <WriteAndCheck>:
{
    8160:	b5f0      	push	{r4, r5, r6, r7, lr}
    8162:	b083      	sub	sp, #12
    8164:	9001      	str	r0, [sp, #4]
    8166:	000d      	movs	r5, r1
    8168:	0016      	movs	r6, r2
    D_Nv_Write(s_sector, offset, pData, length);
    816a:	4f07      	ldr	r7, [pc, #28]	; (8188 <WriteAndCheck+0x28>)
    816c:	7838      	ldrb	r0, [r7, #0]
    816e:	0013      	movs	r3, r2
    8170:	000a      	movs	r2, r1
    8172:	9901      	ldr	r1, [sp, #4]
    8174:	4c05      	ldr	r4, [pc, #20]	; (818c <WriteAndCheck+0x2c>)
    8176:	47a0      	blx	r4
    return D_Nv_IsEqual(s_sector, offset, pData, length);
    8178:	7838      	ldrb	r0, [r7, #0]
    817a:	0033      	movs	r3, r6
    817c:	002a      	movs	r2, r5
    817e:	9901      	ldr	r1, [sp, #4]
    8180:	4c03      	ldr	r4, [pc, #12]	; (8190 <WriteAndCheck+0x30>)
    8182:	47a0      	blx	r4
}
    8184:	b003      	add	sp, #12
    8186:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8188:	20000268 	.word	0x20000268
    818c:	00007c6d 	.word	0x00007c6d
    8190:	00007e39 	.word	0x00007e39

00008194 <WriteSectorHeader>:

static bool WriteSectorHeader(uint32_t sequenceNumber)
{
    8194:	b510      	push	{r4, lr}
    8196:	b086      	sub	sp, #24
    // write sector header
    SectorHeader_t sectorHeader;
    sectorHeader.signature[0] = (uint8_t) 'A';
    8198:	ac01      	add	r4, sp, #4
    819a:	2341      	movs	r3, #65	; 0x41
    819c:	70a3      	strb	r3, [r4, #2]
    sectorHeader.signature[1] = (uint8_t) 'T';
    819e:	3313      	adds	r3, #19
    81a0:	70e3      	strb	r3, [r4, #3]
    sectorHeader.signature[2] = (uint8_t) 'S';
    81a2:	3b01      	subs	r3, #1
    81a4:	7123      	strb	r3, [r4, #4]
    sectorHeader.signature[3] = (uint8_t) 'N';
    81a6:	3b05      	subs	r3, #5
    81a8:	7163      	strb	r3, [r4, #5]
    sectorHeader.signature[4] = (uint8_t) 'v';
    81aa:	3328      	adds	r3, #40	; 0x28
    81ac:	71a3      	strb	r3, [r4, #6]
    sectorHeader.signature[5] = (uint8_t) '2';
    81ae:	3b44      	subs	r3, #68	; 0x44
    81b0:	71e3      	strb	r3, [r4, #7]
    sectorHeader.sequenceNumber = sequenceNumber;
    81b2:	9003      	str	r0, [sp, #12]
    sectorHeader.sequenceParity = sequenceNumber ^ 0xFFFFFFFFuL;
    81b4:	43c0      	mvns	r0, r0
    81b6:	9004      	str	r0, [sp, #16]
    sectorHeader.nextPageAddressAfterCompact = s_nextPageAddressAfterCompact;
    81b8:	4b08      	ldr	r3, [pc, #32]	; (81dc <WriteSectorHeader+0x48>)
    81ba:	881b      	ldrh	r3, [r3, #0]
    81bc:	8223      	strh	r3, [r4, #16]
    return ComputeCrc(((uint8_t*) pSectorHeader) + sizeof(pSectorHeader->headerCrc), (sizeof(SectorHeader_t)- sizeof(pSectorHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    81be:	4a08      	ldr	r2, [pc, #32]	; (81e0 <WriteSectorHeader+0x4c>)
    81c0:	2110      	movs	r1, #16
    81c2:	466b      	mov	r3, sp
    81c4:	1d98      	adds	r0, r3, #6
    81c6:	4b07      	ldr	r3, [pc, #28]	; (81e4 <WriteSectorHeader+0x50>)
    81c8:	4798      	blx	r3
    sectorHeader.headerCrc = ComputeSectorHeaderCrc(&sectorHeader);
    81ca:	8020      	strh	r0, [r4, #0]
    if ( !WriteAndCheck(0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE) )
    81cc:	2212      	movs	r2, #18
    81ce:	0021      	movs	r1, r4
    81d0:	2000      	movs	r0, #0
    81d2:	4b05      	ldr	r3, [pc, #20]	; (81e8 <WriteSectorHeader+0x54>)
    81d4:	4798      	blx	r3
    {
        return false;
    }
    return true;
}
    81d6:	b006      	add	sp, #24
    81d8:	bd10      	pop	{r4, pc}
    81da:	46c0      	nop			; (mov r8, r8)
    81dc:	20000262 	.word	0x20000262
    81e0:	0000ffff 	.word	0x0000ffff
    81e4:	00007e9d 	.word	0x00007e9d
    81e8:	00008161 	.word	0x00008161

000081ec <SmartCompacting>:
 * without following any alignements as normal item updates.Items are filled into
  256 byte buffer(= row size), committed in shot which takes 4 page writs maximum
 */

static bool SmartCompacting(uint8_t* compactBlock, uint16_t curItemLength)
{
    81ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    81ee:	0004      	movs	r4, r0
    81f0:	000d      	movs	r5, r1
    //manupulate the current compact length
    currentCompactLength += curItemLength;
    81f2:	4a21      	ldr	r2, [pc, #132]	; (8278 <SmartCompacting+0x8c>)
    81f4:	8813      	ldrh	r3, [r2, #0]
    81f6:	18cb      	adds	r3, r1, r3
    81f8:	b29b      	uxth	r3, r3
    81fa:	8013      	strh	r3, [r2, #0]

    // if the complete buffer cannot be filled with the current item
    if ( currentCompactLength < ROW_SIZE)
    81fc:	2bff      	cmp	r3, #255	; 0xff
    81fe:	d92e      	bls.n	825e <SmartCompacting+0x72>
    else  //(currentCompactLength >= ROW_SIZE) cases
    {
        uint16_t dataBlockOffset = 0;


        memcpy(compactBlock + compactBlockOffset, dataBlock, (ROW_SIZE - compactBlockOffset));
    8200:	4b1e      	ldr	r3, [pc, #120]	; (827c <SmartCompacting+0x90>)
    8202:	881a      	ldrh	r2, [r3, #0]
    8204:	1880      	adds	r0, r0, r2
    8206:	2580      	movs	r5, #128	; 0x80
    8208:	006d      	lsls	r5, r5, #1
    820a:	1aaa      	subs	r2, r5, r2
    820c:	491c      	ldr	r1, [pc, #112]	; (8280 <SmartCompacting+0x94>)
    820e:	4b1d      	ldr	r3, [pc, #116]	; (8284 <SmartCompacting+0x98>)
    8210:	4798      	blx	r3
        if ( !WriteAndCheck(s_sectorHead, compactBlock, ROW_SIZE ))
    8212:	4b1d      	ldr	r3, [pc, #116]	; (8288 <SmartCompacting+0x9c>)
    8214:	8818      	ldrh	r0, [r3, #0]
    8216:	002a      	movs	r2, r5
    8218:	0021      	movs	r1, r4
    821a:	4b1c      	ldr	r3, [pc, #112]	; (828c <SmartCompacting+0xa0>)
    821c:	4798      	blx	r3
    821e:	1e05      	subs	r5, r0, #0
    8220:	d027      	beq.n	8272 <SmartCompacting+0x86>
        {
            return false;
        }
        UpdateSectorHead(ROW_SIZE, ITEM_NO_ALIGNMENT);
    8222:	2100      	movs	r1, #0
    8224:	2080      	movs	r0, #128	; 0x80
    8226:	0040      	lsls	r0, r0, #1
    8228:	4b19      	ldr	r3, [pc, #100]	; (8290 <SmartCompacting+0xa4>)
    822a:	4798      	blx	r3
        dataBlockOffset += (ROW_SIZE - compactBlockOffset);
    822c:	4b13      	ldr	r3, [pc, #76]	; (827c <SmartCompacting+0x90>)
    822e:	8818      	ldrh	r0, [r3, #0]
        compactBlockOffset = 0;
    8230:	2200      	movs	r2, #0
    8232:	801a      	strh	r2, [r3, #0]
        currentCompactLength -= ROW_SIZE;
    8234:	4b10      	ldr	r3, [pc, #64]	; (8278 <SmartCompacting+0x8c>)
    8236:	881e      	ldrh	r6, [r3, #0]
    8238:	3e01      	subs	r6, #1
    823a:	3eff      	subs	r6, #255	; 0xff
    823c:	b2b6      	uxth	r6, r6
    823e:	801e      	strh	r6, [r3, #0]
        if (currentCompactLength)
    8240:	2e00      	cmp	r6, #0
    8242:	d016      	beq.n	8272 <SmartCompacting+0x86>
        dataBlockOffset += (ROW_SIZE - compactBlockOffset);
    8244:	2180      	movs	r1, #128	; 0x80
    8246:	0049      	lsls	r1, r1, #1
    8248:	1a09      	subs	r1, r1, r0
        {
            memcpy(compactBlock, dataBlock + dataBlockOffset, currentCompactLength);
    824a:	b289      	uxth	r1, r1
    824c:	4b0c      	ldr	r3, [pc, #48]	; (8280 <SmartCompacting+0x94>)
    824e:	1859      	adds	r1, r3, r1
    8250:	0032      	movs	r2, r6
    8252:	0020      	movs	r0, r4
    8254:	4b0b      	ldr	r3, [pc, #44]	; (8284 <SmartCompacting+0x98>)
    8256:	4798      	blx	r3
            compactBlockOffset = currentCompactLength;
    8258:	4b08      	ldr	r3, [pc, #32]	; (827c <SmartCompacting+0x90>)
    825a:	801e      	strh	r6, [r3, #0]
    825c:	e009      	b.n	8272 <SmartCompacting+0x86>
        memcpy(compactBlock + compactBlockOffset, dataBlock, curItemLength);
    825e:	4e07      	ldr	r6, [pc, #28]	; (827c <SmartCompacting+0x90>)
    8260:	8837      	ldrh	r7, [r6, #0]
    8262:	19c0      	adds	r0, r0, r7
    8264:	000a      	movs	r2, r1
    8266:	4906      	ldr	r1, [pc, #24]	; (8280 <SmartCompacting+0x94>)
    8268:	4b06      	ldr	r3, [pc, #24]	; (8284 <SmartCompacting+0x98>)
    826a:	4798      	blx	r3
        compactBlockOffset += curItemLength;
    826c:	19ed      	adds	r5, r5, r7
    826e:	8035      	strh	r5, [r6, #0]
        return true;
    8270:	2501      	movs	r5, #1
        }
    }

    return true;

}
    8272:	0028      	movs	r0, r5
    8274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8276:	46c0      	nop			; (mov r8, r8)
    8278:	20000128 	.word	0x20000128
    827c:	200000fc 	.word	0x200000fc
    8280:	2000012c 	.word	0x2000012c
    8284:	0001613f 	.word	0x0001613f
    8288:	2000026a 	.word	0x2000026a
    828c:	00008161 	.word	0x00008161
    8290:	00007e61 	.word	0x00007e61

00008294 <CompactSector>:
 * This is because the itemCache, sector head and sector selector will
 * be messed up.
 */

static bool CompactSector(void)
{
    8294:	b5f0      	push	{r4, r5, r6, r7, lr}
    8296:	46de      	mov	lr, fp
    8298:	4657      	mov	r7, sl
    829a:	464e      	mov	r6, r9
    829c:	4645      	mov	r5, r8
    829e:	b5e0      	push	{r5, r6, r7, lr}
    82a0:	b0d5      	sub	sp, #340	; 0x154
    PRINTA(("CompactSector(s=%X)", s_sector));
#endif
    uint8_t compactBlock[ROW_SIZE];

    // stop timer for preemptive compact sector as this will not be needed any more
    SYS_TimerStop(&compactSectorTimer);
    82a2:	487b      	ldr	r0, [pc, #492]	; (8490 <CompactSector+0x1fc>)
    82a4:	4b7b      	ldr	r3, [pc, #492]	; (8494 <CompactSector+0x200>)
    82a6:	4798      	blx	r3

    // stop the compact item as a compact sector will compact all items
    s_compactItemId = 0u;
    82a8:	2300      	movs	r3, #0
    82aa:	4a7b      	ldr	r2, [pc, #492]	; (8498 <CompactSector+0x204>)
    82ac:	8013      	strh	r3, [r2, #0]
    s_compactItemLength = 0u;
    82ae:	4a7b      	ldr	r2, [pc, #492]	; (849c <CompactSector+0x208>)
    82b0:	8013      	strh	r3, [r2, #0]

    compactBlockOffset = 0;
    82b2:	4a7b      	ldr	r2, [pc, #492]	; (84a0 <CompactSector+0x20c>)
    82b4:	8013      	strh	r3, [r2, #0]
    currentCompactLength = 0;
    82b6:	4a7b      	ldr	r2, [pc, #492]	; (84a4 <CompactSector+0x210>)
    82b8:	8013      	strh	r3, [r2, #0]

    uint8_t sourceSector = s_sector;
    82ba:	4b7b      	ldr	r3, [pc, #492]	; (84a8 <CompactSector+0x214>)
    82bc:	781b      	ldrb	r3, [r3, #0]
    82be:	001f      	movs	r7, r3
    82c0:	9303      	str	r3, [sp, #12]

    // get the sector header for the source sector
    SectorHeader_t sectorHeader;
    D_Nv_Read(sourceSector, 0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE);
    82c2:	2312      	movs	r3, #18
    82c4:	aa0f      	add	r2, sp, #60	; 0x3c
    82c6:	2100      	movs	r1, #0
    82c8:	0038      	movs	r0, r7
    82ca:	4c78      	ldr	r4, [pc, #480]	; (84ac <CompactSector+0x218>)
    82cc:	47a0      	blx	r4

    uint32_t nextSequenceNumber = sectorHeader.sequenceNumber - 1uL;
    82ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
    82d0:	9309      	str	r3, [sp, #36]	; 0x24

    // find and prepare a destination sector
    do
    {
        s_sector++;
    82d2:	4c75      	ldr	r4, [pc, #468]	; (84a8 <CompactSector+0x214>)
        if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
        {
            s_sector = FIRST_SECTOR;
    82d4:	0025      	movs	r5, r4
        s_sector++;
    82d6:	0026      	movs	r6, r4
    82d8:	e008      	b.n	82ec <CompactSector+0x58>
    82da:	7033      	strb	r3, [r6, #0]
        }

        if ( s_sector == sourceSector )
    82dc:	4b72      	ldr	r3, [pc, #456]	; (84a8 <CompactSector+0x214>)
    82de:	781b      	ldrb	r3, [r3, #0]
    82e0:	42bb      	cmp	r3, r7
    82e2:	d00b      	beq.n	82fc <CompactSector+0x68>
        {
            // all sector failed to initialize
            assert(false);
        }
    }
    while ( !EraseSector());
    82e4:	4b72      	ldr	r3, [pc, #456]	; (84b0 <CompactSector+0x21c>)
    82e6:	4798      	blx	r3
    82e8:	2800      	cmp	r0, #0
    82ea:	d10d      	bne.n	8308 <CompactSector+0x74>
        s_sector++;
    82ec:	7823      	ldrb	r3, [r4, #0]
    82ee:	3301      	adds	r3, #1
    82f0:	b2db      	uxtb	r3, r3
        if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
    82f2:	2b01      	cmp	r3, #1
    82f4:	d9f1      	bls.n	82da <CompactSector+0x46>
            s_sector = FIRST_SECTOR;
    82f6:	2300      	movs	r3, #0
    82f8:	702b      	strb	r3, [r5, #0]
    82fa:	e7ef      	b.n	82dc <CompactSector+0x48>
            assert(false);
    82fc:	4b6d      	ldr	r3, [pc, #436]	; (84b4 <CompactSector+0x220>)
    82fe:	4a6e      	ldr	r2, [pc, #440]	; (84b8 <CompactSector+0x224>)
    8300:	496e      	ldr	r1, [pc, #440]	; (84bc <CompactSector+0x228>)
    8302:	486f      	ldr	r0, [pc, #444]	; (84c0 <CompactSector+0x22c>)
    8304:	4c6f      	ldr	r4, [pc, #444]	; (84c4 <CompactSector+0x230>)
    8306:	47a0      	blx	r4

    // Traverse the item cache, writing all items to the new sector
    for (uint8_t cacheIndex = 0; cacheIndex < s_itemCount; cacheIndex++) {
    8308:	4b6f      	ldr	r3, [pc, #444]	; (84c8 <CompactSector+0x234>)
    830a:	781b      	ldrb	r3, [r3, #0]
    830c:	2b00      	cmp	r3, #0
    830e:	d06a      	beq.n	83e6 <CompactSector+0x152>
    8310:	2300      	movs	r3, #0
    8312:	9306      	str	r3, [sp, #24]

        blockHeader.dataCrc =  ComputeDataCrc(sourceSector, lastBlockPointer, &blockHeader);

        blockHeader.headerCrc = ComputeHeaderCrc(&blockHeader);

        memset(dataBlock, 0xFF, sizeof(dataBlock));
    8314:	3301      	adds	r3, #1
    8316:	33ff      	adds	r3, #255	; 0xff
    8318:	4699      	mov	r9, r3
            uint16_t bytesToGather;
            uint16_t inDataOffset = 0;

            do
            {
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    831a:	466a      	mov	r2, sp
    831c:	82d3      	strh	r3, [r2, #22]
            if (!GatherData(sourceSector, lastBlockPointer, 0u, blockHeader.itemLength, (dataBlock + BLOCK_HEADER_SIZE )))
    831e:	4b6b      	ldr	r3, [pc, #428]	; (84cc <CompactSector+0x238>)
    8320:	3310      	adds	r3, #16
    8322:	9308      	str	r3, [sp, #32]
        Item_t *cache = &s_itemCache[cacheIndex];
    8324:	9b06      	ldr	r3, [sp, #24]
    8326:	9307      	str	r3, [sp, #28]
        uint16_t lastBlockPointer = cache->lastBlock;
    8328:	009f      	lsls	r7, r3, #2
    832a:	4b69      	ldr	r3, [pc, #420]	; (84d0 <CompactSector+0x23c>)
    832c:	469c      	mov	ip, r3
    832e:	4467      	add	r7, ip
    8330:	887b      	ldrh	r3, [r7, #2]
    8332:	001d      	movs	r5, r3
    8334:	9304      	str	r3, [sp, #16]
        D_Nv_Read(sourceSector, lastBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8336:	2310      	movs	r3, #16
    8338:	aa0b      	add	r2, sp, #44	; 0x2c
    833a:	0029      	movs	r1, r5
    833c:	9803      	ldr	r0, [sp, #12]
    833e:	4680      	mov	r8, r0
    8340:	4c5a      	ldr	r4, [pc, #360]	; (84ac <CompactSector+0x218>)
    8342:	47a0      	blx	r4
        blockHeader.blockOffset = 0x0000u;
    8344:	ae0b      	add	r6, sp, #44	; 0x2c
    8346:	2300      	movs	r3, #0
    8348:	80b3      	strh	r3, [r6, #4]
        blockHeader.blockLength = blockHeader.itemLength;
    834a:	8934      	ldrh	r4, [r6, #8]
    834c:	80f4      	strh	r4, [r6, #6]
        blockHeader.previousBlock = 0x0000u;
    834e:	8173      	strh	r3, [r6, #10]
        blockHeader.writeCount = 0u;
    8350:	81b3      	strh	r3, [r6, #12]
        uint16_t currLength = BLOCK_HEADER_SIZE + blockHeader.itemLength;
    8352:	3410      	adds	r4, #16
    8354:	b2a4      	uxth	r4, r4
        blockHeader.dataCrc =  ComputeDataCrc(sourceSector, lastBlockPointer, &blockHeader);
    8356:	0032      	movs	r2, r6
    8358:	0029      	movs	r1, r5
    835a:	4640      	mov	r0, r8
    835c:	4b5d      	ldr	r3, [pc, #372]	; (84d4 <CompactSector+0x240>)
    835e:	4798      	blx	r3
    8360:	8030      	strh	r0, [r6, #0]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    8362:	4a5d      	ldr	r2, [pc, #372]	; (84d8 <CompactSector+0x244>)
    8364:	210e      	movs	r1, #14
    8366:	a80b      	add	r0, sp, #44	; 0x2c
    8368:	4b5c      	ldr	r3, [pc, #368]	; (84dc <CompactSector+0x248>)
    836a:	4798      	blx	r3
        blockHeader.headerCrc = ComputeHeaderCrc(&blockHeader);
    836c:	81f0      	strh	r0, [r6, #14]
        memset(dataBlock, 0xFF, sizeof(dataBlock));
    836e:	4d57      	ldr	r5, [pc, #348]	; (84cc <CompactSector+0x238>)
    8370:	464a      	mov	r2, r9
    8372:	21ff      	movs	r1, #255	; 0xff
    8374:	0028      	movs	r0, r5
    8376:	4b5a      	ldr	r3, [pc, #360]	; (84e0 <CompactSector+0x24c>)
    8378:	4798      	blx	r3
        memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    837a:	002b      	movs	r3, r5
    837c:	ce07      	ldmia	r6!, {r0, r1, r2}
    837e:	c307      	stmia	r3!, {r0, r1, r2}
    8380:	6832      	ldr	r2, [r6, #0]
    8382:	601a      	str	r2, [r3, #0]
        cache->lastBlock = s_sectorHead  + compactBlockOffset;
    8384:	4b57      	ldr	r3, [pc, #348]	; (84e4 <CompactSector+0x250>)
    8386:	881b      	ldrh	r3, [r3, #0]
    8388:	4a45      	ldr	r2, [pc, #276]	; (84a0 <CompactSector+0x20c>)
    838a:	8812      	ldrh	r2, [r2, #0]
    838c:	189b      	adds	r3, r3, r2
    838e:	807b      	strh	r3, [r7, #2]
        if (currLength <= ROW_SIZE)
    8390:	454c      	cmp	r4, r9
    8392:	d904      	bls.n	839e <CompactSector+0x10a>
    8394:	2600      	movs	r6, #0
    8396:	2310      	movs	r3, #16
              
              if (!GatherData(sourceSector, lastBlockPointer, inDataOffset, (bytesToGather - dataBlockOffset) , (dataBlock + dataBlockOffset)))
    8398:	4a4c      	ldr	r2, [pc, #304]	; (84cc <CompactSector+0x238>)
    839a:	4690      	mov	r8, r2
    839c:	e068      	b.n	8470 <CompactSector+0x1dc>
            if (!GatherData(sourceSector, lastBlockPointer, 0u, blockHeader.itemLength, (dataBlock + BLOCK_HEADER_SIZE )))
    839e:	ab0b      	add	r3, sp, #44	; 0x2c
    83a0:	891b      	ldrh	r3, [r3, #8]
    83a2:	9a08      	ldr	r2, [sp, #32]
    83a4:	9200      	str	r2, [sp, #0]
    83a6:	2200      	movs	r2, #0
    83a8:	9904      	ldr	r1, [sp, #16]
    83aa:	9803      	ldr	r0, [sp, #12]
    83ac:	4e4e      	ldr	r6, [pc, #312]	; (84e8 <CompactSector+0x254>)
    83ae:	47b0      	blx	r6
    83b0:	2800      	cmp	r0, #0
    83b2:	d063      	beq.n	847c <CompactSector+0x1e8>
            cache->lastBlock = s_sectorHead  + compactBlockOffset;
    83b4:	9b07      	ldr	r3, [sp, #28]
    83b6:	009d      	lsls	r5, r3, #2
    83b8:	4b45      	ldr	r3, [pc, #276]	; (84d0 <CompactSector+0x23c>)
    83ba:	195d      	adds	r5, r3, r5
    83bc:	4b49      	ldr	r3, [pc, #292]	; (84e4 <CompactSector+0x250>)
    83be:	881b      	ldrh	r3, [r3, #0]
    83c0:	4a37      	ldr	r2, [pc, #220]	; (84a0 <CompactSector+0x20c>)
    83c2:	8812      	ldrh	r2, [r2, #0]
    83c4:	189b      	adds	r3, r3, r2
    83c6:	806b      	strh	r3, [r5, #2]
            if (!SmartCompacting(compactBlock, currLength))
    83c8:	0021      	movs	r1, r4
    83ca:	a814      	add	r0, sp, #80	; 0x50
    83cc:	4b47      	ldr	r3, [pc, #284]	; (84ec <CompactSector+0x258>)
    83ce:	4798      	blx	r3
    83d0:	2800      	cmp	r0, #0
    83d2:	d053      	beq.n	847c <CompactSector+0x1e8>
    for (uint8_t cacheIndex = 0; cacheIndex < s_itemCount; cacheIndex++) {
    83d4:	9b06      	ldr	r3, [sp, #24]
    83d6:	3301      	adds	r3, #1
    83d8:	b2db      	uxtb	r3, r3
    83da:	001a      	movs	r2, r3
    83dc:	9306      	str	r3, [sp, #24]
    83de:	4b3a      	ldr	r3, [pc, #232]	; (84c8 <CompactSector+0x234>)
    83e0:	781b      	ldrb	r3, [r3, #0]
    83e2:	4293      	cmp	r3, r2
    83e4:	d89e      	bhi.n	8324 <CompactSector+0x90>

            } while(currLength > 0);
        }
    }
    // if some uncommitted data avaialble, committ it
    if ( currentCompactLength)
    83e6:	4b2f      	ldr	r3, [pc, #188]	; (84a4 <CompactSector+0x210>)
    83e8:	881a      	ldrh	r2, [r3, #0]
    83ea:	2a00      	cmp	r2, #0
    83ec:	d006      	beq.n	83fc <CompactSector+0x168>
    {
        if ( !WriteAndCheck(s_sectorHead, compactBlock, currentCompactLength) )
    83ee:	4b3d      	ldr	r3, [pc, #244]	; (84e4 <CompactSector+0x250>)
    83f0:	8818      	ldrh	r0, [r3, #0]
    83f2:	a914      	add	r1, sp, #80	; 0x50
    83f4:	4b3e      	ldr	r3, [pc, #248]	; (84f0 <CompactSector+0x25c>)
    83f6:	4798      	blx	r3
    83f8:	1e04      	subs	r4, r0, #0
    83fa:	d040      	beq.n	847e <CompactSector+0x1ea>
        {
            return false;
        }
    }
    // Just update sector header as per the the length of the data committed, no alignments
    UpdateSectorHead(currentCompactLength, ITEM_NO_ALIGNMENT);
    83fc:	4b29      	ldr	r3, [pc, #164]	; (84a4 <CompactSector+0x210>)
    83fe:	8818      	ldrh	r0, [r3, #0]
    8400:	2100      	movs	r1, #0
    8402:	4b3c      	ldr	r3, [pc, #240]	; (84f4 <CompactSector+0x260>)
    8404:	4798      	blx	r3

    s_nextPageAddressAfterCompact = s_sectorHead;
    8406:	4b37      	ldr	r3, [pc, #220]	; (84e4 <CompactSector+0x250>)
    8408:	881a      	ldrh	r2, [r3, #0]
    840a:	4b3b      	ldr	r3, [pc, #236]	; (84f8 <CompactSector+0x264>)
    840c:	801a      	strh	r2, [r3, #0]
    uint32_t nextSequenceNumber = sectorHeader.sequenceNumber - 1uL;
    840e:	9809      	ldr	r0, [sp, #36]	; 0x24
    8410:	3801      	subs	r0, #1
    //SYS_PostEvent(BC_EVENT_UPGRADE_STRUCT_CHANGED_ITEMS, 0U);

    // update nextPageAddressAfterCompact in the sector header
    // All items moved, so now we just need to Write the Sector Header with 
    // nextPageAddressAfterCompact at the end of compact sector operation
    if ( !WriteSectorHeader(nextSequenceNumber))
    8412:	4b3a      	ldr	r3, [pc, #232]	; (84fc <CompactSector+0x268>)
    8414:	4798      	blx	r3
    8416:	1e04      	subs	r4, r0, #0
    8418:	d031      	beq.n	847e <CompactSector+0x1ea>
    {
        return false;
    }
    // Done with compact sector opration, Set the Sector Head to next page address for normal item update 
    UpdateSectorHead(0, ITEM_64BYTE_ALIGNMENT);
    841a:	2102      	movs	r1, #2
    841c:	2000      	movs	r0, #0
    841e:	4b35      	ldr	r3, [pc, #212]	; (84f4 <CompactSector+0x260>)
    8420:	4798      	blx	r3

    // schedule an erase of the source sector,Restart the timer if it is already running.
    s_sectorToErase = sourceSector;
    8422:	4b37      	ldr	r3, [pc, #220]	; (8500 <CompactSector+0x26c>)
    8424:	466a      	mov	r2, sp
    8426:	7b12      	ldrb	r2, [r2, #12]
    8428:	701a      	strb	r2, [r3, #0]
    SYS_TimerStop(&eraseSectorTimer);
    842a:	4d36      	ldr	r5, [pc, #216]	; (8504 <CompactSector+0x270>)
    842c:	0028      	movs	r0, r5
    842e:	4b19      	ldr	r3, [pc, #100]	; (8494 <CompactSector+0x200>)
    8430:	4798      	blx	r3
    SYS_TimerStart(&eraseSectorTimer);
    8432:	0028      	movs	r0, r5
    8434:	4b34      	ldr	r3, [pc, #208]	; (8508 <CompactSector+0x274>)
    8436:	4798      	blx	r3

    return true;
    8438:	e021      	b.n	847e <CompactSector+0x1ea>
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    843a:	b2ad      	uxth	r5, r5
              if (!GatherData(sourceSector, lastBlockPointer, inDataOffset, (bytesToGather - dataBlockOffset) , (dataBlock + dataBlockOffset)))
    843c:	1aef      	subs	r7, r5, r3
    843e:	b2ba      	uxth	r2, r7
    8440:	4693      	mov	fp, r2
    8442:	4443      	add	r3, r8
    8444:	9300      	str	r3, [sp, #0]
    8446:	0013      	movs	r3, r2
    8448:	0032      	movs	r2, r6
    844a:	9904      	ldr	r1, [sp, #16]
    844c:	9803      	ldr	r0, [sp, #12]
    844e:	4f26      	ldr	r7, [pc, #152]	; (84e8 <CompactSector+0x254>)
    8450:	47b8      	blx	r7
    8452:	2800      	cmp	r0, #0
    8454:	d012      	beq.n	847c <CompactSector+0x1e8>
              if (!SmartCompacting(compactBlock, bytesToGather))
    8456:	0029      	movs	r1, r5
    8458:	a814      	add	r0, sp, #80	; 0x50
    845a:	4b24      	ldr	r3, [pc, #144]	; (84ec <CompactSector+0x258>)
    845c:	4798      	blx	r3
    845e:	2800      	cmp	r0, #0
    8460:	d00c      	beq.n	847c <CompactSector+0x1e8>
              currLength -= bytesToGather;
    8462:	1b64      	subs	r4, r4, r5
    8464:	b2a4      	uxth	r4, r4
              inDataOffset += (bytesToGather - dataBlockOffset);
    8466:	445e      	add	r6, fp
    8468:	b2b6      	uxth	r6, r6
              dataBlockOffset = 0;
    846a:	2300      	movs	r3, #0
            } while(currLength > 0);
    846c:	2c00      	cmp	r4, #0
    846e:	d0b1      	beq.n	83d4 <CompactSector+0x140>
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    8470:	1c25      	adds	r5, r4, #0
    8472:	454c      	cmp	r4, r9
    8474:	d9e1      	bls.n	843a <CompactSector+0x1a6>
    8476:	466a      	mov	r2, sp
    8478:	8ad5      	ldrh	r5, [r2, #22]
    847a:	e7de      	b.n	843a <CompactSector+0x1a6>
                return false;
    847c:	2400      	movs	r4, #0
}
    847e:	0020      	movs	r0, r4
    8480:	b055      	add	sp, #340	; 0x154
    8482:	bc3c      	pop	{r2, r3, r4, r5}
    8484:	4690      	mov	r8, r2
    8486:	4699      	mov	r9, r3
    8488:	46a2      	mov	sl, r4
    848a:	46ab      	mov	fp, r5
    848c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    848e:	46c0      	nop			; (mov r8, r8)
    8490:	20000114 	.word	0x20000114
    8494:	0000b989 	.word	0x0000b989
    8498:	20000240 	.word	0x20000240
    849c:	20000242 	.word	0x20000242
    84a0:	200000fc 	.word	0x200000fc
    84a4:	20000128 	.word	0x20000128
    84a8:	20000268 	.word	0x20000268
    84ac:	00007bf5 	.word	0x00007bf5
    84b0:	0000812d 	.word	0x0000812d
    84b4:	00017ce4 	.word	0x00017ce4
    84b8:	00017e34 	.word	0x00017e34
    84bc:	000003d5 	.word	0x000003d5
    84c0:	00017d44 	.word	0x00017d44
    84c4:	0001607d 	.word	0x0001607d
    84c8:	20000260 	.word	0x20000260
    84cc:	2000012c 	.word	0x2000012c
    84d0:	20000244 	.word	0x20000244
    84d4:	00007f95 	.word	0x00007f95
    84d8:	0000ffff 	.word	0x0000ffff
    84dc:	00007e9d 	.word	0x00007e9d
    84e0:	00016151 	.word	0x00016151
    84e4:	2000026a 	.word	0x2000026a
    84e8:	00007edd 	.word	0x00007edd
    84ec:	000081ed 	.word	0x000081ed
    84f0:	00008161 	.word	0x00008161
    84f4:	00007e61 	.word	0x00007e61
    84f8:	20000262 	.word	0x20000262
    84fc:	00008195 	.word	0x00008195
    8500:	2000000e 	.word	0x2000000e
    8504:	2000022c 	.word	0x2000022c
    8508:	0000b9f5 	.word	0x0000b9f5

0000850c <compactSectorTimerFired>:
{
    850c:	b510      	push	{r4, lr}
    if (!PowerSupplyTooLow()) {
    850e:	4b07      	ldr	r3, [pc, #28]	; (852c <compactSectorTimerFired+0x20>)
    8510:	4798      	blx	r3
    8512:	2800      	cmp	r0, #0
    8514:	d000      	beq.n	8518 <compactSectorTimerFired+0xc>
}
    8516:	bd10      	pop	{r4, pc}
      status = CompactSector();
    8518:	4b05      	ldr	r3, [pc, #20]	; (8530 <compactSectorTimerFired+0x24>)
    851a:	4798      	blx	r3
      assert(false);
    851c:	4b05      	ldr	r3, [pc, #20]	; (8534 <compactSectorTimerFired+0x28>)
    851e:	4a06      	ldr	r2, [pc, #24]	; (8538 <compactSectorTimerFired+0x2c>)
    8520:	212c      	movs	r1, #44	; 0x2c
    8522:	31ff      	adds	r1, #255	; 0xff
    8524:	4805      	ldr	r0, [pc, #20]	; (853c <compactSectorTimerFired+0x30>)
    8526:	4c06      	ldr	r4, [pc, #24]	; (8540 <compactSectorTimerFired+0x34>)
    8528:	47a0      	blx	r4
    852a:	46c0      	nop			; (mov r8, r8)
    852c:	00007e45 	.word	0x00007e45
    8530:	00008295 	.word	0x00008295
    8534:	00017ce4 	.word	0x00017ce4
    8538:	00017dfc 	.word	0x00017dfc
    853c:	00017d44 	.word	0x00017d44
    8540:	0001607d 	.word	0x0001607d

00008544 <CompactSectorIfNeeded>:

static void CompactSectorIfNeeded(uint16_t immediateThreshold)
{
    8544:	b510      	push	{r4, lr}
    uint16_t freeSpace = SECTOR_SIZE - s_sectorHead;
    8546:	4b12      	ldr	r3, [pc, #72]	; (8590 <CompactSectorIfNeeded+0x4c>)
    8548:	881a      	ldrh	r2, [r3, #0]
    854a:	2380      	movs	r3, #128	; 0x80
    854c:	019b      	lsls	r3, r3, #6
    854e:	1a9b      	subs	r3, r3, r2
    8550:	b29b      	uxth	r3, r3

    if ( freeSpace < immediateThreshold )
    8552:	4283      	cmp	r3, r0
    8554:	d303      	bcc.n	855e <CompactSectorIfNeeded+0x1a>
        {
            assert(false);
        }
        return;
    }
    if ( freeSpace < PREEMPTIVE_COMPACT_SECTOR_THRESHOLD )
    8556:	4a0f      	ldr	r2, [pc, #60]	; (8594 <CompactSectorIfNeeded+0x50>)
    8558:	4293      	cmp	r3, r2
    855a:	d90a      	bls.n	8572 <CompactSectorIfNeeded+0x2e>
        compactSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
        //TODO: check timer to be started or not
        //SYS_StartTimer(&compactSectorTimer);
        }
    }
}
    855c:	bd10      	pop	{r4, pc}
        if ( !CompactSector() )
    855e:	4b0e      	ldr	r3, [pc, #56]	; (8598 <CompactSectorIfNeeded+0x54>)
    8560:	4798      	blx	r3
    8562:	2800      	cmp	r0, #0
    8564:	d1fa      	bne.n	855c <CompactSectorIfNeeded+0x18>
            assert(false);
    8566:	4b0d      	ldr	r3, [pc, #52]	; (859c <CompactSectorIfNeeded+0x58>)
    8568:	4a0d      	ldr	r2, [pc, #52]	; (85a0 <CompactSectorIfNeeded+0x5c>)
    856a:	490e      	ldr	r1, [pc, #56]	; (85a4 <CompactSectorIfNeeded+0x60>)
    856c:	480e      	ldr	r0, [pc, #56]	; (85a8 <CompactSectorIfNeeded+0x64>)
    856e:	4c0f      	ldr	r4, [pc, #60]	; (85ac <CompactSectorIfNeeded+0x68>)
    8570:	47a0      	blx	r4
        if (!SYS_TimerStarted(&compactSectorTimer))
    8572:	480f      	ldr	r0, [pc, #60]	; (85b0 <CompactSectorIfNeeded+0x6c>)
    8574:	4b0f      	ldr	r3, [pc, #60]	; (85b4 <CompactSectorIfNeeded+0x70>)
    8576:	4798      	blx	r3
    8578:	2800      	cmp	r0, #0
    857a:	d1ef      	bne.n	855c <CompactSectorIfNeeded+0x18>
        compactSectorTimer.handler = compactSectorTimerFired;
    857c:	4b0c      	ldr	r3, [pc, #48]	; (85b0 <CompactSectorIfNeeded+0x6c>)
    857e:	4a0e      	ldr	r2, [pc, #56]	; (85b8 <CompactSectorIfNeeded+0x74>)
    8580:	611a      	str	r2, [r3, #16]
        compactSectorTimer.timeout = COMPACT_SECTOR_DELAY_MS;
    8582:	4a0e      	ldr	r2, [pc, #56]	; (85bc <CompactSectorIfNeeded+0x78>)
    8584:	605a      	str	r2, [r3, #4]
        compactSectorTimer.interval = COMPACT_SECTOR_DELAY_MS;
    8586:	609a      	str	r2, [r3, #8]
        compactSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
    8588:	2200      	movs	r2, #0
    858a:	731a      	strb	r2, [r3, #12]
    858c:	e7e6      	b.n	855c <CompactSectorIfNeeded+0x18>
    858e:	46c0      	nop			; (mov r8, r8)
    8590:	2000026a 	.word	0x2000026a
    8594:	0000080f 	.word	0x0000080f
    8598:	00008295 	.word	0x00008295
    859c:	00017ce4 	.word	0x00017ce4
    85a0:	00017e44 	.word	0x00017e44
    85a4:	0000044e 	.word	0x0000044e
    85a8:	00017d44 	.word	0x00017d44
    85ac:	0001607d 	.word	0x0001607d
    85b0:	20000114 	.word	0x20000114
    85b4:	0000b9c9 	.word	0x0000b9c9
    85b8:	0000850d 	.word	0x0000850d
    85bc:	00002710 	.word	0x00002710

000085c0 <CompactItem>:

static S_Nv_ReturnValue_t CompactItem(void)
{
    85c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    85c2:	46de      	mov	lr, fp
    85c4:	4657      	mov	r7, sl
    85c6:	464e      	mov	r6, r9
    85c8:	4645      	mov	r5, r8
    85ca:	b5e0      	push	{r5, r6, r7, lr}
    85cc:	b08b      	sub	sp, #44	; 0x2c
#if defined(ENABLE_NV_COMPACT_LOGGING)
    PRINTA(("CompactItem(id=%X)", s_compactItemId));
#endif

    if ( PowerSupplyTooLow() )
    85ce:	4b77      	ldr	r3, [pc, #476]	; (87ac <CompactItem+0x1ec>)
    85d0:	4798      	blx	r3
    {
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    85d2:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    85d4:	2800      	cmp	r0, #0
    85d6:	d007      	beq.n	85e8 <CompactItem+0x28>
    s_compactItemLength = 0u;

    cache->lastBlock = lastBlock;

    return S_Nv_ReturnValue_Ok;
}
    85d8:	0018      	movs	r0, r3
    85da:	b00b      	add	sp, #44	; 0x2c
    85dc:	bc3c      	pop	{r2, r3, r4, r5}
    85de:	4690      	mov	r8, r2
    85e0:	4699      	mov	r9, r3
    85e2:	46a2      	mov	sl, r4
    85e4:	46ab      	mov	fp, r5
    85e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ( (s_compactItemLength == 0u) && ( s_compactItemId == 0u ) )
    85e8:	4b71      	ldr	r3, [pc, #452]	; (87b0 <CompactItem+0x1f0>)
    85ea:	8818      	ldrh	r0, [r3, #0]
    85ec:	2800      	cmp	r0, #0
    85ee:	d146      	bne.n	867e <CompactItem+0xbe>
    85f0:	4b70      	ldr	r3, [pc, #448]	; (87b4 <CompactItem+0x1f4>)
    85f2:	881b      	ldrh	r3, [r3, #0]
    85f4:	2b00      	cmp	r3, #0
    85f6:	d100      	bne.n	85fa <CompactItem+0x3a>
    85f8:	e0d0      	b.n	879c <CompactItem+0x1dc>
    Item_t *cache = FindItemCache(s_compactItemId);
    85fa:	4b6e      	ldr	r3, [pc, #440]	; (87b4 <CompactItem+0x1f4>)
    85fc:	8818      	ldrh	r0, [r3, #0]
    85fe:	4b6e      	ldr	r3, [pc, #440]	; (87b8 <CompactItem+0x1f8>)
    8600:	4798      	blx	r3
    8602:	4683      	mov	fp, r0
    if ( cache == NULL )
    8604:	2800      	cmp	r0, #0
    8606:	d100      	bne.n	860a <CompactItem+0x4a>
    8608:	e0ca      	b.n	87a0 <CompactItem+0x1e0>
    uint16_t blockPointer = cache->lastBlock;
    860a:	7882      	ldrb	r2, [r0, #2]
    860c:	78c3      	ldrb	r3, [r0, #3]
    860e:	021b      	lsls	r3, r3, #8
    8610:	4313      	orrs	r3, r2
    8612:	0019      	movs	r1, r3
    8614:	9303      	str	r3, [sp, #12]
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8616:	4b69      	ldr	r3, [pc, #420]	; (87bc <CompactItem+0x1fc>)
    8618:	7818      	ldrb	r0, [r3, #0]
    861a:	2310      	movs	r3, #16
    861c:	aa06      	add	r2, sp, #24
    861e:	4c68      	ldr	r4, [pc, #416]	; (87c0 <CompactItem+0x200>)
    8620:	47a0      	blx	r4
    if (s_compactItemLength == 0)
    8622:	4b63      	ldr	r3, [pc, #396]	; (87b0 <CompactItem+0x1f0>)
    8624:	881a      	ldrh	r2, [r3, #0]
    8626:	2a00      	cmp	r2, #0
    8628:	d02e      	beq.n	8688 <CompactItem+0xc8>
    uint16_t lastBlock = s_sectorHead;
    862a:	4b66      	ldr	r3, [pc, #408]	; (87c4 <CompactItem+0x204>)
    862c:	881b      	ldrh	r3, [r3, #0]
    862e:	9305      	str	r3, [sp, #20]
    uint16_t bytesToGather = blockHeader.itemLength;
    8630:	ab06      	add	r3, sp, #24
    8632:	891b      	ldrh	r3, [r3, #8]
        blockHeader.itemLength = s_compactItemLength;
    8634:	a906      	add	r1, sp, #24
    8636:	810a      	strh	r2, [r1, #8]
    8638:	1c19      	adds	r1, r3, #0
    863a:	4293      	cmp	r3, r2
    863c:	d900      	bls.n	8640 <CompactItem+0x80>
    863e:	1c11      	adds	r1, r2, #0
    8640:	b28b      	uxth	r3, r1
    blockHeader.blockOffset = 0u;
    8642:	aa06      	add	r2, sp, #24
    8644:	2100      	movs	r1, #0
    8646:	8091      	strh	r1, [r2, #4]
    blockHeader.blockLength = blockHeader.itemLength;
    8648:	8910      	ldrh	r0, [r2, #8]
    864a:	80d0      	strh	r0, [r2, #6]
    blockHeader.previousBlock = 0x0000u;
    864c:	8151      	strh	r1, [r2, #10]
    blockHeader.writeCount = 0u;
    864e:	8191      	strh	r1, [r2, #12]
    uint16_t currLength = BLOCK_HEADER_SIZE + bytesToGather;
    8650:	001c      	movs	r4, r3
    8652:	3410      	adds	r4, #16
    8654:	b2a4      	uxth	r4, r4
    memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    8656:	495c      	ldr	r1, [pc, #368]	; (87c8 <CompactItem+0x208>)
    8658:	ca61      	ldmia	r2!, {r0, r5, r6}
    865a:	c161      	stmia	r1!, {r0, r5, r6}
    865c:	6812      	ldr	r2, [r2, #0]
    865e:	600a      	str	r2, [r1, #0]
    if (currLength <= ROW_SIZE)
    8660:	2280      	movs	r2, #128	; 0x80
    8662:	0052      	lsls	r2, r2, #1
    8664:	4294      	cmp	r4, r2
    8666:	d939      	bls.n	86dc <CompactItem+0x11c>
    8668:	2600      	movs	r6, #0
    866a:	2310      	movs	r3, #16
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    866c:	2280      	movs	r2, #128	; 0x80
    866e:	0052      	lsls	r2, r2, #1
    8670:	4691      	mov	r9, r2
    8672:	4669      	mov	r1, sp
    8674:	824a      	strh	r2, [r1, #18]
            if (!GatherData(s_sector, blockPointer, inDataOffset, bytesToGatherAndCommit - dataBlockOffset , (dataBlock + dataBlockOffset)))
    8676:	4a51      	ldr	r2, [pc, #324]	; (87bc <CompactItem+0x1fc>)
    8678:	4692      	mov	sl, r2
    867a:	001a      	movs	r2, r3
    867c:	e088      	b.n	8790 <CompactItem+0x1d0>
        CompactSectorIfNeeded(s_compactItemLength + BLOCK_HEADER_SIZE);
    867e:	3010      	adds	r0, #16
    8680:	b280      	uxth	r0, r0
    8682:	4b52      	ldr	r3, [pc, #328]	; (87cc <CompactItem+0x20c>)
    8684:	4798      	blx	r3
    8686:	e7b8      	b.n	85fa <CompactItem+0x3a>
        CompactSectorIfNeeded(blockHeader.itemLength + BLOCK_HEADER_SIZE);
    8688:	ab06      	add	r3, sp, #24
    868a:	8918      	ldrh	r0, [r3, #8]
    868c:	3010      	adds	r0, #16
    868e:	b280      	uxth	r0, r0
    8690:	4b4e      	ldr	r3, [pc, #312]	; (87cc <CompactItem+0x20c>)
    8692:	4798      	blx	r3
        cache = FindItemCache(s_compactItemId);
    8694:	4b47      	ldr	r3, [pc, #284]	; (87b4 <CompactItem+0x1f4>)
    8696:	8818      	ldrh	r0, [r3, #0]
    8698:	4b47      	ldr	r3, [pc, #284]	; (87b8 <CompactItem+0x1f8>)
    869a:	4798      	blx	r3
    869c:	4683      	mov	fp, r0
        assert(cache != NULL);
    869e:	2800      	cmp	r0, #0
    86a0:	d015      	beq.n	86ce <CompactItem+0x10e>
        blockPointer = cache->lastBlock;
    86a2:	7882      	ldrb	r2, [r0, #2]
    86a4:	78c3      	ldrb	r3, [r0, #3]
    86a6:	021b      	lsls	r3, r3, #8
    86a8:	4313      	orrs	r3, r2
    86aa:	0019      	movs	r1, r3
    86ac:	9303      	str	r3, [sp, #12]
        D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    86ae:	ac06      	add	r4, sp, #24
    86b0:	4b42      	ldr	r3, [pc, #264]	; (87bc <CompactItem+0x1fc>)
    86b2:	7818      	ldrb	r0, [r3, #0]
    86b4:	2310      	movs	r3, #16
    86b6:	0022      	movs	r2, r4
    86b8:	4d41      	ldr	r5, [pc, #260]	; (87c0 <CompactItem+0x200>)
    86ba:	47a8      	blx	r5
    uint16_t lastBlock = s_sectorHead;
    86bc:	4b41      	ldr	r3, [pc, #260]	; (87c4 <CompactItem+0x204>)
    86be:	881b      	ldrh	r3, [r3, #0]
    86c0:	9305      	str	r3, [sp, #20]
    uint16_t bytesToGather = blockHeader.itemLength;
    86c2:	8923      	ldrh	r3, [r4, #8]
    if ( s_compactItemLength != 0u )
    86c4:	4a3a      	ldr	r2, [pc, #232]	; (87b0 <CompactItem+0x1f0>)
    86c6:	8812      	ldrh	r2, [r2, #0]
    86c8:	2a00      	cmp	r2, #0
    86ca:	d0ba      	beq.n	8642 <CompactItem+0x82>
    86cc:	e7b2      	b.n	8634 <CompactItem+0x74>
        assert(cache != NULL);
    86ce:	4b40      	ldr	r3, [pc, #256]	; (87d0 <CompactItem+0x210>)
    86d0:	4a40      	ldr	r2, [pc, #256]	; (87d4 <CompactItem+0x214>)
    86d2:	2191      	movs	r1, #145	; 0x91
    86d4:	00c9      	lsls	r1, r1, #3
    86d6:	4840      	ldr	r0, [pc, #256]	; (87d8 <CompactItem+0x218>)
    86d8:	4c40      	ldr	r4, [pc, #256]	; (87dc <CompactItem+0x21c>)
    86da:	47a0      	blx	r4
        if (!GatherData(s_sector, blockPointer, 0u, bytesToGather, (dataBlock + BLOCK_HEADER_SIZE )))
    86dc:	4a37      	ldr	r2, [pc, #220]	; (87bc <CompactItem+0x1fc>)
    86de:	7810      	ldrb	r0, [r2, #0]
    86e0:	4a39      	ldr	r2, [pc, #228]	; (87c8 <CompactItem+0x208>)
    86e2:	3210      	adds	r2, #16
    86e4:	9200      	str	r2, [sp, #0]
    86e6:	2200      	movs	r2, #0
    86e8:	9903      	ldr	r1, [sp, #12]
    86ea:	4c3d      	ldr	r4, [pc, #244]	; (87e0 <CompactItem+0x220>)
    86ec:	47a0      	blx	r4
            return S_Nv_ReturnValue_Failure;
    86ee:	2301      	movs	r3, #1
        if (!GatherData(s_sector, blockPointer, 0u, bytesToGather, (dataBlock + BLOCK_HEADER_SIZE )))
    86f0:	2800      	cmp	r0, #0
    86f2:	d100      	bne.n	86f6 <CompactItem+0x136>
    86f4:	e770      	b.n	85d8 <CompactItem+0x18>
        memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    86f6:	4934      	ldr	r1, [pc, #208]	; (87c8 <CompactItem+0x208>)
    86f8:	ab06      	add	r3, sp, #24
    86fa:	000a      	movs	r2, r1
    86fc:	0018      	movs	r0, r3
    86fe:	c870      	ldmia	r0!, {r4, r5, r6}
    8700:	c270      	stmia	r2!, {r4, r5, r6}
    8702:	6800      	ldr	r0, [r0, #0]
    8704:	6010      	str	r0, [r2, #0]
        if ( !WriteAndCheck(s_sectorHead, dataBlock, blockHeader.blockLength + BLOCK_HEADER_SIZE) )
    8706:	88da      	ldrh	r2, [r3, #6]
    8708:	3210      	adds	r2, #16
    870a:	b292      	uxth	r2, r2
    870c:	4b2d      	ldr	r3, [pc, #180]	; (87c4 <CompactItem+0x204>)
    870e:	8818      	ldrh	r0, [r3, #0]
    8710:	4b34      	ldr	r3, [pc, #208]	; (87e4 <CompactItem+0x224>)
    8712:	4798      	blx	r3
            return false;
    8714:	2300      	movs	r3, #0
        if ( !WriteAndCheck(s_sectorHead, dataBlock, blockHeader.blockLength + BLOCK_HEADER_SIZE) )
    8716:	2800      	cmp	r0, #0
    8718:	d100      	bne.n	871c <CompactItem+0x15c>
    871a:	e75d      	b.n	85d8 <CompactItem+0x18>
        UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), ITEM_64BYTE_ALIGNMENT);
    871c:	ab06      	add	r3, sp, #24
    871e:	88d8      	ldrh	r0, [r3, #6]
    8720:	3010      	adds	r0, #16
    8722:	b280      	uxth	r0, r0
    8724:	2102      	movs	r1, #2
    8726:	4b30      	ldr	r3, [pc, #192]	; (87e8 <CompactItem+0x228>)
    8728:	4798      	blx	r3
    s_compactItemId = 0u;
    872a:	2300      	movs	r3, #0
    872c:	4a21      	ldr	r2, [pc, #132]	; (87b4 <CompactItem+0x1f4>)
    872e:	8013      	strh	r3, [r2, #0]
    s_compactItemLength = 0u;
    8730:	4a1f      	ldr	r2, [pc, #124]	; (87b0 <CompactItem+0x1f0>)
    8732:	8013      	strh	r3, [r2, #0]
    cache->lastBlock = lastBlock;
    8734:	465b      	mov	r3, fp
    8736:	9905      	ldr	r1, [sp, #20]
    8738:	7099      	strb	r1, [r3, #2]
    873a:	0a0b      	lsrs	r3, r1, #8
    873c:	465a      	mov	r2, fp
    873e:	70d3      	strb	r3, [r2, #3]
    return S_Nv_ReturnValue_Ok;
    8740:	2300      	movs	r3, #0
    8742:	e749      	b.n	85d8 <CompactItem+0x18>
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    8744:	b2ad      	uxth	r5, r5
            if (!GatherData(s_sector, blockPointer, inDataOffset, bytesToGatherAndCommit - dataBlockOffset , (dataBlock + dataBlockOffset)))
    8746:	1aaf      	subs	r7, r5, r2
    8748:	b2bb      	uxth	r3, r7
    874a:	0019      	movs	r1, r3
    874c:	4653      	mov	r3, sl
    874e:	7818      	ldrb	r0, [r3, #0]
    8750:	4b1d      	ldr	r3, [pc, #116]	; (87c8 <CompactItem+0x208>)
    8752:	189b      	adds	r3, r3, r2
    8754:	9300      	str	r3, [sp, #0]
    8756:	9102      	str	r1, [sp, #8]
    8758:	000b      	movs	r3, r1
    875a:	0032      	movs	r2, r6
    875c:	9903      	ldr	r1, [sp, #12]
    875e:	4f20      	ldr	r7, [pc, #128]	; (87e0 <CompactItem+0x220>)
    8760:	47b8      	blx	r7
    8762:	2800      	cmp	r0, #0
    8764:	d01e      	beq.n	87a4 <CompactItem+0x1e4>
            if ( !WriteAndCheck(s_sectorHead, dataBlock, bytesToGatherAndCommit) )
    8766:	4b17      	ldr	r3, [pc, #92]	; (87c4 <CompactItem+0x204>)
    8768:	8818      	ldrh	r0, [r3, #0]
    876a:	002a      	movs	r2, r5
    876c:	4916      	ldr	r1, [pc, #88]	; (87c8 <CompactItem+0x208>)
    876e:	4b1d      	ldr	r3, [pc, #116]	; (87e4 <CompactItem+0x224>)
    8770:	4798      	blx	r3
    8772:	2800      	cmp	r0, #0
    8774:	d018      	beq.n	87a8 <CompactItem+0x1e8>
            UpdateSectorHead(bytesToGatherAndCommit, ITEM_64BYTE_ALIGNMENT);
    8776:	2102      	movs	r1, #2
    8778:	0028      	movs	r0, r5
    877a:	4b1b      	ldr	r3, [pc, #108]	; (87e8 <CompactItem+0x228>)
    877c:	4798      	blx	r3
            currLength -= bytesToGatherAndCommit;
    877e:	1b64      	subs	r4, r4, r5
    8780:	b2a4      	uxth	r4, r4
            inDataOffset += (bytesToGatherAndCommit - dataBlockOffset);
    8782:	9902      	ldr	r1, [sp, #8]
    8784:	468c      	mov	ip, r1
    8786:	4466      	add	r6, ip
    8788:	b2b6      	uxth	r6, r6
            dataBlockOffset = 0;
    878a:	2200      	movs	r2, #0
        } while(currLength > 0);
    878c:	2c00      	cmp	r4, #0
    878e:	d0cc      	beq.n	872a <CompactItem+0x16a>
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    8790:	1c25      	adds	r5, r4, #0
    8792:	454c      	cmp	r4, r9
    8794:	d9d6      	bls.n	8744 <CompactItem+0x184>
    8796:	466b      	mov	r3, sp
    8798:	8a5d      	ldrh	r5, [r3, #18]
    879a:	e7d3      	b.n	8744 <CompactItem+0x184>
        return S_Nv_ReturnValue_Ok;
    879c:	2300      	movs	r3, #0
    879e:	e71b      	b.n	85d8 <CompactItem+0x18>
        return S_Nv_ReturnValue_Ok;
    87a0:	2300      	movs	r3, #0
    87a2:	e719      	b.n	85d8 <CompactItem+0x18>
                return S_Nv_ReturnValue_Failure;
    87a4:	2301      	movs	r3, #1
    87a6:	e717      	b.n	85d8 <CompactItem+0x18>
                return false;
    87a8:	2300      	movs	r3, #0
    87aa:	e715      	b.n	85d8 <CompactItem+0x18>
    87ac:	00007e45 	.word	0x00007e45
    87b0:	20000242 	.word	0x20000242
    87b4:	20000240 	.word	0x20000240
    87b8:	0000803d 	.word	0x0000803d
    87bc:	20000268 	.word	0x20000268
    87c0:	00007bf5 	.word	0x00007bf5
    87c4:	2000026a 	.word	0x2000026a
    87c8:	2000012c 	.word	0x2000012c
    87cc:	00008545 	.word	0x00008545
    87d0:	00017cd4 	.word	0x00017cd4
    87d4:	00017e5c 	.word	0x00017e5c
    87d8:	00017d44 	.word	0x00017d44
    87dc:	0001607d 	.word	0x0001607d
    87e0:	00007edd 	.word	0x00007edd
    87e4:	00008161 	.word	0x00008161
    87e8:	00007e61 	.word	0x00007e61

000087ec <compactItemTimerFired>:
{
    87ec:	b510      	push	{r4, lr}
    (void)CompactItem();
    87ee:	4b01      	ldr	r3, [pc, #4]	; (87f4 <compactItemTimerFired+0x8>)
    87f0:	4798      	blx	r3
}
    87f2:	bd10      	pop	{r4, pc}
    87f4:	000085c1 	.word	0x000085c1

000087f8 <WriteDataBlockAndHeader>:
{
    87f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    87fa:	46de      	mov	lr, fp
    87fc:	4657      	mov	r7, sl
    87fe:	464e      	mov	r6, r9
    8800:	4645      	mov	r5, r8
    8802:	b5e0      	push	{r5, r6, r7, lr}
    8804:	b083      	sub	sp, #12
    8806:	0004      	movs	r4, r0
    8808:	468a      	mov	sl, r1
    memset(dataBlock, 0xFF, sizeof(dataBlock));
    880a:	4d46      	ldr	r5, [pc, #280]	; (8924 <WriteDataBlockAndHeader+0x12c>)
    880c:	2280      	movs	r2, #128	; 0x80
    880e:	0052      	lsls	r2, r2, #1
    8810:	21ff      	movs	r1, #255	; 0xff
    8812:	0028      	movs	r0, r5
    8814:	4b44      	ldr	r3, [pc, #272]	; (8928 <WriteDataBlockAndHeader+0x130>)
    8816:	4798      	blx	r3
    pBlockHeader->dataCrc = ComputeCrc(pData, pBlockHeader->blockLength, 0xFFFF);
    8818:	4e44      	ldr	r6, [pc, #272]	; (892c <WriteDataBlockAndHeader+0x134>)
    881a:	79a3      	ldrb	r3, [r4, #6]
    881c:	79e1      	ldrb	r1, [r4, #7]
    881e:	0209      	lsls	r1, r1, #8
    8820:	4319      	orrs	r1, r3
    8822:	0032      	movs	r2, r6
    8824:	4650      	mov	r0, sl
    8826:	4f42      	ldr	r7, [pc, #264]	; (8930 <WriteDataBlockAndHeader+0x138>)
    8828:	47b8      	blx	r7
    882a:	7020      	strb	r0, [r4, #0]
    882c:	0a00      	lsrs	r0, r0, #8
    882e:	7060      	strb	r0, [r4, #1]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    8830:	0032      	movs	r2, r6
    8832:	210e      	movs	r1, #14
    8834:	0020      	movs	r0, r4
    8836:	47b8      	blx	r7
    pBlockHeader->headerCrc = ComputeHeaderCrc(pBlockHeader);
    8838:	73a0      	strb	r0, [r4, #14]
    883a:	0a00      	lsrs	r0, r0, #8
    883c:	73e0      	strb	r0, [r4, #15]
    memcpy(dataBlock, pBlockHeader, BLOCK_HEADER_SIZE);
    883e:	2210      	movs	r2, #16
    8840:	0021      	movs	r1, r4
    8842:	0028      	movs	r0, r5
    8844:	4b3b      	ldr	r3, [pc, #236]	; (8934 <WriteDataBlockAndHeader+0x13c>)
    8846:	4798      	blx	r3
    currentLength = pBlockHeader->blockLength + BLOCK_HEADER_SIZE;
    8848:	79a3      	ldrb	r3, [r4, #6]
    884a:	79e2      	ldrb	r2, [r4, #7]
    884c:	0212      	lsls	r2, r2, #8
    884e:	431a      	orrs	r2, r3
    8850:	0015      	movs	r5, r2
    8852:	3510      	adds	r5, #16
    8854:	b2ad      	uxth	r5, r5
    if (pData != NULL )
    8856:	4653      	mov	r3, sl
    8858:	2b00      	cmp	r3, #0
    885a:	d012      	beq.n	8882 <WriteDataBlockAndHeader+0x8a>
        if(currentLength <= ROW_SIZE)
    885c:	2380      	movs	r3, #128	; 0x80
    885e:	005b      	lsls	r3, r3, #1
    8860:	429d      	cmp	r5, r3
    8862:	d909      	bls.n	8878 <WriteDataBlockAndHeader+0x80>
    8864:	2600      	movs	r6, #0
    8866:	2710      	movs	r7, #16
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    8868:	2380      	movs	r3, #128	; 0x80
    886a:	005b      	lsls	r3, r3, #1
    886c:	469b      	mov	fp, r3
    886e:	466a      	mov	r2, sp
    8870:	80d3      	strh	r3, [r2, #6]
                memcpy(dataBlock + dataBlockOffset, pData + inDataOffset, bytesToCommit - dataBlockOffset);
    8872:	4b2c      	ldr	r3, [pc, #176]	; (8924 <WriteDataBlockAndHeader+0x12c>)
    8874:	4699      	mov	r9, r3
    8876:	e045      	b.n	8904 <WriteDataBlockAndHeader+0x10c>
            memcpy(dataBlock + BLOCK_HEADER_SIZE , pData, pBlockHeader->blockLength);
    8878:	4651      	mov	r1, sl
    887a:	482a      	ldr	r0, [pc, #168]	; (8924 <WriteDataBlockAndHeader+0x12c>)
    887c:	3010      	adds	r0, #16
    887e:	4b2d      	ldr	r3, [pc, #180]	; (8934 <WriteDataBlockAndHeader+0x13c>)
    8880:	4798      	blx	r3
    if ( !WriteAndCheck(s_sectorHead, dataBlock, MIN((BLOCK_HEADER_SIZE + pBlockHeader->blockLength), ROW_SIZE)) )
    8882:	79a3      	ldrb	r3, [r4, #6]
    8884:	79e2      	ldrb	r2, [r4, #7]
    8886:	0212      	lsls	r2, r2, #8
    8888:	431a      	orrs	r2, r3
    888a:	3210      	adds	r2, #16
    888c:	2380      	movs	r3, #128	; 0x80
    888e:	005b      	lsls	r3, r3, #1
    8890:	429a      	cmp	r2, r3
    8892:	dd00      	ble.n	8896 <WriteDataBlockAndHeader+0x9e>
    8894:	001a      	movs	r2, r3
    8896:	b292      	uxth	r2, r2
    8898:	4b27      	ldr	r3, [pc, #156]	; (8938 <WriteDataBlockAndHeader+0x140>)
    889a:	8818      	ldrh	r0, [r3, #0]
    889c:	4921      	ldr	r1, [pc, #132]	; (8924 <WriteDataBlockAndHeader+0x12c>)
    889e:	4b27      	ldr	r3, [pc, #156]	; (893c <WriteDataBlockAndHeader+0x144>)
    88a0:	4798      	blx	r3
    88a2:	4680      	mov	r8, r0
    88a4:	2800      	cmp	r0, #0
    88a6:	d033      	beq.n	8910 <WriteDataBlockAndHeader+0x118>
    UpdateSectorHead((pBlockHeader->blockLength + BLOCK_HEADER_SIZE), ITEM_64BYTE_ALIGNMENT );
    88a8:	79a3      	ldrb	r3, [r4, #6]
    88aa:	79e0      	ldrb	r0, [r4, #7]
    88ac:	0200      	lsls	r0, r0, #8
    88ae:	4318      	orrs	r0, r3
    88b0:	3010      	adds	r0, #16
    88b2:	b280      	uxth	r0, r0
    88b4:	2102      	movs	r1, #2
    88b6:	4b22      	ldr	r3, [pc, #136]	; (8940 <WriteDataBlockAndHeader+0x148>)
    88b8:	4798      	blx	r3
}
    88ba:	4640      	mov	r0, r8
    88bc:	b003      	add	sp, #12
    88be:	bc3c      	pop	{r2, r3, r4, r5}
    88c0:	4690      	mov	r8, r2
    88c2:	4699      	mov	r9, r3
    88c4:	46a2      	mov	sl, r4
    88c6:	46ab      	mov	fp, r5
    88c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    88ca:	b2a4      	uxth	r4, r4
                memcpy(dataBlock + dataBlockOffset, pData + inDataOffset, bytesToCommit - dataBlockOffset);
    88cc:	464b      	mov	r3, r9
    88ce:	19d8      	adds	r0, r3, r7
    88d0:	1be2      	subs	r2, r4, r7
    88d2:	4653      	mov	r3, sl
    88d4:	1999      	adds	r1, r3, r6
    88d6:	4b17      	ldr	r3, [pc, #92]	; (8934 <WriteDataBlockAndHeader+0x13c>)
    88d8:	4798      	blx	r3
                if ( !WriteAndCheck(s_sectorHead, dataBlock, bytesToCommit))
    88da:	4b17      	ldr	r3, [pc, #92]	; (8938 <WriteDataBlockAndHeader+0x140>)
    88dc:	8818      	ldrh	r0, [r3, #0]
    88de:	0022      	movs	r2, r4
    88e0:	4649      	mov	r1, r9
    88e2:	4b16      	ldr	r3, [pc, #88]	; (893c <WriteDataBlockAndHeader+0x144>)
    88e4:	4798      	blx	r3
    88e6:	4680      	mov	r8, r0
    88e8:	2800      	cmp	r0, #0
    88ea:	d0e6      	beq.n	88ba <WriteDataBlockAndHeader+0xc2>
                UpdateSectorHead(bytesToCommit, ITEM_64BYTE_ALIGNMENT);
    88ec:	2102      	movs	r1, #2
    88ee:	0020      	movs	r0, r4
    88f0:	4b13      	ldr	r3, [pc, #76]	; (8940 <WriteDataBlockAndHeader+0x148>)
    88f2:	4798      	blx	r3
                currentLength -= bytesToCommit;
    88f4:	1b2d      	subs	r5, r5, r4
    88f6:	b2ad      	uxth	r5, r5
                inDataOffset += (bytesToCommit - dataBlockOffset);
    88f8:	1be4      	subs	r4, r4, r7
    88fa:	1936      	adds	r6, r6, r4
    88fc:	b2b6      	uxth	r6, r6
                dataBlockOffset = 0;
    88fe:	2700      	movs	r7, #0
            } while(currentLength > 0);
    8900:	2d00      	cmp	r5, #0
    8902:	d0da      	beq.n	88ba <WriteDataBlockAndHeader+0xc2>
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    8904:	1c2c      	adds	r4, r5, #0
    8906:	455d      	cmp	r5, fp
    8908:	d9df      	bls.n	88ca <WriteDataBlockAndHeader+0xd2>
    890a:	466b      	mov	r3, sp
    890c:	88dc      	ldrh	r4, [r3, #6]
    890e:	e7dc      	b.n	88ca <WriteDataBlockAndHeader+0xd2>
        UpdateSectorHead((pBlockHeader->blockLength + BLOCK_HEADER_SIZE), ITEM_64BYTE_ALIGNMENT);
    8910:	79a3      	ldrb	r3, [r4, #6]
    8912:	79e0      	ldrb	r0, [r4, #7]
    8914:	0200      	lsls	r0, r0, #8
    8916:	4318      	orrs	r0, r3
    8918:	3010      	adds	r0, #16
    891a:	b280      	uxth	r0, r0
    891c:	2102      	movs	r1, #2
    891e:	4b08      	ldr	r3, [pc, #32]	; (8940 <WriteDataBlockAndHeader+0x148>)
    8920:	4798      	blx	r3
        return false;
    8922:	e7ca      	b.n	88ba <WriteDataBlockAndHeader+0xc2>
    8924:	2000012c 	.word	0x2000012c
    8928:	00016151 	.word	0x00016151
    892c:	0000ffff 	.word	0x0000ffff
    8930:	00007e9d 	.word	0x00007e9d
    8934:	0001613f 	.word	0x0001613f
    8938:	2000026a 	.word	0x2000026a
    893c:	00008161 	.word	0x00008161
    8940:	00007e61 	.word	0x00007e61

00008944 <S_Nv_Write_Impl>:
#if defined(S_XNV_LOGGING)
static S_Nv_ReturnValue_t S_Nv_Write_Original(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#else
S_Nv_ReturnValue_t S_Nv_Write_Impl(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#endif
{
    8944:	b5f0      	push	{r4, r5, r6, r7, lr}
    8946:	46ce      	mov	lr, r9
    8948:	4647      	mov	r7, r8
    894a:	b580      	push	{r7, lr}
    894c:	b087      	sub	sp, #28
    894e:	0004      	movs	r4, r0
    8950:	9101      	str	r1, [sp, #4]
    8952:	0015      	movs	r5, r2
    8954:	001f      	movs	r7, r3
    assert((id != 0u) && (pData != NULL));
    8956:	2800      	cmp	r0, #0
    8958:	d00c      	beq.n	8974 <S_Nv_Write_Impl+0x30>
    895a:	2b00      	cmp	r3, #0
    895c:	d00a      	beq.n	8974 <S_Nv_Write_Impl+0x30>

    if ( PowerSupplyTooLow() )
    895e:	4b35      	ldr	r3, [pc, #212]	; (8a34 <S_Nv_Write_Impl+0xf0>)
    8960:	4798      	blx	r3
    {
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    8962:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    8964:	2800      	cmp	r0, #0
    8966:	d00b      	beq.n	8980 <S_Nv_Write_Impl+0x3c>
        //SYS_StartTimer(&compactItemTimer);
        }
    }

    return S_Nv_ReturnValue_Ok;
}
    8968:	0018      	movs	r0, r3
    896a:	b007      	add	sp, #28
    896c:	bc0c      	pop	{r2, r3}
    896e:	4690      	mov	r8, r2
    8970:	4699      	mov	r9, r3
    8972:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((id != 0u) && (pData != NULL));
    8974:	4b30      	ldr	r3, [pc, #192]	; (8a38 <S_Nv_Write_Impl+0xf4>)
    8976:	4a31      	ldr	r2, [pc, #196]	; (8a3c <S_Nv_Write_Impl+0xf8>)
    8978:	4931      	ldr	r1, [pc, #196]	; (8a40 <S_Nv_Write_Impl+0xfc>)
    897a:	4832      	ldr	r0, [pc, #200]	; (8a44 <S_Nv_Write_Impl+0x100>)
    897c:	4c32      	ldr	r4, [pc, #200]	; (8a48 <S_Nv_Write_Impl+0x104>)
    897e:	47a0      	blx	r4
    CompactSectorIfNeeded(BLOCK_HEADER_SIZE + dataLength);
    8980:	0028      	movs	r0, r5
    8982:	3010      	adds	r0, #16
    8984:	b280      	uxth	r0, r0
    8986:	4b31      	ldr	r3, [pc, #196]	; (8a4c <S_Nv_Write_Impl+0x108>)
    8988:	4798      	blx	r3
    Item_t *cache = FindItemCache(id);
    898a:	0020      	movs	r0, r4
    898c:	4b30      	ldr	r3, [pc, #192]	; (8a50 <S_Nv_Write_Impl+0x10c>)
    898e:	4798      	blx	r3
    8990:	0006      	movs	r6, r0
        return S_Nv_ReturnValue_DoesNotExist;
    8992:	2303      	movs	r3, #3
    if ( cache == NULL )
    8994:	2800      	cmp	r0, #0
    8996:	d0e7      	beq.n	8968 <S_Nv_Write_Impl+0x24>
    uint16_t blockPointer = cache->lastBlock;
    8998:	7883      	ldrb	r3, [r0, #2]
    899a:	78c4      	ldrb	r4, [r0, #3]
    899c:	0224      	lsls	r4, r4, #8
    899e:	431c      	orrs	r4, r3
    89a0:	46a0      	mov	r8, r4
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    89a2:	4b2c      	ldr	r3, [pc, #176]	; (8a54 <S_Nv_Write_Impl+0x110>)
    89a4:	7818      	ldrb	r0, [r3, #0]
    89a6:	2310      	movs	r3, #16
    89a8:	aa02      	add	r2, sp, #8
    89aa:	0021      	movs	r1, r4
    89ac:	4c2a      	ldr	r4, [pc, #168]	; (8a58 <S_Nv_Write_Impl+0x114>)
    89ae:	47a0      	blx	r4
    if ( ((uint32_t) offset + (uint32_t) dataLength) > (uint32_t) blockHeader.itemLength )
    89b0:	ab02      	add	r3, sp, #8
    89b2:	8919      	ldrh	r1, [r3, #8]
    89b4:	9b01      	ldr	r3, [sp, #4]
    89b6:	195a      	adds	r2, r3, r5
        return S_Nv_ReturnValue_BeyondEnd;
    89b8:	2304      	movs	r3, #4
    if ( ((uint32_t) offset + (uint32_t) dataLength) > (uint32_t) blockHeader.itemLength )
    89ba:	428a      	cmp	r2, r1
    89bc:	d8d4      	bhi.n	8968 <S_Nv_Write_Impl+0x24>
    blockHeader.blockOffset = offset;
    89be:	ab02      	add	r3, sp, #8
    89c0:	466a      	mov	r2, sp
    89c2:	8892      	ldrh	r2, [r2, #4]
    89c4:	809a      	strh	r2, [r3, #4]
    blockHeader.blockLength = dataLength;
    89c6:	80dd      	strh	r5, [r3, #6]
    blockHeader.previousBlock = blockPointer;
    89c8:	4642      	mov	r2, r8
    89ca:	815a      	strh	r2, [r3, #10]
    if ( blockHeader.blockLength == blockHeader.itemLength )
    89cc:	428d      	cmp	r5, r1
    89ce:	d02c      	beq.n	8a2a <S_Nv_Write_Impl+0xe6>
        blockHeader.writeCount++;
    89d0:	ab02      	add	r3, sp, #8
    89d2:	899b      	ldrh	r3, [r3, #12]
    89d4:	3301      	adds	r3, #1
    89d6:	aa02      	add	r2, sp, #8
    89d8:	8193      	strh	r3, [r2, #12]
    uint16_t newBlockPointer = s_sectorHead;
    89da:	4b20      	ldr	r3, [pc, #128]	; (8a5c <S_Nv_Write_Impl+0x118>)
    89dc:	881c      	ldrh	r4, [r3, #0]
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pData) )
    89de:	0039      	movs	r1, r7
    89e0:	a802      	add	r0, sp, #8
    89e2:	4b1f      	ldr	r3, [pc, #124]	; (8a60 <S_Nv_Write_Impl+0x11c>)
    89e4:	4798      	blx	r3
        return S_Nv_ReturnValue_Failure;
    89e6:	2301      	movs	r3, #1
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pData) )
    89e8:	2800      	cmp	r0, #0
    89ea:	d0bd      	beq.n	8968 <S_Nv_Write_Impl+0x24>
    cache->lastBlock = newBlockPointer;
    89ec:	70b4      	strb	r4, [r6, #2]
    89ee:	0a24      	lsrs	r4, r4, #8
    89f0:	70f4      	strb	r4, [r6, #3]
    if ( blockHeader.writeCount > COMPACT_ITEM_THRESHOLD )
    89f2:	ab02      	add	r3, sp, #8
    89f4:	899a      	ldrh	r2, [r3, #12]
    return S_Nv_ReturnValue_Ok;
    89f6:	2300      	movs	r3, #0
    if ( blockHeader.writeCount > COMPACT_ITEM_THRESHOLD )
    89f8:	2a64      	cmp	r2, #100	; 0x64
    89fa:	d9b5      	bls.n	8968 <S_Nv_Write_Impl+0x24>
        s_compactItemId = blockHeader.id;
    89fc:	ab02      	add	r3, sp, #8
    89fe:	885a      	ldrh	r2, [r3, #2]
    8a00:	4b18      	ldr	r3, [pc, #96]	; (8a64 <S_Nv_Write_Impl+0x120>)
    8a02:	801a      	strh	r2, [r3, #0]
        s_compactItemLength = 0u;           // no need to resize this item here
    8a04:	2200      	movs	r2, #0
    8a06:	4b18      	ldr	r3, [pc, #96]	; (8a68 <S_Nv_Write_Impl+0x124>)
    8a08:	801a      	strh	r2, [r3, #0]
        if (!SYS_TimerStarted(&compactItemTimer))
    8a0a:	4818      	ldr	r0, [pc, #96]	; (8a6c <S_Nv_Write_Impl+0x128>)
    8a0c:	4b18      	ldr	r3, [pc, #96]	; (8a70 <S_Nv_Write_Impl+0x12c>)
    8a0e:	4798      	blx	r3
    return S_Nv_ReturnValue_Ok;
    8a10:	2300      	movs	r3, #0
        if (!SYS_TimerStarted(&compactItemTimer))
    8a12:	2800      	cmp	r0, #0
    8a14:	d1a8      	bne.n	8968 <S_Nv_Write_Impl+0x24>
        compactItemTimer.handler = compactItemTimerFired;
    8a16:	4b15      	ldr	r3, [pc, #84]	; (8a6c <S_Nv_Write_Impl+0x128>)
    8a18:	4a16      	ldr	r2, [pc, #88]	; (8a74 <S_Nv_Write_Impl+0x130>)
    8a1a:	611a      	str	r2, [r3, #16]
        compactItemTimer.timeout = COMPACT_ITEM_DELAY_MS;
    8a1c:	4a16      	ldr	r2, [pc, #88]	; (8a78 <S_Nv_Write_Impl+0x134>)
    8a1e:	605a      	str	r2, [r3, #4]
        compactItemTimer.interval = COMPACT_ITEM_DELAY_MS;
    8a20:	609a      	str	r2, [r3, #8]
        compactItemTimer.mode = SYS_TIMER_INTERVAL_MODE;
    8a22:	2200      	movs	r2, #0
    8a24:	731a      	strb	r2, [r3, #12]
    return S_Nv_ReturnValue_Ok;
    8a26:	2300      	movs	r3, #0
    8a28:	e79e      	b.n	8968 <S_Nv_Write_Impl+0x24>
        blockHeader.writeCount = 0u;
    8a2a:	2300      	movs	r3, #0
    8a2c:	aa02      	add	r2, sp, #8
    8a2e:	8193      	strh	r3, [r2, #12]
    8a30:	e7d3      	b.n	89da <S_Nv_Write_Impl+0x96>
    8a32:	46c0      	nop			; (mov r8, r8)
    8a34:	00007e45 	.word	0x00007e45
    8a38:	00017ddc 	.word	0x00017ddc
    8a3c:	00017e7c 	.word	0x00017e7c
    8a40:	00000596 	.word	0x00000596
    8a44:	00017d44 	.word	0x00017d44
    8a48:	0001607d 	.word	0x0001607d
    8a4c:	00008545 	.word	0x00008545
    8a50:	0000803d 	.word	0x0000803d
    8a54:	20000268 	.word	0x20000268
    8a58:	00007bf5 	.word	0x00007bf5
    8a5c:	2000026a 	.word	0x2000026a
    8a60:	000087f9 	.word	0x000087f9
    8a64:	20000240 	.word	0x20000240
    8a68:	20000242 	.word	0x20000242
    8a6c:	20000100 	.word	0x20000100
    8a70:	0000b9c9 	.word	0x0000b9c9
    8a74:	000087ed 	.word	0x000087ed
    8a78:	00000bb8 	.word	0x00000bb8

00008a7c <S_Nv_Read_Impl>:
#if defined(S_XNV_LOGGING)
static S_Nv_ReturnValue_t S_Nv_Read_Original(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#else
S_Nv_ReturnValue_t S_Nv_Read_Impl(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#endif
{
    8a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a7e:	b083      	sub	sp, #12
    8a80:	000c      	movs	r4, r1
    8a82:	0015      	movs	r5, r2
    8a84:	001e      	movs	r6, r3
    assert((id != 0u) && (pData != NULL));
    8a86:	2800      	cmp	r0, #0
    8a88:	d009      	beq.n	8a9e <S_Nv_Read_Impl+0x22>
    8a8a:	2b00      	cmp	r3, #0
    8a8c:	d007      	beq.n	8a9e <S_Nv_Read_Impl+0x22>

    // get the pointer to the last written block for the item
    uint16_t lastBlockPointer = FindItem(id);
    8a8e:	4b10      	ldr	r3, [pc, #64]	; (8ad0 <S_Nv_Read_Impl+0x54>)
    8a90:	4798      	blx	r3
    if ( lastBlockPointer == 0x0000u )
    {
        // item does not exist
        return S_Nv_ReturnValue_DoesNotExist;
    8a92:	2303      	movs	r3, #3
    if ( lastBlockPointer == 0x0000u )
    8a94:	2800      	cmp	r0, #0
    8a96:	d108      	bne.n	8aaa <S_Nv_Read_Impl+0x2e>
    {
        return S_Nv_ReturnValue_BeyondEnd;
    }

    return S_Nv_ReturnValue_Ok;
}
    8a98:	0018      	movs	r0, r3
    8a9a:	b003      	add	sp, #12
    8a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((id != 0u) && (pData != NULL));
    8a9e:	4b0d      	ldr	r3, [pc, #52]	; (8ad4 <S_Nv_Read_Impl+0x58>)
    8aa0:	4a0d      	ldr	r2, [pc, #52]	; (8ad8 <S_Nv_Read_Impl+0x5c>)
    8aa2:	490e      	ldr	r1, [pc, #56]	; (8adc <S_Nv_Read_Impl+0x60>)
    8aa4:	480e      	ldr	r0, [pc, #56]	; (8ae0 <S_Nv_Read_Impl+0x64>)
    8aa6:	4c0f      	ldr	r4, [pc, #60]	; (8ae4 <S_Nv_Read_Impl+0x68>)
    8aa8:	47a0      	blx	r4
    if ( ((uint32_t) offset + (uint32_t) dataLength) >= 0x10000uL )
    8aaa:	1962      	adds	r2, r4, r5
    8aac:	490e      	ldr	r1, [pc, #56]	; (8ae8 <S_Nv_Read_Impl+0x6c>)
        return S_Nv_ReturnValue_BeyondEnd;
    8aae:	3301      	adds	r3, #1
    if ( ((uint32_t) offset + (uint32_t) dataLength) >= 0x10000uL )
    8ab0:	428a      	cmp	r2, r1
    8ab2:	d8f1      	bhi.n	8a98 <S_Nv_Read_Impl+0x1c>
    if ( !GatherData(s_sector, lastBlockPointer, offset, dataLength, pData ))
    8ab4:	4b0d      	ldr	r3, [pc, #52]	; (8aec <S_Nv_Read_Impl+0x70>)
    8ab6:	781f      	ldrb	r7, [r3, #0]
    8ab8:	9600      	str	r6, [sp, #0]
    8aba:	002b      	movs	r3, r5
    8abc:	0022      	movs	r2, r4
    8abe:	0001      	movs	r1, r0
    8ac0:	0038      	movs	r0, r7
    8ac2:	4c0b      	ldr	r4, [pc, #44]	; (8af0 <S_Nv_Read_Impl+0x74>)
    8ac4:	47a0      	blx	r4
    return S_Nv_ReturnValue_Ok;
    8ac6:	4243      	negs	r3, r0
    8ac8:	4143      	adcs	r3, r0
    8aca:	009b      	lsls	r3, r3, #2
    8acc:	e7e4      	b.n	8a98 <S_Nv_Read_Impl+0x1c>
    8ace:	46c0      	nop			; (mov r8, r8)
    8ad0:	000080b1 	.word	0x000080b1
    8ad4:	00017ddc 	.word	0x00017ddc
    8ad8:	00017e8c 	.word	0x00017e8c
    8adc:	000005ee 	.word	0x000005ee
    8ae0:	00017d44 	.word	0x00017d44
    8ae4:	0001607d 	.word	0x0001607d
    8ae8:	0000ffff 	.word	0x0000ffff
    8aec:	20000268 	.word	0x20000268
    8af0:	00007edd 	.word	0x00007edd

00008af4 <S_Nv_ItemLength_Impl>:

/** Interface function, see \ref S_Nv_ItemLength. */
uint16_t S_Nv_ItemLength_Impl(S_Nv_ItemId_t id)
{
    8af4:	b510      	push	{r4, lr}
    8af6:	b084      	sub	sp, #16
    assert(id != 0u);
    8af8:	2800      	cmp	r0, #0
    8afa:	d005      	beq.n	8b08 <S_Nv_ItemLength_Impl+0x14>

    uint16_t blockPointer = FindItem(id);
    8afc:	4b0a      	ldr	r3, [pc, #40]	; (8b28 <S_Nv_ItemLength_Impl+0x34>)
    8afe:	4798      	blx	r3
    8b00:	1e01      	subs	r1, r0, #0
    if ( blockPointer == 0x0000u )
    8b02:	d107      	bne.n	8b14 <S_Nv_ItemLength_Impl+0x20>

    // read last written item block header
    BlockHeader_t blockHeader;
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    return blockHeader.itemLength;
}
    8b04:	b004      	add	sp, #16
    8b06:	bd10      	pop	{r4, pc}
    assert(id != 0u);
    8b08:	4b08      	ldr	r3, [pc, #32]	; (8b2c <S_Nv_ItemLength_Impl+0x38>)
    8b0a:	4a09      	ldr	r2, [pc, #36]	; (8b30 <S_Nv_ItemLength_Impl+0x3c>)
    8b0c:	4909      	ldr	r1, [pc, #36]	; (8b34 <S_Nv_ItemLength_Impl+0x40>)
    8b0e:	480a      	ldr	r0, [pc, #40]	; (8b38 <S_Nv_ItemLength_Impl+0x44>)
    8b10:	4c0a      	ldr	r4, [pc, #40]	; (8b3c <S_Nv_ItemLength_Impl+0x48>)
    8b12:	47a0      	blx	r4
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8b14:	4b0a      	ldr	r3, [pc, #40]	; (8b40 <S_Nv_ItemLength_Impl+0x4c>)
    8b16:	7818      	ldrb	r0, [r3, #0]
    8b18:	2310      	movs	r3, #16
    8b1a:	466a      	mov	r2, sp
    8b1c:	4c09      	ldr	r4, [pc, #36]	; (8b44 <S_Nv_ItemLength_Impl+0x50>)
    8b1e:	47a0      	blx	r4
    return blockHeader.itemLength;
    8b20:	466b      	mov	r3, sp
    8b22:	8918      	ldrh	r0, [r3, #8]
    8b24:	e7ee      	b.n	8b04 <S_Nv_ItemLength_Impl+0x10>
    8b26:	46c0      	nop			; (mov r8, r8)
    8b28:	000080b1 	.word	0x000080b1
    8b2c:	00017dd0 	.word	0x00017dd0
    8b30:	00017e9c 	.word	0x00017e9c
    8b34:	0000060b 	.word	0x0000060b
    8b38:	00017d44 	.word	0x00017d44
    8b3c:	0001607d 	.word	0x0001607d
    8b40:	20000268 	.word	0x20000268
    8b44:	00007bf5 	.word	0x00007bf5

00008b48 <S_Nv_ItemInit_Impl>:
{
    8b48:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b4a:	b085      	sub	sp, #20
    8b4c:	0004      	movs	r4, r0
    8b4e:	000e      	movs	r6, r1
    8b50:	0015      	movs	r5, r2
    assert((id != 0u) && (id < 0xF000u) && (itemLength <= MAX_ITEM_LENGTH));
    8b52:	1e43      	subs	r3, r0, #1
    8b54:	b29b      	uxth	r3, r3
    8b56:	4a2e      	ldr	r2, [pc, #184]	; (8c10 <S_Nv_ItemInit_Impl+0xc8>)
    8b58:	4293      	cmp	r3, r2
    8b5a:	d81e      	bhi.n	8b9a <S_Nv_ItemInit_Impl+0x52>
    8b5c:	2380      	movs	r3, #128	; 0x80
    8b5e:	011b      	lsls	r3, r3, #4
    8b60:	4299      	cmp	r1, r3
    8b62:	d81a      	bhi.n	8b9a <S_Nv_ItemInit_Impl+0x52>
    if ( FindItem(id) != 0x0000u )
    8b64:	4b2b      	ldr	r3, [pc, #172]	; (8c14 <S_Nv_ItemInit_Impl+0xcc>)
    8b66:	4798      	blx	r3
    8b68:	2800      	cmp	r0, #0
    8b6a:	d01d      	beq.n	8ba8 <S_Nv_ItemInit_Impl+0x60>
        uint16_t oldItemLength = S_Nv_ItemLength(id);
    8b6c:	0020      	movs	r0, r4
    8b6e:	4b2a      	ldr	r3, [pc, #168]	; (8c18 <S_Nv_ItemInit_Impl+0xd0>)
    8b70:	4798      	blx	r3
        if ( oldItemLength != itemLength )
    8b72:	4286      	cmp	r6, r0
    8b74:	d007      	beq.n	8b86 <S_Nv_ItemInit_Impl+0x3e>
            s_compactItemId = id;
    8b76:	4b29      	ldr	r3, [pc, #164]	; (8c1c <S_Nv_ItemInit_Impl+0xd4>)
    8b78:	801c      	strh	r4, [r3, #0]
            s_compactItemLength = itemLength;
    8b7a:	4b29      	ldr	r3, [pc, #164]	; (8c20 <S_Nv_ItemInit_Impl+0xd8>)
    8b7c:	801e      	strh	r6, [r3, #0]
            S_Nv_ReturnValue_t resizeResult = CompactItem();
    8b7e:	4b29      	ldr	r3, [pc, #164]	; (8c24 <S_Nv_ItemInit_Impl+0xdc>)
    8b80:	4798      	blx	r3
    8b82:	1e03      	subs	r3, r0, #0
            if ( resizeResult != S_Nv_ReturnValue_Ok )
    8b84:	d115      	bne.n	8bb2 <S_Nv_ItemInit_Impl+0x6a>
        if (pDefaultData != NULL)
    8b86:	2d00      	cmp	r5, #0
    8b88:	d040      	beq.n	8c0c <S_Nv_ItemInit_Impl+0xc4>
            return S_Nv_Read(id, 0u, itemLength, pDefaultData);
    8b8a:	002b      	movs	r3, r5
    8b8c:	0032      	movs	r2, r6
    8b8e:	2100      	movs	r1, #0
    8b90:	0020      	movs	r0, r4
    8b92:	4c25      	ldr	r4, [pc, #148]	; (8c28 <S_Nv_ItemInit_Impl+0xe0>)
    8b94:	47a0      	blx	r4
    8b96:	0003      	movs	r3, r0
    8b98:	e00b      	b.n	8bb2 <S_Nv_ItemInit_Impl+0x6a>
    assert((id != 0u) && (id < 0xF000u) && (itemLength <= MAX_ITEM_LENGTH));
    8b9a:	4b24      	ldr	r3, [pc, #144]	; (8c2c <S_Nv_ItemInit_Impl+0xe4>)
    8b9c:	4a24      	ldr	r2, [pc, #144]	; (8c30 <S_Nv_ItemInit_Impl+0xe8>)
    8b9e:	21aa      	movs	r1, #170	; 0xaa
    8ba0:	00c9      	lsls	r1, r1, #3
    8ba2:	4824      	ldr	r0, [pc, #144]	; (8c34 <S_Nv_ItemInit_Impl+0xec>)
    8ba4:	4c24      	ldr	r4, [pc, #144]	; (8c38 <S_Nv_ItemInit_Impl+0xf0>)
    8ba6:	47a0      	blx	r4
    if ( PowerSupplyTooLow() )
    8ba8:	4b24      	ldr	r3, [pc, #144]	; (8c3c <S_Nv_ItemInit_Impl+0xf4>)
    8baa:	4798      	blx	r3
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    8bac:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    8bae:	2800      	cmp	r0, #0
    8bb0:	d002      	beq.n	8bb8 <S_Nv_ItemInit_Impl+0x70>
}
    8bb2:	0018      	movs	r0, r3
    8bb4:	b005      	add	sp, #20
    8bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CompactSectorIfNeeded(BLOCK_HEADER_SIZE + itemLength);
    8bb8:	0030      	movs	r0, r6
    8bba:	3010      	adds	r0, #16
    8bbc:	b280      	uxth	r0, r0
    8bbe:	4b20      	ldr	r3, [pc, #128]	; (8c40 <S_Nv_ItemInit_Impl+0xf8>)
    8bc0:	4798      	blx	r3
    assert(s_itemCount < MAX_ITEM_COUNT);
    8bc2:	4b20      	ldr	r3, [pc, #128]	; (8c44 <S_Nv_ItemInit_Impl+0xfc>)
    8bc4:	781b      	ldrb	r3, [r3, #0]
    8bc6:	2b06      	cmp	r3, #6
    8bc8:	d819      	bhi.n	8bfe <S_Nv_ItemInit_Impl+0xb6>
    uint16_t newItemPointer = s_sectorHead;
    8bca:	4b1f      	ldr	r3, [pc, #124]	; (8c48 <S_Nv_ItemInit_Impl+0x100>)
    8bcc:	881f      	ldrh	r7, [r3, #0]
    blockHeader.id = newItemId;
    8bce:	466b      	mov	r3, sp
    8bd0:	805c      	strh	r4, [r3, #2]
    blockHeader.blockOffset = 0x0000u;
    8bd2:	2300      	movs	r3, #0
    8bd4:	466a      	mov	r2, sp
    8bd6:	8093      	strh	r3, [r2, #4]
    blockHeader.blockLength = itemLength;
    8bd8:	80d6      	strh	r6, [r2, #6]
    blockHeader.itemLength = itemLength;
    8bda:	8116      	strh	r6, [r2, #8]
    blockHeader.previousBlock = 0x0000u;
    8bdc:	8153      	strh	r3, [r2, #10]
    blockHeader.writeCount = 0u;
    8bde:	8193      	strh	r3, [r2, #12]
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pDefaultData) )
    8be0:	0029      	movs	r1, r5
    8be2:	4668      	mov	r0, sp
    8be4:	4b19      	ldr	r3, [pc, #100]	; (8c4c <S_Nv_ItemInit_Impl+0x104>)
    8be6:	4798      	blx	r3
        return S_Nv_ReturnValue_Failure;
    8be8:	2301      	movs	r3, #1
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pDefaultData) )
    8bea:	2800      	cmp	r0, #0
    8bec:	d0e1      	beq.n	8bb2 <S_Nv_ItemInit_Impl+0x6a>
    Item_t *newItemCache = CreateItemCache(newItemId);
    8bee:	0020      	movs	r0, r4
    8bf0:	4b17      	ldr	r3, [pc, #92]	; (8c50 <S_Nv_ItemInit_Impl+0x108>)
    8bf2:	4798      	blx	r3
    newItemCache->lastBlock = newItemPointer;
    8bf4:	7087      	strb	r7, [r0, #2]
    8bf6:	0a3f      	lsrs	r7, r7, #8
    8bf8:	70c7      	strb	r7, [r0, #3]
    return S_Nv_ReturnValue_DidNotExist;
    8bfa:	2302      	movs	r3, #2
    8bfc:	e7d9      	b.n	8bb2 <S_Nv_ItemInit_Impl+0x6a>
    assert(s_itemCount < MAX_ITEM_COUNT);
    8bfe:	4b15      	ldr	r3, [pc, #84]	; (8c54 <S_Nv_ItemInit_Impl+0x10c>)
    8c00:	4a0b      	ldr	r2, [pc, #44]	; (8c30 <S_Nv_ItemInit_Impl+0xe8>)
    8c02:	21af      	movs	r1, #175	; 0xaf
    8c04:	00c9      	lsls	r1, r1, #3
    8c06:	480b      	ldr	r0, [pc, #44]	; (8c34 <S_Nv_ItemInit_Impl+0xec>)
    8c08:	4c0b      	ldr	r4, [pc, #44]	; (8c38 <S_Nv_ItemInit_Impl+0xf0>)
    8c0a:	47a0      	blx	r4
            return S_Nv_ReturnValue_Ok;
    8c0c:	2300      	movs	r3, #0
    8c0e:	e7d0      	b.n	8bb2 <S_Nv_ItemInit_Impl+0x6a>
    8c10:	0000effe 	.word	0x0000effe
    8c14:	000080b1 	.word	0x000080b1
    8c18:	00008af5 	.word	0x00008af5
    8c1c:	20000240 	.word	0x20000240
    8c20:	20000242 	.word	0x20000242
    8c24:	000085c1 	.word	0x000085c1
    8c28:	00008a7d 	.word	0x00008a7d
    8c2c:	00017d90 	.word	0x00017d90
    8c30:	00017e68 	.word	0x00017e68
    8c34:	00017d44 	.word	0x00017d44
    8c38:	0001607d 	.word	0x0001607d
    8c3c:	00007e45 	.word	0x00007e45
    8c40:	00008545 	.word	0x00008545
    8c44:	20000260 	.word	0x20000260
    8c48:	2000026a 	.word	0x2000026a
    8c4c:	000087f9 	.word	0x000087f9
    8c50:	000080cd 	.word	0x000080cd
    8c54:	00017d08 	.word	0x00017d08

00008c58 <S_Nv_IsItemAvailable_Impl>:
/** Interface function, see \ref S_Nv_IsItemAvailable.
 *
 * Important: This will check whether the item is found in the storage area
 */
bool S_Nv_IsItemAvailable_Impl(S_Nv_ItemId_t id)
{
    8c58:	b510      	push	{r4, lr}
  return ( FindItem(id) != 0x0000u );
    8c5a:	4b03      	ldr	r3, [pc, #12]	; (8c68 <S_Nv_IsItemAvailable_Impl+0x10>)
    8c5c:	4798      	blx	r3
    8c5e:	1e43      	subs	r3, r0, #1
    8c60:	4198      	sbcs	r0, r3
    8c62:	b2c0      	uxtb	r0, r0
}
    8c64:	bd10      	pop	{r4, pc}
    8c66:	46c0      	nop			; (mov r8, r8)
    8c68:	000080b1 	.word	0x000080b1

00008c6c <pdsInitItemMask>:
\param[in] itemMask - itemMask to be initialized

\return true itemMask is initialized, false otherwise
******************************************************************************/
static bool pdsInitItemMask(S_Nv_ItemId_t memoryId, uint8_t *itemMask)
{
    8c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8c6e:	46d6      	mov	lr, sl
    8c70:	4647      	mov	r7, r8
    8c72:	b580      	push	{r7, lr}
    8c74:	b087      	sub	sp, #28
    8c76:	000f      	movs	r7, r1
  if (PDS_ALL_EXISTENT_MEMORY == memoryId)
    8c78:	4b20      	ldr	r3, [pc, #128]	; (8cfc <pdsInitItemMask+0x90>)
    8c7a:	4298      	cmp	r0, r3
    8c7c:	d012      	beq.n	8ca4 <pdsInitItemMask+0x38>
  {
    memset(itemMask, 0xFFU, PDS_ITEM_MASK_SIZE);
    itemMask[0] &= 0xFEU;
  }
  else if (PDS_DIRECTORY_MASK & memoryId)
    8c7e:	0443      	lsls	r3, r0, #17
    8c80:	d415      	bmi.n	8cae <pdsInitItemMask+0x42>
    else
      return false;
  }
  else
  {
    itemMask[memoryId / 8] |= 1 << (memoryId % 8);
    8c82:	08c3      	lsrs	r3, r0, #3
    8c84:	18cf      	adds	r7, r1, r3
    8c86:	2307      	movs	r3, #7
    8c88:	4018      	ands	r0, r3
    8c8a:	3b06      	subs	r3, #6
    8c8c:	4083      	lsls	r3, r0
    8c8e:	783a      	ldrb	r2, [r7, #0]
    8c90:	4313      	orrs	r3, r2
    8c92:	703b      	strb	r3, [r7, #0]
  }

  return true;
    8c94:	2301      	movs	r3, #1
    8c96:	9301      	str	r3, [sp, #4]
}
    8c98:	9801      	ldr	r0, [sp, #4]
    8c9a:	b007      	add	sp, #28
    8c9c:	bc0c      	pop	{r2, r3}
    8c9e:	4690      	mov	r8, r2
    8ca0:	469a      	mov	sl, r3
    8ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    itemMask[0] &= 0xFEU;
    8ca4:	23fe      	movs	r3, #254	; 0xfe
    8ca6:	700b      	strb	r3, [r1, #0]
  return true;
    8ca8:	3bfd      	subs	r3, #253	; 0xfd
    8caa:	9301      	str	r3, [sp, #4]
    8cac:	e7f4      	b.n	8c98 <pdsInitItemMask+0x2c>
    if (pdsGetDirDescr(memoryId, &dirDescr))
    8cae:	a904      	add	r1, sp, #16
    8cb0:	4b13      	ldr	r3, [pc, #76]	; (8d00 <pdsInitItemMask+0x94>)
    8cb2:	4798      	blx	r3
    8cb4:	9001      	str	r0, [sp, #4]
    8cb6:	2800      	cmp	r0, #0
    8cb8:	d0ee      	beq.n	8c98 <pdsInitItemMask+0x2c>
      for (uint8_t index=0U; index < dirDescr.filesCount; index++)
    8cba:	ab04      	add	r3, sp, #16
    8cbc:	889b      	ldrh	r3, [r3, #4]
    8cbe:	4698      	mov	r8, r3
    8cc0:	2b00      	cmp	r3, #0
    8cc2:	d0e9      	beq.n	8c98 <pdsInitItemMask+0x2c>
    8cc4:	2400      	movs	r4, #0
        memcpy(&memId, (void const FLASH_PTR*)(dirDescr.list + index), sizeof(uint16_t));
    8cc6:	ab02      	add	r3, sp, #8
    8cc8:	1d9d      	adds	r5, r3, #6
    8cca:	4b0e      	ldr	r3, [pc, #56]	; (8d04 <pdsInitItemMask+0x98>)
    8ccc:	469a      	mov	sl, r3
        itemMask[memId / 8U] |= 1U << (memId % 8U);
    8cce:	2607      	movs	r6, #7
        memcpy(&memId, (void const FLASH_PTR*)(dirDescr.list + index), sizeof(uint16_t));
    8cd0:	0061      	lsls	r1, r4, #1
    8cd2:	9b04      	ldr	r3, [sp, #16]
    8cd4:	469c      	mov	ip, r3
    8cd6:	4461      	add	r1, ip
    8cd8:	2202      	movs	r2, #2
    8cda:	0028      	movs	r0, r5
    8cdc:	47d0      	blx	sl
        itemMask[memId / 8U] |= 1U << (memId % 8U);
    8cde:	8829      	ldrh	r1, [r5, #0]
    8ce0:	08ca      	lsrs	r2, r1, #3
    8ce2:	18ba      	adds	r2, r7, r2
    8ce4:	4031      	ands	r1, r6
    8ce6:	2301      	movs	r3, #1
    8ce8:	408b      	lsls	r3, r1
    8cea:	7811      	ldrb	r1, [r2, #0]
    8cec:	430b      	orrs	r3, r1
    8cee:	7013      	strb	r3, [r2, #0]
      for (uint8_t index=0U; index < dirDescr.filesCount; index++)
    8cf0:	3401      	adds	r4, #1
    8cf2:	b2e4      	uxtb	r4, r4
    8cf4:	b2a3      	uxth	r3, r4
    8cf6:	4543      	cmp	r3, r8
    8cf8:	d3ea      	bcc.n	8cd0 <pdsInitItemMask+0x64>
    8cfa:	e7cd      	b.n	8c98 <pdsInitItemMask+0x2c>
    8cfc:	00004002 	.word	0x00004002
    8d00:	00008f19 	.word	0x00008f19
    8d04:	0001613f 	.word	0x0001613f

00008d08 <PDS_Store>:
{
    8d08:	b510      	push	{r4, lr}
  if (!pdsInitItemMask(memoryId, itemsToStore))
    8d0a:	4905      	ldr	r1, [pc, #20]	; (8d20 <PDS_Store+0x18>)
    8d0c:	4b05      	ldr	r3, [pc, #20]	; (8d24 <PDS_Store+0x1c>)
    8d0e:	4798      	blx	r3
    8d10:	1e04      	subs	r4, r0, #0
    8d12:	d101      	bne.n	8d18 <PDS_Store+0x10>
}
    8d14:	0020      	movs	r0, r4
    8d16:	bd10      	pop	{r4, pc}
  pdsPostTask(PDS_STORE_ITEM_TASK_ID);
    8d18:	2000      	movs	r0, #0
    8d1a:	4b03      	ldr	r3, [pc, #12]	; (8d28 <PDS_Store+0x20>)
    8d1c:	4798      	blx	r3
  return true;
    8d1e:	e7f9      	b.n	8d14 <PDS_Store+0xc>
    8d20:	20000270 	.word	0x20000270
    8d24:	00008c6d 	.word	0x00008c6d
    8d28:	00008e69 	.word	0x00008e69

00008d2c <pdsStoreItemTaskHandler>:
{
    8d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8d2e:	b085      	sub	sp, #20
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    8d30:	4b3e      	ldr	r3, [pc, #248]	; (8e2c <pdsStoreItemTaskHandler+0x100>)
    8d32:	781b      	ldrb	r3, [r3, #0]
    8d34:	3301      	adds	r3, #1
      bit_index %= 8;
    8d36:	2207      	movs	r2, #7
    8d38:	4013      	ands	r3, r2
      if (itemsToStore[byte_index] & (1U << bit_index))
    8d3a:	4a3d      	ldr	r2, [pc, #244]	; (8e30 <pdsStoreItemTaskHandler+0x104>)
    8d3c:	7817      	ldrb	r7, [r2, #0]
    8d3e:	0038      	movs	r0, r7
    8d40:	001e      	movs	r6, r3
    8d42:	003a      	movs	r2, r7
    8d44:	40da      	lsrs	r2, r3
    8d46:	07d2      	lsls	r2, r2, #31
    8d48:	d431      	bmi.n	8dae <pdsStoreItemTaskHandler+0x82>
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    8d4a:	3301      	adds	r3, #1
    8d4c:	b2db      	uxtb	r3, r3
    8d4e:	2207      	movs	r2, #7
      bit_index %= 8;
    8d50:	2507      	movs	r5, #7
      if (itemsToStore[byte_index] & (1U << bit_index))
    8d52:	2401      	movs	r4, #1
      bit_index %= 8;
    8d54:	402b      	ands	r3, r5
      if (itemsToStore[byte_index] & (1U << bit_index))
    8d56:	001e      	movs	r6, r3
    8d58:	0001      	movs	r1, r0
    8d5a:	40d9      	lsrs	r1, r3
    8d5c:	420c      	tst	r4, r1
    8d5e:	d126      	bne.n	8dae <pdsStoreItemTaskHandler+0x82>
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    8d60:	3301      	adds	r3, #1
    8d62:	b2db      	uxtb	r3, r3
    8d64:	3a01      	subs	r2, #1
    8d66:	b2d2      	uxtb	r2, r2
    8d68:	2a00      	cmp	r2, #0
    8d6a:	d1f3      	bne.n	8d54 <pdsStoreItemTaskHandler+0x28>
  for (i = 0U, byte_index = i_found + 1; i < PDS_ITEM_MASK_SIZE; i++, byte_index++)
    8d6c:	2401      	movs	r4, #1
  if (!S_Nv_IsItemAvailable(((S_Nv_ItemId_t)byte_index << 3U) + bit_index))
    8d6e:	00e4      	lsls	r4, r4, #3
    8d70:	18e4      	adds	r4, r4, r3
    8d72:	0020      	movs	r0, r4
    8d74:	4b2f      	ldr	r3, [pc, #188]	; (8e34 <pdsStoreItemTaskHandler+0x108>)
    8d76:	4798      	blx	r3
    8d78:	2800      	cmp	r0, #0
    8d7a:	d124      	bne.n	8dc6 <pdsStoreItemTaskHandler+0x9a>
    if(pdsGetItemDescr(((S_Nv_ItemId_t)byte_index << 3U) + bit_index, &itemDescr))
    8d7c:	4669      	mov	r1, sp
    8d7e:	0020      	movs	r0, r4
    8d80:	4b2d      	ldr	r3, [pc, #180]	; (8e38 <pdsStoreItemTaskHandler+0x10c>)
    8d82:	4798      	blx	r3
    8d84:	2800      	cmp	r0, #0
    8d86:	d038      	beq.n	8dfa <pdsStoreItemTaskHandler+0xce>
      if (itemDescr.filler)
    8d88:	9b02      	ldr	r3, [sp, #8]
    8d8a:	2b00      	cmp	r3, #0
    8d8c:	d000      	beq.n	8d90 <pdsStoreItemTaskHandler+0x64>
        itemDescr.filler();
    8d8e:	4798      	blx	r3
      ret = S_Nv_ItemInit(((S_Nv_ItemId_t)byte_index << 3U) + bit_index, itemDescr.itemSize, itemDescr.itemData);
    8d90:	9a01      	ldr	r2, [sp, #4]
    8d92:	466b      	mov	r3, sp
    8d94:	8859      	ldrh	r1, [r3, #2]
    8d96:	0020      	movs	r0, r4
    8d98:	4b28      	ldr	r3, [pc, #160]	; (8e3c <pdsStoreItemTaskHandler+0x110>)
    8d9a:	4798      	blx	r3
      assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    8d9c:	23fd      	movs	r3, #253	; 0xfd
    8d9e:	4218      	tst	r0, r3
    8da0:	d02b      	beq.n	8dfa <pdsStoreItemTaskHandler+0xce>
    8da2:	4b27      	ldr	r3, [pc, #156]	; (8e40 <pdsStoreItemTaskHandler+0x114>)
    8da4:	4a27      	ldr	r2, [pc, #156]	; (8e44 <pdsStoreItemTaskHandler+0x118>)
    8da6:	21ea      	movs	r1, #234	; 0xea
    8da8:	4827      	ldr	r0, [pc, #156]	; (8e48 <pdsStoreItemTaskHandler+0x11c>)
    8daa:	4c28      	ldr	r4, [pc, #160]	; (8e4c <pdsStoreItemTaskHandler+0x120>)
    8dac:	47a0      	blx	r4
        itemsToStore[byte_index] &= ~(1U << bit_index);
    8dae:	2201      	movs	r2, #1
    8db0:	40b2      	lsls	r2, r6
    8db2:	4397      	bics	r7, r2
    8db4:	4a1e      	ldr	r2, [pc, #120]	; (8e30 <pdsStoreItemTaskHandler+0x104>)
    8db6:	7017      	strb	r7, [r2, #0]
        i_found = byte_index;
    8db8:	2100      	movs	r1, #0
    8dba:	4a25      	ldr	r2, [pc, #148]	; (8e50 <pdsStoreItemTaskHandler+0x124>)
    8dbc:	7011      	strb	r1, [r2, #0]
        j_found = bit_index;
    8dbe:	4a1b      	ldr	r2, [pc, #108]	; (8e2c <pdsStoreItemTaskHandler+0x100>)
    8dc0:	7013      	strb	r3, [r2, #0]
    byte_index %= PDS_ITEM_MASK_SIZE;
    8dc2:	2400      	movs	r4, #0
    8dc4:	e7d3      	b.n	8d6e <pdsStoreItemTaskHandler+0x42>
  if (pdsGetItemDescr(id, &itemDescr))
    8dc6:	4669      	mov	r1, sp
    8dc8:	0020      	movs	r0, r4
    8dca:	4b1b      	ldr	r3, [pc, #108]	; (8e38 <pdsStoreItemTaskHandler+0x10c>)
    8dcc:	4798      	blx	r3
    8dce:	2800      	cmp	r0, #0
    8dd0:	d013      	beq.n	8dfa <pdsStoreItemTaskHandler+0xce>
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    8dd2:	466b      	mov	r3, sp
    8dd4:	885b      	ldrh	r3, [r3, #2]
    8dd6:	2b00      	cmp	r3, #0
    8dd8:	d015      	beq.n	8e06 <pdsStoreItemTaskHandler+0xda>
    8dda:	9b01      	ldr	r3, [sp, #4]
    8ddc:	2b00      	cmp	r3, #0
    8dde:	d012      	beq.n	8e06 <pdsStoreItemTaskHandler+0xda>
    if (itemDescr.filler)
    8de0:	9b02      	ldr	r3, [sp, #8]
    8de2:	2b00      	cmp	r3, #0
    8de4:	d000      	beq.n	8de8 <pdsStoreItemTaskHandler+0xbc>
      itemDescr.filler();
    8de6:	4798      	blx	r3
      ret = S_Nv_Write(id, 0U, itemDescr.itemSize, itemDescr.itemData);
    8de8:	9b01      	ldr	r3, [sp, #4]
    8dea:	466a      	mov	r2, sp
    8dec:	8852      	ldrh	r2, [r2, #2]
    8dee:	2100      	movs	r1, #0
    8df0:	0020      	movs	r0, r4
    8df2:	4c18      	ldr	r4, [pc, #96]	; (8e54 <pdsStoreItemTaskHandler+0x128>)
    8df4:	47a0      	blx	r4
      assert(ret == S_Nv_ReturnValue_Ok);
    8df6:	2800      	cmp	r0, #0
    8df8:	d10c      	bne.n	8e14 <pdsStoreItemTaskHandler+0xe8>
    if (itemsToStore[i])
    8dfa:	4b0d      	ldr	r3, [pc, #52]	; (8e30 <pdsStoreItemTaskHandler+0x104>)
    8dfc:	781b      	ldrb	r3, [r3, #0]
    8dfe:	2b00      	cmp	r3, #0
    8e00:	d10f      	bne.n	8e22 <pdsStoreItemTaskHandler+0xf6>
}
    8e02:	b005      	add	sp, #20
    8e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    8e06:	4b14      	ldr	r3, [pc, #80]	; (8e58 <pdsStoreItemTaskHandler+0x12c>)
    8e08:	4a14      	ldr	r2, [pc, #80]	; (8e5c <pdsStoreItemTaskHandler+0x130>)
    8e0a:	2134      	movs	r1, #52	; 0x34
    8e0c:	31ff      	adds	r1, #255	; 0xff
    8e0e:	480e      	ldr	r0, [pc, #56]	; (8e48 <pdsStoreItemTaskHandler+0x11c>)
    8e10:	4c0e      	ldr	r4, [pc, #56]	; (8e4c <pdsStoreItemTaskHandler+0x120>)
    8e12:	47a0      	blx	r4
      assert(ret == S_Nv_ReturnValue_Ok);
    8e14:	4b12      	ldr	r3, [pc, #72]	; (8e60 <pdsStoreItemTaskHandler+0x134>)
    8e16:	4a11      	ldr	r2, [pc, #68]	; (8e5c <pdsStoreItemTaskHandler+0x130>)
    8e18:	2142      	movs	r1, #66	; 0x42
    8e1a:	31ff      	adds	r1, #255	; 0xff
    8e1c:	480a      	ldr	r0, [pc, #40]	; (8e48 <pdsStoreItemTaskHandler+0x11c>)
    8e1e:	4c0b      	ldr	r4, [pc, #44]	; (8e4c <pdsStoreItemTaskHandler+0x120>)
    8e20:	47a0      	blx	r4
      pdsPostTask(PDS_STORE_ITEM_TASK_ID);
    8e22:	2000      	movs	r0, #0
    8e24:	4b0f      	ldr	r3, [pc, #60]	; (8e64 <pdsStoreItemTaskHandler+0x138>)
    8e26:	4798      	blx	r3
}
    8e28:	e7eb      	b.n	8e02 <pdsStoreItemTaskHandler+0xd6>
    8e2a:	46c0      	nop			; (mov r8, r8)
    8e2c:	20000271 	.word	0x20000271
    8e30:	20000270 	.word	0x20000270
    8e34:	00008c59 	.word	0x00008c59
    8e38:	00008ebd 	.word	0x00008ebd
    8e3c:	00008b49 	.word	0x00008b49
    8e40:	00017f40 	.word	0x00017f40
    8e44:	00017f88 	.word	0x00017f88
    8e48:	00017ef0 	.word	0x00017ef0
    8e4c:	0001607d 	.word	0x0001607d
    8e50:	2000026c 	.word	0x2000026c
    8e54:	00008945 	.word	0x00008945
    8e58:	00017eb4 	.word	0x00017eb4
    8e5c:	00017fa0 	.word	0x00017fa0
    8e60:	00017fb0 	.word	0x00017fb0
    8e64:	00008e69 	.word	0x00008e69

00008e68 <pdsPostTask>:
\param[in] taskId - id of a task
******************************************************************************/

void pdsPostTask(PdsTaskId_t taskId)
{
  pendingTasks |= (1U << taskId);
    8e68:	4a03      	ldr	r2, [pc, #12]	; (8e78 <pdsPostTask+0x10>)
    8e6a:	2301      	movs	r3, #1
    8e6c:	4083      	lsls	r3, r0
    8e6e:	7811      	ldrb	r1, [r2, #0]
    8e70:	430b      	orrs	r3, r1
    8e72:	7013      	strb	r3, [r2, #0]
//  SYS_PostTask(PDS_TASK_ID);
}
    8e74:	4770      	bx	lr
    8e76:	46c0      	nop			; (mov r8, r8)
    8e78:	20000272 	.word	0x20000272

00008e7c <PDS_TaskHandler>:

/******************************************************************************
\brief General PDS task handler
******************************************************************************/
void PDS_TaskHandler(void)
{
    8e7c:	b570      	push	{r4, r5, r6, lr}
  if (pendingTasks)
    8e7e:	4b0d      	ldr	r3, [pc, #52]	; (8eb4 <PDS_TaskHandler+0x38>)
    8e80:	781d      	ldrb	r5, [r3, #0]
    8e82:	2d00      	cmp	r5, #0
    8e84:	d012      	beq.n	8eac <PDS_TaskHandler+0x30>
  {
    uint8_t taskId = 0U;

    while (!(pendingTasks & (1U << taskId)))
    8e86:	0028      	movs	r0, r5
    8e88:	07eb      	lsls	r3, r5, #31
    8e8a:	d410      	bmi.n	8eae <PDS_TaskHandler+0x32>
    8e8c:	2300      	movs	r3, #0
    8e8e:	2401      	movs	r4, #1
      taskId++;
    8e90:	3301      	adds	r3, #1
    8e92:	b2db      	uxtb	r3, r3
    while (!(pendingTasks & (1U << taskId)))
    8e94:	0019      	movs	r1, r3
    8e96:	0002      	movs	r2, r0
    8e98:	40da      	lsrs	r2, r3
    8e9a:	4214      	tst	r4, r2
    8e9c:	d0f8      	beq.n	8e90 <PDS_TaskHandler+0x14>

    pendingTasks ^= (1U << taskId);
    8e9e:	2301      	movs	r3, #1
    8ea0:	408b      	lsls	r3, r1
    8ea2:	405d      	eors	r5, r3
    8ea4:	4b03      	ldr	r3, [pc, #12]	; (8eb4 <PDS_TaskHandler+0x38>)
    8ea6:	701d      	strb	r5, [r3, #0]
    pdsTaskHandlers[taskId]();
    8ea8:	4b03      	ldr	r3, [pc, #12]	; (8eb8 <PDS_TaskHandler+0x3c>)
    8eaa:	4798      	blx	r3
   
  }
}
    8eac:	bd70      	pop	{r4, r5, r6, pc}
    while (!(pendingTasks & (1U << taskId)))
    8eae:	2100      	movs	r1, #0
    8eb0:	e7f5      	b.n	8e9e <PDS_TaskHandler+0x22>
    8eb2:	46c0      	nop			; (mov r8, r8)
    8eb4:	20000272 	.word	0x20000272
    8eb8:	00008d2d 	.word	0x00008d2d

00008ebc <pdsGetItemDescr>:
\param[in] itemDescrToGet    - pointer to item descriptor to be loaded;

returns true if descriptor is found out for the given item ID, false - otherwise
******************************************************************************/
bool pdsGetItemDescr(S_Nv_ItemId_t itemId, ItemIdToMemoryMapping_t *itemDescrToGet )
{
    8ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
    8ebe:	b087      	sub	sp, #28
    8ec0:	9101      	str	r1, [sp, #4]
  /* Calculate raw data size */
  for (uint8_t fileIdx = 0; fileIdx < PDS_ITEM_AMOUNT; fileIdx++)
  {
    ItemIdToMemoryMapping_t itemDescr;

    memcpy(&itemDescr, (void const *)itemDescrPtr, sizeof(ItemIdToMemoryMapping_t));
    8ec2:	aa02      	add	r2, sp, #8
    8ec4:	4b10      	ldr	r3, [pc, #64]	; (8f08 <pdsGetItemDescr+0x4c>)
    8ec6:	0011      	movs	r1, r2
    8ec8:	cb70      	ldmia	r3!, {r4, r5, r6}
    8eca:	c170      	stmia	r1!, {r4, r5, r6}
    8ecc:	681b      	ldr	r3, [r3, #0]
    8ece:	600b      	str	r3, [r1, #0]

    if(itemDescr.itemId == itemId)
    8ed0:	8813      	ldrh	r3, [r2, #0]
    8ed2:	4283      	cmp	r3, r0
    8ed4:	d011      	beq.n	8efa <pdsGetItemDescr+0x3e>
    {
      memcpy(itemDescrToGet, &itemDescr, sizeof(ItemIdToMemoryMapping_t));
      return true;
    }
    itemDescrPtr++;
    8ed6:	4b0d      	ldr	r3, [pc, #52]	; (8f0c <pdsGetItemDescr+0x50>)
    memcpy(&itemDescr, (void const *)itemDescrPtr, sizeof(ItemIdToMemoryMapping_t));
    8ed8:	aa02      	add	r2, sp, #8
    8eda:	0011      	movs	r1, r2
    8edc:	001c      	movs	r4, r3
    8ede:	cce0      	ldmia	r4!, {r5, r6, r7}
    8ee0:	c1e0      	stmia	r1!, {r5, r6, r7}
    8ee2:	6824      	ldr	r4, [r4, #0]
    8ee4:	600c      	str	r4, [r1, #0]
    if(itemDescr.itemId == itemId)
    8ee6:	8811      	ldrh	r1, [r2, #0]
    8ee8:	4281      	cmp	r1, r0
    8eea:	d006      	beq.n	8efa <pdsGetItemDescr+0x3e>
    itemDescrPtr++;
    8eec:	3310      	adds	r3, #16
  for (uint8_t fileIdx = 0; fileIdx < PDS_ITEM_AMOUNT; fileIdx++)
    8eee:	4908      	ldr	r1, [pc, #32]	; (8f10 <pdsGetItemDescr+0x54>)
    8ef0:	428b      	cmp	r3, r1
    8ef2:	d1f2      	bne.n	8eda <pdsGetItemDescr+0x1e>

  }
  return false;
    8ef4:	2000      	movs	r0, #0
}
    8ef6:	b007      	add	sp, #28
    8ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      memcpy(itemDescrToGet, &itemDescr, sizeof(ItemIdToMemoryMapping_t));
    8efa:	2210      	movs	r2, #16
    8efc:	a902      	add	r1, sp, #8
    8efe:	9801      	ldr	r0, [sp, #4]
    8f00:	4b04      	ldr	r3, [pc, #16]	; (8f14 <pdsGetItemDescr+0x58>)
    8f02:	4798      	blx	r3
      return true;
    8f04:	2001      	movs	r0, #1
    8f06:	e7f6      	b.n	8ef6 <pdsGetItemDescr+0x3a>
    8f08:	00004400 	.word	0x00004400
    8f0c:	00004410 	.word	0x00004410
    8f10:	00004470 	.word	0x00004470
    8f14:	0001613f 	.word	0x0001613f

00008f18 <pdsGetDirDescr>:
\param[in] dirDescrToGet    - pointer to dir descriptor to be loaded;

returns true if descriptor is found out for the given dir ID, false - otherwise
******************************************************************************/
bool pdsGetDirDescr(S_Nv_ItemId_t itemId, PDS_DirDescr_t *dirDescrToGet )
{
    8f18:	b570      	push	{r4, r5, r6, lr}
    8f1a:	b082      	sub	sp, #8
    8f1c:	000c      	movs	r4, r1
  /* Calculate raw data size */
  for (uint8_t fileIdx = 0; fileIdx < PDS_DIRECTORIES_AMOUNT; fileIdx++)
  {
    PDS_DirDescr_t dirDescr;

    memcpy(&dirDescr, (void const *)dirDescrPtr, sizeof(PDS_DirDescr_t));
    8f1e:	466b      	mov	r3, sp
    8f20:	4a08      	ldr	r2, [pc, #32]	; (8f44 <pdsGetDirDescr+0x2c>)
    8f22:	4669      	mov	r1, sp
    8f24:	ca60      	ldmia	r2!, {r5, r6}
    8f26:	c160      	stmia	r1!, {r5, r6}
    if(dirDescr.memoryId == itemId)
    8f28:	88da      	ldrh	r2, [r3, #6]
      memcpy(dirDescrToGet, &dirDescr, sizeof(PDS_DirDescr_t));
      return true;
    }
    dirDescrPtr++;
  }
  return false;
    8f2a:	2300      	movs	r3, #0
    if(dirDescr.memoryId == itemId)
    8f2c:	4282      	cmp	r2, r0
    8f2e:	d002      	beq.n	8f36 <pdsGetDirDescr+0x1e>
}
    8f30:	0018      	movs	r0, r3
    8f32:	b002      	add	sp, #8
    8f34:	bd70      	pop	{r4, r5, r6, pc}
      memcpy(dirDescrToGet, &dirDescr, sizeof(PDS_DirDescr_t));
    8f36:	2208      	movs	r2, #8
    8f38:	4669      	mov	r1, sp
    8f3a:	0020      	movs	r0, r4
    8f3c:	4b02      	ldr	r3, [pc, #8]	; (8f48 <pdsGetDirDescr+0x30>)
    8f3e:	4798      	blx	r3
      return true;
    8f40:	2301      	movs	r3, #1
    8f42:	e7f5      	b.n	8f30 <pdsGetDirDescr+0x18>
    8f44:	00004400 	.word	0x00004400
    8f48:	0001613f 	.word	0x0001613f

00008f4c <MiMAC_SetAltAddress>:
 *      None
 *
 *****************************************************************************************/

bool MiMAC_SetAltAddress( uint8_t *Address,  uint8_t *PanId)
{
    8f4c:	b510      	push	{r4, lr}
	myNetworkAddress.v[0] = Address[0];
    8f4e:	7802      	ldrb	r2, [r0, #0]
    8f50:	4b08      	ldr	r3, [pc, #32]	; (8f74 <MiMAC_SetAltAddress+0x28>)
    8f52:	701a      	strb	r2, [r3, #0]
	myNetworkAddress.v[1] = Address[1];
    8f54:	7842      	ldrb	r2, [r0, #1]
    8f56:	705a      	strb	r2, [r3, #1]
	MAC_PANID.v[0] = PanId[0];
    8f58:	780a      	ldrb	r2, [r1, #0]
    8f5a:	4c07      	ldr	r4, [pc, #28]	; (8f78 <MiMAC_SetAltAddress+0x2c>)
    8f5c:	7022      	strb	r2, [r4, #0]
	MAC_PANID.v[1] = PanId[1];
    8f5e:	784a      	ldrb	r2, [r1, #1]
    8f60:	7062      	strb	r2, [r4, #1]
	PHY_SetShortAddr(myNetworkAddress.Val);
    8f62:	8818      	ldrh	r0, [r3, #0]
    8f64:	4b05      	ldr	r3, [pc, #20]	; (8f7c <MiMAC_SetAltAddress+0x30>)
    8f66:	4798      	blx	r3
	PHY_SetPanId(MAC_PANID.Val);
    8f68:	8820      	ldrh	r0, [r4, #0]
    8f6a:	4b05      	ldr	r3, [pc, #20]	; (8f80 <MiMAC_SetAltAddress+0x34>)
    8f6c:	4798      	blx	r3
	return true;
}
    8f6e:	2001      	movs	r0, #1
    8f70:	bd10      	pop	{r4, pc}
    8f72:	46c0      	nop			; (mov r8, r8)
    8f74:	200020d8 	.word	0x200020d8
    8f78:	2000214c 	.word	0x2000214c
    8f7c:	0000a211 	.word	0x0000a211
    8f80:	0000a1fd 	.word	0x0000a1fd

00008f84 <mic_generator>:

#if defined (ENABLE_SECURITY)
uint8_t addr[8] = {0xda , 0x98 , 0x22 , 0xfe , 0xff , 0xa3 , 0x04 , 0x00};
void mic_generator (uint8_t *Payloadinfo, uint8_t len , uint8_t frame_control ,  API_UINT32_UNION FrameCounter ,  uint8_t *SourceIEEEAddress)
{
    8f84:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f86:	46c6      	mov	lr, r8
    8f88:	b500      	push	{lr}
    8f8a:	b0c6      	sub	sp, #280	; 0x118
    8f8c:	0006      	movs	r6, r0
    8f8e:	000c      	movs	r4, r1
    8f90:	469c      	mov	ip, r3
    8f92:	994c      	ldr	r1, [sp, #304]	; 0x130
	uint16_t i ;										
	uint8_t j , iterations  , copy_packet1[255] , cbc_header_with_padding[16];
	// Calculating No of blocks in the packet (1 block = 16 bytes of data)
	iterations = len/16;
    8f94:	0925      	lsrs	r5, r4, #4
	if (len % 16 != 0) iterations++;
    8f96:	0723      	lsls	r3, r4, #28
    8f98:	d000      	beq.n	8f9c <mic_generator+0x18>
    8f9a:	3501      	adds	r5, #1
	InitVect_in[0] = 0x49;//frame_control;
    8f9c:	2049      	movs	r0, #73	; 0x49
    8f9e:	4b40      	ldr	r3, [pc, #256]	; (90a0 <mic_generator+0x11c>)
    8fa0:	7018      	strb	r0, [r3, #0]
	cbc_header_with_padding[0] = 0x00;  // l(a)
    8fa2:	2300      	movs	r3, #0
    8fa4:	a802      	add	r0, sp, #8
    8fa6:	7003      	strb	r3, [r0, #0]
	cbc_header_with_padding[1] = 0x0d;  // l(a)Header Length
    8fa8:	330d      	adds	r3, #13
    8faa:	7043      	strb	r3, [r0, #1]
	cbc_header_with_padding[2] = frame_control;  //frame_control;  //byte 1
    8fac:	7082      	strb	r2, [r0, #2]
    8fae:	2200      	movs	r2, #0
	for (i=0;i<8;i++)
	{
		InitVect_in[i+1] =  SourceIEEEAddress[i];
    8fb0:	4b3b      	ldr	r3, [pc, #236]	; (90a0 <mic_generator+0x11c>)
    8fb2:	5c8f      	ldrb	r7, [r1, r2]
    8fb4:	18d0      	adds	r0, r2, r3
    8fb6:	7047      	strb	r7, [r0, #1]
		cbc_header_with_padding[i+7] = SourceIEEEAddress[i];
    8fb8:	0010      	movs	r0, r2
    8fba:	af02      	add	r7, sp, #8
    8fbc:	46b8      	mov	r8, r7
    8fbe:	4440      	add	r0, r8
    8fc0:	5c8f      	ldrb	r7, [r1, r2]
    8fc2:	71c7      	strb	r7, [r0, #7]
    8fc4:	3201      	adds	r2, #1
	for (i=0;i<8;i++)
    8fc6:	2a08      	cmp	r2, #8
    8fc8:	d1f3      	bne.n	8fb2 <mic_generator+0x2e>
	}
	for (i=0;i<4;i++)
	{
		InitVect_in[i+9] = FrameCounter.v[i];
    8fca:	4663      	mov	r3, ip
    8fcc:	466a      	mov	r2, sp
    8fce:	71d3      	strb	r3, [r2, #7]
    8fd0:	79d3      	ldrb	r3, [r2, #7]
    8fd2:	4833      	ldr	r0, [pc, #204]	; (90a0 <mic_generator+0x11c>)
    8fd4:	7243      	strb	r3, [r0, #9]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    8fd6:	4642      	mov	r2, r8
    8fd8:	70d3      	strb	r3, [r2, #3]
		InitVect_in[i+9] = FrameCounter.v[i];
    8fda:	4663      	mov	r3, ip
    8fdc:	041b      	lsls	r3, r3, #16
    8fde:	0e1b      	lsrs	r3, r3, #24
    8fe0:	7283      	strb	r3, [r0, #10]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    8fe2:	7113      	strb	r3, [r2, #4]
		InitVect_in[i+9] = FrameCounter.v[i];
    8fe4:	4663      	mov	r3, ip
    8fe6:	021b      	lsls	r3, r3, #8
    8fe8:	0e1b      	lsrs	r3, r3, #24
    8fea:	72c3      	strb	r3, [r0, #11]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    8fec:	7153      	strb	r3, [r2, #5]
		InitVect_in[i+9] = FrameCounter.v[i];
    8fee:	4663      	mov	r3, ip
    8ff0:	0e1b      	lsrs	r3, r3, #24
    8ff2:	7303      	strb	r3, [r0, #12]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    8ff4:	7193      	strb	r3, [r2, #6]
	}
	//cbc_header_with_padding[14] = 0x00;  // Padding
	cbc_header_with_padding[15] = 0x00;   // Padding
    8ff6:	2300      	movs	r3, #0
    8ff8:	73d3      	strb	r3, [r2, #15]
	InitVect_in[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
    8ffa:	2204      	movs	r2, #4
    8ffc:	7342      	strb	r2, [r0, #13]
	InitVect_in[14] = 0x00; // 15 th byte padded to zero
    8ffe:	7383      	strb	r3, [r0, #14]
	InitVect_in[15] = len; // For MIC calculation All preceding blocks will be incremented by 1
    9000:	73c4      	strb	r4, [r0, #15]
	PHY_EncryptReq(&InitVect_in[0], (uint8_t *)mySecurityKey);
    9002:	4928      	ldr	r1, [pc, #160]	; (90a4 <mic_generator+0x120>)
    9004:	4b28      	ldr	r3, [pc, #160]	; (90a8 <mic_generator+0x124>)
    9006:	4798      	blx	r3
    9008:	2300      	movs	r3, #0
	for (i=0;i<16;i++)
	{
		copy_packet1[i] = cbc_header_with_padding[i];
    900a:	a906      	add	r1, sp, #24
    900c:	aa02      	add	r2, sp, #8
    900e:	5c9a      	ldrb	r2, [r3, r2]
    9010:	545a      	strb	r2, [r3, r1]
    9012:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    9014:	2b10      	cmp	r3, #16
    9016:	d1f9      	bne.n	900c <mic_generator+0x88>
	}
	// Copy the Payload and Do the padding
	for (i=16;i<len+16;i++)
    9018:	0027      	movs	r7, r4
    901a:	3710      	adds	r7, #16
    901c:	2f10      	cmp	r7, #16
    901e:	dd0a      	ble.n	9036 <mic_generator+0xb2>
    9020:	2010      	movs	r0, #16
	{
		copy_packet1[i]	= Payloadinfo[i-16];  // Copying the Payload
    9022:	a906      	add	r1, sp, #24
    9024:	18f2      	adds	r2, r6, r3
    9026:	3a10      	subs	r2, #16
    9028:	7812      	ldrb	r2, [r2, #0]
    902a:	540a      	strb	r2, [r1, r0]
	for (i=16;i<len+16;i++)
    902c:	3301      	adds	r3, #1
    902e:	b29b      	uxth	r3, r3
    9030:	0018      	movs	r0, r3
    9032:	42bb      	cmp	r3, r7
    9034:	dbf6      	blt.n	9024 <mic_generator+0xa0>
	}
	for (i=len+16;i<(iterations *16) + 16 ; i++ )
    9036:	0023      	movs	r3, r4
    9038:	3310      	adds	r3, #16
    903a:	001a      	movs	r2, r3
    903c:	3501      	adds	r5, #1
    903e:	0129      	lsls	r1, r5, #4
    9040:	428b      	cmp	r3, r1
    9042:	da07      	bge.n	9054 <mic_generator+0xd0>
	{
		copy_packet1[i] = 0; // Padding
    9044:	ac06      	add	r4, sp, #24
    9046:	2000      	movs	r0, #0
    9048:	54a0      	strb	r0, [r4, r2]
	for (i=len+16;i<(iterations *16) + 16 ; i++ )
    904a:	3301      	adds	r3, #1
    904c:	b29b      	uxth	r3, r3
    904e:	001a      	movs	r2, r3
    9050:	428b      	cmp	r3, r1
    9052:	dbf9      	blt.n	9048 <mic_generator+0xc4>
	}
	for (i=0;i<iterations+1;i++)
    9054:	2200      	movs	r2, #0
    9056:	2700      	movs	r7, #0
    9058:	2d00      	cmp	r5, #0
    905a:	dd15      	ble.n	9088 <mic_generator+0x104>
	{
		for (j=0;j<16;j++)
		{
			InitVect_in[j]	= InitVect_in[j] ^ copy_packet1[j+(i*16)];
    905c:	4e10      	ldr	r6, [pc, #64]	; (90a0 <mic_generator+0x11c>)
    905e:	0112      	lsls	r2, r2, #4
    9060:	2300      	movs	r3, #0
    9062:	a906      	add	r1, sp, #24
    9064:	188c      	adds	r4, r1, r2
    9066:	1999      	adds	r1, r3, r6
    9068:	5ce2      	ldrb	r2, [r4, r3]
    906a:	7808      	ldrb	r0, [r1, #0]
    906c:	4042      	eors	r2, r0
    906e:	700a      	strb	r2, [r1, #0]
    9070:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    9072:	2b10      	cmp	r3, #16
    9074:	d1f7      	bne.n	9066 <mic_generator+0xe2>
		}
		PHY_EncryptReq(&InitVect_in[0], (uint8_t *)mySecurityKey);
    9076:	490b      	ldr	r1, [pc, #44]	; (90a4 <mic_generator+0x120>)
    9078:	4809      	ldr	r0, [pc, #36]	; (90a0 <mic_generator+0x11c>)
    907a:	4b0b      	ldr	r3, [pc, #44]	; (90a8 <mic_generator+0x124>)
    907c:	4798      	blx	r3
	for (i=0;i<iterations+1;i++)
    907e:	3701      	adds	r7, #1
    9080:	b2bf      	uxth	r7, r7
    9082:	003a      	movs	r2, r7
    9084:	42af      	cmp	r7, r5
    9086:	dbea      	blt.n	905e <mic_generator+0xda>
    9088:	2300      	movs	r3, #0
	}
	for (i=0;i<16;i++)
	{
		CBC_mic[i] = InitVect_in[i];
    908a:	4808      	ldr	r0, [pc, #32]	; (90ac <mic_generator+0x128>)
    908c:	4904      	ldr	r1, [pc, #16]	; (90a0 <mic_generator+0x11c>)
    908e:	5cca      	ldrb	r2, [r1, r3]
    9090:	54c2      	strb	r2, [r0, r3]
    9092:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    9094:	2b10      	cmp	r3, #16
    9096:	d1fa      	bne.n	908e <mic_generator+0x10a>
	}

}
    9098:	b046      	add	sp, #280	; 0x118
    909a:	bc04      	pop	{r2}
    909c:	4690      	mov	r8, r2
    909e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    90a0:	200020e8 	.word	0x200020e8
    90a4:	00017fcc 	.word	0x00017fcc
    90a8:	0000a389 	.word	0x0000a389
    90ac:	2000212c 	.word	0x2000212c

000090b0 <DataEncrypt>:
 *
 *****************************************************************************************/

bool DataEncrypt(uint8_t *Payloadinfo, uint8_t *Payload_len, API_UINT32_UNION FrameCounter,
uint8_t FrameControl)
{
    90b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    90b2:	46de      	mov	lr, fp
    90b4:	4657      	mov	r7, sl
    90b6:	464e      	mov	r6, r9
    90b8:	4645      	mov	r5, r8
    90ba:	b5e0      	push	{r5, r6, r7, lr}
    90bc:	b08d      	sub	sp, #52	; 0x34
    90be:	4680      	mov	r8, r0
    90c0:	000e      	movs	r6, r1
    90c2:	0014      	movs	r4, r2
    90c4:	001a      	movs	r2, r3
	uint16_t i ;
	uint8_t iterations , block[16] , j , CTR_Nonce_and_Counter[16];
	// Calculating No of blocks in the packet (1 block = 16 bytes of data)
	iterations = *Payload_len/16;
    90c6:	7809      	ldrb	r1, [r1, #0]
    90c8:	090d      	lsrs	r5, r1, #4
	if (*Payload_len % 16 != 0) iterations++;
    90ca:	070b      	lsls	r3, r1, #28
    90cc:	d000      	beq.n	90d0 <DataEncrypt+0x20>
    90ce:	3501      	adds	r5, #1

	mic_generator(&Payloadinfo[0] , *Payload_len, FrameControl  , FrameCounter ,  MACInitParams.PAddress);
    90d0:	4b37      	ldr	r3, [pc, #220]	; (91b0 <DataEncrypt+0x100>)
    90d2:	685b      	ldr	r3, [r3, #4]
    90d4:	9300      	str	r3, [sp, #0]
    90d6:	0023      	movs	r3, r4
    90d8:	4640      	mov	r0, r8
    90da:	4f36      	ldr	r7, [pc, #216]	; (91b4 <DataEncrypt+0x104>)
    90dc:	47b8      	blx	r7

	for (i=*Payload_len;i<iterations *16 ; i++ )
    90de:	7831      	ldrb	r1, [r6, #0]
    90e0:	b28b      	uxth	r3, r1
    90e2:	002e      	movs	r6, r5
    90e4:	012d      	lsls	r5, r5, #4
    90e6:	42a9      	cmp	r1, r5
    90e8:	da07      	bge.n	90fa <DataEncrypt+0x4a>
	{
		Payloadinfo[i] = 0; // Padding
    90ea:	2100      	movs	r1, #0
    90ec:	4642      	mov	r2, r8
    90ee:	54d1      	strb	r1, [r2, r3]
	for (i=*Payload_len;i<iterations *16 ; i++ )
    90f0:	3301      	adds	r3, #1
    90f2:	b29b      	uxth	r3, r3
    90f4:	42ab      	cmp	r3, r5
    90f6:	dbfa      	blt.n	90ee <DataEncrypt+0x3e>
    90f8:	4690      	mov	r8, r2
	}
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    90fa:	2201      	movs	r2, #1
    90fc:	ab04      	add	r3, sp, #16
    90fe:	701a      	strb	r2, [r3, #0]
	for (i=0;i<8;i++)
	{
		CTR_Nonce_and_Counter[i+1] = MACInitParams.PAddress[i];
    9100:	4b2b      	ldr	r3, [pc, #172]	; (91b0 <DataEncrypt+0x100>)
    9102:	6858      	ldr	r0, [r3, #4]
    9104:	2300      	movs	r3, #0
    9106:	aa04      	add	r2, sp, #16
    9108:	18d2      	adds	r2, r2, r3
    910a:	5cc1      	ldrb	r1, [r0, r3]
    910c:	7051      	strb	r1, [r2, #1]
    910e:	3301      	adds	r3, #1
	for (i=0;i<8;i++)
    9110:	2b08      	cmp	r3, #8
    9112:	d1f8      	bne.n	9106 <DataEncrypt+0x56>
	}
	for (i=0;i<4;i++)
	{
		CTR_Nonce_and_Counter[i+9] = FrameCounter.v[i];
    9114:	ab04      	add	r3, sp, #16
    9116:	725c      	strb	r4, [r3, #9]
    9118:	0a22      	lsrs	r2, r4, #8
    911a:	729a      	strb	r2, [r3, #10]
    911c:	0c22      	lsrs	r2, r4, #16
    911e:	72da      	strb	r2, [r3, #11]
    9120:	0e24      	lsrs	r4, r4, #24
    9122:	731c      	strb	r4, [r3, #12]
	}
	CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
    9124:	2204      	movs	r2, #4
    9126:	735a      	strb	r2, [r3, #13]
	CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
    9128:	2200      	movs	r2, #0
    912a:	739a      	strb	r2, [r3, #14]
	CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1
    912c:	73da      	strb	r2, [r3, #15]

	for (i=0;i<iterations+1;i++)
    912e:	1c73      	adds	r3, r6, #1
    9130:	4699      	mov	r9, r3
    9132:	2300      	movs	r3, #0
    9134:	469b      	mov	fp, r3
    9136:	9303      	str	r3, [sp, #12]
    9138:	464b      	mov	r3, r9
    913a:	2b00      	cmp	r3, #0
    913c:	dd2f      	ble.n	919e <DataEncrypt+0xee>
	{
		for (j=0;j<16;j++)
		{
			block[j] = CTR_Nonce_and_Counter[j];
    913e:	ac08      	add	r4, sp, #32
    9140:	ad04      	add	r5, sp, #16
		}
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    9142:	4b1d      	ldr	r3, [pc, #116]	; (91b8 <DataEncrypt+0x108>)
    9144:	469a      	mov	sl, r3
		for (j=0;j<16;j++)
		{
			if (CTR_Nonce_and_Counter[15] == 0)
			{
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    9146:	4e1d      	ldr	r6, [pc, #116]	; (91bc <DataEncrypt+0x10c>)
    9148:	e017      	b.n	917a <DataEncrypt+0xca>
			}
			else
			{
				Payloadinfo[j+(i-1)*16] = block[j] ^ Payloadinfo[j+(i-1)*16];
    914a:	5d1a      	ldrb	r2, [r3, r4]
    914c:	5ccf      	ldrb	r7, [r1, r3]
    914e:	407a      	eors	r2, r7
    9150:	54ca      	strb	r2, [r1, r3]
    9152:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    9154:	2b10      	cmp	r3, #16
    9156:	d007      	beq.n	9168 <DataEncrypt+0xb8>
			if (CTR_Nonce_and_Counter[15] == 0)
    9158:	2800      	cmp	r0, #0
    915a:	d1f6      	bne.n	914a <DataEncrypt+0x9a>
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    915c:	5d1a      	ldrb	r2, [r3, r4]
    915e:	4667      	mov	r7, ip
    9160:	5cff      	ldrb	r7, [r7, r3]
    9162:	407a      	eors	r2, r7
    9164:	54f2      	strb	r2, [r6, r3]
    9166:	e7f4      	b.n	9152 <DataEncrypt+0xa2>
			}
		}
		CTR_Nonce_and_Counter[15]++; // Increment Counter for next operation
    9168:	3001      	adds	r0, #1
    916a:	73e8      	strb	r0, [r5, #15]
	for (i=0;i<iterations+1;i++)
    916c:	9f03      	ldr	r7, [sp, #12]
    916e:	3701      	adds	r7, #1
    9170:	b2bb      	uxth	r3, r7
    9172:	9303      	str	r3, [sp, #12]
    9174:	469b      	mov	fp, r3
    9176:	454b      	cmp	r3, r9
    9178:	da11      	bge.n	919e <DataEncrypt+0xee>
		CTR_Nonce_and_Counter[i+1] = MACInitParams.PAddress[i];
    917a:	2300      	movs	r3, #0
			block[j] = CTR_Nonce_and_Counter[j];
    917c:	5d5a      	ldrb	r2, [r3, r5]
    917e:	551a      	strb	r2, [r3, r4]
    9180:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    9182:	2b10      	cmp	r3, #16
    9184:	d1fa      	bne.n	917c <DataEncrypt+0xcc>
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    9186:	490e      	ldr	r1, [pc, #56]	; (91c0 <DataEncrypt+0x110>)
    9188:	0020      	movs	r0, r4
    918a:	47d0      	blx	sl
			if (CTR_Nonce_and_Counter[15] == 0)
    918c:	7be8      	ldrb	r0, [r5, #15]
				Payloadinfo[j+(i-1)*16] = block[j] ^ Payloadinfo[j+(i-1)*16];
    918e:	4659      	mov	r1, fp
    9190:	3901      	subs	r1, #1
    9192:	0109      	lsls	r1, r1, #4
    9194:	2300      	movs	r3, #0
    9196:	4441      	add	r1, r8
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    9198:	4a0a      	ldr	r2, [pc, #40]	; (91c4 <DataEncrypt+0x114>)
    919a:	4694      	mov	ip, r2
    919c:	e7dc      	b.n	9158 <DataEncrypt+0xa8>
	}
	return true;

}
    919e:	2001      	movs	r0, #1
    91a0:	b00d      	add	sp, #52	; 0x34
    91a2:	bc3c      	pop	{r2, r3, r4, r5}
    91a4:	4690      	mov	r8, r2
    91a6:	4699      	mov	r9, r3
    91a8:	46a2      	mov	sl, r4
    91aa:	46ab      	mov	fp, r5
    91ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    91ae:	46c0      	nop			; (mov r8, r8)
    91b0:	200020e0 	.word	0x200020e0
    91b4:	00008f85 	.word	0x00008f85
    91b8:	0000a389 	.word	0x0000a389
    91bc:	20002114 	.word	0x20002114
    91c0:	00017fcc 	.word	0x00017fcc
    91c4:	2000212c 	.word	0x2000212c

000091c8 <validate_mic>:
// Validates the Received mic with the mic computed from data packet decryption.
bool validate_mic(void)
{
	/*************************************************************/
	//SECURITY PATCH UPDATE
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3])
    91c8:	4b0e      	ldr	r3, [pc, #56]	; (9204 <validate_mic+0x3c>)
    91ca:	781a      	ldrb	r2, [r3, #0]
    91cc:	4b0e      	ldr	r3, [pc, #56]	; (9208 <validate_mic+0x40>)
    91ce:	781b      	ldrb	r3, [r3, #0]
	/*************************************************************/
	{
		return false;
    91d0:	2000      	movs	r0, #0
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3])
    91d2:	429a      	cmp	r2, r3
    91d4:	d000      	beq.n	91d8 <validate_mic+0x10>
	}
	else
	{
		return true;
	}
}
    91d6:	4770      	bx	lr
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3])
    91d8:	4b0a      	ldr	r3, [pc, #40]	; (9204 <validate_mic+0x3c>)
    91da:	785a      	ldrb	r2, [r3, #1]
    91dc:	4b0a      	ldr	r3, [pc, #40]	; (9208 <validate_mic+0x40>)
    91de:	785b      	ldrb	r3, [r3, #1]
    91e0:	429a      	cmp	r2, r3
    91e2:	d1f8      	bne.n	91d6 <validate_mic+0xe>
    91e4:	4b07      	ldr	r3, [pc, #28]	; (9204 <validate_mic+0x3c>)
    91e6:	789a      	ldrb	r2, [r3, #2]
    91e8:	4b07      	ldr	r3, [pc, #28]	; (9208 <validate_mic+0x40>)
    91ea:	789b      	ldrb	r3, [r3, #2]
    91ec:	429a      	cmp	r2, r3
    91ee:	d1f2      	bne.n	91d6 <validate_mic+0xe>
    91f0:	4b04      	ldr	r3, [pc, #16]	; (9204 <validate_mic+0x3c>)
    91f2:	78d8      	ldrb	r0, [r3, #3]
    91f4:	4b04      	ldr	r3, [pc, #16]	; (9208 <validate_mic+0x40>)
    91f6:	78db      	ldrb	r3, [r3, #3]
    91f8:	1ac0      	subs	r0, r0, r3
    91fa:	4243      	negs	r3, r0
    91fc:	4158      	adcs	r0, r3
    91fe:	b2c0      	uxtb	r0, r0
    9200:	e7e9      	b.n	91d6 <validate_mic+0xe>
    9202:	46c0      	nop			; (mov r8, r8)
    9204:	20002114 	.word	0x20002114
    9208:	2000213c 	.word	0x2000213c

0000920c <DataDecrypt>:
 *      None
 *
 *****************************************************************************************/
bool DataDecrypt(uint8_t *Payload, uint8_t *PayloadLen, uint8_t *SourceIEEEAddress,
API_UINT32_UNION FrameCounter, uint8_t FrameControl)
{
    920c:	b5f0      	push	{r4, r5, r6, r7, lr}
    920e:	46de      	mov	lr, fp
    9210:	4657      	mov	r7, sl
    9212:	464e      	mov	r6, r9
    9214:	4645      	mov	r5, r8
    9216:	b5e0      	push	{r5, r6, r7, lr}
    9218:	b091      	sub	sp, #68	; 0x44
    921a:	4681      	mov	r9, r0
    921c:	9106      	str	r1, [sp, #24]
    921e:	9204      	str	r2, [sp, #16]
    9220:	9305      	str	r3, [sp, #20]
    9222:	ab1a      	add	r3, sp, #104	; 0x68
    9224:	781b      	ldrb	r3, [r3, #0]
    9226:	9307      	str	r3, [sp, #28]
	uint16_t i ;
	uint8_t iterations , block[16] , j , CTR_Nonce_and_Counter[16];
	// Calculating No of blocks in the packet (1 block = 16 bytes of data)
	iterations = *PayloadLen/16;
    9228:	7809      	ldrb	r1, [r1, #0]
    922a:	090a      	lsrs	r2, r1, #4
	if (*PayloadLen % 16 != 0) iterations++;
    922c:	070b      	lsls	r3, r1, #28
    922e:	d000      	beq.n	9232 <DataDecrypt+0x26>
    9230:	3201      	adds	r2, #1

	//mic_generator(&Payloadinfo[0] , *Payload_len);

	for (i=*PayloadLen;i<iterations *16 ; i++ )
    9232:	b28b      	uxth	r3, r1
    9234:	0010      	movs	r0, r2
    9236:	0112      	lsls	r2, r2, #4
    9238:	4291      	cmp	r1, r2
    923a:	da07      	bge.n	924c <DataDecrypt+0x40>
	{
		Payload[i] = 0; // Padding
    923c:	2100      	movs	r1, #0
    923e:	464c      	mov	r4, r9
    9240:	54e1      	strb	r1, [r4, r3]
	for (i=*PayloadLen;i<iterations *16 ; i++ )
    9242:	3301      	adds	r3, #1
    9244:	b29b      	uxth	r3, r3
    9246:	4293      	cmp	r3, r2
    9248:	dbfa      	blt.n	9240 <DataDecrypt+0x34>
    924a:	46a1      	mov	r9, r4
	}
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    924c:	2201      	movs	r2, #1
    924e:	ab08      	add	r3, sp, #32
    9250:	701a      	strb	r2, [r3, #0]
    9252:	2300      	movs	r3, #0
	for (i=0;i<8;i++)
	{
		CTR_Nonce_and_Counter[i+1] = SourceIEEEAddress[i];
    9254:	9c04      	ldr	r4, [sp, #16]
    9256:	aa08      	add	r2, sp, #32
    9258:	18d2      	adds	r2, r2, r3
    925a:	5ce1      	ldrb	r1, [r4, r3]
    925c:	7051      	strb	r1, [r2, #1]
    925e:	3301      	adds	r3, #1
	for (i=0;i<8;i++)
    9260:	2b08      	cmp	r3, #8
    9262:	d1f8      	bne.n	9256 <DataDecrypt+0x4a>
	}
	for (i=0;i<4;i++)
	{
		CTR_Nonce_and_Counter[i+9] = FrameCounter.v[i];
    9264:	ab08      	add	r3, sp, #32
    9266:	9905      	ldr	r1, [sp, #20]
    9268:	7259      	strb	r1, [r3, #9]
    926a:	0a0a      	lsrs	r2, r1, #8
    926c:	729a      	strb	r2, [r3, #10]
    926e:	0c0a      	lsrs	r2, r1, #16
    9270:	72da      	strb	r2, [r3, #11]
    9272:	0e0a      	lsrs	r2, r1, #24
    9274:	731a      	strb	r2, [r3, #12]
	}
	CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode
    9276:	2204      	movs	r2, #4
    9278:	735a      	strb	r2, [r3, #13]
	CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
    927a:	2200      	movs	r2, #0
    927c:	739a      	strb	r2, [r3, #14]
	CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1
    927e:	73da      	strb	r2, [r3, #15]


	for (i=0;i<iterations+1;i++)
    9280:	1c43      	adds	r3, r0, #1
    9282:	469a      	mov	sl, r3
    9284:	2500      	movs	r5, #0
    9286:	2300      	movs	r3, #0
    9288:	4698      	mov	r8, r3
    928a:	4653      	mov	r3, sl
    928c:	2b00      	cmp	r3, #0
    928e:	dd2e      	ble.n	92ee <DataDecrypt+0xe2>
	{
		for (j=0;j<16;j++)
		{
			block[j] = CTR_Nonce_and_Counter[j];
    9290:	ac0c      	add	r4, sp, #48	; 0x30
    9292:	ae08      	add	r6, sp, #32
		}
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    9294:	4b26      	ldr	r3, [pc, #152]	; (9330 <DataDecrypt+0x124>)
    9296:	469b      	mov	fp, r3
		for (j=0;j<16;j++)
		{
			if (CTR_Nonce_and_Counter[15] == 0)
			{
				CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    9298:	4f26      	ldr	r7, [pc, #152]	; (9334 <DataDecrypt+0x128>)
    929a:	4643      	mov	r3, r8
    929c:	9303      	str	r3, [sp, #12]
    929e:	46a8      	mov	r8, r5
    92a0:	e014      	b.n	92cc <DataDecrypt+0xc0>
			}
			else
			{
				Payload[j+(i-1)*16] = block[j] ^ Payload[j+(i-1)*16];
    92a2:	5d1a      	ldrb	r2, [r3, r4]
    92a4:	5ce9      	ldrb	r1, [r5, r3]
    92a6:	404a      	eors	r2, r1
    92a8:	54ea      	strb	r2, [r5, r3]
    92aa:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    92ac:	2b10      	cmp	r3, #16
    92ae:	d004      	beq.n	92ba <DataDecrypt+0xae>
			if (CTR_Nonce_and_Counter[15] == 0)
    92b0:	2800      	cmp	r0, #0
    92b2:	d1f6      	bne.n	92a2 <DataDecrypt+0x96>
				CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    92b4:	5d1a      	ldrb	r2, [r3, r4]
    92b6:	54fa      	strb	r2, [r7, r3]
    92b8:	e7f7      	b.n	92aa <DataDecrypt+0x9e>
			}
		}
		CTR_Nonce_and_Counter[15]++; // Increment Counter for next opration
    92ba:	3001      	adds	r0, #1
    92bc:	73f0      	strb	r0, [r6, #15]
	for (i=0;i<iterations+1;i++)
    92be:	9d03      	ldr	r5, [sp, #12]
    92c0:	3501      	adds	r5, #1
    92c2:	b2ab      	uxth	r3, r5
    92c4:	9303      	str	r3, [sp, #12]
    92c6:	4698      	mov	r8, r3
    92c8:	4553      	cmp	r3, sl
    92ca:	da10      	bge.n	92ee <DataDecrypt+0xe2>
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    92cc:	2300      	movs	r3, #0
			block[j] = CTR_Nonce_and_Counter[j];
    92ce:	5d9a      	ldrb	r2, [r3, r6]
    92d0:	551a      	strb	r2, [r3, r4]
    92d2:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    92d4:	2b10      	cmp	r3, #16
    92d6:	d1fa      	bne.n	92ce <DataDecrypt+0xc2>
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    92d8:	4917      	ldr	r1, [pc, #92]	; (9338 <DataDecrypt+0x12c>)
    92da:	0020      	movs	r0, r4
    92dc:	47d8      	blx	fp
			if (CTR_Nonce_and_Counter[15] == 0)
    92de:	7bf0      	ldrb	r0, [r6, #15]
				Payload[j+(i-1)*16] = block[j] ^ Payload[j+(i-1)*16];
    92e0:	4642      	mov	r2, r8
    92e2:	3a01      	subs	r2, #1
    92e4:	0112      	lsls	r2, r2, #4
    92e6:	2300      	movs	r3, #0
    92e8:	444a      	add	r2, r9
    92ea:	0015      	movs	r5, r2
    92ec:	e7e0      	b.n	92b0 <DataDecrypt+0xa4>
	}
	*PayloadLen = *PayloadLen-4;
    92ee:	9b06      	ldr	r3, [sp, #24]
    92f0:	7819      	ldrb	r1, [r3, #0]
    92f2:	3904      	subs	r1, #4
    92f4:	b2c9      	uxtb	r1, r1
    92f6:	7019      	strb	r1, [r3, #0]
	mic_generator(&Payload[0] , *PayloadLen , FrameControl  , FrameCounter , SourceIEEEAddress);
    92f8:	9b04      	ldr	r3, [sp, #16]
    92fa:	9300      	str	r3, [sp, #0]
    92fc:	9b05      	ldr	r3, [sp, #20]
    92fe:	9a07      	ldr	r2, [sp, #28]
    9300:	4648      	mov	r0, r9
    9302:	4c0e      	ldr	r4, [pc, #56]	; (933c <DataDecrypt+0x130>)
    9304:	47a0      	blx	r4
    9306:	2300      	movs	r3, #0
	for (i=0;i<16;i++)
	{
		final_mic_value[i] = CTR_mic[i] ^ CBC_mic[i];
    9308:	4d0d      	ldr	r5, [pc, #52]	; (9340 <DataDecrypt+0x134>)
    930a:	4c0a      	ldr	r4, [pc, #40]	; (9334 <DataDecrypt+0x128>)
    930c:	480d      	ldr	r0, [pc, #52]	; (9344 <DataDecrypt+0x138>)
    930e:	5ce2      	ldrb	r2, [r4, r3]
    9310:	5cc1      	ldrb	r1, [r0, r3]
    9312:	404a      	eors	r2, r1
    9314:	54ea      	strb	r2, [r5, r3]
    9316:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    9318:	2b10      	cmp	r3, #16
    931a:	d1f8      	bne.n	930e <DataDecrypt+0x102>
	}
	return validate_mic();
    931c:	4b0a      	ldr	r3, [pc, #40]	; (9348 <DataDecrypt+0x13c>)
    931e:	4798      	blx	r3

}
    9320:	b011      	add	sp, #68	; 0x44
    9322:	bc3c      	pop	{r2, r3, r4, r5}
    9324:	4690      	mov	r8, r2
    9326:	4699      	mov	r9, r3
    9328:	46a2      	mov	sl, r4
    932a:	46ab      	mov	fp, r5
    932c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    932e:	46c0      	nop			; (mov r8, r8)
    9330:	0000a389 	.word	0x0000a389
    9334:	20002104 	.word	0x20002104
    9338:	00017fcc 	.word	0x00017fcc
    933c:	00008f85 	.word	0x00008f85
    9340:	20002114 	.word	0x20002114
    9344:	2000212c 	.word	0x2000212c
    9348:	000091c9 	.word	0x000091c9

0000934c <MiMAC_Set>:
     * Remarks:
     *      None
     *
     *****************************************************************************************/
bool MiMAC_Set(mac_set_params_t id, uint8_t *value)
{
    934c:	b510      	push	{r4, lr}
    switch(id)
    934e:	2800      	cmp	r0, #0
    9350:	d109      	bne.n	9366 <MiMAC_Set+0x1a>
    {
      case MAC_CHANNEL:
      {
         if(*value > LAST_CHANNEL_NUM) //26 // TODO: this check is necessary here? as we may connect a sub-gig or a 2.4gig?
    9352:	780b      	ldrb	r3, [r1, #0]
    9354:	2b19      	cmp	r3, #25
    9356:	d807      	bhi.n	9368 <MiMAC_Set+0x1c>
         {
           return false;
         }
          MACCurrentChannel = *value;
    9358:	4a04      	ldr	r2, [pc, #16]	; (936c <MiMAC_Set+0x20>)
    935a:	7013      	strb	r3, [r2, #0]
          PHY_SetChannel(MACCurrentChannel);
    935c:	0018      	movs	r0, r3
    935e:	4b04      	ldr	r3, [pc, #16]	; (9370 <MiMAC_Set+0x24>)
    9360:	4798      	blx	r3
          return true;
    9362:	2001      	movs	r0, #1
    9364:	e000      	b.n	9368 <MiMAC_Set+0x1c>
      break;

     default:
     break;
    }
    return false;
    9366:	2000      	movs	r0, #0
}
    9368:	bd10      	pop	{r4, pc}
    936a:	46c0      	nop			; (mov r8, r8)
    936c:	2000214e 	.word	0x2000214e
    9370:	0000a2d5 	.word	0x0000a2d5

00009374 <MiMAC_Init>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
bool MiMAC_Init(MACINIT_PARAM initValue)
{
    9374:	b530      	push	{r4, r5, lr}
    9376:	b083      	sub	sp, #12
    9378:	466c      	mov	r4, sp
    937a:	9000      	str	r0, [sp, #0]
    937c:	9101      	str	r1, [sp, #4]
	uint8_t i;

	PHY_Init();
    937e:	4b10      	ldr	r3, [pc, #64]	; (93c0 <MiMAC_Init+0x4c>)
    9380:	4798      	blx	r3
	MACInitParams = initValue;
    9382:	4d10      	ldr	r5, [pc, #64]	; (93c4 <MiMAC_Init+0x50>)
    9384:	002b      	movs	r3, r5
    9386:	cc06      	ldmia	r4!, {r1, r2}
    9388:	c306      	stmia	r3!, {r1, r2}
	uint16_t x =  PHY_RandomReq();
    938a:	4b0f      	ldr	r3, [pc, #60]	; (93c8 <MiMAC_Init+0x54>)
    938c:	4798      	blx	r3
    938e:	0004      	movs	r4, r0
	// Set RF mode
	PHY_SetRxState(true);
    9390:	2001      	movs	r0, #1
    9392:	4b0e      	ldr	r3, [pc, #56]	; (93cc <MiMAC_Init+0x58>)
    9394:	4798      	blx	r3
	IEEESeqNum =   x & 0xff;
    9396:	4b0e      	ldr	r3, [pc, #56]	; (93d0 <MiMAC_Init+0x5c>)
    9398:	701c      	strb	r4, [r3, #0]

	// Set Node Address
	PHY_SetIEEEAddr(MACInitParams.PAddress);
    939a:	6868      	ldr	r0, [r5, #4]
    939c:	4b0d      	ldr	r3, [pc, #52]	; (93d4 <MiMAC_Init+0x60>)
    939e:	4798      	blx	r3

	for (i = 0; i < BANK_SIZE; i++)
	{
		RxBuffer[i].PayloadLen = 0;
    93a0:	4b0d      	ldr	r3, [pc, #52]	; (93d8 <MiMAC_Init+0x64>)
    93a2:	2200      	movs	r2, #0
    93a4:	701a      	strb	r2, [r3, #0]
    93a6:	2102      	movs	r1, #2
    93a8:	31ff      	adds	r1, #255	; 0xff
    93aa:	545a      	strb	r2, [r3, r1]
    93ac:	490b      	ldr	r1, [pc, #44]	; (93dc <MiMAC_Init+0x68>)
    93ae:	545a      	strb	r2, [r3, r1]
    93b0:	490b      	ldr	r1, [pc, #44]	; (93e0 <MiMAC_Init+0x6c>)
    93b2:	545a      	strb	r2, [r3, r1]
				OutgoingFrameCounter.Val = 0;
				PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
				OutgoingFrameCounter.Val = 1;
			}
		#else
			OutgoingFrameCounter.Val = 1;
    93b4:	3201      	adds	r2, #1
    93b6:	4b0b      	ldr	r3, [pc, #44]	; (93e4 <MiMAC_Init+0x70>)
    93b8:	601a      	str	r2, [r3, #0]
		#endif
	#endif

	return true;
}
    93ba:	2001      	movs	r0, #1
    93bc:	b003      	add	sp, #12
    93be:	bd30      	pop	{r4, r5, pc}
    93c0:	0000a1bd 	.word	0x0000a1bd
    93c4:	200020e0 	.word	0x200020e0
    93c8:	0000a371 	.word	0x0000a371
    93cc:	0000a1f1 	.word	0x0000a1f1
    93d0:	20001fd5 	.word	0x20001fd5
    93d4:	0000a395 	.word	0x0000a395
    93d8:	20002258 	.word	0x20002258
    93dc:	00000202 	.word	0x00000202
    93e0:	00000303 	.word	0x00000303
    93e4:	20002128 	.word	0x20002128

000093e8 <MiMAC_SendPacket>:

bool MiMAC_SendPacket( MAC_TRANS_PARAM transParam,
         uint8_t *MACPayload,
         uint8_t MACPayloadLen, uint8_t msghandle,
         DataConf_callback_t ConfCallback)
{
    93e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    93ea:	46de      	mov	lr, fp
    93ec:	4657      	mov	r7, sl
    93ee:	464e      	mov	r6, r9
    93f0:	4645      	mov	r5, r8
    93f2:	b5e0      	push	{r5, r6, r7, lr}
    93f4:	b087      	sub	sp, #28
    93f6:	af03      	add	r7, sp, #12
    93f8:	1c04      	adds	r4, r0, #0
    93fa:	9003      	str	r0, [sp, #12]
    93fc:	0008      	movs	r0, r1
    93fe:	9104      	str	r1, [sp, #16]
    9400:	0015      	movs	r5, r2
    9402:	0a2d      	lsrs	r5, r5, #8
    9404:	9205      	str	r2, [sp, #20]
    9406:	9300      	str	r3, [sp, #0]
    9408:	ab11      	add	r3, sp, #68	; 0x44
    940a:	781b      	ldrb	r3, [r3, #0]
    940c:	469a      	mov	sl, r3
    940e:	b2e4      	uxtb	r4, r4
    9410:	06a6      	lsls	r6, r4, #26
    9412:	0ff6      	lsrs	r6, r6, #31
    9414:	9002      	str	r0, [sp, #8]
    9416:	b2d3      	uxtb	r3, r2
    9418:	469c      	mov	ip, r3
    941a:	b2ed      	uxtb	r5, r5
    uint8_t headerLength;
    uint8_t loc = 0;
    uint8_t i = 0;

	uint8_t frameControl = 0;
	dataConfAvailable = false;
    941c:	2200      	movs	r2, #0
    941e:	4bc4      	ldr	r3, [pc, #784]	; (9730 <MiMAC_SendPacket+0x348>)
    9420:	701a      	strb	r2, [r3, #0]
	#ifndef TARGET_SMALL
		bool IntraPAN;
	#endif
	
	MACdatatransParam = transParam;
    9422:	4bc4      	ldr	r3, [pc, #784]	; (9734 <MiMAC_SendPacket+0x34c>)
    9424:	cf07      	ldmia	r7!, {r0, r1, r2}
    9426:	c307      	stmia	r3!, {r0, r1, r2}

    if (transParam.flags.bits.broadcast)
    9428:	0763      	lsls	r3, r4, #29
    942a:	d501      	bpl.n	9430 <MiMAC_SendPacket+0x48>
    {
        transParam.altDestAddr = true;
    942c:	2301      	movs	r3, #1
    942e:	469c      	mov	ip, r3
    }

    if (transParam.flags.bits.secEn)
    9430:	2308      	movs	r3, #8
    9432:	4023      	ands	r3, r4
    9434:	001a      	movs	r2, r3
    {
        transParam.altSrcAddr = false;
    9436:	4253      	negs	r3, r2
    9438:	4153      	adcs	r3, r2
    943a:	425b      	negs	r3, r3
    943c:	401d      	ands	r5, r3
    }

    // set the frame control in variable i
    if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND)
    943e:	2303      	movs	r3, #3
    9440:	4023      	ands	r3, r4
    9442:	2b01      	cmp	r3, #1
    9444:	d04d      	beq.n	94e2 <MiMAC_SendPacket+0xfa>
    {
        frameControl = 0x03;
    } else if (transParam.flags.bits.packetType == PACKET_TYPE_DATA)
    {
        frameControl = 0x01;
    9446:	2201      	movs	r2, #1
    9448:	4691      	mov	r9, r2
    } else if (transParam.flags.bits.packetType == PACKET_TYPE_DATA)
    944a:	2b00      	cmp	r3, #0
    944c:	d004      	beq.n	9458 <MiMAC_SendPacket+0x70>
    }
	else if (transParam.flags.bits.packetType == PACKET_TYPE_ACK)
    {
        frameControl = 0x02;
    944e:	1e9a      	subs	r2, r3, #2
    9450:	4251      	negs	r1, r2
    9452:	4151      	adcs	r1, r2
    9454:	004a      	lsls	r2, r1, #1
    9456:	4691      	mov	r9, r2
    }
    // decide the header length for different addressing mode
#ifndef TARGET_SMALL
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    9458:	aa03      	add	r2, sp, #12
    945a:	8952      	ldrh	r2, [r2, #10]
    945c:	48b6      	ldr	r0, [pc, #728]	; (9738 <MiMAC_SendPacket+0x350>)
    945e:	8800      	ldrh	r0, [r0, #0]
    9460:	4290      	cmp	r0, r2
    9462:	d041      	beq.n	94e8 <MiMAC_SendPacket+0x100>
    }
#ifndef TARGET_SMALL
    else
    {
        headerLength = 7;
        IntraPAN = false;
    9464:	2200      	movs	r2, #0
    9466:	4693      	mov	fp, r2
        headerLength = 7;
    9468:	3207      	adds	r2, #7
    }
#endif

    if (transParam.altDestAddr)
    946a:	46e0      	mov	r8, ip
    {
        headerLength += 2;
    } else
    {
        headerLength += 8;
    946c:	0017      	movs	r7, r2
    946e:	3708      	adds	r7, #8
    if (transParam.altDestAddr)
    9470:	4661      	mov	r1, ip
    9472:	2900      	cmp	r1, #0
    9474:	d000      	beq.n	9478 <MiMAC_SendPacket+0x90>
        headerLength += 2;
    9476:	1c97      	adds	r7, r2, #2
    }

    if (transParam.altSrcAddr)
    9478:	2d00      	cmp	r5, #0
    947a:	d044      	beq.n	9506 <MiMAC_SendPacket+0x11e>
    {
        headerLength += 2;
    947c:	3702      	adds	r7, #2
    947e:	b2fa      	uxtb	r2, r7
    9480:	9201      	str	r2, [sp, #4]
    } else
    {
        headerLength += 8;
    }

    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false)
    9482:	2224      	movs	r2, #36	; 0x24
    9484:	4014      	ands	r4, r2
    9486:	2c20      	cmp	r4, #32
    9488:	d041      	beq.n	950e <MiMAC_SendPacket+0x126>
    {
        frameControl |= 0x20;
    }

    // use PACKET_TYPE_RESERVE to represent beacon. Fixed format for beacon packet
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    948a:	2b03      	cmp	r3, #3
    948c:	d044      	beq.n	9518 <MiMAC_SendPacket+0x130>
        IntraPAN = false;
#endif
        transParam.altSrcAddr = true;
        transParam.flags.bits.ackReq = false;
    }
	if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND) 
    948e:	aa03      	add	r2, sp, #12
    9490:	0171      	lsls	r1, r6, #5
    9492:	7813      	ldrb	r3, [r2, #0]
    9494:	2020      	movs	r0, #32
    9496:	4383      	bics	r3, r0
    9498:	430b      	orrs	r3, r1
    949a:	7013      	strb	r3, [r2, #0]
    949c:	2203      	movs	r2, #3
    949e:	4013      	ands	r3, r2
    94a0:	2b01      	cmp	r3, #1
    94a2:	d041      	beq.n	9528 <MiMAC_SendPacket+0x140>
    {
        transParam.flags.bits.ackReq = false;
    }

#ifdef ENABLE_SECURITY
    if (transParam.flags.bits.secEn)
    94a4:	ab03      	add	r3, sp, #12
    94a6:	0172      	lsls	r2, r6, #5
    94a8:	781c      	ldrb	r4, [r3, #0]
    94aa:	2120      	movs	r1, #32
    94ac:	438c      	bics	r4, r1
    94ae:	4314      	orrs	r4, r2
    94b0:	701c      	strb	r4, [r3, #0]
    94b2:	b2e4      	uxtb	r4, r4
    94b4:	0723      	lsls	r3, r4, #28
    94b6:	d439      	bmi.n	952c <MiMAC_SendPacket+0x144>
		// 4 byte mic and 5 byte outgoing frame counter
		packet[loc++] = MACPayloadLen+headerLength+9;
    } else
#endif
    {
		packet[loc++] = MACPayloadLen+headerLength;
    94b8:	ab10      	add	r3, sp, #64	; 0x40
    94ba:	781b      	ldrb	r3, [r3, #0]
    94bc:	9a01      	ldr	r2, [sp, #4]
    94be:	18d7      	adds	r7, r2, r3
    94c0:	4b9e      	ldr	r3, [pc, #632]	; (973c <MiMAC_SendPacket+0x354>)
    94c2:	701f      	strb	r7, [r3, #0]
    }

    // set frame control LSB
	packet[loc++] = frameControl;
    94c4:	4b9d      	ldr	r3, [pc, #628]	; (973c <MiMAC_SendPacket+0x354>)
    94c6:	464a      	mov	r2, r9
    94c8:	705a      	strb	r2, [r3, #1]

    // set frame control MSB
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    94ca:	43e3      	mvns	r3, r4
    94cc:	079b      	lsls	r3, r3, #30
    94ce:	d040      	beq.n	9552 <MiMAC_SendPacket+0x16a>
		packet[loc++] = 0x80;
        // sequence number
		packet[loc++] = IEEESeqNum++;
    } else
    {
        if (transParam.altDestAddr && transParam.altSrcAddr)
    94d0:	4643      	mov	r3, r8
    94d2:	2b00      	cmp	r3, #0
    94d4:	d05f      	beq.n	9596 <MiMAC_SendPacket+0x1ae>
    94d6:	2d00      	cmp	r5, #0
    94d8:	d045      	beq.n	9566 <MiMAC_SendPacket+0x17e>
        {
			packet[loc++] = 0x88;
    94da:	2288      	movs	r2, #136	; 0x88
    94dc:	4b97      	ldr	r3, [pc, #604]	; (973c <MiMAC_SendPacket+0x354>)
    94de:	709a      	strb	r2, [r3, #2]
    94e0:	e044      	b.n	956c <MiMAC_SendPacket+0x184>
        frameControl = 0x03;
    94e2:	2203      	movs	r2, #3
    94e4:	4691      	mov	r9, r2
    94e6:	e7b7      	b.n	9458 <MiMAC_SendPacket+0x70>
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    94e8:	4895      	ldr	r0, [pc, #596]	; (9740 <MiMAC_SendPacket+0x358>)
    94ea:	4282      	cmp	r2, r0
    94ec:	d007      	beq.n	94fe <MiMAC_SendPacket+0x116>
        frameControl |= 0x40;
    94ee:	2240      	movs	r2, #64	; 0x40
    94f0:	4649      	mov	r1, r9
    94f2:	4311      	orrs	r1, r2
    94f4:	4689      	mov	r9, r1
        IntraPAN = true;
    94f6:	3a3f      	subs	r2, #63	; 0x3f
    94f8:	4693      	mov	fp, r2
        headerLength = 5;
    94fa:	3204      	adds	r2, #4
        IntraPAN = true;
    94fc:	e7b5      	b.n	946a <MiMAC_SendPacket+0x82>
        IntraPAN = false;
    94fe:	2200      	movs	r2, #0
    9500:	4693      	mov	fp, r2
        headerLength = 7;
    9502:	3207      	adds	r2, #7
    9504:	e7b1      	b.n	946a <MiMAC_SendPacket+0x82>
        headerLength += 8;
    9506:	3708      	adds	r7, #8
    9508:	b2fa      	uxtb	r2, r7
    950a:	9201      	str	r2, [sp, #4]
    950c:	e7b9      	b.n	9482 <MiMAC_SendPacket+0x9a>
        frameControl |= 0x20;
    950e:	3a04      	subs	r2, #4
    9510:	4649      	mov	r1, r9
    9512:	4311      	orrs	r1, r2
    9514:	4689      	mov	r9, r1
    9516:	e7b8      	b.n	948a <MiMAC_SendPacket+0xa2>
        transParam.altSrcAddr = true;
    9518:	2501      	movs	r5, #1
        transParam.flags.bits.ackReq = false;
    951a:	2600      	movs	r6, #0
        IntraPAN = false;
    951c:	2300      	movs	r3, #0
    951e:	469b      	mov	fp, r3
        frameControl = 0x00;
    9520:	4699      	mov	r9, r3
        headerLength = 7;
    9522:	3307      	adds	r3, #7
    9524:	9301      	str	r3, [sp, #4]
    9526:	e7b2      	b.n	948e <MiMAC_SendPacket+0xa6>
        transParam.flags.bits.ackReq = false;
    9528:	2600      	movs	r6, #0
    952a:	e7bb      	b.n	94a4 <MiMAC_SendPacket+0xbc>
        frameControl |= 0x08;
    952c:	2308      	movs	r3, #8
    952e:	464a      	mov	r2, r9
    9530:	431a      	orrs	r2, r3
    9532:	4691      	mov	r9, r2
		DataEncrypt(MACPayload, &MACPayloadLen, OutgoingFrameCounter, frameControl);
    9534:	4b83      	ldr	r3, [pc, #524]	; (9744 <MiMAC_SendPacket+0x35c>)
    9536:	681a      	ldr	r2, [r3, #0]
    9538:	464b      	mov	r3, r9
    953a:	a910      	add	r1, sp, #64	; 0x40
    953c:	9800      	ldr	r0, [sp, #0]
    953e:	4f82      	ldr	r7, [pc, #520]	; (9748 <MiMAC_SendPacket+0x360>)
    9540:	47b8      	blx	r7
		packet[loc++] = MACPayloadLen+headerLength+9;
    9542:	ab10      	add	r3, sp, #64	; 0x40
    9544:	781b      	ldrb	r3, [r3, #0]
    9546:	3309      	adds	r3, #9
    9548:	9a01      	ldr	r2, [sp, #4]
    954a:	18d7      	adds	r7, r2, r3
    954c:	4b7b      	ldr	r3, [pc, #492]	; (973c <MiMAC_SendPacket+0x354>)
    954e:	701f      	strb	r7, [r3, #0]
    9550:	e7b8      	b.n	94c4 <MiMAC_SendPacket+0xdc>
		packet[loc++] = 0x80;
    9552:	4b7a      	ldr	r3, [pc, #488]	; (973c <MiMAC_SendPacket+0x354>)
    9554:	2280      	movs	r2, #128	; 0x80
    9556:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    9558:	497c      	ldr	r1, [pc, #496]	; (974c <MiMAC_SendPacket+0x364>)
    955a:	780a      	ldrb	r2, [r1, #0]
    955c:	1c50      	adds	r0, r2, #1
    955e:	7008      	strb	r0, [r1, #0]
    9560:	70da      	strb	r2, [r3, #3]
    9562:	2204      	movs	r2, #4
    9564:	e03e      	b.n	95e4 <MiMAC_SendPacket+0x1fc>

        } else if (transParam.altDestAddr && transParam.altSrcAddr == 0)
        {
			packet[loc++] = 0xC8;
    9566:	22c8      	movs	r2, #200	; 0xc8
    9568:	4b74      	ldr	r3, [pc, #464]	; (973c <MiMAC_SendPacket+0x354>)
    956a:	709a      	strb	r2, [r3, #2]
        {
			packet[loc++] = 0xCC;
        }

        // sequence number
		packet[loc++] = IEEESeqNum++;
    956c:	4b77      	ldr	r3, [pc, #476]	; (974c <MiMAC_SendPacket+0x364>)
    956e:	781a      	ldrb	r2, [r3, #0]
    9570:	1c51      	adds	r1, r2, #1
    9572:	7019      	strb	r1, [r3, #0]
    9574:	4b71      	ldr	r3, [pc, #452]	; (973c <MiMAC_SendPacket+0x354>)
    9576:	70da      	strb	r2, [r3, #3]

        // destination PANID
		packet[loc++] = transParam.DestPANID.v[0];
    9578:	aa03      	add	r2, sp, #12
    957a:	7a91      	ldrb	r1, [r2, #10]
    957c:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    957e:	7ad2      	ldrb	r2, [r2, #11]
    9580:	715a      	strb	r2, [r3, #5]

        // destination address
        if (transParam.flags.bits.broadcast)
    9582:	0763      	lsls	r3, r4, #29
    9584:	d429      	bmi.n	95da <MiMAC_SendPacket+0x1f2>
			packet[loc++] = 0xFF;
        } else
        {
            if (transParam.altDestAddr)
            {
				packet[loc++] = transParam.DestAddress[0];
    9586:	9902      	ldr	r1, [sp, #8]
    9588:	780a      	ldrb	r2, [r1, #0]
    958a:	4b6c      	ldr	r3, [pc, #432]	; (973c <MiMAC_SendPacket+0x354>)
    958c:	719a      	strb	r2, [r3, #6]
				packet[loc++] = transParam.DestAddress[1];
    958e:	784a      	ldrb	r2, [r1, #1]
    9590:	71da      	strb	r2, [r3, #7]
    9592:	2208      	movs	r2, #8
    9594:	e026      	b.n	95e4 <MiMAC_SendPacket+0x1fc>
        } else if (transParam.altDestAddr == 0 && transParam.altSrcAddr == 1)
    9596:	2d00      	cmp	r5, #0
    9598:	d00f      	beq.n	95ba <MiMAC_SendPacket+0x1d2>
			packet[loc++] = 0x8C;
    959a:	4b68      	ldr	r3, [pc, #416]	; (973c <MiMAC_SendPacket+0x354>)
    959c:	228c      	movs	r2, #140	; 0x8c
    959e:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    95a0:	496a      	ldr	r1, [pc, #424]	; (974c <MiMAC_SendPacket+0x364>)
    95a2:	780a      	ldrb	r2, [r1, #0]
    95a4:	1c50      	adds	r0, r2, #1
    95a6:	7008      	strb	r0, [r1, #0]
    95a8:	70da      	strb	r2, [r3, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    95aa:	aa03      	add	r2, sp, #12
    95ac:	7a91      	ldrb	r1, [r2, #10]
    95ae:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    95b0:	7ad2      	ldrb	r2, [r2, #11]
    95b2:	715a      	strb	r2, [r3, #5]
        if (transParam.flags.bits.broadcast)
    95b4:	0763      	lsls	r3, r4, #29
    95b6:	d410      	bmi.n	95da <MiMAC_SendPacket+0x1f2>
    95b8:	e099      	b.n	96ee <MiMAC_SendPacket+0x306>
			packet[loc++] = 0xCC;
    95ba:	4b60      	ldr	r3, [pc, #384]	; (973c <MiMAC_SendPacket+0x354>)
    95bc:	22cc      	movs	r2, #204	; 0xcc
    95be:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    95c0:	4962      	ldr	r1, [pc, #392]	; (974c <MiMAC_SendPacket+0x364>)
    95c2:	780a      	ldrb	r2, [r1, #0]
    95c4:	1c50      	adds	r0, r2, #1
    95c6:	7008      	strb	r0, [r1, #0]
    95c8:	70da      	strb	r2, [r3, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    95ca:	aa03      	add	r2, sp, #12
    95cc:	7a91      	ldrb	r1, [r2, #10]
    95ce:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    95d0:	7ad2      	ldrb	r2, [r2, #11]
    95d2:	715a      	strb	r2, [r3, #5]
        if (transParam.flags.bits.broadcast)
    95d4:	0763      	lsls	r3, r4, #29
    95d6:	d400      	bmi.n	95da <MiMAC_SendPacket+0x1f2>
    95d8:	e085      	b.n	96e6 <MiMAC_SendPacket+0x2fe>
			packet[loc++] = 0xFF;
    95da:	4b58      	ldr	r3, [pc, #352]	; (973c <MiMAC_SendPacket+0x354>)
    95dc:	22ff      	movs	r2, #255	; 0xff
    95de:	719a      	strb	r2, [r3, #6]
			packet[loc++] = 0xFF;
    95e0:	71da      	strb	r2, [r3, #7]
    95e2:	3af7      	subs	r2, #247	; 0xf7
                }
            }
        }
    }
	
	if(transParam.flags.bits.ackReq)
    95e4:	a903      	add	r1, sp, #12
    95e6:	0170      	lsls	r0, r6, #5
    95e8:	780b      	ldrb	r3, [r1, #0]
    95ea:	2420      	movs	r4, #32
    95ec:	43a3      	bics	r3, r4
    95ee:	4303      	orrs	r3, r0
    95f0:	700b      	strb	r3, [r1, #0]
    95f2:	069b      	lsls	r3, r3, #26
    95f4:	d400      	bmi.n	95f8 <MiMAC_SendPacket+0x210>
    95f6:	e085      	b.n	9704 <MiMAC_SendPacket+0x31c>
	{
	 	AckSeqNum = IEEESeqNum-1;
    95f8:	4b54      	ldr	r3, [pc, #336]	; (974c <MiMAC_SendPacket+0x364>)
    95fa:	781b      	ldrb	r3, [r3, #0]
    95fc:	3b01      	subs	r3, #1
    95fe:	4954      	ldr	r1, [pc, #336]	; (9750 <MiMAC_SendPacket+0x368>)
    9600:	700b      	strb	r3, [r1, #0]
		 AckReqData = 1;
    9602:	2101      	movs	r1, #1
    9604:	4b53      	ldr	r3, [pc, #332]	; (9754 <MiMAC_SendPacket+0x36c>)
    9606:	7019      	strb	r1, [r3, #0]
	{
		AckReqData = 0;
	}
#ifndef TARGET_SMALL
    // source PANID if necessary
    if (IntraPAN == false)
    9608:	465b      	mov	r3, fp
    960a:	2b00      	cmp	r3, #0
    960c:	d109      	bne.n	9622 <MiMAC_SendPacket+0x23a>
    {
		packet[loc++] = MAC_PANID.v[0];
    960e:	1c53      	adds	r3, r2, #1
    9610:	b2db      	uxtb	r3, r3
    9612:	494a      	ldr	r1, [pc, #296]	; (973c <MiMAC_SendPacket+0x354>)
    9614:	4848      	ldr	r0, [pc, #288]	; (9738 <MiMAC_SendPacket+0x350>)
    9616:	7804      	ldrb	r4, [r0, #0]
    9618:	548c      	strb	r4, [r1, r2]
		packet[loc++] = MAC_PANID.v[1];
    961a:	3202      	adds	r2, #2
    961c:	b2d2      	uxtb	r2, r2
    961e:	7840      	ldrb	r0, [r0, #1]
    9620:	54c8      	strb	r0, [r1, r3]
    }
#endif

    // source address
    if (transParam.altSrcAddr)
    9622:	2d00      	cmp	r5, #0
    9624:	d100      	bne.n	9628 <MiMAC_SendPacket+0x240>
    9626:	e071      	b.n	970c <MiMAC_SendPacket+0x324>
    {
		packet[loc++] = myNetworkAddress.v[0];
    9628:	4944      	ldr	r1, [pc, #272]	; (973c <MiMAC_SendPacket+0x354>)
    962a:	484b      	ldr	r0, [pc, #300]	; (9758 <MiMAC_SendPacket+0x370>)
    962c:	7803      	ldrb	r3, [r0, #0]
    962e:	548b      	strb	r3, [r1, r2]
		packet[loc++] = myNetworkAddress.v[1];
    9630:	1c93      	adds	r3, r2, #2
    9632:	b2db      	uxtb	r3, r3
		packet[loc++] = myNetworkAddress.v[0];
    9634:	3201      	adds	r2, #1
		packet[loc++] = myNetworkAddress.v[1];
    9636:	b2d2      	uxtb	r2, r2
    9638:	7840      	ldrb	r0, [r0, #1]
    963a:	5488      	strb	r0, [r1, r2]
        {
			packet[loc++] = MACInitParams.PAddress[i];
        }
    }
#ifdef ENABLE_SECURITY
if (transParam.flags.bits.secEn)
    963c:	aa03      	add	r2, sp, #12
    963e:	0171      	lsls	r1, r6, #5
    9640:	7816      	ldrb	r6, [r2, #0]
    9642:	2020      	movs	r0, #32
    9644:	4386      	bics	r6, r0
    9646:	430e      	orrs	r6, r1
    9648:	7016      	strb	r6, [r2, #0]
    964a:	0732      	lsls	r2, r6, #28
    964c:	d515      	bpl.n	967a <MiMAC_SendPacket+0x292>
    964e:	0019      	movs	r1, r3
    9650:	2200      	movs	r2, #0
{
	// fill the additional security aux header
	for (i = 0; i < 4; i++)
	{
		packet[loc++] = OutgoingFrameCounter.v[i];
    9652:	4e3a      	ldr	r6, [pc, #232]	; (973c <MiMAC_SendPacket+0x354>)
    9654:	4d3b      	ldr	r5, [pc, #236]	; (9744 <MiMAC_SendPacket+0x35c>)
    9656:	1c48      	adds	r0, r1, #1
    9658:	5cac      	ldrb	r4, [r5, r2]
    965a:	5474      	strb	r4, [r6, r1]
    965c:	3201      	adds	r2, #1
    965e:	b2c1      	uxtb	r1, r0
	for (i = 0; i < 4; i++)
    9660:	2a04      	cmp	r2, #4
    9662:	d1f8      	bne.n	9656 <MiMAC_SendPacket+0x26e>
    9664:	1d1a      	adds	r2, r3, #4
    9666:	b2d2      	uxtb	r2, r2
	}
	OutgoingFrameCounter.Val++;
    9668:	4836      	ldr	r0, [pc, #216]	; (9744 <MiMAC_SendPacket+0x35c>)
    966a:	6801      	ldr	r1, [r0, #0]
    966c:	3101      	adds	r1, #1
    966e:	6001      	str	r1, [r0, #0]
	{
		PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
	}
	#endif
	//copy myKeySequenceNumber
	packet[loc++] = myKeySequenceNumber;
    9670:	3305      	adds	r3, #5
    9672:	b2db      	uxtb	r3, r3
    9674:	2000      	movs	r0, #0
    9676:	4931      	ldr	r1, [pc, #196]	; (973c <MiMAC_SendPacket+0x354>)
    9678:	5488      	strb	r0, [r1, r2]
    {
		packet[loc++] = MACPayload[i];
    }
#else
    // write the payload
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    967a:	aa10      	add	r2, sp, #64	; 0x40
    967c:	7816      	ldrb	r6, [r2, #0]
    967e:	2e00      	cmp	r6, #0
    9680:	d053      	beq.n	972a <MiMAC_SendPacket+0x342>
    9682:	9a00      	ldr	r2, [sp, #0]
    9684:	18f1      	adds	r1, r6, r3
    9686:	b2c9      	uxtb	r1, r1
    {
	    packet[loc++] = MACPayload[i];
    9688:	4d2c      	ldr	r5, [pc, #176]	; (973c <MiMAC_SendPacket+0x354>)
    968a:	1c58      	adds	r0, r3, #1
    968c:	7814      	ldrb	r4, [r2, #0]
    968e:	54ec      	strb	r4, [r5, r3]
    9690:	3201      	adds	r2, #1
    9692:	b2c3      	uxtb	r3, r0
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    9694:	428b      	cmp	r3, r1
    9696:	d1f8      	bne.n	968a <MiMAC_SendPacket+0x2a2>
    }
	packet[loc++] = final_mic_value[0];
    9698:	4828      	ldr	r0, [pc, #160]	; (973c <MiMAC_SendPacket+0x354>)
    969a:	4b30      	ldr	r3, [pc, #192]	; (975c <MiMAC_SendPacket+0x374>)
    969c:	781a      	ldrb	r2, [r3, #0]
    969e:	5442      	strb	r2, [r0, r1]
    96a0:	1c4a      	adds	r2, r1, #1
	packet[loc++] = final_mic_value[1];
    96a2:	b2d2      	uxtb	r2, r2
    96a4:	785c      	ldrb	r4, [r3, #1]
    96a6:	5484      	strb	r4, [r0, r2]
    96a8:	1c8a      	adds	r2, r1, #2
	packet[loc++] = final_mic_value[2];
    96aa:	b2d2      	uxtb	r2, r2
    96ac:	789c      	ldrb	r4, [r3, #2]
    96ae:	5484      	strb	r4, [r0, r2]
    96b0:	3103      	adds	r1, #3
	packet[loc++] = final_mic_value[3];
    96b2:	b2c9      	uxtb	r1, r1
    96b4:	78db      	ldrb	r3, [r3, #3]
    96b6:	5443      	strb	r3, [r0, r1]
    } else
    {
        i = 0x01;
    }

    dataPointer = MACPayload;
    96b8:	4b29      	ldr	r3, [pc, #164]	; (9760 <MiMAC_SendPacket+0x378>)
    96ba:	9a00      	ldr	r2, [sp, #0]
    96bc:	601a      	str	r2, [r3, #0]
	dataConfCallback = ConfCallback;
    96be:	4b29      	ldr	r3, [pc, #164]	; (9764 <MiMAC_SendPacket+0x37c>)
    96c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
    96c2:	601a      	str	r2, [r3, #0]
    dataHandle = msghandle;
    96c4:	4b28      	ldr	r3, [pc, #160]	; (9768 <MiMAC_SendPacket+0x380>)
    96c6:	4652      	mov	r2, sl
    96c8:	701a      	strb	r2, [r3, #0]
	MACdataPayloadLen = MACPayloadLen;
    96ca:	4b28      	ldr	r3, [pc, #160]	; (976c <MiMAC_SendPacket+0x384>)
    96cc:	701e      	strb	r6, [r3, #0]
	//DataRetryCount = 0;

    // Now Trigger the Transmission of packet
    return PHY_DataReq(packet);					
    96ce:	4b28      	ldr	r3, [pc, #160]	; (9770 <MiMAC_SendPacket+0x388>)
    96d0:	4798      	blx	r3
    96d2:	1e43      	subs	r3, r0, #1
    96d4:	4198      	sbcs	r0, r3
    96d6:	b2c0      	uxtb	r0, r0
}
    96d8:	b007      	add	sp, #28
    96da:	bc3c      	pop	{r2, r3, r4, r5}
    96dc:	4690      	mov	r8, r2
    96de:	4699      	mov	r9, r3
    96e0:	46a2      	mov	sl, r4
    96e2:	46ab      	mov	fp, r5
    96e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (transParam.altDestAddr)
    96e6:	4643      	mov	r3, r8
    96e8:	2b00      	cmp	r3, #0
    96ea:	d000      	beq.n	96ee <MiMAC_SendPacket+0x306>
    96ec:	e74b      	b.n	9586 <MiMAC_SendPacket+0x19e>
        transParam.flags.bits.ackReq = false;
    96ee:	2300      	movs	r3, #0
					packet[loc++] = transParam.DestAddress[i];
    96f0:	4812      	ldr	r0, [pc, #72]	; (973c <MiMAC_SendPacket+0x354>)
    96f2:	9c02      	ldr	r4, [sp, #8]
    96f4:	5ce1      	ldrb	r1, [r4, r3]
    96f6:	181a      	adds	r2, r3, r0
    96f8:	7191      	strb	r1, [r2, #6]
    96fa:	3301      	adds	r3, #1
                for (i = 0; i < 8; i++)
    96fc:	2b08      	cmp	r3, #8
    96fe:	d1f9      	bne.n	96f4 <MiMAC_SendPacket+0x30c>
					packet[loc++] = transParam.DestAddress[i];
    9700:	220e      	movs	r2, #14
    9702:	e76f      	b.n	95e4 <MiMAC_SendPacket+0x1fc>
		AckReqData = 0;
    9704:	2100      	movs	r1, #0
    9706:	4b13      	ldr	r3, [pc, #76]	; (9754 <MiMAC_SendPacket+0x36c>)
    9708:	7019      	strb	r1, [r3, #0]
    970a:	e77d      	b.n	9608 <MiMAC_SendPacket+0x220>
			packet[loc++] = MACInitParams.PAddress[i];
    970c:	4b19      	ldr	r3, [pc, #100]	; (9774 <MiMAC_SendPacket+0x38c>)
    970e:	6859      	ldr	r1, [r3, #4]
    9710:	0014      	movs	r4, r2
    9712:	3408      	adds	r4, #8
    9714:	b2e4      	uxtb	r4, r4
    9716:	4d09      	ldr	r5, [pc, #36]	; (973c <MiMAC_SendPacket+0x354>)
    9718:	1c53      	adds	r3, r2, #1
    971a:	b2db      	uxtb	r3, r3
    971c:	7808      	ldrb	r0, [r1, #0]
    971e:	54a8      	strb	r0, [r5, r2]
    9720:	3101      	adds	r1, #1
    9722:	001a      	movs	r2, r3
        for (i = 0; i < 8; i++)
    9724:	429c      	cmp	r4, r3
    9726:	d1f7      	bne.n	9718 <MiMAC_SendPacket+0x330>
    9728:	e788      	b.n	963c <MiMAC_SendPacket+0x254>
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    972a:	0019      	movs	r1, r3
    972c:	e7b4      	b.n	9698 <MiMAC_SendPacket+0x2b0>
    972e:	46c0      	nop			; (mov r8, r8)
    9730:	20000276 	.word	0x20000276
    9734:	200020f8 	.word	0x200020f8
    9738:	2000214c 	.word	0x2000214c
    973c:	20001fd8 	.word	0x20001fd8
    9740:	0000ffff 	.word	0x0000ffff
    9744:	20002128 	.word	0x20002128
    9748:	000090b1 	.word	0x000090b1
    974c:	20001fd5 	.word	0x20001fd5
    9750:	20001fd4 	.word	0x20001fd4
    9754:	20000273 	.word	0x20000273
    9758:	200020d8 	.word	0x200020d8
    975c:	20002114 	.word	0x20002114
    9760:	20000280 	.word	0x20000280
    9764:	20000278 	.word	0x20000278
    9768:	2000027c 	.word	0x2000027c
    976c:	20000275 	.word	0x20000275
    9770:	0000a301 	.word	0x0000a301
    9774:	200020e0 	.word	0x200020e0

00009778 <MiMAC_DiscardPacket>:
 *
 *****************************************************************************************/
void MiMAC_DiscardPacket(void)
{
	//re-enable buffer for next packets
	if (BankIndex < BANK_SIZE)
    9778:	4b04      	ldr	r3, [pc, #16]	; (978c <MiMAC_DiscardPacket+0x14>)
    977a:	781b      	ldrb	r3, [r3, #0]
    977c:	2b03      	cmp	r3, #3
    977e:	d804      	bhi.n	978a <MiMAC_DiscardPacket+0x12>
	{
		RxBuffer[BankIndex].PayloadLen = 0;
    9780:	021a      	lsls	r2, r3, #8
    9782:	18d3      	adds	r3, r2, r3
    9784:	2100      	movs	r1, #0
    9786:	4a02      	ldr	r2, [pc, #8]	; (9790 <MiMAC_DiscardPacket+0x18>)
    9788:	5499      	strb	r1, [r3, r2]
	}
}
    978a:	4770      	bx	lr
    978c:	2000000f 	.word	0x2000000f
    9790:	20002258 	.word	0x20002258

00009794 <PHY_DataConf>:
 *      None
 *
 *****************************************************************************************/
void PHY_DataConf(uint8_t status)
{
	DataRetryCount = 0;
    9794:	2200      	movs	r2, #0
    9796:	4b04      	ldr	r3, [pc, #16]	; (97a8 <PHY_DataConf+0x14>)
    9798:	701a      	strb	r2, [r3, #0]
	dataStatus = (miwi_status_t)status;
    979a:	4b04      	ldr	r3, [pc, #16]	; (97ac <PHY_DataConf+0x18>)
    979c:	7018      	strb	r0, [r3, #0]
	dataConfAvailable = true;
    979e:	3201      	adds	r2, #1
    97a0:	4b03      	ldr	r3, [pc, #12]	; (97b0 <PHY_DataConf+0x1c>)
    97a2:	701a      	strb	r2, [r3, #0]
}
    97a4:	4770      	bx	lr
    97a6:	46c0      	nop			; (mov r8, r8)
    97a8:	20000274 	.word	0x20000274
    97ac:	20002124 	.word	0x20002124
    97b0:	20000276 	.word	0x20000276

000097b4 <MiMAC_RetryPacket>:
{
    97b4:	b510      	push	{r4, lr}
	DataRetryCount++;
    97b6:	4a0b      	ldr	r2, [pc, #44]	; (97e4 <MiMAC_RetryPacket+0x30>)
    97b8:	7813      	ldrb	r3, [r2, #0]
    97ba:	3301      	adds	r3, #1
    97bc:	b2db      	uxtb	r3, r3
    97be:	7013      	strb	r3, [r2, #0]
	if (DataRetryCount < DATA_RETRY_ATTEMPT)
    97c0:	2b02      	cmp	r3, #2
    97c2:	d904      	bls.n	97ce <MiMAC_RetryPacket+0x1a>
		PHY_DataConf(NO_ACK); // No Ack response
    97c4:	2003      	movs	r0, #3
    97c6:	4b08      	ldr	r3, [pc, #32]	; (97e8 <MiMAC_RetryPacket+0x34>)
    97c8:	4798      	blx	r3
	bool status = false;
    97ca:	2000      	movs	r0, #0
}
    97cc:	bd10      	pop	{r4, pc}
		AckReqData = 1;
    97ce:	2201      	movs	r2, #1
    97d0:	4b06      	ldr	r3, [pc, #24]	; (97ec <MiMAC_RetryPacket+0x38>)
    97d2:	701a      	strb	r2, [r3, #0]
		status = PHY_DataReq(packet);
    97d4:	4806      	ldr	r0, [pc, #24]	; (97f0 <MiMAC_RetryPacket+0x3c>)
    97d6:	4b07      	ldr	r3, [pc, #28]	; (97f4 <MiMAC_RetryPacket+0x40>)
    97d8:	4798      	blx	r3
    97da:	1e43      	subs	r3, r0, #1
    97dc:	4198      	sbcs	r0, r3
    97de:	b2c0      	uxtb	r0, r0
    97e0:	e7f4      	b.n	97cc <MiMAC_RetryPacket+0x18>
    97e2:	46c0      	nop			; (mov r8, r8)
    97e4:	20000274 	.word	0x20000274
    97e8:	00009795 	.word	0x00009795
    97ec:	20000273 	.word	0x20000273
    97f0:	20001fd8 	.word	0x20001fd8
    97f4:	0000a301 	.word	0x0000a301

000097f8 <MiMAC_ReceivedPacket>:
{
    97f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    97fa:	46c6      	mov	lr, r8
    97fc:	b500      	push	{lr}
    97fe:	b088      	sub	sp, #32
	BankIndex = 0xFF;
    9800:	22ff      	movs	r2, #255	; 0xff
    9802:	4bcc      	ldr	r3, [pc, #816]	; (9b34 <MiMAC_ReceivedPacket+0x33c>)
    9804:	701a      	strb	r2, [r3, #0]
		if (RxBuffer[i].PayloadLen > 0)
    9806:	4bcc      	ldr	r3, [pc, #816]	; (9b38 <MiMAC_ReceivedPacket+0x340>)
    9808:	781b      	ldrb	r3, [r3, #0]
    980a:	2b00      	cmp	r3, #0
    980c:	d000      	beq.n	9810 <MiMAC_ReceivedPacket+0x18>
    980e:	e354      	b.n	9eba <MiMAC_ReceivedPacket+0x6c2>
    9810:	2302      	movs	r3, #2
    9812:	33ff      	adds	r3, #255	; 0xff
    9814:	4ac8      	ldr	r2, [pc, #800]	; (9b38 <MiMAC_ReceivedPacket+0x340>)
    9816:	5cd3      	ldrb	r3, [r2, r3]
    9818:	2b00      	cmp	r3, #0
    981a:	d10e      	bne.n	983a <MiMAC_ReceivedPacket+0x42>
    981c:	4bc7      	ldr	r3, [pc, #796]	; (9b3c <MiMAC_ReceivedPacket+0x344>)
    981e:	5cd3      	ldrb	r3, [r2, r3]
    9820:	2b00      	cmp	r3, #0
    9822:	d140      	bne.n	98a6 <MiMAC_ReceivedPacket+0xae>
    9824:	4bc6      	ldr	r3, [pc, #792]	; (9b40 <MiMAC_ReceivedPacket+0x348>)
    9826:	5cd3      	ldrb	r3, [r2, r3]
	return false;
    9828:	2400      	movs	r4, #0
	for (i = 0; i < BANK_SIZE; i++)
    982a:	2203      	movs	r2, #3
		if (RxBuffer[i].PayloadLen > 0)
    982c:	2b00      	cmp	r3, #0
    982e:	d105      	bne.n	983c <MiMAC_ReceivedPacket+0x44>
}
    9830:	0020      	movs	r0, r4
    9832:	b008      	add	sp, #32
    9834:	bc04      	pop	{r2}
    9836:	4690      	mov	r8, r2
    9838:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < BANK_SIZE; i++)
    983a:	2201      	movs	r2, #1
			BankIndex = i;
    983c:	4bbd      	ldr	r3, [pc, #756]	; (9b34 <MiMAC_ReceivedPacket+0x33c>)
    983e:	701a      	strb	r2, [r3, #0]
	return false;
    9840:	2400      	movs	r4, #0
	if (BankIndex < BANK_SIZE)
    9842:	2a03      	cmp	r2, #3
    9844:	d8f4      	bhi.n	9830 <MiMAC_ReceivedPacket+0x38>
		if ((RxBuffer[BankIndex].Payload[0] & 0x40) == 0)
    9846:	0010      	movs	r0, r2
    9848:	0211      	lsls	r1, r2, #8
    984a:	1889      	adds	r1, r1, r2
    984c:	4bba      	ldr	r3, [pc, #744]	; (9b38 <MiMAC_ReceivedPacket+0x340>)
    984e:	185b      	adds	r3, r3, r1
    9850:	789d      	ldrb	r5, [r3, #2]
    9852:	2440      	movs	r4, #64	; 0x40
    9854:	4025      	ands	r5, r4
		MACRxPacket.flags.Val = 0;
    9856:	49bb      	ldr	r1, [pc, #748]	; (9b44 <MiMAC_ReceivedPacket+0x34c>)
    9858:	2400      	movs	r4, #0
    985a:	700c      	strb	r4, [r1, #0]
		MACRxPacket.altSourceAddress = false;
    985c:	73cc      	strb	r4, [r1, #15]
		addrMode = RxBuffer[BankIndex].Payload[1] & 0xCC;
    985e:	78db      	ldrb	r3, [r3, #3]
    9860:	2133      	movs	r1, #51	; 0x33
    9862:	438b      	bics	r3, r1
		switch (addrMode)
    9864:	b2d9      	uxtb	r1, r3
    9866:	2988      	cmp	r1, #136	; 0x88
    9868:	d100      	bne.n	986c <MiMAC_ReceivedPacket+0x74>
    986a:	e12f      	b.n	9acc <MiMAC_ReceivedPacket+0x2d4>
    986c:	d91d      	bls.n	98aa <MiMAC_ReceivedPacket+0xb2>
    986e:	b2d9      	uxtb	r1, r3
    9870:	29c8      	cmp	r1, #200	; 0xc8
    9872:	d06f      	beq.n	9954 <MiMAC_ReceivedPacket+0x15c>
    9874:	29cc      	cmp	r1, #204	; 0xcc
    9876:	d100      	bne.n	987a <MiMAC_ReceivedPacket+0x82>
    9878:	e0b9      	b.n	99ee <MiMAC_ReceivedPacket+0x1f6>
    987a:	298c      	cmp	r1, #140	; 0x8c
    987c:	d100      	bne.n	9880 <MiMAC_ReceivedPacket+0x88>
    987e:	e1aa      	b.n	9bd6 <MiMAC_ReceivedPacket+0x3de>
			MiMAC_DiscardPacket();
    9880:	4bb1      	ldr	r3, [pc, #708]	; (9b48 <MiMAC_ReceivedPacket+0x350>)
    9882:	4798      	blx	r3
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9884:	4bab      	ldr	r3, [pc, #684]	; (9b34 <MiMAC_ReceivedPacket+0x33c>)
    9886:	781a      	ldrb	r2, [r3, #0]
    9888:	0213      	lsls	r3, r2, #8
    988a:	189a      	adds	r2, r3, r2
    988c:	4baa      	ldr	r3, [pc, #680]	; (9b38 <MiMAC_ReceivedPacket+0x340>)
    988e:	189b      	adds	r3, r3, r2
    9890:	789b      	ldrb	r3, [r3, #2]
			return false;
    9892:	2400      	movs	r4, #0
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9894:	069b      	lsls	r3, r3, #26
    9896:	d5cb      	bpl.n	9830 <MiMAC_ReceivedPacket+0x38>
				MiRadioReceiveParam.action = RECEIVE_START;					
    9898:	a807      	add	r0, sp, #28
    989a:	2300      	movs	r3, #0
    989c:	7003      	strb	r3, [r0, #0]
				MiRadioReceiveParam.rxWindowSize = 0;
    989e:	8043      	strh	r3, [r0, #2]
				RADIO_Receive(&MiRadioReceiveParam);
    98a0:	4baa      	ldr	r3, [pc, #680]	; (9b4c <MiMAC_ReceivedPacket+0x354>)
    98a2:	4798      	blx	r3
    98a4:	e7c4      	b.n	9830 <MiMAC_ReceivedPacket+0x38>
	for (i = 0; i < BANK_SIZE; i++)
    98a6:	2202      	movs	r2, #2
    98a8:	e7c8      	b.n	983c <MiMAC_ReceivedPacket+0x44>
		switch (addrMode)
    98aa:	2b08      	cmp	r3, #8
    98ac:	d100      	bne.n	98b0 <MiMAC_ReceivedPacket+0xb8>
    98ae:	e1e1      	b.n	9c74 <MiMAC_ReceivedPacket+0x47c>
    98b0:	2980      	cmp	r1, #128	; 0x80
    98b2:	d1e5      	bne.n	9880 <MiMAC_ReceivedPacket+0x88>
				MACRxPacket.flags.bits.broadcast = 1;
    98b4:	4ba3      	ldr	r3, [pc, #652]	; (9b44 <MiMAC_ReceivedPacket+0x34c>)
    98b6:	7819      	ldrb	r1, [r3, #0]
    98b8:	2404      	movs	r4, #4
    98ba:	4321      	orrs	r1, r4
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    98bc:	2480      	movs	r4, #128	; 0x80
    98be:	4264      	negs	r4, r4
    98c0:	4321      	orrs	r1, r4
    98c2:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    98c4:	2101      	movs	r1, #1
    98c6:	73d9      	strb	r1, [r3, #15]
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    98c8:	4c9b      	ldr	r4, [pc, #620]	; (9b38 <MiMAC_ReceivedPacket+0x340>)
    98ca:	0211      	lsls	r1, r2, #8
    98cc:	1888      	adds	r0, r1, r2
    98ce:	1821      	adds	r1, r4, r0
    98d0:	794d      	ldrb	r5, [r1, #5]
    98d2:	741d      	strb	r5, [r3, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    98d4:	7989      	ldrb	r1, [r1, #6]
    98d6:	7459      	strb	r1, [r3, #17]
    98d8:	0211      	lsls	r1, r2, #8
    98da:	188a      	adds	r2, r1, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[5]);
    98dc:	1dd1      	adds	r1, r2, #7
    98de:	1909      	adds	r1, r1, r4
    98e0:	6059      	str	r1, [r3, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 11;
    98e2:	5d01      	ldrb	r1, [r0, r4]
    98e4:	390b      	subs	r1, #11
    98e6:	7319      	strb	r1, [r3, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    98e8:	3209      	adds	r2, #9
    98ea:	1912      	adds	r2, r2, r4
    98ec:	609a      	str	r2, [r3, #8]
		if (RxBuffer[BankIndex].Payload[0] & 0x08)
    98ee:	4b91      	ldr	r3, [pc, #580]	; (9b34 <MiMAC_ReceivedPacket+0x33c>)
    98f0:	781a      	ldrb	r2, [r3, #0]
    98f2:	0213      	lsls	r3, r2, #8
    98f4:	189a      	adds	r2, r3, r2
    98f6:	4b90      	ldr	r3, [pc, #576]	; (9b38 <MiMAC_ReceivedPacket+0x340>)
    98f8:	189b      	adds	r3, r3, r2
    98fa:	789b      	ldrb	r3, [r3, #2]
    98fc:	071b      	lsls	r3, r3, #28
    98fe:	d500      	bpl.n	9902 <MiMAC_ReceivedPacket+0x10a>
    9900:	e1d9      	b.n	9cb6 <MiMAC_ReceivedPacket+0x4be>
		switch (RxBuffer[BankIndex].Payload[0] & 0x07) // check frame type
    9902:	4b8c      	ldr	r3, [pc, #560]	; (9b34 <MiMAC_ReceivedPacket+0x33c>)
    9904:	7818      	ldrb	r0, [r3, #0]
    9906:	0202      	lsls	r2, r0, #8
    9908:	1812      	adds	r2, r2, r0
    990a:	4b8b      	ldr	r3, [pc, #556]	; (9b38 <MiMAC_ReceivedPacket+0x340>)
    990c:	189b      	adds	r3, r3, r2
    990e:	7899      	ldrb	r1, [r3, #2]
    9910:	2307      	movs	r3, #7
    9912:	400b      	ands	r3, r1
    9914:	2b01      	cmp	r3, #1
    9916:	d100      	bne.n	991a <MiMAC_ReceivedPacket+0x122>
    9918:	e24e      	b.n	9db8 <MiMAC_ReceivedPacket+0x5c0>
    991a:	2b00      	cmp	r3, #0
    991c:	d100      	bne.n	9920 <MiMAC_ReceivedPacket+0x128>
    991e:	e283      	b.n	9e28 <MiMAC_ReceivedPacket+0x630>
    9920:	2b02      	cmp	r3, #2
    9922:	d100      	bne.n	9926 <MiMAC_ReceivedPacket+0x12e>
    9924:	e286      	b.n	9e34 <MiMAC_ReceivedPacket+0x63c>
    9926:	2b03      	cmp	r3, #3
    9928:	d100      	bne.n	992c <MiMAC_ReceivedPacket+0x134>
    992a:	e275      	b.n	9e18 <MiMAC_ReceivedPacket+0x620>
			MiMAC_DiscardPacket();
    992c:	4b86      	ldr	r3, [pc, #536]	; (9b48 <MiMAC_ReceivedPacket+0x350>)
    992e:	4798      	blx	r3
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9930:	4b80      	ldr	r3, [pc, #512]	; (9b34 <MiMAC_ReceivedPacket+0x33c>)
    9932:	781a      	ldrb	r2, [r3, #0]
    9934:	0213      	lsls	r3, r2, #8
    9936:	189a      	adds	r2, r3, r2
    9938:	4b7f      	ldr	r3, [pc, #508]	; (9b38 <MiMAC_ReceivedPacket+0x340>)
    993a:	189b      	adds	r3, r3, r2
    993c:	789b      	ldrb	r3, [r3, #2]
			return false;
    993e:	2400      	movs	r4, #0
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9940:	069b      	lsls	r3, r3, #26
    9942:	d400      	bmi.n	9946 <MiMAC_ReceivedPacket+0x14e>
    9944:	e774      	b.n	9830 <MiMAC_ReceivedPacket+0x38>
				MiRadioReceiveParam.action = RECEIVE_START;	
    9946:	a807      	add	r0, sp, #28
    9948:	2300      	movs	r3, #0
    994a:	7003      	strb	r3, [r0, #0]
				MiRadioReceiveParam.rxWindowSize = 0;
    994c:	8043      	strh	r3, [r0, #2]
				RADIO_Receive(&MiRadioReceiveParam);
    994e:	4b7f      	ldr	r3, [pc, #508]	; (9b4c <MiMAC_ReceivedPacket+0x354>)
    9950:	4798      	blx	r3
    9952:	e76d      	b.n	9830 <MiMAC_ReceivedPacket+0x38>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    9954:	0211      	lsls	r1, r2, #8
    9956:	1889      	adds	r1, r1, r2
    9958:	4b77      	ldr	r3, [pc, #476]	; (9b38 <MiMAC_ReceivedPacket+0x340>)
    995a:	185b      	adds	r3, r3, r1
    995c:	79dc      	ldrb	r4, [r3, #7]
    995e:	2cff      	cmp	r4, #255	; 0xff
    9960:	d01e      	beq.n	99a0 <MiMAC_ReceivedPacket+0x1a8>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    9962:	4978      	ldr	r1, [pc, #480]	; (9b44 <MiMAC_ReceivedPacket+0x34c>)
    9964:	780e      	ldrb	r6, [r1, #0]
    9966:	2380      	movs	r3, #128	; 0x80
    9968:	425b      	negs	r3, r3
    996a:	4333      	orrs	r3, r6
    996c:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    996e:	2d00      	cmp	r5, #0
    9970:	d000      	beq.n	9974 <MiMAC_ReceivedPacket+0x17c>
    9972:	e27d      	b.n	9e70 <MiMAC_ReceivedPacket+0x678>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    9974:	4973      	ldr	r1, [pc, #460]	; (9b44 <MiMAC_ReceivedPacket+0x34c>)
    9976:	4c70      	ldr	r4, [pc, #448]	; (9b38 <MiMAC_ReceivedPacket+0x340>)
    9978:	0203      	lsls	r3, r0, #8
    997a:	1818      	adds	r0, r3, r0
    997c:	1823      	adds	r3, r4, r0
    997e:	7a5d      	ldrb	r5, [r3, #9]
    9980:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    9982:	7a9b      	ldrb	r3, [r3, #10]
    9984:	744b      	strb	r3, [r1, #17]
    9986:	0213      	lsls	r3, r2, #8
    9988:	189a      	adds	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    998a:	0013      	movs	r3, r2
    998c:	330b      	adds	r3, #11
    998e:	191b      	adds	r3, r3, r4
    9990:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    9992:	5d03      	ldrb	r3, [r0, r4]
    9994:	3b15      	subs	r3, #21
    9996:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    9998:	3213      	adds	r2, #19
    999a:	1912      	adds	r2, r2, r4
    999c:	608a      	str	r2, [r1, #8]
    999e:	e043      	b.n	9a28 <MiMAC_ReceivedPacket+0x230>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    99a0:	0211      	lsls	r1, r2, #8
    99a2:	1889      	adds	r1, r1, r2
    99a4:	4b64      	ldr	r3, [pc, #400]	; (9b38 <MiMAC_ReceivedPacket+0x340>)
    99a6:	185b      	adds	r3, r3, r1
    99a8:	7a1b      	ldrb	r3, [r3, #8]
    99aa:	2bff      	cmp	r3, #255	; 0xff
    99ac:	d1d9      	bne.n	9962 <MiMAC_ReceivedPacket+0x16a>
				MACRxPacket.flags.bits.broadcast = 1;
    99ae:	4965      	ldr	r1, [pc, #404]	; (9b44 <MiMAC_ReceivedPacket+0x34c>)
    99b0:	780b      	ldrb	r3, [r1, #0]
    99b2:	2404      	movs	r4, #4
    99b4:	4323      	orrs	r3, r4
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    99b6:	2480      	movs	r4, #128	; 0x80
    99b8:	4264      	negs	r4, r4
    99ba:	4323      	orrs	r3, r4
    99bc:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    99be:	2d00      	cmp	r5, #0
    99c0:	d000      	beq.n	99c4 <MiMAC_ReceivedPacket+0x1cc>
    99c2:	e264      	b.n	9e8e <MiMAC_ReceivedPacket+0x696>
    99c4:	e7d6      	b.n	9974 <MiMAC_ReceivedPacket+0x17c>
					MiMAC_DiscardPacket();
    99c6:	4b60      	ldr	r3, [pc, #384]	; (9b48 <MiMAC_ReceivedPacket+0x350>)
    99c8:	4798      	blx	r3
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    99ca:	4b5a      	ldr	r3, [pc, #360]	; (9b34 <MiMAC_ReceivedPacket+0x33c>)
    99cc:	781a      	ldrb	r2, [r3, #0]
    99ce:	0213      	lsls	r3, r2, #8
    99d0:	189a      	adds	r2, r3, r2
    99d2:	4b59      	ldr	r3, [pc, #356]	; (9b38 <MiMAC_ReceivedPacket+0x340>)
    99d4:	189b      	adds	r3, r3, r2
    99d6:	789b      	ldrb	r3, [r3, #2]
					return false;
    99d8:	2400      	movs	r4, #0
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    99da:	069b      	lsls	r3, r3, #26
    99dc:	d400      	bmi.n	99e0 <MiMAC_ReceivedPacket+0x1e8>
    99de:	e727      	b.n	9830 <MiMAC_ReceivedPacket+0x38>
						MiRadioReceiveParam.action = RECEIVE_START;					
    99e0:	a807      	add	r0, sp, #28
    99e2:	2300      	movs	r3, #0
    99e4:	7003      	strb	r3, [r0, #0]
						MiRadioReceiveParam.rxWindowSize = 0;
    99e6:	8043      	strh	r3, [r0, #2]
						RADIO_Receive(&MiRadioReceiveParam);
    99e8:	4b58      	ldr	r3, [pc, #352]	; (9b4c <MiMAC_ReceivedPacket+0x354>)
    99ea:	4798      	blx	r3
    99ec:	e720      	b.n	9830 <MiMAC_ReceivedPacket+0x38>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    99ee:	4955      	ldr	r1, [pc, #340]	; (9b44 <MiMAC_ReceivedPacket+0x34c>)
    99f0:	780c      	ldrb	r4, [r1, #0]
    99f2:	2380      	movs	r3, #128	; 0x80
    99f4:	425b      	negs	r3, r3
    99f6:	4323      	orrs	r3, r4
    99f8:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    99fa:	2d00      	cmp	r5, #0
    99fc:	d133      	bne.n	9a66 <MiMAC_ReceivedPacket+0x26e>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[13];
    99fe:	4951      	ldr	r1, [pc, #324]	; (9b44 <MiMAC_ReceivedPacket+0x34c>)
    9a00:	4c4d      	ldr	r4, [pc, #308]	; (9b38 <MiMAC_ReceivedPacket+0x340>)
    9a02:	0213      	lsls	r3, r2, #8
    9a04:	1898      	adds	r0, r3, r2
    9a06:	1823      	adds	r3, r4, r0
    9a08:	7bdd      	ldrb	r5, [r3, #15]
    9a0a:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[14];
    9a0c:	7c1b      	ldrb	r3, [r3, #16]
    9a0e:	744b      	strb	r3, [r1, #17]
    9a10:	0213      	lsls	r3, r2, #8
    9a12:	189a      	adds	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[15]);
    9a14:	0013      	movs	r3, r2
    9a16:	3311      	adds	r3, #17
    9a18:	191b      	adds	r3, r3, r4
    9a1a:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 27;
    9a1c:	5d03      	ldrb	r3, [r0, r4]
    9a1e:	3b1b      	subs	r3, #27
    9a20:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[23]);
    9a22:	3219      	adds	r2, #25
    9a24:	1912      	adds	r2, r2, r4
    9a26:	608a      	str	r2, [r1, #8]
		if (RxBuffer[BankIndex].Payload[0] & 0x08)
    9a28:	4b42      	ldr	r3, [pc, #264]	; (9b34 <MiMAC_ReceivedPacket+0x33c>)
    9a2a:	781a      	ldrb	r2, [r3, #0]
    9a2c:	0213      	lsls	r3, r2, #8
    9a2e:	189a      	adds	r2, r3, r2
    9a30:	4b41      	ldr	r3, [pc, #260]	; (9b38 <MiMAC_ReceivedPacket+0x340>)
    9a32:	189b      	adds	r3, r3, r2
    9a34:	789b      	ldrb	r3, [r3, #2]
    9a36:	071b      	lsls	r3, r3, #28
    9a38:	d400      	bmi.n	9a3c <MiMAC_ReceivedPacket+0x244>
    9a3a:	e762      	b.n	9902 <MiMAC_ReceivedPacket+0x10a>
			FrameCounter.v[0] = MACRxPacket.Payload[0];
    9a3c:	4b41      	ldr	r3, [pc, #260]	; (9b44 <MiMAC_ReceivedPacket+0x34c>)
    9a3e:	689b      	ldr	r3, [r3, #8]
			FrameCounter.v[1] = MACRxPacket.Payload[1];
    9a40:	785f      	ldrb	r7, [r3, #1]
    9a42:	023f      	lsls	r7, r7, #8
    9a44:	781a      	ldrb	r2, [r3, #0]
    9a46:	4317      	orrs	r7, r2
			FrameCounter.v[2] = MACRxPacket.Payload[2];
    9a48:	789a      	ldrb	r2, [r3, #2]
    9a4a:	0412      	lsls	r2, r2, #16
    9a4c:	4940      	ldr	r1, [pc, #256]	; (9b50 <MiMAC_ReceivedPacket+0x358>)
    9a4e:	400f      	ands	r7, r1
    9a50:	4317      	orrs	r7, r2
			FrameCounter.v[3] = MACRxPacket.Payload[3];
    9a52:	78db      	ldrb	r3, [r3, #3]
    9a54:	061b      	lsls	r3, r3, #24
    9a56:	023f      	lsls	r7, r7, #8
    9a58:	0a3f      	lsrs	r7, r7, #8
    9a5a:	431f      	orrs	r7, r3
    9a5c:	4d3d      	ldr	r5, [pc, #244]	; (9b54 <MiMAC_ReceivedPacket+0x35c>)
    9a5e:	2600      	movs	r6, #0
			for (i = 0; i < CONNECTION_SIZE; i++)
    9a60:	2400      	movs	r4, #0
				if ((ConnectionTable[i].status.bits.isValid) &&
    9a62:	46a8      	mov	r8, r5
    9a64:	e141      	b.n	9cea <MiMAC_ReceivedPacket+0x4f2>
				if(!(isSameAddress((uint8_t *)&DevIEEEaddr, &RxBuffer[BankIndex].Payload[5])))
    9a66:	0211      	lsls	r1, r2, #8
    9a68:	1889      	adds	r1, r1, r2
    9a6a:	3107      	adds	r1, #7
    9a6c:	4a32      	ldr	r2, [pc, #200]	; (9b38 <MiMAC_ReceivedPacket+0x340>)
    9a6e:	1889      	adds	r1, r1, r2
    9a70:	4839      	ldr	r0, [pc, #228]	; (9b58 <MiMAC_ReceivedPacket+0x360>)
    9a72:	4b3a      	ldr	r3, [pc, #232]	; (9b5c <MiMAC_ReceivedPacket+0x364>)
    9a74:	4798      	blx	r3
    9a76:	1e04      	subs	r4, r0, #0
    9a78:	d015      	beq.n	9aa6 <MiMAC_ReceivedPacket+0x2ae>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    9a7a:	4b2e      	ldr	r3, [pc, #184]	; (9b34 <MiMAC_ReceivedPacket+0x33c>)
    9a7c:	7818      	ldrb	r0, [r3, #0]
    9a7e:	4a31      	ldr	r2, [pc, #196]	; (9b44 <MiMAC_ReceivedPacket+0x34c>)
    9a80:	492d      	ldr	r1, [pc, #180]	; (9b38 <MiMAC_ReceivedPacket+0x340>)
    9a82:	0203      	lsls	r3, r0, #8
    9a84:	181b      	adds	r3, r3, r0
    9a86:	18c8      	adds	r0, r1, r3
    9a88:	7944      	ldrb	r4, [r0, #5]
    9a8a:	7414      	strb	r4, [r2, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    9a8c:	7980      	ldrb	r0, [r0, #6]
    9a8e:	7450      	strb	r0, [r2, #17]
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
    9a90:	0018      	movs	r0, r3
    9a92:	300f      	adds	r0, #15
    9a94:	1840      	adds	r0, r0, r1
    9a96:	6050      	str	r0, [r2, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 25;
    9a98:	5c58      	ldrb	r0, [r3, r1]
    9a9a:	3819      	subs	r0, #25
    9a9c:	7310      	strb	r0, [r2, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[21]);
    9a9e:	3317      	adds	r3, #23
    9aa0:	185b      	adds	r3, r3, r1
    9aa2:	6093      	str	r3, [r2, #8]
    9aa4:	e7c0      	b.n	9a28 <MiMAC_ReceivedPacket+0x230>
					MiMAC_DiscardPacket();
    9aa6:	4b28      	ldr	r3, [pc, #160]	; (9b48 <MiMAC_ReceivedPacket+0x350>)
    9aa8:	4798      	blx	r3
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9aaa:	4b22      	ldr	r3, [pc, #136]	; (9b34 <MiMAC_ReceivedPacket+0x33c>)
    9aac:	781a      	ldrb	r2, [r3, #0]
    9aae:	0213      	lsls	r3, r2, #8
    9ab0:	189a      	adds	r2, r3, r2
    9ab2:	4b21      	ldr	r3, [pc, #132]	; (9b38 <MiMAC_ReceivedPacket+0x340>)
    9ab4:	189b      	adds	r3, r3, r2
    9ab6:	789b      	ldrb	r3, [r3, #2]
    9ab8:	069b      	lsls	r3, r3, #26
    9aba:	d400      	bmi.n	9abe <MiMAC_ReceivedPacket+0x2c6>
    9abc:	e6b8      	b.n	9830 <MiMAC_ReceivedPacket+0x38>
						MiRadioReceiveParam.action = RECEIVE_START;					
    9abe:	a807      	add	r0, sp, #28
    9ac0:	2300      	movs	r3, #0
    9ac2:	7003      	strb	r3, [r0, #0]
						MiRadioReceiveParam.rxWindowSize = 0;
    9ac4:	8043      	strh	r3, [r0, #2]
						RADIO_Receive(&MiRadioReceiveParam);
    9ac6:	4b21      	ldr	r3, [pc, #132]	; (9b4c <MiMAC_ReceivedPacket+0x354>)
    9ac8:	4798      	blx	r3
    9aca:	e6b1      	b.n	9830 <MiMAC_ReceivedPacket+0x38>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    9acc:	0211      	lsls	r1, r2, #8
    9ace:	1889      	adds	r1, r1, r2
    9ad0:	4b19      	ldr	r3, [pc, #100]	; (9b38 <MiMAC_ReceivedPacket+0x340>)
    9ad2:	185b      	adds	r3, r3, r1
    9ad4:	79dc      	ldrb	r4, [r3, #7]
    9ad6:	2cff      	cmp	r4, #255	; 0xff
    9ad8:	d01f      	beq.n	9b1a <MiMAC_ReceivedPacket+0x322>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    9ada:	4b1a      	ldr	r3, [pc, #104]	; (9b44 <MiMAC_ReceivedPacket+0x34c>)
    9adc:	781e      	ldrb	r6, [r3, #0]
    9ade:	2180      	movs	r1, #128	; 0x80
    9ae0:	4249      	negs	r1, r1
    9ae2:	4331      	orrs	r1, r6
    9ae4:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    9ae6:	2101      	movs	r1, #1
    9ae8:	73d9      	strb	r1, [r3, #15]
				if (bIntraPAN == false)
    9aea:	2d00      	cmp	r5, #0
    9aec:	d138      	bne.n	9b60 <MiMAC_ReceivedPacket+0x368>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    9aee:	0019      	movs	r1, r3
    9af0:	4c11      	ldr	r4, [pc, #68]	; (9b38 <MiMAC_ReceivedPacket+0x340>)
    9af2:	0203      	lsls	r3, r0, #8
    9af4:	1818      	adds	r0, r3, r0
    9af6:	1823      	adds	r3, r4, r0
    9af8:	7a5d      	ldrb	r5, [r3, #9]
    9afa:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    9afc:	7a9b      	ldrb	r3, [r3, #10]
    9afe:	744b      	strb	r3, [r1, #17]
    9b00:	0213      	lsls	r3, r2, #8
    9b02:	189a      	adds	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    9b04:	0013      	movs	r3, r2
    9b06:	330b      	adds	r3, #11
    9b08:	191b      	adds	r3, r3, r4
    9b0a:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 15;
    9b0c:	5d03      	ldrb	r3, [r0, r4]
    9b0e:	3b0f      	subs	r3, #15
    9b10:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[11]);
    9b12:	320d      	adds	r2, #13
    9b14:	1912      	adds	r2, r2, r4
    9b16:	608a      	str	r2, [r1, #8]
    9b18:	e6e9      	b.n	98ee <MiMAC_ReceivedPacket+0xf6>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    9b1a:	0211      	lsls	r1, r2, #8
    9b1c:	1889      	adds	r1, r1, r2
    9b1e:	4b06      	ldr	r3, [pc, #24]	; (9b38 <MiMAC_ReceivedPacket+0x340>)
    9b20:	185b      	adds	r3, r3, r1
    9b22:	7a1b      	ldrb	r3, [r3, #8]
    9b24:	2bff      	cmp	r3, #255	; 0xff
    9b26:	d1d8      	bne.n	9ada <MiMAC_ReceivedPacket+0x2e2>
					MACRxPacket.flags.bits.broadcast = 1;
    9b28:	4906      	ldr	r1, [pc, #24]	; (9b44 <MiMAC_ReceivedPacket+0x34c>)
    9b2a:	780b      	ldrb	r3, [r1, #0]
    9b2c:	2604      	movs	r6, #4
    9b2e:	4333      	orrs	r3, r6
    9b30:	700b      	strb	r3, [r1, #0]
    9b32:	e7d2      	b.n	9ada <MiMAC_ReceivedPacket+0x2e2>
    9b34:	2000000f 	.word	0x2000000f
    9b38:	20002258 	.word	0x20002258
    9b3c:	00000202 	.word	0x00000202
    9b40:	00000303 	.word	0x00000303
    9b44:	200026a0 	.word	0x200026a0
    9b48:	00009779 	.word	0x00009779
    9b4c:	0000eeb9 	.word	0x0000eeb9
    9b50:	ff00ffff 	.word	0xff00ffff
    9b54:	20002668 	.word	0x20002668
    9b58:	20002250 	.word	0x20002250
    9b5c:	0000a5ed 	.word	0x0000a5ed
					if (!(((RxBuffer[BankIndex].Payload[5] == 0xFF) & (RxBuffer[BankIndex].Payload[6] == 0xFF)) ||((RxBuffer[BankIndex].Payload[5] == DevShortAddress[0]) & (RxBuffer[BankIndex].Payload[6] == DevShortAddress[1]))) )
    9b60:	0201      	lsls	r1, r0, #8
    9b62:	1809      	adds	r1, r1, r0
    9b64:	4bd7      	ldr	r3, [pc, #860]	; (9ec4 <MiMAC_ReceivedPacket+0x6cc>)
    9b66:	185b      	adds	r3, r3, r1
    9b68:	7a1b      	ldrb	r3, [r3, #8]
    9b6a:	2cff      	cmp	r4, #255	; 0xff
    9b6c:	d117      	bne.n	9b9e <MiMAC_ReceivedPacket+0x3a6>
    9b6e:	2bff      	cmp	r3, #255	; 0xff
    9b70:	d115      	bne.n	9b9e <MiMAC_ReceivedPacket+0x3a6>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    9b72:	49d5      	ldr	r1, [pc, #852]	; (9ec8 <MiMAC_ReceivedPacket+0x6d0>)
    9b74:	4cd3      	ldr	r4, [pc, #844]	; (9ec4 <MiMAC_ReceivedPacket+0x6cc>)
    9b76:	0203      	lsls	r3, r0, #8
    9b78:	1818      	adds	r0, r3, r0
    9b7a:	1823      	adds	r3, r4, r0
    9b7c:	795d      	ldrb	r5, [r3, #5]
    9b7e:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    9b80:	799b      	ldrb	r3, [r3, #6]
    9b82:	744b      	strb	r3, [r1, #17]
    9b84:	0213      	lsls	r3, r2, #8
    9b86:	189a      	adds	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    9b88:	0013      	movs	r3, r2
    9b8a:	3309      	adds	r3, #9
    9b8c:	191b      	adds	r3, r3, r4
    9b8e:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 13;
    9b90:	5d03      	ldrb	r3, [r0, r4]
    9b92:	3b0d      	subs	r3, #13
    9b94:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[9]);
    9b96:	320b      	adds	r2, #11
    9b98:	1912      	adds	r2, r2, r4
    9b9a:	608a      	str	r2, [r1, #8]
    9b9c:	e6a7      	b.n	98ee <MiMAC_ReceivedPacket+0xf6>
					if (!(((RxBuffer[BankIndex].Payload[5] == 0xFF) & (RxBuffer[BankIndex].Payload[6] == 0xFF)) ||((RxBuffer[BankIndex].Payload[5] == DevShortAddress[0]) & (RxBuffer[BankIndex].Payload[6] == DevShortAddress[1]))) )
    9b9e:	49cb      	ldr	r1, [pc, #812]	; (9ecc <MiMAC_ReceivedPacket+0x6d4>)
    9ba0:	7809      	ldrb	r1, [r1, #0]
    9ba2:	42a1      	cmp	r1, r4
    9ba4:	d103      	bne.n	9bae <MiMAC_ReceivedPacket+0x3b6>
    9ba6:	49c9      	ldr	r1, [pc, #804]	; (9ecc <MiMAC_ReceivedPacket+0x6d4>)
    9ba8:	7849      	ldrb	r1, [r1, #1]
    9baa:	4299      	cmp	r1, r3
    9bac:	d0e1      	beq.n	9b72 <MiMAC_ReceivedPacket+0x37a>
						MiMAC_DiscardPacket();
    9bae:	4bc8      	ldr	r3, [pc, #800]	; (9ed0 <MiMAC_ReceivedPacket+0x6d8>)
    9bb0:	4798      	blx	r3
						if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9bb2:	4bc8      	ldr	r3, [pc, #800]	; (9ed4 <MiMAC_ReceivedPacket+0x6dc>)
    9bb4:	781a      	ldrb	r2, [r3, #0]
    9bb6:	0213      	lsls	r3, r2, #8
    9bb8:	189a      	adds	r2, r3, r2
    9bba:	4bc2      	ldr	r3, [pc, #776]	; (9ec4 <MiMAC_ReceivedPacket+0x6cc>)
    9bbc:	189b      	adds	r3, r3, r2
    9bbe:	789b      	ldrb	r3, [r3, #2]
						return false;
    9bc0:	2400      	movs	r4, #0
						if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9bc2:	069b      	lsls	r3, r3, #26
    9bc4:	d400      	bmi.n	9bc8 <MiMAC_ReceivedPacket+0x3d0>
    9bc6:	e633      	b.n	9830 <MiMAC_ReceivedPacket+0x38>
							MiRadioReceiveParam.action = RECEIVE_START;	
    9bc8:	a807      	add	r0, sp, #28
    9bca:	2300      	movs	r3, #0
    9bcc:	7003      	strb	r3, [r0, #0]
							MiRadioReceiveParam.rxWindowSize = 0;
    9bce:	8043      	strh	r3, [r0, #2]
							RADIO_Receive(&MiRadioReceiveParam);
    9bd0:	4bc1      	ldr	r3, [pc, #772]	; (9ed8 <MiMAC_ReceivedPacket+0x6e0>)
    9bd2:	4798      	blx	r3
    9bd4:	e62c      	b.n	9830 <MiMAC_ReceivedPacket+0x38>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    9bd6:	4bbc      	ldr	r3, [pc, #752]	; (9ec8 <MiMAC_ReceivedPacket+0x6d0>)
    9bd8:	781c      	ldrb	r4, [r3, #0]
    9bda:	2180      	movs	r1, #128	; 0x80
    9bdc:	4249      	negs	r1, r1
    9bde:	4321      	orrs	r1, r4
    9be0:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    9be2:	2101      	movs	r1, #1
    9be4:	73d9      	strb	r1, [r3, #15]
				if (bIntraPAN) // check if it is intraPAN
    9be6:	2d00      	cmp	r5, #0
    9be8:	d115      	bne.n	9c16 <MiMAC_ReceivedPacket+0x41e>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[12];
    9bea:	49b7      	ldr	r1, [pc, #732]	; (9ec8 <MiMAC_ReceivedPacket+0x6d0>)
    9bec:	4cb5      	ldr	r4, [pc, #724]	; (9ec4 <MiMAC_ReceivedPacket+0x6cc>)
    9bee:	0213      	lsls	r3, r2, #8
    9bf0:	1898      	adds	r0, r3, r2
    9bf2:	1823      	adds	r3, r4, r0
    9bf4:	7b9d      	ldrb	r5, [r3, #14]
    9bf6:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[13];
    9bf8:	7bdb      	ldrb	r3, [r3, #15]
    9bfa:	744b      	strb	r3, [r1, #17]
    9bfc:	0213      	lsls	r3, r2, #8
    9bfe:	189a      	adds	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[14]);
    9c00:	0013      	movs	r3, r2
    9c02:	3310      	adds	r3, #16
    9c04:	191b      	adds	r3, r3, r4
    9c06:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    9c08:	5d03      	ldrb	r3, [r0, r4]
    9c0a:	3b15      	subs	r3, #21
    9c0c:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    9c0e:	3213      	adds	r2, #19
    9c10:	1912      	adds	r2, r2, r4
    9c12:	608a      	str	r2, [r1, #8]
    9c14:	e66b      	b.n	98ee <MiMAC_ReceivedPacket+0xf6>
					if(!(isSameAddress((uint8_t *)&DevIEEEaddr, &RxBuffer[BankIndex].Payload[5])))
    9c16:	0211      	lsls	r1, r2, #8
    9c18:	1889      	adds	r1, r1, r2
    9c1a:	3107      	adds	r1, #7
    9c1c:	4aa9      	ldr	r2, [pc, #676]	; (9ec4 <MiMAC_ReceivedPacket+0x6cc>)
    9c1e:	1889      	adds	r1, r1, r2
    9c20:	48ae      	ldr	r0, [pc, #696]	; (9edc <MiMAC_ReceivedPacket+0x6e4>)
    9c22:	4baf      	ldr	r3, [pc, #700]	; (9ee0 <MiMAC_ReceivedPacket+0x6e8>)
    9c24:	4798      	blx	r3
    9c26:	1e04      	subs	r4, r0, #0
    9c28:	d011      	beq.n	9c4e <MiMAC_ReceivedPacket+0x456>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    9c2a:	4baa      	ldr	r3, [pc, #680]	; (9ed4 <MiMAC_ReceivedPacket+0x6dc>)
    9c2c:	7818      	ldrb	r0, [r3, #0]
    9c2e:	4aa6      	ldr	r2, [pc, #664]	; (9ec8 <MiMAC_ReceivedPacket+0x6d0>)
    9c30:	49a4      	ldr	r1, [pc, #656]	; (9ec4 <MiMAC_ReceivedPacket+0x6cc>)
    9c32:	0203      	lsls	r3, r0, #8
    9c34:	181b      	adds	r3, r3, r0
    9c36:	18c8      	adds	r0, r1, r3
    9c38:	7944      	ldrb	r4, [r0, #5]
    9c3a:	7414      	strb	r4, [r2, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    9c3c:	7980      	ldrb	r0, [r0, #6]
    9c3e:	7450      	strb	r0, [r2, #17]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    9c40:	5c58      	ldrb	r0, [r3, r1]
    9c42:	3813      	subs	r0, #19
    9c44:	7310      	strb	r0, [r2, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    9c46:	3311      	adds	r3, #17
    9c48:	185b      	adds	r3, r3, r1
    9c4a:	6093      	str	r3, [r2, #8]
    9c4c:	e64f      	b.n	98ee <MiMAC_ReceivedPacket+0xf6>
						MiMAC_DiscardPacket();
    9c4e:	4ba0      	ldr	r3, [pc, #640]	; (9ed0 <MiMAC_ReceivedPacket+0x6d8>)
    9c50:	4798      	blx	r3
						if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9c52:	4ba0      	ldr	r3, [pc, #640]	; (9ed4 <MiMAC_ReceivedPacket+0x6dc>)
    9c54:	781a      	ldrb	r2, [r3, #0]
    9c56:	0213      	lsls	r3, r2, #8
    9c58:	189a      	adds	r2, r3, r2
    9c5a:	4b9a      	ldr	r3, [pc, #616]	; (9ec4 <MiMAC_ReceivedPacket+0x6cc>)
    9c5c:	189b      	adds	r3, r3, r2
    9c5e:	789b      	ldrb	r3, [r3, #2]
    9c60:	069b      	lsls	r3, r3, #26
    9c62:	d400      	bmi.n	9c66 <MiMAC_ReceivedPacket+0x46e>
    9c64:	e5e4      	b.n	9830 <MiMAC_ReceivedPacket+0x38>
							MiRadioReceiveParam.action = RECEIVE_START;	
    9c66:	a807      	add	r0, sp, #28
    9c68:	2300      	movs	r3, #0
    9c6a:	7003      	strb	r3, [r0, #0]
							MiRadioReceiveParam.rxWindowSize = 0;
    9c6c:	8043      	strh	r3, [r0, #2]
							RADIO_Receive(&MiRadioReceiveParam);
    9c6e:	4b9a      	ldr	r3, [pc, #616]	; (9ed8 <MiMAC_ReceivedPacket+0x6e0>)
    9c70:	4798      	blx	r3
    9c72:	e5dd      	b.n	9830 <MiMAC_ReceivedPacket+0x38>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    9c74:	0211      	lsls	r1, r2, #8
    9c76:	1889      	adds	r1, r1, r2
    9c78:	4b92      	ldr	r3, [pc, #584]	; (9ec4 <MiMAC_ReceivedPacket+0x6cc>)
    9c7a:	185b      	adds	r3, r3, r1
    9c7c:	79db      	ldrb	r3, [r3, #7]
    9c7e:	2bff      	cmp	r3, #255	; 0xff
    9c80:	d00c      	beq.n	9c9c <MiMAC_ReceivedPacket+0x4a4>
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 10;
    9c82:	4991      	ldr	r1, [pc, #580]	; (9ec8 <MiMAC_ReceivedPacket+0x6d0>)
    9c84:	4c8f      	ldr	r4, [pc, #572]	; (9ec4 <MiMAC_ReceivedPacket+0x6cc>)
    9c86:	0203      	lsls	r3, r0, #8
    9c88:	1818      	adds	r0, r3, r0
    9c8a:	5d03      	ldrb	r3, [r0, r4]
    9c8c:	3b0a      	subs	r3, #10
    9c8e:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    9c90:	0213      	lsls	r3, r2, #8
    9c92:	189a      	adds	r2, r3, r2
    9c94:	3209      	adds	r2, #9
    9c96:	1912      	adds	r2, r2, r4
    9c98:	608a      	str	r2, [r1, #8]
			break;
    9c9a:	e628      	b.n	98ee <MiMAC_ReceivedPacket+0xf6>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    9c9c:	0211      	lsls	r1, r2, #8
    9c9e:	1889      	adds	r1, r1, r2
    9ca0:	4b88      	ldr	r3, [pc, #544]	; (9ec4 <MiMAC_ReceivedPacket+0x6cc>)
    9ca2:	185b      	adds	r3, r3, r1
    9ca4:	7a1b      	ldrb	r3, [r3, #8]
    9ca6:	2bff      	cmp	r3, #255	; 0xff
    9ca8:	d1eb      	bne.n	9c82 <MiMAC_ReceivedPacket+0x48a>
					MACRxPacket.flags.bits.broadcast = 1;
    9caa:	4987      	ldr	r1, [pc, #540]	; (9ec8 <MiMAC_ReceivedPacket+0x6d0>)
    9cac:	780b      	ldrb	r3, [r1, #0]
    9cae:	2404      	movs	r4, #4
    9cb0:	4323      	orrs	r3, r4
    9cb2:	700b      	strb	r3, [r1, #0]
    9cb4:	e7e5      	b.n	9c82 <MiMAC_ReceivedPacket+0x48a>
				MiMAC_DiscardPacket();
    9cb6:	4b86      	ldr	r3, [pc, #536]	; (9ed0 <MiMAC_ReceivedPacket+0x6d8>)
    9cb8:	4798      	blx	r3
				if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9cba:	4b86      	ldr	r3, [pc, #536]	; (9ed4 <MiMAC_ReceivedPacket+0x6dc>)
    9cbc:	781a      	ldrb	r2, [r3, #0]
    9cbe:	0213      	lsls	r3, r2, #8
    9cc0:	189a      	adds	r2, r3, r2
    9cc2:	4b80      	ldr	r3, [pc, #512]	; (9ec4 <MiMAC_ReceivedPacket+0x6cc>)
    9cc4:	189b      	adds	r3, r3, r2
    9cc6:	789b      	ldrb	r3, [r3, #2]
    9cc8:	069b      	lsls	r3, r3, #26
    9cca:	d401      	bmi.n	9cd0 <MiMAC_ReceivedPacket+0x4d8>
				return false;
    9ccc:	2400      	movs	r4, #0
    9cce:	e5af      	b.n	9830 <MiMAC_ReceivedPacket+0x38>
					MiRadioReceiveParam.action = RECEIVE_START;					
    9cd0:	a807      	add	r0, sp, #28
    9cd2:	2300      	movs	r3, #0
    9cd4:	7003      	strb	r3, [r0, #0]
					MiRadioReceiveParam.rxWindowSize = 0;
    9cd6:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&MiRadioReceiveParam);
    9cd8:	4b7f      	ldr	r3, [pc, #508]	; (9ed8 <MiMAC_ReceivedPacket+0x6e0>)
    9cda:	4798      	blx	r3
    9cdc:	e7f6      	b.n	9ccc <MiMAC_ReceivedPacket+0x4d4>
			for (i = 0; i < CONNECTION_SIZE; i++)
    9cde:	3401      	adds	r4, #1
    9ce0:	b2e4      	uxtb	r4, r4
    9ce2:	3601      	adds	r6, #1
    9ce4:	350a      	adds	r5, #10
    9ce6:	2c05      	cmp	r4, #5
    9ce8:	d014      	beq.n	9d14 <MiMAC_ReceivedPacket+0x51c>
				if ((ConnectionTable[i].status.bits.isValid) &&
    9cea:	00b3      	lsls	r3, r6, #2
    9cec:	199b      	adds	r3, r3, r6
    9cee:	005b      	lsls	r3, r3, #1
    9cf0:	4443      	add	r3, r8
    9cf2:	7a1b      	ldrb	r3, [r3, #8]
    9cf4:	09db      	lsrs	r3, r3, #7
    9cf6:	d0f2      	beq.n	9cde <MiMAC_ReceivedPacket+0x4e6>
				isSameAddress(ConnectionTable[i].Address, MACRxPacket.SourceAddress))
    9cf8:	4b73      	ldr	r3, [pc, #460]	; (9ec8 <MiMAC_ReceivedPacket+0x6d0>)
    9cfa:	6859      	ldr	r1, [r3, #4]
    9cfc:	0028      	movs	r0, r5
    9cfe:	4b78      	ldr	r3, [pc, #480]	; (9ee0 <MiMAC_ReceivedPacket+0x6e8>)
    9d00:	4798      	blx	r3
				if ((ConnectionTable[i].status.bits.isValid) &&
    9d02:	2800      	cmp	r0, #0
    9d04:	d0eb      	beq.n	9cde <MiMAC_ReceivedPacket+0x4e6>
			if (i < CONNECTION_SIZE)
    9d06:	2c04      	cmp	r4, #4
    9d08:	d804      	bhi.n	9d14 <MiMAC_ReceivedPacket+0x51c>
				if (IncomingFrameCounter[i].Val >= FrameCounter.Val)	// drop the packet if saved frame counter (IncomingFrameCounter) is equal or greater than the lastest received packet (FrameCounter.Val)
    9d0a:	00a3      	lsls	r3, r4, #2
    9d0c:	4a75      	ldr	r2, [pc, #468]	; (9ee4 <MiMAC_ReceivedPacket+0x6ec>)
    9d0e:	589b      	ldr	r3, [r3, r2]
    9d10:	42bb      	cmp	r3, r7
    9d12:	d22d      	bcs.n	9d70 <MiMAC_ReceivedPacket+0x578>
			MACRxPacket.PayloadLen -= 5;  // used to 5 for frame counter now -4 also added for MIC integrity
    9d14:	496c      	ldr	r1, [pc, #432]	; (9ec8 <MiMAC_ReceivedPacket+0x6d0>)
    9d16:	7b0b      	ldrb	r3, [r1, #12]
    9d18:	3b05      	subs	r3, #5
    9d1a:	b2db      	uxtb	r3, r3
    9d1c:	730b      	strb	r3, [r1, #12]
			received_mic_values[0] = MACRxPacket.Payload[MACRxPacket.PayloadLen+1];
    9d1e:	6888      	ldr	r0, [r1, #8]
    9d20:	18c3      	adds	r3, r0, r3
    9d22:	785d      	ldrb	r5, [r3, #1]
    9d24:	4a70      	ldr	r2, [pc, #448]	; (9ee8 <MiMAC_ReceivedPacket+0x6f0>)
    9d26:	7015      	strb	r5, [r2, #0]
			received_mic_values[1] = MACRxPacket.Payload[MACRxPacket.PayloadLen+2];
    9d28:	789d      	ldrb	r5, [r3, #2]
    9d2a:	7055      	strb	r5, [r2, #1]
			received_mic_values[2] = MACRxPacket.Payload[MACRxPacket.PayloadLen+3];
    9d2c:	78dd      	ldrb	r5, [r3, #3]
    9d2e:	7095      	strb	r5, [r2, #2]
			received_mic_values[3] = MACRxPacket.Payload[MACRxPacket.PayloadLen+4];
    9d30:	791b      	ldrb	r3, [r3, #4]
    9d32:	70d3      	strb	r3, [r2, #3]
			if (false == DataDecrypt(&(MACRxPacket.Payload[5]), &(MACRxPacket.PayloadLen), MACRxPacket.SourceAddress, FrameCounter, RxBuffer[BankIndex].Payload[0]))
    9d34:	684a      	ldr	r2, [r1, #4]
    9d36:	310c      	adds	r1, #12
    9d38:	3005      	adds	r0, #5
    9d3a:	4b66      	ldr	r3, [pc, #408]	; (9ed4 <MiMAC_ReceivedPacket+0x6dc>)
    9d3c:	781d      	ldrb	r5, [r3, #0]
    9d3e:	022b      	lsls	r3, r5, #8
    9d40:	195d      	adds	r5, r3, r5
    9d42:	4b60      	ldr	r3, [pc, #384]	; (9ec4 <MiMAC_ReceivedPacket+0x6cc>)
    9d44:	195b      	adds	r3, r3, r5
    9d46:	789b      	ldrb	r3, [r3, #2]
    9d48:	9300      	str	r3, [sp, #0]
    9d4a:	003b      	movs	r3, r7
    9d4c:	4d67      	ldr	r5, [pc, #412]	; (9eec <MiMAC_ReceivedPacket+0x6f4>)
    9d4e:	47a8      	blx	r5
    9d50:	2800      	cmp	r0, #0
    9d52:	d01f      	beq.n	9d94 <MiMAC_ReceivedPacket+0x59c>
			if (i < CONNECTION_SIZE)
    9d54:	2c04      	cmp	r4, #4
    9d56:	d802      	bhi.n	9d5e <MiMAC_ReceivedPacket+0x566>
				IncomingFrameCounter[i].Val = FrameCounter.Val;
    9d58:	00a4      	lsls	r4, r4, #2
    9d5a:	4b62      	ldr	r3, [pc, #392]	; (9ee4 <MiMAC_ReceivedPacket+0x6ec>)
    9d5c:	50e7      	str	r7, [r4, r3]
			MACRxPacket.Payload = &(MACRxPacket.Payload[5]);
    9d5e:	4b5a      	ldr	r3, [pc, #360]	; (9ec8 <MiMAC_ReceivedPacket+0x6d0>)
    9d60:	689a      	ldr	r2, [r3, #8]
    9d62:	3205      	adds	r2, #5
    9d64:	609a      	str	r2, [r3, #8]
			MACRxPacket.flags.bits.secEn = 1;
    9d66:	781a      	ldrb	r2, [r3, #0]
    9d68:	2108      	movs	r1, #8
    9d6a:	430a      	orrs	r2, r1
    9d6c:	701a      	strb	r2, [r3, #0]
    9d6e:	e5c8      	b.n	9902 <MiMAC_ReceivedPacket+0x10a>
					MiMAC_DiscardPacket();
    9d70:	4b57      	ldr	r3, [pc, #348]	; (9ed0 <MiMAC_ReceivedPacket+0x6d8>)
    9d72:	4798      	blx	r3
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9d74:	4b57      	ldr	r3, [pc, #348]	; (9ed4 <MiMAC_ReceivedPacket+0x6dc>)
    9d76:	781a      	ldrb	r2, [r3, #0]
    9d78:	0213      	lsls	r3, r2, #8
    9d7a:	189a      	adds	r2, r3, r2
    9d7c:	4b51      	ldr	r3, [pc, #324]	; (9ec4 <MiMAC_ReceivedPacket+0x6cc>)
    9d7e:	189b      	adds	r3, r3, r2
    9d80:	789b      	ldrb	r3, [r3, #2]
    9d82:	069b      	lsls	r3, r3, #26
    9d84:	d5a2      	bpl.n	9ccc <MiMAC_ReceivedPacket+0x4d4>
						MiRadioReceiveParam.action = RECEIVE_START;					
    9d86:	a807      	add	r0, sp, #28
    9d88:	2300      	movs	r3, #0
    9d8a:	7003      	strb	r3, [r0, #0]
						MiRadioReceiveParam.rxWindowSize = 0;
    9d8c:	8043      	strh	r3, [r0, #2]
						RADIO_Receive(&MiRadioReceiveParam);
    9d8e:	4b52      	ldr	r3, [pc, #328]	; (9ed8 <MiMAC_ReceivedPacket+0x6e0>)
    9d90:	4798      	blx	r3
    9d92:	e79b      	b.n	9ccc <MiMAC_ReceivedPacket+0x4d4>
				MiMAC_DiscardPacket();
    9d94:	4b4e      	ldr	r3, [pc, #312]	; (9ed0 <MiMAC_ReceivedPacket+0x6d8>)
    9d96:	4798      	blx	r3
				if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9d98:	4b4e      	ldr	r3, [pc, #312]	; (9ed4 <MiMAC_ReceivedPacket+0x6dc>)
    9d9a:	781a      	ldrb	r2, [r3, #0]
    9d9c:	0213      	lsls	r3, r2, #8
    9d9e:	189a      	adds	r2, r3, r2
    9da0:	4b48      	ldr	r3, [pc, #288]	; (9ec4 <MiMAC_ReceivedPacket+0x6cc>)
    9da2:	189b      	adds	r3, r3, r2
    9da4:	789b      	ldrb	r3, [r3, #2]
    9da6:	069b      	lsls	r3, r3, #26
    9da8:	d590      	bpl.n	9ccc <MiMAC_ReceivedPacket+0x4d4>
					MiRadioReceiveParam.action = RECEIVE_START;					
    9daa:	a807      	add	r0, sp, #28
    9dac:	2300      	movs	r3, #0
    9dae:	7003      	strb	r3, [r0, #0]
					MiRadioReceiveParam.rxWindowSize = 0;
    9db0:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&MiRadioReceiveParam);
    9db2:	4b49      	ldr	r3, [pc, #292]	; (9ed8 <MiMAC_ReceivedPacket+0x6e0>)
    9db4:	4798      	blx	r3
    9db6:	e789      	b.n	9ccc <MiMAC_ReceivedPacket+0x4d4>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_DATA;
    9db8:	4a43      	ldr	r2, [pc, #268]	; (9ec8 <MiMAC_ReceivedPacket+0x6d0>)
    9dba:	7813      	ldrb	r3, [r2, #0]
    9dbc:	2403      	movs	r4, #3
    9dbe:	43a3      	bics	r3, r4
    9dc0:	7013      	strb	r3, [r2, #0]
		MACRxPacket.LQIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 2];
    9dc2:	4c41      	ldr	r4, [pc, #260]	; (9ec8 <MiMAC_ReceivedPacket+0x6d0>)
    9dc4:	4b3f      	ldr	r3, [pc, #252]	; (9ec4 <MiMAC_ReceivedPacket+0x6cc>)
    9dc6:	0202      	lsls	r2, r0, #8
    9dc8:	1812      	adds	r2, r2, r0
    9dca:	5cd5      	ldrb	r5, [r2, r3]
    9dcc:	189b      	adds	r3, r3, r2
    9dce:	5d5a      	ldrb	r2, [r3, r5]
    9dd0:	73a2      	strb	r2, [r4, #14]
		MACRxPacket.RSSIValue = RxBuffer[BankIndex].radioRSSI;				
    9dd2:	785b      	ldrb	r3, [r3, #1]
    9dd4:	7363      	strb	r3, [r4, #13]
		return true;
    9dd6:	2401      	movs	r4, #1
		if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9dd8:	068b      	lsls	r3, r1, #26
    9dda:	d400      	bmi.n	9dde <MiMAC_ReceivedPacket+0x5e6>
    9ddc:	e528      	b.n	9830 <MiMAC_ReceivedPacket+0x38>
			    tParamAck.flags.Val = 0;
    9dde:	aa04      	add	r2, sp, #16
    9de0:	2400      	movs	r4, #0
			    tParamAck.altSrcAddr = 0;
    9de2:	7254      	strb	r4, [r2, #9]
			    tParamAck.altDestAddr = false;
    9de4:	7214      	strb	r4, [r2, #8]
 			    tParamAck.flags.bits.sourcePrsnt = 1;
    9de6:	233e      	movs	r3, #62	; 0x3e
    9de8:	425b      	negs	r3, r3
    9dea:	7013      	strb	r3, [r2, #0]
			    tParamAck.DestAddress = MACRxPacket.SourceAddress;
    9dec:	4b36      	ldr	r3, [pc, #216]	; (9ec8 <MiMAC_ReceivedPacket+0x6d0>)
    9dee:	6859      	ldr	r1, [r3, #4]
    9df0:	9105      	str	r1, [sp, #20]
			    tParamAck.DestPANID.Val = MACRxPacket.SourcePANID.Val;
    9df2:	8a1b      	ldrh	r3, [r3, #16]
    9df4:	8153      	strh	r3, [r2, #10]
			AckBuffer[0] = RxBuffer[BankIndex].Payload[2];	
    9df6:	4b3e      	ldr	r3, [pc, #248]	; (9ef0 <MiMAC_ReceivedPacket+0x6f8>)
    9df8:	0205      	lsls	r5, r0, #8
    9dfa:	182d      	adds	r5, r5, r0
    9dfc:	4831      	ldr	r0, [pc, #196]	; (9ec4 <MiMAC_ReceivedPacket+0x6cc>)
    9dfe:	1940      	adds	r0, r0, r5
    9e00:	7900      	ldrb	r0, [r0, #4]
    9e02:	7018      	strb	r0, [r3, #0]
			MiMAC_SendPacket(tParamAck, AckBuffer, 1, 0, NULL);
    9e04:	9402      	str	r4, [sp, #8]
    9e06:	9401      	str	r4, [sp, #4]
    9e08:	2001      	movs	r0, #1
    9e0a:	9000      	str	r0, [sp, #0]
    9e0c:	9804      	ldr	r0, [sp, #16]
    9e0e:	9a06      	ldr	r2, [sp, #24]
    9e10:	4c38      	ldr	r4, [pc, #224]	; (9ef4 <MiMAC_ReceivedPacket+0x6fc>)
    9e12:	47a0      	blx	r4
		return true;
    9e14:	2401      	movs	r4, #1
    9e16:	e50b      	b.n	9830 <MiMAC_ReceivedPacket+0x38>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_COMMAND;
    9e18:	4a2b      	ldr	r2, [pc, #172]	; (9ec8 <MiMAC_ReceivedPacket+0x6d0>)
    9e1a:	7813      	ldrb	r3, [r2, #0]
    9e1c:	2403      	movs	r4, #3
    9e1e:	43a3      	bics	r3, r4
    9e20:	2401      	movs	r4, #1
    9e22:	4323      	orrs	r3, r4
    9e24:	7013      	strb	r3, [r2, #0]
			break;
    9e26:	e7cc      	b.n	9dc2 <MiMAC_ReceivedPacket+0x5ca>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_RESERVE;
    9e28:	4a27      	ldr	r2, [pc, #156]	; (9ec8 <MiMAC_ReceivedPacket+0x6d0>)
    9e2a:	7813      	ldrb	r3, [r2, #0]
    9e2c:	2403      	movs	r4, #3
    9e2e:	4323      	orrs	r3, r4
    9e30:	7013      	strb	r3, [r2, #0]
			break;
    9e32:	e7c6      	b.n	9dc2 <MiMAC_ReceivedPacket+0x5ca>
				MACRxPacket.flags.bits.packetType = PACKET_TYPE_ACK;
    9e34:	4a24      	ldr	r2, [pc, #144]	; (9ec8 <MiMAC_ReceivedPacket+0x6d0>)
    9e36:	7813      	ldrb	r3, [r2, #0]
    9e38:	2103      	movs	r1, #3
    9e3a:	438b      	bics	r3, r1
    9e3c:	2102      	movs	r1, #2
    9e3e:	430b      	orrs	r3, r1
    9e40:	7013      	strb	r3, [r2, #0]
				if((AckSeqNum == *(MACRxPacket.Payload))&& (AckReqData))
    9e42:	6893      	ldr	r3, [r2, #8]
    9e44:	781a      	ldrb	r2, [r3, #0]
    9e46:	4b2c      	ldr	r3, [pc, #176]	; (9ef8 <MiMAC_ReceivedPacket+0x700>)
    9e48:	781b      	ldrb	r3, [r3, #0]
    9e4a:	429a      	cmp	r2, r3
    9e4c:	d003      	beq.n	9e56 <MiMAC_ReceivedPacket+0x65e>
				MiMAC_DiscardPacket();
    9e4e:	4b20      	ldr	r3, [pc, #128]	; (9ed0 <MiMAC_ReceivedPacket+0x6d8>)
    9e50:	4798      	blx	r3
				return false;
    9e52:	2400      	movs	r4, #0
    9e54:	e4ec      	b.n	9830 <MiMAC_ReceivedPacket+0x38>
				if((AckSeqNum == *(MACRxPacket.Payload))&& (AckReqData))
    9e56:	4b29      	ldr	r3, [pc, #164]	; (9efc <MiMAC_ReceivedPacket+0x704>)
    9e58:	781b      	ldrb	r3, [r3, #0]
    9e5a:	2b00      	cmp	r3, #0
    9e5c:	d0f7      	beq.n	9e4e <MiMAC_ReceivedPacket+0x656>
					DataTxAckTimer.Val = 0;
    9e5e:	2400      	movs	r4, #0
    9e60:	4b27      	ldr	r3, [pc, #156]	; (9f00 <MiMAC_ReceivedPacket+0x708>)
    9e62:	601c      	str	r4, [r3, #0]
					PHY_DataConf(SUCCESS); 
    9e64:	2000      	movs	r0, #0
    9e66:	4b27      	ldr	r3, [pc, #156]	; (9f04 <MiMAC_ReceivedPacket+0x70c>)
    9e68:	4798      	blx	r3
					AckReqData = 0;
    9e6a:	4b24      	ldr	r3, [pc, #144]	; (9efc <MiMAC_ReceivedPacket+0x704>)
    9e6c:	701c      	strb	r4, [r3, #0]
    9e6e:	e7ee      	b.n	9e4e <MiMAC_ReceivedPacket+0x656>
				if (!(((RxBuffer[BankIndex].Payload[5] == 0xFF) & (RxBuffer[BankIndex].Payload[6] == 0xFF)) ||((RxBuffer[BankIndex].Payload[5] == DevShortAddress[0]) & (RxBuffer[BankIndex].Payload[6] == DevShortAddress[1]))) )
    9e70:	0201      	lsls	r1, r0, #8
    9e72:	1809      	adds	r1, r1, r0
    9e74:	4b13      	ldr	r3, [pc, #76]	; (9ec4 <MiMAC_ReceivedPacket+0x6cc>)
    9e76:	185b      	adds	r3, r3, r1
    9e78:	4914      	ldr	r1, [pc, #80]	; (9ecc <MiMAC_ReceivedPacket+0x6d4>)
    9e7a:	7849      	ldrb	r1, [r1, #1]
    9e7c:	7a1b      	ldrb	r3, [r3, #8]
    9e7e:	4299      	cmp	r1, r3
    9e80:	d000      	beq.n	9e84 <MiMAC_ReceivedPacket+0x68c>
    9e82:	e5a0      	b.n	99c6 <MiMAC_ReceivedPacket+0x1ce>
    9e84:	4b11      	ldr	r3, [pc, #68]	; (9ecc <MiMAC_ReceivedPacket+0x6d4>)
    9e86:	781b      	ldrb	r3, [r3, #0]
    9e88:	42a3      	cmp	r3, r4
    9e8a:	d000      	beq.n	9e8e <MiMAC_ReceivedPacket+0x696>
    9e8c:	e59b      	b.n	99c6 <MiMAC_ReceivedPacket+0x1ce>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    9e8e:	490e      	ldr	r1, [pc, #56]	; (9ec8 <MiMAC_ReceivedPacket+0x6d0>)
    9e90:	4c0c      	ldr	r4, [pc, #48]	; (9ec4 <MiMAC_ReceivedPacket+0x6cc>)
    9e92:	0203      	lsls	r3, r0, #8
    9e94:	1818      	adds	r0, r3, r0
    9e96:	1823      	adds	r3, r4, r0
    9e98:	795d      	ldrb	r5, [r3, #5]
    9e9a:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    9e9c:	799b      	ldrb	r3, [r3, #6]
    9e9e:	744b      	strb	r3, [r1, #17]
    9ea0:	0213      	lsls	r3, r2, #8
    9ea2:	189a      	adds	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    9ea4:	0013      	movs	r3, r2
    9ea6:	3309      	adds	r3, #9
    9ea8:	191b      	adds	r3, r3, r4
    9eaa:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    9eac:	5d03      	ldrb	r3, [r0, r4]
    9eae:	3b13      	subs	r3, #19
    9eb0:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    9eb2:	3211      	adds	r2, #17
    9eb4:	1912      	adds	r2, r2, r4
    9eb6:	608a      	str	r2, [r1, #8]
    9eb8:	e5b6      	b.n	9a28 <MiMAC_ReceivedPacket+0x230>
			BankIndex = i;
    9eba:	2200      	movs	r2, #0
    9ebc:	4b05      	ldr	r3, [pc, #20]	; (9ed4 <MiMAC_ReceivedPacket+0x6dc>)
    9ebe:	701a      	strb	r2, [r3, #0]
    9ec0:	e4c1      	b.n	9846 <MiMAC_ReceivedPacket+0x4e>
    9ec2:	46c0      	nop			; (mov r8, r8)
    9ec4:	20002258 	.word	0x20002258
    9ec8:	200026a0 	.word	0x200026a0
    9ecc:	20002660 	.word	0x20002660
    9ed0:	00009779 	.word	0x00009779
    9ed4:	2000000f 	.word	0x2000000f
    9ed8:	0000eeb9 	.word	0x0000eeb9
    9edc:	20002250 	.word	0x20002250
    9ee0:	0000a5ed 	.word	0x0000a5ed
    9ee4:	200026c4 	.word	0x200026c4
    9ee8:	2000213c 	.word	0x2000213c
    9eec:	0000920d 	.word	0x0000920d
    9ef0:	20002140 	.word	0x20002140
    9ef4:	000093e9 	.word	0x000093e9
    9ef8:	20001fd4 	.word	0x20001fd4
    9efc:	20000273 	.word	0x20000273
    9f00:	20002960 	.word	0x20002960
    9f04:	00009795 	.word	0x00009795

00009f08 <MiMAC_Task>:

void MiMAC_Task(void)
{
    9f08:	b510      	push	{r4, lr}
  PHY_TaskHandler();
    9f0a:	4b0b      	ldr	r3, [pc, #44]	; (9f38 <MiMAC_Task+0x30>)
    9f0c:	4798      	blx	r3
  if(dataConfCallback && dataConfAvailable)
    9f0e:	4b0b      	ldr	r3, [pc, #44]	; (9f3c <MiMAC_Task+0x34>)
    9f10:	681b      	ldr	r3, [r3, #0]
    9f12:	2b00      	cmp	r3, #0
    9f14:	d003      	beq.n	9f1e <MiMAC_Task+0x16>
    9f16:	4a0a      	ldr	r2, [pc, #40]	; (9f40 <MiMAC_Task+0x38>)
    9f18:	7812      	ldrb	r2, [r2, #0]
    9f1a:	2a00      	cmp	r2, #0
    9f1c:	d100      	bne.n	9f20 <MiMAC_Task+0x18>
  {
	  dataConfAvailable = false;
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
  }
}
    9f1e:	bd10      	pop	{r4, pc}
	  dataConfAvailable = false;
    9f20:	2100      	movs	r1, #0
    9f22:	4a07      	ldr	r2, [pc, #28]	; (9f40 <MiMAC_Task+0x38>)
    9f24:	7011      	strb	r1, [r2, #0]
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
    9f26:	4a07      	ldr	r2, [pc, #28]	; (9f44 <MiMAC_Task+0x3c>)
    9f28:	6812      	ldr	r2, [r2, #0]
    9f2a:	4907      	ldr	r1, [pc, #28]	; (9f48 <MiMAC_Task+0x40>)
    9f2c:	7809      	ldrb	r1, [r1, #0]
    9f2e:	4807      	ldr	r0, [pc, #28]	; (9f4c <MiMAC_Task+0x44>)
    9f30:	7800      	ldrb	r0, [r0, #0]
    9f32:	4798      	blx	r3
}
    9f34:	e7f3      	b.n	9f1e <MiMAC_Task+0x16>
    9f36:	46c0      	nop			; (mov r8, r8)
    9f38:	0000a3a9 	.word	0x0000a3a9
    9f3c:	20000278 	.word	0x20000278
    9f40:	20000276 	.word	0x20000276
    9f44:	20000280 	.word	0x20000280
    9f48:	20002124 	.word	0x20002124
    9f4c:	2000027c 	.word	0x2000027c

00009f50 <phySetChannel>:
}

/*************************************************************************//**
*****************************************************************************/
static void phySetChannel(void)
{
    9f50:	b500      	push	{lr}
    9f52:	b083      	sub	sp, #12
	uint32_t frequncy_set;
	if(phyChannel) // Based on channel we need to set frequency 
    9f54:	4b2f      	ldr	r3, [pc, #188]	; (a014 <phySetChannel+0xc4>)
    9f56:	781b      	ldrb	r3, [r3, #0]
    9f58:	2b00      	cmp	r3, #0
    9f5a:	d007      	beq.n	9f6c <phySetChannel+0x1c>
	{
		switch(phyChannel)
    9f5c:	2b19      	cmp	r3, #25
    9f5e:	d856      	bhi.n	a00e <phySetChannel+0xbe>
    9f60:	009b      	lsls	r3, r3, #2
    9f62:	4a2d      	ldr	r2, [pc, #180]	; (a018 <phySetChannel+0xc8>)
    9f64:	58d3      	ldr	r3, [r2, r3]
    9f66:	469f      	mov	pc, r3
				//break;
			//case 8:
				//frequncy_set = FREQ_786000KHZ;
				//break;
			case 0:
				frequncy_set = FREQ_862000KHZ;
    9f68:	4b2c      	ldr	r3, [pc, #176]	; (a01c <phySetChannel+0xcc>)
    9f6a:	9301      	str	r3, [sp, #4]
				break;				
																									
		}
	}
		
	if(RADIO_SetAttr(CHANNEL_FREQUENCY,(void *)&frequncy_set) == 0)  
    9f6c:	a901      	add	r1, sp, #4
    9f6e:	2001      	movs	r0, #1
    9f70:	4b2b      	ldr	r3, [pc, #172]	; (a020 <phySetChannel+0xd0>)
    9f72:	4798      	blx	r3
	{
	}
}
    9f74:	b003      	add	sp, #12
    9f76:	bd00      	pop	{pc}
				frequncy_set = FREQ_863000KHZ;
    9f78:	4b2a      	ldr	r3, [pc, #168]	; (a024 <phySetChannel+0xd4>)
    9f7a:	9301      	str	r3, [sp, #4]
				break;
    9f7c:	e7f6      	b.n	9f6c <phySetChannel+0x1c>
				frequncy_set = FREQ_865000KHZ;
    9f7e:	4b2a      	ldr	r3, [pc, #168]	; (a028 <phySetChannel+0xd8>)
    9f80:	9301      	str	r3, [sp, #4]
				break;
    9f82:	e7f3      	b.n	9f6c <phySetChannel+0x1c>
				frequncy_set = FREQ_866550KHZ;
    9f84:	4b29      	ldr	r3, [pc, #164]	; (a02c <phySetChannel+0xdc>)
    9f86:	9301      	str	r3, [sp, #4]
				break;
    9f88:	e7f0      	b.n	9f6c <phySetChannel+0x1c>
				frequncy_set = FREQ_867000KHZ;
    9f8a:	4b29      	ldr	r3, [pc, #164]	; (a030 <phySetChannel+0xe0>)
    9f8c:	9301      	str	r3, [sp, #4]
				break;			
    9f8e:	e7ed      	b.n	9f6c <phySetChannel+0x1c>
				frequncy_set = FREQ_868100KHZ;
    9f90:	4b28      	ldr	r3, [pc, #160]	; (a034 <phySetChannel+0xe4>)
    9f92:	9301      	str	r3, [sp, #4]
				break;
    9f94:	e7ea      	b.n	9f6c <phySetChannel+0x1c>
				frequncy_set = FREQ_869525KHZ;
    9f96:	4b28      	ldr	r3, [pc, #160]	; (a038 <phySetChannel+0xe8>)
    9f98:	9301      	str	r3, [sp, #4]
				break;			
    9f9a:	e7e7      	b.n	9f6c <phySetChannel+0x1c>
				frequncy_set = FREQ_870000KHZ;
    9f9c:	4b27      	ldr	r3, [pc, #156]	; (a03c <phySetChannel+0xec>)
    9f9e:	9301      	str	r3, [sp, #4]
				break;
    9fa0:	e7e4      	b.n	9f6c <phySetChannel+0x1c>
				frequncy_set = FREQ_902300KHZ;
    9fa2:	4b27      	ldr	r3, [pc, #156]	; (a040 <phySetChannel+0xf0>)
    9fa4:	9301      	str	r3, [sp, #4]
				break;
    9fa6:	e7e1      	b.n	9f6c <phySetChannel+0x1c>
				frequncy_set = FREQ_903000KHZ;
    9fa8:	4b26      	ldr	r3, [pc, #152]	; (a044 <phySetChannel+0xf4>)
    9faa:	9301      	str	r3, [sp, #4]
				break;
    9fac:	e7de      	b.n	9f6c <phySetChannel+0x1c>
				frequncy_set = FREQ_915000KHZ;
    9fae:	4b26      	ldr	r3, [pc, #152]	; (a048 <phySetChannel+0xf8>)
    9fb0:	9301      	str	r3, [sp, #4]
				break;
    9fb2:	e7db      	b.n	9f6c <phySetChannel+0x1c>
				frequncy_set = FREQ_915200KHZ;
    9fb4:	4b25      	ldr	r3, [pc, #148]	; (a04c <phySetChannel+0xfc>)
    9fb6:	9301      	str	r3, [sp, #4]
				break;
    9fb8:	e7d8      	b.n	9f6c <phySetChannel+0x1c>
				frequncy_set = FREQ_915900KHZ;
    9fba:	4b25      	ldr	r3, [pc, #148]	; (a050 <phySetChannel+0x100>)
    9fbc:	9301      	str	r3, [sp, #4]
				break;
    9fbe:	e7d5      	b.n	9f6c <phySetChannel+0x1c>
				frequncy_set = FREQ_920000KHZ;
    9fc0:	4b24      	ldr	r3, [pc, #144]	; (a054 <phySetChannel+0x104>)
    9fc2:	9301      	str	r3, [sp, #4]
				break;
    9fc4:	e7d2      	b.n	9f6c <phySetChannel+0x1c>
				frequncy_set = FREQ_920900KHZ;
    9fc6:	4b24      	ldr	r3, [pc, #144]	; (a058 <phySetChannel+0x108>)
    9fc8:	9301      	str	r3, [sp, #4]
				break;
    9fca:	e7cf      	b.n	9f6c <phySetChannel+0x1c>
				frequncy_set = FREQ_921900KHZ;
    9fcc:	4b23      	ldr	r3, [pc, #140]	; (a05c <phySetChannel+0x10c>)
    9fce:	9301      	str	r3, [sp, #4]
				break;
    9fd0:	e7cc      	b.n	9f6c <phySetChannel+0x1c>
				frequncy_set = FREQ_922000KHZ;
    9fd2:	4b23      	ldr	r3, [pc, #140]	; (a060 <phySetChannel+0x110>)
    9fd4:	9301      	str	r3, [sp, #4]
				break;
    9fd6:	e7c9      	b.n	9f6c <phySetChannel+0x1c>
				frequncy_set = FREQ_922100KHZ;
    9fd8:	4b22      	ldr	r3, [pc, #136]	; (a064 <phySetChannel+0x114>)
    9fda:	9301      	str	r3, [sp, #4]
				break;
    9fdc:	e7c6      	b.n	9f6c <phySetChannel+0x1c>
				frequncy_set = FREQ_923000KHZ;
    9fde:	4b22      	ldr	r3, [pc, #136]	; (a068 <phySetChannel+0x118>)
    9fe0:	9301      	str	r3, [sp, #4]
				break;
    9fe2:	e7c3      	b.n	9f6c <phySetChannel+0x1c>
				frequncy_set = FREQ_923200KHZ;
    9fe4:	4b21      	ldr	r3, [pc, #132]	; (a06c <phySetChannel+0x11c>)
    9fe6:	9301      	str	r3, [sp, #4]
				break;
    9fe8:	e7c0      	b.n	9f6c <phySetChannel+0x1c>
				frequncy_set = FREQ_923300KHZ;
    9fea:	4b21      	ldr	r3, [pc, #132]	; (a070 <phySetChannel+0x120>)
    9fec:	9301      	str	r3, [sp, #4]
				break;
    9fee:	e7bd      	b.n	9f6c <phySetChannel+0x1c>
				frequncy_set = FREQ_925000KHZ;
    9ff0:	4b20      	ldr	r3, [pc, #128]	; (a074 <phySetChannel+0x124>)
    9ff2:	9301      	str	r3, [sp, #4]
				break;		
    9ff4:	e7ba      	b.n	9f6c <phySetChannel+0x1c>
				frequncy_set = FREQ_927500KHZ;
    9ff6:	4b20      	ldr	r3, [pc, #128]	; (a078 <phySetChannel+0x128>)
    9ff8:	9301      	str	r3, [sp, #4]
				break;
    9ffa:	e7b7      	b.n	9f6c <phySetChannel+0x1c>
				frequncy_set = FREQ_928000KHZ;
    9ffc:	4b1f      	ldr	r3, [pc, #124]	; (a07c <phySetChannel+0x12c>)
    9ffe:	9301      	str	r3, [sp, #4]
				break;
    a000:	e7b4      	b.n	9f6c <phySetChannel+0x1c>
				frequncy_set = FREQ_928500KHZ;
    a002:	4b1f      	ldr	r3, [pc, #124]	; (a080 <phySetChannel+0x130>)
    a004:	9301      	str	r3, [sp, #4]
				break;
    a006:	e7b1      	b.n	9f6c <phySetChannel+0x1c>
				frequncy_set = FREQ_1020000KHZ;
    a008:	4b1e      	ldr	r3, [pc, #120]	; (a084 <phySetChannel+0x134>)
    a00a:	9301      	str	r3, [sp, #4]
				break;
    a00c:	e7ae      	b.n	9f6c <phySetChannel+0x1c>
				frequncy_set = FREQ_868100KHZ;
    a00e:	4b09      	ldr	r3, [pc, #36]	; (a034 <phySetChannel+0xe4>)
    a010:	9301      	str	r3, [sp, #4]
				break;				
    a012:	e7ab      	b.n	9f6c <phySetChannel+0x1c>
    a014:	20000284 	.word	0x20000284
    a018:	00017fdc 	.word	0x00017fdc
    a01c:	33611380 	.word	0x33611380
    a020:	0000dcad 	.word	0x0000dcad
    a024:	337055c0 	.word	0x337055c0
    a028:	338eda40 	.word	0x338eda40
    a02c:	33a680f0 	.word	0x33a680f0
    a030:	33ad5ec0 	.word	0x33ad5ec0
    a034:	33be27a0 	.word	0x33be27a0
    a038:	33d3e608 	.word	0x33d3e608
    a03c:	33db2580 	.word	0x33db2580
    a040:	35c80160 	.word	0x35c80160
    a044:	35d2afc0 	.word	0x35d2afc0
    a048:	3689cac0 	.word	0x3689cac0
    a04c:	368cd800 	.word	0x368cd800
    a050:	36978660 	.word	0x36978660
    a054:	36d61600 	.word	0x36d61600
    a058:	36e3d1a0 	.word	0x36e3d1a0
    a05c:	36f313e0 	.word	0x36f313e0
    a060:	36f49a80 	.word	0x36f49a80
    a064:	36f62120 	.word	0x36f62120
    a068:	3703dcc0 	.word	0x3703dcc0
    a06c:	3706ea00 	.word	0x3706ea00
    a070:	370870a0 	.word	0x370870a0
    a074:	37226140 	.word	0x37226140
    a078:	374886e0 	.word	0x374886e0
    a07c:	37502800 	.word	0x37502800
    a080:	3757c920 	.word	0x3757c920
    a084:	3ccbf700 	.word	0x3ccbf700

0000a088 <radioCallback>:
{
    a088:	b570      	push	{r4, r5, r6, lr}
    a08a:	b082      	sub	sp, #8
    a08c:	0004      	movs	r4, r0
    a08e:	000d      	movs	r5, r1
	callbackBackup = callback;
    a090:	4b3e      	ldr	r3, [pc, #248]	; (a18c <radioCallback+0x104>)
    a092:	7018      	strb	r0, [r3, #0]
	int16_t rssi_readVal=0;
    a094:	466b      	mov	r3, sp
    a096:	1c98      	adds	r0, r3, #2
    a098:	2300      	movs	r3, #0
    a09a:	8003      	strh	r3, [r0, #0]
	Radio_ReadRssi(&rssi_readVal);
    a09c:	4b3c      	ldr	r3, [pc, #240]	; (a190 <radioCallback+0x108>)
    a09e:	4798      	blx	r3
	switch (callback)
    a0a0:	2c10      	cmp	r4, #16
    a0a2:	d853      	bhi.n	a14c <radioCallback+0xc4>
    a0a4:	00a4      	lsls	r4, r4, #2
    a0a6:	4b3b      	ldr	r3, [pc, #236]	; (a194 <radioCallback+0x10c>)
    a0a8:	591b      	ldr	r3, [r3, r4]
    a0aa:	469f      	mov	pc, r3
					if (RxBuffer[i].PayloadLen == 0)
    a0ac:	4b3a      	ldr	r3, [pc, #232]	; (a198 <radioCallback+0x110>)
    a0ae:	781a      	ldrb	r2, [r3, #0]
    a0b0:	2a00      	cmp	r2, #0
    a0b2:	d00e      	beq.n	a0d2 <radioCallback+0x4a>
    a0b4:	2302      	movs	r3, #2
    a0b6:	33ff      	adds	r3, #255	; 0xff
    a0b8:	4a37      	ldr	r2, [pc, #220]	; (a198 <radioCallback+0x110>)
    a0ba:	5cd3      	ldrb	r3, [r2, r3]
    a0bc:	2b00      	cmp	r3, #0
    a0be:	d04e      	beq.n	a15e <radioCallback+0xd6>
    a0c0:	4b36      	ldr	r3, [pc, #216]	; (a19c <radioCallback+0x114>)
    a0c2:	5cd3      	ldrb	r3, [r2, r3]
    a0c4:	2b00      	cmp	r3, #0
    a0c6:	d04c      	beq.n	a162 <radioCallback+0xda>
    a0c8:	4b35      	ldr	r3, [pc, #212]	; (a1a0 <radioCallback+0x118>)
    a0ca:	5cd3      	ldrb	r3, [r2, r3]
	uint8_t i,RxBank=0xFF;
    a0cc:	22ff      	movs	r2, #255	; 0xff
					if (RxBuffer[i].PayloadLen == 0)
    a0ce:	2b00      	cmp	r3, #0
    a0d0:	d043      	beq.n	a15a <radioCallback+0xd2>
				RxBuffer[RxBank].PayloadLen = callbackRx->RX.bufferLength;
    a0d2:	0016      	movs	r6, r2
    a0d4:	7a2c      	ldrb	r4, [r5, #8]
    a0d6:	0213      	lsls	r3, r2, #8
    a0d8:	189a      	adds	r2, r3, r2
    a0da:	4b2f      	ldr	r3, [pc, #188]	; (a198 <radioCallback+0x110>)
    a0dc:	54d4      	strb	r4, [r2, r3]
				if (RxBuffer[RxBank].PayloadLen < (RX_PACKET_SIZE - 4))			
    a0de:	2cfa      	cmp	r4, #250	; 0xfa
    a0e0:	d80d      	bhi.n	a0fe <radioCallback+0x76>
    a0e2:	2300      	movs	r3, #0
						RxBuffer[RxBank].Payload[i] = callbackRx->RX.buffer[i];
    a0e4:	0232      	lsls	r2, r6, #8
    a0e6:	1992      	adds	r2, r2, r6
    a0e8:	482b      	ldr	r0, [pc, #172]	; (a198 <radioCallback+0x110>)
    a0ea:	1880      	adds	r0, r0, r2
    a0ec:	686a      	ldr	r2, [r5, #4]
    a0ee:	5cd1      	ldrb	r1, [r2, r3]
    a0f0:	18c2      	adds	r2, r0, r3
    a0f2:	7091      	strb	r1, [r2, #2]
					for (i = 0; i <= callbackRx->RX.bufferLength; i++)
    a0f4:	3301      	adds	r3, #1
    a0f6:	b2db      	uxtb	r3, r3
    a0f8:	7a2a      	ldrb	r2, [r5, #8]
    a0fa:	429a      	cmp	r2, r3
    a0fc:	d2f6      	bcs.n	a0ec <radioCallback+0x64>
				RxBuffer[RxBank].PayloadLen +=4;
    a0fe:	4b26      	ldr	r3, [pc, #152]	; (a198 <radioCallback+0x110>)
    a100:	0232      	lsls	r2, r6, #8
    a102:	1992      	adds	r2, r2, r6
    a104:	3404      	adds	r4, #4
    a106:	54d4      	strb	r4, [r2, r3]
				rssi_readVal = radioConfiguration.packetRSSI;
    a108:	2156      	movs	r1, #86	; 0x56
    a10a:	4826      	ldr	r0, [pc, #152]	; (a1a4 <radioCallback+0x11c>)
    a10c:	5e41      	ldrsh	r1, [r0, r1]
    a10e:	4668      	mov	r0, sp
    a110:	8041      	strh	r1, [r0, #2]
				RxBuffer[RxBank].radioRSSI = rssi_readVal;						
    a112:	189b      	adds	r3, r3, r2
    a114:	7059      	strb	r1, [r3, #1]
				if(RxBuffer[RxBank].Payload[0] & 0x20)
    a116:	789b      	ldrb	r3, [r3, #2]
    a118:	069b      	lsls	r3, r3, #26
    a11a:	d524      	bpl.n	a166 <radioCallback+0xde>
					RadioReceiveParam.action = RECEIVE_STOP;					
    a11c:	a801      	add	r0, sp, #4
    a11e:	2301      	movs	r3, #1
    a120:	7003      	strb	r3, [r0, #0]
					RadioReceiveParam.rxWindowSize = 0;
    a122:	2300      	movs	r3, #0
    a124:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&RadioReceiveParam);
    a126:	4b20      	ldr	r3, [pc, #128]	; (a1a8 <radioCallback+0x120>)
    a128:	4798      	blx	r3
    a12a:	e00f      	b.n	a14c <radioCallback+0xc4>
			if((!AckReqData)||(callbackRx->status != ERR_NONE))
    a12c:	4b1f      	ldr	r3, [pc, #124]	; (a1ac <radioCallback+0x124>)
    a12e:	781b      	ldrb	r3, [r3, #0]
    a130:	2b00      	cmp	r3, #0
    a132:	d002      	beq.n	a13a <radioCallback+0xb2>
    a134:	782b      	ldrb	r3, [r5, #0]
    a136:	2b00      	cmp	r3, #0
    a138:	d00a      	beq.n	a150 <radioCallback+0xc8>
				PHY_DataConf(callbackRx->status); // Need to convert LoRa status to MiWi status
    a13a:	7828      	ldrb	r0, [r5, #0]
    a13c:	4b1c      	ldr	r3, [pc, #112]	; (a1b0 <radioCallback+0x128>)
    a13e:	4798      	blx	r3
			RadioReceiveParam.action = RECEIVE_START;
    a140:	a801      	add	r0, sp, #4
    a142:	2300      	movs	r3, #0
    a144:	7003      	strb	r3, [r0, #0]
			RadioReceiveParam.rxWindowSize = 0;
    a146:	8043      	strh	r3, [r0, #2]
			RADIO_Receive(&RadioReceiveParam);
    a148:	4b17      	ldr	r3, [pc, #92]	; (a1a8 <radioCallback+0x120>)
    a14a:	4798      	blx	r3
}
    a14c:	b002      	add	sp, #8
    a14e:	bd70      	pop	{r4, r5, r6, pc}
				DataTxAckTimer.Val = MiWi_TickGet();
    a150:	4b18      	ldr	r3, [pc, #96]	; (a1b4 <radioCallback+0x12c>)
    a152:	4798      	blx	r3
    a154:	4b18      	ldr	r3, [pc, #96]	; (a1b8 <radioCallback+0x130>)
    a156:	6018      	str	r0, [r3, #0]
    a158:	e7f2      	b.n	a140 <radioCallback+0xb8>
				for (i = 0; i < BANK_SIZE; i++)
    a15a:	3afc      	subs	r2, #252	; 0xfc
    a15c:	e7b9      	b.n	a0d2 <radioCallback+0x4a>
    a15e:	2201      	movs	r2, #1
    a160:	e7b7      	b.n	a0d2 <radioCallback+0x4a>
    a162:	2202      	movs	r2, #2
    a164:	e7b5      	b.n	a0d2 <radioCallback+0x4a>
					RadioReceiveParam.action = RECEIVE_START;
    a166:	a801      	add	r0, sp, #4
    a168:	2300      	movs	r3, #0
    a16a:	7003      	strb	r3, [r0, #0]
					RadioReceiveParam.rxWindowSize = 0;
    a16c:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&RadioReceiveParam);	
    a16e:	4b0e      	ldr	r3, [pc, #56]	; (a1a8 <radioCallback+0x120>)
    a170:	4798      	blx	r3
    a172:	e7eb      	b.n	a14c <radioCallback+0xc4>
				RadioReceiveParam.action = RECEIVE_START;
    a174:	ac01      	add	r4, sp, #4
    a176:	2300      	movs	r3, #0
    a178:	7023      	strb	r3, [r4, #0]
				RadioReceiveParam.rxWindowSize = 0;
    a17a:	8063      	strh	r3, [r4, #2]
				PHY_DataConf(FAILURE);											
    a17c:	2001      	movs	r0, #1
    a17e:	4b0c      	ldr	r3, [pc, #48]	; (a1b0 <radioCallback+0x128>)
    a180:	4798      	blx	r3
				RADIO_Receive(&RadioReceiveParam);
    a182:	0020      	movs	r0, r4
    a184:	4b08      	ldr	r3, [pc, #32]	; (a1a8 <radioCallback+0x120>)
    a186:	4798      	blx	r3
}
    a188:	e7e0      	b.n	a14c <radioCallback+0xc4>
    a18a:	46c0      	nop			; (mov r8, r8)
    a18c:	2000224f 	.word	0x2000224f
    a190:	0000d3ad 	.word	0x0000d3ad
    a194:	00018044 	.word	0x00018044
    a198:	20002258 	.word	0x20002258
    a19c:	00000202 	.word	0x00000202
    a1a0:	00000303 	.word	0x00000303
    a1a4:	20002d78 	.word	0x20002d78
    a1a8:	0000eeb9 	.word	0x0000eeb9
    a1ac:	20000273 	.word	0x20000273
    a1b0:	00009795 	.word	0x00009795
    a1b4:	0000ba15 	.word	0x0000ba15
    a1b8:	20002960 	.word	0x20002960

0000a1bc <PHY_Init>:
{
    a1bc:	b510      	push	{r4, lr}
    HAL_RadioInit();
    a1be:	4b06      	ldr	r3, [pc, #24]	; (a1d8 <PHY_Init+0x1c>)
    a1c0:	4798      	blx	r3
    AESInit();	
    a1c2:	4b06      	ldr	r3, [pc, #24]	; (a1dc <PHY_Init+0x20>)
    a1c4:	4798      	blx	r3
	RADIO_Init();
    a1c6:	4b06      	ldr	r3, [pc, #24]	; (a1e0 <PHY_Init+0x24>)
    a1c8:	4798      	blx	r3
	RADIO_SetAttr(RADIO_CALLBACK, (void *)&radioCallback);
    a1ca:	4906      	ldr	r1, [pc, #24]	; (a1e4 <PHY_Init+0x28>)
    a1cc:	201a      	movs	r0, #26
    a1ce:	4b06      	ldr	r3, [pc, #24]	; (a1e8 <PHY_Init+0x2c>)
    a1d0:	4798      	blx	r3
   RADIO_InitDefaultAttributes();				
    a1d2:	4b06      	ldr	r3, [pc, #24]	; (a1ec <PHY_Init+0x30>)
    a1d4:	4798      	blx	r3
}
    a1d6:	bd10      	pop	{r4, pc}
    a1d8:	0000bdc9 	.word	0x0000bdc9
    a1dc:	0000c871 	.word	0x0000c871
    a1e0:	0000dea9 	.word	0x0000dea9
    a1e4:	0000a089 	.word	0x0000a089
    a1e8:	0000dcad 	.word	0x0000dcad
    a1ec:	0000ecc5 	.word	0x0000ecc5

0000a1f0 <PHY_SetRxState>:
{
    a1f0:	b510      	push	{r4, lr}

/*************************************************************************//**
*****************************************************************************/
static void phySetRxState(void)
{
	RADIO_RxHandler();
    a1f2:	4b01      	ldr	r3, [pc, #4]	; (a1f8 <PHY_SetRxState+0x8>)
    a1f4:	4798      	blx	r3
}
    a1f6:	bd10      	pop	{r4, pc}
    a1f8:	0000ebad 	.word	0x0000ebad

0000a1fc <PHY_SetPanId>:
{
    a1fc:	b082      	sub	sp, #8
	DevPanId[0]=d[0];
    a1fe:	b2c2      	uxtb	r2, r0
    a200:	4b02      	ldr	r3, [pc, #8]	; (a20c <PHY_SetPanId+0x10>)
    a202:	701a      	strb	r2, [r3, #0]
	DevPanId[1]=d[1];
    a204:	0a00      	lsrs	r0, r0, #8
    a206:	7058      	strb	r0, [r3, #1]
}
    a208:	b002      	add	sp, #8
    a20a:	4770      	bx	lr
    a20c:	2000265c 	.word	0x2000265c

0000a210 <PHY_SetShortAddr>:
{
    a210:	b082      	sub	sp, #8
	DevShortAddress[0]=d[0];
    a212:	b2c2      	uxtb	r2, r0
    a214:	4b02      	ldr	r3, [pc, #8]	; (a220 <PHY_SetShortAddr+0x10>)
    a216:	701a      	strb	r2, [r3, #0]
	DevShortAddress[1]=d[1];
    a218:	0a00      	lsrs	r0, r0, #8
    a21a:	7058      	strb	r0, [r3, #1]
}
    a21c:	b002      	add	sp, #8
    a21e:	4770      	bx	lr
    a220:	20002660 	.word	0x20002660

0000a224 <PHY_SetTxPower>:
{
    a224:	b500      	push	{lr}
    a226:	b083      	sub	sp, #12
	reg = txPower;
    a228:	466b      	mov	r3, sp
    a22a:	71d8      	strb	r0, [r3, #7]
	if(reg > 15)
    a22c:	280f      	cmp	r0, #15
    a22e:	d813      	bhi.n	a258 <PHY_SetTxPower+0x34>
		PaBoost = DISABLED;
    a230:	466b      	mov	r3, sp
    a232:	1d99      	adds	r1, r3, #6
    a234:	2300      	movs	r3, #0
    a236:	700b      	strb	r3, [r1, #0]
		RADIO_SetAttr(PABOOST, (void *)&PaBoost);
    a238:	2008      	movs	r0, #8
    a23a:	4b0b      	ldr	r3, [pc, #44]	; (a268 <PHY_SetTxPower+0x44>)
    a23c:	4798      	blx	r3
		reg &= 0x0F ;
    a23e:	466b      	mov	r3, sp
    a240:	1dda      	adds	r2, r3, #7
    a242:	79d9      	ldrb	r1, [r3, #7]
    a244:	230f      	movs	r3, #15
    a246:	400b      	ands	r3, r1
    a248:	7013      	strb	r3, [r2, #0]
	RADIO_SetAttr(OUTPUT_POWER, &reg);
    a24a:	466b      	mov	r3, sp
    a24c:	1dd9      	adds	r1, r3, #7
    a24e:	2004      	movs	r0, #4
    a250:	4b05      	ldr	r3, [pc, #20]	; (a268 <PHY_SetTxPower+0x44>)
    a252:	4798      	blx	r3
}
    a254:	b003      	add	sp, #12
    a256:	bd00      	pop	{pc}
		PaBoost = ENABLED;
    a258:	466b      	mov	r3, sp
    a25a:	1d99      	adds	r1, r3, #6
    a25c:	2301      	movs	r3, #1
    a25e:	700b      	strb	r3, [r1, #0]
		RADIO_SetAttr(PABOOST, (void *)&PaBoost);
    a260:	2008      	movs	r0, #8
    a262:	4b01      	ldr	r3, [pc, #4]	; (a268 <PHY_SetTxPower+0x44>)
    a264:	4798      	blx	r3
    a266:	e7f0      	b.n	a24a <PHY_SetTxPower+0x26>
    a268:	0000dcad 	.word	0x0000dcad

0000a26c <PHY_GetAttribute>:
{
    a26c:	b510      	push	{r4, lr}
	switch(RadioAttr)
    a26e:	2807      	cmp	r0, #7
    a270:	d003      	beq.n	a27a <PHY_GetAttribute+0xe>
    a272:	2816      	cmp	r0, #22
    a274:	d001      	beq.n	a27a <PHY_GetAttribute+0xe>
			Status = ERR_INVALID_REQ;
    a276:	2003      	movs	r0, #3
}
    a278:	bd10      	pop	{r4, pc}
			Status = RADIO_GetAttr(RadioAttr,AttrVal);
    a27a:	4b01      	ldr	r3, [pc, #4]	; (a280 <PHY_GetAttribute+0x14>)
    a27c:	4798      	blx	r3
			break;
    a27e:	e7fb      	b.n	a278 <PHY_GetAttribute+0xc>
    a280:	0000dbbd 	.word	0x0000dbbd

0000a284 <PHY_Wakeup>:
{
    a284:	b510      	push	{r4, lr}
	if (PHY_STATE_SLEEP == phyState)
    a286:	4b0c      	ldr	r3, [pc, #48]	; (a2b8 <PHY_Wakeup+0x34>)
    a288:	781b      	ldrb	r3, [r3, #0]
    a28a:	2b02      	cmp	r3, #2
    a28c:	d000      	beq.n	a290 <PHY_Wakeup+0xc>
}
    a28e:	bd10      	pop	{r4, pc}
		HAL_TCXOPowerOn();
    a290:	4b0a      	ldr	r3, [pc, #40]	; (a2bc <PHY_Wakeup+0x38>)
    a292:	4798      	blx	r3
		HAL_RadioInit();
    a294:	4b0a      	ldr	r3, [pc, #40]	; (a2c0 <PHY_Wakeup+0x3c>)
    a296:	4798      	blx	r3
		RADIO_Reset();
    a298:	4b0a      	ldr	r3, [pc, #40]	; (a2c4 <PHY_Wakeup+0x40>)
    a29a:	4798      	blx	r3
		Radio_WriteMode(MODE_STANDBY, radioConfiguration.modulation, 0);
    a29c:	2334      	movs	r3, #52	; 0x34
    a29e:	4a0a      	ldr	r2, [pc, #40]	; (a2c8 <PHY_Wakeup+0x44>)
    a2a0:	5cd1      	ldrb	r1, [r2, r3]
    a2a2:	2200      	movs	r2, #0
    a2a4:	2001      	movs	r0, #1
    a2a6:	4b09      	ldr	r3, [pc, #36]	; (a2cc <PHY_Wakeup+0x48>)
    a2a8:	4798      	blx	r3
	RADIO_RxHandler();
    a2aa:	4b09      	ldr	r3, [pc, #36]	; (a2d0 <PHY_Wakeup+0x4c>)
    a2ac:	4798      	blx	r3
	 	phyState = PHY_STATE_IDLE;
    a2ae:	2201      	movs	r2, #1
    a2b0:	4b01      	ldr	r3, [pc, #4]	; (a2b8 <PHY_Wakeup+0x34>)
    a2b2:	701a      	strb	r2, [r3, #0]
}
    a2b4:	e7eb      	b.n	a28e <PHY_Wakeup+0xa>
    a2b6:	46c0      	nop			; (mov r8, r8)
    a2b8:	20000285 	.word	0x20000285
    a2bc:	0000c109 	.word	0x0000c109
    a2c0:	0000bdc9 	.word	0x0000bdc9
    a2c4:	0000bf81 	.word	0x0000bf81
    a2c8:	20002d78 	.word	0x20002d78
    a2cc:	0000d1e9 	.word	0x0000d1e9
    a2d0:	0000ebad 	.word	0x0000ebad

0000a2d4 <PHY_SetChannel>:
{
    a2d4:	b510      	push	{r4, lr}
	phyChannel = channel;
    a2d6:	4b06      	ldr	r3, [pc, #24]	; (a2f0 <PHY_SetChannel+0x1c>)
    a2d8:	7018      	strb	r0, [r3, #0]
	if (PHY_STATE_SLEEP == phyState)
    a2da:	4b06      	ldr	r3, [pc, #24]	; (a2f4 <PHY_SetChannel+0x20>)
    a2dc:	781b      	ldrb	r3, [r3, #0]
    a2de:	2b02      	cmp	r3, #2
    a2e0:	d002      	beq.n	a2e8 <PHY_SetChannel+0x14>
	phySetChannel();
    a2e2:	4b05      	ldr	r3, [pc, #20]	; (a2f8 <PHY_SetChannel+0x24>)
    a2e4:	4798      	blx	r3
}
    a2e6:	bd10      	pop	{r4, pc}
		PHY_Wakeup();
    a2e8:	4b04      	ldr	r3, [pc, #16]	; (a2fc <PHY_SetChannel+0x28>)
    a2ea:	4798      	blx	r3
    a2ec:	e7f9      	b.n	a2e2 <PHY_SetChannel+0xe>
    a2ee:	46c0      	nop			; (mov r8, r8)
    a2f0:	20000284 	.word	0x20000284
    a2f4:	20000285 	.word	0x20000285
    a2f8:	00009f51 	.word	0x00009f51
    a2fc:	0000a285 	.word	0x0000a285

0000a300 <PHY_DataReq>:
{
    a300:	b500      	push	{lr}
    a302:	b085      	sub	sp, #20
		RadioTransmitParam.bufferLen = data[0];
    a304:	7803      	ldrb	r3, [r0, #0]
    a306:	aa02      	add	r2, sp, #8
    a308:	7013      	strb	r3, [r2, #0]
		for (count = 0; count < data[0]; count++)
    a30a:	2b00      	cmp	r3, #0
    a30c:	d009      	beq.n	a322 <PHY_DataReq+0x22>
    a30e:	2300      	movs	r3, #0
			DataRequestBuffer[count] = data[1+count];
    a310:	4912      	ldr	r1, [pc, #72]	; (a35c <PHY_DataReq+0x5c>)
    a312:	18c2      	adds	r2, r0, r3
    a314:	7852      	ldrb	r2, [r2, #1]
    a316:	54ca      	strb	r2, [r1, r3]
		for (count = 0; count < data[0]; count++)
    a318:	3301      	adds	r3, #1
    a31a:	b2db      	uxtb	r3, r3
    a31c:	7802      	ldrb	r2, [r0, #0]
    a31e:	429a      	cmp	r2, r3
    a320:	d8f7      	bhi.n	a312 <PHY_DataReq+0x12>
		RadioTransmitParam.bufferPtr = (uint8_t *)&DataRequestBuffer;
    a322:	4b0e      	ldr	r3, [pc, #56]	; (a35c <PHY_DataReq+0x5c>)
    a324:	9303      	str	r3, [sp, #12]
		RadioSetState(RADIO_STATE_IDLE);
    a326:	2001      	movs	r0, #1
    a328:	4b0d      	ldr	r3, [pc, #52]	; (a360 <PHY_DataReq+0x60>)
    a32a:	4798      	blx	r3
		phySetChannel();
    a32c:	4b0d      	ldr	r3, [pc, #52]	; (a364 <PHY_DataReq+0x64>)
    a32e:	4798      	blx	r3
		localRadioLBTParams.lbtScanPeriod = 5 ;
    a330:	2305      	movs	r3, #5
    a332:	466a      	mov	r2, sp
    a334:	8013      	strh	r3, [r2, #0]
		localRadioLBTParams.lbtThreshold = -90 ;
    a336:	3b5f      	subs	r3, #95	; 0x5f
    a338:	8053      	strh	r3, [r2, #2]
		localRadioLBTParams.lbtNumOfSamples = 5;
    a33a:	2305      	movs	r3, #5
    a33c:	7113      	strb	r3, [r2, #4]
		localRadioLBTParams.lbtTransmitOn = 0;
    a33e:	2300      	movs	r3, #0
    a340:	7153      	strb	r3, [r2, #5]
		status = RADIO_SetAttr(RADIO_LBT_PARAMS, &localRadioLBTParams);
    a342:	4669      	mov	r1, sp
    a344:	201d      	movs	r0, #29
    a346:	4b08      	ldr	r3, [pc, #32]	; (a368 <PHY_DataReq+0x68>)
    a348:	4798      	blx	r3
		status = RADIO_Transmit (&RadioTransmitParam);
    a34a:	a802      	add	r0, sp, #8
    a34c:	4b07      	ldr	r3, [pc, #28]	; (a36c <PHY_DataReq+0x6c>)
    a34e:	4798      	blx	r3
		return (!status);							
    a350:	4243      	negs	r3, r0
    a352:	4158      	adcs	r0, r3
    a354:	b2c0      	uxtb	r0, r0
}
    a356:	b005      	add	sp, #20
    a358:	bd00      	pop	{pc}
    a35a:	46c0      	nop			; (mov r8, r8)
    a35c:	20002150 	.word	0x20002150
    a360:	0000e5b5 	.word	0x0000e5b5
    a364:	00009f51 	.word	0x00009f51
    a368:	0000dcad 	.word	0x0000dcad
    a36c:	0000e5dd 	.word	0x0000e5dd

0000a370 <PHY_RandomReq>:
{
    a370:	b510      	push	{r4, lr}
	rnd = RADIO_ReadRandom();
    a372:	4b03      	ldr	r3, [pc, #12]	; (a380 <PHY_RandomReq+0x10>)
    a374:	4798      	blx	r3
    a376:	0004      	movs	r4, r0
	RADIO_RxHandler();
    a378:	4b02      	ldr	r3, [pc, #8]	; (a384 <PHY_RandomReq+0x14>)
    a37a:	4798      	blx	r3
}
    a37c:	0020      	movs	r0, r4
    a37e:	bd10      	pop	{r4, pc}
    a380:	0000d31d 	.word	0x0000d31d
    a384:	0000ebad 	.word	0x0000ebad

0000a388 <PHY_EncryptReq>:
{	
    a388:	b510      	push	{r4, lr}
	AESEncode(text,key);
    a38a:	4b01      	ldr	r3, [pc, #4]	; (a390 <PHY_EncryptReq+0x8>)
    a38c:	4798      	blx	r3
}
    a38e:	bd10      	pop	{r4, pc}
    a390:	0000c795 	.word	0x0000c795

0000a394 <PHY_SetIEEEAddr>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_SetIEEEAddr(uint8_t *ieee_addr)
{
    a394:	2300      	movs	r3, #0
	uint8_t *ptr_to_reg = ieee_addr;

	for (uint8_t i = 0; i < 8; i++)
	{
		DevIEEEaddr[i] = ptr_to_reg[i];
    a396:	4903      	ldr	r1, [pc, #12]	; (a3a4 <PHY_SetIEEEAddr+0x10>)
    a398:	5cc2      	ldrb	r2, [r0, r3]
    a39a:	54ca      	strb	r2, [r1, r3]
    a39c:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < 8; i++)
    a39e:	2b08      	cmp	r3, #8
    a3a0:	d1fa      	bne.n	a398 <PHY_SetIEEEAddr+0x4>
	}
}
    a3a2:	4770      	bx	lr
    a3a4:	20002250 	.word	0x20002250

0000a3a8 <PHY_TaskHandler>:
    if (PHY_STATE_SLEEP == phyState)
    {
        return;
    }
	// Handled in DIO interrupts 
}
    a3a8:	4770      	bx	lr
    a3aa:	Address 0x0000a3aa is out of bounds.


0000a3ac <CommandConfCallback>:

bool CheckForData(void);

/************************ FUNCTIONS ********************************/
void CommandConfCallback(uint8_t msgConfHandle, miwi_status_t status, uint8_t* msgPointer)
{
    a3ac:	b510      	push	{r4, lr}
	#if defined (ENABLE_CONSOLE)
		//printf("\r\n  Command Conf : Handle %d & Status %02X  ",msgConfHandle , status );
	#endif
    MiMem_Free(msgPointer);
    a3ae:	0010      	movs	r0, r2
    a3b0:	4b01      	ldr	r3, [pc, #4]	; (a3b8 <CommandConfCallback+0xc>)
    a3b2:	4798      	blx	r3
}
    a3b4:	bd10      	pop	{r4, pc}
    a3b6:	46c0      	nop			; (mov r8, r8)
    a3b8:	0000b891 	.word	0x0000b891

0000a3bc <Total_Connections>:
{
    a3bc:	2200      	movs	r2, #0
    uint8_t count=0 , i;
    a3be:	2000      	movs	r0, #0
        if (ConnectionTable[i].status.bits.isValid)
    a3c0:	4907      	ldr	r1, [pc, #28]	; (a3e0 <Total_Connections+0x24>)
    a3c2:	e002      	b.n	a3ca <Total_Connections+0xe>
    a3c4:	3201      	adds	r2, #1
    for (i=0;i<CONNECTION_SIZE;i++)
    a3c6:	2a05      	cmp	r2, #5
    a3c8:	d009      	beq.n	a3de <Total_Connections+0x22>
        if (ConnectionTable[i].status.bits.isValid)
    a3ca:	0093      	lsls	r3, r2, #2
    a3cc:	189b      	adds	r3, r3, r2
    a3ce:	005b      	lsls	r3, r3, #1
    a3d0:	18cb      	adds	r3, r1, r3
    a3d2:	7a1b      	ldrb	r3, [r3, #8]
    a3d4:	09db      	lsrs	r3, r3, #7
    a3d6:	d0f5      	beq.n	a3c4 <Total_Connections+0x8>
            count++;
    a3d8:	3001      	adds	r0, #1
    a3da:	b2c0      	uxtb	r0, r0
    a3dc:	e7f2      	b.n	a3c4 <Total_Connections+0x8>
}
    a3de:	4770      	bx	lr
    a3e0:	20002668 	.word	0x20002668

0000a3e4 <IndirectPacket>:
							INPUT uint8_t* msgPtr,
							INPUT uint8_t msghandle,
							INPUT bool ackReq,
                            DataConf_callback_t ConfCallback)
    #endif                            
    { 
    a3e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a3e6:	46de      	mov	lr, fp
    a3e8:	4657      	mov	r7, sl
    a3ea:	464e      	mov	r6, r9
    a3ec:	4645      	mov	r5, r8
    a3ee:	b5e0      	push	{r5, r6, r7, lr}
    a3f0:	b083      	sub	sp, #12
    a3f2:	466c      	mov	r4, sp
    a3f4:	8061      	strh	r1, [r4, #2]
    a3f6:	ac0c      	add	r4, sp, #48	; 0x30
    a3f8:	7827      	ldrb	r7, [r4, #0]
    a3fa:	ac0d      	add	r4, sp, #52	; 0x34
    a3fc:	7826      	ldrb	r6, [r4, #0]
    a3fe:	ac0f      	add	r4, sp, #60	; 0x3c
    a400:	7825      	ldrb	r5, [r4, #0]
    a402:	ac10      	add	r4, sp, #64	; 0x40
    a404:	7821      	ldrb	r1, [r4, #0]
    a406:	4688      	mov	r8, r1
        uint8_t i;
        
        #ifndef ENABLE_BROADCAST
            if( Broadcast )
    a408:	2800      	cmp	r0, #0
    a40a:	d000      	beq.n	a40e <IndirectPacket+0x2a>
    a40c:	e07e      	b.n	a50c <IndirectPacket+0x128>

        // loop through the available indirect message buffer and locate
        // the empty message slot
        for(i = 0; i < INDIRECT_MESSAGE_SIZE; i++)
        {
            if( indirectMessages[i].flags.bits.isValid == 0 )
    a40e:	4c40      	ldr	r4, [pc, #256]	; (a510 <IndirectPacket+0x12c>)
    a410:	7ba4      	ldrb	r4, [r4, #14]
    a412:	07e1      	lsls	r1, r4, #31
    a414:	d400      	bmi.n	a418 <IndirectPacket+0x34>
    a416:	e077      	b.n	a508 <IndirectPacket+0x124>
    a418:	2491      	movs	r4, #145	; 0x91
    a41a:	0064      	lsls	r4, r4, #1
    a41c:	493c      	ldr	r1, [pc, #240]	; (a510 <IndirectPacket+0x12c>)
    a41e:	5d0c      	ldrb	r4, [r1, r4]
    a420:	07e1      	lsls	r1, r4, #31
    a422:	d506      	bpl.n	a432 <IndirectPacket+0x4e>
				indirectMessages[i].TickStart.Val = MiWi_TickGet();
                return true;
            }
        }
        return false;
    }
    a424:	b003      	add	sp, #12
    a426:	bc3c      	pop	{r2, r3, r4, r5}
    a428:	4690      	mov	r8, r2
    a42a:	4699      	mov	r9, r3
    a42c:	46a2      	mov	sl, r4
    a42e:	46ab      	mov	fp, r5
    a430:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( indirectMessages[i].flags.bits.isValid == 0 )
    a432:	2401      	movs	r4, #1
                indirectMessages[i].flags.bits.isValid          = true;
    a434:	208a      	movs	r0, #138	; 0x8a
    a436:	0040      	lsls	r0, r0, #1
    a438:	4360      	muls	r0, r4
    a43a:	4935      	ldr	r1, [pc, #212]	; (a510 <IndirectPacket+0x12c>)
    a43c:	468c      	mov	ip, r1
    a43e:	4484      	add	ip, r0
    a440:	2108      	movs	r1, #8
    a442:	4461      	add	r1, ip
    a444:	4689      	mov	r9, r1
    a446:	7989      	ldrb	r1, [r1, #6]
    a448:	2001      	movs	r0, #1
    a44a:	4301      	orrs	r1, r0
    a44c:	468a      	mov	sl, r1
                indirectMessages[i].flags.bits.isCommand        = isCommand;
    a44e:	2001      	movs	r0, #1
    a450:	4003      	ands	r3, r0
    a452:	0099      	lsls	r1, r3, #2
    a454:	9101      	str	r1, [sp, #4]
    a456:	21fd      	movs	r1, #253	; 0xfd
    a458:	468b      	mov	fp, r1
    a45a:	4651      	mov	r1, sl
    a45c:	465b      	mov	r3, fp
    a45e:	4019      	ands	r1, r3
    a460:	3bf9      	subs	r3, #249	; 0xf9
    a462:	4399      	bics	r1, r3
                indirectMessages[i].flags.bits.isSecured        = SecurityEnabled;
    a464:	4007      	ands	r7, r0
    a466:	00ff      	lsls	r7, r7, #3
    a468:	000b      	movs	r3, r1
    a46a:	9901      	ldr	r1, [sp, #4]
    a46c:	4319      	orrs	r1, r3
    a46e:	000b      	movs	r3, r1
    a470:	2108      	movs	r1, #8
    a472:	438b      	bics	r3, r1
				indirectMessages[i].flags.bits.ackReq           = ackReq;
    a474:	4641      	mov	r1, r8
    a476:	4008      	ands	r0, r1
    a478:	0101      	lsls	r1, r0, #4
    a47a:	433b      	orrs	r3, r7
    a47c:	0018      	movs	r0, r3
    a47e:	2310      	movs	r3, #16
    a480:	4398      	bics	r0, r3
    a482:	4308      	orrs	r0, r1
    a484:	464b      	mov	r3, r9
    a486:	7198      	strb	r0, [r3, #6]
                    indirectMessages[i].DestPANID.Val           = DestinationPANID.Val;
    a488:	4663      	mov	r3, ip
    a48a:	4669      	mov	r1, sp
    a48c:	8849      	ldrh	r1, [r1, #2]
    a48e:	8099      	strh	r1, [r3, #4]
                if( DestinationAddress != NULL )
    a490:	2a00      	cmp	r2, #0
    a492:	d00d      	beq.n	a4b0 <IndirectPacket+0xcc>
    a494:	0013      	movs	r3, r2
    a496:	218a      	movs	r1, #138	; 0x8a
    a498:	0049      	lsls	r1, r1, #1
    a49a:	4361      	muls	r1, r4
    a49c:	3106      	adds	r1, #6
    a49e:	481c      	ldr	r0, [pc, #112]	; (a510 <IndirectPacket+0x12c>)
    a4a0:	1809      	adds	r1, r1, r0
    a4a2:	3208      	adds	r2, #8
                        indirectMessages[i].DestAddress.DestLongAddress[j] = DestinationAddress[j];
    a4a4:	7818      	ldrb	r0, [r3, #0]
    a4a6:	7008      	strb	r0, [r1, #0]
    a4a8:	3301      	adds	r3, #1
    a4aa:	3101      	adds	r1, #1
                    for(j = 0; j < MY_ADDRESS_LENGTH; j++)
    a4ac:	4293      	cmp	r3, r2
    a4ae:	d1f9      	bne.n	a4a4 <IndirectPacket+0xc0>
                indirectMessages[i].PayLoadSize = msgLen;
    a4b0:	228a      	movs	r2, #138	; 0x8a
    a4b2:	0052      	lsls	r2, r2, #1
    a4b4:	4362      	muls	r2, r4
    a4b6:	4b16      	ldr	r3, [pc, #88]	; (a510 <IndirectPacket+0x12c>)
    a4b8:	189b      	adds	r3, r3, r2
    a4ba:	73de      	strb	r6, [r3, #15]
                for(j = 0; j < msgLen; j++)
    a4bc:	2e00      	cmp	r6, #0
    a4be:	d011      	beq.n	a4e4 <IndirectPacket+0x100>
    a4c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a4c2:	228a      	movs	r2, #138	; 0x8a
    a4c4:	0052      	lsls	r2, r2, #1
    a4c6:	4362      	muls	r2, r4
    a4c8:	3210      	adds	r2, #16
    a4ca:	4911      	ldr	r1, [pc, #68]	; (a510 <IndirectPacket+0x12c>)
    a4cc:	1852      	adds	r2, r2, r1
    a4ce:	3e01      	subs	r6, #1
    a4d0:	b2f0      	uxtb	r0, r6
    a4d2:	3001      	adds	r0, #1
    a4d4:	469c      	mov	ip, r3
    a4d6:	4460      	add	r0, ip
                    indirectMessages[i].PayLoad[j] = msgPtr[j];
    a4d8:	7819      	ldrb	r1, [r3, #0]
    a4da:	7011      	strb	r1, [r2, #0]
    a4dc:	3301      	adds	r3, #1
    a4de:	3201      	adds	r2, #1
                for(j = 0; j < msgLen; j++)
    a4e0:	4283      	cmp	r3, r0
    a4e2:	d1f9      	bne.n	a4d8 <IndirectPacket+0xf4>
                indirectMessages[i].indirectDataHandle = msghandle;
    a4e4:	4e0a      	ldr	r6, [pc, #40]	; (a510 <IndirectPacket+0x12c>)
    a4e6:	238a      	movs	r3, #138	; 0x8a
    a4e8:	005b      	lsls	r3, r3, #1
    a4ea:	435c      	muls	r4, r3
    a4ec:	1933      	adds	r3, r6, r4
    a4ee:	001a      	movs	r2, r3
    a4f0:	3210      	adds	r2, #16
    a4f2:	32ff      	adds	r2, #255	; 0xff
    a4f4:	7015      	strb	r5, [r2, #0]
				indirectMessages[i].indirectConfCallback = ConfCallback;
    a4f6:	3311      	adds	r3, #17
    a4f8:	33ff      	adds	r3, #255	; 0xff
    a4fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
    a4fc:	601a      	str	r2, [r3, #0]
				indirectMessages[i].TickStart.Val = MiWi_TickGet();
    a4fe:	4b05      	ldr	r3, [pc, #20]	; (a514 <IndirectPacket+0x130>)
    a500:	4798      	blx	r3
    a502:	51a0      	str	r0, [r4, r6]
                return true;
    a504:	2001      	movs	r0, #1
    a506:	e78d      	b.n	a424 <IndirectPacket+0x40>
            if( indirectMessages[i].flags.bits.isValid == 0 )
    a508:	2400      	movs	r4, #0
    a50a:	e793      	b.n	a434 <IndirectPacket+0x50>
                return false;
    a50c:	2000      	movs	r0, #0
    a50e:	e789      	b.n	a424 <IndirectPacket+0x40>
    a510:	200026e0 	.word	0x200026e0
    a514:	0000ba15 	.word	0x0000ba15

0000a518 <SendPacket>:
                    INPUT uint8_t* msgPtr,
                    INPUT uint8_t msghandle,
					INPUT bool ackReq,
                    INPUT DataConf_callback_t ConfCallback)
#endif                                        
{ 
    a518:	b5f0      	push	{r4, r5, r6, r7, lr}
    a51a:	46ce      	mov	lr, r9
    a51c:	4647      	mov	r7, r8
    a51e:	b580      	push	{r7, lr}
    a520:	b08b      	sub	sp, #44	; 0x2c
    a522:	0005      	movs	r5, r0
    a524:	468c      	mov	ip, r1
    a526:	9205      	str	r2, [sp, #20]
    a528:	a812      	add	r0, sp, #72	; 0x48
    a52a:	7800      	ldrb	r0, [r0, #0]
    a52c:	ac13      	add	r4, sp, #76	; 0x4c
    a52e:	7826      	ldrb	r6, [r4, #0]
    a530:	ac15      	add	r4, sp, #84	; 0x54
    a532:	7827      	ldrb	r7, [r4, #0]
    a534:	ac16      	add	r4, sp, #88	; 0x58
    a536:	7822      	ldrb	r2, [r4, #0]
    MAC_TRANS_PARAM tParam;
    bool status;

    tParam.flags.Val = 0;
    a538:	2400      	movs	r4, #0
    a53a:	46a0      	mov	r8, r4
    a53c:	ac07      	add	r4, sp, #28
    a53e:	4641      	mov	r1, r8
    a540:	7021      	strb	r1, [r4, #0]
    //tParam.flags.bits.packetType = (isCommand) ? PACKET_TYPE_COMMAND : PACKET_TYPE_DATA;
	if(isCommand)
    a542:	2b00      	cmp	r3, #0
    a544:	d043      	beq.n	a5ce <SendPacket+0xb6>
		tParam.flags.bits.packetType = PACKET_TYPE_COMMAND;
    a546:	0023      	movs	r3, r4
    a548:	b2cc      	uxtb	r4, r1
    a54a:	2103      	movs	r1, #3
    a54c:	438c      	bics	r4, r1
    a54e:	2101      	movs	r1, #1
    a550:	4688      	mov	r8, r1
    a552:	4641      	mov	r1, r8
    a554:	430c      	orrs	r4, r1
    a556:	701c      	strb	r4, [r3, #0]
	else
		tParam.flags.bits.packetType = PACKET_TYPE_DATA;
   // tParam.flags.bits.ackReq = (Broadcast) ? 0 : ackReq;
   if(Broadcast)
    a558:	2d00      	cmp	r5, #0
    a55a:	d13e      	bne.n	a5da <SendPacket+0xc2>
   {
	tParam.flags.bits.ackReq = 0;
   }
   else
   {
	   tParam.flags.bits.ackReq = ackReq;
    a55c:	ac07      	add	r4, sp, #28
    a55e:	2301      	movs	r3, #1
    a560:	4013      	ands	r3, r2
    a562:	015a      	lsls	r2, r3, #5
    a564:	7823      	ldrb	r3, [r4, #0]
    a566:	2120      	movs	r1, #32
    a568:	438b      	bics	r3, r1
    a56a:	4313      	orrs	r3, r2
    a56c:	7023      	strb	r3, [r4, #0]
   }
    tParam.flags.bits.broadcast = Broadcast;
    a56e:	ac07      	add	r4, sp, #28
    a570:	2201      	movs	r2, #1
    a572:	0013      	movs	r3, r2
    a574:	402b      	ands	r3, r5
    a576:	009b      	lsls	r3, r3, #2
    a578:	4698      	mov	r8, r3
    a57a:	7823      	ldrb	r3, [r4, #0]
    a57c:	2104      	movs	r1, #4
    a57e:	438b      	bics	r3, r1
    tParam.flags.bits.secEn = SecurityEnabled;
    a580:	4010      	ands	r0, r2
    a582:	00c0      	lsls	r0, r0, #3
    a584:	4641      	mov	r1, r8
    a586:	430b      	orrs	r3, r1
    a588:	2108      	movs	r1, #8
    a58a:	438b      	bics	r3, r1
    #if defined(IEEE_802_15_4)
        tParam.altSrcAddr = 0;
    a58c:	2100      	movs	r1, #0
    a58e:	7261      	strb	r1, [r4, #9]
        tParam.altDestAddr = (Broadcast) ? true : false;
    a590:	7225      	strb	r5, [r4, #8]
    #endif
    
    #if defined(INFER_DEST_ADDRESS)
        tParam.flags.bits.destPrsnt = 0;
    #else
        tParam.flags.bits.destPrsnt = (Broadcast) ? 0:1;
    a592:	2101      	movs	r1, #1
    a594:	4688      	mov	r8, r1
    a596:	4641      	mov	r1, r8
    a598:	404d      	eors	r5, r1
    a59a:	4015      	ands	r5, r2
    a59c:	01ad      	lsls	r5, r5, #6
    a59e:	4318      	orrs	r0, r3
    a5a0:	2340      	movs	r3, #64	; 0x40
    a5a2:	4398      	bics	r0, r3
        else
        {
            tParam.flags.bits.sourcePrsnt = 0;
        }
    #else
        tParam.flags.bits.sourcePrsnt = 1;
    a5a4:	4328      	orrs	r0, r5
    a5a6:	3bc0      	subs	r3, #192	; 0xc0
    a5a8:	4318      	orrs	r0, r3
    a5aa:	7020      	strb	r0, [r4, #0]
    #endif
    
    tParam.DestAddress = DestinationAddress;

    #if defined(IEEE_802_15_4)
        tParam.DestPANID.Val = DestinationPANID.Val;
    a5ac:	4663      	mov	r3, ip
    a5ae:	8163      	strh	r3, [r4, #10]
    #endif

    status = MiMAC_SendPacket(tParam, msgPtr, msgLen, msghandle, ConfCallback);
    a5b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a5b2:	9302      	str	r3, [sp, #8]
    a5b4:	9701      	str	r7, [sp, #4]
    a5b6:	9600      	str	r6, [sp, #0]
    a5b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a5ba:	9807      	ldr	r0, [sp, #28]
    a5bc:	9905      	ldr	r1, [sp, #20]
    a5be:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a5c0:	4c09      	ldr	r4, [pc, #36]	; (a5e8 <SendPacket+0xd0>)
    a5c2:	47a0      	blx	r4
    
    return status;
}
    a5c4:	b00b      	add	sp, #44	; 0x2c
    a5c6:	bc0c      	pop	{r2, r3}
    a5c8:	4690      	mov	r8, r2
    a5ca:	4699      	mov	r9, r3
    a5cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tParam.flags.bits.packetType = PACKET_TYPE_DATA;
    a5ce:	ab07      	add	r3, sp, #28
    a5d0:	781c      	ldrb	r4, [r3, #0]
    a5d2:	2103      	movs	r1, #3
    a5d4:	438c      	bics	r4, r1
    a5d6:	701c      	strb	r4, [r3, #0]
    a5d8:	e7be      	b.n	a558 <SendPacket+0x40>
	tParam.flags.bits.ackReq = 0;
    a5da:	ac07      	add	r4, sp, #28
    a5dc:	7823      	ldrb	r3, [r4, #0]
    a5de:	2220      	movs	r2, #32
    a5e0:	4393      	bics	r3, r2
    a5e2:	7023      	strb	r3, [r4, #0]
    a5e4:	e7c3      	b.n	a56e <SendPacket+0x56>
    a5e6:	46c0      	nop			; (mov r8, r8)
    a5e8:	000093e9 	.word	0x000093e9

0000a5ec <isSameAddress>:
 *
 * Side Effects:    
 *
 ********************************************************************/
bool    isSameAddress(INPUT uint8_t *Address1, INPUT uint8_t *Address2)
{
    a5ec:	b510      	push	{r4, lr}
    uint8_t i;
    
    for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    {
        if( Address1[i] != Address2[i] )
    a5ee:	7802      	ldrb	r2, [r0, #0]
    a5f0:	780b      	ldrb	r3, [r1, #0]
    a5f2:	429a      	cmp	r2, r3
    a5f4:	d109      	bne.n	a60a <isSameAddress+0x1e>
    a5f6:	2301      	movs	r3, #1
    a5f8:	5cc4      	ldrb	r4, [r0, r3]
    a5fa:	5cca      	ldrb	r2, [r1, r3]
    a5fc:	4294      	cmp	r4, r2
    a5fe:	d106      	bne.n	a60e <isSameAddress+0x22>
    a600:	3301      	adds	r3, #1
    for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    a602:	2b08      	cmp	r3, #8
    a604:	d1f8      	bne.n	a5f8 <isSameAddress+0xc>
        {
            return false;
        }
    }
    return true;
    a606:	2001      	movs	r0, #1
}
    a608:	bd10      	pop	{r4, pc}
            return false;
    a60a:	2000      	movs	r0, #0
    a60c:	e7fc      	b.n	a608 <isSameAddress+0x1c>
    a60e:	2000      	movs	r0, #0
    a610:	e7fa      	b.n	a608 <isSameAddress+0x1c>
    a612:	Address 0x0000a612 is out of bounds.


0000a614 <MiApp_SendData>:
   {
    a614:	b5f0      	push	{r4, r5, r6, r7, lr}
    a616:	46de      	mov	lr, fp
    a618:	4657      	mov	r7, sl
    a61a:	464e      	mov	r6, r9
    a61c:	b5c0      	push	{r6, r7, lr}
    a61e:	b088      	sub	sp, #32
    a620:	9107      	str	r1, [sp, #28]
    a622:	0017      	movs	r7, r2
    a624:	4699      	mov	r9, r3
    a626:	ab10      	add	r3, sp, #64	; 0x40
    a628:	781b      	ldrb	r3, [r3, #0]
    a62a:	469a      	mov	sl, r3
    a62c:	ab11      	add	r3, sp, #68	; 0x44
    a62e:	781b      	ldrb	r3, [r3, #0]
    a630:	469b      	mov	fp, r3
		if(addr_len == 2 && (DestinationAddress16 == 0xFFFF))
    a632:	2802      	cmp	r0, #2
    a634:	d003      	beq.n	a63e <MiApp_SendData+0x2a>
    a636:	4d3e      	ldr	r5, [pc, #248]	; (a730 <MiApp_SendData+0x11c>)
    a638:	2400      	movs	r4, #0
            if( ConnectionTable[i].status.bits.isValid && (ConnectionTable[i].status.bits.RXOnWhenIdle == 0) &&
    a63a:	002e      	movs	r6, r5
    a63c:	e036      	b.n	a6ac <MiApp_SendData+0x98>
		uint16_t DestinationAddress16 = ((addr[1] << 8) + addr[0]);	
    a63e:	784a      	ldrb	r2, [r1, #1]
    a640:	0212      	lsls	r2, r2, #8
    a642:	780b      	ldrb	r3, [r1, #0]
    a644:	189b      	adds	r3, r3, r2
		if(addr_len == 2 && (DestinationAddress16 == 0xFFFF))
    a646:	b29b      	uxth	r3, r3
    a648:	4a3a      	ldr	r2, [pc, #232]	; (a734 <MiApp_SendData+0x120>)
    a64a:	4293      	cmp	r3, r2
    a64c:	d1f3      	bne.n	a636 <MiApp_SendData+0x22>
    a64e:	2100      	movs	r1, #0
				    if( ConnectionTable[i].status.bits.isValid && ConnectionTable[i].status.bits.RXOnWhenIdle == 0 )
    a650:	4837      	ldr	r0, [pc, #220]	; (a730 <MiApp_SendData+0x11c>)
    a652:	0002      	movs	r2, r0
    a654:	e002      	b.n	a65c <MiApp_SendData+0x48>
    a656:	3101      	adds	r1, #1
			    for(i = 0; i < CONNECTION_SIZE; i++)
    a658:	2905      	cmp	r1, #5
    a65a:	d021      	beq.n	a6a0 <MiApp_SendData+0x8c>
				    if( ConnectionTable[i].status.bits.isValid && ConnectionTable[i].status.bits.RXOnWhenIdle == 0 )
    a65c:	008b      	lsls	r3, r1, #2
    a65e:	185b      	adds	r3, r3, r1
    a660:	005b      	lsls	r3, r3, #1
    a662:	18c3      	adds	r3, r0, r3
    a664:	7a1b      	ldrb	r3, [r3, #8]
    a666:	09db      	lsrs	r3, r3, #7
    a668:	d0f5      	beq.n	a656 <MiApp_SendData+0x42>
    a66a:	008b      	lsls	r3, r1, #2
    a66c:	185b      	adds	r3, r3, r1
    a66e:	005b      	lsls	r3, r3, #1
    a670:	18d3      	adds	r3, r2, r3
    a672:	7a1b      	ldrb	r3, [r3, #8]
    a674:	07db      	lsls	r3, r3, #31
    a676:	d4ee      	bmi.n	a656 <MiApp_SendData+0x42>
					    IndirectPacket(true, myPANID, NULL, false, true, msglen, msgpointer, msghandle, ackReq, ConfCallback);
    a678:	4b2f      	ldr	r3, [pc, #188]	; (a738 <MiApp_SendData+0x124>)
    a67a:	8819      	ldrh	r1, [r3, #0]
    a67c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a67e:	9305      	str	r3, [sp, #20]
    a680:	465b      	mov	r3, fp
    a682:	9304      	str	r3, [sp, #16]
    a684:	4653      	mov	r3, sl
    a686:	9303      	str	r3, [sp, #12]
    a688:	464b      	mov	r3, r9
    a68a:	9302      	str	r3, [sp, #8]
    a68c:	9701      	str	r7, [sp, #4]
    a68e:	2301      	movs	r3, #1
    a690:	9300      	str	r3, [sp, #0]
    a692:	2300      	movs	r3, #0
    a694:	2200      	movs	r2, #0
    a696:	2001      	movs	r0, #1
    a698:	4c28      	ldr	r4, [pc, #160]	; (a73c <MiApp_SendData+0x128>)
    a69a:	47a0      	blx	r4
			broadcast = true;
    a69c:	2001      	movs	r0, #1
					    break;
    a69e:	e02f      	b.n	a700 <MiApp_SendData+0xec>
			broadcast = true;
    a6a0:	2001      	movs	r0, #1
    a6a2:	e02d      	b.n	a700 <MiApp_SendData+0xec>
    a6a4:	3401      	adds	r4, #1
    a6a6:	350a      	adds	r5, #10
        for(i = 0; i < CONNECTION_SIZE; i++)
    a6a8:	2c05      	cmp	r4, #5
    a6aa:	d028      	beq.n	a6fe <MiApp_SendData+0xea>
            if( ConnectionTable[i].status.bits.isValid && (ConnectionTable[i].status.bits.RXOnWhenIdle == 0) &&
    a6ac:	00a3      	lsls	r3, r4, #2
    a6ae:	191b      	adds	r3, r3, r4
    a6b0:	005b      	lsls	r3, r3, #1
    a6b2:	18f3      	adds	r3, r6, r3
    a6b4:	7a1b      	ldrb	r3, [r3, #8]
    a6b6:	09db      	lsrs	r3, r3, #7
    a6b8:	d0f4      	beq.n	a6a4 <MiApp_SendData+0x90>
    a6ba:	00a3      	lsls	r3, r4, #2
    a6bc:	191b      	adds	r3, r3, r4
    a6be:	005b      	lsls	r3, r3, #1
    a6c0:	4a1b      	ldr	r2, [pc, #108]	; (a730 <MiApp_SendData+0x11c>)
    a6c2:	4694      	mov	ip, r2
    a6c4:	4463      	add	r3, ip
    a6c6:	7a1b      	ldrb	r3, [r3, #8]
    a6c8:	07db      	lsls	r3, r3, #31
    a6ca:	d4eb      	bmi.n	a6a4 <MiApp_SendData+0x90>
                isSameAddress(addr, ConnectionTable[i].Address) )
    a6cc:	0029      	movs	r1, r5
    a6ce:	9807      	ldr	r0, [sp, #28]
    a6d0:	4b1b      	ldr	r3, [pc, #108]	; (a740 <MiApp_SendData+0x12c>)
    a6d2:	4798      	blx	r3
            if( ConnectionTable[i].status.bits.isValid && (ConnectionTable[i].status.bits.RXOnWhenIdle == 0) &&
    a6d4:	2800      	cmp	r0, #0
    a6d6:	d0e5      	beq.n	a6a4 <MiApp_SendData+0x90>
                    return IndirectPacket(broadcast, myPANID, addr, false, true, msglen,
    a6d8:	4b17      	ldr	r3, [pc, #92]	; (a738 <MiApp_SendData+0x124>)
    a6da:	8819      	ldrh	r1, [r3, #0]
    a6dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a6de:	9305      	str	r3, [sp, #20]
    a6e0:	465b      	mov	r3, fp
    a6e2:	9304      	str	r3, [sp, #16]
    a6e4:	4653      	mov	r3, sl
    a6e6:	9303      	str	r3, [sp, #12]
    a6e8:	464b      	mov	r3, r9
    a6ea:	9302      	str	r3, [sp, #8]
    a6ec:	9701      	str	r7, [sp, #4]
    a6ee:	2301      	movs	r3, #1
    a6f0:	9300      	str	r3, [sp, #0]
    a6f2:	2300      	movs	r3, #0
    a6f4:	9a07      	ldr	r2, [sp, #28]
    a6f6:	2000      	movs	r0, #0
    a6f8:	4c10      	ldr	r4, [pc, #64]	; (a73c <MiApp_SendData+0x128>)
    a6fa:	47a0      	blx	r4
    a6fc:	e011      	b.n	a722 <MiApp_SendData+0x10e>
	    bool broadcast = false;
    a6fe:	2000      	movs	r0, #0
        return SendPacket(broadcast, myPANID, addr, false, true, msglen,
    a700:	4b0d      	ldr	r3, [pc, #52]	; (a738 <MiApp_SendData+0x124>)
    a702:	8819      	ldrh	r1, [r3, #0]
    a704:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a706:	9305      	str	r3, [sp, #20]
    a708:	465b      	mov	r3, fp
    a70a:	9304      	str	r3, [sp, #16]
    a70c:	4653      	mov	r3, sl
    a70e:	9303      	str	r3, [sp, #12]
    a710:	464b      	mov	r3, r9
    a712:	9302      	str	r3, [sp, #8]
    a714:	9701      	str	r7, [sp, #4]
    a716:	2301      	movs	r3, #1
    a718:	9300      	str	r3, [sp, #0]
    a71a:	2300      	movs	r3, #0
    a71c:	9a07      	ldr	r2, [sp, #28]
    a71e:	4c09      	ldr	r4, [pc, #36]	; (a744 <MiApp_SendData+0x130>)
    a720:	47a0      	blx	r4
}
    a722:	b008      	add	sp, #32
    a724:	bc1c      	pop	{r2, r3, r4}
    a726:	4691      	mov	r9, r2
    a728:	469a      	mov	sl, r3
    a72a:	46a3      	mov	fp, r4
    a72c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a72e:	46c0      	nop			; (mov r8, r8)
    a730:	20002668 	.word	0x20002668
    a734:	0000ffff 	.word	0x0000ffff
    a738:	200026b8 	.word	0x200026b8
    a73c:	0000a3e5 	.word	0x0000a3e5
    a740:	0000a5ed 	.word	0x0000a5ed
    a744:	0000a519 	.word	0x0000a519

0000a748 <MiApp_Set>:


#endif

bool MiApp_Set(miwi_params_t id, uint8_t *value)
{
    a748:	b510      	push	{r4, lr}
    a74a:	000c      	movs	r4, r1
    switch(id)
    a74c:	2800      	cmp	r0, #0
    a74e:	d001      	beq.n	a754 <MiApp_Set+0xc>
     break;

     default:
     break;
   }
    return false;
    a750:	2000      	movs	r0, #0
}
    a752:	bd10      	pop	{r4, pc}
        if( MiMAC_Set(MAC_CHANNEL, value))
    a754:	4b03      	ldr	r3, [pc, #12]	; (a764 <MiApp_Set+0x1c>)
    a756:	4798      	blx	r3
    a758:	2800      	cmp	r0, #0
    a75a:	d0fa      	beq.n	a752 <MiApp_Set+0xa>
          currentChannel = *value;
    a75c:	7822      	ldrb	r2, [r4, #0]
    a75e:	4b02      	ldr	r3, [pc, #8]	; (a768 <MiApp_Set+0x20>)
    a760:	701a      	strb	r2, [r3, #0]
          return true;
    a762:	e7f6      	b.n	a752 <MiApp_Set+0xa>
    a764:	0000934d 	.word	0x0000934d
    a768:	20000011 	.word	0x20000011

0000a76c <MiApp_ProtocolInit>:
{
    a76c:	b500      	push	{lr}
    a76e:	b085      	sub	sp, #20
    P2PStatus.Val = 0;
    a770:	2300      	movs	r3, #0
    a772:	4a1d      	ldr	r2, [pc, #116]	; (a7e8 <MiApp_ProtocolInit+0x7c>)
    a774:	7013      	strb	r3, [r2, #0]
            indirectMessages[i].flags.Val = 0;
    a776:	4a1d      	ldr	r2, [pc, #116]	; (a7ec <MiApp_ProtocolInit+0x80>)
    a778:	7393      	strb	r3, [r2, #14]
    a77a:	2191      	movs	r1, #145	; 0x91
    a77c:	0049      	lsls	r1, r1, #1
    a77e:	5453      	strb	r3, [r2, r1]
            IncomingFrameCounter[i].Val = 0;
    a780:	4a1b      	ldr	r2, [pc, #108]	; (a7f0 <MiApp_ProtocolInit+0x84>)
    a782:	6013      	str	r3, [r2, #0]
    a784:	6053      	str	r3, [r2, #4]
    a786:	6093      	str	r3, [r2, #8]
    a788:	60d3      	str	r3, [r2, #12]
    a78a:	6113      	str	r3, [r2, #16]
            myPANID.Val = MY_PAN_ID; 
    a78c:	4a19      	ldr	r2, [pc, #100]	; (a7f4 <MiApp_ProtocolInit+0x88>)
    a78e:	4b1a      	ldr	r3, [pc, #104]	; (a7f8 <MiApp_ProtocolInit+0x8c>)
    a790:	801a      	strh	r2, [r3, #0]
    initValue.PAddress = myLongAddress;
    a792:	a902      	add	r1, sp, #8
    initValue.actionFlags.bits.CCAEnable = 1;
    a794:	780b      	ldrb	r3, [r1, #0]
    a796:	2202      	movs	r2, #2
    a798:	4313      	orrs	r3, r2
    initValue.actionFlags.bits.PAddrLength = MY_ADDRESS_LENGTH;
    a79a:	2287      	movs	r2, #135	; 0x87
    a79c:	4013      	ands	r3, r2
    a79e:	2240      	movs	r2, #64	; 0x40
    a7a0:	4313      	orrs	r3, r2
    initValue.actionFlags.bits.RepeaterMode = 0;
    a7a2:	22c3      	movs	r2, #195	; 0xc3
    a7a4:	4013      	ands	r3, r2
    a7a6:	3ac2      	subs	r2, #194	; 0xc2
    a7a8:	4393      	bics	r3, r2
    a7aa:	700b      	strb	r3, [r1, #0]
    MiMAC_Init(initValue);
    a7ac:	9802      	ldr	r0, [sp, #8]
    a7ae:	4913      	ldr	r1, [pc, #76]	; (a7fc <MiApp_ProtocolInit+0x90>)
    a7b0:	4b13      	ldr	r3, [pc, #76]	; (a800 <MiApp_ProtocolInit+0x94>)
    a7b2:	4798      	blx	r3
    if (currentChannel != 0xFF)
    a7b4:	4b13      	ldr	r3, [pc, #76]	; (a804 <MiApp_ProtocolInit+0x98>)
    a7b6:	781b      	ldrb	r3, [r3, #0]
    a7b8:	2bff      	cmp	r3, #255	; 0xff
    a7ba:	d003      	beq.n	a7c4 <MiApp_ProtocolInit+0x58>
	    MiApp_Set(CHANNEL, &currentChannel);
    a7bc:	4911      	ldr	r1, [pc, #68]	; (a804 <MiApp_ProtocolInit+0x98>)
    a7be:	2000      	movs	r0, #0
    a7c0:	4b11      	ldr	r3, [pc, #68]	; (a808 <MiApp_ProtocolInit+0x9c>)
    a7c2:	4798      	blx	r3
            uint16_t tmp = 0xFFFF;
    a7c4:	466b      	mov	r3, sp
    a7c6:	1d98      	adds	r0, r3, #6
    a7c8:	2301      	movs	r3, #1
    a7ca:	425b      	negs	r3, r3
    a7cc:	8003      	strh	r3, [r0, #0]
            MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    a7ce:	490a      	ldr	r1, [pc, #40]	; (a7f8 <MiApp_ProtocolInit+0x8c>)
    a7d0:	4b0e      	ldr	r3, [pc, #56]	; (a80c <MiApp_ProtocolInit+0xa0>)
    a7d2:	4798      	blx	r3
    P2PCapacityInfo |= (ConnMode << 4);
    a7d4:	4b0e      	ldr	r3, [pc, #56]	; (a810 <MiApp_ProtocolInit+0xa4>)
    a7d6:	781b      	ldrb	r3, [r3, #0]
    a7d8:	011b      	lsls	r3, r3, #4
    a7da:	2209      	movs	r2, #9
    a7dc:	4313      	orrs	r3, r2
    a7de:	4a0d      	ldr	r2, [pc, #52]	; (a814 <MiApp_ProtocolInit+0xa8>)
    a7e0:	7013      	strb	r3, [r2, #0]
}
    a7e2:	2000      	movs	r0, #0
    a7e4:	b005      	add	sp, #20
    a7e6:	bd00      	pop	{pc}
    a7e8:	200026dc 	.word	0x200026dc
    a7ec:	200026e0 	.word	0x200026e0
    a7f0:	200026c4 	.word	0x200026c4
    a7f4:	00001234 	.word	0x00001234
    a7f8:	200026b8 	.word	0x200026b8
    a7fc:	20000014 	.word	0x20000014
    a800:	00009375 	.word	0x00009375
    a804:	20000011 	.word	0x20000011
    a808:	0000a749 	.word	0x0000a749
    a80c:	00008f4d 	.word	0x00008f4d
    a810:	20000010 	.word	0x20000010
    a814:	200026b5 	.word	0x200026b5

0000a818 <MiApp_StartConnection>:
    {
    a818:	b530      	push	{r4, r5, lr}
    a81a:	b083      	sub	sp, #12
    a81c:	0014      	movs	r4, r2
    a81e:	001d      	movs	r5, r3
        switch(Mode)
    a820:	2801      	cmp	r0, #1
    a822:	d032      	beq.n	a88a <MiApp_StartConnection+0x72>
    a824:	2800      	cmp	r0, #0
    a826:	d005      	beq.n	a834 <MiApp_StartConnection+0x1c>
    a828:	2802      	cmp	r0, #2
    a82a:	d032      	beq.n	a892 <MiApp_StartConnection+0x7a>
        ConfCallback(FAILURE);
    a82c:	2001      	movs	r0, #1
    a82e:	4798      	blx	r3
        return false;
    a830:	2000      	movs	r0, #0
    a832:	e028      	b.n	a886 <MiApp_StartConnection+0x6e>
                uint8_t channel = 0;
    a834:	2200      	movs	r2, #0
    a836:	466b      	mov	r3, sp
    a838:	715a      	strb	r2, [r3, #5]
                        myPANID.Val = MY_PAN_ID;
    a83a:	4918      	ldr	r1, [pc, #96]	; (a89c <MiApp_StartConnection+0x84>)
    a83c:	4b18      	ldr	r3, [pc, #96]	; (a8a0 <MiApp_StartConnection+0x88>)
    a83e:	800b      	strh	r3, [r1, #0]
                        uint16_t tmp = 0xFFFF;
    a840:	466b      	mov	r3, sp
    a842:	1d98      	adds	r0, r3, #6
    a844:	2301      	movs	r3, #1
    a846:	425b      	negs	r3, r3
    a848:	8003      	strh	r3, [r0, #0]
                        MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    a84a:	4b16      	ldr	r3, [pc, #88]	; (a8a4 <MiApp_StartConnection+0x8c>)
    a84c:	4798      	blx	r3
				while (!(index & ChannelMap))
    a84e:	07e3      	lsls	r3, r4, #31
    a850:	d40a      	bmi.n	a868 <MiApp_StartConnection+0x50>
    a852:	466b      	mov	r3, sp
    a854:	3305      	adds	r3, #5
    a856:	781b      	ldrb	r3, [r3, #0]
    a858:	2201      	movs	r2, #1
				index = index << 1;
    a85a:	0052      	lsls	r2, r2, #1
				++channel;
    a85c:	3301      	adds	r3, #1
    a85e:	b2db      	uxtb	r3, r3
				while (!(index & ChannelMap))
    a860:	4222      	tst	r2, r4
    a862:	d0fa      	beq.n	a85a <MiApp_StartConnection+0x42>
    a864:	466a      	mov	r2, sp
    a866:	7153      	strb	r3, [r2, #5]
				MiApp_Set(CHANNEL, &channel);
    a868:	466b      	mov	r3, sp
    a86a:	1d59      	adds	r1, r3, #5
    a86c:	2000      	movs	r0, #0
    a86e:	4b0e      	ldr	r3, [pc, #56]	; (a8a8 <MiApp_StartConnection+0x90>)
    a870:	4798      	blx	r3
                tick1.Val = MiWi_TickGet();
    a872:	4c0e      	ldr	r4, [pc, #56]	; (a8ac <MiApp_StartConnection+0x94>)
    a874:	47a0      	blx	r4
    a876:	4b0e      	ldr	r3, [pc, #56]	; (a8b0 <MiApp_StartConnection+0x98>)
    a878:	6018      	str	r0, [r3, #0]
                tick4.Val = MiWi_TickGet();
    a87a:	47a0      	blx	r4
    a87c:	4b0d      	ldr	r3, [pc, #52]	; (a8b4 <MiApp_StartConnection+0x9c>)
    a87e:	6018      	str	r0, [r3, #0]
				ConfCallback(SUCCESS);
    a880:	2000      	movs	r0, #0
    a882:	47a8      	blx	r5
                return true;
    a884:	2001      	movs	r0, #1
    }
    a886:	b003      	add	sp, #12
    a888:	bd30      	pop	{r4, r5, pc}
                    ConfCallback(FAILURE);
    a88a:	2001      	movs	r0, #1
    a88c:	4798      	blx	r3
                    return false;
    a88e:	2000      	movs	r0, #0
    a890:	e7f9      	b.n	a886 <MiApp_StartConnection+0x6e>
                ConfCallback(FAILURE);
    a892:	2001      	movs	r0, #1
    a894:	4798      	blx	r3
                return false;
    a896:	2000      	movs	r0, #0
    a898:	e7f5      	b.n	a886 <MiApp_StartConnection+0x6e>
    a89a:	46c0      	nop			; (mov r8, r8)
    a89c:	200026b8 	.word	0x200026b8
    a8a0:	00001234 	.word	0x00001234
    a8a4:	00008f4d 	.word	0x00008f4d
    a8a8:	0000a749 	.word	0x0000a749
    a8ac:	0000ba15 	.word	0x0000ba15
    a8b0:	20002908 	.word	0x20002908
    a8b4:	2000269c 	.word	0x2000269c

0000a8b8 <DumpConnection>:
     * Side Effects:    The content of the connection pointed by the index 
     *                  of the P2P Connection Entry will be printed out
     *
     ********************************************************************/
    void DumpConnection(INPUT uint8_t index)
    {
    a8b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    a8ba:	46d6      	mov	lr, sl
    a8bc:	4647      	mov	r7, r8
    a8be:	b580      	push	{r7, lr}
    a8c0:	b083      	sub	sp, #12
    a8c2:	0005      	movs	r5, r0
#if defined (ENABLE_CONSOLE)		
        uint8_t i, j;
        
        if( index > CONNECTION_SIZE )
    a8c4:	2805      	cmp	r0, #5
    a8c6:	d811      	bhi.n	a8ec <DumpConnection+0x34>
            #endif
            printf("  Channel: ");
            printf("%d",currentChannel);
        }
            
        if( index < CONNECTION_SIZE )
    a8c8:	2d04      	cmp	r5, #4
    a8ca:	d85e      	bhi.n	a98a <DumpConnection+0xd2>
        {
            printf("\r\nConnection \tPeerLongAddress \tPeerInfo \tRxOnStatus1\r\n");  
    a8cc:	4851      	ldr	r0, [pc, #324]	; (aa14 <DumpConnection+0x15c>)
    a8ce:	4b52      	ldr	r3, [pc, #328]	; (aa18 <DumpConnection+0x160>)
    a8d0:	4798      	blx	r3
            if( ConnectionTable[index].status.bits.isValid )
    a8d2:	00ab      	lsls	r3, r5, #2
    a8d4:	195b      	adds	r3, r3, r5
    a8d6:	005b      	lsls	r3, r3, #1
    a8d8:	4a50      	ldr	r2, [pc, #320]	; (aa1c <DumpConnection+0x164>)
    a8da:	18d3      	adds	r3, r2, r3
    a8dc:	7a1b      	ldrb	r3, [r3, #8]
    a8de:	09db      	lsrs	r3, r3, #7
    a8e0:	d123      	bne.n	a92a <DumpConnection+0x72>
					
                }  
            }
        }
#endif // #if defined (ENABLE_CONSOLE)		
    }
    a8e2:	b003      	add	sp, #12
    a8e4:	bc0c      	pop	{r2, r3}
    a8e6:	4690      	mov	r8, r2
    a8e8:	469a      	mov	sl, r3
    a8ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
            printf("\r\n\r\nMy Address: 0x");
    a8ec:	484c      	ldr	r0, [pc, #304]	; (aa20 <DumpConnection+0x168>)
    a8ee:	4b4d      	ldr	r3, [pc, #308]	; (aa24 <DumpConnection+0x16c>)
    a8f0:	4798      	blx	r3
    a8f2:	4c4d      	ldr	r4, [pc, #308]	; (aa28 <DumpConnection+0x170>)
    a8f4:	0026      	movs	r6, r4
    a8f6:	3e08      	subs	r6, #8
				printf("%02x",myLongAddress[MY_ADDRESS_LENGTH-1-i]);
    a8f8:	4f4a      	ldr	r7, [pc, #296]	; (aa24 <DumpConnection+0x16c>)
    a8fa:	79e1      	ldrb	r1, [r4, #7]
    a8fc:	484b      	ldr	r0, [pc, #300]	; (aa2c <DumpConnection+0x174>)
    a8fe:	47b8      	blx	r7
    a900:	3c01      	subs	r4, #1
            for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    a902:	42b4      	cmp	r4, r6
    a904:	d1f9      	bne.n	a8fa <DumpConnection+0x42>
                printf("  PANID: 0x");
    a906:	484a      	ldr	r0, [pc, #296]	; (aa30 <DumpConnection+0x178>)
    a908:	4c46      	ldr	r4, [pc, #280]	; (aa24 <DumpConnection+0x16c>)
    a90a:	47a0      	blx	r4
                printf("%x",myPANID.v[1]);
    a90c:	4f49      	ldr	r7, [pc, #292]	; (aa34 <DumpConnection+0x17c>)
    a90e:	7879      	ldrb	r1, [r7, #1]
    a910:	4e49      	ldr	r6, [pc, #292]	; (aa38 <DumpConnection+0x180>)
    a912:	0030      	movs	r0, r6
    a914:	47a0      	blx	r4
                printf("%x",myPANID.v[0]);
    a916:	7839      	ldrb	r1, [r7, #0]
    a918:	0030      	movs	r0, r6
    a91a:	47a0      	blx	r4
            printf("  Channel: ");
    a91c:	4847      	ldr	r0, [pc, #284]	; (aa3c <DumpConnection+0x184>)
    a91e:	47a0      	blx	r4
            printf("%d",currentChannel);
    a920:	4b47      	ldr	r3, [pc, #284]	; (aa40 <DumpConnection+0x188>)
    a922:	7819      	ldrb	r1, [r3, #0]
    a924:	4847      	ldr	r0, [pc, #284]	; (aa44 <DumpConnection+0x18c>)
    a926:	47a0      	blx	r4
    a928:	e7ce      	b.n	a8c8 <DumpConnection+0x10>
                printf("%02x",index);
    a92a:	0029      	movs	r1, r5
    a92c:	483f      	ldr	r0, [pc, #252]	; (aa2c <DumpConnection+0x174>)
    a92e:	4c3d      	ldr	r4, [pc, #244]	; (aa24 <DumpConnection+0x16c>)
    a930:	47a0      	blx	r4
                printf("\t\t\t");
    a932:	4845      	ldr	r0, [pc, #276]	; (aa48 <DumpConnection+0x190>)
    a934:	47a0      	blx	r4
    a936:	00ae      	lsls	r6, r5, #2
    a938:	1976      	adds	r6, r6, r5
    a93a:	0076      	lsls	r6, r6, #1
    a93c:	1df4      	adds	r4, r6, #7
    a93e:	4b37      	ldr	r3, [pc, #220]	; (aa1c <DumpConnection+0x164>)
    a940:	18e4      	adds	r4, r4, r3
    a942:	3e01      	subs	r6, #1
    a944:	18f6      	adds	r6, r6, r3
                        printf("%02x", ConnectionTable[index].Address[MY_ADDRESS_LENGTH-1-i] );
    a946:	4f37      	ldr	r7, [pc, #220]	; (aa24 <DumpConnection+0x16c>)
    a948:	7821      	ldrb	r1, [r4, #0]
    a94a:	4838      	ldr	r0, [pc, #224]	; (aa2c <DumpConnection+0x174>)
    a94c:	47b8      	blx	r7
    a94e:	3c01      	subs	r4, #1
                for(i = 0; i < 8; i++)
    a950:	42b4      	cmp	r4, r6
    a952:	d1f9      	bne.n	a948 <DumpConnection+0x90>
                printf("/t");
    a954:	483d      	ldr	r0, [pc, #244]	; (aa4c <DumpConnection+0x194>)
    a956:	4f33      	ldr	r7, [pc, #204]	; (aa24 <DumpConnection+0x16c>)
    a958:	47b8      	blx	r7
                        printf("%02x", ConnectionTable[index].PeerInfo[i] );
    a95a:	4e30      	ldr	r6, [pc, #192]	; (aa1c <DumpConnection+0x164>)
    a95c:	00ac      	lsls	r4, r5, #2
    a95e:	1963      	adds	r3, r4, r5
    a960:	005b      	lsls	r3, r3, #1
    a962:	18f3      	adds	r3, r6, r3
    a964:	7a59      	ldrb	r1, [r3, #9]
    a966:	4831      	ldr	r0, [pc, #196]	; (aa2c <DumpConnection+0x174>)
    a968:	47b8      	blx	r7
				printf("\t");
    a96a:	2009      	movs	r0, #9
    a96c:	4b38      	ldr	r3, [pc, #224]	; (aa50 <DumpConnection+0x198>)
    a96e:	4698      	mov	r8, r3
    a970:	4798      	blx	r3
				printf("\t");
    a972:	2009      	movs	r0, #9
    a974:	47c0      	blx	r8
				printf("%d", ConnectionTable[index].status.Val );
    a976:	1964      	adds	r4, r4, r5
    a978:	0064      	lsls	r4, r4, #1
    a97a:	1934      	adds	r4, r6, r4
    a97c:	7a21      	ldrb	r1, [r4, #8]
    a97e:	4831      	ldr	r0, [pc, #196]	; (aa44 <DumpConnection+0x18c>)
    a980:	47b8      	blx	r7
                printf("\r\n");
    a982:	4834      	ldr	r0, [pc, #208]	; (aa54 <DumpConnection+0x19c>)
    a984:	4b24      	ldr	r3, [pc, #144]	; (aa18 <DumpConnection+0x160>)
    a986:	4798      	blx	r3
    a988:	e7ab      	b.n	a8e2 <DumpConnection+0x2a>
            printf("\r\n\r\nConnection     PeerLongAddress     PeerInfo\tRxOnStatus\r\n");  
    a98a:	4833      	ldr	r0, [pc, #204]	; (aa58 <DumpConnection+0x1a0>)
    a98c:	4b22      	ldr	r3, [pc, #136]	; (aa18 <DumpConnection+0x160>)
    a98e:	4798      	blx	r3
    a990:	4b32      	ldr	r3, [pc, #200]	; (aa5c <DumpConnection+0x1a4>)
    a992:	4698      	mov	r8, r3
    a994:	2500      	movs	r5, #0
                if( ConnectionTable[i].status.bits.isValid )
    a996:	4b21      	ldr	r3, [pc, #132]	; (aa1c <DumpConnection+0x164>)
    a998:	469a      	mov	sl, r3
    a99a:	e020      	b.n	a9de <DumpConnection+0x126>
                    printf("    ");
    a99c:	4830      	ldr	r0, [pc, #192]	; (aa60 <DumpConnection+0x1a8>)
    a99e:	4e21      	ldr	r6, [pc, #132]	; (aa24 <DumpConnection+0x16c>)
    a9a0:	47b0      	blx	r6
                            printf("%02x", ConnectionTable[i].PeerInfo[j] );
    a9a2:	4643      	mov	r3, r8
    a9a4:	7899      	ldrb	r1, [r3, #2]
    a9a6:	4821      	ldr	r0, [pc, #132]	; (aa2c <DumpConnection+0x174>)
    a9a8:	47b0      	blx	r6
					printf("\t");
    a9aa:	2009      	movs	r0, #9
    a9ac:	4c28      	ldr	r4, [pc, #160]	; (aa50 <DumpConnection+0x198>)
    a9ae:	47a0      	blx	r4
					printf("\t");
    a9b0:	2009      	movs	r0, #9
    a9b2:	47a0      	blx	r4
					printf("%02x", ConnectionTable[i].status.bits.RXOnWhenIdle );					
    a9b4:	9a01      	ldr	r2, [sp, #4]
    a9b6:	0093      	lsls	r3, r2, #2
    a9b8:	189f      	adds	r7, r3, r2
    a9ba:	007f      	lsls	r7, r7, #1
    a9bc:	4b17      	ldr	r3, [pc, #92]	; (aa1c <DumpConnection+0x164>)
    a9be:	19df      	adds	r7, r3, r7
    a9c0:	7a39      	ldrb	r1, [r7, #8]
    a9c2:	07c9      	lsls	r1, r1, #31
    a9c4:	0fc9      	lsrs	r1, r1, #31
    a9c6:	4819      	ldr	r0, [pc, #100]	; (aa2c <DumpConnection+0x174>)
    a9c8:	47b0      	blx	r6
                    printf("\r\n");
    a9ca:	4822      	ldr	r0, [pc, #136]	; (aa54 <DumpConnection+0x19c>)
    a9cc:	4b12      	ldr	r3, [pc, #72]	; (aa18 <DumpConnection+0x160>)
    a9ce:	4798      	blx	r3
    a9d0:	3501      	adds	r5, #1
    a9d2:	230a      	movs	r3, #10
    a9d4:	469c      	mov	ip, r3
    a9d6:	44e0      	add	r8, ip
            for(i = 0; i < CONNECTION_SIZE; i++)
    a9d8:	2d05      	cmp	r5, #5
    a9da:	d100      	bne.n	a9de <DumpConnection+0x126>
    a9dc:	e781      	b.n	a8e2 <DumpConnection+0x2a>
                if( ConnectionTable[i].status.bits.isValid )
    a9de:	9501      	str	r5, [sp, #4]
    a9e0:	00ab      	lsls	r3, r5, #2
    a9e2:	195b      	adds	r3, r3, r5
    a9e4:	005b      	lsls	r3, r3, #1
    a9e6:	4453      	add	r3, sl
    a9e8:	7a1b      	ldrb	r3, [r3, #8]
    a9ea:	09db      	lsrs	r3, r3, #7
    a9ec:	d0f0      	beq.n	a9d0 <DumpConnection+0x118>
                    printf("%02x",i);
    a9ee:	0029      	movs	r1, r5
    a9f0:	480e      	ldr	r0, [pc, #56]	; (aa2c <DumpConnection+0x174>)
    a9f2:	4b0c      	ldr	r3, [pc, #48]	; (aa24 <DumpConnection+0x16c>)
    a9f4:	4798      	blx	r3
                    printf("             ");
    a9f6:	481b      	ldr	r0, [pc, #108]	; (aa64 <DumpConnection+0x1ac>)
    a9f8:	4b0a      	ldr	r3, [pc, #40]	; (aa24 <DumpConnection+0x16c>)
    a9fa:	4798      	blx	r3
    a9fc:	4647      	mov	r7, r8
    a9fe:	3f08      	subs	r7, #8
    aa00:	4644      	mov	r4, r8
                            printf("%02x", ConnectionTable[i].Address[MY_ADDRESS_LENGTH-1-j] );
    aa02:	4e08      	ldr	r6, [pc, #32]	; (aa24 <DumpConnection+0x16c>)
    aa04:	7821      	ldrb	r1, [r4, #0]
    aa06:	4809      	ldr	r0, [pc, #36]	; (aa2c <DumpConnection+0x174>)
    aa08:	47b0      	blx	r6
    aa0a:	3c01      	subs	r4, #1
                    for(j = 0; j < 8; j++)
    aa0c:	42bc      	cmp	r4, r7
    aa0e:	d1f9      	bne.n	aa04 <DumpConnection+0x14c>
    aa10:	e7c4      	b.n	a99c <DumpConnection+0xe4>
    aa12:	46c0      	nop			; (mov r8, r8)
    aa14:	000180b4 	.word	0x000180b4
    aa18:	00016815 	.word	0x00016815
    aa1c:	20002668 	.word	0x20002668
    aa20:	00018088 	.word	0x00018088
    aa24:	000166f9 	.word	0x000166f9
    aa28:	20000014 	.word	0x20000014
    aa2c:	00017974 	.word	0x00017974
    aa30:	0001809c 	.word	0x0001809c
    aa34:	200026b8 	.word	0x200026b8
    aa38:	00017984 	.word	0x00017984
    aa3c:	000180a8 	.word	0x000180a8
    aa40:	20000011 	.word	0x20000011
    aa44:	00017658 	.word	0x00017658
    aa48:	000180ec 	.word	0x000180ec
    aa4c:	000180f0 	.word	0x000180f0
    aa50:	0001672d 	.word	0x0001672d
    aa54:	000180e8 	.word	0x000180e8
    aa58:	000180f4 	.word	0x000180f4
    aa5c:	2000266f 	.word	0x2000266f
    aa60:	00018140 	.word	0x00018140
    aa64:	00018130 	.word	0x00018130

0000aa68 <AddConnection>:
     *                  connection operation ends if an entry is added 
     *                  successfully
     *
     ********************************************************************/
    uint8_t AddConnection(void)
    {
    aa68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aa6a:	46d6      	mov	lr, sl
    aa6c:	464f      	mov	r7, r9
    aa6e:	b580      	push	{r7, lr}
        {
            // check if the entry is valid
            if( ConnectionTable[i].status.bits.isValid )
            {
                // check if the entry address matches source address of current received packet
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    aa70:	4b39      	ldr	r3, [pc, #228]	; (ab58 <AddConnection+0xf0>)
    aa72:	685e      	ldr	r6, [r3, #4]
    aa74:	4d39      	ldr	r5, [pc, #228]	; (ab5c <AddConnection+0xf4>)
    aa76:	2400      	movs	r4, #0
        uint8_t connectionSlot = 0xFF;
    aa78:	27ff      	movs	r7, #255	; 0xff
            if( ConnectionTable[i].status.bits.isValid )
    aa7a:	46a9      	mov	r9, r5
    aa7c:	e005      	b.n	aa8a <AddConnection+0x22>
                    connectionSlot = i;
                    status = STATUS_EXISTS;
                    break;
                }
            }
            else if( connectionSlot == 0xFF )
    aa7e:	2fff      	cmp	r7, #255	; 0xff
    aa80:	d015      	beq.n	aaae <AddConnection+0x46>
    aa82:	3401      	adds	r4, #1
    aa84:	350a      	adds	r5, #10
        for(i = 0; i < CONNECTION_SIZE; i++)
    aa86:	2c05      	cmp	r4, #5
    aa88:	d013      	beq.n	aab2 <AddConnection+0x4a>
    aa8a:	b2e3      	uxtb	r3, r4
    aa8c:	469a      	mov	sl, r3
            if( ConnectionTable[i].status.bits.isValid )
    aa8e:	00a3      	lsls	r3, r4, #2
    aa90:	191b      	adds	r3, r3, r4
    aa92:	005b      	lsls	r3, r3, #1
    aa94:	444b      	add	r3, r9
    aa96:	7a1b      	ldrb	r3, [r3, #8]
    aa98:	09db      	lsrs	r3, r3, #7
    aa9a:	d0f0      	beq.n	aa7e <AddConnection+0x16>
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    aa9c:	0029      	movs	r1, r5
    aa9e:	0030      	movs	r0, r6
    aaa0:	4b2f      	ldr	r3, [pc, #188]	; (ab60 <AddConnection+0xf8>)
    aaa2:	4798      	blx	r3
    aaa4:	2800      	cmp	r0, #0
    aaa6:	d0ec      	beq.n	aa82 <AddConnection+0x1a>
    aaa8:	4657      	mov	r7, sl
                    status = STATUS_EXISTS;
    aaaa:	2401      	movs	r4, #1
    aaac:	e002      	b.n	aab4 <AddConnection+0x4c>
            else if( connectionSlot == 0xFF )
    aaae:	4657      	mov	r7, sl
    aab0:	e7e7      	b.n	aa82 <AddConnection+0x1a>
        uint8_t status = STATUS_SUCCESS;
    aab2:	2400      	movs	r4, #0
                // store the first empty slot
                connectionSlot = i;
            }  
        }
            
        if( connectionSlot == 0xFF )
    aab4:	2fff      	cmp	r7, #255	; 0xff
    aab6:	d049      	beq.n	ab4c <AddConnection+0xe4>
        {
            return STATUS_NOT_ENOUGH_SPACE;
        }
        else 
        {
            if( ConnMode >= ENABLE_PREV_CONN )
    aab8:	4b2a      	ldr	r3, [pc, #168]	; (ab64 <AddConnection+0xfc>)
    aaba:	781b      	ldrb	r3, [r3, #0]
    aabc:	2b00      	cmp	r3, #0
    aabe:	d146      	bne.n	ab4e <AddConnection+0xe6>
            {
                return status;
            }
            MyindexinPC = connectionSlot;    
    aac0:	4b29      	ldr	r3, [pc, #164]	; (ab68 <AddConnection+0x100>)
    aac2:	701f      	strb	r7, [r3, #0]
    aac4:	00b9      	lsls	r1, r7, #2
    aac6:	19c9      	adds	r1, r1, r7
    aac8:	0049      	lsls	r1, r1, #1
    aaca:	4b24      	ldr	r3, [pc, #144]	; (ab5c <AddConnection+0xf4>)
    aacc:	18c9      	adds	r1, r1, r3
    aace:	2300      	movs	r3, #0
            // store the source address
            for(i = 0; i < 8; i++)
            {
                ConnectionTable[connectionSlot].Address[i] = rxMessage.SourceAddress[i];
    aad0:	0038      	movs	r0, r7
    aad2:	5cf2      	ldrb	r2, [r6, r3]
    aad4:	54ca      	strb	r2, [r1, r3]
    aad6:	3301      	adds	r3, #1
            for(i = 0; i < 8; i++)
    aad8:	2b08      	cmp	r3, #8
    aada:	d1fa      	bne.n	aad2 <AddConnection+0x6a>
            }
			ConnectionTable[connectionSlot].status.bits.isValid = 1;
    aadc:	0083      	lsls	r3, r0, #2
    aade:	181b      	adds	r3, r3, r0
    aae0:	005b      	lsls	r3, r3, #1
    aae2:	4a1e      	ldr	r2, [pc, #120]	; (ab5c <AddConnection+0xf4>)
    aae4:	18d3      	adds	r3, r2, r3
    aae6:	7a19      	ldrb	r1, [r3, #8]
    aae8:	2280      	movs	r2, #128	; 0x80
    aaea:	4252      	negs	r2, r2
    aaec:	430a      	orrs	r2, r1
    aaee:	721a      	strb	r2, [r3, #8]
			if(rxMessage.Payload[2] & 0x01)
    aaf0:	4b19      	ldr	r3, [pc, #100]	; (ab58 <AddConnection+0xf0>)
    aaf2:	689b      	ldr	r3, [r3, #8]
    aaf4:	789a      	ldrb	r2, [r3, #2]
    aaf6:	07d2      	lsls	r2, r2, #31
    aaf8:	d51e      	bpl.n	ab38 <AddConnection+0xd0>
				{
					ConnectionTable[connectionSlot].status.bits.RXOnWhenIdle = 1;
    aafa:	0082      	lsls	r2, r0, #2
    aafc:	1812      	adds	r2, r2, r0
    aafe:	0052      	lsls	r2, r2, #1
    ab00:	4916      	ldr	r1, [pc, #88]	; (ab5c <AddConnection+0xf4>)
    ab02:	188a      	adds	r2, r1, r2
    ab04:	7a11      	ldrb	r1, [r2, #8]
    ab06:	2501      	movs	r5, #1
    ab08:	4329      	orrs	r1, r5
    ab0a:	7211      	strb	r1, [r2, #8]
            //ConnectionTable[connectionSlot].status.Val = temp;
            // store possible additional connection payload
            #if ADDITIONAL_NODE_ID_SIZE > 0
                for(i = 0; i < ADDITIONAL_NODE_ID_SIZE; i++)
                {
                    ConnectionTable[connectionSlot].PeerInfo[i] = rxMessage.Payload[3+i];
    ab0c:	78d9      	ldrb	r1, [r3, #3]
    ab0e:	0082      	lsls	r2, r0, #2
    ab10:	1810      	adds	r0, r2, r0
    ab12:	0043      	lsls	r3, r0, #1
    ab14:	4811      	ldr	r0, [pc, #68]	; (ab5c <AddConnection+0xf4>)
    ab16:	18c0      	adds	r0, r0, r3
    ab18:	7241      	strb	r1, [r0, #9]
                }
            #endif
    
            #ifdef ENABLE_SECURITY
                // if security is enabled, clear the incoming frame control
                IncomingFrameCounter[connectionSlot].Val = 0;
    ab1a:	2100      	movs	r1, #0
    ab1c:	4b13      	ldr	r3, [pc, #76]	; (ab6c <AddConnection+0x104>)
    ab1e:	50d1      	str	r1, [r2, r3]
            #endif
            LatestConnection = connectionSlot;
    ab20:	4b13      	ldr	r3, [pc, #76]	; (ab70 <AddConnection+0x108>)
    ab22:	701f      	strb	r7, [r3, #0]
            P2PStatus.bits.SearchConnection = 0;   
    ab24:	4a13      	ldr	r2, [pc, #76]	; (ab74 <AddConnection+0x10c>)
    ab26:	7813      	ldrb	r3, [r2, #0]
    ab28:	3110      	adds	r1, #16
    ab2a:	438b      	bics	r3, r1
    ab2c:	7013      	strb	r3, [r2, #0]
        }
        conn_size = Total_Connections();
    ab2e:	4b12      	ldr	r3, [pc, #72]	; (ab78 <AddConnection+0x110>)
    ab30:	4798      	blx	r3
    ab32:	4b12      	ldr	r3, [pc, #72]	; (ab7c <AddConnection+0x114>)
    ab34:	7018      	strb	r0, [r3, #0]
    #if defined (ENABLE_NETWORK_FREEZER)
		PDS_Store(PDS_EDC_ID);
    #endif

        return status;
    ab36:	e00a      	b.n	ab4e <AddConnection+0xe6>
					ConnectionTable[connectionSlot].status.bits.RXOnWhenIdle = 0;
    ab38:	0082      	lsls	r2, r0, #2
    ab3a:	1812      	adds	r2, r2, r0
    ab3c:	0052      	lsls	r2, r2, #1
    ab3e:	4907      	ldr	r1, [pc, #28]	; (ab5c <AddConnection+0xf4>)
    ab40:	188a      	adds	r2, r1, r2
    ab42:	7a11      	ldrb	r1, [r2, #8]
    ab44:	2501      	movs	r5, #1
    ab46:	43a9      	bics	r1, r5
    ab48:	7211      	strb	r1, [r2, #8]
    ab4a:	e7df      	b.n	ab0c <AddConnection+0xa4>
            return STATUS_NOT_ENOUGH_SPACE;
    ab4c:	24f1      	movs	r4, #241	; 0xf1
    }
    ab4e:	0020      	movs	r0, r4
    ab50:	bc0c      	pop	{r2, r3}
    ab52:	4691      	mov	r9, r2
    ab54:	469a      	mov	sl, r3
    ab56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ab58:	2000294c 	.word	0x2000294c
    ab5c:	20002668 	.word	0x20002668
    ab60:	0000a5ed 	.word	0x0000a5ed
    ab64:	20000010 	.word	0x20000010
    ab68:	200026d8 	.word	0x200026d8
    ab6c:	200026c4 	.word	0x200026c4
    ab70:	20002664 	.word	0x20002664
    ab74:	200026dc 	.word	0x200026dc
    ab78:	0000a3bd 	.word	0x0000a3bd
    ab7c:	200026c1 	.word	0x200026c1

0000ab80 <MiApp_ConnectionMode>:
 *      None
 *
 *****************************************************************************************/ 
void MiApp_ConnectionMode(INPUT uint8_t Mode)
{
    if( Mode > 3 )
    ab80:	2803      	cmp	r0, #3
    ab82:	d808      	bhi.n	ab96 <MiApp_ConnectionMode+0x16>
    {
        return;
    }
    ConnMode = Mode;
    ab84:	4b04      	ldr	r3, [pc, #16]	; (ab98 <MiApp_ConnectionMode+0x18>)
    ab86:	7018      	strb	r0, [r3, #0]
    P2PCapacityInfo = (P2PCapacityInfo & 0x0F) | (ConnMode << 4);
    ab88:	4a04      	ldr	r2, [pc, #16]	; (ab9c <MiApp_ConnectionMode+0x1c>)
    ab8a:	7811      	ldrb	r1, [r2, #0]
    ab8c:	230f      	movs	r3, #15
    ab8e:	400b      	ands	r3, r1
    ab90:	0100      	lsls	r0, r0, #4
    ab92:	4318      	orrs	r0, r3
    ab94:	7010      	strb	r0, [r2, #0]
    
    #if defined(ENABLE_NETWORK_FREEZER)
		PDS_Store(PDS_CONNECTION_MODE_ID);
    #endif
}
    ab96:	4770      	bx	lr
    ab98:	20000010 	.word	0x20000010
    ab9c:	200026b5 	.word	0x200026b5

0000aba0 <MiApp_SubscribeDataIndicationCallback>:
 *      None
 *
 *****************************************************************************************/      
bool  MiApp_SubscribeDataIndicationCallback(PacketIndCallback_t callback)
{
    if (NULL != callback)
    aba0:	2800      	cmp	r0, #0
    aba2:	d003      	beq.n	abac <MiApp_SubscribeDataIndicationCallback+0xc>
    {
        pktRxcallback = callback;
    aba4:	4b02      	ldr	r3, [pc, #8]	; (abb0 <MiApp_SubscribeDataIndicationCallback+0x10>)
    aba6:	6018      	str	r0, [r3, #0]
        return true;
    aba8:	2001      	movs	r0, #1
    }
    return false;
}
    abaa:	4770      	bx	lr
    return false;
    abac:	2000      	movs	r0, #0
    abae:	e7fc      	b.n	abaa <MiApp_SubscribeDataIndicationCallback+0xa>
    abb0:	2000028c 	.word	0x2000028c

0000abb4 <calculate_ToA>:
	}
}
#endif

uint16_t calculate_ToA(uint8_t payload_length)
{
    abb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    abb6:	46ce      	mov	lr, r9
    abb8:	4647      	mov	r7, r8
    abba:	b580      	push	{r7, lr}
    abbc:	b087      	sub	sp, #28
    abbe:	4680      	mov	r8, r0
	   Rev.7 - May 2020 */
	
	/* Tested only with EU868 channel plan SF = 7 to 12 , BW = 125 kHz */
	 
	    //LoRa Modem Settings
	    uint8_t spreadFactor = 0;
    abc0:	ab04      	add	r3, sp, #16
    abc2:	1dde      	adds	r6, r3, #7
    abc4:	2300      	movs	r3, #0
    abc6:	7033      	strb	r3, [r6, #0]
	    uint8_t bandWidth = 125;
	    uint8_t codingRate = 0;
    abc8:	aa04      	add	r2, sp, #16
    abca:	1d97      	adds	r7, r2, #6
    abcc:	7193      	strb	r3, [r2, #6]
	    bool ldro = false;   //LowDataRateOptimize
	    
	    //Packet Configuration
	    uint16_t programmedPreambleLength = 0;
    abce:	ad05      	add	r5, sp, #20
    abd0:	802b      	strh	r3, [r5, #0]
	    bool implicitHeaderMode = 0; //Implicit or Explicit header
	    bool crcEnable = 0; //CRC
    abd2:	3303      	adds	r3, #3
    abd4:	4694      	mov	ip, r2
    abd6:	4463      	add	r3, ip
    abd8:	4699      	mov	r9, r3
    abda:	2300      	movs	r3, #0
    abdc:	464a      	mov	r2, r9
    abde:	7013      	strb	r3, [r2, #0]
		if(payload_length > 255)
		{
			payload_length = 255;
		}
			    
	    RADIO_GetAttr(SPREADING_FACTOR,(void *)&spreadFactor);
    abe0:	0031      	movs	r1, r6
    abe2:	2016      	movs	r0, #22
    abe4:	4c39      	ldr	r4, [pc, #228]	; (accc <calculate_ToA+0x118>)
    abe6:	47a0      	blx	r4
	    RADIO_GetAttr(PREAMBLE_LEN,(void *)&programmedPreambleLength);
    abe8:	0029      	movs	r1, r5
    abea:	2003      	movs	r0, #3
    abec:	47a0      	blx	r4
	    RADIO_GetAttr(CRC_ON,(void *)&crcEnable);
    abee:	4649      	mov	r1, r9
    abf0:	2014      	movs	r0, #20
    abf2:	47a0      	blx	r4
	    RADIO_GetAttr(ERROR_CODING_RATE,(void *)&codingRate);
    abf4:	0039      	movs	r1, r7
    abf6:	200b      	movs	r0, #11
    abf8:	47a0      	blx	r4


	    symbolRate = (bandWidth * 1000) /  ((float)(1 << spreadFactor));
    abfa:	7836      	ldrb	r6, [r6, #0]
    abfc:	2001      	movs	r0, #1
    abfe:	40b0      	lsls	r0, r6
    ac00:	4b33      	ldr	r3, [pc, #204]	; (acd0 <calculate_ToA+0x11c>)
    ac02:	4798      	blx	r3
    ac04:	1c01      	adds	r1, r0, #0
    ac06:	4c33      	ldr	r4, [pc, #204]	; (acd4 <calculate_ToA+0x120>)
    ac08:	4833      	ldr	r0, [pc, #204]	; (acd8 <calculate_ToA+0x124>)
    ac0a:	47a0      	blx	r4
    ac0c:	1c01      	adds	r1, r0, #0
	    symbolTime = 1000 / (symbolRate);
    ac0e:	4833      	ldr	r0, [pc, #204]	; (acdc <calculate_ToA+0x128>)
    ac10:	47a0      	blx	r4
    ac12:	1c04      	adds	r4, r0, #0
	    preambleDuration = (programmedPreambleLength + 4.25) * symbolTime;
    ac14:	8828      	ldrh	r0, [r5, #0]
    ac16:	4b32      	ldr	r3, [pc, #200]	; (ace0 <calculate_ToA+0x12c>)
    ac18:	4798      	blx	r3
    ac1a:	2200      	movs	r2, #0
    ac1c:	4b31      	ldr	r3, [pc, #196]	; (ace4 <calculate_ToA+0x130>)
    ac1e:	4d32      	ldr	r5, [pc, #200]	; (ace8 <calculate_ToA+0x134>)
    ac20:	47a8      	blx	r5
    ac22:	9000      	str	r0, [sp, #0]
    ac24:	9101      	str	r1, [sp, #4]
    ac26:	1c20      	adds	r0, r4, #0
    ac28:	4b30      	ldr	r3, [pc, #192]	; (acec <calculate_ToA+0x138>)
    ac2a:	4798      	blx	r3
    ac2c:	0002      	movs	r2, r0
    ac2e:	000b      	movs	r3, r1
    ac30:	9800      	ldr	r0, [sp, #0]
    ac32:	9901      	ldr	r1, [sp, #4]
    ac34:	4d2e      	ldr	r5, [pc, #184]	; (acf0 <calculate_ToA+0x13c>)
    ac36:	47a8      	blx	r5
    ac38:	4b2e      	ldr	r3, [pc, #184]	; (acf4 <calculate_ToA+0x140>)
    ac3a:	4798      	blx	r3
    ac3c:	9000      	str	r0, [sp, #0]

	    if ( ((spreadFactor == 12) && ((bandWidth == 125) || (bandWidth == 250))) || ((spreadFactor == 11) && (bandWidth == 125)))
    ac3e:	2e0c      	cmp	r6, #12
    ac40:	d040      	beq.n	acc4 <calculate_ToA+0x110>
    ac42:	0033      	movs	r3, r6
    ac44:	3b0b      	subs	r3, #11
    ac46:	425a      	negs	r2, r3
    ac48:	4153      	adcs	r3, r2
    ac4a:	b2db      	uxtb	r3, r3
	    {
		    ldro = false;
	    }
	    
	    ceilValueNumerator = (8 * payload_length - 4 * spreadFactor + 28 + 16 * crcEnable - 20 * implicitHeaderMode);
	    ceilValueDenominator= (4 * (spreadFactor - 2 * ldro));
    ac4c:	005b      	lsls	r3, r3, #1
    ac4e:	1af3      	subs	r3, r6, r3
    ac50:	009b      	lsls	r3, r3, #2
	    ceilValue = (ceilValueNumerator + ceilValueDenominator - 1.0) / ceilValueDenominator;
    ac52:	b2df      	uxtb	r7, r3
	    ceilValueNumerator = (8 * payload_length - 4 * spreadFactor + 28 + 16 * crcEnable - 20 * implicitHeaderMode);
    ac54:	4643      	mov	r3, r8
    ac56:	0058      	lsls	r0, r3, #1
    ac58:	1b80      	subs	r0, r0, r6
    ac5a:	3007      	adds	r0, #7
    ac5c:	ab04      	add	r3, sp, #16
    ac5e:	3303      	adds	r3, #3
    ac60:	781b      	ldrb	r3, [r3, #0]
    ac62:	009b      	lsls	r3, r3, #2
    ac64:	18c0      	adds	r0, r0, r3
    ac66:	0080      	lsls	r0, r0, #2
	    ceilValue = (ceilValueNumerator + ceilValueDenominator - 1.0) / ceilValueDenominator;
    ac68:	b280      	uxth	r0, r0
    ac6a:	19c0      	adds	r0, r0, r7
    ac6c:	4d1c      	ldr	r5, [pc, #112]	; (ace0 <calculate_ToA+0x12c>)
    ac6e:	47a8      	blx	r5
    ac70:	2200      	movs	r2, #0
    ac72:	4b21      	ldr	r3, [pc, #132]	; (acf8 <calculate_ToA+0x144>)
    ac74:	4e21      	ldr	r6, [pc, #132]	; (acfc <calculate_ToA+0x148>)
    ac76:	47b0      	blx	r6
    ac78:	9002      	str	r0, [sp, #8]
    ac7a:	9103      	str	r1, [sp, #12]
    ac7c:	0038      	movs	r0, r7
    ac7e:	47a8      	blx	r5
    ac80:	0002      	movs	r2, r0
    ac82:	000b      	movs	r3, r1
    ac84:	9802      	ldr	r0, [sp, #8]
    ac86:	9903      	ldr	r1, [sp, #12]
    ac88:	4e1d      	ldr	r6, [pc, #116]	; (ad00 <calculate_ToA+0x14c>)
    ac8a:	47b0      	blx	r6
    ac8c:	4b1d      	ldr	r3, [pc, #116]	; (ad04 <calculate_ToA+0x150>)
    ac8e:	4798      	blx	r3
	    
	    if ((ceilValue * (codingRate + 4)) > 0)
    ac90:	b282      	uxth	r2, r0
    ac92:	ab04      	add	r3, sp, #16
    ac94:	7998      	ldrb	r0, [r3, #6]
    ac96:	3004      	adds	r0, #4
    ac98:	4350      	muls	r0, r2
    ac9a:	2800      	cmp	r0, #0
    ac9c:	dd14      	ble.n	acc8 <calculate_ToA+0x114>
	    {
		    maxCeilValue = ceilValue * (codingRate + 4);
    ac9e:	4b0c      	ldr	r3, [pc, #48]	; (acd0 <calculate_ToA+0x11c>)
    aca0:	4798      	blx	r3
	    else
	    {
		    maxCeilValue = 0;
	    }

	    numberOfPayloadSymbols = 8 + maxCeilValue;
    aca2:	4e19      	ldr	r6, [pc, #100]	; (ad08 <calculate_ToA+0x154>)
    aca4:	2182      	movs	r1, #130	; 0x82
    aca6:	05c9      	lsls	r1, r1, #23
    aca8:	47b0      	blx	r6
	    payloadDuration = numberOfPayloadSymbols * symbolTime;
    acaa:	1c21      	adds	r1, r4, #0
    acac:	4b17      	ldr	r3, [pc, #92]	; (ad0c <calculate_ToA+0x158>)
    acae:	4798      	blx	r3
		
	    totalTimeOnAir = preambleDuration + payloadDuration;
    acb0:	9900      	ldr	r1, [sp, #0]
    acb2:	47b0      	blx	r6
		
		return ((uint16_t)totalTimeOnAir) ;
    acb4:	4b16      	ldr	r3, [pc, #88]	; (ad10 <calculate_ToA+0x15c>)
    acb6:	4798      	blx	r3
    acb8:	b280      	uxth	r0, r0
    acba:	b007      	add	sp, #28
    acbc:	bc0c      	pop	{r2, r3}
    acbe:	4690      	mov	r8, r2
    acc0:	4699      	mov	r9, r3
    acc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		    ldro =  true;
    acc4:	2301      	movs	r3, #1
    acc6:	e7c1      	b.n	ac4c <calculate_ToA+0x98>
		    maxCeilValue = 0;
    acc8:	2000      	movs	r0, #0
    acca:	e7ea      	b.n	aca2 <calculate_ToA+0xee>
    accc:	0000dbbd 	.word	0x0000dbbd
    acd0:	00014235 	.word	0x00014235
    acd4:	0001389d 	.word	0x0001389d
    acd8:	47f42400 	.word	0x47f42400
    acdc:	447a0000 	.word	0x447a0000
    ace0:	00015d7d 	.word	0x00015d7d
    ace4:	40110000 	.word	0x40110000
    ace8:	00014361 	.word	0x00014361
    acec:	00015e71 	.word	0x00015e71
    acf0:	000151e9 	.word	0x000151e9
    acf4:	00015f15 	.word	0x00015f15
    acf8:	3ff00000 	.word	0x3ff00000
    acfc:	000156e9 	.word	0x000156e9
    ad00:	00014981 	.word	0x00014981
    ad04:	0001337d 	.word	0x0001337d
    ad08:	00013579 	.word	0x00013579
    ad0c:	00013c7d 	.word	0x00013c7d
    ad10:	0001334d 	.word	0x0001334d

0000ad14 <P2PTasks>:
{
    ad14:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad16:	46de      	mov	lr, fp
    ad18:	4657      	mov	r7, sl
    ad1a:	464e      	mov	r6, r9
    ad1c:	4645      	mov	r5, r8
    ad1e:	b5e0      	push	{r5, r6, r7, lr}
    ad20:	b08b      	sub	sp, #44	; 0x2c
    MiMAC_Task();
    ad22:	4bb6      	ldr	r3, [pc, #728]	; (affc <P2PTasks+0x2e8>)
    ad24:	4798      	blx	r3
            if( indirectMessages[i].flags.bits.isValid )
    ad26:	4bb6      	ldr	r3, [pc, #728]	; (b000 <P2PTasks+0x2ec>)
    ad28:	7b9b      	ldrb	r3, [r3, #14]
    ad2a:	07db      	lsls	r3, r3, #31
    ad2c:	d423      	bmi.n	ad76 <P2PTasks+0x62>
    ad2e:	2391      	movs	r3, #145	; 0x91
    ad30:	005b      	lsls	r3, r3, #1
    ad32:	4ab3      	ldr	r2, [pc, #716]	; (b000 <P2PTasks+0x2ec>)
    ad34:	5cd3      	ldrb	r3, [r2, r3]
    ad36:	07db      	lsls	r3, r3, #31
    ad38:	d434      	bmi.n	ada4 <P2PTasks+0x90>
	ack_timeout_variable = calculate_ToA(PACKETLEN_ACK);
    ad3a:	2016      	movs	r0, #22
    ad3c:	4bb1      	ldr	r3, [pc, #708]	; (b004 <P2PTasks+0x2f0>)
    ad3e:	4798      	blx	r3
	ack_timeout_variable = (ack_timeout_variable + TOTAL_ACK_PROCESSING_DELAY) * 1000;
    ad40:	23fa      	movs	r3, #250	; 0xfa
    ad42:	009b      	lsls	r3, r3, #2
    ad44:	4358      	muls	r0, r3
    ad46:	4bb0      	ldr	r3, [pc, #704]	; (b008 <P2PTasks+0x2f4>)
    ad48:	469c      	mov	ip, r3
    ad4a:	4460      	add	r0, ip
    ad4c:	4baf      	ldr	r3, [pc, #700]	; (b00c <P2PTasks+0x2f8>)
    ad4e:	6018      	str	r0, [r3, #0]
	if((AckReqData) && (DataTxAckTimer.Val)) // AckReqData
    ad50:	4baf      	ldr	r3, [pc, #700]	; (b010 <P2PTasks+0x2fc>)
    ad52:	781b      	ldrb	r3, [r3, #0]
    ad54:	2b00      	cmp	r3, #0
    ad56:	d003      	beq.n	ad60 <P2PTasks+0x4c>
    ad58:	4bae      	ldr	r3, [pc, #696]	; (b014 <P2PTasks+0x300>)
    ad5a:	681b      	ldr	r3, [r3, #0]
    ad5c:	2b00      	cmp	r3, #0
    ad5e:	d13b      	bne.n	add8 <P2PTasks+0xc4>
    if( P2PStatus.bits.RxHasUserData == 0 && MiMAC_ReceivedPacket() )
    ad60:	4bad      	ldr	r3, [pc, #692]	; (b018 <P2PTasks+0x304>)
    ad62:	781b      	ldrb	r3, [r3, #0]
    ad64:	071b      	lsls	r3, r3, #28
    ad66:	d54c      	bpl.n	ae02 <P2PTasks+0xee>
}
    ad68:	b00b      	add	sp, #44	; 0x2c
    ad6a:	bc3c      	pop	{r2, r3, r4, r5}
    ad6c:	4690      	mov	r8, r2
    ad6e:	4699      	mov	r9, r3
    ad70:	46a2      	mov	sl, r4
    ad72:	46ab      	mov	fp, r5
    ad74:	bdf0      	pop	{r4, r5, r6, r7, pc}
                tmpTick.Val = MiWi_TickGet();
    ad76:	4ba9      	ldr	r3, [pc, #676]	; (b01c <P2PTasks+0x308>)
    ad78:	4798      	blx	r3
                if( MiWi_TickGetDiff(tmpTick, indirectMessages[i].TickStart) > INDIRECT_MESSAGE_TIMEOUT )
    ad7a:	4ba1      	ldr	r3, [pc, #644]	; (b000 <P2PTasks+0x2ec>)
    ad7c:	6819      	ldr	r1, [r3, #0]
    ad7e:	4ba8      	ldr	r3, [pc, #672]	; (b020 <P2PTasks+0x30c>)
    ad80:	4798      	blx	r3
    ad82:	4ba8      	ldr	r3, [pc, #672]	; (b024 <P2PTasks+0x310>)
    ad84:	4298      	cmp	r0, r3
    ad86:	d9d2      	bls.n	ad2e <P2PTasks+0x1a>
                    indirectMessages[i].flags.Val = 0x00;   
    ad88:	4b9d      	ldr	r3, [pc, #628]	; (b000 <P2PTasks+0x2ec>)
    ad8a:	2200      	movs	r2, #0
    ad8c:	739a      	strb	r2, [r3, #14]
                    indirectMessages[i].indirectConfCallback(indirectMessages[i].indirectDataHandle, TRANSACTION_EXPIRED, indirectMessages[i].PayLoad);
    ad8e:	001a      	movs	r2, r3
    ad90:	3210      	adds	r2, #16
    ad92:	2110      	movs	r1, #16
    ad94:	31ff      	adds	r1, #255	; 0xff
    ad96:	5c58      	ldrb	r0, [r3, r1]
    ad98:	3101      	adds	r1, #1
    ad9a:	585b      	ldr	r3, [r3, r1]
    ad9c:	390c      	subs	r1, #12
    ad9e:	39ff      	subs	r1, #255	; 0xff
    ada0:	4798      	blx	r3
    ada2:	e7c4      	b.n	ad2e <P2PTasks+0x1a>
                tmpTick.Val = MiWi_TickGet();
    ada4:	4b9d      	ldr	r3, [pc, #628]	; (b01c <P2PTasks+0x308>)
    ada6:	4798      	blx	r3
                if( MiWi_TickGetDiff(tmpTick, indirectMessages[i].TickStart) > INDIRECT_MESSAGE_TIMEOUT )
    ada8:	238a      	movs	r3, #138	; 0x8a
    adaa:	005b      	lsls	r3, r3, #1
    adac:	4a94      	ldr	r2, [pc, #592]	; (b000 <P2PTasks+0x2ec>)
    adae:	58d1      	ldr	r1, [r2, r3]
    adb0:	4b9b      	ldr	r3, [pc, #620]	; (b020 <P2PTasks+0x30c>)
    adb2:	4798      	blx	r3
    adb4:	4b9b      	ldr	r3, [pc, #620]	; (b024 <P2PTasks+0x310>)
    adb6:	4298      	cmp	r0, r3
    adb8:	d9bf      	bls.n	ad3a <P2PTasks+0x26>
                    indirectMessages[i].flags.Val = 0x00;   
    adba:	4b91      	ldr	r3, [pc, #580]	; (b000 <P2PTasks+0x2ec>)
    adbc:	2100      	movs	r1, #0
    adbe:	2291      	movs	r2, #145	; 0x91
    adc0:	0052      	lsls	r2, r2, #1
    adc2:	5499      	strb	r1, [r3, r2]
                    indirectMessages[i].indirectConfCallback(indirectMessages[i].indirectDataHandle, TRANSACTION_EXPIRED, indirectMessages[i].PayLoad);
    adc4:	001a      	movs	r2, r3
    adc6:	3225      	adds	r2, #37	; 0x25
    adc8:	32ff      	adds	r2, #255	; 0xff
    adca:	4997      	ldr	r1, [pc, #604]	; (b028 <P2PTasks+0x314>)
    adcc:	5c58      	ldrb	r0, [r3, r1]
    adce:	3101      	adds	r1, #1
    add0:	585b      	ldr	r3, [r3, r1]
    add2:	2105      	movs	r1, #5
    add4:	4798      	blx	r3
    add6:	e7b0      	b.n	ad3a <P2PTasks+0x26>
		tmpTick.Val = MiWi_TickGet();
    add8:	4b90      	ldr	r3, [pc, #576]	; (b01c <P2PTasks+0x308>)
    adda:	4798      	blx	r3
		if( MiWi_TickGetDiff(tmpTick, DataTxAckTimer) > ((ack_timeout_variable) * ACK_TIMEOUT_INTERVAL) )
    addc:	4b8d      	ldr	r3, [pc, #564]	; (b014 <P2PTasks+0x300>)
    adde:	6819      	ldr	r1, [r3, #0]
    ade0:	4b8f      	ldr	r3, [pc, #572]	; (b020 <P2PTasks+0x30c>)
    ade2:	4798      	blx	r3
    ade4:	4b89      	ldr	r3, [pc, #548]	; (b00c <P2PTasks+0x2f8>)
    ade6:	681b      	ldr	r3, [r3, #0]
    ade8:	4298      	cmp	r0, r3
    adea:	d9b9      	bls.n	ad60 <P2PTasks+0x4c>
			DataTxAckTimer.Val =0;
    adec:	2300      	movs	r3, #0
    adee:	4a89      	ldr	r2, [pc, #548]	; (b014 <P2PTasks+0x300>)
    adf0:	6013      	str	r3, [r2, #0]
			AckReqData = 0;
    adf2:	4a87      	ldr	r2, [pc, #540]	; (b010 <P2PTasks+0x2fc>)
    adf4:	7013      	strb	r3, [r2, #0]
			MiMAC_RetryPacket();
    adf6:	4b8d      	ldr	r3, [pc, #564]	; (b02c <P2PTasks+0x318>)
    adf8:	4798      	blx	r3
			printf("\r\n Ack Timeout\r\n");
    adfa:	488d      	ldr	r0, [pc, #564]	; (b030 <P2PTasks+0x31c>)
    adfc:	4b8d      	ldr	r3, [pc, #564]	; (b034 <P2PTasks+0x320>)
    adfe:	4798      	blx	r3
    ae00:	e7ae      	b.n	ad60 <P2PTasks+0x4c>
    if( P2PStatus.bits.RxHasUserData == 0 && MiMAC_ReceivedPacket() )
    ae02:	4b8d      	ldr	r3, [pc, #564]	; (b038 <P2PTasks+0x324>)
    ae04:	4798      	blx	r3
    ae06:	2800      	cmp	r0, #0
    ae08:	d0ae      	beq.n	ad68 <P2PTasks+0x54>
        FW_Stat = false;  // Used for SW_Generated ACK T PAN CO
    ae0a:	2200      	movs	r2, #0
    ae0c:	4b8b      	ldr	r3, [pc, #556]	; (b03c <P2PTasks+0x328>)
    ae0e:	701a      	strb	r2, [r3, #0]
            temp_bit = MACRxPacket.flags.bits.broadcast;
    ae10:	4b8b      	ldr	r3, [pc, #556]	; (b040 <P2PTasks+0x32c>)
    ae12:	7819      	ldrb	r1, [r3, #0]
    ae14:	074b      	lsls	r3, r1, #29
    ae16:	0fdb      	lsrs	r3, r3, #31
    ae18:	4a8a      	ldr	r2, [pc, #552]	; (b044 <P2PTasks+0x330>)
    ae1a:	7013      	strb	r3, [r2, #0]
            rxMessage.flags.bits.broadcast = temp_bit;
    ae1c:	2203      	movs	r2, #3
        rxMessage.flags.bits.secEn = MACRxPacket.flags.bits.secEn;
    ae1e:	08cc      	lsrs	r4, r1, #3
    ae20:	2001      	movs	r0, #1
    ae22:	4004      	ands	r4, r0
    ae24:	00e4      	lsls	r4, r4, #3
    ae26:	4013      	ands	r3, r2
        rxMessage.flags.bits.command = (MACRxPacket.flags.bits.packetType == PACKET_TYPE_COMMAND) ? 1:0;
    ae28:	400a      	ands	r2, r1
    ae2a:	3a01      	subs	r2, #1
    ae2c:	4255      	negs	r5, r2
    ae2e:	416a      	adcs	r2, r5
    ae30:	4002      	ands	r2, r0
    ae32:	0152      	lsls	r2, r2, #5
    ae34:	4323      	orrs	r3, r4
        rxMessage.flags.bits.srcPrsnt = MACRxPacket.flags.bits.sourcePrsnt;
    ae36:	09cc      	lsrs	r4, r1, #7
    ae38:	4020      	ands	r0, r4
    ae3a:	0180      	lsls	r0, r0, #6
    ae3c:	4313      	orrs	r3, r2
    ae3e:	4303      	orrs	r3, r0
    ae40:	4a81      	ldr	r2, [pc, #516]	; (b048 <P2PTasks+0x334>)
    ae42:	7013      	strb	r3, [r2, #0]
        if( MACRxPacket.flags.bits.sourcePrsnt )
    ae44:	b249      	sxtb	r1, r1
    ae46:	2900      	cmp	r1, #0
    ae48:	db36      	blt.n	aeb8 <P2PTasks+0x1a4>
            rxMessage.SourcePANID.Val = MACRxPacket.SourcePANID.Val;
    ae4a:	4a7d      	ldr	r2, [pc, #500]	; (b040 <P2PTasks+0x32c>)
    ae4c:	8a17      	ldrh	r7, [r2, #16]
    ae4e:	4b7e      	ldr	r3, [pc, #504]	; (b048 <P2PTasks+0x334>)
    ae50:	805f      	strh	r7, [r3, #2]
        rxMessage.PayloadSize = MACRxPacket.PayloadLen;
    ae52:	7b11      	ldrb	r1, [r2, #12]
    ae54:	7319      	strb	r1, [r3, #12]
        rxMessage.Payload = MACRxPacket.Payload;
    ae56:	6895      	ldr	r5, [r2, #8]
    ae58:	609d      	str	r5, [r3, #8]
            rxMessage.PacketLQI = MACRxPacket.LQIValue;
    ae5a:	7b90      	ldrb	r0, [r2, #14]
    ae5c:	4680      	mov	r8, r0
    ae5e:	7398      	strb	r0, [r3, #14]
            rxMessage.PacketRSSI = MACRxPacket.RSSIValue;
    ae60:	7b52      	ldrb	r2, [r2, #13]
    ae62:	4691      	mov	r9, r2
    ae64:	735a      	strb	r2, [r3, #13]
        if( rxMessage.flags.bits.command )
    ae66:	781b      	ldrb	r3, [r3, #0]
    ae68:	069b      	lsls	r3, r3, #26
    ae6a:	d400      	bmi.n	ae6e <P2PTasks+0x15a>
    ae6c:	e277      	b.n	b35e <P2PTasks+0x64a>
            switch( rxMessage.Payload[0] )
    ae6e:	782b      	ldrb	r3, [r5, #0]
    ae70:	b2da      	uxtb	r2, r3
    ae72:	2a83      	cmp	r2, #131	; 0x83
    ae74:	d100      	bne.n	ae78 <P2PTasks+0x164>
    ae76:	e210      	b.n	b29a <P2PTasks+0x586>
    ae78:	d923      	bls.n	aec2 <P2PTasks+0x1ae>
    ae7a:	b2da      	uxtb	r2, r3
    ae7c:	2a91      	cmp	r2, #145	; 0x91
    ae7e:	d100      	bne.n	ae82 <P2PTasks+0x16e>
    ae80:	e174      	b.n	b16c <P2PTasks+0x458>
    ae82:	d935      	bls.n	aef0 <P2PTasks+0x1dc>
    ae84:	b2da      	uxtb	r2, r3
    ae86:	2a92      	cmp	r2, #146	; 0x92
    ae88:	d100      	bne.n	ae8c <P2PTasks+0x178>
    ae8a:	e1e1      	b.n	b250 <P2PTasks+0x53c>
    ae8c:	2a97      	cmp	r2, #151	; 0x97
    ae8e:	d11f      	bne.n	aed0 <P2PTasks+0x1bc>
                            if( P2PStatus.bits.Resync )
    ae90:	4b61      	ldr	r3, [pc, #388]	; (b018 <P2PTasks+0x304>)
    ae92:	781b      	ldrb	r3, [r3, #0]
    ae94:	069b      	lsls	r3, r3, #26
    ae96:	d500      	bpl.n	ae9a <P2PTasks+0x186>
    ae98:	e198      	b.n	b1cc <P2PTasks+0x4b8>
                                    for(; i < ActiveScanResultIndex; i++)
    ae9a:	4b6c      	ldr	r3, [pc, #432]	; (b04c <P2PTasks+0x338>)
    ae9c:	781b      	ldrb	r3, [r3, #0]
    ae9e:	469a      	mov	sl, r3
    aea0:	2b00      	cmp	r3, #0
    aea2:	d100      	bne.n	aea6 <P2PTasks+0x192>
    aea4:	e1af      	b.n	b206 <P2PTasks+0x4f2>
                                        if( (ActiveScanResults[i].Channel == currentChannel) &&
    aea6:	4b6a      	ldr	r3, [pc, #424]	; (b050 <P2PTasks+0x33c>)
    aea8:	781b      	ldrb	r3, [r3, #0]
    aeaa:	469b      	mov	fp, r3
                                            isSameAddress(ActiveScanResults[i].Address, rxMessage.SourceAddress)
    aeac:	4b66      	ldr	r3, [pc, #408]	; (b048 <P2PTasks+0x334>)
    aeae:	685b      	ldr	r3, [r3, #4]
    aeb0:	9306      	str	r3, [sp, #24]
    aeb2:	4e68      	ldr	r6, [pc, #416]	; (b054 <P2PTasks+0x340>)
    aeb4:	2400      	movs	r4, #0
    aeb6:	e196      	b.n	b1e6 <P2PTasks+0x4d2>
            rxMessage.SourceAddress = MACRxPacket.SourceAddress;
    aeb8:	4b61      	ldr	r3, [pc, #388]	; (b040 <P2PTasks+0x32c>)
    aeba:	685a      	ldr	r2, [r3, #4]
    aebc:	4b62      	ldr	r3, [pc, #392]	; (b048 <P2PTasks+0x334>)
    aebe:	605a      	str	r2, [r3, #4]
    aec0:	e7c3      	b.n	ae4a <P2PTasks+0x136>
            switch( rxMessage.Payload[0] )
    aec2:	2a81      	cmp	r2, #129	; 0x81
    aec4:	d023      	beq.n	af0e <P2PTasks+0x1fa>
    aec6:	d900      	bls.n	aeca <P2PTasks+0x1b6>
    aec8:	e118      	b.n	b0fc <P2PTasks+0x3e8>
    aeca:	2b04      	cmp	r3, #4
    aecc:	d100      	bne.n	aed0 <P2PTasks+0x1bc>
    aece:	e1e4      	b.n	b29a <P2PTasks+0x586>
                    P2PStatus.bits.RxHasUserData = 1;
    aed0:	4c51      	ldr	r4, [pc, #324]	; (b018 <P2PTasks+0x304>)
    aed2:	7823      	ldrb	r3, [r4, #0]
    aed4:	2208      	movs	r2, #8
    aed6:	4313      	orrs	r3, r2
    aed8:	7023      	strb	r3, [r4, #0]
					pktRxcallback(&rxMessage);
    aeda:	4b5f      	ldr	r3, [pc, #380]	; (b058 <P2PTasks+0x344>)
    aedc:	681b      	ldr	r3, [r3, #0]
    aede:	485a      	ldr	r0, [pc, #360]	; (b048 <P2PTasks+0x334>)
    aee0:	4798      	blx	r3
					P2PStatus.bits.RxHasUserData = 0;
    aee2:	7823      	ldrb	r3, [r4, #0]
    aee4:	2208      	movs	r2, #8
    aee6:	4393      	bics	r3, r2
    aee8:	7023      	strb	r3, [r4, #0]
					MiMAC_DiscardPacket();
    aeea:	4b5c      	ldr	r3, [pc, #368]	; (b05c <P2PTasks+0x348>)
    aeec:	4798      	blx	r3
                    break;
    aeee:	e245      	b.n	b37c <P2PTasks+0x668>
            switch( rxMessage.Payload[0] )
    aef0:	2a87      	cmp	r2, #135	; 0x87
    aef2:	d1ed      	bne.n	aed0 <P2PTasks+0x1bc>
                        if(ConnMode > ENABLE_ACTIVE_SCAN_RSP)
    aef4:	4b5a      	ldr	r3, [pc, #360]	; (b060 <P2PTasks+0x34c>)
    aef6:	781b      	ldrb	r3, [r3, #0]
    aef8:	2b02      	cmp	r3, #2
    aefa:	d87b      	bhi.n	aff4 <P2PTasks+0x2e0>
                            if( currentChannel != rxMessage.Payload[1] )
    aefc:	786a      	ldrb	r2, [r5, #1]
    aefe:	4b54      	ldr	r3, [pc, #336]	; (b050 <P2PTasks+0x33c>)
    af00:	781b      	ldrb	r3, [r3, #0]
    af02:	429a      	cmp	r2, r3
    af04:	d100      	bne.n	af08 <P2PTasks+0x1f4>
    af06:	e0c7      	b.n	b098 <P2PTasks+0x384>
                                MiMAC_DiscardPacket();
    af08:	4b54      	ldr	r3, [pc, #336]	; (b05c <P2PTasks+0x348>)
    af0a:	4798      	blx	r3
                                break;
    af0c:	e236      	b.n	b37c <P2PTasks+0x668>
                                if( currentChannel != rxMessage.Payload[1] )
    af0e:	786a      	ldrb	r2, [r5, #1]
    af10:	4b4f      	ldr	r3, [pc, #316]	; (b050 <P2PTasks+0x33c>)
    af12:	781b      	ldrb	r3, [r3, #0]
    af14:	429a      	cmp	r2, r3
    af16:	d002      	beq.n	af1e <P2PTasks+0x20a>
                                    MiMAC_DiscardPacket();
    af18:	4b50      	ldr	r3, [pc, #320]	; (b05c <P2PTasks+0x348>)
    af1a:	4798      	blx	r3
                                    break;
    af1c:	e22e      	b.n	b37c <P2PTasks+0x668>
                                if( ConnMode == DISABLE_ALL_CONN )
    af1e:	4b50      	ldr	r3, [pc, #320]	; (b060 <P2PTasks+0x34c>)
    af20:	781b      	ldrb	r3, [r3, #0]
    af22:	2b03      	cmp	r3, #3
    af24:	d047      	beq.n	afb6 <P2PTasks+0x2a2>
                                    if( rxMessage.SourcePANID.Val != 0xFFFF &&
    af26:	4b4f      	ldr	r3, [pc, #316]	; (b064 <P2PTasks+0x350>)
    af28:	429f      	cmp	r7, r3
    af2a:	d006      	beq.n	af3a <P2PTasks+0x226>
                                        rxMessage.SourcePANID.Val != myPANID.Val &&
    af2c:	4b4e      	ldr	r3, [pc, #312]	; (b068 <P2PTasks+0x354>)
                                    if( rxMessage.SourcePANID.Val != 0xFFFF &&
    af2e:	881b      	ldrh	r3, [r3, #0]
    af30:	42bb      	cmp	r3, r7
    af32:	d002      	beq.n	af3a <P2PTasks+0x226>
                                        rxMessage.SourcePANID.Val != myPANID.Val &&
    af34:	2902      	cmp	r1, #2
    af36:	d900      	bls.n	af3a <P2PTasks+0x226>
    af38:	e235      	b.n	b3a6 <P2PTasks+0x692>
                                    status = AddConnection();
    af3a:	4b4c      	ldr	r3, [pc, #304]	; (b06c <P2PTasks+0x358>)
    af3c:	4798      	blx	r3
    af3e:	0005      	movs	r5, r0
                                if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    af40:	4b47      	ldr	r3, [pc, #284]	; (b060 <P2PTasks+0x34c>)
    af42:	781b      	ldrb	r3, [r3, #0]
    af44:	2b01      	cmp	r3, #1
    af46:	d039      	beq.n	afbc <P2PTasks+0x2a8>
                                dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(TX_BUFFER_SIZE));
    af48:	20e0      	movs	r0, #224	; 0xe0
    af4a:	4b49      	ldr	r3, [pc, #292]	; (b070 <P2PTasks+0x35c>)
    af4c:	4798      	blx	r3
    af4e:	1e04      	subs	r4, r0, #0
                                if (NULL == dataPtr)
    af50:	d100      	bne.n	af54 <P2PTasks+0x240>
    af52:	e709      	b.n	ad68 <P2PTasks+0x54>
                                dataPtr[dataLen++] = CMD_P2P_CONNECTION_RESPONSE;
    af54:	2391      	movs	r3, #145	; 0x91
    af56:	7003      	strb	r3, [r0, #0]
                                dataPtr[dataLen++] = status;
    af58:	7045      	strb	r5, [r0, #1]
    af5a:	2602      	movs	r6, #2
                                if( status == STATUS_SUCCESS ||
    af5c:	2d01      	cmp	r5, #1
    af5e:	d93d      	bls.n	afdc <P2PTasks+0x2c8>
                                MiMAC_DiscardPacket();
    af60:	4b3e      	ldr	r3, [pc, #248]	; (b05c <P2PTasks+0x348>)
    af62:	4798      	blx	r3
                                i = PHY_RandomReq();
    af64:	4b43      	ldr	r3, [pc, #268]	; (b074 <P2PTasks+0x360>)
    af66:	4798      	blx	r3
    af68:	b2c5      	uxtb	r5, r0
                                delay_s(i % (CONNECTION_INTERVAL-1));
    af6a:	2103      	movs	r1, #3
    af6c:	0028      	movs	r0, r5
    af6e:	4b42      	ldr	r3, [pc, #264]	; (b078 <P2PTasks+0x364>)
    af70:	4798      	blx	r3
    af72:	b2c9      	uxtb	r1, r1
    af74:	2900      	cmp	r1, #0
    af76:	d039      	beq.n	afec <P2PTasks+0x2d8>
    af78:	20fa      	movs	r0, #250	; 0xfa
    af7a:	0080      	lsls	r0, r0, #2
    af7c:	4368      	muls	r0, r5
    af7e:	2103      	movs	r1, #3
    af80:	4b3e      	ldr	r3, [pc, #248]	; (b07c <P2PTasks+0x368>)
    af82:	4798      	blx	r3
    af84:	0008      	movs	r0, r1
    af86:	4b3e      	ldr	r3, [pc, #248]	; (b080 <P2PTasks+0x36c>)
    af88:	4798      	blx	r3
                                        SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn, 
    af8a:	4b2f      	ldr	r3, [pc, #188]	; (b048 <P2PTasks+0x334>)
    af8c:	685a      	ldr	r2, [r3, #4]
    af8e:	8859      	ldrh	r1, [r3, #2]
    af90:	483c      	ldr	r0, [pc, #240]	; (b084 <P2PTasks+0x370>)
    af92:	9005      	str	r0, [sp, #20]
    af94:	2001      	movs	r0, #1
    af96:	9004      	str	r0, [sp, #16]
    af98:	2000      	movs	r0, #0
    af9a:	9003      	str	r0, [sp, #12]
    af9c:	9402      	str	r4, [sp, #8]
    af9e:	9601      	str	r6, [sp, #4]
    afa0:	781b      	ldrb	r3, [r3, #0]
    afa2:	071b      	lsls	r3, r3, #28
    afa4:	0fdb      	lsrs	r3, r3, #31
    afa6:	9300      	str	r3, [sp, #0]
    afa8:	2301      	movs	r3, #1
    afaa:	4c37      	ldr	r4, [pc, #220]	; (b088 <P2PTasks+0x374>)
    afac:	47a0      	blx	r4
								delay_ms (100);
    afae:	2064      	movs	r0, #100	; 0x64
    afb0:	4b33      	ldr	r3, [pc, #204]	; (b080 <P2PTasks+0x36c>)
    afb2:	4798      	blx	r3
                        break; 
    afb4:	e1e2      	b.n	b37c <P2PTasks+0x668>
                                    MiMAC_DiscardPacket();
    afb6:	4b29      	ldr	r3, [pc, #164]	; (b05c <P2PTasks+0x348>)
    afb8:	4798      	blx	r3
                                    break;
    afba:	e1df      	b.n	b37c <P2PTasks+0x668>
                                if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    afbc:	3801      	subs	r0, #1
    afbe:	b2c0      	uxtb	r0, r0
    afc0:	2801      	cmp	r0, #1
    afc2:	d9c1      	bls.n	af48 <P2PTasks+0x234>
                                dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(TX_BUFFER_SIZE));
    afc4:	20e0      	movs	r0, #224	; 0xe0
    afc6:	4b2a      	ldr	r3, [pc, #168]	; (b070 <P2PTasks+0x35c>)
    afc8:	4798      	blx	r3
    afca:	1e04      	subs	r4, r0, #0
                                if (NULL == dataPtr)
    afcc:	d100      	bne.n	afd0 <P2PTasks+0x2bc>
    afce:	e6cb      	b.n	ad68 <P2PTasks+0x54>
                                dataPtr[dataLen++] = CMD_P2P_CONNECTION_RESPONSE;
    afd0:	2391      	movs	r3, #145	; 0x91
    afd2:	7023      	strb	r3, [r4, #0]
                                dataPtr[dataLen++] = status;
    afd4:	3362      	adds	r3, #98	; 0x62
    afd6:	7063      	strb	r3, [r4, #1]
    afd8:	2602      	movs	r6, #2
    afda:	e7c1      	b.n	af60 <P2PTasks+0x24c>
                                    dataPtr[dataLen++] = P2PCapacityInfo;
    afdc:	4b2b      	ldr	r3, [pc, #172]	; (b08c <P2PTasks+0x378>)
    afde:	781b      	ldrb	r3, [r3, #0]
    afe0:	7083      	strb	r3, [r0, #2]
                                            dataPtr[dataLen++] = AdditionalNodeID[i];
    afe2:	4b2b      	ldr	r3, [pc, #172]	; (b090 <P2PTasks+0x37c>)
    afe4:	781b      	ldrb	r3, [r3, #0]
    afe6:	70c3      	strb	r3, [r0, #3]
    afe8:	3602      	adds	r6, #2
    afea:	e7b9      	b.n	af60 <P2PTasks+0x24c>
                                delay_s(i % (CONNECTION_INTERVAL-1));
    afec:	2001      	movs	r0, #1
    afee:	4b29      	ldr	r3, [pc, #164]	; (b094 <P2PTasks+0x380>)
    aff0:	4798      	blx	r3
    aff2:	e7ca      	b.n	af8a <P2PTasks+0x276>
                                MiMAC_DiscardPacket();
    aff4:	4b19      	ldr	r3, [pc, #100]	; (b05c <P2PTasks+0x348>)
    aff6:	4798      	blx	r3
                                break;
    aff8:	e1c0      	b.n	b37c <P2PTasks+0x668>
    affa:	46c0      	nop			; (mov r8, r8)
    affc:	00009f09 	.word	0x00009f09
    b000:	200026e0 	.word	0x200026e0
    b004:	0000abb5 	.word	0x0000abb5
    b008:	000c8708 	.word	0x000c8708
    b00c:	20000288 	.word	0x20000288
    b010:	20000273 	.word	0x20000273
    b014:	20002960 	.word	0x20002960
    b018:	200026dc 	.word	0x200026dc
    b01c:	0000ba15 	.word	0x0000ba15
    b020:	0000ba75 	.word	0x0000ba75
    b024:	016e3600 	.word	0x016e3600
    b028:	00000223 	.word	0x00000223
    b02c:	000097b5 	.word	0x000097b5
    b030:	00018158 	.word	0x00018158
    b034:	00016815 	.word	0x00016815
    b038:	000097f9 	.word	0x000097f9
    b03c:	200026c2 	.word	0x200026c2
    b040:	200026a0 	.word	0x200026a0
    b044:	200026c0 	.word	0x200026c0
    b048:	2000294c 	.word	0x2000294c
    b04c:	2000295c 	.word	0x2000295c
    b050:	20000011 	.word	0x20000011
    b054:	2000290c 	.word	0x2000290c
    b058:	2000028c 	.word	0x2000028c
    b05c:	00009779 	.word	0x00009779
    b060:	20000010 	.word	0x20000010
    b064:	0000ffff 	.word	0x0000ffff
    b068:	200026b8 	.word	0x200026b8
    b06c:	0000aa69 	.word	0x0000aa69
    b070:	0000b7d5 	.word	0x0000b7d5
    b074:	0000a371 	.word	0x0000a371
    b078:	00012fe9 	.word	0x00012fe9
    b07c:	000131bd 	.word	0x000131bd
    b080:	000044cd 	.word	0x000044cd
    b084:	0000a3ad 	.word	0x0000a3ad
    b088:	0000a519 	.word	0x0000a519
    b08c:	200026b5 	.word	0x200026b5
    b090:	2000000c 	.word	0x2000000c
    b094:	000044a1 	.word	0x000044a1
                            dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_P2P_ACTIVE_SCAN_RESPONSE));
    b098:	2010      	movs	r0, #16
    b09a:	4bc6      	ldr	r3, [pc, #792]	; (b3b4 <P2PTasks+0x6a0>)
    b09c:	4798      	blx	r3
    b09e:	1e04      	subs	r4, r0, #0
                            if (NULL == dataPtr)
    b0a0:	d100      	bne.n	b0a4 <P2PTasks+0x390>
    b0a2:	e661      	b.n	ad68 <P2PTasks+0x54>
                            dataPtr[dataLen++] = CMD_P2P_ACTIVE_SCAN_RESPONSE;
    b0a4:	2397      	movs	r3, #151	; 0x97
    b0a6:	7003      	strb	r3, [r0, #0]
                            dataPtr[dataLen++] = P2PCapacityInfo;
    b0a8:	4bc3      	ldr	r3, [pc, #780]	; (b3b8 <P2PTasks+0x6a4>)
    b0aa:	781b      	ldrb	r3, [r3, #0]
    b0ac:	7043      	strb	r3, [r0, #1]
                                    dataPtr[dataLen++] = (AdditionalNodeID[i]);
    b0ae:	4bc3      	ldr	r3, [pc, #780]	; (b3bc <P2PTasks+0x6a8>)
    b0b0:	781b      	ldrb	r3, [r3, #0]
    b0b2:	7083      	strb	r3, [r0, #2]
                            MiMAC_DiscardPacket();
    b0b4:	4bc2      	ldr	r3, [pc, #776]	; (b3c0 <P2PTasks+0x6ac>)
    b0b6:	4798      	blx	r3
							i = PHY_RandomReq();
    b0b8:	4bc2      	ldr	r3, [pc, #776]	; (b3c4 <P2PTasks+0x6b0>)
    b0ba:	4798      	blx	r3
							delay_ms(i*100);
    b0bc:	b2c3      	uxtb	r3, r0
    b0be:	2064      	movs	r0, #100	; 0x64
    b0c0:	4358      	muls	r0, r3
    b0c2:	2800      	cmp	r0, #0
    b0c4:	d016      	beq.n	b0f4 <P2PTasks+0x3e0>
    b0c6:	4bc0      	ldr	r3, [pc, #768]	; (b3c8 <P2PTasks+0x6b4>)
    b0c8:	4798      	blx	r3
                                    SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn, 
    b0ca:	4bc0      	ldr	r3, [pc, #768]	; (b3cc <P2PTasks+0x6b8>)
    b0cc:	685a      	ldr	r2, [r3, #4]
    b0ce:	8859      	ldrh	r1, [r3, #2]
    b0d0:	48bf      	ldr	r0, [pc, #764]	; (b3d0 <P2PTasks+0x6bc>)
    b0d2:	9005      	str	r0, [sp, #20]
    b0d4:	2001      	movs	r0, #1
    b0d6:	9004      	str	r0, [sp, #16]
    b0d8:	2000      	movs	r0, #0
    b0da:	9003      	str	r0, [sp, #12]
    b0dc:	9402      	str	r4, [sp, #8]
    b0de:	3003      	adds	r0, #3
    b0e0:	9001      	str	r0, [sp, #4]
    b0e2:	781b      	ldrb	r3, [r3, #0]
    b0e4:	071b      	lsls	r3, r3, #28
    b0e6:	0fdb      	lsrs	r3, r3, #31
    b0e8:	9300      	str	r3, [sp, #0]
    b0ea:	2301      	movs	r3, #1
    b0ec:	2000      	movs	r0, #0
    b0ee:	4cb9      	ldr	r4, [pc, #740]	; (b3d4 <P2PTasks+0x6c0>)
    b0f0:	47a0      	blx	r4
                        break;
    b0f2:	e143      	b.n	b37c <P2PTasks+0x668>
							delay_ms(i*100);
    b0f4:	2001      	movs	r0, #1
    b0f6:	4bb8      	ldr	r3, [pc, #736]	; (b3d8 <P2PTasks+0x6c4>)
    b0f8:	4798      	blx	r3
    b0fa:	e7e6      	b.n	b0ca <P2PTasks+0x3b6>
                            dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_P2P_CONNECTION_REMOVAL_RESPONSE));
    b0fc:	2010      	movs	r0, #16
    b0fe:	4bad      	ldr	r3, [pc, #692]	; (b3b4 <P2PTasks+0x6a0>)
    b100:	4798      	blx	r3
    b102:	4680      	mov	r8, r0
                            if (NULL == dataPtr)
    b104:	2800      	cmp	r0, #0
    b106:	d100      	bne.n	b10a <P2PTasks+0x3f6>
    b108:	e62e      	b.n	ad68 <P2PTasks+0x54>
                            dataPtr[dataLen++] = CMD_P2P_CONNECTION_REMOVAL_RESPONSE;
    b10a:	2392      	movs	r3, #146	; 0x92
    b10c:	7003      	strb	r3, [r0, #0]
                                    if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    b10e:	4baf      	ldr	r3, [pc, #700]	; (b3cc <P2PTasks+0x6b8>)
    b110:	685b      	ldr	r3, [r3, #4]
    b112:	9307      	str	r3, [sp, #28]
    b114:	4eb1      	ldr	r6, [pc, #708]	; (b3dc <P2PTasks+0x6c8>)
    b116:	2700      	movs	r7, #0
                            for(i = 0; i < CONNECTION_SIZE; i++)
    b118:	2400      	movs	r4, #0
                                if( ConnectionTable[i].status.bits.isValid )
    b11a:	0035      	movs	r5, r6
    b11c:	e006      	b.n	b12c <P2PTasks+0x418>
                            for(i = 0; i < CONNECTION_SIZE; i++)
    b11e:	3401      	adds	r4, #1
    b120:	b2e4      	uxtb	r4, r4
    b122:	3701      	adds	r7, #1
    b124:	360a      	adds	r6, #10
    b126:	2c05      	cmp	r4, #5
    b128:	d100      	bne.n	b12c <P2PTasks+0x418>
    b12a:	e179      	b.n	b420 <P2PTasks+0x70c>
                                if( ConnectionTable[i].status.bits.isValid )
    b12c:	9706      	str	r7, [sp, #24]
    b12e:	00bb      	lsls	r3, r7, #2
    b130:	19db      	adds	r3, r3, r7
    b132:	005b      	lsls	r3, r3, #1
    b134:	18eb      	adds	r3, r5, r3
    b136:	7a1b      	ldrb	r3, [r3, #8]
    b138:	09db      	lsrs	r3, r3, #7
    b13a:	d0f0      	beq.n	b11e <P2PTasks+0x40a>
                                    if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    b13c:	0031      	movs	r1, r6
    b13e:	9807      	ldr	r0, [sp, #28]
    b140:	4ba7      	ldr	r3, [pc, #668]	; (b3e0 <P2PTasks+0x6cc>)
    b142:	4798      	blx	r3
    b144:	2800      	cmp	r0, #0
    b146:	d0ea      	beq.n	b11e <P2PTasks+0x40a>
                                        ConnectionTable[i].status.Val = 0;
    b148:	9a06      	ldr	r2, [sp, #24]
    b14a:	0093      	lsls	r3, r2, #2
    b14c:	189d      	adds	r5, r3, r2
    b14e:	006d      	lsls	r5, r5, #1
    b150:	4ba2      	ldr	r3, [pc, #648]	; (b3dc <P2PTasks+0x6c8>)
    b152:	195d      	adds	r5, r3, r5
    b154:	2300      	movs	r3, #0
    b156:	722b      	strb	r3, [r5, #8]
                                        dataPtr[dataLen++] = STATUS_SUCCESS;
    b158:	4642      	mov	r2, r8
    b15a:	7053      	strb	r3, [r2, #1]
                            MiMAC_DiscardPacket();
    b15c:	4b98      	ldr	r3, [pc, #608]	; (b3c0 <P2PTasks+0x6ac>)
    b15e:	4798      	blx	r3
                            if( i == CONNECTION_SIZE ) 
    b160:	2c05      	cmp	r4, #5
    b162:	d001      	beq.n	b168 <P2PTasks+0x454>
                                        dataPtr[dataLen++] = STATUS_SUCCESS;
    b164:	2402      	movs	r4, #2
    b166:	e162      	b.n	b42e <P2PTasks+0x71a>
    b168:	2302      	movs	r3, #2
    b16a:	e15c      	b.n	b426 <P2PTasks+0x712>
                            switch( rxMessage.Payload[1] )
    b16c:	786b      	ldrb	r3, [r5, #1]
    b16e:	2b00      	cmp	r3, #0
    b170:	d014      	beq.n	b19c <P2PTasks+0x488>
    b172:	2b01      	cmp	r3, #1
    b174:	d10f      	bne.n	b196 <P2PTasks+0x482>
                                    if (EstConfCallback)
    b176:	4b9b      	ldr	r3, [pc, #620]	; (b3e4 <P2PTasks+0x6d0>)
    b178:	681b      	ldr	r3, [r3, #0]
    b17a:	2b00      	cmp	r3, #0
    b17c:	d004      	beq.n	b188 <P2PTasks+0x474>
                                        EstConfCallback(ALREADY_EXISTS);
    b17e:	2006      	movs	r0, #6
    b180:	4798      	blx	r3
                                        EstConfCallback = NULL;
    b182:	2200      	movs	r2, #0
    b184:	4b97      	ldr	r3, [pc, #604]	; (b3e4 <P2PTasks+0x6d0>)
    b186:	601a      	str	r2, [r3, #0]
                                        if( myPANID.Val == 0xFFFF )
    b188:	4b97      	ldr	r3, [pc, #604]	; (b3e8 <P2PTasks+0x6d4>)
    b18a:	881a      	ldrh	r2, [r3, #0]
    b18c:	4b97      	ldr	r3, [pc, #604]	; (b3ec <P2PTasks+0x6d8>)
    b18e:	429a      	cmp	r2, r3
    b190:	d00e      	beq.n	b1b0 <P2PTasks+0x49c>
                                    AddConnection();
    b192:	4b97      	ldr	r3, [pc, #604]	; (b3f0 <P2PTasks+0x6dc>)
    b194:	4798      	blx	r3
                        MiMAC_DiscardPacket();
    b196:	4b8a      	ldr	r3, [pc, #552]	; (b3c0 <P2PTasks+0x6ac>)
    b198:	4798      	blx	r3
                        break; 
    b19a:	e0ef      	b.n	b37c <P2PTasks+0x668>
                                    if (EstConfCallback)
    b19c:	4b91      	ldr	r3, [pc, #580]	; (b3e4 <P2PTasks+0x6d0>)
    b19e:	681b      	ldr	r3, [r3, #0]
    b1a0:	2b00      	cmp	r3, #0
    b1a2:	d0f1      	beq.n	b188 <P2PTasks+0x474>
                                        EstConfCallback(SUCCESS);
    b1a4:	2000      	movs	r0, #0
    b1a6:	4798      	blx	r3
                                        EstConfCallback = NULL;
    b1a8:	2200      	movs	r2, #0
    b1aa:	4b8e      	ldr	r3, [pc, #568]	; (b3e4 <P2PTasks+0x6d0>)
    b1ac:	601a      	str	r2, [r3, #0]
    b1ae:	e7eb      	b.n	b188 <P2PTasks+0x474>
                                            myPANID.Val = rxMessage.SourcePANID.Val;
    b1b0:	498d      	ldr	r1, [pc, #564]	; (b3e8 <P2PTasks+0x6d4>)
    b1b2:	4b86      	ldr	r3, [pc, #536]	; (b3cc <P2PTasks+0x6b8>)
    b1b4:	885b      	ldrh	r3, [r3, #2]
    b1b6:	800b      	strh	r3, [r1, #0]
                                                uint16_t tmp = 0xFFFF;
    b1b8:	201e      	movs	r0, #30
    b1ba:	ab02      	add	r3, sp, #8
    b1bc:	469c      	mov	ip, r3
    b1be:	4460      	add	r0, ip
    b1c0:	2301      	movs	r3, #1
    b1c2:	425b      	negs	r3, r3
    b1c4:	8003      	strh	r3, [r0, #0]
                                                MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    b1c6:	4b8b      	ldr	r3, [pc, #556]	; (b3f4 <P2PTasks+0x6e0>)
    b1c8:	4798      	blx	r3
    b1ca:	e7e2      	b.n	b192 <P2PTasks+0x47e>
                                P2PStatus.bits.Resync = 0;   
    b1cc:	4a8a      	ldr	r2, [pc, #552]	; (b3f8 <P2PTasks+0x6e4>)
    b1ce:	7813      	ldrb	r3, [r2, #0]
    b1d0:	2120      	movs	r1, #32
    b1d2:	438b      	bics	r3, r1
    b1d4:	7013      	strb	r3, [r2, #0]
                            MiMAC_DiscardPacket(); 
    b1d6:	4b7a      	ldr	r3, [pc, #488]	; (b3c0 <P2PTasks+0x6ac>)
    b1d8:	4798      	blx	r3
                        break;                
    b1da:	e0cf      	b.n	b37c <P2PTasks+0x668>
                                    for(; i < ActiveScanResultIndex; i++)
    b1dc:	3401      	adds	r4, #1
    b1de:	b2e4      	uxtb	r4, r4
    b1e0:	3610      	adds	r6, #16
    b1e2:	4554      	cmp	r4, sl
    b1e4:	d00d      	beq.n	b202 <P2PTasks+0x4ee>
                                        if( (ActiveScanResults[i].Channel == currentChannel) &&
    b1e6:	7833      	ldrb	r3, [r6, #0]
    b1e8:	455b      	cmp	r3, fp
    b1ea:	d1f7      	bne.n	b1dc <P2PTasks+0x4c8>
    b1ec:	8973      	ldrh	r3, [r6, #10]
    b1ee:	42bb      	cmp	r3, r7
    b1f0:	d1f4      	bne.n	b1dc <P2PTasks+0x4c8>
                                            isSameAddress(ActiveScanResults[i].Address, rxMessage.SourceAddress)
    b1f2:	1c70      	adds	r0, r6, #1
    b1f4:	9906      	ldr	r1, [sp, #24]
    b1f6:	4b7a      	ldr	r3, [pc, #488]	; (b3e0 <P2PTasks+0x6cc>)
    b1f8:	4798      	blx	r3
                                            (ActiveScanResults[i].PANID.Val == rxMessage.SourcePANID.Val) &&
    b1fa:	2800      	cmp	r0, #0
    b1fc:	d0ee      	beq.n	b1dc <P2PTasks+0x4c8>
                                    if( i == ActiveScanResultIndex && (i < ACTIVE_SCAN_RESULT_SIZE))
    b1fe:	45a2      	cmp	sl, r4
    b200:	d1e9      	bne.n	b1d6 <P2PTasks+0x4c2>
    b202:	2c03      	cmp	r4, #3
    b204:	d8e7      	bhi.n	b1d6 <P2PTasks+0x4c2>
                                        ActiveScanResults[ActiveScanResultIndex].Channel = currentChannel;
    b206:	497d      	ldr	r1, [pc, #500]	; (b3fc <P2PTasks+0x6e8>)
    b208:	4653      	mov	r3, sl
    b20a:	011b      	lsls	r3, r3, #4
    b20c:	4a7c      	ldr	r2, [pc, #496]	; (b400 <P2PTasks+0x6ec>)
    b20e:	7812      	ldrb	r2, [r2, #0]
    b210:	545a      	strb	r2, [r3, r1]
                                        ActiveScanResults[ActiveScanResultIndex].RSSIValue = rxMessage.PacketRSSI;
    b212:	18ca      	adds	r2, r1, r3
    b214:	4648      	mov	r0, r9
    b216:	7310      	strb	r0, [r2, #12]
                                        ActiveScanResults[ActiveScanResultIndex].LQIValue = rxMessage.PacketLQI;
    b218:	4640      	mov	r0, r8
    b21a:	7350      	strb	r0, [r2, #13]
                                            ActiveScanResults[ActiveScanResultIndex].PANID.Val = rxMessage.SourcePANID.Val;
    b21c:	8157      	strh	r7, [r2, #10]
                                            ActiveScanResults[ActiveScanResultIndex].Address[i] = rxMessage.SourceAddress[i];
    b21e:	4a6b      	ldr	r2, [pc, #428]	; (b3cc <P2PTasks+0x6b8>)
    b220:	6852      	ldr	r2, [r2, #4]
    b222:	3301      	adds	r3, #1
    b224:	185b      	adds	r3, r3, r1
    b226:	0010      	movs	r0, r2
    b228:	3008      	adds	r0, #8
    b22a:	7811      	ldrb	r1, [r2, #0]
    b22c:	7019      	strb	r1, [r3, #0]
    b22e:	3201      	adds	r2, #1
    b230:	3301      	adds	r3, #1
                                        for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    b232:	4290      	cmp	r0, r2
    b234:	d1f9      	bne.n	b22a <P2PTasks+0x516>
                                        ActiveScanResults[ActiveScanResultIndex].Capability.Val = rxMessage.Payload[1];
    b236:	786a      	ldrb	r2, [r5, #1]
    b238:	4653      	mov	r3, sl
    b23a:	0119      	lsls	r1, r3, #4
    b23c:	4b6f      	ldr	r3, [pc, #444]	; (b3fc <P2PTasks+0x6e8>)
    b23e:	185b      	adds	r3, r3, r1
    b240:	739a      	strb	r2, [r3, #14]
                                                ActiveScanResults[ActiveScanResultIndex].PeerInfo[i] = rxMessage.Payload[2+i];
    b242:	78aa      	ldrb	r2, [r5, #2]
    b244:	73da      	strb	r2, [r3, #15]
                                        ActiveScanResultIndex++;
    b246:	4653      	mov	r3, sl
    b248:	3301      	adds	r3, #1
    b24a:	4a6e      	ldr	r2, [pc, #440]	; (b404 <P2PTasks+0x6f0>)
    b24c:	7013      	strb	r3, [r2, #0]
    b24e:	e7c2      	b.n	b1d6 <P2PTasks+0x4c2>
                            if( rxMessage.Payload[1] == STATUS_SUCCESS )
    b250:	786b      	ldrb	r3, [r5, #1]
    b252:	2b00      	cmp	r3, #0
    b254:	d11e      	bne.n	b294 <P2PTasks+0x580>
                                        if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    b256:	4b5d      	ldr	r3, [pc, #372]	; (b3cc <P2PTasks+0x6b8>)
    b258:	685b      	ldr	r3, [r3, #4]
    b25a:	9306      	str	r3, [sp, #24]
    b25c:	4e5f      	ldr	r6, [pc, #380]	; (b3dc <P2PTasks+0x6c8>)
    b25e:	2700      	movs	r7, #0
                                    if( ConnectionTable[i].status.bits.isValid )
    b260:	0035      	movs	r5, r6
    b262:	e003      	b.n	b26c <P2PTasks+0x558>
    b264:	3701      	adds	r7, #1
    b266:	360a      	adds	r6, #10
                                for(i = 0; i < CONNECTION_SIZE; i++)
    b268:	2f05      	cmp	r7, #5
    b26a:	d013      	beq.n	b294 <P2PTasks+0x580>
                                    if( ConnectionTable[i].status.bits.isValid )
    b26c:	00bb      	lsls	r3, r7, #2
    b26e:	19db      	adds	r3, r3, r7
    b270:	005b      	lsls	r3, r3, #1
    b272:	18eb      	adds	r3, r5, r3
    b274:	7a1b      	ldrb	r3, [r3, #8]
    b276:	09db      	lsrs	r3, r3, #7
    b278:	d0f4      	beq.n	b264 <P2PTasks+0x550>
                                        if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    b27a:	0031      	movs	r1, r6
    b27c:	9806      	ldr	r0, [sp, #24]
    b27e:	4b58      	ldr	r3, [pc, #352]	; (b3e0 <P2PTasks+0x6cc>)
    b280:	4798      	blx	r3
    b282:	2800      	cmp	r0, #0
    b284:	d0ee      	beq.n	b264 <P2PTasks+0x550>
                                            ConnectionTable[i].status.Val = 0;
    b286:	00bb      	lsls	r3, r7, #2
    b288:	19dc      	adds	r4, r3, r7
    b28a:	0064      	lsls	r4, r4, #1
    b28c:	4b53      	ldr	r3, [pc, #332]	; (b3dc <P2PTasks+0x6c8>)
    b28e:	191c      	adds	r4, r3, r4
    b290:	2300      	movs	r3, #0
    b292:	7223      	strb	r3, [r4, #8]
                        MiMAC_DiscardPacket();
    b294:	4b4a      	ldr	r3, [pc, #296]	; (b3c0 <P2PTasks+0x6ac>)
    b296:	4798      	blx	r3
                        break;
    b298:	e070      	b.n	b37c <P2PTasks+0x668>
                            dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_TIME_SYNC_DATA_PACKET));
    b29a:	20e0      	movs	r0, #224	; 0xe0
    b29c:	4b45      	ldr	r3, [pc, #276]	; (b3b4 <P2PTasks+0x6a0>)
    b29e:	4798      	blx	r3
    b2a0:	1e04      	subs	r4, r0, #0
                            if (NULL == dataPtr)
    b2a2:	d100      	bne.n	b2a6 <P2PTasks+0x592>
    b2a4:	e560      	b.n	ad68 <P2PTasks+0x54>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    b2a6:	4b49      	ldr	r3, [pc, #292]	; (b3cc <P2PTasks+0x6b8>)
    b2a8:	685d      	ldr	r5, [r3, #4]
                                if( indirectMessages[i].flags.bits.isValid )
    b2aa:	4b57      	ldr	r3, [pc, #348]	; (b408 <P2PTasks+0x6f4>)
    b2ac:	7b9b      	ldrb	r3, [r3, #14]
    b2ae:	07db      	lsls	r3, r3, #31
    b2b0:	d505      	bpl.n	b2be <P2PTasks+0x5aa>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    b2b2:	0029      	movs	r1, r5
    b2b4:	4855      	ldr	r0, [pc, #340]	; (b40c <P2PTasks+0x6f8>)
    b2b6:	4b4a      	ldr	r3, [pc, #296]	; (b3e0 <P2PTasks+0x6cc>)
    b2b8:	4798      	blx	r3
    b2ba:	2800      	cmp	r0, #0
    b2bc:	d14c      	bne.n	b358 <P2PTasks+0x644>
                                if( indirectMessages[i].flags.bits.isValid )
    b2be:	2391      	movs	r3, #145	; 0x91
    b2c0:	005b      	lsls	r3, r3, #1
    b2c2:	4a51      	ldr	r2, [pc, #324]	; (b408 <P2PTasks+0x6f4>)
    b2c4:	5cd3      	ldrb	r3, [r2, r3]
    b2c6:	07db      	lsls	r3, r3, #31
    b2c8:	d505      	bpl.n	b2d6 <P2PTasks+0x5c2>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    b2ca:	0029      	movs	r1, r5
    b2cc:	4850      	ldr	r0, [pc, #320]	; (b410 <P2PTasks+0x6fc>)
    b2ce:	4b44      	ldr	r3, [pc, #272]	; (b3e0 <P2PTasks+0x6cc>)
    b2d0:	4798      	blx	r3
    b2d2:	2800      	cmp	r0, #0
    b2d4:	d110      	bne.n	b2f8 <P2PTasks+0x5e4>
                                        SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, isCommand, false, 
    b2d6:	4b3d      	ldr	r3, [pc, #244]	; (b3cc <P2PTasks+0x6b8>)
    b2d8:	8859      	ldrh	r1, [r3, #2]
    b2da:	4b4e      	ldr	r3, [pc, #312]	; (b414 <P2PTasks+0x700>)
    b2dc:	9305      	str	r3, [sp, #20]
    b2de:	2300      	movs	r3, #0
    b2e0:	9304      	str	r3, [sp, #16]
    b2e2:	9303      	str	r3, [sp, #12]
    b2e4:	9402      	str	r4, [sp, #8]
    b2e6:	9301      	str	r3, [sp, #4]
    b2e8:	9300      	str	r3, [sp, #0]
    b2ea:	002a      	movs	r2, r5
    b2ec:	2000      	movs	r0, #0
    b2ee:	4c39      	ldr	r4, [pc, #228]	; (b3d4 <P2PTasks+0x6c0>)
    b2f0:	47a0      	blx	r4
                            MiMAC_DiscardPacket();
    b2f2:	4b33      	ldr	r3, [pc, #204]	; (b3c0 <P2PTasks+0x6ac>)
    b2f4:	4798      	blx	r3
                        break;
    b2f6:	e041      	b.n	b37c <P2PTasks+0x668>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    b2f8:	4a45      	ldr	r2, [pc, #276]	; (b410 <P2PTasks+0x6fc>)
                                if( indirectMessages[i].flags.bits.isValid )
    b2fa:	2001      	movs	r0, #1
                                        for(j = 0; j < indirectMessages[i].PayLoadSize; j++)
    b2fc:	218a      	movs	r1, #138	; 0x8a
    b2fe:	0049      	lsls	r1, r1, #1
    b300:	4341      	muls	r1, r0
    b302:	4b41      	ldr	r3, [pc, #260]	; (b408 <P2PTasks+0x6f4>)
    b304:	185b      	adds	r3, r3, r1
    b306:	7bdb      	ldrb	r3, [r3, #15]
    b308:	2b00      	cmp	r3, #0
    b30a:	d00e      	beq.n	b32a <P2PTasks+0x616>
    b30c:	2600      	movs	r6, #0
                                            dataPtr[dataLen++] =indirectMessages[i].PayLoad[j];
    b30e:	000b      	movs	r3, r1
    b310:	493d      	ldr	r1, [pc, #244]	; (b408 <P2PTasks+0x6f4>)
    b312:	18c9      	adds	r1, r1, r3
                                        for(j = 0; j < indirectMessages[i].PayLoadSize; j++)
    b314:	000f      	movs	r7, r1
    b316:	370f      	adds	r7, #15
                                            dataPtr[dataLen++] =indirectMessages[i].PayLoad[j];
    b318:	1c73      	adds	r3, r6, #1
    b31a:	b2db      	uxtb	r3, r3
    b31c:	198d      	adds	r5, r1, r6
    b31e:	7c2d      	ldrb	r5, [r5, #16]
    b320:	55a5      	strb	r5, [r4, r6]
    b322:	001e      	movs	r6, r3
                                        for(j = 0; j < indirectMessages[i].PayLoadSize; j++)
    b324:	783d      	ldrb	r5, [r7, #0]
    b326:	429d      	cmp	r5, r3
    b328:	d8f6      	bhi.n	b318 <P2PTasks+0x604>
                                            SendPacket(false, indirectMessages[i].DestPANID, indirectMessages[i].DestAddress.DestLongAddress, isCommand, (bool)indirectMessages[i].flags.bits.isSecured,
    b32a:	258a      	movs	r5, #138	; 0x8a
    b32c:	006d      	lsls	r5, r5, #1
    b32e:	4368      	muls	r0, r5
    b330:	4d35      	ldr	r5, [pc, #212]	; (b408 <P2PTasks+0x6f4>)
    b332:	182d      	adds	r5, r5, r0
    b334:	88a9      	ldrh	r1, [r5, #4]
    b336:	4837      	ldr	r0, [pc, #220]	; (b414 <P2PTasks+0x700>)
    b338:	9005      	str	r0, [sp, #20]
    b33a:	2600      	movs	r6, #0
    b33c:	9604      	str	r6, [sp, #16]
    b33e:	9603      	str	r6, [sp, #12]
    b340:	9402      	str	r4, [sp, #8]
    b342:	9301      	str	r3, [sp, #4]
    b344:	7bab      	ldrb	r3, [r5, #14]
    b346:	071b      	lsls	r3, r3, #28
    b348:	0fdb      	lsrs	r3, r3, #31
    b34a:	9300      	str	r3, [sp, #0]
    b34c:	2300      	movs	r3, #0
    b34e:	2000      	movs	r0, #0
    b350:	4c20      	ldr	r4, [pc, #128]	; (b3d4 <P2PTasks+0x6c0>)
    b352:	47a0      	blx	r4
                                        indirectMessages[i].flags.Val = 0;   
    b354:	73ae      	strb	r6, [r5, #14]
                                        goto END_OF_SENDING_INDIRECT_MESSAGE;    
    b356:	e7cc      	b.n	b2f2 <P2PTasks+0x5de>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    b358:	4a2c      	ldr	r2, [pc, #176]	; (b40c <P2PTasks+0x6f8>)
                                if( indirectMessages[i].flags.bits.isValid )
    b35a:	2000      	movs	r0, #0
    b35c:	e7ce      	b.n	b2fc <P2PTasks+0x5e8>
            P2PStatus.bits.RxHasUserData = 1;
    b35e:	4c26      	ldr	r4, [pc, #152]	; (b3f8 <P2PTasks+0x6e4>)
    b360:	7823      	ldrb	r3, [r4, #0]
    b362:	2208      	movs	r2, #8
    b364:	4313      	orrs	r3, r2
    b366:	7023      	strb	r3, [r4, #0]
			pktRxcallback(&rxMessage);
    b368:	4b2b      	ldr	r3, [pc, #172]	; (b418 <P2PTasks+0x704>)
    b36a:	681b      	ldr	r3, [r3, #0]
    b36c:	4817      	ldr	r0, [pc, #92]	; (b3cc <P2PTasks+0x6b8>)
    b36e:	4798      	blx	r3
			P2PStatus.bits.RxHasUserData = 0;
    b370:	7823      	ldrb	r3, [r4, #0]
    b372:	2208      	movs	r2, #8
    b374:	4393      	bics	r3, r2
    b376:	7023      	strb	r3, [r4, #0]
			MiMAC_DiscardPacket();
    b378:	4b11      	ldr	r3, [pc, #68]	; (b3c0 <P2PTasks+0x6ac>)
    b37a:	4798      	blx	r3
        if( rxMessage.PayloadSize == 0  || P2PStatus.bits.SearchConnection || P2PStatus.bits.Resync )
    b37c:	4b13      	ldr	r3, [pc, #76]	; (b3cc <P2PTasks+0x6b8>)
    b37e:	7b1b      	ldrb	r3, [r3, #12]
    b380:	2b00      	cmp	r3, #0
    b382:	d008      	beq.n	b396 <P2PTasks+0x682>
    b384:	4b1c      	ldr	r3, [pc, #112]	; (b3f8 <P2PTasks+0x6e4>)
    b386:	781b      	ldrb	r3, [r3, #0]
    b388:	06db      	lsls	r3, r3, #27
    b38a:	d404      	bmi.n	b396 <P2PTasks+0x682>
    b38c:	4b1a      	ldr	r3, [pc, #104]	; (b3f8 <P2PTasks+0x6e4>)
    b38e:	781b      	ldrb	r3, [r3, #0]
    b390:	069b      	lsls	r3, r3, #26
    b392:	d400      	bmi.n	b396 <P2PTasks+0x682>
    b394:	e4e8      	b.n	ad68 <P2PTasks+0x54>
            P2PStatus.bits.RxHasUserData = 0;
    b396:	4a18      	ldr	r2, [pc, #96]	; (b3f8 <P2PTasks+0x6e4>)
    b398:	7813      	ldrb	r3, [r2, #0]
    b39a:	2108      	movs	r1, #8
    b39c:	438b      	bics	r3, r1
    b39e:	7013      	strb	r3, [r2, #0]
            MiMAC_DiscardPacket();
    b3a0:	4b07      	ldr	r3, [pc, #28]	; (b3c0 <P2PTasks+0x6ac>)
    b3a2:	4798      	blx	r3
    b3a4:	e4e0      	b.n	ad68 <P2PTasks+0x54>
                                if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    b3a6:	4b1d      	ldr	r3, [pc, #116]	; (b41c <P2PTasks+0x708>)
    b3a8:	781b      	ldrb	r3, [r3, #0]
    b3aa:	2b01      	cmp	r3, #1
    b3ac:	d100      	bne.n	b3b0 <P2PTasks+0x69c>
    b3ae:	e609      	b.n	afc4 <P2PTasks+0x2b0>
                                        status = STATUS_NOT_SAME_PAN;
    b3b0:	25f2      	movs	r5, #242	; 0xf2
    b3b2:	e5c9      	b.n	af48 <P2PTasks+0x234>
    b3b4:	0000b7d5 	.word	0x0000b7d5
    b3b8:	200026b5 	.word	0x200026b5
    b3bc:	2000000c 	.word	0x2000000c
    b3c0:	00009779 	.word	0x00009779
    b3c4:	0000a371 	.word	0x0000a371
    b3c8:	000044cd 	.word	0x000044cd
    b3cc:	2000294c 	.word	0x2000294c
    b3d0:	0000a3ad 	.word	0x0000a3ad
    b3d4:	0000a519 	.word	0x0000a519
    b3d8:	000044a1 	.word	0x000044a1
    b3dc:	20002668 	.word	0x20002668
    b3e0:	0000a5ed 	.word	0x0000a5ed
    b3e4:	200026bc 	.word	0x200026bc
    b3e8:	200026b8 	.word	0x200026b8
    b3ec:	0000ffff 	.word	0x0000ffff
    b3f0:	0000aa69 	.word	0x0000aa69
    b3f4:	00008f4d 	.word	0x00008f4d
    b3f8:	200026dc 	.word	0x200026dc
    b3fc:	2000290c 	.word	0x2000290c
    b400:	20000011 	.word	0x20000011
    b404:	2000295c 	.word	0x2000295c
    b408:	200026e0 	.word	0x200026e0
    b40c:	200026e6 	.word	0x200026e6
    b410:	200027fa 	.word	0x200027fa
    b414:	000075a9 	.word	0x000075a9
    b418:	2000028c 	.word	0x2000028c
    b41c:	20000010 	.word	0x20000010
                            MiMAC_DiscardPacket();
    b420:	4b0d      	ldr	r3, [pc, #52]	; (b458 <P2PTasks+0x744>)
    b422:	4798      	blx	r3
                            dataPtr[dataLen++] = CMD_P2P_CONNECTION_REMOVAL_RESPONSE;
    b424:	2301      	movs	r3, #1
                                dataPtr[dataLen++] = STATUS_ENTRY_NOT_EXIST;
    b426:	1c5c      	adds	r4, r3, #1
    b428:	22f0      	movs	r2, #240	; 0xf0
    b42a:	4641      	mov	r1, r8
    b42c:	54ca      	strb	r2, [r1, r3]
                                    SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn, 
    b42e:	4b0b      	ldr	r3, [pc, #44]	; (b45c <P2PTasks+0x748>)
    b430:	685a      	ldr	r2, [r3, #4]
    b432:	8859      	ldrh	r1, [r3, #2]
    b434:	480a      	ldr	r0, [pc, #40]	; (b460 <P2PTasks+0x74c>)
    b436:	9005      	str	r0, [sp, #20]
    b438:	2001      	movs	r0, #1
    b43a:	9004      	str	r0, [sp, #16]
    b43c:	2000      	movs	r0, #0
    b43e:	9003      	str	r0, [sp, #12]
    b440:	4640      	mov	r0, r8
    b442:	9002      	str	r0, [sp, #8]
    b444:	9401      	str	r4, [sp, #4]
    b446:	781b      	ldrb	r3, [r3, #0]
    b448:	071b      	lsls	r3, r3, #28
    b44a:	0fdb      	lsrs	r3, r3, #31
    b44c:	9300      	str	r3, [sp, #0]
    b44e:	2301      	movs	r3, #1
    b450:	2000      	movs	r0, #0
    b452:	4c04      	ldr	r4, [pc, #16]	; (b464 <P2PTasks+0x750>)
    b454:	47a0      	blx	r4
                            break;
    b456:	e791      	b.n	b37c <P2PTasks+0x668>
    b458:	00009779 	.word	0x00009779
    b45c:	2000294c 	.word	0x2000294c
    b460:	0000a3ad 	.word	0x0000a3ad
    b464:	0000a519 	.word	0x0000a519

0000b468 <MiApp_EstablishConnection>:
    {
    b468:	b5f0      	push	{r4, r5, r6, r7, lr}
    b46a:	46de      	mov	lr, fp
    b46c:	4657      	mov	r7, sl
    b46e:	464e      	mov	r6, r9
    b470:	4645      	mov	r5, r8
    b472:	b5e0      	push	{r5, r6, r7, lr}
    b474:	b08b      	sub	sp, #44	; 0x2c
    b476:	0016      	movs	r6, r2
    b478:	231f      	movs	r3, #31
    b47a:	aa02      	add	r2, sp, #8
    b47c:	4694      	mov	ip, r2
    b47e:	4463      	add	r3, ip
    b480:	7018      	strb	r0, [r3, #0]
        uint8_t    tmpConnectionMode = ConnMode;
    b482:	4c61      	ldr	r4, [pc, #388]	; (b608 <MiApp_EstablishConnection+0x1a0>)
    b484:	7823      	ldrb	r3, [r4, #0]
    b486:	9308      	str	r3, [sp, #32]
        tick1.Val = MiWi_TickGet();
    b488:	4d60      	ldr	r5, [pc, #384]	; (b60c <MiApp_EstablishConnection+0x1a4>)
    b48a:	47a8      	blx	r5
    b48c:	4b60      	ldr	r3, [pc, #384]	; (b610 <MiApp_EstablishConnection+0x1a8>)
    b48e:	6018      	str	r0, [r3, #0]
        t1.Val = MiWi_TickGet();
    b490:	47a8      	blx	r5
        t1.Val -= (ONE_SECOND);
    b492:	4b60      	ldr	r3, [pc, #384]	; (b614 <MiApp_EstablishConnection+0x1ac>)
    b494:	18c5      	adds	r5, r0, r3
        ConnMode = ENABLE_ALL_CONN;
    b496:	2300      	movs	r3, #0
    b498:	7023      	strb	r3, [r4, #0]
        P2PStatus.bits.SearchConnection = 1;
    b49a:	4a5f      	ldr	r2, [pc, #380]	; (b618 <MiApp_EstablishConnection+0x1b0>)
    b49c:	7813      	ldrb	r3, [r2, #0]
    b49e:	2110      	movs	r1, #16
    b4a0:	430b      	orrs	r3, r1
    b4a2:	7013      	strb	r3, [r2, #0]
        EstConfCallback = ConfCallback;
    b4a4:	4b5d      	ldr	r3, [pc, #372]	; (b61c <MiApp_EstablishConnection+0x1b4>)
    b4a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
    b4a8:	601a      	str	r2, [r3, #0]
        uint8_t    connectionInterval = 0;
    b4aa:	2400      	movs	r4, #0
        uint8_t    retry = CONNECTION_RETRY_TIMES;
    b4ac:	2703      	movs	r7, #3
        while( P2PStatus.bits.SearchConnection )
    b4ae:	4b5a      	ldr	r3, [pc, #360]	; (b618 <MiApp_EstablishConnection+0x1b0>)
    b4b0:	4699      	mov	r9, r3
            t2.Val = MiWi_TickGet();
    b4b2:	4b56      	ldr	r3, [pc, #344]	; (b60c <MiApp_EstablishConnection+0x1a4>)
    b4b4:	4698      	mov	r8, r3
    b4b6:	002b      	movs	r3, r5
    b4b8:	003d      	movs	r5, r7
    b4ba:	001f      	movs	r7, r3
        while( P2PStatus.bits.SearchConnection )
    b4bc:	e08c      	b.n	b5d8 <MiApp_EstablishConnection+0x170>
                if( retry-- == 0 )
    b4be:	1e6b      	subs	r3, r5, #1
    b4c0:	b2db      	uxtb	r3, r3
    b4c2:	9307      	str	r3, [sp, #28]
    b4c4:	2d00      	cmp	r5, #0
    b4c6:	d02d      	beq.n	b524 <MiApp_EstablishConnection+0xbc>
                MiApp_Set(CHANNEL, &Channel);
    b4c8:	211f      	movs	r1, #31
    b4ca:	ab02      	add	r3, sp, #8
    b4cc:	469c      	mov	ip, r3
    b4ce:	4461      	add	r1, ip
    b4d0:	2000      	movs	r0, #0
    b4d2:	4b53      	ldr	r3, [pc, #332]	; (b620 <MiApp_EstablishConnection+0x1b8>)
    b4d4:	4798      	blx	r3
                dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_P2P_CONNECTION_REQUEST));
    b4d6:	2010      	movs	r0, #16
    b4d8:	4b52      	ldr	r3, [pc, #328]	; (b624 <MiApp_EstablishConnection+0x1bc>)
    b4da:	4798      	blx	r3
    b4dc:	1e07      	subs	r7, r0, #0
                if (NULL == dataPtr)
    b4de:	d045      	beq.n	b56c <MiApp_EstablishConnection+0x104>
                dataPtr[dataLen++] = CMD_P2P_CONNECTION_REQUEST;
    b4e0:	2381      	movs	r3, #129	; 0x81
    b4e2:	7003      	strb	r3, [r0, #0]
                dataPtr[dataLen++] = currentChannel;
    b4e4:	4b50      	ldr	r3, [pc, #320]	; (b628 <MiApp_EstablishConnection+0x1c0>)
    b4e6:	781b      	ldrb	r3, [r3, #0]
    b4e8:	7043      	strb	r3, [r0, #1]
                dataPtr[dataLen++] = P2PCapacityInfo;
    b4ea:	4b50      	ldr	r3, [pc, #320]	; (b62c <MiApp_EstablishConnection+0x1c4>)
    b4ec:	781b      	ldrb	r3, [r3, #0]
    b4ee:	7083      	strb	r3, [r0, #2]
                            dataPtr[dataLen++] = AdditionalNodeID[i];
    b4f0:	4b4f      	ldr	r3, [pc, #316]	; (b630 <MiApp_EstablishConnection+0x1c8>)
    b4f2:	781b      	ldrb	r3, [r3, #0]
    b4f4:	70c3      	strb	r3, [r0, #3]
                        uint16_t DestinationAddress16 = ((addr[1] << 8) + addr[0]);	
    b4f6:	7872      	ldrb	r2, [r6, #1]
    b4f8:	0212      	lsls	r2, r2, #8
    b4fa:	7833      	ldrb	r3, [r6, #0]
    b4fc:	189b      	adds	r3, r3, r2
                        if( DestinationAddress16 == 0xFFFF )
    b4fe:	b29b      	uxth	r3, r3
    b500:	4a4c      	ldr	r2, [pc, #304]	; (b634 <MiApp_EstablishConnection+0x1cc>)
    b502:	4293      	cmp	r3, r2
    b504:	d015      	beq.n	b532 <MiApp_EstablishConnection+0xca>
							MiApp_Set(CHANNEL, &Channel);
    b506:	211f      	movs	r1, #31
    b508:	ab02      	add	r3, sp, #8
    b50a:	469c      	mov	ip, r3
    b50c:	4461      	add	r1, ip
    b50e:	2000      	movs	r0, #0
    b510:	4b43      	ldr	r3, [pc, #268]	; (b620 <MiApp_EstablishConnection+0x1b8>)
    b512:	4798      	blx	r3
								  if (addr[j] != ActiveScanResults[i].Address[j])
    b514:	7833      	ldrb	r3, [r6, #0]
    b516:	469b      	mov	fp, r3
    b518:	4b47      	ldr	r3, [pc, #284]	; (b638 <MiApp_EstablishConnection+0x1d0>)
    b51a:	0035      	movs	r5, r6
    b51c:	3508      	adds	r5, #8
    b51e:	46bc      	mov	ip, r7
    b520:	001f      	movs	r7, r3
    b522:	e030      	b.n	b586 <MiApp_EstablishConnection+0x11e>
                    P2PStatus.bits.SearchConnection = 0;
    b524:	4a3c      	ldr	r2, [pc, #240]	; (b618 <MiApp_EstablishConnection+0x1b0>)
    b526:	7813      	ldrb	r3, [r2, #0]
    b528:	2110      	movs	r1, #16
    b52a:	438b      	bics	r3, r1
    b52c:	7013      	strb	r3, [r2, #0]
                    return 0xFF;
    b52e:	24ff      	movs	r4, #255	; 0xff
    b530:	e01c      	b.n	b56c <MiApp_EstablishConnection+0x104>
                            SendPacket(true, myPANID, NULL, true, false, dataLen, dataPtr,0, true, CommandConfCallback);
    b532:	4b42      	ldr	r3, [pc, #264]	; (b63c <MiApp_EstablishConnection+0x1d4>)
    b534:	8819      	ldrh	r1, [r3, #0]
    b536:	4b42      	ldr	r3, [pc, #264]	; (b640 <MiApp_EstablishConnection+0x1d8>)
    b538:	9305      	str	r3, [sp, #20]
    b53a:	2301      	movs	r3, #1
    b53c:	9304      	str	r3, [sp, #16]
    b53e:	2300      	movs	r3, #0
    b540:	9303      	str	r3, [sp, #12]
    b542:	9002      	str	r0, [sp, #8]
    b544:	2204      	movs	r2, #4
    b546:	9201      	str	r2, [sp, #4]
    b548:	9300      	str	r3, [sp, #0]
    b54a:	3301      	adds	r3, #1
    b54c:	2200      	movs	r2, #0
    b54e:	2001      	movs	r0, #1
    b550:	4c3c      	ldr	r4, [pc, #240]	; (b644 <MiApp_EstablishConnection+0x1dc>)
    b552:	47a0      	blx	r4
                t1.Val = t2.Val;
    b554:	9f06      	ldr	r7, [sp, #24]
                if( retry-- == 0 )
    b556:	9d07      	ldr	r5, [sp, #28]
                connectionInterval = CONNECTION_INTERVAL-1;
    b558:	2403      	movs	r4, #3
    b55a:	e039      	b.n	b5d0 <MiApp_EstablishConnection+0x168>
        ConnMode = tmpConnectionMode;
    b55c:	4b2a      	ldr	r3, [pc, #168]	; (b608 <MiApp_EstablishConnection+0x1a0>)
    b55e:	466a      	mov	r2, sp
    b560:	2120      	movs	r1, #32
    b562:	1852      	adds	r2, r2, r1
    b564:	7812      	ldrb	r2, [r2, #0]
    b566:	701a      	strb	r2, [r3, #0]
        return LatestConnection;
    b568:	4b37      	ldr	r3, [pc, #220]	; (b648 <MiApp_EstablishConnection+0x1e0>)
    b56a:	781c      	ldrb	r4, [r3, #0]
    }
    b56c:	0020      	movs	r0, r4
    b56e:	b00b      	add	sp, #44	; 0x2c
    b570:	bc3c      	pop	{r2, r3, r4, r5}
    b572:	4690      	mov	r8, r2
    b574:	4699      	mov	r9, r3
    b576:	46a2      	mov	sl, r4
    b578:	46ab      	mov	fp, r5
    b57a:	bdf0      	pop	{r4, r5, r6, r7, pc}
							for(i = 0; i < ACTIVE_SCAN_RESULT_SIZE; i++)
    b57c:	3401      	adds	r4, #1
    b57e:	b2e4      	uxtb	r4, r4
    b580:	3710      	adds	r7, #16
    b582:	2c04      	cmp	r4, #4
    b584:	d03b      	beq.n	b5fe <MiApp_EstablishConnection+0x196>
								  if (addr[j] != ActiveScanResults[i].Address[j])
    b586:	787b      	ldrb	r3, [r7, #1]
    b588:	455b      	cmp	r3, fp
    b58a:	d1f7      	bne.n	b57c <MiApp_EstablishConnection+0x114>
    b58c:	1c73      	adds	r3, r6, #1
    b58e:	1cba      	adds	r2, r7, #2
    b590:	7818      	ldrb	r0, [r3, #0]
    b592:	7811      	ldrb	r1, [r2, #0]
    b594:	4288      	cmp	r0, r1
    b596:	d1f1      	bne.n	b57c <MiApp_EstablishConnection+0x114>
    b598:	3301      	adds	r3, #1
    b59a:	3201      	adds	r2, #1
								for(j = 0; j < MY_ADDRESS_LENGTH; j++)
    b59c:	42ab      	cmp	r3, r5
    b59e:	d1f7      	bne.n	b590 <MiApp_EstablishConnection+0x128>
    b5a0:	4667      	mov	r7, ip
								SendPacket(false, ActiveScanResults[i].PANID, ActiveScanResults[i].Address, true, false, 
    b5a2:	0124      	lsls	r4, r4, #4
    b5a4:	1c62      	adds	r2, r4, #1
    b5a6:	4b24      	ldr	r3, [pc, #144]	; (b638 <MiApp_EstablishConnection+0x1d0>)
    b5a8:	18d2      	adds	r2, r2, r3
    b5aa:	191b      	adds	r3, r3, r4
    b5ac:	8959      	ldrh	r1, [r3, #10]
    b5ae:	4b24      	ldr	r3, [pc, #144]	; (b640 <MiApp_EstablishConnection+0x1d8>)
    b5b0:	9305      	str	r3, [sp, #20]
    b5b2:	2301      	movs	r3, #1
    b5b4:	9304      	str	r3, [sp, #16]
    b5b6:	2300      	movs	r3, #0
    b5b8:	9303      	str	r3, [sp, #12]
    b5ba:	9702      	str	r7, [sp, #8]
    b5bc:	2004      	movs	r0, #4
    b5be:	9001      	str	r0, [sp, #4]
    b5c0:	9300      	str	r3, [sp, #0]
    b5c2:	3301      	adds	r3, #1
    b5c4:	2000      	movs	r0, #0
    b5c6:	4c1f      	ldr	r4, [pc, #124]	; (b644 <MiApp_EstablishConnection+0x1dc>)
    b5c8:	47a0      	blx	r4
                t1.Val = t2.Val;
    b5ca:	9f06      	ldr	r7, [sp, #24]
                if( retry-- == 0 )
    b5cc:	9d07      	ldr	r5, [sp, #28]
                connectionInterval = CONNECTION_INTERVAL-1;
    b5ce:	2403      	movs	r4, #3
            P2PTasks();
    b5d0:	4b1e      	ldr	r3, [pc, #120]	; (b64c <MiApp_EstablishConnection+0x1e4>)
    b5d2:	4798      	blx	r3
			SYSTEM_RunTasks();
    b5d4:	4b1e      	ldr	r3, [pc, #120]	; (b650 <MiApp_EstablishConnection+0x1e8>)
    b5d6:	4798      	blx	r3
        while( P2PStatus.bits.SearchConnection )
    b5d8:	464b      	mov	r3, r9
    b5da:	781b      	ldrb	r3, [r3, #0]
    b5dc:	06db      	lsls	r3, r3, #27
    b5de:	d5bd      	bpl.n	b55c <MiApp_EstablishConnection+0xf4>
            t2.Val = MiWi_TickGet();
    b5e0:	47c0      	blx	r8
            if( MiWi_TickGetDiff(t2, t1) > (ONE_SECOND) )
    b5e2:	0039      	movs	r1, r7
    b5e4:	9006      	str	r0, [sp, #24]
    b5e6:	4b1b      	ldr	r3, [pc, #108]	; (b654 <MiApp_EstablishConnection+0x1ec>)
    b5e8:	4798      	blx	r3
    b5ea:	4b1b      	ldr	r3, [pc, #108]	; (b658 <MiApp_EstablishConnection+0x1f0>)
    b5ec:	4298      	cmp	r0, r3
    b5ee:	d9ef      	bls.n	b5d0 <MiApp_EstablishConnection+0x168>
                if( connectionInterval-- > 0 )
    b5f0:	2c00      	cmp	r4, #0
    b5f2:	d100      	bne.n	b5f6 <MiApp_EstablishConnection+0x18e>
    b5f4:	e763      	b.n	b4be <MiApp_EstablishConnection+0x56>
    b5f6:	3c01      	subs	r4, #1
    b5f8:	b2e4      	uxtb	r4, r4
                t1.Val = t2.Val;
    b5fa:	9f06      	ldr	r7, [sp, #24]
    b5fc:	e7ec      	b.n	b5d8 <MiApp_EstablishConnection+0x170>
    b5fe:	9f06      	ldr	r7, [sp, #24]
                if( retry-- == 0 )
    b600:	9d07      	ldr	r5, [sp, #28]
                connectionInterval = CONNECTION_INTERVAL-1;
    b602:	3c01      	subs	r4, #1
    b604:	e7e4      	b.n	b5d0 <MiApp_EstablishConnection+0x168>
    b606:	46c0      	nop			; (mov r8, r8)
    b608:	20000010 	.word	0x20000010
    b60c:	0000ba15 	.word	0x0000ba15
    b610:	20002908 	.word	0x20002908
    b614:	fff0bdc0 	.word	0xfff0bdc0
    b618:	200026dc 	.word	0x200026dc
    b61c:	200026bc 	.word	0x200026bc
    b620:	0000a749 	.word	0x0000a749
    b624:	0000b7d5 	.word	0x0000b7d5
    b628:	20000011 	.word	0x20000011
    b62c:	200026b5 	.word	0x200026b5
    b630:	2000000c 	.word	0x2000000c
    b634:	0000ffff 	.word	0x0000ffff
    b638:	2000290c 	.word	0x2000290c
    b63c:	200026b8 	.word	0x200026b8
    b640:	0000a3ad 	.word	0x0000a3ad
    b644:	0000a519 	.word	0x0000a519
    b648:	20002664 	.word	0x20002664
    b64c:	0000ad15 	.word	0x0000ad15
    b650:	0000d159 	.word	0x0000d159
    b654:	0000ba75 	.word	0x0000ba75
    b658:	000f4240 	.word	0x000f4240

0000b65c <MiApp_SearchConnection>:
    {
    b65c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b65e:	46d6      	mov	lr, sl
    b660:	464f      	mov	r7, r9
    b662:	4646      	mov	r6, r8
    b664:	b5c0      	push	{r6, r7, lr}
    b666:	b08a      	sub	sp, #40	; 0x28
    b668:	4690      	mov	r8, r2
        uint8_t backupChannel = currentChannel;
    b66a:	4b3d      	ldr	r3, [pc, #244]	; (b760 <MiApp_SearchConnection+0x104>)
    b66c:	781a      	ldrb	r2, [r3, #0]
    b66e:	231e      	movs	r3, #30
    b670:	ac02      	add	r4, sp, #8
    b672:	46a4      	mov	ip, r4
    b674:	4463      	add	r3, ip
    b676:	701a      	strb	r2, [r3, #0]
            ActiveScanResults[i].Channel = 0xFF;
    b678:	4b3a      	ldr	r3, [pc, #232]	; (b764 <MiApp_SearchConnection+0x108>)
    b67a:	22ff      	movs	r2, #255	; 0xff
    b67c:	701a      	strb	r2, [r3, #0]
    b67e:	741a      	strb	r2, [r3, #16]
    b680:	2420      	movs	r4, #32
    b682:	551a      	strb	r2, [r3, r4]
    b684:	3410      	adds	r4, #16
    b686:	551a      	strb	r2, [r3, r4]
        ActiveScanResultIndex = 0;
    b688:	2300      	movs	r3, #0
    b68a:	4a37      	ldr	r2, [pc, #220]	; (b768 <MiApp_SearchConnection+0x10c>)
    b68c:	7013      	strb	r3, [r2, #0]
        i = 0;
    b68e:	221f      	movs	r2, #31
    b690:	4462      	add	r2, ip
    b692:	7013      	strb	r3, [r2, #0]
		scan_symbols =   ABASESUPERFRAMEDURATION *((1<<scan_duration) + 1);
    b694:	3301      	adds	r3, #1
    b696:	4083      	lsls	r3, r0
    b698:	3301      	adds	r3, #1
    b69a:	011d      	lsls	r5, r3, #4
    b69c:	1aeb      	subs	r3, r5, r3
    b69e:	019b      	lsls	r3, r3, #6
		return SYMBOLS_TO_TICKS(scan_symbols);
    b6a0:	25fa      	movs	r5, #250	; 0xfa
    b6a2:	00ad      	lsls	r5, r5, #2
    b6a4:	435d      	muls	r5, r3
    b6a6:	2300      	movs	r3, #0
            if( ChannelMap & FULL_CHANNEL_MAP & (channelMask << i) )
    b6a8:	2603      	movs	r6, #3
    b6aa:	400e      	ands	r6, r1
    b6ac:	46b2      	mov	sl, r6
                printf("\r\nScan Channel ");
    b6ae:	4a2f      	ldr	r2, [pc, #188]	; (b76c <MiApp_SearchConnection+0x110>)
    b6b0:	4691      	mov	r9, r2
    b6b2:	e009      	b.n	b6c8 <MiApp_SearchConnection+0x6c>
            i++;
    b6b4:	221f      	movs	r2, #31
    b6b6:	ab02      	add	r3, sp, #8
    b6b8:	469c      	mov	ip, r3
    b6ba:	4462      	add	r2, ip
    b6bc:	7813      	ldrb	r3, [r2, #0]
    b6be:	3301      	adds	r3, #1
    b6c0:	b2db      	uxtb	r3, r3
    b6c2:	7013      	strb	r3, [r2, #0]
        while( i < 32 )
    b6c4:	2b1f      	cmp	r3, #31
    b6c6:	d83b      	bhi.n	b740 <MiApp_SearchConnection+0xe4>
            if( ChannelMap & FULL_CHANNEL_MAP & (channelMask << i) )
    b6c8:	2201      	movs	r2, #1
    b6ca:	409a      	lsls	r2, r3
    b6cc:	4653      	mov	r3, sl
    b6ce:	421a      	tst	r2, r3
    b6d0:	d0f0      	beq.n	b6b4 <MiApp_SearchConnection+0x58>
                printf("\r\nScan Channel ");
    b6d2:	4827      	ldr	r0, [pc, #156]	; (b770 <MiApp_SearchConnection+0x114>)
    b6d4:	47c8      	blx	r9
                printf("%d",i);
    b6d6:	241f      	movs	r4, #31
    b6d8:	ab02      	add	r3, sp, #8
    b6da:	469c      	mov	ip, r3
    b6dc:	4464      	add	r4, ip
    b6de:	7821      	ldrb	r1, [r4, #0]
    b6e0:	4824      	ldr	r0, [pc, #144]	; (b774 <MiApp_SearchConnection+0x118>)
    b6e2:	47c8      	blx	r9
                MiApp_Set(CHANNEL, &i);
    b6e4:	0021      	movs	r1, r4
    b6e6:	2000      	movs	r0, #0
    b6e8:	4b23      	ldr	r3, [pc, #140]	; (b778 <MiApp_SearchConnection+0x11c>)
    b6ea:	4798      	blx	r3
                dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_P2P_ACTIVE_SCAN_REQUEST));
    b6ec:	2010      	movs	r0, #16
    b6ee:	4b23      	ldr	r3, [pc, #140]	; (b77c <MiApp_SearchConnection+0x120>)
    b6f0:	4798      	blx	r3
                if (NULL == dataPtr)
    b6f2:	2800      	cmp	r0, #0
    b6f4:	d02e      	beq.n	b754 <MiApp_SearchConnection+0xf8>
                dataPtr[dataLen++] = CMD_P2P_ACTIVE_SCAN_REQUEST;
    b6f6:	2387      	movs	r3, #135	; 0x87
    b6f8:	7003      	strb	r3, [r0, #0]
                dataPtr[dataLen++] = currentChannel;
    b6fa:	4b19      	ldr	r3, [pc, #100]	; (b760 <MiApp_SearchConnection+0x104>)
    b6fc:	781b      	ldrb	r3, [r3, #0]
    b6fe:	7043      	strb	r3, [r0, #1]
                    SendPacket(true, tmpPANID, NULL, true, false, dataLen, dataPtr,0, true, CommandConfCallback);
    b700:	4b1f      	ldr	r3, [pc, #124]	; (b780 <MiApp_SearchConnection+0x124>)
    b702:	9305      	str	r3, [sp, #20]
    b704:	2301      	movs	r3, #1
    b706:	9304      	str	r3, [sp, #16]
    b708:	2300      	movs	r3, #0
    b70a:	9303      	str	r3, [sp, #12]
    b70c:	9002      	str	r0, [sp, #8]
    b70e:	2202      	movs	r2, #2
    b710:	9201      	str	r2, [sp, #4]
    b712:	9300      	str	r3, [sp, #0]
    b714:	3301      	adds	r3, #1
    b716:	2200      	movs	r2, #0
    b718:	2101      	movs	r1, #1
    b71a:	4249      	negs	r1, r1
    b71c:	2001      	movs	r0, #1
    b71e:	4c19      	ldr	r4, [pc, #100]	; (b784 <MiApp_SearchConnection+0x128>)
    b720:	47a0      	blx	r4
                t1.Val = MiWi_TickGet();
    b722:	4b19      	ldr	r3, [pc, #100]	; (b788 <MiApp_SearchConnection+0x12c>)
    b724:	4798      	blx	r3
    b726:	9007      	str	r0, [sp, #28]
                    P2PTasks();
    b728:	4e18      	ldr	r6, [pc, #96]	; (b78c <MiApp_SearchConnection+0x130>)
					SYSTEM_RunTasks();			
    b72a:	4f19      	ldr	r7, [pc, #100]	; (b790 <MiApp_SearchConnection+0x134>)
                    t2.Val = MiWi_TickGet();
    b72c:	4c16      	ldr	r4, [pc, #88]	; (b788 <MiApp_SearchConnection+0x12c>)
                    P2PTasks();
    b72e:	47b0      	blx	r6
					SYSTEM_RunTasks();			
    b730:	47b8      	blx	r7
                    t2.Val = MiWi_TickGet();
    b732:	47a0      	blx	r4
                    if( MiWi_TickGetDiff(t2, t1) > ((uint32_t)(miwi_scan_duration_ticks(ScanDuration))) )
    b734:	9907      	ldr	r1, [sp, #28]
    b736:	4b17      	ldr	r3, [pc, #92]	; (b794 <MiApp_SearchConnection+0x138>)
    b738:	4798      	blx	r3
    b73a:	42a8      	cmp	r0, r5
    b73c:	d9f7      	bls.n	b72e <MiApp_SearchConnection+0xd2>
    b73e:	e7b9      	b.n	b6b4 <MiApp_SearchConnection+0x58>
        MiApp_Set(CHANNEL, &backupChannel);
    b740:	211e      	movs	r1, #30
    b742:	4461      	add	r1, ip
    b744:	2000      	movs	r0, #0
    b746:	4b0c      	ldr	r3, [pc, #48]	; (b778 <MiApp_SearchConnection+0x11c>)
    b748:	4798      	blx	r3
        ConfCallback(ActiveScanResultIndex, (uint8_t*)ActiveScanResults);
    b74a:	4c07      	ldr	r4, [pc, #28]	; (b768 <MiApp_SearchConnection+0x10c>)
    b74c:	7820      	ldrb	r0, [r4, #0]
    b74e:	4905      	ldr	r1, [pc, #20]	; (b764 <MiApp_SearchConnection+0x108>)
    b750:	47c0      	blx	r8
        return ActiveScanResultIndex;
    b752:	7820      	ldrb	r0, [r4, #0]
    }   
    b754:	b00a      	add	sp, #40	; 0x28
    b756:	bc1c      	pop	{r2, r3, r4}
    b758:	4690      	mov	r8, r2
    b75a:	4699      	mov	r9, r3
    b75c:	46a2      	mov	sl, r4
    b75e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b760:	20000011 	.word	0x20000011
    b764:	2000290c 	.word	0x2000290c
    b768:	2000295c 	.word	0x2000295c
    b76c:	000166f9 	.word	0x000166f9
    b770:	00018148 	.word	0x00018148
    b774:	00017658 	.word	0x00017658
    b778:	0000a749 	.word	0x0000a749
    b77c:	0000b7d5 	.word	0x0000b7d5
    b780:	0000a3ad 	.word	0x0000a3ad
    b784:	0000a519 	.word	0x0000a519
    b788:	0000ba15 	.word	0x0000ba15
    b78c:	0000ad15 	.word	0x0000ad15
    b790:	0000d159 	.word	0x0000d159
    b794:	0000ba75 	.word	0x0000ba75

0000b798 <MiMem_Init>:
* Output:		    none
*
* Overview:		    This function will initialize the Mimem buffers
********************************************************************/
void MiMem_Init(void)
{
    b798:	b510      	push	{r4, lr}
	size_t startAddress =  ALIGN((size_t)heapMem);
    b79a:	4a0b      	ldr	r2, [pc, #44]	; (b7c8 <MiMem_Init+0x30>)
    b79c:	1e50      	subs	r0, r2, #1
    b79e:	2403      	movs	r4, #3
    b7a0:	43a0      	bics	r0, r4
    b7a2:	1d01      	adds	r1, r0, #4

	/*Aligned heap is the base */
	base = (Block_t*) startAddress;
    b7a4:	4b09      	ldr	r3, [pc, #36]	; (b7cc <MiMem_Init+0x34>)
    b7a6:	6019      	str	r1, [r3, #0]
	base->size = totalFreeBytesRemaining = HEAP_SIZE - (startAddress - (size_t)heapMem);
    b7a8:	4253      	negs	r3, r2
    b7aa:	43a3      	bics	r3, r4
    b7ac:	24c0      	movs	r4, #192	; 0xc0
    b7ae:	0164      	lsls	r4, r4, #5
    b7b0:	46a4      	mov	ip, r4
    b7b2:	4462      	add	r2, ip
    b7b4:	189b      	adds	r3, r3, r2
    b7b6:	4a06      	ldr	r2, [pc, #24]	; (b7d0 <MiMem_Init+0x38>)
    b7b8:	6013      	str	r3, [r2, #0]
    b7ba:	60c3      	str	r3, [r0, #12]
	base->free = true;
    b7bc:	2301      	movs	r3, #1
    b7be:	7403      	strb	r3, [r0, #16]
	base->next = NULL;
    b7c0:	2300      	movs	r3, #0
    b7c2:	6043      	str	r3, [r0, #4]
	base->prev = NULL;
    b7c4:	6083      	str	r3, [r0, #8]
}
    b7c6:	bd10      	pop	{r4, pc}
    b7c8:	20000294 	.word	0x20000294
    b7cc:	20000290 	.word	0x20000290
    b7d0:	20001a94 	.word	0x20001a94

0000b7d4 <MiMem_Alloc>:
*  or returns NULL if no memory available
*
* Note:			    none
********************************************************************/
void* MiMem_Alloc(uint8_t size)
{
    b7d4:	b570      	push	{r4, r5, r6, lr}
    b7d6:	0005      	movs	r5, r0
	size_t requestedSize = 0U;
	void* requestedMemPtr = NULL;

	/* Initialize the Heap */
	if (!base)
    b7d8:	4b29      	ldr	r3, [pc, #164]	; (b880 <MiMem_Alloc+0xac>)
    b7da:	681b      	ldr	r3, [r3, #0]
    b7dc:	2b00      	cmp	r3, #0
    b7de:	d012      	beq.n	b806 <MiMem_Alloc+0x32>
	{
		MiMem_Init();
	}
	/* if requested size is of non zero */
	if (size)
    b7e0:	2d00      	cmp	r5, #0
    b7e2:	d047      	beq.n	b874 <MiMem_Alloc+0xa0>
	{
		requestedSize =  size + blockMetaDataSize;
		requestedSize = ALIGN(requestedSize);
    b7e4:	0029      	movs	r1, r5
    b7e6:	310f      	adds	r1, #15
    b7e8:	2303      	movs	r3, #3
    b7ea:	4399      	bics	r1, r3
    b7ec:	3104      	adds	r1, #4
		if (requestedSize <= totalFreeBytesRemaining)
    b7ee:	4b25      	ldr	r3, [pc, #148]	; (b884 <MiMem_Alloc+0xb0>)
    b7f0:	6818      	ldr	r0, [r3, #0]
    b7f2:	4281      	cmp	r1, r0
    b7f4:	d840      	bhi.n	b878 <MiMem_Alloc+0xa4>
		{
			size_t receivedSize = (size_t)~0U;
			Block_t *requestedBlock = NULL;
			Block_t *blockPtr = base;
    b7f6:	4b22      	ldr	r3, [pc, #136]	; (b880 <MiMem_Alloc+0xac>)
    b7f8:	681b      	ldr	r3, [r3, #0]

			/* Find best fit free Block */
			while (blockPtr)
    b7fa:	2b00      	cmp	r3, #0
    b7fc:	d03e      	beq.n	b87c <MiMem_Alloc+0xa8>
    b7fe:	2600      	movs	r6, #0
    b800:	2401      	movs	r4, #1
    b802:	4264      	negs	r4, r4
    b804:	e005      	b.n	b812 <MiMem_Alloc+0x3e>
		MiMem_Init();
    b806:	4b20      	ldr	r3, [pc, #128]	; (b888 <MiMem_Alloc+0xb4>)
    b808:	4798      	blx	r3
    b80a:	e7e9      	b.n	b7e0 <MiMem_Alloc+0xc>
				if ((blockPtr->free) && (blockPtr->size >= requestedSize) && (blockPtr->size < receivedSize))
				{
					receivedSize = blockPtr->size;
					requestedBlock = blockPtr;
				}
				blockPtr = blockPtr->next;
    b80c:	681b      	ldr	r3, [r3, #0]
			while (blockPtr)
    b80e:	2b00      	cmp	r3, #0
    b810:	d00a      	beq.n	b828 <MiMem_Alloc+0x54>
				if ((blockPtr->free) && (blockPtr->size >= requestedSize) && (blockPtr->size < receivedSize))
    b812:	7b1a      	ldrb	r2, [r3, #12]
    b814:	2a00      	cmp	r2, #0
    b816:	d0f9      	beq.n	b80c <MiMem_Alloc+0x38>
    b818:	689a      	ldr	r2, [r3, #8]
    b81a:	4291      	cmp	r1, r2
    b81c:	d8f6      	bhi.n	b80c <MiMem_Alloc+0x38>
    b81e:	42a2      	cmp	r2, r4
    b820:	d2f4      	bcs.n	b80c <MiMem_Alloc+0x38>
    b822:	001e      	movs	r6, r3
					receivedSize = blockPtr->size;
    b824:	0014      	movs	r4, r2
    b826:	e7f1      	b.n	b80c <MiMem_Alloc+0x38>
    b828:	2400      	movs	r4, #0
			}

			if (requestedBlock)
    b82a:	2e00      	cmp	r6, #0
    b82c:	d012      	beq.n	b854 <MiMem_Alloc+0x80>
			{
				if ((requestedBlock->size - requestedSize) > HEAP_MINIMUM_BLOCK_SIZE)
    b82e:	68b3      	ldr	r3, [r6, #8]
    b830:	1a5b      	subs	r3, r3, r1
    b832:	2b14      	cmp	r3, #20
    b834:	d810      	bhi.n	b858 <MiMem_Alloc+0x84>
				splitBlock (requestedBlock, requestedSize);
				requestedBlock->free = false;
    b836:	2300      	movs	r3, #0
    b838:	7333      	strb	r3, [r6, #12]
				totalFreeBytesRemaining -= requestedBlock->size;
    b83a:	68b3      	ldr	r3, [r6, #8]
    b83c:	1ac0      	subs	r0, r0, r3
    b83e:	4b11      	ldr	r3, [pc, #68]	; (b884 <MiMem_Alloc+0xb0>)
    b840:	6018      	str	r0, [r3, #0]
				requestedMemPtr = ( void* )(((uint8_t*)requestedBlock) + blockMetaDataSize);
    b842:	0034      	movs	r4, r6
    b844:	3410      	adds	r4, #16
			}
		}
	}
	if (NULL != requestedMemPtr)
    b846:	2c00      	cmp	r4, #0
    b848:	d004      	beq.n	b854 <MiMem_Alloc+0x80>
	{
		memset(requestedMemPtr, 0, size);
    b84a:	002a      	movs	r2, r5
    b84c:	2100      	movs	r1, #0
    b84e:	0020      	movs	r0, r4
    b850:	4b0e      	ldr	r3, [pc, #56]	; (b88c <MiMem_Alloc+0xb8>)
    b852:	4798      	blx	r3
	}
	return requestedMemPtr;
}
    b854:	0020      	movs	r0, r4
    b856:	bd70      	pop	{r4, r5, r6, pc}
  \param[in] size size of the memory chunk requested
  \return None.
 ******************************************************************************/
static void splitBlock(Block_t* blockTobeSplitted, size_t size)
{
	uint8_t* ptr = (uint8_t*)blockTobeSplitted + size;
    b858:	1872      	adds	r2, r6, r1
	Block_t* newBlock = (Block_t*)ptr;

	newBlock->size = blockTobeSplitted->size - size;
    b85a:	6093      	str	r3, [r2, #8]

	if (blockTobeSplitted->next)
    b85c:	6833      	ldr	r3, [r6, #0]
    b85e:	2b00      	cmp	r3, #0
    b860:	d000      	beq.n	b864 <MiMem_Alloc+0x90>
		blockTobeSplitted->next->prev = newBlock;
    b862:	605a      	str	r2, [r3, #4]

	newBlock->next = blockTobeSplitted->next;
    b864:	6833      	ldr	r3, [r6, #0]
    b866:	6013      	str	r3, [r2, #0]
	newBlock->prev = blockTobeSplitted;
    b868:	6056      	str	r6, [r2, #4]
	newBlock->free = true;
    b86a:	2301      	movs	r3, #1
    b86c:	7313      	strb	r3, [r2, #12]

	blockTobeSplitted->next = newBlock;
    b86e:	6032      	str	r2, [r6, #0]
	blockTobeSplitted->size = size;
    b870:	60b1      	str	r1, [r6, #8]
    b872:	e7e0      	b.n	b836 <MiMem_Alloc+0x62>
    b874:	2400      	movs	r4, #0
    b876:	e7ed      	b.n	b854 <MiMem_Alloc+0x80>
    b878:	2400      	movs	r4, #0
    b87a:	e7eb      	b.n	b854 <MiMem_Alloc+0x80>
			while (blockPtr)
    b87c:	2400      	movs	r4, #0
    b87e:	e7e9      	b.n	b854 <MiMem_Alloc+0x80>
    b880:	20000290 	.word	0x20000290
    b884:	20001a94 	.word	0x20001a94
    b888:	0000b799 	.word	0x0000b799
    b88c:	00016151 	.word	0x00016151

0000b890 <MiMem_Free>:
	Block_t* blockPtr = base;
    b890:	4b1c      	ldr	r3, [pc, #112]	; (b904 <MiMem_Free+0x74>)
    b892:	681b      	ldr	r3, [r3, #0]
	Block_t* freeBlockPtr = (Block_t*)((uint8_t*)ptr - (uint8_t*)blockMetaDataSize);
    b894:	3810      	subs	r0, #16
	for(; ((blockPtr != NULL) && (blockPtr != freeBlockPtr)); blockPtr = blockPtr->next);
    b896:	2b00      	cmp	r3, #0
    b898:	d030      	beq.n	b8fc <MiMem_Free+0x6c>
    b89a:	4283      	cmp	r3, r0
    b89c:	d02f      	beq.n	b8fe <MiMem_Free+0x6e>
    b89e:	681b      	ldr	r3, [r3, #0]
    b8a0:	2b00      	cmp	r3, #0
    b8a2:	d02b      	beq.n	b8fc <MiMem_Free+0x6c>
    b8a4:	4298      	cmp	r0, r3
    b8a6:	d1fa      	bne.n	b89e <MiMem_Free+0xe>
		blockPtr->free = true;
    b8a8:	2301      	movs	r3, #1
    b8aa:	7303      	strb	r3, [r0, #12]
		totalFreeBytesRemaining += blockPtr->size;
    b8ac:	6881      	ldr	r1, [r0, #8]
    b8ae:	4a16      	ldr	r2, [pc, #88]	; (b908 <MiMem_Free+0x78>)
    b8b0:	6813      	ldr	r3, [r2, #0]
    b8b2:	185b      	adds	r3, r3, r1
    b8b4:	6013      	str	r3, [r2, #0]
		if (blockPtr->prev && blockPtr->prev->free)
    b8b6:	6843      	ldr	r3, [r0, #4]
    b8b8:	2b00      	cmp	r3, #0
    b8ba:	d00f      	beq.n	b8dc <MiMem_Free+0x4c>
    b8bc:	7b1a      	ldrb	r2, [r3, #12]
    b8be:	2a00      	cmp	r2, #0
    b8c0:	d00c      	beq.n	b8dc <MiMem_Free+0x4c>
			blockPtr->prev->size += blockPtr->size;
    b8c2:	689a      	ldr	r2, [r3, #8]
    b8c4:	4694      	mov	ip, r2
    b8c6:	4461      	add	r1, ip
    b8c8:	6099      	str	r1, [r3, #8]
			if (blockPtr->next)
    b8ca:	6803      	ldr	r3, [r0, #0]
    b8cc:	2b00      	cmp	r3, #0
    b8ce:	d001      	beq.n	b8d4 <MiMem_Free+0x44>
			blockPtr->next->prev = blockPtr->prev;
    b8d0:	6842      	ldr	r2, [r0, #4]
    b8d2:	605a      	str	r2, [r3, #4]
			blockPtr->prev->next = blockPtr->next;
    b8d4:	6843      	ldr	r3, [r0, #4]
    b8d6:	6802      	ldr	r2, [r0, #0]
    b8d8:	601a      	str	r2, [r3, #0]
			blockPtr = blockPtr->prev;
    b8da:	6840      	ldr	r0, [r0, #4]
		if (blockPtr->next && blockPtr->next->free)
    b8dc:	6803      	ldr	r3, [r0, #0]
    b8de:	2b00      	cmp	r3, #0
    b8e0:	d00c      	beq.n	b8fc <MiMem_Free+0x6c>
    b8e2:	7b1a      	ldrb	r2, [r3, #12]
    b8e4:	2a00      	cmp	r2, #0
    b8e6:	d009      	beq.n	b8fc <MiMem_Free+0x6c>
			blockPtr->size += blockPtr->next->size ;
    b8e8:	6882      	ldr	r2, [r0, #8]
    b8ea:	6899      	ldr	r1, [r3, #8]
    b8ec:	468c      	mov	ip, r1
    b8ee:	4462      	add	r2, ip
    b8f0:	6082      	str	r2, [r0, #8]
			blockPtr->next = blockPtr->next->next;
    b8f2:	681b      	ldr	r3, [r3, #0]
    b8f4:	6003      	str	r3, [r0, #0]
			if (blockPtr->next)
    b8f6:	2b00      	cmp	r3, #0
    b8f8:	d000      	beq.n	b8fc <MiMem_Free+0x6c>
			blockPtr->next->prev = blockPtr;
    b8fa:	6058      	str	r0, [r3, #4]
}
    b8fc:	4770      	bx	lr
	Block_t* blockPtr = base;
    b8fe:	0018      	movs	r0, r3
    b900:	e7d2      	b.n	b8a8 <MiMem_Free+0x18>
    b902:	46c0      	nop			; (mov r8, r8)
    b904:	20000290 	.word	0x20000290
    b908:	20001a94 	.word	0x20001a94

0000b90c <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    b90c:	b530      	push	{r4, r5, lr}
	if (timers) {
    b90e:	4b14      	ldr	r3, [pc, #80]	; (b960 <placeTimer+0x54>)
    b910:	681d      	ldr	r5, [r3, #0]
    b912:	2d00      	cmp	r5, #0
    b914:	d01c      	beq.n	b950 <placeTimer+0x44>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    b916:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    b918:	6869      	ldr	r1, [r5, #4]
    b91a:	428a      	cmp	r2, r1
    b91c:	d309      	bcc.n	b932 <placeTimer+0x26>
    b91e:	002c      	movs	r4, r5
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    b920:	1a52      	subs	r2, r2, r1
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    b922:	6823      	ldr	r3, [r4, #0]
    b924:	2b00      	cmp	r3, #0
    b926:	d008      	beq.n	b93a <placeTimer+0x2e>
			if (timeout < t->timeout) {
    b928:	6859      	ldr	r1, [r3, #4]
    b92a:	4291      	cmp	r1, r2
    b92c:	d803      	bhi.n	b936 <placeTimer+0x2a>
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    b92e:	001c      	movs	r4, r3
    b930:	e7f6      	b.n	b920 <placeTimer+0x14>
    b932:	002b      	movs	r3, r5
		SYS_Timer_t *prev = NULL;
    b934:	2400      	movs	r4, #0
				t->timeout -= timeout;
    b936:	1a89      	subs	r1, r1, r2
    b938:	6059      	str	r1, [r3, #4]
			}

			prev = t;
		}

		timer->timeout = timeout;
    b93a:	6042      	str	r2, [r0, #4]

		if (prev) {
    b93c:	2c00      	cmp	r4, #0
    b93e:	d003      	beq.n	b948 <placeTimer+0x3c>
			timer->next = prev->next;
    b940:	6823      	ldr	r3, [r4, #0]
    b942:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    b944:	6020      	str	r0, [r4, #0]
	} else {
		timer->next = NULL;
		timer->timeout = timer->interval;
		timers = timer;
	}
}
    b946:	bd30      	pop	{r4, r5, pc}
			timer->next = timers;
    b948:	6005      	str	r5, [r0, #0]
			timers = timer;
    b94a:	4b05      	ldr	r3, [pc, #20]	; (b960 <placeTimer+0x54>)
    b94c:	6018      	str	r0, [r3, #0]
    b94e:	e7fa      	b.n	b946 <placeTimer+0x3a>
		timer->next = NULL;
    b950:	2300      	movs	r3, #0
    b952:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    b954:	6883      	ldr	r3, [r0, #8]
    b956:	6043      	str	r3, [r0, #4]
		timers = timer;
    b958:	4b01      	ldr	r3, [pc, #4]	; (b960 <placeTimer+0x54>)
    b95a:	6018      	str	r0, [r3, #0]
}
    b95c:	e7f3      	b.n	b946 <placeTimer+0x3a>
    b95e:	46c0      	nop			; (mov r8, r8)
    b960:	20001a98 	.word	0x20001a98

0000b964 <SYS_HwOverflow_Cb>:
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
}

void SYS_HwOverflow_Cb(void)
{
	timerExtension1++;
    b964:	4a06      	ldr	r2, [pc, #24]	; (b980 <SYS_HwOverflow_Cb+0x1c>)
    b966:	7813      	ldrb	r3, [r2, #0]
    b968:	3301      	adds	r3, #1
    b96a:	b2db      	uxtb	r3, r3
    b96c:	7013      	strb	r3, [r2, #0]
	if(timerExtension1 == 0)
    b96e:	7813      	ldrb	r3, [r2, #0]
    b970:	2b00      	cmp	r3, #0
    b972:	d104      	bne.n	b97e <SYS_HwOverflow_Cb+0x1a>
	{
		timerExtension2++;
    b974:	4a03      	ldr	r2, [pc, #12]	; (b984 <SYS_HwOverflow_Cb+0x20>)
    b976:	7813      	ldrb	r3, [r2, #0]
    b978:	3301      	adds	r3, #1
    b97a:	b2db      	uxtb	r3, r3
    b97c:	7013      	strb	r3, [r2, #0]
	}
}
    b97e:	4770      	bx	lr
    b980:	20002968 	.word	0x20002968
    b984:	20002969 	.word	0x20002969

0000b988 <SYS_TimerStop>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    b988:	4b0e      	ldr	r3, [pc, #56]	; (b9c4 <SYS_TimerStop+0x3c>)
    b98a:	681a      	ldr	r2, [r3, #0]
    b98c:	2a00      	cmp	r2, #0
    b98e:	d014      	beq.n	b9ba <SYS_TimerStop+0x32>
		if (t == timer) {
    b990:	4282      	cmp	r2, r0
    b992:	d013      	beq.n	b9bc <SYS_TimerStop+0x34>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    b994:	6813      	ldr	r3, [r2, #0]
    b996:	2b00      	cmp	r3, #0
    b998:	d00f      	beq.n	b9ba <SYS_TimerStop+0x32>
		if (t == timer) {
    b99a:	4298      	cmp	r0, r3
    b99c:	d001      	beq.n	b9a2 <SYS_TimerStop+0x1a>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    b99e:	001a      	movs	r2, r3
    b9a0:	e7f8      	b.n	b994 <SYS_TimerStop+0xc>
			if (prev) {
    b9a2:	2a00      	cmp	r2, #0
    b9a4:	d00a      	beq.n	b9bc <SYS_TimerStop+0x34>
				prev->next = t->next;
    b9a6:	6803      	ldr	r3, [r0, #0]
    b9a8:	6013      	str	r3, [r2, #0]
			if (t->next) {
    b9aa:	6803      	ldr	r3, [r0, #0]
    b9ac:	2b00      	cmp	r3, #0
    b9ae:	d004      	beq.n	b9ba <SYS_TimerStop+0x32>
				t->next->timeout += timer->timeout;
    b9b0:	6842      	ldr	r2, [r0, #4]
    b9b2:	6859      	ldr	r1, [r3, #4]
    b9b4:	468c      	mov	ip, r1
    b9b6:	4462      	add	r2, ip
    b9b8:	605a      	str	r2, [r3, #4]
}
    b9ba:	4770      	bx	lr
				timers = t->next;
    b9bc:	4b01      	ldr	r3, [pc, #4]	; (b9c4 <SYS_TimerStop+0x3c>)
    b9be:	6802      	ldr	r2, [r0, #0]
    b9c0:	601a      	str	r2, [r3, #0]
    b9c2:	e7f2      	b.n	b9aa <SYS_TimerStop+0x22>
    b9c4:	20001a98 	.word	0x20001a98

0000b9c8 <SYS_TimerStarted>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    b9c8:	4b09      	ldr	r3, [pc, #36]	; (b9f0 <SYS_TimerStarted+0x28>)
    b9ca:	681b      	ldr	r3, [r3, #0]
    b9cc:	2b00      	cmp	r3, #0
    b9ce:	d00a      	beq.n	b9e6 <SYS_TimerStarted+0x1e>
		if (t == timer) {
    b9d0:	4283      	cmp	r3, r0
    b9d2:	d00a      	beq.n	b9ea <SYS_TimerStarted+0x22>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    b9d4:	681b      	ldr	r3, [r3, #0]
    b9d6:	2b00      	cmp	r3, #0
    b9d8:	d003      	beq.n	b9e2 <SYS_TimerStarted+0x1a>
		if (t == timer) {
    b9da:	4298      	cmp	r0, r3
    b9dc:	d1fa      	bne.n	b9d4 <SYS_TimerStarted+0xc>
			return true;
    b9de:	2001      	movs	r0, #1
    b9e0:	e000      	b.n	b9e4 <SYS_TimerStarted+0x1c>
	return false;
    b9e2:	2000      	movs	r0, #0
}
    b9e4:	4770      	bx	lr
	return false;
    b9e6:	2000      	movs	r0, #0
    b9e8:	e7fc      	b.n	b9e4 <SYS_TimerStarted+0x1c>
			return true;
    b9ea:	2001      	movs	r0, #1
    b9ec:	e7fa      	b.n	b9e4 <SYS_TimerStarted+0x1c>
    b9ee:	46c0      	nop			; (mov r8, r8)
    b9f0:	20001a98 	.word	0x20001a98

0000b9f4 <SYS_TimerStart>:
{
    b9f4:	b510      	push	{r4, lr}
    b9f6:	0004      	movs	r4, r0
	if (!SYS_TimerStarted(timer)) {
    b9f8:	4b04      	ldr	r3, [pc, #16]	; (ba0c <SYS_TimerStart+0x18>)
    b9fa:	4798      	blx	r3
    b9fc:	2800      	cmp	r0, #0
    b9fe:	d000      	beq.n	ba02 <SYS_TimerStart+0xe>
}
    ba00:	bd10      	pop	{r4, pc}
		placeTimer(timer);
    ba02:	0020      	movs	r0, r4
    ba04:	4b02      	ldr	r3, [pc, #8]	; (ba10 <SYS_TimerStart+0x1c>)
    ba06:	4798      	blx	r3
}
    ba08:	e7fa      	b.n	ba00 <SYS_TimerStart+0xc>
    ba0a:	46c0      	nop			; (mov r8, r8)
    ba0c:	0000b9c9 	.word	0x0000b9c9
    ba10:	0000b90d 	.word	0x0000b90d

0000ba14 <MiWi_TickGet>:
{
    ba14:	b570      	push	{r4, r5, r6, lr}
	uint8_t current_timerExtension1 = timerExtension1;
    ba16:	4e11      	ldr	r6, [pc, #68]	; (ba5c <MiWi_TickGet+0x48>)
    ba18:	7835      	ldrb	r5, [r6, #0]
    ba1a:	b2ed      	uxtb	r5, r5
	tmr_disable_ovf_interrupt();
    ba1c:	4b10      	ldr	r3, [pc, #64]	; (ba60 <MiWi_TickGet+0x4c>)
    ba1e:	4798      	blx	r3
	currentTime.word.w0 = common_tc_read_count();
    ba20:	4b10      	ldr	r3, [pc, #64]	; (ba64 <MiWi_TickGet+0x50>)
    ba22:	4798      	blx	r3
    ba24:	0004      	movs	r4, r0
	tmr_enable_ovf_interrupt();
    ba26:	4b10      	ldr	r3, [pc, #64]	; (ba68 <MiWi_TickGet+0x54>)
    ba28:	4798      	blx	r3
  __ASM volatile ("nop");
    ba2a:	46c0      	nop			; (mov r8, r8)
	if (current_timerExtension1 != timerExtension1)
    ba2c:	7833      	ldrb	r3, [r6, #0]
    ba2e:	b2db      	uxtb	r3, r3
    ba30:	429d      	cmp	r5, r3
    ba32:	d004      	beq.n	ba3e <MiWi_TickGet+0x2a>
		currentTime.word.w0 = common_tc_read_count();
    ba34:	4b0b      	ldr	r3, [pc, #44]	; (ba64 <MiWi_TickGet+0x50>)
    ba36:	4798      	blx	r3
    ba38:	0c24      	lsrs	r4, r4, #16
    ba3a:	0424      	lsls	r4, r4, #16
    ba3c:	4304      	orrs	r4, r0
    currentTime.byte.b2 = timerExtension1;
    ba3e:	4b07      	ldr	r3, [pc, #28]	; (ba5c <MiWi_TickGet+0x48>)
    ba40:	781b      	ldrb	r3, [r3, #0]
    ba42:	041b      	lsls	r3, r3, #16
    ba44:	4809      	ldr	r0, [pc, #36]	; (ba6c <MiWi_TickGet+0x58>)
    ba46:	4004      	ands	r4, r0
    ba48:	431c      	orrs	r4, r3
    currentTime.byte.b3 = timerExtension2;
    ba4a:	4b09      	ldr	r3, [pc, #36]	; (ba70 <MiWi_TickGet+0x5c>)
    ba4c:	781b      	ldrb	r3, [r3, #0]
    ba4e:	061b      	lsls	r3, r3, #24
    ba50:	0224      	lsls	r4, r4, #8
    ba52:	0a24      	lsrs	r4, r4, #8
    ba54:	431c      	orrs	r4, r3
}
    ba56:	0020      	movs	r0, r4
    ba58:	bd70      	pop	{r4, r5, r6, pc}
    ba5a:	46c0      	nop			; (mov r8, r8)
    ba5c:	20002968 	.word	0x20002968
    ba60:	0000d49d 	.word	0x0000d49d
    ba64:	00012d25 	.word	0x00012d25
    ba68:	0000d4b1 	.word	0x0000d4b1
    ba6c:	ff00ffff 	.word	0xff00ffff
    ba70:	20002969 	.word	0x20002969

0000ba74 <MiWi_TickGetDiff>:
	if (current_tick.Val > previous_tick.Val)
    ba74:	4288      	cmp	r0, r1
    ba76:	d802      	bhi.n	ba7e <MiWi_TickGetDiff+0xa>
		ret_val = (0xFFFFFFFF - previous_tick.Val) + current_tick.Val;
    ba78:	3801      	subs	r0, #1
    ba7a:	1a40      	subs	r0, r0, r1
}
    ba7c:	4770      	bx	lr
		ret_val = current_tick.Val - previous_tick.Val;
    ba7e:	1a40      	subs	r0, r0, r1
    ba80:	e7fc      	b.n	ba7c <MiWi_TickGetDiff+0x8>
    ba82:	Address 0x0000ba82 is out of bounds.


0000ba84 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    ba84:	b570      	push	{r4, r5, r6, lr}
    ba86:	b082      	sub	sp, #8
    ba88:	0005      	movs	r5, r0
    ba8a:	000e      	movs	r6, r1
	uint16_t temp = 0;
    ba8c:	2200      	movs	r2, #0
    ba8e:	466b      	mov	r3, sp
    ba90:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    ba92:	4c06      	ldr	r4, [pc, #24]	; (baac <usart_serial_getchar+0x28>)
    ba94:	466b      	mov	r3, sp
    ba96:	1d99      	adds	r1, r3, #6
    ba98:	0028      	movs	r0, r5
    ba9a:	47a0      	blx	r4
    ba9c:	2800      	cmp	r0, #0
    ba9e:	d1f9      	bne.n	ba94 <usart_serial_getchar+0x10>

	*c = temp;
    baa0:	466b      	mov	r3, sp
    baa2:	3306      	adds	r3, #6
    baa4:	881b      	ldrh	r3, [r3, #0]
    baa6:	7033      	strb	r3, [r6, #0]
}
    baa8:	b002      	add	sp, #8
    baaa:	bd70      	pop	{r4, r5, r6, pc}
    baac:	00005f55 	.word	0x00005f55

0000bab0 <usart_serial_putchar>:
{
    bab0:	b570      	push	{r4, r5, r6, lr}
    bab2:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    bab4:	b28c      	uxth	r4, r1
    bab6:	4e03      	ldr	r6, [pc, #12]	; (bac4 <usart_serial_putchar+0x14>)
    bab8:	0021      	movs	r1, r4
    baba:	0028      	movs	r0, r5
    babc:	47b0      	blx	r6
    babe:	2800      	cmp	r0, #0
    bac0:	d1fa      	bne.n	bab8 <usart_serial_putchar+0x8>
}
    bac2:	bd70      	pop	{r4, r5, r6, pc}
    bac4:	00005f29 	.word	0x00005f29

0000bac8 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35 || WLR089
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    bac8:	b510      	push	{r4, lr}
    baca:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    bacc:	466b      	mov	r3, sp
    bace:	1ddc      	adds	r4, r3, #7
    bad0:	2201      	movs	r2, #1
    bad2:	0021      	movs	r1, r4
    bad4:	480f      	ldr	r0, [pc, #60]	; (bb14 <USART_HOST_ISR_VECT+0x4c>)
    bad6:	4b10      	ldr	r3, [pc, #64]	; (bb18 <USART_HOST_ISR_VECT+0x50>)
    bad8:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    bada:	b672      	cpsid	i
  __ASM volatile ("dmb");
    badc:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    bae0:	2200      	movs	r2, #0
    bae2:	4b0e      	ldr	r3, [pc, #56]	; (bb1c <USART_HOST_ISR_VECT+0x54>)
    bae4:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    bae6:	4b0e      	ldr	r3, [pc, #56]	; (bb20 <USART_HOST_ISR_VECT+0x58>)
    bae8:	781b      	ldrb	r3, [r3, #0]
    baea:	7821      	ldrb	r1, [r4, #0]
    baec:	4a0d      	ldr	r2, [pc, #52]	; (bb24 <USART_HOST_ISR_VECT+0x5c>)
    baee:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    baf0:	2b7f      	cmp	r3, #127	; 0x7f
    baf2:	d00a      	beq.n	bb0a <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    baf4:	3301      	adds	r3, #1
    baf6:	4a0a      	ldr	r2, [pc, #40]	; (bb20 <USART_HOST_ISR_VECT+0x58>)
    baf8:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    bafa:	2201      	movs	r2, #1
    bafc:	4b07      	ldr	r3, [pc, #28]	; (bb1c <USART_HOST_ISR_VECT+0x54>)
    bafe:	701a      	strb	r2, [r3, #0]
    bb00:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    bb04:	b662      	cpsie	i
}
    bb06:	b002      	add	sp, #8
    bb08:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
    bb0a:	2200      	movs	r2, #0
    bb0c:	4b04      	ldr	r3, [pc, #16]	; (bb20 <USART_HOST_ISR_VECT+0x58>)
    bb0e:	701a      	strb	r2, [r3, #0]
    bb10:	e7f3      	b.n	bafa <USART_HOST_ISR_VECT+0x32>
    bb12:	46c0      	nop			; (mov r8, r8)
    bb14:	20001a9c 	.word	0x20001a9c
    bb18:	00006085 	.word	0x00006085
    bb1c:	20000008 	.word	0x20000008
    bb20:	20001b50 	.word	0x20001b50
    bb24:	20001ad0 	.word	0x20001ad0

0000bb28 <sio2host_init>:
{
    bb28:	b5f0      	push	{r4, r5, r6, r7, lr}
    bb2a:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    bb2c:	2380      	movs	r3, #128	; 0x80
    bb2e:	05db      	lsls	r3, r3, #23
    bb30:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    bb32:	2300      	movs	r3, #0
    bb34:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    bb36:	22ff      	movs	r2, #255	; 0xff
    bb38:	4669      	mov	r1, sp
    bb3a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    bb3c:	2200      	movs	r2, #0
    bb3e:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    bb40:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    bb42:	2401      	movs	r4, #1
    bb44:	2124      	movs	r1, #36	; 0x24
    bb46:	4668      	mov	r0, sp
    bb48:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    bb4a:	3101      	adds	r1, #1
    bb4c:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    bb4e:	3101      	adds	r1, #1
    bb50:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    bb52:	3101      	adds	r1, #1
    bb54:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    bb56:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    bb58:	3105      	adds	r1, #5
    bb5a:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    bb5c:	3101      	adds	r1, #1
    bb5e:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    bb60:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    bb62:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    bb64:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    bb66:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    bb68:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    bb6a:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    bb6c:	2313      	movs	r3, #19
    bb6e:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    bb70:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    bb72:	2380      	movs	r3, #128	; 0x80
    bb74:	035b      	lsls	r3, r3, #13
    bb76:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    bb78:	4b2f      	ldr	r3, [pc, #188]	; (bc38 <sio2host_init+0x110>)
    bb7a:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    bb7c:	4b2f      	ldr	r3, [pc, #188]	; (bc3c <sio2host_init+0x114>)
    bb7e:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    bb80:	2301      	movs	r3, #1
    bb82:	425b      	negs	r3, r3
    bb84:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    bb86:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    bb88:	23e1      	movs	r3, #225	; 0xe1
    bb8a:	025b      	lsls	r3, r3, #9
    bb8c:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    bb8e:	4d2c      	ldr	r5, [pc, #176]	; (bc40 <sio2host_init+0x118>)
    bb90:	4b2c      	ldr	r3, [pc, #176]	; (bc44 <sio2host_init+0x11c>)
    bb92:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    bb94:	4a2c      	ldr	r2, [pc, #176]	; (bc48 <sio2host_init+0x120>)
    bb96:	4b2d      	ldr	r3, [pc, #180]	; (bc4c <sio2host_init+0x124>)
    bb98:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    bb9a:	4a2d      	ldr	r2, [pc, #180]	; (bc50 <sio2host_init+0x128>)
    bb9c:	4b2d      	ldr	r3, [pc, #180]	; (bc54 <sio2host_init+0x12c>)
    bb9e:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    bba0:	466a      	mov	r2, sp
    bba2:	2184      	movs	r1, #132	; 0x84
    bba4:	05c9      	lsls	r1, r1, #23
    bba6:	0028      	movs	r0, r5
    bba8:	4b2b      	ldr	r3, [pc, #172]	; (bc58 <sio2host_init+0x130>)
    bbaa:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    bbac:	4f2b      	ldr	r7, [pc, #172]	; (bc5c <sio2host_init+0x134>)
    bbae:	683b      	ldr	r3, [r7, #0]
    bbb0:	6898      	ldr	r0, [r3, #8]
    bbb2:	2100      	movs	r1, #0
    bbb4:	4e2a      	ldr	r6, [pc, #168]	; (bc60 <sio2host_init+0x138>)
    bbb6:	47b0      	blx	r6
	setbuf(stdin, NULL);
    bbb8:	683b      	ldr	r3, [r7, #0]
    bbba:	6858      	ldr	r0, [r3, #4]
    bbbc:	2100      	movs	r1, #0
    bbbe:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    bbc0:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    bbc2:	0030      	movs	r0, r6
    bbc4:	4b27      	ldr	r3, [pc, #156]	; (bc64 <sio2host_init+0x13c>)
    bbc6:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    bbc8:	231f      	movs	r3, #31
    bbca:	4018      	ands	r0, r3
    bbcc:	4084      	lsls	r4, r0
    bbce:	4b26      	ldr	r3, [pc, #152]	; (bc68 <sio2host_init+0x140>)
    bbd0:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    bbd2:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    bbd4:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    bbd6:	2b00      	cmp	r3, #0
    bbd8:	d1fc      	bne.n	bbd4 <sio2host_init+0xac>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    bbda:	6833      	ldr	r3, [r6, #0]
    bbdc:	2202      	movs	r2, #2
    bbde:	4313      	orrs	r3, r2
    bbe0:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    bbe2:	4b17      	ldr	r3, [pc, #92]	; (bc40 <sio2host_init+0x118>)
    bbe4:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    bbe6:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    bbe8:	2a00      	cmp	r2, #0
    bbea:	d1fc      	bne.n	bbe6 <sio2host_init+0xbe>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    bbec:	6859      	ldr	r1, [r3, #4]
    bbee:	2280      	movs	r2, #128	; 0x80
    bbf0:	0252      	lsls	r2, r2, #9
    bbf2:	430a      	orrs	r2, r1
    bbf4:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    bbf6:	2101      	movs	r1, #1
    bbf8:	4a11      	ldr	r2, [pc, #68]	; (bc40 <sio2host_init+0x118>)
    bbfa:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    bbfc:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    bbfe:	2a00      	cmp	r2, #0
    bc00:	d1fc      	bne.n	bbfc <sio2host_init+0xd4>
	return (usart_hw->SYNCBUSY.reg);
    bc02:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    bc04:	2a00      	cmp	r2, #0
    bc06:	d1fc      	bne.n	bc02 <sio2host_init+0xda>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    bc08:	6859      	ldr	r1, [r3, #4]
    bc0a:	2280      	movs	r2, #128	; 0x80
    bc0c:	0292      	lsls	r2, r2, #10
    bc0e:	430a      	orrs	r2, r1
    bc10:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    bc12:	2101      	movs	r1, #1
    bc14:	4a0a      	ldr	r2, [pc, #40]	; (bc40 <sio2host_init+0x118>)
    bc16:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    bc18:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    bc1a:	2a00      	cmp	r2, #0
    bc1c:	d1fc      	bne.n	bc18 <sio2host_init+0xf0>
	USART_HOST_RX_ISR_ENABLE();
    bc1e:	4913      	ldr	r1, [pc, #76]	; (bc6c <sio2host_init+0x144>)
    bc20:	2000      	movs	r0, #0
    bc22:	4b13      	ldr	r3, [pc, #76]	; (bc70 <sio2host_init+0x148>)
    bc24:	4798      	blx	r3
    bc26:	2204      	movs	r2, #4
    bc28:	2384      	movs	r3, #132	; 0x84
    bc2a:	05db      	lsls	r3, r3, #23
    bc2c:	759a      	strb	r2, [r3, #22]
    bc2e:	32fc      	adds	r2, #252	; 0xfc
    bc30:	4b0d      	ldr	r3, [pc, #52]	; (bc68 <sio2host_init+0x140>)
    bc32:	601a      	str	r2, [r3, #0]
}
    bc34:	b011      	add	sp, #68	; 0x44
    bc36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bc38:	00040003 	.word	0x00040003
    bc3c:	00050003 	.word	0x00050003
    bc40:	20001a9c 	.word	0x20001a9c
    bc44:	20001f48 	.word	0x20001f48
    bc48:	0000bab1 	.word	0x0000bab1
    bc4c:	20001f44 	.word	0x20001f44
    bc50:	0000ba85 	.word	0x0000ba85
    bc54:	20001f40 	.word	0x20001f40
    bc58:	00005bbd 	.word	0x00005bbd
    bc5c:	20000020 	.word	0x20000020
    bc60:	000168fd 	.word	0x000168fd
    bc64:	000056ed 	.word	0x000056ed
    bc68:	e000e100 	.word	0xe000e100
    bc6c:	0000bac9 	.word	0x0000bac9
    bc70:	000056b1 	.word	0x000056b1

0000bc74 <sio2host_tx>:
{
    bc74:	b5f0      	push	{r4, r5, r6, r7, lr}
    bc76:	b083      	sub	sp, #12
    bc78:	0006      	movs	r6, r0
    bc7a:	9101      	str	r1, [sp, #4]
	return usart_write_buffer_wait(module, tx_data, length);
    bc7c:	466b      	mov	r3, sp
    bc7e:	889d      	ldrh	r5, [r3, #4]
    bc80:	4c05      	ldr	r4, [pc, #20]	; (bc98 <sio2host_tx+0x24>)
    bc82:	4f06      	ldr	r7, [pc, #24]	; (bc9c <sio2host_tx+0x28>)
    bc84:	002a      	movs	r2, r5
    bc86:	0031      	movs	r1, r6
    bc88:	0020      	movs	r0, r4
    bc8a:	47b8      	blx	r7
	} while (status != STATUS_OK);
    bc8c:	2800      	cmp	r0, #0
    bc8e:	d1f9      	bne.n	bc84 <sio2host_tx+0x10>
}
    bc90:	9801      	ldr	r0, [sp, #4]
    bc92:	b003      	add	sp, #12
    bc94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bc96:	46c0      	nop			; (mov r8, r8)
    bc98:	20001a9c 	.word	0x20001a9c
    bc9c:	00005fc5 	.word	0x00005fc5

0000bca0 <sio2host_putchar>:
{
    bca0:	b500      	push	{lr}
    bca2:	b083      	sub	sp, #12
    bca4:	466b      	mov	r3, sp
    bca6:	71d8      	strb	r0, [r3, #7]
    bca8:	3307      	adds	r3, #7
	sio2host_tx(&ch, 1);
    bcaa:	2101      	movs	r1, #1
    bcac:	0018      	movs	r0, r3
    bcae:	4b02      	ldr	r3, [pc, #8]	; (bcb8 <sio2host_putchar+0x18>)
    bcb0:	4798      	blx	r3
}
    bcb2:	b003      	add	sp, #12
    bcb4:	bd00      	pop	{pc}
    bcb6:	46c0      	nop			; (mov r8, r8)
    bcb8:	0000bc75 	.word	0x0000bc75

0000bcbc <HAL_SPISend>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    bcbc:	4b13      	ldr	r3, [pc, #76]	; (bd0c <HAL_SPISend+0x50>)
    bcbe:	681b      	ldr	r3, [r3, #0]
static uint8_t HAL_SPISend(uint8_t data)
{
	uint16_t read_val = 0;
	
	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master));
    bcc0:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    bcc2:	7e1a      	ldrb	r2, [r3, #24]
    bcc4:	420a      	tst	r2, r1
    bcc6:	d0fc      	beq.n	bcc2 <HAL_SPISend+0x6>
    bcc8:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    bcca:	07d2      	lsls	r2, r2, #31
    bccc:	d500      	bpl.n	bcd0 <HAL_SPISend+0x14>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    bcce:	6298      	str	r0, [r3, #40]	; 0x28
	spi_write(&master, data);
	while (!spi_is_write_complete(&master));
    bcd0:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    bcd2:	7e1a      	ldrb	r2, [r3, #24]
    bcd4:	420a      	tst	r2, r1
    bcd6:	d0fc      	beq.n	bcd2 <HAL_SPISend+0x16>
	
	while (!spi_is_ready_to_read(&master));
    bcd8:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    bcda:	7e1a      	ldrb	r2, [r3, #24]
    bcdc:	420a      	tst	r2, r1
    bcde:	d0fc      	beq.n	bcda <HAL_SPISend+0x1e>
    bce0:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t read_val = 0;
    bce2:	2000      	movs	r0, #0
	if (!spi_is_ready_to_read(module)) {
    bce4:	0752      	lsls	r2, r2, #29
    bce6:	d50a      	bpl.n	bcfe <HAL_SPISend+0x42>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    bce8:	8b5a      	ldrh	r2, [r3, #26]
    bcea:	0752      	lsls	r2, r2, #29
    bcec:	d501      	bpl.n	bcf2 <HAL_SPISend+0x36>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    bcee:	2204      	movs	r2, #4
    bcf0:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    bcf2:	4a06      	ldr	r2, [pc, #24]	; (bd0c <HAL_SPISend+0x50>)
    bcf4:	7992      	ldrb	r2, [r2, #6]
    bcf6:	2a01      	cmp	r2, #1
    bcf8:	d003      	beq.n	bd02 <HAL_SPISend+0x46>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    bcfa:	6a98      	ldr	r0, [r3, #40]	; 0x28
    bcfc:	b2c0      	uxtb	r0, r0
	spi_read(&master, &read_val);
	
	return ((uint8_t)read_val);
    bcfe:	b2c0      	uxtb	r0, r0
}
    bd00:	4770      	bx	lr
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    bd02:	6a98      	ldr	r0, [r3, #40]	; 0x28
    bd04:	05c0      	lsls	r0, r0, #23
    bd06:	0dc0      	lsrs	r0, r0, #23
    bd08:	e7f9      	b.n	bcfe <HAL_SPISend+0x42>
    bd0a:	46c0      	nop			; (mov r8, r8)
    bd0c:	20001b60 	.word	0x20001b60

0000bd10 <HAL_ResetPinMakeOutput>:
{
    bd10:	b500      	push	{lr}
    bd12:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    bd14:	a901      	add	r1, sp, #4
    bd16:	2301      	movs	r3, #1
    bd18:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    bd1a:	2200      	movs	r2, #0
    bd1c:	708a      	strb	r2, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    bd1e:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    bd20:	202f      	movs	r0, #47	; 0x2f
    bd22:	4b02      	ldr	r3, [pc, #8]	; (bd2c <HAL_ResetPinMakeOutput+0x1c>)
    bd24:	4798      	blx	r3
}
    bd26:	b003      	add	sp, #12
    bd28:	bd00      	pop	{pc}
    bd2a:	46c0      	nop			; (mov r8, r8)
    bd2c:	00004ba9 	.word	0x00004ba9

0000bd30 <HAL_RadioDIO2Callback>:
{
    bd30:	b510      	push	{r4, lr}
  if (interruptHandlerDio2)
    bd32:	4b05      	ldr	r3, [pc, #20]	; (bd48 <HAL_RadioDIO2Callback+0x18>)
    bd34:	681b      	ldr	r3, [r3, #0]
    bd36:	2b00      	cmp	r3, #0
    bd38:	d004      	beq.n	bd44 <HAL_RadioDIO2Callback+0x14>
	PMM_Wakeup();
    bd3a:	4b04      	ldr	r3, [pc, #16]	; (bd4c <HAL_RadioDIO2Callback+0x1c>)
    bd3c:	4798      	blx	r3
    interruptHandlerDio2();
    bd3e:	4b02      	ldr	r3, [pc, #8]	; (bd48 <HAL_RadioDIO2Callback+0x18>)
    bd40:	681b      	ldr	r3, [r3, #0]
    bd42:	4798      	blx	r3
}
    bd44:	bd10      	pop	{r4, pc}
    bd46:	46c0      	nop			; (mov r8, r8)
    bd48:	20001b5c 	.word	0x20001b5c
    bd4c:	0000c191 	.word	0x0000c191

0000bd50 <HAL_RadioDIO1Callback>:
{
    bd50:	b510      	push	{r4, lr}
  if (interruptHandlerDio1)
    bd52:	4b05      	ldr	r3, [pc, #20]	; (bd68 <HAL_RadioDIO1Callback+0x18>)
    bd54:	681b      	ldr	r3, [r3, #0]
    bd56:	2b00      	cmp	r3, #0
    bd58:	d004      	beq.n	bd64 <HAL_RadioDIO1Callback+0x14>
	PMM_Wakeup();
    bd5a:	4b04      	ldr	r3, [pc, #16]	; (bd6c <HAL_RadioDIO1Callback+0x1c>)
    bd5c:	4798      	blx	r3
    interruptHandlerDio1();
    bd5e:	4b02      	ldr	r3, [pc, #8]	; (bd68 <HAL_RadioDIO1Callback+0x18>)
    bd60:	681b      	ldr	r3, [r3, #0]
    bd62:	4798      	blx	r3
}
    bd64:	bd10      	pop	{r4, pc}
    bd66:	46c0      	nop			; (mov r8, r8)
    bd68:	20001b58 	.word	0x20001b58
    bd6c:	0000c191 	.word	0x0000c191

0000bd70 <HAL_RadioDIO0Callback>:
{
    bd70:	b510      	push	{r4, lr}
  if (interruptHandlerDio0)
    bd72:	4b05      	ldr	r3, [pc, #20]	; (bd88 <HAL_RadioDIO0Callback+0x18>)
    bd74:	681b      	ldr	r3, [r3, #0]
    bd76:	2b00      	cmp	r3, #0
    bd78:	d004      	beq.n	bd84 <HAL_RadioDIO0Callback+0x14>
	PMM_Wakeup();
    bd7a:	4b04      	ldr	r3, [pc, #16]	; (bd8c <HAL_RadioDIO0Callback+0x1c>)
    bd7c:	4798      	blx	r3
    interruptHandlerDio0();
    bd7e:	4b02      	ldr	r3, [pc, #8]	; (bd88 <HAL_RadioDIO0Callback+0x18>)
    bd80:	681b      	ldr	r3, [r3, #0]
    bd82:	4798      	blx	r3
}
    bd84:	bd10      	pop	{r4, pc}
    bd86:	46c0      	nop			; (mov r8, r8)
    bd88:	20001b54 	.word	0x20001b54
    bd8c:	0000c191 	.word	0x0000c191

0000bd90 <HAL_SPICSAssert>:
{
    bd90:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, true);
    bd92:	2201      	movs	r2, #1
    bd94:	4902      	ldr	r1, [pc, #8]	; (bda0 <HAL_SPICSAssert+0x10>)
    bd96:	4803      	ldr	r0, [pc, #12]	; (bda4 <HAL_SPICSAssert+0x14>)
    bd98:	4b03      	ldr	r3, [pc, #12]	; (bda8 <HAL_SPICSAssert+0x18>)
    bd9a:	4798      	blx	r3
}
    bd9c:	bd10      	pop	{r4, pc}
    bd9e:	46c0      	nop			; (mov r8, r8)
    bda0:	2000296c 	.word	0x2000296c
    bda4:	20001b60 	.word	0x20001b60
    bda8:	00005ac9 	.word	0x00005ac9

0000bdac <HAL_SPICSDeassert>:
{
    bdac:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, false);
    bdae:	2200      	movs	r2, #0
    bdb0:	4902      	ldr	r1, [pc, #8]	; (bdbc <HAL_SPICSDeassert+0x10>)
    bdb2:	4803      	ldr	r0, [pc, #12]	; (bdc0 <HAL_SPICSDeassert+0x14>)
    bdb4:	4b03      	ldr	r3, [pc, #12]	; (bdc4 <HAL_SPICSDeassert+0x18>)
    bdb6:	4798      	blx	r3
}
    bdb8:	bd10      	pop	{r4, pc}
    bdba:	46c0      	nop			; (mov r8, r8)
    bdbc:	2000296c 	.word	0x2000296c
    bdc0:	20001b60 	.word	0x20001b60
    bdc4:	00005ac9 	.word	0x00005ac9

0000bdc8 <HAL_RadioInit>:
{
    bdc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    bdca:	46d6      	mov	lr, sl
    bdcc:	464f      	mov	r7, r9
    bdce:	4646      	mov	r6, r8
    bdd0:	b5c0      	push	{r6, r7, lr}
    bdd2:	b090      	sub	sp, #64	; 0x40
	config->input_pull = PORT_PIN_PULL_UP;
    bdd4:	ac01      	add	r4, sp, #4
    bdd6:	2601      	movs	r6, #1
    bdd8:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    bdda:	2500      	movs	r5, #0
    bddc:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    bdde:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(SX_RF_SPI_SCK, &pin_conf);
    bde0:	0021      	movs	r1, r4
    bde2:	2052      	movs	r0, #82	; 0x52
    bde4:	4f52      	ldr	r7, [pc, #328]	; (bf30 <HAL_RadioInit+0x168>)
    bde6:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_MOSI, &pin_conf);
    bde8:	0021      	movs	r1, r4
    bdea:	203e      	movs	r0, #62	; 0x3e
    bdec:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_CS, &pin_conf);
    bdee:	0021      	movs	r1, r4
    bdf0:	203f      	movs	r0, #63	; 0x3f
    bdf2:	47b8      	blx	r7
	port_pin_set_config(SX_RF_RESET_PIN, &pin_conf);
    bdf4:	0021      	movs	r1, r4
    bdf6:	202f      	movs	r0, #47	; 0x2f
    bdf8:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    bdfa:	2280      	movs	r2, #128	; 0x80
    bdfc:	02d2      	lsls	r2, r2, #11
    bdfe:	4b4d      	ldr	r3, [pc, #308]	; (bf34 <HAL_RadioInit+0x16c>)
    be00:	619a      	str	r2, [r3, #24]
    be02:	4b4d      	ldr	r3, [pc, #308]	; (bf38 <HAL_RadioInit+0x170>)
    be04:	2280      	movs	r2, #128	; 0x80
    be06:	05d2      	lsls	r2, r2, #23
    be08:	619a      	str	r2, [r3, #24]
    be0a:	2280      	movs	r2, #128	; 0x80
    be0c:	0612      	lsls	r2, r2, #24
    be0e:	619a      	str	r2, [r3, #24]
    be10:	2280      	movs	r2, #128	; 0x80
    be12:	0212      	lsls	r2, r2, #8
    be14:	619a      	str	r2, [r3, #24]
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    be16:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(SX_RF_SPI_MISO, &pin_conf);
    be18:	0021      	movs	r1, r4
    be1a:	2053      	movs	r0, #83	; 0x53
    be1c:	47b8      	blx	r7
	extint_chan_get_config_defaults(&config_extint_chan);
    be1e:	ac02      	add	r4, sp, #8
    be20:	0020      	movs	r0, r4
    be22:	4b46      	ldr	r3, [pc, #280]	; (bf3c <HAL_RadioInit+0x174>)
    be24:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO0_EIC_PIN;
    be26:	2330      	movs	r3, #48	; 0x30
    be28:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO0_EIC_MUX;
    be2a:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    be2c:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    be2e:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO0_EIC_LINE, &config_extint_chan);
    be30:	0021      	movs	r1, r4
    be32:	2000      	movs	r0, #0
    be34:	4b42      	ldr	r3, [pc, #264]	; (bf40 <HAL_RadioInit+0x178>)
    be36:	469a      	mov	sl, r3
    be38:	4798      	blx	r3
	extint_register_callback(HAL_RadioDIO0Callback,DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    be3a:	2200      	movs	r2, #0
    be3c:	2100      	movs	r1, #0
    be3e:	4841      	ldr	r0, [pc, #260]	; (bf44 <HAL_RadioInit+0x17c>)
    be40:	4b41      	ldr	r3, [pc, #260]	; (bf48 <HAL_RadioInit+0x180>)
    be42:	4699      	mov	r9, r3
    be44:	4798      	blx	r3
	extint_chan_enable_callback(DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    be46:	2100      	movs	r1, #0
    be48:	2000      	movs	r0, #0
    be4a:	4b40      	ldr	r3, [pc, #256]	; (bf4c <HAL_RadioInit+0x184>)
    be4c:	4698      	mov	r8, r3
    be4e:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO1_EIC_PIN;
    be50:	230b      	movs	r3, #11
    be52:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO1_EIC_MUX;
    be54:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    be56:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    be58:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO1_EIC_LINE, &config_extint_chan);
    be5a:	0021      	movs	r1, r4
    be5c:	200b      	movs	r0, #11
    be5e:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO1Callback,DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    be60:	2200      	movs	r2, #0
    be62:	210b      	movs	r1, #11
    be64:	483a      	ldr	r0, [pc, #232]	; (bf50 <HAL_RadioInit+0x188>)
    be66:	47c8      	blx	r9
	extint_chan_enable_callback(DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    be68:	2100      	movs	r1, #0
    be6a:	200b      	movs	r0, #11
    be6c:	47c0      	blx	r8
	config_extint_chan.gpio_pin           = DIO2_EIC_PIN;
    be6e:	230c      	movs	r3, #12
    be70:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO2_EIC_MUX;
    be72:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    be74:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    be76:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO2_EIC_LINE, &config_extint_chan);
    be78:	0021      	movs	r1, r4
    be7a:	200c      	movs	r0, #12
    be7c:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO2Callback,DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    be7e:	2200      	movs	r2, #0
    be80:	210c      	movs	r1, #12
    be82:	4834      	ldr	r0, [pc, #208]	; (bf54 <HAL_RadioInit+0x18c>)
    be84:	47c8      	blx	r9
	extint_chan_enable_callback(DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    be86:	2100      	movs	r1, #0
    be88:	200c      	movs	r0, #12
    be8a:	47c0      	blx	r8
	slave->ss_pin          = config->ss_pin;
    be8c:	4b32      	ldr	r3, [pc, #200]	; (bf58 <HAL_RadioInit+0x190>)
    be8e:	4698      	mov	r8, r3
    be90:	233f      	movs	r3, #63	; 0x3f
    be92:	4642      	mov	r2, r8
    be94:	7013      	strb	r3, [r2, #0]
	slave->address_enabled = config->address_enabled;
    be96:	7055      	strb	r5, [r2, #1]
	slave->address         = config->address;
    be98:	7095      	strb	r5, [r2, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    be9a:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    be9c:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    be9e:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    bea0:	0021      	movs	r1, r4
    bea2:	203f      	movs	r0, #63	; 0x3f
    bea4:	47b8      	blx	r7
	port_pin_set_output_level(slave->ss_pin, true);
    bea6:	4643      	mov	r3, r8
    bea8:	781a      	ldrb	r2, [r3, #0]
	if (port_index < PORT_INST_NUM) {
    beaa:	09d1      	lsrs	r1, r2, #7
		return NULL;
    beac:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    beae:	2900      	cmp	r1, #0
    beb0:	d104      	bne.n	bebc <HAL_RadioInit+0xf4>
		return &(ports[port_index]->Group[group_index]);
    beb2:	0953      	lsrs	r3, r2, #5
    beb4:	01db      	lsls	r3, r3, #7
    beb6:	4929      	ldr	r1, [pc, #164]	; (bf5c <HAL_RadioInit+0x194>)
    beb8:	468c      	mov	ip, r1
    beba:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    bebc:	211f      	movs	r1, #31
    bebe:	4011      	ands	r1, r2
    bec0:	2201      	movs	r2, #1
    bec2:	0010      	movs	r0, r2
    bec4:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    bec6:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    bec8:	ac02      	add	r4, sp, #8
    beca:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    becc:	2300      	movs	r3, #0
    bece:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    bed0:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    bed2:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    bed4:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    bed6:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    bed8:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    beda:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    bedc:	3223      	adds	r2, #35	; 0x23
    bede:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    bee0:	3a18      	subs	r2, #24
    bee2:	2100      	movs	r1, #0
    bee4:	a808      	add	r0, sp, #32
    bee6:	4b1e      	ldr	r3, [pc, #120]	; (bf60 <HAL_RadioInit+0x198>)
    bee8:	4798      	blx	r3
	config_spi_master.mode_specific.master.baudrate = SX_RF_SPI_BAUDRATE;
    beea:	4b1e      	ldr	r3, [pc, #120]	; (bf64 <HAL_RadioInit+0x19c>)
    beec:	61a3      	str	r3, [r4, #24]
	config_spi_master.mux_setting = SX_RF_SPI_SERCOM_MUX_SETTING;
    beee:	2380      	movs	r3, #128	; 0x80
    bef0:	025b      	lsls	r3, r3, #9
    bef2:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = SX_RF_SPI_SERCOM_PINMUX_PAD0;
    bef4:	4b1c      	ldr	r3, [pc, #112]	; (bf68 <HAL_RadioInit+0x1a0>)
    bef6:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    bef8:	2301      	movs	r3, #1
    befa:	425b      	negs	r3, r3
    befc:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = SX_RF_SPI_SERCOM_PINMUX_PAD2;
    befe:	4b1b      	ldr	r3, [pc, #108]	; (bf6c <HAL_RadioInit+0x1a4>)
    bf00:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = SX_RF_SPI_SERCOM_PINMUX_PAD3;
    bf02:	4b1b      	ldr	r3, [pc, #108]	; (bf70 <HAL_RadioInit+0x1a8>)
    bf04:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, SX_RF_SPI, &config_spi_master);	
    bf06:	4d1b      	ldr	r5, [pc, #108]	; (bf74 <HAL_RadioInit+0x1ac>)
    bf08:	0022      	movs	r2, r4
    bf0a:	491b      	ldr	r1, [pc, #108]	; (bf78 <HAL_RadioInit+0x1b0>)
    bf0c:	0028      	movs	r0, r5
    bf0e:	4b1b      	ldr	r3, [pc, #108]	; (bf7c <HAL_RadioInit+0x1b4>)
    bf10:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    bf12:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    bf14:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    bf16:	2b00      	cmp	r3, #0
    bf18:	d1fc      	bne.n	bf14 <HAL_RadioInit+0x14c>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    bf1a:	6813      	ldr	r3, [r2, #0]
    bf1c:	2102      	movs	r1, #2
    bf1e:	430b      	orrs	r3, r1
    bf20:	6013      	str	r3, [r2, #0]
}
    bf22:	b010      	add	sp, #64	; 0x40
    bf24:	bc1c      	pop	{r2, r3, r4}
    bf26:	4690      	mov	r8, r2
    bf28:	4699      	mov	r9, r3
    bf2a:	46a2      	mov	sl, r4
    bf2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bf2e:	46c0      	nop			; (mov r8, r8)
    bf30:	00004ba9 	.word	0x00004ba9
    bf34:	40002900 	.word	0x40002900
    bf38:	40002880 	.word	0x40002880
    bf3c:	000048f5 	.word	0x000048f5
    bf40:	00004909 	.word	0x00004909
    bf44:	0000bd71 	.word	0x0000bd71
    bf48:	000047b5 	.word	0x000047b5
    bf4c:	000047e1 	.word	0x000047e1
    bf50:	0000bd51 	.word	0x0000bd51
    bf54:	0000bd31 	.word	0x0000bd31
    bf58:	2000296c 	.word	0x2000296c
    bf5c:	40002800 	.word	0x40002800
    bf60:	00016151 	.word	0x00016151
    bf64:	001e8480 	.word	0x001e8480
    bf68:	00530005 	.word	0x00530005
    bf6c:	003e0005 	.word	0x003e0005
    bf70:	00520005 	.word	0x00520005
    bf74:	20001b60 	.word	0x20001b60
    bf78:	42001000 	.word	0x42001000
    bf7c:	0000577d 	.word	0x0000577d

0000bf80 <RADIO_Reset>:
{
    bf80:	b570      	push	{r4, r5, r6, lr}
    bf82:	b082      	sub	sp, #8
	HAL_ResetPinMakeOutput();
    bf84:	4c0a      	ldr	r4, [pc, #40]	; (bfb0 <RADIO_Reset+0x30>)
    bf86:	47a0      	blx	r4
		port_base->OUTCLR.reg = pin_mask;
    bf88:	4d0a      	ldr	r5, [pc, #40]	; (bfb4 <RADIO_Reset+0x34>)
    bf8a:	2680      	movs	r6, #128	; 0x80
    bf8c:	0236      	lsls	r6, r6, #8
    bf8e:	616e      	str	r6, [r5, #20]
	SystemBlockingWaitMs(1);
    bf90:	2001      	movs	r0, #1
    bf92:	4b09      	ldr	r3, [pc, #36]	; (bfb8 <RADIO_Reset+0x38>)
    bf94:	4798      	blx	r3
	config->direction  = PORT_PIN_DIR_INPUT;
    bf96:	a901      	add	r1, sp, #4
    bf98:	2300      	movs	r3, #0
    bf9a:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    bf9c:	2201      	movs	r2, #1
    bf9e:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    bfa0:	708b      	strb	r3, [r1, #2]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    bfa2:	202f      	movs	r0, #47	; 0x2f
    bfa4:	4b05      	ldr	r3, [pc, #20]	; (bfbc <RADIO_Reset+0x3c>)
    bfa6:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    bfa8:	61ae      	str	r6, [r5, #24]
	HAL_ResetPinMakeOutput();
    bfaa:	47a0      	blx	r4
}
    bfac:	b002      	add	sp, #8
    bfae:	bd70      	pop	{r4, r5, r6, pc}
    bfb0:	0000bd11 	.word	0x0000bd11
    bfb4:	40002880 	.word	0x40002880
    bfb8:	0000c15d 	.word	0x0000c15d
    bfbc:	00004ba9 	.word	0x00004ba9

0000bfc0 <RADIO_RegisterWrite>:
{
    bfc0:	b570      	push	{r4, r5, r6, lr}
    bfc2:	0004      	movs	r4, r0
    bfc4:	000d      	movs	r5, r1
	HAL_SPICSAssert();
    bfc6:	4b05      	ldr	r3, [pc, #20]	; (bfdc <RADIO_RegisterWrite+0x1c>)
    bfc8:	4798      	blx	r3
	HAL_SPISend(REG_WRITE_CMD | reg);
    bfca:	2080      	movs	r0, #128	; 0x80
    bfcc:	4320      	orrs	r0, r4
    bfce:	4c04      	ldr	r4, [pc, #16]	; (bfe0 <RADIO_RegisterWrite+0x20>)
    bfd0:	47a0      	blx	r4
	HAL_SPISend(value);
    bfd2:	0028      	movs	r0, r5
    bfd4:	47a0      	blx	r4
	HAL_SPICSDeassert();
    bfd6:	4b03      	ldr	r3, [pc, #12]	; (bfe4 <RADIO_RegisterWrite+0x24>)
    bfd8:	4798      	blx	r3
}
    bfda:	bd70      	pop	{r4, r5, r6, pc}
    bfdc:	0000bd91 	.word	0x0000bd91
    bfe0:	0000bcbd 	.word	0x0000bcbd
    bfe4:	0000bdad 	.word	0x0000bdad

0000bfe8 <RADIO_RegisterRead>:
{
    bfe8:	b510      	push	{r4, lr}
    bfea:	0004      	movs	r4, r0
	HAL_SPICSAssert();
    bfec:	4b06      	ldr	r3, [pc, #24]	; (c008 <RADIO_RegisterRead+0x20>)
    bfee:	4798      	blx	r3
	HAL_SPISend(reg);
    bff0:	207f      	movs	r0, #127	; 0x7f
    bff2:	4020      	ands	r0, r4
    bff4:	4c05      	ldr	r4, [pc, #20]	; (c00c <RADIO_RegisterRead+0x24>)
    bff6:	47a0      	blx	r4
	readValue = HAL_SPISend(0xFF);
    bff8:	20ff      	movs	r0, #255	; 0xff
    bffa:	47a0      	blx	r4
    bffc:	0004      	movs	r4, r0
	HAL_SPICSDeassert();
    bffe:	4b04      	ldr	r3, [pc, #16]	; (c010 <RADIO_RegisterRead+0x28>)
    c000:	4798      	blx	r3
}
    c002:	0020      	movs	r0, r4
    c004:	bd10      	pop	{r4, pc}
    c006:	46c0      	nop			; (mov r8, r8)
    c008:	0000bd91 	.word	0x0000bd91
    c00c:	0000bcbd 	.word	0x0000bcbd
    c010:	0000bdad 	.word	0x0000bdad

0000c014 <RADIO_FrameWrite>:
{
    c014:	b570      	push	{r4, r5, r6, lr}
    c016:	0004      	movs	r4, r0
    c018:	000e      	movs	r6, r1
    c01a:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    c01c:	4b0a      	ldr	r3, [pc, #40]	; (c048 <RADIO_FrameWrite+0x34>)
    c01e:	4798      	blx	r3
    HAL_SPISend(REG_WRITE_CMD | offset);
    c020:	2080      	movs	r0, #128	; 0x80
    c022:	4320      	orrs	r0, r4
    c024:	4b09      	ldr	r3, [pc, #36]	; (c04c <RADIO_FrameWrite+0x38>)
    c026:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    c028:	2d00      	cmp	r5, #0
    c02a:	d00a      	beq.n	c042 <RADIO_FrameWrite+0x2e>
    c02c:	0034      	movs	r4, r6
    c02e:	3d01      	subs	r5, #1
    c030:	b2ed      	uxtb	r5, r5
    c032:	3501      	adds	r5, #1
    c034:	1975      	adds	r5, r6, r5
	    HAL_SPISend(buffer[i]);
    c036:	4e05      	ldr	r6, [pc, #20]	; (c04c <RADIO_FrameWrite+0x38>)
    c038:	7820      	ldrb	r0, [r4, #0]
    c03a:	47b0      	blx	r6
    c03c:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    c03e:	42ac      	cmp	r4, r5
    c040:	d1fa      	bne.n	c038 <RADIO_FrameWrite+0x24>
    HAL_SPICSDeassert();
    c042:	4b03      	ldr	r3, [pc, #12]	; (c050 <RADIO_FrameWrite+0x3c>)
    c044:	4798      	blx	r3
}
    c046:	bd70      	pop	{r4, r5, r6, pc}
    c048:	0000bd91 	.word	0x0000bd91
    c04c:	0000bcbd 	.word	0x0000bcbd
    c050:	0000bdad 	.word	0x0000bdad

0000c054 <RADIO_FrameRead>:
{
    c054:	b570      	push	{r4, r5, r6, lr}
    c056:	0004      	movs	r4, r0
    c058:	000e      	movs	r6, r1
    c05a:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    c05c:	4b0a      	ldr	r3, [pc, #40]	; (c088 <RADIO_FrameRead+0x34>)
    c05e:	4798      	blx	r3
    HAL_SPISend(offset);
    c060:	0020      	movs	r0, r4
    c062:	4b0a      	ldr	r3, [pc, #40]	; (c08c <RADIO_FrameRead+0x38>)
    c064:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    c066:	2d00      	cmp	r5, #0
    c068:	d00b      	beq.n	c082 <RADIO_FrameRead+0x2e>
    c06a:	0034      	movs	r4, r6
    c06c:	3d01      	subs	r5, #1
    c06e:	b2ed      	uxtb	r5, r5
    c070:	3501      	adds	r5, #1
    c072:	1975      	adds	r5, r6, r5
	    buffer[i] = HAL_SPISend(0xFF);
    c074:	4e05      	ldr	r6, [pc, #20]	; (c08c <RADIO_FrameRead+0x38>)
    c076:	20ff      	movs	r0, #255	; 0xff
    c078:	47b0      	blx	r6
    c07a:	7020      	strb	r0, [r4, #0]
    c07c:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    c07e:	42ac      	cmp	r4, r5
    c080:	d1f9      	bne.n	c076 <RADIO_FrameRead+0x22>
    HAL_SPICSDeassert();
    c082:	4b03      	ldr	r3, [pc, #12]	; (c090 <RADIO_FrameRead+0x3c>)
    c084:	4798      	blx	r3
}
    c086:	bd70      	pop	{r4, r5, r6, pc}
    c088:	0000bd91 	.word	0x0000bd91
    c08c:	0000bcbd 	.word	0x0000bcbd
    c090:	0000bdad 	.word	0x0000bdad

0000c094 <HAL_RegisterDioInterruptHandler>:
 * \param[in] dioPin  - DIO pin
 * \param[in] handler - function to be called upon given DIO interrupt
 */
void HAL_RegisterDioInterruptHandler(uint8_t dioPin, DioInterruptHandler_t handler)
{
  switch (dioPin)
    c094:	2802      	cmp	r0, #2
    c096:	d007      	beq.n	c0a8 <HAL_RegisterDioInterruptHandler+0x14>
    c098:	2804      	cmp	r0, #4
    c09a:	d008      	beq.n	c0ae <HAL_RegisterDioInterruptHandler+0x1a>
    c09c:	2801      	cmp	r0, #1
    c09e:	d000      	beq.n	c0a2 <HAL_RegisterDioInterruptHandler+0xe>
#endif

    default:
      break;
  }
}
    c0a0:	4770      	bx	lr
      interruptHandlerDio0 = handler;
    c0a2:	4b04      	ldr	r3, [pc, #16]	; (c0b4 <HAL_RegisterDioInterruptHandler+0x20>)
    c0a4:	6019      	str	r1, [r3, #0]
      break;
    c0a6:	e7fb      	b.n	c0a0 <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio1 = handler;
    c0a8:	4b03      	ldr	r3, [pc, #12]	; (c0b8 <HAL_RegisterDioInterruptHandler+0x24>)
    c0aa:	6019      	str	r1, [r3, #0]
      break;
    c0ac:	e7f8      	b.n	c0a0 <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio2 = handler;
    c0ae:	4b03      	ldr	r3, [pc, #12]	; (c0bc <HAL_RegisterDioInterruptHandler+0x28>)
    c0b0:	6019      	str	r1, [r3, #0]
}
    c0b2:	e7f5      	b.n	c0a0 <HAL_RegisterDioInterruptHandler+0xc>
    c0b4:	20001b54 	.word	0x20001b54
    c0b8:	20001b58 	.word	0x20001b58
    c0bc:	20001b5c 	.word	0x20001b5c

0000c0c0 <HAL_EnableRFCtrl>:

void HAL_EnableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
   if ((RFCtrl1 == RFO_HF) || (RFCtrl2 == RX))
    c0c0:	2801      	cmp	r0, #1
    c0c2:	d00a      	beq.n	c0da <HAL_EnableRFCtrl+0x1a>
    c0c4:	2900      	cmp	r1, #0
    c0c6:	d008      	beq.n	c0da <HAL_EnableRFCtrl+0x1a>
   {
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_ACTIVE);		
   }
   else if ((RFCtrl1 == PA_BOOST) && (RFCtrl2 == TX))
    c0c8:	2802      	cmp	r0, #2
    c0ca:	d10a      	bne.n	c0e2 <HAL_EnableRFCtrl+0x22>
    c0cc:	2901      	cmp	r1, #1
    c0ce:	d108      	bne.n	c0e2 <HAL_EnableRFCtrl+0x22>
		port_base->OUTCLR.reg = pin_mask;
    c0d0:	2280      	movs	r2, #128	; 0x80
    c0d2:	0192      	lsls	r2, r2, #6
    c0d4:	4b03      	ldr	r3, [pc, #12]	; (c0e4 <HAL_EnableRFCtrl+0x24>)
    c0d6:	615a      	str	r2, [r3, #20]
   {
	   port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);
   }
#endif	
}
    c0d8:	e003      	b.n	c0e2 <HAL_EnableRFCtrl+0x22>
		port_base->OUTSET.reg = pin_mask;
    c0da:	2280      	movs	r2, #128	; 0x80
    c0dc:	0192      	lsls	r2, r2, #6
    c0de:	4b01      	ldr	r3, [pc, #4]	; (c0e4 <HAL_EnableRFCtrl+0x24>)
    c0e0:	619a      	str	r2, [r3, #24]
    c0e2:	4770      	bx	lr
    c0e4:	40002800 	.word	0x40002800

0000c0e8 <HAL_DisableRFCtrl>:

void HAL_DisableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
	if ((RFCtrl1 == RFO_HF) || (RFCtrl2 == RX))
    c0e8:	2801      	cmp	r0, #1
    c0ea:	d001      	beq.n	c0f0 <HAL_DisableRFCtrl+0x8>
    c0ec:	2900      	cmp	r1, #0
    c0ee:	d103      	bne.n	c0f8 <HAL_DisableRFCtrl+0x10>
		port_base->OUTCLR.reg = pin_mask;
    c0f0:	2280      	movs	r2, #128	; 0x80
    c0f2:	0192      	lsls	r2, r2, #6
    c0f4:	4b01      	ldr	r3, [pc, #4]	; (c0fc <HAL_DisableRFCtrl+0x14>)
    c0f6:	615a      	str	r2, [r3, #20]
	{
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
	}
#endif	
}
    c0f8:	4770      	bx	lr
    c0fa:	46c0      	nop			; (mov r8, r8)
    c0fc:	40002800 	.word	0x40002800

0000c100 <HAL_GetRadioClkStabilizationDelay>:
 * \param[out] Time value in ms
 */
uint8_t HAL_GetRadioClkStabilizationDelay(void)
{
	return RADIO_CLK_STABILITATION_DELAY;
}
    c100:	2002      	movs	r0, #2
    c102:	4770      	bx	lr

0000c104 <HAL_GetRadioClkSrc>:
 * \param[out] Type of clock source TCXO or XTAL
 */
RadioClockSources_t HAL_GetRadioClkSrc(void)
{
	return RADIO_CLK_SRC;
}
    c104:	2000      	movs	r0, #0
    c106:	4770      	bx	lr

0000c108 <HAL_TCXOPowerOn>:
 *
 * \param[in] None
 * \param[out] None
 */
void HAL_TCXOPowerOn(void)
{
    c108:	b510      	push	{r4, lr}
		port_base->OUTSET.reg = pin_mask;
    c10a:	2280      	movs	r2, #128	; 0x80
    c10c:	0092      	lsls	r2, r2, #2
    c10e:	4b03      	ldr	r3, [pc, #12]	; (c11c <HAL_TCXOPowerOn+0x14>)
    c110:	619a      	str	r2, [r3, #24]
#ifdef TCXO_ENABLE
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_ACTIVE);
	delay_ms(RADIO_CLK_STABILITATION_DELAY);
    c112:	2002      	movs	r0, #2
    c114:	4b02      	ldr	r3, [pc, #8]	; (c120 <HAL_TCXOPowerOn+0x18>)
    c116:	4798      	blx	r3
#endif
}
    c118:	bd10      	pop	{r4, pc}
    c11a:	46c0      	nop			; (mov r8, r8)
    c11c:	40002800 	.word	0x40002800
    c120:	000044cd 	.word	0x000044cd

0000c124 <HAL_TCXOPowerOff>:
		port_base->OUTCLR.reg = pin_mask;
    c124:	2280      	movs	r2, #128	; 0x80
    c126:	0092      	lsls	r2, r2, #2
    c128:	4b01      	ldr	r3, [pc, #4]	; (c130 <HAL_TCXOPowerOff+0xc>)
    c12a:	615a      	str	r2, [r3, #20]
#ifdef TCXO_ENABLE
#ifndef TCXO_ALWAYS_ON
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
#endif
}
    c12c:	4770      	bx	lr
    c12e:	46c0      	nop			; (mov r8, r8)
    c130:	40002800 	.word	0x40002800

0000c134 <SleepTimerGetElapsedTime>:
/**
* \brief Calculate the Elapsed Time from the previous call of this function
* \retval Elapsed time in ticks
*/
uint32_t SleepTimerGetElapsedTime(void)
{
    c134:	b510      	push	{r4, lr}
	return rtc_count_get_count(&rtc);
    c136:	4802      	ldr	r0, [pc, #8]	; (c140 <SleepTimerGetElapsedTime+0xc>)
    c138:	4b02      	ldr	r3, [pc, #8]	; (c144 <SleepTimerGetElapsedTime+0x10>)
    c13a:	4798      	blx	r3
}
    c13c:	bd10      	pop	{r4, pc}
    c13e:	46c0      	nop			; (mov r8, r8)
    c140:	20002970 	.word	0x20002970
    c144:	00004bd9 	.word	0x00004bd9

0000c148 <SleepTimerStop>:

/**
* \brief Stop the sleep timer
*/
void SleepTimerStop(void)
{
    c148:	b510      	push	{r4, lr}
	rtc_count_disable_callback(&rtc, RTC_COUNT_CALLBACK_COMPARE_0);
    c14a:	2108      	movs	r1, #8
    c14c:	4801      	ldr	r0, [pc, #4]	; (c154 <SleepTimerStop+0xc>)
    c14e:	4b02      	ldr	r3, [pc, #8]	; (c158 <SleepTimerStop+0x10>)
    c150:	4798      	blx	r3
}
    c152:	bd10      	pop	{r4, pc}
    c154:	20002970 	.word	0x20002970
    c158:	00004c05 	.word	0x00004c05

0000c15c <SystemBlockingWaitMs>:
 * waiting with the MCU in sleep.
 * Find out how long it takes the MCU to go to and wake up from sleep to see if
 * it makes sense to go to sleep at all 
 */
void SystemBlockingWaitMs(uint32_t ms)
{
    c15c:	b510      	push	{r4, lr}
#ifndef UT
    delay_ms(ms);
    c15e:	2800      	cmp	r0, #0
    c160:	d103      	bne.n	c16a <SystemBlockingWaitMs+0xe>
    c162:	2001      	movs	r0, #1
    c164:	4b02      	ldr	r3, [pc, #8]	; (c170 <SystemBlockingWaitMs+0x14>)
    c166:	4798      	blx	r3
#endif
}
    c168:	bd10      	pop	{r4, pc}
    delay_ms(ms);
    c16a:	4b02      	ldr	r3, [pc, #8]	; (c174 <SystemBlockingWaitMs+0x18>)
    c16c:	4798      	blx	r3
    c16e:	e7fb      	b.n	c168 <SystemBlockingWaitMs+0xc>
    c170:	000044a1 	.word	0x000044a1
    c174:	000044cd 	.word	0x000044cd

0000c178 <system_enter_critical_section>:
{

}

void system_enter_critical_section(void)
{
    c178:	b510      	push	{r4, lr}
	cpu_irq_enter_critical();
    c17a:	4b01      	ldr	r3, [pc, #4]	; (c180 <system_enter_critical_section+0x8>)
    c17c:	4798      	blx	r3
#ifndef UT
	system_interrupt_enter_critical_section();
#endif
}
    c17e:	bd10      	pop	{r4, pc}
    c180:	000044f9 	.word	0x000044f9

0000c184 <system_leave_critical_section>:

void system_leave_critical_section(void)
{
    c184:	b510      	push	{r4, lr}
	cpu_irq_leave_critical();
    c186:	4b01      	ldr	r3, [pc, #4]	; (c18c <system_leave_critical_section+0x8>)
    c188:	4798      	blx	r3
#ifndef UT
	system_interrupt_leave_critical_section();
#endif
}
    c18a:	bd10      	pop	{r4, pc}
    c18c:	00004539 	.word	0x00004539

0000c190 <PMM_Wakeup>:

/**
* \brief Wakeup from sleep
*/
void PMM_Wakeup(void)
{
    c190:	b570      	push	{r4, r5, r6, lr}
    uint64_t sleptTimeUs = 0;

    if (PMM_STATE_SLEEP == pmmState)
    c192:	4b16      	ldr	r3, [pc, #88]	; (c1ec <PMM_Wakeup+0x5c>)
    c194:	781b      	ldrb	r3, [r3, #0]
    c196:	2b01      	cmp	r3, #1
    c198:	d000      	beq.n	c19c <PMM_Wakeup+0xc>
        {
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
            sleepReq = NULL;
        }
    }
}
    c19a:	bd70      	pop	{r4, r5, r6, pc}
		pmmState = PMM_STATE_ACTIVE;
    c19c:	2200      	movs	r2, #0
    c19e:	4b13      	ldr	r3, [pc, #76]	; (c1ec <PMM_Wakeup+0x5c>)
    c1a0:	701a      	strb	r2, [r3, #0]
        sleptTimeUs = SLEEP_TICKS_TO_US(SleepTimerGetElapsedTime());
    c1a2:	4b13      	ldr	r3, [pc, #76]	; (c1f0 <PMM_Wakeup+0x60>)
    c1a4:	4798      	blx	r3
    c1a6:	4b13      	ldr	r3, [pc, #76]	; (c1f4 <PMM_Wakeup+0x64>)
    c1a8:	4798      	blx	r3
    c1aa:	4913      	ldr	r1, [pc, #76]	; (c1f8 <PMM_Wakeup+0x68>)
    c1ac:	4b13      	ldr	r3, [pc, #76]	; (c1fc <PMM_Wakeup+0x6c>)
    c1ae:	4798      	blx	r3
    c1b0:	4b13      	ldr	r3, [pc, #76]	; (c200 <PMM_Wakeup+0x70>)
    c1b2:	4798      	blx	r3
    c1b4:	0004      	movs	r4, r0
    c1b6:	000d      	movs	r5, r1
        SleepTimerStop();
    c1b8:	4b12      	ldr	r3, [pc, #72]	; (c204 <PMM_Wakeup+0x74>)
    c1ba:	4798      	blx	r3
        SystemTimerSync(sleptTimeUs);
    c1bc:	0020      	movs	r0, r4
    c1be:	0029      	movs	r1, r5
    c1c0:	4b11      	ldr	r3, [pc, #68]	; (c208 <PMM_Wakeup+0x78>)
    c1c2:	4798      	blx	r3
        if (sleepReq && sleepReq->pmmWakeupCallback)
    c1c4:	4b11      	ldr	r3, [pc, #68]	; (c20c <PMM_Wakeup+0x7c>)
    c1c6:	681b      	ldr	r3, [r3, #0]
    c1c8:	2b00      	cmp	r3, #0
    c1ca:	d0e6      	beq.n	c19a <PMM_Wakeup+0xa>
    c1cc:	689e      	ldr	r6, [r3, #8]
    c1ce:	2e00      	cmp	r6, #0
    c1d0:	d0e3      	beq.n	c19a <PMM_Wakeup+0xa>
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
    c1d2:	22fa      	movs	r2, #250	; 0xfa
    c1d4:	0092      	lsls	r2, r2, #2
    c1d6:	2300      	movs	r3, #0
    c1d8:	0020      	movs	r0, r4
    c1da:	0029      	movs	r1, r5
    c1dc:	4c0c      	ldr	r4, [pc, #48]	; (c210 <PMM_Wakeup+0x80>)
    c1de:	47a0      	blx	r4
    c1e0:	47b0      	blx	r6
            sleepReq = NULL;
    c1e2:	2200      	movs	r2, #0
    c1e4:	4b09      	ldr	r3, [pc, #36]	; (c20c <PMM_Wakeup+0x7c>)
    c1e6:	601a      	str	r2, [r3, #0]
}
    c1e8:	e7d7      	b.n	c19a <PMM_Wakeup+0xa>
    c1ea:	46c0      	nop			; (mov r8, r8)
    c1ec:	20001b6c 	.word	0x20001b6c
    c1f0:	0000c135 	.word	0x0000c135
    c1f4:	000142d5 	.word	0x000142d5
    c1f8:	41f423d7 	.word	0x41f423d7
    c1fc:	00013c7d 	.word	0x00013c7d
    c200:	000133b9 	.word	0x000133b9
    c204:	0000c149 	.word	0x0000c149
    c208:	0000d06d 	.word	0x0000d06d
    c20c:	20001b70 	.word	0x20001b70
    c210:	000132b9 	.word	0x000132b9

0000c214 <InitDefault868Channels>:
/*
 * \brief This function initializes all the EU868 Channels to default values
 */
#if (EU_BAND == 1)
void InitDefault868Channels (void)
{
    c214:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    memset (RegParams.pChParams, 0, sizeof(DefaultChannels868) );
    c216:	4c39      	ldr	r4, [pc, #228]	; (c2fc <InitDefault868Channels+0xe8>)
    c218:	7920      	ldrb	r0, [r4, #4]
    c21a:	7963      	ldrb	r3, [r4, #5]
    c21c:	021b      	lsls	r3, r3, #8
    c21e:	4303      	orrs	r3, r0
    c220:	79a0      	ldrb	r0, [r4, #6]
    c222:	0400      	lsls	r0, r0, #16
    c224:	4303      	orrs	r3, r0
    c226:	79e0      	ldrb	r0, [r4, #7]
    c228:	0600      	lsls	r0, r0, #24
    c22a:	4318      	orrs	r0, r3
    c22c:	2206      	movs	r2, #6
    c22e:	2100      	movs	r1, #0
    c230:	4e33      	ldr	r6, [pc, #204]	; (c300 <InitDefault868Channels+0xec>)
    c232:	47b0      	blx	r6
    memcpy (RegParams.pChParams, DefaultChannels868, sizeof(DefaultChannels868) );
    c234:	7920      	ldrb	r0, [r4, #4]
    c236:	7963      	ldrb	r3, [r4, #5]
    c238:	021b      	lsls	r3, r3, #8
    c23a:	4303      	orrs	r3, r0
    c23c:	79a0      	ldrb	r0, [r4, #6]
    c23e:	0400      	lsls	r0, r0, #16
    c240:	4303      	orrs	r3, r0
    c242:	79e0      	ldrb	r0, [r4, #7]
    c244:	0600      	lsls	r0, r0, #24
    c246:	4318      	orrs	r0, r3
    c248:	2206      	movs	r2, #6
    c24a:	492e      	ldr	r1, [pc, #184]	; (c304 <InitDefault868Channels+0xf0>)
    c24c:	4d2e      	ldr	r5, [pc, #184]	; (c308 <InitDefault868Channels+0xf4>)
    c24e:	47a8      	blx	r5
    memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels868) );
    c250:	7a20      	ldrb	r0, [r4, #8]
    c252:	7a63      	ldrb	r3, [r4, #9]
    c254:	021b      	lsls	r3, r3, #8
    c256:	4303      	orrs	r3, r0
    c258:	7aa0      	ldrb	r0, [r4, #10]
    c25a:	0400      	lsls	r0, r0, #16
    c25c:	4303      	orrs	r3, r0
    c25e:	7ae0      	ldrb	r0, [r4, #11]
    c260:	0600      	lsls	r0, r0, #24
    c262:	4318      	orrs	r0, r3
    c264:	2224      	movs	r2, #36	; 0x24
    c266:	2100      	movs	r1, #0
    c268:	47b0      	blx	r6
    memcpy (RegParams.pOtherChParams, AdvChannels868, sizeof(AdvChannels868) );	
    c26a:	7a20      	ldrb	r0, [r4, #8]
    c26c:	7a63      	ldrb	r3, [r4, #9]
    c26e:	021b      	lsls	r3, r3, #8
    c270:	4303      	orrs	r3, r0
    c272:	7aa0      	ldrb	r0, [r4, #10]
    c274:	0400      	lsls	r0, r0, #16
    c276:	4303      	orrs	r3, r0
    c278:	7ae0      	ldrb	r0, [r4, #11]
    c27a:	0600      	lsls	r0, r0, #24
    c27c:	4318      	orrs	r0, r3
    c27e:	2224      	movs	r2, #36	; 0x24
    c280:	4922      	ldr	r1, [pc, #136]	; (c30c <InitDefault868Channels+0xf8>)
    c282:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParams868) );
    c284:	7b20      	ldrb	r0, [r4, #12]
    c286:	7b63      	ldrb	r3, [r4, #13]
    c288:	021b      	lsls	r3, r3, #8
    c28a:	4303      	orrs	r3, r0
    c28c:	7ba0      	ldrb	r0, [r4, #14]
    c28e:	0400      	lsls	r0, r0, #16
    c290:	4303      	orrs	r3, r0
    c292:	7be0      	ldrb	r0, [r4, #15]
    c294:	0600      	lsls	r0, r0, #24
    c296:	4318      	orrs	r0, r3
    c298:	2248      	movs	r2, #72	; 0x48
    c29a:	2100      	movs	r1, #0
    c29c:	47b0      	blx	r6
	memcpy (RegParams.pSubBandParams, SubBandParams868, sizeof(SubBandParams868) );
    c29e:	7b20      	ldrb	r0, [r4, #12]
    c2a0:	7b63      	ldrb	r3, [r4, #13]
    c2a2:	021b      	lsls	r3, r3, #8
    c2a4:	4303      	orrs	r3, r0
    c2a6:	7ba0      	ldrb	r0, [r4, #14]
    c2a8:	0400      	lsls	r0, r0, #16
    c2aa:	4303      	orrs	r3, r0
    c2ac:	7be0      	ldrb	r0, [r4, #15]
    c2ae:	0600      	lsls	r0, r0, #24
    c2b0:	4318      	orrs	r0, r3
    c2b2:	2248      	movs	r2, #72	; 0x48
    c2b4:	4916      	ldr	r1, [pc, #88]	; (c310 <InitDefault868Channels+0xfc>)
    c2b6:	47a8      	blx	r5
	memset(RegParams.cmnParams.paramsType2.subBandDutyCycle,0,sizeof(SubBandDutyCycle868));
	memcpy(RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycle868,sizeof(SubBandDutyCycle868));
    c2b8:	0020      	movs	r0, r4
    c2ba:	30af      	adds	r0, #175	; 0xaf
    c2bc:	30ff      	adds	r0, #255	; 0xff
    c2be:	220c      	movs	r2, #12
    c2c0:	4914      	ldr	r1, [pc, #80]	; (c314 <InitDefault868Channels+0x100>)
    c2c2:	47a8      	blx	r5
    for (i = 3; i < RegParams.maxChannels; i++)
    c2c4:	232a      	movs	r3, #42	; 0x2a
    c2c6:	56e3      	ldrsb	r3, [r4, r3]
    c2c8:	2b03      	cmp	r3, #3
    c2ca:	dd15      	ble.n	c2f8 <InitDefault868Channels+0xe4>
    c2cc:	2303      	movs	r3, #3
    {
        // for undefined channels the duty cycle should be a very big value, and the data range a not-valid value
        //duty cycle 0 means no duty cycle limitation, the bigger the duty cycle value, the greater the limitation
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    c2ce:	480b      	ldr	r0, [pc, #44]	; (c2fc <InitDefault868Channels+0xe8>)
    c2d0:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    c2d2:	242a      	movs	r4, #42	; 0x2a
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    c2d4:	7902      	ldrb	r2, [r0, #4]
    c2d6:	7941      	ldrb	r1, [r0, #5]
    c2d8:	0209      	lsls	r1, r1, #8
    c2da:	4311      	orrs	r1, r2
    c2dc:	7982      	ldrb	r2, [r0, #6]
    c2de:	0412      	lsls	r2, r2, #16
    c2e0:	4311      	orrs	r1, r2
    c2e2:	79c2      	ldrb	r2, [r0, #7]
    c2e4:	0612      	lsls	r2, r2, #24
    c2e6:	430a      	orrs	r2, r1
    c2e8:	0059      	lsls	r1, r3, #1
    c2ea:	188a      	adds	r2, r1, r2
    c2ec:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    c2ee:	3301      	adds	r3, #1
    c2f0:	b2db      	uxtb	r3, r3
    c2f2:	5702      	ldrsb	r2, [r0, r4]
    c2f4:	4293      	cmp	r3, r2
    c2f6:	dbed      	blt.n	c2d4 <InitDefault868Channels+0xc0>
    }
}
    c2f8:	bd70      	pop	{r4, r5, r6, pc}
    c2fa:	46c0      	nop			; (mov r8, r8)
    c2fc:	200029ac 	.word	0x200029ac
    c300:	00016151 	.word	0x00016151
    c304:	000181b8 	.word	0x000181b8
    c308:	0001613f 	.word	0x0001613f
    c30c:	0001818c 	.word	0x0001818c
    c310:	000181d8 	.word	0x000181d8
    c314:	000181c0 	.word	0x000181c0

0000c318 <InitDefault433Channels>:

/*
 * \brief This function initializes all the EU433 Channels to default values
 */
void InitDefault433Channels (void)
{
    c318:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    memset (RegParams.pChParams, 0, sizeof(DefaultChannels433) );
    c31a:	4c36      	ldr	r4, [pc, #216]	; (c3f4 <InitDefault433Channels+0xdc>)
    c31c:	7920      	ldrb	r0, [r4, #4]
    c31e:	7963      	ldrb	r3, [r4, #5]
    c320:	021b      	lsls	r3, r3, #8
    c322:	4303      	orrs	r3, r0
    c324:	79a0      	ldrb	r0, [r4, #6]
    c326:	0400      	lsls	r0, r0, #16
    c328:	4303      	orrs	r3, r0
    c32a:	79e0      	ldrb	r0, [r4, #7]
    c32c:	0600      	lsls	r0, r0, #24
    c32e:	4318      	orrs	r0, r3
    c330:	2206      	movs	r2, #6
    c332:	2100      	movs	r1, #0
    c334:	4e30      	ldr	r6, [pc, #192]	; (c3f8 <InitDefault433Channels+0xe0>)
    c336:	47b0      	blx	r6
    memcpy (RegParams.pChParams, DefaultChannels433, sizeof(DefaultChannels433) );
    c338:	7920      	ldrb	r0, [r4, #4]
    c33a:	7963      	ldrb	r3, [r4, #5]
    c33c:	021b      	lsls	r3, r3, #8
    c33e:	4303      	orrs	r3, r0
    c340:	79a0      	ldrb	r0, [r4, #6]
    c342:	0400      	lsls	r0, r0, #16
    c344:	4303      	orrs	r3, r0
    c346:	79e0      	ldrb	r0, [r4, #7]
    c348:	0600      	lsls	r0, r0, #24
    c34a:	4318      	orrs	r0, r3
    c34c:	2206      	movs	r2, #6
    c34e:	492b      	ldr	r1, [pc, #172]	; (c3fc <InitDefault433Channels+0xe4>)
    c350:	4d2b      	ldr	r5, [pc, #172]	; (c400 <InitDefault433Channels+0xe8>)
    c352:	47a8      	blx	r5
    memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels433) );
    c354:	7a20      	ldrb	r0, [r4, #8]
    c356:	7a63      	ldrb	r3, [r4, #9]
    c358:	021b      	lsls	r3, r3, #8
    c35a:	4303      	orrs	r3, r0
    c35c:	7aa0      	ldrb	r0, [r4, #10]
    c35e:	0400      	lsls	r0, r0, #16
    c360:	4303      	orrs	r3, r0
    c362:	7ae0      	ldrb	r0, [r4, #11]
    c364:	0600      	lsls	r0, r0, #24
    c366:	4318      	orrs	r0, r3
    c368:	2224      	movs	r2, #36	; 0x24
    c36a:	2100      	movs	r1, #0
    c36c:	47b0      	blx	r6
    memcpy (RegParams.pOtherChParams, AdvChannels433, sizeof(AdvChannels433) );
    c36e:	7a20      	ldrb	r0, [r4, #8]
    c370:	7a63      	ldrb	r3, [r4, #9]
    c372:	021b      	lsls	r3, r3, #8
    c374:	4303      	orrs	r3, r0
    c376:	7aa0      	ldrb	r0, [r4, #10]
    c378:	0400      	lsls	r0, r0, #16
    c37a:	4303      	orrs	r3, r0
    c37c:	7ae0      	ldrb	r0, [r4, #11]
    c37e:	0600      	lsls	r0, r0, #24
    c380:	4318      	orrs	r0, r3
    c382:	2224      	movs	r2, #36	; 0x24
    c384:	491f      	ldr	r1, [pc, #124]	; (c404 <InitDefault433Channels+0xec>)
    c386:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParams433) );
    c388:	7b20      	ldrb	r0, [r4, #12]
    c38a:	7b63      	ldrb	r3, [r4, #13]
    c38c:	021b      	lsls	r3, r3, #8
    c38e:	4303      	orrs	r3, r0
    c390:	7ba0      	ldrb	r0, [r4, #14]
    c392:	0400      	lsls	r0, r0, #16
    c394:	4303      	orrs	r3, r0
    c396:	7be0      	ldrb	r0, [r4, #15]
    c398:	0600      	lsls	r0, r0, #24
    c39a:	4318      	orrs	r0, r3
    c39c:	220c      	movs	r2, #12
    c39e:	2100      	movs	r1, #0
    c3a0:	47b0      	blx	r6
	memcpy (RegParams.pSubBandParams, SubBandParams433, sizeof(SubBandParams433) );	
    c3a2:	7b20      	ldrb	r0, [r4, #12]
    c3a4:	7b63      	ldrb	r3, [r4, #13]
    c3a6:	021b      	lsls	r3, r3, #8
    c3a8:	4303      	orrs	r3, r0
    c3aa:	7ba0      	ldrb	r0, [r4, #14]
    c3ac:	0400      	lsls	r0, r0, #16
    c3ae:	4303      	orrs	r3, r0
    c3b0:	7be0      	ldrb	r0, [r4, #15]
    c3b2:	0600      	lsls	r0, r0, #24
    c3b4:	4318      	orrs	r0, r3
    c3b6:	220c      	movs	r2, #12
    c3b8:	4913      	ldr	r1, [pc, #76]	; (c408 <InitDefault433Channels+0xf0>)
    c3ba:	47a8      	blx	r5
	
    for (i = 3; i < RegParams.maxChannels; i++)
    c3bc:	232a      	movs	r3, #42	; 0x2a
    c3be:	56e3      	ldrsb	r3, [r4, r3]
    c3c0:	2b03      	cmp	r3, #3
    c3c2:	dd15      	ble.n	c3f0 <InitDefault433Channels+0xd8>
    c3c4:	2303      	movs	r3, #3
    {
        // for undefined channels the duty cycle should be a very big value, and the data range a not-valid value
        //duty cycle 0 means no duty cycle limitation, the bigger the duty cycle value, the greater the limitation
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    c3c6:	480b      	ldr	r0, [pc, #44]	; (c3f4 <InitDefault433Channels+0xdc>)
    c3c8:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    c3ca:	242a      	movs	r4, #42	; 0x2a
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    c3cc:	7902      	ldrb	r2, [r0, #4]
    c3ce:	7941      	ldrb	r1, [r0, #5]
    c3d0:	0209      	lsls	r1, r1, #8
    c3d2:	4311      	orrs	r1, r2
    c3d4:	7982      	ldrb	r2, [r0, #6]
    c3d6:	0412      	lsls	r2, r2, #16
    c3d8:	4311      	orrs	r1, r2
    c3da:	79c2      	ldrb	r2, [r0, #7]
    c3dc:	0612      	lsls	r2, r2, #24
    c3de:	430a      	orrs	r2, r1
    c3e0:	0059      	lsls	r1, r3, #1
    c3e2:	188a      	adds	r2, r1, r2
    c3e4:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    c3e6:	3301      	adds	r3, #1
    c3e8:	b2db      	uxtb	r3, r3
    c3ea:	5702      	ldrsb	r2, [r0, r4]
    c3ec:	4293      	cmp	r3, r2
    c3ee:	dbed      	blt.n	c3cc <InitDefault433Channels+0xb4>
    }
}
    c3f0:	bd70      	pop	{r4, r5, r6, pc}
    c3f2:	46c0      	nop			; (mov r8, r8)
    c3f4:	200029ac 	.word	0x200029ac
    c3f8:	00016151 	.word	0x00016151
    c3fc:	000181b0 	.word	0x000181b0
    c400:	0001613f 	.word	0x0001613f
    c404:	00018168 	.word	0x00018168
    c408:	000181cc 	.word	0x000181cc

0000c40c <InitDefault920Channels>:
/*
 * \brief This function initializes all the IN865 Channels to default values
 */
#if (JPN_BAND == 1)
void InitDefault920Channels (void)
{
    c40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
    memset (RegParams.pChParams, 0, sizeof(DefaultChannels923JP) );
    c40e:	4c40      	ldr	r4, [pc, #256]	; (c510 <InitDefault920Channels+0x104>)
    c410:	7920      	ldrb	r0, [r4, #4]
    c412:	7963      	ldrb	r3, [r4, #5]
    c414:	021b      	lsls	r3, r3, #8
    c416:	4303      	orrs	r3, r0
    c418:	79a0      	ldrb	r0, [r4, #6]
    c41a:	0400      	lsls	r0, r0, #16
    c41c:	4303      	orrs	r3, r0
    c41e:	79e0      	ldrb	r0, [r4, #7]
    c420:	0600      	lsls	r0, r0, #24
    c422:	4318      	orrs	r0, r3
    c424:	2204      	movs	r2, #4
    c426:	2100      	movs	r1, #0
    c428:	4e3a      	ldr	r6, [pc, #232]	; (c514 <InitDefault920Channels+0x108>)
    c42a:	47b0      	blx	r6
	memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels923JP) );
    c42c:	7a20      	ldrb	r0, [r4, #8]
    c42e:	7a63      	ldrb	r3, [r4, #9]
    c430:	021b      	lsls	r3, r3, #8
    c432:	4303      	orrs	r3, r0
    c434:	7aa0      	ldrb	r0, [r4, #10]
    c436:	0400      	lsls	r0, r0, #16
    c438:	4303      	orrs	r3, r0
    c43a:	7ae0      	ldrb	r0, [r4, #11]
    c43c:	0600      	lsls	r0, r0, #24
    c43e:	4318      	orrs	r0, r3
    c440:	2218      	movs	r2, #24
    c442:	2100      	movs	r1, #0
    c444:	47b0      	blx	r6
    memcpy (RegParams.pChParams, DefaultChannels923JP, sizeof(DefaultChannels923JP) );
    c446:	7920      	ldrb	r0, [r4, #4]
    c448:	7963      	ldrb	r3, [r4, #5]
    c44a:	021b      	lsls	r3, r3, #8
    c44c:	4303      	orrs	r3, r0
    c44e:	79a0      	ldrb	r0, [r4, #6]
    c450:	0400      	lsls	r0, r0, #16
    c452:	4303      	orrs	r3, r0
    c454:	79e0      	ldrb	r0, [r4, #7]
    c456:	0600      	lsls	r0, r0, #24
    c458:	4318      	orrs	r0, r3
    c45a:	2204      	movs	r2, #4
    c45c:	492e      	ldr	r1, [pc, #184]	; (c518 <InitDefault920Channels+0x10c>)
    c45e:	4d2f      	ldr	r5, [pc, #188]	; (c51c <InitDefault920Channels+0x110>)
    c460:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels923JP, sizeof(AdvChannels923JP) );
    c462:	7a20      	ldrb	r0, [r4, #8]
    c464:	7a63      	ldrb	r3, [r4, #9]
    c466:	021b      	lsls	r3, r3, #8
    c468:	4303      	orrs	r3, r0
    c46a:	7aa0      	ldrb	r0, [r4, #10]
    c46c:	0400      	lsls	r0, r0, #16
    c46e:	4303      	orrs	r3, r0
    c470:	7ae0      	ldrb	r0, [r4, #11]
    c472:	0600      	lsls	r0, r0, #24
    c474:	4318      	orrs	r0, r3
    c476:	2218      	movs	r2, #24
    c478:	4929      	ldr	r1, [pc, #164]	; (c520 <InitDefault920Channels+0x114>)
    c47a:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParamsJP923) );
    c47c:	7b20      	ldrb	r0, [r4, #12]
    c47e:	7b63      	ldrb	r3, [r4, #13]
    c480:	021b      	lsls	r3, r3, #8
    c482:	4303      	orrs	r3, r0
    c484:	7ba0      	ldrb	r0, [r4, #14]
    c486:	0400      	lsls	r0, r0, #16
    c488:	4303      	orrs	r3, r0
    c48a:	7be0      	ldrb	r0, [r4, #15]
    c48c:	0600      	lsls	r0, r0, #24
    c48e:	4318      	orrs	r0, r3
    c490:	2218      	movs	r2, #24
    c492:	2100      	movs	r1, #0
    c494:	47b0      	blx	r6
	memcpy (RegParams.pSubBandParams, SubBandParamsJP923, sizeof(SubBandParamsJP923) );
    c496:	7b20      	ldrb	r0, [r4, #12]
    c498:	7b63      	ldrb	r3, [r4, #13]
    c49a:	021b      	lsls	r3, r3, #8
    c49c:	4303      	orrs	r3, r0
    c49e:	7ba0      	ldrb	r0, [r4, #14]
    c4a0:	0400      	lsls	r0, r0, #16
    c4a2:	4303      	orrs	r3, r0
    c4a4:	7be0      	ldrb	r0, [r4, #15]
    c4a6:	0600      	lsls	r0, r0, #24
    c4a8:	4318      	orrs	r0, r3
    c4aa:	2218      	movs	r2, #24
    c4ac:	491d      	ldr	r1, [pc, #116]	; (c524 <InitDefault920Channels+0x118>)
    c4ae:	47a8      	blx	r5
	memset (RegParams.cmnParams.paramsType2.subBandDutyCycle,0,sizeof(SubBandDutyCycleJP923));
	memcpy (RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycleJP923,sizeof(SubBandDutyCycleJP923));
    c4b0:	0020      	movs	r0, r4
    c4b2:	30af      	adds	r0, #175	; 0xaf
    c4b4:	30ff      	adds	r0, #255	; 0xff
    c4b6:	2204      	movs	r2, #4
    c4b8:	491b      	ldr	r1, [pc, #108]	; (c528 <InitDefault920Channels+0x11c>)
    c4ba:	47a8      	blx	r5
    for (i = 2; i < RegParams.maxChannels; i++)
    c4bc:	232a      	movs	r3, #42	; 0x2a
    c4be:	56e3      	ldrsb	r3, [r4, r3]
    c4c0:	2b02      	cmp	r3, #2
    c4c2:	dd1f      	ble.n	c504 <InitDefault920Channels+0xf8>
    c4c4:	2302      	movs	r3, #2
    c4c6:	2202      	movs	r2, #2
    {
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    c4c8:	4911      	ldr	r1, [pc, #68]	; (c510 <InitDefault920Channels+0x104>)
    c4ca:	27ff      	movs	r7, #255	; 0xff
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    c4cc:	2500      	movs	r5, #0
    for (i = 2; i < RegParams.maxChannels; i++)
    c4ce:	262a      	movs	r6, #42	; 0x2a
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    c4d0:	7908      	ldrb	r0, [r1, #4]
    c4d2:	794c      	ldrb	r4, [r1, #5]
    c4d4:	0224      	lsls	r4, r4, #8
    c4d6:	4304      	orrs	r4, r0
    c4d8:	7988      	ldrb	r0, [r1, #6]
    c4da:	0400      	lsls	r0, r0, #16
    c4dc:	4304      	orrs	r4, r0
    c4de:	79c8      	ldrb	r0, [r1, #7]
    c4e0:	0600      	lsls	r0, r0, #24
    c4e2:	4320      	orrs	r0, r4
    c4e4:	0054      	lsls	r4, r2, #1
    c4e6:	1820      	adds	r0, r4, r0
    c4e8:	7047      	strb	r7, [r0, #1]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    c4ea:	3358      	adds	r3, #88	; 0x58
    c4ec:	009b      	lsls	r3, r3, #2
    c4ee:	18cb      	adds	r3, r1, r3
    c4f0:	725d      	strb	r5, [r3, #9]
    c4f2:	729d      	strb	r5, [r3, #10]
    c4f4:	72dd      	strb	r5, [r3, #11]
    c4f6:	731d      	strb	r5, [r3, #12]
    for (i = 2; i < RegParams.maxChannels; i++)
    c4f8:	3201      	adds	r2, #1
    c4fa:	b2d2      	uxtb	r2, r2
    c4fc:	0013      	movs	r3, r2
    c4fe:	5788      	ldrsb	r0, [r1, r6]
    c500:	4282      	cmp	r2, r0
    c502:	dbe5      	blt.n	c4d0 <InitDefault920Channels+0xc4>
    }
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    c504:	21ff      	movs	r1, #255	; 0xff
    c506:	2330      	movs	r3, #48	; 0x30
    c508:	4a01      	ldr	r2, [pc, #4]	; (c510 <InitDefault920Channels+0x104>)
    c50a:	54d1      	strb	r1, [r2, r3]
}
    c50c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c50e:	46c0      	nop			; (mov r8, r8)
    c510:	200029ac 	.word	0x200029ac
    c514:	00016151 	.word	0x00016151
    c518:	00018238 	.word	0x00018238
    c51c:	0001613f 	.word	0x0001613f
    c520:	00018220 	.word	0x00018220
    c524:	00018240 	.word	0x00018240
    c528:	0001823c 	.word	0x0001823c

0000c52c <InitDefault920ChannelsKR>:
/*
 * \brief This function initializes all the IN865 Channels to default values
 */
#if (KR_BAND == 1)
void InitDefault920ChannelsKR (void)
{
    c52c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c52e:	46d6      	mov	lr, sl
    c530:	464f      	mov	r7, r9
    c532:	4646      	mov	r6, r8
    c534:	b5c0      	push	{r6, r7, lr}
    uint8_t i;
    memset (RegParams.pChParams, 0, sizeof(DefaultChannels920KR) );
    c536:	4c46      	ldr	r4, [pc, #280]	; (c650 <InitDefault920ChannelsKR+0x124>)
    c538:	7920      	ldrb	r0, [r4, #4]
    c53a:	7963      	ldrb	r3, [r4, #5]
    c53c:	021b      	lsls	r3, r3, #8
    c53e:	4303      	orrs	r3, r0
    c540:	79a0      	ldrb	r0, [r4, #6]
    c542:	0400      	lsls	r0, r0, #16
    c544:	4303      	orrs	r3, r0
    c546:	79e0      	ldrb	r0, [r4, #7]
    c548:	0600      	lsls	r0, r0, #24
    c54a:	4318      	orrs	r0, r3
    c54c:	2206      	movs	r2, #6
    c54e:	2100      	movs	r1, #0
    c550:	4d40      	ldr	r5, [pc, #256]	; (c654 <InitDefault920ChannelsKR+0x128>)
    c552:	47a8      	blx	r5
	memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels920KR) );
    c554:	7a20      	ldrb	r0, [r4, #8]
    c556:	7a63      	ldrb	r3, [r4, #9]
    c558:	021b      	lsls	r3, r3, #8
    c55a:	4303      	orrs	r3, r0
    c55c:	7aa0      	ldrb	r0, [r4, #10]
    c55e:	0400      	lsls	r0, r0, #16
    c560:	4303      	orrs	r3, r0
    c562:	7ae0      	ldrb	r0, [r4, #11]
    c564:	0600      	lsls	r0, r0, #24
    c566:	4318      	orrs	r0, r3
    c568:	2224      	movs	r2, #36	; 0x24
    c56a:	2100      	movs	r1, #0
    c56c:	47a8      	blx	r5
    memcpy (RegParams.pChParams, DefaultChannels920KR, sizeof(DefaultChannels920KR) );
    c56e:	7920      	ldrb	r0, [r4, #4]
    c570:	7963      	ldrb	r3, [r4, #5]
    c572:	021b      	lsls	r3, r3, #8
    c574:	4303      	orrs	r3, r0
    c576:	79a0      	ldrb	r0, [r4, #6]
    c578:	0400      	lsls	r0, r0, #16
    c57a:	4303      	orrs	r3, r0
    c57c:	79e0      	ldrb	r0, [r4, #7]
    c57e:	0600      	lsls	r0, r0, #24
    c580:	4318      	orrs	r0, r3
    c582:	2206      	movs	r2, #6
    c584:	4934      	ldr	r1, [pc, #208]	; (c658 <InitDefault920ChannelsKR+0x12c>)
    c586:	4d35      	ldr	r5, [pc, #212]	; (c65c <InitDefault920ChannelsKR+0x130>)
    c588:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels920KR, sizeof(AdvChannels920KR) );
    c58a:	7a20      	ldrb	r0, [r4, #8]
    c58c:	7a63      	ldrb	r3, [r4, #9]
    c58e:	021b      	lsls	r3, r3, #8
    c590:	4303      	orrs	r3, r0
    c592:	7aa0      	ldrb	r0, [r4, #10]
    c594:	0400      	lsls	r0, r0, #16
    c596:	4303      	orrs	r3, r0
    c598:	7ae0      	ldrb	r0, [r4, #11]
    c59a:	0600      	lsls	r0, r0, #24
    c59c:	4318      	orrs	r0, r3
    c59e:	2224      	movs	r2, #36	; 0x24
    c5a0:	492f      	ldr	r1, [pc, #188]	; (c660 <InitDefault920ChannelsKR+0x134>)
    c5a2:	47a8      	blx	r5
    for (i = 3; i < RegParams.maxChannels; i++)
    c5a4:	232a      	movs	r3, #42	; 0x2a
    c5a6:	56e3      	ldrsb	r3, [r4, r3]
    c5a8:	2b03      	cmp	r3, #3
    c5aa:	dd48      	ble.n	c63e <InitDefault920ChannelsKR+0x112>
    c5ac:	2103      	movs	r1, #3
    c5ae:	2003      	movs	r0, #3
    {
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    c5b0:	4b27      	ldr	r3, [pc, #156]	; (c650 <InitDefault920ChannelsKR+0x124>)
    c5b2:	26ff      	movs	r6, #255	; 0xff
		RegParams.pChParams[i].status = DISABLED;
    c5b4:	2500      	movs	r5, #0
		RegParams.pOtherChParams[i].joinRequestChannel = DISABLED;
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    c5b6:	22e1      	movs	r2, #225	; 0xe1
    c5b8:	0052      	lsls	r2, r2, #1
    c5ba:	4690      	mov	r8, r2
    c5bc:	46b4      	mov	ip, r6
    for (i = 3; i < RegParams.maxChannels; i++)
    c5be:	3a99      	subs	r2, #153	; 0x99
    c5c0:	3aff      	subs	r2, #255	; 0xff
    c5c2:	4692      	mov	sl, r2
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    c5c4:	0042      	lsls	r2, r0, #1
    c5c6:	791c      	ldrb	r4, [r3, #4]
    c5c8:	46a1      	mov	r9, r4
    c5ca:	795c      	ldrb	r4, [r3, #5]
    c5cc:	0224      	lsls	r4, r4, #8
    c5ce:	464f      	mov	r7, r9
    c5d0:	4327      	orrs	r7, r4
    c5d2:	799c      	ldrb	r4, [r3, #6]
    c5d4:	0424      	lsls	r4, r4, #16
    c5d6:	4327      	orrs	r7, r4
    c5d8:	79dc      	ldrb	r4, [r3, #7]
    c5da:	0624      	lsls	r4, r4, #24
    c5dc:	433c      	orrs	r4, r7
    c5de:	18a4      	adds	r4, r4, r2
    c5e0:	7066      	strb	r6, [r4, #1]
		RegParams.pChParams[i].status = DISABLED;
    c5e2:	791c      	ldrb	r4, [r3, #4]
    c5e4:	46a1      	mov	r9, r4
    c5e6:	795c      	ldrb	r4, [r3, #5]
    c5e8:	0224      	lsls	r4, r4, #8
    c5ea:	464f      	mov	r7, r9
    c5ec:	4327      	orrs	r7, r4
    c5ee:	799c      	ldrb	r4, [r3, #6]
    c5f0:	0424      	lsls	r4, r4, #16
    c5f2:	4327      	orrs	r7, r4
    c5f4:	79dc      	ldrb	r4, [r3, #7]
    c5f6:	0624      	lsls	r4, r4, #24
    c5f8:	433c      	orrs	r4, r7
    c5fa:	54a5      	strb	r5, [r4, r2]
		RegParams.pOtherChParams[i].joinRequestChannel = DISABLED;
    c5fc:	7a1c      	ldrb	r4, [r3, #8]
    c5fe:	46a1      	mov	r9, r4
    c600:	7a5c      	ldrb	r4, [r3, #9]
    c602:	0224      	lsls	r4, r4, #8
    c604:	464f      	mov	r7, r9
    c606:	4327      	orrs	r7, r4
    c608:	7a9c      	ldrb	r4, [r3, #10]
    c60a:	0424      	lsls	r4, r4, #16
    c60c:	4327      	orrs	r7, r4
    c60e:	7adc      	ldrb	r4, [r3, #11]
    c610:	0624      	lsls	r4, r4, #24
    c612:	433c      	orrs	r4, r7
    c614:	1812      	adds	r2, r2, r0
    c616:	0092      	lsls	r2, r2, #2
    c618:	1912      	adds	r2, r2, r4
    c61a:	7255      	strb	r5, [r2, #9]
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    c61c:	4642      	mov	r2, r8
    c61e:	4664      	mov	r4, ip
    c620:	549c      	strb	r4, [r3, r2]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    c622:	3158      	adds	r1, #88	; 0x58
    c624:	0089      	lsls	r1, r1, #2
    c626:	1859      	adds	r1, r3, r1
    c628:	724d      	strb	r5, [r1, #9]
    c62a:	728d      	strb	r5, [r1, #10]
    c62c:	72cd      	strb	r5, [r1, #11]
    c62e:	730d      	strb	r5, [r1, #12]
    for (i = 3; i < RegParams.maxChannels; i++)
    c630:	3001      	adds	r0, #1
    c632:	b2c0      	uxtb	r0, r0
    c634:	0001      	movs	r1, r0
    c636:	4652      	mov	r2, sl
    c638:	569a      	ldrsb	r2, [r3, r2]
    c63a:	4290      	cmp	r0, r2
    c63c:	dbc2      	blt.n	c5c4 <InitDefault920ChannelsKR+0x98>
    }
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    c63e:	21ff      	movs	r1, #255	; 0xff
    c640:	2330      	movs	r3, #48	; 0x30
    c642:	4a03      	ldr	r2, [pc, #12]	; (c650 <InitDefault920ChannelsKR+0x124>)
    c644:	54d1      	strb	r1, [r2, r3]
}
    c646:	bc1c      	pop	{r2, r3, r4}
    c648:	4690      	mov	r8, r2
    c64a:	4699      	mov	r9, r3
    c64c:	46a2      	mov	sl, r4
    c64e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c650:	200029ac 	.word	0x200029ac
    c654:	00016151 	.word	0x00016151
    c658:	0001827c 	.word	0x0001827c
    c65c:	0001613f 	.word	0x0001613f
    c660:	00018258 	.word	0x00018258

0000c664 <LORAREG_GetAttr>:
 * \param[out] Result of the GET operation
 * \retval LORAWAN_SUCCESS : If GET is successful
 *	LORAWAN_INVALID_PARAMETER if the input attribute or the attribute type is invalid
 */
StackRetStatus_t LORAREG_GetAttr(LorawanRegionalAttributes_t attrType, void *attrInput, void *attrOutput)
{
    c664:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    c666:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    c668:	283c      	cmp	r0, #60	; 0x3c
    c66a:	d901      	bls.n	c670 <LORAREG_GetAttr+0xc>
	{
	    result = pGetAttr[attrType](attrType, attrInput,attrOutput);	
	}

	return result;
}
    c66c:	0018      	movs	r0, r3
    c66e:	bd10      	pop	{r4, pc}
	    result = pGetAttr[attrType](attrType, attrInput,attrOutput);	
    c670:	0084      	lsls	r4, r0, #2
    c672:	4b02      	ldr	r3, [pc, #8]	; (c67c <LORAREG_GetAttr+0x18>)
    c674:	58e3      	ldr	r3, [r4, r3]
    c676:	4798      	blx	r3
    c678:	0003      	movs	r3, r0
    c67a:	e7f7      	b.n	c66c <LORAREG_GetAttr+0x8>
    c67c:	20001b74 	.word	0x20001b74

0000c680 <LORAREG_ValidateAttr>:
 * \param[in] attrInput Input used to validate the attribute value
 * \retval LORAWAN_SUCCESS : If Validate is successful
 *	LORAWAN_INVALID_PARAMETER if the input attribute or the attribute type is invalid
 */
StackRetStatus_t LORAREG_ValidateAttr(LorawanRegionalAttributes_t attrType, void *attrInput)
{
    c680:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    c682:	230a      	movs	r3, #10
	
	if(attrType < REG_NUM_ATTRIBUTES)
    c684:	283c      	cmp	r0, #60	; 0x3c
    c686:	d901      	bls.n	c68c <LORAREG_ValidateAttr+0xc>
	{
	    result = pValidateAttr[attrType](attrType, attrInput);		
	}

	return result;
}
    c688:	0018      	movs	r0, r3
    c68a:	bd10      	pop	{r4, pc}
	    result = pValidateAttr[attrType](attrType, attrInput);		
    c68c:	0082      	lsls	r2, r0, #2
    c68e:	4b02      	ldr	r3, [pc, #8]	; (c698 <LORAREG_ValidateAttr+0x18>)
    c690:	58d3      	ldr	r3, [r2, r3]
    c692:	4798      	blx	r3
    c694:	0003      	movs	r3, r0
    c696:	e7f7      	b.n	c688 <LORAREG_ValidateAttr+0x8>
    c698:	20001d5c 	.word	0x20001d5c

0000c69c <LORAREG_SetAttr>:
 * \param[in] attrInput Input used to update the attribute value
 * \retval LORAWAN_SUCCESS : If Update is successful
 *	LORAWAN_INVALID_PARAMETER if the input attribute or the attribute type is invalid
 */
StackRetStatus_t LORAREG_SetAttr(LorawanRegionalAttributes_t attrType, void *attrInput)
{
    c69c:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    c69e:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    c6a0:	283c      	cmp	r0, #60	; 0x3c
    c6a2:	d901      	bls.n	c6a8 <LORAREG_SetAttr+0xc>
	{
	    result = pSetAttr[attrType](attrType, attrInput);		
	}

	return result;
}
    c6a4:	0018      	movs	r0, r3
    c6a6:	bd10      	pop	{r4, pc}
	    result = pSetAttr[attrType](attrType, attrInput);		
    c6a8:	0082      	lsls	r2, r0, #2
    c6aa:	4b02      	ldr	r3, [pc, #8]	; (c6b4 <LORAREG_SetAttr+0x18>)
    c6ac:	58d3      	ldr	r3, [r2, r3]
    c6ae:	4798      	blx	r3
    c6b0:	0003      	movs	r3, r0
    c6b2:	e7f7      	b.n	c6a4 <LORAREG_SetAttr+0x8>
    c6b4:	20001c68 	.word	0x20001c68

0000c6b8 <setDefaultTxPower>:
}
#endif
StackRetStatus_t setDefaultTxPower(IsmBand_t ismBand)
{   
	StackRetStatus_t result = LORAWAN_SUCCESS;
	if(ismBand == ISM_EU868)
    c6b8:	2800      	cmp	r0, #0
    c6ba:	d00e      	beq.n	c6da <setDefaultTxPower+0x22>
	{
			RegParams.MacTxPower = MAC_DEF_TX_POWER_EU;
	}
	else if(ismBand == ISM_JPN923)
    c6bc:	2805      	cmp	r0, #5
    c6be:	d013      	beq.n	c6e8 <setDefaultTxPower+0x30>
	{
		RegParams.MacTxPower = MAC_DEF_TX_POWER_JP;
	}
	else if (ismBand == ISM_KR920)
    c6c0:	2804      	cmp	r0, #4
    c6c2:	d017      	beq.n	c6f4 <setDefaultTxPower+0x3c>
	}
	else if (ismBand == ISM_ASBAND)
	{
		RegParams.MacTxPower = MAC_DEF_TX_POWER_AS;
	}
	else if(ismBand == ISM_AU915)
    c6c4:	2803      	cmp	r0, #3
    c6c6:	d01b      	beq.n	c700 <setDefaultTxPower+0x48>
	{
		RegParams.MacTxPower = MAC_DEF_TX_POWER_NA;
	}
	else
	{
		result = LORAWAN_INVALID_PARAMETER;
    c6c8:	230a      	movs	r3, #10
	else if(ismBand == ISM_NA915)
    c6ca:	2802      	cmp	r0, #2
    c6cc:	d10a      	bne.n	c6e4 <setDefaultTxPower+0x2c>
		RegParams.MacTxPower = MAC_DEF_TX_POWER_NA;
    c6ce:	2107      	movs	r1, #7
    c6d0:	331d      	adds	r3, #29
    c6d2:	4a0e      	ldr	r2, [pc, #56]	; (c70c <setDefaultTxPower+0x54>)
    c6d4:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c6d6:	3b1f      	subs	r3, #31
    c6d8:	e004      	b.n	c6e4 <setDefaultTxPower+0x2c>
			RegParams.MacTxPower = MAC_DEF_TX_POWER_EU;
    c6da:	2101      	movs	r1, #1
    c6dc:	2327      	movs	r3, #39	; 0x27
    c6de:	4a0b      	ldr	r2, [pc, #44]	; (c70c <setDefaultTxPower+0x54>)
    c6e0:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c6e2:	3b1f      	subs	r3, #31
	}
#if (ENABLE_PDS==1)
	PDS_STORE(RegParams.MacTxPower);
#endif
	return result;
}
    c6e4:	0018      	movs	r0, r3
    c6e6:	4770      	bx	lr
		RegParams.MacTxPower = MAC_DEF_TX_POWER_JP;
    c6e8:	2101      	movs	r1, #1
    c6ea:	2327      	movs	r3, #39	; 0x27
    c6ec:	4a07      	ldr	r2, [pc, #28]	; (c70c <setDefaultTxPower+0x54>)
    c6ee:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c6f0:	3b1f      	subs	r3, #31
    c6f2:	e7f7      	b.n	c6e4 <setDefaultTxPower+0x2c>
		RegParams.MacTxPower = MAC_DEF_TX_POWER_KR;
    c6f4:	2101      	movs	r1, #1
    c6f6:	2327      	movs	r3, #39	; 0x27
    c6f8:	4a04      	ldr	r2, [pc, #16]	; (c70c <setDefaultTxPower+0x54>)
    c6fa:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c6fc:	3b1f      	subs	r3, #31
    c6fe:	e7f1      	b.n	c6e4 <setDefaultTxPower+0x2c>
		RegParams.MacTxPower = MAC_DEF_TX_POWER_AU;
    c700:	2107      	movs	r1, #7
    c702:	2327      	movs	r3, #39	; 0x27
    c704:	4a01      	ldr	r2, [pc, #4]	; (c70c <setDefaultTxPower+0x54>)
    c706:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c708:	3b1f      	subs	r3, #31
    c70a:	e7eb      	b.n	c6e4 <setDefaultTxPower+0x2c>
    c70c:	200029ac 	.word	0x200029ac

0000c710 <Enableallchannels>:
	}
	return status;
}
#endif
void Enableallchannels()
{
    c710:	b510      	push	{r4, lr}
    c712:	2000      	movs	r0, #0
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
	{
		RegParams.pChParams[i].status = ENABLED;
    c714:	490a      	ldr	r1, [pc, #40]	; (c740 <Enableallchannels+0x30>)
    c716:	2401      	movs	r4, #1
    c718:	790b      	ldrb	r3, [r1, #4]
    c71a:	794a      	ldrb	r2, [r1, #5]
    c71c:	0212      	lsls	r2, r2, #8
    c71e:	431a      	orrs	r2, r3
    c720:	798b      	ldrb	r3, [r1, #6]
    c722:	041b      	lsls	r3, r3, #16
    c724:	431a      	orrs	r2, r3
    c726:	79cb      	ldrb	r3, [r1, #7]
    c728:	061b      	lsls	r3, r3, #24
    c72a:	4313      	orrs	r3, r2
    c72c:	541c      	strb	r4, [r3, r0]
    c72e:	3002      	adds	r0, #2
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
    c730:	2890      	cmp	r0, #144	; 0x90
    c732:	d1f1      	bne.n	c718 <Enableallchannels+0x8>
	}
	RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    c734:	2100      	movs	r1, #0
    c736:	23ac      	movs	r3, #172	; 0xac
    c738:	005b      	lsls	r3, r3, #1
    c73a:	4a01      	ldr	r2, [pc, #4]	; (c740 <Enableallchannels+0x30>)
    c73c:	54d1      	strb	r1, [r2, r3]
#if (ENABLE_PDS == 1)
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
	PDS_STORE(RegParams.regParamItems.lastUsedSB);
#endif
}
    c73e:	bd10      	pop	{r4, pc}
    c740:	200029ac 	.word	0x200029ac

0000c744 <LORAREG_EnableallChannels>:
StackRetStatus_t LORAREG_EnableallChannels(IsmBand_t ismBand)
{
    c744:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_SUCCESS;
	if(ismBand == ISM_EU868)
    c746:	2800      	cmp	r0, #0
    c748:	d00a      	beq.n	c760 <LORAREG_EnableallChannels+0x1c>
	{
		 InitDefault868Channels();
	}
	else if (ismBand == ISM_EU433)
    c74a:	2801      	cmp	r0, #1
    c74c:	d00b      	beq.n	c766 <LORAREG_EnableallChannels+0x22>
	{
		 InitDefault433Channels();
	}
	else if(ismBand == ISM_JPN923)
    c74e:	2805      	cmp	r0, #5
    c750:	d00c      	beq.n	c76c <LORAREG_EnableallChannels+0x28>
	{
		 InitDefault920Channels();	
	}
	else if (ismBand == ISM_KR920)
    c752:	2804      	cmp	r0, #4
    c754:	d00d      	beq.n	c772 <LORAREG_EnableallChannels+0x2e>
	}
	else if (ismBand == ISM_ASBAND)
	{
		 InitDefault923Channels ();
	}
	else if(ismBand == ISM_AU915 || ismBand == ISM_NA915)
    c756:	3802      	subs	r0, #2
    c758:	2801      	cmp	r0, #1
    c75a:	d90d      	bls.n	c778 <LORAREG_EnableallChannels+0x34>
	{
		 Enableallchannels();
	}
	return result;
}
    c75c:	2008      	movs	r0, #8
    c75e:	bd10      	pop	{r4, pc}
		 InitDefault868Channels();
    c760:	4b07      	ldr	r3, [pc, #28]	; (c780 <LORAREG_EnableallChannels+0x3c>)
    c762:	4798      	blx	r3
    c764:	e7fa      	b.n	c75c <LORAREG_EnableallChannels+0x18>
		 InitDefault433Channels();
    c766:	4b07      	ldr	r3, [pc, #28]	; (c784 <LORAREG_EnableallChannels+0x40>)
    c768:	4798      	blx	r3
    c76a:	e7f7      	b.n	c75c <LORAREG_EnableallChannels+0x18>
		 InitDefault920Channels();	
    c76c:	4b06      	ldr	r3, [pc, #24]	; (c788 <LORAREG_EnableallChannels+0x44>)
    c76e:	4798      	blx	r3
    c770:	e7f4      	b.n	c75c <LORAREG_EnableallChannels+0x18>
		 InitDefault920ChannelsKR();
    c772:	4b06      	ldr	r3, [pc, #24]	; (c78c <LORAREG_EnableallChannels+0x48>)
    c774:	4798      	blx	r3
    c776:	e7f1      	b.n	c75c <LORAREG_EnableallChannels+0x18>
		 Enableallchannels();
    c778:	4b05      	ldr	r3, [pc, #20]	; (c790 <LORAREG_EnableallChannels+0x4c>)
    c77a:	4798      	blx	r3
    c77c:	e7ee      	b.n	c75c <LORAREG_EnableallChannels+0x18>
    c77e:	46c0      	nop			; (mov r8, r8)
    c780:	0000c215 	.word	0x0000c215
    c784:	0000c319 	.word	0x0000c319
    c788:	0000c40d 	.word	0x0000c40d
    c78c:	0000c52d 	.word	0x0000c52d
    c790:	0000c711 	.word	0x0000c711

0000c794 <AESEncode>:
 * \brief Encrypts the given block of data
 * \param[in,out] block Block of input data to be encrypted
 * \param[in] key Cryptographic key to be used in AES encryption
 */
void AESEncode(unsigned char* block, unsigned char* masterKey)
{
    c794:	b5f0      	push	{r4, r5, r6, r7, lr}
    c796:	b083      	sub	sp, #12
    c798:	0004      	movs	r4, r0
    c79a:	000e      	movs	r6, r1
#ifndef UT	
	
	/* Configure the AES. */
	g_aes_cfg.encrypt_mode = AES_ENCRYPTION;
    c79c:	4a2b      	ldr	r2, [pc, #172]	; (c84c <AESEncode+0xb8>)
    c79e:	2101      	movs	r1, #1
    c7a0:	7011      	strb	r1, [r2, #0]
	g_aes_cfg.key_size = AES_KEY_SIZE_128;
    c7a2:	2300      	movs	r3, #0
    c7a4:	7053      	strb	r3, [r2, #1]
	g_aes_cfg.start_mode = AES_AUTO_START;
    c7a6:	7091      	strb	r1, [r2, #2]
	g_aes_cfg.opmode = AES_ECB_MODE;
    c7a8:	70d3      	strb	r3, [r2, #3]
	g_aes_cfg.cfb_size = AES_CFB_SIZE_128;
    c7aa:	7113      	strb	r3, [r2, #4]
	g_aes_cfg.lod = false;
    c7ac:	7213      	strb	r3, [r2, #8]
	aes_set_config(&aes_instance,AES, &g_aes_cfg);
    c7ae:	4928      	ldr	r1, [pc, #160]	; (c850 <AESEncode+0xbc>)
    c7b0:	4828      	ldr	r0, [pc, #160]	; (c854 <AESEncode+0xc0>)
    c7b2:	4b29      	ldr	r3, [pc, #164]	; (c858 <AESEncode+0xc4>)
    c7b4:	4798      	blx	r3
    c7b6:	2100      	movs	r1, #0
		uint8_t u8[4];
	}long_addr;
	uint8_t index;
	for (index = 0; index < 4; index++)
	{
		long_addr.u8[index] = *data++;
    c7b8:	ad01      	add	r5, sp, #4
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(masterKey+(i*(sizeof(uint32_t))));
    c7ba:	4f28      	ldr	r7, [pc, #160]	; (c85c <AESEncode+0xc8>)
    c7bc:	1870      	adds	r0, r6, r1
    c7be:	2300      	movs	r3, #0
    c7c0:	5cc2      	ldrb	r2, [r0, r3]
    c7c2:	555a      	strb	r2, [r3, r5]
    c7c4:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    c7c6:	2b04      	cmp	r3, #4
    c7c8:	d1fa      	bne.n	c7c0 <AESEncode+0x2c>
    c7ca:	9b01      	ldr	r3, [sp, #4]
    c7cc:	51cb      	str	r3, [r1, r7]
    c7ce:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    c7d0:	2910      	cmp	r1, #16
    c7d2:	d1f3      	bne.n	c7bc <AESEncode+0x28>
	}
	
	/* Set the cryptographic key. */
	aes_write_key(&aes_instance, io_data);
    c7d4:	4d1f      	ldr	r5, [pc, #124]	; (c854 <AESEncode+0xc0>)
    c7d6:	4921      	ldr	r1, [pc, #132]	; (c85c <AESEncode+0xc8>)
    c7d8:	0028      	movs	r0, r5
    c7da:	4b21      	ldr	r3, [pc, #132]	; (c860 <AESEncode+0xcc>)
    c7dc:	4798      	blx	r3
 */
static inline void aes_set_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg |= AES_CTRLB_NEWMSG;
    c7de:	682a      	ldr	r2, [r5, #0]
    c7e0:	7913      	ldrb	r3, [r2, #4]
    c7e2:	2102      	movs	r1, #2
    c7e4:	430b      	orrs	r3, r1
    c7e6:	7113      	strb	r3, [r2, #4]
    c7e8:	2100      	movs	r1, #0
		long_addr.u8[index] = *data++;
    c7ea:	ad01      	add	r5, sp, #4
	
	aes_set_new_message(&aes_instance);
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(block+(i*(sizeof(uint32_t))));			
    c7ec:	4e1b      	ldr	r6, [pc, #108]	; (c85c <AESEncode+0xc8>)
    c7ee:	1860      	adds	r0, r4, r1
    c7f0:	2300      	movs	r3, #0
    c7f2:	5cc2      	ldrb	r2, [r0, r3]
    c7f4:	555a      	strb	r2, [r3, r5]
    c7f6:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    c7f8:	2b04      	cmp	r3, #4
    c7fa:	d1fa      	bne.n	c7f2 <AESEncode+0x5e>
    c7fc:	9b01      	ldr	r3, [sp, #4]
    c7fe:	518b      	str	r3, [r1, r6]
    c800:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    c802:	2910      	cmp	r1, #16
    c804:	d1f3      	bne.n	c7ee <AESEncode+0x5a>
	}
		
	/* Write the data to be ciphered to the input data registers. */
	aes_write_input_data(&aes_instance, io_data);
    c806:	4d13      	ldr	r5, [pc, #76]	; (c854 <AESEncode+0xc0>)
    c808:	4914      	ldr	r1, [pc, #80]	; (c85c <AESEncode+0xc8>)
    c80a:	0028      	movs	r0, r5
    c80c:	4b15      	ldr	r3, [pc, #84]	; (c864 <AESEncode+0xd0>)
    c80e:	4798      	blx	r3
 */
static inline void aes_clear_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg &= ~AES_CTRLB_NEWMSG;
    c810:	682d      	ldr	r5, [r5, #0]
    c812:	792b      	ldrb	r3, [r5, #4]
    c814:	2202      	movs	r2, #2
    c816:	4393      	bics	r3, r2
    c818:	712b      	strb	r3, [r5, #4]
	Assert(module->hw);

	uint32_t int_flags = module->hw->INTFLAG.reg;
	uint32_t status_flags = 0;

	if (int_flags & AES_INTFLAG_ENCCMP) {
    c81a:	2101      	movs	r1, #1
		status_flags |= AES_ENCRYPTION_COMPLETE;
	}

	if (int_flags & AES_INTFLAG_GFMCMP) {
    c81c:	2002      	movs	r0, #2
    c81e:	e001      	b.n	c824 <AESEncode+0x90>
	aes_clear_new_message(&aes_instance);
	/* Wait for the end of the encryption process. */
	while (!(aes_get_status(&aes_instance) & AES_ENCRYPTION_COMPLETE)) {
    c820:	4211      	tst	r1, r2
    c822:	d107      	bne.n	c834 <AESEncode+0xa0>
	uint32_t int_flags = module->hw->INTFLAG.reg;
    c824:	79eb      	ldrb	r3, [r5, #7]
    c826:	b2db      	uxtb	r3, r3
	if (int_flags & AES_INTFLAG_ENCCMP) {
    c828:	000a      	movs	r2, r1
    c82a:	401a      	ands	r2, r3
	if (int_flags & AES_INTFLAG_GFMCMP) {
    c82c:	4218      	tst	r0, r3
    c82e:	d0f7      	beq.n	c820 <AESEncode+0x8c>
		status_flags |= AES_GF_MULTI_COMPLETE;
    c830:	4302      	orrs	r2, r0
    c832:	e7f5      	b.n	c820 <AESEncode+0x8c>
	}
	aes_read_output_data(&aes_instance,io_data);
    c834:	4d09      	ldr	r5, [pc, #36]	; (c85c <AESEncode+0xc8>)
    c836:	0029      	movs	r1, r5
    c838:	4806      	ldr	r0, [pc, #24]	; (c854 <AESEncode+0xc0>)
    c83a:	4b0b      	ldr	r3, [pc, #44]	; (c868 <AESEncode+0xd4>)
    c83c:	4798      	blx	r3
	
	memcpy(block,io_data,BLOCKSIZE);
    c83e:	2210      	movs	r2, #16
    c840:	0029      	movs	r1, r5
    c842:	0020      	movs	r0, r4
    c844:	4b09      	ldr	r3, [pc, #36]	; (c86c <AESEncode+0xd8>)
    c846:	4798      	blx	r3
#endif	
}
    c848:	b003      	add	sp, #12
    c84a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c84c:	20002bb8 	.word	0x20002bb8
    c850:	42003400 	.word	0x42003400
    c854:	20002bc4 	.word	0x20002bc4
    c858:	00004611 	.word	0x00004611
    c85c:	20001e50 	.word	0x20001e50
    c860:	000046a5 	.word	0x000046a5
    c864:	000046d9 	.word	0x000046d9
    c868:	00004729 	.word	0x00004729
    c86c:	0001613f 	.word	0x0001613f

0000c870 <AESInit>:

/**
 * \brief Initializes the AES Engine.
 */
void AESInit(void)
{
    c870:	b570      	push	{r4, r5, r6, lr}
#ifndef UT	
	//! [setup_config]
	aes_get_config_defaults(&g_aes_cfg);
    c872:	4d07      	ldr	r5, [pc, #28]	; (c890 <AESInit+0x20>)
    c874:	0028      	movs	r0, r5
    c876:	4b07      	ldr	r3, [pc, #28]	; (c894 <AESInit+0x24>)
    c878:	4798      	blx	r3
	//! [setup_config]

	//! [setup_config_defaults]
	aes_init(&aes_instance,AES, &g_aes_cfg);
    c87a:	4c07      	ldr	r4, [pc, #28]	; (c898 <AESInit+0x28>)
    c87c:	002a      	movs	r2, r5
    c87e:	4907      	ldr	r1, [pc, #28]	; (c89c <AESInit+0x2c>)
    c880:	0020      	movs	r0, r4
    c882:	4b07      	ldr	r3, [pc, #28]	; (c8a0 <AESInit+0x30>)
    c884:	4798      	blx	r3
	//! [setup_config_defaults]
	//! [module_enable]
	aes_enable(&aes_instance);
    c886:	0020      	movs	r0, r4
    c888:	4b06      	ldr	r3, [pc, #24]	; (c8a4 <AESInit+0x34>)
    c88a:	4798      	blx	r3
#endif	
}
    c88c:	bd70      	pop	{r4, r5, r6, pc}
    c88e:	46c0      	nop			; (mov r8, r8)
    c890:	20002bb8 	.word	0x20002bb8
    c894:	000045d5 	.word	0x000045d5
    c898:	20002bc4 	.word	0x20002bc4
    c89c:	42003400 	.word	0x42003400
    c8a0:	00004685 	.word	0x00004685
    c8a4:	000045ef 	.word	0x000045ef

0000c8a8 <hwTimerExpiryCallback>:
	SYS_HwOverflow_Cb();
}

/* ISR to handle CC0 interrupt from TC0 */
static void hwTimerExpiryCallback(void)
{
    c8a8:	b510      	push	{r4, lr}
    if (0 < runningTimers)
    c8aa:	4b06      	ldr	r3, [pc, #24]	; (c8c4 <hwTimerExpiryCallback+0x1c>)
    c8ac:	781b      	ldrb	r3, [r3, #0]
    c8ae:	2b00      	cmp	r3, #0
    c8b0:	d100      	bne.n	c8b4 <hwTimerExpiryCallback+0xc>
    {
        isTimerTriggered = true;
        SYSTEM_PostTask(TIMER_TASK_ID);
    }
}
    c8b2:	bd10      	pop	{r4, pc}
        isTimerTriggered = true;
    c8b4:	2201      	movs	r2, #1
    c8b6:	4b04      	ldr	r3, [pc, #16]	; (c8c8 <hwTimerExpiryCallback+0x20>)
    c8b8:	701a      	strb	r2, [r3, #0]
        SYSTEM_PostTask(TIMER_TASK_ID);
    c8ba:	2001      	movs	r0, #1
    c8bc:	4b03      	ldr	r3, [pc, #12]	; (c8cc <hwTimerExpiryCallback+0x24>)
    c8be:	4798      	blx	r3
}
    c8c0:	e7f7      	b.n	c8b2 <hwTimerExpiryCallback+0xa>
    c8c2:	46c0      	nop			; (mov r8, r8)
    c8c4:	20001e70 	.word	0x20001e70
    c8c8:	20002d72 	.word	0x20002d72
    c8cc:	0000d1c5 	.word	0x0000d1c5

0000c8d0 <hwTimerOverflowCallback>:
{
    c8d0:	b510      	push	{r4, lr}
    c8d2:	b082      	sub	sp, #8
    uint16_t temp = sysTime;
    c8d4:	4925      	ldr	r1, [pc, #148]	; (c96c <hwTimerOverflowCallback+0x9c>)
    c8d6:	880a      	ldrh	r2, [r1, #0]
    c8d8:	b292      	uxth	r2, r2
    if (++sysTime < temp)
    c8da:	880b      	ldrh	r3, [r1, #0]
    c8dc:	3301      	adds	r3, #1
    c8de:	b29b      	uxth	r3, r3
    c8e0:	800b      	strh	r3, [r1, #0]
    c8e2:	429a      	cmp	r2, r3
    c8e4:	d903      	bls.n	c8ee <hwTimerOverflowCallback+0x1e>
        sysTimeOvf++;
    c8e6:	4a22      	ldr	r2, [pc, #136]	; (c970 <hwTimerOverflowCallback+0xa0>)
    c8e8:	6813      	ldr	r3, [r2, #0]
    c8ea:	3301      	adds	r3, #1
    c8ec:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    c8ee:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    c8f2:	425a      	negs	r2, r3
    c8f4:	4153      	adcs	r3, r2
    c8f6:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    c8f8:	b672      	cpsid	i
    c8fa:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    c8fe:	2200      	movs	r2, #0
    c900:	4b1c      	ldr	r3, [pc, #112]	; (c974 <hwTimerOverflowCallback+0xa4>)
    c902:	701a      	strb	r2, [r3, #0]
	return flags;
    c904:	9c01      	ldr	r4, [sp, #4]
{
    uint32_t tmo32;
    uint16_t tmoHigh16, tmoLow16;
    uint8_t flags = cpu_irq_save();

    if (SWTIMER_INVALID != runningTimerQueueHead && !swTimers[runningTimerQueueHead].loaded)
    c906:	4b1c      	ldr	r3, [pc, #112]	; (c978 <hwTimerOverflowCallback+0xa8>)
    c908:	681b      	ldr	r3, [r3, #0]
    c90a:	2bff      	cmp	r3, #255	; 0xff
    c90c:	d00d      	beq.n	c92a <hwTimerOverflowCallback+0x5a>
    c90e:	0119      	lsls	r1, r3, #4
    c910:	4a1a      	ldr	r2, [pc, #104]	; (c97c <hwTimerOverflowCallback+0xac>)
    c912:	1852      	adds	r2, r2, r1
    c914:	7b52      	ldrb	r2, [r2, #13]
    c916:	2a00      	cmp	r2, #0
    c918:	d107      	bne.n	c92a <hwTimerOverflowCallback+0x5a>
    {
        tmo32 = swTimers[runningTimerQueueHead].absoluteExpiryTime;
    c91a:	4a18      	ldr	r2, [pc, #96]	; (c97c <hwTimerOverflowCallback+0xac>)
    c91c:	5888      	ldr	r0, [r1, r2]
        tmoHigh16 = (uint16_t)(tmo32 >> SWTIMER_SYSTIME_SHIFTMASK);

        if (tmoHigh16 == sysTime)
    c91e:	4b13      	ldr	r3, [pc, #76]	; (c96c <hwTimerOverflowCallback+0x9c>)
    c920:	881b      	ldrh	r3, [r3, #0]
    c922:	b29b      	uxth	r3, r3
    c924:	0c02      	lsrs	r2, r0, #16
    c926:	429a      	cmp	r2, r3
    c928:	d00c      	beq.n	c944 <hwTimerOverflowCallback+0x74>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    c92a:	23ff      	movs	r3, #255	; 0xff
    c92c:	4223      	tst	r3, r4
    c92e:	d005      	beq.n	c93c <hwTimerOverflowCallback+0x6c>
		cpu_irq_enable();
    c930:	2201      	movs	r2, #1
    c932:	4b10      	ldr	r3, [pc, #64]	; (c974 <hwTimerOverflowCallback+0xa4>)
    c934:	701a      	strb	r2, [r3, #0]
    c936:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    c93a:	b662      	cpsie	i
	SYS_HwOverflow_Cb();
    c93c:	4b10      	ldr	r3, [pc, #64]	; (c980 <hwTimerOverflowCallback+0xb0>)
    c93e:	4798      	blx	r3
}
    c940:	b002      	add	sp, #8
    c942:	bd10      	pop	{r4, pc}
        {
            tmoLow16 = (uint16_t)(tmo32 & SWTIMER_HWTIME_MASK);
    c944:	b280      	uxth	r0, r0
            if (SWTIMER_MIN_TIMEOUT < tmoLow16)
    c946:	28ff      	cmp	r0, #255	; 0xff
    c948:	d909      	bls.n	c95e <hwTimerOverflowCallback+0x8e>
            {
                common_tc_delay(tmoLow16);
    c94a:	4b0e      	ldr	r3, [pc, #56]	; (c984 <hwTimerOverflowCallback+0xb4>)
    c94c:	4798      	blx	r3
                swTimers[runningTimerQueueHead].loaded = true;
    c94e:	4b0a      	ldr	r3, [pc, #40]	; (c978 <hwTimerOverflowCallback+0xa8>)
    c950:	681a      	ldr	r2, [r3, #0]
    c952:	0112      	lsls	r2, r2, #4
    c954:	4b09      	ldr	r3, [pc, #36]	; (c97c <hwTimerOverflowCallback+0xac>)
    c956:	189b      	adds	r3, r3, r2
    c958:	2201      	movs	r2, #1
    c95a:	735a      	strb	r2, [r3, #13]
    c95c:	e7e5      	b.n	c92a <hwTimerOverflowCallback+0x5a>
            }
            else
            {
                isTimerTriggered = true;
    c95e:	2201      	movs	r2, #1
    c960:	4b09      	ldr	r3, [pc, #36]	; (c988 <hwTimerOverflowCallback+0xb8>)
    c962:	701a      	strb	r2, [r3, #0]
                SYSTEM_PostTask(TIMER_TASK_ID);
    c964:	2001      	movs	r0, #1
    c966:	4b09      	ldr	r3, [pc, #36]	; (c98c <hwTimerOverflowCallback+0xbc>)
    c968:	4798      	blx	r3
    c96a:	e7de      	b.n	c92a <hwTimerOverflowCallback+0x5a>
    c96c:	20002d70 	.word	0x20002d70
    c970:	20002d74 	.word	0x20002d74
    c974:	20000008 	.word	0x20000008
    c978:	20001e6c 	.word	0x20001e6c
    c97c:	20002be0 	.word	0x20002be0
    c980:	0000b965 	.word	0x0000b965
    c984:	00012d99 	.word	0x00012d99
    c988:	20002d72 	.word	0x20002d72
    c98c:	0000d1c5 	.word	0x0000d1c5

0000c990 <loadHwTimer>:
{
    c990:	b570      	push	{r4, r5, r6, lr}
    c992:	0004      	movs	r4, r0
    if (SWTIMER_INVALID != timerId)
    c994:	28ff      	cmp	r0, #255	; 0xff
    c996:	d030      	beq.n	c9fa <loadHwTimer+0x6a>
    time |= ((uint64_t) sysTimeOvf) << 32;
    c998:	4b19      	ldr	r3, [pc, #100]	; (ca00 <loadHwTimer+0x70>)
    c99a:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    c99c:	4b19      	ldr	r3, [pc, #100]	; (ca04 <loadHwTimer+0x74>)
    c99e:	881d      	ldrh	r5, [r3, #0]
    c9a0:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    c9a2:	4b19      	ldr	r3, [pc, #100]	; (ca08 <loadHwTimer+0x78>)
    c9a4:	4798      	blx	r3
        uint32_t expiryTime = swTimers[timerId].absoluteExpiryTime;
    c9a6:	0123      	lsls	r3, r4, #4
    time |= (uint64_t) common_tc_read_count();
    c9a8:	4328      	orrs	r0, r5
    return ((t2 - t1) < INT32_MAX);
    c9aa:	4a18      	ldr	r2, [pc, #96]	; (ca0c <loadHwTimer+0x7c>)
    c9ac:	589b      	ldr	r3, [r3, r2]
    c9ae:	1a18      	subs	r0, r3, r0
        if (swtimerCompareTime(now, expiryTime))
    c9b0:	4b17      	ldr	r3, [pc, #92]	; (ca10 <loadHwTimer+0x80>)
    c9b2:	4298      	cmp	r0, r3
    c9b4:	d81a      	bhi.n	c9ec <loadHwTimer+0x5c>
            if (!swTimers[timerId].loaded)
    c9b6:	0122      	lsls	r2, r4, #4
    c9b8:	4b14      	ldr	r3, [pc, #80]	; (ca0c <loadHwTimer+0x7c>)
    c9ba:	189b      	adds	r3, r3, r2
    c9bc:	7b5b      	ldrb	r3, [r3, #13]
    c9be:	2b00      	cmp	r3, #0
    c9c0:	d11d      	bne.n	c9fe <loadHwTimer+0x6e>
                if (SWTIMER_MIN_TIMEOUT >= timeDiff)
    c9c2:	28ff      	cmp	r0, #255	; 0xff
    c9c4:	d90b      	bls.n	c9de <loadHwTimer+0x4e>
                else  if ((uint32_t)TIMER_PERIOD >= timeDiff)
    c9c6:	4b13      	ldr	r3, [pc, #76]	; (ca14 <loadHwTimer+0x84>)
    c9c8:	4298      	cmp	r0, r3
    c9ca:	d818      	bhi.n	c9fe <loadHwTimer+0x6e>
                    common_tc_delay((uint16_t)timeDiff);
    c9cc:	b280      	uxth	r0, r0
    c9ce:	4b12      	ldr	r3, [pc, #72]	; (ca18 <loadHwTimer+0x88>)
    c9d0:	4798      	blx	r3
                    swTimers[timerId].loaded = true;
    c9d2:	0124      	lsls	r4, r4, #4
    c9d4:	4b0d      	ldr	r3, [pc, #52]	; (ca0c <loadHwTimer+0x7c>)
    c9d6:	191c      	adds	r4, r3, r4
    c9d8:	2301      	movs	r3, #1
    c9da:	7363      	strb	r3, [r4, #13]
    c9dc:	e00f      	b.n	c9fe <loadHwTimer+0x6e>
                    isTimerTriggered = true;
    c9de:	2201      	movs	r2, #1
    c9e0:	4b0e      	ldr	r3, [pc, #56]	; (ca1c <loadHwTimer+0x8c>)
    c9e2:	701a      	strb	r2, [r3, #0]
                    SYSTEM_PostTask(TIMER_TASK_ID);
    c9e4:	2001      	movs	r0, #1
    c9e6:	4b0e      	ldr	r3, [pc, #56]	; (ca20 <loadHwTimer+0x90>)
    c9e8:	4798      	blx	r3
    c9ea:	e008      	b.n	c9fe <loadHwTimer+0x6e>
            isTimerTriggered = true;
    c9ec:	2201      	movs	r2, #1
    c9ee:	4b0b      	ldr	r3, [pc, #44]	; (ca1c <loadHwTimer+0x8c>)
    c9f0:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    c9f2:	2001      	movs	r0, #1
    c9f4:	4b0a      	ldr	r3, [pc, #40]	; (ca20 <loadHwTimer+0x90>)
    c9f6:	4798      	blx	r3
    c9f8:	e001      	b.n	c9fe <loadHwTimer+0x6e>
        common_tc_compare_stop();
    c9fa:	4b0a      	ldr	r3, [pc, #40]	; (ca24 <loadHwTimer+0x94>)
    c9fc:	4798      	blx	r3
}
    c9fe:	bd70      	pop	{r4, r5, r6, pc}
    ca00:	20002d74 	.word	0x20002d74
    ca04:	20002d70 	.word	0x20002d70
    ca08:	00012d25 	.word	0x00012d25
    ca0c:	20002be0 	.word	0x20002be0
    ca10:	7ffffffe 	.word	0x7ffffffe
    ca14:	0000ffff 	.word	0x0000ffff
    ca18:	00012d99 	.word	0x00012d99
    ca1c:	20002d72 	.word	0x20002d72
    ca20:	0000d1c5 	.word	0x0000d1c5
    ca24:	00012d71 	.word	0x00012d71

0000ca28 <swtimerInternalHandler>:

/**************************************************************************//**
\brief Internal handler for the timer trigger
******************************************************************************/
static void swtimerInternalHandler(void)
{
    ca28:	b510      	push	{r4, lr}
    if (isTimerTriggered)
    ca2a:	4b1d      	ldr	r3, [pc, #116]	; (caa0 <swtimerInternalHandler+0x78>)
    ca2c:	781b      	ldrb	r3, [r3, #0]
    ca2e:	2b00      	cmp	r3, #0
    ca30:	d027      	beq.n	ca82 <swtimerInternalHandler+0x5a>
    {
        isTimerTriggered = false;
    ca32:	2200      	movs	r2, #0
    ca34:	4b1a      	ldr	r3, [pc, #104]	; (caa0 <swtimerInternalHandler+0x78>)
    ca36:	701a      	strb	r2, [r3, #0]

        if (0 < runningTimers)
    ca38:	4b1a      	ldr	r3, [pc, #104]	; (caa4 <swtimerInternalHandler+0x7c>)
    ca3a:	781b      	ldrb	r3, [r3, #0]
    ca3c:	2b00      	cmp	r3, #0
    ca3e:	d020      	beq.n	ca82 <swtimerInternalHandler+0x5a>
        { /* Holds the number of running timers */
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    ca40:	4b19      	ldr	r3, [pc, #100]	; (caa8 <swtimerInternalHandler+0x80>)
    ca42:	681b      	ldr	r3, [r3, #0]
    ca44:	2bff      	cmp	r3, #255	; 0xff
    ca46:	d01d      	beq.n	ca84 <swtimerInternalHandler+0x5c>
                expiredTimerQueueHead = runningTimerQueueHead;
                expiredTimerQueueTail = runningTimerQueueHead;
            }
            else
            { /* there were already some timers expired before this one */
                swTimers[expiredTimerQueueTail].nextTimer = runningTimerQueueHead;
    ca48:	4b18      	ldr	r3, [pc, #96]	; (caac <swtimerInternalHandler+0x84>)
    ca4a:	6818      	ldr	r0, [r3, #0]
    ca4c:	4918      	ldr	r1, [pc, #96]	; (cab0 <swtimerInternalHandler+0x88>)
    ca4e:	680b      	ldr	r3, [r1, #0]
    ca50:	011a      	lsls	r2, r3, #4
    ca52:	4b18      	ldr	r3, [pc, #96]	; (cab4 <swtimerInternalHandler+0x8c>)
    ca54:	189b      	adds	r3, r3, r2
    ca56:	7318      	strb	r0, [r3, #12]
                expiredTimerQueueTail = runningTimerQueueHead;
    ca58:	6008      	str	r0, [r1, #0]
            }

            runningTimerQueueHead = swTimers[runningTimerQueueHead].nextTimer;
    ca5a:	4a16      	ldr	r2, [pc, #88]	; (cab4 <swtimerInternalHandler+0x8c>)
    ca5c:	4913      	ldr	r1, [pc, #76]	; (caac <swtimerInternalHandler+0x84>)
    ca5e:	680b      	ldr	r3, [r1, #0]
    ca60:	011b      	lsls	r3, r3, #4
    ca62:	18d3      	adds	r3, r2, r3
    ca64:	7b18      	ldrb	r0, [r3, #12]
    ca66:	6008      	str	r0, [r1, #0]

            swTimers[expiredTimerQueueTail].nextTimer = SWTIMER_INVALID;
    ca68:	4b11      	ldr	r3, [pc, #68]	; (cab0 <swtimerInternalHandler+0x88>)
    ca6a:	681b      	ldr	r3, [r3, #0]
    ca6c:	011b      	lsls	r3, r3, #4
    ca6e:	18d2      	adds	r2, r2, r3
    ca70:	23ff      	movs	r3, #255	; 0xff
    ca72:	7313      	strb	r3, [r2, #12]

            if ((--runningTimers) > 0)
    ca74:	4a0b      	ldr	r2, [pc, #44]	; (caa4 <swtimerInternalHandler+0x7c>)
    ca76:	7813      	ldrb	r3, [r2, #0]
    ca78:	3b01      	subs	r3, #1
    ca7a:	b2db      	uxtb	r3, r3
    ca7c:	7013      	strb	r3, [r2, #0]
    ca7e:	2b00      	cmp	r3, #0
    ca80:	d10b      	bne.n	ca9a <swtimerInternalHandler+0x72>
            { /* keep the ball rolling! load the next head timer from the queue */
                loadHwTimer(runningTimerQueueHead);
            }
        }
    }
}
    ca82:	bd10      	pop	{r4, pc}
                (expiredTimerQueueTail == SWTIMER_INVALID))
    ca84:	4b0a      	ldr	r3, [pc, #40]	; (cab0 <swtimerInternalHandler+0x88>)
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    ca86:	681b      	ldr	r3, [r3, #0]
    ca88:	2bff      	cmp	r3, #255	; 0xff
    ca8a:	d1dd      	bne.n	ca48 <swtimerInternalHandler+0x20>
                expiredTimerQueueHead = runningTimerQueueHead;
    ca8c:	4b07      	ldr	r3, [pc, #28]	; (caac <swtimerInternalHandler+0x84>)
    ca8e:	681b      	ldr	r3, [r3, #0]
    ca90:	4a05      	ldr	r2, [pc, #20]	; (caa8 <swtimerInternalHandler+0x80>)
    ca92:	6013      	str	r3, [r2, #0]
                expiredTimerQueueTail = runningTimerQueueHead;
    ca94:	4a06      	ldr	r2, [pc, #24]	; (cab0 <swtimerInternalHandler+0x88>)
    ca96:	6013      	str	r3, [r2, #0]
    ca98:	e7df      	b.n	ca5a <swtimerInternalHandler+0x32>
                loadHwTimer(runningTimerQueueHead);
    ca9a:	4b07      	ldr	r3, [pc, #28]	; (cab8 <swtimerInternalHandler+0x90>)
    ca9c:	4798      	blx	r3
}
    ca9e:	e7f0      	b.n	ca82 <swtimerInternalHandler+0x5a>
    caa0:	20002d72 	.word	0x20002d72
    caa4:	20001e70 	.word	0x20001e70
    caa8:	20001e64 	.word	0x20001e64
    caac:	20001e6c 	.word	0x20001e6c
    cab0:	20001e68 	.word	0x20001e68
    cab4:	20002be0 	.word	0x20002be0
    cab8:	0000c991 	.word	0x0000c991

0000cabc <SwTimerReset>:
    /*
    * Initialize the timer resources like timer arrays queues, timer registers
    */
    uint8_t index;

    runningTimers = 0u;
    cabc:	2300      	movs	r3, #0
    cabe:	4a0d      	ldr	r2, [pc, #52]	; (caf4 <SwTimerReset+0x38>)
    cac0:	7013      	strb	r3, [r2, #0]
    isTimerTriggered = false;
    cac2:	4a0d      	ldr	r2, [pc, #52]	; (caf8 <SwTimerReset+0x3c>)
    cac4:	7013      	strb	r3, [r2, #0]

    runningTimerQueueHead = SWTIMER_INVALID;
    cac6:	33ff      	adds	r3, #255	; 0xff
    cac8:	4a0c      	ldr	r2, [pc, #48]	; (cafc <SwTimerReset+0x40>)
    caca:	6013      	str	r3, [r2, #0]
    expiredTimerQueueHead = SWTIMER_INVALID;
    cacc:	4a0c      	ldr	r2, [pc, #48]	; (cb00 <SwTimerReset+0x44>)
    cace:	6013      	str	r3, [r2, #0]
    expiredTimerQueueTail = SWTIMER_INVALID;
    cad0:	4a0c      	ldr	r2, [pc, #48]	; (cb04 <SwTimerReset+0x48>)
    cad2:	6013      	str	r3, [r2, #0]
    cad4:	4b0c      	ldr	r3, [pc, #48]	; (cb08 <SwTimerReset+0x4c>)
    cad6:	0018      	movs	r0, r3
    cad8:	3091      	adds	r0, #145	; 0x91
    cada:	30ff      	adds	r0, #255	; 0xff

    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    {
        swTimers[index].nextTimer = SWTIMER_INVALID;
    cadc:	21ff      	movs	r1, #255	; 0xff
        swTimers[index].timerCb = NULL;
    cade:	2200      	movs	r2, #0
        swTimers[index].nextTimer = SWTIMER_INVALID;
    cae0:	7219      	strb	r1, [r3, #8]
        swTimers[index].timerCb = NULL;
    cae2:	601a      	str	r2, [r3, #0]
    cae4:	3310      	adds	r3, #16
    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    cae6:	4283      	cmp	r3, r0
    cae8:	d1fa      	bne.n	cae0 <SwTimerReset+0x24>
    }

    allocatedTimerId = 0u;
    caea:	2200      	movs	r2, #0
    caec:	4b07      	ldr	r3, [pc, #28]	; (cb0c <SwTimerReset+0x50>)
    caee:	701a      	strb	r2, [r3, #0]
}
    caf0:	4770      	bx	lr
    caf2:	46c0      	nop			; (mov r8, r8)
    caf4:	20001e70 	.word	0x20001e70
    caf8:	20002d72 	.word	0x20002d72
    cafc:	20001e6c 	.word	0x20001e6c
    cb00:	20001e64 	.word	0x20001e64
    cb04:	20001e68 	.word	0x20001e68
    cb08:	20002be4 	.word	0x20002be4
    cb0c:	20001e60 	.word	0x20001e60

0000cb10 <SystemTimerInit>:

/**************************************************************************//**
\brief Initializes the Software Timer module
******************************************************************************/
void SystemTimerInit(void)
{
    cb10:	b510      	push	{r4, lr}
    SwTimerReset();
    cb12:	4b08      	ldr	r3, [pc, #32]	; (cb34 <SystemTimerInit+0x24>)
    cb14:	4798      	blx	r3

    /* initialize system time parameters */
    sysTimeOvf = 0x00000000;
    cb16:	2300      	movs	r3, #0
    cb18:	4a07      	ldr	r2, [pc, #28]	; (cb38 <SystemTimerInit+0x28>)
    cb1a:	6013      	str	r3, [r2, #0]
    sysTime = 0x0000;
    cb1c:	4a07      	ldr	r2, [pc, #28]	; (cb3c <SystemTimerInit+0x2c>)
    cb1e:	8013      	strh	r3, [r2, #0]

    common_tc_init();
    cb20:	4b07      	ldr	r3, [pc, #28]	; (cb40 <SystemTimerInit+0x30>)
    cb22:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    cb24:	4807      	ldr	r0, [pc, #28]	; (cb44 <SystemTimerInit+0x34>)
    cb26:	4b08      	ldr	r3, [pc, #32]	; (cb48 <SystemTimerInit+0x38>)
    cb28:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    cb2a:	4808      	ldr	r0, [pc, #32]	; (cb4c <SystemTimerInit+0x3c>)
    cb2c:	4b08      	ldr	r3, [pc, #32]	; (cb50 <SystemTimerInit+0x40>)
    cb2e:	4798      	blx	r3
}
    cb30:	bd10      	pop	{r4, pc}
    cb32:	46c0      	nop			; (mov r8, r8)
    cb34:	0000cabd 	.word	0x0000cabd
    cb38:	20002d74 	.word	0x20002d74
    cb3c:	20002d70 	.word	0x20002d70
    cb40:	00012e05 	.word	0x00012e05
    cb44:	0000c8d1 	.word	0x0000c8d1
    cb48:	00012e89 	.word	0x00012e89
    cb4c:	0000c8a9 	.word	0x0000c8a9
    cb50:	00012e95 	.word	0x00012e95

0000cb54 <SwTimerGetTime>:
/**************************************************************************//**
\brief Get current system time.
\return Returns current system time in microseconds
******************************************************************************/
uint64_t SwTimerGetTime(void)
{
    cb54:	b570      	push	{r4, r5, r6, lr}
    time |= ((uint64_t) sysTimeOvf) << 32;
    cb56:	4b05      	ldr	r3, [pc, #20]	; (cb6c <SwTimerGetTime+0x18>)
    cb58:	681c      	ldr	r4, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    cb5a:	4b05      	ldr	r3, [pc, #20]	; (cb70 <SwTimerGetTime+0x1c>)
    cb5c:	881d      	ldrh	r5, [r3, #0]
    cb5e:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    cb60:	4b04      	ldr	r3, [pc, #16]	; (cb74 <SwTimerGetTime+0x20>)
    cb62:	4798      	blx	r3
    cb64:	4328      	orrs	r0, r5
    return gettime();
}
    cb66:	0021      	movs	r1, r4
    cb68:	bd70      	pop	{r4, r5, r6, pc}
    cb6a:	46c0      	nop			; (mov r8, r8)
    cb6c:	20002d74 	.word	0x20002d74
    cb70:	20002d70 	.word	0x20002d70
    cb74:	00012d25 	.word	0x00012d25

0000cb78 <SwTimerCreate>:

\return LORAWAN_SUCCESS if new timerId is allocated
        LORAWAN_RESOURCE_UNAVAILABLE if there is no more timerId to allocate
******************************************************************************/
StackRetStatus_t SwTimerCreate(uint8_t *timerId)
{
    cb78:	b510      	push	{r4, lr}
    cb7a:	0004      	movs	r4, r0
    StackRetStatus_t retVal = LORAWAN_SUCCESS;

    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    cb7c:	4b08      	ldr	r3, [pc, #32]	; (cba0 <SwTimerCreate+0x28>)
    cb7e:	781b      	ldrb	r3, [r3, #0]
        * If you reach this spot it means the TOTAL_NUMBER_OF_SW_TIMERS
        * is #defined to a lower value than the number of timers that have
        * been SwTimerCreate()
        */
        SYS_ASSERT_FATAL(ASSERT_HAL_TIMERID_EXHAUSTED);
        retVal = LORAWAN_RESOURCE_UNAVAILABLE;
    cb80:	2014      	movs	r0, #20
    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    cb82:	2b18      	cmp	r3, #24
    cb84:	d900      	bls.n	cb88 <SwTimerCreate+0x10>
    }

    return retVal;
}
    cb86:	bd10      	pop	{r4, pc}
        ATOMIC_SECTION_ENTER
    cb88:	4b06      	ldr	r3, [pc, #24]	; (cba4 <SwTimerCreate+0x2c>)
    cb8a:	4798      	blx	r3
        *timerId = allocatedTimerId;
    cb8c:	4a04      	ldr	r2, [pc, #16]	; (cba0 <SwTimerCreate+0x28>)
    cb8e:	7813      	ldrb	r3, [r2, #0]
    cb90:	7023      	strb	r3, [r4, #0]
        allocatedTimerId++;
    cb92:	3301      	adds	r3, #1
    cb94:	7013      	strb	r3, [r2, #0]
        ATOMIC_SECTION_EXIT
    cb96:	4b04      	ldr	r3, [pc, #16]	; (cba8 <SwTimerCreate+0x30>)
    cb98:	4798      	blx	r3
    StackRetStatus_t retVal = LORAWAN_SUCCESS;
    cb9a:	2008      	movs	r0, #8
    cb9c:	e7f3      	b.n	cb86 <SwTimerCreate+0xe>
    cb9e:	46c0      	nop			; (mov r8, r8)
    cba0:	20001e60 	.word	0x20001e60
    cba4:	0000c179 	.word	0x0000c179
    cba8:	0000c185 	.word	0x0000c185

0000cbac <SwTimerStart>:
        LORAWAN_INVALID_REQUEST if \timerId is already running
        LORAWAN_SUCCESS if \timerId is successfully queued for running
******************************************************************************/
StackRetStatus_t SwTimerStart(uint8_t timerId, uint32_t timerCount,
    SwTimeoutType_t timeoutType, void *timerCb, void *paramCb)
{
    cbac:	b5f0      	push	{r4, r5, r6, r7, lr}
    cbae:	46d6      	mov	lr, sl
    cbb0:	464f      	mov	r7, r9
    cbb2:	4646      	mov	r6, r8
    cbb4:	b5c0      	push	{r6, r7, lr}
    cbb6:	b084      	sub	sp, #16
    cbb8:	0007      	movs	r7, r0
    cbba:	000d      	movs	r5, r1
    cbbc:	0016      	movs	r6, r2
    cbbe:	001c      	movs	r4, r3
    uint32_t pointInTime;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    cbc0:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    cbc2:	2f18      	cmp	r7, #24
    cbc4:	d809      	bhi.n	cbda <SwTimerStart+0x2e>
    cbc6:	2b00      	cmp	r3, #0
    cbc8:	d100      	bne.n	cbcc <SwTimerStart+0x20>
    cbca:	e08c      	b.n	cce6 <SwTimerStart+0x13a>
    }

    if (NULL != swTimers[timerId].timerCb)
    cbcc:	013a      	lsls	r2, r7, #4
    cbce:	4b52      	ldr	r3, [pc, #328]	; (cd18 <SwTimerStart+0x16c>)
    cbd0:	189b      	adds	r3, r3, r2
    cbd2:	685b      	ldr	r3, [r3, #4]
        /*
        * Timer is already running if the callback function of the
        * corresponding timer index in the timer array is not NULL.
        */
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_REQUEST;
    cbd4:	300b      	adds	r0, #11
    if (NULL != swTimers[timerId].timerCb)
    cbd6:	2b00      	cmp	r3, #0
    cbd8:	d005      	beq.n	cbe6 <SwTimerStart+0x3a>
        }
    }

    swtimerStartAbsoluteTimer(timerId, pointInTime, timerCb, paramCb);
    return LORAWAN_SUCCESS;
}
    cbda:	b004      	add	sp, #16
    cbdc:	bc1c      	pop	{r2, r3, r4}
    cbde:	4690      	mov	r8, r2
    cbe0:	4699      	mov	r9, r3
    cbe2:	46a2      	mov	sl, r4
    cbe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    time |= ((uint64_t) sysTimeOvf) << 32;
    cbe6:	4b4d      	ldr	r3, [pc, #308]	; (cd1c <SwTimerStart+0x170>)
    cbe8:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    cbea:	4b4d      	ldr	r3, [pc, #308]	; (cd20 <SwTimerStart+0x174>)
    cbec:	8818      	ldrh	r0, [r3, #0]
    cbee:	0403      	lsls	r3, r0, #16
    cbf0:	4698      	mov	r8, r3
    time |= (uint64_t) common_tc_read_count();
    cbf2:	4b4c      	ldr	r3, [pc, #304]	; (cd24 <SwTimerStart+0x178>)
    cbf4:	4798      	blx	r3
    cbf6:	4643      	mov	r3, r8
    cbf8:	4303      	orrs	r3, r0
    switch (timeoutType)
    cbfa:	2e00      	cmp	r6, #0
    cbfc:	d003      	beq.n	cc06 <SwTimerStart+0x5a>
    cbfe:	2e01      	cmp	r6, #1
    cc00:	d038      	beq.n	cc74 <SwTimerStart+0xc8>
            return LORAWAN_INVALID_PARAMETER;
    cc02:	200a      	movs	r0, #10
    cc04:	e7e9      	b.n	cbda <SwTimerStart+0x2e>
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    cc06:	4948      	ldr	r1, [pc, #288]	; (cd28 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    cc08:	200a      	movs	r0, #10
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    cc0a:	002a      	movs	r2, r5
    cc0c:	3aff      	subs	r2, #255	; 0xff
            pointInTime = ADD_TIME(timerCount, now);
    cc0e:	18ed      	adds	r5, r5, r3
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    cc10:	428a      	cmp	r2, r1
    cc12:	d8e2      	bhi.n	cbda <SwTimerStart+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    cc14:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    cc18:	425a      	negs	r2, r3
    cc1a:	4153      	adcs	r3, r2
    cc1c:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    cc1e:	b672      	cpsid	i
    cc20:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    cc24:	2600      	movs	r6, #0
    cc26:	4b41      	ldr	r3, [pc, #260]	; (cd2c <SwTimerStart+0x180>)
    cc28:	701e      	strb	r6, [r3, #0]
	return flags;
    cc2a:	9b03      	ldr	r3, [sp, #12]
    cc2c:	4699      	mov	r9, r3
    swtimerInternalHandler();
    cc2e:	4b40      	ldr	r3, [pc, #256]	; (cd30 <SwTimerStart+0x184>)
    cc30:	4798      	blx	r3
    swTimers[timerId].absoluteExpiryTime = pointInTime;
    cc32:	4b39      	ldr	r3, [pc, #228]	; (cd18 <SwTimerStart+0x16c>)
    cc34:	013a      	lsls	r2, r7, #4
    cc36:	50d5      	str	r5, [r2, r3]
    swTimers[timerId].timerCb = (void (*)(void*))handlerCb;
    cc38:	189b      	adds	r3, r3, r2
    cc3a:	605c      	str	r4, [r3, #4]
    swTimers[timerId].paramCb = parameter;
    cc3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cc3e:	609a      	str	r2, [r3, #8]
    swTimers[timerId].loaded = false;
    cc40:	735e      	strb	r6, [r3, #13]
    runningTimers++;
    cc42:	4a3c      	ldr	r2, [pc, #240]	; (cd34 <SwTimerStart+0x188>)
    cc44:	7813      	ldrb	r3, [r2, #0]
    cc46:	3301      	adds	r3, #1
    cc48:	b2db      	uxtb	r3, r3
    cc4a:	7013      	strb	r3, [r2, #0]
    if (SWTIMER_INVALID == runningTimerQueueHead)
    cc4c:	4b3a      	ldr	r3, [pc, #232]	; (cd38 <SwTimerStart+0x18c>)
    cc4e:	681b      	ldr	r3, [r3, #0]
    cc50:	469a      	mov	sl, r3
    cc52:	2bff      	cmp	r3, #255	; 0xff
    cc54:	d016      	beq.n	cc84 <SwTimerStart+0xd8>
        uint8_t currIndex = runningTimerQueueHead;
    cc56:	466a      	mov	r2, sp
    cc58:	7013      	strb	r3, [r2, #0]
    cc5a:	7812      	ldrb	r2, [r2, #0]
        for (index = 0; index < runningTimers; index++)
    cc5c:	4b35      	ldr	r3, [pc, #212]	; (cd34 <SwTimerStart+0x188>)
    cc5e:	781b      	ldrb	r3, [r3, #0]
    cc60:	2b00      	cmp	r3, #0
    cc62:	d042      	beq.n	ccea <SwTimerStart+0x13e>
    cc64:	9200      	str	r2, [sp, #0]
    cc66:	2300      	movs	r3, #0
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    cc68:	492b      	ldr	r1, [pc, #172]	; (cd18 <SwTimerStart+0x16c>)
    cc6a:	4688      	mov	r8, r1
    cc6c:	4833      	ldr	r0, [pc, #204]	; (cd3c <SwTimerStart+0x190>)
                    currIndex = swTimers[currIndex].nextTimer;
    cc6e:	468c      	mov	ip, r1
        for (index = 0; index < runningTimers; index++)
    cc70:	4c30      	ldr	r4, [pc, #192]	; (cd34 <SwTimerStart+0x188>)
    cc72:	e02a      	b.n	ccca <SwTimerStart+0x11e>
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    cc74:	0028      	movs	r0, r5
    cc76:	38ff      	subs	r0, #255	; 0xff
    cc78:	1ac3      	subs	r3, r0, r3
    cc7a:	4a2b      	ldr	r2, [pc, #172]	; (cd28 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    cc7c:	200a      	movs	r0, #10
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    cc7e:	4293      	cmp	r3, r2
    cc80:	d9c8      	bls.n	cc14 <SwTimerStart+0x68>
    cc82:	e7aa      	b.n	cbda <SwTimerStart+0x2e>
        runningTimerQueueHead = timerId;
    cc84:	4b2c      	ldr	r3, [pc, #176]	; (cd38 <SwTimerStart+0x18c>)
    cc86:	601f      	str	r7, [r3, #0]
        loadHwTimer(runningTimerQueueHead);
    cc88:	0038      	movs	r0, r7
    cc8a:	4b2d      	ldr	r3, [pc, #180]	; (cd40 <SwTimerStart+0x194>)
    cc8c:	4798      	blx	r3
    cc8e:	e036      	b.n	ccfe <SwTimerStart+0x152>
                    swTimers[timerId].nextTimer = currIndex;
    cc90:	4b21      	ldr	r3, [pc, #132]	; (cd18 <SwTimerStart+0x16c>)
    cc92:	013c      	lsls	r4, r7, #4
    cc94:	191c      	adds	r4, r3, r4
    cc96:	7322      	strb	r2, [r4, #12]
                    swTimers[currIndex].loaded = false;
    cc98:	9901      	ldr	r1, [sp, #4]
    cc9a:	0109      	lsls	r1, r1, #4
    cc9c:	1859      	adds	r1, r3, r1
    cc9e:	2300      	movs	r3, #0
    cca0:	734b      	strb	r3, [r1, #13]
                    if (runningTimerQueueHead == currIndex)
    cca2:	4592      	cmp	sl, r2
    cca4:	d005      	beq.n	ccb2 <SwTimerStart+0x106>
                        swTimers[prevIndex].nextTimer = timerId;
    cca6:	9b00      	ldr	r3, [sp, #0]
    cca8:	0118      	lsls	r0, r3, #4
    ccaa:	4b1b      	ldr	r3, [pc, #108]	; (cd18 <SwTimerStart+0x16c>)
    ccac:	1818      	adds	r0, r3, r0
    ccae:	7307      	strb	r7, [r0, #12]
    ccb0:	e025      	b.n	ccfe <SwTimerStart+0x152>
                        runningTimerQueueHead = timerId;
    ccb2:	4b21      	ldr	r3, [pc, #132]	; (cd38 <SwTimerStart+0x18c>)
    ccb4:	601f      	str	r7, [r3, #0]
                        loadHwTimer(runningTimerQueueHead);
    ccb6:	0038      	movs	r0, r7
    ccb8:	4b21      	ldr	r3, [pc, #132]	; (cd40 <SwTimerStart+0x194>)
    ccba:	4798      	blx	r3
    ccbc:	e01f      	b.n	ccfe <SwTimerStart+0x152>
        for (index = 0; index < runningTimers; index++)
    ccbe:	3301      	adds	r3, #1
    ccc0:	b2db      	uxtb	r3, r3
    ccc2:	7821      	ldrb	r1, [r4, #0]
    ccc4:	b2c9      	uxtb	r1, r1
    ccc6:	428b      	cmp	r3, r1
    ccc8:	d210      	bcs.n	ccec <SwTimerStart+0x140>
            if (SWTIMER_INVALID != currIndex)
    ccca:	2aff      	cmp	r2, #255	; 0xff
    cccc:	d0f7      	beq.n	ccbe <SwTimerStart+0x112>
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    ccce:	9201      	str	r2, [sp, #4]
    ccd0:	0111      	lsls	r1, r2, #4
    return ((t2 - t1) < INT32_MAX);
    ccd2:	4646      	mov	r6, r8
    ccd4:	5989      	ldr	r1, [r1, r6]
    ccd6:	1a69      	subs	r1, r5, r1
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    ccd8:	4281      	cmp	r1, r0
    ccda:	d8d9      	bhi.n	cc90 <SwTimerStart+0xe4>
                    currIndex = swTimers[currIndex].nextTimer;
    ccdc:	0111      	lsls	r1, r2, #4
    ccde:	4461      	add	r1, ip
    cce0:	9200      	str	r2, [sp, #0]
    cce2:	7b0a      	ldrb	r2, [r1, #12]
    cce4:	e7eb      	b.n	ccbe <SwTimerStart+0x112>
        return LORAWAN_INVALID_PARAMETER;
    cce6:	200a      	movs	r0, #10
    cce8:	e777      	b.n	cbda <SwTimerStart+0x2e>
        uint8_t prevIndex = runningTimerQueueHead;
    ccea:	9200      	str	r2, [sp, #0]
            swTimers[prevIndex].nextTimer = timerId;
    ccec:	4b0a      	ldr	r3, [pc, #40]	; (cd18 <SwTimerStart+0x16c>)
    ccee:	9a00      	ldr	r2, [sp, #0]
    ccf0:	0110      	lsls	r0, r2, #4
    ccf2:	1818      	adds	r0, r3, r0
    ccf4:	7307      	strb	r7, [r0, #12]
            swTimers[timerId].nextTimer = SWTIMER_INVALID;
    ccf6:	013f      	lsls	r7, r7, #4
    ccf8:	19df      	adds	r7, r3, r7
    ccfa:	23ff      	movs	r3, #255	; 0xff
    ccfc:	733b      	strb	r3, [r7, #12]
	if (cpu_irq_is_enabled_flags(flags))
    ccfe:	23ff      	movs	r3, #255	; 0xff
    return LORAWAN_SUCCESS;
    cd00:	2008      	movs	r0, #8
    cd02:	464a      	mov	r2, r9
    cd04:	4213      	tst	r3, r2
    cd06:	d100      	bne.n	cd0a <SwTimerStart+0x15e>
    cd08:	e767      	b.n	cbda <SwTimerStart+0x2e>
		cpu_irq_enable();
    cd0a:	2201      	movs	r2, #1
    cd0c:	4b07      	ldr	r3, [pc, #28]	; (cd2c <SwTimerStart+0x180>)
    cd0e:	701a      	strb	r2, [r3, #0]
    cd10:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    cd14:	b662      	cpsie	i
    cd16:	e760      	b.n	cbda <SwTimerStart+0x2e>
    cd18:	20002be0 	.word	0x20002be0
    cd1c:	20002d74 	.word	0x20002d74
    cd20:	20002d70 	.word	0x20002d70
    cd24:	00012d25 	.word	0x00012d25
    cd28:	7fffff00 	.word	0x7fffff00
    cd2c:	20000008 	.word	0x20000008
    cd30:	0000ca29 	.word	0x0000ca29
    cd34:	20001e70 	.word	0x20001e70
    cd38:	20001e6c 	.word	0x20001e6c
    cd3c:	7ffffffe 	.word	0x7ffffffe
    cd40:	0000c991 	.word	0x0000c991

0000cd44 <SwTimerIsRunning>:
\param[in] timerId Timer ID to be checked for running
\return True if the timer is running else False
******************************************************************************/
bool SwTimerIsRunning(uint8_t timerId)
{
    if (NULL == swTimers[timerId].timerCb)
    cd44:	0103      	lsls	r3, r0, #4
    cd46:	4803      	ldr	r0, [pc, #12]	; (cd54 <SwTimerIsRunning+0x10>)
    cd48:	18c0      	adds	r0, r0, r3
    cd4a:	6840      	ldr	r0, [r0, #4]
    cd4c:	1e43      	subs	r3, r0, #1
    cd4e:	4198      	sbcs	r0, r3
    cd50:	b2c0      	uxtb	r0, r0
    {
        return false;
    }

    return true;
}
    cd52:	4770      	bx	lr
    cd54:	20002be0 	.word	0x20002be0

0000cd58 <SwTimerReadValue>:
\brief Returns the remaining timeout for the given timerId
\param[in] timerId Timer ID to get the remaining time
\return Remaining time until expiry in microseconds
******************************************************************************/
uint32_t SwTimerReadValue(uint8_t timerId)
{
    cd58:	b570      	push	{r4, r5, r6, lr}
    uint32_t remainingTime = 0u;
    uint32_t timerExpiryTime = 0u;
    uint32_t currentSysTime = 0u;
    if ( NULL != swTimers[timerId].timerCb )
    cd5a:	0102      	lsls	r2, r0, #4
    cd5c:	4b0d      	ldr	r3, [pc, #52]	; (cd94 <SwTimerReadValue+0x3c>)
    cd5e:	189b      	adds	r3, r3, r2
    cd60:	685b      	ldr	r3, [r3, #4]
    cd62:	2b00      	cmp	r3, #0
    cd64:	d014      	beq.n	cd90 <SwTimerReadValue+0x38>
    {
	    timerExpiryTime = swTimers[timerId].absoluteExpiryTime;
    cd66:	4b0b      	ldr	r3, [pc, #44]	; (cd94 <SwTimerReadValue+0x3c>)
    cd68:	58d5      	ldr	r5, [r2, r3]
    time |= ((uint64_t) sysTimeOvf) << 32;
    cd6a:	4b0b      	ldr	r3, [pc, #44]	; (cd98 <SwTimerReadValue+0x40>)
    cd6c:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    cd6e:	4b0b      	ldr	r3, [pc, #44]	; (cd9c <SwTimerReadValue+0x44>)
    cd70:	881c      	ldrh	r4, [r3, #0]
    cd72:	0424      	lsls	r4, r4, #16
    time |= (uint64_t) common_tc_read_count();
    cd74:	4b0a      	ldr	r3, [pc, #40]	; (cda0 <SwTimerReadValue+0x48>)
    cd76:	4798      	blx	r3
    cd78:	4320      	orrs	r0, r4
	    currentSysTime = (uint32_t) gettime();
	    if ( currentSysTime <= timerExpiryTime )
    cd7a:	4285      	cmp	r5, r0
    cd7c:	d305      	bcc.n	cd8a <SwTimerReadValue+0x32>
	    {
		    remainingTime = timerExpiryTime - currentSysTime;
    cd7e:	1a28      	subs	r0, r5, r0
	    else if ( currentSysTime > timerExpiryTime )
	    {
		    remainingTime = (UINT32_MAX - currentSysTime) + timerExpiryTime;
	    }

        if (remainingTime >= SWTIMER_MAX_TIMEOUT)
    cd80:	4b08      	ldr	r3, [pc, #32]	; (cda4 <SwTimerReadValue+0x4c>)
    cd82:	4298      	cmp	r0, r3
    cd84:	d900      	bls.n	cd88 <SwTimerReadValue+0x30>
        {
            /* Diff cannot be more than max timeout */
            remainingTime = 0;
    cd86:	2000      	movs	r0, #0
        }
    }
    return remainingTime;
}
    cd88:	bd70      	pop	{r4, r5, r6, pc}
		    remainingTime = (UINT32_MAX - currentSysTime) + timerExpiryTime;
    cd8a:	3d01      	subs	r5, #1
    cd8c:	1a28      	subs	r0, r5, r0
    cd8e:	e7f7      	b.n	cd80 <SwTimerReadValue+0x28>
    uint32_t remainingTime = 0u;
    cd90:	2000      	movs	r0, #0
    return remainingTime;
    cd92:	e7f9      	b.n	cd88 <SwTimerReadValue+0x30>
    cd94:	20002be0 	.word	0x20002be0
    cd98:	20002d74 	.word	0x20002d74
    cd9c:	20002d70 	.word	0x20002d70
    cda0:	00012d25 	.word	0x00012d25
    cda4:	7ffffffe 	.word	0x7ffffffe

0000cda8 <SwTimerNextExpiryDuration>:
/**************************************************************************//**
\brief Returns the duration until the next timer expiry
\return Returns the duration until the next timeout in microseconds
******************************************************************************/
uint32_t SwTimerNextExpiryDuration(void)
{
    cda8:	b510      	push	{r4, lr}
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;

    if (SWTIMER_INVALID != runningTimerQueueHead)
    cdaa:	4b05      	ldr	r3, [pc, #20]	; (cdc0 <SwTimerNextExpiryDuration+0x18>)
    cdac:	6818      	ldr	r0, [r3, #0]
    cdae:	28ff      	cmp	r0, #255	; 0xff
    cdb0:	d102      	bne.n	cdb8 <SwTimerNextExpiryDuration+0x10>
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;
    cdb2:	2001      	movs	r0, #1
    cdb4:	4240      	negs	r0, r0
    {
        duration = SwTimerReadValue(runningTimerQueueHead);
    }

    return duration;
}
    cdb6:	bd10      	pop	{r4, pc}
        duration = SwTimerReadValue(runningTimerQueueHead);
    cdb8:	b2c0      	uxtb	r0, r0
    cdba:	4b02      	ldr	r3, [pc, #8]	; (cdc4 <SwTimerNextExpiryDuration+0x1c>)
    cdbc:	4798      	blx	r3
    cdbe:	e7fa      	b.n	cdb6 <SwTimerNextExpiryDuration+0xe>
    cdc0:	20001e6c 	.word	0x20001e6c
    cdc4:	0000cd59 	.word	0x0000cd59

0000cdc8 <SwTimersExecute>:

/**************************************************************************//**
\brief Handles Queues and Callbacks for Expired Timers
******************************************************************************/
void SwTimersExecute(void)
{
    cdc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    cdca:	46de      	mov	lr, fp
    cdcc:	4657      	mov	r7, sl
    cdce:	464e      	mov	r6, r9
    cdd0:	4645      	mov	r5, r8
    cdd2:	b5e0      	push	{r5, r6, r7, lr}
    cdd4:	b083      	sub	sp, #12
    time |= ((uint64_t) sysTimeOvf) << 32;
    cdd6:	4b2f      	ldr	r3, [pc, #188]	; (ce94 <SwTimersExecute+0xcc>)
    cdd8:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    cdda:	4b2f      	ldr	r3, [pc, #188]	; (ce98 <SwTimersExecute+0xd0>)
    cddc:	881b      	ldrh	r3, [r3, #0]
    time |= (uint64_t) common_tc_read_count();
    cdde:	4b2f      	ldr	r3, [pc, #188]	; (ce9c <SwTimersExecute+0xd4>)
    cde0:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    cde2:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    cde6:	4253      	negs	r3, r2
    cde8:	4153      	adcs	r3, r2
    cdea:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    cdec:	b672      	cpsid	i
    cdee:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    cdf2:	2200      	movs	r2, #0
    cdf4:	4b2a      	ldr	r3, [pc, #168]	; (cea0 <SwTimersExecute+0xd8>)
    cdf6:	701a      	strb	r2, [r3, #0]
	return flags;
    cdf8:	9c00      	ldr	r4, [sp, #0]
    uint64_t now = gettime();

    uint8_t flags = cpu_irq_save();
    swtimerInternalHandler();
    cdfa:	4b2a      	ldr	r3, [pc, #168]	; (cea4 <SwTimersExecute+0xdc>)
    cdfc:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    cdfe:	23ff      	movs	r3, #255	; 0xff
    ce00:	4223      	tst	r3, r4
    ce02:	d005      	beq.n	ce10 <SwTimersExecute+0x48>
		cpu_irq_enable();
    ce04:	2201      	movs	r2, #1
    ce06:	4b26      	ldr	r3, [pc, #152]	; (cea0 <SwTimersExecute+0xd8>)
    ce08:	701a      	strb	r2, [r3, #0]
    ce0a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    ce0e:	b662      	cpsie	i
	cpu_irq_disable();
    ce10:	4b23      	ldr	r3, [pc, #140]	; (cea0 <SwTimersExecute+0xd8>)
    ce12:	469a      	mov	sl, r3
        /* Expired timer if any will be processed here */
        while (SWTIMER_INVALID != expiredTimerQueueHead)
        {
            flags = cpu_irq_save();

            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    ce14:	4c24      	ldr	r4, [pc, #144]	; (cea8 <SwTimersExecute+0xe0>)
    ce16:	4b25      	ldr	r3, [pc, #148]	; (ceac <SwTimersExecute+0xe4>)
    ce18:	4699      	mov	r9, r3
    ce1a:	2200      	movs	r2, #0

            /*
            * The expired timer's structure elements are updated
            * and the timer is taken out of expired timer queue
            */
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    ce1c:	20ff      	movs	r0, #255	; 0xff
            */
            expiredTimerQueueHead = nextExpiredTimer;

            if (SWTIMER_INVALID == expiredTimerQueueHead)
            {
                expiredTimerQueueTail = SWTIMER_INVALID;
    ce1e:	4b24      	ldr	r3, [pc, #144]	; (ceb0 <SwTimersExecute+0xe8>)
    ce20:	4698      	mov	r8, r3
		cpu_irq_enable();
    ce22:	4b1f      	ldr	r3, [pc, #124]	; (cea0 <SwTimersExecute+0xd8>)
    ce24:	469c      	mov	ip, r3
    ce26:	e004      	b.n	ce32 <SwTimersExecute+0x6a>
    ce28:	4643      	mov	r3, r8
    ce2a:	6018      	str	r0, [r3, #0]
    ce2c:	e01e      	b.n	ce6c <SwTimersExecute+0xa4>
            }

            cpu_irq_restore(flags);

            if (NULL != callback)
    ce2e:	2e00      	cmp	r6, #0
    ce30:	d125      	bne.n	ce7e <SwTimersExecute+0xb6>
        while (SWTIMER_INVALID != expiredTimerQueueHead)
    ce32:	4b1d      	ldr	r3, [pc, #116]	; (cea8 <SwTimersExecute+0xe0>)
    ce34:	681b      	ldr	r3, [r3, #0]
    ce36:	2bff      	cmp	r3, #255	; 0xff
    ce38:	d024      	beq.n	ce84 <SwTimersExecute+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    ce3a:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    ce3e:	424b      	negs	r3, r1
    ce40:	414b      	adcs	r3, r1
    ce42:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    ce44:	b672      	cpsid	i
    ce46:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    ce4a:	4653      	mov	r3, sl
    ce4c:	701a      	strb	r2, [r3, #0]
	return flags;
    ce4e:	9f01      	ldr	r7, [sp, #4]
            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    ce50:	6823      	ldr	r3, [r4, #0]
    ce52:	011b      	lsls	r3, r3, #4
    ce54:	444b      	add	r3, r9
    ce56:	7b19      	ldrb	r1, [r3, #12]
            callback = (SwTimerCallbackFunc_t)swTimers[expiredTimerQueueHead].timerCb;
    ce58:	685e      	ldr	r6, [r3, #4]
            cbParam = swTimers[expiredTimerQueueHead].paramCb;
    ce5a:	689d      	ldr	r5, [r3, #8]
    ce5c:	46ab      	mov	fp, r5
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    ce5e:	7318      	strb	r0, [r3, #12]
            swTimers[expiredTimerQueueHead].timerCb = NULL;
    ce60:	605a      	str	r2, [r3, #4]
            swTimers[expiredTimerQueueHead].paramCb = NULL;
    ce62:	609a      	str	r2, [r3, #8]
            swTimers[expiredTimerQueueHead].loaded = false;
    ce64:	735a      	strb	r2, [r3, #13]
            expiredTimerQueueHead = nextExpiredTimer;
    ce66:	6021      	str	r1, [r4, #0]
            if (SWTIMER_INVALID == expiredTimerQueueHead)
    ce68:	29ff      	cmp	r1, #255	; 0xff
    ce6a:	d0dd      	beq.n	ce28 <SwTimersExecute+0x60>
	if (cpu_irq_is_enabled_flags(flags))
    ce6c:	4238      	tst	r0, r7
    ce6e:	d0de      	beq.n	ce2e <SwTimersExecute+0x66>
		cpu_irq_enable();
    ce70:	2301      	movs	r3, #1
    ce72:	4661      	mov	r1, ip
    ce74:	700b      	strb	r3, [r1, #0]
    ce76:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    ce7a:	b662      	cpsie	i
    ce7c:	e7d7      	b.n	ce2e <SwTimersExecute+0x66>
            {
                /* Callback function is called */
                callback(cbParam);
    ce7e:	4658      	mov	r0, fp
    ce80:	47b0      	blx	r6
    ce82:	e7ca      	b.n	ce1a <SwTimersExecute+0x52>
                (void)now;
            }
        }
    }
}
    ce84:	b003      	add	sp, #12
    ce86:	bc3c      	pop	{r2, r3, r4, r5}
    ce88:	4690      	mov	r8, r2
    ce8a:	4699      	mov	r9, r3
    ce8c:	46a2      	mov	sl, r4
    ce8e:	46ab      	mov	fp, r5
    ce90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ce92:	46c0      	nop			; (mov r8, r8)
    ce94:	20002d74 	.word	0x20002d74
    ce98:	20002d70 	.word	0x20002d70
    ce9c:	00012d25 	.word	0x00012d25
    cea0:	20000008 	.word	0x20000008
    cea4:	0000ca29 	.word	0x0000ca29
    cea8:	20001e64 	.word	0x20001e64
    ceac:	20002be0 	.word	0x20002be0
    ceb0:	20001e68 	.word	0x20001e68

0000ceb4 <TIMER_TaskHandler>:
{
    ceb4:	b510      	push	{r4, lr}
    SwTimersExecute();
    ceb6:	4b02      	ldr	r3, [pc, #8]	; (cec0 <TIMER_TaskHandler+0xc>)
    ceb8:	4798      	blx	r3
}
    ceba:	2000      	movs	r0, #0
    cebc:	bd10      	pop	{r4, pc}
    cebe:	46c0      	nop			; (mov r8, r8)
    cec0:	0000cdc9 	.word	0x0000cdc9

0000cec4 <SwTimerStop>:
        LORAWAN_INVALID_PARAMETER if timerId is not valid
        LORAWAN_INVALID_REQUEST if timerId was not started before
        LORAWAN_SUCCESS if it is successfully stopped
******************************************************************************/
StackRetStatus_t SwTimerStop(uint8_t timerId)
{
    cec4:	b570      	push	{r4, r5, r6, lr}
    cec6:	b082      	sub	sp, #8
    cec8:	0004      	movs	r4, r0
    uint8_t prevIndex;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    ceca:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    cecc:	2c18      	cmp	r4, #24
    cece:	d901      	bls.n	ced4 <SwTimerStop+0x10>
        return LORAWAN_SUCCESS;
    }

    SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
    return LORAWAN_INVALID_REQUEST;
}
    ced0:	b002      	add	sp, #8
    ced2:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    ced4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    ced8:	425a      	negs	r2, r3
    ceda:	4153      	adcs	r3, r2
    cedc:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    cede:	b672      	cpsid	i
    cee0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    cee4:	2200      	movs	r2, #0
    cee6:	4b47      	ldr	r3, [pc, #284]	; (d004 <SwTimerStop+0x140>)
    cee8:	701a      	strb	r2, [r3, #0]
	return flags;
    ceea:	9d01      	ldr	r5, [sp, #4]
    swtimerInternalHandler();
    ceec:	4b46      	ldr	r3, [pc, #280]	; (d008 <SwTimerStop+0x144>)
    ceee:	4798      	blx	r3
    if (runningTimers > 0)
    cef0:	4b46      	ldr	r3, [pc, #280]	; (d00c <SwTimerStop+0x148>)
    cef2:	781b      	ldrb	r3, [r3, #0]
    cef4:	2b00      	cmp	r3, #0
    cef6:	d040      	beq.n	cf7a <SwTimerStop+0xb6>
        uint8_t timer_count = runningTimers;
    cef8:	4b44      	ldr	r3, [pc, #272]	; (d00c <SwTimerStop+0x148>)
    cefa:	781b      	ldrb	r3, [r3, #0]
    cefc:	b2db      	uxtb	r3, r3
        prevIndex = currIndex = runningTimerQueueHead;
    cefe:	4a44      	ldr	r2, [pc, #272]	; (d010 <SwTimerStop+0x14c>)
    cf00:	6816      	ldr	r6, [r2, #0]
    cf02:	b2f1      	uxtb	r1, r6
        while (timer_count > 0)
    cf04:	2b00      	cmp	r3, #0
    cf06:	d038      	beq.n	cf7a <SwTimerStop+0xb6>
            if (timerId == currIndex)
    cf08:	428c      	cmp	r4, r1
    cf0a:	d00b      	beq.n	cf24 <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    cf0c:	4841      	ldr	r0, [pc, #260]	; (d014 <SwTimerStop+0x150>)
    cf0e:	010a      	lsls	r2, r1, #4
    cf10:	1882      	adds	r2, r0, r2
    cf12:	7b12      	ldrb	r2, [r2, #12]
            timer_count--;
    cf14:	3b01      	subs	r3, #1
    cf16:	b2db      	uxtb	r3, r3
        while (timer_count > 0)
    cf18:	2b00      	cmp	r3, #0
    cf1a:	d02e      	beq.n	cf7a <SwTimerStop+0xb6>
            if (timerId == currIndex)
    cf1c:	4294      	cmp	r4, r2
    cf1e:	d001      	beq.n	cf24 <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    cf20:	0011      	movs	r1, r2
    cf22:	e7f4      	b.n	cf0e <SwTimerStop+0x4a>
                if (timerId == runningTimerQueueHead)
    cf24:	42a6      	cmp	r6, r4
    cf26:	d01d      	beq.n	cf64 <SwTimerStop+0xa0>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    cf28:	4b3a      	ldr	r3, [pc, #232]	; (d014 <SwTimerStop+0x150>)
    cf2a:	0122      	lsls	r2, r4, #4
    cf2c:	189a      	adds	r2, r3, r2
    cf2e:	7b12      	ldrb	r2, [r2, #12]
    cf30:	0109      	lsls	r1, r1, #4
    cf32:	1859      	adds	r1, r3, r1
    cf34:	730a      	strb	r2, [r1, #12]
                swTimers[timerId].nextTimer  = SWTIMER_INVALID;
    cf36:	0122      	lsls	r2, r4, #4
    cf38:	4b36      	ldr	r3, [pc, #216]	; (d014 <SwTimerStop+0x150>)
    cf3a:	189b      	adds	r3, r3, r2
    cf3c:	22ff      	movs	r2, #255	; 0xff
    cf3e:	731a      	strb	r2, [r3, #12]
            runningTimers--;
    cf40:	4a32      	ldr	r2, [pc, #200]	; (d00c <SwTimerStop+0x148>)
    cf42:	7813      	ldrb	r3, [r2, #0]
    cf44:	3b01      	subs	r3, #1
    cf46:	b2db      	uxtb	r3, r3
    cf48:	7013      	strb	r3, [r2, #0]
        swTimers[timerId].timerCb = NULL;
    cf4a:	0124      	lsls	r4, r4, #4
    cf4c:	4b31      	ldr	r3, [pc, #196]	; (d014 <SwTimerStop+0x150>)
    cf4e:	191c      	adds	r4, r3, r4
    cf50:	2300      	movs	r3, #0
    cf52:	6063      	str	r3, [r4, #4]
        swTimers[timerId].paramCb = NULL;
    cf54:	60a3      	str	r3, [r4, #8]
        swTimers[timerId].loaded = false;
    cf56:	7363      	strb	r3, [r4, #13]
	if (cpu_irq_is_enabled_flags(flags))
    cf58:	33ff      	adds	r3, #255	; 0xff
        return LORAWAN_SUCCESS;
    cf5a:	2008      	movs	r0, #8
    cf5c:	422b      	tst	r3, r5
    cf5e:	d0b7      	beq.n	ced0 <SwTimerStop+0xc>
    cf60:	2301      	movs	r3, #1
    cf62:	e040      	b.n	cfe6 <SwTimerStop+0x122>
                    common_tc_compare_stop();
    cf64:	4b2c      	ldr	r3, [pc, #176]	; (d018 <SwTimerStop+0x154>)
    cf66:	4798      	blx	r3
                    runningTimerQueueHead = swTimers[timerId].nextTimer;
    cf68:	0122      	lsls	r2, r4, #4
    cf6a:	4b2a      	ldr	r3, [pc, #168]	; (d014 <SwTimerStop+0x150>)
    cf6c:	189b      	adds	r3, r3, r2
    cf6e:	7b18      	ldrb	r0, [r3, #12]
    cf70:	4b27      	ldr	r3, [pc, #156]	; (d010 <SwTimerStop+0x14c>)
    cf72:	6018      	str	r0, [r3, #0]
                    loadHwTimer(runningTimerQueueHead);
    cf74:	4b29      	ldr	r3, [pc, #164]	; (d01c <SwTimerStop+0x158>)
    cf76:	4798      	blx	r3
    cf78:	e7dd      	b.n	cf36 <SwTimerStop+0x72>
        prevIndex = currIndex = expiredTimerQueueHead;
    cf7a:	4b29      	ldr	r3, [pc, #164]	; (d020 <SwTimerStop+0x15c>)
    cf7c:	6818      	ldr	r0, [r3, #0]
    cf7e:	b2c2      	uxtb	r2, r0
        while (SWTIMER_INVALID != currIndex)
    cf80:	2aff      	cmp	r2, #255	; 0xff
    cf82:	d02c      	beq.n	cfde <SwTimerStop+0x11a>
            if (timerId == currIndex)
    cf84:	4294      	cmp	r4, r2
    cf86:	d009      	beq.n	cf9c <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    cf88:	4922      	ldr	r1, [pc, #136]	; (d014 <SwTimerStop+0x150>)
    cf8a:	0113      	lsls	r3, r2, #4
    cf8c:	18cb      	adds	r3, r1, r3
    cf8e:	7b1b      	ldrb	r3, [r3, #12]
        while (SWTIMER_INVALID != currIndex)
    cf90:	2bff      	cmp	r3, #255	; 0xff
    cf92:	d024      	beq.n	cfde <SwTimerStop+0x11a>
            if (timerId == currIndex)
    cf94:	429c      	cmp	r4, r3
    cf96:	d001      	beq.n	cf9c <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    cf98:	001a      	movs	r2, r3
    cf9a:	e7f6      	b.n	cf8a <SwTimerStop+0xc6>
                if (timerId == expiredTimerQueueHead)
    cf9c:	42a0      	cmp	r0, r4
    cf9e:	d00d      	beq.n	cfbc <SwTimerStop+0xf8>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    cfa0:	4b1c      	ldr	r3, [pc, #112]	; (d014 <SwTimerStop+0x150>)
    cfa2:	0121      	lsls	r1, r4, #4
    cfa4:	1859      	adds	r1, r3, r1
    cfa6:	7b09      	ldrb	r1, [r1, #12]
    cfa8:	0110      	lsls	r0, r2, #4
    cfaa:	181b      	adds	r3, r3, r0
    cfac:	7319      	strb	r1, [r3, #12]
                    if (timerId == expiredTimerQueueTail)
    cfae:	4b1d      	ldr	r3, [pc, #116]	; (d024 <SwTimerStop+0x160>)
    cfb0:	681b      	ldr	r3, [r3, #0]
    cfb2:	429c      	cmp	r4, r3
    cfb4:	d1c9      	bne.n	cf4a <SwTimerStop+0x86>
                        expiredTimerQueueTail = prevIndex;
    cfb6:	4b1b      	ldr	r3, [pc, #108]	; (d024 <SwTimerStop+0x160>)
    cfb8:	601a      	str	r2, [r3, #0]
    cfba:	e7c6      	b.n	cf4a <SwTimerStop+0x86>
                    if (expiredTimerQueueHead == expiredTimerQueueTail)
    cfbc:	4b19      	ldr	r3, [pc, #100]	; (d024 <SwTimerStop+0x160>)
    cfbe:	681b      	ldr	r3, [r3, #0]
    cfc0:	4298      	cmp	r0, r3
    cfc2:	d006      	beq.n	cfd2 <SwTimerStop+0x10e>
                        expiredTimerQueueHead = swTimers[expiredTimerQueueHead].nextTimer;
    cfc4:	0100      	lsls	r0, r0, #4
    cfc6:	4b13      	ldr	r3, [pc, #76]	; (d014 <SwTimerStop+0x150>)
    cfc8:	1818      	adds	r0, r3, r0
    cfca:	7b02      	ldrb	r2, [r0, #12]
    cfcc:	4b14      	ldr	r3, [pc, #80]	; (d020 <SwTimerStop+0x15c>)
    cfce:	601a      	str	r2, [r3, #0]
    cfd0:	e7bb      	b.n	cf4a <SwTimerStop+0x86>
                        expiredTimerQueueHead = expiredTimerQueueTail = SWTIMER_INVALID;
    cfd2:	23ff      	movs	r3, #255	; 0xff
    cfd4:	4a13      	ldr	r2, [pc, #76]	; (d024 <SwTimerStop+0x160>)
    cfd6:	6013      	str	r3, [r2, #0]
    cfd8:	4a11      	ldr	r2, [pc, #68]	; (d020 <SwTimerStop+0x15c>)
    cfda:	6013      	str	r3, [r2, #0]
    cfdc:	e7b5      	b.n	cf4a <SwTimerStop+0x86>
    cfde:	23ff      	movs	r3, #255	; 0xff
    cfe0:	422b      	tst	r3, r5
    cfe2:	d00a      	beq.n	cffa <SwTimerStop+0x136>
    cfe4:	2300      	movs	r3, #0
		cpu_irq_enable();
    cfe6:	2101      	movs	r1, #1
    cfe8:	4a06      	ldr	r2, [pc, #24]	; (d004 <SwTimerStop+0x140>)
    cfea:	7011      	strb	r1, [r2, #0]
    cfec:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    cff0:	b662      	cpsie	i
    if (timerStopReqStatus)
    cff2:	2b00      	cmp	r3, #0
    cff4:	d103      	bne.n	cffe <SwTimerStop+0x13a>
    return LORAWAN_INVALID_REQUEST;
    cff6:	2015      	movs	r0, #21
    cff8:	e76a      	b.n	ced0 <SwTimerStop+0xc>
    cffa:	2015      	movs	r0, #21
    cffc:	e768      	b.n	ced0 <SwTimerStop+0xc>
        return LORAWAN_SUCCESS;
    cffe:	2008      	movs	r0, #8
    d000:	e766      	b.n	ced0 <SwTimerStop+0xc>
    d002:	46c0      	nop			; (mov r8, r8)
    d004:	20000008 	.word	0x20000008
    d008:	0000ca29 	.word	0x0000ca29
    d00c:	20001e70 	.word	0x20001e70
    d010:	20001e6c 	.word	0x20001e6c
    d014:	20002be0 	.word	0x20002be0
    d018:	00012d71 	.word	0x00012d71
    d01c:	0000c991 	.word	0x0000c991
    d020:	20001e64 	.word	0x20001e64
    d024:	20001e68 	.word	0x20001e68

0000d028 <SwTimerRunRemainingTime>:
{
    d028:	b5f0      	push	{r4, r5, r6, r7, lr}
    d02a:	b083      	sub	sp, #12
    d02c:	0005      	movs	r5, r0
    void * timerCb = (void*)(swTimers[runningTimerQueueHead].timerCb);
    d02e:	4b0b      	ldr	r3, [pc, #44]	; (d05c <SwTimerRunRemainingTime+0x34>)
    d030:	681c      	ldr	r4, [r3, #0]
    d032:	0122      	lsls	r2, r4, #4
    d034:	4b0a      	ldr	r3, [pc, #40]	; (d060 <SwTimerRunRemainingTime+0x38>)
    d036:	189b      	adds	r3, r3, r2
    d038:	685e      	ldr	r6, [r3, #4]
    void *paramCb = swTimers[runningTimerQueueHead].paramCb;
    d03a:	689f      	ldr	r7, [r3, #8]
    uint8_t timerId = runningTimerQueueHead;
    d03c:	b2e4      	uxtb	r4, r4
    if (LORAWAN_SUCCESS == SwTimerStop(runningTimerQueueHead))
    d03e:	0020      	movs	r0, r4
    d040:	4b08      	ldr	r3, [pc, #32]	; (d064 <SwTimerRunRemainingTime+0x3c>)
    d042:	4798      	blx	r3
    d044:	2808      	cmp	r0, #8
    d046:	d001      	beq.n	d04c <SwTimerRunRemainingTime+0x24>
}
    d048:	b003      	add	sp, #12
    d04a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        SwTimerStart(timerId, offset, SW_TIMEOUT_RELATIVE, timerCb, paramCb);
    d04c:	9700      	str	r7, [sp, #0]
    d04e:	0033      	movs	r3, r6
    d050:	2200      	movs	r2, #0
    d052:	0029      	movs	r1, r5
    d054:	0020      	movs	r0, r4
    d056:	4c04      	ldr	r4, [pc, #16]	; (d068 <SwTimerRunRemainingTime+0x40>)
    d058:	47a0      	blx	r4
}
    d05a:	e7f5      	b.n	d048 <SwTimerRunRemainingTime+0x20>
    d05c:	20001e6c 	.word	0x20001e6c
    d060:	20002be0 	.word	0x20002be0
    d064:	0000cec5 	.word	0x0000cec5
    d068:	0000cbad 	.word	0x0000cbad

0000d06c <SystemTimerSync>:
/**************************************************************************//**
\brief Resumes the software timer by offseting it with given time
\param[in] timeToSync Amount of duration to offset from known system time
******************************************************************************/
void SystemTimerSync(uint64_t timeToSync)
{
    d06c:	b570      	push	{r4, r5, r6, lr}
    uint8_t timerId;
    uint16_t adjustOffset;

    sysTimeLastKnown += timeToSync;
    d06e:	4b22      	ldr	r3, [pc, #136]	; (d0f8 <SystemTimerSync+0x8c>)
    d070:	681c      	ldr	r4, [r3, #0]
    d072:	685d      	ldr	r5, [r3, #4]
    d074:	1900      	adds	r0, r0, r4
    d076:	4169      	adcs	r1, r5
    d078:	6018      	str	r0, [r3, #0]
    d07a:	6059      	str	r1, [r3, #4]

    /* 1. Update system time */
    sysTimeOvf = (uint32_t) (sysTimeLastKnown >> 32);
    d07c:	4b1f      	ldr	r3, [pc, #124]	; (d0fc <SystemTimerSync+0x90>)
    d07e:	6019      	str	r1, [r3, #0]
    sysTime = (uint16_t) ((sysTimeLastKnown >> SWTIMER_SYSTIME_SHIFTMASK) & 0xffff);
    d080:	0c02      	lsrs	r2, r0, #16
    d082:	4b1f      	ldr	r3, [pc, #124]	; (d100 <SystemTimerSync+0x94>)
    d084:	801a      	strh	r2, [r3, #0]

    /* 2. Adjust expiration of running timers */
    adjustOffset = (uint16_t) sysTimeLastKnown;
    d086:	b280      	uxth	r0, r0
    timerId = runningTimerQueueHead;
    d088:	4b1e      	ldr	r3, [pc, #120]	; (d104 <SystemTimerSync+0x98>)
    d08a:	781b      	ldrb	r3, [r3, #0]
    for (uint8_t index = 0; index < runningTimers; index++)
    d08c:	4a1e      	ldr	r2, [pc, #120]	; (d108 <SystemTimerSync+0x9c>)
    d08e:	7812      	ldrb	r2, [r2, #0]
    d090:	2a00      	cmp	r2, #0
    d092:	d012      	beq.n	d0ba <SystemTimerSync+0x4e>
    d094:	2200      	movs	r2, #0
    {
        if (SWTIMER_INVALID != timerId)
        {
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    d096:	4c1d      	ldr	r4, [pc, #116]	; (d10c <SystemTimerSync+0xa0>)
    for (uint8_t index = 0; index < runningTimers; index++)
    d098:	4d1b      	ldr	r5, [pc, #108]	; (d108 <SystemTimerSync+0x9c>)
    d09a:	e005      	b.n	d0a8 <SystemTimerSync+0x3c>
    d09c:	3201      	adds	r2, #1
    d09e:	b2d2      	uxtb	r2, r2
    d0a0:	7829      	ldrb	r1, [r5, #0]
    d0a2:	b2c9      	uxtb	r1, r1
    d0a4:	4291      	cmp	r1, r2
    d0a6:	d908      	bls.n	d0ba <SystemTimerSync+0x4e>
        if (SWTIMER_INVALID != timerId)
    d0a8:	2bff      	cmp	r3, #255	; 0xff
    d0aa:	d0f7      	beq.n	d09c <SystemTimerSync+0x30>
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    d0ac:	011b      	lsls	r3, r3, #4
    d0ae:	5919      	ldr	r1, [r3, r4]
    d0b0:	1a09      	subs	r1, r1, r0
    d0b2:	5119      	str	r1, [r3, r4]
            timerId = swTimers[timerId].nextTimer;
    d0b4:	18e3      	adds	r3, r4, r3
    d0b6:	7b1b      	ldrb	r3, [r3, #12]
    d0b8:	e7f0      	b.n	d09c <SystemTimerSync+0x30>
        }
    }

    /* 3. Start hardware timer */
    common_tc_init();
    d0ba:	4b15      	ldr	r3, [pc, #84]	; (d110 <SystemTimerSync+0xa4>)
    d0bc:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    d0be:	4815      	ldr	r0, [pc, #84]	; (d114 <SystemTimerSync+0xa8>)
    d0c0:	4b15      	ldr	r3, [pc, #84]	; (d118 <SystemTimerSync+0xac>)
    d0c2:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    d0c4:	4815      	ldr	r0, [pc, #84]	; (d11c <SystemTimerSync+0xb0>)
    d0c6:	4b16      	ldr	r3, [pc, #88]	; (d120 <SystemTimerSync+0xb4>)
    d0c8:	4798      	blx	r3

    /* 4. Resume timer queue operations */
    if (runningTimers && (SWTIMER_INVALID != runningTimerQueueHead))
    d0ca:	4b0f      	ldr	r3, [pc, #60]	; (d108 <SystemTimerSync+0x9c>)
    d0cc:	781b      	ldrb	r3, [r3, #0]
    d0ce:	2b00      	cmp	r3, #0
    d0d0:	d009      	beq.n	d0e6 <SystemTimerSync+0x7a>
    d0d2:	4b0c      	ldr	r3, [pc, #48]	; (d104 <SystemTimerSync+0x98>)
    d0d4:	681b      	ldr	r3, [r3, #0]
    d0d6:	2bff      	cmp	r3, #255	; 0xff
    d0d8:	d005      	beq.n	d0e6 <SystemTimerSync+0x7a>
    {
        uint32_t remainingTime = SwTimerNextExpiryDuration();
    d0da:	4b12      	ldr	r3, [pc, #72]	; (d124 <SystemTimerSync+0xb8>)
    d0dc:	4798      	blx	r3

        if (SWTIMER_MIN_TIMEOUT > remainingTime)
    d0de:	28fe      	cmp	r0, #254	; 0xfe
    d0e0:	d902      	bls.n	d0e8 <SystemTimerSync+0x7c>
        else
        {
            /*
            * There is some time left in head timer, so restart it.
            */
            SwTimerRunRemainingTime(remainingTime);
    d0e2:	4b11      	ldr	r3, [pc, #68]	; (d128 <SystemTimerSync+0xbc>)
    d0e4:	4798      	blx	r3
        }
    }
}
    d0e6:	bd70      	pop	{r4, r5, r6, pc}
            isTimerTriggered = true;
    d0e8:	2201      	movs	r2, #1
    d0ea:	4b10      	ldr	r3, [pc, #64]	; (d12c <SystemTimerSync+0xc0>)
    d0ec:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    d0ee:	2001      	movs	r0, #1
    d0f0:	4b0f      	ldr	r3, [pc, #60]	; (d130 <SystemTimerSync+0xc4>)
    d0f2:	4798      	blx	r3
    d0f4:	e7f7      	b.n	d0e6 <SystemTimerSync+0x7a>
    d0f6:	46c0      	nop			; (mov r8, r8)
    d0f8:	20001e78 	.word	0x20001e78
    d0fc:	20002d74 	.word	0x20002d74
    d100:	20002d70 	.word	0x20002d70
    d104:	20001e6c 	.word	0x20001e6c
    d108:	20001e70 	.word	0x20001e70
    d10c:	20002be0 	.word	0x20002be0
    d110:	00012e05 	.word	0x00012e05
    d114:	0000c8d1 	.word	0x0000c8d1
    d118:	00012e89 	.word	0x00012e89
    d11c:	0000c8a9 	.word	0x0000c8a9
    d120:	00012e95 	.word	0x00012e95
    d124:	0000cda9 	.word	0x0000cda9
    d128:	0000d029 	.word	0x0000d029
    d12c:	20002d72 	.word	0x20002d72
    d130:	0000d1c5 	.word	0x0000d1c5

0000d134 <SwTimerWriteTimestamp>:
\param[in] index Index of the system timestamp
\param[in] *timestamp Pointer-to-timestamp to be stored in the given index
******************************************************************************/
void SwTimerWriteTimestamp(uint8_t index, SwTimestamp_t *timestamp)
{
    swTimestamp[index] = *timestamp;
    d134:	680a      	ldr	r2, [r1, #0]
    d136:	684b      	ldr	r3, [r1, #4]
    d138:	00c1      	lsls	r1, r0, #3
    d13a:	4802      	ldr	r0, [pc, #8]	; (d144 <SwTimerWriteTimestamp+0x10>)
    d13c:	1840      	adds	r0, r0, r1
    d13e:	6002      	str	r2, [r0, #0]
    d140:	6043      	str	r3, [r0, #4]
}
    d142:	4770      	bx	lr
    d144:	20002bd0 	.word	0x20002bd0

0000d148 <Stack_Init>:
/**************************************************************************//**
\brief Initializes the system. This is the first stack function to be called
       by the application in the main() function.
******************************************************************************/
void Stack_Init(void)
{
    d148:	b510      	push	{r4, lr}
	
	/* LORAWAN_Init() should have been called form here, 
	   but parser application has a round-about way to call it now */
 
	/* Post application task to initiate the execution from there */
	SYSTEM_PostTask(APP_TASK_ID);
    d14a:	2010      	movs	r0, #16
    d14c:	4b01      	ldr	r3, [pc, #4]	; (d154 <Stack_Init+0xc>)
    d14e:	4798      	blx	r3
}
    d150:	bd10      	pop	{r4, pc}
    d152:	46c0      	nop			; (mov r8, r8)
    d154:	0000d1c5 	.word	0x0000d1c5

0000d158 <SYSTEM_RunTasks>:
/************************************************************************/
/*********************************************************************//**
\brief System tasks execution entry point
*************************************************************************/
void SYSTEM_RunTasks(void)
{
    d158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ((1 << SYSTEM_TASK_ID_COUNT) > sysTaskFlag)
    d15a:	4b16      	ldr	r3, [pc, #88]	; (d1b4 <SYSTEM_RunTasks+0x5c>)
    d15c:	881b      	ldrh	r3, [r3, #0]
    d15e:	b29b      	uxth	r3, r3
    d160:	2b1f      	cmp	r3, #31
    d162:	d922      	bls.n	d1aa <SYSTEM_RunTasks+0x52>
    d164:	e7fe      	b.n	d164 <SYSTEM_RunTasks+0xc>
    { /* Only valid task bits are set */
        while (sysTaskFlag)
        { /* One or more task are pending to execute */
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
            {
                if ((1 << taskId) & sysTaskFlag)
    d166:	2500      	movs	r5, #0
                    /*
                    * Reset the task bit since it is to be executed now.
                    * It is done inside atomic section to avoid any interrupt context
                    * corrupting the bits.
                    */
                    ATOMIC_SECTION_ENTER
    d168:	4b13      	ldr	r3, [pc, #76]	; (d1b8 <SYSTEM_RunTasks+0x60>)
    d16a:	4798      	blx	r3
                    sysTaskFlag &= ~(1 << taskId);
    d16c:	4911      	ldr	r1, [pc, #68]	; (d1b4 <SYSTEM_RunTasks+0x5c>)
    d16e:	880b      	ldrh	r3, [r1, #0]
    d170:	2201      	movs	r2, #1
    d172:	40aa      	lsls	r2, r5
    d174:	4393      	bics	r3, r2
    d176:	800b      	strh	r3, [r1, #0]
                    ATOMIC_SECTION_EXIT
    d178:	4b10      	ldr	r3, [pc, #64]	; (d1bc <SYSTEM_RunTasks+0x64>)
    d17a:	4798      	blx	r3

                    /* Return value is not used now, can be used later */
                    taskHandlers[taskId]();
    d17c:	00ad      	lsls	r5, r5, #2
    d17e:	4b10      	ldr	r3, [pc, #64]	; (d1c0 <SYSTEM_RunTasks+0x68>)
    d180:	58eb      	ldr	r3, [r5, r3]
    d182:	4798      	blx	r3
                if ((1 << taskId) & sysTaskFlag)
    d184:	2101      	movs	r1, #1
        while (sysTaskFlag)
    d186:	883b      	ldrh	r3, [r7, #0]
    d188:	b29b      	uxth	r3, r3
    d18a:	2b00      	cmp	r3, #0
    d18c:	d011      	beq.n	d1b2 <SYSTEM_RunTasks+0x5a>
                if ((1 << taskId) & sysTaskFlag)
    d18e:	8823      	ldrh	r3, [r4, #0]
    d190:	420b      	tst	r3, r1
    d192:	d1e8      	bne.n	d166 <SYSTEM_RunTasks+0xe>
    d194:	2201      	movs	r2, #1
    d196:	8833      	ldrh	r3, [r6, #0]
    d198:	b29b      	uxth	r3, r3
    d19a:	0015      	movs	r5, r2
    d19c:	4113      	asrs	r3, r2
    d19e:	4219      	tst	r1, r3
    d1a0:	d1e2      	bne.n	d168 <SYSTEM_RunTasks+0x10>
    d1a2:	3201      	adds	r2, #1
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
    d1a4:	2a05      	cmp	r2, #5
    d1a6:	d1f6      	bne.n	d196 <SYSTEM_RunTasks+0x3e>
    d1a8:	e7ed      	b.n	d186 <SYSTEM_RunTasks+0x2e>
        while (sysTaskFlag)
    d1aa:	4f02      	ldr	r7, [pc, #8]	; (d1b4 <SYSTEM_RunTasks+0x5c>)
                if ((1 << taskId) & sysTaskFlag)
    d1ac:	003c      	movs	r4, r7
    d1ae:	003e      	movs	r6, r7
    d1b0:	e7e8      	b.n	d184 <SYSTEM_RunTasks+0x2c>
        * Can happen only due to corruption, so halt
        * TODO : replace this with assert implementation
        */
        while(1);
    }
}
    d1b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d1b4:	20001e80 	.word	0x20001e80
    d1b8:	0000c179 	.word	0x0000c179
    d1bc:	0000c185 	.word	0x0000c185
    d1c0:	00018284 	.word	0x00018284

0000d1c4 <SYSTEM_PostTask>:

\param[in] task - ID of the posted task.
*************************************************************************/

void SYSTEM_PostTask(SYSTEM_Task_t task)
{
    d1c4:	b510      	push	{r4, lr}
    d1c6:	0004      	movs	r4, r0
    ATOMIC_SECTION_ENTER
    d1c8:	4b04      	ldr	r3, [pc, #16]	; (d1dc <SYSTEM_PostTask+0x18>)
    d1ca:	4798      	blx	r3
    sysTaskFlag |= task;
    d1cc:	4b04      	ldr	r3, [pc, #16]	; (d1e0 <SYSTEM_PostTask+0x1c>)
    d1ce:	8818      	ldrh	r0, [r3, #0]
    d1d0:	4320      	orrs	r0, r4
    d1d2:	8018      	strh	r0, [r3, #0]
    ATOMIC_SECTION_EXIT
    d1d4:	4b03      	ldr	r3, [pc, #12]	; (d1e4 <SYSTEM_PostTask+0x20>)
    d1d6:	4798      	blx	r3
}
    d1d8:	bd10      	pop	{r4, pc}
    d1da:	46c0      	nop			; (mov r8, r8)
    d1dc:	0000c179 	.word	0x0000c179
    d1e0:	20001e80 	.word	0x20001e80
    d1e4:	0000c185 	.word	0x0000c185

0000d1e8 <Radio_WriteMode>:
\param newModulation	- Sets the modulation.
\param blocking			- Sets if its blocking call or not.
\return					- none.
*************************************************************************/
void Radio_WriteMode(RadioMode_t newMode, RadioModulation_t newModulation, uint8_t blocking)
{
    d1e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d1ea:	46d6      	mov	lr, sl
    d1ec:	464f      	mov	r7, r9
    d1ee:	b580      	push	{r7, lr}
    d1f0:	b083      	sub	sp, #12
    d1f2:	9201      	str	r2, [sp, #4]
    uint8_t opMode;
    uint8_t dioMapping;
    RadioModulation_t currentModulation;
    RadioMode_t currentMode;

    if ((MODULATION_FSK == newModulation) &&
    d1f4:	2900      	cmp	r1, #0
    d1f6:	d102      	bne.n	d1fe <Radio_WriteMode+0x16>
    d1f8:	1f83      	subs	r3, r0, #6
    d1fa:	2b01      	cmp	r3, #1
    d1fc:	d92a      	bls.n	d254 <Radio_WriteMode+0x6c>
        // Unavailable modes for FSK. Just return.
        return;
    }

    // Sanity enforcement on parameters
    newMode &= 0x07;
    d1fe:	2307      	movs	r3, #7
    d200:	4699      	mov	r9, r3
    d202:	001c      	movs	r4, r3
    d204:	4004      	ands	r4, r0
    newModulation &= 0x01;
    d206:	2601      	movs	r6, #1
    d208:	400e      	ands	r6, r1

    opMode = RADIO_RegisterRead(REG_OPMODE);
    d20a:	2001      	movs	r0, #1
    d20c:	4b2b      	ldr	r3, [pc, #172]	; (d2bc <Radio_WriteMode+0xd4>)
    d20e:	4798      	blx	r3
    d210:	0005      	movs	r5, r0
    d212:	0007      	movs	r7, r0

    if ((opMode & 0x80) != 0)
    d214:	b243      	sxtb	r3, r0
    d216:	469a      	mov	sl, r3
    else
    {
        currentModulation = MODULATION_FSK;
    }

    currentMode = opMode & 0x07;
    d218:	464b      	mov	r3, r9
    d21a:	4003      	ands	r3, r0

    // If we need to change modulation, we need to do this in sleep mode.
    // Otherwise, we can go straight to changing the current mode to newMode.
    if (newModulation != currentModulation)
    d21c:	4652      	mov	r2, sl
    d21e:	0fd2      	lsrs	r2, r2, #31
    d220:	4296      	cmp	r6, r2
    d222:	d00a      	beq.n	d23a <Radio_WriteMode+0x52>
    {
        // Go to sleep
        if (MODE_SLEEP != currentMode)
    d224:	2b00      	cmp	r3, #0
    d226:	d11a      	bne.n	d25e <Radio_WriteMode+0x76>
            // Clear mode bits, effectively going to sleep
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
            currentMode = MODE_SLEEP;
        }
        // Change modulation
        if (MODULATION_FSK == newModulation)
    d228:	2e00      	cmp	r6, #0
    d22a:	d11e      	bne.n	d26a <Radio_WriteMode+0x82>
        {
            // Clear MSB and sleep bits to make it stay in sleep
            opMode = opMode & (~0x87);
    d22c:	2778      	movs	r7, #120	; 0x78
    d22e:	402f      	ands	r7, r5
        else
        {
            // LoRa mode. Set MSB and clear sleep bits to make it stay in sleep
            opMode = 0x80 | (opMode & (~0x87));
        }
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    d230:	0039      	movs	r1, r7
    d232:	2001      	movs	r0, #1
    d234:	4b22      	ldr	r3, [pc, #136]	; (d2c0 <Radio_WriteMode+0xd8>)
    d236:	4798      	blx	r3
    d238:	2300      	movs	r3, #0

    // From here on currentModulation is no longer current, we will use
    // newModulation instead as it reflects the chip configuration.
    // opMode reflects the actual configuration of the chip.

    if (newMode != currentMode)
    d23a:	42a3      	cmp	r3, r4
    d23c:	d00a      	beq.n	d254 <Radio_WriteMode+0x6c>
    {
        // If we need to block until the mode switch is ready, configure the
        // DIO5 pin to relay this information.
        if ((MODE_SLEEP != newMode) && (1 == blocking))
    d23e:	2c00      	cmp	r4, #0
    d240:	d030      	beq.n	d2a4 <Radio_WriteMode+0xbc>
    d242:	9b01      	ldr	r3, [sp, #4]
    d244:	2b01      	cmp	r3, #1
    d246:	d016      	beq.n	d276 <Radio_WriteMode+0x8e>
            }
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
        }

        // Do the actual mode switch.
        opMode &= ~0x07;                // Clear old mode bits
    d248:	21f8      	movs	r1, #248	; 0xf8
    d24a:	4039      	ands	r1, r7
        opMode |= newMode;              // Set new mode bits
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    d24c:	4321      	orrs	r1, r4
    d24e:	2001      	movs	r0, #1
    d250:	4b1b      	ldr	r3, [pc, #108]	; (d2c0 <Radio_WriteMode+0xd8>)
    d252:	4798      	blx	r3
                SystemBlockingWaitMs(1);
            }
        }
    }
#endif
}
    d254:	b003      	add	sp, #12
    d256:	bc0c      	pop	{r2, r3}
    d258:	4691      	mov	r9, r2
    d25a:	469a      	mov	sl, r3
    d25c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
    d25e:	21f8      	movs	r1, #248	; 0xf8
    d260:	4001      	ands	r1, r0
    d262:	2001      	movs	r0, #1
    d264:	4b16      	ldr	r3, [pc, #88]	; (d2c0 <Radio_WriteMode+0xd8>)
    d266:	4798      	blx	r3
    d268:	e7de      	b.n	d228 <Radio_WriteMode+0x40>
            opMode = 0x80 | (opMode & (~0x87));
    d26a:	2778      	movs	r7, #120	; 0x78
    d26c:	4653      	mov	r3, sl
    d26e:	401f      	ands	r7, r3
    d270:	2180      	movs	r1, #128	; 0x80
    d272:	430f      	orrs	r7, r1
    d274:	e7dc      	b.n	d230 <Radio_WriteMode+0x48>
            dioMapping = RADIO_RegisterRead(REG_DIOMAPPING2);
    d276:	2041      	movs	r0, #65	; 0x41
    d278:	4b10      	ldr	r3, [pc, #64]	; (d2bc <Radio_WriteMode+0xd4>)
    d27a:	4798      	blx	r3
            if (MODULATION_FSK == newModulation)
    d27c:	2e00      	cmp	r6, #0
    d27e:	d10e      	bne.n	d29e <Radio_WriteMode+0xb6>
                dioMapping |= 0x30;     // DIO5 = 11 means ModeReady in FSK mode
    d280:	2130      	movs	r1, #48	; 0x30
    d282:	4301      	orrs	r1, r0
    d284:	b2c9      	uxtb	r1, r1
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
    d286:	2041      	movs	r0, #65	; 0x41
    d288:	4d0d      	ldr	r5, [pc, #52]	; (d2c0 <Radio_WriteMode+0xd8>)
    d28a:	47a8      	blx	r5
        opMode &= ~0x07;                // Clear old mode bits
    d28c:	21f8      	movs	r1, #248	; 0xf8
    d28e:	4039      	ands	r1, r7
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    d290:	4321      	orrs	r1, r4
    d292:	2001      	movs	r0, #1
    d294:	47a8      	blx	r5
			   delay_ms(1);
    d296:	2001      	movs	r0, #1
    d298:	4b0a      	ldr	r3, [pc, #40]	; (d2c4 <Radio_WriteMode+0xdc>)
    d29a:	4798      	blx	r3
    d29c:	e7da      	b.n	d254 <Radio_WriteMode+0x6c>
                dioMapping &= ~0x30;    // DIO5 = 00 means ModeReady in LoRa mode
    d29e:	21cf      	movs	r1, #207	; 0xcf
    d2a0:	4001      	ands	r1, r0
    d2a2:	e7f0      	b.n	d286 <Radio_WriteMode+0x9e>
        opMode &= ~0x07;                // Clear old mode bits
    d2a4:	21f8      	movs	r1, #248	; 0xf8
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    d2a6:	4039      	ands	r1, r7
    d2a8:	2001      	movs	r0, #1
    d2aa:	4b05      	ldr	r3, [pc, #20]	; (d2c0 <Radio_WriteMode+0xd8>)
    d2ac:	4798      	blx	r3
        if (1 == blocking)
    d2ae:	9b01      	ldr	r3, [sp, #4]
    d2b0:	2b01      	cmp	r3, #1
    d2b2:	d1cf      	bne.n	d254 <Radio_WriteMode+0x6c>
                SystemBlockingWaitMs(1);
    d2b4:	2001      	movs	r0, #1
    d2b6:	4b04      	ldr	r3, [pc, #16]	; (d2c8 <Radio_WriteMode+0xe0>)
    d2b8:	4798      	blx	r3
    d2ba:	e7cb      	b.n	d254 <Radio_WriteMode+0x6c>
    d2bc:	0000bfe9 	.word	0x0000bfe9
    d2c0:	0000bfc1 	.word	0x0000bfc1
    d2c4:	000044cd 	.word	0x000044cd
    d2c8:	0000c15d 	.word	0x0000c15d

0000d2cc <RADIO_FHSSChangeChannel>:

\param		- none	
\return		- none.
*************************************************************************/
void RADIO_FHSSChangeChannel(void)
{
    d2cc:	b500      	push	{lr}
    d2ce:	b083      	sub	sp, #12
    uint32_t freq;
    RADIO_RegisterRead(REG_LORA_IRQFLAGS);
    d2d0:	2012      	movs	r0, #18
    d2d2:	4b0d      	ldr	r3, [pc, #52]	; (d308 <RADIO_FHSSChangeChannel+0x3c>)
    d2d4:	4798      	blx	r3

    if (radioConfiguration.frequencyHopPeriod)
    d2d6:	4b0d      	ldr	r3, [pc, #52]	; (d30c <RADIO_FHSSChangeChannel+0x40>)
    d2d8:	8adb      	ldrh	r3, [r3, #22]
    d2da:	2b00      	cmp	r3, #0
    d2dc:	d007      	beq.n	d2ee <RADIO_FHSSChangeChannel+0x22>
    {
        if ((radioConfiguration.radioCallback) &&
    d2de:	4b0b      	ldr	r3, [pc, #44]	; (d30c <RADIO_FHSSChangeChannel+0x40>)
    d2e0:	691b      	ldr	r3, [r3, #16]
    d2e2:	2b00      	cmp	r3, #0
    d2e4:	d003      	beq.n	d2ee <RADIO_FHSSChangeChannel+0x22>
            (1 == radioCallbackMask.BitMask.radioFhssfreqCallback))
    d2e6:	4a0a      	ldr	r2, [pc, #40]	; (d310 <RADIO_FHSSChangeChannel+0x44>)
    d2e8:	7812      	ldrb	r2, [r2, #0]
        if ((radioConfiguration.radioCallback) &&
    d2ea:	0692      	lsls	r2, r2, #26
    d2ec:	d405      	bmi.n	d2fa <RADIO_FHSSChangeChannel+0x2e>
            Radio_WriteFrequency(freq);
        }
    }

    // Clear FHSSChangeChannel interrupt
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 1 << SHIFT1);
    d2ee:	2102      	movs	r1, #2
    d2f0:	2012      	movs	r0, #18
    d2f2:	4b08      	ldr	r3, [pc, #32]	; (d314 <RADIO_FHSSChangeChannel+0x48>)
    d2f4:	4798      	blx	r3
}
    d2f6:	b003      	add	sp, #12
    d2f8:	bd00      	pop	{pc}
            radioConfiguration.radioCallback(RADIO_FHSS_NEXT_FREQ_CALLBACK, (void *)&freq);
    d2fa:	a901      	add	r1, sp, #4
    d2fc:	2020      	movs	r0, #32
    d2fe:	4798      	blx	r3
            Radio_WriteFrequency(freq);
    d300:	9801      	ldr	r0, [sp, #4]
    d302:	4b05      	ldr	r3, [pc, #20]	; (d318 <RADIO_FHSSChangeChannel+0x4c>)
    d304:	4798      	blx	r3
    d306:	e7f2      	b.n	d2ee <RADIO_FHSSChangeChannel+0x22>
    d308:	0000bfe9 	.word	0x0000bfe9
    d30c:	20002d78 	.word	0x20002d78
    d310:	20003046 	.word	0x20003046
    d314:	0000bfc1 	.word	0x0000bfc1
    d318:	0000df01 	.word	0x0000df01

0000d31c <RADIO_ReadRandom>:

\param		- none	
\return		- returns the random number generated.
*************************************************************************/
uint16_t RADIO_ReadRandom(void)
{
    d31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
    uint16_t retVal;
    retVal = 0;
	
	// Turn on the RF switch.
	Radio_EnableRfControl(RADIO_RFCTRL_RX); 
    d31e:	2000      	movs	r0, #0
    d320:	4b1a      	ldr	r3, [pc, #104]	; (d38c <RADIO_ReadRandom+0x70>)
    d322:	4798      	blx	r3
	// Enabling Radio Clock
	Radio_SetClockInput();
    d324:	4b1a      	ldr	r3, [pc, #104]	; (d390 <RADIO_ReadRandom+0x74>)
    d326:	4798      	blx	r3
	
    // Mask all interrupts, do many measurements of RSSI
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    d328:	2201      	movs	r2, #1
    d32a:	2101      	movs	r1, #1
    d32c:	2000      	movs	r0, #0
    d32e:	4c19      	ldr	r4, [pc, #100]	; (d394 <RADIO_ReadRandom+0x78>)
    d330:	47a0      	blx	r4
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0xFF);
    d332:	21ff      	movs	r1, #255	; 0xff
    d334:	2011      	movs	r0, #17
    d336:	4b18      	ldr	r3, [pc, #96]	; (d398 <RADIO_ReadRandom+0x7c>)
    d338:	4798      	blx	r3
    Radio_WriteMode(MODE_RXCONT, MODULATION_LORA, 1);
    d33a:	2201      	movs	r2, #1
    d33c:	2101      	movs	r1, #1
    d33e:	2005      	movs	r0, #5
    d340:	47a0      	blx	r4
    d342:	2410      	movs	r4, #16
    retVal = 0;
    d344:	2500      	movs	r5, #0
    for (i = 0; i < 16; i++)
    {
        SystemBlockingWaitMs(1);
    d346:	4f15      	ldr	r7, [pc, #84]	; (d39c <RADIO_ReadRandom+0x80>)
        retVal <<= SHIFT1;
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    d348:	4e15      	ldr	r6, [pc, #84]	; (d3a0 <RADIO_ReadRandom+0x84>)
        SystemBlockingWaitMs(1);
    d34a:	2001      	movs	r0, #1
    d34c:	47b8      	blx	r7
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    d34e:	202c      	movs	r0, #44	; 0x2c
    d350:	47b0      	blx	r6
    d352:	2301      	movs	r3, #1
    d354:	4018      	ands	r0, r3
        retVal <<= SHIFT1;
    d356:	006d      	lsls	r5, r5, #1
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    d358:	4305      	orrs	r5, r0
    d35a:	b2ad      	uxth	r5, r5
    d35c:	3c01      	subs	r4, #1
    d35e:	b2e4      	uxtb	r4, r4
    for (i = 0; i < 16; i++)
    d360:	2c00      	cmp	r4, #0
    d362:	d1f2      	bne.n	d34a <RADIO_ReadRandom+0x2e>
    }
	
	// Turning off the RF switch now.
	Radio_DisableRfControl(RADIO_RFCTRL_RX);
    d364:	2000      	movs	r0, #0
    d366:	4b0f      	ldr	r3, [pc, #60]	; (d3a4 <RADIO_ReadRandom+0x88>)
    d368:	4798      	blx	r3
	
    // Return radio to sleep
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    d36a:	2201      	movs	r2, #1
    d36c:	2101      	movs	r1, #1
    d36e:	2000      	movs	r0, #0
    d370:	4b08      	ldr	r3, [pc, #32]	; (d394 <RADIO_ReadRandom+0x78>)
    d372:	4798      	blx	r3
    // Clear interrupts in case any have been generated
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 0xFF);
    d374:	21ff      	movs	r1, #255	; 0xff
    d376:	2012      	movs	r0, #18
    d378:	4c07      	ldr	r4, [pc, #28]	; (d398 <RADIO_ReadRandom+0x7c>)
    d37a:	47a0      	blx	r4
    // Unmask all interrupts
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0x00);
    d37c:	2100      	movs	r1, #0
    d37e:	2011      	movs	r0, #17
    d380:	47a0      	blx	r4
	// Disabling Radio Clock save power
	Radio_ResetClockInput();
    d382:	4b09      	ldr	r3, [pc, #36]	; (d3a8 <RADIO_ReadRandom+0x8c>)
    d384:	4798      	blx	r3
	
    return retVal;
}
    d386:	0028      	movs	r0, r5
    d388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d38a:	46c0      	nop			; (mov r8, r8)
    d38c:	0000e7bd 	.word	0x0000e7bd
    d390:	0000eb79 	.word	0x0000eb79
    d394:	0000d1e9 	.word	0x0000d1e9
    d398:	0000bfc1 	.word	0x0000bfc1
    d39c:	0000c15d 	.word	0x0000c15d
    d3a0:	0000bfe9 	.word	0x0000bfe9
    d3a4:	0000e7f1 	.word	0x0000e7f1
    d3a8:	0000eca9 	.word	0x0000eca9

0000d3ac <Radio_ReadRssi>:

\param rssi	- The RSSI measured in the channel.
\return		- ERR_NONE. Other types are not used now.
*************************************************************************/
RadioError_t Radio_ReadRssi(int16_t *rssi)
{
    d3ac:	b510      	push	{r4, lr}
    d3ae:	0004      	movs	r4, r0
	if (MODULATION_LORA == radioConfiguration.modulation)
    d3b0:	2334      	movs	r3, #52	; 0x34
    d3b2:	4a11      	ldr	r2, [pc, #68]	; (d3f8 <Radio_ReadRssi+0x4c>)
    d3b4:	5cd3      	ldrb	r3, [r2, r3]
    d3b6:	2b01      	cmp	r3, #1
    d3b8:	d003      	beq.n	d3c2 <Radio_ReadRssi+0x16>
		*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
	#endif // UT
	}
	else
	{
		return ERR_UNSUPPORTED_ATTR;
    d3ba:	2006      	movs	r0, #6
	else if (MODULATION_FSK == radioConfiguration.modulation)
    d3bc:	2b00      	cmp	r3, #0
    d3be:	d012      	beq.n	d3e6 <Radio_ReadRssi+0x3a>
	}
	return ERR_NONE;
}
    d3c0:	bd10      	pop	{r4, pc}
		if (radioConfiguration.frequency >= HF_FREQ_HZ)
    d3c2:	4b0e      	ldr	r3, [pc, #56]	; (d3fc <Radio_ReadRssi+0x50>)
    d3c4:	6812      	ldr	r2, [r2, #0]
    d3c6:	429a      	cmp	r2, r3
    d3c8:	d906      	bls.n	d3d8 <Radio_ReadRssi+0x2c>
			*rssi = RSSI_HF_OFFSET + RADIO_RegisterRead(REG_LORA_PKTRSSIVALUE);
    d3ca:	201a      	movs	r0, #26
    d3cc:	4b0c      	ldr	r3, [pc, #48]	; (d400 <Radio_ReadRssi+0x54>)
    d3ce:	4798      	blx	r3
    d3d0:	389d      	subs	r0, #157	; 0x9d
    d3d2:	8020      	strh	r0, [r4, #0]
	return ERR_NONE;
    d3d4:	2000      	movs	r0, #0
    d3d6:	e7f3      	b.n	d3c0 <Radio_ReadRssi+0x14>
			*rssi = RSSI_LF_OFFSET + RADIO_RegisterRead(REG_LORA_PKTRSSIVALUE);
    d3d8:	201a      	movs	r0, #26
    d3da:	4b09      	ldr	r3, [pc, #36]	; (d400 <Radio_ReadRssi+0x54>)
    d3dc:	4798      	blx	r3
    d3de:	38a4      	subs	r0, #164	; 0xa4
    d3e0:	8020      	strh	r0, [r4, #0]
	return ERR_NONE;
    d3e2:	2000      	movs	r0, #0
    d3e4:	e7ec      	b.n	d3c0 <Radio_ReadRssi+0x14>
		*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
    d3e6:	300b      	adds	r0, #11
    d3e8:	4b05      	ldr	r3, [pc, #20]	; (d400 <Radio_ReadRssi+0x54>)
    d3ea:	4798      	blx	r3
    d3ec:	0840      	lsrs	r0, r0, #1
    d3ee:	b2c3      	uxtb	r3, r0
    d3f0:	425b      	negs	r3, r3
    d3f2:	8023      	strh	r3, [r4, #0]
	return ERR_NONE;
    d3f4:	2000      	movs	r0, #0
    d3f6:	e7e3      	b.n	d3c0 <Radio_ReadRssi+0x14>
    d3f8:	20002d78 	.word	0x20002d78
    d3fc:	3361137f 	.word	0x3361137f
    d400:	0000bfe9 	.word	0x0000bfe9

0000d404 <Radio_ReadFSKRssi>:

\param rssi	- The RSSI measured in the channel.
\return		- ERR_NONE. Other types are not used now.
*************************************************************************/
RadioError_t Radio_ReadFSKRssi(int16_t *rssi)
{	
    d404:	b510      	push	{r4, lr}
    d406:	0004      	movs	r4, r0
#ifdef UT
	*rssi = testRssi;
#else // UT
	*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
    d408:	2011      	movs	r0, #17
    d40a:	4b04      	ldr	r3, [pc, #16]	; (d41c <Radio_ReadFSKRssi+0x18>)
    d40c:	4798      	blx	r3
    d40e:	0840      	lsrs	r0, r0, #1
    d410:	b2c0      	uxtb	r0, r0
    d412:	4240      	negs	r0, r0
    d414:	8020      	strh	r0, [r4, #0]
#endif // UT
	
	return ERR_NONE;
}
    d416:	2000      	movs	r0, #0
    d418:	bd10      	pop	{r4, pc}
    d41a:	46c0      	nop			; (mov r8, r8)
    d41c:	0000bfe9 	.word	0x0000bfe9

0000d420 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    d420:	b510      	push	{r4, lr}
	tmr_cca_callback();
    d422:	4b01      	ldr	r3, [pc, #4]	; (d428 <tc_cca_callback+0x8>)
    d424:	4798      	blx	r3
}
    d426:	bd10      	pop	{r4, pc}
    d428:	00012e6d 	.word	0x00012e6d

0000d42c <tc_ovf_callback>:
{
    d42c:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    d42e:	4b01      	ldr	r3, [pc, #4]	; (d434 <tc_ovf_callback+0x8>)
    d430:	4798      	blx	r3
}
    d432:	bd10      	pop	{r4, pc}
    d434:	00012e25 	.word	0x00012e25

0000d438 <tmr_read_count>:
{
    d438:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    d43a:	4802      	ldr	r0, [pc, #8]	; (d444 <tmr_read_count+0xc>)
    d43c:	4b02      	ldr	r3, [pc, #8]	; (d448 <tmr_read_count+0x10>)
    d43e:	4798      	blx	r3
    d440:	b280      	uxth	r0, r0
}
    d442:	bd10      	pop	{r4, pc}
    d444:	20002e0c 	.word	0x20002e0c
    d448:	00006ebd 	.word	0x00006ebd

0000d44c <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    d44c:	4b03      	ldr	r3, [pc, #12]	; (d45c <tmr_disable_cc_interrupt+0x10>)
    d44e:	2110      	movs	r1, #16
    d450:	681a      	ldr	r2, [r3, #0]
    d452:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    d454:	7e5a      	ldrb	r2, [r3, #25]
    d456:	438a      	bics	r2, r1
    d458:	765a      	strb	r2, [r3, #25]
}
    d45a:	4770      	bx	lr
    d45c:	20002e0c 	.word	0x20002e0c

0000d460 <tmr_enable_cc_interrupt>:
{
    d460:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    d462:	4c0a      	ldr	r4, [pc, #40]	; (d48c <tmr_enable_cc_interrupt+0x2c>)
    d464:	6820      	ldr	r0, [r4, #0]
    d466:	4b0a      	ldr	r3, [pc, #40]	; (d490 <tmr_enable_cc_interrupt+0x30>)
    d468:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    d46a:	4b0a      	ldr	r3, [pc, #40]	; (d494 <tmr_enable_cc_interrupt+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    d46c:	5c1b      	ldrb	r3, [r3, r0]
    d46e:	221f      	movs	r2, #31
    d470:	401a      	ands	r2, r3
    d472:	2301      	movs	r3, #1
    d474:	4093      	lsls	r3, r2
    d476:	4a08      	ldr	r2, [pc, #32]	; (d498 <tmr_enable_cc_interrupt+0x38>)
    d478:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    d47a:	7e63      	ldrb	r3, [r4, #25]
    d47c:	2210      	movs	r2, #16
    d47e:	4313      	orrs	r3, r2
    d480:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    d482:	6823      	ldr	r3, [r4, #0]
    d484:	2210      	movs	r2, #16
    d486:	725a      	strb	r2, [r3, #9]
}
    d488:	bd10      	pop	{r4, pc}
    d48a:	46c0      	nop			; (mov r8, r8)
    d48c:	20002e0c 	.word	0x20002e0c
    d490:	00006b91 	.word	0x00006b91
    d494:	00018298 	.word	0x00018298
    d498:	e000e100 	.word	0xe000e100

0000d49c <tmr_disable_ovf_interrupt>:
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(2);
		module->enable_callback_mask &= ~TC_INTFLAG_MC(2);
	}
	else {
		module->hw->COUNT8.INTENCLR.reg = (1 << callback_type);
    d49c:	4b03      	ldr	r3, [pc, #12]	; (d4ac <tmr_disable_ovf_interrupt+0x10>)
    d49e:	2101      	movs	r1, #1
    d4a0:	681a      	ldr	r2, [r3, #0]
    d4a2:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~(1 << callback_type);
    d4a4:	7e5a      	ldrb	r2, [r3, #25]
    d4a6:	438a      	bics	r2, r1
    d4a8:	765a      	strb	r2, [r3, #25]
}
    d4aa:	4770      	bx	lr
    d4ac:	20002e0c 	.word	0x20002e0c

0000d4b0 <tmr_enable_ovf_interrupt>:
{
    d4b0:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    d4b2:	4c0a      	ldr	r4, [pc, #40]	; (d4dc <tmr_enable_ovf_interrupt+0x2c>)
    d4b4:	6820      	ldr	r0, [r4, #0]
    d4b6:	4b0a      	ldr	r3, [pc, #40]	; (d4e0 <tmr_enable_ovf_interrupt+0x30>)
    d4b8:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    d4ba:	4b0a      	ldr	r3, [pc, #40]	; (d4e4 <tmr_enable_ovf_interrupt+0x34>)
    d4bc:	5c1a      	ldrb	r2, [r3, r0]
    d4be:	231f      	movs	r3, #31
    d4c0:	4013      	ands	r3, r2
    d4c2:	2201      	movs	r2, #1
    d4c4:	0011      	movs	r1, r2
    d4c6:	4099      	lsls	r1, r3
    d4c8:	4b07      	ldr	r3, [pc, #28]	; (d4e8 <tmr_enable_ovf_interrupt+0x38>)
    d4ca:	6019      	str	r1, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    d4cc:	7e63      	ldrb	r3, [r4, #25]
    d4ce:	2101      	movs	r1, #1
    d4d0:	430b      	orrs	r3, r1
    d4d2:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    d4d4:	6823      	ldr	r3, [r4, #0]
    d4d6:	725a      	strb	r2, [r3, #9]
}
    d4d8:	bd10      	pop	{r4, pc}
    d4da:	46c0      	nop			; (mov r8, r8)
    d4dc:	20002e0c 	.word	0x20002e0c
    d4e0:	00006b91 	.word	0x00006b91
    d4e4:	00018298 	.word	0x00018298
    d4e8:	e000e100 	.word	0xe000e100

0000d4ec <tmr_write_cmpreg>:
{
    d4ec:	b510      	push	{r4, lr}
    d4ee:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    d4f0:	2100      	movs	r1, #0
    d4f2:	4802      	ldr	r0, [pc, #8]	; (d4fc <tmr_write_cmpreg+0x10>)
    d4f4:	4b02      	ldr	r3, [pc, #8]	; (d500 <tmr_write_cmpreg+0x14>)
    d4f6:	4798      	blx	r3
}
    d4f8:	bd10      	pop	{r4, pc}
    d4fa:	46c0      	nop			; (mov r8, r8)
    d4fc:	20002e0c 	.word	0x20002e0c
    d500:	00006f05 	.word	0x00006f05

0000d504 <save_cpu_interrupt>:
{
    d504:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    d506:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d50a:	425a      	negs	r2, r3
    d50c:	4153      	adcs	r3, r2
    d50e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    d510:	b672      	cpsid	i
    d512:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d516:	2200      	movs	r2, #0
    d518:	4b02      	ldr	r3, [pc, #8]	; (d524 <save_cpu_interrupt+0x20>)
    d51a:	701a      	strb	r2, [r3, #0]
	return flags;
    d51c:	9801      	ldr	r0, [sp, #4]
	return cpu_irq_save();
    d51e:	b2c0      	uxtb	r0, r0
}
    d520:	b002      	add	sp, #8
    d522:	4770      	bx	lr
    d524:	20000008 	.word	0x20000008

0000d528 <restore_cpu_interrupt>:
	if (cpu_irq_is_enabled_flags(flags))
    d528:	2800      	cmp	r0, #0
    d52a:	d005      	beq.n	d538 <restore_cpu_interrupt+0x10>
		cpu_irq_enable();
    d52c:	2201      	movs	r2, #1
    d52e:	4b03      	ldr	r3, [pc, #12]	; (d53c <restore_cpu_interrupt+0x14>)
    d530:	701a      	strb	r2, [r3, #0]
    d532:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d536:	b662      	cpsie	i
}
    d538:	4770      	bx	lr
    d53a:	46c0      	nop			; (mov r8, r8)
    d53c:	20000008 	.word	0x20000008

0000d540 <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    d540:	b570      	push	{r4, r5, r6, lr}
	config->clock_source               = GCLK_GENERATOR_0;
    d542:	4a33      	ldr	r2, [pc, #204]	; (d610 <tmr_init+0xd0>)
    d544:	2100      	movs	r1, #0
    d546:	2300      	movs	r3, #0
    d548:	7011      	strb	r1, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    d54a:	70d1      	strb	r1, [r2, #3]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    d54c:	2000      	movs	r0, #0
    d54e:	8091      	strh	r1, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    d550:	7190      	strb	r0, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    d552:	71d3      	strb	r3, [r2, #7]
	config->run_in_standby             = false;
    d554:	7053      	strb	r3, [r2, #1]
	config->on_demand                  = false;
    d556:	7093      	strb	r3, [r2, #2]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    d558:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    d55a:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    d55c:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    d55e:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    d560:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    d562:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    d564:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    d566:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    d568:	6151      	str	r1, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    d56a:	6191      	str	r1, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    d56c:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    d56e:	6211      	str	r1, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    d570:	6251      	str	r1, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    d572:	8511      	strh	r1, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    d574:	8591      	strh	r1, [r2, #44]	; 0x2c
	config->double_buffering_enabled = false;
    d576:	2334      	movs	r3, #52	; 0x34
    d578:	54d0      	strb	r0, [r2, r3]
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    d57a:	3b35      	subs	r3, #53	; 0x35
    d57c:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    d57e:	4c25      	ldr	r4, [pc, #148]	; (d614 <tmr_init+0xd4>)
    d580:	4925      	ldr	r1, [pc, #148]	; (d618 <tmr_init+0xd8>)
    d582:	0020      	movs	r0, r4
    d584:	4b25      	ldr	r3, [pc, #148]	; (d61c <tmr_init+0xdc>)
    d586:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    d588:	2200      	movs	r2, #0
    d58a:	4925      	ldr	r1, [pc, #148]	; (d620 <tmr_init+0xe0>)
    d58c:	0020      	movs	r0, r4
    d58e:	4d25      	ldr	r5, [pc, #148]	; (d624 <tmr_init+0xe4>)
    d590:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    d592:	2202      	movs	r2, #2
    d594:	4924      	ldr	r1, [pc, #144]	; (d628 <tmr_init+0xe8>)
    d596:	0020      	movs	r0, r4
    d598:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    d59a:	6820      	ldr	r0, [r4, #0]
    d59c:	4b23      	ldr	r3, [pc, #140]	; (d62c <tmr_init+0xec>)
    d59e:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    d5a0:	4b23      	ldr	r3, [pc, #140]	; (d630 <tmr_init+0xf0>)
    d5a2:	5c1a      	ldrb	r2, [r3, r0]
    d5a4:	231f      	movs	r3, #31
    d5a6:	4013      	ands	r3, r2
    d5a8:	2101      	movs	r1, #1
    d5aa:	000a      	movs	r2, r1
    d5ac:	409a      	lsls	r2, r3
    d5ae:	4b21      	ldr	r3, [pc, #132]	; (d634 <tmr_init+0xf4>)
    d5b0:	601a      	str	r2, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    d5b2:	7e63      	ldrb	r3, [r4, #25]
    d5b4:	2201      	movs	r2, #1
    d5b6:	4313      	orrs	r3, r2
    d5b8:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    d5ba:	6822      	ldr	r2, [r4, #0]
    d5bc:	7251      	strb	r1, [r2, #9]
	return (tc_module->SYNCBUSY.reg);
    d5be:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    d5c0:	2b00      	cmp	r3, #0
    d5c2:	d1fc      	bne.n	d5be <tmr_init+0x7e>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    d5c4:	6813      	ldr	r3, [r2, #0]
    d5c6:	2102      	movs	r1, #2
    d5c8:	430b      	orrs	r3, r1
    d5ca:	6013      	str	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;	
    d5cc:	2000      	movs	r0, #0
    d5ce:	4b1a      	ldr	r3, [pc, #104]	; (d638 <tmr_init+0xf8>)
    d5d0:	4798      	blx	r3
    d5d2:	4d1a      	ldr	r5, [pc, #104]	; (d63c <tmr_init+0xfc>)
    d5d4:	47a8      	blx	r5
    d5d6:	491a      	ldr	r1, [pc, #104]	; (d640 <tmr_init+0x100>)
    d5d8:	4b1a      	ldr	r3, [pc, #104]	; (d644 <tmr_init+0x104>)
    d5da:	4798      	blx	r3
    d5dc:	1c04      	adds	r4, r0, #0
	#endif
	
	if ((timer_multiplier - (uint32_t)timer_multiplier) >= 0.5f)
    d5de:	4b1a      	ldr	r3, [pc, #104]	; (d648 <tmr_init+0x108>)
    d5e0:	4798      	blx	r3
    d5e2:	47a8      	blx	r5
    d5e4:	1c01      	adds	r1, r0, #0
    d5e6:	1c20      	adds	r0, r4, #0
    d5e8:	4b18      	ldr	r3, [pc, #96]	; (d64c <tmr_init+0x10c>)
    d5ea:	4798      	blx	r3
    d5ec:	21fc      	movs	r1, #252	; 0xfc
    d5ee:	0589      	lsls	r1, r1, #22
    d5f0:	4b17      	ldr	r3, [pc, #92]	; (d650 <tmr_init+0x110>)
    d5f2:	4798      	blx	r3
    d5f4:	2800      	cmp	r0, #0
    d5f6:	d005      	beq.n	d604 <tmr_init+0xc4>
	{
		timer_multiplier += 1.0f;
    d5f8:	21fe      	movs	r1, #254	; 0xfe
    d5fa:	0589      	lsls	r1, r1, #22
    d5fc:	1c20      	adds	r0, r4, #0
    d5fe:	4b15      	ldr	r3, [pc, #84]	; (d654 <tmr_init+0x114>)
    d600:	4798      	blx	r3
    d602:	1c04      	adds	r4, r0, #0
	}
	
	return (uint8_t) timer_multiplier;
    d604:	1c20      	adds	r0, r4, #0
    d606:	4b10      	ldr	r3, [pc, #64]	; (d648 <tmr_init+0x108>)
    d608:	4798      	blx	r3
    d60a:	b2c0      	uxtb	r0, r0
}
    d60c:	bd70      	pop	{r4, r5, r6, pc}
    d60e:	46c0      	nop			; (mov r8, r8)
    d610:	20002dd4 	.word	0x20002dd4
    d614:	20002e0c 	.word	0x20002e0c
    d618:	42002000 	.word	0x42002000
    d61c:	00006bcd 	.word	0x00006bcd
    d620:	0000d42d 	.word	0x0000d42d
    d624:	00006ac9 	.word	0x00006ac9
    d628:	0000d421 	.word	0x0000d421
    d62c:	00006b91 	.word	0x00006b91
    d630:	00018298 	.word	0x00018298
    d634:	e000e100 	.word	0xe000e100
    d638:	00006891 	.word	0x00006891
    d63c:	000142d5 	.word	0x000142d5
    d640:	49742400 	.word	0x49742400
    d644:	0001389d 	.word	0x0001389d
    d648:	0001334d 	.word	0x0001334d
    d64c:	00013ebd 	.word	0x00013ebd
    d650:	000132a5 	.word	0x000132a5
    d654:	00013579 	.word	0x00013579

0000d658 <edbg_eui_read_eui64>:
#define LEN_EUI    256
uint8_t readbuf[LEN_EUI];

uint8_t *
edbg_eui_read_eui64(void)
{
    d658:	b570      	push	{r4, r5, r6, lr}
    d65a:	b090      	sub	sp, #64	; 0x40
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    d65c:	aa03      	add	r2, sp, #12
    d65e:	2364      	movs	r3, #100	; 0x64
    d660:	9303      	str	r3, [sp, #12]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    d662:	4b54      	ldr	r3, [pc, #336]	; (d7b4 <edbg_eui_read_eui64+0x15c>)
    d664:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    d666:	2300      	movs	r3, #0
    d668:	6093      	str	r3, [r2, #8]
	config->generator_source = GCLK_GENERATOR_0;
    d66a:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    d66c:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    d66e:	2180      	movs	r1, #128	; 0x80
    d670:	0389      	lsls	r1, r1, #14
    d672:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
    d674:	2101      	movs	r1, #1
    d676:	4249      	negs	r1, r1
    d678:	82d1      	strh	r1, [r2, #22]
	config->unknown_bus_state_timeout = 65535;
    d67a:	8291      	strh	r1, [r2, #20]
	config->scl_low_timeout  = false;
    d67c:	3125      	adds	r1, #37	; 0x25
    d67e:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    d680:	6293      	str	r3, [r2, #40]	; 0x28
	config->scl_stretch_only_after_ack_bit = false;
    d682:	3108      	adds	r1, #8
    d684:	5453      	strb	r3, [r2, r1]
	config->slave_scl_low_extend_timeout   = false;
    d686:	3101      	adds	r1, #1
    d688:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    d68a:	3101      	adds	r1, #1
    d68c:	5453      	strb	r3, [r2, r1]
	config->sda_scl_rise_time_ns = 215;
    d68e:	33d7      	adds	r3, #215	; 0xd7
    d690:	8613      	strh	r3, [r2, #48]	; 0x30
  int timeout2 = 0;
  bool random_mac_address = false;
  uint8_t edbg_status = 0xFF;
  struct i2c_master_config config_i2c_master;
  i2c_master_get_config_defaults(&config_i2c_master);
  config_i2c_master.pinmux_pad0  = EDBG_I2C_SERCOM_PINMUX_PAD0;
    d692:	4b49      	ldr	r3, [pc, #292]	; (d7b8 <edbg_eui_read_eui64+0x160>)
    d694:	61d3      	str	r3, [r2, #28]
  config_i2c_master.pinmux_pad1  = EDBG_I2C_SERCOM_PINMUX_PAD1;
    d696:	4b49      	ldr	r3, [pc, #292]	; (d7bc <edbg_eui_read_eui64+0x164>)
    d698:	6213      	str	r3, [r2, #32]

  i2c_master_init(&i2c_master_instance, EDBG_I2C_MODULE, &config_i2c_master);
    d69a:	4c49      	ldr	r4, [pc, #292]	; (d7c0 <edbg_eui_read_eui64+0x168>)
    d69c:	4949      	ldr	r1, [pc, #292]	; (d7c4 <edbg_eui_read_eui64+0x16c>)
    d69e:	0020      	movs	r0, r4
    d6a0:	4b49      	ldr	r3, [pc, #292]	; (d7c8 <edbg_eui_read_eui64+0x170>)
    d6a2:	4798      	blx	r3
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    d6a4:	6822      	ldr	r2, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    d6a6:	2107      	movs	r1, #7
    d6a8:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
    d6aa:	4219      	tst	r1, r3
    d6ac:	d1fc      	bne.n	d6a8 <edbg_eui_read_eui64+0x50>
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    d6ae:	6813      	ldr	r3, [r2, #0]
    d6b0:	2102      	movs	r1, #2
    d6b2:	430b      	orrs	r3, r1
    d6b4:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    d6b6:	4b42      	ldr	r3, [pc, #264]	; (d7c0 <edbg_eui_read_eui64+0x168>)
    d6b8:	88dc      	ldrh	r4, [r3, #6]
	uint32_t timeout_counter = 0;
    d6ba:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    d6bc:	2010      	movs	r0, #16
    d6be:	8b51      	ldrh	r1, [r2, #26]
    d6c0:	4201      	tst	r1, r0
    d6c2:	d104      	bne.n	d6ce <edbg_eui_read_eui64+0x76>
		timeout_counter++;
    d6c4:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    d6c6:	42a3      	cmp	r3, r4
    d6c8:	d3f9      	bcc.n	d6be <edbg_eui_read_eui64+0x66>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    d6ca:	2310      	movs	r3, #16
    d6cc:	8353      	strh	r3, [r2, #26]

  i2c_master_enable(&i2c_master_instance);

  struct i2c_master_packet packet = {
    d6ce:	466a      	mov	r2, sp
    d6d0:	4b3e      	ldr	r3, [pc, #248]	; (d7cc <edbg_eui_read_eui64+0x174>)
    d6d2:	cb13      	ldmia	r3!, {r0, r1, r4}
    d6d4:	c213      	stmia	r2!, {r0, r1, r4}
  int timeout2 = 0;
    d6d6:	2600      	movs	r6, #0
    .hs_master_code  = 0x0,
  };
   
    do
    {
	    edbg_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &packet);
    d6d8:	4c39      	ldr	r4, [pc, #228]	; (d7c0 <edbg_eui_read_eui64+0x168>)
    d6da:	4d3d      	ldr	r5, [pc, #244]	; (d7d0 <edbg_eui_read_eui64+0x178>)
    d6dc:	e003      	b.n	d6e6 <edbg_eui_read_eui64+0x8e>
	    if(edbg_status == STATUS_ERR_BAD_ADDRESS)
		{
			if(timeout2++ == SLAVE_WAIT_TIMEOUT)
    d6de:	1c73      	adds	r3, r6, #1
    d6e0:	2e0a      	cmp	r6, #10
    d6e2:	d033      	beq.n	d74c <edbg_eui_read_eui64+0xf4>
    d6e4:	001e      	movs	r6, r3
	    edbg_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &packet);
    d6e6:	4669      	mov	r1, sp
    d6e8:	0020      	movs	r0, r4
    d6ea:	47a8      	blx	r5
	    if(edbg_status == STATUS_ERR_BAD_ADDRESS)
    d6ec:	2818      	cmp	r0, #24
    d6ee:	d0f6      	beq.n	d6de <edbg_eui_read_eui64+0x86>
				random_mac_address = true;
				timeout2 = 0;
				break;
			}
		}
		else if(edbg_status == STATUS_ERR_TIMEOUT) {
    d6f0:	2812      	cmp	r0, #18
    d6f2:	d02f      	beq.n	d754 <edbg_eui_read_eui64+0xfc>
		PRINTF("Timeout 1\n");
		random_mac_address = true;	
		break;
		}
    } while (edbg_status!=STATUS_OK && edbg_status!=0xFF);
    d6f4:	3801      	subs	r0, #1
    d6f6:	b2c0      	uxtb	r0, r0
    d6f8:	28fd      	cmp	r0, #253	; 0xfd
    d6fa:	d9f4      	bls.n	d6e6 <edbg_eui_read_eui64+0x8e>
	
  packet.data = readbuf;
    d6fc:	4b35      	ldr	r3, [pc, #212]	; (d7d4 <edbg_eui_read_eui64+0x17c>)
    d6fe:	9301      	str	r3, [sp, #4]
  packet.data_length = sizeof(readbuf);
    d700:	2380      	movs	r3, #128	; 0x80
    d702:	005b      	lsls	r3, r3, #1
    d704:	466a      	mov	r2, sp
    d706:	8053      	strh	r3, [r2, #2]
if(random_mac_address == false)
{
  do 
  {
	  edbg_status = i2c_master_read_packet_wait(&i2c_master_instance, &packet) ;
    d708:	4c2d      	ldr	r4, [pc, #180]	; (d7c0 <edbg_eui_read_eui64+0x168>)
    d70a:	4d33      	ldr	r5, [pc, #204]	; (d7d8 <edbg_eui_read_eui64+0x180>)
    d70c:	4669      	mov	r1, sp
    d70e:	0020      	movs	r0, r4
    d710:	47a8      	blx	r5
	    if(edbg_status==STATUS_ERR_BAD_ADDRESS)
    d712:	2818      	cmp	r0, #24
    d714:	d043      	beq.n	d79e <edbg_eui_read_eui64+0x146>
	    {			
			PRINTF("I2C Slave Not Available");
			random_mac_address = true;	
		    break;
	    }
		else if(edbg_status == STATUS_ERR_TIMEOUT) {
    d716:	2812      	cmp	r0, #18
    d718:	d048      	beq.n	d7ac <edbg_eui_read_eui64+0x154>
			random_mac_address = true;	
			PRINTF("Timeout 2\n");
			break;
		}		
  } while (edbg_status!=STATUS_OK && edbg_status!=0xFF);
    d71a:	3801      	subs	r0, #1
    d71c:	b2c0      	uxtb	r0, r0
    d71e:	28fd      	cmp	r0, #253	; 0xfd
    d720:	d9f4      	bls.n	d70c <edbg_eui_read_eui64+0xb4>
}
  i2c_master_reset(&i2c_master_instance);
    d722:	4827      	ldr	r0, [pc, #156]	; (d7c0 <edbg_eui_read_eui64+0x168>)
    d724:	4b2d      	ldr	r3, [pc, #180]	; (d7dc <edbg_eui_read_eui64+0x184>)
    d726:	4798      	blx	r3
  if(random_mac_address || !(readbuf[0] ^ readbuf[1] ^ readbuf[2] ^ readbuf[3] ^ readbuf[4] ^ readbuf[5] ^ readbuf[6] ^ readbuf[7]))
    d728:	4a2a      	ldr	r2, [pc, #168]	; (d7d4 <edbg_eui_read_eui64+0x17c>)
    d72a:	7813      	ldrb	r3, [r2, #0]
    d72c:	7851      	ldrb	r1, [r2, #1]
    d72e:	404b      	eors	r3, r1
    d730:	7891      	ldrb	r1, [r2, #2]
    d732:	404b      	eors	r3, r1
    d734:	78d1      	ldrb	r1, [r2, #3]
    d736:	404b      	eors	r3, r1
    d738:	7911      	ldrb	r1, [r2, #4]
    d73a:	404b      	eors	r3, r1
    d73c:	7951      	ldrb	r1, [r2, #5]
    d73e:	404b      	eors	r3, r1
    d740:	7991      	ldrb	r1, [r2, #6]
    d742:	79d2      	ldrb	r2, [r2, #7]
    d744:	404b      	eors	r3, r1
    d746:	429a      	cmp	r2, r3
    d748:	d126      	bne.n	d798 <edbg_eui_read_eui64+0x140>
    d74a:	e00f      	b.n	d76c <edbg_eui_read_eui64+0x114>
				PRINTF("I2C Slave Not Available");
    d74c:	4824      	ldr	r0, [pc, #144]	; (d7e0 <edbg_eui_read_eui64+0x188>)
    d74e:	4b25      	ldr	r3, [pc, #148]	; (d7e4 <edbg_eui_read_eui64+0x18c>)
    d750:	4798      	blx	r3
				break;
    d752:	e002      	b.n	d75a <edbg_eui_read_eui64+0x102>
		PRINTF("Timeout 1\n");
    d754:	4824      	ldr	r0, [pc, #144]	; (d7e8 <edbg_eui_read_eui64+0x190>)
    d756:	4b25      	ldr	r3, [pc, #148]	; (d7ec <edbg_eui_read_eui64+0x194>)
    d758:	4798      	blx	r3
  packet.data = readbuf;
    d75a:	4b1e      	ldr	r3, [pc, #120]	; (d7d4 <edbg_eui_read_eui64+0x17c>)
    d75c:	9301      	str	r3, [sp, #4]
  packet.data_length = sizeof(readbuf);
    d75e:	2380      	movs	r3, #128	; 0x80
    d760:	005b      	lsls	r3, r3, #1
    d762:	466a      	mov	r2, sp
    d764:	8053      	strh	r3, [r2, #2]
  i2c_master_reset(&i2c_master_instance);
    d766:	4816      	ldr	r0, [pc, #88]	; (d7c0 <edbg_eui_read_eui64+0x168>)
    d768:	4b1c      	ldr	r3, [pc, #112]	; (d7dc <edbg_eui_read_eui64+0x184>)
    d76a:	4798      	blx	r3
  {
	  unsigned int seed;
	  seed = ((*S_NO_WORD0) ^ (*S_NO_WORD1) ^ (*S_NO_WORD2) ^ (*S_NO_WORD3));
    d76c:	4b20      	ldr	r3, [pc, #128]	; (d7f0 <edbg_eui_read_eui64+0x198>)
    d76e:	6818      	ldr	r0, [r3, #0]
    d770:	4b20      	ldr	r3, [pc, #128]	; (d7f4 <edbg_eui_read_eui64+0x19c>)
    d772:	681b      	ldr	r3, [r3, #0]
    d774:	4058      	eors	r0, r3
    d776:	4b20      	ldr	r3, [pc, #128]	; (d7f8 <edbg_eui_read_eui64+0x1a0>)
    d778:	681b      	ldr	r3, [r3, #0]
    d77a:	4058      	eors	r0, r3
    d77c:	4b1f      	ldr	r3, [pc, #124]	; (d7fc <edbg_eui_read_eui64+0x1a4>)
    d77e:	681b      	ldr	r3, [r3, #0]
    d780:	4058      	eors	r0, r3
	  srand(seed);
    d782:	4b1f      	ldr	r3, [pc, #124]	; (d800 <edbg_eui_read_eui64+0x1a8>)
    d784:	4798      	blx	r3
    d786:	4c13      	ldr	r4, [pc, #76]	; (d7d4 <edbg_eui_read_eui64+0x17c>)
    d788:	0026      	movs	r6, r4
    d78a:	3608      	adds	r6, #8
	  //printf("\r\n Generating Random MAC \r\n");
	  for (uint8_t i = 0; i < 8; i++) {
		  *(readbuf+i) = rand();
    d78c:	4d1d      	ldr	r5, [pc, #116]	; (d804 <edbg_eui_read_eui64+0x1ac>)
    d78e:	47a8      	blx	r5
    d790:	7020      	strb	r0, [r4, #0]
    d792:	3401      	adds	r4, #1
	  for (uint8_t i = 0; i < 8; i++) {
    d794:	42a6      	cmp	r6, r4
    d796:	d1fa      	bne.n	d78e <edbg_eui_read_eui64+0x136>
	  }
	  
  }
  return readbuf;
}
    d798:	480e      	ldr	r0, [pc, #56]	; (d7d4 <edbg_eui_read_eui64+0x17c>)
    d79a:	b010      	add	sp, #64	; 0x40
    d79c:	bd70      	pop	{r4, r5, r6, pc}
			PRINTF("I2C Slave Not Available");
    d79e:	4810      	ldr	r0, [pc, #64]	; (d7e0 <edbg_eui_read_eui64+0x188>)
    d7a0:	4b10      	ldr	r3, [pc, #64]	; (d7e4 <edbg_eui_read_eui64+0x18c>)
    d7a2:	4798      	blx	r3
  i2c_master_reset(&i2c_master_instance);
    d7a4:	4806      	ldr	r0, [pc, #24]	; (d7c0 <edbg_eui_read_eui64+0x168>)
    d7a6:	4b0d      	ldr	r3, [pc, #52]	; (d7dc <edbg_eui_read_eui64+0x184>)
    d7a8:	4798      	blx	r3
    d7aa:	e7df      	b.n	d76c <edbg_eui_read_eui64+0x114>
			PRINTF("Timeout 2\n");
    d7ac:	4816      	ldr	r0, [pc, #88]	; (d808 <edbg_eui_read_eui64+0x1b0>)
    d7ae:	4b0f      	ldr	r3, [pc, #60]	; (d7ec <edbg_eui_read_eui64+0x194>)
    d7b0:	4798      	blx	r3
			break;
    d7b2:	e7f7      	b.n	d7a4 <edbg_eui_read_eui64+0x14c>
    d7b4:	00000d48 	.word	0x00000d48
    d7b8:	00100002 	.word	0x00100002
    d7bc:	00110002 	.word	0x00110002
    d7c0:	20002f28 	.word	0x20002f28
    d7c4:	42000400 	.word	0x42000400
    d7c8:	00004d15 	.word	0x00004d15
    d7cc:	000182a0 	.word	0x000182a0
    d7d0:	00005341 	.word	0x00005341
    d7d4:	20002e28 	.word	0x20002e28
    d7d8:	0000532d 	.word	0x0000532d
    d7dc:	00004ff1 	.word	0x00004ff1
    d7e0:	000182ac 	.word	0x000182ac
    d7e4:	000166f9 	.word	0x000166f9
    d7e8:	000182c4 	.word	0x000182c4
    d7ec:	00016815 	.word	0x00016815
    d7f0:	0080a00c 	.word	0x0080a00c
    d7f4:	0080a040 	.word	0x0080a040
    d7f8:	0080a044 	.word	0x0080a044
    d7fc:	0080a048 	.word	0x0080a048
    d800:	00016829 	.word	0x00016829
    d804:	00016885 	.word	0x00016885
    d808:	000182d0 	.word	0x000182d0

0000d80c <UART_LoRa_rx_cb>:
{
	port_pin_toggle_output_level(LED_0_PIN);
}

void UART_LoRa_rx_cb(struct usart_module *const usart_module)
{
    d80c:	b510      	push	{r4, lr}
	port_base->OUTTGL.reg = pin_mask;
    d80e:	2280      	movs	r2, #128	; 0x80
    d810:	02d2      	lsls	r2, r2, #11
    d812:	4b04      	ldr	r3, [pc, #16]	; (d824 <UART_LoRa_rx_cb+0x18>)
    d814:	61da      	str	r2, [r3, #28]
	port_pin_toggle_output_level(LED_1_PIN);
	//usart_write_buffer_job(&UART_LoRa,(uint8_t *)rx_buffer_LoRa, LoRa_UART_RX_BUFFER_LENGTH);

	T_BroadcastMessageToFerry(rx_buffer_LoRa[0]);
    d816:	4b04      	ldr	r3, [pc, #16]	; (d828 <UART_LoRa_rx_cb+0x1c>)
    d818:	7818      	ldrb	r0, [r3, #0]
    d81a:	b2c0      	uxtb	r0, r0
    d81c:	4b03      	ldr	r3, [pc, #12]	; (d82c <UART_LoRa_rx_cb+0x20>)
    d81e:	4798      	blx	r3
}
    d820:	bd10      	pop	{r4, pc}
    d822:	46c0      	nop			; (mov r8, r8)
    d824:	40002800 	.word	0x40002800
    d828:	20001f54 	.word	0x20001f54
    d82c:	000075dd 	.word	0x000075dd

0000d830 <UART_LoRa_init>:
{
    d830:	b530      	push	{r4, r5, lr}
    d832:	b091      	sub	sp, #68	; 0x44
	config->data_order       = USART_DATAORDER_LSB;
    d834:	2380      	movs	r3, #128	; 0x80
    d836:	05db      	lsls	r3, r3, #23
    d838:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    d83a:	2300      	movs	r3, #0
    d83c:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    d83e:	22ff      	movs	r2, #255	; 0xff
    d840:	4669      	mov	r1, sp
    d842:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    d844:	2200      	movs	r2, #0
    d846:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    d848:	72cb      	strb	r3, [r1, #11]
	config->receiver_enable  = true;
    d84a:	2101      	movs	r1, #1
    d84c:	2024      	movs	r0, #36	; 0x24
    d84e:	466c      	mov	r4, sp
    d850:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    d852:	3001      	adds	r0, #1
    d854:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    d856:	3125      	adds	r1, #37	; 0x25
    d858:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    d85a:	3101      	adds	r1, #1
    d85c:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    d85e:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    d860:	3105      	adds	r1, #5
    d862:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    d864:	3101      	adds	r1, #1
    d866:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    d868:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    d86a:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    d86c:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    d86e:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    d870:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    d872:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    d874:	2313      	movs	r3, #19
    d876:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    d878:	7762      	strb	r2, [r4, #29]
	config_uart_LoRa.baudrate    = UART_BAUD;
    d87a:	23e1      	movs	r3, #225	; 0xe1
    d87c:	025b      	lsls	r3, r3, #9
    d87e:	9308      	str	r3, [sp, #32]
	config_uart_LoRa.mux_setting = USART_RX_1_TX_0_XCK_1; //RX - TX positon ref: https://asf.microchip.com/docs/latest/common.services.fs.fatfs.access_example.saml21_xplained_pro/html/asfdoc_sam0_sercom_usart_mux_settings.html
    d880:	2380      	movs	r3, #128	; 0x80
    d882:	035b      	lsls	r3, r3, #13
    d884:	9303      	str	r3, [sp, #12]
	config_uart_LoRa.pinmux_pad0 = PINMUX_PA22C_SERCOM3_PAD0; //UNUSED - TX
    d886:	4b12      	ldr	r3, [pc, #72]	; (d8d0 <UART_LoRa_init+0xa0>)
    d888:	930c      	str	r3, [sp, #48]	; 0x30
	config_uart_LoRa.pinmux_pad1 = PINMUX_PA23C_SERCOM3_PAD1; //UNUSED - RX
    d88a:	4b12      	ldr	r3, [pc, #72]	; (d8d4 <UART_LoRa_init+0xa4>)
    d88c:	930d      	str	r3, [sp, #52]	; 0x34
	config_uart_LoRa.pinmux_pad2 = PINMUX_UNUSED; //PA06 - TX
    d88e:	2301      	movs	r3, #1
    d890:	425b      	negs	r3, r3
    d892:	930e      	str	r3, [sp, #56]	; 0x38
	config_uart_LoRa.pinmux_pad3 = PINMUX_UNUSED; //PA06 - RX
    d894:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&UART_LoRa,SERCOM3, &config_uart_LoRa) != STATUS_OK) {
    d896:	4d10      	ldr	r5, [pc, #64]	; (d8d8 <UART_LoRa_init+0xa8>)
    d898:	4c10      	ldr	r4, [pc, #64]	; (d8dc <UART_LoRa_init+0xac>)
    d89a:	466a      	mov	r2, sp
    d89c:	4910      	ldr	r1, [pc, #64]	; (d8e0 <UART_LoRa_init+0xb0>)
    d89e:	0028      	movs	r0, r5
    d8a0:	47a0      	blx	r4
    d8a2:	2800      	cmp	r0, #0
    d8a4:	d1f9      	bne.n	d89a <UART_LoRa_init+0x6a>
	SercomUsart *const usart_hw = &(module->hw->USART);
    d8a6:	4d0c      	ldr	r5, [pc, #48]	; (d8d8 <UART_LoRa_init+0xa8>)
    d8a8:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    d8aa:	0020      	movs	r0, r4
    d8ac:	4b0d      	ldr	r3, [pc, #52]	; (d8e4 <UART_LoRa_init+0xb4>)
    d8ae:	4798      	blx	r3
    d8b0:	231f      	movs	r3, #31
    d8b2:	4018      	ands	r0, r3
    d8b4:	3b1e      	subs	r3, #30
    d8b6:	4083      	lsls	r3, r0
    d8b8:	4a0b      	ldr	r2, [pc, #44]	; (d8e8 <UART_LoRa_init+0xb8>)
    d8ba:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    d8bc:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    d8be:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    d8c0:	2b00      	cmp	r3, #0
    d8c2:	d1fc      	bne.n	d8be <UART_LoRa_init+0x8e>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    d8c4:	6823      	ldr	r3, [r4, #0]
    d8c6:	2202      	movs	r2, #2
    d8c8:	4313      	orrs	r3, r2
    d8ca:	6023      	str	r3, [r4, #0]
}
    d8cc:	b011      	add	sp, #68	; 0x44
    d8ce:	bd30      	pop	{r4, r5, pc}
    d8d0:	00160002 	.word	0x00160002
    d8d4:	00170002 	.word	0x00170002
    d8d8:	20001fa0 	.word	0x20001fa0
    d8dc:	00005bbd 	.word	0x00005bbd
    d8e0:	42000c00 	.word	0x42000c00
    d8e4:	000056ed 	.word	0x000056ed
    d8e8:	e000e100 	.word	0xe000e100

0000d8ec <UART_init>:
{
    d8ec:	b510      	push	{r4, lr}
	UART_LoRa_init();
    d8ee:	4b01      	ldr	r3, [pc, #4]	; (d8f4 <UART_init+0x8>)
    d8f0:	4798      	blx	r3
}
    d8f2:	bd10      	pop	{r4, pc}
    d8f4:	0000d831 	.word	0x0000d831

0000d8f8 <UART_LoRa_cb_init>:
{
    d8f8:	b510      	push	{r4, lr}
	usart_register_callback(&UART_LoRa,UART_LoRa_rx_cb, USART_CALLBACK_BUFFER_RECEIVED);
    d8fa:	4c06      	ldr	r4, [pc, #24]	; (d914 <UART_LoRa_cb_init+0x1c>)
    d8fc:	2201      	movs	r2, #1
    d8fe:	4906      	ldr	r1, [pc, #24]	; (d918 <UART_LoRa_cb_init+0x20>)
    d900:	0020      	movs	r0, r4
    d902:	4b06      	ldr	r3, [pc, #24]	; (d91c <UART_LoRa_cb_init+0x24>)
    d904:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    d906:	2231      	movs	r2, #49	; 0x31
    d908:	5ca3      	ldrb	r3, [r4, r2]
    d90a:	2102      	movs	r1, #2
    d90c:	430b      	orrs	r3, r1
    d90e:	54a3      	strb	r3, [r4, r2]
}
    d910:	bd10      	pop	{r4, pc}
    d912:	46c0      	nop			; (mov r8, r8)
    d914:	20001fa0 	.word	0x20001fa0
    d918:	0000d80d 	.word	0x0000d80d
    d91c:	0000616d 	.word	0x0000616d

0000d920 <UART_cb_init>:
{
    d920:	b510      	push	{r4, lr}
	UART_LoRa_cb_init();
    d922:	4b01      	ldr	r3, [pc, #4]	; (d928 <UART_cb_init+0x8>)
    d924:	4798      	blx	r3
}
    d926:	bd10      	pop	{r4, pc}
    d928:	0000d8f9 	.word	0x0000d8f9

0000d92c <UART_SAM_To_RPi>:
{
	port_pin_toggle_output_level(LED_0_PIN);
	usart_write_buffer_job(&UART_LoRa,(uint8_t *)rx_buffer_AUTOPAX, AUTOPAX_UART_RX_BUFFER_LENGTH);
}

void UART_SAM_To_RPi(uint8_t* data){
    d92c:	b510      	push	{r4, lr}
    d92e:	0001      	movs	r1, r0
	usart_write_buffer_wait(&UART_LoRa, data, 1);
    d930:	2201      	movs	r2, #1
    d932:	4802      	ldr	r0, [pc, #8]	; (d93c <UART_SAM_To_RPi+0x10>)
    d934:	4b02      	ldr	r3, [pc, #8]	; (d940 <UART_SAM_To_RPi+0x14>)
    d936:	4798      	blx	r3
	
    d938:	bd10      	pop	{r4, pc}
    d93a:	46c0      	nop			; (mov r8, r8)
    d93c:	20001fa0 	.word	0x20001fa0
    d940:	00005fc5 	.word	0x00005fc5

0000d944 <LORAWAN_TxHandler>:
    d944:	b5f0      	push	{r4, r5, r6, r7, lr}
    d946:	b087      	sub	sp, #28
    d948:	466b      	mov	r3, sp
    d94a:	2501      	movs	r5, #1
    d94c:	4c2f      	ldr	r4, [pc, #188]	; (da0c <LORAWAN_TxHandler+0xc8>)
    d94e:	701d      	strb	r5, [r3, #0]
    d950:	0023      	movs	r3, r4
    d952:	466a      	mov	r2, sp
    d954:	33e9      	adds	r3, #233	; 0xe9
    d956:	781b      	ldrb	r3, [r3, #0]
    d958:	4669      	mov	r1, sp
    d95a:	7053      	strb	r3, [r2, #1]
    d95c:	0023      	movs	r3, r4
    d95e:	33e7      	adds	r3, #231	; 0xe7
    d960:	781b      	ldrb	r3, [r3, #0]
    d962:	202e      	movs	r0, #46	; 0x2e
    d964:	7093      	strb	r3, [r2, #2]
    d966:	aa03      	add	r2, sp, #12
    d968:	4b29      	ldr	r3, [pc, #164]	; (da10 <LORAWAN_TxHandler+0xcc>)
    d96a:	4798      	blx	r3
    d96c:	2808      	cmp	r0, #8
    d96e:	d004      	beq.n	d97a <LORAWAN_TxHandler+0x36>
    d970:	4b28      	ldr	r3, [pc, #160]	; (da14 <LORAWAN_TxHandler+0xd0>)
    d972:	4798      	blx	r3
    d974:	2000      	movs	r0, #0
    d976:	b007      	add	sp, #28
    d978:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d97a:	0023      	movs	r3, r4
    d97c:	33fd      	adds	r3, #253	; 0xfd
    d97e:	781b      	ldrb	r3, [r3, #0]
    d980:	ae01      	add	r6, sp, #4
    d982:	2b04      	cmp	r3, #4
    d984:	d103      	bne.n	d98e <LORAWAN_TxHandler+0x4a>
    d986:	0030      	movs	r0, r6
    d988:	4b23      	ldr	r3, [pc, #140]	; (da18 <LORAWAN_TxHandler+0xd4>)
    d98a:	7035      	strb	r5, [r6, #0]
    d98c:	4798      	blx	r3
    d98e:	4b23      	ldr	r3, [pc, #140]	; (da1c <LORAWAN_TxHandler+0xd8>)
    d990:	9803      	ldr	r0, [sp, #12]
    d992:	9904      	ldr	r1, [sp, #16]
    d994:	9a05      	ldr	r2, [sp, #20]
    d996:	4798      	blx	r3
    d998:	0023      	movs	r3, r4
    d99a:	33fc      	adds	r3, #252	; 0xfc
    d99c:	68dd      	ldr	r5, [r3, #12]
    d99e:	4f20      	ldr	r7, [pc, #128]	; (da20 <LORAWAN_TxHandler+0xdc>)
    d9a0:	4b20      	ldr	r3, [pc, #128]	; (da24 <LORAWAN_TxHandler+0xe0>)
    d9a2:	2d00      	cmp	r5, #0
    d9a4:	d023      	beq.n	d9ee <LORAWAN_TxHandler+0xaa>
    d9a6:	2201      	movs	r2, #1
    d9a8:	54e2      	strb	r2, [r4, r3]
    d9aa:	7828      	ldrb	r0, [r5, #0]
    d9ac:	7a2b      	ldrb	r3, [r5, #8]
    d9ae:	1e42      	subs	r2, r0, #1
    d9b0:	4190      	sbcs	r0, r2
    d9b2:	7869      	ldrb	r1, [r5, #1]
    d9b4:	686a      	ldr	r2, [r5, #4]
    d9b6:	b2c0      	uxtb	r0, r0
    d9b8:	47b8      	blx	r7
    d9ba:	0023      	movs	r3, r4
    d9bc:	33ce      	adds	r3, #206	; 0xce
    d9be:	881b      	ldrh	r3, [r3, #0]
    d9c0:	0030      	movs	r0, r6
    d9c2:	7033      	strb	r3, [r6, #0]
    d9c4:	4b18      	ldr	r3, [pc, #96]	; (da28 <LORAWAN_TxHandler+0xe4>)
    d9c6:	6073      	str	r3, [r6, #4]
    d9c8:	4b18      	ldr	r3, [pc, #96]	; (da2c <LORAWAN_TxHandler+0xe8>)
    d9ca:	4798      	blx	r3
    d9cc:	2800      	cmp	r0, #0
    d9ce:	d114      	bne.n	d9fa <LORAWAN_TxHandler+0xb6>
    d9d0:	0021      	movs	r1, r4
    d9d2:	220e      	movs	r2, #14
    d9d4:	3184      	adds	r1, #132	; 0x84
    d9d6:	780b      	ldrb	r3, [r1, #0]
    d9d8:	4393      	bics	r3, r2
    d9da:	001a      	movs	r2, r3
    d9dc:	2302      	movs	r3, #2
    d9de:	4313      	orrs	r3, r2
    d9e0:	700b      	strb	r3, [r1, #0]
    d9e2:	2208      	movs	r2, #8
    d9e4:	3494      	adds	r4, #148	; 0x94
    d9e6:	7823      	ldrb	r3, [r4, #0]
    d9e8:	4393      	bics	r3, r2
    d9ea:	7023      	strb	r3, [r4, #0]
    d9ec:	e7c2      	b.n	d974 <LORAWAN_TxHandler+0x30>
    d9ee:	54e5      	strb	r5, [r4, r3]
    d9f0:	002a      	movs	r2, r5
    d9f2:	002b      	movs	r3, r5
    d9f4:	0029      	movs	r1, r5
    d9f6:	0028      	movs	r0, r5
    d9f8:	e7de      	b.n	d9b8 <LORAWAN_TxHandler+0x74>
    d9fa:	0022      	movs	r2, r4
    d9fc:	2120      	movs	r1, #32
    d9fe:	3294      	adds	r2, #148	; 0x94
    da00:	7813      	ldrb	r3, [r2, #0]
    da02:	438b      	bics	r3, r1
    da04:	7013      	strb	r3, [r2, #0]
    da06:	4b03      	ldr	r3, [pc, #12]	; (da14 <LORAWAN_TxHandler+0xd0>)
    da08:	4798      	blx	r3
    da0a:	e7ea      	b.n	d9e2 <LORAWAN_TxHandler+0x9e>
    da0c:	20003170 	.word	0x20003170
    da10:	0000c665 	.word	0x0000c665
    da14:	00010789 	.word	0x00010789
    da18:	0000eeb9 	.word	0x0000eeb9
    da1c:	00010321 	.word	0x00010321
    da20:	000122ad 	.word	0x000122ad
    da24:	0000022a 	.word	0x0000022a
    da28:	200033c8 	.word	0x200033c8
    da2c:	0000e5dd 	.word	0x0000e5dd

0000da30 <LORAWAN_JoinReqHandler>:
    da30:	b530      	push	{r4, r5, lr}
    da32:	b087      	sub	sp, #28
    da34:	466a      	mov	r2, sp
    da36:	2300      	movs	r3, #0
    da38:	4c25      	ldr	r4, [pc, #148]	; (dad0 <LORAWAN_JoinReqHandler+0xa0>)
    da3a:	7013      	strb	r3, [r2, #0]
    da3c:	0023      	movs	r3, r4
    da3e:	33e9      	adds	r3, #233	; 0xe9
    da40:	781b      	ldrb	r3, [r3, #0]
    da42:	7053      	strb	r3, [r2, #1]
    da44:	0023      	movs	r3, r4
    da46:	33e7      	adds	r3, #231	; 0xe7
    da48:	781b      	ldrb	r3, [r3, #0]
    da4a:	7093      	strb	r3, [r2, #2]
    da4c:	0023      	movs	r3, r4
    da4e:	33ff      	adds	r3, #255	; 0xff
    da50:	7f5b      	ldrb	r3, [r3, #29]
    da52:	069b      	lsls	r3, r3, #26
    da54:	d507      	bpl.n	da66 <LORAWAN_JoinReqHandler+0x36>
    da56:	6f63      	ldr	r3, [r4, #116]	; 0x74
    da58:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    da5a:	4313      	orrs	r3, r2
    da5c:	d103      	bne.n	da66 <LORAWAN_JoinReqHandler+0x36>
    da5e:	0023      	movs	r3, r4
    da60:	2201      	movs	r2, #1
    da62:	3380      	adds	r3, #128	; 0x80
    da64:	701a      	strb	r2, [r3, #0]
    da66:	aa03      	add	r2, sp, #12
    da68:	4669      	mov	r1, sp
    da6a:	202e      	movs	r0, #46	; 0x2e
    da6c:	4b19      	ldr	r3, [pc, #100]	; (dad4 <LORAWAN_JoinReqHandler+0xa4>)
    da6e:	4798      	blx	r3
    da70:	2808      	cmp	r0, #8
    da72:	d004      	beq.n	da7e <LORAWAN_JoinReqHandler+0x4e>
    da74:	4b18      	ldr	r3, [pc, #96]	; (dad8 <LORAWAN_JoinReqHandler+0xa8>)
    da76:	4798      	blx	r3
    da78:	2000      	movs	r0, #0
    da7a:	b007      	add	sp, #28
    da7c:	bd30      	pop	{r4, r5, pc}
    da7e:	4b17      	ldr	r3, [pc, #92]	; (dadc <LORAWAN_JoinReqHandler+0xac>)
    da80:	9803      	ldr	r0, [sp, #12]
    da82:	9904      	ldr	r1, [sp, #16]
    da84:	9a05      	ldr	r2, [sp, #20]
    da86:	4798      	blx	r3
    da88:	0023      	movs	r3, r4
    da8a:	33fd      	adds	r3, #253	; 0xfd
    da8c:	781b      	ldrb	r3, [r3, #0]
    da8e:	ad01      	add	r5, sp, #4
    da90:	2b04      	cmp	r3, #4
    da92:	d104      	bne.n	da9e <LORAWAN_JoinReqHandler+0x6e>
    da94:	3b03      	subs	r3, #3
    da96:	702b      	strb	r3, [r5, #0]
    da98:	0028      	movs	r0, r5
    da9a:	4b11      	ldr	r3, [pc, #68]	; (dae0 <LORAWAN_JoinReqHandler+0xb0>)
    da9c:	4798      	blx	r3
    da9e:	2200      	movs	r2, #0
    daa0:	4b10      	ldr	r3, [pc, #64]	; (dae4 <LORAWAN_JoinReqHandler+0xb4>)
    daa2:	54e2      	strb	r2, [r4, r3]
    daa4:	4b10      	ldr	r3, [pc, #64]	; (dae8 <LORAWAN_JoinReqHandler+0xb8>)
    daa6:	4798      	blx	r3
    daa8:	4b10      	ldr	r3, [pc, #64]	; (daec <LORAWAN_JoinReqHandler+0xbc>)
    daaa:	7028      	strb	r0, [r5, #0]
    daac:	606b      	str	r3, [r5, #4]
    daae:	0028      	movs	r0, r5
    dab0:	4b0f      	ldr	r3, [pc, #60]	; (daf0 <LORAWAN_JoinReqHandler+0xc0>)
    dab2:	4798      	blx	r3
    dab4:	2800      	cmp	r0, #0
    dab6:	d001      	beq.n	dabc <LORAWAN_JoinReqHandler+0x8c>
    dab8:	201b      	movs	r0, #27
    daba:	e7db      	b.n	da74 <LORAWAN_JoinReqHandler+0x44>
    dabc:	220e      	movs	r2, #14
    dabe:	3484      	adds	r4, #132	; 0x84
    dac0:	7823      	ldrb	r3, [r4, #0]
    dac2:	4393      	bics	r3, r2
    dac4:	001a      	movs	r2, r3
    dac6:	2302      	movs	r3, #2
    dac8:	4313      	orrs	r3, r2
    daca:	7023      	strb	r3, [r4, #0]
    dacc:	e7d4      	b.n	da78 <LORAWAN_JoinReqHandler+0x48>
    dace:	46c0      	nop			; (mov r8, r8)
    dad0:	20003170 	.word	0x20003170
    dad4:	0000c665 	.word	0x0000c665
    dad8:	0000fde9 	.word	0x0000fde9
    dadc:	00010321 	.word	0x00010321
    dae0:	0000eeb9 	.word	0x0000eeb9
    dae4:	0000022a 	.word	0x0000022a
    dae8:	000101e5 	.word	0x000101e5
    daec:	200033b8 	.word	0x200033b8
    daf0:	0000e5dd 	.word	0x0000e5dd

0000daf4 <LORAWAN_RxHandler>:
    daf4:	b513      	push	{r0, r1, r4, lr}
    daf6:	4b0c      	ldr	r3, [pc, #48]	; (db28 <LORAWAN_RxHandler+0x34>)
    daf8:	781b      	ldrb	r3, [r3, #0]
    dafa:	2b08      	cmp	r3, #8
    dafc:	d011      	beq.n	db22 <LORAWAN_RxHandler+0x2e>
    dafe:	2b10      	cmp	r3, #16
    db00:	d001      	beq.n	db06 <LORAWAN_RxHandler+0x12>
    db02:	2b01      	cmp	r3, #1
    db04:	d10b      	bne.n	db1e <LORAWAN_RxHandler+0x2a>
    db06:	466b      	mov	r3, sp
    db08:	1c9c      	adds	r4, r3, #2
    db0a:	0021      	movs	r1, r4
    db0c:	a801      	add	r0, sp, #4
    db0e:	4b07      	ldr	r3, [pc, #28]	; (db2c <LORAWAN_RxHandler+0x38>)
    db10:	4798      	blx	r3
    db12:	9801      	ldr	r0, [sp, #4]
    db14:	2800      	cmp	r0, #0
    db16:	d002      	beq.n	db1e <LORAWAN_RxHandler+0x2a>
    db18:	7821      	ldrb	r1, [r4, #0]
    db1a:	4b05      	ldr	r3, [pc, #20]	; (db30 <LORAWAN_RxHandler+0x3c>)
    db1c:	4798      	blx	r3
    db1e:	2000      	movs	r0, #0
    db20:	bd16      	pop	{r1, r2, r4, pc}
    db22:	4b04      	ldr	r3, [pc, #16]	; (db34 <LORAWAN_RxHandler+0x40>)
    db24:	4798      	blx	r3
    db26:	e7fa      	b.n	db1e <LORAWAN_RxHandler+0x2a>
    db28:	2000224f 	.word	0x2000224f
    db2c:	0000e7a9 	.word	0x0000e7a9
    db30:	00011209 	.word	0x00011209
    db34:	00010b1d 	.word	0x00010b1d

0000db38 <LORAWAN_PostTask>:
    db38:	b510      	push	{r4, lr}
    db3a:	4b08      	ldr	r3, [pc, #32]	; (db5c <LORAWAN_PostTask+0x24>)
    db3c:	0004      	movs	r4, r0
    db3e:	4798      	blx	r3
    db40:	2201      	movs	r2, #1
    db42:	40a2      	lsls	r2, r4
    db44:	4906      	ldr	r1, [pc, #24]	; (db60 <LORAWAN_PostTask+0x28>)
    db46:	780b      	ldrb	r3, [r1, #0]
    db48:	4313      	orrs	r3, r2
    db4a:	b2db      	uxtb	r3, r3
    db4c:	700b      	strb	r3, [r1, #0]
    db4e:	4b05      	ldr	r3, [pc, #20]	; (db64 <LORAWAN_PostTask+0x2c>)
    db50:	4798      	blx	r3
    db52:	2004      	movs	r0, #4
    db54:	4b04      	ldr	r3, [pc, #16]	; (db68 <LORAWAN_PostTask+0x30>)
    db56:	4798      	blx	r3
    db58:	bd10      	pop	{r4, pc}
    db5a:	46c0      	nop			; (mov r8, r8)
    db5c:	0000c179 	.word	0x0000c179
    db60:	20001e82 	.word	0x20001e82
    db64:	0000c185 	.word	0x0000c185
    db68:	0000d1c5 	.word	0x0000d1c5

0000db6c <LORAWAN_TaskHandler>:
    db6c:	b570      	push	{r4, r5, r6, lr}
    db6e:	2601      	movs	r6, #1
    db70:	4d0e      	ldr	r5, [pc, #56]	; (dbac <LORAWAN_TaskHandler+0x40>)
    db72:	e015      	b.n	dba0 <LORAWAN_TaskHandler+0x34>
    db74:	2400      	movs	r4, #0
    db76:	782b      	ldrb	r3, [r5, #0]
    db78:	4123      	asrs	r3, r4
    db7a:	4233      	tst	r3, r6
    db7c:	d00d      	beq.n	db9a <LORAWAN_TaskHandler+0x2e>
    db7e:	4b0c      	ldr	r3, [pc, #48]	; (dbb0 <LORAWAN_TaskHandler+0x44>)
    db80:	4798      	blx	r3
    db82:	0032      	movs	r2, r6
    db84:	40a2      	lsls	r2, r4
    db86:	782b      	ldrb	r3, [r5, #0]
    db88:	00a4      	lsls	r4, r4, #2
    db8a:	4393      	bics	r3, r2
    db8c:	702b      	strb	r3, [r5, #0]
    db8e:	4b09      	ldr	r3, [pc, #36]	; (dbb4 <LORAWAN_TaskHandler+0x48>)
    db90:	4798      	blx	r3
    db92:	4b09      	ldr	r3, [pc, #36]	; (dbb8 <LORAWAN_TaskHandler+0x4c>)
    db94:	58e3      	ldr	r3, [r4, r3]
    db96:	4798      	blx	r3
    db98:	e7ea      	b.n	db70 <LORAWAN_TaskHandler+0x4>
    db9a:	3401      	adds	r4, #1
    db9c:	2c03      	cmp	r4, #3
    db9e:	d1ea      	bne.n	db76 <LORAWAN_TaskHandler+0xa>
    dba0:	7828      	ldrb	r0, [r5, #0]
    dba2:	b2c0      	uxtb	r0, r0
    dba4:	2800      	cmp	r0, #0
    dba6:	d1e5      	bne.n	db74 <LORAWAN_TaskHandler+0x8>
    dba8:	bd70      	pop	{r4, r5, r6, pc}
    dbaa:	46c0      	nop			; (mov r8, r8)
    dbac:	20001e82 	.word	0x20001e82
    dbb0:	0000c179 	.word	0x0000c179
    dbb4:	0000c185 	.word	0x0000c185
    dbb8:	000182dc 	.word	0x000182dc

0000dbbc <RADIO_GetAttr>:
    dbbc:	b510      	push	{r4, lr}
    dbbe:	000b      	movs	r3, r1
    dbc0:	281f      	cmp	r0, #31
    dbc2:	d900      	bls.n	dbc6 <RADIO_GetAttr+0xa>
    dbc4:	e069      	b.n	dc9a <RADIO_GetAttr+0xde>
    dbc6:	f005 f96b 	bl	12ea0 <__gnu_thumb1_case_uqi>
    dbca:	1410      	.short	0x1410
    dbcc:	68201c19 	.word	0x68201c19
    dbd0:	312e2a27 	.word	0x312e2a27
    dbd4:	3d3a3734 	.word	0x3d3a3734
    dbd8:	46434054 	.word	0x46434054
    dbdc:	68245149 	.word	0x68245149
    dbe0:	68686859 	.word	0x68686859
    dbe4:	5c686817 	.word	0x5c686817
    dbe8:	6360      	.short	0x6360
    dbea:	4a2d      	ldr	r2, [pc, #180]	; (dca0 <RADIO_GetAttr+0xe4>)
    dbec:	7e12      	ldrb	r2, [r2, #24]
    dbee:	701a      	strb	r2, [r3, #0]
    dbf0:	e002      	b.n	dbf8 <RADIO_GetAttr+0x3c>
    dbf2:	4a2b      	ldr	r2, [pc, #172]	; (dca0 <RADIO_GetAttr+0xe4>)
    dbf4:	6812      	ldr	r2, [r2, #0]
    dbf6:	601a      	str	r2, [r3, #0]
    dbf8:	2000      	movs	r0, #0
    dbfa:	bd10      	pop	{r4, pc}
    dbfc:	4a28      	ldr	r2, [pc, #160]	; (dca0 <RADIO_GetAttr+0xe4>)
    dbfe:	6852      	ldr	r2, [r2, #4]
    dc00:	e7f9      	b.n	dbf6 <RADIO_GetAttr+0x3a>
    dc02:	4a27      	ldr	r2, [pc, #156]	; (dca0 <RADIO_GetAttr+0xe4>)
    dc04:	8a92      	ldrh	r2, [r2, #20]
    dc06:	801a      	strh	r2, [r3, #0]
    dc08:	e7f6      	b.n	dbf8 <RADIO_GetAttr+0x3c>
    dc0a:	4a25      	ldr	r2, [pc, #148]	; (dca0 <RADIO_GetAttr+0xe4>)
    dc0c:	3203      	adds	r2, #3
    dc0e:	7fd2      	ldrb	r2, [r2, #31]
    dc10:	e7ed      	b.n	dbee <RADIO_GetAttr+0x32>
    dc12:	4a23      	ldr	r2, [pc, #140]	; (dca0 <RADIO_GetAttr+0xe4>)
    dc14:	3204      	adds	r2, #4
    dc16:	e7fa      	b.n	dc0e <RADIO_GetAttr+0x52>
    dc18:	4a21      	ldr	r2, [pc, #132]	; (dca0 <RADIO_GetAttr+0xe4>)
    dc1a:	3206      	adds	r2, #6
    dc1c:	e7f7      	b.n	dc0e <RADIO_GetAttr+0x52>
    dc1e:	4a20      	ldr	r2, [pc, #128]	; (dca0 <RADIO_GetAttr+0xe4>)
    dc20:	3236      	adds	r2, #54	; 0x36
    dc22:	7812      	ldrb	r2, [r2, #0]
    dc24:	e7e3      	b.n	dbee <RADIO_GetAttr+0x32>
    dc26:	4a1e      	ldr	r2, [pc, #120]	; (dca0 <RADIO_GetAttr+0xe4>)
    dc28:	3205      	adds	r2, #5
    dc2a:	e7f0      	b.n	dc0e <RADIO_GetAttr+0x52>
    dc2c:	4a1c      	ldr	r2, [pc, #112]	; (dca0 <RADIO_GetAttr+0xe4>)
    dc2e:	3234      	adds	r2, #52	; 0x34
    dc30:	e7f7      	b.n	dc22 <RADIO_GetAttr+0x66>
    dc32:	4a1b      	ldr	r2, [pc, #108]	; (dca0 <RADIO_GetAttr+0xe4>)
    dc34:	8ad2      	ldrh	r2, [r2, #22]
    dc36:	e7e6      	b.n	dc06 <RADIO_GetAttr+0x4a>
    dc38:	4a19      	ldr	r2, [pc, #100]	; (dca0 <RADIO_GetAttr+0xe4>)
    dc3a:	3233      	adds	r2, #51	; 0x33
    dc3c:	e7f1      	b.n	dc22 <RADIO_GetAttr+0x66>
    dc3e:	4a18      	ldr	r2, [pc, #96]	; (dca0 <RADIO_GetAttr+0xe4>)
    dc40:	68d2      	ldr	r2, [r2, #12]
    dc42:	e7d8      	b.n	dbf6 <RADIO_GetAttr+0x3a>
    dc44:	4a16      	ldr	r2, [pc, #88]	; (dca0 <RADIO_GetAttr+0xe4>)
    dc46:	6892      	ldr	r2, [r2, #8]
    dc48:	e7d5      	b.n	dbf6 <RADIO_GetAttr+0x3a>
    dc4a:	4a15      	ldr	r2, [pc, #84]	; (dca0 <RADIO_GetAttr+0xe4>)
    dc4c:	3237      	adds	r2, #55	; 0x37
    dc4e:	e7e8      	b.n	dc22 <RADIO_GetAttr+0x66>
    dc50:	4a13      	ldr	r2, [pc, #76]	; (dca0 <RADIO_GetAttr+0xe4>)
    dc52:	3238      	adds	r2, #56	; 0x38
    dc54:	e7e5      	b.n	dc22 <RADIO_GetAttr+0x66>
    dc56:	4a12      	ldr	r2, [pc, #72]	; (dca0 <RADIO_GetAttr+0xe4>)
    dc58:	3239      	adds	r2, #57	; 0x39
    dc5a:	e7e2      	b.n	dc22 <RADIO_GetAttr+0x66>
    dc5c:	4a10      	ldr	r2, [pc, #64]	; (dca0 <RADIO_GetAttr+0xe4>)
    dc5e:	4911      	ldr	r1, [pc, #68]	; (dca4 <RADIO_GetAttr+0xe8>)
    dc60:	3202      	adds	r2, #2
    dc62:	7fd2      	ldrb	r2, [r2, #31]
    dc64:	0018      	movs	r0, r3
    dc66:	4b10      	ldr	r3, [pc, #64]	; (dca8 <RADIO_GetAttr+0xec>)
    dc68:	4798      	blx	r3
    dc6a:	e7c5      	b.n	dbf8 <RADIO_GetAttr+0x3c>
    dc6c:	4a0c      	ldr	r2, [pc, #48]	; (dca0 <RADIO_GetAttr+0xe4>)
    dc6e:	3202      	adds	r2, #2
    dc70:	e7cd      	b.n	dc0e <RADIO_GetAttr+0x52>
    dc72:	4a0b      	ldr	r2, [pc, #44]	; (dca0 <RADIO_GetAttr+0xe4>)
    dc74:	3232      	adds	r2, #50	; 0x32
    dc76:	7812      	ldrb	r2, [r2, #0]
    dc78:	b252      	sxtb	r2, r2
    dc7a:	e7b8      	b.n	dbee <RADIO_GetAttr+0x32>
    dc7c:	4a08      	ldr	r2, [pc, #32]	; (dca0 <RADIO_GetAttr+0xe4>)
    dc7e:	3235      	adds	r2, #53	; 0x35
    dc80:	e7cf      	b.n	dc22 <RADIO_GetAttr+0x66>
    dc82:	4907      	ldr	r1, [pc, #28]	; (dca0 <RADIO_GetAttr+0xe4>)
    dc84:	2206      	movs	r2, #6
    dc86:	313c      	adds	r1, #60	; 0x3c
    dc88:	e7ec      	b.n	dc64 <RADIO_GetAttr+0xa8>
    dc8a:	4a05      	ldr	r2, [pc, #20]	; (dca0 <RADIO_GetAttr+0xe4>)
    dc8c:	3254      	adds	r2, #84	; 0x54
    dc8e:	e7c8      	b.n	dc22 <RADIO_GetAttr+0x66>
    dc90:	4a03      	ldr	r2, [pc, #12]	; (dca0 <RADIO_GetAttr+0xe4>)
    dc92:	3256      	adds	r2, #86	; 0x56
    dc94:	2100      	movs	r1, #0
    dc96:	5e52      	ldrsh	r2, [r2, r1]
    dc98:	e7b5      	b.n	dc06 <RADIO_GetAttr+0x4a>
    dc9a:	2005      	movs	r0, #5
    dc9c:	e7ad      	b.n	dbfa <RADIO_GetAttr+0x3e>
    dc9e:	46c0      	nop			; (mov r8, r8)
    dca0:	20002d78 	.word	0x20002d78
    dca4:	20002d91 	.word	0x20002d91
    dca8:	0001613f 	.word	0x0001613f

0000dcac <RADIO_SetAttr>:
    dcac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    dcae:	4b71      	ldr	r3, [pc, #452]	; (de74 <RADIO_SetAttr+0x1c8>)
    dcb0:	0004      	movs	r4, r0
    dcb2:	000d      	movs	r5, r1
    dcb4:	4798      	blx	r3
    dcb6:	2304      	movs	r3, #4
    dcb8:	2801      	cmp	r0, #1
    dcba:	d11a      	bne.n	dcf2 <RADIO_SetAttr+0x46>
    dcbc:	2c1d      	cmp	r4, #29
    dcbe:	d900      	bls.n	dcc2 <RADIO_SetAttr+0x16>
    dcc0:	e0d5      	b.n	de6e <RADIO_SetAttr+0x1c2>
    dcc2:	0020      	movs	r0, r4
    dcc4:	f005 f8ec 	bl	12ea0 <__gnu_thumb1_case_uqi>
    dcc8:	605c4844 	.word	0x605c4844
    dccc:	7770d364 	.word	0x7770d364
    dcd0:	908c8480 	.word	0x908c8480
    dcd4:	a0d39c99 	.word	0xa0d39c99
    dcd8:	c2bab1a8 	.word	0xc2bab1a8
    dcdc:	d3cad369 	.word	0xd3cad369
    dce0:	d30fd3d3 	.word	0xd30fd3d3
    dce4:	17d3      	.short	0x17d3
    dce6:	2303      	movs	r3, #3
    dce8:	2d00      	cmp	r5, #0
    dcea:	d002      	beq.n	dcf2 <RADIO_SetAttr+0x46>
    dcec:	4b62      	ldr	r3, [pc, #392]	; (de78 <RADIO_SetAttr+0x1cc>)
    dcee:	611d      	str	r5, [r3, #16]
    dcf0:	2300      	movs	r3, #0
    dcf2:	0018      	movs	r0, r3
    dcf4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    dcf6:	796c      	ldrb	r4, [r5, #5]
    dcf8:	2c00      	cmp	r4, #0
    dcfa:	d109      	bne.n	dd10 <RADIO_SetAttr+0x64>
    dcfc:	4b5e      	ldr	r3, [pc, #376]	; (de78 <RADIO_SetAttr+0x1cc>)
    dcfe:	001a      	movs	r2, r3
    dd00:	649c      	str	r4, [r3, #72]	; 0x48
    dd02:	879c      	strh	r4, [r3, #60]	; 0x3c
    dd04:	87dc      	strh	r4, [r3, #62]	; 0x3e
    dd06:	3240      	adds	r2, #64	; 0x40
    dd08:	3341      	adds	r3, #65	; 0x41
    dd0a:	7014      	strb	r4, [r2, #0]
    dd0c:	701c      	strb	r4, [r3, #0]
    dd0e:	e7ef      	b.n	dcf0 <RADIO_SetAttr+0x44>
    dd10:	882f      	ldrh	r7, [r5, #0]
    dd12:	2303      	movs	r3, #3
    dd14:	2f00      	cmp	r7, #0
    dd16:	d0ec      	beq.n	dcf2 <RADIO_SetAttr+0x46>
    dd18:	792e      	ldrb	r6, [r5, #4]
    dd1a:	2e00      	cmp	r6, #0
    dd1c:	d0e9      	beq.n	dcf2 <RADIO_SetAttr+0x46>
    dd1e:	20fa      	movs	r0, #250	; 0xfa
    dd20:	2202      	movs	r2, #2
    dd22:	5eab      	ldrsh	r3, [r5, r2]
    dd24:	0080      	lsls	r0, r0, #2
    dd26:	0031      	movs	r1, r6
    dd28:	9301      	str	r3, [sp, #4]
    dd2a:	4378      	muls	r0, r7
    dd2c:	4b53      	ldr	r3, [pc, #332]	; (de7c <RADIO_SetAttr+0x1d0>)
    dd2e:	4798      	blx	r3
    dd30:	4b53      	ldr	r3, [pc, #332]	; (de80 <RADIO_SetAttr+0x1d4>)
    dd32:	4798      	blx	r3
    dd34:	4b53      	ldr	r3, [pc, #332]	; (de84 <RADIO_SetAttr+0x1d8>)
    dd36:	4798      	blx	r3
    dd38:	466b      	mov	r3, sp
    dd3a:	4d4f      	ldr	r5, [pc, #316]	; (de78 <RADIO_SetAttr+0x1cc>)
    dd3c:	889b      	ldrh	r3, [r3, #4]
    dd3e:	64a8      	str	r0, [r5, #72]	; 0x48
    dd40:	87eb      	strh	r3, [r5, #62]	; 0x3e
    dd42:	002b      	movs	r3, r5
    dd44:	87af      	strh	r7, [r5, #60]	; 0x3c
    dd46:	3340      	adds	r3, #64	; 0x40
    dd48:	3541      	adds	r5, #65	; 0x41
    dd4a:	701e      	strb	r6, [r3, #0]
    dd4c:	702c      	strb	r4, [r5, #0]
    dd4e:	e7cf      	b.n	dcf0 <RADIO_SetAttr+0x44>
    dd50:	782a      	ldrb	r2, [r5, #0]
    dd52:	4b49      	ldr	r3, [pc, #292]	; (de78 <RADIO_SetAttr+0x1cc>)
    dd54:	761a      	strb	r2, [r3, #24]
    dd56:	e7cb      	b.n	dcf0 <RADIO_SetAttr+0x44>
    dd58:	4b4b      	ldr	r3, [pc, #300]	; (de88 <RADIO_SetAttr+0x1dc>)
    dd5a:	682a      	ldr	r2, [r5, #0]
    dd5c:	18d1      	adds	r1, r2, r3
    dd5e:	4b4b      	ldr	r3, [pc, #300]	; (de8c <RADIO_SetAttr+0x1e0>)
    dd60:	4299      	cmp	r1, r3
    dd62:	d90a      	bls.n	dd7a <RADIO_SetAttr+0xce>
    dd64:	4b4a      	ldr	r3, [pc, #296]	; (de90 <RADIO_SetAttr+0x1e4>)
    dd66:	494b      	ldr	r1, [pc, #300]	; (de94 <RADIO_SetAttr+0x1e8>)
    dd68:	18d3      	adds	r3, r2, r3
    dd6a:	428b      	cmp	r3, r1
    dd6c:	d905      	bls.n	dd7a <RADIO_SetAttr+0xce>
    dd6e:	494a      	ldr	r1, [pc, #296]	; (de98 <RADIO_SetAttr+0x1ec>)
    dd70:	484a      	ldr	r0, [pc, #296]	; (de9c <RADIO_SetAttr+0x1f0>)
    dd72:	1851      	adds	r1, r2, r1
    dd74:	2305      	movs	r3, #5
    dd76:	4281      	cmp	r1, r0
    dd78:	d8bb      	bhi.n	dcf2 <RADIO_SetAttr+0x46>
    dd7a:	4b3f      	ldr	r3, [pc, #252]	; (de78 <RADIO_SetAttr+0x1cc>)
    dd7c:	601a      	str	r2, [r3, #0]
    dd7e:	e7b7      	b.n	dcf0 <RADIO_SetAttr+0x44>
    dd80:	682a      	ldr	r2, [r5, #0]
    dd82:	4b3d      	ldr	r3, [pc, #244]	; (de78 <RADIO_SetAttr+0x1cc>)
    dd84:	605a      	str	r2, [r3, #4]
    dd86:	e7b3      	b.n	dcf0 <RADIO_SetAttr+0x44>
    dd88:	882a      	ldrh	r2, [r5, #0]
    dd8a:	4b3b      	ldr	r3, [pc, #236]	; (de78 <RADIO_SetAttr+0x1cc>)
    dd8c:	829a      	strh	r2, [r3, #20]
    dd8e:	e7af      	b.n	dcf0 <RADIO_SetAttr+0x44>
    dd90:	4b39      	ldr	r3, [pc, #228]	; (de78 <RADIO_SetAttr+0x1cc>)
    dd92:	782a      	ldrb	r2, [r5, #0]
    dd94:	3303      	adds	r3, #3
    dd96:	77da      	strb	r2, [r3, #31]
    dd98:	e7aa      	b.n	dcf0 <RADIO_SetAttr+0x44>
    dd9a:	782a      	ldrb	r2, [r5, #0]
    dd9c:	2305      	movs	r3, #5
    dd9e:	2a01      	cmp	r2, #1
    dda0:	d8a7      	bhi.n	dcf2 <RADIO_SetAttr+0x46>
    dda2:	4b35      	ldr	r3, [pc, #212]	; (de78 <RADIO_SetAttr+0x1cc>)
    dda4:	3304      	adds	r3, #4
    dda6:	e7f6      	b.n	dd96 <RADIO_SetAttr+0xea>
    dda8:	782a      	ldrb	r2, [r5, #0]
    ddaa:	2305      	movs	r3, #5
    ddac:	2a01      	cmp	r2, #1
    ddae:	d8a0      	bhi.n	dcf2 <RADIO_SetAttr+0x46>
    ddb0:	4b31      	ldr	r3, [pc, #196]	; (de78 <RADIO_SetAttr+0x1cc>)
    ddb2:	3306      	adds	r3, #6
    ddb4:	e7ef      	b.n	dd96 <RADIO_SetAttr+0xea>
    ddb6:	782a      	ldrb	r2, [r5, #0]
    ddb8:	2305      	movs	r3, #5
    ddba:	1fd1      	subs	r1, r2, #7
    ddbc:	2902      	cmp	r1, #2
    ddbe:	d898      	bhi.n	dcf2 <RADIO_SetAttr+0x46>
    ddc0:	4b2d      	ldr	r3, [pc, #180]	; (de78 <RADIO_SetAttr+0x1cc>)
    ddc2:	3336      	adds	r3, #54	; 0x36
    ddc4:	701a      	strb	r2, [r3, #0]
    ddc6:	e793      	b.n	dcf0 <RADIO_SetAttr+0x44>
    ddc8:	4b2b      	ldr	r3, [pc, #172]	; (de78 <RADIO_SetAttr+0x1cc>)
    ddca:	782a      	ldrb	r2, [r5, #0]
    ddcc:	3305      	adds	r3, #5
    ddce:	e7e2      	b.n	dd96 <RADIO_SetAttr+0xea>
    ddd0:	782a      	ldrb	r2, [r5, #0]
    ddd2:	2305      	movs	r3, #5
    ddd4:	2a01      	cmp	r2, #1
    ddd6:	d900      	bls.n	ddda <RADIO_SetAttr+0x12e>
    ddd8:	e78b      	b.n	dcf2 <RADIO_SetAttr+0x46>
    ddda:	4b27      	ldr	r3, [pc, #156]	; (de78 <RADIO_SetAttr+0x1cc>)
    dddc:	3334      	adds	r3, #52	; 0x34
    ddde:	e7f1      	b.n	ddc4 <RADIO_SetAttr+0x118>
    dde0:	882a      	ldrh	r2, [r5, #0]
    dde2:	4b25      	ldr	r3, [pc, #148]	; (de78 <RADIO_SetAttr+0x1cc>)
    dde4:	82da      	strh	r2, [r3, #22]
    dde6:	e783      	b.n	dcf0 <RADIO_SetAttr+0x44>
    dde8:	782a      	ldrb	r2, [r5, #0]
    ddea:	2305      	movs	r3, #5
    ddec:	1e51      	subs	r1, r2, #1
    ddee:	2903      	cmp	r1, #3
    ddf0:	d900      	bls.n	ddf4 <RADIO_SetAttr+0x148>
    ddf2:	e77e      	b.n	dcf2 <RADIO_SetAttr+0x46>
    ddf4:	4b20      	ldr	r3, [pc, #128]	; (de78 <RADIO_SetAttr+0x1cc>)
    ddf6:	3333      	adds	r3, #51	; 0x33
    ddf8:	e7e4      	b.n	ddc4 <RADIO_SetAttr+0x118>
    ddfa:	4b1f      	ldr	r3, [pc, #124]	; (de78 <RADIO_SetAttr+0x1cc>)
    ddfc:	682a      	ldr	r2, [r5, #0]
    ddfe:	60da      	str	r2, [r3, #12]
    de00:	682a      	ldr	r2, [r5, #0]
    de02:	4b1d      	ldr	r3, [pc, #116]	; (de78 <RADIO_SetAttr+0x1cc>)
    de04:	609a      	str	r2, [r3, #8]
    de06:	e773      	b.n	dcf0 <RADIO_SetAttr+0x44>
    de08:	782a      	ldrb	r2, [r5, #0]
    de0a:	2305      	movs	r3, #5
    de0c:	2a03      	cmp	r2, #3
    de0e:	d900      	bls.n	de12 <RADIO_SetAttr+0x166>
    de10:	e76f      	b.n	dcf2 <RADIO_SetAttr+0x46>
    de12:	4b19      	ldr	r3, [pc, #100]	; (de78 <RADIO_SetAttr+0x1cc>)
    de14:	3337      	adds	r3, #55	; 0x37
    de16:	e7d5      	b.n	ddc4 <RADIO_SetAttr+0x118>
    de18:	782a      	ldrb	r2, [r5, #0]
    de1a:	2305      	movs	r3, #5
    de1c:	1e51      	subs	r1, r2, #1
    de1e:	2916      	cmp	r1, #22
    de20:	d900      	bls.n	de24 <RADIO_SetAttr+0x178>
    de22:	e766      	b.n	dcf2 <RADIO_SetAttr+0x46>
    de24:	4b14      	ldr	r3, [pc, #80]	; (de78 <RADIO_SetAttr+0x1cc>)
    de26:	3338      	adds	r3, #56	; 0x38
    de28:	e7cc      	b.n	ddc4 <RADIO_SetAttr+0x118>
    de2a:	782a      	ldrb	r2, [r5, #0]
    de2c:	2305      	movs	r3, #5
    de2e:	1e51      	subs	r1, r2, #1
    de30:	2916      	cmp	r1, #22
    de32:	d900      	bls.n	de36 <RADIO_SetAttr+0x18a>
    de34:	e75d      	b.n	dcf2 <RADIO_SetAttr+0x46>
    de36:	4b10      	ldr	r3, [pc, #64]	; (de78 <RADIO_SetAttr+0x1cc>)
    de38:	3339      	adds	r3, #57	; 0x39
    de3a:	e7c3      	b.n	ddc4 <RADIO_SetAttr+0x118>
    de3c:	4b0e      	ldr	r3, [pc, #56]	; (de78 <RADIO_SetAttr+0x1cc>)
    de3e:	0029      	movs	r1, r5
    de40:	3302      	adds	r3, #2
    de42:	7fda      	ldrb	r2, [r3, #31]
    de44:	4816      	ldr	r0, [pc, #88]	; (dea0 <RADIO_SetAttr+0x1f4>)
    de46:	4b17      	ldr	r3, [pc, #92]	; (dea4 <RADIO_SetAttr+0x1f8>)
    de48:	4798      	blx	r3
    de4a:	e751      	b.n	dcf0 <RADIO_SetAttr+0x44>
    de4c:	782b      	ldrb	r3, [r5, #0]
    de4e:	1c1a      	adds	r2, r3, #0
    de50:	2b08      	cmp	r3, #8
    de52:	d900      	bls.n	de56 <RADIO_SetAttr+0x1aa>
    de54:	2208      	movs	r2, #8
    de56:	4b08      	ldr	r3, [pc, #32]	; (de78 <RADIO_SetAttr+0x1cc>)
    de58:	3302      	adds	r3, #2
    de5a:	e79c      	b.n	dd96 <RADIO_SetAttr+0xea>
    de5c:	2305      	movs	r3, #5
    de5e:	782a      	ldrb	r2, [r5, #0]
    de60:	1fd1      	subs	r1, r2, #7
    de62:	4299      	cmp	r1, r3
    de64:	d900      	bls.n	de68 <RADIO_SetAttr+0x1bc>
    de66:	e744      	b.n	dcf2 <RADIO_SetAttr+0x46>
    de68:	4b03      	ldr	r3, [pc, #12]	; (de78 <RADIO_SetAttr+0x1cc>)
    de6a:	3335      	adds	r3, #53	; 0x35
    de6c:	e7aa      	b.n	ddc4 <RADIO_SetAttr+0x118>
    de6e:	2305      	movs	r3, #5
    de70:	e73f      	b.n	dcf2 <RADIO_SetAttr+0x46>
    de72:	46c0      	nop			; (mov r8, r8)
    de74:	0000e5c1 	.word	0x0000e5c1
    de78:	20002d78 	.word	0x20002d78
    de7c:	00012ff1 	.word	0x00012ff1
    de80:	00014235 	.word	0x00014235
    de84:	0001334d 	.word	0x0001334d
    de88:	f7d58bc0 	.word	0xf7d58bc0
    de8c:	0243d580 	.word	0x0243d580
    de90:	e78fe580 	.word	0xe78fe580
    de94:	06dac2c0 	.word	0x06dac2c0
    de98:	cc9eec80 	.word	0xcc9eec80
    de9c:	096ae380 	.word	0x096ae380
    dea0:	20002d91 	.word	0x20002d91
    dea4:	0001613f 	.word	0x0001613f

0000dea8 <RADIO_Init>:
    dea8:	b510      	push	{r4, lr}
    deaa:	4b0c      	ldr	r3, [pc, #48]	; (dedc <RADIO_Init+0x34>)
    deac:	4798      	blx	r3
    deae:	4b0c      	ldr	r3, [pc, #48]	; (dee0 <RADIO_Init+0x38>)
    deb0:	201f      	movs	r0, #31
    deb2:	4798      	blx	r3
    deb4:	4c0b      	ldr	r4, [pc, #44]	; (dee4 <RADIO_Init+0x3c>)
    deb6:	490c      	ldr	r1, [pc, #48]	; (dee8 <RADIO_Init+0x40>)
    deb8:	2001      	movs	r0, #1
    deba:	47a0      	blx	r4
    debc:	490b      	ldr	r1, [pc, #44]	; (deec <RADIO_Init+0x44>)
    debe:	2002      	movs	r0, #2
    dec0:	47a0      	blx	r4
    dec2:	490b      	ldr	r1, [pc, #44]	; (def0 <RADIO_Init+0x48>)
    dec4:	2004      	movs	r0, #4
    dec6:	47a0      	blx	r4
    dec8:	490a      	ldr	r1, [pc, #40]	; (def4 <RADIO_Init+0x4c>)
    deca:	2008      	movs	r0, #8
    decc:	47a0      	blx	r4
    dece:	490a      	ldr	r1, [pc, #40]	; (def8 <RADIO_Init+0x50>)
    ded0:	2010      	movs	r0, #16
    ded2:	47a0      	blx	r4
    ded4:	4909      	ldr	r1, [pc, #36]	; (defc <RADIO_Init+0x54>)
    ded6:	2020      	movs	r0, #32
    ded8:	47a0      	blx	r4
    deda:	bd10      	pop	{r4, pc}
    dedc:	0000ecc5 	.word	0x0000ecc5
    dee0:	0000e5cd 	.word	0x0000e5cd
    dee4:	0000c095 	.word	0x0000c095
    dee8:	0000e359 	.word	0x0000e359
    deec:	0000e3d1 	.word	0x0000e3d1
    def0:	0000e441 	.word	0x0000e441
    def4:	0000e491 	.word	0x0000e491
    def8:	0000e4b9 	.word	0x0000e4b9
    defc:	0000e4e1 	.word	0x0000e4e1

0000df00 <Radio_WriteFrequency>:
    df00:	b570      	push	{r4, r5, r6, lr}
    df02:	490d      	ldr	r1, [pc, #52]	; (df38 <Radio_WriteFrequency+0x38>)
    df04:	4d0d      	ldr	r5, [pc, #52]	; (df3c <Radio_WriteFrequency+0x3c>)
    df06:	0006      	movs	r6, r0
    df08:	47a8      	blx	r5
    df0a:	4b0d      	ldr	r3, [pc, #52]	; (df40 <Radio_WriteFrequency+0x40>)
    df0c:	0004      	movs	r4, r0
    df0e:	490a      	ldr	r1, [pc, #40]	; (df38 <Radio_WriteFrequency+0x38>)
    df10:	0030      	movs	r0, r6
    df12:	4798      	blx	r3
    df14:	0208      	lsls	r0, r1, #8
    df16:	4908      	ldr	r1, [pc, #32]	; (df38 <Radio_WriteFrequency+0x38>)
    df18:	47a8      	blx	r5
    df1a:	0224      	lsls	r4, r4, #8
    df1c:	1904      	adds	r4, r0, r4
    df1e:	0c21      	lsrs	r1, r4, #16
    df20:	4d08      	ldr	r5, [pc, #32]	; (df44 <Radio_WriteFrequency+0x44>)
    df22:	b2c9      	uxtb	r1, r1
    df24:	2006      	movs	r0, #6
    df26:	47a8      	blx	r5
    df28:	0a21      	lsrs	r1, r4, #8
    df2a:	b2c9      	uxtb	r1, r1
    df2c:	2007      	movs	r0, #7
    df2e:	47a8      	blx	r5
    df30:	b2e1      	uxtb	r1, r4
    df32:	2008      	movs	r0, #8
    df34:	47a8      	blx	r5
    df36:	bd70      	pop	{r4, r5, r6, pc}
    df38:	00003d09 	.word	0x00003d09
    df3c:	00012edd 	.word	0x00012edd
    df40:	00012fe9 	.word	0x00012fe9
    df44:	0000bfc1 	.word	0x0000bfc1

0000df48 <Radio_WriteConfiguration>:
    df48:	b5f0      	push	{r4, r5, r6, r7, lr}
    df4a:	4cb0      	ldr	r4, [pc, #704]	; (e20c <Radio_WriteConfiguration+0x2c4>)
    df4c:	2200      	movs	r2, #0
    df4e:	0023      	movs	r3, r4
    df50:	b085      	sub	sp, #20
    df52:	9002      	str	r0, [sp, #8]
    df54:	3334      	adds	r3, #52	; 0x34
    df56:	0010      	movs	r0, r2
    df58:	7819      	ldrb	r1, [r3, #0]
    df5a:	4bad      	ldr	r3, [pc, #692]	; (e210 <Radio_WriteConfiguration+0x2c8>)
    df5c:	4798      	blx	r3
    df5e:	4bad      	ldr	r3, [pc, #692]	; (e214 <Radio_WriteConfiguration+0x2cc>)
    df60:	6820      	ldr	r0, [r4, #0]
    df62:	4798      	blx	r3
    df64:	1ce3      	adds	r3, r4, #3
    df66:	1d62      	adds	r2, r4, #5
    df68:	7fdb      	ldrb	r3, [r3, #31]
    df6a:	7fd2      	ldrb	r2, [r2, #31]
    df6c:	b25b      	sxtb	r3, r3
    df6e:	4eaa      	ldr	r6, [pc, #680]	; (e218 <Radio_WriteConfiguration+0x2d0>)
    df70:	4daa      	ldr	r5, [pc, #680]	; (e21c <Radio_WriteConfiguration+0x2d4>)
    df72:	2a00      	cmp	r2, #0
    df74:	d000      	beq.n	df78 <Radio_WriteConfiguration+0x30>
    df76:	e0fc      	b.n	e172 <Radio_WriteConfiguration+0x22a>
    df78:	1c1f      	adds	r7, r3, #0
    df7a:	2b0f      	cmp	r3, #15
    df7c:	dc00      	bgt.n	df80 <Radio_WriteConfiguration+0x38>
    df7e:	e0ec      	b.n	e15a <Radio_WriteConfiguration+0x212>
    df80:	270f      	movs	r7, #15
    df82:	b27b      	sxtb	r3, r7
    df84:	204d      	movs	r0, #77	; 0x4d
    df86:	9301      	str	r3, [sp, #4]
    df88:	47b0      	blx	r6
    df8a:	21f8      	movs	r1, #248	; 0xf8
    df8c:	4008      	ands	r0, r1
    df8e:	39f4      	subs	r1, #244	; 0xf4
    df90:	4301      	orrs	r1, r0
    df92:	204d      	movs	r0, #77	; 0x4d
    df94:	47a8      	blx	r5
    df96:	b27b      	sxtb	r3, r7
    df98:	2b00      	cmp	r3, #0
    df9a:	db00      	blt.n	df9e <Radio_WriteConfiguration+0x56>
    df9c:	e0e4      	b.n	e168 <Radio_WriteConfiguration+0x220>
    df9e:	3703      	adds	r7, #3
    dfa0:	b2f9      	uxtb	r1, r7
    dfa2:	2720      	movs	r7, #32
    dfa4:	4339      	orrs	r1, r7
    dfa6:	2009      	movs	r0, #9
    dfa8:	47a8      	blx	r5
    dfaa:	0023      	movs	r3, r4
    dfac:	3334      	adds	r3, #52	; 0x34
    dfae:	781f      	ldrb	r7, [r3, #0]
    dfb0:	2f01      	cmp	r7, #1
    dfb2:	d000      	beq.n	dfb6 <Radio_WriteConfiguration+0x6e>
    dfb4:	e144      	b.n	e240 <Radio_WriteConfiguration+0x2f8>
    dfb6:	7e21      	ldrb	r1, [r4, #24]
    dfb8:	2039      	movs	r0, #57	; 0x39
    dfba:	47a8      	blx	r5
    dfbc:	4b98      	ldr	r3, [pc, #608]	; (e220 <Radio_WriteConfiguration+0x2d8>)
    dfbe:	201d      	movs	r0, #29
    dfc0:	7819      	ldrb	r1, [r3, #0]
    dfc2:	0023      	movs	r3, r4
    dfc4:	3333      	adds	r3, #51	; 0x33
    dfc6:	781b      	ldrb	r3, [r3, #0]
    dfc8:	0109      	lsls	r1, r1, #4
    dfca:	005b      	lsls	r3, r3, #1
    dfcc:	4319      	orrs	r1, r3
    dfce:	1de3      	adds	r3, r4, #7
    dfd0:	7fdb      	ldrb	r3, [r3, #31]
    dfd2:	401f      	ands	r7, r3
    dfd4:	4339      	orrs	r1, r7
    dfd6:	b2c9      	uxtb	r1, r1
    dfd8:	47a8      	blx	r5
    dfda:	1d23      	adds	r3, r4, #4
    dfdc:	7fd9      	ldrb	r1, [r3, #31]
    dfde:	2304      	movs	r3, #4
    dfe0:	0089      	lsls	r1, r1, #2
    dfe2:	4019      	ands	r1, r3
    dfe4:	0023      	movs	r3, r4
    dfe6:	3335      	adds	r3, #53	; 0x35
    dfe8:	781b      	ldrb	r3, [r3, #0]
    dfea:	201e      	movs	r0, #30
    dfec:	011b      	lsls	r3, r3, #4
    dfee:	4319      	orrs	r1, r3
    dff0:	9b02      	ldr	r3, [sp, #8]
    dff2:	059b      	lsls	r3, r3, #22
    dff4:	0f9b      	lsrs	r3, r3, #30
    dff6:	4319      	orrs	r1, r3
    dff8:	b2c9      	uxtb	r1, r1
    dffa:	47a8      	blx	r5
    dffc:	2300      	movs	r3, #0
    dffe:	8ae1      	ldrh	r1, [r4, #22]
    e000:	4299      	cmp	r1, r3
    e002:	d011      	beq.n	e028 <Radio_WriteConfiguration+0xe0>
    e004:	4a86      	ldr	r2, [pc, #536]	; (e220 <Radio_WriteConfiguration+0x2d8>)
    e006:	7812      	ldrb	r2, [r2, #0]
    e008:	2a08      	cmp	r2, #8
    e00a:	d100      	bne.n	e00e <Radio_WriteConfiguration+0xc6>
    e00c:	e0e4      	b.n	e1d8 <Radio_WriteConfiguration+0x290>
    e00e:	2a09      	cmp	r2, #9
    e010:	d100      	bne.n	e014 <Radio_WriteConfiguration+0xcc>
    e012:	e0e3      	b.n	e1dc <Radio_WriteConfiguration+0x294>
    e014:	2a07      	cmp	r2, #7
    e016:	d000      	beq.n	e01a <Radio_WriteConfiguration+0xd2>
    e018:	e0e3      	b.n	e1e2 <Radio_WriteConfiguration+0x29a>
    e01a:	337d      	adds	r3, #125	; 0x7d
    e01c:	4359      	muls	r1, r3
    e01e:	0023      	movs	r3, r4
    e020:	3335      	adds	r3, #53	; 0x35
    e022:	781b      	ldrb	r3, [r3, #0]
    e024:	40d9      	lsrs	r1, r3
    e026:	000b      	movs	r3, r1
    e028:	b2d9      	uxtb	r1, r3
    e02a:	2024      	movs	r0, #36	; 0x24
    e02c:	4d7b      	ldr	r5, [pc, #492]	; (e21c <Radio_WriteConfiguration+0x2d4>)
    e02e:	47a8      	blx	r5
    e030:	466b      	mov	r3, sp
    e032:	201f      	movs	r0, #31
    e034:	7a19      	ldrb	r1, [r3, #8]
    e036:	47a8      	blx	r5
    e038:	2026      	movs	r0, #38	; 0x26
    e03a:	47b0      	blx	r6
    e03c:	0023      	movs	r3, r4
    e03e:	3335      	adds	r3, #53	; 0x35
    e040:	781b      	ldrb	r3, [r3, #0]
    e042:	2b0c      	cmp	r3, #12
    e044:	d105      	bne.n	e052 <Radio_WriteConfiguration+0x10a>
    e046:	0023      	movs	r3, r4
    e048:	3336      	adds	r3, #54	; 0x36
    e04a:	781b      	ldrb	r3, [r3, #0]
    e04c:	3b07      	subs	r3, #7
    e04e:	2b01      	cmp	r3, #1
    e050:	d906      	bls.n	e060 <Radio_WriteConfiguration+0x118>
    e052:	6b62      	ldr	r2, [r4, #52]	; 0x34
    e054:	4b73      	ldr	r3, [pc, #460]	; (e224 <Radio_WriteConfiguration+0x2dc>)
    e056:	4013      	ands	r3, r2
    e058:	4a73      	ldr	r2, [pc, #460]	; (e228 <Radio_WriteConfiguration+0x2e0>)
    e05a:	4293      	cmp	r3, r2
    e05c:	d000      	beq.n	e060 <Radio_WriteConfiguration+0x118>
    e05e:	e0c2      	b.n	e1e6 <Radio_WriteConfiguration+0x29e>
    e060:	2108      	movs	r1, #8
    e062:	4308      	orrs	r0, r1
    e064:	b2c0      	uxtb	r0, r0
    e066:	2104      	movs	r1, #4
    e068:	4301      	orrs	r1, r0
    e06a:	2026      	movs	r0, #38	; 0x26
    e06c:	47a8      	blx	r5
    e06e:	2031      	movs	r0, #49	; 0x31
    e070:	47b0      	blx	r6
    e072:	21f8      	movs	r1, #248	; 0xf8
    e074:	4008      	ands	r0, r1
    e076:	39f5      	subs	r1, #245	; 0xf5
    e078:	4301      	orrs	r1, r0
    e07a:	2031      	movs	r0, #49	; 0x31
    e07c:	47a8      	blx	r5
    e07e:	210a      	movs	r1, #10
    e080:	2037      	movs	r0, #55	; 0x37
    e082:	47a8      	blx	r5
    e084:	0023      	movs	r3, r4
    e086:	3331      	adds	r3, #49	; 0x31
    e088:	781b      	ldrb	r3, [r3, #0]
    e08a:	2b12      	cmp	r3, #18
    e08c:	d11e      	bne.n	e0cc <Radio_WriteConfiguration+0x184>
    e08e:	0023      	movs	r3, r4
    e090:	3336      	adds	r3, #54	; 0x36
    e092:	781b      	ldrb	r3, [r3, #0]
    e094:	3b07      	subs	r3, #7
    e096:	2b01      	cmp	r3, #1
    e098:	d80b      	bhi.n	e0b2 <Radio_WriteConfiguration+0x16a>
    e09a:	2031      	movs	r0, #49	; 0x31
    e09c:	47b0      	blx	r6
    e09e:	217f      	movs	r1, #127	; 0x7f
    e0a0:	4001      	ands	r1, r0
    e0a2:	2031      	movs	r0, #49	; 0x31
    e0a4:	47a8      	blx	r5
    e0a6:	2140      	movs	r1, #64	; 0x40
    e0a8:	202f      	movs	r0, #47	; 0x2f
    e0aa:	47a8      	blx	r5
    e0ac:	2100      	movs	r1, #0
    e0ae:	2030      	movs	r0, #48	; 0x30
    e0b0:	47a8      	blx	r5
    e0b2:	0023      	movs	r3, r4
    e0b4:	3336      	adds	r3, #54	; 0x36
    e0b6:	781b      	ldrb	r3, [r3, #0]
    e0b8:	2b09      	cmp	r3, #9
    e0ba:	d107      	bne.n	e0cc <Radio_WriteConfiguration+0x184>
    e0bc:	2031      	movs	r0, #49	; 0x31
    e0be:	47b0      	blx	r6
    e0c0:	2180      	movs	r1, #128	; 0x80
    e0c2:	4249      	negs	r1, r1
    e0c4:	4301      	orrs	r1, r0
    e0c6:	b2c9      	uxtb	r1, r1
    e0c8:	2031      	movs	r0, #49	; 0x31
    e0ca:	47a8      	blx	r5
    e0cc:	2033      	movs	r0, #51	; 0x33
    e0ce:	47b0      	blx	r6
    e0d0:	1da3      	adds	r3, r4, #6
    e0d2:	7fd9      	ldrb	r1, [r3, #31]
    e0d4:	2340      	movs	r3, #64	; 0x40
    e0d6:	0189      	lsls	r1, r1, #6
    e0d8:	4398      	bics	r0, r3
    e0da:	4019      	ands	r1, r3
    e0dc:	4301      	orrs	r1, r0
    e0de:	b2c9      	uxtb	r1, r1
    e0e0:	2033      	movs	r0, #51	; 0x33
    e0e2:	47a8      	blx	r5
    e0e4:	8aa1      	ldrh	r1, [r4, #20]
    e0e6:	2020      	movs	r0, #32
    e0e8:	0a09      	lsrs	r1, r1, #8
    e0ea:	47a8      	blx	r5
    e0ec:	7d21      	ldrb	r1, [r4, #20]
    e0ee:	2021      	movs	r0, #33	; 0x21
    e0f0:	47a8      	blx	r5
    e0f2:	2100      	movs	r1, #0
    e0f4:	200d      	movs	r0, #13
    e0f6:	47a8      	blx	r5
    e0f8:	2100      	movs	r1, #0
    e0fa:	200e      	movs	r0, #14
    e0fc:	47a8      	blx	r5
    e0fe:	2100      	movs	r1, #0
    e100:	200f      	movs	r0, #15
    e102:	47a8      	blx	r5
    e104:	0023      	movs	r3, r4
    e106:	3331      	adds	r3, #49	; 0x31
    e108:	781b      	ldrb	r3, [r3, #0]
    e10a:	2b12      	cmp	r3, #18
    e10c:	d120      	bne.n	e150 <Radio_WriteConfiguration+0x208>
    e10e:	0023      	movs	r3, r4
    e110:	3336      	adds	r3, #54	; 0x36
    e112:	781b      	ldrb	r3, [r3, #0]
    e114:	2b09      	cmp	r3, #9
    e116:	d000      	beq.n	e11a <Radio_WriteConfiguration+0x1d2>
    e118:	e072      	b.n	e200 <Radio_WriteConfiguration+0x2b8>
    e11a:	4a44      	ldr	r2, [pc, #272]	; (e22c <Radio_WriteConfiguration+0x2e4>)
    e11c:	6823      	ldr	r3, [r4, #0]
    e11e:	1899      	adds	r1, r3, r2
    e120:	4a43      	ldr	r2, [pc, #268]	; (e230 <Radio_WriteConfiguration+0x2e8>)
    e122:	4291      	cmp	r1, r2
    e124:	d862      	bhi.n	e1ec <Radio_WriteConfiguration+0x2a4>
    e126:	2102      	movs	r1, #2
    e128:	2036      	movs	r0, #54	; 0x36
    e12a:	47a8      	blx	r5
    e12c:	2164      	movs	r1, #100	; 0x64
    e12e:	203a      	movs	r0, #58	; 0x3a
    e130:	47a8      	blx	r5
    e132:	0023      	movs	r3, r4
    e134:	3336      	adds	r3, #54	; 0x36
    e136:	781b      	ldrb	r3, [r3, #0]
    e138:	2165      	movs	r1, #101	; 0x65
    e13a:	203a      	movs	r0, #58	; 0x3a
    e13c:	2b09      	cmp	r3, #9
    e13e:	d162      	bne.n	e206 <Radio_WriteConfiguration+0x2be>
    e140:	3406      	adds	r4, #6
    e142:	7fe3      	ldrb	r3, [r4, #31]
    e144:	2b01      	cmp	r3, #1
    e146:	d15e      	bne.n	e206 <Radio_WriteConfiguration+0x2be>
    e148:	47a8      	blx	r5
    e14a:	2119      	movs	r1, #25
    e14c:	203b      	movs	r0, #59	; 0x3b
    e14e:	47a8      	blx	r5
    e150:	21ff      	movs	r1, #255	; 0xff
    e152:	2012      	movs	r0, #18
    e154:	47a8      	blx	r5
    e156:	b005      	add	sp, #20
    e158:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e15a:	b25b      	sxtb	r3, r3
    e15c:	3303      	adds	r3, #3
    e15e:	db00      	blt.n	e162 <Radio_WriteConfiguration+0x21a>
    e160:	e70f      	b.n	df82 <Radio_WriteConfiguration+0x3a>
    e162:	4b34      	ldr	r3, [pc, #208]	; (e234 <Radio_WriteConfiguration+0x2ec>)
    e164:	781f      	ldrb	r7, [r3, #0]
    e166:	e70c      	b.n	df82 <Radio_WriteConfiguration+0x3a>
    e168:	2170      	movs	r1, #112	; 0x70
    e16a:	9b01      	ldr	r3, [sp, #4]
    e16c:	4319      	orrs	r1, r3
    e16e:	b2c9      	uxtb	r1, r1
    e170:	e719      	b.n	dfa6 <Radio_WriteConfiguration+0x5e>
    e172:	2b01      	cmp	r3, #1
    e174:	dd07      	ble.n	e186 <Radio_WriteConfiguration+0x23e>
    e176:	2714      	movs	r7, #20
    e178:	2b13      	cmp	r3, #19
    e17a:	dc06      	bgt.n	e18a <Radio_WriteConfiguration+0x242>
    e17c:	1c1f      	adds	r7, r3, #0
    e17e:	2b11      	cmp	r3, #17
    e180:	dd02      	ble.n	e188 <Radio_WriteConfiguration+0x240>
    e182:	2711      	movs	r7, #17
    e184:	e000      	b.n	e188 <Radio_WriteConfiguration+0x240>
    e186:	2702      	movs	r7, #2
    e188:	b27f      	sxtb	r7, r7
    e18a:	200b      	movs	r0, #11
    e18c:	47b0      	blx	r6
    e18e:	9003      	str	r0, [sp, #12]
    e190:	204d      	movs	r0, #77	; 0x4d
    e192:	47b0      	blx	r6
    e194:	2307      	movs	r3, #7
    e196:	4398      	bics	r0, r3
    e198:	b2c1      	uxtb	r1, r0
    e19a:	2f14      	cmp	r7, #20
    e19c:	d112      	bne.n	e1c4 <Radio_WriteConfiguration+0x27c>
    e19e:	4319      	orrs	r1, r3
    e1a0:	9b03      	ldr	r3, [sp, #12]
    e1a2:	37cb      	adds	r7, #203	; 0xcb
    e1a4:	403b      	ands	r3, r7
    e1a6:	001f      	movs	r7, r3
    e1a8:	230f      	movs	r3, #15
    e1aa:	9301      	str	r3, [sp, #4]
    e1ac:	204d      	movs	r0, #77	; 0x4d
    e1ae:	47a8      	blx	r5
    e1b0:	2180      	movs	r1, #128	; 0x80
    e1b2:	9b01      	ldr	r3, [sp, #4]
    e1b4:	4249      	negs	r1, r1
    e1b6:	4319      	orrs	r1, r3
    e1b8:	b2c9      	uxtb	r1, r1
    e1ba:	2009      	movs	r0, #9
    e1bc:	47a8      	blx	r5
    e1be:	0039      	movs	r1, r7
    e1c0:	200b      	movs	r0, #11
    e1c2:	e6f1      	b.n	dfa8 <Radio_WriteConfiguration+0x60>
    e1c4:	3f02      	subs	r7, #2
    e1c6:	b27b      	sxtb	r3, r7
    e1c8:	2720      	movs	r7, #32
    e1ca:	2004      	movs	r0, #4
    e1cc:	9301      	str	r3, [sp, #4]
    e1ce:	9b03      	ldr	r3, [sp, #12]
    e1d0:	4301      	orrs	r1, r0
    e1d2:	431f      	orrs	r7, r3
    e1d4:	b2ff      	uxtb	r7, r7
    e1d6:	e7e9      	b.n	e1ac <Radio_WriteConfiguration+0x264>
    e1d8:	23fa      	movs	r3, #250	; 0xfa
    e1da:	e71f      	b.n	e01c <Radio_WriteConfiguration+0xd4>
    e1dc:	23fa      	movs	r3, #250	; 0xfa
    e1de:	005b      	lsls	r3, r3, #1
    e1e0:	e71c      	b.n	e01c <Radio_WriteConfiguration+0xd4>
    e1e2:	0019      	movs	r1, r3
    e1e4:	e71b      	b.n	e01e <Radio_WriteConfiguration+0xd6>
    e1e6:	21f7      	movs	r1, #247	; 0xf7
    e1e8:	4008      	ands	r0, r1
    e1ea:	e73c      	b.n	e066 <Radio_WriteConfiguration+0x11e>
    e1ec:	4a12      	ldr	r2, [pc, #72]	; (e238 <Radio_WriteConfiguration+0x2f0>)
    e1ee:	189b      	adds	r3, r3, r2
    e1f0:	4a12      	ldr	r2, [pc, #72]	; (e23c <Radio_WriteConfiguration+0x2f4>)
    e1f2:	4293      	cmp	r3, r2
    e1f4:	d804      	bhi.n	e200 <Radio_WriteConfiguration+0x2b8>
    e1f6:	2102      	movs	r1, #2
    e1f8:	2036      	movs	r0, #54	; 0x36
    e1fa:	47a8      	blx	r5
    e1fc:	217f      	movs	r1, #127	; 0x7f
    e1fe:	e796      	b.n	e12e <Radio_WriteConfiguration+0x1e6>
    e200:	2103      	movs	r1, #3
    e202:	2036      	movs	r0, #54	; 0x36
    e204:	e794      	b.n	e130 <Radio_WriteConfiguration+0x1e8>
    e206:	47a8      	blx	r5
    e208:	211d      	movs	r1, #29
    e20a:	e79f      	b.n	e14c <Radio_WriteConfiguration+0x204>
    e20c:	20002d78 	.word	0x20002d78
    e210:	0000d1e9 	.word	0x0000d1e9
    e214:	0000df01 	.word	0x0000df01
    e218:	0000bfe9 	.word	0x0000bfe9
    e21c:	0000bfc1 	.word	0x0000bfc1
    e220:	20002dae 	.word	0x20002dae
    e224:	00ffff00 	.word	0x00ffff00
    e228:	00070b00 	.word	0x00070b00
    e22c:	cc9eec80 	.word	0xcc9eec80
    e230:	096ae380 	.word	0x096ae380
    e234:	000182e8 	.word	0x000182e8
    e238:	e78fe580 	.word	0xe78fe580
    e23c:	06dac2c0 	.word	0x06dac2c0
    e240:	6863      	ldr	r3, [r4, #4]
    e242:	492c      	ldr	r1, [pc, #176]	; (e2f4 <Radio_WriteConfiguration+0x3ac>)
    e244:	0218      	lsls	r0, r3, #8
    e246:	4b2c      	ldr	r3, [pc, #176]	; (e2f8 <Radio_WriteConfiguration+0x3b0>)
    e248:	4798      	blx	r3
    e24a:	0007      	movs	r7, r0
    e24c:	0a01      	lsrs	r1, r0, #8
    e24e:	b2c9      	uxtb	r1, r1
    e250:	2004      	movs	r0, #4
    e252:	47a8      	blx	r5
    e254:	b2f9      	uxtb	r1, r7
    e256:	2005      	movs	r0, #5
    e258:	47a8      	blx	r5
    e25a:	4b27      	ldr	r3, [pc, #156]	; (e2f8 <Radio_WriteConfiguration+0x3b0>)
    e25c:	68a1      	ldr	r1, [r4, #8]
    e25e:	4827      	ldr	r0, [pc, #156]	; (e2fc <Radio_WriteConfiguration+0x3b4>)
    e260:	4798      	blx	r3
    e262:	0007      	movs	r7, r0
    e264:	0a01      	lsrs	r1, r0, #8
    e266:	b2c9      	uxtb	r1, r1
    e268:	2002      	movs	r0, #2
    e26a:	47a8      	blx	r5
    e26c:	b2f9      	uxtb	r1, r7
    e26e:	2003      	movs	r0, #3
    e270:	47a8      	blx	r5
    e272:	2100      	movs	r1, #0
    e274:	205d      	movs	r0, #93	; 0x5d
    e276:	47a8      	blx	r5
    e278:	8aa1      	ldrh	r1, [r4, #20]
    e27a:	2025      	movs	r0, #37	; 0x25
    e27c:	0a09      	lsrs	r1, r1, #8
    e27e:	47a8      	blx	r5
    e280:	7d21      	ldrb	r1, [r4, #20]
    e282:	2026      	movs	r0, #38	; 0x26
    e284:	47a8      	blx	r5
    e286:	219e      	movs	r1, #158	; 0x9e
    e288:	200d      	movs	r0, #13
    e28a:	47a8      	blx	r5
    e28c:	21bf      	movs	r1, #191	; 0xbf
    e28e:	2035      	movs	r0, #53	; 0x35
    e290:	47a8      	blx	r5
    e292:	200a      	movs	r0, #10
    e294:	47b0      	blx	r6
    e296:	0023      	movs	r3, r4
    e298:	3337      	adds	r3, #55	; 0x37
    e29a:	7819      	ldrb	r1, [r3, #0]
    e29c:	2360      	movs	r3, #96	; 0x60
    e29e:	0149      	lsls	r1, r1, #5
    e2a0:	4398      	bics	r0, r3
    e2a2:	4301      	orrs	r1, r0
    e2a4:	b2c9      	uxtb	r1, r1
    e2a6:	200a      	movs	r0, #10
    e2a8:	47a8      	blx	r5
    e2aa:	1d23      	adds	r3, r4, #4
    e2ac:	7fdb      	ldrb	r3, [r3, #31]
    e2ae:	21c0      	movs	r1, #192	; 0xc0
    e2b0:	2b00      	cmp	r3, #0
    e2b2:	d000      	beq.n	e2b6 <Radio_WriteConfiguration+0x36e>
    e2b4:	3110      	adds	r1, #16
    e2b6:	2030      	movs	r0, #48	; 0x30
    e2b8:	47a8      	blx	r5
    e2ba:	2600      	movs	r6, #0
    e2bc:	1ca3      	adds	r3, r4, #2
    e2be:	7fd9      	ldrb	r1, [r3, #31]
    e2c0:	428e      	cmp	r6, r1
    e2c2:	d30d      	bcc.n	e2e0 <Radio_WriteConfiguration+0x398>
    e2c4:	2900      	cmp	r1, #0
    e2c6:	d003      	beq.n	e2d0 <Radio_WriteConfiguration+0x388>
    e2c8:	2310      	movs	r3, #16
    e2ca:	3901      	subs	r1, #1
    e2cc:	4319      	orrs	r1, r3
    e2ce:	b2c9      	uxtb	r1, r1
    e2d0:	2027      	movs	r0, #39	; 0x27
    e2d2:	47a8      	blx	r5
    e2d4:	21ff      	movs	r1, #255	; 0xff
    e2d6:	203e      	movs	r0, #62	; 0x3e
    e2d8:	47a8      	blx	r5
    e2da:	21ff      	movs	r1, #255	; 0xff
    e2dc:	203f      	movs	r0, #63	; 0x3f
    e2de:	e739      	b.n	e154 <Radio_WriteConfiguration+0x20c>
    e2e0:	0030      	movs	r0, r6
    e2e2:	19a3      	adds	r3, r4, r6
    e2e4:	3028      	adds	r0, #40	; 0x28
    e2e6:	7e59      	ldrb	r1, [r3, #25]
    e2e8:	b2c0      	uxtb	r0, r0
    e2ea:	3601      	adds	r6, #1
    e2ec:	47a8      	blx	r5
    e2ee:	b2f6      	uxtb	r6, r6
    e2f0:	e7e4      	b.n	e2bc <Radio_WriteConfiguration+0x374>
    e2f2:	46c0      	nop			; (mov r8, r8)
    e2f4:	00003d09 	.word	0x00003d09
    e2f8:	00012edd 	.word	0x00012edd
    e2fc:	01e84800 	.word	0x01e84800

0000e300 <RADIO_getMappingAndOpmode>:
    e300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e302:	0006      	movs	r6, r0
    e304:	4d06      	ldr	r5, [pc, #24]	; (e320 <RADIO_getMappingAndOpmode+0x20>)
    e306:	2040      	movs	r0, #64	; 0x40
    e308:	001f      	movs	r7, r3
    e30a:	0014      	movs	r4, r2
    e30c:	9101      	str	r1, [sp, #4]
    e30e:	47a8      	blx	r5
    e310:	4004      	ands	r4, r0
    e312:	413c      	asrs	r4, r7
    e314:	2001      	movs	r0, #1
    e316:	7034      	strb	r4, [r6, #0]
    e318:	47a8      	blx	r5
    e31a:	9b01      	ldr	r3, [sp, #4]
    e31c:	7018      	strb	r0, [r3, #0]
    e31e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    e320:	0000bfe9 	.word	0x0000bfe9

0000e324 <RADIO_UnhandledInterrupt.part.0>:
    e324:	b510      	push	{r4, lr}
    e326:	21ff      	movs	r1, #255	; 0xff
    e328:	2012      	movs	r0, #18
    e32a:	4b01      	ldr	r3, [pc, #4]	; (e330 <RADIO_UnhandledInterrupt.part.0+0xc>)
    e32c:	4798      	blx	r3
    e32e:	bd10      	pop	{r4, pc}
    e330:	0000bfc1 	.word	0x0000bfc1

0000e334 <RADIO_UnhandledInterrupt>:
    e334:	b510      	push	{r4, lr}
    e336:	2801      	cmp	r0, #1
    e338:	d102      	bne.n	e340 <RADIO_UnhandledInterrupt+0xc>
    e33a:	4b05      	ldr	r3, [pc, #20]	; (e350 <RADIO_UnhandledInterrupt+0x1c>)
    e33c:	4798      	blx	r3
    e33e:	bd10      	pop	{r4, pc}
    e340:	21ff      	movs	r1, #255	; 0xff
    e342:	203e      	movs	r0, #62	; 0x3e
    e344:	4c03      	ldr	r4, [pc, #12]	; (e354 <RADIO_UnhandledInterrupt+0x20>)
    e346:	47a0      	blx	r4
    e348:	21ff      	movs	r1, #255	; 0xff
    e34a:	203f      	movs	r0, #63	; 0x3f
    e34c:	47a0      	blx	r4
    e34e:	e7f6      	b.n	e33e <RADIO_UnhandledInterrupt+0xa>
    e350:	0000e325 	.word	0x0000e325
    e354:	0000bfc1 	.word	0x0000bfc1

0000e358 <RADIO_DIO0>:
    e358:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e35a:	466b      	mov	r3, sp
    e35c:	1ddc      	adds	r4, r3, #7
    e35e:	1d9d      	adds	r5, r3, #6
    e360:	22c0      	movs	r2, #192	; 0xc0
    e362:	2306      	movs	r3, #6
    e364:	0028      	movs	r0, r5
    e366:	0021      	movs	r1, r4
    e368:	4e12      	ldr	r6, [pc, #72]	; (e3b4 <RADIO_DIO0+0x5c>)
    e36a:	47b0      	blx	r6
    e36c:	7823      	ldrb	r3, [r4, #0]
    e36e:	7828      	ldrb	r0, [r5, #0]
    e370:	b25a      	sxtb	r2, r3
    e372:	b2c0      	uxtb	r0, r0
    e374:	2a00      	cmp	r2, #0
    e376:	da0b      	bge.n	e390 <RADIO_DIO0+0x38>
    e378:	2800      	cmp	r0, #0
    e37a:	d004      	beq.n	e386 <RADIO_DIO0+0x2e>
    e37c:	2801      	cmp	r0, #1
    e37e:	d005      	beq.n	e38c <RADIO_DIO0+0x34>
    e380:	4b0d      	ldr	r3, [pc, #52]	; (e3b8 <RADIO_DIO0+0x60>)
    e382:	4798      	blx	r3
    e384:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    e386:	4b0d      	ldr	r3, [pc, #52]	; (e3bc <RADIO_DIO0+0x64>)
    e388:	4798      	blx	r3
    e38a:	e7fb      	b.n	e384 <RADIO_DIO0+0x2c>
    e38c:	4b0c      	ldr	r3, [pc, #48]	; (e3c0 <RADIO_DIO0+0x68>)
    e38e:	e7fb      	b.n	e388 <RADIO_DIO0+0x30>
    e390:	2800      	cmp	r0, #0
    e392:	d10a      	bne.n	e3aa <RADIO_DIO0+0x52>
    e394:	2207      	movs	r2, #7
    e396:	4013      	ands	r3, r2
    e398:	7023      	strb	r3, [r4, #0]
    e39a:	2b03      	cmp	r3, #3
    e39c:	d101      	bne.n	e3a2 <RADIO_DIO0+0x4a>
    e39e:	4b09      	ldr	r3, [pc, #36]	; (e3c4 <RADIO_DIO0+0x6c>)
    e3a0:	e7f2      	b.n	e388 <RADIO_DIO0+0x30>
    e3a2:	2b05      	cmp	r3, #5
    e3a4:	d102      	bne.n	e3ac <RADIO_DIO0+0x54>
    e3a6:	4b08      	ldr	r3, [pc, #32]	; (e3c8 <RADIO_DIO0+0x70>)
    e3a8:	e7ee      	b.n	e388 <RADIO_DIO0+0x30>
    e3aa:	2000      	movs	r0, #0
    e3ac:	4b07      	ldr	r3, [pc, #28]	; (e3cc <RADIO_DIO0+0x74>)
    e3ae:	4798      	blx	r3
    e3b0:	e7e8      	b.n	e384 <RADIO_DIO0+0x2c>
    e3b2:	46c0      	nop			; (mov r8, r8)
    e3b4:	0000e301 	.word	0x0000e301
    e3b8:	0000e325 	.word	0x0000e325
    e3bc:	0000e9e9 	.word	0x0000e9e9
    e3c0:	0000e8ed 	.word	0x0000e8ed
    e3c4:	0000e969 	.word	0x0000e969
    e3c8:	0000ea65 	.word	0x0000ea65
    e3cc:	0000e335 	.word	0x0000e335

0000e3d0 <RADIO_DIO1>:
    e3d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e3d2:	466b      	mov	r3, sp
    e3d4:	1ddc      	adds	r4, r3, #7
    e3d6:	1d9d      	adds	r5, r3, #6
    e3d8:	2230      	movs	r2, #48	; 0x30
    e3da:	2304      	movs	r3, #4
    e3dc:	0021      	movs	r1, r4
    e3de:	0028      	movs	r0, r5
    e3e0:	4e11      	ldr	r6, [pc, #68]	; (e428 <RADIO_DIO1+0x58>)
    e3e2:	47b0      	blx	r6
    e3e4:	7822      	ldrb	r2, [r4, #0]
    e3e6:	782b      	ldrb	r3, [r5, #0]
    e3e8:	b251      	sxtb	r1, r2
    e3ea:	2900      	cmp	r1, #0
    e3ec:	da0c      	bge.n	e408 <RADIO_DIO1+0x38>
    e3ee:	b2db      	uxtb	r3, r3
    e3f0:	2b00      	cmp	r3, #0
    e3f2:	d004      	beq.n	e3fe <RADIO_DIO1+0x2e>
    e3f4:	2b01      	cmp	r3, #1
    e3f6:	d005      	beq.n	e404 <RADIO_DIO1+0x34>
    e3f8:	4b0c      	ldr	r3, [pc, #48]	; (e42c <RADIO_DIO1+0x5c>)
    e3fa:	4798      	blx	r3
    e3fc:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    e3fe:	4b0c      	ldr	r3, [pc, #48]	; (e430 <RADIO_DIO1+0x60>)
    e400:	4798      	blx	r3
    e402:	e7fb      	b.n	e3fc <RADIO_DIO1+0x2c>
    e404:	4b0b      	ldr	r3, [pc, #44]	; (e434 <RADIO_DIO1+0x64>)
    e406:	e7fb      	b.n	e400 <RADIO_DIO1+0x30>
    e408:	2107      	movs	r1, #7
    e40a:	b2db      	uxtb	r3, r3
    e40c:	400a      	ands	r2, r1
    e40e:	7022      	strb	r2, [r4, #0]
    e410:	2b00      	cmp	r3, #0
    e412:	d005      	beq.n	e420 <RADIO_DIO1+0x50>
    e414:	2b01      	cmp	r3, #1
    e416:	d1f1      	bne.n	e3fc <RADIO_DIO1+0x2c>
    e418:	2a03      	cmp	r2, #3
    e41a:	d1ef      	bne.n	e3fc <RADIO_DIO1+0x2c>
    e41c:	4b06      	ldr	r3, [pc, #24]	; (e438 <RADIO_DIO1+0x68>)
    e41e:	e7ef      	b.n	e400 <RADIO_DIO1+0x30>
    e420:	4b06      	ldr	r3, [pc, #24]	; (e43c <RADIO_DIO1+0x6c>)
    e422:	2a05      	cmp	r2, #5
    e424:	d1ea      	bne.n	e3fc <RADIO_DIO1+0x2c>
    e426:	e7eb      	b.n	e400 <RADIO_DIO1+0x30>
    e428:	0000e301 	.word	0x0000e301
    e42c:	0000e325 	.word	0x0000e325
    e430:	0000e871 	.word	0x0000e871
    e434:	0000d2cd 	.word	0x0000d2cd
    e438:	0000e78d 	.word	0x0000e78d
    e43c:	0000e6f1 	.word	0x0000e6f1

0000e440 <RADIO_DIO2>:
    e440:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e442:	466b      	mov	r3, sp
    e444:	1ddc      	adds	r4, r3, #7
    e446:	1d9d      	adds	r5, r3, #6
    e448:	220c      	movs	r2, #12
    e44a:	2302      	movs	r3, #2
    e44c:	0021      	movs	r1, r4
    e44e:	0028      	movs	r0, r5
    e450:	4e0b      	ldr	r6, [pc, #44]	; (e480 <RADIO_DIO2+0x40>)
    e452:	47b0      	blx	r6
    e454:	7823      	ldrb	r3, [r4, #0]
    e456:	782a      	ldrb	r2, [r5, #0]
    e458:	b259      	sxtb	r1, r3
    e45a:	2900      	cmp	r1, #0
    e45c:	da05      	bge.n	e46a <RADIO_DIO2+0x2a>
    e45e:	4b09      	ldr	r3, [pc, #36]	; (e484 <RADIO_DIO2+0x44>)
    e460:	2a02      	cmp	r2, #2
    e462:	d90a      	bls.n	e47a <RADIO_DIO2+0x3a>
    e464:	4b08      	ldr	r3, [pc, #32]	; (e488 <RADIO_DIO2+0x48>)
    e466:	4798      	blx	r3
    e468:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    e46a:	2107      	movs	r1, #7
    e46c:	400b      	ands	r3, r1
    e46e:	7023      	strb	r3, [r4, #0]
    e470:	2a03      	cmp	r2, #3
    e472:	d1f9      	bne.n	e468 <RADIO_DIO2+0x28>
    e474:	2b05      	cmp	r3, #5
    e476:	d1f7      	bne.n	e468 <RADIO_DIO2+0x28>
    e478:	4b04      	ldr	r3, [pc, #16]	; (e48c <RADIO_DIO2+0x4c>)
    e47a:	4798      	blx	r3
    e47c:	e7f4      	b.n	e468 <RADIO_DIO2+0x28>
    e47e:	46c0      	nop			; (mov r8, r8)
    e480:	0000e301 	.word	0x0000e301
    e484:	0000d2cd 	.word	0x0000d2cd
    e488:	0000e325 	.word	0x0000e325
    e48c:	0000e6c1 	.word	0x0000e6c1

0000e490 <RADIO_DIO3>:
    e490:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e492:	466b      	mov	r3, sp
    e494:	4668      	mov	r0, sp
    e496:	1ddc      	adds	r4, r3, #7
    e498:	2203      	movs	r2, #3
    e49a:	2300      	movs	r3, #0
    e49c:	0021      	movs	r1, r4
    e49e:	3006      	adds	r0, #6
    e4a0:	4d03      	ldr	r5, [pc, #12]	; (e4b0 <RADIO_DIO3+0x20>)
    e4a2:	47a8      	blx	r5
    e4a4:	7823      	ldrb	r3, [r4, #0]
    e4a6:	2b7f      	cmp	r3, #127	; 0x7f
    e4a8:	d901      	bls.n	e4ae <RADIO_DIO3+0x1e>
    e4aa:	4b02      	ldr	r3, [pc, #8]	; (e4b4 <RADIO_DIO3+0x24>)
    e4ac:	4798      	blx	r3
    e4ae:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    e4b0:	0000e301 	.word	0x0000e301
    e4b4:	0000e325 	.word	0x0000e325

0000e4b8 <RADIO_DIO4>:
    e4b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e4ba:	466b      	mov	r3, sp
    e4bc:	4668      	mov	r0, sp
    e4be:	1ddc      	adds	r4, r3, #7
    e4c0:	2306      	movs	r3, #6
    e4c2:	22c0      	movs	r2, #192	; 0xc0
    e4c4:	18c0      	adds	r0, r0, r3
    e4c6:	0021      	movs	r1, r4
    e4c8:	4d03      	ldr	r5, [pc, #12]	; (e4d8 <RADIO_DIO4+0x20>)
    e4ca:	47a8      	blx	r5
    e4cc:	7823      	ldrb	r3, [r4, #0]
    e4ce:	2b7f      	cmp	r3, #127	; 0x7f
    e4d0:	d901      	bls.n	e4d6 <RADIO_DIO4+0x1e>
    e4d2:	4b02      	ldr	r3, [pc, #8]	; (e4dc <RADIO_DIO4+0x24>)
    e4d4:	4798      	blx	r3
    e4d6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    e4d8:	0000e301 	.word	0x0000e301
    e4dc:	0000e325 	.word	0x0000e325

0000e4e0 <RADIO_DIO5>:
    e4e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e4e2:	466b      	mov	r3, sp
    e4e4:	4668      	mov	r0, sp
    e4e6:	1ddc      	adds	r4, r3, #7
    e4e8:	2230      	movs	r2, #48	; 0x30
    e4ea:	2304      	movs	r3, #4
    e4ec:	0021      	movs	r1, r4
    e4ee:	3006      	adds	r0, #6
    e4f0:	4d03      	ldr	r5, [pc, #12]	; (e500 <RADIO_DIO5+0x20>)
    e4f2:	47a8      	blx	r5
    e4f4:	7823      	ldrb	r3, [r4, #0]
    e4f6:	2b7f      	cmp	r3, #127	; 0x7f
    e4f8:	d901      	bls.n	e4fe <RADIO_DIO5+0x1e>
    e4fa:	4b02      	ldr	r3, [pc, #8]	; (e504 <RADIO_DIO5+0x24>)
    e4fc:	4798      	blx	r3
    e4fe:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    e500:	0000e301 	.word	0x0000e301
    e504:	0000e325 	.word	0x0000e325

0000e508 <radioPostTask>:
    e508:	b510      	push	{r4, lr}
    e50a:	0004      	movs	r4, r0
    e50c:	4b05      	ldr	r3, [pc, #20]	; (e524 <radioPostTask+0x1c>)
    e50e:	4798      	blx	r3
    e510:	4b05      	ldr	r3, [pc, #20]	; (e528 <radioPostTask+0x20>)
    e512:	8818      	ldrh	r0, [r3, #0]
    e514:	4320      	orrs	r0, r4
    e516:	8018      	strh	r0, [r3, #0]
    e518:	4b04      	ldr	r3, [pc, #16]	; (e52c <radioPostTask+0x24>)
    e51a:	4798      	blx	r3
    e51c:	2002      	movs	r0, #2
    e51e:	4b04      	ldr	r3, [pc, #16]	; (e530 <radioPostTask+0x28>)
    e520:	4798      	blx	r3
    e522:	bd10      	pop	{r4, pc}
    e524:	0000c179 	.word	0x0000c179
    e528:	20001e84 	.word	0x20001e84
    e52c:	0000c185 	.word	0x0000c185
    e530:	0000d1c5 	.word	0x0000d1c5

0000e534 <radioClearTask>:
    e534:	b510      	push	{r4, lr}
    e536:	0004      	movs	r4, r0
    e538:	4b04      	ldr	r3, [pc, #16]	; (e54c <radioClearTask+0x18>)
    e53a:	4798      	blx	r3
    e53c:	4a04      	ldr	r2, [pc, #16]	; (e550 <radioClearTask+0x1c>)
    e53e:	8813      	ldrh	r3, [r2, #0]
    e540:	43a3      	bics	r3, r4
    e542:	8013      	strh	r3, [r2, #0]
    e544:	4b03      	ldr	r3, [pc, #12]	; (e554 <radioClearTask+0x20>)
    e546:	4798      	blx	r3
    e548:	bd10      	pop	{r4, pc}
    e54a:	46c0      	nop			; (mov r8, r8)
    e54c:	0000c179 	.word	0x0000c179
    e550:	20001e84 	.word	0x20001e84
    e554:	0000c185 	.word	0x0000c185

0000e558 <RADIO_TaskHandler>:
    e558:	b570      	push	{r4, r5, r6, lr}
    e55a:	2400      	movs	r4, #0
    e55c:	4d10      	ldr	r5, [pc, #64]	; (e5a0 <RADIO_TaskHandler+0x48>)
    e55e:	2601      	movs	r6, #1
    e560:	882b      	ldrh	r3, [r5, #0]
    e562:	42a3      	cmp	r3, r4
    e564:	d015      	beq.n	e592 <RADIO_TaskHandler+0x3a>
    e566:	882b      	ldrh	r3, [r5, #0]
    e568:	4123      	asrs	r3, r4
    e56a:	4233      	tst	r3, r6
    e56c:	d013      	beq.n	e596 <RADIO_TaskHandler+0x3e>
    e56e:	40a6      	lsls	r6, r4
    e570:	4b0c      	ldr	r3, [pc, #48]	; (e5a4 <RADIO_TaskHandler+0x4c>)
    e572:	4798      	blx	r3
    e574:	882b      	ldrh	r3, [r5, #0]
    e576:	00a4      	lsls	r4, r4, #2
    e578:	43b3      	bics	r3, r6
    e57a:	802b      	strh	r3, [r5, #0]
    e57c:	4b0a      	ldr	r3, [pc, #40]	; (e5a8 <RADIO_TaskHandler+0x50>)
    e57e:	4798      	blx	r3
    e580:	4b0a      	ldr	r3, [pc, #40]	; (e5ac <RADIO_TaskHandler+0x54>)
    e582:	58e3      	ldr	r3, [r4, r3]
    e584:	4798      	blx	r3
    e586:	882b      	ldrh	r3, [r5, #0]
    e588:	2b00      	cmp	r3, #0
    e58a:	d002      	beq.n	e592 <RADIO_TaskHandler+0x3a>
    e58c:	2002      	movs	r0, #2
    e58e:	4b08      	ldr	r3, [pc, #32]	; (e5b0 <RADIO_TaskHandler+0x58>)
    e590:	4798      	blx	r3
    e592:	2000      	movs	r0, #0
    e594:	bd70      	pop	{r4, r5, r6, pc}
    e596:	3401      	adds	r4, #1
    e598:	2c05      	cmp	r4, #5
    e59a:	d1e4      	bne.n	e566 <RADIO_TaskHandler+0xe>
    e59c:	e7f9      	b.n	e592 <RADIO_TaskHandler+0x3a>
    e59e:	46c0      	nop			; (mov r8, r8)
    e5a0:	20001e84 	.word	0x20001e84
    e5a4:	0000c179 	.word	0x0000c179
    e5a8:	0000c185 	.word	0x0000c185
    e5ac:	000182ec 	.word	0x000182ec
    e5b0:	0000d1c5 	.word	0x0000d1c5

0000e5b4 <RadioSetState>:
    e5b4:	4b01      	ldr	r3, [pc, #4]	; (e5bc <RadioSetState+0x8>)
    e5b6:	7018      	strb	r0, [r3, #0]
    e5b8:	4770      	bx	lr
    e5ba:	46c0      	nop			; (mov r8, r8)
    e5bc:	20003047 	.word	0x20003047

0000e5c0 <RADIO_GetState>:
    e5c0:	4b01      	ldr	r3, [pc, #4]	; (e5c8 <RADIO_GetState+0x8>)
    e5c2:	7818      	ldrb	r0, [r3, #0]
    e5c4:	b2c0      	uxtb	r0, r0
    e5c6:	4770      	bx	lr
    e5c8:	20003047 	.word	0x20003047

0000e5cc <RADIO_SetCallbackBitmask>:
    e5cc:	4a02      	ldr	r2, [pc, #8]	; (e5d8 <RADIO_SetCallbackBitmask+0xc>)
    e5ce:	7813      	ldrb	r3, [r2, #0]
    e5d0:	4318      	orrs	r0, r3
    e5d2:	7010      	strb	r0, [r2, #0]
    e5d4:	4770      	bx	lr
    e5d6:	46c0      	nop			; (mov r8, r8)
    e5d8:	20003046 	.word	0x20003046

0000e5dc <RADIO_Transmit>:
    e5dc:	b570      	push	{r4, r5, r6, lr}
    e5de:	4d10      	ldr	r5, [pc, #64]	; (e620 <RADIO_Transmit+0x44>)
    e5e0:	0006      	movs	r6, r0
    e5e2:	782b      	ldrb	r3, [r5, #0]
    e5e4:	2004      	movs	r0, #4
    e5e6:	2b01      	cmp	r3, #1
    e5e8:	d118      	bne.n	e61c <RADIO_Transmit+0x40>
    e5ea:	4c0e      	ldr	r4, [pc, #56]	; (e624 <RADIO_Transmit+0x48>)
    e5ec:	0023      	movs	r3, r4
    e5ee:	332f      	adds	r3, #47	; 0x2f
    e5f0:	7818      	ldrb	r0, [r3, #0]
    e5f2:	4b0d      	ldr	r3, [pc, #52]	; (e628 <RADIO_Transmit+0x4c>)
    e5f4:	4798      	blx	r3
    e5f6:	4b0d      	ldr	r3, [pc, #52]	; (e62c <RADIO_Transmit+0x50>)
    e5f8:	7832      	ldrb	r2, [r6, #0]
    e5fa:	6871      	ldr	r1, [r6, #4]
    e5fc:	701a      	strb	r2, [r3, #0]
    e5fe:	4b0c      	ldr	r3, [pc, #48]	; (e630 <RADIO_Transmit+0x54>)
    e600:	3434      	adds	r4, #52	; 0x34
    e602:	6019      	str	r1, [r3, #0]
    e604:	7821      	ldrb	r1, [r4, #0]
    e606:	2302      	movs	r3, #2
    e608:	2900      	cmp	r1, #0
    e60a:	d102      	bne.n	e612 <RADIO_Transmit+0x36>
    e60c:	0018      	movs	r0, r3
    e60e:	2a3f      	cmp	r2, #63	; 0x3f
    e610:	d804      	bhi.n	e61c <RADIO_Transmit+0x40>
    e612:	702b      	strb	r3, [r5, #0]
    e614:	2004      	movs	r0, #4
    e616:	4b07      	ldr	r3, [pc, #28]	; (e634 <RADIO_Transmit+0x58>)
    e618:	4798      	blx	r3
    e61a:	2000      	movs	r0, #0
    e61c:	bd70      	pop	{r4, r5, r6, pc}
    e61e:	46c0      	nop			; (mov r8, r8)
    e620:	20003047 	.word	0x20003047
    e624:	20002d78 	.word	0x20002d78
    e628:	0000cec5 	.word	0x0000cec5
    e62c:	20001e9c 	.word	0x20001e9c
    e630:	20001e98 	.word	0x20001e98
    e634:	0000e509 	.word	0x0000e509

0000e638 <Radio_FSKTxPayloadHandler>:
    e638:	b570      	push	{r4, r5, r6, lr}
    e63a:	4b1c      	ldr	r3, [pc, #112]	; (e6ac <Radio_FSKTxPayloadHandler+0x74>)
    e63c:	000d      	movs	r5, r1
    e63e:	4798      	blx	r3
    e640:	4c1b      	ldr	r4, [pc, #108]	; (e6b0 <Radio_FSKTxPayloadHandler+0x78>)
    e642:	3458      	adds	r4, #88	; 0x58
    e644:	7820      	ldrb	r0, [r4, #0]
    e646:	b2c0      	uxtb	r0, r0
    e648:	2800      	cmp	r0, #0
    e64a:	d112      	bne.n	e672 <Radio_FSKTxPayloadHandler+0x3a>
    e64c:	2d00      	cmp	r5, #0
    e64e:	d007      	beq.n	e660 <Radio_FSKTxPayloadHandler+0x28>
    e650:	4918      	ldr	r1, [pc, #96]	; (e6b4 <Radio_FSKTxPayloadHandler+0x7c>)
    e652:	4b19      	ldr	r3, [pc, #100]	; (e6b8 <Radio_FSKTxPayloadHandler+0x80>)
    e654:	2d3e      	cmp	r5, #62	; 0x3e
    e656:	d806      	bhi.n	e666 <Radio_FSKTxPayloadHandler+0x2e>
    e658:	002a      	movs	r2, r5
    e65a:	6809      	ldr	r1, [r1, #0]
    e65c:	4798      	blx	r3
    e65e:	7025      	strb	r5, [r4, #0]
    e660:	4b16      	ldr	r3, [pc, #88]	; (e6bc <Radio_FSKTxPayloadHandler+0x84>)
    e662:	4798      	blx	r3
    e664:	bd70      	pop	{r4, r5, r6, pc}
    e666:	223f      	movs	r2, #63	; 0x3f
    e668:	6809      	ldr	r1, [r1, #0]
    e66a:	4798      	blx	r3
    e66c:	233f      	movs	r3, #63	; 0x3f
    e66e:	7023      	strb	r3, [r4, #0]
    e670:	e7f6      	b.n	e660 <Radio_FSKTxPayloadHandler+0x28>
    e672:	7823      	ldrb	r3, [r4, #0]
    e674:	429d      	cmp	r5, r3
    e676:	d0f3      	beq.n	e660 <Radio_FSKTxPayloadHandler+0x28>
    e678:	7822      	ldrb	r2, [r4, #0]
    e67a:	480e      	ldr	r0, [pc, #56]	; (e6b4 <Radio_FSKTxPayloadHandler+0x7c>)
    e67c:	1aaa      	subs	r2, r5, r2
    e67e:	b2d2      	uxtb	r2, r2
    e680:	4b0d      	ldr	r3, [pc, #52]	; (e6b8 <Radio_FSKTxPayloadHandler+0x80>)
    e682:	2a3f      	cmp	r2, #63	; 0x3f
    e684:	d807      	bhi.n	e696 <Radio_FSKTxPayloadHandler+0x5e>
    e686:	7826      	ldrb	r6, [r4, #0]
    e688:	7822      	ldrb	r2, [r4, #0]
    e68a:	6801      	ldr	r1, [r0, #0]
    e68c:	1aaa      	subs	r2, r5, r2
    e68e:	b2d2      	uxtb	r2, r2
    e690:	1989      	adds	r1, r1, r6
    e692:	2000      	movs	r0, #0
    e694:	e7e2      	b.n	e65c <Radio_FSKTxPayloadHandler+0x24>
    e696:	7822      	ldrb	r2, [r4, #0]
    e698:	6801      	ldr	r1, [r0, #0]
    e69a:	2000      	movs	r0, #0
    e69c:	1889      	adds	r1, r1, r2
    e69e:	223f      	movs	r2, #63	; 0x3f
    e6a0:	4798      	blx	r3
    e6a2:	7823      	ldrb	r3, [r4, #0]
    e6a4:	333f      	adds	r3, #63	; 0x3f
    e6a6:	b2db      	uxtb	r3, r3
    e6a8:	e7e1      	b.n	e66e <Radio_FSKTxPayloadHandler+0x36>
    e6aa:	46c0      	nop			; (mov r8, r8)
    e6ac:	000044f9 	.word	0x000044f9
    e6b0:	20002d78 	.word	0x20002d78
    e6b4:	20001e98 	.word	0x20001e98
    e6b8:	0000c015 	.word	0x0000c015
    e6bc:	00004539 	.word	0x00004539

0000e6c0 <RADIO_FSKSyncAddr>:
    e6c0:	4b08      	ldr	r3, [pc, #32]	; (e6e4 <RADIO_FSKSyncAddr+0x24>)
    e6c2:	b510      	push	{r4, lr}
    e6c4:	4798      	blx	r3
    e6c6:	4b08      	ldr	r3, [pc, #32]	; (e6e8 <RADIO_FSKSyncAddr+0x28>)
    e6c8:	001a      	movs	r2, r3
    e6ca:	3234      	adds	r2, #52	; 0x34
    e6cc:	7812      	ldrb	r2, [r2, #0]
    e6ce:	2a00      	cmp	r2, #0
    e6d0:	d104      	bne.n	e6dc <RADIO_FSKSyncAddr+0x1c>
    e6d2:	0019      	movs	r1, r3
    e6d4:	3358      	adds	r3, #88	; 0x58
    e6d6:	312c      	adds	r1, #44	; 0x2c
    e6d8:	700a      	strb	r2, [r1, #0]
    e6da:	701a      	strb	r2, [r3, #0]
    e6dc:	4b03      	ldr	r3, [pc, #12]	; (e6ec <RADIO_FSKSyncAddr+0x2c>)
    e6de:	4798      	blx	r3
    e6e0:	bd10      	pop	{r4, pc}
    e6e2:	46c0      	nop			; (mov r8, r8)
    e6e4:	000044f9 	.word	0x000044f9
    e6e8:	20002d78 	.word	0x20002d78
    e6ec:	00004539 	.word	0x00004539

0000e6f0 <RADIO_FSKFifoLevel>:
    e6f0:	b570      	push	{r4, r5, r6, lr}
    e6f2:	4b22      	ldr	r3, [pc, #136]	; (e77c <RADIO_FSKFifoLevel+0x8c>)
    e6f4:	4798      	blx	r3
    e6f6:	4d22      	ldr	r5, [pc, #136]	; (e780 <RADIO_FSKFifoLevel+0x90>)
    e6f8:	002a      	movs	r2, r5
    e6fa:	002b      	movs	r3, r5
    e6fc:	322c      	adds	r2, #44	; 0x2c
    e6fe:	3358      	adds	r3, #88	; 0x58
    e700:	7810      	ldrb	r0, [r2, #0]
    e702:	7819      	ldrb	r1, [r3, #0]
    e704:	4288      	cmp	r0, r1
    e706:	d105      	bne.n	e714 <RADIO_FSKFifoLevel+0x24>
    e708:	7812      	ldrb	r2, [r2, #0]
    e70a:	2a00      	cmp	r2, #0
    e70c:	d002      	beq.n	e714 <RADIO_FSKFifoLevel+0x24>
    e70e:	781b      	ldrb	r3, [r3, #0]
    e710:	2b00      	cmp	r3, #0
    e712:	d11f      	bne.n	e754 <RADIO_FSKFifoLevel+0x64>
    e714:	0029      	movs	r1, r5
    e716:	312c      	adds	r1, #44	; 0x2c
    e718:	7808      	ldrb	r0, [r1, #0]
    e71a:	b2c0      	uxtb	r0, r0
    e71c:	2800      	cmp	r0, #0
    e71e:	d102      	bne.n	e726 <RADIO_FSKFifoLevel+0x36>
    e720:	2201      	movs	r2, #1
    e722:	4b18      	ldr	r3, [pc, #96]	; (e784 <RADIO_FSKFifoLevel+0x94>)
    e724:	4798      	blx	r3
    e726:	002e      	movs	r6, r5
    e728:	002c      	movs	r4, r5
    e72a:	362c      	adds	r6, #44	; 0x2c
    e72c:	3458      	adds	r4, #88	; 0x58
    e72e:	7833      	ldrb	r3, [r6, #0]
    e730:	7822      	ldrb	r2, [r4, #0]
    e732:	1a9b      	subs	r3, r3, r2
    e734:	b2db      	uxtb	r3, r3
    e736:	2b3e      	cmp	r3, #62	; 0x3e
    e738:	d80f      	bhi.n	e75a <RADIO_FSKFifoLevel+0x6a>
    e73a:	7823      	ldrb	r3, [r4, #0]
    e73c:	7832      	ldrb	r2, [r6, #0]
    e73e:	7821      	ldrb	r1, [r4, #0]
    e740:	2000      	movs	r0, #0
    e742:	1a52      	subs	r2, r2, r1
    e744:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    e746:	b2d2      	uxtb	r2, r2
    e748:	18c9      	adds	r1, r1, r3
    e74a:	4b0e      	ldr	r3, [pc, #56]	; (e784 <RADIO_FSKFifoLevel+0x94>)
    e74c:	4798      	blx	r3
    e74e:	7833      	ldrb	r3, [r6, #0]
    e750:	b2db      	uxtb	r3, r3
    e752:	7023      	strb	r3, [r4, #0]
    e754:	4b0c      	ldr	r3, [pc, #48]	; (e788 <RADIO_FSKFifoLevel+0x98>)
    e756:	4798      	blx	r3
    e758:	bd70      	pop	{r4, r5, r6, pc}
    e75a:	7833      	ldrb	r3, [r6, #0]
    e75c:	7822      	ldrb	r2, [r4, #0]
    e75e:	1a9b      	subs	r3, r3, r2
    e760:	b2db      	uxtb	r3, r3
    e762:	2b3f      	cmp	r3, #63	; 0x3f
    e764:	d9f6      	bls.n	e754 <RADIO_FSKFifoLevel+0x64>
    e766:	7823      	ldrb	r3, [r4, #0]
    e768:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    e76a:	223f      	movs	r2, #63	; 0x3f
    e76c:	18c9      	adds	r1, r1, r3
    e76e:	2000      	movs	r0, #0
    e770:	4b04      	ldr	r3, [pc, #16]	; (e784 <RADIO_FSKFifoLevel+0x94>)
    e772:	4798      	blx	r3
    e774:	7823      	ldrb	r3, [r4, #0]
    e776:	333f      	adds	r3, #63	; 0x3f
    e778:	e7ea      	b.n	e750 <RADIO_FSKFifoLevel+0x60>
    e77a:	46c0      	nop			; (mov r8, r8)
    e77c:	000044f9 	.word	0x000044f9
    e780:	20002d78 	.word	0x20002d78
    e784:	0000c055 	.word	0x0000c055
    e788:	00004539 	.word	0x00004539

0000e78c <RADIO_FSKFifoEmpty>:
    e78c:	b510      	push	{r4, lr}
    e78e:	4b03      	ldr	r3, [pc, #12]	; (e79c <RADIO_FSKFifoEmpty+0x10>)
    e790:	7819      	ldrb	r1, [r3, #0]
    e792:	4b03      	ldr	r3, [pc, #12]	; (e7a0 <RADIO_FSKFifoEmpty+0x14>)
    e794:	6818      	ldr	r0, [r3, #0]
    e796:	4b03      	ldr	r3, [pc, #12]	; (e7a4 <RADIO_FSKFifoEmpty+0x18>)
    e798:	4798      	blx	r3
    e79a:	bd10      	pop	{r4, pc}
    e79c:	20001e9c 	.word	0x20001e9c
    e7a0:	20001e98 	.word	0x20001e98
    e7a4:	0000e639 	.word	0x0000e639

0000e7a8 <RADIO_GetData>:
    e7a8:	4b03      	ldr	r3, [pc, #12]	; (e7b8 <RADIO_GetData+0x10>)
    e7aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e7ac:	332c      	adds	r3, #44	; 0x2c
    e7ae:	6002      	str	r2, [r0, #0]
    e7b0:	781b      	ldrb	r3, [r3, #0]
    e7b2:	2000      	movs	r0, #0
    e7b4:	800b      	strh	r3, [r1, #0]
    e7b6:	4770      	bx	lr
    e7b8:	20002d78 	.word	0x20002d78

0000e7bc <Radio_EnableRfControl>:
    e7bc:	b510      	push	{r4, lr}
    e7be:	4b08      	ldr	r3, [pc, #32]	; (e7e0 <Radio_EnableRfControl+0x24>)
    e7c0:	0001      	movs	r1, r0
    e7c2:	681a      	ldr	r2, [r3, #0]
    e7c4:	4807      	ldr	r0, [pc, #28]	; (e7e4 <Radio_EnableRfControl+0x28>)
    e7c6:	4c08      	ldr	r4, [pc, #32]	; (e7e8 <Radio_EnableRfControl+0x2c>)
    e7c8:	1812      	adds	r2, r2, r0
    e7ca:	2000      	movs	r0, #0
    e7cc:	42a2      	cmp	r2, r4
    e7ce:	d804      	bhi.n	e7da <Radio_EnableRfControl+0x1e>
    e7d0:	3305      	adds	r3, #5
    e7d2:	7fdb      	ldrb	r3, [r3, #31]
    e7d4:	1e58      	subs	r0, r3, #1
    e7d6:	4183      	sbcs	r3, r0
    e7d8:	1c58      	adds	r0, r3, #1
    e7da:	4b04      	ldr	r3, [pc, #16]	; (e7ec <Radio_EnableRfControl+0x30>)
    e7dc:	4798      	blx	r3
    e7de:	bd10      	pop	{r4, pc}
    e7e0:	20002d78 	.word	0x20002d78
    e7e4:	cc9eec80 	.word	0xcc9eec80
    e7e8:	096ae380 	.word	0x096ae380
    e7ec:	0000c0c1 	.word	0x0000c0c1

0000e7f0 <Radio_DisableRfControl>:
    e7f0:	b510      	push	{r4, lr}
    e7f2:	4b08      	ldr	r3, [pc, #32]	; (e814 <Radio_DisableRfControl+0x24>)
    e7f4:	0001      	movs	r1, r0
    e7f6:	681a      	ldr	r2, [r3, #0]
    e7f8:	4807      	ldr	r0, [pc, #28]	; (e818 <Radio_DisableRfControl+0x28>)
    e7fa:	4c08      	ldr	r4, [pc, #32]	; (e81c <Radio_DisableRfControl+0x2c>)
    e7fc:	1812      	adds	r2, r2, r0
    e7fe:	2000      	movs	r0, #0
    e800:	42a2      	cmp	r2, r4
    e802:	d804      	bhi.n	e80e <Radio_DisableRfControl+0x1e>
    e804:	3305      	adds	r3, #5
    e806:	7fdb      	ldrb	r3, [r3, #31]
    e808:	1e58      	subs	r0, r3, #1
    e80a:	4183      	sbcs	r3, r0
    e80c:	1c58      	adds	r0, r3, #1
    e80e:	4b04      	ldr	r3, [pc, #16]	; (e820 <Radio_DisableRfControl+0x30>)
    e810:	4798      	blx	r3
    e812:	bd10      	pop	{r4, pc}
    e814:	20002d78 	.word	0x20002d78
    e818:	cc9eec80 	.word	0xcc9eec80
    e81c:	096ae380 	.word	0x096ae380
    e820:	0000c0e9 	.word	0x0000c0e9

0000e824 <Radio_WatchdogTimeout>:
    e824:	b510      	push	{r4, lr}
    e826:	4b0e      	ldr	r3, [pc, #56]	; (e860 <Radio_WatchdogTimeout+0x3c>)
    e828:	781a      	ldrb	r2, [r3, #0]
    e82a:	2a04      	cmp	r2, #4
    e82c:	d10b      	bne.n	e846 <Radio_WatchdogTimeout+0x22>
    e82e:	2320      	movs	r3, #32
    e830:	4a0c      	ldr	r2, [pc, #48]	; (e864 <Radio_WatchdogTimeout+0x40>)
    e832:	2000      	movs	r0, #0
    e834:	8811      	ldrh	r1, [r2, #0]
    e836:	430b      	orrs	r3, r1
    e838:	8013      	strh	r3, [r2, #0]
    e83a:	4b0b      	ldr	r3, [pc, #44]	; (e868 <Radio_WatchdogTimeout+0x44>)
    e83c:	4798      	blx	r3
    e83e:	2002      	movs	r0, #2
    e840:	4b0a      	ldr	r3, [pc, #40]	; (e86c <Radio_WatchdogTimeout+0x48>)
    e842:	4798      	blx	r3
    e844:	bd10      	pop	{r4, pc}
    e846:	781b      	ldrb	r3, [r3, #0]
    e848:	2b02      	cmp	r3, #2
    e84a:	d1fb      	bne.n	e844 <Radio_WatchdogTimeout+0x20>
    e84c:	4a05      	ldr	r2, [pc, #20]	; (e864 <Radio_WatchdogTimeout+0x40>)
    e84e:	330e      	adds	r3, #14
    e850:	8811      	ldrh	r1, [r2, #0]
    e852:	2001      	movs	r0, #1
    e854:	430b      	orrs	r3, r1
    e856:	8013      	strh	r3, [r2, #0]
    e858:	4b03      	ldr	r3, [pc, #12]	; (e868 <Radio_WatchdogTimeout+0x44>)
    e85a:	4798      	blx	r3
    e85c:	2001      	movs	r0, #1
    e85e:	e7ef      	b.n	e840 <Radio_WatchdogTimeout+0x1c>
    e860:	20003047 	.word	0x20003047
    e864:	20003044 	.word	0x20003044
    e868:	0000e7f1 	.word	0x0000e7f1
    e86c:	0000e509 	.word	0x0000e509

0000e870 <RADIO_RxTimeout>:
    e870:	b510      	push	{r4, lr}
    e872:	4b0a      	ldr	r3, [pc, #40]	; (e89c <RADIO_RxTimeout+0x2c>)
    e874:	332f      	adds	r3, #47	; 0x2f
    e876:	7818      	ldrb	r0, [r3, #0]
    e878:	4b09      	ldr	r3, [pc, #36]	; (e8a0 <RADIO_RxTimeout+0x30>)
    e87a:	4798      	blx	r3
    e87c:	2000      	movs	r0, #0
    e87e:	4b09      	ldr	r3, [pc, #36]	; (e8a4 <RADIO_RxTimeout+0x34>)
    e880:	4798      	blx	r3
    e882:	2180      	movs	r1, #128	; 0x80
    e884:	2012      	movs	r0, #18
    e886:	4b08      	ldr	r3, [pc, #32]	; (e8a8 <RADIO_RxTimeout+0x38>)
    e888:	4798      	blx	r3
    e88a:	2340      	movs	r3, #64	; 0x40
    e88c:	4a07      	ldr	r2, [pc, #28]	; (e8ac <RADIO_RxTimeout+0x3c>)
    e88e:	2002      	movs	r0, #2
    e890:	8811      	ldrh	r1, [r2, #0]
    e892:	430b      	orrs	r3, r1
    e894:	8013      	strh	r3, [r2, #0]
    e896:	4b06      	ldr	r3, [pc, #24]	; (e8b0 <RADIO_RxTimeout+0x40>)
    e898:	4798      	blx	r3
    e89a:	bd10      	pop	{r4, pc}
    e89c:	20002d78 	.word	0x20002d78
    e8a0:	0000cec5 	.word	0x0000cec5
    e8a4:	0000e7f1 	.word	0x0000e7f1
    e8a8:	0000bfc1 	.word	0x0000bfc1
    e8ac:	20003044 	.word	0x20003044
    e8b0:	0000e509 	.word	0x0000e509

0000e8b4 <Radio_RxFSKTimeout>:
    e8b4:	b510      	push	{r4, lr}
    e8b6:	4b08      	ldr	r3, [pc, #32]	; (e8d8 <Radio_RxFSKTimeout+0x24>)
    e8b8:	332f      	adds	r3, #47	; 0x2f
    e8ba:	7818      	ldrb	r0, [r3, #0]
    e8bc:	4b07      	ldr	r3, [pc, #28]	; (e8dc <Radio_RxFSKTimeout+0x28>)
    e8be:	4798      	blx	r3
    e8c0:	2000      	movs	r0, #0
    e8c2:	4b07      	ldr	r3, [pc, #28]	; (e8e0 <Radio_RxFSKTimeout+0x2c>)
    e8c4:	4798      	blx	r3
    e8c6:	2380      	movs	r3, #128	; 0x80
    e8c8:	4a06      	ldr	r2, [pc, #24]	; (e8e4 <Radio_RxFSKTimeout+0x30>)
    e8ca:	2002      	movs	r0, #2
    e8cc:	8811      	ldrh	r1, [r2, #0]
    e8ce:	430b      	orrs	r3, r1
    e8d0:	8013      	strh	r3, [r2, #0]
    e8d2:	4b05      	ldr	r3, [pc, #20]	; (e8e8 <Radio_RxFSKTimeout+0x34>)
    e8d4:	4798      	blx	r3
    e8d6:	bd10      	pop	{r4, pc}
    e8d8:	20002d78 	.word	0x20002d78
    e8dc:	0000cec5 	.word	0x0000cec5
    e8e0:	0000e7f1 	.word	0x0000e7f1
    e8e4:	20003044 	.word	0x20003044
    e8e8:	0000e509 	.word	0x0000e509

0000e8ec <RADIO_TxDone>:
    e8ec:	b570      	push	{r4, r5, r6, lr}
    e8ee:	4b14      	ldr	r3, [pc, #80]	; (e940 <RADIO_TxDone+0x54>)
    e8f0:	332f      	adds	r3, #47	; 0x2f
    e8f2:	7818      	ldrb	r0, [r3, #0]
    e8f4:	4b13      	ldr	r3, [pc, #76]	; (e944 <RADIO_TxDone+0x58>)
    e8f6:	4798      	blx	r3
    e8f8:	2001      	movs	r0, #1
    e8fa:	4b13      	ldr	r3, [pc, #76]	; (e948 <RADIO_TxDone+0x5c>)
    e8fc:	4798      	blx	r3
    e8fe:	4b13      	ldr	r3, [pc, #76]	; (e94c <RADIO_TxDone+0x60>)
    e900:	2108      	movs	r1, #8
    e902:	2012      	movs	r0, #18
    e904:	4798      	blx	r3
    e906:	4b12      	ldr	r3, [pc, #72]	; (e950 <RADIO_TxDone+0x64>)
    e908:	781a      	ldrb	r2, [r3, #0]
    e90a:	4b12      	ldr	r3, [pc, #72]	; (e954 <RADIO_TxDone+0x68>)
    e90c:	2a02      	cmp	r2, #2
    e90e:	d002      	beq.n	e916 <RADIO_TxDone+0x2a>
    e910:	881a      	ldrh	r2, [r3, #0]
    e912:	0692      	lsls	r2, r2, #26
    e914:	d413      	bmi.n	e93e <RADIO_TxDone+0x52>
    e916:	2001      	movs	r0, #1
    e918:	881a      	ldrh	r2, [r3, #0]
    e91a:	4302      	orrs	r2, r0
    e91c:	801a      	strh	r2, [r3, #0]
    e91e:	4b0e      	ldr	r3, [pc, #56]	; (e958 <RADIO_TxDone+0x6c>)
    e920:	4798      	blx	r3
    e922:	4b0e      	ldr	r3, [pc, #56]	; (e95c <RADIO_TxDone+0x70>)
    e924:	4798      	blx	r3
    e926:	4c0e      	ldr	r4, [pc, #56]	; (e960 <RADIO_TxDone+0x74>)
    e928:	4d0e      	ldr	r5, [pc, #56]	; (e964 <RADIO_TxDone+0x78>)
    e92a:	6822      	ldr	r2, [r4, #0]
    e92c:	6863      	ldr	r3, [r4, #4]
    e92e:	1a80      	subs	r0, r0, r2
    e930:	4199      	sbcs	r1, r3
    e932:	22fa      	movs	r2, #250	; 0xfa
    e934:	2300      	movs	r3, #0
    e936:	0092      	lsls	r2, r2, #2
    e938:	47a8      	blx	r5
    e93a:	6020      	str	r0, [r4, #0]
    e93c:	6061      	str	r1, [r4, #4]
    e93e:	bd70      	pop	{r4, r5, r6, pc}
    e940:	20002d78 	.word	0x20002d78
    e944:	0000cec5 	.word	0x0000cec5
    e948:	0000e7f1 	.word	0x0000e7f1
    e94c:	0000bfc1 	.word	0x0000bfc1
    e950:	20003047 	.word	0x20003047
    e954:	20003044 	.word	0x20003044
    e958:	0000e509 	.word	0x0000e509
    e95c:	0000cb55 	.word	0x0000cb55
    e960:	20001e90 	.word	0x20001e90
    e964:	000132b9 	.word	0x000132b9

0000e968 <RADIO_FSKPacketSent>:
    e968:	b570      	push	{r4, r5, r6, lr}
    e96a:	4b15      	ldr	r3, [pc, #84]	; (e9c0 <RADIO_FSKPacketSent+0x58>)
    e96c:	203f      	movs	r0, #63	; 0x3f
    e96e:	4798      	blx	r3
    e970:	0703      	lsls	r3, r0, #28
    e972:	d524      	bpl.n	e9be <RADIO_FSKPacketSent+0x56>
    e974:	4b13      	ldr	r3, [pc, #76]	; (e9c4 <RADIO_FSKPacketSent+0x5c>)
    e976:	332f      	adds	r3, #47	; 0x2f
    e978:	7818      	ldrb	r0, [r3, #0]
    e97a:	4b13      	ldr	r3, [pc, #76]	; (e9c8 <RADIO_FSKPacketSent+0x60>)
    e97c:	4798      	blx	r3
    e97e:	4b13      	ldr	r3, [pc, #76]	; (e9cc <RADIO_FSKPacketSent+0x64>)
    e980:	2001      	movs	r0, #1
    e982:	4798      	blx	r3
    e984:	4b12      	ldr	r3, [pc, #72]	; (e9d0 <RADIO_FSKPacketSent+0x68>)
    e986:	4c13      	ldr	r4, [pc, #76]	; (e9d4 <RADIO_FSKPacketSent+0x6c>)
    e988:	781b      	ldrb	r3, [r3, #0]
    e98a:	2b02      	cmp	r3, #2
    e98c:	d002      	beq.n	e994 <RADIO_FSKPacketSent+0x2c>
    e98e:	8823      	ldrh	r3, [r4, #0]
    e990:	069b      	lsls	r3, r3, #26
    e992:	d414      	bmi.n	e9be <RADIO_FSKPacketSent+0x56>
    e994:	4b10      	ldr	r3, [pc, #64]	; (e9d8 <RADIO_FSKPacketSent+0x70>)
    e996:	4798      	blx	r3
    e998:	4d10      	ldr	r5, [pc, #64]	; (e9dc <RADIO_FSKPacketSent+0x74>)
    e99a:	4e11      	ldr	r6, [pc, #68]	; (e9e0 <RADIO_FSKPacketSent+0x78>)
    e99c:	682a      	ldr	r2, [r5, #0]
    e99e:	686b      	ldr	r3, [r5, #4]
    e9a0:	1a80      	subs	r0, r0, r2
    e9a2:	4199      	sbcs	r1, r3
    e9a4:	22fa      	movs	r2, #250	; 0xfa
    e9a6:	2300      	movs	r3, #0
    e9a8:	0092      	lsls	r2, r2, #2
    e9aa:	47b0      	blx	r6
    e9ac:	4b0d      	ldr	r3, [pc, #52]	; (e9e4 <RADIO_FSKPacketSent+0x7c>)
    e9ae:	6028      	str	r0, [r5, #0]
    e9b0:	6069      	str	r1, [r5, #4]
    e9b2:	2001      	movs	r0, #1
    e9b4:	4798      	blx	r3
    e9b6:	2304      	movs	r3, #4
    e9b8:	8822      	ldrh	r2, [r4, #0]
    e9ba:	4313      	orrs	r3, r2
    e9bc:	8023      	strh	r3, [r4, #0]
    e9be:	bd70      	pop	{r4, r5, r6, pc}
    e9c0:	0000bfe9 	.word	0x0000bfe9
    e9c4:	20002d78 	.word	0x20002d78
    e9c8:	0000cec5 	.word	0x0000cec5
    e9cc:	0000e7f1 	.word	0x0000e7f1
    e9d0:	20003047 	.word	0x20003047
    e9d4:	20003044 	.word	0x20003044
    e9d8:	0000cb55 	.word	0x0000cb55
    e9dc:	20001e90 	.word	0x20001e90
    e9e0:	000132b9 	.word	0x000132b9
    e9e4:	0000e509 	.word	0x0000e509

0000e9e8 <RADIO_RxDone>:
    e9e8:	b570      	push	{r4, r5, r6, lr}
    e9ea:	2012      	movs	r0, #18
    e9ec:	4e16      	ldr	r6, [pc, #88]	; (ea48 <RADIO_RxDone+0x60>)
    e9ee:	47b0      	blx	r6
    e9f0:	4b16      	ldr	r3, [pc, #88]	; (ea4c <RADIO_RxDone+0x64>)
    e9f2:	0005      	movs	r5, r0
    e9f4:	2170      	movs	r1, #112	; 0x70
    e9f6:	2012      	movs	r0, #18
    e9f8:	4798      	blx	r3
    e9fa:	2350      	movs	r3, #80	; 0x50
    e9fc:	402b      	ands	r3, r5
    e9fe:	2b50      	cmp	r3, #80	; 0x50
    ea00:	d119      	bne.n	ea36 <RADIO_RxDone+0x4e>
    ea02:	4c13      	ldr	r4, [pc, #76]	; (ea50 <RADIO_RxDone+0x68>)
    ea04:	0023      	movs	r3, r4
    ea06:	332f      	adds	r3, #47	; 0x2f
    ea08:	7818      	ldrb	r0, [r3, #0]
    ea0a:	4b12      	ldr	r3, [pc, #72]	; (ea54 <RADIO_RxDone+0x6c>)
    ea0c:	4798      	blx	r3
    ea0e:	4b12      	ldr	r3, [pc, #72]	; (ea58 <RADIO_RxDone+0x70>)
    ea10:	2000      	movs	r0, #0
    ea12:	4798      	blx	r3
    ea14:	3404      	adds	r4, #4
    ea16:	201c      	movs	r0, #28
    ea18:	47b0      	blx	r6
    ea1a:	7fe2      	ldrb	r2, [r4, #31]
    ea1c:	4b0f      	ldr	r3, [pc, #60]	; (ea5c <RADIO_RxDone+0x74>)
    ea1e:	4910      	ldr	r1, [pc, #64]	; (ea60 <RADIO_RxDone+0x78>)
    ea20:	2a00      	cmp	r2, #0
    ea22:	d003      	beq.n	ea2c <RADIO_RxDone+0x44>
    ea24:	06aa      	lsls	r2, r5, #26
    ea26:	d407      	bmi.n	ea38 <RADIO_RxDone+0x50>
    ea28:	0642      	lsls	r2, r0, #25
    ea2a:	d505      	bpl.n	ea38 <RADIO_RxDone+0x50>
    ea2c:	2002      	movs	r0, #2
    ea2e:	881a      	ldrh	r2, [r3, #0]
    ea30:	4302      	orrs	r2, r0
    ea32:	801a      	strh	r2, [r3, #0]
    ea34:	4788      	blx	r1
    ea36:	bd70      	pop	{r4, r5, r6, pc}
    ea38:	2280      	movs	r2, #128	; 0x80
    ea3a:	8818      	ldrh	r0, [r3, #0]
    ea3c:	0052      	lsls	r2, r2, #1
    ea3e:	4302      	orrs	r2, r0
    ea40:	801a      	strh	r2, [r3, #0]
    ea42:	2002      	movs	r0, #2
    ea44:	e7f6      	b.n	ea34 <RADIO_RxDone+0x4c>
    ea46:	46c0      	nop			; (mov r8, r8)
    ea48:	0000bfe9 	.word	0x0000bfe9
    ea4c:	0000bfc1 	.word	0x0000bfc1
    ea50:	20002d78 	.word	0x20002d78
    ea54:	0000cec5 	.word	0x0000cec5
    ea58:	0000e7f1 	.word	0x0000e7f1
    ea5c:	20003044 	.word	0x20003044
    ea60:	0000e509 	.word	0x0000e509

0000ea64 <RADIO_FSKPayloadReady>:
    ea64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ea66:	203f      	movs	r0, #63	; 0x3f
    ea68:	4b39      	ldr	r3, [pc, #228]	; (eb50 <RADIO_FSKPayloadReady+0xec>)
    ea6a:	4798      	blx	r3
    ea6c:	0743      	lsls	r3, r0, #29
    ea6e:	d559      	bpl.n	eb24 <RADIO_FSKPayloadReady+0xc0>
    ea70:	4c38      	ldr	r4, [pc, #224]	; (eb54 <RADIO_FSKPayloadReady+0xf0>)
    ea72:	4d39      	ldr	r5, [pc, #228]	; (eb58 <RADIO_FSKPayloadReady+0xf4>)
    ea74:	1d23      	adds	r3, r4, #4
    ea76:	7fdb      	ldrb	r3, [r3, #31]
    ea78:	2b01      	cmp	r3, #1
    ea7a:	d154      	bne.n	eb26 <RADIO_FSKPayloadReady+0xc2>
    ea7c:	2202      	movs	r2, #2
    ea7e:	4210      	tst	r0, r2
    ea80:	d048      	beq.n	eb14 <RADIO_FSKPayloadReady+0xb0>
    ea82:	0023      	movs	r3, r4
    ea84:	332f      	adds	r3, #47	; 0x2f
    ea86:	7818      	ldrb	r0, [r3, #0]
    ea88:	4e34      	ldr	r6, [pc, #208]	; (eb5c <RADIO_FSKPayloadReady+0xf8>)
    ea8a:	47b0      	blx	r6
    ea8c:	0023      	movs	r3, r4
    ea8e:	332e      	adds	r3, #46	; 0x2e
    ea90:	7818      	ldrb	r0, [r3, #0]
    ea92:	47b0      	blx	r6
    ea94:	4b32      	ldr	r3, [pc, #200]	; (eb60 <RADIO_FSKPayloadReady+0xfc>)
    ea96:	4798      	blx	r3
    ea98:	0022      	movs	r2, r4
    ea9a:	0023      	movs	r3, r4
    ea9c:	322c      	adds	r2, #44	; 0x2c
    ea9e:	3358      	adds	r3, #88	; 0x58
    eaa0:	7810      	ldrb	r0, [r2, #0]
    eaa2:	7819      	ldrb	r1, [r3, #0]
    eaa4:	4288      	cmp	r0, r1
    eaa6:	d105      	bne.n	eab4 <RADIO_FSKPayloadReady+0x50>
    eaa8:	7812      	ldrb	r2, [r2, #0]
    eaaa:	2a00      	cmp	r2, #0
    eaac:	d002      	beq.n	eab4 <RADIO_FSKPayloadReady+0x50>
    eaae:	781b      	ldrb	r3, [r3, #0]
    eab0:	2b00      	cmp	r3, #0
    eab2:	d118      	bne.n	eae6 <RADIO_FSKPayloadReady+0x82>
    eab4:	0021      	movs	r1, r4
    eab6:	312c      	adds	r1, #44	; 0x2c
    eab8:	7808      	ldrb	r0, [r1, #0]
    eaba:	b2c0      	uxtb	r0, r0
    eabc:	2800      	cmp	r0, #0
    eabe:	d102      	bne.n	eac6 <RADIO_FSKPayloadReady+0x62>
    eac0:	2201      	movs	r2, #1
    eac2:	4b28      	ldr	r3, [pc, #160]	; (eb64 <RADIO_FSKPayloadReady+0x100>)
    eac4:	4798      	blx	r3
    eac6:	0026      	movs	r6, r4
    eac8:	0027      	movs	r7, r4
    eaca:	3658      	adds	r6, #88	; 0x58
    eacc:	7830      	ldrb	r0, [r6, #0]
    eace:	372c      	adds	r7, #44	; 0x2c
    ead0:	b2c0      	uxtb	r0, r0
    ead2:	2800      	cmp	r0, #0
    ead4:	d110      	bne.n	eaf8 <RADIO_FSKPayloadReady+0x94>
    ead6:	783a      	ldrb	r2, [r7, #0]
    ead8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    eada:	b2d2      	uxtb	r2, r2
    eadc:	4b21      	ldr	r3, [pc, #132]	; (eb64 <RADIO_FSKPayloadReady+0x100>)
    eade:	4798      	blx	r3
    eae0:	783b      	ldrb	r3, [r7, #0]
    eae2:	b2db      	uxtb	r3, r3
    eae4:	7033      	strb	r3, [r6, #0]
    eae6:	4b20      	ldr	r3, [pc, #128]	; (eb68 <RADIO_FSKPayloadReady+0x104>)
    eae8:	4798      	blx	r3
    eaea:	4b20      	ldr	r3, [pc, #128]	; (eb6c <RADIO_FSKPayloadReady+0x108>)
    eaec:	2000      	movs	r0, #0
    eaee:	4798      	blx	r3
    eaf0:	2308      	movs	r3, #8
    eaf2:	882a      	ldrh	r2, [r5, #0]
    eaf4:	4313      	orrs	r3, r2
    eaf6:	e011      	b.n	eb1c <RADIO_FSKPayloadReady+0xb8>
    eaf8:	783b      	ldrb	r3, [r7, #0]
    eafa:	7832      	ldrb	r2, [r6, #0]
    eafc:	1a9b      	subs	r3, r3, r2
    eafe:	2b00      	cmp	r3, #0
    eb00:	ddf1      	ble.n	eae6 <RADIO_FSKPayloadReady+0x82>
    eb02:	7833      	ldrb	r3, [r6, #0]
    eb04:	783a      	ldrb	r2, [r7, #0]
    eb06:	7831      	ldrb	r1, [r6, #0]
    eb08:	2000      	movs	r0, #0
    eb0a:	1a52      	subs	r2, r2, r1
    eb0c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    eb0e:	b2d2      	uxtb	r2, r2
    eb10:	18c9      	adds	r1, r1, r3
    eb12:	e7e3      	b.n	eadc <RADIO_FSKPayloadReady+0x78>
    eb14:	2380      	movs	r3, #128	; 0x80
    eb16:	8829      	ldrh	r1, [r5, #0]
    eb18:	005b      	lsls	r3, r3, #1
    eb1a:	430b      	orrs	r3, r1
    eb1c:	802b      	strh	r3, [r5, #0]
    eb1e:	2002      	movs	r0, #2
    eb20:	4b13      	ldr	r3, [pc, #76]	; (eb70 <RADIO_FSKPayloadReady+0x10c>)
    eb22:	4798      	blx	r3
    eb24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eb26:	0023      	movs	r3, r4
    eb28:	332f      	adds	r3, #47	; 0x2f
    eb2a:	4e0c      	ldr	r6, [pc, #48]	; (eb5c <RADIO_FSKPayloadReady+0xf8>)
    eb2c:	7818      	ldrb	r0, [r3, #0]
    eb2e:	47b0      	blx	r6
    eb30:	0023      	movs	r3, r4
    eb32:	332e      	adds	r3, #46	; 0x2e
    eb34:	7818      	ldrb	r0, [r3, #0]
    eb36:	47b0      	blx	r6
    eb38:	4e0e      	ldr	r6, [pc, #56]	; (eb74 <RADIO_FSKPayloadReady+0x110>)
    eb3a:	2201      	movs	r2, #1
    eb3c:	0031      	movs	r1, r6
    eb3e:	2000      	movs	r0, #0
    eb40:	4f08      	ldr	r7, [pc, #32]	; (eb64 <RADIO_FSKPayloadReady+0x100>)
    eb42:	47b8      	blx	r7
    eb44:	7832      	ldrb	r2, [r6, #0]
    eb46:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    eb48:	b2d2      	uxtb	r2, r2
    eb4a:	2000      	movs	r0, #0
    eb4c:	47b8      	blx	r7
    eb4e:	e7cc      	b.n	eaea <RADIO_FSKPayloadReady+0x86>
    eb50:	0000bfe9 	.word	0x0000bfe9
    eb54:	20002d78 	.word	0x20002d78
    eb58:	20003044 	.word	0x20003044
    eb5c:	0000cec5 	.word	0x0000cec5
    eb60:	000044f9 	.word	0x000044f9
    eb64:	0000c055 	.word	0x0000c055
    eb68:	00004539 	.word	0x00004539
    eb6c:	0000e7f1 	.word	0x0000e7f1
    eb70:	0000e509 	.word	0x0000e509
    eb74:	20002da4 	.word	0x20002da4

0000eb78 <Radio_SetClockInput>:
    eb78:	b510      	push	{r4, lr}
    eb7a:	4b08      	ldr	r3, [pc, #32]	; (eb9c <Radio_SetClockInput+0x24>)
    eb7c:	3355      	adds	r3, #85	; 0x55
    eb7e:	781b      	ldrb	r3, [r3, #0]
    eb80:	2b00      	cmp	r3, #0
    eb82:	d10a      	bne.n	eb9a <Radio_SetClockInput+0x22>
    eb84:	4b06      	ldr	r3, [pc, #24]	; (eba0 <Radio_SetClockInput+0x28>)
    eb86:	204b      	movs	r0, #75	; 0x4b
    eb88:	4798      	blx	r3
    eb8a:	2110      	movs	r1, #16
    eb8c:	4301      	orrs	r1, r0
    eb8e:	4b05      	ldr	r3, [pc, #20]	; (eba4 <Radio_SetClockInput+0x2c>)
    eb90:	b2c9      	uxtb	r1, r1
    eb92:	204b      	movs	r0, #75	; 0x4b
    eb94:	4798      	blx	r3
    eb96:	4b04      	ldr	r3, [pc, #16]	; (eba8 <Radio_SetClockInput+0x30>)
    eb98:	4798      	blx	r3
    eb9a:	bd10      	pop	{r4, pc}
    eb9c:	20002d78 	.word	0x20002d78
    eba0:	0000bfe9 	.word	0x0000bfe9
    eba4:	0000bfc1 	.word	0x0000bfc1
    eba8:	0000c109 	.word	0x0000c109

0000ebac <RADIO_RxHandler>:
    ebac:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ebae:	4b34      	ldr	r3, [pc, #208]	; (ec80 <RADIO_RxHandler+0xd4>)
    ebb0:	4798      	blx	r3
    ebb2:	2000      	movs	r0, #0
    ebb4:	4b33      	ldr	r3, [pc, #204]	; (ec84 <RADIO_RxHandler+0xd8>)
    ebb6:	4798      	blx	r3
    ebb8:	4e33      	ldr	r6, [pc, #204]	; (ec88 <RADIO_RxHandler+0xdc>)
    ebba:	4b34      	ldr	r3, [pc, #208]	; (ec8c <RADIO_RxHandler+0xe0>)
    ebbc:	8830      	ldrh	r0, [r6, #0]
    ebbe:	2800      	cmp	r0, #0
    ebc0:	d100      	bne.n	ebc4 <RADIO_RxHandler+0x18>
    ebc2:	3004      	adds	r0, #4
    ebc4:	4798      	blx	r3
    ebc6:	4c32      	ldr	r4, [pc, #200]	; (ec90 <RADIO_RxHandler+0xe4>)
    ebc8:	4d32      	ldr	r5, [pc, #200]	; (ec94 <RADIO_RxHandler+0xe8>)
    ebca:	0023      	movs	r3, r4
    ebcc:	3334      	adds	r3, #52	; 0x34
    ebce:	7819      	ldrb	r1, [r3, #0]
    ebd0:	2901      	cmp	r1, #1
    ebd2:	d122      	bne.n	ec1a <RADIO_RxHandler+0x6e>
    ebd4:	2022      	movs	r0, #34	; 0x22
    ebd6:	47a8      	blx	r5
    ebd8:	2100      	movs	r1, #0
    ebda:	2040      	movs	r0, #64	; 0x40
    ebdc:	47a8      	blx	r5
    ebde:	2100      	movs	r1, #0
    ebe0:	2041      	movs	r0, #65	; 0x41
    ebe2:	47a8      	blx	r5
    ebe4:	8832      	ldrh	r2, [r6, #0]
    ebe6:	4b2c      	ldr	r3, [pc, #176]	; (ec98 <RADIO_RxHandler+0xec>)
    ebe8:	2a00      	cmp	r2, #0
    ebea:	d131      	bne.n	ec50 <RADIO_RxHandler+0xa4>
    ebec:	0021      	movs	r1, r4
    ebee:	2005      	movs	r0, #5
    ebf0:	3134      	adds	r1, #52	; 0x34
    ebf2:	7809      	ldrb	r1, [r1, #0]
    ebf4:	4798      	blx	r3
    ebf6:	68e3      	ldr	r3, [r4, #12]
    ebf8:	2b00      	cmp	r3, #0
    ebfa:	d00c      	beq.n	ec16 <RADIO_RxHandler+0x6a>
    ebfc:	8832      	ldrh	r2, [r6, #0]
    ebfe:	2a00      	cmp	r2, #0
    ec00:	d009      	beq.n	ec16 <RADIO_RxHandler+0x6a>
    ec02:	21fa      	movs	r1, #250	; 0xfa
    ec04:	2200      	movs	r2, #0
    ec06:	342f      	adds	r4, #47	; 0x2f
    ec08:	0089      	lsls	r1, r1, #2
    ec0a:	7820      	ldrb	r0, [r4, #0]
    ec0c:	4359      	muls	r1, r3
    ec0e:	9200      	str	r2, [sp, #0]
    ec10:	4b22      	ldr	r3, [pc, #136]	; (ec9c <RADIO_RxHandler+0xf0>)
    ec12:	4c23      	ldr	r4, [pc, #140]	; (eca0 <RADIO_RxHandler+0xf4>)
    ec14:	47a0      	blx	r4
    ec16:	2000      	movs	r0, #0
    ec18:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    ec1a:	0023      	movs	r3, r4
    ec1c:	3338      	adds	r3, #56	; 0x38
    ec1e:	7819      	ldrb	r1, [r3, #0]
    ec20:	2012      	movs	r0, #18
    ec22:	47a8      	blx	r5
    ec24:	0023      	movs	r3, r4
    ec26:	3339      	adds	r3, #57	; 0x39
    ec28:	7819      	ldrb	r1, [r3, #0]
    ec2a:	2013      	movs	r0, #19
    ec2c:	47a8      	blx	r5
    ec2e:	210c      	movs	r1, #12
    ec30:	2040      	movs	r0, #64	; 0x40
    ec32:	47a8      	blx	r5
    ec34:	2100      	movs	r1, #0
    ec36:	2041      	movs	r0, #65	; 0x41
    ec38:	47a8      	blx	r5
    ec3a:	0022      	movs	r2, r4
    ec3c:	2300      	movs	r3, #0
    ec3e:	3256      	adds	r2, #86	; 0x56
    ec40:	8013      	strh	r3, [r2, #0]
    ec42:	0022      	movs	r2, r4
    ec44:	322c      	adds	r2, #44	; 0x2c
    ec46:	7013      	strb	r3, [r2, #0]
    ec48:	0022      	movs	r2, r4
    ec4a:	3258      	adds	r2, #88	; 0x58
    ec4c:	7013      	strb	r3, [r2, #0]
    ec4e:	e7c9      	b.n	ebe4 <RADIO_RxHandler+0x38>
    ec50:	0022      	movs	r2, r4
    ec52:	3234      	adds	r2, #52	; 0x34
    ec54:	7811      	ldrb	r1, [r2, #0]
    ec56:	2200      	movs	r2, #0
    ec58:	2901      	cmp	r1, #1
    ec5a:	d101      	bne.n	ec60 <RADIO_RxHandler+0xb4>
    ec5c:	2006      	movs	r0, #6
    ec5e:	e7c9      	b.n	ebf4 <RADIO_RxHandler+0x48>
    ec60:	0011      	movs	r1, r2
    ec62:	2005      	movs	r0, #5
    ec64:	4798      	blx	r3
    ec66:	21fa      	movs	r1, #250	; 0xfa
    ec68:	8833      	ldrh	r3, [r6, #0]
    ec6a:	0089      	lsls	r1, r1, #2
    ec6c:	4359      	muls	r1, r3
    ec6e:	0023      	movs	r3, r4
    ec70:	2200      	movs	r2, #0
    ec72:	332e      	adds	r3, #46	; 0x2e
    ec74:	7818      	ldrb	r0, [r3, #0]
    ec76:	4d0a      	ldr	r5, [pc, #40]	; (eca0 <RADIO_RxHandler+0xf4>)
    ec78:	9200      	str	r2, [sp, #0]
    ec7a:	4b0a      	ldr	r3, [pc, #40]	; (eca4 <RADIO_RxHandler+0xf8>)
    ec7c:	47a8      	blx	r5
    ec7e:	e7ba      	b.n	ebf6 <RADIO_RxHandler+0x4a>
    ec80:	0000eb79 	.word	0x0000eb79
    ec84:	0000e7bd 	.word	0x0000e7bd
    ec88:	20001e88 	.word	0x20001e88
    ec8c:	0000df49 	.word	0x0000df49
    ec90:	20002d78 	.word	0x20002d78
    ec94:	0000bfc1 	.word	0x0000bfc1
    ec98:	0000d1e9 	.word	0x0000d1e9
    ec9c:	0000e825 	.word	0x0000e825
    eca0:	0000cbad 	.word	0x0000cbad
    eca4:	0000e8b5 	.word	0x0000e8b5

0000eca8 <Radio_ResetClockInput>:
    eca8:	b510      	push	{r4, lr}
    ecaa:	4b04      	ldr	r3, [pc, #16]	; (ecbc <Radio_ResetClockInput+0x14>)
    ecac:	3355      	adds	r3, #85	; 0x55
    ecae:	781b      	ldrb	r3, [r3, #0]
    ecb0:	2b00      	cmp	r3, #0
    ecb2:	d101      	bne.n	ecb8 <Radio_ResetClockInput+0x10>
    ecb4:	4b02      	ldr	r3, [pc, #8]	; (ecc0 <Radio_ResetClockInput+0x18>)
    ecb6:	4798      	blx	r3
    ecb8:	bd10      	pop	{r4, pc}
    ecba:	46c0      	nop			; (mov r8, r8)
    ecbc:	20002d78 	.word	0x20002d78
    ecc0:	0000c125 	.word	0x0000c125

0000ecc4 <RADIO_InitDefaultAttributes>:
    ecc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ecc6:	2501      	movs	r5, #1
    ecc8:	4b64      	ldr	r3, [pc, #400]	; (ee5c <RADIO_InitDefaultAttributes+0x198>)
    ecca:	4c65      	ldr	r4, [pc, #404]	; (ee60 <RADIO_InitDefaultAttributes+0x19c>)
    eccc:	701d      	strb	r5, [r3, #0]
    ecce:	4b65      	ldr	r3, [pc, #404]	; (ee64 <RADIO_InitDefaultAttributes+0x1a0>)
    ecd0:	2207      	movs	r2, #7
    ecd2:	6023      	str	r3, [r4, #0]
    ecd4:	4b64      	ldr	r3, [pc, #400]	; (ee68 <RADIO_InitDefaultAttributes+0x1a4>)
    ecd6:	18a1      	adds	r1, r4, r2
    ecd8:	6063      	str	r3, [r4, #4]
    ecda:	4b64      	ldr	r3, [pc, #400]	; (ee6c <RADIO_InitDefaultAttributes+0x1a8>)
    ecdc:	0027      	movs	r7, r4
    ecde:	60a3      	str	r3, [r4, #8]
    ece0:	0023      	movs	r3, r4
    ece2:	3334      	adds	r3, #52	; 0x34
    ece4:	701d      	strb	r5, [r3, #0]
    ece6:	0023      	movs	r3, r4
    ece8:	3336      	adds	r3, #54	; 0x36
    ecea:	701a      	strb	r2, [r3, #0]
    ecec:	1ce3      	adds	r3, r4, #3
    ecee:	77dd      	strb	r5, [r3, #31]
    ecf0:	0023      	movs	r3, r4
    ecf2:	3333      	adds	r3, #51	; 0x33
    ecf4:	701d      	strb	r5, [r3, #0]
    ecf6:	2300      	movs	r3, #0
    ecf8:	77cb      	strb	r3, [r1, #31]
    ecfa:	2108      	movs	r1, #8
    ecfc:	82a1      	strh	r1, [r4, #20]
    ecfe:	0021      	movs	r1, r4
    ed00:	3135      	adds	r1, #53	; 0x35
    ed02:	700a      	strb	r2, [r1, #0]
    ed04:	1d22      	adds	r2, r4, #4
    ed06:	77d5      	strb	r5, [r2, #31]
    ed08:	1d62      	adds	r2, r4, #5
    ed0a:	77d3      	strb	r3, [r2, #31]
    ed0c:	1da2      	adds	r2, r4, #6
    ed0e:	77d3      	strb	r3, [r2, #31]
    ed10:	2194      	movs	r1, #148	; 0x94
    ed12:	22c1      	movs	r2, #193	; 0xc1
    ed14:	76a1      	strb	r1, [r4, #26]
    ed16:	7662      	strb	r2, [r4, #25]
    ed18:	76e2      	strb	r2, [r4, #27]
    ed1a:	3991      	subs	r1, #145	; 0x91
    ed1c:	1ca2      	adds	r2, r4, #2
    ed1e:	77d1      	strb	r1, [r2, #31]
    ed20:	2234      	movs	r2, #52	; 0x34
    ed22:	7622      	strb	r2, [r4, #24]
    ed24:	0022      	movs	r2, r4
    ed26:	317d      	adds	r1, #125	; 0x7d
    ed28:	3232      	adds	r2, #50	; 0x32
    ed2a:	7011      	strb	r1, [r2, #0]
    ed2c:	4a50      	ldr	r2, [pc, #320]	; (ee70 <RADIO_InitDefaultAttributes+0x1ac>)
    ed2e:	397e      	subs	r1, #126	; 0x7e
    ed30:	60e2      	str	r2, [r4, #12]
    ed32:	0022      	movs	r2, r4
    ed34:	3237      	adds	r2, #55	; 0x37
    ed36:	7011      	strb	r1, [r2, #0]
    ed38:	0022      	movs	r2, r4
    ed3a:	3109      	adds	r1, #9
    ed3c:	3238      	adds	r2, #56	; 0x38
    ed3e:	7011      	strb	r1, [r2, #0]
    ed40:	0022      	movs	r2, r4
    ed42:	3107      	adds	r1, #7
    ed44:	3239      	adds	r2, #57	; 0x39
    ed46:	7011      	strb	r1, [r2, #0]
    ed48:	0022      	movs	r2, r4
    ed4a:	322c      	adds	r2, #44	; 0x2c
    ed4c:	7013      	strb	r3, [r2, #0]
    ed4e:	4a49      	ldr	r2, [pc, #292]	; (ee74 <RADIO_InitDefaultAttributes+0x1b0>)
    ed50:	82e3      	strh	r3, [r4, #22]
    ed52:	62a2      	str	r2, [r4, #40]	; 0x28
    ed54:	0022      	movs	r2, r4
    ed56:	324c      	adds	r2, #76	; 0x4c
    ed58:	8013      	strh	r3, [r2, #0]
    ed5a:	0022      	movs	r2, r4
    ed5c:	324e      	adds	r2, #78	; 0x4e
    ed5e:	7013      	strb	r3, [r2, #0]
    ed60:	0022      	movs	r2, r4
    ed62:	324f      	adds	r2, #79	; 0x4f
    ed64:	7013      	strb	r3, [r2, #0]
    ed66:	0022      	movs	r2, r4
    ed68:	3240      	adds	r2, #64	; 0x40
    ed6a:	7013      	strb	r3, [r2, #0]
    ed6c:	0022      	movs	r2, r4
    ed6e:	3241      	adds	r2, #65	; 0x41
    ed70:	7013      	strb	r3, [r2, #0]
    ed72:	0022      	movs	r2, r4
    ed74:	3254      	adds	r2, #84	; 0x54
    ed76:	7013      	strb	r3, [r2, #0]
    ed78:	0022      	movs	r2, r4
    ed7a:	3255      	adds	r2, #85	; 0x55
    ed7c:	7015      	strb	r5, [r2, #0]
    ed7e:	0022      	movs	r2, r4
    ed80:	3258      	adds	r2, #88	; 0x58
    ed82:	6463      	str	r3, [r4, #68]	; 0x44
    ed84:	64a3      	str	r3, [r4, #72]	; 0x48
    ed86:	87a3      	strh	r3, [r4, #60]	; 0x3c
    ed88:	87e3      	strh	r3, [r4, #62]	; 0x3e
    ed8a:	7013      	strb	r3, [r2, #0]
    ed8c:	3730      	adds	r7, #48	; 0x30
    ed8e:	783b      	ldrb	r3, [r7, #0]
    ed90:	2b00      	cmp	r3, #0
    ed92:	d151      	bne.n	ee38 <RADIO_InitDefaultAttributes+0x174>
    ed94:	4838      	ldr	r0, [pc, #224]	; (ee78 <RADIO_InitDefaultAttributes+0x1b4>)
    ed96:	4e39      	ldr	r6, [pc, #228]	; (ee7c <RADIO_InitDefaultAttributes+0x1b8>)
    ed98:	47b0      	blx	r6
    ed9a:	2808      	cmp	r0, #8
    ed9c:	d149      	bne.n	ee32 <RADIO_InitDefaultAttributes+0x16e>
    ed9e:	4838      	ldr	r0, [pc, #224]	; (ee80 <RADIO_InitDefaultAttributes+0x1bc>)
    eda0:	47b0      	blx	r6
    eda2:	2808      	cmp	r0, #8
    eda4:	d145      	bne.n	ee32 <RADIO_InitDefaultAttributes+0x16e>
    eda6:	4837      	ldr	r0, [pc, #220]	; (ee84 <RADIO_InitDefaultAttributes+0x1c0>)
    eda8:	47b0      	blx	r6
    edaa:	2808      	cmp	r0, #8
    edac:	d141      	bne.n	ee32 <RADIO_InitDefaultAttributes+0x16e>
    edae:	4836      	ldr	r0, [pc, #216]	; (ee88 <RADIO_InitDefaultAttributes+0x1c4>)
    edb0:	47b0      	blx	r6
    edb2:	2808      	cmp	r0, #8
    edb4:	d13d      	bne.n	ee32 <RADIO_InitDefaultAttributes+0x16e>
    edb6:	703d      	strb	r5, [r7, #0]
    edb8:	4b34      	ldr	r3, [pc, #208]	; (ee8c <RADIO_InitDefaultAttributes+0x1c8>)
    edba:	4798      	blx	r3
    edbc:	4b34      	ldr	r3, [pc, #208]	; (ee90 <RADIO_InitDefaultAttributes+0x1cc>)
    edbe:	4798      	blx	r3
    edc0:	2800      	cmp	r0, #0
    edc2:	d107      	bne.n	edd4 <RADIO_InitDefaultAttributes+0x110>
    edc4:	0023      	movs	r3, r4
    edc6:	3355      	adds	r3, #85	; 0x55
    edc8:	7018      	strb	r0, [r3, #0]
    edca:	4b32      	ldr	r3, [pc, #200]	; (ee94 <RADIO_InitDefaultAttributes+0x1d0>)
    edcc:	4798      	blx	r3
    edce:	0023      	movs	r3, r4
    edd0:	3354      	adds	r3, #84	; 0x54
    edd2:	7018      	strb	r0, [r3, #0]
    edd4:	4b30      	ldr	r3, [pc, #192]	; (ee98 <RADIO_InitDefaultAttributes+0x1d4>)
    edd6:	4798      	blx	r3
    edd8:	2201      	movs	r2, #1
    edda:	2100      	movs	r1, #0
    eddc:	0010      	movs	r0, r2
    edde:	4f2f      	ldr	r7, [pc, #188]	; (ee9c <RADIO_InitDefaultAttributes+0x1d8>)
    ede0:	47b8      	blx	r7
    ede2:	6820      	ldr	r0, [r4, #0]
    ede4:	4b2e      	ldr	r3, [pc, #184]	; (eea0 <RADIO_InitDefaultAttributes+0x1dc>)
    ede6:	4798      	blx	r3
    ede8:	2142      	movs	r1, #66	; 0x42
    edea:	203b      	movs	r0, #59	; 0x3b
    edec:	4d2d      	ldr	r5, [pc, #180]	; (eea4 <RADIO_InitDefaultAttributes+0x1e0>)
    edee:	47a8      	blx	r5
    edf0:	203b      	movs	r0, #59	; 0x3b
    edf2:	4b2d      	ldr	r3, [pc, #180]	; (eea8 <RADIO_InitDefaultAttributes+0x1e4>)
    edf4:	4798      	blx	r3
    edf6:	2620      	movs	r6, #32
    edf8:	4006      	ands	r6, r0
    edfa:	d1f9      	bne.n	edf0 <RADIO_InitDefaultAttributes+0x12c>
    edfc:	2123      	movs	r1, #35	; 0x23
    edfe:	200c      	movs	r0, #12
    ee00:	47a8      	blx	r5
    ee02:	21aa      	movs	r1, #170	; 0xaa
    ee04:	201f      	movs	r0, #31
    ee06:	47a8      	blx	r5
    ee08:	21ff      	movs	r1, #255	; 0xff
    ee0a:	2032      	movs	r0, #50	; 0x32
    ee0c:	47a8      	blx	r5
    ee0e:	2140      	movs	r1, #64	; 0x40
    ee10:	2031      	movs	r0, #49	; 0x31
    ee12:	47a8      	blx	r5
    ee14:	2201      	movs	r2, #1
    ee16:	0030      	movs	r0, r6
    ee18:	0011      	movs	r1, r2
    ee1a:	47b8      	blx	r7
    ee1c:	21ff      	movs	r1, #255	; 0xff
    ee1e:	2023      	movs	r0, #35	; 0x23
    ee20:	47a8      	blx	r5
    ee22:	4b21      	ldr	r3, [pc, #132]	; (eea8 <RADIO_InitDefaultAttributes+0x1e4>)
    ee24:	2042      	movs	r0, #66	; 0x42
    ee26:	4798      	blx	r3
    ee28:	3431      	adds	r4, #49	; 0x31
    ee2a:	4b20      	ldr	r3, [pc, #128]	; (eeac <RADIO_InitDefaultAttributes+0x1e8>)
    ee2c:	7020      	strb	r0, [r4, #0]
    ee2e:	4798      	blx	r3
    ee30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ee32:	4b1f      	ldr	r3, [pc, #124]	; (eeb0 <RADIO_InitDefaultAttributes+0x1ec>)
    ee34:	4798      	blx	r3
    ee36:	e7bf      	b.n	edb8 <RADIO_InitDefaultAttributes+0xf4>
    ee38:	0023      	movs	r3, r4
    ee3a:	332d      	adds	r3, #45	; 0x2d
    ee3c:	4d1d      	ldr	r5, [pc, #116]	; (eeb4 <RADIO_InitDefaultAttributes+0x1f0>)
    ee3e:	7818      	ldrb	r0, [r3, #0]
    ee40:	47a8      	blx	r5
    ee42:	0023      	movs	r3, r4
    ee44:	332e      	adds	r3, #46	; 0x2e
    ee46:	7818      	ldrb	r0, [r3, #0]
    ee48:	47a8      	blx	r5
    ee4a:	0023      	movs	r3, r4
    ee4c:	332f      	adds	r3, #47	; 0x2f
    ee4e:	7818      	ldrb	r0, [r3, #0]
    ee50:	47a8      	blx	r5
    ee52:	0023      	movs	r3, r4
    ee54:	3350      	adds	r3, #80	; 0x50
    ee56:	7818      	ldrb	r0, [r3, #0]
    ee58:	47a8      	blx	r5
    ee5a:	e7ad      	b.n	edb8 <RADIO_InitDefaultAttributes+0xf4>
    ee5c:	20003047 	.word	0x20003047
    ee60:	20002d78 	.word	0x20002d78
    ee64:	33be27a0 	.word	0x33be27a0
    ee68:	000061a8 	.word	0x000061a8
    ee6c:	0000c350 	.word	0x0000c350
    ee70:	00003a98 	.word	0x00003a98
    ee74:	20002f44 	.word	0x20002f44
    ee78:	20002da5 	.word	0x20002da5
    ee7c:	0000cb79 	.word	0x0000cb79
    ee80:	20002da6 	.word	0x20002da6
    ee84:	20002da7 	.word	0x20002da7
    ee88:	20002dc8 	.word	0x20002dc8
    ee8c:	0000bf81 	.word	0x0000bf81
    ee90:	0000c105 	.word	0x0000c105
    ee94:	0000c101 	.word	0x0000c101
    ee98:	0000eb79 	.word	0x0000eb79
    ee9c:	0000d1e9 	.word	0x0000d1e9
    eea0:	0000df01 	.word	0x0000df01
    eea4:	0000bfc1 	.word	0x0000bfc1
    eea8:	0000bfe9 	.word	0x0000bfe9
    eeac:	0000eca9 	.word	0x0000eca9
    eeb0:	0000cabd 	.word	0x0000cabd
    eeb4:	0000cec5 	.word	0x0000cec5

0000eeb8 <RADIO_Receive>:
    eeb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eeba:	7803      	ldrb	r3, [r0, #0]
    eebc:	0006      	movs	r6, r0
    eebe:	4d24      	ldr	r5, [pc, #144]	; (ef50 <RADIO_Receive+0x98>)
    eec0:	2b00      	cmp	r3, #0
    eec2:	d11d      	bne.n	ef00 <RADIO_Receive+0x48>
    eec4:	782b      	ldrb	r3, [r5, #0]
    eec6:	2004      	movs	r0, #4
    eec8:	2b01      	cmp	r3, #1
    eeca:	d118      	bne.n	eefe <RADIO_Receive+0x46>
    eecc:	4c21      	ldr	r4, [pc, #132]	; (ef54 <RADIO_Receive+0x9c>)
    eece:	4f22      	ldr	r7, [pc, #136]	; (ef58 <RADIO_Receive+0xa0>)
    eed0:	0023      	movs	r3, r4
    eed2:	332f      	adds	r3, #47	; 0x2f
    eed4:	7818      	ldrb	r0, [r3, #0]
    eed6:	47b8      	blx	r7
    eed8:	0023      	movs	r3, r4
    eeda:	3334      	adds	r3, #52	; 0x34
    eedc:	781b      	ldrb	r3, [r3, #0]
    eede:	2b00      	cmp	r3, #0
    eee0:	d102      	bne.n	eee8 <RADIO_Receive+0x30>
    eee2:	342e      	adds	r4, #46	; 0x2e
    eee4:	7820      	ldrb	r0, [r4, #0]
    eee6:	47b8      	blx	r7
    eee8:	8872      	ldrh	r2, [r6, #2]
    eeea:	4b1c      	ldr	r3, [pc, #112]	; (ef5c <RADIO_Receive+0xa4>)
    eeec:	2008      	movs	r0, #8
    eeee:	801a      	strh	r2, [r3, #0]
    eef0:	2304      	movs	r3, #4
    eef2:	702b      	strb	r3, [r5, #0]
    eef4:	4b1a      	ldr	r3, [pc, #104]	; (ef60 <RADIO_Receive+0xa8>)
    eef6:	4798      	blx	r3
    eef8:	4b1a      	ldr	r3, [pc, #104]	; (ef64 <RADIO_Receive+0xac>)
    eefa:	4798      	blx	r3
    eefc:	2000      	movs	r0, #0
    eefe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ef00:	782b      	ldrb	r3, [r5, #0]
    ef02:	2000      	movs	r0, #0
    ef04:	2b01      	cmp	r3, #1
    ef06:	d0fa      	beq.n	eefe <RADIO_Receive+0x46>
    ef08:	782b      	ldrb	r3, [r5, #0]
    ef0a:	3003      	adds	r0, #3
    ef0c:	2b04      	cmp	r3, #4
    ef0e:	d1f6      	bne.n	eefe <RADIO_Receive+0x46>
    ef10:	4c10      	ldr	r4, [pc, #64]	; (ef54 <RADIO_Receive+0x9c>)
    ef12:	4e11      	ldr	r6, [pc, #68]	; (ef58 <RADIO_Receive+0xa0>)
    ef14:	0023      	movs	r3, r4
    ef16:	332f      	adds	r3, #47	; 0x2f
    ef18:	7818      	ldrb	r0, [r3, #0]
    ef1a:	47b0      	blx	r6
    ef1c:	0023      	movs	r3, r4
    ef1e:	3334      	adds	r3, #52	; 0x34
    ef20:	781b      	ldrb	r3, [r3, #0]
    ef22:	2b00      	cmp	r3, #0
    ef24:	d103      	bne.n	ef2e <RADIO_Receive+0x76>
    ef26:	0023      	movs	r3, r4
    ef28:	332e      	adds	r3, #46	; 0x2e
    ef2a:	7818      	ldrb	r0, [r3, #0]
    ef2c:	47b0      	blx	r6
    ef2e:	2200      	movs	r2, #0
    ef30:	3434      	adds	r4, #52	; 0x34
    ef32:	7821      	ldrb	r1, [r4, #0]
    ef34:	0010      	movs	r0, r2
    ef36:	4b0c      	ldr	r3, [pc, #48]	; (ef68 <RADIO_Receive+0xb0>)
    ef38:	4798      	blx	r3
    ef3a:	4b0c      	ldr	r3, [pc, #48]	; (ef6c <RADIO_Receive+0xb4>)
    ef3c:	4798      	blx	r3
    ef3e:	2301      	movs	r3, #1
    ef40:	2008      	movs	r0, #8
    ef42:	4c0b      	ldr	r4, [pc, #44]	; (ef70 <RADIO_Receive+0xb8>)
    ef44:	702b      	strb	r3, [r5, #0]
    ef46:	47a0      	blx	r4
    ef48:	2002      	movs	r0, #2
    ef4a:	47a0      	blx	r4
    ef4c:	e7d6      	b.n	eefc <RADIO_Receive+0x44>
    ef4e:	46c0      	nop			; (mov r8, r8)
    ef50:	20003047 	.word	0x20003047
    ef54:	20002d78 	.word	0x20002d78
    ef58:	0000cec5 	.word	0x0000cec5
    ef5c:	20001e88 	.word	0x20001e88
    ef60:	0000e509 	.word	0x0000e509
    ef64:	0000eb79 	.word	0x0000eb79
    ef68:	0000d1e9 	.word	0x0000d1e9
    ef6c:	0000eca9 	.word	0x0000eca9
    ef70:	0000e535 	.word	0x0000e535

0000ef74 <RADIO_TxHandler>:
    ef74:	b5f0      	push	{r4, r5, r6, r7, lr}
    ef76:	2500      	movs	r5, #0
    ef78:	b087      	sub	sp, #28
    ef7a:	ae03      	add	r6, sp, #12
    ef7c:	4f56      	ldr	r7, [pc, #344]	; (f0d8 <RADIO_TxHandler+0x164>)
    ef7e:	7035      	strb	r5, [r6, #0]
    ef80:	47b8      	blx	r7
    ef82:	4c56      	ldr	r4, [pc, #344]	; (f0dc <RADIO_TxHandler+0x168>)
    ef84:	0023      	movs	r3, r4
    ef86:	332d      	adds	r3, #45	; 0x2d
    ef88:	7818      	ldrb	r0, [r3, #0]
    ef8a:	4b55      	ldr	r3, [pc, #340]	; (f0e0 <RADIO_TxHandler+0x16c>)
    ef8c:	4798      	blx	r3
    ef8e:	0023      	movs	r3, r4
    ef90:	3341      	adds	r3, #65	; 0x41
    ef92:	781b      	ldrb	r3, [r3, #0]
    ef94:	42ab      	cmp	r3, r5
    ef96:	d021      	beq.n	efdc <RADIO_TxHandler+0x68>
    ef98:	2214      	movs	r2, #20
    ef9a:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    ef9c:	4353      	muls	r3, r2
    ef9e:	0022      	movs	r2, r4
    efa0:	3240      	adds	r2, #64	; 0x40
    efa2:	7013      	strb	r3, [r2, #0]
    efa4:	47b8      	blx	r7
    efa6:	0028      	movs	r0, r5
    efa8:	4b4e      	ldr	r3, [pc, #312]	; (f0e4 <RADIO_TxHandler+0x170>)
    efaa:	4798      	blx	r3
    efac:	6820      	ldr	r0, [r4, #0]
    efae:	4b4e      	ldr	r3, [pc, #312]	; (f0e8 <RADIO_TxHandler+0x174>)
    efb0:	4798      	blx	r3
    efb2:	0023      	movs	r3, r4
    efb4:	2201      	movs	r2, #1
    efb6:	334c      	adds	r3, #76	; 0x4c
    efb8:	0029      	movs	r1, r5
    efba:	0028      	movs	r0, r5
    efbc:	4f4b      	ldr	r7, [pc, #300]	; (f0ec <RADIO_TxHandler+0x178>)
    efbe:	801d      	strh	r5, [r3, #0]
    efc0:	47b8      	blx	r7
    efc2:	2109      	movs	r1, #9
    efc4:	2012      	movs	r0, #18
    efc6:	4b4a      	ldr	r3, [pc, #296]	; (f0f0 <RADIO_TxHandler+0x17c>)
    efc8:	4798      	blx	r3
    efca:	2201      	movs	r2, #1
    efcc:	0029      	movs	r1, r5
    efce:	2005      	movs	r0, #5
    efd0:	47b8      	blx	r7
    efd2:	0023      	movs	r3, r4
    efd4:	3340      	adds	r3, #64	; 0x40
    efd6:	781b      	ldrb	r3, [r3, #0]
    efd8:	42ab      	cmp	r3, r5
    efda:	d846      	bhi.n	f06a <RADIO_TxHandler+0xf6>
    efdc:	7833      	ldrb	r3, [r6, #0]
    efde:	2b07      	cmp	r3, #7
    efe0:	d076      	beq.n	f0d0 <RADIO_TxHandler+0x15c>
    efe2:	2001      	movs	r0, #1
    efe4:	4b3f      	ldr	r3, [pc, #252]	; (f0e4 <RADIO_TxHandler+0x170>)
    efe6:	4798      	blx	r3
    efe8:	4b42      	ldr	r3, [pc, #264]	; (f0f4 <RADIO_TxHandler+0x180>)
    efea:	2004      	movs	r0, #4
    efec:	4798      	blx	r3
    efee:	4b42      	ldr	r3, [pc, #264]	; (f0f8 <RADIO_TxHandler+0x184>)
    eff0:	4d3f      	ldr	r5, [pc, #252]	; (f0f0 <RADIO_TxHandler+0x17c>)
    eff2:	781f      	ldrb	r7, [r3, #0]
    eff4:	4e41      	ldr	r6, [pc, #260]	; (f0fc <RADIO_TxHandler+0x188>)
    eff6:	2f01      	cmp	r7, #1
    eff8:	d144      	bne.n	f084 <RADIO_TxHandler+0x110>
    effa:	7831      	ldrb	r1, [r6, #0]
    effc:	2022      	movs	r0, #34	; 0x22
    effe:	47a8      	blx	r5
    f000:	4b3f      	ldr	r3, [pc, #252]	; (f100 <RADIO_TxHandler+0x18c>)
    f002:	200a      	movs	r0, #10
    f004:	4798      	blx	r3
    f006:	21f0      	movs	r1, #240	; 0xf0
    f008:	4008      	ands	r0, r1
    f00a:	39e8      	subs	r1, #232	; 0xe8
    f00c:	4301      	orrs	r1, r0
    f00e:	200a      	movs	r0, #10
    f010:	47a8      	blx	r5
    f012:	2140      	movs	r1, #64	; 0x40
    f014:	0008      	movs	r0, r1
    f016:	47a8      	blx	r5
    f018:	2100      	movs	r1, #0
    f01a:	2041      	movs	r0, #65	; 0x41
    f01c:	47a8      	blx	r5
    f01e:	4b36      	ldr	r3, [pc, #216]	; (f0f8 <RADIO_TxHandler+0x184>)
    f020:	003a      	movs	r2, r7
    f022:	7819      	ldrb	r1, [r3, #0]
    f024:	0038      	movs	r0, r7
    f026:	4b31      	ldr	r3, [pc, #196]	; (f0ec <RADIO_TxHandler+0x178>)
    f028:	4798      	blx	r3
    f02a:	4b36      	ldr	r3, [pc, #216]	; (f104 <RADIO_TxHandler+0x190>)
    f02c:	7832      	ldrb	r2, [r6, #0]
    f02e:	6819      	ldr	r1, [r3, #0]
    f030:	2000      	movs	r0, #0
    f032:	4b35      	ldr	r3, [pc, #212]	; (f108 <RADIO_TxHandler+0x194>)
    f034:	4798      	blx	r3
    f036:	0023      	movs	r3, r4
    f038:	3334      	adds	r3, #52	; 0x34
    f03a:	7819      	ldrb	r1, [r3, #0]
    f03c:	2200      	movs	r2, #0
    f03e:	2003      	movs	r0, #3
    f040:	4b2a      	ldr	r3, [pc, #168]	; (f0ec <RADIO_TxHandler+0x178>)
    f042:	4798      	blx	r3
    f044:	4b31      	ldr	r3, [pc, #196]	; (f10c <RADIO_TxHandler+0x198>)
    f046:	4798      	blx	r3
    f048:	4b31      	ldr	r3, [pc, #196]	; (f110 <RADIO_TxHandler+0x19c>)
    f04a:	6018      	str	r0, [r3, #0]
    f04c:	6059      	str	r1, [r3, #4]
    f04e:	68e3      	ldr	r3, [r4, #12]
    f050:	2b00      	cmp	r3, #0
    f052:	d03d      	beq.n	f0d0 <RADIO_TxHandler+0x15c>
    f054:	21fa      	movs	r1, #250	; 0xfa
    f056:	2200      	movs	r2, #0
    f058:	342f      	adds	r4, #47	; 0x2f
    f05a:	0089      	lsls	r1, r1, #2
    f05c:	4359      	muls	r1, r3
    f05e:	7820      	ldrb	r0, [r4, #0]
    f060:	4b2c      	ldr	r3, [pc, #176]	; (f114 <RADIO_TxHandler+0x1a0>)
    f062:	9200      	str	r2, [sp, #0]
    f064:	4c2c      	ldr	r4, [pc, #176]	; (f118 <RADIO_TxHandler+0x1a4>)
    f066:	47a0      	blx	r4
    f068:	e032      	b.n	f0d0 <RADIO_TxHandler+0x15c>
    f06a:	4f2c      	ldr	r7, [pc, #176]	; (f11c <RADIO_TxHandler+0x1a8>)
    f06c:	4b2c      	ldr	r3, [pc, #176]	; (f120 <RADIO_TxHandler+0x1ac>)
    f06e:	0038      	movs	r0, r7
    f070:	4798      	blx	r3
    f072:	233e      	movs	r3, #62	; 0x3e
    f074:	5ee2      	ldrsh	r2, [r4, r3]
    f076:	2100      	movs	r1, #0
    f078:	5e7b      	ldrsh	r3, [r7, r1]
    f07a:	429a      	cmp	r2, r3
    f07c:	db14      	blt.n	f0a8 <RADIO_TxHandler+0x134>
    f07e:	3501      	adds	r5, #1
    f080:	b2ed      	uxtb	r5, r5
    f082:	e7a6      	b.n	efd2 <RADIO_TxHandler+0x5e>
    f084:	2100      	movs	r1, #0
    f086:	2040      	movs	r0, #64	; 0x40
    f088:	47a8      	blx	r5
    f08a:	2100      	movs	r1, #0
    f08c:	2041      	movs	r0, #65	; 0x41
    f08e:	47a8      	blx	r5
    f090:	0023      	movs	r3, r4
    f092:	2000      	movs	r0, #0
    f094:	3358      	adds	r3, #88	; 0x58
    f096:	7831      	ldrb	r1, [r6, #0]
    f098:	7018      	strb	r0, [r3, #0]
    f09a:	47a8      	blx	r5
    f09c:	4b19      	ldr	r3, [pc, #100]	; (f104 <RADIO_TxHandler+0x190>)
    f09e:	7831      	ldrb	r1, [r6, #0]
    f0a0:	6818      	ldr	r0, [r3, #0]
    f0a2:	4b20      	ldr	r3, [pc, #128]	; (f124 <RADIO_TxHandler+0x1b0>)
    f0a4:	4798      	blx	r3
    f0a6:	e7c6      	b.n	f036 <RADIO_TxHandler+0xc2>
    f0a8:	2000      	movs	r0, #0
    f0aa:	4b1f      	ldr	r3, [pc, #124]	; (f128 <RADIO_TxHandler+0x1b4>)
    f0ac:	4798      	blx	r3
    f0ae:	4b1f      	ldr	r3, [pc, #124]	; (f12c <RADIO_TxHandler+0x1b8>)
    f0b0:	4798      	blx	r3
    f0b2:	2307      	movs	r3, #7
    f0b4:	2201      	movs	r2, #1
    f0b6:	7033      	strb	r3, [r6, #0]
    f0b8:	4b1d      	ldr	r3, [pc, #116]	; (f130 <RADIO_TxHandler+0x1bc>)
    f0ba:	701a      	strb	r2, [r3, #0]
    f0bc:	4b1d      	ldr	r3, [pc, #116]	; (f134 <RADIO_TxHandler+0x1c0>)
    f0be:	781b      	ldrb	r3, [r3, #0]
    f0c0:	079b      	lsls	r3, r3, #30
    f0c2:	d58b      	bpl.n	efdc <RADIO_TxHandler+0x68>
    f0c4:	6923      	ldr	r3, [r4, #16]
    f0c6:	2b00      	cmp	r3, #0
    f0c8:	d088      	beq.n	efdc <RADIO_TxHandler+0x68>
    f0ca:	0031      	movs	r1, r6
    f0cc:	2002      	movs	r0, #2
    f0ce:	4798      	blx	r3
    f0d0:	2000      	movs	r0, #0
    f0d2:	b007      	add	sp, #28
    f0d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f0d6:	46c0      	nop			; (mov r8, r8)
    f0d8:	0000eb79 	.word	0x0000eb79
    f0dc:	20002d78 	.word	0x20002d78
    f0e0:	0000cec5 	.word	0x0000cec5
    f0e4:	0000e7bd 	.word	0x0000e7bd
    f0e8:	0000df01 	.word	0x0000df01
    f0ec:	0000d1e9 	.word	0x0000d1e9
    f0f0:	0000bfc1 	.word	0x0000bfc1
    f0f4:	0000df49 	.word	0x0000df49
    f0f8:	20002dac 	.word	0x20002dac
    f0fc:	20001e9c 	.word	0x20001e9c
    f100:	0000bfe9 	.word	0x0000bfe9
    f104:	20001e98 	.word	0x20001e98
    f108:	0000c015 	.word	0x0000c015
    f10c:	0000cb55 	.word	0x0000cb55
    f110:	20001e90 	.word	0x20001e90
    f114:	0000e825 	.word	0x0000e825
    f118:	0000cbad 	.word	0x0000cbad
    f11c:	20001e86 	.word	0x20001e86
    f120:	0000d405 	.word	0x0000d405
    f124:	0000e639 	.word	0x0000e639
    f128:	0000e7f1 	.word	0x0000e7f1
    f12c:	0000eca9 	.word	0x0000eca9
    f130:	20003047 	.word	0x20003047
    f134:	20003046 	.word	0x20003046

0000f138 <RADIO_TxDoneHandler>:
    f138:	b5f0      	push	{r4, r5, r6, r7, lr}
    f13a:	4b35      	ldr	r3, [pc, #212]	; (f210 <RADIO_TxDoneHandler+0xd8>)
    f13c:	b087      	sub	sp, #28
    f13e:	881a      	ldrh	r2, [r3, #0]
    f140:	06d2      	lsls	r2, r2, #27
    f142:	0fd2      	lsrs	r2, r2, #31
    f144:	9200      	str	r2, [sp, #0]
    f146:	466a      	mov	r2, sp
    f148:	7810      	ldrb	r0, [r2, #0]
    f14a:	881a      	ldrh	r2, [r3, #0]
    f14c:	2801      	cmp	r0, #1
    f14e:	d12b      	bne.n	f1a8 <RADIO_TxDoneHandler+0x70>
    f150:	4c30      	ldr	r4, [pc, #192]	; (f214 <RADIO_TxDoneHandler+0xdc>)
    f152:	2110      	movs	r1, #16
    f154:	0027      	movs	r7, r4
    f156:	2500      	movs	r5, #0
    f158:	438a      	bics	r2, r1
    f15a:	801a      	strh	r2, [r3, #0]
    f15c:	3734      	adds	r7, #52	; 0x34
    f15e:	0002      	movs	r2, r0
    f160:	7839      	ldrb	r1, [r7, #0]
    f162:	4b2d      	ldr	r3, [pc, #180]	; (f218 <RADIO_TxDoneHandler+0xe0>)
    f164:	4798      	blx	r3
    f166:	68e3      	ldr	r3, [r4, #12]
    f168:	ae03      	add	r6, sp, #12
    f16a:	9304      	str	r3, [sp, #16]
    f16c:	7035      	strb	r5, [r6, #0]
    f16e:	002a      	movs	r2, r5
    f170:	4b29      	ldr	r3, [pc, #164]	; (f218 <RADIO_TxDoneHandler+0xe0>)
    f172:	7839      	ldrb	r1, [r7, #0]
    f174:	0028      	movs	r0, r5
    f176:	4798      	blx	r3
    f178:	466a      	mov	r2, sp
    f17a:	4b28      	ldr	r3, [pc, #160]	; (f21c <RADIO_TxDoneHandler+0xe4>)
    f17c:	7812      	ldrb	r2, [r2, #0]
    f17e:	701a      	strb	r2, [r3, #0]
    f180:	0023      	movs	r3, r4
    f182:	3358      	adds	r3, #88	; 0x58
    f184:	701d      	strb	r5, [r3, #0]
    f186:	4b26      	ldr	r3, [pc, #152]	; (f220 <RADIO_TxDoneHandler+0xe8>)
    f188:	781b      	ldrb	r3, [r3, #0]
    f18a:	075b      	lsls	r3, r3, #29
    f18c:	d505      	bpl.n	f19a <RADIO_TxDoneHandler+0x62>
    f18e:	6923      	ldr	r3, [r4, #16]
    f190:	42ab      	cmp	r3, r5
    f192:	d002      	beq.n	f19a <RADIO_TxDoneHandler+0x62>
    f194:	0031      	movs	r1, r6
    f196:	2004      	movs	r0, #4
    f198:	4798      	blx	r3
    f19a:	4b22      	ldr	r3, [pc, #136]	; (f224 <RADIO_TxDoneHandler+0xec>)
    f19c:	4798      	blx	r3
    f19e:	4b22      	ldr	r3, [pc, #136]	; (f228 <RADIO_TxDoneHandler+0xf0>)
    f1a0:	4798      	blx	r3
    f1a2:	2000      	movs	r0, #0
    f1a4:	b007      	add	sp, #28
    f1a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f1a8:	07d2      	lsls	r2, r2, #31
    f1aa:	d402      	bmi.n	f1b2 <RADIO_TxDoneHandler+0x7a>
    f1ac:	881a      	ldrh	r2, [r3, #0]
    f1ae:	0752      	lsls	r2, r2, #29
    f1b0:	d527      	bpl.n	f202 <RADIO_TxDoneHandler+0xca>
    f1b2:	2601      	movs	r6, #1
    f1b4:	2104      	movs	r1, #4
    f1b6:	881a      	ldrh	r2, [r3, #0]
    f1b8:	4f16      	ldr	r7, [pc, #88]	; (f214 <RADIO_TxDoneHandler+0xdc>)
    f1ba:	43b2      	bics	r2, r6
    f1bc:	801a      	strh	r2, [r3, #0]
    f1be:	881a      	ldrh	r2, [r3, #0]
    f1c0:	2400      	movs	r4, #0
    f1c2:	438a      	bics	r2, r1
    f1c4:	801a      	strh	r2, [r3, #0]
    f1c6:	4b19      	ldr	r3, [pc, #100]	; (f22c <RADIO_TxDoneHandler+0xf4>)
    f1c8:	ad03      	add	r5, sp, #12
    f1ca:	681b      	ldr	r3, [r3, #0]
    f1cc:	702c      	strb	r4, [r5, #0]
    f1ce:	9304      	str	r3, [sp, #16]
    f1d0:	003b      	movs	r3, r7
    f1d2:	3334      	adds	r3, #52	; 0x34
    f1d4:	7819      	ldrb	r1, [r3, #0]
    f1d6:	0022      	movs	r2, r4
    f1d8:	0020      	movs	r0, r4
    f1da:	4b0f      	ldr	r3, [pc, #60]	; (f218 <RADIO_TxDoneHandler+0xe0>)
    f1dc:	4798      	blx	r3
    f1de:	4b14      	ldr	r3, [pc, #80]	; (f230 <RADIO_TxDoneHandler+0xf8>)
    f1e0:	4798      	blx	r3
    f1e2:	4b0e      	ldr	r3, [pc, #56]	; (f21c <RADIO_TxDoneHandler+0xe4>)
    f1e4:	701e      	strb	r6, [r3, #0]
    f1e6:	003b      	movs	r3, r7
    f1e8:	3358      	adds	r3, #88	; 0x58
    f1ea:	701c      	strb	r4, [r3, #0]
    f1ec:	4b0c      	ldr	r3, [pc, #48]	; (f220 <RADIO_TxDoneHandler+0xe8>)
    f1ee:	781b      	ldrb	r3, [r3, #0]
    f1f0:	079b      	lsls	r3, r3, #30
    f1f2:	d5d6      	bpl.n	f1a2 <RADIO_TxDoneHandler+0x6a>
    f1f4:	693b      	ldr	r3, [r7, #16]
    f1f6:	42a3      	cmp	r3, r4
    f1f8:	d0d3      	beq.n	f1a2 <RADIO_TxDoneHandler+0x6a>
    f1fa:	0029      	movs	r1, r5
    f1fc:	2002      	movs	r0, #2
    f1fe:	4798      	blx	r3
    f200:	e7cf      	b.n	f1a2 <RADIO_TxDoneHandler+0x6a>
    f202:	881b      	ldrh	r3, [r3, #0]
    f204:	059b      	lsls	r3, r3, #22
    f206:	d5cc      	bpl.n	f1a2 <RADIO_TxDoneHandler+0x6a>
    f208:	4b0a      	ldr	r3, [pc, #40]	; (f234 <RADIO_TxDoneHandler+0xfc>)
    f20a:	4798      	blx	r3
    f20c:	e7c9      	b.n	f1a2 <RADIO_TxDoneHandler+0x6a>
    f20e:	46c0      	nop			; (mov r8, r8)
    f210:	20003044 	.word	0x20003044
    f214:	20002d78 	.word	0x20002d78
    f218:	0000d1e9 	.word	0x0000d1e9
    f21c:	20003047 	.word	0x20003047
    f220:	20003046 	.word	0x20003046
    f224:	0000bf81 	.word	0x0000bf81
    f228:	0000ecc5 	.word	0x0000ecc5
    f22c:	20001e90 	.word	0x20001e90
    f230:	0000eca9 	.word	0x0000eca9
    f234:	00012c9d 	.word	0x00012c9d

0000f238 <RADIO_RxDoneHandler>:
    f238:	b5f0      	push	{r4, r5, r6, r7, lr}
    f23a:	4b97      	ldr	r3, [pc, #604]	; (f498 <RADIO_RxDoneHandler+0x260>)
    f23c:	b085      	sub	sp, #20
    f23e:	881c      	ldrh	r4, [r3, #0]
    f240:	881a      	ldrh	r2, [r3, #0]
    f242:	06a4      	lsls	r4, r4, #26
    f244:	0fe4      	lsrs	r4, r4, #31
    f246:	b2e0      	uxtb	r0, r4
    f248:	2801      	cmp	r0, #1
    f24a:	d126      	bne.n	f29a <RADIO_RxDoneHandler+0x62>
    f24c:	4d93      	ldr	r5, [pc, #588]	; (f49c <RADIO_RxDoneHandler+0x264>)
    f24e:	2120      	movs	r1, #32
    f250:	002e      	movs	r6, r5
    f252:	438a      	bics	r2, r1
    f254:	801a      	strh	r2, [r3, #0]
    f256:	3634      	adds	r6, #52	; 0x34
    f258:	0002      	movs	r2, r0
    f25a:	7831      	ldrb	r1, [r6, #0]
    f25c:	4f90      	ldr	r7, [pc, #576]	; (f4a0 <RADIO_RxDoneHandler+0x268>)
    f25e:	47b8      	blx	r7
    f260:	2200      	movs	r2, #0
    f262:	7831      	ldrb	r1, [r6, #0]
    f264:	0010      	movs	r0, r2
    f266:	47b8      	blx	r7
    f268:	4b8e      	ldr	r3, [pc, #568]	; (f4a4 <RADIO_RxDoneHandler+0x26c>)
    f26a:	4798      	blx	r3
    f26c:	4b8e      	ldr	r3, [pc, #568]	; (f4a8 <RADIO_RxDoneHandler+0x270>)
    f26e:	002a      	movs	r2, r5
    f270:	701c      	strb	r4, [r3, #0]
    f272:	2300      	movs	r3, #0
    f274:	322c      	adds	r2, #44	; 0x2c
    f276:	7013      	strb	r3, [r2, #0]
    f278:	002a      	movs	r2, r5
    f27a:	a901      	add	r1, sp, #4
    f27c:	3258      	adds	r2, #88	; 0x58
    f27e:	7013      	strb	r3, [r2, #0]
    f280:	700b      	strb	r3, [r1, #0]
    f282:	4b8a      	ldr	r3, [pc, #552]	; (f4ac <RADIO_RxDoneHandler+0x274>)
    f284:	781b      	ldrb	r3, [r3, #0]
    f286:	071b      	lsls	r3, r3, #28
    f288:	d504      	bpl.n	f294 <RADIO_RxDoneHandler+0x5c>
    f28a:	692b      	ldr	r3, [r5, #16]
    f28c:	2008      	movs	r0, #8
    f28e:	2b00      	cmp	r3, #0
    f290:	d000      	beq.n	f294 <RADIO_RxDoneHandler+0x5c>
    f292:	e084      	b.n	f39e <RADIO_RxDoneHandler+0x166>
    f294:	2000      	movs	r0, #0
    f296:	b005      	add	sp, #20
    f298:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f29a:	0652      	lsls	r2, r2, #25
    f29c:	d402      	bmi.n	f2a4 <RADIO_RxDoneHandler+0x6c>
    f29e:	881a      	ldrh	r2, [r3, #0]
    f2a0:	0612      	lsls	r2, r2, #24
    f2a2:	d523      	bpl.n	f2ec <RADIO_RxDoneHandler+0xb4>
    f2a4:	2140      	movs	r1, #64	; 0x40
    f2a6:	881a      	ldrh	r2, [r3, #0]
    f2a8:	4c7c      	ldr	r4, [pc, #496]	; (f49c <RADIO_RxDoneHandler+0x264>)
    f2aa:	438a      	bics	r2, r1
    f2ac:	801a      	strh	r2, [r3, #0]
    f2ae:	881a      	ldrh	r2, [r3, #0]
    f2b0:	1849      	adds	r1, r1, r1
    f2b2:	438a      	bics	r2, r1
    f2b4:	801a      	strh	r2, [r3, #0]
    f2b6:	0023      	movs	r3, r4
    f2b8:	2200      	movs	r2, #0
    f2ba:	3334      	adds	r3, #52	; 0x34
    f2bc:	7819      	ldrb	r1, [r3, #0]
    f2be:	0010      	movs	r0, r2
    f2c0:	4b77      	ldr	r3, [pc, #476]	; (f4a0 <RADIO_RxDoneHandler+0x268>)
    f2c2:	4798      	blx	r3
    f2c4:	4b77      	ldr	r3, [pc, #476]	; (f4a4 <RADIO_RxDoneHandler+0x26c>)
    f2c6:	4798      	blx	r3
    f2c8:	2201      	movs	r2, #1
    f2ca:	4b77      	ldr	r3, [pc, #476]	; (f4a8 <RADIO_RxDoneHandler+0x270>)
    f2cc:	a901      	add	r1, sp, #4
    f2ce:	701a      	strb	r2, [r3, #0]
    f2d0:	0022      	movs	r2, r4
    f2d2:	2300      	movs	r3, #0
    f2d4:	322c      	adds	r2, #44	; 0x2c
    f2d6:	7013      	strb	r3, [r2, #0]
    f2d8:	0022      	movs	r2, r4
    f2da:	3258      	adds	r2, #88	; 0x58
    f2dc:	7013      	strb	r3, [r2, #0]
    f2de:	700b      	strb	r3, [r1, #0]
    f2e0:	4b72      	ldr	r3, [pc, #456]	; (f4ac <RADIO_RxDoneHandler+0x274>)
    f2e2:	781b      	ldrb	r3, [r3, #0]
    f2e4:	071b      	lsls	r3, r3, #28
    f2e6:	d5d5      	bpl.n	f294 <RADIO_RxDoneHandler+0x5c>
    f2e8:	6923      	ldr	r3, [r4, #16]
    f2ea:	e7cf      	b.n	f28c <RADIO_RxDoneHandler+0x54>
    f2ec:	881a      	ldrh	r2, [r3, #0]
    f2ee:	0792      	lsls	r2, r2, #30
    f2f0:	d571      	bpl.n	f3d6 <RADIO_RxDoneHandler+0x19e>
    f2f2:	2102      	movs	r1, #2
    f2f4:	881a      	ldrh	r2, [r3, #0]
    f2f6:	4d6e      	ldr	r5, [pc, #440]	; (f4b0 <RADIO_RxDoneHandler+0x278>)
    f2f8:	438a      	bics	r2, r1
    f2fa:	801a      	strh	r2, [r3, #0]
    f2fc:	2013      	movs	r0, #19
    f2fe:	47a8      	blx	r5
    f300:	4c66      	ldr	r4, [pc, #408]	; (f49c <RADIO_RxDoneHandler+0x264>)
    f302:	2100      	movs	r1, #0
    f304:	0026      	movs	r6, r4
    f306:	362c      	adds	r6, #44	; 0x2c
    f308:	7030      	strb	r0, [r6, #0]
    f30a:	4b6a      	ldr	r3, [pc, #424]	; (f4b4 <RADIO_RxDoneHandler+0x27c>)
    f30c:	200d      	movs	r0, #13
    f30e:	4798      	blx	r3
    f310:	7832      	ldrb	r2, [r6, #0]
    f312:	4b69      	ldr	r3, [pc, #420]	; (f4b8 <RADIO_RxDoneHandler+0x280>)
    f314:	b2d2      	uxtb	r2, r2
    f316:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    f318:	2000      	movs	r0, #0
    f31a:	4798      	blx	r3
    f31c:	2019      	movs	r0, #25
    f31e:	47a8      	blx	r5
    f320:	0023      	movs	r3, r4
    f322:	b240      	sxtb	r0, r0
    f324:	3332      	adds	r3, #50	; 0x32
    f326:	2800      	cmp	r0, #0
    f328:	da3b      	bge.n	f3a2 <RADIO_RxDoneHandler+0x16a>
    f32a:	4240      	negs	r0, r0
    f32c:	1080      	asrs	r0, r0, #2
    f32e:	4240      	negs	r0, r0
    f330:	7018      	strb	r0, [r3, #0]
    f332:	201a      	movs	r0, #26
    f334:	47a8      	blx	r5
    f336:	0023      	movs	r3, r4
    f338:	3332      	adds	r3, #50	; 0x32
    f33a:	781b      	ldrb	r3, [r3, #0]
    f33c:	b202      	sxth	r2, r0
    f33e:	b25b      	sxtb	r3, r3
    f340:	4d5e      	ldr	r5, [pc, #376]	; (f4bc <RADIO_RxDoneHandler+0x284>)
    f342:	2b00      	cmp	r3, #0
    f344:	da36      	bge.n	f3b4 <RADIO_RxDoneHandler+0x17c>
    f346:	6821      	ldr	r1, [r4, #0]
    f348:	4e5d      	ldr	r6, [pc, #372]	; (f4c0 <RADIO_RxDoneHandler+0x288>)
    f34a:	198e      	adds	r6, r1, r6
    f34c:	42ae      	cmp	r6, r5
    f34e:	d82a      	bhi.n	f3a6 <RADIO_RxDoneHandler+0x16e>
    f350:	3b9d      	subs	r3, #157	; 0x9d
    f352:	181b      	adds	r3, r3, r0
    f354:	1112      	asrs	r2, r2, #4
    f356:	189b      	adds	r3, r3, r2
    f358:	0022      	movs	r2, r4
    f35a:	3256      	adds	r2, #86	; 0x56
    f35c:	8013      	strh	r3, [r2, #0]
    f35e:	0023      	movs	r3, r4
    f360:	2200      	movs	r2, #0
    f362:	3334      	adds	r3, #52	; 0x34
    f364:	7819      	ldrb	r1, [r3, #0]
    f366:	0010      	movs	r0, r2
    f368:	4b4d      	ldr	r3, [pc, #308]	; (f4a0 <RADIO_RxDoneHandler+0x268>)
    f36a:	4798      	blx	r3
    f36c:	4b4d      	ldr	r3, [pc, #308]	; (f4a4 <RADIO_RxDoneHandler+0x26c>)
    f36e:	4798      	blx	r3
    f370:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    f372:	a901      	add	r1, sp, #4
    f374:	604b      	str	r3, [r1, #4]
    f376:	0023      	movs	r3, r4
    f378:	332c      	adds	r3, #44	; 0x2c
    f37a:	781b      	ldrb	r3, [r3, #0]
    f37c:	2201      	movs	r2, #1
    f37e:	720b      	strb	r3, [r1, #8]
    f380:	2300      	movs	r3, #0
    f382:	700b      	strb	r3, [r1, #0]
    f384:	4b48      	ldr	r3, [pc, #288]	; (f4a8 <RADIO_RxDoneHandler+0x270>)
    f386:	701a      	strb	r2, [r3, #0]
    f388:	4b48      	ldr	r3, [pc, #288]	; (f4ac <RADIO_RxDoneHandler+0x274>)
    f38a:	7818      	ldrb	r0, [r3, #0]
    f38c:	07c0      	lsls	r0, r0, #31
    f38e:	0fc0      	lsrs	r0, r0, #31
    f390:	4290      	cmp	r0, r2
    f392:	d000      	beq.n	f396 <RADIO_RxDoneHandler+0x15e>
    f394:	e77e      	b.n	f294 <RADIO_RxDoneHandler+0x5c>
    f396:	6923      	ldr	r3, [r4, #16]
    f398:	2b00      	cmp	r3, #0
    f39a:	d100      	bne.n	f39e <RADIO_RxDoneHandler+0x166>
    f39c:	e77a      	b.n	f294 <RADIO_RxDoneHandler+0x5c>
    f39e:	4798      	blx	r3
    f3a0:	e778      	b.n	f294 <RADIO_RxDoneHandler+0x5c>
    f3a2:	1080      	asrs	r0, r0, #2
    f3a4:	e7c4      	b.n	f330 <RADIO_RxDoneHandler+0xf8>
    f3a6:	4d47      	ldr	r5, [pc, #284]	; (f4c4 <RADIO_RxDoneHandler+0x28c>)
    f3a8:	1949      	adds	r1, r1, r5
    f3aa:	4d47      	ldr	r5, [pc, #284]	; (f4c8 <RADIO_RxDoneHandler+0x290>)
    f3ac:	42a9      	cmp	r1, r5
    f3ae:	d8d6      	bhi.n	f35e <RADIO_RxDoneHandler+0x126>
    f3b0:	3ba4      	subs	r3, #164	; 0xa4
    f3b2:	e7ce      	b.n	f352 <RADIO_RxDoneHandler+0x11a>
    f3b4:	6823      	ldr	r3, [r4, #0]
    f3b6:	4942      	ldr	r1, [pc, #264]	; (f4c0 <RADIO_RxDoneHandler+0x288>)
    f3b8:	1859      	adds	r1, r3, r1
    f3ba:	42a9      	cmp	r1, r5
    f3bc:	d802      	bhi.n	f3c4 <RADIO_RxDoneHandler+0x18c>
    f3be:	0003      	movs	r3, r0
    f3c0:	3b9d      	subs	r3, #157	; 0x9d
    f3c2:	e7c7      	b.n	f354 <RADIO_RxDoneHandler+0x11c>
    f3c4:	493f      	ldr	r1, [pc, #252]	; (f4c4 <RADIO_RxDoneHandler+0x28c>)
    f3c6:	185b      	adds	r3, r3, r1
    f3c8:	493f      	ldr	r1, [pc, #252]	; (f4c8 <RADIO_RxDoneHandler+0x290>)
    f3ca:	428b      	cmp	r3, r1
    f3cc:	d8c7      	bhi.n	f35e <RADIO_RxDoneHandler+0x126>
    f3ce:	38a4      	subs	r0, #164	; 0xa4
    f3d0:	1113      	asrs	r3, r2, #4
    f3d2:	18c3      	adds	r3, r0, r3
    f3d4:	e7c0      	b.n	f358 <RADIO_RxDoneHandler+0x120>
    f3d6:	881a      	ldrh	r2, [r3, #0]
    f3d8:	0712      	lsls	r2, r2, #28
    f3da:	0fd5      	lsrs	r5, r2, #31
    f3dc:	2a00      	cmp	r2, #0
    f3de:	da27      	bge.n	f430 <RADIO_RxDoneHandler+0x1f8>
    f3e0:	2108      	movs	r1, #8
    f3e2:	881a      	ldrh	r2, [r3, #0]
    f3e4:	4c2d      	ldr	r4, [pc, #180]	; (f49c <RADIO_RxDoneHandler+0x264>)
    f3e6:	438a      	bics	r2, r1
    f3e8:	801a      	strh	r2, [r3, #0]
    f3ea:	0023      	movs	r3, r4
    f3ec:	2280      	movs	r2, #128	; 0x80
    f3ee:	3332      	adds	r3, #50	; 0x32
    f3f0:	701a      	strb	r2, [r3, #0]
    f3f2:	0023      	movs	r3, r4
    f3f4:	2200      	movs	r2, #0
    f3f6:	3334      	adds	r3, #52	; 0x34
    f3f8:	7819      	ldrb	r1, [r3, #0]
    f3fa:	0010      	movs	r0, r2
    f3fc:	4b28      	ldr	r3, [pc, #160]	; (f4a0 <RADIO_RxDoneHandler+0x268>)
    f3fe:	4798      	blx	r3
    f400:	4b28      	ldr	r3, [pc, #160]	; (f4a4 <RADIO_RxDoneHandler+0x26c>)
    f402:	4798      	blx	r3
    f404:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    f406:	a901      	add	r1, sp, #4
    f408:	604b      	str	r3, [r1, #4]
    f40a:	0023      	movs	r3, r4
    f40c:	332c      	adds	r3, #44	; 0x2c
    f40e:	781b      	ldrb	r3, [r3, #0]
    f410:	0022      	movs	r2, r4
    f412:	720b      	strb	r3, [r1, #8]
    f414:	2300      	movs	r3, #0
    f416:	3258      	adds	r2, #88	; 0x58
    f418:	7013      	strb	r3, [r2, #0]
    f41a:	700b      	strb	r3, [r1, #0]
    f41c:	4b22      	ldr	r3, [pc, #136]	; (f4a8 <RADIO_RxDoneHandler+0x270>)
    f41e:	701d      	strb	r5, [r3, #0]
    f420:	4b22      	ldr	r3, [pc, #136]	; (f4ac <RADIO_RxDoneHandler+0x274>)
    f422:	7818      	ldrb	r0, [r3, #0]
    f424:	07c0      	lsls	r0, r0, #31
    f426:	0fc0      	lsrs	r0, r0, #31
    f428:	2801      	cmp	r0, #1
    f42a:	d000      	beq.n	f42e <RADIO_RxDoneHandler+0x1f6>
    f42c:	e732      	b.n	f294 <RADIO_RxDoneHandler+0x5c>
    f42e:	e7b2      	b.n	f396 <RADIO_RxDoneHandler+0x15e>
    f430:	881a      	ldrh	r2, [r3, #0]
    f432:	05d2      	lsls	r2, r2, #23
    f434:	0fd5      	lsrs	r5, r2, #31
    f436:	2a00      	cmp	r2, #0
    f438:	db00      	blt.n	f43c <RADIO_RxDoneHandler+0x204>
    f43a:	e72b      	b.n	f294 <RADIO_RxDoneHandler+0x5c>
    f43c:	4c17      	ldr	r4, [pc, #92]	; (f49c <RADIO_RxDoneHandler+0x264>)
    f43e:	881a      	ldrh	r2, [r3, #0]
    f440:	0026      	movs	r6, r4
    f442:	4922      	ldr	r1, [pc, #136]	; (f4cc <RADIO_RxDoneHandler+0x294>)
    f444:	362c      	adds	r6, #44	; 0x2c
    f446:	400a      	ands	r2, r1
    f448:	801a      	strh	r2, [r3, #0]
    f44a:	7832      	ldrb	r2, [r6, #0]
    f44c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    f44e:	b2d2      	uxtb	r2, r2
    f450:	2000      	movs	r0, #0
    f452:	4b19      	ldr	r3, [pc, #100]	; (f4b8 <RADIO_RxDoneHandler+0x280>)
    f454:	4798      	blx	r3
    f456:	0023      	movs	r3, r4
    f458:	2200      	movs	r2, #0
    f45a:	3334      	adds	r3, #52	; 0x34
    f45c:	7819      	ldrb	r1, [r3, #0]
    f45e:	0010      	movs	r0, r2
    f460:	4b0f      	ldr	r3, [pc, #60]	; (f4a0 <RADIO_RxDoneHandler+0x268>)
    f462:	4798      	blx	r3
    f464:	4b0f      	ldr	r3, [pc, #60]	; (f4a4 <RADIO_RxDoneHandler+0x26c>)
    f466:	4798      	blx	r3
    f468:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    f46a:	a901      	add	r1, sp, #4
    f46c:	604b      	str	r3, [r1, #4]
    f46e:	7833      	ldrb	r3, [r6, #0]
    f470:	0022      	movs	r2, r4
    f472:	720b      	strb	r3, [r1, #8]
    f474:	2300      	movs	r3, #0
    f476:	3258      	adds	r2, #88	; 0x58
    f478:	7013      	strb	r3, [r2, #0]
    f47a:	700b      	strb	r3, [r1, #0]
    f47c:	4b0a      	ldr	r3, [pc, #40]	; (f4a8 <RADIO_RxDoneHandler+0x270>)
    f47e:	701d      	strb	r5, [r3, #0]
    f480:	4b0a      	ldr	r3, [pc, #40]	; (f4ac <RADIO_RxDoneHandler+0x274>)
    f482:	781b      	ldrb	r3, [r3, #0]
    f484:	06db      	lsls	r3, r3, #27
    f486:	d400      	bmi.n	f48a <RADIO_RxDoneHandler+0x252>
    f488:	e704      	b.n	f294 <RADIO_RxDoneHandler+0x5c>
    f48a:	6923      	ldr	r3, [r4, #16]
    f48c:	2b00      	cmp	r3, #0
    f48e:	d100      	bne.n	f492 <RADIO_RxDoneHandler+0x25a>
    f490:	e700      	b.n	f294 <RADIO_RxDoneHandler+0x5c>
    f492:	2010      	movs	r0, #16
    f494:	e783      	b.n	f39e <RADIO_RxDoneHandler+0x166>
    f496:	46c0      	nop			; (mov r8, r8)
    f498:	20003044 	.word	0x20003044
    f49c:	20002d78 	.word	0x20002d78
    f4a0:	0000d1e9 	.word	0x0000d1e9
    f4a4:	0000eca9 	.word	0x0000eca9
    f4a8:	20003047 	.word	0x20003047
    f4ac:	20003046 	.word	0x20003046
    f4b0:	0000bfe9 	.word	0x0000bfe9
    f4b4:	0000bfc1 	.word	0x0000bfc1
    f4b8:	0000c055 	.word	0x0000c055
    f4bc:	096ae380 	.word	0x096ae380
    f4c0:	cc9eec80 	.word	0xcc9eec80
    f4c4:	e78fe580 	.word	0xe78fe580
    f4c8:	06dac2c0 	.word	0x06dac2c0
    f4cc:	fffffeff 	.word	0xfffffeff

0000f4d0 <MacClearCommands>:
    f4d0:	490e      	ldr	r1, [pc, #56]	; (f50c <MacClearCommands+0x3c>)
    f4d2:	b570      	push	{r4, r5, r6, lr}
    f4d4:	000b      	movs	r3, r1
    f4d6:	33e0      	adds	r3, #224	; 0xe0
    f4d8:	7818      	ldrb	r0, [r3, #0]
    f4da:	2303      	movs	r3, #3
    f4dc:	25a4      	movs	r5, #164	; 0xa4
    f4de:	4343      	muls	r3, r0
    f4e0:	2401      	movs	r4, #1
    f4e2:	20ff      	movs	r0, #255	; 0xff
    f4e4:	3399      	adds	r3, #153	; 0x99
    f4e6:	4a0a      	ldr	r2, [pc, #40]	; (f510 <MacClearCommands+0x40>)
    f4e8:	185b      	adds	r3, r3, r1
    f4ea:	00ed      	lsls	r5, r5, #3
    f4ec:	429a      	cmp	r2, r3
    f4ee:	d100      	bne.n	f4f2 <MacClearCommands+0x22>
    f4f0:	bd70      	pop	{r4, r5, r6, pc}
    f4f2:	7811      	ldrb	r1, [r2, #0]
    f4f4:	29ff      	cmp	r1, #255	; 0xff
    f4f6:	d006      	beq.n	f506 <MacClearCommands+0x36>
    f4f8:	290a      	cmp	r1, #10
    f4fa:	d803      	bhi.n	f504 <MacClearCommands+0x34>
    f4fc:	0026      	movs	r6, r4
    f4fe:	408e      	lsls	r6, r1
    f500:	422e      	tst	r6, r5
    f502:	d100      	bne.n	f506 <MacClearCommands+0x36>
    f504:	7010      	strb	r0, [r2, #0]
    f506:	3203      	adds	r2, #3
    f508:	e7f0      	b.n	f4ec <MacClearCommands+0x1c>
    f50a:	46c0      	nop			; (mov r8, r8)
    f50c:	20003170 	.word	0x20003170
    f510:	20003209 	.word	0x20003209

0000f514 <CountfOptsLength>:
    f514:	2200      	movs	r2, #0
    f516:	490d      	ldr	r1, [pc, #52]	; (f54c <CountfOptsLength+0x38>)
    f518:	b570      	push	{r4, r5, r6, lr}
    f51a:	000b      	movs	r3, r1
    f51c:	0010      	movs	r0, r2
    f51e:	2503      	movs	r5, #3
    f520:	33e0      	adds	r3, #224	; 0xe0
    f522:	781c      	ldrb	r4, [r3, #0]
    f524:	4e0a      	ldr	r6, [pc, #40]	; (f550 <CountfOptsLength+0x3c>)
    f526:	b2d3      	uxtb	r3, r2
    f528:	429c      	cmp	r4, r3
    f52a:	d800      	bhi.n	f52e <CountfOptsLength+0x1a>
    f52c:	bd70      	pop	{r4, r5, r6, pc}
    f52e:	002b      	movs	r3, r5
    f530:	4353      	muls	r3, r2
    f532:	3399      	adds	r3, #153	; 0x99
    f534:	5ccb      	ldrb	r3, [r1, r3]
    f536:	2bff      	cmp	r3, #255	; 0xff
    f538:	d006      	beq.n	f548 <CountfOptsLength+0x34>
    f53a:	18f3      	adds	r3, r6, r3
    f53c:	3b02      	subs	r3, #2
    f53e:	781b      	ldrb	r3, [r3, #0]
    f540:	18c3      	adds	r3, r0, r3
    f542:	2b0f      	cmp	r3, #15
    f544:	dcf2      	bgt.n	f52c <CountfOptsLength+0x18>
    f546:	b2d8      	uxtb	r0, r3
    f548:	3201      	adds	r2, #1
    f54a:	e7ec      	b.n	f526 <CountfOptsLength+0x12>
    f54c:	20003170 	.word	0x20003170
    f550:	0001830f 	.word	0x0001830f

0000f554 <LorawanGetMaxPayloadSize>:
    f554:	b513      	push	{r0, r1, r4, lr}
    f556:	466b      	mov	r3, sp
    f558:	1ddc      	adds	r4, r3, #7
    f55a:	2300      	movs	r3, #0
    f55c:	0022      	movs	r2, r4
    f55e:	7023      	strb	r3, [r4, #0]
    f560:	4903      	ldr	r1, [pc, #12]	; (f570 <LorawanGetMaxPayloadSize+0x1c>)
    f562:	4b04      	ldr	r3, [pc, #16]	; (f574 <LorawanGetMaxPayloadSize+0x20>)
    f564:	2005      	movs	r0, #5
    f566:	4798      	blx	r3
    f568:	7820      	ldrb	r0, [r4, #0]
    f56a:	3808      	subs	r0, #8
    f56c:	b2c0      	uxtb	r0, r0
    f56e:	bd16      	pop	{r1, r2, r4, pc}
    f570:	20003257 	.word	0x20003257
    f574:	0000c665 	.word	0x0000c665

0000f578 <UpdateReceiveDelays>:
    f578:	23fa      	movs	r3, #250	; 0xfa
    f57a:	b570      	push	{r4, r5, r6, lr}
    f57c:	009b      	lsls	r3, r3, #2
    f57e:	4c0b      	ldr	r4, [pc, #44]	; (f5ac <UpdateReceiveDelays+0x34>)
    f580:	2800      	cmp	r0, #0
    f582:	d000      	beq.n	f586 <UpdateReceiveDelays+0xe>
    f584:	4343      	muls	r3, r0
    f586:	0022      	movs	r2, r4
    f588:	4d09      	ldr	r5, [pc, #36]	; (f5b0 <UpdateReceiveDelays+0x38>)
    f58a:	32d0      	adds	r2, #208	; 0xd0
    f58c:	210c      	movs	r1, #12
    f58e:	2000      	movs	r0, #0
    f590:	8013      	strh	r3, [r2, #0]
    f592:	47a8      	blx	r5
    f594:	0023      	movs	r3, r4
    f596:	22fa      	movs	r2, #250	; 0xfa
    f598:	33d0      	adds	r3, #208	; 0xd0
    f59a:	881b      	ldrh	r3, [r3, #0]
    f59c:	0092      	lsls	r2, r2, #2
    f59e:	189b      	adds	r3, r3, r2
    f5a0:	34d2      	adds	r4, #210	; 0xd2
    f5a2:	210d      	movs	r1, #13
    f5a4:	2000      	movs	r0, #0
    f5a6:	8023      	strh	r3, [r4, #0]
    f5a8:	47a8      	blx	r5
    f5aa:	bd70      	pop	{r4, r5, r6, pc}
    f5ac:	20003170 	.word	0x20003170
    f5b0:	00008d09 	.word	0x00008d09

0000f5b4 <IncludeMacCommandsResponse>:
    f5b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    f5b6:	0005      	movs	r5, r0
    f5b8:	2600      	movs	r6, #0
    f5ba:	b087      	sub	sp, #28
    f5bc:	880c      	ldrh	r4, [r1, #0]
    f5be:	9101      	str	r1, [sp, #4]
    f5c0:	9203      	str	r2, [sp, #12]
    f5c2:	4f77      	ldr	r7, [pc, #476]	; (f7a0 <IncludeMacCommandsResponse+0x1ec>)
    f5c4:	003b      	movs	r3, r7
    f5c6:	33e0      	adds	r3, #224	; 0xe0
    f5c8:	781b      	ldrb	r3, [r3, #0]
    f5ca:	42b3      	cmp	r3, r6
    f5cc:	d913      	bls.n	f5f6 <IncludeMacCommandsResponse+0x42>
    f5ce:	9b03      	ldr	r3, [sp, #12]
    f5d0:	2b00      	cmp	r3, #0
    f5d2:	d019      	beq.n	f608 <IncludeMacCommandsResponse+0x54>
    f5d4:	2303      	movs	r3, #3
    f5d6:	4373      	muls	r3, r6
    f5d8:	18fb      	adds	r3, r7, r3
    f5da:	3399      	adds	r3, #153	; 0x99
    f5dc:	7819      	ldrb	r1, [r3, #0]
    f5de:	29ff      	cmp	r1, #255	; 0xff
    f5e0:	d012      	beq.n	f608 <IncludeMacCommandsResponse+0x54>
    f5e2:	9b01      	ldr	r3, [sp, #4]
    f5e4:	881a      	ldrh	r2, [r3, #0]
    f5e6:	4b6f      	ldr	r3, [pc, #444]	; (f7a4 <IncludeMacCommandsResponse+0x1f0>)
    f5e8:	1aa2      	subs	r2, r4, r2
    f5ea:	185b      	adds	r3, r3, r1
    f5ec:	3b02      	subs	r3, #2
    f5ee:	781b      	ldrb	r3, [r3, #0]
    f5f0:	18d3      	adds	r3, r2, r3
    f5f2:	2b0f      	cmp	r3, #15
    f5f4:	dd08      	ble.n	f608 <IncludeMacCommandsResponse+0x54>
    f5f6:	2207      	movs	r2, #7
    f5f8:	2100      	movs	r1, #0
    f5fa:	4b6b      	ldr	r3, [pc, #428]	; (f7a8 <IncludeMacCommandsResponse+0x1f4>)
    f5fc:	486b      	ldr	r0, [pc, #428]	; (f7ac <IncludeMacCommandsResponse+0x1f8>)
    f5fe:	4798      	blx	r3
    f600:	9b01      	ldr	r3, [sp, #4]
    f602:	801c      	strh	r4, [r3, #0]
    f604:	b007      	add	sp, #28
    f606:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f608:	2303      	movs	r3, #3
    f60a:	4373      	muls	r3, r6
    f60c:	18fb      	adds	r3, r7, r3
    f60e:	3399      	adds	r3, #153	; 0x99
    f610:	781b      	ldrb	r3, [r3, #0]
    f612:	1e98      	subs	r0, r3, #2
    f614:	280b      	cmp	r0, #11
    f616:	d862      	bhi.n	f6de <IncludeMacCommandsResponse+0x12a>
    f618:	f003 fc42 	bl	12ea0 <__gnu_thumb1_case_uqi>
    f61c:	27a20698 	.word	0x27a20698
    f620:	7da26748 	.word	0x7da26748
    f624:	a6616182 	.word	0xa6616182
    f628:	2303      	movs	r3, #3
    f62a:	2200      	movs	r2, #0
    f62c:	552b      	strb	r3, [r5, r4]
    f62e:	1c63      	adds	r3, r4, #1
    f630:	b29b      	uxth	r3, r3
    f632:	18eb      	adds	r3, r5, r3
    f634:	4f5a      	ldr	r7, [pc, #360]	; (f7a0 <IncludeMacCommandsResponse+0x1ec>)
    f636:	485e      	ldr	r0, [pc, #376]	; (f7b0 <IncludeMacCommandsResponse+0x1fc>)
    f638:	701a      	strb	r2, [r3, #0]
    f63a:	5c39      	ldrb	r1, [r7, r0]
    f63c:	3201      	adds	r2, #1
    f63e:	4011      	ands	r1, r2
    f640:	466a      	mov	r2, sp
    f642:	9102      	str	r1, [sp, #8]
    f644:	7a12      	ldrb	r2, [r2, #8]
    f646:	701a      	strb	r2, [r3, #0]
    f648:	5c3a      	ldrb	r2, [r7, r0]
    f64a:	4694      	mov	ip, r2
    f64c:	2202      	movs	r2, #2
    f64e:	4661      	mov	r1, ip
    f650:	4211      	tst	r1, r2
    f652:	d002      	beq.n	f65a <IncludeMacCommandsResponse+0xa6>
    f654:	9902      	ldr	r1, [sp, #8]
    f656:	430a      	orrs	r2, r1
    f658:	701a      	strb	r2, [r3, #0]
    f65a:	2204      	movs	r2, #4
    f65c:	5c39      	ldrb	r1, [r7, r0]
    f65e:	4211      	tst	r1, r2
    f660:	d071      	beq.n	f746 <IncludeMacCommandsResponse+0x192>
    f662:	7819      	ldrb	r1, [r3, #0]
    f664:	430a      	orrs	r2, r1
    f666:	701a      	strb	r2, [r3, #0]
    f668:	e06d      	b.n	f746 <IncludeMacCommandsResponse+0x192>
    f66a:	2305      	movs	r3, #5
    f66c:	2103      	movs	r1, #3
    f66e:	2200      	movs	r2, #0
    f670:	552b      	strb	r3, [r5, r4]
    f672:	1c63      	adds	r3, r4, #1
    f674:	b29b      	uxth	r3, r3
    f676:	4371      	muls	r1, r6
    f678:	18eb      	adds	r3, r5, r3
    f67a:	701a      	strb	r2, [r3, #0]
    f67c:	4a48      	ldr	r2, [pc, #288]	; (f7a0 <IncludeMacCommandsResponse+0x1ec>)
    f67e:	1851      	adds	r1, r2, r1
    f680:	3198      	adds	r1, #152	; 0x98
    f682:	7888      	ldrb	r0, [r1, #2]
    f684:	0700      	lsls	r0, r0, #28
    f686:	0fc0      	lsrs	r0, r0, #31
    f688:	7018      	strb	r0, [r3, #0]
    f68a:	7889      	ldrb	r1, [r1, #2]
    f68c:	b2c7      	uxtb	r7, r0
    f68e:	06c9      	lsls	r1, r1, #27
    f690:	d502      	bpl.n	f698 <IncludeMacCommandsResponse+0xe4>
    f692:	2102      	movs	r1, #2
    f694:	4339      	orrs	r1, r7
    f696:	7019      	strb	r1, [r3, #0]
    f698:	2103      	movs	r1, #3
    f69a:	4371      	muls	r1, r6
    f69c:	1852      	adds	r2, r2, r1
    f69e:	3298      	adds	r2, #152	; 0x98
    f6a0:	7892      	ldrb	r2, [r2, #2]
    f6a2:	0692      	lsls	r2, r2, #26
    f6a4:	d54f      	bpl.n	f746 <IncludeMacCommandsResponse+0x192>
    f6a6:	7819      	ldrb	r1, [r3, #0]
    f6a8:	2204      	movs	r2, #4
    f6aa:	e7db      	b.n	f664 <IncludeMacCommandsResponse+0xb0>
    f6ac:	a904      	add	r1, sp, #16
    f6ae:	4b41      	ldr	r3, [pc, #260]	; (f7b4 <IncludeMacCommandsResponse+0x200>)
    f6b0:	200e      	movs	r0, #14
    f6b2:	4798      	blx	r3
    f6b4:	2306      	movs	r3, #6
    f6b6:	4a3a      	ldr	r2, [pc, #232]	; (f7a0 <IncludeMacCommandsResponse+0x1ec>)
    f6b8:	552b      	strb	r3, [r5, r4]
    f6ba:	32e8      	adds	r2, #232	; 0xe8
    f6bc:	7811      	ldrb	r1, [r2, #0]
    f6be:	1c62      	adds	r2, r4, #1
    f6c0:	b292      	uxth	r2, r2
    f6c2:	54a9      	strb	r1, [r5, r2]
    f6c4:	aa04      	add	r2, sp, #16
    f6c6:	7812      	ldrb	r2, [r2, #0]
    f6c8:	1ca3      	adds	r3, r4, #2
    f6ca:	0011      	movs	r1, r2
    f6cc:	3120      	adds	r1, #32
    f6ce:	3403      	adds	r4, #3
    f6d0:	b2c9      	uxtb	r1, r1
    f6d2:	b29b      	uxth	r3, r3
    f6d4:	b2a4      	uxth	r4, r4
    f6d6:	293f      	cmp	r1, #63	; 0x3f
    f6d8:	d904      	bls.n	f6e4 <IncludeMacCommandsResponse+0x130>
    f6da:	2220      	movs	r2, #32
    f6dc:	54ea      	strb	r2, [r5, r3]
    f6de:	3601      	adds	r6, #1
    f6e0:	b2f6      	uxtb	r6, r6
    f6e2:	e76e      	b.n	f5c2 <IncludeMacCommandsResponse+0xe>
    f6e4:	213f      	movs	r1, #63	; 0x3f
    f6e6:	400a      	ands	r2, r1
    f6e8:	e7f8      	b.n	f6dc <IncludeMacCommandsResponse+0x128>
    f6ea:	2307      	movs	r3, #7
    f6ec:	2103      	movs	r1, #3
    f6ee:	2200      	movs	r2, #0
    f6f0:	552b      	strb	r3, [r5, r4]
    f6f2:	1c63      	adds	r3, r4, #1
    f6f4:	4371      	muls	r1, r6
    f6f6:	b29b      	uxth	r3, r3
    f6f8:	18eb      	adds	r3, r5, r3
    f6fa:	701a      	strb	r2, [r3, #0]
    f6fc:	4a28      	ldr	r2, [pc, #160]	; (f7a0 <IncludeMacCommandsResponse+0x1ec>)
    f6fe:	1852      	adds	r2, r2, r1
    f700:	3298      	adds	r2, #152	; 0x98
    f702:	7891      	ldrb	r1, [r2, #2]
    f704:	09c9      	lsrs	r1, r1, #7
    f706:	7019      	strb	r1, [r3, #0]
    f708:	7892      	ldrb	r2, [r2, #2]
    f70a:	b2c8      	uxtb	r0, r1
    f70c:	0652      	lsls	r2, r2, #25
    f70e:	d51a      	bpl.n	f746 <IncludeMacCommandsResponse+0x192>
    f710:	2202      	movs	r2, #2
    f712:	4302      	orrs	r2, r0
    f714:	e7a7      	b.n	f666 <IncludeMacCommandsResponse+0xb2>
    f716:	2209      	movs	r2, #9
    f718:	1c63      	adds	r3, r4, #1
    f71a:	552a      	strb	r2, [r5, r4]
    f71c:	b29c      	uxth	r4, r3
    f71e:	e7de      	b.n	f6de <IncludeMacCommandsResponse+0x12a>
    f720:	230a      	movs	r3, #10
    f722:	2103      	movs	r1, #3
    f724:	2200      	movs	r2, #0
    f726:	552b      	strb	r3, [r5, r4]
    f728:	1c63      	adds	r3, r4, #1
    f72a:	4371      	muls	r1, r6
    f72c:	b29b      	uxth	r3, r3
    f72e:	18eb      	adds	r3, r5, r3
    f730:	701a      	strb	r2, [r3, #0]
    f732:	4a1b      	ldr	r2, [pc, #108]	; (f7a0 <IncludeMacCommandsResponse+0x1ec>)
    f734:	1852      	adds	r2, r2, r1
    f736:	3298      	adds	r2, #152	; 0x98
    f738:	7891      	ldrb	r1, [r2, #2]
    f73a:	09c9      	lsrs	r1, r1, #7
    f73c:	7019      	strb	r1, [r3, #0]
    f73e:	78d2      	ldrb	r2, [r2, #3]
    f740:	b2c8      	uxtb	r0, r1
    f742:	07d2      	lsls	r2, r2, #31
    f744:	d4e4      	bmi.n	f710 <IncludeMacCommandsResponse+0x15c>
    f746:	3402      	adds	r4, #2
    f748:	b2a4      	uxth	r4, r4
    f74a:	e7c8      	b.n	f6de <IncludeMacCommandsResponse+0x12a>
    f74c:	003b      	movs	r3, r7
    f74e:	22ff      	movs	r2, #255	; 0xff
    f750:	33e5      	adds	r3, #229	; 0xe5
    f752:	701a      	strb	r2, [r3, #0]
    f754:	2300      	movs	r3, #0
    f756:	37e6      	adds	r7, #230	; 0xe6
    f758:	703b      	strb	r3, [r7, #0]
    f75a:	3afd      	subs	r2, #253	; 0xfd
    f75c:	1c63      	adds	r3, r4, #1
    f75e:	e7dc      	b.n	f71a <IncludeMacCommandsResponse+0x166>
    f760:	1c62      	adds	r2, r4, #1
    f762:	552b      	strb	r3, [r5, r4]
    f764:	b294      	uxth	r4, r2
    f766:	e7ba      	b.n	f6de <IncludeMacCommandsResponse+0x12a>
    f768:	2201      	movs	r2, #1
    f76a:	4252      	negs	r2, r2
    f76c:	17d3      	asrs	r3, r2, #31
    f76e:	9204      	str	r2, [sp, #16]
    f770:	9305      	str	r3, [sp, #20]
    f772:	4b11      	ldr	r3, [pc, #68]	; (f7b8 <IncludeMacCommandsResponse+0x204>)
    f774:	a904      	add	r1, sp, #16
    f776:	5cf8      	ldrb	r0, [r7, r3]
    f778:	4b10      	ldr	r3, [pc, #64]	; (f7bc <IncludeMacCommandsResponse+0x208>)
    f77a:	4798      	blx	r3
    f77c:	2301      	movs	r3, #1
    f77e:	228d      	movs	r2, #141	; 0x8d
    f780:	425b      	negs	r3, r3
    f782:	0092      	lsls	r2, r2, #2
    f784:	50bb      	str	r3, [r7, r2]
    f786:	3204      	adds	r2, #4
    f788:	54bb      	strb	r3, [r7, r2]
    f78a:	238c      	movs	r3, #140	; 0x8c
    f78c:	2201      	movs	r2, #1
    f78e:	009b      	lsls	r3, r3, #2
    f790:	54fa      	strb	r2, [r7, r3]
    f792:	2303      	movs	r3, #3
    f794:	4373      	muls	r3, r6
    f796:	18ff      	adds	r7, r7, r3
    f798:	3799      	adds	r7, #153	; 0x99
    f79a:	18a2      	adds	r2, r4, r2
    f79c:	783b      	ldrb	r3, [r7, #0]
    f79e:	e7e0      	b.n	f762 <IncludeMacCommandsResponse+0x1ae>
    f7a0:	20003170 	.word	0x20003170
    f7a4:	0001830f 	.word	0x0001830f
    f7a8:	00016151 	.word	0x00016151
    f7ac:	20003393 	.word	0x20003393
    f7b0:	00000223 	.word	0x00000223
    f7b4:	0000dbbd 	.word	0x0000dbbd
    f7b8:	00000231 	.word	0x00000231
    f7bc:	0000d135 	.word	0x0000d135

0000f7c0 <UpdateJoinSuccessState>:
    f7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f7c2:	4c32      	ldr	r4, [pc, #200]	; (f88c <UpdateJoinSuccessState+0xcc>)
    f7c4:	2104      	movs	r1, #4
    f7c6:	0022      	movs	r2, r4
    f7c8:	3294      	adds	r2, #148	; 0x94
    f7ca:	7813      	ldrb	r3, [r2, #0]
    f7cc:	2001      	movs	r0, #1
    f7ce:	438b      	bics	r3, r1
    f7d0:	7013      	strb	r3, [r2, #0]
    f7d2:	0022      	movs	r2, r4
    f7d4:	3284      	adds	r2, #132	; 0x84
    f7d6:	7813      	ldrb	r3, [r2, #0]
    f7d8:	b087      	sub	sp, #28
    f7da:	4303      	orrs	r3, r0
    f7dc:	3107      	adds	r1, #7
    f7de:	4f2c      	ldr	r7, [pc, #176]	; (f890 <UpdateJoinSuccessState+0xd0>)
    f7e0:	7013      	strb	r3, [r2, #0]
    f7e2:	2500      	movs	r5, #0
    f7e4:	47b8      	blx	r7
    f7e6:	0023      	movs	r3, r4
    f7e8:	2115      	movs	r1, #21
    f7ea:	3388      	adds	r3, #136	; 0x88
    f7ec:	0028      	movs	r0, r5
    f7ee:	601d      	str	r5, [r3, #0]
    f7f0:	47b8      	blx	r7
    f7f2:	0023      	movs	r3, r4
    f7f4:	2020      	movs	r0, #32
    f7f6:	33ff      	adds	r3, #255	; 0xff
    f7f8:	7f5b      	ldrb	r3, [r3, #29]
    f7fa:	4e26      	ldr	r6, [pc, #152]	; (f894 <UpdateJoinSuccessState+0xd4>)
    f7fc:	4203      	tst	r3, r0
    f7fe:	d00c      	beq.n	f81a <UpdateJoinSuccessState+0x5a>
    f800:	0023      	movs	r3, r4
    f802:	a904      	add	r1, sp, #16
    f804:	3380      	adds	r3, #128	; 0x80
    f806:	710d      	strb	r5, [r1, #4]
    f808:	701d      	strb	r5, [r3, #0]
    f80a:	6765      	str	r5, [r4, #116]	; 0x74
    f80c:	67a5      	str	r5, [r4, #120]	; 0x78
    f80e:	47b0      	blx	r6
    f810:	210f      	movs	r1, #15
    f812:	2021      	movs	r0, #33	; 0x21
    f814:	4469      	add	r1, sp
    f816:	700d      	strb	r5, [r1, #0]
    f818:	47b0      	blx	r6
    f81a:	0023      	movs	r3, r4
    f81c:	2500      	movs	r5, #0
    f81e:	338c      	adds	r3, #140	; 0x8c
    f820:	210a      	movs	r1, #10
    f822:	2001      	movs	r0, #1
    f824:	601d      	str	r5, [r3, #0]
    f826:	47b8      	blx	r7
    f828:	0023      	movs	r3, r4
    f82a:	33ca      	adds	r3, #202	; 0xca
    f82c:	801d      	strh	r5, [r3, #0]
    f82e:	0022      	movs	r2, r4
    f830:	0023      	movs	r3, r4
    f832:	210e      	movs	r1, #14
    f834:	3284      	adds	r2, #132	; 0x84
    f836:	33f6      	adds	r3, #246	; 0xf6
    f838:	701d      	strb	r5, [r3, #0]
    f83a:	7813      	ldrb	r3, [r2, #0]
    f83c:	2039      	movs	r0, #57	; 0x39
    f83e:	438b      	bics	r3, r1
    f840:	0029      	movs	r1, r5
    f842:	7013      	strb	r3, [r2, #0]
    f844:	47b0      	blx	r6
    f846:	0023      	movs	r3, r4
    f848:	3385      	adds	r3, #133	; 0x85
    f84a:	781b      	ldrb	r3, [r3, #0]
    f84c:	079b      	lsls	r3, r3, #30
    f84e:	d50c      	bpl.n	f86a <UpdateJoinSuccessState+0xaa>
    f850:	0023      	movs	r3, r4
    f852:	21fa      	movs	r1, #250	; 0xfa
    f854:	3390      	adds	r3, #144	; 0x90
    f856:	681b      	ldr	r3, [r3, #0]
    f858:	34f0      	adds	r4, #240	; 0xf0
    f85a:	0089      	lsls	r1, r1, #2
    f85c:	7820      	ldrb	r0, [r4, #0]
    f85e:	4359      	muls	r1, r3
    f860:	9500      	str	r5, [sp, #0]
    f862:	4b0d      	ldr	r3, [pc, #52]	; (f898 <UpdateJoinSuccessState+0xd8>)
    f864:	002a      	movs	r2, r5
    f866:	4c0d      	ldr	r4, [pc, #52]	; (f89c <UpdateJoinSuccessState+0xdc>)
    f868:	47a0      	blx	r4
    f86a:	490d      	ldr	r1, [pc, #52]	; (f8a0 <UpdateJoinSuccessState+0xe0>)
    f86c:	794a      	ldrb	r2, [r1, #5]
    f86e:	790b      	ldrb	r3, [r1, #4]
    f870:	0212      	lsls	r2, r2, #8
    f872:	431a      	orrs	r2, r3
    f874:	798b      	ldrb	r3, [r1, #6]
    f876:	041b      	lsls	r3, r3, #16
    f878:	431a      	orrs	r2, r3
    f87a:	79cb      	ldrb	r3, [r1, #7]
    f87c:	061b      	lsls	r3, r3, #24
    f87e:	4313      	orrs	r3, r2
    f880:	d001      	beq.n	f886 <UpdateJoinSuccessState+0xc6>
    f882:	2008      	movs	r0, #8
    f884:	4798      	blx	r3
    f886:	b007      	add	sp, #28
    f888:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f88a:	46c0      	nop			; (mov r8, r8)
    f88c:	20003170 	.word	0x20003170
    f890:	00008d09 	.word	0x00008d09
    f894:	0000c69d 	.word	0x0000c69d
    f898:	0000f9e1 	.word	0x0000f9e1
    f89c:	0000cbad 	.word	0x0000cbad
    f8a0:	200034cc 	.word	0x200034cc

0000f8a4 <PrepareSessionKeys>:
    f8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f8a6:	0004      	movs	r4, r0
    f8a8:	2603      	movs	r6, #3
    f8aa:	000d      	movs	r5, r1
    f8ac:	0017      	movs	r7, r2
    f8ae:	4b09      	ldr	r3, [pc, #36]	; (f8d4 <PrepareSessionKeys+0x30>)
    f8b0:	2210      	movs	r2, #16
    f8b2:	2100      	movs	r1, #0
    f8b4:	4798      	blx	r3
    f8b6:	0032      	movs	r2, r6
    f8b8:	0029      	movs	r1, r5
    f8ba:	1c60      	adds	r0, r4, #1
    f8bc:	4d06      	ldr	r5, [pc, #24]	; (f8d8 <PrepareSessionKeys+0x34>)
    f8be:	47a8      	blx	r5
    f8c0:	0032      	movs	r2, r6
    f8c2:	0039      	movs	r1, r7
    f8c4:	1d20      	adds	r0, r4, #4
    f8c6:	47a8      	blx	r5
    f8c8:	1de0      	adds	r0, r4, #7
    f8ca:	2202      	movs	r2, #2
    f8cc:	4903      	ldr	r1, [pc, #12]	; (f8dc <PrepareSessionKeys+0x38>)
    f8ce:	47a8      	blx	r5
    f8d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f8d2:	46c0      	nop			; (mov r8, r8)
    f8d4:	00016151 	.word	0x00016151
    f8d8:	0001613f 	.word	0x0001613f
    f8dc:	2000323c 	.word	0x2000323c

0000f8e0 <AssembleEncryptionBlock>:
    f8e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f8e2:	001e      	movs	r6, r3
    f8e4:	4c0b      	ldr	r4, [pc, #44]	; (f914 <AssembleEncryptionBlock+0x34>)
    f8e6:	0017      	movs	r7, r2
    f8e8:	4b0b      	ldr	r3, [pc, #44]	; (f918 <AssembleEncryptionBlock+0x38>)
    f8ea:	0005      	movs	r5, r0
    f8ec:	9101      	str	r1, [sp, #4]
    f8ee:	2210      	movs	r2, #16
    f8f0:	2100      	movs	r1, #0
    f8f2:	0020      	movs	r0, r4
    f8f4:	4798      	blx	r3
    f8f6:	7026      	strb	r6, [r4, #0]
    f8f8:	2604      	movs	r6, #4
    f8fa:	7165      	strb	r5, [r4, #5]
    f8fc:	0032      	movs	r2, r6
    f8fe:	4d07      	ldr	r5, [pc, #28]	; (f91c <AssembleEncryptionBlock+0x3c>)
    f900:	a908      	add	r1, sp, #32
    f902:	1da0      	adds	r0, r4, #6
    f904:	47a8      	blx	r5
    f906:	0020      	movs	r0, r4
    f908:	0032      	movs	r2, r6
    f90a:	a901      	add	r1, sp, #4
    f90c:	300a      	adds	r0, #10
    f90e:	47a8      	blx	r5
    f910:	73e7      	strb	r7, [r4, #15]
    f912:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    f914:	20001e9d 	.word	0x20001e9d
    f918:	00016151 	.word	0x00016151
    f91c:	0001613f 	.word	0x0001613f

0000f920 <ConfigureRadio>:
    f920:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f922:	0001      	movs	r1, r0
    f924:	0005      	movs	r5, r0
    f926:	4c11      	ldr	r4, [pc, #68]	; (f96c <ConfigureRadio+0x4c>)
    f928:	3109      	adds	r1, #9
    f92a:	2009      	movs	r0, #9
    f92c:	47a0      	blx	r4
    f92e:	0029      	movs	r1, r5
    f930:	2001      	movs	r0, #1
    f932:	47a0      	blx	r4
    f934:	1d29      	adds	r1, r5, #4
    f936:	200a      	movs	r0, #10
    f938:	47a0      	blx	r4
    f93a:	7a6b      	ldrb	r3, [r5, #9]
    f93c:	2b01      	cmp	r3, #1
    f93e:	d10b      	bne.n	f958 <ConfigureRadio+0x38>
    f940:	0029      	movs	r1, r5
    f942:	2016      	movs	r0, #22
    f944:	310b      	adds	r1, #11
    f946:	47a0      	blx	r4
    f948:	0029      	movs	r1, r5
    f94a:	2007      	movs	r0, #7
    f94c:	310a      	adds	r1, #10
    f94e:	47a0      	blx	r4
    f950:	2000      	movs	r0, #0
    f952:	4907      	ldr	r1, [pc, #28]	; (f970 <ConfigureRadio+0x50>)
    f954:	47a0      	blx	r4
    f956:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    f958:	466b      	mov	r3, sp
    f95a:	1dd9      	adds	r1, r3, #7
    f95c:	2303      	movs	r3, #3
    f95e:	2013      	movs	r0, #19
    f960:	700b      	strb	r3, [r1, #0]
    f962:	47a0      	blx	r4
    f964:	4903      	ldr	r1, [pc, #12]	; (f974 <ConfigureRadio+0x54>)
    f966:	2012      	movs	r0, #18
    f968:	e7f4      	b.n	f954 <ConfigureRadio+0x34>
    f96a:	46c0      	nop			; (mov r8, r8)
    f96c:	0000dcad 	.word	0x0000dcad
    f970:	20003270 	.word	0x20003270
    f974:	00018300 	.word	0x00018300

0000f978 <StopReceiveWindow2Timer>:
    f978:	b510      	push	{r4, lr}
    f97a:	4c0b      	ldr	r4, [pc, #44]	; (f9a8 <StopReceiveWindow2Timer+0x30>)
    f97c:	0022      	movs	r2, r4
    f97e:	32fd      	adds	r2, #253	; 0xfd
    f980:	7812      	ldrb	r2, [r2, #0]
    f982:	2a01      	cmp	r2, #1
    f984:	d10e      	bne.n	f9a4 <StopReceiveWindow2Timer+0x2c>
    f986:	0021      	movs	r1, r4
    f988:	200e      	movs	r0, #14
    f98a:	3184      	adds	r1, #132	; 0x84
    f98c:	780a      	ldrb	r2, [r1, #0]
    f98e:	34ee      	adds	r4, #238	; 0xee
    f990:	4382      	bics	r2, r0
    f992:	700a      	strb	r2, [r1, #0]
    f994:	7820      	ldrb	r0, [r4, #0]
    f996:	4b05      	ldr	r3, [pc, #20]	; (f9ac <StopReceiveWindow2Timer+0x34>)
    f998:	4798      	blx	r3
    f99a:	2800      	cmp	r0, #0
    f99c:	d002      	beq.n	f9a4 <StopReceiveWindow2Timer+0x2c>
    f99e:	7820      	ldrb	r0, [r4, #0]
    f9a0:	4b03      	ldr	r3, [pc, #12]	; (f9b0 <StopReceiveWindow2Timer+0x38>)
    f9a2:	4798      	blx	r3
    f9a4:	bd10      	pop	{r4, pc}
    f9a6:	46c0      	nop			; (mov r8, r8)
    f9a8:	20003170 	.word	0x20003170
    f9ac:	0000cd45 	.word	0x0000cd45
    f9b0:	0000cec5 	.word	0x0000cec5

0000f9b4 <LorawanLinkCheckCallback.part.1>:
    f9b4:	4b07      	ldr	r3, [pc, #28]	; (f9d4 <LorawanLinkCheckCallback.part.1+0x20>)
    f9b6:	b513      	push	{r0, r1, r4, lr}
    f9b8:	001a      	movs	r2, r3
    f9ba:	21fa      	movs	r1, #250	; 0xfa
    f9bc:	3290      	adds	r2, #144	; 0x90
    f9be:	6812      	ldr	r2, [r2, #0]
    f9c0:	0089      	lsls	r1, r1, #2
    f9c2:	4351      	muls	r1, r2
    f9c4:	2200      	movs	r2, #0
    f9c6:	33f0      	adds	r3, #240	; 0xf0
    f9c8:	7818      	ldrb	r0, [r3, #0]
    f9ca:	4c03      	ldr	r4, [pc, #12]	; (f9d8 <LorawanLinkCheckCallback.part.1+0x24>)
    f9cc:	9200      	str	r2, [sp, #0]
    f9ce:	4b03      	ldr	r3, [pc, #12]	; (f9dc <LorawanLinkCheckCallback.part.1+0x28>)
    f9d0:	47a0      	blx	r4
    f9d2:	bd13      	pop	{r0, r1, r4, pc}
    f9d4:	20003170 	.word	0x20003170
    f9d8:	0000cbad 	.word	0x0000cbad
    f9dc:	0000f9e1 	.word	0x0000f9e1

0000f9e0 <LorawanLinkCheckCallback>:
    f9e0:	4b17      	ldr	r3, [pc, #92]	; (fa40 <LorawanLinkCheckCallback+0x60>)
    f9e2:	20a0      	movs	r0, #160	; 0xa0
    f9e4:	001a      	movs	r2, r3
    f9e6:	2180      	movs	r1, #128	; 0x80
    f9e8:	b510      	push	{r4, lr}
    f9ea:	3284      	adds	r2, #132	; 0x84
    f9ec:	8812      	ldrh	r2, [r2, #0]
    f9ee:	0080      	lsls	r0, r0, #2
    f9f0:	0089      	lsls	r1, r1, #2
    f9f2:	4002      	ands	r2, r0
    f9f4:	428a      	cmp	r2, r1
    f9f6:	d11c      	bne.n	fa32 <LorawanLinkCheckCallback+0x52>
    f9f8:	001a      	movs	r2, r3
    f9fa:	32e0      	adds	r2, #224	; 0xe0
    f9fc:	7810      	ldrb	r0, [r2, #0]
    f9fe:	2403      	movs	r4, #3
    fa00:	2200      	movs	r2, #0
    fa02:	b2d1      	uxtb	r1, r2
    fa04:	4281      	cmp	r1, r0
    fa06:	d30d      	bcc.n	fa24 <LorawanLinkCheckCallback+0x44>
    fa08:	d113      	bne.n	fa32 <LorawanLinkCheckCallback+0x52>
    fa0a:	2203      	movs	r2, #3
    fa0c:	434a      	muls	r2, r1
    fa0e:	2102      	movs	r1, #2
    fa10:	189a      	adds	r2, r3, r2
    fa12:	3299      	adds	r2, #153	; 0x99
    fa14:	7011      	strb	r1, [r2, #0]
    fa16:	280f      	cmp	r0, #15
    fa18:	d80b      	bhi.n	fa32 <LorawanLinkCheckCallback+0x52>
    fa1a:	001a      	movs	r2, r3
    fa1c:	3001      	adds	r0, #1
    fa1e:	32e0      	adds	r2, #224	; 0xe0
    fa20:	7010      	strb	r0, [r2, #0]
    fa22:	e006      	b.n	fa32 <LorawanLinkCheckCallback+0x52>
    fa24:	0021      	movs	r1, r4
    fa26:	3201      	adds	r2, #1
    fa28:	4351      	muls	r1, r2
    fa2a:	3196      	adds	r1, #150	; 0x96
    fa2c:	5c59      	ldrb	r1, [r3, r1]
    fa2e:	2902      	cmp	r1, #2
    fa30:	d1e7      	bne.n	fa02 <LorawanLinkCheckCallback+0x22>
    fa32:	3385      	adds	r3, #133	; 0x85
    fa34:	781b      	ldrb	r3, [r3, #0]
    fa36:	079b      	lsls	r3, r3, #30
    fa38:	d501      	bpl.n	fa3e <LorawanLinkCheckCallback+0x5e>
    fa3a:	4b02      	ldr	r3, [pc, #8]	; (fa44 <LorawanLinkCheckCallback+0x64>)
    fa3c:	4798      	blx	r3
    fa3e:	bd10      	pop	{r4, pc}
    fa40:	20003170 	.word	0x20003170
    fa44:	0000f9b5 	.word	0x0000f9b5

0000fa48 <LORAWAN_Send>:
    fa48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    fa4a:	4c37      	ldr	r4, [pc, #220]	; (fb28 <LORAWAN_Send+0xe0>)
    fa4c:	0006      	movs	r6, r0
    fa4e:	0023      	movs	r3, r4
    fa50:	3384      	adds	r3, #132	; 0x84
    fa52:	781b      	ldrb	r3, [r3, #0]
    fa54:	250f      	movs	r5, #15
    fa56:	b25a      	sxtb	r2, r3
    fa58:	2a00      	cmp	r2, #0
    fa5a:	db0b      	blt.n	fa74 <LORAWAN_Send+0x2c>
    fa5c:	3d03      	subs	r5, #3
    fa5e:	065a      	lsls	r2, r3, #25
    fa60:	d408      	bmi.n	fa74 <LORAWAN_Send+0x2c>
    fa62:	3d03      	subs	r5, #3
    fa64:	07db      	lsls	r3, r3, #31
    fa66:	d505      	bpl.n	fa74 <LORAWAN_Send+0x2c>
    fa68:	2388      	movs	r3, #136	; 0x88
    fa6a:	009b      	lsls	r3, r3, #2
    fa6c:	5ce7      	ldrb	r7, [r4, r3]
    fa6e:	2f00      	cmp	r7, #0
    fa70:	d102      	bne.n	fa78 <LORAWAN_Send+0x30>
    fa72:	2511      	movs	r5, #17
    fa74:	0028      	movs	r0, r5
    fa76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    fa78:	2800      	cmp	r0, #0
    fa7a:	d10f      	bne.n	fa9c <LORAWAN_Send+0x54>
    fa7c:	2700      	movs	r7, #0
    fa7e:	0023      	movs	r3, r4
    fa80:	3388      	adds	r3, #136	; 0x88
    fa82:	681b      	ldr	r3, [r3, #0]
    fa84:	3301      	adds	r3, #1
    fa86:	d123      	bne.n	fad0 <LORAWAN_Send+0x88>
    fa88:	2001      	movs	r0, #1
    fa8a:	3484      	adds	r4, #132	; 0x84
    fa8c:	78a3      	ldrb	r3, [r4, #2]
    fa8e:	210b      	movs	r1, #11
    fa90:	4303      	orrs	r3, r0
    fa92:	70a3      	strb	r3, [r4, #2]
    fa94:	4b25      	ldr	r3, [pc, #148]	; (fb2c <LORAWAN_Send+0xe4>)
    fa96:	4798      	blx	r3
    fa98:	250d      	movs	r5, #13
    fa9a:	e7eb      	b.n	fa74 <LORAWAN_Send+0x2c>
    fa9c:	7843      	ldrb	r3, [r0, #1]
    fa9e:	7a02      	ldrb	r2, [r0, #8]
    faa0:	3b01      	subs	r3, #1
    faa2:	b2db      	uxtb	r3, r3
    faa4:	9201      	str	r2, [sp, #4]
    faa6:	2bdf      	cmp	r3, #223	; 0xdf
    faa8:	d902      	bls.n	fab0 <LORAWAN_Send+0x68>
    faaa:	250a      	movs	r5, #10
    faac:	2a00      	cmp	r2, #0
    faae:	d1e1      	bne.n	fa74 <LORAWAN_Send+0x2c>
    fab0:	4b1f      	ldr	r3, [pc, #124]	; (fb30 <LORAWAN_Send+0xe8>)
    fab2:	4798      	blx	r3
    fab4:	4684      	mov	ip, r0
    fab6:	9b01      	ldr	r3, [sp, #4]
    fab8:	9000      	str	r0, [sp, #0]
    faba:	4463      	add	r3, ip
    fabc:	001d      	movs	r5, r3
    fabe:	4b1d      	ldr	r3, [pc, #116]	; (fb34 <LORAWAN_Send+0xec>)
    fac0:	4798      	blx	r3
    fac2:	4285      	cmp	r5, r0
    fac4:	ddda      	ble.n	fa7c <LORAWAN_Send+0x34>
    fac6:	9b00      	ldr	r3, [sp, #0]
    fac8:	250e      	movs	r5, #14
    faca:	2b00      	cmp	r3, #0
    facc:	d0d2      	beq.n	fa74 <LORAWAN_Send+0x2c>
    face:	e7d6      	b.n	fa7e <LORAWAN_Send+0x36>
    fad0:	0023      	movs	r3, r4
    fad2:	33fd      	adds	r3, #253	; 0xfd
    fad4:	781b      	ldrb	r3, [r3, #0]
    fad6:	2b04      	cmp	r3, #4
    fad8:	d01d      	beq.n	fb16 <LORAWAN_Send+0xce>
    fada:	0023      	movs	r3, r4
    fadc:	33fd      	adds	r3, #253	; 0xfd
    fade:	781b      	ldrb	r3, [r3, #0]
    fae0:	2b01      	cmp	r3, #1
    fae2:	d105      	bne.n	faf0 <LORAWAN_Send+0xa8>
    fae4:	0023      	movs	r3, r4
    fae6:	3384      	adds	r3, #132	; 0x84
    fae8:	781a      	ldrb	r2, [r3, #0]
    faea:	230e      	movs	r3, #14
    faec:	421a      	tst	r2, r3
    faee:	d1c0      	bne.n	fa72 <LORAWAN_Send+0x2a>
    faf0:	0023      	movs	r3, r4
    faf2:	33fc      	adds	r3, #252	; 0xfc
    faf4:	2f00      	cmp	r7, #0
    faf6:	d113      	bne.n	fb20 <LORAWAN_Send+0xd8>
    faf8:	2508      	movs	r5, #8
    fafa:	60de      	str	r6, [r3, #12]
    fafc:	2388      	movs	r3, #136	; 0x88
    fafe:	2200      	movs	r2, #0
    fb00:	009b      	lsls	r3, r3, #2
    fb02:	54e2      	strb	r2, [r4, r3]
    fb04:	2001      	movs	r0, #1
    fb06:	4b0c      	ldr	r3, [pc, #48]	; (fb38 <LORAWAN_Send+0xf0>)
    fb08:	4798      	blx	r3
    fb0a:	2320      	movs	r3, #32
    fb0c:	3494      	adds	r4, #148	; 0x94
    fb0e:	7822      	ldrb	r2, [r4, #0]
    fb10:	4313      	orrs	r3, r2
    fb12:	7023      	strb	r3, [r4, #0]
    fb14:	e7ae      	b.n	fa74 <LORAWAN_Send+0x2c>
    fb16:	4b09      	ldr	r3, [pc, #36]	; (fb3c <LORAWAN_Send+0xf4>)
    fb18:	4798      	blx	r3
    fb1a:	2808      	cmp	r0, #8
    fb1c:	d1a9      	bne.n	fa72 <LORAWAN_Send+0x2a>
    fb1e:	e7dc      	b.n	fada <LORAWAN_Send+0x92>
    fb20:	2200      	movs	r2, #0
    fb22:	2511      	movs	r5, #17
    fb24:	60da      	str	r2, [r3, #12]
    fb26:	e7e9      	b.n	fafc <LORAWAN_Send+0xb4>
    fb28:	20003170 	.word	0x20003170
    fb2c:	00008d09 	.word	0x00008d09
    fb30:	0000f515 	.word	0x0000f515
    fb34:	0000f555 	.word	0x0000f555
    fb38:	0000db39 	.word	0x0000db39
    fb3c:	00012685 	.word	0x00012685

0000fb40 <AutomaticReplyCallback>:
    fb40:	b510      	push	{r4, lr}
    fb42:	4c0d      	ldr	r4, [pc, #52]	; (fb78 <AutomaticReplyCallback+0x38>)
    fb44:	0023      	movs	r3, r4
    fb46:	33fd      	adds	r3, #253	; 0xfd
    fb48:	781b      	ldrb	r3, [r3, #0]
    fb4a:	2b01      	cmp	r3, #1
    fb4c:	d10e      	bne.n	fb6c <AutomaticReplyCallback+0x2c>
    fb4e:	0022      	movs	r2, r4
    fb50:	210e      	movs	r1, #14
    fb52:	3284      	adds	r2, #132	; 0x84
    fb54:	7813      	ldrb	r3, [r2, #0]
    fb56:	438b      	bics	r3, r1
    fb58:	7013      	strb	r3, [r2, #0]
    fb5a:	4b08      	ldr	r3, [pc, #32]	; (fb7c <AutomaticReplyCallback+0x3c>)
    fb5c:	2000      	movs	r0, #0
    fb5e:	4798      	blx	r3
    fb60:	2208      	movs	r2, #8
    fb62:	3494      	adds	r4, #148	; 0x94
    fb64:	7823      	ldrb	r3, [r4, #0]
    fb66:	4393      	bics	r3, r2
    fb68:	7023      	strb	r3, [r4, #0]
    fb6a:	bd10      	pop	{r4, pc}
    fb6c:	2b04      	cmp	r3, #4
    fb6e:	d1f4      	bne.n	fb5a <AutomaticReplyCallback+0x1a>
    fb70:	4b03      	ldr	r3, [pc, #12]	; (fb80 <AutomaticReplyCallback+0x40>)
    fb72:	4798      	blx	r3
    fb74:	e7f1      	b.n	fb5a <AutomaticReplyCallback+0x1a>
    fb76:	46c0      	nop			; (mov r8, r8)
    fb78:	20003170 	.word	0x20003170
    fb7c:	0000fa49 	.word	0x0000fa49
    fb80:	0000e5c1 	.word	0x0000e5c1

0000fb84 <LorawanLinkCheckConfigure>:
    fb84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fb86:	23fa      	movs	r3, #250	; 0xfa
    fb88:	4c21      	ldr	r4, [pc, #132]	; (fc10 <LorawanLinkCheckConfigure+0x8c>)
    fb8a:	009b      	lsls	r3, r3, #2
    fb8c:	0022      	movs	r2, r4
    fb8e:	0025      	movs	r5, r4
    fb90:	4343      	muls	r3, r0
    fb92:	3290      	adds	r2, #144	; 0x90
    fb94:	0006      	movs	r6, r0
    fb96:	2102      	movs	r1, #2
    fb98:	2000      	movs	r0, #0
    fb9a:	4f1e      	ldr	r7, [pc, #120]	; (fc14 <LorawanLinkCheckConfigure+0x90>)
    fb9c:	6013      	str	r3, [r2, #0]
    fb9e:	3584      	adds	r5, #132	; 0x84
    fba0:	47b8      	blx	r7
    fba2:	2e00      	cmp	r6, #0
    fba4:	d127      	bne.n	fbf6 <LorawanLinkCheckConfigure+0x72>
    fba6:	0023      	movs	r3, r4
    fba8:	33f0      	adds	r3, #240	; 0xf0
    fbaa:	7818      	ldrb	r0, [r3, #0]
    fbac:	4b1a      	ldr	r3, [pc, #104]	; (fc18 <LorawanLinkCheckConfigure+0x94>)
    fbae:	4798      	blx	r3
    fbb0:	2202      	movs	r2, #2
    fbb2:	786b      	ldrb	r3, [r5, #1]
    fbb4:	210b      	movs	r1, #11
    fbb6:	4393      	bics	r3, r2
    fbb8:	706b      	strb	r3, [r5, #1]
    fbba:	2001      	movs	r0, #1
    fbbc:	47b8      	blx	r7
    fbbe:	0023      	movs	r3, r4
    fbc0:	2701      	movs	r7, #1
    fbc2:	33e0      	adds	r3, #224	; 0xe0
    fbc4:	781b      	ldrb	r3, [r3, #0]
    fbc6:	0030      	movs	r0, r6
    fbc8:	0032      	movs	r2, r6
    fbca:	36ff      	adds	r6, #255	; 0xff
    fbcc:	429a      	cmp	r2, r3
    fbce:	d304      	bcc.n	fbda <LorawanLinkCheckConfigure+0x56>
    fbd0:	2800      	cmp	r0, #0
    fbd2:	d001      	beq.n	fbd8 <LorawanLinkCheckConfigure+0x54>
    fbd4:	34e0      	adds	r4, #224	; 0xe0
    fbd6:	7023      	strb	r3, [r4, #0]
    fbd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fbda:	2103      	movs	r1, #3
    fbdc:	4351      	muls	r1, r2
    fbde:	1861      	adds	r1, r4, r1
    fbe0:	3199      	adds	r1, #153	; 0x99
    fbe2:	780d      	ldrb	r5, [r1, #0]
    fbe4:	2d02      	cmp	r5, #2
    fbe6:	d103      	bne.n	fbf0 <LorawanLinkCheckConfigure+0x6c>
    fbe8:	0038      	movs	r0, r7
    fbea:	3b01      	subs	r3, #1
    fbec:	700e      	strb	r6, [r1, #0]
    fbee:	b2db      	uxtb	r3, r3
    fbf0:	3201      	adds	r2, #1
    fbf2:	b2d2      	uxtb	r2, r2
    fbf4:	e7ea      	b.n	fbcc <LorawanLinkCheckConfigure+0x48>
    fbf6:	2302      	movs	r3, #2
    fbf8:	786a      	ldrb	r2, [r5, #1]
    fbfa:	210b      	movs	r1, #11
    fbfc:	4313      	orrs	r3, r2
    fbfe:	706b      	strb	r3, [r5, #1]
    fc00:	2001      	movs	r0, #1
    fc02:	47b8      	blx	r7
    fc04:	782b      	ldrb	r3, [r5, #0]
    fc06:	07db      	lsls	r3, r3, #31
    fc08:	d5e6      	bpl.n	fbd8 <LorawanLinkCheckConfigure+0x54>
    fc0a:	4b04      	ldr	r3, [pc, #16]	; (fc1c <LorawanLinkCheckConfigure+0x98>)
    fc0c:	4798      	blx	r3
    fc0e:	e7e3      	b.n	fbd8 <LorawanLinkCheckConfigure+0x54>
    fc10:	20003170 	.word	0x20003170
    fc14:	00008d09 	.word	0x00008d09
    fc18:	0000cec5 	.word	0x0000cec5
    fc1c:	0000f9b5 	.word	0x0000f9b5

0000fc20 <EncodeDeviceTimeReq>:
    fc20:	4b08      	ldr	r3, [pc, #32]	; (fc44 <EncodeDeviceTimeReq+0x24>)
    fc22:	b510      	push	{r4, lr}
    fc24:	001c      	movs	r4, r3
    fc26:	34e0      	adds	r4, #224	; 0xe0
    fc28:	7822      	ldrb	r2, [r4, #0]
    fc2a:	2015      	movs	r0, #21
    fc2c:	2a0f      	cmp	r2, #15
    fc2e:	d808      	bhi.n	fc42 <EncodeDeviceTimeReq+0x22>
    fc30:	2103      	movs	r1, #3
    fc32:	4351      	muls	r1, r2
    fc34:	185b      	adds	r3, r3, r1
    fc36:	210d      	movs	r1, #13
    fc38:	3399      	adds	r3, #153	; 0x99
    fc3a:	3201      	adds	r2, #1
    fc3c:	7019      	strb	r1, [r3, #0]
    fc3e:	7022      	strb	r2, [r4, #0]
    fc40:	380d      	subs	r0, #13
    fc42:	bd10      	pop	{r4, pc}
    fc44:	20003170 	.word	0x20003170

0000fc48 <EncodeLinkCheckReq>:
    fc48:	4b08      	ldr	r3, [pc, #32]	; (fc6c <EncodeLinkCheckReq+0x24>)
    fc4a:	b510      	push	{r4, lr}
    fc4c:	001c      	movs	r4, r3
    fc4e:	34e0      	adds	r4, #224	; 0xe0
    fc50:	7822      	ldrb	r2, [r4, #0]
    fc52:	2015      	movs	r0, #21
    fc54:	2a0f      	cmp	r2, #15
    fc56:	d808      	bhi.n	fc6a <EncodeLinkCheckReq+0x22>
    fc58:	2103      	movs	r1, #3
    fc5a:	4351      	muls	r1, r2
    fc5c:	185b      	adds	r3, r3, r1
    fc5e:	2102      	movs	r1, #2
    fc60:	3399      	adds	r3, #153	; 0x99
    fc62:	3201      	adds	r2, #1
    fc64:	7019      	strb	r1, [r3, #0]
    fc66:	7022      	strb	r2, [r4, #0]
    fc68:	380d      	subs	r0, #13
    fc6a:	bd10      	pop	{r4, pc}
    fc6c:	20003170 	.word	0x20003170

0000fc70 <UpdateCurrentDataRate>:
    fc70:	b510      	push	{r4, lr}
    fc72:	4b04      	ldr	r3, [pc, #16]	; (fc84 <UpdateCurrentDataRate+0x14>)
    fc74:	210c      	movs	r1, #12
    fc76:	33e7      	adds	r3, #231	; 0xe7
    fc78:	7018      	strb	r0, [r3, #0]
    fc7a:	2001      	movs	r0, #1
    fc7c:	4b02      	ldr	r3, [pc, #8]	; (fc88 <UpdateCurrentDataRate+0x18>)
    fc7e:	4798      	blx	r3
    fc80:	bd10      	pop	{r4, pc}
    fc82:	46c0      	nop			; (mov r8, r8)
    fc84:	20003170 	.word	0x20003170
    fc88:	00008d09 	.word	0x00008d09

0000fc8c <UpdateDLSettings>:
    fc8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    fc8e:	466b      	mov	r3, sp
    fc90:	1dde      	adds	r6, r3, #7
    fc92:	1d9c      	adds	r4, r3, #6
    fc94:	71d8      	strb	r0, [r3, #7]
    fc96:	7021      	strb	r1, [r4, #0]
    fc98:	2017      	movs	r0, #23
    fc9a:	0031      	movs	r1, r6
    fc9c:	4d0c      	ldr	r5, [pc, #48]	; (fcd0 <UpdateDLSettings+0x44>)
    fc9e:	47a8      	blx	r5
    fca0:	2808      	cmp	r0, #8
    fca2:	d107      	bne.n	fcb4 <UpdateDLSettings+0x28>
    fca4:	4b0b      	ldr	r3, [pc, #44]	; (fcd4 <UpdateDLSettings+0x48>)
    fca6:	7832      	ldrb	r2, [r6, #0]
    fca8:	336e      	adds	r3, #110	; 0x6e
    fcaa:	701a      	strb	r2, [r3, #0]
    fcac:	2100      	movs	r1, #0
    fcae:	3807      	subs	r0, #7
    fcb0:	4b09      	ldr	r3, [pc, #36]	; (fcd8 <UpdateDLSettings+0x4c>)
    fcb2:	4798      	blx	r3
    fcb4:	0021      	movs	r1, r4
    fcb6:	2018      	movs	r0, #24
    fcb8:	47a8      	blx	r5
    fcba:	2808      	cmp	r0, #8
    fcbc:	d107      	bne.n	fcce <UpdateDLSettings+0x42>
    fcbe:	2101      	movs	r1, #1
    fcc0:	4b04      	ldr	r3, [pc, #16]	; (fcd4 <UpdateDLSettings+0x48>)
    fcc2:	7822      	ldrb	r2, [r4, #0]
    fcc4:	33f7      	adds	r3, #247	; 0xf7
    fcc6:	701a      	strb	r2, [r3, #0]
    fcc8:	0008      	movs	r0, r1
    fcca:	4b03      	ldr	r3, [pc, #12]	; (fcd8 <UpdateDLSettings+0x4c>)
    fccc:	4798      	blx	r3
    fcce:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    fcd0:	0000c681 	.word	0x0000c681
    fcd4:	20003170 	.word	0x20003170
    fcd8:	00008d09 	.word	0x00008d09

0000fcdc <UpdateTxPower>:
    fcdc:	b510      	push	{r4, lr}
    fcde:	4b04      	ldr	r3, [pc, #16]	; (fcf0 <UpdateTxPower+0x14>)
    fce0:	210a      	movs	r1, #10
    fce2:	33e9      	adds	r3, #233	; 0xe9
    fce4:	7018      	strb	r0, [r3, #0]
    fce6:	2000      	movs	r0, #0
    fce8:	4b02      	ldr	r3, [pc, #8]	; (fcf4 <UpdateTxPower+0x18>)
    fcea:	4798      	blx	r3
    fcec:	bd10      	pop	{r4, pc}
    fcee:	46c0      	nop			; (mov r8, r8)
    fcf0:	20003170 	.word	0x20003170
    fcf4:	00008d09 	.word	0x00008d09

0000fcf8 <UpdateRetransmissionAckTimeoutState>:
    fcf8:	4b10      	ldr	r3, [pc, #64]	; (fd3c <UpdateRetransmissionAckTimeoutState+0x44>)
    fcfa:	b513      	push	{r0, r1, r4, lr}
    fcfc:	001a      	movs	r2, r3
    fcfe:	32fd      	adds	r2, #253	; 0xfd
    fd00:	7812      	ldrb	r2, [r2, #0]
    fd02:	2a01      	cmp	r2, #1
    fd04:	d108      	bne.n	fd18 <UpdateRetransmissionAckTimeoutState+0x20>
    fd06:	0018      	movs	r0, r3
    fd08:	210e      	movs	r1, #14
    fd0a:	3084      	adds	r0, #132	; 0x84
    fd0c:	7802      	ldrb	r2, [r0, #0]
    fd0e:	438a      	bics	r2, r1
    fd10:	0011      	movs	r1, r2
    fd12:	220c      	movs	r2, #12
    fd14:	430a      	orrs	r2, r1
    fd16:	7002      	strb	r2, [r0, #0]
    fd18:	001a      	movs	r2, r3
    fd1a:	32da      	adds	r2, #218	; 0xda
    fd1c:	8811      	ldrh	r1, [r2, #0]
    fd1e:	4a08      	ldr	r2, [pc, #32]	; (fd40 <UpdateRetransmissionAckTimeoutState+0x48>)
    fd20:	4c08      	ldr	r4, [pc, #32]	; (fd44 <UpdateRetransmissionAckTimeoutState+0x4c>)
    fd22:	5c9a      	ldrb	r2, [r3, r2]
    fd24:	33f1      	adds	r3, #241	; 0xf1
    fd26:	1a8a      	subs	r2, r1, r2
    fd28:	21fa      	movs	r1, #250	; 0xfa
    fd2a:	0089      	lsls	r1, r1, #2
    fd2c:	4351      	muls	r1, r2
    fd2e:	2200      	movs	r2, #0
    fd30:	7818      	ldrb	r0, [r3, #0]
    fd32:	9200      	str	r2, [sp, #0]
    fd34:	4b04      	ldr	r3, [pc, #16]	; (fd48 <UpdateRetransmissionAckTimeoutState+0x50>)
    fd36:	47a0      	blx	r4
    fd38:	bd13      	pop	{r0, r1, r4, pc}
    fd3a:	46c0      	nop			; (mov r8, r8)
    fd3c:	20003170 	.word	0x20003170
    fd40:	0000022b 	.word	0x0000022b
    fd44:	0000cbad 	.word	0x0000cbad
    fd48:	00010a89 	.word	0x00010a89

0000fd4c <UpdateReceiveWindow2Parameters>:
    fd4c:	4b0f      	ldr	r3, [pc, #60]	; (fd8c <UpdateReceiveWindow2Parameters+0x40>)
    fd4e:	b570      	push	{r4, r5, r6, lr}
    fd50:	001a      	movs	r2, r3
    fd52:	326e      	adds	r2, #110	; 0x6e
    fd54:	7011      	strb	r1, [r2, #0]
    fd56:	001a      	movs	r2, r3
    fd58:	0c04      	lsrs	r4, r0, #16
    fd5a:	326a      	adds	r2, #106	; 0x6a
    fd5c:	8010      	strh	r0, [r2, #0]
    fd5e:	8054      	strh	r4, [r2, #2]
    fd60:	001a      	movs	r2, r3
    fd62:	25fd      	movs	r5, #253	; 0xfd
    fd64:	32fd      	adds	r2, #253	; 0xfd
    fd66:	7812      	ldrb	r2, [r2, #0]
    fd68:	3a02      	subs	r2, #2
    fd6a:	422a      	tst	r2, r5
    fd6c:	d109      	bne.n	fd82 <UpdateReceiveWindow2Parameters+0x36>
    fd6e:	001a      	movs	r2, r3
    fd70:	336f      	adds	r3, #111	; 0x6f
    fd72:	3273      	adds	r2, #115	; 0x73
    fd74:	7011      	strb	r1, [r2, #0]
    fd76:	7018      	strb	r0, [r3, #0]
    fd78:	0a02      	lsrs	r2, r0, #8
    fd7a:	0e00      	lsrs	r0, r0, #24
    fd7c:	705a      	strb	r2, [r3, #1]
    fd7e:	709c      	strb	r4, [r3, #2]
    fd80:	70d8      	strb	r0, [r3, #3]
    fd82:	2100      	movs	r1, #0
    fd84:	4b02      	ldr	r3, [pc, #8]	; (fd90 <UpdateReceiveWindow2Parameters+0x44>)
    fd86:	2001      	movs	r0, #1
    fd88:	4798      	blx	r3
    fd8a:	bd70      	pop	{r4, r5, r6, pc}
    fd8c:	20003170 	.word	0x20003170
    fd90:	00008d09 	.word	0x00008d09

0000fd94 <ResetParametersForConfirmedTransmission>:
    fd94:	4b0a      	ldr	r3, [pc, #40]	; (fdc0 <ResetParametersForConfirmedTransmission+0x2c>)
    fd96:	001a      	movs	r2, r3
    fd98:	32fd      	adds	r2, #253	; 0xfd
    fd9a:	7812      	ldrb	r2, [r2, #0]
    fd9c:	2a01      	cmp	r2, #1
    fd9e:	d105      	bne.n	fdac <ResetParametersForConfirmedTransmission+0x18>
    fda0:	0019      	movs	r1, r3
    fda2:	200e      	movs	r0, #14
    fda4:	3184      	adds	r1, #132	; 0x84
    fda6:	780a      	ldrb	r2, [r1, #0]
    fda8:	4382      	bics	r2, r0
    fdaa:	700a      	strb	r2, [r1, #0]
    fdac:	001a      	movs	r2, r3
    fdae:	2100      	movs	r1, #0
    fdb0:	3394      	adds	r3, #148	; 0x94
    fdb2:	32e4      	adds	r2, #228	; 0xe4
    fdb4:	7011      	strb	r1, [r2, #0]
    fdb6:	781a      	ldrb	r2, [r3, #0]
    fdb8:	3101      	adds	r1, #1
    fdba:	438a      	bics	r2, r1
    fdbc:	701a      	strb	r2, [r3, #0]
    fdbe:	4770      	bx	lr
    fdc0:	20003170 	.word	0x20003170

0000fdc4 <ResetParametersForUnconfirmedTransmission>:
    fdc4:	4b07      	ldr	r3, [pc, #28]	; (fde4 <ResetParametersForUnconfirmedTransmission+0x20>)
    fdc6:	001a      	movs	r2, r3
    fdc8:	32fd      	adds	r2, #253	; 0xfd
    fdca:	7812      	ldrb	r2, [r2, #0]
    fdcc:	2a01      	cmp	r2, #1
    fdce:	d105      	bne.n	fddc <ResetParametersForUnconfirmedTransmission+0x18>
    fdd0:	0019      	movs	r1, r3
    fdd2:	200e      	movs	r0, #14
    fdd4:	3184      	adds	r1, #132	; 0x84
    fdd6:	780a      	ldrb	r2, [r1, #0]
    fdd8:	4382      	bics	r2, r0
    fdda:	700a      	strb	r2, [r1, #0]
    fddc:	2200      	movs	r2, #0
    fdde:	33e3      	adds	r3, #227	; 0xe3
    fde0:	701a      	strb	r2, [r3, #0]
    fde2:	4770      	bx	lr
    fde4:	20003170 	.word	0x20003170

0000fde8 <SetJoinFailState>:
    fde8:	b570      	push	{r4, r5, r6, lr}
    fdea:	4c15      	ldr	r4, [pc, #84]	; (fe40 <SetJoinFailState+0x58>)
    fdec:	2604      	movs	r6, #4
    fdee:	0025      	movs	r5, r4
    fdf0:	3594      	adds	r5, #148	; 0x94
    fdf2:	782a      	ldrb	r2, [r5, #0]
    fdf4:	0021      	movs	r1, r4
    fdf6:	43b2      	bics	r2, r6
    fdf8:	702a      	strb	r2, [r5, #0]
    fdfa:	22f0      	movs	r2, #240	; 0xf0
    fdfc:	3184      	adds	r1, #132	; 0x84
    fdfe:	780b      	ldrb	r3, [r1, #0]
    fe00:	4013      	ands	r3, r2
    fe02:	700b      	strb	r3, [r1, #0]
    fe04:	0023      	movs	r3, r4
    fe06:	33ff      	adds	r3, #255	; 0xff
    fe08:	7f5b      	ldrb	r3, [r3, #29]
    fe0a:	069b      	lsls	r3, r3, #26
    fe0c:	d503      	bpl.n	fe16 <SetJoinFailState+0x2e>
    fe0e:	0023      	movs	r3, r4
    fe10:	2200      	movs	r2, #0
    fe12:	3380      	adds	r3, #128	; 0x80
    fe14:	701a      	strb	r2, [r3, #0]
    fe16:	490b      	ldr	r1, [pc, #44]	; (fe44 <SetJoinFailState+0x5c>)
    fe18:	794a      	ldrb	r2, [r1, #5]
    fe1a:	790b      	ldrb	r3, [r1, #4]
    fe1c:	0212      	lsls	r2, r2, #8
    fe1e:	431a      	orrs	r2, r3
    fe20:	798b      	ldrb	r3, [r1, #6]
    fe22:	041b      	lsls	r3, r3, #16
    fe24:	431a      	orrs	r2, r3
    fe26:	79cb      	ldrb	r3, [r1, #7]
    fe28:	061b      	lsls	r3, r3, #24
    fe2a:	4313      	orrs	r3, r2
    fe2c:	d000      	beq.n	fe30 <SetJoinFailState+0x48>
    fe2e:	4798      	blx	r3
    fe30:	2300      	movs	r3, #0
    fe32:	34f9      	adds	r4, #249	; 0xf9
    fe34:	7023      	strb	r3, [r4, #0]
    fe36:	210b      	movs	r1, #11
    fe38:	4b03      	ldr	r3, [pc, #12]	; (fe48 <SetJoinFailState+0x60>)
    fe3a:	2001      	movs	r0, #1
    fe3c:	4798      	blx	r3
    fe3e:	bd70      	pop	{r4, r5, r6, pc}
    fe40:	20003170 	.word	0x20003170
    fe44:	200034cc 	.word	0x200034cc
    fe48:	00008d09 	.word	0x00008d09

0000fe4c <ExecuteRxParamSetupReq>:
    fe4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    fe4e:	b085      	sub	sp, #20
    fe50:	7805      	ldrb	r5, [r0, #0]
    fe52:	0004      	movs	r4, r0
    fe54:	1c41      	adds	r1, r0, #1
    fe56:	2204      	movs	r2, #4
    fe58:	4b36      	ldr	r3, [pc, #216]	; (ff34 <ExecuteRxParamSetupReq+0xe8>)
    fe5a:	a803      	add	r0, sp, #12
    fe5c:	4798      	blx	r3
    fe5e:	2264      	movs	r2, #100	; 0x64
    fe60:	9b03      	ldr	r3, [sp, #12]
    fe62:	a903      	add	r1, sp, #12
    fe64:	021b      	lsls	r3, r3, #8
    fe66:	0a1b      	lsrs	r3, r3, #8
    fe68:	4353      	muls	r3, r2
    fe6a:	9303      	str	r3, [sp, #12]
    fe6c:	1d23      	adds	r3, r4, #4
    fe6e:	9301      	str	r3, [sp, #4]
    fe70:	072b      	lsls	r3, r5, #28
    fe72:	0f1b      	lsrs	r3, r3, #28
    fe74:	b2da      	uxtb	r2, r3
    fe76:	9200      	str	r2, [sp, #0]
    fe78:	aa02      	add	r2, sp, #8
    fe7a:	1c96      	adds	r6, r2, #2
    fe7c:	066d      	lsls	r5, r5, #25
    fe7e:	7033      	strb	r3, [r6, #0]
    fe80:	1cd7      	adds	r7, r2, #3
    fe82:	0f6d      	lsrs	r5, r5, #29
    fe84:	2001      	movs	r0, #1
    fe86:	4b2c      	ldr	r3, [pc, #176]	; (ff38 <ExecuteRxParamSetupReq+0xec>)
    fe88:	703d      	strb	r5, [r7, #0]
    fe8a:	4798      	blx	r3
    fe8c:	4c2b      	ldr	r4, [pc, #172]	; (ff3c <ExecuteRxParamSetupReq+0xf0>)
    fe8e:	2808      	cmp	r0, #8
    fe90:	d109      	bne.n	fea6 <ExecuteRxParamSetupReq+0x5a>
    fe92:	0023      	movs	r3, r4
    fe94:	33e0      	adds	r3, #224	; 0xe0
    fe96:	781a      	ldrb	r2, [r3, #0]
    fe98:	2303      	movs	r3, #3
    fe9a:	4353      	muls	r3, r2
    fe9c:	18e3      	adds	r3, r4, r3
    fe9e:	3398      	adds	r3, #152	; 0x98
    fea0:	789a      	ldrb	r2, [r3, #2]
    fea2:	4310      	orrs	r0, r2
    fea4:	7098      	strb	r0, [r3, #2]
    fea6:	0031      	movs	r1, r6
    fea8:	200f      	movs	r0, #15
    feaa:	4e23      	ldr	r6, [pc, #140]	; (ff38 <ExecuteRxParamSetupReq+0xec>)
    feac:	47b0      	blx	r6
    feae:	2808      	cmp	r0, #8
    feb0:	d10a      	bne.n	fec8 <ExecuteRxParamSetupReq+0x7c>
    feb2:	0023      	movs	r3, r4
    feb4:	33e0      	adds	r3, #224	; 0xe0
    feb6:	781a      	ldrb	r2, [r3, #0]
    feb8:	2303      	movs	r3, #3
    feba:	4353      	muls	r3, r2
    febc:	2210      	movs	r2, #16
    febe:	18e3      	adds	r3, r4, r3
    fec0:	3398      	adds	r3, #152	; 0x98
    fec2:	7899      	ldrb	r1, [r3, #2]
    fec4:	430a      	orrs	r2, r1
    fec6:	709a      	strb	r2, [r3, #2]
    fec8:	0039      	movs	r1, r7
    feca:	2018      	movs	r0, #24
    fecc:	47b0      	blx	r6
    fece:	2808      	cmp	r0, #8
    fed0:	d10a      	bne.n	fee8 <ExecuteRxParamSetupReq+0x9c>
    fed2:	0023      	movs	r3, r4
    fed4:	33e0      	adds	r3, #224	; 0xe0
    fed6:	781a      	ldrb	r2, [r3, #0]
    fed8:	2303      	movs	r3, #3
    feda:	4353      	muls	r3, r2
    fedc:	2220      	movs	r2, #32
    fede:	18e3      	adds	r3, r4, r3
    fee0:	3398      	adds	r3, #152	; 0x98
    fee2:	7899      	ldrb	r1, [r3, #2]
    fee4:	430a      	orrs	r2, r1
    fee6:	709a      	strb	r2, [r3, #2]
    fee8:	0023      	movs	r3, r4
    feea:	33e0      	adds	r3, #224	; 0xe0
    feec:	781a      	ldrb	r2, [r3, #0]
    feee:	2303      	movs	r3, #3
    fef0:	4353      	muls	r3, r2
    fef2:	18e3      	adds	r3, r4, r3
    fef4:	3398      	adds	r3, #152	; 0x98
    fef6:	789e      	ldrb	r6, [r3, #2]
    fef8:	06f3      	lsls	r3, r6, #27
    fefa:	d518      	bpl.n	ff2e <ExecuteRxParamSetupReq+0xe2>
    fefc:	0733      	lsls	r3, r6, #28
    fefe:	d516      	bpl.n	ff2e <ExecuteRxParamSetupReq+0xe2>
    ff00:	06b6      	lsls	r6, r6, #26
    ff02:	0ff6      	lsrs	r6, r6, #31
    ff04:	2e01      	cmp	r6, #1
    ff06:	d112      	bne.n	ff2e <ExecuteRxParamSetupReq+0xe2>
    ff08:	0023      	movs	r3, r4
    ff0a:	33f7      	adds	r3, #247	; 0xf7
    ff0c:	701d      	strb	r5, [r3, #0]
    ff0e:	0031      	movs	r1, r6
    ff10:	0030      	movs	r0, r6
    ff12:	4d0b      	ldr	r5, [pc, #44]	; (ff40 <ExecuteRxParamSetupReq+0xf4>)
    ff14:	47a8      	blx	r5
    ff16:	9900      	ldr	r1, [sp, #0]
    ff18:	9803      	ldr	r0, [sp, #12]
    ff1a:	4b0a      	ldr	r3, [pc, #40]	; (ff44 <ExecuteRxParamSetupReq+0xf8>)
    ff1c:	4798      	blx	r3
    ff1e:	2340      	movs	r3, #64	; 0x40
    ff20:	3484      	adds	r4, #132	; 0x84
    ff22:	7862      	ldrb	r2, [r4, #1]
    ff24:	210b      	movs	r1, #11
    ff26:	4313      	orrs	r3, r2
    ff28:	7063      	strb	r3, [r4, #1]
    ff2a:	0030      	movs	r0, r6
    ff2c:	47a8      	blx	r5
    ff2e:	9801      	ldr	r0, [sp, #4]
    ff30:	b005      	add	sp, #20
    ff32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ff34:	0001613f 	.word	0x0001613f
    ff38:	0000c681 	.word	0x0000c681
    ff3c:	20003170 	.word	0x20003170
    ff40:	00008d09 	.word	0x00008d09
    ff44:	0000fd4d 	.word	0x0000fd4d

0000ff48 <ExecuteDutyCycle>:
    ff48:	b570      	push	{r4, r5, r6, lr}
    ff4a:	7803      	ldrb	r3, [r0, #0]
    ff4c:	1c46      	adds	r6, r0, #1
    ff4e:	2b0f      	cmp	r3, #15
    ff50:	d80f      	bhi.n	ff72 <ExecuteDutyCycle+0x2a>
    ff52:	4c09      	ldr	r4, [pc, #36]	; (ff78 <ExecuteDutyCycle+0x30>)
    ff54:	210b      	movs	r1, #11
    ff56:	0022      	movs	r2, r4
    ff58:	2000      	movs	r0, #0
    ff5a:	3298      	adds	r2, #152	; 0x98
    ff5c:	4d07      	ldr	r5, [pc, #28]	; (ff7c <ExecuteDutyCycle+0x34>)
    ff5e:	7013      	strb	r3, [r2, #0]
    ff60:	47a8      	blx	r5
    ff62:	2320      	movs	r3, #32
    ff64:	3484      	adds	r4, #132	; 0x84
    ff66:	7862      	ldrb	r2, [r4, #1]
    ff68:	210b      	movs	r1, #11
    ff6a:	4313      	orrs	r3, r2
    ff6c:	7063      	strb	r3, [r4, #1]
    ff6e:	2001      	movs	r0, #1
    ff70:	47a8      	blx	r5
    ff72:	0030      	movs	r0, r6
    ff74:	bd70      	pop	{r4, r5, r6, pc}
    ff76:	46c0      	nop			; (mov r8, r8)
    ff78:	20003170 	.word	0x20003170
    ff7c:	00008d09 	.word	0x00008d09

0000ff80 <ExecuteDlChannel>:
    ff80:	b5f0      	push	{r4, r5, r6, r7, lr}
    ff82:	b089      	sub	sp, #36	; 0x24
    ff84:	7805      	ldrb	r5, [r0, #0]
    ff86:	ab02      	add	r3, sp, #8
    ff88:	1c41      	adds	r1, r0, #1
    ff8a:	0007      	movs	r7, r0
    ff8c:	719d      	strb	r5, [r3, #6]
    ff8e:	1d9e      	adds	r6, r3, #6
    ff90:	2204      	movs	r2, #4
    ff92:	4b23      	ldr	r3, [pc, #140]	; (10020 <ExecuteDlChannel+0xa0>)
    ff94:	a805      	add	r0, sp, #20
    ff96:	4798      	blx	r3
    ff98:	9b05      	ldr	r3, [sp, #20]
    ff9a:	a904      	add	r1, sp, #16
    ff9c:	021c      	lsls	r4, r3, #8
    ff9e:	2364      	movs	r3, #100	; 0x64
    ffa0:	0a24      	lsrs	r4, r4, #8
    ffa2:	435c      	muls	r4, r3
    ffa4:	1d3b      	adds	r3, r7, #4
    ffa6:	9301      	str	r3, [sp, #4]
    ffa8:	2301      	movs	r3, #1
    ffaa:	2015      	movs	r0, #21
    ffac:	704b      	strb	r3, [r1, #1]
    ffae:	4b1d      	ldr	r3, [pc, #116]	; (10024 <ExecuteDlChannel+0xa4>)
    ffb0:	9405      	str	r4, [sp, #20]
    ffb2:	700d      	strb	r5, [r1, #0]
    ffb4:	4798      	blx	r3
    ffb6:	2808      	cmp	r0, #8
    ffb8:	d12f      	bne.n	1001a <ExecuteDlChannel+0x9a>
    ffba:	ab02      	add	r3, sp, #8
    ffbc:	1ddd      	adds	r5, r3, #7
    ffbe:	2300      	movs	r3, #0
    ffc0:	702b      	strb	r3, [r5, #0]
    ffc2:	7833      	ldrb	r3, [r6, #0]
    ffc4:	af06      	add	r7, sp, #24
    ffc6:	713b      	strb	r3, [r7, #4]
    ffc8:	002a      	movs	r2, r5
    ffca:	0031      	movs	r1, r6
    ffcc:	300e      	adds	r0, #14
    ffce:	4b16      	ldr	r3, [pc, #88]	; (10028 <ExecuteDlChannel+0xa8>)
    ffd0:	9406      	str	r4, [sp, #24]
    ffd2:	4798      	blx	r3
    ffd4:	280a      	cmp	r0, #10
    ffd6:	d00d      	beq.n	fff4 <ExecuteDlChannel+0x74>
    ffd8:	782a      	ldrb	r2, [r5, #0]
    ffda:	2a01      	cmp	r2, #1
    ffdc:	d10a      	bne.n	fff4 <ExecuteDlChannel+0x74>
    ffde:	4b13      	ldr	r3, [pc, #76]	; (1002c <ExecuteDlChannel+0xac>)
    ffe0:	0019      	movs	r1, r3
    ffe2:	31e0      	adds	r1, #224	; 0xe0
    ffe4:	7808      	ldrb	r0, [r1, #0]
    ffe6:	2103      	movs	r1, #3
    ffe8:	4341      	muls	r1, r0
    ffea:	185b      	adds	r3, r3, r1
    ffec:	3398      	adds	r3, #152	; 0x98
    ffee:	78d9      	ldrb	r1, [r3, #3]
    fff0:	430a      	orrs	r2, r1
    fff2:	70da      	strb	r2, [r3, #3]
    fff4:	0039      	movs	r1, r7
    fff6:	2033      	movs	r0, #51	; 0x33
    fff8:	4b0d      	ldr	r3, [pc, #52]	; (10030 <ExecuteDlChannel+0xb0>)
    fffa:	4798      	blx	r3
    fffc:	2808      	cmp	r0, #8
    fffe:	d10c      	bne.n	1001a <ExecuteDlChannel+0x9a>
   10000:	4b0a      	ldr	r3, [pc, #40]	; (1002c <ExecuteDlChannel+0xac>)
   10002:	001a      	movs	r2, r3
   10004:	32e0      	adds	r2, #224	; 0xe0
   10006:	7811      	ldrb	r1, [r2, #0]
   10008:	2203      	movs	r2, #3
   1000a:	434a      	muls	r2, r1
   1000c:	189b      	adds	r3, r3, r2
   1000e:	2280      	movs	r2, #128	; 0x80
   10010:	3398      	adds	r3, #152	; 0x98
   10012:	7899      	ldrb	r1, [r3, #2]
   10014:	4252      	negs	r2, r2
   10016:	430a      	orrs	r2, r1
   10018:	709a      	strb	r2, [r3, #2]
   1001a:	9801      	ldr	r0, [sp, #4]
   1001c:	b009      	add	sp, #36	; 0x24
   1001e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10020:	0001613f 	.word	0x0001613f
   10024:	0000c681 	.word	0x0000c681
   10028:	0000c665 	.word	0x0000c665
   1002c:	20003170 	.word	0x20003170
   10030:	0000c69d 	.word	0x0000c69d

00010034 <ExecuteTxParamSetup>:
   10034:	220f      	movs	r2, #15
   10036:	b513      	push	{r0, r1, r4, lr}
   10038:	7803      	ldrb	r3, [r0, #0]
   1003a:	4c0f      	ldr	r4, [pc, #60]	; (10078 <ExecuteTxParamSetup+0x44>)
   1003c:	401a      	ands	r2, r3
   1003e:	5ca2      	ldrb	r2, [r4, r2]
   10040:	2401      	movs	r4, #1
   10042:	a901      	add	r1, sp, #4
   10044:	700a      	strb	r2, [r1, #0]
   10046:	111a      	asrs	r2, r3, #4
   10048:	115b      	asrs	r3, r3, #5
   1004a:	4023      	ands	r3, r4
   1004c:	40a3      	lsls	r3, r4
   1004e:	4022      	ands	r2, r4
   10050:	4313      	orrs	r3, r2
   10052:	704b      	strb	r3, [r1, #1]
   10054:	1904      	adds	r4, r0, r4
   10056:	4b09      	ldr	r3, [pc, #36]	; (1007c <ExecuteTxParamSetup+0x48>)
   10058:	2034      	movs	r0, #52	; 0x34
   1005a:	4798      	blx	r3
   1005c:	2808      	cmp	r0, #8
   1005e:	d009      	beq.n	10074 <ExecuteTxParamSetup+0x40>
   10060:	4b07      	ldr	r3, [pc, #28]	; (10080 <ExecuteTxParamSetup+0x4c>)
   10062:	001a      	movs	r2, r3
   10064:	32e0      	adds	r2, #224	; 0xe0
   10066:	7811      	ldrb	r1, [r2, #0]
   10068:	2203      	movs	r2, #3
   1006a:	434a      	muls	r2, r1
   1006c:	189b      	adds	r3, r3, r2
   1006e:	22ff      	movs	r2, #255	; 0xff
   10070:	3399      	adds	r3, #153	; 0x99
   10072:	701a      	strb	r2, [r3, #0]
   10074:	0020      	movs	r0, r4
   10076:	bd16      	pop	{r1, r2, r4, pc}
   10078:	00018321 	.word	0x00018321
   1007c:	0000c69d 	.word	0x0000c69d
   10080:	20003170 	.word	0x20003170

00010084 <ExecuteLinkAdr>:
   10084:	220f      	movs	r2, #15
   10086:	b5f0      	push	{r4, r5, r6, r7, lr}
   10088:	0006      	movs	r6, r0
   1008a:	7803      	ldrb	r3, [r0, #0]
   1008c:	b089      	sub	sp, #36	; 0x24
   1008e:	401a      	ands	r2, r3
   10090:	a905      	add	r1, sp, #20
   10092:	700a      	strb	r2, [r1, #0]
   10094:	aa04      	add	r2, sp, #16
   10096:	1d97      	adds	r7, r2, #6
   10098:	091b      	lsrs	r3, r3, #4
   1009a:	7153      	strb	r3, [r2, #5]
   1009c:	1c41      	adds	r1, r0, #1
   1009e:	2202      	movs	r2, #2
   100a0:	0038      	movs	r0, r7
   100a2:	4b3d      	ldr	r3, [pc, #244]	; (10198 <ExecuteLinkAdr+0x114>)
   100a4:	4798      	blx	r3
   100a6:	2201      	movs	r2, #1
   100a8:	1d33      	adds	r3, r6, #4
   100aa:	9303      	str	r3, [sp, #12]
   100ac:	78f3      	ldrb	r3, [r6, #3]
   100ae:	4c3b      	ldr	r4, [pc, #236]	; (1019c <ExecuteLinkAdr+0x118>)
   100b0:	4d3b      	ldr	r5, [pc, #236]	; (101a0 <ExecuteLinkAdr+0x11c>)
   100b2:	065b      	lsls	r3, r3, #25
   100b4:	0f5b      	lsrs	r3, r3, #29
   100b6:	9300      	str	r3, [sp, #0]
   100b8:	5d63      	ldrb	r3, [r4, r5]
   100ba:	a906      	add	r1, sp, #24
   100bc:	4393      	bics	r3, r2
   100be:	1892      	adds	r2, r2, r2
   100c0:	4393      	bics	r3, r2
   100c2:	3202      	adds	r2, #2
   100c4:	4393      	bics	r3, r2
   100c6:	5563      	strb	r3, [r4, r5]
   100c8:	883b      	ldrh	r3, [r7, #0]
   100ca:	2037      	movs	r0, #55	; 0x37
   100cc:	9302      	str	r3, [sp, #8]
   100ce:	466b      	mov	r3, sp
   100d0:	891b      	ldrh	r3, [r3, #8]
   100d2:	4f34      	ldr	r7, [pc, #208]	; (101a4 <ExecuteLinkAdr+0x120>)
   100d4:	804b      	strh	r3, [r1, #2]
   100d6:	466b      	mov	r3, sp
   100d8:	781b      	ldrb	r3, [r3, #0]
   100da:	700b      	strb	r3, [r1, #0]
   100dc:	47b8      	blx	r7
   100de:	2808      	cmp	r0, #8
   100e0:	d117      	bne.n	10112 <ExecuteLinkAdr+0x8e>
   100e2:	466b      	mov	r3, sp
   100e4:	891b      	ldrh	r3, [r3, #8]
   100e6:	a907      	add	r1, sp, #28
   100e8:	800b      	strh	r3, [r1, #0]
   100ea:	466b      	mov	r3, sp
   100ec:	781b      	ldrb	r3, [r3, #0]
   100ee:	3014      	adds	r0, #20
   100f0:	708b      	strb	r3, [r1, #2]
   100f2:	4b2d      	ldr	r3, [pc, #180]	; (101a8 <ExecuteLinkAdr+0x124>)
   100f4:	4798      	blx	r3
   100f6:	2201      	movs	r2, #1
   100f8:	5d63      	ldrb	r3, [r4, r5]
   100fa:	2010      	movs	r0, #16
   100fc:	4313      	orrs	r3, r2
   100fe:	5563      	strb	r3, [r4, r5]
   10100:	ab04      	add	r3, sp, #16
   10102:	1d59      	adds	r1, r3, #5
   10104:	47b8      	blx	r7
   10106:	2808      	cmp	r0, #8
   10108:	d103      	bne.n	10112 <ExecuteLinkAdr+0x8e>
   1010a:	2202      	movs	r2, #2
   1010c:	5d63      	ldrb	r3, [r4, r5]
   1010e:	4313      	orrs	r3, r2
   10110:	5563      	strb	r3, [r4, r5]
   10112:	af05      	add	r7, sp, #20
   10114:	4b23      	ldr	r3, [pc, #140]	; (101a4 <ExecuteLinkAdr+0x120>)
   10116:	0039      	movs	r1, r7
   10118:	201d      	movs	r0, #29
   1011a:	4798      	blx	r3
   1011c:	4b1f      	ldr	r3, [pc, #124]	; (1019c <ExecuteLinkAdr+0x118>)
   1011e:	2808      	cmp	r0, #8
   10120:	d103      	bne.n	1012a <ExecuteLinkAdr+0xa6>
   10122:	2204      	movs	r2, #4
   10124:	5d59      	ldrb	r1, [r3, r5]
   10126:	430a      	orrs	r2, r1
   10128:	555a      	strb	r2, [r3, r5]
   1012a:	5d5a      	ldrb	r2, [r3, r5]
   1012c:	43d2      	mvns	r2, r2
   1012e:	0752      	lsls	r2, r2, #29
   10130:	d12a      	bne.n	10188 <ExecuteLinkAdr+0x104>
   10132:	4669      	mov	r1, sp
   10134:	4a1d      	ldr	r2, [pc, #116]	; (101ac <ExecuteLinkAdr+0x128>)
   10136:	7a09      	ldrb	r1, [r1, #8]
   10138:	5499      	strb	r1, [r3, r2]
   1013a:	9a02      	ldr	r2, [sp, #8]
   1013c:	491b      	ldr	r1, [pc, #108]	; (101ac <ExecuteLinkAdr+0x128>)
   1013e:	0a12      	lsrs	r2, r2, #8
   10140:	1859      	adds	r1, r3, r1
   10142:	704a      	strb	r2, [r1, #1]
   10144:	aa04      	add	r2, sp, #16
   10146:	3205      	adds	r2, #5
   10148:	7812      	ldrb	r2, [r2, #0]
   1014a:	2a0f      	cmp	r2, #15
   1014c:	d101      	bne.n	10152 <ExecuteLinkAdr+0xce>
   1014e:	33e7      	adds	r3, #231	; 0xe7
   10150:	781a      	ldrb	r2, [r3, #0]
   10152:	2389      	movs	r3, #137	; 0x89
   10154:	2170      	movs	r1, #112	; 0x70
   10156:	2070      	movs	r0, #112	; 0x70
   10158:	009b      	lsls	r3, r3, #2
   1015a:	54e2      	strb	r2, [r4, r3]
   1015c:	78f3      	ldrb	r3, [r6, #3]
   1015e:	4a14      	ldr	r2, [pc, #80]	; (101b0 <ExecuteLinkAdr+0x12c>)
   10160:	4019      	ands	r1, r3
   10162:	5ca3      	ldrb	r3, [r4, r2]
   10164:	4383      	bics	r3, r0
   10166:	430b      	orrs	r3, r1
   10168:	54a3      	strb	r3, [r4, r2]
   1016a:	78f1      	ldrb	r1, [r6, #3]
   1016c:	3861      	subs	r0, #97	; 0x61
   1016e:	b2db      	uxtb	r3, r3
   10170:	4001      	ands	r1, r0
   10172:	4383      	bics	r3, r0
   10174:	430b      	orrs	r3, r1
   10176:	54a3      	strb	r3, [r4, r2]
   10178:	783b      	ldrb	r3, [r7, #0]
   1017a:	4283      	cmp	r3, r0
   1017c:	d101      	bne.n	10182 <ExecuteLinkAdr+0xfe>
   1017e:	34e9      	adds	r4, #233	; 0xe9
   10180:	7823      	ldrb	r3, [r4, #0]
   10182:	4a0c      	ldr	r2, [pc, #48]	; (101b4 <ExecuteLinkAdr+0x130>)
   10184:	4905      	ldr	r1, [pc, #20]	; (1019c <ExecuteLinkAdr+0x118>)
   10186:	548b      	strb	r3, [r1, r2]
   10188:	4904      	ldr	r1, [pc, #16]	; (1019c <ExecuteLinkAdr+0x118>)
   1018a:	4a0b      	ldr	r2, [pc, #44]	; (101b8 <ExecuteLinkAdr+0x134>)
   1018c:	9803      	ldr	r0, [sp, #12]
   1018e:	5c8b      	ldrb	r3, [r1, r2]
   10190:	3301      	adds	r3, #1
   10192:	548b      	strb	r3, [r1, r2]
   10194:	b009      	add	sp, #36	; 0x24
   10196:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10198:	0001613f 	.word	0x0001613f
   1019c:	20003170 	.word	0x20003170
   101a0:	00000223 	.word	0x00000223
   101a4:	0000c681 	.word	0x0000c681
   101a8:	0000c69d 	.word	0x0000c69d
   101ac:	00000227 	.word	0x00000227
   101b0:	00000229 	.word	0x00000229
   101b4:	00000225 	.word	0x00000225
   101b8:	00000226 	.word	0x00000226

000101bc <ExecuteDevTimeAns>:
   101bc:	b510      	push	{r4, lr}
   101be:	0001      	movs	r1, r0
   101c0:	0004      	movs	r4, r0
   101c2:	2204      	movs	r2, #4
   101c4:	4b04      	ldr	r3, [pc, #16]	; (101d8 <ExecuteDevTimeAns+0x1c>)
   101c6:	4805      	ldr	r0, [pc, #20]	; (101dc <ExecuteDevTimeAns+0x20>)
   101c8:	4798      	blx	r3
   101ca:	238e      	movs	r3, #142	; 0x8e
   101cc:	7921      	ldrb	r1, [r4, #4]
   101ce:	4a04      	ldr	r2, [pc, #16]	; (101e0 <ExecuteDevTimeAns+0x24>)
   101d0:	009b      	lsls	r3, r3, #2
   101d2:	1d60      	adds	r0, r4, #5
   101d4:	54d1      	strb	r1, [r2, r3]
   101d6:	bd10      	pop	{r4, pc}
   101d8:	0001613f 	.word	0x0001613f
   101dc:	200033a4 	.word	0x200033a4
   101e0:	20003170 	.word	0x20003170

000101e4 <PrepareJoinRequestFrame>:
   101e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   101e6:	2210      	movs	r2, #16
   101e8:	4d22      	ldr	r5, [pc, #136]	; (10274 <PrepareJoinRequestFrame+0x90>)
   101ea:	4b23      	ldr	r3, [pc, #140]	; (10278 <PrepareJoinRequestFrame+0x94>)
   101ec:	32ff      	adds	r2, #255	; 0xff
   101ee:	2100      	movs	r1, #0
   101f0:	0028      	movs	r0, r5
   101f2:	4798      	blx	r3
   101f4:	2300      	movs	r3, #0
   101f6:	4c21      	ldr	r4, [pc, #132]	; (1027c <PrepareJoinRequestFrame+0x98>)
   101f8:	702b      	strb	r3, [r5, #0]
   101fa:	4b21      	ldr	r3, [pc, #132]	; (10280 <PrepareJoinRequestFrame+0x9c>)
   101fc:	5ce3      	ldrb	r3, [r4, r3]
   101fe:	2b00      	cmp	r3, #0
   10200:	d006      	beq.n	10210 <PrepareJoinRequestFrame+0x2c>
   10202:	4920      	ldr	r1, [pc, #128]	; (10284 <PrepareJoinRequestFrame+0xa0>)
   10204:	2006      	movs	r0, #6
   10206:	4e20      	ldr	r6, [pc, #128]	; (10288 <PrepareJoinRequestFrame+0xa4>)
   10208:	47b0      	blx	r6
   1020a:	4920      	ldr	r1, [pc, #128]	; (1028c <PrepareJoinRequestFrame+0xa8>)
   1020c:	2007      	movs	r0, #7
   1020e:	47b0      	blx	r6
   10210:	2300      	movs	r3, #0
   10212:	205c      	movs	r0, #92	; 0x5c
   10214:	1ac1      	subs	r1, r0, r3
   10216:	5c61      	ldrb	r1, [r4, r1]
   10218:	18ea      	adds	r2, r5, r3
   1021a:	3301      	adds	r3, #1
   1021c:	7051      	strb	r1, [r2, #1]
   1021e:	2b08      	cmp	r3, #8
   10220:	d1f8      	bne.n	10214 <PrepareJoinRequestFrame+0x30>
   10222:	2300      	movs	r3, #0
   10224:	2064      	movs	r0, #100	; 0x64
   10226:	1ac1      	subs	r1, r0, r3
   10228:	5c61      	ldrb	r1, [r4, r1]
   1022a:	18ea      	adds	r2, r5, r3
   1022c:	3301      	adds	r3, #1
   1022e:	7251      	strb	r1, [r2, #9]
   10230:	2b08      	cmp	r3, #8
   10232:	d1f8      	bne.n	10226 <PrepareJoinRequestFrame+0x42>
   10234:	4b16      	ldr	r3, [pc, #88]	; (10290 <PrepareJoinRequestFrame+0xac>)
   10236:	4798      	blx	r3
   10238:	4b16      	ldr	r3, [pc, #88]	; (10294 <PrepareJoinRequestFrame+0xb0>)
   1023a:	4917      	ldr	r1, [pc, #92]	; (10298 <PrepareJoinRequestFrame+0xb4>)
   1023c:	4798      	blx	r3
   1023e:	34cc      	adds	r4, #204	; 0xcc
   10240:	8021      	strh	r1, [r4, #0]
   10242:	2202      	movs	r2, #2
   10244:	0021      	movs	r1, r4
   10246:	4815      	ldr	r0, [pc, #84]	; (1029c <PrepareJoinRequestFrame+0xb8>)
   10248:	4c15      	ldr	r4, [pc, #84]	; (102a0 <PrepareJoinRequestFrame+0xbc>)
   1024a:	47a0      	blx	r4
   1024c:	2313      	movs	r3, #19
   1024e:	4e15      	ldr	r6, [pc, #84]	; (102a4 <PrepareJoinRequestFrame+0xc0>)
   10250:	9300      	str	r3, [sp, #0]
   10252:	0032      	movs	r2, r6
   10254:	002b      	movs	r3, r5
   10256:	2100      	movs	r1, #0
   10258:	4d13      	ldr	r5, [pc, #76]	; (102a8 <PrepareJoinRequestFrame+0xc4>)
   1025a:	4814      	ldr	r0, [pc, #80]	; (102ac <PrepareJoinRequestFrame+0xc8>)
   1025c:	47a8      	blx	r5
   1025e:	0031      	movs	r1, r6
   10260:	2204      	movs	r2, #4
   10262:	a803      	add	r0, sp, #12
   10264:	47a0      	blx	r4
   10266:	2204      	movs	r2, #4
   10268:	a903      	add	r1, sp, #12
   1026a:	4811      	ldr	r0, [pc, #68]	; (102b0 <PrepareJoinRequestFrame+0xcc>)
   1026c:	47a0      	blx	r4
   1026e:	2017      	movs	r0, #23
   10270:	b004      	add	sp, #16
   10272:	bd70      	pop	{r4, r5, r6, pc}
   10274:	200033b8 	.word	0x200033b8
   10278:	00016151 	.word	0x00016151
   1027c:	20003170 	.word	0x20003170
   10280:	0000022d 	.word	0x0000022d
   10284:	200031c5 	.word	0x200031c5
   10288:	0000715d 	.word	0x0000715d
   1028c:	200031cd 	.word	0x200031cd
   10290:	00016885 	.word	0x00016885
   10294:	000131bd 	.word	0x000131bd
   10298:	0000ffff 	.word	0x0000ffff
   1029c:	200033c9 	.word	0x200033c9
   102a0:	0001613f 	.word	0x0001613f
   102a4:	20001e9d 	.word	0x20001e9d
   102a8:	00007161 	.word	0x00007161
   102ac:	200031b5 	.word	0x200031b5
   102b0:	200033cb 	.word	0x200033cb

000102b4 <ConfigureRadioRx>:
   102b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   102b6:	b087      	sub	sp, #28
   102b8:	466b      	mov	r3, sp
   102ba:	2600      	movs	r6, #0
   102bc:	1ddc      	adds	r4, r3, #7
   102be:	71d8      	strb	r0, [r3, #7]
   102c0:	729e      	strb	r6, [r3, #10]
   102c2:	466a      	mov	r2, sp
   102c4:	2301      	movs	r3, #1
   102c6:	72d3      	strb	r3, [r2, #11]
   102c8:	2215      	movs	r2, #21
   102ca:	ad03      	add	r5, sp, #12
   102cc:	4f11      	ldr	r7, [pc, #68]	; (10314 <ConfigureRadioRx+0x60>)
   102ce:	9100      	str	r1, [sp, #0]
   102d0:	446a      	add	r2, sp
   102d2:	0021      	movs	r1, r4
   102d4:	2023      	movs	r0, #35	; 0x23
   102d6:	80ae      	strh	r6, [r5, #4]
   102d8:	47b8      	blx	r7
   102da:	2216      	movs	r2, #22
   102dc:	0021      	movs	r1, r4
   102de:	446a      	add	r2, sp
   102e0:	2024      	movs	r0, #36	; 0x24
   102e2:	47b8      	blx	r7
   102e4:	2217      	movs	r2, #23
   102e6:	0021      	movs	r1, r4
   102e8:	446a      	add	r2, sp
   102ea:	2025      	movs	r0, #37	; 0x25
   102ec:	47b8      	blx	r7
   102ee:	9b00      	ldr	r3, [sp, #0]
   102f0:	0028      	movs	r0, r5
   102f2:	9303      	str	r3, [sp, #12]
   102f4:	4b08      	ldr	r3, [pc, #32]	; (10318 <ConfigureRadioRx+0x64>)
   102f6:	80ae      	strh	r6, [r5, #4]
   102f8:	4798      	blx	r3
   102fa:	230a      	movs	r3, #10
   102fc:	446b      	add	r3, sp
   102fe:	0019      	movs	r1, r3
   10300:	4c06      	ldr	r4, [pc, #24]	; (1031c <ConfigureRadioRx+0x68>)
   10302:	2014      	movs	r0, #20
   10304:	47a0      	blx	r4
   10306:	230b      	movs	r3, #11
   10308:	446b      	add	r3, sp
   1030a:	0019      	movs	r1, r3
   1030c:	2006      	movs	r0, #6
   1030e:	47a0      	blx	r4
   10310:	b007      	add	sp, #28
   10312:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10314:	0000c665 	.word	0x0000c665
   10318:	0000f921 	.word	0x0000f921
   1031c:	0000dcad 	.word	0x0000dcad

00010320 <ConfigureRadioTx>:
   10320:	b5f0      	push	{r4, r5, r6, r7, lr}
   10322:	2517      	movs	r5, #23
   10324:	2300      	movs	r3, #0
   10326:	2616      	movs	r6, #22
   10328:	2701      	movs	r7, #1
   1032a:	b087      	sub	sp, #28
   1032c:	ac01      	add	r4, sp, #4
   1032e:	446d      	add	r5, sp
   10330:	9001      	str	r0, [sp, #4]
   10332:	702b      	strb	r3, [r5, #0]
   10334:	0020      	movs	r0, r4
   10336:	4b10      	ldr	r3, [pc, #64]	; (10378 <ConfigureRadioTx+0x58>)
   10338:	446e      	add	r6, sp
   1033a:	9102      	str	r1, [sp, #8]
   1033c:	9203      	str	r2, [sp, #12]
   1033e:	7037      	strb	r7, [r6, #0]
   10340:	4798      	blx	r3
   10342:	79e3      	ldrb	r3, [r4, #7]
   10344:	4c0d      	ldr	r4, [pc, #52]	; (1037c <ConfigureRadioTx+0x5c>)
   10346:	2b00      	cmp	r3, #0
   10348:	d00a      	beq.n	10360 <ConfigureRadioTx+0x40>
   1034a:	4b0d      	ldr	r3, [pc, #52]	; (10380 <ConfigureRadioTx+0x60>)
   1034c:	4a0d      	ldr	r2, [pc, #52]	; (10384 <ConfigureRadioTx+0x64>)
   1034e:	490e      	ldr	r1, [pc, #56]	; (10388 <ConfigureRadioTx+0x68>)
   10350:	54d7      	strb	r7, [r2, r3]
   10352:	200b      	movs	r0, #11
   10354:	4b0d      	ldr	r3, [pc, #52]	; (1038c <ConfigureRadioTx+0x6c>)
   10356:	4798      	blx	r3
   10358:	210a      	movs	r1, #10
   1035a:	200b      	movs	r0, #11
   1035c:	4469      	add	r1, sp
   1035e:	47a0      	blx	r4
   10360:	a903      	add	r1, sp, #12
   10362:	2004      	movs	r0, #4
   10364:	47a0      	blx	r4
   10366:	0031      	movs	r1, r6
   10368:	2014      	movs	r0, #20
   1036a:	47a0      	blx	r4
   1036c:	0029      	movs	r1, r5
   1036e:	2006      	movs	r0, #6
   10370:	47a0      	blx	r4
   10372:	b007      	add	sp, #28
   10374:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10376:	46c0      	nop			; (mov r8, r8)
   10378:	0000f921 	.word	0x0000f921
   1037c:	0000dcad 	.word	0x0000dcad
   10380:	00000222 	.word	0x00000222
   10384:	20003170 	.word	0x20003170
   10388:	20003391 	.word	0x20003391
   1038c:	0000dbbd 	.word	0x0000dbbd

00010390 <LorawanGetChAndInitiateRadioTransmit>:
   10390:	2301      	movs	r3, #1
   10392:	b530      	push	{r4, r5, lr}
   10394:	4c46      	ldr	r4, [pc, #280]	; (104b0 <LorawanGetChAndInitiateRadioTransmit+0x120>)
   10396:	b089      	sub	sp, #36	; 0x24
   10398:	a902      	add	r1, sp, #8
   1039a:	700b      	strb	r3, [r1, #0]
   1039c:	0023      	movs	r3, r4
   1039e:	33e9      	adds	r3, #233	; 0xe9
   103a0:	781b      	ldrb	r3, [r3, #0]
   103a2:	704b      	strb	r3, [r1, #1]
   103a4:	0023      	movs	r3, r4
   103a6:	33e7      	adds	r3, #231	; 0xe7
   103a8:	781b      	ldrb	r3, [r3, #0]
   103aa:	708b      	strb	r3, [r1, #2]
   103ac:	0023      	movs	r3, r4
   103ae:	33fd      	adds	r3, #253	; 0xfd
   103b0:	781b      	ldrb	r3, [r3, #0]
   103b2:	2b01      	cmp	r3, #1
   103b4:	d108      	bne.n	103c8 <LorawanGetChAndInitiateRadioTransmit+0x38>
   103b6:	0020      	movs	r0, r4
   103b8:	220e      	movs	r2, #14
   103ba:	3084      	adds	r0, #132	; 0x84
   103bc:	7803      	ldrb	r3, [r0, #0]
   103be:	4393      	bics	r3, r2
   103c0:	001a      	movs	r2, r3
   103c2:	230c      	movs	r3, #12
   103c4:	4313      	orrs	r3, r2
   103c6:	7003      	strb	r3, [r0, #0]
   103c8:	aa05      	add	r2, sp, #20
   103ca:	202e      	movs	r0, #46	; 0x2e
   103cc:	4d39      	ldr	r5, [pc, #228]	; (104b4 <LorawanGetChAndInitiateRadioTransmit+0x124>)
   103ce:	47a8      	blx	r5
   103d0:	0023      	movs	r3, r4
   103d2:	2808      	cmp	r0, #8
   103d4:	d135      	bne.n	10442 <LorawanGetChAndInitiateRadioTransmit+0xb2>
   103d6:	33fd      	adds	r3, #253	; 0xfd
   103d8:	781b      	ldrb	r3, [r3, #0]
   103da:	ad03      	add	r5, sp, #12
   103dc:	2b04      	cmp	r3, #4
   103de:	d108      	bne.n	103f2 <LorawanGetChAndInitiateRadioTransmit+0x62>
   103e0:	2390      	movs	r3, #144	; 0x90
   103e2:	2200      	movs	r2, #0
   103e4:	009b      	lsls	r3, r3, #2
   103e6:	54e2      	strb	r2, [r4, r3]
   103e8:	2301      	movs	r3, #1
   103ea:	0028      	movs	r0, r5
   103ec:	702b      	strb	r3, [r5, #0]
   103ee:	4b32      	ldr	r3, [pc, #200]	; (104b8 <LorawanGetChAndInitiateRadioTransmit+0x128>)
   103f0:	4798      	blx	r3
   103f2:	9805      	ldr	r0, [sp, #20]
   103f4:	4b31      	ldr	r3, [pc, #196]	; (104bc <LorawanGetChAndInitiateRadioTransmit+0x12c>)
   103f6:	9906      	ldr	r1, [sp, #24]
   103f8:	9a07      	ldr	r2, [sp, #28]
   103fa:	4798      	blx	r3
   103fc:	0023      	movs	r3, r4
   103fe:	33ce      	adds	r3, #206	; 0xce
   10400:	881b      	ldrh	r3, [r3, #0]
   10402:	0028      	movs	r0, r5
   10404:	702b      	strb	r3, [r5, #0]
   10406:	4b2e      	ldr	r3, [pc, #184]	; (104c0 <LorawanGetChAndInitiateRadioTransmit+0x130>)
   10408:	606b      	str	r3, [r5, #4]
   1040a:	4b2e      	ldr	r3, [pc, #184]	; (104c4 <LorawanGetChAndInitiateRadioTransmit+0x134>)
   1040c:	4798      	blx	r3
   1040e:	2800      	cmp	r0, #0
   10410:	d109      	bne.n	10426 <LorawanGetChAndInitiateRadioTransmit+0x96>
   10412:	220e      	movs	r2, #14
   10414:	3484      	adds	r4, #132	; 0x84
   10416:	7823      	ldrb	r3, [r4, #0]
   10418:	4393      	bics	r3, r2
   1041a:	001a      	movs	r2, r3
   1041c:	2302      	movs	r3, #2
   1041e:	4313      	orrs	r3, r2
   10420:	7023      	strb	r3, [r4, #0]
   10422:	b009      	add	sp, #36	; 0x24
   10424:	bd30      	pop	{r4, r5, pc}
   10426:	2200      	movs	r2, #0
   10428:	4b27      	ldr	r3, [pc, #156]	; (104c8 <LorawanGetChAndInitiateRadioTransmit+0x138>)
   1042a:	4928      	ldr	r1, [pc, #160]	; (104cc <LorawanGetChAndInitiateRadioTransmit+0x13c>)
   1042c:	5ce3      	ldrb	r3, [r4, r3]
   1042e:	34fc      	adds	r4, #252	; 0xfc
   10430:	4359      	muls	r1, r3
   10432:	4b27      	ldr	r3, [pc, #156]	; (104d0 <LorawanGetChAndInitiateRadioTransmit+0x140>)
   10434:	7820      	ldrb	r0, [r4, #0]
   10436:	18c9      	adds	r1, r1, r3
   10438:	4b26      	ldr	r3, [pc, #152]	; (104d4 <LorawanGetChAndInitiateRadioTransmit+0x144>)
   1043a:	9200      	str	r2, [sp, #0]
   1043c:	4c26      	ldr	r4, [pc, #152]	; (104d8 <LorawanGetChAndInitiateRadioTransmit+0x148>)
   1043e:	47a0      	blx	r4
   10440:	e7ef      	b.n	10422 <LorawanGetChAndInitiateRadioTransmit+0x92>
   10442:	33ff      	adds	r3, #255	; 0xff
   10444:	7f5b      	ldrb	r3, [r3, #29]
   10446:	079a      	lsls	r2, r3, #30
   10448:	d515      	bpl.n	10476 <LorawanGetChAndInitiateRadioTransmit+0xe6>
   1044a:	aa03      	add	r2, sp, #12
   1044c:	4923      	ldr	r1, [pc, #140]	; (104dc <LorawanGetChAndInitiateRadioTransmit+0x14c>)
   1044e:	2026      	movs	r0, #38	; 0x26
   10450:	47a8      	blx	r5
   10452:	9b03      	ldr	r3, [sp, #12]
   10454:	1c5a      	adds	r2, r3, #1
   10456:	d001      	beq.n	1045c <LorawanGetChAndInitiateRadioTransmit+0xcc>
   10458:	3314      	adds	r3, #20
   1045a:	9303      	str	r3, [sp, #12]
   1045c:	21fa      	movs	r1, #250	; 0xfa
   1045e:	4b1a      	ldr	r3, [pc, #104]	; (104c8 <LorawanGetChAndInitiateRadioTransmit+0x138>)
   10460:	9a03      	ldr	r2, [sp, #12]
   10462:	5ce3      	ldrb	r3, [r4, r3]
   10464:	0089      	lsls	r1, r1, #2
   10466:	1ad3      	subs	r3, r2, r3
   10468:	2200      	movs	r2, #0
   1046a:	4359      	muls	r1, r3
   1046c:	34f2      	adds	r4, #242	; 0xf2
   1046e:	7820      	ldrb	r0, [r4, #0]
   10470:	9200      	str	r2, [sp, #0]
   10472:	4b1b      	ldr	r3, [pc, #108]	; (104e0 <LorawanGetChAndInitiateRadioTransmit+0x150>)
   10474:	e7e2      	b.n	1043c <LorawanGetChAndInitiateRadioTransmit+0xac>
   10476:	075b      	lsls	r3, r3, #29
   10478:	d508      	bpl.n	1048c <LorawanGetChAndInitiateRadioTransmit+0xfc>
   1047a:	aa03      	add	r2, sp, #12
   1047c:	4917      	ldr	r1, [pc, #92]	; (104dc <LorawanGetChAndInitiateRadioTransmit+0x14c>)
   1047e:	2032      	movs	r0, #50	; 0x32
   10480:	47a8      	blx	r5
   10482:	9b03      	ldr	r3, [sp, #12]
   10484:	1c5a      	adds	r2, r3, #1
   10486:	d0e9      	beq.n	1045c <LorawanGetChAndInitiateRadioTransmit+0xcc>
   10488:	3301      	adds	r3, #1
   1048a:	e7e6      	b.n	1045a <LorawanGetChAndInitiateRadioTransmit+0xca>
   1048c:	0023      	movs	r3, r4
   1048e:	2201      	movs	r2, #1
   10490:	3394      	adds	r3, #148	; 0x94
   10492:	781b      	ldrb	r3, [r3, #0]
   10494:	401a      	ands	r2, r3
   10496:	d108      	bne.n	104aa <LorawanGetChAndInitiateRadioTransmit+0x11a>
   10498:	4b0b      	ldr	r3, [pc, #44]	; (104c8 <LorawanGetChAndInitiateRadioTransmit+0x138>)
   1049a:	490c      	ldr	r1, [pc, #48]	; (104cc <LorawanGetChAndInitiateRadioTransmit+0x13c>)
   1049c:	5ce3      	ldrb	r3, [r4, r3]
   1049e:	34f2      	adds	r4, #242	; 0xf2
   104a0:	4359      	muls	r1, r3
   104a2:	4b0b      	ldr	r3, [pc, #44]	; (104d0 <LorawanGetChAndInitiateRadioTransmit+0x140>)
   104a4:	7820      	ldrb	r0, [r4, #0]
   104a6:	18c9      	adds	r1, r1, r3
   104a8:	e7e2      	b.n	10470 <LorawanGetChAndInitiateRadioTransmit+0xe0>
   104aa:	4b0e      	ldr	r3, [pc, #56]	; (104e4 <LorawanGetChAndInitiateRadioTransmit+0x154>)
   104ac:	4798      	blx	r3
   104ae:	e7b8      	b.n	10422 <LorawanGetChAndInitiateRadioTransmit+0x92>
   104b0:	20003170 	.word	0x20003170
   104b4:	0000c665 	.word	0x0000c665
   104b8:	0000eeb9 	.word	0x0000eeb9
   104bc:	00010321 	.word	0x00010321
   104c0:	200033c8 	.word	0x200033c8
   104c4:	0000e5dd 	.word	0x0000e5dd
   104c8:	0000022b 	.word	0x0000022b
   104cc:	fffffc18 	.word	0xfffffc18
   104d0:	001e8480 	.word	0x001e8480
   104d4:	000104e9 	.word	0x000104e9
   104d8:	0000cbad 	.word	0x0000cbad
   104dc:	20003257 	.word	0x20003257
   104e0:	000105a1 	.word	0x000105a1
   104e4:	0000fcf9 	.word	0x0000fcf9

000104e8 <TransmissionErrorCallback>:
   104e8:	b530      	push	{r4, r5, lr}
   104ea:	4c22      	ldr	r4, [pc, #136]	; (10574 <TransmissionErrorCallback+0x8c>)
   104ec:	2501      	movs	r5, #1
   104ee:	0023      	movs	r3, r4
   104f0:	b08b      	sub	sp, #44	; 0x2c
   104f2:	a903      	add	r1, sp, #12
   104f4:	700d      	strb	r5, [r1, #0]
   104f6:	33e9      	adds	r3, #233	; 0xe9
   104f8:	781b      	ldrb	r3, [r3, #0]
   104fa:	aa07      	add	r2, sp, #28
   104fc:	704b      	strb	r3, [r1, #1]
   104fe:	0023      	movs	r3, r4
   10500:	33e7      	adds	r3, #231	; 0xe7
   10502:	781b      	ldrb	r3, [r3, #0]
   10504:	202e      	movs	r0, #46	; 0x2e
   10506:	708b      	strb	r3, [r1, #2]
   10508:	4b1b      	ldr	r3, [pc, #108]	; (10578 <TransmissionErrorCallback+0x90>)
   1050a:	4798      	blx	r3
   1050c:	2808      	cmp	r0, #8
   1050e:	d121      	bne.n	10554 <TransmissionErrorCallback+0x6c>
   10510:	a804      	add	r0, sp, #16
   10512:	4b1a      	ldr	r3, [pc, #104]	; (1057c <TransmissionErrorCallback+0x94>)
   10514:	7005      	strb	r5, [r0, #0]
   10516:	4798      	blx	r3
   10518:	9807      	ldr	r0, [sp, #28]
   1051a:	4b19      	ldr	r3, [pc, #100]	; (10580 <TransmissionErrorCallback+0x98>)
   1051c:	9908      	ldr	r1, [sp, #32]
   1051e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10520:	4798      	blx	r3
   10522:	0023      	movs	r3, r4
   10524:	33ce      	adds	r3, #206	; 0xce
   10526:	881b      	ldrh	r3, [r3, #0]
   10528:	a805      	add	r0, sp, #20
   1052a:	7003      	strb	r3, [r0, #0]
   1052c:	4b15      	ldr	r3, [pc, #84]	; (10584 <TransmissionErrorCallback+0x9c>)
   1052e:	6043      	str	r3, [r0, #4]
   10530:	4b15      	ldr	r3, [pc, #84]	; (10588 <TransmissionErrorCallback+0xa0>)
   10532:	4798      	blx	r3
   10534:	2800      	cmp	r0, #0
   10536:	d01a      	beq.n	1056e <TransmissionErrorCallback+0x86>
   10538:	0023      	movs	r3, r4
   1053a:	33fd      	adds	r3, #253	; 0xfd
   1053c:	781b      	ldrb	r3, [r3, #0]
   1053e:	42ab      	cmp	r3, r5
   10540:	d108      	bne.n	10554 <TransmissionErrorCallback+0x6c>
   10542:	0021      	movs	r1, r4
   10544:	220e      	movs	r2, #14
   10546:	3184      	adds	r1, #132	; 0x84
   10548:	780b      	ldrb	r3, [r1, #0]
   1054a:	4393      	bics	r3, r2
   1054c:	001a      	movs	r2, r3
   1054e:	230c      	movs	r3, #12
   10550:	4313      	orrs	r3, r2
   10552:	700b      	strb	r3, [r1, #0]
   10554:	2200      	movs	r2, #0
   10556:	4b0d      	ldr	r3, [pc, #52]	; (1058c <TransmissionErrorCallback+0xa4>)
   10558:	490d      	ldr	r1, [pc, #52]	; (10590 <TransmissionErrorCallback+0xa8>)
   1055a:	5ce3      	ldrb	r3, [r4, r3]
   1055c:	34fc      	adds	r4, #252	; 0xfc
   1055e:	4359      	muls	r1, r3
   10560:	4b0c      	ldr	r3, [pc, #48]	; (10594 <TransmissionErrorCallback+0xac>)
   10562:	7820      	ldrb	r0, [r4, #0]
   10564:	18c9      	adds	r1, r1, r3
   10566:	9200      	str	r2, [sp, #0]
   10568:	4b0b      	ldr	r3, [pc, #44]	; (10598 <TransmissionErrorCallback+0xb0>)
   1056a:	4c0c      	ldr	r4, [pc, #48]	; (1059c <TransmissionErrorCallback+0xb4>)
   1056c:	47a0      	blx	r4
   1056e:	b00b      	add	sp, #44	; 0x2c
   10570:	bd30      	pop	{r4, r5, pc}
   10572:	46c0      	nop			; (mov r8, r8)
   10574:	20003170 	.word	0x20003170
   10578:	0000c665 	.word	0x0000c665
   1057c:	0000eeb9 	.word	0x0000eeb9
   10580:	00010321 	.word	0x00010321
   10584:	200033c8 	.word	0x200033c8
   10588:	0000e5dd 	.word	0x0000e5dd
   1058c:	0000022b 	.word	0x0000022b
   10590:	fffffc18 	.word	0xfffffc18
   10594:	001e8480 	.word	0x001e8480
   10598:	000104e9 	.word	0x000104e9
   1059c:	0000cbad 	.word	0x0000cbad

000105a0 <UnconfirmedTransmissionCallback>:
   105a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   105a2:	4c3a      	ldr	r4, [pc, #232]	; (1068c <UnconfirmedTransmissionCallback+0xec>)
   105a4:	b08b      	sub	sp, #44	; 0x2c
   105a6:	0023      	movs	r3, r4
   105a8:	33ce      	adds	r3, #206	; 0xce
   105aa:	881b      	ldrh	r3, [r3, #0]
   105ac:	af05      	add	r7, sp, #20
   105ae:	703b      	strb	r3, [r7, #0]
   105b0:	4b37      	ldr	r3, [pc, #220]	; (10690 <UnconfirmedTransmissionCallback+0xf0>)
   105b2:	a903      	add	r1, sp, #12
   105b4:	9306      	str	r3, [sp, #24]
   105b6:	2301      	movs	r3, #1
   105b8:	700b      	strb	r3, [r1, #0]
   105ba:	0023      	movs	r3, r4
   105bc:	0026      	movs	r6, r4
   105be:	33e9      	adds	r3, #233	; 0xe9
   105c0:	781b      	ldrb	r3, [r3, #0]
   105c2:	36e7      	adds	r6, #231	; 0xe7
   105c4:	704b      	strb	r3, [r1, #1]
   105c6:	7833      	ldrb	r3, [r6, #0]
   105c8:	aa07      	add	r2, sp, #28
   105ca:	202e      	movs	r0, #46	; 0x2e
   105cc:	4d31      	ldr	r5, [pc, #196]	; (10694 <UnconfirmedTransmissionCallback+0xf4>)
   105ce:	708b      	strb	r3, [r1, #2]
   105d0:	47a8      	blx	r5
   105d2:	2808      	cmp	r0, #8
   105d4:	d12b      	bne.n	1062e <UnconfirmedTransmissionCallback+0x8e>
   105d6:	2301      	movs	r3, #1
   105d8:	a804      	add	r0, sp, #16
   105da:	7003      	strb	r3, [r0, #0]
   105dc:	4b2e      	ldr	r3, [pc, #184]	; (10698 <UnconfirmedTransmissionCallback+0xf8>)
   105de:	4798      	blx	r3
   105e0:	9807      	ldr	r0, [sp, #28]
   105e2:	4b2e      	ldr	r3, [pc, #184]	; (1069c <UnconfirmedTransmissionCallback+0xfc>)
   105e4:	9908      	ldr	r1, [sp, #32]
   105e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   105e8:	4798      	blx	r3
   105ea:	0038      	movs	r0, r7
   105ec:	4b2c      	ldr	r3, [pc, #176]	; (106a0 <UnconfirmedTransmissionCallback+0x100>)
   105ee:	4798      	blx	r3
   105f0:	2800      	cmp	r0, #0
   105f2:	d01a      	beq.n	1062a <UnconfirmedTransmissionCallback+0x8a>
   105f4:	0023      	movs	r3, r4
   105f6:	33fd      	adds	r3, #253	; 0xfd
   105f8:	781b      	ldrb	r3, [r3, #0]
   105fa:	2b01      	cmp	r3, #1
   105fc:	d108      	bne.n	10610 <UnconfirmedTransmissionCallback+0x70>
   105fe:	0021      	movs	r1, r4
   10600:	220e      	movs	r2, #14
   10602:	3184      	adds	r1, #132	; 0x84
   10604:	780b      	ldrb	r3, [r1, #0]
   10606:	4393      	bics	r3, r2
   10608:	001a      	movs	r2, r3
   1060a:	230c      	movs	r3, #12
   1060c:	4313      	orrs	r3, r2
   1060e:	700b      	strb	r3, [r1, #0]
   10610:	2200      	movs	r2, #0
   10612:	4b24      	ldr	r3, [pc, #144]	; (106a4 <UnconfirmedTransmissionCallback+0x104>)
   10614:	4924      	ldr	r1, [pc, #144]	; (106a8 <UnconfirmedTransmissionCallback+0x108>)
   10616:	5ce3      	ldrb	r3, [r4, r3]
   10618:	34fc      	adds	r4, #252	; 0xfc
   1061a:	4359      	muls	r1, r3
   1061c:	4b23      	ldr	r3, [pc, #140]	; (106ac <UnconfirmedTransmissionCallback+0x10c>)
   1061e:	7820      	ldrb	r0, [r4, #0]
   10620:	18c9      	adds	r1, r1, r3
   10622:	4b23      	ldr	r3, [pc, #140]	; (106b0 <UnconfirmedTransmissionCallback+0x110>)
   10624:	9200      	str	r2, [sp, #0]
   10626:	4c23      	ldr	r4, [pc, #140]	; (106b4 <UnconfirmedTransmissionCallback+0x114>)
   10628:	47a0      	blx	r4
   1062a:	b00b      	add	sp, #44	; 0x2c
   1062c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1062e:	4b22      	ldr	r3, [pc, #136]	; (106b8 <UnconfirmedTransmissionCallback+0x118>)
   10630:	4798      	blx	r3
   10632:	4b22      	ldr	r3, [pc, #136]	; (106bc <UnconfirmedTransmissionCallback+0x11c>)
   10634:	4922      	ldr	r1, [pc, #136]	; (106c0 <UnconfirmedTransmissionCallback+0x120>)
   10636:	4798      	blx	r3
   10638:	23fa      	movs	r3, #250	; 0xfa
   1063a:	009b      	lsls	r3, r3, #2
   1063c:	18c9      	adds	r1, r1, r3
   1063e:	0023      	movs	r3, r4
   10640:	9104      	str	r1, [sp, #16]
   10642:	33ff      	adds	r3, #255	; 0xff
   10644:	7f5b      	ldrb	r3, [r3, #29]
   10646:	079a      	lsls	r2, r3, #30
   10648:	d515      	bpl.n	10676 <UnconfirmedTransmissionCallback+0xd6>
   1064a:	aa04      	add	r2, sp, #16
   1064c:	0031      	movs	r1, r6
   1064e:	2026      	movs	r0, #38	; 0x26
   10650:	47a8      	blx	r5
   10652:	9b04      	ldr	r3, [sp, #16]
   10654:	1c5a      	adds	r2, r3, #1
   10656:	d001      	beq.n	1065c <UnconfirmedTransmissionCallback+0xbc>
   10658:	3314      	adds	r3, #20
   1065a:	9304      	str	r3, [sp, #16]
   1065c:	4b11      	ldr	r3, [pc, #68]	; (106a4 <UnconfirmedTransmissionCallback+0x104>)
   1065e:	9a04      	ldr	r2, [sp, #16]
   10660:	5ce3      	ldrb	r3, [r4, r3]
   10662:	21fa      	movs	r1, #250	; 0xfa
   10664:	1ad3      	subs	r3, r2, r3
   10666:	2200      	movs	r2, #0
   10668:	0089      	lsls	r1, r1, #2
   1066a:	34f2      	adds	r4, #242	; 0xf2
   1066c:	4359      	muls	r1, r3
   1066e:	7820      	ldrb	r0, [r4, #0]
   10670:	4b14      	ldr	r3, [pc, #80]	; (106c4 <UnconfirmedTransmissionCallback+0x124>)
   10672:	9200      	str	r2, [sp, #0]
   10674:	e7d7      	b.n	10626 <UnconfirmedTransmissionCallback+0x86>
   10676:	075b      	lsls	r3, r3, #29
   10678:	d5f0      	bpl.n	1065c <UnconfirmedTransmissionCallback+0xbc>
   1067a:	aa04      	add	r2, sp, #16
   1067c:	0031      	movs	r1, r6
   1067e:	2032      	movs	r0, #50	; 0x32
   10680:	47a8      	blx	r5
   10682:	9b04      	ldr	r3, [sp, #16]
   10684:	1c5a      	adds	r2, r3, #1
   10686:	d0e9      	beq.n	1065c <UnconfirmedTransmissionCallback+0xbc>
   10688:	3301      	adds	r3, #1
   1068a:	e7e6      	b.n	1065a <UnconfirmedTransmissionCallback+0xba>
   1068c:	20003170 	.word	0x20003170
   10690:	200033c8 	.word	0x200033c8
   10694:	0000c665 	.word	0x0000c665
   10698:	0000eeb9 	.word	0x0000eeb9
   1069c:	00010321 	.word	0x00010321
   106a0:	0000e5dd 	.word	0x0000e5dd
   106a4:	0000022b 	.word	0x0000022b
   106a8:	fffffc18 	.word	0xfffffc18
   106ac:	001e8480 	.word	0x001e8480
   106b0:	000104e9 	.word	0x000104e9
   106b4:	0000cbad 	.word	0x0000cbad
   106b8:	00016885 	.word	0x00016885
   106bc:	000131bd 	.word	0x000131bd
   106c0:	000007d1 	.word	0x000007d1
   106c4:	000105a1 	.word	0x000105a1

000106c8 <EncryptFRMPayload>:
   106c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   106ca:	0007      	movs	r7, r0
   106cc:	2401      	movs	r4, #1
   106ce:	b089      	sub	sp, #36	; 0x24
   106d0:	9306      	str	r3, [sp, #24]
   106d2:	ab10      	add	r3, sp, #64	; 0x40
   106d4:	881d      	ldrh	r5, [r3, #0]
   106d6:	090b      	lsrs	r3, r1, #4
   106d8:	9104      	str	r1, [sp, #16]
   106da:	9205      	str	r2, [sp, #20]
   106dc:	9303      	str	r3, [sp, #12]
   106de:	9b03      	ldr	r3, [sp, #12]
   106e0:	429c      	cmp	r4, r3
   106e2:	d907      	bls.n	106f4 <EncryptFRMPayload+0x2c>
   106e4:	260f      	movs	r6, #15
   106e6:	9b04      	ldr	r3, [sp, #16]
   106e8:	4033      	ands	r3, r6
   106ea:	1e1e      	subs	r6, r3, #0
   106ec:	d126      	bne.n	1073c <EncryptFRMPayload+0x74>
   106ee:	2000      	movs	r0, #0
   106f0:	b009      	add	sp, #36	; 0x24
   106f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   106f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   106f6:	0022      	movs	r2, r4
   106f8:	9300      	str	r3, [sp, #0]
   106fa:	9906      	ldr	r1, [sp, #24]
   106fc:	2301      	movs	r3, #1
   106fe:	9805      	ldr	r0, [sp, #20]
   10700:	4e1e      	ldr	r6, [pc, #120]	; (1077c <EncryptFRMPayload+0xb4>)
   10702:	47b0      	blx	r6
   10704:	4e1e      	ldr	r6, [pc, #120]	; (10780 <EncryptFRMPayload+0xb8>)
   10706:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10708:	2101      	movs	r1, #1
   1070a:	0030      	movs	r0, r6
   1070c:	4b1d      	ldr	r3, [pc, #116]	; (10784 <EncryptFRMPayload+0xbc>)
   1070e:	4798      	blx	r3
   10710:	2800      	cmp	r0, #0
   10712:	d1ed      	bne.n	106f0 <EncryptFRMPayload+0x28>
   10714:	1e63      	subs	r3, r4, #1
   10716:	011b      	lsls	r3, r3, #4
   10718:	18fb      	adds	r3, r7, r3
   1071a:	9307      	str	r3, [sp, #28]
   1071c:	9b07      	ldr	r3, [sp, #28]
   1071e:	182a      	adds	r2, r5, r0
   10720:	5c19      	ldrb	r1, [r3, r0]
   10722:	5d83      	ldrb	r3, [r0, r6]
   10724:	b292      	uxth	r2, r2
   10726:	4059      	eors	r1, r3
   10728:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1072a:	3001      	adds	r0, #1
   1072c:	5499      	strb	r1, [r3, r2]
   1072e:	2810      	cmp	r0, #16
   10730:	d1f4      	bne.n	1071c <EncryptFRMPayload+0x54>
   10732:	3510      	adds	r5, #16
   10734:	3401      	adds	r4, #1
   10736:	b2ad      	uxth	r5, r5
   10738:	b2e4      	uxtb	r4, r4
   1073a:	e7d0      	b.n	106de <EncryptFRMPayload+0x16>
   1073c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1073e:	0022      	movs	r2, r4
   10740:	9300      	str	r3, [sp, #0]
   10742:	9906      	ldr	r1, [sp, #24]
   10744:	2301      	movs	r3, #1
   10746:	9805      	ldr	r0, [sp, #20]
   10748:	4c0c      	ldr	r4, [pc, #48]	; (1077c <EncryptFRMPayload+0xb4>)
   1074a:	47a0      	blx	r4
   1074c:	4c0c      	ldr	r4, [pc, #48]	; (10780 <EncryptFRMPayload+0xb8>)
   1074e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10750:	2101      	movs	r1, #1
   10752:	0020      	movs	r0, r4
   10754:	4b0b      	ldr	r3, [pc, #44]	; (10784 <EncryptFRMPayload+0xbc>)
   10756:	4798      	blx	r3
   10758:	2800      	cmp	r0, #0
   1075a:	d1c9      	bne.n	106f0 <EncryptFRMPayload+0x28>
   1075c:	9b03      	ldr	r3, [sp, #12]
   1075e:	011b      	lsls	r3, r3, #4
   10760:	18fb      	adds	r3, r7, r3
   10762:	5d07      	ldrb	r7, [r0, r4]
   10764:	5c19      	ldrb	r1, [r3, r0]
   10766:	182a      	adds	r2, r5, r0
   10768:	4079      	eors	r1, r7
   1076a:	9f11      	ldr	r7, [sp, #68]	; 0x44
   1076c:	b292      	uxth	r2, r2
   1076e:	3001      	adds	r0, #1
   10770:	54b9      	strb	r1, [r7, r2]
   10772:	b2c2      	uxtb	r2, r0
   10774:	4296      	cmp	r6, r2
   10776:	d8f4      	bhi.n	10762 <EncryptFRMPayload+0x9a>
   10778:	e7b9      	b.n	106ee <EncryptFRMPayload+0x26>
   1077a:	46c0      	nop			; (mov r8, r8)
   1077c:	0000f8e1 	.word	0x0000f8e1
   10780:	20001e9d 	.word	0x20001e9d
   10784:	00007129 	.word	0x00007129

00010788 <UpdateTransactionCompleteCbParams>:
   10788:	2388      	movs	r3, #136	; 0x88
   1078a:	2201      	movs	r2, #1
   1078c:	b570      	push	{r4, r5, r6, lr}
   1078e:	0001      	movs	r1, r0
   10790:	4c13      	ldr	r4, [pc, #76]	; (107e0 <UpdateTransactionCompleteCbParams+0x58>)
   10792:	4814      	ldr	r0, [pc, #80]	; (107e4 <UpdateTransactionCompleteCbParams+0x5c>)
   10794:	009b      	lsls	r3, r3, #2
   10796:	54e2      	strb	r2, [r4, r3]
   10798:	7842      	ldrb	r2, [r0, #1]
   1079a:	7803      	ldrb	r3, [r0, #0]
   1079c:	0212      	lsls	r2, r2, #8
   1079e:	431a      	orrs	r2, r3
   107a0:	7883      	ldrb	r3, [r0, #2]
   107a2:	041b      	lsls	r3, r3, #16
   107a4:	431a      	orrs	r2, r3
   107a6:	78c3      	ldrb	r3, [r0, #3]
   107a8:	061b      	lsls	r3, r3, #24
   107aa:	4313      	orrs	r3, r2
   107ac:	d00e      	beq.n	107cc <UpdateTransactionCompleteCbParams+0x44>
   107ae:	0022      	movs	r2, r4
   107b0:	2504      	movs	r5, #4
   107b2:	32fc      	adds	r2, #252	; 0xfc
   107b4:	6890      	ldr	r0, [r2, #8]
   107b6:	4228      	tst	r0, r5
   107b8:	d008      	beq.n	107cc <UpdateTransactionCompleteCbParams+0x44>
   107ba:	68d0      	ldr	r0, [r2, #12]
   107bc:	2800      	cmp	r0, #0
   107be:	d005      	beq.n	107cc <UpdateTransactionCompleteCbParams+0x44>
   107c0:	0022      	movs	r2, r4
   107c2:	32ff      	adds	r2, #255	; 0xff
   107c4:	7451      	strb	r1, [r2, #17]
   107c6:	7355      	strb	r5, [r2, #13]
   107c8:	4907      	ldr	r1, [pc, #28]	; (107e8 <UpdateTransactionCompleteCbParams+0x60>)
   107ca:	4798      	blx	r3
   107cc:	2388      	movs	r3, #136	; 0x88
   107ce:	009b      	lsls	r3, r3, #2
   107d0:	5ce3      	ldrb	r3, [r4, r3]
   107d2:	2b00      	cmp	r3, #0
   107d4:	d002      	beq.n	107dc <UpdateTransactionCompleteCbParams+0x54>
   107d6:	2300      	movs	r3, #0
   107d8:	34fc      	adds	r4, #252	; 0xfc
   107da:	60e3      	str	r3, [r4, #12]
   107dc:	bd70      	pop	{r4, r5, r6, pc}
   107de:	46c0      	nop			; (mov r8, r8)
   107e0:	20003170 	.word	0x20003170
   107e4:	200034cc 	.word	0x200034cc
   107e8:	2000327c 	.word	0x2000327c

000107ec <UpdateRxDataAvailableCbParams>:
   107ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   107ee:	4e0f      	ldr	r6, [pc, #60]	; (1082c <UpdateRxDataAvailableCbParams+0x40>)
   107f0:	469c      	mov	ip, r3
   107f2:	7875      	ldrb	r5, [r6, #1]
   107f4:	7834      	ldrb	r4, [r6, #0]
   107f6:	022d      	lsls	r5, r5, #8
   107f8:	4325      	orrs	r5, r4
   107fa:	78b4      	ldrb	r4, [r6, #2]
   107fc:	0424      	lsls	r4, r4, #16
   107fe:	4325      	orrs	r5, r4
   10800:	78f4      	ldrb	r4, [r6, #3]
   10802:	0624      	lsls	r4, r4, #24
   10804:	432c      	orrs	r4, r5
   10806:	d010      	beq.n	1082a <UpdateRxDataAvailableCbParams+0x3e>
   10808:	4d09      	ldr	r5, [pc, #36]	; (10830 <UpdateRxDataAvailableCbParams+0x44>)
   1080a:	2702      	movs	r7, #2
   1080c:	002e      	movs	r6, r5
   1080e:	36fc      	adds	r6, #252	; 0xfc
   10810:	68b3      	ldr	r3, [r6, #8]
   10812:	423b      	tst	r3, r7
   10814:	d009      	beq.n	1082a <UpdateRxDataAvailableCbParams+0x3e>
   10816:	4663      	mov	r3, ip
   10818:	35ff      	adds	r5, #255	; 0xff
   1081a:	6170      	str	r0, [r6, #20]
   1081c:	61b1      	str	r1, [r6, #24]
   1081e:	736f      	strb	r7, [r5, #13]
   10820:	766a      	strb	r2, [r5, #25]
   10822:	76ab      	strb	r3, [r5, #26]
   10824:	4903      	ldr	r1, [pc, #12]	; (10834 <UpdateRxDataAvailableCbParams+0x48>)
   10826:	68f0      	ldr	r0, [r6, #12]
   10828:	47a0      	blx	r4
   1082a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1082c:	200034cc 	.word	0x200034cc
   10830:	20003170 	.word	0x20003170
   10834:	2000327c 	.word	0x2000327c

00010838 <LorawanNotifyAppOnRxdone>:
   10838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1083a:	4c25      	ldr	r4, [pc, #148]	; (108d0 <LorawanNotifyAppOnRxdone+0x98>)
   1083c:	0007      	movs	r7, r0
   1083e:	0023      	movs	r3, r4
   10840:	33fd      	adds	r3, #253	; 0xfd
   10842:	781b      	ldrb	r3, [r3, #0]
   10844:	000d      	movs	r5, r1
   10846:	0016      	movs	r6, r2
   10848:	2b01      	cmp	r3, #1
   1084a:	d136      	bne.n	108ba <LorawanNotifyAppOnRxdone+0x82>
   1084c:	0022      	movs	r2, r4
   1084e:	210e      	movs	r1, #14
   10850:	3284      	adds	r2, #132	; 0x84
   10852:	7813      	ldrb	r3, [r2, #0]
   10854:	438b      	bics	r3, r1
   10856:	7013      	strb	r3, [r2, #0]
   10858:	491e      	ldr	r1, [pc, #120]	; (108d4 <LorawanNotifyAppOnRxdone+0x9c>)
   1085a:	784a      	ldrb	r2, [r1, #1]
   1085c:	780b      	ldrb	r3, [r1, #0]
   1085e:	0212      	lsls	r2, r2, #8
   10860:	431a      	orrs	r2, r3
   10862:	788b      	ldrb	r3, [r1, #2]
   10864:	041b      	lsls	r3, r3, #16
   10866:	431a      	orrs	r2, r3
   10868:	78cb      	ldrb	r3, [r1, #3]
   1086a:	061b      	lsls	r3, r3, #24
   1086c:	4313      	orrs	r3, r2
   1086e:	d023      	beq.n	108b8 <LorawanNotifyAppOnRxdone+0x80>
   10870:	0022      	movs	r2, r4
   10872:	2120      	movs	r1, #32
   10874:	3294      	adds	r2, #148	; 0x94
   10876:	7813      	ldrb	r3, [r2, #0]
   10878:	438b      	bics	r3, r1
   1087a:	7013      	strb	r3, [r2, #0]
   1087c:	0023      	movs	r3, r4
   1087e:	33fd      	adds	r3, #253	; 0xfd
   10880:	781b      	ldrb	r3, [r3, #0]
   10882:	7878      	ldrb	r0, [r7, #1]
   10884:	469c      	mov	ip, r3
   10886:	78fa      	ldrb	r2, [r7, #3]
   10888:	78b9      	ldrb	r1, [r7, #2]
   1088a:	793b      	ldrb	r3, [r7, #4]
   1088c:	4667      	mov	r7, ip
   1088e:	0209      	lsls	r1, r1, #8
   10890:	4301      	orrs	r1, r0
   10892:	0410      	lsls	r0, r2, #16
   10894:	4308      	orrs	r0, r1
   10896:	061b      	lsls	r3, r3, #24
   10898:	4318      	orrs	r0, r3
   1089a:	0032      	movs	r2, r6
   1089c:	2308      	movs	r3, #8
   1089e:	0029      	movs	r1, r5
   108a0:	2f04      	cmp	r7, #4
   108a2:	d112      	bne.n	108ca <LorawanNotifyAppOnRxdone+0x92>
   108a4:	4d0c      	ldr	r5, [pc, #48]	; (108d8 <LorawanNotifyAppOnRxdone+0xa0>)
   108a6:	47a8      	blx	r5
   108a8:	2388      	movs	r3, #136	; 0x88
   108aa:	009b      	lsls	r3, r3, #2
   108ac:	5ce3      	ldrb	r3, [r4, r3]
   108ae:	2b00      	cmp	r3, #0
   108b0:	d102      	bne.n	108b8 <LorawanNotifyAppOnRxdone+0x80>
   108b2:	2008      	movs	r0, #8
   108b4:	4b09      	ldr	r3, [pc, #36]	; (108dc <LorawanNotifyAppOnRxdone+0xa4>)
   108b6:	4798      	blx	r3
   108b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   108ba:	2b04      	cmp	r3, #4
   108bc:	d1cc      	bne.n	10858 <LorawanNotifyAppOnRxdone+0x20>
   108be:	0023      	movs	r3, r4
   108c0:	33f1      	adds	r3, #241	; 0xf1
   108c2:	7818      	ldrb	r0, [r3, #0]
   108c4:	4b06      	ldr	r3, [pc, #24]	; (108e0 <LorawanNotifyAppOnRxdone+0xa8>)
   108c6:	4798      	blx	r3
   108c8:	e7c6      	b.n	10858 <LorawanNotifyAppOnRxdone+0x20>
   108ca:	4d06      	ldr	r5, [pc, #24]	; (108e4 <LorawanNotifyAppOnRxdone+0xac>)
   108cc:	47a8      	blx	r5
   108ce:	e7eb      	b.n	108a8 <LorawanNotifyAppOnRxdone+0x70>
   108d0:	20003170 	.word	0x20003170
   108d4:	200034cc 	.word	0x200034cc
   108d8:	00012791 	.word	0x00012791
   108dc:	00010789 	.word	0x00010789
   108e0:	0000cec5 	.word	0x0000cec5
   108e4:	000107ed 	.word	0x000107ed

000108e8 <LorawanSetReceiveWindow2Parameters>:
   108e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   108ea:	466b      	mov	r3, sp
   108ec:	1cdd      	adds	r5, r3, #3
   108ee:	9001      	str	r0, [sp, #4]
   108f0:	7029      	strb	r1, [r5, #0]
   108f2:	2001      	movs	r0, #1
   108f4:	a901      	add	r1, sp, #4
   108f6:	4c09      	ldr	r4, [pc, #36]	; (1091c <LorawanSetReceiveWindow2Parameters+0x34>)
   108f8:	47a0      	blx	r4
   108fa:	2808      	cmp	r0, #8
   108fc:	d002      	beq.n	10904 <LorawanSetReceiveWindow2Parameters+0x1c>
   108fe:	240a      	movs	r4, #10
   10900:	0020      	movs	r0, r4
   10902:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10904:	0029      	movs	r1, r5
   10906:	200f      	movs	r0, #15
   10908:	47a0      	blx	r4
   1090a:	0004      	movs	r4, r0
   1090c:	2808      	cmp	r0, #8
   1090e:	d1f6      	bne.n	108fe <LorawanSetReceiveWindow2Parameters+0x16>
   10910:	7829      	ldrb	r1, [r5, #0]
   10912:	9801      	ldr	r0, [sp, #4]
   10914:	4b02      	ldr	r3, [pc, #8]	; (10920 <LorawanSetReceiveWindow2Parameters+0x38>)
   10916:	4798      	blx	r3
   10918:	e7f2      	b.n	10900 <LorawanSetReceiveWindow2Parameters+0x18>
   1091a:	46c0      	nop			; (mov r8, r8)
   1091c:	0000c681 	.word	0x0000c681
   10920:	0000fd4d 	.word	0x0000fd4d

00010924 <LorawanSetReceiveWindowCParameters>:
   10924:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10926:	466b      	mov	r3, sp
   10928:	1cdc      	adds	r4, r3, #3
   1092a:	9001      	str	r0, [sp, #4]
   1092c:	7021      	strb	r1, [r4, #0]
   1092e:	2001      	movs	r0, #1
   10930:	a901      	add	r1, sp, #4
   10932:	4d0d      	ldr	r5, [pc, #52]	; (10968 <LorawanSetReceiveWindowCParameters+0x44>)
   10934:	47a8      	blx	r5
   10936:	2808      	cmp	r0, #8
   10938:	d001      	beq.n	1093e <LorawanSetReceiveWindowCParameters+0x1a>
   1093a:	200a      	movs	r0, #10
   1093c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1093e:	0021      	movs	r1, r4
   10940:	200f      	movs	r0, #15
   10942:	47a8      	blx	r5
   10944:	2808      	cmp	r0, #8
   10946:	d1f8      	bne.n	1093a <LorawanSetReceiveWindowCParameters+0x16>
   10948:	4b08      	ldr	r3, [pc, #32]	; (1096c <LorawanSetReceiveWindowCParameters+0x48>)
   1094a:	9a01      	ldr	r2, [sp, #4]
   1094c:	0019      	movs	r1, r3
   1094e:	7824      	ldrb	r4, [r4, #0]
   10950:	3173      	adds	r1, #115	; 0x73
   10952:	336f      	adds	r3, #111	; 0x6f
   10954:	700c      	strb	r4, [r1, #0]
   10956:	0a11      	lsrs	r1, r2, #8
   10958:	701a      	strb	r2, [r3, #0]
   1095a:	7059      	strb	r1, [r3, #1]
   1095c:	0c11      	lsrs	r1, r2, #16
   1095e:	0e12      	lsrs	r2, r2, #24
   10960:	7099      	strb	r1, [r3, #2]
   10962:	70da      	strb	r2, [r3, #3]
   10964:	e7ea      	b.n	1093c <LorawanSetReceiveWindowCParameters+0x18>
   10966:	46c0      	nop			; (mov r8, r8)
   10968:	0000c681 	.word	0x0000c681
   1096c:	20003170 	.word	0x20003170

00010970 <LorawanSetFrequency>:
   10970:	b507      	push	{r0, r1, r2, lr}
   10972:	466b      	mov	r3, sp
   10974:	9100      	str	r1, [sp, #0]
   10976:	7118      	strb	r0, [r3, #4]
   10978:	4669      	mov	r1, sp
   1097a:	2000      	movs	r0, #0
   1097c:	4b01      	ldr	r3, [pc, #4]	; (10984 <LorawanSetFrequency+0x14>)
   1097e:	4798      	blx	r3
   10980:	bd0e      	pop	{r1, r2, r3, pc}
   10982:	46c0      	nop			; (mov r8, r8)
   10984:	0000c69d 	.word	0x0000c69d

00010988 <LorawanCheckAndDoRetryOnTimeout>:
   10988:	b513      	push	{r0, r1, r4, lr}
   1098a:	4c33      	ldr	r4, [pc, #204]	; (10a58 <LorawanCheckAndDoRetryOnTimeout+0xd0>)
   1098c:	0023      	movs	r3, r4
   1098e:	3394      	adds	r3, #148	; 0x94
   10990:	781b      	ldrb	r3, [r3, #0]
   10992:	0022      	movs	r2, r4
   10994:	07db      	lsls	r3, r3, #31
   10996:	d54b      	bpl.n	10a30 <LorawanCheckAndDoRetryOnTimeout+0xa8>
   10998:	0023      	movs	r3, r4
   1099a:	32e4      	adds	r2, #228	; 0xe4
   1099c:	33e2      	adds	r3, #226	; 0xe2
   1099e:	7812      	ldrb	r2, [r2, #0]
   109a0:	781b      	ldrb	r3, [r3, #0]
   109a2:	429a      	cmp	r2, r3
   109a4:	d836      	bhi.n	10a14 <LorawanCheckAndDoRetryOnTimeout+0x8c>
   109a6:	4b2d      	ldr	r3, [pc, #180]	; (10a5c <LorawanCheckAndDoRetryOnTimeout+0xd4>)
   109a8:	5ce3      	ldrb	r3, [r4, r3]
   109aa:	2b00      	cmp	r3, #0
   109ac:	d032      	beq.n	10a14 <LorawanCheckAndDoRetryOnTimeout+0x8c>
   109ae:	0023      	movs	r3, r4
   109b0:	33fd      	adds	r3, #253	; 0xfd
   109b2:	781b      	ldrb	r3, [r3, #0]
   109b4:	2b01      	cmp	r3, #1
   109b6:	d119      	bne.n	109ec <LorawanCheckAndDoRetryOnTimeout+0x64>
   109b8:	0021      	movs	r1, r4
   109ba:	220e      	movs	r2, #14
   109bc:	3184      	adds	r1, #132	; 0x84
   109be:	780b      	ldrb	r3, [r1, #0]
   109c0:	4393      	bics	r3, r2
   109c2:	001a      	movs	r2, r3
   109c4:	230c      	movs	r3, #12
   109c6:	4313      	orrs	r3, r2
   109c8:	700b      	strb	r3, [r1, #0]
   109ca:	0023      	movs	r3, r4
   109cc:	33da      	adds	r3, #218	; 0xda
   109ce:	8819      	ldrh	r1, [r3, #0]
   109d0:	4b23      	ldr	r3, [pc, #140]	; (10a60 <LorawanCheckAndDoRetryOnTimeout+0xd8>)
   109d2:	2200      	movs	r2, #0
   109d4:	5ce3      	ldrb	r3, [r4, r3]
   109d6:	34f1      	adds	r4, #241	; 0xf1
   109d8:	1acb      	subs	r3, r1, r3
   109da:	21fa      	movs	r1, #250	; 0xfa
   109dc:	0089      	lsls	r1, r1, #2
   109de:	7820      	ldrb	r0, [r4, #0]
   109e0:	4359      	muls	r1, r3
   109e2:	9200      	str	r2, [sp, #0]
   109e4:	4b1f      	ldr	r3, [pc, #124]	; (10a64 <LorawanCheckAndDoRetryOnTimeout+0xdc>)
   109e6:	4c20      	ldr	r4, [pc, #128]	; (10a68 <LorawanCheckAndDoRetryOnTimeout+0xe0>)
   109e8:	47a0      	blx	r4
   109ea:	bd13      	pop	{r0, r1, r4, pc}
   109ec:	2b04      	cmp	r3, #4
   109ee:	d1fc      	bne.n	109ea <LorawanCheckAndDoRetryOnTimeout+0x62>
   109f0:	4b1e      	ldr	r3, [pc, #120]	; (10a6c <LorawanCheckAndDoRetryOnTimeout+0xe4>)
   109f2:	4798      	blx	r3
   109f4:	34ce      	adds	r4, #206	; 0xce
   109f6:	300d      	adds	r0, #13
   109f8:	8823      	ldrh	r3, [r4, #0]
   109fa:	b280      	uxth	r0, r0
   109fc:	4283      	cmp	r3, r0
   109fe:	d802      	bhi.n	10a06 <LorawanCheckAndDoRetryOnTimeout+0x7e>
   10a00:	4b1b      	ldr	r3, [pc, #108]	; (10a70 <LorawanCheckAndDoRetryOnTimeout+0xe8>)
   10a02:	4798      	blx	r3
   10a04:	e7f1      	b.n	109ea <LorawanCheckAndDoRetryOnTimeout+0x62>
   10a06:	200e      	movs	r0, #14
   10a08:	4b1a      	ldr	r3, [pc, #104]	; (10a74 <LorawanCheckAndDoRetryOnTimeout+0xec>)
   10a0a:	4798      	blx	r3
   10a0c:	4b1a      	ldr	r3, [pc, #104]	; (10a78 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
   10a0e:	4798      	blx	r3
   10a10:	4b1a      	ldr	r3, [pc, #104]	; (10a7c <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   10a12:	e7f6      	b.n	10a02 <LorawanCheckAndDoRetryOnTimeout+0x7a>
   10a14:	2012      	movs	r0, #18
   10a16:	4b17      	ldr	r3, [pc, #92]	; (10a74 <LorawanCheckAndDoRetryOnTimeout+0xec>)
   10a18:	4798      	blx	r3
   10a1a:	4b17      	ldr	r3, [pc, #92]	; (10a78 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
   10a1c:	4798      	blx	r3
   10a1e:	34fd      	adds	r4, #253	; 0xfd
   10a20:	4b16      	ldr	r3, [pc, #88]	; (10a7c <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   10a22:	4798      	blx	r3
   10a24:	7823      	ldrb	r3, [r4, #0]
   10a26:	2b04      	cmp	r3, #4
   10a28:	d1df      	bne.n	109ea <LorawanCheckAndDoRetryOnTimeout+0x62>
   10a2a:	4b15      	ldr	r3, [pc, #84]	; (10a80 <LorawanCheckAndDoRetryOnTimeout+0xf8>)
   10a2c:	4798      	blx	r3
   10a2e:	e7dc      	b.n	109ea <LorawanCheckAndDoRetryOnTimeout+0x62>
   10a30:	0023      	movs	r3, r4
   10a32:	32e3      	adds	r2, #227	; 0xe3
   10a34:	33e1      	adds	r3, #225	; 0xe1
   10a36:	7812      	ldrb	r2, [r2, #0]
   10a38:	781b      	ldrb	r3, [r3, #0]
   10a3a:	429a      	cmp	r2, r3
   10a3c:	d803      	bhi.n	10a46 <LorawanCheckAndDoRetryOnTimeout+0xbe>
   10a3e:	4b07      	ldr	r3, [pc, #28]	; (10a5c <LorawanCheckAndDoRetryOnTimeout+0xd4>)
   10a40:	5ce3      	ldrb	r3, [r4, r3]
   10a42:	2b00      	cmp	r3, #0
   10a44:	d1dc      	bne.n	10a00 <LorawanCheckAndDoRetryOnTimeout+0x78>
   10a46:	4b0f      	ldr	r3, [pc, #60]	; (10a84 <LorawanCheckAndDoRetryOnTimeout+0xfc>)
   10a48:	4798      	blx	r3
   10a4a:	4b0c      	ldr	r3, [pc, #48]	; (10a7c <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   10a4c:	4798      	blx	r3
   10a4e:	2008      	movs	r0, #8
   10a50:	4b08      	ldr	r3, [pc, #32]	; (10a74 <LorawanCheckAndDoRetryOnTimeout+0xec>)
   10a52:	4798      	blx	r3
   10a54:	e7c9      	b.n	109ea <LorawanCheckAndDoRetryOnTimeout+0x62>
   10a56:	46c0      	nop			; (mov r8, r8)
   10a58:	20003170 	.word	0x20003170
   10a5c:	0000022a 	.word	0x0000022a
   10a60:	0000022b 	.word	0x0000022b
   10a64:	00010a89 	.word	0x00010a89
   10a68:	0000cbad 	.word	0x0000cbad
   10a6c:	0000f555 	.word	0x0000f555
   10a70:	00010391 	.word	0x00010391
   10a74:	00010789 	.word	0x00010789
   10a78:	0000fd95 	.word	0x0000fd95
   10a7c:	0000f4d1 	.word	0x0000f4d1
   10a80:	0000e5c1 	.word	0x0000e5c1
   10a84:	0000fdc5 	.word	0x0000fdc5

00010a88 <AckRetransmissionCallback>:
   10a88:	b510      	push	{r4, lr}
   10a8a:	4c1c      	ldr	r4, [pc, #112]	; (10afc <AckRetransmissionCallback+0x74>)
   10a8c:	0023      	movs	r3, r4
   10a8e:	3384      	adds	r3, #132	; 0x84
   10a90:	781b      	ldrb	r3, [r3, #0]
   10a92:	2b7f      	cmp	r3, #127	; 0x7f
   10a94:	d82d      	bhi.n	10af2 <AckRetransmissionCallback+0x6a>
   10a96:	0023      	movs	r3, r4
   10a98:	33fd      	adds	r3, #253	; 0xfd
   10a9a:	781b      	ldrb	r3, [r3, #0]
   10a9c:	2b04      	cmp	r3, #4
   10a9e:	d102      	bne.n	10aa6 <AckRetransmissionCallback+0x1e>
   10aa0:	4b17      	ldr	r3, [pc, #92]	; (10b00 <AckRetransmissionCallback+0x78>)
   10aa2:	4798      	blx	r3
   10aa4:	e01e      	b.n	10ae4 <AckRetransmissionCallback+0x5c>
   10aa6:	2b01      	cmp	r3, #1
   10aa8:	d11c      	bne.n	10ae4 <AckRetransmissionCallback+0x5c>
   10aaa:	0022      	movs	r2, r4
   10aac:	0023      	movs	r3, r4
   10aae:	32e4      	adds	r2, #228	; 0xe4
   10ab0:	33e2      	adds	r3, #226	; 0xe2
   10ab2:	7812      	ldrb	r2, [r2, #0]
   10ab4:	781b      	ldrb	r3, [r3, #0]
   10ab6:	429a      	cmp	r2, r3
   10ab8:	d815      	bhi.n	10ae6 <AckRetransmissionCallback+0x5e>
   10aba:	4b12      	ldr	r3, [pc, #72]	; (10b04 <AckRetransmissionCallback+0x7c>)
   10abc:	5ce3      	ldrb	r3, [r4, r3]
   10abe:	2b00      	cmp	r3, #0
   10ac0:	d011      	beq.n	10ae6 <AckRetransmissionCallback+0x5e>
   10ac2:	4b11      	ldr	r3, [pc, #68]	; (10b08 <AckRetransmissionCallback+0x80>)
   10ac4:	4798      	blx	r3
   10ac6:	34ce      	adds	r4, #206	; 0xce
   10ac8:	300d      	adds	r0, #13
   10aca:	8823      	ldrh	r3, [r4, #0]
   10acc:	b280      	uxth	r0, r0
   10ace:	4283      	cmp	r3, r0
   10ad0:	d801      	bhi.n	10ad6 <AckRetransmissionCallback+0x4e>
   10ad2:	4b0e      	ldr	r3, [pc, #56]	; (10b0c <AckRetransmissionCallback+0x84>)
   10ad4:	e7e5      	b.n	10aa2 <AckRetransmissionCallback+0x1a>
   10ad6:	4b0e      	ldr	r3, [pc, #56]	; (10b10 <AckRetransmissionCallback+0x88>)
   10ad8:	4798      	blx	r3
   10ada:	4b0e      	ldr	r3, [pc, #56]	; (10b14 <AckRetransmissionCallback+0x8c>)
   10adc:	4798      	blx	r3
   10ade:	200e      	movs	r0, #14
   10ae0:	4b0d      	ldr	r3, [pc, #52]	; (10b18 <AckRetransmissionCallback+0x90>)
   10ae2:	4798      	blx	r3
   10ae4:	bd10      	pop	{r4, pc}
   10ae6:	4b0a      	ldr	r3, [pc, #40]	; (10b10 <AckRetransmissionCallback+0x88>)
   10ae8:	4798      	blx	r3
   10aea:	4b0a      	ldr	r3, [pc, #40]	; (10b14 <AckRetransmissionCallback+0x8c>)
   10aec:	4798      	blx	r3
   10aee:	2012      	movs	r0, #18
   10af0:	e7f6      	b.n	10ae0 <AckRetransmissionCallback+0x58>
   10af2:	4b07      	ldr	r3, [pc, #28]	; (10b10 <AckRetransmissionCallback+0x88>)
   10af4:	4798      	blx	r3
   10af6:	4b07      	ldr	r3, [pc, #28]	; (10b14 <AckRetransmissionCallback+0x8c>)
   10af8:	e7d3      	b.n	10aa2 <AckRetransmissionCallback+0x1a>
   10afa:	46c0      	nop			; (mov r8, r8)
   10afc:	20003170 	.word	0x20003170
   10b00:	00010989 	.word	0x00010989
   10b04:	0000022a 	.word	0x0000022a
   10b08:	0000f555 	.word	0x0000f555
   10b0c:	00010391 	.word	0x00010391
   10b10:	0000fd95 	.word	0x0000fd95
   10b14:	0000f4d1 	.word	0x0000f4d1
   10b18:	00010789 	.word	0x00010789

00010b1c <LORAWAN_RxTimeout>:
   10b1c:	4b24      	ldr	r3, [pc, #144]	; (10bb0 <LORAWAN_RxTimeout+0x94>)
   10b1e:	b510      	push	{r4, lr}
   10b20:	001a      	movs	r2, r3
   10b22:	3284      	adds	r2, #132	; 0x84
   10b24:	7812      	ldrb	r2, [r2, #0]
   10b26:	b251      	sxtb	r1, r2
   10b28:	2900      	cmp	r1, #0
   10b2a:	db27      	blt.n	10b7c <LORAWAN_RxTimeout+0x60>
   10b2c:	0019      	movs	r1, r3
   10b2e:	31fd      	adds	r1, #253	; 0xfd
   10b30:	7809      	ldrb	r1, [r1, #0]
   10b32:	2904      	cmp	r1, #4
   10b34:	d108      	bne.n	10b48 <LORAWAN_RxTimeout+0x2c>
   10b36:	3903      	subs	r1, #3
   10b38:	420a      	tst	r2, r1
   10b3a:	d005      	beq.n	10b48 <LORAWAN_RxTimeout+0x2c>
   10b3c:	2290      	movs	r2, #144	; 0x90
   10b3e:	0092      	lsls	r2, r2, #2
   10b40:	5499      	strb	r1, [r3, r2]
   10b42:	4b1c      	ldr	r3, [pc, #112]	; (10bb4 <LORAWAN_RxTimeout+0x98>)
   10b44:	4798      	blx	r3
   10b46:	bd10      	pop	{r4, pc}
   10b48:	210e      	movs	r1, #14
   10b4a:	0010      	movs	r0, r2
   10b4c:	4008      	ands	r0, r1
   10b4e:	2806      	cmp	r0, #6
   10b50:	d107      	bne.n	10b62 <LORAWAN_RxTimeout+0x46>
   10b52:	3384      	adds	r3, #132	; 0x84
   10b54:	781a      	ldrb	r2, [r3, #0]
   10b56:	438a      	bics	r2, r1
   10b58:	0011      	movs	r1, r2
   10b5a:	2208      	movs	r2, #8
   10b5c:	430a      	orrs	r2, r1
   10b5e:	701a      	strb	r2, [r3, #0]
   10b60:	e7f1      	b.n	10b46 <LORAWAN_RxTimeout+0x2a>
   10b62:	2004      	movs	r0, #4
   10b64:	3394      	adds	r3, #148	; 0x94
   10b66:	781b      	ldrb	r3, [r3, #0]
   10b68:	4203      	tst	r3, r0
   10b6a:	d002      	beq.n	10b72 <LORAWAN_RxTimeout+0x56>
   10b6c:	4b12      	ldr	r3, [pc, #72]	; (10bb8 <LORAWAN_RxTimeout+0x9c>)
   10b6e:	4798      	blx	r3
   10b70:	e7e9      	b.n	10b46 <LORAWAN_RxTimeout+0x2a>
   10b72:	07d3      	lsls	r3, r2, #31
   10b74:	d5e7      	bpl.n	10b46 <LORAWAN_RxTimeout+0x2a>
   10b76:	4b11      	ldr	r3, [pc, #68]	; (10bbc <LORAWAN_RxTimeout+0xa0>)
   10b78:	4798      	blx	r3
   10b7a:	e7e4      	b.n	10b46 <LORAWAN_RxTimeout+0x2a>
   10b7c:	4810      	ldr	r0, [pc, #64]	; (10bc0 <LORAWAN_RxTimeout+0xa4>)
   10b7e:	7841      	ldrb	r1, [r0, #1]
   10b80:	7802      	ldrb	r2, [r0, #0]
   10b82:	0209      	lsls	r1, r1, #8
   10b84:	4311      	orrs	r1, r2
   10b86:	7882      	ldrb	r2, [r0, #2]
   10b88:	0412      	lsls	r2, r2, #16
   10b8a:	4311      	orrs	r1, r2
   10b8c:	78c2      	ldrb	r2, [r0, #3]
   10b8e:	0612      	lsls	r2, r2, #24
   10b90:	430a      	orrs	r2, r1
   10b92:	d0d8      	beq.n	10b46 <LORAWAN_RxTimeout+0x2a>
   10b94:	2188      	movs	r1, #136	; 0x88
   10b96:	2001      	movs	r0, #1
   10b98:	0089      	lsls	r1, r1, #2
   10b9a:	5458      	strb	r0, [r3, r1]
   10b9c:	0019      	movs	r1, r3
   10b9e:	2404      	movs	r4, #4
   10ba0:	31ff      	adds	r1, #255	; 0xff
   10ba2:	33fc      	adds	r3, #252	; 0xfc
   10ba4:	734c      	strb	r4, [r1, #13]
   10ba6:	7448      	strb	r0, [r1, #17]
   10ba8:	4906      	ldr	r1, [pc, #24]	; (10bc4 <LORAWAN_RxTimeout+0xa8>)
   10baa:	68d8      	ldr	r0, [r3, #12]
   10bac:	4790      	blx	r2
   10bae:	e7ca      	b.n	10b46 <LORAWAN_RxTimeout+0x2a>
   10bb0:	20003170 	.word	0x20003170
   10bb4:	00012755 	.word	0x00012755
   10bb8:	0000fde9 	.word	0x0000fde9
   10bbc:	00010989 	.word	0x00010989
   10bc0:	200034cc 	.word	0x200034cc
   10bc4:	2000327c 	.word	0x2000327c

00010bc8 <LorawanConfigureRadioForRX2>:
   10bc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10bca:	466b      	mov	r3, sp
   10bcc:	1cdd      	adds	r5, r3, #3
   10bce:	2300      	movs	r3, #0
   10bd0:	702b      	strb	r3, [r5, #0]
   10bd2:	2390      	movs	r3, #144	; 0x90
   10bd4:	4c29      	ldr	r4, [pc, #164]	; (10c7c <LorawanConfigureRadioForRX2+0xb4>)
   10bd6:	009b      	lsls	r3, r3, #2
   10bd8:	5ce1      	ldrb	r1, [r4, r3]
   10bda:	0006      	movs	r6, r0
   10bdc:	0023      	movs	r3, r4
   10bde:	2900      	cmp	r1, #0
   10be0:	d02f      	beq.n	10c42 <LorawanConfigureRadioForRX2+0x7a>
   10be2:	3373      	adds	r3, #115	; 0x73
   10be4:	781b      	ldrb	r3, [r3, #0]
   10be6:	702b      	strb	r3, [r5, #0]
   10be8:	0023      	movs	r3, r4
   10bea:	6f22      	ldr	r2, [r4, #112]	; 0x70
   10bec:	336f      	adds	r3, #111	; 0x6f
   10bee:	781b      	ldrb	r3, [r3, #0]
   10bf0:	0211      	lsls	r1, r2, #8
   10bf2:	4319      	orrs	r1, r3
   10bf4:	7828      	ldrb	r0, [r5, #0]
   10bf6:	4b22      	ldr	r3, [pc, #136]	; (10c80 <LorawanConfigureRadioForRX2+0xb8>)
   10bf8:	4798      	blx	r3
   10bfa:	2300      	movs	r3, #0
   10bfc:	0022      	movs	r2, r4
   10bfe:	af01      	add	r7, sp, #4
   10c00:	703b      	strb	r3, [r7, #0]
   10c02:	32fd      	adds	r2, #253	; 0xfd
   10c04:	7812      	ldrb	r2, [r2, #0]
   10c06:	2a04      	cmp	r2, #4
   10c08:	d130      	bne.n	10c6c <LorawanConfigureRadioForRX2+0xa4>
   10c0a:	0022      	movs	r2, r4
   10c0c:	3284      	adds	r2, #132	; 0x84
   10c0e:	7812      	ldrb	r2, [r2, #0]
   10c10:	07d2      	lsls	r2, r2, #31
   10c12:	d52b      	bpl.n	10c6c <LorawanConfigureRadioForRX2+0xa4>
   10c14:	2290      	movs	r2, #144	; 0x90
   10c16:	0092      	lsls	r2, r2, #2
   10c18:	5ca2      	ldrb	r2, [r4, r2]
   10c1a:	429a      	cmp	r2, r3
   10c1c:	d026      	beq.n	10c6c <LorawanConfigureRadioForRX2+0xa4>
   10c1e:	807b      	strh	r3, [r7, #2]
   10c20:	0038      	movs	r0, r7
   10c22:	4b18      	ldr	r3, [pc, #96]	; (10c84 <LorawanConfigureRadioForRX2+0xbc>)
   10c24:	4798      	blx	r3
   10c26:	1e04      	subs	r4, r0, #0
   10c28:	d00a      	beq.n	10c40 <LorawanConfigureRadioForRX2+0x78>
   10c2a:	4b17      	ldr	r3, [pc, #92]	; (10c88 <LorawanConfigureRadioForRX2+0xc0>)
   10c2c:	4798      	blx	r3
   10c2e:	4b17      	ldr	r3, [pc, #92]	; (10c8c <LorawanConfigureRadioForRX2+0xc4>)
   10c30:	4798      	blx	r3
   10c32:	4b17      	ldr	r3, [pc, #92]	; (10c90 <LorawanConfigureRadioForRX2+0xc8>)
   10c34:	4798      	blx	r3
   10c36:	2e00      	cmp	r6, #0
   10c38:	d002      	beq.n	10c40 <LorawanConfigureRadioForRX2+0x78>
   10c3a:	0020      	movs	r0, r4
   10c3c:	4b15      	ldr	r3, [pc, #84]	; (10c94 <LorawanConfigureRadioForRX2+0xcc>)
   10c3e:	4798      	blx	r3
   10c40:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   10c42:	3394      	adds	r3, #148	; 0x94
   10c44:	781b      	ldrb	r3, [r3, #0]
   10c46:	075b      	lsls	r3, r3, #29
   10c48:	d50b      	bpl.n	10c62 <LorawanConfigureRadioForRX2+0x9a>
   10c4a:	002a      	movs	r2, r5
   10c4c:	2009      	movs	r0, #9
   10c4e:	4b12      	ldr	r3, [pc, #72]	; (10c98 <LorawanConfigureRadioForRX2+0xd0>)
   10c50:	4798      	blx	r3
   10c52:	0022      	movs	r2, r4
   10c54:	0023      	movs	r3, r4
   10c56:	326c      	adds	r2, #108	; 0x6c
   10c58:	8811      	ldrh	r1, [r2, #0]
   10c5a:	336a      	adds	r3, #106	; 0x6a
   10c5c:	881b      	ldrh	r3, [r3, #0]
   10c5e:	0409      	lsls	r1, r1, #16
   10c60:	e7c7      	b.n	10bf2 <LorawanConfigureRadioForRX2+0x2a>
   10c62:	0023      	movs	r3, r4
   10c64:	336e      	adds	r3, #110	; 0x6e
   10c66:	781b      	ldrb	r3, [r3, #0]
   10c68:	702b      	strb	r3, [r5, #0]
   10c6a:	e7f2      	b.n	10c52 <LorawanConfigureRadioForRX2+0x8a>
   10c6c:	466b      	mov	r3, sp
   10c6e:	0029      	movs	r1, r5
   10c70:	1d9a      	adds	r2, r3, #6
   10c72:	2003      	movs	r0, #3
   10c74:	4b08      	ldr	r3, [pc, #32]	; (10c98 <LorawanConfigureRadioForRX2+0xd0>)
   10c76:	4798      	blx	r3
   10c78:	e7d2      	b.n	10c20 <LorawanConfigureRadioForRX2+0x58>
   10c7a:	46c0      	nop			; (mov r8, r8)
   10c7c:	20003170 	.word	0x20003170
   10c80:	000102b5 	.word	0x000102b5
   10c84:	0000eeb9 	.word	0x0000eeb9
   10c88:	0000fd95 	.word	0x0000fd95
   10c8c:	0000fdc5 	.word	0x0000fdc5
   10c90:	0000f4d1 	.word	0x0000f4d1
   10c94:	00010789 	.word	0x00010789
   10c98:	0000c665 	.word	0x0000c665

00010c9c <SetReceptionNotOkState>:
   10c9c:	4a0c      	ldr	r2, [pc, #48]	; (10cd0 <SetReceptionNotOkState+0x34>)
   10c9e:	b510      	push	{r4, lr}
   10ca0:	0013      	movs	r3, r2
   10ca2:	33fd      	adds	r3, #253	; 0xfd
   10ca4:	7819      	ldrb	r1, [r3, #0]
   10ca6:	0013      	movs	r3, r2
   10ca8:	4c0a      	ldr	r4, [pc, #40]	; (10cd4 <SetReceptionNotOkState+0x38>)
   10caa:	3384      	adds	r3, #132	; 0x84
   10cac:	2904      	cmp	r1, #4
   10cae:	d105      	bne.n	10cbc <SetReceptionNotOkState+0x20>
   10cb0:	2088      	movs	r0, #136	; 0x88
   10cb2:	3903      	subs	r1, #3
   10cb4:	0080      	lsls	r0, r0, #2
   10cb6:	5411      	strb	r1, [r2, r0]
   10cb8:	3020      	adds	r0, #32
   10cba:	5411      	strb	r1, [r2, r0]
   10cbc:	210e      	movs	r1, #14
   10cbe:	781a      	ldrb	r2, [r3, #0]
   10cc0:	2000      	movs	r0, #0
   10cc2:	438a      	bics	r2, r1
   10cc4:	0011      	movs	r1, r2
   10cc6:	220a      	movs	r2, #10
   10cc8:	430a      	orrs	r2, r1
   10cca:	701a      	strb	r2, [r3, #0]
   10ccc:	47a0      	blx	r4
   10cce:	bd10      	pop	{r4, pc}
   10cd0:	20003170 	.word	0x20003170
   10cd4:	00010bc9 	.word	0x00010bc9

00010cd8 <LorawanProcessFcntDown>:
   10cd8:	b570      	push	{r4, r5, r6, lr}
   10cda:	79c3      	ldrb	r3, [r0, #7]
   10cdc:	7982      	ldrb	r2, [r0, #6]
   10cde:	4c1f      	ldr	r4, [pc, #124]	; (10d5c <LorawanProcessFcntDown+0x84>)
   10ce0:	021b      	lsls	r3, r3, #8
   10ce2:	4313      	orrs	r3, r2
   10ce4:	0022      	movs	r2, r4
   10ce6:	218b      	movs	r1, #139	; 0x8b
   10ce8:	328c      	adds	r2, #140	; 0x8c
   10cea:	8810      	ldrh	r0, [r2, #0]
   10cec:	0089      	lsls	r1, r1, #2
   10cee:	8013      	strh	r3, [r2, #0]
   10cf0:	4298      	cmp	r0, r3
   10cf2:	d80f      	bhi.n	10d14 <LorawanProcessFcntDown+0x3c>
   10cf4:	5c61      	ldrb	r1, [r4, r1]
   10cf6:	2900      	cmp	r1, #0
   10cf8:	d007      	beq.n	10d0a <LorawanProcessFcntDown+0x32>
   10cfa:	2301      	movs	r3, #1
   10cfc:	408b      	lsls	r3, r1
   10cfe:	6812      	ldr	r2, [r2, #0]
   10d00:	3b01      	subs	r3, #1
   10d02:	421a      	tst	r2, r3
   10d04:	d001      	beq.n	10d0a <LorawanProcessFcntDown+0x32>
   10d06:	2008      	movs	r0, #8
   10d08:	bd70      	pop	{r4, r5, r6, pc}
   10d0a:	210a      	movs	r1, #10
   10d0c:	4b14      	ldr	r3, [pc, #80]	; (10d60 <LorawanProcessFcntDown+0x88>)
   10d0e:	2001      	movs	r0, #1
   10d10:	4798      	blx	r3
   10d12:	e7f8      	b.n	10d06 <LorawanProcessFcntDown+0x2e>
   10d14:	0020      	movs	r0, r4
   10d16:	308e      	adds	r0, #142	; 0x8e
   10d18:	8803      	ldrh	r3, [r0, #0]
   10d1a:	3301      	adds	r3, #1
   10d1c:	8003      	strh	r3, [r0, #0]
   10d1e:	5c61      	ldrb	r1, [r4, r1]
   10d20:	2900      	cmp	r1, #0
   10d22:	d005      	beq.n	10d30 <LorawanProcessFcntDown+0x58>
   10d24:	2301      	movs	r3, #1
   10d26:	408b      	lsls	r3, r1
   10d28:	6812      	ldr	r2, [r2, #0]
   10d2a:	3b01      	subs	r3, #1
   10d2c:	421a      	tst	r2, r3
   10d2e:	d103      	bne.n	10d38 <LorawanProcessFcntDown+0x60>
   10d30:	210a      	movs	r1, #10
   10d32:	2001      	movs	r0, #1
   10d34:	4b0a      	ldr	r3, [pc, #40]	; (10d60 <LorawanProcessFcntDown+0x88>)
   10d36:	4798      	blx	r3
   10d38:	0023      	movs	r3, r4
   10d3a:	338c      	adds	r3, #140	; 0x8c
   10d3c:	681b      	ldr	r3, [r3, #0]
   10d3e:	3301      	adds	r3, #1
   10d40:	d1e1      	bne.n	10d06 <LorawanProcessFcntDown+0x2e>
   10d42:	2501      	movs	r5, #1
   10d44:	3484      	adds	r4, #132	; 0x84
   10d46:	78a3      	ldrb	r3, [r4, #2]
   10d48:	432b      	orrs	r3, r5
   10d4a:	70a3      	strb	r3, [r4, #2]
   10d4c:	4b05      	ldr	r3, [pc, #20]	; (10d64 <LorawanProcessFcntDown+0x8c>)
   10d4e:	4798      	blx	r3
   10d50:	210b      	movs	r1, #11
   10d52:	0028      	movs	r0, r5
   10d54:	4b02      	ldr	r3, [pc, #8]	; (10d60 <LorawanProcessFcntDown+0x88>)
   10d56:	4798      	blx	r3
   10d58:	200d      	movs	r0, #13
   10d5a:	e7d5      	b.n	10d08 <LorawanProcessFcntDown+0x30>
   10d5c:	20003170 	.word	0x20003170
   10d60:	00008d09 	.word	0x00008d09
   10d64:	00010c9d 	.word	0x00010c9d

00010d68 <UpdateCurrentDataRateAfterDataRangeChanges>:
   10d68:	4b09      	ldr	r3, [pc, #36]	; (10d90 <UpdateCurrentDataRateAfterDataRangeChanges+0x28>)
   10d6a:	001a      	movs	r2, r3
   10d6c:	32f4      	adds	r2, #244	; 0xf4
   10d6e:	7811      	ldrb	r1, [r2, #0]
   10d70:	001a      	movs	r2, r3
   10d72:	32e7      	adds	r2, #231	; 0xe7
   10d74:	7810      	ldrb	r0, [r2, #0]
   10d76:	4288      	cmp	r0, r1
   10d78:	d900      	bls.n	10d7c <UpdateCurrentDataRateAfterDataRangeChanges+0x14>
   10d7a:	7011      	strb	r1, [r2, #0]
   10d7c:	001a      	movs	r2, r3
   10d7e:	33e7      	adds	r3, #231	; 0xe7
   10d80:	32f3      	adds	r2, #243	; 0xf3
   10d82:	7812      	ldrb	r2, [r2, #0]
   10d84:	7819      	ldrb	r1, [r3, #0]
   10d86:	4291      	cmp	r1, r2
   10d88:	d200      	bcs.n	10d8c <UpdateCurrentDataRateAfterDataRangeChanges+0x24>
   10d8a:	701a      	strb	r2, [r3, #0]
   10d8c:	4770      	bx	lr
   10d8e:	46c0      	nop			; (mov r8, r8)
   10d90:	20003170 	.word	0x20003170

00010d94 <ExecuteNewChannel>:
   10d94:	b5f0      	push	{r4, r5, r6, r7, lr}
   10d96:	b08d      	sub	sp, #52	; 0x34
   10d98:	7807      	ldrb	r7, [r0, #0]
   10d9a:	ab02      	add	r3, sp, #8
   10d9c:	0006      	movs	r6, r0
   10d9e:	71df      	strb	r7, [r3, #7]
   10da0:	1c41      	adds	r1, r0, #1
   10da2:	4b59      	ldr	r3, [pc, #356]	; (10f08 <ExecuteNewChannel+0x174>)
   10da4:	2204      	movs	r2, #4
   10da6:	a808      	add	r0, sp, #32
   10da8:	4798      	blx	r3
   10daa:	9b08      	ldr	r3, [sp, #32]
   10dac:	4c57      	ldr	r4, [pc, #348]	; (10f0c <ExecuteNewChannel+0x178>)
   10dae:	021d      	lsls	r5, r3, #8
   10db0:	2364      	movs	r3, #100	; 0x64
   10db2:	0a2d      	lsrs	r5, r5, #8
   10db4:	435d      	muls	r5, r3
   10db6:	1d73      	adds	r3, r6, #5
   10db8:	9301      	str	r3, [sp, #4]
   10dba:	0023      	movs	r3, r4
   10dbc:	9508      	str	r5, [sp, #32]
   10dbe:	33ff      	adds	r3, #255	; 0xff
   10dc0:	781b      	ldrb	r3, [r3, #0]
   10dc2:	3b02      	subs	r3, #2
   10dc4:	2b01      	cmp	r3, #1
   10dc6:	d800      	bhi.n	10dca <ExecuteNewChannel+0x36>
   10dc8:	e092      	b.n	10ef0 <ExecuteNewChannel+0x15c>
   10dca:	7933      	ldrb	r3, [r6, #4]
   10dcc:	a904      	add	r1, sp, #16
   10dce:	9300      	str	r3, [sp, #0]
   10dd0:	2300      	movs	r3, #0
   10dd2:	2015      	movs	r0, #21
   10dd4:	4e4e      	ldr	r6, [pc, #312]	; (10f10 <ExecuteNewChannel+0x17c>)
   10dd6:	700f      	strb	r7, [r1, #0]
   10dd8:	704b      	strb	r3, [r1, #1]
   10dda:	47b0      	blx	r6
   10ddc:	2808      	cmp	r0, #8
   10dde:	d12b      	bne.n	10e38 <ExecuteNewChannel+0xa4>
   10de0:	466a      	mov	r2, sp
   10de2:	ab02      	add	r3, sp, #8
   10de4:	79db      	ldrb	r3, [r3, #7]
   10de6:	7812      	ldrb	r2, [r2, #0]
   10de8:	af06      	add	r7, sp, #24
   10dea:	a90a      	add	r1, sp, #40	; 0x28
   10dec:	3806      	subs	r0, #6
   10dee:	703b      	strb	r3, [r7, #0]
   10df0:	707a      	strb	r2, [r7, #1]
   10df2:	710b      	strb	r3, [r1, #4]
   10df4:	950a      	str	r5, [sp, #40]	; 0x28
   10df6:	47b0      	blx	r6
   10df8:	2808      	cmp	r0, #8
   10dfa:	d001      	beq.n	10e00 <ExecuteNewChannel+0x6c>
   10dfc:	2d00      	cmp	r5, #0
   10dfe:	d10b      	bne.n	10e18 <ExecuteNewChannel+0x84>
   10e00:	0023      	movs	r3, r4
   10e02:	33e0      	adds	r3, #224	; 0xe0
   10e04:	781a      	ldrb	r2, [r3, #0]
   10e06:	2303      	movs	r3, #3
   10e08:	4353      	muls	r3, r2
   10e0a:	2280      	movs	r2, #128	; 0x80
   10e0c:	18e3      	adds	r3, r4, r3
   10e0e:	3398      	adds	r3, #152	; 0x98
   10e10:	7899      	ldrb	r1, [r3, #2]
   10e12:	4252      	negs	r2, r2
   10e14:	430a      	orrs	r2, r1
   10e16:	709a      	strb	r2, [r3, #2]
   10e18:	0039      	movs	r1, r7
   10e1a:	2012      	movs	r0, #18
   10e1c:	47b0      	blx	r6
   10e1e:	2808      	cmp	r0, #8
   10e20:	d10a      	bne.n	10e38 <ExecuteNewChannel+0xa4>
   10e22:	0023      	movs	r3, r4
   10e24:	33e0      	adds	r3, #224	; 0xe0
   10e26:	781a      	ldrb	r2, [r3, #0]
   10e28:	2303      	movs	r3, #3
   10e2a:	4353      	muls	r3, r2
   10e2c:	2240      	movs	r2, #64	; 0x40
   10e2e:	18e3      	adds	r3, r4, r3
   10e30:	3398      	adds	r3, #152	; 0x98
   10e32:	7899      	ldrb	r1, [r3, #2]
   10e34:	430a      	orrs	r2, r1
   10e36:	709a      	strb	r2, [r3, #2]
   10e38:	0023      	movs	r3, r4
   10e3a:	33e0      	adds	r3, #224	; 0xe0
   10e3c:	781a      	ldrb	r2, [r3, #0]
   10e3e:	2303      	movs	r3, #3
   10e40:	4353      	muls	r3, r2
   10e42:	18e3      	adds	r3, r4, r3
   10e44:	3398      	adds	r3, #152	; 0x98
   10e46:	789b      	ldrb	r3, [r3, #2]
   10e48:	09da      	lsrs	r2, r3, #7
   10e4a:	2a01      	cmp	r2, #1
   10e4c:	d150      	bne.n	10ef0 <ExecuteNewChannel+0x15c>
   10e4e:	065b      	lsls	r3, r3, #25
   10e50:	d54e      	bpl.n	10ef0 <ExecuteNewChannel+0x15c>
   10e52:	4e30      	ldr	r6, [pc, #192]	; (10f14 <ExecuteNewChannel+0x180>)
   10e54:	2d00      	cmp	r5, #0
   10e56:	d04e      	beq.n	10ef6 <ExecuteNewChannel+0x162>
   10e58:	a906      	add	r1, sp, #24
   10e5a:	2012      	movs	r0, #18
   10e5c:	47b0      	blx	r6
   10e5e:	ad07      	add	r5, sp, #28
   10e60:	a90a      	add	r1, sp, #40	; 0x28
   10e62:	2000      	movs	r0, #0
   10e64:	47b0      	blx	r6
   10e66:	002a      	movs	r2, r5
   10e68:	2100      	movs	r1, #0
   10e6a:	2014      	movs	r0, #20
   10e6c:	4f2a      	ldr	r7, [pc, #168]	; (10f18 <ExecuteNewChannel+0x184>)
   10e6e:	47b8      	blx	r7
   10e70:	0023      	movs	r3, r4
   10e72:	782a      	ldrb	r2, [r5, #0]
   10e74:	33f3      	adds	r3, #243	; 0xf3
   10e76:	701a      	strb	r2, [r3, #0]
   10e78:	0023      	movs	r3, r4
   10e7a:	786a      	ldrb	r2, [r5, #1]
   10e7c:	33f4      	adds	r3, #244	; 0xf4
   10e7e:	701a      	strb	r2, [r3, #0]
   10e80:	34ff      	adds	r4, #255	; 0xff
   10e82:	4b26      	ldr	r3, [pc, #152]	; (10f1c <ExecuteNewChannel+0x188>)
   10e84:	4798      	blx	r3
   10e86:	7f63      	ldrb	r3, [r4, #29]
   10e88:	079b      	lsls	r3, r3, #30
   10e8a:	d50e      	bpl.n	10eaa <ExecuteNewChannel+0x116>
   10e8c:	2416      	movs	r4, #22
   10e8e:	ab02      	add	r3, sp, #8
   10e90:	18e4      	adds	r4, r4, r3
   10e92:	1dd9      	adds	r1, r3, #7
   10e94:	0022      	movs	r2, r4
   10e96:	201e      	movs	r0, #30
   10e98:	47b8      	blx	r7
   10e9a:	ab02      	add	r3, sp, #8
   10e9c:	79db      	ldrb	r3, [r3, #7]
   10e9e:	a909      	add	r1, sp, #36	; 0x24
   10ea0:	708b      	strb	r3, [r1, #2]
   10ea2:	8823      	ldrh	r3, [r4, #0]
   10ea4:	201e      	movs	r0, #30
   10ea6:	800b      	strh	r3, [r1, #0]
   10ea8:	47b0      	blx	r6
   10eaa:	ab02      	add	r3, sp, #8
   10eac:	79db      	ldrb	r3, [r3, #7]
   10eae:	a905      	add	r1, sp, #20
   10eb0:	700b      	strb	r3, [r1, #0]
   10eb2:	2301      	movs	r3, #1
   10eb4:	2016      	movs	r0, #22
   10eb6:	704b      	strb	r3, [r1, #1]
   10eb8:	4b16      	ldr	r3, [pc, #88]	; (10f14 <ExecuteNewChannel+0x180>)
   10eba:	4798      	blx	r3
   10ebc:	ad09      	add	r5, sp, #36	; 0x24
   10ebe:	2100      	movs	r1, #0
   10ec0:	002a      	movs	r2, r5
   10ec2:	4b15      	ldr	r3, [pc, #84]	; (10f18 <ExecuteNewChannel+0x184>)
   10ec4:	2014      	movs	r0, #20
   10ec6:	4798      	blx	r3
   10ec8:	4c10      	ldr	r4, [pc, #64]	; (10f0c <ExecuteNewChannel+0x178>)
   10eca:	782a      	ldrb	r2, [r5, #0]
   10ecc:	0023      	movs	r3, r4
   10ece:	33f3      	adds	r3, #243	; 0xf3
   10ed0:	701a      	strb	r2, [r3, #0]
   10ed2:	0023      	movs	r3, r4
   10ed4:	786a      	ldrb	r2, [r5, #1]
   10ed6:	33f4      	adds	r3, #244	; 0xf4
   10ed8:	701a      	strb	r2, [r3, #0]
   10eda:	4b10      	ldr	r3, [pc, #64]	; (10f1c <ExecuteNewChannel+0x188>)
   10edc:	4798      	blx	r3
   10ede:	2304      	movs	r3, #4
   10ee0:	3484      	adds	r4, #132	; 0x84
   10ee2:	7862      	ldrb	r2, [r4, #1]
   10ee4:	210b      	movs	r1, #11
   10ee6:	4313      	orrs	r3, r2
   10ee8:	7063      	strb	r3, [r4, #1]
   10eea:	2001      	movs	r0, #1
   10eec:	4b0c      	ldr	r3, [pc, #48]	; (10f20 <ExecuteNewChannel+0x18c>)
   10eee:	4798      	blx	r3
   10ef0:	9801      	ldr	r0, [sp, #4]
   10ef2:	b00d      	add	sp, #52	; 0x34
   10ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10ef6:	ab02      	add	r3, sp, #8
   10ef8:	79db      	ldrb	r3, [r3, #7]
   10efa:	a905      	add	r1, sp, #20
   10efc:	2016      	movs	r0, #22
   10efe:	700b      	strb	r3, [r1, #0]
   10f00:	704d      	strb	r5, [r1, #1]
   10f02:	47b0      	blx	r6
   10f04:	e7da      	b.n	10ebc <ExecuteNewChannel+0x128>
   10f06:	46c0      	nop			; (mov r8, r8)
   10f08:	0001613f 	.word	0x0001613f
   10f0c:	20003170 	.word	0x20003170
   10f10:	0000c681 	.word	0x0000c681
   10f14:	0000c69d 	.word	0x0000c69d
   10f18:	0000c665 	.word	0x0000c665
   10f1c:	00010d69 	.word	0x00010d69
   10f20:	00008d09 	.word	0x00008d09

00010f24 <MacExecuteCommands>:
   10f24:	b5f0      	push	{r4, r5, r6, r7, lr}
   10f26:	1843      	adds	r3, r0, r1
   10f28:	b087      	sub	sp, #28
   10f2a:	9301      	str	r3, [sp, #4]
   10f2c:	2300      	movs	r3, #0
   10f2e:	0007      	movs	r7, r0
   10f30:	2501      	movs	r5, #1
   10f32:	9302      	str	r3, [sp, #8]
   10f34:	9b01      	ldr	r3, [sp, #4]
   10f36:	4e71      	ldr	r6, [pc, #452]	; (110fc <MacExecuteCommands+0x1d8>)
   10f38:	429f      	cmp	r7, r3
   10f3a:	d362      	bcc.n	11002 <MacExecuteCommands+0xde>
   10f3c:	4b70      	ldr	r3, [pc, #448]	; (11100 <MacExecuteCommands+0x1dc>)
   10f3e:	5cf3      	ldrb	r3, [r6, r3]
   10f40:	2b00      	cmp	r3, #0
   10f42:	d000      	beq.n	10f46 <MacExecuteCommands+0x22>
   10f44:	e08f      	b.n	11066 <MacExecuteCommands+0x142>
   10f46:	0038      	movs	r0, r7
   10f48:	b007      	add	sp, #28
   10f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10f4c:	0032      	movs	r2, r6
   10f4e:	7879      	ldrb	r1, [r7, #1]
   10f50:	32e5      	adds	r2, #229	; 0xe5
   10f52:	7011      	strb	r1, [r2, #0]
   10f54:	0032      	movs	r2, r6
   10f56:	78b9      	ldrb	r1, [r7, #2]
   10f58:	32e6      	adds	r2, #230	; 0xe6
   10f5a:	1cfc      	adds	r4, r7, #3
   10f5c:	7011      	strb	r1, [r2, #0]
   10f5e:	2203      	movs	r2, #3
   10f60:	4353      	muls	r3, r2
   10f62:	18f3      	adds	r3, r6, r3
   10f64:	3399      	adds	r3, #153	; 0x99
   10f66:	32fc      	adds	r2, #252	; 0xfc
   10f68:	701a      	strb	r2, [r3, #0]
   10f6a:	e020      	b.n	10fae <MacExecuteCommands+0x8a>
   10f6c:	0020      	movs	r0, r4
   10f6e:	4b65      	ldr	r3, [pc, #404]	; (11104 <MacExecuteCommands+0x1e0>)
   10f70:	4798      	blx	r3
   10f72:	0004      	movs	r4, r0
   10f74:	e01b      	b.n	10fae <MacExecuteCommands+0x8a>
   10f76:	0020      	movs	r0, r4
   10f78:	4b63      	ldr	r3, [pc, #396]	; (11108 <MacExecuteCommands+0x1e4>)
   10f7a:	e7f9      	b.n	10f70 <MacExecuteCommands+0x4c>
   10f7c:	0020      	movs	r0, r4
   10f7e:	4b63      	ldr	r3, [pc, #396]	; (1110c <MacExecuteCommands+0x1e8>)
   10f80:	e7f6      	b.n	10f70 <MacExecuteCommands+0x4c>
   10f82:	0020      	movs	r0, r4
   10f84:	4b62      	ldr	r3, [pc, #392]	; (11110 <MacExecuteCommands+0x1ec>)
   10f86:	e7f3      	b.n	10f70 <MacExecuteCommands+0x4c>
   10f88:	7878      	ldrb	r0, [r7, #1]
   10f8a:	230f      	movs	r3, #15
   10f8c:	0002      	movs	r2, r0
   10f8e:	1cbc      	adds	r4, r7, #2
   10f90:	439a      	bics	r2, r3
   10f92:	d10c      	bne.n	10fae <MacExecuteCommands+0x8a>
   10f94:	4b5f      	ldr	r3, [pc, #380]	; (11114 <MacExecuteCommands+0x1f0>)
   10f96:	4798      	blx	r3
   10f98:	0032      	movs	r2, r6
   10f9a:	2380      	movs	r3, #128	; 0x80
   10f9c:	3284      	adds	r2, #132	; 0x84
   10f9e:	7851      	ldrb	r1, [r2, #1]
   10fa0:	425b      	negs	r3, r3
   10fa2:	430b      	orrs	r3, r1
   10fa4:	7053      	strb	r3, [r2, #1]
   10fa6:	210b      	movs	r1, #11
   10fa8:	0028      	movs	r0, r5
   10faa:	4b5b      	ldr	r3, [pc, #364]	; (11118 <MacExecuteCommands+0x1f4>)
   10fac:	4798      	blx	r3
   10fae:	0032      	movs	r2, r6
   10fb0:	2103      	movs	r1, #3
   10fb2:	32e0      	adds	r2, #224	; 0xe0
   10fb4:	7813      	ldrb	r3, [r2, #0]
   10fb6:	4359      	muls	r1, r3
   10fb8:	1876      	adds	r6, r6, r1
   10fba:	3699      	adds	r6, #153	; 0x99
   10fbc:	7831      	ldrb	r1, [r6, #0]
   10fbe:	29ff      	cmp	r1, #255	; 0xff
   10fc0:	d003      	beq.n	10fca <MacExecuteCommands+0xa6>
   10fc2:	2b0f      	cmp	r3, #15
   10fc4:	d801      	bhi.n	10fca <MacExecuteCommands+0xa6>
   10fc6:	3301      	adds	r3, #1
   10fc8:	7013      	strb	r3, [r2, #0]
   10fca:	0027      	movs	r7, r4
   10fcc:	e7b2      	b.n	10f34 <MacExecuteCommands+0x10>
   10fce:	0020      	movs	r0, r4
   10fd0:	4b52      	ldr	r3, [pc, #328]	; (1111c <MacExecuteCommands+0x1f8>)
   10fd2:	e7cd      	b.n	10f70 <MacExecuteCommands+0x4c>
   10fd4:	0020      	movs	r0, r4
   10fd6:	4b52      	ldr	r3, [pc, #328]	; (11120 <MacExecuteCommands+0x1fc>)
   10fd8:	e7ca      	b.n	10f70 <MacExecuteCommands+0x4c>
   10fda:	0020      	movs	r0, r4
   10fdc:	4b51      	ldr	r3, [pc, #324]	; (11124 <MacExecuteCommands+0x200>)
   10fde:	4798      	blx	r3
   10fe0:	0033      	movs	r3, r6
   10fe2:	33e0      	adds	r3, #224	; 0xe0
   10fe4:	0004      	movs	r4, r0
   10fe6:	781b      	ldrb	r3, [r3, #0]
   10fe8:	e7b9      	b.n	10f5e <MacExecuteCommands+0x3a>
   10fea:	2203      	movs	r2, #3
   10fec:	4353      	muls	r3, r2
   10fee:	18f3      	adds	r3, r6, r3
   10ff0:	3399      	adds	r3, #153	; 0x99
   10ff2:	32fc      	adds	r2, #252	; 0xfc
   10ff4:	701a      	strb	r2, [r3, #0]
   10ff6:	9c01      	ldr	r4, [sp, #4]
   10ff8:	9502      	str	r5, [sp, #8]
   10ffa:	e7d8      	b.n	10fae <MacExecuteCommands+0x8a>
   10ffc:	23ff      	movs	r3, #255	; 0xff
   10ffe:	7013      	strb	r3, [r2, #0]
   11000:	e7f9      	b.n	10ff6 <MacExecuteCommands+0xd2>
   11002:	9b02      	ldr	r3, [sp, #8]
   11004:	2b00      	cmp	r3, #0
   11006:	d199      	bne.n	10f3c <MacExecuteCommands+0x18>
   11008:	0033      	movs	r3, r6
   1100a:	2203      	movs	r2, #3
   1100c:	33e0      	adds	r3, #224	; 0xe0
   1100e:	781b      	ldrb	r3, [r3, #0]
   11010:	2401      	movs	r4, #1
   11012:	435a      	muls	r2, r3
   11014:	18b2      	adds	r2, r6, r2
   11016:	0010      	movs	r0, r2
   11018:	3098      	adds	r0, #152	; 0x98
   1101a:	7881      	ldrb	r1, [r0, #2]
   1101c:	3299      	adds	r2, #153	; 0x99
   1101e:	43a9      	bics	r1, r5
   11020:	4021      	ands	r1, r4
   11022:	7081      	strb	r1, [r0, #2]
   11024:	78c1      	ldrb	r1, [r0, #3]
   11026:	193c      	adds	r4, r7, r4
   11028:	43a9      	bics	r1, r5
   1102a:	70c1      	strb	r1, [r0, #3]
   1102c:	7839      	ldrb	r1, [r7, #0]
   1102e:	7011      	strb	r1, [r2, #0]
   11030:	7838      	ldrb	r0, [r7, #0]
   11032:	493d      	ldr	r1, [pc, #244]	; (11128 <MacExecuteCommands+0x204>)
   11034:	1809      	adds	r1, r1, r0
   11036:	3902      	subs	r1, #2
   11038:	7809      	ldrb	r1, [r1, #0]
   1103a:	1861      	adds	r1, r4, r1
   1103c:	468c      	mov	ip, r1
   1103e:	9901      	ldr	r1, [sp, #4]
   11040:	4561      	cmp	r1, ip
   11042:	d3db      	bcc.n	10ffc <MacExecuteCommands+0xd8>
   11044:	3802      	subs	r0, #2
   11046:	280b      	cmp	r0, #11
   11048:	d8cf      	bhi.n	10fea <MacExecuteCommands+0xc6>
   1104a:	f001 ff33 	bl	12eb4 <__gnu_thumb1_case_shi>
   1104e:	ff7f      	.short	0xff7f
   11050:	ff94ff8f 	.word	0xff94ff8f
   11054:	ffb0ff97 	.word	0xffb0ff97
   11058:	ff9dff9a 	.word	0xff9dff9a
   1105c:	ffc3ffc0 	.word	0xffc3ffc0
   11060:	ffceffce 	.word	0xffceffce
   11064:	ffc6      	.short	0xffc6
   11066:	4b31      	ldr	r3, [pc, #196]	; (1112c <MacExecuteCommands+0x208>)
   11068:	5cf3      	ldrb	r3, [r6, r3]
   1106a:	43db      	mvns	r3, r3
   1106c:	075b      	lsls	r3, r3, #29
   1106e:	d000      	beq.n	11072 <MacExecuteCommands+0x14e>
   11070:	e769      	b.n	10f46 <MacExecuteCommands+0x22>
   11072:	4b2f      	ldr	r3, [pc, #188]	; (11130 <MacExecuteCommands+0x20c>)
   11074:	ad05      	add	r5, sp, #20
   11076:	5cf4      	ldrb	r4, [r6, r3]
   11078:	2100      	movs	r1, #0
   1107a:	0724      	lsls	r4, r4, #28
   1107c:	0f24      	lsrs	r4, r4, #28
   1107e:	b2e3      	uxtb	r3, r4
   11080:	9301      	str	r3, [sp, #4]
   11082:	4b2c      	ldr	r3, [pc, #176]	; (11134 <MacExecuteCommands+0x210>)
   11084:	002a      	movs	r2, r5
   11086:	5cf3      	ldrb	r3, [r6, r3]
   11088:	2014      	movs	r0, #20
   1108a:	9302      	str	r3, [sp, #8]
   1108c:	2389      	movs	r3, #137	; 0x89
   1108e:	009b      	lsls	r3, r3, #2
   11090:	5cf3      	ldrb	r3, [r6, r3]
   11092:	9303      	str	r3, [sp, #12]
   11094:	4b28      	ldr	r3, [pc, #160]	; (11138 <MacExecuteCommands+0x214>)
   11096:	4798      	blx	r3
   11098:	0033      	movs	r3, r6
   1109a:	782a      	ldrb	r2, [r5, #0]
   1109c:	33f3      	adds	r3, #243	; 0xf3
   1109e:	701a      	strb	r2, [r3, #0]
   110a0:	0033      	movs	r3, r6
   110a2:	786a      	ldrb	r2, [r5, #1]
   110a4:	33f4      	adds	r3, #244	; 0xf4
   110a6:	701a      	strb	r2, [r3, #0]
   110a8:	4b24      	ldr	r3, [pc, #144]	; (1113c <MacExecuteCommands+0x218>)
   110aa:	4798      	blx	r3
   110ac:	9802      	ldr	r0, [sp, #8]
   110ae:	4b24      	ldr	r3, [pc, #144]	; (11140 <MacExecuteCommands+0x21c>)
   110b0:	4798      	blx	r3
   110b2:	0032      	movs	r2, r6
   110b4:	2308      	movs	r3, #8
   110b6:	3284      	adds	r2, #132	; 0x84
   110b8:	7851      	ldrb	r1, [r2, #1]
   110ba:	430b      	orrs	r3, r1
   110bc:	7053      	strb	r3, [r2, #1]
   110be:	9803      	ldr	r0, [sp, #12]
   110c0:	4b20      	ldr	r3, [pc, #128]	; (11144 <MacExecuteCommands+0x220>)
   110c2:	4798      	blx	r3
   110c4:	0033      	movs	r3, r6
   110c6:	b2e2      	uxtb	r2, r4
   110c8:	33e1      	adds	r3, #225	; 0xe1
   110ca:	2a00      	cmp	r2, #0
   110cc:	d10e      	bne.n	110ec <MacExecuteCommands+0x1c8>
   110ce:	701c      	strb	r4, [r3, #0]
   110d0:	2113      	movs	r1, #19
   110d2:	4c11      	ldr	r4, [pc, #68]	; (11118 <MacExecuteCommands+0x1f4>)
   110d4:	2000      	movs	r0, #0
   110d6:	47a0      	blx	r4
   110d8:	2210      	movs	r2, #16
   110da:	4b08      	ldr	r3, [pc, #32]	; (110fc <MacExecuteCommands+0x1d8>)
   110dc:	2001      	movs	r0, #1
   110de:	3384      	adds	r3, #132	; 0x84
   110e0:	7859      	ldrb	r1, [r3, #1]
   110e2:	430a      	orrs	r2, r1
   110e4:	705a      	strb	r2, [r3, #1]
   110e6:	210b      	movs	r1, #11
   110e8:	47a0      	blx	r4
   110ea:	e72c      	b.n	10f46 <MacExecuteCommands+0x22>
   110ec:	9a01      	ldr	r2, [sp, #4]
   110ee:	3a01      	subs	r2, #1
   110f0:	b2d2      	uxtb	r2, r2
   110f2:	701a      	strb	r2, [r3, #0]
   110f4:	0033      	movs	r3, r6
   110f6:	33e2      	adds	r3, #226	; 0xe2
   110f8:	701a      	strb	r2, [r3, #0]
   110fa:	e7e9      	b.n	110d0 <MacExecuteCommands+0x1ac>
   110fc:	20003170 	.word	0x20003170
   11100:	00000226 	.word	0x00000226
   11104:	00010085 	.word	0x00010085
   11108:	0000ff49 	.word	0x0000ff49
   1110c:	0000fe4d 	.word	0x0000fe4d
   11110:	00010d95 	.word	0x00010d95
   11114:	0000f579 	.word	0x0000f579
   11118:	00008d09 	.word	0x00008d09
   1111c:	00010035 	.word	0x00010035
   11120:	0000ff81 	.word	0x0000ff81
   11124:	000101bd 	.word	0x000101bd
   11128:	00018303 	.word	0x00018303
   1112c:	00000223 	.word	0x00000223
   11130:	00000229 	.word	0x00000229
   11134:	00000225 	.word	0x00000225
   11138:	0000c665 	.word	0x0000c665
   1113c:	00010d69 	.word	0x00010d69
   11140:	0000fcdd 	.word	0x0000fcdd
   11144:	0000fc71 	.word	0x0000fc71

00011148 <LorawanSetDataRange>:
   11148:	2201      	movs	r2, #1
   1114a:	b530      	push	{r4, r5, lr}
   1114c:	b085      	sub	sp, #20
   1114e:	ab01      	add	r3, sp, #4
   11150:	ac02      	add	r4, sp, #8
   11152:	7018      	strb	r0, [r3, #0]
   11154:	7020      	strb	r0, [r4, #0]
   11156:	7061      	strb	r1, [r4, #1]
   11158:	2015      	movs	r0, #21
   1115a:	0019      	movs	r1, r3
   1115c:	4d11      	ldr	r5, [pc, #68]	; (111a4 <LorawanSetDataRange+0x5c>)
   1115e:	705a      	strb	r2, [r3, #1]
   11160:	47a8      	blx	r5
   11162:	2808      	cmp	r0, #8
   11164:	d003      	beq.n	1116e <LorawanSetDataRange+0x26>
   11166:	250a      	movs	r5, #10
   11168:	0028      	movs	r0, r5
   1116a:	b005      	add	sp, #20
   1116c:	bd30      	pop	{r4, r5, pc}
   1116e:	0021      	movs	r1, r4
   11170:	2012      	movs	r0, #18
   11172:	47a8      	blx	r5
   11174:	0005      	movs	r5, r0
   11176:	2808      	cmp	r0, #8
   11178:	d1f5      	bne.n	11166 <LorawanSetDataRange+0x1e>
   1117a:	0021      	movs	r1, r4
   1117c:	4b0a      	ldr	r3, [pc, #40]	; (111a8 <LorawanSetDataRange+0x60>)
   1117e:	ac03      	add	r4, sp, #12
   11180:	2012      	movs	r0, #18
   11182:	4798      	blx	r3
   11184:	0022      	movs	r2, r4
   11186:	2100      	movs	r1, #0
   11188:	4b08      	ldr	r3, [pc, #32]	; (111ac <LorawanSetDataRange+0x64>)
   1118a:	2014      	movs	r0, #20
   1118c:	4798      	blx	r3
   1118e:	4b08      	ldr	r3, [pc, #32]	; (111b0 <LorawanSetDataRange+0x68>)
   11190:	7821      	ldrb	r1, [r4, #0]
   11192:	001a      	movs	r2, r3
   11194:	32f3      	adds	r2, #243	; 0xf3
   11196:	7011      	strb	r1, [r2, #0]
   11198:	7862      	ldrb	r2, [r4, #1]
   1119a:	33f4      	adds	r3, #244	; 0xf4
   1119c:	701a      	strb	r2, [r3, #0]
   1119e:	4b05      	ldr	r3, [pc, #20]	; (111b4 <LorawanSetDataRange+0x6c>)
   111a0:	4798      	blx	r3
   111a2:	e7e1      	b.n	11168 <LorawanSetDataRange+0x20>
   111a4:	0000c681 	.word	0x0000c681
   111a8:	0000c69d 	.word	0x0000c69d
   111ac:	0000c665 	.word	0x0000c665
   111b0:	20003170 	.word	0x20003170
   111b4:	00010d69 	.word	0x00010d69

000111b8 <LorawanSetChannelIdStatus>:
   111b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   111ba:	466b      	mov	r3, sp
   111bc:	7018      	strb	r0, [r3, #0]
   111be:	7059      	strb	r1, [r3, #1]
   111c0:	2016      	movs	r0, #22
   111c2:	4669      	mov	r1, sp
   111c4:	4b0c      	ldr	r3, [pc, #48]	; (111f8 <LorawanSetChannelIdStatus+0x40>)
   111c6:	4798      	blx	r3
   111c8:	0004      	movs	r4, r0
   111ca:	2808      	cmp	r0, #8
   111cc:	d111      	bne.n	111f2 <LorawanSetChannelIdStatus+0x3a>
   111ce:	ad01      	add	r5, sp, #4
   111d0:	002a      	movs	r2, r5
   111d2:	2100      	movs	r1, #0
   111d4:	4b09      	ldr	r3, [pc, #36]	; (111fc <LorawanSetChannelIdStatus+0x44>)
   111d6:	2014      	movs	r0, #20
   111d8:	4798      	blx	r3
   111da:	4b09      	ldr	r3, [pc, #36]	; (11200 <LorawanSetChannelIdStatus+0x48>)
   111dc:	7829      	ldrb	r1, [r5, #0]
   111de:	001a      	movs	r2, r3
   111e0:	32f3      	adds	r2, #243	; 0xf3
   111e2:	7011      	strb	r1, [r2, #0]
   111e4:	786a      	ldrb	r2, [r5, #1]
   111e6:	33f4      	adds	r3, #244	; 0xf4
   111e8:	701a      	strb	r2, [r3, #0]
   111ea:	4b06      	ldr	r3, [pc, #24]	; (11204 <LorawanSetChannelIdStatus+0x4c>)
   111ec:	4798      	blx	r3
   111ee:	0020      	movs	r0, r4
   111f0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   111f2:	240a      	movs	r4, #10
   111f4:	e7fb      	b.n	111ee <LorawanSetChannelIdStatus+0x36>
   111f6:	46c0      	nop			; (mov r8, r8)
   111f8:	0000c69d 	.word	0x0000c69d
   111fc:	0000c665 	.word	0x0000c665
   11200:	20003170 	.word	0x20003170
   11204:	00010d69 	.word	0x00010d69

00011208 <LORAWAN_RxDone>:
   11208:	b5f0      	push	{r4, r5, r6, r7, lr}
   1120a:	4bc4      	ldr	r3, [pc, #784]	; (1151c <LORAWAN_RxDone+0x314>)
   1120c:	b093      	sub	sp, #76	; 0x4c
   1120e:	781b      	ldrb	r3, [r3, #0]
   11210:	0007      	movs	r7, r0
   11212:	b25a      	sxtb	r2, r3
   11214:	9106      	str	r1, [sp, #24]
   11216:	4cc2      	ldr	r4, [pc, #776]	; (11520 <LORAWAN_RxDone+0x318>)
   11218:	2a00      	cmp	r2, #0
   1121a:	da01      	bge.n	11220 <LORAWAN_RxDone+0x18>
   1121c:	f000 fc86 	bl	11b2c <LORAWAN_RxDone+0x924>
   11220:	7801      	ldrb	r1, [r0, #0]
   11222:	221f      	movs	r2, #31
   11224:	000e      	movs	r6, r1
   11226:	4396      	bics	r6, r2
   11228:	2e20      	cmp	r6, #32
   1122a:	d000      	beq.n	1122e <LORAWAN_RxDone+0x26>
   1122c:	e1ae      	b.n	1158c <LORAWAN_RxDone+0x384>
   1122e:	7822      	ldrb	r2, [r4, #0]
   11230:	2a00      	cmp	r2, #0
   11232:	d001      	beq.n	11238 <LORAWAN_RxDone+0x30>
   11234:	f000 fc66 	bl	11b04 <LORAWAN_RxDone+0x8fc>
   11238:	0022      	movs	r2, r4
   1123a:	3294      	adds	r2, #148	; 0x94
   1123c:	7812      	ldrb	r2, [r2, #0]
   1123e:	0752      	lsls	r2, r2, #29
   11240:	d401      	bmi.n	11246 <LORAWAN_RxDone+0x3e>
   11242:	f000 fc5f 	bl	11b04 <LORAWAN_RxDone+0x8fc>
   11246:	9b06      	ldr	r3, [sp, #24]
   11248:	3b01      	subs	r3, #1
   1124a:	b2db      	uxtb	r3, r3
   1124c:	9307      	str	r3, [sp, #28]
   1124e:	4bb5      	ldr	r3, [pc, #724]	; (11524 <LORAWAN_RxDone+0x31c>)
   11250:	469c      	mov	ip, r3
   11252:	9b07      	ldr	r3, [sp, #28]
   11254:	2b00      	cmp	r3, #0
   11256:	d12c      	bne.n	112b2 <LORAWAN_RxDone+0xaa>
   11258:	9b06      	ldr	r3, [sp, #24]
   1125a:	4660      	mov	r0, ip
   1125c:	1f1d      	subs	r5, r3, #4
   1125e:	b2eb      	uxtb	r3, r5
   11260:	9300      	str	r3, [sp, #0]
   11262:	4ab1      	ldr	r2, [pc, #708]	; (11528 <LORAWAN_RxDone+0x320>)
   11264:	003b      	movs	r3, r7
   11266:	9907      	ldr	r1, [sp, #28]
   11268:	4eb0      	ldr	r6, [pc, #704]	; (1152c <LORAWAN_RxDone+0x324>)
   1126a:	47b0      	blx	r6
   1126c:	2204      	movs	r2, #4
   1126e:	49ae      	ldr	r1, [pc, #696]	; (11528 <LORAWAN_RxDone+0x320>)
   11270:	4baf      	ldr	r3, [pc, #700]	; (11530 <LORAWAN_RxDone+0x328>)
   11272:	a810      	add	r0, sp, #64	; 0x40
   11274:	4798      	blx	r3
   11276:	9e10      	ldr	r6, [sp, #64]	; 0x40
   11278:	1979      	adds	r1, r7, r5
   1127a:	2204      	movs	r2, #4
   1127c:	4bac      	ldr	r3, [pc, #688]	; (11530 <LORAWAN_RxDone+0x328>)
   1127e:	a810      	add	r0, sp, #64	; 0x40
   11280:	960d      	str	r6, [sp, #52]	; 0x34
   11282:	4798      	blx	r3
   11284:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11286:	4ba6      	ldr	r3, [pc, #664]	; (11520 <LORAWAN_RxDone+0x318>)
   11288:	210e      	movs	r1, #14
   1128a:	42b2      	cmp	r2, r6
   1128c:	d029      	beq.n	112e2 <LORAWAN_RxDone+0xda>
   1128e:	001a      	movs	r2, r3
   11290:	3284      	adds	r2, #132	; 0x84
   11292:	7812      	ldrb	r2, [r2, #0]
   11294:	400a      	ands	r2, r1
   11296:	2a0a      	cmp	r2, #10
   11298:	d005      	beq.n	112a6 <LORAWAN_RxDone+0x9e>
   1129a:	2a06      	cmp	r2, #6
   1129c:	d106      	bne.n	112ac <LORAWAN_RxDone+0xa4>
   1129e:	33f9      	adds	r3, #249	; 0xf9
   112a0:	781b      	ldrb	r3, [r3, #0]
   112a2:	2b00      	cmp	r3, #0
   112a4:	d002      	beq.n	112ac <LORAWAN_RxDone+0xa4>
   112a6:	2018      	movs	r0, #24
   112a8:	4ba2      	ldr	r3, [pc, #648]	; (11534 <LORAWAN_RxDone+0x32c>)
   112aa:	4798      	blx	r3
   112ac:	4ba2      	ldr	r3, [pc, #648]	; (11538 <LORAWAN_RxDone+0x330>)
   112ae:	4798      	blx	r3
   112b0:	e1d0      	b.n	11654 <LORAWAN_RxDone+0x44c>
   112b2:	9b06      	ldr	r3, [sp, #24]
   112b4:	9a07      	ldr	r2, [sp, #28]
   112b6:	2100      	movs	r1, #0
   112b8:	1a98      	subs	r0, r3, r2
   112ba:	1838      	adds	r0, r7, r0
   112bc:	4662      	mov	r2, ip
   112be:	4b9f      	ldr	r3, [pc, #636]	; (1153c <LORAWAN_RxDone+0x334>)
   112c0:	4798      	blx	r3
   112c2:	2800      	cmp	r0, #0
   112c4:	d006      	beq.n	112d4 <LORAWAN_RxDone+0xcc>
   112c6:	4b9b      	ldr	r3, [pc, #620]	; (11534 <LORAWAN_RxDone+0x32c>)
   112c8:	4798      	blx	r3
   112ca:	4b9b      	ldr	r3, [pc, #620]	; (11538 <LORAWAN_RxDone+0x330>)
   112cc:	4798      	blx	r3
   112ce:	201f      	movs	r0, #31
   112d0:	b013      	add	sp, #76	; 0x4c
   112d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   112d4:	9b07      	ldr	r3, [sp, #28]
   112d6:	2b10      	cmp	r3, #16
   112d8:	d901      	bls.n	112de <LORAWAN_RxDone+0xd6>
   112da:	3b10      	subs	r3, #16
   112dc:	e7b5      	b.n	1124a <LORAWAN_RxDone+0x42>
   112de:	9007      	str	r0, [sp, #28]
   112e0:	e7b5      	b.n	1124e <LORAWAN_RxDone+0x46>
   112e2:	001a      	movs	r2, r3
   112e4:	3284      	adds	r2, #132	; 0x84
   112e6:	7812      	ldrb	r2, [r2, #0]
   112e8:	400a      	ands	r2, r1
   112ea:	2a06      	cmp	r2, #6
   112ec:	d103      	bne.n	112f6 <LORAWAN_RxDone+0xee>
   112ee:	33ec      	adds	r3, #236	; 0xec
   112f0:	7818      	ldrb	r0, [r3, #0]
   112f2:	4b93      	ldr	r3, [pc, #588]	; (11540 <LORAWAN_RxDone+0x338>)
   112f4:	4798      	blx	r3
   112f6:	7a3a      	ldrb	r2, [r7, #8]
   112f8:	79fb      	ldrb	r3, [r7, #7]
   112fa:	0212      	lsls	r2, r2, #8
   112fc:	431a      	orrs	r2, r3
   112fe:	7a7b      	ldrb	r3, [r7, #9]
   11300:	2001      	movs	r0, #1
   11302:	041b      	lsls	r3, r3, #16
   11304:	431a      	orrs	r2, r3
   11306:	7abb      	ldrb	r3, [r7, #10]
   11308:	061b      	lsls	r3, r3, #24
   1130a:	4313      	orrs	r3, r2
   1130c:	0a19      	lsrs	r1, r3, #8
   1130e:	7063      	strb	r3, [r4, #1]
   11310:	70a1      	strb	r1, [r4, #2]
   11312:	0c19      	lsrs	r1, r3, #16
   11314:	0e1b      	lsrs	r3, r3, #24
   11316:	70e1      	strb	r1, [r4, #3]
   11318:	7123      	strb	r3, [r4, #4]
   1131a:	240f      	movs	r4, #15
   1131c:	2103      	movs	r1, #3
   1131e:	4b89      	ldr	r3, [pc, #548]	; (11544 <LORAWAN_RxDone+0x33c>)
   11320:	4798      	blx	r3
   11322:	7b38      	ldrb	r0, [r7, #12]
   11324:	4b88      	ldr	r3, [pc, #544]	; (11548 <LORAWAN_RxDone+0x340>)
   11326:	4020      	ands	r0, r4
   11328:	4798      	blx	r3
   1132a:	7af8      	ldrb	r0, [r7, #11]
   1132c:	4b87      	ldr	r3, [pc, #540]	; (1154c <LORAWAN_RxDone+0x344>)
   1132e:	0641      	lsls	r1, r0, #25
   11330:	0700      	lsls	r0, r0, #28
   11332:	0f49      	lsrs	r1, r1, #29
   11334:	0f00      	lsrs	r0, r0, #28
   11336:	4798      	blx	r3
   11338:	4b85      	ldr	r3, [pc, #532]	; (11550 <LORAWAN_RxDone+0x348>)
   1133a:	2100      	movs	r1, #0
   1133c:	203b      	movs	r0, #59	; 0x3b
   1133e:	4798      	blx	r3
   11340:	9b06      	ldr	r3, [sp, #24]
   11342:	2b21      	cmp	r3, #33	; 0x21
   11344:	d000      	beq.n	11348 <LORAWAN_RxDone+0x140>
   11346:	e08c      	b.n	11462 <LORAWAN_RxDone+0x25a>
   11348:	251a      	movs	r5, #26
   1134a:	ab04      	add	r3, sp, #16
   1134c:	18ed      	adds	r5, r5, r3
   1134e:	002a      	movs	r2, r5
   11350:	4b80      	ldr	r3, [pc, #512]	; (11554 <LORAWAN_RxDone+0x34c>)
   11352:	4981      	ldr	r1, [pc, #516]	; (11558 <LORAWAN_RxDone+0x350>)
   11354:	2007      	movs	r0, #7
   11356:	4798      	blx	r3
   11358:	782b      	ldrb	r3, [r5, #0]
   1135a:	2bff      	cmp	r3, #255	; 0xff
   1135c:	d100      	bne.n	11360 <LORAWAN_RxDone+0x158>
   1135e:	e080      	b.n	11462 <LORAWAN_RxDone+0x25a>
   11360:	2350      	movs	r3, #80	; 0x50
   11362:	43a3      	bics	r3, r4
   11364:	9308      	str	r3, [sp, #32]
   11366:	003b      	movs	r3, r7
   11368:	330d      	adds	r3, #13
   1136a:	9306      	str	r3, [sp, #24]
   1136c:	2600      	movs	r6, #0
   1136e:	2203      	movs	r2, #3
   11370:	9906      	ldr	r1, [sp, #24]
   11372:	4b6f      	ldr	r3, [pc, #444]	; (11530 <LORAWAN_RxDone+0x328>)
   11374:	a80e      	add	r0, sp, #56	; 0x38
   11376:	960e      	str	r6, [sp, #56]	; 0x38
   11378:	4798      	blx	r3
   1137a:	2364      	movs	r3, #100	; 0x64
   1137c:	990e      	ldr	r1, [sp, #56]	; 0x38
   1137e:	aa04      	add	r2, sp, #16
   11380:	4359      	muls	r1, r3
   11382:	3b4a      	subs	r3, #74	; 0x4a
   11384:	189b      	adds	r3, r3, r2
   11386:	7818      	ldrb	r0, [r3, #0]
   11388:	9b07      	ldr	r3, [sp, #28]
   1138a:	910e      	str	r1, [sp, #56]	; 0x38
   1138c:	1818      	adds	r0, r3, r0
   1138e:	b2c0      	uxtb	r0, r0
   11390:	76d0      	strb	r0, [r2, #27]
   11392:	42b1      	cmp	r1, r6
   11394:	d100      	bne.n	11398 <LORAWAN_RxDone+0x190>
   11396:	e0a7      	b.n	114e8 <LORAWAN_RxDone+0x2e0>
   11398:	466b      	mov	r3, sp
   1139a:	2220      	movs	r2, #32
   1139c:	189b      	adds	r3, r3, r2
   1139e:	781b      	ldrb	r3, [r3, #0]
   113a0:	ad10      	add	r5, sp, #64	; 0x40
   113a2:	ac0b      	add	r4, sp, #44	; 0x2c
   113a4:	7128      	strb	r0, [r5, #4]
   113a6:	9110      	str	r1, [sp, #64]	; 0x40
   113a8:	7020      	strb	r0, [r4, #0]
   113aa:	7063      	strb	r3, [r4, #1]
   113ac:	0029      	movs	r1, r5
   113ae:	2002      	movs	r0, #2
   113b0:	4b6a      	ldr	r3, [pc, #424]	; (1155c <LORAWAN_RxDone+0x354>)
   113b2:	4798      	blx	r3
   113b4:	2808      	cmp	r0, #8
   113b6:	d140      	bne.n	1143a <LORAWAN_RxDone+0x232>
   113b8:	0029      	movs	r1, r5
   113ba:	0030      	movs	r0, r6
   113bc:	4b64      	ldr	r3, [pc, #400]	; (11550 <LORAWAN_RxDone+0x348>)
   113be:	4798      	blx	r3
   113c0:	ad0c      	add	r5, sp, #48	; 0x30
   113c2:	0021      	movs	r1, r4
   113c4:	4b62      	ldr	r3, [pc, #392]	; (11550 <LORAWAN_RxDone+0x348>)
   113c6:	2012      	movs	r0, #18
   113c8:	4798      	blx	r3
   113ca:	0031      	movs	r1, r6
   113cc:	002a      	movs	r2, r5
   113ce:	4e61      	ldr	r6, [pc, #388]	; (11554 <LORAWAN_RxDone+0x34c>)
   113d0:	2014      	movs	r0, #20
   113d2:	47b0      	blx	r6
   113d4:	4c52      	ldr	r4, [pc, #328]	; (11520 <LORAWAN_RxDone+0x318>)
   113d6:	782a      	ldrb	r2, [r5, #0]
   113d8:	0023      	movs	r3, r4
   113da:	33f3      	adds	r3, #243	; 0xf3
   113dc:	701a      	strb	r2, [r3, #0]
   113de:	0023      	movs	r3, r4
   113e0:	786a      	ldrb	r2, [r5, #1]
   113e2:	2522      	movs	r5, #34	; 0x22
   113e4:	33f4      	adds	r3, #244	; 0xf4
   113e6:	701a      	strb	r2, [r3, #0]
   113e8:	4b5d      	ldr	r3, [pc, #372]	; (11560 <LORAWAN_RxDone+0x358>)
   113ea:	4798      	blx	r3
   113ec:	ab04      	add	r3, sp, #16
   113ee:	18ed      	adds	r5, r5, r3
   113f0:	231b      	movs	r3, #27
   113f2:	a904      	add	r1, sp, #16
   113f4:	185b      	adds	r3, r3, r1
   113f6:	0019      	movs	r1, r3
   113f8:	002a      	movs	r2, r5
   113fa:	201e      	movs	r0, #30
   113fc:	47b0      	blx	r6
   113fe:	0023      	movs	r3, r4
   11400:	33ff      	adds	r3, #255	; 0xff
   11402:	7f5b      	ldrb	r3, [r3, #29]
   11404:	079b      	lsls	r3, r3, #30
   11406:	d508      	bpl.n	1141a <LORAWAN_RxDone+0x212>
   11408:	ab04      	add	r3, sp, #16
   1140a:	7edb      	ldrb	r3, [r3, #27]
   1140c:	a90f      	add	r1, sp, #60	; 0x3c
   1140e:	708b      	strb	r3, [r1, #2]
   11410:	882b      	ldrh	r3, [r5, #0]
   11412:	201e      	movs	r0, #30
   11414:	800b      	strh	r3, [r1, #0]
   11416:	4b4e      	ldr	r3, [pc, #312]	; (11550 <LORAWAN_RxDone+0x348>)
   11418:	4798      	blx	r3
   1141a:	231b      	movs	r3, #27
   1141c:	aa04      	add	r2, sp, #16
   1141e:	189b      	adds	r3, r3, r2
   11420:	7818      	ldrb	r0, [r3, #0]
   11422:	2101      	movs	r1, #1
   11424:	4b4f      	ldr	r3, [pc, #316]	; (11564 <LORAWAN_RxDone+0x35c>)
   11426:	4798      	blx	r3
   11428:	2204      	movs	r2, #4
   1142a:	3484      	adds	r4, #132	; 0x84
   1142c:	7863      	ldrb	r3, [r4, #1]
   1142e:	210b      	movs	r1, #11
   11430:	4313      	orrs	r3, r2
   11432:	7063      	strb	r3, [r4, #1]
   11434:	2001      	movs	r0, #1
   11436:	4b43      	ldr	r3, [pc, #268]	; (11544 <LORAWAN_RxDone+0x33c>)
   11438:	4798      	blx	r3
   1143a:	9b07      	ldr	r3, [sp, #28]
   1143c:	3301      	adds	r3, #1
   1143e:	b2db      	uxtb	r3, r3
   11440:	9307      	str	r3, [sp, #28]
   11442:	9b06      	ldr	r3, [sp, #24]
   11444:	3303      	adds	r3, #3
   11446:	9306      	str	r3, [sp, #24]
   11448:	9b07      	ldr	r3, [sp, #28]
   1144a:	2b05      	cmp	r3, #5
   1144c:	d18e      	bne.n	1136c <LORAWAN_RxDone+0x164>
   1144e:	2204      	movs	r2, #4
   11450:	4b33      	ldr	r3, [pc, #204]	; (11520 <LORAWAN_RxDone+0x318>)
   11452:	2001      	movs	r0, #1
   11454:	3384      	adds	r3, #132	; 0x84
   11456:	7859      	ldrb	r1, [r3, #1]
   11458:	430a      	orrs	r2, r1
   1145a:	705a      	strb	r2, [r3, #1]
   1145c:	210b      	movs	r1, #11
   1145e:	4b39      	ldr	r3, [pc, #228]	; (11544 <LORAWAN_RxDone+0x33c>)
   11460:	4798      	blx	r3
   11462:	4d41      	ldr	r5, [pc, #260]	; (11568 <LORAWAN_RxDone+0x360>)
   11464:	1c7e      	adds	r6, r7, #1
   11466:	3704      	adds	r7, #4
   11468:	0028      	movs	r0, r5
   1146a:	003a      	movs	r2, r7
   1146c:	0031      	movs	r1, r6
   1146e:	4b3f      	ldr	r3, [pc, #252]	; (1156c <LORAWAN_RxDone+0x364>)
   11470:	4798      	blx	r3
   11472:	2302      	movs	r3, #2
   11474:	4c2a      	ldr	r4, [pc, #168]	; (11520 <LORAWAN_RxDone+0x318>)
   11476:	0028      	movs	r0, r5
   11478:	7563      	strb	r3, [r4, #21]
   1147a:	4a2a      	ldr	r2, [pc, #168]	; (11524 <LORAWAN_RxDone+0x31c>)
   1147c:	3b01      	subs	r3, #1
   1147e:	2100      	movs	r1, #0
   11480:	4d3b      	ldr	r5, [pc, #236]	; (11570 <LORAWAN_RxDone+0x368>)
   11482:	47a8      	blx	r5
   11484:	2800      	cmp	r0, #0
   11486:	d003      	beq.n	11490 <LORAWAN_RxDone+0x288>
   11488:	4b2a      	ldr	r3, [pc, #168]	; (11534 <LORAWAN_RxDone+0x32c>)
   1148a:	4798      	blx	r3
   1148c:	4b2a      	ldr	r3, [pc, #168]	; (11538 <LORAWAN_RxDone+0x330>)
   1148e:	4798      	blx	r3
   11490:	2105      	movs	r1, #5
   11492:	4b2c      	ldr	r3, [pc, #176]	; (11544 <LORAWAN_RxDone+0x33c>)
   11494:	2001      	movs	r0, #1
   11496:	4798      	blx	r3
   11498:	4d36      	ldr	r5, [pc, #216]	; (11574 <LORAWAN_RxDone+0x36c>)
   1149a:	003a      	movs	r2, r7
   1149c:	0028      	movs	r0, r5
   1149e:	0031      	movs	r1, r6
   114a0:	4b32      	ldr	r3, [pc, #200]	; (1156c <LORAWAN_RxDone+0x364>)
   114a2:	4798      	blx	r3
   114a4:	2301      	movs	r3, #1
   114a6:	0028      	movs	r0, r5
   114a8:	7163      	strb	r3, [r4, #5]
   114aa:	4a1e      	ldr	r2, [pc, #120]	; (11524 <LORAWAN_RxDone+0x31c>)
   114ac:	18db      	adds	r3, r3, r3
   114ae:	2100      	movs	r1, #0
   114b0:	4d2f      	ldr	r5, [pc, #188]	; (11570 <LORAWAN_RxDone+0x368>)
   114b2:	47a8      	blx	r5
   114b4:	2800      	cmp	r0, #0
   114b6:	d003      	beq.n	114c0 <LORAWAN_RxDone+0x2b8>
   114b8:	4b1e      	ldr	r3, [pc, #120]	; (11534 <LORAWAN_RxDone+0x32c>)
   114ba:	4798      	blx	r3
   114bc:	4b1e      	ldr	r3, [pc, #120]	; (11538 <LORAWAN_RxDone+0x330>)
   114be:	4798      	blx	r3
   114c0:	4b20      	ldr	r3, [pc, #128]	; (11544 <LORAWAN_RxDone+0x33c>)
   114c2:	2104      	movs	r1, #4
   114c4:	2001      	movs	r0, #1
   114c6:	4798      	blx	r3
   114c8:	4b2b      	ldr	r3, [pc, #172]	; (11578 <LORAWAN_RxDone+0x370>)
   114ca:	5ce3      	ldrb	r3, [r4, r3]
   114cc:	2b00      	cmp	r3, #0
   114ce:	d017      	beq.n	11500 <LORAWAN_RxDone+0x2f8>
   114d0:	492a      	ldr	r1, [pc, #168]	; (1157c <LORAWAN_RxDone+0x374>)
   114d2:	2002      	movs	r0, #2
   114d4:	4c2a      	ldr	r4, [pc, #168]	; (11580 <LORAWAN_RxDone+0x378>)
   114d6:	47a0      	blx	r4
   114d8:	2800      	cmp	r0, #0
   114da:	d008      	beq.n	114ee <LORAWAN_RxDone+0x2e6>
   114dc:	4b15      	ldr	r3, [pc, #84]	; (11534 <LORAWAN_RxDone+0x32c>)
   114de:	4798      	blx	r3
   114e0:	4b15      	ldr	r3, [pc, #84]	; (11538 <LORAWAN_RxDone+0x330>)
   114e2:	4798      	blx	r3
   114e4:	2023      	movs	r0, #35	; 0x23
   114e6:	e6f3      	b.n	112d0 <LORAWAN_RxDone+0xc8>
   114e8:	4b1e      	ldr	r3, [pc, #120]	; (11564 <LORAWAN_RxDone+0x35c>)
   114ea:	4798      	blx	r3
   114ec:	e7a5      	b.n	1143a <LORAWAN_RxDone+0x232>
   114ee:	4925      	ldr	r1, [pc, #148]	; (11584 <LORAWAN_RxDone+0x37c>)
   114f0:	2001      	movs	r0, #1
   114f2:	47a0      	blx	r4
   114f4:	2800      	cmp	r0, #0
   114f6:	d1f1      	bne.n	114dc <LORAWAN_RxDone+0x2d4>
   114f8:	4b23      	ldr	r3, [pc, #140]	; (11588 <LORAWAN_RxDone+0x380>)
   114fa:	4798      	blx	r3
   114fc:	2008      	movs	r0, #8
   114fe:	e6e7      	b.n	112d0 <LORAWAN_RxDone+0xc8>
   11500:	0020      	movs	r0, r4
   11502:	0021      	movs	r1, r4
   11504:	2210      	movs	r2, #16
   11506:	3115      	adds	r1, #21
   11508:	4d09      	ldr	r5, [pc, #36]	; (11530 <LORAWAN_RxDone+0x328>)
   1150a:	3035      	adds	r0, #53	; 0x35
   1150c:	47a8      	blx	r5
   1150e:	0020      	movs	r0, r4
   11510:	1d61      	adds	r1, r4, #5
   11512:	2210      	movs	r2, #16
   11514:	3025      	adds	r0, #37	; 0x25
   11516:	47a8      	blx	r5
   11518:	e7ee      	b.n	114f8 <LORAWAN_RxDone+0x2f0>
   1151a:	46c0      	nop			; (mov r8, r8)
   1151c:	200031f4 	.word	0x200031f4
   11520:	20003170 	.word	0x20003170
   11524:	200031b5 	.word	0x200031b5
   11528:	20001e9d 	.word	0x20001e9d
   1152c:	00007161 	.word	0x00007161
   11530:	0001613f 	.word	0x0001613f
   11534:	0000fde9 	.word	0x0000fde9
   11538:	00010c9d 	.word	0x00010c9d
   1153c:	00007129 	.word	0x00007129
   11540:	0000cec5 	.word	0x0000cec5
   11544:	00008d09 	.word	0x00008d09
   11548:	0000f579 	.word	0x0000f579
   1154c:	0000fc8d 	.word	0x0000fc8d
   11550:	0000c69d 	.word	0x0000c69d
   11554:	0000c665 	.word	0x0000c665
   11558:	20003257 	.word	0x20003257
   1155c:	0000c681 	.word	0x0000c681
   11560:	00010d69 	.word	0x00010d69
   11564:	000111b9 	.word	0x000111b9
   11568:	20003185 	.word	0x20003185
   1156c:	0000f8a5 	.word	0x0000f8a5
   11570:	00007151 	.word	0x00007151
   11574:	20003175 	.word	0x20003175
   11578:	0000022d 	.word	0x0000022d
   1157c:	20003195 	.word	0x20003195
   11580:	0000715d 	.word	0x0000715d
   11584:	200031a5 	.word	0x200031a5
   11588:	0000f7c1 	.word	0x0000f7c1
   1158c:	22bf      	movs	r2, #191	; 0xbf
   1158e:	3e60      	subs	r6, #96	; 0x60
   11590:	4016      	ands	r6, r2
   11592:	d000      	beq.n	11596 <LORAWAN_RxDone+0x38e>
   11594:	e2b6      	b.n	11b04 <LORAWAN_RxDone+0x8fc>
   11596:	2501      	movs	r5, #1
   11598:	422b      	tst	r3, r5
   1159a:	d100      	bne.n	1159e <LORAWAN_RxDone+0x396>
   1159c:	e2b2      	b.n	11b04 <LORAWAN_RxDone+0x8fc>
   1159e:	7922      	ldrb	r2, [r4, #4]
   115a0:	6823      	ldr	r3, [r4, #0]
   115a2:	0612      	lsls	r2, r2, #24
   115a4:	0a1b      	lsrs	r3, r3, #8
   115a6:	431a      	orrs	r2, r3
   115a8:	0023      	movs	r3, r4
   115aa:	33e0      	adds	r3, #224	; 0xe0
   115ac:	701e      	strb	r6, [r3, #0]
   115ae:	9207      	str	r2, [sp, #28]
   115b0:	7882      	ldrb	r2, [r0, #2]
   115b2:	7843      	ldrb	r3, [r0, #1]
   115b4:	0212      	lsls	r2, r2, #8
   115b6:	431a      	orrs	r2, r3
   115b8:	78c3      	ldrb	r3, [r0, #3]
   115ba:	041b      	lsls	r3, r3, #16
   115bc:	431a      	orrs	r2, r3
   115be:	7903      	ldrb	r3, [r0, #4]
   115c0:	061b      	lsls	r3, r3, #24
   115c2:	4313      	orrs	r3, r2
   115c4:	9a07      	ldr	r2, [sp, #28]
   115c6:	429a      	cmp	r2, r3
   115c8:	d100      	bne.n	115cc <LORAWAN_RxDone+0x3c4>
   115ca:	e2cc      	b.n	11b66 <LORAWAN_RxDone+0x95e>
   115cc:	ab04      	add	r3, sp, #16
   115ce:	3521      	adds	r5, #33	; 0x21
   115d0:	18ed      	adds	r5, r5, r3
   115d2:	7a02      	ldrb	r2, [r0, #8]
   115d4:	0949      	lsrs	r1, r1, #5
   115d6:	002b      	movs	r3, r5
   115d8:	4eda      	ldr	r6, [pc, #872]	; (11944 <LORAWAN_RxDone+0x73c>)
   115da:	47b0      	blx	r6
   115dc:	2808      	cmp	r0, #8
   115de:	d131      	bne.n	11644 <LORAWAN_RxDone+0x43c>
   115e0:	233c      	movs	r3, #60	; 0x3c
   115e2:	7829      	ldrb	r1, [r5, #0]
   115e4:	434b      	muls	r3, r1
   115e6:	001d      	movs	r5, r3
   115e8:	3535      	adds	r5, #53	; 0x35
   115ea:	35ff      	adds	r5, #255	; 0xff
   115ec:	192d      	adds	r5, r5, r4
   115ee:	18e4      	adds	r4, r4, r3
   115f0:	0023      	movs	r3, r4
   115f2:	33fc      	adds	r3, #252	; 0xfc
   115f4:	6b58      	ldr	r0, [r3, #52]	; 0x34
   115f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   115f8:	9308      	str	r3, [sp, #32]
   115fa:	79fb      	ldrb	r3, [r7, #7]
   115fc:	79ba      	ldrb	r2, [r7, #6]
   115fe:	021b      	lsls	r3, r3, #8
   11600:	4313      	orrs	r3, r2
   11602:	0022      	movs	r2, r4
   11604:	3255      	adds	r2, #85	; 0x55
   11606:	32ff      	adds	r2, #255	; 0xff
   11608:	8816      	ldrh	r6, [r2, #0]
   1160a:	429e      	cmp	r6, r3
   1160c:	d908      	bls.n	11620 <LORAWAN_RxDone+0x418>
   1160e:	3457      	adds	r4, #87	; 0x57
   11610:	34ff      	adds	r4, #255	; 0xff
   11612:	8823      	ldrh	r3, [r4, #0]
   11614:	3301      	adds	r3, #1
   11616:	8023      	strh	r3, [r4, #0]
   11618:	79fb      	ldrb	r3, [r7, #7]
   1161a:	79bc      	ldrb	r4, [r7, #6]
   1161c:	021b      	lsls	r3, r3, #8
   1161e:	4323      	orrs	r3, r4
   11620:	8013      	strh	r3, [r2, #0]
   11622:	9b06      	ldr	r3, [sp, #24]
   11624:	9000      	str	r0, [sp, #0]
   11626:	1f1a      	subs	r2, r3, #4
   11628:	233c      	movs	r3, #60	; 0x3c
   1162a:	434b      	muls	r3, r1
   1162c:	49c6      	ldr	r1, [pc, #792]	; (11948 <LORAWAN_RxDone+0x740>)
   1162e:	b2d2      	uxtb	r2, r2
   11630:	18c9      	adds	r1, r1, r3
   11632:	31fc      	adds	r1, #252	; 0xfc
   11634:	2349      	movs	r3, #73	; 0x49
   11636:	6d89      	ldr	r1, [r1, #88]	; 0x58
   11638:	2001      	movs	r0, #1
   1163a:	4cc4      	ldr	r4, [pc, #784]	; (1194c <LORAWAN_RxDone+0x744>)
   1163c:	47a0      	blx	r4
   1163e:	2301      	movs	r3, #1
   11640:	9307      	str	r3, [sp, #28]
   11642:	e2a6      	b.n	11b92 <LORAWAN_RxDone+0x98a>
   11644:	220e      	movs	r2, #14
   11646:	4bc2      	ldr	r3, [pc, #776]	; (11950 <LORAWAN_RxDone+0x748>)
   11648:	781b      	ldrb	r3, [r3, #0]
   1164a:	4013      	ands	r3, r2
   1164c:	2b0a      	cmp	r3, #10
   1164e:	d008      	beq.n	11662 <LORAWAN_RxDone+0x45a>
   11650:	2b06      	cmp	r3, #6
   11652:	d001      	beq.n	11658 <LORAWAN_RxDone+0x450>
   11654:	200a      	movs	r0, #10
   11656:	e63b      	b.n	112d0 <LORAWAN_RxDone+0xc8>
   11658:	0023      	movs	r3, r4
   1165a:	33f9      	adds	r3, #249	; 0xf9
   1165c:	781b      	ldrb	r3, [r3, #0]
   1165e:	2b00      	cmp	r3, #0
   11660:	d0f8      	beq.n	11654 <LORAWAN_RxDone+0x44c>
   11662:	2220      	movs	r2, #32
   11664:	201e      	movs	r0, #30
   11666:	3494      	adds	r4, #148	; 0x94
   11668:	7823      	ldrb	r3, [r4, #0]
   1166a:	4393      	bics	r3, r2
   1166c:	7023      	strb	r3, [r4, #0]
   1166e:	4bb9      	ldr	r3, [pc, #740]	; (11954 <LORAWAN_RxDone+0x74c>)
   11670:	e61b      	b.n	112aa <LORAWAN_RxDone+0xa2>
   11672:	0022      	movs	r2, r4
   11674:	2102      	movs	r1, #2
   11676:	e2a6      	b.n	11bc6 <LORAWAN_RxDone+0x9be>
   11678:	9b08      	ldr	r3, [sp, #32]
   1167a:	328c      	adds	r2, #140	; 0x8c
   1167c:	6013      	str	r3, [r2, #0]
   1167e:	e2e3      	b.n	11c48 <LORAWAN_RxDone+0xa40>
   11680:	9b07      	ldr	r3, [sp, #28]
   11682:	4cb1      	ldr	r4, [pc, #708]	; (11948 <LORAWAN_RxDone+0x740>)
   11684:	2b00      	cmp	r3, #0
   11686:	d000      	beq.n	1168a <LORAWAN_RxDone+0x482>
   11688:	e224      	b.n	11ad4 <LORAWAN_RxDone+0x8cc>
   1168a:	466a      	mov	r2, sp
   1168c:	0023      	movs	r3, r4
   1168e:	7f12      	ldrb	r2, [r2, #28]
   11690:	33e3      	adds	r3, #227	; 0xe3
   11692:	701a      	strb	r2, [r3, #0]
   11694:	797b      	ldrb	r3, [r7, #5]
   11696:	2b7f      	cmp	r3, #127	; 0x7f
   11698:	d909      	bls.n	116ae <LORAWAN_RxDone+0x4a6>
   1169a:	0022      	movs	r2, r4
   1169c:	2320      	movs	r3, #32
   1169e:	3284      	adds	r2, #132	; 0x84
   116a0:	7811      	ldrb	r1, [r2, #0]
   116a2:	2001      	movs	r0, #1
   116a4:	430b      	orrs	r3, r1
   116a6:	7013      	strb	r3, [r2, #0]
   116a8:	210b      	movs	r1, #11
   116aa:	4bab      	ldr	r3, [pc, #684]	; (11958 <LORAWAN_RxDone+0x750>)
   116ac:	4798      	blx	r3
   116ae:	797b      	ldrb	r3, [r7, #5]
   116b0:	06db      	lsls	r3, r3, #27
   116b2:	d505      	bpl.n	116c0 <LORAWAN_RxDone+0x4b8>
   116b4:	0022      	movs	r2, r4
   116b6:	2308      	movs	r3, #8
   116b8:	3294      	adds	r2, #148	; 0x94
   116ba:	7811      	ldrb	r1, [r2, #0]
   116bc:	430b      	orrs	r3, r1
   116be:	7013      	strb	r3, [r2, #0]
   116c0:	797b      	ldrb	r3, [r7, #5]
   116c2:	065b      	lsls	r3, r3, #25
   116c4:	d505      	bpl.n	116d2 <LORAWAN_RxDone+0x4ca>
   116c6:	0022      	movs	r2, r4
   116c8:	2310      	movs	r3, #16
   116ca:	3294      	adds	r2, #148	; 0x94
   116cc:	7811      	ldrb	r1, [r2, #0]
   116ce:	430b      	orrs	r3, r1
   116d0:	7013      	strb	r3, [r2, #0]
   116d2:	221f      	movs	r2, #31
   116d4:	783b      	ldrb	r3, [r7, #0]
   116d6:	4393      	bics	r3, r2
   116d8:	2ba0      	cmp	r3, #160	; 0xa0
   116da:	d105      	bne.n	116e8 <LORAWAN_RxDone+0x4e0>
   116dc:	0022      	movs	r2, r4
   116de:	3294      	adds	r2, #148	; 0x94
   116e0:	7811      	ldrb	r1, [r2, #0]
   116e2:	3b9e      	subs	r3, #158	; 0x9e
   116e4:	430b      	orrs	r3, r1
   116e6:	7013      	strb	r3, [r2, #0]
   116e8:	7979      	ldrb	r1, [r7, #5]
   116ea:	070b      	lsls	r3, r1, #28
   116ec:	d100      	bne.n	116f0 <LORAWAN_RxDone+0x4e8>
   116ee:	e0d4      	b.n	1189a <LORAWAN_RxDone+0x692>
   116f0:	0709      	lsls	r1, r1, #28
   116f2:	0f09      	lsrs	r1, r1, #28
   116f4:	187b      	adds	r3, r7, r1
   116f6:	7a1b      	ldrb	r3, [r3, #8]
   116f8:	2b00      	cmp	r3, #0
   116fa:	d100      	bne.n	116fe <LORAWAN_RxDone+0x4f6>
   116fc:	e0a9      	b.n	11852 <LORAWAN_RxDone+0x64a>
   116fe:	0038      	movs	r0, r7
   11700:	4b96      	ldr	r3, [pc, #600]	; (1195c <LORAWAN_RxDone+0x754>)
   11702:	3008      	adds	r0, #8
   11704:	4798      	blx	r3
   11706:	2301      	movs	r3, #1
   11708:	0006      	movs	r6, r0
   1170a:	9307      	str	r3, [sp, #28]
   1170c:	7978      	ldrb	r0, [r7, #5]
   1170e:	9906      	ldr	r1, [sp, #24]
   11710:	0703      	lsls	r3, r0, #28
   11712:	0f1b      	lsrs	r3, r3, #28
   11714:	001a      	movs	r2, r3
   11716:	320c      	adds	r2, #12
   11718:	4291      	cmp	r1, r2
   1171a:	d100      	bne.n	1171e <LORAWAN_RxDone+0x516>
   1171c:	e0f1      	b.n	11902 <LORAWAN_RxDone+0x6fa>
   1171e:	7832      	ldrb	r2, [r6, #0]
   11720:	1ac9      	subs	r1, r1, r3
   11722:	b2c9      	uxtb	r1, r1
   11724:	9208      	str	r2, [sp, #32]
   11726:	000a      	movs	r2, r1
   11728:	3319      	adds	r3, #25
   1172a:	3a0c      	subs	r2, #12
   1172c:	469c      	mov	ip, r3
   1172e:	9b08      	ldr	r3, [sp, #32]
   11730:	b2d2      	uxtb	r2, r2
   11732:	9206      	str	r2, [sp, #24]
   11734:	1c75      	adds	r5, r6, #1
   11736:	4a84      	ldr	r2, [pc, #528]	; (11948 <LORAWAN_RxDone+0x740>)
   11738:	2b00      	cmp	r3, #0
   1173a:	d100      	bne.n	1173e <LORAWAN_RxDone+0x536>
   1173c:	e0b0      	b.n	118a0 <LORAWAN_RxDone+0x698>
   1173e:	6813      	ldr	r3, [r2, #0]
   11740:	0010      	movs	r0, r2
   11742:	7912      	ldrb	r2, [r2, #4]
   11744:	0a1c      	lsrs	r4, r3, #8
   11746:	0612      	lsls	r2, r2, #24
   11748:	4322      	orrs	r2, r4
   1174a:	9204      	str	r2, [sp, #16]
   1174c:	4a84      	ldr	r2, [pc, #528]	; (11960 <LORAWAN_RxDone+0x758>)
   1174e:	4663      	mov	r3, ip
   11750:	9203      	str	r2, [sp, #12]
   11752:	466a      	mov	r2, sp
   11754:	8493      	strh	r3, [r2, #36]	; 0x24
   11756:	8c93      	ldrh	r3, [r2, #36]	; 0x24
   11758:	2201      	movs	r2, #1
   1175a:	9302      	str	r3, [sp, #8]
   1175c:	4b81      	ldr	r3, [pc, #516]	; (11964 <LORAWAN_RxDone+0x75c>)
   1175e:	308c      	adds	r0, #140	; 0x8c
   11760:	390d      	subs	r1, #13
   11762:	9201      	str	r2, [sp, #4]
   11764:	9300      	str	r3, [sp, #0]
   11766:	6803      	ldr	r3, [r0, #0]
   11768:	b2c9      	uxtb	r1, r1
   1176a:	0028      	movs	r0, r5
   1176c:	4c7e      	ldr	r4, [pc, #504]	; (11968 <LORAWAN_RxDone+0x760>)
   1176e:	47a0      	blx	r4
   11770:	2800      	cmp	r0, #0
   11772:	d004      	beq.n	1177e <LORAWAN_RxDone+0x576>
   11774:	4b7d      	ldr	r3, [pc, #500]	; (1196c <LORAWAN_RxDone+0x764>)
   11776:	4798      	blx	r3
   11778:	201f      	movs	r0, #31
   1177a:	4b76      	ldr	r3, [pc, #472]	; (11954 <LORAWAN_RxDone+0x74c>)
   1177c:	4798      	blx	r3
   1177e:	4c72      	ldr	r4, [pc, #456]	; (11948 <LORAWAN_RxDone+0x740>)
   11780:	2300      	movs	r3, #0
   11782:	0022      	movs	r2, r4
   11784:	32ca      	adds	r2, #202	; 0xca
   11786:	8013      	strh	r3, [r2, #0]
   11788:	0022      	movs	r2, r4
   1178a:	32f6      	adds	r2, #246	; 0xf6
   1178c:	7013      	strb	r3, [r2, #0]
   1178e:	0022      	movs	r2, r4
   11790:	2110      	movs	r1, #16
   11792:	3294      	adds	r2, #148	; 0x94
   11794:	7813      	ldrb	r3, [r2, #0]
   11796:	438b      	bics	r3, r1
   11798:	7013      	strb	r3, [r2, #0]
   1179a:	0023      	movs	r3, r4
   1179c:	2201      	movs	r2, #1
   1179e:	3384      	adds	r3, #132	; 0x84
   117a0:	7859      	ldrb	r1, [r3, #1]
   117a2:	430a      	orrs	r2, r1
   117a4:	705a      	strb	r2, [r3, #1]
   117a6:	220e      	movs	r2, #14
   117a8:	781b      	ldrb	r3, [r3, #0]
   117aa:	4013      	ands	r3, r2
   117ac:	2b06      	cmp	r3, #6
   117ae:	d104      	bne.n	117ba <LORAWAN_RxDone+0x5b2>
   117b0:	0023      	movs	r3, r4
   117b2:	33ee      	adds	r3, #238	; 0xee
   117b4:	7818      	ldrb	r0, [r3, #0]
   117b6:	4b6e      	ldr	r3, [pc, #440]	; (11970 <LORAWAN_RxDone+0x768>)
   117b8:	4798      	blx	r3
   117ba:	0025      	movs	r5, r4
   117bc:	2201      	movs	r2, #1
   117be:	3594      	adds	r5, #148	; 0x94
   117c0:	782b      	ldrb	r3, [r5, #0]
   117c2:	4213      	tst	r3, r2
   117c4:	d100      	bne.n	117c8 <LORAWAN_RxDone+0x5c0>
   117c6:	e107      	b.n	119d8 <LORAWAN_RxDone+0x7d0>
   117c8:	797b      	ldrb	r3, [r7, #5]
   117ca:	321f      	adds	r2, #31
   117cc:	4213      	tst	r3, r2
   117ce:	d100      	bne.n	117d2 <LORAWAN_RxDone+0x5ca>
   117d0:	e0e8      	b.n	119a4 <LORAWAN_RxDone+0x79c>
   117d2:	4b68      	ldr	r3, [pc, #416]	; (11974 <LORAWAN_RxDone+0x76c>)
   117d4:	4798      	blx	r3
   117d6:	0023      	movs	r3, r4
   117d8:	2101      	movs	r1, #1
   117da:	3384      	adds	r3, #132	; 0x84
   117dc:	785a      	ldrb	r2, [r3, #1]
   117de:	438a      	bics	r2, r1
   117e0:	705a      	strb	r2, [r3, #1]
   117e2:	9a08      	ldr	r2, [sp, #32]
   117e4:	2a00      	cmp	r2, #0
   117e6:	d100      	bne.n	117ea <LORAWAN_RxDone+0x5e2>
   117e8:	e093      	b.n	11912 <LORAWAN_RxDone+0x70a>
   117ea:	9a06      	ldr	r2, [sp, #24]
   117ec:	0031      	movs	r1, r6
   117ee:	0038      	movs	r0, r7
   117f0:	4b61      	ldr	r3, [pc, #388]	; (11978 <LORAWAN_RxDone+0x770>)
   117f2:	4798      	blx	r3
   117f4:	4b56      	ldr	r3, [pc, #344]	; (11950 <LORAWAN_RxDone+0x748>)
   117f6:	4d54      	ldr	r5, [pc, #336]	; (11948 <LORAWAN_RxDone+0x740>)
   117f8:	781b      	ldrb	r3, [r3, #0]
   117fa:	06db      	lsls	r3, r3, #27
   117fc:	d400      	bmi.n	11800 <LORAWAN_RxDone+0x5f8>
   117fe:	e160      	b.n	11ac2 <LORAWAN_RxDone+0x8ba>
   11800:	2220      	movs	r2, #32
   11802:	4b5e      	ldr	r3, [pc, #376]	; (1197c <LORAWAN_RxDone+0x774>)
   11804:	781b      	ldrb	r3, [r3, #0]
   11806:	401a      	ands	r2, r3
   11808:	9206      	str	r2, [sp, #24]
   1180a:	d000      	beq.n	1180e <LORAWAN_RxDone+0x606>
   1180c:	e159      	b.n	11ac2 <LORAWAN_RxDone+0x8ba>
   1180e:	320a      	adds	r2, #10
   11810:	4213      	tst	r3, r2
   11812:	d100      	bne.n	11816 <LORAWAN_RxDone+0x60e>
   11814:	e155      	b.n	11ac2 <LORAWAN_RxDone+0x8ba>
   11816:	002b      	movs	r3, r5
   11818:	33f5      	adds	r3, #245	; 0xf5
   1181a:	781b      	ldrb	r3, [r3, #0]
   1181c:	a90f      	add	r1, sp, #60	; 0x3c
   1181e:	704b      	strb	r3, [r1, #1]
   11820:	002e      	movs	r6, r5
   11822:	2301      	movs	r3, #1
   11824:	36e7      	adds	r6, #231	; 0xe7
   11826:	700b      	strb	r3, [r1, #0]
   11828:	7833      	ldrb	r3, [r6, #0]
   1182a:	aa0e      	add	r2, sp, #56	; 0x38
   1182c:	202f      	movs	r0, #47	; 0x2f
   1182e:	4f54      	ldr	r7, [pc, #336]	; (11980 <LORAWAN_RxDone+0x778>)
   11830:	708b      	strb	r3, [r1, #2]
   11832:	47b8      	blx	r7
   11834:	9007      	str	r0, [sp, #28]
   11836:	2808      	cmp	r0, #8
   11838:	d000      	beq.n	1183c <LORAWAN_RxDone+0x634>
   1183a:	e0fb      	b.n	11a34 <LORAWAN_RxDone+0x82c>
   1183c:	4b51      	ldr	r3, [pc, #324]	; (11984 <LORAWAN_RxDone+0x77c>)
   1183e:	9806      	ldr	r0, [sp, #24]
   11840:	4798      	blx	r3
   11842:	4b4e      	ldr	r3, [pc, #312]	; (1197c <LORAWAN_RxDone+0x774>)
   11844:	9a07      	ldr	r2, [sp, #28]
   11846:	781b      	ldrb	r3, [r3, #0]
   11848:	4393      	bics	r3, r2
   1184a:	4a4c      	ldr	r2, [pc, #304]	; (1197c <LORAWAN_RxDone+0x774>)
   1184c:	7013      	strb	r3, [r2, #0]
   1184e:	2001      	movs	r0, #1
   11850:	e53e      	b.n	112d0 <LORAWAN_RxDone+0xc8>
   11852:	0023      	movs	r3, r4
   11854:	220e      	movs	r2, #14
   11856:	3384      	adds	r3, #132	; 0x84
   11858:	781b      	ldrb	r3, [r3, #0]
   1185a:	4013      	ands	r3, r2
   1185c:	2b06      	cmp	r3, #6
   1185e:	d101      	bne.n	11864 <LORAWAN_RxDone+0x65c>
   11860:	4b49      	ldr	r3, [pc, #292]	; (11988 <LORAWAN_RxDone+0x780>)
   11862:	4798      	blx	r3
   11864:	4949      	ldr	r1, [pc, #292]	; (1198c <LORAWAN_RxDone+0x784>)
   11866:	784a      	ldrb	r2, [r1, #1]
   11868:	780b      	ldrb	r3, [r1, #0]
   1186a:	0212      	lsls	r2, r2, #8
   1186c:	431a      	orrs	r2, r3
   1186e:	788b      	ldrb	r3, [r1, #2]
   11870:	041b      	lsls	r3, r3, #16
   11872:	431a      	orrs	r2, r3
   11874:	78cb      	ldrb	r3, [r1, #3]
   11876:	061b      	lsls	r3, r3, #24
   11878:	4313      	orrs	r3, r2
   1187a:	d008      	beq.n	1188e <LORAWAN_RxDone+0x686>
   1187c:	0022      	movs	r2, r4
   1187e:	2120      	movs	r1, #32
   11880:	3294      	adds	r2, #148	; 0x94
   11882:	7813      	ldrb	r3, [r2, #0]
   11884:	201e      	movs	r0, #30
   11886:	438b      	bics	r3, r1
   11888:	7013      	strb	r3, [r2, #0]
   1188a:	4b32      	ldr	r3, [pc, #200]	; (11954 <LORAWAN_RxDone+0x74c>)
   1188c:	4798      	blx	r3
   1188e:	2300      	movs	r3, #0
   11890:	34e0      	adds	r4, #224	; 0xe0
   11892:	7023      	strb	r3, [r4, #0]
   11894:	4b35      	ldr	r3, [pc, #212]	; (1196c <LORAWAN_RxDone+0x764>)
   11896:	4798      	blx	r3
   11898:	e7d9      	b.n	1184e <LORAWAN_RxDone+0x646>
   1189a:	003e      	movs	r6, r7
   1189c:	3608      	adds	r6, #8
   1189e:	e735      	b.n	1170c <LORAWAN_RxDone+0x504>
   118a0:	9b06      	ldr	r3, [sp, #24]
   118a2:	2b00      	cmp	r3, #0
   118a4:	d031      	beq.n	1190a <LORAWAN_RxDone+0x702>
   118a6:	0703      	lsls	r3, r0, #28
   118a8:	d1d3      	bne.n	11852 <LORAWAN_RxDone+0x64a>
   118aa:	390d      	subs	r1, #13
   118ac:	6813      	ldr	r3, [r2, #0]
   118ae:	b2cc      	uxtb	r4, r1
   118b0:	0011      	movs	r1, r2
   118b2:	7912      	ldrb	r2, [r2, #4]
   118b4:	0a18      	lsrs	r0, r3, #8
   118b6:	0612      	lsls	r2, r2, #24
   118b8:	4302      	orrs	r2, r0
   118ba:	9204      	str	r2, [sp, #16]
   118bc:	4a28      	ldr	r2, [pc, #160]	; (11960 <LORAWAN_RxDone+0x758>)
   118be:	4663      	mov	r3, ip
   118c0:	9203      	str	r2, [sp, #12]
   118c2:	466a      	mov	r2, sp
   118c4:	8313      	strh	r3, [r2, #24]
   118c6:	8b13      	ldrh	r3, [r2, #24]
   118c8:	318c      	adds	r1, #140	; 0x8c
   118ca:	9302      	str	r3, [sp, #8]
   118cc:	2302      	movs	r3, #2
   118ce:	9301      	str	r3, [sp, #4]
   118d0:	4b2f      	ldr	r3, [pc, #188]	; (11990 <LORAWAN_RxDone+0x788>)
   118d2:	2201      	movs	r2, #1
   118d4:	9300      	str	r3, [sp, #0]
   118d6:	680b      	ldr	r3, [r1, #0]
   118d8:	0028      	movs	r0, r5
   118da:	0021      	movs	r1, r4
   118dc:	4e22      	ldr	r6, [pc, #136]	; (11968 <LORAWAN_RxDone+0x760>)
   118de:	47b0      	blx	r6
   118e0:	2800      	cmp	r0, #0
   118e2:	d004      	beq.n	118ee <LORAWAN_RxDone+0x6e6>
   118e4:	4b21      	ldr	r3, [pc, #132]	; (1196c <LORAWAN_RxDone+0x764>)
   118e6:	4798      	blx	r3
   118e8:	201f      	movs	r0, #31
   118ea:	4b1a      	ldr	r3, [pc, #104]	; (11954 <LORAWAN_RxDone+0x74c>)
   118ec:	4798      	blx	r3
   118ee:	4b1b      	ldr	r3, [pc, #108]	; (1195c <LORAWAN_RxDone+0x754>)
   118f0:	0021      	movs	r1, r4
   118f2:	0028      	movs	r0, r5
   118f4:	4798      	blx	r3
   118f6:	2300      	movs	r3, #0
   118f8:	9306      	str	r3, [sp, #24]
   118fa:	3301      	adds	r3, #1
   118fc:	9307      	str	r3, [sp, #28]
   118fe:	2600      	movs	r6, #0
   11900:	e73d      	b.n	1177e <LORAWAN_RxDone+0x576>
   11902:	2600      	movs	r6, #0
   11904:	9608      	str	r6, [sp, #32]
   11906:	9606      	str	r6, [sp, #24]
   11908:	e739      	b.n	1177e <LORAWAN_RxDone+0x576>
   1190a:	9b06      	ldr	r3, [sp, #24]
   1190c:	9308      	str	r3, [sp, #32]
   1190e:	001e      	movs	r6, r3
   11910:	e735      	b.n	1177e <LORAWAN_RxDone+0x576>
   11912:	2120      	movs	r1, #32
   11914:	782a      	ldrb	r2, [r5, #0]
   11916:	438a      	bics	r2, r1
   11918:	702a      	strb	r2, [r5, #0]
   1191a:	0022      	movs	r2, r4
   1191c:	32fd      	adds	r2, #253	; 0xfd
   1191e:	7812      	ldrb	r2, [r2, #0]
   11920:	2a01      	cmp	r2, #1
   11922:	d137      	bne.n	11994 <LORAWAN_RxDone+0x78c>
   11924:	781a      	ldrb	r2, [r3, #0]
   11926:	3912      	subs	r1, #18
   11928:	438a      	bics	r2, r1
   1192a:	701a      	strb	r2, [r3, #0]
   1192c:	2388      	movs	r3, #136	; 0x88
   1192e:	4a06      	ldr	r2, [pc, #24]	; (11948 <LORAWAN_RxDone+0x740>)
   11930:	009b      	lsls	r3, r3, #2
   11932:	5cd3      	ldrb	r3, [r2, r3]
   11934:	2b00      	cmp	r3, #0
   11936:	d000      	beq.n	1193a <LORAWAN_RxDone+0x732>
   11938:	e75c      	b.n	117f4 <LORAWAN_RxDone+0x5ec>
   1193a:	2008      	movs	r0, #8
   1193c:	4b05      	ldr	r3, [pc, #20]	; (11954 <LORAWAN_RxDone+0x74c>)
   1193e:	4798      	blx	r3
   11940:	e758      	b.n	117f4 <LORAWAN_RxDone+0x5ec>
   11942:	46c0      	nop			; (mov r8, r8)
   11944:	0001283d 	.word	0x0001283d
   11948:	20003170 	.word	0x20003170
   1194c:	0000f8e1 	.word	0x0000f8e1
   11950:	200031f4 	.word	0x200031f4
   11954:	00010789 	.word	0x00010789
   11958:	00008d09 	.word	0x00008d09
   1195c:	00010f25 	.word	0x00010f25
   11960:	20002f34 	.word	0x20002f34
   11964:	200031a5 	.word	0x200031a5
   11968:	000106c9 	.word	0x000106c9
   1196c:	00010c9d 	.word	0x00010c9d
   11970:	0000cec5 	.word	0x0000cec5
   11974:	0000fd95 	.word	0x0000fd95
   11978:	00010839 	.word	0x00010839
   1197c:	20003204 	.word	0x20003204
   11980:	0000c665 	.word	0x0000c665
   11984:	0000fa49 	.word	0x0000fa49
   11988:	0000f979 	.word	0x0000f979
   1198c:	200034cc 	.word	0x200034cc
   11990:	20003195 	.word	0x20003195
   11994:	2a04      	cmp	r2, #4
   11996:	d1c9      	bne.n	1192c <LORAWAN_RxDone+0x724>
   11998:	0023      	movs	r3, r4
   1199a:	33f1      	adds	r3, #241	; 0xf1
   1199c:	7818      	ldrb	r0, [r3, #0]
   1199e:	4bab      	ldr	r3, [pc, #684]	; (11c4c <LORAWAN_RxDone+0xa44>)
   119a0:	4798      	blx	r3
   119a2:	e7c3      	b.n	1192c <LORAWAN_RxDone+0x724>
   119a4:	9b07      	ldr	r3, [sp, #28]
   119a6:	2b00      	cmp	r3, #0
   119a8:	d013      	beq.n	119d2 <LORAWAN_RxDone+0x7ca>
   119aa:	0023      	movs	r3, r4
   119ac:	33fd      	adds	r3, #253	; 0xfd
   119ae:	781e      	ldrb	r6, [r3, #0]
   119b0:	2e01      	cmp	r6, #1
   119b2:	d10e      	bne.n	119d2 <LORAWAN_RxDone+0x7ca>
   119b4:	4ba6      	ldr	r3, [pc, #664]	; (11c50 <LORAWAN_RxDone+0xa48>)
   119b6:	4798      	blx	r3
   119b8:	0022      	movs	r2, r4
   119ba:	3284      	adds	r2, #132	; 0x84
   119bc:	7853      	ldrb	r3, [r2, #1]
   119be:	43b3      	bics	r3, r6
   119c0:	7053      	strb	r3, [r2, #1]
   119c2:	2220      	movs	r2, #32
   119c4:	782b      	ldrb	r3, [r5, #0]
   119c6:	4393      	bics	r3, r2
   119c8:	702b      	strb	r3, [r5, #0]
   119ca:	2388      	movs	r3, #136	; 0x88
   119cc:	009b      	lsls	r3, r3, #2
   119ce:	5ce3      	ldrb	r3, [r4, r3]
   119d0:	e7b0      	b.n	11934 <LORAWAN_RxDone+0x72c>
   119d2:	4ba0      	ldr	r3, [pc, #640]	; (11c54 <LORAWAN_RxDone+0xa4c>)
   119d4:	4798      	blx	r3
   119d6:	e70d      	b.n	117f4 <LORAWAN_RxDone+0x5ec>
   119d8:	9a08      	ldr	r2, [sp, #32]
   119da:	2a00      	cmp	r2, #0
   119dc:	d00b      	beq.n	119f6 <LORAWAN_RxDone+0x7ee>
   119de:	9a06      	ldr	r2, [sp, #24]
   119e0:	0031      	movs	r1, r6
   119e2:	0038      	movs	r0, r7
   119e4:	4b9c      	ldr	r3, [pc, #624]	; (11c58 <LORAWAN_RxDone+0xa50>)
   119e6:	4798      	blx	r3
   119e8:	0022      	movs	r2, r4
   119ea:	2101      	movs	r1, #1
   119ec:	3284      	adds	r2, #132	; 0x84
   119ee:	7853      	ldrb	r3, [r2, #1]
   119f0:	438b      	bics	r3, r1
   119f2:	7053      	strb	r3, [r2, #1]
   119f4:	e6fe      	b.n	117f4 <LORAWAN_RxDone+0x5ec>
   119f6:	2220      	movs	r2, #32
   119f8:	4393      	bics	r3, r2
   119fa:	702b      	strb	r3, [r5, #0]
   119fc:	0023      	movs	r3, r4
   119fe:	33fd      	adds	r3, #253	; 0xfd
   11a00:	781b      	ldrb	r3, [r3, #0]
   11a02:	2b01      	cmp	r3, #1
   11a04:	d10e      	bne.n	11a24 <LORAWAN_RxDone+0x81c>
   11a06:	0022      	movs	r2, r4
   11a08:	210e      	movs	r1, #14
   11a0a:	3284      	adds	r2, #132	; 0x84
   11a0c:	7813      	ldrb	r3, [r2, #0]
   11a0e:	438b      	bics	r3, r1
   11a10:	7013      	strb	r3, [r2, #0]
   11a12:	2388      	movs	r3, #136	; 0x88
   11a14:	009b      	lsls	r3, r3, #2
   11a16:	5ce3      	ldrb	r3, [r4, r3]
   11a18:	2b00      	cmp	r3, #0
   11a1a:	d1e5      	bne.n	119e8 <LORAWAN_RxDone+0x7e0>
   11a1c:	2008      	movs	r0, #8
   11a1e:	4b8f      	ldr	r3, [pc, #572]	; (11c5c <LORAWAN_RxDone+0xa54>)
   11a20:	4798      	blx	r3
   11a22:	e7e1      	b.n	119e8 <LORAWAN_RxDone+0x7e0>
   11a24:	2b04      	cmp	r3, #4
   11a26:	d1f4      	bne.n	11a12 <LORAWAN_RxDone+0x80a>
   11a28:	0023      	movs	r3, r4
   11a2a:	33f1      	adds	r3, #241	; 0xf1
   11a2c:	7818      	ldrb	r0, [r3, #0]
   11a2e:	4b87      	ldr	r3, [pc, #540]	; (11c4c <LORAWAN_RxDone+0xa44>)
   11a30:	4798      	blx	r3
   11a32:	e7ee      	b.n	11a12 <LORAWAN_RxDone+0x80a>
   11a34:	35ff      	adds	r5, #255	; 0xff
   11a36:	7f6b      	ldrb	r3, [r5, #29]
   11a38:	079a      	lsls	r2, r3, #30
   11a3a:	d520      	bpl.n	11a7e <LORAWAN_RxDone+0x876>
   11a3c:	aa10      	add	r2, sp, #64	; 0x40
   11a3e:	0031      	movs	r1, r6
   11a40:	2026      	movs	r0, #38	; 0x26
   11a42:	47b8      	blx	r7
   11a44:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11a46:	1c5a      	adds	r2, r3, #1
   11a48:	d001      	beq.n	11a4e <LORAWAN_RxDone+0x846>
   11a4a:	3314      	adds	r3, #20
   11a4c:	9310      	str	r3, [sp, #64]	; 0x40
   11a4e:	0021      	movs	r1, r4
   11a50:	220e      	movs	r2, #14
   11a52:	3184      	adds	r1, #132	; 0x84
   11a54:	780b      	ldrb	r3, [r1, #0]
   11a56:	4393      	bics	r3, r2
   11a58:	001a      	movs	r2, r3
   11a5a:	230c      	movs	r3, #12
   11a5c:	4313      	orrs	r3, r2
   11a5e:	700b      	strb	r3, [r1, #0]
   11a60:	4b7f      	ldr	r3, [pc, #508]	; (11c60 <LORAWAN_RxDone+0xa58>)
   11a62:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11a64:	5ce3      	ldrb	r3, [r4, r3]
   11a66:	21fa      	movs	r1, #250	; 0xfa
   11a68:	1ad3      	subs	r3, r2, r3
   11a6a:	2200      	movs	r2, #0
   11a6c:	0089      	lsls	r1, r1, #2
   11a6e:	4359      	muls	r1, r3
   11a70:	34ef      	adds	r4, #239	; 0xef
   11a72:	4b7c      	ldr	r3, [pc, #496]	; (11c64 <LORAWAN_RxDone+0xa5c>)
   11a74:	7820      	ldrb	r0, [r4, #0]
   11a76:	9200      	str	r2, [sp, #0]
   11a78:	4c7b      	ldr	r4, [pc, #492]	; (11c68 <LORAWAN_RxDone+0xa60>)
   11a7a:	47a0      	blx	r4
   11a7c:	e6e7      	b.n	1184e <LORAWAN_RxDone+0x646>
   11a7e:	075b      	lsls	r3, r3, #29
   11a80:	d400      	bmi.n	11a84 <LORAWAN_RxDone+0x87c>
   11a82:	e6e4      	b.n	1184e <LORAWAN_RxDone+0x646>
   11a84:	aa10      	add	r2, sp, #64	; 0x40
   11a86:	0031      	movs	r1, r6
   11a88:	2032      	movs	r0, #50	; 0x32
   11a8a:	47b8      	blx	r7
   11a8c:	220e      	movs	r2, #14
   11a8e:	4b77      	ldr	r3, [pc, #476]	; (11c6c <LORAWAN_RxDone+0xa64>)
   11a90:	781b      	ldrb	r3, [r3, #0]
   11a92:	4393      	bics	r3, r2
   11a94:	001a      	movs	r2, r3
   11a96:	230c      	movs	r3, #12
   11a98:	4313      	orrs	r3, r2
   11a9a:	4a74      	ldr	r2, [pc, #464]	; (11c6c <LORAWAN_RxDone+0xa64>)
   11a9c:	7013      	strb	r3, [r2, #0]
   11a9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11aa0:	1c5a      	adds	r2, r3, #1
   11aa2:	d001      	beq.n	11aa8 <LORAWAN_RxDone+0x8a0>
   11aa4:	3301      	adds	r3, #1
   11aa6:	9310      	str	r3, [sp, #64]	; 0x40
   11aa8:	4b6d      	ldr	r3, [pc, #436]	; (11c60 <LORAWAN_RxDone+0xa58>)
   11aaa:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11aac:	5ce3      	ldrb	r3, [r4, r3]
   11aae:	21fa      	movs	r1, #250	; 0xfa
   11ab0:	1ad3      	subs	r3, r2, r3
   11ab2:	2200      	movs	r2, #0
   11ab4:	0089      	lsls	r1, r1, #2
   11ab6:	34f2      	adds	r4, #242	; 0xf2
   11ab8:	4359      	muls	r1, r3
   11aba:	7820      	ldrb	r0, [r4, #0]
   11abc:	4b6c      	ldr	r3, [pc, #432]	; (11c70 <LORAWAN_RxDone+0xa68>)
   11abe:	9200      	str	r2, [sp, #0]
   11ac0:	e7da      	b.n	11a78 <LORAWAN_RxDone+0x870>
   11ac2:	35fd      	adds	r5, #253	; 0xfd
   11ac4:	782b      	ldrb	r3, [r5, #0]
   11ac6:	2b04      	cmp	r3, #4
   11ac8:	d000      	beq.n	11acc <LORAWAN_RxDone+0x8c4>
   11aca:	e6c0      	b.n	1184e <LORAWAN_RxDone+0x646>
   11acc:	0038      	movs	r0, r7
   11ace:	4b69      	ldr	r3, [pc, #420]	; (11c74 <LORAWAN_RxDone+0xa6c>)
   11ad0:	4798      	blx	r3
   11ad2:	e6bc      	b.n	1184e <LORAWAN_RxDone+0x646>
   11ad4:	2390      	movs	r3, #144	; 0x90
   11ad6:	009b      	lsls	r3, r3, #2
   11ad8:	5ce3      	ldrb	r3, [r4, r3]
   11ada:	2b00      	cmp	r3, #0
   11adc:	d009      	beq.n	11af2 <LORAWAN_RxDone+0x8ea>
   11ade:	2322      	movs	r3, #34	; 0x22
   11ae0:	aa04      	add	r2, sp, #16
   11ae2:	189b      	adds	r3, r3, r2
   11ae4:	781b      	ldrb	r3, [r3, #0]
   11ae6:	003a      	movs	r2, r7
   11ae8:	9906      	ldr	r1, [sp, #24]
   11aea:	0038      	movs	r0, r7
   11aec:	4c62      	ldr	r4, [pc, #392]	; (11c78 <LORAWAN_RxDone+0xa70>)
   11aee:	47a0      	blx	r4
   11af0:	e6ad      	b.n	1184e <LORAWAN_RxDone+0x646>
   11af2:	2220      	movs	r2, #32
   11af4:	3494      	adds	r4, #148	; 0x94
   11af6:	7823      	ldrb	r3, [r4, #0]
   11af8:	201e      	movs	r0, #30
   11afa:	4393      	bics	r3, r2
   11afc:	7023      	strb	r3, [r4, #0]
   11afe:	4b57      	ldr	r3, [pc, #348]	; (11c5c <LORAWAN_RxDone+0xa54>)
   11b00:	4798      	blx	r3
   11b02:	e6c7      	b.n	11894 <LORAWAN_RxDone+0x68c>
   11b04:	220e      	movs	r2, #14
   11b06:	4013      	ands	r3, r2
   11b08:	2b0a      	cmp	r3, #10
   11b0a:	d008      	beq.n	11b1e <LORAWAN_RxDone+0x916>
   11b0c:	2b06      	cmp	r3, #6
   11b0e:	d000      	beq.n	11b12 <LORAWAN_RxDone+0x90a>
   11b10:	e5a0      	b.n	11654 <LORAWAN_RxDone+0x44c>
   11b12:	0023      	movs	r3, r4
   11b14:	33f9      	adds	r3, #249	; 0xf9
   11b16:	781b      	ldrb	r3, [r3, #0]
   11b18:	2b00      	cmp	r3, #0
   11b1a:	d100      	bne.n	11b1e <LORAWAN_RxDone+0x916>
   11b1c:	e59a      	b.n	11654 <LORAWAN_RxDone+0x44c>
   11b1e:	2220      	movs	r2, #32
   11b20:	3494      	adds	r4, #148	; 0x94
   11b22:	7823      	ldrb	r3, [r4, #0]
   11b24:	2019      	movs	r0, #25
   11b26:	4393      	bics	r3, r2
   11b28:	7023      	strb	r3, [r4, #0]
   11b2a:	e5a0      	b.n	1166e <LORAWAN_RxDone+0x466>
   11b2c:	4953      	ldr	r1, [pc, #332]	; (11c7c <LORAWAN_RxDone+0xa74>)
   11b2e:	784a      	ldrb	r2, [r1, #1]
   11b30:	780b      	ldrb	r3, [r1, #0]
   11b32:	0212      	lsls	r2, r2, #8
   11b34:	431a      	orrs	r2, r3
   11b36:	788b      	ldrb	r3, [r1, #2]
   11b38:	041b      	lsls	r3, r3, #16
   11b3a:	431a      	orrs	r2, r3
   11b3c:	78cb      	ldrb	r3, [r1, #3]
   11b3e:	061b      	lsls	r3, r3, #24
   11b40:	4313      	orrs	r3, r2
   11b42:	d100      	bne.n	11b46 <LORAWAN_RxDone+0x93e>
   11b44:	e683      	b.n	1184e <LORAWAN_RxDone+0x646>
   11b46:	4b4e      	ldr	r3, [pc, #312]	; (11c80 <LORAWAN_RxDone+0xa78>)
   11b48:	4c4e      	ldr	r4, [pc, #312]	; (11c84 <LORAWAN_RxDone+0xa7c>)
   11b4a:	781b      	ldrb	r3, [r3, #0]
   11b4c:	2b10      	cmp	r3, #16
   11b4e:	d105      	bne.n	11b5c <LORAWAN_RxDone+0x954>
   11b50:	0001      	movs	r1, r0
   11b52:	2000      	movs	r0, #0
   11b54:	9a06      	ldr	r2, [sp, #24]
   11b56:	3b0c      	subs	r3, #12
   11b58:	47a0      	blx	r4
   11b5a:	e678      	b.n	1184e <LORAWAN_RxDone+0x646>
   11b5c:	2300      	movs	r3, #0
   11b5e:	0001      	movs	r1, r0
   11b60:	9a06      	ldr	r2, [sp, #24]
   11b62:	0018      	movs	r0, r3
   11b64:	e7f8      	b.n	11b58 <LORAWAN_RxDone+0x950>
   11b66:	348c      	adds	r4, #140	; 0x8c
   11b68:	6823      	ldr	r3, [r4, #0]
   11b6a:	0031      	movs	r1, r6
   11b6c:	9308      	str	r3, [sp, #32]
   11b6e:	4b46      	ldr	r3, [pc, #280]	; (11c88 <LORAWAN_RxDone+0xa80>)
   11b70:	4798      	blx	r3
   11b72:	2808      	cmp	r0, #8
   11b74:	d001      	beq.n	11b7a <LORAWAN_RxDone+0x972>
   11b76:	f7ff fbab 	bl	112d0 <LORAWAN_RxDone+0xc8>
   11b7a:	9b06      	ldr	r3, [sp, #24]
   11b7c:	0028      	movs	r0, r5
   11b7e:	1f1a      	subs	r2, r3, #4
   11b80:	9b07      	ldr	r3, [sp, #28]
   11b82:	b2d2      	uxtb	r2, r2
   11b84:	9300      	str	r3, [sp, #0]
   11b86:	6821      	ldr	r1, [r4, #0]
   11b88:	2349      	movs	r3, #73	; 0x49
   11b8a:	4c40      	ldr	r4, [pc, #256]	; (11c8c <LORAWAN_RxDone+0xa84>)
   11b8c:	47a0      	blx	r4
   11b8e:	4d40      	ldr	r5, [pc, #256]	; (11c90 <LORAWAN_RxDone+0xa88>)
   11b90:	9607      	str	r6, [sp, #28]
   11b92:	4e40      	ldr	r6, [pc, #256]	; (11c94 <LORAWAN_RxDone+0xa8c>)
   11b94:	4c40      	ldr	r4, [pc, #256]	; (11c98 <LORAWAN_RxDone+0xa90>)
   11b96:	2210      	movs	r2, #16
   11b98:	0021      	movs	r1, r4
   11b9a:	4b40      	ldr	r3, [pc, #256]	; (11c9c <LORAWAN_RxDone+0xa94>)
   11b9c:	0030      	movs	r0, r6
   11b9e:	4798      	blx	r3
   11ba0:	9b06      	ldr	r3, [sp, #24]
   11ba2:	0039      	movs	r1, r7
   11ba4:	3b04      	subs	r3, #4
   11ba6:	001a      	movs	r2, r3
   11ba8:	9309      	str	r3, [sp, #36]	; 0x24
   11baa:	483d      	ldr	r0, [pc, #244]	; (11ca0 <LORAWAN_RxDone+0xa98>)
   11bac:	4b3b      	ldr	r3, [pc, #236]	; (11c9c <LORAWAN_RxDone+0xa94>)
   11bae:	4798      	blx	r3
   11bb0:	9b06      	ldr	r3, [sp, #24]
   11bb2:	9a07      	ldr	r2, [sp, #28]
   11bb4:	330c      	adds	r3, #12
   11bb6:	b29b      	uxth	r3, r3
   11bb8:	9300      	str	r3, [sp, #0]
   11bba:	0033      	movs	r3, r6
   11bbc:	2a00      	cmp	r2, #0
   11bbe:	d100      	bne.n	11bc2 <LORAWAN_RxDone+0x9ba>
   11bc0:	e557      	b.n	11672 <LORAWAN_RxDone+0x46a>
   11bc2:	0022      	movs	r2, r4
   11bc4:	2104      	movs	r1, #4
   11bc6:	4c37      	ldr	r4, [pc, #220]	; (11ca4 <LORAWAN_RxDone+0xa9c>)
   11bc8:	0028      	movs	r0, r5
   11bca:	47a0      	blx	r4
   11bcc:	2204      	movs	r2, #4
   11bce:	4932      	ldr	r1, [pc, #200]	; (11c98 <LORAWAN_RxDone+0xa90>)
   11bd0:	4c32      	ldr	r4, [pc, #200]	; (11c9c <LORAWAN_RxDone+0xa94>)
   11bd2:	a80d      	add	r0, sp, #52	; 0x34
   11bd4:	47a0      	blx	r4
   11bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11bd8:	2204      	movs	r2, #4
   11bda:	18f9      	adds	r1, r7, r3
   11bdc:	a810      	add	r0, sp, #64	; 0x40
   11bde:	47a0      	blx	r4
   11be0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11be2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11be4:	4293      	cmp	r3, r2
   11be6:	d100      	bne.n	11bea <LORAWAN_RxDone+0x9e2>
   11be8:	e54a      	b.n	11680 <LORAWAN_RxDone+0x478>
   11bea:	9b07      	ldr	r3, [sp, #28]
   11bec:	2b00      	cmp	r3, #0
   11bee:	d108      	bne.n	11c02 <LORAWAN_RxDone+0x9fa>
   11bf0:	220e      	movs	r2, #14
   11bf2:	4b2d      	ldr	r3, [pc, #180]	; (11ca8 <LORAWAN_RxDone+0xaa0>)
   11bf4:	3384      	adds	r3, #132	; 0x84
   11bf6:	781b      	ldrb	r3, [r3, #0]
   11bf8:	4013      	ands	r3, r2
   11bfa:	2b06      	cmp	r3, #6
   11bfc:	d101      	bne.n	11c02 <LORAWAN_RxDone+0x9fa>
   11bfe:	4b2b      	ldr	r3, [pc, #172]	; (11cac <LORAWAN_RxDone+0xaa4>)
   11c00:	4798      	blx	r3
   11c02:	491e      	ldr	r1, [pc, #120]	; (11c7c <LORAWAN_RxDone+0xa74>)
   11c04:	784a      	ldrb	r2, [r1, #1]
   11c06:	780b      	ldrb	r3, [r1, #0]
   11c08:	0212      	lsls	r2, r2, #8
   11c0a:	431a      	orrs	r2, r3
   11c0c:	788b      	ldrb	r3, [r1, #2]
   11c0e:	041b      	lsls	r3, r3, #16
   11c10:	431a      	orrs	r2, r3
   11c12:	78cb      	ldrb	r3, [r1, #3]
   11c14:	061b      	lsls	r3, r3, #24
   11c16:	4313      	orrs	r3, r2
   11c18:	d101      	bne.n	11c1e <LORAWAN_RxDone+0xa16>
   11c1a:	f7ff fb47 	bl	112ac <LORAWAN_RxDone+0xa4>
   11c1e:	4a22      	ldr	r2, [pc, #136]	; (11ca8 <LORAWAN_RxDone+0xaa0>)
   11c20:	2020      	movs	r0, #32
   11c22:	0011      	movs	r1, r2
   11c24:	3194      	adds	r1, #148	; 0x94
   11c26:	780b      	ldrb	r3, [r1, #0]
   11c28:	4383      	bics	r3, r0
   11c2a:	700b      	strb	r3, [r1, #0]
   11c2c:	9b07      	ldr	r3, [sp, #28]
   11c2e:	2b00      	cmp	r3, #0
   11c30:	d100      	bne.n	11c34 <LORAWAN_RxDone+0xa2c>
   11c32:	e521      	b.n	11678 <LORAWAN_RxDone+0x470>
   11c34:	2322      	movs	r3, #34	; 0x22
   11c36:	a904      	add	r1, sp, #16
   11c38:	185b      	adds	r3, r3, r1
   11c3a:	7819      	ldrb	r1, [r3, #0]
   11c3c:	233c      	movs	r3, #60	; 0x3c
   11c3e:	434b      	muls	r3, r1
   11c40:	18d3      	adds	r3, r2, r3
   11c42:	9a08      	ldr	r2, [sp, #32]
   11c44:	33fc      	adds	r3, #252	; 0xfc
   11c46:	659a      	str	r2, [r3, #88]	; 0x58
   11c48:	2018      	movs	r0, #24
   11c4a:	e510      	b.n	1166e <LORAWAN_RxDone+0x466>
   11c4c:	0000cec5 	.word	0x0000cec5
   11c50:	0000fd95 	.word	0x0000fd95
   11c54:	0000fcf9 	.word	0x0000fcf9
   11c58:	00010839 	.word	0x00010839
   11c5c:	00010789 	.word	0x00010789
   11c60:	0000022b 	.word	0x0000022b
   11c64:	0000fb41 	.word	0x0000fb41
   11c68:	0000cbad 	.word	0x0000cbad
   11c6c:	200031f4 	.word	0x200031f4
   11c70:	000105a1 	.word	0x000105a1
   11c74:	000126bd 	.word	0x000126bd
   11c78:	000128b1 	.word	0x000128b1
   11c7c:	200034cc 	.word	0x200034cc
   11c80:	2000224f 	.word	0x2000224f
   11c84:	000107ed 	.word	0x000107ed
   11c88:	00010cd9 	.word	0x00010cd9
   11c8c:	0000f8e1 	.word	0x0000f8e1
   11c90:	20003195 	.word	0x20003195
   11c94:	20002f34 	.word	0x20002f34
   11c98:	20001e9d 	.word	0x20001e9d
   11c9c:	0001613f 	.word	0x0001613f
   11ca0:	20002f44 	.word	0x20002f44
   11ca4:	00007161 	.word	0x00007161
   11ca8:	20003170 	.word	0x20003170
   11cac:	0000f979 	.word	0x0000f979

00011cb0 <LorawanSetEdClass>:
   11cb0:	2388      	movs	r3, #136	; 0x88
   11cb2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11cb4:	4d1a      	ldr	r5, [pc, #104]	; (11d20 <LorawanSetEdClass+0x70>)
   11cb6:	009b      	lsls	r3, r3, #2
   11cb8:	5ceb      	ldrb	r3, [r5, r3]
   11cba:	0004      	movs	r4, r0
   11cbc:	2011      	movs	r0, #17
   11cbe:	2b00      	cmp	r3, #0
   11cc0:	d013      	beq.n	11cea <LorawanSetEdClass+0x3a>
   11cc2:	002b      	movs	r3, r5
   11cc4:	33fe      	adds	r3, #254	; 0xfe
   11cc6:	781b      	ldrb	r3, [r3, #0]
   11cc8:	3807      	subs	r0, #7
   11cca:	4223      	tst	r3, r4
   11ccc:	d00d      	beq.n	11cea <LorawanSetEdClass+0x3a>
   11cce:	002b      	movs	r3, r5
   11cd0:	33fd      	adds	r3, #253	; 0xfd
   11cd2:	7819      	ldrb	r1, [r3, #0]
   11cd4:	428c      	cmp	r4, r1
   11cd6:	d007      	beq.n	11ce8 <LorawanSetEdClass+0x38>
   11cd8:	2901      	cmp	r1, #1
   11cda:	d107      	bne.n	11cec <LorawanSetEdClass+0x3c>
   11cdc:	2c04      	cmp	r4, #4
   11cde:	d104      	bne.n	11cea <LorawanSetEdClass+0x3a>
   11ce0:	701c      	strb	r4, [r3, #0]
   11ce2:	2000      	movs	r0, #0
   11ce4:	4b0f      	ldr	r3, [pc, #60]	; (11d24 <LorawanSetEdClass+0x74>)
   11ce6:	4798      	blx	r3
   11ce8:	2008      	movs	r0, #8
   11cea:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   11cec:	2904      	cmp	r1, #4
   11cee:	d1fc      	bne.n	11cea <LorawanSetEdClass+0x3a>
   11cf0:	2c01      	cmp	r4, #1
   11cf2:	d1fa      	bne.n	11cea <LorawanSetEdClass+0x3a>
   11cf4:	701c      	strb	r4, [r3, #0]
   11cf6:	0021      	movs	r1, r4
   11cf8:	4b0a      	ldr	r3, [pc, #40]	; (11d24 <LorawanSetEdClass+0x74>)
   11cfa:	2000      	movs	r0, #0
   11cfc:	4798      	blx	r3
   11cfe:	002a      	movs	r2, r5
   11d00:	210e      	movs	r1, #14
   11d02:	3284      	adds	r2, #132	; 0x84
   11d04:	7813      	ldrb	r3, [r2, #0]
   11d06:	a801      	add	r0, sp, #4
   11d08:	438b      	bics	r3, r1
   11d0a:	7013      	strb	r3, [r2, #0]
   11d0c:	4b06      	ldr	r3, [pc, #24]	; (11d28 <LorawanSetEdClass+0x78>)
   11d0e:	7004      	strb	r4, [r0, #0]
   11d10:	4798      	blx	r3
   11d12:	2394      	movs	r3, #148	; 0x94
   11d14:	005b      	lsls	r3, r3, #1
   11d16:	5ce8      	ldrb	r0, [r5, r3]
   11d18:	4b04      	ldr	r3, [pc, #16]	; (11d2c <LorawanSetEdClass+0x7c>)
   11d1a:	4798      	blx	r3
   11d1c:	e7e4      	b.n	11ce8 <LorawanSetEdClass+0x38>
   11d1e:	46c0      	nop			; (mov r8, r8)
   11d20:	20003170 	.word	0x20003170
   11d24:	00008d09 	.word	0x00008d09
   11d28:	0000eeb9 	.word	0x0000eeb9
   11d2c:	0000cec5 	.word	0x0000cec5

00011d30 <LORAWAN_SetAttr>:
   11d30:	2388      	movs	r3, #136	; 0x88
   11d32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11d34:	4cbb      	ldr	r4, [pc, #748]	; (12024 <LORAWAN_SetAttr+0x2f4>)
   11d36:	009b      	lsls	r3, r3, #2
   11d38:	5ce3      	ldrb	r3, [r4, r3]
   11d3a:	000d      	movs	r5, r1
   11d3c:	2611      	movs	r6, #17
   11d3e:	2b00      	cmp	r3, #0
   11d40:	d100      	bne.n	11d44 <LORAWAN_SetAttr+0x14>
   11d42:	e11f      	b.n	11f84 <LORAWAN_SetAttr+0x254>
   11d44:	2846      	cmp	r0, #70	; 0x46
   11d46:	d878      	bhi.n	11e3a <LORAWAN_SetAttr+0x10a>
   11d48:	f001 f8be 	bl	12ec8 <__gnu_thumb1_case_uhi>
   11d4c:	00930047 	.word	0x00930047
   11d50:	00fc00b2 	.word	0x00fc00b2
   11d54:	00e600c5 	.word	0x00e600c5
   11d58:	0134011e 	.word	0x0134011e
   11d5c:	01660154 	.word	0x01660154
   11d60:	01830178 	.word	0x01830178
   11d64:	01a6018d 	.word	0x01a6018d
   11d68:	007701ab 	.word	0x007701ab
   11d6c:	01b501b0 	.word	0x01b501b0
   11d70:	01bf01ba 	.word	0x01bf01ba
   11d74:	01e601c4 	.word	0x01e601c4
   11d78:	01cb01eb 	.word	0x01cb01eb
   11d7c:	01fc01c8 	.word	0x01fc01c8
   11d80:	01e101f8 	.word	0x01e101f8
   11d84:	01d701dd 	.word	0x01d701dd
   11d88:	00770077 	.word	0x00770077
   11d8c:	0077019e 	.word	0x0077019e
   11d90:	00770077 	.word	0x00770077
   11d94:	00770077 	.word	0x00770077
   11d98:	02000077 	.word	0x02000077
   11d9c:	02030066 	.word	0x02030066
   11da0:	020d0211 	.word	0x020d0211
   11da4:	00770208 	.word	0x00770208
   11da8:	02190215 	.word	0x02190215
   11dac:	0221021d 	.word	0x0221021d
   11db0:	02290225 	.word	0x02290225
   11db4:	00770249 	.word	0x00770249
   11db8:	00770077 	.word	0x00770077
   11dbc:	00770077 	.word	0x00770077
   11dc0:	00770077 	.word	0x00770077
   11dc4:	00770077 	.word	0x00770077
   11dc8:	02600077 	.word	0x02600077
   11dcc:	026e026a 	.word	0x026e026a
   11dd0:	00770077 	.word	0x00770077
   11dd4:	02730077 	.word	0x02730077
   11dd8:	0271      	.short	0x0271
   11dda:	260a      	movs	r6, #10
   11ddc:	2900      	cmp	r1, #0
   11dde:	d100      	bne.n	11de2 <LORAWAN_SetAttr+0xb2>
   11de0:	e0d0      	b.n	11f84 <LORAWAN_SetAttr+0x254>
   11de2:	0020      	movs	r0, r4
   11de4:	2208      	movs	r2, #8
   11de6:	4b90      	ldr	r3, [pc, #576]	; (12028 <LORAWAN_SetAttr+0x2f8>)
   11de8:	305d      	adds	r0, #93	; 0x5d
   11dea:	4798      	blx	r3
   11dec:	2108      	movs	r1, #8
   11dee:	4e8f      	ldr	r6, [pc, #572]	; (1202c <LORAWAN_SetAttr+0x2fc>)
   11df0:	2001      	movs	r0, #1
   11df2:	47b0      	blx	r6
   11df4:	0022      	movs	r2, r4
   11df6:	2501      	movs	r5, #1
   11df8:	32de      	adds	r2, #222	; 0xde
   11dfa:	7813      	ldrb	r3, [r2, #0]
   11dfc:	2109      	movs	r1, #9
   11dfe:	432b      	orrs	r3, r5
   11e00:	3484      	adds	r4, #132	; 0x84
   11e02:	0028      	movs	r0, r5
   11e04:	7013      	strb	r3, [r2, #0]
   11e06:	47b0      	blx	r6
   11e08:	7823      	ldrb	r3, [r4, #0]
   11e0a:	210b      	movs	r1, #11
   11e0c:	43ab      	bics	r3, r5
   11e0e:	0028      	movs	r0, r5
   11e10:	7023      	strb	r3, [r4, #0]
   11e12:	47b0      	blx	r6
   11e14:	2608      	movs	r6, #8
   11e16:	e0b5      	b.n	11f84 <LORAWAN_SetAttr+0x254>
   11e18:	0023      	movs	r3, r4
   11e1a:	33ff      	adds	r3, #255	; 0xff
   11e1c:	7f5b      	ldrb	r3, [r3, #29]
   11e1e:	260a      	movs	r6, #10
   11e20:	075b      	lsls	r3, r3, #29
   11e22:	d400      	bmi.n	11e26 <LORAWAN_SetAttr+0xf6>
   11e24:	e0ae      	b.n	11f84 <LORAWAN_SetAttr+0x254>
   11e26:	79ca      	ldrb	r2, [r1, #7]
   11e28:	4b81      	ldr	r3, [pc, #516]	; (12030 <LORAWAN_SetAttr+0x300>)
   11e2a:	2a00      	cmp	r2, #0
   11e2c:	d10e      	bne.n	11e4c <LORAWAN_SetAttr+0x11c>
   11e2e:	4669      	mov	r1, sp
   11e30:	201d      	movs	r0, #29
   11e32:	714a      	strb	r2, [r1, #5]
   11e34:	4798      	blx	r3
   11e36:	2800      	cmp	r0, #0
   11e38:	d001      	beq.n	11e3e <LORAWAN_SetAttr+0x10e>
   11e3a:	260a      	movs	r6, #10
   11e3c:	e0a2      	b.n	11f84 <LORAWAN_SetAttr+0x254>
   11e3e:	2109      	movs	r1, #9
   11e40:	34fe      	adds	r4, #254	; 0xfe
   11e42:	8460      	strh	r0, [r4, #34]	; 0x22
   11e44:	8420      	strh	r0, [r4, #32]
   11e46:	4b79      	ldr	r3, [pc, #484]	; (1202c <LORAWAN_SetAttr+0x2fc>)
   11e48:	4798      	blx	r3
   11e4a:	e7e3      	b.n	11e14 <LORAWAN_SetAttr+0xe4>
   11e4c:	2002      	movs	r0, #2
   11e4e:	5e2a      	ldrsh	r2, [r5, r0]
   11e50:	88ae      	ldrh	r6, [r5, #4]
   11e52:	79a8      	ldrb	r0, [r5, #6]
   11e54:	466d      	mov	r5, sp
   11e56:	806a      	strh	r2, [r5, #2]
   11e58:	2201      	movs	r2, #1
   11e5a:	8809      	ldrh	r1, [r1, #0]
   11e5c:	7128      	strb	r0, [r5, #4]
   11e5e:	8029      	strh	r1, [r5, #0]
   11e60:	201d      	movs	r0, #29
   11e62:	4669      	mov	r1, sp
   11e64:	716a      	strb	r2, [r5, #5]
   11e66:	4798      	blx	r3
   11e68:	2800      	cmp	r0, #0
   11e6a:	d1e6      	bne.n	11e3a <LORAWAN_SetAttr+0x10a>
   11e6c:	34fe      	adds	r4, #254	; 0xfe
   11e6e:	8466      	strh	r6, [r4, #34]	; 0x22
   11e70:	e7d0      	b.n	11e14 <LORAWAN_SetAttr+0xe4>
   11e72:	260a      	movs	r6, #10
   11e74:	2900      	cmp	r1, #0
   11e76:	d100      	bne.n	11e7a <LORAWAN_SetAttr+0x14a>
   11e78:	e084      	b.n	11f84 <LORAWAN_SetAttr+0x254>
   11e7a:	0020      	movs	r0, r4
   11e7c:	2208      	movs	r2, #8
   11e7e:	4b6a      	ldr	r3, [pc, #424]	; (12028 <LORAWAN_SetAttr+0x2f8>)
   11e80:	3055      	adds	r0, #85	; 0x55
   11e82:	4798      	blx	r3
   11e84:	2107      	movs	r1, #7
   11e86:	4d69      	ldr	r5, [pc, #420]	; (1202c <LORAWAN_SetAttr+0x2fc>)
   11e88:	2001      	movs	r0, #1
   11e8a:	47a8      	blx	r5
   11e8c:	0022      	movs	r2, r4
   11e8e:	2302      	movs	r3, #2
   11e90:	32de      	adds	r2, #222	; 0xde
   11e92:	7811      	ldrb	r1, [r2, #0]
   11e94:	2001      	movs	r0, #1
   11e96:	430b      	orrs	r3, r1
   11e98:	2109      	movs	r1, #9
   11e9a:	7013      	strb	r3, [r2, #0]
   11e9c:	47a8      	blx	r5
   11e9e:	2001      	movs	r0, #1
   11ea0:	3484      	adds	r4, #132	; 0x84
   11ea2:	7823      	ldrb	r3, [r4, #0]
   11ea4:	210b      	movs	r1, #11
   11ea6:	4383      	bics	r3, r0
   11ea8:	7023      	strb	r3, [r4, #0]
   11eaa:	47a8      	blx	r5
   11eac:	3e02      	subs	r6, #2
   11eae:	e069      	b.n	11f84 <LORAWAN_SetAttr+0x254>
   11eb0:	680b      	ldr	r3, [r1, #0]
   11eb2:	2001      	movs	r0, #1
   11eb4:	0a19      	lsrs	r1, r3, #8
   11eb6:	70a1      	strb	r1, [r4, #2]
   11eb8:	0c19      	lsrs	r1, r3, #16
   11eba:	7063      	strb	r3, [r4, #1]
   11ebc:	70e1      	strb	r1, [r4, #3]
   11ebe:	0e1b      	lsrs	r3, r3, #24
   11ec0:	2103      	movs	r1, #3
   11ec2:	4d5a      	ldr	r5, [pc, #360]	; (1202c <LORAWAN_SetAttr+0x2fc>)
   11ec4:	7123      	strb	r3, [r4, #4]
   11ec6:	47a8      	blx	r5
   11ec8:	0022      	movs	r2, r4
   11eca:	2304      	movs	r3, #4
   11ecc:	32de      	adds	r2, #222	; 0xde
   11ece:	7811      	ldrb	r1, [r2, #0]
   11ed0:	430b      	orrs	r3, r1
   11ed2:	7013      	strb	r3, [r2, #0]
   11ed4:	e015      	b.n	11f02 <LORAWAN_SetAttr+0x1d2>
   11ed6:	260a      	movs	r6, #10
   11ed8:	2900      	cmp	r1, #0
   11eda:	d053      	beq.n	11f84 <LORAWAN_SetAttr+0x254>
   11edc:	3606      	adds	r6, #6
   11ede:	0032      	movs	r2, r6
   11ee0:	4f51      	ldr	r7, [pc, #324]	; (12028 <LORAWAN_SetAttr+0x2f8>)
   11ee2:	1d60      	adds	r0, r4, #5
   11ee4:	47b8      	blx	r7
   11ee6:	0020      	movs	r0, r4
   11ee8:	0032      	movs	r2, r6
   11eea:	0029      	movs	r1, r5
   11eec:	3025      	adds	r0, #37	; 0x25
   11eee:	47b8      	blx	r7
   11ef0:	2104      	movs	r1, #4
   11ef2:	2001      	movs	r0, #1
   11ef4:	4d4d      	ldr	r5, [pc, #308]	; (1202c <LORAWAN_SetAttr+0x2fc>)
   11ef6:	47a8      	blx	r5
   11ef8:	0023      	movs	r3, r4
   11efa:	33de      	adds	r3, #222	; 0xde
   11efc:	781a      	ldrb	r2, [r3, #0]
   11efe:	4316      	orrs	r6, r2
   11f00:	701e      	strb	r6, [r3, #0]
   11f02:	2109      	movs	r1, #9
   11f04:	2001      	movs	r0, #1
   11f06:	47a8      	blx	r5
   11f08:	2001      	movs	r0, #1
   11f0a:	210b      	movs	r1, #11
   11f0c:	3484      	adds	r4, #132	; 0x84
   11f0e:	7823      	ldrb	r3, [r4, #0]
   11f10:	4383      	bics	r3, r0
   11f12:	7023      	strb	r3, [r4, #0]
   11f14:	47a8      	blx	r5
   11f16:	e77d      	b.n	11e14 <LORAWAN_SetAttr+0xe4>
   11f18:	260a      	movs	r6, #10
   11f1a:	2900      	cmp	r1, #0
   11f1c:	d032      	beq.n	11f84 <LORAWAN_SetAttr+0x254>
   11f1e:	0020      	movs	r0, r4
   11f20:	2210      	movs	r2, #16
   11f22:	4e41      	ldr	r6, [pc, #260]	; (12028 <LORAWAN_SetAttr+0x2f8>)
   11f24:	3015      	adds	r0, #21
   11f26:	47b0      	blx	r6
   11f28:	0020      	movs	r0, r4
   11f2a:	2210      	movs	r2, #16
   11f2c:	0029      	movs	r1, r5
   11f2e:	3035      	adds	r0, #53	; 0x35
   11f30:	47b0      	blx	r6
   11f32:	2105      	movs	r1, #5
   11f34:	2001      	movs	r0, #1
   11f36:	4d3d      	ldr	r5, [pc, #244]	; (1202c <LORAWAN_SetAttr+0x2fc>)
   11f38:	47a8      	blx	r5
   11f3a:	0022      	movs	r2, r4
   11f3c:	32de      	adds	r2, #222	; 0xde
   11f3e:	7811      	ldrb	r1, [r2, #0]
   11f40:	2320      	movs	r3, #32
   11f42:	e7c5      	b.n	11ed0 <LORAWAN_SetAttr+0x1a0>
   11f44:	260a      	movs	r6, #10
   11f46:	2900      	cmp	r1, #0
   11f48:	d01c      	beq.n	11f84 <LORAWAN_SetAttr+0x254>
   11f4a:	4b3a      	ldr	r3, [pc, #232]	; (12034 <LORAWAN_SetAttr+0x304>)
   11f4c:	3e02      	subs	r6, #2
   11f4e:	5ce3      	ldrb	r3, [r4, r3]
   11f50:	2b00      	cmp	r3, #0
   11f52:	d117      	bne.n	11f84 <LORAWAN_SetAttr+0x254>
   11f54:	0020      	movs	r0, r4
   11f56:	2210      	movs	r2, #16
   11f58:	4b33      	ldr	r3, [pc, #204]	; (12028 <LORAWAN_SetAttr+0x2f8>)
   11f5a:	3045      	adds	r0, #69	; 0x45
   11f5c:	4798      	blx	r3
   11f5e:	2106      	movs	r1, #6
   11f60:	4d32      	ldr	r5, [pc, #200]	; (1202c <LORAWAN_SetAttr+0x2fc>)
   11f62:	2001      	movs	r0, #1
   11f64:	47a8      	blx	r5
   11f66:	0022      	movs	r2, r4
   11f68:	32de      	adds	r2, #222	; 0xde
   11f6a:	7813      	ldrb	r3, [r2, #0]
   11f6c:	2109      	movs	r1, #9
   11f6e:	4333      	orrs	r3, r6
   11f70:	2001      	movs	r0, #1
   11f72:	7013      	strb	r3, [r2, #0]
   11f74:	47a8      	blx	r5
   11f76:	2001      	movs	r0, #1
   11f78:	3484      	adds	r4, #132	; 0x84
   11f7a:	7823      	ldrb	r3, [r4, #0]
   11f7c:	210b      	movs	r1, #11
   11f7e:	4383      	bics	r3, r0
   11f80:	7023      	strb	r3, [r4, #0]
   11f82:	47a8      	blx	r5
   11f84:	0030      	movs	r0, r6
   11f86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   11f88:	780b      	ldrb	r3, [r1, #0]
   11f8a:	2001      	movs	r0, #1
   11f8c:	0021      	movs	r1, r4
   11f8e:	2520      	movs	r5, #32
   11f90:	3184      	adds	r1, #132	; 0x84
   11f92:	4003      	ands	r3, r0
   11f94:	015a      	lsls	r2, r3, #5
   11f96:	780b      	ldrb	r3, [r1, #0]
   11f98:	43ab      	bics	r3, r5
   11f9a:	4313      	orrs	r3, r2
   11f9c:	700b      	strb	r3, [r1, #0]
   11f9e:	0023      	movs	r3, r4
   11fa0:	2200      	movs	r2, #0
   11fa2:	33ca      	adds	r3, #202	; 0xca
   11fa4:	3494      	adds	r4, #148	; 0x94
   11fa6:	801a      	strh	r2, [r3, #0]
   11fa8:	7823      	ldrb	r3, [r4, #0]
   11faa:	3210      	adds	r2, #16
   11fac:	4393      	bics	r3, r2
   11fae:	7023      	strb	r3, [r4, #0]
   11fb0:	210b      	movs	r1, #11
   11fb2:	e748      	b.n	11e46 <LORAWAN_SetAttr+0x116>
   11fb4:	466a      	mov	r2, sp
   11fb6:	780b      	ldrb	r3, [r1, #0]
   11fb8:	7013      	strb	r3, [r2, #0]
   11fba:	0022      	movs	r2, r4
   11fbc:	32f3      	adds	r2, #243	; 0xf3
   11fbe:	7812      	ldrb	r2, [r2, #0]
   11fc0:	429a      	cmp	r2, r3
   11fc2:	d900      	bls.n	11fc6 <LORAWAN_SetAttr+0x296>
   11fc4:	e739      	b.n	11e3a <LORAWAN_SetAttr+0x10a>
   11fc6:	0022      	movs	r2, r4
   11fc8:	32f4      	adds	r2, #244	; 0xf4
   11fca:	7812      	ldrb	r2, [r2, #0]
   11fcc:	429a      	cmp	r2, r3
   11fce:	d200      	bcs.n	11fd2 <LORAWAN_SetAttr+0x2a2>
   11fd0:	e733      	b.n	11e3a <LORAWAN_SetAttr+0x10a>
   11fd2:	4669      	mov	r1, sp
   11fd4:	2010      	movs	r0, #16
   11fd6:	4b18      	ldr	r3, [pc, #96]	; (12038 <LORAWAN_SetAttr+0x308>)
   11fd8:	4798      	blx	r3
   11fda:	0006      	movs	r6, r0
   11fdc:	2808      	cmp	r0, #8
   11fde:	d000      	beq.n	11fe2 <LORAWAN_SetAttr+0x2b2>
   11fe0:	e72b      	b.n	11e3a <LORAWAN_SetAttr+0x10a>
   11fe2:	466b      	mov	r3, sp
   11fe4:	210c      	movs	r1, #12
   11fe6:	2001      	movs	r0, #1
   11fe8:	781b      	ldrb	r3, [r3, #0]
   11fea:	34e7      	adds	r4, #231	; 0xe7
   11fec:	7023      	strb	r3, [r4, #0]
   11fee:	4b0f      	ldr	r3, [pc, #60]	; (1202c <LORAWAN_SetAttr+0x2fc>)
   11ff0:	4798      	blx	r3
   11ff2:	e7c7      	b.n	11f84 <LORAWAN_SetAttr+0x254>
   11ff4:	466a      	mov	r2, sp
   11ff6:	780b      	ldrb	r3, [r1, #0]
   11ff8:	201d      	movs	r0, #29
   11ffa:	7013      	strb	r3, [r2, #0]
   11ffc:	4669      	mov	r1, sp
   11ffe:	4b0e      	ldr	r3, [pc, #56]	; (12038 <LORAWAN_SetAttr+0x308>)
   12000:	4798      	blx	r3
   12002:	0006      	movs	r6, r0
   12004:	2808      	cmp	r0, #8
   12006:	d000      	beq.n	1200a <LORAWAN_SetAttr+0x2da>
   12008:	e717      	b.n	11e3a <LORAWAN_SetAttr+0x10a>
   1200a:	466b      	mov	r3, sp
   1200c:	781b      	ldrb	r3, [r3, #0]
   1200e:	34e9      	adds	r4, #233	; 0xe9
   12010:	7023      	strb	r3, [r4, #0]
   12012:	210a      	movs	r1, #10
   12014:	2000      	movs	r0, #0
   12016:	e7ea      	b.n	11fee <LORAWAN_SetAttr+0x2be>
   12018:	780b      	ldrb	r3, [r1, #0]
   1201a:	2103      	movs	r1, #3
   1201c:	34ff      	adds	r4, #255	; 0xff
   1201e:	7063      	strb	r3, [r4, #1]
   12020:	2000      	movs	r0, #0
   12022:	e710      	b.n	11e46 <LORAWAN_SetAttr+0x116>
   12024:	20003170 	.word	0x20003170
   12028:	0001613f 	.word	0x0001613f
   1202c:	00008d09 	.word	0x00008d09
   12030:	0000dcad 	.word	0x0000dcad
   12034:	0000022d 	.word	0x0000022d
   12038:	0000c681 	.word	0x0000c681
   1203c:	680b      	ldr	r3, [r1, #0]
   1203e:	260a      	movs	r6, #10
   12040:	1c5a      	adds	r2, r3, #1
   12042:	d09f      	beq.n	11f84 <LORAWAN_SetAttr+0x254>
   12044:	2115      	movs	r1, #21
   12046:	2000      	movs	r0, #0
   12048:	3488      	adds	r4, #136	; 0x88
   1204a:	6023      	str	r3, [r4, #0]
   1204c:	4b7f      	ldr	r3, [pc, #508]	; (1224c <LORAWAN_SetAttr+0x51c>)
   1204e:	4798      	blx	r3
   12050:	e72c      	b.n	11eac <LORAWAN_SetAttr+0x17c>
   12052:	680b      	ldr	r3, [r1, #0]
   12054:	260a      	movs	r6, #10
   12056:	1c5a      	adds	r2, r3, #1
   12058:	d100      	bne.n	1205c <LORAWAN_SetAttr+0x32c>
   1205a:	e793      	b.n	11f84 <LORAWAN_SetAttr+0x254>
   1205c:	0031      	movs	r1, r6
   1205e:	348c      	adds	r4, #140	; 0x8c
   12060:	6023      	str	r3, [r4, #0]
   12062:	2001      	movs	r0, #1
   12064:	e7f2      	b.n	1204c <LORAWAN_SetAttr+0x31c>
   12066:	0026      	movs	r6, r4
   12068:	880b      	ldrh	r3, [r1, #0]
   1206a:	36d0      	adds	r6, #208	; 0xd0
   1206c:	210c      	movs	r1, #12
   1206e:	2000      	movs	r0, #0
   12070:	4d76      	ldr	r5, [pc, #472]	; (1224c <LORAWAN_SetAttr+0x51c>)
   12072:	8033      	strh	r3, [r6, #0]
   12074:	47a8      	blx	r5
   12076:	22fa      	movs	r2, #250	; 0xfa
   12078:	8833      	ldrh	r3, [r6, #0]
   1207a:	0092      	lsls	r2, r2, #2
   1207c:	189b      	adds	r3, r3, r2
   1207e:	34d2      	adds	r4, #210	; 0xd2
   12080:	8023      	strh	r3, [r4, #0]
   12082:	210d      	movs	r1, #13
   12084:	2000      	movs	r0, #0
   12086:	e745      	b.n	11f14 <LORAWAN_SetAttr+0x1e4>
   12088:	780b      	ldrb	r3, [r1, #0]
   1208a:	260a      	movs	r6, #10
   1208c:	2b0f      	cmp	r3, #15
   1208e:	d900      	bls.n	12092 <LORAWAN_SetAttr+0x362>
   12090:	e778      	b.n	11f84 <LORAWAN_SetAttr+0x254>
   12092:	3498      	adds	r4, #152	; 0x98
   12094:	7023      	strb	r3, [r4, #0]
   12096:	e709      	b.n	11eac <LORAWAN_SetAttr+0x17c>
   12098:	880b      	ldrh	r3, [r1, #0]
   1209a:	34d4      	adds	r4, #212	; 0xd4
   1209c:	8023      	strh	r3, [r4, #0]
   1209e:	210e      	movs	r1, #14
   120a0:	e7be      	b.n	12020 <LORAWAN_SetAttr+0x2f0>
   120a2:	880b      	ldrh	r3, [r1, #0]
   120a4:	34d6      	adds	r4, #214	; 0xd6
   120a6:	8023      	strh	r3, [r4, #0]
   120a8:	210f      	movs	r1, #15
   120aa:	e7b9      	b.n	12020 <LORAWAN_SetAttr+0x2f0>
   120ac:	780b      	ldrb	r3, [r1, #0]
   120ae:	34dc      	adds	r4, #220	; 0xdc
   120b0:	7023      	strb	r3, [r4, #0]
   120b2:	2111      	movs	r1, #17
   120b4:	e7b4      	b.n	12020 <LORAWAN_SetAttr+0x2f0>
   120b6:	780b      	ldrb	r3, [r1, #0]
   120b8:	34dd      	adds	r4, #221	; 0xdd
   120ba:	7023      	strb	r3, [r4, #0]
   120bc:	2112      	movs	r1, #18
   120be:	e7af      	b.n	12020 <LORAWAN_SetAttr+0x2f0>
   120c0:	880b      	ldrh	r3, [r1, #0]
   120c2:	34da      	adds	r4, #218	; 0xda
   120c4:	8023      	strh	r3, [r4, #0]
   120c6:	2110      	movs	r1, #16
   120c8:	e7aa      	b.n	12020 <LORAWAN_SetAttr+0x2f0>
   120ca:	780b      	ldrb	r3, [r1, #0]
   120cc:	34e2      	adds	r4, #226	; 0xe2
   120ce:	7023      	strb	r3, [r4, #0]
   120d0:	2114      	movs	r1, #20
   120d2:	e7a5      	b.n	12020 <LORAWAN_SetAttr+0x2f0>
   120d4:	780b      	ldrb	r3, [r1, #0]
   120d6:	34e1      	adds	r4, #225	; 0xe1
   120d8:	7023      	strb	r3, [r4, #0]
   120da:	e69b      	b.n	11e14 <LORAWAN_SetAttr+0xe4>
   120dc:	780b      	ldrb	r3, [r1, #0]
   120de:	34e8      	adds	r4, #232	; 0xe8
   120e0:	e7fa      	b.n	120d8 <LORAWAN_SetAttr+0x3a8>
   120e2:	2001      	movs	r0, #1
   120e4:	780b      	ldrb	r3, [r1, #0]
   120e6:	2110      	movs	r1, #16
   120e8:	3484      	adds	r4, #132	; 0x84
   120ea:	4003      	ands	r3, r0
   120ec:	011a      	lsls	r2, r3, #4
   120ee:	7823      	ldrb	r3, [r4, #0]
   120f0:	438b      	bics	r3, r1
   120f2:	4313      	orrs	r3, r2
   120f4:	7023      	strb	r3, [r4, #0]
   120f6:	3905      	subs	r1, #5
   120f8:	e6a5      	b.n	11e46 <LORAWAN_SetAttr+0x116>
   120fa:	7909      	ldrb	r1, [r1, #4]
   120fc:	7828      	ldrb	r0, [r5, #0]
   120fe:	4b54      	ldr	r3, [pc, #336]	; (12250 <LORAWAN_SetAttr+0x520>)
   12100:	4798      	blx	r3
   12102:	0006      	movs	r6, r0
   12104:	e73e      	b.n	11f84 <LORAWAN_SetAttr+0x254>
   12106:	7909      	ldrb	r1, [r1, #4]
   12108:	7828      	ldrb	r0, [r5, #0]
   1210a:	4b52      	ldr	r3, [pc, #328]	; (12254 <LORAWAN_SetAttr+0x524>)
   1210c:	e7f8      	b.n	12100 <LORAWAN_SetAttr+0x3d0>
   1210e:	7808      	ldrb	r0, [r1, #0]
   12110:	4b51      	ldr	r3, [pc, #324]	; (12258 <LORAWAN_SetAttr+0x528>)
   12112:	6849      	ldr	r1, [r1, #4]
   12114:	4798      	blx	r3
   12116:	e7f4      	b.n	12102 <LORAWAN_SetAttr+0x3d2>
   12118:	7909      	ldrb	r1, [r1, #4]
   1211a:	6828      	ldr	r0, [r5, #0]
   1211c:	4b4f      	ldr	r3, [pc, #316]	; (1225c <LORAWAN_SetAttr+0x52c>)
   1211e:	4798      	blx	r3
   12120:	e7ef      	b.n	12102 <LORAWAN_SetAttr+0x3d2>
   12122:	786b      	ldrb	r3, [r5, #1]
   12124:	7828      	ldrb	r0, [r5, #0]
   12126:	021b      	lsls	r3, r3, #8
   12128:	4303      	orrs	r3, r0
   1212a:	78a8      	ldrb	r0, [r5, #2]
   1212c:	7909      	ldrb	r1, [r1, #4]
   1212e:	0400      	lsls	r0, r0, #16
   12130:	4303      	orrs	r3, r0
   12132:	78e8      	ldrb	r0, [r5, #3]
   12134:	0600      	lsls	r0, r0, #24
   12136:	4318      	orrs	r0, r3
   12138:	4b49      	ldr	r3, [pc, #292]	; (12260 <LORAWAN_SetAttr+0x530>)
   1213a:	e7f0      	b.n	1211e <LORAWAN_SetAttr+0x3ee>
   1213c:	7808      	ldrb	r0, [r1, #0]
   1213e:	4b49      	ldr	r3, [pc, #292]	; (12264 <LORAWAN_SetAttr+0x534>)
   12140:	4798      	blx	r3
   12142:	e7de      	b.n	12102 <LORAWAN_SetAttr+0x3d2>
   12144:	8808      	ldrh	r0, [r1, #0]
   12146:	4b48      	ldr	r3, [pc, #288]	; (12268 <LORAWAN_SetAttr+0x538>)
   12148:	4798      	blx	r3
   1214a:	e663      	b.n	11e14 <LORAWAN_SetAttr+0xe4>
   1214c:	4b47      	ldr	r3, [pc, #284]	; (1226c <LORAWAN_SetAttr+0x53c>)
   1214e:	6019      	str	r1, [r3, #0]
   12150:	e673      	b.n	11e3a <LORAWAN_SetAttr+0x10a>
   12152:	7809      	ldrb	r1, [r1, #0]
   12154:	7868      	ldrb	r0, [r5, #1]
   12156:	4b46      	ldr	r3, [pc, #280]	; (12270 <LORAWAN_SetAttr+0x540>)
   12158:	4798      	blx	r3
   1215a:	e7d2      	b.n	12102 <LORAWAN_SetAttr+0x3d2>
   1215c:	7809      	ldrb	r1, [r1, #0]
   1215e:	4b45      	ldr	r3, [pc, #276]	; (12274 <LORAWAN_SetAttr+0x544>)
   12160:	1c68      	adds	r0, r5, #1
   12162:	4798      	blx	r3
   12164:	e7cd      	b.n	12102 <LORAWAN_SetAttr+0x3d2>
   12166:	7809      	ldrb	r1, [r1, #0]
   12168:	1c68      	adds	r0, r5, #1
   1216a:	4b43      	ldr	r3, [pc, #268]	; (12278 <LORAWAN_SetAttr+0x548>)
   1216c:	e7f9      	b.n	12162 <LORAWAN_SetAttr+0x432>
   1216e:	7809      	ldrb	r1, [r1, #0]
   12170:	6868      	ldr	r0, [r5, #4]
   12172:	4b42      	ldr	r3, [pc, #264]	; (1227c <LORAWAN_SetAttr+0x54c>)
   12174:	e7f5      	b.n	12162 <LORAWAN_SetAttr+0x432>
   12176:	7809      	ldrb	r1, [r1, #0]
   12178:	6868      	ldr	r0, [r5, #4]
   1217a:	4b41      	ldr	r3, [pc, #260]	; (12280 <LORAWAN_SetAttr+0x550>)
   1217c:	e7f1      	b.n	12162 <LORAWAN_SetAttr+0x432>
   1217e:	7809      	ldrb	r1, [r1, #0]
   12180:	6868      	ldr	r0, [r5, #4]
   12182:	4b40      	ldr	r3, [pc, #256]	; (12284 <LORAWAN_SetAttr+0x554>)
   12184:	e7ed      	b.n	12162 <LORAWAN_SetAttr+0x432>
   12186:	7809      	ldrb	r1, [r1, #0]
   12188:	6868      	ldr	r0, [r5, #4]
   1218a:	4b3f      	ldr	r3, [pc, #252]	; (12288 <LORAWAN_SetAttr+0x558>)
   1218c:	e7e9      	b.n	12162 <LORAWAN_SetAttr+0x432>
   1218e:	7809      	ldrb	r1, [r1, #0]
   12190:	7868      	ldrb	r0, [r5, #1]
   12192:	4b3e      	ldr	r3, [pc, #248]	; (1228c <LORAWAN_SetAttr+0x55c>)
   12194:	e7e0      	b.n	12158 <LORAWAN_SetAttr+0x428>
   12196:	7809      	ldrb	r1, [r1, #0]
   12198:	7868      	ldrb	r0, [r5, #1]
   1219a:	4b3d      	ldr	r3, [pc, #244]	; (12290 <LORAWAN_SetAttr+0x560>)
   1219c:	e7dc      	b.n	12158 <LORAWAN_SetAttr+0x428>
   1219e:	2300      	movs	r3, #0
   121a0:	466a      	mov	r2, sp
   121a2:	7809      	ldrb	r1, [r1, #0]
   121a4:	7013      	strb	r3, [r2, #0]
   121a6:	4299      	cmp	r1, r3
   121a8:	d014      	beq.n	121d4 <LORAWAN_SetAttr+0x4a4>
   121aa:	0022      	movs	r2, r4
   121ac:	2102      	movs	r1, #2
   121ae:	32ff      	adds	r2, #255	; 0xff
   121b0:	7f53      	ldrb	r3, [r2, #29]
   121b2:	420b      	tst	r3, r1
   121b4:	d001      	beq.n	121ba <LORAWAN_SetAttr+0x48a>
   121b6:	438b      	bics	r3, r1
   121b8:	7753      	strb	r3, [r2, #29]
   121ba:	2220      	movs	r2, #32
   121bc:	34ff      	adds	r4, #255	; 0xff
   121be:	7f63      	ldrb	r3, [r4, #29]
   121c0:	4213      	tst	r3, r2
   121c2:	d100      	bne.n	121c6 <LORAWAN_SetAttr+0x496>
   121c4:	e626      	b.n	11e14 <LORAWAN_SetAttr+0xe4>
   121c6:	4393      	bics	r3, r2
   121c8:	7763      	strb	r3, [r4, #29]
   121ca:	4669      	mov	r1, sp
   121cc:	4b31      	ldr	r3, [pc, #196]	; (12294 <LORAWAN_SetAttr+0x564>)
   121ce:	2038      	movs	r0, #56	; 0x38
   121d0:	4798      	blx	r3
   121d2:	e61f      	b.n	11e14 <LORAWAN_SetAttr+0xe4>
   121d4:	4a30      	ldr	r2, [pc, #192]	; (12298 <LORAWAN_SetAttr+0x568>)
   121d6:	4b31      	ldr	r3, [pc, #196]	; (1229c <LORAWAN_SetAttr+0x56c>)
   121d8:	200e      	movs	r0, #14
   121da:	4798      	blx	r3
   121dc:	e61a      	b.n	11e14 <LORAWAN_SetAttr+0xe4>
   121de:	466b      	mov	r3, sp
   121e0:	780a      	ldrb	r2, [r1, #0]
   121e2:	34ff      	adds	r4, #255	; 0xff
   121e4:	701a      	strb	r2, [r3, #0]
   121e6:	2320      	movs	r3, #32
   121e8:	2a00      	cmp	r2, #0
   121ea:	d007      	beq.n	121fc <LORAWAN_SetAttr+0x4cc>
   121ec:	7f62      	ldrb	r2, [r4, #29]
   121ee:	4313      	orrs	r3, r2
   121f0:	7763      	strb	r3, [r4, #29]
   121f2:	4669      	mov	r1, sp
   121f4:	4b27      	ldr	r3, [pc, #156]	; (12294 <LORAWAN_SetAttr+0x564>)
   121f6:	2038      	movs	r0, #56	; 0x38
   121f8:	4798      	blx	r3
   121fa:	e782      	b.n	12102 <LORAWAN_SetAttr+0x3d2>
   121fc:	7f62      	ldrb	r2, [r4, #29]
   121fe:	260a      	movs	r6, #10
   12200:	421a      	tst	r2, r3
   12202:	d100      	bne.n	12206 <LORAWAN_SetAttr+0x4d6>
   12204:	e6be      	b.n	11f84 <LORAWAN_SetAttr+0x254>
   12206:	439a      	bics	r2, r3
   12208:	7762      	strb	r2, [r4, #29]
   1220a:	e7f2      	b.n	121f2 <LORAWAN_SetAttr+0x4c2>
   1220c:	780b      	ldrb	r3, [r1, #0]
   1220e:	260a      	movs	r6, #10
   12210:	2b08      	cmp	r3, #8
   12212:	d900      	bls.n	12216 <LORAWAN_SetAttr+0x4e6>
   12214:	e6b6      	b.n	11f84 <LORAWAN_SetAttr+0x254>
   12216:	228b      	movs	r2, #139	; 0x8b
   12218:	0092      	lsls	r2, r2, #2
   1221a:	54a3      	strb	r3, [r4, r2]
   1221c:	210d      	movs	r1, #13
   1221e:	e720      	b.n	12062 <LORAWAN_SetAttr+0x332>
   12220:	780a      	ldrb	r2, [r1, #0]
   12222:	4b1f      	ldr	r3, [pc, #124]	; (122a0 <LORAWAN_SetAttr+0x570>)
   12224:	54e2      	strb	r2, [r4, r3]
   12226:	e5f5      	b.n	11e14 <LORAWAN_SetAttr+0xe4>
   12228:	4b1e      	ldr	r3, [pc, #120]	; (122a4 <LORAWAN_SetAttr+0x574>)
   1222a:	4798      	blx	r3
   1222c:	e769      	b.n	12102 <LORAWAN_SetAttr+0x3d2>
   1222e:	4b1e      	ldr	r3, [pc, #120]	; (122a8 <LORAWAN_SetAttr+0x578>)
   12230:	e7fb      	b.n	1222a <LORAWAN_SetAttr+0x4fa>
   12232:	780a      	ldrb	r2, [r1, #0]
   12234:	2302      	movs	r3, #2
   12236:	34ff      	adds	r4, #255	; 0xff
   12238:	2a00      	cmp	r2, #0
   1223a:	d003      	beq.n	12244 <LORAWAN_SetAttr+0x514>
   1223c:	7f62      	ldrb	r2, [r4, #29]
   1223e:	4313      	orrs	r3, r2
   12240:	7763      	strb	r3, [r4, #29]
   12242:	e5e7      	b.n	11e14 <LORAWAN_SetAttr+0xe4>
   12244:	7f62      	ldrb	r2, [r4, #29]
   12246:	439a      	bics	r2, r3
   12248:	7762      	strb	r2, [r4, #29]
   1224a:	e5e3      	b.n	11e14 <LORAWAN_SetAttr+0xe4>
   1224c:	00008d09 	.word	0x00008d09
   12250:	000111b9 	.word	0x000111b9
   12254:	00011149 	.word	0x00011149
   12258:	00010971 	.word	0x00010971
   1225c:	000108e9 	.word	0x000108e9
   12260:	00010925 	.word	0x00010925
   12264:	00011cb1 	.word	0x00011cb1
   12268:	0000fb85 	.word	0x0000fb85
   1226c:	200034c8 	.word	0x200034c8
   12270:	000127c5 	.word	0x000127c5
   12274:	00012a25 	.word	0x00012a25
   12278:	00012a71 	.word	0x00012a71
   1227c:	000129dd 	.word	0x000129dd
   12280:	00012abd 	.word	0x00012abd
   12284:	00012add 	.word	0x00012add
   12288:	00012af9 	.word	0x00012af9
   1228c:	00012b3d 	.word	0x00012b3d
   12290:	00012b79 	.word	0x00012b79
   12294:	0000c69d 	.word	0x0000c69d
   12298:	2000328c 	.word	0x2000328c
   1229c:	0000c665 	.word	0x0000c665
   122a0:	0000022d 	.word	0x0000022d
   122a4:	0000fc21 	.word	0x0000fc21
   122a8:	0000fc49 	.word	0x0000fc49

000122ac <AssemblePacket>:
   122ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   122ae:	2710      	movs	r7, #16
   122b0:	b08f      	sub	sp, #60	; 0x3c
   122b2:	9308      	str	r3, [sp, #32]
   122b4:	ab0d      	add	r3, sp, #52	; 0x34
   122b6:	801f      	strh	r7, [r3, #0]
   122b8:	231e      	movs	r3, #30
   122ba:	920a      	str	r2, [sp, #40]	; 0x28
   122bc:	aa06      	add	r2, sp, #24
   122be:	189b      	adds	r3, r3, r2
   122c0:	2500      	movs	r5, #0
   122c2:	2210      	movs	r2, #16
   122c4:	ac0c      	add	r4, sp, #48	; 0x30
   122c6:	9006      	str	r0, [sp, #24]
   122c8:	910b      	str	r1, [sp, #44]	; 0x2c
   122ca:	32ff      	adds	r2, #255	; 0xff
   122cc:	0029      	movs	r1, r5
   122ce:	4ed1      	ldr	r6, [pc, #836]	; (12614 <AssemblePacket+0x368>)
   122d0:	7025      	strb	r5, [r4, #0]
   122d2:	48d1      	ldr	r0, [pc, #836]	; (12618 <AssemblePacket+0x36c>)
   122d4:	801d      	strh	r5, [r3, #0]
   122d6:	47b0      	blx	r6
   122d8:	003a      	movs	r2, r7
   122da:	0029      	movs	r1, r5
   122dc:	48cf      	ldr	r0, [pc, #828]	; (1261c <AssemblePacket+0x370>)
   122de:	47b0      	blx	r6
   122e0:	221f      	movs	r2, #31
   122e2:	7823      	ldrb	r3, [r4, #0]
   122e4:	9906      	ldr	r1, [sp, #24]
   122e6:	4013      	ands	r3, r2
   122e8:	42a9      	cmp	r1, r5
   122ea:	d100      	bne.n	122ee <AssemblePacket+0x42>
   122ec:	e0dc      	b.n	124a8 <AssemblePacket+0x1fc>
   122ee:	3a9f      	subs	r2, #159	; 0x9f
   122f0:	4313      	orrs	r3, r2
   122f2:	7023      	strb	r3, [r4, #0]
   122f4:	4bca      	ldr	r3, [pc, #808]	; (12620 <AssemblePacket+0x374>)
   122f6:	3281      	adds	r2, #129	; 0x81
   122f8:	3394      	adds	r3, #148	; 0x94
   122fa:	7819      	ldrb	r1, [r3, #0]
   122fc:	430a      	orrs	r2, r1
   122fe:	701a      	strb	r2, [r3, #0]
   12300:	22e0      	movs	r2, #224	; 0xe0
   12302:	7823      	ldrb	r3, [r4, #0]
   12304:	48c4      	ldr	r0, [pc, #784]	; (12618 <AssemblePacket+0x36c>)
   12306:	4013      	ands	r3, r2
   12308:	7023      	strb	r3, [r4, #0]
   1230a:	4cc5      	ldr	r4, [pc, #788]	; (12620 <AssemblePacket+0x374>)
   1230c:	7403      	strb	r3, [r0, #16]
   1230e:	3adc      	subs	r2, #220	; 0xdc
   12310:	4bc4      	ldr	r3, [pc, #784]	; (12624 <AssemblePacket+0x378>)
   12312:	3011      	adds	r0, #17
   12314:	1c61      	adds	r1, r4, #1
   12316:	4798      	blx	r3
   12318:	2215      	movs	r2, #21
   1231a:	ab0d      	add	r3, sp, #52	; 0x34
   1231c:	0025      	movs	r5, r4
   1231e:	801a      	strh	r2, [r3, #0]
   12320:	2600      	movs	r6, #0
   12322:	466b      	mov	r3, sp
   12324:	3584      	adds	r5, #132	; 0x84
   12326:	761e      	strb	r6, [r3, #24]
   12328:	782b      	ldrb	r3, [r5, #0]
   1232a:	069b      	lsls	r3, r3, #26
   1232c:	d400      	bmi.n	12330 <AssemblePacket+0x84>
   1232e:	e130      	b.n	12592 <AssemblePacket+0x2e6>
   12330:	0027      	movs	r7, r4
   12332:	4bbd      	ldr	r3, [pc, #756]	; (12628 <AssemblePacket+0x37c>)
   12334:	37f3      	adds	r7, #243	; 0xf3
   12336:	781a      	ldrb	r2, [r3, #0]
   12338:	783b      	ldrb	r3, [r7, #0]
   1233a:	429a      	cmp	r2, r3
   1233c:	d31e      	bcc.n	1237c <AssemblePacket+0xd0>
   1233e:	2180      	movs	r1, #128	; 0x80
   12340:	466b      	mov	r3, sp
   12342:	0022      	movs	r2, r4
   12344:	4249      	negs	r1, r1
   12346:	32ca      	adds	r2, #202	; 0xca
   12348:	7619      	strb	r1, [r3, #24]
   1234a:	8813      	ldrh	r3, [r2, #0]
   1234c:	3301      	adds	r3, #1
   1234e:	b29b      	uxth	r3, r3
   12350:	8013      	strh	r3, [r2, #0]
   12352:	0022      	movs	r2, r4
   12354:	32dc      	adds	r2, #220	; 0xdc
   12356:	7812      	ldrb	r2, [r2, #0]
   12358:	4293      	cmp	r3, r2
   1235a:	d30f      	bcc.n	1237c <AssemblePacket+0xd0>
   1235c:	2040      	movs	r0, #64	; 0x40
   1235e:	4308      	orrs	r0, r1
   12360:	9006      	str	r0, [sp, #24]
   12362:	0020      	movs	r0, r4
   12364:	3094      	adds	r0, #148	; 0x94
   12366:	7801      	ldrb	r1, [r0, #0]
   12368:	4684      	mov	ip, r0
   1236a:	2010      	movs	r0, #16
   1236c:	4301      	orrs	r1, r0
   1236e:	4660      	mov	r0, ip
   12370:	7001      	strb	r1, [r0, #0]
   12372:	4293      	cmp	r3, r2
   12374:	d000      	beq.n	12378 <AssemblePacket+0xcc>
   12376:	e09b      	b.n	124b0 <AssemblePacket+0x204>
   12378:	34f6      	adds	r4, #246	; 0xf6
   1237a:	7026      	strb	r6, [r4, #0]
   1237c:	4da8      	ldr	r5, [pc, #672]	; (12620 <AssemblePacket+0x374>)
   1237e:	2102      	movs	r1, #2
   12380:	002a      	movs	r2, r5
   12382:	3294      	adds	r2, #148	; 0x94
   12384:	7813      	ldrb	r3, [r2, #0]
   12386:	420b      	tst	r3, r1
   12388:	d005      	beq.n	12396 <AssemblePacket+0xea>
   1238a:	2020      	movs	r0, #32
   1238c:	9c06      	ldr	r4, [sp, #24]
   1238e:	438b      	bics	r3, r1
   12390:	4304      	orrs	r4, r0
   12392:	9406      	str	r4, [sp, #24]
   12394:	7013      	strb	r3, [r2, #0]
   12396:	2310      	movs	r3, #16
   12398:	9c06      	ldr	r4, [sp, #24]
   1239a:	439c      	bics	r4, r3
   1239c:	002b      	movs	r3, r5
   1239e:	33e0      	adds	r3, #224	; 0xe0
   123a0:	781b      	ldrb	r3, [r3, #0]
   123a2:	9309      	str	r3, [sp, #36]	; 0x24
   123a4:	2b00      	cmp	r3, #0
   123a6:	d003      	beq.n	123b0 <AssemblePacket+0x104>
   123a8:	9b08      	ldr	r3, [sp, #32]
   123aa:	2b00      	cmp	r3, #0
   123ac:	d000      	beq.n	123b0 <AssemblePacket+0x104>
   123ae:	e0f6      	b.n	1259e <AssemblePacket+0x2f2>
   123b0:	230f      	movs	r3, #15
   123b2:	439c      	bics	r4, r3
   123b4:	466b      	mov	r3, sp
   123b6:	9406      	str	r4, [sp, #24]
   123b8:	ac0d      	add	r4, sp, #52	; 0x34
   123ba:	8826      	ldrh	r6, [r4, #0]
   123bc:	4f96      	ldr	r7, [pc, #600]	; (12618 <AssemblePacket+0x36c>)
   123be:	7e1b      	ldrb	r3, [r3, #24]
   123c0:	1c70      	adds	r0, r6, #1
   123c2:	b280      	uxth	r0, r0
   123c4:	55bb      	strb	r3, [r7, r6]
   123c6:	19c0      	adds	r0, r0, r7
   123c8:	4b96      	ldr	r3, [pc, #600]	; (12624 <AssemblePacket+0x378>)
   123ca:	2202      	movs	r2, #2
   123cc:	4997      	ldr	r1, [pc, #604]	; (1262c <AssemblePacket+0x380>)
   123ce:	4798      	blx	r3
   123d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   123d2:	3603      	adds	r6, #3
   123d4:	8026      	strh	r6, [r4, #0]
   123d6:	2b00      	cmp	r3, #0
   123d8:	d100      	bne.n	123dc <AssemblePacket+0x130>
   123da:	e0e7      	b.n	125ac <AssemblePacket+0x300>
   123dc:	9b08      	ldr	r3, [sp, #32]
   123de:	2b00      	cmp	r3, #0
   123e0:	d004      	beq.n	123ec <AssemblePacket+0x140>
   123e2:	2201      	movs	r2, #1
   123e4:	0021      	movs	r1, r4
   123e6:	0038      	movs	r0, r7
   123e8:	4b91      	ldr	r3, [pc, #580]	; (12630 <AssemblePacket+0x384>)
   123ea:	4798      	blx	r3
   123ec:	466a      	mov	r2, sp
   123ee:	212c      	movs	r1, #44	; 0x2c
   123f0:	1852      	adds	r2, r2, r1
   123f2:	8823      	ldrh	r3, [r4, #0]
   123f4:	7812      	ldrb	r2, [r2, #0]
   123f6:	1c5e      	adds	r6, r3, #1
   123f8:	54fa      	strb	r2, [r7, r3]
   123fa:	9b08      	ldr	r3, [sp, #32]
   123fc:	b2b6      	uxth	r6, r6
   123fe:	8026      	strh	r6, [r4, #0]
   12400:	2b00      	cmp	r3, #0
   12402:	d100      	bne.n	12406 <AssemblePacket+0x15a>
   12404:	e0d6      	b.n	125b4 <AssemblePacket+0x308>
   12406:	001a      	movs	r2, r3
   12408:	990a      	ldr	r1, [sp, #40]	; 0x28
   1240a:	4b86      	ldr	r3, [pc, #536]	; (12624 <AssemblePacket+0x378>)
   1240c:	19b8      	adds	r0, r7, r6
   1240e:	4798      	blx	r3
   12410:	2120      	movs	r1, #32
   12412:	466b      	mov	r3, sp
   12414:	185b      	adds	r3, r3, r1
   12416:	7819      	ldrb	r1, [r3, #0]
   12418:	682b      	ldr	r3, [r5, #0]
   1241a:	002a      	movs	r2, r5
   1241c:	0a18      	lsrs	r0, r3, #8
   1241e:	792b      	ldrb	r3, [r5, #4]
   12420:	3288      	adds	r2, #136	; 0x88
   12422:	061b      	lsls	r3, r3, #24
   12424:	4303      	orrs	r3, r0
   12426:	9304      	str	r3, [sp, #16]
   12428:	2301      	movs	r3, #1
   1242a:	9301      	str	r3, [sp, #4]
   1242c:	4b81      	ldr	r3, [pc, #516]	; (12634 <AssemblePacket+0x388>)
   1242e:	9703      	str	r7, [sp, #12]
   12430:	9602      	str	r6, [sp, #8]
   12432:	9300      	str	r3, [sp, #0]
   12434:	6813      	ldr	r3, [r2, #0]
   12436:	980a      	ldr	r0, [sp, #40]	; 0x28
   12438:	2200      	movs	r2, #0
   1243a:	4c7f      	ldr	r4, [pc, #508]	; (12638 <AssemblePacket+0x38c>)
   1243c:	47a0      	blx	r4
   1243e:	2800      	cmp	r0, #0
   12440:	d002      	beq.n	12448 <AssemblePacket+0x19c>
   12442:	2020      	movs	r0, #32
   12444:	4b7d      	ldr	r3, [pc, #500]	; (1263c <AssemblePacket+0x390>)
   12446:	4798      	blx	r3
   12448:	aa0d      	add	r2, sp, #52	; 0x34
   1244a:	8813      	ldrh	r3, [r2, #0]
   1244c:	9908      	ldr	r1, [sp, #32]
   1244e:	18cb      	adds	r3, r1, r3
   12450:	8013      	strh	r3, [r2, #0]
   12452:	4c73      	ldr	r4, [pc, #460]	; (12620 <AssemblePacket+0x374>)
   12454:	ae0d      	add	r6, sp, #52	; 0x34
   12456:	0021      	movs	r1, r4
   12458:	6823      	ldr	r3, [r4, #0]
   1245a:	8832      	ldrh	r2, [r6, #0]
   1245c:	0a18      	lsrs	r0, r3, #8
   1245e:	7923      	ldrb	r3, [r4, #4]
   12460:	3a10      	subs	r2, #16
   12462:	061b      	lsls	r3, r3, #24
   12464:	4303      	orrs	r3, r0
   12466:	9300      	str	r3, [sp, #0]
   12468:	3188      	adds	r1, #136	; 0x88
   1246a:	b2d2      	uxtb	r2, r2
   1246c:	2349      	movs	r3, #73	; 0x49
   1246e:	6809      	ldr	r1, [r1, #0]
   12470:	2000      	movs	r0, #0
   12472:	4d73      	ldr	r5, [pc, #460]	; (12640 <AssemblePacket+0x394>)
   12474:	47a8      	blx	r5
   12476:	4f68      	ldr	r7, [pc, #416]	; (12618 <AssemblePacket+0x36c>)
   12478:	2210      	movs	r2, #16
   1247a:	4968      	ldr	r1, [pc, #416]	; (1261c <AssemblePacket+0x370>)
   1247c:	0038      	movs	r0, r7
   1247e:	4b69      	ldr	r3, [pc, #420]	; (12624 <AssemblePacket+0x378>)
   12480:	4798      	blx	r3
   12482:	8833      	ldrh	r3, [r6, #0]
   12484:	4a65      	ldr	r2, [pc, #404]	; (1261c <AssemblePacket+0x370>)
   12486:	9300      	str	r3, [sp, #0]
   12488:	2102      	movs	r1, #2
   1248a:	003b      	movs	r3, r7
   1248c:	4d6d      	ldr	r5, [pc, #436]	; (12644 <AssemblePacket+0x398>)
   1248e:	486e      	ldr	r0, [pc, #440]	; (12648 <AssemblePacket+0x39c>)
   12490:	47a8      	blx	r5
   12492:	8836      	ldrh	r6, [r6, #0]
   12494:	2204      	movs	r2, #4
   12496:	19f0      	adds	r0, r6, r7
   12498:	4960      	ldr	r1, [pc, #384]	; (1261c <AssemblePacket+0x370>)
   1249a:	4b62      	ldr	r3, [pc, #392]	; (12624 <AssemblePacket+0x378>)
   1249c:	4798      	blx	r3
   1249e:	3e0c      	subs	r6, #12
   124a0:	34ce      	adds	r4, #206	; 0xce
   124a2:	8026      	strh	r6, [r4, #0]
   124a4:	b00f      	add	sp, #60	; 0x3c
   124a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   124a8:	2240      	movs	r2, #64	; 0x40
   124aa:	4313      	orrs	r3, r2
   124ac:	7023      	strb	r3, [r4, #0]
   124ae:	e727      	b.n	12300 <AssemblePacket+0x54>
   124b0:	4293      	cmp	r3, r2
   124b2:	d800      	bhi.n	124b6 <AssemblePacket+0x20a>
   124b4:	e762      	b.n	1237c <AssemblePacket+0xd0>
   124b6:	0022      	movs	r2, r4
   124b8:	0021      	movs	r1, r4
   124ba:	32f6      	adds	r2, #246	; 0xf6
   124bc:	7813      	ldrb	r3, [r2, #0]
   124be:	31dd      	adds	r1, #221	; 0xdd
   124c0:	3301      	adds	r3, #1
   124c2:	b2db      	uxtb	r3, r3
   124c4:	7013      	strb	r3, [r2, #0]
   124c6:	7809      	ldrb	r1, [r1, #0]
   124c8:	4299      	cmp	r1, r3
   124ca:	d900      	bls.n	124ce <AssemblePacket+0x222>
   124cc:	e756      	b.n	1237c <AssemblePacket+0xd0>
   124ce:	231a      	movs	r3, #26
   124d0:	7016      	strb	r6, [r2, #0]
   124d2:	aa06      	add	r2, sp, #24
   124d4:	189b      	adds	r3, r3, r2
   124d6:	001a      	movs	r2, r3
   124d8:	0031      	movs	r1, r6
   124da:	4b5c      	ldr	r3, [pc, #368]	; (1264c <AssemblePacket+0x3a0>)
   124dc:	203c      	movs	r0, #60	; 0x3c
   124de:	4798      	blx	r3
   124e0:	4b5b      	ldr	r3, [pc, #364]	; (12650 <AssemblePacket+0x3a4>)
   124e2:	781a      	ldrb	r2, [r3, #0]
   124e4:	ab06      	add	r3, sp, #24
   124e6:	7e9b      	ldrb	r3, [r3, #26]
   124e8:	429a      	cmp	r2, r3
   124ea:	d00d      	beq.n	12508 <AssemblePacket+0x25c>
   124ec:	34ff      	adds	r4, #255	; 0xff
   124ee:	7820      	ldrb	r0, [r4, #0]
   124f0:	4b58      	ldr	r3, [pc, #352]	; (12654 <AssemblePacket+0x3a8>)
   124f2:	4798      	blx	r3
   124f4:	0031      	movs	r1, r6
   124f6:	4a56      	ldr	r2, [pc, #344]	; (12650 <AssemblePacket+0x3a4>)
   124f8:	4b54      	ldr	r3, [pc, #336]	; (1264c <AssemblePacket+0x3a0>)
   124fa:	2035      	movs	r0, #53	; 0x35
   124fc:	4798      	blx	r3
   124fe:	210a      	movs	r1, #10
   12500:	0030      	movs	r0, r6
   12502:	4b55      	ldr	r3, [pc, #340]	; (12658 <AssemblePacket+0x3ac>)
   12504:	4798      	blx	r3
   12506:	e739      	b.n	1237c <AssemblePacket+0xd0>
   12508:	4b47      	ldr	r3, [pc, #284]	; (12628 <AssemblePacket+0x37c>)
   1250a:	783a      	ldrb	r2, [r7, #0]
   1250c:	781b      	ldrb	r3, [r3, #0]
   1250e:	4293      	cmp	r3, r2
   12510:	d022      	beq.n	12558 <AssemblePacket+0x2ac>
   12512:	d800      	bhi.n	12516 <AssemblePacket+0x26a>
   12514:	e732      	b.n	1237c <AssemblePacket+0xd0>
   12516:	221b      	movs	r2, #27
   12518:	003d      	movs	r5, r7
   1251a:	a906      	add	r1, sp, #24
   1251c:	3b01      	subs	r3, #1
   1251e:	1852      	adds	r2, r2, r1
   12520:	7013      	strb	r3, [r2, #0]
   12522:	261b      	movs	r6, #27
   12524:	ab06      	add	r3, sp, #24
   12526:	18f6      	adds	r6, r6, r3
   12528:	782a      	ldrb	r2, [r5, #0]
   1252a:	7833      	ldrb	r3, [r6, #0]
   1252c:	429a      	cmp	r2, r3
   1252e:	d900      	bls.n	12532 <AssemblePacket+0x286>
   12530:	e724      	b.n	1237c <AssemblePacket+0xd0>
   12532:	0031      	movs	r1, r6
   12534:	2010      	movs	r0, #16
   12536:	4f49      	ldr	r7, [pc, #292]	; (1265c <AssemblePacket+0x3b0>)
   12538:	47b8      	blx	r7
   1253a:	2808      	cmp	r0, #8
   1253c:	d000      	beq.n	12540 <AssemblePacket+0x294>
   1253e:	e71d      	b.n	1237c <AssemblePacket+0xd0>
   12540:	0031      	movs	r1, r6
   12542:	3009      	adds	r0, #9
   12544:	47b8      	blx	r7
   12546:	7833      	ldrb	r3, [r6, #0]
   12548:	2808      	cmp	r0, #8
   1254a:	d061      	beq.n	12610 <AssemblePacket+0x364>
   1254c:	782a      	ldrb	r2, [r5, #0]
   1254e:	429a      	cmp	r2, r3
   12550:	d2e7      	bcs.n	12522 <AssemblePacket+0x276>
   12552:	3b01      	subs	r3, #1
   12554:	7033      	strb	r3, [r6, #0]
   12556:	e7e4      	b.n	12522 <AssemblePacket+0x276>
   12558:	34ff      	adds	r4, #255	; 0xff
   1255a:	7820      	ldrb	r0, [r4, #0]
   1255c:	4b40      	ldr	r3, [pc, #256]	; (12660 <AssemblePacket+0x3b4>)
   1255e:	4798      	blx	r3
   12560:	231b      	movs	r3, #27
   12562:	aa06      	add	r2, sp, #24
   12564:	189b      	adds	r3, r3, r2
   12566:	0019      	movs	r1, r3
   12568:	4c3e      	ldr	r4, [pc, #248]	; (12664 <AssemblePacket+0x3b8>)
   1256a:	2013      	movs	r0, #19
   1256c:	47a0      	blx	r4
   1256e:	231b      	movs	r3, #27
   12570:	aa06      	add	r2, sp, #24
   12572:	189b      	adds	r3, r3, r2
   12574:	0019      	movs	r1, r3
   12576:	2014      	movs	r0, #20
   12578:	47a0      	blx	r4
   1257a:	2113      	movs	r1, #19
   1257c:	0030      	movs	r0, r6
   1257e:	4c36      	ldr	r4, [pc, #216]	; (12658 <AssemblePacket+0x3ac>)
   12580:	47a0      	blx	r4
   12582:	2210      	movs	r2, #16
   12584:	786b      	ldrb	r3, [r5, #1]
   12586:	210b      	movs	r1, #11
   12588:	4313      	orrs	r3, r2
   1258a:	706b      	strb	r3, [r5, #1]
   1258c:	2001      	movs	r0, #1
   1258e:	47a0      	blx	r4
   12590:	e6f4      	b.n	1237c <AssemblePacket+0xd0>
   12592:	2210      	movs	r2, #16
   12594:	3494      	adds	r4, #148	; 0x94
   12596:	7823      	ldrb	r3, [r4, #0]
   12598:	4393      	bics	r3, r2
   1259a:	7023      	strb	r3, [r4, #0]
   1259c:	e6ee      	b.n	1237c <AssemblePacket+0xd0>
   1259e:	4b32      	ldr	r3, [pc, #200]	; (12668 <AssemblePacket+0x3bc>)
   125a0:	4798      	blx	r3
   125a2:	230f      	movs	r3, #15
   125a4:	4018      	ands	r0, r3
   125a6:	439c      	bics	r4, r3
   125a8:	4304      	orrs	r4, r0
   125aa:	e703      	b.n	123b4 <AssemblePacket+0x108>
   125ac:	9b08      	ldr	r3, [sp, #32]
   125ae:	2b00      	cmp	r3, #0
   125b0:	d000      	beq.n	125b4 <AssemblePacket+0x308>
   125b2:	e71b      	b.n	123ec <AssemblePacket+0x140>
   125b4:	4d1a      	ldr	r5, [pc, #104]	; (12620 <AssemblePacket+0x374>)
   125b6:	002b      	movs	r3, r5
   125b8:	33e0      	adds	r3, #224	; 0xe0
   125ba:	781b      	ldrb	r3, [r3, #0]
   125bc:	2b00      	cmp	r3, #0
   125be:	d100      	bne.n	125c2 <AssemblePacket+0x316>
   125c0:	e747      	b.n	12452 <AssemblePacket+0x1a6>
   125c2:	261e      	movs	r6, #30
   125c4:	ab06      	add	r3, sp, #24
   125c6:	18f6      	adds	r6, r6, r3
   125c8:	2200      	movs	r2, #0
   125ca:	0031      	movs	r1, r6
   125cc:	4827      	ldr	r0, [pc, #156]	; (1266c <AssemblePacket+0x3c0>)
   125ce:	4b18      	ldr	r3, [pc, #96]	; (12630 <AssemblePacket+0x384>)
   125d0:	4798      	blx	r3
   125d2:	682b      	ldr	r3, [r5, #0]
   125d4:	7831      	ldrb	r1, [r6, #0]
   125d6:	0a18      	lsrs	r0, r3, #8
   125d8:	792b      	ldrb	r3, [r5, #4]
   125da:	9703      	str	r7, [sp, #12]
   125dc:	061b      	lsls	r3, r3, #24
   125de:	4303      	orrs	r3, r0
   125e0:	9304      	str	r3, [sp, #16]
   125e2:	8823      	ldrh	r3, [r4, #0]
   125e4:	002a      	movs	r2, r5
   125e6:	9302      	str	r3, [sp, #8]
   125e8:	2302      	movs	r3, #2
   125ea:	9301      	str	r3, [sp, #4]
   125ec:	4b16      	ldr	r3, [pc, #88]	; (12648 <AssemblePacket+0x39c>)
   125ee:	3288      	adds	r2, #136	; 0x88
   125f0:	9300      	str	r3, [sp, #0]
   125f2:	6813      	ldr	r3, [r2, #0]
   125f4:	481d      	ldr	r0, [pc, #116]	; (1266c <AssemblePacket+0x3c0>)
   125f6:	2200      	movs	r2, #0
   125f8:	4d0f      	ldr	r5, [pc, #60]	; (12638 <AssemblePacket+0x38c>)
   125fa:	47a8      	blx	r5
   125fc:	2800      	cmp	r0, #0
   125fe:	d002      	beq.n	12606 <AssemblePacket+0x35a>
   12600:	2020      	movs	r0, #32
   12602:	4b0e      	ldr	r3, [pc, #56]	; (1263c <AssemblePacket+0x390>)
   12604:	4798      	blx	r3
   12606:	8823      	ldrh	r3, [r4, #0]
   12608:	8832      	ldrh	r2, [r6, #0]
   1260a:	189b      	adds	r3, r3, r2
   1260c:	8023      	strh	r3, [r4, #0]
   1260e:	e720      	b.n	12452 <AssemblePacket+0x1a6>
   12610:	34e7      	adds	r4, #231	; 0xe7
   12612:	e7c2      	b.n	1259a <AssemblePacket+0x2ee>
   12614:	00016151 	.word	0x00016151
   12618:	200033b8 	.word	0x200033b8
   1261c:	20001e9d 	.word	0x20001e9d
   12620:	20003170 	.word	0x20003170
   12624:	0001613f 	.word	0x0001613f
   12628:	20003257 	.word	0x20003257
   1262c:	200031f8 	.word	0x200031f8
   12630:	0000f5b5 	.word	0x0000f5b5
   12634:	200031a5 	.word	0x200031a5
   12638:	000106c9 	.word	0x000106c9
   1263c:	00010789 	.word	0x00010789
   12640:	0000f8e1 	.word	0x0000f8e1
   12644:	00007161 	.word	0x00007161
   12648:	20003195 	.word	0x20003195
   1264c:	0000c665 	.word	0x0000c665
   12650:	20003259 	.word	0x20003259
   12654:	0000c6b9 	.word	0x0000c6b9
   12658:	00008d09 	.word	0x00008d09
   1265c:	0000c681 	.word	0x0000c681
   12660:	0000c745 	.word	0x0000c745
   12664:	00011d31 	.word	0x00011d31
   12668:	0000f515 	.word	0x0000f515
   1266c:	20002f34 	.word	0x20002f34

00012670 <LorawanClasscUlAckTimerCallback>:
   12670:	2102      	movs	r1, #2
   12672:	4b03      	ldr	r3, [pc, #12]	; (12680 <LorawanClasscUlAckTimerCallback+0x10>)
   12674:	3394      	adds	r3, #148	; 0x94
   12676:	781a      	ldrb	r2, [r3, #0]
   12678:	438a      	bics	r2, r1
   1267a:	701a      	strb	r2, [r3, #0]
   1267c:	4770      	bx	lr
   1267e:	46c0      	nop			; (mov r8, r8)
   12680:	20003170 	.word	0x20003170

00012684 <LorawanClasscValidateSend>:
   12684:	2388      	movs	r3, #136	; 0x88
   12686:	b510      	push	{r4, lr}
   12688:	4c0a      	ldr	r4, [pc, #40]	; (126b4 <LorawanClasscValidateSend+0x30>)
   1268a:	009b      	lsls	r3, r3, #2
   1268c:	5ce3      	ldrb	r3, [r4, r3]
   1268e:	2b00      	cmp	r3, #0
   12690:	d008      	beq.n	126a4 <LorawanClasscValidateSend+0x20>
   12692:	220e      	movs	r2, #14
   12694:	3484      	adds	r4, #132	; 0x84
   12696:	7823      	ldrb	r3, [r4, #0]
   12698:	2008      	movs	r0, #8
   1269a:	4013      	ands	r3, r2
   1269c:	2b02      	cmp	r3, #2
   1269e:	d100      	bne.n	126a2 <LorawanClasscValidateSend+0x1e>
   126a0:	2011      	movs	r0, #17
   126a2:	bd10      	pop	{r4, pc}
   126a4:	2394      	movs	r3, #148	; 0x94
   126a6:	005b      	lsls	r3, r3, #1
   126a8:	5ce0      	ldrb	r0, [r4, r3]
   126aa:	4b03      	ldr	r3, [pc, #12]	; (126b8 <LorawanClasscValidateSend+0x34>)
   126ac:	4798      	blx	r3
   126ae:	2800      	cmp	r0, #0
   126b0:	d1ef      	bne.n	12692 <LorawanClasscValidateSend+0xe>
   126b2:	e7f5      	b.n	126a0 <LorawanClasscValidateSend+0x1c>
   126b4:	20003170 	.word	0x20003170
   126b8:	0000cd45 	.word	0x0000cd45

000126bc <LorawanClasscRxDone>:
   126bc:	221f      	movs	r2, #31
   126be:	b573      	push	{r0, r1, r4, r5, r6, lr}
   126c0:	7803      	ldrb	r3, [r0, #0]
   126c2:	4c1c      	ldr	r4, [pc, #112]	; (12734 <LorawanClasscRxDone+0x78>)
   126c4:	4393      	bics	r3, r2
   126c6:	2ba0      	cmp	r3, #160	; 0xa0
   126c8:	d10c      	bne.n	126e4 <LorawanClasscRxDone+0x28>
   126ca:	2694      	movs	r6, #148	; 0x94
   126cc:	0076      	lsls	r6, r6, #1
   126ce:	5da0      	ldrb	r0, [r4, r6]
   126d0:	4b19      	ldr	r3, [pc, #100]	; (12738 <LorawanClasscRxDone+0x7c>)
   126d2:	4798      	blx	r3
   126d4:	1e05      	subs	r5, r0, #0
   126d6:	d019      	beq.n	1270c <LorawanClasscRxDone+0x50>
   126d8:	0022      	movs	r2, r4
   126da:	2102      	movs	r1, #2
   126dc:	3294      	adds	r2, #148	; 0x94
   126de:	7813      	ldrb	r3, [r2, #0]
   126e0:	438b      	bics	r3, r1
   126e2:	7013      	strb	r3, [r2, #0]
   126e4:	0021      	movs	r1, r4
   126e6:	3184      	adds	r1, #132	; 0x84
   126e8:	780b      	ldrb	r3, [r1, #0]
   126ea:	220e      	movs	r2, #14
   126ec:	0018      	movs	r0, r3
   126ee:	4010      	ands	r0, r2
   126f0:	2806      	cmp	r0, #6
   126f2:	d103      	bne.n	126fc <LorawanClasscRxDone+0x40>
   126f4:	4393      	bics	r3, r2
   126f6:	3a04      	subs	r2, #4
   126f8:	4313      	orrs	r3, r2
   126fa:	700b      	strb	r3, [r1, #0]
   126fc:	2390      	movs	r3, #144	; 0x90
   126fe:	2201      	movs	r2, #1
   12700:	009b      	lsls	r3, r3, #2
   12702:	54e2      	strb	r2, [r4, r3]
   12704:	2000      	movs	r0, #0
   12706:	4b0d      	ldr	r3, [pc, #52]	; (1273c <LorawanClasscRxDone+0x80>)
   12708:	4798      	blx	r3
   1270a:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   1270c:	4b0c      	ldr	r3, [pc, #48]	; (12740 <LorawanClasscRxDone+0x84>)
   1270e:	5da6      	ldrb	r6, [r4, r6]
   12710:	4798      	blx	r3
   12712:	4b0c      	ldr	r3, [pc, #48]	; (12744 <LorawanClasscRxDone+0x88>)
   12714:	490c      	ldr	r1, [pc, #48]	; (12748 <LorawanClasscRxDone+0x8c>)
   12716:	4798      	blx	r3
   12718:	23fa      	movs	r3, #250	; 0xfa
   1271a:	009b      	lsls	r3, r3, #2
   1271c:	18cb      	adds	r3, r1, r3
   1271e:	21fa      	movs	r1, #250	; 0xfa
   12720:	0089      	lsls	r1, r1, #2
   12722:	4359      	muls	r1, r3
   12724:	9500      	str	r5, [sp, #0]
   12726:	002a      	movs	r2, r5
   12728:	4b08      	ldr	r3, [pc, #32]	; (1274c <LorawanClasscRxDone+0x90>)
   1272a:	0030      	movs	r0, r6
   1272c:	4d08      	ldr	r5, [pc, #32]	; (12750 <LorawanClasscRxDone+0x94>)
   1272e:	47a8      	blx	r5
   12730:	e7d8      	b.n	126e4 <LorawanClasscRxDone+0x28>
   12732:	46c0      	nop			; (mov r8, r8)
   12734:	20003170 	.word	0x20003170
   12738:	0000cd45 	.word	0x0000cd45
   1273c:	00010bc9 	.word	0x00010bc9
   12740:	00016885 	.word	0x00016885
   12744:	000131bd 	.word	0x000131bd
   12748:	000007d1 	.word	0x000007d1
   1274c:	00012671 	.word	0x00012671
   12750:	0000cbad 	.word	0x0000cbad

00012754 <LorawanClasscRxTimeout>:
   12754:	4a0c      	ldr	r2, [pc, #48]	; (12788 <LorawanClasscRxTimeout+0x34>)
   12756:	b510      	push	{r4, lr}
   12758:	0010      	movs	r0, r2
   1275a:	3084      	adds	r0, #132	; 0x84
   1275c:	7803      	ldrb	r3, [r0, #0]
   1275e:	240e      	movs	r4, #14
   12760:	0019      	movs	r1, r3
   12762:	4021      	ands	r1, r4
   12764:	2906      	cmp	r1, #6
   12766:	d107      	bne.n	12778 <LorawanClasscRxTimeout+0x24>
   12768:	2208      	movs	r2, #8
   1276a:	43a3      	bics	r3, r4
   1276c:	4313      	orrs	r3, r2
   1276e:	7003      	strb	r3, [r0, #0]
   12770:	2000      	movs	r0, #0
   12772:	4b06      	ldr	r3, [pc, #24]	; (1278c <LorawanClasscRxTimeout+0x38>)
   12774:	4798      	blx	r3
   12776:	e006      	b.n	12786 <LorawanClasscRxTimeout+0x32>
   12778:	290a      	cmp	r1, #10
   1277a:	d1f9      	bne.n	12770 <LorawanClasscRxTimeout+0x1c>
   1277c:	2388      	movs	r3, #136	; 0x88
   1277e:	009b      	lsls	r3, r3, #2
   12780:	5cd3      	ldrb	r3, [r2, r3]
   12782:	2b00      	cmp	r3, #0
   12784:	d0f4      	beq.n	12770 <LorawanClasscRxTimeout+0x1c>
   12786:	bd10      	pop	{r4, pc}
   12788:	20003170 	.word	0x20003170
   1278c:	00010bc9 	.word	0x00010bc9

00012790 <LorawanClasscNotifyAppOnReceive>:
   12790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12792:	001f      	movs	r7, r3
   12794:	2394      	movs	r3, #148	; 0x94
   12796:	0016      	movs	r6, r2
   12798:	4a07      	ldr	r2, [pc, #28]	; (127b8 <LorawanClasscNotifyAppOnReceive+0x28>)
   1279a:	005b      	lsls	r3, r3, #1
   1279c:	0004      	movs	r4, r0
   1279e:	5cd0      	ldrb	r0, [r2, r3]
   127a0:	4b06      	ldr	r3, [pc, #24]	; (127bc <LorawanClasscNotifyAppOnReceive+0x2c>)
   127a2:	000d      	movs	r5, r1
   127a4:	4798      	blx	r3
   127a6:	2800      	cmp	r0, #0
   127a8:	d105      	bne.n	127b6 <LorawanClasscNotifyAppOnReceive+0x26>
   127aa:	0020      	movs	r0, r4
   127ac:	003b      	movs	r3, r7
   127ae:	0032      	movs	r2, r6
   127b0:	0029      	movs	r1, r5
   127b2:	4c03      	ldr	r4, [pc, #12]	; (127c0 <LorawanClasscNotifyAppOnReceive+0x30>)
   127b4:	47a0      	blx	r4
   127b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   127b8:	20003170 	.word	0x20003170
   127bc:	0000cd45 	.word	0x0000cd45
   127c0:	000107ed 	.word	0x000107ed

000127c4 <LorawanMcastEnable>:
   127c4:	0002      	movs	r2, r0
   127c6:	b510      	push	{r4, lr}
   127c8:	200a      	movs	r0, #10
   127ca:	2903      	cmp	r1, #3
   127cc:	d822      	bhi.n	12814 <LorawanMcastEnable+0x50>
   127ce:	4b1a      	ldr	r3, [pc, #104]	; (12838 <LorawanMcastEnable+0x74>)
   127d0:	2a00      	cmp	r2, #0
   127d2:	d020      	beq.n	12816 <LorawanMcastEnable+0x52>
   127d4:	223c      	movs	r2, #60	; 0x3c
   127d6:	434a      	muls	r2, r1
   127d8:	189a      	adds	r2, r3, r2
   127da:	3259      	adds	r2, #89	; 0x59
   127dc:	32ff      	adds	r2, #255	; 0xff
   127de:	7a12      	ldrb	r2, [r2, #8]
   127e0:	0754      	lsls	r4, r2, #29
   127e2:	d512      	bpl.n	1280a <LorawanMcastEnable+0x46>
   127e4:	0794      	lsls	r4, r2, #30
   127e6:	d510      	bpl.n	1280a <LorawanMcastEnable+0x46>
   127e8:	07d2      	lsls	r2, r2, #31
   127ea:	0fd2      	lsrs	r2, r2, #31
   127ec:	2a01      	cmp	r2, #1
   127ee:	d10c      	bne.n	1280a <LorawanMcastEnable+0x46>
   127f0:	001c      	movs	r4, r3
   127f2:	34fd      	adds	r4, #253	; 0xfd
   127f4:	7824      	ldrb	r4, [r4, #0]
   127f6:	0764      	lsls	r4, r4, #29
   127f8:	d007      	beq.n	1280a <LorawanMcastEnable+0x46>
   127fa:	202e      	movs	r0, #46	; 0x2e
   127fc:	408a      	lsls	r2, r1
   127fe:	30ff      	adds	r0, #255	; 0xff
   12800:	5c19      	ldrb	r1, [r3, r0]
   12802:	430a      	orrs	r2, r1
   12804:	541a      	strb	r2, [r3, r0]
   12806:	3826      	subs	r0, #38	; 0x26
   12808:	38ff      	subs	r0, #255	; 0xff
   1280a:	2196      	movs	r1, #150	; 0x96
   1280c:	0049      	lsls	r1, r1, #1
   1280e:	5c5a      	ldrb	r2, [r3, r1]
   12810:	3201      	adds	r2, #1
   12812:	545a      	strb	r2, [r3, r1]
   12814:	bd10      	pop	{r4, pc}
   12816:	2201      	movs	r2, #1
   12818:	408a      	lsls	r2, r1
   1281a:	202e      	movs	r0, #46	; 0x2e
   1281c:	0011      	movs	r1, r2
   1281e:	30ff      	adds	r0, #255	; 0xff
   12820:	5c1a      	ldrb	r2, [r3, r0]
   12822:	438a      	bics	r2, r1
   12824:	2196      	movs	r1, #150	; 0x96
   12826:	541a      	strb	r2, [r3, r0]
   12828:	0049      	lsls	r1, r1, #1
   1282a:	5c5a      	ldrb	r2, [r3, r1]
   1282c:	3826      	subs	r0, #38	; 0x26
   1282e:	3a01      	subs	r2, #1
   12830:	545a      	strb	r2, [r3, r1]
   12832:	38ff      	subs	r0, #255	; 0xff
   12834:	e7ee      	b.n	12814 <LorawanMcastEnable+0x50>
   12836:	46c0      	nop			; (mov r8, r8)
   12838:	20003170 	.word	0x20003170

0001283c <LorawanMcastValidateHdr>:
   1283c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1283e:	469c      	mov	ip, r3
   12840:	2400      	movs	r4, #0
   12842:	230a      	movs	r3, #10
   12844:	4f18      	ldr	r7, [pc, #96]	; (128a8 <LorawanMcastValidateHdr+0x6c>)
   12846:	b2e5      	uxtb	r5, r4
   12848:	9501      	str	r5, [sp, #4]
   1284a:	252e      	movs	r5, #46	; 0x2e
   1284c:	35ff      	adds	r5, #255	; 0xff
   1284e:	5d7d      	ldrb	r5, [r7, r5]
   12850:	2601      	movs	r6, #1
   12852:	4125      	asrs	r5, r4
   12854:	4235      	tst	r5, r6
   12856:	d022      	beq.n	1289e <LorawanMcastValidateHdr+0x62>
   12858:	7886      	ldrb	r6, [r0, #2]
   1285a:	7845      	ldrb	r5, [r0, #1]
   1285c:	0236      	lsls	r6, r6, #8
   1285e:	432e      	orrs	r6, r5
   12860:	78c5      	ldrb	r5, [r0, #3]
   12862:	042d      	lsls	r5, r5, #16
   12864:	432e      	orrs	r6, r5
   12866:	7905      	ldrb	r5, [r0, #4]
   12868:	062d      	lsls	r5, r5, #24
   1286a:	4335      	orrs	r5, r6
   1286c:	263c      	movs	r6, #60	; 0x3c
   1286e:	4366      	muls	r6, r4
   12870:	3631      	adds	r6, #49	; 0x31
   12872:	36ff      	adds	r6, #255	; 0xff
   12874:	59be      	ldr	r6, [r7, r6]
   12876:	42b5      	cmp	r5, r6
   12878:	d111      	bne.n	1289e <LorawanMcastValidateHdr+0x62>
   1287a:	4d0c      	ldr	r5, [pc, #48]	; (128ac <LorawanMcastValidateHdr+0x70>)
   1287c:	782e      	ldrb	r6, [r5, #0]
   1287e:	2506      	movs	r5, #6
   12880:	422e      	tst	r6, r5
   12882:	d00c      	beq.n	1289e <LorawanMcastValidateHdr+0x62>
   12884:	2a00      	cmp	r2, #0
   12886:	d00a      	beq.n	1289e <LorawanMcastValidateHdr+0x62>
   12888:	7946      	ldrb	r6, [r0, #5]
   1288a:	3569      	adds	r5, #105	; 0x69
   1288c:	422e      	tst	r6, r5
   1288e:	d106      	bne.n	1289e <LorawanMcastValidateHdr+0x62>
   12890:	2903      	cmp	r1, #3
   12892:	d104      	bne.n	1289e <LorawanMcastValidateHdr+0x62>
   12894:	466d      	mov	r5, sp
   12896:	4663      	mov	r3, ip
   12898:	792d      	ldrb	r5, [r5, #4]
   1289a:	701d      	strb	r5, [r3, #0]
   1289c:	2308      	movs	r3, #8
   1289e:	3401      	adds	r4, #1
   128a0:	2c04      	cmp	r4, #4
   128a2:	d1d0      	bne.n	12846 <LorawanMcastValidateHdr+0xa>
   128a4:	0018      	movs	r0, r3
   128a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   128a8:	20003170 	.word	0x20003170
   128ac:	2000326d 	.word	0x2000326d

000128b0 <LorawanMcastProcessPkt>:
   128b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   128b2:	0015      	movs	r5, r2
   128b4:	223c      	movs	r2, #60	; 0x3c
   128b6:	435a      	muls	r2, r3
   128b8:	b089      	sub	sp, #36	; 0x24
   128ba:	9107      	str	r1, [sp, #28]
   128bc:	493f      	ldr	r1, [pc, #252]	; (129bc <LorawanMcastProcessPkt+0x10c>)
   128be:	9006      	str	r0, [sp, #24]
   128c0:	1889      	adds	r1, r1, r2
   128c2:	31fc      	adds	r1, #252	; 0xfc
   128c4:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
   128c6:	6e08      	ldr	r0, [r1, #96]	; 0x60
   128c8:	6d8a      	ldr	r2, [r1, #88]	; 0x58
   128ca:	4284      	cmp	r4, r0
   128cc:	d224      	bcs.n	12918 <LorawanMcastProcessPkt+0x68>
   128ce:	2100      	movs	r1, #0
   128d0:	4294      	cmp	r4, r2
   128d2:	d802      	bhi.n	128da <LorawanMcastProcessPkt+0x2a>
   128d4:	4282      	cmp	r2, r0
   128d6:	4192      	sbcs	r2, r2
   128d8:	4251      	negs	r1, r2
   128da:	270a      	movs	r7, #10
   128dc:	2900      	cmp	r1, #0
   128de:	d11d      	bne.n	1291c <LorawanMcastProcessPkt+0x6c>
   128e0:	4a36      	ldr	r2, [pc, #216]	; (129bc <LorawanMcastProcessPkt+0x10c>)
   128e2:	210e      	movs	r1, #14
   128e4:	0010      	movs	r0, r2
   128e6:	3084      	adds	r0, #132	; 0x84
   128e8:	7803      	ldrb	r3, [r0, #0]
   128ea:	001c      	movs	r4, r3
   128ec:	400c      	ands	r4, r1
   128ee:	2c06      	cmp	r4, #6
   128f0:	d108      	bne.n	12904 <LorawanMcastProcessPkt+0x54>
   128f2:	0014      	movs	r4, r2
   128f4:	34fd      	adds	r4, #253	; 0xfd
   128f6:	7824      	ldrb	r4, [r4, #0]
   128f8:	2c04      	cmp	r4, #4
   128fa:	d103      	bne.n	12904 <LorawanMcastProcessPkt+0x54>
   128fc:	438b      	bics	r3, r1
   128fe:	3904      	subs	r1, #4
   12900:	430b      	orrs	r3, r1
   12902:	7003      	strb	r3, [r0, #0]
   12904:	2390      	movs	r3, #144	; 0x90
   12906:	2101      	movs	r1, #1
   12908:	009b      	lsls	r3, r3, #2
   1290a:	54d1      	strb	r1, [r2, r3]
   1290c:	2000      	movs	r0, #0
   1290e:	4b2c      	ldr	r3, [pc, #176]	; (129c0 <LorawanMcastProcessPkt+0x110>)
   12910:	4798      	blx	r3
   12912:	0038      	movs	r0, r7
   12914:	b009      	add	sp, #36	; 0x24
   12916:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12918:	4294      	cmp	r4, r2
   1291a:	d8db      	bhi.n	128d4 <LorawanMcastProcessPkt+0x24>
   1291c:	243c      	movs	r4, #60	; 0x3c
   1291e:	435c      	muls	r4, r3
   12920:	4e26      	ldr	r6, [pc, #152]	; (129bc <LorawanMcastProcessPkt+0x10c>)
   12922:	79ea      	ldrb	r2, [r5, #7]
   12924:	1937      	adds	r7, r6, r4
   12926:	003b      	movs	r3, r7
   12928:	79a9      	ldrb	r1, [r5, #6]
   1292a:	0212      	lsls	r2, r2, #8
   1292c:	3355      	adds	r3, #85	; 0x55
   1292e:	430a      	orrs	r2, r1
   12930:	33ff      	adds	r3, #255	; 0xff
   12932:	801a      	strh	r2, [r3, #0]
   12934:	2105      	movs	r1, #5
   12936:	4b23      	ldr	r3, [pc, #140]	; (129c4 <LorawanMcastProcessPkt+0x114>)
   12938:	37fc      	adds	r7, #252	; 0xfc
   1293a:	2000      	movs	r0, #0
   1293c:	4798      	blx	r3
   1293e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12940:	3445      	adds	r4, #69	; 0x45
   12942:	9304      	str	r3, [sp, #16]
   12944:	4b20      	ldr	r3, [pc, #128]	; (129c8 <LorawanMcastProcessPkt+0x118>)
   12946:	9907      	ldr	r1, [sp, #28]
   12948:	9303      	str	r3, [sp, #12]
   1294a:	2319      	movs	r3, #25
   1294c:	34ff      	adds	r4, #255	; 0xff
   1294e:	9302      	str	r3, [sp, #8]
   12950:	19a4      	adds	r4, r4, r6
   12952:	3b16      	subs	r3, #22
   12954:	9806      	ldr	r0, [sp, #24]
   12956:	9400      	str	r4, [sp, #0]
   12958:	390d      	subs	r1, #13
   1295a:	9301      	str	r3, [sp, #4]
   1295c:	b2c9      	uxtb	r1, r1
   1295e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12960:	2201      	movs	r2, #1
   12962:	3009      	adds	r0, #9
   12964:	4c19      	ldr	r4, [pc, #100]	; (129cc <LorawanMcastProcessPkt+0x11c>)
   12966:	47a0      	blx	r4
   12968:	2800      	cmp	r0, #0
   1296a:	d002      	beq.n	12972 <LorawanMcastProcessPkt+0xc2>
   1296c:	201f      	movs	r0, #31
   1296e:	4b18      	ldr	r3, [pc, #96]	; (129d0 <LorawanMcastProcessPkt+0x120>)
   12970:	4798      	blx	r3
   12972:	4918      	ldr	r1, [pc, #96]	; (129d4 <LorawanMcastProcessPkt+0x124>)
   12974:	2708      	movs	r7, #8
   12976:	784a      	ldrb	r2, [r1, #1]
   12978:	780b      	ldrb	r3, [r1, #0]
   1297a:	0212      	lsls	r2, r2, #8
   1297c:	431a      	orrs	r2, r3
   1297e:	788b      	ldrb	r3, [r1, #2]
   12980:	041b      	lsls	r3, r3, #16
   12982:	431a      	orrs	r2, r3
   12984:	78cb      	ldrb	r3, [r1, #3]
   12986:	061b      	lsls	r3, r3, #24
   12988:	4313      	orrs	r3, r2
   1298a:	d0a9      	beq.n	128e0 <LorawanMcastProcessPkt+0x30>
   1298c:	2220      	movs	r2, #32
   1298e:	3694      	adds	r6, #148	; 0x94
   12990:	7833      	ldrb	r3, [r6, #0]
   12992:	9906      	ldr	r1, [sp, #24]
   12994:	4393      	bics	r3, r2
   12996:	7033      	strb	r3, [r6, #0]
   12998:	78ab      	ldrb	r3, [r5, #2]
   1299a:	7868      	ldrb	r0, [r5, #1]
   1299c:	40bb      	lsls	r3, r7
   1299e:	4303      	orrs	r3, r0
   129a0:	78e8      	ldrb	r0, [r5, #3]
   129a2:	9a07      	ldr	r2, [sp, #28]
   129a4:	0400      	lsls	r0, r0, #16
   129a6:	4303      	orrs	r3, r0
   129a8:	7928      	ldrb	r0, [r5, #4]
   129aa:	3a0c      	subs	r2, #12
   129ac:	0600      	lsls	r0, r0, #24
   129ae:	4318      	orrs	r0, r3
   129b0:	b2d2      	uxtb	r2, r2
   129b2:	19c9      	adds	r1, r1, r7
   129b4:	003b      	movs	r3, r7
   129b6:	4c08      	ldr	r4, [pc, #32]	; (129d8 <LorawanMcastProcessPkt+0x128>)
   129b8:	47a0      	blx	r4
   129ba:	e791      	b.n	128e0 <LorawanMcastProcessPkt+0x30>
   129bc:	20003170 	.word	0x20003170
   129c0:	00010bc9 	.word	0x00010bc9
   129c4:	00008d09 	.word	0x00008d09
   129c8:	20002f34 	.word	0x20002f34
   129cc:	000106c9 	.word	0x000106c9
   129d0:	00010789 	.word	0x00010789
   129d4:	200034cc 	.word	0x200034cc
   129d8:	000107ed 	.word	0x000107ed

000129dc <LorawanAddMcastAddr>:
   129dc:	b570      	push	{r4, r5, r6, lr}
   129de:	260a      	movs	r6, #10
   129e0:	2903      	cmp	r1, #3
   129e2:	d818      	bhi.n	12a16 <LorawanAddMcastAddr+0x3a>
   129e4:	4b0d      	ldr	r3, [pc, #52]	; (12a1c <LorawanAddMcastAddr+0x40>)
   129e6:	681a      	ldr	r2, [r3, #0]
   129e8:	0a15      	lsrs	r5, r2, #8
   129ea:	791a      	ldrb	r2, [r3, #4]
   129ec:	0612      	lsls	r2, r2, #24
   129ee:	432a      	orrs	r2, r5
   129f0:	4282      	cmp	r2, r0
   129f2:	d010      	beq.n	12a16 <LorawanAddMcastAddr+0x3a>
   129f4:	243c      	movs	r4, #60	; 0x3c
   129f6:	434c      	muls	r4, r1
   129f8:	191c      	adds	r4, r3, r4
   129fa:	0023      	movs	r3, r4
   129fc:	33fc      	adds	r3, #252	; 0xfc
   129fe:	6358      	str	r0, [r3, #52]	; 0x34
   12a00:	2106      	movs	r1, #6
   12a02:	2000      	movs	r0, #0
   12a04:	4b06      	ldr	r3, [pc, #24]	; (12a20 <LorawanAddMcastAddr+0x44>)
   12a06:	4798      	blx	r3
   12a08:	2201      	movs	r2, #1
   12a0a:	3459      	adds	r4, #89	; 0x59
   12a0c:	34ff      	adds	r4, #255	; 0xff
   12a0e:	7a21      	ldrb	r1, [r4, #8]
   12a10:	3e02      	subs	r6, #2
   12a12:	430a      	orrs	r2, r1
   12a14:	7222      	strb	r2, [r4, #8]
   12a16:	0030      	movs	r0, r6
   12a18:	bd70      	pop	{r4, r5, r6, pc}
   12a1a:	46c0      	nop			; (mov r8, r8)
   12a1c:	20003170 	.word	0x20003170
   12a20:	00008d09 	.word	0x00008d09

00012a24 <LorawanAddMcastAppskey>:
   12a24:	b570      	push	{r4, r5, r6, lr}
   12a26:	0006      	movs	r6, r0
   12a28:	200a      	movs	r0, #10
   12a2a:	2903      	cmp	r1, #3
   12a2c:	d818      	bhi.n	12a60 <LorawanAddMcastAppskey+0x3c>
   12a2e:	2e00      	cmp	r6, #0
   12a30:	d016      	beq.n	12a60 <LorawanAddMcastAppskey+0x3c>
   12a32:	253c      	movs	r5, #60	; 0x3c
   12a34:	434d      	muls	r5, r1
   12a36:	0028      	movs	r0, r5
   12a38:	4c0a      	ldr	r4, [pc, #40]	; (12a64 <LorawanAddMcastAppskey+0x40>)
   12a3a:	3045      	adds	r0, #69	; 0x45
   12a3c:	30ff      	adds	r0, #255	; 0xff
   12a3e:	2210      	movs	r2, #16
   12a40:	1900      	adds	r0, r0, r4
   12a42:	0031      	movs	r1, r6
   12a44:	4b08      	ldr	r3, [pc, #32]	; (12a68 <LorawanAddMcastAppskey+0x44>)
   12a46:	4798      	blx	r3
   12a48:	4b08      	ldr	r3, [pc, #32]	; (12a6c <LorawanAddMcastAppskey+0x48>)
   12a4a:	2107      	movs	r1, #7
   12a4c:	2000      	movs	r0, #0
   12a4e:	4798      	blx	r3
   12a50:	2304      	movs	r3, #4
   12a52:	2008      	movs	r0, #8
   12a54:	1964      	adds	r4, r4, r5
   12a56:	3459      	adds	r4, #89	; 0x59
   12a58:	34ff      	adds	r4, #255	; 0xff
   12a5a:	7a22      	ldrb	r2, [r4, #8]
   12a5c:	4313      	orrs	r3, r2
   12a5e:	7223      	strb	r3, [r4, #8]
   12a60:	bd70      	pop	{r4, r5, r6, pc}
   12a62:	46c0      	nop			; (mov r8, r8)
   12a64:	20003170 	.word	0x20003170
   12a68:	0001613f 	.word	0x0001613f
   12a6c:	00008d09 	.word	0x00008d09

00012a70 <LorawanAddMcastNwkskey>:
   12a70:	b570      	push	{r4, r5, r6, lr}
   12a72:	0006      	movs	r6, r0
   12a74:	200a      	movs	r0, #10
   12a76:	2903      	cmp	r1, #3
   12a78:	d818      	bhi.n	12aac <LorawanAddMcastNwkskey+0x3c>
   12a7a:	2e00      	cmp	r6, #0
   12a7c:	d016      	beq.n	12aac <LorawanAddMcastNwkskey+0x3c>
   12a7e:	253c      	movs	r5, #60	; 0x3c
   12a80:	434d      	muls	r5, r1
   12a82:	0028      	movs	r0, r5
   12a84:	4c0a      	ldr	r4, [pc, #40]	; (12ab0 <LorawanAddMcastNwkskey+0x40>)
   12a86:	3035      	adds	r0, #53	; 0x35
   12a88:	30ff      	adds	r0, #255	; 0xff
   12a8a:	2210      	movs	r2, #16
   12a8c:	1900      	adds	r0, r0, r4
   12a8e:	0031      	movs	r1, r6
   12a90:	4b08      	ldr	r3, [pc, #32]	; (12ab4 <LorawanAddMcastNwkskey+0x44>)
   12a92:	4798      	blx	r3
   12a94:	4b08      	ldr	r3, [pc, #32]	; (12ab8 <LorawanAddMcastNwkskey+0x48>)
   12a96:	2108      	movs	r1, #8
   12a98:	2000      	movs	r0, #0
   12a9a:	4798      	blx	r3
   12a9c:	2302      	movs	r3, #2
   12a9e:	2008      	movs	r0, #8
   12aa0:	1964      	adds	r4, r4, r5
   12aa2:	3459      	adds	r4, #89	; 0x59
   12aa4:	34ff      	adds	r4, #255	; 0xff
   12aa6:	7a22      	ldrb	r2, [r4, #8]
   12aa8:	4313      	orrs	r3, r2
   12aaa:	7223      	strb	r3, [r4, #8]
   12aac:	bd70      	pop	{r4, r5, r6, pc}
   12aae:	46c0      	nop			; (mov r8, r8)
   12ab0:	20003170 	.word	0x20003170
   12ab4:	0001613f 	.word	0x0001613f
   12ab8:	00008d09 	.word	0x00008d09

00012abc <LorawanAddMcastFcntMin>:
   12abc:	220a      	movs	r2, #10
   12abe:	2903      	cmp	r1, #3
   12ac0:	d807      	bhi.n	12ad2 <LorawanAddMcastFcntMin+0x16>
   12ac2:	233c      	movs	r3, #60	; 0x3c
   12ac4:	434b      	muls	r3, r1
   12ac6:	4904      	ldr	r1, [pc, #16]	; (12ad8 <LorawanAddMcastFcntMin+0x1c>)
   12ac8:	3a02      	subs	r2, #2
   12aca:	18c9      	adds	r1, r1, r3
   12acc:	31fc      	adds	r1, #252	; 0xfc
   12ace:	65c8      	str	r0, [r1, #92]	; 0x5c
   12ad0:	6588      	str	r0, [r1, #88]	; 0x58
   12ad2:	0010      	movs	r0, r2
   12ad4:	4770      	bx	lr
   12ad6:	46c0      	nop			; (mov r8, r8)
   12ad8:	20003170 	.word	0x20003170

00012adc <LorawanAddMcastFcntMax>:
   12adc:	220a      	movs	r2, #10
   12ade:	2903      	cmp	r1, #3
   12ae0:	d806      	bhi.n	12af0 <LorawanAddMcastFcntMax+0x14>
   12ae2:	233c      	movs	r3, #60	; 0x3c
   12ae4:	434b      	muls	r3, r1
   12ae6:	4903      	ldr	r1, [pc, #12]	; (12af4 <LorawanAddMcastFcntMax+0x18>)
   12ae8:	3a02      	subs	r2, #2
   12aea:	18c9      	adds	r1, r1, r3
   12aec:	31fc      	adds	r1, #252	; 0xfc
   12aee:	6608      	str	r0, [r1, #96]	; 0x60
   12af0:	0010      	movs	r0, r2
   12af2:	4770      	bx	lr
   12af4:	20003170 	.word	0x20003170

00012af8 <LorawanAddMcastDlFrequency>:
   12af8:	b513      	push	{r0, r1, r4, lr}
   12afa:	000c      	movs	r4, r1
   12afc:	9001      	str	r0, [sp, #4]
   12afe:	2903      	cmp	r1, #3
   12b00:	d901      	bls.n	12b06 <LorawanAddMcastDlFrequency+0xe>
   12b02:	200a      	movs	r0, #10
   12b04:	bd16      	pop	{r1, r2, r4, pc}
   12b06:	a901      	add	r1, sp, #4
   12b08:	2001      	movs	r0, #1
   12b0a:	4b0a      	ldr	r3, [pc, #40]	; (12b34 <LorawanAddMcastDlFrequency+0x3c>)
   12b0c:	4798      	blx	r3
   12b0e:	2808      	cmp	r0, #8
   12b10:	d1f7      	bne.n	12b02 <LorawanAddMcastDlFrequency+0xa>
   12b12:	213c      	movs	r1, #60	; 0x3c
   12b14:	4361      	muls	r1, r4
   12b16:	4b08      	ldr	r3, [pc, #32]	; (12b38 <LorawanAddMcastDlFrequency+0x40>)
   12b18:	9a01      	ldr	r2, [sp, #4]
   12b1a:	1859      	adds	r1, r3, r1
   12b1c:	31fc      	adds	r1, #252	; 0xfc
   12b1e:	336f      	adds	r3, #111	; 0x6f
   12b20:	668a      	str	r2, [r1, #104]	; 0x68
   12b22:	0a11      	lsrs	r1, r2, #8
   12b24:	701a      	strb	r2, [r3, #0]
   12b26:	7059      	strb	r1, [r3, #1]
   12b28:	0c11      	lsrs	r1, r2, #16
   12b2a:	0e12      	lsrs	r2, r2, #24
   12b2c:	7099      	strb	r1, [r3, #2]
   12b2e:	70da      	strb	r2, [r3, #3]
   12b30:	e7e8      	b.n	12b04 <LorawanAddMcastDlFrequency+0xc>
   12b32:	46c0      	nop			; (mov r8, r8)
   12b34:	0000c681 	.word	0x0000c681
   12b38:	20003170 	.word	0x20003170

00012b3c <LorawanAddMcastDatarate>:
   12b3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12b3e:	466b      	mov	r3, sp
   12b40:	1ddd      	adds	r5, r3, #7
   12b42:	000c      	movs	r4, r1
   12b44:	7028      	strb	r0, [r5, #0]
   12b46:	2903      	cmp	r1, #3
   12b48:	d901      	bls.n	12b4e <LorawanAddMcastDatarate+0x12>
   12b4a:	200a      	movs	r0, #10
   12b4c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   12b4e:	0029      	movs	r1, r5
   12b50:	200f      	movs	r0, #15
   12b52:	4b07      	ldr	r3, [pc, #28]	; (12b70 <LorawanAddMcastDatarate+0x34>)
   12b54:	4798      	blx	r3
   12b56:	2808      	cmp	r0, #8
   12b58:	d1f7      	bne.n	12b4a <LorawanAddMcastDatarate+0xe>
   12b5a:	213c      	movs	r1, #60	; 0x3c
   12b5c:	4361      	muls	r1, r4
   12b5e:	4b05      	ldr	r3, [pc, #20]	; (12b74 <LorawanAddMcastDatarate+0x38>)
   12b60:	782a      	ldrb	r2, [r5, #0]
   12b62:	1859      	adds	r1, r3, r1
   12b64:	3169      	adds	r1, #105	; 0x69
   12b66:	31ff      	adds	r1, #255	; 0xff
   12b68:	3373      	adds	r3, #115	; 0x73
   12b6a:	700a      	strb	r2, [r1, #0]
   12b6c:	701a      	strb	r2, [r3, #0]
   12b6e:	e7ed      	b.n	12b4c <LorawanAddMcastDatarate+0x10>
   12b70:	0000c681 	.word	0x0000c681
   12b74:	20003170 	.word	0x20003170

00012b78 <LorawanAddMcastPeriodicity>:
   12b78:	220a      	movs	r2, #10
   12b7a:	2903      	cmp	r1, #3
   12b7c:	d809      	bhi.n	12b92 <LorawanAddMcastPeriodicity+0x1a>
   12b7e:	2807      	cmp	r0, #7
   12b80:	d807      	bhi.n	12b92 <LorawanAddMcastPeriodicity+0x1a>
   12b82:	233c      	movs	r3, #60	; 0x3c
   12b84:	434b      	muls	r3, r1
   12b86:	4904      	ldr	r1, [pc, #16]	; (12b98 <LorawanAddMcastPeriodicity+0x20>)
   12b88:	3a02      	subs	r2, #2
   12b8a:	18c9      	adds	r1, r1, r3
   12b8c:	316a      	adds	r1, #106	; 0x6a
   12b8e:	31ff      	adds	r1, #255	; 0xff
   12b90:	7008      	strb	r0, [r1, #0]
   12b92:	0010      	movs	r0, r2
   12b94:	4770      	bx	lr
   12b96:	46c0      	nop			; (mov r8, r8)
   12b98:	20003170 	.word	0x20003170

00012b9c <Radio_LBTScanTimeout>:
   12b9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   12b9e:	4c1c      	ldr	r4, [pc, #112]	; (12c10 <Radio_LBTScanTimeout+0x74>)
   12ba0:	0025      	movs	r5, r4
   12ba2:	0023      	movs	r3, r4
   12ba4:	354f      	adds	r5, #79	; 0x4f
   12ba6:	7829      	ldrb	r1, [r5, #0]
   12ba8:	3340      	adds	r3, #64	; 0x40
   12baa:	3101      	adds	r1, #1
   12bac:	b2c9      	uxtb	r1, r1
   12bae:	7029      	strb	r1, [r5, #0]
   12bb0:	781b      	ldrb	r3, [r3, #0]
   12bb2:	428b      	cmp	r3, r1
   12bb4:	d315      	bcc.n	12be2 <Radio_LBTScanTimeout+0x46>
   12bb6:	260e      	movs	r6, #14
   12bb8:	446e      	add	r6, sp
   12bba:	4b16      	ldr	r3, [pc, #88]	; (12c14 <Radio_LBTScanTimeout+0x78>)
   12bbc:	0030      	movs	r0, r6
   12bbe:	4798      	blx	r3
   12bc0:	2300      	movs	r3, #0
   12bc2:	5ef2      	ldrsh	r2, [r6, r3]
   12bc4:	782b      	ldrb	r3, [r5, #0]
   12bc6:	4353      	muls	r3, r2
   12bc8:	6c62      	ldr	r2, [r4, #68]	; 0x44
   12bca:	189b      	adds	r3, r3, r2
   12bcc:	6463      	str	r3, [r4, #68]	; 0x44
   12bce:	0023      	movs	r3, r4
   12bd0:	2200      	movs	r2, #0
   12bd2:	3350      	adds	r3, #80	; 0x50
   12bd4:	7818      	ldrb	r0, [r3, #0]
   12bd6:	9200      	str	r2, [sp, #0]
   12bd8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   12bda:	4b0f      	ldr	r3, [pc, #60]	; (12c18 <Radio_LBTScanTimeout+0x7c>)
   12bdc:	4c0f      	ldr	r4, [pc, #60]	; (12c1c <Radio_LBTScanTimeout+0x80>)
   12bde:	47a0      	blx	r4
   12be0:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
   12be2:	2380      	movs	r3, #128	; 0x80
   12be4:	4a0e      	ldr	r2, [pc, #56]	; (12c20 <Radio_LBTScanTimeout+0x84>)
   12be6:	009b      	lsls	r3, r3, #2
   12be8:	8810      	ldrh	r0, [r2, #0]
   12bea:	4303      	orrs	r3, r0
   12bec:	8013      	strh	r3, [r2, #0]
   12bee:	6c63      	ldr	r3, [r4, #68]	; 0x44
   12bf0:	0058      	lsls	r0, r3, #1
   12bf2:	1e4b      	subs	r3, r1, #1
   12bf4:	4359      	muls	r1, r3
   12bf6:	4b0b      	ldr	r3, [pc, #44]	; (12c24 <Radio_LBTScanTimeout+0x88>)
   12bf8:	b289      	uxth	r1, r1
   12bfa:	4798      	blx	r3
   12bfc:	0023      	movs	r3, r4
   12bfe:	334c      	adds	r3, #76	; 0x4c
   12c00:	8018      	strh	r0, [r3, #0]
   12c02:	2300      	movs	r3, #0
   12c04:	2001      	movs	r0, #1
   12c06:	702b      	strb	r3, [r5, #0]
   12c08:	6463      	str	r3, [r4, #68]	; 0x44
   12c0a:	4b07      	ldr	r3, [pc, #28]	; (12c28 <Radio_LBTScanTimeout+0x8c>)
   12c0c:	4798      	blx	r3
   12c0e:	e7e7      	b.n	12be0 <Radio_LBTScanTimeout+0x44>
   12c10:	20002d78 	.word	0x20002d78
   12c14:	0000d405 	.word	0x0000d405
   12c18:	00012b9d 	.word	0x00012b9d
   12c1c:	0000cbad 	.word	0x0000cbad
   12c20:	20003044 	.word	0x20003044
   12c24:	00012ff1 	.word	0x00012ff1
   12c28:	0000e509 	.word	0x0000e509

00012c2c <RADIO_ScanHandler>:
   12c2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12c2e:	4b12      	ldr	r3, [pc, #72]	; (12c78 <RADIO_ScanHandler+0x4c>)
   12c30:	4798      	blx	r3
   12c32:	2000      	movs	r0, #0
   12c34:	4b11      	ldr	r3, [pc, #68]	; (12c7c <RADIO_ScanHandler+0x50>)
   12c36:	4798      	blx	r3
   12c38:	4d11      	ldr	r5, [pc, #68]	; (12c80 <RADIO_ScanHandler+0x54>)
   12c3a:	4b12      	ldr	r3, [pc, #72]	; (12c84 <RADIO_ScanHandler+0x58>)
   12c3c:	6828      	ldr	r0, [r5, #0]
   12c3e:	2400      	movs	r4, #0
   12c40:	4798      	blx	r3
   12c42:	002b      	movs	r3, r5
   12c44:	4e10      	ldr	r6, [pc, #64]	; (12c88 <RADIO_ScanHandler+0x5c>)
   12c46:	334c      	adds	r3, #76	; 0x4c
   12c48:	2201      	movs	r2, #1
   12c4a:	0021      	movs	r1, r4
   12c4c:	0020      	movs	r0, r4
   12c4e:	801c      	strh	r4, [r3, #0]
   12c50:	47b0      	blx	r6
   12c52:	4b0e      	ldr	r3, [pc, #56]	; (12c8c <RADIO_ScanHandler+0x60>)
   12c54:	2109      	movs	r1, #9
   12c56:	2012      	movs	r0, #18
   12c58:	4798      	blx	r3
   12c5a:	3550      	adds	r5, #80	; 0x50
   12c5c:	0022      	movs	r2, r4
   12c5e:	0021      	movs	r1, r4
   12c60:	2005      	movs	r0, #5
   12c62:	47b0      	blx	r6
   12c64:	7828      	ldrb	r0, [r5, #0]
   12c66:	4b0a      	ldr	r3, [pc, #40]	; (12c90 <RADIO_ScanHandler+0x64>)
   12c68:	4d0a      	ldr	r5, [pc, #40]	; (12c94 <RADIO_ScanHandler+0x68>)
   12c6a:	9400      	str	r4, [sp, #0]
   12c6c:	0022      	movs	r2, r4
   12c6e:	490a      	ldr	r1, [pc, #40]	; (12c98 <RADIO_ScanHandler+0x6c>)
   12c70:	47a8      	blx	r5
   12c72:	0020      	movs	r0, r4
   12c74:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   12c76:	46c0      	nop			; (mov r8, r8)
   12c78:	0000eb79 	.word	0x0000eb79
   12c7c:	0000e7bd 	.word	0x0000e7bd
   12c80:	20002d78 	.word	0x20002d78
   12c84:	0000df01 	.word	0x0000df01
   12c88:	0000d1e9 	.word	0x0000d1e9
   12c8c:	0000bfc1 	.word	0x0000bfc1
   12c90:	00012b9d 	.word	0x00012b9d
   12c94:	0000cbad 	.word	0x0000cbad
   12c98:	00002328 	.word	0x00002328

00012c9c <radioScanDoneHandler>:
   12c9c:	b530      	push	{r4, r5, lr}
   12c9e:	4a18      	ldr	r2, [pc, #96]	; (12d00 <radioScanDoneHandler+0x64>)
   12ca0:	4918      	ldr	r1, [pc, #96]	; (12d04 <radioScanDoneHandler+0x68>)
   12ca2:	8813      	ldrh	r3, [r2, #0]
   12ca4:	b085      	sub	sp, #20
   12ca6:	400b      	ands	r3, r1
   12ca8:	8013      	strh	r3, [r2, #0]
   12caa:	2200      	movs	r2, #0
   12cac:	4b16      	ldr	r3, [pc, #88]	; (12d08 <radioScanDoneHandler+0x6c>)
   12cae:	0011      	movs	r1, r2
   12cb0:	0010      	movs	r0, r2
   12cb2:	4798      	blx	r3
   12cb4:	2000      	movs	r0, #0
   12cb6:	4b15      	ldr	r3, [pc, #84]	; (12d0c <radioScanDoneHandler+0x70>)
   12cb8:	4798      	blx	r3
   12cba:	4b15      	ldr	r3, [pc, #84]	; (12d10 <radioScanDoneHandler+0x74>)
   12cbc:	4798      	blx	r3
   12cbe:	4c15      	ldr	r4, [pc, #84]	; (12d14 <radioScanDoneHandler+0x78>)
   12cc0:	0023      	movs	r3, r4
   12cc2:	334c      	adds	r3, #76	; 0x4c
   12cc4:	2100      	movs	r1, #0
   12cc6:	5e59      	ldrsh	r1, [r3, r1]
   12cc8:	233e      	movs	r3, #62	; 0x3e
   12cca:	5ee2      	ldrsh	r2, [r4, r3]
   12ccc:	4b12      	ldr	r3, [pc, #72]	; (12d18 <radioScanDoneHandler+0x7c>)
   12cce:	4291      	cmp	r1, r2
   12cd0:	da06      	bge.n	12ce0 <radioScanDoneHandler+0x44>
   12cd2:	2002      	movs	r0, #2
   12cd4:	4798      	blx	r3
   12cd6:	4b11      	ldr	r3, [pc, #68]	; (12d1c <radioScanDoneHandler+0x80>)
   12cd8:	4798      	blx	r3
   12cda:	2000      	movs	r0, #0
   12cdc:	b005      	add	sp, #20
   12cde:	bd30      	pop	{r4, r5, pc}
   12ce0:	2207      	movs	r2, #7
   12ce2:	ad01      	add	r5, sp, #4
   12ce4:	2001      	movs	r0, #1
   12ce6:	702a      	strb	r2, [r5, #0]
   12ce8:	4798      	blx	r3
   12cea:	4b0d      	ldr	r3, [pc, #52]	; (12d20 <radioScanDoneHandler+0x84>)
   12cec:	781b      	ldrb	r3, [r3, #0]
   12cee:	079b      	lsls	r3, r3, #30
   12cf0:	d5f3      	bpl.n	12cda <radioScanDoneHandler+0x3e>
   12cf2:	6923      	ldr	r3, [r4, #16]
   12cf4:	2b00      	cmp	r3, #0
   12cf6:	d0f0      	beq.n	12cda <radioScanDoneHandler+0x3e>
   12cf8:	0029      	movs	r1, r5
   12cfa:	2002      	movs	r0, #2
   12cfc:	4798      	blx	r3
   12cfe:	e7ec      	b.n	12cda <radioScanDoneHandler+0x3e>
   12d00:	20003044 	.word	0x20003044
   12d04:	fffffdff 	.word	0xfffffdff
   12d08:	0000d1e9 	.word	0x0000d1e9
   12d0c:	0000e7f1 	.word	0x0000e7f1
   12d10:	0000eca9 	.word	0x0000eca9
   12d14:	20002d78 	.word	0x20002d78
   12d18:	0000e5b5 	.word	0x0000e5b5
   12d1c:	0000ef75 	.word	0x0000ef75
   12d20:	20003046 	.word	0x20003046

00012d24 <common_tc_read_count>:
   12d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12d26:	4b0d      	ldr	r3, [pc, #52]	; (12d5c <common_tc_read_count+0x38>)
   12d28:	4798      	blx	r3
   12d2a:	4b0d      	ldr	r3, [pc, #52]	; (12d60 <common_tc_read_count+0x3c>)
   12d2c:	781b      	ldrb	r3, [r3, #0]
   12d2e:	2b00      	cmp	r3, #0
   12d30:	d00e      	beq.n	12d50 <common_tc_read_count+0x2c>
   12d32:	4b0c      	ldr	r3, [pc, #48]	; (12d64 <common_tc_read_count+0x40>)
   12d34:	781d      	ldrb	r5, [r3, #0]
   12d36:	4b0a      	ldr	r3, [pc, #40]	; (12d60 <common_tc_read_count+0x3c>)
   12d38:	781f      	ldrb	r7, [r3, #0]
   12d3a:	4c0b      	ldr	r4, [pc, #44]	; (12d68 <common_tc_read_count+0x44>)
   12d3c:	1c29      	adds	r1, r5, #0
   12d3e:	47a0      	blx	r4
   12d40:	1c06      	adds	r6, r0, #0
   12d42:	480a      	ldr	r0, [pc, #40]	; (12d6c <common_tc_read_count+0x48>)
   12d44:	1c29      	adds	r1, r5, #0
   12d46:	47a0      	blx	r4
   12d48:	4378      	muls	r0, r7
   12d4a:	1830      	adds	r0, r6, r0
   12d4c:	b280      	uxth	r0, r0
   12d4e:	e004      	b.n	12d5a <common_tc_read_count+0x36>
   12d50:	4b04      	ldr	r3, [pc, #16]	; (12d64 <common_tc_read_count+0x40>)
   12d52:	7819      	ldrb	r1, [r3, #0]
   12d54:	4b04      	ldr	r3, [pc, #16]	; (12d68 <common_tc_read_count+0x44>)
   12d56:	4798      	blx	r3
   12d58:	b280      	uxth	r0, r0
   12d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12d5c:	0000d439 	.word	0x0000d439
   12d60:	20001eb0 	.word	0x20001eb0
   12d64:	200034d4 	.word	0x200034d4
   12d68:	00012ff1 	.word	0x00012ff1
   12d6c:	0000ffff 	.word	0x0000ffff

00012d70 <common_tc_compare_stop>:
   12d70:	b508      	push	{r3, lr}
   12d72:	4b05      	ldr	r3, [pc, #20]	; (12d88 <common_tc_compare_stop+0x18>)
   12d74:	4798      	blx	r3
   12d76:	4b05      	ldr	r3, [pc, #20]	; (12d8c <common_tc_compare_stop+0x1c>)
   12d78:	4798      	blx	r3
   12d7a:	4b05      	ldr	r3, [pc, #20]	; (12d90 <common_tc_compare_stop+0x20>)
   12d7c:	2200      	movs	r2, #0
   12d7e:	605a      	str	r2, [r3, #4]
   12d80:	811a      	strh	r2, [r3, #8]
   12d82:	4b04      	ldr	r3, [pc, #16]	; (12d94 <common_tc_compare_stop+0x24>)
   12d84:	4798      	blx	r3
   12d86:	bd08      	pop	{r3, pc}
   12d88:	0000d44d 	.word	0x0000d44d
   12d8c:	0000d505 	.word	0x0000d505
   12d90:	20001eb0 	.word	0x20001eb0
   12d94:	0000d529 	.word	0x0000d529

00012d98 <common_tc_delay>:
   12d98:	b510      	push	{r4, lr}
   12d9a:	1c04      	adds	r4, r0, #0
   12d9c:	4b13      	ldr	r3, [pc, #76]	; (12dec <common_tc_delay+0x54>)
   12d9e:	4798      	blx	r3
   12da0:	4b13      	ldr	r3, [pc, #76]	; (12df0 <common_tc_delay+0x58>)
   12da2:	781a      	ldrb	r2, [r3, #0]
   12da4:	4362      	muls	r2, r4
   12da6:	1881      	adds	r1, r0, r2
   12da8:	4b12      	ldr	r3, [pc, #72]	; (12df4 <common_tc_delay+0x5c>)
   12daa:	6059      	str	r1, [r3, #4]
   12dac:	6859      	ldr	r1, [r3, #4]
   12dae:	0c09      	lsrs	r1, r1, #16
   12db0:	6059      	str	r1, [r3, #4]
   12db2:	685b      	ldr	r3, [r3, #4]
   12db4:	2b00      	cmp	r3, #0
   12db6:	d007      	beq.n	12dc8 <common_tc_delay+0x30>
   12db8:	4b0e      	ldr	r3, [pc, #56]	; (12df4 <common_tc_delay+0x5c>)
   12dba:	6859      	ldr	r1, [r3, #4]
   12dbc:	3201      	adds	r2, #1
   12dbe:	1880      	adds	r0, r0, r2
   12dc0:	8118      	strh	r0, [r3, #8]
   12dc2:	4b0d      	ldr	r3, [pc, #52]	; (12df8 <common_tc_delay+0x60>)
   12dc4:	4798      	blx	r3
   12dc6:	e004      	b.n	12dd2 <common_tc_delay+0x3a>
   12dc8:	1882      	adds	r2, r0, r2
   12dca:	4b0a      	ldr	r3, [pc, #40]	; (12df4 <common_tc_delay+0x5c>)
   12dcc:	811a      	strh	r2, [r3, #8]
   12dce:	4b0b      	ldr	r3, [pc, #44]	; (12dfc <common_tc_delay+0x64>)
   12dd0:	4798      	blx	r3
   12dd2:	4b08      	ldr	r3, [pc, #32]	; (12df4 <common_tc_delay+0x5c>)
   12dd4:	891b      	ldrh	r3, [r3, #8]
   12dd6:	2b63      	cmp	r3, #99	; 0x63
   12dd8:	d802      	bhi.n	12de0 <common_tc_delay+0x48>
   12dda:	3364      	adds	r3, #100	; 0x64
   12ddc:	4a05      	ldr	r2, [pc, #20]	; (12df4 <common_tc_delay+0x5c>)
   12dde:	8113      	strh	r3, [r2, #8]
   12de0:	4b04      	ldr	r3, [pc, #16]	; (12df4 <common_tc_delay+0x5c>)
   12de2:	8918      	ldrh	r0, [r3, #8]
   12de4:	4b06      	ldr	r3, [pc, #24]	; (12e00 <common_tc_delay+0x68>)
   12de6:	4798      	blx	r3
   12de8:	bd10      	pop	{r4, pc}
   12dea:	46c0      	nop			; (mov r8, r8)
   12dec:	0000d439 	.word	0x0000d439
   12df0:	200034d4 	.word	0x200034d4
   12df4:	20001eb0 	.word	0x20001eb0
   12df8:	0000d44d 	.word	0x0000d44d
   12dfc:	0000d461 	.word	0x0000d461
   12e00:	0000d4ed 	.word	0x0000d4ed

00012e04 <common_tc_init>:
   12e04:	b508      	push	{r3, lr}
   12e06:	2200      	movs	r2, #0
   12e08:	4b03      	ldr	r3, [pc, #12]	; (12e18 <common_tc_init+0x14>)
   12e0a:	701a      	strb	r2, [r3, #0]
   12e0c:	4b03      	ldr	r3, [pc, #12]	; (12e1c <common_tc_init+0x18>)
   12e0e:	4798      	blx	r3
   12e10:	4b03      	ldr	r3, [pc, #12]	; (12e20 <common_tc_init+0x1c>)
   12e12:	7018      	strb	r0, [r3, #0]
   12e14:	bd08      	pop	{r3, pc}
   12e16:	46c0      	nop			; (mov r8, r8)
   12e18:	20001eb0 	.word	0x20001eb0
   12e1c:	0000d541 	.word	0x0000d541
   12e20:	200034d4 	.word	0x200034d4

00012e24 <tmr_ovf_callback>:
   12e24:	b508      	push	{r3, lr}
   12e26:	4b0e      	ldr	r3, [pc, #56]	; (12e60 <tmr_ovf_callback+0x3c>)
   12e28:	685b      	ldr	r3, [r3, #4]
   12e2a:	2b00      	cmp	r3, #0
   12e2c:	d007      	beq.n	12e3e <tmr_ovf_callback+0x1a>
   12e2e:	4a0c      	ldr	r2, [pc, #48]	; (12e60 <tmr_ovf_callback+0x3c>)
   12e30:	6853      	ldr	r3, [r2, #4]
   12e32:	3b01      	subs	r3, #1
   12e34:	6053      	str	r3, [r2, #4]
   12e36:	2b00      	cmp	r3, #0
   12e38:	d101      	bne.n	12e3e <tmr_ovf_callback+0x1a>
   12e3a:	4b0a      	ldr	r3, [pc, #40]	; (12e64 <tmr_ovf_callback+0x40>)
   12e3c:	4798      	blx	r3
   12e3e:	4a08      	ldr	r2, [pc, #32]	; (12e60 <tmr_ovf_callback+0x3c>)
   12e40:	7813      	ldrb	r3, [r2, #0]
   12e42:	3301      	adds	r3, #1
   12e44:	b2db      	uxtb	r3, r3
   12e46:	7013      	strb	r3, [r2, #0]
   12e48:	4a07      	ldr	r2, [pc, #28]	; (12e68 <tmr_ovf_callback+0x44>)
   12e4a:	7812      	ldrb	r2, [r2, #0]
   12e4c:	429a      	cmp	r2, r3
   12e4e:	d806      	bhi.n	12e5e <tmr_ovf_callback+0x3a>
   12e50:	4b03      	ldr	r3, [pc, #12]	; (12e60 <tmr_ovf_callback+0x3c>)
   12e52:	2200      	movs	r2, #0
   12e54:	701a      	strb	r2, [r3, #0]
   12e56:	68db      	ldr	r3, [r3, #12]
   12e58:	2b00      	cmp	r3, #0
   12e5a:	d000      	beq.n	12e5e <tmr_ovf_callback+0x3a>
   12e5c:	4798      	blx	r3
   12e5e:	bd08      	pop	{r3, pc}
   12e60:	20001eb0 	.word	0x20001eb0
   12e64:	0000d461 	.word	0x0000d461
   12e68:	200034d4 	.word	0x200034d4

00012e6c <tmr_cca_callback>:
   12e6c:	b508      	push	{r3, lr}
   12e6e:	4b04      	ldr	r3, [pc, #16]	; (12e80 <tmr_cca_callback+0x14>)
   12e70:	4798      	blx	r3
   12e72:	4b04      	ldr	r3, [pc, #16]	; (12e84 <tmr_cca_callback+0x18>)
   12e74:	691b      	ldr	r3, [r3, #16]
   12e76:	2b00      	cmp	r3, #0
   12e78:	d000      	beq.n	12e7c <tmr_cca_callback+0x10>
   12e7a:	4798      	blx	r3
   12e7c:	bd08      	pop	{r3, pc}
   12e7e:	46c0      	nop			; (mov r8, r8)
   12e80:	0000d44d 	.word	0x0000d44d
   12e84:	20001eb0 	.word	0x20001eb0

00012e88 <set_common_tc_overflow_callback>:
   12e88:	4b01      	ldr	r3, [pc, #4]	; (12e90 <set_common_tc_overflow_callback+0x8>)
   12e8a:	60d8      	str	r0, [r3, #12]
   12e8c:	4770      	bx	lr
   12e8e:	46c0      	nop			; (mov r8, r8)
   12e90:	20001eb0 	.word	0x20001eb0

00012e94 <set_common_tc_expiry_callback>:
   12e94:	4b01      	ldr	r3, [pc, #4]	; (12e9c <set_common_tc_expiry_callback+0x8>)
   12e96:	6118      	str	r0, [r3, #16]
   12e98:	4770      	bx	lr
   12e9a:	46c0      	nop			; (mov r8, r8)
   12e9c:	20001eb0 	.word	0x20001eb0

00012ea0 <__gnu_thumb1_case_uqi>:
   12ea0:	b402      	push	{r1}
   12ea2:	4671      	mov	r1, lr
   12ea4:	0849      	lsrs	r1, r1, #1
   12ea6:	0049      	lsls	r1, r1, #1
   12ea8:	5c09      	ldrb	r1, [r1, r0]
   12eaa:	0049      	lsls	r1, r1, #1
   12eac:	448e      	add	lr, r1
   12eae:	bc02      	pop	{r1}
   12eb0:	4770      	bx	lr
   12eb2:	46c0      	nop			; (mov r8, r8)

00012eb4 <__gnu_thumb1_case_shi>:
   12eb4:	b403      	push	{r0, r1}
   12eb6:	4671      	mov	r1, lr
   12eb8:	0849      	lsrs	r1, r1, #1
   12eba:	0040      	lsls	r0, r0, #1
   12ebc:	0049      	lsls	r1, r1, #1
   12ebe:	5e09      	ldrsh	r1, [r1, r0]
   12ec0:	0049      	lsls	r1, r1, #1
   12ec2:	448e      	add	lr, r1
   12ec4:	bc03      	pop	{r0, r1}
   12ec6:	4770      	bx	lr

00012ec8 <__gnu_thumb1_case_uhi>:
   12ec8:	b403      	push	{r0, r1}
   12eca:	4671      	mov	r1, lr
   12ecc:	0849      	lsrs	r1, r1, #1
   12ece:	0040      	lsls	r0, r0, #1
   12ed0:	0049      	lsls	r1, r1, #1
   12ed2:	5a09      	ldrh	r1, [r1, r0]
   12ed4:	0049      	lsls	r1, r1, #1
   12ed6:	448e      	add	lr, r1
   12ed8:	bc03      	pop	{r0, r1}
   12eda:	4770      	bx	lr

00012edc <__udivsi3>:
   12edc:	2200      	movs	r2, #0
   12ede:	0843      	lsrs	r3, r0, #1
   12ee0:	428b      	cmp	r3, r1
   12ee2:	d374      	bcc.n	12fce <__udivsi3+0xf2>
   12ee4:	0903      	lsrs	r3, r0, #4
   12ee6:	428b      	cmp	r3, r1
   12ee8:	d35f      	bcc.n	12faa <__udivsi3+0xce>
   12eea:	0a03      	lsrs	r3, r0, #8
   12eec:	428b      	cmp	r3, r1
   12eee:	d344      	bcc.n	12f7a <__udivsi3+0x9e>
   12ef0:	0b03      	lsrs	r3, r0, #12
   12ef2:	428b      	cmp	r3, r1
   12ef4:	d328      	bcc.n	12f48 <__udivsi3+0x6c>
   12ef6:	0c03      	lsrs	r3, r0, #16
   12ef8:	428b      	cmp	r3, r1
   12efa:	d30d      	bcc.n	12f18 <__udivsi3+0x3c>
   12efc:	22ff      	movs	r2, #255	; 0xff
   12efe:	0209      	lsls	r1, r1, #8
   12f00:	ba12      	rev	r2, r2
   12f02:	0c03      	lsrs	r3, r0, #16
   12f04:	428b      	cmp	r3, r1
   12f06:	d302      	bcc.n	12f0e <__udivsi3+0x32>
   12f08:	1212      	asrs	r2, r2, #8
   12f0a:	0209      	lsls	r1, r1, #8
   12f0c:	d065      	beq.n	12fda <__udivsi3+0xfe>
   12f0e:	0b03      	lsrs	r3, r0, #12
   12f10:	428b      	cmp	r3, r1
   12f12:	d319      	bcc.n	12f48 <__udivsi3+0x6c>
   12f14:	e000      	b.n	12f18 <__udivsi3+0x3c>
   12f16:	0a09      	lsrs	r1, r1, #8
   12f18:	0bc3      	lsrs	r3, r0, #15
   12f1a:	428b      	cmp	r3, r1
   12f1c:	d301      	bcc.n	12f22 <__udivsi3+0x46>
   12f1e:	03cb      	lsls	r3, r1, #15
   12f20:	1ac0      	subs	r0, r0, r3
   12f22:	4152      	adcs	r2, r2
   12f24:	0b83      	lsrs	r3, r0, #14
   12f26:	428b      	cmp	r3, r1
   12f28:	d301      	bcc.n	12f2e <__udivsi3+0x52>
   12f2a:	038b      	lsls	r3, r1, #14
   12f2c:	1ac0      	subs	r0, r0, r3
   12f2e:	4152      	adcs	r2, r2
   12f30:	0b43      	lsrs	r3, r0, #13
   12f32:	428b      	cmp	r3, r1
   12f34:	d301      	bcc.n	12f3a <__udivsi3+0x5e>
   12f36:	034b      	lsls	r3, r1, #13
   12f38:	1ac0      	subs	r0, r0, r3
   12f3a:	4152      	adcs	r2, r2
   12f3c:	0b03      	lsrs	r3, r0, #12
   12f3e:	428b      	cmp	r3, r1
   12f40:	d301      	bcc.n	12f46 <__udivsi3+0x6a>
   12f42:	030b      	lsls	r3, r1, #12
   12f44:	1ac0      	subs	r0, r0, r3
   12f46:	4152      	adcs	r2, r2
   12f48:	0ac3      	lsrs	r3, r0, #11
   12f4a:	428b      	cmp	r3, r1
   12f4c:	d301      	bcc.n	12f52 <__udivsi3+0x76>
   12f4e:	02cb      	lsls	r3, r1, #11
   12f50:	1ac0      	subs	r0, r0, r3
   12f52:	4152      	adcs	r2, r2
   12f54:	0a83      	lsrs	r3, r0, #10
   12f56:	428b      	cmp	r3, r1
   12f58:	d301      	bcc.n	12f5e <__udivsi3+0x82>
   12f5a:	028b      	lsls	r3, r1, #10
   12f5c:	1ac0      	subs	r0, r0, r3
   12f5e:	4152      	adcs	r2, r2
   12f60:	0a43      	lsrs	r3, r0, #9
   12f62:	428b      	cmp	r3, r1
   12f64:	d301      	bcc.n	12f6a <__udivsi3+0x8e>
   12f66:	024b      	lsls	r3, r1, #9
   12f68:	1ac0      	subs	r0, r0, r3
   12f6a:	4152      	adcs	r2, r2
   12f6c:	0a03      	lsrs	r3, r0, #8
   12f6e:	428b      	cmp	r3, r1
   12f70:	d301      	bcc.n	12f76 <__udivsi3+0x9a>
   12f72:	020b      	lsls	r3, r1, #8
   12f74:	1ac0      	subs	r0, r0, r3
   12f76:	4152      	adcs	r2, r2
   12f78:	d2cd      	bcs.n	12f16 <__udivsi3+0x3a>
   12f7a:	09c3      	lsrs	r3, r0, #7
   12f7c:	428b      	cmp	r3, r1
   12f7e:	d301      	bcc.n	12f84 <__udivsi3+0xa8>
   12f80:	01cb      	lsls	r3, r1, #7
   12f82:	1ac0      	subs	r0, r0, r3
   12f84:	4152      	adcs	r2, r2
   12f86:	0983      	lsrs	r3, r0, #6
   12f88:	428b      	cmp	r3, r1
   12f8a:	d301      	bcc.n	12f90 <__udivsi3+0xb4>
   12f8c:	018b      	lsls	r3, r1, #6
   12f8e:	1ac0      	subs	r0, r0, r3
   12f90:	4152      	adcs	r2, r2
   12f92:	0943      	lsrs	r3, r0, #5
   12f94:	428b      	cmp	r3, r1
   12f96:	d301      	bcc.n	12f9c <__udivsi3+0xc0>
   12f98:	014b      	lsls	r3, r1, #5
   12f9a:	1ac0      	subs	r0, r0, r3
   12f9c:	4152      	adcs	r2, r2
   12f9e:	0903      	lsrs	r3, r0, #4
   12fa0:	428b      	cmp	r3, r1
   12fa2:	d301      	bcc.n	12fa8 <__udivsi3+0xcc>
   12fa4:	010b      	lsls	r3, r1, #4
   12fa6:	1ac0      	subs	r0, r0, r3
   12fa8:	4152      	adcs	r2, r2
   12faa:	08c3      	lsrs	r3, r0, #3
   12fac:	428b      	cmp	r3, r1
   12fae:	d301      	bcc.n	12fb4 <__udivsi3+0xd8>
   12fb0:	00cb      	lsls	r3, r1, #3
   12fb2:	1ac0      	subs	r0, r0, r3
   12fb4:	4152      	adcs	r2, r2
   12fb6:	0883      	lsrs	r3, r0, #2
   12fb8:	428b      	cmp	r3, r1
   12fba:	d301      	bcc.n	12fc0 <__udivsi3+0xe4>
   12fbc:	008b      	lsls	r3, r1, #2
   12fbe:	1ac0      	subs	r0, r0, r3
   12fc0:	4152      	adcs	r2, r2
   12fc2:	0843      	lsrs	r3, r0, #1
   12fc4:	428b      	cmp	r3, r1
   12fc6:	d301      	bcc.n	12fcc <__udivsi3+0xf0>
   12fc8:	004b      	lsls	r3, r1, #1
   12fca:	1ac0      	subs	r0, r0, r3
   12fcc:	4152      	adcs	r2, r2
   12fce:	1a41      	subs	r1, r0, r1
   12fd0:	d200      	bcs.n	12fd4 <__udivsi3+0xf8>
   12fd2:	4601      	mov	r1, r0
   12fd4:	4152      	adcs	r2, r2
   12fd6:	4610      	mov	r0, r2
   12fd8:	4770      	bx	lr
   12fda:	e7ff      	b.n	12fdc <__udivsi3+0x100>
   12fdc:	b501      	push	{r0, lr}
   12fde:	2000      	movs	r0, #0
   12fe0:	f000 f8f0 	bl	131c4 <__aeabi_idiv0>
   12fe4:	bd02      	pop	{r1, pc}
   12fe6:	46c0      	nop			; (mov r8, r8)

00012fe8 <__aeabi_uidivmod>:
   12fe8:	2900      	cmp	r1, #0
   12fea:	d0f7      	beq.n	12fdc <__udivsi3+0x100>
   12fec:	e776      	b.n	12edc <__udivsi3>
   12fee:	4770      	bx	lr

00012ff0 <__divsi3>:
   12ff0:	4603      	mov	r3, r0
   12ff2:	430b      	orrs	r3, r1
   12ff4:	d47f      	bmi.n	130f6 <__divsi3+0x106>
   12ff6:	2200      	movs	r2, #0
   12ff8:	0843      	lsrs	r3, r0, #1
   12ffa:	428b      	cmp	r3, r1
   12ffc:	d374      	bcc.n	130e8 <__divsi3+0xf8>
   12ffe:	0903      	lsrs	r3, r0, #4
   13000:	428b      	cmp	r3, r1
   13002:	d35f      	bcc.n	130c4 <__divsi3+0xd4>
   13004:	0a03      	lsrs	r3, r0, #8
   13006:	428b      	cmp	r3, r1
   13008:	d344      	bcc.n	13094 <__divsi3+0xa4>
   1300a:	0b03      	lsrs	r3, r0, #12
   1300c:	428b      	cmp	r3, r1
   1300e:	d328      	bcc.n	13062 <__divsi3+0x72>
   13010:	0c03      	lsrs	r3, r0, #16
   13012:	428b      	cmp	r3, r1
   13014:	d30d      	bcc.n	13032 <__divsi3+0x42>
   13016:	22ff      	movs	r2, #255	; 0xff
   13018:	0209      	lsls	r1, r1, #8
   1301a:	ba12      	rev	r2, r2
   1301c:	0c03      	lsrs	r3, r0, #16
   1301e:	428b      	cmp	r3, r1
   13020:	d302      	bcc.n	13028 <__divsi3+0x38>
   13022:	1212      	asrs	r2, r2, #8
   13024:	0209      	lsls	r1, r1, #8
   13026:	d065      	beq.n	130f4 <__divsi3+0x104>
   13028:	0b03      	lsrs	r3, r0, #12
   1302a:	428b      	cmp	r3, r1
   1302c:	d319      	bcc.n	13062 <__divsi3+0x72>
   1302e:	e000      	b.n	13032 <__divsi3+0x42>
   13030:	0a09      	lsrs	r1, r1, #8
   13032:	0bc3      	lsrs	r3, r0, #15
   13034:	428b      	cmp	r3, r1
   13036:	d301      	bcc.n	1303c <__divsi3+0x4c>
   13038:	03cb      	lsls	r3, r1, #15
   1303a:	1ac0      	subs	r0, r0, r3
   1303c:	4152      	adcs	r2, r2
   1303e:	0b83      	lsrs	r3, r0, #14
   13040:	428b      	cmp	r3, r1
   13042:	d301      	bcc.n	13048 <__divsi3+0x58>
   13044:	038b      	lsls	r3, r1, #14
   13046:	1ac0      	subs	r0, r0, r3
   13048:	4152      	adcs	r2, r2
   1304a:	0b43      	lsrs	r3, r0, #13
   1304c:	428b      	cmp	r3, r1
   1304e:	d301      	bcc.n	13054 <__divsi3+0x64>
   13050:	034b      	lsls	r3, r1, #13
   13052:	1ac0      	subs	r0, r0, r3
   13054:	4152      	adcs	r2, r2
   13056:	0b03      	lsrs	r3, r0, #12
   13058:	428b      	cmp	r3, r1
   1305a:	d301      	bcc.n	13060 <__divsi3+0x70>
   1305c:	030b      	lsls	r3, r1, #12
   1305e:	1ac0      	subs	r0, r0, r3
   13060:	4152      	adcs	r2, r2
   13062:	0ac3      	lsrs	r3, r0, #11
   13064:	428b      	cmp	r3, r1
   13066:	d301      	bcc.n	1306c <__divsi3+0x7c>
   13068:	02cb      	lsls	r3, r1, #11
   1306a:	1ac0      	subs	r0, r0, r3
   1306c:	4152      	adcs	r2, r2
   1306e:	0a83      	lsrs	r3, r0, #10
   13070:	428b      	cmp	r3, r1
   13072:	d301      	bcc.n	13078 <__divsi3+0x88>
   13074:	028b      	lsls	r3, r1, #10
   13076:	1ac0      	subs	r0, r0, r3
   13078:	4152      	adcs	r2, r2
   1307a:	0a43      	lsrs	r3, r0, #9
   1307c:	428b      	cmp	r3, r1
   1307e:	d301      	bcc.n	13084 <__divsi3+0x94>
   13080:	024b      	lsls	r3, r1, #9
   13082:	1ac0      	subs	r0, r0, r3
   13084:	4152      	adcs	r2, r2
   13086:	0a03      	lsrs	r3, r0, #8
   13088:	428b      	cmp	r3, r1
   1308a:	d301      	bcc.n	13090 <__divsi3+0xa0>
   1308c:	020b      	lsls	r3, r1, #8
   1308e:	1ac0      	subs	r0, r0, r3
   13090:	4152      	adcs	r2, r2
   13092:	d2cd      	bcs.n	13030 <__divsi3+0x40>
   13094:	09c3      	lsrs	r3, r0, #7
   13096:	428b      	cmp	r3, r1
   13098:	d301      	bcc.n	1309e <__divsi3+0xae>
   1309a:	01cb      	lsls	r3, r1, #7
   1309c:	1ac0      	subs	r0, r0, r3
   1309e:	4152      	adcs	r2, r2
   130a0:	0983      	lsrs	r3, r0, #6
   130a2:	428b      	cmp	r3, r1
   130a4:	d301      	bcc.n	130aa <__divsi3+0xba>
   130a6:	018b      	lsls	r3, r1, #6
   130a8:	1ac0      	subs	r0, r0, r3
   130aa:	4152      	adcs	r2, r2
   130ac:	0943      	lsrs	r3, r0, #5
   130ae:	428b      	cmp	r3, r1
   130b0:	d301      	bcc.n	130b6 <__divsi3+0xc6>
   130b2:	014b      	lsls	r3, r1, #5
   130b4:	1ac0      	subs	r0, r0, r3
   130b6:	4152      	adcs	r2, r2
   130b8:	0903      	lsrs	r3, r0, #4
   130ba:	428b      	cmp	r3, r1
   130bc:	d301      	bcc.n	130c2 <__divsi3+0xd2>
   130be:	010b      	lsls	r3, r1, #4
   130c0:	1ac0      	subs	r0, r0, r3
   130c2:	4152      	adcs	r2, r2
   130c4:	08c3      	lsrs	r3, r0, #3
   130c6:	428b      	cmp	r3, r1
   130c8:	d301      	bcc.n	130ce <__divsi3+0xde>
   130ca:	00cb      	lsls	r3, r1, #3
   130cc:	1ac0      	subs	r0, r0, r3
   130ce:	4152      	adcs	r2, r2
   130d0:	0883      	lsrs	r3, r0, #2
   130d2:	428b      	cmp	r3, r1
   130d4:	d301      	bcc.n	130da <__divsi3+0xea>
   130d6:	008b      	lsls	r3, r1, #2
   130d8:	1ac0      	subs	r0, r0, r3
   130da:	4152      	adcs	r2, r2
   130dc:	0843      	lsrs	r3, r0, #1
   130de:	428b      	cmp	r3, r1
   130e0:	d301      	bcc.n	130e6 <__divsi3+0xf6>
   130e2:	004b      	lsls	r3, r1, #1
   130e4:	1ac0      	subs	r0, r0, r3
   130e6:	4152      	adcs	r2, r2
   130e8:	1a41      	subs	r1, r0, r1
   130ea:	d200      	bcs.n	130ee <__divsi3+0xfe>
   130ec:	4601      	mov	r1, r0
   130ee:	4152      	adcs	r2, r2
   130f0:	4610      	mov	r0, r2
   130f2:	4770      	bx	lr
   130f4:	e05d      	b.n	131b2 <__divsi3+0x1c2>
   130f6:	0fca      	lsrs	r2, r1, #31
   130f8:	d000      	beq.n	130fc <__divsi3+0x10c>
   130fa:	4249      	negs	r1, r1
   130fc:	1003      	asrs	r3, r0, #32
   130fe:	d300      	bcc.n	13102 <__divsi3+0x112>
   13100:	4240      	negs	r0, r0
   13102:	4053      	eors	r3, r2
   13104:	2200      	movs	r2, #0
   13106:	469c      	mov	ip, r3
   13108:	0903      	lsrs	r3, r0, #4
   1310a:	428b      	cmp	r3, r1
   1310c:	d32d      	bcc.n	1316a <__divsi3+0x17a>
   1310e:	0a03      	lsrs	r3, r0, #8
   13110:	428b      	cmp	r3, r1
   13112:	d312      	bcc.n	1313a <__divsi3+0x14a>
   13114:	22fc      	movs	r2, #252	; 0xfc
   13116:	0189      	lsls	r1, r1, #6
   13118:	ba12      	rev	r2, r2
   1311a:	0a03      	lsrs	r3, r0, #8
   1311c:	428b      	cmp	r3, r1
   1311e:	d30c      	bcc.n	1313a <__divsi3+0x14a>
   13120:	0189      	lsls	r1, r1, #6
   13122:	1192      	asrs	r2, r2, #6
   13124:	428b      	cmp	r3, r1
   13126:	d308      	bcc.n	1313a <__divsi3+0x14a>
   13128:	0189      	lsls	r1, r1, #6
   1312a:	1192      	asrs	r2, r2, #6
   1312c:	428b      	cmp	r3, r1
   1312e:	d304      	bcc.n	1313a <__divsi3+0x14a>
   13130:	0189      	lsls	r1, r1, #6
   13132:	d03a      	beq.n	131aa <__divsi3+0x1ba>
   13134:	1192      	asrs	r2, r2, #6
   13136:	e000      	b.n	1313a <__divsi3+0x14a>
   13138:	0989      	lsrs	r1, r1, #6
   1313a:	09c3      	lsrs	r3, r0, #7
   1313c:	428b      	cmp	r3, r1
   1313e:	d301      	bcc.n	13144 <__divsi3+0x154>
   13140:	01cb      	lsls	r3, r1, #7
   13142:	1ac0      	subs	r0, r0, r3
   13144:	4152      	adcs	r2, r2
   13146:	0983      	lsrs	r3, r0, #6
   13148:	428b      	cmp	r3, r1
   1314a:	d301      	bcc.n	13150 <__divsi3+0x160>
   1314c:	018b      	lsls	r3, r1, #6
   1314e:	1ac0      	subs	r0, r0, r3
   13150:	4152      	adcs	r2, r2
   13152:	0943      	lsrs	r3, r0, #5
   13154:	428b      	cmp	r3, r1
   13156:	d301      	bcc.n	1315c <__divsi3+0x16c>
   13158:	014b      	lsls	r3, r1, #5
   1315a:	1ac0      	subs	r0, r0, r3
   1315c:	4152      	adcs	r2, r2
   1315e:	0903      	lsrs	r3, r0, #4
   13160:	428b      	cmp	r3, r1
   13162:	d301      	bcc.n	13168 <__divsi3+0x178>
   13164:	010b      	lsls	r3, r1, #4
   13166:	1ac0      	subs	r0, r0, r3
   13168:	4152      	adcs	r2, r2
   1316a:	08c3      	lsrs	r3, r0, #3
   1316c:	428b      	cmp	r3, r1
   1316e:	d301      	bcc.n	13174 <__divsi3+0x184>
   13170:	00cb      	lsls	r3, r1, #3
   13172:	1ac0      	subs	r0, r0, r3
   13174:	4152      	adcs	r2, r2
   13176:	0883      	lsrs	r3, r0, #2
   13178:	428b      	cmp	r3, r1
   1317a:	d301      	bcc.n	13180 <__divsi3+0x190>
   1317c:	008b      	lsls	r3, r1, #2
   1317e:	1ac0      	subs	r0, r0, r3
   13180:	4152      	adcs	r2, r2
   13182:	d2d9      	bcs.n	13138 <__divsi3+0x148>
   13184:	0843      	lsrs	r3, r0, #1
   13186:	428b      	cmp	r3, r1
   13188:	d301      	bcc.n	1318e <__divsi3+0x19e>
   1318a:	004b      	lsls	r3, r1, #1
   1318c:	1ac0      	subs	r0, r0, r3
   1318e:	4152      	adcs	r2, r2
   13190:	1a41      	subs	r1, r0, r1
   13192:	d200      	bcs.n	13196 <__divsi3+0x1a6>
   13194:	4601      	mov	r1, r0
   13196:	4663      	mov	r3, ip
   13198:	4152      	adcs	r2, r2
   1319a:	105b      	asrs	r3, r3, #1
   1319c:	4610      	mov	r0, r2
   1319e:	d301      	bcc.n	131a4 <__divsi3+0x1b4>
   131a0:	4240      	negs	r0, r0
   131a2:	2b00      	cmp	r3, #0
   131a4:	d500      	bpl.n	131a8 <__divsi3+0x1b8>
   131a6:	4249      	negs	r1, r1
   131a8:	4770      	bx	lr
   131aa:	4663      	mov	r3, ip
   131ac:	105b      	asrs	r3, r3, #1
   131ae:	d300      	bcc.n	131b2 <__divsi3+0x1c2>
   131b0:	4240      	negs	r0, r0
   131b2:	b501      	push	{r0, lr}
   131b4:	2000      	movs	r0, #0
   131b6:	f000 f805 	bl	131c4 <__aeabi_idiv0>
   131ba:	bd02      	pop	{r1, pc}

000131bc <__aeabi_idivmod>:
   131bc:	2900      	cmp	r1, #0
   131be:	d0f8      	beq.n	131b2 <__divsi3+0x1c2>
   131c0:	e716      	b.n	12ff0 <__divsi3>
   131c2:	4770      	bx	lr

000131c4 <__aeabi_idiv0>:
   131c4:	4770      	bx	lr
   131c6:	46c0      	nop			; (mov r8, r8)

000131c8 <__aeabi_cdrcmple>:
   131c8:	4684      	mov	ip, r0
   131ca:	1c10      	adds	r0, r2, #0
   131cc:	4662      	mov	r2, ip
   131ce:	468c      	mov	ip, r1
   131d0:	1c19      	adds	r1, r3, #0
   131d2:	4663      	mov	r3, ip
   131d4:	e000      	b.n	131d8 <__aeabi_cdcmpeq>
   131d6:	46c0      	nop			; (mov r8, r8)

000131d8 <__aeabi_cdcmpeq>:
   131d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   131da:	f001 ffa3 	bl	15124 <__ledf2>
   131de:	2800      	cmp	r0, #0
   131e0:	d401      	bmi.n	131e6 <__aeabi_cdcmpeq+0xe>
   131e2:	2100      	movs	r1, #0
   131e4:	42c8      	cmn	r0, r1
   131e6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000131e8 <__aeabi_dcmpeq>:
   131e8:	b510      	push	{r4, lr}
   131ea:	f001 fefd 	bl	14fe8 <__eqdf2>
   131ee:	4240      	negs	r0, r0
   131f0:	3001      	adds	r0, #1
   131f2:	bd10      	pop	{r4, pc}

000131f4 <__aeabi_dcmplt>:
   131f4:	b510      	push	{r4, lr}
   131f6:	f001 ff95 	bl	15124 <__ledf2>
   131fa:	2800      	cmp	r0, #0
   131fc:	db01      	blt.n	13202 <__aeabi_dcmplt+0xe>
   131fe:	2000      	movs	r0, #0
   13200:	bd10      	pop	{r4, pc}
   13202:	2001      	movs	r0, #1
   13204:	bd10      	pop	{r4, pc}
   13206:	46c0      	nop			; (mov r8, r8)

00013208 <__aeabi_dcmple>:
   13208:	b510      	push	{r4, lr}
   1320a:	f001 ff8b 	bl	15124 <__ledf2>
   1320e:	2800      	cmp	r0, #0
   13210:	dd01      	ble.n	13216 <__aeabi_dcmple+0xe>
   13212:	2000      	movs	r0, #0
   13214:	bd10      	pop	{r4, pc}
   13216:	2001      	movs	r0, #1
   13218:	bd10      	pop	{r4, pc}
   1321a:	46c0      	nop			; (mov r8, r8)

0001321c <__aeabi_dcmpgt>:
   1321c:	b510      	push	{r4, lr}
   1321e:	f001 ff1d 	bl	1505c <__gedf2>
   13222:	2800      	cmp	r0, #0
   13224:	dc01      	bgt.n	1322a <__aeabi_dcmpgt+0xe>
   13226:	2000      	movs	r0, #0
   13228:	bd10      	pop	{r4, pc}
   1322a:	2001      	movs	r0, #1
   1322c:	bd10      	pop	{r4, pc}
   1322e:	46c0      	nop			; (mov r8, r8)

00013230 <__aeabi_dcmpge>:
   13230:	b510      	push	{r4, lr}
   13232:	f001 ff13 	bl	1505c <__gedf2>
   13236:	2800      	cmp	r0, #0
   13238:	da01      	bge.n	1323e <__aeabi_dcmpge+0xe>
   1323a:	2000      	movs	r0, #0
   1323c:	bd10      	pop	{r4, pc}
   1323e:	2001      	movs	r0, #1
   13240:	bd10      	pop	{r4, pc}
   13242:	46c0      	nop			; (mov r8, r8)

00013244 <__aeabi_cfrcmple>:
   13244:	4684      	mov	ip, r0
   13246:	1c08      	adds	r0, r1, #0
   13248:	4661      	mov	r1, ip
   1324a:	e7ff      	b.n	1324c <__aeabi_cfcmpeq>

0001324c <__aeabi_cfcmpeq>:
   1324c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1324e:	f000 fcd3 	bl	13bf8 <__lesf2>
   13252:	2800      	cmp	r0, #0
   13254:	d401      	bmi.n	1325a <__aeabi_cfcmpeq+0xe>
   13256:	2100      	movs	r1, #0
   13258:	42c8      	cmn	r0, r1
   1325a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0001325c <__aeabi_fcmpeq>:
   1325c:	b510      	push	{r4, lr}
   1325e:	f000 fc65 	bl	13b2c <__eqsf2>
   13262:	4240      	negs	r0, r0
   13264:	3001      	adds	r0, #1
   13266:	bd10      	pop	{r4, pc}

00013268 <__aeabi_fcmplt>:
   13268:	b510      	push	{r4, lr}
   1326a:	f000 fcc5 	bl	13bf8 <__lesf2>
   1326e:	2800      	cmp	r0, #0
   13270:	db01      	blt.n	13276 <__aeabi_fcmplt+0xe>
   13272:	2000      	movs	r0, #0
   13274:	bd10      	pop	{r4, pc}
   13276:	2001      	movs	r0, #1
   13278:	bd10      	pop	{r4, pc}
   1327a:	46c0      	nop			; (mov r8, r8)

0001327c <__aeabi_fcmple>:
   1327c:	b510      	push	{r4, lr}
   1327e:	f000 fcbb 	bl	13bf8 <__lesf2>
   13282:	2800      	cmp	r0, #0
   13284:	dd01      	ble.n	1328a <__aeabi_fcmple+0xe>
   13286:	2000      	movs	r0, #0
   13288:	bd10      	pop	{r4, pc}
   1328a:	2001      	movs	r0, #1
   1328c:	bd10      	pop	{r4, pc}
   1328e:	46c0      	nop			; (mov r8, r8)

00013290 <__aeabi_fcmpgt>:
   13290:	b510      	push	{r4, lr}
   13292:	f000 fc71 	bl	13b78 <__gesf2>
   13296:	2800      	cmp	r0, #0
   13298:	dc01      	bgt.n	1329e <__aeabi_fcmpgt+0xe>
   1329a:	2000      	movs	r0, #0
   1329c:	bd10      	pop	{r4, pc}
   1329e:	2001      	movs	r0, #1
   132a0:	bd10      	pop	{r4, pc}
   132a2:	46c0      	nop			; (mov r8, r8)

000132a4 <__aeabi_fcmpge>:
   132a4:	b510      	push	{r4, lr}
   132a6:	f000 fc67 	bl	13b78 <__gesf2>
   132aa:	2800      	cmp	r0, #0
   132ac:	da01      	bge.n	132b2 <__aeabi_fcmpge+0xe>
   132ae:	2000      	movs	r0, #0
   132b0:	bd10      	pop	{r4, pc}
   132b2:	2001      	movs	r0, #1
   132b4:	bd10      	pop	{r4, pc}
   132b6:	46c0      	nop			; (mov r8, r8)

000132b8 <__aeabi_uldivmod>:
   132b8:	2b00      	cmp	r3, #0
   132ba:	d111      	bne.n	132e0 <__aeabi_uldivmod+0x28>
   132bc:	2a00      	cmp	r2, #0
   132be:	d10f      	bne.n	132e0 <__aeabi_uldivmod+0x28>
   132c0:	2900      	cmp	r1, #0
   132c2:	d100      	bne.n	132c6 <__aeabi_uldivmod+0xe>
   132c4:	2800      	cmp	r0, #0
   132c6:	d002      	beq.n	132ce <__aeabi_uldivmod+0x16>
   132c8:	2100      	movs	r1, #0
   132ca:	43c9      	mvns	r1, r1
   132cc:	1c08      	adds	r0, r1, #0
   132ce:	b407      	push	{r0, r1, r2}
   132d0:	4802      	ldr	r0, [pc, #8]	; (132dc <__aeabi_uldivmod+0x24>)
   132d2:	a102      	add	r1, pc, #8	; (adr r1, 132dc <__aeabi_uldivmod+0x24>)
   132d4:	1840      	adds	r0, r0, r1
   132d6:	9002      	str	r0, [sp, #8]
   132d8:	bd03      	pop	{r0, r1, pc}
   132da:	46c0      	nop			; (mov r8, r8)
   132dc:	fffffee9 	.word	0xfffffee9
   132e0:	b403      	push	{r0, r1}
   132e2:	4668      	mov	r0, sp
   132e4:	b501      	push	{r0, lr}
   132e6:	9802      	ldr	r0, [sp, #8]
   132e8:	f000 f886 	bl	133f8 <__udivmoddi4>
   132ec:	9b01      	ldr	r3, [sp, #4]
   132ee:	469e      	mov	lr, r3
   132f0:	b002      	add	sp, #8
   132f2:	bc0c      	pop	{r2, r3}
   132f4:	4770      	bx	lr
   132f6:	46c0      	nop			; (mov r8, r8)

000132f8 <__aeabi_lmul>:
   132f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   132fa:	46ce      	mov	lr, r9
   132fc:	4647      	mov	r7, r8
   132fe:	0415      	lsls	r5, r2, #16
   13300:	0c2d      	lsrs	r5, r5, #16
   13302:	002e      	movs	r6, r5
   13304:	b580      	push	{r7, lr}
   13306:	0407      	lsls	r7, r0, #16
   13308:	0c14      	lsrs	r4, r2, #16
   1330a:	0c3f      	lsrs	r7, r7, #16
   1330c:	4699      	mov	r9, r3
   1330e:	0c03      	lsrs	r3, r0, #16
   13310:	437e      	muls	r6, r7
   13312:	435d      	muls	r5, r3
   13314:	4367      	muls	r7, r4
   13316:	4363      	muls	r3, r4
   13318:	197f      	adds	r7, r7, r5
   1331a:	0c34      	lsrs	r4, r6, #16
   1331c:	19e4      	adds	r4, r4, r7
   1331e:	469c      	mov	ip, r3
   13320:	42a5      	cmp	r5, r4
   13322:	d903      	bls.n	1332c <__aeabi_lmul+0x34>
   13324:	2380      	movs	r3, #128	; 0x80
   13326:	025b      	lsls	r3, r3, #9
   13328:	4698      	mov	r8, r3
   1332a:	44c4      	add	ip, r8
   1332c:	464b      	mov	r3, r9
   1332e:	4351      	muls	r1, r2
   13330:	4343      	muls	r3, r0
   13332:	0436      	lsls	r6, r6, #16
   13334:	0c36      	lsrs	r6, r6, #16
   13336:	0c25      	lsrs	r5, r4, #16
   13338:	0424      	lsls	r4, r4, #16
   1333a:	4465      	add	r5, ip
   1333c:	19a4      	adds	r4, r4, r6
   1333e:	1859      	adds	r1, r3, r1
   13340:	1949      	adds	r1, r1, r5
   13342:	0020      	movs	r0, r4
   13344:	bc0c      	pop	{r2, r3}
   13346:	4690      	mov	r8, r2
   13348:	4699      	mov	r9, r3
   1334a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001334c <__aeabi_f2uiz>:
   1334c:	219e      	movs	r1, #158	; 0x9e
   1334e:	b510      	push	{r4, lr}
   13350:	05c9      	lsls	r1, r1, #23
   13352:	1c04      	adds	r4, r0, #0
   13354:	f7ff ffa6 	bl	132a4 <__aeabi_fcmpge>
   13358:	2800      	cmp	r0, #0
   1335a:	d103      	bne.n	13364 <__aeabi_f2uiz+0x18>
   1335c:	1c20      	adds	r0, r4, #0
   1335e:	f000 ff49 	bl	141f4 <__aeabi_f2iz>
   13362:	bd10      	pop	{r4, pc}
   13364:	219e      	movs	r1, #158	; 0x9e
   13366:	1c20      	adds	r0, r4, #0
   13368:	05c9      	lsls	r1, r1, #23
   1336a:	f000 fda7 	bl	13ebc <__aeabi_fsub>
   1336e:	f000 ff41 	bl	141f4 <__aeabi_f2iz>
   13372:	2380      	movs	r3, #128	; 0x80
   13374:	061b      	lsls	r3, r3, #24
   13376:	469c      	mov	ip, r3
   13378:	4460      	add	r0, ip
   1337a:	e7f2      	b.n	13362 <__aeabi_f2uiz+0x16>

0001337c <__aeabi_d2uiz>:
   1337c:	b570      	push	{r4, r5, r6, lr}
   1337e:	2200      	movs	r2, #0
   13380:	4b0c      	ldr	r3, [pc, #48]	; (133b4 <__aeabi_d2uiz+0x38>)
   13382:	0004      	movs	r4, r0
   13384:	000d      	movs	r5, r1
   13386:	f7ff ff53 	bl	13230 <__aeabi_dcmpge>
   1338a:	2800      	cmp	r0, #0
   1338c:	d104      	bne.n	13398 <__aeabi_d2uiz+0x1c>
   1338e:	0020      	movs	r0, r4
   13390:	0029      	movs	r1, r5
   13392:	f002 fcbf 	bl	15d14 <__aeabi_d2iz>
   13396:	bd70      	pop	{r4, r5, r6, pc}
   13398:	4b06      	ldr	r3, [pc, #24]	; (133b4 <__aeabi_d2uiz+0x38>)
   1339a:	2200      	movs	r2, #0
   1339c:	0020      	movs	r0, r4
   1339e:	0029      	movs	r1, r5
   133a0:	f002 f9a2 	bl	156e8 <__aeabi_dsub>
   133a4:	f002 fcb6 	bl	15d14 <__aeabi_d2iz>
   133a8:	2380      	movs	r3, #128	; 0x80
   133aa:	061b      	lsls	r3, r3, #24
   133ac:	469c      	mov	ip, r3
   133ae:	4460      	add	r0, ip
   133b0:	e7f1      	b.n	13396 <__aeabi_d2uiz+0x1a>
   133b2:	46c0      	nop			; (mov r8, r8)
   133b4:	41e00000 	.word	0x41e00000

000133b8 <__aeabi_f2ulz>:
   133b8:	b570      	push	{r4, r5, r6, lr}
   133ba:	f002 fd59 	bl	15e70 <__aeabi_f2d>
   133be:	2200      	movs	r2, #0
   133c0:	4b0b      	ldr	r3, [pc, #44]	; (133f0 <__aeabi_f2ulz+0x38>)
   133c2:	000d      	movs	r5, r1
   133c4:	0004      	movs	r4, r0
   133c6:	f001 ff0f 	bl	151e8 <__aeabi_dmul>
   133ca:	f7ff ffd7 	bl	1337c <__aeabi_d2uiz>
   133ce:	0006      	movs	r6, r0
   133d0:	f002 fd16 	bl	15e00 <__aeabi_ui2d>
   133d4:	2200      	movs	r2, #0
   133d6:	4b07      	ldr	r3, [pc, #28]	; (133f4 <__aeabi_f2ulz+0x3c>)
   133d8:	f001 ff06 	bl	151e8 <__aeabi_dmul>
   133dc:	0002      	movs	r2, r0
   133de:	000b      	movs	r3, r1
   133e0:	0020      	movs	r0, r4
   133e2:	0029      	movs	r1, r5
   133e4:	f002 f980 	bl	156e8 <__aeabi_dsub>
   133e8:	f7ff ffc8 	bl	1337c <__aeabi_d2uiz>
   133ec:	0031      	movs	r1, r6
   133ee:	bd70      	pop	{r4, r5, r6, pc}
   133f0:	3df00000 	.word	0x3df00000
   133f4:	41f00000 	.word	0x41f00000

000133f8 <__udivmoddi4>:
   133f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   133fa:	4657      	mov	r7, sl
   133fc:	464e      	mov	r6, r9
   133fe:	4645      	mov	r5, r8
   13400:	46de      	mov	lr, fp
   13402:	b5e0      	push	{r5, r6, r7, lr}
   13404:	0004      	movs	r4, r0
   13406:	b083      	sub	sp, #12
   13408:	000d      	movs	r5, r1
   1340a:	4692      	mov	sl, r2
   1340c:	4699      	mov	r9, r3
   1340e:	428b      	cmp	r3, r1
   13410:	d82f      	bhi.n	13472 <__udivmoddi4+0x7a>
   13412:	d02c      	beq.n	1346e <__udivmoddi4+0x76>
   13414:	4649      	mov	r1, r9
   13416:	4650      	mov	r0, sl
   13418:	f002 fe24 	bl	16064 <__clzdi2>
   1341c:	0029      	movs	r1, r5
   1341e:	0006      	movs	r6, r0
   13420:	0020      	movs	r0, r4
   13422:	f002 fe1f 	bl	16064 <__clzdi2>
   13426:	1a33      	subs	r3, r6, r0
   13428:	4698      	mov	r8, r3
   1342a:	3b20      	subs	r3, #32
   1342c:	469b      	mov	fp, r3
   1342e:	d500      	bpl.n	13432 <__udivmoddi4+0x3a>
   13430:	e074      	b.n	1351c <__udivmoddi4+0x124>
   13432:	4653      	mov	r3, sl
   13434:	465a      	mov	r2, fp
   13436:	4093      	lsls	r3, r2
   13438:	001f      	movs	r7, r3
   1343a:	4653      	mov	r3, sl
   1343c:	4642      	mov	r2, r8
   1343e:	4093      	lsls	r3, r2
   13440:	001e      	movs	r6, r3
   13442:	42af      	cmp	r7, r5
   13444:	d829      	bhi.n	1349a <__udivmoddi4+0xa2>
   13446:	d026      	beq.n	13496 <__udivmoddi4+0x9e>
   13448:	465b      	mov	r3, fp
   1344a:	1ba4      	subs	r4, r4, r6
   1344c:	41bd      	sbcs	r5, r7
   1344e:	2b00      	cmp	r3, #0
   13450:	da00      	bge.n	13454 <__udivmoddi4+0x5c>
   13452:	e079      	b.n	13548 <__udivmoddi4+0x150>
   13454:	2200      	movs	r2, #0
   13456:	2300      	movs	r3, #0
   13458:	9200      	str	r2, [sp, #0]
   1345a:	9301      	str	r3, [sp, #4]
   1345c:	2301      	movs	r3, #1
   1345e:	465a      	mov	r2, fp
   13460:	4093      	lsls	r3, r2
   13462:	9301      	str	r3, [sp, #4]
   13464:	2301      	movs	r3, #1
   13466:	4642      	mov	r2, r8
   13468:	4093      	lsls	r3, r2
   1346a:	9300      	str	r3, [sp, #0]
   1346c:	e019      	b.n	134a2 <__udivmoddi4+0xaa>
   1346e:	4282      	cmp	r2, r0
   13470:	d9d0      	bls.n	13414 <__udivmoddi4+0x1c>
   13472:	2200      	movs	r2, #0
   13474:	2300      	movs	r3, #0
   13476:	9200      	str	r2, [sp, #0]
   13478:	9301      	str	r3, [sp, #4]
   1347a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1347c:	2b00      	cmp	r3, #0
   1347e:	d001      	beq.n	13484 <__udivmoddi4+0x8c>
   13480:	601c      	str	r4, [r3, #0]
   13482:	605d      	str	r5, [r3, #4]
   13484:	9800      	ldr	r0, [sp, #0]
   13486:	9901      	ldr	r1, [sp, #4]
   13488:	b003      	add	sp, #12
   1348a:	bc3c      	pop	{r2, r3, r4, r5}
   1348c:	4690      	mov	r8, r2
   1348e:	4699      	mov	r9, r3
   13490:	46a2      	mov	sl, r4
   13492:	46ab      	mov	fp, r5
   13494:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13496:	42a3      	cmp	r3, r4
   13498:	d9d6      	bls.n	13448 <__udivmoddi4+0x50>
   1349a:	2200      	movs	r2, #0
   1349c:	2300      	movs	r3, #0
   1349e:	9200      	str	r2, [sp, #0]
   134a0:	9301      	str	r3, [sp, #4]
   134a2:	4643      	mov	r3, r8
   134a4:	2b00      	cmp	r3, #0
   134a6:	d0e8      	beq.n	1347a <__udivmoddi4+0x82>
   134a8:	07fb      	lsls	r3, r7, #31
   134aa:	0872      	lsrs	r2, r6, #1
   134ac:	431a      	orrs	r2, r3
   134ae:	4646      	mov	r6, r8
   134b0:	087b      	lsrs	r3, r7, #1
   134b2:	e00e      	b.n	134d2 <__udivmoddi4+0xda>
   134b4:	42ab      	cmp	r3, r5
   134b6:	d101      	bne.n	134bc <__udivmoddi4+0xc4>
   134b8:	42a2      	cmp	r2, r4
   134ba:	d80c      	bhi.n	134d6 <__udivmoddi4+0xde>
   134bc:	1aa4      	subs	r4, r4, r2
   134be:	419d      	sbcs	r5, r3
   134c0:	2001      	movs	r0, #1
   134c2:	1924      	adds	r4, r4, r4
   134c4:	416d      	adcs	r5, r5
   134c6:	2100      	movs	r1, #0
   134c8:	3e01      	subs	r6, #1
   134ca:	1824      	adds	r4, r4, r0
   134cc:	414d      	adcs	r5, r1
   134ce:	2e00      	cmp	r6, #0
   134d0:	d006      	beq.n	134e0 <__udivmoddi4+0xe8>
   134d2:	42ab      	cmp	r3, r5
   134d4:	d9ee      	bls.n	134b4 <__udivmoddi4+0xbc>
   134d6:	3e01      	subs	r6, #1
   134d8:	1924      	adds	r4, r4, r4
   134da:	416d      	adcs	r5, r5
   134dc:	2e00      	cmp	r6, #0
   134de:	d1f8      	bne.n	134d2 <__udivmoddi4+0xda>
   134e0:	465b      	mov	r3, fp
   134e2:	9800      	ldr	r0, [sp, #0]
   134e4:	9901      	ldr	r1, [sp, #4]
   134e6:	1900      	adds	r0, r0, r4
   134e8:	4169      	adcs	r1, r5
   134ea:	2b00      	cmp	r3, #0
   134ec:	db22      	blt.n	13534 <__udivmoddi4+0x13c>
   134ee:	002b      	movs	r3, r5
   134f0:	465a      	mov	r2, fp
   134f2:	40d3      	lsrs	r3, r2
   134f4:	002a      	movs	r2, r5
   134f6:	4644      	mov	r4, r8
   134f8:	40e2      	lsrs	r2, r4
   134fa:	001c      	movs	r4, r3
   134fc:	465b      	mov	r3, fp
   134fe:	0015      	movs	r5, r2
   13500:	2b00      	cmp	r3, #0
   13502:	db2c      	blt.n	1355e <__udivmoddi4+0x166>
   13504:	0026      	movs	r6, r4
   13506:	409e      	lsls	r6, r3
   13508:	0033      	movs	r3, r6
   1350a:	0026      	movs	r6, r4
   1350c:	4647      	mov	r7, r8
   1350e:	40be      	lsls	r6, r7
   13510:	0032      	movs	r2, r6
   13512:	1a80      	subs	r0, r0, r2
   13514:	4199      	sbcs	r1, r3
   13516:	9000      	str	r0, [sp, #0]
   13518:	9101      	str	r1, [sp, #4]
   1351a:	e7ae      	b.n	1347a <__udivmoddi4+0x82>
   1351c:	4642      	mov	r2, r8
   1351e:	2320      	movs	r3, #32
   13520:	1a9b      	subs	r3, r3, r2
   13522:	4652      	mov	r2, sl
   13524:	40da      	lsrs	r2, r3
   13526:	4641      	mov	r1, r8
   13528:	0013      	movs	r3, r2
   1352a:	464a      	mov	r2, r9
   1352c:	408a      	lsls	r2, r1
   1352e:	0017      	movs	r7, r2
   13530:	431f      	orrs	r7, r3
   13532:	e782      	b.n	1343a <__udivmoddi4+0x42>
   13534:	4642      	mov	r2, r8
   13536:	2320      	movs	r3, #32
   13538:	1a9b      	subs	r3, r3, r2
   1353a:	002a      	movs	r2, r5
   1353c:	4646      	mov	r6, r8
   1353e:	409a      	lsls	r2, r3
   13540:	0023      	movs	r3, r4
   13542:	40f3      	lsrs	r3, r6
   13544:	4313      	orrs	r3, r2
   13546:	e7d5      	b.n	134f4 <__udivmoddi4+0xfc>
   13548:	4642      	mov	r2, r8
   1354a:	2320      	movs	r3, #32
   1354c:	2100      	movs	r1, #0
   1354e:	1a9b      	subs	r3, r3, r2
   13550:	2200      	movs	r2, #0
   13552:	9100      	str	r1, [sp, #0]
   13554:	9201      	str	r2, [sp, #4]
   13556:	2201      	movs	r2, #1
   13558:	40da      	lsrs	r2, r3
   1355a:	9201      	str	r2, [sp, #4]
   1355c:	e782      	b.n	13464 <__udivmoddi4+0x6c>
   1355e:	4642      	mov	r2, r8
   13560:	2320      	movs	r3, #32
   13562:	0026      	movs	r6, r4
   13564:	1a9b      	subs	r3, r3, r2
   13566:	40de      	lsrs	r6, r3
   13568:	002f      	movs	r7, r5
   1356a:	46b4      	mov	ip, r6
   1356c:	4097      	lsls	r7, r2
   1356e:	4666      	mov	r6, ip
   13570:	003b      	movs	r3, r7
   13572:	4333      	orrs	r3, r6
   13574:	e7c9      	b.n	1350a <__udivmoddi4+0x112>
   13576:	46c0      	nop			; (mov r8, r8)

00013578 <__aeabi_fadd>:
   13578:	b5f0      	push	{r4, r5, r6, r7, lr}
   1357a:	46c6      	mov	lr, r8
   1357c:	024e      	lsls	r6, r1, #9
   1357e:	0247      	lsls	r7, r0, #9
   13580:	0a76      	lsrs	r6, r6, #9
   13582:	0a7b      	lsrs	r3, r7, #9
   13584:	0044      	lsls	r4, r0, #1
   13586:	0fc5      	lsrs	r5, r0, #31
   13588:	00f7      	lsls	r7, r6, #3
   1358a:	0048      	lsls	r0, r1, #1
   1358c:	4698      	mov	r8, r3
   1358e:	b500      	push	{lr}
   13590:	0e24      	lsrs	r4, r4, #24
   13592:	002a      	movs	r2, r5
   13594:	00db      	lsls	r3, r3, #3
   13596:	0e00      	lsrs	r0, r0, #24
   13598:	0fc9      	lsrs	r1, r1, #31
   1359a:	46bc      	mov	ip, r7
   1359c:	428d      	cmp	r5, r1
   1359e:	d067      	beq.n	13670 <__aeabi_fadd+0xf8>
   135a0:	1a22      	subs	r2, r4, r0
   135a2:	2a00      	cmp	r2, #0
   135a4:	dc00      	bgt.n	135a8 <__aeabi_fadd+0x30>
   135a6:	e0a5      	b.n	136f4 <__aeabi_fadd+0x17c>
   135a8:	2800      	cmp	r0, #0
   135aa:	d13a      	bne.n	13622 <__aeabi_fadd+0xaa>
   135ac:	2f00      	cmp	r7, #0
   135ae:	d100      	bne.n	135b2 <__aeabi_fadd+0x3a>
   135b0:	e093      	b.n	136da <__aeabi_fadd+0x162>
   135b2:	1e51      	subs	r1, r2, #1
   135b4:	2900      	cmp	r1, #0
   135b6:	d000      	beq.n	135ba <__aeabi_fadd+0x42>
   135b8:	e0bc      	b.n	13734 <__aeabi_fadd+0x1bc>
   135ba:	2401      	movs	r4, #1
   135bc:	1bdb      	subs	r3, r3, r7
   135be:	015a      	lsls	r2, r3, #5
   135c0:	d546      	bpl.n	13650 <__aeabi_fadd+0xd8>
   135c2:	019b      	lsls	r3, r3, #6
   135c4:	099e      	lsrs	r6, r3, #6
   135c6:	0030      	movs	r0, r6
   135c8:	f002 fd2e 	bl	16028 <__clzsi2>
   135cc:	3805      	subs	r0, #5
   135ce:	4086      	lsls	r6, r0
   135d0:	4284      	cmp	r4, r0
   135d2:	dd00      	ble.n	135d6 <__aeabi_fadd+0x5e>
   135d4:	e09d      	b.n	13712 <__aeabi_fadd+0x19a>
   135d6:	1b04      	subs	r4, r0, r4
   135d8:	0032      	movs	r2, r6
   135da:	2020      	movs	r0, #32
   135dc:	3401      	adds	r4, #1
   135de:	40e2      	lsrs	r2, r4
   135e0:	1b04      	subs	r4, r0, r4
   135e2:	40a6      	lsls	r6, r4
   135e4:	0033      	movs	r3, r6
   135e6:	1e5e      	subs	r6, r3, #1
   135e8:	41b3      	sbcs	r3, r6
   135ea:	2400      	movs	r4, #0
   135ec:	4313      	orrs	r3, r2
   135ee:	075a      	lsls	r2, r3, #29
   135f0:	d004      	beq.n	135fc <__aeabi_fadd+0x84>
   135f2:	220f      	movs	r2, #15
   135f4:	401a      	ands	r2, r3
   135f6:	2a04      	cmp	r2, #4
   135f8:	d000      	beq.n	135fc <__aeabi_fadd+0x84>
   135fa:	3304      	adds	r3, #4
   135fc:	015a      	lsls	r2, r3, #5
   135fe:	d529      	bpl.n	13654 <__aeabi_fadd+0xdc>
   13600:	3401      	adds	r4, #1
   13602:	2cff      	cmp	r4, #255	; 0xff
   13604:	d100      	bne.n	13608 <__aeabi_fadd+0x90>
   13606:	e081      	b.n	1370c <__aeabi_fadd+0x194>
   13608:	002a      	movs	r2, r5
   1360a:	019b      	lsls	r3, r3, #6
   1360c:	0a5b      	lsrs	r3, r3, #9
   1360e:	b2e4      	uxtb	r4, r4
   13610:	025b      	lsls	r3, r3, #9
   13612:	05e4      	lsls	r4, r4, #23
   13614:	0a58      	lsrs	r0, r3, #9
   13616:	07d2      	lsls	r2, r2, #31
   13618:	4320      	orrs	r0, r4
   1361a:	4310      	orrs	r0, r2
   1361c:	bc04      	pop	{r2}
   1361e:	4690      	mov	r8, r2
   13620:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13622:	2cff      	cmp	r4, #255	; 0xff
   13624:	d0e3      	beq.n	135ee <__aeabi_fadd+0x76>
   13626:	2180      	movs	r1, #128	; 0x80
   13628:	0038      	movs	r0, r7
   1362a:	04c9      	lsls	r1, r1, #19
   1362c:	4308      	orrs	r0, r1
   1362e:	4684      	mov	ip, r0
   13630:	2a1b      	cmp	r2, #27
   13632:	dd00      	ble.n	13636 <__aeabi_fadd+0xbe>
   13634:	e082      	b.n	1373c <__aeabi_fadd+0x1c4>
   13636:	2020      	movs	r0, #32
   13638:	4661      	mov	r1, ip
   1363a:	40d1      	lsrs	r1, r2
   1363c:	1a82      	subs	r2, r0, r2
   1363e:	4660      	mov	r0, ip
   13640:	4090      	lsls	r0, r2
   13642:	0002      	movs	r2, r0
   13644:	1e50      	subs	r0, r2, #1
   13646:	4182      	sbcs	r2, r0
   13648:	430a      	orrs	r2, r1
   1364a:	1a9b      	subs	r3, r3, r2
   1364c:	015a      	lsls	r2, r3, #5
   1364e:	d4b8      	bmi.n	135c2 <__aeabi_fadd+0x4a>
   13650:	075a      	lsls	r2, r3, #29
   13652:	d1ce      	bne.n	135f2 <__aeabi_fadd+0x7a>
   13654:	08de      	lsrs	r6, r3, #3
   13656:	002a      	movs	r2, r5
   13658:	2cff      	cmp	r4, #255	; 0xff
   1365a:	d13a      	bne.n	136d2 <__aeabi_fadd+0x15a>
   1365c:	2e00      	cmp	r6, #0
   1365e:	d100      	bne.n	13662 <__aeabi_fadd+0xea>
   13660:	e0ae      	b.n	137c0 <__aeabi_fadd+0x248>
   13662:	2380      	movs	r3, #128	; 0x80
   13664:	03db      	lsls	r3, r3, #15
   13666:	4333      	orrs	r3, r6
   13668:	025b      	lsls	r3, r3, #9
   1366a:	0a5b      	lsrs	r3, r3, #9
   1366c:	24ff      	movs	r4, #255	; 0xff
   1366e:	e7cf      	b.n	13610 <__aeabi_fadd+0x98>
   13670:	1a21      	subs	r1, r4, r0
   13672:	2900      	cmp	r1, #0
   13674:	dd52      	ble.n	1371c <__aeabi_fadd+0x1a4>
   13676:	2800      	cmp	r0, #0
   13678:	d031      	beq.n	136de <__aeabi_fadd+0x166>
   1367a:	2cff      	cmp	r4, #255	; 0xff
   1367c:	d0b7      	beq.n	135ee <__aeabi_fadd+0x76>
   1367e:	2080      	movs	r0, #128	; 0x80
   13680:	003e      	movs	r6, r7
   13682:	04c0      	lsls	r0, r0, #19
   13684:	4306      	orrs	r6, r0
   13686:	46b4      	mov	ip, r6
   13688:	291b      	cmp	r1, #27
   1368a:	dd00      	ble.n	1368e <__aeabi_fadd+0x116>
   1368c:	e0aa      	b.n	137e4 <__aeabi_fadd+0x26c>
   1368e:	2620      	movs	r6, #32
   13690:	4660      	mov	r0, ip
   13692:	40c8      	lsrs	r0, r1
   13694:	1a71      	subs	r1, r6, r1
   13696:	4666      	mov	r6, ip
   13698:	408e      	lsls	r6, r1
   1369a:	0031      	movs	r1, r6
   1369c:	1e4e      	subs	r6, r1, #1
   1369e:	41b1      	sbcs	r1, r6
   136a0:	4301      	orrs	r1, r0
   136a2:	185b      	adds	r3, r3, r1
   136a4:	0159      	lsls	r1, r3, #5
   136a6:	d5d3      	bpl.n	13650 <__aeabi_fadd+0xd8>
   136a8:	3401      	adds	r4, #1
   136aa:	2cff      	cmp	r4, #255	; 0xff
   136ac:	d100      	bne.n	136b0 <__aeabi_fadd+0x138>
   136ae:	e087      	b.n	137c0 <__aeabi_fadd+0x248>
   136b0:	2201      	movs	r2, #1
   136b2:	4978      	ldr	r1, [pc, #480]	; (13894 <__aeabi_fadd+0x31c>)
   136b4:	401a      	ands	r2, r3
   136b6:	085b      	lsrs	r3, r3, #1
   136b8:	400b      	ands	r3, r1
   136ba:	4313      	orrs	r3, r2
   136bc:	e797      	b.n	135ee <__aeabi_fadd+0x76>
   136be:	2c00      	cmp	r4, #0
   136c0:	d000      	beq.n	136c4 <__aeabi_fadd+0x14c>
   136c2:	e0a7      	b.n	13814 <__aeabi_fadd+0x29c>
   136c4:	2b00      	cmp	r3, #0
   136c6:	d000      	beq.n	136ca <__aeabi_fadd+0x152>
   136c8:	e0b6      	b.n	13838 <__aeabi_fadd+0x2c0>
   136ca:	1e3b      	subs	r3, r7, #0
   136cc:	d162      	bne.n	13794 <__aeabi_fadd+0x21c>
   136ce:	2600      	movs	r6, #0
   136d0:	2200      	movs	r2, #0
   136d2:	0273      	lsls	r3, r6, #9
   136d4:	0a5b      	lsrs	r3, r3, #9
   136d6:	b2e4      	uxtb	r4, r4
   136d8:	e79a      	b.n	13610 <__aeabi_fadd+0x98>
   136da:	0014      	movs	r4, r2
   136dc:	e787      	b.n	135ee <__aeabi_fadd+0x76>
   136de:	2f00      	cmp	r7, #0
   136e0:	d04d      	beq.n	1377e <__aeabi_fadd+0x206>
   136e2:	1e48      	subs	r0, r1, #1
   136e4:	2800      	cmp	r0, #0
   136e6:	d157      	bne.n	13798 <__aeabi_fadd+0x220>
   136e8:	4463      	add	r3, ip
   136ea:	2401      	movs	r4, #1
   136ec:	015a      	lsls	r2, r3, #5
   136ee:	d5af      	bpl.n	13650 <__aeabi_fadd+0xd8>
   136f0:	2402      	movs	r4, #2
   136f2:	e7dd      	b.n	136b0 <__aeabi_fadd+0x138>
   136f4:	2a00      	cmp	r2, #0
   136f6:	d124      	bne.n	13742 <__aeabi_fadd+0x1ca>
   136f8:	1c62      	adds	r2, r4, #1
   136fa:	b2d2      	uxtb	r2, r2
   136fc:	2a01      	cmp	r2, #1
   136fe:	ddde      	ble.n	136be <__aeabi_fadd+0x146>
   13700:	1bde      	subs	r6, r3, r7
   13702:	0172      	lsls	r2, r6, #5
   13704:	d535      	bpl.n	13772 <__aeabi_fadd+0x1fa>
   13706:	1afe      	subs	r6, r7, r3
   13708:	000d      	movs	r5, r1
   1370a:	e75c      	b.n	135c6 <__aeabi_fadd+0x4e>
   1370c:	002a      	movs	r2, r5
   1370e:	2300      	movs	r3, #0
   13710:	e77e      	b.n	13610 <__aeabi_fadd+0x98>
   13712:	0033      	movs	r3, r6
   13714:	4a60      	ldr	r2, [pc, #384]	; (13898 <__aeabi_fadd+0x320>)
   13716:	1a24      	subs	r4, r4, r0
   13718:	4013      	ands	r3, r2
   1371a:	e768      	b.n	135ee <__aeabi_fadd+0x76>
   1371c:	2900      	cmp	r1, #0
   1371e:	d163      	bne.n	137e8 <__aeabi_fadd+0x270>
   13720:	1c61      	adds	r1, r4, #1
   13722:	b2c8      	uxtb	r0, r1
   13724:	2801      	cmp	r0, #1
   13726:	dd4e      	ble.n	137c6 <__aeabi_fadd+0x24e>
   13728:	29ff      	cmp	r1, #255	; 0xff
   1372a:	d049      	beq.n	137c0 <__aeabi_fadd+0x248>
   1372c:	4463      	add	r3, ip
   1372e:	085b      	lsrs	r3, r3, #1
   13730:	000c      	movs	r4, r1
   13732:	e75c      	b.n	135ee <__aeabi_fadd+0x76>
   13734:	2aff      	cmp	r2, #255	; 0xff
   13736:	d041      	beq.n	137bc <__aeabi_fadd+0x244>
   13738:	000a      	movs	r2, r1
   1373a:	e779      	b.n	13630 <__aeabi_fadd+0xb8>
   1373c:	2201      	movs	r2, #1
   1373e:	1a9b      	subs	r3, r3, r2
   13740:	e784      	b.n	1364c <__aeabi_fadd+0xd4>
   13742:	2c00      	cmp	r4, #0
   13744:	d01d      	beq.n	13782 <__aeabi_fadd+0x20a>
   13746:	28ff      	cmp	r0, #255	; 0xff
   13748:	d022      	beq.n	13790 <__aeabi_fadd+0x218>
   1374a:	2480      	movs	r4, #128	; 0x80
   1374c:	04e4      	lsls	r4, r4, #19
   1374e:	4252      	negs	r2, r2
   13750:	4323      	orrs	r3, r4
   13752:	2a1b      	cmp	r2, #27
   13754:	dd00      	ble.n	13758 <__aeabi_fadd+0x1e0>
   13756:	e08a      	b.n	1386e <__aeabi_fadd+0x2f6>
   13758:	001c      	movs	r4, r3
   1375a:	2520      	movs	r5, #32
   1375c:	40d4      	lsrs	r4, r2
   1375e:	1aaa      	subs	r2, r5, r2
   13760:	4093      	lsls	r3, r2
   13762:	1e5a      	subs	r2, r3, #1
   13764:	4193      	sbcs	r3, r2
   13766:	4323      	orrs	r3, r4
   13768:	4662      	mov	r2, ip
   1376a:	0004      	movs	r4, r0
   1376c:	1ad3      	subs	r3, r2, r3
   1376e:	000d      	movs	r5, r1
   13770:	e725      	b.n	135be <__aeabi_fadd+0x46>
   13772:	2e00      	cmp	r6, #0
   13774:	d000      	beq.n	13778 <__aeabi_fadd+0x200>
   13776:	e726      	b.n	135c6 <__aeabi_fadd+0x4e>
   13778:	2200      	movs	r2, #0
   1377a:	2400      	movs	r4, #0
   1377c:	e7a9      	b.n	136d2 <__aeabi_fadd+0x15a>
   1377e:	000c      	movs	r4, r1
   13780:	e735      	b.n	135ee <__aeabi_fadd+0x76>
   13782:	2b00      	cmp	r3, #0
   13784:	d04d      	beq.n	13822 <__aeabi_fadd+0x2aa>
   13786:	43d2      	mvns	r2, r2
   13788:	2a00      	cmp	r2, #0
   1378a:	d0ed      	beq.n	13768 <__aeabi_fadd+0x1f0>
   1378c:	28ff      	cmp	r0, #255	; 0xff
   1378e:	d1e0      	bne.n	13752 <__aeabi_fadd+0x1da>
   13790:	4663      	mov	r3, ip
   13792:	24ff      	movs	r4, #255	; 0xff
   13794:	000d      	movs	r5, r1
   13796:	e72a      	b.n	135ee <__aeabi_fadd+0x76>
   13798:	29ff      	cmp	r1, #255	; 0xff
   1379a:	d00f      	beq.n	137bc <__aeabi_fadd+0x244>
   1379c:	0001      	movs	r1, r0
   1379e:	e773      	b.n	13688 <__aeabi_fadd+0x110>
   137a0:	2b00      	cmp	r3, #0
   137a2:	d061      	beq.n	13868 <__aeabi_fadd+0x2f0>
   137a4:	24ff      	movs	r4, #255	; 0xff
   137a6:	2f00      	cmp	r7, #0
   137a8:	d100      	bne.n	137ac <__aeabi_fadd+0x234>
   137aa:	e720      	b.n	135ee <__aeabi_fadd+0x76>
   137ac:	2280      	movs	r2, #128	; 0x80
   137ae:	4641      	mov	r1, r8
   137b0:	03d2      	lsls	r2, r2, #15
   137b2:	4211      	tst	r1, r2
   137b4:	d002      	beq.n	137bc <__aeabi_fadd+0x244>
   137b6:	4216      	tst	r6, r2
   137b8:	d100      	bne.n	137bc <__aeabi_fadd+0x244>
   137ba:	003b      	movs	r3, r7
   137bc:	24ff      	movs	r4, #255	; 0xff
   137be:	e716      	b.n	135ee <__aeabi_fadd+0x76>
   137c0:	24ff      	movs	r4, #255	; 0xff
   137c2:	2300      	movs	r3, #0
   137c4:	e724      	b.n	13610 <__aeabi_fadd+0x98>
   137c6:	2c00      	cmp	r4, #0
   137c8:	d1ea      	bne.n	137a0 <__aeabi_fadd+0x228>
   137ca:	2b00      	cmp	r3, #0
   137cc:	d058      	beq.n	13880 <__aeabi_fadd+0x308>
   137ce:	2f00      	cmp	r7, #0
   137d0:	d100      	bne.n	137d4 <__aeabi_fadd+0x25c>
   137d2:	e70c      	b.n	135ee <__aeabi_fadd+0x76>
   137d4:	4463      	add	r3, ip
   137d6:	015a      	lsls	r2, r3, #5
   137d8:	d400      	bmi.n	137dc <__aeabi_fadd+0x264>
   137da:	e739      	b.n	13650 <__aeabi_fadd+0xd8>
   137dc:	4a2e      	ldr	r2, [pc, #184]	; (13898 <__aeabi_fadd+0x320>)
   137de:	000c      	movs	r4, r1
   137e0:	4013      	ands	r3, r2
   137e2:	e704      	b.n	135ee <__aeabi_fadd+0x76>
   137e4:	2101      	movs	r1, #1
   137e6:	e75c      	b.n	136a2 <__aeabi_fadd+0x12a>
   137e8:	2c00      	cmp	r4, #0
   137ea:	d11e      	bne.n	1382a <__aeabi_fadd+0x2b2>
   137ec:	2b00      	cmp	r3, #0
   137ee:	d040      	beq.n	13872 <__aeabi_fadd+0x2fa>
   137f0:	43c9      	mvns	r1, r1
   137f2:	2900      	cmp	r1, #0
   137f4:	d00b      	beq.n	1380e <__aeabi_fadd+0x296>
   137f6:	28ff      	cmp	r0, #255	; 0xff
   137f8:	d036      	beq.n	13868 <__aeabi_fadd+0x2f0>
   137fa:	291b      	cmp	r1, #27
   137fc:	dc47      	bgt.n	1388e <__aeabi_fadd+0x316>
   137fe:	001c      	movs	r4, r3
   13800:	2620      	movs	r6, #32
   13802:	40cc      	lsrs	r4, r1
   13804:	1a71      	subs	r1, r6, r1
   13806:	408b      	lsls	r3, r1
   13808:	1e59      	subs	r1, r3, #1
   1380a:	418b      	sbcs	r3, r1
   1380c:	4323      	orrs	r3, r4
   1380e:	4463      	add	r3, ip
   13810:	0004      	movs	r4, r0
   13812:	e747      	b.n	136a4 <__aeabi_fadd+0x12c>
   13814:	2b00      	cmp	r3, #0
   13816:	d118      	bne.n	1384a <__aeabi_fadd+0x2d2>
   13818:	1e3b      	subs	r3, r7, #0
   1381a:	d02d      	beq.n	13878 <__aeabi_fadd+0x300>
   1381c:	000d      	movs	r5, r1
   1381e:	24ff      	movs	r4, #255	; 0xff
   13820:	e6e5      	b.n	135ee <__aeabi_fadd+0x76>
   13822:	003b      	movs	r3, r7
   13824:	0004      	movs	r4, r0
   13826:	000d      	movs	r5, r1
   13828:	e6e1      	b.n	135ee <__aeabi_fadd+0x76>
   1382a:	28ff      	cmp	r0, #255	; 0xff
   1382c:	d01c      	beq.n	13868 <__aeabi_fadd+0x2f0>
   1382e:	2480      	movs	r4, #128	; 0x80
   13830:	04e4      	lsls	r4, r4, #19
   13832:	4249      	negs	r1, r1
   13834:	4323      	orrs	r3, r4
   13836:	e7e0      	b.n	137fa <__aeabi_fadd+0x282>
   13838:	2f00      	cmp	r7, #0
   1383a:	d100      	bne.n	1383e <__aeabi_fadd+0x2c6>
   1383c:	e6d7      	b.n	135ee <__aeabi_fadd+0x76>
   1383e:	1bde      	subs	r6, r3, r7
   13840:	0172      	lsls	r2, r6, #5
   13842:	d51f      	bpl.n	13884 <__aeabi_fadd+0x30c>
   13844:	1afb      	subs	r3, r7, r3
   13846:	000d      	movs	r5, r1
   13848:	e6d1      	b.n	135ee <__aeabi_fadd+0x76>
   1384a:	24ff      	movs	r4, #255	; 0xff
   1384c:	2f00      	cmp	r7, #0
   1384e:	d100      	bne.n	13852 <__aeabi_fadd+0x2da>
   13850:	e6cd      	b.n	135ee <__aeabi_fadd+0x76>
   13852:	2280      	movs	r2, #128	; 0x80
   13854:	4640      	mov	r0, r8
   13856:	03d2      	lsls	r2, r2, #15
   13858:	4210      	tst	r0, r2
   1385a:	d0af      	beq.n	137bc <__aeabi_fadd+0x244>
   1385c:	4216      	tst	r6, r2
   1385e:	d1ad      	bne.n	137bc <__aeabi_fadd+0x244>
   13860:	003b      	movs	r3, r7
   13862:	000d      	movs	r5, r1
   13864:	24ff      	movs	r4, #255	; 0xff
   13866:	e6c2      	b.n	135ee <__aeabi_fadd+0x76>
   13868:	4663      	mov	r3, ip
   1386a:	24ff      	movs	r4, #255	; 0xff
   1386c:	e6bf      	b.n	135ee <__aeabi_fadd+0x76>
   1386e:	2301      	movs	r3, #1
   13870:	e77a      	b.n	13768 <__aeabi_fadd+0x1f0>
   13872:	003b      	movs	r3, r7
   13874:	0004      	movs	r4, r0
   13876:	e6ba      	b.n	135ee <__aeabi_fadd+0x76>
   13878:	2680      	movs	r6, #128	; 0x80
   1387a:	2200      	movs	r2, #0
   1387c:	03f6      	lsls	r6, r6, #15
   1387e:	e6f0      	b.n	13662 <__aeabi_fadd+0xea>
   13880:	003b      	movs	r3, r7
   13882:	e6b4      	b.n	135ee <__aeabi_fadd+0x76>
   13884:	1e33      	subs	r3, r6, #0
   13886:	d000      	beq.n	1388a <__aeabi_fadd+0x312>
   13888:	e6e2      	b.n	13650 <__aeabi_fadd+0xd8>
   1388a:	2200      	movs	r2, #0
   1388c:	e721      	b.n	136d2 <__aeabi_fadd+0x15a>
   1388e:	2301      	movs	r3, #1
   13890:	e7bd      	b.n	1380e <__aeabi_fadd+0x296>
   13892:	46c0      	nop			; (mov r8, r8)
   13894:	7dffffff 	.word	0x7dffffff
   13898:	fbffffff 	.word	0xfbffffff

0001389c <__aeabi_fdiv>:
   1389c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1389e:	4657      	mov	r7, sl
   138a0:	464e      	mov	r6, r9
   138a2:	46de      	mov	lr, fp
   138a4:	4645      	mov	r5, r8
   138a6:	b5e0      	push	{r5, r6, r7, lr}
   138a8:	0244      	lsls	r4, r0, #9
   138aa:	0043      	lsls	r3, r0, #1
   138ac:	0fc6      	lsrs	r6, r0, #31
   138ae:	b083      	sub	sp, #12
   138b0:	1c0f      	adds	r7, r1, #0
   138b2:	0a64      	lsrs	r4, r4, #9
   138b4:	0e1b      	lsrs	r3, r3, #24
   138b6:	46b2      	mov	sl, r6
   138b8:	d053      	beq.n	13962 <__aeabi_fdiv+0xc6>
   138ba:	2bff      	cmp	r3, #255	; 0xff
   138bc:	d027      	beq.n	1390e <__aeabi_fdiv+0x72>
   138be:	2280      	movs	r2, #128	; 0x80
   138c0:	00e4      	lsls	r4, r4, #3
   138c2:	04d2      	lsls	r2, r2, #19
   138c4:	4314      	orrs	r4, r2
   138c6:	227f      	movs	r2, #127	; 0x7f
   138c8:	4252      	negs	r2, r2
   138ca:	4690      	mov	r8, r2
   138cc:	4498      	add	r8, r3
   138ce:	2300      	movs	r3, #0
   138d0:	4699      	mov	r9, r3
   138d2:	469b      	mov	fp, r3
   138d4:	027d      	lsls	r5, r7, #9
   138d6:	0078      	lsls	r0, r7, #1
   138d8:	0ffb      	lsrs	r3, r7, #31
   138da:	0a6d      	lsrs	r5, r5, #9
   138dc:	0e00      	lsrs	r0, r0, #24
   138de:	9300      	str	r3, [sp, #0]
   138e0:	d024      	beq.n	1392c <__aeabi_fdiv+0x90>
   138e2:	28ff      	cmp	r0, #255	; 0xff
   138e4:	d046      	beq.n	13974 <__aeabi_fdiv+0xd8>
   138e6:	2380      	movs	r3, #128	; 0x80
   138e8:	2100      	movs	r1, #0
   138ea:	00ed      	lsls	r5, r5, #3
   138ec:	04db      	lsls	r3, r3, #19
   138ee:	431d      	orrs	r5, r3
   138f0:	387f      	subs	r0, #127	; 0x7f
   138f2:	4647      	mov	r7, r8
   138f4:	1a38      	subs	r0, r7, r0
   138f6:	464f      	mov	r7, r9
   138f8:	430f      	orrs	r7, r1
   138fa:	00bf      	lsls	r7, r7, #2
   138fc:	46b9      	mov	r9, r7
   138fe:	0033      	movs	r3, r6
   13900:	9a00      	ldr	r2, [sp, #0]
   13902:	4f87      	ldr	r7, [pc, #540]	; (13b20 <__aeabi_fdiv+0x284>)
   13904:	4053      	eors	r3, r2
   13906:	464a      	mov	r2, r9
   13908:	58ba      	ldr	r2, [r7, r2]
   1390a:	9301      	str	r3, [sp, #4]
   1390c:	4697      	mov	pc, r2
   1390e:	2c00      	cmp	r4, #0
   13910:	d14e      	bne.n	139b0 <__aeabi_fdiv+0x114>
   13912:	2308      	movs	r3, #8
   13914:	4699      	mov	r9, r3
   13916:	33f7      	adds	r3, #247	; 0xf7
   13918:	4698      	mov	r8, r3
   1391a:	3bfd      	subs	r3, #253	; 0xfd
   1391c:	469b      	mov	fp, r3
   1391e:	027d      	lsls	r5, r7, #9
   13920:	0078      	lsls	r0, r7, #1
   13922:	0ffb      	lsrs	r3, r7, #31
   13924:	0a6d      	lsrs	r5, r5, #9
   13926:	0e00      	lsrs	r0, r0, #24
   13928:	9300      	str	r3, [sp, #0]
   1392a:	d1da      	bne.n	138e2 <__aeabi_fdiv+0x46>
   1392c:	2d00      	cmp	r5, #0
   1392e:	d126      	bne.n	1397e <__aeabi_fdiv+0xe2>
   13930:	2000      	movs	r0, #0
   13932:	2101      	movs	r1, #1
   13934:	0033      	movs	r3, r6
   13936:	9a00      	ldr	r2, [sp, #0]
   13938:	4f7a      	ldr	r7, [pc, #488]	; (13b24 <__aeabi_fdiv+0x288>)
   1393a:	4053      	eors	r3, r2
   1393c:	4642      	mov	r2, r8
   1393e:	1a10      	subs	r0, r2, r0
   13940:	464a      	mov	r2, r9
   13942:	430a      	orrs	r2, r1
   13944:	0092      	lsls	r2, r2, #2
   13946:	58ba      	ldr	r2, [r7, r2]
   13948:	001d      	movs	r5, r3
   1394a:	4697      	mov	pc, r2
   1394c:	9b00      	ldr	r3, [sp, #0]
   1394e:	002c      	movs	r4, r5
   13950:	469a      	mov	sl, r3
   13952:	468b      	mov	fp, r1
   13954:	465b      	mov	r3, fp
   13956:	2b02      	cmp	r3, #2
   13958:	d131      	bne.n	139be <__aeabi_fdiv+0x122>
   1395a:	4653      	mov	r3, sl
   1395c:	21ff      	movs	r1, #255	; 0xff
   1395e:	2400      	movs	r4, #0
   13960:	e038      	b.n	139d4 <__aeabi_fdiv+0x138>
   13962:	2c00      	cmp	r4, #0
   13964:	d117      	bne.n	13996 <__aeabi_fdiv+0xfa>
   13966:	2304      	movs	r3, #4
   13968:	4699      	mov	r9, r3
   1396a:	2300      	movs	r3, #0
   1396c:	4698      	mov	r8, r3
   1396e:	3301      	adds	r3, #1
   13970:	469b      	mov	fp, r3
   13972:	e7af      	b.n	138d4 <__aeabi_fdiv+0x38>
   13974:	20ff      	movs	r0, #255	; 0xff
   13976:	2d00      	cmp	r5, #0
   13978:	d10b      	bne.n	13992 <__aeabi_fdiv+0xf6>
   1397a:	2102      	movs	r1, #2
   1397c:	e7da      	b.n	13934 <__aeabi_fdiv+0x98>
   1397e:	0028      	movs	r0, r5
   13980:	f002 fb52 	bl	16028 <__clzsi2>
   13984:	1f43      	subs	r3, r0, #5
   13986:	409d      	lsls	r5, r3
   13988:	2376      	movs	r3, #118	; 0x76
   1398a:	425b      	negs	r3, r3
   1398c:	1a18      	subs	r0, r3, r0
   1398e:	2100      	movs	r1, #0
   13990:	e7af      	b.n	138f2 <__aeabi_fdiv+0x56>
   13992:	2103      	movs	r1, #3
   13994:	e7ad      	b.n	138f2 <__aeabi_fdiv+0x56>
   13996:	0020      	movs	r0, r4
   13998:	f002 fb46 	bl	16028 <__clzsi2>
   1399c:	1f43      	subs	r3, r0, #5
   1399e:	409c      	lsls	r4, r3
   139a0:	2376      	movs	r3, #118	; 0x76
   139a2:	425b      	negs	r3, r3
   139a4:	1a1b      	subs	r3, r3, r0
   139a6:	4698      	mov	r8, r3
   139a8:	2300      	movs	r3, #0
   139aa:	4699      	mov	r9, r3
   139ac:	469b      	mov	fp, r3
   139ae:	e791      	b.n	138d4 <__aeabi_fdiv+0x38>
   139b0:	230c      	movs	r3, #12
   139b2:	4699      	mov	r9, r3
   139b4:	33f3      	adds	r3, #243	; 0xf3
   139b6:	4698      	mov	r8, r3
   139b8:	3bfc      	subs	r3, #252	; 0xfc
   139ba:	469b      	mov	fp, r3
   139bc:	e78a      	b.n	138d4 <__aeabi_fdiv+0x38>
   139be:	2b03      	cmp	r3, #3
   139c0:	d100      	bne.n	139c4 <__aeabi_fdiv+0x128>
   139c2:	e0a5      	b.n	13b10 <__aeabi_fdiv+0x274>
   139c4:	4655      	mov	r5, sl
   139c6:	2b01      	cmp	r3, #1
   139c8:	d000      	beq.n	139cc <__aeabi_fdiv+0x130>
   139ca:	e081      	b.n	13ad0 <__aeabi_fdiv+0x234>
   139cc:	2301      	movs	r3, #1
   139ce:	2100      	movs	r1, #0
   139d0:	2400      	movs	r4, #0
   139d2:	402b      	ands	r3, r5
   139d4:	0264      	lsls	r4, r4, #9
   139d6:	05c9      	lsls	r1, r1, #23
   139d8:	0a60      	lsrs	r0, r4, #9
   139da:	07db      	lsls	r3, r3, #31
   139dc:	4308      	orrs	r0, r1
   139de:	4318      	orrs	r0, r3
   139e0:	b003      	add	sp, #12
   139e2:	bc3c      	pop	{r2, r3, r4, r5}
   139e4:	4690      	mov	r8, r2
   139e6:	4699      	mov	r9, r3
   139e8:	46a2      	mov	sl, r4
   139ea:	46ab      	mov	fp, r5
   139ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   139ee:	2480      	movs	r4, #128	; 0x80
   139f0:	2300      	movs	r3, #0
   139f2:	03e4      	lsls	r4, r4, #15
   139f4:	21ff      	movs	r1, #255	; 0xff
   139f6:	e7ed      	b.n	139d4 <__aeabi_fdiv+0x138>
   139f8:	21ff      	movs	r1, #255	; 0xff
   139fa:	2400      	movs	r4, #0
   139fc:	e7ea      	b.n	139d4 <__aeabi_fdiv+0x138>
   139fe:	2301      	movs	r3, #1
   13a00:	1a59      	subs	r1, r3, r1
   13a02:	291b      	cmp	r1, #27
   13a04:	dd66      	ble.n	13ad4 <__aeabi_fdiv+0x238>
   13a06:	9a01      	ldr	r2, [sp, #4]
   13a08:	4013      	ands	r3, r2
   13a0a:	2100      	movs	r1, #0
   13a0c:	2400      	movs	r4, #0
   13a0e:	e7e1      	b.n	139d4 <__aeabi_fdiv+0x138>
   13a10:	2380      	movs	r3, #128	; 0x80
   13a12:	03db      	lsls	r3, r3, #15
   13a14:	421c      	tst	r4, r3
   13a16:	d038      	beq.n	13a8a <__aeabi_fdiv+0x1ee>
   13a18:	421d      	tst	r5, r3
   13a1a:	d051      	beq.n	13ac0 <__aeabi_fdiv+0x224>
   13a1c:	431c      	orrs	r4, r3
   13a1e:	0264      	lsls	r4, r4, #9
   13a20:	0a64      	lsrs	r4, r4, #9
   13a22:	0033      	movs	r3, r6
   13a24:	21ff      	movs	r1, #255	; 0xff
   13a26:	e7d5      	b.n	139d4 <__aeabi_fdiv+0x138>
   13a28:	0163      	lsls	r3, r4, #5
   13a2a:	016c      	lsls	r4, r5, #5
   13a2c:	42a3      	cmp	r3, r4
   13a2e:	d23b      	bcs.n	13aa8 <__aeabi_fdiv+0x20c>
   13a30:	261b      	movs	r6, #27
   13a32:	2100      	movs	r1, #0
   13a34:	3801      	subs	r0, #1
   13a36:	2501      	movs	r5, #1
   13a38:	001f      	movs	r7, r3
   13a3a:	0049      	lsls	r1, r1, #1
   13a3c:	005b      	lsls	r3, r3, #1
   13a3e:	2f00      	cmp	r7, #0
   13a40:	db01      	blt.n	13a46 <__aeabi_fdiv+0x1aa>
   13a42:	429c      	cmp	r4, r3
   13a44:	d801      	bhi.n	13a4a <__aeabi_fdiv+0x1ae>
   13a46:	1b1b      	subs	r3, r3, r4
   13a48:	4329      	orrs	r1, r5
   13a4a:	3e01      	subs	r6, #1
   13a4c:	2e00      	cmp	r6, #0
   13a4e:	d1f3      	bne.n	13a38 <__aeabi_fdiv+0x19c>
   13a50:	001c      	movs	r4, r3
   13a52:	1e63      	subs	r3, r4, #1
   13a54:	419c      	sbcs	r4, r3
   13a56:	430c      	orrs	r4, r1
   13a58:	0001      	movs	r1, r0
   13a5a:	317f      	adds	r1, #127	; 0x7f
   13a5c:	2900      	cmp	r1, #0
   13a5e:	ddce      	ble.n	139fe <__aeabi_fdiv+0x162>
   13a60:	0763      	lsls	r3, r4, #29
   13a62:	d004      	beq.n	13a6e <__aeabi_fdiv+0x1d2>
   13a64:	230f      	movs	r3, #15
   13a66:	4023      	ands	r3, r4
   13a68:	2b04      	cmp	r3, #4
   13a6a:	d000      	beq.n	13a6e <__aeabi_fdiv+0x1d2>
   13a6c:	3404      	adds	r4, #4
   13a6e:	0123      	lsls	r3, r4, #4
   13a70:	d503      	bpl.n	13a7a <__aeabi_fdiv+0x1de>
   13a72:	0001      	movs	r1, r0
   13a74:	4b2c      	ldr	r3, [pc, #176]	; (13b28 <__aeabi_fdiv+0x28c>)
   13a76:	3180      	adds	r1, #128	; 0x80
   13a78:	401c      	ands	r4, r3
   13a7a:	29fe      	cmp	r1, #254	; 0xfe
   13a7c:	dd0d      	ble.n	13a9a <__aeabi_fdiv+0x1fe>
   13a7e:	2301      	movs	r3, #1
   13a80:	9a01      	ldr	r2, [sp, #4]
   13a82:	21ff      	movs	r1, #255	; 0xff
   13a84:	4013      	ands	r3, r2
   13a86:	2400      	movs	r4, #0
   13a88:	e7a4      	b.n	139d4 <__aeabi_fdiv+0x138>
   13a8a:	2380      	movs	r3, #128	; 0x80
   13a8c:	03db      	lsls	r3, r3, #15
   13a8e:	431c      	orrs	r4, r3
   13a90:	0264      	lsls	r4, r4, #9
   13a92:	0a64      	lsrs	r4, r4, #9
   13a94:	0033      	movs	r3, r6
   13a96:	21ff      	movs	r1, #255	; 0xff
   13a98:	e79c      	b.n	139d4 <__aeabi_fdiv+0x138>
   13a9a:	2301      	movs	r3, #1
   13a9c:	9a01      	ldr	r2, [sp, #4]
   13a9e:	01a4      	lsls	r4, r4, #6
   13aa0:	0a64      	lsrs	r4, r4, #9
   13aa2:	b2c9      	uxtb	r1, r1
   13aa4:	4013      	ands	r3, r2
   13aa6:	e795      	b.n	139d4 <__aeabi_fdiv+0x138>
   13aa8:	1b1b      	subs	r3, r3, r4
   13aaa:	261a      	movs	r6, #26
   13aac:	2101      	movs	r1, #1
   13aae:	e7c2      	b.n	13a36 <__aeabi_fdiv+0x19a>
   13ab0:	9b00      	ldr	r3, [sp, #0]
   13ab2:	468b      	mov	fp, r1
   13ab4:	469a      	mov	sl, r3
   13ab6:	2400      	movs	r4, #0
   13ab8:	e74c      	b.n	13954 <__aeabi_fdiv+0xb8>
   13aba:	0263      	lsls	r3, r4, #9
   13abc:	d5e5      	bpl.n	13a8a <__aeabi_fdiv+0x1ee>
   13abe:	2500      	movs	r5, #0
   13ac0:	2480      	movs	r4, #128	; 0x80
   13ac2:	03e4      	lsls	r4, r4, #15
   13ac4:	432c      	orrs	r4, r5
   13ac6:	0264      	lsls	r4, r4, #9
   13ac8:	0a64      	lsrs	r4, r4, #9
   13aca:	9b00      	ldr	r3, [sp, #0]
   13acc:	21ff      	movs	r1, #255	; 0xff
   13ace:	e781      	b.n	139d4 <__aeabi_fdiv+0x138>
   13ad0:	9501      	str	r5, [sp, #4]
   13ad2:	e7c1      	b.n	13a58 <__aeabi_fdiv+0x1bc>
   13ad4:	0023      	movs	r3, r4
   13ad6:	2020      	movs	r0, #32
   13ad8:	40cb      	lsrs	r3, r1
   13ada:	1a41      	subs	r1, r0, r1
   13adc:	408c      	lsls	r4, r1
   13ade:	1e61      	subs	r1, r4, #1
   13ae0:	418c      	sbcs	r4, r1
   13ae2:	431c      	orrs	r4, r3
   13ae4:	0763      	lsls	r3, r4, #29
   13ae6:	d004      	beq.n	13af2 <__aeabi_fdiv+0x256>
   13ae8:	230f      	movs	r3, #15
   13aea:	4023      	ands	r3, r4
   13aec:	2b04      	cmp	r3, #4
   13aee:	d000      	beq.n	13af2 <__aeabi_fdiv+0x256>
   13af0:	3404      	adds	r4, #4
   13af2:	0163      	lsls	r3, r4, #5
   13af4:	d505      	bpl.n	13b02 <__aeabi_fdiv+0x266>
   13af6:	2301      	movs	r3, #1
   13af8:	9a01      	ldr	r2, [sp, #4]
   13afa:	2101      	movs	r1, #1
   13afc:	4013      	ands	r3, r2
   13afe:	2400      	movs	r4, #0
   13b00:	e768      	b.n	139d4 <__aeabi_fdiv+0x138>
   13b02:	2301      	movs	r3, #1
   13b04:	9a01      	ldr	r2, [sp, #4]
   13b06:	01a4      	lsls	r4, r4, #6
   13b08:	0a64      	lsrs	r4, r4, #9
   13b0a:	4013      	ands	r3, r2
   13b0c:	2100      	movs	r1, #0
   13b0e:	e761      	b.n	139d4 <__aeabi_fdiv+0x138>
   13b10:	2380      	movs	r3, #128	; 0x80
   13b12:	03db      	lsls	r3, r3, #15
   13b14:	431c      	orrs	r4, r3
   13b16:	0264      	lsls	r4, r4, #9
   13b18:	0a64      	lsrs	r4, r4, #9
   13b1a:	4653      	mov	r3, sl
   13b1c:	21ff      	movs	r1, #255	; 0xff
   13b1e:	e759      	b.n	139d4 <__aeabi_fdiv+0x138>
   13b20:	00018334 	.word	0x00018334
   13b24:	00018374 	.word	0x00018374
   13b28:	f7ffffff 	.word	0xf7ffffff

00013b2c <__eqsf2>:
   13b2c:	b570      	push	{r4, r5, r6, lr}
   13b2e:	0042      	lsls	r2, r0, #1
   13b30:	0245      	lsls	r5, r0, #9
   13b32:	024e      	lsls	r6, r1, #9
   13b34:	004c      	lsls	r4, r1, #1
   13b36:	0fc3      	lsrs	r3, r0, #31
   13b38:	0a6d      	lsrs	r5, r5, #9
   13b3a:	0e12      	lsrs	r2, r2, #24
   13b3c:	0a76      	lsrs	r6, r6, #9
   13b3e:	0e24      	lsrs	r4, r4, #24
   13b40:	0fc9      	lsrs	r1, r1, #31
   13b42:	2001      	movs	r0, #1
   13b44:	2aff      	cmp	r2, #255	; 0xff
   13b46:	d006      	beq.n	13b56 <__eqsf2+0x2a>
   13b48:	2cff      	cmp	r4, #255	; 0xff
   13b4a:	d003      	beq.n	13b54 <__eqsf2+0x28>
   13b4c:	42a2      	cmp	r2, r4
   13b4e:	d101      	bne.n	13b54 <__eqsf2+0x28>
   13b50:	42b5      	cmp	r5, r6
   13b52:	d006      	beq.n	13b62 <__eqsf2+0x36>
   13b54:	bd70      	pop	{r4, r5, r6, pc}
   13b56:	2d00      	cmp	r5, #0
   13b58:	d1fc      	bne.n	13b54 <__eqsf2+0x28>
   13b5a:	2cff      	cmp	r4, #255	; 0xff
   13b5c:	d1fa      	bne.n	13b54 <__eqsf2+0x28>
   13b5e:	2e00      	cmp	r6, #0
   13b60:	d1f8      	bne.n	13b54 <__eqsf2+0x28>
   13b62:	428b      	cmp	r3, r1
   13b64:	d006      	beq.n	13b74 <__eqsf2+0x48>
   13b66:	2001      	movs	r0, #1
   13b68:	2a00      	cmp	r2, #0
   13b6a:	d1f3      	bne.n	13b54 <__eqsf2+0x28>
   13b6c:	0028      	movs	r0, r5
   13b6e:	1e45      	subs	r5, r0, #1
   13b70:	41a8      	sbcs	r0, r5
   13b72:	e7ef      	b.n	13b54 <__eqsf2+0x28>
   13b74:	2000      	movs	r0, #0
   13b76:	e7ed      	b.n	13b54 <__eqsf2+0x28>

00013b78 <__gesf2>:
   13b78:	b5f0      	push	{r4, r5, r6, r7, lr}
   13b7a:	0042      	lsls	r2, r0, #1
   13b7c:	0245      	lsls	r5, r0, #9
   13b7e:	024c      	lsls	r4, r1, #9
   13b80:	0fc3      	lsrs	r3, r0, #31
   13b82:	0048      	lsls	r0, r1, #1
   13b84:	0a6d      	lsrs	r5, r5, #9
   13b86:	0e12      	lsrs	r2, r2, #24
   13b88:	0a64      	lsrs	r4, r4, #9
   13b8a:	0e00      	lsrs	r0, r0, #24
   13b8c:	0fc9      	lsrs	r1, r1, #31
   13b8e:	2aff      	cmp	r2, #255	; 0xff
   13b90:	d01e      	beq.n	13bd0 <__gesf2+0x58>
   13b92:	28ff      	cmp	r0, #255	; 0xff
   13b94:	d021      	beq.n	13bda <__gesf2+0x62>
   13b96:	2a00      	cmp	r2, #0
   13b98:	d10a      	bne.n	13bb0 <__gesf2+0x38>
   13b9a:	426e      	negs	r6, r5
   13b9c:	416e      	adcs	r6, r5
   13b9e:	b2f6      	uxtb	r6, r6
   13ba0:	2800      	cmp	r0, #0
   13ba2:	d10f      	bne.n	13bc4 <__gesf2+0x4c>
   13ba4:	2c00      	cmp	r4, #0
   13ba6:	d10d      	bne.n	13bc4 <__gesf2+0x4c>
   13ba8:	2000      	movs	r0, #0
   13baa:	2d00      	cmp	r5, #0
   13bac:	d009      	beq.n	13bc2 <__gesf2+0x4a>
   13bae:	e005      	b.n	13bbc <__gesf2+0x44>
   13bb0:	2800      	cmp	r0, #0
   13bb2:	d101      	bne.n	13bb8 <__gesf2+0x40>
   13bb4:	2c00      	cmp	r4, #0
   13bb6:	d001      	beq.n	13bbc <__gesf2+0x44>
   13bb8:	428b      	cmp	r3, r1
   13bba:	d011      	beq.n	13be0 <__gesf2+0x68>
   13bbc:	2101      	movs	r1, #1
   13bbe:	4258      	negs	r0, r3
   13bc0:	4308      	orrs	r0, r1
   13bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13bc4:	2e00      	cmp	r6, #0
   13bc6:	d0f7      	beq.n	13bb8 <__gesf2+0x40>
   13bc8:	2001      	movs	r0, #1
   13bca:	3901      	subs	r1, #1
   13bcc:	4308      	orrs	r0, r1
   13bce:	e7f8      	b.n	13bc2 <__gesf2+0x4a>
   13bd0:	2d00      	cmp	r5, #0
   13bd2:	d0de      	beq.n	13b92 <__gesf2+0x1a>
   13bd4:	2002      	movs	r0, #2
   13bd6:	4240      	negs	r0, r0
   13bd8:	e7f3      	b.n	13bc2 <__gesf2+0x4a>
   13bda:	2c00      	cmp	r4, #0
   13bdc:	d0db      	beq.n	13b96 <__gesf2+0x1e>
   13bde:	e7f9      	b.n	13bd4 <__gesf2+0x5c>
   13be0:	4282      	cmp	r2, r0
   13be2:	dceb      	bgt.n	13bbc <__gesf2+0x44>
   13be4:	db04      	blt.n	13bf0 <__gesf2+0x78>
   13be6:	42a5      	cmp	r5, r4
   13be8:	d8e8      	bhi.n	13bbc <__gesf2+0x44>
   13bea:	2000      	movs	r0, #0
   13bec:	42a5      	cmp	r5, r4
   13bee:	d2e8      	bcs.n	13bc2 <__gesf2+0x4a>
   13bf0:	2101      	movs	r1, #1
   13bf2:	1e58      	subs	r0, r3, #1
   13bf4:	4308      	orrs	r0, r1
   13bf6:	e7e4      	b.n	13bc2 <__gesf2+0x4a>

00013bf8 <__lesf2>:
   13bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
   13bfa:	0042      	lsls	r2, r0, #1
   13bfc:	024d      	lsls	r5, r1, #9
   13bfe:	004c      	lsls	r4, r1, #1
   13c00:	0246      	lsls	r6, r0, #9
   13c02:	0a76      	lsrs	r6, r6, #9
   13c04:	0e12      	lsrs	r2, r2, #24
   13c06:	0fc3      	lsrs	r3, r0, #31
   13c08:	0a6d      	lsrs	r5, r5, #9
   13c0a:	0e24      	lsrs	r4, r4, #24
   13c0c:	0fc9      	lsrs	r1, r1, #31
   13c0e:	2aff      	cmp	r2, #255	; 0xff
   13c10:	d016      	beq.n	13c40 <__lesf2+0x48>
   13c12:	2cff      	cmp	r4, #255	; 0xff
   13c14:	d018      	beq.n	13c48 <__lesf2+0x50>
   13c16:	2a00      	cmp	r2, #0
   13c18:	d10a      	bne.n	13c30 <__lesf2+0x38>
   13c1a:	4270      	negs	r0, r6
   13c1c:	4170      	adcs	r0, r6
   13c1e:	b2c0      	uxtb	r0, r0
   13c20:	2c00      	cmp	r4, #0
   13c22:	d015      	beq.n	13c50 <__lesf2+0x58>
   13c24:	2800      	cmp	r0, #0
   13c26:	d005      	beq.n	13c34 <__lesf2+0x3c>
   13c28:	2001      	movs	r0, #1
   13c2a:	3901      	subs	r1, #1
   13c2c:	4308      	orrs	r0, r1
   13c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13c30:	2c00      	cmp	r4, #0
   13c32:	d013      	beq.n	13c5c <__lesf2+0x64>
   13c34:	4299      	cmp	r1, r3
   13c36:	d014      	beq.n	13c62 <__lesf2+0x6a>
   13c38:	2001      	movs	r0, #1
   13c3a:	425b      	negs	r3, r3
   13c3c:	4318      	orrs	r0, r3
   13c3e:	e7f6      	b.n	13c2e <__lesf2+0x36>
   13c40:	2002      	movs	r0, #2
   13c42:	2e00      	cmp	r6, #0
   13c44:	d1f3      	bne.n	13c2e <__lesf2+0x36>
   13c46:	e7e4      	b.n	13c12 <__lesf2+0x1a>
   13c48:	2002      	movs	r0, #2
   13c4a:	2d00      	cmp	r5, #0
   13c4c:	d1ef      	bne.n	13c2e <__lesf2+0x36>
   13c4e:	e7e2      	b.n	13c16 <__lesf2+0x1e>
   13c50:	2d00      	cmp	r5, #0
   13c52:	d1e7      	bne.n	13c24 <__lesf2+0x2c>
   13c54:	2000      	movs	r0, #0
   13c56:	2e00      	cmp	r6, #0
   13c58:	d0e9      	beq.n	13c2e <__lesf2+0x36>
   13c5a:	e7ed      	b.n	13c38 <__lesf2+0x40>
   13c5c:	2d00      	cmp	r5, #0
   13c5e:	d1e9      	bne.n	13c34 <__lesf2+0x3c>
   13c60:	e7ea      	b.n	13c38 <__lesf2+0x40>
   13c62:	42a2      	cmp	r2, r4
   13c64:	dc06      	bgt.n	13c74 <__lesf2+0x7c>
   13c66:	dbdf      	blt.n	13c28 <__lesf2+0x30>
   13c68:	42ae      	cmp	r6, r5
   13c6a:	d803      	bhi.n	13c74 <__lesf2+0x7c>
   13c6c:	2000      	movs	r0, #0
   13c6e:	42ae      	cmp	r6, r5
   13c70:	d3da      	bcc.n	13c28 <__lesf2+0x30>
   13c72:	e7dc      	b.n	13c2e <__lesf2+0x36>
   13c74:	2001      	movs	r0, #1
   13c76:	4249      	negs	r1, r1
   13c78:	4308      	orrs	r0, r1
   13c7a:	e7d8      	b.n	13c2e <__lesf2+0x36>

00013c7c <__aeabi_fmul>:
   13c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13c7e:	4657      	mov	r7, sl
   13c80:	464e      	mov	r6, r9
   13c82:	4645      	mov	r5, r8
   13c84:	46de      	mov	lr, fp
   13c86:	b5e0      	push	{r5, r6, r7, lr}
   13c88:	0247      	lsls	r7, r0, #9
   13c8a:	0046      	lsls	r6, r0, #1
   13c8c:	4688      	mov	r8, r1
   13c8e:	0a7f      	lsrs	r7, r7, #9
   13c90:	0e36      	lsrs	r6, r6, #24
   13c92:	0fc4      	lsrs	r4, r0, #31
   13c94:	2e00      	cmp	r6, #0
   13c96:	d047      	beq.n	13d28 <__aeabi_fmul+0xac>
   13c98:	2eff      	cmp	r6, #255	; 0xff
   13c9a:	d024      	beq.n	13ce6 <__aeabi_fmul+0x6a>
   13c9c:	00fb      	lsls	r3, r7, #3
   13c9e:	2780      	movs	r7, #128	; 0x80
   13ca0:	04ff      	lsls	r7, r7, #19
   13ca2:	431f      	orrs	r7, r3
   13ca4:	2300      	movs	r3, #0
   13ca6:	4699      	mov	r9, r3
   13ca8:	469a      	mov	sl, r3
   13caa:	3e7f      	subs	r6, #127	; 0x7f
   13cac:	4643      	mov	r3, r8
   13cae:	025d      	lsls	r5, r3, #9
   13cb0:	0058      	lsls	r0, r3, #1
   13cb2:	0fdb      	lsrs	r3, r3, #31
   13cb4:	0a6d      	lsrs	r5, r5, #9
   13cb6:	0e00      	lsrs	r0, r0, #24
   13cb8:	4698      	mov	r8, r3
   13cba:	d043      	beq.n	13d44 <__aeabi_fmul+0xc8>
   13cbc:	28ff      	cmp	r0, #255	; 0xff
   13cbe:	d03b      	beq.n	13d38 <__aeabi_fmul+0xbc>
   13cc0:	00eb      	lsls	r3, r5, #3
   13cc2:	2580      	movs	r5, #128	; 0x80
   13cc4:	2200      	movs	r2, #0
   13cc6:	04ed      	lsls	r5, r5, #19
   13cc8:	431d      	orrs	r5, r3
   13cca:	387f      	subs	r0, #127	; 0x7f
   13ccc:	1836      	adds	r6, r6, r0
   13cce:	1c73      	adds	r3, r6, #1
   13cd0:	4641      	mov	r1, r8
   13cd2:	469b      	mov	fp, r3
   13cd4:	464b      	mov	r3, r9
   13cd6:	4061      	eors	r1, r4
   13cd8:	4313      	orrs	r3, r2
   13cda:	2b0f      	cmp	r3, #15
   13cdc:	d864      	bhi.n	13da8 <__aeabi_fmul+0x12c>
   13cde:	4875      	ldr	r0, [pc, #468]	; (13eb4 <__aeabi_fmul+0x238>)
   13ce0:	009b      	lsls	r3, r3, #2
   13ce2:	58c3      	ldr	r3, [r0, r3]
   13ce4:	469f      	mov	pc, r3
   13ce6:	2f00      	cmp	r7, #0
   13ce8:	d142      	bne.n	13d70 <__aeabi_fmul+0xf4>
   13cea:	2308      	movs	r3, #8
   13cec:	4699      	mov	r9, r3
   13cee:	3b06      	subs	r3, #6
   13cf0:	26ff      	movs	r6, #255	; 0xff
   13cf2:	469a      	mov	sl, r3
   13cf4:	e7da      	b.n	13cac <__aeabi_fmul+0x30>
   13cf6:	4641      	mov	r1, r8
   13cf8:	2a02      	cmp	r2, #2
   13cfa:	d028      	beq.n	13d4e <__aeabi_fmul+0xd2>
   13cfc:	2a03      	cmp	r2, #3
   13cfe:	d100      	bne.n	13d02 <__aeabi_fmul+0x86>
   13d00:	e0ce      	b.n	13ea0 <__aeabi_fmul+0x224>
   13d02:	2a01      	cmp	r2, #1
   13d04:	d000      	beq.n	13d08 <__aeabi_fmul+0x8c>
   13d06:	e0ac      	b.n	13e62 <__aeabi_fmul+0x1e6>
   13d08:	4011      	ands	r1, r2
   13d0a:	2000      	movs	r0, #0
   13d0c:	2200      	movs	r2, #0
   13d0e:	b2cc      	uxtb	r4, r1
   13d10:	0240      	lsls	r0, r0, #9
   13d12:	05d2      	lsls	r2, r2, #23
   13d14:	0a40      	lsrs	r0, r0, #9
   13d16:	07e4      	lsls	r4, r4, #31
   13d18:	4310      	orrs	r0, r2
   13d1a:	4320      	orrs	r0, r4
   13d1c:	bc3c      	pop	{r2, r3, r4, r5}
   13d1e:	4690      	mov	r8, r2
   13d20:	4699      	mov	r9, r3
   13d22:	46a2      	mov	sl, r4
   13d24:	46ab      	mov	fp, r5
   13d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13d28:	2f00      	cmp	r7, #0
   13d2a:	d115      	bne.n	13d58 <__aeabi_fmul+0xdc>
   13d2c:	2304      	movs	r3, #4
   13d2e:	4699      	mov	r9, r3
   13d30:	3b03      	subs	r3, #3
   13d32:	2600      	movs	r6, #0
   13d34:	469a      	mov	sl, r3
   13d36:	e7b9      	b.n	13cac <__aeabi_fmul+0x30>
   13d38:	20ff      	movs	r0, #255	; 0xff
   13d3a:	2202      	movs	r2, #2
   13d3c:	2d00      	cmp	r5, #0
   13d3e:	d0c5      	beq.n	13ccc <__aeabi_fmul+0x50>
   13d40:	2203      	movs	r2, #3
   13d42:	e7c3      	b.n	13ccc <__aeabi_fmul+0x50>
   13d44:	2d00      	cmp	r5, #0
   13d46:	d119      	bne.n	13d7c <__aeabi_fmul+0x100>
   13d48:	2000      	movs	r0, #0
   13d4a:	2201      	movs	r2, #1
   13d4c:	e7be      	b.n	13ccc <__aeabi_fmul+0x50>
   13d4e:	2401      	movs	r4, #1
   13d50:	22ff      	movs	r2, #255	; 0xff
   13d52:	400c      	ands	r4, r1
   13d54:	2000      	movs	r0, #0
   13d56:	e7db      	b.n	13d10 <__aeabi_fmul+0x94>
   13d58:	0038      	movs	r0, r7
   13d5a:	f002 f965 	bl	16028 <__clzsi2>
   13d5e:	2676      	movs	r6, #118	; 0x76
   13d60:	1f43      	subs	r3, r0, #5
   13d62:	409f      	lsls	r7, r3
   13d64:	2300      	movs	r3, #0
   13d66:	4276      	negs	r6, r6
   13d68:	1a36      	subs	r6, r6, r0
   13d6a:	4699      	mov	r9, r3
   13d6c:	469a      	mov	sl, r3
   13d6e:	e79d      	b.n	13cac <__aeabi_fmul+0x30>
   13d70:	230c      	movs	r3, #12
   13d72:	4699      	mov	r9, r3
   13d74:	3b09      	subs	r3, #9
   13d76:	26ff      	movs	r6, #255	; 0xff
   13d78:	469a      	mov	sl, r3
   13d7a:	e797      	b.n	13cac <__aeabi_fmul+0x30>
   13d7c:	0028      	movs	r0, r5
   13d7e:	f002 f953 	bl	16028 <__clzsi2>
   13d82:	1f43      	subs	r3, r0, #5
   13d84:	409d      	lsls	r5, r3
   13d86:	2376      	movs	r3, #118	; 0x76
   13d88:	425b      	negs	r3, r3
   13d8a:	1a18      	subs	r0, r3, r0
   13d8c:	2200      	movs	r2, #0
   13d8e:	e79d      	b.n	13ccc <__aeabi_fmul+0x50>
   13d90:	2080      	movs	r0, #128	; 0x80
   13d92:	2400      	movs	r4, #0
   13d94:	03c0      	lsls	r0, r0, #15
   13d96:	22ff      	movs	r2, #255	; 0xff
   13d98:	e7ba      	b.n	13d10 <__aeabi_fmul+0x94>
   13d9a:	003d      	movs	r5, r7
   13d9c:	4652      	mov	r2, sl
   13d9e:	e7ab      	b.n	13cf8 <__aeabi_fmul+0x7c>
   13da0:	003d      	movs	r5, r7
   13da2:	0021      	movs	r1, r4
   13da4:	4652      	mov	r2, sl
   13da6:	e7a7      	b.n	13cf8 <__aeabi_fmul+0x7c>
   13da8:	0c3b      	lsrs	r3, r7, #16
   13daa:	469c      	mov	ip, r3
   13dac:	042a      	lsls	r2, r5, #16
   13dae:	0c12      	lsrs	r2, r2, #16
   13db0:	0c2b      	lsrs	r3, r5, #16
   13db2:	0014      	movs	r4, r2
   13db4:	4660      	mov	r0, ip
   13db6:	4665      	mov	r5, ip
   13db8:	043f      	lsls	r7, r7, #16
   13dba:	0c3f      	lsrs	r7, r7, #16
   13dbc:	437c      	muls	r4, r7
   13dbe:	4342      	muls	r2, r0
   13dc0:	435d      	muls	r5, r3
   13dc2:	437b      	muls	r3, r7
   13dc4:	0c27      	lsrs	r7, r4, #16
   13dc6:	189b      	adds	r3, r3, r2
   13dc8:	18ff      	adds	r7, r7, r3
   13dca:	42ba      	cmp	r2, r7
   13dcc:	d903      	bls.n	13dd6 <__aeabi_fmul+0x15a>
   13dce:	2380      	movs	r3, #128	; 0x80
   13dd0:	025b      	lsls	r3, r3, #9
   13dd2:	469c      	mov	ip, r3
   13dd4:	4465      	add	r5, ip
   13dd6:	0424      	lsls	r4, r4, #16
   13dd8:	043a      	lsls	r2, r7, #16
   13dda:	0c24      	lsrs	r4, r4, #16
   13ddc:	1912      	adds	r2, r2, r4
   13dde:	0193      	lsls	r3, r2, #6
   13de0:	1e5c      	subs	r4, r3, #1
   13de2:	41a3      	sbcs	r3, r4
   13de4:	0c3f      	lsrs	r7, r7, #16
   13de6:	0e92      	lsrs	r2, r2, #26
   13de8:	197d      	adds	r5, r7, r5
   13dea:	431a      	orrs	r2, r3
   13dec:	01ad      	lsls	r5, r5, #6
   13dee:	4315      	orrs	r5, r2
   13df0:	012b      	lsls	r3, r5, #4
   13df2:	d504      	bpl.n	13dfe <__aeabi_fmul+0x182>
   13df4:	2301      	movs	r3, #1
   13df6:	465e      	mov	r6, fp
   13df8:	086a      	lsrs	r2, r5, #1
   13dfa:	401d      	ands	r5, r3
   13dfc:	4315      	orrs	r5, r2
   13dfe:	0032      	movs	r2, r6
   13e00:	327f      	adds	r2, #127	; 0x7f
   13e02:	2a00      	cmp	r2, #0
   13e04:	dd25      	ble.n	13e52 <__aeabi_fmul+0x1d6>
   13e06:	076b      	lsls	r3, r5, #29
   13e08:	d004      	beq.n	13e14 <__aeabi_fmul+0x198>
   13e0a:	230f      	movs	r3, #15
   13e0c:	402b      	ands	r3, r5
   13e0e:	2b04      	cmp	r3, #4
   13e10:	d000      	beq.n	13e14 <__aeabi_fmul+0x198>
   13e12:	3504      	adds	r5, #4
   13e14:	012b      	lsls	r3, r5, #4
   13e16:	d503      	bpl.n	13e20 <__aeabi_fmul+0x1a4>
   13e18:	0032      	movs	r2, r6
   13e1a:	4b27      	ldr	r3, [pc, #156]	; (13eb8 <__aeabi_fmul+0x23c>)
   13e1c:	3280      	adds	r2, #128	; 0x80
   13e1e:	401d      	ands	r5, r3
   13e20:	2afe      	cmp	r2, #254	; 0xfe
   13e22:	dc94      	bgt.n	13d4e <__aeabi_fmul+0xd2>
   13e24:	2401      	movs	r4, #1
   13e26:	01a8      	lsls	r0, r5, #6
   13e28:	0a40      	lsrs	r0, r0, #9
   13e2a:	b2d2      	uxtb	r2, r2
   13e2c:	400c      	ands	r4, r1
   13e2e:	e76f      	b.n	13d10 <__aeabi_fmul+0x94>
   13e30:	2080      	movs	r0, #128	; 0x80
   13e32:	03c0      	lsls	r0, r0, #15
   13e34:	4207      	tst	r7, r0
   13e36:	d007      	beq.n	13e48 <__aeabi_fmul+0x1cc>
   13e38:	4205      	tst	r5, r0
   13e3a:	d105      	bne.n	13e48 <__aeabi_fmul+0x1cc>
   13e3c:	4328      	orrs	r0, r5
   13e3e:	0240      	lsls	r0, r0, #9
   13e40:	0a40      	lsrs	r0, r0, #9
   13e42:	4644      	mov	r4, r8
   13e44:	22ff      	movs	r2, #255	; 0xff
   13e46:	e763      	b.n	13d10 <__aeabi_fmul+0x94>
   13e48:	4338      	orrs	r0, r7
   13e4a:	0240      	lsls	r0, r0, #9
   13e4c:	0a40      	lsrs	r0, r0, #9
   13e4e:	22ff      	movs	r2, #255	; 0xff
   13e50:	e75e      	b.n	13d10 <__aeabi_fmul+0x94>
   13e52:	2401      	movs	r4, #1
   13e54:	1aa3      	subs	r3, r4, r2
   13e56:	2b1b      	cmp	r3, #27
   13e58:	dd05      	ble.n	13e66 <__aeabi_fmul+0x1ea>
   13e5a:	400c      	ands	r4, r1
   13e5c:	2200      	movs	r2, #0
   13e5e:	2000      	movs	r0, #0
   13e60:	e756      	b.n	13d10 <__aeabi_fmul+0x94>
   13e62:	465e      	mov	r6, fp
   13e64:	e7cb      	b.n	13dfe <__aeabi_fmul+0x182>
   13e66:	002a      	movs	r2, r5
   13e68:	2020      	movs	r0, #32
   13e6a:	40da      	lsrs	r2, r3
   13e6c:	1ac3      	subs	r3, r0, r3
   13e6e:	409d      	lsls	r5, r3
   13e70:	002b      	movs	r3, r5
   13e72:	1e5d      	subs	r5, r3, #1
   13e74:	41ab      	sbcs	r3, r5
   13e76:	4313      	orrs	r3, r2
   13e78:	075a      	lsls	r2, r3, #29
   13e7a:	d004      	beq.n	13e86 <__aeabi_fmul+0x20a>
   13e7c:	220f      	movs	r2, #15
   13e7e:	401a      	ands	r2, r3
   13e80:	2a04      	cmp	r2, #4
   13e82:	d000      	beq.n	13e86 <__aeabi_fmul+0x20a>
   13e84:	3304      	adds	r3, #4
   13e86:	015a      	lsls	r2, r3, #5
   13e88:	d504      	bpl.n	13e94 <__aeabi_fmul+0x218>
   13e8a:	2401      	movs	r4, #1
   13e8c:	2201      	movs	r2, #1
   13e8e:	400c      	ands	r4, r1
   13e90:	2000      	movs	r0, #0
   13e92:	e73d      	b.n	13d10 <__aeabi_fmul+0x94>
   13e94:	2401      	movs	r4, #1
   13e96:	019b      	lsls	r3, r3, #6
   13e98:	0a58      	lsrs	r0, r3, #9
   13e9a:	400c      	ands	r4, r1
   13e9c:	2200      	movs	r2, #0
   13e9e:	e737      	b.n	13d10 <__aeabi_fmul+0x94>
   13ea0:	2080      	movs	r0, #128	; 0x80
   13ea2:	2401      	movs	r4, #1
   13ea4:	03c0      	lsls	r0, r0, #15
   13ea6:	4328      	orrs	r0, r5
   13ea8:	0240      	lsls	r0, r0, #9
   13eaa:	0a40      	lsrs	r0, r0, #9
   13eac:	400c      	ands	r4, r1
   13eae:	22ff      	movs	r2, #255	; 0xff
   13eb0:	e72e      	b.n	13d10 <__aeabi_fmul+0x94>
   13eb2:	46c0      	nop			; (mov r8, r8)
   13eb4:	000183b4 	.word	0x000183b4
   13eb8:	f7ffffff 	.word	0xf7ffffff

00013ebc <__aeabi_fsub>:
   13ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
   13ebe:	464f      	mov	r7, r9
   13ec0:	46d6      	mov	lr, sl
   13ec2:	4646      	mov	r6, r8
   13ec4:	0044      	lsls	r4, r0, #1
   13ec6:	b5c0      	push	{r6, r7, lr}
   13ec8:	0fc2      	lsrs	r2, r0, #31
   13eca:	0247      	lsls	r7, r0, #9
   13ecc:	0248      	lsls	r0, r1, #9
   13ece:	0a40      	lsrs	r0, r0, #9
   13ed0:	4684      	mov	ip, r0
   13ed2:	4666      	mov	r6, ip
   13ed4:	0a7b      	lsrs	r3, r7, #9
   13ed6:	0048      	lsls	r0, r1, #1
   13ed8:	0fc9      	lsrs	r1, r1, #31
   13eda:	469a      	mov	sl, r3
   13edc:	0e24      	lsrs	r4, r4, #24
   13ede:	0015      	movs	r5, r2
   13ee0:	00db      	lsls	r3, r3, #3
   13ee2:	0e00      	lsrs	r0, r0, #24
   13ee4:	4689      	mov	r9, r1
   13ee6:	00f6      	lsls	r6, r6, #3
   13ee8:	28ff      	cmp	r0, #255	; 0xff
   13eea:	d100      	bne.n	13eee <__aeabi_fsub+0x32>
   13eec:	e08f      	b.n	1400e <__aeabi_fsub+0x152>
   13eee:	2101      	movs	r1, #1
   13ef0:	464f      	mov	r7, r9
   13ef2:	404f      	eors	r7, r1
   13ef4:	0039      	movs	r1, r7
   13ef6:	4291      	cmp	r1, r2
   13ef8:	d066      	beq.n	13fc8 <__aeabi_fsub+0x10c>
   13efa:	1a22      	subs	r2, r4, r0
   13efc:	2a00      	cmp	r2, #0
   13efe:	dc00      	bgt.n	13f02 <__aeabi_fsub+0x46>
   13f00:	e09d      	b.n	1403e <__aeabi_fsub+0x182>
   13f02:	2800      	cmp	r0, #0
   13f04:	d13d      	bne.n	13f82 <__aeabi_fsub+0xc6>
   13f06:	2e00      	cmp	r6, #0
   13f08:	d100      	bne.n	13f0c <__aeabi_fsub+0x50>
   13f0a:	e08b      	b.n	14024 <__aeabi_fsub+0x168>
   13f0c:	1e51      	subs	r1, r2, #1
   13f0e:	2900      	cmp	r1, #0
   13f10:	d000      	beq.n	13f14 <__aeabi_fsub+0x58>
   13f12:	e0b5      	b.n	14080 <__aeabi_fsub+0x1c4>
   13f14:	2401      	movs	r4, #1
   13f16:	1b9b      	subs	r3, r3, r6
   13f18:	015a      	lsls	r2, r3, #5
   13f1a:	d544      	bpl.n	13fa6 <__aeabi_fsub+0xea>
   13f1c:	019b      	lsls	r3, r3, #6
   13f1e:	099f      	lsrs	r7, r3, #6
   13f20:	0038      	movs	r0, r7
   13f22:	f002 f881 	bl	16028 <__clzsi2>
   13f26:	3805      	subs	r0, #5
   13f28:	4087      	lsls	r7, r0
   13f2a:	4284      	cmp	r4, r0
   13f2c:	dd00      	ble.n	13f30 <__aeabi_fsub+0x74>
   13f2e:	e096      	b.n	1405e <__aeabi_fsub+0x1a2>
   13f30:	1b04      	subs	r4, r0, r4
   13f32:	003a      	movs	r2, r7
   13f34:	2020      	movs	r0, #32
   13f36:	3401      	adds	r4, #1
   13f38:	40e2      	lsrs	r2, r4
   13f3a:	1b04      	subs	r4, r0, r4
   13f3c:	40a7      	lsls	r7, r4
   13f3e:	003b      	movs	r3, r7
   13f40:	1e5f      	subs	r7, r3, #1
   13f42:	41bb      	sbcs	r3, r7
   13f44:	2400      	movs	r4, #0
   13f46:	4313      	orrs	r3, r2
   13f48:	075a      	lsls	r2, r3, #29
   13f4a:	d004      	beq.n	13f56 <__aeabi_fsub+0x9a>
   13f4c:	220f      	movs	r2, #15
   13f4e:	401a      	ands	r2, r3
   13f50:	2a04      	cmp	r2, #4
   13f52:	d000      	beq.n	13f56 <__aeabi_fsub+0x9a>
   13f54:	3304      	adds	r3, #4
   13f56:	015a      	lsls	r2, r3, #5
   13f58:	d527      	bpl.n	13faa <__aeabi_fsub+0xee>
   13f5a:	3401      	adds	r4, #1
   13f5c:	2cff      	cmp	r4, #255	; 0xff
   13f5e:	d100      	bne.n	13f62 <__aeabi_fsub+0xa6>
   13f60:	e079      	b.n	14056 <__aeabi_fsub+0x19a>
   13f62:	2201      	movs	r2, #1
   13f64:	019b      	lsls	r3, r3, #6
   13f66:	0a5b      	lsrs	r3, r3, #9
   13f68:	b2e4      	uxtb	r4, r4
   13f6a:	402a      	ands	r2, r5
   13f6c:	025b      	lsls	r3, r3, #9
   13f6e:	05e4      	lsls	r4, r4, #23
   13f70:	0a58      	lsrs	r0, r3, #9
   13f72:	07d2      	lsls	r2, r2, #31
   13f74:	4320      	orrs	r0, r4
   13f76:	4310      	orrs	r0, r2
   13f78:	bc1c      	pop	{r2, r3, r4}
   13f7a:	4690      	mov	r8, r2
   13f7c:	4699      	mov	r9, r3
   13f7e:	46a2      	mov	sl, r4
   13f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13f82:	2cff      	cmp	r4, #255	; 0xff
   13f84:	d0e0      	beq.n	13f48 <__aeabi_fsub+0x8c>
   13f86:	2180      	movs	r1, #128	; 0x80
   13f88:	04c9      	lsls	r1, r1, #19
   13f8a:	430e      	orrs	r6, r1
   13f8c:	2a1b      	cmp	r2, #27
   13f8e:	dc7b      	bgt.n	14088 <__aeabi_fsub+0x1cc>
   13f90:	0031      	movs	r1, r6
   13f92:	2020      	movs	r0, #32
   13f94:	40d1      	lsrs	r1, r2
   13f96:	1a82      	subs	r2, r0, r2
   13f98:	4096      	lsls	r6, r2
   13f9a:	1e72      	subs	r2, r6, #1
   13f9c:	4196      	sbcs	r6, r2
   13f9e:	430e      	orrs	r6, r1
   13fa0:	1b9b      	subs	r3, r3, r6
   13fa2:	015a      	lsls	r2, r3, #5
   13fa4:	d4ba      	bmi.n	13f1c <__aeabi_fsub+0x60>
   13fa6:	075a      	lsls	r2, r3, #29
   13fa8:	d1d0      	bne.n	13f4c <__aeabi_fsub+0x90>
   13faa:	2201      	movs	r2, #1
   13fac:	08df      	lsrs	r7, r3, #3
   13fae:	402a      	ands	r2, r5
   13fb0:	2cff      	cmp	r4, #255	; 0xff
   13fb2:	d133      	bne.n	1401c <__aeabi_fsub+0x160>
   13fb4:	2f00      	cmp	r7, #0
   13fb6:	d100      	bne.n	13fba <__aeabi_fsub+0xfe>
   13fb8:	e0a8      	b.n	1410c <__aeabi_fsub+0x250>
   13fba:	2380      	movs	r3, #128	; 0x80
   13fbc:	03db      	lsls	r3, r3, #15
   13fbe:	433b      	orrs	r3, r7
   13fc0:	025b      	lsls	r3, r3, #9
   13fc2:	0a5b      	lsrs	r3, r3, #9
   13fc4:	24ff      	movs	r4, #255	; 0xff
   13fc6:	e7d1      	b.n	13f6c <__aeabi_fsub+0xb0>
   13fc8:	1a21      	subs	r1, r4, r0
   13fca:	2900      	cmp	r1, #0
   13fcc:	dd4c      	ble.n	14068 <__aeabi_fsub+0x1ac>
   13fce:	2800      	cmp	r0, #0
   13fd0:	d02a      	beq.n	14028 <__aeabi_fsub+0x16c>
   13fd2:	2cff      	cmp	r4, #255	; 0xff
   13fd4:	d0b8      	beq.n	13f48 <__aeabi_fsub+0x8c>
   13fd6:	2080      	movs	r0, #128	; 0x80
   13fd8:	04c0      	lsls	r0, r0, #19
   13fda:	4306      	orrs	r6, r0
   13fdc:	291b      	cmp	r1, #27
   13fde:	dd00      	ble.n	13fe2 <__aeabi_fsub+0x126>
   13fe0:	e0af      	b.n	14142 <__aeabi_fsub+0x286>
   13fe2:	0030      	movs	r0, r6
   13fe4:	2720      	movs	r7, #32
   13fe6:	40c8      	lsrs	r0, r1
   13fe8:	1a79      	subs	r1, r7, r1
   13fea:	408e      	lsls	r6, r1
   13fec:	1e71      	subs	r1, r6, #1
   13fee:	418e      	sbcs	r6, r1
   13ff0:	4306      	orrs	r6, r0
   13ff2:	199b      	adds	r3, r3, r6
   13ff4:	0159      	lsls	r1, r3, #5
   13ff6:	d5d6      	bpl.n	13fa6 <__aeabi_fsub+0xea>
   13ff8:	3401      	adds	r4, #1
   13ffa:	2cff      	cmp	r4, #255	; 0xff
   13ffc:	d100      	bne.n	14000 <__aeabi_fsub+0x144>
   13ffe:	e085      	b.n	1410c <__aeabi_fsub+0x250>
   14000:	2201      	movs	r2, #1
   14002:	497a      	ldr	r1, [pc, #488]	; (141ec <__aeabi_fsub+0x330>)
   14004:	401a      	ands	r2, r3
   14006:	085b      	lsrs	r3, r3, #1
   14008:	400b      	ands	r3, r1
   1400a:	4313      	orrs	r3, r2
   1400c:	e79c      	b.n	13f48 <__aeabi_fsub+0x8c>
   1400e:	2e00      	cmp	r6, #0
   14010:	d000      	beq.n	14014 <__aeabi_fsub+0x158>
   14012:	e770      	b.n	13ef6 <__aeabi_fsub+0x3a>
   14014:	e76b      	b.n	13eee <__aeabi_fsub+0x32>
   14016:	1e3b      	subs	r3, r7, #0
   14018:	d1c5      	bne.n	13fa6 <__aeabi_fsub+0xea>
   1401a:	2200      	movs	r2, #0
   1401c:	027b      	lsls	r3, r7, #9
   1401e:	0a5b      	lsrs	r3, r3, #9
   14020:	b2e4      	uxtb	r4, r4
   14022:	e7a3      	b.n	13f6c <__aeabi_fsub+0xb0>
   14024:	0014      	movs	r4, r2
   14026:	e78f      	b.n	13f48 <__aeabi_fsub+0x8c>
   14028:	2e00      	cmp	r6, #0
   1402a:	d04d      	beq.n	140c8 <__aeabi_fsub+0x20c>
   1402c:	1e48      	subs	r0, r1, #1
   1402e:	2800      	cmp	r0, #0
   14030:	d157      	bne.n	140e2 <__aeabi_fsub+0x226>
   14032:	199b      	adds	r3, r3, r6
   14034:	2401      	movs	r4, #1
   14036:	015a      	lsls	r2, r3, #5
   14038:	d5b5      	bpl.n	13fa6 <__aeabi_fsub+0xea>
   1403a:	2402      	movs	r4, #2
   1403c:	e7e0      	b.n	14000 <__aeabi_fsub+0x144>
   1403e:	2a00      	cmp	r2, #0
   14040:	d125      	bne.n	1408e <__aeabi_fsub+0x1d2>
   14042:	1c62      	adds	r2, r4, #1
   14044:	b2d2      	uxtb	r2, r2
   14046:	2a01      	cmp	r2, #1
   14048:	dd72      	ble.n	14130 <__aeabi_fsub+0x274>
   1404a:	1b9f      	subs	r7, r3, r6
   1404c:	017a      	lsls	r2, r7, #5
   1404e:	d535      	bpl.n	140bc <__aeabi_fsub+0x200>
   14050:	1af7      	subs	r7, r6, r3
   14052:	000d      	movs	r5, r1
   14054:	e764      	b.n	13f20 <__aeabi_fsub+0x64>
   14056:	2201      	movs	r2, #1
   14058:	2300      	movs	r3, #0
   1405a:	402a      	ands	r2, r5
   1405c:	e786      	b.n	13f6c <__aeabi_fsub+0xb0>
   1405e:	003b      	movs	r3, r7
   14060:	4a63      	ldr	r2, [pc, #396]	; (141f0 <__aeabi_fsub+0x334>)
   14062:	1a24      	subs	r4, r4, r0
   14064:	4013      	ands	r3, r2
   14066:	e76f      	b.n	13f48 <__aeabi_fsub+0x8c>
   14068:	2900      	cmp	r1, #0
   1406a:	d16c      	bne.n	14146 <__aeabi_fsub+0x28a>
   1406c:	1c61      	adds	r1, r4, #1
   1406e:	b2c8      	uxtb	r0, r1
   14070:	2801      	cmp	r0, #1
   14072:	dd4e      	ble.n	14112 <__aeabi_fsub+0x256>
   14074:	29ff      	cmp	r1, #255	; 0xff
   14076:	d049      	beq.n	1410c <__aeabi_fsub+0x250>
   14078:	199b      	adds	r3, r3, r6
   1407a:	085b      	lsrs	r3, r3, #1
   1407c:	000c      	movs	r4, r1
   1407e:	e763      	b.n	13f48 <__aeabi_fsub+0x8c>
   14080:	2aff      	cmp	r2, #255	; 0xff
   14082:	d041      	beq.n	14108 <__aeabi_fsub+0x24c>
   14084:	000a      	movs	r2, r1
   14086:	e781      	b.n	13f8c <__aeabi_fsub+0xd0>
   14088:	2601      	movs	r6, #1
   1408a:	1b9b      	subs	r3, r3, r6
   1408c:	e789      	b.n	13fa2 <__aeabi_fsub+0xe6>
   1408e:	2c00      	cmp	r4, #0
   14090:	d01c      	beq.n	140cc <__aeabi_fsub+0x210>
   14092:	28ff      	cmp	r0, #255	; 0xff
   14094:	d021      	beq.n	140da <__aeabi_fsub+0x21e>
   14096:	2480      	movs	r4, #128	; 0x80
   14098:	04e4      	lsls	r4, r4, #19
   1409a:	4252      	negs	r2, r2
   1409c:	4323      	orrs	r3, r4
   1409e:	2a1b      	cmp	r2, #27
   140a0:	dd00      	ble.n	140a4 <__aeabi_fsub+0x1e8>
   140a2:	e096      	b.n	141d2 <__aeabi_fsub+0x316>
   140a4:	001c      	movs	r4, r3
   140a6:	2520      	movs	r5, #32
   140a8:	40d4      	lsrs	r4, r2
   140aa:	1aaa      	subs	r2, r5, r2
   140ac:	4093      	lsls	r3, r2
   140ae:	1e5a      	subs	r2, r3, #1
   140b0:	4193      	sbcs	r3, r2
   140b2:	4323      	orrs	r3, r4
   140b4:	1af3      	subs	r3, r6, r3
   140b6:	0004      	movs	r4, r0
   140b8:	000d      	movs	r5, r1
   140ba:	e72d      	b.n	13f18 <__aeabi_fsub+0x5c>
   140bc:	2f00      	cmp	r7, #0
   140be:	d000      	beq.n	140c2 <__aeabi_fsub+0x206>
   140c0:	e72e      	b.n	13f20 <__aeabi_fsub+0x64>
   140c2:	2200      	movs	r2, #0
   140c4:	2400      	movs	r4, #0
   140c6:	e7a9      	b.n	1401c <__aeabi_fsub+0x160>
   140c8:	000c      	movs	r4, r1
   140ca:	e73d      	b.n	13f48 <__aeabi_fsub+0x8c>
   140cc:	2b00      	cmp	r3, #0
   140ce:	d058      	beq.n	14182 <__aeabi_fsub+0x2c6>
   140d0:	43d2      	mvns	r2, r2
   140d2:	2a00      	cmp	r2, #0
   140d4:	d0ee      	beq.n	140b4 <__aeabi_fsub+0x1f8>
   140d6:	28ff      	cmp	r0, #255	; 0xff
   140d8:	d1e1      	bne.n	1409e <__aeabi_fsub+0x1e2>
   140da:	0033      	movs	r3, r6
   140dc:	24ff      	movs	r4, #255	; 0xff
   140de:	000d      	movs	r5, r1
   140e0:	e732      	b.n	13f48 <__aeabi_fsub+0x8c>
   140e2:	29ff      	cmp	r1, #255	; 0xff
   140e4:	d010      	beq.n	14108 <__aeabi_fsub+0x24c>
   140e6:	0001      	movs	r1, r0
   140e8:	e778      	b.n	13fdc <__aeabi_fsub+0x120>
   140ea:	2b00      	cmp	r3, #0
   140ec:	d06e      	beq.n	141cc <__aeabi_fsub+0x310>
   140ee:	24ff      	movs	r4, #255	; 0xff
   140f0:	2e00      	cmp	r6, #0
   140f2:	d100      	bne.n	140f6 <__aeabi_fsub+0x23a>
   140f4:	e728      	b.n	13f48 <__aeabi_fsub+0x8c>
   140f6:	2280      	movs	r2, #128	; 0x80
   140f8:	4651      	mov	r1, sl
   140fa:	03d2      	lsls	r2, r2, #15
   140fc:	4211      	tst	r1, r2
   140fe:	d003      	beq.n	14108 <__aeabi_fsub+0x24c>
   14100:	4661      	mov	r1, ip
   14102:	4211      	tst	r1, r2
   14104:	d100      	bne.n	14108 <__aeabi_fsub+0x24c>
   14106:	0033      	movs	r3, r6
   14108:	24ff      	movs	r4, #255	; 0xff
   1410a:	e71d      	b.n	13f48 <__aeabi_fsub+0x8c>
   1410c:	24ff      	movs	r4, #255	; 0xff
   1410e:	2300      	movs	r3, #0
   14110:	e72c      	b.n	13f6c <__aeabi_fsub+0xb0>
   14112:	2c00      	cmp	r4, #0
   14114:	d1e9      	bne.n	140ea <__aeabi_fsub+0x22e>
   14116:	2b00      	cmp	r3, #0
   14118:	d063      	beq.n	141e2 <__aeabi_fsub+0x326>
   1411a:	2e00      	cmp	r6, #0
   1411c:	d100      	bne.n	14120 <__aeabi_fsub+0x264>
   1411e:	e713      	b.n	13f48 <__aeabi_fsub+0x8c>
   14120:	199b      	adds	r3, r3, r6
   14122:	015a      	lsls	r2, r3, #5
   14124:	d400      	bmi.n	14128 <__aeabi_fsub+0x26c>
   14126:	e73e      	b.n	13fa6 <__aeabi_fsub+0xea>
   14128:	4a31      	ldr	r2, [pc, #196]	; (141f0 <__aeabi_fsub+0x334>)
   1412a:	000c      	movs	r4, r1
   1412c:	4013      	ands	r3, r2
   1412e:	e70b      	b.n	13f48 <__aeabi_fsub+0x8c>
   14130:	2c00      	cmp	r4, #0
   14132:	d11e      	bne.n	14172 <__aeabi_fsub+0x2b6>
   14134:	2b00      	cmp	r3, #0
   14136:	d12f      	bne.n	14198 <__aeabi_fsub+0x2dc>
   14138:	2e00      	cmp	r6, #0
   1413a:	d04f      	beq.n	141dc <__aeabi_fsub+0x320>
   1413c:	0033      	movs	r3, r6
   1413e:	000d      	movs	r5, r1
   14140:	e702      	b.n	13f48 <__aeabi_fsub+0x8c>
   14142:	2601      	movs	r6, #1
   14144:	e755      	b.n	13ff2 <__aeabi_fsub+0x136>
   14146:	2c00      	cmp	r4, #0
   14148:	d11f      	bne.n	1418a <__aeabi_fsub+0x2ce>
   1414a:	2b00      	cmp	r3, #0
   1414c:	d043      	beq.n	141d6 <__aeabi_fsub+0x31a>
   1414e:	43c9      	mvns	r1, r1
   14150:	2900      	cmp	r1, #0
   14152:	d00b      	beq.n	1416c <__aeabi_fsub+0x2b0>
   14154:	28ff      	cmp	r0, #255	; 0xff
   14156:	d039      	beq.n	141cc <__aeabi_fsub+0x310>
   14158:	291b      	cmp	r1, #27
   1415a:	dc44      	bgt.n	141e6 <__aeabi_fsub+0x32a>
   1415c:	001c      	movs	r4, r3
   1415e:	2720      	movs	r7, #32
   14160:	40cc      	lsrs	r4, r1
   14162:	1a79      	subs	r1, r7, r1
   14164:	408b      	lsls	r3, r1
   14166:	1e59      	subs	r1, r3, #1
   14168:	418b      	sbcs	r3, r1
   1416a:	4323      	orrs	r3, r4
   1416c:	199b      	adds	r3, r3, r6
   1416e:	0004      	movs	r4, r0
   14170:	e740      	b.n	13ff4 <__aeabi_fsub+0x138>
   14172:	2b00      	cmp	r3, #0
   14174:	d11a      	bne.n	141ac <__aeabi_fsub+0x2f0>
   14176:	2e00      	cmp	r6, #0
   14178:	d124      	bne.n	141c4 <__aeabi_fsub+0x308>
   1417a:	2780      	movs	r7, #128	; 0x80
   1417c:	2200      	movs	r2, #0
   1417e:	03ff      	lsls	r7, r7, #15
   14180:	e71b      	b.n	13fba <__aeabi_fsub+0xfe>
   14182:	0033      	movs	r3, r6
   14184:	0004      	movs	r4, r0
   14186:	000d      	movs	r5, r1
   14188:	e6de      	b.n	13f48 <__aeabi_fsub+0x8c>
   1418a:	28ff      	cmp	r0, #255	; 0xff
   1418c:	d01e      	beq.n	141cc <__aeabi_fsub+0x310>
   1418e:	2480      	movs	r4, #128	; 0x80
   14190:	04e4      	lsls	r4, r4, #19
   14192:	4249      	negs	r1, r1
   14194:	4323      	orrs	r3, r4
   14196:	e7df      	b.n	14158 <__aeabi_fsub+0x29c>
   14198:	2e00      	cmp	r6, #0
   1419a:	d100      	bne.n	1419e <__aeabi_fsub+0x2e2>
   1419c:	e6d4      	b.n	13f48 <__aeabi_fsub+0x8c>
   1419e:	1b9f      	subs	r7, r3, r6
   141a0:	017a      	lsls	r2, r7, #5
   141a2:	d400      	bmi.n	141a6 <__aeabi_fsub+0x2ea>
   141a4:	e737      	b.n	14016 <__aeabi_fsub+0x15a>
   141a6:	1af3      	subs	r3, r6, r3
   141a8:	000d      	movs	r5, r1
   141aa:	e6cd      	b.n	13f48 <__aeabi_fsub+0x8c>
   141ac:	24ff      	movs	r4, #255	; 0xff
   141ae:	2e00      	cmp	r6, #0
   141b0:	d100      	bne.n	141b4 <__aeabi_fsub+0x2f8>
   141b2:	e6c9      	b.n	13f48 <__aeabi_fsub+0x8c>
   141b4:	2280      	movs	r2, #128	; 0x80
   141b6:	4650      	mov	r0, sl
   141b8:	03d2      	lsls	r2, r2, #15
   141ba:	4210      	tst	r0, r2
   141bc:	d0a4      	beq.n	14108 <__aeabi_fsub+0x24c>
   141be:	4660      	mov	r0, ip
   141c0:	4210      	tst	r0, r2
   141c2:	d1a1      	bne.n	14108 <__aeabi_fsub+0x24c>
   141c4:	0033      	movs	r3, r6
   141c6:	000d      	movs	r5, r1
   141c8:	24ff      	movs	r4, #255	; 0xff
   141ca:	e6bd      	b.n	13f48 <__aeabi_fsub+0x8c>
   141cc:	0033      	movs	r3, r6
   141ce:	24ff      	movs	r4, #255	; 0xff
   141d0:	e6ba      	b.n	13f48 <__aeabi_fsub+0x8c>
   141d2:	2301      	movs	r3, #1
   141d4:	e76e      	b.n	140b4 <__aeabi_fsub+0x1f8>
   141d6:	0033      	movs	r3, r6
   141d8:	0004      	movs	r4, r0
   141da:	e6b5      	b.n	13f48 <__aeabi_fsub+0x8c>
   141dc:	2700      	movs	r7, #0
   141de:	2200      	movs	r2, #0
   141e0:	e71c      	b.n	1401c <__aeabi_fsub+0x160>
   141e2:	0033      	movs	r3, r6
   141e4:	e6b0      	b.n	13f48 <__aeabi_fsub+0x8c>
   141e6:	2301      	movs	r3, #1
   141e8:	e7c0      	b.n	1416c <__aeabi_fsub+0x2b0>
   141ea:	46c0      	nop			; (mov r8, r8)
   141ec:	7dffffff 	.word	0x7dffffff
   141f0:	fbffffff 	.word	0xfbffffff

000141f4 <__aeabi_f2iz>:
   141f4:	0241      	lsls	r1, r0, #9
   141f6:	0043      	lsls	r3, r0, #1
   141f8:	0fc2      	lsrs	r2, r0, #31
   141fa:	0a49      	lsrs	r1, r1, #9
   141fc:	0e1b      	lsrs	r3, r3, #24
   141fe:	2000      	movs	r0, #0
   14200:	2b7e      	cmp	r3, #126	; 0x7e
   14202:	dd0d      	ble.n	14220 <__aeabi_f2iz+0x2c>
   14204:	2b9d      	cmp	r3, #157	; 0x9d
   14206:	dc0c      	bgt.n	14222 <__aeabi_f2iz+0x2e>
   14208:	2080      	movs	r0, #128	; 0x80
   1420a:	0400      	lsls	r0, r0, #16
   1420c:	4301      	orrs	r1, r0
   1420e:	2b95      	cmp	r3, #149	; 0x95
   14210:	dc0a      	bgt.n	14228 <__aeabi_f2iz+0x34>
   14212:	2096      	movs	r0, #150	; 0x96
   14214:	1ac3      	subs	r3, r0, r3
   14216:	40d9      	lsrs	r1, r3
   14218:	4248      	negs	r0, r1
   1421a:	2a00      	cmp	r2, #0
   1421c:	d100      	bne.n	14220 <__aeabi_f2iz+0x2c>
   1421e:	0008      	movs	r0, r1
   14220:	4770      	bx	lr
   14222:	4b03      	ldr	r3, [pc, #12]	; (14230 <__aeabi_f2iz+0x3c>)
   14224:	18d0      	adds	r0, r2, r3
   14226:	e7fb      	b.n	14220 <__aeabi_f2iz+0x2c>
   14228:	3b96      	subs	r3, #150	; 0x96
   1422a:	4099      	lsls	r1, r3
   1422c:	e7f4      	b.n	14218 <__aeabi_f2iz+0x24>
   1422e:	46c0      	nop			; (mov r8, r8)
   14230:	7fffffff 	.word	0x7fffffff

00014234 <__aeabi_i2f>:
   14234:	b570      	push	{r4, r5, r6, lr}
   14236:	2800      	cmp	r0, #0
   14238:	d030      	beq.n	1429c <__aeabi_i2f+0x68>
   1423a:	17c3      	asrs	r3, r0, #31
   1423c:	18c4      	adds	r4, r0, r3
   1423e:	405c      	eors	r4, r3
   14240:	0fc5      	lsrs	r5, r0, #31
   14242:	0020      	movs	r0, r4
   14244:	f001 fef0 	bl	16028 <__clzsi2>
   14248:	239e      	movs	r3, #158	; 0x9e
   1424a:	1a1b      	subs	r3, r3, r0
   1424c:	2b96      	cmp	r3, #150	; 0x96
   1424e:	dc0d      	bgt.n	1426c <__aeabi_i2f+0x38>
   14250:	2296      	movs	r2, #150	; 0x96
   14252:	1ad2      	subs	r2, r2, r3
   14254:	4094      	lsls	r4, r2
   14256:	002a      	movs	r2, r5
   14258:	0264      	lsls	r4, r4, #9
   1425a:	0a64      	lsrs	r4, r4, #9
   1425c:	b2db      	uxtb	r3, r3
   1425e:	0264      	lsls	r4, r4, #9
   14260:	05db      	lsls	r3, r3, #23
   14262:	0a60      	lsrs	r0, r4, #9
   14264:	07d2      	lsls	r2, r2, #31
   14266:	4318      	orrs	r0, r3
   14268:	4310      	orrs	r0, r2
   1426a:	bd70      	pop	{r4, r5, r6, pc}
   1426c:	2b99      	cmp	r3, #153	; 0x99
   1426e:	dc19      	bgt.n	142a4 <__aeabi_i2f+0x70>
   14270:	2299      	movs	r2, #153	; 0x99
   14272:	1ad2      	subs	r2, r2, r3
   14274:	2a00      	cmp	r2, #0
   14276:	dd29      	ble.n	142cc <__aeabi_i2f+0x98>
   14278:	4094      	lsls	r4, r2
   1427a:	0022      	movs	r2, r4
   1427c:	4c14      	ldr	r4, [pc, #80]	; (142d0 <__aeabi_i2f+0x9c>)
   1427e:	4014      	ands	r4, r2
   14280:	0751      	lsls	r1, r2, #29
   14282:	d004      	beq.n	1428e <__aeabi_i2f+0x5a>
   14284:	210f      	movs	r1, #15
   14286:	400a      	ands	r2, r1
   14288:	2a04      	cmp	r2, #4
   1428a:	d000      	beq.n	1428e <__aeabi_i2f+0x5a>
   1428c:	3404      	adds	r4, #4
   1428e:	0162      	lsls	r2, r4, #5
   14290:	d413      	bmi.n	142ba <__aeabi_i2f+0x86>
   14292:	01a4      	lsls	r4, r4, #6
   14294:	0a64      	lsrs	r4, r4, #9
   14296:	b2db      	uxtb	r3, r3
   14298:	002a      	movs	r2, r5
   1429a:	e7e0      	b.n	1425e <__aeabi_i2f+0x2a>
   1429c:	2200      	movs	r2, #0
   1429e:	2300      	movs	r3, #0
   142a0:	2400      	movs	r4, #0
   142a2:	e7dc      	b.n	1425e <__aeabi_i2f+0x2a>
   142a4:	2205      	movs	r2, #5
   142a6:	0021      	movs	r1, r4
   142a8:	1a12      	subs	r2, r2, r0
   142aa:	40d1      	lsrs	r1, r2
   142ac:	22b9      	movs	r2, #185	; 0xb9
   142ae:	1ad2      	subs	r2, r2, r3
   142b0:	4094      	lsls	r4, r2
   142b2:	1e62      	subs	r2, r4, #1
   142b4:	4194      	sbcs	r4, r2
   142b6:	430c      	orrs	r4, r1
   142b8:	e7da      	b.n	14270 <__aeabi_i2f+0x3c>
   142ba:	4b05      	ldr	r3, [pc, #20]	; (142d0 <__aeabi_i2f+0x9c>)
   142bc:	002a      	movs	r2, r5
   142be:	401c      	ands	r4, r3
   142c0:	239f      	movs	r3, #159	; 0x9f
   142c2:	01a4      	lsls	r4, r4, #6
   142c4:	1a1b      	subs	r3, r3, r0
   142c6:	0a64      	lsrs	r4, r4, #9
   142c8:	b2db      	uxtb	r3, r3
   142ca:	e7c8      	b.n	1425e <__aeabi_i2f+0x2a>
   142cc:	0022      	movs	r2, r4
   142ce:	e7d5      	b.n	1427c <__aeabi_i2f+0x48>
   142d0:	fbffffff 	.word	0xfbffffff

000142d4 <__aeabi_ui2f>:
   142d4:	b510      	push	{r4, lr}
   142d6:	1e04      	subs	r4, r0, #0
   142d8:	d027      	beq.n	1432a <__aeabi_ui2f+0x56>
   142da:	f001 fea5 	bl	16028 <__clzsi2>
   142de:	239e      	movs	r3, #158	; 0x9e
   142e0:	1a1b      	subs	r3, r3, r0
   142e2:	2b96      	cmp	r3, #150	; 0x96
   142e4:	dc0a      	bgt.n	142fc <__aeabi_ui2f+0x28>
   142e6:	2296      	movs	r2, #150	; 0x96
   142e8:	1ad2      	subs	r2, r2, r3
   142ea:	4094      	lsls	r4, r2
   142ec:	0264      	lsls	r4, r4, #9
   142ee:	0a64      	lsrs	r4, r4, #9
   142f0:	b2db      	uxtb	r3, r3
   142f2:	0264      	lsls	r4, r4, #9
   142f4:	05db      	lsls	r3, r3, #23
   142f6:	0a60      	lsrs	r0, r4, #9
   142f8:	4318      	orrs	r0, r3
   142fa:	bd10      	pop	{r4, pc}
   142fc:	2b99      	cmp	r3, #153	; 0x99
   142fe:	dc17      	bgt.n	14330 <__aeabi_ui2f+0x5c>
   14300:	2299      	movs	r2, #153	; 0x99
   14302:	1ad2      	subs	r2, r2, r3
   14304:	2a00      	cmp	r2, #0
   14306:	dd27      	ble.n	14358 <__aeabi_ui2f+0x84>
   14308:	4094      	lsls	r4, r2
   1430a:	0022      	movs	r2, r4
   1430c:	4c13      	ldr	r4, [pc, #76]	; (1435c <__aeabi_ui2f+0x88>)
   1430e:	4014      	ands	r4, r2
   14310:	0751      	lsls	r1, r2, #29
   14312:	d004      	beq.n	1431e <__aeabi_ui2f+0x4a>
   14314:	210f      	movs	r1, #15
   14316:	400a      	ands	r2, r1
   14318:	2a04      	cmp	r2, #4
   1431a:	d000      	beq.n	1431e <__aeabi_ui2f+0x4a>
   1431c:	3404      	adds	r4, #4
   1431e:	0162      	lsls	r2, r4, #5
   14320:	d412      	bmi.n	14348 <__aeabi_ui2f+0x74>
   14322:	01a4      	lsls	r4, r4, #6
   14324:	0a64      	lsrs	r4, r4, #9
   14326:	b2db      	uxtb	r3, r3
   14328:	e7e3      	b.n	142f2 <__aeabi_ui2f+0x1e>
   1432a:	2300      	movs	r3, #0
   1432c:	2400      	movs	r4, #0
   1432e:	e7e0      	b.n	142f2 <__aeabi_ui2f+0x1e>
   14330:	22b9      	movs	r2, #185	; 0xb9
   14332:	0021      	movs	r1, r4
   14334:	1ad2      	subs	r2, r2, r3
   14336:	4091      	lsls	r1, r2
   14338:	000a      	movs	r2, r1
   1433a:	1e51      	subs	r1, r2, #1
   1433c:	418a      	sbcs	r2, r1
   1433e:	2105      	movs	r1, #5
   14340:	1a09      	subs	r1, r1, r0
   14342:	40cc      	lsrs	r4, r1
   14344:	4314      	orrs	r4, r2
   14346:	e7db      	b.n	14300 <__aeabi_ui2f+0x2c>
   14348:	4b04      	ldr	r3, [pc, #16]	; (1435c <__aeabi_ui2f+0x88>)
   1434a:	401c      	ands	r4, r3
   1434c:	239f      	movs	r3, #159	; 0x9f
   1434e:	01a4      	lsls	r4, r4, #6
   14350:	1a1b      	subs	r3, r3, r0
   14352:	0a64      	lsrs	r4, r4, #9
   14354:	b2db      	uxtb	r3, r3
   14356:	e7cc      	b.n	142f2 <__aeabi_ui2f+0x1e>
   14358:	0022      	movs	r2, r4
   1435a:	e7d7      	b.n	1430c <__aeabi_ui2f+0x38>
   1435c:	fbffffff 	.word	0xfbffffff

00014360 <__aeabi_dadd>:
   14360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14362:	4645      	mov	r5, r8
   14364:	46de      	mov	lr, fp
   14366:	4657      	mov	r7, sl
   14368:	464e      	mov	r6, r9
   1436a:	030c      	lsls	r4, r1, #12
   1436c:	b5e0      	push	{r5, r6, r7, lr}
   1436e:	004e      	lsls	r6, r1, #1
   14370:	0fc9      	lsrs	r1, r1, #31
   14372:	4688      	mov	r8, r1
   14374:	000d      	movs	r5, r1
   14376:	0a61      	lsrs	r1, r4, #9
   14378:	0f44      	lsrs	r4, r0, #29
   1437a:	430c      	orrs	r4, r1
   1437c:	00c7      	lsls	r7, r0, #3
   1437e:	0319      	lsls	r1, r3, #12
   14380:	0058      	lsls	r0, r3, #1
   14382:	0fdb      	lsrs	r3, r3, #31
   14384:	469b      	mov	fp, r3
   14386:	0a4b      	lsrs	r3, r1, #9
   14388:	0f51      	lsrs	r1, r2, #29
   1438a:	430b      	orrs	r3, r1
   1438c:	0d76      	lsrs	r6, r6, #21
   1438e:	0d40      	lsrs	r0, r0, #21
   14390:	0019      	movs	r1, r3
   14392:	00d2      	lsls	r2, r2, #3
   14394:	45d8      	cmp	r8, fp
   14396:	d100      	bne.n	1439a <__aeabi_dadd+0x3a>
   14398:	e0ae      	b.n	144f8 <__aeabi_dadd+0x198>
   1439a:	1a35      	subs	r5, r6, r0
   1439c:	2d00      	cmp	r5, #0
   1439e:	dc00      	bgt.n	143a2 <__aeabi_dadd+0x42>
   143a0:	e0f6      	b.n	14590 <__aeabi_dadd+0x230>
   143a2:	2800      	cmp	r0, #0
   143a4:	d10f      	bne.n	143c6 <__aeabi_dadd+0x66>
   143a6:	4313      	orrs	r3, r2
   143a8:	d100      	bne.n	143ac <__aeabi_dadd+0x4c>
   143aa:	e0db      	b.n	14564 <__aeabi_dadd+0x204>
   143ac:	1e6b      	subs	r3, r5, #1
   143ae:	2b00      	cmp	r3, #0
   143b0:	d000      	beq.n	143b4 <__aeabi_dadd+0x54>
   143b2:	e137      	b.n	14624 <__aeabi_dadd+0x2c4>
   143b4:	1aba      	subs	r2, r7, r2
   143b6:	4297      	cmp	r7, r2
   143b8:	41bf      	sbcs	r7, r7
   143ba:	1a64      	subs	r4, r4, r1
   143bc:	427f      	negs	r7, r7
   143be:	1be4      	subs	r4, r4, r7
   143c0:	2601      	movs	r6, #1
   143c2:	0017      	movs	r7, r2
   143c4:	e024      	b.n	14410 <__aeabi_dadd+0xb0>
   143c6:	4bc6      	ldr	r3, [pc, #792]	; (146e0 <__aeabi_dadd+0x380>)
   143c8:	429e      	cmp	r6, r3
   143ca:	d04d      	beq.n	14468 <__aeabi_dadd+0x108>
   143cc:	2380      	movs	r3, #128	; 0x80
   143ce:	041b      	lsls	r3, r3, #16
   143d0:	4319      	orrs	r1, r3
   143d2:	2d38      	cmp	r5, #56	; 0x38
   143d4:	dd00      	ble.n	143d8 <__aeabi_dadd+0x78>
   143d6:	e107      	b.n	145e8 <__aeabi_dadd+0x288>
   143d8:	2d1f      	cmp	r5, #31
   143da:	dd00      	ble.n	143de <__aeabi_dadd+0x7e>
   143dc:	e138      	b.n	14650 <__aeabi_dadd+0x2f0>
   143de:	2020      	movs	r0, #32
   143e0:	1b43      	subs	r3, r0, r5
   143e2:	469a      	mov	sl, r3
   143e4:	000b      	movs	r3, r1
   143e6:	4650      	mov	r0, sl
   143e8:	4083      	lsls	r3, r0
   143ea:	4699      	mov	r9, r3
   143ec:	0013      	movs	r3, r2
   143ee:	4648      	mov	r0, r9
   143f0:	40eb      	lsrs	r3, r5
   143f2:	4318      	orrs	r0, r3
   143f4:	0003      	movs	r3, r0
   143f6:	4650      	mov	r0, sl
   143f8:	4082      	lsls	r2, r0
   143fa:	1e50      	subs	r0, r2, #1
   143fc:	4182      	sbcs	r2, r0
   143fe:	40e9      	lsrs	r1, r5
   14400:	431a      	orrs	r2, r3
   14402:	1aba      	subs	r2, r7, r2
   14404:	1a61      	subs	r1, r4, r1
   14406:	4297      	cmp	r7, r2
   14408:	41a4      	sbcs	r4, r4
   1440a:	0017      	movs	r7, r2
   1440c:	4264      	negs	r4, r4
   1440e:	1b0c      	subs	r4, r1, r4
   14410:	0223      	lsls	r3, r4, #8
   14412:	d562      	bpl.n	144da <__aeabi_dadd+0x17a>
   14414:	0264      	lsls	r4, r4, #9
   14416:	0a65      	lsrs	r5, r4, #9
   14418:	2d00      	cmp	r5, #0
   1441a:	d100      	bne.n	1441e <__aeabi_dadd+0xbe>
   1441c:	e0df      	b.n	145de <__aeabi_dadd+0x27e>
   1441e:	0028      	movs	r0, r5
   14420:	f001 fe02 	bl	16028 <__clzsi2>
   14424:	0003      	movs	r3, r0
   14426:	3b08      	subs	r3, #8
   14428:	2b1f      	cmp	r3, #31
   1442a:	dd00      	ble.n	1442e <__aeabi_dadd+0xce>
   1442c:	e0d2      	b.n	145d4 <__aeabi_dadd+0x274>
   1442e:	2220      	movs	r2, #32
   14430:	003c      	movs	r4, r7
   14432:	1ad2      	subs	r2, r2, r3
   14434:	409d      	lsls	r5, r3
   14436:	40d4      	lsrs	r4, r2
   14438:	409f      	lsls	r7, r3
   1443a:	4325      	orrs	r5, r4
   1443c:	429e      	cmp	r6, r3
   1443e:	dd00      	ble.n	14442 <__aeabi_dadd+0xe2>
   14440:	e0c4      	b.n	145cc <__aeabi_dadd+0x26c>
   14442:	1b9e      	subs	r6, r3, r6
   14444:	1c73      	adds	r3, r6, #1
   14446:	2b1f      	cmp	r3, #31
   14448:	dd00      	ble.n	1444c <__aeabi_dadd+0xec>
   1444a:	e0f1      	b.n	14630 <__aeabi_dadd+0x2d0>
   1444c:	2220      	movs	r2, #32
   1444e:	0038      	movs	r0, r7
   14450:	0029      	movs	r1, r5
   14452:	1ad2      	subs	r2, r2, r3
   14454:	40d8      	lsrs	r0, r3
   14456:	4091      	lsls	r1, r2
   14458:	4097      	lsls	r7, r2
   1445a:	002c      	movs	r4, r5
   1445c:	4301      	orrs	r1, r0
   1445e:	1e78      	subs	r0, r7, #1
   14460:	4187      	sbcs	r7, r0
   14462:	40dc      	lsrs	r4, r3
   14464:	2600      	movs	r6, #0
   14466:	430f      	orrs	r7, r1
   14468:	077b      	lsls	r3, r7, #29
   1446a:	d009      	beq.n	14480 <__aeabi_dadd+0x120>
   1446c:	230f      	movs	r3, #15
   1446e:	403b      	ands	r3, r7
   14470:	2b04      	cmp	r3, #4
   14472:	d005      	beq.n	14480 <__aeabi_dadd+0x120>
   14474:	1d3b      	adds	r3, r7, #4
   14476:	42bb      	cmp	r3, r7
   14478:	41bf      	sbcs	r7, r7
   1447a:	427f      	negs	r7, r7
   1447c:	19e4      	adds	r4, r4, r7
   1447e:	001f      	movs	r7, r3
   14480:	0223      	lsls	r3, r4, #8
   14482:	d52c      	bpl.n	144de <__aeabi_dadd+0x17e>
   14484:	4b96      	ldr	r3, [pc, #600]	; (146e0 <__aeabi_dadd+0x380>)
   14486:	3601      	adds	r6, #1
   14488:	429e      	cmp	r6, r3
   1448a:	d100      	bne.n	1448e <__aeabi_dadd+0x12e>
   1448c:	e09a      	b.n	145c4 <__aeabi_dadd+0x264>
   1448e:	4645      	mov	r5, r8
   14490:	4b94      	ldr	r3, [pc, #592]	; (146e4 <__aeabi_dadd+0x384>)
   14492:	08ff      	lsrs	r7, r7, #3
   14494:	401c      	ands	r4, r3
   14496:	0760      	lsls	r0, r4, #29
   14498:	0576      	lsls	r6, r6, #21
   1449a:	0264      	lsls	r4, r4, #9
   1449c:	4307      	orrs	r7, r0
   1449e:	0b24      	lsrs	r4, r4, #12
   144a0:	0d76      	lsrs	r6, r6, #21
   144a2:	2100      	movs	r1, #0
   144a4:	0324      	lsls	r4, r4, #12
   144a6:	0b23      	lsrs	r3, r4, #12
   144a8:	0d0c      	lsrs	r4, r1, #20
   144aa:	4a8f      	ldr	r2, [pc, #572]	; (146e8 <__aeabi_dadd+0x388>)
   144ac:	0524      	lsls	r4, r4, #20
   144ae:	431c      	orrs	r4, r3
   144b0:	4014      	ands	r4, r2
   144b2:	0533      	lsls	r3, r6, #20
   144b4:	4323      	orrs	r3, r4
   144b6:	005b      	lsls	r3, r3, #1
   144b8:	07ed      	lsls	r5, r5, #31
   144ba:	085b      	lsrs	r3, r3, #1
   144bc:	432b      	orrs	r3, r5
   144be:	0038      	movs	r0, r7
   144c0:	0019      	movs	r1, r3
   144c2:	bc3c      	pop	{r2, r3, r4, r5}
   144c4:	4690      	mov	r8, r2
   144c6:	4699      	mov	r9, r3
   144c8:	46a2      	mov	sl, r4
   144ca:	46ab      	mov	fp, r5
   144cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   144ce:	4664      	mov	r4, ip
   144d0:	4304      	orrs	r4, r0
   144d2:	d100      	bne.n	144d6 <__aeabi_dadd+0x176>
   144d4:	e211      	b.n	148fa <__aeabi_dadd+0x59a>
   144d6:	0004      	movs	r4, r0
   144d8:	4667      	mov	r7, ip
   144da:	077b      	lsls	r3, r7, #29
   144dc:	d1c6      	bne.n	1446c <__aeabi_dadd+0x10c>
   144de:	4645      	mov	r5, r8
   144e0:	0760      	lsls	r0, r4, #29
   144e2:	08ff      	lsrs	r7, r7, #3
   144e4:	4307      	orrs	r7, r0
   144e6:	08e4      	lsrs	r4, r4, #3
   144e8:	4b7d      	ldr	r3, [pc, #500]	; (146e0 <__aeabi_dadd+0x380>)
   144ea:	429e      	cmp	r6, r3
   144ec:	d030      	beq.n	14550 <__aeabi_dadd+0x1f0>
   144ee:	0324      	lsls	r4, r4, #12
   144f0:	0576      	lsls	r6, r6, #21
   144f2:	0b24      	lsrs	r4, r4, #12
   144f4:	0d76      	lsrs	r6, r6, #21
   144f6:	e7d4      	b.n	144a2 <__aeabi_dadd+0x142>
   144f8:	1a33      	subs	r3, r6, r0
   144fa:	469a      	mov	sl, r3
   144fc:	2b00      	cmp	r3, #0
   144fe:	dd78      	ble.n	145f2 <__aeabi_dadd+0x292>
   14500:	2800      	cmp	r0, #0
   14502:	d031      	beq.n	14568 <__aeabi_dadd+0x208>
   14504:	4876      	ldr	r0, [pc, #472]	; (146e0 <__aeabi_dadd+0x380>)
   14506:	4286      	cmp	r6, r0
   14508:	d0ae      	beq.n	14468 <__aeabi_dadd+0x108>
   1450a:	2080      	movs	r0, #128	; 0x80
   1450c:	0400      	lsls	r0, r0, #16
   1450e:	4301      	orrs	r1, r0
   14510:	4653      	mov	r3, sl
   14512:	2b38      	cmp	r3, #56	; 0x38
   14514:	dc00      	bgt.n	14518 <__aeabi_dadd+0x1b8>
   14516:	e0e9      	b.n	146ec <__aeabi_dadd+0x38c>
   14518:	430a      	orrs	r2, r1
   1451a:	1e51      	subs	r1, r2, #1
   1451c:	418a      	sbcs	r2, r1
   1451e:	2100      	movs	r1, #0
   14520:	19d2      	adds	r2, r2, r7
   14522:	42ba      	cmp	r2, r7
   14524:	41bf      	sbcs	r7, r7
   14526:	1909      	adds	r1, r1, r4
   14528:	427c      	negs	r4, r7
   1452a:	0017      	movs	r7, r2
   1452c:	190c      	adds	r4, r1, r4
   1452e:	0223      	lsls	r3, r4, #8
   14530:	d5d3      	bpl.n	144da <__aeabi_dadd+0x17a>
   14532:	4b6b      	ldr	r3, [pc, #428]	; (146e0 <__aeabi_dadd+0x380>)
   14534:	3601      	adds	r6, #1
   14536:	429e      	cmp	r6, r3
   14538:	d100      	bne.n	1453c <__aeabi_dadd+0x1dc>
   1453a:	e13a      	b.n	147b2 <__aeabi_dadd+0x452>
   1453c:	2001      	movs	r0, #1
   1453e:	4b69      	ldr	r3, [pc, #420]	; (146e4 <__aeabi_dadd+0x384>)
   14540:	401c      	ands	r4, r3
   14542:	087b      	lsrs	r3, r7, #1
   14544:	4007      	ands	r7, r0
   14546:	431f      	orrs	r7, r3
   14548:	07e0      	lsls	r0, r4, #31
   1454a:	4307      	orrs	r7, r0
   1454c:	0864      	lsrs	r4, r4, #1
   1454e:	e78b      	b.n	14468 <__aeabi_dadd+0x108>
   14550:	0023      	movs	r3, r4
   14552:	433b      	orrs	r3, r7
   14554:	d100      	bne.n	14558 <__aeabi_dadd+0x1f8>
   14556:	e1cb      	b.n	148f0 <__aeabi_dadd+0x590>
   14558:	2280      	movs	r2, #128	; 0x80
   1455a:	0312      	lsls	r2, r2, #12
   1455c:	4314      	orrs	r4, r2
   1455e:	0324      	lsls	r4, r4, #12
   14560:	0b24      	lsrs	r4, r4, #12
   14562:	e79e      	b.n	144a2 <__aeabi_dadd+0x142>
   14564:	002e      	movs	r6, r5
   14566:	e77f      	b.n	14468 <__aeabi_dadd+0x108>
   14568:	0008      	movs	r0, r1
   1456a:	4310      	orrs	r0, r2
   1456c:	d100      	bne.n	14570 <__aeabi_dadd+0x210>
   1456e:	e0b4      	b.n	146da <__aeabi_dadd+0x37a>
   14570:	1e58      	subs	r0, r3, #1
   14572:	2800      	cmp	r0, #0
   14574:	d000      	beq.n	14578 <__aeabi_dadd+0x218>
   14576:	e0de      	b.n	14736 <__aeabi_dadd+0x3d6>
   14578:	18ba      	adds	r2, r7, r2
   1457a:	42ba      	cmp	r2, r7
   1457c:	419b      	sbcs	r3, r3
   1457e:	1864      	adds	r4, r4, r1
   14580:	425b      	negs	r3, r3
   14582:	18e4      	adds	r4, r4, r3
   14584:	0017      	movs	r7, r2
   14586:	2601      	movs	r6, #1
   14588:	0223      	lsls	r3, r4, #8
   1458a:	d5a6      	bpl.n	144da <__aeabi_dadd+0x17a>
   1458c:	2602      	movs	r6, #2
   1458e:	e7d5      	b.n	1453c <__aeabi_dadd+0x1dc>
   14590:	2d00      	cmp	r5, #0
   14592:	d16e      	bne.n	14672 <__aeabi_dadd+0x312>
   14594:	1c70      	adds	r0, r6, #1
   14596:	0540      	lsls	r0, r0, #21
   14598:	0d40      	lsrs	r0, r0, #21
   1459a:	2801      	cmp	r0, #1
   1459c:	dc00      	bgt.n	145a0 <__aeabi_dadd+0x240>
   1459e:	e0f9      	b.n	14794 <__aeabi_dadd+0x434>
   145a0:	1ab8      	subs	r0, r7, r2
   145a2:	4684      	mov	ip, r0
   145a4:	4287      	cmp	r7, r0
   145a6:	4180      	sbcs	r0, r0
   145a8:	1ae5      	subs	r5, r4, r3
   145aa:	4240      	negs	r0, r0
   145ac:	1a2d      	subs	r5, r5, r0
   145ae:	0228      	lsls	r0, r5, #8
   145b0:	d400      	bmi.n	145b4 <__aeabi_dadd+0x254>
   145b2:	e089      	b.n	146c8 <__aeabi_dadd+0x368>
   145b4:	1bd7      	subs	r7, r2, r7
   145b6:	42ba      	cmp	r2, r7
   145b8:	4192      	sbcs	r2, r2
   145ba:	1b1c      	subs	r4, r3, r4
   145bc:	4252      	negs	r2, r2
   145be:	1aa5      	subs	r5, r4, r2
   145c0:	46d8      	mov	r8, fp
   145c2:	e729      	b.n	14418 <__aeabi_dadd+0xb8>
   145c4:	4645      	mov	r5, r8
   145c6:	2400      	movs	r4, #0
   145c8:	2700      	movs	r7, #0
   145ca:	e76a      	b.n	144a2 <__aeabi_dadd+0x142>
   145cc:	4c45      	ldr	r4, [pc, #276]	; (146e4 <__aeabi_dadd+0x384>)
   145ce:	1af6      	subs	r6, r6, r3
   145d0:	402c      	ands	r4, r5
   145d2:	e749      	b.n	14468 <__aeabi_dadd+0x108>
   145d4:	003d      	movs	r5, r7
   145d6:	3828      	subs	r0, #40	; 0x28
   145d8:	4085      	lsls	r5, r0
   145da:	2700      	movs	r7, #0
   145dc:	e72e      	b.n	1443c <__aeabi_dadd+0xdc>
   145de:	0038      	movs	r0, r7
   145e0:	f001 fd22 	bl	16028 <__clzsi2>
   145e4:	3020      	adds	r0, #32
   145e6:	e71d      	b.n	14424 <__aeabi_dadd+0xc4>
   145e8:	430a      	orrs	r2, r1
   145ea:	1e51      	subs	r1, r2, #1
   145ec:	418a      	sbcs	r2, r1
   145ee:	2100      	movs	r1, #0
   145f0:	e707      	b.n	14402 <__aeabi_dadd+0xa2>
   145f2:	2b00      	cmp	r3, #0
   145f4:	d000      	beq.n	145f8 <__aeabi_dadd+0x298>
   145f6:	e0f3      	b.n	147e0 <__aeabi_dadd+0x480>
   145f8:	1c70      	adds	r0, r6, #1
   145fa:	0543      	lsls	r3, r0, #21
   145fc:	0d5b      	lsrs	r3, r3, #21
   145fe:	2b01      	cmp	r3, #1
   14600:	dc00      	bgt.n	14604 <__aeabi_dadd+0x2a4>
   14602:	e0ad      	b.n	14760 <__aeabi_dadd+0x400>
   14604:	4b36      	ldr	r3, [pc, #216]	; (146e0 <__aeabi_dadd+0x380>)
   14606:	4298      	cmp	r0, r3
   14608:	d100      	bne.n	1460c <__aeabi_dadd+0x2ac>
   1460a:	e0d1      	b.n	147b0 <__aeabi_dadd+0x450>
   1460c:	18ba      	adds	r2, r7, r2
   1460e:	42ba      	cmp	r2, r7
   14610:	41bf      	sbcs	r7, r7
   14612:	1864      	adds	r4, r4, r1
   14614:	427f      	negs	r7, r7
   14616:	19e4      	adds	r4, r4, r7
   14618:	07e7      	lsls	r7, r4, #31
   1461a:	0852      	lsrs	r2, r2, #1
   1461c:	4317      	orrs	r7, r2
   1461e:	0864      	lsrs	r4, r4, #1
   14620:	0006      	movs	r6, r0
   14622:	e721      	b.n	14468 <__aeabi_dadd+0x108>
   14624:	482e      	ldr	r0, [pc, #184]	; (146e0 <__aeabi_dadd+0x380>)
   14626:	4285      	cmp	r5, r0
   14628:	d100      	bne.n	1462c <__aeabi_dadd+0x2cc>
   1462a:	e093      	b.n	14754 <__aeabi_dadd+0x3f4>
   1462c:	001d      	movs	r5, r3
   1462e:	e6d0      	b.n	143d2 <__aeabi_dadd+0x72>
   14630:	0029      	movs	r1, r5
   14632:	3e1f      	subs	r6, #31
   14634:	40f1      	lsrs	r1, r6
   14636:	2b20      	cmp	r3, #32
   14638:	d100      	bne.n	1463c <__aeabi_dadd+0x2dc>
   1463a:	e08d      	b.n	14758 <__aeabi_dadd+0x3f8>
   1463c:	2240      	movs	r2, #64	; 0x40
   1463e:	1ad3      	subs	r3, r2, r3
   14640:	409d      	lsls	r5, r3
   14642:	432f      	orrs	r7, r5
   14644:	1e7d      	subs	r5, r7, #1
   14646:	41af      	sbcs	r7, r5
   14648:	2400      	movs	r4, #0
   1464a:	430f      	orrs	r7, r1
   1464c:	2600      	movs	r6, #0
   1464e:	e744      	b.n	144da <__aeabi_dadd+0x17a>
   14650:	002b      	movs	r3, r5
   14652:	0008      	movs	r0, r1
   14654:	3b20      	subs	r3, #32
   14656:	40d8      	lsrs	r0, r3
   14658:	0003      	movs	r3, r0
   1465a:	2d20      	cmp	r5, #32
   1465c:	d100      	bne.n	14660 <__aeabi_dadd+0x300>
   1465e:	e07d      	b.n	1475c <__aeabi_dadd+0x3fc>
   14660:	2040      	movs	r0, #64	; 0x40
   14662:	1b45      	subs	r5, r0, r5
   14664:	40a9      	lsls	r1, r5
   14666:	430a      	orrs	r2, r1
   14668:	1e51      	subs	r1, r2, #1
   1466a:	418a      	sbcs	r2, r1
   1466c:	2100      	movs	r1, #0
   1466e:	431a      	orrs	r2, r3
   14670:	e6c7      	b.n	14402 <__aeabi_dadd+0xa2>
   14672:	2e00      	cmp	r6, #0
   14674:	d050      	beq.n	14718 <__aeabi_dadd+0x3b8>
   14676:	4e1a      	ldr	r6, [pc, #104]	; (146e0 <__aeabi_dadd+0x380>)
   14678:	42b0      	cmp	r0, r6
   1467a:	d057      	beq.n	1472c <__aeabi_dadd+0x3cc>
   1467c:	2680      	movs	r6, #128	; 0x80
   1467e:	426b      	negs	r3, r5
   14680:	4699      	mov	r9, r3
   14682:	0436      	lsls	r6, r6, #16
   14684:	4334      	orrs	r4, r6
   14686:	464b      	mov	r3, r9
   14688:	2b38      	cmp	r3, #56	; 0x38
   1468a:	dd00      	ble.n	1468e <__aeabi_dadd+0x32e>
   1468c:	e0d6      	b.n	1483c <__aeabi_dadd+0x4dc>
   1468e:	2b1f      	cmp	r3, #31
   14690:	dd00      	ble.n	14694 <__aeabi_dadd+0x334>
   14692:	e135      	b.n	14900 <__aeabi_dadd+0x5a0>
   14694:	2620      	movs	r6, #32
   14696:	1af5      	subs	r5, r6, r3
   14698:	0026      	movs	r6, r4
   1469a:	40ae      	lsls	r6, r5
   1469c:	46b2      	mov	sl, r6
   1469e:	003e      	movs	r6, r7
   146a0:	40de      	lsrs	r6, r3
   146a2:	46ac      	mov	ip, r5
   146a4:	0035      	movs	r5, r6
   146a6:	4656      	mov	r6, sl
   146a8:	432e      	orrs	r6, r5
   146aa:	4665      	mov	r5, ip
   146ac:	40af      	lsls	r7, r5
   146ae:	1e7d      	subs	r5, r7, #1
   146b0:	41af      	sbcs	r7, r5
   146b2:	40dc      	lsrs	r4, r3
   146b4:	4337      	orrs	r7, r6
   146b6:	1bd7      	subs	r7, r2, r7
   146b8:	42ba      	cmp	r2, r7
   146ba:	4192      	sbcs	r2, r2
   146bc:	1b0c      	subs	r4, r1, r4
   146be:	4252      	negs	r2, r2
   146c0:	1aa4      	subs	r4, r4, r2
   146c2:	0006      	movs	r6, r0
   146c4:	46d8      	mov	r8, fp
   146c6:	e6a3      	b.n	14410 <__aeabi_dadd+0xb0>
   146c8:	4664      	mov	r4, ip
   146ca:	4667      	mov	r7, ip
   146cc:	432c      	orrs	r4, r5
   146ce:	d000      	beq.n	146d2 <__aeabi_dadd+0x372>
   146d0:	e6a2      	b.n	14418 <__aeabi_dadd+0xb8>
   146d2:	2500      	movs	r5, #0
   146d4:	2600      	movs	r6, #0
   146d6:	2700      	movs	r7, #0
   146d8:	e706      	b.n	144e8 <__aeabi_dadd+0x188>
   146da:	001e      	movs	r6, r3
   146dc:	e6c4      	b.n	14468 <__aeabi_dadd+0x108>
   146de:	46c0      	nop			; (mov r8, r8)
   146e0:	000007ff 	.word	0x000007ff
   146e4:	ff7fffff 	.word	0xff7fffff
   146e8:	800fffff 	.word	0x800fffff
   146ec:	2b1f      	cmp	r3, #31
   146ee:	dc63      	bgt.n	147b8 <__aeabi_dadd+0x458>
   146f0:	2020      	movs	r0, #32
   146f2:	1ac3      	subs	r3, r0, r3
   146f4:	0008      	movs	r0, r1
   146f6:	4098      	lsls	r0, r3
   146f8:	469c      	mov	ip, r3
   146fa:	4683      	mov	fp, r0
   146fc:	4653      	mov	r3, sl
   146fe:	0010      	movs	r0, r2
   14700:	40d8      	lsrs	r0, r3
   14702:	0003      	movs	r3, r0
   14704:	4658      	mov	r0, fp
   14706:	4318      	orrs	r0, r3
   14708:	4663      	mov	r3, ip
   1470a:	409a      	lsls	r2, r3
   1470c:	1e53      	subs	r3, r2, #1
   1470e:	419a      	sbcs	r2, r3
   14710:	4653      	mov	r3, sl
   14712:	4302      	orrs	r2, r0
   14714:	40d9      	lsrs	r1, r3
   14716:	e703      	b.n	14520 <__aeabi_dadd+0x1c0>
   14718:	0026      	movs	r6, r4
   1471a:	433e      	orrs	r6, r7
   1471c:	d006      	beq.n	1472c <__aeabi_dadd+0x3cc>
   1471e:	43eb      	mvns	r3, r5
   14720:	4699      	mov	r9, r3
   14722:	2b00      	cmp	r3, #0
   14724:	d0c7      	beq.n	146b6 <__aeabi_dadd+0x356>
   14726:	4e94      	ldr	r6, [pc, #592]	; (14978 <__aeabi_dadd+0x618>)
   14728:	42b0      	cmp	r0, r6
   1472a:	d1ac      	bne.n	14686 <__aeabi_dadd+0x326>
   1472c:	000c      	movs	r4, r1
   1472e:	0017      	movs	r7, r2
   14730:	0006      	movs	r6, r0
   14732:	46d8      	mov	r8, fp
   14734:	e698      	b.n	14468 <__aeabi_dadd+0x108>
   14736:	4b90      	ldr	r3, [pc, #576]	; (14978 <__aeabi_dadd+0x618>)
   14738:	459a      	cmp	sl, r3
   1473a:	d00b      	beq.n	14754 <__aeabi_dadd+0x3f4>
   1473c:	4682      	mov	sl, r0
   1473e:	e6e7      	b.n	14510 <__aeabi_dadd+0x1b0>
   14740:	2800      	cmp	r0, #0
   14742:	d000      	beq.n	14746 <__aeabi_dadd+0x3e6>
   14744:	e09e      	b.n	14884 <__aeabi_dadd+0x524>
   14746:	0018      	movs	r0, r3
   14748:	4310      	orrs	r0, r2
   1474a:	d100      	bne.n	1474e <__aeabi_dadd+0x3ee>
   1474c:	e0e9      	b.n	14922 <__aeabi_dadd+0x5c2>
   1474e:	001c      	movs	r4, r3
   14750:	0017      	movs	r7, r2
   14752:	46d8      	mov	r8, fp
   14754:	4e88      	ldr	r6, [pc, #544]	; (14978 <__aeabi_dadd+0x618>)
   14756:	e687      	b.n	14468 <__aeabi_dadd+0x108>
   14758:	2500      	movs	r5, #0
   1475a:	e772      	b.n	14642 <__aeabi_dadd+0x2e2>
   1475c:	2100      	movs	r1, #0
   1475e:	e782      	b.n	14666 <__aeabi_dadd+0x306>
   14760:	0023      	movs	r3, r4
   14762:	433b      	orrs	r3, r7
   14764:	2e00      	cmp	r6, #0
   14766:	d000      	beq.n	1476a <__aeabi_dadd+0x40a>
   14768:	e0ab      	b.n	148c2 <__aeabi_dadd+0x562>
   1476a:	2b00      	cmp	r3, #0
   1476c:	d100      	bne.n	14770 <__aeabi_dadd+0x410>
   1476e:	e0e7      	b.n	14940 <__aeabi_dadd+0x5e0>
   14770:	000b      	movs	r3, r1
   14772:	4313      	orrs	r3, r2
   14774:	d100      	bne.n	14778 <__aeabi_dadd+0x418>
   14776:	e677      	b.n	14468 <__aeabi_dadd+0x108>
   14778:	18ba      	adds	r2, r7, r2
   1477a:	42ba      	cmp	r2, r7
   1477c:	41bf      	sbcs	r7, r7
   1477e:	1864      	adds	r4, r4, r1
   14780:	427f      	negs	r7, r7
   14782:	19e4      	adds	r4, r4, r7
   14784:	0223      	lsls	r3, r4, #8
   14786:	d400      	bmi.n	1478a <__aeabi_dadd+0x42a>
   14788:	e0f2      	b.n	14970 <__aeabi_dadd+0x610>
   1478a:	4b7c      	ldr	r3, [pc, #496]	; (1497c <__aeabi_dadd+0x61c>)
   1478c:	0017      	movs	r7, r2
   1478e:	401c      	ands	r4, r3
   14790:	0006      	movs	r6, r0
   14792:	e669      	b.n	14468 <__aeabi_dadd+0x108>
   14794:	0020      	movs	r0, r4
   14796:	4338      	orrs	r0, r7
   14798:	2e00      	cmp	r6, #0
   1479a:	d1d1      	bne.n	14740 <__aeabi_dadd+0x3e0>
   1479c:	2800      	cmp	r0, #0
   1479e:	d15b      	bne.n	14858 <__aeabi_dadd+0x4f8>
   147a0:	001c      	movs	r4, r3
   147a2:	4314      	orrs	r4, r2
   147a4:	d100      	bne.n	147a8 <__aeabi_dadd+0x448>
   147a6:	e0a8      	b.n	148fa <__aeabi_dadd+0x59a>
   147a8:	001c      	movs	r4, r3
   147aa:	0017      	movs	r7, r2
   147ac:	46d8      	mov	r8, fp
   147ae:	e65b      	b.n	14468 <__aeabi_dadd+0x108>
   147b0:	0006      	movs	r6, r0
   147b2:	2400      	movs	r4, #0
   147b4:	2700      	movs	r7, #0
   147b6:	e697      	b.n	144e8 <__aeabi_dadd+0x188>
   147b8:	4650      	mov	r0, sl
   147ba:	000b      	movs	r3, r1
   147bc:	3820      	subs	r0, #32
   147be:	40c3      	lsrs	r3, r0
   147c0:	4699      	mov	r9, r3
   147c2:	4653      	mov	r3, sl
   147c4:	2b20      	cmp	r3, #32
   147c6:	d100      	bne.n	147ca <__aeabi_dadd+0x46a>
   147c8:	e095      	b.n	148f6 <__aeabi_dadd+0x596>
   147ca:	2340      	movs	r3, #64	; 0x40
   147cc:	4650      	mov	r0, sl
   147ce:	1a1b      	subs	r3, r3, r0
   147d0:	4099      	lsls	r1, r3
   147d2:	430a      	orrs	r2, r1
   147d4:	1e51      	subs	r1, r2, #1
   147d6:	418a      	sbcs	r2, r1
   147d8:	464b      	mov	r3, r9
   147da:	2100      	movs	r1, #0
   147dc:	431a      	orrs	r2, r3
   147de:	e69f      	b.n	14520 <__aeabi_dadd+0x1c0>
   147e0:	2e00      	cmp	r6, #0
   147e2:	d130      	bne.n	14846 <__aeabi_dadd+0x4e6>
   147e4:	0026      	movs	r6, r4
   147e6:	433e      	orrs	r6, r7
   147e8:	d067      	beq.n	148ba <__aeabi_dadd+0x55a>
   147ea:	43db      	mvns	r3, r3
   147ec:	469a      	mov	sl, r3
   147ee:	2b00      	cmp	r3, #0
   147f0:	d01c      	beq.n	1482c <__aeabi_dadd+0x4cc>
   147f2:	4e61      	ldr	r6, [pc, #388]	; (14978 <__aeabi_dadd+0x618>)
   147f4:	42b0      	cmp	r0, r6
   147f6:	d060      	beq.n	148ba <__aeabi_dadd+0x55a>
   147f8:	4653      	mov	r3, sl
   147fa:	2b38      	cmp	r3, #56	; 0x38
   147fc:	dd00      	ble.n	14800 <__aeabi_dadd+0x4a0>
   147fe:	e096      	b.n	1492e <__aeabi_dadd+0x5ce>
   14800:	2b1f      	cmp	r3, #31
   14802:	dd00      	ble.n	14806 <__aeabi_dadd+0x4a6>
   14804:	e09f      	b.n	14946 <__aeabi_dadd+0x5e6>
   14806:	2620      	movs	r6, #32
   14808:	1af3      	subs	r3, r6, r3
   1480a:	0026      	movs	r6, r4
   1480c:	409e      	lsls	r6, r3
   1480e:	469c      	mov	ip, r3
   14810:	46b3      	mov	fp, r6
   14812:	4653      	mov	r3, sl
   14814:	003e      	movs	r6, r7
   14816:	40de      	lsrs	r6, r3
   14818:	0033      	movs	r3, r6
   1481a:	465e      	mov	r6, fp
   1481c:	431e      	orrs	r6, r3
   1481e:	4663      	mov	r3, ip
   14820:	409f      	lsls	r7, r3
   14822:	1e7b      	subs	r3, r7, #1
   14824:	419f      	sbcs	r7, r3
   14826:	4653      	mov	r3, sl
   14828:	40dc      	lsrs	r4, r3
   1482a:	4337      	orrs	r7, r6
   1482c:	18bf      	adds	r7, r7, r2
   1482e:	4297      	cmp	r7, r2
   14830:	4192      	sbcs	r2, r2
   14832:	1864      	adds	r4, r4, r1
   14834:	4252      	negs	r2, r2
   14836:	18a4      	adds	r4, r4, r2
   14838:	0006      	movs	r6, r0
   1483a:	e678      	b.n	1452e <__aeabi_dadd+0x1ce>
   1483c:	4327      	orrs	r7, r4
   1483e:	1e7c      	subs	r4, r7, #1
   14840:	41a7      	sbcs	r7, r4
   14842:	2400      	movs	r4, #0
   14844:	e737      	b.n	146b6 <__aeabi_dadd+0x356>
   14846:	4e4c      	ldr	r6, [pc, #304]	; (14978 <__aeabi_dadd+0x618>)
   14848:	42b0      	cmp	r0, r6
   1484a:	d036      	beq.n	148ba <__aeabi_dadd+0x55a>
   1484c:	2680      	movs	r6, #128	; 0x80
   1484e:	425b      	negs	r3, r3
   14850:	0436      	lsls	r6, r6, #16
   14852:	469a      	mov	sl, r3
   14854:	4334      	orrs	r4, r6
   14856:	e7cf      	b.n	147f8 <__aeabi_dadd+0x498>
   14858:	0018      	movs	r0, r3
   1485a:	4310      	orrs	r0, r2
   1485c:	d100      	bne.n	14860 <__aeabi_dadd+0x500>
   1485e:	e603      	b.n	14468 <__aeabi_dadd+0x108>
   14860:	1ab8      	subs	r0, r7, r2
   14862:	4684      	mov	ip, r0
   14864:	4567      	cmp	r7, ip
   14866:	41ad      	sbcs	r5, r5
   14868:	1ae0      	subs	r0, r4, r3
   1486a:	426d      	negs	r5, r5
   1486c:	1b40      	subs	r0, r0, r5
   1486e:	0205      	lsls	r5, r0, #8
   14870:	d400      	bmi.n	14874 <__aeabi_dadd+0x514>
   14872:	e62c      	b.n	144ce <__aeabi_dadd+0x16e>
   14874:	1bd7      	subs	r7, r2, r7
   14876:	42ba      	cmp	r2, r7
   14878:	4192      	sbcs	r2, r2
   1487a:	1b1c      	subs	r4, r3, r4
   1487c:	4252      	negs	r2, r2
   1487e:	1aa4      	subs	r4, r4, r2
   14880:	46d8      	mov	r8, fp
   14882:	e5f1      	b.n	14468 <__aeabi_dadd+0x108>
   14884:	0018      	movs	r0, r3
   14886:	4310      	orrs	r0, r2
   14888:	d100      	bne.n	1488c <__aeabi_dadd+0x52c>
   1488a:	e763      	b.n	14754 <__aeabi_dadd+0x3f4>
   1488c:	08f8      	lsrs	r0, r7, #3
   1488e:	0767      	lsls	r7, r4, #29
   14890:	4307      	orrs	r7, r0
   14892:	2080      	movs	r0, #128	; 0x80
   14894:	08e4      	lsrs	r4, r4, #3
   14896:	0300      	lsls	r0, r0, #12
   14898:	4204      	tst	r4, r0
   1489a:	d008      	beq.n	148ae <__aeabi_dadd+0x54e>
   1489c:	08dd      	lsrs	r5, r3, #3
   1489e:	4205      	tst	r5, r0
   148a0:	d105      	bne.n	148ae <__aeabi_dadd+0x54e>
   148a2:	08d2      	lsrs	r2, r2, #3
   148a4:	0759      	lsls	r1, r3, #29
   148a6:	4311      	orrs	r1, r2
   148a8:	000f      	movs	r7, r1
   148aa:	002c      	movs	r4, r5
   148ac:	46d8      	mov	r8, fp
   148ae:	0f7b      	lsrs	r3, r7, #29
   148b0:	00e4      	lsls	r4, r4, #3
   148b2:	431c      	orrs	r4, r3
   148b4:	00ff      	lsls	r7, r7, #3
   148b6:	4e30      	ldr	r6, [pc, #192]	; (14978 <__aeabi_dadd+0x618>)
   148b8:	e5d6      	b.n	14468 <__aeabi_dadd+0x108>
   148ba:	000c      	movs	r4, r1
   148bc:	0017      	movs	r7, r2
   148be:	0006      	movs	r6, r0
   148c0:	e5d2      	b.n	14468 <__aeabi_dadd+0x108>
   148c2:	2b00      	cmp	r3, #0
   148c4:	d038      	beq.n	14938 <__aeabi_dadd+0x5d8>
   148c6:	000b      	movs	r3, r1
   148c8:	4313      	orrs	r3, r2
   148ca:	d100      	bne.n	148ce <__aeabi_dadd+0x56e>
   148cc:	e742      	b.n	14754 <__aeabi_dadd+0x3f4>
   148ce:	08f8      	lsrs	r0, r7, #3
   148d0:	0767      	lsls	r7, r4, #29
   148d2:	4307      	orrs	r7, r0
   148d4:	2080      	movs	r0, #128	; 0x80
   148d6:	08e4      	lsrs	r4, r4, #3
   148d8:	0300      	lsls	r0, r0, #12
   148da:	4204      	tst	r4, r0
   148dc:	d0e7      	beq.n	148ae <__aeabi_dadd+0x54e>
   148de:	08cb      	lsrs	r3, r1, #3
   148e0:	4203      	tst	r3, r0
   148e2:	d1e4      	bne.n	148ae <__aeabi_dadd+0x54e>
   148e4:	08d2      	lsrs	r2, r2, #3
   148e6:	0749      	lsls	r1, r1, #29
   148e8:	4311      	orrs	r1, r2
   148ea:	000f      	movs	r7, r1
   148ec:	001c      	movs	r4, r3
   148ee:	e7de      	b.n	148ae <__aeabi_dadd+0x54e>
   148f0:	2700      	movs	r7, #0
   148f2:	2400      	movs	r4, #0
   148f4:	e5d5      	b.n	144a2 <__aeabi_dadd+0x142>
   148f6:	2100      	movs	r1, #0
   148f8:	e76b      	b.n	147d2 <__aeabi_dadd+0x472>
   148fa:	2500      	movs	r5, #0
   148fc:	2700      	movs	r7, #0
   148fe:	e5f3      	b.n	144e8 <__aeabi_dadd+0x188>
   14900:	464e      	mov	r6, r9
   14902:	0025      	movs	r5, r4
   14904:	3e20      	subs	r6, #32
   14906:	40f5      	lsrs	r5, r6
   14908:	464b      	mov	r3, r9
   1490a:	002e      	movs	r6, r5
   1490c:	2b20      	cmp	r3, #32
   1490e:	d02d      	beq.n	1496c <__aeabi_dadd+0x60c>
   14910:	2540      	movs	r5, #64	; 0x40
   14912:	1aed      	subs	r5, r5, r3
   14914:	40ac      	lsls	r4, r5
   14916:	4327      	orrs	r7, r4
   14918:	1e7c      	subs	r4, r7, #1
   1491a:	41a7      	sbcs	r7, r4
   1491c:	2400      	movs	r4, #0
   1491e:	4337      	orrs	r7, r6
   14920:	e6c9      	b.n	146b6 <__aeabi_dadd+0x356>
   14922:	2480      	movs	r4, #128	; 0x80
   14924:	2500      	movs	r5, #0
   14926:	0324      	lsls	r4, r4, #12
   14928:	4e13      	ldr	r6, [pc, #76]	; (14978 <__aeabi_dadd+0x618>)
   1492a:	2700      	movs	r7, #0
   1492c:	e5dc      	b.n	144e8 <__aeabi_dadd+0x188>
   1492e:	4327      	orrs	r7, r4
   14930:	1e7c      	subs	r4, r7, #1
   14932:	41a7      	sbcs	r7, r4
   14934:	2400      	movs	r4, #0
   14936:	e779      	b.n	1482c <__aeabi_dadd+0x4cc>
   14938:	000c      	movs	r4, r1
   1493a:	0017      	movs	r7, r2
   1493c:	4e0e      	ldr	r6, [pc, #56]	; (14978 <__aeabi_dadd+0x618>)
   1493e:	e593      	b.n	14468 <__aeabi_dadd+0x108>
   14940:	000c      	movs	r4, r1
   14942:	0017      	movs	r7, r2
   14944:	e590      	b.n	14468 <__aeabi_dadd+0x108>
   14946:	4656      	mov	r6, sl
   14948:	0023      	movs	r3, r4
   1494a:	3e20      	subs	r6, #32
   1494c:	40f3      	lsrs	r3, r6
   1494e:	4699      	mov	r9, r3
   14950:	4653      	mov	r3, sl
   14952:	2b20      	cmp	r3, #32
   14954:	d00e      	beq.n	14974 <__aeabi_dadd+0x614>
   14956:	2340      	movs	r3, #64	; 0x40
   14958:	4656      	mov	r6, sl
   1495a:	1b9b      	subs	r3, r3, r6
   1495c:	409c      	lsls	r4, r3
   1495e:	4327      	orrs	r7, r4
   14960:	1e7c      	subs	r4, r7, #1
   14962:	41a7      	sbcs	r7, r4
   14964:	464b      	mov	r3, r9
   14966:	2400      	movs	r4, #0
   14968:	431f      	orrs	r7, r3
   1496a:	e75f      	b.n	1482c <__aeabi_dadd+0x4cc>
   1496c:	2400      	movs	r4, #0
   1496e:	e7d2      	b.n	14916 <__aeabi_dadd+0x5b6>
   14970:	0017      	movs	r7, r2
   14972:	e5b2      	b.n	144da <__aeabi_dadd+0x17a>
   14974:	2400      	movs	r4, #0
   14976:	e7f2      	b.n	1495e <__aeabi_dadd+0x5fe>
   14978:	000007ff 	.word	0x000007ff
   1497c:	ff7fffff 	.word	0xff7fffff

00014980 <__aeabi_ddiv>:
   14980:	b5f0      	push	{r4, r5, r6, r7, lr}
   14982:	4657      	mov	r7, sl
   14984:	4645      	mov	r5, r8
   14986:	46de      	mov	lr, fp
   14988:	464e      	mov	r6, r9
   1498a:	b5e0      	push	{r5, r6, r7, lr}
   1498c:	004c      	lsls	r4, r1, #1
   1498e:	030e      	lsls	r6, r1, #12
   14990:	b087      	sub	sp, #28
   14992:	4683      	mov	fp, r0
   14994:	4692      	mov	sl, r2
   14996:	001d      	movs	r5, r3
   14998:	4680      	mov	r8, r0
   1499a:	0b36      	lsrs	r6, r6, #12
   1499c:	0d64      	lsrs	r4, r4, #21
   1499e:	0fcf      	lsrs	r7, r1, #31
   149a0:	2c00      	cmp	r4, #0
   149a2:	d04f      	beq.n	14a44 <__aeabi_ddiv+0xc4>
   149a4:	4b6f      	ldr	r3, [pc, #444]	; (14b64 <__aeabi_ddiv+0x1e4>)
   149a6:	429c      	cmp	r4, r3
   149a8:	d035      	beq.n	14a16 <__aeabi_ddiv+0x96>
   149aa:	2380      	movs	r3, #128	; 0x80
   149ac:	0f42      	lsrs	r2, r0, #29
   149ae:	041b      	lsls	r3, r3, #16
   149b0:	00f6      	lsls	r6, r6, #3
   149b2:	4313      	orrs	r3, r2
   149b4:	4333      	orrs	r3, r6
   149b6:	4699      	mov	r9, r3
   149b8:	00c3      	lsls	r3, r0, #3
   149ba:	4698      	mov	r8, r3
   149bc:	4b6a      	ldr	r3, [pc, #424]	; (14b68 <__aeabi_ddiv+0x1e8>)
   149be:	2600      	movs	r6, #0
   149c0:	469c      	mov	ip, r3
   149c2:	2300      	movs	r3, #0
   149c4:	4464      	add	r4, ip
   149c6:	9303      	str	r3, [sp, #12]
   149c8:	032b      	lsls	r3, r5, #12
   149ca:	0b1b      	lsrs	r3, r3, #12
   149cc:	469b      	mov	fp, r3
   149ce:	006b      	lsls	r3, r5, #1
   149d0:	0fed      	lsrs	r5, r5, #31
   149d2:	4650      	mov	r0, sl
   149d4:	0d5b      	lsrs	r3, r3, #21
   149d6:	9501      	str	r5, [sp, #4]
   149d8:	d05e      	beq.n	14a98 <__aeabi_ddiv+0x118>
   149da:	4a62      	ldr	r2, [pc, #392]	; (14b64 <__aeabi_ddiv+0x1e4>)
   149dc:	4293      	cmp	r3, r2
   149de:	d053      	beq.n	14a88 <__aeabi_ddiv+0x108>
   149e0:	465a      	mov	r2, fp
   149e2:	00d1      	lsls	r1, r2, #3
   149e4:	2280      	movs	r2, #128	; 0x80
   149e6:	0f40      	lsrs	r0, r0, #29
   149e8:	0412      	lsls	r2, r2, #16
   149ea:	4302      	orrs	r2, r0
   149ec:	430a      	orrs	r2, r1
   149ee:	4693      	mov	fp, r2
   149f0:	4652      	mov	r2, sl
   149f2:	00d1      	lsls	r1, r2, #3
   149f4:	4a5c      	ldr	r2, [pc, #368]	; (14b68 <__aeabi_ddiv+0x1e8>)
   149f6:	4694      	mov	ip, r2
   149f8:	2200      	movs	r2, #0
   149fa:	4463      	add	r3, ip
   149fc:	0038      	movs	r0, r7
   149fe:	4068      	eors	r0, r5
   14a00:	4684      	mov	ip, r0
   14a02:	9002      	str	r0, [sp, #8]
   14a04:	1ae4      	subs	r4, r4, r3
   14a06:	4316      	orrs	r6, r2
   14a08:	2e0f      	cmp	r6, #15
   14a0a:	d900      	bls.n	14a0e <__aeabi_ddiv+0x8e>
   14a0c:	e0b4      	b.n	14b78 <__aeabi_ddiv+0x1f8>
   14a0e:	4b57      	ldr	r3, [pc, #348]	; (14b6c <__aeabi_ddiv+0x1ec>)
   14a10:	00b6      	lsls	r6, r6, #2
   14a12:	599b      	ldr	r3, [r3, r6]
   14a14:	469f      	mov	pc, r3
   14a16:	0003      	movs	r3, r0
   14a18:	4333      	orrs	r3, r6
   14a1a:	4699      	mov	r9, r3
   14a1c:	d16c      	bne.n	14af8 <__aeabi_ddiv+0x178>
   14a1e:	2300      	movs	r3, #0
   14a20:	4698      	mov	r8, r3
   14a22:	3302      	adds	r3, #2
   14a24:	2608      	movs	r6, #8
   14a26:	9303      	str	r3, [sp, #12]
   14a28:	e7ce      	b.n	149c8 <__aeabi_ddiv+0x48>
   14a2a:	46cb      	mov	fp, r9
   14a2c:	4641      	mov	r1, r8
   14a2e:	9a03      	ldr	r2, [sp, #12]
   14a30:	9701      	str	r7, [sp, #4]
   14a32:	2a02      	cmp	r2, #2
   14a34:	d165      	bne.n	14b02 <__aeabi_ddiv+0x182>
   14a36:	9b01      	ldr	r3, [sp, #4]
   14a38:	4c4a      	ldr	r4, [pc, #296]	; (14b64 <__aeabi_ddiv+0x1e4>)
   14a3a:	469c      	mov	ip, r3
   14a3c:	2300      	movs	r3, #0
   14a3e:	2200      	movs	r2, #0
   14a40:	4698      	mov	r8, r3
   14a42:	e06b      	b.n	14b1c <__aeabi_ddiv+0x19c>
   14a44:	0003      	movs	r3, r0
   14a46:	4333      	orrs	r3, r6
   14a48:	4699      	mov	r9, r3
   14a4a:	d04e      	beq.n	14aea <__aeabi_ddiv+0x16a>
   14a4c:	2e00      	cmp	r6, #0
   14a4e:	d100      	bne.n	14a52 <__aeabi_ddiv+0xd2>
   14a50:	e1bc      	b.n	14dcc <__aeabi_ddiv+0x44c>
   14a52:	0030      	movs	r0, r6
   14a54:	f001 fae8 	bl	16028 <__clzsi2>
   14a58:	0003      	movs	r3, r0
   14a5a:	3b0b      	subs	r3, #11
   14a5c:	2b1c      	cmp	r3, #28
   14a5e:	dd00      	ble.n	14a62 <__aeabi_ddiv+0xe2>
   14a60:	e1ac      	b.n	14dbc <__aeabi_ddiv+0x43c>
   14a62:	221d      	movs	r2, #29
   14a64:	1ad3      	subs	r3, r2, r3
   14a66:	465a      	mov	r2, fp
   14a68:	0001      	movs	r1, r0
   14a6a:	40da      	lsrs	r2, r3
   14a6c:	3908      	subs	r1, #8
   14a6e:	408e      	lsls	r6, r1
   14a70:	0013      	movs	r3, r2
   14a72:	4333      	orrs	r3, r6
   14a74:	4699      	mov	r9, r3
   14a76:	465b      	mov	r3, fp
   14a78:	408b      	lsls	r3, r1
   14a7a:	4698      	mov	r8, r3
   14a7c:	2300      	movs	r3, #0
   14a7e:	4c3c      	ldr	r4, [pc, #240]	; (14b70 <__aeabi_ddiv+0x1f0>)
   14a80:	2600      	movs	r6, #0
   14a82:	1a24      	subs	r4, r4, r0
   14a84:	9303      	str	r3, [sp, #12]
   14a86:	e79f      	b.n	149c8 <__aeabi_ddiv+0x48>
   14a88:	4651      	mov	r1, sl
   14a8a:	465a      	mov	r2, fp
   14a8c:	4311      	orrs	r1, r2
   14a8e:	d129      	bne.n	14ae4 <__aeabi_ddiv+0x164>
   14a90:	2200      	movs	r2, #0
   14a92:	4693      	mov	fp, r2
   14a94:	3202      	adds	r2, #2
   14a96:	e7b1      	b.n	149fc <__aeabi_ddiv+0x7c>
   14a98:	4659      	mov	r1, fp
   14a9a:	4301      	orrs	r1, r0
   14a9c:	d01e      	beq.n	14adc <__aeabi_ddiv+0x15c>
   14a9e:	465b      	mov	r3, fp
   14aa0:	2b00      	cmp	r3, #0
   14aa2:	d100      	bne.n	14aa6 <__aeabi_ddiv+0x126>
   14aa4:	e19e      	b.n	14de4 <__aeabi_ddiv+0x464>
   14aa6:	4658      	mov	r0, fp
   14aa8:	f001 fabe 	bl	16028 <__clzsi2>
   14aac:	0003      	movs	r3, r0
   14aae:	3b0b      	subs	r3, #11
   14ab0:	2b1c      	cmp	r3, #28
   14ab2:	dd00      	ble.n	14ab6 <__aeabi_ddiv+0x136>
   14ab4:	e18f      	b.n	14dd6 <__aeabi_ddiv+0x456>
   14ab6:	0002      	movs	r2, r0
   14ab8:	4659      	mov	r1, fp
   14aba:	3a08      	subs	r2, #8
   14abc:	4091      	lsls	r1, r2
   14abe:	468b      	mov	fp, r1
   14ac0:	211d      	movs	r1, #29
   14ac2:	1acb      	subs	r3, r1, r3
   14ac4:	4651      	mov	r1, sl
   14ac6:	40d9      	lsrs	r1, r3
   14ac8:	000b      	movs	r3, r1
   14aca:	4659      	mov	r1, fp
   14acc:	430b      	orrs	r3, r1
   14ace:	4651      	mov	r1, sl
   14ad0:	469b      	mov	fp, r3
   14ad2:	4091      	lsls	r1, r2
   14ad4:	4b26      	ldr	r3, [pc, #152]	; (14b70 <__aeabi_ddiv+0x1f0>)
   14ad6:	2200      	movs	r2, #0
   14ad8:	1a1b      	subs	r3, r3, r0
   14ada:	e78f      	b.n	149fc <__aeabi_ddiv+0x7c>
   14adc:	2300      	movs	r3, #0
   14ade:	2201      	movs	r2, #1
   14ae0:	469b      	mov	fp, r3
   14ae2:	e78b      	b.n	149fc <__aeabi_ddiv+0x7c>
   14ae4:	4651      	mov	r1, sl
   14ae6:	2203      	movs	r2, #3
   14ae8:	e788      	b.n	149fc <__aeabi_ddiv+0x7c>
   14aea:	2300      	movs	r3, #0
   14aec:	4698      	mov	r8, r3
   14aee:	3301      	adds	r3, #1
   14af0:	2604      	movs	r6, #4
   14af2:	2400      	movs	r4, #0
   14af4:	9303      	str	r3, [sp, #12]
   14af6:	e767      	b.n	149c8 <__aeabi_ddiv+0x48>
   14af8:	2303      	movs	r3, #3
   14afa:	46b1      	mov	r9, r6
   14afc:	9303      	str	r3, [sp, #12]
   14afe:	260c      	movs	r6, #12
   14b00:	e762      	b.n	149c8 <__aeabi_ddiv+0x48>
   14b02:	2a03      	cmp	r2, #3
   14b04:	d100      	bne.n	14b08 <__aeabi_ddiv+0x188>
   14b06:	e25c      	b.n	14fc2 <__aeabi_ddiv+0x642>
   14b08:	9b01      	ldr	r3, [sp, #4]
   14b0a:	2a01      	cmp	r2, #1
   14b0c:	d000      	beq.n	14b10 <__aeabi_ddiv+0x190>
   14b0e:	e1e4      	b.n	14eda <__aeabi_ddiv+0x55a>
   14b10:	4013      	ands	r3, r2
   14b12:	469c      	mov	ip, r3
   14b14:	2300      	movs	r3, #0
   14b16:	2400      	movs	r4, #0
   14b18:	2200      	movs	r2, #0
   14b1a:	4698      	mov	r8, r3
   14b1c:	2100      	movs	r1, #0
   14b1e:	0312      	lsls	r2, r2, #12
   14b20:	0b13      	lsrs	r3, r2, #12
   14b22:	0d0a      	lsrs	r2, r1, #20
   14b24:	0512      	lsls	r2, r2, #20
   14b26:	431a      	orrs	r2, r3
   14b28:	0523      	lsls	r3, r4, #20
   14b2a:	4c12      	ldr	r4, [pc, #72]	; (14b74 <__aeabi_ddiv+0x1f4>)
   14b2c:	4640      	mov	r0, r8
   14b2e:	4022      	ands	r2, r4
   14b30:	4313      	orrs	r3, r2
   14b32:	4662      	mov	r2, ip
   14b34:	005b      	lsls	r3, r3, #1
   14b36:	07d2      	lsls	r2, r2, #31
   14b38:	085b      	lsrs	r3, r3, #1
   14b3a:	4313      	orrs	r3, r2
   14b3c:	0019      	movs	r1, r3
   14b3e:	b007      	add	sp, #28
   14b40:	bc3c      	pop	{r2, r3, r4, r5}
   14b42:	4690      	mov	r8, r2
   14b44:	4699      	mov	r9, r3
   14b46:	46a2      	mov	sl, r4
   14b48:	46ab      	mov	fp, r5
   14b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14b4c:	2300      	movs	r3, #0
   14b4e:	2280      	movs	r2, #128	; 0x80
   14b50:	469c      	mov	ip, r3
   14b52:	0312      	lsls	r2, r2, #12
   14b54:	4698      	mov	r8, r3
   14b56:	4c03      	ldr	r4, [pc, #12]	; (14b64 <__aeabi_ddiv+0x1e4>)
   14b58:	e7e0      	b.n	14b1c <__aeabi_ddiv+0x19c>
   14b5a:	2300      	movs	r3, #0
   14b5c:	4c01      	ldr	r4, [pc, #4]	; (14b64 <__aeabi_ddiv+0x1e4>)
   14b5e:	2200      	movs	r2, #0
   14b60:	4698      	mov	r8, r3
   14b62:	e7db      	b.n	14b1c <__aeabi_ddiv+0x19c>
   14b64:	000007ff 	.word	0x000007ff
   14b68:	fffffc01 	.word	0xfffffc01
   14b6c:	000183f4 	.word	0x000183f4
   14b70:	fffffc0d 	.word	0xfffffc0d
   14b74:	800fffff 	.word	0x800fffff
   14b78:	45d9      	cmp	r9, fp
   14b7a:	d900      	bls.n	14b7e <__aeabi_ddiv+0x1fe>
   14b7c:	e139      	b.n	14df2 <__aeabi_ddiv+0x472>
   14b7e:	d100      	bne.n	14b82 <__aeabi_ddiv+0x202>
   14b80:	e134      	b.n	14dec <__aeabi_ddiv+0x46c>
   14b82:	2300      	movs	r3, #0
   14b84:	4646      	mov	r6, r8
   14b86:	464d      	mov	r5, r9
   14b88:	469a      	mov	sl, r3
   14b8a:	3c01      	subs	r4, #1
   14b8c:	465b      	mov	r3, fp
   14b8e:	0e0a      	lsrs	r2, r1, #24
   14b90:	021b      	lsls	r3, r3, #8
   14b92:	431a      	orrs	r2, r3
   14b94:	020b      	lsls	r3, r1, #8
   14b96:	0c17      	lsrs	r7, r2, #16
   14b98:	9303      	str	r3, [sp, #12]
   14b9a:	0413      	lsls	r3, r2, #16
   14b9c:	0c1b      	lsrs	r3, r3, #16
   14b9e:	0039      	movs	r1, r7
   14ba0:	0028      	movs	r0, r5
   14ba2:	4690      	mov	r8, r2
   14ba4:	9301      	str	r3, [sp, #4]
   14ba6:	f7fe f999 	bl	12edc <__udivsi3>
   14baa:	0002      	movs	r2, r0
   14bac:	9b01      	ldr	r3, [sp, #4]
   14bae:	4683      	mov	fp, r0
   14bb0:	435a      	muls	r2, r3
   14bb2:	0028      	movs	r0, r5
   14bb4:	0039      	movs	r1, r7
   14bb6:	4691      	mov	r9, r2
   14bb8:	f7fe fa16 	bl	12fe8 <__aeabi_uidivmod>
   14bbc:	0c35      	lsrs	r5, r6, #16
   14bbe:	0409      	lsls	r1, r1, #16
   14bc0:	430d      	orrs	r5, r1
   14bc2:	45a9      	cmp	r9, r5
   14bc4:	d90d      	bls.n	14be2 <__aeabi_ddiv+0x262>
   14bc6:	465b      	mov	r3, fp
   14bc8:	4445      	add	r5, r8
   14bca:	3b01      	subs	r3, #1
   14bcc:	45a8      	cmp	r8, r5
   14bce:	d900      	bls.n	14bd2 <__aeabi_ddiv+0x252>
   14bd0:	e13a      	b.n	14e48 <__aeabi_ddiv+0x4c8>
   14bd2:	45a9      	cmp	r9, r5
   14bd4:	d800      	bhi.n	14bd8 <__aeabi_ddiv+0x258>
   14bd6:	e137      	b.n	14e48 <__aeabi_ddiv+0x4c8>
   14bd8:	2302      	movs	r3, #2
   14bda:	425b      	negs	r3, r3
   14bdc:	469c      	mov	ip, r3
   14bde:	4445      	add	r5, r8
   14be0:	44e3      	add	fp, ip
   14be2:	464b      	mov	r3, r9
   14be4:	1aeb      	subs	r3, r5, r3
   14be6:	0039      	movs	r1, r7
   14be8:	0018      	movs	r0, r3
   14bea:	9304      	str	r3, [sp, #16]
   14bec:	f7fe f976 	bl	12edc <__udivsi3>
   14bf0:	9b01      	ldr	r3, [sp, #4]
   14bf2:	0005      	movs	r5, r0
   14bf4:	4343      	muls	r3, r0
   14bf6:	0039      	movs	r1, r7
   14bf8:	9804      	ldr	r0, [sp, #16]
   14bfa:	4699      	mov	r9, r3
   14bfc:	f7fe f9f4 	bl	12fe8 <__aeabi_uidivmod>
   14c00:	0433      	lsls	r3, r6, #16
   14c02:	0409      	lsls	r1, r1, #16
   14c04:	0c1b      	lsrs	r3, r3, #16
   14c06:	430b      	orrs	r3, r1
   14c08:	4599      	cmp	r9, r3
   14c0a:	d909      	bls.n	14c20 <__aeabi_ddiv+0x2a0>
   14c0c:	4443      	add	r3, r8
   14c0e:	1e6a      	subs	r2, r5, #1
   14c10:	4598      	cmp	r8, r3
   14c12:	d900      	bls.n	14c16 <__aeabi_ddiv+0x296>
   14c14:	e11a      	b.n	14e4c <__aeabi_ddiv+0x4cc>
   14c16:	4599      	cmp	r9, r3
   14c18:	d800      	bhi.n	14c1c <__aeabi_ddiv+0x29c>
   14c1a:	e117      	b.n	14e4c <__aeabi_ddiv+0x4cc>
   14c1c:	3d02      	subs	r5, #2
   14c1e:	4443      	add	r3, r8
   14c20:	464a      	mov	r2, r9
   14c22:	1a9b      	subs	r3, r3, r2
   14c24:	465a      	mov	r2, fp
   14c26:	0412      	lsls	r2, r2, #16
   14c28:	432a      	orrs	r2, r5
   14c2a:	9903      	ldr	r1, [sp, #12]
   14c2c:	4693      	mov	fp, r2
   14c2e:	0c10      	lsrs	r0, r2, #16
   14c30:	0c0a      	lsrs	r2, r1, #16
   14c32:	4691      	mov	r9, r2
   14c34:	0409      	lsls	r1, r1, #16
   14c36:	465a      	mov	r2, fp
   14c38:	0c09      	lsrs	r1, r1, #16
   14c3a:	464e      	mov	r6, r9
   14c3c:	000d      	movs	r5, r1
   14c3e:	0412      	lsls	r2, r2, #16
   14c40:	0c12      	lsrs	r2, r2, #16
   14c42:	4345      	muls	r5, r0
   14c44:	9105      	str	r1, [sp, #20]
   14c46:	4351      	muls	r1, r2
   14c48:	4372      	muls	r2, r6
   14c4a:	4370      	muls	r0, r6
   14c4c:	1952      	adds	r2, r2, r5
   14c4e:	0c0e      	lsrs	r6, r1, #16
   14c50:	18b2      	adds	r2, r6, r2
   14c52:	4295      	cmp	r5, r2
   14c54:	d903      	bls.n	14c5e <__aeabi_ddiv+0x2de>
   14c56:	2580      	movs	r5, #128	; 0x80
   14c58:	026d      	lsls	r5, r5, #9
   14c5a:	46ac      	mov	ip, r5
   14c5c:	4460      	add	r0, ip
   14c5e:	0c15      	lsrs	r5, r2, #16
   14c60:	0409      	lsls	r1, r1, #16
   14c62:	0412      	lsls	r2, r2, #16
   14c64:	0c09      	lsrs	r1, r1, #16
   14c66:	1828      	adds	r0, r5, r0
   14c68:	1852      	adds	r2, r2, r1
   14c6a:	4283      	cmp	r3, r0
   14c6c:	d200      	bcs.n	14c70 <__aeabi_ddiv+0x2f0>
   14c6e:	e0ce      	b.n	14e0e <__aeabi_ddiv+0x48e>
   14c70:	d100      	bne.n	14c74 <__aeabi_ddiv+0x2f4>
   14c72:	e0c8      	b.n	14e06 <__aeabi_ddiv+0x486>
   14c74:	1a1d      	subs	r5, r3, r0
   14c76:	4653      	mov	r3, sl
   14c78:	1a9e      	subs	r6, r3, r2
   14c7a:	45b2      	cmp	sl, r6
   14c7c:	4192      	sbcs	r2, r2
   14c7e:	4252      	negs	r2, r2
   14c80:	1aab      	subs	r3, r5, r2
   14c82:	469a      	mov	sl, r3
   14c84:	4598      	cmp	r8, r3
   14c86:	d100      	bne.n	14c8a <__aeabi_ddiv+0x30a>
   14c88:	e117      	b.n	14eba <__aeabi_ddiv+0x53a>
   14c8a:	0039      	movs	r1, r7
   14c8c:	0018      	movs	r0, r3
   14c8e:	f7fe f925 	bl	12edc <__udivsi3>
   14c92:	9b01      	ldr	r3, [sp, #4]
   14c94:	0005      	movs	r5, r0
   14c96:	4343      	muls	r3, r0
   14c98:	0039      	movs	r1, r7
   14c9a:	4650      	mov	r0, sl
   14c9c:	9304      	str	r3, [sp, #16]
   14c9e:	f7fe f9a3 	bl	12fe8 <__aeabi_uidivmod>
   14ca2:	9804      	ldr	r0, [sp, #16]
   14ca4:	040b      	lsls	r3, r1, #16
   14ca6:	0c31      	lsrs	r1, r6, #16
   14ca8:	4319      	orrs	r1, r3
   14caa:	4288      	cmp	r0, r1
   14cac:	d909      	bls.n	14cc2 <__aeabi_ddiv+0x342>
   14cae:	4441      	add	r1, r8
   14cb0:	1e6b      	subs	r3, r5, #1
   14cb2:	4588      	cmp	r8, r1
   14cb4:	d900      	bls.n	14cb8 <__aeabi_ddiv+0x338>
   14cb6:	e107      	b.n	14ec8 <__aeabi_ddiv+0x548>
   14cb8:	4288      	cmp	r0, r1
   14cba:	d800      	bhi.n	14cbe <__aeabi_ddiv+0x33e>
   14cbc:	e104      	b.n	14ec8 <__aeabi_ddiv+0x548>
   14cbe:	3d02      	subs	r5, #2
   14cc0:	4441      	add	r1, r8
   14cc2:	9b04      	ldr	r3, [sp, #16]
   14cc4:	1acb      	subs	r3, r1, r3
   14cc6:	0018      	movs	r0, r3
   14cc8:	0039      	movs	r1, r7
   14cca:	9304      	str	r3, [sp, #16]
   14ccc:	f7fe f906 	bl	12edc <__udivsi3>
   14cd0:	9b01      	ldr	r3, [sp, #4]
   14cd2:	4682      	mov	sl, r0
   14cd4:	4343      	muls	r3, r0
   14cd6:	0039      	movs	r1, r7
   14cd8:	9804      	ldr	r0, [sp, #16]
   14cda:	9301      	str	r3, [sp, #4]
   14cdc:	f7fe f984 	bl	12fe8 <__aeabi_uidivmod>
   14ce0:	9801      	ldr	r0, [sp, #4]
   14ce2:	040b      	lsls	r3, r1, #16
   14ce4:	0431      	lsls	r1, r6, #16
   14ce6:	0c09      	lsrs	r1, r1, #16
   14ce8:	4319      	orrs	r1, r3
   14cea:	4288      	cmp	r0, r1
   14cec:	d90d      	bls.n	14d0a <__aeabi_ddiv+0x38a>
   14cee:	4653      	mov	r3, sl
   14cf0:	4441      	add	r1, r8
   14cf2:	3b01      	subs	r3, #1
   14cf4:	4588      	cmp	r8, r1
   14cf6:	d900      	bls.n	14cfa <__aeabi_ddiv+0x37a>
   14cf8:	e0e8      	b.n	14ecc <__aeabi_ddiv+0x54c>
   14cfa:	4288      	cmp	r0, r1
   14cfc:	d800      	bhi.n	14d00 <__aeabi_ddiv+0x380>
   14cfe:	e0e5      	b.n	14ecc <__aeabi_ddiv+0x54c>
   14d00:	2302      	movs	r3, #2
   14d02:	425b      	negs	r3, r3
   14d04:	469c      	mov	ip, r3
   14d06:	4441      	add	r1, r8
   14d08:	44e2      	add	sl, ip
   14d0a:	9b01      	ldr	r3, [sp, #4]
   14d0c:	042d      	lsls	r5, r5, #16
   14d0e:	1ace      	subs	r6, r1, r3
   14d10:	4651      	mov	r1, sl
   14d12:	4329      	orrs	r1, r5
   14d14:	9d05      	ldr	r5, [sp, #20]
   14d16:	464f      	mov	r7, r9
   14d18:	002a      	movs	r2, r5
   14d1a:	040b      	lsls	r3, r1, #16
   14d1c:	0c08      	lsrs	r0, r1, #16
   14d1e:	0c1b      	lsrs	r3, r3, #16
   14d20:	435a      	muls	r2, r3
   14d22:	4345      	muls	r5, r0
   14d24:	437b      	muls	r3, r7
   14d26:	4378      	muls	r0, r7
   14d28:	195b      	adds	r3, r3, r5
   14d2a:	0c17      	lsrs	r7, r2, #16
   14d2c:	18fb      	adds	r3, r7, r3
   14d2e:	429d      	cmp	r5, r3
   14d30:	d903      	bls.n	14d3a <__aeabi_ddiv+0x3ba>
   14d32:	2580      	movs	r5, #128	; 0x80
   14d34:	026d      	lsls	r5, r5, #9
   14d36:	46ac      	mov	ip, r5
   14d38:	4460      	add	r0, ip
   14d3a:	0c1d      	lsrs	r5, r3, #16
   14d3c:	0412      	lsls	r2, r2, #16
   14d3e:	041b      	lsls	r3, r3, #16
   14d40:	0c12      	lsrs	r2, r2, #16
   14d42:	1828      	adds	r0, r5, r0
   14d44:	189b      	adds	r3, r3, r2
   14d46:	4286      	cmp	r6, r0
   14d48:	d200      	bcs.n	14d4c <__aeabi_ddiv+0x3cc>
   14d4a:	e093      	b.n	14e74 <__aeabi_ddiv+0x4f4>
   14d4c:	d100      	bne.n	14d50 <__aeabi_ddiv+0x3d0>
   14d4e:	e08e      	b.n	14e6e <__aeabi_ddiv+0x4ee>
   14d50:	2301      	movs	r3, #1
   14d52:	4319      	orrs	r1, r3
   14d54:	4ba0      	ldr	r3, [pc, #640]	; (14fd8 <__aeabi_ddiv+0x658>)
   14d56:	18e3      	adds	r3, r4, r3
   14d58:	2b00      	cmp	r3, #0
   14d5a:	dc00      	bgt.n	14d5e <__aeabi_ddiv+0x3de>
   14d5c:	e099      	b.n	14e92 <__aeabi_ddiv+0x512>
   14d5e:	074a      	lsls	r2, r1, #29
   14d60:	d000      	beq.n	14d64 <__aeabi_ddiv+0x3e4>
   14d62:	e09e      	b.n	14ea2 <__aeabi_ddiv+0x522>
   14d64:	465a      	mov	r2, fp
   14d66:	01d2      	lsls	r2, r2, #7
   14d68:	d506      	bpl.n	14d78 <__aeabi_ddiv+0x3f8>
   14d6a:	465a      	mov	r2, fp
   14d6c:	4b9b      	ldr	r3, [pc, #620]	; (14fdc <__aeabi_ddiv+0x65c>)
   14d6e:	401a      	ands	r2, r3
   14d70:	2380      	movs	r3, #128	; 0x80
   14d72:	4693      	mov	fp, r2
   14d74:	00db      	lsls	r3, r3, #3
   14d76:	18e3      	adds	r3, r4, r3
   14d78:	4a99      	ldr	r2, [pc, #612]	; (14fe0 <__aeabi_ddiv+0x660>)
   14d7a:	4293      	cmp	r3, r2
   14d7c:	dd68      	ble.n	14e50 <__aeabi_ddiv+0x4d0>
   14d7e:	2301      	movs	r3, #1
   14d80:	9a02      	ldr	r2, [sp, #8]
   14d82:	4c98      	ldr	r4, [pc, #608]	; (14fe4 <__aeabi_ddiv+0x664>)
   14d84:	401a      	ands	r2, r3
   14d86:	2300      	movs	r3, #0
   14d88:	4694      	mov	ip, r2
   14d8a:	4698      	mov	r8, r3
   14d8c:	2200      	movs	r2, #0
   14d8e:	e6c5      	b.n	14b1c <__aeabi_ddiv+0x19c>
   14d90:	2280      	movs	r2, #128	; 0x80
   14d92:	464b      	mov	r3, r9
   14d94:	0312      	lsls	r2, r2, #12
   14d96:	4213      	tst	r3, r2
   14d98:	d00a      	beq.n	14db0 <__aeabi_ddiv+0x430>
   14d9a:	465b      	mov	r3, fp
   14d9c:	4213      	tst	r3, r2
   14d9e:	d106      	bne.n	14dae <__aeabi_ddiv+0x42e>
   14da0:	431a      	orrs	r2, r3
   14da2:	0312      	lsls	r2, r2, #12
   14da4:	0b12      	lsrs	r2, r2, #12
   14da6:	46ac      	mov	ip, r5
   14da8:	4688      	mov	r8, r1
   14daa:	4c8e      	ldr	r4, [pc, #568]	; (14fe4 <__aeabi_ddiv+0x664>)
   14dac:	e6b6      	b.n	14b1c <__aeabi_ddiv+0x19c>
   14dae:	464b      	mov	r3, r9
   14db0:	431a      	orrs	r2, r3
   14db2:	0312      	lsls	r2, r2, #12
   14db4:	0b12      	lsrs	r2, r2, #12
   14db6:	46bc      	mov	ip, r7
   14db8:	4c8a      	ldr	r4, [pc, #552]	; (14fe4 <__aeabi_ddiv+0x664>)
   14dba:	e6af      	b.n	14b1c <__aeabi_ddiv+0x19c>
   14dbc:	0003      	movs	r3, r0
   14dbe:	465a      	mov	r2, fp
   14dc0:	3b28      	subs	r3, #40	; 0x28
   14dc2:	409a      	lsls	r2, r3
   14dc4:	2300      	movs	r3, #0
   14dc6:	4691      	mov	r9, r2
   14dc8:	4698      	mov	r8, r3
   14dca:	e657      	b.n	14a7c <__aeabi_ddiv+0xfc>
   14dcc:	4658      	mov	r0, fp
   14dce:	f001 f92b 	bl	16028 <__clzsi2>
   14dd2:	3020      	adds	r0, #32
   14dd4:	e640      	b.n	14a58 <__aeabi_ddiv+0xd8>
   14dd6:	0003      	movs	r3, r0
   14dd8:	4652      	mov	r2, sl
   14dda:	3b28      	subs	r3, #40	; 0x28
   14ddc:	409a      	lsls	r2, r3
   14dde:	2100      	movs	r1, #0
   14de0:	4693      	mov	fp, r2
   14de2:	e677      	b.n	14ad4 <__aeabi_ddiv+0x154>
   14de4:	f001 f920 	bl	16028 <__clzsi2>
   14de8:	3020      	adds	r0, #32
   14dea:	e65f      	b.n	14aac <__aeabi_ddiv+0x12c>
   14dec:	4588      	cmp	r8, r1
   14dee:	d200      	bcs.n	14df2 <__aeabi_ddiv+0x472>
   14df0:	e6c7      	b.n	14b82 <__aeabi_ddiv+0x202>
   14df2:	464b      	mov	r3, r9
   14df4:	07de      	lsls	r6, r3, #31
   14df6:	085d      	lsrs	r5, r3, #1
   14df8:	4643      	mov	r3, r8
   14dfa:	085b      	lsrs	r3, r3, #1
   14dfc:	431e      	orrs	r6, r3
   14dfe:	4643      	mov	r3, r8
   14e00:	07db      	lsls	r3, r3, #31
   14e02:	469a      	mov	sl, r3
   14e04:	e6c2      	b.n	14b8c <__aeabi_ddiv+0x20c>
   14e06:	2500      	movs	r5, #0
   14e08:	4592      	cmp	sl, r2
   14e0a:	d300      	bcc.n	14e0e <__aeabi_ddiv+0x48e>
   14e0c:	e733      	b.n	14c76 <__aeabi_ddiv+0x2f6>
   14e0e:	9e03      	ldr	r6, [sp, #12]
   14e10:	4659      	mov	r1, fp
   14e12:	46b4      	mov	ip, r6
   14e14:	44e2      	add	sl, ip
   14e16:	45b2      	cmp	sl, r6
   14e18:	41ad      	sbcs	r5, r5
   14e1a:	426d      	negs	r5, r5
   14e1c:	4445      	add	r5, r8
   14e1e:	18eb      	adds	r3, r5, r3
   14e20:	3901      	subs	r1, #1
   14e22:	4598      	cmp	r8, r3
   14e24:	d207      	bcs.n	14e36 <__aeabi_ddiv+0x4b6>
   14e26:	4298      	cmp	r0, r3
   14e28:	d900      	bls.n	14e2c <__aeabi_ddiv+0x4ac>
   14e2a:	e07f      	b.n	14f2c <__aeabi_ddiv+0x5ac>
   14e2c:	d100      	bne.n	14e30 <__aeabi_ddiv+0x4b0>
   14e2e:	e0bc      	b.n	14faa <__aeabi_ddiv+0x62a>
   14e30:	1a1d      	subs	r5, r3, r0
   14e32:	468b      	mov	fp, r1
   14e34:	e71f      	b.n	14c76 <__aeabi_ddiv+0x2f6>
   14e36:	4598      	cmp	r8, r3
   14e38:	d1fa      	bne.n	14e30 <__aeabi_ddiv+0x4b0>
   14e3a:	9d03      	ldr	r5, [sp, #12]
   14e3c:	4555      	cmp	r5, sl
   14e3e:	d9f2      	bls.n	14e26 <__aeabi_ddiv+0x4a6>
   14e40:	4643      	mov	r3, r8
   14e42:	468b      	mov	fp, r1
   14e44:	1a1d      	subs	r5, r3, r0
   14e46:	e716      	b.n	14c76 <__aeabi_ddiv+0x2f6>
   14e48:	469b      	mov	fp, r3
   14e4a:	e6ca      	b.n	14be2 <__aeabi_ddiv+0x262>
   14e4c:	0015      	movs	r5, r2
   14e4e:	e6e7      	b.n	14c20 <__aeabi_ddiv+0x2a0>
   14e50:	465a      	mov	r2, fp
   14e52:	08c9      	lsrs	r1, r1, #3
   14e54:	0752      	lsls	r2, r2, #29
   14e56:	430a      	orrs	r2, r1
   14e58:	055b      	lsls	r3, r3, #21
   14e5a:	4690      	mov	r8, r2
   14e5c:	0d5c      	lsrs	r4, r3, #21
   14e5e:	465a      	mov	r2, fp
   14e60:	2301      	movs	r3, #1
   14e62:	9902      	ldr	r1, [sp, #8]
   14e64:	0252      	lsls	r2, r2, #9
   14e66:	4019      	ands	r1, r3
   14e68:	0b12      	lsrs	r2, r2, #12
   14e6a:	468c      	mov	ip, r1
   14e6c:	e656      	b.n	14b1c <__aeabi_ddiv+0x19c>
   14e6e:	2b00      	cmp	r3, #0
   14e70:	d100      	bne.n	14e74 <__aeabi_ddiv+0x4f4>
   14e72:	e76f      	b.n	14d54 <__aeabi_ddiv+0x3d4>
   14e74:	4446      	add	r6, r8
   14e76:	1e4a      	subs	r2, r1, #1
   14e78:	45b0      	cmp	r8, r6
   14e7a:	d929      	bls.n	14ed0 <__aeabi_ddiv+0x550>
   14e7c:	0011      	movs	r1, r2
   14e7e:	4286      	cmp	r6, r0
   14e80:	d000      	beq.n	14e84 <__aeabi_ddiv+0x504>
   14e82:	e765      	b.n	14d50 <__aeabi_ddiv+0x3d0>
   14e84:	9a03      	ldr	r2, [sp, #12]
   14e86:	4293      	cmp	r3, r2
   14e88:	d000      	beq.n	14e8c <__aeabi_ddiv+0x50c>
   14e8a:	e761      	b.n	14d50 <__aeabi_ddiv+0x3d0>
   14e8c:	e762      	b.n	14d54 <__aeabi_ddiv+0x3d4>
   14e8e:	2101      	movs	r1, #1
   14e90:	4249      	negs	r1, r1
   14e92:	2001      	movs	r0, #1
   14e94:	1ac2      	subs	r2, r0, r3
   14e96:	2a38      	cmp	r2, #56	; 0x38
   14e98:	dd21      	ble.n	14ede <__aeabi_ddiv+0x55e>
   14e9a:	9b02      	ldr	r3, [sp, #8]
   14e9c:	4003      	ands	r3, r0
   14e9e:	469c      	mov	ip, r3
   14ea0:	e638      	b.n	14b14 <__aeabi_ddiv+0x194>
   14ea2:	220f      	movs	r2, #15
   14ea4:	400a      	ands	r2, r1
   14ea6:	2a04      	cmp	r2, #4
   14ea8:	d100      	bne.n	14eac <__aeabi_ddiv+0x52c>
   14eaa:	e75b      	b.n	14d64 <__aeabi_ddiv+0x3e4>
   14eac:	000a      	movs	r2, r1
   14eae:	1d11      	adds	r1, r2, #4
   14eb0:	4291      	cmp	r1, r2
   14eb2:	4192      	sbcs	r2, r2
   14eb4:	4252      	negs	r2, r2
   14eb6:	4493      	add	fp, r2
   14eb8:	e754      	b.n	14d64 <__aeabi_ddiv+0x3e4>
   14eba:	4b47      	ldr	r3, [pc, #284]	; (14fd8 <__aeabi_ddiv+0x658>)
   14ebc:	18e3      	adds	r3, r4, r3
   14ebe:	2b00      	cmp	r3, #0
   14ec0:	dde5      	ble.n	14e8e <__aeabi_ddiv+0x50e>
   14ec2:	2201      	movs	r2, #1
   14ec4:	4252      	negs	r2, r2
   14ec6:	e7f2      	b.n	14eae <__aeabi_ddiv+0x52e>
   14ec8:	001d      	movs	r5, r3
   14eca:	e6fa      	b.n	14cc2 <__aeabi_ddiv+0x342>
   14ecc:	469a      	mov	sl, r3
   14ece:	e71c      	b.n	14d0a <__aeabi_ddiv+0x38a>
   14ed0:	42b0      	cmp	r0, r6
   14ed2:	d839      	bhi.n	14f48 <__aeabi_ddiv+0x5c8>
   14ed4:	d06e      	beq.n	14fb4 <__aeabi_ddiv+0x634>
   14ed6:	0011      	movs	r1, r2
   14ed8:	e73a      	b.n	14d50 <__aeabi_ddiv+0x3d0>
   14eda:	9302      	str	r3, [sp, #8]
   14edc:	e73a      	b.n	14d54 <__aeabi_ddiv+0x3d4>
   14ede:	2a1f      	cmp	r2, #31
   14ee0:	dc3c      	bgt.n	14f5c <__aeabi_ddiv+0x5dc>
   14ee2:	2320      	movs	r3, #32
   14ee4:	1a9b      	subs	r3, r3, r2
   14ee6:	000c      	movs	r4, r1
   14ee8:	4658      	mov	r0, fp
   14eea:	4099      	lsls	r1, r3
   14eec:	4098      	lsls	r0, r3
   14eee:	1e4b      	subs	r3, r1, #1
   14ef0:	4199      	sbcs	r1, r3
   14ef2:	465b      	mov	r3, fp
   14ef4:	40d4      	lsrs	r4, r2
   14ef6:	40d3      	lsrs	r3, r2
   14ef8:	4320      	orrs	r0, r4
   14efa:	4308      	orrs	r0, r1
   14efc:	001a      	movs	r2, r3
   14efe:	0743      	lsls	r3, r0, #29
   14f00:	d009      	beq.n	14f16 <__aeabi_ddiv+0x596>
   14f02:	230f      	movs	r3, #15
   14f04:	4003      	ands	r3, r0
   14f06:	2b04      	cmp	r3, #4
   14f08:	d005      	beq.n	14f16 <__aeabi_ddiv+0x596>
   14f0a:	0001      	movs	r1, r0
   14f0c:	1d08      	adds	r0, r1, #4
   14f0e:	4288      	cmp	r0, r1
   14f10:	419b      	sbcs	r3, r3
   14f12:	425b      	negs	r3, r3
   14f14:	18d2      	adds	r2, r2, r3
   14f16:	0213      	lsls	r3, r2, #8
   14f18:	d53a      	bpl.n	14f90 <__aeabi_ddiv+0x610>
   14f1a:	2301      	movs	r3, #1
   14f1c:	9a02      	ldr	r2, [sp, #8]
   14f1e:	2401      	movs	r4, #1
   14f20:	401a      	ands	r2, r3
   14f22:	2300      	movs	r3, #0
   14f24:	4694      	mov	ip, r2
   14f26:	4698      	mov	r8, r3
   14f28:	2200      	movs	r2, #0
   14f2a:	e5f7      	b.n	14b1c <__aeabi_ddiv+0x19c>
   14f2c:	2102      	movs	r1, #2
   14f2e:	4249      	negs	r1, r1
   14f30:	468c      	mov	ip, r1
   14f32:	9d03      	ldr	r5, [sp, #12]
   14f34:	44e3      	add	fp, ip
   14f36:	46ac      	mov	ip, r5
   14f38:	44e2      	add	sl, ip
   14f3a:	45aa      	cmp	sl, r5
   14f3c:	41ad      	sbcs	r5, r5
   14f3e:	426d      	negs	r5, r5
   14f40:	4445      	add	r5, r8
   14f42:	18ed      	adds	r5, r5, r3
   14f44:	1a2d      	subs	r5, r5, r0
   14f46:	e696      	b.n	14c76 <__aeabi_ddiv+0x2f6>
   14f48:	1e8a      	subs	r2, r1, #2
   14f4a:	9903      	ldr	r1, [sp, #12]
   14f4c:	004d      	lsls	r5, r1, #1
   14f4e:	428d      	cmp	r5, r1
   14f50:	4189      	sbcs	r1, r1
   14f52:	4249      	negs	r1, r1
   14f54:	4441      	add	r1, r8
   14f56:	1876      	adds	r6, r6, r1
   14f58:	9503      	str	r5, [sp, #12]
   14f5a:	e78f      	b.n	14e7c <__aeabi_ddiv+0x4fc>
   14f5c:	201f      	movs	r0, #31
   14f5e:	4240      	negs	r0, r0
   14f60:	1ac3      	subs	r3, r0, r3
   14f62:	4658      	mov	r0, fp
   14f64:	40d8      	lsrs	r0, r3
   14f66:	0003      	movs	r3, r0
   14f68:	2a20      	cmp	r2, #32
   14f6a:	d028      	beq.n	14fbe <__aeabi_ddiv+0x63e>
   14f6c:	2040      	movs	r0, #64	; 0x40
   14f6e:	465d      	mov	r5, fp
   14f70:	1a82      	subs	r2, r0, r2
   14f72:	4095      	lsls	r5, r2
   14f74:	4329      	orrs	r1, r5
   14f76:	1e4a      	subs	r2, r1, #1
   14f78:	4191      	sbcs	r1, r2
   14f7a:	4319      	orrs	r1, r3
   14f7c:	2307      	movs	r3, #7
   14f7e:	2200      	movs	r2, #0
   14f80:	400b      	ands	r3, r1
   14f82:	d009      	beq.n	14f98 <__aeabi_ddiv+0x618>
   14f84:	230f      	movs	r3, #15
   14f86:	2200      	movs	r2, #0
   14f88:	400b      	ands	r3, r1
   14f8a:	0008      	movs	r0, r1
   14f8c:	2b04      	cmp	r3, #4
   14f8e:	d1bd      	bne.n	14f0c <__aeabi_ddiv+0x58c>
   14f90:	0001      	movs	r1, r0
   14f92:	0753      	lsls	r3, r2, #29
   14f94:	0252      	lsls	r2, r2, #9
   14f96:	0b12      	lsrs	r2, r2, #12
   14f98:	08c9      	lsrs	r1, r1, #3
   14f9a:	4319      	orrs	r1, r3
   14f9c:	2301      	movs	r3, #1
   14f9e:	4688      	mov	r8, r1
   14fa0:	9902      	ldr	r1, [sp, #8]
   14fa2:	2400      	movs	r4, #0
   14fa4:	4019      	ands	r1, r3
   14fa6:	468c      	mov	ip, r1
   14fa8:	e5b8      	b.n	14b1c <__aeabi_ddiv+0x19c>
   14faa:	4552      	cmp	r2, sl
   14fac:	d8be      	bhi.n	14f2c <__aeabi_ddiv+0x5ac>
   14fae:	468b      	mov	fp, r1
   14fb0:	2500      	movs	r5, #0
   14fb2:	e660      	b.n	14c76 <__aeabi_ddiv+0x2f6>
   14fb4:	9d03      	ldr	r5, [sp, #12]
   14fb6:	429d      	cmp	r5, r3
   14fb8:	d3c6      	bcc.n	14f48 <__aeabi_ddiv+0x5c8>
   14fba:	0011      	movs	r1, r2
   14fbc:	e762      	b.n	14e84 <__aeabi_ddiv+0x504>
   14fbe:	2500      	movs	r5, #0
   14fc0:	e7d8      	b.n	14f74 <__aeabi_ddiv+0x5f4>
   14fc2:	2280      	movs	r2, #128	; 0x80
   14fc4:	465b      	mov	r3, fp
   14fc6:	0312      	lsls	r2, r2, #12
   14fc8:	431a      	orrs	r2, r3
   14fca:	9b01      	ldr	r3, [sp, #4]
   14fcc:	0312      	lsls	r2, r2, #12
   14fce:	0b12      	lsrs	r2, r2, #12
   14fd0:	469c      	mov	ip, r3
   14fd2:	4688      	mov	r8, r1
   14fd4:	4c03      	ldr	r4, [pc, #12]	; (14fe4 <__aeabi_ddiv+0x664>)
   14fd6:	e5a1      	b.n	14b1c <__aeabi_ddiv+0x19c>
   14fd8:	000003ff 	.word	0x000003ff
   14fdc:	feffffff 	.word	0xfeffffff
   14fe0:	000007fe 	.word	0x000007fe
   14fe4:	000007ff 	.word	0x000007ff

00014fe8 <__eqdf2>:
   14fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
   14fea:	464f      	mov	r7, r9
   14fec:	4646      	mov	r6, r8
   14fee:	46d6      	mov	lr, sl
   14ff0:	005c      	lsls	r4, r3, #1
   14ff2:	b5c0      	push	{r6, r7, lr}
   14ff4:	031f      	lsls	r7, r3, #12
   14ff6:	0fdb      	lsrs	r3, r3, #31
   14ff8:	469a      	mov	sl, r3
   14ffa:	4b17      	ldr	r3, [pc, #92]	; (15058 <__eqdf2+0x70>)
   14ffc:	030e      	lsls	r6, r1, #12
   14ffe:	004d      	lsls	r5, r1, #1
   15000:	4684      	mov	ip, r0
   15002:	4680      	mov	r8, r0
   15004:	0b36      	lsrs	r6, r6, #12
   15006:	0d6d      	lsrs	r5, r5, #21
   15008:	0fc9      	lsrs	r1, r1, #31
   1500a:	4691      	mov	r9, r2
   1500c:	0b3f      	lsrs	r7, r7, #12
   1500e:	0d64      	lsrs	r4, r4, #21
   15010:	2001      	movs	r0, #1
   15012:	429d      	cmp	r5, r3
   15014:	d008      	beq.n	15028 <__eqdf2+0x40>
   15016:	429c      	cmp	r4, r3
   15018:	d001      	beq.n	1501e <__eqdf2+0x36>
   1501a:	42a5      	cmp	r5, r4
   1501c:	d00b      	beq.n	15036 <__eqdf2+0x4e>
   1501e:	bc1c      	pop	{r2, r3, r4}
   15020:	4690      	mov	r8, r2
   15022:	4699      	mov	r9, r3
   15024:	46a2      	mov	sl, r4
   15026:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15028:	4663      	mov	r3, ip
   1502a:	4333      	orrs	r3, r6
   1502c:	d1f7      	bne.n	1501e <__eqdf2+0x36>
   1502e:	42ac      	cmp	r4, r5
   15030:	d1f5      	bne.n	1501e <__eqdf2+0x36>
   15032:	433a      	orrs	r2, r7
   15034:	d1f3      	bne.n	1501e <__eqdf2+0x36>
   15036:	2001      	movs	r0, #1
   15038:	42be      	cmp	r6, r7
   1503a:	d1f0      	bne.n	1501e <__eqdf2+0x36>
   1503c:	45c8      	cmp	r8, r9
   1503e:	d1ee      	bne.n	1501e <__eqdf2+0x36>
   15040:	4551      	cmp	r1, sl
   15042:	d007      	beq.n	15054 <__eqdf2+0x6c>
   15044:	2d00      	cmp	r5, #0
   15046:	d1ea      	bne.n	1501e <__eqdf2+0x36>
   15048:	4663      	mov	r3, ip
   1504a:	431e      	orrs	r6, r3
   1504c:	0030      	movs	r0, r6
   1504e:	1e46      	subs	r6, r0, #1
   15050:	41b0      	sbcs	r0, r6
   15052:	e7e4      	b.n	1501e <__eqdf2+0x36>
   15054:	2000      	movs	r0, #0
   15056:	e7e2      	b.n	1501e <__eqdf2+0x36>
   15058:	000007ff 	.word	0x000007ff

0001505c <__gedf2>:
   1505c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1505e:	4645      	mov	r5, r8
   15060:	46de      	mov	lr, fp
   15062:	4657      	mov	r7, sl
   15064:	464e      	mov	r6, r9
   15066:	b5e0      	push	{r5, r6, r7, lr}
   15068:	031f      	lsls	r7, r3, #12
   1506a:	0b3d      	lsrs	r5, r7, #12
   1506c:	4f2c      	ldr	r7, [pc, #176]	; (15120 <__gedf2+0xc4>)
   1506e:	030e      	lsls	r6, r1, #12
   15070:	004c      	lsls	r4, r1, #1
   15072:	46ab      	mov	fp, r5
   15074:	005d      	lsls	r5, r3, #1
   15076:	4684      	mov	ip, r0
   15078:	0b36      	lsrs	r6, r6, #12
   1507a:	0d64      	lsrs	r4, r4, #21
   1507c:	0fc9      	lsrs	r1, r1, #31
   1507e:	4690      	mov	r8, r2
   15080:	0d6d      	lsrs	r5, r5, #21
   15082:	0fdb      	lsrs	r3, r3, #31
   15084:	42bc      	cmp	r4, r7
   15086:	d02a      	beq.n	150de <__gedf2+0x82>
   15088:	4f25      	ldr	r7, [pc, #148]	; (15120 <__gedf2+0xc4>)
   1508a:	42bd      	cmp	r5, r7
   1508c:	d02d      	beq.n	150ea <__gedf2+0x8e>
   1508e:	2c00      	cmp	r4, #0
   15090:	d10f      	bne.n	150b2 <__gedf2+0x56>
   15092:	4330      	orrs	r0, r6
   15094:	0007      	movs	r7, r0
   15096:	4681      	mov	r9, r0
   15098:	4278      	negs	r0, r7
   1509a:	4178      	adcs	r0, r7
   1509c:	b2c0      	uxtb	r0, r0
   1509e:	2d00      	cmp	r5, #0
   150a0:	d117      	bne.n	150d2 <__gedf2+0x76>
   150a2:	465f      	mov	r7, fp
   150a4:	433a      	orrs	r2, r7
   150a6:	d114      	bne.n	150d2 <__gedf2+0x76>
   150a8:	464b      	mov	r3, r9
   150aa:	2000      	movs	r0, #0
   150ac:	2b00      	cmp	r3, #0
   150ae:	d00a      	beq.n	150c6 <__gedf2+0x6a>
   150b0:	e006      	b.n	150c0 <__gedf2+0x64>
   150b2:	2d00      	cmp	r5, #0
   150b4:	d102      	bne.n	150bc <__gedf2+0x60>
   150b6:	4658      	mov	r0, fp
   150b8:	4302      	orrs	r2, r0
   150ba:	d001      	beq.n	150c0 <__gedf2+0x64>
   150bc:	4299      	cmp	r1, r3
   150be:	d018      	beq.n	150f2 <__gedf2+0x96>
   150c0:	4248      	negs	r0, r1
   150c2:	2101      	movs	r1, #1
   150c4:	4308      	orrs	r0, r1
   150c6:	bc3c      	pop	{r2, r3, r4, r5}
   150c8:	4690      	mov	r8, r2
   150ca:	4699      	mov	r9, r3
   150cc:	46a2      	mov	sl, r4
   150ce:	46ab      	mov	fp, r5
   150d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   150d2:	2800      	cmp	r0, #0
   150d4:	d0f2      	beq.n	150bc <__gedf2+0x60>
   150d6:	2001      	movs	r0, #1
   150d8:	3b01      	subs	r3, #1
   150da:	4318      	orrs	r0, r3
   150dc:	e7f3      	b.n	150c6 <__gedf2+0x6a>
   150de:	0037      	movs	r7, r6
   150e0:	4307      	orrs	r7, r0
   150e2:	d0d1      	beq.n	15088 <__gedf2+0x2c>
   150e4:	2002      	movs	r0, #2
   150e6:	4240      	negs	r0, r0
   150e8:	e7ed      	b.n	150c6 <__gedf2+0x6a>
   150ea:	465f      	mov	r7, fp
   150ec:	4317      	orrs	r7, r2
   150ee:	d0ce      	beq.n	1508e <__gedf2+0x32>
   150f0:	e7f8      	b.n	150e4 <__gedf2+0x88>
   150f2:	42ac      	cmp	r4, r5
   150f4:	dce4      	bgt.n	150c0 <__gedf2+0x64>
   150f6:	da03      	bge.n	15100 <__gedf2+0xa4>
   150f8:	1e48      	subs	r0, r1, #1
   150fa:	2101      	movs	r1, #1
   150fc:	4308      	orrs	r0, r1
   150fe:	e7e2      	b.n	150c6 <__gedf2+0x6a>
   15100:	455e      	cmp	r6, fp
   15102:	d8dd      	bhi.n	150c0 <__gedf2+0x64>
   15104:	d006      	beq.n	15114 <__gedf2+0xb8>
   15106:	2000      	movs	r0, #0
   15108:	455e      	cmp	r6, fp
   1510a:	d2dc      	bcs.n	150c6 <__gedf2+0x6a>
   1510c:	2301      	movs	r3, #1
   1510e:	1e48      	subs	r0, r1, #1
   15110:	4318      	orrs	r0, r3
   15112:	e7d8      	b.n	150c6 <__gedf2+0x6a>
   15114:	45c4      	cmp	ip, r8
   15116:	d8d3      	bhi.n	150c0 <__gedf2+0x64>
   15118:	2000      	movs	r0, #0
   1511a:	45c4      	cmp	ip, r8
   1511c:	d3f6      	bcc.n	1510c <__gedf2+0xb0>
   1511e:	e7d2      	b.n	150c6 <__gedf2+0x6a>
   15120:	000007ff 	.word	0x000007ff

00015124 <__ledf2>:
   15124:	b5f0      	push	{r4, r5, r6, r7, lr}
   15126:	464e      	mov	r6, r9
   15128:	4645      	mov	r5, r8
   1512a:	46de      	mov	lr, fp
   1512c:	4657      	mov	r7, sl
   1512e:	005c      	lsls	r4, r3, #1
   15130:	b5e0      	push	{r5, r6, r7, lr}
   15132:	031f      	lsls	r7, r3, #12
   15134:	0fdb      	lsrs	r3, r3, #31
   15136:	4699      	mov	r9, r3
   15138:	4b2a      	ldr	r3, [pc, #168]	; (151e4 <__ledf2+0xc0>)
   1513a:	030e      	lsls	r6, r1, #12
   1513c:	004d      	lsls	r5, r1, #1
   1513e:	0fc9      	lsrs	r1, r1, #31
   15140:	4684      	mov	ip, r0
   15142:	0b36      	lsrs	r6, r6, #12
   15144:	0d6d      	lsrs	r5, r5, #21
   15146:	468b      	mov	fp, r1
   15148:	4690      	mov	r8, r2
   1514a:	0b3f      	lsrs	r7, r7, #12
   1514c:	0d64      	lsrs	r4, r4, #21
   1514e:	429d      	cmp	r5, r3
   15150:	d020      	beq.n	15194 <__ledf2+0x70>
   15152:	4b24      	ldr	r3, [pc, #144]	; (151e4 <__ledf2+0xc0>)
   15154:	429c      	cmp	r4, r3
   15156:	d022      	beq.n	1519e <__ledf2+0x7a>
   15158:	2d00      	cmp	r5, #0
   1515a:	d112      	bne.n	15182 <__ledf2+0x5e>
   1515c:	4330      	orrs	r0, r6
   1515e:	4243      	negs	r3, r0
   15160:	4143      	adcs	r3, r0
   15162:	b2db      	uxtb	r3, r3
   15164:	2c00      	cmp	r4, #0
   15166:	d01f      	beq.n	151a8 <__ledf2+0x84>
   15168:	2b00      	cmp	r3, #0
   1516a:	d00c      	beq.n	15186 <__ledf2+0x62>
   1516c:	464b      	mov	r3, r9
   1516e:	2001      	movs	r0, #1
   15170:	3b01      	subs	r3, #1
   15172:	4303      	orrs	r3, r0
   15174:	0018      	movs	r0, r3
   15176:	bc3c      	pop	{r2, r3, r4, r5}
   15178:	4690      	mov	r8, r2
   1517a:	4699      	mov	r9, r3
   1517c:	46a2      	mov	sl, r4
   1517e:	46ab      	mov	fp, r5
   15180:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15182:	2c00      	cmp	r4, #0
   15184:	d016      	beq.n	151b4 <__ledf2+0x90>
   15186:	45cb      	cmp	fp, r9
   15188:	d017      	beq.n	151ba <__ledf2+0x96>
   1518a:	465b      	mov	r3, fp
   1518c:	4259      	negs	r1, r3
   1518e:	2301      	movs	r3, #1
   15190:	430b      	orrs	r3, r1
   15192:	e7ef      	b.n	15174 <__ledf2+0x50>
   15194:	0031      	movs	r1, r6
   15196:	2302      	movs	r3, #2
   15198:	4301      	orrs	r1, r0
   1519a:	d1eb      	bne.n	15174 <__ledf2+0x50>
   1519c:	e7d9      	b.n	15152 <__ledf2+0x2e>
   1519e:	0039      	movs	r1, r7
   151a0:	2302      	movs	r3, #2
   151a2:	4311      	orrs	r1, r2
   151a4:	d1e6      	bne.n	15174 <__ledf2+0x50>
   151a6:	e7d7      	b.n	15158 <__ledf2+0x34>
   151a8:	433a      	orrs	r2, r7
   151aa:	d1dd      	bne.n	15168 <__ledf2+0x44>
   151ac:	2300      	movs	r3, #0
   151ae:	2800      	cmp	r0, #0
   151b0:	d0e0      	beq.n	15174 <__ledf2+0x50>
   151b2:	e7ea      	b.n	1518a <__ledf2+0x66>
   151b4:	433a      	orrs	r2, r7
   151b6:	d1e6      	bne.n	15186 <__ledf2+0x62>
   151b8:	e7e7      	b.n	1518a <__ledf2+0x66>
   151ba:	42a5      	cmp	r5, r4
   151bc:	dce5      	bgt.n	1518a <__ledf2+0x66>
   151be:	db05      	blt.n	151cc <__ledf2+0xa8>
   151c0:	42be      	cmp	r6, r7
   151c2:	d8e2      	bhi.n	1518a <__ledf2+0x66>
   151c4:	d007      	beq.n	151d6 <__ledf2+0xb2>
   151c6:	2300      	movs	r3, #0
   151c8:	42be      	cmp	r6, r7
   151ca:	d2d3      	bcs.n	15174 <__ledf2+0x50>
   151cc:	4659      	mov	r1, fp
   151ce:	2301      	movs	r3, #1
   151d0:	3901      	subs	r1, #1
   151d2:	430b      	orrs	r3, r1
   151d4:	e7ce      	b.n	15174 <__ledf2+0x50>
   151d6:	45c4      	cmp	ip, r8
   151d8:	d8d7      	bhi.n	1518a <__ledf2+0x66>
   151da:	2300      	movs	r3, #0
   151dc:	45c4      	cmp	ip, r8
   151de:	d3f5      	bcc.n	151cc <__ledf2+0xa8>
   151e0:	e7c8      	b.n	15174 <__ledf2+0x50>
   151e2:	46c0      	nop			; (mov r8, r8)
   151e4:	000007ff 	.word	0x000007ff

000151e8 <__aeabi_dmul>:
   151e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   151ea:	4657      	mov	r7, sl
   151ec:	4645      	mov	r5, r8
   151ee:	46de      	mov	lr, fp
   151f0:	464e      	mov	r6, r9
   151f2:	b5e0      	push	{r5, r6, r7, lr}
   151f4:	030c      	lsls	r4, r1, #12
   151f6:	4698      	mov	r8, r3
   151f8:	004e      	lsls	r6, r1, #1
   151fa:	0b23      	lsrs	r3, r4, #12
   151fc:	b087      	sub	sp, #28
   151fe:	0007      	movs	r7, r0
   15200:	4692      	mov	sl, r2
   15202:	469b      	mov	fp, r3
   15204:	0d76      	lsrs	r6, r6, #21
   15206:	0fcd      	lsrs	r5, r1, #31
   15208:	2e00      	cmp	r6, #0
   1520a:	d06b      	beq.n	152e4 <__aeabi_dmul+0xfc>
   1520c:	4b6d      	ldr	r3, [pc, #436]	; (153c4 <__aeabi_dmul+0x1dc>)
   1520e:	429e      	cmp	r6, r3
   15210:	d035      	beq.n	1527e <__aeabi_dmul+0x96>
   15212:	2480      	movs	r4, #128	; 0x80
   15214:	465b      	mov	r3, fp
   15216:	0f42      	lsrs	r2, r0, #29
   15218:	0424      	lsls	r4, r4, #16
   1521a:	00db      	lsls	r3, r3, #3
   1521c:	4314      	orrs	r4, r2
   1521e:	431c      	orrs	r4, r3
   15220:	00c3      	lsls	r3, r0, #3
   15222:	4699      	mov	r9, r3
   15224:	4b68      	ldr	r3, [pc, #416]	; (153c8 <__aeabi_dmul+0x1e0>)
   15226:	46a3      	mov	fp, r4
   15228:	469c      	mov	ip, r3
   1522a:	2300      	movs	r3, #0
   1522c:	2700      	movs	r7, #0
   1522e:	4466      	add	r6, ip
   15230:	9302      	str	r3, [sp, #8]
   15232:	4643      	mov	r3, r8
   15234:	031c      	lsls	r4, r3, #12
   15236:	005a      	lsls	r2, r3, #1
   15238:	0fdb      	lsrs	r3, r3, #31
   1523a:	4650      	mov	r0, sl
   1523c:	0b24      	lsrs	r4, r4, #12
   1523e:	0d52      	lsrs	r2, r2, #21
   15240:	4698      	mov	r8, r3
   15242:	d100      	bne.n	15246 <__aeabi_dmul+0x5e>
   15244:	e076      	b.n	15334 <__aeabi_dmul+0x14c>
   15246:	4b5f      	ldr	r3, [pc, #380]	; (153c4 <__aeabi_dmul+0x1dc>)
   15248:	429a      	cmp	r2, r3
   1524a:	d06d      	beq.n	15328 <__aeabi_dmul+0x140>
   1524c:	2380      	movs	r3, #128	; 0x80
   1524e:	0f41      	lsrs	r1, r0, #29
   15250:	041b      	lsls	r3, r3, #16
   15252:	430b      	orrs	r3, r1
   15254:	495c      	ldr	r1, [pc, #368]	; (153c8 <__aeabi_dmul+0x1e0>)
   15256:	00e4      	lsls	r4, r4, #3
   15258:	468c      	mov	ip, r1
   1525a:	431c      	orrs	r4, r3
   1525c:	00c3      	lsls	r3, r0, #3
   1525e:	2000      	movs	r0, #0
   15260:	4462      	add	r2, ip
   15262:	4641      	mov	r1, r8
   15264:	18b6      	adds	r6, r6, r2
   15266:	4069      	eors	r1, r5
   15268:	1c72      	adds	r2, r6, #1
   1526a:	9101      	str	r1, [sp, #4]
   1526c:	4694      	mov	ip, r2
   1526e:	4307      	orrs	r7, r0
   15270:	2f0f      	cmp	r7, #15
   15272:	d900      	bls.n	15276 <__aeabi_dmul+0x8e>
   15274:	e0b0      	b.n	153d8 <__aeabi_dmul+0x1f0>
   15276:	4a55      	ldr	r2, [pc, #340]	; (153cc <__aeabi_dmul+0x1e4>)
   15278:	00bf      	lsls	r7, r7, #2
   1527a:	59d2      	ldr	r2, [r2, r7]
   1527c:	4697      	mov	pc, r2
   1527e:	465b      	mov	r3, fp
   15280:	4303      	orrs	r3, r0
   15282:	4699      	mov	r9, r3
   15284:	d000      	beq.n	15288 <__aeabi_dmul+0xa0>
   15286:	e087      	b.n	15398 <__aeabi_dmul+0x1b0>
   15288:	2300      	movs	r3, #0
   1528a:	469b      	mov	fp, r3
   1528c:	3302      	adds	r3, #2
   1528e:	2708      	movs	r7, #8
   15290:	9302      	str	r3, [sp, #8]
   15292:	e7ce      	b.n	15232 <__aeabi_dmul+0x4a>
   15294:	4642      	mov	r2, r8
   15296:	9201      	str	r2, [sp, #4]
   15298:	2802      	cmp	r0, #2
   1529a:	d067      	beq.n	1536c <__aeabi_dmul+0x184>
   1529c:	2803      	cmp	r0, #3
   1529e:	d100      	bne.n	152a2 <__aeabi_dmul+0xba>
   152a0:	e20e      	b.n	156c0 <__aeabi_dmul+0x4d8>
   152a2:	2801      	cmp	r0, #1
   152a4:	d000      	beq.n	152a8 <__aeabi_dmul+0xc0>
   152a6:	e162      	b.n	1556e <__aeabi_dmul+0x386>
   152a8:	2300      	movs	r3, #0
   152aa:	2400      	movs	r4, #0
   152ac:	2200      	movs	r2, #0
   152ae:	4699      	mov	r9, r3
   152b0:	9901      	ldr	r1, [sp, #4]
   152b2:	4001      	ands	r1, r0
   152b4:	b2cd      	uxtb	r5, r1
   152b6:	2100      	movs	r1, #0
   152b8:	0312      	lsls	r2, r2, #12
   152ba:	0d0b      	lsrs	r3, r1, #20
   152bc:	0b12      	lsrs	r2, r2, #12
   152be:	051b      	lsls	r3, r3, #20
   152c0:	4313      	orrs	r3, r2
   152c2:	4a43      	ldr	r2, [pc, #268]	; (153d0 <__aeabi_dmul+0x1e8>)
   152c4:	0524      	lsls	r4, r4, #20
   152c6:	4013      	ands	r3, r2
   152c8:	431c      	orrs	r4, r3
   152ca:	0064      	lsls	r4, r4, #1
   152cc:	07ed      	lsls	r5, r5, #31
   152ce:	0864      	lsrs	r4, r4, #1
   152d0:	432c      	orrs	r4, r5
   152d2:	4648      	mov	r0, r9
   152d4:	0021      	movs	r1, r4
   152d6:	b007      	add	sp, #28
   152d8:	bc3c      	pop	{r2, r3, r4, r5}
   152da:	4690      	mov	r8, r2
   152dc:	4699      	mov	r9, r3
   152de:	46a2      	mov	sl, r4
   152e0:	46ab      	mov	fp, r5
   152e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   152e4:	4303      	orrs	r3, r0
   152e6:	4699      	mov	r9, r3
   152e8:	d04f      	beq.n	1538a <__aeabi_dmul+0x1a2>
   152ea:	465b      	mov	r3, fp
   152ec:	2b00      	cmp	r3, #0
   152ee:	d100      	bne.n	152f2 <__aeabi_dmul+0x10a>
   152f0:	e189      	b.n	15606 <__aeabi_dmul+0x41e>
   152f2:	4658      	mov	r0, fp
   152f4:	f000 fe98 	bl	16028 <__clzsi2>
   152f8:	0003      	movs	r3, r0
   152fa:	3b0b      	subs	r3, #11
   152fc:	2b1c      	cmp	r3, #28
   152fe:	dd00      	ble.n	15302 <__aeabi_dmul+0x11a>
   15300:	e17a      	b.n	155f8 <__aeabi_dmul+0x410>
   15302:	221d      	movs	r2, #29
   15304:	1ad3      	subs	r3, r2, r3
   15306:	003a      	movs	r2, r7
   15308:	0001      	movs	r1, r0
   1530a:	465c      	mov	r4, fp
   1530c:	40da      	lsrs	r2, r3
   1530e:	3908      	subs	r1, #8
   15310:	408c      	lsls	r4, r1
   15312:	0013      	movs	r3, r2
   15314:	408f      	lsls	r7, r1
   15316:	4323      	orrs	r3, r4
   15318:	469b      	mov	fp, r3
   1531a:	46b9      	mov	r9, r7
   1531c:	2300      	movs	r3, #0
   1531e:	4e2d      	ldr	r6, [pc, #180]	; (153d4 <__aeabi_dmul+0x1ec>)
   15320:	2700      	movs	r7, #0
   15322:	1a36      	subs	r6, r6, r0
   15324:	9302      	str	r3, [sp, #8]
   15326:	e784      	b.n	15232 <__aeabi_dmul+0x4a>
   15328:	4653      	mov	r3, sl
   1532a:	4323      	orrs	r3, r4
   1532c:	d12a      	bne.n	15384 <__aeabi_dmul+0x19c>
   1532e:	2400      	movs	r4, #0
   15330:	2002      	movs	r0, #2
   15332:	e796      	b.n	15262 <__aeabi_dmul+0x7a>
   15334:	4653      	mov	r3, sl
   15336:	4323      	orrs	r3, r4
   15338:	d020      	beq.n	1537c <__aeabi_dmul+0x194>
   1533a:	2c00      	cmp	r4, #0
   1533c:	d100      	bne.n	15340 <__aeabi_dmul+0x158>
   1533e:	e157      	b.n	155f0 <__aeabi_dmul+0x408>
   15340:	0020      	movs	r0, r4
   15342:	f000 fe71 	bl	16028 <__clzsi2>
   15346:	0003      	movs	r3, r0
   15348:	3b0b      	subs	r3, #11
   1534a:	2b1c      	cmp	r3, #28
   1534c:	dd00      	ble.n	15350 <__aeabi_dmul+0x168>
   1534e:	e149      	b.n	155e4 <__aeabi_dmul+0x3fc>
   15350:	211d      	movs	r1, #29
   15352:	1acb      	subs	r3, r1, r3
   15354:	4651      	mov	r1, sl
   15356:	0002      	movs	r2, r0
   15358:	40d9      	lsrs	r1, r3
   1535a:	4653      	mov	r3, sl
   1535c:	3a08      	subs	r2, #8
   1535e:	4094      	lsls	r4, r2
   15360:	4093      	lsls	r3, r2
   15362:	430c      	orrs	r4, r1
   15364:	4a1b      	ldr	r2, [pc, #108]	; (153d4 <__aeabi_dmul+0x1ec>)
   15366:	1a12      	subs	r2, r2, r0
   15368:	2000      	movs	r0, #0
   1536a:	e77a      	b.n	15262 <__aeabi_dmul+0x7a>
   1536c:	2501      	movs	r5, #1
   1536e:	9b01      	ldr	r3, [sp, #4]
   15370:	4c14      	ldr	r4, [pc, #80]	; (153c4 <__aeabi_dmul+0x1dc>)
   15372:	401d      	ands	r5, r3
   15374:	2300      	movs	r3, #0
   15376:	2200      	movs	r2, #0
   15378:	4699      	mov	r9, r3
   1537a:	e79c      	b.n	152b6 <__aeabi_dmul+0xce>
   1537c:	2400      	movs	r4, #0
   1537e:	2200      	movs	r2, #0
   15380:	2001      	movs	r0, #1
   15382:	e76e      	b.n	15262 <__aeabi_dmul+0x7a>
   15384:	4653      	mov	r3, sl
   15386:	2003      	movs	r0, #3
   15388:	e76b      	b.n	15262 <__aeabi_dmul+0x7a>
   1538a:	2300      	movs	r3, #0
   1538c:	469b      	mov	fp, r3
   1538e:	3301      	adds	r3, #1
   15390:	2704      	movs	r7, #4
   15392:	2600      	movs	r6, #0
   15394:	9302      	str	r3, [sp, #8]
   15396:	e74c      	b.n	15232 <__aeabi_dmul+0x4a>
   15398:	2303      	movs	r3, #3
   1539a:	4681      	mov	r9, r0
   1539c:	270c      	movs	r7, #12
   1539e:	9302      	str	r3, [sp, #8]
   153a0:	e747      	b.n	15232 <__aeabi_dmul+0x4a>
   153a2:	2280      	movs	r2, #128	; 0x80
   153a4:	2300      	movs	r3, #0
   153a6:	2500      	movs	r5, #0
   153a8:	0312      	lsls	r2, r2, #12
   153aa:	4699      	mov	r9, r3
   153ac:	4c05      	ldr	r4, [pc, #20]	; (153c4 <__aeabi_dmul+0x1dc>)
   153ae:	e782      	b.n	152b6 <__aeabi_dmul+0xce>
   153b0:	465c      	mov	r4, fp
   153b2:	464b      	mov	r3, r9
   153b4:	9802      	ldr	r0, [sp, #8]
   153b6:	e76f      	b.n	15298 <__aeabi_dmul+0xb0>
   153b8:	465c      	mov	r4, fp
   153ba:	464b      	mov	r3, r9
   153bc:	9501      	str	r5, [sp, #4]
   153be:	9802      	ldr	r0, [sp, #8]
   153c0:	e76a      	b.n	15298 <__aeabi_dmul+0xb0>
   153c2:	46c0      	nop			; (mov r8, r8)
   153c4:	000007ff 	.word	0x000007ff
   153c8:	fffffc01 	.word	0xfffffc01
   153cc:	00018434 	.word	0x00018434
   153d0:	800fffff 	.word	0x800fffff
   153d4:	fffffc0d 	.word	0xfffffc0d
   153d8:	464a      	mov	r2, r9
   153da:	4649      	mov	r1, r9
   153dc:	0c17      	lsrs	r7, r2, #16
   153de:	0c1a      	lsrs	r2, r3, #16
   153e0:	041b      	lsls	r3, r3, #16
   153e2:	0c1b      	lsrs	r3, r3, #16
   153e4:	0408      	lsls	r0, r1, #16
   153e6:	0019      	movs	r1, r3
   153e8:	0c00      	lsrs	r0, r0, #16
   153ea:	4341      	muls	r1, r0
   153ec:	0015      	movs	r5, r2
   153ee:	4688      	mov	r8, r1
   153f0:	0019      	movs	r1, r3
   153f2:	437d      	muls	r5, r7
   153f4:	4379      	muls	r1, r7
   153f6:	9503      	str	r5, [sp, #12]
   153f8:	4689      	mov	r9, r1
   153fa:	0029      	movs	r1, r5
   153fc:	0015      	movs	r5, r2
   153fe:	4345      	muls	r5, r0
   15400:	444d      	add	r5, r9
   15402:	9502      	str	r5, [sp, #8]
   15404:	4645      	mov	r5, r8
   15406:	0c2d      	lsrs	r5, r5, #16
   15408:	46aa      	mov	sl, r5
   1540a:	9d02      	ldr	r5, [sp, #8]
   1540c:	4455      	add	r5, sl
   1540e:	45a9      	cmp	r9, r5
   15410:	d906      	bls.n	15420 <__aeabi_dmul+0x238>
   15412:	468a      	mov	sl, r1
   15414:	2180      	movs	r1, #128	; 0x80
   15416:	0249      	lsls	r1, r1, #9
   15418:	4689      	mov	r9, r1
   1541a:	44ca      	add	sl, r9
   1541c:	4651      	mov	r1, sl
   1541e:	9103      	str	r1, [sp, #12]
   15420:	0c29      	lsrs	r1, r5, #16
   15422:	9104      	str	r1, [sp, #16]
   15424:	4641      	mov	r1, r8
   15426:	0409      	lsls	r1, r1, #16
   15428:	042d      	lsls	r5, r5, #16
   1542a:	0c09      	lsrs	r1, r1, #16
   1542c:	4688      	mov	r8, r1
   1542e:	0029      	movs	r1, r5
   15430:	0c25      	lsrs	r5, r4, #16
   15432:	0424      	lsls	r4, r4, #16
   15434:	4441      	add	r1, r8
   15436:	0c24      	lsrs	r4, r4, #16
   15438:	9105      	str	r1, [sp, #20]
   1543a:	0021      	movs	r1, r4
   1543c:	4341      	muls	r1, r0
   1543e:	4688      	mov	r8, r1
   15440:	0021      	movs	r1, r4
   15442:	4379      	muls	r1, r7
   15444:	468a      	mov	sl, r1
   15446:	4368      	muls	r0, r5
   15448:	4641      	mov	r1, r8
   1544a:	4450      	add	r0, sl
   1544c:	4681      	mov	r9, r0
   1544e:	0c08      	lsrs	r0, r1, #16
   15450:	4448      	add	r0, r9
   15452:	436f      	muls	r7, r5
   15454:	4582      	cmp	sl, r0
   15456:	d903      	bls.n	15460 <__aeabi_dmul+0x278>
   15458:	2180      	movs	r1, #128	; 0x80
   1545a:	0249      	lsls	r1, r1, #9
   1545c:	4689      	mov	r9, r1
   1545e:	444f      	add	r7, r9
   15460:	0c01      	lsrs	r1, r0, #16
   15462:	4689      	mov	r9, r1
   15464:	0039      	movs	r1, r7
   15466:	4449      	add	r1, r9
   15468:	9102      	str	r1, [sp, #8]
   1546a:	4641      	mov	r1, r8
   1546c:	040f      	lsls	r7, r1, #16
   1546e:	9904      	ldr	r1, [sp, #16]
   15470:	0c3f      	lsrs	r7, r7, #16
   15472:	4688      	mov	r8, r1
   15474:	0400      	lsls	r0, r0, #16
   15476:	19c0      	adds	r0, r0, r7
   15478:	4480      	add	r8, r0
   1547a:	4641      	mov	r1, r8
   1547c:	9104      	str	r1, [sp, #16]
   1547e:	4659      	mov	r1, fp
   15480:	0c0f      	lsrs	r7, r1, #16
   15482:	0409      	lsls	r1, r1, #16
   15484:	0c09      	lsrs	r1, r1, #16
   15486:	4688      	mov	r8, r1
   15488:	4359      	muls	r1, r3
   1548a:	468a      	mov	sl, r1
   1548c:	0039      	movs	r1, r7
   1548e:	4351      	muls	r1, r2
   15490:	4689      	mov	r9, r1
   15492:	4641      	mov	r1, r8
   15494:	434a      	muls	r2, r1
   15496:	4651      	mov	r1, sl
   15498:	0c09      	lsrs	r1, r1, #16
   1549a:	468b      	mov	fp, r1
   1549c:	437b      	muls	r3, r7
   1549e:	18d2      	adds	r2, r2, r3
   154a0:	445a      	add	r2, fp
   154a2:	4293      	cmp	r3, r2
   154a4:	d903      	bls.n	154ae <__aeabi_dmul+0x2c6>
   154a6:	2380      	movs	r3, #128	; 0x80
   154a8:	025b      	lsls	r3, r3, #9
   154aa:	469b      	mov	fp, r3
   154ac:	44d9      	add	r9, fp
   154ae:	4651      	mov	r1, sl
   154b0:	0409      	lsls	r1, r1, #16
   154b2:	0c09      	lsrs	r1, r1, #16
   154b4:	468a      	mov	sl, r1
   154b6:	4641      	mov	r1, r8
   154b8:	4361      	muls	r1, r4
   154ba:	437c      	muls	r4, r7
   154bc:	0c13      	lsrs	r3, r2, #16
   154be:	0412      	lsls	r2, r2, #16
   154c0:	444b      	add	r3, r9
   154c2:	4452      	add	r2, sl
   154c4:	46a1      	mov	r9, r4
   154c6:	468a      	mov	sl, r1
   154c8:	003c      	movs	r4, r7
   154ca:	4641      	mov	r1, r8
   154cc:	436c      	muls	r4, r5
   154ce:	434d      	muls	r5, r1
   154d0:	4651      	mov	r1, sl
   154d2:	444d      	add	r5, r9
   154d4:	0c0f      	lsrs	r7, r1, #16
   154d6:	197d      	adds	r5, r7, r5
   154d8:	45a9      	cmp	r9, r5
   154da:	d903      	bls.n	154e4 <__aeabi_dmul+0x2fc>
   154dc:	2180      	movs	r1, #128	; 0x80
   154de:	0249      	lsls	r1, r1, #9
   154e0:	4688      	mov	r8, r1
   154e2:	4444      	add	r4, r8
   154e4:	9f04      	ldr	r7, [sp, #16]
   154e6:	9903      	ldr	r1, [sp, #12]
   154e8:	46b8      	mov	r8, r7
   154ea:	4441      	add	r1, r8
   154ec:	468b      	mov	fp, r1
   154ee:	4583      	cmp	fp, r0
   154f0:	4180      	sbcs	r0, r0
   154f2:	4241      	negs	r1, r0
   154f4:	4688      	mov	r8, r1
   154f6:	4651      	mov	r1, sl
   154f8:	0408      	lsls	r0, r1, #16
   154fa:	042f      	lsls	r7, r5, #16
   154fc:	0c00      	lsrs	r0, r0, #16
   154fe:	183f      	adds	r7, r7, r0
   15500:	4658      	mov	r0, fp
   15502:	9902      	ldr	r1, [sp, #8]
   15504:	1810      	adds	r0, r2, r0
   15506:	4689      	mov	r9, r1
   15508:	4290      	cmp	r0, r2
   1550a:	4192      	sbcs	r2, r2
   1550c:	444f      	add	r7, r9
   1550e:	46ba      	mov	sl, r7
   15510:	4252      	negs	r2, r2
   15512:	4699      	mov	r9, r3
   15514:	4693      	mov	fp, r2
   15516:	44c2      	add	sl, r8
   15518:	44d1      	add	r9, sl
   1551a:	44cb      	add	fp, r9
   1551c:	428f      	cmp	r7, r1
   1551e:	41bf      	sbcs	r7, r7
   15520:	45c2      	cmp	sl, r8
   15522:	4189      	sbcs	r1, r1
   15524:	4599      	cmp	r9, r3
   15526:	419b      	sbcs	r3, r3
   15528:	4593      	cmp	fp, r2
   1552a:	4192      	sbcs	r2, r2
   1552c:	427f      	negs	r7, r7
   1552e:	4249      	negs	r1, r1
   15530:	0c2d      	lsrs	r5, r5, #16
   15532:	4252      	negs	r2, r2
   15534:	430f      	orrs	r7, r1
   15536:	425b      	negs	r3, r3
   15538:	4313      	orrs	r3, r2
   1553a:	197f      	adds	r7, r7, r5
   1553c:	18ff      	adds	r7, r7, r3
   1553e:	465b      	mov	r3, fp
   15540:	193c      	adds	r4, r7, r4
   15542:	0ddb      	lsrs	r3, r3, #23
   15544:	9a05      	ldr	r2, [sp, #20]
   15546:	0264      	lsls	r4, r4, #9
   15548:	431c      	orrs	r4, r3
   1554a:	0243      	lsls	r3, r0, #9
   1554c:	4313      	orrs	r3, r2
   1554e:	1e5d      	subs	r5, r3, #1
   15550:	41ab      	sbcs	r3, r5
   15552:	465a      	mov	r2, fp
   15554:	0dc0      	lsrs	r0, r0, #23
   15556:	4303      	orrs	r3, r0
   15558:	0252      	lsls	r2, r2, #9
   1555a:	4313      	orrs	r3, r2
   1555c:	01e2      	lsls	r2, r4, #7
   1555e:	d556      	bpl.n	1560e <__aeabi_dmul+0x426>
   15560:	2001      	movs	r0, #1
   15562:	085a      	lsrs	r2, r3, #1
   15564:	4003      	ands	r3, r0
   15566:	4313      	orrs	r3, r2
   15568:	07e2      	lsls	r2, r4, #31
   1556a:	4313      	orrs	r3, r2
   1556c:	0864      	lsrs	r4, r4, #1
   1556e:	485a      	ldr	r0, [pc, #360]	; (156d8 <__aeabi_dmul+0x4f0>)
   15570:	4460      	add	r0, ip
   15572:	2800      	cmp	r0, #0
   15574:	dd4d      	ble.n	15612 <__aeabi_dmul+0x42a>
   15576:	075a      	lsls	r2, r3, #29
   15578:	d009      	beq.n	1558e <__aeabi_dmul+0x3a6>
   1557a:	220f      	movs	r2, #15
   1557c:	401a      	ands	r2, r3
   1557e:	2a04      	cmp	r2, #4
   15580:	d005      	beq.n	1558e <__aeabi_dmul+0x3a6>
   15582:	1d1a      	adds	r2, r3, #4
   15584:	429a      	cmp	r2, r3
   15586:	419b      	sbcs	r3, r3
   15588:	425b      	negs	r3, r3
   1558a:	18e4      	adds	r4, r4, r3
   1558c:	0013      	movs	r3, r2
   1558e:	01e2      	lsls	r2, r4, #7
   15590:	d504      	bpl.n	1559c <__aeabi_dmul+0x3b4>
   15592:	2080      	movs	r0, #128	; 0x80
   15594:	4a51      	ldr	r2, [pc, #324]	; (156dc <__aeabi_dmul+0x4f4>)
   15596:	00c0      	lsls	r0, r0, #3
   15598:	4014      	ands	r4, r2
   1559a:	4460      	add	r0, ip
   1559c:	4a50      	ldr	r2, [pc, #320]	; (156e0 <__aeabi_dmul+0x4f8>)
   1559e:	4290      	cmp	r0, r2
   155a0:	dd00      	ble.n	155a4 <__aeabi_dmul+0x3bc>
   155a2:	e6e3      	b.n	1536c <__aeabi_dmul+0x184>
   155a4:	2501      	movs	r5, #1
   155a6:	08db      	lsrs	r3, r3, #3
   155a8:	0762      	lsls	r2, r4, #29
   155aa:	431a      	orrs	r2, r3
   155ac:	0264      	lsls	r4, r4, #9
   155ae:	9b01      	ldr	r3, [sp, #4]
   155b0:	4691      	mov	r9, r2
   155b2:	0b22      	lsrs	r2, r4, #12
   155b4:	0544      	lsls	r4, r0, #21
   155b6:	0d64      	lsrs	r4, r4, #21
   155b8:	401d      	ands	r5, r3
   155ba:	e67c      	b.n	152b6 <__aeabi_dmul+0xce>
   155bc:	2280      	movs	r2, #128	; 0x80
   155be:	4659      	mov	r1, fp
   155c0:	0312      	lsls	r2, r2, #12
   155c2:	4211      	tst	r1, r2
   155c4:	d008      	beq.n	155d8 <__aeabi_dmul+0x3f0>
   155c6:	4214      	tst	r4, r2
   155c8:	d106      	bne.n	155d8 <__aeabi_dmul+0x3f0>
   155ca:	4322      	orrs	r2, r4
   155cc:	0312      	lsls	r2, r2, #12
   155ce:	0b12      	lsrs	r2, r2, #12
   155d0:	4645      	mov	r5, r8
   155d2:	4699      	mov	r9, r3
   155d4:	4c43      	ldr	r4, [pc, #268]	; (156e4 <__aeabi_dmul+0x4fc>)
   155d6:	e66e      	b.n	152b6 <__aeabi_dmul+0xce>
   155d8:	465b      	mov	r3, fp
   155da:	431a      	orrs	r2, r3
   155dc:	0312      	lsls	r2, r2, #12
   155de:	0b12      	lsrs	r2, r2, #12
   155e0:	4c40      	ldr	r4, [pc, #256]	; (156e4 <__aeabi_dmul+0x4fc>)
   155e2:	e668      	b.n	152b6 <__aeabi_dmul+0xce>
   155e4:	0003      	movs	r3, r0
   155e6:	4654      	mov	r4, sl
   155e8:	3b28      	subs	r3, #40	; 0x28
   155ea:	409c      	lsls	r4, r3
   155ec:	2300      	movs	r3, #0
   155ee:	e6b9      	b.n	15364 <__aeabi_dmul+0x17c>
   155f0:	f000 fd1a 	bl	16028 <__clzsi2>
   155f4:	3020      	adds	r0, #32
   155f6:	e6a6      	b.n	15346 <__aeabi_dmul+0x15e>
   155f8:	0003      	movs	r3, r0
   155fa:	3b28      	subs	r3, #40	; 0x28
   155fc:	409f      	lsls	r7, r3
   155fe:	2300      	movs	r3, #0
   15600:	46bb      	mov	fp, r7
   15602:	4699      	mov	r9, r3
   15604:	e68a      	b.n	1531c <__aeabi_dmul+0x134>
   15606:	f000 fd0f 	bl	16028 <__clzsi2>
   1560a:	3020      	adds	r0, #32
   1560c:	e674      	b.n	152f8 <__aeabi_dmul+0x110>
   1560e:	46b4      	mov	ip, r6
   15610:	e7ad      	b.n	1556e <__aeabi_dmul+0x386>
   15612:	2501      	movs	r5, #1
   15614:	1a2a      	subs	r2, r5, r0
   15616:	2a38      	cmp	r2, #56	; 0x38
   15618:	dd06      	ble.n	15628 <__aeabi_dmul+0x440>
   1561a:	9b01      	ldr	r3, [sp, #4]
   1561c:	2400      	movs	r4, #0
   1561e:	401d      	ands	r5, r3
   15620:	2300      	movs	r3, #0
   15622:	2200      	movs	r2, #0
   15624:	4699      	mov	r9, r3
   15626:	e646      	b.n	152b6 <__aeabi_dmul+0xce>
   15628:	2a1f      	cmp	r2, #31
   1562a:	dc21      	bgt.n	15670 <__aeabi_dmul+0x488>
   1562c:	2520      	movs	r5, #32
   1562e:	0020      	movs	r0, r4
   15630:	1aad      	subs	r5, r5, r2
   15632:	001e      	movs	r6, r3
   15634:	40ab      	lsls	r3, r5
   15636:	40a8      	lsls	r0, r5
   15638:	40d6      	lsrs	r6, r2
   1563a:	1e5d      	subs	r5, r3, #1
   1563c:	41ab      	sbcs	r3, r5
   1563e:	4330      	orrs	r0, r6
   15640:	4318      	orrs	r0, r3
   15642:	40d4      	lsrs	r4, r2
   15644:	0743      	lsls	r3, r0, #29
   15646:	d009      	beq.n	1565c <__aeabi_dmul+0x474>
   15648:	230f      	movs	r3, #15
   1564a:	4003      	ands	r3, r0
   1564c:	2b04      	cmp	r3, #4
   1564e:	d005      	beq.n	1565c <__aeabi_dmul+0x474>
   15650:	0003      	movs	r3, r0
   15652:	1d18      	adds	r0, r3, #4
   15654:	4298      	cmp	r0, r3
   15656:	419b      	sbcs	r3, r3
   15658:	425b      	negs	r3, r3
   1565a:	18e4      	adds	r4, r4, r3
   1565c:	0223      	lsls	r3, r4, #8
   1565e:	d521      	bpl.n	156a4 <__aeabi_dmul+0x4bc>
   15660:	2501      	movs	r5, #1
   15662:	9b01      	ldr	r3, [sp, #4]
   15664:	2401      	movs	r4, #1
   15666:	401d      	ands	r5, r3
   15668:	2300      	movs	r3, #0
   1566a:	2200      	movs	r2, #0
   1566c:	4699      	mov	r9, r3
   1566e:	e622      	b.n	152b6 <__aeabi_dmul+0xce>
   15670:	251f      	movs	r5, #31
   15672:	0021      	movs	r1, r4
   15674:	426d      	negs	r5, r5
   15676:	1a28      	subs	r0, r5, r0
   15678:	40c1      	lsrs	r1, r0
   1567a:	0008      	movs	r0, r1
   1567c:	2a20      	cmp	r2, #32
   1567e:	d01d      	beq.n	156bc <__aeabi_dmul+0x4d4>
   15680:	355f      	adds	r5, #95	; 0x5f
   15682:	1aaa      	subs	r2, r5, r2
   15684:	4094      	lsls	r4, r2
   15686:	4323      	orrs	r3, r4
   15688:	1e5c      	subs	r4, r3, #1
   1568a:	41a3      	sbcs	r3, r4
   1568c:	2507      	movs	r5, #7
   1568e:	4303      	orrs	r3, r0
   15690:	401d      	ands	r5, r3
   15692:	2200      	movs	r2, #0
   15694:	2d00      	cmp	r5, #0
   15696:	d009      	beq.n	156ac <__aeabi_dmul+0x4c4>
   15698:	220f      	movs	r2, #15
   1569a:	2400      	movs	r4, #0
   1569c:	401a      	ands	r2, r3
   1569e:	0018      	movs	r0, r3
   156a0:	2a04      	cmp	r2, #4
   156a2:	d1d6      	bne.n	15652 <__aeabi_dmul+0x46a>
   156a4:	0003      	movs	r3, r0
   156a6:	0765      	lsls	r5, r4, #29
   156a8:	0264      	lsls	r4, r4, #9
   156aa:	0b22      	lsrs	r2, r4, #12
   156ac:	08db      	lsrs	r3, r3, #3
   156ae:	432b      	orrs	r3, r5
   156b0:	2501      	movs	r5, #1
   156b2:	4699      	mov	r9, r3
   156b4:	9b01      	ldr	r3, [sp, #4]
   156b6:	2400      	movs	r4, #0
   156b8:	401d      	ands	r5, r3
   156ba:	e5fc      	b.n	152b6 <__aeabi_dmul+0xce>
   156bc:	2400      	movs	r4, #0
   156be:	e7e2      	b.n	15686 <__aeabi_dmul+0x49e>
   156c0:	2280      	movs	r2, #128	; 0x80
   156c2:	2501      	movs	r5, #1
   156c4:	0312      	lsls	r2, r2, #12
   156c6:	4322      	orrs	r2, r4
   156c8:	9901      	ldr	r1, [sp, #4]
   156ca:	0312      	lsls	r2, r2, #12
   156cc:	0b12      	lsrs	r2, r2, #12
   156ce:	400d      	ands	r5, r1
   156d0:	4699      	mov	r9, r3
   156d2:	4c04      	ldr	r4, [pc, #16]	; (156e4 <__aeabi_dmul+0x4fc>)
   156d4:	e5ef      	b.n	152b6 <__aeabi_dmul+0xce>
   156d6:	46c0      	nop			; (mov r8, r8)
   156d8:	000003ff 	.word	0x000003ff
   156dc:	feffffff 	.word	0xfeffffff
   156e0:	000007fe 	.word	0x000007fe
   156e4:	000007ff 	.word	0x000007ff

000156e8 <__aeabi_dsub>:
   156e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   156ea:	4646      	mov	r6, r8
   156ec:	46d6      	mov	lr, sl
   156ee:	464f      	mov	r7, r9
   156f0:	030c      	lsls	r4, r1, #12
   156f2:	b5c0      	push	{r6, r7, lr}
   156f4:	0fcd      	lsrs	r5, r1, #31
   156f6:	004e      	lsls	r6, r1, #1
   156f8:	0a61      	lsrs	r1, r4, #9
   156fa:	0f44      	lsrs	r4, r0, #29
   156fc:	430c      	orrs	r4, r1
   156fe:	00c1      	lsls	r1, r0, #3
   15700:	0058      	lsls	r0, r3, #1
   15702:	0d40      	lsrs	r0, r0, #21
   15704:	4684      	mov	ip, r0
   15706:	468a      	mov	sl, r1
   15708:	000f      	movs	r7, r1
   1570a:	0319      	lsls	r1, r3, #12
   1570c:	0f50      	lsrs	r0, r2, #29
   1570e:	0a49      	lsrs	r1, r1, #9
   15710:	4301      	orrs	r1, r0
   15712:	48c6      	ldr	r0, [pc, #792]	; (15a2c <__aeabi_dsub+0x344>)
   15714:	0d76      	lsrs	r6, r6, #21
   15716:	46a8      	mov	r8, r5
   15718:	0fdb      	lsrs	r3, r3, #31
   1571a:	00d2      	lsls	r2, r2, #3
   1571c:	4584      	cmp	ip, r0
   1571e:	d100      	bne.n	15722 <__aeabi_dsub+0x3a>
   15720:	e0d8      	b.n	158d4 <__aeabi_dsub+0x1ec>
   15722:	2001      	movs	r0, #1
   15724:	4043      	eors	r3, r0
   15726:	42ab      	cmp	r3, r5
   15728:	d100      	bne.n	1572c <__aeabi_dsub+0x44>
   1572a:	e0a6      	b.n	1587a <__aeabi_dsub+0x192>
   1572c:	4660      	mov	r0, ip
   1572e:	1a35      	subs	r5, r6, r0
   15730:	2d00      	cmp	r5, #0
   15732:	dc00      	bgt.n	15736 <__aeabi_dsub+0x4e>
   15734:	e105      	b.n	15942 <__aeabi_dsub+0x25a>
   15736:	2800      	cmp	r0, #0
   15738:	d110      	bne.n	1575c <__aeabi_dsub+0x74>
   1573a:	000b      	movs	r3, r1
   1573c:	4313      	orrs	r3, r2
   1573e:	d100      	bne.n	15742 <__aeabi_dsub+0x5a>
   15740:	e0d7      	b.n	158f2 <__aeabi_dsub+0x20a>
   15742:	1e6b      	subs	r3, r5, #1
   15744:	2b00      	cmp	r3, #0
   15746:	d000      	beq.n	1574a <__aeabi_dsub+0x62>
   15748:	e14b      	b.n	159e2 <__aeabi_dsub+0x2fa>
   1574a:	4653      	mov	r3, sl
   1574c:	1a9f      	subs	r7, r3, r2
   1574e:	45ba      	cmp	sl, r7
   15750:	4180      	sbcs	r0, r0
   15752:	1a64      	subs	r4, r4, r1
   15754:	4240      	negs	r0, r0
   15756:	1a24      	subs	r4, r4, r0
   15758:	2601      	movs	r6, #1
   1575a:	e01e      	b.n	1579a <__aeabi_dsub+0xb2>
   1575c:	4bb3      	ldr	r3, [pc, #716]	; (15a2c <__aeabi_dsub+0x344>)
   1575e:	429e      	cmp	r6, r3
   15760:	d048      	beq.n	157f4 <__aeabi_dsub+0x10c>
   15762:	2380      	movs	r3, #128	; 0x80
   15764:	041b      	lsls	r3, r3, #16
   15766:	4319      	orrs	r1, r3
   15768:	2d38      	cmp	r5, #56	; 0x38
   1576a:	dd00      	ble.n	1576e <__aeabi_dsub+0x86>
   1576c:	e119      	b.n	159a2 <__aeabi_dsub+0x2ba>
   1576e:	2d1f      	cmp	r5, #31
   15770:	dd00      	ble.n	15774 <__aeabi_dsub+0x8c>
   15772:	e14c      	b.n	15a0e <__aeabi_dsub+0x326>
   15774:	2320      	movs	r3, #32
   15776:	000f      	movs	r7, r1
   15778:	1b5b      	subs	r3, r3, r5
   1577a:	0010      	movs	r0, r2
   1577c:	409a      	lsls	r2, r3
   1577e:	409f      	lsls	r7, r3
   15780:	40e8      	lsrs	r0, r5
   15782:	1e53      	subs	r3, r2, #1
   15784:	419a      	sbcs	r2, r3
   15786:	40e9      	lsrs	r1, r5
   15788:	4307      	orrs	r7, r0
   1578a:	4317      	orrs	r7, r2
   1578c:	4653      	mov	r3, sl
   1578e:	1bdf      	subs	r7, r3, r7
   15790:	1a61      	subs	r1, r4, r1
   15792:	45ba      	cmp	sl, r7
   15794:	41a4      	sbcs	r4, r4
   15796:	4264      	negs	r4, r4
   15798:	1b0c      	subs	r4, r1, r4
   1579a:	0223      	lsls	r3, r4, #8
   1579c:	d400      	bmi.n	157a0 <__aeabi_dsub+0xb8>
   1579e:	e0c5      	b.n	1592c <__aeabi_dsub+0x244>
   157a0:	0264      	lsls	r4, r4, #9
   157a2:	0a65      	lsrs	r5, r4, #9
   157a4:	2d00      	cmp	r5, #0
   157a6:	d100      	bne.n	157aa <__aeabi_dsub+0xc2>
   157a8:	e0f6      	b.n	15998 <__aeabi_dsub+0x2b0>
   157aa:	0028      	movs	r0, r5
   157ac:	f000 fc3c 	bl	16028 <__clzsi2>
   157b0:	0003      	movs	r3, r0
   157b2:	3b08      	subs	r3, #8
   157b4:	2b1f      	cmp	r3, #31
   157b6:	dd00      	ble.n	157ba <__aeabi_dsub+0xd2>
   157b8:	e0e9      	b.n	1598e <__aeabi_dsub+0x2a6>
   157ba:	2220      	movs	r2, #32
   157bc:	003c      	movs	r4, r7
   157be:	1ad2      	subs	r2, r2, r3
   157c0:	409d      	lsls	r5, r3
   157c2:	40d4      	lsrs	r4, r2
   157c4:	409f      	lsls	r7, r3
   157c6:	4325      	orrs	r5, r4
   157c8:	429e      	cmp	r6, r3
   157ca:	dd00      	ble.n	157ce <__aeabi_dsub+0xe6>
   157cc:	e0db      	b.n	15986 <__aeabi_dsub+0x29e>
   157ce:	1b9e      	subs	r6, r3, r6
   157d0:	1c73      	adds	r3, r6, #1
   157d2:	2b1f      	cmp	r3, #31
   157d4:	dd00      	ble.n	157d8 <__aeabi_dsub+0xf0>
   157d6:	e10a      	b.n	159ee <__aeabi_dsub+0x306>
   157d8:	2220      	movs	r2, #32
   157da:	0038      	movs	r0, r7
   157dc:	1ad2      	subs	r2, r2, r3
   157de:	0029      	movs	r1, r5
   157e0:	4097      	lsls	r7, r2
   157e2:	002c      	movs	r4, r5
   157e4:	4091      	lsls	r1, r2
   157e6:	40d8      	lsrs	r0, r3
   157e8:	1e7a      	subs	r2, r7, #1
   157ea:	4197      	sbcs	r7, r2
   157ec:	40dc      	lsrs	r4, r3
   157ee:	2600      	movs	r6, #0
   157f0:	4301      	orrs	r1, r0
   157f2:	430f      	orrs	r7, r1
   157f4:	077b      	lsls	r3, r7, #29
   157f6:	d009      	beq.n	1580c <__aeabi_dsub+0x124>
   157f8:	230f      	movs	r3, #15
   157fa:	403b      	ands	r3, r7
   157fc:	2b04      	cmp	r3, #4
   157fe:	d005      	beq.n	1580c <__aeabi_dsub+0x124>
   15800:	1d3b      	adds	r3, r7, #4
   15802:	42bb      	cmp	r3, r7
   15804:	41bf      	sbcs	r7, r7
   15806:	427f      	negs	r7, r7
   15808:	19e4      	adds	r4, r4, r7
   1580a:	001f      	movs	r7, r3
   1580c:	0223      	lsls	r3, r4, #8
   1580e:	d525      	bpl.n	1585c <__aeabi_dsub+0x174>
   15810:	4b86      	ldr	r3, [pc, #536]	; (15a2c <__aeabi_dsub+0x344>)
   15812:	3601      	adds	r6, #1
   15814:	429e      	cmp	r6, r3
   15816:	d100      	bne.n	1581a <__aeabi_dsub+0x132>
   15818:	e0af      	b.n	1597a <__aeabi_dsub+0x292>
   1581a:	4b85      	ldr	r3, [pc, #532]	; (15a30 <__aeabi_dsub+0x348>)
   1581c:	2501      	movs	r5, #1
   1581e:	401c      	ands	r4, r3
   15820:	4643      	mov	r3, r8
   15822:	0762      	lsls	r2, r4, #29
   15824:	08ff      	lsrs	r7, r7, #3
   15826:	0264      	lsls	r4, r4, #9
   15828:	0576      	lsls	r6, r6, #21
   1582a:	4317      	orrs	r7, r2
   1582c:	0b24      	lsrs	r4, r4, #12
   1582e:	0d76      	lsrs	r6, r6, #21
   15830:	401d      	ands	r5, r3
   15832:	2100      	movs	r1, #0
   15834:	0324      	lsls	r4, r4, #12
   15836:	0b23      	lsrs	r3, r4, #12
   15838:	0d0c      	lsrs	r4, r1, #20
   1583a:	4a7e      	ldr	r2, [pc, #504]	; (15a34 <__aeabi_dsub+0x34c>)
   1583c:	0524      	lsls	r4, r4, #20
   1583e:	431c      	orrs	r4, r3
   15840:	4014      	ands	r4, r2
   15842:	0533      	lsls	r3, r6, #20
   15844:	4323      	orrs	r3, r4
   15846:	005b      	lsls	r3, r3, #1
   15848:	07ed      	lsls	r5, r5, #31
   1584a:	085b      	lsrs	r3, r3, #1
   1584c:	432b      	orrs	r3, r5
   1584e:	0038      	movs	r0, r7
   15850:	0019      	movs	r1, r3
   15852:	bc1c      	pop	{r2, r3, r4}
   15854:	4690      	mov	r8, r2
   15856:	4699      	mov	r9, r3
   15858:	46a2      	mov	sl, r4
   1585a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1585c:	2501      	movs	r5, #1
   1585e:	4643      	mov	r3, r8
   15860:	0762      	lsls	r2, r4, #29
   15862:	08ff      	lsrs	r7, r7, #3
   15864:	4317      	orrs	r7, r2
   15866:	08e4      	lsrs	r4, r4, #3
   15868:	401d      	ands	r5, r3
   1586a:	4b70      	ldr	r3, [pc, #448]	; (15a2c <__aeabi_dsub+0x344>)
   1586c:	429e      	cmp	r6, r3
   1586e:	d036      	beq.n	158de <__aeabi_dsub+0x1f6>
   15870:	0324      	lsls	r4, r4, #12
   15872:	0576      	lsls	r6, r6, #21
   15874:	0b24      	lsrs	r4, r4, #12
   15876:	0d76      	lsrs	r6, r6, #21
   15878:	e7db      	b.n	15832 <__aeabi_dsub+0x14a>
   1587a:	4663      	mov	r3, ip
   1587c:	1af3      	subs	r3, r6, r3
   1587e:	2b00      	cmp	r3, #0
   15880:	dc00      	bgt.n	15884 <__aeabi_dsub+0x19c>
   15882:	e094      	b.n	159ae <__aeabi_dsub+0x2c6>
   15884:	4660      	mov	r0, ip
   15886:	2800      	cmp	r0, #0
   15888:	d035      	beq.n	158f6 <__aeabi_dsub+0x20e>
   1588a:	4868      	ldr	r0, [pc, #416]	; (15a2c <__aeabi_dsub+0x344>)
   1588c:	4286      	cmp	r6, r0
   1588e:	d0b1      	beq.n	157f4 <__aeabi_dsub+0x10c>
   15890:	2780      	movs	r7, #128	; 0x80
   15892:	043f      	lsls	r7, r7, #16
   15894:	4339      	orrs	r1, r7
   15896:	2b38      	cmp	r3, #56	; 0x38
   15898:	dc00      	bgt.n	1589c <__aeabi_dsub+0x1b4>
   1589a:	e0fd      	b.n	15a98 <__aeabi_dsub+0x3b0>
   1589c:	430a      	orrs	r2, r1
   1589e:	0017      	movs	r7, r2
   158a0:	2100      	movs	r1, #0
   158a2:	1e7a      	subs	r2, r7, #1
   158a4:	4197      	sbcs	r7, r2
   158a6:	4457      	add	r7, sl
   158a8:	4557      	cmp	r7, sl
   158aa:	4180      	sbcs	r0, r0
   158ac:	1909      	adds	r1, r1, r4
   158ae:	4244      	negs	r4, r0
   158b0:	190c      	adds	r4, r1, r4
   158b2:	0223      	lsls	r3, r4, #8
   158b4:	d53a      	bpl.n	1592c <__aeabi_dsub+0x244>
   158b6:	4b5d      	ldr	r3, [pc, #372]	; (15a2c <__aeabi_dsub+0x344>)
   158b8:	3601      	adds	r6, #1
   158ba:	429e      	cmp	r6, r3
   158bc:	d100      	bne.n	158c0 <__aeabi_dsub+0x1d8>
   158be:	e14b      	b.n	15b58 <__aeabi_dsub+0x470>
   158c0:	2201      	movs	r2, #1
   158c2:	4b5b      	ldr	r3, [pc, #364]	; (15a30 <__aeabi_dsub+0x348>)
   158c4:	401c      	ands	r4, r3
   158c6:	087b      	lsrs	r3, r7, #1
   158c8:	4017      	ands	r7, r2
   158ca:	431f      	orrs	r7, r3
   158cc:	07e2      	lsls	r2, r4, #31
   158ce:	4317      	orrs	r7, r2
   158d0:	0864      	lsrs	r4, r4, #1
   158d2:	e78f      	b.n	157f4 <__aeabi_dsub+0x10c>
   158d4:	0008      	movs	r0, r1
   158d6:	4310      	orrs	r0, r2
   158d8:	d000      	beq.n	158dc <__aeabi_dsub+0x1f4>
   158da:	e724      	b.n	15726 <__aeabi_dsub+0x3e>
   158dc:	e721      	b.n	15722 <__aeabi_dsub+0x3a>
   158de:	0023      	movs	r3, r4
   158e0:	433b      	orrs	r3, r7
   158e2:	d100      	bne.n	158e6 <__aeabi_dsub+0x1fe>
   158e4:	e1b9      	b.n	15c5a <__aeabi_dsub+0x572>
   158e6:	2280      	movs	r2, #128	; 0x80
   158e8:	0312      	lsls	r2, r2, #12
   158ea:	4314      	orrs	r4, r2
   158ec:	0324      	lsls	r4, r4, #12
   158ee:	0b24      	lsrs	r4, r4, #12
   158f0:	e79f      	b.n	15832 <__aeabi_dsub+0x14a>
   158f2:	002e      	movs	r6, r5
   158f4:	e77e      	b.n	157f4 <__aeabi_dsub+0x10c>
   158f6:	0008      	movs	r0, r1
   158f8:	4310      	orrs	r0, r2
   158fa:	d100      	bne.n	158fe <__aeabi_dsub+0x216>
   158fc:	e0ca      	b.n	15a94 <__aeabi_dsub+0x3ac>
   158fe:	1e58      	subs	r0, r3, #1
   15900:	4684      	mov	ip, r0
   15902:	2800      	cmp	r0, #0
   15904:	d000      	beq.n	15908 <__aeabi_dsub+0x220>
   15906:	e0e7      	b.n	15ad8 <__aeabi_dsub+0x3f0>
   15908:	4452      	add	r2, sl
   1590a:	4552      	cmp	r2, sl
   1590c:	4180      	sbcs	r0, r0
   1590e:	1864      	adds	r4, r4, r1
   15910:	4240      	negs	r0, r0
   15912:	1824      	adds	r4, r4, r0
   15914:	0017      	movs	r7, r2
   15916:	2601      	movs	r6, #1
   15918:	0223      	lsls	r3, r4, #8
   1591a:	d507      	bpl.n	1592c <__aeabi_dsub+0x244>
   1591c:	2602      	movs	r6, #2
   1591e:	e7cf      	b.n	158c0 <__aeabi_dsub+0x1d8>
   15920:	4664      	mov	r4, ip
   15922:	432c      	orrs	r4, r5
   15924:	d100      	bne.n	15928 <__aeabi_dsub+0x240>
   15926:	e1b3      	b.n	15c90 <__aeabi_dsub+0x5a8>
   15928:	002c      	movs	r4, r5
   1592a:	4667      	mov	r7, ip
   1592c:	077b      	lsls	r3, r7, #29
   1592e:	d000      	beq.n	15932 <__aeabi_dsub+0x24a>
   15930:	e762      	b.n	157f8 <__aeabi_dsub+0x110>
   15932:	0763      	lsls	r3, r4, #29
   15934:	08ff      	lsrs	r7, r7, #3
   15936:	431f      	orrs	r7, r3
   15938:	2501      	movs	r5, #1
   1593a:	4643      	mov	r3, r8
   1593c:	08e4      	lsrs	r4, r4, #3
   1593e:	401d      	ands	r5, r3
   15940:	e793      	b.n	1586a <__aeabi_dsub+0x182>
   15942:	2d00      	cmp	r5, #0
   15944:	d178      	bne.n	15a38 <__aeabi_dsub+0x350>
   15946:	1c75      	adds	r5, r6, #1
   15948:	056d      	lsls	r5, r5, #21
   1594a:	0d6d      	lsrs	r5, r5, #21
   1594c:	2d01      	cmp	r5, #1
   1594e:	dc00      	bgt.n	15952 <__aeabi_dsub+0x26a>
   15950:	e0f2      	b.n	15b38 <__aeabi_dsub+0x450>
   15952:	4650      	mov	r0, sl
   15954:	1a80      	subs	r0, r0, r2
   15956:	4582      	cmp	sl, r0
   15958:	41bf      	sbcs	r7, r7
   1595a:	1a65      	subs	r5, r4, r1
   1595c:	427f      	negs	r7, r7
   1595e:	1bed      	subs	r5, r5, r7
   15960:	4684      	mov	ip, r0
   15962:	0228      	lsls	r0, r5, #8
   15964:	d400      	bmi.n	15968 <__aeabi_dsub+0x280>
   15966:	e08c      	b.n	15a82 <__aeabi_dsub+0x39a>
   15968:	4650      	mov	r0, sl
   1596a:	1a17      	subs	r7, r2, r0
   1596c:	42ba      	cmp	r2, r7
   1596e:	4192      	sbcs	r2, r2
   15970:	1b0c      	subs	r4, r1, r4
   15972:	4255      	negs	r5, r2
   15974:	1b65      	subs	r5, r4, r5
   15976:	4698      	mov	r8, r3
   15978:	e714      	b.n	157a4 <__aeabi_dsub+0xbc>
   1597a:	2501      	movs	r5, #1
   1597c:	4643      	mov	r3, r8
   1597e:	2400      	movs	r4, #0
   15980:	401d      	ands	r5, r3
   15982:	2700      	movs	r7, #0
   15984:	e755      	b.n	15832 <__aeabi_dsub+0x14a>
   15986:	4c2a      	ldr	r4, [pc, #168]	; (15a30 <__aeabi_dsub+0x348>)
   15988:	1af6      	subs	r6, r6, r3
   1598a:	402c      	ands	r4, r5
   1598c:	e732      	b.n	157f4 <__aeabi_dsub+0x10c>
   1598e:	003d      	movs	r5, r7
   15990:	3828      	subs	r0, #40	; 0x28
   15992:	4085      	lsls	r5, r0
   15994:	2700      	movs	r7, #0
   15996:	e717      	b.n	157c8 <__aeabi_dsub+0xe0>
   15998:	0038      	movs	r0, r7
   1599a:	f000 fb45 	bl	16028 <__clzsi2>
   1599e:	3020      	adds	r0, #32
   159a0:	e706      	b.n	157b0 <__aeabi_dsub+0xc8>
   159a2:	430a      	orrs	r2, r1
   159a4:	0017      	movs	r7, r2
   159a6:	2100      	movs	r1, #0
   159a8:	1e7a      	subs	r2, r7, #1
   159aa:	4197      	sbcs	r7, r2
   159ac:	e6ee      	b.n	1578c <__aeabi_dsub+0xa4>
   159ae:	2b00      	cmp	r3, #0
   159b0:	d000      	beq.n	159b4 <__aeabi_dsub+0x2cc>
   159b2:	e0e5      	b.n	15b80 <__aeabi_dsub+0x498>
   159b4:	1c73      	adds	r3, r6, #1
   159b6:	469c      	mov	ip, r3
   159b8:	055b      	lsls	r3, r3, #21
   159ba:	0d5b      	lsrs	r3, r3, #21
   159bc:	2b01      	cmp	r3, #1
   159be:	dc00      	bgt.n	159c2 <__aeabi_dsub+0x2da>
   159c0:	e09f      	b.n	15b02 <__aeabi_dsub+0x41a>
   159c2:	4b1a      	ldr	r3, [pc, #104]	; (15a2c <__aeabi_dsub+0x344>)
   159c4:	459c      	cmp	ip, r3
   159c6:	d100      	bne.n	159ca <__aeabi_dsub+0x2e2>
   159c8:	e0c5      	b.n	15b56 <__aeabi_dsub+0x46e>
   159ca:	4452      	add	r2, sl
   159cc:	4552      	cmp	r2, sl
   159ce:	4180      	sbcs	r0, r0
   159d0:	1864      	adds	r4, r4, r1
   159d2:	4240      	negs	r0, r0
   159d4:	1824      	adds	r4, r4, r0
   159d6:	07e7      	lsls	r7, r4, #31
   159d8:	0852      	lsrs	r2, r2, #1
   159da:	4317      	orrs	r7, r2
   159dc:	0864      	lsrs	r4, r4, #1
   159de:	4666      	mov	r6, ip
   159e0:	e708      	b.n	157f4 <__aeabi_dsub+0x10c>
   159e2:	4812      	ldr	r0, [pc, #72]	; (15a2c <__aeabi_dsub+0x344>)
   159e4:	4285      	cmp	r5, r0
   159e6:	d100      	bne.n	159ea <__aeabi_dsub+0x302>
   159e8:	e085      	b.n	15af6 <__aeabi_dsub+0x40e>
   159ea:	001d      	movs	r5, r3
   159ec:	e6bc      	b.n	15768 <__aeabi_dsub+0x80>
   159ee:	0029      	movs	r1, r5
   159f0:	3e1f      	subs	r6, #31
   159f2:	40f1      	lsrs	r1, r6
   159f4:	2b20      	cmp	r3, #32
   159f6:	d100      	bne.n	159fa <__aeabi_dsub+0x312>
   159f8:	e07f      	b.n	15afa <__aeabi_dsub+0x412>
   159fa:	2240      	movs	r2, #64	; 0x40
   159fc:	1ad3      	subs	r3, r2, r3
   159fe:	409d      	lsls	r5, r3
   15a00:	432f      	orrs	r7, r5
   15a02:	1e7d      	subs	r5, r7, #1
   15a04:	41af      	sbcs	r7, r5
   15a06:	2400      	movs	r4, #0
   15a08:	430f      	orrs	r7, r1
   15a0a:	2600      	movs	r6, #0
   15a0c:	e78e      	b.n	1592c <__aeabi_dsub+0x244>
   15a0e:	002b      	movs	r3, r5
   15a10:	000f      	movs	r7, r1
   15a12:	3b20      	subs	r3, #32
   15a14:	40df      	lsrs	r7, r3
   15a16:	2d20      	cmp	r5, #32
   15a18:	d071      	beq.n	15afe <__aeabi_dsub+0x416>
   15a1a:	2340      	movs	r3, #64	; 0x40
   15a1c:	1b5d      	subs	r5, r3, r5
   15a1e:	40a9      	lsls	r1, r5
   15a20:	430a      	orrs	r2, r1
   15a22:	1e51      	subs	r1, r2, #1
   15a24:	418a      	sbcs	r2, r1
   15a26:	2100      	movs	r1, #0
   15a28:	4317      	orrs	r7, r2
   15a2a:	e6af      	b.n	1578c <__aeabi_dsub+0xa4>
   15a2c:	000007ff 	.word	0x000007ff
   15a30:	ff7fffff 	.word	0xff7fffff
   15a34:	800fffff 	.word	0x800fffff
   15a38:	2e00      	cmp	r6, #0
   15a3a:	d03e      	beq.n	15aba <__aeabi_dsub+0x3d2>
   15a3c:	4eb3      	ldr	r6, [pc, #716]	; (15d0c <__aeabi_dsub+0x624>)
   15a3e:	45b4      	cmp	ip, r6
   15a40:	d045      	beq.n	15ace <__aeabi_dsub+0x3e6>
   15a42:	2680      	movs	r6, #128	; 0x80
   15a44:	0436      	lsls	r6, r6, #16
   15a46:	426d      	negs	r5, r5
   15a48:	4334      	orrs	r4, r6
   15a4a:	2d38      	cmp	r5, #56	; 0x38
   15a4c:	dd00      	ble.n	15a50 <__aeabi_dsub+0x368>
   15a4e:	e0a8      	b.n	15ba2 <__aeabi_dsub+0x4ba>
   15a50:	2d1f      	cmp	r5, #31
   15a52:	dd00      	ble.n	15a56 <__aeabi_dsub+0x36e>
   15a54:	e11f      	b.n	15c96 <__aeabi_dsub+0x5ae>
   15a56:	2620      	movs	r6, #32
   15a58:	0027      	movs	r7, r4
   15a5a:	4650      	mov	r0, sl
   15a5c:	1b76      	subs	r6, r6, r5
   15a5e:	40b7      	lsls	r7, r6
   15a60:	40e8      	lsrs	r0, r5
   15a62:	4307      	orrs	r7, r0
   15a64:	4650      	mov	r0, sl
   15a66:	40b0      	lsls	r0, r6
   15a68:	1e46      	subs	r6, r0, #1
   15a6a:	41b0      	sbcs	r0, r6
   15a6c:	40ec      	lsrs	r4, r5
   15a6e:	4338      	orrs	r0, r7
   15a70:	1a17      	subs	r7, r2, r0
   15a72:	42ba      	cmp	r2, r7
   15a74:	4192      	sbcs	r2, r2
   15a76:	1b0c      	subs	r4, r1, r4
   15a78:	4252      	negs	r2, r2
   15a7a:	1aa4      	subs	r4, r4, r2
   15a7c:	4666      	mov	r6, ip
   15a7e:	4698      	mov	r8, r3
   15a80:	e68b      	b.n	1579a <__aeabi_dsub+0xb2>
   15a82:	4664      	mov	r4, ip
   15a84:	4667      	mov	r7, ip
   15a86:	432c      	orrs	r4, r5
   15a88:	d000      	beq.n	15a8c <__aeabi_dsub+0x3a4>
   15a8a:	e68b      	b.n	157a4 <__aeabi_dsub+0xbc>
   15a8c:	2500      	movs	r5, #0
   15a8e:	2600      	movs	r6, #0
   15a90:	2700      	movs	r7, #0
   15a92:	e6ea      	b.n	1586a <__aeabi_dsub+0x182>
   15a94:	001e      	movs	r6, r3
   15a96:	e6ad      	b.n	157f4 <__aeabi_dsub+0x10c>
   15a98:	2b1f      	cmp	r3, #31
   15a9a:	dc60      	bgt.n	15b5e <__aeabi_dsub+0x476>
   15a9c:	2720      	movs	r7, #32
   15a9e:	1af8      	subs	r0, r7, r3
   15aa0:	000f      	movs	r7, r1
   15aa2:	4684      	mov	ip, r0
   15aa4:	4087      	lsls	r7, r0
   15aa6:	0010      	movs	r0, r2
   15aa8:	40d8      	lsrs	r0, r3
   15aaa:	4307      	orrs	r7, r0
   15aac:	4660      	mov	r0, ip
   15aae:	4082      	lsls	r2, r0
   15ab0:	1e50      	subs	r0, r2, #1
   15ab2:	4182      	sbcs	r2, r0
   15ab4:	40d9      	lsrs	r1, r3
   15ab6:	4317      	orrs	r7, r2
   15ab8:	e6f5      	b.n	158a6 <__aeabi_dsub+0x1be>
   15aba:	0026      	movs	r6, r4
   15abc:	4650      	mov	r0, sl
   15abe:	4306      	orrs	r6, r0
   15ac0:	d005      	beq.n	15ace <__aeabi_dsub+0x3e6>
   15ac2:	43ed      	mvns	r5, r5
   15ac4:	2d00      	cmp	r5, #0
   15ac6:	d0d3      	beq.n	15a70 <__aeabi_dsub+0x388>
   15ac8:	4e90      	ldr	r6, [pc, #576]	; (15d0c <__aeabi_dsub+0x624>)
   15aca:	45b4      	cmp	ip, r6
   15acc:	d1bd      	bne.n	15a4a <__aeabi_dsub+0x362>
   15ace:	000c      	movs	r4, r1
   15ad0:	0017      	movs	r7, r2
   15ad2:	4666      	mov	r6, ip
   15ad4:	4698      	mov	r8, r3
   15ad6:	e68d      	b.n	157f4 <__aeabi_dsub+0x10c>
   15ad8:	488c      	ldr	r0, [pc, #560]	; (15d0c <__aeabi_dsub+0x624>)
   15ada:	4283      	cmp	r3, r0
   15adc:	d00b      	beq.n	15af6 <__aeabi_dsub+0x40e>
   15ade:	4663      	mov	r3, ip
   15ae0:	e6d9      	b.n	15896 <__aeabi_dsub+0x1ae>
   15ae2:	2d00      	cmp	r5, #0
   15ae4:	d000      	beq.n	15ae8 <__aeabi_dsub+0x400>
   15ae6:	e096      	b.n	15c16 <__aeabi_dsub+0x52e>
   15ae8:	0008      	movs	r0, r1
   15aea:	4310      	orrs	r0, r2
   15aec:	d100      	bne.n	15af0 <__aeabi_dsub+0x408>
   15aee:	e0e2      	b.n	15cb6 <__aeabi_dsub+0x5ce>
   15af0:	000c      	movs	r4, r1
   15af2:	0017      	movs	r7, r2
   15af4:	4698      	mov	r8, r3
   15af6:	4e85      	ldr	r6, [pc, #532]	; (15d0c <__aeabi_dsub+0x624>)
   15af8:	e67c      	b.n	157f4 <__aeabi_dsub+0x10c>
   15afa:	2500      	movs	r5, #0
   15afc:	e780      	b.n	15a00 <__aeabi_dsub+0x318>
   15afe:	2100      	movs	r1, #0
   15b00:	e78e      	b.n	15a20 <__aeabi_dsub+0x338>
   15b02:	0023      	movs	r3, r4
   15b04:	4650      	mov	r0, sl
   15b06:	4303      	orrs	r3, r0
   15b08:	2e00      	cmp	r6, #0
   15b0a:	d000      	beq.n	15b0e <__aeabi_dsub+0x426>
   15b0c:	e0a8      	b.n	15c60 <__aeabi_dsub+0x578>
   15b0e:	2b00      	cmp	r3, #0
   15b10:	d100      	bne.n	15b14 <__aeabi_dsub+0x42c>
   15b12:	e0de      	b.n	15cd2 <__aeabi_dsub+0x5ea>
   15b14:	000b      	movs	r3, r1
   15b16:	4313      	orrs	r3, r2
   15b18:	d100      	bne.n	15b1c <__aeabi_dsub+0x434>
   15b1a:	e66b      	b.n	157f4 <__aeabi_dsub+0x10c>
   15b1c:	4452      	add	r2, sl
   15b1e:	4552      	cmp	r2, sl
   15b20:	4180      	sbcs	r0, r0
   15b22:	1864      	adds	r4, r4, r1
   15b24:	4240      	negs	r0, r0
   15b26:	1824      	adds	r4, r4, r0
   15b28:	0017      	movs	r7, r2
   15b2a:	0223      	lsls	r3, r4, #8
   15b2c:	d400      	bmi.n	15b30 <__aeabi_dsub+0x448>
   15b2e:	e6fd      	b.n	1592c <__aeabi_dsub+0x244>
   15b30:	4b77      	ldr	r3, [pc, #476]	; (15d10 <__aeabi_dsub+0x628>)
   15b32:	4666      	mov	r6, ip
   15b34:	401c      	ands	r4, r3
   15b36:	e65d      	b.n	157f4 <__aeabi_dsub+0x10c>
   15b38:	0025      	movs	r5, r4
   15b3a:	4650      	mov	r0, sl
   15b3c:	4305      	orrs	r5, r0
   15b3e:	2e00      	cmp	r6, #0
   15b40:	d1cf      	bne.n	15ae2 <__aeabi_dsub+0x3fa>
   15b42:	2d00      	cmp	r5, #0
   15b44:	d14f      	bne.n	15be6 <__aeabi_dsub+0x4fe>
   15b46:	000c      	movs	r4, r1
   15b48:	4314      	orrs	r4, r2
   15b4a:	d100      	bne.n	15b4e <__aeabi_dsub+0x466>
   15b4c:	e0a0      	b.n	15c90 <__aeabi_dsub+0x5a8>
   15b4e:	000c      	movs	r4, r1
   15b50:	0017      	movs	r7, r2
   15b52:	4698      	mov	r8, r3
   15b54:	e64e      	b.n	157f4 <__aeabi_dsub+0x10c>
   15b56:	4666      	mov	r6, ip
   15b58:	2400      	movs	r4, #0
   15b5a:	2700      	movs	r7, #0
   15b5c:	e685      	b.n	1586a <__aeabi_dsub+0x182>
   15b5e:	001f      	movs	r7, r3
   15b60:	0008      	movs	r0, r1
   15b62:	3f20      	subs	r7, #32
   15b64:	40f8      	lsrs	r0, r7
   15b66:	0007      	movs	r7, r0
   15b68:	2b20      	cmp	r3, #32
   15b6a:	d100      	bne.n	15b6e <__aeabi_dsub+0x486>
   15b6c:	e08e      	b.n	15c8c <__aeabi_dsub+0x5a4>
   15b6e:	2040      	movs	r0, #64	; 0x40
   15b70:	1ac3      	subs	r3, r0, r3
   15b72:	4099      	lsls	r1, r3
   15b74:	430a      	orrs	r2, r1
   15b76:	1e51      	subs	r1, r2, #1
   15b78:	418a      	sbcs	r2, r1
   15b7a:	2100      	movs	r1, #0
   15b7c:	4317      	orrs	r7, r2
   15b7e:	e692      	b.n	158a6 <__aeabi_dsub+0x1be>
   15b80:	2e00      	cmp	r6, #0
   15b82:	d114      	bne.n	15bae <__aeabi_dsub+0x4c6>
   15b84:	0026      	movs	r6, r4
   15b86:	4650      	mov	r0, sl
   15b88:	4306      	orrs	r6, r0
   15b8a:	d062      	beq.n	15c52 <__aeabi_dsub+0x56a>
   15b8c:	43db      	mvns	r3, r3
   15b8e:	2b00      	cmp	r3, #0
   15b90:	d15c      	bne.n	15c4c <__aeabi_dsub+0x564>
   15b92:	1887      	adds	r7, r0, r2
   15b94:	4297      	cmp	r7, r2
   15b96:	4192      	sbcs	r2, r2
   15b98:	1864      	adds	r4, r4, r1
   15b9a:	4252      	negs	r2, r2
   15b9c:	18a4      	adds	r4, r4, r2
   15b9e:	4666      	mov	r6, ip
   15ba0:	e687      	b.n	158b2 <__aeabi_dsub+0x1ca>
   15ba2:	4650      	mov	r0, sl
   15ba4:	4320      	orrs	r0, r4
   15ba6:	1e44      	subs	r4, r0, #1
   15ba8:	41a0      	sbcs	r0, r4
   15baa:	2400      	movs	r4, #0
   15bac:	e760      	b.n	15a70 <__aeabi_dsub+0x388>
   15bae:	4e57      	ldr	r6, [pc, #348]	; (15d0c <__aeabi_dsub+0x624>)
   15bb0:	45b4      	cmp	ip, r6
   15bb2:	d04e      	beq.n	15c52 <__aeabi_dsub+0x56a>
   15bb4:	2680      	movs	r6, #128	; 0x80
   15bb6:	0436      	lsls	r6, r6, #16
   15bb8:	425b      	negs	r3, r3
   15bba:	4334      	orrs	r4, r6
   15bbc:	2b38      	cmp	r3, #56	; 0x38
   15bbe:	dd00      	ble.n	15bc2 <__aeabi_dsub+0x4da>
   15bc0:	e07f      	b.n	15cc2 <__aeabi_dsub+0x5da>
   15bc2:	2b1f      	cmp	r3, #31
   15bc4:	dd00      	ble.n	15bc8 <__aeabi_dsub+0x4e0>
   15bc6:	e08b      	b.n	15ce0 <__aeabi_dsub+0x5f8>
   15bc8:	2620      	movs	r6, #32
   15bca:	0027      	movs	r7, r4
   15bcc:	4650      	mov	r0, sl
   15bce:	1af6      	subs	r6, r6, r3
   15bd0:	40b7      	lsls	r7, r6
   15bd2:	40d8      	lsrs	r0, r3
   15bd4:	4307      	orrs	r7, r0
   15bd6:	4650      	mov	r0, sl
   15bd8:	40b0      	lsls	r0, r6
   15bda:	1e46      	subs	r6, r0, #1
   15bdc:	41b0      	sbcs	r0, r6
   15bde:	4307      	orrs	r7, r0
   15be0:	40dc      	lsrs	r4, r3
   15be2:	18bf      	adds	r7, r7, r2
   15be4:	e7d6      	b.n	15b94 <__aeabi_dsub+0x4ac>
   15be6:	000d      	movs	r5, r1
   15be8:	4315      	orrs	r5, r2
   15bea:	d100      	bne.n	15bee <__aeabi_dsub+0x506>
   15bec:	e602      	b.n	157f4 <__aeabi_dsub+0x10c>
   15bee:	4650      	mov	r0, sl
   15bf0:	1a80      	subs	r0, r0, r2
   15bf2:	4582      	cmp	sl, r0
   15bf4:	41bf      	sbcs	r7, r7
   15bf6:	1a65      	subs	r5, r4, r1
   15bf8:	427f      	negs	r7, r7
   15bfa:	1bed      	subs	r5, r5, r7
   15bfc:	4684      	mov	ip, r0
   15bfe:	0228      	lsls	r0, r5, #8
   15c00:	d400      	bmi.n	15c04 <__aeabi_dsub+0x51c>
   15c02:	e68d      	b.n	15920 <__aeabi_dsub+0x238>
   15c04:	4650      	mov	r0, sl
   15c06:	1a17      	subs	r7, r2, r0
   15c08:	42ba      	cmp	r2, r7
   15c0a:	4192      	sbcs	r2, r2
   15c0c:	1b0c      	subs	r4, r1, r4
   15c0e:	4252      	negs	r2, r2
   15c10:	1aa4      	subs	r4, r4, r2
   15c12:	4698      	mov	r8, r3
   15c14:	e5ee      	b.n	157f4 <__aeabi_dsub+0x10c>
   15c16:	000d      	movs	r5, r1
   15c18:	4315      	orrs	r5, r2
   15c1a:	d100      	bne.n	15c1e <__aeabi_dsub+0x536>
   15c1c:	e76b      	b.n	15af6 <__aeabi_dsub+0x40e>
   15c1e:	4650      	mov	r0, sl
   15c20:	0767      	lsls	r7, r4, #29
   15c22:	08c0      	lsrs	r0, r0, #3
   15c24:	4307      	orrs	r7, r0
   15c26:	2080      	movs	r0, #128	; 0x80
   15c28:	08e4      	lsrs	r4, r4, #3
   15c2a:	0300      	lsls	r0, r0, #12
   15c2c:	4204      	tst	r4, r0
   15c2e:	d007      	beq.n	15c40 <__aeabi_dsub+0x558>
   15c30:	08cd      	lsrs	r5, r1, #3
   15c32:	4205      	tst	r5, r0
   15c34:	d104      	bne.n	15c40 <__aeabi_dsub+0x558>
   15c36:	002c      	movs	r4, r5
   15c38:	4698      	mov	r8, r3
   15c3a:	08d7      	lsrs	r7, r2, #3
   15c3c:	0749      	lsls	r1, r1, #29
   15c3e:	430f      	orrs	r7, r1
   15c40:	0f7b      	lsrs	r3, r7, #29
   15c42:	00e4      	lsls	r4, r4, #3
   15c44:	431c      	orrs	r4, r3
   15c46:	00ff      	lsls	r7, r7, #3
   15c48:	4e30      	ldr	r6, [pc, #192]	; (15d0c <__aeabi_dsub+0x624>)
   15c4a:	e5d3      	b.n	157f4 <__aeabi_dsub+0x10c>
   15c4c:	4e2f      	ldr	r6, [pc, #188]	; (15d0c <__aeabi_dsub+0x624>)
   15c4e:	45b4      	cmp	ip, r6
   15c50:	d1b4      	bne.n	15bbc <__aeabi_dsub+0x4d4>
   15c52:	000c      	movs	r4, r1
   15c54:	0017      	movs	r7, r2
   15c56:	4666      	mov	r6, ip
   15c58:	e5cc      	b.n	157f4 <__aeabi_dsub+0x10c>
   15c5a:	2700      	movs	r7, #0
   15c5c:	2400      	movs	r4, #0
   15c5e:	e5e8      	b.n	15832 <__aeabi_dsub+0x14a>
   15c60:	2b00      	cmp	r3, #0
   15c62:	d039      	beq.n	15cd8 <__aeabi_dsub+0x5f0>
   15c64:	000b      	movs	r3, r1
   15c66:	4313      	orrs	r3, r2
   15c68:	d100      	bne.n	15c6c <__aeabi_dsub+0x584>
   15c6a:	e744      	b.n	15af6 <__aeabi_dsub+0x40e>
   15c6c:	08c0      	lsrs	r0, r0, #3
   15c6e:	0767      	lsls	r7, r4, #29
   15c70:	4307      	orrs	r7, r0
   15c72:	2080      	movs	r0, #128	; 0x80
   15c74:	08e4      	lsrs	r4, r4, #3
   15c76:	0300      	lsls	r0, r0, #12
   15c78:	4204      	tst	r4, r0
   15c7a:	d0e1      	beq.n	15c40 <__aeabi_dsub+0x558>
   15c7c:	08cb      	lsrs	r3, r1, #3
   15c7e:	4203      	tst	r3, r0
   15c80:	d1de      	bne.n	15c40 <__aeabi_dsub+0x558>
   15c82:	08d7      	lsrs	r7, r2, #3
   15c84:	0749      	lsls	r1, r1, #29
   15c86:	430f      	orrs	r7, r1
   15c88:	001c      	movs	r4, r3
   15c8a:	e7d9      	b.n	15c40 <__aeabi_dsub+0x558>
   15c8c:	2100      	movs	r1, #0
   15c8e:	e771      	b.n	15b74 <__aeabi_dsub+0x48c>
   15c90:	2500      	movs	r5, #0
   15c92:	2700      	movs	r7, #0
   15c94:	e5e9      	b.n	1586a <__aeabi_dsub+0x182>
   15c96:	002e      	movs	r6, r5
   15c98:	0027      	movs	r7, r4
   15c9a:	3e20      	subs	r6, #32
   15c9c:	40f7      	lsrs	r7, r6
   15c9e:	2d20      	cmp	r5, #32
   15ca0:	d02f      	beq.n	15d02 <__aeabi_dsub+0x61a>
   15ca2:	2640      	movs	r6, #64	; 0x40
   15ca4:	1b75      	subs	r5, r6, r5
   15ca6:	40ac      	lsls	r4, r5
   15ca8:	4650      	mov	r0, sl
   15caa:	4320      	orrs	r0, r4
   15cac:	1e44      	subs	r4, r0, #1
   15cae:	41a0      	sbcs	r0, r4
   15cb0:	2400      	movs	r4, #0
   15cb2:	4338      	orrs	r0, r7
   15cb4:	e6dc      	b.n	15a70 <__aeabi_dsub+0x388>
   15cb6:	2480      	movs	r4, #128	; 0x80
   15cb8:	2500      	movs	r5, #0
   15cba:	0324      	lsls	r4, r4, #12
   15cbc:	4e13      	ldr	r6, [pc, #76]	; (15d0c <__aeabi_dsub+0x624>)
   15cbe:	2700      	movs	r7, #0
   15cc0:	e5d3      	b.n	1586a <__aeabi_dsub+0x182>
   15cc2:	4650      	mov	r0, sl
   15cc4:	4320      	orrs	r0, r4
   15cc6:	0007      	movs	r7, r0
   15cc8:	1e78      	subs	r0, r7, #1
   15cca:	4187      	sbcs	r7, r0
   15ccc:	2400      	movs	r4, #0
   15cce:	18bf      	adds	r7, r7, r2
   15cd0:	e760      	b.n	15b94 <__aeabi_dsub+0x4ac>
   15cd2:	000c      	movs	r4, r1
   15cd4:	0017      	movs	r7, r2
   15cd6:	e58d      	b.n	157f4 <__aeabi_dsub+0x10c>
   15cd8:	000c      	movs	r4, r1
   15cda:	0017      	movs	r7, r2
   15cdc:	4e0b      	ldr	r6, [pc, #44]	; (15d0c <__aeabi_dsub+0x624>)
   15cde:	e589      	b.n	157f4 <__aeabi_dsub+0x10c>
   15ce0:	001e      	movs	r6, r3
   15ce2:	0027      	movs	r7, r4
   15ce4:	3e20      	subs	r6, #32
   15ce6:	40f7      	lsrs	r7, r6
   15ce8:	2b20      	cmp	r3, #32
   15cea:	d00c      	beq.n	15d06 <__aeabi_dsub+0x61e>
   15cec:	2640      	movs	r6, #64	; 0x40
   15cee:	1af3      	subs	r3, r6, r3
   15cf0:	409c      	lsls	r4, r3
   15cf2:	4650      	mov	r0, sl
   15cf4:	4320      	orrs	r0, r4
   15cf6:	1e44      	subs	r4, r0, #1
   15cf8:	41a0      	sbcs	r0, r4
   15cfa:	4307      	orrs	r7, r0
   15cfc:	2400      	movs	r4, #0
   15cfe:	18bf      	adds	r7, r7, r2
   15d00:	e748      	b.n	15b94 <__aeabi_dsub+0x4ac>
   15d02:	2400      	movs	r4, #0
   15d04:	e7d0      	b.n	15ca8 <__aeabi_dsub+0x5c0>
   15d06:	2400      	movs	r4, #0
   15d08:	e7f3      	b.n	15cf2 <__aeabi_dsub+0x60a>
   15d0a:	46c0      	nop			; (mov r8, r8)
   15d0c:	000007ff 	.word	0x000007ff
   15d10:	ff7fffff 	.word	0xff7fffff

00015d14 <__aeabi_d2iz>:
   15d14:	b530      	push	{r4, r5, lr}
   15d16:	4d13      	ldr	r5, [pc, #76]	; (15d64 <__aeabi_d2iz+0x50>)
   15d18:	030a      	lsls	r2, r1, #12
   15d1a:	004b      	lsls	r3, r1, #1
   15d1c:	0b12      	lsrs	r2, r2, #12
   15d1e:	0d5b      	lsrs	r3, r3, #21
   15d20:	0fc9      	lsrs	r1, r1, #31
   15d22:	2400      	movs	r4, #0
   15d24:	42ab      	cmp	r3, r5
   15d26:	dd10      	ble.n	15d4a <__aeabi_d2iz+0x36>
   15d28:	4c0f      	ldr	r4, [pc, #60]	; (15d68 <__aeabi_d2iz+0x54>)
   15d2a:	42a3      	cmp	r3, r4
   15d2c:	dc0f      	bgt.n	15d4e <__aeabi_d2iz+0x3a>
   15d2e:	2480      	movs	r4, #128	; 0x80
   15d30:	4d0e      	ldr	r5, [pc, #56]	; (15d6c <__aeabi_d2iz+0x58>)
   15d32:	0364      	lsls	r4, r4, #13
   15d34:	4322      	orrs	r2, r4
   15d36:	1aed      	subs	r5, r5, r3
   15d38:	2d1f      	cmp	r5, #31
   15d3a:	dd0b      	ble.n	15d54 <__aeabi_d2iz+0x40>
   15d3c:	480c      	ldr	r0, [pc, #48]	; (15d70 <__aeabi_d2iz+0x5c>)
   15d3e:	1ac3      	subs	r3, r0, r3
   15d40:	40da      	lsrs	r2, r3
   15d42:	4254      	negs	r4, r2
   15d44:	2900      	cmp	r1, #0
   15d46:	d100      	bne.n	15d4a <__aeabi_d2iz+0x36>
   15d48:	0014      	movs	r4, r2
   15d4a:	0020      	movs	r0, r4
   15d4c:	bd30      	pop	{r4, r5, pc}
   15d4e:	4b09      	ldr	r3, [pc, #36]	; (15d74 <__aeabi_d2iz+0x60>)
   15d50:	18cc      	adds	r4, r1, r3
   15d52:	e7fa      	b.n	15d4a <__aeabi_d2iz+0x36>
   15d54:	4c08      	ldr	r4, [pc, #32]	; (15d78 <__aeabi_d2iz+0x64>)
   15d56:	40e8      	lsrs	r0, r5
   15d58:	46a4      	mov	ip, r4
   15d5a:	4463      	add	r3, ip
   15d5c:	409a      	lsls	r2, r3
   15d5e:	4302      	orrs	r2, r0
   15d60:	e7ef      	b.n	15d42 <__aeabi_d2iz+0x2e>
   15d62:	46c0      	nop			; (mov r8, r8)
   15d64:	000003fe 	.word	0x000003fe
   15d68:	0000041d 	.word	0x0000041d
   15d6c:	00000433 	.word	0x00000433
   15d70:	00000413 	.word	0x00000413
   15d74:	7fffffff 	.word	0x7fffffff
   15d78:	fffffbed 	.word	0xfffffbed

00015d7c <__aeabi_i2d>:
   15d7c:	b570      	push	{r4, r5, r6, lr}
   15d7e:	2800      	cmp	r0, #0
   15d80:	d030      	beq.n	15de4 <__aeabi_i2d+0x68>
   15d82:	17c3      	asrs	r3, r0, #31
   15d84:	18c4      	adds	r4, r0, r3
   15d86:	405c      	eors	r4, r3
   15d88:	0fc5      	lsrs	r5, r0, #31
   15d8a:	0020      	movs	r0, r4
   15d8c:	f000 f94c 	bl	16028 <__clzsi2>
   15d90:	4b17      	ldr	r3, [pc, #92]	; (15df0 <__aeabi_i2d+0x74>)
   15d92:	4a18      	ldr	r2, [pc, #96]	; (15df4 <__aeabi_i2d+0x78>)
   15d94:	1a1b      	subs	r3, r3, r0
   15d96:	1ad2      	subs	r2, r2, r3
   15d98:	2a1f      	cmp	r2, #31
   15d9a:	dd18      	ble.n	15dce <__aeabi_i2d+0x52>
   15d9c:	4a16      	ldr	r2, [pc, #88]	; (15df8 <__aeabi_i2d+0x7c>)
   15d9e:	1ad2      	subs	r2, r2, r3
   15da0:	4094      	lsls	r4, r2
   15da2:	2200      	movs	r2, #0
   15da4:	0324      	lsls	r4, r4, #12
   15da6:	055b      	lsls	r3, r3, #21
   15da8:	0b24      	lsrs	r4, r4, #12
   15daa:	0d5b      	lsrs	r3, r3, #21
   15dac:	2100      	movs	r1, #0
   15dae:	0010      	movs	r0, r2
   15db0:	0324      	lsls	r4, r4, #12
   15db2:	0d0a      	lsrs	r2, r1, #20
   15db4:	0b24      	lsrs	r4, r4, #12
   15db6:	0512      	lsls	r2, r2, #20
   15db8:	4322      	orrs	r2, r4
   15dba:	4c10      	ldr	r4, [pc, #64]	; (15dfc <__aeabi_i2d+0x80>)
   15dbc:	051b      	lsls	r3, r3, #20
   15dbe:	4022      	ands	r2, r4
   15dc0:	4313      	orrs	r3, r2
   15dc2:	005b      	lsls	r3, r3, #1
   15dc4:	07ed      	lsls	r5, r5, #31
   15dc6:	085b      	lsrs	r3, r3, #1
   15dc8:	432b      	orrs	r3, r5
   15dca:	0019      	movs	r1, r3
   15dcc:	bd70      	pop	{r4, r5, r6, pc}
   15dce:	0021      	movs	r1, r4
   15dd0:	4091      	lsls	r1, r2
   15dd2:	000a      	movs	r2, r1
   15dd4:	210b      	movs	r1, #11
   15dd6:	1a08      	subs	r0, r1, r0
   15dd8:	40c4      	lsrs	r4, r0
   15dda:	055b      	lsls	r3, r3, #21
   15ddc:	0324      	lsls	r4, r4, #12
   15dde:	0b24      	lsrs	r4, r4, #12
   15de0:	0d5b      	lsrs	r3, r3, #21
   15de2:	e7e3      	b.n	15dac <__aeabi_i2d+0x30>
   15de4:	2500      	movs	r5, #0
   15de6:	2300      	movs	r3, #0
   15de8:	2400      	movs	r4, #0
   15dea:	2200      	movs	r2, #0
   15dec:	e7de      	b.n	15dac <__aeabi_i2d+0x30>
   15dee:	46c0      	nop			; (mov r8, r8)
   15df0:	0000041e 	.word	0x0000041e
   15df4:	00000433 	.word	0x00000433
   15df8:	00000413 	.word	0x00000413
   15dfc:	800fffff 	.word	0x800fffff

00015e00 <__aeabi_ui2d>:
   15e00:	b510      	push	{r4, lr}
   15e02:	1e04      	subs	r4, r0, #0
   15e04:	d028      	beq.n	15e58 <__aeabi_ui2d+0x58>
   15e06:	f000 f90f 	bl	16028 <__clzsi2>
   15e0a:	4b15      	ldr	r3, [pc, #84]	; (15e60 <__aeabi_ui2d+0x60>)
   15e0c:	4a15      	ldr	r2, [pc, #84]	; (15e64 <__aeabi_ui2d+0x64>)
   15e0e:	1a1b      	subs	r3, r3, r0
   15e10:	1ad2      	subs	r2, r2, r3
   15e12:	2a1f      	cmp	r2, #31
   15e14:	dd15      	ble.n	15e42 <__aeabi_ui2d+0x42>
   15e16:	4a14      	ldr	r2, [pc, #80]	; (15e68 <__aeabi_ui2d+0x68>)
   15e18:	1ad2      	subs	r2, r2, r3
   15e1a:	4094      	lsls	r4, r2
   15e1c:	2200      	movs	r2, #0
   15e1e:	0324      	lsls	r4, r4, #12
   15e20:	055b      	lsls	r3, r3, #21
   15e22:	0b24      	lsrs	r4, r4, #12
   15e24:	0d5b      	lsrs	r3, r3, #21
   15e26:	2100      	movs	r1, #0
   15e28:	0010      	movs	r0, r2
   15e2a:	0324      	lsls	r4, r4, #12
   15e2c:	0d0a      	lsrs	r2, r1, #20
   15e2e:	0b24      	lsrs	r4, r4, #12
   15e30:	0512      	lsls	r2, r2, #20
   15e32:	4322      	orrs	r2, r4
   15e34:	4c0d      	ldr	r4, [pc, #52]	; (15e6c <__aeabi_ui2d+0x6c>)
   15e36:	051b      	lsls	r3, r3, #20
   15e38:	4022      	ands	r2, r4
   15e3a:	4313      	orrs	r3, r2
   15e3c:	005b      	lsls	r3, r3, #1
   15e3e:	0859      	lsrs	r1, r3, #1
   15e40:	bd10      	pop	{r4, pc}
   15e42:	0021      	movs	r1, r4
   15e44:	4091      	lsls	r1, r2
   15e46:	000a      	movs	r2, r1
   15e48:	210b      	movs	r1, #11
   15e4a:	1a08      	subs	r0, r1, r0
   15e4c:	40c4      	lsrs	r4, r0
   15e4e:	055b      	lsls	r3, r3, #21
   15e50:	0324      	lsls	r4, r4, #12
   15e52:	0b24      	lsrs	r4, r4, #12
   15e54:	0d5b      	lsrs	r3, r3, #21
   15e56:	e7e6      	b.n	15e26 <__aeabi_ui2d+0x26>
   15e58:	2300      	movs	r3, #0
   15e5a:	2400      	movs	r4, #0
   15e5c:	2200      	movs	r2, #0
   15e5e:	e7e2      	b.n	15e26 <__aeabi_ui2d+0x26>
   15e60:	0000041e 	.word	0x0000041e
   15e64:	00000433 	.word	0x00000433
   15e68:	00000413 	.word	0x00000413
   15e6c:	800fffff 	.word	0x800fffff

00015e70 <__aeabi_f2d>:
   15e70:	0041      	lsls	r1, r0, #1
   15e72:	0e09      	lsrs	r1, r1, #24
   15e74:	1c4b      	adds	r3, r1, #1
   15e76:	b570      	push	{r4, r5, r6, lr}
   15e78:	b2db      	uxtb	r3, r3
   15e7a:	0246      	lsls	r6, r0, #9
   15e7c:	0a75      	lsrs	r5, r6, #9
   15e7e:	0fc4      	lsrs	r4, r0, #31
   15e80:	2b01      	cmp	r3, #1
   15e82:	dd14      	ble.n	15eae <__aeabi_f2d+0x3e>
   15e84:	23e0      	movs	r3, #224	; 0xe0
   15e86:	009b      	lsls	r3, r3, #2
   15e88:	076d      	lsls	r5, r5, #29
   15e8a:	0b36      	lsrs	r6, r6, #12
   15e8c:	18cb      	adds	r3, r1, r3
   15e8e:	2100      	movs	r1, #0
   15e90:	0d0a      	lsrs	r2, r1, #20
   15e92:	0028      	movs	r0, r5
   15e94:	0512      	lsls	r2, r2, #20
   15e96:	4d1c      	ldr	r5, [pc, #112]	; (15f08 <__aeabi_f2d+0x98>)
   15e98:	4332      	orrs	r2, r6
   15e9a:	055b      	lsls	r3, r3, #21
   15e9c:	402a      	ands	r2, r5
   15e9e:	085b      	lsrs	r3, r3, #1
   15ea0:	4313      	orrs	r3, r2
   15ea2:	005b      	lsls	r3, r3, #1
   15ea4:	07e4      	lsls	r4, r4, #31
   15ea6:	085b      	lsrs	r3, r3, #1
   15ea8:	4323      	orrs	r3, r4
   15eaa:	0019      	movs	r1, r3
   15eac:	bd70      	pop	{r4, r5, r6, pc}
   15eae:	2900      	cmp	r1, #0
   15eb0:	d114      	bne.n	15edc <__aeabi_f2d+0x6c>
   15eb2:	2d00      	cmp	r5, #0
   15eb4:	d01e      	beq.n	15ef4 <__aeabi_f2d+0x84>
   15eb6:	0028      	movs	r0, r5
   15eb8:	f000 f8b6 	bl	16028 <__clzsi2>
   15ebc:	280a      	cmp	r0, #10
   15ebe:	dc1c      	bgt.n	15efa <__aeabi_f2d+0x8a>
   15ec0:	230b      	movs	r3, #11
   15ec2:	002a      	movs	r2, r5
   15ec4:	1a1b      	subs	r3, r3, r0
   15ec6:	40da      	lsrs	r2, r3
   15ec8:	0003      	movs	r3, r0
   15eca:	3315      	adds	r3, #21
   15ecc:	409d      	lsls	r5, r3
   15ece:	4b0f      	ldr	r3, [pc, #60]	; (15f0c <__aeabi_f2d+0x9c>)
   15ed0:	0312      	lsls	r2, r2, #12
   15ed2:	1a1b      	subs	r3, r3, r0
   15ed4:	055b      	lsls	r3, r3, #21
   15ed6:	0b16      	lsrs	r6, r2, #12
   15ed8:	0d5b      	lsrs	r3, r3, #21
   15eda:	e7d8      	b.n	15e8e <__aeabi_f2d+0x1e>
   15edc:	2d00      	cmp	r5, #0
   15ede:	d006      	beq.n	15eee <__aeabi_f2d+0x7e>
   15ee0:	0b32      	lsrs	r2, r6, #12
   15ee2:	2680      	movs	r6, #128	; 0x80
   15ee4:	0336      	lsls	r6, r6, #12
   15ee6:	076d      	lsls	r5, r5, #29
   15ee8:	4316      	orrs	r6, r2
   15eea:	4b09      	ldr	r3, [pc, #36]	; (15f10 <__aeabi_f2d+0xa0>)
   15eec:	e7cf      	b.n	15e8e <__aeabi_f2d+0x1e>
   15eee:	4b08      	ldr	r3, [pc, #32]	; (15f10 <__aeabi_f2d+0xa0>)
   15ef0:	2600      	movs	r6, #0
   15ef2:	e7cc      	b.n	15e8e <__aeabi_f2d+0x1e>
   15ef4:	2300      	movs	r3, #0
   15ef6:	2600      	movs	r6, #0
   15ef8:	e7c9      	b.n	15e8e <__aeabi_f2d+0x1e>
   15efa:	0003      	movs	r3, r0
   15efc:	002a      	movs	r2, r5
   15efe:	3b0b      	subs	r3, #11
   15f00:	409a      	lsls	r2, r3
   15f02:	2500      	movs	r5, #0
   15f04:	e7e3      	b.n	15ece <__aeabi_f2d+0x5e>
   15f06:	46c0      	nop			; (mov r8, r8)
   15f08:	800fffff 	.word	0x800fffff
   15f0c:	00000389 	.word	0x00000389
   15f10:	000007ff 	.word	0x000007ff

00015f14 <__aeabi_d2f>:
   15f14:	b5f0      	push	{r4, r5, r6, r7, lr}
   15f16:	004c      	lsls	r4, r1, #1
   15f18:	0d64      	lsrs	r4, r4, #21
   15f1a:	030b      	lsls	r3, r1, #12
   15f1c:	1c62      	adds	r2, r4, #1
   15f1e:	0f45      	lsrs	r5, r0, #29
   15f20:	0a5b      	lsrs	r3, r3, #9
   15f22:	0552      	lsls	r2, r2, #21
   15f24:	432b      	orrs	r3, r5
   15f26:	0fc9      	lsrs	r1, r1, #31
   15f28:	00c5      	lsls	r5, r0, #3
   15f2a:	0d52      	lsrs	r2, r2, #21
   15f2c:	2a01      	cmp	r2, #1
   15f2e:	dd28      	ble.n	15f82 <__aeabi_d2f+0x6e>
   15f30:	4a3a      	ldr	r2, [pc, #232]	; (1601c <__aeabi_d2f+0x108>)
   15f32:	18a6      	adds	r6, r4, r2
   15f34:	2efe      	cmp	r6, #254	; 0xfe
   15f36:	dc1b      	bgt.n	15f70 <__aeabi_d2f+0x5c>
   15f38:	2e00      	cmp	r6, #0
   15f3a:	dd3e      	ble.n	15fba <__aeabi_d2f+0xa6>
   15f3c:	0180      	lsls	r0, r0, #6
   15f3e:	0002      	movs	r2, r0
   15f40:	1e50      	subs	r0, r2, #1
   15f42:	4182      	sbcs	r2, r0
   15f44:	0f6d      	lsrs	r5, r5, #29
   15f46:	432a      	orrs	r2, r5
   15f48:	00db      	lsls	r3, r3, #3
   15f4a:	4313      	orrs	r3, r2
   15f4c:	075a      	lsls	r2, r3, #29
   15f4e:	d004      	beq.n	15f5a <__aeabi_d2f+0x46>
   15f50:	220f      	movs	r2, #15
   15f52:	401a      	ands	r2, r3
   15f54:	2a04      	cmp	r2, #4
   15f56:	d000      	beq.n	15f5a <__aeabi_d2f+0x46>
   15f58:	3304      	adds	r3, #4
   15f5a:	2280      	movs	r2, #128	; 0x80
   15f5c:	04d2      	lsls	r2, r2, #19
   15f5e:	401a      	ands	r2, r3
   15f60:	d05a      	beq.n	16018 <__aeabi_d2f+0x104>
   15f62:	3601      	adds	r6, #1
   15f64:	2eff      	cmp	r6, #255	; 0xff
   15f66:	d003      	beq.n	15f70 <__aeabi_d2f+0x5c>
   15f68:	019b      	lsls	r3, r3, #6
   15f6a:	0a5b      	lsrs	r3, r3, #9
   15f6c:	b2f4      	uxtb	r4, r6
   15f6e:	e001      	b.n	15f74 <__aeabi_d2f+0x60>
   15f70:	24ff      	movs	r4, #255	; 0xff
   15f72:	2300      	movs	r3, #0
   15f74:	0258      	lsls	r0, r3, #9
   15f76:	05e4      	lsls	r4, r4, #23
   15f78:	0a40      	lsrs	r0, r0, #9
   15f7a:	07c9      	lsls	r1, r1, #31
   15f7c:	4320      	orrs	r0, r4
   15f7e:	4308      	orrs	r0, r1
   15f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15f82:	2c00      	cmp	r4, #0
   15f84:	d007      	beq.n	15f96 <__aeabi_d2f+0x82>
   15f86:	431d      	orrs	r5, r3
   15f88:	d0f2      	beq.n	15f70 <__aeabi_d2f+0x5c>
   15f8a:	2080      	movs	r0, #128	; 0x80
   15f8c:	00db      	lsls	r3, r3, #3
   15f8e:	0480      	lsls	r0, r0, #18
   15f90:	4303      	orrs	r3, r0
   15f92:	26ff      	movs	r6, #255	; 0xff
   15f94:	e7da      	b.n	15f4c <__aeabi_d2f+0x38>
   15f96:	432b      	orrs	r3, r5
   15f98:	d003      	beq.n	15fa2 <__aeabi_d2f+0x8e>
   15f9a:	2305      	movs	r3, #5
   15f9c:	08db      	lsrs	r3, r3, #3
   15f9e:	2cff      	cmp	r4, #255	; 0xff
   15fa0:	d003      	beq.n	15faa <__aeabi_d2f+0x96>
   15fa2:	025b      	lsls	r3, r3, #9
   15fa4:	0a5b      	lsrs	r3, r3, #9
   15fa6:	b2e4      	uxtb	r4, r4
   15fa8:	e7e4      	b.n	15f74 <__aeabi_d2f+0x60>
   15faa:	2b00      	cmp	r3, #0
   15fac:	d032      	beq.n	16014 <__aeabi_d2f+0x100>
   15fae:	2080      	movs	r0, #128	; 0x80
   15fb0:	03c0      	lsls	r0, r0, #15
   15fb2:	4303      	orrs	r3, r0
   15fb4:	025b      	lsls	r3, r3, #9
   15fb6:	0a5b      	lsrs	r3, r3, #9
   15fb8:	e7dc      	b.n	15f74 <__aeabi_d2f+0x60>
   15fba:	0032      	movs	r2, r6
   15fbc:	3217      	adds	r2, #23
   15fbe:	db14      	blt.n	15fea <__aeabi_d2f+0xd6>
   15fc0:	2280      	movs	r2, #128	; 0x80
   15fc2:	271e      	movs	r7, #30
   15fc4:	0412      	lsls	r2, r2, #16
   15fc6:	4313      	orrs	r3, r2
   15fc8:	1bbf      	subs	r7, r7, r6
   15fca:	2f1f      	cmp	r7, #31
   15fcc:	dc0f      	bgt.n	15fee <__aeabi_d2f+0xda>
   15fce:	4a14      	ldr	r2, [pc, #80]	; (16020 <__aeabi_d2f+0x10c>)
   15fd0:	4694      	mov	ip, r2
   15fd2:	4464      	add	r4, ip
   15fd4:	002a      	movs	r2, r5
   15fd6:	40a5      	lsls	r5, r4
   15fd8:	002e      	movs	r6, r5
   15fda:	40a3      	lsls	r3, r4
   15fdc:	1e75      	subs	r5, r6, #1
   15fde:	41ae      	sbcs	r6, r5
   15fe0:	40fa      	lsrs	r2, r7
   15fe2:	4333      	orrs	r3, r6
   15fe4:	4313      	orrs	r3, r2
   15fe6:	2600      	movs	r6, #0
   15fe8:	e7b0      	b.n	15f4c <__aeabi_d2f+0x38>
   15fea:	2400      	movs	r4, #0
   15fec:	e7d5      	b.n	15f9a <__aeabi_d2f+0x86>
   15fee:	2202      	movs	r2, #2
   15ff0:	4252      	negs	r2, r2
   15ff2:	1b96      	subs	r6, r2, r6
   15ff4:	001a      	movs	r2, r3
   15ff6:	40f2      	lsrs	r2, r6
   15ff8:	2f20      	cmp	r7, #32
   15ffa:	d009      	beq.n	16010 <__aeabi_d2f+0xfc>
   15ffc:	4809      	ldr	r0, [pc, #36]	; (16024 <__aeabi_d2f+0x110>)
   15ffe:	4684      	mov	ip, r0
   16000:	4464      	add	r4, ip
   16002:	40a3      	lsls	r3, r4
   16004:	432b      	orrs	r3, r5
   16006:	1e5d      	subs	r5, r3, #1
   16008:	41ab      	sbcs	r3, r5
   1600a:	2600      	movs	r6, #0
   1600c:	4313      	orrs	r3, r2
   1600e:	e79d      	b.n	15f4c <__aeabi_d2f+0x38>
   16010:	2300      	movs	r3, #0
   16012:	e7f7      	b.n	16004 <__aeabi_d2f+0xf0>
   16014:	2300      	movs	r3, #0
   16016:	e7ad      	b.n	15f74 <__aeabi_d2f+0x60>
   16018:	0034      	movs	r4, r6
   1601a:	e7bf      	b.n	15f9c <__aeabi_d2f+0x88>
   1601c:	fffffc80 	.word	0xfffffc80
   16020:	fffffc82 	.word	0xfffffc82
   16024:	fffffca2 	.word	0xfffffca2

00016028 <__clzsi2>:
   16028:	211c      	movs	r1, #28
   1602a:	2301      	movs	r3, #1
   1602c:	041b      	lsls	r3, r3, #16
   1602e:	4298      	cmp	r0, r3
   16030:	d301      	bcc.n	16036 <__clzsi2+0xe>
   16032:	0c00      	lsrs	r0, r0, #16
   16034:	3910      	subs	r1, #16
   16036:	0a1b      	lsrs	r3, r3, #8
   16038:	4298      	cmp	r0, r3
   1603a:	d301      	bcc.n	16040 <__clzsi2+0x18>
   1603c:	0a00      	lsrs	r0, r0, #8
   1603e:	3908      	subs	r1, #8
   16040:	091b      	lsrs	r3, r3, #4
   16042:	4298      	cmp	r0, r3
   16044:	d301      	bcc.n	1604a <__clzsi2+0x22>
   16046:	0900      	lsrs	r0, r0, #4
   16048:	3904      	subs	r1, #4
   1604a:	a202      	add	r2, pc, #8	; (adr r2, 16054 <__clzsi2+0x2c>)
   1604c:	5c10      	ldrb	r0, [r2, r0]
   1604e:	1840      	adds	r0, r0, r1
   16050:	4770      	bx	lr
   16052:	46c0      	nop			; (mov r8, r8)
   16054:	02020304 	.word	0x02020304
   16058:	01010101 	.word	0x01010101
	...

00016064 <__clzdi2>:
   16064:	b510      	push	{r4, lr}
   16066:	2900      	cmp	r1, #0
   16068:	d103      	bne.n	16072 <__clzdi2+0xe>
   1606a:	f7ff ffdd 	bl	16028 <__clzsi2>
   1606e:	3020      	adds	r0, #32
   16070:	e002      	b.n	16078 <__clzdi2+0x14>
   16072:	1c08      	adds	r0, r1, #0
   16074:	f7ff ffd8 	bl	16028 <__clzsi2>
   16078:	bd10      	pop	{r4, pc}
   1607a:	46c0      	nop			; (mov r8, r8)

0001607c <__assert_func>:
   1607c:	b530      	push	{r4, r5, lr}
   1607e:	001c      	movs	r4, r3
   16080:	4b09      	ldr	r3, [pc, #36]	; (160a8 <__assert_func+0x2c>)
   16082:	0005      	movs	r5, r0
   16084:	681b      	ldr	r3, [r3, #0]
   16086:	b085      	sub	sp, #20
   16088:	68d8      	ldr	r0, [r3, #12]
   1608a:	4b08      	ldr	r3, [pc, #32]	; (160ac <__assert_func+0x30>)
   1608c:	2a00      	cmp	r2, #0
   1608e:	d101      	bne.n	16094 <__assert_func+0x18>
   16090:	4b07      	ldr	r3, [pc, #28]	; (160b0 <__assert_func+0x34>)
   16092:	001a      	movs	r2, r3
   16094:	9202      	str	r2, [sp, #8]
   16096:	9301      	str	r3, [sp, #4]
   16098:	9100      	str	r1, [sp, #0]
   1609a:	002b      	movs	r3, r5
   1609c:	0022      	movs	r2, r4
   1609e:	4905      	ldr	r1, [pc, #20]	; (160b4 <__assert_func+0x38>)
   160a0:	f000 f80a 	bl	160b8 <fiprintf>
   160a4:	f000 fdac 	bl	16c00 <abort>
   160a8:	20000020 	.word	0x20000020
   160ac:	00018474 	.word	0x00018474
   160b0:	000184af 	.word	0x000184af
   160b4:	00018481 	.word	0x00018481

000160b8 <fiprintf>:
   160b8:	b40e      	push	{r1, r2, r3}
   160ba:	b503      	push	{r0, r1, lr}
   160bc:	0001      	movs	r1, r0
   160be:	ab03      	add	r3, sp, #12
   160c0:	4804      	ldr	r0, [pc, #16]	; (160d4 <fiprintf+0x1c>)
   160c2:	cb04      	ldmia	r3!, {r2}
   160c4:	6800      	ldr	r0, [r0, #0]
   160c6:	9301      	str	r3, [sp, #4]
   160c8:	f000 f872 	bl	161b0 <_vfiprintf_r>
   160cc:	b002      	add	sp, #8
   160ce:	bc08      	pop	{r3}
   160d0:	b003      	add	sp, #12
   160d2:	4718      	bx	r3
   160d4:	20000020 	.word	0x20000020

000160d8 <__libc_init_array>:
   160d8:	b570      	push	{r4, r5, r6, lr}
   160da:	2600      	movs	r6, #0
   160dc:	4d0c      	ldr	r5, [pc, #48]	; (16110 <__libc_init_array+0x38>)
   160de:	4c0d      	ldr	r4, [pc, #52]	; (16114 <__libc_init_array+0x3c>)
   160e0:	1b64      	subs	r4, r4, r5
   160e2:	10a4      	asrs	r4, r4, #2
   160e4:	42a6      	cmp	r6, r4
   160e6:	d109      	bne.n	160fc <__libc_init_array+0x24>
   160e8:	2600      	movs	r6, #0
   160ea:	f002 fa2d 	bl	18548 <_init>
   160ee:	4d0a      	ldr	r5, [pc, #40]	; (16118 <__libc_init_array+0x40>)
   160f0:	4c0a      	ldr	r4, [pc, #40]	; (1611c <__libc_init_array+0x44>)
   160f2:	1b64      	subs	r4, r4, r5
   160f4:	10a4      	asrs	r4, r4, #2
   160f6:	42a6      	cmp	r6, r4
   160f8:	d105      	bne.n	16106 <__libc_init_array+0x2e>
   160fa:	bd70      	pop	{r4, r5, r6, pc}
   160fc:	00b3      	lsls	r3, r6, #2
   160fe:	58eb      	ldr	r3, [r5, r3]
   16100:	4798      	blx	r3
   16102:	3601      	adds	r6, #1
   16104:	e7ee      	b.n	160e4 <__libc_init_array+0xc>
   16106:	00b3      	lsls	r3, r6, #2
   16108:	58eb      	ldr	r3, [r5, r3]
   1610a:	4798      	blx	r3
   1610c:	3601      	adds	r6, #1
   1610e:	e7f2      	b.n	160f6 <__libc_init_array+0x1e>
   16110:	00018554 	.word	0x00018554
   16114:	00018554 	.word	0x00018554
   16118:	00018554 	.word	0x00018554
   1611c:	00018558 	.word	0x00018558

00016120 <memcmp>:
   16120:	b530      	push	{r4, r5, lr}
   16122:	2400      	movs	r4, #0
   16124:	42a2      	cmp	r2, r4
   16126:	d101      	bne.n	1612c <memcmp+0xc>
   16128:	2000      	movs	r0, #0
   1612a:	e005      	b.n	16138 <memcmp+0x18>
   1612c:	5d03      	ldrb	r3, [r0, r4]
   1612e:	1c65      	adds	r5, r4, #1
   16130:	5d0c      	ldrb	r4, [r1, r4]
   16132:	42a3      	cmp	r3, r4
   16134:	d001      	beq.n	1613a <memcmp+0x1a>
   16136:	1b18      	subs	r0, r3, r4
   16138:	bd30      	pop	{r4, r5, pc}
   1613a:	002c      	movs	r4, r5
   1613c:	e7f2      	b.n	16124 <memcmp+0x4>

0001613e <memcpy>:
   1613e:	2300      	movs	r3, #0
   16140:	b510      	push	{r4, lr}
   16142:	429a      	cmp	r2, r3
   16144:	d100      	bne.n	16148 <memcpy+0xa>
   16146:	bd10      	pop	{r4, pc}
   16148:	5ccc      	ldrb	r4, [r1, r3]
   1614a:	54c4      	strb	r4, [r0, r3]
   1614c:	3301      	adds	r3, #1
   1614e:	e7f8      	b.n	16142 <memcpy+0x4>

00016150 <memset>:
   16150:	0003      	movs	r3, r0
   16152:	1882      	adds	r2, r0, r2
   16154:	4293      	cmp	r3, r2
   16156:	d100      	bne.n	1615a <memset+0xa>
   16158:	4770      	bx	lr
   1615a:	7019      	strb	r1, [r3, #0]
   1615c:	3301      	adds	r3, #1
   1615e:	e7f9      	b.n	16154 <memset+0x4>

00016160 <__sfputc_r>:
   16160:	6893      	ldr	r3, [r2, #8]
   16162:	b510      	push	{r4, lr}
   16164:	3b01      	subs	r3, #1
   16166:	6093      	str	r3, [r2, #8]
   16168:	2b00      	cmp	r3, #0
   1616a:	da05      	bge.n	16178 <__sfputc_r+0x18>
   1616c:	6994      	ldr	r4, [r2, #24]
   1616e:	42a3      	cmp	r3, r4
   16170:	db08      	blt.n	16184 <__sfputc_r+0x24>
   16172:	b2cb      	uxtb	r3, r1
   16174:	2b0a      	cmp	r3, #10
   16176:	d005      	beq.n	16184 <__sfputc_r+0x24>
   16178:	6813      	ldr	r3, [r2, #0]
   1617a:	1c58      	adds	r0, r3, #1
   1617c:	6010      	str	r0, [r2, #0]
   1617e:	7019      	strb	r1, [r3, #0]
   16180:	b2c8      	uxtb	r0, r1
   16182:	bd10      	pop	{r4, pc}
   16184:	f000 fc70 	bl	16a68 <__swbuf_r>
   16188:	e7fb      	b.n	16182 <__sfputc_r+0x22>

0001618a <__sfputs_r>:
   1618a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1618c:	0006      	movs	r6, r0
   1618e:	000f      	movs	r7, r1
   16190:	0014      	movs	r4, r2
   16192:	18d5      	adds	r5, r2, r3
   16194:	42ac      	cmp	r4, r5
   16196:	d101      	bne.n	1619c <__sfputs_r+0x12>
   16198:	2000      	movs	r0, #0
   1619a:	e007      	b.n	161ac <__sfputs_r+0x22>
   1619c:	7821      	ldrb	r1, [r4, #0]
   1619e:	003a      	movs	r2, r7
   161a0:	0030      	movs	r0, r6
   161a2:	f7ff ffdd 	bl	16160 <__sfputc_r>
   161a6:	3401      	adds	r4, #1
   161a8:	1c43      	adds	r3, r0, #1
   161aa:	d1f3      	bne.n	16194 <__sfputs_r+0xa>
   161ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   161ae:	Address 0x000161ae is out of bounds.


000161b0 <_vfiprintf_r>:
   161b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   161b2:	b09f      	sub	sp, #124	; 0x7c
   161b4:	0006      	movs	r6, r0
   161b6:	000f      	movs	r7, r1
   161b8:	0014      	movs	r4, r2
   161ba:	9305      	str	r3, [sp, #20]
   161bc:	2800      	cmp	r0, #0
   161be:	d004      	beq.n	161ca <_vfiprintf_r+0x1a>
   161c0:	6983      	ldr	r3, [r0, #24]
   161c2:	2b00      	cmp	r3, #0
   161c4:	d101      	bne.n	161ca <_vfiprintf_r+0x1a>
   161c6:	f000 fe1b 	bl	16e00 <__sinit>
   161ca:	4b7f      	ldr	r3, [pc, #508]	; (163c8 <_vfiprintf_r+0x218>)
   161cc:	429f      	cmp	r7, r3
   161ce:	d15c      	bne.n	1628a <_vfiprintf_r+0xda>
   161d0:	6877      	ldr	r7, [r6, #4]
   161d2:	89bb      	ldrh	r3, [r7, #12]
   161d4:	071b      	lsls	r3, r3, #28
   161d6:	d562      	bpl.n	1629e <_vfiprintf_r+0xee>
   161d8:	693b      	ldr	r3, [r7, #16]
   161da:	2b00      	cmp	r3, #0
   161dc:	d05f      	beq.n	1629e <_vfiprintf_r+0xee>
   161de:	2300      	movs	r3, #0
   161e0:	ad06      	add	r5, sp, #24
   161e2:	616b      	str	r3, [r5, #20]
   161e4:	3320      	adds	r3, #32
   161e6:	766b      	strb	r3, [r5, #25]
   161e8:	3310      	adds	r3, #16
   161ea:	76ab      	strb	r3, [r5, #26]
   161ec:	9402      	str	r4, [sp, #8]
   161ee:	9c02      	ldr	r4, [sp, #8]
   161f0:	7823      	ldrb	r3, [r4, #0]
   161f2:	2b00      	cmp	r3, #0
   161f4:	d15d      	bne.n	162b2 <_vfiprintf_r+0x102>
   161f6:	9b02      	ldr	r3, [sp, #8]
   161f8:	1ae3      	subs	r3, r4, r3
   161fa:	9304      	str	r3, [sp, #16]
   161fc:	d00d      	beq.n	1621a <_vfiprintf_r+0x6a>
   161fe:	9b04      	ldr	r3, [sp, #16]
   16200:	9a02      	ldr	r2, [sp, #8]
   16202:	0039      	movs	r1, r7
   16204:	0030      	movs	r0, r6
   16206:	f7ff ffc0 	bl	1618a <__sfputs_r>
   1620a:	1c43      	adds	r3, r0, #1
   1620c:	d100      	bne.n	16210 <_vfiprintf_r+0x60>
   1620e:	e0cc      	b.n	163aa <_vfiprintf_r+0x1fa>
   16210:	696a      	ldr	r2, [r5, #20]
   16212:	9b04      	ldr	r3, [sp, #16]
   16214:	4694      	mov	ip, r2
   16216:	4463      	add	r3, ip
   16218:	616b      	str	r3, [r5, #20]
   1621a:	7823      	ldrb	r3, [r4, #0]
   1621c:	2b00      	cmp	r3, #0
   1621e:	d100      	bne.n	16222 <_vfiprintf_r+0x72>
   16220:	e0c3      	b.n	163aa <_vfiprintf_r+0x1fa>
   16222:	2201      	movs	r2, #1
   16224:	2300      	movs	r3, #0
   16226:	4252      	negs	r2, r2
   16228:	606a      	str	r2, [r5, #4]
   1622a:	a902      	add	r1, sp, #8
   1622c:	3254      	adds	r2, #84	; 0x54
   1622e:	1852      	adds	r2, r2, r1
   16230:	3401      	adds	r4, #1
   16232:	602b      	str	r3, [r5, #0]
   16234:	60eb      	str	r3, [r5, #12]
   16236:	60ab      	str	r3, [r5, #8]
   16238:	7013      	strb	r3, [r2, #0]
   1623a:	65ab      	str	r3, [r5, #88]	; 0x58
   1623c:	7821      	ldrb	r1, [r4, #0]
   1623e:	2205      	movs	r2, #5
   16240:	4862      	ldr	r0, [pc, #392]	; (163cc <_vfiprintf_r+0x21c>)
   16242:	f000 fee9 	bl	17018 <memchr>
   16246:	1c63      	adds	r3, r4, #1
   16248:	469c      	mov	ip, r3
   1624a:	2800      	cmp	r0, #0
   1624c:	d135      	bne.n	162ba <_vfiprintf_r+0x10a>
   1624e:	6829      	ldr	r1, [r5, #0]
   16250:	06cb      	lsls	r3, r1, #27
   16252:	d504      	bpl.n	1625e <_vfiprintf_r+0xae>
   16254:	2353      	movs	r3, #83	; 0x53
   16256:	aa02      	add	r2, sp, #8
   16258:	3020      	adds	r0, #32
   1625a:	189b      	adds	r3, r3, r2
   1625c:	7018      	strb	r0, [r3, #0]
   1625e:	070b      	lsls	r3, r1, #28
   16260:	d504      	bpl.n	1626c <_vfiprintf_r+0xbc>
   16262:	2353      	movs	r3, #83	; 0x53
   16264:	202b      	movs	r0, #43	; 0x2b
   16266:	aa02      	add	r2, sp, #8
   16268:	189b      	adds	r3, r3, r2
   1626a:	7018      	strb	r0, [r3, #0]
   1626c:	7823      	ldrb	r3, [r4, #0]
   1626e:	2b2a      	cmp	r3, #42	; 0x2a
   16270:	d02c      	beq.n	162cc <_vfiprintf_r+0x11c>
   16272:	2000      	movs	r0, #0
   16274:	210a      	movs	r1, #10
   16276:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16278:	7822      	ldrb	r2, [r4, #0]
   1627a:	3a30      	subs	r2, #48	; 0x30
   1627c:	2a09      	cmp	r2, #9
   1627e:	d800      	bhi.n	16282 <_vfiprintf_r+0xd2>
   16280:	e06b      	b.n	1635a <_vfiprintf_r+0x1aa>
   16282:	2800      	cmp	r0, #0
   16284:	d02a      	beq.n	162dc <_vfiprintf_r+0x12c>
   16286:	9309      	str	r3, [sp, #36]	; 0x24
   16288:	e028      	b.n	162dc <_vfiprintf_r+0x12c>
   1628a:	4b51      	ldr	r3, [pc, #324]	; (163d0 <_vfiprintf_r+0x220>)
   1628c:	429f      	cmp	r7, r3
   1628e:	d101      	bne.n	16294 <_vfiprintf_r+0xe4>
   16290:	68b7      	ldr	r7, [r6, #8]
   16292:	e79e      	b.n	161d2 <_vfiprintf_r+0x22>
   16294:	4b4f      	ldr	r3, [pc, #316]	; (163d4 <_vfiprintf_r+0x224>)
   16296:	429f      	cmp	r7, r3
   16298:	d19b      	bne.n	161d2 <_vfiprintf_r+0x22>
   1629a:	68f7      	ldr	r7, [r6, #12]
   1629c:	e799      	b.n	161d2 <_vfiprintf_r+0x22>
   1629e:	0039      	movs	r1, r7
   162a0:	0030      	movs	r0, r6
   162a2:	f000 fc37 	bl	16b14 <__swsetup_r>
   162a6:	2800      	cmp	r0, #0
   162a8:	d099      	beq.n	161de <_vfiprintf_r+0x2e>
   162aa:	2001      	movs	r0, #1
   162ac:	4240      	negs	r0, r0
   162ae:	b01f      	add	sp, #124	; 0x7c
   162b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   162b2:	2b25      	cmp	r3, #37	; 0x25
   162b4:	d09f      	beq.n	161f6 <_vfiprintf_r+0x46>
   162b6:	3401      	adds	r4, #1
   162b8:	e79a      	b.n	161f0 <_vfiprintf_r+0x40>
   162ba:	4b44      	ldr	r3, [pc, #272]	; (163cc <_vfiprintf_r+0x21c>)
   162bc:	6829      	ldr	r1, [r5, #0]
   162be:	1ac0      	subs	r0, r0, r3
   162c0:	2301      	movs	r3, #1
   162c2:	4083      	lsls	r3, r0
   162c4:	430b      	orrs	r3, r1
   162c6:	602b      	str	r3, [r5, #0]
   162c8:	4664      	mov	r4, ip
   162ca:	e7b7      	b.n	1623c <_vfiprintf_r+0x8c>
   162cc:	9b05      	ldr	r3, [sp, #20]
   162ce:	1d18      	adds	r0, r3, #4
   162d0:	681b      	ldr	r3, [r3, #0]
   162d2:	9005      	str	r0, [sp, #20]
   162d4:	2b00      	cmp	r3, #0
   162d6:	db3a      	blt.n	1634e <_vfiprintf_r+0x19e>
   162d8:	9309      	str	r3, [sp, #36]	; 0x24
   162da:	4664      	mov	r4, ip
   162dc:	7823      	ldrb	r3, [r4, #0]
   162de:	2b2e      	cmp	r3, #46	; 0x2e
   162e0:	d10b      	bne.n	162fa <_vfiprintf_r+0x14a>
   162e2:	7863      	ldrb	r3, [r4, #1]
   162e4:	1c62      	adds	r2, r4, #1
   162e6:	2b2a      	cmp	r3, #42	; 0x2a
   162e8:	d13f      	bne.n	1636a <_vfiprintf_r+0x1ba>
   162ea:	9b05      	ldr	r3, [sp, #20]
   162ec:	3402      	adds	r4, #2
   162ee:	1d1a      	adds	r2, r3, #4
   162f0:	681b      	ldr	r3, [r3, #0]
   162f2:	9205      	str	r2, [sp, #20]
   162f4:	2b00      	cmp	r3, #0
   162f6:	db35      	blt.n	16364 <_vfiprintf_r+0x1b4>
   162f8:	9307      	str	r3, [sp, #28]
   162fa:	7821      	ldrb	r1, [r4, #0]
   162fc:	2203      	movs	r2, #3
   162fe:	4836      	ldr	r0, [pc, #216]	; (163d8 <_vfiprintf_r+0x228>)
   16300:	f000 fe8a 	bl	17018 <memchr>
   16304:	2800      	cmp	r0, #0
   16306:	d007      	beq.n	16318 <_vfiprintf_r+0x168>
   16308:	4b33      	ldr	r3, [pc, #204]	; (163d8 <_vfiprintf_r+0x228>)
   1630a:	682a      	ldr	r2, [r5, #0]
   1630c:	1ac0      	subs	r0, r0, r3
   1630e:	2340      	movs	r3, #64	; 0x40
   16310:	4083      	lsls	r3, r0
   16312:	4313      	orrs	r3, r2
   16314:	602b      	str	r3, [r5, #0]
   16316:	3401      	adds	r4, #1
   16318:	7821      	ldrb	r1, [r4, #0]
   1631a:	1c63      	adds	r3, r4, #1
   1631c:	2206      	movs	r2, #6
   1631e:	482f      	ldr	r0, [pc, #188]	; (163dc <_vfiprintf_r+0x22c>)
   16320:	9302      	str	r3, [sp, #8]
   16322:	7629      	strb	r1, [r5, #24]
   16324:	f000 fe78 	bl	17018 <memchr>
   16328:	2800      	cmp	r0, #0
   1632a:	d044      	beq.n	163b6 <_vfiprintf_r+0x206>
   1632c:	4b2c      	ldr	r3, [pc, #176]	; (163e0 <_vfiprintf_r+0x230>)
   1632e:	2b00      	cmp	r3, #0
   16330:	d12f      	bne.n	16392 <_vfiprintf_r+0x1e2>
   16332:	6829      	ldr	r1, [r5, #0]
   16334:	9b05      	ldr	r3, [sp, #20]
   16336:	2207      	movs	r2, #7
   16338:	05c9      	lsls	r1, r1, #23
   1633a:	d528      	bpl.n	1638e <_vfiprintf_r+0x1de>
   1633c:	189b      	adds	r3, r3, r2
   1633e:	4393      	bics	r3, r2
   16340:	3308      	adds	r3, #8
   16342:	9305      	str	r3, [sp, #20]
   16344:	696b      	ldr	r3, [r5, #20]
   16346:	9a03      	ldr	r2, [sp, #12]
   16348:	189b      	adds	r3, r3, r2
   1634a:	616b      	str	r3, [r5, #20]
   1634c:	e74f      	b.n	161ee <_vfiprintf_r+0x3e>
   1634e:	425b      	negs	r3, r3
   16350:	60eb      	str	r3, [r5, #12]
   16352:	2302      	movs	r3, #2
   16354:	430b      	orrs	r3, r1
   16356:	602b      	str	r3, [r5, #0]
   16358:	e7bf      	b.n	162da <_vfiprintf_r+0x12a>
   1635a:	434b      	muls	r3, r1
   1635c:	3401      	adds	r4, #1
   1635e:	189b      	adds	r3, r3, r2
   16360:	2001      	movs	r0, #1
   16362:	e789      	b.n	16278 <_vfiprintf_r+0xc8>
   16364:	2301      	movs	r3, #1
   16366:	425b      	negs	r3, r3
   16368:	e7c6      	b.n	162f8 <_vfiprintf_r+0x148>
   1636a:	2300      	movs	r3, #0
   1636c:	0014      	movs	r4, r2
   1636e:	200a      	movs	r0, #10
   16370:	001a      	movs	r2, r3
   16372:	606b      	str	r3, [r5, #4]
   16374:	7821      	ldrb	r1, [r4, #0]
   16376:	3930      	subs	r1, #48	; 0x30
   16378:	2909      	cmp	r1, #9
   1637a:	d903      	bls.n	16384 <_vfiprintf_r+0x1d4>
   1637c:	2b00      	cmp	r3, #0
   1637e:	d0bc      	beq.n	162fa <_vfiprintf_r+0x14a>
   16380:	9207      	str	r2, [sp, #28]
   16382:	e7ba      	b.n	162fa <_vfiprintf_r+0x14a>
   16384:	4342      	muls	r2, r0
   16386:	3401      	adds	r4, #1
   16388:	1852      	adds	r2, r2, r1
   1638a:	2301      	movs	r3, #1
   1638c:	e7f2      	b.n	16374 <_vfiprintf_r+0x1c4>
   1638e:	3307      	adds	r3, #7
   16390:	e7d5      	b.n	1633e <_vfiprintf_r+0x18e>
   16392:	ab05      	add	r3, sp, #20
   16394:	9300      	str	r3, [sp, #0]
   16396:	003a      	movs	r2, r7
   16398:	4b12      	ldr	r3, [pc, #72]	; (163e4 <_vfiprintf_r+0x234>)
   1639a:	0029      	movs	r1, r5
   1639c:	0030      	movs	r0, r6
   1639e:	e000      	b.n	163a2 <_vfiprintf_r+0x1f2>
   163a0:	bf00      	nop
   163a2:	9003      	str	r0, [sp, #12]
   163a4:	9b03      	ldr	r3, [sp, #12]
   163a6:	3301      	adds	r3, #1
   163a8:	d1cc      	bne.n	16344 <_vfiprintf_r+0x194>
   163aa:	89bb      	ldrh	r3, [r7, #12]
   163ac:	065b      	lsls	r3, r3, #25
   163ae:	d500      	bpl.n	163b2 <_vfiprintf_r+0x202>
   163b0:	e77b      	b.n	162aa <_vfiprintf_r+0xfa>
   163b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
   163b4:	e77b      	b.n	162ae <_vfiprintf_r+0xfe>
   163b6:	ab05      	add	r3, sp, #20
   163b8:	9300      	str	r3, [sp, #0]
   163ba:	003a      	movs	r2, r7
   163bc:	4b09      	ldr	r3, [pc, #36]	; (163e4 <_vfiprintf_r+0x234>)
   163be:	0029      	movs	r1, r5
   163c0:	0030      	movs	r0, r6
   163c2:	f000 f87f 	bl	164c4 <_printf_i>
   163c6:	e7ec      	b.n	163a2 <_vfiprintf_r+0x1f2>
   163c8:	00018508 	.word	0x00018508
   163cc:	000184b4 	.word	0x000184b4
   163d0:	00018528 	.word	0x00018528
   163d4:	000184e8 	.word	0x000184e8
   163d8:	000184ba 	.word	0x000184ba
   163dc:	000184be 	.word	0x000184be
   163e0:	00000000 	.word	0x00000000
   163e4:	0001618b 	.word	0x0001618b

000163e8 <_printf_common>:
   163e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   163ea:	0015      	movs	r5, r2
   163ec:	9301      	str	r3, [sp, #4]
   163ee:	688a      	ldr	r2, [r1, #8]
   163f0:	690b      	ldr	r3, [r1, #16]
   163f2:	9000      	str	r0, [sp, #0]
   163f4:	000c      	movs	r4, r1
   163f6:	4293      	cmp	r3, r2
   163f8:	da00      	bge.n	163fc <_printf_common+0x14>
   163fa:	0013      	movs	r3, r2
   163fc:	0022      	movs	r2, r4
   163fe:	602b      	str	r3, [r5, #0]
   16400:	3243      	adds	r2, #67	; 0x43
   16402:	7812      	ldrb	r2, [r2, #0]
   16404:	2a00      	cmp	r2, #0
   16406:	d001      	beq.n	1640c <_printf_common+0x24>
   16408:	3301      	adds	r3, #1
   1640a:	602b      	str	r3, [r5, #0]
   1640c:	6823      	ldr	r3, [r4, #0]
   1640e:	069b      	lsls	r3, r3, #26
   16410:	d502      	bpl.n	16418 <_printf_common+0x30>
   16412:	682b      	ldr	r3, [r5, #0]
   16414:	3302      	adds	r3, #2
   16416:	602b      	str	r3, [r5, #0]
   16418:	2706      	movs	r7, #6
   1641a:	6823      	ldr	r3, [r4, #0]
   1641c:	401f      	ands	r7, r3
   1641e:	d027      	beq.n	16470 <_printf_common+0x88>
   16420:	0023      	movs	r3, r4
   16422:	3343      	adds	r3, #67	; 0x43
   16424:	781b      	ldrb	r3, [r3, #0]
   16426:	1e5a      	subs	r2, r3, #1
   16428:	4193      	sbcs	r3, r2
   1642a:	6822      	ldr	r2, [r4, #0]
   1642c:	0692      	lsls	r2, r2, #26
   1642e:	d430      	bmi.n	16492 <_printf_common+0xaa>
   16430:	0022      	movs	r2, r4
   16432:	9901      	ldr	r1, [sp, #4]
   16434:	3243      	adds	r2, #67	; 0x43
   16436:	9800      	ldr	r0, [sp, #0]
   16438:	9e08      	ldr	r6, [sp, #32]
   1643a:	47b0      	blx	r6
   1643c:	1c43      	adds	r3, r0, #1
   1643e:	d025      	beq.n	1648c <_printf_common+0xa4>
   16440:	2306      	movs	r3, #6
   16442:	6820      	ldr	r0, [r4, #0]
   16444:	682a      	ldr	r2, [r5, #0]
   16446:	68e1      	ldr	r1, [r4, #12]
   16448:	4003      	ands	r3, r0
   1644a:	2500      	movs	r5, #0
   1644c:	2b04      	cmp	r3, #4
   1644e:	d103      	bne.n	16458 <_printf_common+0x70>
   16450:	1a8d      	subs	r5, r1, r2
   16452:	43eb      	mvns	r3, r5
   16454:	17db      	asrs	r3, r3, #31
   16456:	401d      	ands	r5, r3
   16458:	68a3      	ldr	r3, [r4, #8]
   1645a:	6922      	ldr	r2, [r4, #16]
   1645c:	4293      	cmp	r3, r2
   1645e:	dd01      	ble.n	16464 <_printf_common+0x7c>
   16460:	1a9b      	subs	r3, r3, r2
   16462:	18ed      	adds	r5, r5, r3
   16464:	2700      	movs	r7, #0
   16466:	42bd      	cmp	r5, r7
   16468:	d120      	bne.n	164ac <_printf_common+0xc4>
   1646a:	2000      	movs	r0, #0
   1646c:	e010      	b.n	16490 <_printf_common+0xa8>
   1646e:	3701      	adds	r7, #1
   16470:	68e3      	ldr	r3, [r4, #12]
   16472:	682a      	ldr	r2, [r5, #0]
   16474:	1a9b      	subs	r3, r3, r2
   16476:	429f      	cmp	r7, r3
   16478:	dad2      	bge.n	16420 <_printf_common+0x38>
   1647a:	0022      	movs	r2, r4
   1647c:	2301      	movs	r3, #1
   1647e:	3219      	adds	r2, #25
   16480:	9901      	ldr	r1, [sp, #4]
   16482:	9800      	ldr	r0, [sp, #0]
   16484:	9e08      	ldr	r6, [sp, #32]
   16486:	47b0      	blx	r6
   16488:	1c43      	adds	r3, r0, #1
   1648a:	d1f0      	bne.n	1646e <_printf_common+0x86>
   1648c:	2001      	movs	r0, #1
   1648e:	4240      	negs	r0, r0
   16490:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   16492:	2030      	movs	r0, #48	; 0x30
   16494:	18e1      	adds	r1, r4, r3
   16496:	3143      	adds	r1, #67	; 0x43
   16498:	7008      	strb	r0, [r1, #0]
   1649a:	0021      	movs	r1, r4
   1649c:	1c5a      	adds	r2, r3, #1
   1649e:	3145      	adds	r1, #69	; 0x45
   164a0:	7809      	ldrb	r1, [r1, #0]
   164a2:	18a2      	adds	r2, r4, r2
   164a4:	3243      	adds	r2, #67	; 0x43
   164a6:	3302      	adds	r3, #2
   164a8:	7011      	strb	r1, [r2, #0]
   164aa:	e7c1      	b.n	16430 <_printf_common+0x48>
   164ac:	0022      	movs	r2, r4
   164ae:	2301      	movs	r3, #1
   164b0:	321a      	adds	r2, #26
   164b2:	9901      	ldr	r1, [sp, #4]
   164b4:	9800      	ldr	r0, [sp, #0]
   164b6:	9e08      	ldr	r6, [sp, #32]
   164b8:	47b0      	blx	r6
   164ba:	1c43      	adds	r3, r0, #1
   164bc:	d0e6      	beq.n	1648c <_printf_common+0xa4>
   164be:	3701      	adds	r7, #1
   164c0:	e7d1      	b.n	16466 <_printf_common+0x7e>
   164c2:	Address 0x000164c2 is out of bounds.


000164c4 <_printf_i>:
   164c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   164c6:	b08b      	sub	sp, #44	; 0x2c
   164c8:	9206      	str	r2, [sp, #24]
   164ca:	000a      	movs	r2, r1
   164cc:	3243      	adds	r2, #67	; 0x43
   164ce:	9307      	str	r3, [sp, #28]
   164d0:	9005      	str	r0, [sp, #20]
   164d2:	9204      	str	r2, [sp, #16]
   164d4:	7e0a      	ldrb	r2, [r1, #24]
   164d6:	000c      	movs	r4, r1
   164d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   164da:	2a6e      	cmp	r2, #110	; 0x6e
   164dc:	d100      	bne.n	164e0 <_printf_i+0x1c>
   164de:	e08f      	b.n	16600 <_printf_i+0x13c>
   164e0:	d817      	bhi.n	16512 <_printf_i+0x4e>
   164e2:	2a63      	cmp	r2, #99	; 0x63
   164e4:	d02c      	beq.n	16540 <_printf_i+0x7c>
   164e6:	d808      	bhi.n	164fa <_printf_i+0x36>
   164e8:	2a00      	cmp	r2, #0
   164ea:	d100      	bne.n	164ee <_printf_i+0x2a>
   164ec:	e099      	b.n	16622 <_printf_i+0x15e>
   164ee:	2a58      	cmp	r2, #88	; 0x58
   164f0:	d054      	beq.n	1659c <_printf_i+0xd8>
   164f2:	0026      	movs	r6, r4
   164f4:	3642      	adds	r6, #66	; 0x42
   164f6:	7032      	strb	r2, [r6, #0]
   164f8:	e029      	b.n	1654e <_printf_i+0x8a>
   164fa:	2a64      	cmp	r2, #100	; 0x64
   164fc:	d001      	beq.n	16502 <_printf_i+0x3e>
   164fe:	2a69      	cmp	r2, #105	; 0x69
   16500:	d1f7      	bne.n	164f2 <_printf_i+0x2e>
   16502:	6821      	ldr	r1, [r4, #0]
   16504:	681a      	ldr	r2, [r3, #0]
   16506:	0608      	lsls	r0, r1, #24
   16508:	d523      	bpl.n	16552 <_printf_i+0x8e>
   1650a:	1d11      	adds	r1, r2, #4
   1650c:	6019      	str	r1, [r3, #0]
   1650e:	6815      	ldr	r5, [r2, #0]
   16510:	e025      	b.n	1655e <_printf_i+0x9a>
   16512:	2a73      	cmp	r2, #115	; 0x73
   16514:	d100      	bne.n	16518 <_printf_i+0x54>
   16516:	e088      	b.n	1662a <_printf_i+0x166>
   16518:	d808      	bhi.n	1652c <_printf_i+0x68>
   1651a:	2a6f      	cmp	r2, #111	; 0x6f
   1651c:	d029      	beq.n	16572 <_printf_i+0xae>
   1651e:	2a70      	cmp	r2, #112	; 0x70
   16520:	d1e7      	bne.n	164f2 <_printf_i+0x2e>
   16522:	2220      	movs	r2, #32
   16524:	6809      	ldr	r1, [r1, #0]
   16526:	430a      	orrs	r2, r1
   16528:	6022      	str	r2, [r4, #0]
   1652a:	e003      	b.n	16534 <_printf_i+0x70>
   1652c:	2a75      	cmp	r2, #117	; 0x75
   1652e:	d020      	beq.n	16572 <_printf_i+0xae>
   16530:	2a78      	cmp	r2, #120	; 0x78
   16532:	d1de      	bne.n	164f2 <_printf_i+0x2e>
   16534:	0022      	movs	r2, r4
   16536:	2178      	movs	r1, #120	; 0x78
   16538:	3245      	adds	r2, #69	; 0x45
   1653a:	7011      	strb	r1, [r2, #0]
   1653c:	4a6c      	ldr	r2, [pc, #432]	; (166f0 <_printf_i+0x22c>)
   1653e:	e030      	b.n	165a2 <_printf_i+0xde>
   16540:	000e      	movs	r6, r1
   16542:	681a      	ldr	r2, [r3, #0]
   16544:	3642      	adds	r6, #66	; 0x42
   16546:	1d11      	adds	r1, r2, #4
   16548:	6019      	str	r1, [r3, #0]
   1654a:	6813      	ldr	r3, [r2, #0]
   1654c:	7033      	strb	r3, [r6, #0]
   1654e:	2301      	movs	r3, #1
   16550:	e079      	b.n	16646 <_printf_i+0x182>
   16552:	0649      	lsls	r1, r1, #25
   16554:	d5d9      	bpl.n	1650a <_printf_i+0x46>
   16556:	1d11      	adds	r1, r2, #4
   16558:	6019      	str	r1, [r3, #0]
   1655a:	2300      	movs	r3, #0
   1655c:	5ed5      	ldrsh	r5, [r2, r3]
   1655e:	2d00      	cmp	r5, #0
   16560:	da03      	bge.n	1656a <_printf_i+0xa6>
   16562:	232d      	movs	r3, #45	; 0x2d
   16564:	9a04      	ldr	r2, [sp, #16]
   16566:	426d      	negs	r5, r5
   16568:	7013      	strb	r3, [r2, #0]
   1656a:	4b62      	ldr	r3, [pc, #392]	; (166f4 <_printf_i+0x230>)
   1656c:	270a      	movs	r7, #10
   1656e:	9303      	str	r3, [sp, #12]
   16570:	e02f      	b.n	165d2 <_printf_i+0x10e>
   16572:	6820      	ldr	r0, [r4, #0]
   16574:	6819      	ldr	r1, [r3, #0]
   16576:	0605      	lsls	r5, r0, #24
   16578:	d503      	bpl.n	16582 <_printf_i+0xbe>
   1657a:	1d08      	adds	r0, r1, #4
   1657c:	6018      	str	r0, [r3, #0]
   1657e:	680d      	ldr	r5, [r1, #0]
   16580:	e005      	b.n	1658e <_printf_i+0xca>
   16582:	0640      	lsls	r0, r0, #25
   16584:	d5f9      	bpl.n	1657a <_printf_i+0xb6>
   16586:	680d      	ldr	r5, [r1, #0]
   16588:	1d08      	adds	r0, r1, #4
   1658a:	6018      	str	r0, [r3, #0]
   1658c:	b2ad      	uxth	r5, r5
   1658e:	4b59      	ldr	r3, [pc, #356]	; (166f4 <_printf_i+0x230>)
   16590:	2708      	movs	r7, #8
   16592:	9303      	str	r3, [sp, #12]
   16594:	2a6f      	cmp	r2, #111	; 0x6f
   16596:	d018      	beq.n	165ca <_printf_i+0x106>
   16598:	270a      	movs	r7, #10
   1659a:	e016      	b.n	165ca <_printf_i+0x106>
   1659c:	3145      	adds	r1, #69	; 0x45
   1659e:	700a      	strb	r2, [r1, #0]
   165a0:	4a54      	ldr	r2, [pc, #336]	; (166f4 <_printf_i+0x230>)
   165a2:	9203      	str	r2, [sp, #12]
   165a4:	681a      	ldr	r2, [r3, #0]
   165a6:	6821      	ldr	r1, [r4, #0]
   165a8:	1d10      	adds	r0, r2, #4
   165aa:	6018      	str	r0, [r3, #0]
   165ac:	6815      	ldr	r5, [r2, #0]
   165ae:	0608      	lsls	r0, r1, #24
   165b0:	d522      	bpl.n	165f8 <_printf_i+0x134>
   165b2:	07cb      	lsls	r3, r1, #31
   165b4:	d502      	bpl.n	165bc <_printf_i+0xf8>
   165b6:	2320      	movs	r3, #32
   165b8:	4319      	orrs	r1, r3
   165ba:	6021      	str	r1, [r4, #0]
   165bc:	2710      	movs	r7, #16
   165be:	2d00      	cmp	r5, #0
   165c0:	d103      	bne.n	165ca <_printf_i+0x106>
   165c2:	2320      	movs	r3, #32
   165c4:	6822      	ldr	r2, [r4, #0]
   165c6:	439a      	bics	r2, r3
   165c8:	6022      	str	r2, [r4, #0]
   165ca:	0023      	movs	r3, r4
   165cc:	2200      	movs	r2, #0
   165ce:	3343      	adds	r3, #67	; 0x43
   165d0:	701a      	strb	r2, [r3, #0]
   165d2:	6863      	ldr	r3, [r4, #4]
   165d4:	60a3      	str	r3, [r4, #8]
   165d6:	2b00      	cmp	r3, #0
   165d8:	db5c      	blt.n	16694 <_printf_i+0x1d0>
   165da:	2204      	movs	r2, #4
   165dc:	6821      	ldr	r1, [r4, #0]
   165de:	4391      	bics	r1, r2
   165e0:	6021      	str	r1, [r4, #0]
   165e2:	2d00      	cmp	r5, #0
   165e4:	d158      	bne.n	16698 <_printf_i+0x1d4>
   165e6:	9e04      	ldr	r6, [sp, #16]
   165e8:	2b00      	cmp	r3, #0
   165ea:	d064      	beq.n	166b6 <_printf_i+0x1f2>
   165ec:	0026      	movs	r6, r4
   165ee:	9b03      	ldr	r3, [sp, #12]
   165f0:	3642      	adds	r6, #66	; 0x42
   165f2:	781b      	ldrb	r3, [r3, #0]
   165f4:	7033      	strb	r3, [r6, #0]
   165f6:	e05e      	b.n	166b6 <_printf_i+0x1f2>
   165f8:	0648      	lsls	r0, r1, #25
   165fa:	d5da      	bpl.n	165b2 <_printf_i+0xee>
   165fc:	b2ad      	uxth	r5, r5
   165fe:	e7d8      	b.n	165b2 <_printf_i+0xee>
   16600:	6809      	ldr	r1, [r1, #0]
   16602:	681a      	ldr	r2, [r3, #0]
   16604:	0608      	lsls	r0, r1, #24
   16606:	d505      	bpl.n	16614 <_printf_i+0x150>
   16608:	1d11      	adds	r1, r2, #4
   1660a:	6019      	str	r1, [r3, #0]
   1660c:	6813      	ldr	r3, [r2, #0]
   1660e:	6962      	ldr	r2, [r4, #20]
   16610:	601a      	str	r2, [r3, #0]
   16612:	e006      	b.n	16622 <_printf_i+0x15e>
   16614:	0649      	lsls	r1, r1, #25
   16616:	d5f7      	bpl.n	16608 <_printf_i+0x144>
   16618:	1d11      	adds	r1, r2, #4
   1661a:	6019      	str	r1, [r3, #0]
   1661c:	6813      	ldr	r3, [r2, #0]
   1661e:	8aa2      	ldrh	r2, [r4, #20]
   16620:	801a      	strh	r2, [r3, #0]
   16622:	2300      	movs	r3, #0
   16624:	9e04      	ldr	r6, [sp, #16]
   16626:	6123      	str	r3, [r4, #16]
   16628:	e054      	b.n	166d4 <_printf_i+0x210>
   1662a:	681a      	ldr	r2, [r3, #0]
   1662c:	1d11      	adds	r1, r2, #4
   1662e:	6019      	str	r1, [r3, #0]
   16630:	6816      	ldr	r6, [r2, #0]
   16632:	2100      	movs	r1, #0
   16634:	6862      	ldr	r2, [r4, #4]
   16636:	0030      	movs	r0, r6
   16638:	f000 fcee 	bl	17018 <memchr>
   1663c:	2800      	cmp	r0, #0
   1663e:	d001      	beq.n	16644 <_printf_i+0x180>
   16640:	1b80      	subs	r0, r0, r6
   16642:	6060      	str	r0, [r4, #4]
   16644:	6863      	ldr	r3, [r4, #4]
   16646:	6123      	str	r3, [r4, #16]
   16648:	2300      	movs	r3, #0
   1664a:	9a04      	ldr	r2, [sp, #16]
   1664c:	7013      	strb	r3, [r2, #0]
   1664e:	e041      	b.n	166d4 <_printf_i+0x210>
   16650:	6923      	ldr	r3, [r4, #16]
   16652:	0032      	movs	r2, r6
   16654:	9906      	ldr	r1, [sp, #24]
   16656:	9805      	ldr	r0, [sp, #20]
   16658:	9d07      	ldr	r5, [sp, #28]
   1665a:	47a8      	blx	r5
   1665c:	1c43      	adds	r3, r0, #1
   1665e:	d043      	beq.n	166e8 <_printf_i+0x224>
   16660:	6823      	ldr	r3, [r4, #0]
   16662:	2500      	movs	r5, #0
   16664:	079b      	lsls	r3, r3, #30
   16666:	d40f      	bmi.n	16688 <_printf_i+0x1c4>
   16668:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1666a:	68e0      	ldr	r0, [r4, #12]
   1666c:	4298      	cmp	r0, r3
   1666e:	da3d      	bge.n	166ec <_printf_i+0x228>
   16670:	0018      	movs	r0, r3
   16672:	e03b      	b.n	166ec <_printf_i+0x228>
   16674:	0022      	movs	r2, r4
   16676:	2301      	movs	r3, #1
   16678:	3219      	adds	r2, #25
   1667a:	9906      	ldr	r1, [sp, #24]
   1667c:	9805      	ldr	r0, [sp, #20]
   1667e:	9e07      	ldr	r6, [sp, #28]
   16680:	47b0      	blx	r6
   16682:	1c43      	adds	r3, r0, #1
   16684:	d030      	beq.n	166e8 <_printf_i+0x224>
   16686:	3501      	adds	r5, #1
   16688:	68e3      	ldr	r3, [r4, #12]
   1668a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1668c:	1a9b      	subs	r3, r3, r2
   1668e:	429d      	cmp	r5, r3
   16690:	dbf0      	blt.n	16674 <_printf_i+0x1b0>
   16692:	e7e9      	b.n	16668 <_printf_i+0x1a4>
   16694:	2d00      	cmp	r5, #0
   16696:	d0a9      	beq.n	165ec <_printf_i+0x128>
   16698:	9e04      	ldr	r6, [sp, #16]
   1669a:	0028      	movs	r0, r5
   1669c:	0039      	movs	r1, r7
   1669e:	f7fc fca3 	bl	12fe8 <__aeabi_uidivmod>
   166a2:	9b03      	ldr	r3, [sp, #12]
   166a4:	3e01      	subs	r6, #1
   166a6:	5c5b      	ldrb	r3, [r3, r1]
   166a8:	0028      	movs	r0, r5
   166aa:	7033      	strb	r3, [r6, #0]
   166ac:	0039      	movs	r1, r7
   166ae:	f7fc fc15 	bl	12edc <__udivsi3>
   166b2:	1e05      	subs	r5, r0, #0
   166b4:	d1f1      	bne.n	1669a <_printf_i+0x1d6>
   166b6:	2f08      	cmp	r7, #8
   166b8:	d109      	bne.n	166ce <_printf_i+0x20a>
   166ba:	6823      	ldr	r3, [r4, #0]
   166bc:	07db      	lsls	r3, r3, #31
   166be:	d506      	bpl.n	166ce <_printf_i+0x20a>
   166c0:	6863      	ldr	r3, [r4, #4]
   166c2:	6922      	ldr	r2, [r4, #16]
   166c4:	4293      	cmp	r3, r2
   166c6:	dc02      	bgt.n	166ce <_printf_i+0x20a>
   166c8:	2330      	movs	r3, #48	; 0x30
   166ca:	3e01      	subs	r6, #1
   166cc:	7033      	strb	r3, [r6, #0]
   166ce:	9b04      	ldr	r3, [sp, #16]
   166d0:	1b9b      	subs	r3, r3, r6
   166d2:	6123      	str	r3, [r4, #16]
   166d4:	9b07      	ldr	r3, [sp, #28]
   166d6:	aa09      	add	r2, sp, #36	; 0x24
   166d8:	9300      	str	r3, [sp, #0]
   166da:	0021      	movs	r1, r4
   166dc:	9b06      	ldr	r3, [sp, #24]
   166de:	9805      	ldr	r0, [sp, #20]
   166e0:	f7ff fe82 	bl	163e8 <_printf_common>
   166e4:	1c43      	adds	r3, r0, #1
   166e6:	d1b3      	bne.n	16650 <_printf_i+0x18c>
   166e8:	2001      	movs	r0, #1
   166ea:	4240      	negs	r0, r0
   166ec:	b00b      	add	sp, #44	; 0x2c
   166ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   166f0:	000184d6 	.word	0x000184d6
   166f4:	000184c5 	.word	0x000184c5

000166f8 <iprintf>:
   166f8:	b40f      	push	{r0, r1, r2, r3}
   166fa:	4b0b      	ldr	r3, [pc, #44]	; (16728 <iprintf+0x30>)
   166fc:	b513      	push	{r0, r1, r4, lr}
   166fe:	681c      	ldr	r4, [r3, #0]
   16700:	2c00      	cmp	r4, #0
   16702:	d005      	beq.n	16710 <iprintf+0x18>
   16704:	69a3      	ldr	r3, [r4, #24]
   16706:	2b00      	cmp	r3, #0
   16708:	d102      	bne.n	16710 <iprintf+0x18>
   1670a:	0020      	movs	r0, r4
   1670c:	f000 fb78 	bl	16e00 <__sinit>
   16710:	ab05      	add	r3, sp, #20
   16712:	9a04      	ldr	r2, [sp, #16]
   16714:	68a1      	ldr	r1, [r4, #8]
   16716:	0020      	movs	r0, r4
   16718:	9301      	str	r3, [sp, #4]
   1671a:	f7ff fd49 	bl	161b0 <_vfiprintf_r>
   1671e:	bc16      	pop	{r1, r2, r4}
   16720:	bc08      	pop	{r3}
   16722:	b004      	add	sp, #16
   16724:	4718      	bx	r3
   16726:	46c0      	nop			; (mov r8, r8)
   16728:	20000020 	.word	0x20000020

0001672c <putchar>:
   1672c:	4b08      	ldr	r3, [pc, #32]	; (16750 <putchar+0x24>)
   1672e:	b570      	push	{r4, r5, r6, lr}
   16730:	681c      	ldr	r4, [r3, #0]
   16732:	0005      	movs	r5, r0
   16734:	2c00      	cmp	r4, #0
   16736:	d005      	beq.n	16744 <putchar+0x18>
   16738:	69a3      	ldr	r3, [r4, #24]
   1673a:	2b00      	cmp	r3, #0
   1673c:	d102      	bne.n	16744 <putchar+0x18>
   1673e:	0020      	movs	r0, r4
   16740:	f000 fb5e 	bl	16e00 <__sinit>
   16744:	0029      	movs	r1, r5
   16746:	68a2      	ldr	r2, [r4, #8]
   16748:	0020      	movs	r0, r4
   1674a:	f000 fd19 	bl	17180 <_putc_r>
   1674e:	bd70      	pop	{r4, r5, r6, pc}
   16750:	20000020 	.word	0x20000020

00016754 <_puts_r>:
   16754:	b570      	push	{r4, r5, r6, lr}
   16756:	0005      	movs	r5, r0
   16758:	000e      	movs	r6, r1
   1675a:	2800      	cmp	r0, #0
   1675c:	d004      	beq.n	16768 <_puts_r+0x14>
   1675e:	6983      	ldr	r3, [r0, #24]
   16760:	2b00      	cmp	r3, #0
   16762:	d101      	bne.n	16768 <_puts_r+0x14>
   16764:	f000 fb4c 	bl	16e00 <__sinit>
   16768:	69ab      	ldr	r3, [r5, #24]
   1676a:	68ac      	ldr	r4, [r5, #8]
   1676c:	2b00      	cmp	r3, #0
   1676e:	d102      	bne.n	16776 <_puts_r+0x22>
   16770:	0028      	movs	r0, r5
   16772:	f000 fb45 	bl	16e00 <__sinit>
   16776:	4b24      	ldr	r3, [pc, #144]	; (16808 <_puts_r+0xb4>)
   16778:	429c      	cmp	r4, r3
   1677a:	d10f      	bne.n	1679c <_puts_r+0x48>
   1677c:	686c      	ldr	r4, [r5, #4]
   1677e:	89a3      	ldrh	r3, [r4, #12]
   16780:	071b      	lsls	r3, r3, #28
   16782:	d502      	bpl.n	1678a <_puts_r+0x36>
   16784:	6923      	ldr	r3, [r4, #16]
   16786:	2b00      	cmp	r3, #0
   16788:	d120      	bne.n	167cc <_puts_r+0x78>
   1678a:	0021      	movs	r1, r4
   1678c:	0028      	movs	r0, r5
   1678e:	f000 f9c1 	bl	16b14 <__swsetup_r>
   16792:	2800      	cmp	r0, #0
   16794:	d01a      	beq.n	167cc <_puts_r+0x78>
   16796:	2001      	movs	r0, #1
   16798:	4240      	negs	r0, r0
   1679a:	bd70      	pop	{r4, r5, r6, pc}
   1679c:	4b1b      	ldr	r3, [pc, #108]	; (1680c <_puts_r+0xb8>)
   1679e:	429c      	cmp	r4, r3
   167a0:	d101      	bne.n	167a6 <_puts_r+0x52>
   167a2:	68ac      	ldr	r4, [r5, #8]
   167a4:	e7eb      	b.n	1677e <_puts_r+0x2a>
   167a6:	4b1a      	ldr	r3, [pc, #104]	; (16810 <_puts_r+0xbc>)
   167a8:	429c      	cmp	r4, r3
   167aa:	d1e8      	bne.n	1677e <_puts_r+0x2a>
   167ac:	68ec      	ldr	r4, [r5, #12]
   167ae:	e7e6      	b.n	1677e <_puts_r+0x2a>
   167b0:	3b01      	subs	r3, #1
   167b2:	3601      	adds	r6, #1
   167b4:	60a3      	str	r3, [r4, #8]
   167b6:	2b00      	cmp	r3, #0
   167b8:	da04      	bge.n	167c4 <_puts_r+0x70>
   167ba:	69a2      	ldr	r2, [r4, #24]
   167bc:	4293      	cmp	r3, r2
   167be:	db16      	blt.n	167ee <_puts_r+0x9a>
   167c0:	290a      	cmp	r1, #10
   167c2:	d014      	beq.n	167ee <_puts_r+0x9a>
   167c4:	6823      	ldr	r3, [r4, #0]
   167c6:	1c5a      	adds	r2, r3, #1
   167c8:	6022      	str	r2, [r4, #0]
   167ca:	7019      	strb	r1, [r3, #0]
   167cc:	7831      	ldrb	r1, [r6, #0]
   167ce:	68a3      	ldr	r3, [r4, #8]
   167d0:	2900      	cmp	r1, #0
   167d2:	d1ed      	bne.n	167b0 <_puts_r+0x5c>
   167d4:	3b01      	subs	r3, #1
   167d6:	60a3      	str	r3, [r4, #8]
   167d8:	2b00      	cmp	r3, #0
   167da:	da0f      	bge.n	167fc <_puts_r+0xa8>
   167dc:	0022      	movs	r2, r4
   167de:	310a      	adds	r1, #10
   167e0:	0028      	movs	r0, r5
   167e2:	f000 f941 	bl	16a68 <__swbuf_r>
   167e6:	1c43      	adds	r3, r0, #1
   167e8:	d0d5      	beq.n	16796 <_puts_r+0x42>
   167ea:	200a      	movs	r0, #10
   167ec:	e7d5      	b.n	1679a <_puts_r+0x46>
   167ee:	0022      	movs	r2, r4
   167f0:	0028      	movs	r0, r5
   167f2:	f000 f939 	bl	16a68 <__swbuf_r>
   167f6:	1c43      	adds	r3, r0, #1
   167f8:	d1e8      	bne.n	167cc <_puts_r+0x78>
   167fa:	e7cc      	b.n	16796 <_puts_r+0x42>
   167fc:	200a      	movs	r0, #10
   167fe:	6823      	ldr	r3, [r4, #0]
   16800:	1c5a      	adds	r2, r3, #1
   16802:	6022      	str	r2, [r4, #0]
   16804:	7018      	strb	r0, [r3, #0]
   16806:	e7c8      	b.n	1679a <_puts_r+0x46>
   16808:	00018508 	.word	0x00018508
   1680c:	00018528 	.word	0x00018528
   16810:	000184e8 	.word	0x000184e8

00016814 <puts>:
   16814:	b510      	push	{r4, lr}
   16816:	4b03      	ldr	r3, [pc, #12]	; (16824 <puts+0x10>)
   16818:	0001      	movs	r1, r0
   1681a:	6818      	ldr	r0, [r3, #0]
   1681c:	f7ff ff9a 	bl	16754 <_puts_r>
   16820:	bd10      	pop	{r4, pc}
   16822:	46c0      	nop			; (mov r8, r8)
   16824:	20000020 	.word	0x20000020

00016828 <srand>:
   16828:	4b10      	ldr	r3, [pc, #64]	; (1686c <srand+0x44>)
   1682a:	b570      	push	{r4, r5, r6, lr}
   1682c:	681c      	ldr	r4, [r3, #0]
   1682e:	0005      	movs	r5, r0
   16830:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   16832:	2b00      	cmp	r3, #0
   16834:	d115      	bne.n	16862 <srand+0x3a>
   16836:	2018      	movs	r0, #24
   16838:	f000 fbe4 	bl	17004 <malloc>
   1683c:	4b0c      	ldr	r3, [pc, #48]	; (16870 <srand+0x48>)
   1683e:	63a0      	str	r0, [r4, #56]	; 0x38
   16840:	8003      	strh	r3, [r0, #0]
   16842:	4b0c      	ldr	r3, [pc, #48]	; (16874 <srand+0x4c>)
   16844:	2201      	movs	r2, #1
   16846:	8043      	strh	r3, [r0, #2]
   16848:	4b0b      	ldr	r3, [pc, #44]	; (16878 <srand+0x50>)
   1684a:	8083      	strh	r3, [r0, #4]
   1684c:	4b0b      	ldr	r3, [pc, #44]	; (1687c <srand+0x54>)
   1684e:	80c3      	strh	r3, [r0, #6]
   16850:	4b0b      	ldr	r3, [pc, #44]	; (16880 <srand+0x58>)
   16852:	8103      	strh	r3, [r0, #8]
   16854:	2305      	movs	r3, #5
   16856:	8143      	strh	r3, [r0, #10]
   16858:	3306      	adds	r3, #6
   1685a:	8183      	strh	r3, [r0, #12]
   1685c:	2300      	movs	r3, #0
   1685e:	6102      	str	r2, [r0, #16]
   16860:	6143      	str	r3, [r0, #20]
   16862:	2200      	movs	r2, #0
   16864:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   16866:	611d      	str	r5, [r3, #16]
   16868:	615a      	str	r2, [r3, #20]
   1686a:	bd70      	pop	{r4, r5, r6, pc}
   1686c:	20000020 	.word	0x20000020
   16870:	0000330e 	.word	0x0000330e
   16874:	ffffabcd 	.word	0xffffabcd
   16878:	00001234 	.word	0x00001234
   1687c:	ffffe66d 	.word	0xffffe66d
   16880:	ffffdeec 	.word	0xffffdeec

00016884 <rand>:
   16884:	4b15      	ldr	r3, [pc, #84]	; (168dc <rand+0x58>)
   16886:	b510      	push	{r4, lr}
   16888:	681c      	ldr	r4, [r3, #0]
   1688a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1688c:	2b00      	cmp	r3, #0
   1688e:	d115      	bne.n	168bc <rand+0x38>
   16890:	2018      	movs	r0, #24
   16892:	f000 fbb7 	bl	17004 <malloc>
   16896:	4b12      	ldr	r3, [pc, #72]	; (168e0 <rand+0x5c>)
   16898:	63a0      	str	r0, [r4, #56]	; 0x38
   1689a:	8003      	strh	r3, [r0, #0]
   1689c:	4b11      	ldr	r3, [pc, #68]	; (168e4 <rand+0x60>)
   1689e:	2201      	movs	r2, #1
   168a0:	8043      	strh	r3, [r0, #2]
   168a2:	4b11      	ldr	r3, [pc, #68]	; (168e8 <rand+0x64>)
   168a4:	8083      	strh	r3, [r0, #4]
   168a6:	4b11      	ldr	r3, [pc, #68]	; (168ec <rand+0x68>)
   168a8:	80c3      	strh	r3, [r0, #6]
   168aa:	4b11      	ldr	r3, [pc, #68]	; (168f0 <rand+0x6c>)
   168ac:	8103      	strh	r3, [r0, #8]
   168ae:	2305      	movs	r3, #5
   168b0:	8143      	strh	r3, [r0, #10]
   168b2:	3306      	adds	r3, #6
   168b4:	8183      	strh	r3, [r0, #12]
   168b6:	2300      	movs	r3, #0
   168b8:	6102      	str	r2, [r0, #16]
   168ba:	6143      	str	r3, [r0, #20]
   168bc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   168be:	4a0d      	ldr	r2, [pc, #52]	; (168f4 <rand+0x70>)
   168c0:	6920      	ldr	r0, [r4, #16]
   168c2:	6961      	ldr	r1, [r4, #20]
   168c4:	4b0c      	ldr	r3, [pc, #48]	; (168f8 <rand+0x74>)
   168c6:	f7fc fd17 	bl	132f8 <__aeabi_lmul>
   168ca:	2201      	movs	r2, #1
   168cc:	2300      	movs	r3, #0
   168ce:	1880      	adds	r0, r0, r2
   168d0:	4159      	adcs	r1, r3
   168d2:	6120      	str	r0, [r4, #16]
   168d4:	6161      	str	r1, [r4, #20]
   168d6:	0048      	lsls	r0, r1, #1
   168d8:	0840      	lsrs	r0, r0, #1
   168da:	bd10      	pop	{r4, pc}
   168dc:	20000020 	.word	0x20000020
   168e0:	0000330e 	.word	0x0000330e
   168e4:	ffffabcd 	.word	0xffffabcd
   168e8:	00001234 	.word	0x00001234
   168ec:	ffffe66d 	.word	0xffffe66d
   168f0:	ffffdeec 	.word	0xffffdeec
   168f4:	4c957f2d 	.word	0x4c957f2d
   168f8:	5851f42d 	.word	0x5851f42d

000168fc <setbuf>:
   168fc:	424a      	negs	r2, r1
   168fe:	414a      	adcs	r2, r1
   16900:	2380      	movs	r3, #128	; 0x80
   16902:	b510      	push	{r4, lr}
   16904:	0052      	lsls	r2, r2, #1
   16906:	00db      	lsls	r3, r3, #3
   16908:	f000 f802 	bl	16910 <setvbuf>
   1690c:	bd10      	pop	{r4, pc}
   1690e:	Address 0x0001690e is out of bounds.


00016910 <setvbuf>:
   16910:	b5f0      	push	{r4, r5, r6, r7, lr}
   16912:	001d      	movs	r5, r3
   16914:	4b4f      	ldr	r3, [pc, #316]	; (16a54 <setvbuf+0x144>)
   16916:	b085      	sub	sp, #20
   16918:	681e      	ldr	r6, [r3, #0]
   1691a:	0004      	movs	r4, r0
   1691c:	000f      	movs	r7, r1
   1691e:	9200      	str	r2, [sp, #0]
   16920:	2e00      	cmp	r6, #0
   16922:	d005      	beq.n	16930 <setvbuf+0x20>
   16924:	69b3      	ldr	r3, [r6, #24]
   16926:	2b00      	cmp	r3, #0
   16928:	d102      	bne.n	16930 <setvbuf+0x20>
   1692a:	0030      	movs	r0, r6
   1692c:	f000 fa68 	bl	16e00 <__sinit>
   16930:	4b49      	ldr	r3, [pc, #292]	; (16a58 <setvbuf+0x148>)
   16932:	429c      	cmp	r4, r3
   16934:	d150      	bne.n	169d8 <setvbuf+0xc8>
   16936:	6874      	ldr	r4, [r6, #4]
   16938:	9b00      	ldr	r3, [sp, #0]
   1693a:	2b02      	cmp	r3, #2
   1693c:	d005      	beq.n	1694a <setvbuf+0x3a>
   1693e:	2b01      	cmp	r3, #1
   16940:	d900      	bls.n	16944 <setvbuf+0x34>
   16942:	e084      	b.n	16a4e <setvbuf+0x13e>
   16944:	2d00      	cmp	r5, #0
   16946:	da00      	bge.n	1694a <setvbuf+0x3a>
   16948:	e081      	b.n	16a4e <setvbuf+0x13e>
   1694a:	0021      	movs	r1, r4
   1694c:	0030      	movs	r0, r6
   1694e:	f000 f9e9 	bl	16d24 <_fflush_r>
   16952:	6b61      	ldr	r1, [r4, #52]	; 0x34
   16954:	2900      	cmp	r1, #0
   16956:	d008      	beq.n	1696a <setvbuf+0x5a>
   16958:	0023      	movs	r3, r4
   1695a:	3344      	adds	r3, #68	; 0x44
   1695c:	4299      	cmp	r1, r3
   1695e:	d002      	beq.n	16966 <setvbuf+0x56>
   16960:	0030      	movs	r0, r6
   16962:	f000 fb65 	bl	17030 <_free_r>
   16966:	2300      	movs	r3, #0
   16968:	6363      	str	r3, [r4, #52]	; 0x34
   1696a:	2300      	movs	r3, #0
   1696c:	61a3      	str	r3, [r4, #24]
   1696e:	6063      	str	r3, [r4, #4]
   16970:	89a3      	ldrh	r3, [r4, #12]
   16972:	061b      	lsls	r3, r3, #24
   16974:	d503      	bpl.n	1697e <setvbuf+0x6e>
   16976:	6921      	ldr	r1, [r4, #16]
   16978:	0030      	movs	r0, r6
   1697a:	f000 fb59 	bl	17030 <_free_r>
   1697e:	89a3      	ldrh	r3, [r4, #12]
   16980:	4a36      	ldr	r2, [pc, #216]	; (16a5c <setvbuf+0x14c>)
   16982:	4013      	ands	r3, r2
   16984:	81a3      	strh	r3, [r4, #12]
   16986:	9b00      	ldr	r3, [sp, #0]
   16988:	2b02      	cmp	r3, #2
   1698a:	d05a      	beq.n	16a42 <setvbuf+0x132>
   1698c:	ab03      	add	r3, sp, #12
   1698e:	aa02      	add	r2, sp, #8
   16990:	0021      	movs	r1, r4
   16992:	0030      	movs	r0, r6
   16994:	f000 faca 	bl	16f2c <__swhatbuf_r>
   16998:	89a3      	ldrh	r3, [r4, #12]
   1699a:	4318      	orrs	r0, r3
   1699c:	81a0      	strh	r0, [r4, #12]
   1699e:	2d00      	cmp	r5, #0
   169a0:	d124      	bne.n	169ec <setvbuf+0xdc>
   169a2:	9d02      	ldr	r5, [sp, #8]
   169a4:	0028      	movs	r0, r5
   169a6:	f000 fb2d 	bl	17004 <malloc>
   169aa:	9501      	str	r5, [sp, #4]
   169ac:	1e07      	subs	r7, r0, #0
   169ae:	d142      	bne.n	16a36 <setvbuf+0x126>
   169b0:	9b02      	ldr	r3, [sp, #8]
   169b2:	9301      	str	r3, [sp, #4]
   169b4:	42ab      	cmp	r3, r5
   169b6:	d139      	bne.n	16a2c <setvbuf+0x11c>
   169b8:	2001      	movs	r0, #1
   169ba:	4240      	negs	r0, r0
   169bc:	2302      	movs	r3, #2
   169be:	89a2      	ldrh	r2, [r4, #12]
   169c0:	4313      	orrs	r3, r2
   169c2:	81a3      	strh	r3, [r4, #12]
   169c4:	2300      	movs	r3, #0
   169c6:	60a3      	str	r3, [r4, #8]
   169c8:	0023      	movs	r3, r4
   169ca:	3347      	adds	r3, #71	; 0x47
   169cc:	6023      	str	r3, [r4, #0]
   169ce:	6123      	str	r3, [r4, #16]
   169d0:	2301      	movs	r3, #1
   169d2:	6163      	str	r3, [r4, #20]
   169d4:	b005      	add	sp, #20
   169d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   169d8:	4b21      	ldr	r3, [pc, #132]	; (16a60 <setvbuf+0x150>)
   169da:	429c      	cmp	r4, r3
   169dc:	d101      	bne.n	169e2 <setvbuf+0xd2>
   169de:	68b4      	ldr	r4, [r6, #8]
   169e0:	e7aa      	b.n	16938 <setvbuf+0x28>
   169e2:	4b20      	ldr	r3, [pc, #128]	; (16a64 <setvbuf+0x154>)
   169e4:	429c      	cmp	r4, r3
   169e6:	d1a7      	bne.n	16938 <setvbuf+0x28>
   169e8:	68f4      	ldr	r4, [r6, #12]
   169ea:	e7a5      	b.n	16938 <setvbuf+0x28>
   169ec:	2f00      	cmp	r7, #0
   169ee:	d0d9      	beq.n	169a4 <setvbuf+0x94>
   169f0:	69b3      	ldr	r3, [r6, #24]
   169f2:	2b00      	cmp	r3, #0
   169f4:	d102      	bne.n	169fc <setvbuf+0xec>
   169f6:	0030      	movs	r0, r6
   169f8:	f000 fa02 	bl	16e00 <__sinit>
   169fc:	9b00      	ldr	r3, [sp, #0]
   169fe:	2b01      	cmp	r3, #1
   16a00:	d103      	bne.n	16a0a <setvbuf+0xfa>
   16a02:	89a3      	ldrh	r3, [r4, #12]
   16a04:	9a00      	ldr	r2, [sp, #0]
   16a06:	431a      	orrs	r2, r3
   16a08:	81a2      	strh	r2, [r4, #12]
   16a0a:	2008      	movs	r0, #8
   16a0c:	89a3      	ldrh	r3, [r4, #12]
   16a0e:	6027      	str	r7, [r4, #0]
   16a10:	6127      	str	r7, [r4, #16]
   16a12:	6165      	str	r5, [r4, #20]
   16a14:	4018      	ands	r0, r3
   16a16:	d018      	beq.n	16a4a <setvbuf+0x13a>
   16a18:	2001      	movs	r0, #1
   16a1a:	4018      	ands	r0, r3
   16a1c:	2300      	movs	r3, #0
   16a1e:	4298      	cmp	r0, r3
   16a20:	d011      	beq.n	16a46 <setvbuf+0x136>
   16a22:	426d      	negs	r5, r5
   16a24:	60a3      	str	r3, [r4, #8]
   16a26:	61a5      	str	r5, [r4, #24]
   16a28:	0018      	movs	r0, r3
   16a2a:	e7d3      	b.n	169d4 <setvbuf+0xc4>
   16a2c:	9801      	ldr	r0, [sp, #4]
   16a2e:	f000 fae9 	bl	17004 <malloc>
   16a32:	1e07      	subs	r7, r0, #0
   16a34:	d0c0      	beq.n	169b8 <setvbuf+0xa8>
   16a36:	2380      	movs	r3, #128	; 0x80
   16a38:	89a2      	ldrh	r2, [r4, #12]
   16a3a:	9d01      	ldr	r5, [sp, #4]
   16a3c:	4313      	orrs	r3, r2
   16a3e:	81a3      	strh	r3, [r4, #12]
   16a40:	e7d6      	b.n	169f0 <setvbuf+0xe0>
   16a42:	2000      	movs	r0, #0
   16a44:	e7ba      	b.n	169bc <setvbuf+0xac>
   16a46:	60a5      	str	r5, [r4, #8]
   16a48:	e7c4      	b.n	169d4 <setvbuf+0xc4>
   16a4a:	60a0      	str	r0, [r4, #8]
   16a4c:	e7c2      	b.n	169d4 <setvbuf+0xc4>
   16a4e:	2001      	movs	r0, #1
   16a50:	4240      	negs	r0, r0
   16a52:	e7bf      	b.n	169d4 <setvbuf+0xc4>
   16a54:	20000020 	.word	0x20000020
   16a58:	00018508 	.word	0x00018508
   16a5c:	fffff35c 	.word	0xfffff35c
   16a60:	00018528 	.word	0x00018528
   16a64:	000184e8 	.word	0x000184e8

00016a68 <__swbuf_r>:
   16a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16a6a:	0005      	movs	r5, r0
   16a6c:	000e      	movs	r6, r1
   16a6e:	0014      	movs	r4, r2
   16a70:	2800      	cmp	r0, #0
   16a72:	d004      	beq.n	16a7e <__swbuf_r+0x16>
   16a74:	6983      	ldr	r3, [r0, #24]
   16a76:	2b00      	cmp	r3, #0
   16a78:	d101      	bne.n	16a7e <__swbuf_r+0x16>
   16a7a:	f000 f9c1 	bl	16e00 <__sinit>
   16a7e:	4b22      	ldr	r3, [pc, #136]	; (16b08 <__swbuf_r+0xa0>)
   16a80:	429c      	cmp	r4, r3
   16a82:	d12d      	bne.n	16ae0 <__swbuf_r+0x78>
   16a84:	686c      	ldr	r4, [r5, #4]
   16a86:	69a3      	ldr	r3, [r4, #24]
   16a88:	60a3      	str	r3, [r4, #8]
   16a8a:	89a3      	ldrh	r3, [r4, #12]
   16a8c:	071b      	lsls	r3, r3, #28
   16a8e:	d531      	bpl.n	16af4 <__swbuf_r+0x8c>
   16a90:	6923      	ldr	r3, [r4, #16]
   16a92:	2b00      	cmp	r3, #0
   16a94:	d02e      	beq.n	16af4 <__swbuf_r+0x8c>
   16a96:	6823      	ldr	r3, [r4, #0]
   16a98:	6922      	ldr	r2, [r4, #16]
   16a9a:	b2f7      	uxtb	r7, r6
   16a9c:	1a98      	subs	r0, r3, r2
   16a9e:	6963      	ldr	r3, [r4, #20]
   16aa0:	b2f6      	uxtb	r6, r6
   16aa2:	4298      	cmp	r0, r3
   16aa4:	db05      	blt.n	16ab2 <__swbuf_r+0x4a>
   16aa6:	0021      	movs	r1, r4
   16aa8:	0028      	movs	r0, r5
   16aaa:	f000 f93b 	bl	16d24 <_fflush_r>
   16aae:	2800      	cmp	r0, #0
   16ab0:	d126      	bne.n	16b00 <__swbuf_r+0x98>
   16ab2:	68a3      	ldr	r3, [r4, #8]
   16ab4:	3001      	adds	r0, #1
   16ab6:	3b01      	subs	r3, #1
   16ab8:	60a3      	str	r3, [r4, #8]
   16aba:	6823      	ldr	r3, [r4, #0]
   16abc:	1c5a      	adds	r2, r3, #1
   16abe:	6022      	str	r2, [r4, #0]
   16ac0:	701f      	strb	r7, [r3, #0]
   16ac2:	6963      	ldr	r3, [r4, #20]
   16ac4:	4298      	cmp	r0, r3
   16ac6:	d004      	beq.n	16ad2 <__swbuf_r+0x6a>
   16ac8:	89a3      	ldrh	r3, [r4, #12]
   16aca:	07db      	lsls	r3, r3, #31
   16acc:	d51a      	bpl.n	16b04 <__swbuf_r+0x9c>
   16ace:	2e0a      	cmp	r6, #10
   16ad0:	d118      	bne.n	16b04 <__swbuf_r+0x9c>
   16ad2:	0021      	movs	r1, r4
   16ad4:	0028      	movs	r0, r5
   16ad6:	f000 f925 	bl	16d24 <_fflush_r>
   16ada:	2800      	cmp	r0, #0
   16adc:	d012      	beq.n	16b04 <__swbuf_r+0x9c>
   16ade:	e00f      	b.n	16b00 <__swbuf_r+0x98>
   16ae0:	4b0a      	ldr	r3, [pc, #40]	; (16b0c <__swbuf_r+0xa4>)
   16ae2:	429c      	cmp	r4, r3
   16ae4:	d101      	bne.n	16aea <__swbuf_r+0x82>
   16ae6:	68ac      	ldr	r4, [r5, #8]
   16ae8:	e7cd      	b.n	16a86 <__swbuf_r+0x1e>
   16aea:	4b09      	ldr	r3, [pc, #36]	; (16b10 <__swbuf_r+0xa8>)
   16aec:	429c      	cmp	r4, r3
   16aee:	d1ca      	bne.n	16a86 <__swbuf_r+0x1e>
   16af0:	68ec      	ldr	r4, [r5, #12]
   16af2:	e7c8      	b.n	16a86 <__swbuf_r+0x1e>
   16af4:	0021      	movs	r1, r4
   16af6:	0028      	movs	r0, r5
   16af8:	f000 f80c 	bl	16b14 <__swsetup_r>
   16afc:	2800      	cmp	r0, #0
   16afe:	d0ca      	beq.n	16a96 <__swbuf_r+0x2e>
   16b00:	2601      	movs	r6, #1
   16b02:	4276      	negs	r6, r6
   16b04:	0030      	movs	r0, r6
   16b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16b08:	00018508 	.word	0x00018508
   16b0c:	00018528 	.word	0x00018528
   16b10:	000184e8 	.word	0x000184e8

00016b14 <__swsetup_r>:
   16b14:	4b36      	ldr	r3, [pc, #216]	; (16bf0 <__swsetup_r+0xdc>)
   16b16:	b570      	push	{r4, r5, r6, lr}
   16b18:	681d      	ldr	r5, [r3, #0]
   16b1a:	0006      	movs	r6, r0
   16b1c:	000c      	movs	r4, r1
   16b1e:	2d00      	cmp	r5, #0
   16b20:	d005      	beq.n	16b2e <__swsetup_r+0x1a>
   16b22:	69ab      	ldr	r3, [r5, #24]
   16b24:	2b00      	cmp	r3, #0
   16b26:	d102      	bne.n	16b2e <__swsetup_r+0x1a>
   16b28:	0028      	movs	r0, r5
   16b2a:	f000 f969 	bl	16e00 <__sinit>
   16b2e:	4b31      	ldr	r3, [pc, #196]	; (16bf4 <__swsetup_r+0xe0>)
   16b30:	429c      	cmp	r4, r3
   16b32:	d10f      	bne.n	16b54 <__swsetup_r+0x40>
   16b34:	686c      	ldr	r4, [r5, #4]
   16b36:	230c      	movs	r3, #12
   16b38:	5ee2      	ldrsh	r2, [r4, r3]
   16b3a:	b293      	uxth	r3, r2
   16b3c:	0719      	lsls	r1, r3, #28
   16b3e:	d42d      	bmi.n	16b9c <__swsetup_r+0x88>
   16b40:	06d9      	lsls	r1, r3, #27
   16b42:	d411      	bmi.n	16b68 <__swsetup_r+0x54>
   16b44:	2309      	movs	r3, #9
   16b46:	2001      	movs	r0, #1
   16b48:	6033      	str	r3, [r6, #0]
   16b4a:	3337      	adds	r3, #55	; 0x37
   16b4c:	4313      	orrs	r3, r2
   16b4e:	81a3      	strh	r3, [r4, #12]
   16b50:	4240      	negs	r0, r0
   16b52:	bd70      	pop	{r4, r5, r6, pc}
   16b54:	4b28      	ldr	r3, [pc, #160]	; (16bf8 <__swsetup_r+0xe4>)
   16b56:	429c      	cmp	r4, r3
   16b58:	d101      	bne.n	16b5e <__swsetup_r+0x4a>
   16b5a:	68ac      	ldr	r4, [r5, #8]
   16b5c:	e7eb      	b.n	16b36 <__swsetup_r+0x22>
   16b5e:	4b27      	ldr	r3, [pc, #156]	; (16bfc <__swsetup_r+0xe8>)
   16b60:	429c      	cmp	r4, r3
   16b62:	d1e8      	bne.n	16b36 <__swsetup_r+0x22>
   16b64:	68ec      	ldr	r4, [r5, #12]
   16b66:	e7e6      	b.n	16b36 <__swsetup_r+0x22>
   16b68:	075b      	lsls	r3, r3, #29
   16b6a:	d513      	bpl.n	16b94 <__swsetup_r+0x80>
   16b6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   16b6e:	2900      	cmp	r1, #0
   16b70:	d008      	beq.n	16b84 <__swsetup_r+0x70>
   16b72:	0023      	movs	r3, r4
   16b74:	3344      	adds	r3, #68	; 0x44
   16b76:	4299      	cmp	r1, r3
   16b78:	d002      	beq.n	16b80 <__swsetup_r+0x6c>
   16b7a:	0030      	movs	r0, r6
   16b7c:	f000 fa58 	bl	17030 <_free_r>
   16b80:	2300      	movs	r3, #0
   16b82:	6363      	str	r3, [r4, #52]	; 0x34
   16b84:	2224      	movs	r2, #36	; 0x24
   16b86:	89a3      	ldrh	r3, [r4, #12]
   16b88:	4393      	bics	r3, r2
   16b8a:	81a3      	strh	r3, [r4, #12]
   16b8c:	2300      	movs	r3, #0
   16b8e:	6063      	str	r3, [r4, #4]
   16b90:	6923      	ldr	r3, [r4, #16]
   16b92:	6023      	str	r3, [r4, #0]
   16b94:	2308      	movs	r3, #8
   16b96:	89a2      	ldrh	r2, [r4, #12]
   16b98:	4313      	orrs	r3, r2
   16b9a:	81a3      	strh	r3, [r4, #12]
   16b9c:	6923      	ldr	r3, [r4, #16]
   16b9e:	2b00      	cmp	r3, #0
   16ba0:	d10b      	bne.n	16bba <__swsetup_r+0xa6>
   16ba2:	21a0      	movs	r1, #160	; 0xa0
   16ba4:	2280      	movs	r2, #128	; 0x80
   16ba6:	89a3      	ldrh	r3, [r4, #12]
   16ba8:	0089      	lsls	r1, r1, #2
   16baa:	0092      	lsls	r2, r2, #2
   16bac:	400b      	ands	r3, r1
   16bae:	4293      	cmp	r3, r2
   16bb0:	d003      	beq.n	16bba <__swsetup_r+0xa6>
   16bb2:	0021      	movs	r1, r4
   16bb4:	0030      	movs	r0, r6
   16bb6:	f000 f9e1 	bl	16f7c <__smakebuf_r>
   16bba:	2301      	movs	r3, #1
   16bbc:	89a2      	ldrh	r2, [r4, #12]
   16bbe:	4013      	ands	r3, r2
   16bc0:	d011      	beq.n	16be6 <__swsetup_r+0xd2>
   16bc2:	2300      	movs	r3, #0
   16bc4:	60a3      	str	r3, [r4, #8]
   16bc6:	6963      	ldr	r3, [r4, #20]
   16bc8:	425b      	negs	r3, r3
   16bca:	61a3      	str	r3, [r4, #24]
   16bcc:	2000      	movs	r0, #0
   16bce:	6923      	ldr	r3, [r4, #16]
   16bd0:	4283      	cmp	r3, r0
   16bd2:	d1be      	bne.n	16b52 <__swsetup_r+0x3e>
   16bd4:	230c      	movs	r3, #12
   16bd6:	5ee2      	ldrsh	r2, [r4, r3]
   16bd8:	0613      	lsls	r3, r2, #24
   16bda:	d5ba      	bpl.n	16b52 <__swsetup_r+0x3e>
   16bdc:	2340      	movs	r3, #64	; 0x40
   16bde:	4313      	orrs	r3, r2
   16be0:	81a3      	strh	r3, [r4, #12]
   16be2:	3801      	subs	r0, #1
   16be4:	e7b5      	b.n	16b52 <__swsetup_r+0x3e>
   16be6:	0792      	lsls	r2, r2, #30
   16be8:	d400      	bmi.n	16bec <__swsetup_r+0xd8>
   16bea:	6963      	ldr	r3, [r4, #20]
   16bec:	60a3      	str	r3, [r4, #8]
   16bee:	e7ed      	b.n	16bcc <__swsetup_r+0xb8>
   16bf0:	20000020 	.word	0x20000020
   16bf4:	00018508 	.word	0x00018508
   16bf8:	00018528 	.word	0x00018528
   16bfc:	000184e8 	.word	0x000184e8

00016c00 <abort>:
   16c00:	b510      	push	{r4, lr}
   16c02:	2006      	movs	r0, #6
   16c04:	f000 fb2e 	bl	17264 <raise>
   16c08:	2001      	movs	r0, #1
   16c0a:	f7f0 fa75 	bl	70f8 <_exit>
   16c0e:	Address 0x00016c0e is out of bounds.


00016c10 <__sflush_r>:
   16c10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16c12:	898a      	ldrh	r2, [r1, #12]
   16c14:	0005      	movs	r5, r0
   16c16:	000c      	movs	r4, r1
   16c18:	0713      	lsls	r3, r2, #28
   16c1a:	d460      	bmi.n	16cde <__sflush_r+0xce>
   16c1c:	684b      	ldr	r3, [r1, #4]
   16c1e:	2b00      	cmp	r3, #0
   16c20:	dc04      	bgt.n	16c2c <__sflush_r+0x1c>
   16c22:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   16c24:	2b00      	cmp	r3, #0
   16c26:	dc01      	bgt.n	16c2c <__sflush_r+0x1c>
   16c28:	2000      	movs	r0, #0
   16c2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   16c2c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   16c2e:	2f00      	cmp	r7, #0
   16c30:	d0fa      	beq.n	16c28 <__sflush_r+0x18>
   16c32:	2300      	movs	r3, #0
   16c34:	682e      	ldr	r6, [r5, #0]
   16c36:	602b      	str	r3, [r5, #0]
   16c38:	2380      	movs	r3, #128	; 0x80
   16c3a:	015b      	lsls	r3, r3, #5
   16c3c:	401a      	ands	r2, r3
   16c3e:	d034      	beq.n	16caa <__sflush_r+0x9a>
   16c40:	6d60      	ldr	r0, [r4, #84]	; 0x54
   16c42:	89a3      	ldrh	r3, [r4, #12]
   16c44:	075b      	lsls	r3, r3, #29
   16c46:	d506      	bpl.n	16c56 <__sflush_r+0x46>
   16c48:	6863      	ldr	r3, [r4, #4]
   16c4a:	1ac0      	subs	r0, r0, r3
   16c4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   16c4e:	2b00      	cmp	r3, #0
   16c50:	d001      	beq.n	16c56 <__sflush_r+0x46>
   16c52:	6c23      	ldr	r3, [r4, #64]	; 0x40
   16c54:	1ac0      	subs	r0, r0, r3
   16c56:	0002      	movs	r2, r0
   16c58:	6a21      	ldr	r1, [r4, #32]
   16c5a:	2300      	movs	r3, #0
   16c5c:	0028      	movs	r0, r5
   16c5e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   16c60:	47b8      	blx	r7
   16c62:	89a1      	ldrh	r1, [r4, #12]
   16c64:	1c43      	adds	r3, r0, #1
   16c66:	d106      	bne.n	16c76 <__sflush_r+0x66>
   16c68:	682b      	ldr	r3, [r5, #0]
   16c6a:	2b1d      	cmp	r3, #29
   16c6c:	d831      	bhi.n	16cd2 <__sflush_r+0xc2>
   16c6e:	4a2c      	ldr	r2, [pc, #176]	; (16d20 <__sflush_r+0x110>)
   16c70:	40da      	lsrs	r2, r3
   16c72:	07d3      	lsls	r3, r2, #31
   16c74:	d52d      	bpl.n	16cd2 <__sflush_r+0xc2>
   16c76:	2300      	movs	r3, #0
   16c78:	6063      	str	r3, [r4, #4]
   16c7a:	6923      	ldr	r3, [r4, #16]
   16c7c:	6023      	str	r3, [r4, #0]
   16c7e:	04cb      	lsls	r3, r1, #19
   16c80:	d505      	bpl.n	16c8e <__sflush_r+0x7e>
   16c82:	1c43      	adds	r3, r0, #1
   16c84:	d102      	bne.n	16c8c <__sflush_r+0x7c>
   16c86:	682b      	ldr	r3, [r5, #0]
   16c88:	2b00      	cmp	r3, #0
   16c8a:	d100      	bne.n	16c8e <__sflush_r+0x7e>
   16c8c:	6560      	str	r0, [r4, #84]	; 0x54
   16c8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   16c90:	602e      	str	r6, [r5, #0]
   16c92:	2900      	cmp	r1, #0
   16c94:	d0c8      	beq.n	16c28 <__sflush_r+0x18>
   16c96:	0023      	movs	r3, r4
   16c98:	3344      	adds	r3, #68	; 0x44
   16c9a:	4299      	cmp	r1, r3
   16c9c:	d002      	beq.n	16ca4 <__sflush_r+0x94>
   16c9e:	0028      	movs	r0, r5
   16ca0:	f000 f9c6 	bl	17030 <_free_r>
   16ca4:	2000      	movs	r0, #0
   16ca6:	6360      	str	r0, [r4, #52]	; 0x34
   16ca8:	e7bf      	b.n	16c2a <__sflush_r+0x1a>
   16caa:	2301      	movs	r3, #1
   16cac:	6a21      	ldr	r1, [r4, #32]
   16cae:	0028      	movs	r0, r5
   16cb0:	47b8      	blx	r7
   16cb2:	1c43      	adds	r3, r0, #1
   16cb4:	d1c5      	bne.n	16c42 <__sflush_r+0x32>
   16cb6:	682b      	ldr	r3, [r5, #0]
   16cb8:	2b00      	cmp	r3, #0
   16cba:	d0c2      	beq.n	16c42 <__sflush_r+0x32>
   16cbc:	2b1d      	cmp	r3, #29
   16cbe:	d001      	beq.n	16cc4 <__sflush_r+0xb4>
   16cc0:	2b16      	cmp	r3, #22
   16cc2:	d101      	bne.n	16cc8 <__sflush_r+0xb8>
   16cc4:	602e      	str	r6, [r5, #0]
   16cc6:	e7af      	b.n	16c28 <__sflush_r+0x18>
   16cc8:	2340      	movs	r3, #64	; 0x40
   16cca:	89a2      	ldrh	r2, [r4, #12]
   16ccc:	4313      	orrs	r3, r2
   16cce:	81a3      	strh	r3, [r4, #12]
   16cd0:	e7ab      	b.n	16c2a <__sflush_r+0x1a>
   16cd2:	2340      	movs	r3, #64	; 0x40
   16cd4:	430b      	orrs	r3, r1
   16cd6:	2001      	movs	r0, #1
   16cd8:	81a3      	strh	r3, [r4, #12]
   16cda:	4240      	negs	r0, r0
   16cdc:	e7a5      	b.n	16c2a <__sflush_r+0x1a>
   16cde:	690f      	ldr	r7, [r1, #16]
   16ce0:	2f00      	cmp	r7, #0
   16ce2:	d0a1      	beq.n	16c28 <__sflush_r+0x18>
   16ce4:	680b      	ldr	r3, [r1, #0]
   16ce6:	600f      	str	r7, [r1, #0]
   16ce8:	1bdb      	subs	r3, r3, r7
   16cea:	9301      	str	r3, [sp, #4]
   16cec:	2300      	movs	r3, #0
   16cee:	0792      	lsls	r2, r2, #30
   16cf0:	d100      	bne.n	16cf4 <__sflush_r+0xe4>
   16cf2:	694b      	ldr	r3, [r1, #20]
   16cf4:	60a3      	str	r3, [r4, #8]
   16cf6:	9b01      	ldr	r3, [sp, #4]
   16cf8:	2b00      	cmp	r3, #0
   16cfa:	dc00      	bgt.n	16cfe <__sflush_r+0xee>
   16cfc:	e794      	b.n	16c28 <__sflush_r+0x18>
   16cfe:	9b01      	ldr	r3, [sp, #4]
   16d00:	003a      	movs	r2, r7
   16d02:	6a21      	ldr	r1, [r4, #32]
   16d04:	0028      	movs	r0, r5
   16d06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   16d08:	47b0      	blx	r6
   16d0a:	2800      	cmp	r0, #0
   16d0c:	dc03      	bgt.n	16d16 <__sflush_r+0x106>
   16d0e:	2340      	movs	r3, #64	; 0x40
   16d10:	89a2      	ldrh	r2, [r4, #12]
   16d12:	4313      	orrs	r3, r2
   16d14:	e7df      	b.n	16cd6 <__sflush_r+0xc6>
   16d16:	9b01      	ldr	r3, [sp, #4]
   16d18:	183f      	adds	r7, r7, r0
   16d1a:	1a1b      	subs	r3, r3, r0
   16d1c:	9301      	str	r3, [sp, #4]
   16d1e:	e7ea      	b.n	16cf6 <__sflush_r+0xe6>
   16d20:	20400001 	.word	0x20400001

00016d24 <_fflush_r>:
   16d24:	690b      	ldr	r3, [r1, #16]
   16d26:	b570      	push	{r4, r5, r6, lr}
   16d28:	0005      	movs	r5, r0
   16d2a:	000c      	movs	r4, r1
   16d2c:	2b00      	cmp	r3, #0
   16d2e:	d101      	bne.n	16d34 <_fflush_r+0x10>
   16d30:	2000      	movs	r0, #0
   16d32:	bd70      	pop	{r4, r5, r6, pc}
   16d34:	2800      	cmp	r0, #0
   16d36:	d004      	beq.n	16d42 <_fflush_r+0x1e>
   16d38:	6983      	ldr	r3, [r0, #24]
   16d3a:	2b00      	cmp	r3, #0
   16d3c:	d101      	bne.n	16d42 <_fflush_r+0x1e>
   16d3e:	f000 f85f 	bl	16e00 <__sinit>
   16d42:	4b0b      	ldr	r3, [pc, #44]	; (16d70 <_fflush_r+0x4c>)
   16d44:	429c      	cmp	r4, r3
   16d46:	d109      	bne.n	16d5c <_fflush_r+0x38>
   16d48:	686c      	ldr	r4, [r5, #4]
   16d4a:	220c      	movs	r2, #12
   16d4c:	5ea3      	ldrsh	r3, [r4, r2]
   16d4e:	2b00      	cmp	r3, #0
   16d50:	d0ee      	beq.n	16d30 <_fflush_r+0xc>
   16d52:	0021      	movs	r1, r4
   16d54:	0028      	movs	r0, r5
   16d56:	f7ff ff5b 	bl	16c10 <__sflush_r>
   16d5a:	e7ea      	b.n	16d32 <_fflush_r+0xe>
   16d5c:	4b05      	ldr	r3, [pc, #20]	; (16d74 <_fflush_r+0x50>)
   16d5e:	429c      	cmp	r4, r3
   16d60:	d101      	bne.n	16d66 <_fflush_r+0x42>
   16d62:	68ac      	ldr	r4, [r5, #8]
   16d64:	e7f1      	b.n	16d4a <_fflush_r+0x26>
   16d66:	4b04      	ldr	r3, [pc, #16]	; (16d78 <_fflush_r+0x54>)
   16d68:	429c      	cmp	r4, r3
   16d6a:	d1ee      	bne.n	16d4a <_fflush_r+0x26>
   16d6c:	68ec      	ldr	r4, [r5, #12]
   16d6e:	e7ec      	b.n	16d4a <_fflush_r+0x26>
   16d70:	00018508 	.word	0x00018508
   16d74:	00018528 	.word	0x00018528
   16d78:	000184e8 	.word	0x000184e8

00016d7c <_cleanup_r>:
   16d7c:	b510      	push	{r4, lr}
   16d7e:	4902      	ldr	r1, [pc, #8]	; (16d88 <_cleanup_r+0xc>)
   16d80:	f000 f8b2 	bl	16ee8 <_fwalk_reent>
   16d84:	bd10      	pop	{r4, pc}
   16d86:	46c0      	nop			; (mov r8, r8)
   16d88:	00016d25 	.word	0x00016d25

00016d8c <std.isra.0>:
   16d8c:	2300      	movs	r3, #0
   16d8e:	b510      	push	{r4, lr}
   16d90:	0004      	movs	r4, r0
   16d92:	6003      	str	r3, [r0, #0]
   16d94:	6043      	str	r3, [r0, #4]
   16d96:	6083      	str	r3, [r0, #8]
   16d98:	8181      	strh	r1, [r0, #12]
   16d9a:	6643      	str	r3, [r0, #100]	; 0x64
   16d9c:	81c2      	strh	r2, [r0, #14]
   16d9e:	6103      	str	r3, [r0, #16]
   16da0:	6143      	str	r3, [r0, #20]
   16da2:	6183      	str	r3, [r0, #24]
   16da4:	0019      	movs	r1, r3
   16da6:	2208      	movs	r2, #8
   16da8:	305c      	adds	r0, #92	; 0x5c
   16daa:	f7ff f9d1 	bl	16150 <memset>
   16dae:	4b05      	ldr	r3, [pc, #20]	; (16dc4 <std.isra.0+0x38>)
   16db0:	6224      	str	r4, [r4, #32]
   16db2:	6263      	str	r3, [r4, #36]	; 0x24
   16db4:	4b04      	ldr	r3, [pc, #16]	; (16dc8 <std.isra.0+0x3c>)
   16db6:	62a3      	str	r3, [r4, #40]	; 0x28
   16db8:	4b04      	ldr	r3, [pc, #16]	; (16dcc <std.isra.0+0x40>)
   16dba:	62e3      	str	r3, [r4, #44]	; 0x2c
   16dbc:	4b04      	ldr	r3, [pc, #16]	; (16dd0 <std.isra.0+0x44>)
   16dbe:	6323      	str	r3, [r4, #48]	; 0x30
   16dc0:	bd10      	pop	{r4, pc}
   16dc2:	46c0      	nop			; (mov r8, r8)
   16dc4:	000172a5 	.word	0x000172a5
   16dc8:	000172cd 	.word	0x000172cd
   16dcc:	00017305 	.word	0x00017305
   16dd0:	00017331 	.word	0x00017331

00016dd4 <__sfmoreglue>:
   16dd4:	b570      	push	{r4, r5, r6, lr}
   16dd6:	2568      	movs	r5, #104	; 0x68
   16dd8:	1e4a      	subs	r2, r1, #1
   16dda:	4355      	muls	r5, r2
   16ddc:	000e      	movs	r6, r1
   16dde:	0029      	movs	r1, r5
   16de0:	3174      	adds	r1, #116	; 0x74
   16de2:	f000 f96f 	bl	170c4 <_malloc_r>
   16de6:	1e04      	subs	r4, r0, #0
   16de8:	d008      	beq.n	16dfc <__sfmoreglue+0x28>
   16dea:	2100      	movs	r1, #0
   16dec:	002a      	movs	r2, r5
   16dee:	6001      	str	r1, [r0, #0]
   16df0:	6046      	str	r6, [r0, #4]
   16df2:	300c      	adds	r0, #12
   16df4:	60a0      	str	r0, [r4, #8]
   16df6:	3268      	adds	r2, #104	; 0x68
   16df8:	f7ff f9aa 	bl	16150 <memset>
   16dfc:	0020      	movs	r0, r4
   16dfe:	bd70      	pop	{r4, r5, r6, pc}

00016e00 <__sinit>:
   16e00:	6983      	ldr	r3, [r0, #24]
   16e02:	b513      	push	{r0, r1, r4, lr}
   16e04:	0004      	movs	r4, r0
   16e06:	2b00      	cmp	r3, #0
   16e08:	d128      	bne.n	16e5c <__sinit+0x5c>
   16e0a:	6483      	str	r3, [r0, #72]	; 0x48
   16e0c:	64c3      	str	r3, [r0, #76]	; 0x4c
   16e0e:	6503      	str	r3, [r0, #80]	; 0x50
   16e10:	4b13      	ldr	r3, [pc, #76]	; (16e60 <__sinit+0x60>)
   16e12:	4a14      	ldr	r2, [pc, #80]	; (16e64 <__sinit+0x64>)
   16e14:	681b      	ldr	r3, [r3, #0]
   16e16:	6282      	str	r2, [r0, #40]	; 0x28
   16e18:	9301      	str	r3, [sp, #4]
   16e1a:	4298      	cmp	r0, r3
   16e1c:	d101      	bne.n	16e22 <__sinit+0x22>
   16e1e:	2301      	movs	r3, #1
   16e20:	6183      	str	r3, [r0, #24]
   16e22:	0020      	movs	r0, r4
   16e24:	f000 f820 	bl	16e68 <__sfp>
   16e28:	6060      	str	r0, [r4, #4]
   16e2a:	0020      	movs	r0, r4
   16e2c:	f000 f81c 	bl	16e68 <__sfp>
   16e30:	60a0      	str	r0, [r4, #8]
   16e32:	0020      	movs	r0, r4
   16e34:	f000 f818 	bl	16e68 <__sfp>
   16e38:	2200      	movs	r2, #0
   16e3a:	60e0      	str	r0, [r4, #12]
   16e3c:	2104      	movs	r1, #4
   16e3e:	6860      	ldr	r0, [r4, #4]
   16e40:	f7ff ffa4 	bl	16d8c <std.isra.0>
   16e44:	2201      	movs	r2, #1
   16e46:	2109      	movs	r1, #9
   16e48:	68a0      	ldr	r0, [r4, #8]
   16e4a:	f7ff ff9f 	bl	16d8c <std.isra.0>
   16e4e:	2202      	movs	r2, #2
   16e50:	2112      	movs	r1, #18
   16e52:	68e0      	ldr	r0, [r4, #12]
   16e54:	f7ff ff9a 	bl	16d8c <std.isra.0>
   16e58:	2301      	movs	r3, #1
   16e5a:	61a3      	str	r3, [r4, #24]
   16e5c:	bd13      	pop	{r0, r1, r4, pc}
   16e5e:	46c0      	nop			; (mov r8, r8)
   16e60:	000184b0 	.word	0x000184b0
   16e64:	00016d7d 	.word	0x00016d7d

00016e68 <__sfp>:
   16e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16e6a:	4b1e      	ldr	r3, [pc, #120]	; (16ee4 <__sfp+0x7c>)
   16e6c:	0007      	movs	r7, r0
   16e6e:	681e      	ldr	r6, [r3, #0]
   16e70:	69b3      	ldr	r3, [r6, #24]
   16e72:	2b00      	cmp	r3, #0
   16e74:	d102      	bne.n	16e7c <__sfp+0x14>
   16e76:	0030      	movs	r0, r6
   16e78:	f7ff ffc2 	bl	16e00 <__sinit>
   16e7c:	3648      	adds	r6, #72	; 0x48
   16e7e:	68b4      	ldr	r4, [r6, #8]
   16e80:	6873      	ldr	r3, [r6, #4]
   16e82:	3b01      	subs	r3, #1
   16e84:	d504      	bpl.n	16e90 <__sfp+0x28>
   16e86:	6833      	ldr	r3, [r6, #0]
   16e88:	2b00      	cmp	r3, #0
   16e8a:	d007      	beq.n	16e9c <__sfp+0x34>
   16e8c:	6836      	ldr	r6, [r6, #0]
   16e8e:	e7f6      	b.n	16e7e <__sfp+0x16>
   16e90:	220c      	movs	r2, #12
   16e92:	5ea5      	ldrsh	r5, [r4, r2]
   16e94:	2d00      	cmp	r5, #0
   16e96:	d00d      	beq.n	16eb4 <__sfp+0x4c>
   16e98:	3468      	adds	r4, #104	; 0x68
   16e9a:	e7f2      	b.n	16e82 <__sfp+0x1a>
   16e9c:	2104      	movs	r1, #4
   16e9e:	0038      	movs	r0, r7
   16ea0:	f7ff ff98 	bl	16dd4 <__sfmoreglue>
   16ea4:	6030      	str	r0, [r6, #0]
   16ea6:	2800      	cmp	r0, #0
   16ea8:	d1f0      	bne.n	16e8c <__sfp+0x24>
   16eaa:	230c      	movs	r3, #12
   16eac:	0004      	movs	r4, r0
   16eae:	603b      	str	r3, [r7, #0]
   16eb0:	0020      	movs	r0, r4
   16eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16eb4:	2301      	movs	r3, #1
   16eb6:	0020      	movs	r0, r4
   16eb8:	425b      	negs	r3, r3
   16eba:	81e3      	strh	r3, [r4, #14]
   16ebc:	3302      	adds	r3, #2
   16ebe:	81a3      	strh	r3, [r4, #12]
   16ec0:	6665      	str	r5, [r4, #100]	; 0x64
   16ec2:	6025      	str	r5, [r4, #0]
   16ec4:	60a5      	str	r5, [r4, #8]
   16ec6:	6065      	str	r5, [r4, #4]
   16ec8:	6125      	str	r5, [r4, #16]
   16eca:	6165      	str	r5, [r4, #20]
   16ecc:	61a5      	str	r5, [r4, #24]
   16ece:	2208      	movs	r2, #8
   16ed0:	0029      	movs	r1, r5
   16ed2:	305c      	adds	r0, #92	; 0x5c
   16ed4:	f7ff f93c 	bl	16150 <memset>
   16ed8:	6365      	str	r5, [r4, #52]	; 0x34
   16eda:	63a5      	str	r5, [r4, #56]	; 0x38
   16edc:	64a5      	str	r5, [r4, #72]	; 0x48
   16ede:	64e5      	str	r5, [r4, #76]	; 0x4c
   16ee0:	e7e6      	b.n	16eb0 <__sfp+0x48>
   16ee2:	46c0      	nop			; (mov r8, r8)
   16ee4:	000184b0 	.word	0x000184b0

00016ee8 <_fwalk_reent>:
   16ee8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16eea:	0004      	movs	r4, r0
   16eec:	0007      	movs	r7, r0
   16eee:	2600      	movs	r6, #0
   16ef0:	9101      	str	r1, [sp, #4]
   16ef2:	3448      	adds	r4, #72	; 0x48
   16ef4:	2c00      	cmp	r4, #0
   16ef6:	d101      	bne.n	16efc <_fwalk_reent+0x14>
   16ef8:	0030      	movs	r0, r6
   16efa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   16efc:	6863      	ldr	r3, [r4, #4]
   16efe:	68a5      	ldr	r5, [r4, #8]
   16f00:	9300      	str	r3, [sp, #0]
   16f02:	9b00      	ldr	r3, [sp, #0]
   16f04:	3b01      	subs	r3, #1
   16f06:	9300      	str	r3, [sp, #0]
   16f08:	d501      	bpl.n	16f0e <_fwalk_reent+0x26>
   16f0a:	6824      	ldr	r4, [r4, #0]
   16f0c:	e7f2      	b.n	16ef4 <_fwalk_reent+0xc>
   16f0e:	89ab      	ldrh	r3, [r5, #12]
   16f10:	2b01      	cmp	r3, #1
   16f12:	d908      	bls.n	16f26 <_fwalk_reent+0x3e>
   16f14:	220e      	movs	r2, #14
   16f16:	5eab      	ldrsh	r3, [r5, r2]
   16f18:	3301      	adds	r3, #1
   16f1a:	d004      	beq.n	16f26 <_fwalk_reent+0x3e>
   16f1c:	0029      	movs	r1, r5
   16f1e:	0038      	movs	r0, r7
   16f20:	9b01      	ldr	r3, [sp, #4]
   16f22:	4798      	blx	r3
   16f24:	4306      	orrs	r6, r0
   16f26:	3568      	adds	r5, #104	; 0x68
   16f28:	e7eb      	b.n	16f02 <_fwalk_reent+0x1a>
   16f2a:	Address 0x00016f2a is out of bounds.


00016f2c <__swhatbuf_r>:
   16f2c:	b570      	push	{r4, r5, r6, lr}
   16f2e:	000e      	movs	r6, r1
   16f30:	001d      	movs	r5, r3
   16f32:	230e      	movs	r3, #14
   16f34:	5ec9      	ldrsh	r1, [r1, r3]
   16f36:	b090      	sub	sp, #64	; 0x40
   16f38:	0014      	movs	r4, r2
   16f3a:	2900      	cmp	r1, #0
   16f3c:	da07      	bge.n	16f4e <__swhatbuf_r+0x22>
   16f3e:	2300      	movs	r3, #0
   16f40:	602b      	str	r3, [r5, #0]
   16f42:	89b3      	ldrh	r3, [r6, #12]
   16f44:	061b      	lsls	r3, r3, #24
   16f46:	d411      	bmi.n	16f6c <__swhatbuf_r+0x40>
   16f48:	2380      	movs	r3, #128	; 0x80
   16f4a:	00db      	lsls	r3, r3, #3
   16f4c:	e00f      	b.n	16f6e <__swhatbuf_r+0x42>
   16f4e:	aa01      	add	r2, sp, #4
   16f50:	f000 fa1a 	bl	17388 <_fstat_r>
   16f54:	2800      	cmp	r0, #0
   16f56:	dbf2      	blt.n	16f3e <__swhatbuf_r+0x12>
   16f58:	22f0      	movs	r2, #240	; 0xf0
   16f5a:	9b02      	ldr	r3, [sp, #8]
   16f5c:	0212      	lsls	r2, r2, #8
   16f5e:	4013      	ands	r3, r2
   16f60:	4a05      	ldr	r2, [pc, #20]	; (16f78 <__swhatbuf_r+0x4c>)
   16f62:	189b      	adds	r3, r3, r2
   16f64:	425a      	negs	r2, r3
   16f66:	4153      	adcs	r3, r2
   16f68:	602b      	str	r3, [r5, #0]
   16f6a:	e7ed      	b.n	16f48 <__swhatbuf_r+0x1c>
   16f6c:	2340      	movs	r3, #64	; 0x40
   16f6e:	2000      	movs	r0, #0
   16f70:	6023      	str	r3, [r4, #0]
   16f72:	b010      	add	sp, #64	; 0x40
   16f74:	bd70      	pop	{r4, r5, r6, pc}
   16f76:	46c0      	nop			; (mov r8, r8)
   16f78:	ffffe000 	.word	0xffffe000

00016f7c <__smakebuf_r>:
   16f7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16f7e:	2602      	movs	r6, #2
   16f80:	898b      	ldrh	r3, [r1, #12]
   16f82:	0005      	movs	r5, r0
   16f84:	000c      	movs	r4, r1
   16f86:	4233      	tst	r3, r6
   16f88:	d006      	beq.n	16f98 <__smakebuf_r+0x1c>
   16f8a:	0023      	movs	r3, r4
   16f8c:	3347      	adds	r3, #71	; 0x47
   16f8e:	6023      	str	r3, [r4, #0]
   16f90:	6123      	str	r3, [r4, #16]
   16f92:	2301      	movs	r3, #1
   16f94:	6163      	str	r3, [r4, #20]
   16f96:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   16f98:	ab01      	add	r3, sp, #4
   16f9a:	466a      	mov	r2, sp
   16f9c:	f7ff ffc6 	bl	16f2c <__swhatbuf_r>
   16fa0:	9900      	ldr	r1, [sp, #0]
   16fa2:	0007      	movs	r7, r0
   16fa4:	0028      	movs	r0, r5
   16fa6:	f000 f88d 	bl	170c4 <_malloc_r>
   16faa:	2800      	cmp	r0, #0
   16fac:	d108      	bne.n	16fc0 <__smakebuf_r+0x44>
   16fae:	220c      	movs	r2, #12
   16fb0:	5ea3      	ldrsh	r3, [r4, r2]
   16fb2:	059a      	lsls	r2, r3, #22
   16fb4:	d4ef      	bmi.n	16f96 <__smakebuf_r+0x1a>
   16fb6:	2203      	movs	r2, #3
   16fb8:	4393      	bics	r3, r2
   16fba:	431e      	orrs	r6, r3
   16fbc:	81a6      	strh	r6, [r4, #12]
   16fbe:	e7e4      	b.n	16f8a <__smakebuf_r+0xe>
   16fc0:	4b0f      	ldr	r3, [pc, #60]	; (17000 <__smakebuf_r+0x84>)
   16fc2:	62ab      	str	r3, [r5, #40]	; 0x28
   16fc4:	2380      	movs	r3, #128	; 0x80
   16fc6:	89a2      	ldrh	r2, [r4, #12]
   16fc8:	6020      	str	r0, [r4, #0]
   16fca:	4313      	orrs	r3, r2
   16fcc:	81a3      	strh	r3, [r4, #12]
   16fce:	9b00      	ldr	r3, [sp, #0]
   16fd0:	6120      	str	r0, [r4, #16]
   16fd2:	6163      	str	r3, [r4, #20]
   16fd4:	9b01      	ldr	r3, [sp, #4]
   16fd6:	2b00      	cmp	r3, #0
   16fd8:	d00d      	beq.n	16ff6 <__smakebuf_r+0x7a>
   16fda:	230e      	movs	r3, #14
   16fdc:	5ee1      	ldrsh	r1, [r4, r3]
   16fde:	0028      	movs	r0, r5
   16fe0:	f000 f9e4 	bl	173ac <_isatty_r>
   16fe4:	2800      	cmp	r0, #0
   16fe6:	d006      	beq.n	16ff6 <__smakebuf_r+0x7a>
   16fe8:	2203      	movs	r2, #3
   16fea:	89a3      	ldrh	r3, [r4, #12]
   16fec:	4393      	bics	r3, r2
   16fee:	001a      	movs	r2, r3
   16ff0:	2301      	movs	r3, #1
   16ff2:	4313      	orrs	r3, r2
   16ff4:	81a3      	strh	r3, [r4, #12]
   16ff6:	89a0      	ldrh	r0, [r4, #12]
   16ff8:	4338      	orrs	r0, r7
   16ffa:	81a0      	strh	r0, [r4, #12]
   16ffc:	e7cb      	b.n	16f96 <__smakebuf_r+0x1a>
   16ffe:	46c0      	nop			; (mov r8, r8)
   17000:	00016d7d 	.word	0x00016d7d

00017004 <malloc>:
   17004:	b510      	push	{r4, lr}
   17006:	4b03      	ldr	r3, [pc, #12]	; (17014 <malloc+0x10>)
   17008:	0001      	movs	r1, r0
   1700a:	6818      	ldr	r0, [r3, #0]
   1700c:	f000 f85a 	bl	170c4 <_malloc_r>
   17010:	bd10      	pop	{r4, pc}
   17012:	46c0      	nop			; (mov r8, r8)
   17014:	20000020 	.word	0x20000020

00017018 <memchr>:
   17018:	b2c9      	uxtb	r1, r1
   1701a:	1882      	adds	r2, r0, r2
   1701c:	4290      	cmp	r0, r2
   1701e:	d101      	bne.n	17024 <memchr+0xc>
   17020:	2000      	movs	r0, #0
   17022:	4770      	bx	lr
   17024:	7803      	ldrb	r3, [r0, #0]
   17026:	428b      	cmp	r3, r1
   17028:	d0fb      	beq.n	17022 <memchr+0xa>
   1702a:	3001      	adds	r0, #1
   1702c:	e7f6      	b.n	1701c <memchr+0x4>
   1702e:	Address 0x0001702e is out of bounds.


00017030 <_free_r>:
   17030:	b570      	push	{r4, r5, r6, lr}
   17032:	0005      	movs	r5, r0
   17034:	2900      	cmp	r1, #0
   17036:	d010      	beq.n	1705a <_free_r+0x2a>
   17038:	1f0c      	subs	r4, r1, #4
   1703a:	6823      	ldr	r3, [r4, #0]
   1703c:	2b00      	cmp	r3, #0
   1703e:	da00      	bge.n	17042 <_free_r+0x12>
   17040:	18e4      	adds	r4, r4, r3
   17042:	0028      	movs	r0, r5
   17044:	f000 f9d8 	bl	173f8 <__malloc_lock>
   17048:	4a1d      	ldr	r2, [pc, #116]	; (170c0 <_free_r+0x90>)
   1704a:	6813      	ldr	r3, [r2, #0]
   1704c:	2b00      	cmp	r3, #0
   1704e:	d105      	bne.n	1705c <_free_r+0x2c>
   17050:	6063      	str	r3, [r4, #4]
   17052:	6014      	str	r4, [r2, #0]
   17054:	0028      	movs	r0, r5
   17056:	f000 f9d0 	bl	173fa <__malloc_unlock>
   1705a:	bd70      	pop	{r4, r5, r6, pc}
   1705c:	42a3      	cmp	r3, r4
   1705e:	d909      	bls.n	17074 <_free_r+0x44>
   17060:	6821      	ldr	r1, [r4, #0]
   17062:	1860      	adds	r0, r4, r1
   17064:	4283      	cmp	r3, r0
   17066:	d1f3      	bne.n	17050 <_free_r+0x20>
   17068:	6818      	ldr	r0, [r3, #0]
   1706a:	685b      	ldr	r3, [r3, #4]
   1706c:	1841      	adds	r1, r0, r1
   1706e:	6021      	str	r1, [r4, #0]
   17070:	e7ee      	b.n	17050 <_free_r+0x20>
   17072:	0013      	movs	r3, r2
   17074:	685a      	ldr	r2, [r3, #4]
   17076:	2a00      	cmp	r2, #0
   17078:	d001      	beq.n	1707e <_free_r+0x4e>
   1707a:	42a2      	cmp	r2, r4
   1707c:	d9f9      	bls.n	17072 <_free_r+0x42>
   1707e:	6819      	ldr	r1, [r3, #0]
   17080:	1858      	adds	r0, r3, r1
   17082:	42a0      	cmp	r0, r4
   17084:	d10b      	bne.n	1709e <_free_r+0x6e>
   17086:	6820      	ldr	r0, [r4, #0]
   17088:	1809      	adds	r1, r1, r0
   1708a:	1858      	adds	r0, r3, r1
   1708c:	6019      	str	r1, [r3, #0]
   1708e:	4282      	cmp	r2, r0
   17090:	d1e0      	bne.n	17054 <_free_r+0x24>
   17092:	6810      	ldr	r0, [r2, #0]
   17094:	6852      	ldr	r2, [r2, #4]
   17096:	1841      	adds	r1, r0, r1
   17098:	6019      	str	r1, [r3, #0]
   1709a:	605a      	str	r2, [r3, #4]
   1709c:	e7da      	b.n	17054 <_free_r+0x24>
   1709e:	42a0      	cmp	r0, r4
   170a0:	d902      	bls.n	170a8 <_free_r+0x78>
   170a2:	230c      	movs	r3, #12
   170a4:	602b      	str	r3, [r5, #0]
   170a6:	e7d5      	b.n	17054 <_free_r+0x24>
   170a8:	6821      	ldr	r1, [r4, #0]
   170aa:	1860      	adds	r0, r4, r1
   170ac:	4282      	cmp	r2, r0
   170ae:	d103      	bne.n	170b8 <_free_r+0x88>
   170b0:	6810      	ldr	r0, [r2, #0]
   170b2:	6852      	ldr	r2, [r2, #4]
   170b4:	1841      	adds	r1, r0, r1
   170b6:	6021      	str	r1, [r4, #0]
   170b8:	6062      	str	r2, [r4, #4]
   170ba:	605c      	str	r4, [r3, #4]
   170bc:	e7ca      	b.n	17054 <_free_r+0x24>
   170be:	46c0      	nop			; (mov r8, r8)
   170c0:	20001ec4 	.word	0x20001ec4

000170c4 <_malloc_r>:
   170c4:	2303      	movs	r3, #3
   170c6:	b570      	push	{r4, r5, r6, lr}
   170c8:	1ccd      	adds	r5, r1, #3
   170ca:	439d      	bics	r5, r3
   170cc:	3508      	adds	r5, #8
   170ce:	0006      	movs	r6, r0
   170d0:	2d0c      	cmp	r5, #12
   170d2:	d21e      	bcs.n	17112 <_malloc_r+0x4e>
   170d4:	250c      	movs	r5, #12
   170d6:	42a9      	cmp	r1, r5
   170d8:	d81d      	bhi.n	17116 <_malloc_r+0x52>
   170da:	0030      	movs	r0, r6
   170dc:	f000 f98c 	bl	173f8 <__malloc_lock>
   170e0:	4a25      	ldr	r2, [pc, #148]	; (17178 <_malloc_r+0xb4>)
   170e2:	6814      	ldr	r4, [r2, #0]
   170e4:	0021      	movs	r1, r4
   170e6:	2900      	cmp	r1, #0
   170e8:	d119      	bne.n	1711e <_malloc_r+0x5a>
   170ea:	4c24      	ldr	r4, [pc, #144]	; (1717c <_malloc_r+0xb8>)
   170ec:	6823      	ldr	r3, [r4, #0]
   170ee:	2b00      	cmp	r3, #0
   170f0:	d103      	bne.n	170fa <_malloc_r+0x36>
   170f2:	0030      	movs	r0, r6
   170f4:	f000 f87a 	bl	171ec <_sbrk_r>
   170f8:	6020      	str	r0, [r4, #0]
   170fa:	0029      	movs	r1, r5
   170fc:	0030      	movs	r0, r6
   170fe:	f000 f875 	bl	171ec <_sbrk_r>
   17102:	1c43      	adds	r3, r0, #1
   17104:	d12c      	bne.n	17160 <_malloc_r+0x9c>
   17106:	230c      	movs	r3, #12
   17108:	0030      	movs	r0, r6
   1710a:	6033      	str	r3, [r6, #0]
   1710c:	f000 f975 	bl	173fa <__malloc_unlock>
   17110:	e003      	b.n	1711a <_malloc_r+0x56>
   17112:	2d00      	cmp	r5, #0
   17114:	dadf      	bge.n	170d6 <_malloc_r+0x12>
   17116:	230c      	movs	r3, #12
   17118:	6033      	str	r3, [r6, #0]
   1711a:	2000      	movs	r0, #0
   1711c:	bd70      	pop	{r4, r5, r6, pc}
   1711e:	680b      	ldr	r3, [r1, #0]
   17120:	1b5b      	subs	r3, r3, r5
   17122:	d41a      	bmi.n	1715a <_malloc_r+0x96>
   17124:	2b0b      	cmp	r3, #11
   17126:	d903      	bls.n	17130 <_malloc_r+0x6c>
   17128:	600b      	str	r3, [r1, #0]
   1712a:	18cc      	adds	r4, r1, r3
   1712c:	6025      	str	r5, [r4, #0]
   1712e:	e003      	b.n	17138 <_malloc_r+0x74>
   17130:	428c      	cmp	r4, r1
   17132:	d10e      	bne.n	17152 <_malloc_r+0x8e>
   17134:	6863      	ldr	r3, [r4, #4]
   17136:	6013      	str	r3, [r2, #0]
   17138:	0030      	movs	r0, r6
   1713a:	f000 f95e 	bl	173fa <__malloc_unlock>
   1713e:	0020      	movs	r0, r4
   17140:	2207      	movs	r2, #7
   17142:	300b      	adds	r0, #11
   17144:	1d23      	adds	r3, r4, #4
   17146:	4390      	bics	r0, r2
   17148:	1ac3      	subs	r3, r0, r3
   1714a:	d0e7      	beq.n	1711c <_malloc_r+0x58>
   1714c:	425a      	negs	r2, r3
   1714e:	50e2      	str	r2, [r4, r3]
   17150:	e7e4      	b.n	1711c <_malloc_r+0x58>
   17152:	684b      	ldr	r3, [r1, #4]
   17154:	6063      	str	r3, [r4, #4]
   17156:	000c      	movs	r4, r1
   17158:	e7ee      	b.n	17138 <_malloc_r+0x74>
   1715a:	000c      	movs	r4, r1
   1715c:	6849      	ldr	r1, [r1, #4]
   1715e:	e7c2      	b.n	170e6 <_malloc_r+0x22>
   17160:	2303      	movs	r3, #3
   17162:	1cc4      	adds	r4, r0, #3
   17164:	439c      	bics	r4, r3
   17166:	42a0      	cmp	r0, r4
   17168:	d0e0      	beq.n	1712c <_malloc_r+0x68>
   1716a:	1a21      	subs	r1, r4, r0
   1716c:	0030      	movs	r0, r6
   1716e:	f000 f83d 	bl	171ec <_sbrk_r>
   17172:	1c43      	adds	r3, r0, #1
   17174:	d1da      	bne.n	1712c <_malloc_r+0x68>
   17176:	e7c6      	b.n	17106 <_malloc_r+0x42>
   17178:	20001ec4 	.word	0x20001ec4
   1717c:	20001ec8 	.word	0x20001ec8

00017180 <_putc_r>:
   17180:	b570      	push	{r4, r5, r6, lr}
   17182:	0006      	movs	r6, r0
   17184:	000d      	movs	r5, r1
   17186:	0014      	movs	r4, r2
   17188:	2800      	cmp	r0, #0
   1718a:	d004      	beq.n	17196 <_putc_r+0x16>
   1718c:	6983      	ldr	r3, [r0, #24]
   1718e:	2b00      	cmp	r3, #0
   17190:	d101      	bne.n	17196 <_putc_r+0x16>
   17192:	f7ff fe35 	bl	16e00 <__sinit>
   17196:	4b12      	ldr	r3, [pc, #72]	; (171e0 <_putc_r+0x60>)
   17198:	429c      	cmp	r4, r3
   1719a:	d111      	bne.n	171c0 <_putc_r+0x40>
   1719c:	6874      	ldr	r4, [r6, #4]
   1719e:	68a3      	ldr	r3, [r4, #8]
   171a0:	3b01      	subs	r3, #1
   171a2:	60a3      	str	r3, [r4, #8]
   171a4:	2b00      	cmp	r3, #0
   171a6:	da05      	bge.n	171b4 <_putc_r+0x34>
   171a8:	69a2      	ldr	r2, [r4, #24]
   171aa:	4293      	cmp	r3, r2
   171ac:	db12      	blt.n	171d4 <_putc_r+0x54>
   171ae:	b2eb      	uxtb	r3, r5
   171b0:	2b0a      	cmp	r3, #10
   171b2:	d00f      	beq.n	171d4 <_putc_r+0x54>
   171b4:	6823      	ldr	r3, [r4, #0]
   171b6:	b2e8      	uxtb	r0, r5
   171b8:	1c5a      	adds	r2, r3, #1
   171ba:	6022      	str	r2, [r4, #0]
   171bc:	701d      	strb	r5, [r3, #0]
   171be:	bd70      	pop	{r4, r5, r6, pc}
   171c0:	4b08      	ldr	r3, [pc, #32]	; (171e4 <_putc_r+0x64>)
   171c2:	429c      	cmp	r4, r3
   171c4:	d101      	bne.n	171ca <_putc_r+0x4a>
   171c6:	68b4      	ldr	r4, [r6, #8]
   171c8:	e7e9      	b.n	1719e <_putc_r+0x1e>
   171ca:	4b07      	ldr	r3, [pc, #28]	; (171e8 <_putc_r+0x68>)
   171cc:	429c      	cmp	r4, r3
   171ce:	d1e6      	bne.n	1719e <_putc_r+0x1e>
   171d0:	68f4      	ldr	r4, [r6, #12]
   171d2:	e7e4      	b.n	1719e <_putc_r+0x1e>
   171d4:	0022      	movs	r2, r4
   171d6:	0029      	movs	r1, r5
   171d8:	0030      	movs	r0, r6
   171da:	f7ff fc45 	bl	16a68 <__swbuf_r>
   171de:	e7ee      	b.n	171be <_putc_r+0x3e>
   171e0:	00018508 	.word	0x00018508
   171e4:	00018528 	.word	0x00018528
   171e8:	000184e8 	.word	0x000184e8

000171ec <_sbrk_r>:
   171ec:	2300      	movs	r3, #0
   171ee:	b570      	push	{r4, r5, r6, lr}
   171f0:	4c06      	ldr	r4, [pc, #24]	; (1720c <_sbrk_r+0x20>)
   171f2:	0005      	movs	r5, r0
   171f4:	0008      	movs	r0, r1
   171f6:	6023      	str	r3, [r4, #0]
   171f8:	f7ef ff60 	bl	70bc <_sbrk>
   171fc:	1c43      	adds	r3, r0, #1
   171fe:	d103      	bne.n	17208 <_sbrk_r+0x1c>
   17200:	6823      	ldr	r3, [r4, #0]
   17202:	2b00      	cmp	r3, #0
   17204:	d000      	beq.n	17208 <_sbrk_r+0x1c>
   17206:	602b      	str	r3, [r5, #0]
   17208:	bd70      	pop	{r4, r5, r6, pc}
   1720a:	46c0      	nop			; (mov r8, r8)
   1720c:	200034d8 	.word	0x200034d8

00017210 <_raise_r>:
   17210:	b570      	push	{r4, r5, r6, lr}
   17212:	0004      	movs	r4, r0
   17214:	000d      	movs	r5, r1
   17216:	291f      	cmp	r1, #31
   17218:	d904      	bls.n	17224 <_raise_r+0x14>
   1721a:	2316      	movs	r3, #22
   1721c:	6003      	str	r3, [r0, #0]
   1721e:	2001      	movs	r0, #1
   17220:	4240      	negs	r0, r0
   17222:	bd70      	pop	{r4, r5, r6, pc}
   17224:	6c43      	ldr	r3, [r0, #68]	; 0x44
   17226:	2b00      	cmp	r3, #0
   17228:	d004      	beq.n	17234 <_raise_r+0x24>
   1722a:	008a      	lsls	r2, r1, #2
   1722c:	189b      	adds	r3, r3, r2
   1722e:	681a      	ldr	r2, [r3, #0]
   17230:	2a00      	cmp	r2, #0
   17232:	d108      	bne.n	17246 <_raise_r+0x36>
   17234:	0020      	movs	r0, r4
   17236:	f000 f831 	bl	1729c <_getpid_r>
   1723a:	002a      	movs	r2, r5
   1723c:	0001      	movs	r1, r0
   1723e:	0020      	movs	r0, r4
   17240:	f000 f81a 	bl	17278 <_kill_r>
   17244:	e7ed      	b.n	17222 <_raise_r+0x12>
   17246:	2000      	movs	r0, #0
   17248:	2a01      	cmp	r2, #1
   1724a:	d0ea      	beq.n	17222 <_raise_r+0x12>
   1724c:	1c51      	adds	r1, r2, #1
   1724e:	d103      	bne.n	17258 <_raise_r+0x48>
   17250:	2316      	movs	r3, #22
   17252:	3001      	adds	r0, #1
   17254:	6023      	str	r3, [r4, #0]
   17256:	e7e4      	b.n	17222 <_raise_r+0x12>
   17258:	2400      	movs	r4, #0
   1725a:	0028      	movs	r0, r5
   1725c:	601c      	str	r4, [r3, #0]
   1725e:	4790      	blx	r2
   17260:	0020      	movs	r0, r4
   17262:	e7de      	b.n	17222 <_raise_r+0x12>

00017264 <raise>:
   17264:	b510      	push	{r4, lr}
   17266:	4b03      	ldr	r3, [pc, #12]	; (17274 <raise+0x10>)
   17268:	0001      	movs	r1, r0
   1726a:	6818      	ldr	r0, [r3, #0]
   1726c:	f7ff ffd0 	bl	17210 <_raise_r>
   17270:	bd10      	pop	{r4, pc}
   17272:	46c0      	nop			; (mov r8, r8)
   17274:	20000020 	.word	0x20000020

00017278 <_kill_r>:
   17278:	2300      	movs	r3, #0
   1727a:	b570      	push	{r4, r5, r6, lr}
   1727c:	4c06      	ldr	r4, [pc, #24]	; (17298 <_kill_r+0x20>)
   1727e:	0005      	movs	r5, r0
   17280:	0008      	movs	r0, r1
   17282:	0011      	movs	r1, r2
   17284:	6023      	str	r3, [r4, #0]
   17286:	f7ef ff39 	bl	70fc <_kill>
   1728a:	1c43      	adds	r3, r0, #1
   1728c:	d103      	bne.n	17296 <_kill_r+0x1e>
   1728e:	6823      	ldr	r3, [r4, #0]
   17290:	2b00      	cmp	r3, #0
   17292:	d000      	beq.n	17296 <_kill_r+0x1e>
   17294:	602b      	str	r3, [r5, #0]
   17296:	bd70      	pop	{r4, r5, r6, pc}
   17298:	200034d8 	.word	0x200034d8

0001729c <_getpid_r>:
   1729c:	b510      	push	{r4, lr}
   1729e:	f7ef ff2e 	bl	70fe <_getpid>
   172a2:	bd10      	pop	{r4, pc}

000172a4 <__sread>:
   172a4:	b570      	push	{r4, r5, r6, lr}
   172a6:	000c      	movs	r4, r1
   172a8:	250e      	movs	r5, #14
   172aa:	5f49      	ldrsh	r1, [r1, r5]
   172ac:	f000 f8a6 	bl	173fc <_read_r>
   172b0:	2800      	cmp	r0, #0
   172b2:	db03      	blt.n	172bc <__sread+0x18>
   172b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
   172b6:	181b      	adds	r3, r3, r0
   172b8:	6563      	str	r3, [r4, #84]	; 0x54
   172ba:	bd70      	pop	{r4, r5, r6, pc}
   172bc:	89a3      	ldrh	r3, [r4, #12]
   172be:	4a02      	ldr	r2, [pc, #8]	; (172c8 <__sread+0x24>)
   172c0:	4013      	ands	r3, r2
   172c2:	81a3      	strh	r3, [r4, #12]
   172c4:	e7f9      	b.n	172ba <__sread+0x16>
   172c6:	46c0      	nop			; (mov r8, r8)
   172c8:	ffffefff 	.word	0xffffefff

000172cc <__swrite>:
   172cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   172ce:	001f      	movs	r7, r3
   172d0:	898b      	ldrh	r3, [r1, #12]
   172d2:	0005      	movs	r5, r0
   172d4:	000c      	movs	r4, r1
   172d6:	0016      	movs	r6, r2
   172d8:	05db      	lsls	r3, r3, #23
   172da:	d505      	bpl.n	172e8 <__swrite+0x1c>
   172dc:	230e      	movs	r3, #14
   172de:	5ec9      	ldrsh	r1, [r1, r3]
   172e0:	2200      	movs	r2, #0
   172e2:	2302      	movs	r3, #2
   172e4:	f000 f874 	bl	173d0 <_lseek_r>
   172e8:	89a3      	ldrh	r3, [r4, #12]
   172ea:	4a05      	ldr	r2, [pc, #20]	; (17300 <__swrite+0x34>)
   172ec:	0028      	movs	r0, r5
   172ee:	4013      	ands	r3, r2
   172f0:	81a3      	strh	r3, [r4, #12]
   172f2:	0032      	movs	r2, r6
   172f4:	230e      	movs	r3, #14
   172f6:	5ee1      	ldrsh	r1, [r4, r3]
   172f8:	003b      	movs	r3, r7
   172fa:	f000 f81f 	bl	1733c <_write_r>
   172fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17300:	ffffefff 	.word	0xffffefff

00017304 <__sseek>:
   17304:	b570      	push	{r4, r5, r6, lr}
   17306:	000c      	movs	r4, r1
   17308:	250e      	movs	r5, #14
   1730a:	5f49      	ldrsh	r1, [r1, r5]
   1730c:	f000 f860 	bl	173d0 <_lseek_r>
   17310:	89a3      	ldrh	r3, [r4, #12]
   17312:	1c42      	adds	r2, r0, #1
   17314:	d103      	bne.n	1731e <__sseek+0x1a>
   17316:	4a05      	ldr	r2, [pc, #20]	; (1732c <__sseek+0x28>)
   17318:	4013      	ands	r3, r2
   1731a:	81a3      	strh	r3, [r4, #12]
   1731c:	bd70      	pop	{r4, r5, r6, pc}
   1731e:	2280      	movs	r2, #128	; 0x80
   17320:	0152      	lsls	r2, r2, #5
   17322:	4313      	orrs	r3, r2
   17324:	81a3      	strh	r3, [r4, #12]
   17326:	6560      	str	r0, [r4, #84]	; 0x54
   17328:	e7f8      	b.n	1731c <__sseek+0x18>
   1732a:	46c0      	nop			; (mov r8, r8)
   1732c:	ffffefff 	.word	0xffffefff

00017330 <__sclose>:
   17330:	b510      	push	{r4, lr}
   17332:	230e      	movs	r3, #14
   17334:	5ec9      	ldrsh	r1, [r1, r3]
   17336:	f000 f815 	bl	17364 <_close_r>
   1733a:	bd10      	pop	{r4, pc}

0001733c <_write_r>:
   1733c:	b570      	push	{r4, r5, r6, lr}
   1733e:	0005      	movs	r5, r0
   17340:	0008      	movs	r0, r1
   17342:	0011      	movs	r1, r2
   17344:	2200      	movs	r2, #0
   17346:	4c06      	ldr	r4, [pc, #24]	; (17360 <_write_r+0x24>)
   17348:	6022      	str	r2, [r4, #0]
   1734a:	001a      	movs	r2, r3
   1734c:	f7ef fe8e 	bl	706c <_write>
   17350:	1c43      	adds	r3, r0, #1
   17352:	d103      	bne.n	1735c <_write_r+0x20>
   17354:	6823      	ldr	r3, [r4, #0]
   17356:	2b00      	cmp	r3, #0
   17358:	d000      	beq.n	1735c <_write_r+0x20>
   1735a:	602b      	str	r3, [r5, #0]
   1735c:	bd70      	pop	{r4, r5, r6, pc}
   1735e:	46c0      	nop			; (mov r8, r8)
   17360:	200034d8 	.word	0x200034d8

00017364 <_close_r>:
   17364:	2300      	movs	r3, #0
   17366:	b570      	push	{r4, r5, r6, lr}
   17368:	4c06      	ldr	r4, [pc, #24]	; (17384 <_close_r+0x20>)
   1736a:	0005      	movs	r5, r0
   1736c:	0008      	movs	r0, r1
   1736e:	6023      	str	r3, [r4, #0]
   17370:	f7ef feb6 	bl	70e0 <_close>
   17374:	1c43      	adds	r3, r0, #1
   17376:	d103      	bne.n	17380 <_close_r+0x1c>
   17378:	6823      	ldr	r3, [r4, #0]
   1737a:	2b00      	cmp	r3, #0
   1737c:	d000      	beq.n	17380 <_close_r+0x1c>
   1737e:	602b      	str	r3, [r5, #0]
   17380:	bd70      	pop	{r4, r5, r6, pc}
   17382:	46c0      	nop			; (mov r8, r8)
   17384:	200034d8 	.word	0x200034d8

00017388 <_fstat_r>:
   17388:	2300      	movs	r3, #0
   1738a:	b570      	push	{r4, r5, r6, lr}
   1738c:	4c06      	ldr	r4, [pc, #24]	; (173a8 <_fstat_r+0x20>)
   1738e:	0005      	movs	r5, r0
   17390:	0008      	movs	r0, r1
   17392:	0011      	movs	r1, r2
   17394:	6023      	str	r3, [r4, #0]
   17396:	f7ef fea6 	bl	70e6 <_fstat>
   1739a:	1c43      	adds	r3, r0, #1
   1739c:	d103      	bne.n	173a6 <_fstat_r+0x1e>
   1739e:	6823      	ldr	r3, [r4, #0]
   173a0:	2b00      	cmp	r3, #0
   173a2:	d000      	beq.n	173a6 <_fstat_r+0x1e>
   173a4:	602b      	str	r3, [r5, #0]
   173a6:	bd70      	pop	{r4, r5, r6, pc}
   173a8:	200034d8 	.word	0x200034d8

000173ac <_isatty_r>:
   173ac:	2300      	movs	r3, #0
   173ae:	b570      	push	{r4, r5, r6, lr}
   173b0:	4c06      	ldr	r4, [pc, #24]	; (173cc <_isatty_r+0x20>)
   173b2:	0005      	movs	r5, r0
   173b4:	0008      	movs	r0, r1
   173b6:	6023      	str	r3, [r4, #0]
   173b8:	f7ef fe9a 	bl	70f0 <_isatty>
   173bc:	1c43      	adds	r3, r0, #1
   173be:	d103      	bne.n	173c8 <_isatty_r+0x1c>
   173c0:	6823      	ldr	r3, [r4, #0]
   173c2:	2b00      	cmp	r3, #0
   173c4:	d000      	beq.n	173c8 <_isatty_r+0x1c>
   173c6:	602b      	str	r3, [r5, #0]
   173c8:	bd70      	pop	{r4, r5, r6, pc}
   173ca:	46c0      	nop			; (mov r8, r8)
   173cc:	200034d8 	.word	0x200034d8

000173d0 <_lseek_r>:
   173d0:	b570      	push	{r4, r5, r6, lr}
   173d2:	0005      	movs	r5, r0
   173d4:	0008      	movs	r0, r1
   173d6:	0011      	movs	r1, r2
   173d8:	2200      	movs	r2, #0
   173da:	4c06      	ldr	r4, [pc, #24]	; (173f4 <_lseek_r+0x24>)
   173dc:	6022      	str	r2, [r4, #0]
   173de:	001a      	movs	r2, r3
   173e0:	f7ef fe88 	bl	70f4 <_lseek>
   173e4:	1c43      	adds	r3, r0, #1
   173e6:	d103      	bne.n	173f0 <_lseek_r+0x20>
   173e8:	6823      	ldr	r3, [r4, #0]
   173ea:	2b00      	cmp	r3, #0
   173ec:	d000      	beq.n	173f0 <_lseek_r+0x20>
   173ee:	602b      	str	r3, [r5, #0]
   173f0:	bd70      	pop	{r4, r5, r6, pc}
   173f2:	46c0      	nop			; (mov r8, r8)
   173f4:	200034d8 	.word	0x200034d8

000173f8 <__malloc_lock>:
   173f8:	4770      	bx	lr

000173fa <__malloc_unlock>:
   173fa:	4770      	bx	lr

000173fc <_read_r>:
   173fc:	b570      	push	{r4, r5, r6, lr}
   173fe:	0005      	movs	r5, r0
   17400:	0008      	movs	r0, r1
   17402:	0011      	movs	r1, r2
   17404:	2200      	movs	r2, #0
   17406:	4c06      	ldr	r4, [pc, #24]	; (17420 <_read_r+0x24>)
   17408:	6022      	str	r2, [r4, #0]
   1740a:	001a      	movs	r2, r3
   1740c:	f7ef fe0c 	bl	7028 <_read>
   17410:	1c43      	adds	r3, r0, #1
   17412:	d103      	bne.n	1741c <_read_r+0x20>
   17414:	6823      	ldr	r3, [r4, #0]
   17416:	2b00      	cmp	r3, #0
   17418:	d000      	beq.n	1741c <_read_r+0x20>
   1741a:	602b      	str	r3, [r5, #0]
   1741c:	bd70      	pop	{r4, r5, r6, pc}
   1741e:	46c0      	nop			; (mov r8, r8)
   17420:	200034d8 	.word	0x200034d8
   17424:	00004a26 	.word	0x00004a26
   17428:	00004a26 	.word	0x00004a26
   1742c:	00004a02 	.word	0x00004a02
   17430:	00004a26 	.word	0x00004a26
   17434:	00004a02 	.word	0x00004a02
   17438:	000049e8 	.word	0x000049e8
   1743c:	000049e8 	.word	0x000049e8
   17440:	00004a26 	.word	0x00004a26
   17444:	00004a26 	.word	0x00004a26
   17448:	00004a26 	.word	0x00004a26
   1744c:	00004a26 	.word	0x00004a26
   17450:	00004a26 	.word	0x00004a26
   17454:	00004a26 	.word	0x00004a26
   17458:	00004a26 	.word	0x00004a26
   1745c:	00004a26 	.word	0x00004a26
   17460:	00004a26 	.word	0x00004a26
   17464:	00004a26 	.word	0x00004a26
   17468:	00004a26 	.word	0x00004a26
   1746c:	00004a26 	.word	0x00004a26
   17470:	00004a26 	.word	0x00004a26
   17474:	00004a26 	.word	0x00004a26
   17478:	00004a26 	.word	0x00004a26
   1747c:	00004a26 	.word	0x00004a26
   17480:	00004a26 	.word	0x00004a26
   17484:	00004a26 	.word	0x00004a26
   17488:	00004a26 	.word	0x00004a26
   1748c:	00004a02 	.word	0x00004a02
   17490:	00004a26 	.word	0x00004a26
   17494:	00004a02 	.word	0x00004a02
   17498:	00004a26 	.word	0x00004a26
   1749c:	00004a26 	.word	0x00004a26
   174a0:	00004a26 	.word	0x00004a26
   174a4:	00004a26 	.word	0x00004a26
   174a8:	00004a26 	.word	0x00004a26
   174ac:	00004a26 	.word	0x00004a26
   174b0:	00004a26 	.word	0x00004a26
   174b4:	00004a26 	.word	0x00004a26
   174b8:	00004a26 	.word	0x00004a26
   174bc:	00004a26 	.word	0x00004a26
   174c0:	00004a26 	.word	0x00004a26
   174c4:	00004a26 	.word	0x00004a26
   174c8:	00004a26 	.word	0x00004a26
   174cc:	00004a26 	.word	0x00004a26
   174d0:	00004a26 	.word	0x00004a26
   174d4:	00004a26 	.word	0x00004a26
   174d8:	00004a26 	.word	0x00004a26
   174dc:	00004a26 	.word	0x00004a26
   174e0:	00004a26 	.word	0x00004a26
   174e4:	00004a26 	.word	0x00004a26
   174e8:	00004a26 	.word	0x00004a26
   174ec:	00004a26 	.word	0x00004a26
   174f0:	00004a26 	.word	0x00004a26
   174f4:	00004a26 	.word	0x00004a26
   174f8:	00004a26 	.word	0x00004a26
   174fc:	00004a26 	.word	0x00004a26
   17500:	00004a26 	.word	0x00004a26
   17504:	00004a26 	.word	0x00004a26
   17508:	00004a26 	.word	0x00004a26
   1750c:	00004a26 	.word	0x00004a26
   17510:	00004a26 	.word	0x00004a26
   17514:	00004a26 	.word	0x00004a26
   17518:	00004a26 	.word	0x00004a26
   1751c:	00004a26 	.word	0x00004a26
   17520:	00004a26 	.word	0x00004a26
   17524:	00004a02 	.word	0x00004a02
   17528:	00004a02 	.word	0x00004a02
   1752c:	00004a0a 	.word	0x00004a0a
   17530:	00004a0a 	.word	0x00004a0a
   17534:	00004a0a 	.word	0x00004a0a
   17538:	00004a0a 	.word	0x00004a0a
   1753c:	42000000 	.word	0x42000000
   17540:	42000400 	.word	0x42000400
   17544:	42000800 	.word	0x42000800
   17548:	42000c00 	.word	0x42000c00
   1754c:	42001000 	.word	0x42001000
   17550:	43000400 	.word	0x43000400
   17554:	0000634a 	.word	0x0000634a
   17558:	00006346 	.word	0x00006346
   1755c:	00006346 	.word	0x00006346
   17560:	000063ac 	.word	0x000063ac
   17564:	000063ac 	.word	0x000063ac
   17568:	00006360 	.word	0x00006360
   1756c:	00006350 	.word	0x00006350
   17570:	00006366 	.word	0x00006366
   17574:	0000639a 	.word	0x0000639a
   17578:	000064c8 	.word	0x000064c8
   1757c:	000064a8 	.word	0x000064a8
   17580:	000064a8 	.word	0x000064a8
   17584:	00006542 	.word	0x00006542
   17588:	000064ba 	.word	0x000064ba
   1758c:	000064d6 	.word	0x000064d6
   17590:	000064ac 	.word	0x000064ac
   17594:	000064e4 	.word	0x000064e4
   17598:	00006526 	.word	0x00006526
   1759c:	00006580 	.word	0x00006580
   175a0:	000065c2 	.word	0x000065c2
   175a4:	000065c2 	.word	0x000065c2
   175a8:	000065c2 	.word	0x000065c2
   175ac:	00006572 	.word	0x00006572
   175b0:	0000658e 	.word	0x0000658e
   175b4:	00006564 	.word	0x00006564
   175b8:	0000659c 	.word	0x0000659c
   175bc:	000065b2 	.word	0x000065b2
   175c0:	00006cbe 	.word	0x00006cbe
   175c4:	00006db4 	.word	0x00006db4
   175c8:	00006dbe 	.word	0x00006dbe
   175cc:	00006dc8 	.word	0x00006dc8
   175d0:	00006dd2 	.word	0x00006dd2
   175d4:	00006e04 	.word	0x00006e04
   175d8:	00006e0e 	.word	0x00006e0e
   175dc:	00006e18 	.word	0x00006e18
   175e0:	00006e22 	.word	0x00006e22
   175e4:	00006e2c 	.word	0x00006e2c
   175e8:	42002000 	.word	0x42002000
   175ec:	42002400 	.word	0x42002400
   175f0:	42002800 	.word	0x42002800
   175f4:	42002c00 	.word	0x42002c00
   175f8:	43000800 	.word	0x43000800
   175fc:	00000002 	.word	0x00000002
   17600:	00000100 	.word	0x00000100
   17604:	00000002 	.word	0x00000002
   17608:	00000200 	.word	0x00000200
   1760c:	00000002 	.word	0x00000002
   17610:	00000400 	.word	0x00000400
   17614:	00000002 	.word	0x00000002
   17618:	00000800 	.word	0x00000800
   1761c:	00000003 	.word	0x00000003
   17620:	00000004 	.word	0x00000004
   17624:	72420a0d 	.word	0x72420a0d
   17628:	6364616f 	.word	0x6364616f
   1762c:	20747361 	.word	0x20747361
   17630:	6c696146 	.word	0x6c696146
   17634:	000d6465 	.word	0x000d6465
   17638:	6f430a0d 	.word	0x6f430a0d
   1763c:	63656e6e 	.word	0x63656e6e
   17640:	676e6974 	.word	0x676e6974
   17644:	65655020 	.word	0x65655020
   17648:	6e6f2072 	.word	0x6e6f2072
   1764c:	61684320 	.word	0x61684320
   17650:	6c656e6e 	.word	0x6c656e6e
   17654:	00000020 	.word	0x00000020
   17658:	00006425 	.word	0x00006425
   1765c:	6f430a0d 	.word	0x6f430a0d
   17660:	63656e6e 	.word	0x63656e6e
   17664:	20646574 	.word	0x20646574
   17668:	72656550 	.word	0x72656550
   1766c:	206e6f20 	.word	0x206e6f20
   17670:	6e616843 	.word	0x6e616843
   17674:	206c656e 	.word	0x206c656e
   17678:	ffffff00 	.word	0xffffff00
   1767c:	65530a0d 	.word	0x65530a0d
   17680:	7463656c 	.word	0x7463656c
   17684:	206e6f69 	.word	0x206e6f69
   17688:	6320666f 	.word	0x6320666f
   1768c:	6e6e6168 	.word	0x6e6e6168
   17690:	00206c65 	.word	0x00206c65
   17694:	20736920 	.word	0x20736920
   17698:	20746f6e 	.word	0x20746f6e
   1769c:	70707573 	.word	0x70707573
   176a0:	6574726f 	.word	0x6574726f
   176a4:	6e692064 	.word	0x6e692064
   176a8:	72756320 	.word	0x72756320
   176ac:	746e6572 	.word	0x746e6572
   176b0:	6e6f6320 	.word	0x6e6f6320
   176b4:	75676966 	.word	0x75676966
   176b8:	69746172 	.word	0x69746172
   176bc:	0d2e6e6f 	.word	0x0d2e6e6f
   176c0:	ffffff00 	.word	0xffffff00
   176c4:	2d2d0d0a 	.word	0x2d2d0d0a
   176c8:	2d2d2d2d 	.word	0x2d2d2d2d
   176cc:	2d2d2d2d 	.word	0x2d2d2d2d
   176d0:	2d2d2d2d 	.word	0x2d2d2d2d
   176d4:	2d2d2d2d 	.word	0x2d2d2d2d
   176d8:	2d2d2d2d 	.word	0x2d2d2d2d
   176dc:	2d2d2d2d 	.word	0x2d2d2d2d
   176e0:	2d2d2d2d 	.word	0x2d2d2d2d
   176e4:	2d2d2d2d 	.word	0x2d2d2d2d
   176e8:	2d2d2d2d 	.word	0x2d2d2d2d
   176ec:	2d2d2d2d 	.word	0x2d2d2d2d
   176f0:	2d2d2d2d 	.word	0x2d2d2d2d
   176f4:	2d2d2d2d 	.word	0x2d2d2d2d
   176f8:	0a2d2d2d 	.word	0x0a2d2d2d
   176fc:	2d2d2d0d 	.word	0x2d2d2d0d
   17700:	2d2d2d2d 	.word	0x2d2d2d2d
   17704:	2d2d2d2d 	.word	0x2d2d2d2d
   17708:	2d2d2d2d 	.word	0x2d2d2d2d
   1770c:	2d2d2d2d 	.word	0x2d2d2d2d
   17710:	2d2d2d2d 	.word	0x2d2d2d2d
   17714:	2d2d2d2d 	.word	0x2d2d2d2d
   17718:	2d2d2d2d 	.word	0x2d2d2d2d
   1771c:	2d2d2d2d 	.word	0x2d2d2d2d
   17720:	2d2d2d2d 	.word	0x2d2d2d2d
   17724:	2d2d2d2d 	.word	0x2d2d2d2d
   17728:	2d2d2d2d 	.word	0x2d2d2d2d
   1772c:	2d2d2d2d 	.word	0x2d2d2d2d
   17730:	00002d2d 	.word	0x00002d2d
   17734:	74530a0d 	.word	0x74530a0d
   17738:	69747261 	.word	0x69747261
   1773c:	4e20676e 	.word	0x4e20676e
   17740:	2065646f 	.word	0x2065646f
   17744:	666f2031 	.word	0x666f2031
   17748:	6d695320 	.word	0x6d695320
   1774c:	20656c70 	.word	0x20656c70
   17750:	6f6d6544 	.word	0x6f6d6544
   17754:	726f6620 	.word	0x726f6620
   17758:	526f4c20 	.word	0x526f4c20
   1775c:	32502061 	.word	0x32502061
   17760:	74532050 	.word	0x74532050
   17764:	206b6361 	.word	0x206b6361
   17768:	002e2e2e 	.word	0x002e2e2e
   1776c:	75460a0d 	.word	0x75460a0d
   17770:	46206c6c 	.word	0x46206c6c
   17774:	74636e75 	.word	0x74636e75
   17778:	206e6f69 	.word	0x206e6f69
   1777c:	69766544 	.word	0x69766544
   17780:	28206563 	.word	0x28206563
   17784:	29444646 	.word	0x29444646
   17788:	65706f20 	.word	0x65706f20
   1778c:	69746172 	.word	0x69746172
   17790:	00736e6f 	.word	0x00736e6f
   17794:	20200a0d 	.word	0x20200a0d
   17798:	52202020 	.word	0x52202020
   1779c:	72542046 	.word	0x72542046
   177a0:	63736e61 	.word	0x63736e61
   177a4:	65766965 	.word	0x65766965
   177a8:	53203a72 	.word	0x53203a72
   177ac:	32315f58 	.word	0x32315f58
   177b0:	00003637 	.word	0x00003637
   177b4:	20200a0d 	.word	0x20200a0d
   177b8:	44202020 	.word	0x44202020
   177bc:	206f6d65 	.word	0x206f6d65
   177c0:	74736e49 	.word	0x74736e49
   177c4:	74637572 	.word	0x74637572
   177c8:	3a6e6f69 	.word	0x3a6e6f69
   177cc:	00000000 	.word	0x00000000
   177d0:	20200a0d 	.word	0x20200a0d
   177d4:	20202020 	.word	0x20202020
   177d8:	20202020 	.word	0x20202020
   177dc:	20202020 	.word	0x20202020
   177e0:	20202020 	.word	0x20202020
   177e4:	50202020 	.word	0x50202020
   177e8:	7265776f 	.word	0x7265776f
   177ec:	206e6f20 	.word	0x206e6f20
   177f0:	20656874 	.word	0x20656874
   177f4:	72616f62 	.word	0x72616f62
   177f8:	6e752064 	.word	0x6e752064
   177fc:	206c6974 	.word	0x206c6974
   17800:	2044454c 	.word	0x2044454c
   17804:	696c2031 	.word	0x696c2031
   17808:	73746867 	.word	0x73746867
   1780c:	00707520 	.word	0x00707520
   17810:	20200a0d 	.word	0x20200a0d
   17814:	20202020 	.word	0x20202020
   17818:	20202020 	.word	0x20202020
   1781c:	20202020 	.word	0x20202020
   17820:	20202020 	.word	0x20202020
   17824:	74202020 	.word	0x74202020
   17828:	6e69206f 	.word	0x6e69206f
   1782c:	61636964 	.word	0x61636964
   17830:	63206574 	.word	0x63206574
   17834:	656e6e6f 	.word	0x656e6e6f
   17838:	6e697463 	.word	0x6e697463
   1783c:	69772067 	.word	0x69772067
   17840:	70206874 	.word	0x70206874
   17844:	2e726565 	.word	0x2e726565
   17848:	00000000 	.word	0x00000000
   1784c:	20200a0d 	.word	0x20200a0d
   17850:	20202020 	.word	0x20202020
   17854:	20202020 	.word	0x20202020
   17858:	20202020 	.word	0x20202020
   1785c:	20202020 	.word	0x20202020
   17860:	50202020 	.word	0x50202020
   17864:	20687375 	.word	0x20687375
   17868:	74747542 	.word	0x74747542
   1786c:	31206e6f 	.word	0x31206e6f
   17870:	206f7420 	.word	0x206f7420
   17874:	616f7262 	.word	0x616f7262
   17878:	73616364 	.word	0x73616364
   1787c:	656d2074 	.word	0x656d2074
   17880:	67617373 	.word	0x67617373
   17884:	00002e65 	.word	0x00002e65
   17888:	20200a0d 	.word	0x20200a0d
   1788c:	20202020 	.word	0x20202020
   17890:	20202020 	.word	0x20202020
   17894:	20202020 	.word	0x20202020
   17898:	20202020 	.word	0x20202020
   1789c:	4c202020 	.word	0x4c202020
   178a0:	31204445 	.word	0x31204445
   178a4:	6c697720 	.word	0x6c697720
   178a8:	6562206c 	.word	0x6562206c
   178ac:	676f7420 	.word	0x676f7420
   178b0:	64656c67 	.word	0x64656c67
   178b4:	6f707520 	.word	0x6f707520
   178b8:	6572206e 	.word	0x6572206e
   178bc:	76696563 	.word	0x76696563
   178c0:	20676e69 	.word	0x20676e69
   178c4:	7373656d 	.word	0x7373656d
   178c8:	73656761 	.word	0x73656761
   178cc:	0000202e 	.word	0x0000202e
   178d0:	000d0a0d 	.word	0x000d0a0d
   178d4:	69726550 	.word	0x69726550
   178d8:	6369646f 	.word	0x6369646f
   178dc:	61725420 	.word	0x61725420
   178e0:	696d736e 	.word	0x696d736e
   178e4:	6f697373 	.word	0x6f697373
   178e8:	203d206e 	.word	0x203d206e
   178ec:	61736944 	.word	0x61736944
   178f0:	0d656c62 	.word	0x0d656c62
   178f4:	00000000 	.word	0x00000000
   178f8:	79747544 	.word	0x79747544
   178fc:	63794320 	.word	0x63794320
   17900:	676e696c 	.word	0x676e696c
   17904:	70757320 	.word	0x70757320
   17908:	74726f70 	.word	0x74726f70
   1790c:	44203d20 	.word	0x44203d20
   17910:	62617369 	.word	0x62617369
   17914:	000d656c 	.word	0x000d656c
   17918:	2054424c 	.word	0x2054424c
   1791c:	70707573 	.word	0x70707573
   17920:	2074726f 	.word	0x2074726f
   17924:	6944203d 	.word	0x6944203d
   17928:	6c626173 	.word	0x6c626173
   1792c:	ff000d65 	.word	0xff000d65
   17930:	75636553 	.word	0x75636553
   17934:	20646572 	.word	0x20646572
   17938:	00000000 	.word	0x00000000
   1793c:	616f7242 	.word	0x616f7242
   17940:	73616364 	.word	0x73616364
   17944:	61502074 	.word	0x61502074
   17948:	74656b63 	.word	0x74656b63
   1794c:	74697720 	.word	0x74697720
   17950:	53522068 	.word	0x53522068
   17954:	00204953 	.word	0x00204953
   17958:	63696e55 	.word	0x63696e55
   1795c:	20747361 	.word	0x20747361
   17960:	6b636150 	.word	0x6b636150
   17964:	77207465 	.word	0x77207465
   17968:	20687469 	.word	0x20687469
   1796c:	49535352 	.word	0x49535352
   17970:	00000020 	.word	0x00000020
   17974:	78323025 	.word	0x78323025
   17978:	00000000 	.word	0x00000000
   1797c:	6f726620 	.word	0x6f726620
   17980:	0000206d 	.word	0x0000206d
   17984:	00007825 	.word	0x00007825
   17988:	ff00203a 	.word	0xff00203a
   1798c:	000076f0 	.word	0x000076f0
   17990:	000076f0 	.word	0x000076f0
   17994:	000076fe 	.word	0x000076fe
   17998:	000076fe 	.word	0x000076fe
   1799c:	000076fe 	.word	0x000076fe
   179a0:	000076fe 	.word	0x000076fe
   179a4:	000076fe 	.word	0x000076fe
   179a8:	000076fe 	.word	0x000076fe
   179ac:	000076fe 	.word	0x000076fe
   179b0:	000076fe 	.word	0x000076fe
   179b4:	000076fe 	.word	0x000076fe
   179b8:	000076fe 	.word	0x000076fe
   179bc:	000076fe 	.word	0x000076fe
   179c0:	000076fe 	.word	0x000076fe
   179c4:	000076fe 	.word	0x000076fe
   179c8:	000076fe 	.word	0x000076fe
   179cc:	000076fe 	.word	0x000076fe
   179d0:	000076fe 	.word	0x000076fe
   179d4:	000076fe 	.word	0x000076fe
   179d8:	000076fe 	.word	0x000076fe
   179dc:	000076fe 	.word	0x000076fe
   179e0:	000076fe 	.word	0x000076fe
   179e4:	000076fe 	.word	0x000076fe
   179e8:	000076fe 	.word	0x000076fe
   179ec:	000076fe 	.word	0x000076fe
   179f0:	000076fe 	.word	0x000076fe
   179f4:	000076fe 	.word	0x000076fe
   179f8:	000076fe 	.word	0x000076fe
   179fc:	000076fe 	.word	0x000076fe
   17a00:	000076fe 	.word	0x000076fe
   17a04:	000076fe 	.word	0x000076fe
   17a08:	000076fe 	.word	0x000076fe
   17a0c:	000076fe 	.word	0x000076fe
   17a10:	000076fe 	.word	0x000076fe
   17a14:	000076fe 	.word	0x000076fe
   17a18:	000076fe 	.word	0x000076fe
   17a1c:	000076f0 	.word	0x000076f0
   17a20:	000076e8 	.word	0x000076e8
   17a24:	000076f4 	.word	0x000076f4
   17a28:	000076f0 	.word	0x000076f0
   17a2c:	6b636150 	.word	0x6b636150
   17a30:	72207465 	.word	0x72207465
   17a34:	69656365 	.word	0x69656365
   17a38:	20646576 	.word	0x20646576
   17a3c:	6d6f7266 	.word	0x6d6f7266
   17a40:	68746f20 	.word	0x68746f20
   17a44:	53207265 	.word	0x53207265
   17a48:	6372756f 	.word	0x6372756f
   17a4c:	41502065 	.word	0x41502065
   17a50:	4449204e 	.word	0x4449204e
   17a54:	30203a20 	.word	0x30203a20
   17a58:	25782578 	.word	0x25782578
   17a5c:	000a0d78 	.word	0x000a0d78
   17a60:	7461440a 	.word	0x7461440a
   17a64:	6f432061 	.word	0x6f432061
   17a68:	7269666e 	.word	0x7269666e
   17a6c:	48203a6d 	.word	0x48203a6d
   17a70:	6c646e61 	.word	0x6c646e61
   17a74:	25203a65 	.word	0x25203a65
   17a78:	74732064 	.word	0x74732064
   17a7c:	73757461 	.word	0x73757461
   17a80:	2064253a 	.word	0x2064253a
   17a84:	ff000a0d 	.word	0xff000a0d
   17a88:	6f430a0d 	.word	0x6f430a0d
   17a8c:	63656e6e 	.word	0x63656e6e
   17a90:	704f2074 	.word	0x704f2074
   17a94:	74617265 	.word	0x74617265
   17a98:	206e6f69 	.word	0x206e6f69
   17a9c:	74617453 	.word	0x74617453
   17aa0:	203a7375 	.word	0x203a7375
   17aa4:	000a6425 	.word	0x000a6425
   17aa8:	74530a0d 	.word	0x74530a0d
   17aac:	65747261 	.word	0x65747261
   17ab0:	69572064 	.word	0x69572064
   17ab4:	656c6572 	.word	0x656c6572
   17ab8:	43207373 	.word	0x43207373
   17abc:	756d6d6f 	.word	0x756d6d6f
   17ac0:	6163696e 	.word	0x6163696e
   17ac4:	6e6f6974 	.word	0x6e6f6974
   17ac8:	206e6f20 	.word	0x206e6f20
   17acc:	6e616843 	.word	0x6e616843
   17ad0:	206c656e 	.word	0x206c656e
   17ad4:	0a0d7525 	.word	0x0a0d7525
   17ad8:	ffffff00 	.word	0xffffff00
   17adc:	7275430a 	.word	0x7275430a
   17ae0:	746e6572 	.word	0x746e6572
   17ae4:	20785420 	.word	0x20785420
   17ae8:	7074756f 	.word	0x7074756f
   17aec:	70207475 	.word	0x70207475
   17af0:	7265776f 	.word	0x7265776f
   17af4:	6425203a 	.word	0x6425203a
   17af8:	00000a0d 	.word	0x00000a0d
   17afc:	42204150 	.word	0x42204150
   17b00:	54534f4f 	.word	0x54534f4f
   17b04:	61747320 	.word	0x61747320
   17b08:	3a737574 	.word	0x3a737574
   17b0c:	0d642520 	.word	0x0d642520
   17b10:	0000000a 	.word	0x0000000a
   17b14:	72727543 	.word	0x72727543
   17b18:	20746e65 	.word	0x20746e65
   17b1c:	203a4653 	.word	0x203a4653
   17b20:	64254653 	.word	0x64254653
   17b24:	00000a0d 	.word	0x00000a0d
   17b28:	72727543 	.word	0x72727543
   17b2c:	20746e65 	.word	0x20746e65
   17b30:	28205742 	.word	0x28205742
   17b34:	6b353231 	.word	0x6b353231
   17b38:	373d7a48 	.word	0x373d7a48
   17b3c:	3532202c 	.word	0x3532202c
   17b40:	7a486b30 	.word	0x7a486b30
   17b44:	202c383d 	.word	0x202c383d
   17b48:	6b303035 	.word	0x6b303035
   17b4c:	393d7a48 	.word	0x393d7a48
   17b50:	25203a29 	.word	0x25203a29
   17b54:	000a0d64 	.word	0x000a0d64
   17b58:	0944490a 	.word	0x0944490a
   17b5c:	69766544 	.word	0x69766544
   17b60:	41206563 	.word	0x41206563
   17b64:	65726464 	.word	0x65726464
   17b68:	09207373 	.word	0x09207373
   17b6c:	70614309 	.word	0x70614309
   17b70:	6c696261 	.word	0x6c696261
   17b74:	20797469 	.word	0x20797469
   17b78:	4e415009 	.word	0x4e415009
   17b7c:	20444920 	.word	0x20444920
   17b80:	61684309 	.word	0x61684309
   17b84:	6c656e6e 	.word	0x6c656e6e
   17b88:	00000020 	.word	0x00000020
   17b8c:	00000909 	.word	0x00000909
   17b90:	53200a0d 	.word	0x53200a0d
   17b94:	206e6163 	.word	0x206e6163
   17b98:	7265704f 	.word	0x7265704f
   17b9c:	6f697461 	.word	0x6f697461
   17ba0:	7453206e 	.word	0x7453206e
   17ba4:	73757461 	.word	0x73757461
   17ba8:	6425203a 	.word	0x6425203a
   17bac:	76656420 	.word	0x76656420
   17bb0:	20656369 	.word	0x20656369
   17bb4:	6e756f66 	.word	0x6e756f66
   17bb8:	ffff0064 	.word	0xffff0064
   17bbc:	626d756e 	.word	0x626d756e
   17bc0:	664f7265 	.word	0x664f7265
   17bc4:	65747942 	.word	0x65747942
   17bc8:	00000073 	.word	0x00000073
   17bcc:	732f2e2e 	.word	0x732f2e2e
   17bd0:	412f6372 	.word	0x412f6372
   17bd4:	742f4653 	.word	0x742f4653
   17bd8:	64726968 	.word	0x64726968
   17bdc:	74726170 	.word	0x74726170
   17be0:	69772f79 	.word	0x69772f79
   17be4:	656c6572 	.word	0x656c6572
   17be8:	4c2f7373 	.word	0x4c2f7373
   17bec:	5f61526f 	.word	0x5f61526f
   17bf0:	2f503250 	.word	0x2f503250
   17bf4:	76726573 	.word	0x76726573
   17bf8:	73656369 	.word	0x73656369
   17bfc:	7364702f 	.word	0x7364702f
   17c00:	6372732f 	.word	0x6372732f
   17c04:	2f766e2f 	.word	0x2f766e2f
   17c08:	764e5f44 	.word	0x764e5f44
   17c0c:	0000632e 	.word	0x0000632e
   17c10:	72646461 	.word	0x72646461
   17c14:	20737365 	.word	0x20737365
   17c18:	44203d3c 	.word	0x44203d3c
   17c1c:	5f564e5f 	.word	0x5f564e5f
   17c20:	4f4d454d 	.word	0x4f4d454d
   17c24:	455f5952 	.word	0x455f5952
   17c28:	0000444e 	.word	0x0000444e
   17c2c:	64646128 	.word	0x64646128
   17c30:	73736572 	.word	0x73736572
   17c34:	6e202b20 	.word	0x6e202b20
   17c38:	65626d75 	.word	0x65626d75
   17c3c:	42664f72 	.word	0x42664f72
   17c40:	73657479 	.word	0x73657479
   17c44:	3d3c2029 	.word	0x3d3c2029
   17c48:	5f442820 	.word	0x5f442820
   17c4c:	4d5f564e 	.word	0x4d5f564e
   17c50:	524f4d45 	.word	0x524f4d45
   17c54:	4e455f59 	.word	0x4e455f59
   17c58:	202b2044 	.word	0x202b2044
   17c5c:	00295531 	.word	0x00295531
   17c60:	66666f28 	.word	0x66666f28
   17c64:	20746573 	.word	0x20746573
   17c68:	756e202b 	.word	0x756e202b
   17c6c:	7265626d 	.word	0x7265626d
   17c70:	7942664f 	.word	0x7942664f
   17c74:	29736574 	.word	0x29736574
   17c78:	203d3c20 	.word	0x203d3c20
   17c7c:	564e5f44 	.word	0x564e5f44
   17c80:	4345535f 	.word	0x4345535f
   17c84:	5f524f54 	.word	0x5f524f54
   17c88:	455a4953 	.word	0x455a4953
   17c8c:	ffffff00 	.word	0xffffff00

00017c90 <__func__.13275>:
   17c90:	764e5f44 6165525f 6d495f64 ff006c70     D_Nv_Read_Impl..

00017ca0 <__func__.13288>:
   17ca0:	764e5f44 6972575f 495f6574 006c706d     D_Nv_Write_Impl.

00017cb0 <__func__.13300>:
   17cb0:	764e5f44 6172455f 65536573 726f7463     D_Nv_EraseSector
   17cc0:	706d495f ffff006c                       _Impl...

00017cc8 <__func__.13313>:
   17cc8:	706d6f43 44657261 00617461 68636163     CompareData.cach
   17cd8:	3d212065 4c554e20 ffff004c 736c6166     e != NULL...fals
   17ce8:	ffff0065 646e6946 6d657449 68636143     e...FindItemCach
   17cf8:	64692865 3d3d2029 4c554e20 0000004c     e(id) == NULL...
   17d08:	74695f73 6f436d65 20746e75 414d203c     s_itemCount < MA
   17d18:	54495f58 435f4d45 544e554f ffffff00     X_ITEM_COUNT....
   17d28:	68636163 6c3e2d65 42747361 6b636f6c     cache->lastBlock
   17d38:	203d2120 30307830 00003030 732f2e2e      != 0x0000..../s
   17d48:	412f6372 742f4653 64726968 74726170     rc/ASF/thirdpart
   17d58:	69772f79 656c6572 4c2f7373 5f61526f     y/wireless/LoRa_
   17d68:	2f503250 76726573 73656369 7364702f     P2P/services/pds
   17d78:	6372732f 2f766e2f 764e5f53 6d61532d     /src/nv/S_Nv-Sam
   17d88:	2e313252 ffff0063 20646928 30203d21     R21.c...(id != 0
   17d98:	26202975 69282026 203c2064 30467830     u) && (id < 0xF0
   17da8:	29753030 20262620 65746928 6e654c6d     00u) && (itemLen
   17db8:	20687467 4d203d3c 495f5841 5f4d4554     gth <= MAX_ITEM_
   17dc8:	474e454c 00294854 21206469 7530203d     LENGTH).id != 0u
   17dd8:	ffffff00 20646928 30203d21 26202975     ....(id != 0u) &
   17de8:	70282026 61746144 203d2120 4c4c554e     & (pData != NULL
   17df8:	ffff0029                                )...

00017dfc <__func__.13289>:
   17dfc:	706d6f63 53746361 6f746365 6d695472     compactSectorTim
   17e0c:	69467265 00646572                       erFired.

00017e14 <__func__.13325>:
   17e14:	646e6946 6d657449 68636143 ffff0065     FindItemCache...

00017e24 <__func__.13332>:
   17e24:	61657243 74496574 61436d65 00656863     CreateItemCache.

00017e34 <__func__.13452>:
   17e34:	706d6f43 53746361 6f746365 ffff0072     CompactSector...

00017e44 <__func__.13472>:
   17e44:	706d6f43 53746361 6f746365 4e664972     CompactSectorIfN
   17e54:	65646565 ffff0064                       eeded...

00017e5c <__func__.13479>:
   17e5c:	706d6f43 49746361 006d6574              CompactItem.

00017e68 <__func__.13513>:
   17e68:	764e5f53 6574495f 696e496d 6d495f74     S_Nv_ItemInit_Im
   17e78:	ff006c70                                pl..

00017e7c <__func__.13526>:
   17e7c:	764e5f53 6972575f 495f6574 006c706d     S_Nv_Write_Impl.

00017e8c <__func__.13537>:
   17e8c:	764e5f53 6165525f 6d495f64 ff006c70     S_Nv_Read_Impl..

00017e9c <__func__.13542>:
   17e9c:	764e5f53 6574495f 6e654c6d 5f687467     S_Nv_ItemLength_
   17eac:	6c706d49 ffffff00 20553028 69203d21     Impl....(0U != i
   17ebc:	446d6574 72637365 6574692e 7a69536d     temDescr.itemSiz
   17ecc:	26202965 4e282026 204c4c55 69203d21     e) && (NULL != i
   17edc:	446d6574 72637365 6574692e 7461446d     temDescr.itemDat
   17eec:	00002961 732f2e2e 412f6372 742f4653     a)..../src/ASF/t
   17efc:	64726968 74726170 69772f79 656c6572     hirdparty/wirele
   17f0c:	4c2f7373 5f61526f 2f503250 76726573     ss/LoRa_P2P/serv
   17f1c:	73656369 7364702f 6372732f 2f6c772f     ices/pds/src/wl/
   17f2c:	64506c77 74614473 72655361 2e726576     wlPdsDataServer.
   17f3c:	00000063 4e5f5328 65525f76 6e727574     c...(S_Nv_Return
   17f4c:	756c6156 69445f65 746f4e64 73697845     Value_DidNotExis
   17f5c:	3d3d2074 74657220 7c7c2029 5f532820     t == ret) || (S_
   17f6c:	525f764e 72757465 6c61566e 4f5f6575     Nv_ReturnValue_O
   17f7c:	3d3d206b 74657220 ffff0029              k == ret)...

00017f88 <__func__.13202>:
   17f88:	53736470 65726f74 6d657449 6b736154     pdsStoreItemTask
   17f98:	646e6148 0072656c                       Handler.

00017fa0 <__func__.13222>:
   17fa0:	53736470 65726f74 6d657449 ffffff00     pdsStoreItem....
   17fb0:	20746572 53203d3d 5f764e5f 75746552     ret == S_Nv_Retu
   17fc0:	61566e72 5f65756c ff006b4f              rnValue_Ok..

00017fcc <mySecurityKey>:
   17fcc:	03020100 07060504 0b0a0908 0f0e0d0c     ................
   17fdc:	00009f68 00009f78 00009f7e 00009f84     h...x...~.......
   17fec:	00009f8a 00009f90 00009f96 00009f9c     ................
   17ffc:	00009fa2 00009fa8 00009fae 00009fb4     ................
   1800c:	00009fba 00009fc0 00009fc6 00009fcc     ................
   1801c:	00009fd2 00009fd8 00009fde 00009fe4     ................
   1802c:	00009fea 00009ff0 00009ff6 00009ffc     ................
   1803c:	0000a002 0000a008 0000a14c 0000a0ac     ........L.......
   1804c:	0000a12c 0000a14c 0000a12c 0000a14c     ,...L...,...L...
   1805c:	0000a14c 0000a14c 0000a0ac 0000a14c     L...L.......L...
   1806c:	0000a14c 0000a14c 0000a14c 0000a14c     L...L...L...L...
   1807c:	0000a14c 0000a14c 0000a174 0a0d0a0d     L...L...t.......
   1808c:	4120794d 65726464 203a7373 00007830     My Address: 0x..
   1809c:	41502020 3a44494e 00783020 68432020       PANID: 0x.  Ch
   180ac:	656e6e61 00203a6c 6f430a0d 63656e6e     annel: ...Connec
   180bc:	6e6f6974 65500920 6f4c7265 6441676e     tion .PeerLongAd
   180cc:	73657264 50092073 49726565 206f666e     dress .PeerInfo 
   180dc:	4f785209 6174536e 31737574 0000000d     .RxOnStatus1....
   180ec:	00090909 0000742f 0a0d0a0d 6e6e6f43     ..../t......Conn
   180fc:	69746365 20206e6f 50202020 4c726565     ection     PeerL
   1810c:	41676e6f 65726464 20207373 50202020     ongAddress     P
   1811c:	49726565 096f666e 6e4f7852 74617453     eerInfo.RxOnStat
   1812c:	000d7375 20202020 20202020 20202020     us..            
   1813c:	00000020 20202020 ffffff00 63530a0d      ...    ......Sc
   1814c:	43206e61 6e6e6168 00206c65 41200a0d     an Channel ... A
   1815c:	54206b63 6f656d69 000d7475              ck Timeout..

00018168 <AdvChannels433>:
   18168:	19d1b9d8 19d1b9d8 ff0c0101 19d4c718     ................
   18178:	19d4c718 ff0c0101 19d7d458 19d7d458     ........X...X...
   18188:	ff0c0101                                ....

0001818c <AdvChannels868>:
   1818c:	33be27a0 33be27a0 ff100101 33c134e0     .'.3.'.3.....4.3
   1819c:	33c134e0 ff100101 33c44220 33c44220     .4.3.... B.3 B.3
   181ac:	ff100101                                ....

000181b0 <DefaultChannels433>:
   181b0:	50015001 ffff5001                       .P.P.P..

000181b8 <DefaultChannels868>:
   181b8:	50015001 ffff5001                       .P.P.P..

000181c0 <SubBandDutyCycle868>:
   181c0:	006403e8 03e80064 0064000a              ..d.d.....d.

000181cc <SubBandParams433>:
   181cc:	19cf0e40 19ea8580 00000000              @...........

000181d8 <SubBandParams868>:
   181d8:	337055c0 338eda40 00000000 338eda41     .Up3@..3....A..3
   181e8:	33bca100 00000000 33bca101 33c5c8c0     ...3.......3...3
   181f8:	00000000 33c74f60 33cef080 00000000     ....`O.3...3....
   18208:	33d1fdc0 33d5ce50 00000000 33d691a0     ...3P..3.......3
   18218:	33db2580 00000000                       .%.3....

00018220 <AdvChannels923JP>:
   18220:	3706ea00 3706ea00 ff100101 3709f740     ...7...7....@..7
   18230:	3709f740 ff100101                       @..7....

00018238 <DefaultChannels923JP>:
   18238:	50015001                                .P.P

0001823c <SubBandDutyCycleJP923>:
   1823c:	000a0064                                d...

00018240 <SubBandParamsJP923>:
   18240:	36d61600 36f7a7c0 00000000 36fab500     ...6...6.......6
   18250:	37502800 00000000                       .(P7....

00018258 <AdvChannels920KR>:
   18258:	36f62120 36f62120 ff0e0100 36f92e60      !.6 !.6....`..6
   18268:	36f92e60 ff0e0100 36fc3ba0 36fc3ba0     `..6.....;.6.;.6
   18278:	ff0e0100                                ....

0001827c <DefaultChannels920KR>:
   1827c:	50015001 ffff5001                       .P.P.P..

00018284 <taskHandlers>:
   18284:	0000ceb5 0000e559 0000db6d 00008e7d     ....Y...m...}...
   18294:	00007789                                .w..

00018298 <tc_interrupt_vectors.13447>:
   18298:	00151211 ffffff00 00020028 2000001c     ........(...... 
   182a8:	00000000 20433249 76616c53 6f4e2065     ....I2C Slave No
   182b8:	76412074 616c6961 00656c62 656d6954     t Available.Time
   182c8:	2074756f 00000031 656d6954 2074756f     out 1...Timeout 
   182d8:	00000032                                2...

000182dc <lorawanHandlers>:
   182dc:	0000da31 0000d945 0000daf5 fffffffd     1...E...........

000182ec <radioTaskHandlers>:
   182ec:	0000f139 0000f239 0000ef75 0000ebad     9...9...u.......
   182fc:	00012c2d                                -,..

00018300 <FskSyncWordBuff>:
   18300:	02c194c1                                         ...

00018303 <macEndDevCmdInputLen>:
   18303:	04010402 01010500 05000004              ............

0001830f <macEndDevCmdReplyLen>:
   1830f:	02010201 01010203 01000002 02020000     ................
   1831f:	0a080200                                         ..

00018321 <maxEIRPTable>:
   18321:	0d0c0a08 1412100e 1b1a1815 24211e1d     ..............!$
   18331:	28ffffff f800013a 0a000139 4c00013a     ...(:...9...:..L
   18341:	0a000139 ee00013a 0a000139 4c00013a     9...:...9...:..L
   18351:	f8000139 f8000139 ee000139 4c000139     9...9...9...9..L
   18361:	54000139 54000139 54000139 10000139     9..T9..T9..T9...
   18371:	f800013a f8000139 cc000139 b0000139     :...9...9...9...
   18381:	cc00013a ee000139 cc000139 b0000139     :...9...9...9...
   18391:	f800013a f8000139 ee000139 b0000139     :...9...9...9...
   183a1:	5400013a 54000139 54000139 ba000139     :..T9..T9..T9...
   183b1:	a800013a f800013d f800013c f600013c     :...=...<...<...
   183c1:	9a00013c 9a00013d 9000013d f600013d     <...=...=...=...
   183d1:	9a00013c 9000013d 9a00013d f600013d     <...=...=...=...
   183e1:	a000013c a000013d a000013d 3000013d     <...=...=...=..0
   183f1:	7800013e 5a00014b 1400014b 3200014b     >..xK..ZK...K..2
   18401:	1400014a 4c00014b 1400014b 3200014b     J...K..LK...K..2
   18411:	5a00014a 5a00014b 4c00014b 3200014b     J..ZK..ZK..LK..2
   18421:	2a00014a 2a00014a 2a00014a 9000014a     J..*J..*J..*J...
   18431:	d800014d 98000153 98000152 94000152     M...S...R...R...
   18441:	b0000152 b0000153 a2000153 94000153     R...S...S...S...
   18451:	b0000152 a2000153 b0000153 94000153     R...S...S...S...
   18461:	b8000152 b8000153 b8000153 bc000153     R...S...S...S...
   18471:	2c000155 6e756620 6f697463 00203a6e     U.., function: .
   18481:	65737361 6f697472 2522206e 66202273     assertion "%s" f
   18491:	656c6961 66203a64 20656c69 22732522     ailed: file "%s"
   184a1:	696c202c 2520656e 25732564 24000a73              , line %d%s%s..

000184b0 <_global_impure_ptr>:
   184b0:	20000024 2b302d23 6c680020 6665004c     $.. #-0+ .hlL.ef
   184c0:	47464567 32313000 36353433 41393837     gEFG.0123456789A
   184d0:	45444342 31300046 35343332 39383736     BCDEF.0123456789
   184e0:	64636261 ff006665                       abcdef..

000184e8 <__sf_fake_stderr>:
	...

00018508 <__sf_fake_stdin>:
	...

00018528 <__sf_fake_stdout>:
	...

00018548 <_init>:
   18548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1854a:	46c0      	nop			; (mov r8, r8)
   1854c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1854e:	bc08      	pop	{r3}
   18550:	469e      	mov	lr, r3
   18552:	4770      	bx	lr

00018554 <__init_array_start>:
   18554:	00004429 	.word	0x00004429

00018558 <_fini>:
   18558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1855a:	46c0      	nop			; (mov r8, r8)
   1855c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1855e:	bc08      	pop	{r3}
   18560:	469e      	mov	lr, r3
   18562:	4770      	bx	lr

00018564 <__fini_array_start>:
   18564:	00004401 	.word	0x00004401
