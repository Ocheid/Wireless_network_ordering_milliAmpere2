
LoRa_v0.6_Terminal_A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000192ec  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000192ec  000192ec  000292ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000084  20000000  000192f4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .lpram        00000000  30000000  30000000  00030084  2**0
                  CONTENTS
  4 .bss          00003464  20000088  00019380  00030088  2**3
                  ALLOC
  5 .stack        00002004  200034ec  0001c7e4  00030088  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  00030084  2**0
                  CONTENTS, READONLY
  7 .comment      0000008c  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY
  8 .debug_info   00098fcb  00000000  00000000  00030138  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000da0d  00000000  00000000  000c9103  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001deee  00000000  00000000  000d6b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000019a0  00000000  00000000  000f49fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002588  00000000  00000000  000f639e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001c290  00000000  00000000  000f8926  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00036bd5  00000000  00000000  00114bb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b603c  00000000  00000000  0014b78b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005268  00000000  00000000  002017c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f0 54 00 20 a5 70 00 00 a1 70 00 00 a1 70 00 00     .T. .p...p...p..
	...
      2c:	a1 70 00 00 00 00 00 00 00 00 00 00 a1 70 00 00     .p...........p..
      3c:	a1 70 00 00 a1 70 00 00 85 70 00 00 3d 4d 00 00     .p...p...p..=M..
      4c:	71 48 00 00 a1 70 00 00 a1 70 00 00 a1 70 00 00     qH...p...p...p..
      5c:	a1 70 00 00 15 58 00 00 25 58 00 00 35 58 00 00     .p...X..%X..5X..
      6c:	45 58 00 00 55 58 00 00 65 58 00 00 a1 70 00 00     EX..UX..eX...p..
      7c:	a1 70 00 00 a1 70 00 00 59 6c 00 00 69 6c 00 00     .p...p..Yl..il..
      8c:	a1 70 00 00 a1 70 00 00 79 6c 00 00 a1 70 00 00     .p...p..yl...p..
      9c:	a1 70 00 00 a1 70 00 00 a1 70 00 00 e9 47 00 00     .p...p...p...G..
      ac:	a1 70 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .p..............
	...

00000400 <__d_nv_mem_start>:
     400:	ffffffff 	.word	0xffffffff
     404:	ffffffff 	.word	0xffffffff
     408:	ffffffff 	.word	0xffffffff
     40c:	ffffffff 	.word	0xffffffff
     410:	ffffffff 	.word	0xffffffff
     414:	ffffffff 	.word	0xffffffff
     418:	ffffffff 	.word	0xffffffff
     41c:	ffffffff 	.word	0xffffffff
     420:	ffffffff 	.word	0xffffffff
     424:	ffffffff 	.word	0xffffffff
     428:	ffffffff 	.word	0xffffffff
     42c:	ffffffff 	.word	0xffffffff
     430:	ffffffff 	.word	0xffffffff
     434:	ffffffff 	.word	0xffffffff
     438:	ffffffff 	.word	0xffffffff
     43c:	ffffffff 	.word	0xffffffff
     440:	ffffffff 	.word	0xffffffff
     444:	ffffffff 	.word	0xffffffff
     448:	ffffffff 	.word	0xffffffff
     44c:	ffffffff 	.word	0xffffffff
     450:	ffffffff 	.word	0xffffffff
     454:	ffffffff 	.word	0xffffffff
     458:	ffffffff 	.word	0xffffffff
     45c:	ffffffff 	.word	0xffffffff
     460:	ffffffff 	.word	0xffffffff
     464:	ffffffff 	.word	0xffffffff
     468:	ffffffff 	.word	0xffffffff
     46c:	ffffffff 	.word	0xffffffff
     470:	ffffffff 	.word	0xffffffff
     474:	ffffffff 	.word	0xffffffff
     478:	ffffffff 	.word	0xffffffff
     47c:	ffffffff 	.word	0xffffffff
     480:	ffffffff 	.word	0xffffffff
     484:	ffffffff 	.word	0xffffffff
     488:	ffffffff 	.word	0xffffffff
     48c:	ffffffff 	.word	0xffffffff
     490:	ffffffff 	.word	0xffffffff
     494:	ffffffff 	.word	0xffffffff
     498:	ffffffff 	.word	0xffffffff
     49c:	ffffffff 	.word	0xffffffff
     4a0:	ffffffff 	.word	0xffffffff
     4a4:	ffffffff 	.word	0xffffffff
     4a8:	ffffffff 	.word	0xffffffff
     4ac:	ffffffff 	.word	0xffffffff
     4b0:	ffffffff 	.word	0xffffffff
     4b4:	ffffffff 	.word	0xffffffff
     4b8:	ffffffff 	.word	0xffffffff
     4bc:	ffffffff 	.word	0xffffffff
     4c0:	ffffffff 	.word	0xffffffff
     4c4:	ffffffff 	.word	0xffffffff
     4c8:	ffffffff 	.word	0xffffffff
     4cc:	ffffffff 	.word	0xffffffff
     4d0:	ffffffff 	.word	0xffffffff
     4d4:	ffffffff 	.word	0xffffffff
     4d8:	ffffffff 	.word	0xffffffff
     4dc:	ffffffff 	.word	0xffffffff
     4e0:	ffffffff 	.word	0xffffffff
     4e4:	ffffffff 	.word	0xffffffff
     4e8:	ffffffff 	.word	0xffffffff
     4ec:	ffffffff 	.word	0xffffffff
     4f0:	ffffffff 	.word	0xffffffff
     4f4:	ffffffff 	.word	0xffffffff
     4f8:	ffffffff 	.word	0xffffffff
     4fc:	ffffffff 	.word	0xffffffff
     500:	ffffffff 	.word	0xffffffff
     504:	ffffffff 	.word	0xffffffff
     508:	ffffffff 	.word	0xffffffff
     50c:	ffffffff 	.word	0xffffffff
     510:	ffffffff 	.word	0xffffffff
     514:	ffffffff 	.word	0xffffffff
     518:	ffffffff 	.word	0xffffffff
     51c:	ffffffff 	.word	0xffffffff
     520:	ffffffff 	.word	0xffffffff
     524:	ffffffff 	.word	0xffffffff
     528:	ffffffff 	.word	0xffffffff
     52c:	ffffffff 	.word	0xffffffff
     530:	ffffffff 	.word	0xffffffff
     534:	ffffffff 	.word	0xffffffff
     538:	ffffffff 	.word	0xffffffff
     53c:	ffffffff 	.word	0xffffffff
     540:	ffffffff 	.word	0xffffffff
     544:	ffffffff 	.word	0xffffffff
     548:	ffffffff 	.word	0xffffffff
     54c:	ffffffff 	.word	0xffffffff
     550:	ffffffff 	.word	0xffffffff
     554:	ffffffff 	.word	0xffffffff
     558:	ffffffff 	.word	0xffffffff
     55c:	ffffffff 	.word	0xffffffff
     560:	ffffffff 	.word	0xffffffff
     564:	ffffffff 	.word	0xffffffff
     568:	ffffffff 	.word	0xffffffff
     56c:	ffffffff 	.word	0xffffffff
     570:	ffffffff 	.word	0xffffffff
     574:	ffffffff 	.word	0xffffffff
     578:	ffffffff 	.word	0xffffffff
     57c:	ffffffff 	.word	0xffffffff
     580:	ffffffff 	.word	0xffffffff
     584:	ffffffff 	.word	0xffffffff
     588:	ffffffff 	.word	0xffffffff
     58c:	ffffffff 	.word	0xffffffff
     590:	ffffffff 	.word	0xffffffff
     594:	ffffffff 	.word	0xffffffff
     598:	ffffffff 	.word	0xffffffff
     59c:	ffffffff 	.word	0xffffffff
     5a0:	ffffffff 	.word	0xffffffff
     5a4:	ffffffff 	.word	0xffffffff
     5a8:	ffffffff 	.word	0xffffffff
     5ac:	ffffffff 	.word	0xffffffff
     5b0:	ffffffff 	.word	0xffffffff
     5b4:	ffffffff 	.word	0xffffffff
     5b8:	ffffffff 	.word	0xffffffff
     5bc:	ffffffff 	.word	0xffffffff
     5c0:	ffffffff 	.word	0xffffffff
     5c4:	ffffffff 	.word	0xffffffff
     5c8:	ffffffff 	.word	0xffffffff
     5cc:	ffffffff 	.word	0xffffffff
     5d0:	ffffffff 	.word	0xffffffff
     5d4:	ffffffff 	.word	0xffffffff
     5d8:	ffffffff 	.word	0xffffffff
     5dc:	ffffffff 	.word	0xffffffff
     5e0:	ffffffff 	.word	0xffffffff
     5e4:	ffffffff 	.word	0xffffffff
     5e8:	ffffffff 	.word	0xffffffff
     5ec:	ffffffff 	.word	0xffffffff
     5f0:	ffffffff 	.word	0xffffffff
     5f4:	ffffffff 	.word	0xffffffff
     5f8:	ffffffff 	.word	0xffffffff
     5fc:	ffffffff 	.word	0xffffffff
     600:	ffffffff 	.word	0xffffffff
     604:	ffffffff 	.word	0xffffffff
     608:	ffffffff 	.word	0xffffffff
     60c:	ffffffff 	.word	0xffffffff
     610:	ffffffff 	.word	0xffffffff
     614:	ffffffff 	.word	0xffffffff
     618:	ffffffff 	.word	0xffffffff
     61c:	ffffffff 	.word	0xffffffff
     620:	ffffffff 	.word	0xffffffff
     624:	ffffffff 	.word	0xffffffff
     628:	ffffffff 	.word	0xffffffff
     62c:	ffffffff 	.word	0xffffffff
     630:	ffffffff 	.word	0xffffffff
     634:	ffffffff 	.word	0xffffffff
     638:	ffffffff 	.word	0xffffffff
     63c:	ffffffff 	.word	0xffffffff
     640:	ffffffff 	.word	0xffffffff
     644:	ffffffff 	.word	0xffffffff
     648:	ffffffff 	.word	0xffffffff
     64c:	ffffffff 	.word	0xffffffff
     650:	ffffffff 	.word	0xffffffff
     654:	ffffffff 	.word	0xffffffff
     658:	ffffffff 	.word	0xffffffff
     65c:	ffffffff 	.word	0xffffffff
     660:	ffffffff 	.word	0xffffffff
     664:	ffffffff 	.word	0xffffffff
     668:	ffffffff 	.word	0xffffffff
     66c:	ffffffff 	.word	0xffffffff
     670:	ffffffff 	.word	0xffffffff
     674:	ffffffff 	.word	0xffffffff
     678:	ffffffff 	.word	0xffffffff
     67c:	ffffffff 	.word	0xffffffff
     680:	ffffffff 	.word	0xffffffff
     684:	ffffffff 	.word	0xffffffff
     688:	ffffffff 	.word	0xffffffff
     68c:	ffffffff 	.word	0xffffffff
     690:	ffffffff 	.word	0xffffffff
     694:	ffffffff 	.word	0xffffffff
     698:	ffffffff 	.word	0xffffffff
     69c:	ffffffff 	.word	0xffffffff
     6a0:	ffffffff 	.word	0xffffffff
     6a4:	ffffffff 	.word	0xffffffff
     6a8:	ffffffff 	.word	0xffffffff
     6ac:	ffffffff 	.word	0xffffffff
     6b0:	ffffffff 	.word	0xffffffff
     6b4:	ffffffff 	.word	0xffffffff
     6b8:	ffffffff 	.word	0xffffffff
     6bc:	ffffffff 	.word	0xffffffff
     6c0:	ffffffff 	.word	0xffffffff
     6c4:	ffffffff 	.word	0xffffffff
     6c8:	ffffffff 	.word	0xffffffff
     6cc:	ffffffff 	.word	0xffffffff
     6d0:	ffffffff 	.word	0xffffffff
     6d4:	ffffffff 	.word	0xffffffff
     6d8:	ffffffff 	.word	0xffffffff
     6dc:	ffffffff 	.word	0xffffffff
     6e0:	ffffffff 	.word	0xffffffff
     6e4:	ffffffff 	.word	0xffffffff
     6e8:	ffffffff 	.word	0xffffffff
     6ec:	ffffffff 	.word	0xffffffff
     6f0:	ffffffff 	.word	0xffffffff
     6f4:	ffffffff 	.word	0xffffffff
     6f8:	ffffffff 	.word	0xffffffff
     6fc:	ffffffff 	.word	0xffffffff
     700:	ffffffff 	.word	0xffffffff
     704:	ffffffff 	.word	0xffffffff
     708:	ffffffff 	.word	0xffffffff
     70c:	ffffffff 	.word	0xffffffff
     710:	ffffffff 	.word	0xffffffff
     714:	ffffffff 	.word	0xffffffff
     718:	ffffffff 	.word	0xffffffff
     71c:	ffffffff 	.word	0xffffffff
     720:	ffffffff 	.word	0xffffffff
     724:	ffffffff 	.word	0xffffffff
     728:	ffffffff 	.word	0xffffffff
     72c:	ffffffff 	.word	0xffffffff
     730:	ffffffff 	.word	0xffffffff
     734:	ffffffff 	.word	0xffffffff
     738:	ffffffff 	.word	0xffffffff
     73c:	ffffffff 	.word	0xffffffff
     740:	ffffffff 	.word	0xffffffff
     744:	ffffffff 	.word	0xffffffff
     748:	ffffffff 	.word	0xffffffff
     74c:	ffffffff 	.word	0xffffffff
     750:	ffffffff 	.word	0xffffffff
     754:	ffffffff 	.word	0xffffffff
     758:	ffffffff 	.word	0xffffffff
     75c:	ffffffff 	.word	0xffffffff
     760:	ffffffff 	.word	0xffffffff
     764:	ffffffff 	.word	0xffffffff
     768:	ffffffff 	.word	0xffffffff
     76c:	ffffffff 	.word	0xffffffff
     770:	ffffffff 	.word	0xffffffff
     774:	ffffffff 	.word	0xffffffff
     778:	ffffffff 	.word	0xffffffff
     77c:	ffffffff 	.word	0xffffffff
     780:	ffffffff 	.word	0xffffffff
     784:	ffffffff 	.word	0xffffffff
     788:	ffffffff 	.word	0xffffffff
     78c:	ffffffff 	.word	0xffffffff
     790:	ffffffff 	.word	0xffffffff
     794:	ffffffff 	.word	0xffffffff
     798:	ffffffff 	.word	0xffffffff
     79c:	ffffffff 	.word	0xffffffff
     7a0:	ffffffff 	.word	0xffffffff
     7a4:	ffffffff 	.word	0xffffffff
     7a8:	ffffffff 	.word	0xffffffff
     7ac:	ffffffff 	.word	0xffffffff
     7b0:	ffffffff 	.word	0xffffffff
     7b4:	ffffffff 	.word	0xffffffff
     7b8:	ffffffff 	.word	0xffffffff
     7bc:	ffffffff 	.word	0xffffffff
     7c0:	ffffffff 	.word	0xffffffff
     7c4:	ffffffff 	.word	0xffffffff
     7c8:	ffffffff 	.word	0xffffffff
     7cc:	ffffffff 	.word	0xffffffff
     7d0:	ffffffff 	.word	0xffffffff
     7d4:	ffffffff 	.word	0xffffffff
     7d8:	ffffffff 	.word	0xffffffff
     7dc:	ffffffff 	.word	0xffffffff
     7e0:	ffffffff 	.word	0xffffffff
     7e4:	ffffffff 	.word	0xffffffff
     7e8:	ffffffff 	.word	0xffffffff
     7ec:	ffffffff 	.word	0xffffffff
     7f0:	ffffffff 	.word	0xffffffff
     7f4:	ffffffff 	.word	0xffffffff
     7f8:	ffffffff 	.word	0xffffffff
     7fc:	ffffffff 	.word	0xffffffff
     800:	ffffffff 	.word	0xffffffff
     804:	ffffffff 	.word	0xffffffff
     808:	ffffffff 	.word	0xffffffff
     80c:	ffffffff 	.word	0xffffffff
     810:	ffffffff 	.word	0xffffffff
     814:	ffffffff 	.word	0xffffffff
     818:	ffffffff 	.word	0xffffffff
     81c:	ffffffff 	.word	0xffffffff
     820:	ffffffff 	.word	0xffffffff
     824:	ffffffff 	.word	0xffffffff
     828:	ffffffff 	.word	0xffffffff
     82c:	ffffffff 	.word	0xffffffff
     830:	ffffffff 	.word	0xffffffff
     834:	ffffffff 	.word	0xffffffff
     838:	ffffffff 	.word	0xffffffff
     83c:	ffffffff 	.word	0xffffffff
     840:	ffffffff 	.word	0xffffffff
     844:	ffffffff 	.word	0xffffffff
     848:	ffffffff 	.word	0xffffffff
     84c:	ffffffff 	.word	0xffffffff
     850:	ffffffff 	.word	0xffffffff
     854:	ffffffff 	.word	0xffffffff
     858:	ffffffff 	.word	0xffffffff
     85c:	ffffffff 	.word	0xffffffff
     860:	ffffffff 	.word	0xffffffff
     864:	ffffffff 	.word	0xffffffff
     868:	ffffffff 	.word	0xffffffff
     86c:	ffffffff 	.word	0xffffffff
     870:	ffffffff 	.word	0xffffffff
     874:	ffffffff 	.word	0xffffffff
     878:	ffffffff 	.word	0xffffffff
     87c:	ffffffff 	.word	0xffffffff
     880:	ffffffff 	.word	0xffffffff
     884:	ffffffff 	.word	0xffffffff
     888:	ffffffff 	.word	0xffffffff
     88c:	ffffffff 	.word	0xffffffff
     890:	ffffffff 	.word	0xffffffff
     894:	ffffffff 	.word	0xffffffff
     898:	ffffffff 	.word	0xffffffff
     89c:	ffffffff 	.word	0xffffffff
     8a0:	ffffffff 	.word	0xffffffff
     8a4:	ffffffff 	.word	0xffffffff
     8a8:	ffffffff 	.word	0xffffffff
     8ac:	ffffffff 	.word	0xffffffff
     8b0:	ffffffff 	.word	0xffffffff
     8b4:	ffffffff 	.word	0xffffffff
     8b8:	ffffffff 	.word	0xffffffff
     8bc:	ffffffff 	.word	0xffffffff
     8c0:	ffffffff 	.word	0xffffffff
     8c4:	ffffffff 	.word	0xffffffff
     8c8:	ffffffff 	.word	0xffffffff
     8cc:	ffffffff 	.word	0xffffffff
     8d0:	ffffffff 	.word	0xffffffff
     8d4:	ffffffff 	.word	0xffffffff
     8d8:	ffffffff 	.word	0xffffffff
     8dc:	ffffffff 	.word	0xffffffff
     8e0:	ffffffff 	.word	0xffffffff
     8e4:	ffffffff 	.word	0xffffffff
     8e8:	ffffffff 	.word	0xffffffff
     8ec:	ffffffff 	.word	0xffffffff
     8f0:	ffffffff 	.word	0xffffffff
     8f4:	ffffffff 	.word	0xffffffff
     8f8:	ffffffff 	.word	0xffffffff
     8fc:	ffffffff 	.word	0xffffffff
     900:	ffffffff 	.word	0xffffffff
     904:	ffffffff 	.word	0xffffffff
     908:	ffffffff 	.word	0xffffffff
     90c:	ffffffff 	.word	0xffffffff
     910:	ffffffff 	.word	0xffffffff
     914:	ffffffff 	.word	0xffffffff
     918:	ffffffff 	.word	0xffffffff
     91c:	ffffffff 	.word	0xffffffff
     920:	ffffffff 	.word	0xffffffff
     924:	ffffffff 	.word	0xffffffff
     928:	ffffffff 	.word	0xffffffff
     92c:	ffffffff 	.word	0xffffffff
     930:	ffffffff 	.word	0xffffffff
     934:	ffffffff 	.word	0xffffffff
     938:	ffffffff 	.word	0xffffffff
     93c:	ffffffff 	.word	0xffffffff
     940:	ffffffff 	.word	0xffffffff
     944:	ffffffff 	.word	0xffffffff
     948:	ffffffff 	.word	0xffffffff
     94c:	ffffffff 	.word	0xffffffff
     950:	ffffffff 	.word	0xffffffff
     954:	ffffffff 	.word	0xffffffff
     958:	ffffffff 	.word	0xffffffff
     95c:	ffffffff 	.word	0xffffffff
     960:	ffffffff 	.word	0xffffffff
     964:	ffffffff 	.word	0xffffffff
     968:	ffffffff 	.word	0xffffffff
     96c:	ffffffff 	.word	0xffffffff
     970:	ffffffff 	.word	0xffffffff
     974:	ffffffff 	.word	0xffffffff
     978:	ffffffff 	.word	0xffffffff
     97c:	ffffffff 	.word	0xffffffff
     980:	ffffffff 	.word	0xffffffff
     984:	ffffffff 	.word	0xffffffff
     988:	ffffffff 	.word	0xffffffff
     98c:	ffffffff 	.word	0xffffffff
     990:	ffffffff 	.word	0xffffffff
     994:	ffffffff 	.word	0xffffffff
     998:	ffffffff 	.word	0xffffffff
     99c:	ffffffff 	.word	0xffffffff
     9a0:	ffffffff 	.word	0xffffffff
     9a4:	ffffffff 	.word	0xffffffff
     9a8:	ffffffff 	.word	0xffffffff
     9ac:	ffffffff 	.word	0xffffffff
     9b0:	ffffffff 	.word	0xffffffff
     9b4:	ffffffff 	.word	0xffffffff
     9b8:	ffffffff 	.word	0xffffffff
     9bc:	ffffffff 	.word	0xffffffff
     9c0:	ffffffff 	.word	0xffffffff
     9c4:	ffffffff 	.word	0xffffffff
     9c8:	ffffffff 	.word	0xffffffff
     9cc:	ffffffff 	.word	0xffffffff
     9d0:	ffffffff 	.word	0xffffffff
     9d4:	ffffffff 	.word	0xffffffff
     9d8:	ffffffff 	.word	0xffffffff
     9dc:	ffffffff 	.word	0xffffffff
     9e0:	ffffffff 	.word	0xffffffff
     9e4:	ffffffff 	.word	0xffffffff
     9e8:	ffffffff 	.word	0xffffffff
     9ec:	ffffffff 	.word	0xffffffff
     9f0:	ffffffff 	.word	0xffffffff
     9f4:	ffffffff 	.word	0xffffffff
     9f8:	ffffffff 	.word	0xffffffff
     9fc:	ffffffff 	.word	0xffffffff
     a00:	ffffffff 	.word	0xffffffff
     a04:	ffffffff 	.word	0xffffffff
     a08:	ffffffff 	.word	0xffffffff
     a0c:	ffffffff 	.word	0xffffffff
     a10:	ffffffff 	.word	0xffffffff
     a14:	ffffffff 	.word	0xffffffff
     a18:	ffffffff 	.word	0xffffffff
     a1c:	ffffffff 	.word	0xffffffff
     a20:	ffffffff 	.word	0xffffffff
     a24:	ffffffff 	.word	0xffffffff
     a28:	ffffffff 	.word	0xffffffff
     a2c:	ffffffff 	.word	0xffffffff
     a30:	ffffffff 	.word	0xffffffff
     a34:	ffffffff 	.word	0xffffffff
     a38:	ffffffff 	.word	0xffffffff
     a3c:	ffffffff 	.word	0xffffffff
     a40:	ffffffff 	.word	0xffffffff
     a44:	ffffffff 	.word	0xffffffff
     a48:	ffffffff 	.word	0xffffffff
     a4c:	ffffffff 	.word	0xffffffff
     a50:	ffffffff 	.word	0xffffffff
     a54:	ffffffff 	.word	0xffffffff
     a58:	ffffffff 	.word	0xffffffff
     a5c:	ffffffff 	.word	0xffffffff
     a60:	ffffffff 	.word	0xffffffff
     a64:	ffffffff 	.word	0xffffffff
     a68:	ffffffff 	.word	0xffffffff
     a6c:	ffffffff 	.word	0xffffffff
     a70:	ffffffff 	.word	0xffffffff
     a74:	ffffffff 	.word	0xffffffff
     a78:	ffffffff 	.word	0xffffffff
     a7c:	ffffffff 	.word	0xffffffff
     a80:	ffffffff 	.word	0xffffffff
     a84:	ffffffff 	.word	0xffffffff
     a88:	ffffffff 	.word	0xffffffff
     a8c:	ffffffff 	.word	0xffffffff
     a90:	ffffffff 	.word	0xffffffff
     a94:	ffffffff 	.word	0xffffffff
     a98:	ffffffff 	.word	0xffffffff
     a9c:	ffffffff 	.word	0xffffffff
     aa0:	ffffffff 	.word	0xffffffff
     aa4:	ffffffff 	.word	0xffffffff
     aa8:	ffffffff 	.word	0xffffffff
     aac:	ffffffff 	.word	0xffffffff
     ab0:	ffffffff 	.word	0xffffffff
     ab4:	ffffffff 	.word	0xffffffff
     ab8:	ffffffff 	.word	0xffffffff
     abc:	ffffffff 	.word	0xffffffff
     ac0:	ffffffff 	.word	0xffffffff
     ac4:	ffffffff 	.word	0xffffffff
     ac8:	ffffffff 	.word	0xffffffff
     acc:	ffffffff 	.word	0xffffffff
     ad0:	ffffffff 	.word	0xffffffff
     ad4:	ffffffff 	.word	0xffffffff
     ad8:	ffffffff 	.word	0xffffffff
     adc:	ffffffff 	.word	0xffffffff
     ae0:	ffffffff 	.word	0xffffffff
     ae4:	ffffffff 	.word	0xffffffff
     ae8:	ffffffff 	.word	0xffffffff
     aec:	ffffffff 	.word	0xffffffff
     af0:	ffffffff 	.word	0xffffffff
     af4:	ffffffff 	.word	0xffffffff
     af8:	ffffffff 	.word	0xffffffff
     afc:	ffffffff 	.word	0xffffffff
     b00:	ffffffff 	.word	0xffffffff
     b04:	ffffffff 	.word	0xffffffff
     b08:	ffffffff 	.word	0xffffffff
     b0c:	ffffffff 	.word	0xffffffff
     b10:	ffffffff 	.word	0xffffffff
     b14:	ffffffff 	.word	0xffffffff
     b18:	ffffffff 	.word	0xffffffff
     b1c:	ffffffff 	.word	0xffffffff
     b20:	ffffffff 	.word	0xffffffff
     b24:	ffffffff 	.word	0xffffffff
     b28:	ffffffff 	.word	0xffffffff
     b2c:	ffffffff 	.word	0xffffffff
     b30:	ffffffff 	.word	0xffffffff
     b34:	ffffffff 	.word	0xffffffff
     b38:	ffffffff 	.word	0xffffffff
     b3c:	ffffffff 	.word	0xffffffff
     b40:	ffffffff 	.word	0xffffffff
     b44:	ffffffff 	.word	0xffffffff
     b48:	ffffffff 	.word	0xffffffff
     b4c:	ffffffff 	.word	0xffffffff
     b50:	ffffffff 	.word	0xffffffff
     b54:	ffffffff 	.word	0xffffffff
     b58:	ffffffff 	.word	0xffffffff
     b5c:	ffffffff 	.word	0xffffffff
     b60:	ffffffff 	.word	0xffffffff
     b64:	ffffffff 	.word	0xffffffff
     b68:	ffffffff 	.word	0xffffffff
     b6c:	ffffffff 	.word	0xffffffff
     b70:	ffffffff 	.word	0xffffffff
     b74:	ffffffff 	.word	0xffffffff
     b78:	ffffffff 	.word	0xffffffff
     b7c:	ffffffff 	.word	0xffffffff
     b80:	ffffffff 	.word	0xffffffff
     b84:	ffffffff 	.word	0xffffffff
     b88:	ffffffff 	.word	0xffffffff
     b8c:	ffffffff 	.word	0xffffffff
     b90:	ffffffff 	.word	0xffffffff
     b94:	ffffffff 	.word	0xffffffff
     b98:	ffffffff 	.word	0xffffffff
     b9c:	ffffffff 	.word	0xffffffff
     ba0:	ffffffff 	.word	0xffffffff
     ba4:	ffffffff 	.word	0xffffffff
     ba8:	ffffffff 	.word	0xffffffff
     bac:	ffffffff 	.word	0xffffffff
     bb0:	ffffffff 	.word	0xffffffff
     bb4:	ffffffff 	.word	0xffffffff
     bb8:	ffffffff 	.word	0xffffffff
     bbc:	ffffffff 	.word	0xffffffff
     bc0:	ffffffff 	.word	0xffffffff
     bc4:	ffffffff 	.word	0xffffffff
     bc8:	ffffffff 	.word	0xffffffff
     bcc:	ffffffff 	.word	0xffffffff
     bd0:	ffffffff 	.word	0xffffffff
     bd4:	ffffffff 	.word	0xffffffff
     bd8:	ffffffff 	.word	0xffffffff
     bdc:	ffffffff 	.word	0xffffffff
     be0:	ffffffff 	.word	0xffffffff
     be4:	ffffffff 	.word	0xffffffff
     be8:	ffffffff 	.word	0xffffffff
     bec:	ffffffff 	.word	0xffffffff
     bf0:	ffffffff 	.word	0xffffffff
     bf4:	ffffffff 	.word	0xffffffff
     bf8:	ffffffff 	.word	0xffffffff
     bfc:	ffffffff 	.word	0xffffffff
     c00:	ffffffff 	.word	0xffffffff
     c04:	ffffffff 	.word	0xffffffff
     c08:	ffffffff 	.word	0xffffffff
     c0c:	ffffffff 	.word	0xffffffff
     c10:	ffffffff 	.word	0xffffffff
     c14:	ffffffff 	.word	0xffffffff
     c18:	ffffffff 	.word	0xffffffff
     c1c:	ffffffff 	.word	0xffffffff
     c20:	ffffffff 	.word	0xffffffff
     c24:	ffffffff 	.word	0xffffffff
     c28:	ffffffff 	.word	0xffffffff
     c2c:	ffffffff 	.word	0xffffffff
     c30:	ffffffff 	.word	0xffffffff
     c34:	ffffffff 	.word	0xffffffff
     c38:	ffffffff 	.word	0xffffffff
     c3c:	ffffffff 	.word	0xffffffff
     c40:	ffffffff 	.word	0xffffffff
     c44:	ffffffff 	.word	0xffffffff
     c48:	ffffffff 	.word	0xffffffff
     c4c:	ffffffff 	.word	0xffffffff
     c50:	ffffffff 	.word	0xffffffff
     c54:	ffffffff 	.word	0xffffffff
     c58:	ffffffff 	.word	0xffffffff
     c5c:	ffffffff 	.word	0xffffffff
     c60:	ffffffff 	.word	0xffffffff
     c64:	ffffffff 	.word	0xffffffff
     c68:	ffffffff 	.word	0xffffffff
     c6c:	ffffffff 	.word	0xffffffff
     c70:	ffffffff 	.word	0xffffffff
     c74:	ffffffff 	.word	0xffffffff
     c78:	ffffffff 	.word	0xffffffff
     c7c:	ffffffff 	.word	0xffffffff
     c80:	ffffffff 	.word	0xffffffff
     c84:	ffffffff 	.word	0xffffffff
     c88:	ffffffff 	.word	0xffffffff
     c8c:	ffffffff 	.word	0xffffffff
     c90:	ffffffff 	.word	0xffffffff
     c94:	ffffffff 	.word	0xffffffff
     c98:	ffffffff 	.word	0xffffffff
     c9c:	ffffffff 	.word	0xffffffff
     ca0:	ffffffff 	.word	0xffffffff
     ca4:	ffffffff 	.word	0xffffffff
     ca8:	ffffffff 	.word	0xffffffff
     cac:	ffffffff 	.word	0xffffffff
     cb0:	ffffffff 	.word	0xffffffff
     cb4:	ffffffff 	.word	0xffffffff
     cb8:	ffffffff 	.word	0xffffffff
     cbc:	ffffffff 	.word	0xffffffff
     cc0:	ffffffff 	.word	0xffffffff
     cc4:	ffffffff 	.word	0xffffffff
     cc8:	ffffffff 	.word	0xffffffff
     ccc:	ffffffff 	.word	0xffffffff
     cd0:	ffffffff 	.word	0xffffffff
     cd4:	ffffffff 	.word	0xffffffff
     cd8:	ffffffff 	.word	0xffffffff
     cdc:	ffffffff 	.word	0xffffffff
     ce0:	ffffffff 	.word	0xffffffff
     ce4:	ffffffff 	.word	0xffffffff
     ce8:	ffffffff 	.word	0xffffffff
     cec:	ffffffff 	.word	0xffffffff
     cf0:	ffffffff 	.word	0xffffffff
     cf4:	ffffffff 	.word	0xffffffff
     cf8:	ffffffff 	.word	0xffffffff
     cfc:	ffffffff 	.word	0xffffffff
     d00:	ffffffff 	.word	0xffffffff
     d04:	ffffffff 	.word	0xffffffff
     d08:	ffffffff 	.word	0xffffffff
     d0c:	ffffffff 	.word	0xffffffff
     d10:	ffffffff 	.word	0xffffffff
     d14:	ffffffff 	.word	0xffffffff
     d18:	ffffffff 	.word	0xffffffff
     d1c:	ffffffff 	.word	0xffffffff
     d20:	ffffffff 	.word	0xffffffff
     d24:	ffffffff 	.word	0xffffffff
     d28:	ffffffff 	.word	0xffffffff
     d2c:	ffffffff 	.word	0xffffffff
     d30:	ffffffff 	.word	0xffffffff
     d34:	ffffffff 	.word	0xffffffff
     d38:	ffffffff 	.word	0xffffffff
     d3c:	ffffffff 	.word	0xffffffff
     d40:	ffffffff 	.word	0xffffffff
     d44:	ffffffff 	.word	0xffffffff
     d48:	ffffffff 	.word	0xffffffff
     d4c:	ffffffff 	.word	0xffffffff
     d50:	ffffffff 	.word	0xffffffff
     d54:	ffffffff 	.word	0xffffffff
     d58:	ffffffff 	.word	0xffffffff
     d5c:	ffffffff 	.word	0xffffffff
     d60:	ffffffff 	.word	0xffffffff
     d64:	ffffffff 	.word	0xffffffff
     d68:	ffffffff 	.word	0xffffffff
     d6c:	ffffffff 	.word	0xffffffff
     d70:	ffffffff 	.word	0xffffffff
     d74:	ffffffff 	.word	0xffffffff
     d78:	ffffffff 	.word	0xffffffff
     d7c:	ffffffff 	.word	0xffffffff
     d80:	ffffffff 	.word	0xffffffff
     d84:	ffffffff 	.word	0xffffffff
     d88:	ffffffff 	.word	0xffffffff
     d8c:	ffffffff 	.word	0xffffffff
     d90:	ffffffff 	.word	0xffffffff
     d94:	ffffffff 	.word	0xffffffff
     d98:	ffffffff 	.word	0xffffffff
     d9c:	ffffffff 	.word	0xffffffff
     da0:	ffffffff 	.word	0xffffffff
     da4:	ffffffff 	.word	0xffffffff
     da8:	ffffffff 	.word	0xffffffff
     dac:	ffffffff 	.word	0xffffffff
     db0:	ffffffff 	.word	0xffffffff
     db4:	ffffffff 	.word	0xffffffff
     db8:	ffffffff 	.word	0xffffffff
     dbc:	ffffffff 	.word	0xffffffff
     dc0:	ffffffff 	.word	0xffffffff
     dc4:	ffffffff 	.word	0xffffffff
     dc8:	ffffffff 	.word	0xffffffff
     dcc:	ffffffff 	.word	0xffffffff
     dd0:	ffffffff 	.word	0xffffffff
     dd4:	ffffffff 	.word	0xffffffff
     dd8:	ffffffff 	.word	0xffffffff
     ddc:	ffffffff 	.word	0xffffffff
     de0:	ffffffff 	.word	0xffffffff
     de4:	ffffffff 	.word	0xffffffff
     de8:	ffffffff 	.word	0xffffffff
     dec:	ffffffff 	.word	0xffffffff
     df0:	ffffffff 	.word	0xffffffff
     df4:	ffffffff 	.word	0xffffffff
     df8:	ffffffff 	.word	0xffffffff
     dfc:	ffffffff 	.word	0xffffffff
     e00:	ffffffff 	.word	0xffffffff
     e04:	ffffffff 	.word	0xffffffff
     e08:	ffffffff 	.word	0xffffffff
     e0c:	ffffffff 	.word	0xffffffff
     e10:	ffffffff 	.word	0xffffffff
     e14:	ffffffff 	.word	0xffffffff
     e18:	ffffffff 	.word	0xffffffff
     e1c:	ffffffff 	.word	0xffffffff
     e20:	ffffffff 	.word	0xffffffff
     e24:	ffffffff 	.word	0xffffffff
     e28:	ffffffff 	.word	0xffffffff
     e2c:	ffffffff 	.word	0xffffffff
     e30:	ffffffff 	.word	0xffffffff
     e34:	ffffffff 	.word	0xffffffff
     e38:	ffffffff 	.word	0xffffffff
     e3c:	ffffffff 	.word	0xffffffff
     e40:	ffffffff 	.word	0xffffffff
     e44:	ffffffff 	.word	0xffffffff
     e48:	ffffffff 	.word	0xffffffff
     e4c:	ffffffff 	.word	0xffffffff
     e50:	ffffffff 	.word	0xffffffff
     e54:	ffffffff 	.word	0xffffffff
     e58:	ffffffff 	.word	0xffffffff
     e5c:	ffffffff 	.word	0xffffffff
     e60:	ffffffff 	.word	0xffffffff
     e64:	ffffffff 	.word	0xffffffff
     e68:	ffffffff 	.word	0xffffffff
     e6c:	ffffffff 	.word	0xffffffff
     e70:	ffffffff 	.word	0xffffffff
     e74:	ffffffff 	.word	0xffffffff
     e78:	ffffffff 	.word	0xffffffff
     e7c:	ffffffff 	.word	0xffffffff
     e80:	ffffffff 	.word	0xffffffff
     e84:	ffffffff 	.word	0xffffffff
     e88:	ffffffff 	.word	0xffffffff
     e8c:	ffffffff 	.word	0xffffffff
     e90:	ffffffff 	.word	0xffffffff
     e94:	ffffffff 	.word	0xffffffff
     e98:	ffffffff 	.word	0xffffffff
     e9c:	ffffffff 	.word	0xffffffff
     ea0:	ffffffff 	.word	0xffffffff
     ea4:	ffffffff 	.word	0xffffffff
     ea8:	ffffffff 	.word	0xffffffff
     eac:	ffffffff 	.word	0xffffffff
     eb0:	ffffffff 	.word	0xffffffff
     eb4:	ffffffff 	.word	0xffffffff
     eb8:	ffffffff 	.word	0xffffffff
     ebc:	ffffffff 	.word	0xffffffff
     ec0:	ffffffff 	.word	0xffffffff
     ec4:	ffffffff 	.word	0xffffffff
     ec8:	ffffffff 	.word	0xffffffff
     ecc:	ffffffff 	.word	0xffffffff
     ed0:	ffffffff 	.word	0xffffffff
     ed4:	ffffffff 	.word	0xffffffff
     ed8:	ffffffff 	.word	0xffffffff
     edc:	ffffffff 	.word	0xffffffff
     ee0:	ffffffff 	.word	0xffffffff
     ee4:	ffffffff 	.word	0xffffffff
     ee8:	ffffffff 	.word	0xffffffff
     eec:	ffffffff 	.word	0xffffffff
     ef0:	ffffffff 	.word	0xffffffff
     ef4:	ffffffff 	.word	0xffffffff
     ef8:	ffffffff 	.word	0xffffffff
     efc:	ffffffff 	.word	0xffffffff
     f00:	ffffffff 	.word	0xffffffff
     f04:	ffffffff 	.word	0xffffffff
     f08:	ffffffff 	.word	0xffffffff
     f0c:	ffffffff 	.word	0xffffffff
     f10:	ffffffff 	.word	0xffffffff
     f14:	ffffffff 	.word	0xffffffff
     f18:	ffffffff 	.word	0xffffffff
     f1c:	ffffffff 	.word	0xffffffff
     f20:	ffffffff 	.word	0xffffffff
     f24:	ffffffff 	.word	0xffffffff
     f28:	ffffffff 	.word	0xffffffff
     f2c:	ffffffff 	.word	0xffffffff
     f30:	ffffffff 	.word	0xffffffff
     f34:	ffffffff 	.word	0xffffffff
     f38:	ffffffff 	.word	0xffffffff
     f3c:	ffffffff 	.word	0xffffffff
     f40:	ffffffff 	.word	0xffffffff
     f44:	ffffffff 	.word	0xffffffff
     f48:	ffffffff 	.word	0xffffffff
     f4c:	ffffffff 	.word	0xffffffff
     f50:	ffffffff 	.word	0xffffffff
     f54:	ffffffff 	.word	0xffffffff
     f58:	ffffffff 	.word	0xffffffff
     f5c:	ffffffff 	.word	0xffffffff
     f60:	ffffffff 	.word	0xffffffff
     f64:	ffffffff 	.word	0xffffffff
     f68:	ffffffff 	.word	0xffffffff
     f6c:	ffffffff 	.word	0xffffffff
     f70:	ffffffff 	.word	0xffffffff
     f74:	ffffffff 	.word	0xffffffff
     f78:	ffffffff 	.word	0xffffffff
     f7c:	ffffffff 	.word	0xffffffff
     f80:	ffffffff 	.word	0xffffffff
     f84:	ffffffff 	.word	0xffffffff
     f88:	ffffffff 	.word	0xffffffff
     f8c:	ffffffff 	.word	0xffffffff
     f90:	ffffffff 	.word	0xffffffff
     f94:	ffffffff 	.word	0xffffffff
     f98:	ffffffff 	.word	0xffffffff
     f9c:	ffffffff 	.word	0xffffffff
     fa0:	ffffffff 	.word	0xffffffff
     fa4:	ffffffff 	.word	0xffffffff
     fa8:	ffffffff 	.word	0xffffffff
     fac:	ffffffff 	.word	0xffffffff
     fb0:	ffffffff 	.word	0xffffffff
     fb4:	ffffffff 	.word	0xffffffff
     fb8:	ffffffff 	.word	0xffffffff
     fbc:	ffffffff 	.word	0xffffffff
     fc0:	ffffffff 	.word	0xffffffff
     fc4:	ffffffff 	.word	0xffffffff
     fc8:	ffffffff 	.word	0xffffffff
     fcc:	ffffffff 	.word	0xffffffff
     fd0:	ffffffff 	.word	0xffffffff
     fd4:	ffffffff 	.word	0xffffffff
     fd8:	ffffffff 	.word	0xffffffff
     fdc:	ffffffff 	.word	0xffffffff
     fe0:	ffffffff 	.word	0xffffffff
     fe4:	ffffffff 	.word	0xffffffff
     fe8:	ffffffff 	.word	0xffffffff
     fec:	ffffffff 	.word	0xffffffff
     ff0:	ffffffff 	.word	0xffffffff
     ff4:	ffffffff 	.word	0xffffffff
     ff8:	ffffffff 	.word	0xffffffff
     ffc:	ffffffff 	.word	0xffffffff
    1000:	ffffffff 	.word	0xffffffff
    1004:	ffffffff 	.word	0xffffffff
    1008:	ffffffff 	.word	0xffffffff
    100c:	ffffffff 	.word	0xffffffff
    1010:	ffffffff 	.word	0xffffffff
    1014:	ffffffff 	.word	0xffffffff
    1018:	ffffffff 	.word	0xffffffff
    101c:	ffffffff 	.word	0xffffffff
    1020:	ffffffff 	.word	0xffffffff
    1024:	ffffffff 	.word	0xffffffff
    1028:	ffffffff 	.word	0xffffffff
    102c:	ffffffff 	.word	0xffffffff
    1030:	ffffffff 	.word	0xffffffff
    1034:	ffffffff 	.word	0xffffffff
    1038:	ffffffff 	.word	0xffffffff
    103c:	ffffffff 	.word	0xffffffff
    1040:	ffffffff 	.word	0xffffffff
    1044:	ffffffff 	.word	0xffffffff
    1048:	ffffffff 	.word	0xffffffff
    104c:	ffffffff 	.word	0xffffffff
    1050:	ffffffff 	.word	0xffffffff
    1054:	ffffffff 	.word	0xffffffff
    1058:	ffffffff 	.word	0xffffffff
    105c:	ffffffff 	.word	0xffffffff
    1060:	ffffffff 	.word	0xffffffff
    1064:	ffffffff 	.word	0xffffffff
    1068:	ffffffff 	.word	0xffffffff
    106c:	ffffffff 	.word	0xffffffff
    1070:	ffffffff 	.word	0xffffffff
    1074:	ffffffff 	.word	0xffffffff
    1078:	ffffffff 	.word	0xffffffff
    107c:	ffffffff 	.word	0xffffffff
    1080:	ffffffff 	.word	0xffffffff
    1084:	ffffffff 	.word	0xffffffff
    1088:	ffffffff 	.word	0xffffffff
    108c:	ffffffff 	.word	0xffffffff
    1090:	ffffffff 	.word	0xffffffff
    1094:	ffffffff 	.word	0xffffffff
    1098:	ffffffff 	.word	0xffffffff
    109c:	ffffffff 	.word	0xffffffff
    10a0:	ffffffff 	.word	0xffffffff
    10a4:	ffffffff 	.word	0xffffffff
    10a8:	ffffffff 	.word	0xffffffff
    10ac:	ffffffff 	.word	0xffffffff
    10b0:	ffffffff 	.word	0xffffffff
    10b4:	ffffffff 	.word	0xffffffff
    10b8:	ffffffff 	.word	0xffffffff
    10bc:	ffffffff 	.word	0xffffffff
    10c0:	ffffffff 	.word	0xffffffff
    10c4:	ffffffff 	.word	0xffffffff
    10c8:	ffffffff 	.word	0xffffffff
    10cc:	ffffffff 	.word	0xffffffff
    10d0:	ffffffff 	.word	0xffffffff
    10d4:	ffffffff 	.word	0xffffffff
    10d8:	ffffffff 	.word	0xffffffff
    10dc:	ffffffff 	.word	0xffffffff
    10e0:	ffffffff 	.word	0xffffffff
    10e4:	ffffffff 	.word	0xffffffff
    10e8:	ffffffff 	.word	0xffffffff
    10ec:	ffffffff 	.word	0xffffffff
    10f0:	ffffffff 	.word	0xffffffff
    10f4:	ffffffff 	.word	0xffffffff
    10f8:	ffffffff 	.word	0xffffffff
    10fc:	ffffffff 	.word	0xffffffff
    1100:	ffffffff 	.word	0xffffffff
    1104:	ffffffff 	.word	0xffffffff
    1108:	ffffffff 	.word	0xffffffff
    110c:	ffffffff 	.word	0xffffffff
    1110:	ffffffff 	.word	0xffffffff
    1114:	ffffffff 	.word	0xffffffff
    1118:	ffffffff 	.word	0xffffffff
    111c:	ffffffff 	.word	0xffffffff
    1120:	ffffffff 	.word	0xffffffff
    1124:	ffffffff 	.word	0xffffffff
    1128:	ffffffff 	.word	0xffffffff
    112c:	ffffffff 	.word	0xffffffff
    1130:	ffffffff 	.word	0xffffffff
    1134:	ffffffff 	.word	0xffffffff
    1138:	ffffffff 	.word	0xffffffff
    113c:	ffffffff 	.word	0xffffffff
    1140:	ffffffff 	.word	0xffffffff
    1144:	ffffffff 	.word	0xffffffff
    1148:	ffffffff 	.word	0xffffffff
    114c:	ffffffff 	.word	0xffffffff
    1150:	ffffffff 	.word	0xffffffff
    1154:	ffffffff 	.word	0xffffffff
    1158:	ffffffff 	.word	0xffffffff
    115c:	ffffffff 	.word	0xffffffff
    1160:	ffffffff 	.word	0xffffffff
    1164:	ffffffff 	.word	0xffffffff
    1168:	ffffffff 	.word	0xffffffff
    116c:	ffffffff 	.word	0xffffffff
    1170:	ffffffff 	.word	0xffffffff
    1174:	ffffffff 	.word	0xffffffff
    1178:	ffffffff 	.word	0xffffffff
    117c:	ffffffff 	.word	0xffffffff
    1180:	ffffffff 	.word	0xffffffff
    1184:	ffffffff 	.word	0xffffffff
    1188:	ffffffff 	.word	0xffffffff
    118c:	ffffffff 	.word	0xffffffff
    1190:	ffffffff 	.word	0xffffffff
    1194:	ffffffff 	.word	0xffffffff
    1198:	ffffffff 	.word	0xffffffff
    119c:	ffffffff 	.word	0xffffffff
    11a0:	ffffffff 	.word	0xffffffff
    11a4:	ffffffff 	.word	0xffffffff
    11a8:	ffffffff 	.word	0xffffffff
    11ac:	ffffffff 	.word	0xffffffff
    11b0:	ffffffff 	.word	0xffffffff
    11b4:	ffffffff 	.word	0xffffffff
    11b8:	ffffffff 	.word	0xffffffff
    11bc:	ffffffff 	.word	0xffffffff
    11c0:	ffffffff 	.word	0xffffffff
    11c4:	ffffffff 	.word	0xffffffff
    11c8:	ffffffff 	.word	0xffffffff
    11cc:	ffffffff 	.word	0xffffffff
    11d0:	ffffffff 	.word	0xffffffff
    11d4:	ffffffff 	.word	0xffffffff
    11d8:	ffffffff 	.word	0xffffffff
    11dc:	ffffffff 	.word	0xffffffff
    11e0:	ffffffff 	.word	0xffffffff
    11e4:	ffffffff 	.word	0xffffffff
    11e8:	ffffffff 	.word	0xffffffff
    11ec:	ffffffff 	.word	0xffffffff
    11f0:	ffffffff 	.word	0xffffffff
    11f4:	ffffffff 	.word	0xffffffff
    11f8:	ffffffff 	.word	0xffffffff
    11fc:	ffffffff 	.word	0xffffffff
    1200:	ffffffff 	.word	0xffffffff
    1204:	ffffffff 	.word	0xffffffff
    1208:	ffffffff 	.word	0xffffffff
    120c:	ffffffff 	.word	0xffffffff
    1210:	ffffffff 	.word	0xffffffff
    1214:	ffffffff 	.word	0xffffffff
    1218:	ffffffff 	.word	0xffffffff
    121c:	ffffffff 	.word	0xffffffff
    1220:	ffffffff 	.word	0xffffffff
    1224:	ffffffff 	.word	0xffffffff
    1228:	ffffffff 	.word	0xffffffff
    122c:	ffffffff 	.word	0xffffffff
    1230:	ffffffff 	.word	0xffffffff
    1234:	ffffffff 	.word	0xffffffff
    1238:	ffffffff 	.word	0xffffffff
    123c:	ffffffff 	.word	0xffffffff
    1240:	ffffffff 	.word	0xffffffff
    1244:	ffffffff 	.word	0xffffffff
    1248:	ffffffff 	.word	0xffffffff
    124c:	ffffffff 	.word	0xffffffff
    1250:	ffffffff 	.word	0xffffffff
    1254:	ffffffff 	.word	0xffffffff
    1258:	ffffffff 	.word	0xffffffff
    125c:	ffffffff 	.word	0xffffffff
    1260:	ffffffff 	.word	0xffffffff
    1264:	ffffffff 	.word	0xffffffff
    1268:	ffffffff 	.word	0xffffffff
    126c:	ffffffff 	.word	0xffffffff
    1270:	ffffffff 	.word	0xffffffff
    1274:	ffffffff 	.word	0xffffffff
    1278:	ffffffff 	.word	0xffffffff
    127c:	ffffffff 	.word	0xffffffff
    1280:	ffffffff 	.word	0xffffffff
    1284:	ffffffff 	.word	0xffffffff
    1288:	ffffffff 	.word	0xffffffff
    128c:	ffffffff 	.word	0xffffffff
    1290:	ffffffff 	.word	0xffffffff
    1294:	ffffffff 	.word	0xffffffff
    1298:	ffffffff 	.word	0xffffffff
    129c:	ffffffff 	.word	0xffffffff
    12a0:	ffffffff 	.word	0xffffffff
    12a4:	ffffffff 	.word	0xffffffff
    12a8:	ffffffff 	.word	0xffffffff
    12ac:	ffffffff 	.word	0xffffffff
    12b0:	ffffffff 	.word	0xffffffff
    12b4:	ffffffff 	.word	0xffffffff
    12b8:	ffffffff 	.word	0xffffffff
    12bc:	ffffffff 	.word	0xffffffff
    12c0:	ffffffff 	.word	0xffffffff
    12c4:	ffffffff 	.word	0xffffffff
    12c8:	ffffffff 	.word	0xffffffff
    12cc:	ffffffff 	.word	0xffffffff
    12d0:	ffffffff 	.word	0xffffffff
    12d4:	ffffffff 	.word	0xffffffff
    12d8:	ffffffff 	.word	0xffffffff
    12dc:	ffffffff 	.word	0xffffffff
    12e0:	ffffffff 	.word	0xffffffff
    12e4:	ffffffff 	.word	0xffffffff
    12e8:	ffffffff 	.word	0xffffffff
    12ec:	ffffffff 	.word	0xffffffff
    12f0:	ffffffff 	.word	0xffffffff
    12f4:	ffffffff 	.word	0xffffffff
    12f8:	ffffffff 	.word	0xffffffff
    12fc:	ffffffff 	.word	0xffffffff
    1300:	ffffffff 	.word	0xffffffff
    1304:	ffffffff 	.word	0xffffffff
    1308:	ffffffff 	.word	0xffffffff
    130c:	ffffffff 	.word	0xffffffff
    1310:	ffffffff 	.word	0xffffffff
    1314:	ffffffff 	.word	0xffffffff
    1318:	ffffffff 	.word	0xffffffff
    131c:	ffffffff 	.word	0xffffffff
    1320:	ffffffff 	.word	0xffffffff
    1324:	ffffffff 	.word	0xffffffff
    1328:	ffffffff 	.word	0xffffffff
    132c:	ffffffff 	.word	0xffffffff
    1330:	ffffffff 	.word	0xffffffff
    1334:	ffffffff 	.word	0xffffffff
    1338:	ffffffff 	.word	0xffffffff
    133c:	ffffffff 	.word	0xffffffff
    1340:	ffffffff 	.word	0xffffffff
    1344:	ffffffff 	.word	0xffffffff
    1348:	ffffffff 	.word	0xffffffff
    134c:	ffffffff 	.word	0xffffffff
    1350:	ffffffff 	.word	0xffffffff
    1354:	ffffffff 	.word	0xffffffff
    1358:	ffffffff 	.word	0xffffffff
    135c:	ffffffff 	.word	0xffffffff
    1360:	ffffffff 	.word	0xffffffff
    1364:	ffffffff 	.word	0xffffffff
    1368:	ffffffff 	.word	0xffffffff
    136c:	ffffffff 	.word	0xffffffff
    1370:	ffffffff 	.word	0xffffffff
    1374:	ffffffff 	.word	0xffffffff
    1378:	ffffffff 	.word	0xffffffff
    137c:	ffffffff 	.word	0xffffffff
    1380:	ffffffff 	.word	0xffffffff
    1384:	ffffffff 	.word	0xffffffff
    1388:	ffffffff 	.word	0xffffffff
    138c:	ffffffff 	.word	0xffffffff
    1390:	ffffffff 	.word	0xffffffff
    1394:	ffffffff 	.word	0xffffffff
    1398:	ffffffff 	.word	0xffffffff
    139c:	ffffffff 	.word	0xffffffff
    13a0:	ffffffff 	.word	0xffffffff
    13a4:	ffffffff 	.word	0xffffffff
    13a8:	ffffffff 	.word	0xffffffff
    13ac:	ffffffff 	.word	0xffffffff
    13b0:	ffffffff 	.word	0xffffffff
    13b4:	ffffffff 	.word	0xffffffff
    13b8:	ffffffff 	.word	0xffffffff
    13bc:	ffffffff 	.word	0xffffffff
    13c0:	ffffffff 	.word	0xffffffff
    13c4:	ffffffff 	.word	0xffffffff
    13c8:	ffffffff 	.word	0xffffffff
    13cc:	ffffffff 	.word	0xffffffff
    13d0:	ffffffff 	.word	0xffffffff
    13d4:	ffffffff 	.word	0xffffffff
    13d8:	ffffffff 	.word	0xffffffff
    13dc:	ffffffff 	.word	0xffffffff
    13e0:	ffffffff 	.word	0xffffffff
    13e4:	ffffffff 	.word	0xffffffff
    13e8:	ffffffff 	.word	0xffffffff
    13ec:	ffffffff 	.word	0xffffffff
    13f0:	ffffffff 	.word	0xffffffff
    13f4:	ffffffff 	.word	0xffffffff
    13f8:	ffffffff 	.word	0xffffffff
    13fc:	ffffffff 	.word	0xffffffff
    1400:	ffffffff 	.word	0xffffffff
    1404:	ffffffff 	.word	0xffffffff
    1408:	ffffffff 	.word	0xffffffff
    140c:	ffffffff 	.word	0xffffffff
    1410:	ffffffff 	.word	0xffffffff
    1414:	ffffffff 	.word	0xffffffff
    1418:	ffffffff 	.word	0xffffffff
    141c:	ffffffff 	.word	0xffffffff
    1420:	ffffffff 	.word	0xffffffff
    1424:	ffffffff 	.word	0xffffffff
    1428:	ffffffff 	.word	0xffffffff
    142c:	ffffffff 	.word	0xffffffff
    1430:	ffffffff 	.word	0xffffffff
    1434:	ffffffff 	.word	0xffffffff
    1438:	ffffffff 	.word	0xffffffff
    143c:	ffffffff 	.word	0xffffffff
    1440:	ffffffff 	.word	0xffffffff
    1444:	ffffffff 	.word	0xffffffff
    1448:	ffffffff 	.word	0xffffffff
    144c:	ffffffff 	.word	0xffffffff
    1450:	ffffffff 	.word	0xffffffff
    1454:	ffffffff 	.word	0xffffffff
    1458:	ffffffff 	.word	0xffffffff
    145c:	ffffffff 	.word	0xffffffff
    1460:	ffffffff 	.word	0xffffffff
    1464:	ffffffff 	.word	0xffffffff
    1468:	ffffffff 	.word	0xffffffff
    146c:	ffffffff 	.word	0xffffffff
    1470:	ffffffff 	.word	0xffffffff
    1474:	ffffffff 	.word	0xffffffff
    1478:	ffffffff 	.word	0xffffffff
    147c:	ffffffff 	.word	0xffffffff
    1480:	ffffffff 	.word	0xffffffff
    1484:	ffffffff 	.word	0xffffffff
    1488:	ffffffff 	.word	0xffffffff
    148c:	ffffffff 	.word	0xffffffff
    1490:	ffffffff 	.word	0xffffffff
    1494:	ffffffff 	.word	0xffffffff
    1498:	ffffffff 	.word	0xffffffff
    149c:	ffffffff 	.word	0xffffffff
    14a0:	ffffffff 	.word	0xffffffff
    14a4:	ffffffff 	.word	0xffffffff
    14a8:	ffffffff 	.word	0xffffffff
    14ac:	ffffffff 	.word	0xffffffff
    14b0:	ffffffff 	.word	0xffffffff
    14b4:	ffffffff 	.word	0xffffffff
    14b8:	ffffffff 	.word	0xffffffff
    14bc:	ffffffff 	.word	0xffffffff
    14c0:	ffffffff 	.word	0xffffffff
    14c4:	ffffffff 	.word	0xffffffff
    14c8:	ffffffff 	.word	0xffffffff
    14cc:	ffffffff 	.word	0xffffffff
    14d0:	ffffffff 	.word	0xffffffff
    14d4:	ffffffff 	.word	0xffffffff
    14d8:	ffffffff 	.word	0xffffffff
    14dc:	ffffffff 	.word	0xffffffff
    14e0:	ffffffff 	.word	0xffffffff
    14e4:	ffffffff 	.word	0xffffffff
    14e8:	ffffffff 	.word	0xffffffff
    14ec:	ffffffff 	.word	0xffffffff
    14f0:	ffffffff 	.word	0xffffffff
    14f4:	ffffffff 	.word	0xffffffff
    14f8:	ffffffff 	.word	0xffffffff
    14fc:	ffffffff 	.word	0xffffffff
    1500:	ffffffff 	.word	0xffffffff
    1504:	ffffffff 	.word	0xffffffff
    1508:	ffffffff 	.word	0xffffffff
    150c:	ffffffff 	.word	0xffffffff
    1510:	ffffffff 	.word	0xffffffff
    1514:	ffffffff 	.word	0xffffffff
    1518:	ffffffff 	.word	0xffffffff
    151c:	ffffffff 	.word	0xffffffff
    1520:	ffffffff 	.word	0xffffffff
    1524:	ffffffff 	.word	0xffffffff
    1528:	ffffffff 	.word	0xffffffff
    152c:	ffffffff 	.word	0xffffffff
    1530:	ffffffff 	.word	0xffffffff
    1534:	ffffffff 	.word	0xffffffff
    1538:	ffffffff 	.word	0xffffffff
    153c:	ffffffff 	.word	0xffffffff
    1540:	ffffffff 	.word	0xffffffff
    1544:	ffffffff 	.word	0xffffffff
    1548:	ffffffff 	.word	0xffffffff
    154c:	ffffffff 	.word	0xffffffff
    1550:	ffffffff 	.word	0xffffffff
    1554:	ffffffff 	.word	0xffffffff
    1558:	ffffffff 	.word	0xffffffff
    155c:	ffffffff 	.word	0xffffffff
    1560:	ffffffff 	.word	0xffffffff
    1564:	ffffffff 	.word	0xffffffff
    1568:	ffffffff 	.word	0xffffffff
    156c:	ffffffff 	.word	0xffffffff
    1570:	ffffffff 	.word	0xffffffff
    1574:	ffffffff 	.word	0xffffffff
    1578:	ffffffff 	.word	0xffffffff
    157c:	ffffffff 	.word	0xffffffff
    1580:	ffffffff 	.word	0xffffffff
    1584:	ffffffff 	.word	0xffffffff
    1588:	ffffffff 	.word	0xffffffff
    158c:	ffffffff 	.word	0xffffffff
    1590:	ffffffff 	.word	0xffffffff
    1594:	ffffffff 	.word	0xffffffff
    1598:	ffffffff 	.word	0xffffffff
    159c:	ffffffff 	.word	0xffffffff
    15a0:	ffffffff 	.word	0xffffffff
    15a4:	ffffffff 	.word	0xffffffff
    15a8:	ffffffff 	.word	0xffffffff
    15ac:	ffffffff 	.word	0xffffffff
    15b0:	ffffffff 	.word	0xffffffff
    15b4:	ffffffff 	.word	0xffffffff
    15b8:	ffffffff 	.word	0xffffffff
    15bc:	ffffffff 	.word	0xffffffff
    15c0:	ffffffff 	.word	0xffffffff
    15c4:	ffffffff 	.word	0xffffffff
    15c8:	ffffffff 	.word	0xffffffff
    15cc:	ffffffff 	.word	0xffffffff
    15d0:	ffffffff 	.word	0xffffffff
    15d4:	ffffffff 	.word	0xffffffff
    15d8:	ffffffff 	.word	0xffffffff
    15dc:	ffffffff 	.word	0xffffffff
    15e0:	ffffffff 	.word	0xffffffff
    15e4:	ffffffff 	.word	0xffffffff
    15e8:	ffffffff 	.word	0xffffffff
    15ec:	ffffffff 	.word	0xffffffff
    15f0:	ffffffff 	.word	0xffffffff
    15f4:	ffffffff 	.word	0xffffffff
    15f8:	ffffffff 	.word	0xffffffff
    15fc:	ffffffff 	.word	0xffffffff
    1600:	ffffffff 	.word	0xffffffff
    1604:	ffffffff 	.word	0xffffffff
    1608:	ffffffff 	.word	0xffffffff
    160c:	ffffffff 	.word	0xffffffff
    1610:	ffffffff 	.word	0xffffffff
    1614:	ffffffff 	.word	0xffffffff
    1618:	ffffffff 	.word	0xffffffff
    161c:	ffffffff 	.word	0xffffffff
    1620:	ffffffff 	.word	0xffffffff
    1624:	ffffffff 	.word	0xffffffff
    1628:	ffffffff 	.word	0xffffffff
    162c:	ffffffff 	.word	0xffffffff
    1630:	ffffffff 	.word	0xffffffff
    1634:	ffffffff 	.word	0xffffffff
    1638:	ffffffff 	.word	0xffffffff
    163c:	ffffffff 	.word	0xffffffff
    1640:	ffffffff 	.word	0xffffffff
    1644:	ffffffff 	.word	0xffffffff
    1648:	ffffffff 	.word	0xffffffff
    164c:	ffffffff 	.word	0xffffffff
    1650:	ffffffff 	.word	0xffffffff
    1654:	ffffffff 	.word	0xffffffff
    1658:	ffffffff 	.word	0xffffffff
    165c:	ffffffff 	.word	0xffffffff
    1660:	ffffffff 	.word	0xffffffff
    1664:	ffffffff 	.word	0xffffffff
    1668:	ffffffff 	.word	0xffffffff
    166c:	ffffffff 	.word	0xffffffff
    1670:	ffffffff 	.word	0xffffffff
    1674:	ffffffff 	.word	0xffffffff
    1678:	ffffffff 	.word	0xffffffff
    167c:	ffffffff 	.word	0xffffffff
    1680:	ffffffff 	.word	0xffffffff
    1684:	ffffffff 	.word	0xffffffff
    1688:	ffffffff 	.word	0xffffffff
    168c:	ffffffff 	.word	0xffffffff
    1690:	ffffffff 	.word	0xffffffff
    1694:	ffffffff 	.word	0xffffffff
    1698:	ffffffff 	.word	0xffffffff
    169c:	ffffffff 	.word	0xffffffff
    16a0:	ffffffff 	.word	0xffffffff
    16a4:	ffffffff 	.word	0xffffffff
    16a8:	ffffffff 	.word	0xffffffff
    16ac:	ffffffff 	.word	0xffffffff
    16b0:	ffffffff 	.word	0xffffffff
    16b4:	ffffffff 	.word	0xffffffff
    16b8:	ffffffff 	.word	0xffffffff
    16bc:	ffffffff 	.word	0xffffffff
    16c0:	ffffffff 	.word	0xffffffff
    16c4:	ffffffff 	.word	0xffffffff
    16c8:	ffffffff 	.word	0xffffffff
    16cc:	ffffffff 	.word	0xffffffff
    16d0:	ffffffff 	.word	0xffffffff
    16d4:	ffffffff 	.word	0xffffffff
    16d8:	ffffffff 	.word	0xffffffff
    16dc:	ffffffff 	.word	0xffffffff
    16e0:	ffffffff 	.word	0xffffffff
    16e4:	ffffffff 	.word	0xffffffff
    16e8:	ffffffff 	.word	0xffffffff
    16ec:	ffffffff 	.word	0xffffffff
    16f0:	ffffffff 	.word	0xffffffff
    16f4:	ffffffff 	.word	0xffffffff
    16f8:	ffffffff 	.word	0xffffffff
    16fc:	ffffffff 	.word	0xffffffff
    1700:	ffffffff 	.word	0xffffffff
    1704:	ffffffff 	.word	0xffffffff
    1708:	ffffffff 	.word	0xffffffff
    170c:	ffffffff 	.word	0xffffffff
    1710:	ffffffff 	.word	0xffffffff
    1714:	ffffffff 	.word	0xffffffff
    1718:	ffffffff 	.word	0xffffffff
    171c:	ffffffff 	.word	0xffffffff
    1720:	ffffffff 	.word	0xffffffff
    1724:	ffffffff 	.word	0xffffffff
    1728:	ffffffff 	.word	0xffffffff
    172c:	ffffffff 	.word	0xffffffff
    1730:	ffffffff 	.word	0xffffffff
    1734:	ffffffff 	.word	0xffffffff
    1738:	ffffffff 	.word	0xffffffff
    173c:	ffffffff 	.word	0xffffffff
    1740:	ffffffff 	.word	0xffffffff
    1744:	ffffffff 	.word	0xffffffff
    1748:	ffffffff 	.word	0xffffffff
    174c:	ffffffff 	.word	0xffffffff
    1750:	ffffffff 	.word	0xffffffff
    1754:	ffffffff 	.word	0xffffffff
    1758:	ffffffff 	.word	0xffffffff
    175c:	ffffffff 	.word	0xffffffff
    1760:	ffffffff 	.word	0xffffffff
    1764:	ffffffff 	.word	0xffffffff
    1768:	ffffffff 	.word	0xffffffff
    176c:	ffffffff 	.word	0xffffffff
    1770:	ffffffff 	.word	0xffffffff
    1774:	ffffffff 	.word	0xffffffff
    1778:	ffffffff 	.word	0xffffffff
    177c:	ffffffff 	.word	0xffffffff
    1780:	ffffffff 	.word	0xffffffff
    1784:	ffffffff 	.word	0xffffffff
    1788:	ffffffff 	.word	0xffffffff
    178c:	ffffffff 	.word	0xffffffff
    1790:	ffffffff 	.word	0xffffffff
    1794:	ffffffff 	.word	0xffffffff
    1798:	ffffffff 	.word	0xffffffff
    179c:	ffffffff 	.word	0xffffffff
    17a0:	ffffffff 	.word	0xffffffff
    17a4:	ffffffff 	.word	0xffffffff
    17a8:	ffffffff 	.word	0xffffffff
    17ac:	ffffffff 	.word	0xffffffff
    17b0:	ffffffff 	.word	0xffffffff
    17b4:	ffffffff 	.word	0xffffffff
    17b8:	ffffffff 	.word	0xffffffff
    17bc:	ffffffff 	.word	0xffffffff
    17c0:	ffffffff 	.word	0xffffffff
    17c4:	ffffffff 	.word	0xffffffff
    17c8:	ffffffff 	.word	0xffffffff
    17cc:	ffffffff 	.word	0xffffffff
    17d0:	ffffffff 	.word	0xffffffff
    17d4:	ffffffff 	.word	0xffffffff
    17d8:	ffffffff 	.word	0xffffffff
    17dc:	ffffffff 	.word	0xffffffff
    17e0:	ffffffff 	.word	0xffffffff
    17e4:	ffffffff 	.word	0xffffffff
    17e8:	ffffffff 	.word	0xffffffff
    17ec:	ffffffff 	.word	0xffffffff
    17f0:	ffffffff 	.word	0xffffffff
    17f4:	ffffffff 	.word	0xffffffff
    17f8:	ffffffff 	.word	0xffffffff
    17fc:	ffffffff 	.word	0xffffffff
    1800:	ffffffff 	.word	0xffffffff
    1804:	ffffffff 	.word	0xffffffff
    1808:	ffffffff 	.word	0xffffffff
    180c:	ffffffff 	.word	0xffffffff
    1810:	ffffffff 	.word	0xffffffff
    1814:	ffffffff 	.word	0xffffffff
    1818:	ffffffff 	.word	0xffffffff
    181c:	ffffffff 	.word	0xffffffff
    1820:	ffffffff 	.word	0xffffffff
    1824:	ffffffff 	.word	0xffffffff
    1828:	ffffffff 	.word	0xffffffff
    182c:	ffffffff 	.word	0xffffffff
    1830:	ffffffff 	.word	0xffffffff
    1834:	ffffffff 	.word	0xffffffff
    1838:	ffffffff 	.word	0xffffffff
    183c:	ffffffff 	.word	0xffffffff
    1840:	ffffffff 	.word	0xffffffff
    1844:	ffffffff 	.word	0xffffffff
    1848:	ffffffff 	.word	0xffffffff
    184c:	ffffffff 	.word	0xffffffff
    1850:	ffffffff 	.word	0xffffffff
    1854:	ffffffff 	.word	0xffffffff
    1858:	ffffffff 	.word	0xffffffff
    185c:	ffffffff 	.word	0xffffffff
    1860:	ffffffff 	.word	0xffffffff
    1864:	ffffffff 	.word	0xffffffff
    1868:	ffffffff 	.word	0xffffffff
    186c:	ffffffff 	.word	0xffffffff
    1870:	ffffffff 	.word	0xffffffff
    1874:	ffffffff 	.word	0xffffffff
    1878:	ffffffff 	.word	0xffffffff
    187c:	ffffffff 	.word	0xffffffff
    1880:	ffffffff 	.word	0xffffffff
    1884:	ffffffff 	.word	0xffffffff
    1888:	ffffffff 	.word	0xffffffff
    188c:	ffffffff 	.word	0xffffffff
    1890:	ffffffff 	.word	0xffffffff
    1894:	ffffffff 	.word	0xffffffff
    1898:	ffffffff 	.word	0xffffffff
    189c:	ffffffff 	.word	0xffffffff
    18a0:	ffffffff 	.word	0xffffffff
    18a4:	ffffffff 	.word	0xffffffff
    18a8:	ffffffff 	.word	0xffffffff
    18ac:	ffffffff 	.word	0xffffffff
    18b0:	ffffffff 	.word	0xffffffff
    18b4:	ffffffff 	.word	0xffffffff
    18b8:	ffffffff 	.word	0xffffffff
    18bc:	ffffffff 	.word	0xffffffff
    18c0:	ffffffff 	.word	0xffffffff
    18c4:	ffffffff 	.word	0xffffffff
    18c8:	ffffffff 	.word	0xffffffff
    18cc:	ffffffff 	.word	0xffffffff
    18d0:	ffffffff 	.word	0xffffffff
    18d4:	ffffffff 	.word	0xffffffff
    18d8:	ffffffff 	.word	0xffffffff
    18dc:	ffffffff 	.word	0xffffffff
    18e0:	ffffffff 	.word	0xffffffff
    18e4:	ffffffff 	.word	0xffffffff
    18e8:	ffffffff 	.word	0xffffffff
    18ec:	ffffffff 	.word	0xffffffff
    18f0:	ffffffff 	.word	0xffffffff
    18f4:	ffffffff 	.word	0xffffffff
    18f8:	ffffffff 	.word	0xffffffff
    18fc:	ffffffff 	.word	0xffffffff
    1900:	ffffffff 	.word	0xffffffff
    1904:	ffffffff 	.word	0xffffffff
    1908:	ffffffff 	.word	0xffffffff
    190c:	ffffffff 	.word	0xffffffff
    1910:	ffffffff 	.word	0xffffffff
    1914:	ffffffff 	.word	0xffffffff
    1918:	ffffffff 	.word	0xffffffff
    191c:	ffffffff 	.word	0xffffffff
    1920:	ffffffff 	.word	0xffffffff
    1924:	ffffffff 	.word	0xffffffff
    1928:	ffffffff 	.word	0xffffffff
    192c:	ffffffff 	.word	0xffffffff
    1930:	ffffffff 	.word	0xffffffff
    1934:	ffffffff 	.word	0xffffffff
    1938:	ffffffff 	.word	0xffffffff
    193c:	ffffffff 	.word	0xffffffff
    1940:	ffffffff 	.word	0xffffffff
    1944:	ffffffff 	.word	0xffffffff
    1948:	ffffffff 	.word	0xffffffff
    194c:	ffffffff 	.word	0xffffffff
    1950:	ffffffff 	.word	0xffffffff
    1954:	ffffffff 	.word	0xffffffff
    1958:	ffffffff 	.word	0xffffffff
    195c:	ffffffff 	.word	0xffffffff
    1960:	ffffffff 	.word	0xffffffff
    1964:	ffffffff 	.word	0xffffffff
    1968:	ffffffff 	.word	0xffffffff
    196c:	ffffffff 	.word	0xffffffff
    1970:	ffffffff 	.word	0xffffffff
    1974:	ffffffff 	.word	0xffffffff
    1978:	ffffffff 	.word	0xffffffff
    197c:	ffffffff 	.word	0xffffffff
    1980:	ffffffff 	.word	0xffffffff
    1984:	ffffffff 	.word	0xffffffff
    1988:	ffffffff 	.word	0xffffffff
    198c:	ffffffff 	.word	0xffffffff
    1990:	ffffffff 	.word	0xffffffff
    1994:	ffffffff 	.word	0xffffffff
    1998:	ffffffff 	.word	0xffffffff
    199c:	ffffffff 	.word	0xffffffff
    19a0:	ffffffff 	.word	0xffffffff
    19a4:	ffffffff 	.word	0xffffffff
    19a8:	ffffffff 	.word	0xffffffff
    19ac:	ffffffff 	.word	0xffffffff
    19b0:	ffffffff 	.word	0xffffffff
    19b4:	ffffffff 	.word	0xffffffff
    19b8:	ffffffff 	.word	0xffffffff
    19bc:	ffffffff 	.word	0xffffffff
    19c0:	ffffffff 	.word	0xffffffff
    19c4:	ffffffff 	.word	0xffffffff
    19c8:	ffffffff 	.word	0xffffffff
    19cc:	ffffffff 	.word	0xffffffff
    19d0:	ffffffff 	.word	0xffffffff
    19d4:	ffffffff 	.word	0xffffffff
    19d8:	ffffffff 	.word	0xffffffff
    19dc:	ffffffff 	.word	0xffffffff
    19e0:	ffffffff 	.word	0xffffffff
    19e4:	ffffffff 	.word	0xffffffff
    19e8:	ffffffff 	.word	0xffffffff
    19ec:	ffffffff 	.word	0xffffffff
    19f0:	ffffffff 	.word	0xffffffff
    19f4:	ffffffff 	.word	0xffffffff
    19f8:	ffffffff 	.word	0xffffffff
    19fc:	ffffffff 	.word	0xffffffff
    1a00:	ffffffff 	.word	0xffffffff
    1a04:	ffffffff 	.word	0xffffffff
    1a08:	ffffffff 	.word	0xffffffff
    1a0c:	ffffffff 	.word	0xffffffff
    1a10:	ffffffff 	.word	0xffffffff
    1a14:	ffffffff 	.word	0xffffffff
    1a18:	ffffffff 	.word	0xffffffff
    1a1c:	ffffffff 	.word	0xffffffff
    1a20:	ffffffff 	.word	0xffffffff
    1a24:	ffffffff 	.word	0xffffffff
    1a28:	ffffffff 	.word	0xffffffff
    1a2c:	ffffffff 	.word	0xffffffff
    1a30:	ffffffff 	.word	0xffffffff
    1a34:	ffffffff 	.word	0xffffffff
    1a38:	ffffffff 	.word	0xffffffff
    1a3c:	ffffffff 	.word	0xffffffff
    1a40:	ffffffff 	.word	0xffffffff
    1a44:	ffffffff 	.word	0xffffffff
    1a48:	ffffffff 	.word	0xffffffff
    1a4c:	ffffffff 	.word	0xffffffff
    1a50:	ffffffff 	.word	0xffffffff
    1a54:	ffffffff 	.word	0xffffffff
    1a58:	ffffffff 	.word	0xffffffff
    1a5c:	ffffffff 	.word	0xffffffff
    1a60:	ffffffff 	.word	0xffffffff
    1a64:	ffffffff 	.word	0xffffffff
    1a68:	ffffffff 	.word	0xffffffff
    1a6c:	ffffffff 	.word	0xffffffff
    1a70:	ffffffff 	.word	0xffffffff
    1a74:	ffffffff 	.word	0xffffffff
    1a78:	ffffffff 	.word	0xffffffff
    1a7c:	ffffffff 	.word	0xffffffff
    1a80:	ffffffff 	.word	0xffffffff
    1a84:	ffffffff 	.word	0xffffffff
    1a88:	ffffffff 	.word	0xffffffff
    1a8c:	ffffffff 	.word	0xffffffff
    1a90:	ffffffff 	.word	0xffffffff
    1a94:	ffffffff 	.word	0xffffffff
    1a98:	ffffffff 	.word	0xffffffff
    1a9c:	ffffffff 	.word	0xffffffff
    1aa0:	ffffffff 	.word	0xffffffff
    1aa4:	ffffffff 	.word	0xffffffff
    1aa8:	ffffffff 	.word	0xffffffff
    1aac:	ffffffff 	.word	0xffffffff
    1ab0:	ffffffff 	.word	0xffffffff
    1ab4:	ffffffff 	.word	0xffffffff
    1ab8:	ffffffff 	.word	0xffffffff
    1abc:	ffffffff 	.word	0xffffffff
    1ac0:	ffffffff 	.word	0xffffffff
    1ac4:	ffffffff 	.word	0xffffffff
    1ac8:	ffffffff 	.word	0xffffffff
    1acc:	ffffffff 	.word	0xffffffff
    1ad0:	ffffffff 	.word	0xffffffff
    1ad4:	ffffffff 	.word	0xffffffff
    1ad8:	ffffffff 	.word	0xffffffff
    1adc:	ffffffff 	.word	0xffffffff
    1ae0:	ffffffff 	.word	0xffffffff
    1ae4:	ffffffff 	.word	0xffffffff
    1ae8:	ffffffff 	.word	0xffffffff
    1aec:	ffffffff 	.word	0xffffffff
    1af0:	ffffffff 	.word	0xffffffff
    1af4:	ffffffff 	.word	0xffffffff
    1af8:	ffffffff 	.word	0xffffffff
    1afc:	ffffffff 	.word	0xffffffff
    1b00:	ffffffff 	.word	0xffffffff
    1b04:	ffffffff 	.word	0xffffffff
    1b08:	ffffffff 	.word	0xffffffff
    1b0c:	ffffffff 	.word	0xffffffff
    1b10:	ffffffff 	.word	0xffffffff
    1b14:	ffffffff 	.word	0xffffffff
    1b18:	ffffffff 	.word	0xffffffff
    1b1c:	ffffffff 	.word	0xffffffff
    1b20:	ffffffff 	.word	0xffffffff
    1b24:	ffffffff 	.word	0xffffffff
    1b28:	ffffffff 	.word	0xffffffff
    1b2c:	ffffffff 	.word	0xffffffff
    1b30:	ffffffff 	.word	0xffffffff
    1b34:	ffffffff 	.word	0xffffffff
    1b38:	ffffffff 	.word	0xffffffff
    1b3c:	ffffffff 	.word	0xffffffff
    1b40:	ffffffff 	.word	0xffffffff
    1b44:	ffffffff 	.word	0xffffffff
    1b48:	ffffffff 	.word	0xffffffff
    1b4c:	ffffffff 	.word	0xffffffff
    1b50:	ffffffff 	.word	0xffffffff
    1b54:	ffffffff 	.word	0xffffffff
    1b58:	ffffffff 	.word	0xffffffff
    1b5c:	ffffffff 	.word	0xffffffff
    1b60:	ffffffff 	.word	0xffffffff
    1b64:	ffffffff 	.word	0xffffffff
    1b68:	ffffffff 	.word	0xffffffff
    1b6c:	ffffffff 	.word	0xffffffff
    1b70:	ffffffff 	.word	0xffffffff
    1b74:	ffffffff 	.word	0xffffffff
    1b78:	ffffffff 	.word	0xffffffff
    1b7c:	ffffffff 	.word	0xffffffff
    1b80:	ffffffff 	.word	0xffffffff
    1b84:	ffffffff 	.word	0xffffffff
    1b88:	ffffffff 	.word	0xffffffff
    1b8c:	ffffffff 	.word	0xffffffff
    1b90:	ffffffff 	.word	0xffffffff
    1b94:	ffffffff 	.word	0xffffffff
    1b98:	ffffffff 	.word	0xffffffff
    1b9c:	ffffffff 	.word	0xffffffff
    1ba0:	ffffffff 	.word	0xffffffff
    1ba4:	ffffffff 	.word	0xffffffff
    1ba8:	ffffffff 	.word	0xffffffff
    1bac:	ffffffff 	.word	0xffffffff
    1bb0:	ffffffff 	.word	0xffffffff
    1bb4:	ffffffff 	.word	0xffffffff
    1bb8:	ffffffff 	.word	0xffffffff
    1bbc:	ffffffff 	.word	0xffffffff
    1bc0:	ffffffff 	.word	0xffffffff
    1bc4:	ffffffff 	.word	0xffffffff
    1bc8:	ffffffff 	.word	0xffffffff
    1bcc:	ffffffff 	.word	0xffffffff
    1bd0:	ffffffff 	.word	0xffffffff
    1bd4:	ffffffff 	.word	0xffffffff
    1bd8:	ffffffff 	.word	0xffffffff
    1bdc:	ffffffff 	.word	0xffffffff
    1be0:	ffffffff 	.word	0xffffffff
    1be4:	ffffffff 	.word	0xffffffff
    1be8:	ffffffff 	.word	0xffffffff
    1bec:	ffffffff 	.word	0xffffffff
    1bf0:	ffffffff 	.word	0xffffffff
    1bf4:	ffffffff 	.word	0xffffffff
    1bf8:	ffffffff 	.word	0xffffffff
    1bfc:	ffffffff 	.word	0xffffffff
    1c00:	ffffffff 	.word	0xffffffff
    1c04:	ffffffff 	.word	0xffffffff
    1c08:	ffffffff 	.word	0xffffffff
    1c0c:	ffffffff 	.word	0xffffffff
    1c10:	ffffffff 	.word	0xffffffff
    1c14:	ffffffff 	.word	0xffffffff
    1c18:	ffffffff 	.word	0xffffffff
    1c1c:	ffffffff 	.word	0xffffffff
    1c20:	ffffffff 	.word	0xffffffff
    1c24:	ffffffff 	.word	0xffffffff
    1c28:	ffffffff 	.word	0xffffffff
    1c2c:	ffffffff 	.word	0xffffffff
    1c30:	ffffffff 	.word	0xffffffff
    1c34:	ffffffff 	.word	0xffffffff
    1c38:	ffffffff 	.word	0xffffffff
    1c3c:	ffffffff 	.word	0xffffffff
    1c40:	ffffffff 	.word	0xffffffff
    1c44:	ffffffff 	.word	0xffffffff
    1c48:	ffffffff 	.word	0xffffffff
    1c4c:	ffffffff 	.word	0xffffffff
    1c50:	ffffffff 	.word	0xffffffff
    1c54:	ffffffff 	.word	0xffffffff
    1c58:	ffffffff 	.word	0xffffffff
    1c5c:	ffffffff 	.word	0xffffffff
    1c60:	ffffffff 	.word	0xffffffff
    1c64:	ffffffff 	.word	0xffffffff
    1c68:	ffffffff 	.word	0xffffffff
    1c6c:	ffffffff 	.word	0xffffffff
    1c70:	ffffffff 	.word	0xffffffff
    1c74:	ffffffff 	.word	0xffffffff
    1c78:	ffffffff 	.word	0xffffffff
    1c7c:	ffffffff 	.word	0xffffffff
    1c80:	ffffffff 	.word	0xffffffff
    1c84:	ffffffff 	.word	0xffffffff
    1c88:	ffffffff 	.word	0xffffffff
    1c8c:	ffffffff 	.word	0xffffffff
    1c90:	ffffffff 	.word	0xffffffff
    1c94:	ffffffff 	.word	0xffffffff
    1c98:	ffffffff 	.word	0xffffffff
    1c9c:	ffffffff 	.word	0xffffffff
    1ca0:	ffffffff 	.word	0xffffffff
    1ca4:	ffffffff 	.word	0xffffffff
    1ca8:	ffffffff 	.word	0xffffffff
    1cac:	ffffffff 	.word	0xffffffff
    1cb0:	ffffffff 	.word	0xffffffff
    1cb4:	ffffffff 	.word	0xffffffff
    1cb8:	ffffffff 	.word	0xffffffff
    1cbc:	ffffffff 	.word	0xffffffff
    1cc0:	ffffffff 	.word	0xffffffff
    1cc4:	ffffffff 	.word	0xffffffff
    1cc8:	ffffffff 	.word	0xffffffff
    1ccc:	ffffffff 	.word	0xffffffff
    1cd0:	ffffffff 	.word	0xffffffff
    1cd4:	ffffffff 	.word	0xffffffff
    1cd8:	ffffffff 	.word	0xffffffff
    1cdc:	ffffffff 	.word	0xffffffff
    1ce0:	ffffffff 	.word	0xffffffff
    1ce4:	ffffffff 	.word	0xffffffff
    1ce8:	ffffffff 	.word	0xffffffff
    1cec:	ffffffff 	.word	0xffffffff
    1cf0:	ffffffff 	.word	0xffffffff
    1cf4:	ffffffff 	.word	0xffffffff
    1cf8:	ffffffff 	.word	0xffffffff
    1cfc:	ffffffff 	.word	0xffffffff
    1d00:	ffffffff 	.word	0xffffffff
    1d04:	ffffffff 	.word	0xffffffff
    1d08:	ffffffff 	.word	0xffffffff
    1d0c:	ffffffff 	.word	0xffffffff
    1d10:	ffffffff 	.word	0xffffffff
    1d14:	ffffffff 	.word	0xffffffff
    1d18:	ffffffff 	.word	0xffffffff
    1d1c:	ffffffff 	.word	0xffffffff
    1d20:	ffffffff 	.word	0xffffffff
    1d24:	ffffffff 	.word	0xffffffff
    1d28:	ffffffff 	.word	0xffffffff
    1d2c:	ffffffff 	.word	0xffffffff
    1d30:	ffffffff 	.word	0xffffffff
    1d34:	ffffffff 	.word	0xffffffff
    1d38:	ffffffff 	.word	0xffffffff
    1d3c:	ffffffff 	.word	0xffffffff
    1d40:	ffffffff 	.word	0xffffffff
    1d44:	ffffffff 	.word	0xffffffff
    1d48:	ffffffff 	.word	0xffffffff
    1d4c:	ffffffff 	.word	0xffffffff
    1d50:	ffffffff 	.word	0xffffffff
    1d54:	ffffffff 	.word	0xffffffff
    1d58:	ffffffff 	.word	0xffffffff
    1d5c:	ffffffff 	.word	0xffffffff
    1d60:	ffffffff 	.word	0xffffffff
    1d64:	ffffffff 	.word	0xffffffff
    1d68:	ffffffff 	.word	0xffffffff
    1d6c:	ffffffff 	.word	0xffffffff
    1d70:	ffffffff 	.word	0xffffffff
    1d74:	ffffffff 	.word	0xffffffff
    1d78:	ffffffff 	.word	0xffffffff
    1d7c:	ffffffff 	.word	0xffffffff
    1d80:	ffffffff 	.word	0xffffffff
    1d84:	ffffffff 	.word	0xffffffff
    1d88:	ffffffff 	.word	0xffffffff
    1d8c:	ffffffff 	.word	0xffffffff
    1d90:	ffffffff 	.word	0xffffffff
    1d94:	ffffffff 	.word	0xffffffff
    1d98:	ffffffff 	.word	0xffffffff
    1d9c:	ffffffff 	.word	0xffffffff
    1da0:	ffffffff 	.word	0xffffffff
    1da4:	ffffffff 	.word	0xffffffff
    1da8:	ffffffff 	.word	0xffffffff
    1dac:	ffffffff 	.word	0xffffffff
    1db0:	ffffffff 	.word	0xffffffff
    1db4:	ffffffff 	.word	0xffffffff
    1db8:	ffffffff 	.word	0xffffffff
    1dbc:	ffffffff 	.word	0xffffffff
    1dc0:	ffffffff 	.word	0xffffffff
    1dc4:	ffffffff 	.word	0xffffffff
    1dc8:	ffffffff 	.word	0xffffffff
    1dcc:	ffffffff 	.word	0xffffffff
    1dd0:	ffffffff 	.word	0xffffffff
    1dd4:	ffffffff 	.word	0xffffffff
    1dd8:	ffffffff 	.word	0xffffffff
    1ddc:	ffffffff 	.word	0xffffffff
    1de0:	ffffffff 	.word	0xffffffff
    1de4:	ffffffff 	.word	0xffffffff
    1de8:	ffffffff 	.word	0xffffffff
    1dec:	ffffffff 	.word	0xffffffff
    1df0:	ffffffff 	.word	0xffffffff
    1df4:	ffffffff 	.word	0xffffffff
    1df8:	ffffffff 	.word	0xffffffff
    1dfc:	ffffffff 	.word	0xffffffff
    1e00:	ffffffff 	.word	0xffffffff
    1e04:	ffffffff 	.word	0xffffffff
    1e08:	ffffffff 	.word	0xffffffff
    1e0c:	ffffffff 	.word	0xffffffff
    1e10:	ffffffff 	.word	0xffffffff
    1e14:	ffffffff 	.word	0xffffffff
    1e18:	ffffffff 	.word	0xffffffff
    1e1c:	ffffffff 	.word	0xffffffff
    1e20:	ffffffff 	.word	0xffffffff
    1e24:	ffffffff 	.word	0xffffffff
    1e28:	ffffffff 	.word	0xffffffff
    1e2c:	ffffffff 	.word	0xffffffff
    1e30:	ffffffff 	.word	0xffffffff
    1e34:	ffffffff 	.word	0xffffffff
    1e38:	ffffffff 	.word	0xffffffff
    1e3c:	ffffffff 	.word	0xffffffff
    1e40:	ffffffff 	.word	0xffffffff
    1e44:	ffffffff 	.word	0xffffffff
    1e48:	ffffffff 	.word	0xffffffff
    1e4c:	ffffffff 	.word	0xffffffff
    1e50:	ffffffff 	.word	0xffffffff
    1e54:	ffffffff 	.word	0xffffffff
    1e58:	ffffffff 	.word	0xffffffff
    1e5c:	ffffffff 	.word	0xffffffff
    1e60:	ffffffff 	.word	0xffffffff
    1e64:	ffffffff 	.word	0xffffffff
    1e68:	ffffffff 	.word	0xffffffff
    1e6c:	ffffffff 	.word	0xffffffff
    1e70:	ffffffff 	.word	0xffffffff
    1e74:	ffffffff 	.word	0xffffffff
    1e78:	ffffffff 	.word	0xffffffff
    1e7c:	ffffffff 	.word	0xffffffff
    1e80:	ffffffff 	.word	0xffffffff
    1e84:	ffffffff 	.word	0xffffffff
    1e88:	ffffffff 	.word	0xffffffff
    1e8c:	ffffffff 	.word	0xffffffff
    1e90:	ffffffff 	.word	0xffffffff
    1e94:	ffffffff 	.word	0xffffffff
    1e98:	ffffffff 	.word	0xffffffff
    1e9c:	ffffffff 	.word	0xffffffff
    1ea0:	ffffffff 	.word	0xffffffff
    1ea4:	ffffffff 	.word	0xffffffff
    1ea8:	ffffffff 	.word	0xffffffff
    1eac:	ffffffff 	.word	0xffffffff
    1eb0:	ffffffff 	.word	0xffffffff
    1eb4:	ffffffff 	.word	0xffffffff
    1eb8:	ffffffff 	.word	0xffffffff
    1ebc:	ffffffff 	.word	0xffffffff
    1ec0:	ffffffff 	.word	0xffffffff
    1ec4:	ffffffff 	.word	0xffffffff
    1ec8:	ffffffff 	.word	0xffffffff
    1ecc:	ffffffff 	.word	0xffffffff
    1ed0:	ffffffff 	.word	0xffffffff
    1ed4:	ffffffff 	.word	0xffffffff
    1ed8:	ffffffff 	.word	0xffffffff
    1edc:	ffffffff 	.word	0xffffffff
    1ee0:	ffffffff 	.word	0xffffffff
    1ee4:	ffffffff 	.word	0xffffffff
    1ee8:	ffffffff 	.word	0xffffffff
    1eec:	ffffffff 	.word	0xffffffff
    1ef0:	ffffffff 	.word	0xffffffff
    1ef4:	ffffffff 	.word	0xffffffff
    1ef8:	ffffffff 	.word	0xffffffff
    1efc:	ffffffff 	.word	0xffffffff
    1f00:	ffffffff 	.word	0xffffffff
    1f04:	ffffffff 	.word	0xffffffff
    1f08:	ffffffff 	.word	0xffffffff
    1f0c:	ffffffff 	.word	0xffffffff
    1f10:	ffffffff 	.word	0xffffffff
    1f14:	ffffffff 	.word	0xffffffff
    1f18:	ffffffff 	.word	0xffffffff
    1f1c:	ffffffff 	.word	0xffffffff
    1f20:	ffffffff 	.word	0xffffffff
    1f24:	ffffffff 	.word	0xffffffff
    1f28:	ffffffff 	.word	0xffffffff
    1f2c:	ffffffff 	.word	0xffffffff
    1f30:	ffffffff 	.word	0xffffffff
    1f34:	ffffffff 	.word	0xffffffff
    1f38:	ffffffff 	.word	0xffffffff
    1f3c:	ffffffff 	.word	0xffffffff
    1f40:	ffffffff 	.word	0xffffffff
    1f44:	ffffffff 	.word	0xffffffff
    1f48:	ffffffff 	.word	0xffffffff
    1f4c:	ffffffff 	.word	0xffffffff
    1f50:	ffffffff 	.word	0xffffffff
    1f54:	ffffffff 	.word	0xffffffff
    1f58:	ffffffff 	.word	0xffffffff
    1f5c:	ffffffff 	.word	0xffffffff
    1f60:	ffffffff 	.word	0xffffffff
    1f64:	ffffffff 	.word	0xffffffff
    1f68:	ffffffff 	.word	0xffffffff
    1f6c:	ffffffff 	.word	0xffffffff
    1f70:	ffffffff 	.word	0xffffffff
    1f74:	ffffffff 	.word	0xffffffff
    1f78:	ffffffff 	.word	0xffffffff
    1f7c:	ffffffff 	.word	0xffffffff
    1f80:	ffffffff 	.word	0xffffffff
    1f84:	ffffffff 	.word	0xffffffff
    1f88:	ffffffff 	.word	0xffffffff
    1f8c:	ffffffff 	.word	0xffffffff
    1f90:	ffffffff 	.word	0xffffffff
    1f94:	ffffffff 	.word	0xffffffff
    1f98:	ffffffff 	.word	0xffffffff
    1f9c:	ffffffff 	.word	0xffffffff
    1fa0:	ffffffff 	.word	0xffffffff
    1fa4:	ffffffff 	.word	0xffffffff
    1fa8:	ffffffff 	.word	0xffffffff
    1fac:	ffffffff 	.word	0xffffffff
    1fb0:	ffffffff 	.word	0xffffffff
    1fb4:	ffffffff 	.word	0xffffffff
    1fb8:	ffffffff 	.word	0xffffffff
    1fbc:	ffffffff 	.word	0xffffffff
    1fc0:	ffffffff 	.word	0xffffffff
    1fc4:	ffffffff 	.word	0xffffffff
    1fc8:	ffffffff 	.word	0xffffffff
    1fcc:	ffffffff 	.word	0xffffffff
    1fd0:	ffffffff 	.word	0xffffffff
    1fd4:	ffffffff 	.word	0xffffffff
    1fd8:	ffffffff 	.word	0xffffffff
    1fdc:	ffffffff 	.word	0xffffffff
    1fe0:	ffffffff 	.word	0xffffffff
    1fe4:	ffffffff 	.word	0xffffffff
    1fe8:	ffffffff 	.word	0xffffffff
    1fec:	ffffffff 	.word	0xffffffff
    1ff0:	ffffffff 	.word	0xffffffff
    1ff4:	ffffffff 	.word	0xffffffff
    1ff8:	ffffffff 	.word	0xffffffff
    1ffc:	ffffffff 	.word	0xffffffff
    2000:	ffffffff 	.word	0xffffffff
    2004:	ffffffff 	.word	0xffffffff
    2008:	ffffffff 	.word	0xffffffff
    200c:	ffffffff 	.word	0xffffffff
    2010:	ffffffff 	.word	0xffffffff
    2014:	ffffffff 	.word	0xffffffff
    2018:	ffffffff 	.word	0xffffffff
    201c:	ffffffff 	.word	0xffffffff
    2020:	ffffffff 	.word	0xffffffff
    2024:	ffffffff 	.word	0xffffffff
    2028:	ffffffff 	.word	0xffffffff
    202c:	ffffffff 	.word	0xffffffff
    2030:	ffffffff 	.word	0xffffffff
    2034:	ffffffff 	.word	0xffffffff
    2038:	ffffffff 	.word	0xffffffff
    203c:	ffffffff 	.word	0xffffffff
    2040:	ffffffff 	.word	0xffffffff
    2044:	ffffffff 	.word	0xffffffff
    2048:	ffffffff 	.word	0xffffffff
    204c:	ffffffff 	.word	0xffffffff
    2050:	ffffffff 	.word	0xffffffff
    2054:	ffffffff 	.word	0xffffffff
    2058:	ffffffff 	.word	0xffffffff
    205c:	ffffffff 	.word	0xffffffff
    2060:	ffffffff 	.word	0xffffffff
    2064:	ffffffff 	.word	0xffffffff
    2068:	ffffffff 	.word	0xffffffff
    206c:	ffffffff 	.word	0xffffffff
    2070:	ffffffff 	.word	0xffffffff
    2074:	ffffffff 	.word	0xffffffff
    2078:	ffffffff 	.word	0xffffffff
    207c:	ffffffff 	.word	0xffffffff
    2080:	ffffffff 	.word	0xffffffff
    2084:	ffffffff 	.word	0xffffffff
    2088:	ffffffff 	.word	0xffffffff
    208c:	ffffffff 	.word	0xffffffff
    2090:	ffffffff 	.word	0xffffffff
    2094:	ffffffff 	.word	0xffffffff
    2098:	ffffffff 	.word	0xffffffff
    209c:	ffffffff 	.word	0xffffffff
    20a0:	ffffffff 	.word	0xffffffff
    20a4:	ffffffff 	.word	0xffffffff
    20a8:	ffffffff 	.word	0xffffffff
    20ac:	ffffffff 	.word	0xffffffff
    20b0:	ffffffff 	.word	0xffffffff
    20b4:	ffffffff 	.word	0xffffffff
    20b8:	ffffffff 	.word	0xffffffff
    20bc:	ffffffff 	.word	0xffffffff
    20c0:	ffffffff 	.word	0xffffffff
    20c4:	ffffffff 	.word	0xffffffff
    20c8:	ffffffff 	.word	0xffffffff
    20cc:	ffffffff 	.word	0xffffffff
    20d0:	ffffffff 	.word	0xffffffff
    20d4:	ffffffff 	.word	0xffffffff
    20d8:	ffffffff 	.word	0xffffffff
    20dc:	ffffffff 	.word	0xffffffff
    20e0:	ffffffff 	.word	0xffffffff
    20e4:	ffffffff 	.word	0xffffffff
    20e8:	ffffffff 	.word	0xffffffff
    20ec:	ffffffff 	.word	0xffffffff
    20f0:	ffffffff 	.word	0xffffffff
    20f4:	ffffffff 	.word	0xffffffff
    20f8:	ffffffff 	.word	0xffffffff
    20fc:	ffffffff 	.word	0xffffffff
    2100:	ffffffff 	.word	0xffffffff
    2104:	ffffffff 	.word	0xffffffff
    2108:	ffffffff 	.word	0xffffffff
    210c:	ffffffff 	.word	0xffffffff
    2110:	ffffffff 	.word	0xffffffff
    2114:	ffffffff 	.word	0xffffffff
    2118:	ffffffff 	.word	0xffffffff
    211c:	ffffffff 	.word	0xffffffff
    2120:	ffffffff 	.word	0xffffffff
    2124:	ffffffff 	.word	0xffffffff
    2128:	ffffffff 	.word	0xffffffff
    212c:	ffffffff 	.word	0xffffffff
    2130:	ffffffff 	.word	0xffffffff
    2134:	ffffffff 	.word	0xffffffff
    2138:	ffffffff 	.word	0xffffffff
    213c:	ffffffff 	.word	0xffffffff
    2140:	ffffffff 	.word	0xffffffff
    2144:	ffffffff 	.word	0xffffffff
    2148:	ffffffff 	.word	0xffffffff
    214c:	ffffffff 	.word	0xffffffff
    2150:	ffffffff 	.word	0xffffffff
    2154:	ffffffff 	.word	0xffffffff
    2158:	ffffffff 	.word	0xffffffff
    215c:	ffffffff 	.word	0xffffffff
    2160:	ffffffff 	.word	0xffffffff
    2164:	ffffffff 	.word	0xffffffff
    2168:	ffffffff 	.word	0xffffffff
    216c:	ffffffff 	.word	0xffffffff
    2170:	ffffffff 	.word	0xffffffff
    2174:	ffffffff 	.word	0xffffffff
    2178:	ffffffff 	.word	0xffffffff
    217c:	ffffffff 	.word	0xffffffff
    2180:	ffffffff 	.word	0xffffffff
    2184:	ffffffff 	.word	0xffffffff
    2188:	ffffffff 	.word	0xffffffff
    218c:	ffffffff 	.word	0xffffffff
    2190:	ffffffff 	.word	0xffffffff
    2194:	ffffffff 	.word	0xffffffff
    2198:	ffffffff 	.word	0xffffffff
    219c:	ffffffff 	.word	0xffffffff
    21a0:	ffffffff 	.word	0xffffffff
    21a4:	ffffffff 	.word	0xffffffff
    21a8:	ffffffff 	.word	0xffffffff
    21ac:	ffffffff 	.word	0xffffffff
    21b0:	ffffffff 	.word	0xffffffff
    21b4:	ffffffff 	.word	0xffffffff
    21b8:	ffffffff 	.word	0xffffffff
    21bc:	ffffffff 	.word	0xffffffff
    21c0:	ffffffff 	.word	0xffffffff
    21c4:	ffffffff 	.word	0xffffffff
    21c8:	ffffffff 	.word	0xffffffff
    21cc:	ffffffff 	.word	0xffffffff
    21d0:	ffffffff 	.word	0xffffffff
    21d4:	ffffffff 	.word	0xffffffff
    21d8:	ffffffff 	.word	0xffffffff
    21dc:	ffffffff 	.word	0xffffffff
    21e0:	ffffffff 	.word	0xffffffff
    21e4:	ffffffff 	.word	0xffffffff
    21e8:	ffffffff 	.word	0xffffffff
    21ec:	ffffffff 	.word	0xffffffff
    21f0:	ffffffff 	.word	0xffffffff
    21f4:	ffffffff 	.word	0xffffffff
    21f8:	ffffffff 	.word	0xffffffff
    21fc:	ffffffff 	.word	0xffffffff
    2200:	ffffffff 	.word	0xffffffff
    2204:	ffffffff 	.word	0xffffffff
    2208:	ffffffff 	.word	0xffffffff
    220c:	ffffffff 	.word	0xffffffff
    2210:	ffffffff 	.word	0xffffffff
    2214:	ffffffff 	.word	0xffffffff
    2218:	ffffffff 	.word	0xffffffff
    221c:	ffffffff 	.word	0xffffffff
    2220:	ffffffff 	.word	0xffffffff
    2224:	ffffffff 	.word	0xffffffff
    2228:	ffffffff 	.word	0xffffffff
    222c:	ffffffff 	.word	0xffffffff
    2230:	ffffffff 	.word	0xffffffff
    2234:	ffffffff 	.word	0xffffffff
    2238:	ffffffff 	.word	0xffffffff
    223c:	ffffffff 	.word	0xffffffff
    2240:	ffffffff 	.word	0xffffffff
    2244:	ffffffff 	.word	0xffffffff
    2248:	ffffffff 	.word	0xffffffff
    224c:	ffffffff 	.word	0xffffffff
    2250:	ffffffff 	.word	0xffffffff
    2254:	ffffffff 	.word	0xffffffff
    2258:	ffffffff 	.word	0xffffffff
    225c:	ffffffff 	.word	0xffffffff
    2260:	ffffffff 	.word	0xffffffff
    2264:	ffffffff 	.word	0xffffffff
    2268:	ffffffff 	.word	0xffffffff
    226c:	ffffffff 	.word	0xffffffff
    2270:	ffffffff 	.word	0xffffffff
    2274:	ffffffff 	.word	0xffffffff
    2278:	ffffffff 	.word	0xffffffff
    227c:	ffffffff 	.word	0xffffffff
    2280:	ffffffff 	.word	0xffffffff
    2284:	ffffffff 	.word	0xffffffff
    2288:	ffffffff 	.word	0xffffffff
    228c:	ffffffff 	.word	0xffffffff
    2290:	ffffffff 	.word	0xffffffff
    2294:	ffffffff 	.word	0xffffffff
    2298:	ffffffff 	.word	0xffffffff
    229c:	ffffffff 	.word	0xffffffff
    22a0:	ffffffff 	.word	0xffffffff
    22a4:	ffffffff 	.word	0xffffffff
    22a8:	ffffffff 	.word	0xffffffff
    22ac:	ffffffff 	.word	0xffffffff
    22b0:	ffffffff 	.word	0xffffffff
    22b4:	ffffffff 	.word	0xffffffff
    22b8:	ffffffff 	.word	0xffffffff
    22bc:	ffffffff 	.word	0xffffffff
    22c0:	ffffffff 	.word	0xffffffff
    22c4:	ffffffff 	.word	0xffffffff
    22c8:	ffffffff 	.word	0xffffffff
    22cc:	ffffffff 	.word	0xffffffff
    22d0:	ffffffff 	.word	0xffffffff
    22d4:	ffffffff 	.word	0xffffffff
    22d8:	ffffffff 	.word	0xffffffff
    22dc:	ffffffff 	.word	0xffffffff
    22e0:	ffffffff 	.word	0xffffffff
    22e4:	ffffffff 	.word	0xffffffff
    22e8:	ffffffff 	.word	0xffffffff
    22ec:	ffffffff 	.word	0xffffffff
    22f0:	ffffffff 	.word	0xffffffff
    22f4:	ffffffff 	.word	0xffffffff
    22f8:	ffffffff 	.word	0xffffffff
    22fc:	ffffffff 	.word	0xffffffff
    2300:	ffffffff 	.word	0xffffffff
    2304:	ffffffff 	.word	0xffffffff
    2308:	ffffffff 	.word	0xffffffff
    230c:	ffffffff 	.word	0xffffffff
    2310:	ffffffff 	.word	0xffffffff
    2314:	ffffffff 	.word	0xffffffff
    2318:	ffffffff 	.word	0xffffffff
    231c:	ffffffff 	.word	0xffffffff
    2320:	ffffffff 	.word	0xffffffff
    2324:	ffffffff 	.word	0xffffffff
    2328:	ffffffff 	.word	0xffffffff
    232c:	ffffffff 	.word	0xffffffff
    2330:	ffffffff 	.word	0xffffffff
    2334:	ffffffff 	.word	0xffffffff
    2338:	ffffffff 	.word	0xffffffff
    233c:	ffffffff 	.word	0xffffffff
    2340:	ffffffff 	.word	0xffffffff
    2344:	ffffffff 	.word	0xffffffff
    2348:	ffffffff 	.word	0xffffffff
    234c:	ffffffff 	.word	0xffffffff
    2350:	ffffffff 	.word	0xffffffff
    2354:	ffffffff 	.word	0xffffffff
    2358:	ffffffff 	.word	0xffffffff
    235c:	ffffffff 	.word	0xffffffff
    2360:	ffffffff 	.word	0xffffffff
    2364:	ffffffff 	.word	0xffffffff
    2368:	ffffffff 	.word	0xffffffff
    236c:	ffffffff 	.word	0xffffffff
    2370:	ffffffff 	.word	0xffffffff
    2374:	ffffffff 	.word	0xffffffff
    2378:	ffffffff 	.word	0xffffffff
    237c:	ffffffff 	.word	0xffffffff
    2380:	ffffffff 	.word	0xffffffff
    2384:	ffffffff 	.word	0xffffffff
    2388:	ffffffff 	.word	0xffffffff
    238c:	ffffffff 	.word	0xffffffff
    2390:	ffffffff 	.word	0xffffffff
    2394:	ffffffff 	.word	0xffffffff
    2398:	ffffffff 	.word	0xffffffff
    239c:	ffffffff 	.word	0xffffffff
    23a0:	ffffffff 	.word	0xffffffff
    23a4:	ffffffff 	.word	0xffffffff
    23a8:	ffffffff 	.word	0xffffffff
    23ac:	ffffffff 	.word	0xffffffff
    23b0:	ffffffff 	.word	0xffffffff
    23b4:	ffffffff 	.word	0xffffffff
    23b8:	ffffffff 	.word	0xffffffff
    23bc:	ffffffff 	.word	0xffffffff
    23c0:	ffffffff 	.word	0xffffffff
    23c4:	ffffffff 	.word	0xffffffff
    23c8:	ffffffff 	.word	0xffffffff
    23cc:	ffffffff 	.word	0xffffffff
    23d0:	ffffffff 	.word	0xffffffff
    23d4:	ffffffff 	.word	0xffffffff
    23d8:	ffffffff 	.word	0xffffffff
    23dc:	ffffffff 	.word	0xffffffff
    23e0:	ffffffff 	.word	0xffffffff
    23e4:	ffffffff 	.word	0xffffffff
    23e8:	ffffffff 	.word	0xffffffff
    23ec:	ffffffff 	.word	0xffffffff
    23f0:	ffffffff 	.word	0xffffffff
    23f4:	ffffffff 	.word	0xffffffff
    23f8:	ffffffff 	.word	0xffffffff
    23fc:	ffffffff 	.word	0xffffffff
    2400:	ffffffff 	.word	0xffffffff
    2404:	ffffffff 	.word	0xffffffff
    2408:	ffffffff 	.word	0xffffffff
    240c:	ffffffff 	.word	0xffffffff
    2410:	ffffffff 	.word	0xffffffff
    2414:	ffffffff 	.word	0xffffffff
    2418:	ffffffff 	.word	0xffffffff
    241c:	ffffffff 	.word	0xffffffff
    2420:	ffffffff 	.word	0xffffffff
    2424:	ffffffff 	.word	0xffffffff
    2428:	ffffffff 	.word	0xffffffff
    242c:	ffffffff 	.word	0xffffffff
    2430:	ffffffff 	.word	0xffffffff
    2434:	ffffffff 	.word	0xffffffff
    2438:	ffffffff 	.word	0xffffffff
    243c:	ffffffff 	.word	0xffffffff
    2440:	ffffffff 	.word	0xffffffff
    2444:	ffffffff 	.word	0xffffffff
    2448:	ffffffff 	.word	0xffffffff
    244c:	ffffffff 	.word	0xffffffff
    2450:	ffffffff 	.word	0xffffffff
    2454:	ffffffff 	.word	0xffffffff
    2458:	ffffffff 	.word	0xffffffff
    245c:	ffffffff 	.word	0xffffffff
    2460:	ffffffff 	.word	0xffffffff
    2464:	ffffffff 	.word	0xffffffff
    2468:	ffffffff 	.word	0xffffffff
    246c:	ffffffff 	.word	0xffffffff
    2470:	ffffffff 	.word	0xffffffff
    2474:	ffffffff 	.word	0xffffffff
    2478:	ffffffff 	.word	0xffffffff
    247c:	ffffffff 	.word	0xffffffff
    2480:	ffffffff 	.word	0xffffffff
    2484:	ffffffff 	.word	0xffffffff
    2488:	ffffffff 	.word	0xffffffff
    248c:	ffffffff 	.word	0xffffffff
    2490:	ffffffff 	.word	0xffffffff
    2494:	ffffffff 	.word	0xffffffff
    2498:	ffffffff 	.word	0xffffffff
    249c:	ffffffff 	.word	0xffffffff
    24a0:	ffffffff 	.word	0xffffffff
    24a4:	ffffffff 	.word	0xffffffff
    24a8:	ffffffff 	.word	0xffffffff
    24ac:	ffffffff 	.word	0xffffffff
    24b0:	ffffffff 	.word	0xffffffff
    24b4:	ffffffff 	.word	0xffffffff
    24b8:	ffffffff 	.word	0xffffffff
    24bc:	ffffffff 	.word	0xffffffff
    24c0:	ffffffff 	.word	0xffffffff
    24c4:	ffffffff 	.word	0xffffffff
    24c8:	ffffffff 	.word	0xffffffff
    24cc:	ffffffff 	.word	0xffffffff
    24d0:	ffffffff 	.word	0xffffffff
    24d4:	ffffffff 	.word	0xffffffff
    24d8:	ffffffff 	.word	0xffffffff
    24dc:	ffffffff 	.word	0xffffffff
    24e0:	ffffffff 	.word	0xffffffff
    24e4:	ffffffff 	.word	0xffffffff
    24e8:	ffffffff 	.word	0xffffffff
    24ec:	ffffffff 	.word	0xffffffff
    24f0:	ffffffff 	.word	0xffffffff
    24f4:	ffffffff 	.word	0xffffffff
    24f8:	ffffffff 	.word	0xffffffff
    24fc:	ffffffff 	.word	0xffffffff
    2500:	ffffffff 	.word	0xffffffff
    2504:	ffffffff 	.word	0xffffffff
    2508:	ffffffff 	.word	0xffffffff
    250c:	ffffffff 	.word	0xffffffff
    2510:	ffffffff 	.word	0xffffffff
    2514:	ffffffff 	.word	0xffffffff
    2518:	ffffffff 	.word	0xffffffff
    251c:	ffffffff 	.word	0xffffffff
    2520:	ffffffff 	.word	0xffffffff
    2524:	ffffffff 	.word	0xffffffff
    2528:	ffffffff 	.word	0xffffffff
    252c:	ffffffff 	.word	0xffffffff
    2530:	ffffffff 	.word	0xffffffff
    2534:	ffffffff 	.word	0xffffffff
    2538:	ffffffff 	.word	0xffffffff
    253c:	ffffffff 	.word	0xffffffff
    2540:	ffffffff 	.word	0xffffffff
    2544:	ffffffff 	.word	0xffffffff
    2548:	ffffffff 	.word	0xffffffff
    254c:	ffffffff 	.word	0xffffffff
    2550:	ffffffff 	.word	0xffffffff
    2554:	ffffffff 	.word	0xffffffff
    2558:	ffffffff 	.word	0xffffffff
    255c:	ffffffff 	.word	0xffffffff
    2560:	ffffffff 	.word	0xffffffff
    2564:	ffffffff 	.word	0xffffffff
    2568:	ffffffff 	.word	0xffffffff
    256c:	ffffffff 	.word	0xffffffff
    2570:	ffffffff 	.word	0xffffffff
    2574:	ffffffff 	.word	0xffffffff
    2578:	ffffffff 	.word	0xffffffff
    257c:	ffffffff 	.word	0xffffffff
    2580:	ffffffff 	.word	0xffffffff
    2584:	ffffffff 	.word	0xffffffff
    2588:	ffffffff 	.word	0xffffffff
    258c:	ffffffff 	.word	0xffffffff
    2590:	ffffffff 	.word	0xffffffff
    2594:	ffffffff 	.word	0xffffffff
    2598:	ffffffff 	.word	0xffffffff
    259c:	ffffffff 	.word	0xffffffff
    25a0:	ffffffff 	.word	0xffffffff
    25a4:	ffffffff 	.word	0xffffffff
    25a8:	ffffffff 	.word	0xffffffff
    25ac:	ffffffff 	.word	0xffffffff
    25b0:	ffffffff 	.word	0xffffffff
    25b4:	ffffffff 	.word	0xffffffff
    25b8:	ffffffff 	.word	0xffffffff
    25bc:	ffffffff 	.word	0xffffffff
    25c0:	ffffffff 	.word	0xffffffff
    25c4:	ffffffff 	.word	0xffffffff
    25c8:	ffffffff 	.word	0xffffffff
    25cc:	ffffffff 	.word	0xffffffff
    25d0:	ffffffff 	.word	0xffffffff
    25d4:	ffffffff 	.word	0xffffffff
    25d8:	ffffffff 	.word	0xffffffff
    25dc:	ffffffff 	.word	0xffffffff
    25e0:	ffffffff 	.word	0xffffffff
    25e4:	ffffffff 	.word	0xffffffff
    25e8:	ffffffff 	.word	0xffffffff
    25ec:	ffffffff 	.word	0xffffffff
    25f0:	ffffffff 	.word	0xffffffff
    25f4:	ffffffff 	.word	0xffffffff
    25f8:	ffffffff 	.word	0xffffffff
    25fc:	ffffffff 	.word	0xffffffff
    2600:	ffffffff 	.word	0xffffffff
    2604:	ffffffff 	.word	0xffffffff
    2608:	ffffffff 	.word	0xffffffff
    260c:	ffffffff 	.word	0xffffffff
    2610:	ffffffff 	.word	0xffffffff
    2614:	ffffffff 	.word	0xffffffff
    2618:	ffffffff 	.word	0xffffffff
    261c:	ffffffff 	.word	0xffffffff
    2620:	ffffffff 	.word	0xffffffff
    2624:	ffffffff 	.word	0xffffffff
    2628:	ffffffff 	.word	0xffffffff
    262c:	ffffffff 	.word	0xffffffff
    2630:	ffffffff 	.word	0xffffffff
    2634:	ffffffff 	.word	0xffffffff
    2638:	ffffffff 	.word	0xffffffff
    263c:	ffffffff 	.word	0xffffffff
    2640:	ffffffff 	.word	0xffffffff
    2644:	ffffffff 	.word	0xffffffff
    2648:	ffffffff 	.word	0xffffffff
    264c:	ffffffff 	.word	0xffffffff
    2650:	ffffffff 	.word	0xffffffff
    2654:	ffffffff 	.word	0xffffffff
    2658:	ffffffff 	.word	0xffffffff
    265c:	ffffffff 	.word	0xffffffff
    2660:	ffffffff 	.word	0xffffffff
    2664:	ffffffff 	.word	0xffffffff
    2668:	ffffffff 	.word	0xffffffff
    266c:	ffffffff 	.word	0xffffffff
    2670:	ffffffff 	.word	0xffffffff
    2674:	ffffffff 	.word	0xffffffff
    2678:	ffffffff 	.word	0xffffffff
    267c:	ffffffff 	.word	0xffffffff
    2680:	ffffffff 	.word	0xffffffff
    2684:	ffffffff 	.word	0xffffffff
    2688:	ffffffff 	.word	0xffffffff
    268c:	ffffffff 	.word	0xffffffff
    2690:	ffffffff 	.word	0xffffffff
    2694:	ffffffff 	.word	0xffffffff
    2698:	ffffffff 	.word	0xffffffff
    269c:	ffffffff 	.word	0xffffffff
    26a0:	ffffffff 	.word	0xffffffff
    26a4:	ffffffff 	.word	0xffffffff
    26a8:	ffffffff 	.word	0xffffffff
    26ac:	ffffffff 	.word	0xffffffff
    26b0:	ffffffff 	.word	0xffffffff
    26b4:	ffffffff 	.word	0xffffffff
    26b8:	ffffffff 	.word	0xffffffff
    26bc:	ffffffff 	.word	0xffffffff
    26c0:	ffffffff 	.word	0xffffffff
    26c4:	ffffffff 	.word	0xffffffff
    26c8:	ffffffff 	.word	0xffffffff
    26cc:	ffffffff 	.word	0xffffffff
    26d0:	ffffffff 	.word	0xffffffff
    26d4:	ffffffff 	.word	0xffffffff
    26d8:	ffffffff 	.word	0xffffffff
    26dc:	ffffffff 	.word	0xffffffff
    26e0:	ffffffff 	.word	0xffffffff
    26e4:	ffffffff 	.word	0xffffffff
    26e8:	ffffffff 	.word	0xffffffff
    26ec:	ffffffff 	.word	0xffffffff
    26f0:	ffffffff 	.word	0xffffffff
    26f4:	ffffffff 	.word	0xffffffff
    26f8:	ffffffff 	.word	0xffffffff
    26fc:	ffffffff 	.word	0xffffffff
    2700:	ffffffff 	.word	0xffffffff
    2704:	ffffffff 	.word	0xffffffff
    2708:	ffffffff 	.word	0xffffffff
    270c:	ffffffff 	.word	0xffffffff
    2710:	ffffffff 	.word	0xffffffff
    2714:	ffffffff 	.word	0xffffffff
    2718:	ffffffff 	.word	0xffffffff
    271c:	ffffffff 	.word	0xffffffff
    2720:	ffffffff 	.word	0xffffffff
    2724:	ffffffff 	.word	0xffffffff
    2728:	ffffffff 	.word	0xffffffff
    272c:	ffffffff 	.word	0xffffffff
    2730:	ffffffff 	.word	0xffffffff
    2734:	ffffffff 	.word	0xffffffff
    2738:	ffffffff 	.word	0xffffffff
    273c:	ffffffff 	.word	0xffffffff
    2740:	ffffffff 	.word	0xffffffff
    2744:	ffffffff 	.word	0xffffffff
    2748:	ffffffff 	.word	0xffffffff
    274c:	ffffffff 	.word	0xffffffff
    2750:	ffffffff 	.word	0xffffffff
    2754:	ffffffff 	.word	0xffffffff
    2758:	ffffffff 	.word	0xffffffff
    275c:	ffffffff 	.word	0xffffffff
    2760:	ffffffff 	.word	0xffffffff
    2764:	ffffffff 	.word	0xffffffff
    2768:	ffffffff 	.word	0xffffffff
    276c:	ffffffff 	.word	0xffffffff
    2770:	ffffffff 	.word	0xffffffff
    2774:	ffffffff 	.word	0xffffffff
    2778:	ffffffff 	.word	0xffffffff
    277c:	ffffffff 	.word	0xffffffff
    2780:	ffffffff 	.word	0xffffffff
    2784:	ffffffff 	.word	0xffffffff
    2788:	ffffffff 	.word	0xffffffff
    278c:	ffffffff 	.word	0xffffffff
    2790:	ffffffff 	.word	0xffffffff
    2794:	ffffffff 	.word	0xffffffff
    2798:	ffffffff 	.word	0xffffffff
    279c:	ffffffff 	.word	0xffffffff
    27a0:	ffffffff 	.word	0xffffffff
    27a4:	ffffffff 	.word	0xffffffff
    27a8:	ffffffff 	.word	0xffffffff
    27ac:	ffffffff 	.word	0xffffffff
    27b0:	ffffffff 	.word	0xffffffff
    27b4:	ffffffff 	.word	0xffffffff
    27b8:	ffffffff 	.word	0xffffffff
    27bc:	ffffffff 	.word	0xffffffff
    27c0:	ffffffff 	.word	0xffffffff
    27c4:	ffffffff 	.word	0xffffffff
    27c8:	ffffffff 	.word	0xffffffff
    27cc:	ffffffff 	.word	0xffffffff
    27d0:	ffffffff 	.word	0xffffffff
    27d4:	ffffffff 	.word	0xffffffff
    27d8:	ffffffff 	.word	0xffffffff
    27dc:	ffffffff 	.word	0xffffffff
    27e0:	ffffffff 	.word	0xffffffff
    27e4:	ffffffff 	.word	0xffffffff
    27e8:	ffffffff 	.word	0xffffffff
    27ec:	ffffffff 	.word	0xffffffff
    27f0:	ffffffff 	.word	0xffffffff
    27f4:	ffffffff 	.word	0xffffffff
    27f8:	ffffffff 	.word	0xffffffff
    27fc:	ffffffff 	.word	0xffffffff
    2800:	ffffffff 	.word	0xffffffff
    2804:	ffffffff 	.word	0xffffffff
    2808:	ffffffff 	.word	0xffffffff
    280c:	ffffffff 	.word	0xffffffff
    2810:	ffffffff 	.word	0xffffffff
    2814:	ffffffff 	.word	0xffffffff
    2818:	ffffffff 	.word	0xffffffff
    281c:	ffffffff 	.word	0xffffffff
    2820:	ffffffff 	.word	0xffffffff
    2824:	ffffffff 	.word	0xffffffff
    2828:	ffffffff 	.word	0xffffffff
    282c:	ffffffff 	.word	0xffffffff
    2830:	ffffffff 	.word	0xffffffff
    2834:	ffffffff 	.word	0xffffffff
    2838:	ffffffff 	.word	0xffffffff
    283c:	ffffffff 	.word	0xffffffff
    2840:	ffffffff 	.word	0xffffffff
    2844:	ffffffff 	.word	0xffffffff
    2848:	ffffffff 	.word	0xffffffff
    284c:	ffffffff 	.word	0xffffffff
    2850:	ffffffff 	.word	0xffffffff
    2854:	ffffffff 	.word	0xffffffff
    2858:	ffffffff 	.word	0xffffffff
    285c:	ffffffff 	.word	0xffffffff
    2860:	ffffffff 	.word	0xffffffff
    2864:	ffffffff 	.word	0xffffffff
    2868:	ffffffff 	.word	0xffffffff
    286c:	ffffffff 	.word	0xffffffff
    2870:	ffffffff 	.word	0xffffffff
    2874:	ffffffff 	.word	0xffffffff
    2878:	ffffffff 	.word	0xffffffff
    287c:	ffffffff 	.word	0xffffffff
    2880:	ffffffff 	.word	0xffffffff
    2884:	ffffffff 	.word	0xffffffff
    2888:	ffffffff 	.word	0xffffffff
    288c:	ffffffff 	.word	0xffffffff
    2890:	ffffffff 	.word	0xffffffff
    2894:	ffffffff 	.word	0xffffffff
    2898:	ffffffff 	.word	0xffffffff
    289c:	ffffffff 	.word	0xffffffff
    28a0:	ffffffff 	.word	0xffffffff
    28a4:	ffffffff 	.word	0xffffffff
    28a8:	ffffffff 	.word	0xffffffff
    28ac:	ffffffff 	.word	0xffffffff
    28b0:	ffffffff 	.word	0xffffffff
    28b4:	ffffffff 	.word	0xffffffff
    28b8:	ffffffff 	.word	0xffffffff
    28bc:	ffffffff 	.word	0xffffffff
    28c0:	ffffffff 	.word	0xffffffff
    28c4:	ffffffff 	.word	0xffffffff
    28c8:	ffffffff 	.word	0xffffffff
    28cc:	ffffffff 	.word	0xffffffff
    28d0:	ffffffff 	.word	0xffffffff
    28d4:	ffffffff 	.word	0xffffffff
    28d8:	ffffffff 	.word	0xffffffff
    28dc:	ffffffff 	.word	0xffffffff
    28e0:	ffffffff 	.word	0xffffffff
    28e4:	ffffffff 	.word	0xffffffff
    28e8:	ffffffff 	.word	0xffffffff
    28ec:	ffffffff 	.word	0xffffffff
    28f0:	ffffffff 	.word	0xffffffff
    28f4:	ffffffff 	.word	0xffffffff
    28f8:	ffffffff 	.word	0xffffffff
    28fc:	ffffffff 	.word	0xffffffff
    2900:	ffffffff 	.word	0xffffffff
    2904:	ffffffff 	.word	0xffffffff
    2908:	ffffffff 	.word	0xffffffff
    290c:	ffffffff 	.word	0xffffffff
    2910:	ffffffff 	.word	0xffffffff
    2914:	ffffffff 	.word	0xffffffff
    2918:	ffffffff 	.word	0xffffffff
    291c:	ffffffff 	.word	0xffffffff
    2920:	ffffffff 	.word	0xffffffff
    2924:	ffffffff 	.word	0xffffffff
    2928:	ffffffff 	.word	0xffffffff
    292c:	ffffffff 	.word	0xffffffff
    2930:	ffffffff 	.word	0xffffffff
    2934:	ffffffff 	.word	0xffffffff
    2938:	ffffffff 	.word	0xffffffff
    293c:	ffffffff 	.word	0xffffffff
    2940:	ffffffff 	.word	0xffffffff
    2944:	ffffffff 	.word	0xffffffff
    2948:	ffffffff 	.word	0xffffffff
    294c:	ffffffff 	.word	0xffffffff
    2950:	ffffffff 	.word	0xffffffff
    2954:	ffffffff 	.word	0xffffffff
    2958:	ffffffff 	.word	0xffffffff
    295c:	ffffffff 	.word	0xffffffff
    2960:	ffffffff 	.word	0xffffffff
    2964:	ffffffff 	.word	0xffffffff
    2968:	ffffffff 	.word	0xffffffff
    296c:	ffffffff 	.word	0xffffffff
    2970:	ffffffff 	.word	0xffffffff
    2974:	ffffffff 	.word	0xffffffff
    2978:	ffffffff 	.word	0xffffffff
    297c:	ffffffff 	.word	0xffffffff
    2980:	ffffffff 	.word	0xffffffff
    2984:	ffffffff 	.word	0xffffffff
    2988:	ffffffff 	.word	0xffffffff
    298c:	ffffffff 	.word	0xffffffff
    2990:	ffffffff 	.word	0xffffffff
    2994:	ffffffff 	.word	0xffffffff
    2998:	ffffffff 	.word	0xffffffff
    299c:	ffffffff 	.word	0xffffffff
    29a0:	ffffffff 	.word	0xffffffff
    29a4:	ffffffff 	.word	0xffffffff
    29a8:	ffffffff 	.word	0xffffffff
    29ac:	ffffffff 	.word	0xffffffff
    29b0:	ffffffff 	.word	0xffffffff
    29b4:	ffffffff 	.word	0xffffffff
    29b8:	ffffffff 	.word	0xffffffff
    29bc:	ffffffff 	.word	0xffffffff
    29c0:	ffffffff 	.word	0xffffffff
    29c4:	ffffffff 	.word	0xffffffff
    29c8:	ffffffff 	.word	0xffffffff
    29cc:	ffffffff 	.word	0xffffffff
    29d0:	ffffffff 	.word	0xffffffff
    29d4:	ffffffff 	.word	0xffffffff
    29d8:	ffffffff 	.word	0xffffffff
    29dc:	ffffffff 	.word	0xffffffff
    29e0:	ffffffff 	.word	0xffffffff
    29e4:	ffffffff 	.word	0xffffffff
    29e8:	ffffffff 	.word	0xffffffff
    29ec:	ffffffff 	.word	0xffffffff
    29f0:	ffffffff 	.word	0xffffffff
    29f4:	ffffffff 	.word	0xffffffff
    29f8:	ffffffff 	.word	0xffffffff
    29fc:	ffffffff 	.word	0xffffffff
    2a00:	ffffffff 	.word	0xffffffff
    2a04:	ffffffff 	.word	0xffffffff
    2a08:	ffffffff 	.word	0xffffffff
    2a0c:	ffffffff 	.word	0xffffffff
    2a10:	ffffffff 	.word	0xffffffff
    2a14:	ffffffff 	.word	0xffffffff
    2a18:	ffffffff 	.word	0xffffffff
    2a1c:	ffffffff 	.word	0xffffffff
    2a20:	ffffffff 	.word	0xffffffff
    2a24:	ffffffff 	.word	0xffffffff
    2a28:	ffffffff 	.word	0xffffffff
    2a2c:	ffffffff 	.word	0xffffffff
    2a30:	ffffffff 	.word	0xffffffff
    2a34:	ffffffff 	.word	0xffffffff
    2a38:	ffffffff 	.word	0xffffffff
    2a3c:	ffffffff 	.word	0xffffffff
    2a40:	ffffffff 	.word	0xffffffff
    2a44:	ffffffff 	.word	0xffffffff
    2a48:	ffffffff 	.word	0xffffffff
    2a4c:	ffffffff 	.word	0xffffffff
    2a50:	ffffffff 	.word	0xffffffff
    2a54:	ffffffff 	.word	0xffffffff
    2a58:	ffffffff 	.word	0xffffffff
    2a5c:	ffffffff 	.word	0xffffffff
    2a60:	ffffffff 	.word	0xffffffff
    2a64:	ffffffff 	.word	0xffffffff
    2a68:	ffffffff 	.word	0xffffffff
    2a6c:	ffffffff 	.word	0xffffffff
    2a70:	ffffffff 	.word	0xffffffff
    2a74:	ffffffff 	.word	0xffffffff
    2a78:	ffffffff 	.word	0xffffffff
    2a7c:	ffffffff 	.word	0xffffffff
    2a80:	ffffffff 	.word	0xffffffff
    2a84:	ffffffff 	.word	0xffffffff
    2a88:	ffffffff 	.word	0xffffffff
    2a8c:	ffffffff 	.word	0xffffffff
    2a90:	ffffffff 	.word	0xffffffff
    2a94:	ffffffff 	.word	0xffffffff
    2a98:	ffffffff 	.word	0xffffffff
    2a9c:	ffffffff 	.word	0xffffffff
    2aa0:	ffffffff 	.word	0xffffffff
    2aa4:	ffffffff 	.word	0xffffffff
    2aa8:	ffffffff 	.word	0xffffffff
    2aac:	ffffffff 	.word	0xffffffff
    2ab0:	ffffffff 	.word	0xffffffff
    2ab4:	ffffffff 	.word	0xffffffff
    2ab8:	ffffffff 	.word	0xffffffff
    2abc:	ffffffff 	.word	0xffffffff
    2ac0:	ffffffff 	.word	0xffffffff
    2ac4:	ffffffff 	.word	0xffffffff
    2ac8:	ffffffff 	.word	0xffffffff
    2acc:	ffffffff 	.word	0xffffffff
    2ad0:	ffffffff 	.word	0xffffffff
    2ad4:	ffffffff 	.word	0xffffffff
    2ad8:	ffffffff 	.word	0xffffffff
    2adc:	ffffffff 	.word	0xffffffff
    2ae0:	ffffffff 	.word	0xffffffff
    2ae4:	ffffffff 	.word	0xffffffff
    2ae8:	ffffffff 	.word	0xffffffff
    2aec:	ffffffff 	.word	0xffffffff
    2af0:	ffffffff 	.word	0xffffffff
    2af4:	ffffffff 	.word	0xffffffff
    2af8:	ffffffff 	.word	0xffffffff
    2afc:	ffffffff 	.word	0xffffffff
    2b00:	ffffffff 	.word	0xffffffff
    2b04:	ffffffff 	.word	0xffffffff
    2b08:	ffffffff 	.word	0xffffffff
    2b0c:	ffffffff 	.word	0xffffffff
    2b10:	ffffffff 	.word	0xffffffff
    2b14:	ffffffff 	.word	0xffffffff
    2b18:	ffffffff 	.word	0xffffffff
    2b1c:	ffffffff 	.word	0xffffffff
    2b20:	ffffffff 	.word	0xffffffff
    2b24:	ffffffff 	.word	0xffffffff
    2b28:	ffffffff 	.word	0xffffffff
    2b2c:	ffffffff 	.word	0xffffffff
    2b30:	ffffffff 	.word	0xffffffff
    2b34:	ffffffff 	.word	0xffffffff
    2b38:	ffffffff 	.word	0xffffffff
    2b3c:	ffffffff 	.word	0xffffffff
    2b40:	ffffffff 	.word	0xffffffff
    2b44:	ffffffff 	.word	0xffffffff
    2b48:	ffffffff 	.word	0xffffffff
    2b4c:	ffffffff 	.word	0xffffffff
    2b50:	ffffffff 	.word	0xffffffff
    2b54:	ffffffff 	.word	0xffffffff
    2b58:	ffffffff 	.word	0xffffffff
    2b5c:	ffffffff 	.word	0xffffffff
    2b60:	ffffffff 	.word	0xffffffff
    2b64:	ffffffff 	.word	0xffffffff
    2b68:	ffffffff 	.word	0xffffffff
    2b6c:	ffffffff 	.word	0xffffffff
    2b70:	ffffffff 	.word	0xffffffff
    2b74:	ffffffff 	.word	0xffffffff
    2b78:	ffffffff 	.word	0xffffffff
    2b7c:	ffffffff 	.word	0xffffffff
    2b80:	ffffffff 	.word	0xffffffff
    2b84:	ffffffff 	.word	0xffffffff
    2b88:	ffffffff 	.word	0xffffffff
    2b8c:	ffffffff 	.word	0xffffffff
    2b90:	ffffffff 	.word	0xffffffff
    2b94:	ffffffff 	.word	0xffffffff
    2b98:	ffffffff 	.word	0xffffffff
    2b9c:	ffffffff 	.word	0xffffffff
    2ba0:	ffffffff 	.word	0xffffffff
    2ba4:	ffffffff 	.word	0xffffffff
    2ba8:	ffffffff 	.word	0xffffffff
    2bac:	ffffffff 	.word	0xffffffff
    2bb0:	ffffffff 	.word	0xffffffff
    2bb4:	ffffffff 	.word	0xffffffff
    2bb8:	ffffffff 	.word	0xffffffff
    2bbc:	ffffffff 	.word	0xffffffff
    2bc0:	ffffffff 	.word	0xffffffff
    2bc4:	ffffffff 	.word	0xffffffff
    2bc8:	ffffffff 	.word	0xffffffff
    2bcc:	ffffffff 	.word	0xffffffff
    2bd0:	ffffffff 	.word	0xffffffff
    2bd4:	ffffffff 	.word	0xffffffff
    2bd8:	ffffffff 	.word	0xffffffff
    2bdc:	ffffffff 	.word	0xffffffff
    2be0:	ffffffff 	.word	0xffffffff
    2be4:	ffffffff 	.word	0xffffffff
    2be8:	ffffffff 	.word	0xffffffff
    2bec:	ffffffff 	.word	0xffffffff
    2bf0:	ffffffff 	.word	0xffffffff
    2bf4:	ffffffff 	.word	0xffffffff
    2bf8:	ffffffff 	.word	0xffffffff
    2bfc:	ffffffff 	.word	0xffffffff
    2c00:	ffffffff 	.word	0xffffffff
    2c04:	ffffffff 	.word	0xffffffff
    2c08:	ffffffff 	.word	0xffffffff
    2c0c:	ffffffff 	.word	0xffffffff
    2c10:	ffffffff 	.word	0xffffffff
    2c14:	ffffffff 	.word	0xffffffff
    2c18:	ffffffff 	.word	0xffffffff
    2c1c:	ffffffff 	.word	0xffffffff
    2c20:	ffffffff 	.word	0xffffffff
    2c24:	ffffffff 	.word	0xffffffff
    2c28:	ffffffff 	.word	0xffffffff
    2c2c:	ffffffff 	.word	0xffffffff
    2c30:	ffffffff 	.word	0xffffffff
    2c34:	ffffffff 	.word	0xffffffff
    2c38:	ffffffff 	.word	0xffffffff
    2c3c:	ffffffff 	.word	0xffffffff
    2c40:	ffffffff 	.word	0xffffffff
    2c44:	ffffffff 	.word	0xffffffff
    2c48:	ffffffff 	.word	0xffffffff
    2c4c:	ffffffff 	.word	0xffffffff
    2c50:	ffffffff 	.word	0xffffffff
    2c54:	ffffffff 	.word	0xffffffff
    2c58:	ffffffff 	.word	0xffffffff
    2c5c:	ffffffff 	.word	0xffffffff
    2c60:	ffffffff 	.word	0xffffffff
    2c64:	ffffffff 	.word	0xffffffff
    2c68:	ffffffff 	.word	0xffffffff
    2c6c:	ffffffff 	.word	0xffffffff
    2c70:	ffffffff 	.word	0xffffffff
    2c74:	ffffffff 	.word	0xffffffff
    2c78:	ffffffff 	.word	0xffffffff
    2c7c:	ffffffff 	.word	0xffffffff
    2c80:	ffffffff 	.word	0xffffffff
    2c84:	ffffffff 	.word	0xffffffff
    2c88:	ffffffff 	.word	0xffffffff
    2c8c:	ffffffff 	.word	0xffffffff
    2c90:	ffffffff 	.word	0xffffffff
    2c94:	ffffffff 	.word	0xffffffff
    2c98:	ffffffff 	.word	0xffffffff
    2c9c:	ffffffff 	.word	0xffffffff
    2ca0:	ffffffff 	.word	0xffffffff
    2ca4:	ffffffff 	.word	0xffffffff
    2ca8:	ffffffff 	.word	0xffffffff
    2cac:	ffffffff 	.word	0xffffffff
    2cb0:	ffffffff 	.word	0xffffffff
    2cb4:	ffffffff 	.word	0xffffffff
    2cb8:	ffffffff 	.word	0xffffffff
    2cbc:	ffffffff 	.word	0xffffffff
    2cc0:	ffffffff 	.word	0xffffffff
    2cc4:	ffffffff 	.word	0xffffffff
    2cc8:	ffffffff 	.word	0xffffffff
    2ccc:	ffffffff 	.word	0xffffffff
    2cd0:	ffffffff 	.word	0xffffffff
    2cd4:	ffffffff 	.word	0xffffffff
    2cd8:	ffffffff 	.word	0xffffffff
    2cdc:	ffffffff 	.word	0xffffffff
    2ce0:	ffffffff 	.word	0xffffffff
    2ce4:	ffffffff 	.word	0xffffffff
    2ce8:	ffffffff 	.word	0xffffffff
    2cec:	ffffffff 	.word	0xffffffff
    2cf0:	ffffffff 	.word	0xffffffff
    2cf4:	ffffffff 	.word	0xffffffff
    2cf8:	ffffffff 	.word	0xffffffff
    2cfc:	ffffffff 	.word	0xffffffff
    2d00:	ffffffff 	.word	0xffffffff
    2d04:	ffffffff 	.word	0xffffffff
    2d08:	ffffffff 	.word	0xffffffff
    2d0c:	ffffffff 	.word	0xffffffff
    2d10:	ffffffff 	.word	0xffffffff
    2d14:	ffffffff 	.word	0xffffffff
    2d18:	ffffffff 	.word	0xffffffff
    2d1c:	ffffffff 	.word	0xffffffff
    2d20:	ffffffff 	.word	0xffffffff
    2d24:	ffffffff 	.word	0xffffffff
    2d28:	ffffffff 	.word	0xffffffff
    2d2c:	ffffffff 	.word	0xffffffff
    2d30:	ffffffff 	.word	0xffffffff
    2d34:	ffffffff 	.word	0xffffffff
    2d38:	ffffffff 	.word	0xffffffff
    2d3c:	ffffffff 	.word	0xffffffff
    2d40:	ffffffff 	.word	0xffffffff
    2d44:	ffffffff 	.word	0xffffffff
    2d48:	ffffffff 	.word	0xffffffff
    2d4c:	ffffffff 	.word	0xffffffff
    2d50:	ffffffff 	.word	0xffffffff
    2d54:	ffffffff 	.word	0xffffffff
    2d58:	ffffffff 	.word	0xffffffff
    2d5c:	ffffffff 	.word	0xffffffff
    2d60:	ffffffff 	.word	0xffffffff
    2d64:	ffffffff 	.word	0xffffffff
    2d68:	ffffffff 	.word	0xffffffff
    2d6c:	ffffffff 	.word	0xffffffff
    2d70:	ffffffff 	.word	0xffffffff
    2d74:	ffffffff 	.word	0xffffffff
    2d78:	ffffffff 	.word	0xffffffff
    2d7c:	ffffffff 	.word	0xffffffff
    2d80:	ffffffff 	.word	0xffffffff
    2d84:	ffffffff 	.word	0xffffffff
    2d88:	ffffffff 	.word	0xffffffff
    2d8c:	ffffffff 	.word	0xffffffff
    2d90:	ffffffff 	.word	0xffffffff
    2d94:	ffffffff 	.word	0xffffffff
    2d98:	ffffffff 	.word	0xffffffff
    2d9c:	ffffffff 	.word	0xffffffff
    2da0:	ffffffff 	.word	0xffffffff
    2da4:	ffffffff 	.word	0xffffffff
    2da8:	ffffffff 	.word	0xffffffff
    2dac:	ffffffff 	.word	0xffffffff
    2db0:	ffffffff 	.word	0xffffffff
    2db4:	ffffffff 	.word	0xffffffff
    2db8:	ffffffff 	.word	0xffffffff
    2dbc:	ffffffff 	.word	0xffffffff
    2dc0:	ffffffff 	.word	0xffffffff
    2dc4:	ffffffff 	.word	0xffffffff
    2dc8:	ffffffff 	.word	0xffffffff
    2dcc:	ffffffff 	.word	0xffffffff
    2dd0:	ffffffff 	.word	0xffffffff
    2dd4:	ffffffff 	.word	0xffffffff
    2dd8:	ffffffff 	.word	0xffffffff
    2ddc:	ffffffff 	.word	0xffffffff
    2de0:	ffffffff 	.word	0xffffffff
    2de4:	ffffffff 	.word	0xffffffff
    2de8:	ffffffff 	.word	0xffffffff
    2dec:	ffffffff 	.word	0xffffffff
    2df0:	ffffffff 	.word	0xffffffff
    2df4:	ffffffff 	.word	0xffffffff
    2df8:	ffffffff 	.word	0xffffffff
    2dfc:	ffffffff 	.word	0xffffffff
    2e00:	ffffffff 	.word	0xffffffff
    2e04:	ffffffff 	.word	0xffffffff
    2e08:	ffffffff 	.word	0xffffffff
    2e0c:	ffffffff 	.word	0xffffffff
    2e10:	ffffffff 	.word	0xffffffff
    2e14:	ffffffff 	.word	0xffffffff
    2e18:	ffffffff 	.word	0xffffffff
    2e1c:	ffffffff 	.word	0xffffffff
    2e20:	ffffffff 	.word	0xffffffff
    2e24:	ffffffff 	.word	0xffffffff
    2e28:	ffffffff 	.word	0xffffffff
    2e2c:	ffffffff 	.word	0xffffffff
    2e30:	ffffffff 	.word	0xffffffff
    2e34:	ffffffff 	.word	0xffffffff
    2e38:	ffffffff 	.word	0xffffffff
    2e3c:	ffffffff 	.word	0xffffffff
    2e40:	ffffffff 	.word	0xffffffff
    2e44:	ffffffff 	.word	0xffffffff
    2e48:	ffffffff 	.word	0xffffffff
    2e4c:	ffffffff 	.word	0xffffffff
    2e50:	ffffffff 	.word	0xffffffff
    2e54:	ffffffff 	.word	0xffffffff
    2e58:	ffffffff 	.word	0xffffffff
    2e5c:	ffffffff 	.word	0xffffffff
    2e60:	ffffffff 	.word	0xffffffff
    2e64:	ffffffff 	.word	0xffffffff
    2e68:	ffffffff 	.word	0xffffffff
    2e6c:	ffffffff 	.word	0xffffffff
    2e70:	ffffffff 	.word	0xffffffff
    2e74:	ffffffff 	.word	0xffffffff
    2e78:	ffffffff 	.word	0xffffffff
    2e7c:	ffffffff 	.word	0xffffffff
    2e80:	ffffffff 	.word	0xffffffff
    2e84:	ffffffff 	.word	0xffffffff
    2e88:	ffffffff 	.word	0xffffffff
    2e8c:	ffffffff 	.word	0xffffffff
    2e90:	ffffffff 	.word	0xffffffff
    2e94:	ffffffff 	.word	0xffffffff
    2e98:	ffffffff 	.word	0xffffffff
    2e9c:	ffffffff 	.word	0xffffffff
    2ea0:	ffffffff 	.word	0xffffffff
    2ea4:	ffffffff 	.word	0xffffffff
    2ea8:	ffffffff 	.word	0xffffffff
    2eac:	ffffffff 	.word	0xffffffff
    2eb0:	ffffffff 	.word	0xffffffff
    2eb4:	ffffffff 	.word	0xffffffff
    2eb8:	ffffffff 	.word	0xffffffff
    2ebc:	ffffffff 	.word	0xffffffff
    2ec0:	ffffffff 	.word	0xffffffff
    2ec4:	ffffffff 	.word	0xffffffff
    2ec8:	ffffffff 	.word	0xffffffff
    2ecc:	ffffffff 	.word	0xffffffff
    2ed0:	ffffffff 	.word	0xffffffff
    2ed4:	ffffffff 	.word	0xffffffff
    2ed8:	ffffffff 	.word	0xffffffff
    2edc:	ffffffff 	.word	0xffffffff
    2ee0:	ffffffff 	.word	0xffffffff
    2ee4:	ffffffff 	.word	0xffffffff
    2ee8:	ffffffff 	.word	0xffffffff
    2eec:	ffffffff 	.word	0xffffffff
    2ef0:	ffffffff 	.word	0xffffffff
    2ef4:	ffffffff 	.word	0xffffffff
    2ef8:	ffffffff 	.word	0xffffffff
    2efc:	ffffffff 	.word	0xffffffff
    2f00:	ffffffff 	.word	0xffffffff
    2f04:	ffffffff 	.word	0xffffffff
    2f08:	ffffffff 	.word	0xffffffff
    2f0c:	ffffffff 	.word	0xffffffff
    2f10:	ffffffff 	.word	0xffffffff
    2f14:	ffffffff 	.word	0xffffffff
    2f18:	ffffffff 	.word	0xffffffff
    2f1c:	ffffffff 	.word	0xffffffff
    2f20:	ffffffff 	.word	0xffffffff
    2f24:	ffffffff 	.word	0xffffffff
    2f28:	ffffffff 	.word	0xffffffff
    2f2c:	ffffffff 	.word	0xffffffff
    2f30:	ffffffff 	.word	0xffffffff
    2f34:	ffffffff 	.word	0xffffffff
    2f38:	ffffffff 	.word	0xffffffff
    2f3c:	ffffffff 	.word	0xffffffff
    2f40:	ffffffff 	.word	0xffffffff
    2f44:	ffffffff 	.word	0xffffffff
    2f48:	ffffffff 	.word	0xffffffff
    2f4c:	ffffffff 	.word	0xffffffff
    2f50:	ffffffff 	.word	0xffffffff
    2f54:	ffffffff 	.word	0xffffffff
    2f58:	ffffffff 	.word	0xffffffff
    2f5c:	ffffffff 	.word	0xffffffff
    2f60:	ffffffff 	.word	0xffffffff
    2f64:	ffffffff 	.word	0xffffffff
    2f68:	ffffffff 	.word	0xffffffff
    2f6c:	ffffffff 	.word	0xffffffff
    2f70:	ffffffff 	.word	0xffffffff
    2f74:	ffffffff 	.word	0xffffffff
    2f78:	ffffffff 	.word	0xffffffff
    2f7c:	ffffffff 	.word	0xffffffff
    2f80:	ffffffff 	.word	0xffffffff
    2f84:	ffffffff 	.word	0xffffffff
    2f88:	ffffffff 	.word	0xffffffff
    2f8c:	ffffffff 	.word	0xffffffff
    2f90:	ffffffff 	.word	0xffffffff
    2f94:	ffffffff 	.word	0xffffffff
    2f98:	ffffffff 	.word	0xffffffff
    2f9c:	ffffffff 	.word	0xffffffff
    2fa0:	ffffffff 	.word	0xffffffff
    2fa4:	ffffffff 	.word	0xffffffff
    2fa8:	ffffffff 	.word	0xffffffff
    2fac:	ffffffff 	.word	0xffffffff
    2fb0:	ffffffff 	.word	0xffffffff
    2fb4:	ffffffff 	.word	0xffffffff
    2fb8:	ffffffff 	.word	0xffffffff
    2fbc:	ffffffff 	.word	0xffffffff
    2fc0:	ffffffff 	.word	0xffffffff
    2fc4:	ffffffff 	.word	0xffffffff
    2fc8:	ffffffff 	.word	0xffffffff
    2fcc:	ffffffff 	.word	0xffffffff
    2fd0:	ffffffff 	.word	0xffffffff
    2fd4:	ffffffff 	.word	0xffffffff
    2fd8:	ffffffff 	.word	0xffffffff
    2fdc:	ffffffff 	.word	0xffffffff
    2fe0:	ffffffff 	.word	0xffffffff
    2fe4:	ffffffff 	.word	0xffffffff
    2fe8:	ffffffff 	.word	0xffffffff
    2fec:	ffffffff 	.word	0xffffffff
    2ff0:	ffffffff 	.word	0xffffffff
    2ff4:	ffffffff 	.word	0xffffffff
    2ff8:	ffffffff 	.word	0xffffffff
    2ffc:	ffffffff 	.word	0xffffffff
    3000:	ffffffff 	.word	0xffffffff
    3004:	ffffffff 	.word	0xffffffff
    3008:	ffffffff 	.word	0xffffffff
    300c:	ffffffff 	.word	0xffffffff
    3010:	ffffffff 	.word	0xffffffff
    3014:	ffffffff 	.word	0xffffffff
    3018:	ffffffff 	.word	0xffffffff
    301c:	ffffffff 	.word	0xffffffff
    3020:	ffffffff 	.word	0xffffffff
    3024:	ffffffff 	.word	0xffffffff
    3028:	ffffffff 	.word	0xffffffff
    302c:	ffffffff 	.word	0xffffffff
    3030:	ffffffff 	.word	0xffffffff
    3034:	ffffffff 	.word	0xffffffff
    3038:	ffffffff 	.word	0xffffffff
    303c:	ffffffff 	.word	0xffffffff
    3040:	ffffffff 	.word	0xffffffff
    3044:	ffffffff 	.word	0xffffffff
    3048:	ffffffff 	.word	0xffffffff
    304c:	ffffffff 	.word	0xffffffff
    3050:	ffffffff 	.word	0xffffffff
    3054:	ffffffff 	.word	0xffffffff
    3058:	ffffffff 	.word	0xffffffff
    305c:	ffffffff 	.word	0xffffffff
    3060:	ffffffff 	.word	0xffffffff
    3064:	ffffffff 	.word	0xffffffff
    3068:	ffffffff 	.word	0xffffffff
    306c:	ffffffff 	.word	0xffffffff
    3070:	ffffffff 	.word	0xffffffff
    3074:	ffffffff 	.word	0xffffffff
    3078:	ffffffff 	.word	0xffffffff
    307c:	ffffffff 	.word	0xffffffff
    3080:	ffffffff 	.word	0xffffffff
    3084:	ffffffff 	.word	0xffffffff
    3088:	ffffffff 	.word	0xffffffff
    308c:	ffffffff 	.word	0xffffffff
    3090:	ffffffff 	.word	0xffffffff
    3094:	ffffffff 	.word	0xffffffff
    3098:	ffffffff 	.word	0xffffffff
    309c:	ffffffff 	.word	0xffffffff
    30a0:	ffffffff 	.word	0xffffffff
    30a4:	ffffffff 	.word	0xffffffff
    30a8:	ffffffff 	.word	0xffffffff
    30ac:	ffffffff 	.word	0xffffffff
    30b0:	ffffffff 	.word	0xffffffff
    30b4:	ffffffff 	.word	0xffffffff
    30b8:	ffffffff 	.word	0xffffffff
    30bc:	ffffffff 	.word	0xffffffff
    30c0:	ffffffff 	.word	0xffffffff
    30c4:	ffffffff 	.word	0xffffffff
    30c8:	ffffffff 	.word	0xffffffff
    30cc:	ffffffff 	.word	0xffffffff
    30d0:	ffffffff 	.word	0xffffffff
    30d4:	ffffffff 	.word	0xffffffff
    30d8:	ffffffff 	.word	0xffffffff
    30dc:	ffffffff 	.word	0xffffffff
    30e0:	ffffffff 	.word	0xffffffff
    30e4:	ffffffff 	.word	0xffffffff
    30e8:	ffffffff 	.word	0xffffffff
    30ec:	ffffffff 	.word	0xffffffff
    30f0:	ffffffff 	.word	0xffffffff
    30f4:	ffffffff 	.word	0xffffffff
    30f8:	ffffffff 	.word	0xffffffff
    30fc:	ffffffff 	.word	0xffffffff
    3100:	ffffffff 	.word	0xffffffff
    3104:	ffffffff 	.word	0xffffffff
    3108:	ffffffff 	.word	0xffffffff
    310c:	ffffffff 	.word	0xffffffff
    3110:	ffffffff 	.word	0xffffffff
    3114:	ffffffff 	.word	0xffffffff
    3118:	ffffffff 	.word	0xffffffff
    311c:	ffffffff 	.word	0xffffffff
    3120:	ffffffff 	.word	0xffffffff
    3124:	ffffffff 	.word	0xffffffff
    3128:	ffffffff 	.word	0xffffffff
    312c:	ffffffff 	.word	0xffffffff
    3130:	ffffffff 	.word	0xffffffff
    3134:	ffffffff 	.word	0xffffffff
    3138:	ffffffff 	.word	0xffffffff
    313c:	ffffffff 	.word	0xffffffff
    3140:	ffffffff 	.word	0xffffffff
    3144:	ffffffff 	.word	0xffffffff
    3148:	ffffffff 	.word	0xffffffff
    314c:	ffffffff 	.word	0xffffffff
    3150:	ffffffff 	.word	0xffffffff
    3154:	ffffffff 	.word	0xffffffff
    3158:	ffffffff 	.word	0xffffffff
    315c:	ffffffff 	.word	0xffffffff
    3160:	ffffffff 	.word	0xffffffff
    3164:	ffffffff 	.word	0xffffffff
    3168:	ffffffff 	.word	0xffffffff
    316c:	ffffffff 	.word	0xffffffff
    3170:	ffffffff 	.word	0xffffffff
    3174:	ffffffff 	.word	0xffffffff
    3178:	ffffffff 	.word	0xffffffff
    317c:	ffffffff 	.word	0xffffffff
    3180:	ffffffff 	.word	0xffffffff
    3184:	ffffffff 	.word	0xffffffff
    3188:	ffffffff 	.word	0xffffffff
    318c:	ffffffff 	.word	0xffffffff
    3190:	ffffffff 	.word	0xffffffff
    3194:	ffffffff 	.word	0xffffffff
    3198:	ffffffff 	.word	0xffffffff
    319c:	ffffffff 	.word	0xffffffff
    31a0:	ffffffff 	.word	0xffffffff
    31a4:	ffffffff 	.word	0xffffffff
    31a8:	ffffffff 	.word	0xffffffff
    31ac:	ffffffff 	.word	0xffffffff
    31b0:	ffffffff 	.word	0xffffffff
    31b4:	ffffffff 	.word	0xffffffff
    31b8:	ffffffff 	.word	0xffffffff
    31bc:	ffffffff 	.word	0xffffffff
    31c0:	ffffffff 	.word	0xffffffff
    31c4:	ffffffff 	.word	0xffffffff
    31c8:	ffffffff 	.word	0xffffffff
    31cc:	ffffffff 	.word	0xffffffff
    31d0:	ffffffff 	.word	0xffffffff
    31d4:	ffffffff 	.word	0xffffffff
    31d8:	ffffffff 	.word	0xffffffff
    31dc:	ffffffff 	.word	0xffffffff
    31e0:	ffffffff 	.word	0xffffffff
    31e4:	ffffffff 	.word	0xffffffff
    31e8:	ffffffff 	.word	0xffffffff
    31ec:	ffffffff 	.word	0xffffffff
    31f0:	ffffffff 	.word	0xffffffff
    31f4:	ffffffff 	.word	0xffffffff
    31f8:	ffffffff 	.word	0xffffffff
    31fc:	ffffffff 	.word	0xffffffff
    3200:	ffffffff 	.word	0xffffffff
    3204:	ffffffff 	.word	0xffffffff
    3208:	ffffffff 	.word	0xffffffff
    320c:	ffffffff 	.word	0xffffffff
    3210:	ffffffff 	.word	0xffffffff
    3214:	ffffffff 	.word	0xffffffff
    3218:	ffffffff 	.word	0xffffffff
    321c:	ffffffff 	.word	0xffffffff
    3220:	ffffffff 	.word	0xffffffff
    3224:	ffffffff 	.word	0xffffffff
    3228:	ffffffff 	.word	0xffffffff
    322c:	ffffffff 	.word	0xffffffff
    3230:	ffffffff 	.word	0xffffffff
    3234:	ffffffff 	.word	0xffffffff
    3238:	ffffffff 	.word	0xffffffff
    323c:	ffffffff 	.word	0xffffffff
    3240:	ffffffff 	.word	0xffffffff
    3244:	ffffffff 	.word	0xffffffff
    3248:	ffffffff 	.word	0xffffffff
    324c:	ffffffff 	.word	0xffffffff
    3250:	ffffffff 	.word	0xffffffff
    3254:	ffffffff 	.word	0xffffffff
    3258:	ffffffff 	.word	0xffffffff
    325c:	ffffffff 	.word	0xffffffff
    3260:	ffffffff 	.word	0xffffffff
    3264:	ffffffff 	.word	0xffffffff
    3268:	ffffffff 	.word	0xffffffff
    326c:	ffffffff 	.word	0xffffffff
    3270:	ffffffff 	.word	0xffffffff
    3274:	ffffffff 	.word	0xffffffff
    3278:	ffffffff 	.word	0xffffffff
    327c:	ffffffff 	.word	0xffffffff
    3280:	ffffffff 	.word	0xffffffff
    3284:	ffffffff 	.word	0xffffffff
    3288:	ffffffff 	.word	0xffffffff
    328c:	ffffffff 	.word	0xffffffff
    3290:	ffffffff 	.word	0xffffffff
    3294:	ffffffff 	.word	0xffffffff
    3298:	ffffffff 	.word	0xffffffff
    329c:	ffffffff 	.word	0xffffffff
    32a0:	ffffffff 	.word	0xffffffff
    32a4:	ffffffff 	.word	0xffffffff
    32a8:	ffffffff 	.word	0xffffffff
    32ac:	ffffffff 	.word	0xffffffff
    32b0:	ffffffff 	.word	0xffffffff
    32b4:	ffffffff 	.word	0xffffffff
    32b8:	ffffffff 	.word	0xffffffff
    32bc:	ffffffff 	.word	0xffffffff
    32c0:	ffffffff 	.word	0xffffffff
    32c4:	ffffffff 	.word	0xffffffff
    32c8:	ffffffff 	.word	0xffffffff
    32cc:	ffffffff 	.word	0xffffffff
    32d0:	ffffffff 	.word	0xffffffff
    32d4:	ffffffff 	.word	0xffffffff
    32d8:	ffffffff 	.word	0xffffffff
    32dc:	ffffffff 	.word	0xffffffff
    32e0:	ffffffff 	.word	0xffffffff
    32e4:	ffffffff 	.word	0xffffffff
    32e8:	ffffffff 	.word	0xffffffff
    32ec:	ffffffff 	.word	0xffffffff
    32f0:	ffffffff 	.word	0xffffffff
    32f4:	ffffffff 	.word	0xffffffff
    32f8:	ffffffff 	.word	0xffffffff
    32fc:	ffffffff 	.word	0xffffffff
    3300:	ffffffff 	.word	0xffffffff
    3304:	ffffffff 	.word	0xffffffff
    3308:	ffffffff 	.word	0xffffffff
    330c:	ffffffff 	.word	0xffffffff
    3310:	ffffffff 	.word	0xffffffff
    3314:	ffffffff 	.word	0xffffffff
    3318:	ffffffff 	.word	0xffffffff
    331c:	ffffffff 	.word	0xffffffff
    3320:	ffffffff 	.word	0xffffffff
    3324:	ffffffff 	.word	0xffffffff
    3328:	ffffffff 	.word	0xffffffff
    332c:	ffffffff 	.word	0xffffffff
    3330:	ffffffff 	.word	0xffffffff
    3334:	ffffffff 	.word	0xffffffff
    3338:	ffffffff 	.word	0xffffffff
    333c:	ffffffff 	.word	0xffffffff
    3340:	ffffffff 	.word	0xffffffff
    3344:	ffffffff 	.word	0xffffffff
    3348:	ffffffff 	.word	0xffffffff
    334c:	ffffffff 	.word	0xffffffff
    3350:	ffffffff 	.word	0xffffffff
    3354:	ffffffff 	.word	0xffffffff
    3358:	ffffffff 	.word	0xffffffff
    335c:	ffffffff 	.word	0xffffffff
    3360:	ffffffff 	.word	0xffffffff
    3364:	ffffffff 	.word	0xffffffff
    3368:	ffffffff 	.word	0xffffffff
    336c:	ffffffff 	.word	0xffffffff
    3370:	ffffffff 	.word	0xffffffff
    3374:	ffffffff 	.word	0xffffffff
    3378:	ffffffff 	.word	0xffffffff
    337c:	ffffffff 	.word	0xffffffff
    3380:	ffffffff 	.word	0xffffffff
    3384:	ffffffff 	.word	0xffffffff
    3388:	ffffffff 	.word	0xffffffff
    338c:	ffffffff 	.word	0xffffffff
    3390:	ffffffff 	.word	0xffffffff
    3394:	ffffffff 	.word	0xffffffff
    3398:	ffffffff 	.word	0xffffffff
    339c:	ffffffff 	.word	0xffffffff
    33a0:	ffffffff 	.word	0xffffffff
    33a4:	ffffffff 	.word	0xffffffff
    33a8:	ffffffff 	.word	0xffffffff
    33ac:	ffffffff 	.word	0xffffffff
    33b0:	ffffffff 	.word	0xffffffff
    33b4:	ffffffff 	.word	0xffffffff
    33b8:	ffffffff 	.word	0xffffffff
    33bc:	ffffffff 	.word	0xffffffff
    33c0:	ffffffff 	.word	0xffffffff
    33c4:	ffffffff 	.word	0xffffffff
    33c8:	ffffffff 	.word	0xffffffff
    33cc:	ffffffff 	.word	0xffffffff
    33d0:	ffffffff 	.word	0xffffffff
    33d4:	ffffffff 	.word	0xffffffff
    33d8:	ffffffff 	.word	0xffffffff
    33dc:	ffffffff 	.word	0xffffffff
    33e0:	ffffffff 	.word	0xffffffff
    33e4:	ffffffff 	.word	0xffffffff
    33e8:	ffffffff 	.word	0xffffffff
    33ec:	ffffffff 	.word	0xffffffff
    33f0:	ffffffff 	.word	0xffffffff
    33f4:	ffffffff 	.word	0xffffffff
    33f8:	ffffffff 	.word	0xffffffff
    33fc:	ffffffff 	.word	0xffffffff
    3400:	ffffffff 	.word	0xffffffff
    3404:	ffffffff 	.word	0xffffffff
    3408:	ffffffff 	.word	0xffffffff
    340c:	ffffffff 	.word	0xffffffff
    3410:	ffffffff 	.word	0xffffffff
    3414:	ffffffff 	.word	0xffffffff
    3418:	ffffffff 	.word	0xffffffff
    341c:	ffffffff 	.word	0xffffffff
    3420:	ffffffff 	.word	0xffffffff
    3424:	ffffffff 	.word	0xffffffff
    3428:	ffffffff 	.word	0xffffffff
    342c:	ffffffff 	.word	0xffffffff
    3430:	ffffffff 	.word	0xffffffff
    3434:	ffffffff 	.word	0xffffffff
    3438:	ffffffff 	.word	0xffffffff
    343c:	ffffffff 	.word	0xffffffff
    3440:	ffffffff 	.word	0xffffffff
    3444:	ffffffff 	.word	0xffffffff
    3448:	ffffffff 	.word	0xffffffff
    344c:	ffffffff 	.word	0xffffffff
    3450:	ffffffff 	.word	0xffffffff
    3454:	ffffffff 	.word	0xffffffff
    3458:	ffffffff 	.word	0xffffffff
    345c:	ffffffff 	.word	0xffffffff
    3460:	ffffffff 	.word	0xffffffff
    3464:	ffffffff 	.word	0xffffffff
    3468:	ffffffff 	.word	0xffffffff
    346c:	ffffffff 	.word	0xffffffff
    3470:	ffffffff 	.word	0xffffffff
    3474:	ffffffff 	.word	0xffffffff
    3478:	ffffffff 	.word	0xffffffff
    347c:	ffffffff 	.word	0xffffffff
    3480:	ffffffff 	.word	0xffffffff
    3484:	ffffffff 	.word	0xffffffff
    3488:	ffffffff 	.word	0xffffffff
    348c:	ffffffff 	.word	0xffffffff
    3490:	ffffffff 	.word	0xffffffff
    3494:	ffffffff 	.word	0xffffffff
    3498:	ffffffff 	.word	0xffffffff
    349c:	ffffffff 	.word	0xffffffff
    34a0:	ffffffff 	.word	0xffffffff
    34a4:	ffffffff 	.word	0xffffffff
    34a8:	ffffffff 	.word	0xffffffff
    34ac:	ffffffff 	.word	0xffffffff
    34b0:	ffffffff 	.word	0xffffffff
    34b4:	ffffffff 	.word	0xffffffff
    34b8:	ffffffff 	.word	0xffffffff
    34bc:	ffffffff 	.word	0xffffffff
    34c0:	ffffffff 	.word	0xffffffff
    34c4:	ffffffff 	.word	0xffffffff
    34c8:	ffffffff 	.word	0xffffffff
    34cc:	ffffffff 	.word	0xffffffff
    34d0:	ffffffff 	.word	0xffffffff
    34d4:	ffffffff 	.word	0xffffffff
    34d8:	ffffffff 	.word	0xffffffff
    34dc:	ffffffff 	.word	0xffffffff
    34e0:	ffffffff 	.word	0xffffffff
    34e4:	ffffffff 	.word	0xffffffff
    34e8:	ffffffff 	.word	0xffffffff
    34ec:	ffffffff 	.word	0xffffffff
    34f0:	ffffffff 	.word	0xffffffff
    34f4:	ffffffff 	.word	0xffffffff
    34f8:	ffffffff 	.word	0xffffffff
    34fc:	ffffffff 	.word	0xffffffff
    3500:	ffffffff 	.word	0xffffffff
    3504:	ffffffff 	.word	0xffffffff
    3508:	ffffffff 	.word	0xffffffff
    350c:	ffffffff 	.word	0xffffffff
    3510:	ffffffff 	.word	0xffffffff
    3514:	ffffffff 	.word	0xffffffff
    3518:	ffffffff 	.word	0xffffffff
    351c:	ffffffff 	.word	0xffffffff
    3520:	ffffffff 	.word	0xffffffff
    3524:	ffffffff 	.word	0xffffffff
    3528:	ffffffff 	.word	0xffffffff
    352c:	ffffffff 	.word	0xffffffff
    3530:	ffffffff 	.word	0xffffffff
    3534:	ffffffff 	.word	0xffffffff
    3538:	ffffffff 	.word	0xffffffff
    353c:	ffffffff 	.word	0xffffffff
    3540:	ffffffff 	.word	0xffffffff
    3544:	ffffffff 	.word	0xffffffff
    3548:	ffffffff 	.word	0xffffffff
    354c:	ffffffff 	.word	0xffffffff
    3550:	ffffffff 	.word	0xffffffff
    3554:	ffffffff 	.word	0xffffffff
    3558:	ffffffff 	.word	0xffffffff
    355c:	ffffffff 	.word	0xffffffff
    3560:	ffffffff 	.word	0xffffffff
    3564:	ffffffff 	.word	0xffffffff
    3568:	ffffffff 	.word	0xffffffff
    356c:	ffffffff 	.word	0xffffffff
    3570:	ffffffff 	.word	0xffffffff
    3574:	ffffffff 	.word	0xffffffff
    3578:	ffffffff 	.word	0xffffffff
    357c:	ffffffff 	.word	0xffffffff
    3580:	ffffffff 	.word	0xffffffff
    3584:	ffffffff 	.word	0xffffffff
    3588:	ffffffff 	.word	0xffffffff
    358c:	ffffffff 	.word	0xffffffff
    3590:	ffffffff 	.word	0xffffffff
    3594:	ffffffff 	.word	0xffffffff
    3598:	ffffffff 	.word	0xffffffff
    359c:	ffffffff 	.word	0xffffffff
    35a0:	ffffffff 	.word	0xffffffff
    35a4:	ffffffff 	.word	0xffffffff
    35a8:	ffffffff 	.word	0xffffffff
    35ac:	ffffffff 	.word	0xffffffff
    35b0:	ffffffff 	.word	0xffffffff
    35b4:	ffffffff 	.word	0xffffffff
    35b8:	ffffffff 	.word	0xffffffff
    35bc:	ffffffff 	.word	0xffffffff
    35c0:	ffffffff 	.word	0xffffffff
    35c4:	ffffffff 	.word	0xffffffff
    35c8:	ffffffff 	.word	0xffffffff
    35cc:	ffffffff 	.word	0xffffffff
    35d0:	ffffffff 	.word	0xffffffff
    35d4:	ffffffff 	.word	0xffffffff
    35d8:	ffffffff 	.word	0xffffffff
    35dc:	ffffffff 	.word	0xffffffff
    35e0:	ffffffff 	.word	0xffffffff
    35e4:	ffffffff 	.word	0xffffffff
    35e8:	ffffffff 	.word	0xffffffff
    35ec:	ffffffff 	.word	0xffffffff
    35f0:	ffffffff 	.word	0xffffffff
    35f4:	ffffffff 	.word	0xffffffff
    35f8:	ffffffff 	.word	0xffffffff
    35fc:	ffffffff 	.word	0xffffffff
    3600:	ffffffff 	.word	0xffffffff
    3604:	ffffffff 	.word	0xffffffff
    3608:	ffffffff 	.word	0xffffffff
    360c:	ffffffff 	.word	0xffffffff
    3610:	ffffffff 	.word	0xffffffff
    3614:	ffffffff 	.word	0xffffffff
    3618:	ffffffff 	.word	0xffffffff
    361c:	ffffffff 	.word	0xffffffff
    3620:	ffffffff 	.word	0xffffffff
    3624:	ffffffff 	.word	0xffffffff
    3628:	ffffffff 	.word	0xffffffff
    362c:	ffffffff 	.word	0xffffffff
    3630:	ffffffff 	.word	0xffffffff
    3634:	ffffffff 	.word	0xffffffff
    3638:	ffffffff 	.word	0xffffffff
    363c:	ffffffff 	.word	0xffffffff
    3640:	ffffffff 	.word	0xffffffff
    3644:	ffffffff 	.word	0xffffffff
    3648:	ffffffff 	.word	0xffffffff
    364c:	ffffffff 	.word	0xffffffff
    3650:	ffffffff 	.word	0xffffffff
    3654:	ffffffff 	.word	0xffffffff
    3658:	ffffffff 	.word	0xffffffff
    365c:	ffffffff 	.word	0xffffffff
    3660:	ffffffff 	.word	0xffffffff
    3664:	ffffffff 	.word	0xffffffff
    3668:	ffffffff 	.word	0xffffffff
    366c:	ffffffff 	.word	0xffffffff
    3670:	ffffffff 	.word	0xffffffff
    3674:	ffffffff 	.word	0xffffffff
    3678:	ffffffff 	.word	0xffffffff
    367c:	ffffffff 	.word	0xffffffff
    3680:	ffffffff 	.word	0xffffffff
    3684:	ffffffff 	.word	0xffffffff
    3688:	ffffffff 	.word	0xffffffff
    368c:	ffffffff 	.word	0xffffffff
    3690:	ffffffff 	.word	0xffffffff
    3694:	ffffffff 	.word	0xffffffff
    3698:	ffffffff 	.word	0xffffffff
    369c:	ffffffff 	.word	0xffffffff
    36a0:	ffffffff 	.word	0xffffffff
    36a4:	ffffffff 	.word	0xffffffff
    36a8:	ffffffff 	.word	0xffffffff
    36ac:	ffffffff 	.word	0xffffffff
    36b0:	ffffffff 	.word	0xffffffff
    36b4:	ffffffff 	.word	0xffffffff
    36b8:	ffffffff 	.word	0xffffffff
    36bc:	ffffffff 	.word	0xffffffff
    36c0:	ffffffff 	.word	0xffffffff
    36c4:	ffffffff 	.word	0xffffffff
    36c8:	ffffffff 	.word	0xffffffff
    36cc:	ffffffff 	.word	0xffffffff
    36d0:	ffffffff 	.word	0xffffffff
    36d4:	ffffffff 	.word	0xffffffff
    36d8:	ffffffff 	.word	0xffffffff
    36dc:	ffffffff 	.word	0xffffffff
    36e0:	ffffffff 	.word	0xffffffff
    36e4:	ffffffff 	.word	0xffffffff
    36e8:	ffffffff 	.word	0xffffffff
    36ec:	ffffffff 	.word	0xffffffff
    36f0:	ffffffff 	.word	0xffffffff
    36f4:	ffffffff 	.word	0xffffffff
    36f8:	ffffffff 	.word	0xffffffff
    36fc:	ffffffff 	.word	0xffffffff
    3700:	ffffffff 	.word	0xffffffff
    3704:	ffffffff 	.word	0xffffffff
    3708:	ffffffff 	.word	0xffffffff
    370c:	ffffffff 	.word	0xffffffff
    3710:	ffffffff 	.word	0xffffffff
    3714:	ffffffff 	.word	0xffffffff
    3718:	ffffffff 	.word	0xffffffff
    371c:	ffffffff 	.word	0xffffffff
    3720:	ffffffff 	.word	0xffffffff
    3724:	ffffffff 	.word	0xffffffff
    3728:	ffffffff 	.word	0xffffffff
    372c:	ffffffff 	.word	0xffffffff
    3730:	ffffffff 	.word	0xffffffff
    3734:	ffffffff 	.word	0xffffffff
    3738:	ffffffff 	.word	0xffffffff
    373c:	ffffffff 	.word	0xffffffff
    3740:	ffffffff 	.word	0xffffffff
    3744:	ffffffff 	.word	0xffffffff
    3748:	ffffffff 	.word	0xffffffff
    374c:	ffffffff 	.word	0xffffffff
    3750:	ffffffff 	.word	0xffffffff
    3754:	ffffffff 	.word	0xffffffff
    3758:	ffffffff 	.word	0xffffffff
    375c:	ffffffff 	.word	0xffffffff
    3760:	ffffffff 	.word	0xffffffff
    3764:	ffffffff 	.word	0xffffffff
    3768:	ffffffff 	.word	0xffffffff
    376c:	ffffffff 	.word	0xffffffff
    3770:	ffffffff 	.word	0xffffffff
    3774:	ffffffff 	.word	0xffffffff
    3778:	ffffffff 	.word	0xffffffff
    377c:	ffffffff 	.word	0xffffffff
    3780:	ffffffff 	.word	0xffffffff
    3784:	ffffffff 	.word	0xffffffff
    3788:	ffffffff 	.word	0xffffffff
    378c:	ffffffff 	.word	0xffffffff
    3790:	ffffffff 	.word	0xffffffff
    3794:	ffffffff 	.word	0xffffffff
    3798:	ffffffff 	.word	0xffffffff
    379c:	ffffffff 	.word	0xffffffff
    37a0:	ffffffff 	.word	0xffffffff
    37a4:	ffffffff 	.word	0xffffffff
    37a8:	ffffffff 	.word	0xffffffff
    37ac:	ffffffff 	.word	0xffffffff
    37b0:	ffffffff 	.word	0xffffffff
    37b4:	ffffffff 	.word	0xffffffff
    37b8:	ffffffff 	.word	0xffffffff
    37bc:	ffffffff 	.word	0xffffffff
    37c0:	ffffffff 	.word	0xffffffff
    37c4:	ffffffff 	.word	0xffffffff
    37c8:	ffffffff 	.word	0xffffffff
    37cc:	ffffffff 	.word	0xffffffff
    37d0:	ffffffff 	.word	0xffffffff
    37d4:	ffffffff 	.word	0xffffffff
    37d8:	ffffffff 	.word	0xffffffff
    37dc:	ffffffff 	.word	0xffffffff
    37e0:	ffffffff 	.word	0xffffffff
    37e4:	ffffffff 	.word	0xffffffff
    37e8:	ffffffff 	.word	0xffffffff
    37ec:	ffffffff 	.word	0xffffffff
    37f0:	ffffffff 	.word	0xffffffff
    37f4:	ffffffff 	.word	0xffffffff
    37f8:	ffffffff 	.word	0xffffffff
    37fc:	ffffffff 	.word	0xffffffff
    3800:	ffffffff 	.word	0xffffffff
    3804:	ffffffff 	.word	0xffffffff
    3808:	ffffffff 	.word	0xffffffff
    380c:	ffffffff 	.word	0xffffffff
    3810:	ffffffff 	.word	0xffffffff
    3814:	ffffffff 	.word	0xffffffff
    3818:	ffffffff 	.word	0xffffffff
    381c:	ffffffff 	.word	0xffffffff
    3820:	ffffffff 	.word	0xffffffff
    3824:	ffffffff 	.word	0xffffffff
    3828:	ffffffff 	.word	0xffffffff
    382c:	ffffffff 	.word	0xffffffff
    3830:	ffffffff 	.word	0xffffffff
    3834:	ffffffff 	.word	0xffffffff
    3838:	ffffffff 	.word	0xffffffff
    383c:	ffffffff 	.word	0xffffffff
    3840:	ffffffff 	.word	0xffffffff
    3844:	ffffffff 	.word	0xffffffff
    3848:	ffffffff 	.word	0xffffffff
    384c:	ffffffff 	.word	0xffffffff
    3850:	ffffffff 	.word	0xffffffff
    3854:	ffffffff 	.word	0xffffffff
    3858:	ffffffff 	.word	0xffffffff
    385c:	ffffffff 	.word	0xffffffff
    3860:	ffffffff 	.word	0xffffffff
    3864:	ffffffff 	.word	0xffffffff
    3868:	ffffffff 	.word	0xffffffff
    386c:	ffffffff 	.word	0xffffffff
    3870:	ffffffff 	.word	0xffffffff
    3874:	ffffffff 	.word	0xffffffff
    3878:	ffffffff 	.word	0xffffffff
    387c:	ffffffff 	.word	0xffffffff
    3880:	ffffffff 	.word	0xffffffff
    3884:	ffffffff 	.word	0xffffffff
    3888:	ffffffff 	.word	0xffffffff
    388c:	ffffffff 	.word	0xffffffff
    3890:	ffffffff 	.word	0xffffffff
    3894:	ffffffff 	.word	0xffffffff
    3898:	ffffffff 	.word	0xffffffff
    389c:	ffffffff 	.word	0xffffffff
    38a0:	ffffffff 	.word	0xffffffff
    38a4:	ffffffff 	.word	0xffffffff
    38a8:	ffffffff 	.word	0xffffffff
    38ac:	ffffffff 	.word	0xffffffff
    38b0:	ffffffff 	.word	0xffffffff
    38b4:	ffffffff 	.word	0xffffffff
    38b8:	ffffffff 	.word	0xffffffff
    38bc:	ffffffff 	.word	0xffffffff
    38c0:	ffffffff 	.word	0xffffffff
    38c4:	ffffffff 	.word	0xffffffff
    38c8:	ffffffff 	.word	0xffffffff
    38cc:	ffffffff 	.word	0xffffffff
    38d0:	ffffffff 	.word	0xffffffff
    38d4:	ffffffff 	.word	0xffffffff
    38d8:	ffffffff 	.word	0xffffffff
    38dc:	ffffffff 	.word	0xffffffff
    38e0:	ffffffff 	.word	0xffffffff
    38e4:	ffffffff 	.word	0xffffffff
    38e8:	ffffffff 	.word	0xffffffff
    38ec:	ffffffff 	.word	0xffffffff
    38f0:	ffffffff 	.word	0xffffffff
    38f4:	ffffffff 	.word	0xffffffff
    38f8:	ffffffff 	.word	0xffffffff
    38fc:	ffffffff 	.word	0xffffffff
    3900:	ffffffff 	.word	0xffffffff
    3904:	ffffffff 	.word	0xffffffff
    3908:	ffffffff 	.word	0xffffffff
    390c:	ffffffff 	.word	0xffffffff
    3910:	ffffffff 	.word	0xffffffff
    3914:	ffffffff 	.word	0xffffffff
    3918:	ffffffff 	.word	0xffffffff
    391c:	ffffffff 	.word	0xffffffff
    3920:	ffffffff 	.word	0xffffffff
    3924:	ffffffff 	.word	0xffffffff
    3928:	ffffffff 	.word	0xffffffff
    392c:	ffffffff 	.word	0xffffffff
    3930:	ffffffff 	.word	0xffffffff
    3934:	ffffffff 	.word	0xffffffff
    3938:	ffffffff 	.word	0xffffffff
    393c:	ffffffff 	.word	0xffffffff
    3940:	ffffffff 	.word	0xffffffff
    3944:	ffffffff 	.word	0xffffffff
    3948:	ffffffff 	.word	0xffffffff
    394c:	ffffffff 	.word	0xffffffff
    3950:	ffffffff 	.word	0xffffffff
    3954:	ffffffff 	.word	0xffffffff
    3958:	ffffffff 	.word	0xffffffff
    395c:	ffffffff 	.word	0xffffffff
    3960:	ffffffff 	.word	0xffffffff
    3964:	ffffffff 	.word	0xffffffff
    3968:	ffffffff 	.word	0xffffffff
    396c:	ffffffff 	.word	0xffffffff
    3970:	ffffffff 	.word	0xffffffff
    3974:	ffffffff 	.word	0xffffffff
    3978:	ffffffff 	.word	0xffffffff
    397c:	ffffffff 	.word	0xffffffff
    3980:	ffffffff 	.word	0xffffffff
    3984:	ffffffff 	.word	0xffffffff
    3988:	ffffffff 	.word	0xffffffff
    398c:	ffffffff 	.word	0xffffffff
    3990:	ffffffff 	.word	0xffffffff
    3994:	ffffffff 	.word	0xffffffff
    3998:	ffffffff 	.word	0xffffffff
    399c:	ffffffff 	.word	0xffffffff
    39a0:	ffffffff 	.word	0xffffffff
    39a4:	ffffffff 	.word	0xffffffff
    39a8:	ffffffff 	.word	0xffffffff
    39ac:	ffffffff 	.word	0xffffffff
    39b0:	ffffffff 	.word	0xffffffff
    39b4:	ffffffff 	.word	0xffffffff
    39b8:	ffffffff 	.word	0xffffffff
    39bc:	ffffffff 	.word	0xffffffff
    39c0:	ffffffff 	.word	0xffffffff
    39c4:	ffffffff 	.word	0xffffffff
    39c8:	ffffffff 	.word	0xffffffff
    39cc:	ffffffff 	.word	0xffffffff
    39d0:	ffffffff 	.word	0xffffffff
    39d4:	ffffffff 	.word	0xffffffff
    39d8:	ffffffff 	.word	0xffffffff
    39dc:	ffffffff 	.word	0xffffffff
    39e0:	ffffffff 	.word	0xffffffff
    39e4:	ffffffff 	.word	0xffffffff
    39e8:	ffffffff 	.word	0xffffffff
    39ec:	ffffffff 	.word	0xffffffff
    39f0:	ffffffff 	.word	0xffffffff
    39f4:	ffffffff 	.word	0xffffffff
    39f8:	ffffffff 	.word	0xffffffff
    39fc:	ffffffff 	.word	0xffffffff
    3a00:	ffffffff 	.word	0xffffffff
    3a04:	ffffffff 	.word	0xffffffff
    3a08:	ffffffff 	.word	0xffffffff
    3a0c:	ffffffff 	.word	0xffffffff
    3a10:	ffffffff 	.word	0xffffffff
    3a14:	ffffffff 	.word	0xffffffff
    3a18:	ffffffff 	.word	0xffffffff
    3a1c:	ffffffff 	.word	0xffffffff
    3a20:	ffffffff 	.word	0xffffffff
    3a24:	ffffffff 	.word	0xffffffff
    3a28:	ffffffff 	.word	0xffffffff
    3a2c:	ffffffff 	.word	0xffffffff
    3a30:	ffffffff 	.word	0xffffffff
    3a34:	ffffffff 	.word	0xffffffff
    3a38:	ffffffff 	.word	0xffffffff
    3a3c:	ffffffff 	.word	0xffffffff
    3a40:	ffffffff 	.word	0xffffffff
    3a44:	ffffffff 	.word	0xffffffff
    3a48:	ffffffff 	.word	0xffffffff
    3a4c:	ffffffff 	.word	0xffffffff
    3a50:	ffffffff 	.word	0xffffffff
    3a54:	ffffffff 	.word	0xffffffff
    3a58:	ffffffff 	.word	0xffffffff
    3a5c:	ffffffff 	.word	0xffffffff
    3a60:	ffffffff 	.word	0xffffffff
    3a64:	ffffffff 	.word	0xffffffff
    3a68:	ffffffff 	.word	0xffffffff
    3a6c:	ffffffff 	.word	0xffffffff
    3a70:	ffffffff 	.word	0xffffffff
    3a74:	ffffffff 	.word	0xffffffff
    3a78:	ffffffff 	.word	0xffffffff
    3a7c:	ffffffff 	.word	0xffffffff
    3a80:	ffffffff 	.word	0xffffffff
    3a84:	ffffffff 	.word	0xffffffff
    3a88:	ffffffff 	.word	0xffffffff
    3a8c:	ffffffff 	.word	0xffffffff
    3a90:	ffffffff 	.word	0xffffffff
    3a94:	ffffffff 	.word	0xffffffff
    3a98:	ffffffff 	.word	0xffffffff
    3a9c:	ffffffff 	.word	0xffffffff
    3aa0:	ffffffff 	.word	0xffffffff
    3aa4:	ffffffff 	.word	0xffffffff
    3aa8:	ffffffff 	.word	0xffffffff
    3aac:	ffffffff 	.word	0xffffffff
    3ab0:	ffffffff 	.word	0xffffffff
    3ab4:	ffffffff 	.word	0xffffffff
    3ab8:	ffffffff 	.word	0xffffffff
    3abc:	ffffffff 	.word	0xffffffff
    3ac0:	ffffffff 	.word	0xffffffff
    3ac4:	ffffffff 	.word	0xffffffff
    3ac8:	ffffffff 	.word	0xffffffff
    3acc:	ffffffff 	.word	0xffffffff
    3ad0:	ffffffff 	.word	0xffffffff
    3ad4:	ffffffff 	.word	0xffffffff
    3ad8:	ffffffff 	.word	0xffffffff
    3adc:	ffffffff 	.word	0xffffffff
    3ae0:	ffffffff 	.word	0xffffffff
    3ae4:	ffffffff 	.word	0xffffffff
    3ae8:	ffffffff 	.word	0xffffffff
    3aec:	ffffffff 	.word	0xffffffff
    3af0:	ffffffff 	.word	0xffffffff
    3af4:	ffffffff 	.word	0xffffffff
    3af8:	ffffffff 	.word	0xffffffff
    3afc:	ffffffff 	.word	0xffffffff
    3b00:	ffffffff 	.word	0xffffffff
    3b04:	ffffffff 	.word	0xffffffff
    3b08:	ffffffff 	.word	0xffffffff
    3b0c:	ffffffff 	.word	0xffffffff
    3b10:	ffffffff 	.word	0xffffffff
    3b14:	ffffffff 	.word	0xffffffff
    3b18:	ffffffff 	.word	0xffffffff
    3b1c:	ffffffff 	.word	0xffffffff
    3b20:	ffffffff 	.word	0xffffffff
    3b24:	ffffffff 	.word	0xffffffff
    3b28:	ffffffff 	.word	0xffffffff
    3b2c:	ffffffff 	.word	0xffffffff
    3b30:	ffffffff 	.word	0xffffffff
    3b34:	ffffffff 	.word	0xffffffff
    3b38:	ffffffff 	.word	0xffffffff
    3b3c:	ffffffff 	.word	0xffffffff
    3b40:	ffffffff 	.word	0xffffffff
    3b44:	ffffffff 	.word	0xffffffff
    3b48:	ffffffff 	.word	0xffffffff
    3b4c:	ffffffff 	.word	0xffffffff
    3b50:	ffffffff 	.word	0xffffffff
    3b54:	ffffffff 	.word	0xffffffff
    3b58:	ffffffff 	.word	0xffffffff
    3b5c:	ffffffff 	.word	0xffffffff
    3b60:	ffffffff 	.word	0xffffffff
    3b64:	ffffffff 	.word	0xffffffff
    3b68:	ffffffff 	.word	0xffffffff
    3b6c:	ffffffff 	.word	0xffffffff
    3b70:	ffffffff 	.word	0xffffffff
    3b74:	ffffffff 	.word	0xffffffff
    3b78:	ffffffff 	.word	0xffffffff
    3b7c:	ffffffff 	.word	0xffffffff
    3b80:	ffffffff 	.word	0xffffffff
    3b84:	ffffffff 	.word	0xffffffff
    3b88:	ffffffff 	.word	0xffffffff
    3b8c:	ffffffff 	.word	0xffffffff
    3b90:	ffffffff 	.word	0xffffffff
    3b94:	ffffffff 	.word	0xffffffff
    3b98:	ffffffff 	.word	0xffffffff
    3b9c:	ffffffff 	.word	0xffffffff
    3ba0:	ffffffff 	.word	0xffffffff
    3ba4:	ffffffff 	.word	0xffffffff
    3ba8:	ffffffff 	.word	0xffffffff
    3bac:	ffffffff 	.word	0xffffffff
    3bb0:	ffffffff 	.word	0xffffffff
    3bb4:	ffffffff 	.word	0xffffffff
    3bb8:	ffffffff 	.word	0xffffffff
    3bbc:	ffffffff 	.word	0xffffffff
    3bc0:	ffffffff 	.word	0xffffffff
    3bc4:	ffffffff 	.word	0xffffffff
    3bc8:	ffffffff 	.word	0xffffffff
    3bcc:	ffffffff 	.word	0xffffffff
    3bd0:	ffffffff 	.word	0xffffffff
    3bd4:	ffffffff 	.word	0xffffffff
    3bd8:	ffffffff 	.word	0xffffffff
    3bdc:	ffffffff 	.word	0xffffffff
    3be0:	ffffffff 	.word	0xffffffff
    3be4:	ffffffff 	.word	0xffffffff
    3be8:	ffffffff 	.word	0xffffffff
    3bec:	ffffffff 	.word	0xffffffff
    3bf0:	ffffffff 	.word	0xffffffff
    3bf4:	ffffffff 	.word	0xffffffff
    3bf8:	ffffffff 	.word	0xffffffff
    3bfc:	ffffffff 	.word	0xffffffff
    3c00:	ffffffff 	.word	0xffffffff
    3c04:	ffffffff 	.word	0xffffffff
    3c08:	ffffffff 	.word	0xffffffff
    3c0c:	ffffffff 	.word	0xffffffff
    3c10:	ffffffff 	.word	0xffffffff
    3c14:	ffffffff 	.word	0xffffffff
    3c18:	ffffffff 	.word	0xffffffff
    3c1c:	ffffffff 	.word	0xffffffff
    3c20:	ffffffff 	.word	0xffffffff
    3c24:	ffffffff 	.word	0xffffffff
    3c28:	ffffffff 	.word	0xffffffff
    3c2c:	ffffffff 	.word	0xffffffff
    3c30:	ffffffff 	.word	0xffffffff
    3c34:	ffffffff 	.word	0xffffffff
    3c38:	ffffffff 	.word	0xffffffff
    3c3c:	ffffffff 	.word	0xffffffff
    3c40:	ffffffff 	.word	0xffffffff
    3c44:	ffffffff 	.word	0xffffffff
    3c48:	ffffffff 	.word	0xffffffff
    3c4c:	ffffffff 	.word	0xffffffff
    3c50:	ffffffff 	.word	0xffffffff
    3c54:	ffffffff 	.word	0xffffffff
    3c58:	ffffffff 	.word	0xffffffff
    3c5c:	ffffffff 	.word	0xffffffff
    3c60:	ffffffff 	.word	0xffffffff
    3c64:	ffffffff 	.word	0xffffffff
    3c68:	ffffffff 	.word	0xffffffff
    3c6c:	ffffffff 	.word	0xffffffff
    3c70:	ffffffff 	.word	0xffffffff
    3c74:	ffffffff 	.word	0xffffffff
    3c78:	ffffffff 	.word	0xffffffff
    3c7c:	ffffffff 	.word	0xffffffff
    3c80:	ffffffff 	.word	0xffffffff
    3c84:	ffffffff 	.word	0xffffffff
    3c88:	ffffffff 	.word	0xffffffff
    3c8c:	ffffffff 	.word	0xffffffff
    3c90:	ffffffff 	.word	0xffffffff
    3c94:	ffffffff 	.word	0xffffffff
    3c98:	ffffffff 	.word	0xffffffff
    3c9c:	ffffffff 	.word	0xffffffff
    3ca0:	ffffffff 	.word	0xffffffff
    3ca4:	ffffffff 	.word	0xffffffff
    3ca8:	ffffffff 	.word	0xffffffff
    3cac:	ffffffff 	.word	0xffffffff
    3cb0:	ffffffff 	.word	0xffffffff
    3cb4:	ffffffff 	.word	0xffffffff
    3cb8:	ffffffff 	.word	0xffffffff
    3cbc:	ffffffff 	.word	0xffffffff
    3cc0:	ffffffff 	.word	0xffffffff
    3cc4:	ffffffff 	.word	0xffffffff
    3cc8:	ffffffff 	.word	0xffffffff
    3ccc:	ffffffff 	.word	0xffffffff
    3cd0:	ffffffff 	.word	0xffffffff
    3cd4:	ffffffff 	.word	0xffffffff
    3cd8:	ffffffff 	.word	0xffffffff
    3cdc:	ffffffff 	.word	0xffffffff
    3ce0:	ffffffff 	.word	0xffffffff
    3ce4:	ffffffff 	.word	0xffffffff
    3ce8:	ffffffff 	.word	0xffffffff
    3cec:	ffffffff 	.word	0xffffffff
    3cf0:	ffffffff 	.word	0xffffffff
    3cf4:	ffffffff 	.word	0xffffffff
    3cf8:	ffffffff 	.word	0xffffffff
    3cfc:	ffffffff 	.word	0xffffffff
    3d00:	ffffffff 	.word	0xffffffff
    3d04:	ffffffff 	.word	0xffffffff
    3d08:	ffffffff 	.word	0xffffffff
    3d0c:	ffffffff 	.word	0xffffffff
    3d10:	ffffffff 	.word	0xffffffff
    3d14:	ffffffff 	.word	0xffffffff
    3d18:	ffffffff 	.word	0xffffffff
    3d1c:	ffffffff 	.word	0xffffffff
    3d20:	ffffffff 	.word	0xffffffff
    3d24:	ffffffff 	.word	0xffffffff
    3d28:	ffffffff 	.word	0xffffffff
    3d2c:	ffffffff 	.word	0xffffffff
    3d30:	ffffffff 	.word	0xffffffff
    3d34:	ffffffff 	.word	0xffffffff
    3d38:	ffffffff 	.word	0xffffffff
    3d3c:	ffffffff 	.word	0xffffffff
    3d40:	ffffffff 	.word	0xffffffff
    3d44:	ffffffff 	.word	0xffffffff
    3d48:	ffffffff 	.word	0xffffffff
    3d4c:	ffffffff 	.word	0xffffffff
    3d50:	ffffffff 	.word	0xffffffff
    3d54:	ffffffff 	.word	0xffffffff
    3d58:	ffffffff 	.word	0xffffffff
    3d5c:	ffffffff 	.word	0xffffffff
    3d60:	ffffffff 	.word	0xffffffff
    3d64:	ffffffff 	.word	0xffffffff
    3d68:	ffffffff 	.word	0xffffffff
    3d6c:	ffffffff 	.word	0xffffffff
    3d70:	ffffffff 	.word	0xffffffff
    3d74:	ffffffff 	.word	0xffffffff
    3d78:	ffffffff 	.word	0xffffffff
    3d7c:	ffffffff 	.word	0xffffffff
    3d80:	ffffffff 	.word	0xffffffff
    3d84:	ffffffff 	.word	0xffffffff
    3d88:	ffffffff 	.word	0xffffffff
    3d8c:	ffffffff 	.word	0xffffffff
    3d90:	ffffffff 	.word	0xffffffff
    3d94:	ffffffff 	.word	0xffffffff
    3d98:	ffffffff 	.word	0xffffffff
    3d9c:	ffffffff 	.word	0xffffffff
    3da0:	ffffffff 	.word	0xffffffff
    3da4:	ffffffff 	.word	0xffffffff
    3da8:	ffffffff 	.word	0xffffffff
    3dac:	ffffffff 	.word	0xffffffff
    3db0:	ffffffff 	.word	0xffffffff
    3db4:	ffffffff 	.word	0xffffffff
    3db8:	ffffffff 	.word	0xffffffff
    3dbc:	ffffffff 	.word	0xffffffff
    3dc0:	ffffffff 	.word	0xffffffff
    3dc4:	ffffffff 	.word	0xffffffff
    3dc8:	ffffffff 	.word	0xffffffff
    3dcc:	ffffffff 	.word	0xffffffff
    3dd0:	ffffffff 	.word	0xffffffff
    3dd4:	ffffffff 	.word	0xffffffff
    3dd8:	ffffffff 	.word	0xffffffff
    3ddc:	ffffffff 	.word	0xffffffff
    3de0:	ffffffff 	.word	0xffffffff
    3de4:	ffffffff 	.word	0xffffffff
    3de8:	ffffffff 	.word	0xffffffff
    3dec:	ffffffff 	.word	0xffffffff
    3df0:	ffffffff 	.word	0xffffffff
    3df4:	ffffffff 	.word	0xffffffff
    3df8:	ffffffff 	.word	0xffffffff
    3dfc:	ffffffff 	.word	0xffffffff
    3e00:	ffffffff 	.word	0xffffffff
    3e04:	ffffffff 	.word	0xffffffff
    3e08:	ffffffff 	.word	0xffffffff
    3e0c:	ffffffff 	.word	0xffffffff
    3e10:	ffffffff 	.word	0xffffffff
    3e14:	ffffffff 	.word	0xffffffff
    3e18:	ffffffff 	.word	0xffffffff
    3e1c:	ffffffff 	.word	0xffffffff
    3e20:	ffffffff 	.word	0xffffffff
    3e24:	ffffffff 	.word	0xffffffff
    3e28:	ffffffff 	.word	0xffffffff
    3e2c:	ffffffff 	.word	0xffffffff
    3e30:	ffffffff 	.word	0xffffffff
    3e34:	ffffffff 	.word	0xffffffff
    3e38:	ffffffff 	.word	0xffffffff
    3e3c:	ffffffff 	.word	0xffffffff
    3e40:	ffffffff 	.word	0xffffffff
    3e44:	ffffffff 	.word	0xffffffff
    3e48:	ffffffff 	.word	0xffffffff
    3e4c:	ffffffff 	.word	0xffffffff
    3e50:	ffffffff 	.word	0xffffffff
    3e54:	ffffffff 	.word	0xffffffff
    3e58:	ffffffff 	.word	0xffffffff
    3e5c:	ffffffff 	.word	0xffffffff
    3e60:	ffffffff 	.word	0xffffffff
    3e64:	ffffffff 	.word	0xffffffff
    3e68:	ffffffff 	.word	0xffffffff
    3e6c:	ffffffff 	.word	0xffffffff
    3e70:	ffffffff 	.word	0xffffffff
    3e74:	ffffffff 	.word	0xffffffff
    3e78:	ffffffff 	.word	0xffffffff
    3e7c:	ffffffff 	.word	0xffffffff
    3e80:	ffffffff 	.word	0xffffffff
    3e84:	ffffffff 	.word	0xffffffff
    3e88:	ffffffff 	.word	0xffffffff
    3e8c:	ffffffff 	.word	0xffffffff
    3e90:	ffffffff 	.word	0xffffffff
    3e94:	ffffffff 	.word	0xffffffff
    3e98:	ffffffff 	.word	0xffffffff
    3e9c:	ffffffff 	.word	0xffffffff
    3ea0:	ffffffff 	.word	0xffffffff
    3ea4:	ffffffff 	.word	0xffffffff
    3ea8:	ffffffff 	.word	0xffffffff
    3eac:	ffffffff 	.word	0xffffffff
    3eb0:	ffffffff 	.word	0xffffffff
    3eb4:	ffffffff 	.word	0xffffffff
    3eb8:	ffffffff 	.word	0xffffffff
    3ebc:	ffffffff 	.word	0xffffffff
    3ec0:	ffffffff 	.word	0xffffffff
    3ec4:	ffffffff 	.word	0xffffffff
    3ec8:	ffffffff 	.word	0xffffffff
    3ecc:	ffffffff 	.word	0xffffffff
    3ed0:	ffffffff 	.word	0xffffffff
    3ed4:	ffffffff 	.word	0xffffffff
    3ed8:	ffffffff 	.word	0xffffffff
    3edc:	ffffffff 	.word	0xffffffff
    3ee0:	ffffffff 	.word	0xffffffff
    3ee4:	ffffffff 	.word	0xffffffff
    3ee8:	ffffffff 	.word	0xffffffff
    3eec:	ffffffff 	.word	0xffffffff
    3ef0:	ffffffff 	.word	0xffffffff
    3ef4:	ffffffff 	.word	0xffffffff
    3ef8:	ffffffff 	.word	0xffffffff
    3efc:	ffffffff 	.word	0xffffffff
    3f00:	ffffffff 	.word	0xffffffff
    3f04:	ffffffff 	.word	0xffffffff
    3f08:	ffffffff 	.word	0xffffffff
    3f0c:	ffffffff 	.word	0xffffffff
    3f10:	ffffffff 	.word	0xffffffff
    3f14:	ffffffff 	.word	0xffffffff
    3f18:	ffffffff 	.word	0xffffffff
    3f1c:	ffffffff 	.word	0xffffffff
    3f20:	ffffffff 	.word	0xffffffff
    3f24:	ffffffff 	.word	0xffffffff
    3f28:	ffffffff 	.word	0xffffffff
    3f2c:	ffffffff 	.word	0xffffffff
    3f30:	ffffffff 	.word	0xffffffff
    3f34:	ffffffff 	.word	0xffffffff
    3f38:	ffffffff 	.word	0xffffffff
    3f3c:	ffffffff 	.word	0xffffffff
    3f40:	ffffffff 	.word	0xffffffff
    3f44:	ffffffff 	.word	0xffffffff
    3f48:	ffffffff 	.word	0xffffffff
    3f4c:	ffffffff 	.word	0xffffffff
    3f50:	ffffffff 	.word	0xffffffff
    3f54:	ffffffff 	.word	0xffffffff
    3f58:	ffffffff 	.word	0xffffffff
    3f5c:	ffffffff 	.word	0xffffffff
    3f60:	ffffffff 	.word	0xffffffff
    3f64:	ffffffff 	.word	0xffffffff
    3f68:	ffffffff 	.word	0xffffffff
    3f6c:	ffffffff 	.word	0xffffffff
    3f70:	ffffffff 	.word	0xffffffff
    3f74:	ffffffff 	.word	0xffffffff
    3f78:	ffffffff 	.word	0xffffffff
    3f7c:	ffffffff 	.word	0xffffffff
    3f80:	ffffffff 	.word	0xffffffff
    3f84:	ffffffff 	.word	0xffffffff
    3f88:	ffffffff 	.word	0xffffffff
    3f8c:	ffffffff 	.word	0xffffffff
    3f90:	ffffffff 	.word	0xffffffff
    3f94:	ffffffff 	.word	0xffffffff
    3f98:	ffffffff 	.word	0xffffffff
    3f9c:	ffffffff 	.word	0xffffffff
    3fa0:	ffffffff 	.word	0xffffffff
    3fa4:	ffffffff 	.word	0xffffffff
    3fa8:	ffffffff 	.word	0xffffffff
    3fac:	ffffffff 	.word	0xffffffff
    3fb0:	ffffffff 	.word	0xffffffff
    3fb4:	ffffffff 	.word	0xffffffff
    3fb8:	ffffffff 	.word	0xffffffff
    3fbc:	ffffffff 	.word	0xffffffff
    3fc0:	ffffffff 	.word	0xffffffff
    3fc4:	ffffffff 	.word	0xffffffff
    3fc8:	ffffffff 	.word	0xffffffff
    3fcc:	ffffffff 	.word	0xffffffff
    3fd0:	ffffffff 	.word	0xffffffff
    3fd4:	ffffffff 	.word	0xffffffff
    3fd8:	ffffffff 	.word	0xffffffff
    3fdc:	ffffffff 	.word	0xffffffff
    3fe0:	ffffffff 	.word	0xffffffff
    3fe4:	ffffffff 	.word	0xffffffff
    3fe8:	ffffffff 	.word	0xffffffff
    3fec:	ffffffff 	.word	0xffffffff
    3ff0:	ffffffff 	.word	0xffffffff
    3ff4:	ffffffff 	.word	0xffffffff
    3ff8:	ffffffff 	.word	0xffffffff
    3ffc:	ffffffff 	.word	0xffffffff
    4000:	ffffffff 	.word	0xffffffff
    4004:	ffffffff 	.word	0xffffffff
    4008:	ffffffff 	.word	0xffffffff
    400c:	ffffffff 	.word	0xffffffff
    4010:	ffffffff 	.word	0xffffffff
    4014:	ffffffff 	.word	0xffffffff
    4018:	ffffffff 	.word	0xffffffff
    401c:	ffffffff 	.word	0xffffffff
    4020:	ffffffff 	.word	0xffffffff
    4024:	ffffffff 	.word	0xffffffff
    4028:	ffffffff 	.word	0xffffffff
    402c:	ffffffff 	.word	0xffffffff
    4030:	ffffffff 	.word	0xffffffff
    4034:	ffffffff 	.word	0xffffffff
    4038:	ffffffff 	.word	0xffffffff
    403c:	ffffffff 	.word	0xffffffff
    4040:	ffffffff 	.word	0xffffffff
    4044:	ffffffff 	.word	0xffffffff
    4048:	ffffffff 	.word	0xffffffff
    404c:	ffffffff 	.word	0xffffffff
    4050:	ffffffff 	.word	0xffffffff
    4054:	ffffffff 	.word	0xffffffff
    4058:	ffffffff 	.word	0xffffffff
    405c:	ffffffff 	.word	0xffffffff
    4060:	ffffffff 	.word	0xffffffff
    4064:	ffffffff 	.word	0xffffffff
    4068:	ffffffff 	.word	0xffffffff
    406c:	ffffffff 	.word	0xffffffff
    4070:	ffffffff 	.word	0xffffffff
    4074:	ffffffff 	.word	0xffffffff
    4078:	ffffffff 	.word	0xffffffff
    407c:	ffffffff 	.word	0xffffffff
    4080:	ffffffff 	.word	0xffffffff
    4084:	ffffffff 	.word	0xffffffff
    4088:	ffffffff 	.word	0xffffffff
    408c:	ffffffff 	.word	0xffffffff
    4090:	ffffffff 	.word	0xffffffff
    4094:	ffffffff 	.word	0xffffffff
    4098:	ffffffff 	.word	0xffffffff
    409c:	ffffffff 	.word	0xffffffff
    40a0:	ffffffff 	.word	0xffffffff
    40a4:	ffffffff 	.word	0xffffffff
    40a8:	ffffffff 	.word	0xffffffff
    40ac:	ffffffff 	.word	0xffffffff
    40b0:	ffffffff 	.word	0xffffffff
    40b4:	ffffffff 	.word	0xffffffff
    40b8:	ffffffff 	.word	0xffffffff
    40bc:	ffffffff 	.word	0xffffffff
    40c0:	ffffffff 	.word	0xffffffff
    40c4:	ffffffff 	.word	0xffffffff
    40c8:	ffffffff 	.word	0xffffffff
    40cc:	ffffffff 	.word	0xffffffff
    40d0:	ffffffff 	.word	0xffffffff
    40d4:	ffffffff 	.word	0xffffffff
    40d8:	ffffffff 	.word	0xffffffff
    40dc:	ffffffff 	.word	0xffffffff
    40e0:	ffffffff 	.word	0xffffffff
    40e4:	ffffffff 	.word	0xffffffff
    40e8:	ffffffff 	.word	0xffffffff
    40ec:	ffffffff 	.word	0xffffffff
    40f0:	ffffffff 	.word	0xffffffff
    40f4:	ffffffff 	.word	0xffffffff
    40f8:	ffffffff 	.word	0xffffffff
    40fc:	ffffffff 	.word	0xffffffff
    4100:	ffffffff 	.word	0xffffffff
    4104:	ffffffff 	.word	0xffffffff
    4108:	ffffffff 	.word	0xffffffff
    410c:	ffffffff 	.word	0xffffffff
    4110:	ffffffff 	.word	0xffffffff
    4114:	ffffffff 	.word	0xffffffff
    4118:	ffffffff 	.word	0xffffffff
    411c:	ffffffff 	.word	0xffffffff
    4120:	ffffffff 	.word	0xffffffff
    4124:	ffffffff 	.word	0xffffffff
    4128:	ffffffff 	.word	0xffffffff
    412c:	ffffffff 	.word	0xffffffff
    4130:	ffffffff 	.word	0xffffffff
    4134:	ffffffff 	.word	0xffffffff
    4138:	ffffffff 	.word	0xffffffff
    413c:	ffffffff 	.word	0xffffffff
    4140:	ffffffff 	.word	0xffffffff
    4144:	ffffffff 	.word	0xffffffff
    4148:	ffffffff 	.word	0xffffffff
    414c:	ffffffff 	.word	0xffffffff
    4150:	ffffffff 	.word	0xffffffff
    4154:	ffffffff 	.word	0xffffffff
    4158:	ffffffff 	.word	0xffffffff
    415c:	ffffffff 	.word	0xffffffff
    4160:	ffffffff 	.word	0xffffffff
    4164:	ffffffff 	.word	0xffffffff
    4168:	ffffffff 	.word	0xffffffff
    416c:	ffffffff 	.word	0xffffffff
    4170:	ffffffff 	.word	0xffffffff
    4174:	ffffffff 	.word	0xffffffff
    4178:	ffffffff 	.word	0xffffffff
    417c:	ffffffff 	.word	0xffffffff
    4180:	ffffffff 	.word	0xffffffff
    4184:	ffffffff 	.word	0xffffffff
    4188:	ffffffff 	.word	0xffffffff
    418c:	ffffffff 	.word	0xffffffff
    4190:	ffffffff 	.word	0xffffffff
    4194:	ffffffff 	.word	0xffffffff
    4198:	ffffffff 	.word	0xffffffff
    419c:	ffffffff 	.word	0xffffffff
    41a0:	ffffffff 	.word	0xffffffff
    41a4:	ffffffff 	.word	0xffffffff
    41a8:	ffffffff 	.word	0xffffffff
    41ac:	ffffffff 	.word	0xffffffff
    41b0:	ffffffff 	.word	0xffffffff
    41b4:	ffffffff 	.word	0xffffffff
    41b8:	ffffffff 	.word	0xffffffff
    41bc:	ffffffff 	.word	0xffffffff
    41c0:	ffffffff 	.word	0xffffffff
    41c4:	ffffffff 	.word	0xffffffff
    41c8:	ffffffff 	.word	0xffffffff
    41cc:	ffffffff 	.word	0xffffffff
    41d0:	ffffffff 	.word	0xffffffff
    41d4:	ffffffff 	.word	0xffffffff
    41d8:	ffffffff 	.word	0xffffffff
    41dc:	ffffffff 	.word	0xffffffff
    41e0:	ffffffff 	.word	0xffffffff
    41e4:	ffffffff 	.word	0xffffffff
    41e8:	ffffffff 	.word	0xffffffff
    41ec:	ffffffff 	.word	0xffffffff
    41f0:	ffffffff 	.word	0xffffffff
    41f4:	ffffffff 	.word	0xffffffff
    41f8:	ffffffff 	.word	0xffffffff
    41fc:	ffffffff 	.word	0xffffffff
    4200:	ffffffff 	.word	0xffffffff
    4204:	ffffffff 	.word	0xffffffff
    4208:	ffffffff 	.word	0xffffffff
    420c:	ffffffff 	.word	0xffffffff
    4210:	ffffffff 	.word	0xffffffff
    4214:	ffffffff 	.word	0xffffffff
    4218:	ffffffff 	.word	0xffffffff
    421c:	ffffffff 	.word	0xffffffff
    4220:	ffffffff 	.word	0xffffffff
    4224:	ffffffff 	.word	0xffffffff
    4228:	ffffffff 	.word	0xffffffff
    422c:	ffffffff 	.word	0xffffffff
    4230:	ffffffff 	.word	0xffffffff
    4234:	ffffffff 	.word	0xffffffff
    4238:	ffffffff 	.word	0xffffffff
    423c:	ffffffff 	.word	0xffffffff
    4240:	ffffffff 	.word	0xffffffff
    4244:	ffffffff 	.word	0xffffffff
    4248:	ffffffff 	.word	0xffffffff
    424c:	ffffffff 	.word	0xffffffff
    4250:	ffffffff 	.word	0xffffffff
    4254:	ffffffff 	.word	0xffffffff
    4258:	ffffffff 	.word	0xffffffff
    425c:	ffffffff 	.word	0xffffffff
    4260:	ffffffff 	.word	0xffffffff
    4264:	ffffffff 	.word	0xffffffff
    4268:	ffffffff 	.word	0xffffffff
    426c:	ffffffff 	.word	0xffffffff
    4270:	ffffffff 	.word	0xffffffff
    4274:	ffffffff 	.word	0xffffffff
    4278:	ffffffff 	.word	0xffffffff
    427c:	ffffffff 	.word	0xffffffff
    4280:	ffffffff 	.word	0xffffffff
    4284:	ffffffff 	.word	0xffffffff
    4288:	ffffffff 	.word	0xffffffff
    428c:	ffffffff 	.word	0xffffffff
    4290:	ffffffff 	.word	0xffffffff
    4294:	ffffffff 	.word	0xffffffff
    4298:	ffffffff 	.word	0xffffffff
    429c:	ffffffff 	.word	0xffffffff
    42a0:	ffffffff 	.word	0xffffffff
    42a4:	ffffffff 	.word	0xffffffff
    42a8:	ffffffff 	.word	0xffffffff
    42ac:	ffffffff 	.word	0xffffffff
    42b0:	ffffffff 	.word	0xffffffff
    42b4:	ffffffff 	.word	0xffffffff
    42b8:	ffffffff 	.word	0xffffffff
    42bc:	ffffffff 	.word	0xffffffff
    42c0:	ffffffff 	.word	0xffffffff
    42c4:	ffffffff 	.word	0xffffffff
    42c8:	ffffffff 	.word	0xffffffff
    42cc:	ffffffff 	.word	0xffffffff
    42d0:	ffffffff 	.word	0xffffffff
    42d4:	ffffffff 	.word	0xffffffff
    42d8:	ffffffff 	.word	0xffffffff
    42dc:	ffffffff 	.word	0xffffffff
    42e0:	ffffffff 	.word	0xffffffff
    42e4:	ffffffff 	.word	0xffffffff
    42e8:	ffffffff 	.word	0xffffffff
    42ec:	ffffffff 	.word	0xffffffff
    42f0:	ffffffff 	.word	0xffffffff
    42f4:	ffffffff 	.word	0xffffffff
    42f8:	ffffffff 	.word	0xffffffff
    42fc:	ffffffff 	.word	0xffffffff
    4300:	ffffffff 	.word	0xffffffff
    4304:	ffffffff 	.word	0xffffffff
    4308:	ffffffff 	.word	0xffffffff
    430c:	ffffffff 	.word	0xffffffff
    4310:	ffffffff 	.word	0xffffffff
    4314:	ffffffff 	.word	0xffffffff
    4318:	ffffffff 	.word	0xffffffff
    431c:	ffffffff 	.word	0xffffffff
    4320:	ffffffff 	.word	0xffffffff
    4324:	ffffffff 	.word	0xffffffff
    4328:	ffffffff 	.word	0xffffffff
    432c:	ffffffff 	.word	0xffffffff
    4330:	ffffffff 	.word	0xffffffff
    4334:	ffffffff 	.word	0xffffffff
    4338:	ffffffff 	.word	0xffffffff
    433c:	ffffffff 	.word	0xffffffff
    4340:	ffffffff 	.word	0xffffffff
    4344:	ffffffff 	.word	0xffffffff
    4348:	ffffffff 	.word	0xffffffff
    434c:	ffffffff 	.word	0xffffffff
    4350:	ffffffff 	.word	0xffffffff
    4354:	ffffffff 	.word	0xffffffff
    4358:	ffffffff 	.word	0xffffffff
    435c:	ffffffff 	.word	0xffffffff
    4360:	ffffffff 	.word	0xffffffff
    4364:	ffffffff 	.word	0xffffffff
    4368:	ffffffff 	.word	0xffffffff
    436c:	ffffffff 	.word	0xffffffff
    4370:	ffffffff 	.word	0xffffffff
    4374:	ffffffff 	.word	0xffffffff
    4378:	ffffffff 	.word	0xffffffff
    437c:	ffffffff 	.word	0xffffffff
    4380:	ffffffff 	.word	0xffffffff
    4384:	ffffffff 	.word	0xffffffff
    4388:	ffffffff 	.word	0xffffffff
    438c:	ffffffff 	.word	0xffffffff
    4390:	ffffffff 	.word	0xffffffff
    4394:	ffffffff 	.word	0xffffffff
    4398:	ffffffff 	.word	0xffffffff
    439c:	ffffffff 	.word	0xffffffff
    43a0:	ffffffff 	.word	0xffffffff
    43a4:	ffffffff 	.word	0xffffffff
    43a8:	ffffffff 	.word	0xffffffff
    43ac:	ffffffff 	.word	0xffffffff
    43b0:	ffffffff 	.word	0xffffffff
    43b4:	ffffffff 	.word	0xffffffff
    43b8:	ffffffff 	.word	0xffffffff
    43bc:	ffffffff 	.word	0xffffffff
    43c0:	ffffffff 	.word	0xffffffff
    43c4:	ffffffff 	.word	0xffffffff
    43c8:	ffffffff 	.word	0xffffffff
    43cc:	ffffffff 	.word	0xffffffff
    43d0:	ffffffff 	.word	0xffffffff
    43d4:	ffffffff 	.word	0xffffffff
    43d8:	ffffffff 	.word	0xffffffff
    43dc:	ffffffff 	.word	0xffffffff
    43e0:	ffffffff 	.word	0xffffffff
    43e4:	ffffffff 	.word	0xffffffff
    43e8:	ffffffff 	.word	0xffffffff
    43ec:	ffffffff 	.word	0xffffffff
    43f0:	ffffffff 	.word	0xffffffff
    43f4:	ffffffff 	.word	0xffffffff
    43f8:	ffffffff 	.word	0xffffffff
    43fc:	ffffffff 	.word	0xffffffff

00004400 <pds_ff_PDS_FREEZER>:
    4400:	00010006 200002a0 00000000 00000000     ....... ........

00004410 <pds_ff_PDS_EDC_ID>:
    4410:	00010007 200026d1 00000000 00000000     .....&. ........

00004420 <pds_ff_PDS_CONNECTION_TABLE_ID>:
    4420:	00320005 20002674 00000000 00000000     ..2.t&. ........

00004430 <pds_ff_PDS_CONNECTION_MODE_ID>:
    4430:	00010004 20000010 00000000 00000000     ....... ........

00004440 <pds_ff_PDS_CURRENT_CHANNEL_ID>:
    4440:	00010003 20000011 00000000 00000000     ....... ........

00004450 <pds_ff_PDS_PANID_ID>:
    4450:	00020002 200026c8 00000000 00000000     .....&. ........

00004460 <pds_ff_PDS_OUTGOING_FRAME_COUNTER_ID>:
    4460:	00040001 20002134 00000000 00000000     ....4!. ........

00004470 <__do_global_dtors_aux>:
    4470:	b510      	push	{r4, lr}
    4472:	4c06      	ldr	r4, [pc, #24]	; (448c <__do_global_dtors_aux+0x1c>)
    4474:	7823      	ldrb	r3, [r4, #0]
    4476:	2b00      	cmp	r3, #0
    4478:	d107      	bne.n	448a <__do_global_dtors_aux+0x1a>
    447a:	4b05      	ldr	r3, [pc, #20]	; (4490 <__do_global_dtors_aux+0x20>)
    447c:	2b00      	cmp	r3, #0
    447e:	d002      	beq.n	4486 <__do_global_dtors_aux+0x16>
    4480:	4804      	ldr	r0, [pc, #16]	; (4494 <__do_global_dtors_aux+0x24>)
    4482:	e000      	b.n	4486 <__do_global_dtors_aux+0x16>
    4484:	bf00      	nop
    4486:	2301      	movs	r3, #1
    4488:	7023      	strb	r3, [r4, #0]
    448a:	bd10      	pop	{r4, pc}
    448c:	20000088 	.word	0x20000088
    4490:	00000000 	.word	0x00000000
    4494:	000192f4 	.word	0x000192f4

00004498 <frame_dummy>:
    4498:	4b08      	ldr	r3, [pc, #32]	; (44bc <frame_dummy+0x24>)
    449a:	b510      	push	{r4, lr}
    449c:	2b00      	cmp	r3, #0
    449e:	d003      	beq.n	44a8 <frame_dummy+0x10>
    44a0:	4907      	ldr	r1, [pc, #28]	; (44c0 <frame_dummy+0x28>)
    44a2:	4808      	ldr	r0, [pc, #32]	; (44c4 <frame_dummy+0x2c>)
    44a4:	e000      	b.n	44a8 <frame_dummy+0x10>
    44a6:	bf00      	nop
    44a8:	4807      	ldr	r0, [pc, #28]	; (44c8 <frame_dummy+0x30>)
    44aa:	6803      	ldr	r3, [r0, #0]
    44ac:	2b00      	cmp	r3, #0
    44ae:	d100      	bne.n	44b2 <frame_dummy+0x1a>
    44b0:	bd10      	pop	{r4, pc}
    44b2:	4b06      	ldr	r3, [pc, #24]	; (44cc <frame_dummy+0x34>)
    44b4:	2b00      	cmp	r3, #0
    44b6:	d0fb      	beq.n	44b0 <frame_dummy+0x18>
    44b8:	4798      	blx	r3
    44ba:	e7f9      	b.n	44b0 <frame_dummy+0x18>
    44bc:	00000000 	.word	0x00000000
    44c0:	2000008c 	.word	0x2000008c
    44c4:	000192f4 	.word	0x000192f4
    44c8:	000192f4 	.word	0x000192f4
    44cc:	00000000 	.word	0x00000000

000044d0 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    44d0:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    44d2:	2000      	movs	r0, #0
    44d4:	4b08      	ldr	r3, [pc, #32]	; (44f8 <delay_init+0x28>)
    44d6:	4798      	blx	r3
    44d8:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    44da:	4c08      	ldr	r4, [pc, #32]	; (44fc <delay_init+0x2c>)
    44dc:	21fa      	movs	r1, #250	; 0xfa
    44de:	0089      	lsls	r1, r1, #2
    44e0:	47a0      	blx	r4
    44e2:	4b07      	ldr	r3, [pc, #28]	; (4500 <delay_init+0x30>)
    44e4:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    44e6:	4907      	ldr	r1, [pc, #28]	; (4504 <delay_init+0x34>)
    44e8:	0028      	movs	r0, r5
    44ea:	47a0      	blx	r4
    44ec:	4b06      	ldr	r3, [pc, #24]	; (4508 <delay_init+0x38>)
    44ee:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    44f0:	2205      	movs	r2, #5
    44f2:	4b06      	ldr	r3, [pc, #24]	; (450c <delay_init+0x3c>)
    44f4:	601a      	str	r2, [r3, #0]
}
    44f6:	bd70      	pop	{r4, r5, r6, pc}
    44f8:	00006989 	.word	0x00006989
    44fc:	000139e5 	.word	0x000139e5
    4500:	20000000 	.word	0x20000000
    4504:	000f4240 	.word	0x000f4240
    4508:	20000004 	.word	0x20000004
    450c:	e000e010 	.word	0xe000e010

00004510 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    4510:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    4512:	4b08      	ldr	r3, [pc, #32]	; (4534 <delay_cycles_us+0x24>)
    4514:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    4516:	4a08      	ldr	r2, [pc, #32]	; (4538 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    4518:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    451a:	2180      	movs	r1, #128	; 0x80
    451c:	0249      	lsls	r1, r1, #9
	while (n--) {
    451e:	3801      	subs	r0, #1
    4520:	d307      	bcc.n	4532 <delay_cycles_us+0x22>
	if (n > 0) {
    4522:	2c00      	cmp	r4, #0
    4524:	d0fb      	beq.n	451e <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    4526:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    4528:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    452a:	6813      	ldr	r3, [r2, #0]
    452c:	420b      	tst	r3, r1
    452e:	d0fc      	beq.n	452a <delay_cycles_us+0x1a>
    4530:	e7f5      	b.n	451e <delay_cycles_us+0xe>
	}
}
    4532:	bd30      	pop	{r4, r5, pc}
    4534:	20000004 	.word	0x20000004
    4538:	e000e010 	.word	0xe000e010

0000453c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    453c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    453e:	4b08      	ldr	r3, [pc, #32]	; (4560 <delay_cycles_ms+0x24>)
    4540:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    4542:	4a08      	ldr	r2, [pc, #32]	; (4564 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    4544:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    4546:	2180      	movs	r1, #128	; 0x80
    4548:	0249      	lsls	r1, r1, #9
	while (n--) {
    454a:	3801      	subs	r0, #1
    454c:	d307      	bcc.n	455e <delay_cycles_ms+0x22>
	if (n > 0) {
    454e:	2c00      	cmp	r4, #0
    4550:	d0fb      	beq.n	454a <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    4552:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    4554:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    4556:	6813      	ldr	r3, [r2, #0]
    4558:	420b      	tst	r3, r1
    455a:	d0fc      	beq.n	4556 <delay_cycles_ms+0x1a>
    455c:	e7f5      	b.n	454a <delay_cycles_ms+0xe>
	}
}
    455e:	bd30      	pop	{r4, r5, pc}
    4560:	20000000 	.word	0x20000000
    4564:	e000e010 	.word	0xe000e010

00004568 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    4568:	4b0c      	ldr	r3, [pc, #48]	; (459c <cpu_irq_enter_critical+0x34>)
    456a:	681b      	ldr	r3, [r3, #0]
    456c:	2b00      	cmp	r3, #0
    456e:	d106      	bne.n	457e <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4570:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    4574:	2b00      	cmp	r3, #0
    4576:	d007      	beq.n	4588 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    4578:	2200      	movs	r2, #0
    457a:	4b09      	ldr	r3, [pc, #36]	; (45a0 <cpu_irq_enter_critical+0x38>)
    457c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    457e:	4a07      	ldr	r2, [pc, #28]	; (459c <cpu_irq_enter_critical+0x34>)
    4580:	6813      	ldr	r3, [r2, #0]
    4582:	3301      	adds	r3, #1
    4584:	6013      	str	r3, [r2, #0]
}
    4586:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    4588:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    458a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    458e:	2200      	movs	r2, #0
    4590:	4b04      	ldr	r3, [pc, #16]	; (45a4 <cpu_irq_enter_critical+0x3c>)
    4592:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    4594:	3201      	adds	r2, #1
    4596:	4b02      	ldr	r3, [pc, #8]	; (45a0 <cpu_irq_enter_critical+0x38>)
    4598:	701a      	strb	r2, [r3, #0]
    459a:	e7f0      	b.n	457e <cpu_irq_enter_critical+0x16>
    459c:	200000a4 	.word	0x200000a4
    45a0:	200000a8 	.word	0x200000a8
    45a4:	20000008 	.word	0x20000008

000045a8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    45a8:	4b08      	ldr	r3, [pc, #32]	; (45cc <cpu_irq_leave_critical+0x24>)
    45aa:	681a      	ldr	r2, [r3, #0]
    45ac:	3a01      	subs	r2, #1
    45ae:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    45b0:	681b      	ldr	r3, [r3, #0]
    45b2:	2b00      	cmp	r3, #0
    45b4:	d109      	bne.n	45ca <cpu_irq_leave_critical+0x22>
    45b6:	4b06      	ldr	r3, [pc, #24]	; (45d0 <cpu_irq_leave_critical+0x28>)
    45b8:	781b      	ldrb	r3, [r3, #0]
    45ba:	2b00      	cmp	r3, #0
    45bc:	d005      	beq.n	45ca <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    45be:	2201      	movs	r2, #1
    45c0:	4b04      	ldr	r3, [pc, #16]	; (45d4 <cpu_irq_leave_critical+0x2c>)
    45c2:	701a      	strb	r2, [r3, #0]
    45c4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    45c8:	b662      	cpsie	i
	}
}
    45ca:	4770      	bx	lr
    45cc:	200000a4 	.word	0x200000a4
    45d0:	200000a8 	.word	0x200000a8
    45d4:	20000008 	.word	0x20000008

000045d8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    45d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    45da:	46c6      	mov	lr, r8
    45dc:	b500      	push	{lr}
    45de:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    45e0:	ac01      	add	r4, sp, #4
    45e2:	2501      	movs	r5, #1
    45e4:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    45e6:	2300      	movs	r3, #0
    45e8:	4698      	mov	r8, r3
    45ea:	70a3      	strb	r3, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    45ec:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    45ee:	0021      	movs	r1, r4
    45f0:	2013      	movs	r0, #19
    45f2:	4e12      	ldr	r6, [pc, #72]	; (463c <system_board_init+0x64>)
    45f4:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    45f6:	4f12      	ldr	r7, [pc, #72]	; (4640 <system_board_init+0x68>)
    45f8:	2380      	movs	r3, #128	; 0x80
    45fa:	031b      	lsls	r3, r3, #12
    45fc:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    45fe:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_1_PIN, &pin_conf);
    4600:	0021      	movs	r1, r4
    4602:	2012      	movs	r0, #18
    4604:	47b0      	blx	r6
    4606:	2380      	movs	r3, #128	; 0x80
    4608:	02db      	lsls	r3, r3, #11
    460a:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_1_PIN, LED_1_INACTIVE);
#ifdef RFSWITCH_ENABLE
	/* Configure RFSWITCH as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    460c:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(RF_SWITCH_PIN, &pin_conf);
    460e:	0021      	movs	r1, r4
    4610:	200d      	movs	r0, #13
    4612:	47b0      	blx	r6
	} else {
		port_base->OUTCLR.reg = pin_mask;
    4614:	2380      	movs	r3, #128	; 0x80
    4616:	019b      	lsls	r3, r3, #6
    4618:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
#endif

#ifdef TCXO_ENABLE
	/* Configure TXPO PWR as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    461a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(TCXO_PWR_PIN, &pin_conf);
    461c:	0021      	movs	r1, r4
    461e:	2009      	movs	r0, #9
    4620:	47b0      	blx	r6
    4622:	2380      	movs	r3, #128	; 0x80
    4624:	009b      	lsls	r3, r3, #2
    4626:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    4628:	4643      	mov	r3, r8
    462a:	7023      	strb	r3, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    462c:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    462e:	0021      	movs	r1, r4
    4630:	201c      	movs	r0, #28
    4632:	47b0      	blx	r6
		
}
    4634:	b002      	add	sp, #8
    4636:	bc04      	pop	{r2}
    4638:	4690      	mov	r8, r2
    463a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    463c:	00004ca1 	.word	0x00004ca1
    4640:	40002800 	.word	0x40002800

00004644 <aes_get_config_defaults>:
		struct aes_config *const config)
{

	/* Sanity check arguments */
	Assert(config);
	config->encrypt_mode = AES_ENCRYPTION;
    4644:	2301      	movs	r3, #1
    4646:	7003      	strb	r3, [r0, #0]
	config->key_size = AES_KEY_SIZE_128;
    4648:	2300      	movs	r3, #0
    464a:	7043      	strb	r3, [r0, #1]
	config->start_mode = AES_MANUAL_START;
    464c:	7083      	strb	r3, [r0, #2]
	config->opmode= AES_ECB_MODE;
    464e:	70c3      	strb	r3, [r0, #3]
	config->cfb_size = AES_CFB_SIZE_128;
    4650:	7103      	strb	r3, [r0, #4]
	config->ctype = AES_COUNTERMEASURE_TYPE_ALL;
    4652:	220f      	movs	r2, #15
    4654:	7142      	strb	r2, [r0, #5]
	config->enable_xor_key = false;
    4656:	7183      	strb	r3, [r0, #6]
	config->enable_key_gen = false;
    4658:	71c3      	strb	r3, [r0, #7]
	config->lod = false;
    465a:	7203      	strb	r3, [r0, #8]
}
    465c:	4770      	bx	lr

0000465e <aes_enable>:
 */
void aes_enable(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLA.reg |= AES_CTRLA_ENABLE;
    465e:	6802      	ldr	r2, [r0, #0]
    4660:	6813      	ldr	r3, [r2, #0]
    4662:	2102      	movs	r1, #2
    4664:	430b      	orrs	r3, r1
    4666:	6013      	str	r3, [r2, #0]

}
    4668:	4770      	bx	lr

0000466a <aes_disable>:
{
	Assert(module);
	Assert(module->hw);

	/* Disbale interrupt */
	module->hw->INTENCLR.reg = AES_INTENCLR_MASK;
    466a:	2303      	movs	r3, #3
    466c:	6802      	ldr	r2, [r0, #0]
    466e:	7153      	strb	r3, [r2, #5]
	/* Clear interrupt flag */
	module->hw->INTFLAG.reg = AES_INTFLAG_MASK;
    4670:	6802      	ldr	r2, [r0, #0]
    4672:	71d3      	strb	r3, [r2, #7]

	module->hw->CTRLA.reg &= (~AES_CTRLA_ENABLE);
    4674:	6802      	ldr	r2, [r0, #0]
    4676:	6813      	ldr	r3, [r2, #0]
    4678:	2102      	movs	r1, #2
    467a:	438b      	bics	r3, r1
    467c:	6013      	str	r3, [r2, #0]
}
    467e:	4770      	bx	lr

00004680 <aes_set_config>:
 */
void aes_set_config(
		struct aes_module *const module,
		Aes *const hw,
		struct aes_config *const config)
{
    4680:	b570      	push	{r4, r5, r6, lr}
    4682:	0004      	movs	r4, r0
    4684:	000d      	movs	r5, r1
	/* Validate arguments. */
	Assert(hw);
	Assert(config);
	Assert(module);

	module->opmode = config->opmode;
    4686:	78d3      	ldrb	r3, [r2, #3]
    4688:	7103      	strb	r3, [r0, #4]
	module->hw = hw;
    468a:	6021      	str	r1, [r4, #0]
	module->key_size = config->key_size;
    468c:	7853      	ldrb	r3, [r2, #1]
    468e:	7143      	strb	r3, [r0, #5]
	module->cfb_size = config->cfb_size;
    4690:	7913      	ldrb	r3, [r2, #4]
    4692:	7183      	strb	r3, [r0, #6]

	ul_mode |= (config->encrypt_mode << AES_CTRLA_CIPHER_Pos)
    4694:	7813      	ldrb	r3, [r2, #0]
    4696:	029b      	lsls	r3, r3, #10
			 | (config->start_mode << AES_CTRLA_STARTMODE_Pos)
    4698:	7891      	ldrb	r1, [r2, #2]
    469a:	02c9      	lsls	r1, r1, #11
    469c:	430b      	orrs	r3, r1
			 | (config->key_size << AES_CTRLA_KEYSIZE_Pos)
    469e:	7851      	ldrb	r1, [r2, #1]
    46a0:	0209      	lsls	r1, r1, #8
    46a2:	430b      	orrs	r3, r1
			 | (config->opmode << AES_CTRLA_AESMODE_Pos)
    46a4:	78d1      	ldrb	r1, [r2, #3]
    46a6:	0089      	lsls	r1, r1, #2
    46a8:	430b      	orrs	r3, r1
			 | (config->cfb_size << AES_CTRLA_CFBS_Pos)
    46aa:	7911      	ldrb	r1, [r2, #4]
    46ac:	0149      	lsls	r1, r1, #5
    46ae:	430b      	orrs	r3, r1
			 | (AES_CTRLA_CTYPE(config->ctype))
			 | (config->enable_xor_key << AES_CTRLA_XORKEY_Pos)
    46b0:	7991      	ldrb	r1, [r2, #6]
    46b2:	0389      	lsls	r1, r1, #14
			 | (config->enable_key_gen << AES_CTRLA_KEYGEN_Pos)
    46b4:	79d0      	ldrb	r0, [r2, #7]
    46b6:	0340      	lsls	r0, r0, #13
			 | (config->lod << AES_CTRLA_LOD_Pos);
    46b8:	4301      	orrs	r1, r0
    46ba:	7a10      	ldrb	r0, [r2, #8]
    46bc:	0300      	lsls	r0, r0, #12
    46be:	4301      	orrs	r1, r0
			 | (AES_CTRLA_CTYPE(config->ctype))
    46c0:	7952      	ldrb	r2, [r2, #5]
    46c2:	0412      	lsls	r2, r2, #16
    46c4:	20f0      	movs	r0, #240	; 0xf0
    46c6:	0300      	lsls	r0, r0, #12
    46c8:	4002      	ands	r2, r0
			 | (config->lod << AES_CTRLA_LOD_Pos);
    46ca:	430a      	orrs	r2, r1
    46cc:	4313      	orrs	r3, r2
    46ce:	001e      	movs	r6, r3
	if (hw->CTRLA.reg & AES_CTRLA_ENABLE) {
    46d0:	682b      	ldr	r3, [r5, #0]
    46d2:	079b      	lsls	r3, r3, #30
    46d4:	d401      	bmi.n	46da <aes_set_config+0x5a>
		aes_disable(module);
		hw->CTRLA.reg = ul_mode;
		aes_enable(module);
	} else {
		hw->CTRLA.reg = ul_mode;
    46d6:	602e      	str	r6, [r5, #0]
	}
}
    46d8:	bd70      	pop	{r4, r5, r6, pc}
		aes_disable(module);
    46da:	0020      	movs	r0, r4
    46dc:	4b03      	ldr	r3, [pc, #12]	; (46ec <aes_set_config+0x6c>)
    46de:	4798      	blx	r3
		hw->CTRLA.reg = ul_mode;
    46e0:	602e      	str	r6, [r5, #0]
		aes_enable(module);
    46e2:	0020      	movs	r0, r4
    46e4:	4b02      	ldr	r3, [pc, #8]	; (46f0 <aes_set_config+0x70>)
    46e6:	4798      	blx	r3
    46e8:	e7f6      	b.n	46d8 <aes_set_config+0x58>
    46ea:	46c0      	nop			; (mov r8, r8)
    46ec:	0000466b 	.word	0x0000466b
    46f0:	0000465f 	.word	0x0000465f

000046f4 <aes_init>:
{
    46f4:	b570      	push	{r4, r5, r6, lr}
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    46f6:	4c05      	ldr	r4, [pc, #20]	; (470c <aes_init+0x18>)
    46f8:	69e5      	ldr	r5, [r4, #28]
    46fa:	2380      	movs	r3, #128	; 0x80
    46fc:	019b      	lsls	r3, r3, #6
    46fe:	432b      	orrs	r3, r5
    4700:	61e3      	str	r3, [r4, #28]
	hw->CTRLA.reg = AES_CTRLA_SWRST;
    4702:	2301      	movs	r3, #1
    4704:	600b      	str	r3, [r1, #0]
	aes_set_config(module,hw, config);
    4706:	4b02      	ldr	r3, [pc, #8]	; (4710 <aes_init+0x1c>)
    4708:	4798      	blx	r3
}
    470a:	bd70      	pop	{r4, r5, r6, pc}
    470c:	40000400 	.word	0x40000400
    4710:	00004681 	.word	0x00004681

00004714 <aes_write_key>:
 * \note The key size depends on the current AES configuration.
 */
void aes_write_key(
		struct aes_module *const module,
		const uint32_t *key)
{
    4714:	b570      	push	{r4, r5, r6, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(key);

	switch (module->key_size) {
    4716:	7943      	ldrb	r3, [r0, #5]
    4718:	2b01      	cmp	r3, #1
    471a:	d005      	beq.n	4728 <aes_write_key+0x14>
    471c:	2b00      	cmp	r3, #0
    471e:	d010      	beq.n	4742 <aes_write_key+0x2e>
    4720:	2b02      	cmp	r3, #2
    4722:	d10d      	bne.n	4740 <aes_write_key+0x2c>
	case AES_KEY_SIZE_192:
		key_length = 6;
		break;

	case AES_KEY_SIZE_256:
		key_length = 8;
    4724:	2508      	movs	r5, #8
    4726:	e000      	b.n	472a <aes_write_key+0x16>
		key_length = 6;
    4728:	2506      	movs	r5, #6
{
    472a:	2300      	movs	r3, #0
	default:
		break;
	}

	for (i = 0; i < key_length; i++) {
		module->hw->KEYWORD[i].reg = *key;
    472c:	c910      	ldmia	r1!, {r4}
    472e:	1c9a      	adds	r2, r3, #2
    4730:	0092      	lsls	r2, r2, #2
    4732:	6806      	ldr	r6, [r0, #0]
    4734:	46b4      	mov	ip, r6
    4736:	4462      	add	r2, ip
    4738:	6054      	str	r4, [r2, #4]
	for (i = 0; i < key_length; i++) {
    473a:	3301      	adds	r3, #1
    473c:	42ab      	cmp	r3, r5
    473e:	d3f5      	bcc.n	472c <aes_write_key+0x18>
		key++;
	}
}
    4740:	bd70      	pop	{r4, r5, r6, pc}
		key_length = 4;
    4742:	2504      	movs	r5, #4
    4744:	e7f1      	b.n	472a <aes_write_key+0x16>
    4746:	Address 0x00004746 is out of bounds.


00004748 <aes_write_input_data>:
 * \param[in] input_data_buffer Pointer to an input data buffer
 */
void aes_write_input_data(
		struct aes_module *const module,
		const uint32_t *input_data_buffer)
{
    4748:	b510      	push	{r4, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);;
	Assert(input_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
    474a:	2300      	movs	r3, #0
    474c:	6802      	ldr	r2, [r0, #0]
    474e:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
    4750:	4b0f      	ldr	r3, [pc, #60]	; (4790 <aes_write_input_data+0x48>)
    4752:	6842      	ldr	r2, [r0, #4]
    4754:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
    4756:	4a0f      	ldr	r2, [pc, #60]	; (4794 <aes_write_input_data+0x4c>)
    4758:	4293      	cmp	r3, r2
    475a:	d00a      	beq.n	4772 <aes_write_input_data+0x2a>
		for (i = 0; i < 2; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
			input_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
    475c:	7903      	ldrb	r3, [r0, #4]
    475e:	2b03      	cmp	r3, #3
    4760:	d00e      	beq.n	4780 <aes_write_input_data+0x38>
    4762:	000c      	movs	r4, r1
    4764:	3410      	adds	r4, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		module->hw->INDATA.reg = *input_data_buffer;
	} else {
		for (i = 0; i < 4; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
    4766:	6803      	ldr	r3, [r0, #0]
    4768:	c904      	ldmia	r1!, {r2}
    476a:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < 4; i++) {
    476c:	428c      	cmp	r4, r1
    476e:	d1fa      	bne.n	4766 <aes_write_input_data+0x1e>
			input_data_buffer++;
		}
	}
}
    4770:	bd10      	pop	{r4, pc}
			module->hw->INDATA.reg = *input_data_buffer;
    4772:	6803      	ldr	r3, [r0, #0]
    4774:	680a      	ldr	r2, [r1, #0]
    4776:	639a      	str	r2, [r3, #56]	; 0x38
    4778:	6803      	ldr	r3, [r0, #0]
    477a:	684a      	ldr	r2, [r1, #4]
    477c:	639a      	str	r2, [r3, #56]	; 0x38
    477e:	e7f7      	b.n	4770 <aes_write_input_data+0x28>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
    4780:	7983      	ldrb	r3, [r0, #6]
    4782:	3b02      	subs	r3, #2
    4784:	2b01      	cmp	r3, #1
    4786:	d8ec      	bhi.n	4762 <aes_write_input_data+0x1a>
		module->hw->INDATA.reg = *input_data_buffer;
    4788:	6803      	ldr	r3, [r0, #0]
    478a:	680a      	ldr	r2, [r1, #0]
    478c:	639a      	str	r2, [r3, #56]	; 0x38
    478e:	e7ef      	b.n	4770 <aes_write_input_data+0x28>
    4790:	00ff00ff 	.word	0x00ff00ff
    4794:	00010003 	.word	0x00010003

00004798 <aes_read_output_data>:
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(output_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
    4798:	2300      	movs	r3, #0
    479a:	6802      	ldr	r2, [r0, #0]
    479c:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
    479e:	4b10      	ldr	r3, [pc, #64]	; (47e0 <aes_read_output_data+0x48>)
    47a0:	6842      	ldr	r2, [r0, #4]
    47a2:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
    47a4:	4a0f      	ldr	r2, [pc, #60]	; (47e4 <aes_read_output_data+0x4c>)
    47a6:	4293      	cmp	r3, r2
    47a8:	d00a      	beq.n	47c0 <aes_read_output_data+0x28>
		for (i = 0; i < 2; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
			output_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
    47aa:	7903      	ldrb	r3, [r0, #4]
    47ac:	2b03      	cmp	r3, #3
    47ae:	d00e      	beq.n	47ce <aes_read_output_data+0x36>
    47b0:	000a      	movs	r2, r1
    47b2:	3210      	adds	r2, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		*output_data_buffer = module->hw->INDATA.reg;
	} else {
		for (i = 0; i < 4; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
    47b4:	6803      	ldr	r3, [r0, #0]
    47b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    47b8:	c108      	stmia	r1!, {r3}
		for (i = 0; i < 4; i++) {
    47ba:	428a      	cmp	r2, r1
    47bc:	d1fa      	bne.n	47b4 <aes_read_output_data+0x1c>
			output_data_buffer++;
		}
	}
}
    47be:	4770      	bx	lr
			*output_data_buffer = module->hw->INDATA.reg;
    47c0:	6803      	ldr	r3, [r0, #0]
    47c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    47c4:	600b      	str	r3, [r1, #0]
    47c6:	6803      	ldr	r3, [r0, #0]
    47c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    47ca:	604b      	str	r3, [r1, #4]
    47cc:	e7f7      	b.n	47be <aes_read_output_data+0x26>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
    47ce:	7983      	ldrb	r3, [r0, #6]
    47d0:	3b02      	subs	r3, #2
    47d2:	2b01      	cmp	r3, #1
    47d4:	d8ec      	bhi.n	47b0 <aes_read_output_data+0x18>
		*output_data_buffer = module->hw->INDATA.reg;
    47d6:	6803      	ldr	r3, [r0, #0]
    47d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    47da:	600b      	str	r3, [r1, #0]
    47dc:	e7ef      	b.n	47be <aes_read_output_data+0x26>
    47de:	46c0      	nop			; (mov r8, r8)
    47e0:	00ff00ff 	.word	0x00ff00ff
    47e4:	00010003 	.word	0x00010003

000047e8 <AES_Handler>:

/**
* \internal The AES interrupt handler.
*/
void AES_Handler(void)
{
    47e8:	b510      	push	{r4, lr}
	uint32_t status = AES->INTFLAG.reg;
    47ea:	4b0c      	ldr	r3, [pc, #48]	; (481c <AES_Handler+0x34>)
    47ec:	79dc      	ldrb	r4, [r3, #7]
    47ee:	b2e4      	uxtb	r4, r4

	if (status & AES_INTFLAG_ENCCMP) {
    47f0:	07e3      	lsls	r3, r4, #31
    47f2:	d507      	bpl.n	4804 <AES_Handler+0x1c>
		if (aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]) {
    47f4:	4b0a      	ldr	r3, [pc, #40]	; (4820 <AES_Handler+0x38>)
    47f6:	681b      	ldr	r3, [r3, #0]
    47f8:	2b00      	cmp	r3, #0
    47fa:	d00d      	beq.n	4818 <AES_Handler+0x30>
			AES->INTFLAG.reg = AES_INTFLAG_ENCCMP;
    47fc:	2101      	movs	r1, #1
    47fe:	4a07      	ldr	r2, [pc, #28]	; (481c <AES_Handler+0x34>)
    4800:	71d1      	strb	r1, [r2, #7]
			aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]();
    4802:	4798      	blx	r3
		}
	}

	if (status & AES_INTFLAG_GFMCMP) {
    4804:	07a3      	lsls	r3, r4, #30
    4806:	d507      	bpl.n	4818 <AES_Handler+0x30>
		if (aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]) {
    4808:	4b05      	ldr	r3, [pc, #20]	; (4820 <AES_Handler+0x38>)
    480a:	681b      	ldr	r3, [r3, #0]
    480c:	2b00      	cmp	r3, #0
    480e:	d003      	beq.n	4818 <AES_Handler+0x30>
			AES->INTFLAG.reg = AES_INTFLAG_GFMCMP;
    4810:	2102      	movs	r1, #2
    4812:	4a02      	ldr	r2, [pc, #8]	; (481c <AES_Handler+0x34>)
    4814:	71d1      	strb	r1, [r2, #7]
			aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]();
    4816:	4798      	blx	r3
		}
	}
}
    4818:	bd10      	pop	{r4, pc}
    481a:	46c0      	nop			; (mov r8, r8)
    481c:	42003400 	.word	0x42003400
    4820:	200000ac 	.word	0x200000ac

00004824 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4824:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    4826:	2a00      	cmp	r2, #0
    4828:	d001      	beq.n	482e <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    482a:	0018      	movs	r0, r3
    482c:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    482e:	008b      	lsls	r3, r1, #2
    4830:	4a06      	ldr	r2, [pc, #24]	; (484c <extint_register_callback+0x28>)
    4832:	589b      	ldr	r3, [r3, r2]
    4834:	2b00      	cmp	r3, #0
    4836:	d003      	beq.n	4840 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    4838:	4283      	cmp	r3, r0
    483a:	d005      	beq.n	4848 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    483c:	231d      	movs	r3, #29
    483e:	e7f4      	b.n	482a <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    4840:	0089      	lsls	r1, r1, #2
    4842:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    4844:	2300      	movs	r3, #0
    4846:	e7f0      	b.n	482a <extint_register_callback+0x6>
		return STATUS_OK;
    4848:	2300      	movs	r3, #0
    484a:	e7ee      	b.n	482a <extint_register_callback+0x6>
    484c:	20001ee8 	.word	0x20001ee8

00004850 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4850:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    4852:	2900      	cmp	r1, #0
    4854:	d001      	beq.n	485a <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    4856:	0018      	movs	r0, r3
    4858:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    485a:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    485c:	281f      	cmp	r0, #31
    485e:	d800      	bhi.n	4862 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    4860:	4a02      	ldr	r2, [pc, #8]	; (486c <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    4862:	2301      	movs	r3, #1
    4864:	4083      	lsls	r3, r0
    4866:	6113      	str	r3, [r2, #16]
	return STATUS_OK;
    4868:	2300      	movs	r3, #0
    486a:	e7f4      	b.n	4856 <extint_chan_enable_callback+0x6>
    486c:	40002400 	.word	0x40002400

00004870 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    4870:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4872:	2200      	movs	r2, #0
    4874:	4b10      	ldr	r3, [pc, #64]	; (48b8 <EIC_Handler+0x48>)
    4876:	701a      	strb	r2, [r3, #0]
    4878:	2300      	movs	r3, #0
    487a:	4910      	ldr	r1, [pc, #64]	; (48bc <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    487c:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    487e:	4e10      	ldr	r6, [pc, #64]	; (48c0 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4880:	4c0d      	ldr	r4, [pc, #52]	; (48b8 <EIC_Handler+0x48>)
    4882:	e00a      	b.n	489a <EIC_Handler+0x2a>
		return eics[eic_index];
    4884:	490d      	ldr	r1, [pc, #52]	; (48bc <EIC_Handler+0x4c>)
    4886:	e008      	b.n	489a <EIC_Handler+0x2a>
    4888:	7823      	ldrb	r3, [r4, #0]
    488a:	3301      	adds	r3, #1
    488c:	b2db      	uxtb	r3, r3
    488e:	7023      	strb	r3, [r4, #0]
    4890:	2b0f      	cmp	r3, #15
    4892:	d810      	bhi.n	48b6 <EIC_Handler+0x46>
		return NULL;
    4894:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    4896:	2b1f      	cmp	r3, #31
    4898:	d9f4      	bls.n	4884 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    489a:	0028      	movs	r0, r5
    489c:	4018      	ands	r0, r3
    489e:	2201      	movs	r2, #1
    48a0:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    48a2:	6948      	ldr	r0, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
    48a4:	4210      	tst	r0, r2
    48a6:	d0ef      	beq.n	4888 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    48a8:	614a      	str	r2, [r1, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    48aa:	009b      	lsls	r3, r3, #2
    48ac:	599b      	ldr	r3, [r3, r6]
    48ae:	2b00      	cmp	r3, #0
    48b0:	d0ea      	beq.n	4888 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    48b2:	4798      	blx	r3
    48b4:	e7e8      	b.n	4888 <EIC_Handler+0x18>
			}
		}
	}
}
    48b6:	bd70      	pop	{r4, r5, r6, pc}
    48b8:	20001ee4 	.word	0x20001ee4
    48bc:	40002400 	.word	0x40002400
    48c0:	20001ee8 	.word	0x20001ee8

000048c4 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
    48c4:	4a06      	ldr	r2, [pc, #24]	; (48e0 <_extint_enable+0x1c>)
    48c6:	7813      	ldrb	r3, [r2, #0]
    48c8:	2102      	movs	r1, #2
    48ca:	430b      	orrs	r3, r1
    48cc:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    48ce:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    48d0:	6853      	ldr	r3, [r2, #4]
    48d2:	4219      	tst	r1, r3
    48d4:	d1fc      	bne.n	48d0 <_extint_enable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    48d6:	6853      	ldr	r3, [r2, #4]
    48d8:	4218      	tst	r0, r3
    48da:	d1f9      	bne.n	48d0 <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    48dc:	4770      	bx	lr
    48de:	46c0      	nop			; (mov r8, r8)
    48e0:	40002400 	.word	0x40002400

000048e4 <_extint_disable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    48e4:	4a06      	ldr	r2, [pc, #24]	; (4900 <_extint_disable+0x1c>)
    48e6:	7813      	ldrb	r3, [r2, #0]
    48e8:	2102      	movs	r1, #2
    48ea:	438b      	bics	r3, r1
    48ec:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    48ee:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    48f0:	6853      	ldr	r3, [r2, #4]
    48f2:	4219      	tst	r1, r3
    48f4:	d1fc      	bne.n	48f0 <_extint_disable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    48f6:	6853      	ldr	r3, [r2, #4]
    48f8:	4218      	tst	r0, r3
    48fa:	d1f9      	bne.n	48f0 <_extint_disable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    48fc:	4770      	bx	lr
    48fe:	46c0      	nop			; (mov r8, r8)
    4900:	40002400 	.word	0x40002400

00004904 <_system_extint_init>:
{
    4904:	b510      	push	{r4, lr}
			MCLK->APBAMASK.reg |= mask;
    4906:	4a12      	ldr	r2, [pc, #72]	; (4950 <_system_extint_init+0x4c>)
    4908:	6951      	ldr	r1, [r2, #20]
    490a:	2380      	movs	r3, #128	; 0x80
    490c:	009b      	lsls	r3, r3, #2
    490e:	430b      	orrs	r3, r1
    4910:	6153      	str	r3, [r2, #20]
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
    4912:	4a10      	ldr	r2, [pc, #64]	; (4954 <_system_extint_init+0x50>)
    4914:	7813      	ldrb	r3, [r2, #0]
    4916:	2101      	movs	r1, #1
    4918:	430b      	orrs	r3, r1
    491a:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    491c:	3101      	adds	r1, #1
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    491e:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4920:	6853      	ldr	r3, [r2, #4]
    4922:	4219      	tst	r1, r3
    4924:	d1fc      	bne.n	4920 <_system_extint_init+0x1c>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4926:	6853      	ldr	r3, [r2, #4]
    4928:	4218      	tst	r0, r3
    492a:	d1f9      	bne.n	4920 <_system_extint_init+0x1c>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_ULP32K;
    492c:	4a09      	ldr	r2, [pc, #36]	; (4954 <_system_extint_init+0x50>)
    492e:	7813      	ldrb	r3, [r2, #0]
    4930:	2110      	movs	r1, #16
    4932:	430b      	orrs	r3, r1
    4934:	7013      	strb	r3, [r2, #0]
    4936:	4b08      	ldr	r3, [pc, #32]	; (4958 <_system_extint_init+0x54>)
    4938:	0019      	movs	r1, r3
    493a:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    493c:	2200      	movs	r2, #0
    493e:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    4940:	428b      	cmp	r3, r1
    4942:	d1fc      	bne.n	493e <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4944:	2208      	movs	r2, #8
    4946:	4b05      	ldr	r3, [pc, #20]	; (495c <_system_extint_init+0x58>)
    4948:	601a      	str	r2, [r3, #0]
	_extint_enable();
    494a:	4b05      	ldr	r3, [pc, #20]	; (4960 <_system_extint_init+0x5c>)
    494c:	4798      	blx	r3
}
    494e:	bd10      	pop	{r4, pc}
    4950:	40000400 	.word	0x40000400
    4954:	40002400 	.word	0x40002400
    4958:	20001ee8 	.word	0x20001ee8
    495c:	e000e100 	.word	0xe000e100
    4960:	000048c5 	.word	0x000048c5

00004964 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    4964:	2300      	movs	r3, #0
    4966:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    4968:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    496a:	2201      	movs	r2, #1
    496c:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
    496e:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    4970:	3201      	adds	r2, #1
    4972:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
    4974:	7243      	strb	r3, [r0, #9]
}
    4976:	4770      	bx	lr

00004978 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    4978:	b5f0      	push	{r4, r5, r6, r7, lr}
    497a:	b083      	sub	sp, #12
    497c:	0005      	movs	r5, r0
    497e:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
    4980:	4b1c      	ldr	r3, [pc, #112]	; (49f4 <extint_chan_set_config+0x7c>)
    4982:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4984:	a901      	add	r1, sp, #4
    4986:	2300      	movs	r3, #0
    4988:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    498a:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    498c:	7923      	ldrb	r3, [r4, #4]
    498e:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    4990:	7a23      	ldrb	r3, [r4, #8]
    4992:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    4994:	7820      	ldrb	r0, [r4, #0]
    4996:	4b18      	ldr	r3, [pc, #96]	; (49f8 <extint_chan_set_config+0x80>)
    4998:	4798      	blx	r3
		return NULL;
    499a:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    499c:	2d1f      	cmp	r5, #31
    499e:	d800      	bhi.n	49a2 <extint_chan_set_config+0x2a>
		return eics[eic_index];
    49a0:	4916      	ldr	r1, [pc, #88]	; (49fc <extint_chan_set_config+0x84>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    49a2:	2207      	movs	r2, #7
    49a4:	402a      	ands	r2, r5
    49a6:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    49a8:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    49aa:	7aa3      	ldrb	r3, [r4, #10]
    49ac:	2b00      	cmp	r3, #0
    49ae:	d001      	beq.n	49b4 <extint_chan_set_config+0x3c>
    49b0:	2308      	movs	r3, #8
    49b2:	431f      	orrs	r7, r3
    49b4:	08eb      	lsrs	r3, r5, #3
    49b6:	009b      	lsls	r3, r3, #2
    49b8:	18cb      	adds	r3, r1, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    49ba:	69d8      	ldr	r0, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    49bc:	260f      	movs	r6, #15
    49be:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    49c0:	43b0      	bics	r0, r6
			(new_config << config_pos);
    49c2:	4097      	lsls	r7, r2
    49c4:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    49c6:	4302      	orrs	r2, r0
		= (EIC_module->CONFIG[channel / 8].reg &
    49c8:	61da      	str	r2, [r3, #28]
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
    49ca:	7a63      	ldrb	r3, [r4, #9]
    49cc:	2b00      	cmp	r3, #0
    49ce:	d10b      	bne.n	49e8 <extint_chan_set_config+0x70>
		EIC_module->ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
    49d0:	698a      	ldr	r2, [r1, #24]
    49d2:	2301      	movs	r3, #1
    49d4:	40ab      	lsls	r3, r5
    49d6:	43db      	mvns	r3, r3
    49d8:	041b      	lsls	r3, r3, #16
    49da:	0c1b      	lsrs	r3, r3, #16
    49dc:	4013      	ands	r3, r2
    49de:	618b      	str	r3, [r1, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
    49e0:	4b07      	ldr	r3, [pc, #28]	; (4a00 <extint_chan_set_config+0x88>)
    49e2:	4798      	blx	r3
}
    49e4:	b003      	add	sp, #12
    49e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->ASYNCH.reg |= (1UL << channel);
    49e8:	698a      	ldr	r2, [r1, #24]
    49ea:	2301      	movs	r3, #1
    49ec:	40ab      	lsls	r3, r5
    49ee:	4313      	orrs	r3, r2
    49f0:	618b      	str	r3, [r1, #24]
    49f2:	e7f5      	b.n	49e0 <extint_chan_set_config+0x68>
    49f4:	000048e5 	.word	0x000048e5
    49f8:	00006b61 	.word	0x00006b61
    49fc:	40002400 	.word	0x40002400
    4a00:	000048c5 	.word	0x000048c5

00004a04 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    4a04:	b510      	push	{r4, lr}
			MCLK->APBBMASK.reg |= mask;
    4a06:	4a1e      	ldr	r2, [pc, #120]	; (4a80 <nvm_set_config+0x7c>)
    4a08:	6993      	ldr	r3, [r2, #24]
    4a0a:	2104      	movs	r1, #4
    4a0c:	430b      	orrs	r3, r1
    4a0e:	6193      	str	r3, [r2, #24]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4a10:	4b1c      	ldr	r3, [pc, #112]	; (4a84 <nvm_set_config+0x80>)
    4a12:	2220      	movs	r2, #32
    4a14:	32ff      	adds	r2, #255	; 0xff
    4a16:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    4a18:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    4a1a:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
    4a1c:	07d2      	lsls	r2, r2, #31
    4a1e:	d401      	bmi.n	4a24 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
    4a20:	0018      	movs	r0, r3
    4a22:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    4a24:	7803      	ldrb	r3, [r0, #0]
    4a26:	021b      	lsls	r3, r3, #8
    4a28:	22c0      	movs	r2, #192	; 0xc0
    4a2a:	0092      	lsls	r2, r2, #2
    4a2c:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    4a2e:	7841      	ldrb	r1, [r0, #1]
    4a30:	01c9      	lsls	r1, r1, #7
    4a32:	22ff      	movs	r2, #255	; 0xff
    4a34:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    4a36:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    4a38:	7881      	ldrb	r1, [r0, #2]
    4a3a:	0049      	lsls	r1, r1, #1
    4a3c:	221e      	movs	r2, #30
    4a3e:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    4a40:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    4a42:	78c2      	ldrb	r2, [r0, #3]
    4a44:	0492      	lsls	r2, r2, #18
    4a46:	2180      	movs	r1, #128	; 0x80
    4a48:	02c9      	lsls	r1, r1, #11
    4a4a:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    4a4c:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    4a4e:	7902      	ldrb	r2, [r0, #4]
    4a50:	0412      	lsls	r2, r2, #16
    4a52:	21c0      	movs	r1, #192	; 0xc0
    4a54:	0289      	lsls	r1, r1, #10
    4a56:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    4a58:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
    4a5a:	4a0a      	ldr	r2, [pc, #40]	; (4a84 <nvm_set_config+0x80>)
    4a5c:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    4a5e:	6893      	ldr	r3, [r2, #8]
    4a60:	035b      	lsls	r3, r3, #13
    4a62:	0f5b      	lsrs	r3, r3, #29
    4a64:	4908      	ldr	r1, [pc, #32]	; (4a88 <nvm_set_config+0x84>)
    4a66:	2408      	movs	r4, #8
    4a68:	409c      	lsls	r4, r3
    4a6a:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    4a6c:	6893      	ldr	r3, [r2, #8]
    4a6e:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    4a70:	7843      	ldrb	r3, [r0, #1]
    4a72:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    4a74:	8b13      	ldrh	r3, [r2, #24]
    4a76:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
    4a78:	0fdb      	lsrs	r3, r3, #31
    4a7a:	011b      	lsls	r3, r3, #4
    4a7c:	e7d0      	b.n	4a20 <nvm_set_config+0x1c>
    4a7e:	46c0      	nop			; (mov r8, r8)
    4a80:	40000400 	.word	0x40000400
    4a84:	41004000 	.word	0x41004000
    4a88:	200000b4 	.word	0x200000b4

00004a8c <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    4a8c:	b530      	push	{r4, r5, lr}
    4a8e:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    4a90:	4a25      	ldr	r2, [pc, #148]	; (4b28 <nvm_execute_command+0x9c>)
    4a92:	8810      	ldrh	r0, [r2, #0]
    4a94:	8853      	ldrh	r3, [r2, #2]
    4a96:	4343      	muls	r3, r0
    4a98:	428b      	cmp	r3, r1
    4a9a:	d20b      	bcs.n	4ab4 <nvm_execute_command+0x28>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    4a9c:	2280      	movs	r2, #128	; 0x80
    4a9e:	0192      	lsls	r2, r2, #6
    4aa0:	4b22      	ldr	r3, [pc, #136]	; (4b2c <nvm_execute_command+0xa0>)
    4aa2:	18cb      	adds	r3, r1, r3
    4aa4:	4293      	cmp	r3, r2
    4aa6:	d905      	bls.n	4ab4 <nvm_execute_command+0x28>
#ifdef FEATURE_NVM_RWWEE
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4aa8:	4a21      	ldr	r2, [pc, #132]	; (4b30 <nvm_execute_command+0xa4>)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    4aaa:	2018      	movs	r0, #24
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4aac:	4b21      	ldr	r3, [pc, #132]	; (4b34 <nvm_execute_command+0xa8>)
    4aae:	18cb      	adds	r3, r1, r3
    4ab0:	4293      	cmp	r3, r2
    4ab2:	d80e      	bhi.n	4ad2 <nvm_execute_command+0x46>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    4ab4:	4b20      	ldr	r3, [pc, #128]	; (4b38 <nvm_execute_command+0xac>)
    4ab6:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    4ab8:	2280      	movs	r2, #128	; 0x80
    4aba:	02d2      	lsls	r2, r2, #11
    4abc:	432a      	orrs	r2, r5
    4abe:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4ac0:	2220      	movs	r2, #32
    4ac2:	32ff      	adds	r2, #255	; 0xff
    4ac4:	831a      	strh	r2, [r3, #24]
    4ac6:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    4ac8:	07db      	lsls	r3, r3, #31
    4aca:	d403      	bmi.n	4ad4 <nvm_execute_command+0x48>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    4acc:	4b1a      	ldr	r3, [pc, #104]	; (4b38 <nvm_execute_command+0xac>)
    4ace:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
    4ad0:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    4ad2:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    4ad4:	2c45      	cmp	r4, #69	; 0x45
    4ad6:	d822      	bhi.n	4b1e <nvm_execute_command+0x92>
    4ad8:	00a3      	lsls	r3, r4, #2
    4ada:	4a18      	ldr	r2, [pc, #96]	; (4b3c <nvm_execute_command+0xb0>)
    4adc:	58d3      	ldr	r3, [r2, r3]
    4ade:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    4ae0:	4b15      	ldr	r3, [pc, #84]	; (4b38 <nvm_execute_command+0xac>)
    4ae2:	8b1b      	ldrh	r3, [r3, #24]
    4ae4:	05db      	lsls	r3, r3, #23
    4ae6:	d503      	bpl.n	4af0 <nvm_execute_command+0x64>
				nvm_module->CTRLB.reg = ctrlb_bak;
    4ae8:	4b13      	ldr	r3, [pc, #76]	; (4b38 <nvm_execute_command+0xac>)
    4aea:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
    4aec:	2010      	movs	r0, #16
    4aee:	e7f0      	b.n	4ad2 <nvm_execute_command+0x46>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    4af0:	0889      	lsrs	r1, r1, #2
    4af2:	0049      	lsls	r1, r1, #1
    4af4:	4b10      	ldr	r3, [pc, #64]	; (4b38 <nvm_execute_command+0xac>)
    4af6:	61d9      	str	r1, [r3, #28]
			break;
    4af8:	e003      	b.n	4b02 <nvm_execute_command+0x76>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    4afa:	0889      	lsrs	r1, r1, #2
    4afc:	0049      	lsls	r1, r1, #1
    4afe:	4b0e      	ldr	r3, [pc, #56]	; (4b38 <nvm_execute_command+0xac>)
    4b00:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    4b02:	20a5      	movs	r0, #165	; 0xa5
    4b04:	0200      	lsls	r0, r0, #8
    4b06:	4304      	orrs	r4, r0
    4b08:	4b0b      	ldr	r3, [pc, #44]	; (4b38 <nvm_execute_command+0xac>)
    4b0a:	801c      	strh	r4, [r3, #0]
    4b0c:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    4b0e:	2201      	movs	r2, #1
    4b10:	7d0b      	ldrb	r3, [r1, #20]
    4b12:	4213      	tst	r3, r2
    4b14:	d0fc      	beq.n	4b10 <nvm_execute_command+0x84>
	nvm_module->CTRLB.reg = ctrlb_bak;
    4b16:	4b08      	ldr	r3, [pc, #32]	; (4b38 <nvm_execute_command+0xac>)
    4b18:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
    4b1a:	2000      	movs	r0, #0
    4b1c:	e7d9      	b.n	4ad2 <nvm_execute_command+0x46>
			nvm_module->CTRLB.reg = ctrlb_bak;
    4b1e:	4b06      	ldr	r3, [pc, #24]	; (4b38 <nvm_execute_command+0xac>)
    4b20:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    4b22:	2017      	movs	r0, #23
    4b24:	e7d5      	b.n	4ad2 <nvm_execute_command+0x46>
    4b26:	46c0      	nop			; (mov r8, r8)
    4b28:	200000b4 	.word	0x200000b4
    4b2c:	ff7fc000 	.word	0xff7fc000
    4b30:	00001fff 	.word	0x00001fff
    4b34:	ffc00000 	.word	0xffc00000
    4b38:	41004000 	.word	0x41004000
    4b3c:	00017f2c 	.word	0x00017f2c

00004b40 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    4b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    4b42:	4b2f      	ldr	r3, [pc, #188]	; (4c00 <nvm_write_buffer+0xc0>)
    4b44:	881c      	ldrh	r4, [r3, #0]
    4b46:	885b      	ldrh	r3, [r3, #2]
    4b48:	4363      	muls	r3, r4
	if (destination_address >
    4b4a:	4283      	cmp	r3, r0
    4b4c:	d207      	bcs.n	4b5e <nvm_write_buffer+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4b4e:	4e2d      	ldr	r6, [pc, #180]	; (4c04 <nvm_write_buffer+0xc4>)
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    4b50:	2518      	movs	r5, #24
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4b52:	4b2d      	ldr	r3, [pc, #180]	; (4c08 <nvm_write_buffer+0xc8>)
    4b54:	18c3      	adds	r3, r0, r3
    4b56:	42b3      	cmp	r3, r6
    4b58:	d806      	bhi.n	4b68 <nvm_write_buffer+0x28>
		}
		is_rww_eeprom = true;
    4b5a:	2601      	movs	r6, #1
    4b5c:	e000      	b.n	4b60 <nvm_write_buffer+0x20>
	bool is_rww_eeprom = false;
    4b5e:	2600      	movs	r6, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    4b60:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
    4b62:	2518      	movs	r5, #24
	if (destination_address & (_nvm_dev.page_size - 1)) {
    4b64:	4218      	tst	r0, r3
    4b66:	d001      	beq.n	4b6c <nvm_write_buffer+0x2c>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    4b68:	0028      	movs	r0, r5
    4b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    4b6c:	3d01      	subs	r5, #1
	if (length > _nvm_dev.page_size) {
    4b6e:	4294      	cmp	r4, r2
    4b70:	d3fa      	bcc.n	4b68 <nvm_write_buffer+0x28>
    4b72:	4b26      	ldr	r3, [pc, #152]	; (4c0c <nvm_write_buffer+0xcc>)
    4b74:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    4b76:	3d12      	subs	r5, #18
	if (!nvm_is_ready()) {
    4b78:	07db      	lsls	r3, r3, #31
    4b7a:	d5f5      	bpl.n	4b68 <nvm_write_buffer+0x28>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    4b7c:	4c24      	ldr	r4, [pc, #144]	; (4c10 <nvm_write_buffer+0xd0>)
    4b7e:	4b23      	ldr	r3, [pc, #140]	; (4c0c <nvm_write_buffer+0xcc>)
    4b80:	801c      	strh	r4, [r3, #0]
    4b82:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    4b84:	2401      	movs	r4, #1
    4b86:	7d2b      	ldrb	r3, [r5, #20]
    4b88:	4223      	tst	r3, r4
    4b8a:	d0fc      	beq.n	4b86 <nvm_write_buffer+0x46>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4b8c:	2420      	movs	r4, #32
    4b8e:	34ff      	adds	r4, #255	; 0xff
    4b90:	4b1e      	ldr	r3, [pc, #120]	; (4c0c <nvm_write_buffer+0xcc>)
    4b92:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    4b94:	2a00      	cmp	r2, #0
    4b96:	d02c      	beq.n	4bf2 <nvm_write_buffer+0xb2>
    4b98:	2301      	movs	r3, #1
    4b9a:	0005      	movs	r5, r0
    4b9c:	439d      	bics	r5, r3
    4b9e:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    4ba0:	1e54      	subs	r4, r2, #1
    4ba2:	46a4      	mov	ip, r4
    4ba4:	e009      	b.n	4bba <nvm_write_buffer+0x7a>
			data |= (buffer[i + 1] << 8);
    4ba6:	18cf      	adds	r7, r1, r3
    4ba8:	787f      	ldrb	r7, [r7, #1]
    4baa:	023f      	lsls	r7, r7, #8
    4bac:	433c      	orrs	r4, r7
		NVM_MEMORY[nvm_address++] = data;
    4bae:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    4bb0:	3302      	adds	r3, #2
    4bb2:	b29b      	uxth	r3, r3
    4bb4:	3502      	adds	r5, #2
    4bb6:	429a      	cmp	r2, r3
    4bb8:	d904      	bls.n	4bc4 <nvm_write_buffer+0x84>
		data = buffer[i];
    4bba:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    4bbc:	4563      	cmp	r3, ip
    4bbe:	dbf2      	blt.n	4ba6 <nvm_write_buffer+0x66>
		data = buffer[i];
    4bc0:	b2a4      	uxth	r4, r4
    4bc2:	e7f4      	b.n	4bae <nvm_write_buffer+0x6e>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4bc4:	4b0e      	ldr	r3, [pc, #56]	; (4c00 <nvm_write_buffer+0xc0>)
    4bc6:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    4bc8:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4bca:	2b00      	cmp	r3, #0
    4bcc:	d1cc      	bne.n	4b68 <nvm_write_buffer+0x28>
    4bce:	2a3f      	cmp	r2, #63	; 0x3f
    4bd0:	d8ca      	bhi.n	4b68 <nvm_write_buffer+0x28>
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
    4bd2:	2e00      	cmp	r6, #0
    4bd4:	d106      	bne.n	4be4 <nvm_write_buffer+0xa4>
    4bd6:	2200      	movs	r2, #0
    4bd8:	0001      	movs	r1, r0
    4bda:	2004      	movs	r0, #4
    4bdc:	4b0d      	ldr	r3, [pc, #52]	; (4c14 <nvm_write_buffer+0xd4>)
    4bde:	4798      	blx	r3
    4be0:	0005      	movs	r5, r0
    4be2:	e7c1      	b.n	4b68 <nvm_write_buffer+0x28>
    4be4:	2200      	movs	r2, #0
    4be6:	0001      	movs	r1, r0
    4be8:	201c      	movs	r0, #28
    4bea:	4b0a      	ldr	r3, [pc, #40]	; (4c14 <nvm_write_buffer+0xd4>)
    4bec:	4798      	blx	r3
    4bee:	0005      	movs	r5, r0
    4bf0:	e7ba      	b.n	4b68 <nvm_write_buffer+0x28>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4bf2:	4b03      	ldr	r3, [pc, #12]	; (4c00 <nvm_write_buffer+0xc0>)
    4bf4:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    4bf6:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4bf8:	2b00      	cmp	r3, #0
    4bfa:	d0ea      	beq.n	4bd2 <nvm_write_buffer+0x92>
    4bfc:	e7b4      	b.n	4b68 <nvm_write_buffer+0x28>
    4bfe:	46c0      	nop			; (mov r8, r8)
    4c00:	200000b4 	.word	0x200000b4
    4c04:	00001fff 	.word	0x00001fff
    4c08:	ffc00000 	.word	0xffc00000
    4c0c:	41004000 	.word	0x41004000
    4c10:	ffffa544 	.word	0xffffa544
    4c14:	00004a8d 	.word	0x00004a8d

00004c18 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    4c18:	b510      	push	{r4, lr}
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    4c1a:	4a1b      	ldr	r2, [pc, #108]	; (4c88 <nvm_erase_row+0x70>)
    4c1c:	8813      	ldrh	r3, [r2, #0]
    4c1e:	8852      	ldrh	r2, [r2, #2]
    4c20:	435a      	muls	r2, r3
	if (row_address >
    4c22:	4282      	cmp	r2, r0
    4c24:	d207      	bcs.n	4c36 <nvm_erase_row+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4c26:	4c19      	ldr	r4, [pc, #100]	; (4c8c <nvm_erase_row+0x74>)
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    4c28:	2218      	movs	r2, #24
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4c2a:	4919      	ldr	r1, [pc, #100]	; (4c90 <nvm_erase_row+0x78>)
    4c2c:	1841      	adds	r1, r0, r1
    4c2e:	42a1      	cmp	r1, r4
    4c30:	d807      	bhi.n	4c42 <nvm_erase_row+0x2a>
		}
		is_rww_eeprom = true;
    4c32:	2101      	movs	r1, #1
    4c34:	e000      	b.n	4c38 <nvm_erase_row+0x20>
		bool is_rww_eeprom = false;
    4c36:	2100      	movs	r1, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    4c38:	009b      	lsls	r3, r3, #2
    4c3a:	3b01      	subs	r3, #1
		return STATUS_ERR_BAD_ADDRESS;
    4c3c:	2218      	movs	r2, #24
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    4c3e:	4218      	tst	r0, r3
    4c40:	d001      	beq.n	4c46 <nvm_erase_row+0x2e>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    4c42:	0010      	movs	r0, r2
    4c44:	bd10      	pop	{r4, pc}
    4c46:	4b13      	ldr	r3, [pc, #76]	; (4c94 <nvm_erase_row+0x7c>)
    4c48:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    4c4a:	3a13      	subs	r2, #19
	if (!nvm_is_ready()) {
    4c4c:	07db      	lsls	r3, r3, #31
    4c4e:	d5f8      	bpl.n	4c42 <nvm_erase_row+0x2a>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4c50:	4b10      	ldr	r3, [pc, #64]	; (4c94 <nvm_erase_row+0x7c>)
    4c52:	2220      	movs	r2, #32
    4c54:	32ff      	adds	r2, #255	; 0xff
    4c56:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    4c58:	0880      	lsrs	r0, r0, #2
    4c5a:	0040      	lsls	r0, r0, #1
    4c5c:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
    4c5e:	2900      	cmp	r1, #0
    4c60:	d10f      	bne.n	4c82 <nvm_erase_row+0x6a>
    4c62:	4a0d      	ldr	r2, [pc, #52]	; (4c98 <nvm_erase_row+0x80>)
    4c64:	4b0b      	ldr	r3, [pc, #44]	; (4c94 <nvm_erase_row+0x7c>)
    4c66:	801a      	strh	r2, [r3, #0]
    4c68:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    4c6a:	2201      	movs	r2, #1
    4c6c:	7d0b      	ldrb	r3, [r1, #20]
    4c6e:	4213      	tst	r3, r2
    4c70:	d0fc      	beq.n	4c6c <nvm_erase_row+0x54>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    4c72:	4b08      	ldr	r3, [pc, #32]	; (4c94 <nvm_erase_row+0x7c>)
    4c74:	8b1a      	ldrh	r2, [r3, #24]
    4c76:	201c      	movs	r0, #28
    4c78:	4002      	ands	r2, r0
	return STATUS_OK;
    4c7a:	1e50      	subs	r0, r2, #1
    4c7c:	4182      	sbcs	r2, r0
    4c7e:	0092      	lsls	r2, r2, #2
    4c80:	e7df      	b.n	4c42 <nvm_erase_row+0x2a>
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
    4c82:	4a06      	ldr	r2, [pc, #24]	; (4c9c <nvm_erase_row+0x84>)
    4c84:	e7ee      	b.n	4c64 <nvm_erase_row+0x4c>
    4c86:	46c0      	nop			; (mov r8, r8)
    4c88:	200000b4 	.word	0x200000b4
    4c8c:	00001fff 	.word	0x00001fff
    4c90:	ffc00000 	.word	0xffc00000
    4c94:	41004000 	.word	0x41004000
    4c98:	0000a502 	.word	0x0000a502
    4c9c:	0000a51a 	.word	0x0000a51a

00004ca0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    4ca0:	b500      	push	{lr}
    4ca2:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4ca4:	ab01      	add	r3, sp, #4
    4ca6:	2280      	movs	r2, #128	; 0x80
    4ca8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    4caa:	780a      	ldrb	r2, [r1, #0]
    4cac:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    4cae:	784a      	ldrb	r2, [r1, #1]
    4cb0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    4cb2:	788a      	ldrb	r2, [r1, #2]
    4cb4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    4cb6:	0019      	movs	r1, r3
    4cb8:	4b01      	ldr	r3, [pc, #4]	; (4cc0 <port_pin_set_config+0x20>)
    4cba:	4798      	blx	r3
}
    4cbc:	b003      	add	sp, #12
    4cbe:	bd00      	pop	{pc}
    4cc0:	00006b61 	.word	0x00006b61

00004cc4 <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4cc4:	6803      	ldr	r3, [r0, #0]

	if (rtc_module->MODE0.SYNCBUSY.reg) {
    4cc6:	6918      	ldr	r0, [r3, #16]
    4cc8:	1e43      	subs	r3, r0, #1
    4cca:	4198      	sbcs	r0, r3
    4ccc:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
    4cce:	4770      	bx	lr

00004cd0 <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
    4cd0:	b570      	push	{r4, r5, r6, lr}
    4cd2:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4cd4:	6806      	ldr	r6, [r0, #0]

	/* Initialize return value. */
	uint32_t ret_val;

	while (rtc_count_is_syncing(module)) {
    4cd6:	4d08      	ldr	r5, [pc, #32]	; (4cf8 <rtc_count_get_count+0x28>)
    4cd8:	0020      	movs	r0, r4
    4cda:	47a8      	blx	r5
    4cdc:	2800      	cmp	r0, #0
    4cde:	d1fb      	bne.n	4cd8 <rtc_count_get_count+0x8>
		/* Wait for synchronization */
	}

	/* Read value based on mode. */
	switch (module->mode) {
    4ce0:	7923      	ldrb	r3, [r4, #4]
    4ce2:	2b00      	cmp	r3, #0
    4ce4:	d004      	beq.n	4cf0 <rtc_count_get_count+0x20>
			break;

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
    4ce6:	2000      	movs	r0, #0
	switch (module->mode) {
    4ce8:	2b01      	cmp	r3, #1
    4cea:	d100      	bne.n	4cee <rtc_count_get_count+0x1e>
			ret_val = rtc_module->MODE0.COUNT.reg;
    4cec:	69b0      	ldr	r0, [r6, #24]
			break;
	}

	return ret_val;
}
    4cee:	bd70      	pop	{r4, r5, r6, pc}
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
    4cf0:	8b30      	ldrh	r0, [r6, #24]
    4cf2:	b280      	uxth	r0, r0
			break;
    4cf4:	e7fb      	b.n	4cee <rtc_count_get_count+0x1e>
    4cf6:	46c0      	nop			; (mov r8, r8)
    4cf8:	00004cc5 	.word	0x00004cc5

00004cfc <rtc_count_disable_callback>:
 * \param[in]     callback_type Callback type to disable
 */
void rtc_count_disable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    4cfc:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4cfe:	6802      	ldr	r2, [r0, #0]

	/* Disable interrupt */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    4d00:	290a      	cmp	r1, #10
    4d02:	d010      	beq.n	4d26 <rtc_count_disable_callback+0x2a>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if(callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    4d04:	2907      	cmp	r1, #7
    4d06:	d911      	bls.n	4d2c <rtc_count_disable_callback+0x30>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7){
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
	}else {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    4d08:	2380      	movs	r3, #128	; 0x80
    4d0a:	005b      	lsls	r3, r3, #1
    4d0c:	000c      	movs	r4, r1
    4d0e:	3c08      	subs	r4, #8
    4d10:	40a3      	lsls	r3, r4
    4d12:	24c0      	movs	r4, #192	; 0xc0
    4d14:	00a4      	lsls	r4, r4, #2
    4d16:	4023      	ands	r3, r4
    4d18:	8113      	strh	r3, [r2, #8]
	}

	/* Mark callback as disabled. */
	module->enabled_callback &= ~(1 << callback_type);
    4d1a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    4d1c:	2201      	movs	r2, #1
    4d1e:	408a      	lsls	r2, r1
    4d20:	4393      	bics	r3, r2
    4d22:	86c3      	strh	r3, [r0, #54]	; 0x36
}
    4d24:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
    4d26:	4b04      	ldr	r3, [pc, #16]	; (4d38 <rtc_count_disable_callback+0x3c>)
    4d28:	8113      	strh	r3, [r2, #8]
    4d2a:	e7f6      	b.n	4d1a <rtc_count_disable_callback+0x1e>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
    4d2c:	2401      	movs	r4, #1
    4d2e:	408c      	lsls	r4, r1
    4d30:	23ff      	movs	r3, #255	; 0xff
    4d32:	4023      	ands	r3, r4
    4d34:	8113      	strh	r3, [r2, #8]
    4d36:	e7f0      	b.n	4d1a <rtc_count_disable_callback+0x1e>
    4d38:	ffff8000 	.word	0xffff8000

00004d3c <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    4d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d3e:	46de      	mov	lr, fp
    4d40:	4657      	mov	r7, sl
    4d42:	464e      	mov	r6, r9
    4d44:	4645      	mov	r5, r8
    4d46:	b5e0      	push	{r5, r6, r7, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    4d48:	4b2b      	ldr	r3, [pc, #172]	; (4df8 <RTC_Handler+0xbc>)
    4d4a:	681b      	ldr	r3, [r3, #0]
    4d4c:	469a      	mov	sl, r3
	Rtc *const rtc_module = module->hw;
    4d4e:	681e      	ldr	r6, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
    4d50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
	callback_mask &= module->registered_callback;
    4d52:	4652      	mov	r2, sl
    4d54:	8e92      	ldrh	r2, [r2, #52]	; 0x34
    4d56:	401a      	ands	r2, r3
    4d58:	4690      	mov	r8, r2
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    4d5a:	89b2      	ldrh	r2, [r6, #12]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    4d5c:	8973      	ldrh	r3, [r6, #10]
    4d5e:	4013      	ands	r3, r2
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    4d60:	b21a      	sxth	r2, r3
    4d62:	2a00      	cmp	r2, #0
    4d64:	db08      	blt.n	4d78 <RTC_Handler+0x3c>
    4d66:	27ff      	movs	r7, #255	; 0xff
    4d68:	401f      	ands	r7, r3
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
    4d6a:	d02a      	beq.n	4dc2 <RTC_Handler+0x86>
    4d6c:	2400      	movs	r4, #0
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    4d6e:	2301      	movs	r3, #1
    4d70:	4699      	mov	r9, r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    4d72:	33fe      	adds	r3, #254	; 0xfe
    4d74:	469b      	mov	fp, r3
    4d76:	e014      	b.n	4da2 <RTC_Handler+0x66>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    4d78:	4643      	mov	r3, r8
    4d7a:	055b      	lsls	r3, r3, #21
    4d7c:	d407      	bmi.n	4d8e <RTC_Handler+0x52>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    4d7e:	4b1f      	ldr	r3, [pc, #124]	; (4dfc <RTC_Handler+0xc0>)
    4d80:	81b3      	strh	r3, [r6, #12]
	_rtc_interrupt_handler(0);
}
    4d82:	bc3c      	pop	{r2, r3, r4, r5}
    4d84:	4690      	mov	r8, r2
    4d86:	4699      	mov	r9, r3
    4d88:	46a2      	mov	sl, r4
    4d8a:	46ab      	mov	fp, r5
    4d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    4d8e:	4653      	mov	r3, sl
    4d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4d92:	4798      	blx	r3
    4d94:	e7f3      	b.n	4d7e <RTC_Handler+0x42>
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    4d96:	465b      	mov	r3, fp
    4d98:	401d      	ands	r5, r3
    4d9a:	81b5      	strh	r5, [r6, #12]
    4d9c:	3401      	adds	r4, #1
		for ( i = 0;i < RTC_PER_NUM;i++) {
    4d9e:	2c08      	cmp	r4, #8
    4da0:	d0ef      	beq.n	4d82 <RTC_Handler+0x46>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    4da2:	0023      	movs	r3, r4
    4da4:	464d      	mov	r5, r9
    4da6:	40a5      	lsls	r5, r4
    4da8:	422f      	tst	r7, r5
    4daa:	d0f4      	beq.n	4d96 <RTC_Handler+0x5a>
			  && (callback_mask & (1 << i))) {
    4dac:	4642      	mov	r2, r8
    4dae:	4122      	asrs	r2, r4
    4db0:	4649      	mov	r1, r9
    4db2:	4211      	tst	r1, r2
    4db4:	d0ef      	beq.n	4d96 <RTC_Handler+0x5a>
				module->callbacks[i]();
    4db6:	3302      	adds	r3, #2
    4db8:	009b      	lsls	r3, r3, #2
    4dba:	4652      	mov	r2, sl
    4dbc:	589b      	ldr	r3, [r3, r2]
    4dbe:	4798      	blx	r3
    4dc0:	e7e9      	b.n	4d96 <RTC_Handler+0x5a>
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    4dc2:	05da      	lsls	r2, r3, #23
    4dc4:	d50a      	bpl.n	4ddc <RTC_Handler+0xa0>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    4dc6:	4643      	mov	r3, r8
    4dc8:	05db      	lsls	r3, r3, #23
    4dca:	d403      	bmi.n	4dd4 <RTC_Handler+0x98>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    4dcc:	2380      	movs	r3, #128	; 0x80
    4dce:	005b      	lsls	r3, r3, #1
    4dd0:	81b3      	strh	r3, [r6, #12]
    4dd2:	e7d6      	b.n	4d82 <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    4dd4:	4653      	mov	r3, sl
    4dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4dd8:	4798      	blx	r3
    4dda:	e7f7      	b.n	4dcc <RTC_Handler+0x90>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    4ddc:	059b      	lsls	r3, r3, #22
    4dde:	d5d0      	bpl.n	4d82 <RTC_Handler+0x46>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    4de0:	4643      	mov	r3, r8
    4de2:	059b      	lsls	r3, r3, #22
    4de4:	d403      	bmi.n	4dee <RTC_Handler+0xb2>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    4de6:	2380      	movs	r3, #128	; 0x80
    4de8:	009b      	lsls	r3, r3, #2
    4dea:	81b3      	strh	r3, [r6, #12]
}
    4dec:	e7c9      	b.n	4d82 <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    4dee:	4653      	mov	r3, sl
    4df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4df2:	4798      	blx	r3
    4df4:	e7f7      	b.n	4de6 <RTC_Handler+0xaa>
    4df6:	46c0      	nop			; (mov r8, r8)
    4df8:	20001f28 	.word	0x20001f28
    4dfc:	ffff8000 	.word	0xffff8000

00004e00 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    4e00:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    4e02:	2207      	movs	r2, #7
    4e04:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    4e06:	421a      	tst	r2, r3
    4e08:	d1fc      	bne.n	4e04 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
    4e0a:	4770      	bx	lr

00004e0c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    4e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e0e:	46d6      	mov	lr, sl
    4e10:	464f      	mov	r7, r9
    4e12:	4646      	mov	r6, r8
    4e14:	b5c0      	push	{r6, r7, lr}
    4e16:	b08a      	sub	sp, #40	; 0x28
    4e18:	0007      	movs	r7, r0
    4e1a:	000e      	movs	r6, r1
    4e1c:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    4e1e:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4e20:	0008      	movs	r0, r1
    4e22:	4b9c      	ldr	r3, [pc, #624]	; (5094 <i2c_master_init+0x288>)
    4e24:	4798      	blx	r3

#if (SAML22) || (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
    4e26:	2805      	cmp	r0, #5
    4e28:	d100      	bne.n	4e2c <i2c_master_init+0x20>
    4e2a:	e12b      	b.n	5084 <i2c_master_init+0x278>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4e2c:	0005      	movs	r5, r0
    4e2e:	3512      	adds	r5, #18
			MCLK->APBCMASK.reg |= mask;
    4e30:	4a99      	ldr	r2, [pc, #612]	; (5098 <i2c_master_init+0x28c>)
    4e32:	69d1      	ldr	r1, [r2, #28]
	/* Turn on module in PM */
#if (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4e34:	2301      	movs	r3, #1
    4e36:	4083      	lsls	r3, r0
    4e38:	430b      	orrs	r3, r1
    4e3a:	61d3      	str	r3, [r2, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    4e3c:	a909      	add	r1, sp, #36	; 0x24
    4e3e:	7b23      	ldrb	r3, [r4, #12]
    4e40:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4e42:	b2ed      	uxtb	r5, r5
    4e44:	0028      	movs	r0, r5
    4e46:	4b95      	ldr	r3, [pc, #596]	; (509c <i2c_master_init+0x290>)
    4e48:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4e4a:	0028      	movs	r0, r5
    4e4c:	4b94      	ldr	r3, [pc, #592]	; (50a0 <i2c_master_init+0x294>)
    4e4e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4e50:	7b20      	ldrb	r0, [r4, #12]
    4e52:	2100      	movs	r1, #0
    4e54:	4b93      	ldr	r3, [pc, #588]	; (50a4 <i2c_master_init+0x298>)
    4e56:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    4e58:	6833      	ldr	r3, [r6, #0]
		return STATUS_ERR_DENIED;
    4e5a:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    4e5c:	079b      	lsls	r3, r3, #30
    4e5e:	d505      	bpl.n	4e6c <i2c_master_init+0x60>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    4e60:	b00a      	add	sp, #40	; 0x28
    4e62:	bc1c      	pop	{r2, r3, r4}
    4e64:	4690      	mov	r8, r2
    4e66:	4699      	mov	r9, r3
    4e68:	46a2      	mov	sl, r4
    4e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    4e6c:	6833      	ldr	r3, [r6, #0]
		return STATUS_BUSY;
    4e6e:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    4e70:	07db      	lsls	r3, r3, #31
    4e72:	d4f5      	bmi.n	4e60 <i2c_master_init+0x54>
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    4e74:	2314      	movs	r3, #20
    4e76:	6033      	str	r3, [r6, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4e78:	683b      	ldr	r3, [r7, #0]
    4e7a:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    4e7c:	0018      	movs	r0, r3
    4e7e:	4b85      	ldr	r3, [pc, #532]	; (5094 <i2c_master_init+0x288>)
    4e80:	4798      	blx	r3
    4e82:	0005      	movs	r5, r0
    4e84:	2380      	movs	r3, #128	; 0x80
    4e86:	aa08      	add	r2, sp, #32
    4e88:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4e8a:	2300      	movs	r3, #0
    4e8c:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4e8e:	2201      	movs	r2, #1
    4e90:	a908      	add	r1, sp, #32
    4e92:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
    4e94:	70cb      	strb	r3, [r1, #3]
	uint32_t pad0 = config->pinmux_pad0;
    4e96:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    4e98:	6a26      	ldr	r6, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
    4e9a:	2800      	cmp	r0, #0
    4e9c:	d100      	bne.n	4ea0 <i2c_master_init+0x94>
    4e9e:	e0ae      	b.n	4ffe <i2c_master_init+0x1f2>
	pin_conf.mux_position = pad0 & 0xFFFF;
    4ea0:	ab08      	add	r3, sp, #32
    4ea2:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    4ea4:	2302      	movs	r3, #2
    4ea6:	aa08      	add	r2, sp, #32
    4ea8:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    4eaa:	0c00      	lsrs	r0, r0, #16
    4eac:	b2c0      	uxtb	r0, r0
    4eae:	0011      	movs	r1, r2
    4eb0:	4b7d      	ldr	r3, [pc, #500]	; (50a8 <i2c_master_init+0x29c>)
    4eb2:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    4eb4:	2e00      	cmp	r6, #0
    4eb6:	d100      	bne.n	4eba <i2c_master_init+0xae>
    4eb8:	e0a6      	b.n	5008 <i2c_master_init+0x1fc>
	pin_conf.mux_position = pad1 & 0xFFFF;
    4eba:	ab08      	add	r3, sp, #32
    4ebc:	701e      	strb	r6, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    4ebe:	2302      	movs	r3, #2
    4ec0:	aa08      	add	r2, sp, #32
    4ec2:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    4ec4:	0c36      	lsrs	r6, r6, #16
    4ec6:	b2f0      	uxtb	r0, r6
    4ec8:	0011      	movs	r1, r2
    4eca:	4b77      	ldr	r3, [pc, #476]	; (50a8 <i2c_master_init+0x29c>)
    4ecc:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    4ece:	8aa3      	ldrh	r3, [r4, #20]
    4ed0:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
    4ed2:	8ae3      	ldrh	r3, [r4, #22]
    4ed4:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    4ed6:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    4ed8:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    4eda:	2b00      	cmp	r3, #0
    4edc:	d104      	bne.n	4ee8 <i2c_master_init+0xdc>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    4ede:	4b73      	ldr	r3, [pc, #460]	; (50ac <i2c_master_init+0x2a0>)
    4ee0:	789b      	ldrb	r3, [r3, #2]
    4ee2:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    4ee4:	0fdb      	lsrs	r3, r3, #31
    4ee6:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    4ee8:	68a1      	ldr	r1, [r4, #8]
    4eea:	6923      	ldr	r3, [r4, #16]
    4eec:	430b      	orrs	r3, r1
    4eee:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    4ef0:	2224      	movs	r2, #36	; 0x24
    4ef2:	5ca2      	ldrb	r2, [r4, r2]
    4ef4:	2a00      	cmp	r2, #0
    4ef6:	d002      	beq.n	4efe <i2c_master_init+0xf2>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    4ef8:	2280      	movs	r2, #128	; 0x80
    4efa:	05d2      	lsls	r2, r2, #23
    4efc:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    4efe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4f00:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    4f02:	222c      	movs	r2, #44	; 0x2c
    4f04:	5ca2      	ldrb	r2, [r4, r2]
    4f06:	2a00      	cmp	r2, #0
    4f08:	d103      	bne.n	4f12 <i2c_master_init+0x106>
    4f0a:	2280      	movs	r2, #128	; 0x80
    4f0c:	0492      	lsls	r2, r2, #18
    4f0e:	4291      	cmp	r1, r2
    4f10:	d102      	bne.n	4f18 <i2c_master_init+0x10c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    4f12:	2280      	movs	r2, #128	; 0x80
    4f14:	0512      	lsls	r2, r2, #20
    4f16:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    4f18:	222d      	movs	r2, #45	; 0x2d
    4f1a:	5ca2      	ldrb	r2, [r4, r2]
    4f1c:	2a00      	cmp	r2, #0
    4f1e:	d002      	beq.n	4f26 <i2c_master_init+0x11a>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    4f20:	2280      	movs	r2, #128	; 0x80
    4f22:	0412      	lsls	r2, r2, #16
    4f24:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    4f26:	222e      	movs	r2, #46	; 0x2e
    4f28:	5ca2      	ldrb	r2, [r4, r2]
    4f2a:	2a00      	cmp	r2, #0
    4f2c:	d002      	beq.n	4f34 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    4f2e:	2280      	movs	r2, #128	; 0x80
    4f30:	03d2      	lsls	r2, r2, #15
    4f32:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    4f34:	4642      	mov	r2, r8
    4f36:	6812      	ldr	r2, [r2, #0]
    4f38:	4313      	orrs	r3, r2
    4f3a:	4642      	mov	r2, r8
    4f3c:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    4f3e:	2380      	movs	r3, #128	; 0x80
    4f40:	005b      	lsls	r3, r3, #1
    4f42:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    4f44:	3512      	adds	r5, #18
    4f46:	b2e8      	uxtb	r0, r5
    4f48:	4b59      	ldr	r3, [pc, #356]	; (50b0 <i2c_master_init+0x2a4>)
    4f4a:	4798      	blx	r3
    4f4c:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    4f4e:	23fa      	movs	r3, #250	; 0xfa
    4f50:	009b      	lsls	r3, r3, #2
    4f52:	6822      	ldr	r2, [r4, #0]
    4f54:	435a      	muls	r2, r3
    4f56:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    4f58:	6863      	ldr	r3, [r4, #4]
    4f5a:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    4f5c:	4d55      	ldr	r5, [pc, #340]	; (50b4 <i2c_master_init+0x2a8>)
    4f5e:	47a8      	blx	r5
    4f60:	9000      	str	r0, [sp, #0]
    4f62:	9101      	str	r1, [sp, #4]
    4f64:	464b      	mov	r3, r9
    4f66:	0058      	lsls	r0, r3, #1
    4f68:	47a8      	blx	r5
    4f6a:	9002      	str	r0, [sp, #8]
    4f6c:	9103      	str	r1, [sp, #12]
    4f6e:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    4f70:	47a8      	blx	r5
    4f72:	9004      	str	r0, [sp, #16]
    4f74:	9105      	str	r1, [sp, #20]
    4f76:	4f50      	ldr	r7, [pc, #320]	; (50b8 <i2c_master_init+0x2ac>)
    4f78:	4a50      	ldr	r2, [pc, #320]	; (50bc <i2c_master_init+0x2b0>)
    4f7a:	4b51      	ldr	r3, [pc, #324]	; (50c0 <i2c_master_init+0x2b4>)
    4f7c:	9800      	ldr	r0, [sp, #0]
    4f7e:	9901      	ldr	r1, [sp, #4]
    4f80:	47b8      	blx	r7
    4f82:	0002      	movs	r2, r0
    4f84:	000b      	movs	r3, r1
    4f86:	9804      	ldr	r0, [sp, #16]
    4f88:	9905      	ldr	r1, [sp, #20]
    4f8a:	47b8      	blx	r7
    4f8c:	4e4d      	ldr	r6, [pc, #308]	; (50c4 <i2c_master_init+0x2b8>)
    4f8e:	2200      	movs	r2, #0
    4f90:	4b4d      	ldr	r3, [pc, #308]	; (50c8 <i2c_master_init+0x2bc>)
    4f92:	47b0      	blx	r6
    4f94:	9004      	str	r0, [sp, #16]
    4f96:	9105      	str	r1, [sp, #20]
    4f98:	4648      	mov	r0, r9
    4f9a:	47a8      	blx	r5
    4f9c:	0002      	movs	r2, r0
    4f9e:	000b      	movs	r3, r1
    4fa0:	9804      	ldr	r0, [sp, #16]
    4fa2:	9905      	ldr	r1, [sp, #20]
    4fa4:	47b8      	blx	r7
    4fa6:	0002      	movs	r2, r0
    4fa8:	000b      	movs	r3, r1
    4faa:	4d48      	ldr	r5, [pc, #288]	; (50cc <i2c_master_init+0x2c0>)
    4fac:	9800      	ldr	r0, [sp, #0]
    4fae:	9901      	ldr	r1, [sp, #4]
    4fb0:	47a8      	blx	r5
    4fb2:	9a02      	ldr	r2, [sp, #8]
    4fb4:	9b03      	ldr	r3, [sp, #12]
    4fb6:	47b0      	blx	r6
    4fb8:	2200      	movs	r2, #0
    4fba:	4b45      	ldr	r3, [pc, #276]	; (50d0 <i2c_master_init+0x2c4>)
    4fbc:	47a8      	blx	r5
    4fbe:	9a02      	ldr	r2, [sp, #8]
    4fc0:	9b03      	ldr	r3, [sp, #12]
    4fc2:	4d44      	ldr	r5, [pc, #272]	; (50d4 <i2c_master_init+0x2c8>)
    4fc4:	47a8      	blx	r5
    4fc6:	4b44      	ldr	r3, [pc, #272]	; (50d8 <i2c_master_init+0x2cc>)
    4fc8:	4798      	blx	r3
    4fca:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    4fcc:	2380      	movs	r3, #128	; 0x80
    4fce:	049b      	lsls	r3, r3, #18
    4fd0:	68a2      	ldr	r2, [r4, #8]
    4fd2:	429a      	cmp	r2, r3
    4fd4:	d01e      	beq.n	5014 <i2c_master_init+0x208>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    4fd6:	0003      	movs	r3, r0
    4fd8:	2040      	movs	r0, #64	; 0x40
    4fda:	2dff      	cmp	r5, #255	; 0xff
    4fdc:	d900      	bls.n	4fe0 <i2c_master_init+0x1d4>
    4fde:	e73f      	b.n	4e60 <i2c_master_init+0x54>
	int32_t tmp_baudlow_hs = 0;
    4fe0:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    4fe2:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    4fe4:	25ff      	movs	r5, #255	; 0xff
    4fe6:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    4fe8:	0624      	lsls	r4, r4, #24
    4fea:	4325      	orrs	r5, r4
    4fec:	0400      	lsls	r0, r0, #16
    4fee:	23ff      	movs	r3, #255	; 0xff
    4ff0:	041b      	lsls	r3, r3, #16
    4ff2:	4018      	ands	r0, r3
    4ff4:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    4ff6:	4643      	mov	r3, r8
    4ff8:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    4ffa:	2000      	movs	r0, #0
    4ffc:	e730      	b.n	4e60 <i2c_master_init+0x54>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    4ffe:	2100      	movs	r1, #0
    5000:	4640      	mov	r0, r8
    5002:	4b36      	ldr	r3, [pc, #216]	; (50dc <i2c_master_init+0x2d0>)
    5004:	4798      	blx	r3
    5006:	e74b      	b.n	4ea0 <i2c_master_init+0x94>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    5008:	2101      	movs	r1, #1
    500a:	4640      	mov	r0, r8
    500c:	4b33      	ldr	r3, [pc, #204]	; (50dc <i2c_master_init+0x2d0>)
    500e:	4798      	blx	r3
    5010:	0006      	movs	r6, r0
    5012:	e752      	b.n	4eba <i2c_master_init+0xae>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    5014:	26fa      	movs	r6, #250	; 0xfa
    5016:	00b6      	lsls	r6, r6, #2
    5018:	4653      	mov	r3, sl
    501a:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    501c:	9800      	ldr	r0, [sp, #0]
    501e:	9901      	ldr	r1, [sp, #4]
    5020:	0002      	movs	r2, r0
    5022:	000b      	movs	r3, r1
    5024:	4c27      	ldr	r4, [pc, #156]	; (50c4 <i2c_master_init+0x2b8>)
    5026:	47a0      	blx	r4
    5028:	9000      	str	r0, [sp, #0]
    502a:	9101      	str	r1, [sp, #4]
    502c:	0030      	movs	r0, r6
    502e:	4b21      	ldr	r3, [pc, #132]	; (50b4 <i2c_master_init+0x2a8>)
    5030:	4798      	blx	r3
    5032:	2200      	movs	r2, #0
    5034:	4b2a      	ldr	r3, [pc, #168]	; (50e0 <i2c_master_init+0x2d4>)
    5036:	47b8      	blx	r7
    5038:	0002      	movs	r2, r0
    503a:	000b      	movs	r3, r1
    503c:	9800      	ldr	r0, [sp, #0]
    503e:	9901      	ldr	r1, [sp, #4]
    5040:	4c24      	ldr	r4, [pc, #144]	; (50d4 <i2c_master_init+0x2c8>)
    5042:	47a0      	blx	r4
    5044:	2200      	movs	r2, #0
    5046:	4b22      	ldr	r3, [pc, #136]	; (50d0 <i2c_master_init+0x2c4>)
    5048:	4c20      	ldr	r4, [pc, #128]	; (50cc <i2c_master_init+0x2c0>)
    504a:	47a0      	blx	r4
    504c:	4b22      	ldr	r3, [pc, #136]	; (50d8 <i2c_master_init+0x2cc>)
    504e:	4798      	blx	r3
    5050:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    5052:	d00c      	beq.n	506e <i2c_master_init+0x262>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    5054:	0031      	movs	r1, r6
    5056:	9807      	ldr	r0, [sp, #28]
    5058:	4b22      	ldr	r3, [pc, #136]	; (50e4 <i2c_master_init+0x2d8>)
    505a:	4798      	blx	r3
    505c:	3802      	subs	r0, #2
    505e:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    5060:	002b      	movs	r3, r5
    5062:	2dff      	cmp	r5, #255	; 0xff
    5064:	d80c      	bhi.n	5080 <i2c_master_init+0x274>
    5066:	28ff      	cmp	r0, #255	; 0xff
    5068:	d9bc      	bls.n	4fe4 <i2c_master_init+0x1d8>
    506a:	2040      	movs	r0, #64	; 0x40
    506c:	e6f8      	b.n	4e60 <i2c_master_init+0x54>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    506e:	0071      	lsls	r1, r6, #1
    5070:	1e48      	subs	r0, r1, #1
    5072:	9b07      	ldr	r3, [sp, #28]
    5074:	469c      	mov	ip, r3
    5076:	4460      	add	r0, ip
    5078:	4b1a      	ldr	r3, [pc, #104]	; (50e4 <i2c_master_init+0x2d8>)
    507a:	4798      	blx	r3
    507c:	3801      	subs	r0, #1
    507e:	e7ef      	b.n	5060 <i2c_master_init+0x254>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    5080:	2040      	movs	r0, #64	; 0x40
    5082:	e6ed      	b.n	4e60 <i2c_master_init+0x54>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    5084:	4a04      	ldr	r2, [pc, #16]	; (5098 <i2c_master_init+0x28c>)
    5086:	6a13      	ldr	r3, [r2, #32]
    5088:	2102      	movs	r1, #2
    508a:	430b      	orrs	r3, r1
    508c:	6213      	str	r3, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    508e:	2518      	movs	r5, #24
    5090:	e6d4      	b.n	4e3c <i2c_master_init+0x30>
    5092:	46c0      	nop			; (mov r8, r8)
    5094:	0000576d 	.word	0x0000576d
    5098:	40000400 	.word	0x40000400
    509c:	00006a65 	.word	0x00006a65
    50a0:	000069f5 	.word	0x000069f5
    50a4:	000055c5 	.word	0x000055c5
    50a8:	00006b61 	.word	0x00006b61
    50ac:	41002000 	.word	0x41002000
    50b0:	00006a89 	.word	0x00006a89
    50b4:	00016909 	.word	0x00016909
    50b8:	00015cf1 	.word	0x00015cf1
    50bc:	e826d695 	.word	0xe826d695
    50c0:	3e112e0b 	.word	0x3e112e0b
    50c4:	00014e69 	.word	0x00014e69
    50c8:	40240000 	.word	0x40240000
    50cc:	000161f1 	.word	0x000161f1
    50d0:	3ff00000 	.word	0x3ff00000
    50d4:	00015489 	.word	0x00015489
    50d8:	0001681d 	.word	0x0001681d
    50dc:	00005611 	.word	0x00005611
    50e0:	40080000 	.word	0x40080000
    50e4:	000139e5 	.word	0x000139e5

000050e8 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
    50e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    50ea:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    50ec:	6807      	ldr	r7, [r0, #0]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    50ee:	4e08      	ldr	r6, [pc, #32]	; (5110 <i2c_master_reset+0x28>)
    50f0:	47b0      	blx	r6
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    50f2:	6825      	ldr	r5, [r4, #0]
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    50f4:	0020      	movs	r0, r4
    50f6:	47b0      	blx	r6

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    50f8:	2383      	movs	r3, #131	; 0x83
    50fa:	752b      	strb	r3, [r5, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    50fc:	762b      	strb	r3, [r5, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    50fe:	682b      	ldr	r3, [r5, #0]
    5100:	2202      	movs	r2, #2
    5102:	4393      	bics	r3, r2
    5104:	602b      	str	r3, [r5, #0]
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
	system_interrupt_leave_critical_section();
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    5106:	0020      	movs	r0, r4
    5108:	47b0      	blx	r6

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
    510a:	2301      	movs	r3, #1
    510c:	603b      	str	r3, [r7, #0]
}
    510e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5110:	00004e01 	.word	0x00004e01

00005114 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5114:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    5116:	7e1a      	ldrb	r2, [r3, #24]
    5118:	0792      	lsls	r2, r2, #30
    511a:	d507      	bpl.n	512c <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    511c:	2202      	movs	r2, #2
    511e:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    5120:	8b5b      	ldrh	r3, [r3, #26]
    5122:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    5124:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    5126:	17db      	asrs	r3, r3, #31
    5128:	4018      	ands	r0, r3
}
    512a:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    512c:	8b5a      	ldrh	r2, [r3, #26]
    512e:	0752      	lsls	r2, r2, #29
    5130:	d506      	bpl.n	5140 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    5132:	6859      	ldr	r1, [r3, #4]
    5134:	22c0      	movs	r2, #192	; 0xc0
    5136:	0292      	lsls	r2, r2, #10
    5138:	430a      	orrs	r2, r1
    513a:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    513c:	2018      	movs	r0, #24
    513e:	e7f4      	b.n	512a <_i2c_master_address_response+0x16>
	return STATUS_OK;
    5140:	2000      	movs	r0, #0
    5142:	e7f2      	b.n	512a <_i2c_master_address_response+0x16>

00005144 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    5144:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5146:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    5148:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    514a:	2401      	movs	r4, #1
    514c:	2502      	movs	r5, #2
    514e:	7e11      	ldrb	r1, [r2, #24]
    5150:	4221      	tst	r1, r4
    5152:	d10b      	bne.n	516c <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    5154:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    5156:	4229      	tst	r1, r5
    5158:	d106      	bne.n	5168 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    515a:	3301      	adds	r3, #1
    515c:	b29b      	uxth	r3, r3
    515e:	8901      	ldrh	r1, [r0, #8]
    5160:	4299      	cmp	r1, r3
    5162:	d8f4      	bhi.n	514e <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    5164:	2012      	movs	r0, #18
    5166:	e002      	b.n	516e <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    5168:	2000      	movs	r0, #0
    516a:	e000      	b.n	516e <_i2c_master_wait_for_bus+0x2a>
    516c:	2000      	movs	r0, #0
}
    516e:	bd30      	pop	{r4, r5, pc}

00005170 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    5170:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5172:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5174:	6862      	ldr	r2, [r4, #4]
    5176:	2380      	movs	r3, #128	; 0x80
    5178:	02db      	lsls	r3, r3, #11
    517a:	4313      	orrs	r3, r2
    517c:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    517e:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    5180:	4b02      	ldr	r3, [pc, #8]	; (518c <_i2c_master_send_hs_master_code+0x1c>)
    5182:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    5184:	2301      	movs	r3, #1
    5186:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    5188:	bd10      	pop	{r4, pc}
    518a:	46c0      	nop			; (mov r8, r8)
    518c:	00005145 	.word	0x00005145

00005190 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    5190:	b5f0      	push	{r4, r5, r6, r7, lr}
    5192:	46de      	mov	lr, fp
    5194:	4657      	mov	r7, sl
    5196:	464e      	mov	r6, r9
    5198:	4645      	mov	r5, r8
    519a:	b5e0      	push	{r5, r6, r7, lr}
    519c:	b083      	sub	sp, #12
    519e:	0006      	movs	r6, r0
    51a0:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    51a2:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    51a4:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    51a6:	682b      	ldr	r3, [r5, #0]
    51a8:	011b      	lsls	r3, r3, #4
    51aa:	0fdb      	lsrs	r3, r3, #31
    51ac:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    51ae:	7a4b      	ldrb	r3, [r1, #9]
    51b0:	2b00      	cmp	r3, #0
    51b2:	d12b      	bne.n	520c <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    51b4:	686b      	ldr	r3, [r5, #4]
    51b6:	4a58      	ldr	r2, [pc, #352]	; (5318 <_i2c_master_read_packet+0x188>)
    51b8:	4013      	ands	r3, r2
    51ba:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    51bc:	464b      	mov	r3, r9
    51be:	7a1b      	ldrb	r3, [r3, #8]
    51c0:	2b00      	cmp	r3, #0
    51c2:	d127      	bne.n	5214 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    51c4:	464b      	mov	r3, r9
    51c6:	881b      	ldrh	r3, [r3, #0]
    51c8:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    51ca:	464a      	mov	r2, r9
    51cc:	7a52      	ldrb	r2, [r2, #9]
    51ce:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    51d0:	4313      	orrs	r3, r2
    51d2:	2201      	movs	r2, #1
    51d4:	4313      	orrs	r3, r2
    51d6:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    51d8:	0030      	movs	r0, r6
    51da:	4b50      	ldr	r3, [pc, #320]	; (531c <_i2c_master_read_packet+0x18c>)
    51dc:	4798      	blx	r3
    51de:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    51e0:	4653      	mov	r3, sl
    51e2:	2b00      	cmp	r3, #0
    51e4:	d003      	beq.n	51ee <_i2c_master_read_packet+0x5e>
    51e6:	464b      	mov	r3, r9
    51e8:	885b      	ldrh	r3, [r3, #2]
    51ea:	2b01      	cmp	r3, #1
    51ec:	d03b      	beq.n	5266 <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    51ee:	686b      	ldr	r3, [r5, #4]
    51f0:	4a49      	ldr	r2, [pc, #292]	; (5318 <_i2c_master_read_packet+0x188>)
    51f2:	4013      	ands	r3, r2
    51f4:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    51f6:	9b01      	ldr	r3, [sp, #4]
    51f8:	2b00      	cmp	r3, #0
    51fa:	d03a      	beq.n	5272 <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
    51fc:	9801      	ldr	r0, [sp, #4]
    51fe:	b003      	add	sp, #12
    5200:	bc3c      	pop	{r2, r3, r4, r5}
    5202:	4690      	mov	r8, r2
    5204:	4699      	mov	r9, r3
    5206:	46a2      	mov	sl, r4
    5208:	46ab      	mov	fp, r5
    520a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    520c:	7a89      	ldrb	r1, [r1, #10]
    520e:	4b44      	ldr	r3, [pc, #272]	; (5320 <_i2c_master_read_packet+0x190>)
    5210:	4798      	blx	r3
    5212:	e7cf      	b.n	51b4 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
    5214:	464b      	mov	r3, r9
    5216:	881b      	ldrh	r3, [r3, #0]
    5218:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    521a:	464a      	mov	r2, r9
    521c:	7a52      	ldrb	r2, [r2, #9]
    521e:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    5220:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    5222:	2280      	movs	r2, #128	; 0x80
    5224:	0212      	lsls	r2, r2, #8
    5226:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    5228:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
    522a:	0030      	movs	r0, r6
    522c:	4b3b      	ldr	r3, [pc, #236]	; (531c <_i2c_master_read_packet+0x18c>)
    522e:	4798      	blx	r3
    5230:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5232:	686b      	ldr	r3, [r5, #4]
    5234:	4a38      	ldr	r2, [pc, #224]	; (5318 <_i2c_master_read_packet+0x188>)
    5236:	4013      	ands	r3, r2
    5238:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
    523a:	2800      	cmp	r0, #0
    523c:	d1de      	bne.n	51fc <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
    523e:	0030      	movs	r0, r6
    5240:	4b38      	ldr	r3, [pc, #224]	; (5324 <_i2c_master_read_packet+0x194>)
    5242:	4798      	blx	r3
    5244:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
    5246:	2800      	cmp	r0, #0
    5248:	d1d8      	bne.n	51fc <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    524a:	464b      	mov	r3, r9
    524c:	881b      	ldrh	r3, [r3, #0]
    524e:	0a1b      	lsrs	r3, r3, #8
    5250:	2278      	movs	r2, #120	; 0x78
    5252:	4313      	orrs	r3, r2
    5254:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    5256:	464a      	mov	r2, r9
    5258:	7a52      	ldrb	r2, [r2, #9]
    525a:	0392      	lsls	r2, r2, #14
    525c:	2101      	movs	r1, #1
    525e:	430a      	orrs	r2, r1
    5260:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    5262:	626b      	str	r3, [r5, #36]	; 0x24
    5264:	e7b8      	b.n	51d8 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5266:	686a      	ldr	r2, [r5, #4]
    5268:	2380      	movs	r3, #128	; 0x80
    526a:	02db      	lsls	r3, r3, #11
    526c:	4313      	orrs	r3, r2
    526e:	606b      	str	r3, [r5, #4]
    5270:	e7c1      	b.n	51f6 <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
    5272:	0030      	movs	r0, r6
    5274:	4b2b      	ldr	r3, [pc, #172]	; (5324 <_i2c_master_read_packet+0x194>)
    5276:	4798      	blx	r3
    5278:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    527a:	2800      	cmp	r0, #0
    527c:	d1be      	bne.n	51fc <_i2c_master_read_packet+0x6c>
    527e:	3c01      	subs	r4, #1
    5280:	b2a4      	uxth	r4, r4
    5282:	4680      	mov	r8, r0
		while (tmp_data_length--) {
    5284:	4b28      	ldr	r3, [pc, #160]	; (5328 <_i2c_master_read_packet+0x198>)
    5286:	469b      	mov	fp, r3
    5288:	e015      	b.n	52b6 <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    528a:	2c01      	cmp	r4, #1
    528c:	d020      	beq.n	52d0 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
    528e:	0030      	movs	r0, r6
    5290:	4b26      	ldr	r3, [pc, #152]	; (532c <_i2c_master_read_packet+0x19c>)
    5292:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    5294:	4643      	mov	r3, r8
    5296:	1c5f      	adds	r7, r3, #1
    5298:	b2bf      	uxth	r7, r7
    529a:	2328      	movs	r3, #40	; 0x28
    529c:	5ceb      	ldrb	r3, [r5, r3]
    529e:	464a      	mov	r2, r9
    52a0:	6852      	ldr	r2, [r2, #4]
    52a2:	4641      	mov	r1, r8
    52a4:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
    52a6:	0030      	movs	r0, r6
    52a8:	4b1c      	ldr	r3, [pc, #112]	; (531c <_i2c_master_read_packet+0x18c>)
    52aa:	4798      	blx	r3
    52ac:	3c01      	subs	r4, #1
    52ae:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
    52b0:	2800      	cmp	r0, #0
    52b2:	d115      	bne.n	52e0 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
    52b4:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
    52b6:	455c      	cmp	r4, fp
    52b8:	d014      	beq.n	52e4 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    52ba:	8b6b      	ldrh	r3, [r5, #26]
    52bc:	069b      	lsls	r3, r3, #26
    52be:	d527      	bpl.n	5310 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    52c0:	7af3      	ldrb	r3, [r6, #11]
    52c2:	2b00      	cmp	r3, #0
    52c4:	d0e3      	beq.n	528e <_i2c_master_read_packet+0xfe>
    52c6:	4653      	mov	r3, sl
    52c8:	2b00      	cmp	r3, #0
    52ca:	d1de      	bne.n	528a <_i2c_master_read_packet+0xfa>
    52cc:	2c00      	cmp	r4, #0
    52ce:	d1de      	bne.n	528e <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    52d0:	686a      	ldr	r2, [r5, #4]
    52d2:	2380      	movs	r3, #128	; 0x80
    52d4:	02db      	lsls	r3, r3, #11
    52d6:	4313      	orrs	r3, r2
    52d8:	606b      	str	r3, [r5, #4]
    52da:	3c01      	subs	r4, #1
    52dc:	b2a4      	uxth	r4, r4
    52de:	e7ea      	b.n	52b6 <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
    52e0:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
    52e2:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    52e4:	7ab3      	ldrb	r3, [r6, #10]
    52e6:	2b00      	cmp	r3, #0
    52e8:	d109      	bne.n	52fe <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
    52ea:	0030      	movs	r0, r6
    52ec:	4b0f      	ldr	r3, [pc, #60]	; (532c <_i2c_master_read_packet+0x19c>)
    52ee:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    52f0:	2328      	movs	r3, #40	; 0x28
    52f2:	5cea      	ldrb	r2, [r5, r3]
    52f4:	464b      	mov	r3, r9
    52f6:	685b      	ldr	r3, [r3, #4]
    52f8:	4641      	mov	r1, r8
    52fa:	545a      	strb	r2, [r3, r1]
    52fc:	e77e      	b.n	51fc <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
    52fe:	0030      	movs	r0, r6
    5300:	4b0a      	ldr	r3, [pc, #40]	; (532c <_i2c_master_read_packet+0x19c>)
    5302:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    5304:	686a      	ldr	r2, [r5, #4]
    5306:	23c0      	movs	r3, #192	; 0xc0
    5308:	029b      	lsls	r3, r3, #10
    530a:	4313      	orrs	r3, r2
    530c:	606b      	str	r3, [r5, #4]
    530e:	e7ec      	b.n	52ea <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
    5310:	2341      	movs	r3, #65	; 0x41
    5312:	9301      	str	r3, [sp, #4]
    5314:	e772      	b.n	51fc <_i2c_master_read_packet+0x6c>
    5316:	46c0      	nop			; (mov r8, r8)
    5318:	fffbffff 	.word	0xfffbffff
    531c:	00005145 	.word	0x00005145
    5320:	00005171 	.word	0x00005171
    5324:	00005115 	.word	0x00005115
    5328:	0000ffff 	.word	0x0000ffff
    532c:	00004e01 	.word	0x00004e01

00005330 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    5330:	b5f0      	push	{r4, r5, r6, r7, lr}
    5332:	46de      	mov	lr, fp
    5334:	4657      	mov	r7, sl
    5336:	464e      	mov	r6, r9
    5338:	4645      	mov	r5, r8
    533a:	b5e0      	push	{r5, r6, r7, lr}
    533c:	b083      	sub	sp, #12
    533e:	0006      	movs	r6, r0
    5340:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5342:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    5344:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    5346:	4b32      	ldr	r3, [pc, #200]	; (5410 <_i2c_master_write_packet+0xe0>)
    5348:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    534a:	7a7b      	ldrb	r3, [r7, #9]
    534c:	2b00      	cmp	r3, #0
    534e:	d11d      	bne.n	538c <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5350:	686b      	ldr	r3, [r5, #4]
    5352:	4a30      	ldr	r2, [pc, #192]	; (5414 <_i2c_master_write_packet+0xe4>)
    5354:	4013      	ands	r3, r2
    5356:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    5358:	7a3b      	ldrb	r3, [r7, #8]
    535a:	2b00      	cmp	r3, #0
    535c:	d01b      	beq.n	5396 <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    535e:	883b      	ldrh	r3, [r7, #0]
    5360:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    5362:	7a7a      	ldrb	r2, [r7, #9]
    5364:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    5366:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    5368:	2280      	movs	r2, #128	; 0x80
    536a:	0212      	lsls	r2, r2, #8
    536c:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    536e:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    5370:	0030      	movs	r0, r6
    5372:	4b29      	ldr	r3, [pc, #164]	; (5418 <_i2c_master_write_packet+0xe8>)
    5374:	4798      	blx	r3
    5376:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    5378:	2800      	cmp	r0, #0
    537a:	d013      	beq.n	53a4 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    537c:	9801      	ldr	r0, [sp, #4]
    537e:	b003      	add	sp, #12
    5380:	bc3c      	pop	{r2, r3, r4, r5}
    5382:	4690      	mov	r8, r2
    5384:	4699      	mov	r9, r3
    5386:	46a2      	mov	sl, r4
    5388:	46ab      	mov	fp, r5
    538a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    538c:	7ab9      	ldrb	r1, [r7, #10]
    538e:	0030      	movs	r0, r6
    5390:	4b22      	ldr	r3, [pc, #136]	; (541c <_i2c_master_write_packet+0xec>)
    5392:	4798      	blx	r3
    5394:	e7dc      	b.n	5350 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    5396:	883b      	ldrh	r3, [r7, #0]
    5398:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    539a:	7a7a      	ldrb	r2, [r7, #9]
    539c:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    539e:	4313      	orrs	r3, r2
    53a0:	626b      	str	r3, [r5, #36]	; 0x24
    53a2:	e7e5      	b.n	5370 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
    53a4:	0030      	movs	r0, r6
    53a6:	4b1e      	ldr	r3, [pc, #120]	; (5420 <_i2c_master_write_packet+0xf0>)
    53a8:	4798      	blx	r3
    53aa:	1e03      	subs	r3, r0, #0
    53ac:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    53ae:	d1e5      	bne.n	537c <_i2c_master_write_packet+0x4c>
    53b0:	46a0      	mov	r8, r4
    53b2:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    53b4:	3320      	adds	r3, #32
    53b6:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
    53b8:	4b15      	ldr	r3, [pc, #84]	; (5410 <_i2c_master_write_packet+0xe0>)
    53ba:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
    53bc:	4b16      	ldr	r3, [pc, #88]	; (5418 <_i2c_master_write_packet+0xe8>)
    53be:	469a      	mov	sl, r3
		while (tmp_data_length--) {
    53c0:	4544      	cmp	r4, r8
    53c2:	d015      	beq.n	53f0 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    53c4:	8b6b      	ldrh	r3, [r5, #26]
    53c6:	464a      	mov	r2, r9
    53c8:	4213      	tst	r3, r2
    53ca:	d01d      	beq.n	5408 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
    53cc:	0030      	movs	r0, r6
    53ce:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    53d0:	687b      	ldr	r3, [r7, #4]
    53d2:	5d1a      	ldrb	r2, [r3, r4]
    53d4:	2328      	movs	r3, #40	; 0x28
    53d6:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
    53d8:	0030      	movs	r0, r6
    53da:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
    53dc:	2800      	cmp	r0, #0
    53de:	d106      	bne.n	53ee <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    53e0:	8b6b      	ldrh	r3, [r5, #26]
    53e2:	3401      	adds	r4, #1
    53e4:	075b      	lsls	r3, r3, #29
    53e6:	d5eb      	bpl.n	53c0 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
    53e8:	231e      	movs	r3, #30
    53ea:	9301      	str	r3, [sp, #4]
    53ec:	e000      	b.n	53f0 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
    53ee:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    53f0:	7ab3      	ldrb	r3, [r6, #10]
    53f2:	2b00      	cmp	r3, #0
    53f4:	d0c2      	beq.n	537c <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
    53f6:	0030      	movs	r0, r6
    53f8:	4b05      	ldr	r3, [pc, #20]	; (5410 <_i2c_master_write_packet+0xe0>)
    53fa:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    53fc:	686a      	ldr	r2, [r5, #4]
    53fe:	23c0      	movs	r3, #192	; 0xc0
    5400:	029b      	lsls	r3, r3, #10
    5402:	4313      	orrs	r3, r2
    5404:	606b      	str	r3, [r5, #4]
    5406:	e7b9      	b.n	537c <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
    5408:	2341      	movs	r3, #65	; 0x41
    540a:	9301      	str	r3, [sp, #4]
    540c:	e7b6      	b.n	537c <_i2c_master_write_packet+0x4c>
    540e:	46c0      	nop			; (mov r8, r8)
    5410:	00004e01 	.word	0x00004e01
    5414:	fffbffff 	.word	0xfffbffff
    5418:	00005145 	.word	0x00005145
    541c:	00005171 	.word	0x00005171
    5420:	00005115 	.word	0x00005115

00005424 <i2c_master_read_packet_wait>:
{
    5424:	b510      	push	{r4, lr}
	module->send_stop = true;
    5426:	2301      	movs	r3, #1
    5428:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    542a:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    542c:	4b01      	ldr	r3, [pc, #4]	; (5434 <i2c_master_read_packet_wait+0x10>)
    542e:	4798      	blx	r3
}
    5430:	bd10      	pop	{r4, pc}
    5432:	46c0      	nop			; (mov r8, r8)
    5434:	00005191 	.word	0x00005191

00005438 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    5438:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = false;
    543a:	2300      	movs	r3, #0
    543c:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    543e:	3301      	adds	r3, #1
    5440:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
    5442:	4b01      	ldr	r3, [pc, #4]	; (5448 <i2c_master_write_packet_wait_no_stop+0x10>)
    5444:	4798      	blx	r3
}
    5446:	bd10      	pop	{r4, pc}
    5448:	00005331 	.word	0x00005331

0000544c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    544c:	b5f0      	push	{r4, r5, r6, r7, lr}
    544e:	46de      	mov	lr, fp
    5450:	4657      	mov	r7, sl
    5452:	464e      	mov	r6, r9
    5454:	4645      	mov	r5, r8
    5456:	b5e0      	push	{r5, r6, r7, lr}
    5458:	b087      	sub	sp, #28
    545a:	4680      	mov	r8, r0
    545c:	9104      	str	r1, [sp, #16]
    545e:	0016      	movs	r6, r2
    5460:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    5462:	2200      	movs	r2, #0
    5464:	2300      	movs	r3, #0
    5466:	2100      	movs	r1, #0
    5468:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    546a:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    546c:	2001      	movs	r0, #1
    546e:	0021      	movs	r1, r4
    5470:	9600      	str	r6, [sp, #0]
    5472:	9701      	str	r7, [sp, #4]
    5474:	465c      	mov	r4, fp
    5476:	9403      	str	r4, [sp, #12]
    5478:	4644      	mov	r4, r8
    547a:	9405      	str	r4, [sp, #20]
    547c:	e013      	b.n	54a6 <long_division+0x5a>
    547e:	2420      	movs	r4, #32
    5480:	1a64      	subs	r4, r4, r1
    5482:	0005      	movs	r5, r0
    5484:	40e5      	lsrs	r5, r4
    5486:	46a8      	mov	r8, r5
    5488:	e014      	b.n	54b4 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    548a:	9c00      	ldr	r4, [sp, #0]
    548c:	9d01      	ldr	r5, [sp, #4]
    548e:	1b12      	subs	r2, r2, r4
    5490:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    5492:	465c      	mov	r4, fp
    5494:	464d      	mov	r5, r9
    5496:	432c      	orrs	r4, r5
    5498:	46a3      	mov	fp, r4
    549a:	9c03      	ldr	r4, [sp, #12]
    549c:	4645      	mov	r5, r8
    549e:	432c      	orrs	r4, r5
    54a0:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    54a2:	3901      	subs	r1, #1
    54a4:	d325      	bcc.n	54f2 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    54a6:	2420      	movs	r4, #32
    54a8:	4264      	negs	r4, r4
    54aa:	190c      	adds	r4, r1, r4
    54ac:	d4e7      	bmi.n	547e <long_division+0x32>
    54ae:	0005      	movs	r5, r0
    54b0:	40a5      	lsls	r5, r4
    54b2:	46a8      	mov	r8, r5
    54b4:	0004      	movs	r4, r0
    54b6:	408c      	lsls	r4, r1
    54b8:	46a1      	mov	r9, r4
		r = r << 1;
    54ba:	1892      	adds	r2, r2, r2
    54bc:	415b      	adcs	r3, r3
    54be:	0014      	movs	r4, r2
    54c0:	001d      	movs	r5, r3
		if (n & bit_shift) {
    54c2:	9e05      	ldr	r6, [sp, #20]
    54c4:	464f      	mov	r7, r9
    54c6:	403e      	ands	r6, r7
    54c8:	46b4      	mov	ip, r6
    54ca:	9e04      	ldr	r6, [sp, #16]
    54cc:	4647      	mov	r7, r8
    54ce:	403e      	ands	r6, r7
    54d0:	46b2      	mov	sl, r6
    54d2:	4666      	mov	r6, ip
    54d4:	4657      	mov	r7, sl
    54d6:	433e      	orrs	r6, r7
    54d8:	d003      	beq.n	54e2 <long_division+0x96>
			r |= 0x01;
    54da:	0006      	movs	r6, r0
    54dc:	4326      	orrs	r6, r4
    54de:	0032      	movs	r2, r6
    54e0:	002b      	movs	r3, r5
		if (r >= d) {
    54e2:	9c00      	ldr	r4, [sp, #0]
    54e4:	9d01      	ldr	r5, [sp, #4]
    54e6:	429d      	cmp	r5, r3
    54e8:	d8db      	bhi.n	54a2 <long_division+0x56>
    54ea:	d1ce      	bne.n	548a <long_division+0x3e>
    54ec:	4294      	cmp	r4, r2
    54ee:	d8d8      	bhi.n	54a2 <long_division+0x56>
    54f0:	e7cb      	b.n	548a <long_division+0x3e>
    54f2:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    54f4:	4658      	mov	r0, fp
    54f6:	0019      	movs	r1, r3
    54f8:	b007      	add	sp, #28
    54fa:	bc3c      	pop	{r2, r3, r4, r5}
    54fc:	4690      	mov	r8, r2
    54fe:	4699      	mov	r9, r3
    5500:	46a2      	mov	sl, r4
    5502:	46ab      	mov	fp, r5
    5504:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005506 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    5506:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    5508:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    550a:	2340      	movs	r3, #64	; 0x40
    550c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    550e:	4281      	cmp	r1, r0
    5510:	d202      	bcs.n	5518 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    5512:	0018      	movs	r0, r3
    5514:	bd10      	pop	{r4, pc}
		baud_calculated++;
    5516:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    5518:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    551a:	1c63      	adds	r3, r4, #1
    551c:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    551e:	4288      	cmp	r0, r1
    5520:	d9f9      	bls.n	5516 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5522:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    5524:	2cff      	cmp	r4, #255	; 0xff
    5526:	d8f4      	bhi.n	5512 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    5528:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    552a:	2300      	movs	r3, #0
    552c:	e7f1      	b.n	5512 <_sercom_get_sync_baud_val+0xc>
    552e:	Address 0x0000552e is out of bounds.


00005530 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    5530:	b5f0      	push	{r4, r5, r6, r7, lr}
    5532:	b083      	sub	sp, #12
    5534:	000f      	movs	r7, r1
    5536:	0016      	movs	r6, r2
    5538:	aa08      	add	r2, sp, #32
    553a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    553c:	0004      	movs	r4, r0
    553e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5540:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    5542:	42bc      	cmp	r4, r7
    5544:	d902      	bls.n	554c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    5546:	0010      	movs	r0, r2
    5548:	b003      	add	sp, #12
    554a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    554c:	2b00      	cmp	r3, #0
    554e:	d114      	bne.n	557a <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    5550:	0002      	movs	r2, r0
    5552:	0008      	movs	r0, r1
    5554:	2100      	movs	r1, #0
    5556:	4c19      	ldr	r4, [pc, #100]	; (55bc <_sercom_get_async_baud_val+0x8c>)
    5558:	47a0      	blx	r4
    555a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    555c:	003a      	movs	r2, r7
    555e:	2300      	movs	r3, #0
    5560:	2000      	movs	r0, #0
    5562:	4c17      	ldr	r4, [pc, #92]	; (55c0 <_sercom_get_async_baud_val+0x90>)
    5564:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    5566:	2200      	movs	r2, #0
    5568:	2301      	movs	r3, #1
    556a:	1a12      	subs	r2, r2, r0
    556c:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    556e:	0c12      	lsrs	r2, r2, #16
    5570:	041b      	lsls	r3, r3, #16
    5572:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    5574:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    5576:	2200      	movs	r2, #0
    5578:	e7e5      	b.n	5546 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    557a:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    557c:	2b01      	cmp	r3, #1
    557e:	d1f9      	bne.n	5574 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    5580:	000a      	movs	r2, r1
    5582:	2300      	movs	r3, #0
    5584:	2100      	movs	r1, #0
    5586:	4c0d      	ldr	r4, [pc, #52]	; (55bc <_sercom_get_async_baud_val+0x8c>)
    5588:	47a0      	blx	r4
    558a:	0002      	movs	r2, r0
    558c:	000b      	movs	r3, r1
    558e:	9200      	str	r2, [sp, #0]
    5590:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    5592:	0038      	movs	r0, r7
    5594:	2100      	movs	r1, #0
    5596:	4c0a      	ldr	r4, [pc, #40]	; (55c0 <_sercom_get_async_baud_val+0x90>)
    5598:	47a0      	blx	r4
    559a:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    559c:	2380      	movs	r3, #128	; 0x80
    559e:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    55a0:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    55a2:	4298      	cmp	r0, r3
    55a4:	d8cf      	bhi.n	5546 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    55a6:	0f79      	lsrs	r1, r7, #29
    55a8:	00f8      	lsls	r0, r7, #3
    55aa:	9a00      	ldr	r2, [sp, #0]
    55ac:	9b01      	ldr	r3, [sp, #4]
    55ae:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    55b0:	00ea      	lsls	r2, r5, #3
    55b2:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    55b4:	b2d2      	uxtb	r2, r2
    55b6:	0352      	lsls	r2, r2, #13
    55b8:	432a      	orrs	r2, r5
    55ba:	e7db      	b.n	5574 <_sercom_get_async_baud_val+0x44>
    55bc:	00013e01 	.word	0x00013e01
    55c0:	0000544d 	.word	0x0000544d

000055c4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    55c4:	b510      	push	{r4, lr}
    55c6:	b082      	sub	sp, #8
    55c8:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    55ca:	4b0e      	ldr	r3, [pc, #56]	; (5604 <sercom_set_gclk_generator+0x40>)
    55cc:	781b      	ldrb	r3, [r3, #0]
    55ce:	2b00      	cmp	r3, #0
    55d0:	d007      	beq.n	55e2 <sercom_set_gclk_generator+0x1e>
    55d2:	2900      	cmp	r1, #0
    55d4:	d105      	bne.n	55e2 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    55d6:	4b0b      	ldr	r3, [pc, #44]	; (5604 <sercom_set_gclk_generator+0x40>)
    55d8:	785b      	ldrb	r3, [r3, #1]
    55da:	4283      	cmp	r3, r0
    55dc:	d010      	beq.n	5600 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    55de:	201d      	movs	r0, #29
    55e0:	e00c      	b.n	55fc <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    55e2:	a901      	add	r1, sp, #4
    55e4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    55e6:	2011      	movs	r0, #17
    55e8:	4b07      	ldr	r3, [pc, #28]	; (5608 <sercom_set_gclk_generator+0x44>)
    55ea:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    55ec:	2011      	movs	r0, #17
    55ee:	4b07      	ldr	r3, [pc, #28]	; (560c <sercom_set_gclk_generator+0x48>)
    55f0:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    55f2:	4b04      	ldr	r3, [pc, #16]	; (5604 <sercom_set_gclk_generator+0x40>)
    55f4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    55f6:	2201      	movs	r2, #1
    55f8:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    55fa:	2000      	movs	r0, #0
}
    55fc:	b002      	add	sp, #8
    55fe:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    5600:	2000      	movs	r0, #0
    5602:	e7fb      	b.n	55fc <sercom_set_gclk_generator+0x38>
    5604:	200000bc 	.word	0x200000bc
    5608:	00006a65 	.word	0x00006a65
    560c:	000069f5 	.word	0x000069f5

00005610 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    5610:	4b3c      	ldr	r3, [pc, #240]	; (5704 <_sercom_get_default_pad+0xf4>)
    5612:	4298      	cmp	r0, r3
    5614:	d032      	beq.n	567c <_sercom_get_default_pad+0x6c>
    5616:	d90a      	bls.n	562e <_sercom_get_default_pad+0x1e>
    5618:	4b3b      	ldr	r3, [pc, #236]	; (5708 <_sercom_get_default_pad+0xf8>)
    561a:	4298      	cmp	r0, r3
    561c:	d04e      	beq.n	56bc <_sercom_get_default_pad+0xac>
    561e:	4b3b      	ldr	r3, [pc, #236]	; (570c <_sercom_get_default_pad+0xfc>)
    5620:	4298      	cmp	r0, r3
    5622:	d055      	beq.n	56d0 <_sercom_get_default_pad+0xc0>
    5624:	4b3a      	ldr	r3, [pc, #232]	; (5710 <_sercom_get_default_pad+0x100>)
    5626:	4298      	cmp	r0, r3
    5628:	d038      	beq.n	569c <_sercom_get_default_pad+0x8c>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    562a:	2000      	movs	r0, #0
}
    562c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    562e:	2384      	movs	r3, #132	; 0x84
    5630:	05db      	lsls	r3, r3, #23
    5632:	4298      	cmp	r0, r3
    5634:	d00c      	beq.n	5650 <_sercom_get_default_pad+0x40>
    5636:	4b37      	ldr	r3, [pc, #220]	; (5714 <_sercom_get_default_pad+0x104>)
    5638:	4298      	cmp	r0, r3
    563a:	d1f6      	bne.n	562a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    563c:	2901      	cmp	r1, #1
    563e:	d017      	beq.n	5670 <_sercom_get_default_pad+0x60>
    5640:	2900      	cmp	r1, #0
    5642:	d057      	beq.n	56f4 <_sercom_get_default_pad+0xe4>
    5644:	2902      	cmp	r1, #2
    5646:	d015      	beq.n	5674 <_sercom_get_default_pad+0x64>
    5648:	2903      	cmp	r1, #3
    564a:	d015      	beq.n	5678 <_sercom_get_default_pad+0x68>
	return 0;
    564c:	2000      	movs	r0, #0
    564e:	e7ed      	b.n	562c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5650:	2901      	cmp	r1, #1
    5652:	d007      	beq.n	5664 <_sercom_get_default_pad+0x54>
    5654:	2900      	cmp	r1, #0
    5656:	d04b      	beq.n	56f0 <_sercom_get_default_pad+0xe0>
    5658:	2902      	cmp	r1, #2
    565a:	d005      	beq.n	5668 <_sercom_get_default_pad+0x58>
    565c:	2903      	cmp	r1, #3
    565e:	d005      	beq.n	566c <_sercom_get_default_pad+0x5c>
	return 0;
    5660:	2000      	movs	r0, #0
    5662:	e7e3      	b.n	562c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5664:	482c      	ldr	r0, [pc, #176]	; (5718 <_sercom_get_default_pad+0x108>)
    5666:	e7e1      	b.n	562c <_sercom_get_default_pad+0x1c>
    5668:	482c      	ldr	r0, [pc, #176]	; (571c <_sercom_get_default_pad+0x10c>)
    566a:	e7df      	b.n	562c <_sercom_get_default_pad+0x1c>
    566c:	482c      	ldr	r0, [pc, #176]	; (5720 <_sercom_get_default_pad+0x110>)
    566e:	e7dd      	b.n	562c <_sercom_get_default_pad+0x1c>
    5670:	482c      	ldr	r0, [pc, #176]	; (5724 <_sercom_get_default_pad+0x114>)
    5672:	e7db      	b.n	562c <_sercom_get_default_pad+0x1c>
    5674:	482c      	ldr	r0, [pc, #176]	; (5728 <_sercom_get_default_pad+0x118>)
    5676:	e7d9      	b.n	562c <_sercom_get_default_pad+0x1c>
    5678:	482c      	ldr	r0, [pc, #176]	; (572c <_sercom_get_default_pad+0x11c>)
    567a:	e7d7      	b.n	562c <_sercom_get_default_pad+0x1c>
    567c:	2901      	cmp	r1, #1
    567e:	d007      	beq.n	5690 <_sercom_get_default_pad+0x80>
    5680:	2900      	cmp	r1, #0
    5682:	d039      	beq.n	56f8 <_sercom_get_default_pad+0xe8>
    5684:	2902      	cmp	r1, #2
    5686:	d005      	beq.n	5694 <_sercom_get_default_pad+0x84>
    5688:	2903      	cmp	r1, #3
    568a:	d005      	beq.n	5698 <_sercom_get_default_pad+0x88>
	return 0;
    568c:	2000      	movs	r0, #0
    568e:	e7cd      	b.n	562c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5690:	4827      	ldr	r0, [pc, #156]	; (5730 <_sercom_get_default_pad+0x120>)
    5692:	e7cb      	b.n	562c <_sercom_get_default_pad+0x1c>
    5694:	4827      	ldr	r0, [pc, #156]	; (5734 <_sercom_get_default_pad+0x124>)
    5696:	e7c9      	b.n	562c <_sercom_get_default_pad+0x1c>
    5698:	4827      	ldr	r0, [pc, #156]	; (5738 <_sercom_get_default_pad+0x128>)
    569a:	e7c7      	b.n	562c <_sercom_get_default_pad+0x1c>
    569c:	2901      	cmp	r1, #1
    569e:	d007      	beq.n	56b0 <_sercom_get_default_pad+0xa0>
    56a0:	2900      	cmp	r1, #0
    56a2:	d02b      	beq.n	56fc <_sercom_get_default_pad+0xec>
    56a4:	2902      	cmp	r1, #2
    56a6:	d005      	beq.n	56b4 <_sercom_get_default_pad+0xa4>
    56a8:	2903      	cmp	r1, #3
    56aa:	d005      	beq.n	56b8 <_sercom_get_default_pad+0xa8>
	return 0;
    56ac:	2000      	movs	r0, #0
    56ae:	e7bd      	b.n	562c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    56b0:	4822      	ldr	r0, [pc, #136]	; (573c <_sercom_get_default_pad+0x12c>)
    56b2:	e7bb      	b.n	562c <_sercom_get_default_pad+0x1c>
    56b4:	4822      	ldr	r0, [pc, #136]	; (5740 <_sercom_get_default_pad+0x130>)
    56b6:	e7b9      	b.n	562c <_sercom_get_default_pad+0x1c>
    56b8:	4822      	ldr	r0, [pc, #136]	; (5744 <_sercom_get_default_pad+0x134>)
    56ba:	e7b7      	b.n	562c <_sercom_get_default_pad+0x1c>
    56bc:	2902      	cmp	r1, #2
    56be:	d003      	beq.n	56c8 <_sercom_get_default_pad+0xb8>
    56c0:	2903      	cmp	r1, #3
    56c2:	d003      	beq.n	56cc <_sercom_get_default_pad+0xbc>
    56c4:	2000      	movs	r0, #0
    56c6:	e7b1      	b.n	562c <_sercom_get_default_pad+0x1c>
    56c8:	481f      	ldr	r0, [pc, #124]	; (5748 <_sercom_get_default_pad+0x138>)
    56ca:	e7af      	b.n	562c <_sercom_get_default_pad+0x1c>
    56cc:	481f      	ldr	r0, [pc, #124]	; (574c <_sercom_get_default_pad+0x13c>)
    56ce:	e7ad      	b.n	562c <_sercom_get_default_pad+0x1c>
    56d0:	2901      	cmp	r1, #1
    56d2:	d007      	beq.n	56e4 <_sercom_get_default_pad+0xd4>
    56d4:	2900      	cmp	r1, #0
    56d6:	d013      	beq.n	5700 <_sercom_get_default_pad+0xf0>
    56d8:	2902      	cmp	r1, #2
    56da:	d005      	beq.n	56e8 <_sercom_get_default_pad+0xd8>
    56dc:	2903      	cmp	r1, #3
    56de:	d005      	beq.n	56ec <_sercom_get_default_pad+0xdc>
	return 0;
    56e0:	2000      	movs	r0, #0
    56e2:	e7a3      	b.n	562c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    56e4:	481a      	ldr	r0, [pc, #104]	; (5750 <_sercom_get_default_pad+0x140>)
    56e6:	e7a1      	b.n	562c <_sercom_get_default_pad+0x1c>
    56e8:	481a      	ldr	r0, [pc, #104]	; (5754 <_sercom_get_default_pad+0x144>)
    56ea:	e79f      	b.n	562c <_sercom_get_default_pad+0x1c>
    56ec:	481a      	ldr	r0, [pc, #104]	; (5758 <_sercom_get_default_pad+0x148>)
    56ee:	e79d      	b.n	562c <_sercom_get_default_pad+0x1c>
    56f0:	481a      	ldr	r0, [pc, #104]	; (575c <_sercom_get_default_pad+0x14c>)
    56f2:	e79b      	b.n	562c <_sercom_get_default_pad+0x1c>
    56f4:	2003      	movs	r0, #3
    56f6:	e799      	b.n	562c <_sercom_get_default_pad+0x1c>
    56f8:	4819      	ldr	r0, [pc, #100]	; (5760 <_sercom_get_default_pad+0x150>)
    56fa:	e797      	b.n	562c <_sercom_get_default_pad+0x1c>
    56fc:	4819      	ldr	r0, [pc, #100]	; (5764 <_sercom_get_default_pad+0x154>)
    56fe:	e795      	b.n	562c <_sercom_get_default_pad+0x1c>
    5700:	4819      	ldr	r0, [pc, #100]	; (5768 <_sercom_get_default_pad+0x158>)
    5702:	e793      	b.n	562c <_sercom_get_default_pad+0x1c>
    5704:	42000800 	.word	0x42000800
    5708:	42001000 	.word	0x42001000
    570c:	43000400 	.word	0x43000400
    5710:	42000c00 	.word	0x42000c00
    5714:	42000400 	.word	0x42000400
    5718:	00050003 	.word	0x00050003
    571c:	00060003 	.word	0x00060003
    5720:	00070003 	.word	0x00070003
    5724:	00010003 	.word	0x00010003
    5728:	001e0003 	.word	0x001e0003
    572c:	001f0003 	.word	0x001f0003
    5730:	00090003 	.word	0x00090003
    5734:	000a0003 	.word	0x000a0003
    5738:	000b0003 	.word	0x000b0003
    573c:	00110003 	.word	0x00110003
    5740:	00120003 	.word	0x00120003
    5744:	00130003 	.word	0x00130003
    5748:	000e0003 	.word	0x000e0003
    574c:	000f0003 	.word	0x000f0003
    5750:	00170003 	.word	0x00170003
    5754:	00180003 	.word	0x00180003
    5758:	00190003 	.word	0x00190003
    575c:	00040003 	.word	0x00040003
    5760:	00080003 	.word	0x00080003
    5764:	00100003 	.word	0x00100003
    5768:	00160003 	.word	0x00160003

0000576c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    576c:	b530      	push	{r4, r5, lr}
    576e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    5770:	4b0b      	ldr	r3, [pc, #44]	; (57a0 <_sercom_get_sercom_inst_index+0x34>)
    5772:	466a      	mov	r2, sp
    5774:	cb32      	ldmia	r3!, {r1, r4, r5}
    5776:	c232      	stmia	r2!, {r1, r4, r5}
    5778:	cb32      	ldmia	r3!, {r1, r4, r5}
    577a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    577c:	9b00      	ldr	r3, [sp, #0]
    577e:	4283      	cmp	r3, r0
    5780:	d00b      	beq.n	579a <_sercom_get_sercom_inst_index+0x2e>
    5782:	2301      	movs	r3, #1
    5784:	009a      	lsls	r2, r3, #2
    5786:	4669      	mov	r1, sp
    5788:	5852      	ldr	r2, [r2, r1]
    578a:	4282      	cmp	r2, r0
    578c:	d006      	beq.n	579c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    578e:	3301      	adds	r3, #1
    5790:	2b06      	cmp	r3, #6
    5792:	d1f7      	bne.n	5784 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    5794:	2000      	movs	r0, #0
}
    5796:	b007      	add	sp, #28
    5798:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    579a:	2300      	movs	r3, #0
			return i;
    579c:	b2d8      	uxtb	r0, r3
    579e:	e7fa      	b.n	5796 <_sercom_get_sercom_inst_index+0x2a>
    57a0:	00018044 	.word	0x00018044

000057a4 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    57a4:	4770      	bx	lr
    57a6:	Address 0x000057a6 is out of bounds.


000057a8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    57a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    57aa:	4b0a      	ldr	r3, [pc, #40]	; (57d4 <_sercom_set_handler+0x2c>)
    57ac:	781b      	ldrb	r3, [r3, #0]
    57ae:	2b00      	cmp	r3, #0
    57b0:	d10c      	bne.n	57cc <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    57b2:	4f09      	ldr	r7, [pc, #36]	; (57d8 <_sercom_set_handler+0x30>)
    57b4:	4e09      	ldr	r6, [pc, #36]	; (57dc <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    57b6:	4d0a      	ldr	r5, [pc, #40]	; (57e0 <_sercom_set_handler+0x38>)
    57b8:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    57ba:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    57bc:	195a      	adds	r2, r3, r5
    57be:	6014      	str	r4, [r2, #0]
    57c0:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    57c2:	2b18      	cmp	r3, #24
    57c4:	d1f9      	bne.n	57ba <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    57c6:	2201      	movs	r2, #1
    57c8:	4b02      	ldr	r3, [pc, #8]	; (57d4 <_sercom_set_handler+0x2c>)
    57ca:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    57cc:	0080      	lsls	r0, r0, #2
    57ce:	4b02      	ldr	r3, [pc, #8]	; (57d8 <_sercom_set_handler+0x30>)
    57d0:	50c1      	str	r1, [r0, r3]
}
    57d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    57d4:	200000be 	.word	0x200000be
    57d8:	200000c0 	.word	0x200000c0
    57dc:	000057a5 	.word	0x000057a5
    57e0:	20001f2c 	.word	0x20001f2c

000057e4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    57e4:	b500      	push	{lr}
    57e6:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    57e8:	2308      	movs	r3, #8
    57ea:	466a      	mov	r2, sp
    57ec:	7013      	strb	r3, [r2, #0]
    57ee:	3301      	adds	r3, #1
    57f0:	7053      	strb	r3, [r2, #1]
    57f2:	3301      	adds	r3, #1
    57f4:	7093      	strb	r3, [r2, #2]
    57f6:	3301      	adds	r3, #1
    57f8:	70d3      	strb	r3, [r2, #3]
    57fa:	3301      	adds	r3, #1
    57fc:	7113      	strb	r3, [r2, #4]
    57fe:	3301      	adds	r3, #1
    5800:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    5802:	4b03      	ldr	r3, [pc, #12]	; (5810 <_sercom_get_interrupt_vector+0x2c>)
    5804:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    5806:	466b      	mov	r3, sp
    5808:	5618      	ldrsb	r0, [r3, r0]
}
    580a:	b003      	add	sp, #12
    580c:	bd00      	pop	{pc}
    580e:	46c0      	nop			; (mov r8, r8)
    5810:	0000576d 	.word	0x0000576d

00005814 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    5814:	b510      	push	{r4, lr}
    5816:	4b02      	ldr	r3, [pc, #8]	; (5820 <SERCOM0_Handler+0xc>)
    5818:	681b      	ldr	r3, [r3, #0]
    581a:	2000      	movs	r0, #0
    581c:	4798      	blx	r3
    581e:	bd10      	pop	{r4, pc}
    5820:	200000c0 	.word	0x200000c0

00005824 <SERCOM1_Handler>:
    5824:	b510      	push	{r4, lr}
    5826:	4b02      	ldr	r3, [pc, #8]	; (5830 <SERCOM1_Handler+0xc>)
    5828:	685b      	ldr	r3, [r3, #4]
    582a:	2001      	movs	r0, #1
    582c:	4798      	blx	r3
    582e:	bd10      	pop	{r4, pc}
    5830:	200000c0 	.word	0x200000c0

00005834 <SERCOM2_Handler>:
    5834:	b510      	push	{r4, lr}
    5836:	4b02      	ldr	r3, [pc, #8]	; (5840 <SERCOM2_Handler+0xc>)
    5838:	689b      	ldr	r3, [r3, #8]
    583a:	2002      	movs	r0, #2
    583c:	4798      	blx	r3
    583e:	bd10      	pop	{r4, pc}
    5840:	200000c0 	.word	0x200000c0

00005844 <SERCOM3_Handler>:
    5844:	b510      	push	{r4, lr}
    5846:	4b02      	ldr	r3, [pc, #8]	; (5850 <SERCOM3_Handler+0xc>)
    5848:	68db      	ldr	r3, [r3, #12]
    584a:	2003      	movs	r0, #3
    584c:	4798      	blx	r3
    584e:	bd10      	pop	{r4, pc}
    5850:	200000c0 	.word	0x200000c0

00005854 <SERCOM4_Handler>:
    5854:	b510      	push	{r4, lr}
    5856:	4b02      	ldr	r3, [pc, #8]	; (5860 <SERCOM4_Handler+0xc>)
    5858:	691b      	ldr	r3, [r3, #16]
    585a:	2004      	movs	r0, #4
    585c:	4798      	blx	r3
    585e:	bd10      	pop	{r4, pc}
    5860:	200000c0 	.word	0x200000c0

00005864 <SERCOM5_Handler>:
    5864:	b510      	push	{r4, lr}
    5866:	4b02      	ldr	r3, [pc, #8]	; (5870 <SERCOM5_Handler+0xc>)
    5868:	695b      	ldr	r3, [r3, #20]
    586a:	2005      	movs	r0, #5
    586c:	4798      	blx	r3
    586e:	bd10      	pop	{r4, pc}
    5870:	200000c0 	.word	0x200000c0

00005874 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    5874:	b5f0      	push	{r4, r5, r6, r7, lr}
    5876:	46d6      	mov	lr, sl
    5878:	464f      	mov	r7, r9
    587a:	4646      	mov	r6, r8
    587c:	b5c0      	push	{r6, r7, lr}
    587e:	b08a      	sub	sp, #40	; 0x28
    5880:	0006      	movs	r6, r0
    5882:	000f      	movs	r7, r1
    5884:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    5886:	6031      	str	r1, [r6, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    5888:	680b      	ldr	r3, [r1, #0]
    588a:	079b      	lsls	r3, r3, #30
    588c:	d40a      	bmi.n	58a4 <spi_init+0x30>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    588e:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    5890:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    5892:	07db      	lsls	r3, r3, #31
    5894:	d400      	bmi.n	5898 <spi_init+0x24>
    5896:	e0af      	b.n	59f8 <spi_init+0x184>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    5898:	b00a      	add	sp, #40	; 0x28
    589a:	bc1c      	pop	{r2, r3, r4}
    589c:	4690      	mov	r8, r2
    589e:	4699      	mov	r9, r3
    58a0:	46a2      	mov	sl, r4
    58a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    58a4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    58a6:	9305      	str	r3, [sp, #20]
    58a8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    58aa:	9306      	str	r3, [sp, #24]
    58ac:	6b13      	ldr	r3, [r2, #48]	; 0x30
    58ae:	9307      	str	r3, [sp, #28]
    58b0:	6b53      	ldr	r3, [r2, #52]	; 0x34
    58b2:	9308      	str	r3, [sp, #32]
    58b4:	2500      	movs	r5, #0
    58b6:	e00a      	b.n	58ce <spi_init+0x5a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    58b8:	0038      	movs	r0, r7
    58ba:	4bb6      	ldr	r3, [pc, #728]	; (5b94 <spi_init+0x320>)
    58bc:	4798      	blx	r3
    58be:	e00e      	b.n	58de <spi_init+0x6a>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    58c0:	230f      	movs	r3, #15
    58c2:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    58c4:	4581      	cmp	r9, r0
    58c6:	d130      	bne.n	592a <spi_init+0xb6>
    58c8:	3501      	adds	r5, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    58ca:	2d04      	cmp	r5, #4
    58cc:	d031      	beq.n	5932 <spi_init+0xbe>
    58ce:	b2e9      	uxtb	r1, r5
		uint32_t current_pinmux = pad_pinmuxes[pad];
    58d0:	00ab      	lsls	r3, r5, #2
    58d2:	aa02      	add	r2, sp, #8
    58d4:	200c      	movs	r0, #12
    58d6:	1812      	adds	r2, r2, r0
    58d8:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    58da:	2800      	cmp	r0, #0
    58dc:	d0ec      	beq.n	58b8 <spi_init+0x44>
		if (current_pinmux == PINMUX_UNUSED) {
    58de:	1c43      	adds	r3, r0, #1
    58e0:	d0f2      	beq.n	58c8 <spi_init+0x54>
		if ((current_pinmux & 0xFFFF) !=
    58e2:	0401      	lsls	r1, r0, #16
    58e4:	0c0b      	lsrs	r3, r1, #16
    58e6:	4699      	mov	r9, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    58e8:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    58ea:	b2c3      	uxtb	r3, r0
    58ec:	469c      	mov	ip, r3
		return NULL;
    58ee:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    58f0:	0602      	lsls	r2, r0, #24
    58f2:	d405      	bmi.n	5900 <spi_init+0x8c>
		return &(ports[port_index]->Group[group_index]);
    58f4:	4663      	mov	r3, ip
    58f6:	095b      	lsrs	r3, r3, #5
    58f8:	01db      	lsls	r3, r3, #7
    58fa:	4aa7      	ldr	r2, [pc, #668]	; (5b98 <spi_init+0x324>)
    58fc:	4690      	mov	r8, r2
    58fe:	4443      	add	r3, r8
	uint32_t pin_index = (gpio_pin % 32);
    5900:	221f      	movs	r2, #31
    5902:	4660      	mov	r0, ip
    5904:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    5906:	1898      	adds	r0, r3, r2
    5908:	3040      	adds	r0, #64	; 0x40
    590a:	7800      	ldrb	r0, [r0, #0]
    590c:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    590e:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    5910:	4651      	mov	r1, sl
    5912:	07c9      	lsls	r1, r1, #31
    5914:	d5d6      	bpl.n	58c4 <spi_init+0x50>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    5916:	0852      	lsrs	r2, r2, #1
    5918:	189b      	adds	r3, r3, r2
    591a:	3330      	adds	r3, #48	; 0x30
    591c:	7818      	ldrb	r0, [r3, #0]
    591e:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    5920:	4663      	mov	r3, ip
    5922:	07db      	lsls	r3, r3, #31
    5924:	d5cc      	bpl.n	58c0 <spi_init+0x4c>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    5926:	0900      	lsrs	r0, r0, #4
    5928:	e7cc      	b.n	58c4 <spi_init+0x50>
			module->hw = NULL;
    592a:	2300      	movs	r3, #0
    592c:	6033      	str	r3, [r6, #0]
			return STATUS_ERR_DENIED;
    592e:	201c      	movs	r0, #28
    5930:	e7b2      	b.n	5898 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    5932:	2011      	movs	r0, #17
    5934:	4b99      	ldr	r3, [pc, #612]	; (5b9c <spi_init+0x328>)
    5936:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    5938:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    593a:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    593c:	2a01      	cmp	r2, #1
    593e:	d016      	beq.n	596e <spi_init+0xfa>
	if (config->mode == SPI_MODE_SLAVE) {
    5940:	7821      	ldrb	r1, [r4, #0]
    5942:	2900      	cmp	r1, #0
    5944:	d127      	bne.n	5996 <spi_init+0x122>
		if (spi_module->CTRLA.reg != addr) {
    5946:	683b      	ldr	r3, [r7, #0]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    5948:	7fe2      	ldrb	r2, [r4, #31]
    594a:	0412      	lsls	r2, r2, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    594c:	7fa0      	ldrb	r0, [r4, #30]
    594e:	4302      	orrs	r2, r0
			return STATUS_ERR_DENIED;
    5950:	201c      	movs	r0, #28
		if (spi_module->CTRLA.reg != addr) {
    5952:	429a      	cmp	r2, r3
    5954:	d1a0      	bne.n	5898 <spi_init+0x24>
		ctrla |= config->mode_specific.slave.frame_format;
    5956:	69a3      	ldr	r3, [r4, #24]
		ctrlb |= config->mode_specific.slave.address_mode;
    5958:	8ba2      	ldrh	r2, [r4, #28]
		if (config->mode_specific.slave.preload_enable) {
    595a:	3004      	adds	r0, #4
    595c:	5c20      	ldrb	r0, [r4, r0]
    595e:	2800      	cmp	r0, #0
    5960:	d001      	beq.n	5966 <spi_init+0xf2>
    5962:	2040      	movs	r0, #64	; 0x40
    5964:	4302      	orrs	r2, r0
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
    5966:	2008      	movs	r0, #8
    5968:	4303      	orrs	r3, r0
    596a:	431d      	orrs	r5, r3
    596c:	e014      	b.n	5998 <spi_init+0x124>
		enum status_code error_code = _sercom_get_sync_baud_val(
    596e:	aa04      	add	r2, sp, #16
    5970:	0001      	movs	r1, r0
    5972:	69a0      	ldr	r0, [r4, #24]
    5974:	4b8a      	ldr	r3, [pc, #552]	; (5ba0 <spi_init+0x32c>)
    5976:	4798      	blx	r3
    5978:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    597a:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    597c:	2b00      	cmp	r3, #0
    597e:	d000      	beq.n	5982 <spi_init+0x10e>
    5980:	e78a      	b.n	5898 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    5982:	7b3b      	ldrb	r3, [r7, #12]
    5984:	b2db      	uxtb	r3, r3
    5986:	aa04      	add	r2, sp, #16
    5988:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    598a:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    598c:	429a      	cmp	r2, r3
    598e:	d000      	beq.n	5992 <spi_init+0x11e>
    5990:	e782      	b.n	5898 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    5992:	350c      	adds	r5, #12
    5994:	e7d4      	b.n	5940 <spi_init+0xcc>
	uint32_t ctrlb = 0;
    5996:	2200      	movs	r2, #0
	ctrla |= config->mux_setting;
    5998:	6863      	ldr	r3, [r4, #4]
    599a:	68a0      	ldr	r0, [r4, #8]
    599c:	4303      	orrs	r3, r0
    599e:	68e0      	ldr	r0, [r4, #12]
    59a0:	4303      	orrs	r3, r0
    59a2:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    59a4:	7c20      	ldrb	r0, [r4, #16]
    59a6:	4302      	orrs	r2, r0
	if (config->run_in_standby) {
    59a8:	7c60      	ldrb	r0, [r4, #17]
    59aa:	2800      	cmp	r0, #0
    59ac:	d001      	beq.n	59b2 <spi_init+0x13e>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    59ae:	2080      	movs	r0, #128	; 0x80
    59b0:	4303      	orrs	r3, r0
	if (config->receiver_enable) {
    59b2:	7ca0      	ldrb	r0, [r4, #18]
    59b4:	2800      	cmp	r0, #0
    59b6:	d002      	beq.n	59be <spi_init+0x14a>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    59b8:	2080      	movs	r0, #128	; 0x80
    59ba:	0280      	lsls	r0, r0, #10
    59bc:	4302      	orrs	r2, r0
	if (config->select_slave_low_detect_enable) {
    59be:	7ce0      	ldrb	r0, [r4, #19]
    59c0:	2800      	cmp	r0, #0
    59c2:	d002      	beq.n	59ca <spi_init+0x156>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    59c4:	2080      	movs	r0, #128	; 0x80
    59c6:	0080      	lsls	r0, r0, #2
    59c8:	4302      	orrs	r2, r0
	if (config->master_slave_select_enable) {
    59ca:	7d20      	ldrb	r0, [r4, #20]
    59cc:	2800      	cmp	r0, #0
    59ce:	d002      	beq.n	59d6 <spi_init+0x162>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    59d0:	2080      	movs	r0, #128	; 0x80
    59d2:	0180      	lsls	r0, r0, #6
    59d4:	4302      	orrs	r2, r0
	if (spi_module->CTRLA.reg == ctrla &&
    59d6:	6838      	ldr	r0, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    59d8:	2502      	movs	r5, #2
    59da:	432b      	orrs	r3, r5
	if (spi_module->CTRLA.reg == ctrla &&
    59dc:	4283      	cmp	r3, r0
    59de:	d003      	beq.n	59e8 <spi_init+0x174>
	module->hw = NULL;
    59e0:	2300      	movs	r3, #0
    59e2:	6033      	str	r3, [r6, #0]
	return STATUS_ERR_DENIED;
    59e4:	201c      	movs	r0, #28
    59e6:	e757      	b.n	5898 <spi_init+0x24>
			spi_module->CTRLB.reg == ctrlb) {
    59e8:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    59ea:	4293      	cmp	r3, r2
    59ec:	d1f8      	bne.n	59e0 <spi_init+0x16c>
		module->mode           = config->mode;
    59ee:	7171      	strb	r1, [r6, #5]
		module->character_size = config->character_size;
    59f0:	7c23      	ldrb	r3, [r4, #16]
    59f2:	71b3      	strb	r3, [r6, #6]
		return STATUS_OK;
    59f4:	2000      	movs	r0, #0
    59f6:	e74f      	b.n	5898 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    59f8:	0008      	movs	r0, r1
    59fa:	4b6a      	ldr	r3, [pc, #424]	; (5ba4 <spi_init+0x330>)
    59fc:	4798      	blx	r3
	if (sercom_index == 5) {
    59fe:	2805      	cmp	r0, #5
    5a00:	d100      	bne.n	5a04 <spi_init+0x190>
    5a02:	e0bf      	b.n	5b84 <spi_init+0x310>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5a04:	0003      	movs	r3, r0
    5a06:	3312      	adds	r3, #18
			MCLK->APBCMASK.reg |= mask;
    5a08:	4967      	ldr	r1, [pc, #412]	; (5ba8 <spi_init+0x334>)
    5a0a:	69cd      	ldr	r5, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    5a0c:	2201      	movs	r2, #1
    5a0e:	4082      	lsls	r2, r0
    5a10:	432a      	orrs	r2, r5
    5a12:	61ca      	str	r2, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    5a14:	a909      	add	r1, sp, #36	; 0x24
    5a16:	2524      	movs	r5, #36	; 0x24
    5a18:	5d62      	ldrb	r2, [r4, r5]
    5a1a:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    5a1c:	b2db      	uxtb	r3, r3
    5a1e:	9301      	str	r3, [sp, #4]
    5a20:	0018      	movs	r0, r3
    5a22:	4b62      	ldr	r3, [pc, #392]	; (5bac <spi_init+0x338>)
    5a24:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    5a26:	9801      	ldr	r0, [sp, #4]
    5a28:	4b61      	ldr	r3, [pc, #388]	; (5bb0 <spi_init+0x33c>)
    5a2a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5a2c:	5d60      	ldrb	r0, [r4, r5]
    5a2e:	2100      	movs	r1, #0
    5a30:	4b60      	ldr	r3, [pc, #384]	; (5bb4 <spi_init+0x340>)
    5a32:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    5a34:	7823      	ldrb	r3, [r4, #0]
    5a36:	2b01      	cmp	r3, #1
    5a38:	d020      	beq.n	5a7c <spi_init+0x208>
	if (config->mode == SPI_MODE_SLAVE) {
    5a3a:	7823      	ldrb	r3, [r4, #0]
    5a3c:	2b00      	cmp	r3, #0
    5a3e:	d103      	bne.n	5a48 <spi_init+0x1d4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    5a40:	683b      	ldr	r3, [r7, #0]
    5a42:	2208      	movs	r2, #8
    5a44:	4313      	orrs	r3, r2
    5a46:	603b      	str	r3, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5a48:	6833      	ldr	r3, [r6, #0]
    5a4a:	4698      	mov	r8, r3
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5a4c:	ab04      	add	r3, sp, #16
    5a4e:	2280      	movs	r2, #128	; 0x80
    5a50:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5a52:	2200      	movs	r2, #0
    5a54:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5a56:	2101      	movs	r1, #1
    5a58:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    5a5a:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    5a5c:	7823      	ldrb	r3, [r4, #0]
    5a5e:	2b00      	cmp	r3, #0
    5a60:	d101      	bne.n	5a66 <spi_init+0x1f2>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    5a62:	ab04      	add	r3, sp, #16
    5a64:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    5a66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5a68:	9305      	str	r3, [sp, #20]
    5a6a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5a6c:	9306      	str	r3, [sp, #24]
    5a6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5a70:	9307      	str	r3, [sp, #28]
    5a72:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5a74:	9308      	str	r3, [sp, #32]
    5a76:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5a78:	ad05      	add	r5, sp, #20
    5a7a:	e011      	b.n	5aa0 <spi_init+0x22c>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    5a7c:	683b      	ldr	r3, [r7, #0]
    5a7e:	220c      	movs	r2, #12
    5a80:	4313      	orrs	r3, r2
    5a82:	603b      	str	r3, [r7, #0]
    5a84:	e7d9      	b.n	5a3a <spi_init+0x1c6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5a86:	4640      	mov	r0, r8
    5a88:	4b42      	ldr	r3, [pc, #264]	; (5b94 <spi_init+0x320>)
    5a8a:	4798      	blx	r3
    5a8c:	e00d      	b.n	5aaa <spi_init+0x236>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    5a8e:	a904      	add	r1, sp, #16
    5a90:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    5a92:	0c00      	lsrs	r0, r0, #16
    5a94:	b2c0      	uxtb	r0, r0
    5a96:	4b48      	ldr	r3, [pc, #288]	; (5bb8 <spi_init+0x344>)
    5a98:	4798      	blx	r3
    5a9a:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    5a9c:	2f04      	cmp	r7, #4
    5a9e:	d007      	beq.n	5ab0 <spi_init+0x23c>
    5aa0:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5aa2:	00bb      	lsls	r3, r7, #2
    5aa4:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    5aa6:	2800      	cmp	r0, #0
    5aa8:	d0ed      	beq.n	5a86 <spi_init+0x212>
		if (current_pinmux != PINMUX_UNUSED) {
    5aaa:	1c43      	adds	r3, r0, #1
    5aac:	d1ef      	bne.n	5a8e <spi_init+0x21a>
    5aae:	e7f4      	b.n	5a9a <spi_init+0x226>
	module->mode             = config->mode;
    5ab0:	7823      	ldrb	r3, [r4, #0]
    5ab2:	7173      	strb	r3, [r6, #5]
	module->character_size   = config->character_size;
    5ab4:	7c23      	ldrb	r3, [r4, #16]
    5ab6:	71b3      	strb	r3, [r6, #6]
	module->receiver_enabled = config->receiver_enable;
    5ab8:	7ca3      	ldrb	r3, [r4, #18]
    5aba:	71f3      	strb	r3, [r6, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    5abc:	7d23      	ldrb	r3, [r4, #20]
    5abe:	7233      	strb	r3, [r6, #8]
	uint16_t baud = 0;
    5ac0:	2200      	movs	r2, #0
    5ac2:	ab02      	add	r3, sp, #8
    5ac4:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    5ac6:	7823      	ldrb	r3, [r4, #0]
    5ac8:	2b01      	cmp	r3, #1
    5aca:	d014      	beq.n	5af6 <spi_init+0x282>
	if (config->mode == SPI_MODE_SLAVE) {
    5acc:	7823      	ldrb	r3, [r4, #0]
    5ace:	2b00      	cmp	r3, #0
    5ad0:	d129      	bne.n	5b26 <spi_init+0x2b2>
		ctrla = config->mode_specific.slave.frame_format;
    5ad2:	69a0      	ldr	r0, [r4, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    5ad4:	8ba2      	ldrh	r2, [r4, #28]
		spi_module->ADDR.reg |=
    5ad6:	4643      	mov	r3, r8
    5ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    5ada:	7fe1      	ldrb	r1, [r4, #31]
    5adc:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    5ade:	7fa5      	ldrb	r5, [r4, #30]
    5ae0:	4329      	orrs	r1, r5
		spi_module->ADDR.reg |=
    5ae2:	4319      	orrs	r1, r3
    5ae4:	4643      	mov	r3, r8
    5ae6:	6259      	str	r1, [r3, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    5ae8:	2320      	movs	r3, #32
    5aea:	5ce3      	ldrb	r3, [r4, r3]
    5aec:	2b00      	cmp	r3, #0
    5aee:	d01c      	beq.n	5b2a <spi_init+0x2b6>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    5af0:	2340      	movs	r3, #64	; 0x40
    5af2:	431a      	orrs	r2, r3
    5af4:	e019      	b.n	5b2a <spi_init+0x2b6>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5af6:	6830      	ldr	r0, [r6, #0]
    5af8:	4b2a      	ldr	r3, [pc, #168]	; (5ba4 <spi_init+0x330>)
    5afa:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5afc:	3012      	adds	r0, #18
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    5afe:	b2c0      	uxtb	r0, r0
    5b00:	4b26      	ldr	r3, [pc, #152]	; (5b9c <spi_init+0x328>)
    5b02:	4798      	blx	r3
    5b04:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    5b06:	ab02      	add	r3, sp, #8
    5b08:	1d9a      	adds	r2, r3, #6
    5b0a:	69a0      	ldr	r0, [r4, #24]
    5b0c:	4b24      	ldr	r3, [pc, #144]	; (5ba0 <spi_init+0x32c>)
    5b0e:	4798      	blx	r3
    5b10:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    5b12:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    5b14:	2b00      	cmp	r3, #0
    5b16:	d000      	beq.n	5b1a <spi_init+0x2a6>
    5b18:	e6be      	b.n	5898 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    5b1a:	ab02      	add	r3, sp, #8
    5b1c:	3306      	adds	r3, #6
    5b1e:	781b      	ldrb	r3, [r3, #0]
    5b20:	4642      	mov	r2, r8
    5b22:	7313      	strb	r3, [r2, #12]
    5b24:	e7d2      	b.n	5acc <spi_init+0x258>
	uint32_t ctrlb = 0;
    5b26:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    5b28:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    5b2a:	6863      	ldr	r3, [r4, #4]
    5b2c:	68a1      	ldr	r1, [r4, #8]
    5b2e:	430b      	orrs	r3, r1
    5b30:	68e1      	ldr	r1, [r4, #12]
    5b32:	430b      	orrs	r3, r1
    5b34:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    5b36:	7c21      	ldrb	r1, [r4, #16]
    5b38:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    5b3a:	7c61      	ldrb	r1, [r4, #17]
    5b3c:	2900      	cmp	r1, #0
    5b3e:	d103      	bne.n	5b48 <spi_init+0x2d4>
    5b40:	491e      	ldr	r1, [pc, #120]	; (5bbc <spi_init+0x348>)
    5b42:	7889      	ldrb	r1, [r1, #2]
    5b44:	0789      	lsls	r1, r1, #30
    5b46:	d501      	bpl.n	5b4c <spi_init+0x2d8>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    5b48:	2180      	movs	r1, #128	; 0x80
    5b4a:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    5b4c:	7ca1      	ldrb	r1, [r4, #18]
    5b4e:	2900      	cmp	r1, #0
    5b50:	d002      	beq.n	5b58 <spi_init+0x2e4>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    5b52:	2180      	movs	r1, #128	; 0x80
    5b54:	0289      	lsls	r1, r1, #10
    5b56:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    5b58:	7ce1      	ldrb	r1, [r4, #19]
    5b5a:	2900      	cmp	r1, #0
    5b5c:	d002      	beq.n	5b64 <spi_init+0x2f0>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    5b5e:	2180      	movs	r1, #128	; 0x80
    5b60:	0089      	lsls	r1, r1, #2
    5b62:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    5b64:	7d21      	ldrb	r1, [r4, #20]
    5b66:	2900      	cmp	r1, #0
    5b68:	d002      	beq.n	5b70 <spi_init+0x2fc>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    5b6a:	2180      	movs	r1, #128	; 0x80
    5b6c:	0189      	lsls	r1, r1, #6
    5b6e:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    5b70:	4641      	mov	r1, r8
    5b72:	6809      	ldr	r1, [r1, #0]
    5b74:	430b      	orrs	r3, r1
    5b76:	4641      	mov	r1, r8
    5b78:	600b      	str	r3, [r1, #0]
	spi_module->CTRLB.reg |= ctrlb;
    5b7a:	684b      	ldr	r3, [r1, #4]
    5b7c:	431a      	orrs	r2, r3
    5b7e:	604a      	str	r2, [r1, #4]
	return STATUS_OK;
    5b80:	2000      	movs	r0, #0
    5b82:	e689      	b.n	5898 <spi_init+0x24>
			MCLK->APBDMASK.reg |= mask;
    5b84:	4a08      	ldr	r2, [pc, #32]	; (5ba8 <spi_init+0x334>)
    5b86:	6a13      	ldr	r3, [r2, #32]
    5b88:	2102      	movs	r1, #2
    5b8a:	430b      	orrs	r3, r1
    5b8c:	6213      	str	r3, [r2, #32]
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
    5b8e:	2318      	movs	r3, #24
    5b90:	e740      	b.n	5a14 <spi_init+0x1a0>
    5b92:	46c0      	nop			; (mov r8, r8)
    5b94:	00005611 	.word	0x00005611
    5b98:	40002800 	.word	0x40002800
    5b9c:	00006a89 	.word	0x00006a89
    5ba0:	00005507 	.word	0x00005507
    5ba4:	0000576d 	.word	0x0000576d
    5ba8:	40000400 	.word	0x40000400
    5bac:	00006a65 	.word	0x00006a65
    5bb0:	000069f5 	.word	0x000069f5
    5bb4:	000055c5 	.word	0x000055c5
    5bb8:	00006b61 	.word	0x00006b61
    5bbc:	41002000 	.word	0x41002000

00005bc0 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    5bc0:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    5bc2:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    5bc4:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    5bc6:	2c01      	cmp	r4, #1
    5bc8:	d001      	beq.n	5bce <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    5bca:	0018      	movs	r0, r3
    5bcc:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    5bce:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    5bd0:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    5bd2:	2c00      	cmp	r4, #0
    5bd4:	d1f9      	bne.n	5bca <spi_select_slave+0xa>
		if (select) {
    5bd6:	2a00      	cmp	r2, #0
    5bd8:	d058      	beq.n	5c8c <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    5bda:	784b      	ldrb	r3, [r1, #1]
    5bdc:	2b00      	cmp	r3, #0
    5bde:	d044      	beq.n	5c6a <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5be0:	6803      	ldr	r3, [r0, #0]
    5be2:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    5be4:	07db      	lsls	r3, r3, #31
    5be6:	d410      	bmi.n	5c0a <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    5be8:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5bea:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5bec:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5bee:	2900      	cmp	r1, #0
    5bf0:	d104      	bne.n	5bfc <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    5bf2:	0953      	lsrs	r3, r2, #5
    5bf4:	01db      	lsls	r3, r3, #7
    5bf6:	492e      	ldr	r1, [pc, #184]	; (5cb0 <spi_select_slave+0xf0>)
    5bf8:	468c      	mov	ip, r1
    5bfa:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5bfc:	211f      	movs	r1, #31
    5bfe:	4011      	ands	r1, r2
    5c00:	2201      	movs	r2, #1
    5c02:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5c04:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    5c06:	2305      	movs	r3, #5
    5c08:	e7df      	b.n	5bca <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    5c0a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5c0c:	09d4      	lsrs	r4, r2, #7
		return NULL;
    5c0e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5c10:	2c00      	cmp	r4, #0
    5c12:	d104      	bne.n	5c1e <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    5c14:	0953      	lsrs	r3, r2, #5
    5c16:	01db      	lsls	r3, r3, #7
    5c18:	4c25      	ldr	r4, [pc, #148]	; (5cb0 <spi_select_slave+0xf0>)
    5c1a:	46a4      	mov	ip, r4
    5c1c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5c1e:	241f      	movs	r4, #31
    5c20:	4014      	ands	r4, r2
    5c22:	2201      	movs	r2, #1
    5c24:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    5c26:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5c28:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5c2a:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    5c2c:	07d2      	lsls	r2, r2, #31
    5c2e:	d501      	bpl.n	5c34 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5c30:	788a      	ldrb	r2, [r1, #2]
    5c32:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    5c34:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    5c36:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    5c38:	2a00      	cmp	r2, #0
    5c3a:	d1c6      	bne.n	5bca <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5c3c:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    5c3e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5c40:	7e13      	ldrb	r3, [r2, #24]
    5c42:	420b      	tst	r3, r1
    5c44:	d0fc      	beq.n	5c40 <spi_select_slave+0x80>
    5c46:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    5c48:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    5c4a:	0749      	lsls	r1, r1, #29
    5c4c:	d5bd      	bpl.n	5bca <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5c4e:	8b53      	ldrh	r3, [r2, #26]
    5c50:	075b      	lsls	r3, r3, #29
    5c52:	d501      	bpl.n	5c58 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5c54:	2304      	movs	r3, #4
    5c56:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5c58:	7983      	ldrb	r3, [r0, #6]
    5c5a:	2b01      	cmp	r3, #1
    5c5c:	d002      	beq.n	5c64 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5c5e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5c60:	2300      	movs	r3, #0
    5c62:	e7b2      	b.n	5bca <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5c64:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5c66:	2300      	movs	r3, #0
    5c68:	e7af      	b.n	5bca <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    5c6a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5c6c:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5c6e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5c70:	2900      	cmp	r1, #0
    5c72:	d104      	bne.n	5c7e <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    5c74:	0953      	lsrs	r3, r2, #5
    5c76:	01db      	lsls	r3, r3, #7
    5c78:	490d      	ldr	r1, [pc, #52]	; (5cb0 <spi_select_slave+0xf0>)
    5c7a:	468c      	mov	ip, r1
    5c7c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5c7e:	211f      	movs	r1, #31
    5c80:	4011      	ands	r1, r2
    5c82:	2201      	movs	r2, #1
    5c84:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    5c86:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    5c88:	2300      	movs	r3, #0
    5c8a:	e79e      	b.n	5bca <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    5c8c:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5c8e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5c90:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5c92:	2900      	cmp	r1, #0
    5c94:	d104      	bne.n	5ca0 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    5c96:	0953      	lsrs	r3, r2, #5
    5c98:	01db      	lsls	r3, r3, #7
    5c9a:	4905      	ldr	r1, [pc, #20]	; (5cb0 <spi_select_slave+0xf0>)
    5c9c:	468c      	mov	ip, r1
    5c9e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5ca0:	211f      	movs	r1, #31
    5ca2:	4011      	ands	r1, r2
    5ca4:	2201      	movs	r2, #1
    5ca6:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5ca8:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    5caa:	2300      	movs	r3, #0
    5cac:	e78d      	b.n	5bca <spi_select_slave+0xa>
    5cae:	46c0      	nop			; (mov r8, r8)
    5cb0:	40002800 	.word	0x40002800

00005cb4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    5cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5cb6:	46de      	mov	lr, fp
    5cb8:	4657      	mov	r7, sl
    5cba:	464e      	mov	r6, r9
    5cbc:	4645      	mov	r5, r8
    5cbe:	b5e0      	push	{r5, r6, r7, lr}
    5cc0:	b091      	sub	sp, #68	; 0x44
    5cc2:	0005      	movs	r5, r0
    5cc4:	000c      	movs	r4, r1
    5cc6:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    5cc8:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5cca:	0008      	movs	r0, r1
    5ccc:	4bc6      	ldr	r3, [pc, #792]	; (5fe8 <usart_init+0x334>)
    5cce:	4798      	blx	r3
    5cd0:	0002      	movs	r2, r0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
    5cd2:	2805      	cmp	r0, #5
    5cd4:	d00d      	beq.n	5cf2 <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5cd6:	0007      	movs	r7, r0
    5cd8:	3712      	adds	r7, #18
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    5cda:	0003      	movs	r3, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    5cdc:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    5cde:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    5ce0:	07c9      	lsls	r1, r1, #31
    5ce2:	d509      	bpl.n	5cf8 <usart_init+0x44>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    5ce4:	b011      	add	sp, #68	; 0x44
    5ce6:	bc3c      	pop	{r2, r3, r4, r5}
    5ce8:	4690      	mov	r8, r2
    5cea:	4699      	mov	r9, r3
    5cec:	46a2      	mov	sl, r4
    5cee:	46ab      	mov	fp, r5
    5cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    5cf2:	2718      	movs	r7, #24
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    5cf4:	2301      	movs	r3, #1
    5cf6:	e7f1      	b.n	5cdc <usart_init+0x28>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    5cf8:	6821      	ldr	r1, [r4, #0]
		return STATUS_ERR_DENIED;
    5cfa:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    5cfc:	0789      	lsls	r1, r1, #30
    5cfe:	d4f1      	bmi.n	5ce4 <usart_init+0x30>
	if (sercom_index == 5) {
    5d00:	2a05      	cmp	r2, #5
    5d02:	d049      	beq.n	5d98 <usart_init+0xe4>
			MCLK->APBCMASK.reg |= mask;
    5d04:	49b9      	ldr	r1, [pc, #740]	; (5fec <usart_init+0x338>)
    5d06:	69c8      	ldr	r0, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
    5d08:	2201      	movs	r2, #1
    5d0a:	409a      	lsls	r2, r3
    5d0c:	0013      	movs	r3, r2
    5d0e:	4303      	orrs	r3, r0
    5d10:	61cb      	str	r3, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    5d12:	a90f      	add	r1, sp, #60	; 0x3c
    5d14:	232d      	movs	r3, #45	; 0x2d
    5d16:	4698      	mov	r8, r3
    5d18:	5cf3      	ldrb	r3, [r6, r3]
    5d1a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    5d1c:	b2ff      	uxtb	r7, r7
    5d1e:	0038      	movs	r0, r7
    5d20:	4bb3      	ldr	r3, [pc, #716]	; (5ff0 <usart_init+0x33c>)
    5d22:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    5d24:	0038      	movs	r0, r7
    5d26:	4bb3      	ldr	r3, [pc, #716]	; (5ff4 <usart_init+0x340>)
    5d28:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5d2a:	4643      	mov	r3, r8
    5d2c:	5cf0      	ldrb	r0, [r6, r3]
    5d2e:	2100      	movs	r1, #0
    5d30:	4bb1      	ldr	r3, [pc, #708]	; (5ff8 <usart_init+0x344>)
    5d32:	4798      	blx	r3
	module->character_size = config->character_size;
    5d34:	7af3      	ldrb	r3, [r6, #11]
    5d36:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    5d38:	2324      	movs	r3, #36	; 0x24
    5d3a:	5cf3      	ldrb	r3, [r6, r3]
    5d3c:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    5d3e:	2325      	movs	r3, #37	; 0x25
    5d40:	5cf3      	ldrb	r3, [r6, r3]
    5d42:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    5d44:	7ef3      	ldrb	r3, [r6, #27]
    5d46:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    5d48:	7f33      	ldrb	r3, [r6, #28]
    5d4a:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5d4c:	682b      	ldr	r3, [r5, #0]
    5d4e:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5d50:	0018      	movs	r0, r3
    5d52:	4ba5      	ldr	r3, [pc, #660]	; (5fe8 <usart_init+0x334>)
    5d54:	4798      	blx	r3
	if (sercom_index == 5) {
    5d56:	2805      	cmp	r0, #5
    5d58:	d026      	beq.n	5da8 <usart_init+0xf4>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5d5a:	3012      	adds	r0, #18
	uint16_t baud  = 0;
    5d5c:	2200      	movs	r2, #0
    5d5e:	230e      	movs	r3, #14
    5d60:	a906      	add	r1, sp, #24
    5d62:	468c      	mov	ip, r1
    5d64:	4463      	add	r3, ip
    5d66:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    5d68:	8a32      	ldrh	r2, [r6, #16]
    5d6a:	9202      	str	r2, [sp, #8]
    5d6c:	2380      	movs	r3, #128	; 0x80
    5d6e:	01db      	lsls	r3, r3, #7
    5d70:	429a      	cmp	r2, r3
    5d72:	d100      	bne.n	5d76 <usart_init+0xc2>
    5d74:	e0ab      	b.n	5ece <usart_init+0x21a>
    5d76:	d919      	bls.n	5dac <usart_init+0xf8>
    5d78:	23c0      	movs	r3, #192	; 0xc0
    5d7a:	01db      	lsls	r3, r3, #7
    5d7c:	9a02      	ldr	r2, [sp, #8]
    5d7e:	429a      	cmp	r2, r3
    5d80:	d100      	bne.n	5d84 <usart_init+0xd0>
    5d82:	e09f      	b.n	5ec4 <usart_init+0x210>
    5d84:	2380      	movs	r3, #128	; 0x80
    5d86:	021b      	lsls	r3, r3, #8
    5d88:	429a      	cmp	r2, r3
    5d8a:	d000      	beq.n	5d8e <usart_init+0xda>
    5d8c:	e127      	b.n	5fde <usart_init+0x32a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    5d8e:	2303      	movs	r3, #3
    5d90:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5d92:	2300      	movs	r3, #0
    5d94:	9307      	str	r3, [sp, #28]
    5d96:	e012      	b.n	5dbe <usart_init+0x10a>
			MCLK->APBDMASK.reg |= mask;
    5d98:	4994      	ldr	r1, [pc, #592]	; (5fec <usart_init+0x338>)
    5d9a:	6a08      	ldr	r0, [r1, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    5d9c:	3a04      	subs	r2, #4
    5d9e:	409a      	lsls	r2, r3
    5da0:	0013      	movs	r3, r2
    5da2:	4303      	orrs	r3, r0
    5da4:	620b      	str	r3, [r1, #32]
    5da6:	e7b4      	b.n	5d12 <usart_init+0x5e>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    5da8:	2018      	movs	r0, #24
    5daa:	e7d7      	b.n	5d5c <usart_init+0xa8>
	switch (config->sample_rate) {
    5dac:	2380      	movs	r3, #128	; 0x80
    5dae:	019b      	lsls	r3, r3, #6
    5db0:	429a      	cmp	r2, r3
    5db2:	d000      	beq.n	5db6 <usart_init+0x102>
    5db4:	e113      	b.n	5fde <usart_init+0x32a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5db6:	2310      	movs	r3, #16
    5db8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5dba:	3b0f      	subs	r3, #15
    5dbc:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    5dbe:	6833      	ldr	r3, [r6, #0]
    5dc0:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    5dc2:	68f3      	ldr	r3, [r6, #12]
    5dc4:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    5dc6:	6973      	ldr	r3, [r6, #20]
    5dc8:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5dca:	7e33      	ldrb	r3, [r6, #24]
    5dcc:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5dce:	2326      	movs	r3, #38	; 0x26
    5dd0:	5cf3      	ldrb	r3, [r6, r3]
    5dd2:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    5dd4:	6873      	ldr	r3, [r6, #4]
    5dd6:	4699      	mov	r9, r3
	switch (transfer_mode)
    5dd8:	2b00      	cmp	r3, #0
    5dda:	d100      	bne.n	5dde <usart_init+0x12a>
    5ddc:	e09f      	b.n	5f1e <usart_init+0x26a>
    5dde:	2380      	movs	r3, #128	; 0x80
    5de0:	055b      	lsls	r3, r3, #21
    5de2:	4599      	cmp	r9, r3
    5de4:	d104      	bne.n	5df0 <usart_init+0x13c>
			if (!config->use_external_clock) {
    5de6:	2327      	movs	r3, #39	; 0x27
    5de8:	5cf3      	ldrb	r3, [r6, r3]
    5dea:	2b00      	cmp	r3, #0
    5dec:	d100      	bne.n	5df0 <usart_init+0x13c>
    5dee:	e084      	b.n	5efa <usart_init+0x246>
	if(config->encoding_format_enable) {
    5df0:	7e73      	ldrb	r3, [r6, #25]
    5df2:	2b00      	cmp	r3, #0
    5df4:	d002      	beq.n	5dfc <usart_init+0x148>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    5df6:	7eb3      	ldrb	r3, [r6, #26]
    5df8:	4642      	mov	r2, r8
    5dfa:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    5dfc:	682a      	ldr	r2, [r5, #0]
    5dfe:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    5e00:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    5e02:	2b00      	cmp	r3, #0
    5e04:	d1fc      	bne.n	5e00 <usart_init+0x14c>
	usart_hw->BAUD.reg = baud;
    5e06:	330e      	adds	r3, #14
    5e08:	aa06      	add	r2, sp, #24
    5e0a:	4694      	mov	ip, r2
    5e0c:	4463      	add	r3, ip
    5e0e:	881b      	ldrh	r3, [r3, #0]
    5e10:	4642      	mov	r2, r8
    5e12:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    5e14:	9b05      	ldr	r3, [sp, #20]
    5e16:	9a03      	ldr	r2, [sp, #12]
    5e18:	4313      	orrs	r3, r2
    5e1a:	9a04      	ldr	r2, [sp, #16]
    5e1c:	4313      	orrs	r3, r2
    5e1e:	464a      	mov	r2, r9
    5e20:	4313      	orrs	r3, r2
    5e22:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5e24:	465b      	mov	r3, fp
    5e26:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    5e28:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5e2a:	4653      	mov	r3, sl
    5e2c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    5e2e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    5e30:	2327      	movs	r3, #39	; 0x27
    5e32:	5cf3      	ldrb	r3, [r6, r3]
    5e34:	2b00      	cmp	r3, #0
    5e36:	d101      	bne.n	5e3c <usart_init+0x188>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    5e38:	3304      	adds	r3, #4
    5e3a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    5e3c:	7e73      	ldrb	r3, [r6, #25]
    5e3e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5e40:	7f32      	ldrb	r2, [r6, #28]
    5e42:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    5e44:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    5e46:	7f72      	ldrb	r2, [r6, #29]
    5e48:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5e4a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5e4c:	2224      	movs	r2, #36	; 0x24
    5e4e:	5cb2      	ldrb	r2, [r6, r2]
    5e50:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    5e52:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    5e54:	2225      	movs	r2, #37	; 0x25
    5e56:	5cb2      	ldrb	r2, [r6, r2]
    5e58:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5e5a:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    5e5c:	7ab1      	ldrb	r1, [r6, #10]
    5e5e:	7af2      	ldrb	r2, [r6, #11]
    5e60:	4311      	orrs	r1, r2
    5e62:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    5e64:	8933      	ldrh	r3, [r6, #8]
    5e66:	2bff      	cmp	r3, #255	; 0xff
    5e68:	d07d      	beq.n	5f66 <usart_init+0x2b2>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    5e6a:	2280      	movs	r2, #128	; 0x80
    5e6c:	0452      	lsls	r2, r2, #17
    5e6e:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    5e70:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    5e72:	232c      	movs	r3, #44	; 0x2c
    5e74:	5cf3      	ldrb	r3, [r6, r3]
    5e76:	2b00      	cmp	r3, #0
    5e78:	d103      	bne.n	5e82 <usart_init+0x1ce>
    5e7a:	4b60      	ldr	r3, [pc, #384]	; (5ffc <usart_init+0x348>)
    5e7c:	789b      	ldrb	r3, [r3, #2]
    5e7e:	079b      	lsls	r3, r3, #30
    5e80:	d501      	bpl.n	5e86 <usart_init+0x1d2>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    5e82:	2380      	movs	r3, #128	; 0x80
    5e84:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    5e86:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    5e88:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    5e8a:	2b00      	cmp	r3, #0
    5e8c:	d1fc      	bne.n	5e88 <usart_init+0x1d4>
	usart_hw->CTRLB.reg = ctrlb;
    5e8e:	4643      	mov	r3, r8
    5e90:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5e92:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    5e94:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    5e96:	2b00      	cmp	r3, #0
    5e98:	d1fc      	bne.n	5e94 <usart_init+0x1e0>
	usart_hw->CTRLA.reg = ctrla;
    5e9a:	4643      	mov	r3, r8
    5e9c:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5e9e:	ab0e      	add	r3, sp, #56	; 0x38
    5ea0:	2280      	movs	r2, #128	; 0x80
    5ea2:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5ea4:	2200      	movs	r2, #0
    5ea6:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    5ea8:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    5eaa:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    5eac:	6b33      	ldr	r3, [r6, #48]	; 0x30
    5eae:	930a      	str	r3, [sp, #40]	; 0x28
    5eb0:	6b73      	ldr	r3, [r6, #52]	; 0x34
    5eb2:	930b      	str	r3, [sp, #44]	; 0x2c
    5eb4:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    5eb6:	930c      	str	r3, [sp, #48]	; 0x30
    5eb8:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    5eba:	9302      	str	r3, [sp, #8]
    5ebc:	930d      	str	r3, [sp, #52]	; 0x34
    5ebe:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5ec0:	ae0a      	add	r6, sp, #40	; 0x28
    5ec2:	e05e      	b.n	5f82 <usart_init+0x2ce>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5ec4:	2308      	movs	r3, #8
    5ec6:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5ec8:	3b07      	subs	r3, #7
    5eca:	9307      	str	r3, [sp, #28]
    5ecc:	e777      	b.n	5dbe <usart_init+0x10a>
	ctrla = (uint32_t)config->data_order |
    5ece:	6833      	ldr	r3, [r6, #0]
    5ed0:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    5ed2:	68f3      	ldr	r3, [r6, #12]
    5ed4:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    5ed6:	6973      	ldr	r3, [r6, #20]
    5ed8:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5eda:	7e33      	ldrb	r3, [r6, #24]
    5edc:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5ede:	2326      	movs	r3, #38	; 0x26
    5ee0:	5cf3      	ldrb	r3, [r6, r3]
    5ee2:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    5ee4:	6873      	ldr	r3, [r6, #4]
    5ee6:	4699      	mov	r9, r3
	switch (transfer_mode)
    5ee8:	2b00      	cmp	r3, #0
    5eea:	d014      	beq.n	5f16 <usart_init+0x262>
    5eec:	2380      	movs	r3, #128	; 0x80
    5eee:	055b      	lsls	r3, r3, #21
    5ef0:	4599      	cmp	r9, r3
    5ef2:	d100      	bne.n	5ef6 <usart_init+0x242>
    5ef4:	e777      	b.n	5de6 <usart_init+0x132>
	enum status_code status_code = STATUS_OK;
    5ef6:	2000      	movs	r0, #0
    5ef8:	e020      	b.n	5f3c <usart_init+0x288>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    5efa:	6a33      	ldr	r3, [r6, #32]
    5efc:	001f      	movs	r7, r3
    5efe:	b2c0      	uxtb	r0, r0
    5f00:	4b3f      	ldr	r3, [pc, #252]	; (6000 <usart_init+0x34c>)
    5f02:	4798      	blx	r3
    5f04:	0001      	movs	r1, r0
    5f06:	220e      	movs	r2, #14
    5f08:	ab06      	add	r3, sp, #24
    5f0a:	469c      	mov	ip, r3
    5f0c:	4462      	add	r2, ip
    5f0e:	0038      	movs	r0, r7
    5f10:	4b3c      	ldr	r3, [pc, #240]	; (6004 <usart_init+0x350>)
    5f12:	4798      	blx	r3
    5f14:	e012      	b.n	5f3c <usart_init+0x288>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5f16:	2308      	movs	r3, #8
    5f18:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5f1a:	2300      	movs	r3, #0
    5f1c:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    5f1e:	2327      	movs	r3, #39	; 0x27
    5f20:	5cf3      	ldrb	r3, [r6, r3]
    5f22:	2b00      	cmp	r3, #0
    5f24:	d00e      	beq.n	5f44 <usart_init+0x290>
				status_code =
    5f26:	9b06      	ldr	r3, [sp, #24]
    5f28:	9300      	str	r3, [sp, #0]
    5f2a:	9b07      	ldr	r3, [sp, #28]
    5f2c:	220e      	movs	r2, #14
    5f2e:	a906      	add	r1, sp, #24
    5f30:	468c      	mov	ip, r1
    5f32:	4462      	add	r2, ip
    5f34:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    5f36:	6a30      	ldr	r0, [r6, #32]
    5f38:	4f33      	ldr	r7, [pc, #204]	; (6008 <usart_init+0x354>)
    5f3a:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    5f3c:	2800      	cmp	r0, #0
    5f3e:	d000      	beq.n	5f42 <usart_init+0x28e>
    5f40:	e6d0      	b.n	5ce4 <usart_init+0x30>
    5f42:	e755      	b.n	5df0 <usart_init+0x13c>
						_sercom_get_async_baud_val(config->baudrate,
    5f44:	6a33      	ldr	r3, [r6, #32]
    5f46:	001f      	movs	r7, r3
    5f48:	b2c0      	uxtb	r0, r0
    5f4a:	4b2d      	ldr	r3, [pc, #180]	; (6000 <usart_init+0x34c>)
    5f4c:	4798      	blx	r3
    5f4e:	0001      	movs	r1, r0
				status_code =
    5f50:	9b06      	ldr	r3, [sp, #24]
    5f52:	9300      	str	r3, [sp, #0]
    5f54:	9b07      	ldr	r3, [sp, #28]
    5f56:	220e      	movs	r2, #14
    5f58:	a806      	add	r0, sp, #24
    5f5a:	4684      	mov	ip, r0
    5f5c:	4462      	add	r2, ip
    5f5e:	0038      	movs	r0, r7
    5f60:	4f29      	ldr	r7, [pc, #164]	; (6008 <usart_init+0x354>)
    5f62:	47b8      	blx	r7
    5f64:	e7ea      	b.n	5f3c <usart_init+0x288>
		if(config->lin_slave_enable) {
    5f66:	7ef3      	ldrb	r3, [r6, #27]
    5f68:	2b00      	cmp	r3, #0
    5f6a:	d082      	beq.n	5e72 <usart_init+0x1be>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    5f6c:	2380      	movs	r3, #128	; 0x80
    5f6e:	04db      	lsls	r3, r3, #19
    5f70:	431f      	orrs	r7, r3
    5f72:	e77e      	b.n	5e72 <usart_init+0x1be>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5f74:	0020      	movs	r0, r4
    5f76:	4b25      	ldr	r3, [pc, #148]	; (600c <usart_init+0x358>)
    5f78:	4798      	blx	r3
    5f7a:	e007      	b.n	5f8c <usart_init+0x2d8>
    5f7c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    5f7e:	2f04      	cmp	r7, #4
    5f80:	d00d      	beq.n	5f9e <usart_init+0x2ea>
    5f82:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5f84:	00bb      	lsls	r3, r7, #2
    5f86:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    5f88:	2800      	cmp	r0, #0
    5f8a:	d0f3      	beq.n	5f74 <usart_init+0x2c0>
		if (current_pinmux != PINMUX_UNUSED) {
    5f8c:	1c43      	adds	r3, r0, #1
    5f8e:	d0f5      	beq.n	5f7c <usart_init+0x2c8>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    5f90:	a90e      	add	r1, sp, #56	; 0x38
    5f92:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    5f94:	0c00      	lsrs	r0, r0, #16
    5f96:	b2c0      	uxtb	r0, r0
    5f98:	4b1d      	ldr	r3, [pc, #116]	; (6010 <usart_init+0x35c>)
    5f9a:	4798      	blx	r3
    5f9c:	e7ee      	b.n	5f7c <usart_init+0x2c8>
		module->callback[i]            = NULL;
    5f9e:	2300      	movs	r3, #0
    5fa0:	60eb      	str	r3, [r5, #12]
    5fa2:	612b      	str	r3, [r5, #16]
    5fa4:	616b      	str	r3, [r5, #20]
    5fa6:	61ab      	str	r3, [r5, #24]
    5fa8:	61eb      	str	r3, [r5, #28]
    5faa:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    5fac:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    5fae:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    5fb0:	2200      	movs	r2, #0
    5fb2:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    5fb4:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    5fb6:	3330      	adds	r3, #48	; 0x30
    5fb8:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    5fba:	3301      	adds	r3, #1
    5fbc:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    5fbe:	3301      	adds	r3, #1
    5fc0:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    5fc2:	3301      	adds	r3, #1
    5fc4:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    5fc6:	6828      	ldr	r0, [r5, #0]
    5fc8:	4b07      	ldr	r3, [pc, #28]	; (5fe8 <usart_init+0x334>)
    5fca:	4798      	blx	r3
    5fcc:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    5fce:	4911      	ldr	r1, [pc, #68]	; (6014 <usart_init+0x360>)
    5fd0:	4b11      	ldr	r3, [pc, #68]	; (6018 <usart_init+0x364>)
    5fd2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    5fd4:	00a4      	lsls	r4, r4, #2
    5fd6:	4b11      	ldr	r3, [pc, #68]	; (601c <usart_init+0x368>)
    5fd8:	50e5      	str	r5, [r4, r3]
	return status_code;
    5fda:	2000      	movs	r0, #0
    5fdc:	e682      	b.n	5ce4 <usart_init+0x30>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5fde:	2310      	movs	r3, #16
    5fe0:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5fe2:	2300      	movs	r3, #0
    5fe4:	9307      	str	r3, [sp, #28]
    5fe6:	e6ea      	b.n	5dbe <usart_init+0x10a>
    5fe8:	0000576d 	.word	0x0000576d
    5fec:	40000400 	.word	0x40000400
    5ff0:	00006a65 	.word	0x00006a65
    5ff4:	000069f5 	.word	0x000069f5
    5ff8:	000055c5 	.word	0x000055c5
    5ffc:	41002000 	.word	0x41002000
    6000:	00006a89 	.word	0x00006a89
    6004:	00005507 	.word	0x00005507
    6008:	00005531 	.word	0x00005531
    600c:	00005611 	.word	0x00005611
    6010:	00006b61 	.word	0x00006b61
    6014:	0000629d 	.word	0x0000629d
    6018:	000057a9 	.word	0x000057a9
    601c:	20001f2c 	.word	0x20001f2c

00006020 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    6020:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    6022:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    6024:	2a00      	cmp	r2, #0
    6026:	d101      	bne.n	602c <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    6028:	0018      	movs	r0, r3
    602a:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    602c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    602e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    6030:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    6032:	2a00      	cmp	r2, #0
    6034:	d1f8      	bne.n	6028 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    6036:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    6038:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    603a:	2a00      	cmp	r2, #0
    603c:	d1fc      	bne.n	6038 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    603e:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    6040:	2102      	movs	r1, #2
    6042:	7e1a      	ldrb	r2, [r3, #24]
    6044:	420a      	tst	r2, r1
    6046:	d0fc      	beq.n	6042 <usart_write_wait+0x22>
	return STATUS_OK;
    6048:	2300      	movs	r3, #0
    604a:	e7ed      	b.n	6028 <usart_write_wait+0x8>

0000604c <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    604c:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    604e:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    6050:	2a00      	cmp	r2, #0
    6052:	d101      	bne.n	6058 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    6054:	0018      	movs	r0, r3
    6056:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    6058:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    605a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    605c:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    605e:	2a00      	cmp	r2, #0
    6060:	d1f8      	bne.n	6054 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    6062:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    6064:	7e10      	ldrb	r0, [r2, #24]
    6066:	0740      	lsls	r0, r0, #29
    6068:	d5f4      	bpl.n	6054 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    606a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    606c:	2b00      	cmp	r3, #0
    606e:	d1fc      	bne.n	606a <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    6070:	8b53      	ldrh	r3, [r2, #26]
    6072:	b2db      	uxtb	r3, r3
	if (error_code) {
    6074:	0698      	lsls	r0, r3, #26
    6076:	d01d      	beq.n	60b4 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    6078:	0798      	lsls	r0, r3, #30
    607a:	d503      	bpl.n	6084 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    607c:	2302      	movs	r3, #2
    607e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    6080:	3318      	adds	r3, #24
    6082:	e7e7      	b.n	6054 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    6084:	0758      	lsls	r0, r3, #29
    6086:	d503      	bpl.n	6090 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    6088:	2304      	movs	r3, #4
    608a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    608c:	331a      	adds	r3, #26
    608e:	e7e1      	b.n	6054 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    6090:	07d8      	lsls	r0, r3, #31
    6092:	d503      	bpl.n	609c <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    6094:	2301      	movs	r3, #1
    6096:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    6098:	3312      	adds	r3, #18
    609a:	e7db      	b.n	6054 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    609c:	06d8      	lsls	r0, r3, #27
    609e:	d503      	bpl.n	60a8 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    60a0:	2310      	movs	r3, #16
    60a2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    60a4:	3332      	adds	r3, #50	; 0x32
    60a6:	e7d5      	b.n	6054 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    60a8:	069b      	lsls	r3, r3, #26
    60aa:	d503      	bpl.n	60b4 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    60ac:	2320      	movs	r3, #32
    60ae:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    60b0:	3321      	adds	r3, #33	; 0x21
    60b2:	e7cf      	b.n	6054 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    60b4:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    60b6:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    60b8:	2300      	movs	r3, #0
    60ba:	e7cb      	b.n	6054 <usart_read_wait+0x8>

000060bc <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    60bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    60be:	46ce      	mov	lr, r9
    60c0:	4647      	mov	r7, r8
    60c2:	b580      	push	{r7, lr}
    60c4:	b083      	sub	sp, #12
    60c6:	0005      	movs	r5, r0
    60c8:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    60ca:	2017      	movs	r0, #23
	if (length == 0) {
    60cc:	2a00      	cmp	r2, #0
    60ce:	d104      	bne.n	60da <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    60d0:	b003      	add	sp, #12
    60d2:	bc0c      	pop	{r2, r3}
    60d4:	4690      	mov	r8, r2
    60d6:	4699      	mov	r9, r3
    60d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    60da:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    60dc:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    60de:	2b00      	cmp	r3, #0
    60e0:	d0f6      	beq.n	60d0 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
    60e2:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    60e4:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    60e6:	2b00      	cmp	r3, #0
    60e8:	d1fc      	bne.n	60e4 <usart_write_buffer_wait+0x28>
	while (length--) {
    60ea:	3a01      	subs	r2, #1
    60ec:	b293      	uxth	r3, r2
    60ee:	4699      	mov	r9, r3
    60f0:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    60f2:	2701      	movs	r7, #1
	while (length--) {
    60f4:	4b1f      	ldr	r3, [pc, #124]	; (6174 <usart_write_buffer_wait+0xb8>)
    60f6:	4698      	mov	r8, r3
    60f8:	e011      	b.n	611e <usart_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
    60fa:	1c73      	adds	r3, r6, #1
    60fc:	b29b      	uxth	r3, r3
    60fe:	9a01      	ldr	r2, [sp, #4]
    6100:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    6102:	796a      	ldrb	r2, [r5, #5]
    6104:	2a01      	cmp	r2, #1
    6106:	d017      	beq.n	6138 <usart_write_buffer_wait+0x7c>
		uint16_t data_to_send = tx_data[tx_pos++];
    6108:	b289      	uxth	r1, r1
    610a:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
    610c:	0028      	movs	r0, r5
    610e:	4b1a      	ldr	r3, [pc, #104]	; (6178 <usart_write_buffer_wait+0xbc>)
    6110:	4798      	blx	r3
	while (length--) {
    6112:	464b      	mov	r3, r9
    6114:	3b01      	subs	r3, #1
    6116:	b29b      	uxth	r3, r3
    6118:	4699      	mov	r9, r3
    611a:	4543      	cmp	r3, r8
    611c:	d013      	beq.n	6146 <usart_write_buffer_wait+0x8a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    611e:	7e23      	ldrb	r3, [r4, #24]
    6120:	423b      	tst	r3, r7
    6122:	d1ea      	bne.n	60fa <usart_write_buffer_wait+0x3e>
    6124:	4b13      	ldr	r3, [pc, #76]	; (6174 <usart_write_buffer_wait+0xb8>)
    6126:	7e22      	ldrb	r2, [r4, #24]
    6128:	423a      	tst	r2, r7
    612a:	d1e6      	bne.n	60fa <usart_write_buffer_wait+0x3e>
			} else if (i == USART_TIMEOUT) {
    612c:	2b01      	cmp	r3, #1
    612e:	d019      	beq.n	6164 <usart_write_buffer_wait+0xa8>
    6130:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    6132:	2b00      	cmp	r3, #0
    6134:	d1f7      	bne.n	6126 <usart_write_buffer_wait+0x6a>
    6136:	e7e0      	b.n	60fa <usart_write_buffer_wait+0x3e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    6138:	3602      	adds	r6, #2
    613a:	b2b6      	uxth	r6, r6
    613c:	9a01      	ldr	r2, [sp, #4]
    613e:	5cd3      	ldrb	r3, [r2, r3]
    6140:	021b      	lsls	r3, r3, #8
    6142:	4319      	orrs	r1, r3
    6144:	e7e2      	b.n	610c <usart_write_buffer_wait+0x50>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    6146:	7e23      	ldrb	r3, [r4, #24]
    6148:	079b      	lsls	r3, r3, #30
    614a:	d40d      	bmi.n	6168 <usart_write_buffer_wait+0xac>
    614c:	4b09      	ldr	r3, [pc, #36]	; (6174 <usart_write_buffer_wait+0xb8>)
    614e:	2102      	movs	r1, #2
    6150:	7e22      	ldrb	r2, [r4, #24]
    6152:	420a      	tst	r2, r1
    6154:	d10a      	bne.n	616c <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
    6156:	2b01      	cmp	r3, #1
    6158:	d00a      	beq.n	6170 <usart_write_buffer_wait+0xb4>
    615a:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    615c:	2b00      	cmp	r3, #0
    615e:	d1f7      	bne.n	6150 <usart_write_buffer_wait+0x94>
	return STATUS_OK;
    6160:	2000      	movs	r0, #0
    6162:	e7b5      	b.n	60d0 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    6164:	2012      	movs	r0, #18
    6166:	e7b3      	b.n	60d0 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    6168:	2000      	movs	r0, #0
    616a:	e7b1      	b.n	60d0 <usart_write_buffer_wait+0x14>
    616c:	2000      	movs	r0, #0
    616e:	e7af      	b.n	60d0 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    6170:	2012      	movs	r0, #18
    6172:	e7ad      	b.n	60d0 <usart_write_buffer_wait+0x14>
    6174:	0000ffff 	.word	0x0000ffff
    6178:	00006021 	.word	0x00006021

0000617c <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    617c:	b5f0      	push	{r4, r5, r6, r7, lr}
    617e:	46d6      	mov	lr, sl
    6180:	b500      	push	{lr}
    6182:	b084      	sub	sp, #16
    6184:	0004      	movs	r4, r0
    6186:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    6188:	2017      	movs	r0, #23
	if (length == 0) {
    618a:	2a00      	cmp	r2, #0
    618c:	d103      	bne.n	6196 <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    618e:	b004      	add	sp, #16
    6190:	bc04      	pop	{r2}
    6192:	4692      	mov	sl, r2
    6194:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    6196:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    6198:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    619a:	2b00      	cmp	r3, #0
    619c:	d0f7      	beq.n	618e <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    619e:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    61a0:	3a01      	subs	r2, #1
    61a2:	b293      	uxth	r3, r2
    61a4:	469a      	mov	sl, r3
    61a6:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    61a8:	2704      	movs	r7, #4
    61aa:	e019      	b.n	61e0 <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    61ac:	2300      	movs	r3, #0
    61ae:	aa02      	add	r2, sp, #8
    61b0:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    61b2:	1d91      	adds	r1, r2, #6
    61b4:	0020      	movs	r0, r4
    61b6:	4b15      	ldr	r3, [pc, #84]	; (620c <usart_read_buffer_wait+0x90>)
    61b8:	4798      	blx	r3
		if (retval != STATUS_OK) {
    61ba:	2800      	cmp	r0, #0
    61bc:	d1e7      	bne.n	618e <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    61be:	1c69      	adds	r1, r5, #1
    61c0:	b289      	uxth	r1, r1
    61c2:	ab02      	add	r3, sp, #8
    61c4:	88db      	ldrh	r3, [r3, #6]
    61c6:	9a01      	ldr	r2, [sp, #4]
    61c8:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    61ca:	7962      	ldrb	r2, [r4, #5]
    61cc:	2a01      	cmp	r2, #1
    61ce:	d014      	beq.n	61fa <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    61d0:	000d      	movs	r5, r1
	while (length--) {
    61d2:	4653      	mov	r3, sl
    61d4:	3b01      	subs	r3, #1
    61d6:	b29b      	uxth	r3, r3
    61d8:	469a      	mov	sl, r3
    61da:	4b0d      	ldr	r3, [pc, #52]	; (6210 <usart_read_buffer_wait+0x94>)
    61dc:	459a      	cmp	sl, r3
    61de:	d0d6      	beq.n	618e <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    61e0:	7e33      	ldrb	r3, [r6, #24]
    61e2:	423b      	tst	r3, r7
    61e4:	d1e2      	bne.n	61ac <usart_read_buffer_wait+0x30>
    61e6:	4b0a      	ldr	r3, [pc, #40]	; (6210 <usart_read_buffer_wait+0x94>)
    61e8:	7e32      	ldrb	r2, [r6, #24]
    61ea:	423a      	tst	r2, r7
    61ec:	d1de      	bne.n	61ac <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    61ee:	2b01      	cmp	r3, #1
    61f0:	d009      	beq.n	6206 <usart_read_buffer_wait+0x8a>
    61f2:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    61f4:	2b00      	cmp	r3, #0
    61f6:	d1f7      	bne.n	61e8 <usart_read_buffer_wait+0x6c>
    61f8:	e7d8      	b.n	61ac <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    61fa:	3502      	adds	r5, #2
    61fc:	b2ad      	uxth	r5, r5
    61fe:	0a1b      	lsrs	r3, r3, #8
    6200:	9a01      	ldr	r2, [sp, #4]
    6202:	5453      	strb	r3, [r2, r1]
    6204:	e7e5      	b.n	61d2 <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    6206:	2012      	movs	r0, #18
    6208:	e7c1      	b.n	618e <usart_read_buffer_wait+0x12>
    620a:	46c0      	nop			; (mov r8, r8)
    620c:	0000604d 	.word	0x0000604d
    6210:	0000ffff 	.word	0x0000ffff

00006214 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    6214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6216:	0004      	movs	r4, r0
    6218:	000d      	movs	r5, r1
    621a:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    621c:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    621e:	4b0f      	ldr	r3, [pc, #60]	; (625c <_usart_read_buffer+0x48>)
    6220:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    6222:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    6224:	b29b      	uxth	r3, r3
    6226:	2b00      	cmp	r3, #0
    6228:	d003      	beq.n	6232 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    622a:	4b0d      	ldr	r3, [pc, #52]	; (6260 <_usart_read_buffer+0x4c>)
    622c:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    622e:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    6230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    6232:	85a6      	strh	r6, [r4, #44]	; 0x2c
    6234:	4b0a      	ldr	r3, [pc, #40]	; (6260 <_usart_read_buffer+0x4c>)
    6236:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    6238:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    623a:	2205      	movs	r2, #5
    623c:	2332      	movs	r3, #50	; 0x32
    623e:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    6240:	3b2e      	subs	r3, #46	; 0x2e
    6242:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    6244:	7a23      	ldrb	r3, [r4, #8]
    6246:	2b00      	cmp	r3, #0
    6248:	d001      	beq.n	624e <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    624a:	2320      	movs	r3, #32
    624c:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    624e:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    6250:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    6252:	2b00      	cmp	r3, #0
    6254:	d0ec      	beq.n	6230 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    6256:	2308      	movs	r3, #8
    6258:	75bb      	strb	r3, [r7, #22]
    625a:	e7e9      	b.n	6230 <_usart_read_buffer+0x1c>
    625c:	00004569 	.word	0x00004569
    6260:	000045a9 	.word	0x000045a9

00006264 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    6264:	1c93      	adds	r3, r2, #2
    6266:	009b      	lsls	r3, r3, #2
    6268:	18c3      	adds	r3, r0, r3
    626a:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    626c:	2130      	movs	r1, #48	; 0x30
    626e:	2301      	movs	r3, #1
    6270:	4093      	lsls	r3, r2
    6272:	001a      	movs	r2, r3
    6274:	5c43      	ldrb	r3, [r0, r1]
    6276:	4313      	orrs	r3, r2
    6278:	5443      	strb	r3, [r0, r1]
}
    627a:	4770      	bx	lr

0000627c <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    627c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    627e:	2317      	movs	r3, #23
	if (length == 0) {
    6280:	2a00      	cmp	r2, #0
    6282:	d101      	bne.n	6288 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    6284:	0018      	movs	r0, r3
    6286:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    6288:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    628a:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    628c:	2c00      	cmp	r4, #0
    628e:	d0f9      	beq.n	6284 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    6290:	4b01      	ldr	r3, [pc, #4]	; (6298 <usart_read_buffer_job+0x1c>)
    6292:	4798      	blx	r3
    6294:	0003      	movs	r3, r0
    6296:	e7f5      	b.n	6284 <usart_read_buffer_job+0x8>
    6298:	00006215 	.word	0x00006215

0000629c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    629c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    629e:	0080      	lsls	r0, r0, #2
    62a0:	4b62      	ldr	r3, [pc, #392]	; (642c <_usart_interrupt_handler+0x190>)
    62a2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    62a4:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    62a6:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    62a8:	2b00      	cmp	r3, #0
    62aa:	d1fc      	bne.n	62a6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    62ac:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    62ae:	7da6      	ldrb	r6, [r4, #22]
    62b0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    62b2:	2330      	movs	r3, #48	; 0x30
    62b4:	5ceb      	ldrb	r3, [r5, r3]
    62b6:	2231      	movs	r2, #49	; 0x31
    62b8:	5caf      	ldrb	r7, [r5, r2]
    62ba:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    62bc:	07f3      	lsls	r3, r6, #31
    62be:	d522      	bpl.n	6306 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    62c0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    62c2:	b29b      	uxth	r3, r3
    62c4:	2b00      	cmp	r3, #0
    62c6:	d01c      	beq.n	6302 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    62c8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    62ca:	7813      	ldrb	r3, [r2, #0]
    62cc:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    62ce:	1c51      	adds	r1, r2, #1
    62d0:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    62d2:	7969      	ldrb	r1, [r5, #5]
    62d4:	2901      	cmp	r1, #1
    62d6:	d00e      	beq.n	62f6 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    62d8:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    62da:	05db      	lsls	r3, r3, #23
    62dc:	0ddb      	lsrs	r3, r3, #23
    62de:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    62e0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    62e2:	3b01      	subs	r3, #1
    62e4:	b29b      	uxth	r3, r3
    62e6:	85eb      	strh	r3, [r5, #46]	; 0x2e
    62e8:	2b00      	cmp	r3, #0
    62ea:	d10c      	bne.n	6306 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    62ec:	3301      	adds	r3, #1
    62ee:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    62f0:	3301      	adds	r3, #1
    62f2:	75a3      	strb	r3, [r4, #22]
    62f4:	e007      	b.n	6306 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    62f6:	7851      	ldrb	r1, [r2, #1]
    62f8:	0209      	lsls	r1, r1, #8
    62fa:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    62fc:	3202      	adds	r2, #2
    62fe:	62aa      	str	r2, [r5, #40]	; 0x28
    6300:	e7eb      	b.n	62da <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    6302:	2301      	movs	r3, #1
    6304:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    6306:	07b3      	lsls	r3, r6, #30
    6308:	d506      	bpl.n	6318 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    630a:	2302      	movs	r3, #2
    630c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    630e:	2200      	movs	r2, #0
    6310:	3331      	adds	r3, #49	; 0x31
    6312:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    6314:	07fb      	lsls	r3, r7, #31
    6316:	d41a      	bmi.n	634e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    6318:	0773      	lsls	r3, r6, #29
    631a:	d565      	bpl.n	63e8 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    631c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    631e:	b29b      	uxth	r3, r3
    6320:	2b00      	cmp	r3, #0
    6322:	d05f      	beq.n	63e4 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    6324:	8b63      	ldrh	r3, [r4, #26]
    6326:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    6328:	071a      	lsls	r2, r3, #28
    632a:	d414      	bmi.n	6356 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    632c:	223f      	movs	r2, #63	; 0x3f
    632e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    6330:	2b00      	cmp	r3, #0
    6332:	d034      	beq.n	639e <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    6334:	079a      	lsls	r2, r3, #30
    6336:	d511      	bpl.n	635c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    6338:	221a      	movs	r2, #26
    633a:	2332      	movs	r3, #50	; 0x32
    633c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    633e:	3b30      	subs	r3, #48	; 0x30
    6340:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    6342:	077b      	lsls	r3, r7, #29
    6344:	d550      	bpl.n	63e8 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    6346:	0028      	movs	r0, r5
    6348:	696b      	ldr	r3, [r5, #20]
    634a:	4798      	blx	r3
    634c:	e04c      	b.n	63e8 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    634e:	0028      	movs	r0, r5
    6350:	68eb      	ldr	r3, [r5, #12]
    6352:	4798      	blx	r3
    6354:	e7e0      	b.n	6318 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    6356:	2237      	movs	r2, #55	; 0x37
    6358:	4013      	ands	r3, r2
    635a:	e7e9      	b.n	6330 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    635c:	075a      	lsls	r2, r3, #29
    635e:	d505      	bpl.n	636c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    6360:	221e      	movs	r2, #30
    6362:	2332      	movs	r3, #50	; 0x32
    6364:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    6366:	3b2e      	subs	r3, #46	; 0x2e
    6368:	8363      	strh	r3, [r4, #26]
    636a:	e7ea      	b.n	6342 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    636c:	07da      	lsls	r2, r3, #31
    636e:	d505      	bpl.n	637c <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    6370:	2213      	movs	r2, #19
    6372:	2332      	movs	r3, #50	; 0x32
    6374:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    6376:	3b31      	subs	r3, #49	; 0x31
    6378:	8363      	strh	r3, [r4, #26]
    637a:	e7e2      	b.n	6342 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    637c:	06da      	lsls	r2, r3, #27
    637e:	d505      	bpl.n	638c <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    6380:	2242      	movs	r2, #66	; 0x42
    6382:	2332      	movs	r3, #50	; 0x32
    6384:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    6386:	3b22      	subs	r3, #34	; 0x22
    6388:	8363      	strh	r3, [r4, #26]
    638a:	e7da      	b.n	6342 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    638c:	2220      	movs	r2, #32
    638e:	421a      	tst	r2, r3
    6390:	d0d7      	beq.n	6342 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    6392:	3221      	adds	r2, #33	; 0x21
    6394:	2332      	movs	r3, #50	; 0x32
    6396:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    6398:	3b12      	subs	r3, #18
    639a:	8363      	strh	r3, [r4, #26]
    639c:	e7d1      	b.n	6342 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    639e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    63a0:	05db      	lsls	r3, r3, #23
    63a2:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    63a4:	b2da      	uxtb	r2, r3
    63a6:	6a69      	ldr	r1, [r5, #36]	; 0x24
    63a8:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    63aa:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    63ac:	1c51      	adds	r1, r2, #1
    63ae:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    63b0:	7969      	ldrb	r1, [r5, #5]
    63b2:	2901      	cmp	r1, #1
    63b4:	d010      	beq.n	63d8 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    63b6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    63b8:	3b01      	subs	r3, #1
    63ba:	b29b      	uxth	r3, r3
    63bc:	85ab      	strh	r3, [r5, #44]	; 0x2c
    63be:	2b00      	cmp	r3, #0
    63c0:	d112      	bne.n	63e8 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    63c2:	3304      	adds	r3, #4
    63c4:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    63c6:	2200      	movs	r2, #0
    63c8:	332e      	adds	r3, #46	; 0x2e
    63ca:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    63cc:	07bb      	lsls	r3, r7, #30
    63ce:	d50b      	bpl.n	63e8 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    63d0:	0028      	movs	r0, r5
    63d2:	692b      	ldr	r3, [r5, #16]
    63d4:	4798      	blx	r3
    63d6:	e007      	b.n	63e8 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    63d8:	0a1b      	lsrs	r3, r3, #8
    63da:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    63dc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    63de:	3301      	adds	r3, #1
    63e0:	626b      	str	r3, [r5, #36]	; 0x24
    63e2:	e7e8      	b.n	63b6 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    63e4:	2304      	movs	r3, #4
    63e6:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    63e8:	06f3      	lsls	r3, r6, #27
    63ea:	d504      	bpl.n	63f6 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    63ec:	2310      	movs	r3, #16
    63ee:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    63f0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    63f2:	06fb      	lsls	r3, r7, #27
    63f4:	d40e      	bmi.n	6414 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    63f6:	06b3      	lsls	r3, r6, #26
    63f8:	d504      	bpl.n	6404 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    63fa:	2320      	movs	r3, #32
    63fc:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    63fe:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    6400:	073b      	lsls	r3, r7, #28
    6402:	d40b      	bmi.n	641c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    6404:	0733      	lsls	r3, r6, #28
    6406:	d504      	bpl.n	6412 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    6408:	2308      	movs	r3, #8
    640a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    640c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    640e:	06bb      	lsls	r3, r7, #26
    6410:	d408      	bmi.n	6424 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    6412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    6414:	0028      	movs	r0, r5
    6416:	69eb      	ldr	r3, [r5, #28]
    6418:	4798      	blx	r3
    641a:	e7ec      	b.n	63f6 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    641c:	0028      	movs	r0, r5
    641e:	69ab      	ldr	r3, [r5, #24]
    6420:	4798      	blx	r3
    6422:	e7ef      	b.n	6404 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    6424:	6a2b      	ldr	r3, [r5, #32]
    6426:	0028      	movs	r0, r5
    6428:	4798      	blx	r3
}
    642a:	e7f2      	b.n	6412 <_usart_interrupt_handler+0x176>
    642c:	20001f2c 	.word	0x20001f2c

00006430 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    6430:	b510      	push	{r4, lr}
	switch (clock_source) {
    6432:	2808      	cmp	r0, #8
    6434:	d803      	bhi.n	643e <system_clock_source_get_hz+0xe>
    6436:	0080      	lsls	r0, r0, #2
    6438:	4b1c      	ldr	r3, [pc, #112]	; (64ac <system_clock_source_get_hz+0x7c>)
    643a:	581b      	ldr	r3, [r3, r0]
    643c:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    643e:	2000      	movs	r0, #0
    6440:	e032      	b.n	64a8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    6442:	4b1b      	ldr	r3, [pc, #108]	; (64b0 <system_clock_source_get_hz+0x80>)
    6444:	6918      	ldr	r0, [r3, #16]
    6446:	e02f      	b.n	64a8 <system_clock_source_get_hz+0x78>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    6448:	4b1a      	ldr	r3, [pc, #104]	; (64b4 <system_clock_source_get_hz+0x84>)
    644a:	7d18      	ldrb	r0, [r3, #20]
    644c:	0700      	lsls	r0, r0, #28
    644e:	0f80      	lsrs	r0, r0, #30
    6450:	1c43      	adds	r3, r0, #1
    6452:	4819      	ldr	r0, [pc, #100]	; (64b8 <system_clock_source_get_hz+0x88>)
    6454:	4358      	muls	r0, r3
    6456:	e027      	b.n	64a8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    6458:	4b15      	ldr	r3, [pc, #84]	; (64b0 <system_clock_source_get_hz+0x80>)
    645a:	6958      	ldr	r0, [r3, #20]
    645c:	e024      	b.n	64a8 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    645e:	4b14      	ldr	r3, [pc, #80]	; (64b0 <system_clock_source_get_hz+0x80>)
    6460:	681b      	ldr	r3, [r3, #0]
			return 0;
    6462:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    6464:	079b      	lsls	r3, r3, #30
    6466:	d51f      	bpl.n	64a8 <system_clock_source_get_hz+0x78>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    6468:	4912      	ldr	r1, [pc, #72]	; (64b4 <system_clock_source_get_hz+0x84>)
    646a:	2280      	movs	r2, #128	; 0x80
    646c:	0052      	lsls	r2, r2, #1
    646e:	68cb      	ldr	r3, [r1, #12]
    6470:	4213      	tst	r3, r2
    6472:	d0fc      	beq.n	646e <system_clock_source_get_hz+0x3e>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    6474:	4b0e      	ldr	r3, [pc, #56]	; (64b0 <system_clock_source_get_hz+0x80>)
    6476:	681b      	ldr	r3, [r3, #0]
    6478:	075b      	lsls	r3, r3, #29
    647a:	d401      	bmi.n	6480 <system_clock_source_get_hz+0x50>
		return 48000000UL;
    647c:	480f      	ldr	r0, [pc, #60]	; (64bc <system_clock_source_get_hz+0x8c>)
    647e:	e013      	b.n	64a8 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    6480:	2000      	movs	r0, #0
    6482:	4b0f      	ldr	r3, [pc, #60]	; (64c0 <system_clock_source_get_hz+0x90>)
    6484:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    6486:	4b0a      	ldr	r3, [pc, #40]	; (64b0 <system_clock_source_get_hz+0x80>)
    6488:	689b      	ldr	r3, [r3, #8]
    648a:	041b      	lsls	r3, r3, #16
    648c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    648e:	4358      	muls	r0, r3
    6490:	e00a      	b.n	64a8 <system_clock_source_get_hz+0x78>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    6492:	2328      	movs	r3, #40	; 0x28
    6494:	4a07      	ldr	r2, [pc, #28]	; (64b4 <system_clock_source_get_hz+0x84>)
    6496:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    6498:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    649a:	079b      	lsls	r3, r3, #30
    649c:	d504      	bpl.n	64a8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    649e:	4b04      	ldr	r3, [pc, #16]	; (64b0 <system_clock_source_get_hz+0x80>)
    64a0:	68d8      	ldr	r0, [r3, #12]
    64a2:	e001      	b.n	64a8 <system_clock_source_get_hz+0x78>
		return 32768UL;
    64a4:	2080      	movs	r0, #128	; 0x80
    64a6:	0200      	lsls	r0, r0, #8
	}
}
    64a8:	bd10      	pop	{r4, pc}
    64aa:	46c0      	nop			; (mov r8, r8)
    64ac:	0001805c 	.word	0x0001805c
    64b0:	200000d8 	.word	0x200000d8
    64b4:	40000c00 	.word	0x40000c00
    64b8:	003d0900 	.word	0x003d0900
    64bc:	02dc6c00 	.word	0x02dc6c00
    64c0:	00006a89 	.word	0x00006a89

000064c4 <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
    64c4:	b570      	push	{r4, r5, r6, lr}
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
    64c6:	4c0b      	ldr	r4, [pc, #44]	; (64f4 <system_clock_source_osc16m_set_config+0x30>)
    64c8:	7d23      	ldrb	r3, [r4, #20]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
	temp.bit.ONDEMAND = config->on_demand;
    64ca:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;
    64cc:	7846      	ldrb	r6, [r0, #1]

	OSCCTRL->OSC16MCTRL = temp;
    64ce:	7802      	ldrb	r2, [r0, #0]
    64d0:	2103      	movs	r1, #3
    64d2:	4011      	ands	r1, r2
    64d4:	0089      	lsls	r1, r1, #2
    64d6:	220c      	movs	r2, #12
    64d8:	4393      	bics	r3, r2
    64da:	430b      	orrs	r3, r1
    64dc:	3a0b      	subs	r2, #11
    64de:	4032      	ands	r2, r6
    64e0:	0192      	lsls	r2, r2, #6
    64e2:	2140      	movs	r1, #64	; 0x40
    64e4:	438b      	bics	r3, r1
    64e6:	4313      	orrs	r3, r2
    64e8:	01ed      	lsls	r5, r5, #7
    64ea:	227f      	movs	r2, #127	; 0x7f
    64ec:	4013      	ands	r3, r2
    64ee:	432b      	orrs	r3, r5
    64f0:	7523      	strb	r3, [r4, #20]
}
    64f2:	bd70      	pop	{r4, r5, r6, pc}
    64f4:	40000c00 	.word	0x40000c00

000064f8 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    64f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    64fa:	46d6      	mov	lr, sl
    64fc:	464f      	mov	r7, r9
    64fe:	4646      	mov	r6, r8
    6500:	b5c0      	push	{r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    6502:	4b20      	ldr	r3, [pc, #128]	; (6584 <system_clock_source_xosc32k_set_config+0x8c>)
    6504:	469a      	mov	sl, r3
    6506:	695b      	ldr	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    6508:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    650a:	7801      	ldrb	r1, [r0, #0]
    650c:	424c      	negs	r4, r1
    650e:	414c      	adcs	r4, r1
    6510:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    6512:	7881      	ldrb	r1, [r0, #2]
    6514:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
    6516:	78c1      	ldrb	r1, [r0, #3]
    6518:	4688      	mov	r8, r1

	temp.bit.ONDEMAND = config->on_demand;
    651a:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    651c:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
    651e:	7a84      	ldrb	r4, [r0, #10]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    6520:	6840      	ldr	r0, [r0, #4]
    6522:	4919      	ldr	r1, [pc, #100]	; (6588 <system_clock_source_xosc32k_set_config+0x90>)
    6524:	6148      	str	r0, [r1, #20]

	OSC32KCTRL->XOSC32K = temp;
    6526:	2101      	movs	r1, #1
    6528:	4648      	mov	r0, r9
    652a:	0080      	lsls	r0, r0, #2
    652c:	2204      	movs	r2, #4
    652e:	4393      	bics	r3, r2
    6530:	4303      	orrs	r3, r0
    6532:	4640      	mov	r0, r8
    6534:	4008      	ands	r0, r1
    6536:	00c0      	lsls	r0, r0, #3
    6538:	3204      	adds	r2, #4
    653a:	4393      	bics	r3, r2
    653c:	4303      	orrs	r3, r0
    653e:	4660      	mov	r0, ip
    6540:	4008      	ands	r0, r1
    6542:	0100      	lsls	r0, r0, #4
    6544:	3208      	adds	r2, #8
    6546:	4393      	bics	r3, r2
    6548:	4303      	orrs	r3, r0
    654a:	400f      	ands	r7, r1
    654c:	01bf      	lsls	r7, r7, #6
    654e:	2040      	movs	r0, #64	; 0x40
    6550:	4383      	bics	r3, r0
    6552:	433b      	orrs	r3, r7
    6554:	400e      	ands	r6, r1
    6556:	01f6      	lsls	r6, r6, #7
    6558:	3040      	adds	r0, #64	; 0x40
    655a:	4383      	bics	r3, r0
    655c:	4333      	orrs	r3, r6
    655e:	3879      	subs	r0, #121	; 0x79
    6560:	4005      	ands	r5, r0
    6562:	022d      	lsls	r5, r5, #8
    6564:	4809      	ldr	r0, [pc, #36]	; (658c <system_clock_source_xosc32k_set_config+0x94>)
    6566:	4003      	ands	r3, r0
    6568:	432b      	orrs	r3, r5
    656a:	4021      	ands	r1, r4
    656c:	0309      	lsls	r1, r1, #12
    656e:	4808      	ldr	r0, [pc, #32]	; (6590 <system_clock_source_xosc32k_set_config+0x98>)
    6570:	4003      	ands	r3, r0
    6572:	430b      	orrs	r3, r1
    6574:	4652      	mov	r2, sl
    6576:	6153      	str	r3, [r2, #20]
}
    6578:	bc1c      	pop	{r2, r3, r4}
    657a:	4690      	mov	r8, r2
    657c:	4699      	mov	r9, r3
    657e:	46a2      	mov	sl, r4
    6580:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6582:	46c0      	nop			; (mov r8, r8)
    6584:	40001000 	.word	0x40001000
    6588:	200000d8 	.word	0x200000d8
    658c:	fffff8ff 	.word	0xfffff8ff
    6590:	ffffefff 	.word	0xffffefff

00006594 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    6594:	2808      	cmp	r0, #8
    6596:	d803      	bhi.n	65a0 <system_clock_source_enable+0xc>
    6598:	0080      	lsls	r0, r0, #2
    659a:	4b29      	ldr	r3, [pc, #164]	; (6640 <system_clock_source_enable+0xac>)
    659c:	581b      	ldr	r3, [r3, r0]
    659e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    65a0:	2017      	movs	r0, #23
    65a2:	e04b      	b.n	663c <system_clock_source_enable+0xa8>
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    65a4:	4a27      	ldr	r2, [pc, #156]	; (6644 <system_clock_source_enable+0xb0>)
    65a6:	7d13      	ldrb	r3, [r2, #20]
    65a8:	2102      	movs	r1, #2
    65aa:	430b      	orrs	r3, r1
    65ac:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    65ae:	2000      	movs	r0, #0
    65b0:	e044      	b.n	663c <system_clock_source_enable+0xa8>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    65b2:	4a25      	ldr	r2, [pc, #148]	; (6648 <system_clock_source_enable+0xb4>)
    65b4:	6993      	ldr	r3, [r2, #24]
    65b6:	2102      	movs	r1, #2
    65b8:	430b      	orrs	r3, r1
    65ba:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    65bc:	2000      	movs	r0, #0
		break;
    65be:	e03d      	b.n	663c <system_clock_source_enable+0xa8>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    65c0:	4a20      	ldr	r2, [pc, #128]	; (6644 <system_clock_source_enable+0xb0>)
    65c2:	8a13      	ldrh	r3, [r2, #16]
    65c4:	2102      	movs	r1, #2
    65c6:	430b      	orrs	r3, r1
    65c8:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    65ca:	2000      	movs	r0, #0
		break;
    65cc:	e036      	b.n	663c <system_clock_source_enable+0xa8>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    65ce:	4a1e      	ldr	r2, [pc, #120]	; (6648 <system_clock_source_enable+0xb4>)
    65d0:	6953      	ldr	r3, [r2, #20]
    65d2:	2102      	movs	r1, #2
    65d4:	430b      	orrs	r3, r1
    65d6:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    65d8:	2000      	movs	r0, #0
		break;
    65da:	e02f      	b.n	663c <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    65dc:	491b      	ldr	r1, [pc, #108]	; (664c <system_clock_source_enable+0xb8>)
    65de:	680b      	ldr	r3, [r1, #0]
    65e0:	2202      	movs	r2, #2
    65e2:	4313      	orrs	r3, r2
    65e4:	600b      	str	r3, [r1, #0]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    65e6:	4b17      	ldr	r3, [pc, #92]	; (6644 <system_clock_source_enable+0xb0>)
    65e8:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    65ea:	0019      	movs	r1, r3
    65ec:	32fe      	adds	r2, #254	; 0xfe
    65ee:	68cb      	ldr	r3, [r1, #12]
    65f0:	4213      	tst	r3, r2
    65f2:	d0fc      	beq.n	65ee <system_clock_source_enable+0x5a>
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    65f4:	4a15      	ldr	r2, [pc, #84]	; (664c <system_clock_source_enable+0xb8>)
    65f6:	6891      	ldr	r1, [r2, #8]
    65f8:	4b12      	ldr	r3, [pc, #72]	; (6644 <system_clock_source_enable+0xb0>)
    65fa:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    65fc:	6852      	ldr	r2, [r2, #4]
    65fe:	61da      	str	r2, [r3, #28]
	OSCCTRL->DFLLCTRL.reg = 0;
    6600:	2200      	movs	r2, #0
    6602:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    6604:	0019      	movs	r1, r3
    6606:	3201      	adds	r2, #1
    6608:	32ff      	adds	r2, #255	; 0xff
    660a:	68cb      	ldr	r3, [r1, #12]
    660c:	4213      	tst	r3, r2
    660e:	d0fc      	beq.n	660a <system_clock_source_enable+0x76>
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    6610:	4b0e      	ldr	r3, [pc, #56]	; (664c <system_clock_source_enable+0xb8>)
    6612:	681b      	ldr	r3, [r3, #0]
    6614:	b29b      	uxth	r3, r3
    6616:	4a0b      	ldr	r2, [pc, #44]	; (6644 <system_clock_source_enable+0xb0>)
    6618:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    661a:	2000      	movs	r0, #0
    661c:	e00e      	b.n	663c <system_clock_source_enable+0xa8>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    661e:	4909      	ldr	r1, [pc, #36]	; (6644 <system_clock_source_enable+0xb0>)
    6620:	2228      	movs	r2, #40	; 0x28
    6622:	5c8b      	ldrb	r3, [r1, r2]
    6624:	2002      	movs	r0, #2
    6626:	4303      	orrs	r3, r0
    6628:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    662a:	0008      	movs	r0, r1
    662c:	2138      	movs	r1, #56	; 0x38
    662e:	3a26      	subs	r2, #38	; 0x26
    6630:	5c43      	ldrb	r3, [r0, r1]
    6632:	4213      	tst	r3, r2
    6634:	d1fc      	bne.n	6630 <system_clock_source_enable+0x9c>
	return STATUS_OK;
    6636:	2000      	movs	r0, #0
    6638:	e000      	b.n	663c <system_clock_source_enable+0xa8>
		return STATUS_OK;
    663a:	2000      	movs	r0, #0
}
    663c:	4770      	bx	lr
    663e:	46c0      	nop			; (mov r8, r8)
    6640:	00018080 	.word	0x00018080
    6644:	40000c00 	.word	0x40000c00
    6648:	40001000 	.word	0x40001000
    664c:	200000d8 	.word	0x200000d8

00006650 <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    6650:	2808      	cmp	r0, #8
    6652:	d832      	bhi.n	66ba <system_clock_source_disable+0x6a>
    6654:	0080      	lsls	r0, r0, #2
    6656:	4b1a      	ldr	r3, [pc, #104]	; (66c0 <system_clock_source_disable+0x70>)
    6658:	581b      	ldr	r3, [r3, r0]
    665a:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    665c:	4a19      	ldr	r2, [pc, #100]	; (66c4 <system_clock_source_disable+0x74>)
    665e:	7d13      	ldrb	r3, [r2, #20]
    6660:	2102      	movs	r1, #2
    6662:	438b      	bics	r3, r1
    6664:	7513      	strb	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    6666:	2000      	movs	r0, #0
}
    6668:	4770      	bx	lr
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    666a:	4a17      	ldr	r2, [pc, #92]	; (66c8 <system_clock_source_disable+0x78>)
    666c:	6993      	ldr	r3, [r2, #24]
    666e:	2102      	movs	r1, #2
    6670:	438b      	bics	r3, r1
    6672:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    6674:	2000      	movs	r0, #0
		break;
    6676:	e7f7      	b.n	6668 <system_clock_source_disable+0x18>
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    6678:	4a12      	ldr	r2, [pc, #72]	; (66c4 <system_clock_source_disable+0x74>)
    667a:	8a13      	ldrh	r3, [r2, #16]
    667c:	2102      	movs	r1, #2
    667e:	438b      	bics	r3, r1
    6680:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    6682:	2000      	movs	r0, #0
		break;
    6684:	e7f0      	b.n	6668 <system_clock_source_disable+0x18>
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    6686:	4a10      	ldr	r2, [pc, #64]	; (66c8 <system_clock_source_disable+0x78>)
    6688:	6953      	ldr	r3, [r2, #20]
    668a:	2102      	movs	r1, #2
    668c:	438b      	bics	r3, r1
    668e:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    6690:	2000      	movs	r0, #0
		break;
    6692:	e7e9      	b.n	6668 <system_clock_source_disable+0x18>
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    6694:	4b0d      	ldr	r3, [pc, #52]	; (66cc <system_clock_source_disable+0x7c>)
    6696:	681a      	ldr	r2, [r3, #0]
    6698:	2102      	movs	r1, #2
    669a:	438a      	bics	r2, r1
    669c:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    669e:	681b      	ldr	r3, [r3, #0]
    66a0:	b29b      	uxth	r3, r3
    66a2:	4a08      	ldr	r2, [pc, #32]	; (66c4 <system_clock_source_disable+0x74>)
    66a4:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    66a6:	2000      	movs	r0, #0
		break;
    66a8:	e7de      	b.n	6668 <system_clock_source_disable+0x18>
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    66aa:	4906      	ldr	r1, [pc, #24]	; (66c4 <system_clock_source_disable+0x74>)
    66ac:	2228      	movs	r2, #40	; 0x28
    66ae:	5c8b      	ldrb	r3, [r1, r2]
    66b0:	2002      	movs	r0, #2
    66b2:	4383      	bics	r3, r0
    66b4:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    66b6:	2000      	movs	r0, #0
		break;
    66b8:	e7d6      	b.n	6668 <system_clock_source_disable+0x18>
		return STATUS_ERR_INVALID_ARG;
    66ba:	2017      	movs	r0, #23
    66bc:	e7d4      	b.n	6668 <system_clock_source_disable+0x18>
    66be:	46c0      	nop			; (mov r8, r8)
    66c0:	000180a4 	.word	0x000180a4
    66c4:	40000c00 	.word	0x40000c00
    66c8:	40001000 	.word	0x40001000
    66cc:	200000d8 	.word	0x200000d8

000066d0 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    66d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    66d2:	46d6      	mov	lr, sl
    66d4:	464f      	mov	r7, r9
    66d6:	4646      	mov	r6, r8
    66d8:	b5c0      	push	{r6, r7, lr}
    66da:	b088      	sub	sp, #32
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    66dc:	2280      	movs	r2, #128	; 0x80
    66de:	0052      	lsls	r2, r2, #1
    66e0:	4b56      	ldr	r3, [pc, #344]	; (683c <system_clock_init+0x16c>)
    66e2:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    66e4:	3afd      	subs	r2, #253	; 0xfd
    66e6:	4b56      	ldr	r3, [pc, #344]	; (6840 <system_clock_init+0x170>)
    66e8:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    66ea:	4a56      	ldr	r2, [pc, #344]	; (6844 <system_clock_init+0x174>)
    66ec:	6853      	ldr	r3, [r2, #4]
    66ee:	211e      	movs	r1, #30
    66f0:	438b      	bics	r3, r1
    66f2:	391a      	subs	r1, #26
    66f4:	430b      	orrs	r3, r1
    66f6:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    66f8:	2380      	movs	r3, #128	; 0x80
    66fa:	05db      	lsls	r3, r3, #23
    66fc:	789b      	ldrb	r3, [r3, #2]
    66fe:	2b02      	cmp	r3, #2
    6700:	d00f      	beq.n	6722 <system_clock_init+0x52>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB || SAMR34J || SAMR35J || (WLR089U0)
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    6702:	2380      	movs	r3, #128	; 0x80
    6704:	05db      	lsls	r3, r3, #23
    6706:	789b      	ldrb	r3, [r3, #2]
    6708:	b25b      	sxtb	r3, r3
    670a:	2b00      	cmp	r3, #0
    670c:	db09      	blt.n	6722 <system_clock_init+0x52>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    670e:	2380      	movs	r3, #128	; 0x80
    6710:	05db      	lsls	r3, r3, #23
    6712:	2201      	movs	r2, #1
    6714:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    6716:	3201      	adds	r2, #1
    6718:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    671a:	001a      	movs	r2, r3
    671c:	7993      	ldrb	r3, [r2, #6]
    671e:	2b00      	cmp	r3, #0
    6720:	d0fc      	beq.n	671c <system_clock_init+0x4c>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    6722:	a805      	add	r0, sp, #20
    6724:	2300      	movs	r3, #0
    6726:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    6728:	2280      	movs	r2, #128	; 0x80
    672a:	0212      	lsls	r2, r2, #8
    672c:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    672e:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    6730:	2201      	movs	r2, #1
    6732:	70c2      	strb	r2, [r0, #3]
	config->run_in_standby      = false;
    6734:	7203      	strb	r3, [r0, #8]
	config->write_once          = false;
    6736:	7283      	strb	r3, [r0, #10]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    6738:	3203      	adds	r2, #3
    673a:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    673c:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    673e:	4b42      	ldr	r3, [pc, #264]	; (6848 <system_clock_init+0x178>)
    6740:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    6742:	2005      	movs	r0, #5
    6744:	4b41      	ldr	r3, [pc, #260]	; (684c <system_clock_init+0x17c>)
    6746:	4798      	blx	r3
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    6748:	4941      	ldr	r1, [pc, #260]	; (6850 <system_clock_init+0x180>)
    674a:	2201      	movs	r2, #1
    674c:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    674e:	421a      	tst	r2, r3
    6750:	d0fc      	beq.n	674c <system_clock_init+0x7c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		OSC32KCTRL->XOSC32K.bit.ONDEMAND = 1;
    6752:	4a3f      	ldr	r2, [pc, #252]	; (6850 <system_clock_init+0x180>)
    6754:	6953      	ldr	r3, [r2, #20]
    6756:	2180      	movs	r1, #128	; 0x80
    6758:	430b      	orrs	r3, r1
    675a:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    675c:	a902      	add	r1, sp, #8
    675e:	2501      	movs	r5, #1
    6760:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    6762:	2400      	movs	r4, #0
    6764:	704c      	strb	r4, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    6766:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    6768:	724c      	strb	r4, [r1, #9]
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    676a:	2303      	movs	r3, #3
    676c:	700b      	strb	r3, [r1, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    676e:	2000      	movs	r0, #0
    6770:	4b38      	ldr	r3, [pc, #224]	; (6854 <system_clock_init+0x184>)
    6772:	4798      	blx	r3
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    6774:	2006      	movs	r0, #6
    6776:	4b38      	ldr	r3, [pc, #224]	; (6858 <system_clock_init+0x188>)
    6778:	4798      	blx	r3
	config->run_in_standby  = false;
    677a:	a801      	add	r0, sp, #4
    677c:	7044      	strb	r4, [r0, #1]
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
    677e:	7005      	strb	r5, [r0, #0]
	osc16m_conf.on_demand       = 0;
    6780:	7084      	strb	r4, [r0, #2]
	system_clock_source_osc16m_set_config(&osc16m_conf);
    6782:	4b36      	ldr	r3, [pc, #216]	; (685c <system_clock_init+0x18c>)
    6784:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
    6786:	2006      	movs	r0, #6
    6788:	4b30      	ldr	r3, [pc, #192]	; (684c <system_clock_init+0x17c>)
    678a:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    678c:	492b      	ldr	r1, [pc, #172]	; (683c <system_clock_init+0x16c>)
    678e:	2210      	movs	r2, #16
    6790:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    6792:	421a      	tst	r2, r3
    6794:	d0fc      	beq.n	6790 <system_clock_init+0xc0>
	config->division_factor    = 1;
    6796:	ac02      	add	r4, sp, #8
    6798:	2601      	movs	r6, #1
    679a:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    679c:	2500      	movs	r5, #0
    679e:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    67a0:	2306      	movs	r3, #6
    67a2:	469a      	mov	sl, r3
    67a4:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    67a6:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    67a8:	7265      	strb	r5, [r4, #9]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    67aa:	0021      	movs	r1, r4
    67ac:	2000      	movs	r0, #0
    67ae:	4b29      	ldr	r3, [pc, #164]	; (6854 <system_clock_init+0x184>)
    67b0:	4698      	mov	r8, r3
    67b2:	4798      	blx	r3
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    67b4:	4b2a      	ldr	r3, [pc, #168]	; (6860 <system_clock_init+0x190>)
    67b6:	4798      	blx	r3
	config->division_factor    = 1;
    67b8:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    67ba:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    67bc:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    67be:	2305      	movs	r3, #5
    67c0:	7023      	strb	r3, [r4, #0]
    67c2:	7226      	strb	r6, [r4, #8]
    67c4:	0021      	movs	r1, r4
    67c6:	2001      	movs	r0, #1
    67c8:	47c0      	blx	r8
    67ca:	2001      	movs	r0, #1
    67cc:	4b25      	ldr	r3, [pc, #148]	; (6864 <system_clock_init+0x194>)
    67ce:	4699      	mov	r9, r3
    67d0:	4798      	blx	r3
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    67d2:	4f25      	ldr	r7, [pc, #148]	; (6868 <system_clock_init+0x198>)
    67d4:	71be      	strb	r6, [r7, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    67d6:	717e      	strb	r6, [r7, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    67d8:	713e      	strb	r6, [r7, #4]
	config->division_factor    = 1;
    67da:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    67dc:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    67de:	4653      	mov	r3, sl
    67e0:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    67e2:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    67e4:	7265      	strb	r5, [r4, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    67e6:	0021      	movs	r1, r4
    67e8:	2000      	movs	r0, #0
    67ea:	47c0      	blx	r8
    67ec:	2000      	movs	r0, #0
    67ee:	47c8      	blx	r9
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    67f0:	2000      	movs	r0, #0
    67f2:	4b1e      	ldr	r3, [pc, #120]	; (686c <system_clock_init+0x19c>)
    67f4:	4798      	blx	r3
    67f6:	7939      	ldrb	r1, [r7, #4]
    67f8:	b2c9      	uxtb	r1, r1
    67fa:	4b1d      	ldr	r3, [pc, #116]	; (6870 <system_clock_init+0x1a0>)
    67fc:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    67fe:	4b1d      	ldr	r3, [pc, #116]	; (6874 <system_clock_init+0x1a4>)
    6800:	4298      	cmp	r0, r3
    6802:	d814      	bhi.n	682e <system_clock_init+0x15e>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    6804:	2380      	movs	r3, #128	; 0x80
    6806:	05db      	lsls	r3, r3, #23
    6808:	789b      	ldrb	r3, [r3, #2]
    680a:	2b00      	cmp	r3, #0
    680c:	d00f      	beq.n	682e <system_clock_init+0x15e>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    680e:	2380      	movs	r3, #128	; 0x80
    6810:	05db      	lsls	r3, r3, #23
    6812:	789b      	ldrb	r3, [r3, #2]
    6814:	b25b      	sxtb	r3, r3
    6816:	2b00      	cmp	r3, #0
    6818:	db09      	blt.n	682e <system_clock_init+0x15e>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    681a:	2380      	movs	r3, #128	; 0x80
    681c:	05db      	lsls	r3, r3, #23
    681e:	2201      	movs	r2, #1
    6820:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    6822:	2200      	movs	r2, #0
    6824:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    6826:	001a      	movs	r2, r3
    6828:	7993      	ldrb	r3, [r2, #6]
    682a:	2b00      	cmp	r3, #0
    682c:	d0fc      	beq.n	6828 <system_clock_init+0x158>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    682e:	b008      	add	sp, #32
    6830:	bc1c      	pop	{r2, r3, r4}
    6832:	4690      	mov	r8, r2
    6834:	4699      	mov	r9, r3
    6836:	46a2      	mov	sl, r4
    6838:	bdf0      	pop	{r4, r5, r6, r7, pc}
    683a:	46c0      	nop			; (mov r8, r8)
    683c:	40000c00 	.word	0x40000c00
    6840:	40001400 	.word	0x40001400
    6844:	41004000 	.word	0x41004000
    6848:	000064f9 	.word	0x000064f9
    684c:	00006595 	.word	0x00006595
    6850:	40001000 	.word	0x40001000
    6854:	0000689d 	.word	0x0000689d
    6858:	00006651 	.word	0x00006651
    685c:	000064c5 	.word	0x000064c5
    6860:	00006879 	.word	0x00006879
    6864:	00006949 	.word	0x00006949
    6868:	40000400 	.word	0x40000400
    686c:	00006989 	.word	0x00006989
    6870:	000139e5 	.word	0x000139e5
    6874:	00b71b00 	.word	0x00b71b00

00006878 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    6878:	4a06      	ldr	r2, [pc, #24]	; (6894 <system_gclk_init+0x1c>)
    687a:	6953      	ldr	r3, [r2, #20]
    687c:	2140      	movs	r1, #64	; 0x40
    687e:	430b      	orrs	r3, r1
    6880:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    6882:	2201      	movs	r2, #1
    6884:	4b04      	ldr	r3, [pc, #16]	; (6898 <system_gclk_init+0x20>)
    6886:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    6888:	0019      	movs	r1, r3
    688a:	780b      	ldrb	r3, [r1, #0]
    688c:	4213      	tst	r3, r2
    688e:	d1fc      	bne.n	688a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    6890:	4770      	bx	lr
    6892:	46c0      	nop			; (mov r8, r8)
    6894:	40000400 	.word	0x40000400
    6898:	40001800 	.word	0x40001800

0000689c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    689c:	b570      	push	{r4, r5, r6, lr}
    689e:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    68a0:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    68a2:	784b      	ldrb	r3, [r1, #1]
    68a4:	2b00      	cmp	r3, #0
    68a6:	d002      	beq.n	68ae <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    68a8:	2380      	movs	r3, #128	; 0x80
    68aa:	00db      	lsls	r3, r3, #3
    68ac:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    68ae:	7a4b      	ldrb	r3, [r1, #9]
    68b0:	2b00      	cmp	r3, #0
    68b2:	d002      	beq.n	68ba <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    68b4:	2380      	movs	r3, #128	; 0x80
    68b6:	011b      	lsls	r3, r3, #4
    68b8:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    68ba:	6848      	ldr	r0, [r1, #4]
    68bc:	2801      	cmp	r0, #1
    68be:	d90f      	bls.n	68e0 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    68c0:	1e43      	subs	r3, r0, #1
    68c2:	4218      	tst	r0, r3
    68c4:	d131      	bne.n	692a <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    68c6:	2802      	cmp	r0, #2
    68c8:	d92d      	bls.n	6926 <system_gclk_gen_set_config+0x8a>
    68ca:	2302      	movs	r3, #2
    68cc:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    68ce:	3201      	adds	r2, #1
						mask <<= 1) {
    68d0:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    68d2:	4298      	cmp	r0, r3
    68d4:	d8fb      	bhi.n	68ce <system_gclk_gen_set_config+0x32>
    68d6:	2380      	movs	r3, #128	; 0x80
    68d8:	015b      	lsls	r3, r3, #5
    68da:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    68dc:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    68de:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    68e0:	7a0b      	ldrb	r3, [r1, #8]
    68e2:	2b00      	cmp	r3, #0
    68e4:	d002      	beq.n	68ec <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    68e6:	2380      	movs	r3, #128	; 0x80
    68e8:	019b      	lsls	r3, r3, #6
    68ea:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    68ec:	2604      	movs	r6, #4
    68ee:	40a6      	lsls	r6, r4
    68f0:	4911      	ldr	r1, [pc, #68]	; (6938 <system_gclk_gen_set_config+0x9c>)
    68f2:	4a12      	ldr	r2, [pc, #72]	; (693c <system_gclk_gen_set_config+0xa0>)
    68f4:	684b      	ldr	r3, [r1, #4]
    68f6:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    68f8:	421e      	tst	r6, r3
    68fa:	d1fb      	bne.n	68f4 <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    68fc:	4b10      	ldr	r3, [pc, #64]	; (6940 <system_gclk_gen_set_config+0xa4>)
    68fe:	4798      	blx	r3
    6900:	00a4      	lsls	r4, r4, #2
    6902:	4b0d      	ldr	r3, [pc, #52]	; (6938 <system_gclk_gen_set_config+0x9c>)
    6904:	469c      	mov	ip, r3
    6906:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    6908:	6a22      	ldr	r2, [r4, #32]
    690a:	2380      	movs	r3, #128	; 0x80
    690c:	005b      	lsls	r3, r3, #1
    690e:	401a      	ands	r2, r3
    6910:	432a      	orrs	r2, r5
    6912:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    6914:	4661      	mov	r1, ip
    6916:	4a09      	ldr	r2, [pc, #36]	; (693c <system_gclk_gen_set_config+0xa0>)
    6918:	684b      	ldr	r3, [r1, #4]
    691a:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    691c:	421e      	tst	r6, r3
    691e:	d1fb      	bne.n	6918 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    6920:	4b08      	ldr	r3, [pc, #32]	; (6944 <system_gclk_gen_set_config+0xa8>)
    6922:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    6924:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    6926:	2200      	movs	r2, #0
    6928:	e7d5      	b.n	68d6 <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    692a:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    692c:	2380      	movs	r3, #128	; 0x80
    692e:	009b      	lsls	r3, r3, #2
    6930:	4318      	orrs	r0, r3
    6932:	4305      	orrs	r5, r0
    6934:	e7d4      	b.n	68e0 <system_gclk_gen_set_config+0x44>
    6936:	46c0      	nop			; (mov r8, r8)
    6938:	40001800 	.word	0x40001800
    693c:	000007fc 	.word	0x000007fc
    6940:	00004569 	.word	0x00004569
    6944:	000045a9 	.word	0x000045a9

00006948 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    6948:	b510      	push	{r4, lr}
    694a:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    694c:	2204      	movs	r2, #4
    694e:	4082      	lsls	r2, r0
    6950:	4809      	ldr	r0, [pc, #36]	; (6978 <system_gclk_gen_enable+0x30>)
    6952:	490a      	ldr	r1, [pc, #40]	; (697c <system_gclk_gen_enable+0x34>)
    6954:	6843      	ldr	r3, [r0, #4]
    6956:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    6958:	421a      	tst	r2, r3
    695a:	d1fb      	bne.n	6954 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    695c:	4b08      	ldr	r3, [pc, #32]	; (6980 <system_gclk_gen_enable+0x38>)
    695e:	4798      	blx	r3
    6960:	00a4      	lsls	r4, r4, #2
    6962:	4b05      	ldr	r3, [pc, #20]	; (6978 <system_gclk_gen_enable+0x30>)
    6964:	469c      	mov	ip, r3
    6966:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    6968:	6a22      	ldr	r2, [r4, #32]
    696a:	2380      	movs	r3, #128	; 0x80
    696c:	005b      	lsls	r3, r3, #1
    696e:	4313      	orrs	r3, r2
    6970:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    6972:	4b04      	ldr	r3, [pc, #16]	; (6984 <system_gclk_gen_enable+0x3c>)
    6974:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    6976:	bd10      	pop	{r4, pc}
    6978:	40001800 	.word	0x40001800
    697c:	000007fc 	.word	0x000007fc
    6980:	00004569 	.word	0x00004569
    6984:	000045a9 	.word	0x000045a9

00006988 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    6988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    698a:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    698c:	2204      	movs	r2, #4
    698e:	4082      	lsls	r2, r0
    6990:	4812      	ldr	r0, [pc, #72]	; (69dc <system_gclk_gen_get_hz+0x54>)
    6992:	4913      	ldr	r1, [pc, #76]	; (69e0 <system_gclk_gen_get_hz+0x58>)
    6994:	6843      	ldr	r3, [r0, #4]
    6996:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    6998:	421a      	tst	r2, r3
    699a:	d1fb      	bne.n	6994 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    699c:	4b11      	ldr	r3, [pc, #68]	; (69e4 <system_gclk_gen_get_hz+0x5c>)
    699e:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    69a0:	4f0e      	ldr	r7, [pc, #56]	; (69dc <system_gclk_gen_get_hz+0x54>)
    69a2:	3408      	adds	r4, #8
    69a4:	00a4      	lsls	r4, r4, #2
    69a6:	59e0      	ldr	r0, [r4, r7]
    69a8:	0700      	lsls	r0, r0, #28
    69aa:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
    69ac:	4b0e      	ldr	r3, [pc, #56]	; (69e8 <system_gclk_gen_get_hz+0x60>)
    69ae:	4798      	blx	r3
    69b0:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    69b2:	59e5      	ldr	r5, [r4, r7]
    69b4:	04ed      	lsls	r5, r5, #19
    69b6:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    69b8:	59e4      	ldr	r4, [r4, r7]
    69ba:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    69bc:	4b0b      	ldr	r3, [pc, #44]	; (69ec <system_gclk_gen_get_hz+0x64>)
    69be:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    69c0:	2d00      	cmp	r5, #0
    69c2:	d107      	bne.n	69d4 <system_gclk_gen_get_hz+0x4c>
    69c4:	2c01      	cmp	r4, #1
    69c6:	d907      	bls.n	69d8 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    69c8:	0021      	movs	r1, r4
    69ca:	0030      	movs	r0, r6
    69cc:	4b08      	ldr	r3, [pc, #32]	; (69f0 <system_gclk_gen_get_hz+0x68>)
    69ce:	4798      	blx	r3
    69d0:	0006      	movs	r6, r0
    69d2:	e001      	b.n	69d8 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    69d4:	3401      	adds	r4, #1
    69d6:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    69d8:	0030      	movs	r0, r6
    69da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    69dc:	40001800 	.word	0x40001800
    69e0:	000007fc 	.word	0x000007fc
    69e4:	00004569 	.word	0x00004569
    69e8:	00006431 	.word	0x00006431
    69ec:	000045a9 	.word	0x000045a9
    69f0:	000139e5 	.word	0x000139e5

000069f4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    69f4:	b510      	push	{r4, lr}
    69f6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    69f8:	4b09      	ldr	r3, [pc, #36]	; (6a20 <system_gclk_chan_enable+0x2c>)
    69fa:	4798      	blx	r3
    69fc:	00a0      	lsls	r0, r4, #2
    69fe:	4b09      	ldr	r3, [pc, #36]	; (6a24 <system_gclk_chan_enable+0x30>)
    6a00:	469c      	mov	ip, r3
    6a02:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    6a04:	2280      	movs	r2, #128	; 0x80
    6a06:	5883      	ldr	r3, [r0, r2]
    6a08:	2140      	movs	r1, #64	; 0x40
    6a0a:	430b      	orrs	r3, r1
    6a0c:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    6a0e:	3140      	adds	r1, #64	; 0x40
    6a10:	3a40      	subs	r2, #64	; 0x40
    6a12:	5843      	ldr	r3, [r0, r1]
    6a14:	421a      	tst	r2, r3
    6a16:	d0fc      	beq.n	6a12 <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    6a18:	4b03      	ldr	r3, [pc, #12]	; (6a28 <system_gclk_chan_enable+0x34>)
    6a1a:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    6a1c:	bd10      	pop	{r4, pc}
    6a1e:	46c0      	nop			; (mov r8, r8)
    6a20:	00004569 	.word	0x00004569
    6a24:	40001800 	.word	0x40001800
    6a28:	000045a9 	.word	0x000045a9

00006a2c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    6a2c:	b510      	push	{r4, lr}
    6a2e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    6a30:	4b09      	ldr	r3, [pc, #36]	; (6a58 <system_gclk_chan_disable+0x2c>)
    6a32:	4798      	blx	r3
    6a34:	00a0      	lsls	r0, r4, #2
    6a36:	4b09      	ldr	r3, [pc, #36]	; (6a5c <system_gclk_chan_disable+0x30>)
    6a38:	469c      	mov	ip, r3
    6a3a:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    6a3c:	2280      	movs	r2, #128	; 0x80
    6a3e:	5883      	ldr	r3, [r0, r2]
    6a40:	2140      	movs	r1, #64	; 0x40
    6a42:	438b      	bics	r3, r1
    6a44:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    6a46:	3140      	adds	r1, #64	; 0x40
    6a48:	3a40      	subs	r2, #64	; 0x40
    6a4a:	5843      	ldr	r3, [r0, r1]
    6a4c:	421a      	tst	r2, r3
    6a4e:	d1fc      	bne.n	6a4a <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    6a50:	4b03      	ldr	r3, [pc, #12]	; (6a60 <system_gclk_chan_disable+0x34>)
    6a52:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    6a54:	bd10      	pop	{r4, pc}
    6a56:	46c0      	nop			; (mov r8, r8)
    6a58:	00004569 	.word	0x00004569
    6a5c:	40001800 	.word	0x40001800
    6a60:	000045a9 	.word	0x000045a9

00006a64 <system_gclk_chan_set_config>:
{
    6a64:	b570      	push	{r4, r5, r6, lr}
    6a66:	0004      	movs	r4, r0
    6a68:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    6a6a:	4b05      	ldr	r3, [pc, #20]	; (6a80 <system_gclk_chan_set_config+0x1c>)
    6a6c:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    6a6e:	782a      	ldrb	r2, [r5, #0]
    6a70:	230f      	movs	r3, #15
    6a72:	4013      	ands	r3, r2
    6a74:	3420      	adds	r4, #32
    6a76:	00a4      	lsls	r4, r4, #2
    6a78:	4a02      	ldr	r2, [pc, #8]	; (6a84 <system_gclk_chan_set_config+0x20>)
    6a7a:	50a3      	str	r3, [r4, r2]
}
    6a7c:	bd70      	pop	{r4, r5, r6, pc}
    6a7e:	46c0      	nop			; (mov r8, r8)
    6a80:	00006a2d 	.word	0x00006a2d
    6a84:	40001800 	.word	0x40001800

00006a88 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    6a88:	b510      	push	{r4, lr}
    6a8a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    6a8c:	4b06      	ldr	r3, [pc, #24]	; (6aa8 <system_gclk_chan_get_hz+0x20>)
    6a8e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    6a90:	3420      	adds	r4, #32
    6a92:	00a4      	lsls	r4, r4, #2
    6a94:	4b05      	ldr	r3, [pc, #20]	; (6aac <system_gclk_chan_get_hz+0x24>)
    6a96:	58e4      	ldr	r4, [r4, r3]
    6a98:	0724      	lsls	r4, r4, #28
    6a9a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    6a9c:	4b04      	ldr	r3, [pc, #16]	; (6ab0 <system_gclk_chan_get_hz+0x28>)
    6a9e:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    6aa0:	0020      	movs	r0, r4
    6aa2:	4b04      	ldr	r3, [pc, #16]	; (6ab4 <system_gclk_chan_get_hz+0x2c>)
    6aa4:	4798      	blx	r3
}
    6aa6:	bd10      	pop	{r4, pc}
    6aa8:	00004569 	.word	0x00004569
    6aac:	40001800 	.word	0x40001800
    6ab0:	000045a9 	.word	0x000045a9
    6ab4:	00006989 	.word	0x00006989

00006ab8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    6ab8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    6aba:	78d3      	ldrb	r3, [r2, #3]
    6abc:	2b00      	cmp	r3, #0
    6abe:	d135      	bne.n	6b2c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    6ac0:	7813      	ldrb	r3, [r2, #0]
    6ac2:	2b80      	cmp	r3, #128	; 0x80
    6ac4:	d029      	beq.n	6b1a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    6ac6:	061b      	lsls	r3, r3, #24
    6ac8:	2480      	movs	r4, #128	; 0x80
    6aca:	0264      	lsls	r4, r4, #9
    6acc:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6ace:	7854      	ldrb	r4, [r2, #1]
    6ad0:	2502      	movs	r5, #2
    6ad2:	43ac      	bics	r4, r5
    6ad4:	d106      	bne.n	6ae4 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    6ad6:	7894      	ldrb	r4, [r2, #2]
    6ad8:	2c00      	cmp	r4, #0
    6ada:	d120      	bne.n	6b1e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    6adc:	2480      	movs	r4, #128	; 0x80
    6ade:	02a4      	lsls	r4, r4, #10
    6ae0:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    6ae2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6ae4:	7854      	ldrb	r4, [r2, #1]
    6ae6:	3c01      	subs	r4, #1
    6ae8:	2c01      	cmp	r4, #1
    6aea:	d91c      	bls.n	6b26 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6aec:	040d      	lsls	r5, r1, #16
    6aee:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6af0:	24a0      	movs	r4, #160	; 0xa0
    6af2:	05e4      	lsls	r4, r4, #23
    6af4:	432c      	orrs	r4, r5
    6af6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6af8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    6afa:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6afc:	24d0      	movs	r4, #208	; 0xd0
    6afe:	0624      	lsls	r4, r4, #24
    6b00:	432c      	orrs	r4, r5
    6b02:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6b04:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    6b06:	78d4      	ldrb	r4, [r2, #3]
    6b08:	2c00      	cmp	r4, #0
    6b0a:	d122      	bne.n	6b52 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    6b0c:	035b      	lsls	r3, r3, #13
    6b0e:	d51c      	bpl.n	6b4a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    6b10:	7893      	ldrb	r3, [r2, #2]
    6b12:	2b01      	cmp	r3, #1
    6b14:	d01e      	beq.n	6b54 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    6b16:	6141      	str	r1, [r0, #20]
    6b18:	e017      	b.n	6b4a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    6b1a:	2300      	movs	r3, #0
    6b1c:	e7d7      	b.n	6ace <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    6b1e:	24c0      	movs	r4, #192	; 0xc0
    6b20:	02e4      	lsls	r4, r4, #11
    6b22:	4323      	orrs	r3, r4
    6b24:	e7dd      	b.n	6ae2 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    6b26:	4c0d      	ldr	r4, [pc, #52]	; (6b5c <_system_pinmux_config+0xa4>)
    6b28:	4023      	ands	r3, r4
    6b2a:	e7df      	b.n	6aec <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    6b2c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6b2e:	040c      	lsls	r4, r1, #16
    6b30:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6b32:	23a0      	movs	r3, #160	; 0xa0
    6b34:	05db      	lsls	r3, r3, #23
    6b36:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6b38:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    6b3a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6b3c:	23d0      	movs	r3, #208	; 0xd0
    6b3e:	061b      	lsls	r3, r3, #24
    6b40:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6b42:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    6b44:	78d3      	ldrb	r3, [r2, #3]
    6b46:	2b00      	cmp	r3, #0
    6b48:	d103      	bne.n	6b52 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6b4a:	7853      	ldrb	r3, [r2, #1]
    6b4c:	3b01      	subs	r3, #1
    6b4e:	2b01      	cmp	r3, #1
    6b50:	d902      	bls.n	6b58 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    6b52:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    6b54:	6181      	str	r1, [r0, #24]
    6b56:	e7f8      	b.n	6b4a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    6b58:	6081      	str	r1, [r0, #8]
}
    6b5a:	e7fa      	b.n	6b52 <_system_pinmux_config+0x9a>
    6b5c:	fffbffff 	.word	0xfffbffff

00006b60 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    6b60:	b510      	push	{r4, lr}
    6b62:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    6b64:	09c1      	lsrs	r1, r0, #7
		return NULL;
    6b66:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    6b68:	2900      	cmp	r1, #0
    6b6a:	d104      	bne.n	6b76 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    6b6c:	0943      	lsrs	r3, r0, #5
    6b6e:	01db      	lsls	r3, r3, #7
    6b70:	4905      	ldr	r1, [pc, #20]	; (6b88 <system_pinmux_pin_set_config+0x28>)
    6b72:	468c      	mov	ip, r1
    6b74:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    6b76:	241f      	movs	r4, #31
    6b78:	4020      	ands	r0, r4
    6b7a:	2101      	movs	r1, #1
    6b7c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    6b7e:	0018      	movs	r0, r3
    6b80:	4b02      	ldr	r3, [pc, #8]	; (6b8c <system_pinmux_pin_set_config+0x2c>)
    6b82:	4798      	blx	r3
}
    6b84:	bd10      	pop	{r4, pc}
    6b86:	46c0      	nop			; (mov r8, r8)
    6b88:	40002800 	.word	0x40002800
    6b8c:	00006ab9 	.word	0x00006ab9

00006b90 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    6b90:	4770      	bx	lr
    6b92:	Address 0x00006b92 is out of bounds.


00006b94 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6b94:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    6b96:	4b05      	ldr	r3, [pc, #20]	; (6bac <system_init+0x18>)
    6b98:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    6b9a:	4b05      	ldr	r3, [pc, #20]	; (6bb0 <system_init+0x1c>)
    6b9c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    6b9e:	4b05      	ldr	r3, [pc, #20]	; (6bb4 <system_init+0x20>)
    6ba0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    6ba2:	4b05      	ldr	r3, [pc, #20]	; (6bb8 <system_init+0x24>)
    6ba4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    6ba6:	4b05      	ldr	r3, [pc, #20]	; (6bbc <system_init+0x28>)
    6ba8:	4798      	blx	r3
}
    6baa:	bd10      	pop	{r4, pc}
    6bac:	000066d1 	.word	0x000066d1
    6bb0:	000045d9 	.word	0x000045d9
    6bb4:	00006b91 	.word	0x00006b91
    6bb8:	00004905 	.word	0x00004905
    6bbc:	00006b91 	.word	0x00006b91

00006bc0 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    6bc0:	1c93      	adds	r3, r2, #2
    6bc2:	009b      	lsls	r3, r3, #2
    6bc4:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    6bc6:	2a02      	cmp	r2, #2
    6bc8:	d009      	beq.n	6bde <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    6bca:	2a03      	cmp	r2, #3
    6bcc:	d00c      	beq.n	6be8 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    6bce:	2301      	movs	r3, #1
    6bd0:	4093      	lsls	r3, r2
    6bd2:	001a      	movs	r2, r3
    6bd4:	7e03      	ldrb	r3, [r0, #24]
    6bd6:	4313      	orrs	r3, r2
    6bd8:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    6bda:	2000      	movs	r0, #0
    6bdc:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    6bde:	7e03      	ldrb	r3, [r0, #24]
    6be0:	2210      	movs	r2, #16
    6be2:	4313      	orrs	r3, r2
    6be4:	7603      	strb	r3, [r0, #24]
    6be6:	e7f8      	b.n	6bda <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    6be8:	7e03      	ldrb	r3, [r0, #24]
    6bea:	2220      	movs	r2, #32
    6bec:	4313      	orrs	r3, r2
    6bee:	7603      	strb	r3, [r0, #24]
    6bf0:	e7f3      	b.n	6bda <tc_register_callback+0x1a>
    6bf2:	Address 0x00006bf2 is out of bounds.


00006bf4 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    6bf4:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    6bf6:	0080      	lsls	r0, r0, #2
    6bf8:	4b16      	ldr	r3, [pc, #88]	; (6c54 <_tc_interrupt_handler+0x60>)
    6bfa:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    6bfc:	6823      	ldr	r3, [r4, #0]
    6bfe:	7a9d      	ldrb	r5, [r3, #10]
    6c00:	7e22      	ldrb	r2, [r4, #24]
    6c02:	7e63      	ldrb	r3, [r4, #25]
    6c04:	4013      	ands	r3, r2
    6c06:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    6c08:	07eb      	lsls	r3, r5, #31
    6c0a:	d406      	bmi.n	6c1a <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    6c0c:	07ab      	lsls	r3, r5, #30
    6c0e:	d40b      	bmi.n	6c28 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    6c10:	06eb      	lsls	r3, r5, #27
    6c12:	d410      	bmi.n	6c36 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    6c14:	06ab      	lsls	r3, r5, #26
    6c16:	d415      	bmi.n	6c44 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    6c18:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    6c1a:	0020      	movs	r0, r4
    6c1c:	68a3      	ldr	r3, [r4, #8]
    6c1e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    6c20:	2301      	movs	r3, #1
    6c22:	6822      	ldr	r2, [r4, #0]
    6c24:	7293      	strb	r3, [r2, #10]
    6c26:	e7f1      	b.n	6c0c <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    6c28:	0020      	movs	r0, r4
    6c2a:	68e3      	ldr	r3, [r4, #12]
    6c2c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    6c2e:	2302      	movs	r3, #2
    6c30:	6822      	ldr	r2, [r4, #0]
    6c32:	7293      	strb	r3, [r2, #10]
    6c34:	e7ec      	b.n	6c10 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    6c36:	0020      	movs	r0, r4
    6c38:	6923      	ldr	r3, [r4, #16]
    6c3a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    6c3c:	2310      	movs	r3, #16
    6c3e:	6822      	ldr	r2, [r4, #0]
    6c40:	7293      	strb	r3, [r2, #10]
    6c42:	e7e7      	b.n	6c14 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    6c44:	0020      	movs	r0, r4
    6c46:	6963      	ldr	r3, [r4, #20]
    6c48:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    6c4a:	6823      	ldr	r3, [r4, #0]
    6c4c:	2220      	movs	r2, #32
    6c4e:	729a      	strb	r2, [r3, #10]
}
    6c50:	e7e2      	b.n	6c18 <_tc_interrupt_handler+0x24>
    6c52:	46c0      	nop			; (mov r8, r8)
    6c54:	20001f44 	.word	0x20001f44

00006c58 <TC0_Handler>:
	_TC_INTERRUPT_HANDLER(0,0)
    6c58:	b510      	push	{r4, lr}
    6c5a:	2000      	movs	r0, #0
    6c5c:	4b01      	ldr	r3, [pc, #4]	; (6c64 <TC0_Handler+0xc>)
    6c5e:	4798      	blx	r3
    6c60:	bd10      	pop	{r4, pc}
    6c62:	46c0      	nop			; (mov r8, r8)
    6c64:	00006bf5 	.word	0x00006bf5

00006c68 <TC1_Handler>:
	_TC_INTERRUPT_HANDLER(1,1)
    6c68:	b510      	push	{r4, lr}
    6c6a:	2001      	movs	r0, #1
    6c6c:	4b01      	ldr	r3, [pc, #4]	; (6c74 <TC1_Handler+0xc>)
    6c6e:	4798      	blx	r3
    6c70:	bd10      	pop	{r4, pc}
    6c72:	46c0      	nop			; (mov r8, r8)
    6c74:	00006bf5 	.word	0x00006bf5

00006c78 <TC4_Handler>:
	_TC_INTERRUPT_HANDLER(4,2)
    6c78:	b510      	push	{r4, lr}
    6c7a:	2002      	movs	r0, #2
    6c7c:	4b01      	ldr	r3, [pc, #4]	; (6c84 <TC4_Handler+0xc>)
    6c7e:	4798      	blx	r3
    6c80:	bd10      	pop	{r4, pc}
    6c82:	46c0      	nop			; (mov r8, r8)
    6c84:	00006bf5 	.word	0x00006bf5

00006c88 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    6c88:	b530      	push	{r4, r5, lr}
    6c8a:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    6c8c:	a901      	add	r1, sp, #4
    6c8e:	4b0c      	ldr	r3, [pc, #48]	; (6cc0 <_tc_get_inst_index+0x38>)
    6c90:	000a      	movs	r2, r1
    6c92:	cb32      	ldmia	r3!, {r1, r4, r5}
    6c94:	c232      	stmia	r2!, {r1, r4, r5}
    6c96:	cb12      	ldmia	r3!, {r1, r4}
    6c98:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    6c9a:	9b01      	ldr	r3, [sp, #4]
    6c9c:	4298      	cmp	r0, r3
    6c9e:	d00b      	beq.n	6cb8 <_tc_get_inst_index+0x30>
    6ca0:	2301      	movs	r3, #1
    6ca2:	a901      	add	r1, sp, #4
    6ca4:	009a      	lsls	r2, r3, #2
    6ca6:	5852      	ldr	r2, [r2, r1]
    6ca8:	4282      	cmp	r2, r0
    6caa:	d006      	beq.n	6cba <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    6cac:	3301      	adds	r3, #1
    6cae:	2b05      	cmp	r3, #5
    6cb0:	d1f8      	bne.n	6ca4 <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    6cb2:	2000      	movs	r0, #0
}
    6cb4:	b007      	add	sp, #28
    6cb6:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    6cb8:	2300      	movs	r3, #0
			return i;
    6cba:	b2d8      	uxtb	r0, r3
    6cbc:	e7fa      	b.n	6cb4 <_tc_get_inst_index+0x2c>
    6cbe:	46c0      	nop			; (mov r8, r8)
    6cc0:	000180f0 	.word	0x000180f0

00006cc4 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    6cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    6cc6:	46c6      	mov	lr, r8
    6cc8:	b500      	push	{lr}
    6cca:	b08e      	sub	sp, #56	; 0x38
    6ccc:	0004      	movs	r4, r0
    6cce:	000d      	movs	r5, r1
    6cd0:	0016      	movs	r6, r2
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    6cd2:	0008      	movs	r0, r1
    6cd4:	4bae      	ldr	r3, [pc, #696]	; (6f90 <tc_init+0x2cc>)
    6cd6:	4798      	blx	r3
    6cd8:	4680      	mov	r8, r0
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC4};
#elif (SAML21J) || (SAMR34J) || (SAMR35J) || (WLR089U0)
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC2_GCLK_ID, TC3_GCLK_ID, TC4_GCLK_ID};
    6cda:	ab0c      	add	r3, sp, #48	; 0x30
    6cdc:	221b      	movs	r2, #27
    6cde:	701a      	strb	r2, [r3, #0]
    6ce0:	705a      	strb	r2, [r3, #1]
    6ce2:	3201      	adds	r2, #1
    6ce4:	709a      	strb	r2, [r3, #2]
    6ce6:	70da      	strb	r2, [r3, #3]
    6ce8:	3201      	adds	r2, #1
    6cea:	711a      	strb	r2, [r3, #4]
	/* Array of MCLK APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    6cec:	a902      	add	r1, sp, #8
    6cee:	4ba9      	ldr	r3, [pc, #676]	; (6f94 <tc_init+0x2d0>)
    6cf0:	3314      	adds	r3, #20
    6cf2:	000a      	movs	r2, r1
    6cf4:	cb83      	ldmia	r3!, {r0, r1, r7}
    6cf6:	c283      	stmia	r2!, {r0, r1, r7}
    6cf8:	cb83      	ldmia	r3!, {r0, r1, r7}
    6cfa:	c283      	stmia	r2!, {r0, r1, r7}
    6cfc:	cb83      	ldmia	r3!, {r0, r1, r7}
    6cfe:	c283      	stmia	r2!, {r0, r1, r7}
    6d00:	681b      	ldr	r3, [r3, #0]
    6d02:	6013      	str	r3, [r2, #0]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    6d04:	2300      	movs	r3, #0
    6d06:	60a3      	str	r3, [r4, #8]
    6d08:	60e3      	str	r3, [r4, #12]
    6d0a:	6123      	str	r3, [r4, #16]
    6d0c:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    6d0e:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    6d10:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    6d12:	4643      	mov	r3, r8
    6d14:	009a      	lsls	r2, r3, #2
    6d16:	4ba0      	ldr	r3, [pc, #640]	; (6f98 <tc_init+0x2d4>)
    6d18:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    6d1a:	6025      	str	r5, [r4, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    6d1c:	2334      	movs	r3, #52	; 0x34
    6d1e:	5cf3      	ldrb	r3, [r6, r3]
    6d20:	76a3      	strb	r3, [r4, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    6d22:	78f3      	ldrb	r3, [r6, #3]
    6d24:	2b08      	cmp	r3, #8
    6d26:	d008      	beq.n	6d3a <tc_init+0x76>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    6d28:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    6d2a:	682b      	ldr	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    6d2c:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    6d2e:	07db      	lsls	r3, r3, #31
    6d30:	d508      	bpl.n	6d44 <tc_init+0x80>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    6d32:	b00e      	add	sp, #56	; 0x38
    6d34:	bc04      	pop	{r2}
    6d36:	4690      	mov	r8, r2
    6d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    6d3a:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    6d3c:	4642      	mov	r2, r8
    6d3e:	07d2      	lsls	r2, r2, #31
    6d40:	d4f7      	bmi.n	6d32 <tc_init+0x6e>
    6d42:	e7f1      	b.n	6d28 <tc_init+0x64>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    6d44:	7aeb      	ldrb	r3, [r5, #11]
		return STATUS_ERR_DENIED;
    6d46:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    6d48:	079b      	lsls	r3, r3, #30
    6d4a:	d4f2      	bmi.n	6d32 <tc_init+0x6e>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    6d4c:	682b      	ldr	r3, [r5, #0]
    6d4e:	079b      	lsls	r3, r3, #30
    6d50:	d4ef      	bmi.n	6d32 <tc_init+0x6e>
	if (config->pwm_channel[0].enabled) {
    6d52:	7c33      	ldrb	r3, [r6, #16]
    6d54:	2b00      	cmp	r3, #0
    6d56:	d112      	bne.n	6d7e <tc_init+0xba>
	if (config->pwm_channel[1].enabled) {
    6d58:	7f33      	ldrb	r3, [r6, #28]
    6d5a:	2b00      	cmp	r3, #0
    6d5c:	d11b      	bne.n	6d96 <tc_init+0xd2>
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    6d5e:	4643      	mov	r3, r8
    6d60:	005a      	lsls	r2, r3, #1
    6d62:	a902      	add	r1, sp, #8
    6d64:	1c53      	adds	r3, r2, #1
    6d66:	009b      	lsls	r3, r3, #2
    6d68:	5858      	ldr	r0, [r3, r1]
    6d6a:	4643      	mov	r3, r8
    6d6c:	00db      	lsls	r3, r3, #3
    6d6e:	585b      	ldr	r3, [r3, r1]
	switch (bus) {
    6d70:	b2d9      	uxtb	r1, r3
    6d72:	2904      	cmp	r1, #4
    6d74:	d823      	bhi.n	6dbe <tc_init+0xfa>
    6d76:	008b      	lsls	r3, r1, #2
    6d78:	4988      	ldr	r1, [pc, #544]	; (6f9c <tc_init+0x2d8>)
    6d7a:	58cb      	ldr	r3, [r1, r3]
    6d7c:	469f      	mov	pc, r3
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6d7e:	a901      	add	r1, sp, #4
    6d80:	2301      	movs	r3, #1
    6d82:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    6d84:	2200      	movs	r2, #0
    6d86:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    6d88:	7e32      	ldrb	r2, [r6, #24]
    6d8a:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    6d8c:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    6d8e:	7d30      	ldrb	r0, [r6, #20]
    6d90:	4b83      	ldr	r3, [pc, #524]	; (6fa0 <tc_init+0x2dc>)
    6d92:	4798      	blx	r3
    6d94:	e7e0      	b.n	6d58 <tc_init+0x94>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6d96:	a901      	add	r1, sp, #4
    6d98:	2301      	movs	r3, #1
    6d9a:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    6d9c:	2200      	movs	r2, #0
    6d9e:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    6da0:	3224      	adds	r2, #36	; 0x24
    6da2:	18b2      	adds	r2, r6, r2
    6da4:	7812      	ldrb	r2, [r2, #0]
    6da6:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    6da8:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    6daa:	331f      	adds	r3, #31
    6dac:	18f3      	adds	r3, r6, r3
    6dae:	7818      	ldrb	r0, [r3, #0]
    6db0:	4b7b      	ldr	r3, [pc, #492]	; (6fa0 <tc_init+0x2dc>)
    6db2:	4798      	blx	r3
    6db4:	e7d3      	b.n	6d5e <tc_init+0x9a>
			MCLK->APBAMASK.reg |= mask;
    6db6:	497b      	ldr	r1, [pc, #492]	; (6fa4 <tc_init+0x2e0>)
    6db8:	694b      	ldr	r3, [r1, #20]
    6dba:	4318      	orrs	r0, r3
    6dbc:	6148      	str	r0, [r1, #20]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    6dbe:	78f3      	ldrb	r3, [r6, #3]
    6dc0:	2b08      	cmp	r3, #8
    6dc2:	d100      	bne.n	6dc6 <tc_init+0x102>
    6dc4:	e086      	b.n	6ed4 <tc_init+0x210>
	gclk_chan_config.source_generator = config->clock_source;
    6dc6:	7833      	ldrb	r3, [r6, #0]
    6dc8:	466a      	mov	r2, sp
    6dca:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    6dcc:	ab0c      	add	r3, sp, #48	; 0x30
    6dce:	4642      	mov	r2, r8
    6dd0:	5c9f      	ldrb	r7, [r3, r2]
    6dd2:	4669      	mov	r1, sp
    6dd4:	0038      	movs	r0, r7
    6dd6:	4b74      	ldr	r3, [pc, #464]	; (6fa8 <tc_init+0x2e4>)
    6dd8:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    6dda:	0038      	movs	r0, r7
    6ddc:	4b73      	ldr	r3, [pc, #460]	; (6fac <tc_init+0x2e8>)
    6dde:	4798      	blx	r3
			(uint32_t)config->counter_size |
    6de0:	78f3      	ldrb	r3, [r6, #3]
    6de2:	79f2      	ldrb	r2, [r6, #7]
    6de4:	4313      	orrs	r3, r2
			(uint32_t)config->clock_prescaler;
    6de6:	88b2      	ldrh	r2, [r6, #4]
	ctrla_tmp =
    6de8:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    6dea:	7a72      	ldrb	r2, [r6, #9]
    6dec:	2a00      	cmp	r2, #0
    6dee:	d002      	beq.n	6df6 <tc_init+0x132>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    6df0:	2280      	movs	r2, #128	; 0x80
    6df2:	0252      	lsls	r2, r2, #9
    6df4:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    6df6:	7ab2      	ldrb	r2, [r6, #10]
    6df8:	2a00      	cmp	r2, #0
    6dfa:	d002      	beq.n	6e02 <tc_init+0x13e>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    6dfc:	2280      	movs	r2, #128	; 0x80
    6dfe:	0292      	lsls	r2, r2, #10
    6e00:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    6e02:	7af2      	ldrb	r2, [r6, #11]
    6e04:	2a00      	cmp	r2, #0
    6e06:	d002      	beq.n	6e0e <tc_init+0x14a>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    6e08:	2280      	movs	r2, #128	; 0x80
    6e0a:	0352      	lsls	r2, r2, #13
    6e0c:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    6e0e:	7b32      	ldrb	r2, [r6, #12]
    6e10:	2a00      	cmp	r2, #0
    6e12:	d002      	beq.n	6e1a <tc_init+0x156>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    6e14:	2280      	movs	r2, #128	; 0x80
    6e16:	0392      	lsls	r2, r2, #14
    6e18:	4313      	orrs	r3, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    6e1a:	7871      	ldrb	r1, [r6, #1]
    6e1c:	0189      	lsls	r1, r1, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    6e1e:	78b2      	ldrb	r2, [r6, #2]
    6e20:	01d2      	lsls	r2, r2, #7
    6e22:	4311      	orrs	r1, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    6e24:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6e26:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	return (tc_module->SYNCBUSY.reg);
    6e28:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    6e2a:	2b00      	cmp	r3, #0
    6e2c:	d1fc      	bne.n	6e28 <tc_init+0x164>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    6e2e:	6029      	str	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6e30:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6e32:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    6e34:	2b00      	cmp	r3, #0
    6e36:	d1fc      	bne.n	6e32 <tc_init+0x16e>
	hw->COUNT8.WAVE.reg = config->wave_generation;
    6e38:	79b3      	ldrb	r3, [r6, #6]
    6e3a:	732b      	strb	r3, [r5, #12]
	if (config->oneshot) {
    6e3c:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    6e3e:	1e4b      	subs	r3, r1, #1
    6e40:	4199      	sbcs	r1, r3
    6e42:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    6e44:	7bb3      	ldrb	r3, [r6, #14]
    6e46:	2b00      	cmp	r3, #0
    6e48:	d001      	beq.n	6e4e <tc_init+0x18a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    6e4a:	2301      	movs	r3, #1
    6e4c:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6e4e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6e50:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    6e52:	2b00      	cmp	r3, #0
    6e54:	d1fc      	bne.n	6e50 <tc_init+0x18c>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    6e56:	33ff      	adds	r3, #255	; 0xff
    6e58:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    6e5a:	2900      	cmp	r1, #0
    6e5c:	d004      	beq.n	6e68 <tc_init+0x1a4>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6e5e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6e60:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
    6e62:	2b00      	cmp	r3, #0
    6e64:	d1fc      	bne.n	6e60 <tc_init+0x19c>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    6e66:	7169      	strb	r1, [r5, #5]
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    6e68:	7a33      	ldrb	r3, [r6, #8]
    6e6a:	736b      	strb	r3, [r5, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6e6c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6e6e:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    6e70:	2b00      	cmp	r3, #0
    6e72:	d1fc      	bne.n	6e6e <tc_init+0x1aa>
	switch (module_inst->counter_size) {
    6e74:	7923      	ldrb	r3, [r4, #4]
    6e76:	2b04      	cmp	r3, #4
    6e78:	d059      	beq.n	6f2e <tc_init+0x26a>
    6e7a:	2b08      	cmp	r3, #8
    6e7c:	d074      	beq.n	6f68 <tc_init+0x2a4>
	return STATUS_ERR_INVALID_ARG;
    6e7e:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    6e80:	2b00      	cmp	r3, #0
    6e82:	d000      	beq.n	6e86 <tc_init+0x1c2>
    6e84:	e755      	b.n	6d32 <tc_init+0x6e>
    6e86:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6e88:	2b00      	cmp	r3, #0
    6e8a:	d1fc      	bne.n	6e86 <tc_init+0x1c2>
				= config->counter_16_bit.value;
    6e8c:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    6e8e:	82ab      	strh	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6e90:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6e92:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6e94:	2b00      	cmp	r3, #0
    6e96:	d1fc      	bne.n	6e92 <tc_init+0x1ce>
					config->counter_16_bit.compare_capture_channel[0];
    6e98:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    6e9a:	83ab      	strh	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6e9c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6e9e:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6ea0:	2b00      	cmp	r3, #0
    6ea2:	d1fc      	bne.n	6e9e <tc_init+0x1da>
					config->counter_16_bit.compare_capture_channel[1];
    6ea4:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    6ea6:	83eb      	strh	r3, [r5, #30]
			return STATUS_OK;
    6ea8:	2000      	movs	r0, #0
    6eaa:	e742      	b.n	6d32 <tc_init+0x6e>
			MCLK->APBBMASK.reg |= mask;
    6eac:	493d      	ldr	r1, [pc, #244]	; (6fa4 <tc_init+0x2e0>)
    6eae:	698b      	ldr	r3, [r1, #24]
    6eb0:	4318      	orrs	r0, r3
    6eb2:	6188      	str	r0, [r1, #24]
    6eb4:	e783      	b.n	6dbe <tc_init+0xfa>
			MCLK->APBCMASK.reg |= mask;
    6eb6:	493b      	ldr	r1, [pc, #236]	; (6fa4 <tc_init+0x2e0>)
    6eb8:	69cb      	ldr	r3, [r1, #28]
    6eba:	4318      	orrs	r0, r3
    6ebc:	61c8      	str	r0, [r1, #28]
    6ebe:	e77e      	b.n	6dbe <tc_init+0xfa>
			MCLK->APBDMASK.reg |= mask;
    6ec0:	4938      	ldr	r1, [pc, #224]	; (6fa4 <tc_init+0x2e0>)
    6ec2:	6a0b      	ldr	r3, [r1, #32]
    6ec4:	4318      	orrs	r0, r3
    6ec6:	6208      	str	r0, [r1, #32]
    6ec8:	e779      	b.n	6dbe <tc_init+0xfa>
			MCLK->APBEMASK.reg |= mask;
    6eca:	4b36      	ldr	r3, [pc, #216]	; (6fa4 <tc_init+0x2e0>)
    6ecc:	6a59      	ldr	r1, [r3, #36]	; 0x24
    6ece:	4308      	orrs	r0, r1
    6ed0:	6258      	str	r0, [r3, #36]	; 0x24
    6ed2:	e774      	b.n	6dbe <tc_init+0xfa>
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    6ed4:	4643      	mov	r3, r8
    6ed6:	3301      	adds	r3, #1
    6ed8:	2b04      	cmp	r3, #4
    6eda:	dd00      	ble.n	6ede <tc_init+0x21a>
    6edc:	e773      	b.n	6dc6 <tc_init+0x102>
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    6ede:	ab02      	add	r3, sp, #8
    6ee0:	1cd1      	adds	r1, r2, #3
    6ee2:	0089      	lsls	r1, r1, #2
    6ee4:	58c9      	ldr	r1, [r1, r3]
    6ee6:	3202      	adds	r2, #2
    6ee8:	0092      	lsls	r2, r2, #2
    6eea:	58d3      	ldr	r3, [r2, r3]
	switch (bus) {
    6eec:	b2da      	uxtb	r2, r3
    6eee:	2a04      	cmp	r2, #4
    6ef0:	d900      	bls.n	6ef4 <tc_init+0x230>
    6ef2:	e768      	b.n	6dc6 <tc_init+0x102>
    6ef4:	0093      	lsls	r3, r2, #2
    6ef6:	4a2e      	ldr	r2, [pc, #184]	; (6fb0 <tc_init+0x2ec>)
    6ef8:	58d3      	ldr	r3, [r2, r3]
    6efa:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    6efc:	4a29      	ldr	r2, [pc, #164]	; (6fa4 <tc_init+0x2e0>)
    6efe:	6953      	ldr	r3, [r2, #20]
    6f00:	4319      	orrs	r1, r3
    6f02:	6151      	str	r1, [r2, #20]
    6f04:	e75f      	b.n	6dc6 <tc_init+0x102>
			MCLK->APBBMASK.reg |= mask;
    6f06:	4a27      	ldr	r2, [pc, #156]	; (6fa4 <tc_init+0x2e0>)
    6f08:	6993      	ldr	r3, [r2, #24]
    6f0a:	4319      	orrs	r1, r3
    6f0c:	6191      	str	r1, [r2, #24]
    6f0e:	e75a      	b.n	6dc6 <tc_init+0x102>
			MCLK->APBCMASK.reg |= mask;
    6f10:	4a24      	ldr	r2, [pc, #144]	; (6fa4 <tc_init+0x2e0>)
    6f12:	69d3      	ldr	r3, [r2, #28]
    6f14:	4319      	orrs	r1, r3
    6f16:	61d1      	str	r1, [r2, #28]
    6f18:	e755      	b.n	6dc6 <tc_init+0x102>
			MCLK->APBDMASK.reg |= mask;
    6f1a:	4a22      	ldr	r2, [pc, #136]	; (6fa4 <tc_init+0x2e0>)
    6f1c:	6a13      	ldr	r3, [r2, #32]
    6f1e:	4319      	orrs	r1, r3
    6f20:	6211      	str	r1, [r2, #32]
    6f22:	e750      	b.n	6dc6 <tc_init+0x102>
			MCLK->APBEMASK.reg |= mask;
    6f24:	4b1f      	ldr	r3, [pc, #124]	; (6fa4 <tc_init+0x2e0>)
    6f26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    6f28:	4311      	orrs	r1, r2
    6f2a:	6259      	str	r1, [r3, #36]	; 0x24
    6f2c:	e74b      	b.n	6dc6 <tc_init+0x102>
    6f2e:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6f30:	2b00      	cmp	r3, #0
    6f32:	d1fc      	bne.n	6f2e <tc_init+0x26a>
					config->counter_8_bit.value;
    6f34:	3328      	adds	r3, #40	; 0x28
    6f36:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    6f38:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6f3a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6f3c:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6f3e:	2b00      	cmp	r3, #0
    6f40:	d1fc      	bne.n	6f3c <tc_init+0x278>
					config->counter_8_bit.period;
    6f42:	3329      	adds	r3, #41	; 0x29
    6f44:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    6f46:	76eb      	strb	r3, [r5, #27]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6f48:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6f4a:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6f4c:	2b00      	cmp	r3, #0
    6f4e:	d1fc      	bne.n	6f4a <tc_init+0x286>
					config->counter_8_bit.compare_capture_channel[0];
    6f50:	332a      	adds	r3, #42	; 0x2a
    6f52:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    6f54:	772b      	strb	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6f56:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6f58:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6f5a:	2b00      	cmp	r3, #0
    6f5c:	d1fc      	bne.n	6f58 <tc_init+0x294>
					config->counter_8_bit.compare_capture_channel[1];
    6f5e:	332b      	adds	r3, #43	; 0x2b
    6f60:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    6f62:	776b      	strb	r3, [r5, #29]
			return STATUS_OK;
    6f64:	2000      	movs	r0, #0
    6f66:	e6e4      	b.n	6d32 <tc_init+0x6e>
    6f68:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6f6a:	2b00      	cmp	r3, #0
    6f6c:	d1fc      	bne.n	6f68 <tc_init+0x2a4>
				= config->counter_32_bit.value;
    6f6e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    6f70:	616b      	str	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6f72:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6f74:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6f76:	2b00      	cmp	r3, #0
    6f78:	d1fc      	bne.n	6f74 <tc_init+0x2b0>
			hw->COUNT32.CC[0].reg =
    6f7a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    6f7c:	61eb      	str	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6f7e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6f80:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6f82:	2b00      	cmp	r3, #0
    6f84:	d1fc      	bne.n	6f80 <tc_init+0x2bc>
					config->counter_32_bit.compare_capture_channel[1];
    6f86:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    6f88:	622b      	str	r3, [r5, #32]
			return STATUS_OK;
    6f8a:	2000      	movs	r0, #0
    6f8c:	e6d1      	b.n	6d32 <tc_init+0x6e>
    6f8e:	46c0      	nop			; (mov r8, r8)
    6f90:	00006c89 	.word	0x00006c89
    6f94:	000180f0 	.word	0x000180f0
    6f98:	20001f44 	.word	0x20001f44
    6f9c:	000180c8 	.word	0x000180c8
    6fa0:	00006b61 	.word	0x00006b61
    6fa4:	40000400 	.word	0x40000400
    6fa8:	00006a65 	.word	0x00006a65
    6fac:	000069f5 	.word	0x000069f5
    6fb0:	000180dc 	.word	0x000180dc

00006fb4 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6fb4:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    6fb6:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    6fb8:	2b00      	cmp	r3, #0
    6fba:	d1fc      	bne.n	6fb6 <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    6fbc:	7113      	strb	r3, [r2, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6fbe:	6801      	ldr	r1, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    6fc0:	690b      	ldr	r3, [r1, #16]

	while (tc_is_syncing(module_inst)) {
    6fc2:	2b00      	cmp	r3, #0
    6fc4:	d1fc      	bne.n	6fc0 <tc_get_count_value+0xc>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_READSYNC_Val);
    6fc6:	3380      	adds	r3, #128	; 0x80
    6fc8:	7153      	strb	r3, [r2, #5]
#if (SAMC20) || (SAMC21) || (SAML21) || (SAML22) || (SAMR30) || (SAMR34) || (WLR089)
	/* wait for the CMD bits in CTRLBSET to be cleared, meaning the CMD has been executed */
	while(tc_module->CTRLBSET.reg & TC_CTRLBSET_CMD_READSYNC);	
    6fca:	7953      	ldrb	r3, [r2, #5]
    6fcc:	b25b      	sxtb	r3, r3
    6fce:	2b00      	cmp	r3, #0
    6fd0:	dbfb      	blt.n	6fca <tc_get_count_value+0x16>

	/* Read synchronization */
	tc_sync_read_count(module_inst);
	
	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    6fd2:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    6fd4:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    6fd6:	2b00      	cmp	r3, #0
    6fd8:	d1fc      	bne.n	6fd4 <tc_get_count_value+0x20>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    6fda:	7903      	ldrb	r3, [r0, #4]
    6fdc:	2b04      	cmp	r3, #4
    6fde:	d005      	beq.n	6fec <tc_get_count_value+0x38>
    6fe0:	2b08      	cmp	r3, #8
    6fe2:	d009      	beq.n	6ff8 <tc_get_count_value+0x44>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    6fe4:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    6fe6:	2b00      	cmp	r3, #0
    6fe8:	d003      	beq.n	6ff2 <tc_get_count_value+0x3e>
}
    6fea:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    6fec:	7d10      	ldrb	r0, [r2, #20]
    6fee:	b2c0      	uxtb	r0, r0
    6ff0:	e7fb      	b.n	6fea <tc_get_count_value+0x36>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    6ff2:	8a90      	ldrh	r0, [r2, #20]
    6ff4:	b280      	uxth	r0, r0
    6ff6:	e7f8      	b.n	6fea <tc_get_count_value+0x36>
			return tc_module->COUNT32.COUNT.reg;
    6ff8:	6950      	ldr	r0, [r2, #20]
    6ffa:	e7f6      	b.n	6fea <tc_get_count_value+0x36>

00006ffc <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    6ffc:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(compare);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    6ffe:	6804      	ldr	r4, [r0, #0]
    7000:	6923      	ldr	r3, [r4, #16]

	while (tc_is_syncing(module_inst)) {
    7002:	2b00      	cmp	r3, #0
    7004:	d1fc      	bne.n	7000 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    7006:	7903      	ldrb	r3, [r0, #4]
    7008:	2b04      	cmp	r3, #4
    700a:	d006      	beq.n	701a <tc_set_compare_value+0x1e>
    700c:	2b08      	cmp	r3, #8
    700e:	d028      	beq.n	7062 <tc_set_compare_value+0x66>
    7010:	2b00      	cmp	r3, #0
    7012:	d013      	beq.n	703c <tc_set_compare_value+0x40>
				}
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    7014:	2317      	movs	r3, #23
}
    7016:	0018      	movs	r0, r3
    7018:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    701a:	2317      	movs	r3, #23
			if (channel_index <
    701c:	2901      	cmp	r1, #1
    701e:	d8fa      	bhi.n	7016 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    7020:	7e83      	ldrb	r3, [r0, #26]
    7022:	2b00      	cmp	r3, #0
    7024:	d005      	beq.n	7032 <tc_set_compare_value+0x36>
							(uint8_t)compare;
    7026:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CCBUF[channel_index].reg =
    7028:	1861      	adds	r1, r4, r1
    702a:	3130      	adds	r1, #48	; 0x30
    702c:	700a      	strb	r2, [r1, #0]
				return STATUS_OK;
    702e:	2300      	movs	r3, #0
    7030:	e7f1      	b.n	7016 <tc_set_compare_value+0x1a>
							(uint8_t)compare;
    7032:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CC[channel_index].reg  =
    7034:	1864      	adds	r4, r4, r1
    7036:	7722      	strb	r2, [r4, #28]
				return STATUS_OK;
    7038:	2300      	movs	r3, #0
    703a:	e7ec      	b.n	7016 <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    703c:	2317      	movs	r3, #23
			if (channel_index <
    703e:	2901      	cmp	r1, #1
    7040:	d8e9      	bhi.n	7016 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    7042:	7e83      	ldrb	r3, [r0, #26]
    7044:	2b00      	cmp	r3, #0
    7046:	d005      	beq.n	7054 <tc_set_compare_value+0x58>
							(uint16_t)compare;
    7048:	b292      	uxth	r2, r2
					tc_module->COUNT16.CCBUF[channel_index].reg =
    704a:	3118      	adds	r1, #24
    704c:	0049      	lsls	r1, r1, #1
    704e:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    7050:	2300      	movs	r3, #0
    7052:	e7e0      	b.n	7016 <tc_set_compare_value+0x1a>
							(uint16_t)compare;
    7054:	b292      	uxth	r2, r2
					tc_module->COUNT16.CC[channel_index].reg =
    7056:	310c      	adds	r1, #12
    7058:	0049      	lsls	r1, r1, #1
    705a:	1864      	adds	r4, r4, r1
    705c:	80a2      	strh	r2, [r4, #4]
				return STATUS_OK;
    705e:	2300      	movs	r3, #0
    7060:	e7d9      	b.n	7016 <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    7062:	2317      	movs	r3, #23
			if (channel_index <
    7064:	2901      	cmp	r1, #1
    7066:	d8d6      	bhi.n	7016 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    7068:	7e83      	ldrb	r3, [r0, #26]
    706a:	2b00      	cmp	r3, #0
    706c:	d105      	bne.n	707a <tc_set_compare_value+0x7e>
					tc_module->COUNT32.CC[channel_index].reg =
    706e:	3106      	adds	r1, #6
    7070:	0089      	lsls	r1, r1, #2
    7072:	1864      	adds	r4, r4, r1
    7074:	6062      	str	r2, [r4, #4]
				return STATUS_OK;
    7076:	2300      	movs	r3, #0
    7078:	e7cd      	b.n	7016 <tc_set_compare_value+0x1a>
					tc_module->COUNT32.CCBUF[channel_index].reg =
    707a:	310c      	adds	r1, #12
    707c:	0089      	lsls	r1, r1, #2
    707e:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    7080:	2300      	movs	r3, #0
    7082:	e7c8      	b.n	7016 <tc_set_compare_value+0x1a>

00007084 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
    7084:	b510      	push	{r4, lr}
 */
static inline void wdt_clear_early_warning(void)
{
	Wdt *const WDT_module = WDT;

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
    7086:	2201      	movs	r2, #1
    7088:	4b03      	ldr	r3, [pc, #12]	; (7098 <WDT_Handler+0x14>)
    708a:	719a      	strb	r2, [r3, #6]
	wdt_clear_early_warning();

	if (wdt_early_warning_callback) {
    708c:	4b03      	ldr	r3, [pc, #12]	; (709c <WDT_Handler+0x18>)
    708e:	681b      	ldr	r3, [r3, #0]
    7090:	2b00      	cmp	r3, #0
    7092:	d000      	beq.n	7096 <WDT_Handler+0x12>
		wdt_early_warning_callback();
    7094:	4798      	blx	r3
	}
}
    7096:	bd10      	pop	{r4, pc}
    7098:	40001c00 	.word	0x40001c00
    709c:	20001f58 	.word	0x20001f58

000070a0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    70a0:	e7fe      	b.n	70a0 <Dummy_Handler>
    70a2:	Address 0x000070a2 is out of bounds.


000070a4 <Reset_Handler>:
{
    70a4:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    70a6:	4a1a      	ldr	r2, [pc, #104]	; (7110 <Reset_Handler+0x6c>)
    70a8:	4b1a      	ldr	r3, [pc, #104]	; (7114 <Reset_Handler+0x70>)
    70aa:	429a      	cmp	r2, r3
    70ac:	d011      	beq.n	70d2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    70ae:	001a      	movs	r2, r3
    70b0:	4b19      	ldr	r3, [pc, #100]	; (7118 <Reset_Handler+0x74>)
    70b2:	429a      	cmp	r2, r3
    70b4:	d20d      	bcs.n	70d2 <Reset_Handler+0x2e>
    70b6:	4a19      	ldr	r2, [pc, #100]	; (711c <Reset_Handler+0x78>)
    70b8:	3303      	adds	r3, #3
    70ba:	1a9b      	subs	r3, r3, r2
    70bc:	089b      	lsrs	r3, r3, #2
    70be:	3301      	adds	r3, #1
    70c0:	009b      	lsls	r3, r3, #2
    70c2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    70c4:	4813      	ldr	r0, [pc, #76]	; (7114 <Reset_Handler+0x70>)
    70c6:	4912      	ldr	r1, [pc, #72]	; (7110 <Reset_Handler+0x6c>)
    70c8:	588c      	ldr	r4, [r1, r2]
    70ca:	5084      	str	r4, [r0, r2]
    70cc:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    70ce:	429a      	cmp	r2, r3
    70d0:	d1fa      	bne.n	70c8 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    70d2:	4a13      	ldr	r2, [pc, #76]	; (7120 <Reset_Handler+0x7c>)
    70d4:	4b13      	ldr	r3, [pc, #76]	; (7124 <Reset_Handler+0x80>)
    70d6:	429a      	cmp	r2, r3
    70d8:	d20a      	bcs.n	70f0 <Reset_Handler+0x4c>
    70da:	43d3      	mvns	r3, r2
    70dc:	4911      	ldr	r1, [pc, #68]	; (7124 <Reset_Handler+0x80>)
    70de:	185b      	adds	r3, r3, r1
    70e0:	2103      	movs	r1, #3
    70e2:	438b      	bics	r3, r1
    70e4:	3304      	adds	r3, #4
    70e6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    70e8:	2100      	movs	r1, #0
    70ea:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    70ec:	4293      	cmp	r3, r2
    70ee:	d1fc      	bne.n	70ea <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    70f0:	4a0d      	ldr	r2, [pc, #52]	; (7128 <Reset_Handler+0x84>)
    70f2:	21ff      	movs	r1, #255	; 0xff
    70f4:	4b0d      	ldr	r3, [pc, #52]	; (712c <Reset_Handler+0x88>)
    70f6:	438b      	bics	r3, r1
    70f8:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    70fa:	4a0d      	ldr	r2, [pc, #52]	; (7130 <Reset_Handler+0x8c>)
    70fc:	6853      	ldr	r3, [r2, #4]
    70fe:	397f      	subs	r1, #127	; 0x7f
    7100:	430b      	orrs	r3, r1
    7102:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    7104:	4b0b      	ldr	r3, [pc, #44]	; (7134 <Reset_Handler+0x90>)
    7106:	4798      	blx	r3
        main();
    7108:	4b0b      	ldr	r3, [pc, #44]	; (7138 <Reset_Handler+0x94>)
    710a:	4798      	blx	r3
    710c:	e7fe      	b.n	710c <Reset_Handler+0x68>
    710e:	46c0      	nop			; (mov r8, r8)
    7110:	000192f4 	.word	0x000192f4
    7114:	20000000 	.word	0x20000000
    7118:	20000084 	.word	0x20000084
    711c:	20000004 	.word	0x20000004
    7120:	20000088 	.word	0x20000088
    7124:	200034ec 	.word	0x200034ec
    7128:	e000ed00 	.word	0xe000ed00
    712c:	00000000 	.word	0x00000000
    7130:	41004000 	.word	0x41004000
    7134:	00016be1 	.word	0x00016be1
    7138:	00007a51 	.word	0x00007a51

0000713c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    713c:	b5f0      	push	{r4, r5, r6, r7, lr}
    713e:	46c6      	mov	lr, r8
    7140:	b500      	push	{lr}
    7142:	000c      	movs	r4, r1
    7144:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    7146:	2800      	cmp	r0, #0
    7148:	d10f      	bne.n	716a <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    714a:	2a00      	cmp	r2, #0
    714c:	dd11      	ble.n	7172 <_read+0x36>
    714e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    7150:	4e09      	ldr	r6, [pc, #36]	; (7178 <_read+0x3c>)
    7152:	4d0a      	ldr	r5, [pc, #40]	; (717c <_read+0x40>)
    7154:	6830      	ldr	r0, [r6, #0]
    7156:	0021      	movs	r1, r4
    7158:	682b      	ldr	r3, [r5, #0]
    715a:	4798      	blx	r3
		ptr++;
    715c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    715e:	42bc      	cmp	r4, r7
    7160:	d1f8      	bne.n	7154 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    7162:	4640      	mov	r0, r8
    7164:	bc04      	pop	{r2}
    7166:	4690      	mov	r8, r2
    7168:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    716a:	2301      	movs	r3, #1
    716c:	425b      	negs	r3, r3
    716e:	4698      	mov	r8, r3
    7170:	e7f7      	b.n	7162 <_read+0x26>
	for (; len > 0; --len) {
    7172:	4680      	mov	r8, r0
    7174:	e7f5      	b.n	7162 <_read+0x26>
    7176:	46c0      	nop			; (mov r8, r8)
    7178:	20001f64 	.word	0x20001f64
    717c:	20001f5c 	.word	0x20001f5c

00007180 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    7180:	b5f0      	push	{r4, r5, r6, r7, lr}
    7182:	46c6      	mov	lr, r8
    7184:	b500      	push	{lr}
    7186:	000e      	movs	r6, r1
    7188:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    718a:	3801      	subs	r0, #1
    718c:	2802      	cmp	r0, #2
    718e:	d810      	bhi.n	71b2 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    7190:	2a00      	cmp	r2, #0
    7192:	d011      	beq.n	71b8 <_write+0x38>
    7194:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    7196:	4b0c      	ldr	r3, [pc, #48]	; (71c8 <_write+0x48>)
    7198:	4698      	mov	r8, r3
    719a:	4f0c      	ldr	r7, [pc, #48]	; (71cc <_write+0x4c>)
    719c:	4643      	mov	r3, r8
    719e:	6818      	ldr	r0, [r3, #0]
    71a0:	5d31      	ldrb	r1, [r6, r4]
    71a2:	683b      	ldr	r3, [r7, #0]
    71a4:	4798      	blx	r3
    71a6:	2800      	cmp	r0, #0
    71a8:	db08      	blt.n	71bc <_write+0x3c>
			return -1;
		}
		++nChars;
    71aa:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    71ac:	42a5      	cmp	r5, r4
    71ae:	d1f5      	bne.n	719c <_write+0x1c>
    71b0:	e006      	b.n	71c0 <_write+0x40>
		return -1;
    71b2:	2401      	movs	r4, #1
    71b4:	4264      	negs	r4, r4
    71b6:	e003      	b.n	71c0 <_write+0x40>
	for (; len != 0; --len) {
    71b8:	0014      	movs	r4, r2
    71ba:	e001      	b.n	71c0 <_write+0x40>
			return -1;
    71bc:	2401      	movs	r4, #1
    71be:	4264      	negs	r4, r4
	}
	return nChars;
}
    71c0:	0020      	movs	r0, r4
    71c2:	bc04      	pop	{r2}
    71c4:	4690      	mov	r8, r2
    71c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    71c8:	20001f64 	.word	0x20001f64
    71cc:	20001f60 	.word	0x20001f60

000071d0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    71d0:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    71d2:	4a06      	ldr	r2, [pc, #24]	; (71ec <_sbrk+0x1c>)
    71d4:	6812      	ldr	r2, [r2, #0]
    71d6:	2a00      	cmp	r2, #0
    71d8:	d004      	beq.n	71e4 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    71da:	4a04      	ldr	r2, [pc, #16]	; (71ec <_sbrk+0x1c>)
    71dc:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    71de:	18c3      	adds	r3, r0, r3
    71e0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    71e2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    71e4:	4902      	ldr	r1, [pc, #8]	; (71f0 <_sbrk+0x20>)
    71e6:	4a01      	ldr	r2, [pc, #4]	; (71ec <_sbrk+0x1c>)
    71e8:	6011      	str	r1, [r2, #0]
    71ea:	e7f6      	b.n	71da <_sbrk+0xa>
    71ec:	200000f0 	.word	0x200000f0
    71f0:	200054f0 	.word	0x200054f0

000071f4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    71f4:	2001      	movs	r0, #1
    71f6:	4240      	negs	r0, r0
    71f8:	4770      	bx	lr

000071fa <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    71fa:	2380      	movs	r3, #128	; 0x80
    71fc:	019b      	lsls	r3, r3, #6
    71fe:	604b      	str	r3, [r1, #4]

	return 0;
}
    7200:	2000      	movs	r0, #0
    7202:	4770      	bx	lr

00007204 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    7204:	2001      	movs	r0, #1
    7206:	4770      	bx	lr

00007208 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    7208:	2000      	movs	r0, #0
    720a:	4770      	bx	lr

0000720c <_exit>:

extern void _exit(int status)
{
	asm("BKPT #0");
    720c:	be00      	bkpt	0x0000
    720e:	e7fe      	b.n	720e <_exit+0x2>

00007210 <_kill>:
}

extern void _kill(int pid, int sig)
{
	return;
}
    7210:	4770      	bx	lr

00007212 <_getpid>:

extern int _getpid(void)
{
	return -1;
}
    7212:	2001      	movs	r0, #1
    7214:	4240      	negs	r0, r0
    7216:	4770      	bx	lr

00007218 <sal_FillSubKey>:
		}
	}
}

static void sal_FillSubKey( uint8_t *source, uint8_t *key, uint8_t size)
{
    7218:	b530      	push	{r4, r5, lr}
	uint8_t i = 0;
	uint8_t carry = 0;

	i=size;

	while(i--)
    721a:	1e53      	subs	r3, r2, #1
    721c:	b2db      	uxtb	r3, r3
    721e:	2a00      	cmp	r2, #0
    7220:	d00b      	beq.n	723a <sal_FillSubKey+0x22>
    7222:	2400      	movs	r4, #0
	{
		key[i] = (source[i] << 1) | carry;
    7224:	18c5      	adds	r5, r0, r3
    7226:	782a      	ldrb	r2, [r5, #0]
    7228:	0052      	lsls	r2, r2, #1
    722a:	4322      	orrs	r2, r4
    722c:	54ca      	strb	r2, [r1, r3]
		carry = !!(source[i] & 0x80);
    722e:	782c      	ldrb	r4, [r5, #0]
    7230:	09e4      	lsrs	r4, r4, #7
	while(i--)
    7232:	3b01      	subs	r3, #1
    7234:	b2db      	uxtb	r3, r3
    7236:	2bff      	cmp	r3, #255	; 0xff
    7238:	d1f4      	bne.n	7224 <sal_FillSubKey+0xc>
	}
}
    723a:	bd30      	pop	{r4, r5, pc}

0000723c <SAL_AESEncode>:
{
    723c:	b510      	push	{r4, lr}
    723e:	b084      	sub	sp, #16
    7240:	0004      	movs	r4, r0
    7242:	0011      	movs	r1, r2
	memcpy(useKey, key, sizeof(useKey));
    7244:	2210      	movs	r2, #16
    7246:	4668      	mov	r0, sp
    7248:	4b04      	ldr	r3, [pc, #16]	; (725c <SAL_AESEncode+0x20>)
    724a:	4798      	blx	r3
	AESEncode(buffer, useKey);
    724c:	4669      	mov	r1, sp
    724e:	0020      	movs	r0, r4
    7250:	4b03      	ldr	r3, [pc, #12]	; (7260 <SAL_AESEncode+0x24>)
    7252:	4798      	blx	r3
}
    7254:	2000      	movs	r0, #0
    7256:	b004      	add	sp, #16
    7258:	bd10      	pop	{r4, pc}
    725a:	46c0      	nop			; (mov r8, r8)
    725c:	00016c47 	.word	0x00016c47
    7260:	0000d161 	.word	0x0000d161

00007264 <SAL_DeriveSessionKey>:
{
    7264:	b510      	push	{r4, lr}
	sal_status = SAL_AESEncode(block, src_key, key);
    7266:	4b01      	ldr	r3, [pc, #4]	; (726c <SAL_DeriveSessionKey+0x8>)
    7268:	4798      	blx	r3
}
    726a:	bd10      	pop	{r4, pc}
    726c:	0000723d 	.word	0x0000723d

00007270 <SAL_Read>:
}
    7270:	2000      	movs	r0, #0
    7272:	4770      	bx	lr

00007274 <SAL_AESCmac>:
{
    7274:	b5f0      	push	{r4, r5, r6, r7, lr}
    7276:	46d6      	mov	lr, sl
    7278:	464f      	mov	r7, r9
    727a:	4646      	mov	r6, r8
    727c:	b5c0      	push	{r6, r7, lr}
    727e:	b0a4      	sub	sp, #144	; 0x90
    7280:	9001      	str	r0, [sp, #4]
    7282:	000f      	movs	r7, r1
    7284:	9102      	str	r1, [sp, #8]
    7286:	9203      	str	r2, [sp, #12]
    7288:	469a      	mov	sl, r3
    728a:	ab2c      	add	r3, sp, #176	; 0xb0
    728c:	881c      	ldrh	r4, [r3, #0]
	uint8_t const_Rb[16] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    728e:	ae08      	add	r6, sp, #32
    7290:	2210      	movs	r2, #16
    7292:	2100      	movs	r1, #0
    7294:	0030      	movs	r0, r6
    7296:	4d64      	ldr	r5, [pc, #400]	; (7428 <SAL_AESCmac+0x1b4>)
    7298:	47a8      	blx	r5
    729a:	2387      	movs	r3, #135	; 0x87
    729c:	73f3      	strb	r3, [r6, #15]
	memset(l, 0, sizeof(l));
    729e:	2210      	movs	r2, #16
    72a0:	2100      	movs	r1, #0
    72a2:	a804      	add	r0, sp, #16
    72a4:	47a8      	blx	r5
	SAL_AESEncode(l, key_type, key);
    72a6:	9a01      	ldr	r2, [sp, #4]
    72a8:	0039      	movs	r1, r7
    72aa:	a804      	add	r0, sp, #16
    72ac:	4b5f      	ldr	r3, [pc, #380]	; (742c <SAL_AESCmac+0x1b8>)
    72ae:	4798      	blx	r3
	if ( (l[0] & 0x80) == 0x00 )  // MSB( bufferLocal[0] ) is '0'
    72b0:	ab04      	add	r3, sp, #16
    72b2:	781b      	ldrb	r3, [r3, #0]
    72b4:	2b7f      	cmp	r3, #127	; 0x7f
    72b6:	d82d      	bhi.n	7314 <SAL_AESCmac+0xa0>
		sal_FillSubKey( l, k1, (sizeof(l) ) );
    72b8:	2210      	movs	r2, #16
    72ba:	a920      	add	r1, sp, #128	; 0x80
    72bc:	a804      	add	r0, sp, #16
    72be:	4b5c      	ldr	r3, [pc, #368]	; (7430 <SAL_AESCmac+0x1bc>)
    72c0:	4798      	blx	r3
	if ( (k1[0] & 0x80) == 0x00 )   // MSB( k1[0] ) is '0'
    72c2:	ab20      	add	r3, sp, #128	; 0x80
    72c4:	781b      	ldrb	r3, [r3, #0]
    72c6:	2b7f      	cmp	r3, #127	; 0x7f
    72c8:	d834      	bhi.n	7334 <SAL_AESCmac+0xc0>
		sal_FillSubKey( k1, k2, (sizeof(l)) );
    72ca:	2210      	movs	r2, #16
    72cc:	a91c      	add	r1, sp, #112	; 0x70
    72ce:	a820      	add	r0, sp, #128	; 0x80
    72d0:	4b57      	ldr	r3, [pc, #348]	; (7430 <SAL_AESCmac+0x1bc>)
    72d2:	4798      	blx	r3
	n = (size + 15) >> 4;
    72d4:	0023      	movs	r3, r4
    72d6:	330f      	adds	r3, #15
    72d8:	111d      	asrs	r5, r3, #4
    72da:	b2aa      	uxth	r2, r5
    72dc:	4690      	mov	r8, r2
	if (n == 0)
    72de:	2a00      	cmp	r2, #0
    72e0:	d038      	beq.n	7354 <SAL_AESCmac+0xe0>
	if ( flag == 1 )
    72e2:	0722      	lsls	r2, r4, #28
    72e4:	d138      	bne.n	7358 <SAL_AESCmac+0xe4>
		for (i=((n-1) << 4); i<(n << 4); i++)
    72e6:	4642      	mov	r2, r8
    72e8:	3a01      	subs	r2, #1
    72ea:	0112      	lsls	r2, r2, #4
    72ec:	b296      	uxth	r6, r2
    72ee:	4f51      	ldr	r7, [pc, #324]	; (7434 <SAL_AESCmac+0x1c0>)
    72f0:	401f      	ands	r7, r3
    72f2:	42be      	cmp	r6, r7
    72f4:	da54      	bge.n	73a0 <SAL_AESCmac+0x12c>
    72f6:	0033      	movs	r3, r6
			mLast[j] = input[i] ^ k1[j];
    72f8:	a910      	add	r1, sp, #64	; 0x40
    72fa:	aa20      	add	r2, sp, #128	; 0x80
    72fc:	1b98      	subs	r0, r3, r6
    72fe:	b280      	uxth	r0, r0
    7300:	4654      	mov	r4, sl
    7302:	5ce4      	ldrb	r4, [r4, r3]
    7304:	5c15      	ldrb	r5, [r2, r0]
    7306:	406c      	eors	r4, r5
    7308:	540c      	strb	r4, [r1, r0]
		for (i=((n-1) << 4); i<(n << 4); i++)
    730a:	3301      	adds	r3, #1
    730c:	b29b      	uxth	r3, r3
    730e:	42bb      	cmp	r3, r7
    7310:	dbf4      	blt.n	72fc <SAL_AESCmac+0x88>
    7312:	e045      	b.n	73a0 <SAL_AESCmac+0x12c>
		sal_FillSubKey( l, k1, (sizeof(l) ) );
    7314:	2210      	movs	r2, #16
    7316:	a920      	add	r1, sp, #128	; 0x80
    7318:	a804      	add	r0, sp, #16
    731a:	4b45      	ldr	r3, [pc, #276]	; (7430 <SAL_AESCmac+0x1bc>)
    731c:	4798      	blx	r3
    731e:	2300      	movs	r3, #0
			k1[i] ^= const_Rb[i];
    7320:	aa20      	add	r2, sp, #128	; 0x80
    7322:	a908      	add	r1, sp, #32
    7324:	5c98      	ldrb	r0, [r3, r2]
    7326:	5c5d      	ldrb	r5, [r3, r1]
    7328:	4068      	eors	r0, r5
    732a:	5498      	strb	r0, [r3, r2]
    732c:	3301      	adds	r3, #1
		for (i=0; i<sizeof(l); i++)
    732e:	2b10      	cmp	r3, #16
    7330:	d1f8      	bne.n	7324 <SAL_AESCmac+0xb0>
    7332:	e7c6      	b.n	72c2 <SAL_AESCmac+0x4e>
		sal_FillSubKey( k1, k2, (sizeof(l) ) );
    7334:	2210      	movs	r2, #16
    7336:	a91c      	add	r1, sp, #112	; 0x70
    7338:	a820      	add	r0, sp, #128	; 0x80
    733a:	4b3d      	ldr	r3, [pc, #244]	; (7430 <SAL_AESCmac+0x1bc>)
    733c:	4798      	blx	r3
    733e:	2300      	movs	r3, #0
			k2[i] = k2[i] ^ const_Rb[i];
    7340:	aa1c      	add	r2, sp, #112	; 0x70
    7342:	a908      	add	r1, sp, #32
    7344:	5c98      	ldrb	r0, [r3, r2]
    7346:	5c5d      	ldrb	r5, [r3, r1]
    7348:	4068      	eors	r0, r5
    734a:	5498      	strb	r0, [r3, r2]
    734c:	3301      	adds	r3, #1
		for (i=0; i<sizeof(l); i++)
    734e:	2b10      	cmp	r3, #16
    7350:	d1f8      	bne.n	7344 <SAL_AESCmac+0xd0>
    7352:	e7bf      	b.n	72d4 <SAL_AESCmac+0x60>
		n = 1;
    7354:	2301      	movs	r3, #1
    7356:	4698      	mov	r8, r3
		ptr = &input[size - (size%16)];
    7358:	230f      	movs	r3, #15
    735a:	0020      	movs	r0, r4
    735c:	4398      	bics	r0, r3
    735e:	2300      	movs	r3, #0
			if ( i < (size%16) )
    7360:	220f      	movs	r2, #15
    7362:	4014      	ands	r4, r2
					padded[i] = 0x00;
    7364:	a90c      	add	r1, sp, #48	; 0x30
    7366:	2700      	movs	r7, #0
					padded[i] = 0x80;
    7368:	2680      	movs	r6, #128	; 0x80
				padded[i] = ptr[i];
    736a:	4450      	add	r0, sl
    736c:	e005      	b.n	737a <SAL_AESCmac+0x106>
				if ( i == (size%16) )
    736e:	4294      	cmp	r4, r2
    7370:	d009      	beq.n	7386 <SAL_AESCmac+0x112>
					padded[i] = 0x00;
    7372:	545f      	strb	r7, [r3, r1]
    7374:	3301      	adds	r3, #1
		for (i=0; i<16; i++)
    7376:	2b10      	cmp	r3, #16
    7378:	d007      	beq.n	738a <SAL_AESCmac+0x116>
    737a:	b29a      	uxth	r2, r3
			if ( i < (size%16) )
    737c:	4294      	cmp	r4, r2
    737e:	d9f6      	bls.n	736e <SAL_AESCmac+0xfa>
				padded[i] = ptr[i];
    7380:	5cc2      	ldrb	r2, [r0, r3]
    7382:	545a      	strb	r2, [r3, r1]
    7384:	e7f6      	b.n	7374 <SAL_AESCmac+0x100>
					padded[i] = 0x80;
    7386:	545e      	strb	r6, [r3, r1]
    7388:	e7f4      	b.n	7374 <SAL_AESCmac+0x100>
    738a:	2300      	movs	r3, #0
			mLast[i] = padded[i] ^ k2[i];
    738c:	a810      	add	r0, sp, #64	; 0x40
    738e:	a90c      	add	r1, sp, #48	; 0x30
    7390:	aa1c      	add	r2, sp, #112	; 0x70
    7392:	5c5c      	ldrb	r4, [r3, r1]
    7394:	5c9d      	ldrb	r5, [r3, r2]
    7396:	406c      	eors	r4, r5
    7398:	541c      	strb	r4, [r3, r0]
    739a:	3301      	adds	r3, #1
		for (i=0; i<sizeof(mLast); i++)
    739c:	2b10      	cmp	r3, #16
    739e:	d1f8      	bne.n	7392 <SAL_AESCmac+0x11e>
	memset(x, 0, sizeof(x));
    73a0:	2210      	movs	r2, #16
    73a2:	2100      	movs	r1, #0
    73a4:	a818      	add	r0, sp, #96	; 0x60
    73a6:	4b20      	ldr	r3, [pc, #128]	; (7428 <SAL_AESCmac+0x1b4>)
    73a8:	4798      	blx	r3
	for (i=0; i<(n-1); i++)
    73aa:	2301      	movs	r3, #1
    73ac:	425b      	negs	r3, r3
    73ae:	4443      	add	r3, r8
    73b0:	4699      	mov	r9, r3
    73b2:	2000      	movs	r0, #0
    73b4:	2700      	movs	r7, #0
    73b6:	2b00      	cmp	r3, #0
    73b8:	dd1a      	ble.n	73f0 <SAL_AESCmac+0x17c>
			y[j] = x[j] ^ input[(i << 4)+j];
    73ba:	ad14      	add	r5, sp, #80	; 0x50
    73bc:	ac18      	add	r4, sp, #96	; 0x60
		memcpy(x, y, sizeof(y));
    73be:	4e1e      	ldr	r6, [pc, #120]	; (7438 <SAL_AESCmac+0x1c4>)
			y[j] = x[j] ^ input[(i << 4)+j];
    73c0:	0100      	lsls	r0, r0, #4
    73c2:	2300      	movs	r3, #0
    73c4:	4450      	add	r0, sl
    73c6:	5cc2      	ldrb	r2, [r0, r3]
    73c8:	5d19      	ldrb	r1, [r3, r4]
    73ca:	404a      	eors	r2, r1
    73cc:	555a      	strb	r2, [r3, r5]
    73ce:	3301      	adds	r3, #1
		for (j=0; j<16; j++)
    73d0:	2b10      	cmp	r3, #16
    73d2:	d1f8      	bne.n	73c6 <SAL_AESCmac+0x152>
		memcpy(x, y, sizeof(y));
    73d4:	2210      	movs	r2, #16
    73d6:	0029      	movs	r1, r5
    73d8:	0020      	movs	r0, r4
    73da:	47b0      	blx	r6
		SAL_AESEncode(x, key_type, key);
    73dc:	9a01      	ldr	r2, [sp, #4]
    73de:	9902      	ldr	r1, [sp, #8]
    73e0:	0020      	movs	r0, r4
    73e2:	4b12      	ldr	r3, [pc, #72]	; (742c <SAL_AESCmac+0x1b8>)
    73e4:	4798      	blx	r3
	for (i=0; i<(n-1); i++)
    73e6:	3701      	adds	r7, #1
    73e8:	b2bf      	uxth	r7, r7
    73ea:	0038      	movs	r0, r7
    73ec:	454f      	cmp	r7, r9
    73ee:	dbe7      	blt.n	73c0 <SAL_AESCmac+0x14c>
    73f0:	2300      	movs	r3, #0
		y[i] = x[i] ^ mLast[i];
    73f2:	ac14      	add	r4, sp, #80	; 0x50
    73f4:	a818      	add	r0, sp, #96	; 0x60
    73f6:	a910      	add	r1, sp, #64	; 0x40
    73f8:	5c1a      	ldrb	r2, [r3, r0]
    73fa:	5c5d      	ldrb	r5, [r3, r1]
    73fc:	406a      	eors	r2, r5
    73fe:	551a      	strb	r2, [r3, r4]
    7400:	3301      	adds	r3, #1
	for (i=0; i<sizeof(x); i++)
    7402:	2b10      	cmp	r3, #16
    7404:	d1f8      	bne.n	73f8 <SAL_AESCmac+0x184>
	SAL_AESEncode(y, key_type, key);
    7406:	9a01      	ldr	r2, [sp, #4]
    7408:	9902      	ldr	r1, [sp, #8]
    740a:	a814      	add	r0, sp, #80	; 0x50
    740c:	4b07      	ldr	r3, [pc, #28]	; (742c <SAL_AESCmac+0x1b8>)
    740e:	4798      	blx	r3
	memcpy(output, y, sizeof(y));
    7410:	2210      	movs	r2, #16
    7412:	a914      	add	r1, sp, #80	; 0x50
    7414:	9803      	ldr	r0, [sp, #12]
    7416:	4b08      	ldr	r3, [pc, #32]	; (7438 <SAL_AESCmac+0x1c4>)
    7418:	4798      	blx	r3
}
    741a:	2000      	movs	r0, #0
    741c:	b024      	add	sp, #144	; 0x90
    741e:	bc1c      	pop	{r2, r3, r4}
    7420:	4690      	mov	r8, r2
    7422:	4699      	mov	r9, r3
    7424:	46a2      	mov	sl, r4
    7426:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7428:	00016c59 	.word	0x00016c59
    742c:	0000723d 	.word	0x0000723d
    7430:	00007219 	.word	0x00007219
    7434:	000ffff0 	.word	0x000ffff0
    7438:	00016c47 	.word	0x00016c47

0000743c <DemoOutput_Greeting>:

bool PUSH_BUTTON_pressed;
MIWI_TICK PUSH_BUTTON_press_time;

void DemoOutput_Greeting(void)
{    
    743c:	b510      	push	{r4, lr}
		LCDDisplay((char *)"Simple LoRa P2P Demo on \n SAMR34 Node ", 0, true);
	#endif
#endif
    #if defined (ENABLE_CONSOLE)
        #if defined(PROTOCOL_P2P)
			printf("\n\r-----------------------------------------------------\n\r-----------------------------------------------------");
    743e:	480e      	ldr	r0, [pc, #56]	; (7478 <DemoOutput_Greeting+0x3c>)
    7440:	4c0e      	ldr	r4, [pc, #56]	; (747c <DemoOutput_Greeting+0x40>)
    7442:	47a0      	blx	r4
            printf("\r\nStarting Node 1 of Simple Demo for LoRa P2P Stack ...");  
    7444:	480e      	ldr	r0, [pc, #56]	; (7480 <DemoOutput_Greeting+0x44>)
    7446:	47a0      	blx	r4
        #endif
		#if defined(ENABLE_SLEEP_FEATURE)
			printf("\r\nReduced Function Device (RFD) operations") ;
		#else
			printf("\r\nFull Function Device (FFD) operations") ;
    7448:	480e      	ldr	r0, [pc, #56]	; (7484 <DemoOutput_Greeting+0x48>)
    744a:	47a0      	blx	r4
		#endif
        printf("\r\n     RF Transceiver: SX_1276");
    744c:	480e      	ldr	r0, [pc, #56]	; (7488 <DemoOutput_Greeting+0x4c>)
    744e:	47a0      	blx	r4
        printf("\r\n     Demo Instruction:");
    7450:	480e      	ldr	r0, [pc, #56]	; (748c <DemoOutput_Greeting+0x50>)
    7452:	47a0      	blx	r4
        printf("\r\n                     Power on the board until LED 1 lights up");
    7454:	480e      	ldr	r0, [pc, #56]	; (7490 <DemoOutput_Greeting+0x54>)
    7456:	47a0      	blx	r4
        printf("\r\n                     to indicate connecting with peer.");
    7458:	480e      	ldr	r0, [pc, #56]	; (7494 <DemoOutput_Greeting+0x58>)
    745a:	47a0      	blx	r4
        printf("\r\n                     Push Button 1 to broadcast message.");
    745c:	480e      	ldr	r0, [pc, #56]	; (7498 <DemoOutput_Greeting+0x5c>)
    745e:	47a0      	blx	r4
        printf("\r\n                     LED 1 will be toggled upon receiving messages. ");
    7460:	480e      	ldr	r0, [pc, #56]	; (749c <DemoOutput_Greeting+0x60>)
    7462:	47a0      	blx	r4
        printf("\r\n\r\n");		
    7464:	480e      	ldr	r0, [pc, #56]	; (74a0 <DemoOutput_Greeting+0x64>)
    7466:	4c0f      	ldr	r4, [pc, #60]	; (74a4 <DemoOutput_Greeting+0x68>)
    7468:	47a0      	blx	r4
		#ifdef PERIODIC_TX
			printf("Periodic Transmission = Enable\r\n") ;
		#else
			printf("Periodic Transmission = Disable\r\n") ;
    746a:	480f      	ldr	r0, [pc, #60]	; (74a8 <DemoOutput_Greeting+0x6c>)
    746c:	47a0      	blx	r4
		#endif
		#ifdef DUTY_CYCLING
			printf("Duty Cycling support = Enable\r\n") ;
		#else
			printf("Duty Cycling support = Disable\r\n") ;
    746e:	480f      	ldr	r0, [pc, #60]	; (74ac <DemoOutput_Greeting+0x70>)
    7470:	47a0      	blx	r4
		#endif
		#ifdef LBT_SUPPORT_ENABLED
			printf("LBT support = Enable\r\n") ;
		#else
			printf("LBT support = Disable\r\n") ;
    7472:	480f      	ldr	r0, [pc, #60]	; (74b0 <DemoOutput_Greeting+0x74>)
    7474:	47a0      	blx	r4
		#endif
    #endif 
}        
    7476:	bd10      	pop	{r4, pc}
    7478:	000181cc 	.word	0x000181cc
    747c:	00017201 	.word	0x00017201
    7480:	0001823c 	.word	0x0001823c
    7484:	00018274 	.word	0x00018274
    7488:	0001829c 	.word	0x0001829c
    748c:	000182bc 	.word	0x000182bc
    7490:	000182d8 	.word	0x000182d8
    7494:	00018318 	.word	0x00018318
    7498:	00018354 	.word	0x00018354
    749c:	00018390 	.word	0x00018390
    74a0:	000183d8 	.word	0x000183d8
    74a4:	0001731d 	.word	0x0001731d
    74a8:	000183dc 	.word	0x000183dc
    74ac:	00018400 	.word	0x00018400
    74b0:	00018420 	.word	0x00018420

000074b4 <DemoOutput_Channel>:
	LCDDisplay((char *)"SW: Use Nwk Freezer \nPress in 5 sec", 0, false);	
	delay_ms(1000);
#endif
}
void DemoOutput_Channel(uint8_t channel, uint8_t Step)
{
    74b4:	b570      	push	{r4, r5, r6, lr}
    74b6:	0004      	movs	r4, r0
    if( Step == 0 )
    74b8:	2900      	cmp	r1, #0
    74ba:	d009      	beq.n	74d0 <DemoOutput_Channel+0x1c>
#if defined (ENABLE_LCD)
        LCDDisplay((char *)"Connected Peer on \n Channel ", channel, true);
#endif
#if defined (ENABLE_CONSOLE)
        #if !defined(MIWIKIT)
        printf("\r\nConnected Peer on Channel ");
    74bc:	4809      	ldr	r0, [pc, #36]	; (74e4 <DemoOutput_Channel+0x30>)
    74be:	4d0a      	ldr	r5, [pc, #40]	; (74e8 <DemoOutput_Channel+0x34>)
    74c0:	47a8      	blx	r5
        printf("%d",channel);
    74c2:	0021      	movs	r1, r4
    74c4:	4809      	ldr	r0, [pc, #36]	; (74ec <DemoOutput_Channel+0x38>)
    74c6:	47a8      	blx	r5
        printf("\r\n");
    74c8:	4809      	ldr	r0, [pc, #36]	; (74f0 <DemoOutput_Channel+0x3c>)
    74ca:	4b0a      	ldr	r3, [pc, #40]	; (74f4 <DemoOutput_Channel+0x40>)
    74cc:	4798      	blx	r3
        #endif
#endif
    }
}    
    74ce:	bd70      	pop	{r4, r5, r6, pc}
        printf("\r\nConnecting Peer on Channel ");
    74d0:	4809      	ldr	r0, [pc, #36]	; (74f8 <DemoOutput_Channel+0x44>)
    74d2:	4d05      	ldr	r5, [pc, #20]	; (74e8 <DemoOutput_Channel+0x34>)
    74d4:	47a8      	blx	r5
        printf("%d",channel);
    74d6:	0021      	movs	r1, r4
    74d8:	4804      	ldr	r0, [pc, #16]	; (74ec <DemoOutput_Channel+0x38>)
    74da:	47a8      	blx	r5
        printf("\r\n");
    74dc:	4804      	ldr	r0, [pc, #16]	; (74f0 <DemoOutput_Channel+0x3c>)
    74de:	4b05      	ldr	r3, [pc, #20]	; (74f4 <DemoOutput_Channel+0x40>)
    74e0:	4798      	blx	r3
    74e2:	e7f4      	b.n	74ce <DemoOutput_Channel+0x1a>
    74e4:	00018164 	.word	0x00018164
    74e8:	00017201 	.word	0x00017201
    74ec:	00018160 	.word	0x00018160
    74f0:	00018734 	.word	0x00018734
    74f4:	0001731d 	.word	0x0001731d
    74f8:	00018140 	.word	0x00018140

000074fc <DemoOutput_Instruction>:
		LCDDisplay((char *)"SW     : Broadcast \nBUTTON1: Unicast", 0, false);
	#else
		LCDDisplay((char *)"SW: Broadcast", 0, false);
	#endif
#endif
}
    74fc:	4770      	bx	lr
    74fe:	Address 0x000074fe is out of bounds.


00007500 <DemoOutput_HandleMessage>:


void DemoOutput_HandleMessage(void)
{
    7500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;

    if( rxMessage.flags.bits.secEn )
    7502:	4b2a      	ldr	r3, [pc, #168]	; (75ac <DemoOutput_HandleMessage+0xac>)
    7504:	781b      	ldrb	r3, [r3, #0]
    7506:	071b      	lsls	r3, r3, #28
    7508:	d426      	bmi.n	7558 <DemoOutput_HandleMessage+0x58>
    {
        sio2host_tx((uint8_t *)"Secured ", sizeof("Secured "));
    }

    if( rxMessage.flags.bits.broadcast )
    750a:	4b28      	ldr	r3, [pc, #160]	; (75ac <DemoOutput_HandleMessage+0xac>)
    750c:	781b      	ldrb	r3, [r3, #0]
    750e:	079b      	lsls	r3, r3, #30
    7510:	d027      	beq.n	7562 <DemoOutput_HandleMessage+0x62>
    {
        sio2host_tx((uint8_t *)"Broadcast Packet with RSSI ", sizeof("Broadcast Packet with RSSI "));
    7512:	211c      	movs	r1, #28
    7514:	4826      	ldr	r0, [pc, #152]	; (75b0 <DemoOutput_HandleMessage+0xb0>)
    7516:	4b27      	ldr	r3, [pc, #156]	; (75b4 <DemoOutput_HandleMessage+0xb4>)
    7518:	4798      	blx	r3
    }
    else
    {
        sio2host_tx((uint8_t *)"Unicast Packet with RSSI ",sizeof("Unicast Packet with RSSI "));
    }
    printf("%02x", rxMessage.PacketRSSI);
    751a:	4c24      	ldr	r4, [pc, #144]	; (75ac <DemoOutput_HandleMessage+0xac>)
    751c:	7b61      	ldrb	r1, [r4, #13]
    751e:	4826      	ldr	r0, [pc, #152]	; (75b8 <DemoOutput_HandleMessage+0xb8>)
    7520:	4b26      	ldr	r3, [pc, #152]	; (75bc <DemoOutput_HandleMessage+0xbc>)
    7522:	4798      	blx	r3
    if( rxMessage.flags.bits.srcPrsnt )
    7524:	7823      	ldrb	r3, [r4, #0]
    7526:	065b      	lsls	r3, r3, #25
    7528:	d420      	bmi.n	756c <DemoOutput_HandleMessage+0x6c>
            {
                printf("%x", rxMessage.SourceAddress[MY_ADDRESS_LENGTH-1-i]);
            }    
        }
    }
    sio2host_tx((uint8_t *)": ",sizeof(": "));
    752a:	2103      	movs	r1, #3
    752c:	4824      	ldr	r0, [pc, #144]	; (75c0 <DemoOutput_HandleMessage+0xc0>)
    752e:	4b21      	ldr	r3, [pc, #132]	; (75b4 <DemoOutput_HandleMessage+0xb4>)
    7530:	4798      	blx	r3
    
    for(i = 0; i < rxMessage.PayloadSize; i++)
    7532:	4b1e      	ldr	r3, [pc, #120]	; (75ac <DemoOutput_HandleMessage+0xac>)
    7534:	7b1b      	ldrb	r3, [r3, #12]
    7536:	2b00      	cmp	r3, #0
    7538:	d00a      	beq.n	7550 <DemoOutput_HandleMessage+0x50>
    753a:	2400      	movs	r4, #0
    {
        sio2host_putchar(rxMessage.Payload[i]);
    753c:	4d1b      	ldr	r5, [pc, #108]	; (75ac <DemoOutput_HandleMessage+0xac>)
    753e:	4e21      	ldr	r6, [pc, #132]	; (75c4 <DemoOutput_HandleMessage+0xc4>)
    7540:	68ab      	ldr	r3, [r5, #8]
    7542:	5d18      	ldrb	r0, [r3, r4]
    7544:	47b0      	blx	r6
    for(i = 0; i < rxMessage.PayloadSize; i++)
    7546:	3401      	adds	r4, #1
    7548:	b2e4      	uxtb	r4, r4
    754a:	7b2b      	ldrb	r3, [r5, #12]
    754c:	42a3      	cmp	r3, r4
    754e:	d8f7      	bhi.n	7540 <DemoOutput_HandleMessage+0x40>
    }   
	printf("\r\n");    
    7550:	481d      	ldr	r0, [pc, #116]	; (75c8 <DemoOutput_HandleMessage+0xc8>)
    7552:	4b1e      	ldr	r3, [pc, #120]	; (75cc <DemoOutput_HandleMessage+0xcc>)
    7554:	4798      	blx	r3
} 
    7556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        sio2host_tx((uint8_t *)"Secured ", sizeof("Secured "));
    7558:	2109      	movs	r1, #9
    755a:	481d      	ldr	r0, [pc, #116]	; (75d0 <DemoOutput_HandleMessage+0xd0>)
    755c:	4b15      	ldr	r3, [pc, #84]	; (75b4 <DemoOutput_HandleMessage+0xb4>)
    755e:	4798      	blx	r3
    7560:	e7d3      	b.n	750a <DemoOutput_HandleMessage+0xa>
        sio2host_tx((uint8_t *)"Unicast Packet with RSSI ",sizeof("Unicast Packet with RSSI "));
    7562:	211a      	movs	r1, #26
    7564:	481b      	ldr	r0, [pc, #108]	; (75d4 <DemoOutput_HandleMessage+0xd4>)
    7566:	4b13      	ldr	r3, [pc, #76]	; (75b4 <DemoOutput_HandleMessage+0xb4>)
    7568:	4798      	blx	r3
    756a:	e7d6      	b.n	751a <DemoOutput_HandleMessage+0x1a>
        sio2host_tx((uint8_t *)" from ", sizeof(" from "));
    756c:	2107      	movs	r1, #7
    756e:	481a      	ldr	r0, [pc, #104]	; (75d8 <DemoOutput_HandleMessage+0xd8>)
    7570:	4b10      	ldr	r3, [pc, #64]	; (75b4 <DemoOutput_HandleMessage+0xb4>)
    7572:	4798      	blx	r3
        if( rxMessage.flags.bits.altSrcAddr )
    7574:	4b0d      	ldr	r3, [pc, #52]	; (75ac <DemoOutput_HandleMessage+0xac>)
    7576:	781b      	ldrb	r3, [r3, #0]
    7578:	2407      	movs	r4, #7
    757a:	2b7f      	cmp	r3, #127	; 0x7f
    757c:	d809      	bhi.n	7592 <DemoOutput_HandleMessage+0x92>
                printf("%x", rxMessage.SourceAddress[MY_ADDRESS_LENGTH-1-i]);
    757e:	4f0b      	ldr	r7, [pc, #44]	; (75ac <DemoOutput_HandleMessage+0xac>)
    7580:	4e16      	ldr	r6, [pc, #88]	; (75dc <DemoOutput_HandleMessage+0xdc>)
    7582:	4d0e      	ldr	r5, [pc, #56]	; (75bc <DemoOutput_HandleMessage+0xbc>)
    7584:	687b      	ldr	r3, [r7, #4]
    7586:	5d19      	ldrb	r1, [r3, r4]
    7588:	0030      	movs	r0, r6
    758a:	47a8      	blx	r5
            for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    758c:	3c01      	subs	r4, #1
    758e:	d2f9      	bcs.n	7584 <DemoOutput_HandleMessage+0x84>
    7590:	e7cb      	b.n	752a <DemoOutput_HandleMessage+0x2a>
            printf( "%x", rxMessage.SourceAddress[1]);
    7592:	4e06      	ldr	r6, [pc, #24]	; (75ac <DemoOutput_HandleMessage+0xac>)
    7594:	6873      	ldr	r3, [r6, #4]
    7596:	7859      	ldrb	r1, [r3, #1]
    7598:	4d10      	ldr	r5, [pc, #64]	; (75dc <DemoOutput_HandleMessage+0xdc>)
    759a:	0028      	movs	r0, r5
    759c:	4c07      	ldr	r4, [pc, #28]	; (75bc <DemoOutput_HandleMessage+0xbc>)
    759e:	47a0      	blx	r4
            printf( "%x", rxMessage.SourceAddress[0]);
    75a0:	6873      	ldr	r3, [r6, #4]
    75a2:	7819      	ldrb	r1, [r3, #0]
    75a4:	0028      	movs	r0, r5
    75a6:	47a0      	blx	r4
    75a8:	e7bf      	b.n	752a <DemoOutput_HandleMessage+0x2a>
    75aa:	46c0      	nop			; (mov r8, r8)
    75ac:	2000295c 	.word	0x2000295c
    75b0:	00018444 	.word	0x00018444
    75b4:	0000c641 	.word	0x0000c641
    75b8:	0001847c 	.word	0x0001847c
    75bc:	00017201 	.word	0x00017201
    75c0:	00018490 	.word	0x00018490
    75c4:	0000c66d 	.word	0x0000c66d
    75c8:	00018734 	.word	0x00018734
    75cc:	0001731d 	.word	0x0001731d
    75d0:	00018438 	.word	0x00018438
    75d4:	00018460 	.word	0x00018460
    75d8:	00018484 	.word	0x00018484
    75dc:	0001848c 	.word	0x0001848c

000075e0 <DemoOutput_UpdateTxRx>:
void DemoOutput_UpdateTxRx(uint8_t TxNum, uint8_t RxNum)
{
#if defined (ENABLE_LCD)
    LCDTRXCount(TxNum, RxNum);  
#endif
}
    75e0:	4770      	bx	lr
    75e2:	Address 0x000075e2 is out of bounds.


000075e4 <DemoOutput_ChannelError>:

void DemoOutput_ChannelError(uint8_t channel)
{
    75e4:	b570      	push	{r4, r5, r6, lr}
    75e6:	0005      	movs	r5, r0
    #if defined (ENABLE_CONSOLE)
        printf("\r\nSelection of channel ");
    75e8:	4804      	ldr	r0, [pc, #16]	; (75fc <DemoOutput_ChannelError+0x18>)
    75ea:	4c05      	ldr	r4, [pc, #20]	; (7600 <DemoOutput_ChannelError+0x1c>)
    75ec:	47a0      	blx	r4
        printf("%d", channel);
    75ee:	0029      	movs	r1, r5
    75f0:	4804      	ldr	r0, [pc, #16]	; (7604 <DemoOutput_ChannelError+0x20>)
    75f2:	47a0      	blx	r4
        printf(" is not supported in current configuration.\r\n");
    75f4:	4804      	ldr	r0, [pc, #16]	; (7608 <DemoOutput_ChannelError+0x24>)
    75f6:	4b05      	ldr	r3, [pc, #20]	; (760c <DemoOutput_ChannelError+0x28>)
    75f8:	4798      	blx	r3
    #endif
}
    75fa:	bd70      	pop	{r4, r5, r6, pc}
    75fc:	00018184 	.word	0x00018184
    7600:	00017201 	.word	0x00017201
    7604:	00018160 	.word	0x00018160
    7608:	0001819c 	.word	0x0001819c
    760c:	0001731d 	.word	0x0001731d

00007610 <DemoOutput_BroadcastFail>:
    LCDDisplay((char *)" Unicast Failed", 0, true);
#endif
}    

void DemoOutput_BroadcastFail(void)
{
    7610:	b510      	push	{r4, lr}
	#if defined (ENABLE_CONSOLE)
	printf("\r\nBroadcast Failed\r\n");
    7612:	4802      	ldr	r0, [pc, #8]	; (761c <DemoOutput_BroadcastFail+0xc>)
    7614:	4b02      	ldr	r3, [pc, #8]	; (7620 <DemoOutput_BroadcastFail+0x10>)
    7616:	4798      	blx	r3
	#endif
	#if defined (ENABLE_LCD)
	LCDDisplay((char *)" Broadcast Failed", 0, true);
	#endif
}    
    7618:	bd10      	pop	{r4, pc}
    761a:	46c0      	nop			; (mov r8, r8)
    761c:	0001812c 	.word	0x0001812c
    7620:	0001731d 	.word	0x0001731d

00007624 <ButtonPressed>:
 *
 * Note:
 ********************************************************************/

uint8_t ButtonPressed(void)
{	
    7624:	b510      	push	{r4, lr}
	return (port_base->IN.reg & pin_mask);
    7626:	4b10      	ldr	r3, [pc, #64]	; (7668 <ButtonPressed+0x44>)
    7628:	6a1b      	ldr	r3, [r3, #32]
    MIWI_TICK tickDifference;
    //if(!port_pin_get_input_level(BUTTON_0_PIN))
	if(port_pin_get_input_level(ORDER_BUTTON_PIN))
    762a:	061b      	lsls	r3, r3, #24
    762c:	d50e      	bpl.n	764c <ButtonPressed+0x28>
    {
        //if the button was previously not pressed
        if(PUSH_BUTTON_pressed == false)
    762e:	4b0f      	ldr	r3, [pc, #60]	; (766c <ButtonPressed+0x48>)
    7630:	781b      	ldrb	r3, [r3, #0]
        if(tickDifference.Val > DEBOUNCE_TIME)
        {
            PUSH_BUTTON_pressed = false;
        }
    }
    return 0;
    7632:	2000      	movs	r0, #0
        if(PUSH_BUTTON_pressed == false)
    7634:	2b00      	cmp	r3, #0
    7636:	d000      	beq.n	763a <ButtonPressed+0x16>
}
    7638:	bd10      	pop	{r4, pc}
            PUSH_BUTTON_pressed = true;
    763a:	2201      	movs	r2, #1
    763c:	4b0b      	ldr	r3, [pc, #44]	; (766c <ButtonPressed+0x48>)
    763e:	701a      	strb	r2, [r3, #0]
            PUSH_BUTTON_press_time.Val = MiWi_TickGet();
    7640:	4b0b      	ldr	r3, [pc, #44]	; (7670 <ButtonPressed+0x4c>)
    7642:	4798      	blx	r3
    7644:	4b0b      	ldr	r3, [pc, #44]	; (7674 <ButtonPressed+0x50>)
    7646:	6018      	str	r0, [r3, #0]
            return 1;
    7648:	2001      	movs	r0, #1
    764a:	e7f5      	b.n	7638 <ButtonPressed+0x14>
		t.Val = MiWi_TickGet();
    764c:	4b08      	ldr	r3, [pc, #32]	; (7670 <ButtonPressed+0x4c>)
    764e:	4798      	blx	r3
        tickDifference.Val = MiWi_TickGetDiff(t,PUSH_BUTTON_press_time);
    7650:	4b08      	ldr	r3, [pc, #32]	; (7674 <ButtonPressed+0x50>)
    7652:	6819      	ldr	r1, [r3, #0]
    7654:	4b08      	ldr	r3, [pc, #32]	; (7678 <ButtonPressed+0x54>)
    7656:	4798      	blx	r3
        if(tickDifference.Val > DEBOUNCE_TIME)
    7658:	4b08      	ldr	r3, [pc, #32]	; (767c <ButtonPressed+0x58>)
    765a:	4298      	cmp	r0, r3
    765c:	d902      	bls.n	7664 <ButtonPressed+0x40>
            PUSH_BUTTON_pressed = false;
    765e:	2200      	movs	r2, #0
    7660:	4b02      	ldr	r3, [pc, #8]	; (766c <ButtonPressed+0x48>)
    7662:	701a      	strb	r2, [r3, #0]
    return 0;
    7664:	2000      	movs	r0, #0
    7666:	e7e7      	b.n	7638 <ButtonPressed+0x14>
    7668:	40002800 	.word	0x40002800
    766c:	20001f68 	.word	0x20001f68
    7670:	0000c3e1 	.word	0x0000c3e1
    7674:	20001f6c 	.word	0x20001f6c
    7678:	0000c441 	.word	0x0000c441
    767c:	00003fff 	.word	0x00003fff

00007680 <TxToutCallback>:
uint8_t ferryState = 0;

#define PAYLOAD_TERMINAL 1

void TxToutCallback(void)
{
    7680:	b510      	push	{r4, lr}
	/* That bring the node back to continuous transaction cycle */
	PHY_DataConf(TRANSACTION_EXPIRED);
    7682:	2005      	movs	r0, #5
    7684:	4b03      	ldr	r3, [pc, #12]	; (7694 <TxToutCallback+0x14>)
    7686:	4798      	blx	r3
	SwTimerStop(TxTimerId);
    7688:	4b03      	ldr	r3, [pc, #12]	; (7698 <TxToutCallback+0x18>)
    768a:	7818      	ldrb	r0, [r3, #0]
    768c:	4b03      	ldr	r3, [pc, #12]	; (769c <TxToutCallback+0x1c>)
    768e:	4798      	blx	r3
}
    7690:	bd10      	pop	{r4, pc}
    7692:	46c0      	nop			; (mov r8, r8)
    7694:	0000a099 	.word	0x0000a099
    7698:	20000100 	.word	0x20000100
    769c:	0000d891 	.word	0x0000d891

000076a0 <dataConfcb>:


// Transmission callback
void dataConfcb(uint8_t handle, miwi_status_t status, uint8_t* msgPointer)
{
    76a0:	b510      	push	{r4, lr}
    76a2:	0014      	movs	r4, r2
#if defined (ENABLE_CONSOLE)
	printf("\nData Confirm: Handle: %d status:%d \r\n", handle, status);
    76a4:	000a      	movs	r2, r1
    76a6:	0001      	movs	r1, r0
    76a8:	4805      	ldr	r0, [pc, #20]	; (76c0 <dataConfcb+0x20>)
    76aa:	4b06      	ldr	r3, [pc, #24]	; (76c4 <dataConfcb+0x24>)
    76ac:	4798      	blx	r3
#endif // #if defined (ENABLE_CONSOLE)
	/* Stop transmission timeout timer */
	SwTimerStop(TxTimerId);
    76ae:	4b06      	ldr	r3, [pc, #24]	; (76c8 <dataConfcb+0x28>)
    76b0:	7818      	ldrb	r0, [r3, #0]
    76b2:	4b06      	ldr	r3, [pc, #24]	; (76cc <dataConfcb+0x2c>)
    76b4:	4798      	blx	r3
	/* Free payload buffer allocated */
	MiMem_Free(msgPointer);
    76b6:	0020      	movs	r0, r4
    76b8:	4b05      	ldr	r3, [pc, #20]	; (76d0 <dataConfcb+0x30>)
    76ba:	4798      	blx	r3
	
}
    76bc:	bd10      	pop	{r4, pc}
    76be:	46c0      	nop			; (mov r8, r8)
    76c0:	00018628 	.word	0x00018628
    76c4:	00017201 	.word	0x00017201
    76c8:	20000100 	.word	0x20000100
    76cc:	0000d891 	.word	0x0000d891
    76d0:	0000c25d 	.word	0x0000c25d

000076d4 <T_BroadcastMessageToFerry>:
	.front = -1,
	.rear = -1
};

void T_BroadcastMessageToFerry(uint8_t signal)
{
    76d4:	b570      	push	{r4, r5, r6, lr}
    76d6:	b086      	sub	sp, #24
    76d8:	0006      	movs	r6, r0
	uint8_t* dataPtr = NULL;
	uint8_t dataLen = 0;
	uint16_t broadcastAddress = 0xFFFF;
    76da:	2201      	movs	r2, #1
    76dc:	4252      	negs	r2, r2
    76de:	2316      	movs	r3, #22
    76e0:	446b      	add	r3, sp
    76e2:	801a      	strh	r2, [r3, #0]
	
	MiMem_Free(previousMessage);
    76e4:	4d1e      	ldr	r5, [pc, #120]	; (7760 <T_BroadcastMessageToFerry+0x8c>)
    76e6:	6828      	ldr	r0, [r5, #0]
    76e8:	4b1e      	ldr	r3, [pc, #120]	; (7764 <T_BroadcastMessageToFerry+0x90>)
    76ea:	4798      	blx	r3
	previousMessage = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PAYLOAD_TERMINAL));
    76ec:	2010      	movs	r0, #16
    76ee:	4c1e      	ldr	r4, [pc, #120]	; (7768 <T_BroadcastMessageToFerry+0x94>)
    76f0:	47a0      	blx	r4
    76f2:	6028      	str	r0, [r5, #0]
	
	dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PAYLOAD_TERMINAL));
    76f4:	2010      	movs	r0, #16
    76f6:	47a0      	blx	r4
	
	if (NULL == dataPtr) return;
    76f8:	2800      	cmp	r0, #0
    76fa:	d024      	beq.n	7746 <T_BroadcastMessageToFerry+0x72>
	
	for (i = 0; i < PAYLOAD_TERMINAL; i++)
    76fc:	2200      	movs	r2, #0
    76fe:	4b1b      	ldr	r3, [pc, #108]	; (776c <T_BroadcastMessageToFerry+0x98>)
    7700:	701a      	strb	r2, [r3, #0]
    7702:	2400      	movs	r4, #0
	{
		previousMessage[i] = signal;
    7704:	4b16      	ldr	r3, [pc, #88]	; (7760 <T_BroadcastMessageToFerry+0x8c>)
	for (i = 0; i < PAYLOAD_TERMINAL; i++)
    7706:	4d19      	ldr	r5, [pc, #100]	; (776c <T_BroadcastMessageToFerry+0x98>)
		previousMessage[i] = signal;
    7708:	681a      	ldr	r2, [r3, #0]
    770a:	7016      	strb	r6, [r2, #0]
		dataPtr[dataLen++] = signal;
    770c:	1c62      	adds	r2, r4, #1
    770e:	b2d2      	uxtb	r2, r2
    7710:	5506      	strb	r6, [r0, r4]
	for (i = 0; i < PAYLOAD_TERMINAL; i++)
    7712:	7829      	ldrb	r1, [r5, #0]
    7714:	3101      	adds	r1, #1
    7716:	b2c9      	uxtb	r1, r1
    7718:	7029      	strb	r1, [r5, #0]
		dataPtr[dataLen++] = signal;
    771a:	0014      	movs	r4, r2
	for (i = 0; i < PAYLOAD_TERMINAL; i++)
    771c:	2900      	cmp	r1, #0
    771e:	d0f3      	beq.n	7708 <T_BroadcastMessageToFerry+0x34>
	}
			
	// Broadcast the message
	if (MiApp_SendData(SHORT_ADDR_LEN, (uint8_t *)&broadcastAddress, dataLen, dataPtr, msghandledemo++, true, dataConfcb) == false)
    7720:	4913      	ldr	r1, [pc, #76]	; (7770 <T_BroadcastMessageToFerry+0x9c>)
    7722:	780b      	ldrb	r3, [r1, #0]
    7724:	1c5c      	adds	r4, r3, #1
    7726:	700c      	strb	r4, [r1, #0]
    7728:	4912      	ldr	r1, [pc, #72]	; (7774 <T_BroadcastMessageToFerry+0xa0>)
    772a:	9102      	str	r1, [sp, #8]
    772c:	2101      	movs	r1, #1
    772e:	9101      	str	r1, [sp, #4]
    7730:	9300      	str	r3, [sp, #0]
    7732:	0003      	movs	r3, r0
    7734:	3115      	adds	r1, #21
    7736:	4469      	add	r1, sp
    7738:	2002      	movs	r0, #2
    773a:	4c0f      	ldr	r4, [pc, #60]	; (7778 <T_BroadcastMessageToFerry+0xa4>)
    773c:	47a0      	blx	r4
    773e:	2800      	cmp	r0, #0
    7740:	d103      	bne.n	774a <T_BroadcastMessageToFerry+0x76>
	{
		DemoOutput_BroadcastFail();
    7742:	4b0e      	ldr	r3, [pc, #56]	; (777c <T_BroadcastMessageToFerry+0xa8>)
    7744:	4798      	blx	r3
	else
	{
		SwTimerStart(TxTimerId, MS_TO_US(5000), 0, (void *)TxToutCallback, NULL);
	}
	
}
    7746:	b006      	add	sp, #24
    7748:	bd70      	pop	{r4, r5, r6, pc}
		SwTimerStart(TxTimerId, MS_TO_US(5000), 0, (void *)TxToutCallback, NULL);
    774a:	4b0d      	ldr	r3, [pc, #52]	; (7780 <T_BroadcastMessageToFerry+0xac>)
    774c:	7818      	ldrb	r0, [r3, #0]
    774e:	2300      	movs	r3, #0
    7750:	9300      	str	r3, [sp, #0]
    7752:	4b0c      	ldr	r3, [pc, #48]	; (7784 <T_BroadcastMessageToFerry+0xb0>)
    7754:	2200      	movs	r2, #0
    7756:	490c      	ldr	r1, [pc, #48]	; (7788 <T_BroadcastMessageToFerry+0xb4>)
    7758:	4c0c      	ldr	r4, [pc, #48]	; (778c <T_BroadcastMessageToFerry+0xb8>)
    775a:	47a0      	blx	r4
    775c:	e7f3      	b.n	7746 <T_BroadcastMessageToFerry+0x72>
    775e:	46c0      	nop			; (mov r8, r8)
    7760:	200000fc 	.word	0x200000fc
    7764:	0000c25d 	.word	0x0000c25d
    7768:	0000c1a1 	.word	0x0000c1a1
    776c:	20001f71 	.word	0x20001f71
    7770:	200000f7 	.word	0x200000f7
    7774:	000076a1 	.word	0x000076a1
    7778:	0000af19 	.word	0x0000af19
    777c:	00007611 	.word	0x00007611
    7780:	20000100 	.word	0x20000100
    7784:	00007681 	.word	0x00007681
    7788:	004c4b40 	.word	0x004c4b40
    778c:	0000d579 	.word	0x0000d579

00007790 <T_A_OnDemandOrder>:
{	
    7790:	b510      	push	{r4, lr}
    7792:	b082      	sub	sp, #8
	uint8_t pressedButton = ButtonPressed();
    7794:	4b0e      	ldr	r3, [pc, #56]	; (77d0 <T_A_OnDemandOrder+0x40>)
    7796:	4798      	blx	r3
	if (pressedButton)
    7798:	2800      	cmp	r0, #0
    779a:	d003      	beq.n	77a4 <T_A_OnDemandOrder+0x14>
		if(!orderStatus)
    779c:	4b0d      	ldr	r3, [pc, #52]	; (77d4 <T_A_OnDemandOrder+0x44>)
    779e:	781b      	ldrb	r3, [r3, #0]
    77a0:	2b00      	cmp	r3, #0
    77a2:	d001      	beq.n	77a8 <T_A_OnDemandOrder+0x18>
}
    77a4:	b002      	add	sp, #8
    77a6:	bd10      	pop	{r4, pc}
			uint8_t teaid_reqf_request = TEAID_REQF_REQUEST;
    77a8:	466b      	mov	r3, sp
    77aa:	1dd8      	adds	r0, r3, #7
    77ac:	23de      	movs	r3, #222	; 0xde
    77ae:	7003      	strb	r3, [r0, #0]
			UART_SAM_To_RPi(&teaid_reqf_request);
    77b0:	4b09      	ldr	r3, [pc, #36]	; (77d8 <T_A_OnDemandOrder+0x48>)
    77b2:	4798      	blx	r3
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    77b4:	4c09      	ldr	r4, [pc, #36]	; (77dc <T_A_OnDemandOrder+0x4c>)
    77b6:	2380      	movs	r3, #128	; 0x80
    77b8:	02db      	lsls	r3, r3, #11
    77ba:	61e3      	str	r3, [r4, #28]
			T_BroadcastMessageToFerry(TEAID_REQF_REQUEST);
    77bc:	20de      	movs	r0, #222	; 0xde
    77be:	4b08      	ldr	r3, [pc, #32]	; (77e0 <T_A_OnDemandOrder+0x50>)
    77c0:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    77c2:	2340      	movs	r3, #64	; 0x40
    77c4:	61a3      	str	r3, [r4, #24]
			orderStatus = true;
    77c6:	2201      	movs	r2, #1
    77c8:	4b02      	ldr	r3, [pc, #8]	; (77d4 <T_A_OnDemandOrder+0x44>)
    77ca:	701a      	strb	r2, [r3, #0]
}
    77cc:	e7ea      	b.n	77a4 <T_A_OnDemandOrder+0x14>
    77ce:	46c0      	nop			; (mov r8, r8)
    77d0:	00007625 	.word	0x00007625
    77d4:	200000f8 	.word	0x200000f8
    77d8:	0000e41d 	.word	0x0000e41d
    77dc:	40002800 	.word	0x40002800
    77e0:	000076d5 	.word	0x000076d5

000077e4 <T_SendReceivedUARTMessage>:


// Send received UART message with LoRa
void T_SendReceivedUARTMessage(uint8_t message)
{
    77e4:	b510      	push	{r4, lr}
    77e6:	b082      	sub	sp, #8
    77e8:	0004      	movs	r4, r0
	printf("\n\r Message received: %x", message);
    77ea:	0001      	movs	r1, r0
    77ec:	480f      	ldr	r0, [pc, #60]	; (782c <T_SendReceivedUARTMessage+0x48>)
    77ee:	4b10      	ldr	r3, [pc, #64]	; (7830 <T_SendReceivedUARTMessage+0x4c>)
    77f0:	4798      	blx	r3
	switch(message)
    77f2:	2c0f      	cmp	r4, #15
    77f4:	d80d      	bhi.n	7812 <T_SendReceivedUARTMessage+0x2e>
    77f6:	2c06      	cmp	r4, #6
    77f8:	d206      	bcs.n	7808 <T_SendReceivedUARTMessage+0x24>
    77fa:	2c03      	cmp	r4, #3
    77fc:	d904      	bls.n	7808 <T_SendReceivedUARTMessage+0x24>
    77fe:	2c04      	cmp	r4, #4
    7800:	d10c      	bne.n	781c <T_SendReceivedUARTMessage+0x38>
		
		case PASSENGERS_THREE:
			break;
		
		case PASSENGERS_FOUR:
			printf("\n Recevied UART message from IO-machine \n\r");
    7802:	480c      	ldr	r0, [pc, #48]	; (7834 <T_SendReceivedUARTMessage+0x50>)
    7804:	4b0a      	ldr	r3, [pc, #40]	; (7830 <T_SendReceivedUARTMessage+0x4c>)
    7806:	4798      	blx	r3
			uint8_t send_message_again = SEND_MESSAGE_AGAIN;
			UART_SAM_To_IO(&send_message_again);
			return;
			
	}
	T_BroadcastMessageToFerry(message);
    7808:	0020      	movs	r0, r4
    780a:	4b0b      	ldr	r3, [pc, #44]	; (7838 <T_SendReceivedUARTMessage+0x54>)
    780c:	4798      	blx	r3
}
    780e:	b002      	add	sp, #8
    7810:	bd10      	pop	{r4, pc}
	switch(message)
    7812:	0023      	movs	r3, r4
    7814:	332f      	adds	r3, #47	; 0x2f
    7816:	b2db      	uxtb	r3, r3
    7818:	2b0c      	cmp	r3, #12
    781a:	d9f5      	bls.n	7808 <T_SendReceivedUARTMessage+0x24>
			uint8_t send_message_again = SEND_MESSAGE_AGAIN;
    781c:	466b      	mov	r3, sp
    781e:	1dd8      	adds	r0, r3, #7
    7820:	23aa      	movs	r3, #170	; 0xaa
    7822:	7003      	strb	r3, [r0, #0]
			UART_SAM_To_IO(&send_message_again);
    7824:	4b05      	ldr	r3, [pc, #20]	; (783c <T_SendReceivedUARTMessage+0x58>)
    7826:	4798      	blx	r3
    7828:	e7f1      	b.n	780e <T_SendReceivedUARTMessage+0x2a>
    782a:	46c0      	nop			; (mov r8, r8)
    782c:	000185e4 	.word	0x000185e4
    7830:	00017201 	.word	0x00017201
    7834:	000185fc 	.word	0x000185fc
    7838:	000076d5 	.word	0x000076d5
    783c:	0000e435 	.word	0x0000e435

00007840 <T_SendReceivedLoRaMessage>:

// Send received LoRa message with UART
void T_SendReceivedLoRaMessage(uint8_t message)
{
    7840:	b510      	push	{r4, lr}
    7842:	b082      	sub	sp, #8
    7844:	466b      	mov	r3, sp
    7846:	1ddc      	adds	r4, r3, #7
    7848:	71d8      	strb	r0, [r3, #7]
	printf("\n\r Received LoRa message: %x", message);
    784a:	0001      	movs	r1, r0
    784c:	4836      	ldr	r0, [pc, #216]	; (7928 <T_SendReceivedLoRaMessage+0xe8>)
    784e:	4b37      	ldr	r3, [pc, #220]	; (792c <T_SendReceivedLoRaMessage+0xec>)
    7850:	4798      	blx	r3
	// Checks if received message is meant for terminal A
	if (T_A_CheckIdentifier(message))
    7852:	7823      	ldrb	r3, [r4, #0]
    7854:	223f      	movs	r2, #63	; 0x3f
    7856:	0019      	movs	r1, r3
    7858:	4391      	bics	r1, r2
    785a:	2940      	cmp	r1, #64	; 0x40
    785c:	d135      	bne.n	78ca <T_SendReceivedLoRaMessage+0x8a>
	{		

		switch(message)
    785e:	3b70      	subs	r3, #112	; 0x70
    7860:	b2da      	uxtb	r2, r3
    7862:	2a0f      	cmp	r2, #15
    7864:	d82d      	bhi.n	78c2 <T_SendReceivedLoRaMessage+0x82>
    7866:	0093      	lsls	r3, r2, #2
    7868:	4a31      	ldr	r2, [pc, #196]	; (7930 <T_SendReceivedLoRaMessage+0xf0>)
    786a:	58d3      	ldr	r3, [r2, r3]
    786c:	469f      	mov	pc, r3
		{
			case TEAID_GCMD_RESET:
				break;
				
			case TEAID_GCMD_OPEN:
				ferryState = TEAID;
    786e:	2240      	movs	r2, #64	; 0x40
    7870:	4b30      	ldr	r3, [pc, #192]	; (7934 <T_SendReceivedLoRaMessage+0xf4>)
    7872:	701a      	strb	r2, [r3, #0]
				UART_SAM_To_RPi(&message);
    7874:	466b      	mov	r3, sp
    7876:	1dd8      	adds	r0, r3, #7
    7878:	4b2f      	ldr	r3, [pc, #188]	; (7938 <T_SendReceivedLoRaMessage+0xf8>)
    787a:	4798      	blx	r3
				printf("\n Open gate at terminal A \n\r");
    787c:	482f      	ldr	r0, [pc, #188]	; (793c <T_SendReceivedLoRaMessage+0xfc>)
    787e:	4b2b      	ldr	r3, [pc, #172]	; (792c <T_SendReceivedLoRaMessage+0xec>)
    7880:	4798      	blx	r3
			/* Ask for new message if received message was not in register */	
			default:
				T_BroadcastMessageToFerry(SEND_MESSAGE_AGAIN);		
				return;
		}
		UART_SAM_To_IO(&message);
    7882:	466b      	mov	r3, sp
    7884:	1dd8      	adds	r0, r3, #7
    7886:	4b2e      	ldr	r3, [pc, #184]	; (7940 <T_SendReceivedLoRaMessage+0x100>)
    7888:	4798      	blx	r3
	else
	{
		//T_BroadcastMessageToFerry(SEND_MESSAGE_AGAIN);
		return;
	}
}
    788a:	b002      	add	sp, #8
    788c:	bd10      	pop	{r4, pc}
				orderStatus = false;
    788e:	2200      	movs	r2, #0
    7890:	4b2c      	ldr	r3, [pc, #176]	; (7944 <T_SendReceivedLoRaMessage+0x104>)
    7892:	701a      	strb	r2, [r3, #0]
		port_base->OUTCLR.reg = pin_mask;
    7894:	3240      	adds	r2, #64	; 0x40
    7896:	4b2c      	ldr	r3, [pc, #176]	; (7948 <T_SendReceivedLoRaMessage+0x108>)
    7898:	615a      	str	r2, [r3, #20]
				UART_SAM_To_RPi(&message);
    789a:	466b      	mov	r3, sp
    789c:	1dd8      	adds	r0, r3, #7
    789e:	4b26      	ldr	r3, [pc, #152]	; (7938 <T_SendReceivedLoRaMessage+0xf8>)
    78a0:	4798      	blx	r3
				printf("\n Close gate at terminal A");
    78a2:	482a      	ldr	r0, [pc, #168]	; (794c <T_SendReceivedLoRaMessage+0x10c>)
    78a4:	4b21      	ldr	r3, [pc, #132]	; (792c <T_SendReceivedLoRaMessage+0xec>)
    78a6:	4798      	blx	r3
				break;
    78a8:	e7eb      	b.n	7882 <T_SendReceivedLoRaMessage+0x42>
				printf("\n Order confirmed, wait for ferry to arrive");
    78aa:	4829      	ldr	r0, [pc, #164]	; (7950 <T_SendReceivedLoRaMessage+0x110>)
    78ac:	4b1f      	ldr	r3, [pc, #124]	; (792c <T_SendReceivedLoRaMessage+0xec>)
    78ae:	4798      	blx	r3
				break;;
    78b0:	e7e7      	b.n	7882 <T_SendReceivedLoRaMessage+0x42>
				UART_SAM_To_RPi(&message);
    78b2:	466b      	mov	r3, sp
    78b4:	1dd8      	adds	r0, r3, #7
    78b6:	4b20      	ldr	r3, [pc, #128]	; (7938 <T_SendReceivedLoRaMessage+0xf8>)
    78b8:	4798      	blx	r3
				ferryState = IN_TRANSIT;
    78ba:	22a0      	movs	r2, #160	; 0xa0
    78bc:	4b1d      	ldr	r3, [pc, #116]	; (7934 <T_SendReceivedLoRaMessage+0xf4>)
    78be:	701a      	strb	r2, [r3, #0]
				break;
    78c0:	e7df      	b.n	7882 <T_SendReceivedLoRaMessage+0x42>
				T_BroadcastMessageToFerry(SEND_MESSAGE_AGAIN);		
    78c2:	20aa      	movs	r0, #170	; 0xaa
    78c4:	4b23      	ldr	r3, [pc, #140]	; (7954 <T_SendReceivedLoRaMessage+0x114>)
    78c6:	4798      	blx	r3
				return;
    78c8:	e7df      	b.n	788a <T_SendReceivedLoRaMessage+0x4a>
	else if (message == SEND_MESSAGE_AGAIN)
    78ca:	2baa      	cmp	r3, #170	; 0xaa
    78cc:	d011      	beq.n	78f2 <T_SendReceivedLoRaMessage+0xb2>
	else if (T_B_CheckIdentifier(message))
    78ce:	2980      	cmp	r1, #128	; 0x80
    78d0:	d1db      	bne.n	788a <T_SendReceivedLoRaMessage+0x4a>
		switch(message)
    78d2:	2bb3      	cmp	r3, #179	; 0xb3
    78d4:	d018      	beq.n	7908 <T_SendReceivedLoRaMessage+0xc8>
    78d6:	2bbc      	cmp	r3, #188	; 0xbc
    78d8:	d01b      	beq.n	7912 <T_SendReceivedLoRaMessage+0xd2>
    78da:	2bb2      	cmp	r3, #178	; 0xb2
    78dc:	d1d5      	bne.n	788a <T_SendReceivedLoRaMessage+0x4a>
				ferryState = TEBID;
    78de:	4b15      	ldr	r3, [pc, #84]	; (7934 <T_SendReceivedLoRaMessage+0xf4>)
    78e0:	7019      	strb	r1, [r3, #0]
				UART_SAM_To_RPi(&message);
    78e2:	466b      	mov	r3, sp
    78e4:	1dd8      	adds	r0, r3, #7
    78e6:	4b14      	ldr	r3, [pc, #80]	; (7938 <T_SendReceivedLoRaMessage+0xf8>)
    78e8:	4798      	blx	r3
				printf("\n Ferry is at terminal B \n\r");
    78ea:	481b      	ldr	r0, [pc, #108]	; (7958 <T_SendReceivedLoRaMessage+0x118>)
    78ec:	4b0f      	ldr	r3, [pc, #60]	; (792c <T_SendReceivedLoRaMessage+0xec>)
    78ee:	4798      	blx	r3
				break;
    78f0:	e7cb      	b.n	788a <T_SendReceivedLoRaMessage+0x4a>
		if (previousMessage)	// Send previous message if its not NULL
    78f2:	4b1a      	ldr	r3, [pc, #104]	; (795c <T_SendReceivedLoRaMessage+0x11c>)
    78f4:	681b      	ldr	r3, [r3, #0]
    78f6:	2b00      	cmp	r3, #0
    78f8:	d0c7      	beq.n	788a <T_SendReceivedLoRaMessage+0x4a>
			T_BroadcastMessageToFerry(previousMessage[0]);
    78fa:	7818      	ldrb	r0, [r3, #0]
    78fc:	4b15      	ldr	r3, [pc, #84]	; (7954 <T_SendReceivedLoRaMessage+0x114>)
    78fe:	4798      	blx	r3
			printf("\n Send message again \n\r");
    7900:	4817      	ldr	r0, [pc, #92]	; (7960 <T_SendReceivedLoRaMessage+0x120>)
    7902:	4b0a      	ldr	r3, [pc, #40]	; (792c <T_SendReceivedLoRaMessage+0xec>)
    7904:	4798      	blx	r3
    7906:	e7c0      	b.n	788a <T_SendReceivedLoRaMessage+0x4a>
				UART_SAM_To_RPi(&message);
    7908:	466b      	mov	r3, sp
    790a:	1dd8      	adds	r0, r3, #7
    790c:	4b0a      	ldr	r3, [pc, #40]	; (7938 <T_SendReceivedLoRaMessage+0xf8>)
    790e:	4798      	blx	r3
				break;
    7910:	e7bb      	b.n	788a <T_SendReceivedLoRaMessage+0x4a>
				ferryState = IN_TRANSIT;
    7912:	22a0      	movs	r2, #160	; 0xa0
    7914:	4b07      	ldr	r3, [pc, #28]	; (7934 <T_SendReceivedLoRaMessage+0xf4>)
    7916:	701a      	strb	r2, [r3, #0]
				UART_SAM_To_RPi(&message);
    7918:	466b      	mov	r3, sp
    791a:	1dd8      	adds	r0, r3, #7
    791c:	4b06      	ldr	r3, [pc, #24]	; (7938 <T_SendReceivedLoRaMessage+0xf8>)
    791e:	4798      	blx	r3
				printf("\n Ferry is leaving terminal B");
    7920:	4810      	ldr	r0, [pc, #64]	; (7964 <T_SendReceivedLoRaMessage+0x124>)
    7922:	4b02      	ldr	r3, [pc, #8]	; (792c <T_SendReceivedLoRaMessage+0xec>)
    7924:	4798      	blx	r3
				break;
    7926:	e7b0      	b.n	788a <T_SendReceivedLoRaMessage+0x4a>
    7928:	00018508 	.word	0x00018508
    792c:	00017201 	.word	0x00017201
    7930:	00018494 	.word	0x00018494
    7934:	200000f6 	.word	0x200000f6
    7938:	0000e41d 	.word	0x0000e41d
    793c:	00018528 	.word	0x00018528
    7940:	0000e435 	.word	0x0000e435
    7944:	200000f8 	.word	0x200000f8
    7948:	40002800 	.word	0x40002800
    794c:	00018548 	.word	0x00018548
    7950:	00018564 	.word	0x00018564
    7954:	000076d5 	.word	0x000076d5
    7958:	000185a8 	.word	0x000185a8
    795c:	200000fc 	.word	0x200000fc
    7960:	00018590 	.word	0x00018590
    7964:	000185c4 	.word	0x000185c4

00007968 <ReceivedDataIndication>:
{
    7968:	b510      	push	{r4, lr}
	if ((myPANID.v[1] == ind->SourcePANID.v[1]) && (myPANID.v[0] == ind->SourcePANID.v[0]))
    796a:	4b11      	ldr	r3, [pc, #68]	; (79b0 <ReceivedDataIndication+0x48>)
    796c:	881a      	ldrh	r2, [r3, #0]
    796e:	8843      	ldrh	r3, [r0, #2]
    7970:	429a      	cmp	r2, r3
    7972:	d005      	beq.n	7980 <ReceivedDataIndication+0x18>
		printf("Packet received from other Source PAN ID : 0x%x%x\r\n",ind->SourcePANID.v[1],ind->SourcePANID.v[0]);
    7974:	7882      	ldrb	r2, [r0, #2]
    7976:	78c1      	ldrb	r1, [r0, #3]
    7978:	480e      	ldr	r0, [pc, #56]	; (79b4 <ReceivedDataIndication+0x4c>)
    797a:	4b0f      	ldr	r3, [pc, #60]	; (79b8 <ReceivedDataIndication+0x50>)
    797c:	4798      	blx	r3
}
    797e:	bd10      	pop	{r4, pc}
		T_SendReceivedLoRaMessage(rxMessage.Payload[0]);	
    7980:	4b0e      	ldr	r3, [pc, #56]	; (79bc <ReceivedDataIndication+0x54>)
    7982:	689b      	ldr	r3, [r3, #8]
    7984:	7818      	ldrb	r0, [r3, #0]
    7986:	4b0e      	ldr	r3, [pc, #56]	; (79c0 <ReceivedDataIndication+0x58>)
    7988:	4798      	blx	r3
		DemoOutput_HandleMessage();
    798a:	4b0e      	ldr	r3, [pc, #56]	; (79c4 <ReceivedDataIndication+0x5c>)
    798c:	4798      	blx	r3
		DemoOutput_UpdateTxRx(TxNum, ++RxNum);
    798e:	4b0e      	ldr	r3, [pc, #56]	; (79c8 <ReceivedDataIndication+0x60>)
    7990:	7818      	ldrb	r0, [r3, #0]
    7992:	4b0e      	ldr	r3, [pc, #56]	; (79cc <ReceivedDataIndication+0x64>)
    7994:	7819      	ldrb	r1, [r3, #0]
    7996:	3101      	adds	r1, #1
    7998:	b2c9      	uxtb	r1, r1
    799a:	7019      	strb	r1, [r3, #0]
    799c:	4b0c      	ldr	r3, [pc, #48]	; (79d0 <ReceivedDataIndication+0x68>)
    799e:	4798      	blx	r3
	port_base->OUTTGL.reg = pin_mask;
    79a0:	2280      	movs	r2, #128	; 0x80
    79a2:	0312      	lsls	r2, r2, #12
    79a4:	4b0b      	ldr	r3, [pc, #44]	; (79d4 <ReceivedDataIndication+0x6c>)
    79a6:	61da      	str	r2, [r3, #28]
		DemoOutput_Instruction();	
    79a8:	4b0b      	ldr	r3, [pc, #44]	; (79d8 <ReceivedDataIndication+0x70>)
    79aa:	4798      	blx	r3
    79ac:	e7e7      	b.n	797e <ReceivedDataIndication+0x16>
    79ae:	46c0      	nop			; (mov r8, r8)
    79b0:	200026c8 	.word	0x200026c8
    79b4:	000184d4 	.word	0x000184d4
    79b8:	00017201 	.word	0x00017201
    79bc:	2000295c 	.word	0x2000295c
    79c0:	00007841 	.word	0x00007841
    79c4:	00007501 	.word	0x00007501
    79c8:	200000f5 	.word	0x200000f5
    79cc:	200000f4 	.word	0x200000f4
    79d0:	000075e1 	.word	0x000075e1
    79d4:	40002800 	.word	0x40002800
    79d8:	000074fd 	.word	0x000074fd

000079dc <init_order_button>:
	
	return MSB_LoRA_message == FEID;				// Return true if identifier matches
}

void init_order_button(void)
{
    79dc:	b500      	push	{lr}
    79de:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    79e0:	a901      	add	r1, sp, #4
    79e2:	2300      	movs	r3, #0
    79e4:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    79e6:	2201      	movs	r2, #1
    79e8:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    79ea:	708b      	strb	r3, [r1, #2]
	struct port_config order_button_conf;
	port_get_config_defaults(&order_button_conf);
	order_button_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(ORDER_BUTTON_PIN, &order_button_conf);
    79ec:	2007      	movs	r0, #7
    79ee:	4b02      	ldr	r3, [pc, #8]	; (79f8 <init_order_button+0x1c>)
    79f0:	4798      	blx	r3
}
    79f2:	b003      	add	sp, #12
    79f4:	bd00      	pop	{pc}
    79f6:	46c0      	nop			; (mov r8, r8)
    79f8:	00004ca1 	.word	0x00004ca1

000079fc <init_LED_order_button>:

void init_LED_order_button(void)
{
    79fc:	b500      	push	{lr}
    79fe:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    7a00:	a901      	add	r1, sp, #4
    7a02:	2301      	movs	r3, #1
    7a04:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    7a06:	2200      	movs	r2, #0
    7a08:	708a      	strb	r2, [r1, #2]
	struct port_config order_button_led_conf;
	port_get_config_defaults(&order_button_led_conf);
	order_button_led_conf.direction  = PORT_PIN_DIR_OUTPUT;
    7a0a:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(LED_BUTTON, &order_button_led_conf);
    7a0c:	2006      	movs	r0, #6
    7a0e:	4b02      	ldr	r3, [pc, #8]	; (7a18 <init_LED_order_button+0x1c>)
    7a10:	4798      	blx	r3
}
    7a12:	b003      	add	sp, #12
    7a14:	bd00      	pop	{pc}
    7a16:	46c0      	nop			; (mov r8, r8)
    7a18:	00004ca1 	.word	0x00004ca1

00007a1c <APP_TaskHandler>:

/*********************************************************************//*
 \brief      Application Task Handler
 ************************************************************************/
SYSTEM_TaskStatus_t APP_TaskHandler(void)
{
    7a1c:	b510      	push	{r4, lr}
    Run_Communication();
    7a1e:	4b02      	ldr	r3, [pc, #8]	; (7a28 <APP_TaskHandler+0xc>)
    7a20:	4798      	blx	r3
    return SYSTEM_TASK_SUCCESS;
}
    7a22:	2000      	movs	r0, #0
    7a24:	bd10      	pop	{r4, pc}
    7a26:	46c0      	nop			; (mov r8, r8)
    7a28:	00007e3d 	.word	0x00007e3d

00007a2c <ReadMacAddress>:
* Overview:		    Uses the MAC Address for addressing
*
* Note:			    
**********************************************************************/
void ReadMacAddress(void)
{
    7a2c:	b510      	push	{r4, lr}
	#if (BOARD == SAMR34_XPLAINED_PRO && defined(__SAMR34J18B__))
	// only applicable for SAM R34 Xpro with EDBG on-board
	uint8_t* peui64 = edbg_eui_read_eui64() ;
    7a2e:	4b06      	ldr	r3, [pc, #24]	; (7a48 <ReadMacAddress+0x1c>)
    7a30:	4798      	blx	r3
    7a32:	1dc3      	adds	r3, r0, #7
    7a34:	4a05      	ldr	r2, [pc, #20]	; (7a4c <ReadMacAddress+0x20>)
    7a36:	3801      	subs	r0, #1
	for (uint8_t i = 0; i < MY_ADDRESS_LENGTH; i++)
	{
		myLongAddress[i] = peui64[MY_ADDRESS_LENGTH-i-1] ;
    7a38:	7819      	ldrb	r1, [r3, #0]
    7a3a:	7011      	strb	r1, [r2, #0]
    7a3c:	3b01      	subs	r3, #1
    7a3e:	3201      	adds	r2, #1
	for (uint8_t i = 0; i < MY_ADDRESS_LENGTH; i++)
    7a40:	4283      	cmp	r3, r0
    7a42:	d1f9      	bne.n	7a38 <ReadMacAddress+0xc>
	for (i= 0; i < MY_ADDRESS_LENGTH; i++)
	{
		myLongAddress[i] = peui64[MY_ADDRESS_LENGTH-i-1] ;
	}
	#endif
}
    7a44:	bd10      	pop	{r4, pc}
    7a46:	46c0      	nop			; (mov r8, r8)
    7a48:	0000e025 	.word	0x0000e025
    7a4c:	20000014 	.word	0x20000014

00007a50 <main>:
{   
    7a50:	b570      	push	{r4, r5, r6, lr}
	system_init();
    7a52:	4b18      	ldr	r3, [pc, #96]	; (7ab4 <main+0x64>)
    7a54:	4798      	blx	r3
	delay_init();
    7a56:	4b18      	ldr	r3, [pc, #96]	; (7ab8 <main+0x68>)
    7a58:	4798      	blx	r3
	UART_init();
    7a5a:	4b18      	ldr	r3, [pc, #96]	; (7abc <main+0x6c>)
    7a5c:	4798      	blx	r3
	UART_cb_init();
    7a5e:	4b18      	ldr	r3, [pc, #96]	; (7ac0 <main+0x70>)
    7a60:	4798      	blx	r3
	cpu_irq_enable();
    7a62:	2201      	movs	r2, #1
    7a64:	4b17      	ldr	r3, [pc, #92]	; (7ac4 <main+0x74>)
    7a66:	701a      	strb	r2, [r3, #0]
    7a68:	f3bf 8f5f 	dmb	sy
    7a6c:	b662      	cpsie	i
	sio2host_init();
    7a6e:	4b16      	ldr	r3, [pc, #88]	; (7ac8 <main+0x78>)
    7a70:	4798      	blx	r3
	ReadMacAddress(); 
    7a72:	4b16      	ldr	r3, [pc, #88]	; (7acc <main+0x7c>)
    7a74:	4798      	blx	r3
	SystemTimerInit();
    7a76:	4b16      	ldr	r3, [pc, #88]	; (7ad0 <main+0x80>)
    7a78:	4798      	blx	r3
    DemoOutput_Greeting();	
    7a7a:	4b16      	ldr	r3, [pc, #88]	; (7ad4 <main+0x84>)
    7a7c:	4798      	blx	r3
	nvm_init(INT_FLASH);
    7a7e:	2000      	movs	r0, #0
    7a80:	4b15      	ldr	r3, [pc, #84]	; (7ad8 <main+0x88>)
    7a82:	4798      	blx	r3
	PDS_Init();
    7a84:	4b15      	ldr	r3, [pc, #84]	; (7adc <main+0x8c>)
    7a86:	4798      	blx	r3
	freezer_enable_state = PDS_Restore(PDS_FREEZER);
    7a88:	2006      	movs	r0, #6
    7a8a:	4b15      	ldr	r3, [pc, #84]	; (7ae0 <main+0x90>)
    7a8c:	4798      	blx	r3
    7a8e:	4b15      	ldr	r3, [pc, #84]	; (7ae4 <main+0x94>)
    7a90:	7018      	strb	r0, [r3, #0]
    Initialize_LoRa(freezer_enable_state);
    7a92:	4b15      	ldr	r3, [pc, #84]	; (7ae8 <main+0x98>)
    7a94:	4798      	blx	r3
    Stack_Init();
    7a96:	4b15      	ldr	r3, [pc, #84]	; (7aec <main+0x9c>)
    7a98:	4798      	blx	r3
	init_order_button();
    7a9a:	4b15      	ldr	r3, [pc, #84]	; (7af0 <main+0xa0>)
    7a9c:	4798      	blx	r3
	init_LED_order_button();
    7a9e:	4b15      	ldr	r3, [pc, #84]	; (7af4 <main+0xa4>)
    7aa0:	4798      	blx	r3
	PDS_Store(PDS_FREEZER);
    7aa2:	2006      	movs	r0, #6
    7aa4:	4b14      	ldr	r3, [pc, #80]	; (7af8 <main+0xa8>)
    7aa6:	4798      	blx	r3
		SYSTEM_RunTasks();
    7aa8:	4d14      	ldr	r5, [pc, #80]	; (7afc <main+0xac>)
		Run_Communication();
    7aaa:	4c15      	ldr	r4, [pc, #84]	; (7b00 <main+0xb0>)
		SYSTEM_RunTasks();
    7aac:	47a8      	blx	r5
		Run_Communication();
    7aae:	47a0      	blx	r4
    7ab0:	e7fc      	b.n	7aac <main+0x5c>
    7ab2:	46c0      	nop			; (mov r8, r8)
    7ab4:	00006b95 	.word	0x00006b95
    7ab8:	000044d1 	.word	0x000044d1
    7abc:	0000e3a5 	.word	0x0000e3a5
    7ac0:	0000e409 	.word	0x0000e409
    7ac4:	20000008 	.word	0x20000008
    7ac8:	0000c4f5 	.word	0x0000c4f5
    7acc:	00007a2d 	.word	0x00007a2d
    7ad0:	0000d4dd 	.word	0x0000d4dd
    7ad4:	0000743d 	.word	0x0000743d
    7ad8:	0000e1d9 	.word	0x0000e1d9
    7adc:	000096c9 	.word	0x000096c9
    7ae0:	00009491 	.word	0x00009491
    7ae4:	200002a0 	.word	0x200002a0
    7ae8:	00007c09 	.word	0x00007c09
    7aec:	0000db15 	.word	0x0000db15
    7af0:	000079dd 	.word	0x000079dd
    7af4:	000079fd 	.word	0x000079fd
    7af8:	00009569 	.word	0x00009569
    7afc:	0000db25 	.word	0x0000db25
    7b00:	00007e3d 	.word	0x00007e3d

00007b04 <Connection_Confirm>:
#endif // #if defined (ENABLE_CONSOLE)
}
#endif // #ifdef ENABLE_ACTIVE_SCAN	

static void Connection_Confirm(miwi_status_t status)
{
    7b04:	b510      	push	{r4, lr}
    7b06:	0004      	movs	r4, r0
#if defined (ENABLE_CONSOLE)	
	printf("\r\nConnect Operation Status: %d\n", status) ;
    7b08:	0001      	movs	r1, r0
    7b0a:	4806      	ldr	r0, [pc, #24]	; (7b24 <Connection_Confirm+0x20>)
    7b0c:	4b06      	ldr	r3, [pc, #24]	; (7b28 <Connection_Confirm+0x24>)
    7b0e:	4798      	blx	r3
#endif // #if defined (ENABLE_CONSOLE)

    if ((SUCCESS == status) || (ALREADY_EXISTS == status))
    7b10:	2c00      	cmp	r4, #0
    7b12:	d001      	beq.n	7b18 <Connection_Confirm+0x14>
    7b14:	2c06      	cmp	r4, #6
    7b16:	d104      	bne.n	7b22 <Connection_Confirm+0x1e>
    {
#if defined (ENABLE_CONSOLE)
		printf("\r\nStarted Wireless Communication on Channel %u\r\n", currentChannel) ;
    7b18:	4b04      	ldr	r3, [pc, #16]	; (7b2c <Connection_Confirm+0x28>)
    7b1a:	7819      	ldrb	r1, [r3, #0]
    7b1c:	4804      	ldr	r0, [pc, #16]	; (7b30 <Connection_Confirm+0x2c>)
    7b1e:	4b02      	ldr	r3, [pc, #8]	; (7b28 <Connection_Confirm+0x24>)
    7b20:	4798      	blx	r3
		//DumpConnection(0xFF) ;
#endif // #if defined (ENABLE_CONSOLE)

	}
}
    7b22:	bd10      	pop	{r4, pc}
    7b24:	00018650 	.word	0x00018650
    7b28:	00017201 	.word	0x00017201
    7b2c:	20000011 	.word	0x20000011
    7b30:	00018670 	.word	0x00018670

00007b34 <Scan_Confirm>:
{
    7b34:	b5f0      	push	{r4, r5, r6, r7, lr}
    7b36:	46de      	mov	lr, fp
    7b38:	4657      	mov	r7, sl
    7b3a:	464e      	mov	r6, r9
    7b3c:	4645      	mov	r5, r8
    7b3e:	b5e0      	push	{r5, r6, r7, lr}
    7b40:	b083      	sub	sp, #12
    7b42:	0003      	movs	r3, r0
    7b44:	9001      	str	r0, [sp, #4]
    7b46:	468b      	mov	fp, r1
	for(uint8_t count =0; count <= ActiveScanResultCount-1; count++ )
    7b48:	3b01      	subs	r3, #1
    7b4a:	4699      	mov	r9, r3
    7b4c:	d440      	bmi.n	7bd0 <Scan_Confirm+0x9c>
    7b4e:	2400      	movs	r4, #0
    7b50:	2300      	movs	r3, #0
    7b52:	4698      	mov	r8, r3
		printf("\nID\tDevice Address \t\tCapability \tPAN ID \tChannel \n");
    7b54:	4b24      	ldr	r3, [pc, #144]	; (7be8 <Scan_Confirm+0xb4>)
    7b56:	469a      	mov	sl, r3
		printf("%02x",count+1);
    7b58:	464b      	mov	r3, r9
    7b5a:	9300      	str	r3, [sp, #0]
    7b5c:	e01f      	b.n	7b9e <Scan_Confirm+0x6a>
		printf("\t");
    7b5e:	2009      	movs	r0, #9
    7b60:	4e22      	ldr	r6, [pc, #136]	; (7bec <Scan_Confirm+0xb8>)
    7b62:	47b0      	blx	r6
		printf("%02x",(ActiveScanResult[count].Capability.Val));	
    7b64:	464b      	mov	r3, r9
    7b66:	7b99      	ldrb	r1, [r3, #14]
    7b68:	4c21      	ldr	r4, [pc, #132]	; (7bf0 <Scan_Confirm+0xbc>)
    7b6a:	0020      	movs	r0, r4
    7b6c:	4d21      	ldr	r5, [pc, #132]	; (7bf4 <Scan_Confirm+0xc0>)
    7b6e:	47a8      	blx	r5
		printf("\t\t");
    7b70:	4821      	ldr	r0, [pc, #132]	; (7bf8 <Scan_Confirm+0xc4>)
    7b72:	47a8      	blx	r5
		printf("%02x",(ActiveScanResult[count].PANID.Val));
    7b74:	464b      	mov	r3, r9
    7b76:	8959      	ldrh	r1, [r3, #10]
    7b78:	0020      	movs	r0, r4
    7b7a:	47a8      	blx	r5
		printf("\t");
    7b7c:	2009      	movs	r0, #9
    7b7e:	47b0      	blx	r6
		printf("%02x",ActiveScanResult[count].Channel);
    7b80:	464b      	mov	r3, r9
    7b82:	7819      	ldrb	r1, [r3, #0]
    7b84:	0020      	movs	r0, r4
    7b86:	47a8      	blx	r5
		printf("\r\n");
    7b88:	481c      	ldr	r0, [pc, #112]	; (7bfc <Scan_Confirm+0xc8>)
    7b8a:	4b17      	ldr	r3, [pc, #92]	; (7be8 <Scan_Confirm+0xb4>)
    7b8c:	4798      	blx	r3
	for(uint8_t count =0; count <= ActiveScanResultCount-1; count++ )
    7b8e:	4643      	mov	r3, r8
    7b90:	3301      	adds	r3, #1
    7b92:	b2db      	uxtb	r3, r3
    7b94:	4698      	mov	r8, r3
    7b96:	001c      	movs	r4, r3
    7b98:	9b00      	ldr	r3, [sp, #0]
    7b9a:	4598      	cmp	r8, r3
    7b9c:	dc18      	bgt.n	7bd0 <Scan_Confirm+0x9c>
		printf("\nID\tDevice Address \t\tCapability \tPAN ID \tChannel \n");
    7b9e:	4818      	ldr	r0, [pc, #96]	; (7c00 <Scan_Confirm+0xcc>)
    7ba0:	47d0      	blx	sl
		printf("%02x",count+1);
    7ba2:	1c61      	adds	r1, r4, #1
    7ba4:	4812      	ldr	r0, [pc, #72]	; (7bf0 <Scan_Confirm+0xbc>)
    7ba6:	4b13      	ldr	r3, [pc, #76]	; (7bf4 <Scan_Confirm+0xc0>)
    7ba8:	4798      	blx	r3
		printf("\t");
    7baa:	2009      	movs	r0, #9
    7bac:	4b0f      	ldr	r3, [pc, #60]	; (7bec <Scan_Confirm+0xb8>)
    7bae:	4798      	blx	r3
				printf("%02x",ActiveScanResult[count].Address[MY_ADDRESS_LENGTH-1-j] );
    7bb0:	4643      	mov	r3, r8
    7bb2:	011b      	lsls	r3, r3, #4
    7bb4:	445b      	add	r3, fp
    7bb6:	4699      	mov	r9, r3
    7bb8:	001c      	movs	r4, r3
    7bba:	3408      	adds	r4, #8
    7bbc:	001f      	movs	r7, r3
    7bbe:	4e0c      	ldr	r6, [pc, #48]	; (7bf0 <Scan_Confirm+0xbc>)
    7bc0:	4d0c      	ldr	r5, [pc, #48]	; (7bf4 <Scan_Confirm+0xc0>)
    7bc2:	7821      	ldrb	r1, [r4, #0]
    7bc4:	0030      	movs	r0, r6
    7bc6:	47a8      	blx	r5
    7bc8:	3c01      	subs	r4, #1
		for(uint8_t j = 0; j < 8; j++)
    7bca:	42a7      	cmp	r7, r4
    7bcc:	d1f9      	bne.n	7bc2 <Scan_Confirm+0x8e>
    7bce:	e7c6      	b.n	7b5e <Scan_Confirm+0x2a>
	printf("\r\n Scan Operation Status: %d device found",ActiveScanResultCount); 
    7bd0:	9901      	ldr	r1, [sp, #4]
    7bd2:	480c      	ldr	r0, [pc, #48]	; (7c04 <Scan_Confirm+0xd0>)
    7bd4:	4b07      	ldr	r3, [pc, #28]	; (7bf4 <Scan_Confirm+0xc0>)
    7bd6:	4798      	blx	r3
}
    7bd8:	b003      	add	sp, #12
    7bda:	bc3c      	pop	{r2, r3, r4, r5}
    7bdc:	4690      	mov	r8, r2
    7bde:	4699      	mov	r9, r3
    7be0:	46a2      	mov	sl, r4
    7be2:	46ab      	mov	fp, r5
    7be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7be6:	46c0      	nop			; (mov r8, r8)
    7be8:	0001731d 	.word	0x0001731d
    7bec:	00017235 	.word	0x00017235
    7bf0:	0001847c 	.word	0x0001847c
    7bf4:	00017201 	.word	0x00017201
    7bf8:	00018780 	.word	0x00018780
    7bfc:	00018734 	.word	0x00018734
    7c00:	0001874c 	.word	0x0001874c
    7c04:	00018784 	.word	0x00018784

00007c08 <Initialize_LoRa>:
bool Initialize_LoRa(bool freezer_enable)
{
    7c08:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c0a:	b087      	sub	sp, #28
    7c0c:	0004      	movs	r4, r0
    uint8_t i;

	bool invalidIEEEAddrFlag = false;
	uint64_t invalidIEEEAddr;

    MiApp_SubscribeDataIndicationCallback(ReceivedDataIndication);
    7c0e:	4869      	ldr	r0, [pc, #420]	; (7db4 <Initialize_LoRa+0x1ac>)
    7c10:	4b69      	ldr	r3, [pc, #420]	; (7db8 <Initialize_LoRa+0x1b0>)
    7c12:	4798      	blx	r3
	
	if (freezer_enable)
    7c14:	2c00      	cmp	r4, #0
    7c16:	d036      	beq.n	7c86 <Initialize_LoRa+0x7e>
    {
        MiApp_ProtocolInit(NULL, NULL);
    7c18:	2100      	movs	r1, #0
    7c1a:	2000      	movs	r0, #0
    7c1c:	4b67      	ldr	r3, [pc, #412]	; (7dbc <Initialize_LoRa+0x1b4>)
    7c1e:	4798      	blx	r3
		srand(PHY_RandomReq());
    7c20:	4b67      	ldr	r3, [pc, #412]	; (7dc0 <Initialize_LoRa+0x1b8>)
    7c22:	4798      	blx	r3
    7c24:	4b67      	ldr	r3, [pc, #412]	; (7dc4 <Initialize_LoRa+0x1bc>)
    7c26:	4798      	blx	r3
		/* Check if a valid IEEE address is available.
		0x0000000000000000 and 0xFFFFFFFFFFFFFFFF is presumed to be invalid */
		/* Check if IEEE address is 0x0000000000000000 */
		memset((uint8_t *)&invalidIEEEAddr, 0x00, LONG_ADDR_LEN);
    7c28:	2200      	movs	r2, #0
    7c2a:	2300      	movs	r3, #0
    7c2c:	9204      	str	r2, [sp, #16]
    7c2e:	9305      	str	r3, [sp, #20]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    7c30:	4e65      	ldr	r6, [pc, #404]	; (7dc8 <Initialize_LoRa+0x1c0>)
    7c32:	3208      	adds	r2, #8
    7c34:	0031      	movs	r1, r6
    7c36:	a804      	add	r0, sp, #16
    7c38:	4d64      	ldr	r5, [pc, #400]	; (7dcc <Initialize_LoRa+0x1c4>)
    7c3a:	47a8      	blx	r5
    7c3c:	0004      	movs	r4, r0
		{
			invalidIEEEAddrFlag = true;
		}

		/* Check if IEEE address is 0xFFFFFFFFFFFFFFFF */
		memset((uint8_t *)&invalidIEEEAddr, 0xFF, LONG_ADDR_LEN);
    7c3e:	2201      	movs	r2, #1
    7c40:	4252      	negs	r2, r2
    7c42:	17d3      	asrs	r3, r2, #31
    7c44:	9204      	str	r2, [sp, #16]
    7c46:	9305      	str	r3, [sp, #20]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    7c48:	3209      	adds	r2, #9
    7c4a:	0031      	movs	r1, r6
    7c4c:	a804      	add	r0, sp, #16
    7c4e:	47a8      	blx	r5
    7c50:	2800      	cmp	r0, #0
    7c52:	d001      	beq.n	7c58 <Initialize_LoRa+0x50>
		{
			invalidIEEEAddrFlag = true;
		}
		
		if (invalidIEEEAddrFlag)
    7c54:	2c00      	cmp	r4, #0
    7c56:	d108      	bne.n	7c6a <Initialize_LoRa+0x62>
    7c58:	4c5b      	ldr	r4, [pc, #364]	; (7dc8 <Initialize_LoRa+0x1c0>)
    7c5a:	0026      	movs	r6, r4
    7c5c:	3608      	adds	r6, #8
			 * In production code this can be omitted.
			 */
			uint8_t* peui64 = (uint8_t *)&myLongAddress;
			for(i = 0; i<MY_ADDRESS_LENGTH; i++)
			{
				*peui64++ = (uint8_t)rand();
    7c5e:	4d5c      	ldr	r5, [pc, #368]	; (7dd0 <Initialize_LoRa+0x1c8>)
    7c60:	47a8      	blx	r5
    7c62:	7020      	strb	r0, [r4, #0]
    7c64:	3401      	adds	r4, #1
			for(i = 0; i<MY_ADDRESS_LENGTH; i++)
    7c66:	42b4      	cmp	r4, r6
    7c68:	d1fa      	bne.n	7c60 <Initialize_LoRa+0x58>
			}
		}
		PHY_SetIEEEAddr((uint8_t *)&myLongAddress);
    7c6a:	4857      	ldr	r0, [pc, #348]	; (7dc8 <Initialize_LoRa+0x1c0>)
    7c6c:	4b59      	ldr	r3, [pc, #356]	; (7dd4 <Initialize_LoRa+0x1cc>)
    7c6e:	4798      	blx	r3
#if defined(PROTOCOL_P2P)  
		DemoOutput_Instruction();
    7c70:	4b59      	ldr	r3, [pc, #356]	; (7dd8 <Initialize_LoRa+0x1d0>)
    7c72:	4798      	blx	r3
        DemoOutput_Instruction();
#endif    
    printf("\n Satt opp nettverk \r\n");
	}
	/* Create SW timer for transmission timeout */
	SwTimerCreate(&TxTimerId);
    7c74:	4859      	ldr	r0, [pc, #356]	; (7ddc <Initialize_LoRa+0x1d4>)
    7c76:	4b5a      	ldr	r3, [pc, #360]	; (7de0 <Initialize_LoRa+0x1d8>)
    7c78:	4798      	blx	r3
	printf("\n Kjort freezer \r\n");
    7c7a:	485a      	ldr	r0, [pc, #360]	; (7de4 <Initialize_LoRa+0x1dc>)
    7c7c:	4b5a      	ldr	r3, [pc, #360]	; (7de8 <Initialize_LoRa+0x1e0>)
    7c7e:	4798      	blx	r3
	
	return true;
}
    7c80:	2001      	movs	r0, #1
    7c82:	b007      	add	sp, #28
    7c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port_base->OUTSET.reg = pin_mask;
    7c86:	2280      	movs	r2, #128	; 0x80
    7c88:	0312      	lsls	r2, r2, #12
    7c8a:	4b58      	ldr	r3, [pc, #352]	; (7dec <Initialize_LoRa+0x1e4>)
    7c8c:	619a      	str	r2, [r3, #24]
        MiApp_ProtocolInit(NULL, NULL);
    7c8e:	2100      	movs	r1, #0
    7c90:	2000      	movs	r0, #0
    7c92:	4b4a      	ldr	r3, [pc, #296]	; (7dbc <Initialize_LoRa+0x1b4>)
    7c94:	4798      	blx	r3
		uint8_t txPower = 0x01 ; // 1 dBm
    7c96:	240a      	movs	r4, #10
    7c98:	446c      	add	r4, sp
    7c9a:	2301      	movs	r3, #1
    7c9c:	7023      	strb	r3, [r4, #0]
		PHY_SetTxPower(txPower) ;
    7c9e:	2001      	movs	r0, #1
    7ca0:	4b53      	ldr	r3, [pc, #332]	; (7df0 <Initialize_LoRa+0x1e8>)
    7ca2:	4798      	blx	r3
		txPower = 255 ;
    7ca4:	27ff      	movs	r7, #255	; 0xff
    7ca6:	7027      	strb	r7, [r4, #0]
		RADIO_GetAttr(OUTPUT_POWER, (void *)&txPower) ;
    7ca8:	0021      	movs	r1, r4
    7caa:	2004      	movs	r0, #4
    7cac:	4e51      	ldr	r6, [pc, #324]	; (7df4 <Initialize_LoRa+0x1ec>)
    7cae:	47b0      	blx	r6
		printf("\nCurrent Tx output power: %d\r\n", txPower) ;
    7cb0:	7821      	ldrb	r1, [r4, #0]
    7cb2:	4851      	ldr	r0, [pc, #324]	; (7df8 <Initialize_LoRa+0x1f0>)
    7cb4:	4c51      	ldr	r4, [pc, #324]	; (7dfc <Initialize_LoRa+0x1f4>)
    7cb6:	47a0      	blx	r4
		uint8_t paBoost = 255 ;
    7cb8:	250b      	movs	r5, #11
    7cba:	446d      	add	r5, sp
    7cbc:	702f      	strb	r7, [r5, #0]
		RADIO_GetAttr(PABOOST, (void *)&paBoost) ;
    7cbe:	0029      	movs	r1, r5
    7cc0:	2008      	movs	r0, #8
    7cc2:	47b0      	blx	r6
		printf("PA BOOST status: %d\r\n", paBoost) ;
    7cc4:	7829      	ldrb	r1, [r5, #0]
    7cc6:	484e      	ldr	r0, [pc, #312]	; (7e00 <Initialize_LoRa+0x1f8>)
    7cc8:	47a0      	blx	r4
		RadioDataRate_t sf = SF_7 ;
    7cca:	ad03      	add	r5, sp, #12
    7ccc:	2307      	movs	r3, #7
    7cce:	702b      	strb	r3, [r5, #0]
		PHY_GetAttribute(SPREADING_FACTOR, (void *)&sf) ;
    7cd0:	0029      	movs	r1, r5
    7cd2:	2016      	movs	r0, #22
    7cd4:	4e4b      	ldr	r6, [pc, #300]	; (7e04 <Initialize_LoRa+0x1fc>)
    7cd6:	47b0      	blx	r6
		printf("Current SF: SF%d\r\n", sf) ;
    7cd8:	7829      	ldrb	r1, [r5, #0]
    7cda:	484b      	ldr	r0, [pc, #300]	; (7e08 <Initialize_LoRa+0x200>)
    7cdc:	47a0      	blx	r4
		PHY_GetAttribute(BANDWIDTH, (void *)&bw) ;
    7cde:	250d      	movs	r5, #13
    7ce0:	446d      	add	r5, sp
    7ce2:	0029      	movs	r1, r5
    7ce4:	2007      	movs	r0, #7
    7ce6:	47b0      	blx	r6
		printf("Current BW (125kHz=7, 250kHz=8, 500kHz=9): %d\r\n", bw) ;
    7ce8:	7829      	ldrb	r1, [r5, #0]
    7cea:	4848      	ldr	r0, [pc, #288]	; (7e0c <Initialize_LoRa+0x204>)
    7cec:	47a0      	blx	r4
		srand(PHY_RandomReq());
    7cee:	4b34      	ldr	r3, [pc, #208]	; (7dc0 <Initialize_LoRa+0x1b8>)
    7cf0:	4798      	blx	r3
    7cf2:	4b34      	ldr	r3, [pc, #208]	; (7dc4 <Initialize_LoRa+0x1bc>)
    7cf4:	4798      	blx	r3
		memset((uint8_t *)&invalidIEEEAddr, 0x00, LONG_ADDR_LEN);
    7cf6:	2200      	movs	r2, #0
    7cf8:	2300      	movs	r3, #0
    7cfa:	9204      	str	r2, [sp, #16]
    7cfc:	9305      	str	r3, [sp, #20]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    7cfe:	4e32      	ldr	r6, [pc, #200]	; (7dc8 <Initialize_LoRa+0x1c0>)
    7d00:	3208      	adds	r2, #8
    7d02:	0031      	movs	r1, r6
    7d04:	a804      	add	r0, sp, #16
    7d06:	4d31      	ldr	r5, [pc, #196]	; (7dcc <Initialize_LoRa+0x1c4>)
    7d08:	47a8      	blx	r5
    7d0a:	0004      	movs	r4, r0
		memset((uint8_t *)&invalidIEEEAddr, 0xFF, LONG_ADDR_LEN);
    7d0c:	2201      	movs	r2, #1
    7d0e:	4252      	negs	r2, r2
    7d10:	17d3      	asrs	r3, r2, #31
    7d12:	9204      	str	r2, [sp, #16]
    7d14:	9305      	str	r3, [sp, #20]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    7d16:	3209      	adds	r2, #9
    7d18:	0031      	movs	r1, r6
    7d1a:	a804      	add	r0, sp, #16
    7d1c:	47a8      	blx	r5
    7d1e:	2800      	cmp	r0, #0
    7d20:	d039      	beq.n	7d96 <Initialize_LoRa+0x18e>
		if (invalidIEEEAddrFlag)
    7d22:	2c00      	cmp	r4, #0
    7d24:	d037      	beq.n	7d96 <Initialize_LoRa+0x18e>
		PHY_SetIEEEAddr((uint8_t *)&myLongAddress);
    7d26:	4828      	ldr	r0, [pc, #160]	; (7dc8 <Initialize_LoRa+0x1c0>)
    7d28:	4b2a      	ldr	r3, [pc, #168]	; (7dd4 <Initialize_LoRa+0x1cc>)
    7d2a:	4798      	blx	r3
        MiApp_ConnectionMode(ENABLE_ALL_CONN);
    7d2c:	2000      	movs	r0, #0
    7d2e:	4b38      	ldr	r3, [pc, #224]	; (7e10 <Initialize_LoRa+0x208>)
    7d30:	4798      	blx	r3
        DemoOutput_Channel(myChannel, 0);
    7d32:	4c38      	ldr	r4, [pc, #224]	; (7e14 <Initialize_LoRa+0x20c>)
    7d34:	7820      	ldrb	r0, [r4, #0]
    7d36:	2100      	movs	r1, #0
    7d38:	4b37      	ldr	r3, [pc, #220]	; (7e18 <Initialize_LoRa+0x210>)
    7d3a:	4798      	blx	r3
		MiApp_SearchConnection(5, 0xFFFFFFFF, Scan_Confirm);
    7d3c:	4a37      	ldr	r2, [pc, #220]	; (7e1c <Initialize_LoRa+0x214>)
    7d3e:	2101      	movs	r1, #1
    7d40:	4249      	negs	r1, r1
    7d42:	2005      	movs	r0, #5
    7d44:	4b36      	ldr	r3, [pc, #216]	; (7e20 <Initialize_LoRa+0x218>)
    7d46:	4798      	blx	r3
        if( MiApp_Set(CHANNEL, &myChannel) == false )
    7d48:	0021      	movs	r1, r4
    7d4a:	2000      	movs	r0, #0
    7d4c:	4b35      	ldr	r3, [pc, #212]	; (7e24 <Initialize_LoRa+0x21c>)
    7d4e:	4798      	blx	r3
    7d50:	2800      	cmp	r0, #0
    7d52:	d02a      	beq.n	7daa <Initialize_LoRa+0x1a2>
		uint16_t broadcastAddress = 0xFFFF;
    7d54:	220e      	movs	r2, #14
    7d56:	446a      	add	r2, sp
    7d58:	2301      	movs	r3, #1
    7d5a:	425b      	negs	r3, r3
    7d5c:	8013      	strh	r3, [r2, #0]
		i = MiApp_EstablishConnection(myChannel, 0, (uint8_t*)&broadcastAddress, 0, Connection_Confirm);
    7d5e:	4b2d      	ldr	r3, [pc, #180]	; (7e14 <Initialize_LoRa+0x20c>)
    7d60:	7818      	ldrb	r0, [r3, #0]
    7d62:	4b31      	ldr	r3, [pc, #196]	; (7e28 <Initialize_LoRa+0x220>)
    7d64:	9300      	str	r3, [sp, #0]
    7d66:	2300      	movs	r3, #0
    7d68:	2100      	movs	r1, #0
    7d6a:	4c30      	ldr	r4, [pc, #192]	; (7e2c <Initialize_LoRa+0x224>)
    7d6c:	47a0      	blx	r4
        if( i != 0xFF )
    7d6e:	28ff      	cmp	r0, #255	; 0xff
    7d70:	d004      	beq.n	7d7c <Initialize_LoRa+0x174>
            DemoOutput_Channel(myChannel, 1);
    7d72:	4b28      	ldr	r3, [pc, #160]	; (7e14 <Initialize_LoRa+0x20c>)
    7d74:	7818      	ldrb	r0, [r3, #0]
    7d76:	2101      	movs	r1, #1
    7d78:	4b27      	ldr	r3, [pc, #156]	; (7e18 <Initialize_LoRa+0x210>)
    7d7a:	4798      	blx	r3
		DumpConnection(0xFF);
    7d7c:	20ff      	movs	r0, #255	; 0xff
    7d7e:	4b2c      	ldr	r3, [pc, #176]	; (7e30 <Initialize_LoRa+0x228>)
    7d80:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    7d82:	2280      	movs	r2, #128	; 0x80
    7d84:	0312      	lsls	r2, r2, #12
    7d86:	4b19      	ldr	r3, [pc, #100]	; (7dec <Initialize_LoRa+0x1e4>)
    7d88:	615a      	str	r2, [r3, #20]
        DemoOutput_Instruction();
    7d8a:	4b13      	ldr	r3, [pc, #76]	; (7dd8 <Initialize_LoRa+0x1d0>)
    7d8c:	4798      	blx	r3
    printf("\n Satt opp nettverk \r\n");
    7d8e:	4829      	ldr	r0, [pc, #164]	; (7e34 <Initialize_LoRa+0x22c>)
    7d90:	4b15      	ldr	r3, [pc, #84]	; (7de8 <Initialize_LoRa+0x1e0>)
    7d92:	4798      	blx	r3
    7d94:	e76e      	b.n	7c74 <Initialize_LoRa+0x6c>
    7d96:	4c0c      	ldr	r4, [pc, #48]	; (7dc8 <Initialize_LoRa+0x1c0>)
    7d98:	0026      	movs	r6, r4
    7d9a:	3608      	adds	r6, #8
				*peui64++ = (uint8_t)rand();
    7d9c:	4d0c      	ldr	r5, [pc, #48]	; (7dd0 <Initialize_LoRa+0x1c8>)
    7d9e:	47a8      	blx	r5
    7da0:	7020      	strb	r0, [r4, #0]
    7da2:	3401      	adds	r4, #1
			for(i = 0; i<MY_ADDRESS_LENGTH; i++)
    7da4:	42b4      	cmp	r4, r6
    7da6:	d1fa      	bne.n	7d9e <Initialize_LoRa+0x196>
    7da8:	e7bd      	b.n	7d26 <Initialize_LoRa+0x11e>
            DemoOutput_ChannelError(myChannel);
    7daa:	4b1a      	ldr	r3, [pc, #104]	; (7e14 <Initialize_LoRa+0x20c>)
    7dac:	7818      	ldrb	r0, [r3, #0]
    7dae:	4b22      	ldr	r3, [pc, #136]	; (7e38 <Initialize_LoRa+0x230>)
    7db0:	4798      	blx	r3
    7db2:	e7cf      	b.n	7d54 <Initialize_LoRa+0x14c>
    7db4:	00007969 	.word	0x00007969
    7db8:	0000b4c9 	.word	0x0000b4c9
    7dbc:	0000b07d 	.word	0x0000b07d
    7dc0:	0000ac75 	.word	0x0000ac75
    7dc4:	00017331 	.word	0x00017331
    7dc8:	20000014 	.word	0x20000014
    7dcc:	00016c29 	.word	0x00016c29
    7dd0:	0001738d 	.word	0x0001738d
    7dd4:	0000ac99 	.word	0x0000ac99
    7dd8:	000074fd 	.word	0x000074fd
    7ddc:	20000100 	.word	0x20000100
    7de0:	0000d545 	.word	0x0000d545
    7de4:	00018738 	.word	0x00018738
    7de8:	0001731d 	.word	0x0001731d
    7dec:	40002800 	.word	0x40002800
    7df0:	0000ab29 	.word	0x0000ab29
    7df4:	0000e6c5 	.word	0x0000e6c5
    7df8:	000186a4 	.word	0x000186a4
    7dfc:	00017201 	.word	0x00017201
    7e00:	000186c4 	.word	0x000186c4
    7e04:	0000ab71 	.word	0x0000ab71
    7e08:	000186dc 	.word	0x000186dc
    7e0c:	000186f0 	.word	0x000186f0
    7e10:	0000b499 	.word	0x0000b499
    7e14:	2000000d 	.word	0x2000000d
    7e18:	000074b5 	.word	0x000074b5
    7e1c:	00007b35 	.word	0x00007b35
    7e20:	0000c029 	.word	0x0000c029
    7e24:	0000b04d 	.word	0x0000b04d
    7e28:	00007b05 	.word	0x00007b05
    7e2c:	0000be35 	.word	0x0000be35
    7e30:	0000b1c5 	.word	0x0000b1c5
    7e34:	00018720 	.word	0x00018720
    7e38:	000075e5 	.word	0x000075e5

00007e3c <Run_Communication>:


void Run_Communication(void)
{
    7e3c:	b510      	push	{r4, lr}
    P2PTasks();
    7e3e:	4b05      	ldr	r3, [pc, #20]	; (7e54 <Run_Communication+0x18>)
    7e40:	4798      	blx	r3
	
	T_A_OnDemandOrder();
    7e42:	4b05      	ldr	r3, [pc, #20]	; (7e58 <Run_Communication+0x1c>)
    7e44:	4798      	blx	r3
	
	// Read buffer for received UART message
	usart_read_buffer_job(&UART_IO, (uint8_t*)rx_buffer_IO, AUTOPAX_UART_RX_BUFFER_LENGTH);
    7e46:	2201      	movs	r2, #1
    7e48:	4904      	ldr	r1, [pc, #16]	; (7e5c <Run_Communication+0x20>)
    7e4a:	4805      	ldr	r0, [pc, #20]	; (7e60 <Run_Communication+0x24>)
    7e4c:	4b05      	ldr	r3, [pc, #20]	; (7e64 <Run_Communication+0x28>)
    7e4e:	4798      	blx	r3
    7e50:	bd10      	pop	{r4, pc}
    7e52:	46c0      	nop			; (mov r8, r8)
    7e54:	0000b63d 	.word	0x0000b63d
    7e58:	00007791 	.word	0x00007791
    7e5c:	20001fa8 	.word	0x20001fa8
    7e60:	20001f74 	.word	0x20001f74
    7e64:	0000627d 	.word	0x0000627d

00007e68 <CompareData>:
     Otherwise it is the start address of the buffer that contains the data to compare with
    \param numberOfBytes The number of bytes to compare
    \note offset+numberOfBytes must be <= D_NV_SECTOR_SIZE (meaning sector crossing is not permitted)
*/
static bool CompareData(uint8_t sector, uint16_t offset, uint8_t *pBuffer, D_Nv_Size_t numberOfBytes)
{
    7e68:	b5f0      	push	{r4, r5, r6, r7, lr}
    7e6a:	46c6      	mov	lr, r8
    7e6c:	b500      	push	{lr}
    7e6e:	b084      	sub	sp, #16
    7e70:	0014      	movs	r4, r2
    7e72:	001f      	movs	r7, r3
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    7e74:	4b29      	ldr	r3, [pc, #164]	; (7f1c <CompareData+0xb4>)
    7e76:	18cb      	adds	r3, r1, r3
    7e78:	0340      	lsls	r0, r0, #13
    7e7a:	181d      	adds	r5, r3, r0
  uint8_t  buffer[16U];

  assert(numberOfBytes);
    7e7c:	2f00      	cmp	r7, #0
    7e7e:	d01a      	beq.n	7eb6 <CompareData+0x4e>
  assert(address <= D_NV_MEMORY_END);
    7e80:	4b27      	ldr	r3, [pc, #156]	; (7f20 <CompareData+0xb8>)
    7e82:	1e5a      	subs	r2, r3, #1
    7e84:	4295      	cmp	r5, r2
    7e86:	d81c      	bhi.n	7ec2 <CompareData+0x5a>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    7e88:	197a      	adds	r2, r7, r5
    7e8a:	4293      	cmp	r3, r2
    7e8c:	d31f      	bcc.n	7ece <CompareData+0x66>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    7e8e:	19c9      	adds	r1, r1, r7
    7e90:	2380      	movs	r3, #128	; 0x80
    7e92:	019b      	lsls	r3, r3, #6
    7e94:	4299      	cmp	r1, r3
    7e96:	d820      	bhi.n	7eda <CompareData+0x72>

  while(numberOfBytes)
  {
    uint16_t bytesToRead = MIN(sizeof(buffer), numberOfBytes);

    memcpy(buffer, (uint8_t FLASH_PTR *)address, bytesToRead);
    7e98:	4b22      	ldr	r3, [pc, #136]	; (7f24 <CompareData+0xbc>)
    7e9a:	4698      	mov	r8, r3
    uint16_t bytesToRead = MIN(sizeof(buffer), numberOfBytes);
    7e9c:	1c3e      	adds	r6, r7, #0
    7e9e:	2f10      	cmp	r7, #16
    7ea0:	d900      	bls.n	7ea4 <CompareData+0x3c>
    7ea2:	2610      	movs	r6, #16
    7ea4:	b2b6      	uxth	r6, r6
    memcpy(buffer, (uint8_t FLASH_PTR *)address, bytesToRead);
    7ea6:	0032      	movs	r2, r6
    7ea8:	0029      	movs	r1, r5
    7eaa:	4668      	mov	r0, sp
    7eac:	47c0      	blx	r8
    for (uint8_t i = 0U; i < bytesToRead; i++)
    7eae:	2e00      	cmp	r6, #0
    7eb0:	d028      	beq.n	7f04 <CompareData+0x9c>
    7eb2:	2300      	movs	r3, #0
    7eb4:	e01f      	b.n	7ef6 <CompareData+0x8e>
  assert(numberOfBytes);
    7eb6:	4b1c      	ldr	r3, [pc, #112]	; (7f28 <CompareData+0xc0>)
    7eb8:	4a1c      	ldr	r2, [pc, #112]	; (7f2c <CompareData+0xc4>)
    7eba:	21d9      	movs	r1, #217	; 0xd9
    7ebc:	481c      	ldr	r0, [pc, #112]	; (7f30 <CompareData+0xc8>)
    7ebe:	4c1d      	ldr	r4, [pc, #116]	; (7f34 <CompareData+0xcc>)
    7ec0:	47a0      	blx	r4
  assert(address <= D_NV_MEMORY_END);
    7ec2:	4b1d      	ldr	r3, [pc, #116]	; (7f38 <CompareData+0xd0>)
    7ec4:	4a19      	ldr	r2, [pc, #100]	; (7f2c <CompareData+0xc4>)
    7ec6:	21da      	movs	r1, #218	; 0xda
    7ec8:	4819      	ldr	r0, [pc, #100]	; (7f30 <CompareData+0xc8>)
    7eca:	4c1a      	ldr	r4, [pc, #104]	; (7f34 <CompareData+0xcc>)
    7ecc:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    7ece:	4b1b      	ldr	r3, [pc, #108]	; (7f3c <CompareData+0xd4>)
    7ed0:	4a16      	ldr	r2, [pc, #88]	; (7f2c <CompareData+0xc4>)
    7ed2:	21db      	movs	r1, #219	; 0xdb
    7ed4:	4816      	ldr	r0, [pc, #88]	; (7f30 <CompareData+0xc8>)
    7ed6:	4c17      	ldr	r4, [pc, #92]	; (7f34 <CompareData+0xcc>)
    7ed8:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    7eda:	4b19      	ldr	r3, [pc, #100]	; (7f40 <CompareData+0xd8>)
    7edc:	4a13      	ldr	r2, [pc, #76]	; (7f2c <CompareData+0xc4>)
    7ede:	21dc      	movs	r1, #220	; 0xdc
    7ee0:	4813      	ldr	r0, [pc, #76]	; (7f30 <CompareData+0xc8>)
    7ee2:	4c14      	ldr	r4, [pc, #80]	; (7f34 <CompareData+0xcc>)
    7ee4:	47a0      	blx	r4
      if (buffer[i] != ((pBuffer != NULL) ? *(pBuffer++) : 0xFF))
    7ee6:	21ff      	movs	r1, #255	; 0xff
    7ee8:	4291      	cmp	r1, r2
    7eea:	d112      	bne.n	7f12 <CompareData+0xaa>
    for (uint8_t i = 0U; i < bytesToRead; i++)
    7eec:	3301      	adds	r3, #1
    7eee:	b2db      	uxtb	r3, r3
    7ef0:	b29a      	uxth	r2, r3
    7ef2:	4296      	cmp	r6, r2
    7ef4:	d906      	bls.n	7f04 <CompareData+0x9c>
      if (buffer[i] != ((pBuffer != NULL) ? *(pBuffer++) : 0xFF))
    7ef6:	466a      	mov	r2, sp
    7ef8:	5cd2      	ldrb	r2, [r2, r3]
    7efa:	2c00      	cmp	r4, #0
    7efc:	d0f3      	beq.n	7ee6 <CompareData+0x7e>
    7efe:	7821      	ldrb	r1, [r4, #0]
    7f00:	3401      	adds	r4, #1
    7f02:	e7f1      	b.n	7ee8 <CompareData+0x80>
        return false;

    numberOfBytes -= bytesToRead;
    7f04:	1bbf      	subs	r7, r7, r6
    7f06:	b2bf      	uxth	r7, r7
    address += bytesToRead;
    7f08:	19ad      	adds	r5, r5, r6
  while(numberOfBytes)
    7f0a:	2f00      	cmp	r7, #0
    7f0c:	d1c6      	bne.n	7e9c <CompareData+0x34>
  }

  return true;
    7f0e:	2001      	movs	r0, #1
    7f10:	e000      	b.n	7f14 <CompareData+0xac>
        return false;
    7f12:	2000      	movs	r0, #0
}
    7f14:	b004      	add	sp, #16
    7f16:	bc04      	pop	{r2}
    7f18:	4690      	mov	r8, r2
    7f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7f1c:	00000400 	.word	0x00000400
    7f20:	00004400 	.word	0x00004400
    7f24:	00016c47 	.word	0x00016c47
    7f28:	000187b0 	.word	0x000187b0
    7f2c:	00018938 	.word	0x00018938
    7f30:	000187c0 	.word	0x000187c0
    7f34:	00016b85 	.word	0x00016b85
    7f38:	00018804 	.word	0x00018804
    7f3c:	00018820 	.word	0x00018820
    7f40:	00018854 	.word	0x00018854

00007f44 <D_Nv_Init>:
{
    7f44:	b510      	push	{r4, lr}
  assert ((D_NV_MEMORY_START % NVMCTRL_ROW_SIZE) == 0U);
    7f46:	4a0b      	ldr	r2, [pc, #44]	; (7f74 <D_Nv_Init+0x30>)
    7f48:	23ff      	movs	r3, #255	; 0xff
    7f4a:	421a      	tst	r2, r3
    7f4c:	d106      	bne.n	7f5c <D_Nv_Init+0x18>
  assert((D_NV_MEMORY_END - D_NV_MEMORY_START + 1U) == D_NV_MEMORY_SIZE);
    7f4e:	4b0a      	ldr	r3, [pc, #40]	; (7f78 <D_Nv_Init+0x34>)
    7f50:	490a      	ldr	r1, [pc, #40]	; (7f7c <D_Nv_Init+0x38>)
    7f52:	468c      	mov	ip, r1
    7f54:	4463      	add	r3, ip
    7f56:	4293      	cmp	r3, r2
    7f58:	d106      	bne.n	7f68 <D_Nv_Init+0x24>
}
    7f5a:	bd10      	pop	{r4, pc}
  assert ((D_NV_MEMORY_START % NVMCTRL_ROW_SIZE) == 0U);
    7f5c:	4b08      	ldr	r3, [pc, #32]	; (7f80 <D_Nv_Init+0x3c>)
    7f5e:	4a09      	ldr	r2, [pc, #36]	; (7f84 <D_Nv_Init+0x40>)
    7f60:	2159      	movs	r1, #89	; 0x59
    7f62:	4809      	ldr	r0, [pc, #36]	; (7f88 <D_Nv_Init+0x44>)
    7f64:	4c09      	ldr	r4, [pc, #36]	; (7f8c <D_Nv_Init+0x48>)
    7f66:	47a0      	blx	r4
  assert((D_NV_MEMORY_END - D_NV_MEMORY_START + 1U) == D_NV_MEMORY_SIZE);
    7f68:	4b09      	ldr	r3, [pc, #36]	; (7f90 <D_Nv_Init+0x4c>)
    7f6a:	4a06      	ldr	r2, [pc, #24]	; (7f84 <D_Nv_Init+0x40>)
    7f6c:	215d      	movs	r1, #93	; 0x5d
    7f6e:	4806      	ldr	r0, [pc, #24]	; (7f88 <D_Nv_Init+0x44>)
    7f70:	4c06      	ldr	r4, [pc, #24]	; (7f8c <D_Nv_Init+0x48>)
    7f72:	47a0      	blx	r4
    7f74:	00000400 	.word	0x00000400
    7f78:	00004400 	.word	0x00004400
    7f7c:	ffffc000 	.word	0xffffc000
    7f80:	00018884 	.word	0x00018884
    7f84:	000188f4 	.word	0x000188f4
    7f88:	000187c0 	.word	0x000187c0
    7f8c:	00016b85 	.word	0x00016b85
    7f90:	000188b4 	.word	0x000188b4

00007f94 <D_Nv_Read_Impl>:
{
    7f94:	b570      	push	{r4, r5, r6, lr}
    7f96:	0015      	movs	r5, r2
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    7f98:	0344      	lsls	r4, r0, #13
    7f9a:	4813      	ldr	r0, [pc, #76]	; (7fe8 <D_Nv_Read_Impl+0x54>)
    7f9c:	1808      	adds	r0, r1, r0
    7f9e:	1824      	adds	r4, r4, r0
  assert(address <= D_NV_MEMORY_END);
    7fa0:	4a12      	ldr	r2, [pc, #72]	; (7fec <D_Nv_Read_Impl+0x58>)
    7fa2:	1e50      	subs	r0, r2, #1
    7fa4:	4284      	cmp	r4, r0
    7fa6:	d80d      	bhi.n	7fc4 <D_Nv_Read_Impl+0x30>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    7fa8:	18e0      	adds	r0, r4, r3
    7faa:	4282      	cmp	r2, r0
    7fac:	d310      	bcc.n	7fd0 <D_Nv_Read_Impl+0x3c>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    7fae:	18c9      	adds	r1, r1, r3
    7fb0:	2280      	movs	r2, #128	; 0x80
    7fb2:	0192      	lsls	r2, r2, #6
    7fb4:	4291      	cmp	r1, r2
    7fb6:	d811      	bhi.n	7fdc <D_Nv_Read_Impl+0x48>
  memcpy(pBuffer, (uint8_t FLASH_PTR *)address, numberOfBytes);
    7fb8:	001a      	movs	r2, r3
    7fba:	0021      	movs	r1, r4
    7fbc:	0028      	movs	r0, r5
    7fbe:	4b0c      	ldr	r3, [pc, #48]	; (7ff0 <D_Nv_Read_Impl+0x5c>)
    7fc0:	4798      	blx	r3
}
    7fc2:	bd70      	pop	{r4, r5, r6, pc}
  assert(address <= D_NV_MEMORY_END);
    7fc4:	4b0b      	ldr	r3, [pc, #44]	; (7ff4 <D_Nv_Read_Impl+0x60>)
    7fc6:	4a0c      	ldr	r2, [pc, #48]	; (7ff8 <D_Nv_Read_Impl+0x64>)
    7fc8:	2172      	movs	r1, #114	; 0x72
    7fca:	480c      	ldr	r0, [pc, #48]	; (7ffc <D_Nv_Read_Impl+0x68>)
    7fcc:	4c0c      	ldr	r4, [pc, #48]	; (8000 <D_Nv_Read_Impl+0x6c>)
    7fce:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    7fd0:	4b0c      	ldr	r3, [pc, #48]	; (8004 <D_Nv_Read_Impl+0x70>)
    7fd2:	4a09      	ldr	r2, [pc, #36]	; (7ff8 <D_Nv_Read_Impl+0x64>)
    7fd4:	2173      	movs	r1, #115	; 0x73
    7fd6:	4809      	ldr	r0, [pc, #36]	; (7ffc <D_Nv_Read_Impl+0x68>)
    7fd8:	4c09      	ldr	r4, [pc, #36]	; (8000 <D_Nv_Read_Impl+0x6c>)
    7fda:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    7fdc:	4b0a      	ldr	r3, [pc, #40]	; (8008 <D_Nv_Read_Impl+0x74>)
    7fde:	4a06      	ldr	r2, [pc, #24]	; (7ff8 <D_Nv_Read_Impl+0x64>)
    7fe0:	2174      	movs	r1, #116	; 0x74
    7fe2:	4806      	ldr	r0, [pc, #24]	; (7ffc <D_Nv_Read_Impl+0x68>)
    7fe4:	4c06      	ldr	r4, [pc, #24]	; (8000 <D_Nv_Read_Impl+0x6c>)
    7fe6:	47a0      	blx	r4
    7fe8:	00000400 	.word	0x00000400
    7fec:	00004400 	.word	0x00004400
    7ff0:	00016c47 	.word	0x00016c47
    7ff4:	00018804 	.word	0x00018804
    7ff8:	00018900 	.word	0x00018900
    7ffc:	000187c0 	.word	0x000187c0
    8000:	00016b85 	.word	0x00016b85
    8004:	00018820 	.word	0x00018820
    8008:	00018854 	.word	0x00018854

0000800c <D_Nv_Write_Impl>:
{
    800c:	b5f0      	push	{r4, r5, r6, r7, lr}
    800e:	46de      	mov	lr, fp
    8010:	4657      	mov	r7, sl
    8012:	464e      	mov	r6, r9
    8014:	4645      	mov	r5, r8
    8016:	b5e0      	push	{r5, r6, r7, lr}
    8018:	b093      	sub	sp, #76	; 0x4c
    801a:	9201      	str	r2, [sp, #4]
    801c:	469a      	mov	sl, r3
  uint32_t  address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    801e:	4c46      	ldr	r4, [pc, #280]	; (8138 <D_Nv_Write_Impl+0x12c>)
    8020:	190c      	adds	r4, r1, r4
    8022:	0340      	lsls	r0, r0, #13
    8024:	1825      	adds	r5, r4, r0
  assert(numberOfBytes);
    8026:	2b00      	cmp	r3, #0
    8028:	d047      	beq.n	80ba <D_Nv_Write_Impl+0xae>
  assert(address <= D_NV_MEMORY_END);
    802a:	4b44      	ldr	r3, [pc, #272]	; (813c <D_Nv_Write_Impl+0x130>)
    802c:	1e5a      	subs	r2, r3, #1
    802e:	4295      	cmp	r5, r2
    8030:	d849      	bhi.n	80c6 <D_Nv_Write_Impl+0xba>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    8032:	4652      	mov	r2, sl
    8034:	1952      	adds	r2, r2, r5
    8036:	4293      	cmp	r3, r2
    8038:	d34b      	bcc.n	80d2 <D_Nv_Write_Impl+0xc6>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    803a:	46d3      	mov	fp, sl
    803c:	4451      	add	r1, sl
    803e:	2380      	movs	r3, #128	; 0x80
    8040:	019b      	lsls	r3, r3, #6
    8042:	4299      	cmp	r1, r3
    8044:	d84b      	bhi.n	80de <D_Nv_Write_Impl+0xd2>
  if (s_pfSystemCheckCallback != NULL)
    8046:	4b3e      	ldr	r3, [pc, #248]	; (8140 <D_Nv_Write_Impl+0x134>)
    8048:	681b      	ldr	r3, [r3, #0]
    804a:	2b00      	cmp	r3, #0
    804c:	d000      	beq.n	8050 <D_Nv_Write_Impl+0x44>
    s_pfSystemCheckCallback();
    804e:	4798      	blx	r3
  pageOffset = address % NVMCTRL_PAGE_SIZE;
    8050:	273f      	movs	r7, #63	; 0x3f
    8052:	402f      	ands	r7, r5
  pageStart = address - pageOffset;
    8054:	1bec      	subs	r4, r5, r7
  numberOfPageBytes = MIN((NVMCTRL_PAGE_SIZE - pageOffset), numberOfBytes);
    8056:	2640      	movs	r6, #64	; 0x40
    8058:	1bf6      	subs	r6, r6, r7
    805a:	455e      	cmp	r6, fp
    805c:	dd00      	ble.n	8060 <D_Nv_Write_Impl+0x54>
    805e:	4656      	mov	r6, sl
    8060:	b2b3      	uxth	r3, r6
    8062:	469b      	mov	fp, r3
  memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    8064:	2240      	movs	r2, #64	; 0x40
    8066:	21ff      	movs	r1, #255	; 0xff
    8068:	a802      	add	r0, sp, #8
    806a:	4b36      	ldr	r3, [pc, #216]	; (8144 <D_Nv_Write_Impl+0x138>)
    806c:	4798      	blx	r3
  memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    806e:	003b      	movs	r3, r7
    8070:	aa02      	add	r2, sp, #8
    8072:	4694      	mov	ip, r2
    8074:	4463      	add	r3, ip
    8076:	9300      	str	r3, [sp, #0]
    8078:	0436      	lsls	r6, r6, #16
    807a:	0c37      	lsrs	r7, r6, #16
    807c:	003a      	movs	r2, r7
    807e:	9901      	ldr	r1, [sp, #4]
    8080:	0018      	movs	r0, r3
    8082:	4b31      	ldr	r3, [pc, #196]	; (8148 <D_Nv_Write_Impl+0x13c>)
    8084:	4798      	blx	r3
	cpu_irq_enter_critical();
    8086:	4b31      	ldr	r3, [pc, #196]	; (814c <D_Nv_Write_Impl+0x140>)
    8088:	4798      	blx	r3
    error_code = nvm_write_buffer(pageStart, page_buf, NVMCTRL_PAGE_SIZE);
    808a:	4e31      	ldr	r6, [pc, #196]	; (8150 <D_Nv_Write_Impl+0x144>)
    808c:	2240      	movs	r2, #64	; 0x40
    808e:	a902      	add	r1, sp, #8
    8090:	0020      	movs	r0, r4
    8092:	47b0      	blx	r6
  } while (error_code == STATUS_BUSY);
    8094:	2805      	cmp	r0, #5
    8096:	d0f9      	beq.n	808c <D_Nv_Write_Impl+0x80>
	cpu_irq_leave_critical();
    8098:	4b2e      	ldr	r3, [pc, #184]	; (8154 <D_Nv_Write_Impl+0x148>)
    809a:	4798      	blx	r3
  numberOfBytes -= numberOfPageBytes;
    809c:	4653      	mov	r3, sl
    809e:	465a      	mov	r2, fp
    80a0:	1a9e      	subs	r6, r3, r2
    80a2:	b2b6      	uxth	r6, r6
  address += numberOfPageBytes;
    80a4:	19ec      	adds	r4, r5, r7
  pBuffer += numberOfPageBytes;
    80a6:	9b01      	ldr	r3, [sp, #4]
    80a8:	4699      	mov	r9, r3
    80aa:	44b9      	add	r9, r7
  while (0U < numberOfBytes)
    80ac:	2e00      	cmp	r6, #0
    80ae:	d03b      	beq.n	8128 <D_Nv_Write_Impl+0x11c>
    memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    80b0:	4b24      	ldr	r3, [pc, #144]	; (8144 <D_Nv_Write_Impl+0x138>)
    80b2:	469b      	mov	fp, r3
    memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    80b4:	4b24      	ldr	r3, [pc, #144]	; (8148 <D_Nv_Write_Impl+0x13c>)
    80b6:	4698      	mov	r8, r3
    80b8:	e031      	b.n	811e <D_Nv_Write_Impl+0x112>
  assert(numberOfBytes);
    80ba:	4b27      	ldr	r3, [pc, #156]	; (8158 <D_Nv_Write_Impl+0x14c>)
    80bc:	4a27      	ldr	r2, [pc, #156]	; (815c <D_Nv_Write_Impl+0x150>)
    80be:	218a      	movs	r1, #138	; 0x8a
    80c0:	4827      	ldr	r0, [pc, #156]	; (8160 <D_Nv_Write_Impl+0x154>)
    80c2:	4c28      	ldr	r4, [pc, #160]	; (8164 <D_Nv_Write_Impl+0x158>)
    80c4:	47a0      	blx	r4
  assert(address <= D_NV_MEMORY_END);
    80c6:	4b28      	ldr	r3, [pc, #160]	; (8168 <D_Nv_Write_Impl+0x15c>)
    80c8:	4a24      	ldr	r2, [pc, #144]	; (815c <D_Nv_Write_Impl+0x150>)
    80ca:	218b      	movs	r1, #139	; 0x8b
    80cc:	4824      	ldr	r0, [pc, #144]	; (8160 <D_Nv_Write_Impl+0x154>)
    80ce:	4c25      	ldr	r4, [pc, #148]	; (8164 <D_Nv_Write_Impl+0x158>)
    80d0:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    80d2:	4b26      	ldr	r3, [pc, #152]	; (816c <D_Nv_Write_Impl+0x160>)
    80d4:	4a21      	ldr	r2, [pc, #132]	; (815c <D_Nv_Write_Impl+0x150>)
    80d6:	218c      	movs	r1, #140	; 0x8c
    80d8:	4821      	ldr	r0, [pc, #132]	; (8160 <D_Nv_Write_Impl+0x154>)
    80da:	4c22      	ldr	r4, [pc, #136]	; (8164 <D_Nv_Write_Impl+0x158>)
    80dc:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    80de:	4b24      	ldr	r3, [pc, #144]	; (8170 <D_Nv_Write_Impl+0x164>)
    80e0:	4a1e      	ldr	r2, [pc, #120]	; (815c <D_Nv_Write_Impl+0x150>)
    80e2:	218d      	movs	r1, #141	; 0x8d
    80e4:	481e      	ldr	r0, [pc, #120]	; (8160 <D_Nv_Write_Impl+0x154>)
    80e6:	4c1f      	ldr	r4, [pc, #124]	; (8164 <D_Nv_Write_Impl+0x158>)
    80e8:	47a0      	blx	r4
    numberOfPageBytes = MIN(NVMCTRL_PAGE_SIZE, numberOfBytes);
    80ea:	b29f      	uxth	r7, r3
    memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    80ec:	2240      	movs	r2, #64	; 0x40
    80ee:	21ff      	movs	r1, #255	; 0xff
    80f0:	a802      	add	r0, sp, #8
    80f2:	47d8      	blx	fp
    memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    80f4:	003a      	movs	r2, r7
    80f6:	4649      	mov	r1, r9
    80f8:	9800      	ldr	r0, [sp, #0]
    80fa:	47c0      	blx	r8
	cpu_irq_enter_critical();
    80fc:	4b13      	ldr	r3, [pc, #76]	; (814c <D_Nv_Write_Impl+0x140>)
    80fe:	4798      	blx	r3
      error_code = nvm_write_buffer(address, page_buf, NVMCTRL_PAGE_SIZE);
    8100:	4d13      	ldr	r5, [pc, #76]	; (8150 <D_Nv_Write_Impl+0x144>)
    8102:	2240      	movs	r2, #64	; 0x40
    8104:	a902      	add	r1, sp, #8
    8106:	0020      	movs	r0, r4
    8108:	47a8      	blx	r5
    } while (error_code == STATUS_BUSY);
    810a:	2805      	cmp	r0, #5
    810c:	d0f9      	beq.n	8102 <D_Nv_Write_Impl+0xf6>
	cpu_irq_leave_critical();
    810e:	4b11      	ldr	r3, [pc, #68]	; (8154 <D_Nv_Write_Impl+0x148>)
    8110:	4798      	blx	r3
    numberOfBytes -= numberOfPageBytes;
    8112:	1bf6      	subs	r6, r6, r7
    8114:	b2b6      	uxth	r6, r6
    address += numberOfPageBytes;
    8116:	19e4      	adds	r4, r4, r7
    pBuffer += numberOfPageBytes;
    8118:	44b9      	add	r9, r7
  while (0U < numberOfBytes)
    811a:	2e00      	cmp	r6, #0
    811c:	d004      	beq.n	8128 <D_Nv_Write_Impl+0x11c>
    numberOfPageBytes = MIN(NVMCTRL_PAGE_SIZE, numberOfBytes);
    811e:	1c33      	adds	r3, r6, #0
    8120:	2e40      	cmp	r6, #64	; 0x40
    8122:	d9e2      	bls.n	80ea <D_Nv_Write_Impl+0xde>
    8124:	2340      	movs	r3, #64	; 0x40
    8126:	e7e0      	b.n	80ea <D_Nv_Write_Impl+0xde>
}
    8128:	b013      	add	sp, #76	; 0x4c
    812a:	bc3c      	pop	{r2, r3, r4, r5}
    812c:	4690      	mov	r8, r2
    812e:	4699      	mov	r9, r3
    8130:	46a2      	mov	sl, r4
    8132:	46ab      	mov	fp, r5
    8134:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8136:	46c0      	nop			; (mov r8, r8)
    8138:	00000400 	.word	0x00000400
    813c:	00004400 	.word	0x00004400
    8140:	20000104 	.word	0x20000104
    8144:	00016c59 	.word	0x00016c59
    8148:	00016c47 	.word	0x00016c47
    814c:	00004569 	.word	0x00004569
    8150:	00004b41 	.word	0x00004b41
    8154:	000045a9 	.word	0x000045a9
    8158:	000187b0 	.word	0x000187b0
    815c:	00018910 	.word	0x00018910
    8160:	000187c0 	.word	0x000187c0
    8164:	00016b85 	.word	0x00016b85
    8168:	00018804 	.word	0x00018804
    816c:	00018820 	.word	0x00018820
    8170:	00018854 	.word	0x00018854

00008174 <D_Nv_EraseSector_Impl>:
{
    8174:	b570      	push	{r4, r5, r6, lr}
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE;
    8176:	0344      	lsls	r4, r0, #13
    8178:	480c      	ldr	r0, [pc, #48]	; (81ac <D_Nv_EraseSector_Impl+0x38>)
    817a:	1824      	adds	r4, r4, r0
  address &= ~(NVMCTRL_ROW_SIZE - 1);
    817c:	23ff      	movs	r3, #255	; 0xff
    817e:	439c      	bics	r4, r3
  assert(address <= D_NV_MEMORY_END);
    8180:	4b0b      	ldr	r3, [pc, #44]	; (81b0 <D_Nv_EraseSector_Impl+0x3c>)
    8182:	3b01      	subs	r3, #1
    8184:	2280      	movs	r2, #128	; 0x80
    8186:	0192      	lsls	r2, r2, #6
    8188:	18a6      	adds	r6, r4, r2
    818a:	429c      	cmp	r4, r3
    818c:	d807      	bhi.n	819e <D_Nv_EraseSector_Impl+0x2a>
    nvm_erase_row (address);
    818e:	4d09      	ldr	r5, [pc, #36]	; (81b4 <D_Nv_EraseSector_Impl+0x40>)
    8190:	0020      	movs	r0, r4
    8192:	47a8      	blx	r5
    address += NVMCTRL_ROW_SIZE;
    8194:	3401      	adds	r4, #1
    8196:	34ff      	adds	r4, #255	; 0xff
  for (uint8_t i = 0U; i < (D_NV_SECTOR_SIZE / NVMCTRL_ROW_SIZE); i++)
    8198:	42b4      	cmp	r4, r6
    819a:	d1f9      	bne.n	8190 <D_Nv_EraseSector_Impl+0x1c>
}
    819c:	bd70      	pop	{r4, r5, r6, pc}
  assert(address <= D_NV_MEMORY_END);
    819e:	4b06      	ldr	r3, [pc, #24]	; (81b8 <D_Nv_EraseSector_Impl+0x44>)
    81a0:	4a06      	ldr	r2, [pc, #24]	; (81bc <D_Nv_EraseSector_Impl+0x48>)
    81a2:	21c2      	movs	r1, #194	; 0xc2
    81a4:	4806      	ldr	r0, [pc, #24]	; (81c0 <D_Nv_EraseSector_Impl+0x4c>)
    81a6:	4c07      	ldr	r4, [pc, #28]	; (81c4 <D_Nv_EraseSector_Impl+0x50>)
    81a8:	47a0      	blx	r4
    81aa:	46c0      	nop			; (mov r8, r8)
    81ac:	00000400 	.word	0x00000400
    81b0:	00004400 	.word	0x00004400
    81b4:	00004c19 	.word	0x00004c19
    81b8:	00018804 	.word	0x00018804
    81bc:	00018920 	.word	0x00018920
    81c0:	000187c0 	.word	0x000187c0
    81c4:	00016b85 	.word	0x00016b85

000081c8 <D_Nv_IsEmpty_Impl>:
    \param numberOfBytes The number of bytes to check
    \returns true if the range is empty, FALSE otherwise.
    \note Sector crossing is not permitted
*/
bool D_Nv_IsEmpty(uint8_t sector, uint16_t offset, D_Nv_Size_t numberOfBytes)
{
    81c8:	b510      	push	{r4, lr}
    81ca:	0013      	movs	r3, r2
  return CompareData(sector, offset, NULL, numberOfBytes);
    81cc:	2200      	movs	r2, #0
    81ce:	4c01      	ldr	r4, [pc, #4]	; (81d4 <D_Nv_IsEmpty_Impl+0xc>)
    81d0:	47a0      	blx	r4
}
    81d2:	bd10      	pop	{r4, pc}
    81d4:	00007e69 	.word	0x00007e69

000081d8 <D_Nv_IsEqual_Impl>:
    \param[in] pBuffer The start address of the buffer that contains the data to compare with
    \param numberOfBytes The number of bytes to compare
    \note offset+numberOfBytes must be <= D_NV_SECTOR_SIZE (meaning sector crossing is not permitted)
*/
bool D_Nv_IsEqual(uint8_t sector, uint16_t offset, uint8_t *pBuffer, D_Nv_Size_t numberOfBytes)
{
    81d8:	b510      	push	{r4, lr}
  return CompareData(sector, offset, pBuffer, numberOfBytes);
    81da:	4c01      	ldr	r4, [pc, #4]	; (81e0 <D_Nv_IsEqual_Impl+0x8>)
    81dc:	47a0      	blx	r4
}
    81de:	bd10      	pop	{r4, pc}
    81e0:	00007e69 	.word	0x00007e69

000081e4 <PowerSupplyTooLow>:
/** Check the power supply.
    \returns TRUE if the power supply is too low, FALSE when the the power
             supply is OK or when there is no callback installed.
*/
static bool PowerSupplyTooLow()
{
    81e4:	b510      	push	{r4, lr}
    bool result = false;
    if ( s_powerSupplyCheckingFunction != NULL )
    81e6:	4b05      	ldr	r3, [pc, #20]	; (81fc <PowerSupplyTooLow+0x18>)
    81e8:	681b      	ldr	r3, [r3, #0]
    81ea:	2b00      	cmp	r3, #0
    81ec:	d004      	beq.n	81f8 <PowerSupplyTooLow+0x14>
    {
        if ( !s_powerSupplyCheckingFunction() )
    81ee:	4798      	blx	r3
    81f0:	2301      	movs	r3, #1
    81f2:	4058      	eors	r0, r3
    81f4:	b2c0      	uxtb	r0, r0
        {
            result = true;
        }
    }
    return result;
}
    81f6:	bd10      	pop	{r4, pc}
    bool result = false;
    81f8:	2000      	movs	r0, #0
    81fa:	e7fc      	b.n	81f6 <PowerSupplyTooLow+0x12>
    81fc:	20000278 	.word	0x20000278

00008200 <UpdateSectorHead>:
*/

static void UpdateSectorHead(uint16_t increment, ItemAlignment_t itemAlignment )
{
    // Adjust the sector head according to the increment and alignment given
    switch(itemAlignment)
    8200:	2901      	cmp	r1, #1
    8202:	d009      	beq.n	8218 <UpdateSectorHead+0x18>
    8204:	2900      	cmp	r1, #0
    8206:	d002      	beq.n	820e <UpdateSectorHead+0xe>
    8208:	2902      	cmp	r1, #2
    820a:	d00d      	beq.n	8228 <UpdateSectorHead+0x28>
           s_sectorHead = (s_sectorHead + increment + 0x003Fu) & 0xFFC0u;
           break;
        default:
           break;
    }
}
    820c:	4770      	bx	lr
           s_sectorHead = (s_sectorHead + increment);
    820e:	4b0a      	ldr	r3, [pc, #40]	; (8238 <UpdateSectorHead+0x38>)
    8210:	881a      	ldrh	r2, [r3, #0]
    8212:	1880      	adds	r0, r0, r2
    8214:	8018      	strh	r0, [r3, #0]
           break;
    8216:	e7f9      	b.n	820c <UpdateSectorHead+0xc>
           s_sectorHead = (s_sectorHead + increment + 0x000Fu) & 0xFFF0u;
    8218:	4a07      	ldr	r2, [pc, #28]	; (8238 <UpdateSectorHead+0x38>)
    821a:	8813      	ldrh	r3, [r2, #0]
    821c:	330f      	adds	r3, #15
    821e:	18c0      	adds	r0, r0, r3
    8220:	230f      	movs	r3, #15
    8222:	4398      	bics	r0, r3
    8224:	8010      	strh	r0, [r2, #0]
           break;
    8226:	e7f1      	b.n	820c <UpdateSectorHead+0xc>
           s_sectorHead = (s_sectorHead + increment + 0x003Fu) & 0xFFC0u;
    8228:	4a03      	ldr	r2, [pc, #12]	; (8238 <UpdateSectorHead+0x38>)
    822a:	8813      	ldrh	r3, [r2, #0]
    822c:	333f      	adds	r3, #63	; 0x3f
    822e:	18c0      	adds	r0, r0, r3
    8230:	233f      	movs	r3, #63	; 0x3f
    8232:	4398      	bics	r0, r3
    8234:	8010      	strh	r0, [r2, #0]
}
    8236:	e7e9      	b.n	820c <UpdateSectorHead+0xc>
    8238:	2000027e 	.word	0x2000027e

0000823c <ComputeCrc>:
    // item not found
    return 0x0000u;
}

static uint16_t ComputeCrc(uint8_t* pData, uint16_t length, uint16_t crc)
{
    823c:	b530      	push	{r4, r5, lr}
    for ( /* empty */ ; length != 0u; length-- )
    823e:	2900      	cmp	r1, #0
    8240:	d019      	beq.n	8276 <ComputeCrc+0x3a>
    {
        uint8_t x;
        uint8_t data;

        if (pData == NULL)
            data = 0xFF;
    8242:	24ff      	movs	r4, #255	; 0xff
    8244:	e013      	b.n	826e <ComputeCrc+0x32>
    8246:	0023      	movs	r3, r4
        else
            data = *pData;

        x = (uint8_t) ((crc >> 8) ^ data);
    8248:	0a15      	lsrs	r5, r2, #8
    824a:	406b      	eors	r3, r5
        x = x ^ (x >> 4);
    824c:	091d      	lsrs	r5, r3, #4
    824e:	406b      	eors	r3, r5
        crc = (crc << 8) ^ ((uint16_t) x << 12) ^ ((uint16_t) x << 5) ^ (uint16_t) x;
    8250:	0212      	lsls	r2, r2, #8
    8252:	405a      	eors	r2, r3
    8254:	031d      	lsls	r5, r3, #12
    8256:	406a      	eors	r2, r5
    8258:	015b      	lsls	r3, r3, #5
    825a:	405a      	eors	r2, r3
    825c:	b292      	uxth	r2, r2

        if ( pData != NULL )
          pData++;
    825e:	0003      	movs	r3, r0
    8260:	1e5d      	subs	r5, r3, #1
    8262:	41ab      	sbcs	r3, r5
    8264:	18c0      	adds	r0, r0, r3
    for ( /* empty */ ; length != 0u; length-- )
    8266:	3901      	subs	r1, #1
    8268:	b289      	uxth	r1, r1
    826a:	2900      	cmp	r1, #0
    826c:	d003      	beq.n	8276 <ComputeCrc+0x3a>
        if (pData == NULL)
    826e:	2800      	cmp	r0, #0
    8270:	d0e9      	beq.n	8246 <ComputeCrc+0xa>
            data = *pData;
    8272:	7803      	ldrb	r3, [r0, #0]
    8274:	e7e8      	b.n	8248 <ComputeCrc+0xc>
    }

    return crc;
}
    8276:	0010      	movs	r0, r2
    8278:	bd30      	pop	{r4, r5, pc}
    827a:	Address 0x0000827a is out of bounds.


0000827c <GatherData>:
       be copied to the flash memory \ref s_sectorHead in sector \ref s_sector.

*/

static bool GatherData(uint8_t sourceSector, uint16_t lastBlockPointer, uint16_t offset, uint16_t length, void* pData)
{
    827c:	b5f0      	push	{r4, r5, r6, r7, lr}
    827e:	46de      	mov	lr, fp
    8280:	4657      	mov	r7, sl
    8282:	b580      	push	{r7, lr}
    8284:	b089      	sub	sp, #36	; 0x24
    8286:	9001      	str	r0, [sp, #4]
    8288:	9102      	str	r1, [sp, #8]
    828a:	4693      	mov	fp, r2
    uint16_t blockStart;
    uint16_t blockEnd;
    uint16_t count;

    // prepare the correct pointer
    if ( pData != NULL )
    828c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    828e:	2a00      	cmp	r2, #0
    8290:	d00d      	beq.n	82ae <GatherData+0x32>
    {
        pDestination = (uint8_t*) pData + length;
    8292:	4692      	mov	sl, r2
    8294:	449a      	add	sl, r3

    // [readStart, readEnd> is the range of data that can be read during the current
    // pass over the blocks (the range includes readStart, but not readEnd).
    // it is initialized with the requested range
    uint16_t readStart = offset;
    uint16_t readEnd = offset + length;
    8296:	445b      	add	r3, fp
    8298:	b29d      	uxth	r5, r3

    // continue until we have all the data that was requested
    while ( readStart != readEnd )
    829a:	465e      	mov	r6, fp
    829c:	9c02      	ldr	r4, [sp, #8]
            sourcePointer -= count;
            pDestination -= count;
            D_Nv_Read(sourceSector, sourcePointer, (uint8_t*)pDestination, count);
        }
    }
    return true;
    829e:	2001      	movs	r0, #1
    while ( readStart != readEnd )
    82a0:	45ab      	cmp	fp, r5
    82a2:	d03e      	beq.n	8322 <GatherData+0xa6>
            D_Nv_Read(sourceSector, currentBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    82a4:	4f22      	ldr	r7, [pc, #136]	; (8330 <GatherData+0xb4>)
            if ( currentBlockPointer == 0x0000u )
    82a6:	2c00      	cmp	r4, #0
    82a8:	d108      	bne.n	82bc <GatherData+0x40>
                return false;
    82aa:	2000      	movs	r0, #0
    82ac:	e039      	b.n	8322 <GatherData+0xa6>
    uint8_t* pDestination = NULL;
    82ae:	2200      	movs	r2, #0
    82b0:	4692      	mov	sl, r2
    82b2:	e7f0      	b.n	8296 <GatherData+0x1a>
            currentBlockPointer = blockHeader.previousBlock;
    82b4:	ab04      	add	r3, sp, #16
    82b6:	895c      	ldrh	r4, [r3, #10]
            if ( currentBlockPointer == 0x0000u )
    82b8:	2c00      	cmp	r4, #0
    82ba:	d031      	beq.n	8320 <GatherData+0xa4>
            D_Nv_Read(sourceSector, currentBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    82bc:	2310      	movs	r3, #16
    82be:	aa04      	add	r2, sp, #16
    82c0:	0021      	movs	r1, r4
    82c2:	9801      	ldr	r0, [sp, #4]
    82c4:	47b8      	blx	r7
            blockStart = blockHeader.blockOffset;
    82c6:	ab04      	add	r3, sp, #16
    82c8:	889a      	ldrh	r2, [r3, #4]
            if ( (readEnd <= blockStart) || (readStart >= blockEnd) )
    82ca:	42aa      	cmp	r2, r5
    82cc:	d2f2      	bcs.n	82b4 <GatherData+0x38>
            blockEnd = blockHeader.blockOffset + blockHeader.blockLength;
    82ce:	88db      	ldrh	r3, [r3, #6]
    82d0:	18d3      	adds	r3, r2, r3
    82d2:	b29b      	uxth	r3, r3
            if ( (readEnd <= blockStart) || (readStart >= blockEnd) )
    82d4:	42b3      	cmp	r3, r6
    82d6:	d9ed      	bls.n	82b4 <GatherData+0x38>
            else if ( readEnd > blockEnd )
    82d8:	42ab      	cmp	r3, r5
    82da:	d201      	bcs.n	82e0 <GatherData+0x64>
                readStart = blockEnd;
    82dc:	001e      	movs	r6, r3
    82de:	e7e9      	b.n	82b4 <GatherData+0x38>
        uint16_t sourcePointer = (currentBlockPointer + BLOCK_HEADER_SIZE) + (readEnd - blockStart);
    82e0:	1aa9      	subs	r1, r5, r2
    82e2:	b289      	uxth	r1, r1
        if ( readStart < blockStart )
    82e4:	42b2      	cmp	r2, r6
    82e6:	d915      	bls.n	8314 <GatherData+0x98>
            currentBlockPointer = blockHeader.previousBlock;
    82e8:	ab04      	add	r3, sp, #16
    82ea:	895b      	ldrh	r3, [r3, #10]
    82ec:	9303      	str	r3, [sp, #12]
            count = readEnd - blockStart;
    82ee:	000b      	movs	r3, r1
        readEnd -= count;
    82f0:	1aed      	subs	r5, r5, r3
    82f2:	b2ad      	uxth	r5, r5
        if ( pDestination != NULL)
    82f4:	4652      	mov	r2, sl
    82f6:	2a00      	cmp	r2, #0
    82f8:	d008      	beq.n	830c <GatherData+0x90>
        uint16_t sourcePointer = (currentBlockPointer + BLOCK_HEADER_SIZE) + (readEnd - blockStart);
    82fa:	3410      	adds	r4, #16
    82fc:	1909      	adds	r1, r1, r4
            pDestination -= count;
    82fe:	1ad2      	subs	r2, r2, r3
    8300:	4692      	mov	sl, r2
            sourcePointer -= count;
    8302:	1ac9      	subs	r1, r1, r3
            D_Nv_Read(sourceSector, sourcePointer, (uint8_t*)pDestination, count);
    8304:	b289      	uxth	r1, r1
    8306:	9801      	ldr	r0, [sp, #4]
    8308:	4c09      	ldr	r4, [pc, #36]	; (8330 <GatherData+0xb4>)
    830a:	47a0      	blx	r4
    while ( readStart != readEnd )
    830c:	42ae      	cmp	r6, r5
    830e:	d00d      	beq.n	832c <GatherData+0xb0>
    8310:	9c03      	ldr	r4, [sp, #12]
    8312:	e7c8      	b.n	82a6 <GatherData+0x2a>
            count = readEnd - readStart;
    8314:	1bab      	subs	r3, r5, r6
    8316:	b29b      	uxth	r3, r3
            readStart = offset;
    8318:	465e      	mov	r6, fp
            currentBlockPointer = lastBlockPointer;
    831a:	9a02      	ldr	r2, [sp, #8]
    831c:	9203      	str	r2, [sp, #12]
    831e:	e7e7      	b.n	82f0 <GatherData+0x74>
                return false;
    8320:	2000      	movs	r0, #0
}
    8322:	b009      	add	sp, #36	; 0x24
    8324:	bc0c      	pop	{r2, r3}
    8326:	4692      	mov	sl, r2
    8328:	469b      	mov	fp, r3
    832a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return true;
    832c:	2001      	movs	r0, #1
    832e:	e7f8      	b.n	8322 <GatherData+0xa6>
    8330:	00007f95 	.word	0x00007f95

00008334 <ComputeDataCrc>:
{
    8334:	b5f0      	push	{r4, r5, r6, r7, lr}
    8336:	46de      	mov	lr, fp
    8338:	4647      	mov	r7, r8
    833a:	b580      	push	{r7, lr}
    833c:	b087      	sub	sp, #28
    833e:	9004      	str	r0, [sp, #16]
    8340:	9105      	str	r1, [sp, #20]
    length = pBlockHeader->blockLength;
    8342:	7995      	ldrb	r5, [r2, #6]
    8344:	79d3      	ldrb	r3, [r2, #7]
    8346:	021b      	lsls	r3, r3, #8
    8348:	431d      	orrs	r5, r3
    offset = pBlockHeader->blockOffset;
    834a:	7917      	ldrb	r7, [r2, #4]
    834c:	7953      	ldrb	r3, [r2, #5]
    834e:	021b      	lsls	r3, r3, #8
    8350:	431f      	orrs	r7, r3
    for(int8_t i= (length/sizeof(dataBlock)); i>=0; i--)
    8352:	0a2c      	lsrs	r4, r5, #8
    8354:	b264      	sxtb	r4, r4
    8356:	2c00      	cmp	r4, #0
    8358:	db2f      	blt.n	83ba <ComputeDataCrc+0x86>
    835a:	4b1c      	ldr	r3, [pc, #112]	; (83cc <ComputeDataCrc+0x98>)
    835c:	9303      	str	r3, [sp, #12]
            crc = ComputeCrc(((uint8_t*) &dataBlock), dataLength, crc);
    835e:	4b1c      	ldr	r3, [pc, #112]	; (83d0 <ComputeDataCrc+0x9c>)
    8360:	4698      	mov	r8, r3
    8362:	e011      	b.n	8388 <ComputeDataCrc+0x54>
        if (dataLength == 0)
    8364:	2d00      	cmp	r5, #0
    8366:	d02a      	beq.n	83be <ComputeDataCrc+0x8a>
        if (GatherData(sourceSector, blockPointer, offset, dataLength, dataBlock))
    8368:	4b1a      	ldr	r3, [pc, #104]	; (83d4 <ComputeDataCrc+0xa0>)
    836a:	9300      	str	r3, [sp, #0]
    836c:	002b      	movs	r3, r5
    836e:	003a      	movs	r2, r7
    8370:	9905      	ldr	r1, [sp, #20]
    8372:	9804      	ldr	r0, [sp, #16]
    8374:	4e18      	ldr	r6, [pc, #96]	; (83d8 <ComputeDataCrc+0xa4>)
    8376:	47b0      	blx	r6
    8378:	2800      	cmp	r0, #0
    837a:	d020      	beq.n	83be <ComputeDataCrc+0x8a>
    837c:	0029      	movs	r1, r5
    837e:	e015      	b.n	83ac <ComputeDataCrc+0x78>
    8380:	3c01      	subs	r4, #1
    8382:	b264      	sxtb	r4, r4
    for(int8_t i= (length/sizeof(dataBlock)); i>=0; i--)
    8384:	1c63      	adds	r3, r4, #1
    8386:	d01a      	beq.n	83be <ComputeDataCrc+0x8a>
        if (i)
    8388:	2c00      	cmp	r4, #0
    838a:	d0eb      	beq.n	8364 <ComputeDataCrc+0x30>
            length = length - sizeof(dataBlock);
    838c:	3d01      	subs	r5, #1
    838e:	3dff      	subs	r5, #255	; 0xff
    8390:	b2ad      	uxth	r5, r5
        if (GatherData(sourceSector, blockPointer, offset, dataLength, dataBlock))
    8392:	4b10      	ldr	r3, [pc, #64]	; (83d4 <ComputeDataCrc+0xa0>)
    8394:	9300      	str	r3, [sp, #0]
    8396:	2380      	movs	r3, #128	; 0x80
    8398:	005b      	lsls	r3, r3, #1
    839a:	003a      	movs	r2, r7
    839c:	9905      	ldr	r1, [sp, #20]
    839e:	9804      	ldr	r0, [sp, #16]
    83a0:	4e0d      	ldr	r6, [pc, #52]	; (83d8 <ComputeDataCrc+0xa4>)
    83a2:	47b0      	blx	r6
    83a4:	2800      	cmp	r0, #0
    83a6:	d0eb      	beq.n	8380 <ComputeDataCrc+0x4c>
            dataLength = sizeof(dataBlock);
    83a8:	2180      	movs	r1, #128	; 0x80
    83aa:	0049      	lsls	r1, r1, #1
            offset = offset+dataLength;
    83ac:	187f      	adds	r7, r7, r1
    83ae:	b2bf      	uxth	r7, r7
            crc = ComputeCrc(((uint8_t*) &dataBlock), dataLength, crc);
    83b0:	9a03      	ldr	r2, [sp, #12]
    83b2:	4808      	ldr	r0, [pc, #32]	; (83d4 <ComputeDataCrc+0xa0>)
    83b4:	47c0      	blx	r8
    83b6:	9003      	str	r0, [sp, #12]
    83b8:	e7e2      	b.n	8380 <ComputeDataCrc+0x4c>
    uint16_t crc = 0xFFFFu;
    83ba:	4b04      	ldr	r3, [pc, #16]	; (83cc <ComputeDataCrc+0x98>)
    83bc:	9303      	str	r3, [sp, #12]
}
    83be:	9803      	ldr	r0, [sp, #12]
    83c0:	b007      	add	sp, #28
    83c2:	bc0c      	pop	{r2, r3}
    83c4:	4690      	mov	r8, r2
    83c6:	469b      	mov	fp, r3
    83c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    83ca:	46c0      	nop			; (mov r8, r8)
    83cc:	0000ffff 	.word	0x0000ffff
    83d0:	0000823d 	.word	0x0000823d
    83d4:	20000138 	.word	0x20000138
    83d8:	0000827d 	.word	0x0000827d

000083dc <FindItemCache>:
{
    83dc:	b570      	push	{r4, r5, r6, lr}
    for ( uint8_t cacheIndex = 0u; cacheIndex < s_itemCount; cacheIndex++ )
    83de:	4b16      	ldr	r3, [pc, #88]	; (8438 <FindItemCache+0x5c>)
    83e0:	781c      	ldrb	r4, [r3, #0]
    83e2:	2c00      	cmp	r4, #0
    83e4:	d026      	beq.n	8434 <FindItemCache+0x58>
        if ( cache->id == id )
    83e6:	4b15      	ldr	r3, [pc, #84]	; (843c <FindItemCache+0x60>)
    83e8:	881b      	ldrh	r3, [r3, #0]
    83ea:	4283      	cmp	r3, r0
    83ec:	d016      	beq.n	841c <FindItemCache+0x40>
    83ee:	2301      	movs	r3, #1
    83f0:	4e12      	ldr	r6, [pc, #72]	; (843c <FindItemCache+0x60>)
    for ( uint8_t cacheIndex = 0u; cacheIndex < s_itemCount; cacheIndex++ )
    83f2:	b2da      	uxtb	r2, r3
    83f4:	4294      	cmp	r4, r2
    83f6:	d91b      	bls.n	8430 <FindItemCache+0x54>
        Item_t *cache = &s_itemCache[cacheIndex];
    83f8:	001d      	movs	r5, r3
        if ( cache->id == id )
    83fa:	1c59      	adds	r1, r3, #1
    83fc:	009a      	lsls	r2, r3, #2
    83fe:	5ab2      	ldrh	r2, [r6, r2]
    8400:	4282      	cmp	r2, r0
    8402:	d001      	beq.n	8408 <FindItemCache+0x2c>
    8404:	000b      	movs	r3, r1
    8406:	e7f4      	b.n	83f2 <FindItemCache+0x16>
        Item_t *cache = &s_itemCache[cacheIndex];
    8408:	009b      	lsls	r3, r3, #2
    840a:	480c      	ldr	r0, [pc, #48]	; (843c <FindItemCache+0x60>)
    840c:	18c0      	adds	r0, r0, r3
            assert(cache->lastBlock != 0x0000);
    840e:	00ad      	lsls	r5, r5, #2
    8410:	4b0a      	ldr	r3, [pc, #40]	; (843c <FindItemCache+0x60>)
    8412:	195d      	adds	r5, r3, r5
    8414:	886b      	ldrh	r3, [r5, #2]
    8416:	2b00      	cmp	r3, #0
    8418:	d003      	beq.n	8422 <FindItemCache+0x46>
}
    841a:	bd70      	pop	{r4, r5, r6, pc}
        Item_t *cache = &s_itemCache[cacheIndex];
    841c:	4807      	ldr	r0, [pc, #28]	; (843c <FindItemCache+0x60>)
    841e:	2500      	movs	r5, #0
    8420:	e7f5      	b.n	840e <FindItemCache+0x32>
            assert(cache->lastBlock != 0x0000);
    8422:	4b07      	ldr	r3, [pc, #28]	; (8440 <FindItemCache+0x64>)
    8424:	4a07      	ldr	r2, [pc, #28]	; (8444 <FindItemCache+0x68>)
    8426:	218c      	movs	r1, #140	; 0x8c
    8428:	31ff      	adds	r1, #255	; 0xff
    842a:	4807      	ldr	r0, [pc, #28]	; (8448 <FindItemCache+0x6c>)
    842c:	4c07      	ldr	r4, [pc, #28]	; (844c <FindItemCache+0x70>)
    842e:	47a0      	blx	r4
    return NULL;
    8430:	2000      	movs	r0, #0
    8432:	e7f2      	b.n	841a <FindItemCache+0x3e>
    8434:	2000      	movs	r0, #0
    8436:	e7f0      	b.n	841a <FindItemCache+0x3e>
    8438:	20000274 	.word	0x20000274
    843c:	20000254 	.word	0x20000254
    8440:	000189b4 	.word	0x000189b4
    8444:	00018aa0 	.word	0x00018aa0
    8448:	000189d0 	.word	0x000189d0
    844c:	00016b85 	.word	0x00016b85

00008450 <FindItem>:
{
    8450:	b510      	push	{r4, lr}
    Item_t *cache = FindItemCache(id);
    8452:	4b05      	ldr	r3, [pc, #20]	; (8468 <FindItem+0x18>)
    8454:	4798      	blx	r3
    if (cache)
    8456:	2800      	cmp	r0, #0
    8458:	d004      	beq.n	8464 <FindItem+0x14>
        return cache->lastBlock;
    845a:	7883      	ldrb	r3, [r0, #2]
    845c:	78c0      	ldrb	r0, [r0, #3]
    845e:	0200      	lsls	r0, r0, #8
    8460:	4318      	orrs	r0, r3
}
    8462:	bd10      	pop	{r4, pc}
    return 0x0000u;
    8464:	2000      	movs	r0, #0
    8466:	e7fc      	b.n	8462 <FindItem+0x12>
    8468:	000083dd 	.word	0x000083dd

0000846c <CreateItemCache>:
{
    846c:	b510      	push	{r4, lr}
    846e:	0004      	movs	r4, r0
    assert(FindItemCache(id) == NULL);
    8470:	4b0e      	ldr	r3, [pc, #56]	; (84ac <CreateItemCache+0x40>)
    8472:	4798      	blx	r3
    8474:	2800      	cmp	r0, #0
    8476:	d10b      	bne.n	8490 <CreateItemCache+0x24>
    assert(s_itemCount < MAX_ITEM_COUNT);
    8478:	4b0d      	ldr	r3, [pc, #52]	; (84b0 <CreateItemCache+0x44>)
    847a:	781b      	ldrb	r3, [r3, #0]
    847c:	2b07      	cmp	r3, #7
    847e:	d80e      	bhi.n	849e <CreateItemCache+0x32>
    Item_t *cache = &s_itemCache[s_itemCount++];
    8480:	1c59      	adds	r1, r3, #1
    8482:	4a0b      	ldr	r2, [pc, #44]	; (84b0 <CreateItemCache+0x44>)
    8484:	7011      	strb	r1, [r2, #0]
    cache->id = id;
    8486:	480b      	ldr	r0, [pc, #44]	; (84b4 <CreateItemCache+0x48>)
    8488:	009b      	lsls	r3, r3, #2
    848a:	521c      	strh	r4, [r3, r0]
    Item_t *cache = &s_itemCache[s_itemCount++];
    848c:	18c0      	adds	r0, r0, r3
}
    848e:	bd10      	pop	{r4, pc}
    assert(FindItemCache(id) == NULL);
    8490:	4b09      	ldr	r3, [pc, #36]	; (84b8 <CreateItemCache+0x4c>)
    8492:	4a0a      	ldr	r2, [pc, #40]	; (84bc <CreateItemCache+0x50>)
    8494:	21cc      	movs	r1, #204	; 0xcc
    8496:	0049      	lsls	r1, r1, #1
    8498:	4809      	ldr	r0, [pc, #36]	; (84c0 <CreateItemCache+0x54>)
    849a:	4c0a      	ldr	r4, [pc, #40]	; (84c4 <CreateItemCache+0x58>)
    849c:	47a0      	blx	r4
    assert(s_itemCount < MAX_ITEM_COUNT);
    849e:	4b0a      	ldr	r3, [pc, #40]	; (84c8 <CreateItemCache+0x5c>)
    84a0:	4a06      	ldr	r2, [pc, #24]	; (84bc <CreateItemCache+0x50>)
    84a2:	219a      	movs	r1, #154	; 0x9a
    84a4:	31ff      	adds	r1, #255	; 0xff
    84a6:	4806      	ldr	r0, [pc, #24]	; (84c0 <CreateItemCache+0x54>)
    84a8:	4c06      	ldr	r4, [pc, #24]	; (84c4 <CreateItemCache+0x58>)
    84aa:	47a0      	blx	r4
    84ac:	000083dd 	.word	0x000083dd
    84b0:	20000274 	.word	0x20000274
    84b4:	20000254 	.word	0x20000254
    84b8:	0001895c 	.word	0x0001895c
    84bc:	00018ab0 	.word	0x00018ab0
    84c0:	000189d0 	.word	0x000189d0
    84c4:	00016b85 	.word	0x00016b85
    84c8:	00018978 	.word	0x00018978

000084cc <DeleteItemCache>:
{
    84cc:	b510      	push	{r4, lr}
    assert(FindItemCache(id) != NULL);
    84ce:	4b0b      	ldr	r3, [pc, #44]	; (84fc <DeleteItemCache+0x30>)
    84d0:	4798      	blx	r3
    84d2:	2800      	cmp	r0, #0
    84d4:	d00b      	beq.n	84ee <DeleteItemCache+0x22>
    *cache = s_itemCache[--s_itemCount];
    84d6:	4b0a      	ldr	r3, [pc, #40]	; (8500 <DeleteItemCache+0x34>)
    84d8:	7819      	ldrb	r1, [r3, #0]
    84da:	3901      	subs	r1, #1
    84dc:	b2c9      	uxtb	r1, r1
    84de:	7019      	strb	r1, [r3, #0]
    84e0:	0089      	lsls	r1, r1, #2
    84e2:	4b08      	ldr	r3, [pc, #32]	; (8504 <DeleteItemCache+0x38>)
    84e4:	1859      	adds	r1, r3, r1
    84e6:	2204      	movs	r2, #4
    84e8:	4b07      	ldr	r3, [pc, #28]	; (8508 <DeleteItemCache+0x3c>)
    84ea:	4798      	blx	r3
}
    84ec:	bd10      	pop	{r4, pc}
    assert(FindItemCache(id) != NULL);
    84ee:	4b07      	ldr	r3, [pc, #28]	; (850c <DeleteItemCache+0x40>)
    84f0:	4a07      	ldr	r2, [pc, #28]	; (8510 <DeleteItemCache+0x44>)
    84f2:	21d3      	movs	r1, #211	; 0xd3
    84f4:	0049      	lsls	r1, r1, #1
    84f6:	4807      	ldr	r0, [pc, #28]	; (8514 <DeleteItemCache+0x48>)
    84f8:	4c07      	ldr	r4, [pc, #28]	; (8518 <DeleteItemCache+0x4c>)
    84fa:	47a0      	blx	r4
    84fc:	000083dd 	.word	0x000083dd
    8500:	20000274 	.word	0x20000274
    8504:	20000254 	.word	0x20000254
    8508:	00016c47 	.word	0x00016c47
    850c:	00018998 	.word	0x00018998
    8510:	00018ac0 	.word	0x00018ac0
    8514:	000189d0 	.word	0x000189d0
    8518:	00016b85 	.word	0x00016b85

0000851c <eraseSectorTimerFired>:
{
    851c:	b510      	push	{r4, lr}
    if (!PowerSupplyTooLow())
    851e:	4b05      	ldr	r3, [pc, #20]	; (8534 <eraseSectorTimerFired+0x18>)
    8520:	4798      	blx	r3
    8522:	2800      	cmp	r0, #0
    8524:	d000      	beq.n	8528 <eraseSectorTimerFired+0xc>
}
    8526:	bd10      	pop	{r4, pc}
        D_Nv_EraseSector(s_sectorToErase);
    8528:	4b03      	ldr	r3, [pc, #12]	; (8538 <eraseSectorTimerFired+0x1c>)
    852a:	7818      	ldrb	r0, [r3, #0]
    852c:	4b03      	ldr	r3, [pc, #12]	; (853c <eraseSectorTimerFired+0x20>)
    852e:	4798      	blx	r3
}
    8530:	e7f9      	b.n	8526 <eraseSectorTimerFired+0xa>
    8532:	46c0      	nop			; (mov r8, r8)
    8534:	000081e5 	.word	0x000081e5
    8538:	2000000e 	.word	0x2000000e
    853c:	00008175 	.word	0x00008175

00008540 <EraseSector>:

static bool EraseSector(void)
{
    8540:	b510      	push	{r4, lr}
    // Erase the sector
    D_Nv_EraseSector(s_sector);
    8542:	4c08      	ldr	r4, [pc, #32]	; (8564 <EraseSector+0x24>)
    8544:	7820      	ldrb	r0, [r4, #0]
    8546:	4b08      	ldr	r3, [pc, #32]	; (8568 <EraseSector+0x28>)
    8548:	4798      	blx	r3
    // check if the erase succeeded
    if ( !D_Nv_IsEmpty(s_sector, 0u, SECTOR_SIZE) )
    854a:	7820      	ldrb	r0, [r4, #0]
    854c:	2280      	movs	r2, #128	; 0x80
    854e:	0192      	lsls	r2, r2, #6
    8550:	2100      	movs	r1, #0
    8552:	4b06      	ldr	r3, [pc, #24]	; (856c <EraseSector+0x2c>)
    8554:	4798      	blx	r3
    8556:	2800      	cmp	r0, #0
    8558:	d003      	beq.n	8562 <EraseSector+0x22>
    {
        return false;
    }
    s_sectorHead =  ITEMS_AREA_START_ADDRESS;
    855a:	2280      	movs	r2, #128	; 0x80
    855c:	0052      	lsls	r2, r2, #1
    855e:	4b04      	ldr	r3, [pc, #16]	; (8570 <EraseSector+0x30>)
    8560:	801a      	strh	r2, [r3, #0]

    return true;
}
    8562:	bd10      	pop	{r4, pc}
    8564:	2000027c 	.word	0x2000027c
    8568:	00008175 	.word	0x00008175
    856c:	000081c9 	.word	0x000081c9
    8570:	2000027e 	.word	0x2000027e

00008574 <WriteAndCheck>:
{
    8574:	b5f0      	push	{r4, r5, r6, r7, lr}
    8576:	b083      	sub	sp, #12
    8578:	9001      	str	r0, [sp, #4]
    857a:	000d      	movs	r5, r1
    857c:	0016      	movs	r6, r2
    D_Nv_Write(s_sector, offset, pData, length);
    857e:	4f07      	ldr	r7, [pc, #28]	; (859c <WriteAndCheck+0x28>)
    8580:	7838      	ldrb	r0, [r7, #0]
    8582:	0013      	movs	r3, r2
    8584:	000a      	movs	r2, r1
    8586:	9901      	ldr	r1, [sp, #4]
    8588:	4c05      	ldr	r4, [pc, #20]	; (85a0 <WriteAndCheck+0x2c>)
    858a:	47a0      	blx	r4
    return D_Nv_IsEqual(s_sector, offset, pData, length);
    858c:	7838      	ldrb	r0, [r7, #0]
    858e:	0033      	movs	r3, r6
    8590:	002a      	movs	r2, r5
    8592:	9901      	ldr	r1, [sp, #4]
    8594:	4c03      	ldr	r4, [pc, #12]	; (85a4 <WriteAndCheck+0x30>)
    8596:	47a0      	blx	r4
}
    8598:	b003      	add	sp, #12
    859a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    859c:	2000027c 	.word	0x2000027c
    85a0:	0000800d 	.word	0x0000800d
    85a4:	000081d9 	.word	0x000081d9

000085a8 <WriteSectorHeader>:

static bool WriteSectorHeader(uint32_t sequenceNumber)
{
    85a8:	b510      	push	{r4, lr}
    85aa:	b086      	sub	sp, #24
    // write sector header
    SectorHeader_t sectorHeader;
    sectorHeader.signature[0] = (uint8_t) 'A';
    85ac:	ac01      	add	r4, sp, #4
    85ae:	2341      	movs	r3, #65	; 0x41
    85b0:	70a3      	strb	r3, [r4, #2]
    sectorHeader.signature[1] = (uint8_t) 'T';
    85b2:	3313      	adds	r3, #19
    85b4:	70e3      	strb	r3, [r4, #3]
    sectorHeader.signature[2] = (uint8_t) 'S';
    85b6:	3b01      	subs	r3, #1
    85b8:	7123      	strb	r3, [r4, #4]
    sectorHeader.signature[3] = (uint8_t) 'N';
    85ba:	3b05      	subs	r3, #5
    85bc:	7163      	strb	r3, [r4, #5]
    sectorHeader.signature[4] = (uint8_t) 'v';
    85be:	3328      	adds	r3, #40	; 0x28
    85c0:	71a3      	strb	r3, [r4, #6]
    sectorHeader.signature[5] = (uint8_t) '2';
    85c2:	3b44      	subs	r3, #68	; 0x44
    85c4:	71e3      	strb	r3, [r4, #7]
    sectorHeader.sequenceNumber = sequenceNumber;
    85c6:	9003      	str	r0, [sp, #12]
    sectorHeader.sequenceParity = sequenceNumber ^ 0xFFFFFFFFuL;
    85c8:	43c0      	mvns	r0, r0
    85ca:	9004      	str	r0, [sp, #16]
    sectorHeader.nextPageAddressAfterCompact = s_nextPageAddressAfterCompact;
    85cc:	4b08      	ldr	r3, [pc, #32]	; (85f0 <WriteSectorHeader+0x48>)
    85ce:	881b      	ldrh	r3, [r3, #0]
    85d0:	8223      	strh	r3, [r4, #16]
    return ComputeCrc(((uint8_t*) pSectorHeader) + sizeof(pSectorHeader->headerCrc), (sizeof(SectorHeader_t)- sizeof(pSectorHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    85d2:	4a08      	ldr	r2, [pc, #32]	; (85f4 <WriteSectorHeader+0x4c>)
    85d4:	2110      	movs	r1, #16
    85d6:	466b      	mov	r3, sp
    85d8:	1d98      	adds	r0, r3, #6
    85da:	4b07      	ldr	r3, [pc, #28]	; (85f8 <WriteSectorHeader+0x50>)
    85dc:	4798      	blx	r3
    sectorHeader.headerCrc = ComputeSectorHeaderCrc(&sectorHeader);
    85de:	8020      	strh	r0, [r4, #0]
    if ( !WriteAndCheck(0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE) )
    85e0:	2212      	movs	r2, #18
    85e2:	0021      	movs	r1, r4
    85e4:	2000      	movs	r0, #0
    85e6:	4b05      	ldr	r3, [pc, #20]	; (85fc <WriteSectorHeader+0x54>)
    85e8:	4798      	blx	r3
    {
        return false;
    }
    return true;
}
    85ea:	b006      	add	sp, #24
    85ec:	bd10      	pop	{r4, pc}
    85ee:	46c0      	nop			; (mov r8, r8)
    85f0:	20000276 	.word	0x20000276
    85f4:	0000ffff 	.word	0x0000ffff
    85f8:	0000823d 	.word	0x0000823d
    85fc:	00008575 	.word	0x00008575

00008600 <SmartCompacting>:
 * without following any alignements as normal item updates.Items are filled into
  256 byte buffer(= row size), committed in shot which takes 4 page writs maximum
 */

static bool SmartCompacting(uint8_t* compactBlock, uint16_t curItemLength)
{
    8600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8602:	0004      	movs	r4, r0
    8604:	000d      	movs	r5, r1
    //manupulate the current compact length
    currentCompactLength += curItemLength;
    8606:	4a21      	ldr	r2, [pc, #132]	; (868c <SmartCompacting+0x8c>)
    8608:	8813      	ldrh	r3, [r2, #0]
    860a:	18cb      	adds	r3, r1, r3
    860c:	b29b      	uxth	r3, r3
    860e:	8013      	strh	r3, [r2, #0]

    // if the complete buffer cannot be filled with the current item
    if ( currentCompactLength < ROW_SIZE)
    8610:	2bff      	cmp	r3, #255	; 0xff
    8612:	d92e      	bls.n	8672 <SmartCompacting+0x72>
    else  //(currentCompactLength >= ROW_SIZE) cases
    {
        uint16_t dataBlockOffset = 0;


        memcpy(compactBlock + compactBlockOffset, dataBlock, (ROW_SIZE - compactBlockOffset));
    8614:	4b1e      	ldr	r3, [pc, #120]	; (8690 <SmartCompacting+0x90>)
    8616:	881a      	ldrh	r2, [r3, #0]
    8618:	1880      	adds	r0, r0, r2
    861a:	2580      	movs	r5, #128	; 0x80
    861c:	006d      	lsls	r5, r5, #1
    861e:	1aaa      	subs	r2, r5, r2
    8620:	491c      	ldr	r1, [pc, #112]	; (8694 <SmartCompacting+0x94>)
    8622:	4b1d      	ldr	r3, [pc, #116]	; (8698 <SmartCompacting+0x98>)
    8624:	4798      	blx	r3
        if ( !WriteAndCheck(s_sectorHead, compactBlock, ROW_SIZE ))
    8626:	4b1d      	ldr	r3, [pc, #116]	; (869c <SmartCompacting+0x9c>)
    8628:	8818      	ldrh	r0, [r3, #0]
    862a:	002a      	movs	r2, r5
    862c:	0021      	movs	r1, r4
    862e:	4b1c      	ldr	r3, [pc, #112]	; (86a0 <SmartCompacting+0xa0>)
    8630:	4798      	blx	r3
    8632:	1e05      	subs	r5, r0, #0
    8634:	d027      	beq.n	8686 <SmartCompacting+0x86>
        {
            return false;
        }
        UpdateSectorHead(ROW_SIZE, ITEM_NO_ALIGNMENT);
    8636:	2100      	movs	r1, #0
    8638:	2080      	movs	r0, #128	; 0x80
    863a:	0040      	lsls	r0, r0, #1
    863c:	4b19      	ldr	r3, [pc, #100]	; (86a4 <SmartCompacting+0xa4>)
    863e:	4798      	blx	r3
        dataBlockOffset += (ROW_SIZE - compactBlockOffset);
    8640:	4b13      	ldr	r3, [pc, #76]	; (8690 <SmartCompacting+0x90>)
    8642:	8818      	ldrh	r0, [r3, #0]
        compactBlockOffset = 0;
    8644:	2200      	movs	r2, #0
    8646:	801a      	strh	r2, [r3, #0]
        currentCompactLength -= ROW_SIZE;
    8648:	4b10      	ldr	r3, [pc, #64]	; (868c <SmartCompacting+0x8c>)
    864a:	881e      	ldrh	r6, [r3, #0]
    864c:	3e01      	subs	r6, #1
    864e:	3eff      	subs	r6, #255	; 0xff
    8650:	b2b6      	uxth	r6, r6
    8652:	801e      	strh	r6, [r3, #0]
        if (currentCompactLength)
    8654:	2e00      	cmp	r6, #0
    8656:	d016      	beq.n	8686 <SmartCompacting+0x86>
        dataBlockOffset += (ROW_SIZE - compactBlockOffset);
    8658:	2180      	movs	r1, #128	; 0x80
    865a:	0049      	lsls	r1, r1, #1
    865c:	1a09      	subs	r1, r1, r0
        {
            memcpy(compactBlock, dataBlock + dataBlockOffset, currentCompactLength);
    865e:	b289      	uxth	r1, r1
    8660:	4b0c      	ldr	r3, [pc, #48]	; (8694 <SmartCompacting+0x94>)
    8662:	1859      	adds	r1, r3, r1
    8664:	0032      	movs	r2, r6
    8666:	0020      	movs	r0, r4
    8668:	4b0b      	ldr	r3, [pc, #44]	; (8698 <SmartCompacting+0x98>)
    866a:	4798      	blx	r3
            compactBlockOffset = currentCompactLength;
    866c:	4b08      	ldr	r3, [pc, #32]	; (8690 <SmartCompacting+0x90>)
    866e:	801e      	strh	r6, [r3, #0]
    8670:	e009      	b.n	8686 <SmartCompacting+0x86>
        memcpy(compactBlock + compactBlockOffset, dataBlock, curItemLength);
    8672:	4e07      	ldr	r6, [pc, #28]	; (8690 <SmartCompacting+0x90>)
    8674:	8837      	ldrh	r7, [r6, #0]
    8676:	19c0      	adds	r0, r0, r7
    8678:	000a      	movs	r2, r1
    867a:	4906      	ldr	r1, [pc, #24]	; (8694 <SmartCompacting+0x94>)
    867c:	4b06      	ldr	r3, [pc, #24]	; (8698 <SmartCompacting+0x98>)
    867e:	4798      	blx	r3
        compactBlockOffset += curItemLength;
    8680:	19ed      	adds	r5, r5, r7
    8682:	8035      	strh	r5, [r6, #0]
        return true;
    8684:	2501      	movs	r5, #1
        }
    }

    return true;

}
    8686:	0028      	movs	r0, r5
    8688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    868a:	46c0      	nop			; (mov r8, r8)
    868c:	20000134 	.word	0x20000134
    8690:	20000108 	.word	0x20000108
    8694:	20000138 	.word	0x20000138
    8698:	00016c47 	.word	0x00016c47
    869c:	2000027e 	.word	0x2000027e
    86a0:	00008575 	.word	0x00008575
    86a4:	00008201 	.word	0x00008201

000086a8 <CompactSector>:
 * This is because the itemCache, sector head and sector selector will
 * be messed up.
 */

static bool CompactSector(void)
{
    86a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    86aa:	46de      	mov	lr, fp
    86ac:	4657      	mov	r7, sl
    86ae:	464e      	mov	r6, r9
    86b0:	4645      	mov	r5, r8
    86b2:	b5e0      	push	{r5, r6, r7, lr}
    86b4:	b0d5      	sub	sp, #340	; 0x154
    PRINTA(("CompactSector(s=%X)", s_sector));
#endif
    uint8_t compactBlock[ROW_SIZE];

    // stop timer for preemptive compact sector as this will not be needed any more
    SYS_TimerStop(&compactSectorTimer);
    86b6:	487b      	ldr	r0, [pc, #492]	; (88a4 <CompactSector+0x1fc>)
    86b8:	4b7b      	ldr	r3, [pc, #492]	; (88a8 <CompactSector+0x200>)
    86ba:	4798      	blx	r3

    // stop the compact item as a compact sector will compact all items
    s_compactItemId = 0u;
    86bc:	2300      	movs	r3, #0
    86be:	4a7b      	ldr	r2, [pc, #492]	; (88ac <CompactSector+0x204>)
    86c0:	8013      	strh	r3, [r2, #0]
    s_compactItemLength = 0u;
    86c2:	4a7b      	ldr	r2, [pc, #492]	; (88b0 <CompactSector+0x208>)
    86c4:	8013      	strh	r3, [r2, #0]

    compactBlockOffset = 0;
    86c6:	4a7b      	ldr	r2, [pc, #492]	; (88b4 <CompactSector+0x20c>)
    86c8:	8013      	strh	r3, [r2, #0]
    currentCompactLength = 0;
    86ca:	4a7b      	ldr	r2, [pc, #492]	; (88b8 <CompactSector+0x210>)
    86cc:	8013      	strh	r3, [r2, #0]

    uint8_t sourceSector = s_sector;
    86ce:	4b7b      	ldr	r3, [pc, #492]	; (88bc <CompactSector+0x214>)
    86d0:	781b      	ldrb	r3, [r3, #0]
    86d2:	001f      	movs	r7, r3
    86d4:	9303      	str	r3, [sp, #12]

    // get the sector header for the source sector
    SectorHeader_t sectorHeader;
    D_Nv_Read(sourceSector, 0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE);
    86d6:	2312      	movs	r3, #18
    86d8:	aa0f      	add	r2, sp, #60	; 0x3c
    86da:	2100      	movs	r1, #0
    86dc:	0038      	movs	r0, r7
    86de:	4c78      	ldr	r4, [pc, #480]	; (88c0 <CompactSector+0x218>)
    86e0:	47a0      	blx	r4

    uint32_t nextSequenceNumber = sectorHeader.sequenceNumber - 1uL;
    86e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    86e4:	9309      	str	r3, [sp, #36]	; 0x24

    // find and prepare a destination sector
    do
    {
        s_sector++;
    86e6:	4c75      	ldr	r4, [pc, #468]	; (88bc <CompactSector+0x214>)
        if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
        {
            s_sector = FIRST_SECTOR;
    86e8:	0025      	movs	r5, r4
        s_sector++;
    86ea:	0026      	movs	r6, r4
    86ec:	e008      	b.n	8700 <CompactSector+0x58>
    86ee:	7033      	strb	r3, [r6, #0]
        }

        if ( s_sector == sourceSector )
    86f0:	4b72      	ldr	r3, [pc, #456]	; (88bc <CompactSector+0x214>)
    86f2:	781b      	ldrb	r3, [r3, #0]
    86f4:	42bb      	cmp	r3, r7
    86f6:	d00b      	beq.n	8710 <CompactSector+0x68>
        {
            // all sector failed to initialize
            assert(false);
        }
    }
    while ( !EraseSector());
    86f8:	4b72      	ldr	r3, [pc, #456]	; (88c4 <CompactSector+0x21c>)
    86fa:	4798      	blx	r3
    86fc:	2800      	cmp	r0, #0
    86fe:	d10d      	bne.n	871c <CompactSector+0x74>
        s_sector++;
    8700:	7823      	ldrb	r3, [r4, #0]
    8702:	3301      	adds	r3, #1
    8704:	b2db      	uxtb	r3, r3
        if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
    8706:	2b01      	cmp	r3, #1
    8708:	d9f1      	bls.n	86ee <CompactSector+0x46>
            s_sector = FIRST_SECTOR;
    870a:	2300      	movs	r3, #0
    870c:	702b      	strb	r3, [r5, #0]
    870e:	e7ef      	b.n	86f0 <CompactSector+0x48>
            assert(false);
    8710:	4b6d      	ldr	r3, [pc, #436]	; (88c8 <CompactSector+0x220>)
    8712:	4a6e      	ldr	r2, [pc, #440]	; (88cc <CompactSector+0x224>)
    8714:	496e      	ldr	r1, [pc, #440]	; (88d0 <CompactSector+0x228>)
    8716:	486f      	ldr	r0, [pc, #444]	; (88d4 <CompactSector+0x22c>)
    8718:	4c6f      	ldr	r4, [pc, #444]	; (88d8 <CompactSector+0x230>)
    871a:	47a0      	blx	r4

    // Traverse the item cache, writing all items to the new sector
    for (uint8_t cacheIndex = 0; cacheIndex < s_itemCount; cacheIndex++) {
    871c:	4b6f      	ldr	r3, [pc, #444]	; (88dc <CompactSector+0x234>)
    871e:	781b      	ldrb	r3, [r3, #0]
    8720:	2b00      	cmp	r3, #0
    8722:	d06a      	beq.n	87fa <CompactSector+0x152>
    8724:	2300      	movs	r3, #0
    8726:	9306      	str	r3, [sp, #24]

        blockHeader.dataCrc =  ComputeDataCrc(sourceSector, lastBlockPointer, &blockHeader);

        blockHeader.headerCrc = ComputeHeaderCrc(&blockHeader);

        memset(dataBlock, 0xFF, sizeof(dataBlock));
    8728:	3301      	adds	r3, #1
    872a:	33ff      	adds	r3, #255	; 0xff
    872c:	4699      	mov	r9, r3
            uint16_t bytesToGather;
            uint16_t inDataOffset = 0;

            do
            {
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    872e:	466a      	mov	r2, sp
    8730:	82d3      	strh	r3, [r2, #22]
            if (!GatherData(sourceSector, lastBlockPointer, 0u, blockHeader.itemLength, (dataBlock + BLOCK_HEADER_SIZE )))
    8732:	4b6b      	ldr	r3, [pc, #428]	; (88e0 <CompactSector+0x238>)
    8734:	3310      	adds	r3, #16
    8736:	9308      	str	r3, [sp, #32]
        Item_t *cache = &s_itemCache[cacheIndex];
    8738:	9b06      	ldr	r3, [sp, #24]
    873a:	9307      	str	r3, [sp, #28]
        uint16_t lastBlockPointer = cache->lastBlock;
    873c:	009f      	lsls	r7, r3, #2
    873e:	4b69      	ldr	r3, [pc, #420]	; (88e4 <CompactSector+0x23c>)
    8740:	469c      	mov	ip, r3
    8742:	4467      	add	r7, ip
    8744:	887b      	ldrh	r3, [r7, #2]
    8746:	001d      	movs	r5, r3
    8748:	9304      	str	r3, [sp, #16]
        D_Nv_Read(sourceSector, lastBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    874a:	2310      	movs	r3, #16
    874c:	aa0b      	add	r2, sp, #44	; 0x2c
    874e:	0029      	movs	r1, r5
    8750:	9803      	ldr	r0, [sp, #12]
    8752:	4680      	mov	r8, r0
    8754:	4c5a      	ldr	r4, [pc, #360]	; (88c0 <CompactSector+0x218>)
    8756:	47a0      	blx	r4
        blockHeader.blockOffset = 0x0000u;
    8758:	ae0b      	add	r6, sp, #44	; 0x2c
    875a:	2300      	movs	r3, #0
    875c:	80b3      	strh	r3, [r6, #4]
        blockHeader.blockLength = blockHeader.itemLength;
    875e:	8934      	ldrh	r4, [r6, #8]
    8760:	80f4      	strh	r4, [r6, #6]
        blockHeader.previousBlock = 0x0000u;
    8762:	8173      	strh	r3, [r6, #10]
        blockHeader.writeCount = 0u;
    8764:	81b3      	strh	r3, [r6, #12]
        uint16_t currLength = BLOCK_HEADER_SIZE + blockHeader.itemLength;
    8766:	3410      	adds	r4, #16
    8768:	b2a4      	uxth	r4, r4
        blockHeader.dataCrc =  ComputeDataCrc(sourceSector, lastBlockPointer, &blockHeader);
    876a:	0032      	movs	r2, r6
    876c:	0029      	movs	r1, r5
    876e:	4640      	mov	r0, r8
    8770:	4b5d      	ldr	r3, [pc, #372]	; (88e8 <CompactSector+0x240>)
    8772:	4798      	blx	r3
    8774:	8030      	strh	r0, [r6, #0]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    8776:	4a5d      	ldr	r2, [pc, #372]	; (88ec <CompactSector+0x244>)
    8778:	210e      	movs	r1, #14
    877a:	a80b      	add	r0, sp, #44	; 0x2c
    877c:	4b5c      	ldr	r3, [pc, #368]	; (88f0 <CompactSector+0x248>)
    877e:	4798      	blx	r3
        blockHeader.headerCrc = ComputeHeaderCrc(&blockHeader);
    8780:	81f0      	strh	r0, [r6, #14]
        memset(dataBlock, 0xFF, sizeof(dataBlock));
    8782:	4d57      	ldr	r5, [pc, #348]	; (88e0 <CompactSector+0x238>)
    8784:	464a      	mov	r2, r9
    8786:	21ff      	movs	r1, #255	; 0xff
    8788:	0028      	movs	r0, r5
    878a:	4b5a      	ldr	r3, [pc, #360]	; (88f4 <CompactSector+0x24c>)
    878c:	4798      	blx	r3
        memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    878e:	002b      	movs	r3, r5
    8790:	ce07      	ldmia	r6!, {r0, r1, r2}
    8792:	c307      	stmia	r3!, {r0, r1, r2}
    8794:	6832      	ldr	r2, [r6, #0]
    8796:	601a      	str	r2, [r3, #0]
        cache->lastBlock = s_sectorHead  + compactBlockOffset;
    8798:	4b57      	ldr	r3, [pc, #348]	; (88f8 <CompactSector+0x250>)
    879a:	881b      	ldrh	r3, [r3, #0]
    879c:	4a45      	ldr	r2, [pc, #276]	; (88b4 <CompactSector+0x20c>)
    879e:	8812      	ldrh	r2, [r2, #0]
    87a0:	189b      	adds	r3, r3, r2
    87a2:	807b      	strh	r3, [r7, #2]
        if (currLength <= ROW_SIZE)
    87a4:	454c      	cmp	r4, r9
    87a6:	d904      	bls.n	87b2 <CompactSector+0x10a>
    87a8:	2600      	movs	r6, #0
    87aa:	2310      	movs	r3, #16
              
              if (!GatherData(sourceSector, lastBlockPointer, inDataOffset, (bytesToGather - dataBlockOffset) , (dataBlock + dataBlockOffset)))
    87ac:	4a4c      	ldr	r2, [pc, #304]	; (88e0 <CompactSector+0x238>)
    87ae:	4690      	mov	r8, r2
    87b0:	e068      	b.n	8884 <CompactSector+0x1dc>
            if (!GatherData(sourceSector, lastBlockPointer, 0u, blockHeader.itemLength, (dataBlock + BLOCK_HEADER_SIZE )))
    87b2:	ab0b      	add	r3, sp, #44	; 0x2c
    87b4:	891b      	ldrh	r3, [r3, #8]
    87b6:	9a08      	ldr	r2, [sp, #32]
    87b8:	9200      	str	r2, [sp, #0]
    87ba:	2200      	movs	r2, #0
    87bc:	9904      	ldr	r1, [sp, #16]
    87be:	9803      	ldr	r0, [sp, #12]
    87c0:	4e4e      	ldr	r6, [pc, #312]	; (88fc <CompactSector+0x254>)
    87c2:	47b0      	blx	r6
    87c4:	2800      	cmp	r0, #0
    87c6:	d063      	beq.n	8890 <CompactSector+0x1e8>
            cache->lastBlock = s_sectorHead  + compactBlockOffset;
    87c8:	9b07      	ldr	r3, [sp, #28]
    87ca:	009d      	lsls	r5, r3, #2
    87cc:	4b45      	ldr	r3, [pc, #276]	; (88e4 <CompactSector+0x23c>)
    87ce:	195d      	adds	r5, r3, r5
    87d0:	4b49      	ldr	r3, [pc, #292]	; (88f8 <CompactSector+0x250>)
    87d2:	881b      	ldrh	r3, [r3, #0]
    87d4:	4a37      	ldr	r2, [pc, #220]	; (88b4 <CompactSector+0x20c>)
    87d6:	8812      	ldrh	r2, [r2, #0]
    87d8:	189b      	adds	r3, r3, r2
    87da:	806b      	strh	r3, [r5, #2]
            if (!SmartCompacting(compactBlock, currLength))
    87dc:	0021      	movs	r1, r4
    87de:	a814      	add	r0, sp, #80	; 0x50
    87e0:	4b47      	ldr	r3, [pc, #284]	; (8900 <CompactSector+0x258>)
    87e2:	4798      	blx	r3
    87e4:	2800      	cmp	r0, #0
    87e6:	d053      	beq.n	8890 <CompactSector+0x1e8>
    for (uint8_t cacheIndex = 0; cacheIndex < s_itemCount; cacheIndex++) {
    87e8:	9b06      	ldr	r3, [sp, #24]
    87ea:	3301      	adds	r3, #1
    87ec:	b2db      	uxtb	r3, r3
    87ee:	001a      	movs	r2, r3
    87f0:	9306      	str	r3, [sp, #24]
    87f2:	4b3a      	ldr	r3, [pc, #232]	; (88dc <CompactSector+0x234>)
    87f4:	781b      	ldrb	r3, [r3, #0]
    87f6:	4293      	cmp	r3, r2
    87f8:	d89e      	bhi.n	8738 <CompactSector+0x90>

            } while(currLength > 0);
        }
    }
    // if some uncommitted data avaialble, committ it
    if ( currentCompactLength)
    87fa:	4b2f      	ldr	r3, [pc, #188]	; (88b8 <CompactSector+0x210>)
    87fc:	881a      	ldrh	r2, [r3, #0]
    87fe:	2a00      	cmp	r2, #0
    8800:	d006      	beq.n	8810 <CompactSector+0x168>
    {
        if ( !WriteAndCheck(s_sectorHead, compactBlock, currentCompactLength) )
    8802:	4b3d      	ldr	r3, [pc, #244]	; (88f8 <CompactSector+0x250>)
    8804:	8818      	ldrh	r0, [r3, #0]
    8806:	a914      	add	r1, sp, #80	; 0x50
    8808:	4b3e      	ldr	r3, [pc, #248]	; (8904 <CompactSector+0x25c>)
    880a:	4798      	blx	r3
    880c:	1e04      	subs	r4, r0, #0
    880e:	d040      	beq.n	8892 <CompactSector+0x1ea>
        {
            return false;
        }
    }
    // Just update sector header as per the the length of the data committed, no alignments
    UpdateSectorHead(currentCompactLength, ITEM_NO_ALIGNMENT);
    8810:	4b29      	ldr	r3, [pc, #164]	; (88b8 <CompactSector+0x210>)
    8812:	8818      	ldrh	r0, [r3, #0]
    8814:	2100      	movs	r1, #0
    8816:	4b3c      	ldr	r3, [pc, #240]	; (8908 <CompactSector+0x260>)
    8818:	4798      	blx	r3

    s_nextPageAddressAfterCompact = s_sectorHead;
    881a:	4b37      	ldr	r3, [pc, #220]	; (88f8 <CompactSector+0x250>)
    881c:	881a      	ldrh	r2, [r3, #0]
    881e:	4b3b      	ldr	r3, [pc, #236]	; (890c <CompactSector+0x264>)
    8820:	801a      	strh	r2, [r3, #0]
    uint32_t nextSequenceNumber = sectorHeader.sequenceNumber - 1uL;
    8822:	9809      	ldr	r0, [sp, #36]	; 0x24
    8824:	3801      	subs	r0, #1
    //SYS_PostEvent(BC_EVENT_UPGRADE_STRUCT_CHANGED_ITEMS, 0U);

    // update nextPageAddressAfterCompact in the sector header
    // All items moved, so now we just need to Write the Sector Header with 
    // nextPageAddressAfterCompact at the end of compact sector operation
    if ( !WriteSectorHeader(nextSequenceNumber))
    8826:	4b3a      	ldr	r3, [pc, #232]	; (8910 <CompactSector+0x268>)
    8828:	4798      	blx	r3
    882a:	1e04      	subs	r4, r0, #0
    882c:	d031      	beq.n	8892 <CompactSector+0x1ea>
    {
        return false;
    }
    // Done with compact sector opration, Set the Sector Head to next page address for normal item update 
    UpdateSectorHead(0, ITEM_64BYTE_ALIGNMENT);
    882e:	2102      	movs	r1, #2
    8830:	2000      	movs	r0, #0
    8832:	4b35      	ldr	r3, [pc, #212]	; (8908 <CompactSector+0x260>)
    8834:	4798      	blx	r3

    // schedule an erase of the source sector,Restart the timer if it is already running.
    s_sectorToErase = sourceSector;
    8836:	4b37      	ldr	r3, [pc, #220]	; (8914 <CompactSector+0x26c>)
    8838:	466a      	mov	r2, sp
    883a:	7b12      	ldrb	r2, [r2, #12]
    883c:	701a      	strb	r2, [r3, #0]
    SYS_TimerStop(&eraseSectorTimer);
    883e:	4d36      	ldr	r5, [pc, #216]	; (8918 <CompactSector+0x270>)
    8840:	0028      	movs	r0, r5
    8842:	4b19      	ldr	r3, [pc, #100]	; (88a8 <CompactSector+0x200>)
    8844:	4798      	blx	r3
    SYS_TimerStart(&eraseSectorTimer);
    8846:	0028      	movs	r0, r5
    8848:	4b34      	ldr	r3, [pc, #208]	; (891c <CompactSector+0x274>)
    884a:	4798      	blx	r3

    return true;
    884c:	e021      	b.n	8892 <CompactSector+0x1ea>
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    884e:	b2ad      	uxth	r5, r5
              if (!GatherData(sourceSector, lastBlockPointer, inDataOffset, (bytesToGather - dataBlockOffset) , (dataBlock + dataBlockOffset)))
    8850:	1aef      	subs	r7, r5, r3
    8852:	b2ba      	uxth	r2, r7
    8854:	4693      	mov	fp, r2
    8856:	4443      	add	r3, r8
    8858:	9300      	str	r3, [sp, #0]
    885a:	0013      	movs	r3, r2
    885c:	0032      	movs	r2, r6
    885e:	9904      	ldr	r1, [sp, #16]
    8860:	9803      	ldr	r0, [sp, #12]
    8862:	4f26      	ldr	r7, [pc, #152]	; (88fc <CompactSector+0x254>)
    8864:	47b8      	blx	r7
    8866:	2800      	cmp	r0, #0
    8868:	d012      	beq.n	8890 <CompactSector+0x1e8>
              if (!SmartCompacting(compactBlock, bytesToGather))
    886a:	0029      	movs	r1, r5
    886c:	a814      	add	r0, sp, #80	; 0x50
    886e:	4b24      	ldr	r3, [pc, #144]	; (8900 <CompactSector+0x258>)
    8870:	4798      	blx	r3
    8872:	2800      	cmp	r0, #0
    8874:	d00c      	beq.n	8890 <CompactSector+0x1e8>
              currLength -= bytesToGather;
    8876:	1b64      	subs	r4, r4, r5
    8878:	b2a4      	uxth	r4, r4
              inDataOffset += (bytesToGather - dataBlockOffset);
    887a:	445e      	add	r6, fp
    887c:	b2b6      	uxth	r6, r6
              dataBlockOffset = 0;
    887e:	2300      	movs	r3, #0
            } while(currLength > 0);
    8880:	2c00      	cmp	r4, #0
    8882:	d0b1      	beq.n	87e8 <CompactSector+0x140>
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    8884:	1c25      	adds	r5, r4, #0
    8886:	454c      	cmp	r4, r9
    8888:	d9e1      	bls.n	884e <CompactSector+0x1a6>
    888a:	466a      	mov	r2, sp
    888c:	8ad5      	ldrh	r5, [r2, #22]
    888e:	e7de      	b.n	884e <CompactSector+0x1a6>
                return false;
    8890:	2400      	movs	r4, #0
}
    8892:	0020      	movs	r0, r4
    8894:	b055      	add	sp, #340	; 0x154
    8896:	bc3c      	pop	{r2, r3, r4, r5}
    8898:	4690      	mov	r8, r2
    889a:	4699      	mov	r9, r3
    889c:	46a2      	mov	sl, r4
    889e:	46ab      	mov	fp, r5
    88a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    88a2:	46c0      	nop			; (mov r8, r8)
    88a4:	20000120 	.word	0x20000120
    88a8:	0000c355 	.word	0x0000c355
    88ac:	2000024c 	.word	0x2000024c
    88b0:	2000024e 	.word	0x2000024e
    88b4:	20000108 	.word	0x20000108
    88b8:	20000134 	.word	0x20000134
    88bc:	2000027c 	.word	0x2000027c
    88c0:	00007f95 	.word	0x00007f95
    88c4:	00008541 	.word	0x00008541
    88c8:	00018954 	.word	0x00018954
    88cc:	00018adc 	.word	0x00018adc
    88d0:	000003d5 	.word	0x000003d5
    88d4:	000189d0 	.word	0x000189d0
    88d8:	00016b85 	.word	0x00016b85
    88dc:	20000274 	.word	0x20000274
    88e0:	20000138 	.word	0x20000138
    88e4:	20000254 	.word	0x20000254
    88e8:	00008335 	.word	0x00008335
    88ec:	0000ffff 	.word	0x0000ffff
    88f0:	0000823d 	.word	0x0000823d
    88f4:	00016c59 	.word	0x00016c59
    88f8:	2000027e 	.word	0x2000027e
    88fc:	0000827d 	.word	0x0000827d
    8900:	00008601 	.word	0x00008601
    8904:	00008575 	.word	0x00008575
    8908:	00008201 	.word	0x00008201
    890c:	20000276 	.word	0x20000276
    8910:	000085a9 	.word	0x000085a9
    8914:	2000000e 	.word	0x2000000e
    8918:	20000238 	.word	0x20000238
    891c:	0000c3c1 	.word	0x0000c3c1

00008920 <compactSectorTimerFired>:
{
    8920:	b510      	push	{r4, lr}
    if (!PowerSupplyTooLow()) {
    8922:	4b07      	ldr	r3, [pc, #28]	; (8940 <compactSectorTimerFired+0x20>)
    8924:	4798      	blx	r3
    8926:	2800      	cmp	r0, #0
    8928:	d000      	beq.n	892c <compactSectorTimerFired+0xc>
}
    892a:	bd10      	pop	{r4, pc}
      status = CompactSector();
    892c:	4b05      	ldr	r3, [pc, #20]	; (8944 <compactSectorTimerFired+0x24>)
    892e:	4798      	blx	r3
      assert(false);
    8930:	4b05      	ldr	r3, [pc, #20]	; (8948 <compactSectorTimerFired+0x28>)
    8932:	4a06      	ldr	r2, [pc, #24]	; (894c <compactSectorTimerFired+0x2c>)
    8934:	212c      	movs	r1, #44	; 0x2c
    8936:	31ff      	adds	r1, #255	; 0xff
    8938:	4805      	ldr	r0, [pc, #20]	; (8950 <compactSectorTimerFired+0x30>)
    893a:	4c06      	ldr	r4, [pc, #24]	; (8954 <compactSectorTimerFired+0x34>)
    893c:	47a0      	blx	r4
    893e:	46c0      	nop			; (mov r8, r8)
    8940:	000081e5 	.word	0x000081e5
    8944:	000086a9 	.word	0x000086a9
    8948:	00018954 	.word	0x00018954
    894c:	00018a88 	.word	0x00018a88
    8950:	000189d0 	.word	0x000189d0
    8954:	00016b85 	.word	0x00016b85

00008958 <CompactSectorIfNeeded>:

static void CompactSectorIfNeeded(uint16_t immediateThreshold)
{
    8958:	b510      	push	{r4, lr}
    uint16_t freeSpace = SECTOR_SIZE - s_sectorHead;
    895a:	4b12      	ldr	r3, [pc, #72]	; (89a4 <CompactSectorIfNeeded+0x4c>)
    895c:	881a      	ldrh	r2, [r3, #0]
    895e:	2380      	movs	r3, #128	; 0x80
    8960:	019b      	lsls	r3, r3, #6
    8962:	1a9b      	subs	r3, r3, r2
    8964:	b29b      	uxth	r3, r3

    if ( freeSpace < immediateThreshold )
    8966:	4283      	cmp	r3, r0
    8968:	d303      	bcc.n	8972 <CompactSectorIfNeeded+0x1a>
        {
            assert(false);
        }
        return;
    }
    if ( freeSpace < PREEMPTIVE_COMPACT_SECTOR_THRESHOLD )
    896a:	4a0f      	ldr	r2, [pc, #60]	; (89a8 <CompactSectorIfNeeded+0x50>)
    896c:	4293      	cmp	r3, r2
    896e:	d90a      	bls.n	8986 <CompactSectorIfNeeded+0x2e>
        compactSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
        //TODO: check timer to be started or not
        //SYS_StartTimer(&compactSectorTimer);
        }
    }
}
    8970:	bd10      	pop	{r4, pc}
        if ( !CompactSector() )
    8972:	4b0e      	ldr	r3, [pc, #56]	; (89ac <CompactSectorIfNeeded+0x54>)
    8974:	4798      	blx	r3
    8976:	2800      	cmp	r0, #0
    8978:	d1fa      	bne.n	8970 <CompactSectorIfNeeded+0x18>
            assert(false);
    897a:	4b0d      	ldr	r3, [pc, #52]	; (89b0 <CompactSectorIfNeeded+0x58>)
    897c:	4a0d      	ldr	r2, [pc, #52]	; (89b4 <CompactSectorIfNeeded+0x5c>)
    897e:	490e      	ldr	r1, [pc, #56]	; (89b8 <CompactSectorIfNeeded+0x60>)
    8980:	480e      	ldr	r0, [pc, #56]	; (89bc <CompactSectorIfNeeded+0x64>)
    8982:	4c0f      	ldr	r4, [pc, #60]	; (89c0 <CompactSectorIfNeeded+0x68>)
    8984:	47a0      	blx	r4
        if (!SYS_TimerStarted(&compactSectorTimer))
    8986:	480f      	ldr	r0, [pc, #60]	; (89c4 <CompactSectorIfNeeded+0x6c>)
    8988:	4b0f      	ldr	r3, [pc, #60]	; (89c8 <CompactSectorIfNeeded+0x70>)
    898a:	4798      	blx	r3
    898c:	2800      	cmp	r0, #0
    898e:	d1ef      	bne.n	8970 <CompactSectorIfNeeded+0x18>
        compactSectorTimer.handler = compactSectorTimerFired;
    8990:	4b0c      	ldr	r3, [pc, #48]	; (89c4 <CompactSectorIfNeeded+0x6c>)
    8992:	4a0e      	ldr	r2, [pc, #56]	; (89cc <CompactSectorIfNeeded+0x74>)
    8994:	611a      	str	r2, [r3, #16]
        compactSectorTimer.timeout = COMPACT_SECTOR_DELAY_MS;
    8996:	4a0e      	ldr	r2, [pc, #56]	; (89d0 <CompactSectorIfNeeded+0x78>)
    8998:	605a      	str	r2, [r3, #4]
        compactSectorTimer.interval = COMPACT_SECTOR_DELAY_MS;
    899a:	609a      	str	r2, [r3, #8]
        compactSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
    899c:	2200      	movs	r2, #0
    899e:	731a      	strb	r2, [r3, #12]
    89a0:	e7e6      	b.n	8970 <CompactSectorIfNeeded+0x18>
    89a2:	46c0      	nop			; (mov r8, r8)
    89a4:	2000027e 	.word	0x2000027e
    89a8:	0000080f 	.word	0x0000080f
    89ac:	000086a9 	.word	0x000086a9
    89b0:	00018954 	.word	0x00018954
    89b4:	00018aec 	.word	0x00018aec
    89b8:	0000044e 	.word	0x0000044e
    89bc:	000189d0 	.word	0x000189d0
    89c0:	00016b85 	.word	0x00016b85
    89c4:	20000120 	.word	0x20000120
    89c8:	0000c395 	.word	0x0000c395
    89cc:	00008921 	.word	0x00008921
    89d0:	00002710 	.word	0x00002710

000089d4 <CompactItem>:

static S_Nv_ReturnValue_t CompactItem(void)
{
    89d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    89d6:	46de      	mov	lr, fp
    89d8:	4657      	mov	r7, sl
    89da:	464e      	mov	r6, r9
    89dc:	4645      	mov	r5, r8
    89de:	b5e0      	push	{r5, r6, r7, lr}
    89e0:	b08b      	sub	sp, #44	; 0x2c
#if defined(ENABLE_NV_COMPACT_LOGGING)
    PRINTA(("CompactItem(id=%X)", s_compactItemId));
#endif

    if ( PowerSupplyTooLow() )
    89e2:	4b77      	ldr	r3, [pc, #476]	; (8bc0 <CompactItem+0x1ec>)
    89e4:	4798      	blx	r3
    {
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    89e6:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    89e8:	2800      	cmp	r0, #0
    89ea:	d007      	beq.n	89fc <CompactItem+0x28>
    s_compactItemLength = 0u;

    cache->lastBlock = lastBlock;

    return S_Nv_ReturnValue_Ok;
}
    89ec:	0018      	movs	r0, r3
    89ee:	b00b      	add	sp, #44	; 0x2c
    89f0:	bc3c      	pop	{r2, r3, r4, r5}
    89f2:	4690      	mov	r8, r2
    89f4:	4699      	mov	r9, r3
    89f6:	46a2      	mov	sl, r4
    89f8:	46ab      	mov	fp, r5
    89fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ( (s_compactItemLength == 0u) && ( s_compactItemId == 0u ) )
    89fc:	4b71      	ldr	r3, [pc, #452]	; (8bc4 <CompactItem+0x1f0>)
    89fe:	8818      	ldrh	r0, [r3, #0]
    8a00:	2800      	cmp	r0, #0
    8a02:	d146      	bne.n	8a92 <CompactItem+0xbe>
    8a04:	4b70      	ldr	r3, [pc, #448]	; (8bc8 <CompactItem+0x1f4>)
    8a06:	881b      	ldrh	r3, [r3, #0]
    8a08:	2b00      	cmp	r3, #0
    8a0a:	d100      	bne.n	8a0e <CompactItem+0x3a>
    8a0c:	e0d0      	b.n	8bb0 <CompactItem+0x1dc>
    Item_t *cache = FindItemCache(s_compactItemId);
    8a0e:	4b6e      	ldr	r3, [pc, #440]	; (8bc8 <CompactItem+0x1f4>)
    8a10:	8818      	ldrh	r0, [r3, #0]
    8a12:	4b6e      	ldr	r3, [pc, #440]	; (8bcc <CompactItem+0x1f8>)
    8a14:	4798      	blx	r3
    8a16:	4683      	mov	fp, r0
    if ( cache == NULL )
    8a18:	2800      	cmp	r0, #0
    8a1a:	d100      	bne.n	8a1e <CompactItem+0x4a>
    8a1c:	e0ca      	b.n	8bb4 <CompactItem+0x1e0>
    uint16_t blockPointer = cache->lastBlock;
    8a1e:	7882      	ldrb	r2, [r0, #2]
    8a20:	78c3      	ldrb	r3, [r0, #3]
    8a22:	021b      	lsls	r3, r3, #8
    8a24:	4313      	orrs	r3, r2
    8a26:	0019      	movs	r1, r3
    8a28:	9303      	str	r3, [sp, #12]
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8a2a:	4b69      	ldr	r3, [pc, #420]	; (8bd0 <CompactItem+0x1fc>)
    8a2c:	7818      	ldrb	r0, [r3, #0]
    8a2e:	2310      	movs	r3, #16
    8a30:	aa06      	add	r2, sp, #24
    8a32:	4c68      	ldr	r4, [pc, #416]	; (8bd4 <CompactItem+0x200>)
    8a34:	47a0      	blx	r4
    if (s_compactItemLength == 0)
    8a36:	4b63      	ldr	r3, [pc, #396]	; (8bc4 <CompactItem+0x1f0>)
    8a38:	881a      	ldrh	r2, [r3, #0]
    8a3a:	2a00      	cmp	r2, #0
    8a3c:	d02e      	beq.n	8a9c <CompactItem+0xc8>
    uint16_t lastBlock = s_sectorHead;
    8a3e:	4b66      	ldr	r3, [pc, #408]	; (8bd8 <CompactItem+0x204>)
    8a40:	881b      	ldrh	r3, [r3, #0]
    8a42:	9305      	str	r3, [sp, #20]
    uint16_t bytesToGather = blockHeader.itemLength;
    8a44:	ab06      	add	r3, sp, #24
    8a46:	891b      	ldrh	r3, [r3, #8]
        blockHeader.itemLength = s_compactItemLength;
    8a48:	a906      	add	r1, sp, #24
    8a4a:	810a      	strh	r2, [r1, #8]
    8a4c:	1c19      	adds	r1, r3, #0
    8a4e:	4293      	cmp	r3, r2
    8a50:	d900      	bls.n	8a54 <CompactItem+0x80>
    8a52:	1c11      	adds	r1, r2, #0
    8a54:	b28b      	uxth	r3, r1
    blockHeader.blockOffset = 0u;
    8a56:	aa06      	add	r2, sp, #24
    8a58:	2100      	movs	r1, #0
    8a5a:	8091      	strh	r1, [r2, #4]
    blockHeader.blockLength = blockHeader.itemLength;
    8a5c:	8910      	ldrh	r0, [r2, #8]
    8a5e:	80d0      	strh	r0, [r2, #6]
    blockHeader.previousBlock = 0x0000u;
    8a60:	8151      	strh	r1, [r2, #10]
    blockHeader.writeCount = 0u;
    8a62:	8191      	strh	r1, [r2, #12]
    uint16_t currLength = BLOCK_HEADER_SIZE + bytesToGather;
    8a64:	001c      	movs	r4, r3
    8a66:	3410      	adds	r4, #16
    8a68:	b2a4      	uxth	r4, r4
    memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    8a6a:	495c      	ldr	r1, [pc, #368]	; (8bdc <CompactItem+0x208>)
    8a6c:	ca61      	ldmia	r2!, {r0, r5, r6}
    8a6e:	c161      	stmia	r1!, {r0, r5, r6}
    8a70:	6812      	ldr	r2, [r2, #0]
    8a72:	600a      	str	r2, [r1, #0]
    if (currLength <= ROW_SIZE)
    8a74:	2280      	movs	r2, #128	; 0x80
    8a76:	0052      	lsls	r2, r2, #1
    8a78:	4294      	cmp	r4, r2
    8a7a:	d939      	bls.n	8af0 <CompactItem+0x11c>
    8a7c:	2600      	movs	r6, #0
    8a7e:	2310      	movs	r3, #16
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    8a80:	2280      	movs	r2, #128	; 0x80
    8a82:	0052      	lsls	r2, r2, #1
    8a84:	4691      	mov	r9, r2
    8a86:	4669      	mov	r1, sp
    8a88:	824a      	strh	r2, [r1, #18]
            if (!GatherData(s_sector, blockPointer, inDataOffset, bytesToGatherAndCommit - dataBlockOffset , (dataBlock + dataBlockOffset)))
    8a8a:	4a51      	ldr	r2, [pc, #324]	; (8bd0 <CompactItem+0x1fc>)
    8a8c:	4692      	mov	sl, r2
    8a8e:	001a      	movs	r2, r3
    8a90:	e088      	b.n	8ba4 <CompactItem+0x1d0>
        CompactSectorIfNeeded(s_compactItemLength + BLOCK_HEADER_SIZE);
    8a92:	3010      	adds	r0, #16
    8a94:	b280      	uxth	r0, r0
    8a96:	4b52      	ldr	r3, [pc, #328]	; (8be0 <CompactItem+0x20c>)
    8a98:	4798      	blx	r3
    8a9a:	e7b8      	b.n	8a0e <CompactItem+0x3a>
        CompactSectorIfNeeded(blockHeader.itemLength + BLOCK_HEADER_SIZE);
    8a9c:	ab06      	add	r3, sp, #24
    8a9e:	8918      	ldrh	r0, [r3, #8]
    8aa0:	3010      	adds	r0, #16
    8aa2:	b280      	uxth	r0, r0
    8aa4:	4b4e      	ldr	r3, [pc, #312]	; (8be0 <CompactItem+0x20c>)
    8aa6:	4798      	blx	r3
        cache = FindItemCache(s_compactItemId);
    8aa8:	4b47      	ldr	r3, [pc, #284]	; (8bc8 <CompactItem+0x1f4>)
    8aaa:	8818      	ldrh	r0, [r3, #0]
    8aac:	4b47      	ldr	r3, [pc, #284]	; (8bcc <CompactItem+0x1f8>)
    8aae:	4798      	blx	r3
    8ab0:	4683      	mov	fp, r0
        assert(cache != NULL);
    8ab2:	2800      	cmp	r0, #0
    8ab4:	d015      	beq.n	8ae2 <CompactItem+0x10e>
        blockPointer = cache->lastBlock;
    8ab6:	7882      	ldrb	r2, [r0, #2]
    8ab8:	78c3      	ldrb	r3, [r0, #3]
    8aba:	021b      	lsls	r3, r3, #8
    8abc:	4313      	orrs	r3, r2
    8abe:	0019      	movs	r1, r3
    8ac0:	9303      	str	r3, [sp, #12]
        D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8ac2:	ac06      	add	r4, sp, #24
    8ac4:	4b42      	ldr	r3, [pc, #264]	; (8bd0 <CompactItem+0x1fc>)
    8ac6:	7818      	ldrb	r0, [r3, #0]
    8ac8:	2310      	movs	r3, #16
    8aca:	0022      	movs	r2, r4
    8acc:	4d41      	ldr	r5, [pc, #260]	; (8bd4 <CompactItem+0x200>)
    8ace:	47a8      	blx	r5
    uint16_t lastBlock = s_sectorHead;
    8ad0:	4b41      	ldr	r3, [pc, #260]	; (8bd8 <CompactItem+0x204>)
    8ad2:	881b      	ldrh	r3, [r3, #0]
    8ad4:	9305      	str	r3, [sp, #20]
    uint16_t bytesToGather = blockHeader.itemLength;
    8ad6:	8923      	ldrh	r3, [r4, #8]
    if ( s_compactItemLength != 0u )
    8ad8:	4a3a      	ldr	r2, [pc, #232]	; (8bc4 <CompactItem+0x1f0>)
    8ada:	8812      	ldrh	r2, [r2, #0]
    8adc:	2a00      	cmp	r2, #0
    8ade:	d0ba      	beq.n	8a56 <CompactItem+0x82>
    8ae0:	e7b2      	b.n	8a48 <CompactItem+0x74>
        assert(cache != NULL);
    8ae2:	4b40      	ldr	r3, [pc, #256]	; (8be4 <CompactItem+0x210>)
    8ae4:	4a40      	ldr	r2, [pc, #256]	; (8be8 <CompactItem+0x214>)
    8ae6:	2191      	movs	r1, #145	; 0x91
    8ae8:	00c9      	lsls	r1, r1, #3
    8aea:	4840      	ldr	r0, [pc, #256]	; (8bec <CompactItem+0x218>)
    8aec:	4c40      	ldr	r4, [pc, #256]	; (8bf0 <CompactItem+0x21c>)
    8aee:	47a0      	blx	r4
        if (!GatherData(s_sector, blockPointer, 0u, bytesToGather, (dataBlock + BLOCK_HEADER_SIZE )))
    8af0:	4a37      	ldr	r2, [pc, #220]	; (8bd0 <CompactItem+0x1fc>)
    8af2:	7810      	ldrb	r0, [r2, #0]
    8af4:	4a39      	ldr	r2, [pc, #228]	; (8bdc <CompactItem+0x208>)
    8af6:	3210      	adds	r2, #16
    8af8:	9200      	str	r2, [sp, #0]
    8afa:	2200      	movs	r2, #0
    8afc:	9903      	ldr	r1, [sp, #12]
    8afe:	4c3d      	ldr	r4, [pc, #244]	; (8bf4 <CompactItem+0x220>)
    8b00:	47a0      	blx	r4
            return S_Nv_ReturnValue_Failure;
    8b02:	2301      	movs	r3, #1
        if (!GatherData(s_sector, blockPointer, 0u, bytesToGather, (dataBlock + BLOCK_HEADER_SIZE )))
    8b04:	2800      	cmp	r0, #0
    8b06:	d100      	bne.n	8b0a <CompactItem+0x136>
    8b08:	e770      	b.n	89ec <CompactItem+0x18>
        memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    8b0a:	4934      	ldr	r1, [pc, #208]	; (8bdc <CompactItem+0x208>)
    8b0c:	ab06      	add	r3, sp, #24
    8b0e:	000a      	movs	r2, r1
    8b10:	0018      	movs	r0, r3
    8b12:	c870      	ldmia	r0!, {r4, r5, r6}
    8b14:	c270      	stmia	r2!, {r4, r5, r6}
    8b16:	6800      	ldr	r0, [r0, #0]
    8b18:	6010      	str	r0, [r2, #0]
        if ( !WriteAndCheck(s_sectorHead, dataBlock, blockHeader.blockLength + BLOCK_HEADER_SIZE) )
    8b1a:	88da      	ldrh	r2, [r3, #6]
    8b1c:	3210      	adds	r2, #16
    8b1e:	b292      	uxth	r2, r2
    8b20:	4b2d      	ldr	r3, [pc, #180]	; (8bd8 <CompactItem+0x204>)
    8b22:	8818      	ldrh	r0, [r3, #0]
    8b24:	4b34      	ldr	r3, [pc, #208]	; (8bf8 <CompactItem+0x224>)
    8b26:	4798      	blx	r3
            return false;
    8b28:	2300      	movs	r3, #0
        if ( !WriteAndCheck(s_sectorHead, dataBlock, blockHeader.blockLength + BLOCK_HEADER_SIZE) )
    8b2a:	2800      	cmp	r0, #0
    8b2c:	d100      	bne.n	8b30 <CompactItem+0x15c>
    8b2e:	e75d      	b.n	89ec <CompactItem+0x18>
        UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), ITEM_64BYTE_ALIGNMENT);
    8b30:	ab06      	add	r3, sp, #24
    8b32:	88d8      	ldrh	r0, [r3, #6]
    8b34:	3010      	adds	r0, #16
    8b36:	b280      	uxth	r0, r0
    8b38:	2102      	movs	r1, #2
    8b3a:	4b30      	ldr	r3, [pc, #192]	; (8bfc <CompactItem+0x228>)
    8b3c:	4798      	blx	r3
    s_compactItemId = 0u;
    8b3e:	2300      	movs	r3, #0
    8b40:	4a21      	ldr	r2, [pc, #132]	; (8bc8 <CompactItem+0x1f4>)
    8b42:	8013      	strh	r3, [r2, #0]
    s_compactItemLength = 0u;
    8b44:	4a1f      	ldr	r2, [pc, #124]	; (8bc4 <CompactItem+0x1f0>)
    8b46:	8013      	strh	r3, [r2, #0]
    cache->lastBlock = lastBlock;
    8b48:	465b      	mov	r3, fp
    8b4a:	9905      	ldr	r1, [sp, #20]
    8b4c:	7099      	strb	r1, [r3, #2]
    8b4e:	0a0b      	lsrs	r3, r1, #8
    8b50:	465a      	mov	r2, fp
    8b52:	70d3      	strb	r3, [r2, #3]
    return S_Nv_ReturnValue_Ok;
    8b54:	2300      	movs	r3, #0
    8b56:	e749      	b.n	89ec <CompactItem+0x18>
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    8b58:	b2ad      	uxth	r5, r5
            if (!GatherData(s_sector, blockPointer, inDataOffset, bytesToGatherAndCommit - dataBlockOffset , (dataBlock + dataBlockOffset)))
    8b5a:	1aaf      	subs	r7, r5, r2
    8b5c:	b2bb      	uxth	r3, r7
    8b5e:	0019      	movs	r1, r3
    8b60:	4653      	mov	r3, sl
    8b62:	7818      	ldrb	r0, [r3, #0]
    8b64:	4b1d      	ldr	r3, [pc, #116]	; (8bdc <CompactItem+0x208>)
    8b66:	189b      	adds	r3, r3, r2
    8b68:	9300      	str	r3, [sp, #0]
    8b6a:	9102      	str	r1, [sp, #8]
    8b6c:	000b      	movs	r3, r1
    8b6e:	0032      	movs	r2, r6
    8b70:	9903      	ldr	r1, [sp, #12]
    8b72:	4f20      	ldr	r7, [pc, #128]	; (8bf4 <CompactItem+0x220>)
    8b74:	47b8      	blx	r7
    8b76:	2800      	cmp	r0, #0
    8b78:	d01e      	beq.n	8bb8 <CompactItem+0x1e4>
            if ( !WriteAndCheck(s_sectorHead, dataBlock, bytesToGatherAndCommit) )
    8b7a:	4b17      	ldr	r3, [pc, #92]	; (8bd8 <CompactItem+0x204>)
    8b7c:	8818      	ldrh	r0, [r3, #0]
    8b7e:	002a      	movs	r2, r5
    8b80:	4916      	ldr	r1, [pc, #88]	; (8bdc <CompactItem+0x208>)
    8b82:	4b1d      	ldr	r3, [pc, #116]	; (8bf8 <CompactItem+0x224>)
    8b84:	4798      	blx	r3
    8b86:	2800      	cmp	r0, #0
    8b88:	d018      	beq.n	8bbc <CompactItem+0x1e8>
            UpdateSectorHead(bytesToGatherAndCommit, ITEM_64BYTE_ALIGNMENT);
    8b8a:	2102      	movs	r1, #2
    8b8c:	0028      	movs	r0, r5
    8b8e:	4b1b      	ldr	r3, [pc, #108]	; (8bfc <CompactItem+0x228>)
    8b90:	4798      	blx	r3
            currLength -= bytesToGatherAndCommit;
    8b92:	1b64      	subs	r4, r4, r5
    8b94:	b2a4      	uxth	r4, r4
            inDataOffset += (bytesToGatherAndCommit - dataBlockOffset);
    8b96:	9902      	ldr	r1, [sp, #8]
    8b98:	468c      	mov	ip, r1
    8b9a:	4466      	add	r6, ip
    8b9c:	b2b6      	uxth	r6, r6
            dataBlockOffset = 0;
    8b9e:	2200      	movs	r2, #0
        } while(currLength > 0);
    8ba0:	2c00      	cmp	r4, #0
    8ba2:	d0cc      	beq.n	8b3e <CompactItem+0x16a>
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    8ba4:	1c25      	adds	r5, r4, #0
    8ba6:	454c      	cmp	r4, r9
    8ba8:	d9d6      	bls.n	8b58 <CompactItem+0x184>
    8baa:	466b      	mov	r3, sp
    8bac:	8a5d      	ldrh	r5, [r3, #18]
    8bae:	e7d3      	b.n	8b58 <CompactItem+0x184>
        return S_Nv_ReturnValue_Ok;
    8bb0:	2300      	movs	r3, #0
    8bb2:	e71b      	b.n	89ec <CompactItem+0x18>
        return S_Nv_ReturnValue_Ok;
    8bb4:	2300      	movs	r3, #0
    8bb6:	e719      	b.n	89ec <CompactItem+0x18>
                return S_Nv_ReturnValue_Failure;
    8bb8:	2301      	movs	r3, #1
    8bba:	e717      	b.n	89ec <CompactItem+0x18>
                return false;
    8bbc:	2300      	movs	r3, #0
    8bbe:	e715      	b.n	89ec <CompactItem+0x18>
    8bc0:	000081e5 	.word	0x000081e5
    8bc4:	2000024e 	.word	0x2000024e
    8bc8:	2000024c 	.word	0x2000024c
    8bcc:	000083dd 	.word	0x000083dd
    8bd0:	2000027c 	.word	0x2000027c
    8bd4:	00007f95 	.word	0x00007f95
    8bd8:	2000027e 	.word	0x2000027e
    8bdc:	20000138 	.word	0x20000138
    8be0:	00008959 	.word	0x00008959
    8be4:	00018944 	.word	0x00018944
    8be8:	00018b04 	.word	0x00018b04
    8bec:	000189d0 	.word	0x000189d0
    8bf0:	00016b85 	.word	0x00016b85
    8bf4:	0000827d 	.word	0x0000827d
    8bf8:	00008575 	.word	0x00008575
    8bfc:	00008201 	.word	0x00008201

00008c00 <compactItemTimerFired>:
{
    8c00:	b510      	push	{r4, lr}
    (void)CompactItem();
    8c02:	4b01      	ldr	r3, [pc, #4]	; (8c08 <compactItemTimerFired+0x8>)
    8c04:	4798      	blx	r3
}
    8c06:	bd10      	pop	{r4, pc}
    8c08:	000089d5 	.word	0x000089d5

00008c0c <WriteDataBlockAndHeader>:
{
    8c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8c0e:	46de      	mov	lr, fp
    8c10:	4657      	mov	r7, sl
    8c12:	464e      	mov	r6, r9
    8c14:	4645      	mov	r5, r8
    8c16:	b5e0      	push	{r5, r6, r7, lr}
    8c18:	b083      	sub	sp, #12
    8c1a:	0004      	movs	r4, r0
    8c1c:	468a      	mov	sl, r1
    memset(dataBlock, 0xFF, sizeof(dataBlock));
    8c1e:	4d46      	ldr	r5, [pc, #280]	; (8d38 <WriteDataBlockAndHeader+0x12c>)
    8c20:	2280      	movs	r2, #128	; 0x80
    8c22:	0052      	lsls	r2, r2, #1
    8c24:	21ff      	movs	r1, #255	; 0xff
    8c26:	0028      	movs	r0, r5
    8c28:	4b44      	ldr	r3, [pc, #272]	; (8d3c <WriteDataBlockAndHeader+0x130>)
    8c2a:	4798      	blx	r3
    pBlockHeader->dataCrc = ComputeCrc(pData, pBlockHeader->blockLength, 0xFFFF);
    8c2c:	4e44      	ldr	r6, [pc, #272]	; (8d40 <WriteDataBlockAndHeader+0x134>)
    8c2e:	79a3      	ldrb	r3, [r4, #6]
    8c30:	79e1      	ldrb	r1, [r4, #7]
    8c32:	0209      	lsls	r1, r1, #8
    8c34:	4319      	orrs	r1, r3
    8c36:	0032      	movs	r2, r6
    8c38:	4650      	mov	r0, sl
    8c3a:	4f42      	ldr	r7, [pc, #264]	; (8d44 <WriteDataBlockAndHeader+0x138>)
    8c3c:	47b8      	blx	r7
    8c3e:	7020      	strb	r0, [r4, #0]
    8c40:	0a00      	lsrs	r0, r0, #8
    8c42:	7060      	strb	r0, [r4, #1]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    8c44:	0032      	movs	r2, r6
    8c46:	210e      	movs	r1, #14
    8c48:	0020      	movs	r0, r4
    8c4a:	47b8      	blx	r7
    pBlockHeader->headerCrc = ComputeHeaderCrc(pBlockHeader);
    8c4c:	73a0      	strb	r0, [r4, #14]
    8c4e:	0a00      	lsrs	r0, r0, #8
    8c50:	73e0      	strb	r0, [r4, #15]
    memcpy(dataBlock, pBlockHeader, BLOCK_HEADER_SIZE);
    8c52:	2210      	movs	r2, #16
    8c54:	0021      	movs	r1, r4
    8c56:	0028      	movs	r0, r5
    8c58:	4b3b      	ldr	r3, [pc, #236]	; (8d48 <WriteDataBlockAndHeader+0x13c>)
    8c5a:	4798      	blx	r3
    currentLength = pBlockHeader->blockLength + BLOCK_HEADER_SIZE;
    8c5c:	79a3      	ldrb	r3, [r4, #6]
    8c5e:	79e2      	ldrb	r2, [r4, #7]
    8c60:	0212      	lsls	r2, r2, #8
    8c62:	431a      	orrs	r2, r3
    8c64:	0015      	movs	r5, r2
    8c66:	3510      	adds	r5, #16
    8c68:	b2ad      	uxth	r5, r5
    if (pData != NULL )
    8c6a:	4653      	mov	r3, sl
    8c6c:	2b00      	cmp	r3, #0
    8c6e:	d012      	beq.n	8c96 <WriteDataBlockAndHeader+0x8a>
        if(currentLength <= ROW_SIZE)
    8c70:	2380      	movs	r3, #128	; 0x80
    8c72:	005b      	lsls	r3, r3, #1
    8c74:	429d      	cmp	r5, r3
    8c76:	d909      	bls.n	8c8c <WriteDataBlockAndHeader+0x80>
    8c78:	2600      	movs	r6, #0
    8c7a:	2710      	movs	r7, #16
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    8c7c:	2380      	movs	r3, #128	; 0x80
    8c7e:	005b      	lsls	r3, r3, #1
    8c80:	469b      	mov	fp, r3
    8c82:	466a      	mov	r2, sp
    8c84:	80d3      	strh	r3, [r2, #6]
                memcpy(dataBlock + dataBlockOffset, pData + inDataOffset, bytesToCommit - dataBlockOffset);
    8c86:	4b2c      	ldr	r3, [pc, #176]	; (8d38 <WriteDataBlockAndHeader+0x12c>)
    8c88:	4699      	mov	r9, r3
    8c8a:	e045      	b.n	8d18 <WriteDataBlockAndHeader+0x10c>
            memcpy(dataBlock + BLOCK_HEADER_SIZE , pData, pBlockHeader->blockLength);
    8c8c:	4651      	mov	r1, sl
    8c8e:	482a      	ldr	r0, [pc, #168]	; (8d38 <WriteDataBlockAndHeader+0x12c>)
    8c90:	3010      	adds	r0, #16
    8c92:	4b2d      	ldr	r3, [pc, #180]	; (8d48 <WriteDataBlockAndHeader+0x13c>)
    8c94:	4798      	blx	r3
    if ( !WriteAndCheck(s_sectorHead, dataBlock, MIN((BLOCK_HEADER_SIZE + pBlockHeader->blockLength), ROW_SIZE)) )
    8c96:	79a3      	ldrb	r3, [r4, #6]
    8c98:	79e2      	ldrb	r2, [r4, #7]
    8c9a:	0212      	lsls	r2, r2, #8
    8c9c:	431a      	orrs	r2, r3
    8c9e:	3210      	adds	r2, #16
    8ca0:	2380      	movs	r3, #128	; 0x80
    8ca2:	005b      	lsls	r3, r3, #1
    8ca4:	429a      	cmp	r2, r3
    8ca6:	dd00      	ble.n	8caa <WriteDataBlockAndHeader+0x9e>
    8ca8:	001a      	movs	r2, r3
    8caa:	b292      	uxth	r2, r2
    8cac:	4b27      	ldr	r3, [pc, #156]	; (8d4c <WriteDataBlockAndHeader+0x140>)
    8cae:	8818      	ldrh	r0, [r3, #0]
    8cb0:	4921      	ldr	r1, [pc, #132]	; (8d38 <WriteDataBlockAndHeader+0x12c>)
    8cb2:	4b27      	ldr	r3, [pc, #156]	; (8d50 <WriteDataBlockAndHeader+0x144>)
    8cb4:	4798      	blx	r3
    8cb6:	4680      	mov	r8, r0
    8cb8:	2800      	cmp	r0, #0
    8cba:	d033      	beq.n	8d24 <WriteDataBlockAndHeader+0x118>
    UpdateSectorHead((pBlockHeader->blockLength + BLOCK_HEADER_SIZE), ITEM_64BYTE_ALIGNMENT );
    8cbc:	79a3      	ldrb	r3, [r4, #6]
    8cbe:	79e0      	ldrb	r0, [r4, #7]
    8cc0:	0200      	lsls	r0, r0, #8
    8cc2:	4318      	orrs	r0, r3
    8cc4:	3010      	adds	r0, #16
    8cc6:	b280      	uxth	r0, r0
    8cc8:	2102      	movs	r1, #2
    8cca:	4b22      	ldr	r3, [pc, #136]	; (8d54 <WriteDataBlockAndHeader+0x148>)
    8ccc:	4798      	blx	r3
}
    8cce:	4640      	mov	r0, r8
    8cd0:	b003      	add	sp, #12
    8cd2:	bc3c      	pop	{r2, r3, r4, r5}
    8cd4:	4690      	mov	r8, r2
    8cd6:	4699      	mov	r9, r3
    8cd8:	46a2      	mov	sl, r4
    8cda:	46ab      	mov	fp, r5
    8cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    8cde:	b2a4      	uxth	r4, r4
                memcpy(dataBlock + dataBlockOffset, pData + inDataOffset, bytesToCommit - dataBlockOffset);
    8ce0:	464b      	mov	r3, r9
    8ce2:	19d8      	adds	r0, r3, r7
    8ce4:	1be2      	subs	r2, r4, r7
    8ce6:	4653      	mov	r3, sl
    8ce8:	1999      	adds	r1, r3, r6
    8cea:	4b17      	ldr	r3, [pc, #92]	; (8d48 <WriteDataBlockAndHeader+0x13c>)
    8cec:	4798      	blx	r3
                if ( !WriteAndCheck(s_sectorHead, dataBlock, bytesToCommit))
    8cee:	4b17      	ldr	r3, [pc, #92]	; (8d4c <WriteDataBlockAndHeader+0x140>)
    8cf0:	8818      	ldrh	r0, [r3, #0]
    8cf2:	0022      	movs	r2, r4
    8cf4:	4649      	mov	r1, r9
    8cf6:	4b16      	ldr	r3, [pc, #88]	; (8d50 <WriteDataBlockAndHeader+0x144>)
    8cf8:	4798      	blx	r3
    8cfa:	4680      	mov	r8, r0
    8cfc:	2800      	cmp	r0, #0
    8cfe:	d0e6      	beq.n	8cce <WriteDataBlockAndHeader+0xc2>
                UpdateSectorHead(bytesToCommit, ITEM_64BYTE_ALIGNMENT);
    8d00:	2102      	movs	r1, #2
    8d02:	0020      	movs	r0, r4
    8d04:	4b13      	ldr	r3, [pc, #76]	; (8d54 <WriteDataBlockAndHeader+0x148>)
    8d06:	4798      	blx	r3
                currentLength -= bytesToCommit;
    8d08:	1b2d      	subs	r5, r5, r4
    8d0a:	b2ad      	uxth	r5, r5
                inDataOffset += (bytesToCommit - dataBlockOffset);
    8d0c:	1be4      	subs	r4, r4, r7
    8d0e:	1936      	adds	r6, r6, r4
    8d10:	b2b6      	uxth	r6, r6
                dataBlockOffset = 0;
    8d12:	2700      	movs	r7, #0
            } while(currentLength > 0);
    8d14:	2d00      	cmp	r5, #0
    8d16:	d0da      	beq.n	8cce <WriteDataBlockAndHeader+0xc2>
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    8d18:	1c2c      	adds	r4, r5, #0
    8d1a:	455d      	cmp	r5, fp
    8d1c:	d9df      	bls.n	8cde <WriteDataBlockAndHeader+0xd2>
    8d1e:	466b      	mov	r3, sp
    8d20:	88dc      	ldrh	r4, [r3, #6]
    8d22:	e7dc      	b.n	8cde <WriteDataBlockAndHeader+0xd2>
        UpdateSectorHead((pBlockHeader->blockLength + BLOCK_HEADER_SIZE), ITEM_64BYTE_ALIGNMENT);
    8d24:	79a3      	ldrb	r3, [r4, #6]
    8d26:	79e0      	ldrb	r0, [r4, #7]
    8d28:	0200      	lsls	r0, r0, #8
    8d2a:	4318      	orrs	r0, r3
    8d2c:	3010      	adds	r0, #16
    8d2e:	b280      	uxth	r0, r0
    8d30:	2102      	movs	r1, #2
    8d32:	4b08      	ldr	r3, [pc, #32]	; (8d54 <WriteDataBlockAndHeader+0x148>)
    8d34:	4798      	blx	r3
        return false;
    8d36:	e7ca      	b.n	8cce <WriteDataBlockAndHeader+0xc2>
    8d38:	20000138 	.word	0x20000138
    8d3c:	00016c59 	.word	0x00016c59
    8d40:	0000ffff 	.word	0x0000ffff
    8d44:	0000823d 	.word	0x0000823d
    8d48:	00016c47 	.word	0x00016c47
    8d4c:	2000027e 	.word	0x2000027e
    8d50:	00008575 	.word	0x00008575
    8d54:	00008201 	.word	0x00008201

00008d58 <S_Nv_EarlyInit>:
/***************************************************************************************************
* EXPORTED FUNCTIONS
***************************************************************************************************/

void S_Nv_EarlyInit(void)
{
    8d58:	b5f0      	push	{r4, r5, r6, r7, lr}
    8d5a:	46ce      	mov	lr, r9
    8d5c:	4647      	mov	r7, r8
    8d5e:	b580      	push	{r7, lr}
    8d60:	b091      	sub	sp, #68	; 0x44
    SnvRevisioin_t revisionNumber;
    s_itemCount = 0u;
    8d62:	2200      	movs	r2, #0
    8d64:	4bb3      	ldr	r3, [pc, #716]	; (9034 <S_Nv_EarlyInit+0x2dc>)
    8d66:	701a      	strb	r2, [r3, #0]
    SectorHeader_t sectorHeader;

    uint8_t lastSector = 0xFFu;
    uint32_t lastSectorSequence = 0xFFFFFFFFuL;

    for ( uint8_t sector = FIRST_SECTOR; sector < (FIRST_SECTOR + SECTOR_COUNT); sector++ )
    8d68:	2400      	movs	r4, #0
    uint32_t lastSectorSequence = 0xFFFFFFFFuL;
    8d6a:	2301      	movs	r3, #1
    8d6c:	425b      	negs	r3, r3
    8d6e:	4699      	mov	r9, r3
    uint8_t lastSector = 0xFFu;
    8d70:	27ff      	movs	r7, #255	; 0xff
    {
        D_Nv_Read(sector, 0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE);
    8d72:	4eb1      	ldr	r6, [pc, #708]	; (9038 <S_Nv_EarlyInit+0x2e0>)
    8d74:	2312      	movs	r3, #18
    8d76:	aa0b      	add	r2, sp, #44	; 0x2c
    8d78:	2100      	movs	r1, #0
    8d7a:	0020      	movs	r0, r4
    8d7c:	47b0      	blx	r6
        if (((sectorHeader.sequenceNumber ^ sectorHeader.sequenceParity) == 0xFFFFFFFFuL) &&
    8d7e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    8d80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8d82:	9301      	str	r3, [sp, #4]
    8d84:	406b      	eors	r3, r5
    8d86:	3301      	adds	r3, #1
    8d88:	d01d      	beq.n	8dc6 <S_Nv_EarlyInit+0x6e>
    for ( uint8_t sector = FIRST_SECTOR; sector < (FIRST_SECTOR + SECTOR_COUNT); sector++ )
    8d8a:	3401      	adds	r4, #1
    8d8c:	b2e4      	uxtb	r4, r4
    8d8e:	2c02      	cmp	r4, #2
    8d90:	d1f0      	bne.n	8d74 <S_Nv_EarlyInit+0x1c>
                lastSectorSequence = sectorHeader.sequenceNumber;
            }
        }
    }

    if ( lastSector == 0xFFu )
    8d92:	2fff      	cmp	r7, #255	; 0xff
    8d94:	d057      	beq.n	8e46 <S_Nv_EarlyInit+0xee>
        s_itemCount = 0u;
    }
    else
    {
        // load active sector
        s_sector = lastSector;
    8d96:	4ba9      	ldr	r3, [pc, #676]	; (903c <S_Nv_EarlyInit+0x2e4>)
    8d98:	701f      	strb	r7, [r3, #0]
    if (SNV_REV_1 == revisionNumber)
    8d9a:	4643      	mov	r3, r8
    8d9c:	2b01      	cmp	r3, #1
    8d9e:	d100      	bne.n	8da2 <S_Nv_EarlyInit+0x4a>
    8da0:	e07b      	b.n	8e9a <S_Nv_EarlyInit+0x142>
    else if (SNV_REV_2 == revisionNumber)
    8da2:	4643      	mov	r3, r8
    8da4:	2b02      	cmp	r3, #2
    8da6:	d16a      	bne.n	8e7e <S_Nv_EarlyInit+0x126>
        s_sectorHead = ITEMS_AREA_START_ADDRESS;
    8da8:	2280      	movs	r2, #128	; 0x80
    8daa:	0052      	lsls	r2, r2, #1
    8dac:	4ba4      	ldr	r3, [pc, #656]	; (9040 <S_Nv_EarlyInit+0x2e8>)
    8dae:	801a      	strh	r2, [r3, #0]
        D_Nv_Read(s_sector, 0, (uint8_t*) &sectorHeader, sizeof(SectorHeader_t));
    8db0:	2312      	movs	r3, #18
    8db2:	aa06      	add	r2, sp, #24
    8db4:	2100      	movs	r1, #0
    8db6:	0038      	movs	r0, r7
    8db8:	4c9f      	ldr	r4, [pc, #636]	; (9038 <S_Nv_EarlyInit+0x2e0>)
    8dba:	47a0      	blx	r4
        while ( s_sectorHead < SECTOR_SIZE )
    8dbc:	4da0      	ldr	r5, [pc, #640]	; (9040 <S_Nv_EarlyInit+0x2e8>)
                UpdateSectorHead(0, itemAlignment);
    8dbe:	4ba1      	ldr	r3, [pc, #644]	; (9044 <S_Nv_EarlyInit+0x2ec>)
    8dc0:	4698      	mov	r8, r3
            D_Nv_Read(s_sector, s_sectorHead, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8dc2:	002e      	movs	r6, r5
    8dc4:	e10f      	b.n	8fe6 <S_Nv_EarlyInit+0x28e>
        if (((sectorHeader.sequenceNumber ^ sectorHeader.sequenceParity) == 0xFFFFFFFFuL) &&
    8dc6:	ab02      	add	r3, sp, #8
    8dc8:	2226      	movs	r2, #38	; 0x26
    8dca:	189b      	adds	r3, r3, r2
    8dcc:	781b      	ldrb	r3, [r3, #0]
    8dce:	2b41      	cmp	r3, #65	; 0x41
    8dd0:	d1db      	bne.n	8d8a <S_Nv_EarlyInit+0x32>
            (sectorHeader.signature[0] == (uint8_t) 'A') &&
    8dd2:	ab02      	add	r3, sp, #8
    8dd4:	3201      	adds	r2, #1
    8dd6:	189b      	adds	r3, r3, r2
    8dd8:	781b      	ldrb	r3, [r3, #0]
    8dda:	2b54      	cmp	r3, #84	; 0x54
    8ddc:	d1d5      	bne.n	8d8a <S_Nv_EarlyInit+0x32>
            (sectorHeader.signature[1] == (uint8_t) 'T') &&
    8dde:	ab02      	add	r3, sp, #8
    8de0:	3201      	adds	r2, #1
    8de2:	189b      	adds	r3, r3, r2
    8de4:	781b      	ldrb	r3, [r3, #0]
    8de6:	2b53      	cmp	r3, #83	; 0x53
    8de8:	d1cf      	bne.n	8d8a <S_Nv_EarlyInit+0x32>
            (sectorHeader.signature[2] == (uint8_t) 'S') &&
    8dea:	ab02      	add	r3, sp, #8
    8dec:	3201      	adds	r2, #1
    8dee:	189b      	adds	r3, r3, r2
    8df0:	781b      	ldrb	r3, [r3, #0]
    8df2:	2b4e      	cmp	r3, #78	; 0x4e
    8df4:	d1c9      	bne.n	8d8a <S_Nv_EarlyInit+0x32>
            (sectorHeader.signature[3] == (uint8_t) 'N') &&
    8df6:	ab02      	add	r3, sp, #8
    8df8:	3201      	adds	r2, #1
    8dfa:	189b      	adds	r3, r3, r2
    8dfc:	781b      	ldrb	r3, [r3, #0]
    8dfe:	2b76      	cmp	r3, #118	; 0x76
    8e00:	d1c3      	bne.n	8d8a <S_Nv_EarlyInit+0x32>
            if ( sectorHeader.signature[5] == (uint8_t) '1')
    8e02:	ab02      	add	r3, sp, #8
    8e04:	3201      	adds	r2, #1
    8e06:	189b      	adds	r3, r3, r2
    8e08:	781b      	ldrb	r3, [r3, #0]
    8e0a:	2b31      	cmp	r3, #49	; 0x31
    8e0c:	d106      	bne.n	8e1c <S_Nv_EarlyInit+0xc4>
                if (pSectorHeaderSnv1->isActive == 0x0000u)
    8e0e:	ab02      	add	r3, sp, #8
    8e10:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    8e12:	2b00      	cmp	r3, #0
    8e14:	d1b9      	bne.n	8d8a <S_Nv_EarlyInit+0x32>
                    revisionNumber = SNV_REV_1;
    8e16:	2301      	movs	r3, #1
    8e18:	4698      	mov	r8, r3
    8e1a:	e00f      	b.n	8e3c <S_Nv_EarlyInit+0xe4>
            else if (sectorHeader.signature[5] == (uint8_t) '2')
    8e1c:	2b32      	cmp	r3, #50	; 0x32
    8e1e:	d1b4      	bne.n	8d8a <S_Nv_EarlyInit+0x32>
    return ComputeCrc(((uint8_t*) pSectorHeader) + sizeof(pSectorHeader->headerCrc), (sizeof(SectorHeader_t)- sizeof(pSectorHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    8e20:	4a89      	ldr	r2, [pc, #548]	; (9048 <S_Nv_EarlyInit+0x2f0>)
    8e22:	2110      	movs	r1, #16
    8e24:	2026      	movs	r0, #38	; 0x26
    8e26:	ab02      	add	r3, sp, #8
    8e28:	469c      	mov	ip, r3
    8e2a:	4460      	add	r0, ip
    8e2c:	4b87      	ldr	r3, [pc, #540]	; (904c <S_Nv_EarlyInit+0x2f4>)
    8e2e:	4798      	blx	r3
              if (headerCrc == sectorHeader.headerCrc)
    8e30:	ab02      	add	r3, sp, #8
    8e32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    8e34:	4283      	cmp	r3, r0
    8e36:	d1a8      	bne.n	8d8a <S_Nv_EarlyInit+0x32>
                  revisionNumber = SNV_REV_2;
    8e38:	2302      	movs	r3, #2
    8e3a:	4698      	mov	r8, r3
            if ( sectorHeader.sequenceNumber < lastSectorSequence )
    8e3c:	454d      	cmp	r5, r9
    8e3e:	d2a4      	bcs.n	8d8a <S_Nv_EarlyInit+0x32>
                lastSectorSequence = sectorHeader.sequenceNumber;
    8e40:	46a9      	mov	r9, r5
            if ( sectorHeader.sequenceNumber < lastSectorSequence )
    8e42:	0027      	movs	r7, r4
    8e44:	e7a1      	b.n	8d8a <S_Nv_EarlyInit+0x32>
        s_sector = FIRST_SECTOR;
    8e46:	2200      	movs	r2, #0
    8e48:	4b7c      	ldr	r3, [pc, #496]	; (903c <S_Nv_EarlyInit+0x2e4>)
    8e4a:	701a      	strb	r2, [r3, #0]
            if ( EraseSector())
    8e4c:	4c80      	ldr	r4, [pc, #512]	; (9050 <S_Nv_EarlyInit+0x2f8>)
                s_nextPageAddressAfterCompact = 0xFFFFu;
    8e4e:	4e81      	ldr	r6, [pc, #516]	; (9054 <S_Nv_EarlyInit+0x2fc>)
                if ( WriteSectorHeader(INITIAL_SECTOR_SEQUENCE_NUMBER))
    8e50:	4d81      	ldr	r5, [pc, #516]	; (9058 <S_Nv_EarlyInit+0x300>)
    8e52:	e006      	b.n	8e62 <S_Nv_EarlyInit+0x10a>
            s_sector++;
    8e54:	4a79      	ldr	r2, [pc, #484]	; (903c <S_Nv_EarlyInit+0x2e4>)
    8e56:	7813      	ldrb	r3, [r2, #0]
    8e58:	3301      	adds	r3, #1
    8e5a:	b2db      	uxtb	r3, r3
    8e5c:	7013      	strb	r3, [r2, #0]
            if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
    8e5e:	2b01      	cmp	r3, #1
    8e60:	d815      	bhi.n	8e8e <S_Nv_EarlyInit+0x136>
            if ( EraseSector())
    8e62:	47a0      	blx	r4
    8e64:	2800      	cmp	r0, #0
    8e66:	d0f5      	beq.n	8e54 <S_Nv_EarlyInit+0xfc>
                s_nextPageAddressAfterCompact = 0xFFFFu;
    8e68:	2301      	movs	r3, #1
    8e6a:	425b      	negs	r3, r3
    8e6c:	8033      	strh	r3, [r6, #0]
                if ( WriteSectorHeader(INITIAL_SECTOR_SEQUENCE_NUMBER))
    8e6e:	2002      	movs	r0, #2
    8e70:	4240      	negs	r0, r0
    8e72:	47a8      	blx	r5
    8e74:	2800      	cmp	r0, #0
    8e76:	d0ed      	beq.n	8e54 <S_Nv_EarlyInit+0xfc>
        s_itemCount = 0u;
    8e78:	2200      	movs	r2, #0
    8e7a:	4b6e      	ldr	r3, [pc, #440]	; (9034 <S_Nv_EarlyInit+0x2dc>)
    8e7c:	701a      	strb	r2, [r3, #0]

        LoadSector(revisionNumber);
    }
    s_earlyInitDone = true;
    8e7e:	2201      	movs	r2, #1
    8e80:	4b76      	ldr	r3, [pc, #472]	; (905c <S_Nv_EarlyInit+0x304>)
    8e82:	701a      	strb	r2, [r3, #0]
}
    8e84:	b011      	add	sp, #68	; 0x44
    8e86:	bc0c      	pop	{r2, r3}
    8e88:	4690      	mov	r8, r2
    8e8a:	4699      	mov	r9, r3
    8e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                assert(false);
    8e8e:	4b74      	ldr	r3, [pc, #464]	; (9060 <S_Nv_EarlyInit+0x308>)
    8e90:	4a74      	ldr	r2, [pc, #464]	; (9064 <S_Nv_EarlyInit+0x30c>)
    8e92:	4975      	ldr	r1, [pc, #468]	; (9068 <S_Nv_EarlyInit+0x310>)
    8e94:	4875      	ldr	r0, [pc, #468]	; (906c <S_Nv_EarlyInit+0x314>)
    8e96:	4c76      	ldr	r4, [pc, #472]	; (9070 <S_Nv_EarlyInit+0x318>)
    8e98:	47a0      	blx	r4
        s_sectorHead = sizeof(SectorHeaderSnv1_t);
    8e9a:	2210      	movs	r2, #16
    8e9c:	4b68      	ldr	r3, [pc, #416]	; (9040 <S_Nv_EarlyInit+0x2e8>)
    8e9e:	801a      	strh	r2, [r3, #0]
    8ea0:	2110      	movs	r1, #16
            D_Nv_Read(s_sector, s_sectorHead, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8ea2:	4e66      	ldr	r6, [pc, #408]	; (903c <S_Nv_EarlyInit+0x2e4>)
    8ea4:	4d64      	ldr	r5, [pc, #400]	; (9038 <S_Nv_EarlyInit+0x2e0>)
    return ComputeCrc(((uint8_t*) pBlockHeader) + sizeof(pBlockHeader->isActive), sizeof(BlockHeaderSNv1_t) - (sizeof(pBlockHeader->isActive)  + sizeof(pBlockHeader->headerCrc)), 0xFFFF); // skip is Active and headerCrc fields
    8ea6:	4f69      	ldr	r7, [pc, #420]	; (904c <S_Nv_EarlyInit+0x2f4>)
    8ea8:	e072      	b.n	8f90 <S_Nv_EarlyInit+0x238>
            else if ( blockHeader.isActive != 0x0000u )
    8eaa:	ab06      	add	r3, sp, #24
    8eac:	881b      	ldrh	r3, [r3, #0]
    8eae:	2b00      	cmp	r3, #0
    8eb0:	d007      	beq.n	8ec2 <S_Nv_EarlyInit+0x16a>
                UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), ITEM_16BYTE_ALIGNMENT);
    8eb2:	ab06      	add	r3, sp, #24
    8eb4:	88d8      	ldrh	r0, [r3, #6]
    8eb6:	3010      	adds	r0, #16
    8eb8:	b280      	uxth	r0, r0
    8eba:	2101      	movs	r1, #1
    8ebc:	4b61      	ldr	r3, [pc, #388]	; (9044 <S_Nv_EarlyInit+0x2ec>)
    8ebe:	4798      	blx	r3
    8ec0:	e061      	b.n	8f86 <S_Nv_EarlyInit+0x22e>
                uint16_t id = blockHeader.id;
    8ec2:	ab06      	add	r3, sp, #24
    8ec4:	885c      	ldrh	r4, [r3, #2]
                Item_t *cache = FindItemCache(id);
    8ec6:	0020      	movs	r0, r4
    8ec8:	4b6a      	ldr	r3, [pc, #424]	; (9074 <S_Nv_EarlyInit+0x31c>)
    8eca:	4798      	blx	r3
                if (cache == NULL)
    8ecc:	2800      	cmp	r0, #0
    8ece:	d010      	beq.n	8ef2 <S_Nv_EarlyInit+0x19a>
                cache->lastBlock = s_sectorHead;
    8ed0:	4b5b      	ldr	r3, [pc, #364]	; (9040 <S_Nv_EarlyInit+0x2e8>)
    8ed2:	781a      	ldrb	r2, [r3, #0]
    8ed4:	7082      	strb	r2, [r0, #2]
    8ed6:	785b      	ldrb	r3, [r3, #1]
    8ed8:	70c3      	strb	r3, [r0, #3]
                if ( blockHeader.itemLength == 0u )
    8eda:	ab06      	add	r3, sp, #24
    8edc:	891b      	ldrh	r3, [r3, #8]
    8ede:	2b00      	cmp	r3, #0
    8ee0:	d00b      	beq.n	8efa <S_Nv_EarlyInit+0x1a2>
                UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), ITEM_16BYTE_ALIGNMENT);
    8ee2:	ab06      	add	r3, sp, #24
    8ee4:	88d8      	ldrh	r0, [r3, #6]
    8ee6:	3010      	adds	r0, #16
    8ee8:	b280      	uxth	r0, r0
    8eea:	2101      	movs	r1, #1
    8eec:	4b55      	ldr	r3, [pc, #340]	; (9044 <S_Nv_EarlyInit+0x2ec>)
    8eee:	4798      	blx	r3
    8ef0:	e049      	b.n	8f86 <S_Nv_EarlyInit+0x22e>
                    cache = CreateItemCache(id);
    8ef2:	0020      	movs	r0, r4
    8ef4:	4b60      	ldr	r3, [pc, #384]	; (9078 <S_Nv_EarlyInit+0x320>)
    8ef6:	4798      	blx	r3
    8ef8:	e7ea      	b.n	8ed0 <S_Nv_EarlyInit+0x178>
                    DeleteItemCache(id);
    8efa:	0020      	movs	r0, r4
    8efc:	4b5f      	ldr	r3, [pc, #380]	; (907c <S_Nv_EarlyInit+0x324>)
    8efe:	4798      	blx	r3
    8f00:	e7ef      	b.n	8ee2 <S_Nv_EarlyInit+0x18a>
                uint16_t crc = ComputeDataCrc(s_sector, s_sectorHead, &blockHeader);
    8f02:	4b4f      	ldr	r3, [pc, #316]	; (9040 <S_Nv_EarlyInit+0x2e8>)
    8f04:	8819      	ldrh	r1, [r3, #0]
    8f06:	4b4d      	ldr	r3, [pc, #308]	; (903c <S_Nv_EarlyInit+0x2e4>)
    8f08:	7818      	ldrb	r0, [r3, #0]
    8f0a:	aa02      	add	r2, sp, #8
    8f0c:	4b5c      	ldr	r3, [pc, #368]	; (9080 <S_Nv_EarlyInit+0x328>)
    8f0e:	4798      	blx	r3
                if (crc != blockHeader.dataCrc)
    8f10:	ab02      	add	r3, sp, #8
    8f12:	881b      	ldrh	r3, [r3, #0]
    8f14:	4283      	cmp	r3, r0
    8f16:	d007      	beq.n	8f28 <S_Nv_EarlyInit+0x1d0>
                    UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), itemAlignment);
    8f18:	ab02      	add	r3, sp, #8
    8f1a:	88d8      	ldrh	r0, [r3, #6]
    8f1c:	3010      	adds	r0, #16
    8f1e:	b280      	uxth	r0, r0
    8f20:	0021      	movs	r1, r4
    8f22:	4b48      	ldr	r3, [pc, #288]	; (9044 <S_Nv_EarlyInit+0x2ec>)
    8f24:	4798      	blx	r3
    8f26:	e05e      	b.n	8fe6 <S_Nv_EarlyInit+0x28e>
                    uint16_t id = blockHeader.id;
    8f28:	ab02      	add	r3, sp, #8
    8f2a:	885f      	ldrh	r7, [r3, #2]
                    Item_t *cache = FindItemCache(id);
    8f2c:	0038      	movs	r0, r7
    8f2e:	4b51      	ldr	r3, [pc, #324]	; (9074 <S_Nv_EarlyInit+0x31c>)
    8f30:	4798      	blx	r3
                    if (cache == NULL)
    8f32:	2800      	cmp	r0, #0
    8f34:	d010      	beq.n	8f58 <S_Nv_EarlyInit+0x200>
                    cache->lastBlock = s_sectorHead;
    8f36:	4b42      	ldr	r3, [pc, #264]	; (9040 <S_Nv_EarlyInit+0x2e8>)
    8f38:	781a      	ldrb	r2, [r3, #0]
    8f3a:	7082      	strb	r2, [r0, #2]
    8f3c:	785b      	ldrb	r3, [r3, #1]
    8f3e:	70c3      	strb	r3, [r0, #3]
                    if ( blockHeader.itemLength == 0u )
    8f40:	ab02      	add	r3, sp, #8
    8f42:	891b      	ldrh	r3, [r3, #8]
    8f44:	2b00      	cmp	r3, #0
    8f46:	d00b      	beq.n	8f60 <S_Nv_EarlyInit+0x208>
                    UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), itemAlignment);
    8f48:	ab02      	add	r3, sp, #8
    8f4a:	88d8      	ldrh	r0, [r3, #6]
    8f4c:	3010      	adds	r0, #16
    8f4e:	b280      	uxth	r0, r0
    8f50:	0021      	movs	r1, r4
    8f52:	4b3c      	ldr	r3, [pc, #240]	; (9044 <S_Nv_EarlyInit+0x2ec>)
    8f54:	4798      	blx	r3
    8f56:	e046      	b.n	8fe6 <S_Nv_EarlyInit+0x28e>
                        cache = CreateItemCache(id);
    8f58:	0038      	movs	r0, r7
    8f5a:	4b47      	ldr	r3, [pc, #284]	; (9078 <S_Nv_EarlyInit+0x320>)
    8f5c:	4798      	blx	r3
    8f5e:	e7ea      	b.n	8f36 <S_Nv_EarlyInit+0x1de>
                        DeleteItemCache(id);
    8f60:	0038      	movs	r0, r7
    8f62:	4b46      	ldr	r3, [pc, #280]	; (907c <S_Nv_EarlyInit+0x324>)
    8f64:	4798      	blx	r3
    8f66:	e7ef      	b.n	8f48 <S_Nv_EarlyInit+0x1f0>
            else if ( blockHeader.headerCrc != ComputeHeaderCrcSnv1(&blockHeader) )
    8f68:	ab06      	add	r3, sp, #24
    8f6a:	89dc      	ldrh	r4, [r3, #14]
    return ComputeCrc(((uint8_t*) pBlockHeader) + sizeof(pBlockHeader->isActive), sizeof(BlockHeaderSNv1_t) - (sizeof(pBlockHeader->isActive)  + sizeof(pBlockHeader->headerCrc)), 0xFFFF); // skip is Active and headerCrc fields
    8f6c:	4a36      	ldr	r2, [pc, #216]	; (9048 <S_Nv_EarlyInit+0x2f0>)
    8f6e:	210c      	movs	r1, #12
    8f70:	2012      	movs	r0, #18
    8f72:	ab02      	add	r3, sp, #8
    8f74:	469c      	mov	ip, r3
    8f76:	4460      	add	r0, ip
    8f78:	47b8      	blx	r7
            else if ( blockHeader.headerCrc != ComputeHeaderCrcSnv1(&blockHeader) )
    8f7a:	4284      	cmp	r4, r0
    8f7c:	d095      	beq.n	8eaa <S_Nv_EarlyInit+0x152>
                UpdateSectorHead(BLOCK_HEADER_SIZE, ITEM_16BYTE_ALIGNMENT);
    8f7e:	2101      	movs	r1, #1
    8f80:	2010      	movs	r0, #16
    8f82:	4b30      	ldr	r3, [pc, #192]	; (9044 <S_Nv_EarlyInit+0x2ec>)
    8f84:	4798      	blx	r3
        while ( s_sectorHead < SECTOR_SIZE )
    8f86:	4b2e      	ldr	r3, [pc, #184]	; (9040 <S_Nv_EarlyInit+0x2e8>)
    8f88:	8819      	ldrh	r1, [r3, #0]
    8f8a:	4b3e      	ldr	r3, [pc, #248]	; (9084 <S_Nv_EarlyInit+0x32c>)
    8f8c:	4299      	cmp	r1, r3
    8f8e:	d812      	bhi.n	8fb6 <S_Nv_EarlyInit+0x25e>
            D_Nv_Read(s_sector, s_sectorHead, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8f90:	ac06      	add	r4, sp, #24
    8f92:	7830      	ldrb	r0, [r6, #0]
    8f94:	2310      	movs	r3, #16
    8f96:	0022      	movs	r2, r4
    8f98:	47a8      	blx	r5
        if ( pData[i] != 0xFFu )
    8f9a:	7823      	ldrb	r3, [r4, #0]
    8f9c:	2bff      	cmp	r3, #255	; 0xff
    8f9e:	d1e3      	bne.n	8f68 <S_Nv_EarlyInit+0x210>
    8fa0:	ab06      	add	r3, sp, #24
    8fa2:	211f      	movs	r1, #31
    8fa4:	aa02      	add	r2, sp, #8
    8fa6:	4694      	mov	ip, r2
    8fa8:	4461      	add	r1, ip
    8faa:	785a      	ldrb	r2, [r3, #1]
    8fac:	2aff      	cmp	r2, #255	; 0xff
    8fae:	d1db      	bne.n	8f68 <S_Nv_EarlyInit+0x210>
    8fb0:	3301      	adds	r3, #1
    for ( uint16_t i = 0u; i < length; i++ )
    8fb2:	428b      	cmp	r3, r1
    8fb4:	d1f9      	bne.n	8faa <S_Nv_EarlyInit+0x252>
        if ( !CompactSector() )
    8fb6:	4b34      	ldr	r3, [pc, #208]	; (9088 <S_Nv_EarlyInit+0x330>)
    8fb8:	4798      	blx	r3
    8fba:	2800      	cmp	r0, #0
    8fbc:	d000      	beq.n	8fc0 <S_Nv_EarlyInit+0x268>
    8fbe:	e75e      	b.n	8e7e <S_Nv_EarlyInit+0x126>
            assert(false);
    8fc0:	4b27      	ldr	r3, [pc, #156]	; (9060 <S_Nv_EarlyInit+0x308>)
    8fc2:	4a32      	ldr	r2, [pc, #200]	; (908c <S_Nv_EarlyInit+0x334>)
    8fc4:	4932      	ldr	r1, [pc, #200]	; (9090 <S_Nv_EarlyInit+0x338>)
    8fc6:	4829      	ldr	r0, [pc, #164]	; (906c <S_Nv_EarlyInit+0x314>)
    8fc8:	4c29      	ldr	r4, [pc, #164]	; (9070 <S_Nv_EarlyInit+0x318>)
    8fca:	47a0      	blx	r4
            else if ( blockHeader.headerCrc != ComputeHeaderCrc(&blockHeader) )
    8fcc:	ab02      	add	r3, sp, #8
    8fce:	89df      	ldrh	r7, [r3, #14]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    8fd0:	4a1d      	ldr	r2, [pc, #116]	; (9048 <S_Nv_EarlyInit+0x2f0>)
    8fd2:	210e      	movs	r1, #14
    8fd4:	0018      	movs	r0, r3
    8fd6:	4b1d      	ldr	r3, [pc, #116]	; (904c <S_Nv_EarlyInit+0x2f4>)
    8fd8:	4798      	blx	r3
            else if ( blockHeader.headerCrc != ComputeHeaderCrc(&blockHeader) )
    8fda:	4287      	cmp	r7, r0
    8fdc:	d091      	beq.n	8f02 <S_Nv_EarlyInit+0x1aa>
                UpdateSectorHead(BLOCK_HEADER_SIZE, itemAlignment);
    8fde:	0021      	movs	r1, r4
    8fe0:	2010      	movs	r0, #16
    8fe2:	4b18      	ldr	r3, [pc, #96]	; (9044 <S_Nv_EarlyInit+0x2ec>)
    8fe4:	4798      	blx	r3
        while ( s_sectorHead < SECTOR_SIZE )
    8fe6:	882b      	ldrh	r3, [r5, #0]
    8fe8:	4a26      	ldr	r2, [pc, #152]	; (9084 <S_Nv_EarlyInit+0x32c>)
    8fea:	4293      	cmp	r3, r2
    8fec:	d900      	bls.n	8ff0 <S_Nv_EarlyInit+0x298>
    8fee:	e746      	b.n	8e7e <S_Nv_EarlyInit+0x126>
            if ((sectorHeader.nextPageAddressAfterCompact != 0xFFFFu)  && (s_sectorHead < sectorHeader.nextPageAddressAfterCompact))
    8ff0:	aa06      	add	r2, sp, #24
    8ff2:	8a12      	ldrh	r2, [r2, #16]
    8ff4:	4914      	ldr	r1, [pc, #80]	; (9048 <S_Nv_EarlyInit+0x2f0>)
    8ff6:	428a      	cmp	r2, r1
    8ff8:	d002      	beq.n	9000 <S_Nv_EarlyInit+0x2a8>
                itemAlignment = ITEM_NO_ALIGNMENT;
    8ffa:	2400      	movs	r4, #0
            if ((sectorHeader.nextPageAddressAfterCompact != 0xFFFFu)  && (s_sectorHead < sectorHeader.nextPageAddressAfterCompact))
    8ffc:	429a      	cmp	r2, r3
    8ffe:	d803      	bhi.n	9008 <S_Nv_EarlyInit+0x2b0>
                UpdateSectorHead(0, itemAlignment);
    9000:	2102      	movs	r1, #2
    9002:	2000      	movs	r0, #0
    9004:	47c0      	blx	r8
                itemAlignment = ITEM_64BYTE_ALIGNMENT;
    9006:	2402      	movs	r4, #2
            D_Nv_Read(s_sector, s_sectorHead, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    9008:	8831      	ldrh	r1, [r6, #0]
    900a:	4b0c      	ldr	r3, [pc, #48]	; (903c <S_Nv_EarlyInit+0x2e4>)
    900c:	7818      	ldrb	r0, [r3, #0]
    900e:	2310      	movs	r3, #16
    9010:	aa02      	add	r2, sp, #8
    9012:	4f09      	ldr	r7, [pc, #36]	; (9038 <S_Nv_EarlyInit+0x2e0>)
    9014:	47b8      	blx	r7
        if ( pData[i] != 0xFFu )
    9016:	ab02      	add	r3, sp, #8
    9018:	781b      	ldrb	r3, [r3, #0]
    901a:	2bff      	cmp	r3, #255	; 0xff
    901c:	d1d6      	bne.n	8fcc <S_Nv_EarlyInit+0x274>
    901e:	ab02      	add	r3, sp, #8
    9020:	210f      	movs	r1, #15
    9022:	469c      	mov	ip, r3
    9024:	4461      	add	r1, ip
    9026:	785a      	ldrb	r2, [r3, #1]
    9028:	2aff      	cmp	r2, #255	; 0xff
    902a:	d1cf      	bne.n	8fcc <S_Nv_EarlyInit+0x274>
    902c:	3301      	adds	r3, #1
    for ( uint16_t i = 0u; i < length; i++ )
    902e:	428b      	cmp	r3, r1
    9030:	d1f9      	bne.n	9026 <S_Nv_EarlyInit+0x2ce>
    9032:	e724      	b.n	8e7e <S_Nv_EarlyInit+0x126>
    9034:	20000274 	.word	0x20000274
    9038:	00007f95 	.word	0x00007f95
    903c:	2000027c 	.word	0x2000027c
    9040:	2000027e 	.word	0x2000027e
    9044:	00008201 	.word	0x00008201
    9048:	0000ffff 	.word	0x0000ffff
    904c:	0000823d 	.word	0x0000823d
    9050:	00008541 	.word	0x00008541
    9054:	20000276 	.word	0x20000276
    9058:	000085a9 	.word	0x000085a9
    905c:	20000250 	.word	0x20000250
    9060:	00018954 	.word	0x00018954
    9064:	00018b10 	.word	0x00018b10
    9068:	0000052b 	.word	0x0000052b
    906c:	000189d0 	.word	0x000189d0
    9070:	00016b85 	.word	0x00016b85
    9074:	000083dd 	.word	0x000083dd
    9078:	0000846d 	.word	0x0000846d
    907c:	000084cd 	.word	0x000084cd
    9080:	00008335 	.word	0x00008335
    9084:	00001fff 	.word	0x00001fff
    9088:	000086a9 	.word	0x000086a9
    908c:	00018ad0 	.word	0x00018ad0
    9090:	00000336 	.word	0x00000336

00009094 <S_Nv_Init>:


void S_Nv_Init(void)
{
    9094:	b510      	push	{r4, lr}
    if (!s_earlyInitDone)
    9096:	4b08      	ldr	r3, [pc, #32]	; (90b8 <S_Nv_Init+0x24>)
    9098:	781b      	ldrb	r3, [r3, #0]
    909a:	2b00      	cmp	r3, #0
    909c:	d008      	beq.n	90b0 <S_Nv_Init+0x1c>
    {
        S_Nv_EarlyInit();
    }

    eraseSectorTimer.handler = eraseSectorTimerFired;
    909e:	4b07      	ldr	r3, [pc, #28]	; (90bc <S_Nv_Init+0x28>)
    90a0:	4a07      	ldr	r2, [pc, #28]	; (90c0 <S_Nv_Init+0x2c>)
    90a2:	611a      	str	r2, [r3, #16]
    eraseSectorTimer.timeout = ERASE_SECTOR_DELAY_MS;
    90a4:	4a07      	ldr	r2, [pc, #28]	; (90c4 <S_Nv_Init+0x30>)
    90a6:	605a      	str	r2, [r3, #4]
    eraseSectorTimer.interval = ERASE_SECTOR_DELAY_MS;
    90a8:	609a      	str	r2, [r3, #8]
    eraseSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
    90aa:	2200      	movs	r2, #0
    90ac:	731a      	strb	r2, [r3, #12]
}
    90ae:	bd10      	pop	{r4, pc}
        S_Nv_EarlyInit();
    90b0:	4b05      	ldr	r3, [pc, #20]	; (90c8 <S_Nv_Init+0x34>)
    90b2:	4798      	blx	r3
    90b4:	e7f3      	b.n	909e <S_Nv_Init+0xa>
    90b6:	46c0      	nop			; (mov r8, r8)
    90b8:	20000250 	.word	0x20000250
    90bc:	20000238 	.word	0x20000238
    90c0:	0000851d 	.word	0x0000851d
    90c4:	00001b58 	.word	0x00001b58
    90c8:	00008d59 	.word	0x00008d59

000090cc <S_Nv_Write_Impl>:
#if defined(S_XNV_LOGGING)
static S_Nv_ReturnValue_t S_Nv_Write_Original(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#else
S_Nv_ReturnValue_t S_Nv_Write_Impl(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#endif
{
    90cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    90ce:	46ce      	mov	lr, r9
    90d0:	4647      	mov	r7, r8
    90d2:	b580      	push	{r7, lr}
    90d4:	b087      	sub	sp, #28
    90d6:	0004      	movs	r4, r0
    90d8:	9101      	str	r1, [sp, #4]
    90da:	0015      	movs	r5, r2
    90dc:	001f      	movs	r7, r3
    assert((id != 0u) && (pData != NULL));
    90de:	2800      	cmp	r0, #0
    90e0:	d00c      	beq.n	90fc <S_Nv_Write_Impl+0x30>
    90e2:	2b00      	cmp	r3, #0
    90e4:	d00a      	beq.n	90fc <S_Nv_Write_Impl+0x30>

    if ( PowerSupplyTooLow() )
    90e6:	4b35      	ldr	r3, [pc, #212]	; (91bc <S_Nv_Write_Impl+0xf0>)
    90e8:	4798      	blx	r3
    {
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    90ea:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    90ec:	2800      	cmp	r0, #0
    90ee:	d00b      	beq.n	9108 <S_Nv_Write_Impl+0x3c>
        //SYS_StartTimer(&compactItemTimer);
        }
    }

    return S_Nv_ReturnValue_Ok;
}
    90f0:	0018      	movs	r0, r3
    90f2:	b007      	add	sp, #28
    90f4:	bc0c      	pop	{r2, r3}
    90f6:	4690      	mov	r8, r2
    90f8:	4699      	mov	r9, r3
    90fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((id != 0u) && (pData != NULL));
    90fc:	4b30      	ldr	r3, [pc, #192]	; (91c0 <S_Nv_Write_Impl+0xf4>)
    90fe:	4a31      	ldr	r2, [pc, #196]	; (91c4 <S_Nv_Write_Impl+0xf8>)
    9100:	4931      	ldr	r1, [pc, #196]	; (91c8 <S_Nv_Write_Impl+0xfc>)
    9102:	4832      	ldr	r0, [pc, #200]	; (91cc <S_Nv_Write_Impl+0x100>)
    9104:	4c32      	ldr	r4, [pc, #200]	; (91d0 <S_Nv_Write_Impl+0x104>)
    9106:	47a0      	blx	r4
    CompactSectorIfNeeded(BLOCK_HEADER_SIZE + dataLength);
    9108:	0028      	movs	r0, r5
    910a:	3010      	adds	r0, #16
    910c:	b280      	uxth	r0, r0
    910e:	4b31      	ldr	r3, [pc, #196]	; (91d4 <S_Nv_Write_Impl+0x108>)
    9110:	4798      	blx	r3
    Item_t *cache = FindItemCache(id);
    9112:	0020      	movs	r0, r4
    9114:	4b30      	ldr	r3, [pc, #192]	; (91d8 <S_Nv_Write_Impl+0x10c>)
    9116:	4798      	blx	r3
    9118:	0006      	movs	r6, r0
        return S_Nv_ReturnValue_DoesNotExist;
    911a:	2303      	movs	r3, #3
    if ( cache == NULL )
    911c:	2800      	cmp	r0, #0
    911e:	d0e7      	beq.n	90f0 <S_Nv_Write_Impl+0x24>
    uint16_t blockPointer = cache->lastBlock;
    9120:	7883      	ldrb	r3, [r0, #2]
    9122:	78c4      	ldrb	r4, [r0, #3]
    9124:	0224      	lsls	r4, r4, #8
    9126:	431c      	orrs	r4, r3
    9128:	46a0      	mov	r8, r4
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    912a:	4b2c      	ldr	r3, [pc, #176]	; (91dc <S_Nv_Write_Impl+0x110>)
    912c:	7818      	ldrb	r0, [r3, #0]
    912e:	2310      	movs	r3, #16
    9130:	aa02      	add	r2, sp, #8
    9132:	0021      	movs	r1, r4
    9134:	4c2a      	ldr	r4, [pc, #168]	; (91e0 <S_Nv_Write_Impl+0x114>)
    9136:	47a0      	blx	r4
    if ( ((uint32_t) offset + (uint32_t) dataLength) > (uint32_t) blockHeader.itemLength )
    9138:	ab02      	add	r3, sp, #8
    913a:	8919      	ldrh	r1, [r3, #8]
    913c:	9b01      	ldr	r3, [sp, #4]
    913e:	195a      	adds	r2, r3, r5
        return S_Nv_ReturnValue_BeyondEnd;
    9140:	2304      	movs	r3, #4
    if ( ((uint32_t) offset + (uint32_t) dataLength) > (uint32_t) blockHeader.itemLength )
    9142:	428a      	cmp	r2, r1
    9144:	d8d4      	bhi.n	90f0 <S_Nv_Write_Impl+0x24>
    blockHeader.blockOffset = offset;
    9146:	ab02      	add	r3, sp, #8
    9148:	466a      	mov	r2, sp
    914a:	8892      	ldrh	r2, [r2, #4]
    914c:	809a      	strh	r2, [r3, #4]
    blockHeader.blockLength = dataLength;
    914e:	80dd      	strh	r5, [r3, #6]
    blockHeader.previousBlock = blockPointer;
    9150:	4642      	mov	r2, r8
    9152:	815a      	strh	r2, [r3, #10]
    if ( blockHeader.blockLength == blockHeader.itemLength )
    9154:	428d      	cmp	r5, r1
    9156:	d02c      	beq.n	91b2 <S_Nv_Write_Impl+0xe6>
        blockHeader.writeCount++;
    9158:	ab02      	add	r3, sp, #8
    915a:	899b      	ldrh	r3, [r3, #12]
    915c:	3301      	adds	r3, #1
    915e:	aa02      	add	r2, sp, #8
    9160:	8193      	strh	r3, [r2, #12]
    uint16_t newBlockPointer = s_sectorHead;
    9162:	4b20      	ldr	r3, [pc, #128]	; (91e4 <S_Nv_Write_Impl+0x118>)
    9164:	881c      	ldrh	r4, [r3, #0]
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pData) )
    9166:	0039      	movs	r1, r7
    9168:	a802      	add	r0, sp, #8
    916a:	4b1f      	ldr	r3, [pc, #124]	; (91e8 <S_Nv_Write_Impl+0x11c>)
    916c:	4798      	blx	r3
        return S_Nv_ReturnValue_Failure;
    916e:	2301      	movs	r3, #1
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pData) )
    9170:	2800      	cmp	r0, #0
    9172:	d0bd      	beq.n	90f0 <S_Nv_Write_Impl+0x24>
    cache->lastBlock = newBlockPointer;
    9174:	70b4      	strb	r4, [r6, #2]
    9176:	0a24      	lsrs	r4, r4, #8
    9178:	70f4      	strb	r4, [r6, #3]
    if ( blockHeader.writeCount > COMPACT_ITEM_THRESHOLD )
    917a:	ab02      	add	r3, sp, #8
    917c:	899a      	ldrh	r2, [r3, #12]
    return S_Nv_ReturnValue_Ok;
    917e:	2300      	movs	r3, #0
    if ( blockHeader.writeCount > COMPACT_ITEM_THRESHOLD )
    9180:	2a64      	cmp	r2, #100	; 0x64
    9182:	d9b5      	bls.n	90f0 <S_Nv_Write_Impl+0x24>
        s_compactItemId = blockHeader.id;
    9184:	ab02      	add	r3, sp, #8
    9186:	885a      	ldrh	r2, [r3, #2]
    9188:	4b18      	ldr	r3, [pc, #96]	; (91ec <S_Nv_Write_Impl+0x120>)
    918a:	801a      	strh	r2, [r3, #0]
        s_compactItemLength = 0u;           // no need to resize this item here
    918c:	2200      	movs	r2, #0
    918e:	4b18      	ldr	r3, [pc, #96]	; (91f0 <S_Nv_Write_Impl+0x124>)
    9190:	801a      	strh	r2, [r3, #0]
        if (!SYS_TimerStarted(&compactItemTimer))
    9192:	4818      	ldr	r0, [pc, #96]	; (91f4 <S_Nv_Write_Impl+0x128>)
    9194:	4b18      	ldr	r3, [pc, #96]	; (91f8 <S_Nv_Write_Impl+0x12c>)
    9196:	4798      	blx	r3
    return S_Nv_ReturnValue_Ok;
    9198:	2300      	movs	r3, #0
        if (!SYS_TimerStarted(&compactItemTimer))
    919a:	2800      	cmp	r0, #0
    919c:	d1a8      	bne.n	90f0 <S_Nv_Write_Impl+0x24>
        compactItemTimer.handler = compactItemTimerFired;
    919e:	4b15      	ldr	r3, [pc, #84]	; (91f4 <S_Nv_Write_Impl+0x128>)
    91a0:	4a16      	ldr	r2, [pc, #88]	; (91fc <S_Nv_Write_Impl+0x130>)
    91a2:	611a      	str	r2, [r3, #16]
        compactItemTimer.timeout = COMPACT_ITEM_DELAY_MS;
    91a4:	4a16      	ldr	r2, [pc, #88]	; (9200 <S_Nv_Write_Impl+0x134>)
    91a6:	605a      	str	r2, [r3, #4]
        compactItemTimer.interval = COMPACT_ITEM_DELAY_MS;
    91a8:	609a      	str	r2, [r3, #8]
        compactItemTimer.mode = SYS_TIMER_INTERVAL_MODE;
    91aa:	2200      	movs	r2, #0
    91ac:	731a      	strb	r2, [r3, #12]
    return S_Nv_ReturnValue_Ok;
    91ae:	2300      	movs	r3, #0
    91b0:	e79e      	b.n	90f0 <S_Nv_Write_Impl+0x24>
        blockHeader.writeCount = 0u;
    91b2:	2300      	movs	r3, #0
    91b4:	aa02      	add	r2, sp, #8
    91b6:	8193      	strh	r3, [r2, #12]
    91b8:	e7d3      	b.n	9162 <S_Nv_Write_Impl+0x96>
    91ba:	46c0      	nop			; (mov r8, r8)
    91bc:	000081e5 	.word	0x000081e5
    91c0:	00018a68 	.word	0x00018a68
    91c4:	00018b34 	.word	0x00018b34
    91c8:	00000596 	.word	0x00000596
    91cc:	000189d0 	.word	0x000189d0
    91d0:	00016b85 	.word	0x00016b85
    91d4:	00008959 	.word	0x00008959
    91d8:	000083dd 	.word	0x000083dd
    91dc:	2000027c 	.word	0x2000027c
    91e0:	00007f95 	.word	0x00007f95
    91e4:	2000027e 	.word	0x2000027e
    91e8:	00008c0d 	.word	0x00008c0d
    91ec:	2000024c 	.word	0x2000024c
    91f0:	2000024e 	.word	0x2000024e
    91f4:	2000010c 	.word	0x2000010c
    91f8:	0000c395 	.word	0x0000c395
    91fc:	00008c01 	.word	0x00008c01
    9200:	00000bb8 	.word	0x00000bb8

00009204 <S_Nv_Read_Impl>:
#if defined(S_XNV_LOGGING)
static S_Nv_ReturnValue_t S_Nv_Read_Original(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#else
S_Nv_ReturnValue_t S_Nv_Read_Impl(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#endif
{
    9204:	b5f0      	push	{r4, r5, r6, r7, lr}
    9206:	b083      	sub	sp, #12
    9208:	000c      	movs	r4, r1
    920a:	0015      	movs	r5, r2
    920c:	001e      	movs	r6, r3
    assert((id != 0u) && (pData != NULL));
    920e:	2800      	cmp	r0, #0
    9210:	d009      	beq.n	9226 <S_Nv_Read_Impl+0x22>
    9212:	2b00      	cmp	r3, #0
    9214:	d007      	beq.n	9226 <S_Nv_Read_Impl+0x22>

    // get the pointer to the last written block for the item
    uint16_t lastBlockPointer = FindItem(id);
    9216:	4b10      	ldr	r3, [pc, #64]	; (9258 <S_Nv_Read_Impl+0x54>)
    9218:	4798      	blx	r3
    if ( lastBlockPointer == 0x0000u )
    {
        // item does not exist
        return S_Nv_ReturnValue_DoesNotExist;
    921a:	2303      	movs	r3, #3
    if ( lastBlockPointer == 0x0000u )
    921c:	2800      	cmp	r0, #0
    921e:	d108      	bne.n	9232 <S_Nv_Read_Impl+0x2e>
    {
        return S_Nv_ReturnValue_BeyondEnd;
    }

    return S_Nv_ReturnValue_Ok;
}
    9220:	0018      	movs	r0, r3
    9222:	b003      	add	sp, #12
    9224:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((id != 0u) && (pData != NULL));
    9226:	4b0d      	ldr	r3, [pc, #52]	; (925c <S_Nv_Read_Impl+0x58>)
    9228:	4a0d      	ldr	r2, [pc, #52]	; (9260 <S_Nv_Read_Impl+0x5c>)
    922a:	490e      	ldr	r1, [pc, #56]	; (9264 <S_Nv_Read_Impl+0x60>)
    922c:	480e      	ldr	r0, [pc, #56]	; (9268 <S_Nv_Read_Impl+0x64>)
    922e:	4c0f      	ldr	r4, [pc, #60]	; (926c <S_Nv_Read_Impl+0x68>)
    9230:	47a0      	blx	r4
    if ( ((uint32_t) offset + (uint32_t) dataLength) >= 0x10000uL )
    9232:	1962      	adds	r2, r4, r5
    9234:	490e      	ldr	r1, [pc, #56]	; (9270 <S_Nv_Read_Impl+0x6c>)
        return S_Nv_ReturnValue_BeyondEnd;
    9236:	3301      	adds	r3, #1
    if ( ((uint32_t) offset + (uint32_t) dataLength) >= 0x10000uL )
    9238:	428a      	cmp	r2, r1
    923a:	d8f1      	bhi.n	9220 <S_Nv_Read_Impl+0x1c>
    if ( !GatherData(s_sector, lastBlockPointer, offset, dataLength, pData ))
    923c:	4b0d      	ldr	r3, [pc, #52]	; (9274 <S_Nv_Read_Impl+0x70>)
    923e:	781f      	ldrb	r7, [r3, #0]
    9240:	9600      	str	r6, [sp, #0]
    9242:	002b      	movs	r3, r5
    9244:	0022      	movs	r2, r4
    9246:	0001      	movs	r1, r0
    9248:	0038      	movs	r0, r7
    924a:	4c0b      	ldr	r4, [pc, #44]	; (9278 <S_Nv_Read_Impl+0x74>)
    924c:	47a0      	blx	r4
    return S_Nv_ReturnValue_Ok;
    924e:	4243      	negs	r3, r0
    9250:	4143      	adcs	r3, r0
    9252:	009b      	lsls	r3, r3, #2
    9254:	e7e4      	b.n	9220 <S_Nv_Read_Impl+0x1c>
    9256:	46c0      	nop			; (mov r8, r8)
    9258:	00008451 	.word	0x00008451
    925c:	00018a68 	.word	0x00018a68
    9260:	00018b44 	.word	0x00018b44
    9264:	000005ee 	.word	0x000005ee
    9268:	000189d0 	.word	0x000189d0
    926c:	00016b85 	.word	0x00016b85
    9270:	0000ffff 	.word	0x0000ffff
    9274:	2000027c 	.word	0x2000027c
    9278:	0000827d 	.word	0x0000827d

0000927c <S_Nv_ItemLength_Impl>:

/** Interface function, see \ref S_Nv_ItemLength. */
uint16_t S_Nv_ItemLength_Impl(S_Nv_ItemId_t id)
{
    927c:	b510      	push	{r4, lr}
    927e:	b084      	sub	sp, #16
    assert(id != 0u);
    9280:	2800      	cmp	r0, #0
    9282:	d005      	beq.n	9290 <S_Nv_ItemLength_Impl+0x14>

    uint16_t blockPointer = FindItem(id);
    9284:	4b0a      	ldr	r3, [pc, #40]	; (92b0 <S_Nv_ItemLength_Impl+0x34>)
    9286:	4798      	blx	r3
    9288:	1e01      	subs	r1, r0, #0
    if ( blockPointer == 0x0000u )
    928a:	d107      	bne.n	929c <S_Nv_ItemLength_Impl+0x20>

    // read last written item block header
    BlockHeader_t blockHeader;
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    return blockHeader.itemLength;
}
    928c:	b004      	add	sp, #16
    928e:	bd10      	pop	{r4, pc}
    assert(id != 0u);
    9290:	4b08      	ldr	r3, [pc, #32]	; (92b4 <S_Nv_ItemLength_Impl+0x38>)
    9292:	4a09      	ldr	r2, [pc, #36]	; (92b8 <S_Nv_ItemLength_Impl+0x3c>)
    9294:	4909      	ldr	r1, [pc, #36]	; (92bc <S_Nv_ItemLength_Impl+0x40>)
    9296:	480a      	ldr	r0, [pc, #40]	; (92c0 <S_Nv_ItemLength_Impl+0x44>)
    9298:	4c0a      	ldr	r4, [pc, #40]	; (92c4 <S_Nv_ItemLength_Impl+0x48>)
    929a:	47a0      	blx	r4
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    929c:	4b0a      	ldr	r3, [pc, #40]	; (92c8 <S_Nv_ItemLength_Impl+0x4c>)
    929e:	7818      	ldrb	r0, [r3, #0]
    92a0:	2310      	movs	r3, #16
    92a2:	466a      	mov	r2, sp
    92a4:	4c09      	ldr	r4, [pc, #36]	; (92cc <S_Nv_ItemLength_Impl+0x50>)
    92a6:	47a0      	blx	r4
    return blockHeader.itemLength;
    92a8:	466b      	mov	r3, sp
    92aa:	8918      	ldrh	r0, [r3, #8]
    92ac:	e7ee      	b.n	928c <S_Nv_ItemLength_Impl+0x10>
    92ae:	46c0      	nop			; (mov r8, r8)
    92b0:	00008451 	.word	0x00008451
    92b4:	00018a5c 	.word	0x00018a5c
    92b8:	00018b54 	.word	0x00018b54
    92bc:	0000060b 	.word	0x0000060b
    92c0:	000189d0 	.word	0x000189d0
    92c4:	00016b85 	.word	0x00016b85
    92c8:	2000027c 	.word	0x2000027c
    92cc:	00007f95 	.word	0x00007f95

000092d0 <S_Nv_ItemInit_Impl>:
{
    92d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    92d2:	b085      	sub	sp, #20
    92d4:	0004      	movs	r4, r0
    92d6:	000e      	movs	r6, r1
    92d8:	0015      	movs	r5, r2
    assert((id != 0u) && (id < 0xF000u) && (itemLength <= MAX_ITEM_LENGTH));
    92da:	1e43      	subs	r3, r0, #1
    92dc:	b29b      	uxth	r3, r3
    92de:	4a2e      	ldr	r2, [pc, #184]	; (9398 <S_Nv_ItemInit_Impl+0xc8>)
    92e0:	4293      	cmp	r3, r2
    92e2:	d81e      	bhi.n	9322 <S_Nv_ItemInit_Impl+0x52>
    92e4:	2380      	movs	r3, #128	; 0x80
    92e6:	011b      	lsls	r3, r3, #4
    92e8:	4299      	cmp	r1, r3
    92ea:	d81a      	bhi.n	9322 <S_Nv_ItemInit_Impl+0x52>
    if ( FindItem(id) != 0x0000u )
    92ec:	4b2b      	ldr	r3, [pc, #172]	; (939c <S_Nv_ItemInit_Impl+0xcc>)
    92ee:	4798      	blx	r3
    92f0:	2800      	cmp	r0, #0
    92f2:	d01d      	beq.n	9330 <S_Nv_ItemInit_Impl+0x60>
        uint16_t oldItemLength = S_Nv_ItemLength(id);
    92f4:	0020      	movs	r0, r4
    92f6:	4b2a      	ldr	r3, [pc, #168]	; (93a0 <S_Nv_ItemInit_Impl+0xd0>)
    92f8:	4798      	blx	r3
        if ( oldItemLength != itemLength )
    92fa:	4286      	cmp	r6, r0
    92fc:	d007      	beq.n	930e <S_Nv_ItemInit_Impl+0x3e>
            s_compactItemId = id;
    92fe:	4b29      	ldr	r3, [pc, #164]	; (93a4 <S_Nv_ItemInit_Impl+0xd4>)
    9300:	801c      	strh	r4, [r3, #0]
            s_compactItemLength = itemLength;
    9302:	4b29      	ldr	r3, [pc, #164]	; (93a8 <S_Nv_ItemInit_Impl+0xd8>)
    9304:	801e      	strh	r6, [r3, #0]
            S_Nv_ReturnValue_t resizeResult = CompactItem();
    9306:	4b29      	ldr	r3, [pc, #164]	; (93ac <S_Nv_ItemInit_Impl+0xdc>)
    9308:	4798      	blx	r3
    930a:	1e03      	subs	r3, r0, #0
            if ( resizeResult != S_Nv_ReturnValue_Ok )
    930c:	d115      	bne.n	933a <S_Nv_ItemInit_Impl+0x6a>
        if (pDefaultData != NULL)
    930e:	2d00      	cmp	r5, #0
    9310:	d040      	beq.n	9394 <S_Nv_ItemInit_Impl+0xc4>
            return S_Nv_Read(id, 0u, itemLength, pDefaultData);
    9312:	002b      	movs	r3, r5
    9314:	0032      	movs	r2, r6
    9316:	2100      	movs	r1, #0
    9318:	0020      	movs	r0, r4
    931a:	4c25      	ldr	r4, [pc, #148]	; (93b0 <S_Nv_ItemInit_Impl+0xe0>)
    931c:	47a0      	blx	r4
    931e:	0003      	movs	r3, r0
    9320:	e00b      	b.n	933a <S_Nv_ItemInit_Impl+0x6a>
    assert((id != 0u) && (id < 0xF000u) && (itemLength <= MAX_ITEM_LENGTH));
    9322:	4b24      	ldr	r3, [pc, #144]	; (93b4 <S_Nv_ItemInit_Impl+0xe4>)
    9324:	4a24      	ldr	r2, [pc, #144]	; (93b8 <S_Nv_ItemInit_Impl+0xe8>)
    9326:	21aa      	movs	r1, #170	; 0xaa
    9328:	00c9      	lsls	r1, r1, #3
    932a:	4824      	ldr	r0, [pc, #144]	; (93bc <S_Nv_ItemInit_Impl+0xec>)
    932c:	4c24      	ldr	r4, [pc, #144]	; (93c0 <S_Nv_ItemInit_Impl+0xf0>)
    932e:	47a0      	blx	r4
    if ( PowerSupplyTooLow() )
    9330:	4b24      	ldr	r3, [pc, #144]	; (93c4 <S_Nv_ItemInit_Impl+0xf4>)
    9332:	4798      	blx	r3
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    9334:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    9336:	2800      	cmp	r0, #0
    9338:	d002      	beq.n	9340 <S_Nv_ItemInit_Impl+0x70>
}
    933a:	0018      	movs	r0, r3
    933c:	b005      	add	sp, #20
    933e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CompactSectorIfNeeded(BLOCK_HEADER_SIZE + itemLength);
    9340:	0030      	movs	r0, r6
    9342:	3010      	adds	r0, #16
    9344:	b280      	uxth	r0, r0
    9346:	4b20      	ldr	r3, [pc, #128]	; (93c8 <S_Nv_ItemInit_Impl+0xf8>)
    9348:	4798      	blx	r3
    assert(s_itemCount < MAX_ITEM_COUNT);
    934a:	4b20      	ldr	r3, [pc, #128]	; (93cc <S_Nv_ItemInit_Impl+0xfc>)
    934c:	781b      	ldrb	r3, [r3, #0]
    934e:	2b07      	cmp	r3, #7
    9350:	d819      	bhi.n	9386 <S_Nv_ItemInit_Impl+0xb6>
    uint16_t newItemPointer = s_sectorHead;
    9352:	4b1f      	ldr	r3, [pc, #124]	; (93d0 <S_Nv_ItemInit_Impl+0x100>)
    9354:	881f      	ldrh	r7, [r3, #0]
    blockHeader.id = newItemId;
    9356:	466b      	mov	r3, sp
    9358:	805c      	strh	r4, [r3, #2]
    blockHeader.blockOffset = 0x0000u;
    935a:	2300      	movs	r3, #0
    935c:	466a      	mov	r2, sp
    935e:	8093      	strh	r3, [r2, #4]
    blockHeader.blockLength = itemLength;
    9360:	80d6      	strh	r6, [r2, #6]
    blockHeader.itemLength = itemLength;
    9362:	8116      	strh	r6, [r2, #8]
    blockHeader.previousBlock = 0x0000u;
    9364:	8153      	strh	r3, [r2, #10]
    blockHeader.writeCount = 0u;
    9366:	8193      	strh	r3, [r2, #12]
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pDefaultData) )
    9368:	0029      	movs	r1, r5
    936a:	4668      	mov	r0, sp
    936c:	4b19      	ldr	r3, [pc, #100]	; (93d4 <S_Nv_ItemInit_Impl+0x104>)
    936e:	4798      	blx	r3
        return S_Nv_ReturnValue_Failure;
    9370:	2301      	movs	r3, #1
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pDefaultData) )
    9372:	2800      	cmp	r0, #0
    9374:	d0e1      	beq.n	933a <S_Nv_ItemInit_Impl+0x6a>
    Item_t *newItemCache = CreateItemCache(newItemId);
    9376:	0020      	movs	r0, r4
    9378:	4b17      	ldr	r3, [pc, #92]	; (93d8 <S_Nv_ItemInit_Impl+0x108>)
    937a:	4798      	blx	r3
    newItemCache->lastBlock = newItemPointer;
    937c:	7087      	strb	r7, [r0, #2]
    937e:	0a3f      	lsrs	r7, r7, #8
    9380:	70c7      	strb	r7, [r0, #3]
    return S_Nv_ReturnValue_DidNotExist;
    9382:	2302      	movs	r3, #2
    9384:	e7d9      	b.n	933a <S_Nv_ItemInit_Impl+0x6a>
    assert(s_itemCount < MAX_ITEM_COUNT);
    9386:	4b15      	ldr	r3, [pc, #84]	; (93dc <S_Nv_ItemInit_Impl+0x10c>)
    9388:	4a0b      	ldr	r2, [pc, #44]	; (93b8 <S_Nv_ItemInit_Impl+0xe8>)
    938a:	21af      	movs	r1, #175	; 0xaf
    938c:	00c9      	lsls	r1, r1, #3
    938e:	480b      	ldr	r0, [pc, #44]	; (93bc <S_Nv_ItemInit_Impl+0xec>)
    9390:	4c0b      	ldr	r4, [pc, #44]	; (93c0 <S_Nv_ItemInit_Impl+0xf0>)
    9392:	47a0      	blx	r4
            return S_Nv_ReturnValue_Ok;
    9394:	2300      	movs	r3, #0
    9396:	e7d0      	b.n	933a <S_Nv_ItemInit_Impl+0x6a>
    9398:	0000effe 	.word	0x0000effe
    939c:	00008451 	.word	0x00008451
    93a0:	0000927d 	.word	0x0000927d
    93a4:	2000024c 	.word	0x2000024c
    93a8:	2000024e 	.word	0x2000024e
    93ac:	000089d5 	.word	0x000089d5
    93b0:	00009205 	.word	0x00009205
    93b4:	00018a1c 	.word	0x00018a1c
    93b8:	00018b20 	.word	0x00018b20
    93bc:	000189d0 	.word	0x000189d0
    93c0:	00016b85 	.word	0x00016b85
    93c4:	000081e5 	.word	0x000081e5
    93c8:	00008959 	.word	0x00008959
    93cc:	20000274 	.word	0x20000274
    93d0:	2000027e 	.word	0x2000027e
    93d4:	00008c0d 	.word	0x00008c0d
    93d8:	0000846d 	.word	0x0000846d
    93dc:	00018978 	.word	0x00018978

000093e0 <S_Nv_IsItemAvailable_Impl>:
/** Interface function, see \ref S_Nv_IsItemAvailable.
 *
 * Important: This will check whether the item is found in the storage area
 */
bool S_Nv_IsItemAvailable_Impl(S_Nv_ItemId_t id)
{
    93e0:	b510      	push	{r4, lr}
  return ( FindItem(id) != 0x0000u );
    93e2:	4b03      	ldr	r3, [pc, #12]	; (93f0 <S_Nv_IsItemAvailable_Impl+0x10>)
    93e4:	4798      	blx	r3
    93e6:	1e43      	subs	r3, r0, #1
    93e8:	4198      	sbcs	r0, r3
    93ea:	b2c0      	uxtb	r0, r0
}
    93ec:	bd10      	pop	{r4, pc}
    93ee:	46c0      	nop			; (mov r8, r8)
    93f0:	00008451 	.word	0x00008451

000093f4 <pdsInitItemMask>:
\param[in] itemMask - itemMask to be initialized

\return true itemMask is initialized, false otherwise
******************************************************************************/
static bool pdsInitItemMask(S_Nv_ItemId_t memoryId, uint8_t *itemMask)
{
    93f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    93f6:	46d6      	mov	lr, sl
    93f8:	4647      	mov	r7, r8
    93fa:	b580      	push	{r7, lr}
    93fc:	b087      	sub	sp, #28
    93fe:	000f      	movs	r7, r1
  if (PDS_ALL_EXISTENT_MEMORY == memoryId)
    9400:	4b20      	ldr	r3, [pc, #128]	; (9484 <pdsInitItemMask+0x90>)
    9402:	4298      	cmp	r0, r3
    9404:	d012      	beq.n	942c <pdsInitItemMask+0x38>
  {
    memset(itemMask, 0xFFU, PDS_ITEM_MASK_SIZE);
    itemMask[0] &= 0xFEU;
  }
  else if (PDS_DIRECTORY_MASK & memoryId)
    9406:	0443      	lsls	r3, r0, #17
    9408:	d415      	bmi.n	9436 <pdsInitItemMask+0x42>
    else
      return false;
  }
  else
  {
    itemMask[memoryId / 8] |= 1 << (memoryId % 8);
    940a:	08c3      	lsrs	r3, r0, #3
    940c:	18cf      	adds	r7, r1, r3
    940e:	2307      	movs	r3, #7
    9410:	4018      	ands	r0, r3
    9412:	3b06      	subs	r3, #6
    9414:	4083      	lsls	r3, r0
    9416:	783a      	ldrb	r2, [r7, #0]
    9418:	4313      	orrs	r3, r2
    941a:	703b      	strb	r3, [r7, #0]
  }

  return true;
    941c:	2301      	movs	r3, #1
    941e:	9301      	str	r3, [sp, #4]
}
    9420:	9801      	ldr	r0, [sp, #4]
    9422:	b007      	add	sp, #28
    9424:	bc0c      	pop	{r2, r3}
    9426:	4690      	mov	r8, r2
    9428:	469a      	mov	sl, r3
    942a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    itemMask[0] &= 0xFEU;
    942c:	23fe      	movs	r3, #254	; 0xfe
    942e:	700b      	strb	r3, [r1, #0]
  return true;
    9430:	3bfd      	subs	r3, #253	; 0xfd
    9432:	9301      	str	r3, [sp, #4]
    9434:	e7f4      	b.n	9420 <pdsInitItemMask+0x2c>
    if (pdsGetDirDescr(memoryId, &dirDescr))
    9436:	a904      	add	r1, sp, #16
    9438:	4b13      	ldr	r3, [pc, #76]	; (9488 <pdsInitItemMask+0x94>)
    943a:	4798      	blx	r3
    943c:	9001      	str	r0, [sp, #4]
    943e:	2800      	cmp	r0, #0
    9440:	d0ee      	beq.n	9420 <pdsInitItemMask+0x2c>
      for (uint8_t index=0U; index < dirDescr.filesCount; index++)
    9442:	ab04      	add	r3, sp, #16
    9444:	889b      	ldrh	r3, [r3, #4]
    9446:	4698      	mov	r8, r3
    9448:	2b00      	cmp	r3, #0
    944a:	d0e9      	beq.n	9420 <pdsInitItemMask+0x2c>
    944c:	2400      	movs	r4, #0
        memcpy(&memId, (void const FLASH_PTR*)(dirDescr.list + index), sizeof(uint16_t));
    944e:	ab02      	add	r3, sp, #8
    9450:	1d9d      	adds	r5, r3, #6
    9452:	4b0e      	ldr	r3, [pc, #56]	; (948c <pdsInitItemMask+0x98>)
    9454:	469a      	mov	sl, r3
        itemMask[memId / 8U] |= 1U << (memId % 8U);
    9456:	2607      	movs	r6, #7
        memcpy(&memId, (void const FLASH_PTR*)(dirDescr.list + index), sizeof(uint16_t));
    9458:	0061      	lsls	r1, r4, #1
    945a:	9b04      	ldr	r3, [sp, #16]
    945c:	469c      	mov	ip, r3
    945e:	4461      	add	r1, ip
    9460:	2202      	movs	r2, #2
    9462:	0028      	movs	r0, r5
    9464:	47d0      	blx	sl
        itemMask[memId / 8U] |= 1U << (memId % 8U);
    9466:	8829      	ldrh	r1, [r5, #0]
    9468:	08ca      	lsrs	r2, r1, #3
    946a:	18ba      	adds	r2, r7, r2
    946c:	4031      	ands	r1, r6
    946e:	2301      	movs	r3, #1
    9470:	408b      	lsls	r3, r1
    9472:	7811      	ldrb	r1, [r2, #0]
    9474:	430b      	orrs	r3, r1
    9476:	7013      	strb	r3, [r2, #0]
      for (uint8_t index=0U; index < dirDescr.filesCount; index++)
    9478:	3401      	adds	r4, #1
    947a:	b2e4      	uxtb	r4, r4
    947c:	b2a3      	uxth	r3, r4
    947e:	4543      	cmp	r3, r8
    9480:	d3ea      	bcc.n	9458 <pdsInitItemMask+0x64>
    9482:	e7cd      	b.n	9420 <pdsInitItemMask+0x2c>
    9484:	00004002 	.word	0x00004002
    9488:	000097cd 	.word	0x000097cd
    948c:	00016c47 	.word	0x00016c47

00009490 <PDS_Restore>:
{
    9490:	b5f0      	push	{r4, r5, r6, r7, lr}
    9492:	46d6      	mov	lr, sl
    9494:	4647      	mov	r7, r8
    9496:	b580      	push	{r7, lr}
    9498:	b089      	sub	sp, #36	; 0x24
  uint8_t itemsToRestore[PDS_ITEM_MASK_SIZE] = {0U};
    949a:	a907      	add	r1, sp, #28
    949c:	2300      	movs	r3, #0
    949e:	700b      	strb	r3, [r1, #0]
  if (!pdsInitItemMask(memoryId, itemsToRestore))
    94a0:	4b27      	ldr	r3, [pc, #156]	; (9540 <PDS_Restore+0xb0>)
    94a2:	4798      	blx	r3
    94a4:	1e06      	subs	r6, r0, #0
    94a6:	d043      	beq.n	9530 <PDS_Restore+0xa0>
    94a8:	2400      	movs	r4, #0
  if (pdsGetItemDescr(id, &itemDescr))
    94aa:	4f26      	ldr	r7, [pc, #152]	; (9544 <PDS_Restore+0xb4>)
      oldSize = S_Nv_ItemLength(id);
    94ac:	4b26      	ldr	r3, [pc, #152]	; (9548 <PDS_Restore+0xb8>)
    94ae:	469a      	mov	sl, r3
      S_Nv_ReturnValue_t ret = S_Nv_ItemInit(id, itemDescr.itemSize, itemDescr.itemData);
    94b0:	4b26      	ldr	r3, [pc, #152]	; (954c <PDS_Restore+0xbc>)
    94b2:	4698      	mov	r8, r3
    94b4:	e010      	b.n	94d8 <PDS_Restore+0x48>
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    94b6:	4b26      	ldr	r3, [pc, #152]	; (9550 <PDS_Restore+0xc0>)
    94b8:	4a26      	ldr	r2, [pc, #152]	; (9554 <PDS_Restore+0xc4>)
    94ba:	2156      	movs	r1, #86	; 0x56
    94bc:	31ff      	adds	r1, #255	; 0xff
    94be:	4826      	ldr	r0, [pc, #152]	; (9558 <PDS_Restore+0xc8>)
    94c0:	4c26      	ldr	r4, [pc, #152]	; (955c <PDS_Restore+0xcc>)
    94c2:	47a0      	blx	r4
      assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    94c4:	4b26      	ldr	r3, [pc, #152]	; (9560 <PDS_Restore+0xd0>)
    94c6:	4a23      	ldr	r2, [pc, #140]	; (9554 <PDS_Restore+0xc4>)
    94c8:	21b3      	movs	r1, #179	; 0xb3
    94ca:	0049      	lsls	r1, r1, #1
    94cc:	4822      	ldr	r0, [pc, #136]	; (9558 <PDS_Restore+0xc8>)
    94ce:	4c23      	ldr	r4, [pc, #140]	; (955c <PDS_Restore+0xcc>)
    94d0:	47a0      	blx	r4
    94d2:	3401      	adds	r4, #1
    for (j = 0U; j < 8U; j++)
    94d4:	2c08      	cmp	r4, #8
    94d6:	d02b      	beq.n	9530 <PDS_Restore+0xa0>
      if (itemsToRestore[i] & (1U << j))
    94d8:	ab07      	add	r3, sp, #28
    94da:	781b      	ldrb	r3, [r3, #0]
    94dc:	40e3      	lsrs	r3, r4
    94de:	07db      	lsls	r3, r3, #31
    94e0:	d5f7      	bpl.n	94d2 <PDS_Restore+0x42>
        if (!pdsRestoreItem(((S_Nv_ItemId_t)i << 3U) + j))
    94e2:	b2a5      	uxth	r5, r4
  if (pdsGetItemDescr(id, &itemDescr))
    94e4:	a903      	add	r1, sp, #12
    94e6:	0028      	movs	r0, r5
    94e8:	47b8      	blx	r7
    94ea:	2800      	cmp	r0, #0
    94ec:	d01f      	beq.n	952e <PDS_Restore+0x9e>
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    94ee:	ab03      	add	r3, sp, #12
    94f0:	885b      	ldrh	r3, [r3, #2]
    94f2:	2b00      	cmp	r3, #0
    94f4:	d0df      	beq.n	94b6 <PDS_Restore+0x26>
    94f6:	9b04      	ldr	r3, [sp, #16]
    94f8:	2b00      	cmp	r3, #0
    94fa:	d0dc      	beq.n	94b6 <PDS_Restore+0x26>
    if (itemDescr.filler)
    94fc:	9b05      	ldr	r3, [sp, #20]
    94fe:	2b00      	cmp	r3, #0
    9500:	d000      	beq.n	9504 <PDS_Restore+0x74>
      itemDescr.filler();
    9502:	4798      	blx	r3
      oldSize = S_Nv_ItemLength(id);
    9504:	0028      	movs	r0, r5
    9506:	47d0      	blx	sl
    9508:	9001      	str	r0, [sp, #4]
      S_Nv_ReturnValue_t ret = S_Nv_ItemInit(id, itemDescr.itemSize, itemDescr.itemData);
    950a:	ab03      	add	r3, sp, #12
    950c:	9a04      	ldr	r2, [sp, #16]
    950e:	8859      	ldrh	r1, [r3, #2]
    9510:	0028      	movs	r0, r5
    9512:	47c0      	blx	r8
      assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    9514:	2802      	cmp	r0, #2
    9516:	d011      	beq.n	953c <PDS_Restore+0xac>
    9518:	2800      	cmp	r0, #0
    951a:	d1d3      	bne.n	94c4 <PDS_Restore+0x34>
        if (!pdsUpdateMemory(id, itemDescr.itemData, itemDescr.itemSize, oldSize))
    951c:	ab03      	add	r3, sp, #12
    951e:	885a      	ldrh	r2, [r3, #2]
    9520:	9904      	ldr	r1, [sp, #16]
    9522:	9b01      	ldr	r3, [sp, #4]
    9524:	0028      	movs	r0, r5
    9526:	4d0f      	ldr	r5, [pc, #60]	; (9564 <PDS_Restore+0xd4>)
    9528:	47a8      	blx	r5
    952a:	2800      	cmp	r0, #0
    952c:	d1d1      	bne.n	94d2 <PDS_Restore+0x42>
          return false;
    952e:	2600      	movs	r6, #0
}
    9530:	0030      	movs	r0, r6
    9532:	b009      	add	sp, #36	; 0x24
    9534:	bc0c      	pop	{r2, r3}
    9536:	4690      	mov	r8, r2
    9538:	469a      	mov	sl, r3
    953a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return false;
    953c:	2600      	movs	r6, #0
    953e:	e7f7      	b.n	9530 <PDS_Restore+0xa0>
    9540:	000093f5 	.word	0x000093f5
    9544:	00009731 	.word	0x00009731
    9548:	0000927d 	.word	0x0000927d
    954c:	000092d1 	.word	0x000092d1
    9550:	00018b6c 	.word	0x00018b6c
    9554:	00018c68 	.word	0x00018c68
    9558:	00018ba8 	.word	0x00018ba8
    955c:	00016b85 	.word	0x00016b85
    9560:	00018bf8 	.word	0x00018bf8
    9564:	0000978d 	.word	0x0000978d

00009568 <PDS_Store>:
{
    9568:	b510      	push	{r4, lr}
  if (!pdsInitItemMask(memoryId, itemsToStore))
    956a:	4905      	ldr	r1, [pc, #20]	; (9580 <PDS_Store+0x18>)
    956c:	4b05      	ldr	r3, [pc, #20]	; (9584 <PDS_Store+0x1c>)
    956e:	4798      	blx	r3
    9570:	1e04      	subs	r4, r0, #0
    9572:	d101      	bne.n	9578 <PDS_Store+0x10>
}
    9574:	0020      	movs	r0, r4
    9576:	bd10      	pop	{r4, pc}
  pdsPostTask(PDS_STORE_ITEM_TASK_ID);
    9578:	2000      	movs	r0, #0
    957a:	4b03      	ldr	r3, [pc, #12]	; (9588 <PDS_Store+0x20>)
    957c:	4798      	blx	r3
  return true;
    957e:	e7f9      	b.n	9574 <PDS_Store+0xc>
    9580:	20000284 	.word	0x20000284
    9584:	000093f5 	.word	0x000093f5
    9588:	000096dd 	.word	0x000096dd

0000958c <pdsStoreItemTaskHandler>:
{
    958c:	b5f0      	push	{r4, r5, r6, r7, lr}
    958e:	b085      	sub	sp, #20
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    9590:	4b3e      	ldr	r3, [pc, #248]	; (968c <pdsStoreItemTaskHandler+0x100>)
    9592:	781b      	ldrb	r3, [r3, #0]
    9594:	3301      	adds	r3, #1
      bit_index %= 8;
    9596:	2207      	movs	r2, #7
    9598:	4013      	ands	r3, r2
      if (itemsToStore[byte_index] & (1U << bit_index))
    959a:	4a3d      	ldr	r2, [pc, #244]	; (9690 <pdsStoreItemTaskHandler+0x104>)
    959c:	7817      	ldrb	r7, [r2, #0]
    959e:	0038      	movs	r0, r7
    95a0:	001e      	movs	r6, r3
    95a2:	003a      	movs	r2, r7
    95a4:	40da      	lsrs	r2, r3
    95a6:	07d2      	lsls	r2, r2, #31
    95a8:	d431      	bmi.n	960e <pdsStoreItemTaskHandler+0x82>
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    95aa:	3301      	adds	r3, #1
    95ac:	b2db      	uxtb	r3, r3
    95ae:	2207      	movs	r2, #7
      bit_index %= 8;
    95b0:	2507      	movs	r5, #7
      if (itemsToStore[byte_index] & (1U << bit_index))
    95b2:	2401      	movs	r4, #1
      bit_index %= 8;
    95b4:	402b      	ands	r3, r5
      if (itemsToStore[byte_index] & (1U << bit_index))
    95b6:	001e      	movs	r6, r3
    95b8:	0001      	movs	r1, r0
    95ba:	40d9      	lsrs	r1, r3
    95bc:	420c      	tst	r4, r1
    95be:	d126      	bne.n	960e <pdsStoreItemTaskHandler+0x82>
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    95c0:	3301      	adds	r3, #1
    95c2:	b2db      	uxtb	r3, r3
    95c4:	3a01      	subs	r2, #1
    95c6:	b2d2      	uxtb	r2, r2
    95c8:	2a00      	cmp	r2, #0
    95ca:	d1f3      	bne.n	95b4 <pdsStoreItemTaskHandler+0x28>
  for (i = 0U, byte_index = i_found + 1; i < PDS_ITEM_MASK_SIZE; i++, byte_index++)
    95cc:	2401      	movs	r4, #1
  if (!S_Nv_IsItemAvailable(((S_Nv_ItemId_t)byte_index << 3U) + bit_index))
    95ce:	00e4      	lsls	r4, r4, #3
    95d0:	18e4      	adds	r4, r4, r3
    95d2:	0020      	movs	r0, r4
    95d4:	4b2f      	ldr	r3, [pc, #188]	; (9694 <pdsStoreItemTaskHandler+0x108>)
    95d6:	4798      	blx	r3
    95d8:	2800      	cmp	r0, #0
    95da:	d124      	bne.n	9626 <pdsStoreItemTaskHandler+0x9a>
    if(pdsGetItemDescr(((S_Nv_ItemId_t)byte_index << 3U) + bit_index, &itemDescr))
    95dc:	4669      	mov	r1, sp
    95de:	0020      	movs	r0, r4
    95e0:	4b2d      	ldr	r3, [pc, #180]	; (9698 <pdsStoreItemTaskHandler+0x10c>)
    95e2:	4798      	blx	r3
    95e4:	2800      	cmp	r0, #0
    95e6:	d038      	beq.n	965a <pdsStoreItemTaskHandler+0xce>
      if (itemDescr.filler)
    95e8:	9b02      	ldr	r3, [sp, #8]
    95ea:	2b00      	cmp	r3, #0
    95ec:	d000      	beq.n	95f0 <pdsStoreItemTaskHandler+0x64>
        itemDescr.filler();
    95ee:	4798      	blx	r3
      ret = S_Nv_ItemInit(((S_Nv_ItemId_t)byte_index << 3U) + bit_index, itemDescr.itemSize, itemDescr.itemData);
    95f0:	9a01      	ldr	r2, [sp, #4]
    95f2:	466b      	mov	r3, sp
    95f4:	8859      	ldrh	r1, [r3, #2]
    95f6:	0020      	movs	r0, r4
    95f8:	4b28      	ldr	r3, [pc, #160]	; (969c <pdsStoreItemTaskHandler+0x110>)
    95fa:	4798      	blx	r3
      assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    95fc:	23fd      	movs	r3, #253	; 0xfd
    95fe:	4218      	tst	r0, r3
    9600:	d02b      	beq.n	965a <pdsStoreItemTaskHandler+0xce>
    9602:	4b27      	ldr	r3, [pc, #156]	; (96a0 <pdsStoreItemTaskHandler+0x114>)
    9604:	4a27      	ldr	r2, [pc, #156]	; (96a4 <pdsStoreItemTaskHandler+0x118>)
    9606:	21ea      	movs	r1, #234	; 0xea
    9608:	4827      	ldr	r0, [pc, #156]	; (96a8 <pdsStoreItemTaskHandler+0x11c>)
    960a:	4c28      	ldr	r4, [pc, #160]	; (96ac <pdsStoreItemTaskHandler+0x120>)
    960c:	47a0      	blx	r4
        itemsToStore[byte_index] &= ~(1U << bit_index);
    960e:	2201      	movs	r2, #1
    9610:	40b2      	lsls	r2, r6
    9612:	4397      	bics	r7, r2
    9614:	4a1e      	ldr	r2, [pc, #120]	; (9690 <pdsStoreItemTaskHandler+0x104>)
    9616:	7017      	strb	r7, [r2, #0]
        i_found = byte_index;
    9618:	2100      	movs	r1, #0
    961a:	4a25      	ldr	r2, [pc, #148]	; (96b0 <pdsStoreItemTaskHandler+0x124>)
    961c:	7011      	strb	r1, [r2, #0]
        j_found = bit_index;
    961e:	4a1b      	ldr	r2, [pc, #108]	; (968c <pdsStoreItemTaskHandler+0x100>)
    9620:	7013      	strb	r3, [r2, #0]
    byte_index %= PDS_ITEM_MASK_SIZE;
    9622:	2400      	movs	r4, #0
    9624:	e7d3      	b.n	95ce <pdsStoreItemTaskHandler+0x42>
  if (pdsGetItemDescr(id, &itemDescr))
    9626:	4669      	mov	r1, sp
    9628:	0020      	movs	r0, r4
    962a:	4b1b      	ldr	r3, [pc, #108]	; (9698 <pdsStoreItemTaskHandler+0x10c>)
    962c:	4798      	blx	r3
    962e:	2800      	cmp	r0, #0
    9630:	d013      	beq.n	965a <pdsStoreItemTaskHandler+0xce>
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    9632:	466b      	mov	r3, sp
    9634:	885b      	ldrh	r3, [r3, #2]
    9636:	2b00      	cmp	r3, #0
    9638:	d015      	beq.n	9666 <pdsStoreItemTaskHandler+0xda>
    963a:	9b01      	ldr	r3, [sp, #4]
    963c:	2b00      	cmp	r3, #0
    963e:	d012      	beq.n	9666 <pdsStoreItemTaskHandler+0xda>
    if (itemDescr.filler)
    9640:	9b02      	ldr	r3, [sp, #8]
    9642:	2b00      	cmp	r3, #0
    9644:	d000      	beq.n	9648 <pdsStoreItemTaskHandler+0xbc>
      itemDescr.filler();
    9646:	4798      	blx	r3
      ret = S_Nv_Write(id, 0U, itemDescr.itemSize, itemDescr.itemData);
    9648:	9b01      	ldr	r3, [sp, #4]
    964a:	466a      	mov	r2, sp
    964c:	8852      	ldrh	r2, [r2, #2]
    964e:	2100      	movs	r1, #0
    9650:	0020      	movs	r0, r4
    9652:	4c18      	ldr	r4, [pc, #96]	; (96b4 <pdsStoreItemTaskHandler+0x128>)
    9654:	47a0      	blx	r4
      assert(ret == S_Nv_ReturnValue_Ok);
    9656:	2800      	cmp	r0, #0
    9658:	d10c      	bne.n	9674 <pdsStoreItemTaskHandler+0xe8>
    if (itemsToStore[i])
    965a:	4b0d      	ldr	r3, [pc, #52]	; (9690 <pdsStoreItemTaskHandler+0x104>)
    965c:	781b      	ldrb	r3, [r3, #0]
    965e:	2b00      	cmp	r3, #0
    9660:	d10f      	bne.n	9682 <pdsStoreItemTaskHandler+0xf6>
}
    9662:	b005      	add	sp, #20
    9664:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    9666:	4b14      	ldr	r3, [pc, #80]	; (96b8 <pdsStoreItemTaskHandler+0x12c>)
    9668:	4a14      	ldr	r2, [pc, #80]	; (96bc <pdsStoreItemTaskHandler+0x130>)
    966a:	2134      	movs	r1, #52	; 0x34
    966c:	31ff      	adds	r1, #255	; 0xff
    966e:	480e      	ldr	r0, [pc, #56]	; (96a8 <pdsStoreItemTaskHandler+0x11c>)
    9670:	4c0e      	ldr	r4, [pc, #56]	; (96ac <pdsStoreItemTaskHandler+0x120>)
    9672:	47a0      	blx	r4
      assert(ret == S_Nv_ReturnValue_Ok);
    9674:	4b12      	ldr	r3, [pc, #72]	; (96c0 <pdsStoreItemTaskHandler+0x134>)
    9676:	4a11      	ldr	r2, [pc, #68]	; (96bc <pdsStoreItemTaskHandler+0x130>)
    9678:	2142      	movs	r1, #66	; 0x42
    967a:	31ff      	adds	r1, #255	; 0xff
    967c:	480a      	ldr	r0, [pc, #40]	; (96a8 <pdsStoreItemTaskHandler+0x11c>)
    967e:	4c0b      	ldr	r4, [pc, #44]	; (96ac <pdsStoreItemTaskHandler+0x120>)
    9680:	47a0      	blx	r4
      pdsPostTask(PDS_STORE_ITEM_TASK_ID);
    9682:	2000      	movs	r0, #0
    9684:	4b0f      	ldr	r3, [pc, #60]	; (96c4 <pdsStoreItemTaskHandler+0x138>)
    9686:	4798      	blx	r3
}
    9688:	e7eb      	b.n	9662 <pdsStoreItemTaskHandler+0xd6>
    968a:	46c0      	nop			; (mov r8, r8)
    968c:	20000285 	.word	0x20000285
    9690:	20000284 	.word	0x20000284
    9694:	000093e1 	.word	0x000093e1
    9698:	00009731 	.word	0x00009731
    969c:	000092d1 	.word	0x000092d1
    96a0:	00018bf8 	.word	0x00018bf8
    96a4:	00018c40 	.word	0x00018c40
    96a8:	00018ba8 	.word	0x00018ba8
    96ac:	00016b85 	.word	0x00016b85
    96b0:	20000280 	.word	0x20000280
    96b4:	000090cd 	.word	0x000090cd
    96b8:	00018b6c 	.word	0x00018b6c
    96bc:	00018c58 	.word	0x00018c58
    96c0:	00018c78 	.word	0x00018c78
    96c4:	000096dd 	.word	0x000096dd

000096c8 <PDS_Init>:
\brief Persistent Data Server initialization routine.
******************************************************************************/


void PDS_Init (void)
{
    96c8:	b510      	push	{r4, lr}
  D_Nv_Init();
    96ca:	4b02      	ldr	r3, [pc, #8]	; (96d4 <PDS_Init+0xc>)
    96cc:	4798      	blx	r3
  S_Nv_Init();
    96ce:	4b02      	ldr	r3, [pc, #8]	; (96d8 <PDS_Init+0x10>)
    96d0:	4798      	blx	r3
}
    96d2:	bd10      	pop	{r4, pc}
    96d4:	00007f45 	.word	0x00007f45
    96d8:	00009095 	.word	0x00009095

000096dc <pdsPostTask>:
\param[in] taskId - id of a task
******************************************************************************/

void pdsPostTask(PdsTaskId_t taskId)
{
  pendingTasks |= (1U << taskId);
    96dc:	4a03      	ldr	r2, [pc, #12]	; (96ec <pdsPostTask+0x10>)
    96de:	2301      	movs	r3, #1
    96e0:	4083      	lsls	r3, r0
    96e2:	7811      	ldrb	r1, [r2, #0]
    96e4:	430b      	orrs	r3, r1
    96e6:	7013      	strb	r3, [r2, #0]
//  SYS_PostTask(PDS_TASK_ID);
}
    96e8:	4770      	bx	lr
    96ea:	46c0      	nop			; (mov r8, r8)
    96ec:	20000286 	.word	0x20000286

000096f0 <PDS_TaskHandler>:

/******************************************************************************
\brief General PDS task handler
******************************************************************************/
void PDS_TaskHandler(void)
{
    96f0:	b570      	push	{r4, r5, r6, lr}
  if (pendingTasks)
    96f2:	4b0d      	ldr	r3, [pc, #52]	; (9728 <PDS_TaskHandler+0x38>)
    96f4:	781d      	ldrb	r5, [r3, #0]
    96f6:	2d00      	cmp	r5, #0
    96f8:	d012      	beq.n	9720 <PDS_TaskHandler+0x30>
  {
    uint8_t taskId = 0U;

    while (!(pendingTasks & (1U << taskId)))
    96fa:	0028      	movs	r0, r5
    96fc:	07eb      	lsls	r3, r5, #31
    96fe:	d410      	bmi.n	9722 <PDS_TaskHandler+0x32>
    9700:	2300      	movs	r3, #0
    9702:	2401      	movs	r4, #1
      taskId++;
    9704:	3301      	adds	r3, #1
    9706:	b2db      	uxtb	r3, r3
    while (!(pendingTasks & (1U << taskId)))
    9708:	0019      	movs	r1, r3
    970a:	0002      	movs	r2, r0
    970c:	40da      	lsrs	r2, r3
    970e:	4214      	tst	r4, r2
    9710:	d0f8      	beq.n	9704 <PDS_TaskHandler+0x14>

    pendingTasks ^= (1U << taskId);
    9712:	2301      	movs	r3, #1
    9714:	408b      	lsls	r3, r1
    9716:	405d      	eors	r5, r3
    9718:	4b03      	ldr	r3, [pc, #12]	; (9728 <PDS_TaskHandler+0x38>)
    971a:	701d      	strb	r5, [r3, #0]
    pdsTaskHandlers[taskId]();
    971c:	4b03      	ldr	r3, [pc, #12]	; (972c <PDS_TaskHandler+0x3c>)
    971e:	4798      	blx	r3
   
  }
}
    9720:	bd70      	pop	{r4, r5, r6, pc}
    while (!(pendingTasks & (1U << taskId)))
    9722:	2100      	movs	r1, #0
    9724:	e7f5      	b.n	9712 <PDS_TaskHandler+0x22>
    9726:	46c0      	nop			; (mov r8, r8)
    9728:	20000286 	.word	0x20000286
    972c:	0000958d 	.word	0x0000958d

00009730 <pdsGetItemDescr>:
\param[in] itemDescrToGet    - pointer to item descriptor to be loaded;

returns true if descriptor is found out for the given item ID, false - otherwise
******************************************************************************/
bool pdsGetItemDescr(S_Nv_ItemId_t itemId, ItemIdToMemoryMapping_t *itemDescrToGet )
{
    9730:	b5f0      	push	{r4, r5, r6, r7, lr}
    9732:	b087      	sub	sp, #28
    9734:	9101      	str	r1, [sp, #4]
  /* Calculate raw data size */
  for (uint8_t fileIdx = 0; fileIdx < PDS_ITEM_AMOUNT; fileIdx++)
  {
    ItemIdToMemoryMapping_t itemDescr;

    memcpy(&itemDescr, (void const *)itemDescrPtr, sizeof(ItemIdToMemoryMapping_t));
    9736:	aa02      	add	r2, sp, #8
    9738:	4b10      	ldr	r3, [pc, #64]	; (977c <pdsGetItemDescr+0x4c>)
    973a:	0011      	movs	r1, r2
    973c:	cb70      	ldmia	r3!, {r4, r5, r6}
    973e:	c170      	stmia	r1!, {r4, r5, r6}
    9740:	681b      	ldr	r3, [r3, #0]
    9742:	600b      	str	r3, [r1, #0]

    if(itemDescr.itemId == itemId)
    9744:	8813      	ldrh	r3, [r2, #0]
    9746:	4283      	cmp	r3, r0
    9748:	d011      	beq.n	976e <pdsGetItemDescr+0x3e>
    {
      memcpy(itemDescrToGet, &itemDescr, sizeof(ItemIdToMemoryMapping_t));
      return true;
    }
    itemDescrPtr++;
    974a:	4b0d      	ldr	r3, [pc, #52]	; (9780 <pdsGetItemDescr+0x50>)
    memcpy(&itemDescr, (void const *)itemDescrPtr, sizeof(ItemIdToMemoryMapping_t));
    974c:	aa02      	add	r2, sp, #8
    974e:	0011      	movs	r1, r2
    9750:	001c      	movs	r4, r3
    9752:	cce0      	ldmia	r4!, {r5, r6, r7}
    9754:	c1e0      	stmia	r1!, {r5, r6, r7}
    9756:	6824      	ldr	r4, [r4, #0]
    9758:	600c      	str	r4, [r1, #0]
    if(itemDescr.itemId == itemId)
    975a:	8811      	ldrh	r1, [r2, #0]
    975c:	4281      	cmp	r1, r0
    975e:	d006      	beq.n	976e <pdsGetItemDescr+0x3e>
    itemDescrPtr++;
    9760:	3310      	adds	r3, #16
  for (uint8_t fileIdx = 0; fileIdx < PDS_ITEM_AMOUNT; fileIdx++)
    9762:	4908      	ldr	r1, [pc, #32]	; (9784 <pdsGetItemDescr+0x54>)
    9764:	428b      	cmp	r3, r1
    9766:	d1f2      	bne.n	974e <pdsGetItemDescr+0x1e>

  }
  return false;
    9768:	2000      	movs	r0, #0
}
    976a:	b007      	add	sp, #28
    976c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      memcpy(itemDescrToGet, &itemDescr, sizeof(ItemIdToMemoryMapping_t));
    976e:	2210      	movs	r2, #16
    9770:	a902      	add	r1, sp, #8
    9772:	9801      	ldr	r0, [sp, #4]
    9774:	4b04      	ldr	r3, [pc, #16]	; (9788 <pdsGetItemDescr+0x58>)
    9776:	4798      	blx	r3
      return true;
    9778:	2001      	movs	r0, #1
    977a:	e7f6      	b.n	976a <pdsGetItemDescr+0x3a>
    977c:	00004400 	.word	0x00004400
    9780:	00004410 	.word	0x00004410
    9784:	00004480 	.word	0x00004480
    9788:	00016c47 	.word	0x00016c47

0000978c <pdsUpdateMemory>:
{
    978c:	b510      	push	{r4, lr}
    978e:	b084      	sub	sp, #16
  if (size == oldSize)
    9790:	429a      	cmp	r2, r3
    9792:	d008      	beq.n	97a6 <pdsUpdateMemory+0x1a>
  if (pdsGetItemDescr(id, &mapItem))
    9794:	4669      	mov	r1, sp
    9796:	4b08      	ldr	r3, [pc, #32]	; (97b8 <pdsUpdateMemory+0x2c>)
    9798:	4798      	blx	r3
    979a:	2800      	cmp	r0, #0
    979c:	d003      	beq.n	97a6 <pdsUpdateMemory+0x1a>
    assert (mapItem.flags & SIZE_MODIFICATION_ALLOWED);
    979e:	466b      	mov	r3, sp
    97a0:	7b1b      	ldrb	r3, [r3, #12]
    97a2:	07db      	lsls	r3, r3, #31
    97a4:	d502      	bpl.n	97ac <pdsUpdateMemory+0x20>
}
    97a6:	2001      	movs	r0, #1
    97a8:	b004      	add	sp, #16
    97aa:	bd10      	pop	{r4, pc}
    assert (mapItem.flags & SIZE_MODIFICATION_ALLOWED);
    97ac:	4b03      	ldr	r3, [pc, #12]	; (97bc <pdsUpdateMemory+0x30>)
    97ae:	4a04      	ldr	r2, [pc, #16]	; (97c0 <pdsUpdateMemory+0x34>)
    97b0:	2177      	movs	r1, #119	; 0x77
    97b2:	4804      	ldr	r0, [pc, #16]	; (97c4 <pdsUpdateMemory+0x38>)
    97b4:	4c04      	ldr	r4, [pc, #16]	; (97c8 <pdsUpdateMemory+0x3c>)
    97b6:	47a0      	blx	r4
    97b8:	00009731 	.word	0x00009731
    97bc:	00018ca4 	.word	0x00018ca4
    97c0:	00018c94 	.word	0x00018c94
    97c4:	00018cd0 	.word	0x00018cd0
    97c8:	00016b85 	.word	0x00016b85

000097cc <pdsGetDirDescr>:
\param[in] dirDescrToGet    - pointer to dir descriptor to be loaded;

returns true if descriptor is found out for the given dir ID, false - otherwise
******************************************************************************/
bool pdsGetDirDescr(S_Nv_ItemId_t itemId, PDS_DirDescr_t *dirDescrToGet )
{
    97cc:	b570      	push	{r4, r5, r6, lr}
    97ce:	b082      	sub	sp, #8
    97d0:	000c      	movs	r4, r1
  /* Calculate raw data size */
  for (uint8_t fileIdx = 0; fileIdx < PDS_DIRECTORIES_AMOUNT; fileIdx++)
  {
    PDS_DirDescr_t dirDescr;

    memcpy(&dirDescr, (void const *)dirDescrPtr, sizeof(PDS_DirDescr_t));
    97d2:	466b      	mov	r3, sp
    97d4:	4a08      	ldr	r2, [pc, #32]	; (97f8 <pdsGetDirDescr+0x2c>)
    97d6:	4669      	mov	r1, sp
    97d8:	ca60      	ldmia	r2!, {r5, r6}
    97da:	c160      	stmia	r1!, {r5, r6}
    if(dirDescr.memoryId == itemId)
    97dc:	88da      	ldrh	r2, [r3, #6]
      memcpy(dirDescrToGet, &dirDescr, sizeof(PDS_DirDescr_t));
      return true;
    }
    dirDescrPtr++;
  }
  return false;
    97de:	2300      	movs	r3, #0
    if(dirDescr.memoryId == itemId)
    97e0:	4282      	cmp	r2, r0
    97e2:	d002      	beq.n	97ea <pdsGetDirDescr+0x1e>
}
    97e4:	0018      	movs	r0, r3
    97e6:	b002      	add	sp, #8
    97e8:	bd70      	pop	{r4, r5, r6, pc}
      memcpy(dirDescrToGet, &dirDescr, sizeof(PDS_DirDescr_t));
    97ea:	2208      	movs	r2, #8
    97ec:	4669      	mov	r1, sp
    97ee:	0020      	movs	r0, r4
    97f0:	4b02      	ldr	r3, [pc, #8]	; (97fc <pdsGetDirDescr+0x30>)
    97f2:	4798      	blx	r3
      return true;
    97f4:	2301      	movs	r3, #1
    97f6:	e7f5      	b.n	97e4 <pdsGetDirDescr+0x18>
    97f8:	00004470 	.word	0x00004470
    97fc:	00016c47 	.word	0x00016c47

00009800 <MiMAC_SetAltAddress>:
 *      None
 *
 *****************************************************************************************/

bool MiMAC_SetAltAddress( uint8_t *Address,  uint8_t *PanId)
{
    9800:	b510      	push	{r4, lr}
	myNetworkAddress.v[0] = Address[0];
    9802:	7802      	ldrb	r2, [r0, #0]
    9804:	4b08      	ldr	r3, [pc, #32]	; (9828 <MiMAC_SetAltAddress+0x28>)
    9806:	701a      	strb	r2, [r3, #0]
	myNetworkAddress.v[1] = Address[1];
    9808:	7842      	ldrb	r2, [r0, #1]
    980a:	705a      	strb	r2, [r3, #1]
	MAC_PANID.v[0] = PanId[0];
    980c:	780a      	ldrb	r2, [r1, #0]
    980e:	4c07      	ldr	r4, [pc, #28]	; (982c <MiMAC_SetAltAddress+0x2c>)
    9810:	7022      	strb	r2, [r4, #0]
	MAC_PANID.v[1] = PanId[1];
    9812:	784a      	ldrb	r2, [r1, #1]
    9814:	7062      	strb	r2, [r4, #1]
	PHY_SetShortAddr(myNetworkAddress.Val);
    9816:	8818      	ldrh	r0, [r3, #0]
    9818:	4b05      	ldr	r3, [pc, #20]	; (9830 <MiMAC_SetAltAddress+0x30>)
    981a:	4798      	blx	r3
	PHY_SetPanId(MAC_PANID.Val);
    981c:	8820      	ldrh	r0, [r4, #0]
    981e:	4b05      	ldr	r3, [pc, #20]	; (9834 <MiMAC_SetAltAddress+0x34>)
    9820:	4798      	blx	r3
	return true;
}
    9822:	2001      	movs	r0, #1
    9824:	bd10      	pop	{r4, pc}
    9826:	46c0      	nop			; (mov r8, r8)
    9828:	200020e4 	.word	0x200020e4
    982c:	20002158 	.word	0x20002158
    9830:	0000ab15 	.word	0x0000ab15
    9834:	0000ab01 	.word	0x0000ab01

00009838 <mic_generator>:

#if defined (ENABLE_SECURITY)
uint8_t addr[8] = {0xda , 0x98 , 0x22 , 0xfe , 0xff , 0xa3 , 0x04 , 0x00};
void mic_generator (uint8_t *Payloadinfo, uint8_t len , uint8_t frame_control ,  API_UINT32_UNION FrameCounter ,  uint8_t *SourceIEEEAddress)
{
    9838:	b5f0      	push	{r4, r5, r6, r7, lr}
    983a:	46c6      	mov	lr, r8
    983c:	b500      	push	{lr}
    983e:	b0c6      	sub	sp, #280	; 0x118
    9840:	0006      	movs	r6, r0
    9842:	000c      	movs	r4, r1
    9844:	469c      	mov	ip, r3
    9846:	994c      	ldr	r1, [sp, #304]	; 0x130
	uint16_t i ;										
	uint8_t j , iterations  , copy_packet1[255] , cbc_header_with_padding[16];
	// Calculating No of blocks in the packet (1 block = 16 bytes of data)
	iterations = len/16;
    9848:	0925      	lsrs	r5, r4, #4
	if (len % 16 != 0) iterations++;
    984a:	0723      	lsls	r3, r4, #28
    984c:	d000      	beq.n	9850 <mic_generator+0x18>
    984e:	3501      	adds	r5, #1
	InitVect_in[0] = 0x49;//frame_control;
    9850:	2049      	movs	r0, #73	; 0x49
    9852:	4b40      	ldr	r3, [pc, #256]	; (9954 <mic_generator+0x11c>)
    9854:	7018      	strb	r0, [r3, #0]
	cbc_header_with_padding[0] = 0x00;  // l(a)
    9856:	2300      	movs	r3, #0
    9858:	a802      	add	r0, sp, #8
    985a:	7003      	strb	r3, [r0, #0]
	cbc_header_with_padding[1] = 0x0d;  // l(a)Header Length
    985c:	330d      	adds	r3, #13
    985e:	7043      	strb	r3, [r0, #1]
	cbc_header_with_padding[2] = frame_control;  //frame_control;  //byte 1
    9860:	7082      	strb	r2, [r0, #2]
    9862:	2200      	movs	r2, #0
	for (i=0;i<8;i++)
	{
		InitVect_in[i+1] =  SourceIEEEAddress[i];
    9864:	4b3b      	ldr	r3, [pc, #236]	; (9954 <mic_generator+0x11c>)
    9866:	5c8f      	ldrb	r7, [r1, r2]
    9868:	18d0      	adds	r0, r2, r3
    986a:	7047      	strb	r7, [r0, #1]
		cbc_header_with_padding[i+7] = SourceIEEEAddress[i];
    986c:	0010      	movs	r0, r2
    986e:	af02      	add	r7, sp, #8
    9870:	46b8      	mov	r8, r7
    9872:	4440      	add	r0, r8
    9874:	5c8f      	ldrb	r7, [r1, r2]
    9876:	71c7      	strb	r7, [r0, #7]
    9878:	3201      	adds	r2, #1
	for (i=0;i<8;i++)
    987a:	2a08      	cmp	r2, #8
    987c:	d1f3      	bne.n	9866 <mic_generator+0x2e>
	}
	for (i=0;i<4;i++)
	{
		InitVect_in[i+9] = FrameCounter.v[i];
    987e:	4663      	mov	r3, ip
    9880:	466a      	mov	r2, sp
    9882:	71d3      	strb	r3, [r2, #7]
    9884:	79d3      	ldrb	r3, [r2, #7]
    9886:	4833      	ldr	r0, [pc, #204]	; (9954 <mic_generator+0x11c>)
    9888:	7243      	strb	r3, [r0, #9]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    988a:	4642      	mov	r2, r8
    988c:	70d3      	strb	r3, [r2, #3]
		InitVect_in[i+9] = FrameCounter.v[i];
    988e:	4663      	mov	r3, ip
    9890:	041b      	lsls	r3, r3, #16
    9892:	0e1b      	lsrs	r3, r3, #24
    9894:	7283      	strb	r3, [r0, #10]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    9896:	7113      	strb	r3, [r2, #4]
		InitVect_in[i+9] = FrameCounter.v[i];
    9898:	4663      	mov	r3, ip
    989a:	021b      	lsls	r3, r3, #8
    989c:	0e1b      	lsrs	r3, r3, #24
    989e:	72c3      	strb	r3, [r0, #11]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    98a0:	7153      	strb	r3, [r2, #5]
		InitVect_in[i+9] = FrameCounter.v[i];
    98a2:	4663      	mov	r3, ip
    98a4:	0e1b      	lsrs	r3, r3, #24
    98a6:	7303      	strb	r3, [r0, #12]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    98a8:	7193      	strb	r3, [r2, #6]
	}
	//cbc_header_with_padding[14] = 0x00;  // Padding
	cbc_header_with_padding[15] = 0x00;   // Padding
    98aa:	2300      	movs	r3, #0
    98ac:	73d3      	strb	r3, [r2, #15]
	InitVect_in[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
    98ae:	2204      	movs	r2, #4
    98b0:	7342      	strb	r2, [r0, #13]
	InitVect_in[14] = 0x00; // 15 th byte padded to zero
    98b2:	7383      	strb	r3, [r0, #14]
	InitVect_in[15] = len; // For MIC calculation All preceding blocks will be incremented by 1
    98b4:	73c4      	strb	r4, [r0, #15]
	PHY_EncryptReq(&InitVect_in[0], (uint8_t *)mySecurityKey);
    98b6:	4928      	ldr	r1, [pc, #160]	; (9958 <mic_generator+0x120>)
    98b8:	4b28      	ldr	r3, [pc, #160]	; (995c <mic_generator+0x124>)
    98ba:	4798      	blx	r3
    98bc:	2300      	movs	r3, #0
	for (i=0;i<16;i++)
	{
		copy_packet1[i] = cbc_header_with_padding[i];
    98be:	a906      	add	r1, sp, #24
    98c0:	aa02      	add	r2, sp, #8
    98c2:	5c9a      	ldrb	r2, [r3, r2]
    98c4:	545a      	strb	r2, [r3, r1]
    98c6:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    98c8:	2b10      	cmp	r3, #16
    98ca:	d1f9      	bne.n	98c0 <mic_generator+0x88>
	}
	// Copy the Payload and Do the padding
	for (i=16;i<len+16;i++)
    98cc:	0027      	movs	r7, r4
    98ce:	3710      	adds	r7, #16
    98d0:	2f10      	cmp	r7, #16
    98d2:	dd0a      	ble.n	98ea <mic_generator+0xb2>
    98d4:	2010      	movs	r0, #16
	{
		copy_packet1[i]	= Payloadinfo[i-16];  // Copying the Payload
    98d6:	a906      	add	r1, sp, #24
    98d8:	18f2      	adds	r2, r6, r3
    98da:	3a10      	subs	r2, #16
    98dc:	7812      	ldrb	r2, [r2, #0]
    98de:	540a      	strb	r2, [r1, r0]
	for (i=16;i<len+16;i++)
    98e0:	3301      	adds	r3, #1
    98e2:	b29b      	uxth	r3, r3
    98e4:	0018      	movs	r0, r3
    98e6:	42bb      	cmp	r3, r7
    98e8:	dbf6      	blt.n	98d8 <mic_generator+0xa0>
	}
	for (i=len+16;i<(iterations *16) + 16 ; i++ )
    98ea:	0023      	movs	r3, r4
    98ec:	3310      	adds	r3, #16
    98ee:	001a      	movs	r2, r3
    98f0:	3501      	adds	r5, #1
    98f2:	0129      	lsls	r1, r5, #4
    98f4:	428b      	cmp	r3, r1
    98f6:	da07      	bge.n	9908 <mic_generator+0xd0>
	{
		copy_packet1[i] = 0; // Padding
    98f8:	ac06      	add	r4, sp, #24
    98fa:	2000      	movs	r0, #0
    98fc:	54a0      	strb	r0, [r4, r2]
	for (i=len+16;i<(iterations *16) + 16 ; i++ )
    98fe:	3301      	adds	r3, #1
    9900:	b29b      	uxth	r3, r3
    9902:	001a      	movs	r2, r3
    9904:	428b      	cmp	r3, r1
    9906:	dbf9      	blt.n	98fc <mic_generator+0xc4>
	}
	for (i=0;i<iterations+1;i++)
    9908:	2200      	movs	r2, #0
    990a:	2700      	movs	r7, #0
    990c:	2d00      	cmp	r5, #0
    990e:	dd15      	ble.n	993c <mic_generator+0x104>
	{
		for (j=0;j<16;j++)
		{
			InitVect_in[j]	= InitVect_in[j] ^ copy_packet1[j+(i*16)];
    9910:	4e10      	ldr	r6, [pc, #64]	; (9954 <mic_generator+0x11c>)
    9912:	0112      	lsls	r2, r2, #4
    9914:	2300      	movs	r3, #0
    9916:	a906      	add	r1, sp, #24
    9918:	188c      	adds	r4, r1, r2
    991a:	1999      	adds	r1, r3, r6
    991c:	5ce2      	ldrb	r2, [r4, r3]
    991e:	7808      	ldrb	r0, [r1, #0]
    9920:	4042      	eors	r2, r0
    9922:	700a      	strb	r2, [r1, #0]
    9924:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    9926:	2b10      	cmp	r3, #16
    9928:	d1f7      	bne.n	991a <mic_generator+0xe2>
		}
		PHY_EncryptReq(&InitVect_in[0], (uint8_t *)mySecurityKey);
    992a:	490b      	ldr	r1, [pc, #44]	; (9958 <mic_generator+0x120>)
    992c:	4809      	ldr	r0, [pc, #36]	; (9954 <mic_generator+0x11c>)
    992e:	4b0b      	ldr	r3, [pc, #44]	; (995c <mic_generator+0x124>)
    9930:	4798      	blx	r3
	for (i=0;i<iterations+1;i++)
    9932:	3701      	adds	r7, #1
    9934:	b2bf      	uxth	r7, r7
    9936:	003a      	movs	r2, r7
    9938:	42af      	cmp	r7, r5
    993a:	dbea      	blt.n	9912 <mic_generator+0xda>
    993c:	2300      	movs	r3, #0
	}
	for (i=0;i<16;i++)
	{
		CBC_mic[i] = InitVect_in[i];
    993e:	4808      	ldr	r0, [pc, #32]	; (9960 <mic_generator+0x128>)
    9940:	4904      	ldr	r1, [pc, #16]	; (9954 <mic_generator+0x11c>)
    9942:	5cca      	ldrb	r2, [r1, r3]
    9944:	54c2      	strb	r2, [r0, r3]
    9946:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    9948:	2b10      	cmp	r3, #16
    994a:	d1fa      	bne.n	9942 <mic_generator+0x10a>
	}

}
    994c:	b046      	add	sp, #280	; 0x118
    994e:	bc04      	pop	{r2}
    9950:	4690      	mov	r8, r2
    9952:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9954:	200020f4 	.word	0x200020f4
    9958:	00018d24 	.word	0x00018d24
    995c:	0000ac8d 	.word	0x0000ac8d
    9960:	20002138 	.word	0x20002138

00009964 <DataEncrypt>:
 *
 *****************************************************************************************/

bool DataEncrypt(uint8_t *Payloadinfo, uint8_t *Payload_len, API_UINT32_UNION FrameCounter,
uint8_t FrameControl)
{
    9964:	b5f0      	push	{r4, r5, r6, r7, lr}
    9966:	46de      	mov	lr, fp
    9968:	4657      	mov	r7, sl
    996a:	464e      	mov	r6, r9
    996c:	4645      	mov	r5, r8
    996e:	b5e0      	push	{r5, r6, r7, lr}
    9970:	b08d      	sub	sp, #52	; 0x34
    9972:	4680      	mov	r8, r0
    9974:	000e      	movs	r6, r1
    9976:	0014      	movs	r4, r2
    9978:	001a      	movs	r2, r3
	uint16_t i ;
	uint8_t iterations , block[16] , j , CTR_Nonce_and_Counter[16];
	// Calculating No of blocks in the packet (1 block = 16 bytes of data)
	iterations = *Payload_len/16;
    997a:	7809      	ldrb	r1, [r1, #0]
    997c:	090d      	lsrs	r5, r1, #4
	if (*Payload_len % 16 != 0) iterations++;
    997e:	070b      	lsls	r3, r1, #28
    9980:	d000      	beq.n	9984 <DataEncrypt+0x20>
    9982:	3501      	adds	r5, #1

	mic_generator(&Payloadinfo[0] , *Payload_len, FrameControl  , FrameCounter ,  MACInitParams.PAddress);
    9984:	4b37      	ldr	r3, [pc, #220]	; (9a64 <DataEncrypt+0x100>)
    9986:	685b      	ldr	r3, [r3, #4]
    9988:	9300      	str	r3, [sp, #0]
    998a:	0023      	movs	r3, r4
    998c:	4640      	mov	r0, r8
    998e:	4f36      	ldr	r7, [pc, #216]	; (9a68 <DataEncrypt+0x104>)
    9990:	47b8      	blx	r7

	for (i=*Payload_len;i<iterations *16 ; i++ )
    9992:	7831      	ldrb	r1, [r6, #0]
    9994:	b28b      	uxth	r3, r1
    9996:	002e      	movs	r6, r5
    9998:	012d      	lsls	r5, r5, #4
    999a:	42a9      	cmp	r1, r5
    999c:	da07      	bge.n	99ae <DataEncrypt+0x4a>
	{
		Payloadinfo[i] = 0; // Padding
    999e:	2100      	movs	r1, #0
    99a0:	4642      	mov	r2, r8
    99a2:	54d1      	strb	r1, [r2, r3]
	for (i=*Payload_len;i<iterations *16 ; i++ )
    99a4:	3301      	adds	r3, #1
    99a6:	b29b      	uxth	r3, r3
    99a8:	42ab      	cmp	r3, r5
    99aa:	dbfa      	blt.n	99a2 <DataEncrypt+0x3e>
    99ac:	4690      	mov	r8, r2
	}
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    99ae:	2201      	movs	r2, #1
    99b0:	ab04      	add	r3, sp, #16
    99b2:	701a      	strb	r2, [r3, #0]
	for (i=0;i<8;i++)
	{
		CTR_Nonce_and_Counter[i+1] = MACInitParams.PAddress[i];
    99b4:	4b2b      	ldr	r3, [pc, #172]	; (9a64 <DataEncrypt+0x100>)
    99b6:	6858      	ldr	r0, [r3, #4]
    99b8:	2300      	movs	r3, #0
    99ba:	aa04      	add	r2, sp, #16
    99bc:	18d2      	adds	r2, r2, r3
    99be:	5cc1      	ldrb	r1, [r0, r3]
    99c0:	7051      	strb	r1, [r2, #1]
    99c2:	3301      	adds	r3, #1
	for (i=0;i<8;i++)
    99c4:	2b08      	cmp	r3, #8
    99c6:	d1f8      	bne.n	99ba <DataEncrypt+0x56>
	}
	for (i=0;i<4;i++)
	{
		CTR_Nonce_and_Counter[i+9] = FrameCounter.v[i];
    99c8:	ab04      	add	r3, sp, #16
    99ca:	725c      	strb	r4, [r3, #9]
    99cc:	0a22      	lsrs	r2, r4, #8
    99ce:	729a      	strb	r2, [r3, #10]
    99d0:	0c22      	lsrs	r2, r4, #16
    99d2:	72da      	strb	r2, [r3, #11]
    99d4:	0e24      	lsrs	r4, r4, #24
    99d6:	731c      	strb	r4, [r3, #12]
	}
	CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
    99d8:	2204      	movs	r2, #4
    99da:	735a      	strb	r2, [r3, #13]
	CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
    99dc:	2200      	movs	r2, #0
    99de:	739a      	strb	r2, [r3, #14]
	CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1
    99e0:	73da      	strb	r2, [r3, #15]

	for (i=0;i<iterations+1;i++)
    99e2:	1c73      	adds	r3, r6, #1
    99e4:	4699      	mov	r9, r3
    99e6:	2300      	movs	r3, #0
    99e8:	469b      	mov	fp, r3
    99ea:	9303      	str	r3, [sp, #12]
    99ec:	464b      	mov	r3, r9
    99ee:	2b00      	cmp	r3, #0
    99f0:	dd2f      	ble.n	9a52 <DataEncrypt+0xee>
	{
		for (j=0;j<16;j++)
		{
			block[j] = CTR_Nonce_and_Counter[j];
    99f2:	ac08      	add	r4, sp, #32
    99f4:	ad04      	add	r5, sp, #16
		}
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    99f6:	4b1d      	ldr	r3, [pc, #116]	; (9a6c <DataEncrypt+0x108>)
    99f8:	469a      	mov	sl, r3
		for (j=0;j<16;j++)
		{
			if (CTR_Nonce_and_Counter[15] == 0)
			{
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    99fa:	4e1d      	ldr	r6, [pc, #116]	; (9a70 <DataEncrypt+0x10c>)
    99fc:	e017      	b.n	9a2e <DataEncrypt+0xca>
			}
			else
			{
				Payloadinfo[j+(i-1)*16] = block[j] ^ Payloadinfo[j+(i-1)*16];
    99fe:	5d1a      	ldrb	r2, [r3, r4]
    9a00:	5ccf      	ldrb	r7, [r1, r3]
    9a02:	407a      	eors	r2, r7
    9a04:	54ca      	strb	r2, [r1, r3]
    9a06:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    9a08:	2b10      	cmp	r3, #16
    9a0a:	d007      	beq.n	9a1c <DataEncrypt+0xb8>
			if (CTR_Nonce_and_Counter[15] == 0)
    9a0c:	2800      	cmp	r0, #0
    9a0e:	d1f6      	bne.n	99fe <DataEncrypt+0x9a>
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    9a10:	5d1a      	ldrb	r2, [r3, r4]
    9a12:	4667      	mov	r7, ip
    9a14:	5cff      	ldrb	r7, [r7, r3]
    9a16:	407a      	eors	r2, r7
    9a18:	54f2      	strb	r2, [r6, r3]
    9a1a:	e7f4      	b.n	9a06 <DataEncrypt+0xa2>
			}
		}
		CTR_Nonce_and_Counter[15]++; // Increment Counter for next operation
    9a1c:	3001      	adds	r0, #1
    9a1e:	73e8      	strb	r0, [r5, #15]
	for (i=0;i<iterations+1;i++)
    9a20:	9f03      	ldr	r7, [sp, #12]
    9a22:	3701      	adds	r7, #1
    9a24:	b2bb      	uxth	r3, r7
    9a26:	9303      	str	r3, [sp, #12]
    9a28:	469b      	mov	fp, r3
    9a2a:	454b      	cmp	r3, r9
    9a2c:	da11      	bge.n	9a52 <DataEncrypt+0xee>
		CTR_Nonce_and_Counter[i+1] = MACInitParams.PAddress[i];
    9a2e:	2300      	movs	r3, #0
			block[j] = CTR_Nonce_and_Counter[j];
    9a30:	5d5a      	ldrb	r2, [r3, r5]
    9a32:	551a      	strb	r2, [r3, r4]
    9a34:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    9a36:	2b10      	cmp	r3, #16
    9a38:	d1fa      	bne.n	9a30 <DataEncrypt+0xcc>
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    9a3a:	490e      	ldr	r1, [pc, #56]	; (9a74 <DataEncrypt+0x110>)
    9a3c:	0020      	movs	r0, r4
    9a3e:	47d0      	blx	sl
			if (CTR_Nonce_and_Counter[15] == 0)
    9a40:	7be8      	ldrb	r0, [r5, #15]
				Payloadinfo[j+(i-1)*16] = block[j] ^ Payloadinfo[j+(i-1)*16];
    9a42:	4659      	mov	r1, fp
    9a44:	3901      	subs	r1, #1
    9a46:	0109      	lsls	r1, r1, #4
    9a48:	2300      	movs	r3, #0
    9a4a:	4441      	add	r1, r8
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    9a4c:	4a0a      	ldr	r2, [pc, #40]	; (9a78 <DataEncrypt+0x114>)
    9a4e:	4694      	mov	ip, r2
    9a50:	e7dc      	b.n	9a0c <DataEncrypt+0xa8>
	}
	return true;

}
    9a52:	2001      	movs	r0, #1
    9a54:	b00d      	add	sp, #52	; 0x34
    9a56:	bc3c      	pop	{r2, r3, r4, r5}
    9a58:	4690      	mov	r8, r2
    9a5a:	4699      	mov	r9, r3
    9a5c:	46a2      	mov	sl, r4
    9a5e:	46ab      	mov	fp, r5
    9a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9a62:	46c0      	nop			; (mov r8, r8)
    9a64:	200020ec 	.word	0x200020ec
    9a68:	00009839 	.word	0x00009839
    9a6c:	0000ac8d 	.word	0x0000ac8d
    9a70:	20002120 	.word	0x20002120
    9a74:	00018d24 	.word	0x00018d24
    9a78:	20002138 	.word	0x20002138

00009a7c <validate_mic>:
// Validates the Received mic with the mic computed from data packet decryption.
bool validate_mic(void)
{
	/*************************************************************/
	//SECURITY PATCH UPDATE
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3])
    9a7c:	4b0e      	ldr	r3, [pc, #56]	; (9ab8 <validate_mic+0x3c>)
    9a7e:	781a      	ldrb	r2, [r3, #0]
    9a80:	4b0e      	ldr	r3, [pc, #56]	; (9abc <validate_mic+0x40>)
    9a82:	781b      	ldrb	r3, [r3, #0]
	/*************************************************************/
	{
		return false;
    9a84:	2000      	movs	r0, #0
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3])
    9a86:	429a      	cmp	r2, r3
    9a88:	d000      	beq.n	9a8c <validate_mic+0x10>
	}
	else
	{
		return true;
	}
}
    9a8a:	4770      	bx	lr
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3])
    9a8c:	4b0a      	ldr	r3, [pc, #40]	; (9ab8 <validate_mic+0x3c>)
    9a8e:	785a      	ldrb	r2, [r3, #1]
    9a90:	4b0a      	ldr	r3, [pc, #40]	; (9abc <validate_mic+0x40>)
    9a92:	785b      	ldrb	r3, [r3, #1]
    9a94:	429a      	cmp	r2, r3
    9a96:	d1f8      	bne.n	9a8a <validate_mic+0xe>
    9a98:	4b07      	ldr	r3, [pc, #28]	; (9ab8 <validate_mic+0x3c>)
    9a9a:	789a      	ldrb	r2, [r3, #2]
    9a9c:	4b07      	ldr	r3, [pc, #28]	; (9abc <validate_mic+0x40>)
    9a9e:	789b      	ldrb	r3, [r3, #2]
    9aa0:	429a      	cmp	r2, r3
    9aa2:	d1f2      	bne.n	9a8a <validate_mic+0xe>
    9aa4:	4b04      	ldr	r3, [pc, #16]	; (9ab8 <validate_mic+0x3c>)
    9aa6:	78d8      	ldrb	r0, [r3, #3]
    9aa8:	4b04      	ldr	r3, [pc, #16]	; (9abc <validate_mic+0x40>)
    9aaa:	78db      	ldrb	r3, [r3, #3]
    9aac:	1ac0      	subs	r0, r0, r3
    9aae:	4243      	negs	r3, r0
    9ab0:	4158      	adcs	r0, r3
    9ab2:	b2c0      	uxtb	r0, r0
    9ab4:	e7e9      	b.n	9a8a <validate_mic+0xe>
    9ab6:	46c0      	nop			; (mov r8, r8)
    9ab8:	20002120 	.word	0x20002120
    9abc:	20002148 	.word	0x20002148

00009ac0 <DataDecrypt>:
 *      None
 *
 *****************************************************************************************/
bool DataDecrypt(uint8_t *Payload, uint8_t *PayloadLen, uint8_t *SourceIEEEAddress,
API_UINT32_UNION FrameCounter, uint8_t FrameControl)
{
    9ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9ac2:	46de      	mov	lr, fp
    9ac4:	4657      	mov	r7, sl
    9ac6:	464e      	mov	r6, r9
    9ac8:	4645      	mov	r5, r8
    9aca:	b5e0      	push	{r5, r6, r7, lr}
    9acc:	b091      	sub	sp, #68	; 0x44
    9ace:	4681      	mov	r9, r0
    9ad0:	9106      	str	r1, [sp, #24]
    9ad2:	9204      	str	r2, [sp, #16]
    9ad4:	9305      	str	r3, [sp, #20]
    9ad6:	ab1a      	add	r3, sp, #104	; 0x68
    9ad8:	781b      	ldrb	r3, [r3, #0]
    9ada:	9307      	str	r3, [sp, #28]
	uint16_t i ;
	uint8_t iterations , block[16] , j , CTR_Nonce_and_Counter[16];
	// Calculating No of blocks in the packet (1 block = 16 bytes of data)
	iterations = *PayloadLen/16;
    9adc:	7809      	ldrb	r1, [r1, #0]
    9ade:	090a      	lsrs	r2, r1, #4
	if (*PayloadLen % 16 != 0) iterations++;
    9ae0:	070b      	lsls	r3, r1, #28
    9ae2:	d000      	beq.n	9ae6 <DataDecrypt+0x26>
    9ae4:	3201      	adds	r2, #1

	//mic_generator(&Payloadinfo[0] , *Payload_len);

	for (i=*PayloadLen;i<iterations *16 ; i++ )
    9ae6:	b28b      	uxth	r3, r1
    9ae8:	0010      	movs	r0, r2
    9aea:	0112      	lsls	r2, r2, #4
    9aec:	4291      	cmp	r1, r2
    9aee:	da07      	bge.n	9b00 <DataDecrypt+0x40>
	{
		Payload[i] = 0; // Padding
    9af0:	2100      	movs	r1, #0
    9af2:	464c      	mov	r4, r9
    9af4:	54e1      	strb	r1, [r4, r3]
	for (i=*PayloadLen;i<iterations *16 ; i++ )
    9af6:	3301      	adds	r3, #1
    9af8:	b29b      	uxth	r3, r3
    9afa:	4293      	cmp	r3, r2
    9afc:	dbfa      	blt.n	9af4 <DataDecrypt+0x34>
    9afe:	46a1      	mov	r9, r4
	}
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    9b00:	2201      	movs	r2, #1
    9b02:	ab08      	add	r3, sp, #32
    9b04:	701a      	strb	r2, [r3, #0]
    9b06:	2300      	movs	r3, #0
	for (i=0;i<8;i++)
	{
		CTR_Nonce_and_Counter[i+1] = SourceIEEEAddress[i];
    9b08:	9c04      	ldr	r4, [sp, #16]
    9b0a:	aa08      	add	r2, sp, #32
    9b0c:	18d2      	adds	r2, r2, r3
    9b0e:	5ce1      	ldrb	r1, [r4, r3]
    9b10:	7051      	strb	r1, [r2, #1]
    9b12:	3301      	adds	r3, #1
	for (i=0;i<8;i++)
    9b14:	2b08      	cmp	r3, #8
    9b16:	d1f8      	bne.n	9b0a <DataDecrypt+0x4a>
	}
	for (i=0;i<4;i++)
	{
		CTR_Nonce_and_Counter[i+9] = FrameCounter.v[i];
    9b18:	ab08      	add	r3, sp, #32
    9b1a:	9905      	ldr	r1, [sp, #20]
    9b1c:	7259      	strb	r1, [r3, #9]
    9b1e:	0a0a      	lsrs	r2, r1, #8
    9b20:	729a      	strb	r2, [r3, #10]
    9b22:	0c0a      	lsrs	r2, r1, #16
    9b24:	72da      	strb	r2, [r3, #11]
    9b26:	0e0a      	lsrs	r2, r1, #24
    9b28:	731a      	strb	r2, [r3, #12]
	}
	CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode
    9b2a:	2204      	movs	r2, #4
    9b2c:	735a      	strb	r2, [r3, #13]
	CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
    9b2e:	2200      	movs	r2, #0
    9b30:	739a      	strb	r2, [r3, #14]
	CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1
    9b32:	73da      	strb	r2, [r3, #15]


	for (i=0;i<iterations+1;i++)
    9b34:	1c43      	adds	r3, r0, #1
    9b36:	469a      	mov	sl, r3
    9b38:	2500      	movs	r5, #0
    9b3a:	2300      	movs	r3, #0
    9b3c:	4698      	mov	r8, r3
    9b3e:	4653      	mov	r3, sl
    9b40:	2b00      	cmp	r3, #0
    9b42:	dd2e      	ble.n	9ba2 <DataDecrypt+0xe2>
	{
		for (j=0;j<16;j++)
		{
			block[j] = CTR_Nonce_and_Counter[j];
    9b44:	ac0c      	add	r4, sp, #48	; 0x30
    9b46:	ae08      	add	r6, sp, #32
		}
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    9b48:	4b26      	ldr	r3, [pc, #152]	; (9be4 <DataDecrypt+0x124>)
    9b4a:	469b      	mov	fp, r3
		for (j=0;j<16;j++)
		{
			if (CTR_Nonce_and_Counter[15] == 0)
			{
				CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    9b4c:	4f26      	ldr	r7, [pc, #152]	; (9be8 <DataDecrypt+0x128>)
    9b4e:	4643      	mov	r3, r8
    9b50:	9303      	str	r3, [sp, #12]
    9b52:	46a8      	mov	r8, r5
    9b54:	e014      	b.n	9b80 <DataDecrypt+0xc0>
			}
			else
			{
				Payload[j+(i-1)*16] = block[j] ^ Payload[j+(i-1)*16];
    9b56:	5d1a      	ldrb	r2, [r3, r4]
    9b58:	5ce9      	ldrb	r1, [r5, r3]
    9b5a:	404a      	eors	r2, r1
    9b5c:	54ea      	strb	r2, [r5, r3]
    9b5e:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    9b60:	2b10      	cmp	r3, #16
    9b62:	d004      	beq.n	9b6e <DataDecrypt+0xae>
			if (CTR_Nonce_and_Counter[15] == 0)
    9b64:	2800      	cmp	r0, #0
    9b66:	d1f6      	bne.n	9b56 <DataDecrypt+0x96>
				CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    9b68:	5d1a      	ldrb	r2, [r3, r4]
    9b6a:	54fa      	strb	r2, [r7, r3]
    9b6c:	e7f7      	b.n	9b5e <DataDecrypt+0x9e>
			}
		}
		CTR_Nonce_and_Counter[15]++; // Increment Counter for next opration
    9b6e:	3001      	adds	r0, #1
    9b70:	73f0      	strb	r0, [r6, #15]
	for (i=0;i<iterations+1;i++)
    9b72:	9d03      	ldr	r5, [sp, #12]
    9b74:	3501      	adds	r5, #1
    9b76:	b2ab      	uxth	r3, r5
    9b78:	9303      	str	r3, [sp, #12]
    9b7a:	4698      	mov	r8, r3
    9b7c:	4553      	cmp	r3, sl
    9b7e:	da10      	bge.n	9ba2 <DataDecrypt+0xe2>
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    9b80:	2300      	movs	r3, #0
			block[j] = CTR_Nonce_and_Counter[j];
    9b82:	5d9a      	ldrb	r2, [r3, r6]
    9b84:	551a      	strb	r2, [r3, r4]
    9b86:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    9b88:	2b10      	cmp	r3, #16
    9b8a:	d1fa      	bne.n	9b82 <DataDecrypt+0xc2>
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    9b8c:	4917      	ldr	r1, [pc, #92]	; (9bec <DataDecrypt+0x12c>)
    9b8e:	0020      	movs	r0, r4
    9b90:	47d8      	blx	fp
			if (CTR_Nonce_and_Counter[15] == 0)
    9b92:	7bf0      	ldrb	r0, [r6, #15]
				Payload[j+(i-1)*16] = block[j] ^ Payload[j+(i-1)*16];
    9b94:	4642      	mov	r2, r8
    9b96:	3a01      	subs	r2, #1
    9b98:	0112      	lsls	r2, r2, #4
    9b9a:	2300      	movs	r3, #0
    9b9c:	444a      	add	r2, r9
    9b9e:	0015      	movs	r5, r2
    9ba0:	e7e0      	b.n	9b64 <DataDecrypt+0xa4>
	}
	*PayloadLen = *PayloadLen-4;
    9ba2:	9b06      	ldr	r3, [sp, #24]
    9ba4:	7819      	ldrb	r1, [r3, #0]
    9ba6:	3904      	subs	r1, #4
    9ba8:	b2c9      	uxtb	r1, r1
    9baa:	7019      	strb	r1, [r3, #0]
	mic_generator(&Payload[0] , *PayloadLen , FrameControl  , FrameCounter , SourceIEEEAddress);
    9bac:	9b04      	ldr	r3, [sp, #16]
    9bae:	9300      	str	r3, [sp, #0]
    9bb0:	9b05      	ldr	r3, [sp, #20]
    9bb2:	9a07      	ldr	r2, [sp, #28]
    9bb4:	4648      	mov	r0, r9
    9bb6:	4c0e      	ldr	r4, [pc, #56]	; (9bf0 <DataDecrypt+0x130>)
    9bb8:	47a0      	blx	r4
    9bba:	2300      	movs	r3, #0
	for (i=0;i<16;i++)
	{
		final_mic_value[i] = CTR_mic[i] ^ CBC_mic[i];
    9bbc:	4d0d      	ldr	r5, [pc, #52]	; (9bf4 <DataDecrypt+0x134>)
    9bbe:	4c0a      	ldr	r4, [pc, #40]	; (9be8 <DataDecrypt+0x128>)
    9bc0:	480d      	ldr	r0, [pc, #52]	; (9bf8 <DataDecrypt+0x138>)
    9bc2:	5ce2      	ldrb	r2, [r4, r3]
    9bc4:	5cc1      	ldrb	r1, [r0, r3]
    9bc6:	404a      	eors	r2, r1
    9bc8:	54ea      	strb	r2, [r5, r3]
    9bca:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    9bcc:	2b10      	cmp	r3, #16
    9bce:	d1f8      	bne.n	9bc2 <DataDecrypt+0x102>
	}
	return validate_mic();
    9bd0:	4b0a      	ldr	r3, [pc, #40]	; (9bfc <DataDecrypt+0x13c>)
    9bd2:	4798      	blx	r3

}
    9bd4:	b011      	add	sp, #68	; 0x44
    9bd6:	bc3c      	pop	{r2, r3, r4, r5}
    9bd8:	4690      	mov	r8, r2
    9bda:	4699      	mov	r9, r3
    9bdc:	46a2      	mov	sl, r4
    9bde:	46ab      	mov	fp, r5
    9be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9be2:	46c0      	nop			; (mov r8, r8)
    9be4:	0000ac8d 	.word	0x0000ac8d
    9be8:	20002110 	.word	0x20002110
    9bec:	00018d24 	.word	0x00018d24
    9bf0:	00009839 	.word	0x00009839
    9bf4:	20002120 	.word	0x20002120
    9bf8:	20002138 	.word	0x20002138
    9bfc:	00009a7d 	.word	0x00009a7d

00009c00 <MiMAC_Set>:
     * Remarks:
     *      None
     *
     *****************************************************************************************/
bool MiMAC_Set(mac_set_params_t id, uint8_t *value)
{
    9c00:	b510      	push	{r4, lr}
    switch(id)
    9c02:	2800      	cmp	r0, #0
    9c04:	d109      	bne.n	9c1a <MiMAC_Set+0x1a>
    {
      case MAC_CHANNEL:
      {
         if(*value > LAST_CHANNEL_NUM) //26 // TODO: this check is necessary here? as we may connect a sub-gig or a 2.4gig?
    9c06:	780b      	ldrb	r3, [r1, #0]
    9c08:	2b19      	cmp	r3, #25
    9c0a:	d807      	bhi.n	9c1c <MiMAC_Set+0x1c>
         {
           return false;
         }
          MACCurrentChannel = *value;
    9c0c:	4a04      	ldr	r2, [pc, #16]	; (9c20 <MiMAC_Set+0x20>)
    9c0e:	7013      	strb	r3, [r2, #0]
          PHY_SetChannel(MACCurrentChannel);
    9c10:	0018      	movs	r0, r3
    9c12:	4b04      	ldr	r3, [pc, #16]	; (9c24 <MiMAC_Set+0x24>)
    9c14:	4798      	blx	r3
          return true;
    9c16:	2001      	movs	r0, #1
    9c18:	e000      	b.n	9c1c <MiMAC_Set+0x1c>
      break;

     default:
     break;
    }
    return false;
    9c1a:	2000      	movs	r0, #0
}
    9c1c:	bd10      	pop	{r4, pc}
    9c1e:	46c0      	nop			; (mov r8, r8)
    9c20:	2000215a 	.word	0x2000215a
    9c24:	0000abd9 	.word	0x0000abd9

00009c28 <MiMAC_Init>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
bool MiMAC_Init(MACINIT_PARAM initValue)
{
    9c28:	b570      	push	{r4, r5, r6, lr}
    9c2a:	b082      	sub	sp, #8
    9c2c:	466c      	mov	r4, sp
    9c2e:	9000      	str	r0, [sp, #0]
    9c30:	9101      	str	r1, [sp, #4]
	uint8_t i;

	PHY_Init();
    9c32:	4b1c      	ldr	r3, [pc, #112]	; (9ca4 <MiMAC_Init+0x7c>)
    9c34:	4798      	blx	r3
	MACInitParams = initValue;
    9c36:	4d1c      	ldr	r5, [pc, #112]	; (9ca8 <MiMAC_Init+0x80>)
    9c38:	002b      	movs	r3, r5
    9c3a:	466a      	mov	r2, sp
    9c3c:	ca03      	ldmia	r2!, {r0, r1}
    9c3e:	c303      	stmia	r3!, {r0, r1}
	uint16_t x =  PHY_RandomReq();
    9c40:	4b1a      	ldr	r3, [pc, #104]	; (9cac <MiMAC_Init+0x84>)
    9c42:	4798      	blx	r3
    9c44:	0006      	movs	r6, r0
	// Set RF mode
	PHY_SetRxState(true);
    9c46:	2001      	movs	r0, #1
    9c48:	4b19      	ldr	r3, [pc, #100]	; (9cb0 <MiMAC_Init+0x88>)
    9c4a:	4798      	blx	r3
	IEEESeqNum =   x & 0xff;
    9c4c:	4b19      	ldr	r3, [pc, #100]	; (9cb4 <MiMAC_Init+0x8c>)
    9c4e:	701e      	strb	r6, [r3, #0]

	// Set Node Address
	PHY_SetIEEEAddr(MACInitParams.PAddress);
    9c50:	6868      	ldr	r0, [r5, #4]
    9c52:	4b19      	ldr	r3, [pc, #100]	; (9cb8 <MiMAC_Init+0x90>)
    9c54:	4798      	blx	r3

	for (i = 0; i < BANK_SIZE; i++)
	{
		RxBuffer[i].PayloadLen = 0;
    9c56:	4b19      	ldr	r3, [pc, #100]	; (9cbc <MiMAC_Init+0x94>)
    9c58:	2200      	movs	r2, #0
    9c5a:	701a      	strb	r2, [r3, #0]
    9c5c:	2102      	movs	r1, #2
    9c5e:	31ff      	adds	r1, #255	; 0xff
    9c60:	545a      	strb	r2, [r3, r1]
    9c62:	4917      	ldr	r1, [pc, #92]	; (9cc0 <MiMAC_Init+0x98>)
    9c64:	545a      	strb	r2, [r3, r1]
    9c66:	4917      	ldr	r1, [pc, #92]	; (9cc4 <MiMAC_Init+0x9c>)
    9c68:	545a      	strb	r2, [r3, r1]
	}
	#ifdef ENABLE_SECURITY
		#if defined(ENABLE_NETWORK_FREEZER)
			if (initValue.actionFlags.bits.NetworkFreezer)
    9c6a:	7823      	ldrb	r3, [r4, #0]
    9c6c:	075b      	lsls	r3, r3, #29
    9c6e:	d40a      	bmi.n	9c86 <MiMAC_Init+0x5e>
				PDS_Restore(PDS_OUTGOING_FRAME_COUNTER_ID);
				OutgoingFrameCounter.Val += FRAME_COUNTER_UPDATE_INTERVAL;
				PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
			} else
			{
				OutgoingFrameCounter.Val = 0;
    9c70:	4c15      	ldr	r4, [pc, #84]	; (9cc8 <MiMAC_Init+0xa0>)
    9c72:	2300      	movs	r3, #0
    9c74:	6023      	str	r3, [r4, #0]
				PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
    9c76:	2001      	movs	r0, #1
    9c78:	4b14      	ldr	r3, [pc, #80]	; (9ccc <MiMAC_Init+0xa4>)
    9c7a:	4798      	blx	r3
				OutgoingFrameCounter.Val = 1;
    9c7c:	2301      	movs	r3, #1
    9c7e:	6023      	str	r3, [r4, #0]
			OutgoingFrameCounter.Val = 1;
		#endif
	#endif

	return true;
}
    9c80:	2001      	movs	r0, #1
    9c82:	b002      	add	sp, #8
    9c84:	bd70      	pop	{r4, r5, r6, pc}
				PDS_Restore(PDS_OUTGOING_FRAME_COUNTER_ID);
    9c86:	2001      	movs	r0, #1
    9c88:	4b11      	ldr	r3, [pc, #68]	; (9cd0 <MiMAC_Init+0xa8>)
    9c8a:	4798      	blx	r3
				OutgoingFrameCounter.Val += FRAME_COUNTER_UPDATE_INTERVAL;
    9c8c:	4a0e      	ldr	r2, [pc, #56]	; (9cc8 <MiMAC_Init+0xa0>)
    9c8e:	6813      	ldr	r3, [r2, #0]
    9c90:	2180      	movs	r1, #128	; 0x80
    9c92:	00c9      	lsls	r1, r1, #3
    9c94:	468c      	mov	ip, r1
    9c96:	4463      	add	r3, ip
    9c98:	6013      	str	r3, [r2, #0]
				PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
    9c9a:	2001      	movs	r0, #1
    9c9c:	4b0b      	ldr	r3, [pc, #44]	; (9ccc <MiMAC_Init+0xa4>)
    9c9e:	4798      	blx	r3
    9ca0:	e7ee      	b.n	9c80 <MiMAC_Init+0x58>
    9ca2:	46c0      	nop			; (mov r8, r8)
    9ca4:	0000aac1 	.word	0x0000aac1
    9ca8:	200020ec 	.word	0x200020ec
    9cac:	0000ac75 	.word	0x0000ac75
    9cb0:	0000aaf5 	.word	0x0000aaf5
    9cb4:	20001fe1 	.word	0x20001fe1
    9cb8:	0000ac99 	.word	0x0000ac99
    9cbc:	20002264 	.word	0x20002264
    9cc0:	00000202 	.word	0x00000202
    9cc4:	00000303 	.word	0x00000303
    9cc8:	20002134 	.word	0x20002134
    9ccc:	00009569 	.word	0x00009569
    9cd0:	00009491 	.word	0x00009491

00009cd4 <MiMAC_SendPacket>:

bool MiMAC_SendPacket( MAC_TRANS_PARAM transParam,
         uint8_t *MACPayload,
         uint8_t MACPayloadLen, uint8_t msghandle,
         DataConf_callback_t ConfCallback)
{
    9cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    9cd6:	46de      	mov	lr, fp
    9cd8:	4657      	mov	r7, sl
    9cda:	464e      	mov	r6, r9
    9cdc:	4645      	mov	r5, r8
    9cde:	b5e0      	push	{r5, r6, r7, lr}
    9ce0:	b087      	sub	sp, #28
    9ce2:	af03      	add	r7, sp, #12
    9ce4:	1c04      	adds	r4, r0, #0
    9ce6:	9003      	str	r0, [sp, #12]
    9ce8:	0008      	movs	r0, r1
    9cea:	9104      	str	r1, [sp, #16]
    9cec:	0015      	movs	r5, r2
    9cee:	0a2d      	lsrs	r5, r5, #8
    9cf0:	9205      	str	r2, [sp, #20]
    9cf2:	9300      	str	r3, [sp, #0]
    9cf4:	ab11      	add	r3, sp, #68	; 0x44
    9cf6:	781b      	ldrb	r3, [r3, #0]
    9cf8:	469a      	mov	sl, r3
    9cfa:	b2e4      	uxtb	r4, r4
    9cfc:	06a6      	lsls	r6, r4, #26
    9cfe:	0ff6      	lsrs	r6, r6, #31
    9d00:	9002      	str	r0, [sp, #8]
    9d02:	b2d3      	uxtb	r3, r2
    9d04:	469c      	mov	ip, r3
    9d06:	b2ed      	uxtb	r5, r5
    uint8_t headerLength;
    uint8_t loc = 0;
    uint8_t i = 0;

	uint8_t frameControl = 0;
	dataConfAvailable = false;
    9d08:	2200      	movs	r2, #0
    9d0a:	4bc9      	ldr	r3, [pc, #804]	; (a030 <MiMAC_SendPacket+0x35c>)
    9d0c:	701a      	strb	r2, [r3, #0]
	#ifndef TARGET_SMALL
		bool IntraPAN;
	#endif
	
	MACdatatransParam = transParam;
    9d0e:	4bc9      	ldr	r3, [pc, #804]	; (a034 <MiMAC_SendPacket+0x360>)
    9d10:	cf07      	ldmia	r7!, {r0, r1, r2}
    9d12:	c307      	stmia	r3!, {r0, r1, r2}

    if (transParam.flags.bits.broadcast)
    9d14:	0763      	lsls	r3, r4, #29
    9d16:	d501      	bpl.n	9d1c <MiMAC_SendPacket+0x48>
    {
        transParam.altDestAddr = true;
    9d18:	2301      	movs	r3, #1
    9d1a:	469c      	mov	ip, r3
    }

    if (transParam.flags.bits.secEn)
    9d1c:	2308      	movs	r3, #8
    9d1e:	4023      	ands	r3, r4
    9d20:	001a      	movs	r2, r3
    {
        transParam.altSrcAddr = false;
    9d22:	4253      	negs	r3, r2
    9d24:	4153      	adcs	r3, r2
    9d26:	425b      	negs	r3, r3
    9d28:	401d      	ands	r5, r3
    }

    // set the frame control in variable i
    if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND)
    9d2a:	2303      	movs	r3, #3
    9d2c:	4023      	ands	r3, r4
    9d2e:	2b01      	cmp	r3, #1
    9d30:	d04d      	beq.n	9dce <MiMAC_SendPacket+0xfa>
    {
        frameControl = 0x03;
    } else if (transParam.flags.bits.packetType == PACKET_TYPE_DATA)
    {
        frameControl = 0x01;
    9d32:	2201      	movs	r2, #1
    9d34:	4691      	mov	r9, r2
    } else if (transParam.flags.bits.packetType == PACKET_TYPE_DATA)
    9d36:	2b00      	cmp	r3, #0
    9d38:	d004      	beq.n	9d44 <MiMAC_SendPacket+0x70>
    }
	else if (transParam.flags.bits.packetType == PACKET_TYPE_ACK)
    {
        frameControl = 0x02;
    9d3a:	1e9a      	subs	r2, r3, #2
    9d3c:	4251      	negs	r1, r2
    9d3e:	4151      	adcs	r1, r2
    9d40:	004a      	lsls	r2, r1, #1
    9d42:	4691      	mov	r9, r2
    }
    // decide the header length for different addressing mode
#ifndef TARGET_SMALL
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    9d44:	aa03      	add	r2, sp, #12
    9d46:	8952      	ldrh	r2, [r2, #10]
    9d48:	48bb      	ldr	r0, [pc, #748]	; (a038 <MiMAC_SendPacket+0x364>)
    9d4a:	8800      	ldrh	r0, [r0, #0]
    9d4c:	4290      	cmp	r0, r2
    9d4e:	d041      	beq.n	9dd4 <MiMAC_SendPacket+0x100>
    }
#ifndef TARGET_SMALL
    else
    {
        headerLength = 7;
        IntraPAN = false;
    9d50:	2200      	movs	r2, #0
    9d52:	4693      	mov	fp, r2
        headerLength = 7;
    9d54:	3207      	adds	r2, #7
    }
#endif

    if (transParam.altDestAddr)
    9d56:	46e0      	mov	r8, ip
    {
        headerLength += 2;
    } else
    {
        headerLength += 8;
    9d58:	0017      	movs	r7, r2
    9d5a:	3708      	adds	r7, #8
    if (transParam.altDestAddr)
    9d5c:	4661      	mov	r1, ip
    9d5e:	2900      	cmp	r1, #0
    9d60:	d000      	beq.n	9d64 <MiMAC_SendPacket+0x90>
        headerLength += 2;
    9d62:	1c97      	adds	r7, r2, #2
    }

    if (transParam.altSrcAddr)
    9d64:	2d00      	cmp	r5, #0
    9d66:	d044      	beq.n	9df2 <MiMAC_SendPacket+0x11e>
    {
        headerLength += 2;
    9d68:	3702      	adds	r7, #2
    9d6a:	b2fa      	uxtb	r2, r7
    9d6c:	9201      	str	r2, [sp, #4]
    } else
    {
        headerLength += 8;
    }

    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false)
    9d6e:	2224      	movs	r2, #36	; 0x24
    9d70:	4014      	ands	r4, r2
    9d72:	2c20      	cmp	r4, #32
    9d74:	d041      	beq.n	9dfa <MiMAC_SendPacket+0x126>
    {
        frameControl |= 0x20;
    }

    // use PACKET_TYPE_RESERVE to represent beacon. Fixed format for beacon packet
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    9d76:	2b03      	cmp	r3, #3
    9d78:	d044      	beq.n	9e04 <MiMAC_SendPacket+0x130>
        IntraPAN = false;
#endif
        transParam.altSrcAddr = true;
        transParam.flags.bits.ackReq = false;
    }
	if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND) 
    9d7a:	aa03      	add	r2, sp, #12
    9d7c:	0171      	lsls	r1, r6, #5
    9d7e:	7813      	ldrb	r3, [r2, #0]
    9d80:	2020      	movs	r0, #32
    9d82:	4383      	bics	r3, r0
    9d84:	430b      	orrs	r3, r1
    9d86:	7013      	strb	r3, [r2, #0]
    9d88:	2203      	movs	r2, #3
    9d8a:	4013      	ands	r3, r2
    9d8c:	2b01      	cmp	r3, #1
    9d8e:	d041      	beq.n	9e14 <MiMAC_SendPacket+0x140>
    {
        transParam.flags.bits.ackReq = false;
    }

#ifdef ENABLE_SECURITY
    if (transParam.flags.bits.secEn)
    9d90:	ab03      	add	r3, sp, #12
    9d92:	0172      	lsls	r2, r6, #5
    9d94:	781c      	ldrb	r4, [r3, #0]
    9d96:	2120      	movs	r1, #32
    9d98:	438c      	bics	r4, r1
    9d9a:	4314      	orrs	r4, r2
    9d9c:	701c      	strb	r4, [r3, #0]
    9d9e:	b2e4      	uxtb	r4, r4
    9da0:	0723      	lsls	r3, r4, #28
    9da2:	d439      	bmi.n	9e18 <MiMAC_SendPacket+0x144>
		// 4 byte mic and 5 byte outgoing frame counter
		packet[loc++] = MACPayloadLen+headerLength+9;
    } else
#endif
    {
		packet[loc++] = MACPayloadLen+headerLength;
    9da4:	ab10      	add	r3, sp, #64	; 0x40
    9da6:	781b      	ldrb	r3, [r3, #0]
    9da8:	9a01      	ldr	r2, [sp, #4]
    9daa:	18d7      	adds	r7, r2, r3
    9dac:	4ba3      	ldr	r3, [pc, #652]	; (a03c <MiMAC_SendPacket+0x368>)
    9dae:	701f      	strb	r7, [r3, #0]
    }

    // set frame control LSB
	packet[loc++] = frameControl;
    9db0:	4ba2      	ldr	r3, [pc, #648]	; (a03c <MiMAC_SendPacket+0x368>)
    9db2:	464a      	mov	r2, r9
    9db4:	705a      	strb	r2, [r3, #1]

    // set frame control MSB
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    9db6:	43e3      	mvns	r3, r4
    9db8:	079b      	lsls	r3, r3, #30
    9dba:	d040      	beq.n	9e3e <MiMAC_SendPacket+0x16a>
		packet[loc++] = 0x80;
        // sequence number
		packet[loc++] = IEEESeqNum++;
    } else
    {
        if (transParam.altDestAddr && transParam.altSrcAddr)
    9dbc:	4643      	mov	r3, r8
    9dbe:	2b00      	cmp	r3, #0
    9dc0:	d05f      	beq.n	9e82 <MiMAC_SendPacket+0x1ae>
    9dc2:	2d00      	cmp	r5, #0
    9dc4:	d045      	beq.n	9e52 <MiMAC_SendPacket+0x17e>
        {
			packet[loc++] = 0x88;
    9dc6:	2288      	movs	r2, #136	; 0x88
    9dc8:	4b9c      	ldr	r3, [pc, #624]	; (a03c <MiMAC_SendPacket+0x368>)
    9dca:	709a      	strb	r2, [r3, #2]
    9dcc:	e044      	b.n	9e58 <MiMAC_SendPacket+0x184>
        frameControl = 0x03;
    9dce:	2203      	movs	r2, #3
    9dd0:	4691      	mov	r9, r2
    9dd2:	e7b7      	b.n	9d44 <MiMAC_SendPacket+0x70>
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    9dd4:	489a      	ldr	r0, [pc, #616]	; (a040 <MiMAC_SendPacket+0x36c>)
    9dd6:	4282      	cmp	r2, r0
    9dd8:	d007      	beq.n	9dea <MiMAC_SendPacket+0x116>
        frameControl |= 0x40;
    9dda:	2240      	movs	r2, #64	; 0x40
    9ddc:	4649      	mov	r1, r9
    9dde:	4311      	orrs	r1, r2
    9de0:	4689      	mov	r9, r1
        IntraPAN = true;
    9de2:	3a3f      	subs	r2, #63	; 0x3f
    9de4:	4693      	mov	fp, r2
        headerLength = 5;
    9de6:	3204      	adds	r2, #4
        IntraPAN = true;
    9de8:	e7b5      	b.n	9d56 <MiMAC_SendPacket+0x82>
        IntraPAN = false;
    9dea:	2200      	movs	r2, #0
    9dec:	4693      	mov	fp, r2
        headerLength = 7;
    9dee:	3207      	adds	r2, #7
    9df0:	e7b1      	b.n	9d56 <MiMAC_SendPacket+0x82>
        headerLength += 8;
    9df2:	3708      	adds	r7, #8
    9df4:	b2fa      	uxtb	r2, r7
    9df6:	9201      	str	r2, [sp, #4]
    9df8:	e7b9      	b.n	9d6e <MiMAC_SendPacket+0x9a>
        frameControl |= 0x20;
    9dfa:	3a04      	subs	r2, #4
    9dfc:	4649      	mov	r1, r9
    9dfe:	4311      	orrs	r1, r2
    9e00:	4689      	mov	r9, r1
    9e02:	e7b8      	b.n	9d76 <MiMAC_SendPacket+0xa2>
        transParam.altSrcAddr = true;
    9e04:	2501      	movs	r5, #1
        transParam.flags.bits.ackReq = false;
    9e06:	2600      	movs	r6, #0
        IntraPAN = false;
    9e08:	2300      	movs	r3, #0
    9e0a:	469b      	mov	fp, r3
        frameControl = 0x00;
    9e0c:	4699      	mov	r9, r3
        headerLength = 7;
    9e0e:	3307      	adds	r3, #7
    9e10:	9301      	str	r3, [sp, #4]
    9e12:	e7b2      	b.n	9d7a <MiMAC_SendPacket+0xa6>
        transParam.flags.bits.ackReq = false;
    9e14:	2600      	movs	r6, #0
    9e16:	e7bb      	b.n	9d90 <MiMAC_SendPacket+0xbc>
        frameControl |= 0x08;
    9e18:	2308      	movs	r3, #8
    9e1a:	464a      	mov	r2, r9
    9e1c:	431a      	orrs	r2, r3
    9e1e:	4691      	mov	r9, r2
		DataEncrypt(MACPayload, &MACPayloadLen, OutgoingFrameCounter, frameControl);
    9e20:	4b88      	ldr	r3, [pc, #544]	; (a044 <MiMAC_SendPacket+0x370>)
    9e22:	681a      	ldr	r2, [r3, #0]
    9e24:	464b      	mov	r3, r9
    9e26:	a910      	add	r1, sp, #64	; 0x40
    9e28:	9800      	ldr	r0, [sp, #0]
    9e2a:	4f87      	ldr	r7, [pc, #540]	; (a048 <MiMAC_SendPacket+0x374>)
    9e2c:	47b8      	blx	r7
		packet[loc++] = MACPayloadLen+headerLength+9;
    9e2e:	ab10      	add	r3, sp, #64	; 0x40
    9e30:	781b      	ldrb	r3, [r3, #0]
    9e32:	3309      	adds	r3, #9
    9e34:	9a01      	ldr	r2, [sp, #4]
    9e36:	18d7      	adds	r7, r2, r3
    9e38:	4b80      	ldr	r3, [pc, #512]	; (a03c <MiMAC_SendPacket+0x368>)
    9e3a:	701f      	strb	r7, [r3, #0]
    9e3c:	e7b8      	b.n	9db0 <MiMAC_SendPacket+0xdc>
		packet[loc++] = 0x80;
    9e3e:	4b7f      	ldr	r3, [pc, #508]	; (a03c <MiMAC_SendPacket+0x368>)
    9e40:	2280      	movs	r2, #128	; 0x80
    9e42:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    9e44:	4981      	ldr	r1, [pc, #516]	; (a04c <MiMAC_SendPacket+0x378>)
    9e46:	780a      	ldrb	r2, [r1, #0]
    9e48:	1c50      	adds	r0, r2, #1
    9e4a:	7008      	strb	r0, [r1, #0]
    9e4c:	70da      	strb	r2, [r3, #3]
    9e4e:	2304      	movs	r3, #4
    9e50:	e03e      	b.n	9ed0 <MiMAC_SendPacket+0x1fc>

        } else if (transParam.altDestAddr && transParam.altSrcAddr == 0)
        {
			packet[loc++] = 0xC8;
    9e52:	22c8      	movs	r2, #200	; 0xc8
    9e54:	4b79      	ldr	r3, [pc, #484]	; (a03c <MiMAC_SendPacket+0x368>)
    9e56:	709a      	strb	r2, [r3, #2]
        {
			packet[loc++] = 0xCC;
        }

        // sequence number
		packet[loc++] = IEEESeqNum++;
    9e58:	4b7c      	ldr	r3, [pc, #496]	; (a04c <MiMAC_SendPacket+0x378>)
    9e5a:	781a      	ldrb	r2, [r3, #0]
    9e5c:	1c51      	adds	r1, r2, #1
    9e5e:	7019      	strb	r1, [r3, #0]
    9e60:	4b76      	ldr	r3, [pc, #472]	; (a03c <MiMAC_SendPacket+0x368>)
    9e62:	70da      	strb	r2, [r3, #3]

        // destination PANID
		packet[loc++] = transParam.DestPANID.v[0];
    9e64:	aa03      	add	r2, sp, #12
    9e66:	7a91      	ldrb	r1, [r2, #10]
    9e68:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    9e6a:	7ad2      	ldrb	r2, [r2, #11]
    9e6c:	715a      	strb	r2, [r3, #5]

        // destination address
        if (transParam.flags.bits.broadcast)
    9e6e:	0763      	lsls	r3, r4, #29
    9e70:	d429      	bmi.n	9ec6 <MiMAC_SendPacket+0x1f2>
			packet[loc++] = 0xFF;
        } else
        {
            if (transParam.altDestAddr)
            {
				packet[loc++] = transParam.DestAddress[0];
    9e72:	9902      	ldr	r1, [sp, #8]
    9e74:	780a      	ldrb	r2, [r1, #0]
    9e76:	4b71      	ldr	r3, [pc, #452]	; (a03c <MiMAC_SendPacket+0x368>)
    9e78:	719a      	strb	r2, [r3, #6]
				packet[loc++] = transParam.DestAddress[1];
    9e7a:	784a      	ldrb	r2, [r1, #1]
    9e7c:	71da      	strb	r2, [r3, #7]
    9e7e:	2308      	movs	r3, #8
    9e80:	e026      	b.n	9ed0 <MiMAC_SendPacket+0x1fc>
        } else if (transParam.altDestAddr == 0 && transParam.altSrcAddr == 1)
    9e82:	2d00      	cmp	r5, #0
    9e84:	d00f      	beq.n	9ea6 <MiMAC_SendPacket+0x1d2>
			packet[loc++] = 0x8C;
    9e86:	4b6d      	ldr	r3, [pc, #436]	; (a03c <MiMAC_SendPacket+0x368>)
    9e88:	228c      	movs	r2, #140	; 0x8c
    9e8a:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    9e8c:	496f      	ldr	r1, [pc, #444]	; (a04c <MiMAC_SendPacket+0x378>)
    9e8e:	780a      	ldrb	r2, [r1, #0]
    9e90:	1c50      	adds	r0, r2, #1
    9e92:	7008      	strb	r0, [r1, #0]
    9e94:	70da      	strb	r2, [r3, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    9e96:	aa03      	add	r2, sp, #12
    9e98:	7a91      	ldrb	r1, [r2, #10]
    9e9a:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    9e9c:	7ad2      	ldrb	r2, [r2, #11]
    9e9e:	715a      	strb	r2, [r3, #5]
        if (transParam.flags.bits.broadcast)
    9ea0:	0763      	lsls	r3, r4, #29
    9ea2:	d410      	bmi.n	9ec6 <MiMAC_SendPacket+0x1f2>
    9ea4:	e09f      	b.n	9fe6 <MiMAC_SendPacket+0x312>
			packet[loc++] = 0xCC;
    9ea6:	4b65      	ldr	r3, [pc, #404]	; (a03c <MiMAC_SendPacket+0x368>)
    9ea8:	22cc      	movs	r2, #204	; 0xcc
    9eaa:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    9eac:	4967      	ldr	r1, [pc, #412]	; (a04c <MiMAC_SendPacket+0x378>)
    9eae:	780a      	ldrb	r2, [r1, #0]
    9eb0:	1c50      	adds	r0, r2, #1
    9eb2:	7008      	strb	r0, [r1, #0]
    9eb4:	70da      	strb	r2, [r3, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    9eb6:	aa03      	add	r2, sp, #12
    9eb8:	7a91      	ldrb	r1, [r2, #10]
    9eba:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    9ebc:	7ad2      	ldrb	r2, [r2, #11]
    9ebe:	715a      	strb	r2, [r3, #5]
        if (transParam.flags.bits.broadcast)
    9ec0:	0763      	lsls	r3, r4, #29
    9ec2:	d400      	bmi.n	9ec6 <MiMAC_SendPacket+0x1f2>
    9ec4:	e08b      	b.n	9fde <MiMAC_SendPacket+0x30a>
			packet[loc++] = 0xFF;
    9ec6:	4b5d      	ldr	r3, [pc, #372]	; (a03c <MiMAC_SendPacket+0x368>)
    9ec8:	22ff      	movs	r2, #255	; 0xff
    9eca:	719a      	strb	r2, [r3, #6]
			packet[loc++] = 0xFF;
    9ecc:	71da      	strb	r2, [r3, #7]
    9ece:	2308      	movs	r3, #8
                }
            }
        }
    }
	
	if(transParam.flags.bits.ackReq)
    9ed0:	a903      	add	r1, sp, #12
    9ed2:	0170      	lsls	r0, r6, #5
    9ed4:	780a      	ldrb	r2, [r1, #0]
    9ed6:	2420      	movs	r4, #32
    9ed8:	43a2      	bics	r2, r4
    9eda:	4302      	orrs	r2, r0
    9edc:	700a      	strb	r2, [r1, #0]
    9ede:	0692      	lsls	r2, r2, #26
    9ee0:	d400      	bmi.n	9ee4 <MiMAC_SendPacket+0x210>
    9ee2:	e08b      	b.n	9ffc <MiMAC_SendPacket+0x328>
	{
	 	AckSeqNum = IEEESeqNum-1;
    9ee4:	4a59      	ldr	r2, [pc, #356]	; (a04c <MiMAC_SendPacket+0x378>)
    9ee6:	7812      	ldrb	r2, [r2, #0]
    9ee8:	3a01      	subs	r2, #1
    9eea:	4959      	ldr	r1, [pc, #356]	; (a050 <MiMAC_SendPacket+0x37c>)
    9eec:	700a      	strb	r2, [r1, #0]
		 AckReqData = 1;
    9eee:	2101      	movs	r1, #1
    9ef0:	4a58      	ldr	r2, [pc, #352]	; (a054 <MiMAC_SendPacket+0x380>)
    9ef2:	7011      	strb	r1, [r2, #0]
	{
		AckReqData = 0;
	}
#ifndef TARGET_SMALL
    // source PANID if necessary
    if (IntraPAN == false)
    9ef4:	465a      	mov	r2, fp
    9ef6:	2a00      	cmp	r2, #0
    9ef8:	d109      	bne.n	9f0e <MiMAC_SendPacket+0x23a>
    {
		packet[loc++] = MAC_PANID.v[0];
    9efa:	1c5a      	adds	r2, r3, #1
    9efc:	b2d2      	uxtb	r2, r2
    9efe:	494f      	ldr	r1, [pc, #316]	; (a03c <MiMAC_SendPacket+0x368>)
    9f00:	484d      	ldr	r0, [pc, #308]	; (a038 <MiMAC_SendPacket+0x364>)
    9f02:	7804      	ldrb	r4, [r0, #0]
    9f04:	54cc      	strb	r4, [r1, r3]
		packet[loc++] = MAC_PANID.v[1];
    9f06:	3302      	adds	r3, #2
    9f08:	b2db      	uxtb	r3, r3
    9f0a:	7840      	ldrb	r0, [r0, #1]
    9f0c:	5488      	strb	r0, [r1, r2]
    }
#endif

    // source address
    if (transParam.altSrcAddr)
    9f0e:	2d00      	cmp	r5, #0
    9f10:	d100      	bne.n	9f14 <MiMAC_SendPacket+0x240>
    9f12:	e077      	b.n	a004 <MiMAC_SendPacket+0x330>
    {
		packet[loc++] = myNetworkAddress.v[0];
    9f14:	4a49      	ldr	r2, [pc, #292]	; (a03c <MiMAC_SendPacket+0x368>)
    9f16:	4950      	ldr	r1, [pc, #320]	; (a058 <MiMAC_SendPacket+0x384>)
    9f18:	7808      	ldrb	r0, [r1, #0]
    9f1a:	54d0      	strb	r0, [r2, r3]
		packet[loc++] = myNetworkAddress.v[1];
    9f1c:	1c9c      	adds	r4, r3, #2
    9f1e:	b2e4      	uxtb	r4, r4
		packet[loc++] = myNetworkAddress.v[0];
    9f20:	3301      	adds	r3, #1
		packet[loc++] = myNetworkAddress.v[1];
    9f22:	b2db      	uxtb	r3, r3
    9f24:	7849      	ldrb	r1, [r1, #1]
    9f26:	54d1      	strb	r1, [r2, r3]
        {
			packet[loc++] = MACInitParams.PAddress[i];
        }
    }
#ifdef ENABLE_SECURITY
if (transParam.flags.bits.secEn)
    9f28:	ab03      	add	r3, sp, #12
    9f2a:	0172      	lsls	r2, r6, #5
    9f2c:	781e      	ldrb	r6, [r3, #0]
    9f2e:	2120      	movs	r1, #32
    9f30:	438e      	bics	r6, r1
    9f32:	4316      	orrs	r6, r2
    9f34:	701e      	strb	r6, [r3, #0]
    9f36:	0733      	lsls	r3, r6, #28
    9f38:	d51b      	bpl.n	9f72 <MiMAC_SendPacket+0x29e>
    9f3a:	0022      	movs	r2, r4
    9f3c:	2300      	movs	r3, #0
{
	// fill the additional security aux header
	for (i = 0; i < 4; i++)
	{
		packet[loc++] = OutgoingFrameCounter.v[i];
    9f3e:	4e3f      	ldr	r6, [pc, #252]	; (a03c <MiMAC_SendPacket+0x368>)
    9f40:	4d40      	ldr	r5, [pc, #256]	; (a044 <MiMAC_SendPacket+0x370>)
    9f42:	1c51      	adds	r1, r2, #1
    9f44:	5ce8      	ldrb	r0, [r5, r3]
    9f46:	54b0      	strb	r0, [r6, r2]
    9f48:	3301      	adds	r3, #1
    9f4a:	b2ca      	uxtb	r2, r1
	for (i = 0; i < 4; i++)
    9f4c:	2b04      	cmp	r3, #4
    9f4e:	d1f8      	bne.n	9f42 <MiMAC_SendPacket+0x26e>
    9f50:	1d25      	adds	r5, r4, #4
    9f52:	b2ed      	uxtb	r5, r5
	}
	OutgoingFrameCounter.Val++;
    9f54:	4a3b      	ldr	r2, [pc, #236]	; (a044 <MiMAC_SendPacket+0x370>)
    9f56:	6813      	ldr	r3, [r2, #0]
    9f58:	3301      	adds	r3, #1
    9f5a:	6013      	str	r3, [r2, #0]

	#if defined(ENABLE_NETWORK_FREEZER)
	if ((OutgoingFrameCounter.v[0] == 0) && ((OutgoingFrameCounter.v[1] & 0x03) == 0))
    9f5c:	b2db      	uxtb	r3, r3
    9f5e:	2b00      	cmp	r3, #0
    9f60:	d102      	bne.n	9f68 <MiMAC_SendPacket+0x294>
    9f62:	7853      	ldrb	r3, [r2, #1]
    9f64:	079b      	lsls	r3, r3, #30
    9f66:	d05c      	beq.n	a022 <MiMAC_SendPacket+0x34e>
	{
		PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
	}
	#endif
	//copy myKeySequenceNumber
	packet[loc++] = myKeySequenceNumber;
    9f68:	3405      	adds	r4, #5
    9f6a:	b2e4      	uxtb	r4, r4
    9f6c:	2200      	movs	r2, #0
    9f6e:	4b33      	ldr	r3, [pc, #204]	; (a03c <MiMAC_SendPacket+0x368>)
    9f70:	555a      	strb	r2, [r3, r5]
    {
		packet[loc++] = MACPayload[i];
    }
#else
    // write the payload
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    9f72:	ab10      	add	r3, sp, #64	; 0x40
    9f74:	781e      	ldrb	r6, [r3, #0]
    9f76:	2e00      	cmp	r6, #0
    9f78:	d057      	beq.n	a02a <MiMAC_SendPacket+0x356>
    9f7a:	9b00      	ldr	r3, [sp, #0]
    9f7c:	1932      	adds	r2, r6, r4
    9f7e:	b2d2      	uxtb	r2, r2
    {
	    packet[loc++] = MACPayload[i];
    9f80:	4d2e      	ldr	r5, [pc, #184]	; (a03c <MiMAC_SendPacket+0x368>)
    9f82:	1c61      	adds	r1, r4, #1
    9f84:	7818      	ldrb	r0, [r3, #0]
    9f86:	5528      	strb	r0, [r5, r4]
    9f88:	3301      	adds	r3, #1
    9f8a:	b2cc      	uxtb	r4, r1
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    9f8c:	4294      	cmp	r4, r2
    9f8e:	d1f8      	bne.n	9f82 <MiMAC_SendPacket+0x2ae>
    }
	packet[loc++] = final_mic_value[0];
    9f90:	482a      	ldr	r0, [pc, #168]	; (a03c <MiMAC_SendPacket+0x368>)
    9f92:	4b32      	ldr	r3, [pc, #200]	; (a05c <MiMAC_SendPacket+0x388>)
    9f94:	7819      	ldrb	r1, [r3, #0]
    9f96:	5481      	strb	r1, [r0, r2]
    9f98:	1c51      	adds	r1, r2, #1
	packet[loc++] = final_mic_value[1];
    9f9a:	b2c9      	uxtb	r1, r1
    9f9c:	785c      	ldrb	r4, [r3, #1]
    9f9e:	5444      	strb	r4, [r0, r1]
    9fa0:	1c91      	adds	r1, r2, #2
	packet[loc++] = final_mic_value[2];
    9fa2:	b2c9      	uxtb	r1, r1
    9fa4:	789c      	ldrb	r4, [r3, #2]
    9fa6:	5444      	strb	r4, [r0, r1]
    9fa8:	3203      	adds	r2, #3
	packet[loc++] = final_mic_value[3];
    9faa:	b2d2      	uxtb	r2, r2
    9fac:	78db      	ldrb	r3, [r3, #3]
    9fae:	5483      	strb	r3, [r0, r2]
    } else
    {
        i = 0x01;
    }

    dataPointer = MACPayload;
    9fb0:	4b2b      	ldr	r3, [pc, #172]	; (a060 <MiMAC_SendPacket+0x38c>)
    9fb2:	9a00      	ldr	r2, [sp, #0]
    9fb4:	601a      	str	r2, [r3, #0]
	dataConfCallback = ConfCallback;
    9fb6:	4b2b      	ldr	r3, [pc, #172]	; (a064 <MiMAC_SendPacket+0x390>)
    9fb8:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9fba:	601a      	str	r2, [r3, #0]
    dataHandle = msghandle;
    9fbc:	4b2a      	ldr	r3, [pc, #168]	; (a068 <MiMAC_SendPacket+0x394>)
    9fbe:	4652      	mov	r2, sl
    9fc0:	701a      	strb	r2, [r3, #0]
	MACdataPayloadLen = MACPayloadLen;
    9fc2:	4b2a      	ldr	r3, [pc, #168]	; (a06c <MiMAC_SendPacket+0x398>)
    9fc4:	701e      	strb	r6, [r3, #0]
	//DataRetryCount = 0;

    // Now Trigger the Transmission of packet
    return PHY_DataReq(packet);					
    9fc6:	4b2a      	ldr	r3, [pc, #168]	; (a070 <MiMAC_SendPacket+0x39c>)
    9fc8:	4798      	blx	r3
    9fca:	1e43      	subs	r3, r0, #1
    9fcc:	4198      	sbcs	r0, r3
    9fce:	b2c0      	uxtb	r0, r0
}
    9fd0:	b007      	add	sp, #28
    9fd2:	bc3c      	pop	{r2, r3, r4, r5}
    9fd4:	4690      	mov	r8, r2
    9fd6:	4699      	mov	r9, r3
    9fd8:	46a2      	mov	sl, r4
    9fda:	46ab      	mov	fp, r5
    9fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (transParam.altDestAddr)
    9fde:	4643      	mov	r3, r8
    9fe0:	2b00      	cmp	r3, #0
    9fe2:	d000      	beq.n	9fe6 <MiMAC_SendPacket+0x312>
    9fe4:	e745      	b.n	9e72 <MiMAC_SendPacket+0x19e>
        transParam.flags.bits.ackReq = false;
    9fe6:	2300      	movs	r3, #0
					packet[loc++] = transParam.DestAddress[i];
    9fe8:	4814      	ldr	r0, [pc, #80]	; (a03c <MiMAC_SendPacket+0x368>)
    9fea:	9c02      	ldr	r4, [sp, #8]
    9fec:	5ce1      	ldrb	r1, [r4, r3]
    9fee:	181a      	adds	r2, r3, r0
    9ff0:	7191      	strb	r1, [r2, #6]
    9ff2:	3301      	adds	r3, #1
                for (i = 0; i < 8; i++)
    9ff4:	2b08      	cmp	r3, #8
    9ff6:	d1f9      	bne.n	9fec <MiMAC_SendPacket+0x318>
					packet[loc++] = transParam.DestAddress[i];
    9ff8:	3306      	adds	r3, #6
    9ffa:	e769      	b.n	9ed0 <MiMAC_SendPacket+0x1fc>
		AckReqData = 0;
    9ffc:	2100      	movs	r1, #0
    9ffe:	4a15      	ldr	r2, [pc, #84]	; (a054 <MiMAC_SendPacket+0x380>)
    a000:	7011      	strb	r1, [r2, #0]
    a002:	e777      	b.n	9ef4 <MiMAC_SendPacket+0x220>
			packet[loc++] = MACInitParams.PAddress[i];
    a004:	4a1b      	ldr	r2, [pc, #108]	; (a074 <MiMAC_SendPacket+0x3a0>)
    a006:	6852      	ldr	r2, [r2, #4]
    a008:	0018      	movs	r0, r3
    a00a:	3008      	adds	r0, #8
    a00c:	b2c0      	uxtb	r0, r0
    a00e:	4d0b      	ldr	r5, [pc, #44]	; (a03c <MiMAC_SendPacket+0x368>)
    a010:	1c5c      	adds	r4, r3, #1
    a012:	b2e4      	uxtb	r4, r4
    a014:	7811      	ldrb	r1, [r2, #0]
    a016:	54e9      	strb	r1, [r5, r3]
    a018:	3201      	adds	r2, #1
    a01a:	0023      	movs	r3, r4
        for (i = 0; i < 8; i++)
    a01c:	42a0      	cmp	r0, r4
    a01e:	d1f7      	bne.n	a010 <MiMAC_SendPacket+0x33c>
    a020:	e782      	b.n	9f28 <MiMAC_SendPacket+0x254>
		PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
    a022:	2001      	movs	r0, #1
    a024:	4b14      	ldr	r3, [pc, #80]	; (a078 <MiMAC_SendPacket+0x3a4>)
    a026:	4798      	blx	r3
    a028:	e79e      	b.n	9f68 <MiMAC_SendPacket+0x294>
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    a02a:	0022      	movs	r2, r4
    a02c:	e7b0      	b.n	9f90 <MiMAC_SendPacket+0x2bc>
    a02e:	46c0      	nop			; (mov r8, r8)
    a030:	2000028a 	.word	0x2000028a
    a034:	20002104 	.word	0x20002104
    a038:	20002158 	.word	0x20002158
    a03c:	20001fe4 	.word	0x20001fe4
    a040:	0000ffff 	.word	0x0000ffff
    a044:	20002134 	.word	0x20002134
    a048:	00009965 	.word	0x00009965
    a04c:	20001fe1 	.word	0x20001fe1
    a050:	20001fe0 	.word	0x20001fe0
    a054:	20000287 	.word	0x20000287
    a058:	200020e4 	.word	0x200020e4
    a05c:	20002120 	.word	0x20002120
    a060:	20000294 	.word	0x20000294
    a064:	2000028c 	.word	0x2000028c
    a068:	20000290 	.word	0x20000290
    a06c:	20000289 	.word	0x20000289
    a070:	0000ac05 	.word	0x0000ac05
    a074:	200020ec 	.word	0x200020ec
    a078:	00009569 	.word	0x00009569

0000a07c <MiMAC_DiscardPacket>:
 *
 *****************************************************************************************/
void MiMAC_DiscardPacket(void)
{
	//re-enable buffer for next packets
	if (BankIndex < BANK_SIZE)
    a07c:	4b04      	ldr	r3, [pc, #16]	; (a090 <MiMAC_DiscardPacket+0x14>)
    a07e:	781b      	ldrb	r3, [r3, #0]
    a080:	2b03      	cmp	r3, #3
    a082:	d804      	bhi.n	a08e <MiMAC_DiscardPacket+0x12>
	{
		RxBuffer[BankIndex].PayloadLen = 0;
    a084:	021a      	lsls	r2, r3, #8
    a086:	18d3      	adds	r3, r2, r3
    a088:	2100      	movs	r1, #0
    a08a:	4a02      	ldr	r2, [pc, #8]	; (a094 <MiMAC_DiscardPacket+0x18>)
    a08c:	5499      	strb	r1, [r3, r2]
	}
}
    a08e:	4770      	bx	lr
    a090:	2000000f 	.word	0x2000000f
    a094:	20002264 	.word	0x20002264

0000a098 <PHY_DataConf>:
 *      None
 *
 *****************************************************************************************/
void PHY_DataConf(uint8_t status)
{
	DataRetryCount = 0;
    a098:	2200      	movs	r2, #0
    a09a:	4b04      	ldr	r3, [pc, #16]	; (a0ac <PHY_DataConf+0x14>)
    a09c:	701a      	strb	r2, [r3, #0]
	dataStatus = (miwi_status_t)status;
    a09e:	4b04      	ldr	r3, [pc, #16]	; (a0b0 <PHY_DataConf+0x18>)
    a0a0:	7018      	strb	r0, [r3, #0]
	dataConfAvailable = true;
    a0a2:	3201      	adds	r2, #1
    a0a4:	4b03      	ldr	r3, [pc, #12]	; (a0b4 <PHY_DataConf+0x1c>)
    a0a6:	701a      	strb	r2, [r3, #0]
}
    a0a8:	4770      	bx	lr
    a0aa:	46c0      	nop			; (mov r8, r8)
    a0ac:	20000288 	.word	0x20000288
    a0b0:	20002130 	.word	0x20002130
    a0b4:	2000028a 	.word	0x2000028a

0000a0b8 <MiMAC_RetryPacket>:
{
    a0b8:	b510      	push	{r4, lr}
	DataRetryCount++;
    a0ba:	4a0b      	ldr	r2, [pc, #44]	; (a0e8 <MiMAC_RetryPacket+0x30>)
    a0bc:	7813      	ldrb	r3, [r2, #0]
    a0be:	3301      	adds	r3, #1
    a0c0:	b2db      	uxtb	r3, r3
    a0c2:	7013      	strb	r3, [r2, #0]
	if (DataRetryCount < DATA_RETRY_ATTEMPT)
    a0c4:	2b02      	cmp	r3, #2
    a0c6:	d904      	bls.n	a0d2 <MiMAC_RetryPacket+0x1a>
		PHY_DataConf(NO_ACK); // No Ack response
    a0c8:	2003      	movs	r0, #3
    a0ca:	4b08      	ldr	r3, [pc, #32]	; (a0ec <MiMAC_RetryPacket+0x34>)
    a0cc:	4798      	blx	r3
	bool status = false;
    a0ce:	2000      	movs	r0, #0
}
    a0d0:	bd10      	pop	{r4, pc}
		AckReqData = 1;
    a0d2:	2201      	movs	r2, #1
    a0d4:	4b06      	ldr	r3, [pc, #24]	; (a0f0 <MiMAC_RetryPacket+0x38>)
    a0d6:	701a      	strb	r2, [r3, #0]
		status = PHY_DataReq(packet);
    a0d8:	4806      	ldr	r0, [pc, #24]	; (a0f4 <MiMAC_RetryPacket+0x3c>)
    a0da:	4b07      	ldr	r3, [pc, #28]	; (a0f8 <MiMAC_RetryPacket+0x40>)
    a0dc:	4798      	blx	r3
    a0de:	1e43      	subs	r3, r0, #1
    a0e0:	4198      	sbcs	r0, r3
    a0e2:	b2c0      	uxtb	r0, r0
    a0e4:	e7f4      	b.n	a0d0 <MiMAC_RetryPacket+0x18>
    a0e6:	46c0      	nop			; (mov r8, r8)
    a0e8:	20000288 	.word	0x20000288
    a0ec:	0000a099 	.word	0x0000a099
    a0f0:	20000287 	.word	0x20000287
    a0f4:	20001fe4 	.word	0x20001fe4
    a0f8:	0000ac05 	.word	0x0000ac05

0000a0fc <MiMAC_ReceivedPacket>:
{
    a0fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a0fe:	46c6      	mov	lr, r8
    a100:	b500      	push	{lr}
    a102:	b088      	sub	sp, #32
	BankIndex = 0xFF;
    a104:	22ff      	movs	r2, #255	; 0xff
    a106:	4bcc      	ldr	r3, [pc, #816]	; (a438 <MiMAC_ReceivedPacket+0x33c>)
    a108:	701a      	strb	r2, [r3, #0]
		if (RxBuffer[i].PayloadLen > 0)
    a10a:	4bcc      	ldr	r3, [pc, #816]	; (a43c <MiMAC_ReceivedPacket+0x340>)
    a10c:	781b      	ldrb	r3, [r3, #0]
    a10e:	2b00      	cmp	r3, #0
    a110:	d000      	beq.n	a114 <MiMAC_ReceivedPacket+0x18>
    a112:	e354      	b.n	a7be <MiMAC_ReceivedPacket+0x6c2>
    a114:	2302      	movs	r3, #2
    a116:	33ff      	adds	r3, #255	; 0xff
    a118:	4ac8      	ldr	r2, [pc, #800]	; (a43c <MiMAC_ReceivedPacket+0x340>)
    a11a:	5cd3      	ldrb	r3, [r2, r3]
    a11c:	2b00      	cmp	r3, #0
    a11e:	d10e      	bne.n	a13e <MiMAC_ReceivedPacket+0x42>
    a120:	4bc7      	ldr	r3, [pc, #796]	; (a440 <MiMAC_ReceivedPacket+0x344>)
    a122:	5cd3      	ldrb	r3, [r2, r3]
    a124:	2b00      	cmp	r3, #0
    a126:	d140      	bne.n	a1aa <MiMAC_ReceivedPacket+0xae>
    a128:	4bc6      	ldr	r3, [pc, #792]	; (a444 <MiMAC_ReceivedPacket+0x348>)
    a12a:	5cd3      	ldrb	r3, [r2, r3]
	return false;
    a12c:	2400      	movs	r4, #0
	for (i = 0; i < BANK_SIZE; i++)
    a12e:	2203      	movs	r2, #3
		if (RxBuffer[i].PayloadLen > 0)
    a130:	2b00      	cmp	r3, #0
    a132:	d105      	bne.n	a140 <MiMAC_ReceivedPacket+0x44>
}
    a134:	0020      	movs	r0, r4
    a136:	b008      	add	sp, #32
    a138:	bc04      	pop	{r2}
    a13a:	4690      	mov	r8, r2
    a13c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < BANK_SIZE; i++)
    a13e:	2201      	movs	r2, #1
			BankIndex = i;
    a140:	4bbd      	ldr	r3, [pc, #756]	; (a438 <MiMAC_ReceivedPacket+0x33c>)
    a142:	701a      	strb	r2, [r3, #0]
	return false;
    a144:	2400      	movs	r4, #0
	if (BankIndex < BANK_SIZE)
    a146:	2a03      	cmp	r2, #3
    a148:	d8f4      	bhi.n	a134 <MiMAC_ReceivedPacket+0x38>
		if ((RxBuffer[BankIndex].Payload[0] & 0x40) == 0)
    a14a:	0010      	movs	r0, r2
    a14c:	0211      	lsls	r1, r2, #8
    a14e:	1889      	adds	r1, r1, r2
    a150:	4bba      	ldr	r3, [pc, #744]	; (a43c <MiMAC_ReceivedPacket+0x340>)
    a152:	185b      	adds	r3, r3, r1
    a154:	789d      	ldrb	r5, [r3, #2]
    a156:	2440      	movs	r4, #64	; 0x40
    a158:	4025      	ands	r5, r4
		MACRxPacket.flags.Val = 0;
    a15a:	49bb      	ldr	r1, [pc, #748]	; (a448 <MiMAC_ReceivedPacket+0x34c>)
    a15c:	2400      	movs	r4, #0
    a15e:	700c      	strb	r4, [r1, #0]
		MACRxPacket.altSourceAddress = false;
    a160:	73cc      	strb	r4, [r1, #15]
		addrMode = RxBuffer[BankIndex].Payload[1] & 0xCC;
    a162:	78db      	ldrb	r3, [r3, #3]
    a164:	2133      	movs	r1, #51	; 0x33
    a166:	438b      	bics	r3, r1
		switch (addrMode)
    a168:	b2d9      	uxtb	r1, r3
    a16a:	2988      	cmp	r1, #136	; 0x88
    a16c:	d100      	bne.n	a170 <MiMAC_ReceivedPacket+0x74>
    a16e:	e12f      	b.n	a3d0 <MiMAC_ReceivedPacket+0x2d4>
    a170:	d91d      	bls.n	a1ae <MiMAC_ReceivedPacket+0xb2>
    a172:	b2d9      	uxtb	r1, r3
    a174:	29c8      	cmp	r1, #200	; 0xc8
    a176:	d06f      	beq.n	a258 <MiMAC_ReceivedPacket+0x15c>
    a178:	29cc      	cmp	r1, #204	; 0xcc
    a17a:	d100      	bne.n	a17e <MiMAC_ReceivedPacket+0x82>
    a17c:	e0b9      	b.n	a2f2 <MiMAC_ReceivedPacket+0x1f6>
    a17e:	298c      	cmp	r1, #140	; 0x8c
    a180:	d100      	bne.n	a184 <MiMAC_ReceivedPacket+0x88>
    a182:	e1aa      	b.n	a4da <MiMAC_ReceivedPacket+0x3de>
			MiMAC_DiscardPacket();
    a184:	4bb1      	ldr	r3, [pc, #708]	; (a44c <MiMAC_ReceivedPacket+0x350>)
    a186:	4798      	blx	r3
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a188:	4bab      	ldr	r3, [pc, #684]	; (a438 <MiMAC_ReceivedPacket+0x33c>)
    a18a:	781a      	ldrb	r2, [r3, #0]
    a18c:	0213      	lsls	r3, r2, #8
    a18e:	189a      	adds	r2, r3, r2
    a190:	4baa      	ldr	r3, [pc, #680]	; (a43c <MiMAC_ReceivedPacket+0x340>)
    a192:	189b      	adds	r3, r3, r2
    a194:	789b      	ldrb	r3, [r3, #2]
			return false;
    a196:	2400      	movs	r4, #0
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a198:	069b      	lsls	r3, r3, #26
    a19a:	d5cb      	bpl.n	a134 <MiMAC_ReceivedPacket+0x38>
				MiRadioReceiveParam.action = RECEIVE_START;					
    a19c:	a807      	add	r0, sp, #28
    a19e:	2300      	movs	r3, #0
    a1a0:	7003      	strb	r3, [r0, #0]
				MiRadioReceiveParam.rxWindowSize = 0;
    a1a2:	8043      	strh	r3, [r0, #2]
				RADIO_Receive(&MiRadioReceiveParam);
    a1a4:	4baa      	ldr	r3, [pc, #680]	; (a450 <MiMAC_ReceivedPacket+0x354>)
    a1a6:	4798      	blx	r3
    a1a8:	e7c4      	b.n	a134 <MiMAC_ReceivedPacket+0x38>
	for (i = 0; i < BANK_SIZE; i++)
    a1aa:	2202      	movs	r2, #2
    a1ac:	e7c8      	b.n	a140 <MiMAC_ReceivedPacket+0x44>
		switch (addrMode)
    a1ae:	2b08      	cmp	r3, #8
    a1b0:	d100      	bne.n	a1b4 <MiMAC_ReceivedPacket+0xb8>
    a1b2:	e1e1      	b.n	a578 <MiMAC_ReceivedPacket+0x47c>
    a1b4:	2980      	cmp	r1, #128	; 0x80
    a1b6:	d1e5      	bne.n	a184 <MiMAC_ReceivedPacket+0x88>
				MACRxPacket.flags.bits.broadcast = 1;
    a1b8:	4ba3      	ldr	r3, [pc, #652]	; (a448 <MiMAC_ReceivedPacket+0x34c>)
    a1ba:	7819      	ldrb	r1, [r3, #0]
    a1bc:	2404      	movs	r4, #4
    a1be:	4321      	orrs	r1, r4
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    a1c0:	2480      	movs	r4, #128	; 0x80
    a1c2:	4264      	negs	r4, r4
    a1c4:	4321      	orrs	r1, r4
    a1c6:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    a1c8:	2101      	movs	r1, #1
    a1ca:	73d9      	strb	r1, [r3, #15]
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    a1cc:	4c9b      	ldr	r4, [pc, #620]	; (a43c <MiMAC_ReceivedPacket+0x340>)
    a1ce:	0211      	lsls	r1, r2, #8
    a1d0:	1888      	adds	r0, r1, r2
    a1d2:	1821      	adds	r1, r4, r0
    a1d4:	794d      	ldrb	r5, [r1, #5]
    a1d6:	741d      	strb	r5, [r3, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    a1d8:	7989      	ldrb	r1, [r1, #6]
    a1da:	7459      	strb	r1, [r3, #17]
    a1dc:	0211      	lsls	r1, r2, #8
    a1de:	188a      	adds	r2, r1, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[5]);
    a1e0:	1dd1      	adds	r1, r2, #7
    a1e2:	1909      	adds	r1, r1, r4
    a1e4:	6059      	str	r1, [r3, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 11;
    a1e6:	5d01      	ldrb	r1, [r0, r4]
    a1e8:	390b      	subs	r1, #11
    a1ea:	7319      	strb	r1, [r3, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    a1ec:	3209      	adds	r2, #9
    a1ee:	1912      	adds	r2, r2, r4
    a1f0:	609a      	str	r2, [r3, #8]
		if (RxBuffer[BankIndex].Payload[0] & 0x08)
    a1f2:	4b91      	ldr	r3, [pc, #580]	; (a438 <MiMAC_ReceivedPacket+0x33c>)
    a1f4:	781a      	ldrb	r2, [r3, #0]
    a1f6:	0213      	lsls	r3, r2, #8
    a1f8:	189a      	adds	r2, r3, r2
    a1fa:	4b90      	ldr	r3, [pc, #576]	; (a43c <MiMAC_ReceivedPacket+0x340>)
    a1fc:	189b      	adds	r3, r3, r2
    a1fe:	789b      	ldrb	r3, [r3, #2]
    a200:	071b      	lsls	r3, r3, #28
    a202:	d500      	bpl.n	a206 <MiMAC_ReceivedPacket+0x10a>
    a204:	e1d9      	b.n	a5ba <MiMAC_ReceivedPacket+0x4be>
		switch (RxBuffer[BankIndex].Payload[0] & 0x07) // check frame type
    a206:	4b8c      	ldr	r3, [pc, #560]	; (a438 <MiMAC_ReceivedPacket+0x33c>)
    a208:	7818      	ldrb	r0, [r3, #0]
    a20a:	0202      	lsls	r2, r0, #8
    a20c:	1812      	adds	r2, r2, r0
    a20e:	4b8b      	ldr	r3, [pc, #556]	; (a43c <MiMAC_ReceivedPacket+0x340>)
    a210:	189b      	adds	r3, r3, r2
    a212:	7899      	ldrb	r1, [r3, #2]
    a214:	2307      	movs	r3, #7
    a216:	400b      	ands	r3, r1
    a218:	2b01      	cmp	r3, #1
    a21a:	d100      	bne.n	a21e <MiMAC_ReceivedPacket+0x122>
    a21c:	e24e      	b.n	a6bc <MiMAC_ReceivedPacket+0x5c0>
    a21e:	2b00      	cmp	r3, #0
    a220:	d100      	bne.n	a224 <MiMAC_ReceivedPacket+0x128>
    a222:	e283      	b.n	a72c <MiMAC_ReceivedPacket+0x630>
    a224:	2b02      	cmp	r3, #2
    a226:	d100      	bne.n	a22a <MiMAC_ReceivedPacket+0x12e>
    a228:	e286      	b.n	a738 <MiMAC_ReceivedPacket+0x63c>
    a22a:	2b03      	cmp	r3, #3
    a22c:	d100      	bne.n	a230 <MiMAC_ReceivedPacket+0x134>
    a22e:	e275      	b.n	a71c <MiMAC_ReceivedPacket+0x620>
			MiMAC_DiscardPacket();
    a230:	4b86      	ldr	r3, [pc, #536]	; (a44c <MiMAC_ReceivedPacket+0x350>)
    a232:	4798      	blx	r3
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a234:	4b80      	ldr	r3, [pc, #512]	; (a438 <MiMAC_ReceivedPacket+0x33c>)
    a236:	781a      	ldrb	r2, [r3, #0]
    a238:	0213      	lsls	r3, r2, #8
    a23a:	189a      	adds	r2, r3, r2
    a23c:	4b7f      	ldr	r3, [pc, #508]	; (a43c <MiMAC_ReceivedPacket+0x340>)
    a23e:	189b      	adds	r3, r3, r2
    a240:	789b      	ldrb	r3, [r3, #2]
			return false;
    a242:	2400      	movs	r4, #0
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a244:	069b      	lsls	r3, r3, #26
    a246:	d400      	bmi.n	a24a <MiMAC_ReceivedPacket+0x14e>
    a248:	e774      	b.n	a134 <MiMAC_ReceivedPacket+0x38>
				MiRadioReceiveParam.action = RECEIVE_START;	
    a24a:	a807      	add	r0, sp, #28
    a24c:	2300      	movs	r3, #0
    a24e:	7003      	strb	r3, [r0, #0]
				MiRadioReceiveParam.rxWindowSize = 0;
    a250:	8043      	strh	r3, [r0, #2]
				RADIO_Receive(&MiRadioReceiveParam);
    a252:	4b7f      	ldr	r3, [pc, #508]	; (a450 <MiMAC_ReceivedPacket+0x354>)
    a254:	4798      	blx	r3
    a256:	e76d      	b.n	a134 <MiMAC_ReceivedPacket+0x38>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    a258:	0211      	lsls	r1, r2, #8
    a25a:	1889      	adds	r1, r1, r2
    a25c:	4b77      	ldr	r3, [pc, #476]	; (a43c <MiMAC_ReceivedPacket+0x340>)
    a25e:	185b      	adds	r3, r3, r1
    a260:	79dc      	ldrb	r4, [r3, #7]
    a262:	2cff      	cmp	r4, #255	; 0xff
    a264:	d01e      	beq.n	a2a4 <MiMAC_ReceivedPacket+0x1a8>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    a266:	4978      	ldr	r1, [pc, #480]	; (a448 <MiMAC_ReceivedPacket+0x34c>)
    a268:	780e      	ldrb	r6, [r1, #0]
    a26a:	2380      	movs	r3, #128	; 0x80
    a26c:	425b      	negs	r3, r3
    a26e:	4333      	orrs	r3, r6
    a270:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    a272:	2d00      	cmp	r5, #0
    a274:	d000      	beq.n	a278 <MiMAC_ReceivedPacket+0x17c>
    a276:	e27d      	b.n	a774 <MiMAC_ReceivedPacket+0x678>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    a278:	4973      	ldr	r1, [pc, #460]	; (a448 <MiMAC_ReceivedPacket+0x34c>)
    a27a:	4c70      	ldr	r4, [pc, #448]	; (a43c <MiMAC_ReceivedPacket+0x340>)
    a27c:	0203      	lsls	r3, r0, #8
    a27e:	1818      	adds	r0, r3, r0
    a280:	1823      	adds	r3, r4, r0
    a282:	7a5d      	ldrb	r5, [r3, #9]
    a284:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    a286:	7a9b      	ldrb	r3, [r3, #10]
    a288:	744b      	strb	r3, [r1, #17]
    a28a:	0213      	lsls	r3, r2, #8
    a28c:	189a      	adds	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    a28e:	0013      	movs	r3, r2
    a290:	330b      	adds	r3, #11
    a292:	191b      	adds	r3, r3, r4
    a294:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    a296:	5d03      	ldrb	r3, [r0, r4]
    a298:	3b15      	subs	r3, #21
    a29a:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    a29c:	3213      	adds	r2, #19
    a29e:	1912      	adds	r2, r2, r4
    a2a0:	608a      	str	r2, [r1, #8]
    a2a2:	e043      	b.n	a32c <MiMAC_ReceivedPacket+0x230>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    a2a4:	0211      	lsls	r1, r2, #8
    a2a6:	1889      	adds	r1, r1, r2
    a2a8:	4b64      	ldr	r3, [pc, #400]	; (a43c <MiMAC_ReceivedPacket+0x340>)
    a2aa:	185b      	adds	r3, r3, r1
    a2ac:	7a1b      	ldrb	r3, [r3, #8]
    a2ae:	2bff      	cmp	r3, #255	; 0xff
    a2b0:	d1d9      	bne.n	a266 <MiMAC_ReceivedPacket+0x16a>
				MACRxPacket.flags.bits.broadcast = 1;
    a2b2:	4965      	ldr	r1, [pc, #404]	; (a448 <MiMAC_ReceivedPacket+0x34c>)
    a2b4:	780b      	ldrb	r3, [r1, #0]
    a2b6:	2404      	movs	r4, #4
    a2b8:	4323      	orrs	r3, r4
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    a2ba:	2480      	movs	r4, #128	; 0x80
    a2bc:	4264      	negs	r4, r4
    a2be:	4323      	orrs	r3, r4
    a2c0:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    a2c2:	2d00      	cmp	r5, #0
    a2c4:	d000      	beq.n	a2c8 <MiMAC_ReceivedPacket+0x1cc>
    a2c6:	e264      	b.n	a792 <MiMAC_ReceivedPacket+0x696>
    a2c8:	e7d6      	b.n	a278 <MiMAC_ReceivedPacket+0x17c>
					MiMAC_DiscardPacket();
    a2ca:	4b60      	ldr	r3, [pc, #384]	; (a44c <MiMAC_ReceivedPacket+0x350>)
    a2cc:	4798      	blx	r3
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a2ce:	4b5a      	ldr	r3, [pc, #360]	; (a438 <MiMAC_ReceivedPacket+0x33c>)
    a2d0:	781a      	ldrb	r2, [r3, #0]
    a2d2:	0213      	lsls	r3, r2, #8
    a2d4:	189a      	adds	r2, r3, r2
    a2d6:	4b59      	ldr	r3, [pc, #356]	; (a43c <MiMAC_ReceivedPacket+0x340>)
    a2d8:	189b      	adds	r3, r3, r2
    a2da:	789b      	ldrb	r3, [r3, #2]
					return false;
    a2dc:	2400      	movs	r4, #0
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a2de:	069b      	lsls	r3, r3, #26
    a2e0:	d400      	bmi.n	a2e4 <MiMAC_ReceivedPacket+0x1e8>
    a2e2:	e727      	b.n	a134 <MiMAC_ReceivedPacket+0x38>
						MiRadioReceiveParam.action = RECEIVE_START;					
    a2e4:	a807      	add	r0, sp, #28
    a2e6:	2300      	movs	r3, #0
    a2e8:	7003      	strb	r3, [r0, #0]
						MiRadioReceiveParam.rxWindowSize = 0;
    a2ea:	8043      	strh	r3, [r0, #2]
						RADIO_Receive(&MiRadioReceiveParam);
    a2ec:	4b58      	ldr	r3, [pc, #352]	; (a450 <MiMAC_ReceivedPacket+0x354>)
    a2ee:	4798      	blx	r3
    a2f0:	e720      	b.n	a134 <MiMAC_ReceivedPacket+0x38>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    a2f2:	4955      	ldr	r1, [pc, #340]	; (a448 <MiMAC_ReceivedPacket+0x34c>)
    a2f4:	780c      	ldrb	r4, [r1, #0]
    a2f6:	2380      	movs	r3, #128	; 0x80
    a2f8:	425b      	negs	r3, r3
    a2fa:	4323      	orrs	r3, r4
    a2fc:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    a2fe:	2d00      	cmp	r5, #0
    a300:	d133      	bne.n	a36a <MiMAC_ReceivedPacket+0x26e>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[13];
    a302:	4951      	ldr	r1, [pc, #324]	; (a448 <MiMAC_ReceivedPacket+0x34c>)
    a304:	4c4d      	ldr	r4, [pc, #308]	; (a43c <MiMAC_ReceivedPacket+0x340>)
    a306:	0213      	lsls	r3, r2, #8
    a308:	1898      	adds	r0, r3, r2
    a30a:	1823      	adds	r3, r4, r0
    a30c:	7bdd      	ldrb	r5, [r3, #15]
    a30e:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[14];
    a310:	7c1b      	ldrb	r3, [r3, #16]
    a312:	744b      	strb	r3, [r1, #17]
    a314:	0213      	lsls	r3, r2, #8
    a316:	189a      	adds	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[15]);
    a318:	0013      	movs	r3, r2
    a31a:	3311      	adds	r3, #17
    a31c:	191b      	adds	r3, r3, r4
    a31e:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 27;
    a320:	5d03      	ldrb	r3, [r0, r4]
    a322:	3b1b      	subs	r3, #27
    a324:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[23]);
    a326:	3219      	adds	r2, #25
    a328:	1912      	adds	r2, r2, r4
    a32a:	608a      	str	r2, [r1, #8]
		if (RxBuffer[BankIndex].Payload[0] & 0x08)
    a32c:	4b42      	ldr	r3, [pc, #264]	; (a438 <MiMAC_ReceivedPacket+0x33c>)
    a32e:	781a      	ldrb	r2, [r3, #0]
    a330:	0213      	lsls	r3, r2, #8
    a332:	189a      	adds	r2, r3, r2
    a334:	4b41      	ldr	r3, [pc, #260]	; (a43c <MiMAC_ReceivedPacket+0x340>)
    a336:	189b      	adds	r3, r3, r2
    a338:	789b      	ldrb	r3, [r3, #2]
    a33a:	071b      	lsls	r3, r3, #28
    a33c:	d400      	bmi.n	a340 <MiMAC_ReceivedPacket+0x244>
    a33e:	e762      	b.n	a206 <MiMAC_ReceivedPacket+0x10a>
			FrameCounter.v[0] = MACRxPacket.Payload[0];
    a340:	4b41      	ldr	r3, [pc, #260]	; (a448 <MiMAC_ReceivedPacket+0x34c>)
    a342:	689b      	ldr	r3, [r3, #8]
			FrameCounter.v[1] = MACRxPacket.Payload[1];
    a344:	785f      	ldrb	r7, [r3, #1]
    a346:	023f      	lsls	r7, r7, #8
    a348:	781a      	ldrb	r2, [r3, #0]
    a34a:	4317      	orrs	r7, r2
			FrameCounter.v[2] = MACRxPacket.Payload[2];
    a34c:	789a      	ldrb	r2, [r3, #2]
    a34e:	0412      	lsls	r2, r2, #16
    a350:	4940      	ldr	r1, [pc, #256]	; (a454 <MiMAC_ReceivedPacket+0x358>)
    a352:	400f      	ands	r7, r1
    a354:	4317      	orrs	r7, r2
			FrameCounter.v[3] = MACRxPacket.Payload[3];
    a356:	78db      	ldrb	r3, [r3, #3]
    a358:	061b      	lsls	r3, r3, #24
    a35a:	023f      	lsls	r7, r7, #8
    a35c:	0a3f      	lsrs	r7, r7, #8
    a35e:	431f      	orrs	r7, r3
    a360:	4d3d      	ldr	r5, [pc, #244]	; (a458 <MiMAC_ReceivedPacket+0x35c>)
    a362:	2600      	movs	r6, #0
			for (i = 0; i < CONNECTION_SIZE; i++)
    a364:	2400      	movs	r4, #0
				if ((ConnectionTable[i].status.bits.isValid) &&
    a366:	46a8      	mov	r8, r5
    a368:	e141      	b.n	a5ee <MiMAC_ReceivedPacket+0x4f2>
				if(!(isSameAddress((uint8_t *)&DevIEEEaddr, &RxBuffer[BankIndex].Payload[5])))
    a36a:	0211      	lsls	r1, r2, #8
    a36c:	1889      	adds	r1, r1, r2
    a36e:	3107      	adds	r1, #7
    a370:	4a32      	ldr	r2, [pc, #200]	; (a43c <MiMAC_ReceivedPacket+0x340>)
    a372:	1889      	adds	r1, r1, r2
    a374:	4839      	ldr	r0, [pc, #228]	; (a45c <MiMAC_ReceivedPacket+0x360>)
    a376:	4b3a      	ldr	r3, [pc, #232]	; (a460 <MiMAC_ReceivedPacket+0x364>)
    a378:	4798      	blx	r3
    a37a:	1e04      	subs	r4, r0, #0
    a37c:	d015      	beq.n	a3aa <MiMAC_ReceivedPacket+0x2ae>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    a37e:	4b2e      	ldr	r3, [pc, #184]	; (a438 <MiMAC_ReceivedPacket+0x33c>)
    a380:	7818      	ldrb	r0, [r3, #0]
    a382:	4a31      	ldr	r2, [pc, #196]	; (a448 <MiMAC_ReceivedPacket+0x34c>)
    a384:	492d      	ldr	r1, [pc, #180]	; (a43c <MiMAC_ReceivedPacket+0x340>)
    a386:	0203      	lsls	r3, r0, #8
    a388:	181b      	adds	r3, r3, r0
    a38a:	18c8      	adds	r0, r1, r3
    a38c:	7944      	ldrb	r4, [r0, #5]
    a38e:	7414      	strb	r4, [r2, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    a390:	7980      	ldrb	r0, [r0, #6]
    a392:	7450      	strb	r0, [r2, #17]
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
    a394:	0018      	movs	r0, r3
    a396:	300f      	adds	r0, #15
    a398:	1840      	adds	r0, r0, r1
    a39a:	6050      	str	r0, [r2, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 25;
    a39c:	5c58      	ldrb	r0, [r3, r1]
    a39e:	3819      	subs	r0, #25
    a3a0:	7310      	strb	r0, [r2, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[21]);
    a3a2:	3317      	adds	r3, #23
    a3a4:	185b      	adds	r3, r3, r1
    a3a6:	6093      	str	r3, [r2, #8]
    a3a8:	e7c0      	b.n	a32c <MiMAC_ReceivedPacket+0x230>
					MiMAC_DiscardPacket();
    a3aa:	4b28      	ldr	r3, [pc, #160]	; (a44c <MiMAC_ReceivedPacket+0x350>)
    a3ac:	4798      	blx	r3
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a3ae:	4b22      	ldr	r3, [pc, #136]	; (a438 <MiMAC_ReceivedPacket+0x33c>)
    a3b0:	781a      	ldrb	r2, [r3, #0]
    a3b2:	0213      	lsls	r3, r2, #8
    a3b4:	189a      	adds	r2, r3, r2
    a3b6:	4b21      	ldr	r3, [pc, #132]	; (a43c <MiMAC_ReceivedPacket+0x340>)
    a3b8:	189b      	adds	r3, r3, r2
    a3ba:	789b      	ldrb	r3, [r3, #2]
    a3bc:	069b      	lsls	r3, r3, #26
    a3be:	d400      	bmi.n	a3c2 <MiMAC_ReceivedPacket+0x2c6>
    a3c0:	e6b8      	b.n	a134 <MiMAC_ReceivedPacket+0x38>
						MiRadioReceiveParam.action = RECEIVE_START;					
    a3c2:	a807      	add	r0, sp, #28
    a3c4:	2300      	movs	r3, #0
    a3c6:	7003      	strb	r3, [r0, #0]
						MiRadioReceiveParam.rxWindowSize = 0;
    a3c8:	8043      	strh	r3, [r0, #2]
						RADIO_Receive(&MiRadioReceiveParam);
    a3ca:	4b21      	ldr	r3, [pc, #132]	; (a450 <MiMAC_ReceivedPacket+0x354>)
    a3cc:	4798      	blx	r3
    a3ce:	e6b1      	b.n	a134 <MiMAC_ReceivedPacket+0x38>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    a3d0:	0211      	lsls	r1, r2, #8
    a3d2:	1889      	adds	r1, r1, r2
    a3d4:	4b19      	ldr	r3, [pc, #100]	; (a43c <MiMAC_ReceivedPacket+0x340>)
    a3d6:	185b      	adds	r3, r3, r1
    a3d8:	79dc      	ldrb	r4, [r3, #7]
    a3da:	2cff      	cmp	r4, #255	; 0xff
    a3dc:	d01f      	beq.n	a41e <MiMAC_ReceivedPacket+0x322>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    a3de:	4b1a      	ldr	r3, [pc, #104]	; (a448 <MiMAC_ReceivedPacket+0x34c>)
    a3e0:	781e      	ldrb	r6, [r3, #0]
    a3e2:	2180      	movs	r1, #128	; 0x80
    a3e4:	4249      	negs	r1, r1
    a3e6:	4331      	orrs	r1, r6
    a3e8:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    a3ea:	2101      	movs	r1, #1
    a3ec:	73d9      	strb	r1, [r3, #15]
				if (bIntraPAN == false)
    a3ee:	2d00      	cmp	r5, #0
    a3f0:	d138      	bne.n	a464 <MiMAC_ReceivedPacket+0x368>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    a3f2:	0019      	movs	r1, r3
    a3f4:	4c11      	ldr	r4, [pc, #68]	; (a43c <MiMAC_ReceivedPacket+0x340>)
    a3f6:	0203      	lsls	r3, r0, #8
    a3f8:	1818      	adds	r0, r3, r0
    a3fa:	1823      	adds	r3, r4, r0
    a3fc:	7a5d      	ldrb	r5, [r3, #9]
    a3fe:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    a400:	7a9b      	ldrb	r3, [r3, #10]
    a402:	744b      	strb	r3, [r1, #17]
    a404:	0213      	lsls	r3, r2, #8
    a406:	189a      	adds	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    a408:	0013      	movs	r3, r2
    a40a:	330b      	adds	r3, #11
    a40c:	191b      	adds	r3, r3, r4
    a40e:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 15;
    a410:	5d03      	ldrb	r3, [r0, r4]
    a412:	3b0f      	subs	r3, #15
    a414:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[11]);
    a416:	320d      	adds	r2, #13
    a418:	1912      	adds	r2, r2, r4
    a41a:	608a      	str	r2, [r1, #8]
    a41c:	e6e9      	b.n	a1f2 <MiMAC_ReceivedPacket+0xf6>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    a41e:	0211      	lsls	r1, r2, #8
    a420:	1889      	adds	r1, r1, r2
    a422:	4b06      	ldr	r3, [pc, #24]	; (a43c <MiMAC_ReceivedPacket+0x340>)
    a424:	185b      	adds	r3, r3, r1
    a426:	7a1b      	ldrb	r3, [r3, #8]
    a428:	2bff      	cmp	r3, #255	; 0xff
    a42a:	d1d8      	bne.n	a3de <MiMAC_ReceivedPacket+0x2e2>
					MACRxPacket.flags.bits.broadcast = 1;
    a42c:	4906      	ldr	r1, [pc, #24]	; (a448 <MiMAC_ReceivedPacket+0x34c>)
    a42e:	780b      	ldrb	r3, [r1, #0]
    a430:	2604      	movs	r6, #4
    a432:	4333      	orrs	r3, r6
    a434:	700b      	strb	r3, [r1, #0]
    a436:	e7d2      	b.n	a3de <MiMAC_ReceivedPacket+0x2e2>
    a438:	2000000f 	.word	0x2000000f
    a43c:	20002264 	.word	0x20002264
    a440:	00000202 	.word	0x00000202
    a444:	00000303 	.word	0x00000303
    a448:	200026ac 	.word	0x200026ac
    a44c:	0000a07d 	.word	0x0000a07d
    a450:	0000f9c1 	.word	0x0000f9c1
    a454:	ff00ffff 	.word	0xff00ffff
    a458:	20002674 	.word	0x20002674
    a45c:	2000225c 	.word	0x2000225c
    a460:	0000aef1 	.word	0x0000aef1
					if (!(((RxBuffer[BankIndex].Payload[5] == 0xFF) & (RxBuffer[BankIndex].Payload[6] == 0xFF)) ||((RxBuffer[BankIndex].Payload[5] == DevShortAddress[0]) & (RxBuffer[BankIndex].Payload[6] == DevShortAddress[1]))) )
    a464:	0201      	lsls	r1, r0, #8
    a466:	1809      	adds	r1, r1, r0
    a468:	4bd7      	ldr	r3, [pc, #860]	; (a7c8 <MiMAC_ReceivedPacket+0x6cc>)
    a46a:	185b      	adds	r3, r3, r1
    a46c:	7a1b      	ldrb	r3, [r3, #8]
    a46e:	2cff      	cmp	r4, #255	; 0xff
    a470:	d117      	bne.n	a4a2 <MiMAC_ReceivedPacket+0x3a6>
    a472:	2bff      	cmp	r3, #255	; 0xff
    a474:	d115      	bne.n	a4a2 <MiMAC_ReceivedPacket+0x3a6>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    a476:	49d5      	ldr	r1, [pc, #852]	; (a7cc <MiMAC_ReceivedPacket+0x6d0>)
    a478:	4cd3      	ldr	r4, [pc, #844]	; (a7c8 <MiMAC_ReceivedPacket+0x6cc>)
    a47a:	0203      	lsls	r3, r0, #8
    a47c:	1818      	adds	r0, r3, r0
    a47e:	1823      	adds	r3, r4, r0
    a480:	795d      	ldrb	r5, [r3, #5]
    a482:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    a484:	799b      	ldrb	r3, [r3, #6]
    a486:	744b      	strb	r3, [r1, #17]
    a488:	0213      	lsls	r3, r2, #8
    a48a:	189a      	adds	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    a48c:	0013      	movs	r3, r2
    a48e:	3309      	adds	r3, #9
    a490:	191b      	adds	r3, r3, r4
    a492:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 13;
    a494:	5d03      	ldrb	r3, [r0, r4]
    a496:	3b0d      	subs	r3, #13
    a498:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[9]);
    a49a:	320b      	adds	r2, #11
    a49c:	1912      	adds	r2, r2, r4
    a49e:	608a      	str	r2, [r1, #8]
    a4a0:	e6a7      	b.n	a1f2 <MiMAC_ReceivedPacket+0xf6>
					if (!(((RxBuffer[BankIndex].Payload[5] == 0xFF) & (RxBuffer[BankIndex].Payload[6] == 0xFF)) ||((RxBuffer[BankIndex].Payload[5] == DevShortAddress[0]) & (RxBuffer[BankIndex].Payload[6] == DevShortAddress[1]))) )
    a4a2:	49cb      	ldr	r1, [pc, #812]	; (a7d0 <MiMAC_ReceivedPacket+0x6d4>)
    a4a4:	7809      	ldrb	r1, [r1, #0]
    a4a6:	42a1      	cmp	r1, r4
    a4a8:	d103      	bne.n	a4b2 <MiMAC_ReceivedPacket+0x3b6>
    a4aa:	49c9      	ldr	r1, [pc, #804]	; (a7d0 <MiMAC_ReceivedPacket+0x6d4>)
    a4ac:	7849      	ldrb	r1, [r1, #1]
    a4ae:	4299      	cmp	r1, r3
    a4b0:	d0e1      	beq.n	a476 <MiMAC_ReceivedPacket+0x37a>
						MiMAC_DiscardPacket();
    a4b2:	4bc8      	ldr	r3, [pc, #800]	; (a7d4 <MiMAC_ReceivedPacket+0x6d8>)
    a4b4:	4798      	blx	r3
						if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a4b6:	4bc8      	ldr	r3, [pc, #800]	; (a7d8 <MiMAC_ReceivedPacket+0x6dc>)
    a4b8:	781a      	ldrb	r2, [r3, #0]
    a4ba:	0213      	lsls	r3, r2, #8
    a4bc:	189a      	adds	r2, r3, r2
    a4be:	4bc2      	ldr	r3, [pc, #776]	; (a7c8 <MiMAC_ReceivedPacket+0x6cc>)
    a4c0:	189b      	adds	r3, r3, r2
    a4c2:	789b      	ldrb	r3, [r3, #2]
						return false;
    a4c4:	2400      	movs	r4, #0
						if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a4c6:	069b      	lsls	r3, r3, #26
    a4c8:	d400      	bmi.n	a4cc <MiMAC_ReceivedPacket+0x3d0>
    a4ca:	e633      	b.n	a134 <MiMAC_ReceivedPacket+0x38>
							MiRadioReceiveParam.action = RECEIVE_START;	
    a4cc:	a807      	add	r0, sp, #28
    a4ce:	2300      	movs	r3, #0
    a4d0:	7003      	strb	r3, [r0, #0]
							MiRadioReceiveParam.rxWindowSize = 0;
    a4d2:	8043      	strh	r3, [r0, #2]
							RADIO_Receive(&MiRadioReceiveParam);
    a4d4:	4bc1      	ldr	r3, [pc, #772]	; (a7dc <MiMAC_ReceivedPacket+0x6e0>)
    a4d6:	4798      	blx	r3
    a4d8:	e62c      	b.n	a134 <MiMAC_ReceivedPacket+0x38>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    a4da:	4bbc      	ldr	r3, [pc, #752]	; (a7cc <MiMAC_ReceivedPacket+0x6d0>)
    a4dc:	781c      	ldrb	r4, [r3, #0]
    a4de:	2180      	movs	r1, #128	; 0x80
    a4e0:	4249      	negs	r1, r1
    a4e2:	4321      	orrs	r1, r4
    a4e4:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    a4e6:	2101      	movs	r1, #1
    a4e8:	73d9      	strb	r1, [r3, #15]
				if (bIntraPAN) // check if it is intraPAN
    a4ea:	2d00      	cmp	r5, #0
    a4ec:	d115      	bne.n	a51a <MiMAC_ReceivedPacket+0x41e>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[12];
    a4ee:	49b7      	ldr	r1, [pc, #732]	; (a7cc <MiMAC_ReceivedPacket+0x6d0>)
    a4f0:	4cb5      	ldr	r4, [pc, #724]	; (a7c8 <MiMAC_ReceivedPacket+0x6cc>)
    a4f2:	0213      	lsls	r3, r2, #8
    a4f4:	1898      	adds	r0, r3, r2
    a4f6:	1823      	adds	r3, r4, r0
    a4f8:	7b9d      	ldrb	r5, [r3, #14]
    a4fa:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[13];
    a4fc:	7bdb      	ldrb	r3, [r3, #15]
    a4fe:	744b      	strb	r3, [r1, #17]
    a500:	0213      	lsls	r3, r2, #8
    a502:	189a      	adds	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[14]);
    a504:	0013      	movs	r3, r2
    a506:	3310      	adds	r3, #16
    a508:	191b      	adds	r3, r3, r4
    a50a:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    a50c:	5d03      	ldrb	r3, [r0, r4]
    a50e:	3b15      	subs	r3, #21
    a510:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    a512:	3213      	adds	r2, #19
    a514:	1912      	adds	r2, r2, r4
    a516:	608a      	str	r2, [r1, #8]
    a518:	e66b      	b.n	a1f2 <MiMAC_ReceivedPacket+0xf6>
					if(!(isSameAddress((uint8_t *)&DevIEEEaddr, &RxBuffer[BankIndex].Payload[5])))
    a51a:	0211      	lsls	r1, r2, #8
    a51c:	1889      	adds	r1, r1, r2
    a51e:	3107      	adds	r1, #7
    a520:	4aa9      	ldr	r2, [pc, #676]	; (a7c8 <MiMAC_ReceivedPacket+0x6cc>)
    a522:	1889      	adds	r1, r1, r2
    a524:	48ae      	ldr	r0, [pc, #696]	; (a7e0 <MiMAC_ReceivedPacket+0x6e4>)
    a526:	4baf      	ldr	r3, [pc, #700]	; (a7e4 <MiMAC_ReceivedPacket+0x6e8>)
    a528:	4798      	blx	r3
    a52a:	1e04      	subs	r4, r0, #0
    a52c:	d011      	beq.n	a552 <MiMAC_ReceivedPacket+0x456>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    a52e:	4baa      	ldr	r3, [pc, #680]	; (a7d8 <MiMAC_ReceivedPacket+0x6dc>)
    a530:	7818      	ldrb	r0, [r3, #0]
    a532:	4aa6      	ldr	r2, [pc, #664]	; (a7cc <MiMAC_ReceivedPacket+0x6d0>)
    a534:	49a4      	ldr	r1, [pc, #656]	; (a7c8 <MiMAC_ReceivedPacket+0x6cc>)
    a536:	0203      	lsls	r3, r0, #8
    a538:	181b      	adds	r3, r3, r0
    a53a:	18c8      	adds	r0, r1, r3
    a53c:	7944      	ldrb	r4, [r0, #5]
    a53e:	7414      	strb	r4, [r2, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    a540:	7980      	ldrb	r0, [r0, #6]
    a542:	7450      	strb	r0, [r2, #17]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    a544:	5c58      	ldrb	r0, [r3, r1]
    a546:	3813      	subs	r0, #19
    a548:	7310      	strb	r0, [r2, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    a54a:	3311      	adds	r3, #17
    a54c:	185b      	adds	r3, r3, r1
    a54e:	6093      	str	r3, [r2, #8]
    a550:	e64f      	b.n	a1f2 <MiMAC_ReceivedPacket+0xf6>
						MiMAC_DiscardPacket();
    a552:	4ba0      	ldr	r3, [pc, #640]	; (a7d4 <MiMAC_ReceivedPacket+0x6d8>)
    a554:	4798      	blx	r3
						if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a556:	4ba0      	ldr	r3, [pc, #640]	; (a7d8 <MiMAC_ReceivedPacket+0x6dc>)
    a558:	781a      	ldrb	r2, [r3, #0]
    a55a:	0213      	lsls	r3, r2, #8
    a55c:	189a      	adds	r2, r3, r2
    a55e:	4b9a      	ldr	r3, [pc, #616]	; (a7c8 <MiMAC_ReceivedPacket+0x6cc>)
    a560:	189b      	adds	r3, r3, r2
    a562:	789b      	ldrb	r3, [r3, #2]
    a564:	069b      	lsls	r3, r3, #26
    a566:	d400      	bmi.n	a56a <MiMAC_ReceivedPacket+0x46e>
    a568:	e5e4      	b.n	a134 <MiMAC_ReceivedPacket+0x38>
							MiRadioReceiveParam.action = RECEIVE_START;	
    a56a:	a807      	add	r0, sp, #28
    a56c:	2300      	movs	r3, #0
    a56e:	7003      	strb	r3, [r0, #0]
							MiRadioReceiveParam.rxWindowSize = 0;
    a570:	8043      	strh	r3, [r0, #2]
							RADIO_Receive(&MiRadioReceiveParam);
    a572:	4b9a      	ldr	r3, [pc, #616]	; (a7dc <MiMAC_ReceivedPacket+0x6e0>)
    a574:	4798      	blx	r3
    a576:	e5dd      	b.n	a134 <MiMAC_ReceivedPacket+0x38>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    a578:	0211      	lsls	r1, r2, #8
    a57a:	1889      	adds	r1, r1, r2
    a57c:	4b92      	ldr	r3, [pc, #584]	; (a7c8 <MiMAC_ReceivedPacket+0x6cc>)
    a57e:	185b      	adds	r3, r3, r1
    a580:	79db      	ldrb	r3, [r3, #7]
    a582:	2bff      	cmp	r3, #255	; 0xff
    a584:	d00c      	beq.n	a5a0 <MiMAC_ReceivedPacket+0x4a4>
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 10;
    a586:	4991      	ldr	r1, [pc, #580]	; (a7cc <MiMAC_ReceivedPacket+0x6d0>)
    a588:	4c8f      	ldr	r4, [pc, #572]	; (a7c8 <MiMAC_ReceivedPacket+0x6cc>)
    a58a:	0203      	lsls	r3, r0, #8
    a58c:	1818      	adds	r0, r3, r0
    a58e:	5d03      	ldrb	r3, [r0, r4]
    a590:	3b0a      	subs	r3, #10
    a592:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    a594:	0213      	lsls	r3, r2, #8
    a596:	189a      	adds	r2, r3, r2
    a598:	3209      	adds	r2, #9
    a59a:	1912      	adds	r2, r2, r4
    a59c:	608a      	str	r2, [r1, #8]
			break;
    a59e:	e628      	b.n	a1f2 <MiMAC_ReceivedPacket+0xf6>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    a5a0:	0211      	lsls	r1, r2, #8
    a5a2:	1889      	adds	r1, r1, r2
    a5a4:	4b88      	ldr	r3, [pc, #544]	; (a7c8 <MiMAC_ReceivedPacket+0x6cc>)
    a5a6:	185b      	adds	r3, r3, r1
    a5a8:	7a1b      	ldrb	r3, [r3, #8]
    a5aa:	2bff      	cmp	r3, #255	; 0xff
    a5ac:	d1eb      	bne.n	a586 <MiMAC_ReceivedPacket+0x48a>
					MACRxPacket.flags.bits.broadcast = 1;
    a5ae:	4987      	ldr	r1, [pc, #540]	; (a7cc <MiMAC_ReceivedPacket+0x6d0>)
    a5b0:	780b      	ldrb	r3, [r1, #0]
    a5b2:	2404      	movs	r4, #4
    a5b4:	4323      	orrs	r3, r4
    a5b6:	700b      	strb	r3, [r1, #0]
    a5b8:	e7e5      	b.n	a586 <MiMAC_ReceivedPacket+0x48a>
				MiMAC_DiscardPacket();
    a5ba:	4b86      	ldr	r3, [pc, #536]	; (a7d4 <MiMAC_ReceivedPacket+0x6d8>)
    a5bc:	4798      	blx	r3
				if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a5be:	4b86      	ldr	r3, [pc, #536]	; (a7d8 <MiMAC_ReceivedPacket+0x6dc>)
    a5c0:	781a      	ldrb	r2, [r3, #0]
    a5c2:	0213      	lsls	r3, r2, #8
    a5c4:	189a      	adds	r2, r3, r2
    a5c6:	4b80      	ldr	r3, [pc, #512]	; (a7c8 <MiMAC_ReceivedPacket+0x6cc>)
    a5c8:	189b      	adds	r3, r3, r2
    a5ca:	789b      	ldrb	r3, [r3, #2]
    a5cc:	069b      	lsls	r3, r3, #26
    a5ce:	d401      	bmi.n	a5d4 <MiMAC_ReceivedPacket+0x4d8>
				return false;
    a5d0:	2400      	movs	r4, #0
    a5d2:	e5af      	b.n	a134 <MiMAC_ReceivedPacket+0x38>
					MiRadioReceiveParam.action = RECEIVE_START;					
    a5d4:	a807      	add	r0, sp, #28
    a5d6:	2300      	movs	r3, #0
    a5d8:	7003      	strb	r3, [r0, #0]
					MiRadioReceiveParam.rxWindowSize = 0;
    a5da:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&MiRadioReceiveParam);
    a5dc:	4b7f      	ldr	r3, [pc, #508]	; (a7dc <MiMAC_ReceivedPacket+0x6e0>)
    a5de:	4798      	blx	r3
    a5e0:	e7f6      	b.n	a5d0 <MiMAC_ReceivedPacket+0x4d4>
			for (i = 0; i < CONNECTION_SIZE; i++)
    a5e2:	3401      	adds	r4, #1
    a5e4:	b2e4      	uxtb	r4, r4
    a5e6:	3601      	adds	r6, #1
    a5e8:	350a      	adds	r5, #10
    a5ea:	2c05      	cmp	r4, #5
    a5ec:	d014      	beq.n	a618 <MiMAC_ReceivedPacket+0x51c>
				if ((ConnectionTable[i].status.bits.isValid) &&
    a5ee:	00b3      	lsls	r3, r6, #2
    a5f0:	199b      	adds	r3, r3, r6
    a5f2:	005b      	lsls	r3, r3, #1
    a5f4:	4443      	add	r3, r8
    a5f6:	7a1b      	ldrb	r3, [r3, #8]
    a5f8:	09db      	lsrs	r3, r3, #7
    a5fa:	d0f2      	beq.n	a5e2 <MiMAC_ReceivedPacket+0x4e6>
				isSameAddress(ConnectionTable[i].Address, MACRxPacket.SourceAddress))
    a5fc:	4b73      	ldr	r3, [pc, #460]	; (a7cc <MiMAC_ReceivedPacket+0x6d0>)
    a5fe:	6859      	ldr	r1, [r3, #4]
    a600:	0028      	movs	r0, r5
    a602:	4b78      	ldr	r3, [pc, #480]	; (a7e4 <MiMAC_ReceivedPacket+0x6e8>)
    a604:	4798      	blx	r3
				if ((ConnectionTable[i].status.bits.isValid) &&
    a606:	2800      	cmp	r0, #0
    a608:	d0eb      	beq.n	a5e2 <MiMAC_ReceivedPacket+0x4e6>
			if (i < CONNECTION_SIZE)
    a60a:	2c04      	cmp	r4, #4
    a60c:	d804      	bhi.n	a618 <MiMAC_ReceivedPacket+0x51c>
				if (IncomingFrameCounter[i].Val >= FrameCounter.Val)	// drop the packet if saved frame counter (IncomingFrameCounter) is equal or greater than the lastest received packet (FrameCounter.Val)
    a60e:	00a3      	lsls	r3, r4, #2
    a610:	4a75      	ldr	r2, [pc, #468]	; (a7e8 <MiMAC_ReceivedPacket+0x6ec>)
    a612:	589b      	ldr	r3, [r3, r2]
    a614:	42bb      	cmp	r3, r7
    a616:	d22d      	bcs.n	a674 <MiMAC_ReceivedPacket+0x578>
			MACRxPacket.PayloadLen -= 5;  // used to 5 for frame counter now -4 also added for MIC integrity
    a618:	496c      	ldr	r1, [pc, #432]	; (a7cc <MiMAC_ReceivedPacket+0x6d0>)
    a61a:	7b0b      	ldrb	r3, [r1, #12]
    a61c:	3b05      	subs	r3, #5
    a61e:	b2db      	uxtb	r3, r3
    a620:	730b      	strb	r3, [r1, #12]
			received_mic_values[0] = MACRxPacket.Payload[MACRxPacket.PayloadLen+1];
    a622:	6888      	ldr	r0, [r1, #8]
    a624:	18c3      	adds	r3, r0, r3
    a626:	785d      	ldrb	r5, [r3, #1]
    a628:	4a70      	ldr	r2, [pc, #448]	; (a7ec <MiMAC_ReceivedPacket+0x6f0>)
    a62a:	7015      	strb	r5, [r2, #0]
			received_mic_values[1] = MACRxPacket.Payload[MACRxPacket.PayloadLen+2];
    a62c:	789d      	ldrb	r5, [r3, #2]
    a62e:	7055      	strb	r5, [r2, #1]
			received_mic_values[2] = MACRxPacket.Payload[MACRxPacket.PayloadLen+3];
    a630:	78dd      	ldrb	r5, [r3, #3]
    a632:	7095      	strb	r5, [r2, #2]
			received_mic_values[3] = MACRxPacket.Payload[MACRxPacket.PayloadLen+4];
    a634:	791b      	ldrb	r3, [r3, #4]
    a636:	70d3      	strb	r3, [r2, #3]
			if (false == DataDecrypt(&(MACRxPacket.Payload[5]), &(MACRxPacket.PayloadLen), MACRxPacket.SourceAddress, FrameCounter, RxBuffer[BankIndex].Payload[0]))
    a638:	684a      	ldr	r2, [r1, #4]
    a63a:	310c      	adds	r1, #12
    a63c:	3005      	adds	r0, #5
    a63e:	4b66      	ldr	r3, [pc, #408]	; (a7d8 <MiMAC_ReceivedPacket+0x6dc>)
    a640:	781d      	ldrb	r5, [r3, #0]
    a642:	022b      	lsls	r3, r5, #8
    a644:	195d      	adds	r5, r3, r5
    a646:	4b60      	ldr	r3, [pc, #384]	; (a7c8 <MiMAC_ReceivedPacket+0x6cc>)
    a648:	195b      	adds	r3, r3, r5
    a64a:	789b      	ldrb	r3, [r3, #2]
    a64c:	9300      	str	r3, [sp, #0]
    a64e:	003b      	movs	r3, r7
    a650:	4d67      	ldr	r5, [pc, #412]	; (a7f0 <MiMAC_ReceivedPacket+0x6f4>)
    a652:	47a8      	blx	r5
    a654:	2800      	cmp	r0, #0
    a656:	d01f      	beq.n	a698 <MiMAC_ReceivedPacket+0x59c>
			if (i < CONNECTION_SIZE)
    a658:	2c04      	cmp	r4, #4
    a65a:	d802      	bhi.n	a662 <MiMAC_ReceivedPacket+0x566>
				IncomingFrameCounter[i].Val = FrameCounter.Val;
    a65c:	00a4      	lsls	r4, r4, #2
    a65e:	4b62      	ldr	r3, [pc, #392]	; (a7e8 <MiMAC_ReceivedPacket+0x6ec>)
    a660:	50e7      	str	r7, [r4, r3]
			MACRxPacket.Payload = &(MACRxPacket.Payload[5]);
    a662:	4b5a      	ldr	r3, [pc, #360]	; (a7cc <MiMAC_ReceivedPacket+0x6d0>)
    a664:	689a      	ldr	r2, [r3, #8]
    a666:	3205      	adds	r2, #5
    a668:	609a      	str	r2, [r3, #8]
			MACRxPacket.flags.bits.secEn = 1;
    a66a:	781a      	ldrb	r2, [r3, #0]
    a66c:	2108      	movs	r1, #8
    a66e:	430a      	orrs	r2, r1
    a670:	701a      	strb	r2, [r3, #0]
    a672:	e5c8      	b.n	a206 <MiMAC_ReceivedPacket+0x10a>
					MiMAC_DiscardPacket();
    a674:	4b57      	ldr	r3, [pc, #348]	; (a7d4 <MiMAC_ReceivedPacket+0x6d8>)
    a676:	4798      	blx	r3
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a678:	4b57      	ldr	r3, [pc, #348]	; (a7d8 <MiMAC_ReceivedPacket+0x6dc>)
    a67a:	781a      	ldrb	r2, [r3, #0]
    a67c:	0213      	lsls	r3, r2, #8
    a67e:	189a      	adds	r2, r3, r2
    a680:	4b51      	ldr	r3, [pc, #324]	; (a7c8 <MiMAC_ReceivedPacket+0x6cc>)
    a682:	189b      	adds	r3, r3, r2
    a684:	789b      	ldrb	r3, [r3, #2]
    a686:	069b      	lsls	r3, r3, #26
    a688:	d5a2      	bpl.n	a5d0 <MiMAC_ReceivedPacket+0x4d4>
						MiRadioReceiveParam.action = RECEIVE_START;					
    a68a:	a807      	add	r0, sp, #28
    a68c:	2300      	movs	r3, #0
    a68e:	7003      	strb	r3, [r0, #0]
						MiRadioReceiveParam.rxWindowSize = 0;
    a690:	8043      	strh	r3, [r0, #2]
						RADIO_Receive(&MiRadioReceiveParam);
    a692:	4b52      	ldr	r3, [pc, #328]	; (a7dc <MiMAC_ReceivedPacket+0x6e0>)
    a694:	4798      	blx	r3
    a696:	e79b      	b.n	a5d0 <MiMAC_ReceivedPacket+0x4d4>
				MiMAC_DiscardPacket();
    a698:	4b4e      	ldr	r3, [pc, #312]	; (a7d4 <MiMAC_ReceivedPacket+0x6d8>)
    a69a:	4798      	blx	r3
				if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a69c:	4b4e      	ldr	r3, [pc, #312]	; (a7d8 <MiMAC_ReceivedPacket+0x6dc>)
    a69e:	781a      	ldrb	r2, [r3, #0]
    a6a0:	0213      	lsls	r3, r2, #8
    a6a2:	189a      	adds	r2, r3, r2
    a6a4:	4b48      	ldr	r3, [pc, #288]	; (a7c8 <MiMAC_ReceivedPacket+0x6cc>)
    a6a6:	189b      	adds	r3, r3, r2
    a6a8:	789b      	ldrb	r3, [r3, #2]
    a6aa:	069b      	lsls	r3, r3, #26
    a6ac:	d590      	bpl.n	a5d0 <MiMAC_ReceivedPacket+0x4d4>
					MiRadioReceiveParam.action = RECEIVE_START;					
    a6ae:	a807      	add	r0, sp, #28
    a6b0:	2300      	movs	r3, #0
    a6b2:	7003      	strb	r3, [r0, #0]
					MiRadioReceiveParam.rxWindowSize = 0;
    a6b4:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&MiRadioReceiveParam);
    a6b6:	4b49      	ldr	r3, [pc, #292]	; (a7dc <MiMAC_ReceivedPacket+0x6e0>)
    a6b8:	4798      	blx	r3
    a6ba:	e789      	b.n	a5d0 <MiMAC_ReceivedPacket+0x4d4>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_DATA;
    a6bc:	4a43      	ldr	r2, [pc, #268]	; (a7cc <MiMAC_ReceivedPacket+0x6d0>)
    a6be:	7813      	ldrb	r3, [r2, #0]
    a6c0:	2403      	movs	r4, #3
    a6c2:	43a3      	bics	r3, r4
    a6c4:	7013      	strb	r3, [r2, #0]
		MACRxPacket.LQIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 2];
    a6c6:	4c41      	ldr	r4, [pc, #260]	; (a7cc <MiMAC_ReceivedPacket+0x6d0>)
    a6c8:	4b3f      	ldr	r3, [pc, #252]	; (a7c8 <MiMAC_ReceivedPacket+0x6cc>)
    a6ca:	0202      	lsls	r2, r0, #8
    a6cc:	1812      	adds	r2, r2, r0
    a6ce:	5cd5      	ldrb	r5, [r2, r3]
    a6d0:	189b      	adds	r3, r3, r2
    a6d2:	5d5a      	ldrb	r2, [r3, r5]
    a6d4:	73a2      	strb	r2, [r4, #14]
		MACRxPacket.RSSIValue = RxBuffer[BankIndex].radioRSSI;				
    a6d6:	785b      	ldrb	r3, [r3, #1]
    a6d8:	7363      	strb	r3, [r4, #13]
		return true;
    a6da:	2401      	movs	r4, #1
		if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a6dc:	068b      	lsls	r3, r1, #26
    a6de:	d400      	bmi.n	a6e2 <MiMAC_ReceivedPacket+0x5e6>
    a6e0:	e528      	b.n	a134 <MiMAC_ReceivedPacket+0x38>
			    tParamAck.flags.Val = 0;
    a6e2:	aa04      	add	r2, sp, #16
    a6e4:	2400      	movs	r4, #0
			    tParamAck.altSrcAddr = 0;
    a6e6:	7254      	strb	r4, [r2, #9]
			    tParamAck.altDestAddr = false;
    a6e8:	7214      	strb	r4, [r2, #8]
 			    tParamAck.flags.bits.sourcePrsnt = 1;
    a6ea:	233e      	movs	r3, #62	; 0x3e
    a6ec:	425b      	negs	r3, r3
    a6ee:	7013      	strb	r3, [r2, #0]
			    tParamAck.DestAddress = MACRxPacket.SourceAddress;
    a6f0:	4b36      	ldr	r3, [pc, #216]	; (a7cc <MiMAC_ReceivedPacket+0x6d0>)
    a6f2:	6859      	ldr	r1, [r3, #4]
    a6f4:	9105      	str	r1, [sp, #20]
			    tParamAck.DestPANID.Val = MACRxPacket.SourcePANID.Val;
    a6f6:	8a1b      	ldrh	r3, [r3, #16]
    a6f8:	8153      	strh	r3, [r2, #10]
			AckBuffer[0] = RxBuffer[BankIndex].Payload[2];	
    a6fa:	4b3e      	ldr	r3, [pc, #248]	; (a7f4 <MiMAC_ReceivedPacket+0x6f8>)
    a6fc:	0205      	lsls	r5, r0, #8
    a6fe:	182d      	adds	r5, r5, r0
    a700:	4831      	ldr	r0, [pc, #196]	; (a7c8 <MiMAC_ReceivedPacket+0x6cc>)
    a702:	1940      	adds	r0, r0, r5
    a704:	7900      	ldrb	r0, [r0, #4]
    a706:	7018      	strb	r0, [r3, #0]
			MiMAC_SendPacket(tParamAck, AckBuffer, 1, 0, NULL);
    a708:	9402      	str	r4, [sp, #8]
    a70a:	9401      	str	r4, [sp, #4]
    a70c:	2001      	movs	r0, #1
    a70e:	9000      	str	r0, [sp, #0]
    a710:	9804      	ldr	r0, [sp, #16]
    a712:	9a06      	ldr	r2, [sp, #24]
    a714:	4c38      	ldr	r4, [pc, #224]	; (a7f8 <MiMAC_ReceivedPacket+0x6fc>)
    a716:	47a0      	blx	r4
		return true;
    a718:	2401      	movs	r4, #1
    a71a:	e50b      	b.n	a134 <MiMAC_ReceivedPacket+0x38>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_COMMAND;
    a71c:	4a2b      	ldr	r2, [pc, #172]	; (a7cc <MiMAC_ReceivedPacket+0x6d0>)
    a71e:	7813      	ldrb	r3, [r2, #0]
    a720:	2403      	movs	r4, #3
    a722:	43a3      	bics	r3, r4
    a724:	2401      	movs	r4, #1
    a726:	4323      	orrs	r3, r4
    a728:	7013      	strb	r3, [r2, #0]
			break;
    a72a:	e7cc      	b.n	a6c6 <MiMAC_ReceivedPacket+0x5ca>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_RESERVE;
    a72c:	4a27      	ldr	r2, [pc, #156]	; (a7cc <MiMAC_ReceivedPacket+0x6d0>)
    a72e:	7813      	ldrb	r3, [r2, #0]
    a730:	2403      	movs	r4, #3
    a732:	4323      	orrs	r3, r4
    a734:	7013      	strb	r3, [r2, #0]
			break;
    a736:	e7c6      	b.n	a6c6 <MiMAC_ReceivedPacket+0x5ca>
				MACRxPacket.flags.bits.packetType = PACKET_TYPE_ACK;
    a738:	4a24      	ldr	r2, [pc, #144]	; (a7cc <MiMAC_ReceivedPacket+0x6d0>)
    a73a:	7813      	ldrb	r3, [r2, #0]
    a73c:	2103      	movs	r1, #3
    a73e:	438b      	bics	r3, r1
    a740:	2102      	movs	r1, #2
    a742:	430b      	orrs	r3, r1
    a744:	7013      	strb	r3, [r2, #0]
				if((AckSeqNum == *(MACRxPacket.Payload))&& (AckReqData))
    a746:	6893      	ldr	r3, [r2, #8]
    a748:	781a      	ldrb	r2, [r3, #0]
    a74a:	4b2c      	ldr	r3, [pc, #176]	; (a7fc <MiMAC_ReceivedPacket+0x700>)
    a74c:	781b      	ldrb	r3, [r3, #0]
    a74e:	429a      	cmp	r2, r3
    a750:	d003      	beq.n	a75a <MiMAC_ReceivedPacket+0x65e>
				MiMAC_DiscardPacket();
    a752:	4b20      	ldr	r3, [pc, #128]	; (a7d4 <MiMAC_ReceivedPacket+0x6d8>)
    a754:	4798      	blx	r3
				return false;
    a756:	2400      	movs	r4, #0
    a758:	e4ec      	b.n	a134 <MiMAC_ReceivedPacket+0x38>
				if((AckSeqNum == *(MACRxPacket.Payload))&& (AckReqData))
    a75a:	4b29      	ldr	r3, [pc, #164]	; (a800 <MiMAC_ReceivedPacket+0x704>)
    a75c:	781b      	ldrb	r3, [r3, #0]
    a75e:	2b00      	cmp	r3, #0
    a760:	d0f7      	beq.n	a752 <MiMAC_ReceivedPacket+0x656>
					DataTxAckTimer.Val = 0;
    a762:	2400      	movs	r4, #0
    a764:	4b27      	ldr	r3, [pc, #156]	; (a804 <MiMAC_ReceivedPacket+0x708>)
    a766:	601c      	str	r4, [r3, #0]
					PHY_DataConf(SUCCESS); 
    a768:	2000      	movs	r0, #0
    a76a:	4b27      	ldr	r3, [pc, #156]	; (a808 <MiMAC_ReceivedPacket+0x70c>)
    a76c:	4798      	blx	r3
					AckReqData = 0;
    a76e:	4b24      	ldr	r3, [pc, #144]	; (a800 <MiMAC_ReceivedPacket+0x704>)
    a770:	701c      	strb	r4, [r3, #0]
    a772:	e7ee      	b.n	a752 <MiMAC_ReceivedPacket+0x656>
				if (!(((RxBuffer[BankIndex].Payload[5] == 0xFF) & (RxBuffer[BankIndex].Payload[6] == 0xFF)) ||((RxBuffer[BankIndex].Payload[5] == DevShortAddress[0]) & (RxBuffer[BankIndex].Payload[6] == DevShortAddress[1]))) )
    a774:	0201      	lsls	r1, r0, #8
    a776:	1809      	adds	r1, r1, r0
    a778:	4b13      	ldr	r3, [pc, #76]	; (a7c8 <MiMAC_ReceivedPacket+0x6cc>)
    a77a:	185b      	adds	r3, r3, r1
    a77c:	4914      	ldr	r1, [pc, #80]	; (a7d0 <MiMAC_ReceivedPacket+0x6d4>)
    a77e:	7849      	ldrb	r1, [r1, #1]
    a780:	7a1b      	ldrb	r3, [r3, #8]
    a782:	4299      	cmp	r1, r3
    a784:	d000      	beq.n	a788 <MiMAC_ReceivedPacket+0x68c>
    a786:	e5a0      	b.n	a2ca <MiMAC_ReceivedPacket+0x1ce>
    a788:	4b11      	ldr	r3, [pc, #68]	; (a7d0 <MiMAC_ReceivedPacket+0x6d4>)
    a78a:	781b      	ldrb	r3, [r3, #0]
    a78c:	42a3      	cmp	r3, r4
    a78e:	d000      	beq.n	a792 <MiMAC_ReceivedPacket+0x696>
    a790:	e59b      	b.n	a2ca <MiMAC_ReceivedPacket+0x1ce>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    a792:	490e      	ldr	r1, [pc, #56]	; (a7cc <MiMAC_ReceivedPacket+0x6d0>)
    a794:	4c0c      	ldr	r4, [pc, #48]	; (a7c8 <MiMAC_ReceivedPacket+0x6cc>)
    a796:	0203      	lsls	r3, r0, #8
    a798:	1818      	adds	r0, r3, r0
    a79a:	1823      	adds	r3, r4, r0
    a79c:	795d      	ldrb	r5, [r3, #5]
    a79e:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    a7a0:	799b      	ldrb	r3, [r3, #6]
    a7a2:	744b      	strb	r3, [r1, #17]
    a7a4:	0213      	lsls	r3, r2, #8
    a7a6:	189a      	adds	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    a7a8:	0013      	movs	r3, r2
    a7aa:	3309      	adds	r3, #9
    a7ac:	191b      	adds	r3, r3, r4
    a7ae:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    a7b0:	5d03      	ldrb	r3, [r0, r4]
    a7b2:	3b13      	subs	r3, #19
    a7b4:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    a7b6:	3211      	adds	r2, #17
    a7b8:	1912      	adds	r2, r2, r4
    a7ba:	608a      	str	r2, [r1, #8]
    a7bc:	e5b6      	b.n	a32c <MiMAC_ReceivedPacket+0x230>
			BankIndex = i;
    a7be:	2200      	movs	r2, #0
    a7c0:	4b05      	ldr	r3, [pc, #20]	; (a7d8 <MiMAC_ReceivedPacket+0x6dc>)
    a7c2:	701a      	strb	r2, [r3, #0]
    a7c4:	e4c1      	b.n	a14a <MiMAC_ReceivedPacket+0x4e>
    a7c6:	46c0      	nop			; (mov r8, r8)
    a7c8:	20002264 	.word	0x20002264
    a7cc:	200026ac 	.word	0x200026ac
    a7d0:	2000266c 	.word	0x2000266c
    a7d4:	0000a07d 	.word	0x0000a07d
    a7d8:	2000000f 	.word	0x2000000f
    a7dc:	0000f9c1 	.word	0x0000f9c1
    a7e0:	2000225c 	.word	0x2000225c
    a7e4:	0000aef1 	.word	0x0000aef1
    a7e8:	200026d4 	.word	0x200026d4
    a7ec:	20002148 	.word	0x20002148
    a7f0:	00009ac1 	.word	0x00009ac1
    a7f4:	2000214c 	.word	0x2000214c
    a7f8:	00009cd5 	.word	0x00009cd5
    a7fc:	20001fe0 	.word	0x20001fe0
    a800:	20000287 	.word	0x20000287
    a804:	20002970 	.word	0x20002970
    a808:	0000a099 	.word	0x0000a099

0000a80c <MiMAC_Task>:

void MiMAC_Task(void)
{
    a80c:	b510      	push	{r4, lr}
  PHY_TaskHandler();
    a80e:	4b0b      	ldr	r3, [pc, #44]	; (a83c <MiMAC_Task+0x30>)
    a810:	4798      	blx	r3
  if(dataConfCallback && dataConfAvailable)
    a812:	4b0b      	ldr	r3, [pc, #44]	; (a840 <MiMAC_Task+0x34>)
    a814:	681b      	ldr	r3, [r3, #0]
    a816:	2b00      	cmp	r3, #0
    a818:	d003      	beq.n	a822 <MiMAC_Task+0x16>
    a81a:	4a0a      	ldr	r2, [pc, #40]	; (a844 <MiMAC_Task+0x38>)
    a81c:	7812      	ldrb	r2, [r2, #0]
    a81e:	2a00      	cmp	r2, #0
    a820:	d100      	bne.n	a824 <MiMAC_Task+0x18>
  {
	  dataConfAvailable = false;
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
  }
}
    a822:	bd10      	pop	{r4, pc}
	  dataConfAvailable = false;
    a824:	2100      	movs	r1, #0
    a826:	4a07      	ldr	r2, [pc, #28]	; (a844 <MiMAC_Task+0x38>)
    a828:	7011      	strb	r1, [r2, #0]
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
    a82a:	4a07      	ldr	r2, [pc, #28]	; (a848 <MiMAC_Task+0x3c>)
    a82c:	6812      	ldr	r2, [r2, #0]
    a82e:	4907      	ldr	r1, [pc, #28]	; (a84c <MiMAC_Task+0x40>)
    a830:	7809      	ldrb	r1, [r1, #0]
    a832:	4807      	ldr	r0, [pc, #28]	; (a850 <MiMAC_Task+0x44>)
    a834:	7800      	ldrb	r0, [r0, #0]
    a836:	4798      	blx	r3
}
    a838:	e7f3      	b.n	a822 <MiMAC_Task+0x16>
    a83a:	46c0      	nop			; (mov r8, r8)
    a83c:	0000acad 	.word	0x0000acad
    a840:	2000028c 	.word	0x2000028c
    a844:	2000028a 	.word	0x2000028a
    a848:	20000294 	.word	0x20000294
    a84c:	20002130 	.word	0x20002130
    a850:	20000290 	.word	0x20000290

0000a854 <phySetChannel>:
}

/*************************************************************************//**
*****************************************************************************/
static void phySetChannel(void)
{
    a854:	b500      	push	{lr}
    a856:	b083      	sub	sp, #12
	uint32_t frequncy_set;
	if(phyChannel) // Based on channel we need to set frequency 
    a858:	4b2f      	ldr	r3, [pc, #188]	; (a918 <phySetChannel+0xc4>)
    a85a:	781b      	ldrb	r3, [r3, #0]
    a85c:	2b00      	cmp	r3, #0
    a85e:	d007      	beq.n	a870 <phySetChannel+0x1c>
	{
		switch(phyChannel)
    a860:	2b19      	cmp	r3, #25
    a862:	d856      	bhi.n	a912 <phySetChannel+0xbe>
    a864:	009b      	lsls	r3, r3, #2
    a866:	4a2d      	ldr	r2, [pc, #180]	; (a91c <phySetChannel+0xc8>)
    a868:	58d3      	ldr	r3, [r2, r3]
    a86a:	469f      	mov	pc, r3
				//break;
			//case 8:
				//frequncy_set = FREQ_786000KHZ;
				//break;
			case 0:
				frequncy_set = FREQ_862000KHZ;
    a86c:	4b2c      	ldr	r3, [pc, #176]	; (a920 <phySetChannel+0xcc>)
    a86e:	9301      	str	r3, [sp, #4]
				break;				
																									
		}
	}
		
	if(RADIO_SetAttr(CHANNEL_FREQUENCY,(void *)&frequncy_set) == 0)  
    a870:	a901      	add	r1, sp, #4
    a872:	2001      	movs	r0, #1
    a874:	4b2b      	ldr	r3, [pc, #172]	; (a924 <phySetChannel+0xd0>)
    a876:	4798      	blx	r3
	{
	}
}
    a878:	b003      	add	sp, #12
    a87a:	bd00      	pop	{pc}
				frequncy_set = FREQ_863000KHZ;
    a87c:	4b2a      	ldr	r3, [pc, #168]	; (a928 <phySetChannel+0xd4>)
    a87e:	9301      	str	r3, [sp, #4]
				break;
    a880:	e7f6      	b.n	a870 <phySetChannel+0x1c>
				frequncy_set = FREQ_865000KHZ;
    a882:	4b2a      	ldr	r3, [pc, #168]	; (a92c <phySetChannel+0xd8>)
    a884:	9301      	str	r3, [sp, #4]
				break;
    a886:	e7f3      	b.n	a870 <phySetChannel+0x1c>
				frequncy_set = FREQ_866550KHZ;
    a888:	4b29      	ldr	r3, [pc, #164]	; (a930 <phySetChannel+0xdc>)
    a88a:	9301      	str	r3, [sp, #4]
				break;
    a88c:	e7f0      	b.n	a870 <phySetChannel+0x1c>
				frequncy_set = FREQ_867000KHZ;
    a88e:	4b29      	ldr	r3, [pc, #164]	; (a934 <phySetChannel+0xe0>)
    a890:	9301      	str	r3, [sp, #4]
				break;			
    a892:	e7ed      	b.n	a870 <phySetChannel+0x1c>
				frequncy_set = FREQ_868100KHZ;
    a894:	4b28      	ldr	r3, [pc, #160]	; (a938 <phySetChannel+0xe4>)
    a896:	9301      	str	r3, [sp, #4]
				break;
    a898:	e7ea      	b.n	a870 <phySetChannel+0x1c>
				frequncy_set = FREQ_869525KHZ;
    a89a:	4b28      	ldr	r3, [pc, #160]	; (a93c <phySetChannel+0xe8>)
    a89c:	9301      	str	r3, [sp, #4]
				break;			
    a89e:	e7e7      	b.n	a870 <phySetChannel+0x1c>
				frequncy_set = FREQ_870000KHZ;
    a8a0:	4b27      	ldr	r3, [pc, #156]	; (a940 <phySetChannel+0xec>)
    a8a2:	9301      	str	r3, [sp, #4]
				break;
    a8a4:	e7e4      	b.n	a870 <phySetChannel+0x1c>
				frequncy_set = FREQ_902300KHZ;
    a8a6:	4b27      	ldr	r3, [pc, #156]	; (a944 <phySetChannel+0xf0>)
    a8a8:	9301      	str	r3, [sp, #4]
				break;
    a8aa:	e7e1      	b.n	a870 <phySetChannel+0x1c>
				frequncy_set = FREQ_903000KHZ;
    a8ac:	4b26      	ldr	r3, [pc, #152]	; (a948 <phySetChannel+0xf4>)
    a8ae:	9301      	str	r3, [sp, #4]
				break;
    a8b0:	e7de      	b.n	a870 <phySetChannel+0x1c>
				frequncy_set = FREQ_915000KHZ;
    a8b2:	4b26      	ldr	r3, [pc, #152]	; (a94c <phySetChannel+0xf8>)
    a8b4:	9301      	str	r3, [sp, #4]
				break;
    a8b6:	e7db      	b.n	a870 <phySetChannel+0x1c>
				frequncy_set = FREQ_915200KHZ;
    a8b8:	4b25      	ldr	r3, [pc, #148]	; (a950 <phySetChannel+0xfc>)
    a8ba:	9301      	str	r3, [sp, #4]
				break;
    a8bc:	e7d8      	b.n	a870 <phySetChannel+0x1c>
				frequncy_set = FREQ_915900KHZ;
    a8be:	4b25      	ldr	r3, [pc, #148]	; (a954 <phySetChannel+0x100>)
    a8c0:	9301      	str	r3, [sp, #4]
				break;
    a8c2:	e7d5      	b.n	a870 <phySetChannel+0x1c>
				frequncy_set = FREQ_920000KHZ;
    a8c4:	4b24      	ldr	r3, [pc, #144]	; (a958 <phySetChannel+0x104>)
    a8c6:	9301      	str	r3, [sp, #4]
				break;
    a8c8:	e7d2      	b.n	a870 <phySetChannel+0x1c>
				frequncy_set = FREQ_920900KHZ;
    a8ca:	4b24      	ldr	r3, [pc, #144]	; (a95c <phySetChannel+0x108>)
    a8cc:	9301      	str	r3, [sp, #4]
				break;
    a8ce:	e7cf      	b.n	a870 <phySetChannel+0x1c>
				frequncy_set = FREQ_921900KHZ;
    a8d0:	4b23      	ldr	r3, [pc, #140]	; (a960 <phySetChannel+0x10c>)
    a8d2:	9301      	str	r3, [sp, #4]
				break;
    a8d4:	e7cc      	b.n	a870 <phySetChannel+0x1c>
				frequncy_set = FREQ_922000KHZ;
    a8d6:	4b23      	ldr	r3, [pc, #140]	; (a964 <phySetChannel+0x110>)
    a8d8:	9301      	str	r3, [sp, #4]
				break;
    a8da:	e7c9      	b.n	a870 <phySetChannel+0x1c>
				frequncy_set = FREQ_922100KHZ;
    a8dc:	4b22      	ldr	r3, [pc, #136]	; (a968 <phySetChannel+0x114>)
    a8de:	9301      	str	r3, [sp, #4]
				break;
    a8e0:	e7c6      	b.n	a870 <phySetChannel+0x1c>
				frequncy_set = FREQ_923000KHZ;
    a8e2:	4b22      	ldr	r3, [pc, #136]	; (a96c <phySetChannel+0x118>)
    a8e4:	9301      	str	r3, [sp, #4]
				break;
    a8e6:	e7c3      	b.n	a870 <phySetChannel+0x1c>
				frequncy_set = FREQ_923200KHZ;
    a8e8:	4b21      	ldr	r3, [pc, #132]	; (a970 <phySetChannel+0x11c>)
    a8ea:	9301      	str	r3, [sp, #4]
				break;
    a8ec:	e7c0      	b.n	a870 <phySetChannel+0x1c>
				frequncy_set = FREQ_923300KHZ;
    a8ee:	4b21      	ldr	r3, [pc, #132]	; (a974 <phySetChannel+0x120>)
    a8f0:	9301      	str	r3, [sp, #4]
				break;
    a8f2:	e7bd      	b.n	a870 <phySetChannel+0x1c>
				frequncy_set = FREQ_925000KHZ;
    a8f4:	4b20      	ldr	r3, [pc, #128]	; (a978 <phySetChannel+0x124>)
    a8f6:	9301      	str	r3, [sp, #4]
				break;		
    a8f8:	e7ba      	b.n	a870 <phySetChannel+0x1c>
				frequncy_set = FREQ_927500KHZ;
    a8fa:	4b20      	ldr	r3, [pc, #128]	; (a97c <phySetChannel+0x128>)
    a8fc:	9301      	str	r3, [sp, #4]
				break;
    a8fe:	e7b7      	b.n	a870 <phySetChannel+0x1c>
				frequncy_set = FREQ_928000KHZ;
    a900:	4b1f      	ldr	r3, [pc, #124]	; (a980 <phySetChannel+0x12c>)
    a902:	9301      	str	r3, [sp, #4]
				break;
    a904:	e7b4      	b.n	a870 <phySetChannel+0x1c>
				frequncy_set = FREQ_928500KHZ;
    a906:	4b1f      	ldr	r3, [pc, #124]	; (a984 <phySetChannel+0x130>)
    a908:	9301      	str	r3, [sp, #4]
				break;
    a90a:	e7b1      	b.n	a870 <phySetChannel+0x1c>
				frequncy_set = FREQ_1020000KHZ;
    a90c:	4b1e      	ldr	r3, [pc, #120]	; (a988 <phySetChannel+0x134>)
    a90e:	9301      	str	r3, [sp, #4]
				break;
    a910:	e7ae      	b.n	a870 <phySetChannel+0x1c>
				frequncy_set = FREQ_868100KHZ;
    a912:	4b09      	ldr	r3, [pc, #36]	; (a938 <phySetChannel+0xe4>)
    a914:	9301      	str	r3, [sp, #4]
				break;				
    a916:	e7ab      	b.n	a870 <phySetChannel+0x1c>
    a918:	20000298 	.word	0x20000298
    a91c:	00018d34 	.word	0x00018d34
    a920:	33611380 	.word	0x33611380
    a924:	0000e7b5 	.word	0x0000e7b5
    a928:	337055c0 	.word	0x337055c0
    a92c:	338eda40 	.word	0x338eda40
    a930:	33a680f0 	.word	0x33a680f0
    a934:	33ad5ec0 	.word	0x33ad5ec0
    a938:	33be27a0 	.word	0x33be27a0
    a93c:	33d3e608 	.word	0x33d3e608
    a940:	33db2580 	.word	0x33db2580
    a944:	35c80160 	.word	0x35c80160
    a948:	35d2afc0 	.word	0x35d2afc0
    a94c:	3689cac0 	.word	0x3689cac0
    a950:	368cd800 	.word	0x368cd800
    a954:	36978660 	.word	0x36978660
    a958:	36d61600 	.word	0x36d61600
    a95c:	36e3d1a0 	.word	0x36e3d1a0
    a960:	36f313e0 	.word	0x36f313e0
    a964:	36f49a80 	.word	0x36f49a80
    a968:	36f62120 	.word	0x36f62120
    a96c:	3703dcc0 	.word	0x3703dcc0
    a970:	3706ea00 	.word	0x3706ea00
    a974:	370870a0 	.word	0x370870a0
    a978:	37226140 	.word	0x37226140
    a97c:	374886e0 	.word	0x374886e0
    a980:	37502800 	.word	0x37502800
    a984:	3757c920 	.word	0x3757c920
    a988:	3ccbf700 	.word	0x3ccbf700

0000a98c <radioCallback>:
{
    a98c:	b570      	push	{r4, r5, r6, lr}
    a98e:	b082      	sub	sp, #8
    a990:	0004      	movs	r4, r0
    a992:	000d      	movs	r5, r1
	callbackBackup = callback;
    a994:	4b3e      	ldr	r3, [pc, #248]	; (aa90 <radioCallback+0x104>)
    a996:	7018      	strb	r0, [r3, #0]
	int16_t rssi_readVal=0;
    a998:	466b      	mov	r3, sp
    a99a:	1c98      	adds	r0, r3, #2
    a99c:	2300      	movs	r3, #0
    a99e:	8003      	strh	r3, [r0, #0]
	Radio_ReadRssi(&rssi_readVal);
    a9a0:	4b3c      	ldr	r3, [pc, #240]	; (aa94 <radioCallback+0x108>)
    a9a2:	4798      	blx	r3
	switch (callback)
    a9a4:	2c10      	cmp	r4, #16
    a9a6:	d853      	bhi.n	aa50 <radioCallback+0xc4>
    a9a8:	00a4      	lsls	r4, r4, #2
    a9aa:	4b3b      	ldr	r3, [pc, #236]	; (aa98 <radioCallback+0x10c>)
    a9ac:	591b      	ldr	r3, [r3, r4]
    a9ae:	469f      	mov	pc, r3
					if (RxBuffer[i].PayloadLen == 0)
    a9b0:	4b3a      	ldr	r3, [pc, #232]	; (aa9c <radioCallback+0x110>)
    a9b2:	781a      	ldrb	r2, [r3, #0]
    a9b4:	2a00      	cmp	r2, #0
    a9b6:	d00e      	beq.n	a9d6 <radioCallback+0x4a>
    a9b8:	2302      	movs	r3, #2
    a9ba:	33ff      	adds	r3, #255	; 0xff
    a9bc:	4a37      	ldr	r2, [pc, #220]	; (aa9c <radioCallback+0x110>)
    a9be:	5cd3      	ldrb	r3, [r2, r3]
    a9c0:	2b00      	cmp	r3, #0
    a9c2:	d04e      	beq.n	aa62 <radioCallback+0xd6>
    a9c4:	4b36      	ldr	r3, [pc, #216]	; (aaa0 <radioCallback+0x114>)
    a9c6:	5cd3      	ldrb	r3, [r2, r3]
    a9c8:	2b00      	cmp	r3, #0
    a9ca:	d04c      	beq.n	aa66 <radioCallback+0xda>
    a9cc:	4b35      	ldr	r3, [pc, #212]	; (aaa4 <radioCallback+0x118>)
    a9ce:	5cd3      	ldrb	r3, [r2, r3]
	uint8_t i,RxBank=0xFF;
    a9d0:	22ff      	movs	r2, #255	; 0xff
					if (RxBuffer[i].PayloadLen == 0)
    a9d2:	2b00      	cmp	r3, #0
    a9d4:	d043      	beq.n	aa5e <radioCallback+0xd2>
				RxBuffer[RxBank].PayloadLen = callbackRx->RX.bufferLength;
    a9d6:	0016      	movs	r6, r2
    a9d8:	7a2c      	ldrb	r4, [r5, #8]
    a9da:	0213      	lsls	r3, r2, #8
    a9dc:	189a      	adds	r2, r3, r2
    a9de:	4b2f      	ldr	r3, [pc, #188]	; (aa9c <radioCallback+0x110>)
    a9e0:	54d4      	strb	r4, [r2, r3]
				if (RxBuffer[RxBank].PayloadLen < (RX_PACKET_SIZE - 4))			
    a9e2:	2cfa      	cmp	r4, #250	; 0xfa
    a9e4:	d80d      	bhi.n	aa02 <radioCallback+0x76>
    a9e6:	2300      	movs	r3, #0
						RxBuffer[RxBank].Payload[i] = callbackRx->RX.buffer[i];
    a9e8:	0232      	lsls	r2, r6, #8
    a9ea:	1992      	adds	r2, r2, r6
    a9ec:	482b      	ldr	r0, [pc, #172]	; (aa9c <radioCallback+0x110>)
    a9ee:	1880      	adds	r0, r0, r2
    a9f0:	686a      	ldr	r2, [r5, #4]
    a9f2:	5cd1      	ldrb	r1, [r2, r3]
    a9f4:	18c2      	adds	r2, r0, r3
    a9f6:	7091      	strb	r1, [r2, #2]
					for (i = 0; i <= callbackRx->RX.bufferLength; i++)
    a9f8:	3301      	adds	r3, #1
    a9fa:	b2db      	uxtb	r3, r3
    a9fc:	7a2a      	ldrb	r2, [r5, #8]
    a9fe:	429a      	cmp	r2, r3
    aa00:	d2f6      	bcs.n	a9f0 <radioCallback+0x64>
				RxBuffer[RxBank].PayloadLen +=4;
    aa02:	4b26      	ldr	r3, [pc, #152]	; (aa9c <radioCallback+0x110>)
    aa04:	0232      	lsls	r2, r6, #8
    aa06:	1992      	adds	r2, r2, r6
    aa08:	3404      	adds	r4, #4
    aa0a:	54d4      	strb	r4, [r2, r3]
				rssi_readVal = radioConfiguration.packetRSSI;
    aa0c:	2156      	movs	r1, #86	; 0x56
    aa0e:	4826      	ldr	r0, [pc, #152]	; (aaa8 <radioCallback+0x11c>)
    aa10:	5e41      	ldrsh	r1, [r0, r1]
    aa12:	4668      	mov	r0, sp
    aa14:	8041      	strh	r1, [r0, #2]
				RxBuffer[RxBank].radioRSSI = rssi_readVal;						
    aa16:	189b      	adds	r3, r3, r2
    aa18:	7059      	strb	r1, [r3, #1]
				if(RxBuffer[RxBank].Payload[0] & 0x20)
    aa1a:	789b      	ldrb	r3, [r3, #2]
    aa1c:	069b      	lsls	r3, r3, #26
    aa1e:	d524      	bpl.n	aa6a <radioCallback+0xde>
					RadioReceiveParam.action = RECEIVE_STOP;					
    aa20:	a801      	add	r0, sp, #4
    aa22:	2301      	movs	r3, #1
    aa24:	7003      	strb	r3, [r0, #0]
					RadioReceiveParam.rxWindowSize = 0;
    aa26:	2300      	movs	r3, #0
    aa28:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&RadioReceiveParam);
    aa2a:	4b20      	ldr	r3, [pc, #128]	; (aaac <radioCallback+0x120>)
    aa2c:	4798      	blx	r3
    aa2e:	e00f      	b.n	aa50 <radioCallback+0xc4>
			if((!AckReqData)||(callbackRx->status != ERR_NONE))
    aa30:	4b1f      	ldr	r3, [pc, #124]	; (aab0 <radioCallback+0x124>)
    aa32:	781b      	ldrb	r3, [r3, #0]
    aa34:	2b00      	cmp	r3, #0
    aa36:	d002      	beq.n	aa3e <radioCallback+0xb2>
    aa38:	782b      	ldrb	r3, [r5, #0]
    aa3a:	2b00      	cmp	r3, #0
    aa3c:	d00a      	beq.n	aa54 <radioCallback+0xc8>
				PHY_DataConf(callbackRx->status); // Need to convert LoRa status to MiWi status
    aa3e:	7828      	ldrb	r0, [r5, #0]
    aa40:	4b1c      	ldr	r3, [pc, #112]	; (aab4 <radioCallback+0x128>)
    aa42:	4798      	blx	r3
			RadioReceiveParam.action = RECEIVE_START;
    aa44:	a801      	add	r0, sp, #4
    aa46:	2300      	movs	r3, #0
    aa48:	7003      	strb	r3, [r0, #0]
			RadioReceiveParam.rxWindowSize = 0;
    aa4a:	8043      	strh	r3, [r0, #2]
			RADIO_Receive(&RadioReceiveParam);
    aa4c:	4b17      	ldr	r3, [pc, #92]	; (aaac <radioCallback+0x120>)
    aa4e:	4798      	blx	r3
}
    aa50:	b002      	add	sp, #8
    aa52:	bd70      	pop	{r4, r5, r6, pc}
				DataTxAckTimer.Val = MiWi_TickGet();
    aa54:	4b18      	ldr	r3, [pc, #96]	; (aab8 <radioCallback+0x12c>)
    aa56:	4798      	blx	r3
    aa58:	4b18      	ldr	r3, [pc, #96]	; (aabc <radioCallback+0x130>)
    aa5a:	6018      	str	r0, [r3, #0]
    aa5c:	e7f2      	b.n	aa44 <radioCallback+0xb8>
				for (i = 0; i < BANK_SIZE; i++)
    aa5e:	3afc      	subs	r2, #252	; 0xfc
    aa60:	e7b9      	b.n	a9d6 <radioCallback+0x4a>
    aa62:	2201      	movs	r2, #1
    aa64:	e7b7      	b.n	a9d6 <radioCallback+0x4a>
    aa66:	2202      	movs	r2, #2
    aa68:	e7b5      	b.n	a9d6 <radioCallback+0x4a>
					RadioReceiveParam.action = RECEIVE_START;
    aa6a:	a801      	add	r0, sp, #4
    aa6c:	2300      	movs	r3, #0
    aa6e:	7003      	strb	r3, [r0, #0]
					RadioReceiveParam.rxWindowSize = 0;
    aa70:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&RadioReceiveParam);	
    aa72:	4b0e      	ldr	r3, [pc, #56]	; (aaac <radioCallback+0x120>)
    aa74:	4798      	blx	r3
    aa76:	e7eb      	b.n	aa50 <radioCallback+0xc4>
				RadioReceiveParam.action = RECEIVE_START;
    aa78:	ac01      	add	r4, sp, #4
    aa7a:	2300      	movs	r3, #0
    aa7c:	7023      	strb	r3, [r4, #0]
				RadioReceiveParam.rxWindowSize = 0;
    aa7e:	8063      	strh	r3, [r4, #2]
				PHY_DataConf(FAILURE);											
    aa80:	2001      	movs	r0, #1
    aa82:	4b0c      	ldr	r3, [pc, #48]	; (aab4 <radioCallback+0x128>)
    aa84:	4798      	blx	r3
				RADIO_Receive(&RadioReceiveParam);
    aa86:	0020      	movs	r0, r4
    aa88:	4b08      	ldr	r3, [pc, #32]	; (aaac <radioCallback+0x120>)
    aa8a:	4798      	blx	r3
}
    aa8c:	e7e0      	b.n	aa50 <radioCallback+0xc4>
    aa8e:	46c0      	nop			; (mov r8, r8)
    aa90:	2000225b 	.word	0x2000225b
    aa94:	0000dd79 	.word	0x0000dd79
    aa98:	00018d9c 	.word	0x00018d9c
    aa9c:	20002264 	.word	0x20002264
    aaa0:	00000202 	.word	0x00000202
    aaa4:	00000303 	.word	0x00000303
    aaa8:	20002d88 	.word	0x20002d88
    aaac:	0000f9c1 	.word	0x0000f9c1
    aab0:	20000287 	.word	0x20000287
    aab4:	0000a099 	.word	0x0000a099
    aab8:	0000c3e1 	.word	0x0000c3e1
    aabc:	20002970 	.word	0x20002970

0000aac0 <PHY_Init>:
{
    aac0:	b510      	push	{r4, lr}
    HAL_RadioInit();
    aac2:	4b06      	ldr	r3, [pc, #24]	; (aadc <PHY_Init+0x1c>)
    aac4:	4798      	blx	r3
    AESInit();	
    aac6:	4b06      	ldr	r3, [pc, #24]	; (aae0 <PHY_Init+0x20>)
    aac8:	4798      	blx	r3
	RADIO_Init();
    aaca:	4b06      	ldr	r3, [pc, #24]	; (aae4 <PHY_Init+0x24>)
    aacc:	4798      	blx	r3
	RADIO_SetAttr(RADIO_CALLBACK, (void *)&radioCallback);
    aace:	4906      	ldr	r1, [pc, #24]	; (aae8 <PHY_Init+0x28>)
    aad0:	201a      	movs	r0, #26
    aad2:	4b06      	ldr	r3, [pc, #24]	; (aaec <PHY_Init+0x2c>)
    aad4:	4798      	blx	r3
   RADIO_InitDefaultAttributes();				
    aad6:	4b06      	ldr	r3, [pc, #24]	; (aaf0 <PHY_Init+0x30>)
    aad8:	4798      	blx	r3
}
    aada:	bd10      	pop	{r4, pc}
    aadc:	0000c795 	.word	0x0000c795
    aae0:	0000d23d 	.word	0x0000d23d
    aae4:	0000e9b1 	.word	0x0000e9b1
    aae8:	0000a98d 	.word	0x0000a98d
    aaec:	0000e7b5 	.word	0x0000e7b5
    aaf0:	0000f7cd 	.word	0x0000f7cd

0000aaf4 <PHY_SetRxState>:
{
    aaf4:	b510      	push	{r4, lr}

/*************************************************************************//**
*****************************************************************************/
static void phySetRxState(void)
{
	RADIO_RxHandler();
    aaf6:	4b01      	ldr	r3, [pc, #4]	; (aafc <PHY_SetRxState+0x8>)
    aaf8:	4798      	blx	r3
}
    aafa:	bd10      	pop	{r4, pc}
    aafc:	0000f6b5 	.word	0x0000f6b5

0000ab00 <PHY_SetPanId>:
{
    ab00:	b082      	sub	sp, #8
	DevPanId[0]=d[0];
    ab02:	b2c2      	uxtb	r2, r0
    ab04:	4b02      	ldr	r3, [pc, #8]	; (ab10 <PHY_SetPanId+0x10>)
    ab06:	701a      	strb	r2, [r3, #0]
	DevPanId[1]=d[1];
    ab08:	0a00      	lsrs	r0, r0, #8
    ab0a:	7058      	strb	r0, [r3, #1]
}
    ab0c:	b002      	add	sp, #8
    ab0e:	4770      	bx	lr
    ab10:	20002668 	.word	0x20002668

0000ab14 <PHY_SetShortAddr>:
{
    ab14:	b082      	sub	sp, #8
	DevShortAddress[0]=d[0];
    ab16:	b2c2      	uxtb	r2, r0
    ab18:	4b02      	ldr	r3, [pc, #8]	; (ab24 <PHY_SetShortAddr+0x10>)
    ab1a:	701a      	strb	r2, [r3, #0]
	DevShortAddress[1]=d[1];
    ab1c:	0a00      	lsrs	r0, r0, #8
    ab1e:	7058      	strb	r0, [r3, #1]
}
    ab20:	b002      	add	sp, #8
    ab22:	4770      	bx	lr
    ab24:	2000266c 	.word	0x2000266c

0000ab28 <PHY_SetTxPower>:
{
    ab28:	b500      	push	{lr}
    ab2a:	b083      	sub	sp, #12
	reg = txPower;
    ab2c:	466b      	mov	r3, sp
    ab2e:	71d8      	strb	r0, [r3, #7]
	if(reg > 15)
    ab30:	280f      	cmp	r0, #15
    ab32:	d813      	bhi.n	ab5c <PHY_SetTxPower+0x34>
		PaBoost = DISABLED;
    ab34:	466b      	mov	r3, sp
    ab36:	1d99      	adds	r1, r3, #6
    ab38:	2300      	movs	r3, #0
    ab3a:	700b      	strb	r3, [r1, #0]
		RADIO_SetAttr(PABOOST, (void *)&PaBoost);
    ab3c:	2008      	movs	r0, #8
    ab3e:	4b0b      	ldr	r3, [pc, #44]	; (ab6c <PHY_SetTxPower+0x44>)
    ab40:	4798      	blx	r3
		reg &= 0x0F ;
    ab42:	466b      	mov	r3, sp
    ab44:	1dda      	adds	r2, r3, #7
    ab46:	79d9      	ldrb	r1, [r3, #7]
    ab48:	230f      	movs	r3, #15
    ab4a:	400b      	ands	r3, r1
    ab4c:	7013      	strb	r3, [r2, #0]
	RADIO_SetAttr(OUTPUT_POWER, &reg);
    ab4e:	466b      	mov	r3, sp
    ab50:	1dd9      	adds	r1, r3, #7
    ab52:	2004      	movs	r0, #4
    ab54:	4b05      	ldr	r3, [pc, #20]	; (ab6c <PHY_SetTxPower+0x44>)
    ab56:	4798      	blx	r3
}
    ab58:	b003      	add	sp, #12
    ab5a:	bd00      	pop	{pc}
		PaBoost = ENABLED;
    ab5c:	466b      	mov	r3, sp
    ab5e:	1d99      	adds	r1, r3, #6
    ab60:	2301      	movs	r3, #1
    ab62:	700b      	strb	r3, [r1, #0]
		RADIO_SetAttr(PABOOST, (void *)&PaBoost);
    ab64:	2008      	movs	r0, #8
    ab66:	4b01      	ldr	r3, [pc, #4]	; (ab6c <PHY_SetTxPower+0x44>)
    ab68:	4798      	blx	r3
    ab6a:	e7f0      	b.n	ab4e <PHY_SetTxPower+0x26>
    ab6c:	0000e7b5 	.word	0x0000e7b5

0000ab70 <PHY_GetAttribute>:
{
    ab70:	b510      	push	{r4, lr}
	switch(RadioAttr)
    ab72:	2807      	cmp	r0, #7
    ab74:	d003      	beq.n	ab7e <PHY_GetAttribute+0xe>
    ab76:	2816      	cmp	r0, #22
    ab78:	d001      	beq.n	ab7e <PHY_GetAttribute+0xe>
			Status = ERR_INVALID_REQ;
    ab7a:	2003      	movs	r0, #3
}
    ab7c:	bd10      	pop	{r4, pc}
			Status = RADIO_GetAttr(RadioAttr,AttrVal);
    ab7e:	4b01      	ldr	r3, [pc, #4]	; (ab84 <PHY_GetAttribute+0x14>)
    ab80:	4798      	blx	r3
			break;
    ab82:	e7fb      	b.n	ab7c <PHY_GetAttribute+0xc>
    ab84:	0000e6c5 	.word	0x0000e6c5

0000ab88 <PHY_Wakeup>:
{
    ab88:	b510      	push	{r4, lr}
	if (PHY_STATE_SLEEP == phyState)
    ab8a:	4b0c      	ldr	r3, [pc, #48]	; (abbc <PHY_Wakeup+0x34>)
    ab8c:	781b      	ldrb	r3, [r3, #0]
    ab8e:	2b02      	cmp	r3, #2
    ab90:	d000      	beq.n	ab94 <PHY_Wakeup+0xc>
}
    ab92:	bd10      	pop	{r4, pc}
		HAL_TCXOPowerOn();
    ab94:	4b0a      	ldr	r3, [pc, #40]	; (abc0 <PHY_Wakeup+0x38>)
    ab96:	4798      	blx	r3
		HAL_RadioInit();
    ab98:	4b0a      	ldr	r3, [pc, #40]	; (abc4 <PHY_Wakeup+0x3c>)
    ab9a:	4798      	blx	r3
		RADIO_Reset();
    ab9c:	4b0a      	ldr	r3, [pc, #40]	; (abc8 <PHY_Wakeup+0x40>)
    ab9e:	4798      	blx	r3
		Radio_WriteMode(MODE_STANDBY, radioConfiguration.modulation, 0);
    aba0:	2334      	movs	r3, #52	; 0x34
    aba2:	4a0a      	ldr	r2, [pc, #40]	; (abcc <PHY_Wakeup+0x44>)
    aba4:	5cd1      	ldrb	r1, [r2, r3]
    aba6:	2200      	movs	r2, #0
    aba8:	2001      	movs	r0, #1
    abaa:	4b09      	ldr	r3, [pc, #36]	; (abd0 <PHY_Wakeup+0x48>)
    abac:	4798      	blx	r3
	RADIO_RxHandler();
    abae:	4b09      	ldr	r3, [pc, #36]	; (abd4 <PHY_Wakeup+0x4c>)
    abb0:	4798      	blx	r3
	 	phyState = PHY_STATE_IDLE;
    abb2:	2201      	movs	r2, #1
    abb4:	4b01      	ldr	r3, [pc, #4]	; (abbc <PHY_Wakeup+0x34>)
    abb6:	701a      	strb	r2, [r3, #0]
}
    abb8:	e7eb      	b.n	ab92 <PHY_Wakeup+0xa>
    abba:	46c0      	nop			; (mov r8, r8)
    abbc:	20000299 	.word	0x20000299
    abc0:	0000cad5 	.word	0x0000cad5
    abc4:	0000c795 	.word	0x0000c795
    abc8:	0000c94d 	.word	0x0000c94d
    abcc:	20002d88 	.word	0x20002d88
    abd0:	0000dbb5 	.word	0x0000dbb5
    abd4:	0000f6b5 	.word	0x0000f6b5

0000abd8 <PHY_SetChannel>:
{
    abd8:	b510      	push	{r4, lr}
	phyChannel = channel;
    abda:	4b06      	ldr	r3, [pc, #24]	; (abf4 <PHY_SetChannel+0x1c>)
    abdc:	7018      	strb	r0, [r3, #0]
	if (PHY_STATE_SLEEP == phyState)
    abde:	4b06      	ldr	r3, [pc, #24]	; (abf8 <PHY_SetChannel+0x20>)
    abe0:	781b      	ldrb	r3, [r3, #0]
    abe2:	2b02      	cmp	r3, #2
    abe4:	d002      	beq.n	abec <PHY_SetChannel+0x14>
	phySetChannel();
    abe6:	4b05      	ldr	r3, [pc, #20]	; (abfc <PHY_SetChannel+0x24>)
    abe8:	4798      	blx	r3
}
    abea:	bd10      	pop	{r4, pc}
		PHY_Wakeup();
    abec:	4b04      	ldr	r3, [pc, #16]	; (ac00 <PHY_SetChannel+0x28>)
    abee:	4798      	blx	r3
    abf0:	e7f9      	b.n	abe6 <PHY_SetChannel+0xe>
    abf2:	46c0      	nop			; (mov r8, r8)
    abf4:	20000298 	.word	0x20000298
    abf8:	20000299 	.word	0x20000299
    abfc:	0000a855 	.word	0x0000a855
    ac00:	0000ab89 	.word	0x0000ab89

0000ac04 <PHY_DataReq>:
{
    ac04:	b500      	push	{lr}
    ac06:	b085      	sub	sp, #20
		RadioTransmitParam.bufferLen = data[0];
    ac08:	7803      	ldrb	r3, [r0, #0]
    ac0a:	aa02      	add	r2, sp, #8
    ac0c:	7013      	strb	r3, [r2, #0]
		for (count = 0; count < data[0]; count++)
    ac0e:	2b00      	cmp	r3, #0
    ac10:	d009      	beq.n	ac26 <PHY_DataReq+0x22>
    ac12:	2300      	movs	r3, #0
			DataRequestBuffer[count] = data[1+count];
    ac14:	4912      	ldr	r1, [pc, #72]	; (ac60 <PHY_DataReq+0x5c>)
    ac16:	18c2      	adds	r2, r0, r3
    ac18:	7852      	ldrb	r2, [r2, #1]
    ac1a:	54ca      	strb	r2, [r1, r3]
		for (count = 0; count < data[0]; count++)
    ac1c:	3301      	adds	r3, #1
    ac1e:	b2db      	uxtb	r3, r3
    ac20:	7802      	ldrb	r2, [r0, #0]
    ac22:	429a      	cmp	r2, r3
    ac24:	d8f7      	bhi.n	ac16 <PHY_DataReq+0x12>
		RadioTransmitParam.bufferPtr = (uint8_t *)&DataRequestBuffer;
    ac26:	4b0e      	ldr	r3, [pc, #56]	; (ac60 <PHY_DataReq+0x5c>)
    ac28:	9303      	str	r3, [sp, #12]
		RadioSetState(RADIO_STATE_IDLE);
    ac2a:	2001      	movs	r0, #1
    ac2c:	4b0d      	ldr	r3, [pc, #52]	; (ac64 <PHY_DataReq+0x60>)
    ac2e:	4798      	blx	r3
		phySetChannel();
    ac30:	4b0d      	ldr	r3, [pc, #52]	; (ac68 <PHY_DataReq+0x64>)
    ac32:	4798      	blx	r3
		localRadioLBTParams.lbtScanPeriod = 5 ;
    ac34:	2305      	movs	r3, #5
    ac36:	466a      	mov	r2, sp
    ac38:	8013      	strh	r3, [r2, #0]
		localRadioLBTParams.lbtThreshold = -90 ;
    ac3a:	3b5f      	subs	r3, #95	; 0x5f
    ac3c:	8053      	strh	r3, [r2, #2]
		localRadioLBTParams.lbtNumOfSamples = 5;
    ac3e:	2305      	movs	r3, #5
    ac40:	7113      	strb	r3, [r2, #4]
		localRadioLBTParams.lbtTransmitOn = 0;
    ac42:	2300      	movs	r3, #0
    ac44:	7153      	strb	r3, [r2, #5]
		status = RADIO_SetAttr(RADIO_LBT_PARAMS, &localRadioLBTParams);
    ac46:	4669      	mov	r1, sp
    ac48:	201d      	movs	r0, #29
    ac4a:	4b08      	ldr	r3, [pc, #32]	; (ac6c <PHY_DataReq+0x68>)
    ac4c:	4798      	blx	r3
		status = RADIO_Transmit (&RadioTransmitParam);
    ac4e:	a802      	add	r0, sp, #8
    ac50:	4b07      	ldr	r3, [pc, #28]	; (ac70 <PHY_DataReq+0x6c>)
    ac52:	4798      	blx	r3
		return (!status);							
    ac54:	4243      	negs	r3, r0
    ac56:	4158      	adcs	r0, r3
    ac58:	b2c0      	uxtb	r0, r0
}
    ac5a:	b005      	add	sp, #20
    ac5c:	bd00      	pop	{pc}
    ac5e:	46c0      	nop			; (mov r8, r8)
    ac60:	2000215c 	.word	0x2000215c
    ac64:	0000f0bd 	.word	0x0000f0bd
    ac68:	0000a855 	.word	0x0000a855
    ac6c:	0000e7b5 	.word	0x0000e7b5
    ac70:	0000f0e5 	.word	0x0000f0e5

0000ac74 <PHY_RandomReq>:
{
    ac74:	b510      	push	{r4, lr}
	rnd = RADIO_ReadRandom();
    ac76:	4b03      	ldr	r3, [pc, #12]	; (ac84 <PHY_RandomReq+0x10>)
    ac78:	4798      	blx	r3
    ac7a:	0004      	movs	r4, r0
	RADIO_RxHandler();
    ac7c:	4b02      	ldr	r3, [pc, #8]	; (ac88 <PHY_RandomReq+0x14>)
    ac7e:	4798      	blx	r3
}
    ac80:	0020      	movs	r0, r4
    ac82:	bd10      	pop	{r4, pc}
    ac84:	0000dce9 	.word	0x0000dce9
    ac88:	0000f6b5 	.word	0x0000f6b5

0000ac8c <PHY_EncryptReq>:
{	
    ac8c:	b510      	push	{r4, lr}
	AESEncode(text,key);
    ac8e:	4b01      	ldr	r3, [pc, #4]	; (ac94 <PHY_EncryptReq+0x8>)
    ac90:	4798      	blx	r3
}
    ac92:	bd10      	pop	{r4, pc}
    ac94:	0000d161 	.word	0x0000d161

0000ac98 <PHY_SetIEEEAddr>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_SetIEEEAddr(uint8_t *ieee_addr)
{
    ac98:	2300      	movs	r3, #0
	uint8_t *ptr_to_reg = ieee_addr;

	for (uint8_t i = 0; i < 8; i++)
	{
		DevIEEEaddr[i] = ptr_to_reg[i];
    ac9a:	4903      	ldr	r1, [pc, #12]	; (aca8 <PHY_SetIEEEAddr+0x10>)
    ac9c:	5cc2      	ldrb	r2, [r0, r3]
    ac9e:	54ca      	strb	r2, [r1, r3]
    aca0:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < 8; i++)
    aca2:	2b08      	cmp	r3, #8
    aca4:	d1fa      	bne.n	ac9c <PHY_SetIEEEAddr+0x4>
	}
}
    aca6:	4770      	bx	lr
    aca8:	2000225c 	.word	0x2000225c

0000acac <PHY_TaskHandler>:
    if (PHY_STATE_SLEEP == phyState)
    {
        return;
    }
	// Handled in DIO interrupts 
}
    acac:	4770      	bx	lr
    acae:	Address 0x0000acae is out of bounds.


0000acb0 <CommandConfCallback>:

bool CheckForData(void);

/************************ FUNCTIONS ********************************/
void CommandConfCallback(uint8_t msgConfHandle, miwi_status_t status, uint8_t* msgPointer)
{
    acb0:	b510      	push	{r4, lr}
	#if defined (ENABLE_CONSOLE)
		//printf("\r\n  Command Conf : Handle %d & Status %02X  ",msgConfHandle , status );
	#endif
    MiMem_Free(msgPointer);
    acb2:	0010      	movs	r0, r2
    acb4:	4b01      	ldr	r3, [pc, #4]	; (acbc <CommandConfCallback+0xc>)
    acb6:	4798      	blx	r3
}
    acb8:	bd10      	pop	{r4, pc}
    acba:	46c0      	nop			; (mov r8, r8)
    acbc:	0000c25d 	.word	0x0000c25d

0000acc0 <Total_Connections>:
{
    acc0:	2200      	movs	r2, #0
    uint8_t count=0 , i;
    acc2:	2000      	movs	r0, #0
        if (ConnectionTable[i].status.bits.isValid)
    acc4:	4907      	ldr	r1, [pc, #28]	; (ace4 <Total_Connections+0x24>)
    acc6:	e002      	b.n	acce <Total_Connections+0xe>
    acc8:	3201      	adds	r2, #1
    for (i=0;i<CONNECTION_SIZE;i++)
    acca:	2a05      	cmp	r2, #5
    accc:	d009      	beq.n	ace2 <Total_Connections+0x22>
        if (ConnectionTable[i].status.bits.isValid)
    acce:	0093      	lsls	r3, r2, #2
    acd0:	189b      	adds	r3, r3, r2
    acd2:	005b      	lsls	r3, r3, #1
    acd4:	18cb      	adds	r3, r1, r3
    acd6:	7a1b      	ldrb	r3, [r3, #8]
    acd8:	09db      	lsrs	r3, r3, #7
    acda:	d0f5      	beq.n	acc8 <Total_Connections+0x8>
            count++;
    acdc:	3001      	adds	r0, #1
    acde:	b2c0      	uxtb	r0, r0
    ace0:	e7f2      	b.n	acc8 <Total_Connections+0x8>
}
    ace2:	4770      	bx	lr
    ace4:	20002674 	.word	0x20002674

0000ace8 <IndirectPacket>:
							INPUT uint8_t* msgPtr,
							INPUT uint8_t msghandle,
							INPUT bool ackReq,
                            DataConf_callback_t ConfCallback)
    #endif                            
    { 
    ace8:	b5f0      	push	{r4, r5, r6, r7, lr}
    acea:	46de      	mov	lr, fp
    acec:	4657      	mov	r7, sl
    acee:	464e      	mov	r6, r9
    acf0:	4645      	mov	r5, r8
    acf2:	b5e0      	push	{r5, r6, r7, lr}
    acf4:	b083      	sub	sp, #12
    acf6:	466c      	mov	r4, sp
    acf8:	8061      	strh	r1, [r4, #2]
    acfa:	ac0c      	add	r4, sp, #48	; 0x30
    acfc:	7827      	ldrb	r7, [r4, #0]
    acfe:	ac0d      	add	r4, sp, #52	; 0x34
    ad00:	7826      	ldrb	r6, [r4, #0]
    ad02:	ac0f      	add	r4, sp, #60	; 0x3c
    ad04:	7825      	ldrb	r5, [r4, #0]
    ad06:	ac10      	add	r4, sp, #64	; 0x40
    ad08:	7821      	ldrb	r1, [r4, #0]
    ad0a:	4688      	mov	r8, r1
        uint8_t i;
        
        #ifndef ENABLE_BROADCAST
            if( Broadcast )
    ad0c:	2800      	cmp	r0, #0
    ad0e:	d000      	beq.n	ad12 <IndirectPacket+0x2a>
    ad10:	e07e      	b.n	ae10 <IndirectPacket+0x128>

        // loop through the available indirect message buffer and locate
        // the empty message slot
        for(i = 0; i < INDIRECT_MESSAGE_SIZE; i++)
        {
            if( indirectMessages[i].flags.bits.isValid == 0 )
    ad12:	4c40      	ldr	r4, [pc, #256]	; (ae14 <IndirectPacket+0x12c>)
    ad14:	7ba4      	ldrb	r4, [r4, #14]
    ad16:	07e1      	lsls	r1, r4, #31
    ad18:	d400      	bmi.n	ad1c <IndirectPacket+0x34>
    ad1a:	e077      	b.n	ae0c <IndirectPacket+0x124>
    ad1c:	2491      	movs	r4, #145	; 0x91
    ad1e:	0064      	lsls	r4, r4, #1
    ad20:	493c      	ldr	r1, [pc, #240]	; (ae14 <IndirectPacket+0x12c>)
    ad22:	5d0c      	ldrb	r4, [r1, r4]
    ad24:	07e1      	lsls	r1, r4, #31
    ad26:	d506      	bpl.n	ad36 <IndirectPacket+0x4e>
				indirectMessages[i].TickStart.Val = MiWi_TickGet();
                return true;
            }
        }
        return false;
    }
    ad28:	b003      	add	sp, #12
    ad2a:	bc3c      	pop	{r2, r3, r4, r5}
    ad2c:	4690      	mov	r8, r2
    ad2e:	4699      	mov	r9, r3
    ad30:	46a2      	mov	sl, r4
    ad32:	46ab      	mov	fp, r5
    ad34:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( indirectMessages[i].flags.bits.isValid == 0 )
    ad36:	2401      	movs	r4, #1
                indirectMessages[i].flags.bits.isValid          = true;
    ad38:	208a      	movs	r0, #138	; 0x8a
    ad3a:	0040      	lsls	r0, r0, #1
    ad3c:	4360      	muls	r0, r4
    ad3e:	4935      	ldr	r1, [pc, #212]	; (ae14 <IndirectPacket+0x12c>)
    ad40:	468c      	mov	ip, r1
    ad42:	4484      	add	ip, r0
    ad44:	2108      	movs	r1, #8
    ad46:	4461      	add	r1, ip
    ad48:	4689      	mov	r9, r1
    ad4a:	7989      	ldrb	r1, [r1, #6]
    ad4c:	2001      	movs	r0, #1
    ad4e:	4301      	orrs	r1, r0
    ad50:	468a      	mov	sl, r1
                indirectMessages[i].flags.bits.isCommand        = isCommand;
    ad52:	2001      	movs	r0, #1
    ad54:	4003      	ands	r3, r0
    ad56:	0099      	lsls	r1, r3, #2
    ad58:	9101      	str	r1, [sp, #4]
    ad5a:	21fd      	movs	r1, #253	; 0xfd
    ad5c:	468b      	mov	fp, r1
    ad5e:	4651      	mov	r1, sl
    ad60:	465b      	mov	r3, fp
    ad62:	4019      	ands	r1, r3
    ad64:	3bf9      	subs	r3, #249	; 0xf9
    ad66:	4399      	bics	r1, r3
                indirectMessages[i].flags.bits.isSecured        = SecurityEnabled;
    ad68:	4007      	ands	r7, r0
    ad6a:	00ff      	lsls	r7, r7, #3
    ad6c:	000b      	movs	r3, r1
    ad6e:	9901      	ldr	r1, [sp, #4]
    ad70:	4319      	orrs	r1, r3
    ad72:	000b      	movs	r3, r1
    ad74:	2108      	movs	r1, #8
    ad76:	438b      	bics	r3, r1
				indirectMessages[i].flags.bits.ackReq           = ackReq;
    ad78:	4641      	mov	r1, r8
    ad7a:	4008      	ands	r0, r1
    ad7c:	0101      	lsls	r1, r0, #4
    ad7e:	433b      	orrs	r3, r7
    ad80:	0018      	movs	r0, r3
    ad82:	2310      	movs	r3, #16
    ad84:	4398      	bics	r0, r3
    ad86:	4308      	orrs	r0, r1
    ad88:	464b      	mov	r3, r9
    ad8a:	7198      	strb	r0, [r3, #6]
                    indirectMessages[i].DestPANID.Val           = DestinationPANID.Val;
    ad8c:	4663      	mov	r3, ip
    ad8e:	4669      	mov	r1, sp
    ad90:	8849      	ldrh	r1, [r1, #2]
    ad92:	8099      	strh	r1, [r3, #4]
                if( DestinationAddress != NULL )
    ad94:	2a00      	cmp	r2, #0
    ad96:	d00d      	beq.n	adb4 <IndirectPacket+0xcc>
    ad98:	0013      	movs	r3, r2
    ad9a:	218a      	movs	r1, #138	; 0x8a
    ad9c:	0049      	lsls	r1, r1, #1
    ad9e:	4361      	muls	r1, r4
    ada0:	3106      	adds	r1, #6
    ada2:	481c      	ldr	r0, [pc, #112]	; (ae14 <IndirectPacket+0x12c>)
    ada4:	1809      	adds	r1, r1, r0
    ada6:	3208      	adds	r2, #8
                        indirectMessages[i].DestAddress.DestLongAddress[j] = DestinationAddress[j];
    ada8:	7818      	ldrb	r0, [r3, #0]
    adaa:	7008      	strb	r0, [r1, #0]
    adac:	3301      	adds	r3, #1
    adae:	3101      	adds	r1, #1
                    for(j = 0; j < MY_ADDRESS_LENGTH; j++)
    adb0:	4293      	cmp	r3, r2
    adb2:	d1f9      	bne.n	ada8 <IndirectPacket+0xc0>
                indirectMessages[i].PayLoadSize = msgLen;
    adb4:	228a      	movs	r2, #138	; 0x8a
    adb6:	0052      	lsls	r2, r2, #1
    adb8:	4362      	muls	r2, r4
    adba:	4b16      	ldr	r3, [pc, #88]	; (ae14 <IndirectPacket+0x12c>)
    adbc:	189b      	adds	r3, r3, r2
    adbe:	73de      	strb	r6, [r3, #15]
                for(j = 0; j < msgLen; j++)
    adc0:	2e00      	cmp	r6, #0
    adc2:	d011      	beq.n	ade8 <IndirectPacket+0x100>
    adc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    adc6:	228a      	movs	r2, #138	; 0x8a
    adc8:	0052      	lsls	r2, r2, #1
    adca:	4362      	muls	r2, r4
    adcc:	3210      	adds	r2, #16
    adce:	4911      	ldr	r1, [pc, #68]	; (ae14 <IndirectPacket+0x12c>)
    add0:	1852      	adds	r2, r2, r1
    add2:	3e01      	subs	r6, #1
    add4:	b2f0      	uxtb	r0, r6
    add6:	3001      	adds	r0, #1
    add8:	469c      	mov	ip, r3
    adda:	4460      	add	r0, ip
                    indirectMessages[i].PayLoad[j] = msgPtr[j];
    addc:	7819      	ldrb	r1, [r3, #0]
    adde:	7011      	strb	r1, [r2, #0]
    ade0:	3301      	adds	r3, #1
    ade2:	3201      	adds	r2, #1
                for(j = 0; j < msgLen; j++)
    ade4:	4283      	cmp	r3, r0
    ade6:	d1f9      	bne.n	addc <IndirectPacket+0xf4>
                indirectMessages[i].indirectDataHandle = msghandle;
    ade8:	4e0a      	ldr	r6, [pc, #40]	; (ae14 <IndirectPacket+0x12c>)
    adea:	238a      	movs	r3, #138	; 0x8a
    adec:	005b      	lsls	r3, r3, #1
    adee:	435c      	muls	r4, r3
    adf0:	1933      	adds	r3, r6, r4
    adf2:	001a      	movs	r2, r3
    adf4:	3210      	adds	r2, #16
    adf6:	32ff      	adds	r2, #255	; 0xff
    adf8:	7015      	strb	r5, [r2, #0]
				indirectMessages[i].indirectConfCallback = ConfCallback;
    adfa:	3311      	adds	r3, #17
    adfc:	33ff      	adds	r3, #255	; 0xff
    adfe:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ae00:	601a      	str	r2, [r3, #0]
				indirectMessages[i].TickStart.Val = MiWi_TickGet();
    ae02:	4b05      	ldr	r3, [pc, #20]	; (ae18 <IndirectPacket+0x130>)
    ae04:	4798      	blx	r3
    ae06:	51a0      	str	r0, [r4, r6]
                return true;
    ae08:	2001      	movs	r0, #1
    ae0a:	e78d      	b.n	ad28 <IndirectPacket+0x40>
            if( indirectMessages[i].flags.bits.isValid == 0 )
    ae0c:	2400      	movs	r4, #0
    ae0e:	e793      	b.n	ad38 <IndirectPacket+0x50>
                return false;
    ae10:	2000      	movs	r0, #0
    ae12:	e789      	b.n	ad28 <IndirectPacket+0x40>
    ae14:	200026f0 	.word	0x200026f0
    ae18:	0000c3e1 	.word	0x0000c3e1

0000ae1c <SendPacket>:
                    INPUT uint8_t* msgPtr,
                    INPUT uint8_t msghandle,
					INPUT bool ackReq,
                    INPUT DataConf_callback_t ConfCallback)
#endif                                        
{ 
    ae1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ae1e:	46ce      	mov	lr, r9
    ae20:	4647      	mov	r7, r8
    ae22:	b580      	push	{r7, lr}
    ae24:	b08b      	sub	sp, #44	; 0x2c
    ae26:	0005      	movs	r5, r0
    ae28:	468c      	mov	ip, r1
    ae2a:	9205      	str	r2, [sp, #20]
    ae2c:	a812      	add	r0, sp, #72	; 0x48
    ae2e:	7800      	ldrb	r0, [r0, #0]
    ae30:	ac13      	add	r4, sp, #76	; 0x4c
    ae32:	7826      	ldrb	r6, [r4, #0]
    ae34:	ac15      	add	r4, sp, #84	; 0x54
    ae36:	7827      	ldrb	r7, [r4, #0]
    ae38:	ac16      	add	r4, sp, #88	; 0x58
    ae3a:	7822      	ldrb	r2, [r4, #0]
    MAC_TRANS_PARAM tParam;
    bool status;

    tParam.flags.Val = 0;
    ae3c:	2400      	movs	r4, #0
    ae3e:	46a0      	mov	r8, r4
    ae40:	ac07      	add	r4, sp, #28
    ae42:	4641      	mov	r1, r8
    ae44:	7021      	strb	r1, [r4, #0]
    //tParam.flags.bits.packetType = (isCommand) ? PACKET_TYPE_COMMAND : PACKET_TYPE_DATA;
	if(isCommand)
    ae46:	2b00      	cmp	r3, #0
    ae48:	d043      	beq.n	aed2 <SendPacket+0xb6>
		tParam.flags.bits.packetType = PACKET_TYPE_COMMAND;
    ae4a:	0023      	movs	r3, r4
    ae4c:	b2cc      	uxtb	r4, r1
    ae4e:	2103      	movs	r1, #3
    ae50:	438c      	bics	r4, r1
    ae52:	2101      	movs	r1, #1
    ae54:	4688      	mov	r8, r1
    ae56:	4641      	mov	r1, r8
    ae58:	430c      	orrs	r4, r1
    ae5a:	701c      	strb	r4, [r3, #0]
	else
		tParam.flags.bits.packetType = PACKET_TYPE_DATA;
   // tParam.flags.bits.ackReq = (Broadcast) ? 0 : ackReq;
   if(Broadcast)
    ae5c:	2d00      	cmp	r5, #0
    ae5e:	d13e      	bne.n	aede <SendPacket+0xc2>
   {
	tParam.flags.bits.ackReq = 0;
   }
   else
   {
	   tParam.flags.bits.ackReq = ackReq;
    ae60:	ac07      	add	r4, sp, #28
    ae62:	2301      	movs	r3, #1
    ae64:	4013      	ands	r3, r2
    ae66:	015a      	lsls	r2, r3, #5
    ae68:	7823      	ldrb	r3, [r4, #0]
    ae6a:	2120      	movs	r1, #32
    ae6c:	438b      	bics	r3, r1
    ae6e:	4313      	orrs	r3, r2
    ae70:	7023      	strb	r3, [r4, #0]
   }
    tParam.flags.bits.broadcast = Broadcast;
    ae72:	ac07      	add	r4, sp, #28
    ae74:	2201      	movs	r2, #1
    ae76:	0013      	movs	r3, r2
    ae78:	402b      	ands	r3, r5
    ae7a:	009b      	lsls	r3, r3, #2
    ae7c:	4698      	mov	r8, r3
    ae7e:	7823      	ldrb	r3, [r4, #0]
    ae80:	2104      	movs	r1, #4
    ae82:	438b      	bics	r3, r1
    tParam.flags.bits.secEn = SecurityEnabled;
    ae84:	4010      	ands	r0, r2
    ae86:	00c0      	lsls	r0, r0, #3
    ae88:	4641      	mov	r1, r8
    ae8a:	430b      	orrs	r3, r1
    ae8c:	2108      	movs	r1, #8
    ae8e:	438b      	bics	r3, r1
    #if defined(IEEE_802_15_4)
        tParam.altSrcAddr = 0;
    ae90:	2100      	movs	r1, #0
    ae92:	7261      	strb	r1, [r4, #9]
        tParam.altDestAddr = (Broadcast) ? true : false;
    ae94:	7225      	strb	r5, [r4, #8]
    #endif
    
    #if defined(INFER_DEST_ADDRESS)
        tParam.flags.bits.destPrsnt = 0;
    #else
        tParam.flags.bits.destPrsnt = (Broadcast) ? 0:1;
    ae96:	2101      	movs	r1, #1
    ae98:	4688      	mov	r8, r1
    ae9a:	4641      	mov	r1, r8
    ae9c:	404d      	eors	r5, r1
    ae9e:	4015      	ands	r5, r2
    aea0:	01ad      	lsls	r5, r5, #6
    aea2:	4318      	orrs	r0, r3
    aea4:	2340      	movs	r3, #64	; 0x40
    aea6:	4398      	bics	r0, r3
        else
        {
            tParam.flags.bits.sourcePrsnt = 0;
        }
    #else
        tParam.flags.bits.sourcePrsnt = 1;
    aea8:	4328      	orrs	r0, r5
    aeaa:	3bc0      	subs	r3, #192	; 0xc0
    aeac:	4318      	orrs	r0, r3
    aeae:	7020      	strb	r0, [r4, #0]
    #endif
    
    tParam.DestAddress = DestinationAddress;

    #if defined(IEEE_802_15_4)
        tParam.DestPANID.Val = DestinationPANID.Val;
    aeb0:	4663      	mov	r3, ip
    aeb2:	8163      	strh	r3, [r4, #10]
    #endif

    status = MiMAC_SendPacket(tParam, msgPtr, msgLen, msghandle, ConfCallback);
    aeb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    aeb6:	9302      	str	r3, [sp, #8]
    aeb8:	9701      	str	r7, [sp, #4]
    aeba:	9600      	str	r6, [sp, #0]
    aebc:	9b14      	ldr	r3, [sp, #80]	; 0x50
    aebe:	9807      	ldr	r0, [sp, #28]
    aec0:	9905      	ldr	r1, [sp, #20]
    aec2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    aec4:	4c09      	ldr	r4, [pc, #36]	; (aeec <SendPacket+0xd0>)
    aec6:	47a0      	blx	r4
    
    return status;
}
    aec8:	b00b      	add	sp, #44	; 0x2c
    aeca:	bc0c      	pop	{r2, r3}
    aecc:	4690      	mov	r8, r2
    aece:	4699      	mov	r9, r3
    aed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tParam.flags.bits.packetType = PACKET_TYPE_DATA;
    aed2:	ab07      	add	r3, sp, #28
    aed4:	781c      	ldrb	r4, [r3, #0]
    aed6:	2103      	movs	r1, #3
    aed8:	438c      	bics	r4, r1
    aeda:	701c      	strb	r4, [r3, #0]
    aedc:	e7be      	b.n	ae5c <SendPacket+0x40>
	tParam.flags.bits.ackReq = 0;
    aede:	ac07      	add	r4, sp, #28
    aee0:	7823      	ldrb	r3, [r4, #0]
    aee2:	2220      	movs	r2, #32
    aee4:	4393      	bics	r3, r2
    aee6:	7023      	strb	r3, [r4, #0]
    aee8:	e7c3      	b.n	ae72 <SendPacket+0x56>
    aeea:	46c0      	nop			; (mov r8, r8)
    aeec:	00009cd5 	.word	0x00009cd5

0000aef0 <isSameAddress>:
 *
 * Side Effects:    
 *
 ********************************************************************/
bool    isSameAddress(INPUT uint8_t *Address1, INPUT uint8_t *Address2)
{
    aef0:	b510      	push	{r4, lr}
    uint8_t i;
    
    for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    {
        if( Address1[i] != Address2[i] )
    aef2:	7802      	ldrb	r2, [r0, #0]
    aef4:	780b      	ldrb	r3, [r1, #0]
    aef6:	429a      	cmp	r2, r3
    aef8:	d109      	bne.n	af0e <isSameAddress+0x1e>
    aefa:	2301      	movs	r3, #1
    aefc:	5cc4      	ldrb	r4, [r0, r3]
    aefe:	5cca      	ldrb	r2, [r1, r3]
    af00:	4294      	cmp	r4, r2
    af02:	d106      	bne.n	af12 <isSameAddress+0x22>
    af04:	3301      	adds	r3, #1
    for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    af06:	2b08      	cmp	r3, #8
    af08:	d1f8      	bne.n	aefc <isSameAddress+0xc>
        {
            return false;
        }
    }
    return true;
    af0a:	2001      	movs	r0, #1
}
    af0c:	bd10      	pop	{r4, pc}
            return false;
    af0e:	2000      	movs	r0, #0
    af10:	e7fc      	b.n	af0c <isSameAddress+0x1c>
    af12:	2000      	movs	r0, #0
    af14:	e7fa      	b.n	af0c <isSameAddress+0x1c>
    af16:	Address 0x0000af16 is out of bounds.


0000af18 <MiApp_SendData>:
   {
    af18:	b5f0      	push	{r4, r5, r6, r7, lr}
    af1a:	46de      	mov	lr, fp
    af1c:	4657      	mov	r7, sl
    af1e:	464e      	mov	r6, r9
    af20:	b5c0      	push	{r6, r7, lr}
    af22:	b088      	sub	sp, #32
    af24:	9107      	str	r1, [sp, #28]
    af26:	0017      	movs	r7, r2
    af28:	4699      	mov	r9, r3
    af2a:	ab10      	add	r3, sp, #64	; 0x40
    af2c:	781b      	ldrb	r3, [r3, #0]
    af2e:	469a      	mov	sl, r3
    af30:	ab11      	add	r3, sp, #68	; 0x44
    af32:	781b      	ldrb	r3, [r3, #0]
    af34:	469b      	mov	fp, r3
		if(addr_len == 2 && (DestinationAddress16 == 0xFFFF))
    af36:	2802      	cmp	r0, #2
    af38:	d003      	beq.n	af42 <MiApp_SendData+0x2a>
    af3a:	4d3e      	ldr	r5, [pc, #248]	; (b034 <MiApp_SendData+0x11c>)
    af3c:	2400      	movs	r4, #0
            if( ConnectionTable[i].status.bits.isValid && (ConnectionTable[i].status.bits.RXOnWhenIdle == 0) &&
    af3e:	002e      	movs	r6, r5
    af40:	e036      	b.n	afb0 <MiApp_SendData+0x98>
		uint16_t DestinationAddress16 = ((addr[1] << 8) + addr[0]);	
    af42:	784a      	ldrb	r2, [r1, #1]
    af44:	0212      	lsls	r2, r2, #8
    af46:	780b      	ldrb	r3, [r1, #0]
    af48:	189b      	adds	r3, r3, r2
		if(addr_len == 2 && (DestinationAddress16 == 0xFFFF))
    af4a:	b29b      	uxth	r3, r3
    af4c:	4a3a      	ldr	r2, [pc, #232]	; (b038 <MiApp_SendData+0x120>)
    af4e:	4293      	cmp	r3, r2
    af50:	d1f3      	bne.n	af3a <MiApp_SendData+0x22>
    af52:	2100      	movs	r1, #0
				    if( ConnectionTable[i].status.bits.isValid && ConnectionTable[i].status.bits.RXOnWhenIdle == 0 )
    af54:	4837      	ldr	r0, [pc, #220]	; (b034 <MiApp_SendData+0x11c>)
    af56:	0002      	movs	r2, r0
    af58:	e002      	b.n	af60 <MiApp_SendData+0x48>
    af5a:	3101      	adds	r1, #1
			    for(i = 0; i < CONNECTION_SIZE; i++)
    af5c:	2905      	cmp	r1, #5
    af5e:	d021      	beq.n	afa4 <MiApp_SendData+0x8c>
				    if( ConnectionTable[i].status.bits.isValid && ConnectionTable[i].status.bits.RXOnWhenIdle == 0 )
    af60:	008b      	lsls	r3, r1, #2
    af62:	185b      	adds	r3, r3, r1
    af64:	005b      	lsls	r3, r3, #1
    af66:	18c3      	adds	r3, r0, r3
    af68:	7a1b      	ldrb	r3, [r3, #8]
    af6a:	09db      	lsrs	r3, r3, #7
    af6c:	d0f5      	beq.n	af5a <MiApp_SendData+0x42>
    af6e:	008b      	lsls	r3, r1, #2
    af70:	185b      	adds	r3, r3, r1
    af72:	005b      	lsls	r3, r3, #1
    af74:	18d3      	adds	r3, r2, r3
    af76:	7a1b      	ldrb	r3, [r3, #8]
    af78:	07db      	lsls	r3, r3, #31
    af7a:	d4ee      	bmi.n	af5a <MiApp_SendData+0x42>
					    IndirectPacket(true, myPANID, NULL, false, true, msglen, msgpointer, msghandle, ackReq, ConfCallback);
    af7c:	4b2f      	ldr	r3, [pc, #188]	; (b03c <MiApp_SendData+0x124>)
    af7e:	8819      	ldrh	r1, [r3, #0]
    af80:	9b12      	ldr	r3, [sp, #72]	; 0x48
    af82:	9305      	str	r3, [sp, #20]
    af84:	465b      	mov	r3, fp
    af86:	9304      	str	r3, [sp, #16]
    af88:	4653      	mov	r3, sl
    af8a:	9303      	str	r3, [sp, #12]
    af8c:	464b      	mov	r3, r9
    af8e:	9302      	str	r3, [sp, #8]
    af90:	9701      	str	r7, [sp, #4]
    af92:	2301      	movs	r3, #1
    af94:	9300      	str	r3, [sp, #0]
    af96:	2300      	movs	r3, #0
    af98:	2200      	movs	r2, #0
    af9a:	2001      	movs	r0, #1
    af9c:	4c28      	ldr	r4, [pc, #160]	; (b040 <MiApp_SendData+0x128>)
    af9e:	47a0      	blx	r4
			broadcast = true;
    afa0:	2001      	movs	r0, #1
					    break;
    afa2:	e02f      	b.n	b004 <MiApp_SendData+0xec>
			broadcast = true;
    afa4:	2001      	movs	r0, #1
    afa6:	e02d      	b.n	b004 <MiApp_SendData+0xec>
    afa8:	3401      	adds	r4, #1
    afaa:	350a      	adds	r5, #10
        for(i = 0; i < CONNECTION_SIZE; i++)
    afac:	2c05      	cmp	r4, #5
    afae:	d028      	beq.n	b002 <MiApp_SendData+0xea>
            if( ConnectionTable[i].status.bits.isValid && (ConnectionTable[i].status.bits.RXOnWhenIdle == 0) &&
    afb0:	00a3      	lsls	r3, r4, #2
    afb2:	191b      	adds	r3, r3, r4
    afb4:	005b      	lsls	r3, r3, #1
    afb6:	18f3      	adds	r3, r6, r3
    afb8:	7a1b      	ldrb	r3, [r3, #8]
    afba:	09db      	lsrs	r3, r3, #7
    afbc:	d0f4      	beq.n	afa8 <MiApp_SendData+0x90>
    afbe:	00a3      	lsls	r3, r4, #2
    afc0:	191b      	adds	r3, r3, r4
    afc2:	005b      	lsls	r3, r3, #1
    afc4:	4a1b      	ldr	r2, [pc, #108]	; (b034 <MiApp_SendData+0x11c>)
    afc6:	4694      	mov	ip, r2
    afc8:	4463      	add	r3, ip
    afca:	7a1b      	ldrb	r3, [r3, #8]
    afcc:	07db      	lsls	r3, r3, #31
    afce:	d4eb      	bmi.n	afa8 <MiApp_SendData+0x90>
                isSameAddress(addr, ConnectionTable[i].Address) )
    afd0:	0029      	movs	r1, r5
    afd2:	9807      	ldr	r0, [sp, #28]
    afd4:	4b1b      	ldr	r3, [pc, #108]	; (b044 <MiApp_SendData+0x12c>)
    afd6:	4798      	blx	r3
            if( ConnectionTable[i].status.bits.isValid && (ConnectionTable[i].status.bits.RXOnWhenIdle == 0) &&
    afd8:	2800      	cmp	r0, #0
    afda:	d0e5      	beq.n	afa8 <MiApp_SendData+0x90>
                    return IndirectPacket(broadcast, myPANID, addr, false, true, msglen,
    afdc:	4b17      	ldr	r3, [pc, #92]	; (b03c <MiApp_SendData+0x124>)
    afde:	8819      	ldrh	r1, [r3, #0]
    afe0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    afe2:	9305      	str	r3, [sp, #20]
    afe4:	465b      	mov	r3, fp
    afe6:	9304      	str	r3, [sp, #16]
    afe8:	4653      	mov	r3, sl
    afea:	9303      	str	r3, [sp, #12]
    afec:	464b      	mov	r3, r9
    afee:	9302      	str	r3, [sp, #8]
    aff0:	9701      	str	r7, [sp, #4]
    aff2:	2301      	movs	r3, #1
    aff4:	9300      	str	r3, [sp, #0]
    aff6:	2300      	movs	r3, #0
    aff8:	9a07      	ldr	r2, [sp, #28]
    affa:	2000      	movs	r0, #0
    affc:	4c10      	ldr	r4, [pc, #64]	; (b040 <MiApp_SendData+0x128>)
    affe:	47a0      	blx	r4
    b000:	e011      	b.n	b026 <MiApp_SendData+0x10e>
	    bool broadcast = false;
    b002:	2000      	movs	r0, #0
        return SendPacket(broadcast, myPANID, addr, false, true, msglen,
    b004:	4b0d      	ldr	r3, [pc, #52]	; (b03c <MiApp_SendData+0x124>)
    b006:	8819      	ldrh	r1, [r3, #0]
    b008:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b00a:	9305      	str	r3, [sp, #20]
    b00c:	465b      	mov	r3, fp
    b00e:	9304      	str	r3, [sp, #16]
    b010:	4653      	mov	r3, sl
    b012:	9303      	str	r3, [sp, #12]
    b014:	464b      	mov	r3, r9
    b016:	9302      	str	r3, [sp, #8]
    b018:	9701      	str	r7, [sp, #4]
    b01a:	2301      	movs	r3, #1
    b01c:	9300      	str	r3, [sp, #0]
    b01e:	2300      	movs	r3, #0
    b020:	9a07      	ldr	r2, [sp, #28]
    b022:	4c09      	ldr	r4, [pc, #36]	; (b048 <MiApp_SendData+0x130>)
    b024:	47a0      	blx	r4
}
    b026:	b008      	add	sp, #32
    b028:	bc1c      	pop	{r2, r3, r4}
    b02a:	4691      	mov	r9, r2
    b02c:	469a      	mov	sl, r3
    b02e:	46a3      	mov	fp, r4
    b030:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b032:	46c0      	nop			; (mov r8, r8)
    b034:	20002674 	.word	0x20002674
    b038:	0000ffff 	.word	0x0000ffff
    b03c:	200026c8 	.word	0x200026c8
    b040:	0000ace9 	.word	0x0000ace9
    b044:	0000aef1 	.word	0x0000aef1
    b048:	0000ae1d 	.word	0x0000ae1d

0000b04c <MiApp_Set>:


#endif

bool MiApp_Set(miwi_params_t id, uint8_t *value)
{
    b04c:	b570      	push	{r4, r5, r6, lr}
    b04e:	000d      	movs	r5, r1
     break;

     default:
     break;
   }
    return false;
    b050:	2400      	movs	r4, #0
    switch(id)
    b052:	2800      	cmp	r0, #0
    b054:	d001      	beq.n	b05a <MiApp_Set+0xe>
}
    b056:	0020      	movs	r0, r4
    b058:	bd70      	pop	{r4, r5, r6, pc}
        if( MiMAC_Set(MAC_CHANNEL, value))
    b05a:	4b05      	ldr	r3, [pc, #20]	; (b070 <MiApp_Set+0x24>)
    b05c:	4798      	blx	r3
    b05e:	1e04      	subs	r4, r0, #0
    b060:	d0f9      	beq.n	b056 <MiApp_Set+0xa>
          currentChannel = *value;
    b062:	782a      	ldrb	r2, [r5, #0]
    b064:	4b03      	ldr	r3, [pc, #12]	; (b074 <MiApp_Set+0x28>)
    b066:	701a      	strb	r2, [r3, #0]
			  PDS_Store(PDS_CURRENT_CHANNEL_ID);
    b068:	2003      	movs	r0, #3
    b06a:	4b03      	ldr	r3, [pc, #12]	; (b078 <MiApp_Set+0x2c>)
    b06c:	4798      	blx	r3
          return true;
    b06e:	e7f2      	b.n	b056 <MiApp_Set+0xa>
    b070:	00009c01 	.word	0x00009c01
    b074:	20000011 	.word	0x20000011
    b078:	00009569 	.word	0x00009569

0000b07c <MiApp_ProtocolInit>:
{
    b07c:	b570      	push	{r4, r5, r6, lr}
    b07e:	b084      	sub	sp, #16
    P2PStatus.Val = 0;
    b080:	2200      	movs	r2, #0
    b082:	4b3c      	ldr	r3, [pc, #240]	; (b174 <MiApp_ProtocolInit+0xf8>)
    b084:	701a      	strb	r2, [r3, #0]
    b086:	4b3c      	ldr	r3, [pc, #240]	; (b178 <MiApp_ProtocolInit+0xfc>)
    b088:	0019      	movs	r1, r3
    b08a:	3132      	adds	r1, #50	; 0x32
            ConnectionTable[i].status.Val = 0;
    b08c:	721a      	strb	r2, [r3, #8]
            ConnectionTable[i].Address[0] = 0x00;
    b08e:	701a      	strb	r2, [r3, #0]
            ConnectionTable[i].Address[1] = 0x00;
    b090:	705a      	strb	r2, [r3, #1]
            ConnectionTable[i].Address[2] = 0x00;
    b092:	709a      	strb	r2, [r3, #2]
    b094:	330a      	adds	r3, #10
        for(i = 0; i < CONNECTION_SIZE; i++)
    b096:	428b      	cmp	r3, r1
    b098:	d1f8      	bne.n	b08c <MiApp_ProtocolInit+0x10>
            indirectMessages[i].flags.Val = 0;
    b09a:	4a38      	ldr	r2, [pc, #224]	; (b17c <MiApp_ProtocolInit+0x100>)
    b09c:	2300      	movs	r3, #0
    b09e:	7393      	strb	r3, [r2, #14]
    b0a0:	2191      	movs	r1, #145	; 0x91
    b0a2:	0049      	lsls	r1, r1, #1
    b0a4:	5453      	strb	r3, [r2, r1]
            IncomingFrameCounter[i].Val = 0;
    b0a6:	4a36      	ldr	r2, [pc, #216]	; (b180 <MiApp_ProtocolInit+0x104>)
    b0a8:	6013      	str	r3, [r2, #0]
    b0aa:	6053      	str	r3, [r2, #4]
    b0ac:	6093      	str	r3, [r2, #8]
    b0ae:	60d3      	str	r3, [r2, #12]
    b0b0:	6113      	str	r3, [r2, #16]
			PDS_Restore(PDS_PANID_ID);
    b0b2:	2002      	movs	r0, #2
    b0b4:	4b33      	ldr	r3, [pc, #204]	; (b184 <MiApp_ProtocolInit+0x108>)
    b0b6:	4798      	blx	r3
        if (myPANID.Val)
    b0b8:	4b33      	ldr	r3, [pc, #204]	; (b188 <MiApp_ProtocolInit+0x10c>)
    b0ba:	881b      	ldrh	r3, [r3, #0]
    b0bc:	2b00      	cmp	r3, #0
    b0be:	d021      	beq.n	b104 <MiApp_ProtocolInit+0x88>
			PDS_Restore(PDS_CURRENT_CHANNEL_ID);
    b0c0:	2003      	movs	r0, #3
    b0c2:	4b30      	ldr	r3, [pc, #192]	; (b184 <MiApp_ProtocolInit+0x108>)
    b0c4:	4798      	blx	r3
            if( currentChannel >= 32 )
    b0c6:	4b31      	ldr	r3, [pc, #196]	; (b18c <MiApp_ProtocolInit+0x110>)
    b0c8:	781b      	ldrb	r3, [r3, #0]
    b0ca:	2b1f      	cmp	r3, #31
    b0cc:	d84f      	bhi.n	b16e <MiApp_ProtocolInit+0xf2>
			PDS_Restore(PDS_PANID_ID);
    b0ce:	2002      	movs	r0, #2
    b0d0:	4c2c      	ldr	r4, [pc, #176]	; (b184 <MiApp_ProtocolInit+0x108>)
    b0d2:	47a0      	blx	r4
			PDS_Restore(PDS_CONNECTION_MODE_ID);
    b0d4:	2004      	movs	r0, #4
    b0d6:	47a0      	blx	r4
			PDS_Restore(PDS_CONNECTION_TABLE_ID);
    b0d8:	2005      	movs	r0, #5
    b0da:	47a0      	blx	r4
			PDS_Restore(PDS_EDC_ID);
    b0dc:	2007      	movs	r0, #7
    b0de:	47a0      	blx	r4
                printf("\r\nPANID:");
    b0e0:	482b      	ldr	r0, [pc, #172]	; (b190 <MiApp_ProtocolInit+0x114>)
    b0e2:	4c2c      	ldr	r4, [pc, #176]	; (b194 <MiApp_ProtocolInit+0x118>)
    b0e4:	47a0      	blx	r4
                printf("%x",myPANID.v[1]);
    b0e6:	4e28      	ldr	r6, [pc, #160]	; (b188 <MiApp_ProtocolInit+0x10c>)
    b0e8:	7871      	ldrb	r1, [r6, #1]
    b0ea:	4d2b      	ldr	r5, [pc, #172]	; (b198 <MiApp_ProtocolInit+0x11c>)
    b0ec:	0028      	movs	r0, r5
    b0ee:	47a0      	blx	r4
                printf("%x",myPANID.v[0]);
    b0f0:	7831      	ldrb	r1, [r6, #0]
    b0f2:	0028      	movs	r0, r5
    b0f4:	47a0      	blx	r4
                printf(" Channel:");
    b0f6:	4829      	ldr	r0, [pc, #164]	; (b19c <MiApp_ProtocolInit+0x120>)
    b0f8:	47a0      	blx	r4
                printf("%d",currentChannel);
    b0fa:	4b24      	ldr	r3, [pc, #144]	; (b18c <MiApp_ProtocolInit+0x110>)
    b0fc:	7819      	ldrb	r1, [r3, #0]
    b0fe:	4828      	ldr	r0, [pc, #160]	; (b1a0 <MiApp_ProtocolInit+0x124>)
    b100:	47a0      	blx	r4
    b102:	e00b      	b.n	b11c <MiApp_ProtocolInit+0xa0>
                myPANID.Val = MY_PAN_ID;
    b104:	4a27      	ldr	r2, [pc, #156]	; (b1a4 <MiApp_ProtocolInit+0x128>)
    b106:	4b20      	ldr	r3, [pc, #128]	; (b188 <MiApp_ProtocolInit+0x10c>)
    b108:	801a      	strh	r2, [r3, #0]
				PDS_Store(PDS_PANID_ID);
    b10a:	2002      	movs	r0, #2
    b10c:	4c26      	ldr	r4, [pc, #152]	; (b1a8 <MiApp_ProtocolInit+0x12c>)
    b10e:	47a0      	blx	r4
			PDS_Store(PDS_CURRENT_CHANNEL_ID);
    b110:	2003      	movs	r0, #3
    b112:	47a0      	blx	r4
			PDS_Store(PDS_CONNECTION_MODE_ID);
    b114:	2004      	movs	r0, #4
    b116:	47a0      	blx	r4
			PDS_Store(PDS_CONNECTION_TABLE_ID);
    b118:	2005      	movs	r0, #5
    b11a:	47a0      	blx	r4
    initValue.PAddress = myLongAddress;
    b11c:	aa02      	add	r2, sp, #8
    initValue.actionFlags.bits.CCAEnable = 1;
    b11e:	7813      	ldrb	r3, [r2, #0]
    b120:	2102      	movs	r1, #2
    b122:	430b      	orrs	r3, r1
    initValue.actionFlags.bits.PAddrLength = MY_ADDRESS_LENGTH;
    b124:	2187      	movs	r1, #135	; 0x87
    b126:	400b      	ands	r3, r1
    b128:	2140      	movs	r1, #64	; 0x40
    b12a:	430b      	orrs	r3, r1
    initValue.actionFlags.bits.NetworkFreezer = 1;
    b12c:	b2db      	uxtb	r3, r3
    b12e:	2104      	movs	r1, #4
    b130:	430b      	orrs	r3, r1
    initValue.actionFlags.bits.RepeaterMode = 0;
    b132:	21c6      	movs	r1, #198	; 0xc6
    b134:	400b      	ands	r3, r1
    b136:	7013      	strb	r3, [r2, #0]
    MiMAC_Init(initValue);
    b138:	9802      	ldr	r0, [sp, #8]
    b13a:	491c      	ldr	r1, [pc, #112]	; (b1ac <MiApp_ProtocolInit+0x130>)
    b13c:	4b1c      	ldr	r3, [pc, #112]	; (b1b0 <MiApp_ProtocolInit+0x134>)
    b13e:	4798      	blx	r3
    if (currentChannel != 0xFF)
    b140:	4b12      	ldr	r3, [pc, #72]	; (b18c <MiApp_ProtocolInit+0x110>)
    b142:	781b      	ldrb	r3, [r3, #0]
    b144:	2bff      	cmp	r3, #255	; 0xff
    b146:	d003      	beq.n	b150 <MiApp_ProtocolInit+0xd4>
	    MiApp_Set(CHANNEL, &currentChannel);
    b148:	4910      	ldr	r1, [pc, #64]	; (b18c <MiApp_ProtocolInit+0x110>)
    b14a:	2000      	movs	r0, #0
    b14c:	4b19      	ldr	r3, [pc, #100]	; (b1b4 <MiApp_ProtocolInit+0x138>)
    b14e:	4798      	blx	r3
            uint16_t tmp = 0xFFFF;
    b150:	466b      	mov	r3, sp
    b152:	1d98      	adds	r0, r3, #6
    b154:	2301      	movs	r3, #1
    b156:	425b      	negs	r3, r3
    b158:	8003      	strh	r3, [r0, #0]
            MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    b15a:	490b      	ldr	r1, [pc, #44]	; (b188 <MiApp_ProtocolInit+0x10c>)
    b15c:	4b16      	ldr	r3, [pc, #88]	; (b1b8 <MiApp_ProtocolInit+0x13c>)
    b15e:	4798      	blx	r3
    P2PCapacityInfo |= (ConnMode << 4);
    b160:	4b16      	ldr	r3, [pc, #88]	; (b1bc <MiApp_ProtocolInit+0x140>)
    b162:	781b      	ldrb	r3, [r3, #0]
    b164:	011b      	lsls	r3, r3, #4
    b166:	2209      	movs	r2, #9
    b168:	4313      	orrs	r3, r2
    b16a:	4a15      	ldr	r2, [pc, #84]	; (b1c0 <MiApp_ProtocolInit+0x144>)
    b16c:	7013      	strb	r3, [r2, #0]
}
    b16e:	2000      	movs	r0, #0
    b170:	b004      	add	sp, #16
    b172:	bd70      	pop	{r4, r5, r6, pc}
    b174:	200026ec 	.word	0x200026ec
    b178:	20002674 	.word	0x20002674
    b17c:	200026f0 	.word	0x200026f0
    b180:	200026d4 	.word	0x200026d4
    b184:	00009491 	.word	0x00009491
    b188:	200026c8 	.word	0x200026c8
    b18c:	20000011 	.word	0x20000011
    b190:	00018ea0 	.word	0x00018ea0
    b194:	00017201 	.word	0x00017201
    b198:	0001848c 	.word	0x0001848c
    b19c:	00018eac 	.word	0x00018eac
    b1a0:	00018160 	.word	0x00018160
    b1a4:	00004761 	.word	0x00004761
    b1a8:	00009569 	.word	0x00009569
    b1ac:	20000014 	.word	0x20000014
    b1b0:	00009c29 	.word	0x00009c29
    b1b4:	0000b04d 	.word	0x0000b04d
    b1b8:	00009801 	.word	0x00009801
    b1bc:	20000010 	.word	0x20000010
    b1c0:	200026c1 	.word	0x200026c1

0000b1c4 <DumpConnection>:
     * Side Effects:    The content of the connection pointed by the index 
     *                  of the P2P Connection Entry will be printed out
     *
     ********************************************************************/
    void DumpConnection(INPUT uint8_t index)
    {
    b1c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b1c6:	46d6      	mov	lr, sl
    b1c8:	4647      	mov	r7, r8
    b1ca:	b580      	push	{r7, lr}
    b1cc:	b083      	sub	sp, #12
    b1ce:	0005      	movs	r5, r0
#if defined (ENABLE_CONSOLE)		
        uint8_t i, j;
        
        if( index > CONNECTION_SIZE )
    b1d0:	2805      	cmp	r0, #5
    b1d2:	d811      	bhi.n	b1f8 <DumpConnection+0x34>
            #endif
            printf("  Channel: ");
            printf("%d",currentChannel);
        }
            
        if( index < CONNECTION_SIZE )
    b1d4:	2d04      	cmp	r5, #4
    b1d6:	d85e      	bhi.n	b296 <DumpConnection+0xd2>
        {
            printf("\r\nConnection \tPeerLongAddress \tPeerInfo \tRxOnStatus1\r\n");  
    b1d8:	4851      	ldr	r0, [pc, #324]	; (b320 <DumpConnection+0x15c>)
    b1da:	4b52      	ldr	r3, [pc, #328]	; (b324 <DumpConnection+0x160>)
    b1dc:	4798      	blx	r3
            if( ConnectionTable[index].status.bits.isValid )
    b1de:	00ab      	lsls	r3, r5, #2
    b1e0:	195b      	adds	r3, r3, r5
    b1e2:	005b      	lsls	r3, r3, #1
    b1e4:	4a50      	ldr	r2, [pc, #320]	; (b328 <DumpConnection+0x164>)
    b1e6:	18d3      	adds	r3, r2, r3
    b1e8:	7a1b      	ldrb	r3, [r3, #8]
    b1ea:	09db      	lsrs	r3, r3, #7
    b1ec:	d123      	bne.n	b236 <DumpConnection+0x72>
					
                }  
            }
        }
#endif // #if defined (ENABLE_CONSOLE)		
    }
    b1ee:	b003      	add	sp, #12
    b1f0:	bc0c      	pop	{r2, r3}
    b1f2:	4690      	mov	r8, r2
    b1f4:	469a      	mov	sl, r3
    b1f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            printf("\r\n\r\nMy Address: 0x");
    b1f8:	484c      	ldr	r0, [pc, #304]	; (b32c <DumpConnection+0x168>)
    b1fa:	4b4d      	ldr	r3, [pc, #308]	; (b330 <DumpConnection+0x16c>)
    b1fc:	4798      	blx	r3
    b1fe:	4c4d      	ldr	r4, [pc, #308]	; (b334 <DumpConnection+0x170>)
    b200:	0026      	movs	r6, r4
    b202:	3e08      	subs	r6, #8
				printf("%02x",myLongAddress[MY_ADDRESS_LENGTH-1-i]);
    b204:	4f4a      	ldr	r7, [pc, #296]	; (b330 <DumpConnection+0x16c>)
    b206:	79e1      	ldrb	r1, [r4, #7]
    b208:	484b      	ldr	r0, [pc, #300]	; (b338 <DumpConnection+0x174>)
    b20a:	47b8      	blx	r7
    b20c:	3c01      	subs	r4, #1
            for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    b20e:	42b4      	cmp	r4, r6
    b210:	d1f9      	bne.n	b206 <DumpConnection+0x42>
                printf("  PANID: 0x");
    b212:	484a      	ldr	r0, [pc, #296]	; (b33c <DumpConnection+0x178>)
    b214:	4c46      	ldr	r4, [pc, #280]	; (b330 <DumpConnection+0x16c>)
    b216:	47a0      	blx	r4
                printf("%x",myPANID.v[1]);
    b218:	4f49      	ldr	r7, [pc, #292]	; (b340 <DumpConnection+0x17c>)
    b21a:	7879      	ldrb	r1, [r7, #1]
    b21c:	4e49      	ldr	r6, [pc, #292]	; (b344 <DumpConnection+0x180>)
    b21e:	0030      	movs	r0, r6
    b220:	47a0      	blx	r4
                printf("%x",myPANID.v[0]);
    b222:	7839      	ldrb	r1, [r7, #0]
    b224:	0030      	movs	r0, r6
    b226:	47a0      	blx	r4
            printf("  Channel: ");
    b228:	4847      	ldr	r0, [pc, #284]	; (b348 <DumpConnection+0x184>)
    b22a:	47a0      	blx	r4
            printf("%d",currentChannel);
    b22c:	4b47      	ldr	r3, [pc, #284]	; (b34c <DumpConnection+0x188>)
    b22e:	7819      	ldrb	r1, [r3, #0]
    b230:	4847      	ldr	r0, [pc, #284]	; (b350 <DumpConnection+0x18c>)
    b232:	47a0      	blx	r4
    b234:	e7ce      	b.n	b1d4 <DumpConnection+0x10>
                printf("%02x",index);
    b236:	0029      	movs	r1, r5
    b238:	483f      	ldr	r0, [pc, #252]	; (b338 <DumpConnection+0x174>)
    b23a:	4c3d      	ldr	r4, [pc, #244]	; (b330 <DumpConnection+0x16c>)
    b23c:	47a0      	blx	r4
                printf("\t\t\t");
    b23e:	4845      	ldr	r0, [pc, #276]	; (b354 <DumpConnection+0x190>)
    b240:	47a0      	blx	r4
    b242:	00ae      	lsls	r6, r5, #2
    b244:	1976      	adds	r6, r6, r5
    b246:	0076      	lsls	r6, r6, #1
    b248:	1df4      	adds	r4, r6, #7
    b24a:	4b37      	ldr	r3, [pc, #220]	; (b328 <DumpConnection+0x164>)
    b24c:	18e4      	adds	r4, r4, r3
    b24e:	3e01      	subs	r6, #1
    b250:	18f6      	adds	r6, r6, r3
                        printf("%02x", ConnectionTable[index].Address[MY_ADDRESS_LENGTH-1-i] );
    b252:	4f37      	ldr	r7, [pc, #220]	; (b330 <DumpConnection+0x16c>)
    b254:	7821      	ldrb	r1, [r4, #0]
    b256:	4838      	ldr	r0, [pc, #224]	; (b338 <DumpConnection+0x174>)
    b258:	47b8      	blx	r7
    b25a:	3c01      	subs	r4, #1
                for(i = 0; i < 8; i++)
    b25c:	42b4      	cmp	r4, r6
    b25e:	d1f9      	bne.n	b254 <DumpConnection+0x90>
                printf("/t");
    b260:	483d      	ldr	r0, [pc, #244]	; (b358 <DumpConnection+0x194>)
    b262:	4f33      	ldr	r7, [pc, #204]	; (b330 <DumpConnection+0x16c>)
    b264:	47b8      	blx	r7
                        printf("%02x", ConnectionTable[index].PeerInfo[i] );
    b266:	4e30      	ldr	r6, [pc, #192]	; (b328 <DumpConnection+0x164>)
    b268:	00ac      	lsls	r4, r5, #2
    b26a:	1963      	adds	r3, r4, r5
    b26c:	005b      	lsls	r3, r3, #1
    b26e:	18f3      	adds	r3, r6, r3
    b270:	7a59      	ldrb	r1, [r3, #9]
    b272:	4831      	ldr	r0, [pc, #196]	; (b338 <DumpConnection+0x174>)
    b274:	47b8      	blx	r7
				printf("\t");
    b276:	2009      	movs	r0, #9
    b278:	4b38      	ldr	r3, [pc, #224]	; (b35c <DumpConnection+0x198>)
    b27a:	4698      	mov	r8, r3
    b27c:	4798      	blx	r3
				printf("\t");
    b27e:	2009      	movs	r0, #9
    b280:	47c0      	blx	r8
				printf("%d", ConnectionTable[index].status.Val );
    b282:	1964      	adds	r4, r4, r5
    b284:	0064      	lsls	r4, r4, #1
    b286:	1934      	adds	r4, r6, r4
    b288:	7a21      	ldrb	r1, [r4, #8]
    b28a:	4831      	ldr	r0, [pc, #196]	; (b350 <DumpConnection+0x18c>)
    b28c:	47b8      	blx	r7
                printf("\r\n");
    b28e:	4834      	ldr	r0, [pc, #208]	; (b360 <DumpConnection+0x19c>)
    b290:	4b24      	ldr	r3, [pc, #144]	; (b324 <DumpConnection+0x160>)
    b292:	4798      	blx	r3
    b294:	e7ab      	b.n	b1ee <DumpConnection+0x2a>
            printf("\r\n\r\nConnection     PeerLongAddress     PeerInfo\tRxOnStatus\r\n");  
    b296:	4833      	ldr	r0, [pc, #204]	; (b364 <DumpConnection+0x1a0>)
    b298:	4b22      	ldr	r3, [pc, #136]	; (b324 <DumpConnection+0x160>)
    b29a:	4798      	blx	r3
    b29c:	4b32      	ldr	r3, [pc, #200]	; (b368 <DumpConnection+0x1a4>)
    b29e:	4698      	mov	r8, r3
    b2a0:	2500      	movs	r5, #0
                if( ConnectionTable[i].status.bits.isValid )
    b2a2:	4b21      	ldr	r3, [pc, #132]	; (b328 <DumpConnection+0x164>)
    b2a4:	469a      	mov	sl, r3
    b2a6:	e020      	b.n	b2ea <DumpConnection+0x126>
                    printf("    ");
    b2a8:	4830      	ldr	r0, [pc, #192]	; (b36c <DumpConnection+0x1a8>)
    b2aa:	4e21      	ldr	r6, [pc, #132]	; (b330 <DumpConnection+0x16c>)
    b2ac:	47b0      	blx	r6
                            printf("%02x", ConnectionTable[i].PeerInfo[j] );
    b2ae:	4643      	mov	r3, r8
    b2b0:	7899      	ldrb	r1, [r3, #2]
    b2b2:	4821      	ldr	r0, [pc, #132]	; (b338 <DumpConnection+0x174>)
    b2b4:	47b0      	blx	r6
					printf("\t");
    b2b6:	2009      	movs	r0, #9
    b2b8:	4c28      	ldr	r4, [pc, #160]	; (b35c <DumpConnection+0x198>)
    b2ba:	47a0      	blx	r4
					printf("\t");
    b2bc:	2009      	movs	r0, #9
    b2be:	47a0      	blx	r4
					printf("%02x", ConnectionTable[i].status.bits.RXOnWhenIdle );					
    b2c0:	9a01      	ldr	r2, [sp, #4]
    b2c2:	0093      	lsls	r3, r2, #2
    b2c4:	189f      	adds	r7, r3, r2
    b2c6:	007f      	lsls	r7, r7, #1
    b2c8:	4b17      	ldr	r3, [pc, #92]	; (b328 <DumpConnection+0x164>)
    b2ca:	19df      	adds	r7, r3, r7
    b2cc:	7a39      	ldrb	r1, [r7, #8]
    b2ce:	07c9      	lsls	r1, r1, #31
    b2d0:	0fc9      	lsrs	r1, r1, #31
    b2d2:	4819      	ldr	r0, [pc, #100]	; (b338 <DumpConnection+0x174>)
    b2d4:	47b0      	blx	r6
                    printf("\r\n");
    b2d6:	4822      	ldr	r0, [pc, #136]	; (b360 <DumpConnection+0x19c>)
    b2d8:	4b12      	ldr	r3, [pc, #72]	; (b324 <DumpConnection+0x160>)
    b2da:	4798      	blx	r3
    b2dc:	3501      	adds	r5, #1
    b2de:	230a      	movs	r3, #10
    b2e0:	469c      	mov	ip, r3
    b2e2:	44e0      	add	r8, ip
            for(i = 0; i < CONNECTION_SIZE; i++)
    b2e4:	2d05      	cmp	r5, #5
    b2e6:	d100      	bne.n	b2ea <DumpConnection+0x126>
    b2e8:	e781      	b.n	b1ee <DumpConnection+0x2a>
                if( ConnectionTable[i].status.bits.isValid )
    b2ea:	9501      	str	r5, [sp, #4]
    b2ec:	00ab      	lsls	r3, r5, #2
    b2ee:	195b      	adds	r3, r3, r5
    b2f0:	005b      	lsls	r3, r3, #1
    b2f2:	4453      	add	r3, sl
    b2f4:	7a1b      	ldrb	r3, [r3, #8]
    b2f6:	09db      	lsrs	r3, r3, #7
    b2f8:	d0f0      	beq.n	b2dc <DumpConnection+0x118>
                    printf("%02x",i);
    b2fa:	0029      	movs	r1, r5
    b2fc:	480e      	ldr	r0, [pc, #56]	; (b338 <DumpConnection+0x174>)
    b2fe:	4b0c      	ldr	r3, [pc, #48]	; (b330 <DumpConnection+0x16c>)
    b300:	4798      	blx	r3
                    printf("             ");
    b302:	481b      	ldr	r0, [pc, #108]	; (b370 <DumpConnection+0x1ac>)
    b304:	4b0a      	ldr	r3, [pc, #40]	; (b330 <DumpConnection+0x16c>)
    b306:	4798      	blx	r3
    b308:	4647      	mov	r7, r8
    b30a:	3f08      	subs	r7, #8
    b30c:	4644      	mov	r4, r8
                            printf("%02x", ConnectionTable[i].Address[MY_ADDRESS_LENGTH-1-j] );
    b30e:	4e08      	ldr	r6, [pc, #32]	; (b330 <DumpConnection+0x16c>)
    b310:	7821      	ldrb	r1, [r4, #0]
    b312:	4809      	ldr	r0, [pc, #36]	; (b338 <DumpConnection+0x174>)
    b314:	47b0      	blx	r6
    b316:	3c01      	subs	r4, #1
                    for(j = 0; j < 8; j++)
    b318:	42bc      	cmp	r4, r7
    b31a:	d1f9      	bne.n	b310 <DumpConnection+0x14c>
    b31c:	e7c4      	b.n	b2a8 <DumpConnection+0xe4>
    b31e:	46c0      	nop			; (mov r8, r8)
    b320:	00018e0c 	.word	0x00018e0c
    b324:	0001731d 	.word	0x0001731d
    b328:	20002674 	.word	0x20002674
    b32c:	00018de0 	.word	0x00018de0
    b330:	00017201 	.word	0x00017201
    b334:	20000014 	.word	0x20000014
    b338:	0001847c 	.word	0x0001847c
    b33c:	00018df4 	.word	0x00018df4
    b340:	200026c8 	.word	0x200026c8
    b344:	0001848c 	.word	0x0001848c
    b348:	00018e00 	.word	0x00018e00
    b34c:	20000011 	.word	0x20000011
    b350:	00018160 	.word	0x00018160
    b354:	00018e44 	.word	0x00018e44
    b358:	00018e48 	.word	0x00018e48
    b35c:	00017235 	.word	0x00017235
    b360:	00018734 	.word	0x00018734
    b364:	00018e4c 	.word	0x00018e4c
    b368:	2000267b 	.word	0x2000267b
    b36c:	00018e98 	.word	0x00018e98
    b370:	00018e88 	.word	0x00018e88

0000b374 <AddConnection>:
     *                  connection operation ends if an entry is added 
     *                  successfully
     *
     ********************************************************************/
    uint8_t AddConnection(void)
    {
    b374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b376:	46d6      	mov	lr, sl
    b378:	464f      	mov	r7, r9
    b37a:	b580      	push	{r7, lr}
        {
            // check if the entry is valid
            if( ConnectionTable[i].status.bits.isValid )
            {
                // check if the entry address matches source address of current received packet
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    b37c:	4b3b      	ldr	r3, [pc, #236]	; (b46c <AddConnection+0xf8>)
    b37e:	685e      	ldr	r6, [r3, #4]
    b380:	4d3b      	ldr	r5, [pc, #236]	; (b470 <AddConnection+0xfc>)
    b382:	2400      	movs	r4, #0
        uint8_t connectionSlot = 0xFF;
    b384:	27ff      	movs	r7, #255	; 0xff
            if( ConnectionTable[i].status.bits.isValid )
    b386:	46a9      	mov	r9, r5
    b388:	e005      	b.n	b396 <AddConnection+0x22>
                    connectionSlot = i;
                    status = STATUS_EXISTS;
                    break;
                }
            }
            else if( connectionSlot == 0xFF )
    b38a:	2fff      	cmp	r7, #255	; 0xff
    b38c:	d015      	beq.n	b3ba <AddConnection+0x46>
    b38e:	3401      	adds	r4, #1
    b390:	350a      	adds	r5, #10
        for(i = 0; i < CONNECTION_SIZE; i++)
    b392:	2c05      	cmp	r4, #5
    b394:	d013      	beq.n	b3be <AddConnection+0x4a>
    b396:	b2e3      	uxtb	r3, r4
    b398:	469a      	mov	sl, r3
            if( ConnectionTable[i].status.bits.isValid )
    b39a:	00a3      	lsls	r3, r4, #2
    b39c:	191b      	adds	r3, r3, r4
    b39e:	005b      	lsls	r3, r3, #1
    b3a0:	444b      	add	r3, r9
    b3a2:	7a1b      	ldrb	r3, [r3, #8]
    b3a4:	09db      	lsrs	r3, r3, #7
    b3a6:	d0f0      	beq.n	b38a <AddConnection+0x16>
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    b3a8:	0029      	movs	r1, r5
    b3aa:	0030      	movs	r0, r6
    b3ac:	4b31      	ldr	r3, [pc, #196]	; (b474 <AddConnection+0x100>)
    b3ae:	4798      	blx	r3
    b3b0:	2800      	cmp	r0, #0
    b3b2:	d0ec      	beq.n	b38e <AddConnection+0x1a>
    b3b4:	4657      	mov	r7, sl
                    status = STATUS_EXISTS;
    b3b6:	2401      	movs	r4, #1
    b3b8:	e002      	b.n	b3c0 <AddConnection+0x4c>
            else if( connectionSlot == 0xFF )
    b3ba:	4657      	mov	r7, sl
    b3bc:	e7e7      	b.n	b38e <AddConnection+0x1a>
        uint8_t status = STATUS_SUCCESS;
    b3be:	2400      	movs	r4, #0
                // store the first empty slot
                connectionSlot = i;
            }  
        }
            
        if( connectionSlot == 0xFF )
    b3c0:	2fff      	cmp	r7, #255	; 0xff
    b3c2:	d04c      	beq.n	b45e <AddConnection+0xea>
        {
            return STATUS_NOT_ENOUGH_SPACE;
        }
        else 
        {
            if( ConnMode >= ENABLE_PREV_CONN )
    b3c4:	4b2c      	ldr	r3, [pc, #176]	; (b478 <AddConnection+0x104>)
    b3c6:	781b      	ldrb	r3, [r3, #0]
    b3c8:	2b00      	cmp	r3, #0
    b3ca:	d149      	bne.n	b460 <AddConnection+0xec>
            {
                return status;
            }
            MyindexinPC = connectionSlot;    
    b3cc:	4b2b      	ldr	r3, [pc, #172]	; (b47c <AddConnection+0x108>)
    b3ce:	701f      	strb	r7, [r3, #0]
    b3d0:	00b9      	lsls	r1, r7, #2
    b3d2:	19c9      	adds	r1, r1, r7
    b3d4:	0049      	lsls	r1, r1, #1
    b3d6:	4b26      	ldr	r3, [pc, #152]	; (b470 <AddConnection+0xfc>)
    b3d8:	18c9      	adds	r1, r1, r3
    b3da:	2300      	movs	r3, #0
            // store the source address
            for(i = 0; i < 8; i++)
            {
                ConnectionTable[connectionSlot].Address[i] = rxMessage.SourceAddress[i];
    b3dc:	0038      	movs	r0, r7
    b3de:	5cf2      	ldrb	r2, [r6, r3]
    b3e0:	54ca      	strb	r2, [r1, r3]
    b3e2:	3301      	adds	r3, #1
            for(i = 0; i < 8; i++)
    b3e4:	2b08      	cmp	r3, #8
    b3e6:	d1fa      	bne.n	b3de <AddConnection+0x6a>
            }
			ConnectionTable[connectionSlot].status.bits.isValid = 1;
    b3e8:	0083      	lsls	r3, r0, #2
    b3ea:	181b      	adds	r3, r3, r0
    b3ec:	005b      	lsls	r3, r3, #1
    b3ee:	4a20      	ldr	r2, [pc, #128]	; (b470 <AddConnection+0xfc>)
    b3f0:	18d3      	adds	r3, r2, r3
    b3f2:	7a19      	ldrb	r1, [r3, #8]
    b3f4:	2280      	movs	r2, #128	; 0x80
    b3f6:	4252      	negs	r2, r2
    b3f8:	430a      	orrs	r2, r1
    b3fa:	721a      	strb	r2, [r3, #8]
			if(rxMessage.Payload[2] & 0x01)
    b3fc:	4b1b      	ldr	r3, [pc, #108]	; (b46c <AddConnection+0xf8>)
    b3fe:	689b      	ldr	r3, [r3, #8]
    b400:	789a      	ldrb	r2, [r3, #2]
    b402:	07d2      	lsls	r2, r2, #31
    b404:	d521      	bpl.n	b44a <AddConnection+0xd6>
				{
					ConnectionTable[connectionSlot].status.bits.RXOnWhenIdle = 1;
    b406:	0082      	lsls	r2, r0, #2
    b408:	1812      	adds	r2, r2, r0
    b40a:	0052      	lsls	r2, r2, #1
    b40c:	4918      	ldr	r1, [pc, #96]	; (b470 <AddConnection+0xfc>)
    b40e:	188a      	adds	r2, r1, r2
    b410:	7a11      	ldrb	r1, [r2, #8]
    b412:	2501      	movs	r5, #1
    b414:	4329      	orrs	r1, r5
    b416:	7211      	strb	r1, [r2, #8]
            //ConnectionTable[connectionSlot].status.Val = temp;
            // store possible additional connection payload
            #if ADDITIONAL_NODE_ID_SIZE > 0
                for(i = 0; i < ADDITIONAL_NODE_ID_SIZE; i++)
                {
                    ConnectionTable[connectionSlot].PeerInfo[i] = rxMessage.Payload[3+i];
    b418:	78d9      	ldrb	r1, [r3, #3]
    b41a:	0082      	lsls	r2, r0, #2
    b41c:	1810      	adds	r0, r2, r0
    b41e:	0043      	lsls	r3, r0, #1
    b420:	4813      	ldr	r0, [pc, #76]	; (b470 <AddConnection+0xfc>)
    b422:	18c0      	adds	r0, r0, r3
    b424:	7241      	strb	r1, [r0, #9]
                }
            #endif
    
            #ifdef ENABLE_SECURITY
                // if security is enabled, clear the incoming frame control
                IncomingFrameCounter[connectionSlot].Val = 0;
    b426:	2100      	movs	r1, #0
    b428:	4b15      	ldr	r3, [pc, #84]	; (b480 <AddConnection+0x10c>)
    b42a:	50d1      	str	r1, [r2, r3]
            #endif
            LatestConnection = connectionSlot;
    b42c:	4b15      	ldr	r3, [pc, #84]	; (b484 <AddConnection+0x110>)
    b42e:	701f      	strb	r7, [r3, #0]
            P2PStatus.bits.SearchConnection = 0;   
    b430:	4a15      	ldr	r2, [pc, #84]	; (b488 <AddConnection+0x114>)
    b432:	7813      	ldrb	r3, [r2, #0]
    b434:	3110      	adds	r1, #16
    b436:	438b      	bics	r3, r1
    b438:	7013      	strb	r3, [r2, #0]
        }
        conn_size = Total_Connections();
    b43a:	4b14      	ldr	r3, [pc, #80]	; (b48c <AddConnection+0x118>)
    b43c:	4798      	blx	r3
    b43e:	4b14      	ldr	r3, [pc, #80]	; (b490 <AddConnection+0x11c>)
    b440:	7018      	strb	r0, [r3, #0]
    #if defined (ENABLE_NETWORK_FREEZER)
		PDS_Store(PDS_EDC_ID);
    b442:	2007      	movs	r0, #7
    b444:	4b13      	ldr	r3, [pc, #76]	; (b494 <AddConnection+0x120>)
    b446:	4798      	blx	r3
    #endif

        return status;
    b448:	e00a      	b.n	b460 <AddConnection+0xec>
					ConnectionTable[connectionSlot].status.bits.RXOnWhenIdle = 0;
    b44a:	0082      	lsls	r2, r0, #2
    b44c:	1812      	adds	r2, r2, r0
    b44e:	0052      	lsls	r2, r2, #1
    b450:	4907      	ldr	r1, [pc, #28]	; (b470 <AddConnection+0xfc>)
    b452:	188a      	adds	r2, r1, r2
    b454:	7a11      	ldrb	r1, [r2, #8]
    b456:	2501      	movs	r5, #1
    b458:	43a9      	bics	r1, r5
    b45a:	7211      	strb	r1, [r2, #8]
    b45c:	e7dc      	b.n	b418 <AddConnection+0xa4>
            return STATUS_NOT_ENOUGH_SPACE;
    b45e:	24f1      	movs	r4, #241	; 0xf1
    }
    b460:	0020      	movs	r0, r4
    b462:	bc0c      	pop	{r2, r3}
    b464:	4691      	mov	r9, r2
    b466:	469a      	mov	sl, r3
    b468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b46a:	46c0      	nop			; (mov r8, r8)
    b46c:	2000295c 	.word	0x2000295c
    b470:	20002674 	.word	0x20002674
    b474:	0000aef1 	.word	0x0000aef1
    b478:	20000010 	.word	0x20000010
    b47c:	200026e8 	.word	0x200026e8
    b480:	200026d4 	.word	0x200026d4
    b484:	20002670 	.word	0x20002670
    b488:	200026ec 	.word	0x200026ec
    b48c:	0000acc1 	.word	0x0000acc1
    b490:	200026d1 	.word	0x200026d1
    b494:	00009569 	.word	0x00009569

0000b498 <MiApp_ConnectionMode>:
 * Remarks:    
 *      None
 *
 *****************************************************************************************/ 
void MiApp_ConnectionMode(INPUT uint8_t Mode)
{
    b498:	b510      	push	{r4, lr}
    if( Mode > 3 )
    b49a:	2803      	cmp	r0, #3
    b49c:	d900      	bls.n	b4a0 <MiApp_ConnectionMode+0x8>
    P2PCapacityInfo = (P2PCapacityInfo & 0x0F) | (ConnMode << 4);
    
    #if defined(ENABLE_NETWORK_FREEZER)
		PDS_Store(PDS_CONNECTION_MODE_ID);
    #endif
}
    b49e:	bd10      	pop	{r4, pc}
    ConnMode = Mode;
    b4a0:	4b06      	ldr	r3, [pc, #24]	; (b4bc <MiApp_ConnectionMode+0x24>)
    b4a2:	7018      	strb	r0, [r3, #0]
    P2PCapacityInfo = (P2PCapacityInfo & 0x0F) | (ConnMode << 4);
    b4a4:	4a06      	ldr	r2, [pc, #24]	; (b4c0 <MiApp_ConnectionMode+0x28>)
    b4a6:	7811      	ldrb	r1, [r2, #0]
    b4a8:	230f      	movs	r3, #15
    b4aa:	400b      	ands	r3, r1
    b4ac:	0100      	lsls	r0, r0, #4
    b4ae:	4318      	orrs	r0, r3
    b4b0:	7010      	strb	r0, [r2, #0]
		PDS_Store(PDS_CONNECTION_MODE_ID);
    b4b2:	2004      	movs	r0, #4
    b4b4:	4b03      	ldr	r3, [pc, #12]	; (b4c4 <MiApp_ConnectionMode+0x2c>)
    b4b6:	4798      	blx	r3
    b4b8:	e7f1      	b.n	b49e <MiApp_ConnectionMode+0x6>
    b4ba:	46c0      	nop			; (mov r8, r8)
    b4bc:	20000010 	.word	0x20000010
    b4c0:	200026c1 	.word	0x200026c1
    b4c4:	00009569 	.word	0x00009569

0000b4c8 <MiApp_SubscribeDataIndicationCallback>:
 *      None
 *
 *****************************************************************************************/      
bool  MiApp_SubscribeDataIndicationCallback(PacketIndCallback_t callback)
{
    if (NULL != callback)
    b4c8:	2800      	cmp	r0, #0
    b4ca:	d003      	beq.n	b4d4 <MiApp_SubscribeDataIndicationCallback+0xc>
    {
        pktRxcallback = callback;
    b4cc:	4b02      	ldr	r3, [pc, #8]	; (b4d8 <MiApp_SubscribeDataIndicationCallback+0x10>)
    b4ce:	6018      	str	r0, [r3, #0]
        return true;
    b4d0:	2001      	movs	r0, #1
    }
    return false;
}
    b4d2:	4770      	bx	lr
    return false;
    b4d4:	2000      	movs	r0, #0
    b4d6:	e7fc      	b.n	b4d2 <MiApp_SubscribeDataIndicationCallback+0xa>
    b4d8:	200002a4 	.word	0x200002a4

0000b4dc <calculate_ToA>:
	}
}
#endif

uint16_t calculate_ToA(uint8_t payload_length)
{
    b4dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    b4de:	46ce      	mov	lr, r9
    b4e0:	4647      	mov	r7, r8
    b4e2:	b580      	push	{r7, lr}
    b4e4:	b087      	sub	sp, #28
    b4e6:	4680      	mov	r8, r0
	   Rev.7 - May 2020 */
	
	/* Tested only with EU868 channel plan SF = 7 to 12 , BW = 125 kHz */
	 
	    //LoRa Modem Settings
	    uint8_t spreadFactor = 0;
    b4e8:	ab04      	add	r3, sp, #16
    b4ea:	1dde      	adds	r6, r3, #7
    b4ec:	2300      	movs	r3, #0
    b4ee:	7033      	strb	r3, [r6, #0]
	    uint8_t bandWidth = 125;
	    uint8_t codingRate = 0;
    b4f0:	aa04      	add	r2, sp, #16
    b4f2:	1d97      	adds	r7, r2, #6
    b4f4:	7193      	strb	r3, [r2, #6]
	    bool ldro = false;   //LowDataRateOptimize
	    
	    //Packet Configuration
	    uint16_t programmedPreambleLength = 0;
    b4f6:	ad05      	add	r5, sp, #20
    b4f8:	802b      	strh	r3, [r5, #0]
	    bool implicitHeaderMode = 0; //Implicit or Explicit header
	    bool crcEnable = 0; //CRC
    b4fa:	3303      	adds	r3, #3
    b4fc:	4694      	mov	ip, r2
    b4fe:	4463      	add	r3, ip
    b500:	4699      	mov	r9, r3
    b502:	2300      	movs	r3, #0
    b504:	464a      	mov	r2, r9
    b506:	7013      	strb	r3, [r2, #0]
		if(payload_length > 255)
		{
			payload_length = 255;
		}
			    
	    RADIO_GetAttr(SPREADING_FACTOR,(void *)&spreadFactor);
    b508:	0031      	movs	r1, r6
    b50a:	2016      	movs	r0, #22
    b50c:	4c39      	ldr	r4, [pc, #228]	; (b5f4 <calculate_ToA+0x118>)
    b50e:	47a0      	blx	r4
	    RADIO_GetAttr(PREAMBLE_LEN,(void *)&programmedPreambleLength);
    b510:	0029      	movs	r1, r5
    b512:	2003      	movs	r0, #3
    b514:	47a0      	blx	r4
	    RADIO_GetAttr(CRC_ON,(void *)&crcEnable);
    b516:	4649      	mov	r1, r9
    b518:	2014      	movs	r0, #20
    b51a:	47a0      	blx	r4
	    RADIO_GetAttr(ERROR_CODING_RATE,(void *)&codingRate);
    b51c:	0039      	movs	r1, r7
    b51e:	200b      	movs	r0, #11
    b520:	47a0      	blx	r4


	    symbolRate = (bandWidth * 1000) /  ((float)(1 << spreadFactor));
    b522:	7836      	ldrb	r6, [r6, #0]
    b524:	2001      	movs	r0, #1
    b526:	40b0      	lsls	r0, r6
    b528:	4b33      	ldr	r3, [pc, #204]	; (b5f8 <calculate_ToA+0x11c>)
    b52a:	4798      	blx	r3
    b52c:	1c01      	adds	r1, r0, #0
    b52e:	4c33      	ldr	r4, [pc, #204]	; (b5fc <calculate_ToA+0x120>)
    b530:	4833      	ldr	r0, [pc, #204]	; (b600 <calculate_ToA+0x124>)
    b532:	47a0      	blx	r4
    b534:	1c01      	adds	r1, r0, #0
	    symbolTime = 1000 / (symbolRate);
    b536:	4833      	ldr	r0, [pc, #204]	; (b604 <calculate_ToA+0x128>)
    b538:	47a0      	blx	r4
    b53a:	1c04      	adds	r4, r0, #0
	    preambleDuration = (programmedPreambleLength + 4.25) * symbolTime;
    b53c:	8828      	ldrh	r0, [r5, #0]
    b53e:	4b32      	ldr	r3, [pc, #200]	; (b608 <calculate_ToA+0x12c>)
    b540:	4798      	blx	r3
    b542:	2200      	movs	r2, #0
    b544:	4b31      	ldr	r3, [pc, #196]	; (b60c <calculate_ToA+0x130>)
    b546:	4d32      	ldr	r5, [pc, #200]	; (b610 <calculate_ToA+0x134>)
    b548:	47a8      	blx	r5
    b54a:	9000      	str	r0, [sp, #0]
    b54c:	9101      	str	r1, [sp, #4]
    b54e:	1c20      	adds	r0, r4, #0
    b550:	4b30      	ldr	r3, [pc, #192]	; (b614 <calculate_ToA+0x138>)
    b552:	4798      	blx	r3
    b554:	0002      	movs	r2, r0
    b556:	000b      	movs	r3, r1
    b558:	9800      	ldr	r0, [sp, #0]
    b55a:	9901      	ldr	r1, [sp, #4]
    b55c:	4d2e      	ldr	r5, [pc, #184]	; (b618 <calculate_ToA+0x13c>)
    b55e:	47a8      	blx	r5
    b560:	4b2e      	ldr	r3, [pc, #184]	; (b61c <calculate_ToA+0x140>)
    b562:	4798      	blx	r3
    b564:	9000      	str	r0, [sp, #0]

	    if ( ((spreadFactor == 12) && ((bandWidth == 125) || (bandWidth == 250))) || ((spreadFactor == 11) && (bandWidth == 125)))
    b566:	2e0c      	cmp	r6, #12
    b568:	d040      	beq.n	b5ec <calculate_ToA+0x110>
    b56a:	0033      	movs	r3, r6
    b56c:	3b0b      	subs	r3, #11
    b56e:	425a      	negs	r2, r3
    b570:	4153      	adcs	r3, r2
    b572:	b2db      	uxtb	r3, r3
	    {
		    ldro = false;
	    }
	    
	    ceilValueNumerator = (8 * payload_length - 4 * spreadFactor + 28 + 16 * crcEnable - 20 * implicitHeaderMode);
	    ceilValueDenominator= (4 * (spreadFactor - 2 * ldro));
    b574:	005b      	lsls	r3, r3, #1
    b576:	1af3      	subs	r3, r6, r3
    b578:	009b      	lsls	r3, r3, #2
	    ceilValue = (ceilValueNumerator + ceilValueDenominator - 1.0) / ceilValueDenominator;
    b57a:	b2df      	uxtb	r7, r3
	    ceilValueNumerator = (8 * payload_length - 4 * spreadFactor + 28 + 16 * crcEnable - 20 * implicitHeaderMode);
    b57c:	4643      	mov	r3, r8
    b57e:	0058      	lsls	r0, r3, #1
    b580:	1b80      	subs	r0, r0, r6
    b582:	3007      	adds	r0, #7
    b584:	ab04      	add	r3, sp, #16
    b586:	3303      	adds	r3, #3
    b588:	781b      	ldrb	r3, [r3, #0]
    b58a:	009b      	lsls	r3, r3, #2
    b58c:	18c0      	adds	r0, r0, r3
    b58e:	0080      	lsls	r0, r0, #2
	    ceilValue = (ceilValueNumerator + ceilValueDenominator - 1.0) / ceilValueDenominator;
    b590:	b280      	uxth	r0, r0
    b592:	19c0      	adds	r0, r0, r7
    b594:	4d1c      	ldr	r5, [pc, #112]	; (b608 <calculate_ToA+0x12c>)
    b596:	47a8      	blx	r5
    b598:	2200      	movs	r2, #0
    b59a:	4b21      	ldr	r3, [pc, #132]	; (b620 <calculate_ToA+0x144>)
    b59c:	4e21      	ldr	r6, [pc, #132]	; (b624 <calculate_ToA+0x148>)
    b59e:	47b0      	blx	r6
    b5a0:	9002      	str	r0, [sp, #8]
    b5a2:	9103      	str	r1, [sp, #12]
    b5a4:	0038      	movs	r0, r7
    b5a6:	47a8      	blx	r5
    b5a8:	0002      	movs	r2, r0
    b5aa:	000b      	movs	r3, r1
    b5ac:	9802      	ldr	r0, [sp, #8]
    b5ae:	9903      	ldr	r1, [sp, #12]
    b5b0:	4e1d      	ldr	r6, [pc, #116]	; (b628 <calculate_ToA+0x14c>)
    b5b2:	47b0      	blx	r6
    b5b4:	4b1d      	ldr	r3, [pc, #116]	; (b62c <calculate_ToA+0x150>)
    b5b6:	4798      	blx	r3
	    
	    if ((ceilValue * (codingRate + 4)) > 0)
    b5b8:	b282      	uxth	r2, r0
    b5ba:	ab04      	add	r3, sp, #16
    b5bc:	7998      	ldrb	r0, [r3, #6]
    b5be:	3004      	adds	r0, #4
    b5c0:	4350      	muls	r0, r2
    b5c2:	2800      	cmp	r0, #0
    b5c4:	dd14      	ble.n	b5f0 <calculate_ToA+0x114>
	    {
		    maxCeilValue = ceilValue * (codingRate + 4);
    b5c6:	4b0c      	ldr	r3, [pc, #48]	; (b5f8 <calculate_ToA+0x11c>)
    b5c8:	4798      	blx	r3
	    else
	    {
		    maxCeilValue = 0;
	    }

	    numberOfPayloadSymbols = 8 + maxCeilValue;
    b5ca:	4e19      	ldr	r6, [pc, #100]	; (b630 <calculate_ToA+0x154>)
    b5cc:	2182      	movs	r1, #130	; 0x82
    b5ce:	05c9      	lsls	r1, r1, #23
    b5d0:	47b0      	blx	r6
	    payloadDuration = numberOfPayloadSymbols * symbolTime;
    b5d2:	1c21      	adds	r1, r4, #0
    b5d4:	4b17      	ldr	r3, [pc, #92]	; (b634 <calculate_ToA+0x158>)
    b5d6:	4798      	blx	r3
		
	    totalTimeOnAir = preambleDuration + payloadDuration;
    b5d8:	9900      	ldr	r1, [sp, #0]
    b5da:	47b0      	blx	r6
		
		return ((uint16_t)totalTimeOnAir) ;
    b5dc:	4b16      	ldr	r3, [pc, #88]	; (b638 <calculate_ToA+0x15c>)
    b5de:	4798      	blx	r3
    b5e0:	b280      	uxth	r0, r0
    b5e2:	b007      	add	sp, #28
    b5e4:	bc0c      	pop	{r2, r3}
    b5e6:	4690      	mov	r8, r2
    b5e8:	4699      	mov	r9, r3
    b5ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		    ldro =  true;
    b5ec:	2301      	movs	r3, #1
    b5ee:	e7c1      	b.n	b574 <calculate_ToA+0x98>
		    maxCeilValue = 0;
    b5f0:	2000      	movs	r0, #0
    b5f2:	e7ea      	b.n	b5ca <calculate_ToA+0xee>
    b5f4:	0000e6c5 	.word	0x0000e6c5
    b5f8:	00014d3d 	.word	0x00014d3d
    b5fc:	000143a5 	.word	0x000143a5
    b600:	47f42400 	.word	0x47f42400
    b604:	447a0000 	.word	0x447a0000
    b608:	00016885 	.word	0x00016885
    b60c:	40110000 	.word	0x40110000
    b610:	00014e69 	.word	0x00014e69
    b614:	00016979 	.word	0x00016979
    b618:	00015cf1 	.word	0x00015cf1
    b61c:	00016a1d 	.word	0x00016a1d
    b620:	3ff00000 	.word	0x3ff00000
    b624:	000161f1 	.word	0x000161f1
    b628:	00015489 	.word	0x00015489
    b62c:	00013e85 	.word	0x00013e85
    b630:	00014081 	.word	0x00014081
    b634:	00014785 	.word	0x00014785
    b638:	00013e55 	.word	0x00013e55

0000b63c <P2PTasks>:
{
    b63c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b63e:	46de      	mov	lr, fp
    b640:	4657      	mov	r7, sl
    b642:	464e      	mov	r6, r9
    b644:	4645      	mov	r5, r8
    b646:	b5e0      	push	{r5, r6, r7, lr}
    b648:	b08b      	sub	sp, #44	; 0x2c
    MiMAC_Task();
    b64a:	4bc9      	ldr	r3, [pc, #804]	; (b970 <P2PTasks+0x334>)
    b64c:	4798      	blx	r3
            if( indirectMessages[i].flags.bits.isValid )
    b64e:	4bc9      	ldr	r3, [pc, #804]	; (b974 <P2PTasks+0x338>)
    b650:	7b9b      	ldrb	r3, [r3, #14]
    b652:	07db      	lsls	r3, r3, #31
    b654:	d500      	bpl.n	b658 <P2PTasks+0x1c>
    b656:	e083      	b.n	b760 <P2PTasks+0x124>
    b658:	2391      	movs	r3, #145	; 0x91
    b65a:	005b      	lsls	r3, r3, #1
    b65c:	4ac5      	ldr	r2, [pc, #788]	; (b974 <P2PTasks+0x338>)
    b65e:	5cd3      	ldrb	r3, [r2, r3]
    b660:	07db      	lsls	r3, r3, #31
    b662:	d500      	bpl.n	b666 <P2PTasks+0x2a>
    b664:	e094      	b.n	b790 <P2PTasks+0x154>
        if( P2PStatus.bits.SaveConnection )
    b666:	4bc4      	ldr	r3, [pc, #784]	; (b978 <P2PTasks+0x33c>)
    b668:	781b      	ldrb	r3, [r3, #0]
    b66a:	079b      	lsls	r3, r3, #30
    b66c:	d500      	bpl.n	b670 <P2PTasks+0x34>
    b66e:	e0aa      	b.n	b7c6 <P2PTasks+0x18a>
	ack_timeout_variable = calculate_ToA(PACKETLEN_ACK);
    b670:	2016      	movs	r0, #22
    b672:	4bc2      	ldr	r3, [pc, #776]	; (b97c <P2PTasks+0x340>)
    b674:	4798      	blx	r3
	ack_timeout_variable = (ack_timeout_variable + TOTAL_ACK_PROCESSING_DELAY) * 1000;
    b676:	23fa      	movs	r3, #250	; 0xfa
    b678:	009b      	lsls	r3, r3, #2
    b67a:	4358      	muls	r0, r3
    b67c:	4bc0      	ldr	r3, [pc, #768]	; (b980 <P2PTasks+0x344>)
    b67e:	469c      	mov	ip, r3
    b680:	4460      	add	r0, ip
    b682:	4bc0      	ldr	r3, [pc, #768]	; (b984 <P2PTasks+0x348>)
    b684:	6018      	str	r0, [r3, #0]
	if((AckReqData) && (DataTxAckTimer.Val)) // AckReqData
    b686:	4bc0      	ldr	r3, [pc, #768]	; (b988 <P2PTasks+0x34c>)
    b688:	781b      	ldrb	r3, [r3, #0]
    b68a:	2b00      	cmp	r3, #0
    b68c:	d004      	beq.n	b698 <P2PTasks+0x5c>
    b68e:	4bbf      	ldr	r3, [pc, #764]	; (b98c <P2PTasks+0x350>)
    b690:	681b      	ldr	r3, [r3, #0]
    b692:	2b00      	cmp	r3, #0
    b694:	d000      	beq.n	b698 <P2PTasks+0x5c>
    b696:	e0ac      	b.n	b7f2 <P2PTasks+0x1b6>
    if( P2PStatus.bits.RxHasUserData == 0 && MiMAC_ReceivedPacket() )
    b698:	4bb7      	ldr	r3, [pc, #732]	; (b978 <P2PTasks+0x33c>)
    b69a:	781b      	ldrb	r3, [r3, #0]
    b69c:	071b      	lsls	r3, r3, #28
    b69e:	d500      	bpl.n	b6a2 <P2PTasks+0x66>
    b6a0:	e38c      	b.n	bdbc <P2PTasks+0x780>
    b6a2:	4bbb      	ldr	r3, [pc, #748]	; (b990 <P2PTasks+0x354>)
    b6a4:	4798      	blx	r3
    b6a6:	2800      	cmp	r0, #0
    b6a8:	d100      	bne.n	b6ac <P2PTasks+0x70>
    b6aa:	e387      	b.n	bdbc <P2PTasks+0x780>
        FW_Stat = false;  // Used for SW_Generated ACK T PAN CO
    b6ac:	2200      	movs	r2, #0
    b6ae:	4bb9      	ldr	r3, [pc, #740]	; (b994 <P2PTasks+0x358>)
    b6b0:	701a      	strb	r2, [r3, #0]
            temp_bit = MACRxPacket.flags.bits.broadcast;
    b6b2:	4bb9      	ldr	r3, [pc, #740]	; (b998 <P2PTasks+0x35c>)
    b6b4:	7819      	ldrb	r1, [r3, #0]
    b6b6:	074b      	lsls	r3, r1, #29
    b6b8:	0fdb      	lsrs	r3, r3, #31
    b6ba:	4ab8      	ldr	r2, [pc, #736]	; (b99c <P2PTasks+0x360>)
    b6bc:	7013      	strb	r3, [r2, #0]
            rxMessage.flags.bits.broadcast = temp_bit;
    b6be:	2203      	movs	r2, #3
        rxMessage.flags.bits.secEn = MACRxPacket.flags.bits.secEn;
    b6c0:	08cc      	lsrs	r4, r1, #3
    b6c2:	2001      	movs	r0, #1
    b6c4:	4004      	ands	r4, r0
    b6c6:	00e4      	lsls	r4, r4, #3
    b6c8:	4013      	ands	r3, r2
        rxMessage.flags.bits.command = (MACRxPacket.flags.bits.packetType == PACKET_TYPE_COMMAND) ? 1:0;
    b6ca:	400a      	ands	r2, r1
    b6cc:	3a01      	subs	r2, #1
    b6ce:	4255      	negs	r5, r2
    b6d0:	416a      	adcs	r2, r5
    b6d2:	4002      	ands	r2, r0
    b6d4:	0152      	lsls	r2, r2, #5
    b6d6:	4323      	orrs	r3, r4
        rxMessage.flags.bits.srcPrsnt = MACRxPacket.flags.bits.sourcePrsnt;
    b6d8:	09cc      	lsrs	r4, r1, #7
    b6da:	4020      	ands	r0, r4
    b6dc:	0180      	lsls	r0, r0, #6
    b6de:	4313      	orrs	r3, r2
    b6e0:	4303      	orrs	r3, r0
    b6e2:	4aaf      	ldr	r2, [pc, #700]	; (b9a0 <P2PTasks+0x364>)
    b6e4:	7013      	strb	r3, [r2, #0]
        if( MACRxPacket.flags.bits.sourcePrsnt )
    b6e6:	b249      	sxtb	r1, r1
    b6e8:	2900      	cmp	r1, #0
    b6ea:	da00      	bge.n	b6ee <P2PTasks+0xb2>
    b6ec:	e097      	b.n	b81e <P2PTasks+0x1e2>
            rxMessage.SourcePANID.Val = MACRxPacket.SourcePANID.Val;
    b6ee:	4aaa      	ldr	r2, [pc, #680]	; (b998 <P2PTasks+0x35c>)
    b6f0:	8a17      	ldrh	r7, [r2, #16]
    b6f2:	4bab      	ldr	r3, [pc, #684]	; (b9a0 <P2PTasks+0x364>)
    b6f4:	805f      	strh	r7, [r3, #2]
        rxMessage.PayloadSize = MACRxPacket.PayloadLen;
    b6f6:	7b11      	ldrb	r1, [r2, #12]
    b6f8:	7319      	strb	r1, [r3, #12]
        rxMessage.Payload = MACRxPacket.Payload;
    b6fa:	6895      	ldr	r5, [r2, #8]
    b6fc:	609d      	str	r5, [r3, #8]
            rxMessage.PacketLQI = MACRxPacket.LQIValue;
    b6fe:	7b90      	ldrb	r0, [r2, #14]
    b700:	4680      	mov	r8, r0
    b702:	7398      	strb	r0, [r3, #14]
            rxMessage.PacketRSSI = MACRxPacket.RSSIValue;
    b704:	7b52      	ldrb	r2, [r2, #13]
    b706:	4691      	mov	r9, r2
    b708:	735a      	strb	r2, [r3, #13]
        if( rxMessage.flags.bits.command )
    b70a:	781b      	ldrb	r3, [r3, #0]
    b70c:	069b      	lsls	r3, r3, #26
    b70e:	d400      	bmi.n	b712 <P2PTasks+0xd6>
    b710:	e332      	b.n	bd78 <P2PTasks+0x73c>
            switch( rxMessage.Payload[0] )
    b712:	782b      	ldrb	r3, [r5, #0]
    b714:	b2da      	uxtb	r2, r3
    b716:	2a83      	cmp	r2, #131	; 0x83
    b718:	d100      	bne.n	b71c <P2PTasks+0xe0>
    b71a:	e293      	b.n	bc44 <P2PTasks+0x608>
    b71c:	d800      	bhi.n	b720 <P2PTasks+0xe4>
    b71e:	e083      	b.n	b828 <P2PTasks+0x1ec>
    b720:	b2da      	uxtb	r2, r3
    b722:	2a91      	cmp	r2, #145	; 0x91
    b724:	d100      	bne.n	b728 <P2PTasks+0xec>
    b726:	e1e6      	b.n	baf6 <P2PTasks+0x4ba>
    b728:	d800      	bhi.n	b72c <P2PTasks+0xf0>
    b72a:	e094      	b.n	b856 <P2PTasks+0x21a>
    b72c:	b2da      	uxtb	r2, r3
    b72e:	2a92      	cmp	r2, #146	; 0x92
    b730:	d100      	bne.n	b734 <P2PTasks+0xf8>
    b732:	e25e      	b.n	bbf2 <P2PTasks+0x5b6>
    b734:	2a97      	cmp	r2, #151	; 0x97
    b736:	d17e      	bne.n	b836 <P2PTasks+0x1fa>
                            if( P2PStatus.bits.Resync )
    b738:	4b8f      	ldr	r3, [pc, #572]	; (b978 <P2PTasks+0x33c>)
    b73a:	781b      	ldrb	r3, [r3, #0]
    b73c:	069b      	lsls	r3, r3, #26
    b73e:	d500      	bpl.n	b742 <P2PTasks+0x106>
    b740:	e215      	b.n	bb6e <P2PTasks+0x532>
                                    for(; i < ActiveScanResultIndex; i++)
    b742:	4b98      	ldr	r3, [pc, #608]	; (b9a4 <P2PTasks+0x368>)
    b744:	781b      	ldrb	r3, [r3, #0]
    b746:	469a      	mov	sl, r3
    b748:	2b00      	cmp	r3, #0
    b74a:	d100      	bne.n	b74e <P2PTasks+0x112>
    b74c:	e22c      	b.n	bba8 <P2PTasks+0x56c>
                                        if( (ActiveScanResults[i].Channel == currentChannel) &&
    b74e:	4b96      	ldr	r3, [pc, #600]	; (b9a8 <P2PTasks+0x36c>)
    b750:	781b      	ldrb	r3, [r3, #0]
    b752:	469b      	mov	fp, r3
                                            isSameAddress(ActiveScanResults[i].Address, rxMessage.SourceAddress)
    b754:	4b92      	ldr	r3, [pc, #584]	; (b9a0 <P2PTasks+0x364>)
    b756:	685b      	ldr	r3, [r3, #4]
    b758:	9306      	str	r3, [sp, #24]
    b75a:	4e94      	ldr	r6, [pc, #592]	; (b9ac <P2PTasks+0x370>)
    b75c:	2400      	movs	r4, #0
    b75e:	e213      	b.n	bb88 <P2PTasks+0x54c>
                tmpTick.Val = MiWi_TickGet();
    b760:	4b93      	ldr	r3, [pc, #588]	; (b9b0 <P2PTasks+0x374>)
    b762:	4798      	blx	r3
                if( MiWi_TickGetDiff(tmpTick, indirectMessages[i].TickStart) > INDIRECT_MESSAGE_TIMEOUT )
    b764:	4b83      	ldr	r3, [pc, #524]	; (b974 <P2PTasks+0x338>)
    b766:	6819      	ldr	r1, [r3, #0]
    b768:	4b92      	ldr	r3, [pc, #584]	; (b9b4 <P2PTasks+0x378>)
    b76a:	4798      	blx	r3
    b76c:	4b92      	ldr	r3, [pc, #584]	; (b9b8 <P2PTasks+0x37c>)
    b76e:	4298      	cmp	r0, r3
    b770:	d800      	bhi.n	b774 <P2PTasks+0x138>
    b772:	e771      	b.n	b658 <P2PTasks+0x1c>
                    indirectMessages[i].flags.Val = 0x00;   
    b774:	4b7f      	ldr	r3, [pc, #508]	; (b974 <P2PTasks+0x338>)
    b776:	2200      	movs	r2, #0
    b778:	739a      	strb	r2, [r3, #14]
                    indirectMessages[i].indirectConfCallback(indirectMessages[i].indirectDataHandle, TRANSACTION_EXPIRED, indirectMessages[i].PayLoad);
    b77a:	001a      	movs	r2, r3
    b77c:	3210      	adds	r2, #16
    b77e:	2110      	movs	r1, #16
    b780:	31ff      	adds	r1, #255	; 0xff
    b782:	5c58      	ldrb	r0, [r3, r1]
    b784:	3101      	adds	r1, #1
    b786:	585b      	ldr	r3, [r3, r1]
    b788:	390c      	subs	r1, #12
    b78a:	39ff      	subs	r1, #255	; 0xff
    b78c:	4798      	blx	r3
    b78e:	e763      	b.n	b658 <P2PTasks+0x1c>
                tmpTick.Val = MiWi_TickGet();
    b790:	4b87      	ldr	r3, [pc, #540]	; (b9b0 <P2PTasks+0x374>)
    b792:	4798      	blx	r3
                if( MiWi_TickGetDiff(tmpTick, indirectMessages[i].TickStart) > INDIRECT_MESSAGE_TIMEOUT )
    b794:	238a      	movs	r3, #138	; 0x8a
    b796:	005b      	lsls	r3, r3, #1
    b798:	4a76      	ldr	r2, [pc, #472]	; (b974 <P2PTasks+0x338>)
    b79a:	58d1      	ldr	r1, [r2, r3]
    b79c:	4b85      	ldr	r3, [pc, #532]	; (b9b4 <P2PTasks+0x378>)
    b79e:	4798      	blx	r3
    b7a0:	4b85      	ldr	r3, [pc, #532]	; (b9b8 <P2PTasks+0x37c>)
    b7a2:	4298      	cmp	r0, r3
    b7a4:	d800      	bhi.n	b7a8 <P2PTasks+0x16c>
    b7a6:	e75e      	b.n	b666 <P2PTasks+0x2a>
                    indirectMessages[i].flags.Val = 0x00;   
    b7a8:	4b72      	ldr	r3, [pc, #456]	; (b974 <P2PTasks+0x338>)
    b7aa:	2100      	movs	r1, #0
    b7ac:	2291      	movs	r2, #145	; 0x91
    b7ae:	0052      	lsls	r2, r2, #1
    b7b0:	5499      	strb	r1, [r3, r2]
                    indirectMessages[i].indirectConfCallback(indirectMessages[i].indirectDataHandle, TRANSACTION_EXPIRED, indirectMessages[i].PayLoad);
    b7b2:	001a      	movs	r2, r3
    b7b4:	3225      	adds	r2, #37	; 0x25
    b7b6:	32ff      	adds	r2, #255	; 0xff
    b7b8:	4980      	ldr	r1, [pc, #512]	; (b9bc <P2PTasks+0x380>)
    b7ba:	5c58      	ldrb	r0, [r3, r1]
    b7bc:	3101      	adds	r1, #1
    b7be:	585b      	ldr	r3, [r3, r1]
    b7c0:	2105      	movs	r1, #5
    b7c2:	4798      	blx	r3
    b7c4:	e74f      	b.n	b666 <P2PTasks+0x2a>
            tmpTick.Val = MiWi_TickGet();
    b7c6:	4b7a      	ldr	r3, [pc, #488]	; (b9b0 <P2PTasks+0x374>)
    b7c8:	4798      	blx	r3
            if( MiWi_TickGetDiff(tmpTick, nvmDelayTick) > (ONE_SECOND) )
    b7ca:	4b7d      	ldr	r3, [pc, #500]	; (b9c0 <P2PTasks+0x384>)
    b7cc:	6819      	ldr	r1, [r3, #0]
    b7ce:	4b79      	ldr	r3, [pc, #484]	; (b9b4 <P2PTasks+0x378>)
    b7d0:	4798      	blx	r3
    b7d2:	4b7c      	ldr	r3, [pc, #496]	; (b9c4 <P2PTasks+0x388>)
    b7d4:	4298      	cmp	r0, r3
    b7d6:	d800      	bhi.n	b7da <P2PTasks+0x19e>
    b7d8:	e74a      	b.n	b670 <P2PTasks+0x34>
                P2PStatus.bits.SaveConnection = 0;
    b7da:	4a67      	ldr	r2, [pc, #412]	; (b978 <P2PTasks+0x33c>)
    b7dc:	7813      	ldrb	r3, [r2, #0]
    b7de:	2102      	movs	r1, #2
    b7e0:	438b      	bics	r3, r1
    b7e2:	7013      	strb	r3, [r2, #0]
				PDS_Store(PDS_CONNECTION_TABLE_ID);
    b7e4:	2005      	movs	r0, #5
    b7e6:	4b78      	ldr	r3, [pc, #480]	; (b9c8 <P2PTasks+0x38c>)
    b7e8:	4798      	blx	r3
                printf("\r\nSave Connection\r\n");
    b7ea:	4878      	ldr	r0, [pc, #480]	; (b9cc <P2PTasks+0x390>)
    b7ec:	4b78      	ldr	r3, [pc, #480]	; (b9d0 <P2PTasks+0x394>)
    b7ee:	4798      	blx	r3
    b7f0:	e73e      	b.n	b670 <P2PTasks+0x34>
		tmpTick.Val = MiWi_TickGet();
    b7f2:	4b6f      	ldr	r3, [pc, #444]	; (b9b0 <P2PTasks+0x374>)
    b7f4:	4798      	blx	r3
		if( MiWi_TickGetDiff(tmpTick, DataTxAckTimer) > ((ack_timeout_variable) * ACK_TIMEOUT_INTERVAL) )
    b7f6:	4b65      	ldr	r3, [pc, #404]	; (b98c <P2PTasks+0x350>)
    b7f8:	6819      	ldr	r1, [r3, #0]
    b7fa:	4b6e      	ldr	r3, [pc, #440]	; (b9b4 <P2PTasks+0x378>)
    b7fc:	4798      	blx	r3
    b7fe:	4b61      	ldr	r3, [pc, #388]	; (b984 <P2PTasks+0x348>)
    b800:	681b      	ldr	r3, [r3, #0]
    b802:	4298      	cmp	r0, r3
    b804:	d800      	bhi.n	b808 <P2PTasks+0x1cc>
    b806:	e747      	b.n	b698 <P2PTasks+0x5c>
			DataTxAckTimer.Val =0;
    b808:	2300      	movs	r3, #0
    b80a:	4a60      	ldr	r2, [pc, #384]	; (b98c <P2PTasks+0x350>)
    b80c:	6013      	str	r3, [r2, #0]
			AckReqData = 0;
    b80e:	4a5e      	ldr	r2, [pc, #376]	; (b988 <P2PTasks+0x34c>)
    b810:	7013      	strb	r3, [r2, #0]
			MiMAC_RetryPacket();
    b812:	4b70      	ldr	r3, [pc, #448]	; (b9d4 <P2PTasks+0x398>)
    b814:	4798      	blx	r3
			printf("\r\n Ack Timeout\r\n");
    b816:	4870      	ldr	r0, [pc, #448]	; (b9d8 <P2PTasks+0x39c>)
    b818:	4b6d      	ldr	r3, [pc, #436]	; (b9d0 <P2PTasks+0x394>)
    b81a:	4798      	blx	r3
    b81c:	e73c      	b.n	b698 <P2PTasks+0x5c>
            rxMessage.SourceAddress = MACRxPacket.SourceAddress;
    b81e:	4b5e      	ldr	r3, [pc, #376]	; (b998 <P2PTasks+0x35c>)
    b820:	685a      	ldr	r2, [r3, #4]
    b822:	4b5f      	ldr	r3, [pc, #380]	; (b9a0 <P2PTasks+0x364>)
    b824:	605a      	str	r2, [r3, #4]
    b826:	e762      	b.n	b6ee <P2PTasks+0xb2>
            switch( rxMessage.Payload[0] )
    b828:	2a81      	cmp	r2, #129	; 0x81
    b82a:	d024      	beq.n	b876 <P2PTasks+0x23a>
    b82c:	d900      	bls.n	b830 <P2PTasks+0x1f4>
    b82e:	e127      	b.n	ba80 <P2PTasks+0x444>
    b830:	2b04      	cmp	r3, #4
    b832:	d100      	bne.n	b836 <P2PTasks+0x1fa>
    b834:	e206      	b.n	bc44 <P2PTasks+0x608>
                    P2PStatus.bits.RxHasUserData = 1;
    b836:	4c50      	ldr	r4, [pc, #320]	; (b978 <P2PTasks+0x33c>)
    b838:	7823      	ldrb	r3, [r4, #0]
    b83a:	2208      	movs	r2, #8
    b83c:	4313      	orrs	r3, r2
    b83e:	7023      	strb	r3, [r4, #0]
					pktRxcallback(&rxMessage);
    b840:	4b66      	ldr	r3, [pc, #408]	; (b9dc <P2PTasks+0x3a0>)
    b842:	681b      	ldr	r3, [r3, #0]
    b844:	4856      	ldr	r0, [pc, #344]	; (b9a0 <P2PTasks+0x364>)
    b846:	4798      	blx	r3
					P2PStatus.bits.RxHasUserData = 0;
    b848:	7823      	ldrb	r3, [r4, #0]
    b84a:	2208      	movs	r2, #8
    b84c:	4393      	bics	r3, r2
    b84e:	7023      	strb	r3, [r4, #0]
					MiMAC_DiscardPacket();
    b850:	4b63      	ldr	r3, [pc, #396]	; (b9e0 <P2PTasks+0x3a4>)
    b852:	4798      	blx	r3
                    break;
    b854:	e29f      	b.n	bd96 <P2PTasks+0x75a>
            switch( rxMessage.Payload[0] )
    b856:	2a87      	cmp	r2, #135	; 0x87
    b858:	d1ed      	bne.n	b836 <P2PTasks+0x1fa>
                        if(ConnMode > ENABLE_ACTIVE_SCAN_RSP)
    b85a:	4b62      	ldr	r3, [pc, #392]	; (b9e4 <P2PTasks+0x3a8>)
    b85c:	781b      	ldrb	r3, [r3, #0]
    b85e:	2b02      	cmp	r3, #2
    b860:	d900      	bls.n	b864 <P2PTasks+0x228>
    b862:	e082      	b.n	b96a <P2PTasks+0x32e>
                            if( currentChannel != rxMessage.Payload[1] )
    b864:	786a      	ldrb	r2, [r5, #1]
    b866:	4b50      	ldr	r3, [pc, #320]	; (b9a8 <P2PTasks+0x36c>)
    b868:	781b      	ldrb	r3, [r3, #0]
    b86a:	429a      	cmp	r2, r3
    b86c:	d100      	bne.n	b870 <P2PTasks+0x234>
    b86e:	e0d5      	b.n	ba1c <P2PTasks+0x3e0>
                                MiMAC_DiscardPacket();
    b870:	4b5b      	ldr	r3, [pc, #364]	; (b9e0 <P2PTasks+0x3a4>)
    b872:	4798      	blx	r3
                                break;
    b874:	e28f      	b.n	bd96 <P2PTasks+0x75a>
                                if( currentChannel != rxMessage.Payload[1] )
    b876:	786a      	ldrb	r2, [r5, #1]
    b878:	4b4b      	ldr	r3, [pc, #300]	; (b9a8 <P2PTasks+0x36c>)
    b87a:	781b      	ldrb	r3, [r3, #0]
    b87c:	429a      	cmp	r2, r3
    b87e:	d002      	beq.n	b886 <P2PTasks+0x24a>
                                    MiMAC_DiscardPacket();
    b880:	4b57      	ldr	r3, [pc, #348]	; (b9e0 <P2PTasks+0x3a4>)
    b882:	4798      	blx	r3
                                    break;
    b884:	e287      	b.n	bd96 <P2PTasks+0x75a>
                                if( ConnMode == DISABLE_ALL_CONN )
    b886:	4b57      	ldr	r3, [pc, #348]	; (b9e4 <P2PTasks+0x3a8>)
    b888:	781b      	ldrb	r3, [r3, #0]
    b88a:	2b03      	cmp	r3, #3
    b88c:	d04d      	beq.n	b92a <P2PTasks+0x2ee>
                                    if( rxMessage.SourcePANID.Val != 0xFFFF &&
    b88e:	4b56      	ldr	r3, [pc, #344]	; (b9e8 <P2PTasks+0x3ac>)
    b890:	429f      	cmp	r7, r3
    b892:	d006      	beq.n	b8a2 <P2PTasks+0x266>
                                        rxMessage.SourcePANID.Val != myPANID.Val &&
    b894:	4b55      	ldr	r3, [pc, #340]	; (b9ec <P2PTasks+0x3b0>)
                                    if( rxMessage.SourcePANID.Val != 0xFFFF &&
    b896:	881b      	ldrh	r3, [r3, #0]
    b898:	42bb      	cmp	r3, r7
    b89a:	d002      	beq.n	b8a2 <P2PTasks+0x266>
                                        rxMessage.SourcePANID.Val != myPANID.Val &&
    b89c:	2902      	cmp	r1, #2
    b89e:	d900      	bls.n	b8a2 <P2PTasks+0x266>
    b8a0:	e295      	b.n	bdce <P2PTasks+0x792>
                                    status = AddConnection();
    b8a2:	4b53      	ldr	r3, [pc, #332]	; (b9f0 <P2PTasks+0x3b4>)
    b8a4:	4798      	blx	r3
    b8a6:	0005      	movs	r5, r0
                                if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    b8a8:	4b4e      	ldr	r3, [pc, #312]	; (b9e4 <P2PTasks+0x3a8>)
    b8aa:	781b      	ldrb	r3, [r3, #0]
    b8ac:	2b01      	cmp	r3, #1
    b8ae:	d03f      	beq.n	b930 <P2PTasks+0x2f4>
                                dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(TX_BUFFER_SIZE));
    b8b0:	20e0      	movs	r0, #224	; 0xe0
    b8b2:	4b50      	ldr	r3, [pc, #320]	; (b9f4 <P2PTasks+0x3b8>)
    b8b4:	4798      	blx	r3
    b8b6:	1e04      	subs	r4, r0, #0
                                if (NULL == dataPtr)
    b8b8:	d100      	bne.n	b8bc <P2PTasks+0x280>
    b8ba:	e281      	b.n	bdc0 <P2PTasks+0x784>
                                dataPtr[dataLen++] = CMD_P2P_CONNECTION_RESPONSE;
    b8bc:	2391      	movs	r3, #145	; 0x91
    b8be:	7003      	strb	r3, [r0, #0]
                                dataPtr[dataLen++] = status;
    b8c0:	7045      	strb	r5, [r0, #1]
    b8c2:	2702      	movs	r7, #2
                                if( status == STATUS_SUCCESS ||
    b8c4:	2d01      	cmp	r5, #1
    b8c6:	d944      	bls.n	b952 <P2PTasks+0x316>
                                MiMAC_DiscardPacket();
    b8c8:	4b45      	ldr	r3, [pc, #276]	; (b9e0 <P2PTasks+0x3a4>)
    b8ca:	4798      	blx	r3
                                i = PHY_RandomReq();
    b8cc:	4b4a      	ldr	r3, [pc, #296]	; (b9f8 <P2PTasks+0x3bc>)
    b8ce:	4798      	blx	r3
    b8d0:	b2c6      	uxtb	r6, r0
                                delay_s(i % (CONNECTION_INTERVAL-1));
    b8d2:	2103      	movs	r1, #3
    b8d4:	0030      	movs	r0, r6
    b8d6:	4b49      	ldr	r3, [pc, #292]	; (b9fc <P2PTasks+0x3c0>)
    b8d8:	4798      	blx	r3
    b8da:	b2c9      	uxtb	r1, r1
    b8dc:	2900      	cmp	r1, #0
    b8de:	d040      	beq.n	b962 <P2PTasks+0x326>
    b8e0:	20fa      	movs	r0, #250	; 0xfa
    b8e2:	0080      	lsls	r0, r0, #2
    b8e4:	4370      	muls	r0, r6
    b8e6:	2103      	movs	r1, #3
    b8e8:	4b45      	ldr	r3, [pc, #276]	; (ba00 <P2PTasks+0x3c4>)
    b8ea:	4798      	blx	r3
    b8ec:	0008      	movs	r0, r1
    b8ee:	4b45      	ldr	r3, [pc, #276]	; (ba04 <P2PTasks+0x3c8>)
    b8f0:	4798      	blx	r3
                                        SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn, 
    b8f2:	4b2b      	ldr	r3, [pc, #172]	; (b9a0 <P2PTasks+0x364>)
    b8f4:	685a      	ldr	r2, [r3, #4]
    b8f6:	8859      	ldrh	r1, [r3, #2]
    b8f8:	4843      	ldr	r0, [pc, #268]	; (ba08 <P2PTasks+0x3cc>)
    b8fa:	9005      	str	r0, [sp, #20]
    b8fc:	2001      	movs	r0, #1
    b8fe:	9004      	str	r0, [sp, #16]
    b900:	2000      	movs	r0, #0
    b902:	9003      	str	r0, [sp, #12]
    b904:	9402      	str	r4, [sp, #8]
    b906:	9701      	str	r7, [sp, #4]
    b908:	781b      	ldrb	r3, [r3, #0]
    b90a:	071b      	lsls	r3, r3, #28
    b90c:	0fdb      	lsrs	r3, r3, #31
    b90e:	9300      	str	r3, [sp, #0]
    b910:	2301      	movs	r3, #1
    b912:	4c3e      	ldr	r4, [pc, #248]	; (ba0c <P2PTasks+0x3d0>)
    b914:	47a0      	blx	r4
								delay_ms (100);
    b916:	2064      	movs	r0, #100	; 0x64
    b918:	4b3a      	ldr	r3, [pc, #232]	; (ba04 <P2PTasks+0x3c8>)
    b91a:	4798      	blx	r3
                                    if( status == STATUS_SUCCESS )
    b91c:	2d00      	cmp	r5, #0
    b91e:	d000      	beq.n	b922 <P2PTasks+0x2e6>
    b920:	e239      	b.n	bd96 <P2PTasks+0x75a>
										PDS_Store(PDS_CONNECTION_TABLE_ID);
    b922:	2005      	movs	r0, #5
    b924:	4b28      	ldr	r3, [pc, #160]	; (b9c8 <P2PTasks+0x38c>)
    b926:	4798      	blx	r3
    b928:	e235      	b.n	bd96 <P2PTasks+0x75a>
                                    MiMAC_DiscardPacket();
    b92a:	4b2d      	ldr	r3, [pc, #180]	; (b9e0 <P2PTasks+0x3a4>)
    b92c:	4798      	blx	r3
                                    break;
    b92e:	e232      	b.n	bd96 <P2PTasks+0x75a>
                                if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    b930:	3801      	subs	r0, #1
    b932:	b2c0      	uxtb	r0, r0
    b934:	2801      	cmp	r0, #1
    b936:	d9bb      	bls.n	b8b0 <P2PTasks+0x274>
                                dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(TX_BUFFER_SIZE));
    b938:	20e0      	movs	r0, #224	; 0xe0
    b93a:	4b2e      	ldr	r3, [pc, #184]	; (b9f4 <P2PTasks+0x3b8>)
    b93c:	4798      	blx	r3
    b93e:	1e04      	subs	r4, r0, #0
                                if (NULL == dataPtr)
    b940:	d100      	bne.n	b944 <P2PTasks+0x308>
    b942:	e23d      	b.n	bdc0 <P2PTasks+0x784>
                                dataPtr[dataLen++] = CMD_P2P_CONNECTION_RESPONSE;
    b944:	2391      	movs	r3, #145	; 0x91
    b946:	7023      	strb	r3, [r4, #0]
                                dataPtr[dataLen++] = status;
    b948:	3362      	adds	r3, #98	; 0x62
    b94a:	7063      	strb	r3, [r4, #1]
                                    status = STATUS_NOT_PERMITTED;
    b94c:	25f3      	movs	r5, #243	; 0xf3
                                dataPtr[dataLen++] = status;
    b94e:	2702      	movs	r7, #2
    b950:	e7ba      	b.n	b8c8 <P2PTasks+0x28c>
                                    dataPtr[dataLen++] = P2PCapacityInfo;
    b952:	4b2f      	ldr	r3, [pc, #188]	; (ba10 <P2PTasks+0x3d4>)
    b954:	781b      	ldrb	r3, [r3, #0]
    b956:	7083      	strb	r3, [r0, #2]
                                            dataPtr[dataLen++] = AdditionalNodeID[i];
    b958:	4b2e      	ldr	r3, [pc, #184]	; (ba14 <P2PTasks+0x3d8>)
    b95a:	781b      	ldrb	r3, [r3, #0]
    b95c:	70c3      	strb	r3, [r0, #3]
    b95e:	3702      	adds	r7, #2
    b960:	e7b2      	b.n	b8c8 <P2PTasks+0x28c>
                                delay_s(i % (CONNECTION_INTERVAL-1));
    b962:	2001      	movs	r0, #1
    b964:	4b2c      	ldr	r3, [pc, #176]	; (ba18 <P2PTasks+0x3dc>)
    b966:	4798      	blx	r3
    b968:	e7c3      	b.n	b8f2 <P2PTasks+0x2b6>
                                MiMAC_DiscardPacket();
    b96a:	4b1d      	ldr	r3, [pc, #116]	; (b9e0 <P2PTasks+0x3a4>)
    b96c:	4798      	blx	r3
                                break;
    b96e:	e212      	b.n	bd96 <P2PTasks+0x75a>
    b970:	0000a80d 	.word	0x0000a80d
    b974:	200026f0 	.word	0x200026f0
    b978:	200026ec 	.word	0x200026ec
    b97c:	0000b4dd 	.word	0x0000b4dd
    b980:	000c8708 	.word	0x000c8708
    b984:	2000029c 	.word	0x2000029c
    b988:	20000287 	.word	0x20000287
    b98c:	20002970 	.word	0x20002970
    b990:	0000a0fd 	.word	0x0000a0fd
    b994:	200026d2 	.word	0x200026d2
    b998:	200026ac 	.word	0x200026ac
    b99c:	200026d0 	.word	0x200026d0
    b9a0:	2000295c 	.word	0x2000295c
    b9a4:	2000296c 	.word	0x2000296c
    b9a8:	20000011 	.word	0x20000011
    b9ac:	2000291c 	.word	0x2000291c
    b9b0:	0000c3e1 	.word	0x0000c3e1
    b9b4:	0000c441 	.word	0x0000c441
    b9b8:	016e3600 	.word	0x016e3600
    b9bc:	00000223 	.word	0x00000223
    b9c0:	200026c4 	.word	0x200026c4
    b9c4:	000f4240 	.word	0x000f4240
    b9c8:	00009569 	.word	0x00009569
    b9cc:	00018ec8 	.word	0x00018ec8
    b9d0:	0001731d 	.word	0x0001731d
    b9d4:	0000a0b9 	.word	0x0000a0b9
    b9d8:	00018edc 	.word	0x00018edc
    b9dc:	200002a4 	.word	0x200002a4
    b9e0:	0000a07d 	.word	0x0000a07d
    b9e4:	20000010 	.word	0x20000010
    b9e8:	0000ffff 	.word	0x0000ffff
    b9ec:	200026c8 	.word	0x200026c8
    b9f0:	0000b375 	.word	0x0000b375
    b9f4:	0000c1a1 	.word	0x0000c1a1
    b9f8:	0000ac75 	.word	0x0000ac75
    b9fc:	00013af1 	.word	0x00013af1
    ba00:	00013cc5 	.word	0x00013cc5
    ba04:	0000453d 	.word	0x0000453d
    ba08:	0000acb1 	.word	0x0000acb1
    ba0c:	0000ae1d 	.word	0x0000ae1d
    ba10:	200026c1 	.word	0x200026c1
    ba14:	2000000c 	.word	0x2000000c
    ba18:	00004511 	.word	0x00004511
                            dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_P2P_ACTIVE_SCAN_RESPONSE));
    ba1c:	2010      	movs	r0, #16
    ba1e:	4bba      	ldr	r3, [pc, #744]	; (bd08 <P2PTasks+0x6cc>)
    ba20:	4798      	blx	r3
    ba22:	1e04      	subs	r4, r0, #0
                            if (NULL == dataPtr)
    ba24:	d100      	bne.n	ba28 <P2PTasks+0x3ec>
    ba26:	e1cb      	b.n	bdc0 <P2PTasks+0x784>
                            dataPtr[dataLen++] = CMD_P2P_ACTIVE_SCAN_RESPONSE;
    ba28:	2397      	movs	r3, #151	; 0x97
    ba2a:	7003      	strb	r3, [r0, #0]
                            dataPtr[dataLen++] = P2PCapacityInfo;
    ba2c:	4bb7      	ldr	r3, [pc, #732]	; (bd0c <P2PTasks+0x6d0>)
    ba2e:	781b      	ldrb	r3, [r3, #0]
    ba30:	7043      	strb	r3, [r0, #1]
                                    dataPtr[dataLen++] = (AdditionalNodeID[i]);
    ba32:	4bb7      	ldr	r3, [pc, #732]	; (bd10 <P2PTasks+0x6d4>)
    ba34:	781b      	ldrb	r3, [r3, #0]
    ba36:	7083      	strb	r3, [r0, #2]
                            MiMAC_DiscardPacket();
    ba38:	4bb6      	ldr	r3, [pc, #728]	; (bd14 <P2PTasks+0x6d8>)
    ba3a:	4798      	blx	r3
							i = PHY_RandomReq();
    ba3c:	4bb6      	ldr	r3, [pc, #728]	; (bd18 <P2PTasks+0x6dc>)
    ba3e:	4798      	blx	r3
							delay_ms(i*100);
    ba40:	b2c3      	uxtb	r3, r0
    ba42:	2064      	movs	r0, #100	; 0x64
    ba44:	4358      	muls	r0, r3
    ba46:	2800      	cmp	r0, #0
    ba48:	d016      	beq.n	ba78 <P2PTasks+0x43c>
    ba4a:	4bb4      	ldr	r3, [pc, #720]	; (bd1c <P2PTasks+0x6e0>)
    ba4c:	4798      	blx	r3
                                    SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn, 
    ba4e:	4bb4      	ldr	r3, [pc, #720]	; (bd20 <P2PTasks+0x6e4>)
    ba50:	685a      	ldr	r2, [r3, #4]
    ba52:	8859      	ldrh	r1, [r3, #2]
    ba54:	48b3      	ldr	r0, [pc, #716]	; (bd24 <P2PTasks+0x6e8>)
    ba56:	9005      	str	r0, [sp, #20]
    ba58:	2001      	movs	r0, #1
    ba5a:	9004      	str	r0, [sp, #16]
    ba5c:	2000      	movs	r0, #0
    ba5e:	9003      	str	r0, [sp, #12]
    ba60:	9402      	str	r4, [sp, #8]
    ba62:	3003      	adds	r0, #3
    ba64:	9001      	str	r0, [sp, #4]
    ba66:	781b      	ldrb	r3, [r3, #0]
    ba68:	071b      	lsls	r3, r3, #28
    ba6a:	0fdb      	lsrs	r3, r3, #31
    ba6c:	9300      	str	r3, [sp, #0]
    ba6e:	2301      	movs	r3, #1
    ba70:	2000      	movs	r0, #0
    ba72:	4cad      	ldr	r4, [pc, #692]	; (bd28 <P2PTasks+0x6ec>)
    ba74:	47a0      	blx	r4
                        break;
    ba76:	e18e      	b.n	bd96 <P2PTasks+0x75a>
							delay_ms(i*100);
    ba78:	2001      	movs	r0, #1
    ba7a:	4bac      	ldr	r3, [pc, #688]	; (bd2c <P2PTasks+0x6f0>)
    ba7c:	4798      	blx	r3
    ba7e:	e7e6      	b.n	ba4e <P2PTasks+0x412>
                            dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_P2P_CONNECTION_REMOVAL_RESPONSE));
    ba80:	2010      	movs	r0, #16
    ba82:	4ba1      	ldr	r3, [pc, #644]	; (bd08 <P2PTasks+0x6cc>)
    ba84:	4798      	blx	r3
    ba86:	4680      	mov	r8, r0
                            if (NULL == dataPtr)
    ba88:	2800      	cmp	r0, #0
    ba8a:	d100      	bne.n	ba8e <P2PTasks+0x452>
    ba8c:	e198      	b.n	bdc0 <P2PTasks+0x784>
                            dataPtr[dataLen++] = CMD_P2P_CONNECTION_REMOVAL_RESPONSE;
    ba8e:	2392      	movs	r3, #146	; 0x92
    ba90:	7003      	strb	r3, [r0, #0]
                                    if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    ba92:	4ba3      	ldr	r3, [pc, #652]	; (bd20 <P2PTasks+0x6e4>)
    ba94:	685b      	ldr	r3, [r3, #4]
    ba96:	9307      	str	r3, [sp, #28]
    ba98:	4ea5      	ldr	r6, [pc, #660]	; (bd30 <P2PTasks+0x6f4>)
    ba9a:	2400      	movs	r4, #0
                            for(i = 0; i < CONNECTION_SIZE; i++)
    ba9c:	2700      	movs	r7, #0
                                if( ConnectionTable[i].status.bits.isValid )
    ba9e:	0035      	movs	r5, r6
    baa0:	e006      	b.n	bab0 <P2PTasks+0x474>
                            for(i = 0; i < CONNECTION_SIZE; i++)
    baa2:	3701      	adds	r7, #1
    baa4:	b2ff      	uxtb	r7, r7
    baa6:	3401      	adds	r4, #1
    baa8:	360a      	adds	r6, #10
    baaa:	2f05      	cmp	r7, #5
    baac:	d100      	bne.n	bab0 <P2PTasks+0x474>
    baae:	e195      	b.n	bddc <P2PTasks+0x7a0>
                                if( ConnectionTable[i].status.bits.isValid )
    bab0:	9406      	str	r4, [sp, #24]
    bab2:	00a3      	lsls	r3, r4, #2
    bab4:	191b      	adds	r3, r3, r4
    bab6:	005b      	lsls	r3, r3, #1
    bab8:	18eb      	adds	r3, r5, r3
    baba:	7a1b      	ldrb	r3, [r3, #8]
    babc:	09db      	lsrs	r3, r3, #7
    babe:	d0f0      	beq.n	baa2 <P2PTasks+0x466>
                                    if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    bac0:	0031      	movs	r1, r6
    bac2:	9807      	ldr	r0, [sp, #28]
    bac4:	4b9b      	ldr	r3, [pc, #620]	; (bd34 <P2PTasks+0x6f8>)
    bac6:	4798      	blx	r3
    bac8:	2800      	cmp	r0, #0
    baca:	d0ea      	beq.n	baa2 <P2PTasks+0x466>
                                        ConnectionTable[i].status.Val = 0;
    bacc:	9a06      	ldr	r2, [sp, #24]
    bace:	0093      	lsls	r3, r2, #2
    bad0:	189d      	adds	r5, r3, r2
    bad2:	006d      	lsls	r5, r5, #1
    bad4:	4b96      	ldr	r3, [pc, #600]	; (bd30 <P2PTasks+0x6f4>)
    bad6:	195d      	adds	r5, r3, r5
    bad8:	2400      	movs	r4, #0
    bada:	722c      	strb	r4, [r5, #8]
											PDS_Store(PDS_CONNECTION_TABLE_ID);
    badc:	2005      	movs	r0, #5
    bade:	4b96      	ldr	r3, [pc, #600]	; (bd38 <P2PTasks+0x6fc>)
    bae0:	4798      	blx	r3
                                        dataPtr[dataLen++] = STATUS_SUCCESS;
    bae2:	4643      	mov	r3, r8
    bae4:	705c      	strb	r4, [r3, #1]
                            MiMAC_DiscardPacket();
    bae6:	4b8b      	ldr	r3, [pc, #556]	; (bd14 <P2PTasks+0x6d8>)
    bae8:	4798      	blx	r3
                            if( i == CONNECTION_SIZE ) 
    baea:	2f05      	cmp	r7, #5
    baec:	d001      	beq.n	baf2 <P2PTasks+0x4b6>
                                        dataPtr[dataLen++] = STATUS_SUCCESS;
    baee:	3402      	adds	r4, #2
    baf0:	e17b      	b.n	bdea <P2PTasks+0x7ae>
    baf2:	2302      	movs	r3, #2
    baf4:	e175      	b.n	bde2 <P2PTasks+0x7a6>
                            switch( rxMessage.Payload[1] )
    baf6:	786b      	ldrb	r3, [r5, #1]
    baf8:	2b00      	cmp	r3, #0
    bafa:	d01d      	beq.n	bb38 <P2PTasks+0x4fc>
    bafc:	2b01      	cmp	r3, #1
    bafe:	d118      	bne.n	bb32 <P2PTasks+0x4f6>
                                    if (EstConfCallback)
    bb00:	4b8e      	ldr	r3, [pc, #568]	; (bd3c <P2PTasks+0x700>)
    bb02:	681b      	ldr	r3, [r3, #0]
    bb04:	2b00      	cmp	r3, #0
    bb06:	d004      	beq.n	bb12 <P2PTasks+0x4d6>
                                        EstConfCallback(ALREADY_EXISTS);
    bb08:	2006      	movs	r0, #6
    bb0a:	4798      	blx	r3
                                        EstConfCallback = NULL;
    bb0c:	2200      	movs	r2, #0
    bb0e:	4b8b      	ldr	r3, [pc, #556]	; (bd3c <P2PTasks+0x700>)
    bb10:	601a      	str	r2, [r3, #0]
                                        if( myPANID.Val == 0xFFFF )
    bb12:	4b8b      	ldr	r3, [pc, #556]	; (bd40 <P2PTasks+0x704>)
    bb14:	881a      	ldrh	r2, [r3, #0]
    bb16:	4b8b      	ldr	r3, [pc, #556]	; (bd44 <P2PTasks+0x708>)
    bb18:	429a      	cmp	r2, r3
    bb1a:	d017      	beq.n	bb4c <P2PTasks+0x510>
                                    AddConnection();
    bb1c:	4b8a      	ldr	r3, [pc, #552]	; (bd48 <P2PTasks+0x70c>)
    bb1e:	4798      	blx	r3
                                        P2PStatus.bits.SaveConnection = 1;
    bb20:	4a8a      	ldr	r2, [pc, #552]	; (bd4c <P2PTasks+0x710>)
    bb22:	7813      	ldrb	r3, [r2, #0]
    bb24:	2102      	movs	r1, #2
    bb26:	430b      	orrs	r3, r1
    bb28:	7013      	strb	r3, [r2, #0]
                                        nvmDelayTick.Val = MiWi_TickGet();
    bb2a:	4b89      	ldr	r3, [pc, #548]	; (bd50 <P2PTasks+0x714>)
    bb2c:	4798      	blx	r3
    bb2e:	4b89      	ldr	r3, [pc, #548]	; (bd54 <P2PTasks+0x718>)
    bb30:	6018      	str	r0, [r3, #0]
                        MiMAC_DiscardPacket();
    bb32:	4b78      	ldr	r3, [pc, #480]	; (bd14 <P2PTasks+0x6d8>)
    bb34:	4798      	blx	r3
                        break; 
    bb36:	e12e      	b.n	bd96 <P2PTasks+0x75a>
                                    if (EstConfCallback)
    bb38:	4b80      	ldr	r3, [pc, #512]	; (bd3c <P2PTasks+0x700>)
    bb3a:	681b      	ldr	r3, [r3, #0]
    bb3c:	2b00      	cmp	r3, #0
    bb3e:	d0e8      	beq.n	bb12 <P2PTasks+0x4d6>
                                        EstConfCallback(SUCCESS);
    bb40:	2000      	movs	r0, #0
    bb42:	4798      	blx	r3
                                        EstConfCallback = NULL;
    bb44:	2200      	movs	r2, #0
    bb46:	4b7d      	ldr	r3, [pc, #500]	; (bd3c <P2PTasks+0x700>)
    bb48:	601a      	str	r2, [r3, #0]
    bb4a:	e7e2      	b.n	bb12 <P2PTasks+0x4d6>
                                            myPANID.Val = rxMessage.SourcePANID.Val;
    bb4c:	497c      	ldr	r1, [pc, #496]	; (bd40 <P2PTasks+0x704>)
    bb4e:	4b74      	ldr	r3, [pc, #464]	; (bd20 <P2PTasks+0x6e4>)
    bb50:	885b      	ldrh	r3, [r3, #2]
    bb52:	800b      	strh	r3, [r1, #0]
                                                uint16_t tmp = 0xFFFF;
    bb54:	201e      	movs	r0, #30
    bb56:	ab02      	add	r3, sp, #8
    bb58:	469c      	mov	ip, r3
    bb5a:	4460      	add	r0, ip
    bb5c:	2301      	movs	r3, #1
    bb5e:	425b      	negs	r3, r3
    bb60:	8003      	strh	r3, [r0, #0]
                                                MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    bb62:	4b7d      	ldr	r3, [pc, #500]	; (bd58 <P2PTasks+0x71c>)
    bb64:	4798      	blx	r3
												PDS_Store(PDS_PANID_ID);
    bb66:	2002      	movs	r0, #2
    bb68:	4b73      	ldr	r3, [pc, #460]	; (bd38 <P2PTasks+0x6fc>)
    bb6a:	4798      	blx	r3
    bb6c:	e7d6      	b.n	bb1c <P2PTasks+0x4e0>
                                P2PStatus.bits.Resync = 0;   
    bb6e:	4a77      	ldr	r2, [pc, #476]	; (bd4c <P2PTasks+0x710>)
    bb70:	7813      	ldrb	r3, [r2, #0]
    bb72:	2120      	movs	r1, #32
    bb74:	438b      	bics	r3, r1
    bb76:	7013      	strb	r3, [r2, #0]
                            MiMAC_DiscardPacket(); 
    bb78:	4b66      	ldr	r3, [pc, #408]	; (bd14 <P2PTasks+0x6d8>)
    bb7a:	4798      	blx	r3
                        break;                
    bb7c:	e10b      	b.n	bd96 <P2PTasks+0x75a>
                                    for(; i < ActiveScanResultIndex; i++)
    bb7e:	3401      	adds	r4, #1
    bb80:	b2e4      	uxtb	r4, r4
    bb82:	3610      	adds	r6, #16
    bb84:	4554      	cmp	r4, sl
    bb86:	d00d      	beq.n	bba4 <P2PTasks+0x568>
                                        if( (ActiveScanResults[i].Channel == currentChannel) &&
    bb88:	7833      	ldrb	r3, [r6, #0]
    bb8a:	455b      	cmp	r3, fp
    bb8c:	d1f7      	bne.n	bb7e <P2PTasks+0x542>
    bb8e:	8973      	ldrh	r3, [r6, #10]
    bb90:	42bb      	cmp	r3, r7
    bb92:	d1f4      	bne.n	bb7e <P2PTasks+0x542>
                                            isSameAddress(ActiveScanResults[i].Address, rxMessage.SourceAddress)
    bb94:	1c70      	adds	r0, r6, #1
    bb96:	9906      	ldr	r1, [sp, #24]
    bb98:	4b66      	ldr	r3, [pc, #408]	; (bd34 <P2PTasks+0x6f8>)
    bb9a:	4798      	blx	r3
                                            (ActiveScanResults[i].PANID.Val == rxMessage.SourcePANID.Val) &&
    bb9c:	2800      	cmp	r0, #0
    bb9e:	d0ee      	beq.n	bb7e <P2PTasks+0x542>
                                    if( i == ActiveScanResultIndex && (i < ACTIVE_SCAN_RESULT_SIZE))
    bba0:	45a2      	cmp	sl, r4
    bba2:	d1e9      	bne.n	bb78 <P2PTasks+0x53c>
    bba4:	2c03      	cmp	r4, #3
    bba6:	d8e7      	bhi.n	bb78 <P2PTasks+0x53c>
                                        ActiveScanResults[ActiveScanResultIndex].Channel = currentChannel;
    bba8:	496c      	ldr	r1, [pc, #432]	; (bd5c <P2PTasks+0x720>)
    bbaa:	4653      	mov	r3, sl
    bbac:	011b      	lsls	r3, r3, #4
    bbae:	4a6c      	ldr	r2, [pc, #432]	; (bd60 <P2PTasks+0x724>)
    bbb0:	7812      	ldrb	r2, [r2, #0]
    bbb2:	545a      	strb	r2, [r3, r1]
                                        ActiveScanResults[ActiveScanResultIndex].RSSIValue = rxMessage.PacketRSSI;
    bbb4:	18ca      	adds	r2, r1, r3
    bbb6:	4648      	mov	r0, r9
    bbb8:	7310      	strb	r0, [r2, #12]
                                        ActiveScanResults[ActiveScanResultIndex].LQIValue = rxMessage.PacketLQI;
    bbba:	4640      	mov	r0, r8
    bbbc:	7350      	strb	r0, [r2, #13]
                                            ActiveScanResults[ActiveScanResultIndex].PANID.Val = rxMessage.SourcePANID.Val;
    bbbe:	8157      	strh	r7, [r2, #10]
                                            ActiveScanResults[ActiveScanResultIndex].Address[i] = rxMessage.SourceAddress[i];
    bbc0:	4a57      	ldr	r2, [pc, #348]	; (bd20 <P2PTasks+0x6e4>)
    bbc2:	6852      	ldr	r2, [r2, #4]
    bbc4:	3301      	adds	r3, #1
    bbc6:	185b      	adds	r3, r3, r1
    bbc8:	0010      	movs	r0, r2
    bbca:	3008      	adds	r0, #8
    bbcc:	7811      	ldrb	r1, [r2, #0]
    bbce:	7019      	strb	r1, [r3, #0]
    bbd0:	3201      	adds	r2, #1
    bbd2:	3301      	adds	r3, #1
                                        for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    bbd4:	4290      	cmp	r0, r2
    bbd6:	d1f9      	bne.n	bbcc <P2PTasks+0x590>
                                        ActiveScanResults[ActiveScanResultIndex].Capability.Val = rxMessage.Payload[1];
    bbd8:	786a      	ldrb	r2, [r5, #1]
    bbda:	4653      	mov	r3, sl
    bbdc:	0119      	lsls	r1, r3, #4
    bbde:	4b5f      	ldr	r3, [pc, #380]	; (bd5c <P2PTasks+0x720>)
    bbe0:	185b      	adds	r3, r3, r1
    bbe2:	739a      	strb	r2, [r3, #14]
                                                ActiveScanResults[ActiveScanResultIndex].PeerInfo[i] = rxMessage.Payload[2+i];
    bbe4:	78aa      	ldrb	r2, [r5, #2]
    bbe6:	73da      	strb	r2, [r3, #15]
                                        ActiveScanResultIndex++;
    bbe8:	4653      	mov	r3, sl
    bbea:	3301      	adds	r3, #1
    bbec:	4a5d      	ldr	r2, [pc, #372]	; (bd64 <P2PTasks+0x728>)
    bbee:	7013      	strb	r3, [r2, #0]
    bbf0:	e7c2      	b.n	bb78 <P2PTasks+0x53c>
                            if( rxMessage.Payload[1] == STATUS_SUCCESS )
    bbf2:	786b      	ldrb	r3, [r5, #1]
    bbf4:	2b00      	cmp	r3, #0
    bbf6:	d122      	bne.n	bc3e <P2PTasks+0x602>
                                        if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    bbf8:	4b49      	ldr	r3, [pc, #292]	; (bd20 <P2PTasks+0x6e4>)
    bbfa:	685e      	ldr	r6, [r3, #4]
    bbfc:	4c4c      	ldr	r4, [pc, #304]	; (bd30 <P2PTasks+0x6f4>)
    bbfe:	2700      	movs	r7, #0
                                    if( ConnectionTable[i].status.bits.isValid )
    bc00:	0025      	movs	r5, r4
    bc02:	e003      	b.n	bc0c <P2PTasks+0x5d0>
    bc04:	3701      	adds	r7, #1
    bc06:	340a      	adds	r4, #10
                                for(i = 0; i < CONNECTION_SIZE; i++)
    bc08:	2f05      	cmp	r7, #5
    bc0a:	d018      	beq.n	bc3e <P2PTasks+0x602>
                                    if( ConnectionTable[i].status.bits.isValid )
    bc0c:	9706      	str	r7, [sp, #24]
    bc0e:	00bb      	lsls	r3, r7, #2
    bc10:	19db      	adds	r3, r3, r7
    bc12:	005b      	lsls	r3, r3, #1
    bc14:	18eb      	adds	r3, r5, r3
    bc16:	7a1b      	ldrb	r3, [r3, #8]
    bc18:	09db      	lsrs	r3, r3, #7
    bc1a:	d0f3      	beq.n	bc04 <P2PTasks+0x5c8>
                                        if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    bc1c:	0021      	movs	r1, r4
    bc1e:	0030      	movs	r0, r6
    bc20:	4b44      	ldr	r3, [pc, #272]	; (bd34 <P2PTasks+0x6f8>)
    bc22:	4798      	blx	r3
    bc24:	2800      	cmp	r0, #0
    bc26:	d0ed      	beq.n	bc04 <P2PTasks+0x5c8>
                                            ConnectionTable[i].status.Val = 0;
    bc28:	9a06      	ldr	r2, [sp, #24]
    bc2a:	0093      	lsls	r3, r2, #2
    bc2c:	189c      	adds	r4, r3, r2
    bc2e:	0064      	lsls	r4, r4, #1
    bc30:	4b3f      	ldr	r3, [pc, #252]	; (bd30 <P2PTasks+0x6f4>)
    bc32:	191c      	adds	r4, r3, r4
    bc34:	2300      	movs	r3, #0
    bc36:	7223      	strb	r3, [r4, #8]
												PDS_Store(PDS_CONNECTION_TABLE_ID);
    bc38:	2005      	movs	r0, #5
    bc3a:	4b3f      	ldr	r3, [pc, #252]	; (bd38 <P2PTasks+0x6fc>)
    bc3c:	4798      	blx	r3
                        MiMAC_DiscardPacket();
    bc3e:	4b35      	ldr	r3, [pc, #212]	; (bd14 <P2PTasks+0x6d8>)
    bc40:	4798      	blx	r3
                        break;
    bc42:	e0a8      	b.n	bd96 <P2PTasks+0x75a>
                            dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_TIME_SYNC_DATA_PACKET));
    bc44:	20e0      	movs	r0, #224	; 0xe0
    bc46:	4b30      	ldr	r3, [pc, #192]	; (bd08 <P2PTasks+0x6cc>)
    bc48:	4798      	blx	r3
    bc4a:	1e04      	subs	r4, r0, #0
                            if (NULL == dataPtr)
    bc4c:	d100      	bne.n	bc50 <P2PTasks+0x614>
    bc4e:	e0b7      	b.n	bdc0 <P2PTasks+0x784>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    bc50:	4b33      	ldr	r3, [pc, #204]	; (bd20 <P2PTasks+0x6e4>)
    bc52:	685d      	ldr	r5, [r3, #4]
                                if( indirectMessages[i].flags.bits.isValid )
    bc54:	4b44      	ldr	r3, [pc, #272]	; (bd68 <P2PTasks+0x72c>)
    bc56:	7b9b      	ldrb	r3, [r3, #14]
    bc58:	07db      	lsls	r3, r3, #31
    bc5a:	d505      	bpl.n	bc68 <P2PTasks+0x62c>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    bc5c:	0029      	movs	r1, r5
    bc5e:	4843      	ldr	r0, [pc, #268]	; (bd6c <P2PTasks+0x730>)
    bc60:	4b34      	ldr	r3, [pc, #208]	; (bd34 <P2PTasks+0x6f8>)
    bc62:	4798      	blx	r3
    bc64:	2800      	cmp	r0, #0
    bc66:	d11e      	bne.n	bca6 <P2PTasks+0x66a>
                                if( indirectMessages[i].flags.bits.isValid )
    bc68:	2391      	movs	r3, #145	; 0x91
    bc6a:	005b      	lsls	r3, r3, #1
    bc6c:	4a3e      	ldr	r2, [pc, #248]	; (bd68 <P2PTasks+0x72c>)
    bc6e:	5cd3      	ldrb	r3, [r2, r3]
    bc70:	07db      	lsls	r3, r3, #31
    bc72:	d507      	bpl.n	bc84 <P2PTasks+0x648>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    bc74:	0029      	movs	r1, r5
    bc76:	483e      	ldr	r0, [pc, #248]	; (bd70 <P2PTasks+0x734>)
    bc78:	4b2e      	ldr	r3, [pc, #184]	; (bd34 <P2PTasks+0x6f8>)
    bc7a:	4798      	blx	r3
    bc7c:	4a3c      	ldr	r2, [pc, #240]	; (bd70 <P2PTasks+0x734>)
                                if( indirectMessages[i].flags.bits.isValid )
    bc7e:	2601      	movs	r6, #1
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    bc80:	2800      	cmp	r0, #0
    bc82:	d112      	bne.n	bcaa <P2PTasks+0x66e>
                                        SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, isCommand, false, 
    bc84:	4b26      	ldr	r3, [pc, #152]	; (bd20 <P2PTasks+0x6e4>)
    bc86:	8859      	ldrh	r1, [r3, #2]
    bc88:	4b3a      	ldr	r3, [pc, #232]	; (bd74 <P2PTasks+0x738>)
    bc8a:	9305      	str	r3, [sp, #20]
    bc8c:	2300      	movs	r3, #0
    bc8e:	9304      	str	r3, [sp, #16]
    bc90:	9303      	str	r3, [sp, #12]
    bc92:	9402      	str	r4, [sp, #8]
    bc94:	9301      	str	r3, [sp, #4]
    bc96:	9300      	str	r3, [sp, #0]
    bc98:	002a      	movs	r2, r5
    bc9a:	2000      	movs	r0, #0
    bc9c:	4c22      	ldr	r4, [pc, #136]	; (bd28 <P2PTasks+0x6ec>)
    bc9e:	47a0      	blx	r4
                            MiMAC_DiscardPacket();
    bca0:	4b1c      	ldr	r3, [pc, #112]	; (bd14 <P2PTasks+0x6d8>)
    bca2:	4798      	blx	r3
                        break;
    bca4:	e077      	b.n	bd96 <P2PTasks+0x75a>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    bca6:	4a31      	ldr	r2, [pc, #196]	; (bd6c <P2PTasks+0x730>)
                                if( indirectMessages[i].flags.bits.isValid )
    bca8:	2600      	movs	r6, #0
                                        for(j = 0; j < indirectMessages[i].PayLoadSize; j++)
    bcaa:	218a      	movs	r1, #138	; 0x8a
    bcac:	0049      	lsls	r1, r1, #1
    bcae:	4371      	muls	r1, r6
    bcb0:	4b2d      	ldr	r3, [pc, #180]	; (bd68 <P2PTasks+0x72c>)
    bcb2:	185b      	adds	r3, r3, r1
    bcb4:	7bd8      	ldrb	r0, [r3, #15]
    bcb6:	2800      	cmp	r0, #0
    bcb8:	d00e      	beq.n	bcd8 <P2PTasks+0x69c>
    bcba:	2300      	movs	r3, #0
                                            dataPtr[dataLen++] =indirectMessages[i].PayLoad[j];
    bcbc:	0008      	movs	r0, r1
    bcbe:	492a      	ldr	r1, [pc, #168]	; (bd68 <P2PTasks+0x72c>)
    bcc0:	1809      	adds	r1, r1, r0
                                        for(j = 0; j < indirectMessages[i].PayLoadSize; j++)
    bcc2:	000f      	movs	r7, r1
    bcc4:	370f      	adds	r7, #15
                                            dataPtr[dataLen++] =indirectMessages[i].PayLoad[j];
    bcc6:	1c58      	adds	r0, r3, #1
    bcc8:	b2c0      	uxtb	r0, r0
    bcca:	18cd      	adds	r5, r1, r3
    bccc:	7c2d      	ldrb	r5, [r5, #16]
    bcce:	54e5      	strb	r5, [r4, r3]
    bcd0:	0003      	movs	r3, r0
                                        for(j = 0; j < indirectMessages[i].PayLoadSize; j++)
    bcd2:	783d      	ldrb	r5, [r7, #0]
    bcd4:	4285      	cmp	r5, r0
    bcd6:	d8f6      	bhi.n	bcc6 <P2PTasks+0x68a>
                                            SendPacket(false, indirectMessages[i].DestPANID, indirectMessages[i].DestAddress.DestLongAddress, isCommand, (bool)indirectMessages[i].flags.bits.isSecured,
    bcd8:	258a      	movs	r5, #138	; 0x8a
    bcda:	006d      	lsls	r5, r5, #1
    bcdc:	436e      	muls	r6, r5
    bcde:	4d22      	ldr	r5, [pc, #136]	; (bd68 <P2PTasks+0x72c>)
    bce0:	19ad      	adds	r5, r5, r6
    bce2:	88a9      	ldrh	r1, [r5, #4]
    bce4:	4b23      	ldr	r3, [pc, #140]	; (bd74 <P2PTasks+0x738>)
    bce6:	9305      	str	r3, [sp, #20]
    bce8:	2600      	movs	r6, #0
    bcea:	9604      	str	r6, [sp, #16]
    bcec:	9603      	str	r6, [sp, #12]
    bcee:	9402      	str	r4, [sp, #8]
    bcf0:	9001      	str	r0, [sp, #4]
    bcf2:	7bab      	ldrb	r3, [r5, #14]
    bcf4:	071b      	lsls	r3, r3, #28
    bcf6:	0fdb      	lsrs	r3, r3, #31
    bcf8:	9300      	str	r3, [sp, #0]
    bcfa:	2300      	movs	r3, #0
    bcfc:	2000      	movs	r0, #0
    bcfe:	4c0a      	ldr	r4, [pc, #40]	; (bd28 <P2PTasks+0x6ec>)
    bd00:	47a0      	blx	r4
                                        indirectMessages[i].flags.Val = 0;   
    bd02:	73ae      	strb	r6, [r5, #14]
                                        goto END_OF_SENDING_INDIRECT_MESSAGE;    
    bd04:	e7cc      	b.n	bca0 <P2PTasks+0x664>
    bd06:	46c0      	nop			; (mov r8, r8)
    bd08:	0000c1a1 	.word	0x0000c1a1
    bd0c:	200026c1 	.word	0x200026c1
    bd10:	2000000c 	.word	0x2000000c
    bd14:	0000a07d 	.word	0x0000a07d
    bd18:	0000ac75 	.word	0x0000ac75
    bd1c:	0000453d 	.word	0x0000453d
    bd20:	2000295c 	.word	0x2000295c
    bd24:	0000acb1 	.word	0x0000acb1
    bd28:	0000ae1d 	.word	0x0000ae1d
    bd2c:	00004511 	.word	0x00004511
    bd30:	20002674 	.word	0x20002674
    bd34:	0000aef1 	.word	0x0000aef1
    bd38:	00009569 	.word	0x00009569
    bd3c:	200026cc 	.word	0x200026cc
    bd40:	200026c8 	.word	0x200026c8
    bd44:	0000ffff 	.word	0x0000ffff
    bd48:	0000b375 	.word	0x0000b375
    bd4c:	200026ec 	.word	0x200026ec
    bd50:	0000c3e1 	.word	0x0000c3e1
    bd54:	200026c4 	.word	0x200026c4
    bd58:	00009801 	.word	0x00009801
    bd5c:	2000291c 	.word	0x2000291c
    bd60:	20000011 	.word	0x20000011
    bd64:	2000296c 	.word	0x2000296c
    bd68:	200026f0 	.word	0x200026f0
    bd6c:	200026f6 	.word	0x200026f6
    bd70:	2000280a 	.word	0x2000280a
    bd74:	000076a1 	.word	0x000076a1
            P2PStatus.bits.RxHasUserData = 1;
    bd78:	4c26      	ldr	r4, [pc, #152]	; (be14 <P2PTasks+0x7d8>)
    bd7a:	7823      	ldrb	r3, [r4, #0]
    bd7c:	2208      	movs	r2, #8
    bd7e:	4313      	orrs	r3, r2
    bd80:	7023      	strb	r3, [r4, #0]
			pktRxcallback(&rxMessage);
    bd82:	4b25      	ldr	r3, [pc, #148]	; (be18 <P2PTasks+0x7dc>)
    bd84:	681b      	ldr	r3, [r3, #0]
    bd86:	4825      	ldr	r0, [pc, #148]	; (be1c <P2PTasks+0x7e0>)
    bd88:	4798      	blx	r3
			P2PStatus.bits.RxHasUserData = 0;
    bd8a:	7823      	ldrb	r3, [r4, #0]
    bd8c:	2208      	movs	r2, #8
    bd8e:	4393      	bics	r3, r2
    bd90:	7023      	strb	r3, [r4, #0]
			MiMAC_DiscardPacket();
    bd92:	4b23      	ldr	r3, [pc, #140]	; (be20 <P2PTasks+0x7e4>)
    bd94:	4798      	blx	r3
        if( rxMessage.PayloadSize == 0  || P2PStatus.bits.SearchConnection || P2PStatus.bits.Resync )
    bd96:	4b21      	ldr	r3, [pc, #132]	; (be1c <P2PTasks+0x7e0>)
    bd98:	7b1b      	ldrb	r3, [r3, #12]
    bd9a:	2b00      	cmp	r3, #0
    bd9c:	d007      	beq.n	bdae <P2PTasks+0x772>
    bd9e:	4b1d      	ldr	r3, [pc, #116]	; (be14 <P2PTasks+0x7d8>)
    bda0:	781b      	ldrb	r3, [r3, #0]
    bda2:	06db      	lsls	r3, r3, #27
    bda4:	d403      	bmi.n	bdae <P2PTasks+0x772>
    bda6:	4b1b      	ldr	r3, [pc, #108]	; (be14 <P2PTasks+0x7d8>)
    bda8:	781b      	ldrb	r3, [r3, #0]
    bdaa:	069b      	lsls	r3, r3, #26
    bdac:	d506      	bpl.n	bdbc <P2PTasks+0x780>
            P2PStatus.bits.RxHasUserData = 0;
    bdae:	4a19      	ldr	r2, [pc, #100]	; (be14 <P2PTasks+0x7d8>)
    bdb0:	7813      	ldrb	r3, [r2, #0]
    bdb2:	2108      	movs	r1, #8
    bdb4:	438b      	bics	r3, r1
    bdb6:	7013      	strb	r3, [r2, #0]
            MiMAC_DiscardPacket();
    bdb8:	4b19      	ldr	r3, [pc, #100]	; (be20 <P2PTasks+0x7e4>)
    bdba:	4798      	blx	r3
    PDS_TaskHandler();
    bdbc:	4b19      	ldr	r3, [pc, #100]	; (be24 <P2PTasks+0x7e8>)
    bdbe:	4798      	blx	r3
}
    bdc0:	b00b      	add	sp, #44	; 0x2c
    bdc2:	bc3c      	pop	{r2, r3, r4, r5}
    bdc4:	4690      	mov	r8, r2
    bdc6:	4699      	mov	r9, r3
    bdc8:	46a2      	mov	sl, r4
    bdca:	46ab      	mov	fp, r5
    bdcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    bdce:	4b16      	ldr	r3, [pc, #88]	; (be28 <P2PTasks+0x7ec>)
    bdd0:	781b      	ldrb	r3, [r3, #0]
    bdd2:	2b01      	cmp	r3, #1
    bdd4:	d100      	bne.n	bdd8 <P2PTasks+0x79c>
    bdd6:	e5af      	b.n	b938 <P2PTasks+0x2fc>
                                        status = STATUS_NOT_SAME_PAN;
    bdd8:	25f2      	movs	r5, #242	; 0xf2
    bdda:	e569      	b.n	b8b0 <P2PTasks+0x274>
                            MiMAC_DiscardPacket();
    bddc:	4b10      	ldr	r3, [pc, #64]	; (be20 <P2PTasks+0x7e4>)
    bdde:	4798      	blx	r3
                            dataPtr[dataLen++] = CMD_P2P_CONNECTION_REMOVAL_RESPONSE;
    bde0:	2301      	movs	r3, #1
                                dataPtr[dataLen++] = STATUS_ENTRY_NOT_EXIST;
    bde2:	1c5c      	adds	r4, r3, #1
    bde4:	22f0      	movs	r2, #240	; 0xf0
    bde6:	4641      	mov	r1, r8
    bde8:	54ca      	strb	r2, [r1, r3]
                                    SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn, 
    bdea:	4b0c      	ldr	r3, [pc, #48]	; (be1c <P2PTasks+0x7e0>)
    bdec:	685a      	ldr	r2, [r3, #4]
    bdee:	8859      	ldrh	r1, [r3, #2]
    bdf0:	480e      	ldr	r0, [pc, #56]	; (be2c <P2PTasks+0x7f0>)
    bdf2:	9005      	str	r0, [sp, #20]
    bdf4:	2001      	movs	r0, #1
    bdf6:	9004      	str	r0, [sp, #16]
    bdf8:	2000      	movs	r0, #0
    bdfa:	9003      	str	r0, [sp, #12]
    bdfc:	4640      	mov	r0, r8
    bdfe:	9002      	str	r0, [sp, #8]
    be00:	9401      	str	r4, [sp, #4]
    be02:	781b      	ldrb	r3, [r3, #0]
    be04:	071b      	lsls	r3, r3, #28
    be06:	0fdb      	lsrs	r3, r3, #31
    be08:	9300      	str	r3, [sp, #0]
    be0a:	2301      	movs	r3, #1
    be0c:	2000      	movs	r0, #0
    be0e:	4c08      	ldr	r4, [pc, #32]	; (be30 <P2PTasks+0x7f4>)
    be10:	47a0      	blx	r4
                            break;
    be12:	e7c0      	b.n	bd96 <P2PTasks+0x75a>
    be14:	200026ec 	.word	0x200026ec
    be18:	200002a4 	.word	0x200002a4
    be1c:	2000295c 	.word	0x2000295c
    be20:	0000a07d 	.word	0x0000a07d
    be24:	000096f1 	.word	0x000096f1
    be28:	20000010 	.word	0x20000010
    be2c:	0000acb1 	.word	0x0000acb1
    be30:	0000ae1d 	.word	0x0000ae1d

0000be34 <MiApp_EstablishConnection>:
    {
    be34:	b5f0      	push	{r4, r5, r6, r7, lr}
    be36:	46de      	mov	lr, fp
    be38:	4657      	mov	r7, sl
    be3a:	464e      	mov	r6, r9
    be3c:	4645      	mov	r5, r8
    be3e:	b5e0      	push	{r5, r6, r7, lr}
    be40:	b08b      	sub	sp, #44	; 0x2c
    be42:	0016      	movs	r6, r2
    be44:	231f      	movs	r3, #31
    be46:	aa02      	add	r2, sp, #8
    be48:	4694      	mov	ip, r2
    be4a:	4463      	add	r3, ip
    be4c:	7018      	strb	r0, [r3, #0]
        uint8_t    tmpConnectionMode = ConnMode;
    be4e:	4c61      	ldr	r4, [pc, #388]	; (bfd4 <MiApp_EstablishConnection+0x1a0>)
    be50:	7823      	ldrb	r3, [r4, #0]
    be52:	9308      	str	r3, [sp, #32]
        tick1.Val = MiWi_TickGet();
    be54:	4d60      	ldr	r5, [pc, #384]	; (bfd8 <MiApp_EstablishConnection+0x1a4>)
    be56:	47a8      	blx	r5
    be58:	4b60      	ldr	r3, [pc, #384]	; (bfdc <MiApp_EstablishConnection+0x1a8>)
    be5a:	6018      	str	r0, [r3, #0]
        t1.Val = MiWi_TickGet();
    be5c:	47a8      	blx	r5
        t1.Val -= (ONE_SECOND);
    be5e:	4b60      	ldr	r3, [pc, #384]	; (bfe0 <MiApp_EstablishConnection+0x1ac>)
    be60:	18c5      	adds	r5, r0, r3
        ConnMode = ENABLE_ALL_CONN;
    be62:	2300      	movs	r3, #0
    be64:	7023      	strb	r3, [r4, #0]
        P2PStatus.bits.SearchConnection = 1;
    be66:	4a5f      	ldr	r2, [pc, #380]	; (bfe4 <MiApp_EstablishConnection+0x1b0>)
    be68:	7813      	ldrb	r3, [r2, #0]
    be6a:	2110      	movs	r1, #16
    be6c:	430b      	orrs	r3, r1
    be6e:	7013      	strb	r3, [r2, #0]
        EstConfCallback = ConfCallback;
    be70:	4b5d      	ldr	r3, [pc, #372]	; (bfe8 <MiApp_EstablishConnection+0x1b4>)
    be72:	9a14      	ldr	r2, [sp, #80]	; 0x50
    be74:	601a      	str	r2, [r3, #0]
        uint8_t    connectionInterval = 0;
    be76:	2400      	movs	r4, #0
        uint8_t    retry = CONNECTION_RETRY_TIMES;
    be78:	2703      	movs	r7, #3
        while( P2PStatus.bits.SearchConnection )
    be7a:	4b5a      	ldr	r3, [pc, #360]	; (bfe4 <MiApp_EstablishConnection+0x1b0>)
    be7c:	4699      	mov	r9, r3
            t2.Val = MiWi_TickGet();
    be7e:	4b56      	ldr	r3, [pc, #344]	; (bfd8 <MiApp_EstablishConnection+0x1a4>)
    be80:	4698      	mov	r8, r3
    be82:	002b      	movs	r3, r5
    be84:	003d      	movs	r5, r7
    be86:	001f      	movs	r7, r3
        while( P2PStatus.bits.SearchConnection )
    be88:	e08c      	b.n	bfa4 <MiApp_EstablishConnection+0x170>
                if( retry-- == 0 )
    be8a:	1e6b      	subs	r3, r5, #1
    be8c:	b2db      	uxtb	r3, r3
    be8e:	9307      	str	r3, [sp, #28]
    be90:	2d00      	cmp	r5, #0
    be92:	d02d      	beq.n	bef0 <MiApp_EstablishConnection+0xbc>
                MiApp_Set(CHANNEL, &Channel);
    be94:	211f      	movs	r1, #31
    be96:	ab02      	add	r3, sp, #8
    be98:	469c      	mov	ip, r3
    be9a:	4461      	add	r1, ip
    be9c:	2000      	movs	r0, #0
    be9e:	4b53      	ldr	r3, [pc, #332]	; (bfec <MiApp_EstablishConnection+0x1b8>)
    bea0:	4798      	blx	r3
                dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_P2P_CONNECTION_REQUEST));
    bea2:	2010      	movs	r0, #16
    bea4:	4b52      	ldr	r3, [pc, #328]	; (bff0 <MiApp_EstablishConnection+0x1bc>)
    bea6:	4798      	blx	r3
    bea8:	1e07      	subs	r7, r0, #0
                if (NULL == dataPtr)
    beaa:	d045      	beq.n	bf38 <MiApp_EstablishConnection+0x104>
                dataPtr[dataLen++] = CMD_P2P_CONNECTION_REQUEST;
    beac:	2381      	movs	r3, #129	; 0x81
    beae:	7003      	strb	r3, [r0, #0]
                dataPtr[dataLen++] = currentChannel;
    beb0:	4b50      	ldr	r3, [pc, #320]	; (bff4 <MiApp_EstablishConnection+0x1c0>)
    beb2:	781b      	ldrb	r3, [r3, #0]
    beb4:	7043      	strb	r3, [r0, #1]
                dataPtr[dataLen++] = P2PCapacityInfo;
    beb6:	4b50      	ldr	r3, [pc, #320]	; (bff8 <MiApp_EstablishConnection+0x1c4>)
    beb8:	781b      	ldrb	r3, [r3, #0]
    beba:	7083      	strb	r3, [r0, #2]
                            dataPtr[dataLen++] = AdditionalNodeID[i];
    bebc:	4b4f      	ldr	r3, [pc, #316]	; (bffc <MiApp_EstablishConnection+0x1c8>)
    bebe:	781b      	ldrb	r3, [r3, #0]
    bec0:	70c3      	strb	r3, [r0, #3]
                        uint16_t DestinationAddress16 = ((addr[1] << 8) + addr[0]);	
    bec2:	7872      	ldrb	r2, [r6, #1]
    bec4:	0212      	lsls	r2, r2, #8
    bec6:	7833      	ldrb	r3, [r6, #0]
    bec8:	189b      	adds	r3, r3, r2
                        if( DestinationAddress16 == 0xFFFF )
    beca:	b29b      	uxth	r3, r3
    becc:	4a4c      	ldr	r2, [pc, #304]	; (c000 <MiApp_EstablishConnection+0x1cc>)
    bece:	4293      	cmp	r3, r2
    bed0:	d015      	beq.n	befe <MiApp_EstablishConnection+0xca>
							MiApp_Set(CHANNEL, &Channel);
    bed2:	211f      	movs	r1, #31
    bed4:	ab02      	add	r3, sp, #8
    bed6:	469c      	mov	ip, r3
    bed8:	4461      	add	r1, ip
    beda:	2000      	movs	r0, #0
    bedc:	4b43      	ldr	r3, [pc, #268]	; (bfec <MiApp_EstablishConnection+0x1b8>)
    bede:	4798      	blx	r3
								  if (addr[j] != ActiveScanResults[i].Address[j])
    bee0:	7833      	ldrb	r3, [r6, #0]
    bee2:	469b      	mov	fp, r3
    bee4:	4b47      	ldr	r3, [pc, #284]	; (c004 <MiApp_EstablishConnection+0x1d0>)
    bee6:	0035      	movs	r5, r6
    bee8:	3508      	adds	r5, #8
    beea:	46bc      	mov	ip, r7
    beec:	001f      	movs	r7, r3
    beee:	e030      	b.n	bf52 <MiApp_EstablishConnection+0x11e>
                    P2PStatus.bits.SearchConnection = 0;
    bef0:	4a3c      	ldr	r2, [pc, #240]	; (bfe4 <MiApp_EstablishConnection+0x1b0>)
    bef2:	7813      	ldrb	r3, [r2, #0]
    bef4:	2110      	movs	r1, #16
    bef6:	438b      	bics	r3, r1
    bef8:	7013      	strb	r3, [r2, #0]
                    return 0xFF;
    befa:	24ff      	movs	r4, #255	; 0xff
    befc:	e01c      	b.n	bf38 <MiApp_EstablishConnection+0x104>
                            SendPacket(true, myPANID, NULL, true, false, dataLen, dataPtr,0, true, CommandConfCallback);
    befe:	4b42      	ldr	r3, [pc, #264]	; (c008 <MiApp_EstablishConnection+0x1d4>)
    bf00:	8819      	ldrh	r1, [r3, #0]
    bf02:	4b42      	ldr	r3, [pc, #264]	; (c00c <MiApp_EstablishConnection+0x1d8>)
    bf04:	9305      	str	r3, [sp, #20]
    bf06:	2301      	movs	r3, #1
    bf08:	9304      	str	r3, [sp, #16]
    bf0a:	2300      	movs	r3, #0
    bf0c:	9303      	str	r3, [sp, #12]
    bf0e:	9002      	str	r0, [sp, #8]
    bf10:	2204      	movs	r2, #4
    bf12:	9201      	str	r2, [sp, #4]
    bf14:	9300      	str	r3, [sp, #0]
    bf16:	3301      	adds	r3, #1
    bf18:	2200      	movs	r2, #0
    bf1a:	2001      	movs	r0, #1
    bf1c:	4c3c      	ldr	r4, [pc, #240]	; (c010 <MiApp_EstablishConnection+0x1dc>)
    bf1e:	47a0      	blx	r4
                t1.Val = t2.Val;
    bf20:	9f06      	ldr	r7, [sp, #24]
                if( retry-- == 0 )
    bf22:	9d07      	ldr	r5, [sp, #28]
                connectionInterval = CONNECTION_INTERVAL-1;
    bf24:	2403      	movs	r4, #3
    bf26:	e039      	b.n	bf9c <MiApp_EstablishConnection+0x168>
        ConnMode = tmpConnectionMode;
    bf28:	4b2a      	ldr	r3, [pc, #168]	; (bfd4 <MiApp_EstablishConnection+0x1a0>)
    bf2a:	466a      	mov	r2, sp
    bf2c:	2120      	movs	r1, #32
    bf2e:	1852      	adds	r2, r2, r1
    bf30:	7812      	ldrb	r2, [r2, #0]
    bf32:	701a      	strb	r2, [r3, #0]
        return LatestConnection;
    bf34:	4b37      	ldr	r3, [pc, #220]	; (c014 <MiApp_EstablishConnection+0x1e0>)
    bf36:	781c      	ldrb	r4, [r3, #0]
    }
    bf38:	0020      	movs	r0, r4
    bf3a:	b00b      	add	sp, #44	; 0x2c
    bf3c:	bc3c      	pop	{r2, r3, r4, r5}
    bf3e:	4690      	mov	r8, r2
    bf40:	4699      	mov	r9, r3
    bf42:	46a2      	mov	sl, r4
    bf44:	46ab      	mov	fp, r5
    bf46:	bdf0      	pop	{r4, r5, r6, r7, pc}
							for(i = 0; i < ACTIVE_SCAN_RESULT_SIZE; i++)
    bf48:	3401      	adds	r4, #1
    bf4a:	b2e4      	uxtb	r4, r4
    bf4c:	3710      	adds	r7, #16
    bf4e:	2c04      	cmp	r4, #4
    bf50:	d03b      	beq.n	bfca <MiApp_EstablishConnection+0x196>
								  if (addr[j] != ActiveScanResults[i].Address[j])
    bf52:	787b      	ldrb	r3, [r7, #1]
    bf54:	455b      	cmp	r3, fp
    bf56:	d1f7      	bne.n	bf48 <MiApp_EstablishConnection+0x114>
    bf58:	1c73      	adds	r3, r6, #1
    bf5a:	1cba      	adds	r2, r7, #2
    bf5c:	7818      	ldrb	r0, [r3, #0]
    bf5e:	7811      	ldrb	r1, [r2, #0]
    bf60:	4288      	cmp	r0, r1
    bf62:	d1f1      	bne.n	bf48 <MiApp_EstablishConnection+0x114>
    bf64:	3301      	adds	r3, #1
    bf66:	3201      	adds	r2, #1
								for(j = 0; j < MY_ADDRESS_LENGTH; j++)
    bf68:	42ab      	cmp	r3, r5
    bf6a:	d1f7      	bne.n	bf5c <MiApp_EstablishConnection+0x128>
    bf6c:	4667      	mov	r7, ip
								SendPacket(false, ActiveScanResults[i].PANID, ActiveScanResults[i].Address, true, false, 
    bf6e:	0124      	lsls	r4, r4, #4
    bf70:	1c62      	adds	r2, r4, #1
    bf72:	4b24      	ldr	r3, [pc, #144]	; (c004 <MiApp_EstablishConnection+0x1d0>)
    bf74:	18d2      	adds	r2, r2, r3
    bf76:	191b      	adds	r3, r3, r4
    bf78:	8959      	ldrh	r1, [r3, #10]
    bf7a:	4b24      	ldr	r3, [pc, #144]	; (c00c <MiApp_EstablishConnection+0x1d8>)
    bf7c:	9305      	str	r3, [sp, #20]
    bf7e:	2301      	movs	r3, #1
    bf80:	9304      	str	r3, [sp, #16]
    bf82:	2300      	movs	r3, #0
    bf84:	9303      	str	r3, [sp, #12]
    bf86:	9702      	str	r7, [sp, #8]
    bf88:	2004      	movs	r0, #4
    bf8a:	9001      	str	r0, [sp, #4]
    bf8c:	9300      	str	r3, [sp, #0]
    bf8e:	3301      	adds	r3, #1
    bf90:	2000      	movs	r0, #0
    bf92:	4c1f      	ldr	r4, [pc, #124]	; (c010 <MiApp_EstablishConnection+0x1dc>)
    bf94:	47a0      	blx	r4
                t1.Val = t2.Val;
    bf96:	9f06      	ldr	r7, [sp, #24]
                if( retry-- == 0 )
    bf98:	9d07      	ldr	r5, [sp, #28]
                connectionInterval = CONNECTION_INTERVAL-1;
    bf9a:	2403      	movs	r4, #3
            P2PTasks();
    bf9c:	4b1e      	ldr	r3, [pc, #120]	; (c018 <MiApp_EstablishConnection+0x1e4>)
    bf9e:	4798      	blx	r3
			SYSTEM_RunTasks();
    bfa0:	4b1e      	ldr	r3, [pc, #120]	; (c01c <MiApp_EstablishConnection+0x1e8>)
    bfa2:	4798      	blx	r3
        while( P2PStatus.bits.SearchConnection )
    bfa4:	464b      	mov	r3, r9
    bfa6:	781b      	ldrb	r3, [r3, #0]
    bfa8:	06db      	lsls	r3, r3, #27
    bfaa:	d5bd      	bpl.n	bf28 <MiApp_EstablishConnection+0xf4>
            t2.Val = MiWi_TickGet();
    bfac:	47c0      	blx	r8
            if( MiWi_TickGetDiff(t2, t1) > (ONE_SECOND) )
    bfae:	0039      	movs	r1, r7
    bfb0:	9006      	str	r0, [sp, #24]
    bfb2:	4b1b      	ldr	r3, [pc, #108]	; (c020 <MiApp_EstablishConnection+0x1ec>)
    bfb4:	4798      	blx	r3
    bfb6:	4b1b      	ldr	r3, [pc, #108]	; (c024 <MiApp_EstablishConnection+0x1f0>)
    bfb8:	4298      	cmp	r0, r3
    bfba:	d9ef      	bls.n	bf9c <MiApp_EstablishConnection+0x168>
                if( connectionInterval-- > 0 )
    bfbc:	2c00      	cmp	r4, #0
    bfbe:	d100      	bne.n	bfc2 <MiApp_EstablishConnection+0x18e>
    bfc0:	e763      	b.n	be8a <MiApp_EstablishConnection+0x56>
    bfc2:	3c01      	subs	r4, #1
    bfc4:	b2e4      	uxtb	r4, r4
                t1.Val = t2.Val;
    bfc6:	9f06      	ldr	r7, [sp, #24]
    bfc8:	e7ec      	b.n	bfa4 <MiApp_EstablishConnection+0x170>
    bfca:	9f06      	ldr	r7, [sp, #24]
                if( retry-- == 0 )
    bfcc:	9d07      	ldr	r5, [sp, #28]
                connectionInterval = CONNECTION_INTERVAL-1;
    bfce:	3c01      	subs	r4, #1
    bfd0:	e7e4      	b.n	bf9c <MiApp_EstablishConnection+0x168>
    bfd2:	46c0      	nop			; (mov r8, r8)
    bfd4:	20000010 	.word	0x20000010
    bfd8:	0000c3e1 	.word	0x0000c3e1
    bfdc:	20002918 	.word	0x20002918
    bfe0:	fff0bdc0 	.word	0xfff0bdc0
    bfe4:	200026ec 	.word	0x200026ec
    bfe8:	200026cc 	.word	0x200026cc
    bfec:	0000b04d 	.word	0x0000b04d
    bff0:	0000c1a1 	.word	0x0000c1a1
    bff4:	20000011 	.word	0x20000011
    bff8:	200026c1 	.word	0x200026c1
    bffc:	2000000c 	.word	0x2000000c
    c000:	0000ffff 	.word	0x0000ffff
    c004:	2000291c 	.word	0x2000291c
    c008:	200026c8 	.word	0x200026c8
    c00c:	0000acb1 	.word	0x0000acb1
    c010:	0000ae1d 	.word	0x0000ae1d
    c014:	20002670 	.word	0x20002670
    c018:	0000b63d 	.word	0x0000b63d
    c01c:	0000db25 	.word	0x0000db25
    c020:	0000c441 	.word	0x0000c441
    c024:	000f4240 	.word	0x000f4240

0000c028 <MiApp_SearchConnection>:
    {
    c028:	b5f0      	push	{r4, r5, r6, r7, lr}
    c02a:	46d6      	mov	lr, sl
    c02c:	464f      	mov	r7, r9
    c02e:	4646      	mov	r6, r8
    c030:	b5c0      	push	{r6, r7, lr}
    c032:	b08a      	sub	sp, #40	; 0x28
    c034:	4690      	mov	r8, r2
        uint8_t backupChannel = currentChannel;
    c036:	4b3d      	ldr	r3, [pc, #244]	; (c12c <MiApp_SearchConnection+0x104>)
    c038:	781a      	ldrb	r2, [r3, #0]
    c03a:	231e      	movs	r3, #30
    c03c:	ac02      	add	r4, sp, #8
    c03e:	46a4      	mov	ip, r4
    c040:	4463      	add	r3, ip
    c042:	701a      	strb	r2, [r3, #0]
            ActiveScanResults[i].Channel = 0xFF;
    c044:	4b3a      	ldr	r3, [pc, #232]	; (c130 <MiApp_SearchConnection+0x108>)
    c046:	22ff      	movs	r2, #255	; 0xff
    c048:	701a      	strb	r2, [r3, #0]
    c04a:	741a      	strb	r2, [r3, #16]
    c04c:	2420      	movs	r4, #32
    c04e:	551a      	strb	r2, [r3, r4]
    c050:	3410      	adds	r4, #16
    c052:	551a      	strb	r2, [r3, r4]
        ActiveScanResultIndex = 0;
    c054:	2300      	movs	r3, #0
    c056:	4a37      	ldr	r2, [pc, #220]	; (c134 <MiApp_SearchConnection+0x10c>)
    c058:	7013      	strb	r3, [r2, #0]
        i = 0;
    c05a:	221f      	movs	r2, #31
    c05c:	4462      	add	r2, ip
    c05e:	7013      	strb	r3, [r2, #0]
		scan_symbols =   ABASESUPERFRAMEDURATION *((1<<scan_duration) + 1);
    c060:	3301      	adds	r3, #1
    c062:	4083      	lsls	r3, r0
    c064:	3301      	adds	r3, #1
    c066:	011d      	lsls	r5, r3, #4
    c068:	1aeb      	subs	r3, r5, r3
    c06a:	019b      	lsls	r3, r3, #6
		return SYMBOLS_TO_TICKS(scan_symbols);
    c06c:	25fa      	movs	r5, #250	; 0xfa
    c06e:	00ad      	lsls	r5, r5, #2
    c070:	435d      	muls	r5, r3
    c072:	2300      	movs	r3, #0
            if( ChannelMap & FULL_CHANNEL_MAP & (channelMask << i) )
    c074:	2603      	movs	r6, #3
    c076:	400e      	ands	r6, r1
    c078:	46b2      	mov	sl, r6
                printf("\r\nScan Channel ");
    c07a:	4a2f      	ldr	r2, [pc, #188]	; (c138 <MiApp_SearchConnection+0x110>)
    c07c:	4691      	mov	r9, r2
    c07e:	e009      	b.n	c094 <MiApp_SearchConnection+0x6c>
            i++;
    c080:	221f      	movs	r2, #31
    c082:	ab02      	add	r3, sp, #8
    c084:	469c      	mov	ip, r3
    c086:	4462      	add	r2, ip
    c088:	7813      	ldrb	r3, [r2, #0]
    c08a:	3301      	adds	r3, #1
    c08c:	b2db      	uxtb	r3, r3
    c08e:	7013      	strb	r3, [r2, #0]
        while( i < 32 )
    c090:	2b1f      	cmp	r3, #31
    c092:	d83b      	bhi.n	c10c <MiApp_SearchConnection+0xe4>
            if( ChannelMap & FULL_CHANNEL_MAP & (channelMask << i) )
    c094:	2201      	movs	r2, #1
    c096:	409a      	lsls	r2, r3
    c098:	4653      	mov	r3, sl
    c09a:	421a      	tst	r2, r3
    c09c:	d0f0      	beq.n	c080 <MiApp_SearchConnection+0x58>
                printf("\r\nScan Channel ");
    c09e:	4827      	ldr	r0, [pc, #156]	; (c13c <MiApp_SearchConnection+0x114>)
    c0a0:	47c8      	blx	r9
                printf("%d",i);
    c0a2:	241f      	movs	r4, #31
    c0a4:	ab02      	add	r3, sp, #8
    c0a6:	469c      	mov	ip, r3
    c0a8:	4464      	add	r4, ip
    c0aa:	7821      	ldrb	r1, [r4, #0]
    c0ac:	4824      	ldr	r0, [pc, #144]	; (c140 <MiApp_SearchConnection+0x118>)
    c0ae:	47c8      	blx	r9
                MiApp_Set(CHANNEL, &i);
    c0b0:	0021      	movs	r1, r4
    c0b2:	2000      	movs	r0, #0
    c0b4:	4b23      	ldr	r3, [pc, #140]	; (c144 <MiApp_SearchConnection+0x11c>)
    c0b6:	4798      	blx	r3
                dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_P2P_ACTIVE_SCAN_REQUEST));
    c0b8:	2010      	movs	r0, #16
    c0ba:	4b23      	ldr	r3, [pc, #140]	; (c148 <MiApp_SearchConnection+0x120>)
    c0bc:	4798      	blx	r3
                if (NULL == dataPtr)
    c0be:	2800      	cmp	r0, #0
    c0c0:	d02e      	beq.n	c120 <MiApp_SearchConnection+0xf8>
                dataPtr[dataLen++] = CMD_P2P_ACTIVE_SCAN_REQUEST;
    c0c2:	2387      	movs	r3, #135	; 0x87
    c0c4:	7003      	strb	r3, [r0, #0]
                dataPtr[dataLen++] = currentChannel;
    c0c6:	4b19      	ldr	r3, [pc, #100]	; (c12c <MiApp_SearchConnection+0x104>)
    c0c8:	781b      	ldrb	r3, [r3, #0]
    c0ca:	7043      	strb	r3, [r0, #1]
                    SendPacket(true, tmpPANID, NULL, true, false, dataLen, dataPtr,0, true, CommandConfCallback);
    c0cc:	4b1f      	ldr	r3, [pc, #124]	; (c14c <MiApp_SearchConnection+0x124>)
    c0ce:	9305      	str	r3, [sp, #20]
    c0d0:	2301      	movs	r3, #1
    c0d2:	9304      	str	r3, [sp, #16]
    c0d4:	2300      	movs	r3, #0
    c0d6:	9303      	str	r3, [sp, #12]
    c0d8:	9002      	str	r0, [sp, #8]
    c0da:	2202      	movs	r2, #2
    c0dc:	9201      	str	r2, [sp, #4]
    c0de:	9300      	str	r3, [sp, #0]
    c0e0:	3301      	adds	r3, #1
    c0e2:	2200      	movs	r2, #0
    c0e4:	2101      	movs	r1, #1
    c0e6:	4249      	negs	r1, r1
    c0e8:	2001      	movs	r0, #1
    c0ea:	4c19      	ldr	r4, [pc, #100]	; (c150 <MiApp_SearchConnection+0x128>)
    c0ec:	47a0      	blx	r4
                t1.Val = MiWi_TickGet();
    c0ee:	4b19      	ldr	r3, [pc, #100]	; (c154 <MiApp_SearchConnection+0x12c>)
    c0f0:	4798      	blx	r3
    c0f2:	9007      	str	r0, [sp, #28]
                    P2PTasks();
    c0f4:	4e18      	ldr	r6, [pc, #96]	; (c158 <MiApp_SearchConnection+0x130>)
					SYSTEM_RunTasks();			
    c0f6:	4f19      	ldr	r7, [pc, #100]	; (c15c <MiApp_SearchConnection+0x134>)
                    t2.Val = MiWi_TickGet();
    c0f8:	4c16      	ldr	r4, [pc, #88]	; (c154 <MiApp_SearchConnection+0x12c>)
                    P2PTasks();
    c0fa:	47b0      	blx	r6
					SYSTEM_RunTasks();			
    c0fc:	47b8      	blx	r7
                    t2.Val = MiWi_TickGet();
    c0fe:	47a0      	blx	r4
                    if( MiWi_TickGetDiff(t2, t1) > ((uint32_t)(miwi_scan_duration_ticks(ScanDuration))) )
    c100:	9907      	ldr	r1, [sp, #28]
    c102:	4b17      	ldr	r3, [pc, #92]	; (c160 <MiApp_SearchConnection+0x138>)
    c104:	4798      	blx	r3
    c106:	42a8      	cmp	r0, r5
    c108:	d9f7      	bls.n	c0fa <MiApp_SearchConnection+0xd2>
    c10a:	e7b9      	b.n	c080 <MiApp_SearchConnection+0x58>
        MiApp_Set(CHANNEL, &backupChannel);
    c10c:	211e      	movs	r1, #30
    c10e:	4461      	add	r1, ip
    c110:	2000      	movs	r0, #0
    c112:	4b0c      	ldr	r3, [pc, #48]	; (c144 <MiApp_SearchConnection+0x11c>)
    c114:	4798      	blx	r3
        ConfCallback(ActiveScanResultIndex, (uint8_t*)ActiveScanResults);
    c116:	4c07      	ldr	r4, [pc, #28]	; (c134 <MiApp_SearchConnection+0x10c>)
    c118:	7820      	ldrb	r0, [r4, #0]
    c11a:	4905      	ldr	r1, [pc, #20]	; (c130 <MiApp_SearchConnection+0x108>)
    c11c:	47c0      	blx	r8
        return ActiveScanResultIndex;
    c11e:	7820      	ldrb	r0, [r4, #0]
    }   
    c120:	b00a      	add	sp, #40	; 0x28
    c122:	bc1c      	pop	{r2, r3, r4}
    c124:	4690      	mov	r8, r2
    c126:	4699      	mov	r9, r3
    c128:	46a2      	mov	sl, r4
    c12a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c12c:	20000011 	.word	0x20000011
    c130:	2000291c 	.word	0x2000291c
    c134:	2000296c 	.word	0x2000296c
    c138:	00017201 	.word	0x00017201
    c13c:	00018eb8 	.word	0x00018eb8
    c140:	00018160 	.word	0x00018160
    c144:	0000b04d 	.word	0x0000b04d
    c148:	0000c1a1 	.word	0x0000c1a1
    c14c:	0000acb1 	.word	0x0000acb1
    c150:	0000ae1d 	.word	0x0000ae1d
    c154:	0000c3e1 	.word	0x0000c3e1
    c158:	0000b63d 	.word	0x0000b63d
    c15c:	0000db25 	.word	0x0000db25
    c160:	0000c441 	.word	0x0000c441

0000c164 <MiMem_Init>:
* Output:		    none
*
* Overview:		    This function will initialize the Mimem buffers
********************************************************************/
void MiMem_Init(void)
{
    c164:	b510      	push	{r4, lr}
	size_t startAddress =  ALIGN((size_t)heapMem);
    c166:	4a0b      	ldr	r2, [pc, #44]	; (c194 <MiMem_Init+0x30>)
    c168:	1e50      	subs	r0, r2, #1
    c16a:	2403      	movs	r4, #3
    c16c:	43a0      	bics	r0, r4
    c16e:	1d01      	adds	r1, r0, #4

	/*Aligned heap is the base */
	base = (Block_t*) startAddress;
    c170:	4b09      	ldr	r3, [pc, #36]	; (c198 <MiMem_Init+0x34>)
    c172:	6019      	str	r1, [r3, #0]
	base->size = totalFreeBytesRemaining = HEAP_SIZE - (startAddress - (size_t)heapMem);
    c174:	4253      	negs	r3, r2
    c176:	43a3      	bics	r3, r4
    c178:	24c0      	movs	r4, #192	; 0xc0
    c17a:	0164      	lsls	r4, r4, #5
    c17c:	46a4      	mov	ip, r4
    c17e:	4462      	add	r2, ip
    c180:	189b      	adds	r3, r3, r2
    c182:	4a06      	ldr	r2, [pc, #24]	; (c19c <MiMem_Init+0x38>)
    c184:	6013      	str	r3, [r2, #0]
    c186:	60c3      	str	r3, [r0, #12]
	base->free = true;
    c188:	2301      	movs	r3, #1
    c18a:	7403      	strb	r3, [r0, #16]
	base->next = NULL;
    c18c:	2300      	movs	r3, #0
    c18e:	6043      	str	r3, [r0, #4]
	base->prev = NULL;
    c190:	6083      	str	r3, [r0, #8]
}
    c192:	bd10      	pop	{r4, pc}
    c194:	200002ac 	.word	0x200002ac
    c198:	200002a8 	.word	0x200002a8
    c19c:	20001aac 	.word	0x20001aac

0000c1a0 <MiMem_Alloc>:
*  or returns NULL if no memory available
*
* Note:			    none
********************************************************************/
void* MiMem_Alloc(uint8_t size)
{
    c1a0:	b570      	push	{r4, r5, r6, lr}
    c1a2:	0005      	movs	r5, r0
	size_t requestedSize = 0U;
	void* requestedMemPtr = NULL;

	/* Initialize the Heap */
	if (!base)
    c1a4:	4b29      	ldr	r3, [pc, #164]	; (c24c <MiMem_Alloc+0xac>)
    c1a6:	681b      	ldr	r3, [r3, #0]
    c1a8:	2b00      	cmp	r3, #0
    c1aa:	d012      	beq.n	c1d2 <MiMem_Alloc+0x32>
	{
		MiMem_Init();
	}
	/* if requested size is of non zero */
	if (size)
    c1ac:	2d00      	cmp	r5, #0
    c1ae:	d047      	beq.n	c240 <MiMem_Alloc+0xa0>
	{
		requestedSize =  size + blockMetaDataSize;
		requestedSize = ALIGN(requestedSize);
    c1b0:	0029      	movs	r1, r5
    c1b2:	310f      	adds	r1, #15
    c1b4:	2303      	movs	r3, #3
    c1b6:	4399      	bics	r1, r3
    c1b8:	3104      	adds	r1, #4
		if (requestedSize <= totalFreeBytesRemaining)
    c1ba:	4b25      	ldr	r3, [pc, #148]	; (c250 <MiMem_Alloc+0xb0>)
    c1bc:	6818      	ldr	r0, [r3, #0]
    c1be:	4281      	cmp	r1, r0
    c1c0:	d840      	bhi.n	c244 <MiMem_Alloc+0xa4>
		{
			size_t receivedSize = (size_t)~0U;
			Block_t *requestedBlock = NULL;
			Block_t *blockPtr = base;
    c1c2:	4b22      	ldr	r3, [pc, #136]	; (c24c <MiMem_Alloc+0xac>)
    c1c4:	681b      	ldr	r3, [r3, #0]

			/* Find best fit free Block */
			while (blockPtr)
    c1c6:	2b00      	cmp	r3, #0
    c1c8:	d03e      	beq.n	c248 <MiMem_Alloc+0xa8>
    c1ca:	2600      	movs	r6, #0
    c1cc:	2401      	movs	r4, #1
    c1ce:	4264      	negs	r4, r4
    c1d0:	e005      	b.n	c1de <MiMem_Alloc+0x3e>
		MiMem_Init();
    c1d2:	4b20      	ldr	r3, [pc, #128]	; (c254 <MiMem_Alloc+0xb4>)
    c1d4:	4798      	blx	r3
    c1d6:	e7e9      	b.n	c1ac <MiMem_Alloc+0xc>
				if ((blockPtr->free) && (blockPtr->size >= requestedSize) && (blockPtr->size < receivedSize))
				{
					receivedSize = blockPtr->size;
					requestedBlock = blockPtr;
				}
				blockPtr = blockPtr->next;
    c1d8:	681b      	ldr	r3, [r3, #0]
			while (blockPtr)
    c1da:	2b00      	cmp	r3, #0
    c1dc:	d00a      	beq.n	c1f4 <MiMem_Alloc+0x54>
				if ((blockPtr->free) && (blockPtr->size >= requestedSize) && (blockPtr->size < receivedSize))
    c1de:	7b1a      	ldrb	r2, [r3, #12]
    c1e0:	2a00      	cmp	r2, #0
    c1e2:	d0f9      	beq.n	c1d8 <MiMem_Alloc+0x38>
    c1e4:	689a      	ldr	r2, [r3, #8]
    c1e6:	4291      	cmp	r1, r2
    c1e8:	d8f6      	bhi.n	c1d8 <MiMem_Alloc+0x38>
    c1ea:	42a2      	cmp	r2, r4
    c1ec:	d2f4      	bcs.n	c1d8 <MiMem_Alloc+0x38>
    c1ee:	001e      	movs	r6, r3
					receivedSize = blockPtr->size;
    c1f0:	0014      	movs	r4, r2
    c1f2:	e7f1      	b.n	c1d8 <MiMem_Alloc+0x38>
    c1f4:	2400      	movs	r4, #0
			}

			if (requestedBlock)
    c1f6:	2e00      	cmp	r6, #0
    c1f8:	d012      	beq.n	c220 <MiMem_Alloc+0x80>
			{
				if ((requestedBlock->size - requestedSize) > HEAP_MINIMUM_BLOCK_SIZE)
    c1fa:	68b3      	ldr	r3, [r6, #8]
    c1fc:	1a5b      	subs	r3, r3, r1
    c1fe:	2b14      	cmp	r3, #20
    c200:	d810      	bhi.n	c224 <MiMem_Alloc+0x84>
				splitBlock (requestedBlock, requestedSize);
				requestedBlock->free = false;
    c202:	2300      	movs	r3, #0
    c204:	7333      	strb	r3, [r6, #12]
				totalFreeBytesRemaining -= requestedBlock->size;
    c206:	68b3      	ldr	r3, [r6, #8]
    c208:	1ac0      	subs	r0, r0, r3
    c20a:	4b11      	ldr	r3, [pc, #68]	; (c250 <MiMem_Alloc+0xb0>)
    c20c:	6018      	str	r0, [r3, #0]
				requestedMemPtr = ( void* )(((uint8_t*)requestedBlock) + blockMetaDataSize);
    c20e:	0034      	movs	r4, r6
    c210:	3410      	adds	r4, #16
			}
		}
	}
	if (NULL != requestedMemPtr)
    c212:	2c00      	cmp	r4, #0
    c214:	d004      	beq.n	c220 <MiMem_Alloc+0x80>
	{
		memset(requestedMemPtr, 0, size);
    c216:	002a      	movs	r2, r5
    c218:	2100      	movs	r1, #0
    c21a:	0020      	movs	r0, r4
    c21c:	4b0e      	ldr	r3, [pc, #56]	; (c258 <MiMem_Alloc+0xb8>)
    c21e:	4798      	blx	r3
	}
	return requestedMemPtr;
}
    c220:	0020      	movs	r0, r4
    c222:	bd70      	pop	{r4, r5, r6, pc}
  \param[in] size size of the memory chunk requested
  \return None.
 ******************************************************************************/
static void splitBlock(Block_t* blockTobeSplitted, size_t size)
{
	uint8_t* ptr = (uint8_t*)blockTobeSplitted + size;
    c224:	1872      	adds	r2, r6, r1
	Block_t* newBlock = (Block_t*)ptr;

	newBlock->size = blockTobeSplitted->size - size;
    c226:	6093      	str	r3, [r2, #8]

	if (blockTobeSplitted->next)
    c228:	6833      	ldr	r3, [r6, #0]
    c22a:	2b00      	cmp	r3, #0
    c22c:	d000      	beq.n	c230 <MiMem_Alloc+0x90>
		blockTobeSplitted->next->prev = newBlock;
    c22e:	605a      	str	r2, [r3, #4]

	newBlock->next = blockTobeSplitted->next;
    c230:	6833      	ldr	r3, [r6, #0]
    c232:	6013      	str	r3, [r2, #0]
	newBlock->prev = blockTobeSplitted;
    c234:	6056      	str	r6, [r2, #4]
	newBlock->free = true;
    c236:	2301      	movs	r3, #1
    c238:	7313      	strb	r3, [r2, #12]

	blockTobeSplitted->next = newBlock;
    c23a:	6032      	str	r2, [r6, #0]
	blockTobeSplitted->size = size;
    c23c:	60b1      	str	r1, [r6, #8]
    c23e:	e7e0      	b.n	c202 <MiMem_Alloc+0x62>
    c240:	2400      	movs	r4, #0
    c242:	e7ed      	b.n	c220 <MiMem_Alloc+0x80>
    c244:	2400      	movs	r4, #0
    c246:	e7eb      	b.n	c220 <MiMem_Alloc+0x80>
			while (blockPtr)
    c248:	2400      	movs	r4, #0
    c24a:	e7e9      	b.n	c220 <MiMem_Alloc+0x80>
    c24c:	200002a8 	.word	0x200002a8
    c250:	20001aac 	.word	0x20001aac
    c254:	0000c165 	.word	0x0000c165
    c258:	00016c59 	.word	0x00016c59

0000c25c <MiMem_Free>:
	Block_t* blockPtr = base;
    c25c:	4b1c      	ldr	r3, [pc, #112]	; (c2d0 <MiMem_Free+0x74>)
    c25e:	681b      	ldr	r3, [r3, #0]
	Block_t* freeBlockPtr = (Block_t*)((uint8_t*)ptr - (uint8_t*)blockMetaDataSize);
    c260:	3810      	subs	r0, #16
	for(; ((blockPtr != NULL) && (blockPtr != freeBlockPtr)); blockPtr = blockPtr->next);
    c262:	2b00      	cmp	r3, #0
    c264:	d030      	beq.n	c2c8 <MiMem_Free+0x6c>
    c266:	4283      	cmp	r3, r0
    c268:	d02f      	beq.n	c2ca <MiMem_Free+0x6e>
    c26a:	681b      	ldr	r3, [r3, #0]
    c26c:	2b00      	cmp	r3, #0
    c26e:	d02b      	beq.n	c2c8 <MiMem_Free+0x6c>
    c270:	4298      	cmp	r0, r3
    c272:	d1fa      	bne.n	c26a <MiMem_Free+0xe>
		blockPtr->free = true;
    c274:	2301      	movs	r3, #1
    c276:	7303      	strb	r3, [r0, #12]
		totalFreeBytesRemaining += blockPtr->size;
    c278:	6881      	ldr	r1, [r0, #8]
    c27a:	4a16      	ldr	r2, [pc, #88]	; (c2d4 <MiMem_Free+0x78>)
    c27c:	6813      	ldr	r3, [r2, #0]
    c27e:	185b      	adds	r3, r3, r1
    c280:	6013      	str	r3, [r2, #0]
		if (blockPtr->prev && blockPtr->prev->free)
    c282:	6843      	ldr	r3, [r0, #4]
    c284:	2b00      	cmp	r3, #0
    c286:	d00f      	beq.n	c2a8 <MiMem_Free+0x4c>
    c288:	7b1a      	ldrb	r2, [r3, #12]
    c28a:	2a00      	cmp	r2, #0
    c28c:	d00c      	beq.n	c2a8 <MiMem_Free+0x4c>
			blockPtr->prev->size += blockPtr->size;
    c28e:	689a      	ldr	r2, [r3, #8]
    c290:	4694      	mov	ip, r2
    c292:	4461      	add	r1, ip
    c294:	6099      	str	r1, [r3, #8]
			if (blockPtr->next)
    c296:	6803      	ldr	r3, [r0, #0]
    c298:	2b00      	cmp	r3, #0
    c29a:	d001      	beq.n	c2a0 <MiMem_Free+0x44>
			blockPtr->next->prev = blockPtr->prev;
    c29c:	6842      	ldr	r2, [r0, #4]
    c29e:	605a      	str	r2, [r3, #4]
			blockPtr->prev->next = blockPtr->next;
    c2a0:	6843      	ldr	r3, [r0, #4]
    c2a2:	6802      	ldr	r2, [r0, #0]
    c2a4:	601a      	str	r2, [r3, #0]
			blockPtr = blockPtr->prev;
    c2a6:	6840      	ldr	r0, [r0, #4]
		if (blockPtr->next && blockPtr->next->free)
    c2a8:	6803      	ldr	r3, [r0, #0]
    c2aa:	2b00      	cmp	r3, #0
    c2ac:	d00c      	beq.n	c2c8 <MiMem_Free+0x6c>
    c2ae:	7b1a      	ldrb	r2, [r3, #12]
    c2b0:	2a00      	cmp	r2, #0
    c2b2:	d009      	beq.n	c2c8 <MiMem_Free+0x6c>
			blockPtr->size += blockPtr->next->size ;
    c2b4:	6882      	ldr	r2, [r0, #8]
    c2b6:	6899      	ldr	r1, [r3, #8]
    c2b8:	468c      	mov	ip, r1
    c2ba:	4462      	add	r2, ip
    c2bc:	6082      	str	r2, [r0, #8]
			blockPtr->next = blockPtr->next->next;
    c2be:	681b      	ldr	r3, [r3, #0]
    c2c0:	6003      	str	r3, [r0, #0]
			if (blockPtr->next)
    c2c2:	2b00      	cmp	r3, #0
    c2c4:	d000      	beq.n	c2c8 <MiMem_Free+0x6c>
			blockPtr->next->prev = blockPtr;
    c2c6:	6058      	str	r0, [r3, #4]
}
    c2c8:	4770      	bx	lr
	Block_t* blockPtr = base;
    c2ca:	0018      	movs	r0, r3
    c2cc:	e7d2      	b.n	c274 <MiMem_Free+0x18>
    c2ce:	46c0      	nop			; (mov r8, r8)
    c2d0:	200002a8 	.word	0x200002a8
    c2d4:	20001aac 	.word	0x20001aac

0000c2d8 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    c2d8:	b530      	push	{r4, r5, lr}
	if (timers) {
    c2da:	4b14      	ldr	r3, [pc, #80]	; (c32c <placeTimer+0x54>)
    c2dc:	681d      	ldr	r5, [r3, #0]
    c2de:	2d00      	cmp	r5, #0
    c2e0:	d01c      	beq.n	c31c <placeTimer+0x44>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    c2e2:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    c2e4:	6869      	ldr	r1, [r5, #4]
    c2e6:	428a      	cmp	r2, r1
    c2e8:	d309      	bcc.n	c2fe <placeTimer+0x26>
    c2ea:	002c      	movs	r4, r5
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    c2ec:	1a52      	subs	r2, r2, r1
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    c2ee:	6823      	ldr	r3, [r4, #0]
    c2f0:	2b00      	cmp	r3, #0
    c2f2:	d008      	beq.n	c306 <placeTimer+0x2e>
			if (timeout < t->timeout) {
    c2f4:	6859      	ldr	r1, [r3, #4]
    c2f6:	4291      	cmp	r1, r2
    c2f8:	d803      	bhi.n	c302 <placeTimer+0x2a>
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    c2fa:	001c      	movs	r4, r3
    c2fc:	e7f6      	b.n	c2ec <placeTimer+0x14>
    c2fe:	002b      	movs	r3, r5
		SYS_Timer_t *prev = NULL;
    c300:	2400      	movs	r4, #0
				t->timeout -= timeout;
    c302:	1a89      	subs	r1, r1, r2
    c304:	6059      	str	r1, [r3, #4]
			}

			prev = t;
		}

		timer->timeout = timeout;
    c306:	6042      	str	r2, [r0, #4]

		if (prev) {
    c308:	2c00      	cmp	r4, #0
    c30a:	d003      	beq.n	c314 <placeTimer+0x3c>
			timer->next = prev->next;
    c30c:	6823      	ldr	r3, [r4, #0]
    c30e:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    c310:	6020      	str	r0, [r4, #0]
	} else {
		timer->next = NULL;
		timer->timeout = timer->interval;
		timers = timer;
	}
}
    c312:	bd30      	pop	{r4, r5, pc}
			timer->next = timers;
    c314:	6005      	str	r5, [r0, #0]
			timers = timer;
    c316:	4b05      	ldr	r3, [pc, #20]	; (c32c <placeTimer+0x54>)
    c318:	6018      	str	r0, [r3, #0]
    c31a:	e7fa      	b.n	c312 <placeTimer+0x3a>
		timer->next = NULL;
    c31c:	2300      	movs	r3, #0
    c31e:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    c320:	6883      	ldr	r3, [r0, #8]
    c322:	6043      	str	r3, [r0, #4]
		timers = timer;
    c324:	4b01      	ldr	r3, [pc, #4]	; (c32c <placeTimer+0x54>)
    c326:	6018      	str	r0, [r3, #0]
}
    c328:	e7f3      	b.n	c312 <placeTimer+0x3a>
    c32a:	46c0      	nop			; (mov r8, r8)
    c32c:	20001ab0 	.word	0x20001ab0

0000c330 <SYS_HwOverflow_Cb>:
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
}

void SYS_HwOverflow_Cb(void)
{
	timerExtension1++;
    c330:	4a06      	ldr	r2, [pc, #24]	; (c34c <SYS_HwOverflow_Cb+0x1c>)
    c332:	7813      	ldrb	r3, [r2, #0]
    c334:	3301      	adds	r3, #1
    c336:	b2db      	uxtb	r3, r3
    c338:	7013      	strb	r3, [r2, #0]
	if(timerExtension1 == 0)
    c33a:	7813      	ldrb	r3, [r2, #0]
    c33c:	2b00      	cmp	r3, #0
    c33e:	d104      	bne.n	c34a <SYS_HwOverflow_Cb+0x1a>
	{
		timerExtension2++;
    c340:	4a03      	ldr	r2, [pc, #12]	; (c350 <SYS_HwOverflow_Cb+0x20>)
    c342:	7813      	ldrb	r3, [r2, #0]
    c344:	3301      	adds	r3, #1
    c346:	b2db      	uxtb	r3, r3
    c348:	7013      	strb	r3, [r2, #0]
	}
}
    c34a:	4770      	bx	lr
    c34c:	20002978 	.word	0x20002978
    c350:	20002979 	.word	0x20002979

0000c354 <SYS_TimerStop>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    c354:	4b0e      	ldr	r3, [pc, #56]	; (c390 <SYS_TimerStop+0x3c>)
    c356:	681a      	ldr	r2, [r3, #0]
    c358:	2a00      	cmp	r2, #0
    c35a:	d014      	beq.n	c386 <SYS_TimerStop+0x32>
		if (t == timer) {
    c35c:	4282      	cmp	r2, r0
    c35e:	d013      	beq.n	c388 <SYS_TimerStop+0x34>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    c360:	6813      	ldr	r3, [r2, #0]
    c362:	2b00      	cmp	r3, #0
    c364:	d00f      	beq.n	c386 <SYS_TimerStop+0x32>
		if (t == timer) {
    c366:	4298      	cmp	r0, r3
    c368:	d001      	beq.n	c36e <SYS_TimerStop+0x1a>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    c36a:	001a      	movs	r2, r3
    c36c:	e7f8      	b.n	c360 <SYS_TimerStop+0xc>
			if (prev) {
    c36e:	2a00      	cmp	r2, #0
    c370:	d00a      	beq.n	c388 <SYS_TimerStop+0x34>
				prev->next = t->next;
    c372:	6803      	ldr	r3, [r0, #0]
    c374:	6013      	str	r3, [r2, #0]
			if (t->next) {
    c376:	6803      	ldr	r3, [r0, #0]
    c378:	2b00      	cmp	r3, #0
    c37a:	d004      	beq.n	c386 <SYS_TimerStop+0x32>
				t->next->timeout += timer->timeout;
    c37c:	6842      	ldr	r2, [r0, #4]
    c37e:	6859      	ldr	r1, [r3, #4]
    c380:	468c      	mov	ip, r1
    c382:	4462      	add	r2, ip
    c384:	605a      	str	r2, [r3, #4]
}
    c386:	4770      	bx	lr
				timers = t->next;
    c388:	4b01      	ldr	r3, [pc, #4]	; (c390 <SYS_TimerStop+0x3c>)
    c38a:	6802      	ldr	r2, [r0, #0]
    c38c:	601a      	str	r2, [r3, #0]
    c38e:	e7f2      	b.n	c376 <SYS_TimerStop+0x22>
    c390:	20001ab0 	.word	0x20001ab0

0000c394 <SYS_TimerStarted>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    c394:	4b09      	ldr	r3, [pc, #36]	; (c3bc <SYS_TimerStarted+0x28>)
    c396:	681b      	ldr	r3, [r3, #0]
    c398:	2b00      	cmp	r3, #0
    c39a:	d00a      	beq.n	c3b2 <SYS_TimerStarted+0x1e>
		if (t == timer) {
    c39c:	4283      	cmp	r3, r0
    c39e:	d00a      	beq.n	c3b6 <SYS_TimerStarted+0x22>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    c3a0:	681b      	ldr	r3, [r3, #0]
    c3a2:	2b00      	cmp	r3, #0
    c3a4:	d003      	beq.n	c3ae <SYS_TimerStarted+0x1a>
		if (t == timer) {
    c3a6:	4298      	cmp	r0, r3
    c3a8:	d1fa      	bne.n	c3a0 <SYS_TimerStarted+0xc>
			return true;
    c3aa:	2001      	movs	r0, #1
    c3ac:	e000      	b.n	c3b0 <SYS_TimerStarted+0x1c>
	return false;
    c3ae:	2000      	movs	r0, #0
}
    c3b0:	4770      	bx	lr
	return false;
    c3b2:	2000      	movs	r0, #0
    c3b4:	e7fc      	b.n	c3b0 <SYS_TimerStarted+0x1c>
			return true;
    c3b6:	2001      	movs	r0, #1
    c3b8:	e7fa      	b.n	c3b0 <SYS_TimerStarted+0x1c>
    c3ba:	46c0      	nop			; (mov r8, r8)
    c3bc:	20001ab0 	.word	0x20001ab0

0000c3c0 <SYS_TimerStart>:
{
    c3c0:	b510      	push	{r4, lr}
    c3c2:	0004      	movs	r4, r0
	if (!SYS_TimerStarted(timer)) {
    c3c4:	4b04      	ldr	r3, [pc, #16]	; (c3d8 <SYS_TimerStart+0x18>)
    c3c6:	4798      	blx	r3
    c3c8:	2800      	cmp	r0, #0
    c3ca:	d000      	beq.n	c3ce <SYS_TimerStart+0xe>
}
    c3cc:	bd10      	pop	{r4, pc}
		placeTimer(timer);
    c3ce:	0020      	movs	r0, r4
    c3d0:	4b02      	ldr	r3, [pc, #8]	; (c3dc <SYS_TimerStart+0x1c>)
    c3d2:	4798      	blx	r3
}
    c3d4:	e7fa      	b.n	c3cc <SYS_TimerStart+0xc>
    c3d6:	46c0      	nop			; (mov r8, r8)
    c3d8:	0000c395 	.word	0x0000c395
    c3dc:	0000c2d9 	.word	0x0000c2d9

0000c3e0 <MiWi_TickGet>:
{
    c3e0:	b570      	push	{r4, r5, r6, lr}
	uint8_t current_timerExtension1 = timerExtension1;
    c3e2:	4e11      	ldr	r6, [pc, #68]	; (c428 <MiWi_TickGet+0x48>)
    c3e4:	7835      	ldrb	r5, [r6, #0]
    c3e6:	b2ed      	uxtb	r5, r5
	tmr_disable_ovf_interrupt();
    c3e8:	4b10      	ldr	r3, [pc, #64]	; (c42c <MiWi_TickGet+0x4c>)
    c3ea:	4798      	blx	r3
	currentTime.word.w0 = common_tc_read_count();
    c3ec:	4b10      	ldr	r3, [pc, #64]	; (c430 <MiWi_TickGet+0x50>)
    c3ee:	4798      	blx	r3
    c3f0:	0004      	movs	r4, r0
	tmr_enable_ovf_interrupt();
    c3f2:	4b10      	ldr	r3, [pc, #64]	; (c434 <MiWi_TickGet+0x54>)
    c3f4:	4798      	blx	r3
  __ASM volatile ("nop");
    c3f6:	46c0      	nop			; (mov r8, r8)
	if (current_timerExtension1 != timerExtension1)
    c3f8:	7833      	ldrb	r3, [r6, #0]
    c3fa:	b2db      	uxtb	r3, r3
    c3fc:	429d      	cmp	r5, r3
    c3fe:	d004      	beq.n	c40a <MiWi_TickGet+0x2a>
		currentTime.word.w0 = common_tc_read_count();
    c400:	4b0b      	ldr	r3, [pc, #44]	; (c430 <MiWi_TickGet+0x50>)
    c402:	4798      	blx	r3
    c404:	0c24      	lsrs	r4, r4, #16
    c406:	0424      	lsls	r4, r4, #16
    c408:	4304      	orrs	r4, r0
    currentTime.byte.b2 = timerExtension1;
    c40a:	4b07      	ldr	r3, [pc, #28]	; (c428 <MiWi_TickGet+0x48>)
    c40c:	781b      	ldrb	r3, [r3, #0]
    c40e:	041b      	lsls	r3, r3, #16
    c410:	4809      	ldr	r0, [pc, #36]	; (c438 <MiWi_TickGet+0x58>)
    c412:	4004      	ands	r4, r0
    c414:	431c      	orrs	r4, r3
    currentTime.byte.b3 = timerExtension2;
    c416:	4b09      	ldr	r3, [pc, #36]	; (c43c <MiWi_TickGet+0x5c>)
    c418:	781b      	ldrb	r3, [r3, #0]
    c41a:	061b      	lsls	r3, r3, #24
    c41c:	0224      	lsls	r4, r4, #8
    c41e:	0a24      	lsrs	r4, r4, #8
    c420:	431c      	orrs	r4, r3
}
    c422:	0020      	movs	r0, r4
    c424:	bd70      	pop	{r4, r5, r6, pc}
    c426:	46c0      	nop			; (mov r8, r8)
    c428:	20002978 	.word	0x20002978
    c42c:	0000de69 	.word	0x0000de69
    c430:	0001382d 	.word	0x0001382d
    c434:	0000de7d 	.word	0x0000de7d
    c438:	ff00ffff 	.word	0xff00ffff
    c43c:	20002979 	.word	0x20002979

0000c440 <MiWi_TickGetDiff>:
	if (current_tick.Val > previous_tick.Val)
    c440:	4288      	cmp	r0, r1
    c442:	d802      	bhi.n	c44a <MiWi_TickGetDiff+0xa>
		ret_val = (0xFFFFFFFF - previous_tick.Val) + current_tick.Val;
    c444:	3801      	subs	r0, #1
    c446:	1a40      	subs	r0, r0, r1
}
    c448:	4770      	bx	lr
		ret_val = current_tick.Val - previous_tick.Val;
    c44a:	1a40      	subs	r0, r0, r1
    c44c:	e7fc      	b.n	c448 <MiWi_TickGetDiff+0x8>
    c44e:	Address 0x0000c44e is out of bounds.


0000c450 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    c450:	b570      	push	{r4, r5, r6, lr}
    c452:	b082      	sub	sp, #8
    c454:	0005      	movs	r5, r0
    c456:	000e      	movs	r6, r1
	uint16_t temp = 0;
    c458:	2200      	movs	r2, #0
    c45a:	466b      	mov	r3, sp
    c45c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    c45e:	4c06      	ldr	r4, [pc, #24]	; (c478 <usart_serial_getchar+0x28>)
    c460:	466b      	mov	r3, sp
    c462:	1d99      	adds	r1, r3, #6
    c464:	0028      	movs	r0, r5
    c466:	47a0      	blx	r4
    c468:	2800      	cmp	r0, #0
    c46a:	d1f9      	bne.n	c460 <usart_serial_getchar+0x10>

	*c = temp;
    c46c:	466b      	mov	r3, sp
    c46e:	3306      	adds	r3, #6
    c470:	881b      	ldrh	r3, [r3, #0]
    c472:	7033      	strb	r3, [r6, #0]
}
    c474:	b002      	add	sp, #8
    c476:	bd70      	pop	{r4, r5, r6, pc}
    c478:	0000604d 	.word	0x0000604d

0000c47c <usart_serial_putchar>:
{
    c47c:	b570      	push	{r4, r5, r6, lr}
    c47e:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    c480:	b28c      	uxth	r4, r1
    c482:	4e03      	ldr	r6, [pc, #12]	; (c490 <usart_serial_putchar+0x14>)
    c484:	0021      	movs	r1, r4
    c486:	0028      	movs	r0, r5
    c488:	47b0      	blx	r6
    c48a:	2800      	cmp	r0, #0
    c48c:	d1fa      	bne.n	c484 <usart_serial_putchar+0x8>
}
    c48e:	bd70      	pop	{r4, r5, r6, pc}
    c490:	00006021 	.word	0x00006021

0000c494 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35 || WLR089
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    c494:	b510      	push	{r4, lr}
    c496:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    c498:	466b      	mov	r3, sp
    c49a:	1ddc      	adds	r4, r3, #7
    c49c:	2201      	movs	r2, #1
    c49e:	0021      	movs	r1, r4
    c4a0:	480f      	ldr	r0, [pc, #60]	; (c4e0 <USART_HOST_ISR_VECT+0x4c>)
    c4a2:	4b10      	ldr	r3, [pc, #64]	; (c4e4 <USART_HOST_ISR_VECT+0x50>)
    c4a4:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    c4a6:	b672      	cpsid	i
  __ASM volatile ("dmb");
    c4a8:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    c4ac:	2200      	movs	r2, #0
    c4ae:	4b0e      	ldr	r3, [pc, #56]	; (c4e8 <USART_HOST_ISR_VECT+0x54>)
    c4b0:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    c4b2:	4b0e      	ldr	r3, [pc, #56]	; (c4ec <USART_HOST_ISR_VECT+0x58>)
    c4b4:	781b      	ldrb	r3, [r3, #0]
    c4b6:	7821      	ldrb	r1, [r4, #0]
    c4b8:	4a0d      	ldr	r2, [pc, #52]	; (c4f0 <USART_HOST_ISR_VECT+0x5c>)
    c4ba:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    c4bc:	2b7f      	cmp	r3, #127	; 0x7f
    c4be:	d00a      	beq.n	c4d6 <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    c4c0:	3301      	adds	r3, #1
    c4c2:	4a0a      	ldr	r2, [pc, #40]	; (c4ec <USART_HOST_ISR_VECT+0x58>)
    c4c4:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    c4c6:	2201      	movs	r2, #1
    c4c8:	4b07      	ldr	r3, [pc, #28]	; (c4e8 <USART_HOST_ISR_VECT+0x54>)
    c4ca:	701a      	strb	r2, [r3, #0]
    c4cc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    c4d0:	b662      	cpsie	i
}
    c4d2:	b002      	add	sp, #8
    c4d4:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
    c4d6:	2200      	movs	r2, #0
    c4d8:	4b04      	ldr	r3, [pc, #16]	; (c4ec <USART_HOST_ISR_VECT+0x58>)
    c4da:	701a      	strb	r2, [r3, #0]
    c4dc:	e7f3      	b.n	c4c6 <USART_HOST_ISR_VECT+0x32>
    c4de:	46c0      	nop			; (mov r8, r8)
    c4e0:	20001ab4 	.word	0x20001ab4
    c4e4:	0000617d 	.word	0x0000617d
    c4e8:	20000008 	.word	0x20000008
    c4ec:	20001b68 	.word	0x20001b68
    c4f0:	20001ae8 	.word	0x20001ae8

0000c4f4 <sio2host_init>:
{
    c4f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c4f6:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    c4f8:	2380      	movs	r3, #128	; 0x80
    c4fa:	05db      	lsls	r3, r3, #23
    c4fc:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    c4fe:	2300      	movs	r3, #0
    c500:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    c502:	22ff      	movs	r2, #255	; 0xff
    c504:	4669      	mov	r1, sp
    c506:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    c508:	2200      	movs	r2, #0
    c50a:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    c50c:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    c50e:	2401      	movs	r4, #1
    c510:	2124      	movs	r1, #36	; 0x24
    c512:	4668      	mov	r0, sp
    c514:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    c516:	3101      	adds	r1, #1
    c518:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    c51a:	3101      	adds	r1, #1
    c51c:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    c51e:	3101      	adds	r1, #1
    c520:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    c522:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    c524:	3105      	adds	r1, #5
    c526:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    c528:	3101      	adds	r1, #1
    c52a:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    c52c:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    c52e:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    c530:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    c532:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    c534:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    c536:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    c538:	2313      	movs	r3, #19
    c53a:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    c53c:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    c53e:	2380      	movs	r3, #128	; 0x80
    c540:	035b      	lsls	r3, r3, #13
    c542:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    c544:	4b2f      	ldr	r3, [pc, #188]	; (c604 <sio2host_init+0x110>)
    c546:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    c548:	4b2f      	ldr	r3, [pc, #188]	; (c608 <sio2host_init+0x114>)
    c54a:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    c54c:	2301      	movs	r3, #1
    c54e:	425b      	negs	r3, r3
    c550:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    c552:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    c554:	23e1      	movs	r3, #225	; 0xe1
    c556:	025b      	lsls	r3, r3, #9
    c558:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    c55a:	4d2c      	ldr	r5, [pc, #176]	; (c60c <sio2host_init+0x118>)
    c55c:	4b2c      	ldr	r3, [pc, #176]	; (c610 <sio2host_init+0x11c>)
    c55e:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    c560:	4a2c      	ldr	r2, [pc, #176]	; (c614 <sio2host_init+0x120>)
    c562:	4b2d      	ldr	r3, [pc, #180]	; (c618 <sio2host_init+0x124>)
    c564:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    c566:	4a2d      	ldr	r2, [pc, #180]	; (c61c <sio2host_init+0x128>)
    c568:	4b2d      	ldr	r3, [pc, #180]	; (c620 <sio2host_init+0x12c>)
    c56a:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    c56c:	466a      	mov	r2, sp
    c56e:	2184      	movs	r1, #132	; 0x84
    c570:	05c9      	lsls	r1, r1, #23
    c572:	0028      	movs	r0, r5
    c574:	4b2b      	ldr	r3, [pc, #172]	; (c624 <sio2host_init+0x130>)
    c576:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    c578:	4f2b      	ldr	r7, [pc, #172]	; (c628 <sio2host_init+0x134>)
    c57a:	683b      	ldr	r3, [r7, #0]
    c57c:	6898      	ldr	r0, [r3, #8]
    c57e:	2100      	movs	r1, #0
    c580:	4e2a      	ldr	r6, [pc, #168]	; (c62c <sio2host_init+0x138>)
    c582:	47b0      	blx	r6
	setbuf(stdin, NULL);
    c584:	683b      	ldr	r3, [r7, #0]
    c586:	6858      	ldr	r0, [r3, #4]
    c588:	2100      	movs	r1, #0
    c58a:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    c58c:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    c58e:	0030      	movs	r0, r6
    c590:	4b27      	ldr	r3, [pc, #156]	; (c630 <sio2host_init+0x13c>)
    c592:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    c594:	231f      	movs	r3, #31
    c596:	4018      	ands	r0, r3
    c598:	4084      	lsls	r4, r0
    c59a:	4b26      	ldr	r3, [pc, #152]	; (c634 <sio2host_init+0x140>)
    c59c:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    c59e:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    c5a0:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    c5a2:	2b00      	cmp	r3, #0
    c5a4:	d1fc      	bne.n	c5a0 <sio2host_init+0xac>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    c5a6:	6833      	ldr	r3, [r6, #0]
    c5a8:	2202      	movs	r2, #2
    c5aa:	4313      	orrs	r3, r2
    c5ac:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    c5ae:	4b17      	ldr	r3, [pc, #92]	; (c60c <sio2host_init+0x118>)
    c5b0:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    c5b2:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    c5b4:	2a00      	cmp	r2, #0
    c5b6:	d1fc      	bne.n	c5b2 <sio2host_init+0xbe>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    c5b8:	6859      	ldr	r1, [r3, #4]
    c5ba:	2280      	movs	r2, #128	; 0x80
    c5bc:	0252      	lsls	r2, r2, #9
    c5be:	430a      	orrs	r2, r1
    c5c0:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    c5c2:	2101      	movs	r1, #1
    c5c4:	4a11      	ldr	r2, [pc, #68]	; (c60c <sio2host_init+0x118>)
    c5c6:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    c5c8:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    c5ca:	2a00      	cmp	r2, #0
    c5cc:	d1fc      	bne.n	c5c8 <sio2host_init+0xd4>
	return (usart_hw->SYNCBUSY.reg);
    c5ce:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    c5d0:	2a00      	cmp	r2, #0
    c5d2:	d1fc      	bne.n	c5ce <sio2host_init+0xda>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    c5d4:	6859      	ldr	r1, [r3, #4]
    c5d6:	2280      	movs	r2, #128	; 0x80
    c5d8:	0292      	lsls	r2, r2, #10
    c5da:	430a      	orrs	r2, r1
    c5dc:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    c5de:	2101      	movs	r1, #1
    c5e0:	4a0a      	ldr	r2, [pc, #40]	; (c60c <sio2host_init+0x118>)
    c5e2:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    c5e4:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    c5e6:	2a00      	cmp	r2, #0
    c5e8:	d1fc      	bne.n	c5e4 <sio2host_init+0xf0>
	USART_HOST_RX_ISR_ENABLE();
    c5ea:	4913      	ldr	r1, [pc, #76]	; (c638 <sio2host_init+0x144>)
    c5ec:	2000      	movs	r0, #0
    c5ee:	4b13      	ldr	r3, [pc, #76]	; (c63c <sio2host_init+0x148>)
    c5f0:	4798      	blx	r3
    c5f2:	2204      	movs	r2, #4
    c5f4:	2384      	movs	r3, #132	; 0x84
    c5f6:	05db      	lsls	r3, r3, #23
    c5f8:	759a      	strb	r2, [r3, #22]
    c5fa:	32fc      	adds	r2, #252	; 0xfc
    c5fc:	4b0d      	ldr	r3, [pc, #52]	; (c634 <sio2host_init+0x140>)
    c5fe:	601a      	str	r2, [r3, #0]
}
    c600:	b011      	add	sp, #68	; 0x44
    c602:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c604:	00040003 	.word	0x00040003
    c608:	00050003 	.word	0x00050003
    c60c:	20001ab4 	.word	0x20001ab4
    c610:	20001f64 	.word	0x20001f64
    c614:	0000c47d 	.word	0x0000c47d
    c618:	20001f60 	.word	0x20001f60
    c61c:	0000c451 	.word	0x0000c451
    c620:	20001f5c 	.word	0x20001f5c
    c624:	00005cb5 	.word	0x00005cb5
    c628:	20000020 	.word	0x20000020
    c62c:	00017405 	.word	0x00017405
    c630:	000057e5 	.word	0x000057e5
    c634:	e000e100 	.word	0xe000e100
    c638:	0000c495 	.word	0x0000c495
    c63c:	000057a9 	.word	0x000057a9

0000c640 <sio2host_tx>:
{
    c640:	b5f0      	push	{r4, r5, r6, r7, lr}
    c642:	b083      	sub	sp, #12
    c644:	0006      	movs	r6, r0
    c646:	9101      	str	r1, [sp, #4]
	return usart_write_buffer_wait(module, tx_data, length);
    c648:	466b      	mov	r3, sp
    c64a:	889d      	ldrh	r5, [r3, #4]
    c64c:	4c05      	ldr	r4, [pc, #20]	; (c664 <sio2host_tx+0x24>)
    c64e:	4f06      	ldr	r7, [pc, #24]	; (c668 <sio2host_tx+0x28>)
    c650:	002a      	movs	r2, r5
    c652:	0031      	movs	r1, r6
    c654:	0020      	movs	r0, r4
    c656:	47b8      	blx	r7
	} while (status != STATUS_OK);
    c658:	2800      	cmp	r0, #0
    c65a:	d1f9      	bne.n	c650 <sio2host_tx+0x10>
}
    c65c:	9801      	ldr	r0, [sp, #4]
    c65e:	b003      	add	sp, #12
    c660:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c662:	46c0      	nop			; (mov r8, r8)
    c664:	20001ab4 	.word	0x20001ab4
    c668:	000060bd 	.word	0x000060bd

0000c66c <sio2host_putchar>:
{
    c66c:	b500      	push	{lr}
    c66e:	b083      	sub	sp, #12
    c670:	466b      	mov	r3, sp
    c672:	71d8      	strb	r0, [r3, #7]
    c674:	3307      	adds	r3, #7
	sio2host_tx(&ch, 1);
    c676:	2101      	movs	r1, #1
    c678:	0018      	movs	r0, r3
    c67a:	4b02      	ldr	r3, [pc, #8]	; (c684 <sio2host_putchar+0x18>)
    c67c:	4798      	blx	r3
}
    c67e:	b003      	add	sp, #12
    c680:	bd00      	pop	{pc}
    c682:	46c0      	nop			; (mov r8, r8)
    c684:	0000c641 	.word	0x0000c641

0000c688 <HAL_SPISend>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    c688:	4b13      	ldr	r3, [pc, #76]	; (c6d8 <HAL_SPISend+0x50>)
    c68a:	681b      	ldr	r3, [r3, #0]
static uint8_t HAL_SPISend(uint8_t data)
{
	uint16_t read_val = 0;
	
	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master));
    c68c:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    c68e:	7e1a      	ldrb	r2, [r3, #24]
    c690:	420a      	tst	r2, r1
    c692:	d0fc      	beq.n	c68e <HAL_SPISend+0x6>
    c694:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    c696:	07d2      	lsls	r2, r2, #31
    c698:	d500      	bpl.n	c69c <HAL_SPISend+0x14>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    c69a:	6298      	str	r0, [r3, #40]	; 0x28
	spi_write(&master, data);
	while (!spi_is_write_complete(&master));
    c69c:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    c69e:	7e1a      	ldrb	r2, [r3, #24]
    c6a0:	420a      	tst	r2, r1
    c6a2:	d0fc      	beq.n	c69e <HAL_SPISend+0x16>
	
	while (!spi_is_ready_to_read(&master));
    c6a4:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    c6a6:	7e1a      	ldrb	r2, [r3, #24]
    c6a8:	420a      	tst	r2, r1
    c6aa:	d0fc      	beq.n	c6a6 <HAL_SPISend+0x1e>
    c6ac:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t read_val = 0;
    c6ae:	2000      	movs	r0, #0
	if (!spi_is_ready_to_read(module)) {
    c6b0:	0752      	lsls	r2, r2, #29
    c6b2:	d50a      	bpl.n	c6ca <HAL_SPISend+0x42>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    c6b4:	8b5a      	ldrh	r2, [r3, #26]
    c6b6:	0752      	lsls	r2, r2, #29
    c6b8:	d501      	bpl.n	c6be <HAL_SPISend+0x36>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    c6ba:	2204      	movs	r2, #4
    c6bc:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    c6be:	4a06      	ldr	r2, [pc, #24]	; (c6d8 <HAL_SPISend+0x50>)
    c6c0:	7992      	ldrb	r2, [r2, #6]
    c6c2:	2a01      	cmp	r2, #1
    c6c4:	d003      	beq.n	c6ce <HAL_SPISend+0x46>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    c6c6:	6a98      	ldr	r0, [r3, #40]	; 0x28
    c6c8:	b2c0      	uxtb	r0, r0
	spi_read(&master, &read_val);
	
	return ((uint8_t)read_val);
    c6ca:	b2c0      	uxtb	r0, r0
}
    c6cc:	4770      	bx	lr
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    c6ce:	6a98      	ldr	r0, [r3, #40]	; 0x28
    c6d0:	05c0      	lsls	r0, r0, #23
    c6d2:	0dc0      	lsrs	r0, r0, #23
    c6d4:	e7f9      	b.n	c6ca <HAL_SPISend+0x42>
    c6d6:	46c0      	nop			; (mov r8, r8)
    c6d8:	20001b78 	.word	0x20001b78

0000c6dc <HAL_ResetPinMakeOutput>:
{
    c6dc:	b500      	push	{lr}
    c6de:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    c6e0:	a901      	add	r1, sp, #4
    c6e2:	2301      	movs	r3, #1
    c6e4:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    c6e6:	2200      	movs	r2, #0
    c6e8:	708a      	strb	r2, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    c6ea:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    c6ec:	202f      	movs	r0, #47	; 0x2f
    c6ee:	4b02      	ldr	r3, [pc, #8]	; (c6f8 <HAL_ResetPinMakeOutput+0x1c>)
    c6f0:	4798      	blx	r3
}
    c6f2:	b003      	add	sp, #12
    c6f4:	bd00      	pop	{pc}
    c6f6:	46c0      	nop			; (mov r8, r8)
    c6f8:	00004ca1 	.word	0x00004ca1

0000c6fc <HAL_RadioDIO2Callback>:
{
    c6fc:	b510      	push	{r4, lr}
  if (interruptHandlerDio2)
    c6fe:	4b05      	ldr	r3, [pc, #20]	; (c714 <HAL_RadioDIO2Callback+0x18>)
    c700:	681b      	ldr	r3, [r3, #0]
    c702:	2b00      	cmp	r3, #0
    c704:	d004      	beq.n	c710 <HAL_RadioDIO2Callback+0x14>
	PMM_Wakeup();
    c706:	4b04      	ldr	r3, [pc, #16]	; (c718 <HAL_RadioDIO2Callback+0x1c>)
    c708:	4798      	blx	r3
    interruptHandlerDio2();
    c70a:	4b02      	ldr	r3, [pc, #8]	; (c714 <HAL_RadioDIO2Callback+0x18>)
    c70c:	681b      	ldr	r3, [r3, #0]
    c70e:	4798      	blx	r3
}
    c710:	bd10      	pop	{r4, pc}
    c712:	46c0      	nop			; (mov r8, r8)
    c714:	20001b74 	.word	0x20001b74
    c718:	0000cb5d 	.word	0x0000cb5d

0000c71c <HAL_RadioDIO1Callback>:
{
    c71c:	b510      	push	{r4, lr}
  if (interruptHandlerDio1)
    c71e:	4b05      	ldr	r3, [pc, #20]	; (c734 <HAL_RadioDIO1Callback+0x18>)
    c720:	681b      	ldr	r3, [r3, #0]
    c722:	2b00      	cmp	r3, #0
    c724:	d004      	beq.n	c730 <HAL_RadioDIO1Callback+0x14>
	PMM_Wakeup();
    c726:	4b04      	ldr	r3, [pc, #16]	; (c738 <HAL_RadioDIO1Callback+0x1c>)
    c728:	4798      	blx	r3
    interruptHandlerDio1();
    c72a:	4b02      	ldr	r3, [pc, #8]	; (c734 <HAL_RadioDIO1Callback+0x18>)
    c72c:	681b      	ldr	r3, [r3, #0]
    c72e:	4798      	blx	r3
}
    c730:	bd10      	pop	{r4, pc}
    c732:	46c0      	nop			; (mov r8, r8)
    c734:	20001b70 	.word	0x20001b70
    c738:	0000cb5d 	.word	0x0000cb5d

0000c73c <HAL_RadioDIO0Callback>:
{
    c73c:	b510      	push	{r4, lr}
  if (interruptHandlerDio0)
    c73e:	4b05      	ldr	r3, [pc, #20]	; (c754 <HAL_RadioDIO0Callback+0x18>)
    c740:	681b      	ldr	r3, [r3, #0]
    c742:	2b00      	cmp	r3, #0
    c744:	d004      	beq.n	c750 <HAL_RadioDIO0Callback+0x14>
	PMM_Wakeup();
    c746:	4b04      	ldr	r3, [pc, #16]	; (c758 <HAL_RadioDIO0Callback+0x1c>)
    c748:	4798      	blx	r3
    interruptHandlerDio0();
    c74a:	4b02      	ldr	r3, [pc, #8]	; (c754 <HAL_RadioDIO0Callback+0x18>)
    c74c:	681b      	ldr	r3, [r3, #0]
    c74e:	4798      	blx	r3
}
    c750:	bd10      	pop	{r4, pc}
    c752:	46c0      	nop			; (mov r8, r8)
    c754:	20001b6c 	.word	0x20001b6c
    c758:	0000cb5d 	.word	0x0000cb5d

0000c75c <HAL_SPICSAssert>:
{
    c75c:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, true);
    c75e:	2201      	movs	r2, #1
    c760:	4902      	ldr	r1, [pc, #8]	; (c76c <HAL_SPICSAssert+0x10>)
    c762:	4803      	ldr	r0, [pc, #12]	; (c770 <HAL_SPICSAssert+0x14>)
    c764:	4b03      	ldr	r3, [pc, #12]	; (c774 <HAL_SPICSAssert+0x18>)
    c766:	4798      	blx	r3
}
    c768:	bd10      	pop	{r4, pc}
    c76a:	46c0      	nop			; (mov r8, r8)
    c76c:	2000297c 	.word	0x2000297c
    c770:	20001b78 	.word	0x20001b78
    c774:	00005bc1 	.word	0x00005bc1

0000c778 <HAL_SPICSDeassert>:
{
    c778:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, false);
    c77a:	2200      	movs	r2, #0
    c77c:	4902      	ldr	r1, [pc, #8]	; (c788 <HAL_SPICSDeassert+0x10>)
    c77e:	4803      	ldr	r0, [pc, #12]	; (c78c <HAL_SPICSDeassert+0x14>)
    c780:	4b03      	ldr	r3, [pc, #12]	; (c790 <HAL_SPICSDeassert+0x18>)
    c782:	4798      	blx	r3
}
    c784:	bd10      	pop	{r4, pc}
    c786:	46c0      	nop			; (mov r8, r8)
    c788:	2000297c 	.word	0x2000297c
    c78c:	20001b78 	.word	0x20001b78
    c790:	00005bc1 	.word	0x00005bc1

0000c794 <HAL_RadioInit>:
{
    c794:	b5f0      	push	{r4, r5, r6, r7, lr}
    c796:	46d6      	mov	lr, sl
    c798:	464f      	mov	r7, r9
    c79a:	4646      	mov	r6, r8
    c79c:	b5c0      	push	{r6, r7, lr}
    c79e:	b090      	sub	sp, #64	; 0x40
	config->input_pull = PORT_PIN_PULL_UP;
    c7a0:	ac01      	add	r4, sp, #4
    c7a2:	2601      	movs	r6, #1
    c7a4:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    c7a6:	2500      	movs	r5, #0
    c7a8:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    c7aa:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(SX_RF_SPI_SCK, &pin_conf);
    c7ac:	0021      	movs	r1, r4
    c7ae:	2052      	movs	r0, #82	; 0x52
    c7b0:	4f52      	ldr	r7, [pc, #328]	; (c8fc <HAL_RadioInit+0x168>)
    c7b2:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_MOSI, &pin_conf);
    c7b4:	0021      	movs	r1, r4
    c7b6:	203e      	movs	r0, #62	; 0x3e
    c7b8:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_CS, &pin_conf);
    c7ba:	0021      	movs	r1, r4
    c7bc:	203f      	movs	r0, #63	; 0x3f
    c7be:	47b8      	blx	r7
	port_pin_set_config(SX_RF_RESET_PIN, &pin_conf);
    c7c0:	0021      	movs	r1, r4
    c7c2:	202f      	movs	r0, #47	; 0x2f
    c7c4:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    c7c6:	2280      	movs	r2, #128	; 0x80
    c7c8:	02d2      	lsls	r2, r2, #11
    c7ca:	4b4d      	ldr	r3, [pc, #308]	; (c900 <HAL_RadioInit+0x16c>)
    c7cc:	619a      	str	r2, [r3, #24]
    c7ce:	4b4d      	ldr	r3, [pc, #308]	; (c904 <HAL_RadioInit+0x170>)
    c7d0:	2280      	movs	r2, #128	; 0x80
    c7d2:	05d2      	lsls	r2, r2, #23
    c7d4:	619a      	str	r2, [r3, #24]
    c7d6:	2280      	movs	r2, #128	; 0x80
    c7d8:	0612      	lsls	r2, r2, #24
    c7da:	619a      	str	r2, [r3, #24]
    c7dc:	2280      	movs	r2, #128	; 0x80
    c7de:	0212      	lsls	r2, r2, #8
    c7e0:	619a      	str	r2, [r3, #24]
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    c7e2:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(SX_RF_SPI_MISO, &pin_conf);
    c7e4:	0021      	movs	r1, r4
    c7e6:	2053      	movs	r0, #83	; 0x53
    c7e8:	47b8      	blx	r7
	extint_chan_get_config_defaults(&config_extint_chan);
    c7ea:	ac02      	add	r4, sp, #8
    c7ec:	0020      	movs	r0, r4
    c7ee:	4b46      	ldr	r3, [pc, #280]	; (c908 <HAL_RadioInit+0x174>)
    c7f0:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO0_EIC_PIN;
    c7f2:	2330      	movs	r3, #48	; 0x30
    c7f4:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO0_EIC_MUX;
    c7f6:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    c7f8:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    c7fa:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO0_EIC_LINE, &config_extint_chan);
    c7fc:	0021      	movs	r1, r4
    c7fe:	2000      	movs	r0, #0
    c800:	4b42      	ldr	r3, [pc, #264]	; (c90c <HAL_RadioInit+0x178>)
    c802:	469a      	mov	sl, r3
    c804:	4798      	blx	r3
	extint_register_callback(HAL_RadioDIO0Callback,DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    c806:	2200      	movs	r2, #0
    c808:	2100      	movs	r1, #0
    c80a:	4841      	ldr	r0, [pc, #260]	; (c910 <HAL_RadioInit+0x17c>)
    c80c:	4b41      	ldr	r3, [pc, #260]	; (c914 <HAL_RadioInit+0x180>)
    c80e:	4699      	mov	r9, r3
    c810:	4798      	blx	r3
	extint_chan_enable_callback(DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    c812:	2100      	movs	r1, #0
    c814:	2000      	movs	r0, #0
    c816:	4b40      	ldr	r3, [pc, #256]	; (c918 <HAL_RadioInit+0x184>)
    c818:	4698      	mov	r8, r3
    c81a:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO1_EIC_PIN;
    c81c:	230b      	movs	r3, #11
    c81e:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO1_EIC_MUX;
    c820:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    c822:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    c824:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO1_EIC_LINE, &config_extint_chan);
    c826:	0021      	movs	r1, r4
    c828:	200b      	movs	r0, #11
    c82a:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO1Callback,DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    c82c:	2200      	movs	r2, #0
    c82e:	210b      	movs	r1, #11
    c830:	483a      	ldr	r0, [pc, #232]	; (c91c <HAL_RadioInit+0x188>)
    c832:	47c8      	blx	r9
	extint_chan_enable_callback(DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    c834:	2100      	movs	r1, #0
    c836:	200b      	movs	r0, #11
    c838:	47c0      	blx	r8
	config_extint_chan.gpio_pin           = DIO2_EIC_PIN;
    c83a:	230c      	movs	r3, #12
    c83c:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO2_EIC_MUX;
    c83e:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    c840:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    c842:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO2_EIC_LINE, &config_extint_chan);
    c844:	0021      	movs	r1, r4
    c846:	200c      	movs	r0, #12
    c848:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO2Callback,DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    c84a:	2200      	movs	r2, #0
    c84c:	210c      	movs	r1, #12
    c84e:	4834      	ldr	r0, [pc, #208]	; (c920 <HAL_RadioInit+0x18c>)
    c850:	47c8      	blx	r9
	extint_chan_enable_callback(DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    c852:	2100      	movs	r1, #0
    c854:	200c      	movs	r0, #12
    c856:	47c0      	blx	r8
	slave->ss_pin          = config->ss_pin;
    c858:	4b32      	ldr	r3, [pc, #200]	; (c924 <HAL_RadioInit+0x190>)
    c85a:	4698      	mov	r8, r3
    c85c:	233f      	movs	r3, #63	; 0x3f
    c85e:	4642      	mov	r2, r8
    c860:	7013      	strb	r3, [r2, #0]
	slave->address_enabled = config->address_enabled;
    c862:	7055      	strb	r5, [r2, #1]
	slave->address         = config->address;
    c864:	7095      	strb	r5, [r2, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    c866:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    c868:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    c86a:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    c86c:	0021      	movs	r1, r4
    c86e:	203f      	movs	r0, #63	; 0x3f
    c870:	47b8      	blx	r7
	port_pin_set_output_level(slave->ss_pin, true);
    c872:	4643      	mov	r3, r8
    c874:	781a      	ldrb	r2, [r3, #0]
	if (port_index < PORT_INST_NUM) {
    c876:	09d1      	lsrs	r1, r2, #7
		return NULL;
    c878:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    c87a:	2900      	cmp	r1, #0
    c87c:	d104      	bne.n	c888 <HAL_RadioInit+0xf4>
		return &(ports[port_index]->Group[group_index]);
    c87e:	0953      	lsrs	r3, r2, #5
    c880:	01db      	lsls	r3, r3, #7
    c882:	4929      	ldr	r1, [pc, #164]	; (c928 <HAL_RadioInit+0x194>)
    c884:	468c      	mov	ip, r1
    c886:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    c888:	211f      	movs	r1, #31
    c88a:	4011      	ands	r1, r2
    c88c:	2201      	movs	r2, #1
    c88e:	0010      	movs	r0, r2
    c890:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    c892:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    c894:	ac02      	add	r4, sp, #8
    c896:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    c898:	2300      	movs	r3, #0
    c89a:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    c89c:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    c89e:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    c8a0:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    c8a2:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    c8a4:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    c8a6:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    c8a8:	3223      	adds	r2, #35	; 0x23
    c8aa:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    c8ac:	3a18      	subs	r2, #24
    c8ae:	2100      	movs	r1, #0
    c8b0:	a808      	add	r0, sp, #32
    c8b2:	4b1e      	ldr	r3, [pc, #120]	; (c92c <HAL_RadioInit+0x198>)
    c8b4:	4798      	blx	r3
	config_spi_master.mode_specific.master.baudrate = SX_RF_SPI_BAUDRATE;
    c8b6:	4b1e      	ldr	r3, [pc, #120]	; (c930 <HAL_RadioInit+0x19c>)
    c8b8:	61a3      	str	r3, [r4, #24]
	config_spi_master.mux_setting = SX_RF_SPI_SERCOM_MUX_SETTING;
    c8ba:	2380      	movs	r3, #128	; 0x80
    c8bc:	025b      	lsls	r3, r3, #9
    c8be:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = SX_RF_SPI_SERCOM_PINMUX_PAD0;
    c8c0:	4b1c      	ldr	r3, [pc, #112]	; (c934 <HAL_RadioInit+0x1a0>)
    c8c2:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    c8c4:	2301      	movs	r3, #1
    c8c6:	425b      	negs	r3, r3
    c8c8:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = SX_RF_SPI_SERCOM_PINMUX_PAD2;
    c8ca:	4b1b      	ldr	r3, [pc, #108]	; (c938 <HAL_RadioInit+0x1a4>)
    c8cc:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = SX_RF_SPI_SERCOM_PINMUX_PAD3;
    c8ce:	4b1b      	ldr	r3, [pc, #108]	; (c93c <HAL_RadioInit+0x1a8>)
    c8d0:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, SX_RF_SPI, &config_spi_master);	
    c8d2:	4d1b      	ldr	r5, [pc, #108]	; (c940 <HAL_RadioInit+0x1ac>)
    c8d4:	0022      	movs	r2, r4
    c8d6:	491b      	ldr	r1, [pc, #108]	; (c944 <HAL_RadioInit+0x1b0>)
    c8d8:	0028      	movs	r0, r5
    c8da:	4b1b      	ldr	r3, [pc, #108]	; (c948 <HAL_RadioInit+0x1b4>)
    c8dc:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    c8de:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    c8e0:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    c8e2:	2b00      	cmp	r3, #0
    c8e4:	d1fc      	bne.n	c8e0 <HAL_RadioInit+0x14c>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    c8e6:	6813      	ldr	r3, [r2, #0]
    c8e8:	2102      	movs	r1, #2
    c8ea:	430b      	orrs	r3, r1
    c8ec:	6013      	str	r3, [r2, #0]
}
    c8ee:	b010      	add	sp, #64	; 0x40
    c8f0:	bc1c      	pop	{r2, r3, r4}
    c8f2:	4690      	mov	r8, r2
    c8f4:	4699      	mov	r9, r3
    c8f6:	46a2      	mov	sl, r4
    c8f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c8fa:	46c0      	nop			; (mov r8, r8)
    c8fc:	00004ca1 	.word	0x00004ca1
    c900:	40002900 	.word	0x40002900
    c904:	40002880 	.word	0x40002880
    c908:	00004965 	.word	0x00004965
    c90c:	00004979 	.word	0x00004979
    c910:	0000c73d 	.word	0x0000c73d
    c914:	00004825 	.word	0x00004825
    c918:	00004851 	.word	0x00004851
    c91c:	0000c71d 	.word	0x0000c71d
    c920:	0000c6fd 	.word	0x0000c6fd
    c924:	2000297c 	.word	0x2000297c
    c928:	40002800 	.word	0x40002800
    c92c:	00016c59 	.word	0x00016c59
    c930:	001e8480 	.word	0x001e8480
    c934:	00530005 	.word	0x00530005
    c938:	003e0005 	.word	0x003e0005
    c93c:	00520005 	.word	0x00520005
    c940:	20001b78 	.word	0x20001b78
    c944:	42001000 	.word	0x42001000
    c948:	00005875 	.word	0x00005875

0000c94c <RADIO_Reset>:
{
    c94c:	b570      	push	{r4, r5, r6, lr}
    c94e:	b082      	sub	sp, #8
	HAL_ResetPinMakeOutput();
    c950:	4c0a      	ldr	r4, [pc, #40]	; (c97c <RADIO_Reset+0x30>)
    c952:	47a0      	blx	r4
		port_base->OUTCLR.reg = pin_mask;
    c954:	4d0a      	ldr	r5, [pc, #40]	; (c980 <RADIO_Reset+0x34>)
    c956:	2680      	movs	r6, #128	; 0x80
    c958:	0236      	lsls	r6, r6, #8
    c95a:	616e      	str	r6, [r5, #20]
	SystemBlockingWaitMs(1);
    c95c:	2001      	movs	r0, #1
    c95e:	4b09      	ldr	r3, [pc, #36]	; (c984 <RADIO_Reset+0x38>)
    c960:	4798      	blx	r3
	config->direction  = PORT_PIN_DIR_INPUT;
    c962:	a901      	add	r1, sp, #4
    c964:	2300      	movs	r3, #0
    c966:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    c968:	2201      	movs	r2, #1
    c96a:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    c96c:	708b      	strb	r3, [r1, #2]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    c96e:	202f      	movs	r0, #47	; 0x2f
    c970:	4b05      	ldr	r3, [pc, #20]	; (c988 <RADIO_Reset+0x3c>)
    c972:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    c974:	61ae      	str	r6, [r5, #24]
	HAL_ResetPinMakeOutput();
    c976:	47a0      	blx	r4
}
    c978:	b002      	add	sp, #8
    c97a:	bd70      	pop	{r4, r5, r6, pc}
    c97c:	0000c6dd 	.word	0x0000c6dd
    c980:	40002880 	.word	0x40002880
    c984:	0000cb29 	.word	0x0000cb29
    c988:	00004ca1 	.word	0x00004ca1

0000c98c <RADIO_RegisterWrite>:
{
    c98c:	b570      	push	{r4, r5, r6, lr}
    c98e:	0004      	movs	r4, r0
    c990:	000d      	movs	r5, r1
	HAL_SPICSAssert();
    c992:	4b05      	ldr	r3, [pc, #20]	; (c9a8 <RADIO_RegisterWrite+0x1c>)
    c994:	4798      	blx	r3
	HAL_SPISend(REG_WRITE_CMD | reg);
    c996:	2080      	movs	r0, #128	; 0x80
    c998:	4320      	orrs	r0, r4
    c99a:	4c04      	ldr	r4, [pc, #16]	; (c9ac <RADIO_RegisterWrite+0x20>)
    c99c:	47a0      	blx	r4
	HAL_SPISend(value);
    c99e:	0028      	movs	r0, r5
    c9a0:	47a0      	blx	r4
	HAL_SPICSDeassert();
    c9a2:	4b03      	ldr	r3, [pc, #12]	; (c9b0 <RADIO_RegisterWrite+0x24>)
    c9a4:	4798      	blx	r3
}
    c9a6:	bd70      	pop	{r4, r5, r6, pc}
    c9a8:	0000c75d 	.word	0x0000c75d
    c9ac:	0000c689 	.word	0x0000c689
    c9b0:	0000c779 	.word	0x0000c779

0000c9b4 <RADIO_RegisterRead>:
{
    c9b4:	b510      	push	{r4, lr}
    c9b6:	0004      	movs	r4, r0
	HAL_SPICSAssert();
    c9b8:	4b06      	ldr	r3, [pc, #24]	; (c9d4 <RADIO_RegisterRead+0x20>)
    c9ba:	4798      	blx	r3
	HAL_SPISend(reg);
    c9bc:	207f      	movs	r0, #127	; 0x7f
    c9be:	4020      	ands	r0, r4
    c9c0:	4c05      	ldr	r4, [pc, #20]	; (c9d8 <RADIO_RegisterRead+0x24>)
    c9c2:	47a0      	blx	r4
	readValue = HAL_SPISend(0xFF);
    c9c4:	20ff      	movs	r0, #255	; 0xff
    c9c6:	47a0      	blx	r4
    c9c8:	0004      	movs	r4, r0
	HAL_SPICSDeassert();
    c9ca:	4b04      	ldr	r3, [pc, #16]	; (c9dc <RADIO_RegisterRead+0x28>)
    c9cc:	4798      	blx	r3
}
    c9ce:	0020      	movs	r0, r4
    c9d0:	bd10      	pop	{r4, pc}
    c9d2:	46c0      	nop			; (mov r8, r8)
    c9d4:	0000c75d 	.word	0x0000c75d
    c9d8:	0000c689 	.word	0x0000c689
    c9dc:	0000c779 	.word	0x0000c779

0000c9e0 <RADIO_FrameWrite>:
{
    c9e0:	b570      	push	{r4, r5, r6, lr}
    c9e2:	0004      	movs	r4, r0
    c9e4:	000e      	movs	r6, r1
    c9e6:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    c9e8:	4b0a      	ldr	r3, [pc, #40]	; (ca14 <RADIO_FrameWrite+0x34>)
    c9ea:	4798      	blx	r3
    HAL_SPISend(REG_WRITE_CMD | offset);
    c9ec:	2080      	movs	r0, #128	; 0x80
    c9ee:	4320      	orrs	r0, r4
    c9f0:	4b09      	ldr	r3, [pc, #36]	; (ca18 <RADIO_FrameWrite+0x38>)
    c9f2:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    c9f4:	2d00      	cmp	r5, #0
    c9f6:	d00a      	beq.n	ca0e <RADIO_FrameWrite+0x2e>
    c9f8:	0034      	movs	r4, r6
    c9fa:	3d01      	subs	r5, #1
    c9fc:	b2ed      	uxtb	r5, r5
    c9fe:	3501      	adds	r5, #1
    ca00:	1975      	adds	r5, r6, r5
	    HAL_SPISend(buffer[i]);
    ca02:	4e05      	ldr	r6, [pc, #20]	; (ca18 <RADIO_FrameWrite+0x38>)
    ca04:	7820      	ldrb	r0, [r4, #0]
    ca06:	47b0      	blx	r6
    ca08:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    ca0a:	42ac      	cmp	r4, r5
    ca0c:	d1fa      	bne.n	ca04 <RADIO_FrameWrite+0x24>
    HAL_SPICSDeassert();
    ca0e:	4b03      	ldr	r3, [pc, #12]	; (ca1c <RADIO_FrameWrite+0x3c>)
    ca10:	4798      	blx	r3
}
    ca12:	bd70      	pop	{r4, r5, r6, pc}
    ca14:	0000c75d 	.word	0x0000c75d
    ca18:	0000c689 	.word	0x0000c689
    ca1c:	0000c779 	.word	0x0000c779

0000ca20 <RADIO_FrameRead>:
{
    ca20:	b570      	push	{r4, r5, r6, lr}
    ca22:	0004      	movs	r4, r0
    ca24:	000e      	movs	r6, r1
    ca26:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    ca28:	4b0a      	ldr	r3, [pc, #40]	; (ca54 <RADIO_FrameRead+0x34>)
    ca2a:	4798      	blx	r3
    HAL_SPISend(offset);
    ca2c:	0020      	movs	r0, r4
    ca2e:	4b0a      	ldr	r3, [pc, #40]	; (ca58 <RADIO_FrameRead+0x38>)
    ca30:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    ca32:	2d00      	cmp	r5, #0
    ca34:	d00b      	beq.n	ca4e <RADIO_FrameRead+0x2e>
    ca36:	0034      	movs	r4, r6
    ca38:	3d01      	subs	r5, #1
    ca3a:	b2ed      	uxtb	r5, r5
    ca3c:	3501      	adds	r5, #1
    ca3e:	1975      	adds	r5, r6, r5
	    buffer[i] = HAL_SPISend(0xFF);
    ca40:	4e05      	ldr	r6, [pc, #20]	; (ca58 <RADIO_FrameRead+0x38>)
    ca42:	20ff      	movs	r0, #255	; 0xff
    ca44:	47b0      	blx	r6
    ca46:	7020      	strb	r0, [r4, #0]
    ca48:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    ca4a:	42ac      	cmp	r4, r5
    ca4c:	d1f9      	bne.n	ca42 <RADIO_FrameRead+0x22>
    HAL_SPICSDeassert();
    ca4e:	4b03      	ldr	r3, [pc, #12]	; (ca5c <RADIO_FrameRead+0x3c>)
    ca50:	4798      	blx	r3
}
    ca52:	bd70      	pop	{r4, r5, r6, pc}
    ca54:	0000c75d 	.word	0x0000c75d
    ca58:	0000c689 	.word	0x0000c689
    ca5c:	0000c779 	.word	0x0000c779

0000ca60 <HAL_RegisterDioInterruptHandler>:
 * \param[in] dioPin  - DIO pin
 * \param[in] handler - function to be called upon given DIO interrupt
 */
void HAL_RegisterDioInterruptHandler(uint8_t dioPin, DioInterruptHandler_t handler)
{
  switch (dioPin)
    ca60:	2802      	cmp	r0, #2
    ca62:	d007      	beq.n	ca74 <HAL_RegisterDioInterruptHandler+0x14>
    ca64:	2804      	cmp	r0, #4
    ca66:	d008      	beq.n	ca7a <HAL_RegisterDioInterruptHandler+0x1a>
    ca68:	2801      	cmp	r0, #1
    ca6a:	d000      	beq.n	ca6e <HAL_RegisterDioInterruptHandler+0xe>
#endif

    default:
      break;
  }
}
    ca6c:	4770      	bx	lr
      interruptHandlerDio0 = handler;
    ca6e:	4b04      	ldr	r3, [pc, #16]	; (ca80 <HAL_RegisterDioInterruptHandler+0x20>)
    ca70:	6019      	str	r1, [r3, #0]
      break;
    ca72:	e7fb      	b.n	ca6c <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio1 = handler;
    ca74:	4b03      	ldr	r3, [pc, #12]	; (ca84 <HAL_RegisterDioInterruptHandler+0x24>)
    ca76:	6019      	str	r1, [r3, #0]
      break;
    ca78:	e7f8      	b.n	ca6c <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio2 = handler;
    ca7a:	4b03      	ldr	r3, [pc, #12]	; (ca88 <HAL_RegisterDioInterruptHandler+0x28>)
    ca7c:	6019      	str	r1, [r3, #0]
}
    ca7e:	e7f5      	b.n	ca6c <HAL_RegisterDioInterruptHandler+0xc>
    ca80:	20001b6c 	.word	0x20001b6c
    ca84:	20001b70 	.word	0x20001b70
    ca88:	20001b74 	.word	0x20001b74

0000ca8c <HAL_EnableRFCtrl>:

void HAL_EnableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
   if ((RFCtrl1 == RFO_HF) || (RFCtrl2 == RX))
    ca8c:	2801      	cmp	r0, #1
    ca8e:	d00a      	beq.n	caa6 <HAL_EnableRFCtrl+0x1a>
    ca90:	2900      	cmp	r1, #0
    ca92:	d008      	beq.n	caa6 <HAL_EnableRFCtrl+0x1a>
   {
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_ACTIVE);		
   }
   else if ((RFCtrl1 == PA_BOOST) && (RFCtrl2 == TX))
    ca94:	2802      	cmp	r0, #2
    ca96:	d10a      	bne.n	caae <HAL_EnableRFCtrl+0x22>
    ca98:	2901      	cmp	r1, #1
    ca9a:	d108      	bne.n	caae <HAL_EnableRFCtrl+0x22>
		port_base->OUTCLR.reg = pin_mask;
    ca9c:	2280      	movs	r2, #128	; 0x80
    ca9e:	0192      	lsls	r2, r2, #6
    caa0:	4b03      	ldr	r3, [pc, #12]	; (cab0 <HAL_EnableRFCtrl+0x24>)
    caa2:	615a      	str	r2, [r3, #20]
   {
	   port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);
   }
#endif	
}
    caa4:	e003      	b.n	caae <HAL_EnableRFCtrl+0x22>
		port_base->OUTSET.reg = pin_mask;
    caa6:	2280      	movs	r2, #128	; 0x80
    caa8:	0192      	lsls	r2, r2, #6
    caaa:	4b01      	ldr	r3, [pc, #4]	; (cab0 <HAL_EnableRFCtrl+0x24>)
    caac:	619a      	str	r2, [r3, #24]
    caae:	4770      	bx	lr
    cab0:	40002800 	.word	0x40002800

0000cab4 <HAL_DisableRFCtrl>:

void HAL_DisableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
	if ((RFCtrl1 == RFO_HF) || (RFCtrl2 == RX))
    cab4:	2801      	cmp	r0, #1
    cab6:	d001      	beq.n	cabc <HAL_DisableRFCtrl+0x8>
    cab8:	2900      	cmp	r1, #0
    caba:	d103      	bne.n	cac4 <HAL_DisableRFCtrl+0x10>
		port_base->OUTCLR.reg = pin_mask;
    cabc:	2280      	movs	r2, #128	; 0x80
    cabe:	0192      	lsls	r2, r2, #6
    cac0:	4b01      	ldr	r3, [pc, #4]	; (cac8 <HAL_DisableRFCtrl+0x14>)
    cac2:	615a      	str	r2, [r3, #20]
	{
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
	}
#endif	
}
    cac4:	4770      	bx	lr
    cac6:	46c0      	nop			; (mov r8, r8)
    cac8:	40002800 	.word	0x40002800

0000cacc <HAL_GetRadioClkStabilizationDelay>:
 * \param[out] Time value in ms
 */
uint8_t HAL_GetRadioClkStabilizationDelay(void)
{
	return RADIO_CLK_STABILITATION_DELAY;
}
    cacc:	2002      	movs	r0, #2
    cace:	4770      	bx	lr

0000cad0 <HAL_GetRadioClkSrc>:
 * \param[out] Type of clock source TCXO or XTAL
 */
RadioClockSources_t HAL_GetRadioClkSrc(void)
{
	return RADIO_CLK_SRC;
}
    cad0:	2000      	movs	r0, #0
    cad2:	4770      	bx	lr

0000cad4 <HAL_TCXOPowerOn>:
 *
 * \param[in] None
 * \param[out] None
 */
void HAL_TCXOPowerOn(void)
{
    cad4:	b510      	push	{r4, lr}
		port_base->OUTSET.reg = pin_mask;
    cad6:	2280      	movs	r2, #128	; 0x80
    cad8:	0092      	lsls	r2, r2, #2
    cada:	4b03      	ldr	r3, [pc, #12]	; (cae8 <HAL_TCXOPowerOn+0x14>)
    cadc:	619a      	str	r2, [r3, #24]
#ifdef TCXO_ENABLE
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_ACTIVE);
	delay_ms(RADIO_CLK_STABILITATION_DELAY);
    cade:	2002      	movs	r0, #2
    cae0:	4b02      	ldr	r3, [pc, #8]	; (caec <HAL_TCXOPowerOn+0x18>)
    cae2:	4798      	blx	r3
#endif
}
    cae4:	bd10      	pop	{r4, pc}
    cae6:	46c0      	nop			; (mov r8, r8)
    cae8:	40002800 	.word	0x40002800
    caec:	0000453d 	.word	0x0000453d

0000caf0 <HAL_TCXOPowerOff>:
		port_base->OUTCLR.reg = pin_mask;
    caf0:	2280      	movs	r2, #128	; 0x80
    caf2:	0092      	lsls	r2, r2, #2
    caf4:	4b01      	ldr	r3, [pc, #4]	; (cafc <HAL_TCXOPowerOff+0xc>)
    caf6:	615a      	str	r2, [r3, #20]
#ifdef TCXO_ENABLE
#ifndef TCXO_ALWAYS_ON
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
#endif
}
    caf8:	4770      	bx	lr
    cafa:	46c0      	nop			; (mov r8, r8)
    cafc:	40002800 	.word	0x40002800

0000cb00 <SleepTimerGetElapsedTime>:
/**
* \brief Calculate the Elapsed Time from the previous call of this function
* \retval Elapsed time in ticks
*/
uint32_t SleepTimerGetElapsedTime(void)
{
    cb00:	b510      	push	{r4, lr}
	return rtc_count_get_count(&rtc);
    cb02:	4802      	ldr	r0, [pc, #8]	; (cb0c <SleepTimerGetElapsedTime+0xc>)
    cb04:	4b02      	ldr	r3, [pc, #8]	; (cb10 <SleepTimerGetElapsedTime+0x10>)
    cb06:	4798      	blx	r3
}
    cb08:	bd10      	pop	{r4, pc}
    cb0a:	46c0      	nop			; (mov r8, r8)
    cb0c:	20002980 	.word	0x20002980
    cb10:	00004cd1 	.word	0x00004cd1

0000cb14 <SleepTimerStop>:

/**
* \brief Stop the sleep timer
*/
void SleepTimerStop(void)
{
    cb14:	b510      	push	{r4, lr}
	rtc_count_disable_callback(&rtc, RTC_COUNT_CALLBACK_COMPARE_0);
    cb16:	2108      	movs	r1, #8
    cb18:	4801      	ldr	r0, [pc, #4]	; (cb20 <SleepTimerStop+0xc>)
    cb1a:	4b02      	ldr	r3, [pc, #8]	; (cb24 <SleepTimerStop+0x10>)
    cb1c:	4798      	blx	r3
}
    cb1e:	bd10      	pop	{r4, pc}
    cb20:	20002980 	.word	0x20002980
    cb24:	00004cfd 	.word	0x00004cfd

0000cb28 <SystemBlockingWaitMs>:
 * waiting with the MCU in sleep.
 * Find out how long it takes the MCU to go to and wake up from sleep to see if
 * it makes sense to go to sleep at all 
 */
void SystemBlockingWaitMs(uint32_t ms)
{
    cb28:	b510      	push	{r4, lr}
#ifndef UT
    delay_ms(ms);
    cb2a:	2800      	cmp	r0, #0
    cb2c:	d103      	bne.n	cb36 <SystemBlockingWaitMs+0xe>
    cb2e:	2001      	movs	r0, #1
    cb30:	4b02      	ldr	r3, [pc, #8]	; (cb3c <SystemBlockingWaitMs+0x14>)
    cb32:	4798      	blx	r3
#endif
}
    cb34:	bd10      	pop	{r4, pc}
    delay_ms(ms);
    cb36:	4b02      	ldr	r3, [pc, #8]	; (cb40 <SystemBlockingWaitMs+0x18>)
    cb38:	4798      	blx	r3
    cb3a:	e7fb      	b.n	cb34 <SystemBlockingWaitMs+0xc>
    cb3c:	00004511 	.word	0x00004511
    cb40:	0000453d 	.word	0x0000453d

0000cb44 <system_enter_critical_section>:
{

}

void system_enter_critical_section(void)
{
    cb44:	b510      	push	{r4, lr}
	cpu_irq_enter_critical();
    cb46:	4b01      	ldr	r3, [pc, #4]	; (cb4c <system_enter_critical_section+0x8>)
    cb48:	4798      	blx	r3
#ifndef UT
	system_interrupt_enter_critical_section();
#endif
}
    cb4a:	bd10      	pop	{r4, pc}
    cb4c:	00004569 	.word	0x00004569

0000cb50 <system_leave_critical_section>:

void system_leave_critical_section(void)
{
    cb50:	b510      	push	{r4, lr}
	cpu_irq_leave_critical();
    cb52:	4b01      	ldr	r3, [pc, #4]	; (cb58 <system_leave_critical_section+0x8>)
    cb54:	4798      	blx	r3
#ifndef UT
	system_interrupt_leave_critical_section();
#endif
}
    cb56:	bd10      	pop	{r4, pc}
    cb58:	000045a9 	.word	0x000045a9

0000cb5c <PMM_Wakeup>:

/**
* \brief Wakeup from sleep
*/
void PMM_Wakeup(void)
{
    cb5c:	b570      	push	{r4, r5, r6, lr}
    uint64_t sleptTimeUs = 0;

    if (PMM_STATE_SLEEP == pmmState)
    cb5e:	4b16      	ldr	r3, [pc, #88]	; (cbb8 <PMM_Wakeup+0x5c>)
    cb60:	781b      	ldrb	r3, [r3, #0]
    cb62:	2b01      	cmp	r3, #1
    cb64:	d000      	beq.n	cb68 <PMM_Wakeup+0xc>
        {
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
            sleepReq = NULL;
        }
    }
}
    cb66:	bd70      	pop	{r4, r5, r6, pc}
		pmmState = PMM_STATE_ACTIVE;
    cb68:	2200      	movs	r2, #0
    cb6a:	4b13      	ldr	r3, [pc, #76]	; (cbb8 <PMM_Wakeup+0x5c>)
    cb6c:	701a      	strb	r2, [r3, #0]
        sleptTimeUs = SLEEP_TICKS_TO_US(SleepTimerGetElapsedTime());
    cb6e:	4b13      	ldr	r3, [pc, #76]	; (cbbc <PMM_Wakeup+0x60>)
    cb70:	4798      	blx	r3
    cb72:	4b13      	ldr	r3, [pc, #76]	; (cbc0 <PMM_Wakeup+0x64>)
    cb74:	4798      	blx	r3
    cb76:	4913      	ldr	r1, [pc, #76]	; (cbc4 <PMM_Wakeup+0x68>)
    cb78:	4b13      	ldr	r3, [pc, #76]	; (cbc8 <PMM_Wakeup+0x6c>)
    cb7a:	4798      	blx	r3
    cb7c:	4b13      	ldr	r3, [pc, #76]	; (cbcc <PMM_Wakeup+0x70>)
    cb7e:	4798      	blx	r3
    cb80:	0004      	movs	r4, r0
    cb82:	000d      	movs	r5, r1
        SleepTimerStop();
    cb84:	4b12      	ldr	r3, [pc, #72]	; (cbd0 <PMM_Wakeup+0x74>)
    cb86:	4798      	blx	r3
        SystemTimerSync(sleptTimeUs);
    cb88:	0020      	movs	r0, r4
    cb8a:	0029      	movs	r1, r5
    cb8c:	4b11      	ldr	r3, [pc, #68]	; (cbd4 <PMM_Wakeup+0x78>)
    cb8e:	4798      	blx	r3
        if (sleepReq && sleepReq->pmmWakeupCallback)
    cb90:	4b11      	ldr	r3, [pc, #68]	; (cbd8 <PMM_Wakeup+0x7c>)
    cb92:	681b      	ldr	r3, [r3, #0]
    cb94:	2b00      	cmp	r3, #0
    cb96:	d0e6      	beq.n	cb66 <PMM_Wakeup+0xa>
    cb98:	689e      	ldr	r6, [r3, #8]
    cb9a:	2e00      	cmp	r6, #0
    cb9c:	d0e3      	beq.n	cb66 <PMM_Wakeup+0xa>
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
    cb9e:	22fa      	movs	r2, #250	; 0xfa
    cba0:	0092      	lsls	r2, r2, #2
    cba2:	2300      	movs	r3, #0
    cba4:	0020      	movs	r0, r4
    cba6:	0029      	movs	r1, r5
    cba8:	4c0c      	ldr	r4, [pc, #48]	; (cbdc <PMM_Wakeup+0x80>)
    cbaa:	47a0      	blx	r4
    cbac:	47b0      	blx	r6
            sleepReq = NULL;
    cbae:	2200      	movs	r2, #0
    cbb0:	4b09      	ldr	r3, [pc, #36]	; (cbd8 <PMM_Wakeup+0x7c>)
    cbb2:	601a      	str	r2, [r3, #0]
}
    cbb4:	e7d7      	b.n	cb66 <PMM_Wakeup+0xa>
    cbb6:	46c0      	nop			; (mov r8, r8)
    cbb8:	20001b84 	.word	0x20001b84
    cbbc:	0000cb01 	.word	0x0000cb01
    cbc0:	00014ddd 	.word	0x00014ddd
    cbc4:	41f423d7 	.word	0x41f423d7
    cbc8:	00014785 	.word	0x00014785
    cbcc:	00013ec1 	.word	0x00013ec1
    cbd0:	0000cb15 	.word	0x0000cb15
    cbd4:	0000da39 	.word	0x0000da39
    cbd8:	20001b88 	.word	0x20001b88
    cbdc:	00013dc1 	.word	0x00013dc1

0000cbe0 <InitDefault868Channels>:
/*
 * \brief This function initializes all the EU868 Channels to default values
 */
#if (EU_BAND == 1)
void InitDefault868Channels (void)
{
    cbe0:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    memset (RegParams.pChParams, 0, sizeof(DefaultChannels868) );
    cbe2:	4c39      	ldr	r4, [pc, #228]	; (ccc8 <InitDefault868Channels+0xe8>)
    cbe4:	7920      	ldrb	r0, [r4, #4]
    cbe6:	7963      	ldrb	r3, [r4, #5]
    cbe8:	021b      	lsls	r3, r3, #8
    cbea:	4303      	orrs	r3, r0
    cbec:	79a0      	ldrb	r0, [r4, #6]
    cbee:	0400      	lsls	r0, r0, #16
    cbf0:	4303      	orrs	r3, r0
    cbf2:	79e0      	ldrb	r0, [r4, #7]
    cbf4:	0600      	lsls	r0, r0, #24
    cbf6:	4318      	orrs	r0, r3
    cbf8:	2206      	movs	r2, #6
    cbfa:	2100      	movs	r1, #0
    cbfc:	4e33      	ldr	r6, [pc, #204]	; (cccc <InitDefault868Channels+0xec>)
    cbfe:	47b0      	blx	r6
    memcpy (RegParams.pChParams, DefaultChannels868, sizeof(DefaultChannels868) );
    cc00:	7920      	ldrb	r0, [r4, #4]
    cc02:	7963      	ldrb	r3, [r4, #5]
    cc04:	021b      	lsls	r3, r3, #8
    cc06:	4303      	orrs	r3, r0
    cc08:	79a0      	ldrb	r0, [r4, #6]
    cc0a:	0400      	lsls	r0, r0, #16
    cc0c:	4303      	orrs	r3, r0
    cc0e:	79e0      	ldrb	r0, [r4, #7]
    cc10:	0600      	lsls	r0, r0, #24
    cc12:	4318      	orrs	r0, r3
    cc14:	2206      	movs	r2, #6
    cc16:	492e      	ldr	r1, [pc, #184]	; (ccd0 <InitDefault868Channels+0xf0>)
    cc18:	4d2e      	ldr	r5, [pc, #184]	; (ccd4 <InitDefault868Channels+0xf4>)
    cc1a:	47a8      	blx	r5
    memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels868) );
    cc1c:	7a20      	ldrb	r0, [r4, #8]
    cc1e:	7a63      	ldrb	r3, [r4, #9]
    cc20:	021b      	lsls	r3, r3, #8
    cc22:	4303      	orrs	r3, r0
    cc24:	7aa0      	ldrb	r0, [r4, #10]
    cc26:	0400      	lsls	r0, r0, #16
    cc28:	4303      	orrs	r3, r0
    cc2a:	7ae0      	ldrb	r0, [r4, #11]
    cc2c:	0600      	lsls	r0, r0, #24
    cc2e:	4318      	orrs	r0, r3
    cc30:	2224      	movs	r2, #36	; 0x24
    cc32:	2100      	movs	r1, #0
    cc34:	47b0      	blx	r6
    memcpy (RegParams.pOtherChParams, AdvChannels868, sizeof(AdvChannels868) );	
    cc36:	7a20      	ldrb	r0, [r4, #8]
    cc38:	7a63      	ldrb	r3, [r4, #9]
    cc3a:	021b      	lsls	r3, r3, #8
    cc3c:	4303      	orrs	r3, r0
    cc3e:	7aa0      	ldrb	r0, [r4, #10]
    cc40:	0400      	lsls	r0, r0, #16
    cc42:	4303      	orrs	r3, r0
    cc44:	7ae0      	ldrb	r0, [r4, #11]
    cc46:	0600      	lsls	r0, r0, #24
    cc48:	4318      	orrs	r0, r3
    cc4a:	2224      	movs	r2, #36	; 0x24
    cc4c:	4922      	ldr	r1, [pc, #136]	; (ccd8 <InitDefault868Channels+0xf8>)
    cc4e:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParams868) );
    cc50:	7b20      	ldrb	r0, [r4, #12]
    cc52:	7b63      	ldrb	r3, [r4, #13]
    cc54:	021b      	lsls	r3, r3, #8
    cc56:	4303      	orrs	r3, r0
    cc58:	7ba0      	ldrb	r0, [r4, #14]
    cc5a:	0400      	lsls	r0, r0, #16
    cc5c:	4303      	orrs	r3, r0
    cc5e:	7be0      	ldrb	r0, [r4, #15]
    cc60:	0600      	lsls	r0, r0, #24
    cc62:	4318      	orrs	r0, r3
    cc64:	2248      	movs	r2, #72	; 0x48
    cc66:	2100      	movs	r1, #0
    cc68:	47b0      	blx	r6
	memcpy (RegParams.pSubBandParams, SubBandParams868, sizeof(SubBandParams868) );
    cc6a:	7b20      	ldrb	r0, [r4, #12]
    cc6c:	7b63      	ldrb	r3, [r4, #13]
    cc6e:	021b      	lsls	r3, r3, #8
    cc70:	4303      	orrs	r3, r0
    cc72:	7ba0      	ldrb	r0, [r4, #14]
    cc74:	0400      	lsls	r0, r0, #16
    cc76:	4303      	orrs	r3, r0
    cc78:	7be0      	ldrb	r0, [r4, #15]
    cc7a:	0600      	lsls	r0, r0, #24
    cc7c:	4318      	orrs	r0, r3
    cc7e:	2248      	movs	r2, #72	; 0x48
    cc80:	4916      	ldr	r1, [pc, #88]	; (ccdc <InitDefault868Channels+0xfc>)
    cc82:	47a8      	blx	r5
	memset(RegParams.cmnParams.paramsType2.subBandDutyCycle,0,sizeof(SubBandDutyCycle868));
	memcpy(RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycle868,sizeof(SubBandDutyCycle868));
    cc84:	0020      	movs	r0, r4
    cc86:	30af      	adds	r0, #175	; 0xaf
    cc88:	30ff      	adds	r0, #255	; 0xff
    cc8a:	220c      	movs	r2, #12
    cc8c:	4914      	ldr	r1, [pc, #80]	; (cce0 <InitDefault868Channels+0x100>)
    cc8e:	47a8      	blx	r5
    for (i = 3; i < RegParams.maxChannels; i++)
    cc90:	232a      	movs	r3, #42	; 0x2a
    cc92:	56e3      	ldrsb	r3, [r4, r3]
    cc94:	2b03      	cmp	r3, #3
    cc96:	dd15      	ble.n	ccc4 <InitDefault868Channels+0xe4>
    cc98:	2303      	movs	r3, #3
    {
        // for undefined channels the duty cycle should be a very big value, and the data range a not-valid value
        //duty cycle 0 means no duty cycle limitation, the bigger the duty cycle value, the greater the limitation
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    cc9a:	480b      	ldr	r0, [pc, #44]	; (ccc8 <InitDefault868Channels+0xe8>)
    cc9c:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    cc9e:	242a      	movs	r4, #42	; 0x2a
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    cca0:	7902      	ldrb	r2, [r0, #4]
    cca2:	7941      	ldrb	r1, [r0, #5]
    cca4:	0209      	lsls	r1, r1, #8
    cca6:	4311      	orrs	r1, r2
    cca8:	7982      	ldrb	r2, [r0, #6]
    ccaa:	0412      	lsls	r2, r2, #16
    ccac:	4311      	orrs	r1, r2
    ccae:	79c2      	ldrb	r2, [r0, #7]
    ccb0:	0612      	lsls	r2, r2, #24
    ccb2:	430a      	orrs	r2, r1
    ccb4:	0059      	lsls	r1, r3, #1
    ccb6:	188a      	adds	r2, r1, r2
    ccb8:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    ccba:	3301      	adds	r3, #1
    ccbc:	b2db      	uxtb	r3, r3
    ccbe:	5702      	ldrsb	r2, [r0, r4]
    ccc0:	4293      	cmp	r3, r2
    ccc2:	dbed      	blt.n	cca0 <InitDefault868Channels+0xc0>
    }
}
    ccc4:	bd70      	pop	{r4, r5, r6, pc}
    ccc6:	46c0      	nop			; (mov r8, r8)
    ccc8:	200029bc 	.word	0x200029bc
    cccc:	00016c59 	.word	0x00016c59
    ccd0:	00018f3c 	.word	0x00018f3c
    ccd4:	00016c47 	.word	0x00016c47
    ccd8:	00018f10 	.word	0x00018f10
    ccdc:	00018f5c 	.word	0x00018f5c
    cce0:	00018f44 	.word	0x00018f44

0000cce4 <InitDefault433Channels>:

/*
 * \brief This function initializes all the EU433 Channels to default values
 */
void InitDefault433Channels (void)
{
    cce4:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    memset (RegParams.pChParams, 0, sizeof(DefaultChannels433) );
    cce6:	4c36      	ldr	r4, [pc, #216]	; (cdc0 <InitDefault433Channels+0xdc>)
    cce8:	7920      	ldrb	r0, [r4, #4]
    ccea:	7963      	ldrb	r3, [r4, #5]
    ccec:	021b      	lsls	r3, r3, #8
    ccee:	4303      	orrs	r3, r0
    ccf0:	79a0      	ldrb	r0, [r4, #6]
    ccf2:	0400      	lsls	r0, r0, #16
    ccf4:	4303      	orrs	r3, r0
    ccf6:	79e0      	ldrb	r0, [r4, #7]
    ccf8:	0600      	lsls	r0, r0, #24
    ccfa:	4318      	orrs	r0, r3
    ccfc:	2206      	movs	r2, #6
    ccfe:	2100      	movs	r1, #0
    cd00:	4e30      	ldr	r6, [pc, #192]	; (cdc4 <InitDefault433Channels+0xe0>)
    cd02:	47b0      	blx	r6
    memcpy (RegParams.pChParams, DefaultChannels433, sizeof(DefaultChannels433) );
    cd04:	7920      	ldrb	r0, [r4, #4]
    cd06:	7963      	ldrb	r3, [r4, #5]
    cd08:	021b      	lsls	r3, r3, #8
    cd0a:	4303      	orrs	r3, r0
    cd0c:	79a0      	ldrb	r0, [r4, #6]
    cd0e:	0400      	lsls	r0, r0, #16
    cd10:	4303      	orrs	r3, r0
    cd12:	79e0      	ldrb	r0, [r4, #7]
    cd14:	0600      	lsls	r0, r0, #24
    cd16:	4318      	orrs	r0, r3
    cd18:	2206      	movs	r2, #6
    cd1a:	492b      	ldr	r1, [pc, #172]	; (cdc8 <InitDefault433Channels+0xe4>)
    cd1c:	4d2b      	ldr	r5, [pc, #172]	; (cdcc <InitDefault433Channels+0xe8>)
    cd1e:	47a8      	blx	r5
    memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels433) );
    cd20:	7a20      	ldrb	r0, [r4, #8]
    cd22:	7a63      	ldrb	r3, [r4, #9]
    cd24:	021b      	lsls	r3, r3, #8
    cd26:	4303      	orrs	r3, r0
    cd28:	7aa0      	ldrb	r0, [r4, #10]
    cd2a:	0400      	lsls	r0, r0, #16
    cd2c:	4303      	orrs	r3, r0
    cd2e:	7ae0      	ldrb	r0, [r4, #11]
    cd30:	0600      	lsls	r0, r0, #24
    cd32:	4318      	orrs	r0, r3
    cd34:	2224      	movs	r2, #36	; 0x24
    cd36:	2100      	movs	r1, #0
    cd38:	47b0      	blx	r6
    memcpy (RegParams.pOtherChParams, AdvChannels433, sizeof(AdvChannels433) );
    cd3a:	7a20      	ldrb	r0, [r4, #8]
    cd3c:	7a63      	ldrb	r3, [r4, #9]
    cd3e:	021b      	lsls	r3, r3, #8
    cd40:	4303      	orrs	r3, r0
    cd42:	7aa0      	ldrb	r0, [r4, #10]
    cd44:	0400      	lsls	r0, r0, #16
    cd46:	4303      	orrs	r3, r0
    cd48:	7ae0      	ldrb	r0, [r4, #11]
    cd4a:	0600      	lsls	r0, r0, #24
    cd4c:	4318      	orrs	r0, r3
    cd4e:	2224      	movs	r2, #36	; 0x24
    cd50:	491f      	ldr	r1, [pc, #124]	; (cdd0 <InitDefault433Channels+0xec>)
    cd52:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParams433) );
    cd54:	7b20      	ldrb	r0, [r4, #12]
    cd56:	7b63      	ldrb	r3, [r4, #13]
    cd58:	021b      	lsls	r3, r3, #8
    cd5a:	4303      	orrs	r3, r0
    cd5c:	7ba0      	ldrb	r0, [r4, #14]
    cd5e:	0400      	lsls	r0, r0, #16
    cd60:	4303      	orrs	r3, r0
    cd62:	7be0      	ldrb	r0, [r4, #15]
    cd64:	0600      	lsls	r0, r0, #24
    cd66:	4318      	orrs	r0, r3
    cd68:	220c      	movs	r2, #12
    cd6a:	2100      	movs	r1, #0
    cd6c:	47b0      	blx	r6
	memcpy (RegParams.pSubBandParams, SubBandParams433, sizeof(SubBandParams433) );	
    cd6e:	7b20      	ldrb	r0, [r4, #12]
    cd70:	7b63      	ldrb	r3, [r4, #13]
    cd72:	021b      	lsls	r3, r3, #8
    cd74:	4303      	orrs	r3, r0
    cd76:	7ba0      	ldrb	r0, [r4, #14]
    cd78:	0400      	lsls	r0, r0, #16
    cd7a:	4303      	orrs	r3, r0
    cd7c:	7be0      	ldrb	r0, [r4, #15]
    cd7e:	0600      	lsls	r0, r0, #24
    cd80:	4318      	orrs	r0, r3
    cd82:	220c      	movs	r2, #12
    cd84:	4913      	ldr	r1, [pc, #76]	; (cdd4 <InitDefault433Channels+0xf0>)
    cd86:	47a8      	blx	r5
	
    for (i = 3; i < RegParams.maxChannels; i++)
    cd88:	232a      	movs	r3, #42	; 0x2a
    cd8a:	56e3      	ldrsb	r3, [r4, r3]
    cd8c:	2b03      	cmp	r3, #3
    cd8e:	dd15      	ble.n	cdbc <InitDefault433Channels+0xd8>
    cd90:	2303      	movs	r3, #3
    {
        // for undefined channels the duty cycle should be a very big value, and the data range a not-valid value
        //duty cycle 0 means no duty cycle limitation, the bigger the duty cycle value, the greater the limitation
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    cd92:	480b      	ldr	r0, [pc, #44]	; (cdc0 <InitDefault433Channels+0xdc>)
    cd94:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    cd96:	242a      	movs	r4, #42	; 0x2a
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    cd98:	7902      	ldrb	r2, [r0, #4]
    cd9a:	7941      	ldrb	r1, [r0, #5]
    cd9c:	0209      	lsls	r1, r1, #8
    cd9e:	4311      	orrs	r1, r2
    cda0:	7982      	ldrb	r2, [r0, #6]
    cda2:	0412      	lsls	r2, r2, #16
    cda4:	4311      	orrs	r1, r2
    cda6:	79c2      	ldrb	r2, [r0, #7]
    cda8:	0612      	lsls	r2, r2, #24
    cdaa:	430a      	orrs	r2, r1
    cdac:	0059      	lsls	r1, r3, #1
    cdae:	188a      	adds	r2, r1, r2
    cdb0:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    cdb2:	3301      	adds	r3, #1
    cdb4:	b2db      	uxtb	r3, r3
    cdb6:	5702      	ldrsb	r2, [r0, r4]
    cdb8:	4293      	cmp	r3, r2
    cdba:	dbed      	blt.n	cd98 <InitDefault433Channels+0xb4>
    }
}
    cdbc:	bd70      	pop	{r4, r5, r6, pc}
    cdbe:	46c0      	nop			; (mov r8, r8)
    cdc0:	200029bc 	.word	0x200029bc
    cdc4:	00016c59 	.word	0x00016c59
    cdc8:	00018f34 	.word	0x00018f34
    cdcc:	00016c47 	.word	0x00016c47
    cdd0:	00018eec 	.word	0x00018eec
    cdd4:	00018f50 	.word	0x00018f50

0000cdd8 <InitDefault920Channels>:
/*
 * \brief This function initializes all the IN865 Channels to default values
 */
#if (JPN_BAND == 1)
void InitDefault920Channels (void)
{
    cdd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
    memset (RegParams.pChParams, 0, sizeof(DefaultChannels923JP) );
    cdda:	4c40      	ldr	r4, [pc, #256]	; (cedc <InitDefault920Channels+0x104>)
    cddc:	7920      	ldrb	r0, [r4, #4]
    cdde:	7963      	ldrb	r3, [r4, #5]
    cde0:	021b      	lsls	r3, r3, #8
    cde2:	4303      	orrs	r3, r0
    cde4:	79a0      	ldrb	r0, [r4, #6]
    cde6:	0400      	lsls	r0, r0, #16
    cde8:	4303      	orrs	r3, r0
    cdea:	79e0      	ldrb	r0, [r4, #7]
    cdec:	0600      	lsls	r0, r0, #24
    cdee:	4318      	orrs	r0, r3
    cdf0:	2204      	movs	r2, #4
    cdf2:	2100      	movs	r1, #0
    cdf4:	4e3a      	ldr	r6, [pc, #232]	; (cee0 <InitDefault920Channels+0x108>)
    cdf6:	47b0      	blx	r6
	memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels923JP) );
    cdf8:	7a20      	ldrb	r0, [r4, #8]
    cdfa:	7a63      	ldrb	r3, [r4, #9]
    cdfc:	021b      	lsls	r3, r3, #8
    cdfe:	4303      	orrs	r3, r0
    ce00:	7aa0      	ldrb	r0, [r4, #10]
    ce02:	0400      	lsls	r0, r0, #16
    ce04:	4303      	orrs	r3, r0
    ce06:	7ae0      	ldrb	r0, [r4, #11]
    ce08:	0600      	lsls	r0, r0, #24
    ce0a:	4318      	orrs	r0, r3
    ce0c:	2218      	movs	r2, #24
    ce0e:	2100      	movs	r1, #0
    ce10:	47b0      	blx	r6
    memcpy (RegParams.pChParams, DefaultChannels923JP, sizeof(DefaultChannels923JP) );
    ce12:	7920      	ldrb	r0, [r4, #4]
    ce14:	7963      	ldrb	r3, [r4, #5]
    ce16:	021b      	lsls	r3, r3, #8
    ce18:	4303      	orrs	r3, r0
    ce1a:	79a0      	ldrb	r0, [r4, #6]
    ce1c:	0400      	lsls	r0, r0, #16
    ce1e:	4303      	orrs	r3, r0
    ce20:	79e0      	ldrb	r0, [r4, #7]
    ce22:	0600      	lsls	r0, r0, #24
    ce24:	4318      	orrs	r0, r3
    ce26:	2204      	movs	r2, #4
    ce28:	492e      	ldr	r1, [pc, #184]	; (cee4 <InitDefault920Channels+0x10c>)
    ce2a:	4d2f      	ldr	r5, [pc, #188]	; (cee8 <InitDefault920Channels+0x110>)
    ce2c:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels923JP, sizeof(AdvChannels923JP) );
    ce2e:	7a20      	ldrb	r0, [r4, #8]
    ce30:	7a63      	ldrb	r3, [r4, #9]
    ce32:	021b      	lsls	r3, r3, #8
    ce34:	4303      	orrs	r3, r0
    ce36:	7aa0      	ldrb	r0, [r4, #10]
    ce38:	0400      	lsls	r0, r0, #16
    ce3a:	4303      	orrs	r3, r0
    ce3c:	7ae0      	ldrb	r0, [r4, #11]
    ce3e:	0600      	lsls	r0, r0, #24
    ce40:	4318      	orrs	r0, r3
    ce42:	2218      	movs	r2, #24
    ce44:	4929      	ldr	r1, [pc, #164]	; (ceec <InitDefault920Channels+0x114>)
    ce46:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParamsJP923) );
    ce48:	7b20      	ldrb	r0, [r4, #12]
    ce4a:	7b63      	ldrb	r3, [r4, #13]
    ce4c:	021b      	lsls	r3, r3, #8
    ce4e:	4303      	orrs	r3, r0
    ce50:	7ba0      	ldrb	r0, [r4, #14]
    ce52:	0400      	lsls	r0, r0, #16
    ce54:	4303      	orrs	r3, r0
    ce56:	7be0      	ldrb	r0, [r4, #15]
    ce58:	0600      	lsls	r0, r0, #24
    ce5a:	4318      	orrs	r0, r3
    ce5c:	2218      	movs	r2, #24
    ce5e:	2100      	movs	r1, #0
    ce60:	47b0      	blx	r6
	memcpy (RegParams.pSubBandParams, SubBandParamsJP923, sizeof(SubBandParamsJP923) );
    ce62:	7b20      	ldrb	r0, [r4, #12]
    ce64:	7b63      	ldrb	r3, [r4, #13]
    ce66:	021b      	lsls	r3, r3, #8
    ce68:	4303      	orrs	r3, r0
    ce6a:	7ba0      	ldrb	r0, [r4, #14]
    ce6c:	0400      	lsls	r0, r0, #16
    ce6e:	4303      	orrs	r3, r0
    ce70:	7be0      	ldrb	r0, [r4, #15]
    ce72:	0600      	lsls	r0, r0, #24
    ce74:	4318      	orrs	r0, r3
    ce76:	2218      	movs	r2, #24
    ce78:	491d      	ldr	r1, [pc, #116]	; (cef0 <InitDefault920Channels+0x118>)
    ce7a:	47a8      	blx	r5
	memset (RegParams.cmnParams.paramsType2.subBandDutyCycle,0,sizeof(SubBandDutyCycleJP923));
	memcpy (RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycleJP923,sizeof(SubBandDutyCycleJP923));
    ce7c:	0020      	movs	r0, r4
    ce7e:	30af      	adds	r0, #175	; 0xaf
    ce80:	30ff      	adds	r0, #255	; 0xff
    ce82:	2204      	movs	r2, #4
    ce84:	491b      	ldr	r1, [pc, #108]	; (cef4 <InitDefault920Channels+0x11c>)
    ce86:	47a8      	blx	r5
    for (i = 2; i < RegParams.maxChannels; i++)
    ce88:	232a      	movs	r3, #42	; 0x2a
    ce8a:	56e3      	ldrsb	r3, [r4, r3]
    ce8c:	2b02      	cmp	r3, #2
    ce8e:	dd1f      	ble.n	ced0 <InitDefault920Channels+0xf8>
    ce90:	2302      	movs	r3, #2
    ce92:	2202      	movs	r2, #2
    {
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    ce94:	4911      	ldr	r1, [pc, #68]	; (cedc <InitDefault920Channels+0x104>)
    ce96:	27ff      	movs	r7, #255	; 0xff
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    ce98:	2500      	movs	r5, #0
    for (i = 2; i < RegParams.maxChannels; i++)
    ce9a:	262a      	movs	r6, #42	; 0x2a
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    ce9c:	7908      	ldrb	r0, [r1, #4]
    ce9e:	794c      	ldrb	r4, [r1, #5]
    cea0:	0224      	lsls	r4, r4, #8
    cea2:	4304      	orrs	r4, r0
    cea4:	7988      	ldrb	r0, [r1, #6]
    cea6:	0400      	lsls	r0, r0, #16
    cea8:	4304      	orrs	r4, r0
    ceaa:	79c8      	ldrb	r0, [r1, #7]
    ceac:	0600      	lsls	r0, r0, #24
    ceae:	4320      	orrs	r0, r4
    ceb0:	0054      	lsls	r4, r2, #1
    ceb2:	1820      	adds	r0, r4, r0
    ceb4:	7047      	strb	r7, [r0, #1]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    ceb6:	3358      	adds	r3, #88	; 0x58
    ceb8:	009b      	lsls	r3, r3, #2
    ceba:	18cb      	adds	r3, r1, r3
    cebc:	725d      	strb	r5, [r3, #9]
    cebe:	729d      	strb	r5, [r3, #10]
    cec0:	72dd      	strb	r5, [r3, #11]
    cec2:	731d      	strb	r5, [r3, #12]
    for (i = 2; i < RegParams.maxChannels; i++)
    cec4:	3201      	adds	r2, #1
    cec6:	b2d2      	uxtb	r2, r2
    cec8:	0013      	movs	r3, r2
    ceca:	5788      	ldrsb	r0, [r1, r6]
    cecc:	4282      	cmp	r2, r0
    cece:	dbe5      	blt.n	ce9c <InitDefault920Channels+0xc4>
    }
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    ced0:	21ff      	movs	r1, #255	; 0xff
    ced2:	2330      	movs	r3, #48	; 0x30
    ced4:	4a01      	ldr	r2, [pc, #4]	; (cedc <InitDefault920Channels+0x104>)
    ced6:	54d1      	strb	r1, [r2, r3]
}
    ced8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ceda:	46c0      	nop			; (mov r8, r8)
    cedc:	200029bc 	.word	0x200029bc
    cee0:	00016c59 	.word	0x00016c59
    cee4:	00018fbc 	.word	0x00018fbc
    cee8:	00016c47 	.word	0x00016c47
    ceec:	00018fa4 	.word	0x00018fa4
    cef0:	00018fc4 	.word	0x00018fc4
    cef4:	00018fc0 	.word	0x00018fc0

0000cef8 <InitDefault920ChannelsKR>:
/*
 * \brief This function initializes all the IN865 Channels to default values
 */
#if (KR_BAND == 1)
void InitDefault920ChannelsKR (void)
{
    cef8:	b5f0      	push	{r4, r5, r6, r7, lr}
    cefa:	46d6      	mov	lr, sl
    cefc:	464f      	mov	r7, r9
    cefe:	4646      	mov	r6, r8
    cf00:	b5c0      	push	{r6, r7, lr}
    uint8_t i;
    memset (RegParams.pChParams, 0, sizeof(DefaultChannels920KR) );
    cf02:	4c46      	ldr	r4, [pc, #280]	; (d01c <InitDefault920ChannelsKR+0x124>)
    cf04:	7920      	ldrb	r0, [r4, #4]
    cf06:	7963      	ldrb	r3, [r4, #5]
    cf08:	021b      	lsls	r3, r3, #8
    cf0a:	4303      	orrs	r3, r0
    cf0c:	79a0      	ldrb	r0, [r4, #6]
    cf0e:	0400      	lsls	r0, r0, #16
    cf10:	4303      	orrs	r3, r0
    cf12:	79e0      	ldrb	r0, [r4, #7]
    cf14:	0600      	lsls	r0, r0, #24
    cf16:	4318      	orrs	r0, r3
    cf18:	2206      	movs	r2, #6
    cf1a:	2100      	movs	r1, #0
    cf1c:	4d40      	ldr	r5, [pc, #256]	; (d020 <InitDefault920ChannelsKR+0x128>)
    cf1e:	47a8      	blx	r5
	memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels920KR) );
    cf20:	7a20      	ldrb	r0, [r4, #8]
    cf22:	7a63      	ldrb	r3, [r4, #9]
    cf24:	021b      	lsls	r3, r3, #8
    cf26:	4303      	orrs	r3, r0
    cf28:	7aa0      	ldrb	r0, [r4, #10]
    cf2a:	0400      	lsls	r0, r0, #16
    cf2c:	4303      	orrs	r3, r0
    cf2e:	7ae0      	ldrb	r0, [r4, #11]
    cf30:	0600      	lsls	r0, r0, #24
    cf32:	4318      	orrs	r0, r3
    cf34:	2224      	movs	r2, #36	; 0x24
    cf36:	2100      	movs	r1, #0
    cf38:	47a8      	blx	r5
    memcpy (RegParams.pChParams, DefaultChannels920KR, sizeof(DefaultChannels920KR) );
    cf3a:	7920      	ldrb	r0, [r4, #4]
    cf3c:	7963      	ldrb	r3, [r4, #5]
    cf3e:	021b      	lsls	r3, r3, #8
    cf40:	4303      	orrs	r3, r0
    cf42:	79a0      	ldrb	r0, [r4, #6]
    cf44:	0400      	lsls	r0, r0, #16
    cf46:	4303      	orrs	r3, r0
    cf48:	79e0      	ldrb	r0, [r4, #7]
    cf4a:	0600      	lsls	r0, r0, #24
    cf4c:	4318      	orrs	r0, r3
    cf4e:	2206      	movs	r2, #6
    cf50:	4934      	ldr	r1, [pc, #208]	; (d024 <InitDefault920ChannelsKR+0x12c>)
    cf52:	4d35      	ldr	r5, [pc, #212]	; (d028 <InitDefault920ChannelsKR+0x130>)
    cf54:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels920KR, sizeof(AdvChannels920KR) );
    cf56:	7a20      	ldrb	r0, [r4, #8]
    cf58:	7a63      	ldrb	r3, [r4, #9]
    cf5a:	021b      	lsls	r3, r3, #8
    cf5c:	4303      	orrs	r3, r0
    cf5e:	7aa0      	ldrb	r0, [r4, #10]
    cf60:	0400      	lsls	r0, r0, #16
    cf62:	4303      	orrs	r3, r0
    cf64:	7ae0      	ldrb	r0, [r4, #11]
    cf66:	0600      	lsls	r0, r0, #24
    cf68:	4318      	orrs	r0, r3
    cf6a:	2224      	movs	r2, #36	; 0x24
    cf6c:	492f      	ldr	r1, [pc, #188]	; (d02c <InitDefault920ChannelsKR+0x134>)
    cf6e:	47a8      	blx	r5
    for (i = 3; i < RegParams.maxChannels; i++)
    cf70:	232a      	movs	r3, #42	; 0x2a
    cf72:	56e3      	ldrsb	r3, [r4, r3]
    cf74:	2b03      	cmp	r3, #3
    cf76:	dd48      	ble.n	d00a <InitDefault920ChannelsKR+0x112>
    cf78:	2103      	movs	r1, #3
    cf7a:	2003      	movs	r0, #3
    {
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    cf7c:	4b27      	ldr	r3, [pc, #156]	; (d01c <InitDefault920ChannelsKR+0x124>)
    cf7e:	26ff      	movs	r6, #255	; 0xff
		RegParams.pChParams[i].status = DISABLED;
    cf80:	2500      	movs	r5, #0
		RegParams.pOtherChParams[i].joinRequestChannel = DISABLED;
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    cf82:	22e1      	movs	r2, #225	; 0xe1
    cf84:	0052      	lsls	r2, r2, #1
    cf86:	4690      	mov	r8, r2
    cf88:	46b4      	mov	ip, r6
    for (i = 3; i < RegParams.maxChannels; i++)
    cf8a:	3a99      	subs	r2, #153	; 0x99
    cf8c:	3aff      	subs	r2, #255	; 0xff
    cf8e:	4692      	mov	sl, r2
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    cf90:	0042      	lsls	r2, r0, #1
    cf92:	791c      	ldrb	r4, [r3, #4]
    cf94:	46a1      	mov	r9, r4
    cf96:	795c      	ldrb	r4, [r3, #5]
    cf98:	0224      	lsls	r4, r4, #8
    cf9a:	464f      	mov	r7, r9
    cf9c:	4327      	orrs	r7, r4
    cf9e:	799c      	ldrb	r4, [r3, #6]
    cfa0:	0424      	lsls	r4, r4, #16
    cfa2:	4327      	orrs	r7, r4
    cfa4:	79dc      	ldrb	r4, [r3, #7]
    cfa6:	0624      	lsls	r4, r4, #24
    cfa8:	433c      	orrs	r4, r7
    cfaa:	18a4      	adds	r4, r4, r2
    cfac:	7066      	strb	r6, [r4, #1]
		RegParams.pChParams[i].status = DISABLED;
    cfae:	791c      	ldrb	r4, [r3, #4]
    cfb0:	46a1      	mov	r9, r4
    cfb2:	795c      	ldrb	r4, [r3, #5]
    cfb4:	0224      	lsls	r4, r4, #8
    cfb6:	464f      	mov	r7, r9
    cfb8:	4327      	orrs	r7, r4
    cfba:	799c      	ldrb	r4, [r3, #6]
    cfbc:	0424      	lsls	r4, r4, #16
    cfbe:	4327      	orrs	r7, r4
    cfc0:	79dc      	ldrb	r4, [r3, #7]
    cfc2:	0624      	lsls	r4, r4, #24
    cfc4:	433c      	orrs	r4, r7
    cfc6:	54a5      	strb	r5, [r4, r2]
		RegParams.pOtherChParams[i].joinRequestChannel = DISABLED;
    cfc8:	7a1c      	ldrb	r4, [r3, #8]
    cfca:	46a1      	mov	r9, r4
    cfcc:	7a5c      	ldrb	r4, [r3, #9]
    cfce:	0224      	lsls	r4, r4, #8
    cfd0:	464f      	mov	r7, r9
    cfd2:	4327      	orrs	r7, r4
    cfd4:	7a9c      	ldrb	r4, [r3, #10]
    cfd6:	0424      	lsls	r4, r4, #16
    cfd8:	4327      	orrs	r7, r4
    cfda:	7adc      	ldrb	r4, [r3, #11]
    cfdc:	0624      	lsls	r4, r4, #24
    cfde:	433c      	orrs	r4, r7
    cfe0:	1812      	adds	r2, r2, r0
    cfe2:	0092      	lsls	r2, r2, #2
    cfe4:	1912      	adds	r2, r2, r4
    cfe6:	7255      	strb	r5, [r2, #9]
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    cfe8:	4642      	mov	r2, r8
    cfea:	4664      	mov	r4, ip
    cfec:	549c      	strb	r4, [r3, r2]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    cfee:	3158      	adds	r1, #88	; 0x58
    cff0:	0089      	lsls	r1, r1, #2
    cff2:	1859      	adds	r1, r3, r1
    cff4:	724d      	strb	r5, [r1, #9]
    cff6:	728d      	strb	r5, [r1, #10]
    cff8:	72cd      	strb	r5, [r1, #11]
    cffa:	730d      	strb	r5, [r1, #12]
    for (i = 3; i < RegParams.maxChannels; i++)
    cffc:	3001      	adds	r0, #1
    cffe:	b2c0      	uxtb	r0, r0
    d000:	0001      	movs	r1, r0
    d002:	4652      	mov	r2, sl
    d004:	569a      	ldrsb	r2, [r3, r2]
    d006:	4290      	cmp	r0, r2
    d008:	dbc2      	blt.n	cf90 <InitDefault920ChannelsKR+0x98>
    }
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    d00a:	21ff      	movs	r1, #255	; 0xff
    d00c:	2330      	movs	r3, #48	; 0x30
    d00e:	4a03      	ldr	r2, [pc, #12]	; (d01c <InitDefault920ChannelsKR+0x124>)
    d010:	54d1      	strb	r1, [r2, r3]
}
    d012:	bc1c      	pop	{r2, r3, r4}
    d014:	4690      	mov	r8, r2
    d016:	4699      	mov	r9, r3
    d018:	46a2      	mov	sl, r4
    d01a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d01c:	200029bc 	.word	0x200029bc
    d020:	00016c59 	.word	0x00016c59
    d024:	00019000 	.word	0x00019000
    d028:	00016c47 	.word	0x00016c47
    d02c:	00018fdc 	.word	0x00018fdc

0000d030 <LORAREG_GetAttr>:
 * \param[out] Result of the GET operation
 * \retval LORAWAN_SUCCESS : If GET is successful
 *	LORAWAN_INVALID_PARAMETER if the input attribute or the attribute type is invalid
 */
StackRetStatus_t LORAREG_GetAttr(LorawanRegionalAttributes_t attrType, void *attrInput, void *attrOutput)
{
    d030:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    d032:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    d034:	283c      	cmp	r0, #60	; 0x3c
    d036:	d901      	bls.n	d03c <LORAREG_GetAttr+0xc>
	{
	    result = pGetAttr[attrType](attrType, attrInput,attrOutput);	
	}

	return result;
}
    d038:	0018      	movs	r0, r3
    d03a:	bd10      	pop	{r4, pc}
	    result = pGetAttr[attrType](attrType, attrInput,attrOutput);	
    d03c:	0084      	lsls	r4, r0, #2
    d03e:	4b02      	ldr	r3, [pc, #8]	; (d048 <LORAREG_GetAttr+0x18>)
    d040:	58e3      	ldr	r3, [r4, r3]
    d042:	4798      	blx	r3
    d044:	0003      	movs	r3, r0
    d046:	e7f7      	b.n	d038 <LORAREG_GetAttr+0x8>
    d048:	20001b8c 	.word	0x20001b8c

0000d04c <LORAREG_ValidateAttr>:
 * \param[in] attrInput Input used to validate the attribute value
 * \retval LORAWAN_SUCCESS : If Validate is successful
 *	LORAWAN_INVALID_PARAMETER if the input attribute or the attribute type is invalid
 */
StackRetStatus_t LORAREG_ValidateAttr(LorawanRegionalAttributes_t attrType, void *attrInput)
{
    d04c:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    d04e:	230a      	movs	r3, #10
	
	if(attrType < REG_NUM_ATTRIBUTES)
    d050:	283c      	cmp	r0, #60	; 0x3c
    d052:	d901      	bls.n	d058 <LORAREG_ValidateAttr+0xc>
	{
	    result = pValidateAttr[attrType](attrType, attrInput);		
	}

	return result;
}
    d054:	0018      	movs	r0, r3
    d056:	bd10      	pop	{r4, pc}
	    result = pValidateAttr[attrType](attrType, attrInput);		
    d058:	0082      	lsls	r2, r0, #2
    d05a:	4b02      	ldr	r3, [pc, #8]	; (d064 <LORAREG_ValidateAttr+0x18>)
    d05c:	58d3      	ldr	r3, [r2, r3]
    d05e:	4798      	blx	r3
    d060:	0003      	movs	r3, r0
    d062:	e7f7      	b.n	d054 <LORAREG_ValidateAttr+0x8>
    d064:	20001d74 	.word	0x20001d74

0000d068 <LORAREG_SetAttr>:
 * \param[in] attrInput Input used to update the attribute value
 * \retval LORAWAN_SUCCESS : If Update is successful
 *	LORAWAN_INVALID_PARAMETER if the input attribute or the attribute type is invalid
 */
StackRetStatus_t LORAREG_SetAttr(LorawanRegionalAttributes_t attrType, void *attrInput)
{
    d068:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    d06a:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    d06c:	283c      	cmp	r0, #60	; 0x3c
    d06e:	d901      	bls.n	d074 <LORAREG_SetAttr+0xc>
	{
	    result = pSetAttr[attrType](attrType, attrInput);		
	}

	return result;
}
    d070:	0018      	movs	r0, r3
    d072:	bd10      	pop	{r4, pc}
	    result = pSetAttr[attrType](attrType, attrInput);		
    d074:	0082      	lsls	r2, r0, #2
    d076:	4b02      	ldr	r3, [pc, #8]	; (d080 <LORAREG_SetAttr+0x18>)
    d078:	58d3      	ldr	r3, [r2, r3]
    d07a:	4798      	blx	r3
    d07c:	0003      	movs	r3, r0
    d07e:	e7f7      	b.n	d070 <LORAREG_SetAttr+0x8>
    d080:	20001c80 	.word	0x20001c80

0000d084 <setDefaultTxPower>:
}
#endif
StackRetStatus_t setDefaultTxPower(IsmBand_t ismBand)
{   
	StackRetStatus_t result = LORAWAN_SUCCESS;
	if(ismBand == ISM_EU868)
    d084:	2800      	cmp	r0, #0
    d086:	d00e      	beq.n	d0a6 <setDefaultTxPower+0x22>
	{
			RegParams.MacTxPower = MAC_DEF_TX_POWER_EU;
	}
	else if(ismBand == ISM_JPN923)
    d088:	2805      	cmp	r0, #5
    d08a:	d013      	beq.n	d0b4 <setDefaultTxPower+0x30>
	{
		RegParams.MacTxPower = MAC_DEF_TX_POWER_JP;
	}
	else if (ismBand == ISM_KR920)
    d08c:	2804      	cmp	r0, #4
    d08e:	d017      	beq.n	d0c0 <setDefaultTxPower+0x3c>
	}
	else if (ismBand == ISM_ASBAND)
	{
		RegParams.MacTxPower = MAC_DEF_TX_POWER_AS;
	}
	else if(ismBand == ISM_AU915)
    d090:	2803      	cmp	r0, #3
    d092:	d01b      	beq.n	d0cc <setDefaultTxPower+0x48>
	{
		RegParams.MacTxPower = MAC_DEF_TX_POWER_NA;
	}
	else
	{
		result = LORAWAN_INVALID_PARAMETER;
    d094:	230a      	movs	r3, #10
	else if(ismBand == ISM_NA915)
    d096:	2802      	cmp	r0, #2
    d098:	d10a      	bne.n	d0b0 <setDefaultTxPower+0x2c>
		RegParams.MacTxPower = MAC_DEF_TX_POWER_NA;
    d09a:	2107      	movs	r1, #7
    d09c:	331d      	adds	r3, #29
    d09e:	4a0e      	ldr	r2, [pc, #56]	; (d0d8 <setDefaultTxPower+0x54>)
    d0a0:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    d0a2:	3b1f      	subs	r3, #31
    d0a4:	e004      	b.n	d0b0 <setDefaultTxPower+0x2c>
			RegParams.MacTxPower = MAC_DEF_TX_POWER_EU;
    d0a6:	2101      	movs	r1, #1
    d0a8:	2327      	movs	r3, #39	; 0x27
    d0aa:	4a0b      	ldr	r2, [pc, #44]	; (d0d8 <setDefaultTxPower+0x54>)
    d0ac:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    d0ae:	3b1f      	subs	r3, #31
	}
#if (ENABLE_PDS==1)
	PDS_STORE(RegParams.MacTxPower);
#endif
	return result;
}
    d0b0:	0018      	movs	r0, r3
    d0b2:	4770      	bx	lr
		RegParams.MacTxPower = MAC_DEF_TX_POWER_JP;
    d0b4:	2101      	movs	r1, #1
    d0b6:	2327      	movs	r3, #39	; 0x27
    d0b8:	4a07      	ldr	r2, [pc, #28]	; (d0d8 <setDefaultTxPower+0x54>)
    d0ba:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    d0bc:	3b1f      	subs	r3, #31
    d0be:	e7f7      	b.n	d0b0 <setDefaultTxPower+0x2c>
		RegParams.MacTxPower = MAC_DEF_TX_POWER_KR;
    d0c0:	2101      	movs	r1, #1
    d0c2:	2327      	movs	r3, #39	; 0x27
    d0c4:	4a04      	ldr	r2, [pc, #16]	; (d0d8 <setDefaultTxPower+0x54>)
    d0c6:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    d0c8:	3b1f      	subs	r3, #31
    d0ca:	e7f1      	b.n	d0b0 <setDefaultTxPower+0x2c>
		RegParams.MacTxPower = MAC_DEF_TX_POWER_AU;
    d0cc:	2107      	movs	r1, #7
    d0ce:	2327      	movs	r3, #39	; 0x27
    d0d0:	4a01      	ldr	r2, [pc, #4]	; (d0d8 <setDefaultTxPower+0x54>)
    d0d2:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    d0d4:	3b1f      	subs	r3, #31
    d0d6:	e7eb      	b.n	d0b0 <setDefaultTxPower+0x2c>
    d0d8:	200029bc 	.word	0x200029bc

0000d0dc <Enableallchannels>:
	}
	return status;
}
#endif
void Enableallchannels()
{
    d0dc:	b510      	push	{r4, lr}
    d0de:	2000      	movs	r0, #0
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
	{
		RegParams.pChParams[i].status = ENABLED;
    d0e0:	490a      	ldr	r1, [pc, #40]	; (d10c <Enableallchannels+0x30>)
    d0e2:	2401      	movs	r4, #1
    d0e4:	790b      	ldrb	r3, [r1, #4]
    d0e6:	794a      	ldrb	r2, [r1, #5]
    d0e8:	0212      	lsls	r2, r2, #8
    d0ea:	431a      	orrs	r2, r3
    d0ec:	798b      	ldrb	r3, [r1, #6]
    d0ee:	041b      	lsls	r3, r3, #16
    d0f0:	431a      	orrs	r2, r3
    d0f2:	79cb      	ldrb	r3, [r1, #7]
    d0f4:	061b      	lsls	r3, r3, #24
    d0f6:	4313      	orrs	r3, r2
    d0f8:	541c      	strb	r4, [r3, r0]
    d0fa:	3002      	adds	r0, #2
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
    d0fc:	2890      	cmp	r0, #144	; 0x90
    d0fe:	d1f1      	bne.n	d0e4 <Enableallchannels+0x8>
	}
	RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    d100:	2100      	movs	r1, #0
    d102:	23ac      	movs	r3, #172	; 0xac
    d104:	005b      	lsls	r3, r3, #1
    d106:	4a01      	ldr	r2, [pc, #4]	; (d10c <Enableallchannels+0x30>)
    d108:	54d1      	strb	r1, [r2, r3]
#if (ENABLE_PDS == 1)
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
	PDS_STORE(RegParams.regParamItems.lastUsedSB);
#endif
}
    d10a:	bd10      	pop	{r4, pc}
    d10c:	200029bc 	.word	0x200029bc

0000d110 <LORAREG_EnableallChannels>:
StackRetStatus_t LORAREG_EnableallChannels(IsmBand_t ismBand)
{
    d110:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_SUCCESS;
	if(ismBand == ISM_EU868)
    d112:	2800      	cmp	r0, #0
    d114:	d00a      	beq.n	d12c <LORAREG_EnableallChannels+0x1c>
	{
		 InitDefault868Channels();
	}
	else if (ismBand == ISM_EU433)
    d116:	2801      	cmp	r0, #1
    d118:	d00b      	beq.n	d132 <LORAREG_EnableallChannels+0x22>
	{
		 InitDefault433Channels();
	}
	else if(ismBand == ISM_JPN923)
    d11a:	2805      	cmp	r0, #5
    d11c:	d00c      	beq.n	d138 <LORAREG_EnableallChannels+0x28>
	{
		 InitDefault920Channels();	
	}
	else if (ismBand == ISM_KR920)
    d11e:	2804      	cmp	r0, #4
    d120:	d00d      	beq.n	d13e <LORAREG_EnableallChannels+0x2e>
	}
	else if (ismBand == ISM_ASBAND)
	{
		 InitDefault923Channels ();
	}
	else if(ismBand == ISM_AU915 || ismBand == ISM_NA915)
    d122:	3802      	subs	r0, #2
    d124:	2801      	cmp	r0, #1
    d126:	d90d      	bls.n	d144 <LORAREG_EnableallChannels+0x34>
	{
		 Enableallchannels();
	}
	return result;
}
    d128:	2008      	movs	r0, #8
    d12a:	bd10      	pop	{r4, pc}
		 InitDefault868Channels();
    d12c:	4b07      	ldr	r3, [pc, #28]	; (d14c <LORAREG_EnableallChannels+0x3c>)
    d12e:	4798      	blx	r3
    d130:	e7fa      	b.n	d128 <LORAREG_EnableallChannels+0x18>
		 InitDefault433Channels();
    d132:	4b07      	ldr	r3, [pc, #28]	; (d150 <LORAREG_EnableallChannels+0x40>)
    d134:	4798      	blx	r3
    d136:	e7f7      	b.n	d128 <LORAREG_EnableallChannels+0x18>
		 InitDefault920Channels();	
    d138:	4b06      	ldr	r3, [pc, #24]	; (d154 <LORAREG_EnableallChannels+0x44>)
    d13a:	4798      	blx	r3
    d13c:	e7f4      	b.n	d128 <LORAREG_EnableallChannels+0x18>
		 InitDefault920ChannelsKR();
    d13e:	4b06      	ldr	r3, [pc, #24]	; (d158 <LORAREG_EnableallChannels+0x48>)
    d140:	4798      	blx	r3
    d142:	e7f1      	b.n	d128 <LORAREG_EnableallChannels+0x18>
		 Enableallchannels();
    d144:	4b05      	ldr	r3, [pc, #20]	; (d15c <LORAREG_EnableallChannels+0x4c>)
    d146:	4798      	blx	r3
    d148:	e7ee      	b.n	d128 <LORAREG_EnableallChannels+0x18>
    d14a:	46c0      	nop			; (mov r8, r8)
    d14c:	0000cbe1 	.word	0x0000cbe1
    d150:	0000cce5 	.word	0x0000cce5
    d154:	0000cdd9 	.word	0x0000cdd9
    d158:	0000cef9 	.word	0x0000cef9
    d15c:	0000d0dd 	.word	0x0000d0dd

0000d160 <AESEncode>:
 * \brief Encrypts the given block of data
 * \param[in,out] block Block of input data to be encrypted
 * \param[in] key Cryptographic key to be used in AES encryption
 */
void AESEncode(unsigned char* block, unsigned char* masterKey)
{
    d160:	b5f0      	push	{r4, r5, r6, r7, lr}
    d162:	b083      	sub	sp, #12
    d164:	0004      	movs	r4, r0
    d166:	000e      	movs	r6, r1
#ifndef UT	
	
	/* Configure the AES. */
	g_aes_cfg.encrypt_mode = AES_ENCRYPTION;
    d168:	4a2b      	ldr	r2, [pc, #172]	; (d218 <AESEncode+0xb8>)
    d16a:	2101      	movs	r1, #1
    d16c:	7011      	strb	r1, [r2, #0]
	g_aes_cfg.key_size = AES_KEY_SIZE_128;
    d16e:	2300      	movs	r3, #0
    d170:	7053      	strb	r3, [r2, #1]
	g_aes_cfg.start_mode = AES_AUTO_START;
    d172:	7091      	strb	r1, [r2, #2]
	g_aes_cfg.opmode = AES_ECB_MODE;
    d174:	70d3      	strb	r3, [r2, #3]
	g_aes_cfg.cfb_size = AES_CFB_SIZE_128;
    d176:	7113      	strb	r3, [r2, #4]
	g_aes_cfg.lod = false;
    d178:	7213      	strb	r3, [r2, #8]
	aes_set_config(&aes_instance,AES, &g_aes_cfg);
    d17a:	4928      	ldr	r1, [pc, #160]	; (d21c <AESEncode+0xbc>)
    d17c:	4828      	ldr	r0, [pc, #160]	; (d220 <AESEncode+0xc0>)
    d17e:	4b29      	ldr	r3, [pc, #164]	; (d224 <AESEncode+0xc4>)
    d180:	4798      	blx	r3
    d182:	2100      	movs	r1, #0
		uint8_t u8[4];
	}long_addr;
	uint8_t index;
	for (index = 0; index < 4; index++)
	{
		long_addr.u8[index] = *data++;
    d184:	ad01      	add	r5, sp, #4
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(masterKey+(i*(sizeof(uint32_t))));
    d186:	4f28      	ldr	r7, [pc, #160]	; (d228 <AESEncode+0xc8>)
    d188:	1870      	adds	r0, r6, r1
    d18a:	2300      	movs	r3, #0
    d18c:	5cc2      	ldrb	r2, [r0, r3]
    d18e:	555a      	strb	r2, [r3, r5]
    d190:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    d192:	2b04      	cmp	r3, #4
    d194:	d1fa      	bne.n	d18c <AESEncode+0x2c>
    d196:	9b01      	ldr	r3, [sp, #4]
    d198:	51cb      	str	r3, [r1, r7]
    d19a:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    d19c:	2910      	cmp	r1, #16
    d19e:	d1f3      	bne.n	d188 <AESEncode+0x28>
	}
	
	/* Set the cryptographic key. */
	aes_write_key(&aes_instance, io_data);
    d1a0:	4d1f      	ldr	r5, [pc, #124]	; (d220 <AESEncode+0xc0>)
    d1a2:	4921      	ldr	r1, [pc, #132]	; (d228 <AESEncode+0xc8>)
    d1a4:	0028      	movs	r0, r5
    d1a6:	4b21      	ldr	r3, [pc, #132]	; (d22c <AESEncode+0xcc>)
    d1a8:	4798      	blx	r3
 */
static inline void aes_set_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg |= AES_CTRLB_NEWMSG;
    d1aa:	682a      	ldr	r2, [r5, #0]
    d1ac:	7913      	ldrb	r3, [r2, #4]
    d1ae:	2102      	movs	r1, #2
    d1b0:	430b      	orrs	r3, r1
    d1b2:	7113      	strb	r3, [r2, #4]
    d1b4:	2100      	movs	r1, #0
		long_addr.u8[index] = *data++;
    d1b6:	ad01      	add	r5, sp, #4
	
	aes_set_new_message(&aes_instance);
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(block+(i*(sizeof(uint32_t))));			
    d1b8:	4e1b      	ldr	r6, [pc, #108]	; (d228 <AESEncode+0xc8>)
    d1ba:	1860      	adds	r0, r4, r1
    d1bc:	2300      	movs	r3, #0
    d1be:	5cc2      	ldrb	r2, [r0, r3]
    d1c0:	555a      	strb	r2, [r3, r5]
    d1c2:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    d1c4:	2b04      	cmp	r3, #4
    d1c6:	d1fa      	bne.n	d1be <AESEncode+0x5e>
    d1c8:	9b01      	ldr	r3, [sp, #4]
    d1ca:	518b      	str	r3, [r1, r6]
    d1cc:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    d1ce:	2910      	cmp	r1, #16
    d1d0:	d1f3      	bne.n	d1ba <AESEncode+0x5a>
	}
		
	/* Write the data to be ciphered to the input data registers. */
	aes_write_input_data(&aes_instance, io_data);
    d1d2:	4d13      	ldr	r5, [pc, #76]	; (d220 <AESEncode+0xc0>)
    d1d4:	4914      	ldr	r1, [pc, #80]	; (d228 <AESEncode+0xc8>)
    d1d6:	0028      	movs	r0, r5
    d1d8:	4b15      	ldr	r3, [pc, #84]	; (d230 <AESEncode+0xd0>)
    d1da:	4798      	blx	r3
 */
static inline void aes_clear_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg &= ~AES_CTRLB_NEWMSG;
    d1dc:	682d      	ldr	r5, [r5, #0]
    d1de:	792b      	ldrb	r3, [r5, #4]
    d1e0:	2202      	movs	r2, #2
    d1e2:	4393      	bics	r3, r2
    d1e4:	712b      	strb	r3, [r5, #4]
	Assert(module->hw);

	uint32_t int_flags = module->hw->INTFLAG.reg;
	uint32_t status_flags = 0;

	if (int_flags & AES_INTFLAG_ENCCMP) {
    d1e6:	2101      	movs	r1, #1
		status_flags |= AES_ENCRYPTION_COMPLETE;
	}

	if (int_flags & AES_INTFLAG_GFMCMP) {
    d1e8:	2002      	movs	r0, #2
    d1ea:	e001      	b.n	d1f0 <AESEncode+0x90>
	aes_clear_new_message(&aes_instance);
	/* Wait for the end of the encryption process. */
	while (!(aes_get_status(&aes_instance) & AES_ENCRYPTION_COMPLETE)) {
    d1ec:	4211      	tst	r1, r2
    d1ee:	d107      	bne.n	d200 <AESEncode+0xa0>
	uint32_t int_flags = module->hw->INTFLAG.reg;
    d1f0:	79eb      	ldrb	r3, [r5, #7]
    d1f2:	b2db      	uxtb	r3, r3
	if (int_flags & AES_INTFLAG_ENCCMP) {
    d1f4:	000a      	movs	r2, r1
    d1f6:	401a      	ands	r2, r3
	if (int_flags & AES_INTFLAG_GFMCMP) {
    d1f8:	4218      	tst	r0, r3
    d1fa:	d0f7      	beq.n	d1ec <AESEncode+0x8c>
		status_flags |= AES_GF_MULTI_COMPLETE;
    d1fc:	4302      	orrs	r2, r0
    d1fe:	e7f5      	b.n	d1ec <AESEncode+0x8c>
	}
	aes_read_output_data(&aes_instance,io_data);
    d200:	4d09      	ldr	r5, [pc, #36]	; (d228 <AESEncode+0xc8>)
    d202:	0029      	movs	r1, r5
    d204:	4806      	ldr	r0, [pc, #24]	; (d220 <AESEncode+0xc0>)
    d206:	4b0b      	ldr	r3, [pc, #44]	; (d234 <AESEncode+0xd4>)
    d208:	4798      	blx	r3
	
	memcpy(block,io_data,BLOCKSIZE);
    d20a:	2210      	movs	r2, #16
    d20c:	0029      	movs	r1, r5
    d20e:	0020      	movs	r0, r4
    d210:	4b09      	ldr	r3, [pc, #36]	; (d238 <AESEncode+0xd8>)
    d212:	4798      	blx	r3
#endif	
}
    d214:	b003      	add	sp, #12
    d216:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d218:	20002bc8 	.word	0x20002bc8
    d21c:	42003400 	.word	0x42003400
    d220:	20002bd4 	.word	0x20002bd4
    d224:	00004681 	.word	0x00004681
    d228:	20001e68 	.word	0x20001e68
    d22c:	00004715 	.word	0x00004715
    d230:	00004749 	.word	0x00004749
    d234:	00004799 	.word	0x00004799
    d238:	00016c47 	.word	0x00016c47

0000d23c <AESInit>:

/**
 * \brief Initializes the AES Engine.
 */
void AESInit(void)
{
    d23c:	b570      	push	{r4, r5, r6, lr}
#ifndef UT	
	//! [setup_config]
	aes_get_config_defaults(&g_aes_cfg);
    d23e:	4d07      	ldr	r5, [pc, #28]	; (d25c <AESInit+0x20>)
    d240:	0028      	movs	r0, r5
    d242:	4b07      	ldr	r3, [pc, #28]	; (d260 <AESInit+0x24>)
    d244:	4798      	blx	r3
	//! [setup_config]

	//! [setup_config_defaults]
	aes_init(&aes_instance,AES, &g_aes_cfg);
    d246:	4c07      	ldr	r4, [pc, #28]	; (d264 <AESInit+0x28>)
    d248:	002a      	movs	r2, r5
    d24a:	4907      	ldr	r1, [pc, #28]	; (d268 <AESInit+0x2c>)
    d24c:	0020      	movs	r0, r4
    d24e:	4b07      	ldr	r3, [pc, #28]	; (d26c <AESInit+0x30>)
    d250:	4798      	blx	r3
	//! [setup_config_defaults]
	//! [module_enable]
	aes_enable(&aes_instance);
    d252:	0020      	movs	r0, r4
    d254:	4b06      	ldr	r3, [pc, #24]	; (d270 <AESInit+0x34>)
    d256:	4798      	blx	r3
#endif	
}
    d258:	bd70      	pop	{r4, r5, r6, pc}
    d25a:	46c0      	nop			; (mov r8, r8)
    d25c:	20002bc8 	.word	0x20002bc8
    d260:	00004645 	.word	0x00004645
    d264:	20002bd4 	.word	0x20002bd4
    d268:	42003400 	.word	0x42003400
    d26c:	000046f5 	.word	0x000046f5
    d270:	0000465f 	.word	0x0000465f

0000d274 <hwTimerExpiryCallback>:
	SYS_HwOverflow_Cb();
}

/* ISR to handle CC0 interrupt from TC0 */
static void hwTimerExpiryCallback(void)
{
    d274:	b510      	push	{r4, lr}
    if (0 < runningTimers)
    d276:	4b06      	ldr	r3, [pc, #24]	; (d290 <hwTimerExpiryCallback+0x1c>)
    d278:	781b      	ldrb	r3, [r3, #0]
    d27a:	2b00      	cmp	r3, #0
    d27c:	d100      	bne.n	d280 <hwTimerExpiryCallback+0xc>
    {
        isTimerTriggered = true;
        SYSTEM_PostTask(TIMER_TASK_ID);
    }
}
    d27e:	bd10      	pop	{r4, pc}
        isTimerTriggered = true;
    d280:	2201      	movs	r2, #1
    d282:	4b04      	ldr	r3, [pc, #16]	; (d294 <hwTimerExpiryCallback+0x20>)
    d284:	701a      	strb	r2, [r3, #0]
        SYSTEM_PostTask(TIMER_TASK_ID);
    d286:	2001      	movs	r0, #1
    d288:	4b03      	ldr	r3, [pc, #12]	; (d298 <hwTimerExpiryCallback+0x24>)
    d28a:	4798      	blx	r3
}
    d28c:	e7f7      	b.n	d27e <hwTimerExpiryCallback+0xa>
    d28e:	46c0      	nop			; (mov r8, r8)
    d290:	20001e88 	.word	0x20001e88
    d294:	20002d82 	.word	0x20002d82
    d298:	0000db91 	.word	0x0000db91

0000d29c <hwTimerOverflowCallback>:
{
    d29c:	b510      	push	{r4, lr}
    d29e:	b082      	sub	sp, #8
    uint16_t temp = sysTime;
    d2a0:	4925      	ldr	r1, [pc, #148]	; (d338 <hwTimerOverflowCallback+0x9c>)
    d2a2:	880a      	ldrh	r2, [r1, #0]
    d2a4:	b292      	uxth	r2, r2
    if (++sysTime < temp)
    d2a6:	880b      	ldrh	r3, [r1, #0]
    d2a8:	3301      	adds	r3, #1
    d2aa:	b29b      	uxth	r3, r3
    d2ac:	800b      	strh	r3, [r1, #0]
    d2ae:	429a      	cmp	r2, r3
    d2b0:	d903      	bls.n	d2ba <hwTimerOverflowCallback+0x1e>
        sysTimeOvf++;
    d2b2:	4a22      	ldr	r2, [pc, #136]	; (d33c <hwTimerOverflowCallback+0xa0>)
    d2b4:	6813      	ldr	r3, [r2, #0]
    d2b6:	3301      	adds	r3, #1
    d2b8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    d2ba:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d2be:	425a      	negs	r2, r3
    d2c0:	4153      	adcs	r3, r2
    d2c2:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    d2c4:	b672      	cpsid	i
    d2c6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d2ca:	2200      	movs	r2, #0
    d2cc:	4b1c      	ldr	r3, [pc, #112]	; (d340 <hwTimerOverflowCallback+0xa4>)
    d2ce:	701a      	strb	r2, [r3, #0]
	return flags;
    d2d0:	9c01      	ldr	r4, [sp, #4]
{
    uint32_t tmo32;
    uint16_t tmoHigh16, tmoLow16;
    uint8_t flags = cpu_irq_save();

    if (SWTIMER_INVALID != runningTimerQueueHead && !swTimers[runningTimerQueueHead].loaded)
    d2d2:	4b1c      	ldr	r3, [pc, #112]	; (d344 <hwTimerOverflowCallback+0xa8>)
    d2d4:	681b      	ldr	r3, [r3, #0]
    d2d6:	2bff      	cmp	r3, #255	; 0xff
    d2d8:	d00d      	beq.n	d2f6 <hwTimerOverflowCallback+0x5a>
    d2da:	0119      	lsls	r1, r3, #4
    d2dc:	4a1a      	ldr	r2, [pc, #104]	; (d348 <hwTimerOverflowCallback+0xac>)
    d2de:	1852      	adds	r2, r2, r1
    d2e0:	7b52      	ldrb	r2, [r2, #13]
    d2e2:	2a00      	cmp	r2, #0
    d2e4:	d107      	bne.n	d2f6 <hwTimerOverflowCallback+0x5a>
    {
        tmo32 = swTimers[runningTimerQueueHead].absoluteExpiryTime;
    d2e6:	4a18      	ldr	r2, [pc, #96]	; (d348 <hwTimerOverflowCallback+0xac>)
    d2e8:	5888      	ldr	r0, [r1, r2]
        tmoHigh16 = (uint16_t)(tmo32 >> SWTIMER_SYSTIME_SHIFTMASK);

        if (tmoHigh16 == sysTime)
    d2ea:	4b13      	ldr	r3, [pc, #76]	; (d338 <hwTimerOverflowCallback+0x9c>)
    d2ec:	881b      	ldrh	r3, [r3, #0]
    d2ee:	b29b      	uxth	r3, r3
    d2f0:	0c02      	lsrs	r2, r0, #16
    d2f2:	429a      	cmp	r2, r3
    d2f4:	d00c      	beq.n	d310 <hwTimerOverflowCallback+0x74>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    d2f6:	23ff      	movs	r3, #255	; 0xff
    d2f8:	4223      	tst	r3, r4
    d2fa:	d005      	beq.n	d308 <hwTimerOverflowCallback+0x6c>
		cpu_irq_enable();
    d2fc:	2201      	movs	r2, #1
    d2fe:	4b10      	ldr	r3, [pc, #64]	; (d340 <hwTimerOverflowCallback+0xa4>)
    d300:	701a      	strb	r2, [r3, #0]
    d302:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d306:	b662      	cpsie	i
	SYS_HwOverflow_Cb();
    d308:	4b10      	ldr	r3, [pc, #64]	; (d34c <hwTimerOverflowCallback+0xb0>)
    d30a:	4798      	blx	r3
}
    d30c:	b002      	add	sp, #8
    d30e:	bd10      	pop	{r4, pc}
        {
            tmoLow16 = (uint16_t)(tmo32 & SWTIMER_HWTIME_MASK);
    d310:	b280      	uxth	r0, r0
            if (SWTIMER_MIN_TIMEOUT < tmoLow16)
    d312:	28ff      	cmp	r0, #255	; 0xff
    d314:	d909      	bls.n	d32a <hwTimerOverflowCallback+0x8e>
            {
                common_tc_delay(tmoLow16);
    d316:	4b0e      	ldr	r3, [pc, #56]	; (d350 <hwTimerOverflowCallback+0xb4>)
    d318:	4798      	blx	r3
                swTimers[runningTimerQueueHead].loaded = true;
    d31a:	4b0a      	ldr	r3, [pc, #40]	; (d344 <hwTimerOverflowCallback+0xa8>)
    d31c:	681a      	ldr	r2, [r3, #0]
    d31e:	0112      	lsls	r2, r2, #4
    d320:	4b09      	ldr	r3, [pc, #36]	; (d348 <hwTimerOverflowCallback+0xac>)
    d322:	189b      	adds	r3, r3, r2
    d324:	2201      	movs	r2, #1
    d326:	735a      	strb	r2, [r3, #13]
    d328:	e7e5      	b.n	d2f6 <hwTimerOverflowCallback+0x5a>
            }
            else
            {
                isTimerTriggered = true;
    d32a:	2201      	movs	r2, #1
    d32c:	4b09      	ldr	r3, [pc, #36]	; (d354 <hwTimerOverflowCallback+0xb8>)
    d32e:	701a      	strb	r2, [r3, #0]
                SYSTEM_PostTask(TIMER_TASK_ID);
    d330:	2001      	movs	r0, #1
    d332:	4b09      	ldr	r3, [pc, #36]	; (d358 <hwTimerOverflowCallback+0xbc>)
    d334:	4798      	blx	r3
    d336:	e7de      	b.n	d2f6 <hwTimerOverflowCallback+0x5a>
    d338:	20002d80 	.word	0x20002d80
    d33c:	20002d84 	.word	0x20002d84
    d340:	20000008 	.word	0x20000008
    d344:	20001e84 	.word	0x20001e84
    d348:	20002bf0 	.word	0x20002bf0
    d34c:	0000c331 	.word	0x0000c331
    d350:	000138a1 	.word	0x000138a1
    d354:	20002d82 	.word	0x20002d82
    d358:	0000db91 	.word	0x0000db91

0000d35c <loadHwTimer>:
{
    d35c:	b570      	push	{r4, r5, r6, lr}
    d35e:	0004      	movs	r4, r0
    if (SWTIMER_INVALID != timerId)
    d360:	28ff      	cmp	r0, #255	; 0xff
    d362:	d030      	beq.n	d3c6 <loadHwTimer+0x6a>
    time |= ((uint64_t) sysTimeOvf) << 32;
    d364:	4b19      	ldr	r3, [pc, #100]	; (d3cc <loadHwTimer+0x70>)
    d366:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    d368:	4b19      	ldr	r3, [pc, #100]	; (d3d0 <loadHwTimer+0x74>)
    d36a:	881d      	ldrh	r5, [r3, #0]
    d36c:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    d36e:	4b19      	ldr	r3, [pc, #100]	; (d3d4 <loadHwTimer+0x78>)
    d370:	4798      	blx	r3
        uint32_t expiryTime = swTimers[timerId].absoluteExpiryTime;
    d372:	0123      	lsls	r3, r4, #4
    time |= (uint64_t) common_tc_read_count();
    d374:	4328      	orrs	r0, r5
    return ((t2 - t1) < INT32_MAX);
    d376:	4a18      	ldr	r2, [pc, #96]	; (d3d8 <loadHwTimer+0x7c>)
    d378:	589b      	ldr	r3, [r3, r2]
    d37a:	1a18      	subs	r0, r3, r0
        if (swtimerCompareTime(now, expiryTime))
    d37c:	4b17      	ldr	r3, [pc, #92]	; (d3dc <loadHwTimer+0x80>)
    d37e:	4298      	cmp	r0, r3
    d380:	d81a      	bhi.n	d3b8 <loadHwTimer+0x5c>
            if (!swTimers[timerId].loaded)
    d382:	0122      	lsls	r2, r4, #4
    d384:	4b14      	ldr	r3, [pc, #80]	; (d3d8 <loadHwTimer+0x7c>)
    d386:	189b      	adds	r3, r3, r2
    d388:	7b5b      	ldrb	r3, [r3, #13]
    d38a:	2b00      	cmp	r3, #0
    d38c:	d11d      	bne.n	d3ca <loadHwTimer+0x6e>
                if (SWTIMER_MIN_TIMEOUT >= timeDiff)
    d38e:	28ff      	cmp	r0, #255	; 0xff
    d390:	d90b      	bls.n	d3aa <loadHwTimer+0x4e>
                else  if ((uint32_t)TIMER_PERIOD >= timeDiff)
    d392:	4b13      	ldr	r3, [pc, #76]	; (d3e0 <loadHwTimer+0x84>)
    d394:	4298      	cmp	r0, r3
    d396:	d818      	bhi.n	d3ca <loadHwTimer+0x6e>
                    common_tc_delay((uint16_t)timeDiff);
    d398:	b280      	uxth	r0, r0
    d39a:	4b12      	ldr	r3, [pc, #72]	; (d3e4 <loadHwTimer+0x88>)
    d39c:	4798      	blx	r3
                    swTimers[timerId].loaded = true;
    d39e:	0124      	lsls	r4, r4, #4
    d3a0:	4b0d      	ldr	r3, [pc, #52]	; (d3d8 <loadHwTimer+0x7c>)
    d3a2:	191c      	adds	r4, r3, r4
    d3a4:	2301      	movs	r3, #1
    d3a6:	7363      	strb	r3, [r4, #13]
    d3a8:	e00f      	b.n	d3ca <loadHwTimer+0x6e>
                    isTimerTriggered = true;
    d3aa:	2201      	movs	r2, #1
    d3ac:	4b0e      	ldr	r3, [pc, #56]	; (d3e8 <loadHwTimer+0x8c>)
    d3ae:	701a      	strb	r2, [r3, #0]
                    SYSTEM_PostTask(TIMER_TASK_ID);
    d3b0:	2001      	movs	r0, #1
    d3b2:	4b0e      	ldr	r3, [pc, #56]	; (d3ec <loadHwTimer+0x90>)
    d3b4:	4798      	blx	r3
    d3b6:	e008      	b.n	d3ca <loadHwTimer+0x6e>
            isTimerTriggered = true;
    d3b8:	2201      	movs	r2, #1
    d3ba:	4b0b      	ldr	r3, [pc, #44]	; (d3e8 <loadHwTimer+0x8c>)
    d3bc:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    d3be:	2001      	movs	r0, #1
    d3c0:	4b0a      	ldr	r3, [pc, #40]	; (d3ec <loadHwTimer+0x90>)
    d3c2:	4798      	blx	r3
    d3c4:	e001      	b.n	d3ca <loadHwTimer+0x6e>
        common_tc_compare_stop();
    d3c6:	4b0a      	ldr	r3, [pc, #40]	; (d3f0 <loadHwTimer+0x94>)
    d3c8:	4798      	blx	r3
}
    d3ca:	bd70      	pop	{r4, r5, r6, pc}
    d3cc:	20002d84 	.word	0x20002d84
    d3d0:	20002d80 	.word	0x20002d80
    d3d4:	0001382d 	.word	0x0001382d
    d3d8:	20002bf0 	.word	0x20002bf0
    d3dc:	7ffffffe 	.word	0x7ffffffe
    d3e0:	0000ffff 	.word	0x0000ffff
    d3e4:	000138a1 	.word	0x000138a1
    d3e8:	20002d82 	.word	0x20002d82
    d3ec:	0000db91 	.word	0x0000db91
    d3f0:	00013879 	.word	0x00013879

0000d3f4 <swtimerInternalHandler>:

/**************************************************************************//**
\brief Internal handler for the timer trigger
******************************************************************************/
static void swtimerInternalHandler(void)
{
    d3f4:	b510      	push	{r4, lr}
    if (isTimerTriggered)
    d3f6:	4b1d      	ldr	r3, [pc, #116]	; (d46c <swtimerInternalHandler+0x78>)
    d3f8:	781b      	ldrb	r3, [r3, #0]
    d3fa:	2b00      	cmp	r3, #0
    d3fc:	d027      	beq.n	d44e <swtimerInternalHandler+0x5a>
    {
        isTimerTriggered = false;
    d3fe:	2200      	movs	r2, #0
    d400:	4b1a      	ldr	r3, [pc, #104]	; (d46c <swtimerInternalHandler+0x78>)
    d402:	701a      	strb	r2, [r3, #0]

        if (0 < runningTimers)
    d404:	4b1a      	ldr	r3, [pc, #104]	; (d470 <swtimerInternalHandler+0x7c>)
    d406:	781b      	ldrb	r3, [r3, #0]
    d408:	2b00      	cmp	r3, #0
    d40a:	d020      	beq.n	d44e <swtimerInternalHandler+0x5a>
        { /* Holds the number of running timers */
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    d40c:	4b19      	ldr	r3, [pc, #100]	; (d474 <swtimerInternalHandler+0x80>)
    d40e:	681b      	ldr	r3, [r3, #0]
    d410:	2bff      	cmp	r3, #255	; 0xff
    d412:	d01d      	beq.n	d450 <swtimerInternalHandler+0x5c>
                expiredTimerQueueHead = runningTimerQueueHead;
                expiredTimerQueueTail = runningTimerQueueHead;
            }
            else
            { /* there were already some timers expired before this one */
                swTimers[expiredTimerQueueTail].nextTimer = runningTimerQueueHead;
    d414:	4b18      	ldr	r3, [pc, #96]	; (d478 <swtimerInternalHandler+0x84>)
    d416:	6818      	ldr	r0, [r3, #0]
    d418:	4918      	ldr	r1, [pc, #96]	; (d47c <swtimerInternalHandler+0x88>)
    d41a:	680b      	ldr	r3, [r1, #0]
    d41c:	011a      	lsls	r2, r3, #4
    d41e:	4b18      	ldr	r3, [pc, #96]	; (d480 <swtimerInternalHandler+0x8c>)
    d420:	189b      	adds	r3, r3, r2
    d422:	7318      	strb	r0, [r3, #12]
                expiredTimerQueueTail = runningTimerQueueHead;
    d424:	6008      	str	r0, [r1, #0]
            }

            runningTimerQueueHead = swTimers[runningTimerQueueHead].nextTimer;
    d426:	4a16      	ldr	r2, [pc, #88]	; (d480 <swtimerInternalHandler+0x8c>)
    d428:	4913      	ldr	r1, [pc, #76]	; (d478 <swtimerInternalHandler+0x84>)
    d42a:	680b      	ldr	r3, [r1, #0]
    d42c:	011b      	lsls	r3, r3, #4
    d42e:	18d3      	adds	r3, r2, r3
    d430:	7b18      	ldrb	r0, [r3, #12]
    d432:	6008      	str	r0, [r1, #0]

            swTimers[expiredTimerQueueTail].nextTimer = SWTIMER_INVALID;
    d434:	4b11      	ldr	r3, [pc, #68]	; (d47c <swtimerInternalHandler+0x88>)
    d436:	681b      	ldr	r3, [r3, #0]
    d438:	011b      	lsls	r3, r3, #4
    d43a:	18d2      	adds	r2, r2, r3
    d43c:	23ff      	movs	r3, #255	; 0xff
    d43e:	7313      	strb	r3, [r2, #12]

            if ((--runningTimers) > 0)
    d440:	4a0b      	ldr	r2, [pc, #44]	; (d470 <swtimerInternalHandler+0x7c>)
    d442:	7813      	ldrb	r3, [r2, #0]
    d444:	3b01      	subs	r3, #1
    d446:	b2db      	uxtb	r3, r3
    d448:	7013      	strb	r3, [r2, #0]
    d44a:	2b00      	cmp	r3, #0
    d44c:	d10b      	bne.n	d466 <swtimerInternalHandler+0x72>
            { /* keep the ball rolling! load the next head timer from the queue */
                loadHwTimer(runningTimerQueueHead);
            }
        }
    }
}
    d44e:	bd10      	pop	{r4, pc}
                (expiredTimerQueueTail == SWTIMER_INVALID))
    d450:	4b0a      	ldr	r3, [pc, #40]	; (d47c <swtimerInternalHandler+0x88>)
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    d452:	681b      	ldr	r3, [r3, #0]
    d454:	2bff      	cmp	r3, #255	; 0xff
    d456:	d1dd      	bne.n	d414 <swtimerInternalHandler+0x20>
                expiredTimerQueueHead = runningTimerQueueHead;
    d458:	4b07      	ldr	r3, [pc, #28]	; (d478 <swtimerInternalHandler+0x84>)
    d45a:	681b      	ldr	r3, [r3, #0]
    d45c:	4a05      	ldr	r2, [pc, #20]	; (d474 <swtimerInternalHandler+0x80>)
    d45e:	6013      	str	r3, [r2, #0]
                expiredTimerQueueTail = runningTimerQueueHead;
    d460:	4a06      	ldr	r2, [pc, #24]	; (d47c <swtimerInternalHandler+0x88>)
    d462:	6013      	str	r3, [r2, #0]
    d464:	e7df      	b.n	d426 <swtimerInternalHandler+0x32>
                loadHwTimer(runningTimerQueueHead);
    d466:	4b07      	ldr	r3, [pc, #28]	; (d484 <swtimerInternalHandler+0x90>)
    d468:	4798      	blx	r3
}
    d46a:	e7f0      	b.n	d44e <swtimerInternalHandler+0x5a>
    d46c:	20002d82 	.word	0x20002d82
    d470:	20001e88 	.word	0x20001e88
    d474:	20001e7c 	.word	0x20001e7c
    d478:	20001e84 	.word	0x20001e84
    d47c:	20001e80 	.word	0x20001e80
    d480:	20002bf0 	.word	0x20002bf0
    d484:	0000d35d 	.word	0x0000d35d

0000d488 <SwTimerReset>:
    /*
    * Initialize the timer resources like timer arrays queues, timer registers
    */
    uint8_t index;

    runningTimers = 0u;
    d488:	2300      	movs	r3, #0
    d48a:	4a0d      	ldr	r2, [pc, #52]	; (d4c0 <SwTimerReset+0x38>)
    d48c:	7013      	strb	r3, [r2, #0]
    isTimerTriggered = false;
    d48e:	4a0d      	ldr	r2, [pc, #52]	; (d4c4 <SwTimerReset+0x3c>)
    d490:	7013      	strb	r3, [r2, #0]

    runningTimerQueueHead = SWTIMER_INVALID;
    d492:	33ff      	adds	r3, #255	; 0xff
    d494:	4a0c      	ldr	r2, [pc, #48]	; (d4c8 <SwTimerReset+0x40>)
    d496:	6013      	str	r3, [r2, #0]
    expiredTimerQueueHead = SWTIMER_INVALID;
    d498:	4a0c      	ldr	r2, [pc, #48]	; (d4cc <SwTimerReset+0x44>)
    d49a:	6013      	str	r3, [r2, #0]
    expiredTimerQueueTail = SWTIMER_INVALID;
    d49c:	4a0c      	ldr	r2, [pc, #48]	; (d4d0 <SwTimerReset+0x48>)
    d49e:	6013      	str	r3, [r2, #0]
    d4a0:	4b0c      	ldr	r3, [pc, #48]	; (d4d4 <SwTimerReset+0x4c>)
    d4a2:	0018      	movs	r0, r3
    d4a4:	3091      	adds	r0, #145	; 0x91
    d4a6:	30ff      	adds	r0, #255	; 0xff

    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    {
        swTimers[index].nextTimer = SWTIMER_INVALID;
    d4a8:	21ff      	movs	r1, #255	; 0xff
        swTimers[index].timerCb = NULL;
    d4aa:	2200      	movs	r2, #0
        swTimers[index].nextTimer = SWTIMER_INVALID;
    d4ac:	7219      	strb	r1, [r3, #8]
        swTimers[index].timerCb = NULL;
    d4ae:	601a      	str	r2, [r3, #0]
    d4b0:	3310      	adds	r3, #16
    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    d4b2:	4283      	cmp	r3, r0
    d4b4:	d1fa      	bne.n	d4ac <SwTimerReset+0x24>
    }

    allocatedTimerId = 0u;
    d4b6:	2200      	movs	r2, #0
    d4b8:	4b07      	ldr	r3, [pc, #28]	; (d4d8 <SwTimerReset+0x50>)
    d4ba:	701a      	strb	r2, [r3, #0]
}
    d4bc:	4770      	bx	lr
    d4be:	46c0      	nop			; (mov r8, r8)
    d4c0:	20001e88 	.word	0x20001e88
    d4c4:	20002d82 	.word	0x20002d82
    d4c8:	20001e84 	.word	0x20001e84
    d4cc:	20001e7c 	.word	0x20001e7c
    d4d0:	20001e80 	.word	0x20001e80
    d4d4:	20002bf4 	.word	0x20002bf4
    d4d8:	20001e78 	.word	0x20001e78

0000d4dc <SystemTimerInit>:

/**************************************************************************//**
\brief Initializes the Software Timer module
******************************************************************************/
void SystemTimerInit(void)
{
    d4dc:	b510      	push	{r4, lr}
    SwTimerReset();
    d4de:	4b08      	ldr	r3, [pc, #32]	; (d500 <SystemTimerInit+0x24>)
    d4e0:	4798      	blx	r3

    /* initialize system time parameters */
    sysTimeOvf = 0x00000000;
    d4e2:	2300      	movs	r3, #0
    d4e4:	4a07      	ldr	r2, [pc, #28]	; (d504 <SystemTimerInit+0x28>)
    d4e6:	6013      	str	r3, [r2, #0]
    sysTime = 0x0000;
    d4e8:	4a07      	ldr	r2, [pc, #28]	; (d508 <SystemTimerInit+0x2c>)
    d4ea:	8013      	strh	r3, [r2, #0]

    common_tc_init();
    d4ec:	4b07      	ldr	r3, [pc, #28]	; (d50c <SystemTimerInit+0x30>)
    d4ee:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    d4f0:	4807      	ldr	r0, [pc, #28]	; (d510 <SystemTimerInit+0x34>)
    d4f2:	4b08      	ldr	r3, [pc, #32]	; (d514 <SystemTimerInit+0x38>)
    d4f4:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    d4f6:	4808      	ldr	r0, [pc, #32]	; (d518 <SystemTimerInit+0x3c>)
    d4f8:	4b08      	ldr	r3, [pc, #32]	; (d51c <SystemTimerInit+0x40>)
    d4fa:	4798      	blx	r3
}
    d4fc:	bd10      	pop	{r4, pc}
    d4fe:	46c0      	nop			; (mov r8, r8)
    d500:	0000d489 	.word	0x0000d489
    d504:	20002d84 	.word	0x20002d84
    d508:	20002d80 	.word	0x20002d80
    d50c:	0001390d 	.word	0x0001390d
    d510:	0000d29d 	.word	0x0000d29d
    d514:	00013991 	.word	0x00013991
    d518:	0000d275 	.word	0x0000d275
    d51c:	0001399d 	.word	0x0001399d

0000d520 <SwTimerGetTime>:
/**************************************************************************//**
\brief Get current system time.
\return Returns current system time in microseconds
******************************************************************************/
uint64_t SwTimerGetTime(void)
{
    d520:	b570      	push	{r4, r5, r6, lr}
    time |= ((uint64_t) sysTimeOvf) << 32;
    d522:	4b05      	ldr	r3, [pc, #20]	; (d538 <SwTimerGetTime+0x18>)
    d524:	681c      	ldr	r4, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    d526:	4b05      	ldr	r3, [pc, #20]	; (d53c <SwTimerGetTime+0x1c>)
    d528:	881d      	ldrh	r5, [r3, #0]
    d52a:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    d52c:	4b04      	ldr	r3, [pc, #16]	; (d540 <SwTimerGetTime+0x20>)
    d52e:	4798      	blx	r3
    d530:	4328      	orrs	r0, r5
    return gettime();
}
    d532:	0021      	movs	r1, r4
    d534:	bd70      	pop	{r4, r5, r6, pc}
    d536:	46c0      	nop			; (mov r8, r8)
    d538:	20002d84 	.word	0x20002d84
    d53c:	20002d80 	.word	0x20002d80
    d540:	0001382d 	.word	0x0001382d

0000d544 <SwTimerCreate>:

\return LORAWAN_SUCCESS if new timerId is allocated
        LORAWAN_RESOURCE_UNAVAILABLE if there is no more timerId to allocate
******************************************************************************/
StackRetStatus_t SwTimerCreate(uint8_t *timerId)
{
    d544:	b510      	push	{r4, lr}
    d546:	0004      	movs	r4, r0
    StackRetStatus_t retVal = LORAWAN_SUCCESS;

    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    d548:	4b08      	ldr	r3, [pc, #32]	; (d56c <SwTimerCreate+0x28>)
    d54a:	781b      	ldrb	r3, [r3, #0]
        * If you reach this spot it means the TOTAL_NUMBER_OF_SW_TIMERS
        * is #defined to a lower value than the number of timers that have
        * been SwTimerCreate()
        */
        SYS_ASSERT_FATAL(ASSERT_HAL_TIMERID_EXHAUSTED);
        retVal = LORAWAN_RESOURCE_UNAVAILABLE;
    d54c:	2014      	movs	r0, #20
    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    d54e:	2b18      	cmp	r3, #24
    d550:	d900      	bls.n	d554 <SwTimerCreate+0x10>
    }

    return retVal;
}
    d552:	bd10      	pop	{r4, pc}
        ATOMIC_SECTION_ENTER
    d554:	4b06      	ldr	r3, [pc, #24]	; (d570 <SwTimerCreate+0x2c>)
    d556:	4798      	blx	r3
        *timerId = allocatedTimerId;
    d558:	4a04      	ldr	r2, [pc, #16]	; (d56c <SwTimerCreate+0x28>)
    d55a:	7813      	ldrb	r3, [r2, #0]
    d55c:	7023      	strb	r3, [r4, #0]
        allocatedTimerId++;
    d55e:	3301      	adds	r3, #1
    d560:	7013      	strb	r3, [r2, #0]
        ATOMIC_SECTION_EXIT
    d562:	4b04      	ldr	r3, [pc, #16]	; (d574 <SwTimerCreate+0x30>)
    d564:	4798      	blx	r3
    StackRetStatus_t retVal = LORAWAN_SUCCESS;
    d566:	2008      	movs	r0, #8
    d568:	e7f3      	b.n	d552 <SwTimerCreate+0xe>
    d56a:	46c0      	nop			; (mov r8, r8)
    d56c:	20001e78 	.word	0x20001e78
    d570:	0000cb45 	.word	0x0000cb45
    d574:	0000cb51 	.word	0x0000cb51

0000d578 <SwTimerStart>:
        LORAWAN_INVALID_REQUEST if \timerId is already running
        LORAWAN_SUCCESS if \timerId is successfully queued for running
******************************************************************************/
StackRetStatus_t SwTimerStart(uint8_t timerId, uint32_t timerCount,
    SwTimeoutType_t timeoutType, void *timerCb, void *paramCb)
{
    d578:	b5f0      	push	{r4, r5, r6, r7, lr}
    d57a:	46d6      	mov	lr, sl
    d57c:	464f      	mov	r7, r9
    d57e:	4646      	mov	r6, r8
    d580:	b5c0      	push	{r6, r7, lr}
    d582:	b084      	sub	sp, #16
    d584:	0007      	movs	r7, r0
    d586:	000d      	movs	r5, r1
    d588:	0016      	movs	r6, r2
    d58a:	001c      	movs	r4, r3
    uint32_t pointInTime;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    d58c:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    d58e:	2f18      	cmp	r7, #24
    d590:	d809      	bhi.n	d5a6 <SwTimerStart+0x2e>
    d592:	2b00      	cmp	r3, #0
    d594:	d100      	bne.n	d598 <SwTimerStart+0x20>
    d596:	e08c      	b.n	d6b2 <SwTimerStart+0x13a>
    }

    if (NULL != swTimers[timerId].timerCb)
    d598:	013a      	lsls	r2, r7, #4
    d59a:	4b52      	ldr	r3, [pc, #328]	; (d6e4 <SwTimerStart+0x16c>)
    d59c:	189b      	adds	r3, r3, r2
    d59e:	685b      	ldr	r3, [r3, #4]
        /*
        * Timer is already running if the callback function of the
        * corresponding timer index in the timer array is not NULL.
        */
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_REQUEST;
    d5a0:	300b      	adds	r0, #11
    if (NULL != swTimers[timerId].timerCb)
    d5a2:	2b00      	cmp	r3, #0
    d5a4:	d005      	beq.n	d5b2 <SwTimerStart+0x3a>
        }
    }

    swtimerStartAbsoluteTimer(timerId, pointInTime, timerCb, paramCb);
    return LORAWAN_SUCCESS;
}
    d5a6:	b004      	add	sp, #16
    d5a8:	bc1c      	pop	{r2, r3, r4}
    d5aa:	4690      	mov	r8, r2
    d5ac:	4699      	mov	r9, r3
    d5ae:	46a2      	mov	sl, r4
    d5b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    time |= ((uint64_t) sysTimeOvf) << 32;
    d5b2:	4b4d      	ldr	r3, [pc, #308]	; (d6e8 <SwTimerStart+0x170>)
    d5b4:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    d5b6:	4b4d      	ldr	r3, [pc, #308]	; (d6ec <SwTimerStart+0x174>)
    d5b8:	8818      	ldrh	r0, [r3, #0]
    d5ba:	0403      	lsls	r3, r0, #16
    d5bc:	4698      	mov	r8, r3
    time |= (uint64_t) common_tc_read_count();
    d5be:	4b4c      	ldr	r3, [pc, #304]	; (d6f0 <SwTimerStart+0x178>)
    d5c0:	4798      	blx	r3
    d5c2:	4643      	mov	r3, r8
    d5c4:	4303      	orrs	r3, r0
    switch (timeoutType)
    d5c6:	2e00      	cmp	r6, #0
    d5c8:	d003      	beq.n	d5d2 <SwTimerStart+0x5a>
    d5ca:	2e01      	cmp	r6, #1
    d5cc:	d038      	beq.n	d640 <SwTimerStart+0xc8>
            return LORAWAN_INVALID_PARAMETER;
    d5ce:	200a      	movs	r0, #10
    d5d0:	e7e9      	b.n	d5a6 <SwTimerStart+0x2e>
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    d5d2:	4948      	ldr	r1, [pc, #288]	; (d6f4 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    d5d4:	200a      	movs	r0, #10
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    d5d6:	002a      	movs	r2, r5
    d5d8:	3aff      	subs	r2, #255	; 0xff
            pointInTime = ADD_TIME(timerCount, now);
    d5da:	18ed      	adds	r5, r5, r3
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    d5dc:	428a      	cmp	r2, r1
    d5de:	d8e2      	bhi.n	d5a6 <SwTimerStart+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    d5e0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d5e4:	425a      	negs	r2, r3
    d5e6:	4153      	adcs	r3, r2
    d5e8:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    d5ea:	b672      	cpsid	i
    d5ec:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d5f0:	2600      	movs	r6, #0
    d5f2:	4b41      	ldr	r3, [pc, #260]	; (d6f8 <SwTimerStart+0x180>)
    d5f4:	701e      	strb	r6, [r3, #0]
	return flags;
    d5f6:	9b03      	ldr	r3, [sp, #12]
    d5f8:	4699      	mov	r9, r3
    swtimerInternalHandler();
    d5fa:	4b40      	ldr	r3, [pc, #256]	; (d6fc <SwTimerStart+0x184>)
    d5fc:	4798      	blx	r3
    swTimers[timerId].absoluteExpiryTime = pointInTime;
    d5fe:	4b39      	ldr	r3, [pc, #228]	; (d6e4 <SwTimerStart+0x16c>)
    d600:	013a      	lsls	r2, r7, #4
    d602:	50d5      	str	r5, [r2, r3]
    swTimers[timerId].timerCb = (void (*)(void*))handlerCb;
    d604:	189b      	adds	r3, r3, r2
    d606:	605c      	str	r4, [r3, #4]
    swTimers[timerId].paramCb = parameter;
    d608:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d60a:	609a      	str	r2, [r3, #8]
    swTimers[timerId].loaded = false;
    d60c:	735e      	strb	r6, [r3, #13]
    runningTimers++;
    d60e:	4a3c      	ldr	r2, [pc, #240]	; (d700 <SwTimerStart+0x188>)
    d610:	7813      	ldrb	r3, [r2, #0]
    d612:	3301      	adds	r3, #1
    d614:	b2db      	uxtb	r3, r3
    d616:	7013      	strb	r3, [r2, #0]
    if (SWTIMER_INVALID == runningTimerQueueHead)
    d618:	4b3a      	ldr	r3, [pc, #232]	; (d704 <SwTimerStart+0x18c>)
    d61a:	681b      	ldr	r3, [r3, #0]
    d61c:	469a      	mov	sl, r3
    d61e:	2bff      	cmp	r3, #255	; 0xff
    d620:	d016      	beq.n	d650 <SwTimerStart+0xd8>
        uint8_t currIndex = runningTimerQueueHead;
    d622:	466a      	mov	r2, sp
    d624:	7013      	strb	r3, [r2, #0]
    d626:	7812      	ldrb	r2, [r2, #0]
        for (index = 0; index < runningTimers; index++)
    d628:	4b35      	ldr	r3, [pc, #212]	; (d700 <SwTimerStart+0x188>)
    d62a:	781b      	ldrb	r3, [r3, #0]
    d62c:	2b00      	cmp	r3, #0
    d62e:	d042      	beq.n	d6b6 <SwTimerStart+0x13e>
    d630:	9200      	str	r2, [sp, #0]
    d632:	2300      	movs	r3, #0
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    d634:	492b      	ldr	r1, [pc, #172]	; (d6e4 <SwTimerStart+0x16c>)
    d636:	4688      	mov	r8, r1
    d638:	4833      	ldr	r0, [pc, #204]	; (d708 <SwTimerStart+0x190>)
                    currIndex = swTimers[currIndex].nextTimer;
    d63a:	468c      	mov	ip, r1
        for (index = 0; index < runningTimers; index++)
    d63c:	4c30      	ldr	r4, [pc, #192]	; (d700 <SwTimerStart+0x188>)
    d63e:	e02a      	b.n	d696 <SwTimerStart+0x11e>
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    d640:	0028      	movs	r0, r5
    d642:	38ff      	subs	r0, #255	; 0xff
    d644:	1ac3      	subs	r3, r0, r3
    d646:	4a2b      	ldr	r2, [pc, #172]	; (d6f4 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    d648:	200a      	movs	r0, #10
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    d64a:	4293      	cmp	r3, r2
    d64c:	d9c8      	bls.n	d5e0 <SwTimerStart+0x68>
    d64e:	e7aa      	b.n	d5a6 <SwTimerStart+0x2e>
        runningTimerQueueHead = timerId;
    d650:	4b2c      	ldr	r3, [pc, #176]	; (d704 <SwTimerStart+0x18c>)
    d652:	601f      	str	r7, [r3, #0]
        loadHwTimer(runningTimerQueueHead);
    d654:	0038      	movs	r0, r7
    d656:	4b2d      	ldr	r3, [pc, #180]	; (d70c <SwTimerStart+0x194>)
    d658:	4798      	blx	r3
    d65a:	e036      	b.n	d6ca <SwTimerStart+0x152>
                    swTimers[timerId].nextTimer = currIndex;
    d65c:	4b21      	ldr	r3, [pc, #132]	; (d6e4 <SwTimerStart+0x16c>)
    d65e:	013c      	lsls	r4, r7, #4
    d660:	191c      	adds	r4, r3, r4
    d662:	7322      	strb	r2, [r4, #12]
                    swTimers[currIndex].loaded = false;
    d664:	9901      	ldr	r1, [sp, #4]
    d666:	0109      	lsls	r1, r1, #4
    d668:	1859      	adds	r1, r3, r1
    d66a:	2300      	movs	r3, #0
    d66c:	734b      	strb	r3, [r1, #13]
                    if (runningTimerQueueHead == currIndex)
    d66e:	4592      	cmp	sl, r2
    d670:	d005      	beq.n	d67e <SwTimerStart+0x106>
                        swTimers[prevIndex].nextTimer = timerId;
    d672:	9b00      	ldr	r3, [sp, #0]
    d674:	0118      	lsls	r0, r3, #4
    d676:	4b1b      	ldr	r3, [pc, #108]	; (d6e4 <SwTimerStart+0x16c>)
    d678:	1818      	adds	r0, r3, r0
    d67a:	7307      	strb	r7, [r0, #12]
    d67c:	e025      	b.n	d6ca <SwTimerStart+0x152>
                        runningTimerQueueHead = timerId;
    d67e:	4b21      	ldr	r3, [pc, #132]	; (d704 <SwTimerStart+0x18c>)
    d680:	601f      	str	r7, [r3, #0]
                        loadHwTimer(runningTimerQueueHead);
    d682:	0038      	movs	r0, r7
    d684:	4b21      	ldr	r3, [pc, #132]	; (d70c <SwTimerStart+0x194>)
    d686:	4798      	blx	r3
    d688:	e01f      	b.n	d6ca <SwTimerStart+0x152>
        for (index = 0; index < runningTimers; index++)
    d68a:	3301      	adds	r3, #1
    d68c:	b2db      	uxtb	r3, r3
    d68e:	7821      	ldrb	r1, [r4, #0]
    d690:	b2c9      	uxtb	r1, r1
    d692:	428b      	cmp	r3, r1
    d694:	d210      	bcs.n	d6b8 <SwTimerStart+0x140>
            if (SWTIMER_INVALID != currIndex)
    d696:	2aff      	cmp	r2, #255	; 0xff
    d698:	d0f7      	beq.n	d68a <SwTimerStart+0x112>
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    d69a:	9201      	str	r2, [sp, #4]
    d69c:	0111      	lsls	r1, r2, #4
    return ((t2 - t1) < INT32_MAX);
    d69e:	4646      	mov	r6, r8
    d6a0:	5989      	ldr	r1, [r1, r6]
    d6a2:	1a69      	subs	r1, r5, r1
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    d6a4:	4281      	cmp	r1, r0
    d6a6:	d8d9      	bhi.n	d65c <SwTimerStart+0xe4>
                    currIndex = swTimers[currIndex].nextTimer;
    d6a8:	0111      	lsls	r1, r2, #4
    d6aa:	4461      	add	r1, ip
    d6ac:	9200      	str	r2, [sp, #0]
    d6ae:	7b0a      	ldrb	r2, [r1, #12]
    d6b0:	e7eb      	b.n	d68a <SwTimerStart+0x112>
        return LORAWAN_INVALID_PARAMETER;
    d6b2:	200a      	movs	r0, #10
    d6b4:	e777      	b.n	d5a6 <SwTimerStart+0x2e>
        uint8_t prevIndex = runningTimerQueueHead;
    d6b6:	9200      	str	r2, [sp, #0]
            swTimers[prevIndex].nextTimer = timerId;
    d6b8:	4b0a      	ldr	r3, [pc, #40]	; (d6e4 <SwTimerStart+0x16c>)
    d6ba:	9a00      	ldr	r2, [sp, #0]
    d6bc:	0110      	lsls	r0, r2, #4
    d6be:	1818      	adds	r0, r3, r0
    d6c0:	7307      	strb	r7, [r0, #12]
            swTimers[timerId].nextTimer = SWTIMER_INVALID;
    d6c2:	013f      	lsls	r7, r7, #4
    d6c4:	19df      	adds	r7, r3, r7
    d6c6:	23ff      	movs	r3, #255	; 0xff
    d6c8:	733b      	strb	r3, [r7, #12]
	if (cpu_irq_is_enabled_flags(flags))
    d6ca:	23ff      	movs	r3, #255	; 0xff
    return LORAWAN_SUCCESS;
    d6cc:	2008      	movs	r0, #8
    d6ce:	464a      	mov	r2, r9
    d6d0:	4213      	tst	r3, r2
    d6d2:	d100      	bne.n	d6d6 <SwTimerStart+0x15e>
    d6d4:	e767      	b.n	d5a6 <SwTimerStart+0x2e>
		cpu_irq_enable();
    d6d6:	2201      	movs	r2, #1
    d6d8:	4b07      	ldr	r3, [pc, #28]	; (d6f8 <SwTimerStart+0x180>)
    d6da:	701a      	strb	r2, [r3, #0]
    d6dc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d6e0:	b662      	cpsie	i
    d6e2:	e760      	b.n	d5a6 <SwTimerStart+0x2e>
    d6e4:	20002bf0 	.word	0x20002bf0
    d6e8:	20002d84 	.word	0x20002d84
    d6ec:	20002d80 	.word	0x20002d80
    d6f0:	0001382d 	.word	0x0001382d
    d6f4:	7fffff00 	.word	0x7fffff00
    d6f8:	20000008 	.word	0x20000008
    d6fc:	0000d3f5 	.word	0x0000d3f5
    d700:	20001e88 	.word	0x20001e88
    d704:	20001e84 	.word	0x20001e84
    d708:	7ffffffe 	.word	0x7ffffffe
    d70c:	0000d35d 	.word	0x0000d35d

0000d710 <SwTimerIsRunning>:
\param[in] timerId Timer ID to be checked for running
\return True if the timer is running else False
******************************************************************************/
bool SwTimerIsRunning(uint8_t timerId)
{
    if (NULL == swTimers[timerId].timerCb)
    d710:	0103      	lsls	r3, r0, #4
    d712:	4803      	ldr	r0, [pc, #12]	; (d720 <SwTimerIsRunning+0x10>)
    d714:	18c0      	adds	r0, r0, r3
    d716:	6840      	ldr	r0, [r0, #4]
    d718:	1e43      	subs	r3, r0, #1
    d71a:	4198      	sbcs	r0, r3
    d71c:	b2c0      	uxtb	r0, r0
    {
        return false;
    }

    return true;
}
    d71e:	4770      	bx	lr
    d720:	20002bf0 	.word	0x20002bf0

0000d724 <SwTimerReadValue>:
\brief Returns the remaining timeout for the given timerId
\param[in] timerId Timer ID to get the remaining time
\return Remaining time until expiry in microseconds
******************************************************************************/
uint32_t SwTimerReadValue(uint8_t timerId)
{
    d724:	b570      	push	{r4, r5, r6, lr}
    uint32_t remainingTime = 0u;
    uint32_t timerExpiryTime = 0u;
    uint32_t currentSysTime = 0u;
    if ( NULL != swTimers[timerId].timerCb )
    d726:	0102      	lsls	r2, r0, #4
    d728:	4b0d      	ldr	r3, [pc, #52]	; (d760 <SwTimerReadValue+0x3c>)
    d72a:	189b      	adds	r3, r3, r2
    d72c:	685b      	ldr	r3, [r3, #4]
    d72e:	2b00      	cmp	r3, #0
    d730:	d014      	beq.n	d75c <SwTimerReadValue+0x38>
    {
	    timerExpiryTime = swTimers[timerId].absoluteExpiryTime;
    d732:	4b0b      	ldr	r3, [pc, #44]	; (d760 <SwTimerReadValue+0x3c>)
    d734:	58d5      	ldr	r5, [r2, r3]
    time |= ((uint64_t) sysTimeOvf) << 32;
    d736:	4b0b      	ldr	r3, [pc, #44]	; (d764 <SwTimerReadValue+0x40>)
    d738:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    d73a:	4b0b      	ldr	r3, [pc, #44]	; (d768 <SwTimerReadValue+0x44>)
    d73c:	881c      	ldrh	r4, [r3, #0]
    d73e:	0424      	lsls	r4, r4, #16
    time |= (uint64_t) common_tc_read_count();
    d740:	4b0a      	ldr	r3, [pc, #40]	; (d76c <SwTimerReadValue+0x48>)
    d742:	4798      	blx	r3
    d744:	4320      	orrs	r0, r4
	    currentSysTime = (uint32_t) gettime();
	    if ( currentSysTime <= timerExpiryTime )
    d746:	4285      	cmp	r5, r0
    d748:	d305      	bcc.n	d756 <SwTimerReadValue+0x32>
	    {
		    remainingTime = timerExpiryTime - currentSysTime;
    d74a:	1a28      	subs	r0, r5, r0
	    else if ( currentSysTime > timerExpiryTime )
	    {
		    remainingTime = (UINT32_MAX - currentSysTime) + timerExpiryTime;
	    }

        if (remainingTime >= SWTIMER_MAX_TIMEOUT)
    d74c:	4b08      	ldr	r3, [pc, #32]	; (d770 <SwTimerReadValue+0x4c>)
    d74e:	4298      	cmp	r0, r3
    d750:	d900      	bls.n	d754 <SwTimerReadValue+0x30>
        {
            /* Diff cannot be more than max timeout */
            remainingTime = 0;
    d752:	2000      	movs	r0, #0
        }
    }
    return remainingTime;
}
    d754:	bd70      	pop	{r4, r5, r6, pc}
		    remainingTime = (UINT32_MAX - currentSysTime) + timerExpiryTime;
    d756:	3d01      	subs	r5, #1
    d758:	1a28      	subs	r0, r5, r0
    d75a:	e7f7      	b.n	d74c <SwTimerReadValue+0x28>
    uint32_t remainingTime = 0u;
    d75c:	2000      	movs	r0, #0
    return remainingTime;
    d75e:	e7f9      	b.n	d754 <SwTimerReadValue+0x30>
    d760:	20002bf0 	.word	0x20002bf0
    d764:	20002d84 	.word	0x20002d84
    d768:	20002d80 	.word	0x20002d80
    d76c:	0001382d 	.word	0x0001382d
    d770:	7ffffffe 	.word	0x7ffffffe

0000d774 <SwTimerNextExpiryDuration>:
/**************************************************************************//**
\brief Returns the duration until the next timer expiry
\return Returns the duration until the next timeout in microseconds
******************************************************************************/
uint32_t SwTimerNextExpiryDuration(void)
{
    d774:	b510      	push	{r4, lr}
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;

    if (SWTIMER_INVALID != runningTimerQueueHead)
    d776:	4b05      	ldr	r3, [pc, #20]	; (d78c <SwTimerNextExpiryDuration+0x18>)
    d778:	6818      	ldr	r0, [r3, #0]
    d77a:	28ff      	cmp	r0, #255	; 0xff
    d77c:	d102      	bne.n	d784 <SwTimerNextExpiryDuration+0x10>
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;
    d77e:	2001      	movs	r0, #1
    d780:	4240      	negs	r0, r0
    {
        duration = SwTimerReadValue(runningTimerQueueHead);
    }

    return duration;
}
    d782:	bd10      	pop	{r4, pc}
        duration = SwTimerReadValue(runningTimerQueueHead);
    d784:	b2c0      	uxtb	r0, r0
    d786:	4b02      	ldr	r3, [pc, #8]	; (d790 <SwTimerNextExpiryDuration+0x1c>)
    d788:	4798      	blx	r3
    d78a:	e7fa      	b.n	d782 <SwTimerNextExpiryDuration+0xe>
    d78c:	20001e84 	.word	0x20001e84
    d790:	0000d725 	.word	0x0000d725

0000d794 <SwTimersExecute>:

/**************************************************************************//**
\brief Handles Queues and Callbacks for Expired Timers
******************************************************************************/
void SwTimersExecute(void)
{
    d794:	b5f0      	push	{r4, r5, r6, r7, lr}
    d796:	46de      	mov	lr, fp
    d798:	4657      	mov	r7, sl
    d79a:	464e      	mov	r6, r9
    d79c:	4645      	mov	r5, r8
    d79e:	b5e0      	push	{r5, r6, r7, lr}
    d7a0:	b083      	sub	sp, #12
    time |= ((uint64_t) sysTimeOvf) << 32;
    d7a2:	4b2f      	ldr	r3, [pc, #188]	; (d860 <SwTimersExecute+0xcc>)
    d7a4:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    d7a6:	4b2f      	ldr	r3, [pc, #188]	; (d864 <SwTimersExecute+0xd0>)
    d7a8:	881b      	ldrh	r3, [r3, #0]
    time |= (uint64_t) common_tc_read_count();
    d7aa:	4b2f      	ldr	r3, [pc, #188]	; (d868 <SwTimersExecute+0xd4>)
    d7ac:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    d7ae:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d7b2:	4253      	negs	r3, r2
    d7b4:	4153      	adcs	r3, r2
    d7b6:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    d7b8:	b672      	cpsid	i
    d7ba:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d7be:	2200      	movs	r2, #0
    d7c0:	4b2a      	ldr	r3, [pc, #168]	; (d86c <SwTimersExecute+0xd8>)
    d7c2:	701a      	strb	r2, [r3, #0]
	return flags;
    d7c4:	9c00      	ldr	r4, [sp, #0]
    uint64_t now = gettime();

    uint8_t flags = cpu_irq_save();
    swtimerInternalHandler();
    d7c6:	4b2a      	ldr	r3, [pc, #168]	; (d870 <SwTimersExecute+0xdc>)
    d7c8:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    d7ca:	23ff      	movs	r3, #255	; 0xff
    d7cc:	4223      	tst	r3, r4
    d7ce:	d005      	beq.n	d7dc <SwTimersExecute+0x48>
		cpu_irq_enable();
    d7d0:	2201      	movs	r2, #1
    d7d2:	4b26      	ldr	r3, [pc, #152]	; (d86c <SwTimersExecute+0xd8>)
    d7d4:	701a      	strb	r2, [r3, #0]
    d7d6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d7da:	b662      	cpsie	i
	cpu_irq_disable();
    d7dc:	4b23      	ldr	r3, [pc, #140]	; (d86c <SwTimersExecute+0xd8>)
    d7de:	469a      	mov	sl, r3
        /* Expired timer if any will be processed here */
        while (SWTIMER_INVALID != expiredTimerQueueHead)
        {
            flags = cpu_irq_save();

            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    d7e0:	4c24      	ldr	r4, [pc, #144]	; (d874 <SwTimersExecute+0xe0>)
    d7e2:	4b25      	ldr	r3, [pc, #148]	; (d878 <SwTimersExecute+0xe4>)
    d7e4:	4699      	mov	r9, r3
    d7e6:	2200      	movs	r2, #0

            /*
            * The expired timer's structure elements are updated
            * and the timer is taken out of expired timer queue
            */
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    d7e8:	20ff      	movs	r0, #255	; 0xff
            */
            expiredTimerQueueHead = nextExpiredTimer;

            if (SWTIMER_INVALID == expiredTimerQueueHead)
            {
                expiredTimerQueueTail = SWTIMER_INVALID;
    d7ea:	4b24      	ldr	r3, [pc, #144]	; (d87c <SwTimersExecute+0xe8>)
    d7ec:	4698      	mov	r8, r3
		cpu_irq_enable();
    d7ee:	4b1f      	ldr	r3, [pc, #124]	; (d86c <SwTimersExecute+0xd8>)
    d7f0:	469c      	mov	ip, r3
    d7f2:	e004      	b.n	d7fe <SwTimersExecute+0x6a>
    d7f4:	4643      	mov	r3, r8
    d7f6:	6018      	str	r0, [r3, #0]
    d7f8:	e01e      	b.n	d838 <SwTimersExecute+0xa4>
            }

            cpu_irq_restore(flags);

            if (NULL != callback)
    d7fa:	2e00      	cmp	r6, #0
    d7fc:	d125      	bne.n	d84a <SwTimersExecute+0xb6>
        while (SWTIMER_INVALID != expiredTimerQueueHead)
    d7fe:	4b1d      	ldr	r3, [pc, #116]	; (d874 <SwTimersExecute+0xe0>)
    d800:	681b      	ldr	r3, [r3, #0]
    d802:	2bff      	cmp	r3, #255	; 0xff
    d804:	d024      	beq.n	d850 <SwTimersExecute+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    d806:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d80a:	424b      	negs	r3, r1
    d80c:	414b      	adcs	r3, r1
    d80e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    d810:	b672      	cpsid	i
    d812:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d816:	4653      	mov	r3, sl
    d818:	701a      	strb	r2, [r3, #0]
	return flags;
    d81a:	9f01      	ldr	r7, [sp, #4]
            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    d81c:	6823      	ldr	r3, [r4, #0]
    d81e:	011b      	lsls	r3, r3, #4
    d820:	444b      	add	r3, r9
    d822:	7b19      	ldrb	r1, [r3, #12]
            callback = (SwTimerCallbackFunc_t)swTimers[expiredTimerQueueHead].timerCb;
    d824:	685e      	ldr	r6, [r3, #4]
            cbParam = swTimers[expiredTimerQueueHead].paramCb;
    d826:	689d      	ldr	r5, [r3, #8]
    d828:	46ab      	mov	fp, r5
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    d82a:	7318      	strb	r0, [r3, #12]
            swTimers[expiredTimerQueueHead].timerCb = NULL;
    d82c:	605a      	str	r2, [r3, #4]
            swTimers[expiredTimerQueueHead].paramCb = NULL;
    d82e:	609a      	str	r2, [r3, #8]
            swTimers[expiredTimerQueueHead].loaded = false;
    d830:	735a      	strb	r2, [r3, #13]
            expiredTimerQueueHead = nextExpiredTimer;
    d832:	6021      	str	r1, [r4, #0]
            if (SWTIMER_INVALID == expiredTimerQueueHead)
    d834:	29ff      	cmp	r1, #255	; 0xff
    d836:	d0dd      	beq.n	d7f4 <SwTimersExecute+0x60>
	if (cpu_irq_is_enabled_flags(flags))
    d838:	4238      	tst	r0, r7
    d83a:	d0de      	beq.n	d7fa <SwTimersExecute+0x66>
		cpu_irq_enable();
    d83c:	2301      	movs	r3, #1
    d83e:	4661      	mov	r1, ip
    d840:	700b      	strb	r3, [r1, #0]
    d842:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d846:	b662      	cpsie	i
    d848:	e7d7      	b.n	d7fa <SwTimersExecute+0x66>
            {
                /* Callback function is called */
                callback(cbParam);
    d84a:	4658      	mov	r0, fp
    d84c:	47b0      	blx	r6
    d84e:	e7ca      	b.n	d7e6 <SwTimersExecute+0x52>
                (void)now;
            }
        }
    }
}
    d850:	b003      	add	sp, #12
    d852:	bc3c      	pop	{r2, r3, r4, r5}
    d854:	4690      	mov	r8, r2
    d856:	4699      	mov	r9, r3
    d858:	46a2      	mov	sl, r4
    d85a:	46ab      	mov	fp, r5
    d85c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d85e:	46c0      	nop			; (mov r8, r8)
    d860:	20002d84 	.word	0x20002d84
    d864:	20002d80 	.word	0x20002d80
    d868:	0001382d 	.word	0x0001382d
    d86c:	20000008 	.word	0x20000008
    d870:	0000d3f5 	.word	0x0000d3f5
    d874:	20001e7c 	.word	0x20001e7c
    d878:	20002bf0 	.word	0x20002bf0
    d87c:	20001e80 	.word	0x20001e80

0000d880 <TIMER_TaskHandler>:
{
    d880:	b510      	push	{r4, lr}
    SwTimersExecute();
    d882:	4b02      	ldr	r3, [pc, #8]	; (d88c <TIMER_TaskHandler+0xc>)
    d884:	4798      	blx	r3
}
    d886:	2000      	movs	r0, #0
    d888:	bd10      	pop	{r4, pc}
    d88a:	46c0      	nop			; (mov r8, r8)
    d88c:	0000d795 	.word	0x0000d795

0000d890 <SwTimerStop>:
        LORAWAN_INVALID_PARAMETER if timerId is not valid
        LORAWAN_INVALID_REQUEST if timerId was not started before
        LORAWAN_SUCCESS if it is successfully stopped
******************************************************************************/
StackRetStatus_t SwTimerStop(uint8_t timerId)
{
    d890:	b570      	push	{r4, r5, r6, lr}
    d892:	b082      	sub	sp, #8
    d894:	0004      	movs	r4, r0
    uint8_t prevIndex;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    d896:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    d898:	2c18      	cmp	r4, #24
    d89a:	d901      	bls.n	d8a0 <SwTimerStop+0x10>
        return LORAWAN_SUCCESS;
    }

    SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
    return LORAWAN_INVALID_REQUEST;
}
    d89c:	b002      	add	sp, #8
    d89e:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    d8a0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d8a4:	425a      	negs	r2, r3
    d8a6:	4153      	adcs	r3, r2
    d8a8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    d8aa:	b672      	cpsid	i
    d8ac:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d8b0:	2200      	movs	r2, #0
    d8b2:	4b47      	ldr	r3, [pc, #284]	; (d9d0 <SwTimerStop+0x140>)
    d8b4:	701a      	strb	r2, [r3, #0]
	return flags;
    d8b6:	9d01      	ldr	r5, [sp, #4]
    swtimerInternalHandler();
    d8b8:	4b46      	ldr	r3, [pc, #280]	; (d9d4 <SwTimerStop+0x144>)
    d8ba:	4798      	blx	r3
    if (runningTimers > 0)
    d8bc:	4b46      	ldr	r3, [pc, #280]	; (d9d8 <SwTimerStop+0x148>)
    d8be:	781b      	ldrb	r3, [r3, #0]
    d8c0:	2b00      	cmp	r3, #0
    d8c2:	d040      	beq.n	d946 <SwTimerStop+0xb6>
        uint8_t timer_count = runningTimers;
    d8c4:	4b44      	ldr	r3, [pc, #272]	; (d9d8 <SwTimerStop+0x148>)
    d8c6:	781b      	ldrb	r3, [r3, #0]
    d8c8:	b2db      	uxtb	r3, r3
        prevIndex = currIndex = runningTimerQueueHead;
    d8ca:	4a44      	ldr	r2, [pc, #272]	; (d9dc <SwTimerStop+0x14c>)
    d8cc:	6816      	ldr	r6, [r2, #0]
    d8ce:	b2f1      	uxtb	r1, r6
        while (timer_count > 0)
    d8d0:	2b00      	cmp	r3, #0
    d8d2:	d038      	beq.n	d946 <SwTimerStop+0xb6>
            if (timerId == currIndex)
    d8d4:	428c      	cmp	r4, r1
    d8d6:	d00b      	beq.n	d8f0 <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    d8d8:	4841      	ldr	r0, [pc, #260]	; (d9e0 <SwTimerStop+0x150>)
    d8da:	010a      	lsls	r2, r1, #4
    d8dc:	1882      	adds	r2, r0, r2
    d8de:	7b12      	ldrb	r2, [r2, #12]
            timer_count--;
    d8e0:	3b01      	subs	r3, #1
    d8e2:	b2db      	uxtb	r3, r3
        while (timer_count > 0)
    d8e4:	2b00      	cmp	r3, #0
    d8e6:	d02e      	beq.n	d946 <SwTimerStop+0xb6>
            if (timerId == currIndex)
    d8e8:	4294      	cmp	r4, r2
    d8ea:	d001      	beq.n	d8f0 <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    d8ec:	0011      	movs	r1, r2
    d8ee:	e7f4      	b.n	d8da <SwTimerStop+0x4a>
                if (timerId == runningTimerQueueHead)
    d8f0:	42a6      	cmp	r6, r4
    d8f2:	d01d      	beq.n	d930 <SwTimerStop+0xa0>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    d8f4:	4b3a      	ldr	r3, [pc, #232]	; (d9e0 <SwTimerStop+0x150>)
    d8f6:	0122      	lsls	r2, r4, #4
    d8f8:	189a      	adds	r2, r3, r2
    d8fa:	7b12      	ldrb	r2, [r2, #12]
    d8fc:	0109      	lsls	r1, r1, #4
    d8fe:	1859      	adds	r1, r3, r1
    d900:	730a      	strb	r2, [r1, #12]
                swTimers[timerId].nextTimer  = SWTIMER_INVALID;
    d902:	0122      	lsls	r2, r4, #4
    d904:	4b36      	ldr	r3, [pc, #216]	; (d9e0 <SwTimerStop+0x150>)
    d906:	189b      	adds	r3, r3, r2
    d908:	22ff      	movs	r2, #255	; 0xff
    d90a:	731a      	strb	r2, [r3, #12]
            runningTimers--;
    d90c:	4a32      	ldr	r2, [pc, #200]	; (d9d8 <SwTimerStop+0x148>)
    d90e:	7813      	ldrb	r3, [r2, #0]
    d910:	3b01      	subs	r3, #1
    d912:	b2db      	uxtb	r3, r3
    d914:	7013      	strb	r3, [r2, #0]
        swTimers[timerId].timerCb = NULL;
    d916:	0124      	lsls	r4, r4, #4
    d918:	4b31      	ldr	r3, [pc, #196]	; (d9e0 <SwTimerStop+0x150>)
    d91a:	191c      	adds	r4, r3, r4
    d91c:	2300      	movs	r3, #0
    d91e:	6063      	str	r3, [r4, #4]
        swTimers[timerId].paramCb = NULL;
    d920:	60a3      	str	r3, [r4, #8]
        swTimers[timerId].loaded = false;
    d922:	7363      	strb	r3, [r4, #13]
	if (cpu_irq_is_enabled_flags(flags))
    d924:	33ff      	adds	r3, #255	; 0xff
        return LORAWAN_SUCCESS;
    d926:	2008      	movs	r0, #8
    d928:	422b      	tst	r3, r5
    d92a:	d0b7      	beq.n	d89c <SwTimerStop+0xc>
    d92c:	2301      	movs	r3, #1
    d92e:	e040      	b.n	d9b2 <SwTimerStop+0x122>
                    common_tc_compare_stop();
    d930:	4b2c      	ldr	r3, [pc, #176]	; (d9e4 <SwTimerStop+0x154>)
    d932:	4798      	blx	r3
                    runningTimerQueueHead = swTimers[timerId].nextTimer;
    d934:	0122      	lsls	r2, r4, #4
    d936:	4b2a      	ldr	r3, [pc, #168]	; (d9e0 <SwTimerStop+0x150>)
    d938:	189b      	adds	r3, r3, r2
    d93a:	7b18      	ldrb	r0, [r3, #12]
    d93c:	4b27      	ldr	r3, [pc, #156]	; (d9dc <SwTimerStop+0x14c>)
    d93e:	6018      	str	r0, [r3, #0]
                    loadHwTimer(runningTimerQueueHead);
    d940:	4b29      	ldr	r3, [pc, #164]	; (d9e8 <SwTimerStop+0x158>)
    d942:	4798      	blx	r3
    d944:	e7dd      	b.n	d902 <SwTimerStop+0x72>
        prevIndex = currIndex = expiredTimerQueueHead;
    d946:	4b29      	ldr	r3, [pc, #164]	; (d9ec <SwTimerStop+0x15c>)
    d948:	6818      	ldr	r0, [r3, #0]
    d94a:	b2c2      	uxtb	r2, r0
        while (SWTIMER_INVALID != currIndex)
    d94c:	2aff      	cmp	r2, #255	; 0xff
    d94e:	d02c      	beq.n	d9aa <SwTimerStop+0x11a>
            if (timerId == currIndex)
    d950:	4294      	cmp	r4, r2
    d952:	d009      	beq.n	d968 <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    d954:	4922      	ldr	r1, [pc, #136]	; (d9e0 <SwTimerStop+0x150>)
    d956:	0113      	lsls	r3, r2, #4
    d958:	18cb      	adds	r3, r1, r3
    d95a:	7b1b      	ldrb	r3, [r3, #12]
        while (SWTIMER_INVALID != currIndex)
    d95c:	2bff      	cmp	r3, #255	; 0xff
    d95e:	d024      	beq.n	d9aa <SwTimerStop+0x11a>
            if (timerId == currIndex)
    d960:	429c      	cmp	r4, r3
    d962:	d001      	beq.n	d968 <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    d964:	001a      	movs	r2, r3
    d966:	e7f6      	b.n	d956 <SwTimerStop+0xc6>
                if (timerId == expiredTimerQueueHead)
    d968:	42a0      	cmp	r0, r4
    d96a:	d00d      	beq.n	d988 <SwTimerStop+0xf8>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    d96c:	4b1c      	ldr	r3, [pc, #112]	; (d9e0 <SwTimerStop+0x150>)
    d96e:	0121      	lsls	r1, r4, #4
    d970:	1859      	adds	r1, r3, r1
    d972:	7b09      	ldrb	r1, [r1, #12]
    d974:	0110      	lsls	r0, r2, #4
    d976:	181b      	adds	r3, r3, r0
    d978:	7319      	strb	r1, [r3, #12]
                    if (timerId == expiredTimerQueueTail)
    d97a:	4b1d      	ldr	r3, [pc, #116]	; (d9f0 <SwTimerStop+0x160>)
    d97c:	681b      	ldr	r3, [r3, #0]
    d97e:	429c      	cmp	r4, r3
    d980:	d1c9      	bne.n	d916 <SwTimerStop+0x86>
                        expiredTimerQueueTail = prevIndex;
    d982:	4b1b      	ldr	r3, [pc, #108]	; (d9f0 <SwTimerStop+0x160>)
    d984:	601a      	str	r2, [r3, #0]
    d986:	e7c6      	b.n	d916 <SwTimerStop+0x86>
                    if (expiredTimerQueueHead == expiredTimerQueueTail)
    d988:	4b19      	ldr	r3, [pc, #100]	; (d9f0 <SwTimerStop+0x160>)
    d98a:	681b      	ldr	r3, [r3, #0]
    d98c:	4298      	cmp	r0, r3
    d98e:	d006      	beq.n	d99e <SwTimerStop+0x10e>
                        expiredTimerQueueHead = swTimers[expiredTimerQueueHead].nextTimer;
    d990:	0100      	lsls	r0, r0, #4
    d992:	4b13      	ldr	r3, [pc, #76]	; (d9e0 <SwTimerStop+0x150>)
    d994:	1818      	adds	r0, r3, r0
    d996:	7b02      	ldrb	r2, [r0, #12]
    d998:	4b14      	ldr	r3, [pc, #80]	; (d9ec <SwTimerStop+0x15c>)
    d99a:	601a      	str	r2, [r3, #0]
    d99c:	e7bb      	b.n	d916 <SwTimerStop+0x86>
                        expiredTimerQueueHead = expiredTimerQueueTail = SWTIMER_INVALID;
    d99e:	23ff      	movs	r3, #255	; 0xff
    d9a0:	4a13      	ldr	r2, [pc, #76]	; (d9f0 <SwTimerStop+0x160>)
    d9a2:	6013      	str	r3, [r2, #0]
    d9a4:	4a11      	ldr	r2, [pc, #68]	; (d9ec <SwTimerStop+0x15c>)
    d9a6:	6013      	str	r3, [r2, #0]
    d9a8:	e7b5      	b.n	d916 <SwTimerStop+0x86>
    d9aa:	23ff      	movs	r3, #255	; 0xff
    d9ac:	422b      	tst	r3, r5
    d9ae:	d00a      	beq.n	d9c6 <SwTimerStop+0x136>
    d9b0:	2300      	movs	r3, #0
		cpu_irq_enable();
    d9b2:	2101      	movs	r1, #1
    d9b4:	4a06      	ldr	r2, [pc, #24]	; (d9d0 <SwTimerStop+0x140>)
    d9b6:	7011      	strb	r1, [r2, #0]
    d9b8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d9bc:	b662      	cpsie	i
    if (timerStopReqStatus)
    d9be:	2b00      	cmp	r3, #0
    d9c0:	d103      	bne.n	d9ca <SwTimerStop+0x13a>
    return LORAWAN_INVALID_REQUEST;
    d9c2:	2015      	movs	r0, #21
    d9c4:	e76a      	b.n	d89c <SwTimerStop+0xc>
    d9c6:	2015      	movs	r0, #21
    d9c8:	e768      	b.n	d89c <SwTimerStop+0xc>
        return LORAWAN_SUCCESS;
    d9ca:	2008      	movs	r0, #8
    d9cc:	e766      	b.n	d89c <SwTimerStop+0xc>
    d9ce:	46c0      	nop			; (mov r8, r8)
    d9d0:	20000008 	.word	0x20000008
    d9d4:	0000d3f5 	.word	0x0000d3f5
    d9d8:	20001e88 	.word	0x20001e88
    d9dc:	20001e84 	.word	0x20001e84
    d9e0:	20002bf0 	.word	0x20002bf0
    d9e4:	00013879 	.word	0x00013879
    d9e8:	0000d35d 	.word	0x0000d35d
    d9ec:	20001e7c 	.word	0x20001e7c
    d9f0:	20001e80 	.word	0x20001e80

0000d9f4 <SwTimerRunRemainingTime>:
{
    d9f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d9f6:	b083      	sub	sp, #12
    d9f8:	0005      	movs	r5, r0
    void * timerCb = (void*)(swTimers[runningTimerQueueHead].timerCb);
    d9fa:	4b0b      	ldr	r3, [pc, #44]	; (da28 <SwTimerRunRemainingTime+0x34>)
    d9fc:	681c      	ldr	r4, [r3, #0]
    d9fe:	0122      	lsls	r2, r4, #4
    da00:	4b0a      	ldr	r3, [pc, #40]	; (da2c <SwTimerRunRemainingTime+0x38>)
    da02:	189b      	adds	r3, r3, r2
    da04:	685e      	ldr	r6, [r3, #4]
    void *paramCb = swTimers[runningTimerQueueHead].paramCb;
    da06:	689f      	ldr	r7, [r3, #8]
    uint8_t timerId = runningTimerQueueHead;
    da08:	b2e4      	uxtb	r4, r4
    if (LORAWAN_SUCCESS == SwTimerStop(runningTimerQueueHead))
    da0a:	0020      	movs	r0, r4
    da0c:	4b08      	ldr	r3, [pc, #32]	; (da30 <SwTimerRunRemainingTime+0x3c>)
    da0e:	4798      	blx	r3
    da10:	2808      	cmp	r0, #8
    da12:	d001      	beq.n	da18 <SwTimerRunRemainingTime+0x24>
}
    da14:	b003      	add	sp, #12
    da16:	bdf0      	pop	{r4, r5, r6, r7, pc}
        SwTimerStart(timerId, offset, SW_TIMEOUT_RELATIVE, timerCb, paramCb);
    da18:	9700      	str	r7, [sp, #0]
    da1a:	0033      	movs	r3, r6
    da1c:	2200      	movs	r2, #0
    da1e:	0029      	movs	r1, r5
    da20:	0020      	movs	r0, r4
    da22:	4c04      	ldr	r4, [pc, #16]	; (da34 <SwTimerRunRemainingTime+0x40>)
    da24:	47a0      	blx	r4
}
    da26:	e7f5      	b.n	da14 <SwTimerRunRemainingTime+0x20>
    da28:	20001e84 	.word	0x20001e84
    da2c:	20002bf0 	.word	0x20002bf0
    da30:	0000d891 	.word	0x0000d891
    da34:	0000d579 	.word	0x0000d579

0000da38 <SystemTimerSync>:
/**************************************************************************//**
\brief Resumes the software timer by offseting it with given time
\param[in] timeToSync Amount of duration to offset from known system time
******************************************************************************/
void SystemTimerSync(uint64_t timeToSync)
{
    da38:	b570      	push	{r4, r5, r6, lr}
    uint8_t timerId;
    uint16_t adjustOffset;

    sysTimeLastKnown += timeToSync;
    da3a:	4b22      	ldr	r3, [pc, #136]	; (dac4 <SystemTimerSync+0x8c>)
    da3c:	681c      	ldr	r4, [r3, #0]
    da3e:	685d      	ldr	r5, [r3, #4]
    da40:	1900      	adds	r0, r0, r4
    da42:	4169      	adcs	r1, r5
    da44:	6018      	str	r0, [r3, #0]
    da46:	6059      	str	r1, [r3, #4]

    /* 1. Update system time */
    sysTimeOvf = (uint32_t) (sysTimeLastKnown >> 32);
    da48:	4b1f      	ldr	r3, [pc, #124]	; (dac8 <SystemTimerSync+0x90>)
    da4a:	6019      	str	r1, [r3, #0]
    sysTime = (uint16_t) ((sysTimeLastKnown >> SWTIMER_SYSTIME_SHIFTMASK) & 0xffff);
    da4c:	0c02      	lsrs	r2, r0, #16
    da4e:	4b1f      	ldr	r3, [pc, #124]	; (dacc <SystemTimerSync+0x94>)
    da50:	801a      	strh	r2, [r3, #0]

    /* 2. Adjust expiration of running timers */
    adjustOffset = (uint16_t) sysTimeLastKnown;
    da52:	b280      	uxth	r0, r0
    timerId = runningTimerQueueHead;
    da54:	4b1e      	ldr	r3, [pc, #120]	; (dad0 <SystemTimerSync+0x98>)
    da56:	781b      	ldrb	r3, [r3, #0]
    for (uint8_t index = 0; index < runningTimers; index++)
    da58:	4a1e      	ldr	r2, [pc, #120]	; (dad4 <SystemTimerSync+0x9c>)
    da5a:	7812      	ldrb	r2, [r2, #0]
    da5c:	2a00      	cmp	r2, #0
    da5e:	d012      	beq.n	da86 <SystemTimerSync+0x4e>
    da60:	2200      	movs	r2, #0
    {
        if (SWTIMER_INVALID != timerId)
        {
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    da62:	4c1d      	ldr	r4, [pc, #116]	; (dad8 <SystemTimerSync+0xa0>)
    for (uint8_t index = 0; index < runningTimers; index++)
    da64:	4d1b      	ldr	r5, [pc, #108]	; (dad4 <SystemTimerSync+0x9c>)
    da66:	e005      	b.n	da74 <SystemTimerSync+0x3c>
    da68:	3201      	adds	r2, #1
    da6a:	b2d2      	uxtb	r2, r2
    da6c:	7829      	ldrb	r1, [r5, #0]
    da6e:	b2c9      	uxtb	r1, r1
    da70:	4291      	cmp	r1, r2
    da72:	d908      	bls.n	da86 <SystemTimerSync+0x4e>
        if (SWTIMER_INVALID != timerId)
    da74:	2bff      	cmp	r3, #255	; 0xff
    da76:	d0f7      	beq.n	da68 <SystemTimerSync+0x30>
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    da78:	011b      	lsls	r3, r3, #4
    da7a:	5919      	ldr	r1, [r3, r4]
    da7c:	1a09      	subs	r1, r1, r0
    da7e:	5119      	str	r1, [r3, r4]
            timerId = swTimers[timerId].nextTimer;
    da80:	18e3      	adds	r3, r4, r3
    da82:	7b1b      	ldrb	r3, [r3, #12]
    da84:	e7f0      	b.n	da68 <SystemTimerSync+0x30>
        }
    }

    /* 3. Start hardware timer */
    common_tc_init();
    da86:	4b15      	ldr	r3, [pc, #84]	; (dadc <SystemTimerSync+0xa4>)
    da88:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    da8a:	4815      	ldr	r0, [pc, #84]	; (dae0 <SystemTimerSync+0xa8>)
    da8c:	4b15      	ldr	r3, [pc, #84]	; (dae4 <SystemTimerSync+0xac>)
    da8e:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    da90:	4815      	ldr	r0, [pc, #84]	; (dae8 <SystemTimerSync+0xb0>)
    da92:	4b16      	ldr	r3, [pc, #88]	; (daec <SystemTimerSync+0xb4>)
    da94:	4798      	blx	r3

    /* 4. Resume timer queue operations */
    if (runningTimers && (SWTIMER_INVALID != runningTimerQueueHead))
    da96:	4b0f      	ldr	r3, [pc, #60]	; (dad4 <SystemTimerSync+0x9c>)
    da98:	781b      	ldrb	r3, [r3, #0]
    da9a:	2b00      	cmp	r3, #0
    da9c:	d009      	beq.n	dab2 <SystemTimerSync+0x7a>
    da9e:	4b0c      	ldr	r3, [pc, #48]	; (dad0 <SystemTimerSync+0x98>)
    daa0:	681b      	ldr	r3, [r3, #0]
    daa2:	2bff      	cmp	r3, #255	; 0xff
    daa4:	d005      	beq.n	dab2 <SystemTimerSync+0x7a>
    {
        uint32_t remainingTime = SwTimerNextExpiryDuration();
    daa6:	4b12      	ldr	r3, [pc, #72]	; (daf0 <SystemTimerSync+0xb8>)
    daa8:	4798      	blx	r3

        if (SWTIMER_MIN_TIMEOUT > remainingTime)
    daaa:	28fe      	cmp	r0, #254	; 0xfe
    daac:	d902      	bls.n	dab4 <SystemTimerSync+0x7c>
        else
        {
            /*
            * There is some time left in head timer, so restart it.
            */
            SwTimerRunRemainingTime(remainingTime);
    daae:	4b11      	ldr	r3, [pc, #68]	; (daf4 <SystemTimerSync+0xbc>)
    dab0:	4798      	blx	r3
        }
    }
}
    dab2:	bd70      	pop	{r4, r5, r6, pc}
            isTimerTriggered = true;
    dab4:	2201      	movs	r2, #1
    dab6:	4b10      	ldr	r3, [pc, #64]	; (daf8 <SystemTimerSync+0xc0>)
    dab8:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    daba:	2001      	movs	r0, #1
    dabc:	4b0f      	ldr	r3, [pc, #60]	; (dafc <SystemTimerSync+0xc4>)
    dabe:	4798      	blx	r3
    dac0:	e7f7      	b.n	dab2 <SystemTimerSync+0x7a>
    dac2:	46c0      	nop			; (mov r8, r8)
    dac4:	20001e90 	.word	0x20001e90
    dac8:	20002d84 	.word	0x20002d84
    dacc:	20002d80 	.word	0x20002d80
    dad0:	20001e84 	.word	0x20001e84
    dad4:	20001e88 	.word	0x20001e88
    dad8:	20002bf0 	.word	0x20002bf0
    dadc:	0001390d 	.word	0x0001390d
    dae0:	0000d29d 	.word	0x0000d29d
    dae4:	00013991 	.word	0x00013991
    dae8:	0000d275 	.word	0x0000d275
    daec:	0001399d 	.word	0x0001399d
    daf0:	0000d775 	.word	0x0000d775
    daf4:	0000d9f5 	.word	0x0000d9f5
    daf8:	20002d82 	.word	0x20002d82
    dafc:	0000db91 	.word	0x0000db91

0000db00 <SwTimerWriteTimestamp>:
\param[in] index Index of the system timestamp
\param[in] *timestamp Pointer-to-timestamp to be stored in the given index
******************************************************************************/
void SwTimerWriteTimestamp(uint8_t index, SwTimestamp_t *timestamp)
{
    swTimestamp[index] = *timestamp;
    db00:	680a      	ldr	r2, [r1, #0]
    db02:	684b      	ldr	r3, [r1, #4]
    db04:	00c1      	lsls	r1, r0, #3
    db06:	4802      	ldr	r0, [pc, #8]	; (db10 <SwTimerWriteTimestamp+0x10>)
    db08:	1840      	adds	r0, r0, r1
    db0a:	6002      	str	r2, [r0, #0]
    db0c:	6043      	str	r3, [r0, #4]
}
    db0e:	4770      	bx	lr
    db10:	20002be0 	.word	0x20002be0

0000db14 <Stack_Init>:
/**************************************************************************//**
\brief Initializes the system. This is the first stack function to be called
       by the application in the main() function.
******************************************************************************/
void Stack_Init(void)
{
    db14:	b510      	push	{r4, lr}
	
	/* LORAWAN_Init() should have been called form here, 
	   but parser application has a round-about way to call it now */
 
	/* Post application task to initiate the execution from there */
	SYSTEM_PostTask(APP_TASK_ID);
    db16:	2010      	movs	r0, #16
    db18:	4b01      	ldr	r3, [pc, #4]	; (db20 <Stack_Init+0xc>)
    db1a:	4798      	blx	r3
}
    db1c:	bd10      	pop	{r4, pc}
    db1e:	46c0      	nop			; (mov r8, r8)
    db20:	0000db91 	.word	0x0000db91

0000db24 <SYSTEM_RunTasks>:
/************************************************************************/
/*********************************************************************//**
\brief System tasks execution entry point
*************************************************************************/
void SYSTEM_RunTasks(void)
{
    db24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ((1 << SYSTEM_TASK_ID_COUNT) > sysTaskFlag)
    db26:	4b16      	ldr	r3, [pc, #88]	; (db80 <SYSTEM_RunTasks+0x5c>)
    db28:	881b      	ldrh	r3, [r3, #0]
    db2a:	b29b      	uxth	r3, r3
    db2c:	2b1f      	cmp	r3, #31
    db2e:	d922      	bls.n	db76 <SYSTEM_RunTasks+0x52>
    db30:	e7fe      	b.n	db30 <SYSTEM_RunTasks+0xc>
    { /* Only valid task bits are set */
        while (sysTaskFlag)
        { /* One or more task are pending to execute */
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
            {
                if ((1 << taskId) & sysTaskFlag)
    db32:	2500      	movs	r5, #0
                    /*
                    * Reset the task bit since it is to be executed now.
                    * It is done inside atomic section to avoid any interrupt context
                    * corrupting the bits.
                    */
                    ATOMIC_SECTION_ENTER
    db34:	4b13      	ldr	r3, [pc, #76]	; (db84 <SYSTEM_RunTasks+0x60>)
    db36:	4798      	blx	r3
                    sysTaskFlag &= ~(1 << taskId);
    db38:	4911      	ldr	r1, [pc, #68]	; (db80 <SYSTEM_RunTasks+0x5c>)
    db3a:	880b      	ldrh	r3, [r1, #0]
    db3c:	2201      	movs	r2, #1
    db3e:	40aa      	lsls	r2, r5
    db40:	4393      	bics	r3, r2
    db42:	800b      	strh	r3, [r1, #0]
                    ATOMIC_SECTION_EXIT
    db44:	4b10      	ldr	r3, [pc, #64]	; (db88 <SYSTEM_RunTasks+0x64>)
    db46:	4798      	blx	r3

                    /* Return value is not used now, can be used later */
                    taskHandlers[taskId]();
    db48:	00ad      	lsls	r5, r5, #2
    db4a:	4b10      	ldr	r3, [pc, #64]	; (db8c <SYSTEM_RunTasks+0x68>)
    db4c:	58eb      	ldr	r3, [r5, r3]
    db4e:	4798      	blx	r3
                if ((1 << taskId) & sysTaskFlag)
    db50:	2101      	movs	r1, #1
        while (sysTaskFlag)
    db52:	883b      	ldrh	r3, [r7, #0]
    db54:	b29b      	uxth	r3, r3
    db56:	2b00      	cmp	r3, #0
    db58:	d011      	beq.n	db7e <SYSTEM_RunTasks+0x5a>
                if ((1 << taskId) & sysTaskFlag)
    db5a:	8823      	ldrh	r3, [r4, #0]
    db5c:	420b      	tst	r3, r1
    db5e:	d1e8      	bne.n	db32 <SYSTEM_RunTasks+0xe>
    db60:	2201      	movs	r2, #1
    db62:	8833      	ldrh	r3, [r6, #0]
    db64:	b29b      	uxth	r3, r3
    db66:	0015      	movs	r5, r2
    db68:	4113      	asrs	r3, r2
    db6a:	4219      	tst	r1, r3
    db6c:	d1e2      	bne.n	db34 <SYSTEM_RunTasks+0x10>
    db6e:	3201      	adds	r2, #1
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
    db70:	2a05      	cmp	r2, #5
    db72:	d1f6      	bne.n	db62 <SYSTEM_RunTasks+0x3e>
    db74:	e7ed      	b.n	db52 <SYSTEM_RunTasks+0x2e>
        while (sysTaskFlag)
    db76:	4f02      	ldr	r7, [pc, #8]	; (db80 <SYSTEM_RunTasks+0x5c>)
                if ((1 << taskId) & sysTaskFlag)
    db78:	003c      	movs	r4, r7
    db7a:	003e      	movs	r6, r7
    db7c:	e7e8      	b.n	db50 <SYSTEM_RunTasks+0x2c>
        * Can happen only due to corruption, so halt
        * TODO : replace this with assert implementation
        */
        while(1);
    }
}
    db7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    db80:	20001e98 	.word	0x20001e98
    db84:	0000cb45 	.word	0x0000cb45
    db88:	0000cb51 	.word	0x0000cb51
    db8c:	00019008 	.word	0x00019008

0000db90 <SYSTEM_PostTask>:

\param[in] task - ID of the posted task.
*************************************************************************/

void SYSTEM_PostTask(SYSTEM_Task_t task)
{
    db90:	b510      	push	{r4, lr}
    db92:	0004      	movs	r4, r0
    ATOMIC_SECTION_ENTER
    db94:	4b04      	ldr	r3, [pc, #16]	; (dba8 <SYSTEM_PostTask+0x18>)
    db96:	4798      	blx	r3
    sysTaskFlag |= task;
    db98:	4b04      	ldr	r3, [pc, #16]	; (dbac <SYSTEM_PostTask+0x1c>)
    db9a:	8818      	ldrh	r0, [r3, #0]
    db9c:	4320      	orrs	r0, r4
    db9e:	8018      	strh	r0, [r3, #0]
    ATOMIC_SECTION_EXIT
    dba0:	4b03      	ldr	r3, [pc, #12]	; (dbb0 <SYSTEM_PostTask+0x20>)
    dba2:	4798      	blx	r3
}
    dba4:	bd10      	pop	{r4, pc}
    dba6:	46c0      	nop			; (mov r8, r8)
    dba8:	0000cb45 	.word	0x0000cb45
    dbac:	20001e98 	.word	0x20001e98
    dbb0:	0000cb51 	.word	0x0000cb51

0000dbb4 <Radio_WriteMode>:
\param newModulation	- Sets the modulation.
\param blocking			- Sets if its blocking call or not.
\return					- none.
*************************************************************************/
void Radio_WriteMode(RadioMode_t newMode, RadioModulation_t newModulation, uint8_t blocking)
{
    dbb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    dbb6:	46d6      	mov	lr, sl
    dbb8:	464f      	mov	r7, r9
    dbba:	b580      	push	{r7, lr}
    dbbc:	b083      	sub	sp, #12
    dbbe:	9201      	str	r2, [sp, #4]
    uint8_t opMode;
    uint8_t dioMapping;
    RadioModulation_t currentModulation;
    RadioMode_t currentMode;

    if ((MODULATION_FSK == newModulation) &&
    dbc0:	2900      	cmp	r1, #0
    dbc2:	d102      	bne.n	dbca <Radio_WriteMode+0x16>
    dbc4:	1f83      	subs	r3, r0, #6
    dbc6:	2b01      	cmp	r3, #1
    dbc8:	d92a      	bls.n	dc20 <Radio_WriteMode+0x6c>
        // Unavailable modes for FSK. Just return.
        return;
    }

    // Sanity enforcement on parameters
    newMode &= 0x07;
    dbca:	2307      	movs	r3, #7
    dbcc:	4699      	mov	r9, r3
    dbce:	001c      	movs	r4, r3
    dbd0:	4004      	ands	r4, r0
    newModulation &= 0x01;
    dbd2:	2601      	movs	r6, #1
    dbd4:	400e      	ands	r6, r1

    opMode = RADIO_RegisterRead(REG_OPMODE);
    dbd6:	2001      	movs	r0, #1
    dbd8:	4b2b      	ldr	r3, [pc, #172]	; (dc88 <Radio_WriteMode+0xd4>)
    dbda:	4798      	blx	r3
    dbdc:	0005      	movs	r5, r0
    dbde:	0007      	movs	r7, r0

    if ((opMode & 0x80) != 0)
    dbe0:	b243      	sxtb	r3, r0
    dbe2:	469a      	mov	sl, r3
    else
    {
        currentModulation = MODULATION_FSK;
    }

    currentMode = opMode & 0x07;
    dbe4:	464b      	mov	r3, r9
    dbe6:	4003      	ands	r3, r0

    // If we need to change modulation, we need to do this in sleep mode.
    // Otherwise, we can go straight to changing the current mode to newMode.
    if (newModulation != currentModulation)
    dbe8:	4652      	mov	r2, sl
    dbea:	0fd2      	lsrs	r2, r2, #31
    dbec:	4296      	cmp	r6, r2
    dbee:	d00a      	beq.n	dc06 <Radio_WriteMode+0x52>
    {
        // Go to sleep
        if (MODE_SLEEP != currentMode)
    dbf0:	2b00      	cmp	r3, #0
    dbf2:	d11a      	bne.n	dc2a <Radio_WriteMode+0x76>
            // Clear mode bits, effectively going to sleep
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
            currentMode = MODE_SLEEP;
        }
        // Change modulation
        if (MODULATION_FSK == newModulation)
    dbf4:	2e00      	cmp	r6, #0
    dbf6:	d11e      	bne.n	dc36 <Radio_WriteMode+0x82>
        {
            // Clear MSB and sleep bits to make it stay in sleep
            opMode = opMode & (~0x87);
    dbf8:	2778      	movs	r7, #120	; 0x78
    dbfa:	402f      	ands	r7, r5
        else
        {
            // LoRa mode. Set MSB and clear sleep bits to make it stay in sleep
            opMode = 0x80 | (opMode & (~0x87));
        }
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    dbfc:	0039      	movs	r1, r7
    dbfe:	2001      	movs	r0, #1
    dc00:	4b22      	ldr	r3, [pc, #136]	; (dc8c <Radio_WriteMode+0xd8>)
    dc02:	4798      	blx	r3
    dc04:	2300      	movs	r3, #0

    // From here on currentModulation is no longer current, we will use
    // newModulation instead as it reflects the chip configuration.
    // opMode reflects the actual configuration of the chip.

    if (newMode != currentMode)
    dc06:	42a3      	cmp	r3, r4
    dc08:	d00a      	beq.n	dc20 <Radio_WriteMode+0x6c>
    {
        // If we need to block until the mode switch is ready, configure the
        // DIO5 pin to relay this information.
        if ((MODE_SLEEP != newMode) && (1 == blocking))
    dc0a:	2c00      	cmp	r4, #0
    dc0c:	d030      	beq.n	dc70 <Radio_WriteMode+0xbc>
    dc0e:	9b01      	ldr	r3, [sp, #4]
    dc10:	2b01      	cmp	r3, #1
    dc12:	d016      	beq.n	dc42 <Radio_WriteMode+0x8e>
            }
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
        }

        // Do the actual mode switch.
        opMode &= ~0x07;                // Clear old mode bits
    dc14:	21f8      	movs	r1, #248	; 0xf8
    dc16:	4039      	ands	r1, r7
        opMode |= newMode;              // Set new mode bits
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    dc18:	4321      	orrs	r1, r4
    dc1a:	2001      	movs	r0, #1
    dc1c:	4b1b      	ldr	r3, [pc, #108]	; (dc8c <Radio_WriteMode+0xd8>)
    dc1e:	4798      	blx	r3
                SystemBlockingWaitMs(1);
            }
        }
    }
#endif
}
    dc20:	b003      	add	sp, #12
    dc22:	bc0c      	pop	{r2, r3}
    dc24:	4691      	mov	r9, r2
    dc26:	469a      	mov	sl, r3
    dc28:	bdf0      	pop	{r4, r5, r6, r7, pc}
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
    dc2a:	21f8      	movs	r1, #248	; 0xf8
    dc2c:	4001      	ands	r1, r0
    dc2e:	2001      	movs	r0, #1
    dc30:	4b16      	ldr	r3, [pc, #88]	; (dc8c <Radio_WriteMode+0xd8>)
    dc32:	4798      	blx	r3
    dc34:	e7de      	b.n	dbf4 <Radio_WriteMode+0x40>
            opMode = 0x80 | (opMode & (~0x87));
    dc36:	2778      	movs	r7, #120	; 0x78
    dc38:	4653      	mov	r3, sl
    dc3a:	401f      	ands	r7, r3
    dc3c:	2180      	movs	r1, #128	; 0x80
    dc3e:	430f      	orrs	r7, r1
    dc40:	e7dc      	b.n	dbfc <Radio_WriteMode+0x48>
            dioMapping = RADIO_RegisterRead(REG_DIOMAPPING2);
    dc42:	2041      	movs	r0, #65	; 0x41
    dc44:	4b10      	ldr	r3, [pc, #64]	; (dc88 <Radio_WriteMode+0xd4>)
    dc46:	4798      	blx	r3
            if (MODULATION_FSK == newModulation)
    dc48:	2e00      	cmp	r6, #0
    dc4a:	d10e      	bne.n	dc6a <Radio_WriteMode+0xb6>
                dioMapping |= 0x30;     // DIO5 = 11 means ModeReady in FSK mode
    dc4c:	2130      	movs	r1, #48	; 0x30
    dc4e:	4301      	orrs	r1, r0
    dc50:	b2c9      	uxtb	r1, r1
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
    dc52:	2041      	movs	r0, #65	; 0x41
    dc54:	4d0d      	ldr	r5, [pc, #52]	; (dc8c <Radio_WriteMode+0xd8>)
    dc56:	47a8      	blx	r5
        opMode &= ~0x07;                // Clear old mode bits
    dc58:	21f8      	movs	r1, #248	; 0xf8
    dc5a:	4039      	ands	r1, r7
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    dc5c:	4321      	orrs	r1, r4
    dc5e:	2001      	movs	r0, #1
    dc60:	47a8      	blx	r5
			   delay_ms(1);
    dc62:	2001      	movs	r0, #1
    dc64:	4b0a      	ldr	r3, [pc, #40]	; (dc90 <Radio_WriteMode+0xdc>)
    dc66:	4798      	blx	r3
    dc68:	e7da      	b.n	dc20 <Radio_WriteMode+0x6c>
                dioMapping &= ~0x30;    // DIO5 = 00 means ModeReady in LoRa mode
    dc6a:	21cf      	movs	r1, #207	; 0xcf
    dc6c:	4001      	ands	r1, r0
    dc6e:	e7f0      	b.n	dc52 <Radio_WriteMode+0x9e>
        opMode &= ~0x07;                // Clear old mode bits
    dc70:	21f8      	movs	r1, #248	; 0xf8
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    dc72:	4039      	ands	r1, r7
    dc74:	2001      	movs	r0, #1
    dc76:	4b05      	ldr	r3, [pc, #20]	; (dc8c <Radio_WriteMode+0xd8>)
    dc78:	4798      	blx	r3
        if (1 == blocking)
    dc7a:	9b01      	ldr	r3, [sp, #4]
    dc7c:	2b01      	cmp	r3, #1
    dc7e:	d1cf      	bne.n	dc20 <Radio_WriteMode+0x6c>
                SystemBlockingWaitMs(1);
    dc80:	2001      	movs	r0, #1
    dc82:	4b04      	ldr	r3, [pc, #16]	; (dc94 <Radio_WriteMode+0xe0>)
    dc84:	4798      	blx	r3
    dc86:	e7cb      	b.n	dc20 <Radio_WriteMode+0x6c>
    dc88:	0000c9b5 	.word	0x0000c9b5
    dc8c:	0000c98d 	.word	0x0000c98d
    dc90:	0000453d 	.word	0x0000453d
    dc94:	0000cb29 	.word	0x0000cb29

0000dc98 <RADIO_FHSSChangeChannel>:

\param		- none	
\return		- none.
*************************************************************************/
void RADIO_FHSSChangeChannel(void)
{
    dc98:	b500      	push	{lr}
    dc9a:	b083      	sub	sp, #12
    uint32_t freq;
    RADIO_RegisterRead(REG_LORA_IRQFLAGS);
    dc9c:	2012      	movs	r0, #18
    dc9e:	4b0d      	ldr	r3, [pc, #52]	; (dcd4 <RADIO_FHSSChangeChannel+0x3c>)
    dca0:	4798      	blx	r3

    if (radioConfiguration.frequencyHopPeriod)
    dca2:	4b0d      	ldr	r3, [pc, #52]	; (dcd8 <RADIO_FHSSChangeChannel+0x40>)
    dca4:	8adb      	ldrh	r3, [r3, #22]
    dca6:	2b00      	cmp	r3, #0
    dca8:	d007      	beq.n	dcba <RADIO_FHSSChangeChannel+0x22>
    {
        if ((radioConfiguration.radioCallback) &&
    dcaa:	4b0b      	ldr	r3, [pc, #44]	; (dcd8 <RADIO_FHSSChangeChannel+0x40>)
    dcac:	691b      	ldr	r3, [r3, #16]
    dcae:	2b00      	cmp	r3, #0
    dcb0:	d003      	beq.n	dcba <RADIO_FHSSChangeChannel+0x22>
            (1 == radioCallbackMask.BitMask.radioFhssfreqCallback))
    dcb2:	4a0a      	ldr	r2, [pc, #40]	; (dcdc <RADIO_FHSSChangeChannel+0x44>)
    dcb4:	7812      	ldrb	r2, [r2, #0]
        if ((radioConfiguration.radioCallback) &&
    dcb6:	0692      	lsls	r2, r2, #26
    dcb8:	d405      	bmi.n	dcc6 <RADIO_FHSSChangeChannel+0x2e>
            Radio_WriteFrequency(freq);
        }
    }

    // Clear FHSSChangeChannel interrupt
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 1 << SHIFT1);
    dcba:	2102      	movs	r1, #2
    dcbc:	2012      	movs	r0, #18
    dcbe:	4b08      	ldr	r3, [pc, #32]	; (dce0 <RADIO_FHSSChangeChannel+0x48>)
    dcc0:	4798      	blx	r3
}
    dcc2:	b003      	add	sp, #12
    dcc4:	bd00      	pop	{pc}
            radioConfiguration.radioCallback(RADIO_FHSS_NEXT_FREQ_CALLBACK, (void *)&freq);
    dcc6:	a901      	add	r1, sp, #4
    dcc8:	2020      	movs	r0, #32
    dcca:	4798      	blx	r3
            Radio_WriteFrequency(freq);
    dccc:	9801      	ldr	r0, [sp, #4]
    dcce:	4b05      	ldr	r3, [pc, #20]	; (dce4 <RADIO_FHSSChangeChannel+0x4c>)
    dcd0:	4798      	blx	r3
    dcd2:	e7f2      	b.n	dcba <RADIO_FHSSChangeChannel+0x22>
    dcd4:	0000c9b5 	.word	0x0000c9b5
    dcd8:	20002d88 	.word	0x20002d88
    dcdc:	20003056 	.word	0x20003056
    dce0:	0000c98d 	.word	0x0000c98d
    dce4:	0000ea09 	.word	0x0000ea09

0000dce8 <RADIO_ReadRandom>:

\param		- none	
\return		- returns the random number generated.
*************************************************************************/
uint16_t RADIO_ReadRandom(void)
{
    dce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
    uint16_t retVal;
    retVal = 0;
	
	// Turn on the RF switch.
	Radio_EnableRfControl(RADIO_RFCTRL_RX); 
    dcea:	2000      	movs	r0, #0
    dcec:	4b1a      	ldr	r3, [pc, #104]	; (dd58 <RADIO_ReadRandom+0x70>)
    dcee:	4798      	blx	r3
	// Enabling Radio Clock
	Radio_SetClockInput();
    dcf0:	4b1a      	ldr	r3, [pc, #104]	; (dd5c <RADIO_ReadRandom+0x74>)
    dcf2:	4798      	blx	r3
	
    // Mask all interrupts, do many measurements of RSSI
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    dcf4:	2201      	movs	r2, #1
    dcf6:	2101      	movs	r1, #1
    dcf8:	2000      	movs	r0, #0
    dcfa:	4c19      	ldr	r4, [pc, #100]	; (dd60 <RADIO_ReadRandom+0x78>)
    dcfc:	47a0      	blx	r4
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0xFF);
    dcfe:	21ff      	movs	r1, #255	; 0xff
    dd00:	2011      	movs	r0, #17
    dd02:	4b18      	ldr	r3, [pc, #96]	; (dd64 <RADIO_ReadRandom+0x7c>)
    dd04:	4798      	blx	r3
    Radio_WriteMode(MODE_RXCONT, MODULATION_LORA, 1);
    dd06:	2201      	movs	r2, #1
    dd08:	2101      	movs	r1, #1
    dd0a:	2005      	movs	r0, #5
    dd0c:	47a0      	blx	r4
    dd0e:	2410      	movs	r4, #16
    retVal = 0;
    dd10:	2500      	movs	r5, #0
    for (i = 0; i < 16; i++)
    {
        SystemBlockingWaitMs(1);
    dd12:	4f15      	ldr	r7, [pc, #84]	; (dd68 <RADIO_ReadRandom+0x80>)
        retVal <<= SHIFT1;
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    dd14:	4e15      	ldr	r6, [pc, #84]	; (dd6c <RADIO_ReadRandom+0x84>)
        SystemBlockingWaitMs(1);
    dd16:	2001      	movs	r0, #1
    dd18:	47b8      	blx	r7
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    dd1a:	202c      	movs	r0, #44	; 0x2c
    dd1c:	47b0      	blx	r6
    dd1e:	2301      	movs	r3, #1
    dd20:	4018      	ands	r0, r3
        retVal <<= SHIFT1;
    dd22:	006d      	lsls	r5, r5, #1
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    dd24:	4305      	orrs	r5, r0
    dd26:	b2ad      	uxth	r5, r5
    dd28:	3c01      	subs	r4, #1
    dd2a:	b2e4      	uxtb	r4, r4
    for (i = 0; i < 16; i++)
    dd2c:	2c00      	cmp	r4, #0
    dd2e:	d1f2      	bne.n	dd16 <RADIO_ReadRandom+0x2e>
    }
	
	// Turning off the RF switch now.
	Radio_DisableRfControl(RADIO_RFCTRL_RX);
    dd30:	2000      	movs	r0, #0
    dd32:	4b0f      	ldr	r3, [pc, #60]	; (dd70 <RADIO_ReadRandom+0x88>)
    dd34:	4798      	blx	r3
	
    // Return radio to sleep
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    dd36:	2201      	movs	r2, #1
    dd38:	2101      	movs	r1, #1
    dd3a:	2000      	movs	r0, #0
    dd3c:	4b08      	ldr	r3, [pc, #32]	; (dd60 <RADIO_ReadRandom+0x78>)
    dd3e:	4798      	blx	r3
    // Clear interrupts in case any have been generated
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 0xFF);
    dd40:	21ff      	movs	r1, #255	; 0xff
    dd42:	2012      	movs	r0, #18
    dd44:	4c07      	ldr	r4, [pc, #28]	; (dd64 <RADIO_ReadRandom+0x7c>)
    dd46:	47a0      	blx	r4
    // Unmask all interrupts
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0x00);
    dd48:	2100      	movs	r1, #0
    dd4a:	2011      	movs	r0, #17
    dd4c:	47a0      	blx	r4
	// Disabling Radio Clock save power
	Radio_ResetClockInput();
    dd4e:	4b09      	ldr	r3, [pc, #36]	; (dd74 <RADIO_ReadRandom+0x8c>)
    dd50:	4798      	blx	r3
	
    return retVal;
}
    dd52:	0028      	movs	r0, r5
    dd54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dd56:	46c0      	nop			; (mov r8, r8)
    dd58:	0000f2c5 	.word	0x0000f2c5
    dd5c:	0000f681 	.word	0x0000f681
    dd60:	0000dbb5 	.word	0x0000dbb5
    dd64:	0000c98d 	.word	0x0000c98d
    dd68:	0000cb29 	.word	0x0000cb29
    dd6c:	0000c9b5 	.word	0x0000c9b5
    dd70:	0000f2f9 	.word	0x0000f2f9
    dd74:	0000f7b1 	.word	0x0000f7b1

0000dd78 <Radio_ReadRssi>:

\param rssi	- The RSSI measured in the channel.
\return		- ERR_NONE. Other types are not used now.
*************************************************************************/
RadioError_t Radio_ReadRssi(int16_t *rssi)
{
    dd78:	b510      	push	{r4, lr}
    dd7a:	0004      	movs	r4, r0
	if (MODULATION_LORA == radioConfiguration.modulation)
    dd7c:	2334      	movs	r3, #52	; 0x34
    dd7e:	4a11      	ldr	r2, [pc, #68]	; (ddc4 <Radio_ReadRssi+0x4c>)
    dd80:	5cd3      	ldrb	r3, [r2, r3]
    dd82:	2b01      	cmp	r3, #1
    dd84:	d003      	beq.n	dd8e <Radio_ReadRssi+0x16>
		*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
	#endif // UT
	}
	else
	{
		return ERR_UNSUPPORTED_ATTR;
    dd86:	2006      	movs	r0, #6
	else if (MODULATION_FSK == radioConfiguration.modulation)
    dd88:	2b00      	cmp	r3, #0
    dd8a:	d012      	beq.n	ddb2 <Radio_ReadRssi+0x3a>
	}
	return ERR_NONE;
}
    dd8c:	bd10      	pop	{r4, pc}
		if (radioConfiguration.frequency >= HF_FREQ_HZ)
    dd8e:	4b0e      	ldr	r3, [pc, #56]	; (ddc8 <Radio_ReadRssi+0x50>)
    dd90:	6812      	ldr	r2, [r2, #0]
    dd92:	429a      	cmp	r2, r3
    dd94:	d906      	bls.n	dda4 <Radio_ReadRssi+0x2c>
			*rssi = RSSI_HF_OFFSET + RADIO_RegisterRead(REG_LORA_PKTRSSIVALUE);
    dd96:	201a      	movs	r0, #26
    dd98:	4b0c      	ldr	r3, [pc, #48]	; (ddcc <Radio_ReadRssi+0x54>)
    dd9a:	4798      	blx	r3
    dd9c:	389d      	subs	r0, #157	; 0x9d
    dd9e:	8020      	strh	r0, [r4, #0]
	return ERR_NONE;
    dda0:	2000      	movs	r0, #0
    dda2:	e7f3      	b.n	dd8c <Radio_ReadRssi+0x14>
			*rssi = RSSI_LF_OFFSET + RADIO_RegisterRead(REG_LORA_PKTRSSIVALUE);
    dda4:	201a      	movs	r0, #26
    dda6:	4b09      	ldr	r3, [pc, #36]	; (ddcc <Radio_ReadRssi+0x54>)
    dda8:	4798      	blx	r3
    ddaa:	38a4      	subs	r0, #164	; 0xa4
    ddac:	8020      	strh	r0, [r4, #0]
	return ERR_NONE;
    ddae:	2000      	movs	r0, #0
    ddb0:	e7ec      	b.n	dd8c <Radio_ReadRssi+0x14>
		*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
    ddb2:	300b      	adds	r0, #11
    ddb4:	4b05      	ldr	r3, [pc, #20]	; (ddcc <Radio_ReadRssi+0x54>)
    ddb6:	4798      	blx	r3
    ddb8:	0840      	lsrs	r0, r0, #1
    ddba:	b2c3      	uxtb	r3, r0
    ddbc:	425b      	negs	r3, r3
    ddbe:	8023      	strh	r3, [r4, #0]
	return ERR_NONE;
    ddc0:	2000      	movs	r0, #0
    ddc2:	e7e3      	b.n	dd8c <Radio_ReadRssi+0x14>
    ddc4:	20002d88 	.word	0x20002d88
    ddc8:	3361137f 	.word	0x3361137f
    ddcc:	0000c9b5 	.word	0x0000c9b5

0000ddd0 <Radio_ReadFSKRssi>:

\param rssi	- The RSSI measured in the channel.
\return		- ERR_NONE. Other types are not used now.
*************************************************************************/
RadioError_t Radio_ReadFSKRssi(int16_t *rssi)
{	
    ddd0:	b510      	push	{r4, lr}
    ddd2:	0004      	movs	r4, r0
#ifdef UT
	*rssi = testRssi;
#else // UT
	*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
    ddd4:	2011      	movs	r0, #17
    ddd6:	4b04      	ldr	r3, [pc, #16]	; (dde8 <Radio_ReadFSKRssi+0x18>)
    ddd8:	4798      	blx	r3
    ddda:	0840      	lsrs	r0, r0, #1
    dddc:	b2c0      	uxtb	r0, r0
    ddde:	4240      	negs	r0, r0
    dde0:	8020      	strh	r0, [r4, #0]
#endif // UT
	
	return ERR_NONE;
}
    dde2:	2000      	movs	r0, #0
    dde4:	bd10      	pop	{r4, pc}
    dde6:	46c0      	nop			; (mov r8, r8)
    dde8:	0000c9b5 	.word	0x0000c9b5

0000ddec <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    ddec:	b510      	push	{r4, lr}
	tmr_cca_callback();
    ddee:	4b01      	ldr	r3, [pc, #4]	; (ddf4 <tc_cca_callback+0x8>)
    ddf0:	4798      	blx	r3
}
    ddf2:	bd10      	pop	{r4, pc}
    ddf4:	00013975 	.word	0x00013975

0000ddf8 <tc_ovf_callback>:
{
    ddf8:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    ddfa:	4b01      	ldr	r3, [pc, #4]	; (de00 <tc_ovf_callback+0x8>)
    ddfc:	4798      	blx	r3
}
    ddfe:	bd10      	pop	{r4, pc}
    de00:	0001392d 	.word	0x0001392d

0000de04 <tmr_read_count>:
{
    de04:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    de06:	4802      	ldr	r0, [pc, #8]	; (de10 <tmr_read_count+0xc>)
    de08:	4b02      	ldr	r3, [pc, #8]	; (de14 <tmr_read_count+0x10>)
    de0a:	4798      	blx	r3
    de0c:	b280      	uxth	r0, r0
}
    de0e:	bd10      	pop	{r4, pc}
    de10:	20002e1c 	.word	0x20002e1c
    de14:	00006fb5 	.word	0x00006fb5

0000de18 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    de18:	4b03      	ldr	r3, [pc, #12]	; (de28 <tmr_disable_cc_interrupt+0x10>)
    de1a:	2110      	movs	r1, #16
    de1c:	681a      	ldr	r2, [r3, #0]
    de1e:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    de20:	7e5a      	ldrb	r2, [r3, #25]
    de22:	438a      	bics	r2, r1
    de24:	765a      	strb	r2, [r3, #25]
}
    de26:	4770      	bx	lr
    de28:	20002e1c 	.word	0x20002e1c

0000de2c <tmr_enable_cc_interrupt>:
{
    de2c:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    de2e:	4c0a      	ldr	r4, [pc, #40]	; (de58 <tmr_enable_cc_interrupt+0x2c>)
    de30:	6820      	ldr	r0, [r4, #0]
    de32:	4b0a      	ldr	r3, [pc, #40]	; (de5c <tmr_enable_cc_interrupt+0x30>)
    de34:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    de36:	4b0a      	ldr	r3, [pc, #40]	; (de60 <tmr_enable_cc_interrupt+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    de38:	5c1b      	ldrb	r3, [r3, r0]
    de3a:	221f      	movs	r2, #31
    de3c:	401a      	ands	r2, r3
    de3e:	2301      	movs	r3, #1
    de40:	4093      	lsls	r3, r2
    de42:	4a08      	ldr	r2, [pc, #32]	; (de64 <tmr_enable_cc_interrupt+0x38>)
    de44:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    de46:	7e63      	ldrb	r3, [r4, #25]
    de48:	2210      	movs	r2, #16
    de4a:	4313      	orrs	r3, r2
    de4c:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    de4e:	6823      	ldr	r3, [r4, #0]
    de50:	2210      	movs	r2, #16
    de52:	725a      	strb	r2, [r3, #9]
}
    de54:	bd10      	pop	{r4, pc}
    de56:	46c0      	nop			; (mov r8, r8)
    de58:	20002e1c 	.word	0x20002e1c
    de5c:	00006c89 	.word	0x00006c89
    de60:	0001901c 	.word	0x0001901c
    de64:	e000e100 	.word	0xe000e100

0000de68 <tmr_disable_ovf_interrupt>:
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(2);
		module->enable_callback_mask &= ~TC_INTFLAG_MC(2);
	}
	else {
		module->hw->COUNT8.INTENCLR.reg = (1 << callback_type);
    de68:	4b03      	ldr	r3, [pc, #12]	; (de78 <tmr_disable_ovf_interrupt+0x10>)
    de6a:	2101      	movs	r1, #1
    de6c:	681a      	ldr	r2, [r3, #0]
    de6e:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~(1 << callback_type);
    de70:	7e5a      	ldrb	r2, [r3, #25]
    de72:	438a      	bics	r2, r1
    de74:	765a      	strb	r2, [r3, #25]
}
    de76:	4770      	bx	lr
    de78:	20002e1c 	.word	0x20002e1c

0000de7c <tmr_enable_ovf_interrupt>:
{
    de7c:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    de7e:	4c0a      	ldr	r4, [pc, #40]	; (dea8 <tmr_enable_ovf_interrupt+0x2c>)
    de80:	6820      	ldr	r0, [r4, #0]
    de82:	4b0a      	ldr	r3, [pc, #40]	; (deac <tmr_enable_ovf_interrupt+0x30>)
    de84:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    de86:	4b0a      	ldr	r3, [pc, #40]	; (deb0 <tmr_enable_ovf_interrupt+0x34>)
    de88:	5c1a      	ldrb	r2, [r3, r0]
    de8a:	231f      	movs	r3, #31
    de8c:	4013      	ands	r3, r2
    de8e:	2201      	movs	r2, #1
    de90:	0011      	movs	r1, r2
    de92:	4099      	lsls	r1, r3
    de94:	4b07      	ldr	r3, [pc, #28]	; (deb4 <tmr_enable_ovf_interrupt+0x38>)
    de96:	6019      	str	r1, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    de98:	7e63      	ldrb	r3, [r4, #25]
    de9a:	2101      	movs	r1, #1
    de9c:	430b      	orrs	r3, r1
    de9e:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    dea0:	6823      	ldr	r3, [r4, #0]
    dea2:	725a      	strb	r2, [r3, #9]
}
    dea4:	bd10      	pop	{r4, pc}
    dea6:	46c0      	nop			; (mov r8, r8)
    dea8:	20002e1c 	.word	0x20002e1c
    deac:	00006c89 	.word	0x00006c89
    deb0:	0001901c 	.word	0x0001901c
    deb4:	e000e100 	.word	0xe000e100

0000deb8 <tmr_write_cmpreg>:
{
    deb8:	b510      	push	{r4, lr}
    deba:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    debc:	2100      	movs	r1, #0
    debe:	4802      	ldr	r0, [pc, #8]	; (dec8 <tmr_write_cmpreg+0x10>)
    dec0:	4b02      	ldr	r3, [pc, #8]	; (decc <tmr_write_cmpreg+0x14>)
    dec2:	4798      	blx	r3
}
    dec4:	bd10      	pop	{r4, pc}
    dec6:	46c0      	nop			; (mov r8, r8)
    dec8:	20002e1c 	.word	0x20002e1c
    decc:	00006ffd 	.word	0x00006ffd

0000ded0 <save_cpu_interrupt>:
{
    ded0:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    ded2:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    ded6:	425a      	negs	r2, r3
    ded8:	4153      	adcs	r3, r2
    deda:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    dedc:	b672      	cpsid	i
    dede:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    dee2:	2200      	movs	r2, #0
    dee4:	4b02      	ldr	r3, [pc, #8]	; (def0 <save_cpu_interrupt+0x20>)
    dee6:	701a      	strb	r2, [r3, #0]
	return flags;
    dee8:	9801      	ldr	r0, [sp, #4]
	return cpu_irq_save();
    deea:	b2c0      	uxtb	r0, r0
}
    deec:	b002      	add	sp, #8
    deee:	4770      	bx	lr
    def0:	20000008 	.word	0x20000008

0000def4 <restore_cpu_interrupt>:
	if (cpu_irq_is_enabled_flags(flags))
    def4:	2800      	cmp	r0, #0
    def6:	d005      	beq.n	df04 <restore_cpu_interrupt+0x10>
		cpu_irq_enable();
    def8:	2201      	movs	r2, #1
    defa:	4b03      	ldr	r3, [pc, #12]	; (df08 <restore_cpu_interrupt+0x14>)
    defc:	701a      	strb	r2, [r3, #0]
    defe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    df02:	b662      	cpsie	i
}
    df04:	4770      	bx	lr
    df06:	46c0      	nop			; (mov r8, r8)
    df08:	20000008 	.word	0x20000008

0000df0c <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    df0c:	b570      	push	{r4, r5, r6, lr}
	config->clock_source               = GCLK_GENERATOR_0;
    df0e:	4a33      	ldr	r2, [pc, #204]	; (dfdc <tmr_init+0xd0>)
    df10:	2100      	movs	r1, #0
    df12:	2300      	movs	r3, #0
    df14:	7011      	strb	r1, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    df16:	70d1      	strb	r1, [r2, #3]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    df18:	2000      	movs	r0, #0
    df1a:	8091      	strh	r1, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    df1c:	7190      	strb	r0, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    df1e:	71d3      	strb	r3, [r2, #7]
	config->run_in_standby             = false;
    df20:	7053      	strb	r3, [r2, #1]
	config->on_demand                  = false;
    df22:	7093      	strb	r3, [r2, #2]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    df24:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    df26:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    df28:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    df2a:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    df2c:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    df2e:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    df30:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    df32:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    df34:	6151      	str	r1, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    df36:	6191      	str	r1, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    df38:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    df3a:	6211      	str	r1, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    df3c:	6251      	str	r1, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    df3e:	8511      	strh	r1, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    df40:	8591      	strh	r1, [r2, #44]	; 0x2c
	config->double_buffering_enabled = false;
    df42:	2334      	movs	r3, #52	; 0x34
    df44:	54d0      	strb	r0, [r2, r3]
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    df46:	3b35      	subs	r3, #53	; 0x35
    df48:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    df4a:	4c25      	ldr	r4, [pc, #148]	; (dfe0 <tmr_init+0xd4>)
    df4c:	4925      	ldr	r1, [pc, #148]	; (dfe4 <tmr_init+0xd8>)
    df4e:	0020      	movs	r0, r4
    df50:	4b25      	ldr	r3, [pc, #148]	; (dfe8 <tmr_init+0xdc>)
    df52:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    df54:	2200      	movs	r2, #0
    df56:	4925      	ldr	r1, [pc, #148]	; (dfec <tmr_init+0xe0>)
    df58:	0020      	movs	r0, r4
    df5a:	4d25      	ldr	r5, [pc, #148]	; (dff0 <tmr_init+0xe4>)
    df5c:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    df5e:	2202      	movs	r2, #2
    df60:	4924      	ldr	r1, [pc, #144]	; (dff4 <tmr_init+0xe8>)
    df62:	0020      	movs	r0, r4
    df64:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    df66:	6820      	ldr	r0, [r4, #0]
    df68:	4b23      	ldr	r3, [pc, #140]	; (dff8 <tmr_init+0xec>)
    df6a:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    df6c:	4b23      	ldr	r3, [pc, #140]	; (dffc <tmr_init+0xf0>)
    df6e:	5c1a      	ldrb	r2, [r3, r0]
    df70:	231f      	movs	r3, #31
    df72:	4013      	ands	r3, r2
    df74:	2101      	movs	r1, #1
    df76:	000a      	movs	r2, r1
    df78:	409a      	lsls	r2, r3
    df7a:	4b21      	ldr	r3, [pc, #132]	; (e000 <tmr_init+0xf4>)
    df7c:	601a      	str	r2, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    df7e:	7e63      	ldrb	r3, [r4, #25]
    df80:	2201      	movs	r2, #1
    df82:	4313      	orrs	r3, r2
    df84:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    df86:	6822      	ldr	r2, [r4, #0]
    df88:	7251      	strb	r1, [r2, #9]
	return (tc_module->SYNCBUSY.reg);
    df8a:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    df8c:	2b00      	cmp	r3, #0
    df8e:	d1fc      	bne.n	df8a <tmr_init+0x7e>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    df90:	6813      	ldr	r3, [r2, #0]
    df92:	2102      	movs	r1, #2
    df94:	430b      	orrs	r3, r1
    df96:	6013      	str	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;	
    df98:	2000      	movs	r0, #0
    df9a:	4b1a      	ldr	r3, [pc, #104]	; (e004 <tmr_init+0xf8>)
    df9c:	4798      	blx	r3
    df9e:	4d1a      	ldr	r5, [pc, #104]	; (e008 <tmr_init+0xfc>)
    dfa0:	47a8      	blx	r5
    dfa2:	491a      	ldr	r1, [pc, #104]	; (e00c <tmr_init+0x100>)
    dfa4:	4b1a      	ldr	r3, [pc, #104]	; (e010 <tmr_init+0x104>)
    dfa6:	4798      	blx	r3
    dfa8:	1c04      	adds	r4, r0, #0
	#endif
	
	if ((timer_multiplier - (uint32_t)timer_multiplier) >= 0.5f)
    dfaa:	4b1a      	ldr	r3, [pc, #104]	; (e014 <tmr_init+0x108>)
    dfac:	4798      	blx	r3
    dfae:	47a8      	blx	r5
    dfb0:	1c01      	adds	r1, r0, #0
    dfb2:	1c20      	adds	r0, r4, #0
    dfb4:	4b18      	ldr	r3, [pc, #96]	; (e018 <tmr_init+0x10c>)
    dfb6:	4798      	blx	r3
    dfb8:	21fc      	movs	r1, #252	; 0xfc
    dfba:	0589      	lsls	r1, r1, #22
    dfbc:	4b17      	ldr	r3, [pc, #92]	; (e01c <tmr_init+0x110>)
    dfbe:	4798      	blx	r3
    dfc0:	2800      	cmp	r0, #0
    dfc2:	d005      	beq.n	dfd0 <tmr_init+0xc4>
	{
		timer_multiplier += 1.0f;
    dfc4:	21fe      	movs	r1, #254	; 0xfe
    dfc6:	0589      	lsls	r1, r1, #22
    dfc8:	1c20      	adds	r0, r4, #0
    dfca:	4b15      	ldr	r3, [pc, #84]	; (e020 <tmr_init+0x114>)
    dfcc:	4798      	blx	r3
    dfce:	1c04      	adds	r4, r0, #0
	}
	
	return (uint8_t) timer_multiplier;
    dfd0:	1c20      	adds	r0, r4, #0
    dfd2:	4b10      	ldr	r3, [pc, #64]	; (e014 <tmr_init+0x108>)
    dfd4:	4798      	blx	r3
    dfd6:	b2c0      	uxtb	r0, r0
}
    dfd8:	bd70      	pop	{r4, r5, r6, pc}
    dfda:	46c0      	nop			; (mov r8, r8)
    dfdc:	20002de4 	.word	0x20002de4
    dfe0:	20002e1c 	.word	0x20002e1c
    dfe4:	42002000 	.word	0x42002000
    dfe8:	00006cc5 	.word	0x00006cc5
    dfec:	0000ddf9 	.word	0x0000ddf9
    dff0:	00006bc1 	.word	0x00006bc1
    dff4:	0000dded 	.word	0x0000dded
    dff8:	00006c89 	.word	0x00006c89
    dffc:	0001901c 	.word	0x0001901c
    e000:	e000e100 	.word	0xe000e100
    e004:	00006989 	.word	0x00006989
    e008:	00014ddd 	.word	0x00014ddd
    e00c:	49742400 	.word	0x49742400
    e010:	000143a5 	.word	0x000143a5
    e014:	00013e55 	.word	0x00013e55
    e018:	000149c5 	.word	0x000149c5
    e01c:	00013dad 	.word	0x00013dad
    e020:	00014081 	.word	0x00014081

0000e024 <edbg_eui_read_eui64>:
#define LEN_EUI    256
uint8_t readbuf[LEN_EUI];

uint8_t *
edbg_eui_read_eui64(void)
{
    e024:	b570      	push	{r4, r5, r6, lr}
    e026:	b090      	sub	sp, #64	; 0x40
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    e028:	aa03      	add	r2, sp, #12
    e02a:	2364      	movs	r3, #100	; 0x64
    e02c:	9303      	str	r3, [sp, #12]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    e02e:	4b54      	ldr	r3, [pc, #336]	; (e180 <edbg_eui_read_eui64+0x15c>)
    e030:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    e032:	2300      	movs	r3, #0
    e034:	6093      	str	r3, [r2, #8]
	config->generator_source = GCLK_GENERATOR_0;
    e036:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    e038:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    e03a:	2180      	movs	r1, #128	; 0x80
    e03c:	0389      	lsls	r1, r1, #14
    e03e:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
    e040:	2101      	movs	r1, #1
    e042:	4249      	negs	r1, r1
    e044:	82d1      	strh	r1, [r2, #22]
	config->unknown_bus_state_timeout = 65535;
    e046:	8291      	strh	r1, [r2, #20]
	config->scl_low_timeout  = false;
    e048:	3125      	adds	r1, #37	; 0x25
    e04a:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    e04c:	6293      	str	r3, [r2, #40]	; 0x28
	config->scl_stretch_only_after_ack_bit = false;
    e04e:	3108      	adds	r1, #8
    e050:	5453      	strb	r3, [r2, r1]
	config->slave_scl_low_extend_timeout   = false;
    e052:	3101      	adds	r1, #1
    e054:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    e056:	3101      	adds	r1, #1
    e058:	5453      	strb	r3, [r2, r1]
	config->sda_scl_rise_time_ns = 215;
    e05a:	33d7      	adds	r3, #215	; 0xd7
    e05c:	8613      	strh	r3, [r2, #48]	; 0x30
  int timeout2 = 0;
  bool random_mac_address = false;
  uint8_t edbg_status = 0xFF;
  struct i2c_master_config config_i2c_master;
  i2c_master_get_config_defaults(&config_i2c_master);
  config_i2c_master.pinmux_pad0  = EDBG_I2C_SERCOM_PINMUX_PAD0;
    e05e:	4b49      	ldr	r3, [pc, #292]	; (e184 <edbg_eui_read_eui64+0x160>)
    e060:	61d3      	str	r3, [r2, #28]
  config_i2c_master.pinmux_pad1  = EDBG_I2C_SERCOM_PINMUX_PAD1;
    e062:	4b49      	ldr	r3, [pc, #292]	; (e188 <edbg_eui_read_eui64+0x164>)
    e064:	6213      	str	r3, [r2, #32]

  i2c_master_init(&i2c_master_instance, EDBG_I2C_MODULE, &config_i2c_master);
    e066:	4c49      	ldr	r4, [pc, #292]	; (e18c <edbg_eui_read_eui64+0x168>)
    e068:	4949      	ldr	r1, [pc, #292]	; (e190 <edbg_eui_read_eui64+0x16c>)
    e06a:	0020      	movs	r0, r4
    e06c:	4b49      	ldr	r3, [pc, #292]	; (e194 <edbg_eui_read_eui64+0x170>)
    e06e:	4798      	blx	r3
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    e070:	6822      	ldr	r2, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    e072:	2107      	movs	r1, #7
    e074:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
    e076:	4219      	tst	r1, r3
    e078:	d1fc      	bne.n	e074 <edbg_eui_read_eui64+0x50>
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    e07a:	6813      	ldr	r3, [r2, #0]
    e07c:	2102      	movs	r1, #2
    e07e:	430b      	orrs	r3, r1
    e080:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    e082:	4b42      	ldr	r3, [pc, #264]	; (e18c <edbg_eui_read_eui64+0x168>)
    e084:	88dc      	ldrh	r4, [r3, #6]
	uint32_t timeout_counter = 0;
    e086:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    e088:	2010      	movs	r0, #16
    e08a:	8b51      	ldrh	r1, [r2, #26]
    e08c:	4201      	tst	r1, r0
    e08e:	d104      	bne.n	e09a <edbg_eui_read_eui64+0x76>
		timeout_counter++;
    e090:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    e092:	42a3      	cmp	r3, r4
    e094:	d3f9      	bcc.n	e08a <edbg_eui_read_eui64+0x66>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    e096:	2310      	movs	r3, #16
    e098:	8353      	strh	r3, [r2, #26]

  i2c_master_enable(&i2c_master_instance);

  struct i2c_master_packet packet = {
    e09a:	466a      	mov	r2, sp
    e09c:	4b3e      	ldr	r3, [pc, #248]	; (e198 <edbg_eui_read_eui64+0x174>)
    e09e:	cb13      	ldmia	r3!, {r0, r1, r4}
    e0a0:	c213      	stmia	r2!, {r0, r1, r4}
  int timeout2 = 0;
    e0a2:	2600      	movs	r6, #0
    .hs_master_code  = 0x0,
  };
   
    do
    {
	    edbg_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &packet);
    e0a4:	4c39      	ldr	r4, [pc, #228]	; (e18c <edbg_eui_read_eui64+0x168>)
    e0a6:	4d3d      	ldr	r5, [pc, #244]	; (e19c <edbg_eui_read_eui64+0x178>)
    e0a8:	e003      	b.n	e0b2 <edbg_eui_read_eui64+0x8e>
	    if(edbg_status == STATUS_ERR_BAD_ADDRESS)
		{
			if(timeout2++ == SLAVE_WAIT_TIMEOUT)
    e0aa:	1c73      	adds	r3, r6, #1
    e0ac:	2e0a      	cmp	r6, #10
    e0ae:	d033      	beq.n	e118 <edbg_eui_read_eui64+0xf4>
    e0b0:	001e      	movs	r6, r3
	    edbg_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &packet);
    e0b2:	4669      	mov	r1, sp
    e0b4:	0020      	movs	r0, r4
    e0b6:	47a8      	blx	r5
	    if(edbg_status == STATUS_ERR_BAD_ADDRESS)
    e0b8:	2818      	cmp	r0, #24
    e0ba:	d0f6      	beq.n	e0aa <edbg_eui_read_eui64+0x86>
				random_mac_address = true;
				timeout2 = 0;
				break;
			}
		}
		else if(edbg_status == STATUS_ERR_TIMEOUT) {
    e0bc:	2812      	cmp	r0, #18
    e0be:	d02f      	beq.n	e120 <edbg_eui_read_eui64+0xfc>
		PRINTF("Timeout 1\n");
		random_mac_address = true;	
		break;
		}
    } while (edbg_status!=STATUS_OK && edbg_status!=0xFF);
    e0c0:	3801      	subs	r0, #1
    e0c2:	b2c0      	uxtb	r0, r0
    e0c4:	28fd      	cmp	r0, #253	; 0xfd
    e0c6:	d9f4      	bls.n	e0b2 <edbg_eui_read_eui64+0x8e>
	
  packet.data = readbuf;
    e0c8:	4b35      	ldr	r3, [pc, #212]	; (e1a0 <edbg_eui_read_eui64+0x17c>)
    e0ca:	9301      	str	r3, [sp, #4]
  packet.data_length = sizeof(readbuf);
    e0cc:	2380      	movs	r3, #128	; 0x80
    e0ce:	005b      	lsls	r3, r3, #1
    e0d0:	466a      	mov	r2, sp
    e0d2:	8053      	strh	r3, [r2, #2]
if(random_mac_address == false)
{
  do 
  {
	  edbg_status = i2c_master_read_packet_wait(&i2c_master_instance, &packet) ;
    e0d4:	4c2d      	ldr	r4, [pc, #180]	; (e18c <edbg_eui_read_eui64+0x168>)
    e0d6:	4d33      	ldr	r5, [pc, #204]	; (e1a4 <edbg_eui_read_eui64+0x180>)
    e0d8:	4669      	mov	r1, sp
    e0da:	0020      	movs	r0, r4
    e0dc:	47a8      	blx	r5
	    if(edbg_status==STATUS_ERR_BAD_ADDRESS)
    e0de:	2818      	cmp	r0, #24
    e0e0:	d043      	beq.n	e16a <edbg_eui_read_eui64+0x146>
	    {			
			PRINTF("I2C Slave Not Available");
			random_mac_address = true;	
		    break;
	    }
		else if(edbg_status == STATUS_ERR_TIMEOUT) {
    e0e2:	2812      	cmp	r0, #18
    e0e4:	d048      	beq.n	e178 <edbg_eui_read_eui64+0x154>
			random_mac_address = true;	
			PRINTF("Timeout 2\n");
			break;
		}		
  } while (edbg_status!=STATUS_OK && edbg_status!=0xFF);
    e0e6:	3801      	subs	r0, #1
    e0e8:	b2c0      	uxtb	r0, r0
    e0ea:	28fd      	cmp	r0, #253	; 0xfd
    e0ec:	d9f4      	bls.n	e0d8 <edbg_eui_read_eui64+0xb4>
}
  i2c_master_reset(&i2c_master_instance);
    e0ee:	4827      	ldr	r0, [pc, #156]	; (e18c <edbg_eui_read_eui64+0x168>)
    e0f0:	4b2d      	ldr	r3, [pc, #180]	; (e1a8 <edbg_eui_read_eui64+0x184>)
    e0f2:	4798      	blx	r3
  if(random_mac_address || !(readbuf[0] ^ readbuf[1] ^ readbuf[2] ^ readbuf[3] ^ readbuf[4] ^ readbuf[5] ^ readbuf[6] ^ readbuf[7]))
    e0f4:	4a2a      	ldr	r2, [pc, #168]	; (e1a0 <edbg_eui_read_eui64+0x17c>)
    e0f6:	7813      	ldrb	r3, [r2, #0]
    e0f8:	7851      	ldrb	r1, [r2, #1]
    e0fa:	404b      	eors	r3, r1
    e0fc:	7891      	ldrb	r1, [r2, #2]
    e0fe:	404b      	eors	r3, r1
    e100:	78d1      	ldrb	r1, [r2, #3]
    e102:	404b      	eors	r3, r1
    e104:	7911      	ldrb	r1, [r2, #4]
    e106:	404b      	eors	r3, r1
    e108:	7951      	ldrb	r1, [r2, #5]
    e10a:	404b      	eors	r3, r1
    e10c:	7991      	ldrb	r1, [r2, #6]
    e10e:	79d2      	ldrb	r2, [r2, #7]
    e110:	404b      	eors	r3, r1
    e112:	429a      	cmp	r2, r3
    e114:	d126      	bne.n	e164 <edbg_eui_read_eui64+0x140>
    e116:	e00f      	b.n	e138 <edbg_eui_read_eui64+0x114>
				PRINTF("I2C Slave Not Available");
    e118:	4824      	ldr	r0, [pc, #144]	; (e1ac <edbg_eui_read_eui64+0x188>)
    e11a:	4b25      	ldr	r3, [pc, #148]	; (e1b0 <edbg_eui_read_eui64+0x18c>)
    e11c:	4798      	blx	r3
				break;
    e11e:	e002      	b.n	e126 <edbg_eui_read_eui64+0x102>
		PRINTF("Timeout 1\n");
    e120:	4824      	ldr	r0, [pc, #144]	; (e1b4 <edbg_eui_read_eui64+0x190>)
    e122:	4b25      	ldr	r3, [pc, #148]	; (e1b8 <edbg_eui_read_eui64+0x194>)
    e124:	4798      	blx	r3
  packet.data = readbuf;
    e126:	4b1e      	ldr	r3, [pc, #120]	; (e1a0 <edbg_eui_read_eui64+0x17c>)
    e128:	9301      	str	r3, [sp, #4]
  packet.data_length = sizeof(readbuf);
    e12a:	2380      	movs	r3, #128	; 0x80
    e12c:	005b      	lsls	r3, r3, #1
    e12e:	466a      	mov	r2, sp
    e130:	8053      	strh	r3, [r2, #2]
  i2c_master_reset(&i2c_master_instance);
    e132:	4816      	ldr	r0, [pc, #88]	; (e18c <edbg_eui_read_eui64+0x168>)
    e134:	4b1c      	ldr	r3, [pc, #112]	; (e1a8 <edbg_eui_read_eui64+0x184>)
    e136:	4798      	blx	r3
  {
	  unsigned int seed;
	  seed = ((*S_NO_WORD0) ^ (*S_NO_WORD1) ^ (*S_NO_WORD2) ^ (*S_NO_WORD3));
    e138:	4b20      	ldr	r3, [pc, #128]	; (e1bc <edbg_eui_read_eui64+0x198>)
    e13a:	6818      	ldr	r0, [r3, #0]
    e13c:	4b20      	ldr	r3, [pc, #128]	; (e1c0 <edbg_eui_read_eui64+0x19c>)
    e13e:	681b      	ldr	r3, [r3, #0]
    e140:	4058      	eors	r0, r3
    e142:	4b20      	ldr	r3, [pc, #128]	; (e1c4 <edbg_eui_read_eui64+0x1a0>)
    e144:	681b      	ldr	r3, [r3, #0]
    e146:	4058      	eors	r0, r3
    e148:	4b1f      	ldr	r3, [pc, #124]	; (e1c8 <edbg_eui_read_eui64+0x1a4>)
    e14a:	681b      	ldr	r3, [r3, #0]
    e14c:	4058      	eors	r0, r3
	  srand(seed);
    e14e:	4b1f      	ldr	r3, [pc, #124]	; (e1cc <edbg_eui_read_eui64+0x1a8>)
    e150:	4798      	blx	r3
    e152:	4c13      	ldr	r4, [pc, #76]	; (e1a0 <edbg_eui_read_eui64+0x17c>)
    e154:	0026      	movs	r6, r4
    e156:	3608      	adds	r6, #8
	  //printf("\r\n Generating Random MAC \r\n");
	  for (uint8_t i = 0; i < 8; i++) {
		  *(readbuf+i) = rand();
    e158:	4d1d      	ldr	r5, [pc, #116]	; (e1d0 <edbg_eui_read_eui64+0x1ac>)
    e15a:	47a8      	blx	r5
    e15c:	7020      	strb	r0, [r4, #0]
    e15e:	3401      	adds	r4, #1
	  for (uint8_t i = 0; i < 8; i++) {
    e160:	42a6      	cmp	r6, r4
    e162:	d1fa      	bne.n	e15a <edbg_eui_read_eui64+0x136>
	  }
	  
  }
  return readbuf;
}
    e164:	480e      	ldr	r0, [pc, #56]	; (e1a0 <edbg_eui_read_eui64+0x17c>)
    e166:	b010      	add	sp, #64	; 0x40
    e168:	bd70      	pop	{r4, r5, r6, pc}
			PRINTF("I2C Slave Not Available");
    e16a:	4810      	ldr	r0, [pc, #64]	; (e1ac <edbg_eui_read_eui64+0x188>)
    e16c:	4b10      	ldr	r3, [pc, #64]	; (e1b0 <edbg_eui_read_eui64+0x18c>)
    e16e:	4798      	blx	r3
  i2c_master_reset(&i2c_master_instance);
    e170:	4806      	ldr	r0, [pc, #24]	; (e18c <edbg_eui_read_eui64+0x168>)
    e172:	4b0d      	ldr	r3, [pc, #52]	; (e1a8 <edbg_eui_read_eui64+0x184>)
    e174:	4798      	blx	r3
    e176:	e7df      	b.n	e138 <edbg_eui_read_eui64+0x114>
			PRINTF("Timeout 2\n");
    e178:	4816      	ldr	r0, [pc, #88]	; (e1d4 <edbg_eui_read_eui64+0x1b0>)
    e17a:	4b0f      	ldr	r3, [pc, #60]	; (e1b8 <edbg_eui_read_eui64+0x194>)
    e17c:	4798      	blx	r3
			break;
    e17e:	e7f7      	b.n	e170 <edbg_eui_read_eui64+0x14c>
    e180:	00000d48 	.word	0x00000d48
    e184:	00100002 	.word	0x00100002
    e188:	00110002 	.word	0x00110002
    e18c:	20002f38 	.word	0x20002f38
    e190:	42000400 	.word	0x42000400
    e194:	00004e0d 	.word	0x00004e0d
    e198:	00019024 	.word	0x00019024
    e19c:	00005439 	.word	0x00005439
    e1a0:	20002e38 	.word	0x20002e38
    e1a4:	00005425 	.word	0x00005425
    e1a8:	000050e9 	.word	0x000050e9
    e1ac:	00019030 	.word	0x00019030
    e1b0:	00017201 	.word	0x00017201
    e1b4:	00019048 	.word	0x00019048
    e1b8:	0001731d 	.word	0x0001731d
    e1bc:	0080a00c 	.word	0x0080a00c
    e1c0:	0080a040 	.word	0x0080a040
    e1c4:	0080a044 	.word	0x0080a044
    e1c8:	0080a048 	.word	0x0080a048
    e1cc:	00017331 	.word	0x00017331
    e1d0:	0001738d 	.word	0x0001738d
    e1d4:	00019054 	.word	0x00019054

0000e1d8 <nvm_init>:

	return STATUS_OK;
}

status_code_t nvm_init(mem_type_t mem)
{
    e1d8:	b500      	push	{lr}
    e1da:	b083      	sub	sp, #12
	if (INT_FLASH == mem) {
    e1dc:	2800      	cmp	r0, #0
    e1de:	d110      	bne.n	e202 <nvm_init+0x2a>
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    e1e0:	2300      	movs	r3, #0
    e1e2:	466a      	mov	r2, sp
    e1e4:	7013      	strb	r3, [r2, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    e1e6:	4a08      	ldr	r2, [pc, #32]	; (e208 <nvm_init+0x30>)
    e1e8:	6852      	ldr	r2, [r2, #4]
	config->disable_cache     = false;
    e1ea:	466a      	mov	r2, sp
    e1ec:	70d3      	strb	r3, [r2, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    e1ee:	7113      	strb	r3, [r2, #4]
		struct nvm_config config;
		/* Get the default configuration */
		nvm_get_config_defaults(&config);

		/* Enable automatic page write mode */
		config.manual_page_write = false;
    e1f0:	7053      	strb	r3, [r2, #1]

		/* Set wait state to 1 */
		config.wait_states = 2;
    e1f2:	3302      	adds	r3, #2
    e1f4:	7093      	strb	r3, [r2, #2]

		/* Set the NVM configuration */
		nvm_set_config(&config);
    e1f6:	4668      	mov	r0, sp
    e1f8:	4b04      	ldr	r3, [pc, #16]	; (e20c <nvm_init+0x34>)
    e1fa:	4798      	blx	r3

		return STATUS_OK;
    e1fc:	2000      	movs	r0, #0
	}

	return ERR_INVALID_ARG;
}
    e1fe:	b003      	add	sp, #12
    e200:	bd00      	pop	{pc}
	return ERR_INVALID_ARG;
    e202:	2008      	movs	r0, #8
    e204:	4240      	negs	r0, r0
    e206:	e7fa      	b.n	e1fe <nvm_init+0x26>
    e208:	41004000 	.word	0x41004000
    e20c:	00004a05 	.word	0x00004a05

0000e210 <UART_LoRa_rx_cb>:
}

void UART_LoRa_rx_cb(struct usart_module *const usart_module)
{
	
}
    e210:	4770      	bx	lr
    e212:	Address 0x0000e212 is out of bounds.


0000e214 <UART_IO_rx_cb>:
{
	port_pin_toggle_output_level(LED_1_PIN);
}

void UART_IO_rx_cb(struct usart_module *const usart_module)
{
    e214:	b510      	push	{r4, lr}
	T_SendReceivedUARTMessage(rx_buffer_IO[0]);
    e216:	4b03      	ldr	r3, [pc, #12]	; (e224 <UART_IO_rx_cb+0x10>)
    e218:	7818      	ldrb	r0, [r3, #0]
    e21a:	b2c0      	uxtb	r0, r0
    e21c:	4b02      	ldr	r3, [pc, #8]	; (e228 <UART_IO_rx_cb+0x14>)
    e21e:	4798      	blx	r3
}
    e220:	bd10      	pop	{r4, pc}
    e222:	46c0      	nop			; (mov r8, r8)
    e224:	20001fa8 	.word	0x20001fa8
    e228:	000077e5 	.word	0x000077e5

0000e22c <UART_LoRa_init>:
{
    e22c:	b530      	push	{r4, r5, lr}
    e22e:	b091      	sub	sp, #68	; 0x44
	config->data_order       = USART_DATAORDER_LSB;
    e230:	2380      	movs	r3, #128	; 0x80
    e232:	05db      	lsls	r3, r3, #23
    e234:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    e236:	2300      	movs	r3, #0
    e238:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    e23a:	22ff      	movs	r2, #255	; 0xff
    e23c:	4669      	mov	r1, sp
    e23e:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    e240:	2200      	movs	r2, #0
    e242:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    e244:	72cb      	strb	r3, [r1, #11]
	config->receiver_enable  = true;
    e246:	2101      	movs	r1, #1
    e248:	2024      	movs	r0, #36	; 0x24
    e24a:	466c      	mov	r4, sp
    e24c:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    e24e:	3001      	adds	r0, #1
    e250:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    e252:	3125      	adds	r1, #37	; 0x25
    e254:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    e256:	3101      	adds	r1, #1
    e258:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    e25a:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    e25c:	3105      	adds	r1, #5
    e25e:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    e260:	3101      	adds	r1, #1
    e262:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    e264:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    e266:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    e268:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    e26a:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    e26c:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    e26e:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    e270:	2313      	movs	r3, #19
    e272:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    e274:	7762      	strb	r2, [r4, #29]
	config_uart_LoRa.baudrate    = UART_BAUD;
    e276:	23e1      	movs	r3, #225	; 0xe1
    e278:	025b      	lsls	r3, r3, #9
    e27a:	9308      	str	r3, [sp, #32]
	config_uart_LoRa.mux_setting = USART_RX_1_TX_0_XCK_1; //RX - TX position ref: https://asf.microchip.com/docs/latest/common.services.fs.fatfs.access_example.saml21_xplained_pro/html/asfdoc_sam0_sercom_usart_mux_settings.html
    e27c:	2380      	movs	r3, #128	; 0x80
    e27e:	035b      	lsls	r3, r3, #13
    e280:	9303      	str	r3, [sp, #12]
	config_uart_LoRa.pinmux_pad0 = PINMUX_PA22C_SERCOM3_PAD0;	// TX - PA22
    e282:	4b12      	ldr	r3, [pc, #72]	; (e2cc <UART_LoRa_init+0xa0>)
    e284:	930c      	str	r3, [sp, #48]	; 0x30
	config_uart_LoRa.pinmux_pad1 = PINMUX_PA23C_SERCOM3_PAD1;	// RX - PA23
    e286:	4b12      	ldr	r3, [pc, #72]	; (e2d0 <UART_LoRa_init+0xa4>)
    e288:	930d      	str	r3, [sp, #52]	; 0x34
	config_uart_LoRa.pinmux_pad2 = PINMUX_UNUSED;				// UNUSED
    e28a:	2301      	movs	r3, #1
    e28c:	425b      	negs	r3, r3
    e28e:	930e      	str	r3, [sp, #56]	; 0x38
	config_uart_LoRa.pinmux_pad3 = PINMUX_UNUSED;				// UNUSED
    e290:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&UART_LoRa,SERCOM3, &config_uart_LoRa) != STATUS_OK) {}
    e292:	4d10      	ldr	r5, [pc, #64]	; (e2d4 <UART_LoRa_init+0xa8>)
    e294:	4c10      	ldr	r4, [pc, #64]	; (e2d8 <UART_LoRa_init+0xac>)
    e296:	466a      	mov	r2, sp
    e298:	4910      	ldr	r1, [pc, #64]	; (e2dc <UART_LoRa_init+0xb0>)
    e29a:	0028      	movs	r0, r5
    e29c:	47a0      	blx	r4
    e29e:	2800      	cmp	r0, #0
    e2a0:	d1f9      	bne.n	e296 <UART_LoRa_init+0x6a>
	SercomUsart *const usart_hw = &(module->hw->USART);
    e2a2:	4d0c      	ldr	r5, [pc, #48]	; (e2d4 <UART_LoRa_init+0xa8>)
    e2a4:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    e2a6:	0020      	movs	r0, r4
    e2a8:	4b0d      	ldr	r3, [pc, #52]	; (e2e0 <UART_LoRa_init+0xb4>)
    e2aa:	4798      	blx	r3
    e2ac:	231f      	movs	r3, #31
    e2ae:	4018      	ands	r0, r3
    e2b0:	3b1e      	subs	r3, #30
    e2b2:	4083      	lsls	r3, r0
    e2b4:	4a0b      	ldr	r2, [pc, #44]	; (e2e4 <UART_LoRa_init+0xb8>)
    e2b6:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    e2b8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    e2ba:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    e2bc:	2b00      	cmp	r3, #0
    e2be:	d1fc      	bne.n	e2ba <UART_LoRa_init+0x8e>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    e2c0:	6823      	ldr	r3, [r4, #0]
    e2c2:	2202      	movs	r2, #2
    e2c4:	4313      	orrs	r3, r2
    e2c6:	6023      	str	r3, [r4, #0]
}
    e2c8:	b011      	add	sp, #68	; 0x44
    e2ca:	bd30      	pop	{r4, r5, pc}
    e2cc:	00160002 	.word	0x00160002
    e2d0:	00170002 	.word	0x00170002
    e2d4:	20001fac 	.word	0x20001fac
    e2d8:	00005cb5 	.word	0x00005cb5
    e2dc:	42000c00 	.word	0x42000c00
    e2e0:	000057e5 	.word	0x000057e5
    e2e4:	e000e100 	.word	0xe000e100

0000e2e8 <UART_IO_init>:
{
    e2e8:	b530      	push	{r4, r5, lr}
    e2ea:	b091      	sub	sp, #68	; 0x44
	config->data_order       = USART_DATAORDER_LSB;
    e2ec:	2380      	movs	r3, #128	; 0x80
    e2ee:	05db      	lsls	r3, r3, #23
    e2f0:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    e2f2:	2300      	movs	r3, #0
    e2f4:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    e2f6:	22ff      	movs	r2, #255	; 0xff
    e2f8:	4669      	mov	r1, sp
    e2fa:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    e2fc:	2200      	movs	r2, #0
    e2fe:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    e300:	72cb      	strb	r3, [r1, #11]
	config->receiver_enable  = true;
    e302:	2101      	movs	r1, #1
    e304:	2024      	movs	r0, #36	; 0x24
    e306:	466c      	mov	r4, sp
    e308:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    e30a:	3001      	adds	r0, #1
    e30c:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    e30e:	3125      	adds	r1, #37	; 0x25
    e310:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    e312:	3101      	adds	r1, #1
    e314:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    e316:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    e318:	3105      	adds	r1, #5
    e31a:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    e31c:	3101      	adds	r1, #1
    e31e:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    e320:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    e322:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    e324:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    e326:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    e328:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    e32a:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    e32c:	2313      	movs	r3, #19
    e32e:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    e330:	7762      	strb	r2, [r4, #29]
	config_uart_IO.baudrate    = UART_BAUD;
    e332:	23e1      	movs	r3, #225	; 0xe1
    e334:	025b      	lsls	r3, r3, #9
    e336:	9308      	str	r3, [sp, #32]
	config_uart_IO.mux_setting = USART_RX_3_TX_0_XCK_1;		// SERCOM5
    e338:	23c0      	movs	r3, #192	; 0xc0
    e33a:	039b      	lsls	r3, r3, #14
    e33c:	9303      	str	r3, [sp, #12]
	config_uart_IO.pinmux_pad0 = PINMUX_PB02D_SERCOM5_PAD0; // TX - PB02
    e33e:	4b12      	ldr	r3, [pc, #72]	; (e388 <UART_IO_init+0xa0>)
    e340:	930c      	str	r3, [sp, #48]	; 0x30
	config_uart_IO.pinmux_pad1 = PINMUX_UNUSED;				// UNUSED
    e342:	2301      	movs	r3, #1
    e344:	425b      	negs	r3, r3
    e346:	930d      	str	r3, [sp, #52]	; 0x34
	config_uart_IO.pinmux_pad2 = PINMUX_UNUSED;				// UNUSED
    e348:	930e      	str	r3, [sp, #56]	; 0x38
	config_uart_IO.pinmux_pad3 = PINMUX_PB23D_SERCOM5_PAD3; // RX - PB23
    e34a:	4b10      	ldr	r3, [pc, #64]	; (e38c <UART_IO_init+0xa4>)
    e34c:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&UART_IO,SERCOM5, &config_uart_IO) != STATUS_OK) {}
    e34e:	4d10      	ldr	r5, [pc, #64]	; (e390 <UART_IO_init+0xa8>)
    e350:	4c10      	ldr	r4, [pc, #64]	; (e394 <UART_IO_init+0xac>)
    e352:	466a      	mov	r2, sp
    e354:	4910      	ldr	r1, [pc, #64]	; (e398 <UART_IO_init+0xb0>)
    e356:	0028      	movs	r0, r5
    e358:	47a0      	blx	r4
    e35a:	2800      	cmp	r0, #0
    e35c:	d1f9      	bne.n	e352 <UART_IO_init+0x6a>
	SercomUsart *const usart_hw = &(module->hw->USART);
    e35e:	4d0c      	ldr	r5, [pc, #48]	; (e390 <UART_IO_init+0xa8>)
    e360:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    e362:	0020      	movs	r0, r4
    e364:	4b0d      	ldr	r3, [pc, #52]	; (e39c <UART_IO_init+0xb4>)
    e366:	4798      	blx	r3
    e368:	231f      	movs	r3, #31
    e36a:	4018      	ands	r0, r3
    e36c:	3b1e      	subs	r3, #30
    e36e:	4083      	lsls	r3, r0
    e370:	4a0b      	ldr	r2, [pc, #44]	; (e3a0 <UART_IO_init+0xb8>)
    e372:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    e374:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    e376:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    e378:	2b00      	cmp	r3, #0
    e37a:	d1fc      	bne.n	e376 <UART_IO_init+0x8e>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    e37c:	6823      	ldr	r3, [r4, #0]
    e37e:	2202      	movs	r2, #2
    e380:	4313      	orrs	r3, r2
    e382:	6023      	str	r3, [r4, #0]
}
    e384:	b011      	add	sp, #68	; 0x44
    e386:	bd30      	pop	{r4, r5, pc}
    e388:	00220003 	.word	0x00220003
    e38c:	00370003 	.word	0x00370003
    e390:	20001f74 	.word	0x20001f74
    e394:	00005cb5 	.word	0x00005cb5
    e398:	43000400 	.word	0x43000400
    e39c:	000057e5 	.word	0x000057e5
    e3a0:	e000e100 	.word	0xe000e100

0000e3a4 <UART_init>:
{
    e3a4:	b510      	push	{r4, lr}
	UART_LoRa_init();
    e3a6:	4b02      	ldr	r3, [pc, #8]	; (e3b0 <UART_init+0xc>)
    e3a8:	4798      	blx	r3
	UART_IO_init();
    e3aa:	4b02      	ldr	r3, [pc, #8]	; (e3b4 <UART_init+0x10>)
    e3ac:	4798      	blx	r3
}
    e3ae:	bd10      	pop	{r4, pc}
    e3b0:	0000e22d 	.word	0x0000e22d
    e3b4:	0000e2e9 	.word	0x0000e2e9

0000e3b8 <UART_LoRa_cb_init>:
{
    e3b8:	b510      	push	{r4, lr}
	usart_register_callback(&UART_LoRa,UART_LoRa_rx_cb, USART_CALLBACK_BUFFER_RECEIVED);
    e3ba:	4c06      	ldr	r4, [pc, #24]	; (e3d4 <UART_LoRa_cb_init+0x1c>)
    e3bc:	2201      	movs	r2, #1
    e3be:	4906      	ldr	r1, [pc, #24]	; (e3d8 <UART_LoRa_cb_init+0x20>)
    e3c0:	0020      	movs	r0, r4
    e3c2:	4b06      	ldr	r3, [pc, #24]	; (e3dc <UART_LoRa_cb_init+0x24>)
    e3c4:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    e3c6:	2231      	movs	r2, #49	; 0x31
    e3c8:	5ca3      	ldrb	r3, [r4, r2]
    e3ca:	2102      	movs	r1, #2
    e3cc:	430b      	orrs	r3, r1
    e3ce:	54a3      	strb	r3, [r4, r2]
}
    e3d0:	bd10      	pop	{r4, pc}
    e3d2:	46c0      	nop			; (mov r8, r8)
    e3d4:	20001fac 	.word	0x20001fac
    e3d8:	0000e211 	.word	0x0000e211
    e3dc:	00006265 	.word	0x00006265

0000e3e0 <UART_IO_cb_init>:
{
    e3e0:	b510      	push	{r4, lr}
	usart_register_callback(&UART_IO,UART_IO_rx_cb, USART_CALLBACK_BUFFER_RECEIVED);
    e3e2:	4c06      	ldr	r4, [pc, #24]	; (e3fc <UART_IO_cb_init+0x1c>)
    e3e4:	2201      	movs	r2, #1
    e3e6:	4906      	ldr	r1, [pc, #24]	; (e400 <UART_IO_cb_init+0x20>)
    e3e8:	0020      	movs	r0, r4
    e3ea:	4b06      	ldr	r3, [pc, #24]	; (e404 <UART_IO_cb_init+0x24>)
    e3ec:	4798      	blx	r3
    e3ee:	2231      	movs	r2, #49	; 0x31
    e3f0:	5ca3      	ldrb	r3, [r4, r2]
    e3f2:	2102      	movs	r1, #2
    e3f4:	430b      	orrs	r3, r1
    e3f6:	54a3      	strb	r3, [r4, r2]
}
    e3f8:	bd10      	pop	{r4, pc}
    e3fa:	46c0      	nop			; (mov r8, r8)
    e3fc:	20001f74 	.word	0x20001f74
    e400:	0000e215 	.word	0x0000e215
    e404:	00006265 	.word	0x00006265

0000e408 <UART_cb_init>:
{
    e408:	b510      	push	{r4, lr}
	UART_LoRa_cb_init();
    e40a:	4b02      	ldr	r3, [pc, #8]	; (e414 <UART_cb_init+0xc>)
    e40c:	4798      	blx	r3
	UART_IO_cb_init();
    e40e:	4b02      	ldr	r3, [pc, #8]	; (e418 <UART_cb_init+0x10>)
    e410:	4798      	blx	r3
}
    e412:	bd10      	pop	{r4, pc}
    e414:	0000e3b9 	.word	0x0000e3b9
    e418:	0000e3e1 	.word	0x0000e3e1

0000e41c <UART_SAM_To_RPi>:

void UART_SAM_To_RPi(uint8_t* data)
{
    e41c:	b510      	push	{r4, lr}
    e41e:	0001      	movs	r1, r0
	usart_write_buffer_wait(&UART_LoRa, data, 1);
    e420:	2201      	movs	r2, #1
    e422:	4802      	ldr	r0, [pc, #8]	; (e42c <UART_SAM_To_RPi+0x10>)
    e424:	4b02      	ldr	r3, [pc, #8]	; (e430 <UART_SAM_To_RPi+0x14>)
    e426:	4798      	blx	r3
}
    e428:	bd10      	pop	{r4, pc}
    e42a:	46c0      	nop			; (mov r8, r8)
    e42c:	20001fac 	.word	0x20001fac
    e430:	000060bd 	.word	0x000060bd

0000e434 <UART_SAM_To_IO>:

void UART_SAM_To_IO(uint8_t* data)
 {
    e434:	b510      	push	{r4, lr}
    e436:	0001      	movs	r1, r0
	usart_write_buffer_wait(&UART_IO, data, 1);
    e438:	2201      	movs	r2, #1
    e43a:	4802      	ldr	r0, [pc, #8]	; (e444 <UART_SAM_To_IO+0x10>)
    e43c:	4b02      	ldr	r3, [pc, #8]	; (e448 <UART_SAM_To_IO+0x14>)
    e43e:	4798      	blx	r3
    e440:	bd10      	pop	{r4, pc}
    e442:	46c0      	nop			; (mov r8, r8)
    e444:	20001f74 	.word	0x20001f74
    e448:	000060bd 	.word	0x000060bd

0000e44c <LORAWAN_TxHandler>:
    e44c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e44e:	b087      	sub	sp, #28
    e450:	466b      	mov	r3, sp
    e452:	2501      	movs	r5, #1
    e454:	4c2f      	ldr	r4, [pc, #188]	; (e514 <LORAWAN_TxHandler+0xc8>)
    e456:	701d      	strb	r5, [r3, #0]
    e458:	0023      	movs	r3, r4
    e45a:	466a      	mov	r2, sp
    e45c:	33e9      	adds	r3, #233	; 0xe9
    e45e:	781b      	ldrb	r3, [r3, #0]
    e460:	4669      	mov	r1, sp
    e462:	7053      	strb	r3, [r2, #1]
    e464:	0023      	movs	r3, r4
    e466:	33e7      	adds	r3, #231	; 0xe7
    e468:	781b      	ldrb	r3, [r3, #0]
    e46a:	202e      	movs	r0, #46	; 0x2e
    e46c:	7093      	strb	r3, [r2, #2]
    e46e:	aa03      	add	r2, sp, #12
    e470:	4b29      	ldr	r3, [pc, #164]	; (e518 <LORAWAN_TxHandler+0xcc>)
    e472:	4798      	blx	r3
    e474:	2808      	cmp	r0, #8
    e476:	d004      	beq.n	e482 <LORAWAN_TxHandler+0x36>
    e478:	4b28      	ldr	r3, [pc, #160]	; (e51c <LORAWAN_TxHandler+0xd0>)
    e47a:	4798      	blx	r3
    e47c:	2000      	movs	r0, #0
    e47e:	b007      	add	sp, #28
    e480:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e482:	0023      	movs	r3, r4
    e484:	33fd      	adds	r3, #253	; 0xfd
    e486:	781b      	ldrb	r3, [r3, #0]
    e488:	ae01      	add	r6, sp, #4
    e48a:	2b04      	cmp	r3, #4
    e48c:	d103      	bne.n	e496 <LORAWAN_TxHandler+0x4a>
    e48e:	0030      	movs	r0, r6
    e490:	4b23      	ldr	r3, [pc, #140]	; (e520 <LORAWAN_TxHandler+0xd4>)
    e492:	7035      	strb	r5, [r6, #0]
    e494:	4798      	blx	r3
    e496:	4b23      	ldr	r3, [pc, #140]	; (e524 <LORAWAN_TxHandler+0xd8>)
    e498:	9803      	ldr	r0, [sp, #12]
    e49a:	9904      	ldr	r1, [sp, #16]
    e49c:	9a05      	ldr	r2, [sp, #20]
    e49e:	4798      	blx	r3
    e4a0:	0023      	movs	r3, r4
    e4a2:	33fc      	adds	r3, #252	; 0xfc
    e4a4:	68dd      	ldr	r5, [r3, #12]
    e4a6:	4f20      	ldr	r7, [pc, #128]	; (e528 <LORAWAN_TxHandler+0xdc>)
    e4a8:	4b20      	ldr	r3, [pc, #128]	; (e52c <LORAWAN_TxHandler+0xe0>)
    e4aa:	2d00      	cmp	r5, #0
    e4ac:	d023      	beq.n	e4f6 <LORAWAN_TxHandler+0xaa>
    e4ae:	2201      	movs	r2, #1
    e4b0:	54e2      	strb	r2, [r4, r3]
    e4b2:	7828      	ldrb	r0, [r5, #0]
    e4b4:	7a2b      	ldrb	r3, [r5, #8]
    e4b6:	1e42      	subs	r2, r0, #1
    e4b8:	4190      	sbcs	r0, r2
    e4ba:	7869      	ldrb	r1, [r5, #1]
    e4bc:	686a      	ldr	r2, [r5, #4]
    e4be:	b2c0      	uxtb	r0, r0
    e4c0:	47b8      	blx	r7
    e4c2:	0023      	movs	r3, r4
    e4c4:	33ce      	adds	r3, #206	; 0xce
    e4c6:	881b      	ldrh	r3, [r3, #0]
    e4c8:	0030      	movs	r0, r6
    e4ca:	7033      	strb	r3, [r6, #0]
    e4cc:	4b18      	ldr	r3, [pc, #96]	; (e530 <LORAWAN_TxHandler+0xe4>)
    e4ce:	6073      	str	r3, [r6, #4]
    e4d0:	4b18      	ldr	r3, [pc, #96]	; (e534 <LORAWAN_TxHandler+0xe8>)
    e4d2:	4798      	blx	r3
    e4d4:	2800      	cmp	r0, #0
    e4d6:	d114      	bne.n	e502 <LORAWAN_TxHandler+0xb6>
    e4d8:	0021      	movs	r1, r4
    e4da:	220e      	movs	r2, #14
    e4dc:	3184      	adds	r1, #132	; 0x84
    e4de:	780b      	ldrb	r3, [r1, #0]
    e4e0:	4393      	bics	r3, r2
    e4e2:	001a      	movs	r2, r3
    e4e4:	2302      	movs	r3, #2
    e4e6:	4313      	orrs	r3, r2
    e4e8:	700b      	strb	r3, [r1, #0]
    e4ea:	2208      	movs	r2, #8
    e4ec:	3494      	adds	r4, #148	; 0x94
    e4ee:	7823      	ldrb	r3, [r4, #0]
    e4f0:	4393      	bics	r3, r2
    e4f2:	7023      	strb	r3, [r4, #0]
    e4f4:	e7c2      	b.n	e47c <LORAWAN_TxHandler+0x30>
    e4f6:	54e5      	strb	r5, [r4, r3]
    e4f8:	002a      	movs	r2, r5
    e4fa:	002b      	movs	r3, r5
    e4fc:	0029      	movs	r1, r5
    e4fe:	0028      	movs	r0, r5
    e500:	e7de      	b.n	e4c0 <LORAWAN_TxHandler+0x74>
    e502:	0022      	movs	r2, r4
    e504:	2120      	movs	r1, #32
    e506:	3294      	adds	r2, #148	; 0x94
    e508:	7813      	ldrb	r3, [r2, #0]
    e50a:	438b      	bics	r3, r1
    e50c:	7013      	strb	r3, [r2, #0]
    e50e:	4b03      	ldr	r3, [pc, #12]	; (e51c <LORAWAN_TxHandler+0xd0>)
    e510:	4798      	blx	r3
    e512:	e7ea      	b.n	e4ea <LORAWAN_TxHandler+0x9e>
    e514:	20003180 	.word	0x20003180
    e518:	0000d031 	.word	0x0000d031
    e51c:	00011291 	.word	0x00011291
    e520:	0000f9c1 	.word	0x0000f9c1
    e524:	00010e29 	.word	0x00010e29
    e528:	00012db5 	.word	0x00012db5
    e52c:	0000022a 	.word	0x0000022a
    e530:	200033d8 	.word	0x200033d8
    e534:	0000f0e5 	.word	0x0000f0e5

0000e538 <LORAWAN_JoinReqHandler>:
    e538:	b530      	push	{r4, r5, lr}
    e53a:	b087      	sub	sp, #28
    e53c:	466a      	mov	r2, sp
    e53e:	2300      	movs	r3, #0
    e540:	4c25      	ldr	r4, [pc, #148]	; (e5d8 <LORAWAN_JoinReqHandler+0xa0>)
    e542:	7013      	strb	r3, [r2, #0]
    e544:	0023      	movs	r3, r4
    e546:	33e9      	adds	r3, #233	; 0xe9
    e548:	781b      	ldrb	r3, [r3, #0]
    e54a:	7053      	strb	r3, [r2, #1]
    e54c:	0023      	movs	r3, r4
    e54e:	33e7      	adds	r3, #231	; 0xe7
    e550:	781b      	ldrb	r3, [r3, #0]
    e552:	7093      	strb	r3, [r2, #2]
    e554:	0023      	movs	r3, r4
    e556:	33ff      	adds	r3, #255	; 0xff
    e558:	7f5b      	ldrb	r3, [r3, #29]
    e55a:	069b      	lsls	r3, r3, #26
    e55c:	d507      	bpl.n	e56e <LORAWAN_JoinReqHandler+0x36>
    e55e:	6f63      	ldr	r3, [r4, #116]	; 0x74
    e560:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    e562:	4313      	orrs	r3, r2
    e564:	d103      	bne.n	e56e <LORAWAN_JoinReqHandler+0x36>
    e566:	0023      	movs	r3, r4
    e568:	2201      	movs	r2, #1
    e56a:	3380      	adds	r3, #128	; 0x80
    e56c:	701a      	strb	r2, [r3, #0]
    e56e:	aa03      	add	r2, sp, #12
    e570:	4669      	mov	r1, sp
    e572:	202e      	movs	r0, #46	; 0x2e
    e574:	4b19      	ldr	r3, [pc, #100]	; (e5dc <LORAWAN_JoinReqHandler+0xa4>)
    e576:	4798      	blx	r3
    e578:	2808      	cmp	r0, #8
    e57a:	d004      	beq.n	e586 <LORAWAN_JoinReqHandler+0x4e>
    e57c:	4b18      	ldr	r3, [pc, #96]	; (e5e0 <LORAWAN_JoinReqHandler+0xa8>)
    e57e:	4798      	blx	r3
    e580:	2000      	movs	r0, #0
    e582:	b007      	add	sp, #28
    e584:	bd30      	pop	{r4, r5, pc}
    e586:	4b17      	ldr	r3, [pc, #92]	; (e5e4 <LORAWAN_JoinReqHandler+0xac>)
    e588:	9803      	ldr	r0, [sp, #12]
    e58a:	9904      	ldr	r1, [sp, #16]
    e58c:	9a05      	ldr	r2, [sp, #20]
    e58e:	4798      	blx	r3
    e590:	0023      	movs	r3, r4
    e592:	33fd      	adds	r3, #253	; 0xfd
    e594:	781b      	ldrb	r3, [r3, #0]
    e596:	ad01      	add	r5, sp, #4
    e598:	2b04      	cmp	r3, #4
    e59a:	d104      	bne.n	e5a6 <LORAWAN_JoinReqHandler+0x6e>
    e59c:	3b03      	subs	r3, #3
    e59e:	702b      	strb	r3, [r5, #0]
    e5a0:	0028      	movs	r0, r5
    e5a2:	4b11      	ldr	r3, [pc, #68]	; (e5e8 <LORAWAN_JoinReqHandler+0xb0>)
    e5a4:	4798      	blx	r3
    e5a6:	2200      	movs	r2, #0
    e5a8:	4b10      	ldr	r3, [pc, #64]	; (e5ec <LORAWAN_JoinReqHandler+0xb4>)
    e5aa:	54e2      	strb	r2, [r4, r3]
    e5ac:	4b10      	ldr	r3, [pc, #64]	; (e5f0 <LORAWAN_JoinReqHandler+0xb8>)
    e5ae:	4798      	blx	r3
    e5b0:	4b10      	ldr	r3, [pc, #64]	; (e5f4 <LORAWAN_JoinReqHandler+0xbc>)
    e5b2:	7028      	strb	r0, [r5, #0]
    e5b4:	606b      	str	r3, [r5, #4]
    e5b6:	0028      	movs	r0, r5
    e5b8:	4b0f      	ldr	r3, [pc, #60]	; (e5f8 <LORAWAN_JoinReqHandler+0xc0>)
    e5ba:	4798      	blx	r3
    e5bc:	2800      	cmp	r0, #0
    e5be:	d001      	beq.n	e5c4 <LORAWAN_JoinReqHandler+0x8c>
    e5c0:	201b      	movs	r0, #27
    e5c2:	e7db      	b.n	e57c <LORAWAN_JoinReqHandler+0x44>
    e5c4:	220e      	movs	r2, #14
    e5c6:	3484      	adds	r4, #132	; 0x84
    e5c8:	7823      	ldrb	r3, [r4, #0]
    e5ca:	4393      	bics	r3, r2
    e5cc:	001a      	movs	r2, r3
    e5ce:	2302      	movs	r3, #2
    e5d0:	4313      	orrs	r3, r2
    e5d2:	7023      	strb	r3, [r4, #0]
    e5d4:	e7d4      	b.n	e580 <LORAWAN_JoinReqHandler+0x48>
    e5d6:	46c0      	nop			; (mov r8, r8)
    e5d8:	20003180 	.word	0x20003180
    e5dc:	0000d031 	.word	0x0000d031
    e5e0:	000108f1 	.word	0x000108f1
    e5e4:	00010e29 	.word	0x00010e29
    e5e8:	0000f9c1 	.word	0x0000f9c1
    e5ec:	0000022a 	.word	0x0000022a
    e5f0:	00010ced 	.word	0x00010ced
    e5f4:	200033c8 	.word	0x200033c8
    e5f8:	0000f0e5 	.word	0x0000f0e5

0000e5fc <LORAWAN_RxHandler>:
    e5fc:	b513      	push	{r0, r1, r4, lr}
    e5fe:	4b0c      	ldr	r3, [pc, #48]	; (e630 <LORAWAN_RxHandler+0x34>)
    e600:	781b      	ldrb	r3, [r3, #0]
    e602:	2b08      	cmp	r3, #8
    e604:	d011      	beq.n	e62a <LORAWAN_RxHandler+0x2e>
    e606:	2b10      	cmp	r3, #16
    e608:	d001      	beq.n	e60e <LORAWAN_RxHandler+0x12>
    e60a:	2b01      	cmp	r3, #1
    e60c:	d10b      	bne.n	e626 <LORAWAN_RxHandler+0x2a>
    e60e:	466b      	mov	r3, sp
    e610:	1c9c      	adds	r4, r3, #2
    e612:	0021      	movs	r1, r4
    e614:	a801      	add	r0, sp, #4
    e616:	4b07      	ldr	r3, [pc, #28]	; (e634 <LORAWAN_RxHandler+0x38>)
    e618:	4798      	blx	r3
    e61a:	9801      	ldr	r0, [sp, #4]
    e61c:	2800      	cmp	r0, #0
    e61e:	d002      	beq.n	e626 <LORAWAN_RxHandler+0x2a>
    e620:	7821      	ldrb	r1, [r4, #0]
    e622:	4b05      	ldr	r3, [pc, #20]	; (e638 <LORAWAN_RxHandler+0x3c>)
    e624:	4798      	blx	r3
    e626:	2000      	movs	r0, #0
    e628:	bd16      	pop	{r1, r2, r4, pc}
    e62a:	4b04      	ldr	r3, [pc, #16]	; (e63c <LORAWAN_RxHandler+0x40>)
    e62c:	4798      	blx	r3
    e62e:	e7fa      	b.n	e626 <LORAWAN_RxHandler+0x2a>
    e630:	2000225b 	.word	0x2000225b
    e634:	0000f2b1 	.word	0x0000f2b1
    e638:	00011d11 	.word	0x00011d11
    e63c:	00011625 	.word	0x00011625

0000e640 <LORAWAN_PostTask>:
    e640:	b510      	push	{r4, lr}
    e642:	4b08      	ldr	r3, [pc, #32]	; (e664 <LORAWAN_PostTask+0x24>)
    e644:	0004      	movs	r4, r0
    e646:	4798      	blx	r3
    e648:	2201      	movs	r2, #1
    e64a:	40a2      	lsls	r2, r4
    e64c:	4906      	ldr	r1, [pc, #24]	; (e668 <LORAWAN_PostTask+0x28>)
    e64e:	780b      	ldrb	r3, [r1, #0]
    e650:	4313      	orrs	r3, r2
    e652:	b2db      	uxtb	r3, r3
    e654:	700b      	strb	r3, [r1, #0]
    e656:	4b05      	ldr	r3, [pc, #20]	; (e66c <LORAWAN_PostTask+0x2c>)
    e658:	4798      	blx	r3
    e65a:	2004      	movs	r0, #4
    e65c:	4b04      	ldr	r3, [pc, #16]	; (e670 <LORAWAN_PostTask+0x30>)
    e65e:	4798      	blx	r3
    e660:	bd10      	pop	{r4, pc}
    e662:	46c0      	nop			; (mov r8, r8)
    e664:	0000cb45 	.word	0x0000cb45
    e668:	20001e9a 	.word	0x20001e9a
    e66c:	0000cb51 	.word	0x0000cb51
    e670:	0000db91 	.word	0x0000db91

0000e674 <LORAWAN_TaskHandler>:
    e674:	b570      	push	{r4, r5, r6, lr}
    e676:	2601      	movs	r6, #1
    e678:	4d0e      	ldr	r5, [pc, #56]	; (e6b4 <LORAWAN_TaskHandler+0x40>)
    e67a:	e015      	b.n	e6a8 <LORAWAN_TaskHandler+0x34>
    e67c:	2400      	movs	r4, #0
    e67e:	782b      	ldrb	r3, [r5, #0]
    e680:	4123      	asrs	r3, r4
    e682:	4233      	tst	r3, r6
    e684:	d00d      	beq.n	e6a2 <LORAWAN_TaskHandler+0x2e>
    e686:	4b0c      	ldr	r3, [pc, #48]	; (e6b8 <LORAWAN_TaskHandler+0x44>)
    e688:	4798      	blx	r3
    e68a:	0032      	movs	r2, r6
    e68c:	40a2      	lsls	r2, r4
    e68e:	782b      	ldrb	r3, [r5, #0]
    e690:	00a4      	lsls	r4, r4, #2
    e692:	4393      	bics	r3, r2
    e694:	702b      	strb	r3, [r5, #0]
    e696:	4b09      	ldr	r3, [pc, #36]	; (e6bc <LORAWAN_TaskHandler+0x48>)
    e698:	4798      	blx	r3
    e69a:	4b09      	ldr	r3, [pc, #36]	; (e6c0 <LORAWAN_TaskHandler+0x4c>)
    e69c:	58e3      	ldr	r3, [r4, r3]
    e69e:	4798      	blx	r3
    e6a0:	e7ea      	b.n	e678 <LORAWAN_TaskHandler+0x4>
    e6a2:	3401      	adds	r4, #1
    e6a4:	2c03      	cmp	r4, #3
    e6a6:	d1ea      	bne.n	e67e <LORAWAN_TaskHandler+0xa>
    e6a8:	7828      	ldrb	r0, [r5, #0]
    e6aa:	b2c0      	uxtb	r0, r0
    e6ac:	2800      	cmp	r0, #0
    e6ae:	d1e5      	bne.n	e67c <LORAWAN_TaskHandler+0x8>
    e6b0:	bd70      	pop	{r4, r5, r6, pc}
    e6b2:	46c0      	nop			; (mov r8, r8)
    e6b4:	20001e9a 	.word	0x20001e9a
    e6b8:	0000cb45 	.word	0x0000cb45
    e6bc:	0000cb51 	.word	0x0000cb51
    e6c0:	00019060 	.word	0x00019060

0000e6c4 <RADIO_GetAttr>:
    e6c4:	b510      	push	{r4, lr}
    e6c6:	000b      	movs	r3, r1
    e6c8:	281f      	cmp	r0, #31
    e6ca:	d900      	bls.n	e6ce <RADIO_GetAttr+0xa>
    e6cc:	e069      	b.n	e7a2 <RADIO_GetAttr+0xde>
    e6ce:	f005 f96b 	bl	139a8 <__gnu_thumb1_case_uqi>
    e6d2:	1410      	.short	0x1410
    e6d4:	68201c19 	.word	0x68201c19
    e6d8:	312e2a27 	.word	0x312e2a27
    e6dc:	3d3a3734 	.word	0x3d3a3734
    e6e0:	46434054 	.word	0x46434054
    e6e4:	68245149 	.word	0x68245149
    e6e8:	68686859 	.word	0x68686859
    e6ec:	5c686817 	.word	0x5c686817
    e6f0:	6360      	.short	0x6360
    e6f2:	4a2d      	ldr	r2, [pc, #180]	; (e7a8 <RADIO_GetAttr+0xe4>)
    e6f4:	7e12      	ldrb	r2, [r2, #24]
    e6f6:	701a      	strb	r2, [r3, #0]
    e6f8:	e002      	b.n	e700 <RADIO_GetAttr+0x3c>
    e6fa:	4a2b      	ldr	r2, [pc, #172]	; (e7a8 <RADIO_GetAttr+0xe4>)
    e6fc:	6812      	ldr	r2, [r2, #0]
    e6fe:	601a      	str	r2, [r3, #0]
    e700:	2000      	movs	r0, #0
    e702:	bd10      	pop	{r4, pc}
    e704:	4a28      	ldr	r2, [pc, #160]	; (e7a8 <RADIO_GetAttr+0xe4>)
    e706:	6852      	ldr	r2, [r2, #4]
    e708:	e7f9      	b.n	e6fe <RADIO_GetAttr+0x3a>
    e70a:	4a27      	ldr	r2, [pc, #156]	; (e7a8 <RADIO_GetAttr+0xe4>)
    e70c:	8a92      	ldrh	r2, [r2, #20]
    e70e:	801a      	strh	r2, [r3, #0]
    e710:	e7f6      	b.n	e700 <RADIO_GetAttr+0x3c>
    e712:	4a25      	ldr	r2, [pc, #148]	; (e7a8 <RADIO_GetAttr+0xe4>)
    e714:	3203      	adds	r2, #3
    e716:	7fd2      	ldrb	r2, [r2, #31]
    e718:	e7ed      	b.n	e6f6 <RADIO_GetAttr+0x32>
    e71a:	4a23      	ldr	r2, [pc, #140]	; (e7a8 <RADIO_GetAttr+0xe4>)
    e71c:	3204      	adds	r2, #4
    e71e:	e7fa      	b.n	e716 <RADIO_GetAttr+0x52>
    e720:	4a21      	ldr	r2, [pc, #132]	; (e7a8 <RADIO_GetAttr+0xe4>)
    e722:	3206      	adds	r2, #6
    e724:	e7f7      	b.n	e716 <RADIO_GetAttr+0x52>
    e726:	4a20      	ldr	r2, [pc, #128]	; (e7a8 <RADIO_GetAttr+0xe4>)
    e728:	3236      	adds	r2, #54	; 0x36
    e72a:	7812      	ldrb	r2, [r2, #0]
    e72c:	e7e3      	b.n	e6f6 <RADIO_GetAttr+0x32>
    e72e:	4a1e      	ldr	r2, [pc, #120]	; (e7a8 <RADIO_GetAttr+0xe4>)
    e730:	3205      	adds	r2, #5
    e732:	e7f0      	b.n	e716 <RADIO_GetAttr+0x52>
    e734:	4a1c      	ldr	r2, [pc, #112]	; (e7a8 <RADIO_GetAttr+0xe4>)
    e736:	3234      	adds	r2, #52	; 0x34
    e738:	e7f7      	b.n	e72a <RADIO_GetAttr+0x66>
    e73a:	4a1b      	ldr	r2, [pc, #108]	; (e7a8 <RADIO_GetAttr+0xe4>)
    e73c:	8ad2      	ldrh	r2, [r2, #22]
    e73e:	e7e6      	b.n	e70e <RADIO_GetAttr+0x4a>
    e740:	4a19      	ldr	r2, [pc, #100]	; (e7a8 <RADIO_GetAttr+0xe4>)
    e742:	3233      	adds	r2, #51	; 0x33
    e744:	e7f1      	b.n	e72a <RADIO_GetAttr+0x66>
    e746:	4a18      	ldr	r2, [pc, #96]	; (e7a8 <RADIO_GetAttr+0xe4>)
    e748:	68d2      	ldr	r2, [r2, #12]
    e74a:	e7d8      	b.n	e6fe <RADIO_GetAttr+0x3a>
    e74c:	4a16      	ldr	r2, [pc, #88]	; (e7a8 <RADIO_GetAttr+0xe4>)
    e74e:	6892      	ldr	r2, [r2, #8]
    e750:	e7d5      	b.n	e6fe <RADIO_GetAttr+0x3a>
    e752:	4a15      	ldr	r2, [pc, #84]	; (e7a8 <RADIO_GetAttr+0xe4>)
    e754:	3237      	adds	r2, #55	; 0x37
    e756:	e7e8      	b.n	e72a <RADIO_GetAttr+0x66>
    e758:	4a13      	ldr	r2, [pc, #76]	; (e7a8 <RADIO_GetAttr+0xe4>)
    e75a:	3238      	adds	r2, #56	; 0x38
    e75c:	e7e5      	b.n	e72a <RADIO_GetAttr+0x66>
    e75e:	4a12      	ldr	r2, [pc, #72]	; (e7a8 <RADIO_GetAttr+0xe4>)
    e760:	3239      	adds	r2, #57	; 0x39
    e762:	e7e2      	b.n	e72a <RADIO_GetAttr+0x66>
    e764:	4a10      	ldr	r2, [pc, #64]	; (e7a8 <RADIO_GetAttr+0xe4>)
    e766:	4911      	ldr	r1, [pc, #68]	; (e7ac <RADIO_GetAttr+0xe8>)
    e768:	3202      	adds	r2, #2
    e76a:	7fd2      	ldrb	r2, [r2, #31]
    e76c:	0018      	movs	r0, r3
    e76e:	4b10      	ldr	r3, [pc, #64]	; (e7b0 <RADIO_GetAttr+0xec>)
    e770:	4798      	blx	r3
    e772:	e7c5      	b.n	e700 <RADIO_GetAttr+0x3c>
    e774:	4a0c      	ldr	r2, [pc, #48]	; (e7a8 <RADIO_GetAttr+0xe4>)
    e776:	3202      	adds	r2, #2
    e778:	e7cd      	b.n	e716 <RADIO_GetAttr+0x52>
    e77a:	4a0b      	ldr	r2, [pc, #44]	; (e7a8 <RADIO_GetAttr+0xe4>)
    e77c:	3232      	adds	r2, #50	; 0x32
    e77e:	7812      	ldrb	r2, [r2, #0]
    e780:	b252      	sxtb	r2, r2
    e782:	e7b8      	b.n	e6f6 <RADIO_GetAttr+0x32>
    e784:	4a08      	ldr	r2, [pc, #32]	; (e7a8 <RADIO_GetAttr+0xe4>)
    e786:	3235      	adds	r2, #53	; 0x35
    e788:	e7cf      	b.n	e72a <RADIO_GetAttr+0x66>
    e78a:	4907      	ldr	r1, [pc, #28]	; (e7a8 <RADIO_GetAttr+0xe4>)
    e78c:	2206      	movs	r2, #6
    e78e:	313c      	adds	r1, #60	; 0x3c
    e790:	e7ec      	b.n	e76c <RADIO_GetAttr+0xa8>
    e792:	4a05      	ldr	r2, [pc, #20]	; (e7a8 <RADIO_GetAttr+0xe4>)
    e794:	3254      	adds	r2, #84	; 0x54
    e796:	e7c8      	b.n	e72a <RADIO_GetAttr+0x66>
    e798:	4a03      	ldr	r2, [pc, #12]	; (e7a8 <RADIO_GetAttr+0xe4>)
    e79a:	3256      	adds	r2, #86	; 0x56
    e79c:	2100      	movs	r1, #0
    e79e:	5e52      	ldrsh	r2, [r2, r1]
    e7a0:	e7b5      	b.n	e70e <RADIO_GetAttr+0x4a>
    e7a2:	2005      	movs	r0, #5
    e7a4:	e7ad      	b.n	e702 <RADIO_GetAttr+0x3e>
    e7a6:	46c0      	nop			; (mov r8, r8)
    e7a8:	20002d88 	.word	0x20002d88
    e7ac:	20002da1 	.word	0x20002da1
    e7b0:	00016c47 	.word	0x00016c47

0000e7b4 <RADIO_SetAttr>:
    e7b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e7b6:	4b71      	ldr	r3, [pc, #452]	; (e97c <RADIO_SetAttr+0x1c8>)
    e7b8:	0004      	movs	r4, r0
    e7ba:	000d      	movs	r5, r1
    e7bc:	4798      	blx	r3
    e7be:	2304      	movs	r3, #4
    e7c0:	2801      	cmp	r0, #1
    e7c2:	d11a      	bne.n	e7fa <RADIO_SetAttr+0x46>
    e7c4:	2c1d      	cmp	r4, #29
    e7c6:	d900      	bls.n	e7ca <RADIO_SetAttr+0x16>
    e7c8:	e0d5      	b.n	e976 <RADIO_SetAttr+0x1c2>
    e7ca:	0020      	movs	r0, r4
    e7cc:	f005 f8ec 	bl	139a8 <__gnu_thumb1_case_uqi>
    e7d0:	605c4844 	.word	0x605c4844
    e7d4:	7770d364 	.word	0x7770d364
    e7d8:	908c8480 	.word	0x908c8480
    e7dc:	a0d39c99 	.word	0xa0d39c99
    e7e0:	c2bab1a8 	.word	0xc2bab1a8
    e7e4:	d3cad369 	.word	0xd3cad369
    e7e8:	d30fd3d3 	.word	0xd30fd3d3
    e7ec:	17d3      	.short	0x17d3
    e7ee:	2303      	movs	r3, #3
    e7f0:	2d00      	cmp	r5, #0
    e7f2:	d002      	beq.n	e7fa <RADIO_SetAttr+0x46>
    e7f4:	4b62      	ldr	r3, [pc, #392]	; (e980 <RADIO_SetAttr+0x1cc>)
    e7f6:	611d      	str	r5, [r3, #16]
    e7f8:	2300      	movs	r3, #0
    e7fa:	0018      	movs	r0, r3
    e7fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e7fe:	796c      	ldrb	r4, [r5, #5]
    e800:	2c00      	cmp	r4, #0
    e802:	d109      	bne.n	e818 <RADIO_SetAttr+0x64>
    e804:	4b5e      	ldr	r3, [pc, #376]	; (e980 <RADIO_SetAttr+0x1cc>)
    e806:	001a      	movs	r2, r3
    e808:	649c      	str	r4, [r3, #72]	; 0x48
    e80a:	879c      	strh	r4, [r3, #60]	; 0x3c
    e80c:	87dc      	strh	r4, [r3, #62]	; 0x3e
    e80e:	3240      	adds	r2, #64	; 0x40
    e810:	3341      	adds	r3, #65	; 0x41
    e812:	7014      	strb	r4, [r2, #0]
    e814:	701c      	strb	r4, [r3, #0]
    e816:	e7ef      	b.n	e7f8 <RADIO_SetAttr+0x44>
    e818:	882f      	ldrh	r7, [r5, #0]
    e81a:	2303      	movs	r3, #3
    e81c:	2f00      	cmp	r7, #0
    e81e:	d0ec      	beq.n	e7fa <RADIO_SetAttr+0x46>
    e820:	792e      	ldrb	r6, [r5, #4]
    e822:	2e00      	cmp	r6, #0
    e824:	d0e9      	beq.n	e7fa <RADIO_SetAttr+0x46>
    e826:	20fa      	movs	r0, #250	; 0xfa
    e828:	2202      	movs	r2, #2
    e82a:	5eab      	ldrsh	r3, [r5, r2]
    e82c:	0080      	lsls	r0, r0, #2
    e82e:	0031      	movs	r1, r6
    e830:	9301      	str	r3, [sp, #4]
    e832:	4378      	muls	r0, r7
    e834:	4b53      	ldr	r3, [pc, #332]	; (e984 <RADIO_SetAttr+0x1d0>)
    e836:	4798      	blx	r3
    e838:	4b53      	ldr	r3, [pc, #332]	; (e988 <RADIO_SetAttr+0x1d4>)
    e83a:	4798      	blx	r3
    e83c:	4b53      	ldr	r3, [pc, #332]	; (e98c <RADIO_SetAttr+0x1d8>)
    e83e:	4798      	blx	r3
    e840:	466b      	mov	r3, sp
    e842:	4d4f      	ldr	r5, [pc, #316]	; (e980 <RADIO_SetAttr+0x1cc>)
    e844:	889b      	ldrh	r3, [r3, #4]
    e846:	64a8      	str	r0, [r5, #72]	; 0x48
    e848:	87eb      	strh	r3, [r5, #62]	; 0x3e
    e84a:	002b      	movs	r3, r5
    e84c:	87af      	strh	r7, [r5, #60]	; 0x3c
    e84e:	3340      	adds	r3, #64	; 0x40
    e850:	3541      	adds	r5, #65	; 0x41
    e852:	701e      	strb	r6, [r3, #0]
    e854:	702c      	strb	r4, [r5, #0]
    e856:	e7cf      	b.n	e7f8 <RADIO_SetAttr+0x44>
    e858:	782a      	ldrb	r2, [r5, #0]
    e85a:	4b49      	ldr	r3, [pc, #292]	; (e980 <RADIO_SetAttr+0x1cc>)
    e85c:	761a      	strb	r2, [r3, #24]
    e85e:	e7cb      	b.n	e7f8 <RADIO_SetAttr+0x44>
    e860:	4b4b      	ldr	r3, [pc, #300]	; (e990 <RADIO_SetAttr+0x1dc>)
    e862:	682a      	ldr	r2, [r5, #0]
    e864:	18d1      	adds	r1, r2, r3
    e866:	4b4b      	ldr	r3, [pc, #300]	; (e994 <RADIO_SetAttr+0x1e0>)
    e868:	4299      	cmp	r1, r3
    e86a:	d90a      	bls.n	e882 <RADIO_SetAttr+0xce>
    e86c:	4b4a      	ldr	r3, [pc, #296]	; (e998 <RADIO_SetAttr+0x1e4>)
    e86e:	494b      	ldr	r1, [pc, #300]	; (e99c <RADIO_SetAttr+0x1e8>)
    e870:	18d3      	adds	r3, r2, r3
    e872:	428b      	cmp	r3, r1
    e874:	d905      	bls.n	e882 <RADIO_SetAttr+0xce>
    e876:	494a      	ldr	r1, [pc, #296]	; (e9a0 <RADIO_SetAttr+0x1ec>)
    e878:	484a      	ldr	r0, [pc, #296]	; (e9a4 <RADIO_SetAttr+0x1f0>)
    e87a:	1851      	adds	r1, r2, r1
    e87c:	2305      	movs	r3, #5
    e87e:	4281      	cmp	r1, r0
    e880:	d8bb      	bhi.n	e7fa <RADIO_SetAttr+0x46>
    e882:	4b3f      	ldr	r3, [pc, #252]	; (e980 <RADIO_SetAttr+0x1cc>)
    e884:	601a      	str	r2, [r3, #0]
    e886:	e7b7      	b.n	e7f8 <RADIO_SetAttr+0x44>
    e888:	682a      	ldr	r2, [r5, #0]
    e88a:	4b3d      	ldr	r3, [pc, #244]	; (e980 <RADIO_SetAttr+0x1cc>)
    e88c:	605a      	str	r2, [r3, #4]
    e88e:	e7b3      	b.n	e7f8 <RADIO_SetAttr+0x44>
    e890:	882a      	ldrh	r2, [r5, #0]
    e892:	4b3b      	ldr	r3, [pc, #236]	; (e980 <RADIO_SetAttr+0x1cc>)
    e894:	829a      	strh	r2, [r3, #20]
    e896:	e7af      	b.n	e7f8 <RADIO_SetAttr+0x44>
    e898:	4b39      	ldr	r3, [pc, #228]	; (e980 <RADIO_SetAttr+0x1cc>)
    e89a:	782a      	ldrb	r2, [r5, #0]
    e89c:	3303      	adds	r3, #3
    e89e:	77da      	strb	r2, [r3, #31]
    e8a0:	e7aa      	b.n	e7f8 <RADIO_SetAttr+0x44>
    e8a2:	782a      	ldrb	r2, [r5, #0]
    e8a4:	2305      	movs	r3, #5
    e8a6:	2a01      	cmp	r2, #1
    e8a8:	d8a7      	bhi.n	e7fa <RADIO_SetAttr+0x46>
    e8aa:	4b35      	ldr	r3, [pc, #212]	; (e980 <RADIO_SetAttr+0x1cc>)
    e8ac:	3304      	adds	r3, #4
    e8ae:	e7f6      	b.n	e89e <RADIO_SetAttr+0xea>
    e8b0:	782a      	ldrb	r2, [r5, #0]
    e8b2:	2305      	movs	r3, #5
    e8b4:	2a01      	cmp	r2, #1
    e8b6:	d8a0      	bhi.n	e7fa <RADIO_SetAttr+0x46>
    e8b8:	4b31      	ldr	r3, [pc, #196]	; (e980 <RADIO_SetAttr+0x1cc>)
    e8ba:	3306      	adds	r3, #6
    e8bc:	e7ef      	b.n	e89e <RADIO_SetAttr+0xea>
    e8be:	782a      	ldrb	r2, [r5, #0]
    e8c0:	2305      	movs	r3, #5
    e8c2:	1fd1      	subs	r1, r2, #7
    e8c4:	2902      	cmp	r1, #2
    e8c6:	d898      	bhi.n	e7fa <RADIO_SetAttr+0x46>
    e8c8:	4b2d      	ldr	r3, [pc, #180]	; (e980 <RADIO_SetAttr+0x1cc>)
    e8ca:	3336      	adds	r3, #54	; 0x36
    e8cc:	701a      	strb	r2, [r3, #0]
    e8ce:	e793      	b.n	e7f8 <RADIO_SetAttr+0x44>
    e8d0:	4b2b      	ldr	r3, [pc, #172]	; (e980 <RADIO_SetAttr+0x1cc>)
    e8d2:	782a      	ldrb	r2, [r5, #0]
    e8d4:	3305      	adds	r3, #5
    e8d6:	e7e2      	b.n	e89e <RADIO_SetAttr+0xea>
    e8d8:	782a      	ldrb	r2, [r5, #0]
    e8da:	2305      	movs	r3, #5
    e8dc:	2a01      	cmp	r2, #1
    e8de:	d900      	bls.n	e8e2 <RADIO_SetAttr+0x12e>
    e8e0:	e78b      	b.n	e7fa <RADIO_SetAttr+0x46>
    e8e2:	4b27      	ldr	r3, [pc, #156]	; (e980 <RADIO_SetAttr+0x1cc>)
    e8e4:	3334      	adds	r3, #52	; 0x34
    e8e6:	e7f1      	b.n	e8cc <RADIO_SetAttr+0x118>
    e8e8:	882a      	ldrh	r2, [r5, #0]
    e8ea:	4b25      	ldr	r3, [pc, #148]	; (e980 <RADIO_SetAttr+0x1cc>)
    e8ec:	82da      	strh	r2, [r3, #22]
    e8ee:	e783      	b.n	e7f8 <RADIO_SetAttr+0x44>
    e8f0:	782a      	ldrb	r2, [r5, #0]
    e8f2:	2305      	movs	r3, #5
    e8f4:	1e51      	subs	r1, r2, #1
    e8f6:	2903      	cmp	r1, #3
    e8f8:	d900      	bls.n	e8fc <RADIO_SetAttr+0x148>
    e8fa:	e77e      	b.n	e7fa <RADIO_SetAttr+0x46>
    e8fc:	4b20      	ldr	r3, [pc, #128]	; (e980 <RADIO_SetAttr+0x1cc>)
    e8fe:	3333      	adds	r3, #51	; 0x33
    e900:	e7e4      	b.n	e8cc <RADIO_SetAttr+0x118>
    e902:	4b1f      	ldr	r3, [pc, #124]	; (e980 <RADIO_SetAttr+0x1cc>)
    e904:	682a      	ldr	r2, [r5, #0]
    e906:	60da      	str	r2, [r3, #12]
    e908:	682a      	ldr	r2, [r5, #0]
    e90a:	4b1d      	ldr	r3, [pc, #116]	; (e980 <RADIO_SetAttr+0x1cc>)
    e90c:	609a      	str	r2, [r3, #8]
    e90e:	e773      	b.n	e7f8 <RADIO_SetAttr+0x44>
    e910:	782a      	ldrb	r2, [r5, #0]
    e912:	2305      	movs	r3, #5
    e914:	2a03      	cmp	r2, #3
    e916:	d900      	bls.n	e91a <RADIO_SetAttr+0x166>
    e918:	e76f      	b.n	e7fa <RADIO_SetAttr+0x46>
    e91a:	4b19      	ldr	r3, [pc, #100]	; (e980 <RADIO_SetAttr+0x1cc>)
    e91c:	3337      	adds	r3, #55	; 0x37
    e91e:	e7d5      	b.n	e8cc <RADIO_SetAttr+0x118>
    e920:	782a      	ldrb	r2, [r5, #0]
    e922:	2305      	movs	r3, #5
    e924:	1e51      	subs	r1, r2, #1
    e926:	2916      	cmp	r1, #22
    e928:	d900      	bls.n	e92c <RADIO_SetAttr+0x178>
    e92a:	e766      	b.n	e7fa <RADIO_SetAttr+0x46>
    e92c:	4b14      	ldr	r3, [pc, #80]	; (e980 <RADIO_SetAttr+0x1cc>)
    e92e:	3338      	adds	r3, #56	; 0x38
    e930:	e7cc      	b.n	e8cc <RADIO_SetAttr+0x118>
    e932:	782a      	ldrb	r2, [r5, #0]
    e934:	2305      	movs	r3, #5
    e936:	1e51      	subs	r1, r2, #1
    e938:	2916      	cmp	r1, #22
    e93a:	d900      	bls.n	e93e <RADIO_SetAttr+0x18a>
    e93c:	e75d      	b.n	e7fa <RADIO_SetAttr+0x46>
    e93e:	4b10      	ldr	r3, [pc, #64]	; (e980 <RADIO_SetAttr+0x1cc>)
    e940:	3339      	adds	r3, #57	; 0x39
    e942:	e7c3      	b.n	e8cc <RADIO_SetAttr+0x118>
    e944:	4b0e      	ldr	r3, [pc, #56]	; (e980 <RADIO_SetAttr+0x1cc>)
    e946:	0029      	movs	r1, r5
    e948:	3302      	adds	r3, #2
    e94a:	7fda      	ldrb	r2, [r3, #31]
    e94c:	4816      	ldr	r0, [pc, #88]	; (e9a8 <RADIO_SetAttr+0x1f4>)
    e94e:	4b17      	ldr	r3, [pc, #92]	; (e9ac <RADIO_SetAttr+0x1f8>)
    e950:	4798      	blx	r3
    e952:	e751      	b.n	e7f8 <RADIO_SetAttr+0x44>
    e954:	782b      	ldrb	r3, [r5, #0]
    e956:	1c1a      	adds	r2, r3, #0
    e958:	2b08      	cmp	r3, #8
    e95a:	d900      	bls.n	e95e <RADIO_SetAttr+0x1aa>
    e95c:	2208      	movs	r2, #8
    e95e:	4b08      	ldr	r3, [pc, #32]	; (e980 <RADIO_SetAttr+0x1cc>)
    e960:	3302      	adds	r3, #2
    e962:	e79c      	b.n	e89e <RADIO_SetAttr+0xea>
    e964:	2305      	movs	r3, #5
    e966:	782a      	ldrb	r2, [r5, #0]
    e968:	1fd1      	subs	r1, r2, #7
    e96a:	4299      	cmp	r1, r3
    e96c:	d900      	bls.n	e970 <RADIO_SetAttr+0x1bc>
    e96e:	e744      	b.n	e7fa <RADIO_SetAttr+0x46>
    e970:	4b03      	ldr	r3, [pc, #12]	; (e980 <RADIO_SetAttr+0x1cc>)
    e972:	3335      	adds	r3, #53	; 0x35
    e974:	e7aa      	b.n	e8cc <RADIO_SetAttr+0x118>
    e976:	2305      	movs	r3, #5
    e978:	e73f      	b.n	e7fa <RADIO_SetAttr+0x46>
    e97a:	46c0      	nop			; (mov r8, r8)
    e97c:	0000f0c9 	.word	0x0000f0c9
    e980:	20002d88 	.word	0x20002d88
    e984:	00013af9 	.word	0x00013af9
    e988:	00014d3d 	.word	0x00014d3d
    e98c:	00013e55 	.word	0x00013e55
    e990:	f7d58bc0 	.word	0xf7d58bc0
    e994:	0243d580 	.word	0x0243d580
    e998:	e78fe580 	.word	0xe78fe580
    e99c:	06dac2c0 	.word	0x06dac2c0
    e9a0:	cc9eec80 	.word	0xcc9eec80
    e9a4:	096ae380 	.word	0x096ae380
    e9a8:	20002da1 	.word	0x20002da1
    e9ac:	00016c47 	.word	0x00016c47

0000e9b0 <RADIO_Init>:
    e9b0:	b510      	push	{r4, lr}
    e9b2:	4b0c      	ldr	r3, [pc, #48]	; (e9e4 <RADIO_Init+0x34>)
    e9b4:	4798      	blx	r3
    e9b6:	4b0c      	ldr	r3, [pc, #48]	; (e9e8 <RADIO_Init+0x38>)
    e9b8:	201f      	movs	r0, #31
    e9ba:	4798      	blx	r3
    e9bc:	4c0b      	ldr	r4, [pc, #44]	; (e9ec <RADIO_Init+0x3c>)
    e9be:	490c      	ldr	r1, [pc, #48]	; (e9f0 <RADIO_Init+0x40>)
    e9c0:	2001      	movs	r0, #1
    e9c2:	47a0      	blx	r4
    e9c4:	490b      	ldr	r1, [pc, #44]	; (e9f4 <RADIO_Init+0x44>)
    e9c6:	2002      	movs	r0, #2
    e9c8:	47a0      	blx	r4
    e9ca:	490b      	ldr	r1, [pc, #44]	; (e9f8 <RADIO_Init+0x48>)
    e9cc:	2004      	movs	r0, #4
    e9ce:	47a0      	blx	r4
    e9d0:	490a      	ldr	r1, [pc, #40]	; (e9fc <RADIO_Init+0x4c>)
    e9d2:	2008      	movs	r0, #8
    e9d4:	47a0      	blx	r4
    e9d6:	490a      	ldr	r1, [pc, #40]	; (ea00 <RADIO_Init+0x50>)
    e9d8:	2010      	movs	r0, #16
    e9da:	47a0      	blx	r4
    e9dc:	4909      	ldr	r1, [pc, #36]	; (ea04 <RADIO_Init+0x54>)
    e9de:	2020      	movs	r0, #32
    e9e0:	47a0      	blx	r4
    e9e2:	bd10      	pop	{r4, pc}
    e9e4:	0000f7cd 	.word	0x0000f7cd
    e9e8:	0000f0d5 	.word	0x0000f0d5
    e9ec:	0000ca61 	.word	0x0000ca61
    e9f0:	0000ee61 	.word	0x0000ee61
    e9f4:	0000eed9 	.word	0x0000eed9
    e9f8:	0000ef49 	.word	0x0000ef49
    e9fc:	0000ef99 	.word	0x0000ef99
    ea00:	0000efc1 	.word	0x0000efc1
    ea04:	0000efe9 	.word	0x0000efe9

0000ea08 <Radio_WriteFrequency>:
    ea08:	b570      	push	{r4, r5, r6, lr}
    ea0a:	490d      	ldr	r1, [pc, #52]	; (ea40 <Radio_WriteFrequency+0x38>)
    ea0c:	4d0d      	ldr	r5, [pc, #52]	; (ea44 <Radio_WriteFrequency+0x3c>)
    ea0e:	0006      	movs	r6, r0
    ea10:	47a8      	blx	r5
    ea12:	4b0d      	ldr	r3, [pc, #52]	; (ea48 <Radio_WriteFrequency+0x40>)
    ea14:	0004      	movs	r4, r0
    ea16:	490a      	ldr	r1, [pc, #40]	; (ea40 <Radio_WriteFrequency+0x38>)
    ea18:	0030      	movs	r0, r6
    ea1a:	4798      	blx	r3
    ea1c:	0208      	lsls	r0, r1, #8
    ea1e:	4908      	ldr	r1, [pc, #32]	; (ea40 <Radio_WriteFrequency+0x38>)
    ea20:	47a8      	blx	r5
    ea22:	0224      	lsls	r4, r4, #8
    ea24:	1904      	adds	r4, r0, r4
    ea26:	0c21      	lsrs	r1, r4, #16
    ea28:	4d08      	ldr	r5, [pc, #32]	; (ea4c <Radio_WriteFrequency+0x44>)
    ea2a:	b2c9      	uxtb	r1, r1
    ea2c:	2006      	movs	r0, #6
    ea2e:	47a8      	blx	r5
    ea30:	0a21      	lsrs	r1, r4, #8
    ea32:	b2c9      	uxtb	r1, r1
    ea34:	2007      	movs	r0, #7
    ea36:	47a8      	blx	r5
    ea38:	b2e1      	uxtb	r1, r4
    ea3a:	2008      	movs	r0, #8
    ea3c:	47a8      	blx	r5
    ea3e:	bd70      	pop	{r4, r5, r6, pc}
    ea40:	00003d09 	.word	0x00003d09
    ea44:	000139e5 	.word	0x000139e5
    ea48:	00013af1 	.word	0x00013af1
    ea4c:	0000c98d 	.word	0x0000c98d

0000ea50 <Radio_WriteConfiguration>:
    ea50:	b5f0      	push	{r4, r5, r6, r7, lr}
    ea52:	4cb0      	ldr	r4, [pc, #704]	; (ed14 <Radio_WriteConfiguration+0x2c4>)
    ea54:	2200      	movs	r2, #0
    ea56:	0023      	movs	r3, r4
    ea58:	b085      	sub	sp, #20
    ea5a:	9002      	str	r0, [sp, #8]
    ea5c:	3334      	adds	r3, #52	; 0x34
    ea5e:	0010      	movs	r0, r2
    ea60:	7819      	ldrb	r1, [r3, #0]
    ea62:	4bad      	ldr	r3, [pc, #692]	; (ed18 <Radio_WriteConfiguration+0x2c8>)
    ea64:	4798      	blx	r3
    ea66:	4bad      	ldr	r3, [pc, #692]	; (ed1c <Radio_WriteConfiguration+0x2cc>)
    ea68:	6820      	ldr	r0, [r4, #0]
    ea6a:	4798      	blx	r3
    ea6c:	1ce3      	adds	r3, r4, #3
    ea6e:	1d62      	adds	r2, r4, #5
    ea70:	7fdb      	ldrb	r3, [r3, #31]
    ea72:	7fd2      	ldrb	r2, [r2, #31]
    ea74:	b25b      	sxtb	r3, r3
    ea76:	4eaa      	ldr	r6, [pc, #680]	; (ed20 <Radio_WriteConfiguration+0x2d0>)
    ea78:	4daa      	ldr	r5, [pc, #680]	; (ed24 <Radio_WriteConfiguration+0x2d4>)
    ea7a:	2a00      	cmp	r2, #0
    ea7c:	d000      	beq.n	ea80 <Radio_WriteConfiguration+0x30>
    ea7e:	e0fc      	b.n	ec7a <Radio_WriteConfiguration+0x22a>
    ea80:	1c1f      	adds	r7, r3, #0
    ea82:	2b0f      	cmp	r3, #15
    ea84:	dc00      	bgt.n	ea88 <Radio_WriteConfiguration+0x38>
    ea86:	e0ec      	b.n	ec62 <Radio_WriteConfiguration+0x212>
    ea88:	270f      	movs	r7, #15
    ea8a:	b27b      	sxtb	r3, r7
    ea8c:	204d      	movs	r0, #77	; 0x4d
    ea8e:	9301      	str	r3, [sp, #4]
    ea90:	47b0      	blx	r6
    ea92:	21f8      	movs	r1, #248	; 0xf8
    ea94:	4008      	ands	r0, r1
    ea96:	39f4      	subs	r1, #244	; 0xf4
    ea98:	4301      	orrs	r1, r0
    ea9a:	204d      	movs	r0, #77	; 0x4d
    ea9c:	47a8      	blx	r5
    ea9e:	b27b      	sxtb	r3, r7
    eaa0:	2b00      	cmp	r3, #0
    eaa2:	db00      	blt.n	eaa6 <Radio_WriteConfiguration+0x56>
    eaa4:	e0e4      	b.n	ec70 <Radio_WriteConfiguration+0x220>
    eaa6:	3703      	adds	r7, #3
    eaa8:	b2f9      	uxtb	r1, r7
    eaaa:	2720      	movs	r7, #32
    eaac:	4339      	orrs	r1, r7
    eaae:	2009      	movs	r0, #9
    eab0:	47a8      	blx	r5
    eab2:	0023      	movs	r3, r4
    eab4:	3334      	adds	r3, #52	; 0x34
    eab6:	781f      	ldrb	r7, [r3, #0]
    eab8:	2f01      	cmp	r7, #1
    eaba:	d000      	beq.n	eabe <Radio_WriteConfiguration+0x6e>
    eabc:	e144      	b.n	ed48 <Radio_WriteConfiguration+0x2f8>
    eabe:	7e21      	ldrb	r1, [r4, #24]
    eac0:	2039      	movs	r0, #57	; 0x39
    eac2:	47a8      	blx	r5
    eac4:	4b98      	ldr	r3, [pc, #608]	; (ed28 <Radio_WriteConfiguration+0x2d8>)
    eac6:	201d      	movs	r0, #29
    eac8:	7819      	ldrb	r1, [r3, #0]
    eaca:	0023      	movs	r3, r4
    eacc:	3333      	adds	r3, #51	; 0x33
    eace:	781b      	ldrb	r3, [r3, #0]
    ead0:	0109      	lsls	r1, r1, #4
    ead2:	005b      	lsls	r3, r3, #1
    ead4:	4319      	orrs	r1, r3
    ead6:	1de3      	adds	r3, r4, #7
    ead8:	7fdb      	ldrb	r3, [r3, #31]
    eada:	401f      	ands	r7, r3
    eadc:	4339      	orrs	r1, r7
    eade:	b2c9      	uxtb	r1, r1
    eae0:	47a8      	blx	r5
    eae2:	1d23      	adds	r3, r4, #4
    eae4:	7fd9      	ldrb	r1, [r3, #31]
    eae6:	2304      	movs	r3, #4
    eae8:	0089      	lsls	r1, r1, #2
    eaea:	4019      	ands	r1, r3
    eaec:	0023      	movs	r3, r4
    eaee:	3335      	adds	r3, #53	; 0x35
    eaf0:	781b      	ldrb	r3, [r3, #0]
    eaf2:	201e      	movs	r0, #30
    eaf4:	011b      	lsls	r3, r3, #4
    eaf6:	4319      	orrs	r1, r3
    eaf8:	9b02      	ldr	r3, [sp, #8]
    eafa:	059b      	lsls	r3, r3, #22
    eafc:	0f9b      	lsrs	r3, r3, #30
    eafe:	4319      	orrs	r1, r3
    eb00:	b2c9      	uxtb	r1, r1
    eb02:	47a8      	blx	r5
    eb04:	2300      	movs	r3, #0
    eb06:	8ae1      	ldrh	r1, [r4, #22]
    eb08:	4299      	cmp	r1, r3
    eb0a:	d011      	beq.n	eb30 <Radio_WriteConfiguration+0xe0>
    eb0c:	4a86      	ldr	r2, [pc, #536]	; (ed28 <Radio_WriteConfiguration+0x2d8>)
    eb0e:	7812      	ldrb	r2, [r2, #0]
    eb10:	2a08      	cmp	r2, #8
    eb12:	d100      	bne.n	eb16 <Radio_WriteConfiguration+0xc6>
    eb14:	e0e4      	b.n	ece0 <Radio_WriteConfiguration+0x290>
    eb16:	2a09      	cmp	r2, #9
    eb18:	d100      	bne.n	eb1c <Radio_WriteConfiguration+0xcc>
    eb1a:	e0e3      	b.n	ece4 <Radio_WriteConfiguration+0x294>
    eb1c:	2a07      	cmp	r2, #7
    eb1e:	d000      	beq.n	eb22 <Radio_WriteConfiguration+0xd2>
    eb20:	e0e3      	b.n	ecea <Radio_WriteConfiguration+0x29a>
    eb22:	337d      	adds	r3, #125	; 0x7d
    eb24:	4359      	muls	r1, r3
    eb26:	0023      	movs	r3, r4
    eb28:	3335      	adds	r3, #53	; 0x35
    eb2a:	781b      	ldrb	r3, [r3, #0]
    eb2c:	40d9      	lsrs	r1, r3
    eb2e:	000b      	movs	r3, r1
    eb30:	b2d9      	uxtb	r1, r3
    eb32:	2024      	movs	r0, #36	; 0x24
    eb34:	4d7b      	ldr	r5, [pc, #492]	; (ed24 <Radio_WriteConfiguration+0x2d4>)
    eb36:	47a8      	blx	r5
    eb38:	466b      	mov	r3, sp
    eb3a:	201f      	movs	r0, #31
    eb3c:	7a19      	ldrb	r1, [r3, #8]
    eb3e:	47a8      	blx	r5
    eb40:	2026      	movs	r0, #38	; 0x26
    eb42:	47b0      	blx	r6
    eb44:	0023      	movs	r3, r4
    eb46:	3335      	adds	r3, #53	; 0x35
    eb48:	781b      	ldrb	r3, [r3, #0]
    eb4a:	2b0c      	cmp	r3, #12
    eb4c:	d105      	bne.n	eb5a <Radio_WriteConfiguration+0x10a>
    eb4e:	0023      	movs	r3, r4
    eb50:	3336      	adds	r3, #54	; 0x36
    eb52:	781b      	ldrb	r3, [r3, #0]
    eb54:	3b07      	subs	r3, #7
    eb56:	2b01      	cmp	r3, #1
    eb58:	d906      	bls.n	eb68 <Radio_WriteConfiguration+0x118>
    eb5a:	6b62      	ldr	r2, [r4, #52]	; 0x34
    eb5c:	4b73      	ldr	r3, [pc, #460]	; (ed2c <Radio_WriteConfiguration+0x2dc>)
    eb5e:	4013      	ands	r3, r2
    eb60:	4a73      	ldr	r2, [pc, #460]	; (ed30 <Radio_WriteConfiguration+0x2e0>)
    eb62:	4293      	cmp	r3, r2
    eb64:	d000      	beq.n	eb68 <Radio_WriteConfiguration+0x118>
    eb66:	e0c2      	b.n	ecee <Radio_WriteConfiguration+0x29e>
    eb68:	2108      	movs	r1, #8
    eb6a:	4308      	orrs	r0, r1
    eb6c:	b2c0      	uxtb	r0, r0
    eb6e:	2104      	movs	r1, #4
    eb70:	4301      	orrs	r1, r0
    eb72:	2026      	movs	r0, #38	; 0x26
    eb74:	47a8      	blx	r5
    eb76:	2031      	movs	r0, #49	; 0x31
    eb78:	47b0      	blx	r6
    eb7a:	21f8      	movs	r1, #248	; 0xf8
    eb7c:	4008      	ands	r0, r1
    eb7e:	39f5      	subs	r1, #245	; 0xf5
    eb80:	4301      	orrs	r1, r0
    eb82:	2031      	movs	r0, #49	; 0x31
    eb84:	47a8      	blx	r5
    eb86:	210a      	movs	r1, #10
    eb88:	2037      	movs	r0, #55	; 0x37
    eb8a:	47a8      	blx	r5
    eb8c:	0023      	movs	r3, r4
    eb8e:	3331      	adds	r3, #49	; 0x31
    eb90:	781b      	ldrb	r3, [r3, #0]
    eb92:	2b12      	cmp	r3, #18
    eb94:	d11e      	bne.n	ebd4 <Radio_WriteConfiguration+0x184>
    eb96:	0023      	movs	r3, r4
    eb98:	3336      	adds	r3, #54	; 0x36
    eb9a:	781b      	ldrb	r3, [r3, #0]
    eb9c:	3b07      	subs	r3, #7
    eb9e:	2b01      	cmp	r3, #1
    eba0:	d80b      	bhi.n	ebba <Radio_WriteConfiguration+0x16a>
    eba2:	2031      	movs	r0, #49	; 0x31
    eba4:	47b0      	blx	r6
    eba6:	217f      	movs	r1, #127	; 0x7f
    eba8:	4001      	ands	r1, r0
    ebaa:	2031      	movs	r0, #49	; 0x31
    ebac:	47a8      	blx	r5
    ebae:	2140      	movs	r1, #64	; 0x40
    ebb0:	202f      	movs	r0, #47	; 0x2f
    ebb2:	47a8      	blx	r5
    ebb4:	2100      	movs	r1, #0
    ebb6:	2030      	movs	r0, #48	; 0x30
    ebb8:	47a8      	blx	r5
    ebba:	0023      	movs	r3, r4
    ebbc:	3336      	adds	r3, #54	; 0x36
    ebbe:	781b      	ldrb	r3, [r3, #0]
    ebc0:	2b09      	cmp	r3, #9
    ebc2:	d107      	bne.n	ebd4 <Radio_WriteConfiguration+0x184>
    ebc4:	2031      	movs	r0, #49	; 0x31
    ebc6:	47b0      	blx	r6
    ebc8:	2180      	movs	r1, #128	; 0x80
    ebca:	4249      	negs	r1, r1
    ebcc:	4301      	orrs	r1, r0
    ebce:	b2c9      	uxtb	r1, r1
    ebd0:	2031      	movs	r0, #49	; 0x31
    ebd2:	47a8      	blx	r5
    ebd4:	2033      	movs	r0, #51	; 0x33
    ebd6:	47b0      	blx	r6
    ebd8:	1da3      	adds	r3, r4, #6
    ebda:	7fd9      	ldrb	r1, [r3, #31]
    ebdc:	2340      	movs	r3, #64	; 0x40
    ebde:	0189      	lsls	r1, r1, #6
    ebe0:	4398      	bics	r0, r3
    ebe2:	4019      	ands	r1, r3
    ebe4:	4301      	orrs	r1, r0
    ebe6:	b2c9      	uxtb	r1, r1
    ebe8:	2033      	movs	r0, #51	; 0x33
    ebea:	47a8      	blx	r5
    ebec:	8aa1      	ldrh	r1, [r4, #20]
    ebee:	2020      	movs	r0, #32
    ebf0:	0a09      	lsrs	r1, r1, #8
    ebf2:	47a8      	blx	r5
    ebf4:	7d21      	ldrb	r1, [r4, #20]
    ebf6:	2021      	movs	r0, #33	; 0x21
    ebf8:	47a8      	blx	r5
    ebfa:	2100      	movs	r1, #0
    ebfc:	200d      	movs	r0, #13
    ebfe:	47a8      	blx	r5
    ec00:	2100      	movs	r1, #0
    ec02:	200e      	movs	r0, #14
    ec04:	47a8      	blx	r5
    ec06:	2100      	movs	r1, #0
    ec08:	200f      	movs	r0, #15
    ec0a:	47a8      	blx	r5
    ec0c:	0023      	movs	r3, r4
    ec0e:	3331      	adds	r3, #49	; 0x31
    ec10:	781b      	ldrb	r3, [r3, #0]
    ec12:	2b12      	cmp	r3, #18
    ec14:	d120      	bne.n	ec58 <Radio_WriteConfiguration+0x208>
    ec16:	0023      	movs	r3, r4
    ec18:	3336      	adds	r3, #54	; 0x36
    ec1a:	781b      	ldrb	r3, [r3, #0]
    ec1c:	2b09      	cmp	r3, #9
    ec1e:	d000      	beq.n	ec22 <Radio_WriteConfiguration+0x1d2>
    ec20:	e072      	b.n	ed08 <Radio_WriteConfiguration+0x2b8>
    ec22:	4a44      	ldr	r2, [pc, #272]	; (ed34 <Radio_WriteConfiguration+0x2e4>)
    ec24:	6823      	ldr	r3, [r4, #0]
    ec26:	1899      	adds	r1, r3, r2
    ec28:	4a43      	ldr	r2, [pc, #268]	; (ed38 <Radio_WriteConfiguration+0x2e8>)
    ec2a:	4291      	cmp	r1, r2
    ec2c:	d862      	bhi.n	ecf4 <Radio_WriteConfiguration+0x2a4>
    ec2e:	2102      	movs	r1, #2
    ec30:	2036      	movs	r0, #54	; 0x36
    ec32:	47a8      	blx	r5
    ec34:	2164      	movs	r1, #100	; 0x64
    ec36:	203a      	movs	r0, #58	; 0x3a
    ec38:	47a8      	blx	r5
    ec3a:	0023      	movs	r3, r4
    ec3c:	3336      	adds	r3, #54	; 0x36
    ec3e:	781b      	ldrb	r3, [r3, #0]
    ec40:	2165      	movs	r1, #101	; 0x65
    ec42:	203a      	movs	r0, #58	; 0x3a
    ec44:	2b09      	cmp	r3, #9
    ec46:	d162      	bne.n	ed0e <Radio_WriteConfiguration+0x2be>
    ec48:	3406      	adds	r4, #6
    ec4a:	7fe3      	ldrb	r3, [r4, #31]
    ec4c:	2b01      	cmp	r3, #1
    ec4e:	d15e      	bne.n	ed0e <Radio_WriteConfiguration+0x2be>
    ec50:	47a8      	blx	r5
    ec52:	2119      	movs	r1, #25
    ec54:	203b      	movs	r0, #59	; 0x3b
    ec56:	47a8      	blx	r5
    ec58:	21ff      	movs	r1, #255	; 0xff
    ec5a:	2012      	movs	r0, #18
    ec5c:	47a8      	blx	r5
    ec5e:	b005      	add	sp, #20
    ec60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ec62:	b25b      	sxtb	r3, r3
    ec64:	3303      	adds	r3, #3
    ec66:	db00      	blt.n	ec6a <Radio_WriteConfiguration+0x21a>
    ec68:	e70f      	b.n	ea8a <Radio_WriteConfiguration+0x3a>
    ec6a:	4b34      	ldr	r3, [pc, #208]	; (ed3c <Radio_WriteConfiguration+0x2ec>)
    ec6c:	781f      	ldrb	r7, [r3, #0]
    ec6e:	e70c      	b.n	ea8a <Radio_WriteConfiguration+0x3a>
    ec70:	2170      	movs	r1, #112	; 0x70
    ec72:	9b01      	ldr	r3, [sp, #4]
    ec74:	4319      	orrs	r1, r3
    ec76:	b2c9      	uxtb	r1, r1
    ec78:	e719      	b.n	eaae <Radio_WriteConfiguration+0x5e>
    ec7a:	2b01      	cmp	r3, #1
    ec7c:	dd07      	ble.n	ec8e <Radio_WriteConfiguration+0x23e>
    ec7e:	2714      	movs	r7, #20
    ec80:	2b13      	cmp	r3, #19
    ec82:	dc06      	bgt.n	ec92 <Radio_WriteConfiguration+0x242>
    ec84:	1c1f      	adds	r7, r3, #0
    ec86:	2b11      	cmp	r3, #17
    ec88:	dd02      	ble.n	ec90 <Radio_WriteConfiguration+0x240>
    ec8a:	2711      	movs	r7, #17
    ec8c:	e000      	b.n	ec90 <Radio_WriteConfiguration+0x240>
    ec8e:	2702      	movs	r7, #2
    ec90:	b27f      	sxtb	r7, r7
    ec92:	200b      	movs	r0, #11
    ec94:	47b0      	blx	r6
    ec96:	9003      	str	r0, [sp, #12]
    ec98:	204d      	movs	r0, #77	; 0x4d
    ec9a:	47b0      	blx	r6
    ec9c:	2307      	movs	r3, #7
    ec9e:	4398      	bics	r0, r3
    eca0:	b2c1      	uxtb	r1, r0
    eca2:	2f14      	cmp	r7, #20
    eca4:	d112      	bne.n	eccc <Radio_WriteConfiguration+0x27c>
    eca6:	4319      	orrs	r1, r3
    eca8:	9b03      	ldr	r3, [sp, #12]
    ecaa:	37cb      	adds	r7, #203	; 0xcb
    ecac:	403b      	ands	r3, r7
    ecae:	001f      	movs	r7, r3
    ecb0:	230f      	movs	r3, #15
    ecb2:	9301      	str	r3, [sp, #4]
    ecb4:	204d      	movs	r0, #77	; 0x4d
    ecb6:	47a8      	blx	r5
    ecb8:	2180      	movs	r1, #128	; 0x80
    ecba:	9b01      	ldr	r3, [sp, #4]
    ecbc:	4249      	negs	r1, r1
    ecbe:	4319      	orrs	r1, r3
    ecc0:	b2c9      	uxtb	r1, r1
    ecc2:	2009      	movs	r0, #9
    ecc4:	47a8      	blx	r5
    ecc6:	0039      	movs	r1, r7
    ecc8:	200b      	movs	r0, #11
    ecca:	e6f1      	b.n	eab0 <Radio_WriteConfiguration+0x60>
    eccc:	3f02      	subs	r7, #2
    ecce:	b27b      	sxtb	r3, r7
    ecd0:	2720      	movs	r7, #32
    ecd2:	2004      	movs	r0, #4
    ecd4:	9301      	str	r3, [sp, #4]
    ecd6:	9b03      	ldr	r3, [sp, #12]
    ecd8:	4301      	orrs	r1, r0
    ecda:	431f      	orrs	r7, r3
    ecdc:	b2ff      	uxtb	r7, r7
    ecde:	e7e9      	b.n	ecb4 <Radio_WriteConfiguration+0x264>
    ece0:	23fa      	movs	r3, #250	; 0xfa
    ece2:	e71f      	b.n	eb24 <Radio_WriteConfiguration+0xd4>
    ece4:	23fa      	movs	r3, #250	; 0xfa
    ece6:	005b      	lsls	r3, r3, #1
    ece8:	e71c      	b.n	eb24 <Radio_WriteConfiguration+0xd4>
    ecea:	0019      	movs	r1, r3
    ecec:	e71b      	b.n	eb26 <Radio_WriteConfiguration+0xd6>
    ecee:	21f7      	movs	r1, #247	; 0xf7
    ecf0:	4008      	ands	r0, r1
    ecf2:	e73c      	b.n	eb6e <Radio_WriteConfiguration+0x11e>
    ecf4:	4a12      	ldr	r2, [pc, #72]	; (ed40 <Radio_WriteConfiguration+0x2f0>)
    ecf6:	189b      	adds	r3, r3, r2
    ecf8:	4a12      	ldr	r2, [pc, #72]	; (ed44 <Radio_WriteConfiguration+0x2f4>)
    ecfa:	4293      	cmp	r3, r2
    ecfc:	d804      	bhi.n	ed08 <Radio_WriteConfiguration+0x2b8>
    ecfe:	2102      	movs	r1, #2
    ed00:	2036      	movs	r0, #54	; 0x36
    ed02:	47a8      	blx	r5
    ed04:	217f      	movs	r1, #127	; 0x7f
    ed06:	e796      	b.n	ec36 <Radio_WriteConfiguration+0x1e6>
    ed08:	2103      	movs	r1, #3
    ed0a:	2036      	movs	r0, #54	; 0x36
    ed0c:	e794      	b.n	ec38 <Radio_WriteConfiguration+0x1e8>
    ed0e:	47a8      	blx	r5
    ed10:	211d      	movs	r1, #29
    ed12:	e79f      	b.n	ec54 <Radio_WriteConfiguration+0x204>
    ed14:	20002d88 	.word	0x20002d88
    ed18:	0000dbb5 	.word	0x0000dbb5
    ed1c:	0000ea09 	.word	0x0000ea09
    ed20:	0000c9b5 	.word	0x0000c9b5
    ed24:	0000c98d 	.word	0x0000c98d
    ed28:	20002dbe 	.word	0x20002dbe
    ed2c:	00ffff00 	.word	0x00ffff00
    ed30:	00070b00 	.word	0x00070b00
    ed34:	cc9eec80 	.word	0xcc9eec80
    ed38:	096ae380 	.word	0x096ae380
    ed3c:	0001906c 	.word	0x0001906c
    ed40:	e78fe580 	.word	0xe78fe580
    ed44:	06dac2c0 	.word	0x06dac2c0
    ed48:	6863      	ldr	r3, [r4, #4]
    ed4a:	492c      	ldr	r1, [pc, #176]	; (edfc <Radio_WriteConfiguration+0x3ac>)
    ed4c:	0218      	lsls	r0, r3, #8
    ed4e:	4b2c      	ldr	r3, [pc, #176]	; (ee00 <Radio_WriteConfiguration+0x3b0>)
    ed50:	4798      	blx	r3
    ed52:	0007      	movs	r7, r0
    ed54:	0a01      	lsrs	r1, r0, #8
    ed56:	b2c9      	uxtb	r1, r1
    ed58:	2004      	movs	r0, #4
    ed5a:	47a8      	blx	r5
    ed5c:	b2f9      	uxtb	r1, r7
    ed5e:	2005      	movs	r0, #5
    ed60:	47a8      	blx	r5
    ed62:	4b27      	ldr	r3, [pc, #156]	; (ee00 <Radio_WriteConfiguration+0x3b0>)
    ed64:	68a1      	ldr	r1, [r4, #8]
    ed66:	4827      	ldr	r0, [pc, #156]	; (ee04 <Radio_WriteConfiguration+0x3b4>)
    ed68:	4798      	blx	r3
    ed6a:	0007      	movs	r7, r0
    ed6c:	0a01      	lsrs	r1, r0, #8
    ed6e:	b2c9      	uxtb	r1, r1
    ed70:	2002      	movs	r0, #2
    ed72:	47a8      	blx	r5
    ed74:	b2f9      	uxtb	r1, r7
    ed76:	2003      	movs	r0, #3
    ed78:	47a8      	blx	r5
    ed7a:	2100      	movs	r1, #0
    ed7c:	205d      	movs	r0, #93	; 0x5d
    ed7e:	47a8      	blx	r5
    ed80:	8aa1      	ldrh	r1, [r4, #20]
    ed82:	2025      	movs	r0, #37	; 0x25
    ed84:	0a09      	lsrs	r1, r1, #8
    ed86:	47a8      	blx	r5
    ed88:	7d21      	ldrb	r1, [r4, #20]
    ed8a:	2026      	movs	r0, #38	; 0x26
    ed8c:	47a8      	blx	r5
    ed8e:	219e      	movs	r1, #158	; 0x9e
    ed90:	200d      	movs	r0, #13
    ed92:	47a8      	blx	r5
    ed94:	21bf      	movs	r1, #191	; 0xbf
    ed96:	2035      	movs	r0, #53	; 0x35
    ed98:	47a8      	blx	r5
    ed9a:	200a      	movs	r0, #10
    ed9c:	47b0      	blx	r6
    ed9e:	0023      	movs	r3, r4
    eda0:	3337      	adds	r3, #55	; 0x37
    eda2:	7819      	ldrb	r1, [r3, #0]
    eda4:	2360      	movs	r3, #96	; 0x60
    eda6:	0149      	lsls	r1, r1, #5
    eda8:	4398      	bics	r0, r3
    edaa:	4301      	orrs	r1, r0
    edac:	b2c9      	uxtb	r1, r1
    edae:	200a      	movs	r0, #10
    edb0:	47a8      	blx	r5
    edb2:	1d23      	adds	r3, r4, #4
    edb4:	7fdb      	ldrb	r3, [r3, #31]
    edb6:	21c0      	movs	r1, #192	; 0xc0
    edb8:	2b00      	cmp	r3, #0
    edba:	d000      	beq.n	edbe <Radio_WriteConfiguration+0x36e>
    edbc:	3110      	adds	r1, #16
    edbe:	2030      	movs	r0, #48	; 0x30
    edc0:	47a8      	blx	r5
    edc2:	2600      	movs	r6, #0
    edc4:	1ca3      	adds	r3, r4, #2
    edc6:	7fd9      	ldrb	r1, [r3, #31]
    edc8:	428e      	cmp	r6, r1
    edca:	d30d      	bcc.n	ede8 <Radio_WriteConfiguration+0x398>
    edcc:	2900      	cmp	r1, #0
    edce:	d003      	beq.n	edd8 <Radio_WriteConfiguration+0x388>
    edd0:	2310      	movs	r3, #16
    edd2:	3901      	subs	r1, #1
    edd4:	4319      	orrs	r1, r3
    edd6:	b2c9      	uxtb	r1, r1
    edd8:	2027      	movs	r0, #39	; 0x27
    edda:	47a8      	blx	r5
    eddc:	21ff      	movs	r1, #255	; 0xff
    edde:	203e      	movs	r0, #62	; 0x3e
    ede0:	47a8      	blx	r5
    ede2:	21ff      	movs	r1, #255	; 0xff
    ede4:	203f      	movs	r0, #63	; 0x3f
    ede6:	e739      	b.n	ec5c <Radio_WriteConfiguration+0x20c>
    ede8:	0030      	movs	r0, r6
    edea:	19a3      	adds	r3, r4, r6
    edec:	3028      	adds	r0, #40	; 0x28
    edee:	7e59      	ldrb	r1, [r3, #25]
    edf0:	b2c0      	uxtb	r0, r0
    edf2:	3601      	adds	r6, #1
    edf4:	47a8      	blx	r5
    edf6:	b2f6      	uxtb	r6, r6
    edf8:	e7e4      	b.n	edc4 <Radio_WriteConfiguration+0x374>
    edfa:	46c0      	nop			; (mov r8, r8)
    edfc:	00003d09 	.word	0x00003d09
    ee00:	000139e5 	.word	0x000139e5
    ee04:	01e84800 	.word	0x01e84800

0000ee08 <RADIO_getMappingAndOpmode>:
    ee08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ee0a:	0006      	movs	r6, r0
    ee0c:	4d06      	ldr	r5, [pc, #24]	; (ee28 <RADIO_getMappingAndOpmode+0x20>)
    ee0e:	2040      	movs	r0, #64	; 0x40
    ee10:	001f      	movs	r7, r3
    ee12:	0014      	movs	r4, r2
    ee14:	9101      	str	r1, [sp, #4]
    ee16:	47a8      	blx	r5
    ee18:	4004      	ands	r4, r0
    ee1a:	413c      	asrs	r4, r7
    ee1c:	2001      	movs	r0, #1
    ee1e:	7034      	strb	r4, [r6, #0]
    ee20:	47a8      	blx	r5
    ee22:	9b01      	ldr	r3, [sp, #4]
    ee24:	7018      	strb	r0, [r3, #0]
    ee26:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    ee28:	0000c9b5 	.word	0x0000c9b5

0000ee2c <RADIO_UnhandledInterrupt.part.0>:
    ee2c:	b510      	push	{r4, lr}
    ee2e:	21ff      	movs	r1, #255	; 0xff
    ee30:	2012      	movs	r0, #18
    ee32:	4b01      	ldr	r3, [pc, #4]	; (ee38 <RADIO_UnhandledInterrupt.part.0+0xc>)
    ee34:	4798      	blx	r3
    ee36:	bd10      	pop	{r4, pc}
    ee38:	0000c98d 	.word	0x0000c98d

0000ee3c <RADIO_UnhandledInterrupt>:
    ee3c:	b510      	push	{r4, lr}
    ee3e:	2801      	cmp	r0, #1
    ee40:	d102      	bne.n	ee48 <RADIO_UnhandledInterrupt+0xc>
    ee42:	4b05      	ldr	r3, [pc, #20]	; (ee58 <RADIO_UnhandledInterrupt+0x1c>)
    ee44:	4798      	blx	r3
    ee46:	bd10      	pop	{r4, pc}
    ee48:	21ff      	movs	r1, #255	; 0xff
    ee4a:	203e      	movs	r0, #62	; 0x3e
    ee4c:	4c03      	ldr	r4, [pc, #12]	; (ee5c <RADIO_UnhandledInterrupt+0x20>)
    ee4e:	47a0      	blx	r4
    ee50:	21ff      	movs	r1, #255	; 0xff
    ee52:	203f      	movs	r0, #63	; 0x3f
    ee54:	47a0      	blx	r4
    ee56:	e7f6      	b.n	ee46 <RADIO_UnhandledInterrupt+0xa>
    ee58:	0000ee2d 	.word	0x0000ee2d
    ee5c:	0000c98d 	.word	0x0000c98d

0000ee60 <RADIO_DIO0>:
    ee60:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ee62:	466b      	mov	r3, sp
    ee64:	1ddc      	adds	r4, r3, #7
    ee66:	1d9d      	adds	r5, r3, #6
    ee68:	22c0      	movs	r2, #192	; 0xc0
    ee6a:	2306      	movs	r3, #6
    ee6c:	0028      	movs	r0, r5
    ee6e:	0021      	movs	r1, r4
    ee70:	4e12      	ldr	r6, [pc, #72]	; (eebc <RADIO_DIO0+0x5c>)
    ee72:	47b0      	blx	r6
    ee74:	7823      	ldrb	r3, [r4, #0]
    ee76:	7828      	ldrb	r0, [r5, #0]
    ee78:	b25a      	sxtb	r2, r3
    ee7a:	b2c0      	uxtb	r0, r0
    ee7c:	2a00      	cmp	r2, #0
    ee7e:	da0b      	bge.n	ee98 <RADIO_DIO0+0x38>
    ee80:	2800      	cmp	r0, #0
    ee82:	d004      	beq.n	ee8e <RADIO_DIO0+0x2e>
    ee84:	2801      	cmp	r0, #1
    ee86:	d005      	beq.n	ee94 <RADIO_DIO0+0x34>
    ee88:	4b0d      	ldr	r3, [pc, #52]	; (eec0 <RADIO_DIO0+0x60>)
    ee8a:	4798      	blx	r3
    ee8c:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    ee8e:	4b0d      	ldr	r3, [pc, #52]	; (eec4 <RADIO_DIO0+0x64>)
    ee90:	4798      	blx	r3
    ee92:	e7fb      	b.n	ee8c <RADIO_DIO0+0x2c>
    ee94:	4b0c      	ldr	r3, [pc, #48]	; (eec8 <RADIO_DIO0+0x68>)
    ee96:	e7fb      	b.n	ee90 <RADIO_DIO0+0x30>
    ee98:	2800      	cmp	r0, #0
    ee9a:	d10a      	bne.n	eeb2 <RADIO_DIO0+0x52>
    ee9c:	2207      	movs	r2, #7
    ee9e:	4013      	ands	r3, r2
    eea0:	7023      	strb	r3, [r4, #0]
    eea2:	2b03      	cmp	r3, #3
    eea4:	d101      	bne.n	eeaa <RADIO_DIO0+0x4a>
    eea6:	4b09      	ldr	r3, [pc, #36]	; (eecc <RADIO_DIO0+0x6c>)
    eea8:	e7f2      	b.n	ee90 <RADIO_DIO0+0x30>
    eeaa:	2b05      	cmp	r3, #5
    eeac:	d102      	bne.n	eeb4 <RADIO_DIO0+0x54>
    eeae:	4b08      	ldr	r3, [pc, #32]	; (eed0 <RADIO_DIO0+0x70>)
    eeb0:	e7ee      	b.n	ee90 <RADIO_DIO0+0x30>
    eeb2:	2000      	movs	r0, #0
    eeb4:	4b07      	ldr	r3, [pc, #28]	; (eed4 <RADIO_DIO0+0x74>)
    eeb6:	4798      	blx	r3
    eeb8:	e7e8      	b.n	ee8c <RADIO_DIO0+0x2c>
    eeba:	46c0      	nop			; (mov r8, r8)
    eebc:	0000ee09 	.word	0x0000ee09
    eec0:	0000ee2d 	.word	0x0000ee2d
    eec4:	0000f4f1 	.word	0x0000f4f1
    eec8:	0000f3f5 	.word	0x0000f3f5
    eecc:	0000f471 	.word	0x0000f471
    eed0:	0000f56d 	.word	0x0000f56d
    eed4:	0000ee3d 	.word	0x0000ee3d

0000eed8 <RADIO_DIO1>:
    eed8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    eeda:	466b      	mov	r3, sp
    eedc:	1ddc      	adds	r4, r3, #7
    eede:	1d9d      	adds	r5, r3, #6
    eee0:	2230      	movs	r2, #48	; 0x30
    eee2:	2304      	movs	r3, #4
    eee4:	0021      	movs	r1, r4
    eee6:	0028      	movs	r0, r5
    eee8:	4e11      	ldr	r6, [pc, #68]	; (ef30 <RADIO_DIO1+0x58>)
    eeea:	47b0      	blx	r6
    eeec:	7822      	ldrb	r2, [r4, #0]
    eeee:	782b      	ldrb	r3, [r5, #0]
    eef0:	b251      	sxtb	r1, r2
    eef2:	2900      	cmp	r1, #0
    eef4:	da0c      	bge.n	ef10 <RADIO_DIO1+0x38>
    eef6:	b2db      	uxtb	r3, r3
    eef8:	2b00      	cmp	r3, #0
    eefa:	d004      	beq.n	ef06 <RADIO_DIO1+0x2e>
    eefc:	2b01      	cmp	r3, #1
    eefe:	d005      	beq.n	ef0c <RADIO_DIO1+0x34>
    ef00:	4b0c      	ldr	r3, [pc, #48]	; (ef34 <RADIO_DIO1+0x5c>)
    ef02:	4798      	blx	r3
    ef04:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    ef06:	4b0c      	ldr	r3, [pc, #48]	; (ef38 <RADIO_DIO1+0x60>)
    ef08:	4798      	blx	r3
    ef0a:	e7fb      	b.n	ef04 <RADIO_DIO1+0x2c>
    ef0c:	4b0b      	ldr	r3, [pc, #44]	; (ef3c <RADIO_DIO1+0x64>)
    ef0e:	e7fb      	b.n	ef08 <RADIO_DIO1+0x30>
    ef10:	2107      	movs	r1, #7
    ef12:	b2db      	uxtb	r3, r3
    ef14:	400a      	ands	r2, r1
    ef16:	7022      	strb	r2, [r4, #0]
    ef18:	2b00      	cmp	r3, #0
    ef1a:	d005      	beq.n	ef28 <RADIO_DIO1+0x50>
    ef1c:	2b01      	cmp	r3, #1
    ef1e:	d1f1      	bne.n	ef04 <RADIO_DIO1+0x2c>
    ef20:	2a03      	cmp	r2, #3
    ef22:	d1ef      	bne.n	ef04 <RADIO_DIO1+0x2c>
    ef24:	4b06      	ldr	r3, [pc, #24]	; (ef40 <RADIO_DIO1+0x68>)
    ef26:	e7ef      	b.n	ef08 <RADIO_DIO1+0x30>
    ef28:	4b06      	ldr	r3, [pc, #24]	; (ef44 <RADIO_DIO1+0x6c>)
    ef2a:	2a05      	cmp	r2, #5
    ef2c:	d1ea      	bne.n	ef04 <RADIO_DIO1+0x2c>
    ef2e:	e7eb      	b.n	ef08 <RADIO_DIO1+0x30>
    ef30:	0000ee09 	.word	0x0000ee09
    ef34:	0000ee2d 	.word	0x0000ee2d
    ef38:	0000f379 	.word	0x0000f379
    ef3c:	0000dc99 	.word	0x0000dc99
    ef40:	0000f295 	.word	0x0000f295
    ef44:	0000f1f9 	.word	0x0000f1f9

0000ef48 <RADIO_DIO2>:
    ef48:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ef4a:	466b      	mov	r3, sp
    ef4c:	1ddc      	adds	r4, r3, #7
    ef4e:	1d9d      	adds	r5, r3, #6
    ef50:	220c      	movs	r2, #12
    ef52:	2302      	movs	r3, #2
    ef54:	0021      	movs	r1, r4
    ef56:	0028      	movs	r0, r5
    ef58:	4e0b      	ldr	r6, [pc, #44]	; (ef88 <RADIO_DIO2+0x40>)
    ef5a:	47b0      	blx	r6
    ef5c:	7823      	ldrb	r3, [r4, #0]
    ef5e:	782a      	ldrb	r2, [r5, #0]
    ef60:	b259      	sxtb	r1, r3
    ef62:	2900      	cmp	r1, #0
    ef64:	da05      	bge.n	ef72 <RADIO_DIO2+0x2a>
    ef66:	4b09      	ldr	r3, [pc, #36]	; (ef8c <RADIO_DIO2+0x44>)
    ef68:	2a02      	cmp	r2, #2
    ef6a:	d90a      	bls.n	ef82 <RADIO_DIO2+0x3a>
    ef6c:	4b08      	ldr	r3, [pc, #32]	; (ef90 <RADIO_DIO2+0x48>)
    ef6e:	4798      	blx	r3
    ef70:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    ef72:	2107      	movs	r1, #7
    ef74:	400b      	ands	r3, r1
    ef76:	7023      	strb	r3, [r4, #0]
    ef78:	2a03      	cmp	r2, #3
    ef7a:	d1f9      	bne.n	ef70 <RADIO_DIO2+0x28>
    ef7c:	2b05      	cmp	r3, #5
    ef7e:	d1f7      	bne.n	ef70 <RADIO_DIO2+0x28>
    ef80:	4b04      	ldr	r3, [pc, #16]	; (ef94 <RADIO_DIO2+0x4c>)
    ef82:	4798      	blx	r3
    ef84:	e7f4      	b.n	ef70 <RADIO_DIO2+0x28>
    ef86:	46c0      	nop			; (mov r8, r8)
    ef88:	0000ee09 	.word	0x0000ee09
    ef8c:	0000dc99 	.word	0x0000dc99
    ef90:	0000ee2d 	.word	0x0000ee2d
    ef94:	0000f1c9 	.word	0x0000f1c9

0000ef98 <RADIO_DIO3>:
    ef98:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ef9a:	466b      	mov	r3, sp
    ef9c:	4668      	mov	r0, sp
    ef9e:	1ddc      	adds	r4, r3, #7
    efa0:	2203      	movs	r2, #3
    efa2:	2300      	movs	r3, #0
    efa4:	0021      	movs	r1, r4
    efa6:	3006      	adds	r0, #6
    efa8:	4d03      	ldr	r5, [pc, #12]	; (efb8 <RADIO_DIO3+0x20>)
    efaa:	47a8      	blx	r5
    efac:	7823      	ldrb	r3, [r4, #0]
    efae:	2b7f      	cmp	r3, #127	; 0x7f
    efb0:	d901      	bls.n	efb6 <RADIO_DIO3+0x1e>
    efb2:	4b02      	ldr	r3, [pc, #8]	; (efbc <RADIO_DIO3+0x24>)
    efb4:	4798      	blx	r3
    efb6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    efb8:	0000ee09 	.word	0x0000ee09
    efbc:	0000ee2d 	.word	0x0000ee2d

0000efc0 <RADIO_DIO4>:
    efc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    efc2:	466b      	mov	r3, sp
    efc4:	4668      	mov	r0, sp
    efc6:	1ddc      	adds	r4, r3, #7
    efc8:	2306      	movs	r3, #6
    efca:	22c0      	movs	r2, #192	; 0xc0
    efcc:	18c0      	adds	r0, r0, r3
    efce:	0021      	movs	r1, r4
    efd0:	4d03      	ldr	r5, [pc, #12]	; (efe0 <RADIO_DIO4+0x20>)
    efd2:	47a8      	blx	r5
    efd4:	7823      	ldrb	r3, [r4, #0]
    efd6:	2b7f      	cmp	r3, #127	; 0x7f
    efd8:	d901      	bls.n	efde <RADIO_DIO4+0x1e>
    efda:	4b02      	ldr	r3, [pc, #8]	; (efe4 <RADIO_DIO4+0x24>)
    efdc:	4798      	blx	r3
    efde:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    efe0:	0000ee09 	.word	0x0000ee09
    efe4:	0000ee2d 	.word	0x0000ee2d

0000efe8 <RADIO_DIO5>:
    efe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    efea:	466b      	mov	r3, sp
    efec:	4668      	mov	r0, sp
    efee:	1ddc      	adds	r4, r3, #7
    eff0:	2230      	movs	r2, #48	; 0x30
    eff2:	2304      	movs	r3, #4
    eff4:	0021      	movs	r1, r4
    eff6:	3006      	adds	r0, #6
    eff8:	4d03      	ldr	r5, [pc, #12]	; (f008 <RADIO_DIO5+0x20>)
    effa:	47a8      	blx	r5
    effc:	7823      	ldrb	r3, [r4, #0]
    effe:	2b7f      	cmp	r3, #127	; 0x7f
    f000:	d901      	bls.n	f006 <RADIO_DIO5+0x1e>
    f002:	4b02      	ldr	r3, [pc, #8]	; (f00c <RADIO_DIO5+0x24>)
    f004:	4798      	blx	r3
    f006:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    f008:	0000ee09 	.word	0x0000ee09
    f00c:	0000ee2d 	.word	0x0000ee2d

0000f010 <radioPostTask>:
    f010:	b510      	push	{r4, lr}
    f012:	0004      	movs	r4, r0
    f014:	4b05      	ldr	r3, [pc, #20]	; (f02c <radioPostTask+0x1c>)
    f016:	4798      	blx	r3
    f018:	4b05      	ldr	r3, [pc, #20]	; (f030 <radioPostTask+0x20>)
    f01a:	8818      	ldrh	r0, [r3, #0]
    f01c:	4320      	orrs	r0, r4
    f01e:	8018      	strh	r0, [r3, #0]
    f020:	4b04      	ldr	r3, [pc, #16]	; (f034 <radioPostTask+0x24>)
    f022:	4798      	blx	r3
    f024:	2002      	movs	r0, #2
    f026:	4b04      	ldr	r3, [pc, #16]	; (f038 <radioPostTask+0x28>)
    f028:	4798      	blx	r3
    f02a:	bd10      	pop	{r4, pc}
    f02c:	0000cb45 	.word	0x0000cb45
    f030:	20001e9c 	.word	0x20001e9c
    f034:	0000cb51 	.word	0x0000cb51
    f038:	0000db91 	.word	0x0000db91

0000f03c <radioClearTask>:
    f03c:	b510      	push	{r4, lr}
    f03e:	0004      	movs	r4, r0
    f040:	4b04      	ldr	r3, [pc, #16]	; (f054 <radioClearTask+0x18>)
    f042:	4798      	blx	r3
    f044:	4a04      	ldr	r2, [pc, #16]	; (f058 <radioClearTask+0x1c>)
    f046:	8813      	ldrh	r3, [r2, #0]
    f048:	43a3      	bics	r3, r4
    f04a:	8013      	strh	r3, [r2, #0]
    f04c:	4b03      	ldr	r3, [pc, #12]	; (f05c <radioClearTask+0x20>)
    f04e:	4798      	blx	r3
    f050:	bd10      	pop	{r4, pc}
    f052:	46c0      	nop			; (mov r8, r8)
    f054:	0000cb45 	.word	0x0000cb45
    f058:	20001e9c 	.word	0x20001e9c
    f05c:	0000cb51 	.word	0x0000cb51

0000f060 <RADIO_TaskHandler>:
    f060:	b570      	push	{r4, r5, r6, lr}
    f062:	2400      	movs	r4, #0
    f064:	4d10      	ldr	r5, [pc, #64]	; (f0a8 <RADIO_TaskHandler+0x48>)
    f066:	2601      	movs	r6, #1
    f068:	882b      	ldrh	r3, [r5, #0]
    f06a:	42a3      	cmp	r3, r4
    f06c:	d015      	beq.n	f09a <RADIO_TaskHandler+0x3a>
    f06e:	882b      	ldrh	r3, [r5, #0]
    f070:	4123      	asrs	r3, r4
    f072:	4233      	tst	r3, r6
    f074:	d013      	beq.n	f09e <RADIO_TaskHandler+0x3e>
    f076:	40a6      	lsls	r6, r4
    f078:	4b0c      	ldr	r3, [pc, #48]	; (f0ac <RADIO_TaskHandler+0x4c>)
    f07a:	4798      	blx	r3
    f07c:	882b      	ldrh	r3, [r5, #0]
    f07e:	00a4      	lsls	r4, r4, #2
    f080:	43b3      	bics	r3, r6
    f082:	802b      	strh	r3, [r5, #0]
    f084:	4b0a      	ldr	r3, [pc, #40]	; (f0b0 <RADIO_TaskHandler+0x50>)
    f086:	4798      	blx	r3
    f088:	4b0a      	ldr	r3, [pc, #40]	; (f0b4 <RADIO_TaskHandler+0x54>)
    f08a:	58e3      	ldr	r3, [r4, r3]
    f08c:	4798      	blx	r3
    f08e:	882b      	ldrh	r3, [r5, #0]
    f090:	2b00      	cmp	r3, #0
    f092:	d002      	beq.n	f09a <RADIO_TaskHandler+0x3a>
    f094:	2002      	movs	r0, #2
    f096:	4b08      	ldr	r3, [pc, #32]	; (f0b8 <RADIO_TaskHandler+0x58>)
    f098:	4798      	blx	r3
    f09a:	2000      	movs	r0, #0
    f09c:	bd70      	pop	{r4, r5, r6, pc}
    f09e:	3401      	adds	r4, #1
    f0a0:	2c05      	cmp	r4, #5
    f0a2:	d1e4      	bne.n	f06e <RADIO_TaskHandler+0xe>
    f0a4:	e7f9      	b.n	f09a <RADIO_TaskHandler+0x3a>
    f0a6:	46c0      	nop			; (mov r8, r8)
    f0a8:	20001e9c 	.word	0x20001e9c
    f0ac:	0000cb45 	.word	0x0000cb45
    f0b0:	0000cb51 	.word	0x0000cb51
    f0b4:	00019070 	.word	0x00019070
    f0b8:	0000db91 	.word	0x0000db91

0000f0bc <RadioSetState>:
    f0bc:	4b01      	ldr	r3, [pc, #4]	; (f0c4 <RadioSetState+0x8>)
    f0be:	7018      	strb	r0, [r3, #0]
    f0c0:	4770      	bx	lr
    f0c2:	46c0      	nop			; (mov r8, r8)
    f0c4:	20003057 	.word	0x20003057

0000f0c8 <RADIO_GetState>:
    f0c8:	4b01      	ldr	r3, [pc, #4]	; (f0d0 <RADIO_GetState+0x8>)
    f0ca:	7818      	ldrb	r0, [r3, #0]
    f0cc:	b2c0      	uxtb	r0, r0
    f0ce:	4770      	bx	lr
    f0d0:	20003057 	.word	0x20003057

0000f0d4 <RADIO_SetCallbackBitmask>:
    f0d4:	4a02      	ldr	r2, [pc, #8]	; (f0e0 <RADIO_SetCallbackBitmask+0xc>)
    f0d6:	7813      	ldrb	r3, [r2, #0]
    f0d8:	4318      	orrs	r0, r3
    f0da:	7010      	strb	r0, [r2, #0]
    f0dc:	4770      	bx	lr
    f0de:	46c0      	nop			; (mov r8, r8)
    f0e0:	20003056 	.word	0x20003056

0000f0e4 <RADIO_Transmit>:
    f0e4:	b570      	push	{r4, r5, r6, lr}
    f0e6:	4d10      	ldr	r5, [pc, #64]	; (f128 <RADIO_Transmit+0x44>)
    f0e8:	0006      	movs	r6, r0
    f0ea:	782b      	ldrb	r3, [r5, #0]
    f0ec:	2004      	movs	r0, #4
    f0ee:	2b01      	cmp	r3, #1
    f0f0:	d118      	bne.n	f124 <RADIO_Transmit+0x40>
    f0f2:	4c0e      	ldr	r4, [pc, #56]	; (f12c <RADIO_Transmit+0x48>)
    f0f4:	0023      	movs	r3, r4
    f0f6:	332f      	adds	r3, #47	; 0x2f
    f0f8:	7818      	ldrb	r0, [r3, #0]
    f0fa:	4b0d      	ldr	r3, [pc, #52]	; (f130 <RADIO_Transmit+0x4c>)
    f0fc:	4798      	blx	r3
    f0fe:	4b0d      	ldr	r3, [pc, #52]	; (f134 <RADIO_Transmit+0x50>)
    f100:	7832      	ldrb	r2, [r6, #0]
    f102:	6871      	ldr	r1, [r6, #4]
    f104:	701a      	strb	r2, [r3, #0]
    f106:	4b0c      	ldr	r3, [pc, #48]	; (f138 <RADIO_Transmit+0x54>)
    f108:	3434      	adds	r4, #52	; 0x34
    f10a:	6019      	str	r1, [r3, #0]
    f10c:	7821      	ldrb	r1, [r4, #0]
    f10e:	2302      	movs	r3, #2
    f110:	2900      	cmp	r1, #0
    f112:	d102      	bne.n	f11a <RADIO_Transmit+0x36>
    f114:	0018      	movs	r0, r3
    f116:	2a3f      	cmp	r2, #63	; 0x3f
    f118:	d804      	bhi.n	f124 <RADIO_Transmit+0x40>
    f11a:	702b      	strb	r3, [r5, #0]
    f11c:	2004      	movs	r0, #4
    f11e:	4b07      	ldr	r3, [pc, #28]	; (f13c <RADIO_Transmit+0x58>)
    f120:	4798      	blx	r3
    f122:	2000      	movs	r0, #0
    f124:	bd70      	pop	{r4, r5, r6, pc}
    f126:	46c0      	nop			; (mov r8, r8)
    f128:	20003057 	.word	0x20003057
    f12c:	20002d88 	.word	0x20002d88
    f130:	0000d891 	.word	0x0000d891
    f134:	20001eb4 	.word	0x20001eb4
    f138:	20001eb0 	.word	0x20001eb0
    f13c:	0000f011 	.word	0x0000f011

0000f140 <Radio_FSKTxPayloadHandler>:
    f140:	b570      	push	{r4, r5, r6, lr}
    f142:	4b1c      	ldr	r3, [pc, #112]	; (f1b4 <Radio_FSKTxPayloadHandler+0x74>)
    f144:	000d      	movs	r5, r1
    f146:	4798      	blx	r3
    f148:	4c1b      	ldr	r4, [pc, #108]	; (f1b8 <Radio_FSKTxPayloadHandler+0x78>)
    f14a:	3458      	adds	r4, #88	; 0x58
    f14c:	7820      	ldrb	r0, [r4, #0]
    f14e:	b2c0      	uxtb	r0, r0
    f150:	2800      	cmp	r0, #0
    f152:	d112      	bne.n	f17a <Radio_FSKTxPayloadHandler+0x3a>
    f154:	2d00      	cmp	r5, #0
    f156:	d007      	beq.n	f168 <Radio_FSKTxPayloadHandler+0x28>
    f158:	4918      	ldr	r1, [pc, #96]	; (f1bc <Radio_FSKTxPayloadHandler+0x7c>)
    f15a:	4b19      	ldr	r3, [pc, #100]	; (f1c0 <Radio_FSKTxPayloadHandler+0x80>)
    f15c:	2d3e      	cmp	r5, #62	; 0x3e
    f15e:	d806      	bhi.n	f16e <Radio_FSKTxPayloadHandler+0x2e>
    f160:	002a      	movs	r2, r5
    f162:	6809      	ldr	r1, [r1, #0]
    f164:	4798      	blx	r3
    f166:	7025      	strb	r5, [r4, #0]
    f168:	4b16      	ldr	r3, [pc, #88]	; (f1c4 <Radio_FSKTxPayloadHandler+0x84>)
    f16a:	4798      	blx	r3
    f16c:	bd70      	pop	{r4, r5, r6, pc}
    f16e:	223f      	movs	r2, #63	; 0x3f
    f170:	6809      	ldr	r1, [r1, #0]
    f172:	4798      	blx	r3
    f174:	233f      	movs	r3, #63	; 0x3f
    f176:	7023      	strb	r3, [r4, #0]
    f178:	e7f6      	b.n	f168 <Radio_FSKTxPayloadHandler+0x28>
    f17a:	7823      	ldrb	r3, [r4, #0]
    f17c:	429d      	cmp	r5, r3
    f17e:	d0f3      	beq.n	f168 <Radio_FSKTxPayloadHandler+0x28>
    f180:	7822      	ldrb	r2, [r4, #0]
    f182:	480e      	ldr	r0, [pc, #56]	; (f1bc <Radio_FSKTxPayloadHandler+0x7c>)
    f184:	1aaa      	subs	r2, r5, r2
    f186:	b2d2      	uxtb	r2, r2
    f188:	4b0d      	ldr	r3, [pc, #52]	; (f1c0 <Radio_FSKTxPayloadHandler+0x80>)
    f18a:	2a3f      	cmp	r2, #63	; 0x3f
    f18c:	d807      	bhi.n	f19e <Radio_FSKTxPayloadHandler+0x5e>
    f18e:	7826      	ldrb	r6, [r4, #0]
    f190:	7822      	ldrb	r2, [r4, #0]
    f192:	6801      	ldr	r1, [r0, #0]
    f194:	1aaa      	subs	r2, r5, r2
    f196:	b2d2      	uxtb	r2, r2
    f198:	1989      	adds	r1, r1, r6
    f19a:	2000      	movs	r0, #0
    f19c:	e7e2      	b.n	f164 <Radio_FSKTxPayloadHandler+0x24>
    f19e:	7822      	ldrb	r2, [r4, #0]
    f1a0:	6801      	ldr	r1, [r0, #0]
    f1a2:	2000      	movs	r0, #0
    f1a4:	1889      	adds	r1, r1, r2
    f1a6:	223f      	movs	r2, #63	; 0x3f
    f1a8:	4798      	blx	r3
    f1aa:	7823      	ldrb	r3, [r4, #0]
    f1ac:	333f      	adds	r3, #63	; 0x3f
    f1ae:	b2db      	uxtb	r3, r3
    f1b0:	e7e1      	b.n	f176 <Radio_FSKTxPayloadHandler+0x36>
    f1b2:	46c0      	nop			; (mov r8, r8)
    f1b4:	00004569 	.word	0x00004569
    f1b8:	20002d88 	.word	0x20002d88
    f1bc:	20001eb0 	.word	0x20001eb0
    f1c0:	0000c9e1 	.word	0x0000c9e1
    f1c4:	000045a9 	.word	0x000045a9

0000f1c8 <RADIO_FSKSyncAddr>:
    f1c8:	4b08      	ldr	r3, [pc, #32]	; (f1ec <RADIO_FSKSyncAddr+0x24>)
    f1ca:	b510      	push	{r4, lr}
    f1cc:	4798      	blx	r3
    f1ce:	4b08      	ldr	r3, [pc, #32]	; (f1f0 <RADIO_FSKSyncAddr+0x28>)
    f1d0:	001a      	movs	r2, r3
    f1d2:	3234      	adds	r2, #52	; 0x34
    f1d4:	7812      	ldrb	r2, [r2, #0]
    f1d6:	2a00      	cmp	r2, #0
    f1d8:	d104      	bne.n	f1e4 <RADIO_FSKSyncAddr+0x1c>
    f1da:	0019      	movs	r1, r3
    f1dc:	3358      	adds	r3, #88	; 0x58
    f1de:	312c      	adds	r1, #44	; 0x2c
    f1e0:	700a      	strb	r2, [r1, #0]
    f1e2:	701a      	strb	r2, [r3, #0]
    f1e4:	4b03      	ldr	r3, [pc, #12]	; (f1f4 <RADIO_FSKSyncAddr+0x2c>)
    f1e6:	4798      	blx	r3
    f1e8:	bd10      	pop	{r4, pc}
    f1ea:	46c0      	nop			; (mov r8, r8)
    f1ec:	00004569 	.word	0x00004569
    f1f0:	20002d88 	.word	0x20002d88
    f1f4:	000045a9 	.word	0x000045a9

0000f1f8 <RADIO_FSKFifoLevel>:
    f1f8:	b570      	push	{r4, r5, r6, lr}
    f1fa:	4b22      	ldr	r3, [pc, #136]	; (f284 <RADIO_FSKFifoLevel+0x8c>)
    f1fc:	4798      	blx	r3
    f1fe:	4d22      	ldr	r5, [pc, #136]	; (f288 <RADIO_FSKFifoLevel+0x90>)
    f200:	002a      	movs	r2, r5
    f202:	002b      	movs	r3, r5
    f204:	322c      	adds	r2, #44	; 0x2c
    f206:	3358      	adds	r3, #88	; 0x58
    f208:	7810      	ldrb	r0, [r2, #0]
    f20a:	7819      	ldrb	r1, [r3, #0]
    f20c:	4288      	cmp	r0, r1
    f20e:	d105      	bne.n	f21c <RADIO_FSKFifoLevel+0x24>
    f210:	7812      	ldrb	r2, [r2, #0]
    f212:	2a00      	cmp	r2, #0
    f214:	d002      	beq.n	f21c <RADIO_FSKFifoLevel+0x24>
    f216:	781b      	ldrb	r3, [r3, #0]
    f218:	2b00      	cmp	r3, #0
    f21a:	d11f      	bne.n	f25c <RADIO_FSKFifoLevel+0x64>
    f21c:	0029      	movs	r1, r5
    f21e:	312c      	adds	r1, #44	; 0x2c
    f220:	7808      	ldrb	r0, [r1, #0]
    f222:	b2c0      	uxtb	r0, r0
    f224:	2800      	cmp	r0, #0
    f226:	d102      	bne.n	f22e <RADIO_FSKFifoLevel+0x36>
    f228:	2201      	movs	r2, #1
    f22a:	4b18      	ldr	r3, [pc, #96]	; (f28c <RADIO_FSKFifoLevel+0x94>)
    f22c:	4798      	blx	r3
    f22e:	002e      	movs	r6, r5
    f230:	002c      	movs	r4, r5
    f232:	362c      	adds	r6, #44	; 0x2c
    f234:	3458      	adds	r4, #88	; 0x58
    f236:	7833      	ldrb	r3, [r6, #0]
    f238:	7822      	ldrb	r2, [r4, #0]
    f23a:	1a9b      	subs	r3, r3, r2
    f23c:	b2db      	uxtb	r3, r3
    f23e:	2b3e      	cmp	r3, #62	; 0x3e
    f240:	d80f      	bhi.n	f262 <RADIO_FSKFifoLevel+0x6a>
    f242:	7823      	ldrb	r3, [r4, #0]
    f244:	7832      	ldrb	r2, [r6, #0]
    f246:	7821      	ldrb	r1, [r4, #0]
    f248:	2000      	movs	r0, #0
    f24a:	1a52      	subs	r2, r2, r1
    f24c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    f24e:	b2d2      	uxtb	r2, r2
    f250:	18c9      	adds	r1, r1, r3
    f252:	4b0e      	ldr	r3, [pc, #56]	; (f28c <RADIO_FSKFifoLevel+0x94>)
    f254:	4798      	blx	r3
    f256:	7833      	ldrb	r3, [r6, #0]
    f258:	b2db      	uxtb	r3, r3
    f25a:	7023      	strb	r3, [r4, #0]
    f25c:	4b0c      	ldr	r3, [pc, #48]	; (f290 <RADIO_FSKFifoLevel+0x98>)
    f25e:	4798      	blx	r3
    f260:	bd70      	pop	{r4, r5, r6, pc}
    f262:	7833      	ldrb	r3, [r6, #0]
    f264:	7822      	ldrb	r2, [r4, #0]
    f266:	1a9b      	subs	r3, r3, r2
    f268:	b2db      	uxtb	r3, r3
    f26a:	2b3f      	cmp	r3, #63	; 0x3f
    f26c:	d9f6      	bls.n	f25c <RADIO_FSKFifoLevel+0x64>
    f26e:	7823      	ldrb	r3, [r4, #0]
    f270:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    f272:	223f      	movs	r2, #63	; 0x3f
    f274:	18c9      	adds	r1, r1, r3
    f276:	2000      	movs	r0, #0
    f278:	4b04      	ldr	r3, [pc, #16]	; (f28c <RADIO_FSKFifoLevel+0x94>)
    f27a:	4798      	blx	r3
    f27c:	7823      	ldrb	r3, [r4, #0]
    f27e:	333f      	adds	r3, #63	; 0x3f
    f280:	e7ea      	b.n	f258 <RADIO_FSKFifoLevel+0x60>
    f282:	46c0      	nop			; (mov r8, r8)
    f284:	00004569 	.word	0x00004569
    f288:	20002d88 	.word	0x20002d88
    f28c:	0000ca21 	.word	0x0000ca21
    f290:	000045a9 	.word	0x000045a9

0000f294 <RADIO_FSKFifoEmpty>:
    f294:	b510      	push	{r4, lr}
    f296:	4b03      	ldr	r3, [pc, #12]	; (f2a4 <RADIO_FSKFifoEmpty+0x10>)
    f298:	7819      	ldrb	r1, [r3, #0]
    f29a:	4b03      	ldr	r3, [pc, #12]	; (f2a8 <RADIO_FSKFifoEmpty+0x14>)
    f29c:	6818      	ldr	r0, [r3, #0]
    f29e:	4b03      	ldr	r3, [pc, #12]	; (f2ac <RADIO_FSKFifoEmpty+0x18>)
    f2a0:	4798      	blx	r3
    f2a2:	bd10      	pop	{r4, pc}
    f2a4:	20001eb4 	.word	0x20001eb4
    f2a8:	20001eb0 	.word	0x20001eb0
    f2ac:	0000f141 	.word	0x0000f141

0000f2b0 <RADIO_GetData>:
    f2b0:	4b03      	ldr	r3, [pc, #12]	; (f2c0 <RADIO_GetData+0x10>)
    f2b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f2b4:	332c      	adds	r3, #44	; 0x2c
    f2b6:	6002      	str	r2, [r0, #0]
    f2b8:	781b      	ldrb	r3, [r3, #0]
    f2ba:	2000      	movs	r0, #0
    f2bc:	800b      	strh	r3, [r1, #0]
    f2be:	4770      	bx	lr
    f2c0:	20002d88 	.word	0x20002d88

0000f2c4 <Radio_EnableRfControl>:
    f2c4:	b510      	push	{r4, lr}
    f2c6:	4b08      	ldr	r3, [pc, #32]	; (f2e8 <Radio_EnableRfControl+0x24>)
    f2c8:	0001      	movs	r1, r0
    f2ca:	681a      	ldr	r2, [r3, #0]
    f2cc:	4807      	ldr	r0, [pc, #28]	; (f2ec <Radio_EnableRfControl+0x28>)
    f2ce:	4c08      	ldr	r4, [pc, #32]	; (f2f0 <Radio_EnableRfControl+0x2c>)
    f2d0:	1812      	adds	r2, r2, r0
    f2d2:	2000      	movs	r0, #0
    f2d4:	42a2      	cmp	r2, r4
    f2d6:	d804      	bhi.n	f2e2 <Radio_EnableRfControl+0x1e>
    f2d8:	3305      	adds	r3, #5
    f2da:	7fdb      	ldrb	r3, [r3, #31]
    f2dc:	1e58      	subs	r0, r3, #1
    f2de:	4183      	sbcs	r3, r0
    f2e0:	1c58      	adds	r0, r3, #1
    f2e2:	4b04      	ldr	r3, [pc, #16]	; (f2f4 <Radio_EnableRfControl+0x30>)
    f2e4:	4798      	blx	r3
    f2e6:	bd10      	pop	{r4, pc}
    f2e8:	20002d88 	.word	0x20002d88
    f2ec:	cc9eec80 	.word	0xcc9eec80
    f2f0:	096ae380 	.word	0x096ae380
    f2f4:	0000ca8d 	.word	0x0000ca8d

0000f2f8 <Radio_DisableRfControl>:
    f2f8:	b510      	push	{r4, lr}
    f2fa:	4b08      	ldr	r3, [pc, #32]	; (f31c <Radio_DisableRfControl+0x24>)
    f2fc:	0001      	movs	r1, r0
    f2fe:	681a      	ldr	r2, [r3, #0]
    f300:	4807      	ldr	r0, [pc, #28]	; (f320 <Radio_DisableRfControl+0x28>)
    f302:	4c08      	ldr	r4, [pc, #32]	; (f324 <Radio_DisableRfControl+0x2c>)
    f304:	1812      	adds	r2, r2, r0
    f306:	2000      	movs	r0, #0
    f308:	42a2      	cmp	r2, r4
    f30a:	d804      	bhi.n	f316 <Radio_DisableRfControl+0x1e>
    f30c:	3305      	adds	r3, #5
    f30e:	7fdb      	ldrb	r3, [r3, #31]
    f310:	1e58      	subs	r0, r3, #1
    f312:	4183      	sbcs	r3, r0
    f314:	1c58      	adds	r0, r3, #1
    f316:	4b04      	ldr	r3, [pc, #16]	; (f328 <Radio_DisableRfControl+0x30>)
    f318:	4798      	blx	r3
    f31a:	bd10      	pop	{r4, pc}
    f31c:	20002d88 	.word	0x20002d88
    f320:	cc9eec80 	.word	0xcc9eec80
    f324:	096ae380 	.word	0x096ae380
    f328:	0000cab5 	.word	0x0000cab5

0000f32c <Radio_WatchdogTimeout>:
    f32c:	b510      	push	{r4, lr}
    f32e:	4b0e      	ldr	r3, [pc, #56]	; (f368 <Radio_WatchdogTimeout+0x3c>)
    f330:	781a      	ldrb	r2, [r3, #0]
    f332:	2a04      	cmp	r2, #4
    f334:	d10b      	bne.n	f34e <Radio_WatchdogTimeout+0x22>
    f336:	2320      	movs	r3, #32
    f338:	4a0c      	ldr	r2, [pc, #48]	; (f36c <Radio_WatchdogTimeout+0x40>)
    f33a:	2000      	movs	r0, #0
    f33c:	8811      	ldrh	r1, [r2, #0]
    f33e:	430b      	orrs	r3, r1
    f340:	8013      	strh	r3, [r2, #0]
    f342:	4b0b      	ldr	r3, [pc, #44]	; (f370 <Radio_WatchdogTimeout+0x44>)
    f344:	4798      	blx	r3
    f346:	2002      	movs	r0, #2
    f348:	4b0a      	ldr	r3, [pc, #40]	; (f374 <Radio_WatchdogTimeout+0x48>)
    f34a:	4798      	blx	r3
    f34c:	bd10      	pop	{r4, pc}
    f34e:	781b      	ldrb	r3, [r3, #0]
    f350:	2b02      	cmp	r3, #2
    f352:	d1fb      	bne.n	f34c <Radio_WatchdogTimeout+0x20>
    f354:	4a05      	ldr	r2, [pc, #20]	; (f36c <Radio_WatchdogTimeout+0x40>)
    f356:	330e      	adds	r3, #14
    f358:	8811      	ldrh	r1, [r2, #0]
    f35a:	2001      	movs	r0, #1
    f35c:	430b      	orrs	r3, r1
    f35e:	8013      	strh	r3, [r2, #0]
    f360:	4b03      	ldr	r3, [pc, #12]	; (f370 <Radio_WatchdogTimeout+0x44>)
    f362:	4798      	blx	r3
    f364:	2001      	movs	r0, #1
    f366:	e7ef      	b.n	f348 <Radio_WatchdogTimeout+0x1c>
    f368:	20003057 	.word	0x20003057
    f36c:	20003054 	.word	0x20003054
    f370:	0000f2f9 	.word	0x0000f2f9
    f374:	0000f011 	.word	0x0000f011

0000f378 <RADIO_RxTimeout>:
    f378:	b510      	push	{r4, lr}
    f37a:	4b0a      	ldr	r3, [pc, #40]	; (f3a4 <RADIO_RxTimeout+0x2c>)
    f37c:	332f      	adds	r3, #47	; 0x2f
    f37e:	7818      	ldrb	r0, [r3, #0]
    f380:	4b09      	ldr	r3, [pc, #36]	; (f3a8 <RADIO_RxTimeout+0x30>)
    f382:	4798      	blx	r3
    f384:	2000      	movs	r0, #0
    f386:	4b09      	ldr	r3, [pc, #36]	; (f3ac <RADIO_RxTimeout+0x34>)
    f388:	4798      	blx	r3
    f38a:	2180      	movs	r1, #128	; 0x80
    f38c:	2012      	movs	r0, #18
    f38e:	4b08      	ldr	r3, [pc, #32]	; (f3b0 <RADIO_RxTimeout+0x38>)
    f390:	4798      	blx	r3
    f392:	2340      	movs	r3, #64	; 0x40
    f394:	4a07      	ldr	r2, [pc, #28]	; (f3b4 <RADIO_RxTimeout+0x3c>)
    f396:	2002      	movs	r0, #2
    f398:	8811      	ldrh	r1, [r2, #0]
    f39a:	430b      	orrs	r3, r1
    f39c:	8013      	strh	r3, [r2, #0]
    f39e:	4b06      	ldr	r3, [pc, #24]	; (f3b8 <RADIO_RxTimeout+0x40>)
    f3a0:	4798      	blx	r3
    f3a2:	bd10      	pop	{r4, pc}
    f3a4:	20002d88 	.word	0x20002d88
    f3a8:	0000d891 	.word	0x0000d891
    f3ac:	0000f2f9 	.word	0x0000f2f9
    f3b0:	0000c98d 	.word	0x0000c98d
    f3b4:	20003054 	.word	0x20003054
    f3b8:	0000f011 	.word	0x0000f011

0000f3bc <Radio_RxFSKTimeout>:
    f3bc:	b510      	push	{r4, lr}
    f3be:	4b08      	ldr	r3, [pc, #32]	; (f3e0 <Radio_RxFSKTimeout+0x24>)
    f3c0:	332f      	adds	r3, #47	; 0x2f
    f3c2:	7818      	ldrb	r0, [r3, #0]
    f3c4:	4b07      	ldr	r3, [pc, #28]	; (f3e4 <Radio_RxFSKTimeout+0x28>)
    f3c6:	4798      	blx	r3
    f3c8:	2000      	movs	r0, #0
    f3ca:	4b07      	ldr	r3, [pc, #28]	; (f3e8 <Radio_RxFSKTimeout+0x2c>)
    f3cc:	4798      	blx	r3
    f3ce:	2380      	movs	r3, #128	; 0x80
    f3d0:	4a06      	ldr	r2, [pc, #24]	; (f3ec <Radio_RxFSKTimeout+0x30>)
    f3d2:	2002      	movs	r0, #2
    f3d4:	8811      	ldrh	r1, [r2, #0]
    f3d6:	430b      	orrs	r3, r1
    f3d8:	8013      	strh	r3, [r2, #0]
    f3da:	4b05      	ldr	r3, [pc, #20]	; (f3f0 <Radio_RxFSKTimeout+0x34>)
    f3dc:	4798      	blx	r3
    f3de:	bd10      	pop	{r4, pc}
    f3e0:	20002d88 	.word	0x20002d88
    f3e4:	0000d891 	.word	0x0000d891
    f3e8:	0000f2f9 	.word	0x0000f2f9
    f3ec:	20003054 	.word	0x20003054
    f3f0:	0000f011 	.word	0x0000f011

0000f3f4 <RADIO_TxDone>:
    f3f4:	b570      	push	{r4, r5, r6, lr}
    f3f6:	4b14      	ldr	r3, [pc, #80]	; (f448 <RADIO_TxDone+0x54>)
    f3f8:	332f      	adds	r3, #47	; 0x2f
    f3fa:	7818      	ldrb	r0, [r3, #0]
    f3fc:	4b13      	ldr	r3, [pc, #76]	; (f44c <RADIO_TxDone+0x58>)
    f3fe:	4798      	blx	r3
    f400:	2001      	movs	r0, #1
    f402:	4b13      	ldr	r3, [pc, #76]	; (f450 <RADIO_TxDone+0x5c>)
    f404:	4798      	blx	r3
    f406:	4b13      	ldr	r3, [pc, #76]	; (f454 <RADIO_TxDone+0x60>)
    f408:	2108      	movs	r1, #8
    f40a:	2012      	movs	r0, #18
    f40c:	4798      	blx	r3
    f40e:	4b12      	ldr	r3, [pc, #72]	; (f458 <RADIO_TxDone+0x64>)
    f410:	781a      	ldrb	r2, [r3, #0]
    f412:	4b12      	ldr	r3, [pc, #72]	; (f45c <RADIO_TxDone+0x68>)
    f414:	2a02      	cmp	r2, #2
    f416:	d002      	beq.n	f41e <RADIO_TxDone+0x2a>
    f418:	881a      	ldrh	r2, [r3, #0]
    f41a:	0692      	lsls	r2, r2, #26
    f41c:	d413      	bmi.n	f446 <RADIO_TxDone+0x52>
    f41e:	2001      	movs	r0, #1
    f420:	881a      	ldrh	r2, [r3, #0]
    f422:	4302      	orrs	r2, r0
    f424:	801a      	strh	r2, [r3, #0]
    f426:	4b0e      	ldr	r3, [pc, #56]	; (f460 <RADIO_TxDone+0x6c>)
    f428:	4798      	blx	r3
    f42a:	4b0e      	ldr	r3, [pc, #56]	; (f464 <RADIO_TxDone+0x70>)
    f42c:	4798      	blx	r3
    f42e:	4c0e      	ldr	r4, [pc, #56]	; (f468 <RADIO_TxDone+0x74>)
    f430:	4d0e      	ldr	r5, [pc, #56]	; (f46c <RADIO_TxDone+0x78>)
    f432:	6822      	ldr	r2, [r4, #0]
    f434:	6863      	ldr	r3, [r4, #4]
    f436:	1a80      	subs	r0, r0, r2
    f438:	4199      	sbcs	r1, r3
    f43a:	22fa      	movs	r2, #250	; 0xfa
    f43c:	2300      	movs	r3, #0
    f43e:	0092      	lsls	r2, r2, #2
    f440:	47a8      	blx	r5
    f442:	6020      	str	r0, [r4, #0]
    f444:	6061      	str	r1, [r4, #4]
    f446:	bd70      	pop	{r4, r5, r6, pc}
    f448:	20002d88 	.word	0x20002d88
    f44c:	0000d891 	.word	0x0000d891
    f450:	0000f2f9 	.word	0x0000f2f9
    f454:	0000c98d 	.word	0x0000c98d
    f458:	20003057 	.word	0x20003057
    f45c:	20003054 	.word	0x20003054
    f460:	0000f011 	.word	0x0000f011
    f464:	0000d521 	.word	0x0000d521
    f468:	20001ea8 	.word	0x20001ea8
    f46c:	00013dc1 	.word	0x00013dc1

0000f470 <RADIO_FSKPacketSent>:
    f470:	b570      	push	{r4, r5, r6, lr}
    f472:	4b15      	ldr	r3, [pc, #84]	; (f4c8 <RADIO_FSKPacketSent+0x58>)
    f474:	203f      	movs	r0, #63	; 0x3f
    f476:	4798      	blx	r3
    f478:	0703      	lsls	r3, r0, #28
    f47a:	d524      	bpl.n	f4c6 <RADIO_FSKPacketSent+0x56>
    f47c:	4b13      	ldr	r3, [pc, #76]	; (f4cc <RADIO_FSKPacketSent+0x5c>)
    f47e:	332f      	adds	r3, #47	; 0x2f
    f480:	7818      	ldrb	r0, [r3, #0]
    f482:	4b13      	ldr	r3, [pc, #76]	; (f4d0 <RADIO_FSKPacketSent+0x60>)
    f484:	4798      	blx	r3
    f486:	4b13      	ldr	r3, [pc, #76]	; (f4d4 <RADIO_FSKPacketSent+0x64>)
    f488:	2001      	movs	r0, #1
    f48a:	4798      	blx	r3
    f48c:	4b12      	ldr	r3, [pc, #72]	; (f4d8 <RADIO_FSKPacketSent+0x68>)
    f48e:	4c13      	ldr	r4, [pc, #76]	; (f4dc <RADIO_FSKPacketSent+0x6c>)
    f490:	781b      	ldrb	r3, [r3, #0]
    f492:	2b02      	cmp	r3, #2
    f494:	d002      	beq.n	f49c <RADIO_FSKPacketSent+0x2c>
    f496:	8823      	ldrh	r3, [r4, #0]
    f498:	069b      	lsls	r3, r3, #26
    f49a:	d414      	bmi.n	f4c6 <RADIO_FSKPacketSent+0x56>
    f49c:	4b10      	ldr	r3, [pc, #64]	; (f4e0 <RADIO_FSKPacketSent+0x70>)
    f49e:	4798      	blx	r3
    f4a0:	4d10      	ldr	r5, [pc, #64]	; (f4e4 <RADIO_FSKPacketSent+0x74>)
    f4a2:	4e11      	ldr	r6, [pc, #68]	; (f4e8 <RADIO_FSKPacketSent+0x78>)
    f4a4:	682a      	ldr	r2, [r5, #0]
    f4a6:	686b      	ldr	r3, [r5, #4]
    f4a8:	1a80      	subs	r0, r0, r2
    f4aa:	4199      	sbcs	r1, r3
    f4ac:	22fa      	movs	r2, #250	; 0xfa
    f4ae:	2300      	movs	r3, #0
    f4b0:	0092      	lsls	r2, r2, #2
    f4b2:	47b0      	blx	r6
    f4b4:	4b0d      	ldr	r3, [pc, #52]	; (f4ec <RADIO_FSKPacketSent+0x7c>)
    f4b6:	6028      	str	r0, [r5, #0]
    f4b8:	6069      	str	r1, [r5, #4]
    f4ba:	2001      	movs	r0, #1
    f4bc:	4798      	blx	r3
    f4be:	2304      	movs	r3, #4
    f4c0:	8822      	ldrh	r2, [r4, #0]
    f4c2:	4313      	orrs	r3, r2
    f4c4:	8023      	strh	r3, [r4, #0]
    f4c6:	bd70      	pop	{r4, r5, r6, pc}
    f4c8:	0000c9b5 	.word	0x0000c9b5
    f4cc:	20002d88 	.word	0x20002d88
    f4d0:	0000d891 	.word	0x0000d891
    f4d4:	0000f2f9 	.word	0x0000f2f9
    f4d8:	20003057 	.word	0x20003057
    f4dc:	20003054 	.word	0x20003054
    f4e0:	0000d521 	.word	0x0000d521
    f4e4:	20001ea8 	.word	0x20001ea8
    f4e8:	00013dc1 	.word	0x00013dc1
    f4ec:	0000f011 	.word	0x0000f011

0000f4f0 <RADIO_RxDone>:
    f4f0:	b570      	push	{r4, r5, r6, lr}
    f4f2:	2012      	movs	r0, #18
    f4f4:	4e16      	ldr	r6, [pc, #88]	; (f550 <RADIO_RxDone+0x60>)
    f4f6:	47b0      	blx	r6
    f4f8:	4b16      	ldr	r3, [pc, #88]	; (f554 <RADIO_RxDone+0x64>)
    f4fa:	0005      	movs	r5, r0
    f4fc:	2170      	movs	r1, #112	; 0x70
    f4fe:	2012      	movs	r0, #18
    f500:	4798      	blx	r3
    f502:	2350      	movs	r3, #80	; 0x50
    f504:	402b      	ands	r3, r5
    f506:	2b50      	cmp	r3, #80	; 0x50
    f508:	d119      	bne.n	f53e <RADIO_RxDone+0x4e>
    f50a:	4c13      	ldr	r4, [pc, #76]	; (f558 <RADIO_RxDone+0x68>)
    f50c:	0023      	movs	r3, r4
    f50e:	332f      	adds	r3, #47	; 0x2f
    f510:	7818      	ldrb	r0, [r3, #0]
    f512:	4b12      	ldr	r3, [pc, #72]	; (f55c <RADIO_RxDone+0x6c>)
    f514:	4798      	blx	r3
    f516:	4b12      	ldr	r3, [pc, #72]	; (f560 <RADIO_RxDone+0x70>)
    f518:	2000      	movs	r0, #0
    f51a:	4798      	blx	r3
    f51c:	3404      	adds	r4, #4
    f51e:	201c      	movs	r0, #28
    f520:	47b0      	blx	r6
    f522:	7fe2      	ldrb	r2, [r4, #31]
    f524:	4b0f      	ldr	r3, [pc, #60]	; (f564 <RADIO_RxDone+0x74>)
    f526:	4910      	ldr	r1, [pc, #64]	; (f568 <RADIO_RxDone+0x78>)
    f528:	2a00      	cmp	r2, #0
    f52a:	d003      	beq.n	f534 <RADIO_RxDone+0x44>
    f52c:	06aa      	lsls	r2, r5, #26
    f52e:	d407      	bmi.n	f540 <RADIO_RxDone+0x50>
    f530:	0642      	lsls	r2, r0, #25
    f532:	d505      	bpl.n	f540 <RADIO_RxDone+0x50>
    f534:	2002      	movs	r0, #2
    f536:	881a      	ldrh	r2, [r3, #0]
    f538:	4302      	orrs	r2, r0
    f53a:	801a      	strh	r2, [r3, #0]
    f53c:	4788      	blx	r1
    f53e:	bd70      	pop	{r4, r5, r6, pc}
    f540:	2280      	movs	r2, #128	; 0x80
    f542:	8818      	ldrh	r0, [r3, #0]
    f544:	0052      	lsls	r2, r2, #1
    f546:	4302      	orrs	r2, r0
    f548:	801a      	strh	r2, [r3, #0]
    f54a:	2002      	movs	r0, #2
    f54c:	e7f6      	b.n	f53c <RADIO_RxDone+0x4c>
    f54e:	46c0      	nop			; (mov r8, r8)
    f550:	0000c9b5 	.word	0x0000c9b5
    f554:	0000c98d 	.word	0x0000c98d
    f558:	20002d88 	.word	0x20002d88
    f55c:	0000d891 	.word	0x0000d891
    f560:	0000f2f9 	.word	0x0000f2f9
    f564:	20003054 	.word	0x20003054
    f568:	0000f011 	.word	0x0000f011

0000f56c <RADIO_FSKPayloadReady>:
    f56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f56e:	203f      	movs	r0, #63	; 0x3f
    f570:	4b39      	ldr	r3, [pc, #228]	; (f658 <RADIO_FSKPayloadReady+0xec>)
    f572:	4798      	blx	r3
    f574:	0743      	lsls	r3, r0, #29
    f576:	d559      	bpl.n	f62c <RADIO_FSKPayloadReady+0xc0>
    f578:	4c38      	ldr	r4, [pc, #224]	; (f65c <RADIO_FSKPayloadReady+0xf0>)
    f57a:	4d39      	ldr	r5, [pc, #228]	; (f660 <RADIO_FSKPayloadReady+0xf4>)
    f57c:	1d23      	adds	r3, r4, #4
    f57e:	7fdb      	ldrb	r3, [r3, #31]
    f580:	2b01      	cmp	r3, #1
    f582:	d154      	bne.n	f62e <RADIO_FSKPayloadReady+0xc2>
    f584:	2202      	movs	r2, #2
    f586:	4210      	tst	r0, r2
    f588:	d048      	beq.n	f61c <RADIO_FSKPayloadReady+0xb0>
    f58a:	0023      	movs	r3, r4
    f58c:	332f      	adds	r3, #47	; 0x2f
    f58e:	7818      	ldrb	r0, [r3, #0]
    f590:	4e34      	ldr	r6, [pc, #208]	; (f664 <RADIO_FSKPayloadReady+0xf8>)
    f592:	47b0      	blx	r6
    f594:	0023      	movs	r3, r4
    f596:	332e      	adds	r3, #46	; 0x2e
    f598:	7818      	ldrb	r0, [r3, #0]
    f59a:	47b0      	blx	r6
    f59c:	4b32      	ldr	r3, [pc, #200]	; (f668 <RADIO_FSKPayloadReady+0xfc>)
    f59e:	4798      	blx	r3
    f5a0:	0022      	movs	r2, r4
    f5a2:	0023      	movs	r3, r4
    f5a4:	322c      	adds	r2, #44	; 0x2c
    f5a6:	3358      	adds	r3, #88	; 0x58
    f5a8:	7810      	ldrb	r0, [r2, #0]
    f5aa:	7819      	ldrb	r1, [r3, #0]
    f5ac:	4288      	cmp	r0, r1
    f5ae:	d105      	bne.n	f5bc <RADIO_FSKPayloadReady+0x50>
    f5b0:	7812      	ldrb	r2, [r2, #0]
    f5b2:	2a00      	cmp	r2, #0
    f5b4:	d002      	beq.n	f5bc <RADIO_FSKPayloadReady+0x50>
    f5b6:	781b      	ldrb	r3, [r3, #0]
    f5b8:	2b00      	cmp	r3, #0
    f5ba:	d118      	bne.n	f5ee <RADIO_FSKPayloadReady+0x82>
    f5bc:	0021      	movs	r1, r4
    f5be:	312c      	adds	r1, #44	; 0x2c
    f5c0:	7808      	ldrb	r0, [r1, #0]
    f5c2:	b2c0      	uxtb	r0, r0
    f5c4:	2800      	cmp	r0, #0
    f5c6:	d102      	bne.n	f5ce <RADIO_FSKPayloadReady+0x62>
    f5c8:	2201      	movs	r2, #1
    f5ca:	4b28      	ldr	r3, [pc, #160]	; (f66c <RADIO_FSKPayloadReady+0x100>)
    f5cc:	4798      	blx	r3
    f5ce:	0026      	movs	r6, r4
    f5d0:	0027      	movs	r7, r4
    f5d2:	3658      	adds	r6, #88	; 0x58
    f5d4:	7830      	ldrb	r0, [r6, #0]
    f5d6:	372c      	adds	r7, #44	; 0x2c
    f5d8:	b2c0      	uxtb	r0, r0
    f5da:	2800      	cmp	r0, #0
    f5dc:	d110      	bne.n	f600 <RADIO_FSKPayloadReady+0x94>
    f5de:	783a      	ldrb	r2, [r7, #0]
    f5e0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    f5e2:	b2d2      	uxtb	r2, r2
    f5e4:	4b21      	ldr	r3, [pc, #132]	; (f66c <RADIO_FSKPayloadReady+0x100>)
    f5e6:	4798      	blx	r3
    f5e8:	783b      	ldrb	r3, [r7, #0]
    f5ea:	b2db      	uxtb	r3, r3
    f5ec:	7033      	strb	r3, [r6, #0]
    f5ee:	4b20      	ldr	r3, [pc, #128]	; (f670 <RADIO_FSKPayloadReady+0x104>)
    f5f0:	4798      	blx	r3
    f5f2:	4b20      	ldr	r3, [pc, #128]	; (f674 <RADIO_FSKPayloadReady+0x108>)
    f5f4:	2000      	movs	r0, #0
    f5f6:	4798      	blx	r3
    f5f8:	2308      	movs	r3, #8
    f5fa:	882a      	ldrh	r2, [r5, #0]
    f5fc:	4313      	orrs	r3, r2
    f5fe:	e011      	b.n	f624 <RADIO_FSKPayloadReady+0xb8>
    f600:	783b      	ldrb	r3, [r7, #0]
    f602:	7832      	ldrb	r2, [r6, #0]
    f604:	1a9b      	subs	r3, r3, r2
    f606:	2b00      	cmp	r3, #0
    f608:	ddf1      	ble.n	f5ee <RADIO_FSKPayloadReady+0x82>
    f60a:	7833      	ldrb	r3, [r6, #0]
    f60c:	783a      	ldrb	r2, [r7, #0]
    f60e:	7831      	ldrb	r1, [r6, #0]
    f610:	2000      	movs	r0, #0
    f612:	1a52      	subs	r2, r2, r1
    f614:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    f616:	b2d2      	uxtb	r2, r2
    f618:	18c9      	adds	r1, r1, r3
    f61a:	e7e3      	b.n	f5e4 <RADIO_FSKPayloadReady+0x78>
    f61c:	2380      	movs	r3, #128	; 0x80
    f61e:	8829      	ldrh	r1, [r5, #0]
    f620:	005b      	lsls	r3, r3, #1
    f622:	430b      	orrs	r3, r1
    f624:	802b      	strh	r3, [r5, #0]
    f626:	2002      	movs	r0, #2
    f628:	4b13      	ldr	r3, [pc, #76]	; (f678 <RADIO_FSKPayloadReady+0x10c>)
    f62a:	4798      	blx	r3
    f62c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f62e:	0023      	movs	r3, r4
    f630:	332f      	adds	r3, #47	; 0x2f
    f632:	4e0c      	ldr	r6, [pc, #48]	; (f664 <RADIO_FSKPayloadReady+0xf8>)
    f634:	7818      	ldrb	r0, [r3, #0]
    f636:	47b0      	blx	r6
    f638:	0023      	movs	r3, r4
    f63a:	332e      	adds	r3, #46	; 0x2e
    f63c:	7818      	ldrb	r0, [r3, #0]
    f63e:	47b0      	blx	r6
    f640:	4e0e      	ldr	r6, [pc, #56]	; (f67c <RADIO_FSKPayloadReady+0x110>)
    f642:	2201      	movs	r2, #1
    f644:	0031      	movs	r1, r6
    f646:	2000      	movs	r0, #0
    f648:	4f08      	ldr	r7, [pc, #32]	; (f66c <RADIO_FSKPayloadReady+0x100>)
    f64a:	47b8      	blx	r7
    f64c:	7832      	ldrb	r2, [r6, #0]
    f64e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    f650:	b2d2      	uxtb	r2, r2
    f652:	2000      	movs	r0, #0
    f654:	47b8      	blx	r7
    f656:	e7cc      	b.n	f5f2 <RADIO_FSKPayloadReady+0x86>
    f658:	0000c9b5 	.word	0x0000c9b5
    f65c:	20002d88 	.word	0x20002d88
    f660:	20003054 	.word	0x20003054
    f664:	0000d891 	.word	0x0000d891
    f668:	00004569 	.word	0x00004569
    f66c:	0000ca21 	.word	0x0000ca21
    f670:	000045a9 	.word	0x000045a9
    f674:	0000f2f9 	.word	0x0000f2f9
    f678:	0000f011 	.word	0x0000f011
    f67c:	20002db4 	.word	0x20002db4

0000f680 <Radio_SetClockInput>:
    f680:	b510      	push	{r4, lr}
    f682:	4b08      	ldr	r3, [pc, #32]	; (f6a4 <Radio_SetClockInput+0x24>)
    f684:	3355      	adds	r3, #85	; 0x55
    f686:	781b      	ldrb	r3, [r3, #0]
    f688:	2b00      	cmp	r3, #0
    f68a:	d10a      	bne.n	f6a2 <Radio_SetClockInput+0x22>
    f68c:	4b06      	ldr	r3, [pc, #24]	; (f6a8 <Radio_SetClockInput+0x28>)
    f68e:	204b      	movs	r0, #75	; 0x4b
    f690:	4798      	blx	r3
    f692:	2110      	movs	r1, #16
    f694:	4301      	orrs	r1, r0
    f696:	4b05      	ldr	r3, [pc, #20]	; (f6ac <Radio_SetClockInput+0x2c>)
    f698:	b2c9      	uxtb	r1, r1
    f69a:	204b      	movs	r0, #75	; 0x4b
    f69c:	4798      	blx	r3
    f69e:	4b04      	ldr	r3, [pc, #16]	; (f6b0 <Radio_SetClockInput+0x30>)
    f6a0:	4798      	blx	r3
    f6a2:	bd10      	pop	{r4, pc}
    f6a4:	20002d88 	.word	0x20002d88
    f6a8:	0000c9b5 	.word	0x0000c9b5
    f6ac:	0000c98d 	.word	0x0000c98d
    f6b0:	0000cad5 	.word	0x0000cad5

0000f6b4 <RADIO_RxHandler>:
    f6b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f6b6:	4b34      	ldr	r3, [pc, #208]	; (f788 <RADIO_RxHandler+0xd4>)
    f6b8:	4798      	blx	r3
    f6ba:	2000      	movs	r0, #0
    f6bc:	4b33      	ldr	r3, [pc, #204]	; (f78c <RADIO_RxHandler+0xd8>)
    f6be:	4798      	blx	r3
    f6c0:	4e33      	ldr	r6, [pc, #204]	; (f790 <RADIO_RxHandler+0xdc>)
    f6c2:	4b34      	ldr	r3, [pc, #208]	; (f794 <RADIO_RxHandler+0xe0>)
    f6c4:	8830      	ldrh	r0, [r6, #0]
    f6c6:	2800      	cmp	r0, #0
    f6c8:	d100      	bne.n	f6cc <RADIO_RxHandler+0x18>
    f6ca:	3004      	adds	r0, #4
    f6cc:	4798      	blx	r3
    f6ce:	4c32      	ldr	r4, [pc, #200]	; (f798 <RADIO_RxHandler+0xe4>)
    f6d0:	4d32      	ldr	r5, [pc, #200]	; (f79c <RADIO_RxHandler+0xe8>)
    f6d2:	0023      	movs	r3, r4
    f6d4:	3334      	adds	r3, #52	; 0x34
    f6d6:	7819      	ldrb	r1, [r3, #0]
    f6d8:	2901      	cmp	r1, #1
    f6da:	d122      	bne.n	f722 <RADIO_RxHandler+0x6e>
    f6dc:	2022      	movs	r0, #34	; 0x22
    f6de:	47a8      	blx	r5
    f6e0:	2100      	movs	r1, #0
    f6e2:	2040      	movs	r0, #64	; 0x40
    f6e4:	47a8      	blx	r5
    f6e6:	2100      	movs	r1, #0
    f6e8:	2041      	movs	r0, #65	; 0x41
    f6ea:	47a8      	blx	r5
    f6ec:	8832      	ldrh	r2, [r6, #0]
    f6ee:	4b2c      	ldr	r3, [pc, #176]	; (f7a0 <RADIO_RxHandler+0xec>)
    f6f0:	2a00      	cmp	r2, #0
    f6f2:	d131      	bne.n	f758 <RADIO_RxHandler+0xa4>
    f6f4:	0021      	movs	r1, r4
    f6f6:	2005      	movs	r0, #5
    f6f8:	3134      	adds	r1, #52	; 0x34
    f6fa:	7809      	ldrb	r1, [r1, #0]
    f6fc:	4798      	blx	r3
    f6fe:	68e3      	ldr	r3, [r4, #12]
    f700:	2b00      	cmp	r3, #0
    f702:	d00c      	beq.n	f71e <RADIO_RxHandler+0x6a>
    f704:	8832      	ldrh	r2, [r6, #0]
    f706:	2a00      	cmp	r2, #0
    f708:	d009      	beq.n	f71e <RADIO_RxHandler+0x6a>
    f70a:	21fa      	movs	r1, #250	; 0xfa
    f70c:	2200      	movs	r2, #0
    f70e:	342f      	adds	r4, #47	; 0x2f
    f710:	0089      	lsls	r1, r1, #2
    f712:	7820      	ldrb	r0, [r4, #0]
    f714:	4359      	muls	r1, r3
    f716:	9200      	str	r2, [sp, #0]
    f718:	4b22      	ldr	r3, [pc, #136]	; (f7a4 <RADIO_RxHandler+0xf0>)
    f71a:	4c23      	ldr	r4, [pc, #140]	; (f7a8 <RADIO_RxHandler+0xf4>)
    f71c:	47a0      	blx	r4
    f71e:	2000      	movs	r0, #0
    f720:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    f722:	0023      	movs	r3, r4
    f724:	3338      	adds	r3, #56	; 0x38
    f726:	7819      	ldrb	r1, [r3, #0]
    f728:	2012      	movs	r0, #18
    f72a:	47a8      	blx	r5
    f72c:	0023      	movs	r3, r4
    f72e:	3339      	adds	r3, #57	; 0x39
    f730:	7819      	ldrb	r1, [r3, #0]
    f732:	2013      	movs	r0, #19
    f734:	47a8      	blx	r5
    f736:	210c      	movs	r1, #12
    f738:	2040      	movs	r0, #64	; 0x40
    f73a:	47a8      	blx	r5
    f73c:	2100      	movs	r1, #0
    f73e:	2041      	movs	r0, #65	; 0x41
    f740:	47a8      	blx	r5
    f742:	0022      	movs	r2, r4
    f744:	2300      	movs	r3, #0
    f746:	3256      	adds	r2, #86	; 0x56
    f748:	8013      	strh	r3, [r2, #0]
    f74a:	0022      	movs	r2, r4
    f74c:	322c      	adds	r2, #44	; 0x2c
    f74e:	7013      	strb	r3, [r2, #0]
    f750:	0022      	movs	r2, r4
    f752:	3258      	adds	r2, #88	; 0x58
    f754:	7013      	strb	r3, [r2, #0]
    f756:	e7c9      	b.n	f6ec <RADIO_RxHandler+0x38>
    f758:	0022      	movs	r2, r4
    f75a:	3234      	adds	r2, #52	; 0x34
    f75c:	7811      	ldrb	r1, [r2, #0]
    f75e:	2200      	movs	r2, #0
    f760:	2901      	cmp	r1, #1
    f762:	d101      	bne.n	f768 <RADIO_RxHandler+0xb4>
    f764:	2006      	movs	r0, #6
    f766:	e7c9      	b.n	f6fc <RADIO_RxHandler+0x48>
    f768:	0011      	movs	r1, r2
    f76a:	2005      	movs	r0, #5
    f76c:	4798      	blx	r3
    f76e:	21fa      	movs	r1, #250	; 0xfa
    f770:	8833      	ldrh	r3, [r6, #0]
    f772:	0089      	lsls	r1, r1, #2
    f774:	4359      	muls	r1, r3
    f776:	0023      	movs	r3, r4
    f778:	2200      	movs	r2, #0
    f77a:	332e      	adds	r3, #46	; 0x2e
    f77c:	7818      	ldrb	r0, [r3, #0]
    f77e:	4d0a      	ldr	r5, [pc, #40]	; (f7a8 <RADIO_RxHandler+0xf4>)
    f780:	9200      	str	r2, [sp, #0]
    f782:	4b0a      	ldr	r3, [pc, #40]	; (f7ac <RADIO_RxHandler+0xf8>)
    f784:	47a8      	blx	r5
    f786:	e7ba      	b.n	f6fe <RADIO_RxHandler+0x4a>
    f788:	0000f681 	.word	0x0000f681
    f78c:	0000f2c5 	.word	0x0000f2c5
    f790:	20001ea0 	.word	0x20001ea0
    f794:	0000ea51 	.word	0x0000ea51
    f798:	20002d88 	.word	0x20002d88
    f79c:	0000c98d 	.word	0x0000c98d
    f7a0:	0000dbb5 	.word	0x0000dbb5
    f7a4:	0000f32d 	.word	0x0000f32d
    f7a8:	0000d579 	.word	0x0000d579
    f7ac:	0000f3bd 	.word	0x0000f3bd

0000f7b0 <Radio_ResetClockInput>:
    f7b0:	b510      	push	{r4, lr}
    f7b2:	4b04      	ldr	r3, [pc, #16]	; (f7c4 <Radio_ResetClockInput+0x14>)
    f7b4:	3355      	adds	r3, #85	; 0x55
    f7b6:	781b      	ldrb	r3, [r3, #0]
    f7b8:	2b00      	cmp	r3, #0
    f7ba:	d101      	bne.n	f7c0 <Radio_ResetClockInput+0x10>
    f7bc:	4b02      	ldr	r3, [pc, #8]	; (f7c8 <Radio_ResetClockInput+0x18>)
    f7be:	4798      	blx	r3
    f7c0:	bd10      	pop	{r4, pc}
    f7c2:	46c0      	nop			; (mov r8, r8)
    f7c4:	20002d88 	.word	0x20002d88
    f7c8:	0000caf1 	.word	0x0000caf1

0000f7cc <RADIO_InitDefaultAttributes>:
    f7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f7ce:	2501      	movs	r5, #1
    f7d0:	4b64      	ldr	r3, [pc, #400]	; (f964 <RADIO_InitDefaultAttributes+0x198>)
    f7d2:	4c65      	ldr	r4, [pc, #404]	; (f968 <RADIO_InitDefaultAttributes+0x19c>)
    f7d4:	701d      	strb	r5, [r3, #0]
    f7d6:	4b65      	ldr	r3, [pc, #404]	; (f96c <RADIO_InitDefaultAttributes+0x1a0>)
    f7d8:	2207      	movs	r2, #7
    f7da:	6023      	str	r3, [r4, #0]
    f7dc:	4b64      	ldr	r3, [pc, #400]	; (f970 <RADIO_InitDefaultAttributes+0x1a4>)
    f7de:	18a1      	adds	r1, r4, r2
    f7e0:	6063      	str	r3, [r4, #4]
    f7e2:	4b64      	ldr	r3, [pc, #400]	; (f974 <RADIO_InitDefaultAttributes+0x1a8>)
    f7e4:	0027      	movs	r7, r4
    f7e6:	60a3      	str	r3, [r4, #8]
    f7e8:	0023      	movs	r3, r4
    f7ea:	3334      	adds	r3, #52	; 0x34
    f7ec:	701d      	strb	r5, [r3, #0]
    f7ee:	0023      	movs	r3, r4
    f7f0:	3336      	adds	r3, #54	; 0x36
    f7f2:	701a      	strb	r2, [r3, #0]
    f7f4:	1ce3      	adds	r3, r4, #3
    f7f6:	77dd      	strb	r5, [r3, #31]
    f7f8:	0023      	movs	r3, r4
    f7fa:	3333      	adds	r3, #51	; 0x33
    f7fc:	701d      	strb	r5, [r3, #0]
    f7fe:	2300      	movs	r3, #0
    f800:	77cb      	strb	r3, [r1, #31]
    f802:	2108      	movs	r1, #8
    f804:	82a1      	strh	r1, [r4, #20]
    f806:	0021      	movs	r1, r4
    f808:	3135      	adds	r1, #53	; 0x35
    f80a:	700a      	strb	r2, [r1, #0]
    f80c:	1d22      	adds	r2, r4, #4
    f80e:	77d5      	strb	r5, [r2, #31]
    f810:	1d62      	adds	r2, r4, #5
    f812:	77d3      	strb	r3, [r2, #31]
    f814:	1da2      	adds	r2, r4, #6
    f816:	77d3      	strb	r3, [r2, #31]
    f818:	2194      	movs	r1, #148	; 0x94
    f81a:	22c1      	movs	r2, #193	; 0xc1
    f81c:	76a1      	strb	r1, [r4, #26]
    f81e:	7662      	strb	r2, [r4, #25]
    f820:	76e2      	strb	r2, [r4, #27]
    f822:	3991      	subs	r1, #145	; 0x91
    f824:	1ca2      	adds	r2, r4, #2
    f826:	77d1      	strb	r1, [r2, #31]
    f828:	2234      	movs	r2, #52	; 0x34
    f82a:	7622      	strb	r2, [r4, #24]
    f82c:	0022      	movs	r2, r4
    f82e:	317d      	adds	r1, #125	; 0x7d
    f830:	3232      	adds	r2, #50	; 0x32
    f832:	7011      	strb	r1, [r2, #0]
    f834:	4a50      	ldr	r2, [pc, #320]	; (f978 <RADIO_InitDefaultAttributes+0x1ac>)
    f836:	397e      	subs	r1, #126	; 0x7e
    f838:	60e2      	str	r2, [r4, #12]
    f83a:	0022      	movs	r2, r4
    f83c:	3237      	adds	r2, #55	; 0x37
    f83e:	7011      	strb	r1, [r2, #0]
    f840:	0022      	movs	r2, r4
    f842:	3109      	adds	r1, #9
    f844:	3238      	adds	r2, #56	; 0x38
    f846:	7011      	strb	r1, [r2, #0]
    f848:	0022      	movs	r2, r4
    f84a:	3107      	adds	r1, #7
    f84c:	3239      	adds	r2, #57	; 0x39
    f84e:	7011      	strb	r1, [r2, #0]
    f850:	0022      	movs	r2, r4
    f852:	322c      	adds	r2, #44	; 0x2c
    f854:	7013      	strb	r3, [r2, #0]
    f856:	4a49      	ldr	r2, [pc, #292]	; (f97c <RADIO_InitDefaultAttributes+0x1b0>)
    f858:	82e3      	strh	r3, [r4, #22]
    f85a:	62a2      	str	r2, [r4, #40]	; 0x28
    f85c:	0022      	movs	r2, r4
    f85e:	324c      	adds	r2, #76	; 0x4c
    f860:	8013      	strh	r3, [r2, #0]
    f862:	0022      	movs	r2, r4
    f864:	324e      	adds	r2, #78	; 0x4e
    f866:	7013      	strb	r3, [r2, #0]
    f868:	0022      	movs	r2, r4
    f86a:	324f      	adds	r2, #79	; 0x4f
    f86c:	7013      	strb	r3, [r2, #0]
    f86e:	0022      	movs	r2, r4
    f870:	3240      	adds	r2, #64	; 0x40
    f872:	7013      	strb	r3, [r2, #0]
    f874:	0022      	movs	r2, r4
    f876:	3241      	adds	r2, #65	; 0x41
    f878:	7013      	strb	r3, [r2, #0]
    f87a:	0022      	movs	r2, r4
    f87c:	3254      	adds	r2, #84	; 0x54
    f87e:	7013      	strb	r3, [r2, #0]
    f880:	0022      	movs	r2, r4
    f882:	3255      	adds	r2, #85	; 0x55
    f884:	7015      	strb	r5, [r2, #0]
    f886:	0022      	movs	r2, r4
    f888:	3258      	adds	r2, #88	; 0x58
    f88a:	6463      	str	r3, [r4, #68]	; 0x44
    f88c:	64a3      	str	r3, [r4, #72]	; 0x48
    f88e:	87a3      	strh	r3, [r4, #60]	; 0x3c
    f890:	87e3      	strh	r3, [r4, #62]	; 0x3e
    f892:	7013      	strb	r3, [r2, #0]
    f894:	3730      	adds	r7, #48	; 0x30
    f896:	783b      	ldrb	r3, [r7, #0]
    f898:	2b00      	cmp	r3, #0
    f89a:	d151      	bne.n	f940 <RADIO_InitDefaultAttributes+0x174>
    f89c:	4838      	ldr	r0, [pc, #224]	; (f980 <RADIO_InitDefaultAttributes+0x1b4>)
    f89e:	4e39      	ldr	r6, [pc, #228]	; (f984 <RADIO_InitDefaultAttributes+0x1b8>)
    f8a0:	47b0      	blx	r6
    f8a2:	2808      	cmp	r0, #8
    f8a4:	d149      	bne.n	f93a <RADIO_InitDefaultAttributes+0x16e>
    f8a6:	4838      	ldr	r0, [pc, #224]	; (f988 <RADIO_InitDefaultAttributes+0x1bc>)
    f8a8:	47b0      	blx	r6
    f8aa:	2808      	cmp	r0, #8
    f8ac:	d145      	bne.n	f93a <RADIO_InitDefaultAttributes+0x16e>
    f8ae:	4837      	ldr	r0, [pc, #220]	; (f98c <RADIO_InitDefaultAttributes+0x1c0>)
    f8b0:	47b0      	blx	r6
    f8b2:	2808      	cmp	r0, #8
    f8b4:	d141      	bne.n	f93a <RADIO_InitDefaultAttributes+0x16e>
    f8b6:	4836      	ldr	r0, [pc, #216]	; (f990 <RADIO_InitDefaultAttributes+0x1c4>)
    f8b8:	47b0      	blx	r6
    f8ba:	2808      	cmp	r0, #8
    f8bc:	d13d      	bne.n	f93a <RADIO_InitDefaultAttributes+0x16e>
    f8be:	703d      	strb	r5, [r7, #0]
    f8c0:	4b34      	ldr	r3, [pc, #208]	; (f994 <RADIO_InitDefaultAttributes+0x1c8>)
    f8c2:	4798      	blx	r3
    f8c4:	4b34      	ldr	r3, [pc, #208]	; (f998 <RADIO_InitDefaultAttributes+0x1cc>)
    f8c6:	4798      	blx	r3
    f8c8:	2800      	cmp	r0, #0
    f8ca:	d107      	bne.n	f8dc <RADIO_InitDefaultAttributes+0x110>
    f8cc:	0023      	movs	r3, r4
    f8ce:	3355      	adds	r3, #85	; 0x55
    f8d0:	7018      	strb	r0, [r3, #0]
    f8d2:	4b32      	ldr	r3, [pc, #200]	; (f99c <RADIO_InitDefaultAttributes+0x1d0>)
    f8d4:	4798      	blx	r3
    f8d6:	0023      	movs	r3, r4
    f8d8:	3354      	adds	r3, #84	; 0x54
    f8da:	7018      	strb	r0, [r3, #0]
    f8dc:	4b30      	ldr	r3, [pc, #192]	; (f9a0 <RADIO_InitDefaultAttributes+0x1d4>)
    f8de:	4798      	blx	r3
    f8e0:	2201      	movs	r2, #1
    f8e2:	2100      	movs	r1, #0
    f8e4:	0010      	movs	r0, r2
    f8e6:	4f2f      	ldr	r7, [pc, #188]	; (f9a4 <RADIO_InitDefaultAttributes+0x1d8>)
    f8e8:	47b8      	blx	r7
    f8ea:	6820      	ldr	r0, [r4, #0]
    f8ec:	4b2e      	ldr	r3, [pc, #184]	; (f9a8 <RADIO_InitDefaultAttributes+0x1dc>)
    f8ee:	4798      	blx	r3
    f8f0:	2142      	movs	r1, #66	; 0x42
    f8f2:	203b      	movs	r0, #59	; 0x3b
    f8f4:	4d2d      	ldr	r5, [pc, #180]	; (f9ac <RADIO_InitDefaultAttributes+0x1e0>)
    f8f6:	47a8      	blx	r5
    f8f8:	203b      	movs	r0, #59	; 0x3b
    f8fa:	4b2d      	ldr	r3, [pc, #180]	; (f9b0 <RADIO_InitDefaultAttributes+0x1e4>)
    f8fc:	4798      	blx	r3
    f8fe:	2620      	movs	r6, #32
    f900:	4006      	ands	r6, r0
    f902:	d1f9      	bne.n	f8f8 <RADIO_InitDefaultAttributes+0x12c>
    f904:	2123      	movs	r1, #35	; 0x23
    f906:	200c      	movs	r0, #12
    f908:	47a8      	blx	r5
    f90a:	21aa      	movs	r1, #170	; 0xaa
    f90c:	201f      	movs	r0, #31
    f90e:	47a8      	blx	r5
    f910:	21ff      	movs	r1, #255	; 0xff
    f912:	2032      	movs	r0, #50	; 0x32
    f914:	47a8      	blx	r5
    f916:	2140      	movs	r1, #64	; 0x40
    f918:	2031      	movs	r0, #49	; 0x31
    f91a:	47a8      	blx	r5
    f91c:	2201      	movs	r2, #1
    f91e:	0030      	movs	r0, r6
    f920:	0011      	movs	r1, r2
    f922:	47b8      	blx	r7
    f924:	21ff      	movs	r1, #255	; 0xff
    f926:	2023      	movs	r0, #35	; 0x23
    f928:	47a8      	blx	r5
    f92a:	4b21      	ldr	r3, [pc, #132]	; (f9b0 <RADIO_InitDefaultAttributes+0x1e4>)
    f92c:	2042      	movs	r0, #66	; 0x42
    f92e:	4798      	blx	r3
    f930:	3431      	adds	r4, #49	; 0x31
    f932:	4b20      	ldr	r3, [pc, #128]	; (f9b4 <RADIO_InitDefaultAttributes+0x1e8>)
    f934:	7020      	strb	r0, [r4, #0]
    f936:	4798      	blx	r3
    f938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f93a:	4b1f      	ldr	r3, [pc, #124]	; (f9b8 <RADIO_InitDefaultAttributes+0x1ec>)
    f93c:	4798      	blx	r3
    f93e:	e7bf      	b.n	f8c0 <RADIO_InitDefaultAttributes+0xf4>
    f940:	0023      	movs	r3, r4
    f942:	332d      	adds	r3, #45	; 0x2d
    f944:	4d1d      	ldr	r5, [pc, #116]	; (f9bc <RADIO_InitDefaultAttributes+0x1f0>)
    f946:	7818      	ldrb	r0, [r3, #0]
    f948:	47a8      	blx	r5
    f94a:	0023      	movs	r3, r4
    f94c:	332e      	adds	r3, #46	; 0x2e
    f94e:	7818      	ldrb	r0, [r3, #0]
    f950:	47a8      	blx	r5
    f952:	0023      	movs	r3, r4
    f954:	332f      	adds	r3, #47	; 0x2f
    f956:	7818      	ldrb	r0, [r3, #0]
    f958:	47a8      	blx	r5
    f95a:	0023      	movs	r3, r4
    f95c:	3350      	adds	r3, #80	; 0x50
    f95e:	7818      	ldrb	r0, [r3, #0]
    f960:	47a8      	blx	r5
    f962:	e7ad      	b.n	f8c0 <RADIO_InitDefaultAttributes+0xf4>
    f964:	20003057 	.word	0x20003057
    f968:	20002d88 	.word	0x20002d88
    f96c:	33be27a0 	.word	0x33be27a0
    f970:	000061a8 	.word	0x000061a8
    f974:	0000c350 	.word	0x0000c350
    f978:	00003a98 	.word	0x00003a98
    f97c:	20002f54 	.word	0x20002f54
    f980:	20002db5 	.word	0x20002db5
    f984:	0000d545 	.word	0x0000d545
    f988:	20002db6 	.word	0x20002db6
    f98c:	20002db7 	.word	0x20002db7
    f990:	20002dd8 	.word	0x20002dd8
    f994:	0000c94d 	.word	0x0000c94d
    f998:	0000cad1 	.word	0x0000cad1
    f99c:	0000cacd 	.word	0x0000cacd
    f9a0:	0000f681 	.word	0x0000f681
    f9a4:	0000dbb5 	.word	0x0000dbb5
    f9a8:	0000ea09 	.word	0x0000ea09
    f9ac:	0000c98d 	.word	0x0000c98d
    f9b0:	0000c9b5 	.word	0x0000c9b5
    f9b4:	0000f7b1 	.word	0x0000f7b1
    f9b8:	0000d489 	.word	0x0000d489
    f9bc:	0000d891 	.word	0x0000d891

0000f9c0 <RADIO_Receive>:
    f9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f9c2:	7803      	ldrb	r3, [r0, #0]
    f9c4:	0006      	movs	r6, r0
    f9c6:	4d24      	ldr	r5, [pc, #144]	; (fa58 <RADIO_Receive+0x98>)
    f9c8:	2b00      	cmp	r3, #0
    f9ca:	d11d      	bne.n	fa08 <RADIO_Receive+0x48>
    f9cc:	782b      	ldrb	r3, [r5, #0]
    f9ce:	2004      	movs	r0, #4
    f9d0:	2b01      	cmp	r3, #1
    f9d2:	d118      	bne.n	fa06 <RADIO_Receive+0x46>
    f9d4:	4c21      	ldr	r4, [pc, #132]	; (fa5c <RADIO_Receive+0x9c>)
    f9d6:	4f22      	ldr	r7, [pc, #136]	; (fa60 <RADIO_Receive+0xa0>)
    f9d8:	0023      	movs	r3, r4
    f9da:	332f      	adds	r3, #47	; 0x2f
    f9dc:	7818      	ldrb	r0, [r3, #0]
    f9de:	47b8      	blx	r7
    f9e0:	0023      	movs	r3, r4
    f9e2:	3334      	adds	r3, #52	; 0x34
    f9e4:	781b      	ldrb	r3, [r3, #0]
    f9e6:	2b00      	cmp	r3, #0
    f9e8:	d102      	bne.n	f9f0 <RADIO_Receive+0x30>
    f9ea:	342e      	adds	r4, #46	; 0x2e
    f9ec:	7820      	ldrb	r0, [r4, #0]
    f9ee:	47b8      	blx	r7
    f9f0:	8872      	ldrh	r2, [r6, #2]
    f9f2:	4b1c      	ldr	r3, [pc, #112]	; (fa64 <RADIO_Receive+0xa4>)
    f9f4:	2008      	movs	r0, #8
    f9f6:	801a      	strh	r2, [r3, #0]
    f9f8:	2304      	movs	r3, #4
    f9fa:	702b      	strb	r3, [r5, #0]
    f9fc:	4b1a      	ldr	r3, [pc, #104]	; (fa68 <RADIO_Receive+0xa8>)
    f9fe:	4798      	blx	r3
    fa00:	4b1a      	ldr	r3, [pc, #104]	; (fa6c <RADIO_Receive+0xac>)
    fa02:	4798      	blx	r3
    fa04:	2000      	movs	r0, #0
    fa06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fa08:	782b      	ldrb	r3, [r5, #0]
    fa0a:	2000      	movs	r0, #0
    fa0c:	2b01      	cmp	r3, #1
    fa0e:	d0fa      	beq.n	fa06 <RADIO_Receive+0x46>
    fa10:	782b      	ldrb	r3, [r5, #0]
    fa12:	3003      	adds	r0, #3
    fa14:	2b04      	cmp	r3, #4
    fa16:	d1f6      	bne.n	fa06 <RADIO_Receive+0x46>
    fa18:	4c10      	ldr	r4, [pc, #64]	; (fa5c <RADIO_Receive+0x9c>)
    fa1a:	4e11      	ldr	r6, [pc, #68]	; (fa60 <RADIO_Receive+0xa0>)
    fa1c:	0023      	movs	r3, r4
    fa1e:	332f      	adds	r3, #47	; 0x2f
    fa20:	7818      	ldrb	r0, [r3, #0]
    fa22:	47b0      	blx	r6
    fa24:	0023      	movs	r3, r4
    fa26:	3334      	adds	r3, #52	; 0x34
    fa28:	781b      	ldrb	r3, [r3, #0]
    fa2a:	2b00      	cmp	r3, #0
    fa2c:	d103      	bne.n	fa36 <RADIO_Receive+0x76>
    fa2e:	0023      	movs	r3, r4
    fa30:	332e      	adds	r3, #46	; 0x2e
    fa32:	7818      	ldrb	r0, [r3, #0]
    fa34:	47b0      	blx	r6
    fa36:	2200      	movs	r2, #0
    fa38:	3434      	adds	r4, #52	; 0x34
    fa3a:	7821      	ldrb	r1, [r4, #0]
    fa3c:	0010      	movs	r0, r2
    fa3e:	4b0c      	ldr	r3, [pc, #48]	; (fa70 <RADIO_Receive+0xb0>)
    fa40:	4798      	blx	r3
    fa42:	4b0c      	ldr	r3, [pc, #48]	; (fa74 <RADIO_Receive+0xb4>)
    fa44:	4798      	blx	r3
    fa46:	2301      	movs	r3, #1
    fa48:	2008      	movs	r0, #8
    fa4a:	4c0b      	ldr	r4, [pc, #44]	; (fa78 <RADIO_Receive+0xb8>)
    fa4c:	702b      	strb	r3, [r5, #0]
    fa4e:	47a0      	blx	r4
    fa50:	2002      	movs	r0, #2
    fa52:	47a0      	blx	r4
    fa54:	e7d6      	b.n	fa04 <RADIO_Receive+0x44>
    fa56:	46c0      	nop			; (mov r8, r8)
    fa58:	20003057 	.word	0x20003057
    fa5c:	20002d88 	.word	0x20002d88
    fa60:	0000d891 	.word	0x0000d891
    fa64:	20001ea0 	.word	0x20001ea0
    fa68:	0000f011 	.word	0x0000f011
    fa6c:	0000f681 	.word	0x0000f681
    fa70:	0000dbb5 	.word	0x0000dbb5
    fa74:	0000f7b1 	.word	0x0000f7b1
    fa78:	0000f03d 	.word	0x0000f03d

0000fa7c <RADIO_TxHandler>:
    fa7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    fa7e:	2500      	movs	r5, #0
    fa80:	b087      	sub	sp, #28
    fa82:	ae03      	add	r6, sp, #12
    fa84:	4f56      	ldr	r7, [pc, #344]	; (fbe0 <RADIO_TxHandler+0x164>)
    fa86:	7035      	strb	r5, [r6, #0]
    fa88:	47b8      	blx	r7
    fa8a:	4c56      	ldr	r4, [pc, #344]	; (fbe4 <RADIO_TxHandler+0x168>)
    fa8c:	0023      	movs	r3, r4
    fa8e:	332d      	adds	r3, #45	; 0x2d
    fa90:	7818      	ldrb	r0, [r3, #0]
    fa92:	4b55      	ldr	r3, [pc, #340]	; (fbe8 <RADIO_TxHandler+0x16c>)
    fa94:	4798      	blx	r3
    fa96:	0023      	movs	r3, r4
    fa98:	3341      	adds	r3, #65	; 0x41
    fa9a:	781b      	ldrb	r3, [r3, #0]
    fa9c:	42ab      	cmp	r3, r5
    fa9e:	d021      	beq.n	fae4 <RADIO_TxHandler+0x68>
    faa0:	2214      	movs	r2, #20
    faa2:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    faa4:	4353      	muls	r3, r2
    faa6:	0022      	movs	r2, r4
    faa8:	3240      	adds	r2, #64	; 0x40
    faaa:	7013      	strb	r3, [r2, #0]
    faac:	47b8      	blx	r7
    faae:	0028      	movs	r0, r5
    fab0:	4b4e      	ldr	r3, [pc, #312]	; (fbec <RADIO_TxHandler+0x170>)
    fab2:	4798      	blx	r3
    fab4:	6820      	ldr	r0, [r4, #0]
    fab6:	4b4e      	ldr	r3, [pc, #312]	; (fbf0 <RADIO_TxHandler+0x174>)
    fab8:	4798      	blx	r3
    faba:	0023      	movs	r3, r4
    fabc:	2201      	movs	r2, #1
    fabe:	334c      	adds	r3, #76	; 0x4c
    fac0:	0029      	movs	r1, r5
    fac2:	0028      	movs	r0, r5
    fac4:	4f4b      	ldr	r7, [pc, #300]	; (fbf4 <RADIO_TxHandler+0x178>)
    fac6:	801d      	strh	r5, [r3, #0]
    fac8:	47b8      	blx	r7
    faca:	2109      	movs	r1, #9
    facc:	2012      	movs	r0, #18
    face:	4b4a      	ldr	r3, [pc, #296]	; (fbf8 <RADIO_TxHandler+0x17c>)
    fad0:	4798      	blx	r3
    fad2:	2201      	movs	r2, #1
    fad4:	0029      	movs	r1, r5
    fad6:	2005      	movs	r0, #5
    fad8:	47b8      	blx	r7
    fada:	0023      	movs	r3, r4
    fadc:	3340      	adds	r3, #64	; 0x40
    fade:	781b      	ldrb	r3, [r3, #0]
    fae0:	42ab      	cmp	r3, r5
    fae2:	d846      	bhi.n	fb72 <RADIO_TxHandler+0xf6>
    fae4:	7833      	ldrb	r3, [r6, #0]
    fae6:	2b07      	cmp	r3, #7
    fae8:	d076      	beq.n	fbd8 <RADIO_TxHandler+0x15c>
    faea:	2001      	movs	r0, #1
    faec:	4b3f      	ldr	r3, [pc, #252]	; (fbec <RADIO_TxHandler+0x170>)
    faee:	4798      	blx	r3
    faf0:	4b42      	ldr	r3, [pc, #264]	; (fbfc <RADIO_TxHandler+0x180>)
    faf2:	2004      	movs	r0, #4
    faf4:	4798      	blx	r3
    faf6:	4b42      	ldr	r3, [pc, #264]	; (fc00 <RADIO_TxHandler+0x184>)
    faf8:	4d3f      	ldr	r5, [pc, #252]	; (fbf8 <RADIO_TxHandler+0x17c>)
    fafa:	781f      	ldrb	r7, [r3, #0]
    fafc:	4e41      	ldr	r6, [pc, #260]	; (fc04 <RADIO_TxHandler+0x188>)
    fafe:	2f01      	cmp	r7, #1
    fb00:	d144      	bne.n	fb8c <RADIO_TxHandler+0x110>
    fb02:	7831      	ldrb	r1, [r6, #0]
    fb04:	2022      	movs	r0, #34	; 0x22
    fb06:	47a8      	blx	r5
    fb08:	4b3f      	ldr	r3, [pc, #252]	; (fc08 <RADIO_TxHandler+0x18c>)
    fb0a:	200a      	movs	r0, #10
    fb0c:	4798      	blx	r3
    fb0e:	21f0      	movs	r1, #240	; 0xf0
    fb10:	4008      	ands	r0, r1
    fb12:	39e8      	subs	r1, #232	; 0xe8
    fb14:	4301      	orrs	r1, r0
    fb16:	200a      	movs	r0, #10
    fb18:	47a8      	blx	r5
    fb1a:	2140      	movs	r1, #64	; 0x40
    fb1c:	0008      	movs	r0, r1
    fb1e:	47a8      	blx	r5
    fb20:	2100      	movs	r1, #0
    fb22:	2041      	movs	r0, #65	; 0x41
    fb24:	47a8      	blx	r5
    fb26:	4b36      	ldr	r3, [pc, #216]	; (fc00 <RADIO_TxHandler+0x184>)
    fb28:	003a      	movs	r2, r7
    fb2a:	7819      	ldrb	r1, [r3, #0]
    fb2c:	0038      	movs	r0, r7
    fb2e:	4b31      	ldr	r3, [pc, #196]	; (fbf4 <RADIO_TxHandler+0x178>)
    fb30:	4798      	blx	r3
    fb32:	4b36      	ldr	r3, [pc, #216]	; (fc0c <RADIO_TxHandler+0x190>)
    fb34:	7832      	ldrb	r2, [r6, #0]
    fb36:	6819      	ldr	r1, [r3, #0]
    fb38:	2000      	movs	r0, #0
    fb3a:	4b35      	ldr	r3, [pc, #212]	; (fc10 <RADIO_TxHandler+0x194>)
    fb3c:	4798      	blx	r3
    fb3e:	0023      	movs	r3, r4
    fb40:	3334      	adds	r3, #52	; 0x34
    fb42:	7819      	ldrb	r1, [r3, #0]
    fb44:	2200      	movs	r2, #0
    fb46:	2003      	movs	r0, #3
    fb48:	4b2a      	ldr	r3, [pc, #168]	; (fbf4 <RADIO_TxHandler+0x178>)
    fb4a:	4798      	blx	r3
    fb4c:	4b31      	ldr	r3, [pc, #196]	; (fc14 <RADIO_TxHandler+0x198>)
    fb4e:	4798      	blx	r3
    fb50:	4b31      	ldr	r3, [pc, #196]	; (fc18 <RADIO_TxHandler+0x19c>)
    fb52:	6018      	str	r0, [r3, #0]
    fb54:	6059      	str	r1, [r3, #4]
    fb56:	68e3      	ldr	r3, [r4, #12]
    fb58:	2b00      	cmp	r3, #0
    fb5a:	d03d      	beq.n	fbd8 <RADIO_TxHandler+0x15c>
    fb5c:	21fa      	movs	r1, #250	; 0xfa
    fb5e:	2200      	movs	r2, #0
    fb60:	342f      	adds	r4, #47	; 0x2f
    fb62:	0089      	lsls	r1, r1, #2
    fb64:	4359      	muls	r1, r3
    fb66:	7820      	ldrb	r0, [r4, #0]
    fb68:	4b2c      	ldr	r3, [pc, #176]	; (fc1c <RADIO_TxHandler+0x1a0>)
    fb6a:	9200      	str	r2, [sp, #0]
    fb6c:	4c2c      	ldr	r4, [pc, #176]	; (fc20 <RADIO_TxHandler+0x1a4>)
    fb6e:	47a0      	blx	r4
    fb70:	e032      	b.n	fbd8 <RADIO_TxHandler+0x15c>
    fb72:	4f2c      	ldr	r7, [pc, #176]	; (fc24 <RADIO_TxHandler+0x1a8>)
    fb74:	4b2c      	ldr	r3, [pc, #176]	; (fc28 <RADIO_TxHandler+0x1ac>)
    fb76:	0038      	movs	r0, r7
    fb78:	4798      	blx	r3
    fb7a:	233e      	movs	r3, #62	; 0x3e
    fb7c:	5ee2      	ldrsh	r2, [r4, r3]
    fb7e:	2100      	movs	r1, #0
    fb80:	5e7b      	ldrsh	r3, [r7, r1]
    fb82:	429a      	cmp	r2, r3
    fb84:	db14      	blt.n	fbb0 <RADIO_TxHandler+0x134>
    fb86:	3501      	adds	r5, #1
    fb88:	b2ed      	uxtb	r5, r5
    fb8a:	e7a6      	b.n	fada <RADIO_TxHandler+0x5e>
    fb8c:	2100      	movs	r1, #0
    fb8e:	2040      	movs	r0, #64	; 0x40
    fb90:	47a8      	blx	r5
    fb92:	2100      	movs	r1, #0
    fb94:	2041      	movs	r0, #65	; 0x41
    fb96:	47a8      	blx	r5
    fb98:	0023      	movs	r3, r4
    fb9a:	2000      	movs	r0, #0
    fb9c:	3358      	adds	r3, #88	; 0x58
    fb9e:	7831      	ldrb	r1, [r6, #0]
    fba0:	7018      	strb	r0, [r3, #0]
    fba2:	47a8      	blx	r5
    fba4:	4b19      	ldr	r3, [pc, #100]	; (fc0c <RADIO_TxHandler+0x190>)
    fba6:	7831      	ldrb	r1, [r6, #0]
    fba8:	6818      	ldr	r0, [r3, #0]
    fbaa:	4b20      	ldr	r3, [pc, #128]	; (fc2c <RADIO_TxHandler+0x1b0>)
    fbac:	4798      	blx	r3
    fbae:	e7c6      	b.n	fb3e <RADIO_TxHandler+0xc2>
    fbb0:	2000      	movs	r0, #0
    fbb2:	4b1f      	ldr	r3, [pc, #124]	; (fc30 <RADIO_TxHandler+0x1b4>)
    fbb4:	4798      	blx	r3
    fbb6:	4b1f      	ldr	r3, [pc, #124]	; (fc34 <RADIO_TxHandler+0x1b8>)
    fbb8:	4798      	blx	r3
    fbba:	2307      	movs	r3, #7
    fbbc:	2201      	movs	r2, #1
    fbbe:	7033      	strb	r3, [r6, #0]
    fbc0:	4b1d      	ldr	r3, [pc, #116]	; (fc38 <RADIO_TxHandler+0x1bc>)
    fbc2:	701a      	strb	r2, [r3, #0]
    fbc4:	4b1d      	ldr	r3, [pc, #116]	; (fc3c <RADIO_TxHandler+0x1c0>)
    fbc6:	781b      	ldrb	r3, [r3, #0]
    fbc8:	079b      	lsls	r3, r3, #30
    fbca:	d58b      	bpl.n	fae4 <RADIO_TxHandler+0x68>
    fbcc:	6923      	ldr	r3, [r4, #16]
    fbce:	2b00      	cmp	r3, #0
    fbd0:	d088      	beq.n	fae4 <RADIO_TxHandler+0x68>
    fbd2:	0031      	movs	r1, r6
    fbd4:	2002      	movs	r0, #2
    fbd6:	4798      	blx	r3
    fbd8:	2000      	movs	r0, #0
    fbda:	b007      	add	sp, #28
    fbdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fbde:	46c0      	nop			; (mov r8, r8)
    fbe0:	0000f681 	.word	0x0000f681
    fbe4:	20002d88 	.word	0x20002d88
    fbe8:	0000d891 	.word	0x0000d891
    fbec:	0000f2c5 	.word	0x0000f2c5
    fbf0:	0000ea09 	.word	0x0000ea09
    fbf4:	0000dbb5 	.word	0x0000dbb5
    fbf8:	0000c98d 	.word	0x0000c98d
    fbfc:	0000ea51 	.word	0x0000ea51
    fc00:	20002dbc 	.word	0x20002dbc
    fc04:	20001eb4 	.word	0x20001eb4
    fc08:	0000c9b5 	.word	0x0000c9b5
    fc0c:	20001eb0 	.word	0x20001eb0
    fc10:	0000c9e1 	.word	0x0000c9e1
    fc14:	0000d521 	.word	0x0000d521
    fc18:	20001ea8 	.word	0x20001ea8
    fc1c:	0000f32d 	.word	0x0000f32d
    fc20:	0000d579 	.word	0x0000d579
    fc24:	20001e9e 	.word	0x20001e9e
    fc28:	0000ddd1 	.word	0x0000ddd1
    fc2c:	0000f141 	.word	0x0000f141
    fc30:	0000f2f9 	.word	0x0000f2f9
    fc34:	0000f7b1 	.word	0x0000f7b1
    fc38:	20003057 	.word	0x20003057
    fc3c:	20003056 	.word	0x20003056

0000fc40 <RADIO_TxDoneHandler>:
    fc40:	b5f0      	push	{r4, r5, r6, r7, lr}
    fc42:	4b35      	ldr	r3, [pc, #212]	; (fd18 <RADIO_TxDoneHandler+0xd8>)
    fc44:	b087      	sub	sp, #28
    fc46:	881a      	ldrh	r2, [r3, #0]
    fc48:	06d2      	lsls	r2, r2, #27
    fc4a:	0fd2      	lsrs	r2, r2, #31
    fc4c:	9200      	str	r2, [sp, #0]
    fc4e:	466a      	mov	r2, sp
    fc50:	7810      	ldrb	r0, [r2, #0]
    fc52:	881a      	ldrh	r2, [r3, #0]
    fc54:	2801      	cmp	r0, #1
    fc56:	d12b      	bne.n	fcb0 <RADIO_TxDoneHandler+0x70>
    fc58:	4c30      	ldr	r4, [pc, #192]	; (fd1c <RADIO_TxDoneHandler+0xdc>)
    fc5a:	2110      	movs	r1, #16
    fc5c:	0027      	movs	r7, r4
    fc5e:	2500      	movs	r5, #0
    fc60:	438a      	bics	r2, r1
    fc62:	801a      	strh	r2, [r3, #0]
    fc64:	3734      	adds	r7, #52	; 0x34
    fc66:	0002      	movs	r2, r0
    fc68:	7839      	ldrb	r1, [r7, #0]
    fc6a:	4b2d      	ldr	r3, [pc, #180]	; (fd20 <RADIO_TxDoneHandler+0xe0>)
    fc6c:	4798      	blx	r3
    fc6e:	68e3      	ldr	r3, [r4, #12]
    fc70:	ae03      	add	r6, sp, #12
    fc72:	9304      	str	r3, [sp, #16]
    fc74:	7035      	strb	r5, [r6, #0]
    fc76:	002a      	movs	r2, r5
    fc78:	4b29      	ldr	r3, [pc, #164]	; (fd20 <RADIO_TxDoneHandler+0xe0>)
    fc7a:	7839      	ldrb	r1, [r7, #0]
    fc7c:	0028      	movs	r0, r5
    fc7e:	4798      	blx	r3
    fc80:	466a      	mov	r2, sp
    fc82:	4b28      	ldr	r3, [pc, #160]	; (fd24 <RADIO_TxDoneHandler+0xe4>)
    fc84:	7812      	ldrb	r2, [r2, #0]
    fc86:	701a      	strb	r2, [r3, #0]
    fc88:	0023      	movs	r3, r4
    fc8a:	3358      	adds	r3, #88	; 0x58
    fc8c:	701d      	strb	r5, [r3, #0]
    fc8e:	4b26      	ldr	r3, [pc, #152]	; (fd28 <RADIO_TxDoneHandler+0xe8>)
    fc90:	781b      	ldrb	r3, [r3, #0]
    fc92:	075b      	lsls	r3, r3, #29
    fc94:	d505      	bpl.n	fca2 <RADIO_TxDoneHandler+0x62>
    fc96:	6923      	ldr	r3, [r4, #16]
    fc98:	42ab      	cmp	r3, r5
    fc9a:	d002      	beq.n	fca2 <RADIO_TxDoneHandler+0x62>
    fc9c:	0031      	movs	r1, r6
    fc9e:	2004      	movs	r0, #4
    fca0:	4798      	blx	r3
    fca2:	4b22      	ldr	r3, [pc, #136]	; (fd2c <RADIO_TxDoneHandler+0xec>)
    fca4:	4798      	blx	r3
    fca6:	4b22      	ldr	r3, [pc, #136]	; (fd30 <RADIO_TxDoneHandler+0xf0>)
    fca8:	4798      	blx	r3
    fcaa:	2000      	movs	r0, #0
    fcac:	b007      	add	sp, #28
    fcae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fcb0:	07d2      	lsls	r2, r2, #31
    fcb2:	d402      	bmi.n	fcba <RADIO_TxDoneHandler+0x7a>
    fcb4:	881a      	ldrh	r2, [r3, #0]
    fcb6:	0752      	lsls	r2, r2, #29
    fcb8:	d527      	bpl.n	fd0a <RADIO_TxDoneHandler+0xca>
    fcba:	2601      	movs	r6, #1
    fcbc:	2104      	movs	r1, #4
    fcbe:	881a      	ldrh	r2, [r3, #0]
    fcc0:	4f16      	ldr	r7, [pc, #88]	; (fd1c <RADIO_TxDoneHandler+0xdc>)
    fcc2:	43b2      	bics	r2, r6
    fcc4:	801a      	strh	r2, [r3, #0]
    fcc6:	881a      	ldrh	r2, [r3, #0]
    fcc8:	2400      	movs	r4, #0
    fcca:	438a      	bics	r2, r1
    fccc:	801a      	strh	r2, [r3, #0]
    fcce:	4b19      	ldr	r3, [pc, #100]	; (fd34 <RADIO_TxDoneHandler+0xf4>)
    fcd0:	ad03      	add	r5, sp, #12
    fcd2:	681b      	ldr	r3, [r3, #0]
    fcd4:	702c      	strb	r4, [r5, #0]
    fcd6:	9304      	str	r3, [sp, #16]
    fcd8:	003b      	movs	r3, r7
    fcda:	3334      	adds	r3, #52	; 0x34
    fcdc:	7819      	ldrb	r1, [r3, #0]
    fcde:	0022      	movs	r2, r4
    fce0:	0020      	movs	r0, r4
    fce2:	4b0f      	ldr	r3, [pc, #60]	; (fd20 <RADIO_TxDoneHandler+0xe0>)
    fce4:	4798      	blx	r3
    fce6:	4b14      	ldr	r3, [pc, #80]	; (fd38 <RADIO_TxDoneHandler+0xf8>)
    fce8:	4798      	blx	r3
    fcea:	4b0e      	ldr	r3, [pc, #56]	; (fd24 <RADIO_TxDoneHandler+0xe4>)
    fcec:	701e      	strb	r6, [r3, #0]
    fcee:	003b      	movs	r3, r7
    fcf0:	3358      	adds	r3, #88	; 0x58
    fcf2:	701c      	strb	r4, [r3, #0]
    fcf4:	4b0c      	ldr	r3, [pc, #48]	; (fd28 <RADIO_TxDoneHandler+0xe8>)
    fcf6:	781b      	ldrb	r3, [r3, #0]
    fcf8:	079b      	lsls	r3, r3, #30
    fcfa:	d5d6      	bpl.n	fcaa <RADIO_TxDoneHandler+0x6a>
    fcfc:	693b      	ldr	r3, [r7, #16]
    fcfe:	42a3      	cmp	r3, r4
    fd00:	d0d3      	beq.n	fcaa <RADIO_TxDoneHandler+0x6a>
    fd02:	0029      	movs	r1, r5
    fd04:	2002      	movs	r0, #2
    fd06:	4798      	blx	r3
    fd08:	e7cf      	b.n	fcaa <RADIO_TxDoneHandler+0x6a>
    fd0a:	881b      	ldrh	r3, [r3, #0]
    fd0c:	059b      	lsls	r3, r3, #22
    fd0e:	d5cc      	bpl.n	fcaa <RADIO_TxDoneHandler+0x6a>
    fd10:	4b0a      	ldr	r3, [pc, #40]	; (fd3c <RADIO_TxDoneHandler+0xfc>)
    fd12:	4798      	blx	r3
    fd14:	e7c9      	b.n	fcaa <RADIO_TxDoneHandler+0x6a>
    fd16:	46c0      	nop			; (mov r8, r8)
    fd18:	20003054 	.word	0x20003054
    fd1c:	20002d88 	.word	0x20002d88
    fd20:	0000dbb5 	.word	0x0000dbb5
    fd24:	20003057 	.word	0x20003057
    fd28:	20003056 	.word	0x20003056
    fd2c:	0000c94d 	.word	0x0000c94d
    fd30:	0000f7cd 	.word	0x0000f7cd
    fd34:	20001ea8 	.word	0x20001ea8
    fd38:	0000f7b1 	.word	0x0000f7b1
    fd3c:	000137a5 	.word	0x000137a5

0000fd40 <RADIO_RxDoneHandler>:
    fd40:	b5f0      	push	{r4, r5, r6, r7, lr}
    fd42:	4b97      	ldr	r3, [pc, #604]	; (ffa0 <RADIO_RxDoneHandler+0x260>)
    fd44:	b085      	sub	sp, #20
    fd46:	881c      	ldrh	r4, [r3, #0]
    fd48:	881a      	ldrh	r2, [r3, #0]
    fd4a:	06a4      	lsls	r4, r4, #26
    fd4c:	0fe4      	lsrs	r4, r4, #31
    fd4e:	b2e0      	uxtb	r0, r4
    fd50:	2801      	cmp	r0, #1
    fd52:	d126      	bne.n	fda2 <RADIO_RxDoneHandler+0x62>
    fd54:	4d93      	ldr	r5, [pc, #588]	; (ffa4 <RADIO_RxDoneHandler+0x264>)
    fd56:	2120      	movs	r1, #32
    fd58:	002e      	movs	r6, r5
    fd5a:	438a      	bics	r2, r1
    fd5c:	801a      	strh	r2, [r3, #0]
    fd5e:	3634      	adds	r6, #52	; 0x34
    fd60:	0002      	movs	r2, r0
    fd62:	7831      	ldrb	r1, [r6, #0]
    fd64:	4f90      	ldr	r7, [pc, #576]	; (ffa8 <RADIO_RxDoneHandler+0x268>)
    fd66:	47b8      	blx	r7
    fd68:	2200      	movs	r2, #0
    fd6a:	7831      	ldrb	r1, [r6, #0]
    fd6c:	0010      	movs	r0, r2
    fd6e:	47b8      	blx	r7
    fd70:	4b8e      	ldr	r3, [pc, #568]	; (ffac <RADIO_RxDoneHandler+0x26c>)
    fd72:	4798      	blx	r3
    fd74:	4b8e      	ldr	r3, [pc, #568]	; (ffb0 <RADIO_RxDoneHandler+0x270>)
    fd76:	002a      	movs	r2, r5
    fd78:	701c      	strb	r4, [r3, #0]
    fd7a:	2300      	movs	r3, #0
    fd7c:	322c      	adds	r2, #44	; 0x2c
    fd7e:	7013      	strb	r3, [r2, #0]
    fd80:	002a      	movs	r2, r5
    fd82:	a901      	add	r1, sp, #4
    fd84:	3258      	adds	r2, #88	; 0x58
    fd86:	7013      	strb	r3, [r2, #0]
    fd88:	700b      	strb	r3, [r1, #0]
    fd8a:	4b8a      	ldr	r3, [pc, #552]	; (ffb4 <RADIO_RxDoneHandler+0x274>)
    fd8c:	781b      	ldrb	r3, [r3, #0]
    fd8e:	071b      	lsls	r3, r3, #28
    fd90:	d504      	bpl.n	fd9c <RADIO_RxDoneHandler+0x5c>
    fd92:	692b      	ldr	r3, [r5, #16]
    fd94:	2008      	movs	r0, #8
    fd96:	2b00      	cmp	r3, #0
    fd98:	d000      	beq.n	fd9c <RADIO_RxDoneHandler+0x5c>
    fd9a:	e084      	b.n	fea6 <RADIO_RxDoneHandler+0x166>
    fd9c:	2000      	movs	r0, #0
    fd9e:	b005      	add	sp, #20
    fda0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fda2:	0652      	lsls	r2, r2, #25
    fda4:	d402      	bmi.n	fdac <RADIO_RxDoneHandler+0x6c>
    fda6:	881a      	ldrh	r2, [r3, #0]
    fda8:	0612      	lsls	r2, r2, #24
    fdaa:	d523      	bpl.n	fdf4 <RADIO_RxDoneHandler+0xb4>
    fdac:	2140      	movs	r1, #64	; 0x40
    fdae:	881a      	ldrh	r2, [r3, #0]
    fdb0:	4c7c      	ldr	r4, [pc, #496]	; (ffa4 <RADIO_RxDoneHandler+0x264>)
    fdb2:	438a      	bics	r2, r1
    fdb4:	801a      	strh	r2, [r3, #0]
    fdb6:	881a      	ldrh	r2, [r3, #0]
    fdb8:	1849      	adds	r1, r1, r1
    fdba:	438a      	bics	r2, r1
    fdbc:	801a      	strh	r2, [r3, #0]
    fdbe:	0023      	movs	r3, r4
    fdc0:	2200      	movs	r2, #0
    fdc2:	3334      	adds	r3, #52	; 0x34
    fdc4:	7819      	ldrb	r1, [r3, #0]
    fdc6:	0010      	movs	r0, r2
    fdc8:	4b77      	ldr	r3, [pc, #476]	; (ffa8 <RADIO_RxDoneHandler+0x268>)
    fdca:	4798      	blx	r3
    fdcc:	4b77      	ldr	r3, [pc, #476]	; (ffac <RADIO_RxDoneHandler+0x26c>)
    fdce:	4798      	blx	r3
    fdd0:	2201      	movs	r2, #1
    fdd2:	4b77      	ldr	r3, [pc, #476]	; (ffb0 <RADIO_RxDoneHandler+0x270>)
    fdd4:	a901      	add	r1, sp, #4
    fdd6:	701a      	strb	r2, [r3, #0]
    fdd8:	0022      	movs	r2, r4
    fdda:	2300      	movs	r3, #0
    fddc:	322c      	adds	r2, #44	; 0x2c
    fdde:	7013      	strb	r3, [r2, #0]
    fde0:	0022      	movs	r2, r4
    fde2:	3258      	adds	r2, #88	; 0x58
    fde4:	7013      	strb	r3, [r2, #0]
    fde6:	700b      	strb	r3, [r1, #0]
    fde8:	4b72      	ldr	r3, [pc, #456]	; (ffb4 <RADIO_RxDoneHandler+0x274>)
    fdea:	781b      	ldrb	r3, [r3, #0]
    fdec:	071b      	lsls	r3, r3, #28
    fdee:	d5d5      	bpl.n	fd9c <RADIO_RxDoneHandler+0x5c>
    fdf0:	6923      	ldr	r3, [r4, #16]
    fdf2:	e7cf      	b.n	fd94 <RADIO_RxDoneHandler+0x54>
    fdf4:	881a      	ldrh	r2, [r3, #0]
    fdf6:	0792      	lsls	r2, r2, #30
    fdf8:	d571      	bpl.n	fede <RADIO_RxDoneHandler+0x19e>
    fdfa:	2102      	movs	r1, #2
    fdfc:	881a      	ldrh	r2, [r3, #0]
    fdfe:	4d6e      	ldr	r5, [pc, #440]	; (ffb8 <RADIO_RxDoneHandler+0x278>)
    fe00:	438a      	bics	r2, r1
    fe02:	801a      	strh	r2, [r3, #0]
    fe04:	2013      	movs	r0, #19
    fe06:	47a8      	blx	r5
    fe08:	4c66      	ldr	r4, [pc, #408]	; (ffa4 <RADIO_RxDoneHandler+0x264>)
    fe0a:	2100      	movs	r1, #0
    fe0c:	0026      	movs	r6, r4
    fe0e:	362c      	adds	r6, #44	; 0x2c
    fe10:	7030      	strb	r0, [r6, #0]
    fe12:	4b6a      	ldr	r3, [pc, #424]	; (ffbc <RADIO_RxDoneHandler+0x27c>)
    fe14:	200d      	movs	r0, #13
    fe16:	4798      	blx	r3
    fe18:	7832      	ldrb	r2, [r6, #0]
    fe1a:	4b69      	ldr	r3, [pc, #420]	; (ffc0 <RADIO_RxDoneHandler+0x280>)
    fe1c:	b2d2      	uxtb	r2, r2
    fe1e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    fe20:	2000      	movs	r0, #0
    fe22:	4798      	blx	r3
    fe24:	2019      	movs	r0, #25
    fe26:	47a8      	blx	r5
    fe28:	0023      	movs	r3, r4
    fe2a:	b240      	sxtb	r0, r0
    fe2c:	3332      	adds	r3, #50	; 0x32
    fe2e:	2800      	cmp	r0, #0
    fe30:	da3b      	bge.n	feaa <RADIO_RxDoneHandler+0x16a>
    fe32:	4240      	negs	r0, r0
    fe34:	1080      	asrs	r0, r0, #2
    fe36:	4240      	negs	r0, r0
    fe38:	7018      	strb	r0, [r3, #0]
    fe3a:	201a      	movs	r0, #26
    fe3c:	47a8      	blx	r5
    fe3e:	0023      	movs	r3, r4
    fe40:	3332      	adds	r3, #50	; 0x32
    fe42:	781b      	ldrb	r3, [r3, #0]
    fe44:	b202      	sxth	r2, r0
    fe46:	b25b      	sxtb	r3, r3
    fe48:	4d5e      	ldr	r5, [pc, #376]	; (ffc4 <RADIO_RxDoneHandler+0x284>)
    fe4a:	2b00      	cmp	r3, #0
    fe4c:	da36      	bge.n	febc <RADIO_RxDoneHandler+0x17c>
    fe4e:	6821      	ldr	r1, [r4, #0]
    fe50:	4e5d      	ldr	r6, [pc, #372]	; (ffc8 <RADIO_RxDoneHandler+0x288>)
    fe52:	198e      	adds	r6, r1, r6
    fe54:	42ae      	cmp	r6, r5
    fe56:	d82a      	bhi.n	feae <RADIO_RxDoneHandler+0x16e>
    fe58:	3b9d      	subs	r3, #157	; 0x9d
    fe5a:	181b      	adds	r3, r3, r0
    fe5c:	1112      	asrs	r2, r2, #4
    fe5e:	189b      	adds	r3, r3, r2
    fe60:	0022      	movs	r2, r4
    fe62:	3256      	adds	r2, #86	; 0x56
    fe64:	8013      	strh	r3, [r2, #0]
    fe66:	0023      	movs	r3, r4
    fe68:	2200      	movs	r2, #0
    fe6a:	3334      	adds	r3, #52	; 0x34
    fe6c:	7819      	ldrb	r1, [r3, #0]
    fe6e:	0010      	movs	r0, r2
    fe70:	4b4d      	ldr	r3, [pc, #308]	; (ffa8 <RADIO_RxDoneHandler+0x268>)
    fe72:	4798      	blx	r3
    fe74:	4b4d      	ldr	r3, [pc, #308]	; (ffac <RADIO_RxDoneHandler+0x26c>)
    fe76:	4798      	blx	r3
    fe78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    fe7a:	a901      	add	r1, sp, #4
    fe7c:	604b      	str	r3, [r1, #4]
    fe7e:	0023      	movs	r3, r4
    fe80:	332c      	adds	r3, #44	; 0x2c
    fe82:	781b      	ldrb	r3, [r3, #0]
    fe84:	2201      	movs	r2, #1
    fe86:	720b      	strb	r3, [r1, #8]
    fe88:	2300      	movs	r3, #0
    fe8a:	700b      	strb	r3, [r1, #0]
    fe8c:	4b48      	ldr	r3, [pc, #288]	; (ffb0 <RADIO_RxDoneHandler+0x270>)
    fe8e:	701a      	strb	r2, [r3, #0]
    fe90:	4b48      	ldr	r3, [pc, #288]	; (ffb4 <RADIO_RxDoneHandler+0x274>)
    fe92:	7818      	ldrb	r0, [r3, #0]
    fe94:	07c0      	lsls	r0, r0, #31
    fe96:	0fc0      	lsrs	r0, r0, #31
    fe98:	4290      	cmp	r0, r2
    fe9a:	d000      	beq.n	fe9e <RADIO_RxDoneHandler+0x15e>
    fe9c:	e77e      	b.n	fd9c <RADIO_RxDoneHandler+0x5c>
    fe9e:	6923      	ldr	r3, [r4, #16]
    fea0:	2b00      	cmp	r3, #0
    fea2:	d100      	bne.n	fea6 <RADIO_RxDoneHandler+0x166>
    fea4:	e77a      	b.n	fd9c <RADIO_RxDoneHandler+0x5c>
    fea6:	4798      	blx	r3
    fea8:	e778      	b.n	fd9c <RADIO_RxDoneHandler+0x5c>
    feaa:	1080      	asrs	r0, r0, #2
    feac:	e7c4      	b.n	fe38 <RADIO_RxDoneHandler+0xf8>
    feae:	4d47      	ldr	r5, [pc, #284]	; (ffcc <RADIO_RxDoneHandler+0x28c>)
    feb0:	1949      	adds	r1, r1, r5
    feb2:	4d47      	ldr	r5, [pc, #284]	; (ffd0 <RADIO_RxDoneHandler+0x290>)
    feb4:	42a9      	cmp	r1, r5
    feb6:	d8d6      	bhi.n	fe66 <RADIO_RxDoneHandler+0x126>
    feb8:	3ba4      	subs	r3, #164	; 0xa4
    feba:	e7ce      	b.n	fe5a <RADIO_RxDoneHandler+0x11a>
    febc:	6823      	ldr	r3, [r4, #0]
    febe:	4942      	ldr	r1, [pc, #264]	; (ffc8 <RADIO_RxDoneHandler+0x288>)
    fec0:	1859      	adds	r1, r3, r1
    fec2:	42a9      	cmp	r1, r5
    fec4:	d802      	bhi.n	fecc <RADIO_RxDoneHandler+0x18c>
    fec6:	0003      	movs	r3, r0
    fec8:	3b9d      	subs	r3, #157	; 0x9d
    feca:	e7c7      	b.n	fe5c <RADIO_RxDoneHandler+0x11c>
    fecc:	493f      	ldr	r1, [pc, #252]	; (ffcc <RADIO_RxDoneHandler+0x28c>)
    fece:	185b      	adds	r3, r3, r1
    fed0:	493f      	ldr	r1, [pc, #252]	; (ffd0 <RADIO_RxDoneHandler+0x290>)
    fed2:	428b      	cmp	r3, r1
    fed4:	d8c7      	bhi.n	fe66 <RADIO_RxDoneHandler+0x126>
    fed6:	38a4      	subs	r0, #164	; 0xa4
    fed8:	1113      	asrs	r3, r2, #4
    feda:	18c3      	adds	r3, r0, r3
    fedc:	e7c0      	b.n	fe60 <RADIO_RxDoneHandler+0x120>
    fede:	881a      	ldrh	r2, [r3, #0]
    fee0:	0712      	lsls	r2, r2, #28
    fee2:	0fd5      	lsrs	r5, r2, #31
    fee4:	2a00      	cmp	r2, #0
    fee6:	da27      	bge.n	ff38 <RADIO_RxDoneHandler+0x1f8>
    fee8:	2108      	movs	r1, #8
    feea:	881a      	ldrh	r2, [r3, #0]
    feec:	4c2d      	ldr	r4, [pc, #180]	; (ffa4 <RADIO_RxDoneHandler+0x264>)
    feee:	438a      	bics	r2, r1
    fef0:	801a      	strh	r2, [r3, #0]
    fef2:	0023      	movs	r3, r4
    fef4:	2280      	movs	r2, #128	; 0x80
    fef6:	3332      	adds	r3, #50	; 0x32
    fef8:	701a      	strb	r2, [r3, #0]
    fefa:	0023      	movs	r3, r4
    fefc:	2200      	movs	r2, #0
    fefe:	3334      	adds	r3, #52	; 0x34
    ff00:	7819      	ldrb	r1, [r3, #0]
    ff02:	0010      	movs	r0, r2
    ff04:	4b28      	ldr	r3, [pc, #160]	; (ffa8 <RADIO_RxDoneHandler+0x268>)
    ff06:	4798      	blx	r3
    ff08:	4b28      	ldr	r3, [pc, #160]	; (ffac <RADIO_RxDoneHandler+0x26c>)
    ff0a:	4798      	blx	r3
    ff0c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ff0e:	a901      	add	r1, sp, #4
    ff10:	604b      	str	r3, [r1, #4]
    ff12:	0023      	movs	r3, r4
    ff14:	332c      	adds	r3, #44	; 0x2c
    ff16:	781b      	ldrb	r3, [r3, #0]
    ff18:	0022      	movs	r2, r4
    ff1a:	720b      	strb	r3, [r1, #8]
    ff1c:	2300      	movs	r3, #0
    ff1e:	3258      	adds	r2, #88	; 0x58
    ff20:	7013      	strb	r3, [r2, #0]
    ff22:	700b      	strb	r3, [r1, #0]
    ff24:	4b22      	ldr	r3, [pc, #136]	; (ffb0 <RADIO_RxDoneHandler+0x270>)
    ff26:	701d      	strb	r5, [r3, #0]
    ff28:	4b22      	ldr	r3, [pc, #136]	; (ffb4 <RADIO_RxDoneHandler+0x274>)
    ff2a:	7818      	ldrb	r0, [r3, #0]
    ff2c:	07c0      	lsls	r0, r0, #31
    ff2e:	0fc0      	lsrs	r0, r0, #31
    ff30:	2801      	cmp	r0, #1
    ff32:	d000      	beq.n	ff36 <RADIO_RxDoneHandler+0x1f6>
    ff34:	e732      	b.n	fd9c <RADIO_RxDoneHandler+0x5c>
    ff36:	e7b2      	b.n	fe9e <RADIO_RxDoneHandler+0x15e>
    ff38:	881a      	ldrh	r2, [r3, #0]
    ff3a:	05d2      	lsls	r2, r2, #23
    ff3c:	0fd5      	lsrs	r5, r2, #31
    ff3e:	2a00      	cmp	r2, #0
    ff40:	db00      	blt.n	ff44 <RADIO_RxDoneHandler+0x204>
    ff42:	e72b      	b.n	fd9c <RADIO_RxDoneHandler+0x5c>
    ff44:	4c17      	ldr	r4, [pc, #92]	; (ffa4 <RADIO_RxDoneHandler+0x264>)
    ff46:	881a      	ldrh	r2, [r3, #0]
    ff48:	0026      	movs	r6, r4
    ff4a:	4922      	ldr	r1, [pc, #136]	; (ffd4 <RADIO_RxDoneHandler+0x294>)
    ff4c:	362c      	adds	r6, #44	; 0x2c
    ff4e:	400a      	ands	r2, r1
    ff50:	801a      	strh	r2, [r3, #0]
    ff52:	7832      	ldrb	r2, [r6, #0]
    ff54:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    ff56:	b2d2      	uxtb	r2, r2
    ff58:	2000      	movs	r0, #0
    ff5a:	4b19      	ldr	r3, [pc, #100]	; (ffc0 <RADIO_RxDoneHandler+0x280>)
    ff5c:	4798      	blx	r3
    ff5e:	0023      	movs	r3, r4
    ff60:	2200      	movs	r2, #0
    ff62:	3334      	adds	r3, #52	; 0x34
    ff64:	7819      	ldrb	r1, [r3, #0]
    ff66:	0010      	movs	r0, r2
    ff68:	4b0f      	ldr	r3, [pc, #60]	; (ffa8 <RADIO_RxDoneHandler+0x268>)
    ff6a:	4798      	blx	r3
    ff6c:	4b0f      	ldr	r3, [pc, #60]	; (ffac <RADIO_RxDoneHandler+0x26c>)
    ff6e:	4798      	blx	r3
    ff70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ff72:	a901      	add	r1, sp, #4
    ff74:	604b      	str	r3, [r1, #4]
    ff76:	7833      	ldrb	r3, [r6, #0]
    ff78:	0022      	movs	r2, r4
    ff7a:	720b      	strb	r3, [r1, #8]
    ff7c:	2300      	movs	r3, #0
    ff7e:	3258      	adds	r2, #88	; 0x58
    ff80:	7013      	strb	r3, [r2, #0]
    ff82:	700b      	strb	r3, [r1, #0]
    ff84:	4b0a      	ldr	r3, [pc, #40]	; (ffb0 <RADIO_RxDoneHandler+0x270>)
    ff86:	701d      	strb	r5, [r3, #0]
    ff88:	4b0a      	ldr	r3, [pc, #40]	; (ffb4 <RADIO_RxDoneHandler+0x274>)
    ff8a:	781b      	ldrb	r3, [r3, #0]
    ff8c:	06db      	lsls	r3, r3, #27
    ff8e:	d400      	bmi.n	ff92 <RADIO_RxDoneHandler+0x252>
    ff90:	e704      	b.n	fd9c <RADIO_RxDoneHandler+0x5c>
    ff92:	6923      	ldr	r3, [r4, #16]
    ff94:	2b00      	cmp	r3, #0
    ff96:	d100      	bne.n	ff9a <RADIO_RxDoneHandler+0x25a>
    ff98:	e700      	b.n	fd9c <RADIO_RxDoneHandler+0x5c>
    ff9a:	2010      	movs	r0, #16
    ff9c:	e783      	b.n	fea6 <RADIO_RxDoneHandler+0x166>
    ff9e:	46c0      	nop			; (mov r8, r8)
    ffa0:	20003054 	.word	0x20003054
    ffa4:	20002d88 	.word	0x20002d88
    ffa8:	0000dbb5 	.word	0x0000dbb5
    ffac:	0000f7b1 	.word	0x0000f7b1
    ffb0:	20003057 	.word	0x20003057
    ffb4:	20003056 	.word	0x20003056
    ffb8:	0000c9b5 	.word	0x0000c9b5
    ffbc:	0000c98d 	.word	0x0000c98d
    ffc0:	0000ca21 	.word	0x0000ca21
    ffc4:	096ae380 	.word	0x096ae380
    ffc8:	cc9eec80 	.word	0xcc9eec80
    ffcc:	e78fe580 	.word	0xe78fe580
    ffd0:	06dac2c0 	.word	0x06dac2c0
    ffd4:	fffffeff 	.word	0xfffffeff

0000ffd8 <MacClearCommands>:
    ffd8:	490e      	ldr	r1, [pc, #56]	; (10014 <MacClearCommands+0x3c>)
    ffda:	b570      	push	{r4, r5, r6, lr}
    ffdc:	000b      	movs	r3, r1
    ffde:	33e0      	adds	r3, #224	; 0xe0
    ffe0:	7818      	ldrb	r0, [r3, #0]
    ffe2:	2303      	movs	r3, #3
    ffe4:	25a4      	movs	r5, #164	; 0xa4
    ffe6:	4343      	muls	r3, r0
    ffe8:	2401      	movs	r4, #1
    ffea:	20ff      	movs	r0, #255	; 0xff
    ffec:	3399      	adds	r3, #153	; 0x99
    ffee:	4a0a      	ldr	r2, [pc, #40]	; (10018 <MacClearCommands+0x40>)
    fff0:	185b      	adds	r3, r3, r1
    fff2:	00ed      	lsls	r5, r5, #3
    fff4:	429a      	cmp	r2, r3
    fff6:	d100      	bne.n	fffa <MacClearCommands+0x22>
    fff8:	bd70      	pop	{r4, r5, r6, pc}
    fffa:	7811      	ldrb	r1, [r2, #0]
    fffc:	29ff      	cmp	r1, #255	; 0xff
    fffe:	d006      	beq.n	1000e <MacClearCommands+0x36>
   10000:	290a      	cmp	r1, #10
   10002:	d803      	bhi.n	1000c <MacClearCommands+0x34>
   10004:	0026      	movs	r6, r4
   10006:	408e      	lsls	r6, r1
   10008:	422e      	tst	r6, r5
   1000a:	d100      	bne.n	1000e <MacClearCommands+0x36>
   1000c:	7010      	strb	r0, [r2, #0]
   1000e:	3203      	adds	r2, #3
   10010:	e7f0      	b.n	fff4 <MacClearCommands+0x1c>
   10012:	46c0      	nop			; (mov r8, r8)
   10014:	20003180 	.word	0x20003180
   10018:	20003219 	.word	0x20003219

0001001c <CountfOptsLength>:
   1001c:	2200      	movs	r2, #0
   1001e:	490d      	ldr	r1, [pc, #52]	; (10054 <CountfOptsLength+0x38>)
   10020:	b570      	push	{r4, r5, r6, lr}
   10022:	000b      	movs	r3, r1
   10024:	0010      	movs	r0, r2
   10026:	2503      	movs	r5, #3
   10028:	33e0      	adds	r3, #224	; 0xe0
   1002a:	781c      	ldrb	r4, [r3, #0]
   1002c:	4e0a      	ldr	r6, [pc, #40]	; (10058 <CountfOptsLength+0x3c>)
   1002e:	b2d3      	uxtb	r3, r2
   10030:	429c      	cmp	r4, r3
   10032:	d800      	bhi.n	10036 <CountfOptsLength+0x1a>
   10034:	bd70      	pop	{r4, r5, r6, pc}
   10036:	002b      	movs	r3, r5
   10038:	4353      	muls	r3, r2
   1003a:	3399      	adds	r3, #153	; 0x99
   1003c:	5ccb      	ldrb	r3, [r1, r3]
   1003e:	2bff      	cmp	r3, #255	; 0xff
   10040:	d006      	beq.n	10050 <CountfOptsLength+0x34>
   10042:	18f3      	adds	r3, r6, r3
   10044:	3b02      	subs	r3, #2
   10046:	781b      	ldrb	r3, [r3, #0]
   10048:	18c3      	adds	r3, r0, r3
   1004a:	2b0f      	cmp	r3, #15
   1004c:	dcf2      	bgt.n	10034 <CountfOptsLength+0x18>
   1004e:	b2d8      	uxtb	r0, r3
   10050:	3201      	adds	r2, #1
   10052:	e7ec      	b.n	1002e <CountfOptsLength+0x12>
   10054:	20003180 	.word	0x20003180
   10058:	00019093 	.word	0x00019093

0001005c <LorawanGetMaxPayloadSize>:
   1005c:	b513      	push	{r0, r1, r4, lr}
   1005e:	466b      	mov	r3, sp
   10060:	1ddc      	adds	r4, r3, #7
   10062:	2300      	movs	r3, #0
   10064:	0022      	movs	r2, r4
   10066:	7023      	strb	r3, [r4, #0]
   10068:	4903      	ldr	r1, [pc, #12]	; (10078 <LorawanGetMaxPayloadSize+0x1c>)
   1006a:	4b04      	ldr	r3, [pc, #16]	; (1007c <LorawanGetMaxPayloadSize+0x20>)
   1006c:	2005      	movs	r0, #5
   1006e:	4798      	blx	r3
   10070:	7820      	ldrb	r0, [r4, #0]
   10072:	3808      	subs	r0, #8
   10074:	b2c0      	uxtb	r0, r0
   10076:	bd16      	pop	{r1, r2, r4, pc}
   10078:	20003267 	.word	0x20003267
   1007c:	0000d031 	.word	0x0000d031

00010080 <UpdateReceiveDelays>:
   10080:	23fa      	movs	r3, #250	; 0xfa
   10082:	b570      	push	{r4, r5, r6, lr}
   10084:	009b      	lsls	r3, r3, #2
   10086:	4c0b      	ldr	r4, [pc, #44]	; (100b4 <UpdateReceiveDelays+0x34>)
   10088:	2800      	cmp	r0, #0
   1008a:	d000      	beq.n	1008e <UpdateReceiveDelays+0xe>
   1008c:	4343      	muls	r3, r0
   1008e:	0022      	movs	r2, r4
   10090:	4d09      	ldr	r5, [pc, #36]	; (100b8 <UpdateReceiveDelays+0x38>)
   10092:	32d0      	adds	r2, #208	; 0xd0
   10094:	210c      	movs	r1, #12
   10096:	2000      	movs	r0, #0
   10098:	8013      	strh	r3, [r2, #0]
   1009a:	47a8      	blx	r5
   1009c:	0023      	movs	r3, r4
   1009e:	22fa      	movs	r2, #250	; 0xfa
   100a0:	33d0      	adds	r3, #208	; 0xd0
   100a2:	881b      	ldrh	r3, [r3, #0]
   100a4:	0092      	lsls	r2, r2, #2
   100a6:	189b      	adds	r3, r3, r2
   100a8:	34d2      	adds	r4, #210	; 0xd2
   100aa:	210d      	movs	r1, #13
   100ac:	2000      	movs	r0, #0
   100ae:	8023      	strh	r3, [r4, #0]
   100b0:	47a8      	blx	r5
   100b2:	bd70      	pop	{r4, r5, r6, pc}
   100b4:	20003180 	.word	0x20003180
   100b8:	00009569 	.word	0x00009569

000100bc <IncludeMacCommandsResponse>:
   100bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   100be:	0005      	movs	r5, r0
   100c0:	2600      	movs	r6, #0
   100c2:	b087      	sub	sp, #28
   100c4:	880c      	ldrh	r4, [r1, #0]
   100c6:	9101      	str	r1, [sp, #4]
   100c8:	9203      	str	r2, [sp, #12]
   100ca:	4f77      	ldr	r7, [pc, #476]	; (102a8 <IncludeMacCommandsResponse+0x1ec>)
   100cc:	003b      	movs	r3, r7
   100ce:	33e0      	adds	r3, #224	; 0xe0
   100d0:	781b      	ldrb	r3, [r3, #0]
   100d2:	42b3      	cmp	r3, r6
   100d4:	d913      	bls.n	100fe <IncludeMacCommandsResponse+0x42>
   100d6:	9b03      	ldr	r3, [sp, #12]
   100d8:	2b00      	cmp	r3, #0
   100da:	d019      	beq.n	10110 <IncludeMacCommandsResponse+0x54>
   100dc:	2303      	movs	r3, #3
   100de:	4373      	muls	r3, r6
   100e0:	18fb      	adds	r3, r7, r3
   100e2:	3399      	adds	r3, #153	; 0x99
   100e4:	7819      	ldrb	r1, [r3, #0]
   100e6:	29ff      	cmp	r1, #255	; 0xff
   100e8:	d012      	beq.n	10110 <IncludeMacCommandsResponse+0x54>
   100ea:	9b01      	ldr	r3, [sp, #4]
   100ec:	881a      	ldrh	r2, [r3, #0]
   100ee:	4b6f      	ldr	r3, [pc, #444]	; (102ac <IncludeMacCommandsResponse+0x1f0>)
   100f0:	1aa2      	subs	r2, r4, r2
   100f2:	185b      	adds	r3, r3, r1
   100f4:	3b02      	subs	r3, #2
   100f6:	781b      	ldrb	r3, [r3, #0]
   100f8:	18d3      	adds	r3, r2, r3
   100fa:	2b0f      	cmp	r3, #15
   100fc:	dd08      	ble.n	10110 <IncludeMacCommandsResponse+0x54>
   100fe:	2207      	movs	r2, #7
   10100:	2100      	movs	r1, #0
   10102:	4b6b      	ldr	r3, [pc, #428]	; (102b0 <IncludeMacCommandsResponse+0x1f4>)
   10104:	486b      	ldr	r0, [pc, #428]	; (102b4 <IncludeMacCommandsResponse+0x1f8>)
   10106:	4798      	blx	r3
   10108:	9b01      	ldr	r3, [sp, #4]
   1010a:	801c      	strh	r4, [r3, #0]
   1010c:	b007      	add	sp, #28
   1010e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10110:	2303      	movs	r3, #3
   10112:	4373      	muls	r3, r6
   10114:	18fb      	adds	r3, r7, r3
   10116:	3399      	adds	r3, #153	; 0x99
   10118:	781b      	ldrb	r3, [r3, #0]
   1011a:	1e98      	subs	r0, r3, #2
   1011c:	280b      	cmp	r0, #11
   1011e:	d862      	bhi.n	101e6 <IncludeMacCommandsResponse+0x12a>
   10120:	f003 fc42 	bl	139a8 <__gnu_thumb1_case_uqi>
   10124:	27a20698 	.word	0x27a20698
   10128:	7da26748 	.word	0x7da26748
   1012c:	a6616182 	.word	0xa6616182
   10130:	2303      	movs	r3, #3
   10132:	2200      	movs	r2, #0
   10134:	552b      	strb	r3, [r5, r4]
   10136:	1c63      	adds	r3, r4, #1
   10138:	b29b      	uxth	r3, r3
   1013a:	18eb      	adds	r3, r5, r3
   1013c:	4f5a      	ldr	r7, [pc, #360]	; (102a8 <IncludeMacCommandsResponse+0x1ec>)
   1013e:	485e      	ldr	r0, [pc, #376]	; (102b8 <IncludeMacCommandsResponse+0x1fc>)
   10140:	701a      	strb	r2, [r3, #0]
   10142:	5c39      	ldrb	r1, [r7, r0]
   10144:	3201      	adds	r2, #1
   10146:	4011      	ands	r1, r2
   10148:	466a      	mov	r2, sp
   1014a:	9102      	str	r1, [sp, #8]
   1014c:	7a12      	ldrb	r2, [r2, #8]
   1014e:	701a      	strb	r2, [r3, #0]
   10150:	5c3a      	ldrb	r2, [r7, r0]
   10152:	4694      	mov	ip, r2
   10154:	2202      	movs	r2, #2
   10156:	4661      	mov	r1, ip
   10158:	4211      	tst	r1, r2
   1015a:	d002      	beq.n	10162 <IncludeMacCommandsResponse+0xa6>
   1015c:	9902      	ldr	r1, [sp, #8]
   1015e:	430a      	orrs	r2, r1
   10160:	701a      	strb	r2, [r3, #0]
   10162:	2204      	movs	r2, #4
   10164:	5c39      	ldrb	r1, [r7, r0]
   10166:	4211      	tst	r1, r2
   10168:	d071      	beq.n	1024e <IncludeMacCommandsResponse+0x192>
   1016a:	7819      	ldrb	r1, [r3, #0]
   1016c:	430a      	orrs	r2, r1
   1016e:	701a      	strb	r2, [r3, #0]
   10170:	e06d      	b.n	1024e <IncludeMacCommandsResponse+0x192>
   10172:	2305      	movs	r3, #5
   10174:	2103      	movs	r1, #3
   10176:	2200      	movs	r2, #0
   10178:	552b      	strb	r3, [r5, r4]
   1017a:	1c63      	adds	r3, r4, #1
   1017c:	b29b      	uxth	r3, r3
   1017e:	4371      	muls	r1, r6
   10180:	18eb      	adds	r3, r5, r3
   10182:	701a      	strb	r2, [r3, #0]
   10184:	4a48      	ldr	r2, [pc, #288]	; (102a8 <IncludeMacCommandsResponse+0x1ec>)
   10186:	1851      	adds	r1, r2, r1
   10188:	3198      	adds	r1, #152	; 0x98
   1018a:	7888      	ldrb	r0, [r1, #2]
   1018c:	0700      	lsls	r0, r0, #28
   1018e:	0fc0      	lsrs	r0, r0, #31
   10190:	7018      	strb	r0, [r3, #0]
   10192:	7889      	ldrb	r1, [r1, #2]
   10194:	b2c7      	uxtb	r7, r0
   10196:	06c9      	lsls	r1, r1, #27
   10198:	d502      	bpl.n	101a0 <IncludeMacCommandsResponse+0xe4>
   1019a:	2102      	movs	r1, #2
   1019c:	4339      	orrs	r1, r7
   1019e:	7019      	strb	r1, [r3, #0]
   101a0:	2103      	movs	r1, #3
   101a2:	4371      	muls	r1, r6
   101a4:	1852      	adds	r2, r2, r1
   101a6:	3298      	adds	r2, #152	; 0x98
   101a8:	7892      	ldrb	r2, [r2, #2]
   101aa:	0692      	lsls	r2, r2, #26
   101ac:	d54f      	bpl.n	1024e <IncludeMacCommandsResponse+0x192>
   101ae:	7819      	ldrb	r1, [r3, #0]
   101b0:	2204      	movs	r2, #4
   101b2:	e7db      	b.n	1016c <IncludeMacCommandsResponse+0xb0>
   101b4:	a904      	add	r1, sp, #16
   101b6:	4b41      	ldr	r3, [pc, #260]	; (102bc <IncludeMacCommandsResponse+0x200>)
   101b8:	200e      	movs	r0, #14
   101ba:	4798      	blx	r3
   101bc:	2306      	movs	r3, #6
   101be:	4a3a      	ldr	r2, [pc, #232]	; (102a8 <IncludeMacCommandsResponse+0x1ec>)
   101c0:	552b      	strb	r3, [r5, r4]
   101c2:	32e8      	adds	r2, #232	; 0xe8
   101c4:	7811      	ldrb	r1, [r2, #0]
   101c6:	1c62      	adds	r2, r4, #1
   101c8:	b292      	uxth	r2, r2
   101ca:	54a9      	strb	r1, [r5, r2]
   101cc:	aa04      	add	r2, sp, #16
   101ce:	7812      	ldrb	r2, [r2, #0]
   101d0:	1ca3      	adds	r3, r4, #2
   101d2:	0011      	movs	r1, r2
   101d4:	3120      	adds	r1, #32
   101d6:	3403      	adds	r4, #3
   101d8:	b2c9      	uxtb	r1, r1
   101da:	b29b      	uxth	r3, r3
   101dc:	b2a4      	uxth	r4, r4
   101de:	293f      	cmp	r1, #63	; 0x3f
   101e0:	d904      	bls.n	101ec <IncludeMacCommandsResponse+0x130>
   101e2:	2220      	movs	r2, #32
   101e4:	54ea      	strb	r2, [r5, r3]
   101e6:	3601      	adds	r6, #1
   101e8:	b2f6      	uxtb	r6, r6
   101ea:	e76e      	b.n	100ca <IncludeMacCommandsResponse+0xe>
   101ec:	213f      	movs	r1, #63	; 0x3f
   101ee:	400a      	ands	r2, r1
   101f0:	e7f8      	b.n	101e4 <IncludeMacCommandsResponse+0x128>
   101f2:	2307      	movs	r3, #7
   101f4:	2103      	movs	r1, #3
   101f6:	2200      	movs	r2, #0
   101f8:	552b      	strb	r3, [r5, r4]
   101fa:	1c63      	adds	r3, r4, #1
   101fc:	4371      	muls	r1, r6
   101fe:	b29b      	uxth	r3, r3
   10200:	18eb      	adds	r3, r5, r3
   10202:	701a      	strb	r2, [r3, #0]
   10204:	4a28      	ldr	r2, [pc, #160]	; (102a8 <IncludeMacCommandsResponse+0x1ec>)
   10206:	1852      	adds	r2, r2, r1
   10208:	3298      	adds	r2, #152	; 0x98
   1020a:	7891      	ldrb	r1, [r2, #2]
   1020c:	09c9      	lsrs	r1, r1, #7
   1020e:	7019      	strb	r1, [r3, #0]
   10210:	7892      	ldrb	r2, [r2, #2]
   10212:	b2c8      	uxtb	r0, r1
   10214:	0652      	lsls	r2, r2, #25
   10216:	d51a      	bpl.n	1024e <IncludeMacCommandsResponse+0x192>
   10218:	2202      	movs	r2, #2
   1021a:	4302      	orrs	r2, r0
   1021c:	e7a7      	b.n	1016e <IncludeMacCommandsResponse+0xb2>
   1021e:	2209      	movs	r2, #9
   10220:	1c63      	adds	r3, r4, #1
   10222:	552a      	strb	r2, [r5, r4]
   10224:	b29c      	uxth	r4, r3
   10226:	e7de      	b.n	101e6 <IncludeMacCommandsResponse+0x12a>
   10228:	230a      	movs	r3, #10
   1022a:	2103      	movs	r1, #3
   1022c:	2200      	movs	r2, #0
   1022e:	552b      	strb	r3, [r5, r4]
   10230:	1c63      	adds	r3, r4, #1
   10232:	4371      	muls	r1, r6
   10234:	b29b      	uxth	r3, r3
   10236:	18eb      	adds	r3, r5, r3
   10238:	701a      	strb	r2, [r3, #0]
   1023a:	4a1b      	ldr	r2, [pc, #108]	; (102a8 <IncludeMacCommandsResponse+0x1ec>)
   1023c:	1852      	adds	r2, r2, r1
   1023e:	3298      	adds	r2, #152	; 0x98
   10240:	7891      	ldrb	r1, [r2, #2]
   10242:	09c9      	lsrs	r1, r1, #7
   10244:	7019      	strb	r1, [r3, #0]
   10246:	78d2      	ldrb	r2, [r2, #3]
   10248:	b2c8      	uxtb	r0, r1
   1024a:	07d2      	lsls	r2, r2, #31
   1024c:	d4e4      	bmi.n	10218 <IncludeMacCommandsResponse+0x15c>
   1024e:	3402      	adds	r4, #2
   10250:	b2a4      	uxth	r4, r4
   10252:	e7c8      	b.n	101e6 <IncludeMacCommandsResponse+0x12a>
   10254:	003b      	movs	r3, r7
   10256:	22ff      	movs	r2, #255	; 0xff
   10258:	33e5      	adds	r3, #229	; 0xe5
   1025a:	701a      	strb	r2, [r3, #0]
   1025c:	2300      	movs	r3, #0
   1025e:	37e6      	adds	r7, #230	; 0xe6
   10260:	703b      	strb	r3, [r7, #0]
   10262:	3afd      	subs	r2, #253	; 0xfd
   10264:	1c63      	adds	r3, r4, #1
   10266:	e7dc      	b.n	10222 <IncludeMacCommandsResponse+0x166>
   10268:	1c62      	adds	r2, r4, #1
   1026a:	552b      	strb	r3, [r5, r4]
   1026c:	b294      	uxth	r4, r2
   1026e:	e7ba      	b.n	101e6 <IncludeMacCommandsResponse+0x12a>
   10270:	2201      	movs	r2, #1
   10272:	4252      	negs	r2, r2
   10274:	17d3      	asrs	r3, r2, #31
   10276:	9204      	str	r2, [sp, #16]
   10278:	9305      	str	r3, [sp, #20]
   1027a:	4b11      	ldr	r3, [pc, #68]	; (102c0 <IncludeMacCommandsResponse+0x204>)
   1027c:	a904      	add	r1, sp, #16
   1027e:	5cf8      	ldrb	r0, [r7, r3]
   10280:	4b10      	ldr	r3, [pc, #64]	; (102c4 <IncludeMacCommandsResponse+0x208>)
   10282:	4798      	blx	r3
   10284:	2301      	movs	r3, #1
   10286:	228d      	movs	r2, #141	; 0x8d
   10288:	425b      	negs	r3, r3
   1028a:	0092      	lsls	r2, r2, #2
   1028c:	50bb      	str	r3, [r7, r2]
   1028e:	3204      	adds	r2, #4
   10290:	54bb      	strb	r3, [r7, r2]
   10292:	238c      	movs	r3, #140	; 0x8c
   10294:	2201      	movs	r2, #1
   10296:	009b      	lsls	r3, r3, #2
   10298:	54fa      	strb	r2, [r7, r3]
   1029a:	2303      	movs	r3, #3
   1029c:	4373      	muls	r3, r6
   1029e:	18ff      	adds	r7, r7, r3
   102a0:	3799      	adds	r7, #153	; 0x99
   102a2:	18a2      	adds	r2, r4, r2
   102a4:	783b      	ldrb	r3, [r7, #0]
   102a6:	e7e0      	b.n	1026a <IncludeMacCommandsResponse+0x1ae>
   102a8:	20003180 	.word	0x20003180
   102ac:	00019093 	.word	0x00019093
   102b0:	00016c59 	.word	0x00016c59
   102b4:	200033a3 	.word	0x200033a3
   102b8:	00000223 	.word	0x00000223
   102bc:	0000e6c5 	.word	0x0000e6c5
   102c0:	00000231 	.word	0x00000231
   102c4:	0000db01 	.word	0x0000db01

000102c8 <UpdateJoinSuccessState>:
   102c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   102ca:	4c32      	ldr	r4, [pc, #200]	; (10394 <UpdateJoinSuccessState+0xcc>)
   102cc:	2104      	movs	r1, #4
   102ce:	0022      	movs	r2, r4
   102d0:	3294      	adds	r2, #148	; 0x94
   102d2:	7813      	ldrb	r3, [r2, #0]
   102d4:	2001      	movs	r0, #1
   102d6:	438b      	bics	r3, r1
   102d8:	7013      	strb	r3, [r2, #0]
   102da:	0022      	movs	r2, r4
   102dc:	3284      	adds	r2, #132	; 0x84
   102de:	7813      	ldrb	r3, [r2, #0]
   102e0:	b087      	sub	sp, #28
   102e2:	4303      	orrs	r3, r0
   102e4:	3107      	adds	r1, #7
   102e6:	4f2c      	ldr	r7, [pc, #176]	; (10398 <UpdateJoinSuccessState+0xd0>)
   102e8:	7013      	strb	r3, [r2, #0]
   102ea:	2500      	movs	r5, #0
   102ec:	47b8      	blx	r7
   102ee:	0023      	movs	r3, r4
   102f0:	2115      	movs	r1, #21
   102f2:	3388      	adds	r3, #136	; 0x88
   102f4:	0028      	movs	r0, r5
   102f6:	601d      	str	r5, [r3, #0]
   102f8:	47b8      	blx	r7
   102fa:	0023      	movs	r3, r4
   102fc:	2020      	movs	r0, #32
   102fe:	33ff      	adds	r3, #255	; 0xff
   10300:	7f5b      	ldrb	r3, [r3, #29]
   10302:	4e26      	ldr	r6, [pc, #152]	; (1039c <UpdateJoinSuccessState+0xd4>)
   10304:	4203      	tst	r3, r0
   10306:	d00c      	beq.n	10322 <UpdateJoinSuccessState+0x5a>
   10308:	0023      	movs	r3, r4
   1030a:	a904      	add	r1, sp, #16
   1030c:	3380      	adds	r3, #128	; 0x80
   1030e:	710d      	strb	r5, [r1, #4]
   10310:	701d      	strb	r5, [r3, #0]
   10312:	6765      	str	r5, [r4, #116]	; 0x74
   10314:	67a5      	str	r5, [r4, #120]	; 0x78
   10316:	47b0      	blx	r6
   10318:	210f      	movs	r1, #15
   1031a:	2021      	movs	r0, #33	; 0x21
   1031c:	4469      	add	r1, sp
   1031e:	700d      	strb	r5, [r1, #0]
   10320:	47b0      	blx	r6
   10322:	0023      	movs	r3, r4
   10324:	2500      	movs	r5, #0
   10326:	338c      	adds	r3, #140	; 0x8c
   10328:	210a      	movs	r1, #10
   1032a:	2001      	movs	r0, #1
   1032c:	601d      	str	r5, [r3, #0]
   1032e:	47b8      	blx	r7
   10330:	0023      	movs	r3, r4
   10332:	33ca      	adds	r3, #202	; 0xca
   10334:	801d      	strh	r5, [r3, #0]
   10336:	0022      	movs	r2, r4
   10338:	0023      	movs	r3, r4
   1033a:	210e      	movs	r1, #14
   1033c:	3284      	adds	r2, #132	; 0x84
   1033e:	33f6      	adds	r3, #246	; 0xf6
   10340:	701d      	strb	r5, [r3, #0]
   10342:	7813      	ldrb	r3, [r2, #0]
   10344:	2039      	movs	r0, #57	; 0x39
   10346:	438b      	bics	r3, r1
   10348:	0029      	movs	r1, r5
   1034a:	7013      	strb	r3, [r2, #0]
   1034c:	47b0      	blx	r6
   1034e:	0023      	movs	r3, r4
   10350:	3385      	adds	r3, #133	; 0x85
   10352:	781b      	ldrb	r3, [r3, #0]
   10354:	079b      	lsls	r3, r3, #30
   10356:	d50c      	bpl.n	10372 <UpdateJoinSuccessState+0xaa>
   10358:	0023      	movs	r3, r4
   1035a:	21fa      	movs	r1, #250	; 0xfa
   1035c:	3390      	adds	r3, #144	; 0x90
   1035e:	681b      	ldr	r3, [r3, #0]
   10360:	34f0      	adds	r4, #240	; 0xf0
   10362:	0089      	lsls	r1, r1, #2
   10364:	7820      	ldrb	r0, [r4, #0]
   10366:	4359      	muls	r1, r3
   10368:	9500      	str	r5, [sp, #0]
   1036a:	4b0d      	ldr	r3, [pc, #52]	; (103a0 <UpdateJoinSuccessState+0xd8>)
   1036c:	002a      	movs	r2, r5
   1036e:	4c0d      	ldr	r4, [pc, #52]	; (103a4 <UpdateJoinSuccessState+0xdc>)
   10370:	47a0      	blx	r4
   10372:	490d      	ldr	r1, [pc, #52]	; (103a8 <UpdateJoinSuccessState+0xe0>)
   10374:	794a      	ldrb	r2, [r1, #5]
   10376:	790b      	ldrb	r3, [r1, #4]
   10378:	0212      	lsls	r2, r2, #8
   1037a:	431a      	orrs	r2, r3
   1037c:	798b      	ldrb	r3, [r1, #6]
   1037e:	041b      	lsls	r3, r3, #16
   10380:	431a      	orrs	r2, r3
   10382:	79cb      	ldrb	r3, [r1, #7]
   10384:	061b      	lsls	r3, r3, #24
   10386:	4313      	orrs	r3, r2
   10388:	d001      	beq.n	1038e <UpdateJoinSuccessState+0xc6>
   1038a:	2008      	movs	r0, #8
   1038c:	4798      	blx	r3
   1038e:	b007      	add	sp, #28
   10390:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10392:	46c0      	nop			; (mov r8, r8)
   10394:	20003180 	.word	0x20003180
   10398:	00009569 	.word	0x00009569
   1039c:	0000d069 	.word	0x0000d069
   103a0:	000104e9 	.word	0x000104e9
   103a4:	0000d579 	.word	0x0000d579
   103a8:	200034dc 	.word	0x200034dc

000103ac <PrepareSessionKeys>:
   103ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   103ae:	0004      	movs	r4, r0
   103b0:	2603      	movs	r6, #3
   103b2:	000d      	movs	r5, r1
   103b4:	0017      	movs	r7, r2
   103b6:	4b09      	ldr	r3, [pc, #36]	; (103dc <PrepareSessionKeys+0x30>)
   103b8:	2210      	movs	r2, #16
   103ba:	2100      	movs	r1, #0
   103bc:	4798      	blx	r3
   103be:	0032      	movs	r2, r6
   103c0:	0029      	movs	r1, r5
   103c2:	1c60      	adds	r0, r4, #1
   103c4:	4d06      	ldr	r5, [pc, #24]	; (103e0 <PrepareSessionKeys+0x34>)
   103c6:	47a8      	blx	r5
   103c8:	0032      	movs	r2, r6
   103ca:	0039      	movs	r1, r7
   103cc:	1d20      	adds	r0, r4, #4
   103ce:	47a8      	blx	r5
   103d0:	1de0      	adds	r0, r4, #7
   103d2:	2202      	movs	r2, #2
   103d4:	4903      	ldr	r1, [pc, #12]	; (103e4 <PrepareSessionKeys+0x38>)
   103d6:	47a8      	blx	r5
   103d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   103da:	46c0      	nop			; (mov r8, r8)
   103dc:	00016c59 	.word	0x00016c59
   103e0:	00016c47 	.word	0x00016c47
   103e4:	2000324c 	.word	0x2000324c

000103e8 <AssembleEncryptionBlock>:
   103e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   103ea:	001e      	movs	r6, r3
   103ec:	4c0b      	ldr	r4, [pc, #44]	; (1041c <AssembleEncryptionBlock+0x34>)
   103ee:	0017      	movs	r7, r2
   103f0:	4b0b      	ldr	r3, [pc, #44]	; (10420 <AssembleEncryptionBlock+0x38>)
   103f2:	0005      	movs	r5, r0
   103f4:	9101      	str	r1, [sp, #4]
   103f6:	2210      	movs	r2, #16
   103f8:	2100      	movs	r1, #0
   103fa:	0020      	movs	r0, r4
   103fc:	4798      	blx	r3
   103fe:	7026      	strb	r6, [r4, #0]
   10400:	2604      	movs	r6, #4
   10402:	7165      	strb	r5, [r4, #5]
   10404:	0032      	movs	r2, r6
   10406:	4d07      	ldr	r5, [pc, #28]	; (10424 <AssembleEncryptionBlock+0x3c>)
   10408:	a908      	add	r1, sp, #32
   1040a:	1da0      	adds	r0, r4, #6
   1040c:	47a8      	blx	r5
   1040e:	0020      	movs	r0, r4
   10410:	0032      	movs	r2, r6
   10412:	a901      	add	r1, sp, #4
   10414:	300a      	adds	r0, #10
   10416:	47a8      	blx	r5
   10418:	73e7      	strb	r7, [r4, #15]
   1041a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   1041c:	20001eb5 	.word	0x20001eb5
   10420:	00016c59 	.word	0x00016c59
   10424:	00016c47 	.word	0x00016c47

00010428 <ConfigureRadio>:
   10428:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1042a:	0001      	movs	r1, r0
   1042c:	0005      	movs	r5, r0
   1042e:	4c11      	ldr	r4, [pc, #68]	; (10474 <ConfigureRadio+0x4c>)
   10430:	3109      	adds	r1, #9
   10432:	2009      	movs	r0, #9
   10434:	47a0      	blx	r4
   10436:	0029      	movs	r1, r5
   10438:	2001      	movs	r0, #1
   1043a:	47a0      	blx	r4
   1043c:	1d29      	adds	r1, r5, #4
   1043e:	200a      	movs	r0, #10
   10440:	47a0      	blx	r4
   10442:	7a6b      	ldrb	r3, [r5, #9]
   10444:	2b01      	cmp	r3, #1
   10446:	d10b      	bne.n	10460 <ConfigureRadio+0x38>
   10448:	0029      	movs	r1, r5
   1044a:	2016      	movs	r0, #22
   1044c:	310b      	adds	r1, #11
   1044e:	47a0      	blx	r4
   10450:	0029      	movs	r1, r5
   10452:	2007      	movs	r0, #7
   10454:	310a      	adds	r1, #10
   10456:	47a0      	blx	r4
   10458:	2000      	movs	r0, #0
   1045a:	4907      	ldr	r1, [pc, #28]	; (10478 <ConfigureRadio+0x50>)
   1045c:	47a0      	blx	r4
   1045e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   10460:	466b      	mov	r3, sp
   10462:	1dd9      	adds	r1, r3, #7
   10464:	2303      	movs	r3, #3
   10466:	2013      	movs	r0, #19
   10468:	700b      	strb	r3, [r1, #0]
   1046a:	47a0      	blx	r4
   1046c:	4903      	ldr	r1, [pc, #12]	; (1047c <ConfigureRadio+0x54>)
   1046e:	2012      	movs	r0, #18
   10470:	e7f4      	b.n	1045c <ConfigureRadio+0x34>
   10472:	46c0      	nop			; (mov r8, r8)
   10474:	0000e7b5 	.word	0x0000e7b5
   10478:	20003280 	.word	0x20003280
   1047c:	00019084 	.word	0x00019084

00010480 <StopReceiveWindow2Timer>:
   10480:	b510      	push	{r4, lr}
   10482:	4c0b      	ldr	r4, [pc, #44]	; (104b0 <StopReceiveWindow2Timer+0x30>)
   10484:	0022      	movs	r2, r4
   10486:	32fd      	adds	r2, #253	; 0xfd
   10488:	7812      	ldrb	r2, [r2, #0]
   1048a:	2a01      	cmp	r2, #1
   1048c:	d10e      	bne.n	104ac <StopReceiveWindow2Timer+0x2c>
   1048e:	0021      	movs	r1, r4
   10490:	200e      	movs	r0, #14
   10492:	3184      	adds	r1, #132	; 0x84
   10494:	780a      	ldrb	r2, [r1, #0]
   10496:	34ee      	adds	r4, #238	; 0xee
   10498:	4382      	bics	r2, r0
   1049a:	700a      	strb	r2, [r1, #0]
   1049c:	7820      	ldrb	r0, [r4, #0]
   1049e:	4b05      	ldr	r3, [pc, #20]	; (104b4 <StopReceiveWindow2Timer+0x34>)
   104a0:	4798      	blx	r3
   104a2:	2800      	cmp	r0, #0
   104a4:	d002      	beq.n	104ac <StopReceiveWindow2Timer+0x2c>
   104a6:	7820      	ldrb	r0, [r4, #0]
   104a8:	4b03      	ldr	r3, [pc, #12]	; (104b8 <StopReceiveWindow2Timer+0x38>)
   104aa:	4798      	blx	r3
   104ac:	bd10      	pop	{r4, pc}
   104ae:	46c0      	nop			; (mov r8, r8)
   104b0:	20003180 	.word	0x20003180
   104b4:	0000d711 	.word	0x0000d711
   104b8:	0000d891 	.word	0x0000d891

000104bc <LorawanLinkCheckCallback.part.1>:
   104bc:	4b07      	ldr	r3, [pc, #28]	; (104dc <LorawanLinkCheckCallback.part.1+0x20>)
   104be:	b513      	push	{r0, r1, r4, lr}
   104c0:	001a      	movs	r2, r3
   104c2:	21fa      	movs	r1, #250	; 0xfa
   104c4:	3290      	adds	r2, #144	; 0x90
   104c6:	6812      	ldr	r2, [r2, #0]
   104c8:	0089      	lsls	r1, r1, #2
   104ca:	4351      	muls	r1, r2
   104cc:	2200      	movs	r2, #0
   104ce:	33f0      	adds	r3, #240	; 0xf0
   104d0:	7818      	ldrb	r0, [r3, #0]
   104d2:	4c03      	ldr	r4, [pc, #12]	; (104e0 <LorawanLinkCheckCallback.part.1+0x24>)
   104d4:	9200      	str	r2, [sp, #0]
   104d6:	4b03      	ldr	r3, [pc, #12]	; (104e4 <LorawanLinkCheckCallback.part.1+0x28>)
   104d8:	47a0      	blx	r4
   104da:	bd13      	pop	{r0, r1, r4, pc}
   104dc:	20003180 	.word	0x20003180
   104e0:	0000d579 	.word	0x0000d579
   104e4:	000104e9 	.word	0x000104e9

000104e8 <LorawanLinkCheckCallback>:
   104e8:	4b17      	ldr	r3, [pc, #92]	; (10548 <LorawanLinkCheckCallback+0x60>)
   104ea:	20a0      	movs	r0, #160	; 0xa0
   104ec:	001a      	movs	r2, r3
   104ee:	2180      	movs	r1, #128	; 0x80
   104f0:	b510      	push	{r4, lr}
   104f2:	3284      	adds	r2, #132	; 0x84
   104f4:	8812      	ldrh	r2, [r2, #0]
   104f6:	0080      	lsls	r0, r0, #2
   104f8:	0089      	lsls	r1, r1, #2
   104fa:	4002      	ands	r2, r0
   104fc:	428a      	cmp	r2, r1
   104fe:	d11c      	bne.n	1053a <LorawanLinkCheckCallback+0x52>
   10500:	001a      	movs	r2, r3
   10502:	32e0      	adds	r2, #224	; 0xe0
   10504:	7810      	ldrb	r0, [r2, #0]
   10506:	2403      	movs	r4, #3
   10508:	2200      	movs	r2, #0
   1050a:	b2d1      	uxtb	r1, r2
   1050c:	4281      	cmp	r1, r0
   1050e:	d30d      	bcc.n	1052c <LorawanLinkCheckCallback+0x44>
   10510:	d113      	bne.n	1053a <LorawanLinkCheckCallback+0x52>
   10512:	2203      	movs	r2, #3
   10514:	434a      	muls	r2, r1
   10516:	2102      	movs	r1, #2
   10518:	189a      	adds	r2, r3, r2
   1051a:	3299      	adds	r2, #153	; 0x99
   1051c:	7011      	strb	r1, [r2, #0]
   1051e:	280f      	cmp	r0, #15
   10520:	d80b      	bhi.n	1053a <LorawanLinkCheckCallback+0x52>
   10522:	001a      	movs	r2, r3
   10524:	3001      	adds	r0, #1
   10526:	32e0      	adds	r2, #224	; 0xe0
   10528:	7010      	strb	r0, [r2, #0]
   1052a:	e006      	b.n	1053a <LorawanLinkCheckCallback+0x52>
   1052c:	0021      	movs	r1, r4
   1052e:	3201      	adds	r2, #1
   10530:	4351      	muls	r1, r2
   10532:	3196      	adds	r1, #150	; 0x96
   10534:	5c59      	ldrb	r1, [r3, r1]
   10536:	2902      	cmp	r1, #2
   10538:	d1e7      	bne.n	1050a <LorawanLinkCheckCallback+0x22>
   1053a:	3385      	adds	r3, #133	; 0x85
   1053c:	781b      	ldrb	r3, [r3, #0]
   1053e:	079b      	lsls	r3, r3, #30
   10540:	d501      	bpl.n	10546 <LorawanLinkCheckCallback+0x5e>
   10542:	4b02      	ldr	r3, [pc, #8]	; (1054c <LorawanLinkCheckCallback+0x64>)
   10544:	4798      	blx	r3
   10546:	bd10      	pop	{r4, pc}
   10548:	20003180 	.word	0x20003180
   1054c:	000104bd 	.word	0x000104bd

00010550 <LORAWAN_Send>:
   10550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10552:	4c37      	ldr	r4, [pc, #220]	; (10630 <LORAWAN_Send+0xe0>)
   10554:	0006      	movs	r6, r0
   10556:	0023      	movs	r3, r4
   10558:	3384      	adds	r3, #132	; 0x84
   1055a:	781b      	ldrb	r3, [r3, #0]
   1055c:	250f      	movs	r5, #15
   1055e:	b25a      	sxtb	r2, r3
   10560:	2a00      	cmp	r2, #0
   10562:	db0b      	blt.n	1057c <LORAWAN_Send+0x2c>
   10564:	3d03      	subs	r5, #3
   10566:	065a      	lsls	r2, r3, #25
   10568:	d408      	bmi.n	1057c <LORAWAN_Send+0x2c>
   1056a:	3d03      	subs	r5, #3
   1056c:	07db      	lsls	r3, r3, #31
   1056e:	d505      	bpl.n	1057c <LORAWAN_Send+0x2c>
   10570:	2388      	movs	r3, #136	; 0x88
   10572:	009b      	lsls	r3, r3, #2
   10574:	5ce7      	ldrb	r7, [r4, r3]
   10576:	2f00      	cmp	r7, #0
   10578:	d102      	bne.n	10580 <LORAWAN_Send+0x30>
   1057a:	2511      	movs	r5, #17
   1057c:	0028      	movs	r0, r5
   1057e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10580:	2800      	cmp	r0, #0
   10582:	d10f      	bne.n	105a4 <LORAWAN_Send+0x54>
   10584:	2700      	movs	r7, #0
   10586:	0023      	movs	r3, r4
   10588:	3388      	adds	r3, #136	; 0x88
   1058a:	681b      	ldr	r3, [r3, #0]
   1058c:	3301      	adds	r3, #1
   1058e:	d123      	bne.n	105d8 <LORAWAN_Send+0x88>
   10590:	2001      	movs	r0, #1
   10592:	3484      	adds	r4, #132	; 0x84
   10594:	78a3      	ldrb	r3, [r4, #2]
   10596:	210b      	movs	r1, #11
   10598:	4303      	orrs	r3, r0
   1059a:	70a3      	strb	r3, [r4, #2]
   1059c:	4b25      	ldr	r3, [pc, #148]	; (10634 <LORAWAN_Send+0xe4>)
   1059e:	4798      	blx	r3
   105a0:	250d      	movs	r5, #13
   105a2:	e7eb      	b.n	1057c <LORAWAN_Send+0x2c>
   105a4:	7843      	ldrb	r3, [r0, #1]
   105a6:	7a02      	ldrb	r2, [r0, #8]
   105a8:	3b01      	subs	r3, #1
   105aa:	b2db      	uxtb	r3, r3
   105ac:	9201      	str	r2, [sp, #4]
   105ae:	2bdf      	cmp	r3, #223	; 0xdf
   105b0:	d902      	bls.n	105b8 <LORAWAN_Send+0x68>
   105b2:	250a      	movs	r5, #10
   105b4:	2a00      	cmp	r2, #0
   105b6:	d1e1      	bne.n	1057c <LORAWAN_Send+0x2c>
   105b8:	4b1f      	ldr	r3, [pc, #124]	; (10638 <LORAWAN_Send+0xe8>)
   105ba:	4798      	blx	r3
   105bc:	4684      	mov	ip, r0
   105be:	9b01      	ldr	r3, [sp, #4]
   105c0:	9000      	str	r0, [sp, #0]
   105c2:	4463      	add	r3, ip
   105c4:	001d      	movs	r5, r3
   105c6:	4b1d      	ldr	r3, [pc, #116]	; (1063c <LORAWAN_Send+0xec>)
   105c8:	4798      	blx	r3
   105ca:	4285      	cmp	r5, r0
   105cc:	ddda      	ble.n	10584 <LORAWAN_Send+0x34>
   105ce:	9b00      	ldr	r3, [sp, #0]
   105d0:	250e      	movs	r5, #14
   105d2:	2b00      	cmp	r3, #0
   105d4:	d0d2      	beq.n	1057c <LORAWAN_Send+0x2c>
   105d6:	e7d6      	b.n	10586 <LORAWAN_Send+0x36>
   105d8:	0023      	movs	r3, r4
   105da:	33fd      	adds	r3, #253	; 0xfd
   105dc:	781b      	ldrb	r3, [r3, #0]
   105de:	2b04      	cmp	r3, #4
   105e0:	d01d      	beq.n	1061e <LORAWAN_Send+0xce>
   105e2:	0023      	movs	r3, r4
   105e4:	33fd      	adds	r3, #253	; 0xfd
   105e6:	781b      	ldrb	r3, [r3, #0]
   105e8:	2b01      	cmp	r3, #1
   105ea:	d105      	bne.n	105f8 <LORAWAN_Send+0xa8>
   105ec:	0023      	movs	r3, r4
   105ee:	3384      	adds	r3, #132	; 0x84
   105f0:	781a      	ldrb	r2, [r3, #0]
   105f2:	230e      	movs	r3, #14
   105f4:	421a      	tst	r2, r3
   105f6:	d1c0      	bne.n	1057a <LORAWAN_Send+0x2a>
   105f8:	0023      	movs	r3, r4
   105fa:	33fc      	adds	r3, #252	; 0xfc
   105fc:	2f00      	cmp	r7, #0
   105fe:	d113      	bne.n	10628 <LORAWAN_Send+0xd8>
   10600:	2508      	movs	r5, #8
   10602:	60de      	str	r6, [r3, #12]
   10604:	2388      	movs	r3, #136	; 0x88
   10606:	2200      	movs	r2, #0
   10608:	009b      	lsls	r3, r3, #2
   1060a:	54e2      	strb	r2, [r4, r3]
   1060c:	2001      	movs	r0, #1
   1060e:	4b0c      	ldr	r3, [pc, #48]	; (10640 <LORAWAN_Send+0xf0>)
   10610:	4798      	blx	r3
   10612:	2320      	movs	r3, #32
   10614:	3494      	adds	r4, #148	; 0x94
   10616:	7822      	ldrb	r2, [r4, #0]
   10618:	4313      	orrs	r3, r2
   1061a:	7023      	strb	r3, [r4, #0]
   1061c:	e7ae      	b.n	1057c <LORAWAN_Send+0x2c>
   1061e:	4b09      	ldr	r3, [pc, #36]	; (10644 <LORAWAN_Send+0xf4>)
   10620:	4798      	blx	r3
   10622:	2808      	cmp	r0, #8
   10624:	d1a9      	bne.n	1057a <LORAWAN_Send+0x2a>
   10626:	e7dc      	b.n	105e2 <LORAWAN_Send+0x92>
   10628:	2200      	movs	r2, #0
   1062a:	2511      	movs	r5, #17
   1062c:	60da      	str	r2, [r3, #12]
   1062e:	e7e9      	b.n	10604 <LORAWAN_Send+0xb4>
   10630:	20003180 	.word	0x20003180
   10634:	00009569 	.word	0x00009569
   10638:	0001001d 	.word	0x0001001d
   1063c:	0001005d 	.word	0x0001005d
   10640:	0000e641 	.word	0x0000e641
   10644:	0001318d 	.word	0x0001318d

00010648 <AutomaticReplyCallback>:
   10648:	b510      	push	{r4, lr}
   1064a:	4c0d      	ldr	r4, [pc, #52]	; (10680 <AutomaticReplyCallback+0x38>)
   1064c:	0023      	movs	r3, r4
   1064e:	33fd      	adds	r3, #253	; 0xfd
   10650:	781b      	ldrb	r3, [r3, #0]
   10652:	2b01      	cmp	r3, #1
   10654:	d10e      	bne.n	10674 <AutomaticReplyCallback+0x2c>
   10656:	0022      	movs	r2, r4
   10658:	210e      	movs	r1, #14
   1065a:	3284      	adds	r2, #132	; 0x84
   1065c:	7813      	ldrb	r3, [r2, #0]
   1065e:	438b      	bics	r3, r1
   10660:	7013      	strb	r3, [r2, #0]
   10662:	4b08      	ldr	r3, [pc, #32]	; (10684 <AutomaticReplyCallback+0x3c>)
   10664:	2000      	movs	r0, #0
   10666:	4798      	blx	r3
   10668:	2208      	movs	r2, #8
   1066a:	3494      	adds	r4, #148	; 0x94
   1066c:	7823      	ldrb	r3, [r4, #0]
   1066e:	4393      	bics	r3, r2
   10670:	7023      	strb	r3, [r4, #0]
   10672:	bd10      	pop	{r4, pc}
   10674:	2b04      	cmp	r3, #4
   10676:	d1f4      	bne.n	10662 <AutomaticReplyCallback+0x1a>
   10678:	4b03      	ldr	r3, [pc, #12]	; (10688 <AutomaticReplyCallback+0x40>)
   1067a:	4798      	blx	r3
   1067c:	e7f1      	b.n	10662 <AutomaticReplyCallback+0x1a>
   1067e:	46c0      	nop			; (mov r8, r8)
   10680:	20003180 	.word	0x20003180
   10684:	00010551 	.word	0x00010551
   10688:	0000f0c9 	.word	0x0000f0c9

0001068c <LorawanLinkCheckConfigure>:
   1068c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1068e:	23fa      	movs	r3, #250	; 0xfa
   10690:	4c21      	ldr	r4, [pc, #132]	; (10718 <LorawanLinkCheckConfigure+0x8c>)
   10692:	009b      	lsls	r3, r3, #2
   10694:	0022      	movs	r2, r4
   10696:	0025      	movs	r5, r4
   10698:	4343      	muls	r3, r0
   1069a:	3290      	adds	r2, #144	; 0x90
   1069c:	0006      	movs	r6, r0
   1069e:	2102      	movs	r1, #2
   106a0:	2000      	movs	r0, #0
   106a2:	4f1e      	ldr	r7, [pc, #120]	; (1071c <LorawanLinkCheckConfigure+0x90>)
   106a4:	6013      	str	r3, [r2, #0]
   106a6:	3584      	adds	r5, #132	; 0x84
   106a8:	47b8      	blx	r7
   106aa:	2e00      	cmp	r6, #0
   106ac:	d127      	bne.n	106fe <LorawanLinkCheckConfigure+0x72>
   106ae:	0023      	movs	r3, r4
   106b0:	33f0      	adds	r3, #240	; 0xf0
   106b2:	7818      	ldrb	r0, [r3, #0]
   106b4:	4b1a      	ldr	r3, [pc, #104]	; (10720 <LorawanLinkCheckConfigure+0x94>)
   106b6:	4798      	blx	r3
   106b8:	2202      	movs	r2, #2
   106ba:	786b      	ldrb	r3, [r5, #1]
   106bc:	210b      	movs	r1, #11
   106be:	4393      	bics	r3, r2
   106c0:	706b      	strb	r3, [r5, #1]
   106c2:	2001      	movs	r0, #1
   106c4:	47b8      	blx	r7
   106c6:	0023      	movs	r3, r4
   106c8:	2701      	movs	r7, #1
   106ca:	33e0      	adds	r3, #224	; 0xe0
   106cc:	781b      	ldrb	r3, [r3, #0]
   106ce:	0030      	movs	r0, r6
   106d0:	0032      	movs	r2, r6
   106d2:	36ff      	adds	r6, #255	; 0xff
   106d4:	429a      	cmp	r2, r3
   106d6:	d304      	bcc.n	106e2 <LorawanLinkCheckConfigure+0x56>
   106d8:	2800      	cmp	r0, #0
   106da:	d001      	beq.n	106e0 <LorawanLinkCheckConfigure+0x54>
   106dc:	34e0      	adds	r4, #224	; 0xe0
   106de:	7023      	strb	r3, [r4, #0]
   106e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   106e2:	2103      	movs	r1, #3
   106e4:	4351      	muls	r1, r2
   106e6:	1861      	adds	r1, r4, r1
   106e8:	3199      	adds	r1, #153	; 0x99
   106ea:	780d      	ldrb	r5, [r1, #0]
   106ec:	2d02      	cmp	r5, #2
   106ee:	d103      	bne.n	106f8 <LorawanLinkCheckConfigure+0x6c>
   106f0:	0038      	movs	r0, r7
   106f2:	3b01      	subs	r3, #1
   106f4:	700e      	strb	r6, [r1, #0]
   106f6:	b2db      	uxtb	r3, r3
   106f8:	3201      	adds	r2, #1
   106fa:	b2d2      	uxtb	r2, r2
   106fc:	e7ea      	b.n	106d4 <LorawanLinkCheckConfigure+0x48>
   106fe:	2302      	movs	r3, #2
   10700:	786a      	ldrb	r2, [r5, #1]
   10702:	210b      	movs	r1, #11
   10704:	4313      	orrs	r3, r2
   10706:	706b      	strb	r3, [r5, #1]
   10708:	2001      	movs	r0, #1
   1070a:	47b8      	blx	r7
   1070c:	782b      	ldrb	r3, [r5, #0]
   1070e:	07db      	lsls	r3, r3, #31
   10710:	d5e6      	bpl.n	106e0 <LorawanLinkCheckConfigure+0x54>
   10712:	4b04      	ldr	r3, [pc, #16]	; (10724 <LorawanLinkCheckConfigure+0x98>)
   10714:	4798      	blx	r3
   10716:	e7e3      	b.n	106e0 <LorawanLinkCheckConfigure+0x54>
   10718:	20003180 	.word	0x20003180
   1071c:	00009569 	.word	0x00009569
   10720:	0000d891 	.word	0x0000d891
   10724:	000104bd 	.word	0x000104bd

00010728 <EncodeDeviceTimeReq>:
   10728:	4b08      	ldr	r3, [pc, #32]	; (1074c <EncodeDeviceTimeReq+0x24>)
   1072a:	b510      	push	{r4, lr}
   1072c:	001c      	movs	r4, r3
   1072e:	34e0      	adds	r4, #224	; 0xe0
   10730:	7822      	ldrb	r2, [r4, #0]
   10732:	2015      	movs	r0, #21
   10734:	2a0f      	cmp	r2, #15
   10736:	d808      	bhi.n	1074a <EncodeDeviceTimeReq+0x22>
   10738:	2103      	movs	r1, #3
   1073a:	4351      	muls	r1, r2
   1073c:	185b      	adds	r3, r3, r1
   1073e:	210d      	movs	r1, #13
   10740:	3399      	adds	r3, #153	; 0x99
   10742:	3201      	adds	r2, #1
   10744:	7019      	strb	r1, [r3, #0]
   10746:	7022      	strb	r2, [r4, #0]
   10748:	380d      	subs	r0, #13
   1074a:	bd10      	pop	{r4, pc}
   1074c:	20003180 	.word	0x20003180

00010750 <EncodeLinkCheckReq>:
   10750:	4b08      	ldr	r3, [pc, #32]	; (10774 <EncodeLinkCheckReq+0x24>)
   10752:	b510      	push	{r4, lr}
   10754:	001c      	movs	r4, r3
   10756:	34e0      	adds	r4, #224	; 0xe0
   10758:	7822      	ldrb	r2, [r4, #0]
   1075a:	2015      	movs	r0, #21
   1075c:	2a0f      	cmp	r2, #15
   1075e:	d808      	bhi.n	10772 <EncodeLinkCheckReq+0x22>
   10760:	2103      	movs	r1, #3
   10762:	4351      	muls	r1, r2
   10764:	185b      	adds	r3, r3, r1
   10766:	2102      	movs	r1, #2
   10768:	3399      	adds	r3, #153	; 0x99
   1076a:	3201      	adds	r2, #1
   1076c:	7019      	strb	r1, [r3, #0]
   1076e:	7022      	strb	r2, [r4, #0]
   10770:	380d      	subs	r0, #13
   10772:	bd10      	pop	{r4, pc}
   10774:	20003180 	.word	0x20003180

00010778 <UpdateCurrentDataRate>:
   10778:	b510      	push	{r4, lr}
   1077a:	4b04      	ldr	r3, [pc, #16]	; (1078c <UpdateCurrentDataRate+0x14>)
   1077c:	210c      	movs	r1, #12
   1077e:	33e7      	adds	r3, #231	; 0xe7
   10780:	7018      	strb	r0, [r3, #0]
   10782:	2001      	movs	r0, #1
   10784:	4b02      	ldr	r3, [pc, #8]	; (10790 <UpdateCurrentDataRate+0x18>)
   10786:	4798      	blx	r3
   10788:	bd10      	pop	{r4, pc}
   1078a:	46c0      	nop			; (mov r8, r8)
   1078c:	20003180 	.word	0x20003180
   10790:	00009569 	.word	0x00009569

00010794 <UpdateDLSettings>:
   10794:	b573      	push	{r0, r1, r4, r5, r6, lr}
   10796:	466b      	mov	r3, sp
   10798:	1dde      	adds	r6, r3, #7
   1079a:	1d9c      	adds	r4, r3, #6
   1079c:	71d8      	strb	r0, [r3, #7]
   1079e:	7021      	strb	r1, [r4, #0]
   107a0:	2017      	movs	r0, #23
   107a2:	0031      	movs	r1, r6
   107a4:	4d0c      	ldr	r5, [pc, #48]	; (107d8 <UpdateDLSettings+0x44>)
   107a6:	47a8      	blx	r5
   107a8:	2808      	cmp	r0, #8
   107aa:	d107      	bne.n	107bc <UpdateDLSettings+0x28>
   107ac:	4b0b      	ldr	r3, [pc, #44]	; (107dc <UpdateDLSettings+0x48>)
   107ae:	7832      	ldrb	r2, [r6, #0]
   107b0:	336e      	adds	r3, #110	; 0x6e
   107b2:	701a      	strb	r2, [r3, #0]
   107b4:	2100      	movs	r1, #0
   107b6:	3807      	subs	r0, #7
   107b8:	4b09      	ldr	r3, [pc, #36]	; (107e0 <UpdateDLSettings+0x4c>)
   107ba:	4798      	blx	r3
   107bc:	0021      	movs	r1, r4
   107be:	2018      	movs	r0, #24
   107c0:	47a8      	blx	r5
   107c2:	2808      	cmp	r0, #8
   107c4:	d107      	bne.n	107d6 <UpdateDLSettings+0x42>
   107c6:	2101      	movs	r1, #1
   107c8:	4b04      	ldr	r3, [pc, #16]	; (107dc <UpdateDLSettings+0x48>)
   107ca:	7822      	ldrb	r2, [r4, #0]
   107cc:	33f7      	adds	r3, #247	; 0xf7
   107ce:	701a      	strb	r2, [r3, #0]
   107d0:	0008      	movs	r0, r1
   107d2:	4b03      	ldr	r3, [pc, #12]	; (107e0 <UpdateDLSettings+0x4c>)
   107d4:	4798      	blx	r3
   107d6:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   107d8:	0000d04d 	.word	0x0000d04d
   107dc:	20003180 	.word	0x20003180
   107e0:	00009569 	.word	0x00009569

000107e4 <UpdateTxPower>:
   107e4:	b510      	push	{r4, lr}
   107e6:	4b04      	ldr	r3, [pc, #16]	; (107f8 <UpdateTxPower+0x14>)
   107e8:	210a      	movs	r1, #10
   107ea:	33e9      	adds	r3, #233	; 0xe9
   107ec:	7018      	strb	r0, [r3, #0]
   107ee:	2000      	movs	r0, #0
   107f0:	4b02      	ldr	r3, [pc, #8]	; (107fc <UpdateTxPower+0x18>)
   107f2:	4798      	blx	r3
   107f4:	bd10      	pop	{r4, pc}
   107f6:	46c0      	nop			; (mov r8, r8)
   107f8:	20003180 	.word	0x20003180
   107fc:	00009569 	.word	0x00009569

00010800 <UpdateRetransmissionAckTimeoutState>:
   10800:	4b10      	ldr	r3, [pc, #64]	; (10844 <UpdateRetransmissionAckTimeoutState+0x44>)
   10802:	b513      	push	{r0, r1, r4, lr}
   10804:	001a      	movs	r2, r3
   10806:	32fd      	adds	r2, #253	; 0xfd
   10808:	7812      	ldrb	r2, [r2, #0]
   1080a:	2a01      	cmp	r2, #1
   1080c:	d108      	bne.n	10820 <UpdateRetransmissionAckTimeoutState+0x20>
   1080e:	0018      	movs	r0, r3
   10810:	210e      	movs	r1, #14
   10812:	3084      	adds	r0, #132	; 0x84
   10814:	7802      	ldrb	r2, [r0, #0]
   10816:	438a      	bics	r2, r1
   10818:	0011      	movs	r1, r2
   1081a:	220c      	movs	r2, #12
   1081c:	430a      	orrs	r2, r1
   1081e:	7002      	strb	r2, [r0, #0]
   10820:	001a      	movs	r2, r3
   10822:	32da      	adds	r2, #218	; 0xda
   10824:	8811      	ldrh	r1, [r2, #0]
   10826:	4a08      	ldr	r2, [pc, #32]	; (10848 <UpdateRetransmissionAckTimeoutState+0x48>)
   10828:	4c08      	ldr	r4, [pc, #32]	; (1084c <UpdateRetransmissionAckTimeoutState+0x4c>)
   1082a:	5c9a      	ldrb	r2, [r3, r2]
   1082c:	33f1      	adds	r3, #241	; 0xf1
   1082e:	1a8a      	subs	r2, r1, r2
   10830:	21fa      	movs	r1, #250	; 0xfa
   10832:	0089      	lsls	r1, r1, #2
   10834:	4351      	muls	r1, r2
   10836:	2200      	movs	r2, #0
   10838:	7818      	ldrb	r0, [r3, #0]
   1083a:	9200      	str	r2, [sp, #0]
   1083c:	4b04      	ldr	r3, [pc, #16]	; (10850 <UpdateRetransmissionAckTimeoutState+0x50>)
   1083e:	47a0      	blx	r4
   10840:	bd13      	pop	{r0, r1, r4, pc}
   10842:	46c0      	nop			; (mov r8, r8)
   10844:	20003180 	.word	0x20003180
   10848:	0000022b 	.word	0x0000022b
   1084c:	0000d579 	.word	0x0000d579
   10850:	00011591 	.word	0x00011591

00010854 <UpdateReceiveWindow2Parameters>:
   10854:	4b0f      	ldr	r3, [pc, #60]	; (10894 <UpdateReceiveWindow2Parameters+0x40>)
   10856:	b570      	push	{r4, r5, r6, lr}
   10858:	001a      	movs	r2, r3
   1085a:	326e      	adds	r2, #110	; 0x6e
   1085c:	7011      	strb	r1, [r2, #0]
   1085e:	001a      	movs	r2, r3
   10860:	0c04      	lsrs	r4, r0, #16
   10862:	326a      	adds	r2, #106	; 0x6a
   10864:	8010      	strh	r0, [r2, #0]
   10866:	8054      	strh	r4, [r2, #2]
   10868:	001a      	movs	r2, r3
   1086a:	25fd      	movs	r5, #253	; 0xfd
   1086c:	32fd      	adds	r2, #253	; 0xfd
   1086e:	7812      	ldrb	r2, [r2, #0]
   10870:	3a02      	subs	r2, #2
   10872:	422a      	tst	r2, r5
   10874:	d109      	bne.n	1088a <UpdateReceiveWindow2Parameters+0x36>
   10876:	001a      	movs	r2, r3
   10878:	336f      	adds	r3, #111	; 0x6f
   1087a:	3273      	adds	r2, #115	; 0x73
   1087c:	7011      	strb	r1, [r2, #0]
   1087e:	7018      	strb	r0, [r3, #0]
   10880:	0a02      	lsrs	r2, r0, #8
   10882:	0e00      	lsrs	r0, r0, #24
   10884:	705a      	strb	r2, [r3, #1]
   10886:	709c      	strb	r4, [r3, #2]
   10888:	70d8      	strb	r0, [r3, #3]
   1088a:	2100      	movs	r1, #0
   1088c:	4b02      	ldr	r3, [pc, #8]	; (10898 <UpdateReceiveWindow2Parameters+0x44>)
   1088e:	2001      	movs	r0, #1
   10890:	4798      	blx	r3
   10892:	bd70      	pop	{r4, r5, r6, pc}
   10894:	20003180 	.word	0x20003180
   10898:	00009569 	.word	0x00009569

0001089c <ResetParametersForConfirmedTransmission>:
   1089c:	4b0a      	ldr	r3, [pc, #40]	; (108c8 <ResetParametersForConfirmedTransmission+0x2c>)
   1089e:	001a      	movs	r2, r3
   108a0:	32fd      	adds	r2, #253	; 0xfd
   108a2:	7812      	ldrb	r2, [r2, #0]
   108a4:	2a01      	cmp	r2, #1
   108a6:	d105      	bne.n	108b4 <ResetParametersForConfirmedTransmission+0x18>
   108a8:	0019      	movs	r1, r3
   108aa:	200e      	movs	r0, #14
   108ac:	3184      	adds	r1, #132	; 0x84
   108ae:	780a      	ldrb	r2, [r1, #0]
   108b0:	4382      	bics	r2, r0
   108b2:	700a      	strb	r2, [r1, #0]
   108b4:	001a      	movs	r2, r3
   108b6:	2100      	movs	r1, #0
   108b8:	3394      	adds	r3, #148	; 0x94
   108ba:	32e4      	adds	r2, #228	; 0xe4
   108bc:	7011      	strb	r1, [r2, #0]
   108be:	781a      	ldrb	r2, [r3, #0]
   108c0:	3101      	adds	r1, #1
   108c2:	438a      	bics	r2, r1
   108c4:	701a      	strb	r2, [r3, #0]
   108c6:	4770      	bx	lr
   108c8:	20003180 	.word	0x20003180

000108cc <ResetParametersForUnconfirmedTransmission>:
   108cc:	4b07      	ldr	r3, [pc, #28]	; (108ec <ResetParametersForUnconfirmedTransmission+0x20>)
   108ce:	001a      	movs	r2, r3
   108d0:	32fd      	adds	r2, #253	; 0xfd
   108d2:	7812      	ldrb	r2, [r2, #0]
   108d4:	2a01      	cmp	r2, #1
   108d6:	d105      	bne.n	108e4 <ResetParametersForUnconfirmedTransmission+0x18>
   108d8:	0019      	movs	r1, r3
   108da:	200e      	movs	r0, #14
   108dc:	3184      	adds	r1, #132	; 0x84
   108de:	780a      	ldrb	r2, [r1, #0]
   108e0:	4382      	bics	r2, r0
   108e2:	700a      	strb	r2, [r1, #0]
   108e4:	2200      	movs	r2, #0
   108e6:	33e3      	adds	r3, #227	; 0xe3
   108e8:	701a      	strb	r2, [r3, #0]
   108ea:	4770      	bx	lr
   108ec:	20003180 	.word	0x20003180

000108f0 <SetJoinFailState>:
   108f0:	b570      	push	{r4, r5, r6, lr}
   108f2:	4c15      	ldr	r4, [pc, #84]	; (10948 <SetJoinFailState+0x58>)
   108f4:	2604      	movs	r6, #4
   108f6:	0025      	movs	r5, r4
   108f8:	3594      	adds	r5, #148	; 0x94
   108fa:	782a      	ldrb	r2, [r5, #0]
   108fc:	0021      	movs	r1, r4
   108fe:	43b2      	bics	r2, r6
   10900:	702a      	strb	r2, [r5, #0]
   10902:	22f0      	movs	r2, #240	; 0xf0
   10904:	3184      	adds	r1, #132	; 0x84
   10906:	780b      	ldrb	r3, [r1, #0]
   10908:	4013      	ands	r3, r2
   1090a:	700b      	strb	r3, [r1, #0]
   1090c:	0023      	movs	r3, r4
   1090e:	33ff      	adds	r3, #255	; 0xff
   10910:	7f5b      	ldrb	r3, [r3, #29]
   10912:	069b      	lsls	r3, r3, #26
   10914:	d503      	bpl.n	1091e <SetJoinFailState+0x2e>
   10916:	0023      	movs	r3, r4
   10918:	2200      	movs	r2, #0
   1091a:	3380      	adds	r3, #128	; 0x80
   1091c:	701a      	strb	r2, [r3, #0]
   1091e:	490b      	ldr	r1, [pc, #44]	; (1094c <SetJoinFailState+0x5c>)
   10920:	794a      	ldrb	r2, [r1, #5]
   10922:	790b      	ldrb	r3, [r1, #4]
   10924:	0212      	lsls	r2, r2, #8
   10926:	431a      	orrs	r2, r3
   10928:	798b      	ldrb	r3, [r1, #6]
   1092a:	041b      	lsls	r3, r3, #16
   1092c:	431a      	orrs	r2, r3
   1092e:	79cb      	ldrb	r3, [r1, #7]
   10930:	061b      	lsls	r3, r3, #24
   10932:	4313      	orrs	r3, r2
   10934:	d000      	beq.n	10938 <SetJoinFailState+0x48>
   10936:	4798      	blx	r3
   10938:	2300      	movs	r3, #0
   1093a:	34f9      	adds	r4, #249	; 0xf9
   1093c:	7023      	strb	r3, [r4, #0]
   1093e:	210b      	movs	r1, #11
   10940:	4b03      	ldr	r3, [pc, #12]	; (10950 <SetJoinFailState+0x60>)
   10942:	2001      	movs	r0, #1
   10944:	4798      	blx	r3
   10946:	bd70      	pop	{r4, r5, r6, pc}
   10948:	20003180 	.word	0x20003180
   1094c:	200034dc 	.word	0x200034dc
   10950:	00009569 	.word	0x00009569

00010954 <ExecuteRxParamSetupReq>:
   10954:	b5f0      	push	{r4, r5, r6, r7, lr}
   10956:	b085      	sub	sp, #20
   10958:	7805      	ldrb	r5, [r0, #0]
   1095a:	0004      	movs	r4, r0
   1095c:	1c41      	adds	r1, r0, #1
   1095e:	2204      	movs	r2, #4
   10960:	4b36      	ldr	r3, [pc, #216]	; (10a3c <ExecuteRxParamSetupReq+0xe8>)
   10962:	a803      	add	r0, sp, #12
   10964:	4798      	blx	r3
   10966:	2264      	movs	r2, #100	; 0x64
   10968:	9b03      	ldr	r3, [sp, #12]
   1096a:	a903      	add	r1, sp, #12
   1096c:	021b      	lsls	r3, r3, #8
   1096e:	0a1b      	lsrs	r3, r3, #8
   10970:	4353      	muls	r3, r2
   10972:	9303      	str	r3, [sp, #12]
   10974:	1d23      	adds	r3, r4, #4
   10976:	9301      	str	r3, [sp, #4]
   10978:	072b      	lsls	r3, r5, #28
   1097a:	0f1b      	lsrs	r3, r3, #28
   1097c:	b2da      	uxtb	r2, r3
   1097e:	9200      	str	r2, [sp, #0]
   10980:	aa02      	add	r2, sp, #8
   10982:	1c96      	adds	r6, r2, #2
   10984:	066d      	lsls	r5, r5, #25
   10986:	7033      	strb	r3, [r6, #0]
   10988:	1cd7      	adds	r7, r2, #3
   1098a:	0f6d      	lsrs	r5, r5, #29
   1098c:	2001      	movs	r0, #1
   1098e:	4b2c      	ldr	r3, [pc, #176]	; (10a40 <ExecuteRxParamSetupReq+0xec>)
   10990:	703d      	strb	r5, [r7, #0]
   10992:	4798      	blx	r3
   10994:	4c2b      	ldr	r4, [pc, #172]	; (10a44 <ExecuteRxParamSetupReq+0xf0>)
   10996:	2808      	cmp	r0, #8
   10998:	d109      	bne.n	109ae <ExecuteRxParamSetupReq+0x5a>
   1099a:	0023      	movs	r3, r4
   1099c:	33e0      	adds	r3, #224	; 0xe0
   1099e:	781a      	ldrb	r2, [r3, #0]
   109a0:	2303      	movs	r3, #3
   109a2:	4353      	muls	r3, r2
   109a4:	18e3      	adds	r3, r4, r3
   109a6:	3398      	adds	r3, #152	; 0x98
   109a8:	789a      	ldrb	r2, [r3, #2]
   109aa:	4310      	orrs	r0, r2
   109ac:	7098      	strb	r0, [r3, #2]
   109ae:	0031      	movs	r1, r6
   109b0:	200f      	movs	r0, #15
   109b2:	4e23      	ldr	r6, [pc, #140]	; (10a40 <ExecuteRxParamSetupReq+0xec>)
   109b4:	47b0      	blx	r6
   109b6:	2808      	cmp	r0, #8
   109b8:	d10a      	bne.n	109d0 <ExecuteRxParamSetupReq+0x7c>
   109ba:	0023      	movs	r3, r4
   109bc:	33e0      	adds	r3, #224	; 0xe0
   109be:	781a      	ldrb	r2, [r3, #0]
   109c0:	2303      	movs	r3, #3
   109c2:	4353      	muls	r3, r2
   109c4:	2210      	movs	r2, #16
   109c6:	18e3      	adds	r3, r4, r3
   109c8:	3398      	adds	r3, #152	; 0x98
   109ca:	7899      	ldrb	r1, [r3, #2]
   109cc:	430a      	orrs	r2, r1
   109ce:	709a      	strb	r2, [r3, #2]
   109d0:	0039      	movs	r1, r7
   109d2:	2018      	movs	r0, #24
   109d4:	47b0      	blx	r6
   109d6:	2808      	cmp	r0, #8
   109d8:	d10a      	bne.n	109f0 <ExecuteRxParamSetupReq+0x9c>
   109da:	0023      	movs	r3, r4
   109dc:	33e0      	adds	r3, #224	; 0xe0
   109de:	781a      	ldrb	r2, [r3, #0]
   109e0:	2303      	movs	r3, #3
   109e2:	4353      	muls	r3, r2
   109e4:	2220      	movs	r2, #32
   109e6:	18e3      	adds	r3, r4, r3
   109e8:	3398      	adds	r3, #152	; 0x98
   109ea:	7899      	ldrb	r1, [r3, #2]
   109ec:	430a      	orrs	r2, r1
   109ee:	709a      	strb	r2, [r3, #2]
   109f0:	0023      	movs	r3, r4
   109f2:	33e0      	adds	r3, #224	; 0xe0
   109f4:	781a      	ldrb	r2, [r3, #0]
   109f6:	2303      	movs	r3, #3
   109f8:	4353      	muls	r3, r2
   109fa:	18e3      	adds	r3, r4, r3
   109fc:	3398      	adds	r3, #152	; 0x98
   109fe:	789e      	ldrb	r6, [r3, #2]
   10a00:	06f3      	lsls	r3, r6, #27
   10a02:	d518      	bpl.n	10a36 <ExecuteRxParamSetupReq+0xe2>
   10a04:	0733      	lsls	r3, r6, #28
   10a06:	d516      	bpl.n	10a36 <ExecuteRxParamSetupReq+0xe2>
   10a08:	06b6      	lsls	r6, r6, #26
   10a0a:	0ff6      	lsrs	r6, r6, #31
   10a0c:	2e01      	cmp	r6, #1
   10a0e:	d112      	bne.n	10a36 <ExecuteRxParamSetupReq+0xe2>
   10a10:	0023      	movs	r3, r4
   10a12:	33f7      	adds	r3, #247	; 0xf7
   10a14:	701d      	strb	r5, [r3, #0]
   10a16:	0031      	movs	r1, r6
   10a18:	0030      	movs	r0, r6
   10a1a:	4d0b      	ldr	r5, [pc, #44]	; (10a48 <ExecuteRxParamSetupReq+0xf4>)
   10a1c:	47a8      	blx	r5
   10a1e:	9900      	ldr	r1, [sp, #0]
   10a20:	9803      	ldr	r0, [sp, #12]
   10a22:	4b0a      	ldr	r3, [pc, #40]	; (10a4c <ExecuteRxParamSetupReq+0xf8>)
   10a24:	4798      	blx	r3
   10a26:	2340      	movs	r3, #64	; 0x40
   10a28:	3484      	adds	r4, #132	; 0x84
   10a2a:	7862      	ldrb	r2, [r4, #1]
   10a2c:	210b      	movs	r1, #11
   10a2e:	4313      	orrs	r3, r2
   10a30:	7063      	strb	r3, [r4, #1]
   10a32:	0030      	movs	r0, r6
   10a34:	47a8      	blx	r5
   10a36:	9801      	ldr	r0, [sp, #4]
   10a38:	b005      	add	sp, #20
   10a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10a3c:	00016c47 	.word	0x00016c47
   10a40:	0000d04d 	.word	0x0000d04d
   10a44:	20003180 	.word	0x20003180
   10a48:	00009569 	.word	0x00009569
   10a4c:	00010855 	.word	0x00010855

00010a50 <ExecuteDutyCycle>:
   10a50:	b570      	push	{r4, r5, r6, lr}
   10a52:	7803      	ldrb	r3, [r0, #0]
   10a54:	1c46      	adds	r6, r0, #1
   10a56:	2b0f      	cmp	r3, #15
   10a58:	d80f      	bhi.n	10a7a <ExecuteDutyCycle+0x2a>
   10a5a:	4c09      	ldr	r4, [pc, #36]	; (10a80 <ExecuteDutyCycle+0x30>)
   10a5c:	210b      	movs	r1, #11
   10a5e:	0022      	movs	r2, r4
   10a60:	2000      	movs	r0, #0
   10a62:	3298      	adds	r2, #152	; 0x98
   10a64:	4d07      	ldr	r5, [pc, #28]	; (10a84 <ExecuteDutyCycle+0x34>)
   10a66:	7013      	strb	r3, [r2, #0]
   10a68:	47a8      	blx	r5
   10a6a:	2320      	movs	r3, #32
   10a6c:	3484      	adds	r4, #132	; 0x84
   10a6e:	7862      	ldrb	r2, [r4, #1]
   10a70:	210b      	movs	r1, #11
   10a72:	4313      	orrs	r3, r2
   10a74:	7063      	strb	r3, [r4, #1]
   10a76:	2001      	movs	r0, #1
   10a78:	47a8      	blx	r5
   10a7a:	0030      	movs	r0, r6
   10a7c:	bd70      	pop	{r4, r5, r6, pc}
   10a7e:	46c0      	nop			; (mov r8, r8)
   10a80:	20003180 	.word	0x20003180
   10a84:	00009569 	.word	0x00009569

00010a88 <ExecuteDlChannel>:
   10a88:	b5f0      	push	{r4, r5, r6, r7, lr}
   10a8a:	b089      	sub	sp, #36	; 0x24
   10a8c:	7805      	ldrb	r5, [r0, #0]
   10a8e:	ab02      	add	r3, sp, #8
   10a90:	1c41      	adds	r1, r0, #1
   10a92:	0007      	movs	r7, r0
   10a94:	719d      	strb	r5, [r3, #6]
   10a96:	1d9e      	adds	r6, r3, #6
   10a98:	2204      	movs	r2, #4
   10a9a:	4b23      	ldr	r3, [pc, #140]	; (10b28 <ExecuteDlChannel+0xa0>)
   10a9c:	a805      	add	r0, sp, #20
   10a9e:	4798      	blx	r3
   10aa0:	9b05      	ldr	r3, [sp, #20]
   10aa2:	a904      	add	r1, sp, #16
   10aa4:	021c      	lsls	r4, r3, #8
   10aa6:	2364      	movs	r3, #100	; 0x64
   10aa8:	0a24      	lsrs	r4, r4, #8
   10aaa:	435c      	muls	r4, r3
   10aac:	1d3b      	adds	r3, r7, #4
   10aae:	9301      	str	r3, [sp, #4]
   10ab0:	2301      	movs	r3, #1
   10ab2:	2015      	movs	r0, #21
   10ab4:	704b      	strb	r3, [r1, #1]
   10ab6:	4b1d      	ldr	r3, [pc, #116]	; (10b2c <ExecuteDlChannel+0xa4>)
   10ab8:	9405      	str	r4, [sp, #20]
   10aba:	700d      	strb	r5, [r1, #0]
   10abc:	4798      	blx	r3
   10abe:	2808      	cmp	r0, #8
   10ac0:	d12f      	bne.n	10b22 <ExecuteDlChannel+0x9a>
   10ac2:	ab02      	add	r3, sp, #8
   10ac4:	1ddd      	adds	r5, r3, #7
   10ac6:	2300      	movs	r3, #0
   10ac8:	702b      	strb	r3, [r5, #0]
   10aca:	7833      	ldrb	r3, [r6, #0]
   10acc:	af06      	add	r7, sp, #24
   10ace:	713b      	strb	r3, [r7, #4]
   10ad0:	002a      	movs	r2, r5
   10ad2:	0031      	movs	r1, r6
   10ad4:	300e      	adds	r0, #14
   10ad6:	4b16      	ldr	r3, [pc, #88]	; (10b30 <ExecuteDlChannel+0xa8>)
   10ad8:	9406      	str	r4, [sp, #24]
   10ada:	4798      	blx	r3
   10adc:	280a      	cmp	r0, #10
   10ade:	d00d      	beq.n	10afc <ExecuteDlChannel+0x74>
   10ae0:	782a      	ldrb	r2, [r5, #0]
   10ae2:	2a01      	cmp	r2, #1
   10ae4:	d10a      	bne.n	10afc <ExecuteDlChannel+0x74>
   10ae6:	4b13      	ldr	r3, [pc, #76]	; (10b34 <ExecuteDlChannel+0xac>)
   10ae8:	0019      	movs	r1, r3
   10aea:	31e0      	adds	r1, #224	; 0xe0
   10aec:	7808      	ldrb	r0, [r1, #0]
   10aee:	2103      	movs	r1, #3
   10af0:	4341      	muls	r1, r0
   10af2:	185b      	adds	r3, r3, r1
   10af4:	3398      	adds	r3, #152	; 0x98
   10af6:	78d9      	ldrb	r1, [r3, #3]
   10af8:	430a      	orrs	r2, r1
   10afa:	70da      	strb	r2, [r3, #3]
   10afc:	0039      	movs	r1, r7
   10afe:	2033      	movs	r0, #51	; 0x33
   10b00:	4b0d      	ldr	r3, [pc, #52]	; (10b38 <ExecuteDlChannel+0xb0>)
   10b02:	4798      	blx	r3
   10b04:	2808      	cmp	r0, #8
   10b06:	d10c      	bne.n	10b22 <ExecuteDlChannel+0x9a>
   10b08:	4b0a      	ldr	r3, [pc, #40]	; (10b34 <ExecuteDlChannel+0xac>)
   10b0a:	001a      	movs	r2, r3
   10b0c:	32e0      	adds	r2, #224	; 0xe0
   10b0e:	7811      	ldrb	r1, [r2, #0]
   10b10:	2203      	movs	r2, #3
   10b12:	434a      	muls	r2, r1
   10b14:	189b      	adds	r3, r3, r2
   10b16:	2280      	movs	r2, #128	; 0x80
   10b18:	3398      	adds	r3, #152	; 0x98
   10b1a:	7899      	ldrb	r1, [r3, #2]
   10b1c:	4252      	negs	r2, r2
   10b1e:	430a      	orrs	r2, r1
   10b20:	709a      	strb	r2, [r3, #2]
   10b22:	9801      	ldr	r0, [sp, #4]
   10b24:	b009      	add	sp, #36	; 0x24
   10b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10b28:	00016c47 	.word	0x00016c47
   10b2c:	0000d04d 	.word	0x0000d04d
   10b30:	0000d031 	.word	0x0000d031
   10b34:	20003180 	.word	0x20003180
   10b38:	0000d069 	.word	0x0000d069

00010b3c <ExecuteTxParamSetup>:
   10b3c:	220f      	movs	r2, #15
   10b3e:	b513      	push	{r0, r1, r4, lr}
   10b40:	7803      	ldrb	r3, [r0, #0]
   10b42:	4c0f      	ldr	r4, [pc, #60]	; (10b80 <ExecuteTxParamSetup+0x44>)
   10b44:	401a      	ands	r2, r3
   10b46:	5ca2      	ldrb	r2, [r4, r2]
   10b48:	2401      	movs	r4, #1
   10b4a:	a901      	add	r1, sp, #4
   10b4c:	700a      	strb	r2, [r1, #0]
   10b4e:	111a      	asrs	r2, r3, #4
   10b50:	115b      	asrs	r3, r3, #5
   10b52:	4023      	ands	r3, r4
   10b54:	40a3      	lsls	r3, r4
   10b56:	4022      	ands	r2, r4
   10b58:	4313      	orrs	r3, r2
   10b5a:	704b      	strb	r3, [r1, #1]
   10b5c:	1904      	adds	r4, r0, r4
   10b5e:	4b09      	ldr	r3, [pc, #36]	; (10b84 <ExecuteTxParamSetup+0x48>)
   10b60:	2034      	movs	r0, #52	; 0x34
   10b62:	4798      	blx	r3
   10b64:	2808      	cmp	r0, #8
   10b66:	d009      	beq.n	10b7c <ExecuteTxParamSetup+0x40>
   10b68:	4b07      	ldr	r3, [pc, #28]	; (10b88 <ExecuteTxParamSetup+0x4c>)
   10b6a:	001a      	movs	r2, r3
   10b6c:	32e0      	adds	r2, #224	; 0xe0
   10b6e:	7811      	ldrb	r1, [r2, #0]
   10b70:	2203      	movs	r2, #3
   10b72:	434a      	muls	r2, r1
   10b74:	189b      	adds	r3, r3, r2
   10b76:	22ff      	movs	r2, #255	; 0xff
   10b78:	3399      	adds	r3, #153	; 0x99
   10b7a:	701a      	strb	r2, [r3, #0]
   10b7c:	0020      	movs	r0, r4
   10b7e:	bd16      	pop	{r1, r2, r4, pc}
   10b80:	000190a5 	.word	0x000190a5
   10b84:	0000d069 	.word	0x0000d069
   10b88:	20003180 	.word	0x20003180

00010b8c <ExecuteLinkAdr>:
   10b8c:	220f      	movs	r2, #15
   10b8e:	b5f0      	push	{r4, r5, r6, r7, lr}
   10b90:	0006      	movs	r6, r0
   10b92:	7803      	ldrb	r3, [r0, #0]
   10b94:	b089      	sub	sp, #36	; 0x24
   10b96:	401a      	ands	r2, r3
   10b98:	a905      	add	r1, sp, #20
   10b9a:	700a      	strb	r2, [r1, #0]
   10b9c:	aa04      	add	r2, sp, #16
   10b9e:	1d97      	adds	r7, r2, #6
   10ba0:	091b      	lsrs	r3, r3, #4
   10ba2:	7153      	strb	r3, [r2, #5]
   10ba4:	1c41      	adds	r1, r0, #1
   10ba6:	2202      	movs	r2, #2
   10ba8:	0038      	movs	r0, r7
   10baa:	4b3d      	ldr	r3, [pc, #244]	; (10ca0 <ExecuteLinkAdr+0x114>)
   10bac:	4798      	blx	r3
   10bae:	2201      	movs	r2, #1
   10bb0:	1d33      	adds	r3, r6, #4
   10bb2:	9303      	str	r3, [sp, #12]
   10bb4:	78f3      	ldrb	r3, [r6, #3]
   10bb6:	4c3b      	ldr	r4, [pc, #236]	; (10ca4 <ExecuteLinkAdr+0x118>)
   10bb8:	4d3b      	ldr	r5, [pc, #236]	; (10ca8 <ExecuteLinkAdr+0x11c>)
   10bba:	065b      	lsls	r3, r3, #25
   10bbc:	0f5b      	lsrs	r3, r3, #29
   10bbe:	9300      	str	r3, [sp, #0]
   10bc0:	5d63      	ldrb	r3, [r4, r5]
   10bc2:	a906      	add	r1, sp, #24
   10bc4:	4393      	bics	r3, r2
   10bc6:	1892      	adds	r2, r2, r2
   10bc8:	4393      	bics	r3, r2
   10bca:	3202      	adds	r2, #2
   10bcc:	4393      	bics	r3, r2
   10bce:	5563      	strb	r3, [r4, r5]
   10bd0:	883b      	ldrh	r3, [r7, #0]
   10bd2:	2037      	movs	r0, #55	; 0x37
   10bd4:	9302      	str	r3, [sp, #8]
   10bd6:	466b      	mov	r3, sp
   10bd8:	891b      	ldrh	r3, [r3, #8]
   10bda:	4f34      	ldr	r7, [pc, #208]	; (10cac <ExecuteLinkAdr+0x120>)
   10bdc:	804b      	strh	r3, [r1, #2]
   10bde:	466b      	mov	r3, sp
   10be0:	781b      	ldrb	r3, [r3, #0]
   10be2:	700b      	strb	r3, [r1, #0]
   10be4:	47b8      	blx	r7
   10be6:	2808      	cmp	r0, #8
   10be8:	d117      	bne.n	10c1a <ExecuteLinkAdr+0x8e>
   10bea:	466b      	mov	r3, sp
   10bec:	891b      	ldrh	r3, [r3, #8]
   10bee:	a907      	add	r1, sp, #28
   10bf0:	800b      	strh	r3, [r1, #0]
   10bf2:	466b      	mov	r3, sp
   10bf4:	781b      	ldrb	r3, [r3, #0]
   10bf6:	3014      	adds	r0, #20
   10bf8:	708b      	strb	r3, [r1, #2]
   10bfa:	4b2d      	ldr	r3, [pc, #180]	; (10cb0 <ExecuteLinkAdr+0x124>)
   10bfc:	4798      	blx	r3
   10bfe:	2201      	movs	r2, #1
   10c00:	5d63      	ldrb	r3, [r4, r5]
   10c02:	2010      	movs	r0, #16
   10c04:	4313      	orrs	r3, r2
   10c06:	5563      	strb	r3, [r4, r5]
   10c08:	ab04      	add	r3, sp, #16
   10c0a:	1d59      	adds	r1, r3, #5
   10c0c:	47b8      	blx	r7
   10c0e:	2808      	cmp	r0, #8
   10c10:	d103      	bne.n	10c1a <ExecuteLinkAdr+0x8e>
   10c12:	2202      	movs	r2, #2
   10c14:	5d63      	ldrb	r3, [r4, r5]
   10c16:	4313      	orrs	r3, r2
   10c18:	5563      	strb	r3, [r4, r5]
   10c1a:	af05      	add	r7, sp, #20
   10c1c:	4b23      	ldr	r3, [pc, #140]	; (10cac <ExecuteLinkAdr+0x120>)
   10c1e:	0039      	movs	r1, r7
   10c20:	201d      	movs	r0, #29
   10c22:	4798      	blx	r3
   10c24:	4b1f      	ldr	r3, [pc, #124]	; (10ca4 <ExecuteLinkAdr+0x118>)
   10c26:	2808      	cmp	r0, #8
   10c28:	d103      	bne.n	10c32 <ExecuteLinkAdr+0xa6>
   10c2a:	2204      	movs	r2, #4
   10c2c:	5d59      	ldrb	r1, [r3, r5]
   10c2e:	430a      	orrs	r2, r1
   10c30:	555a      	strb	r2, [r3, r5]
   10c32:	5d5a      	ldrb	r2, [r3, r5]
   10c34:	43d2      	mvns	r2, r2
   10c36:	0752      	lsls	r2, r2, #29
   10c38:	d12a      	bne.n	10c90 <ExecuteLinkAdr+0x104>
   10c3a:	4669      	mov	r1, sp
   10c3c:	4a1d      	ldr	r2, [pc, #116]	; (10cb4 <ExecuteLinkAdr+0x128>)
   10c3e:	7a09      	ldrb	r1, [r1, #8]
   10c40:	5499      	strb	r1, [r3, r2]
   10c42:	9a02      	ldr	r2, [sp, #8]
   10c44:	491b      	ldr	r1, [pc, #108]	; (10cb4 <ExecuteLinkAdr+0x128>)
   10c46:	0a12      	lsrs	r2, r2, #8
   10c48:	1859      	adds	r1, r3, r1
   10c4a:	704a      	strb	r2, [r1, #1]
   10c4c:	aa04      	add	r2, sp, #16
   10c4e:	3205      	adds	r2, #5
   10c50:	7812      	ldrb	r2, [r2, #0]
   10c52:	2a0f      	cmp	r2, #15
   10c54:	d101      	bne.n	10c5a <ExecuteLinkAdr+0xce>
   10c56:	33e7      	adds	r3, #231	; 0xe7
   10c58:	781a      	ldrb	r2, [r3, #0]
   10c5a:	2389      	movs	r3, #137	; 0x89
   10c5c:	2170      	movs	r1, #112	; 0x70
   10c5e:	2070      	movs	r0, #112	; 0x70
   10c60:	009b      	lsls	r3, r3, #2
   10c62:	54e2      	strb	r2, [r4, r3]
   10c64:	78f3      	ldrb	r3, [r6, #3]
   10c66:	4a14      	ldr	r2, [pc, #80]	; (10cb8 <ExecuteLinkAdr+0x12c>)
   10c68:	4019      	ands	r1, r3
   10c6a:	5ca3      	ldrb	r3, [r4, r2]
   10c6c:	4383      	bics	r3, r0
   10c6e:	430b      	orrs	r3, r1
   10c70:	54a3      	strb	r3, [r4, r2]
   10c72:	78f1      	ldrb	r1, [r6, #3]
   10c74:	3861      	subs	r0, #97	; 0x61
   10c76:	b2db      	uxtb	r3, r3
   10c78:	4001      	ands	r1, r0
   10c7a:	4383      	bics	r3, r0
   10c7c:	430b      	orrs	r3, r1
   10c7e:	54a3      	strb	r3, [r4, r2]
   10c80:	783b      	ldrb	r3, [r7, #0]
   10c82:	4283      	cmp	r3, r0
   10c84:	d101      	bne.n	10c8a <ExecuteLinkAdr+0xfe>
   10c86:	34e9      	adds	r4, #233	; 0xe9
   10c88:	7823      	ldrb	r3, [r4, #0]
   10c8a:	4a0c      	ldr	r2, [pc, #48]	; (10cbc <ExecuteLinkAdr+0x130>)
   10c8c:	4905      	ldr	r1, [pc, #20]	; (10ca4 <ExecuteLinkAdr+0x118>)
   10c8e:	548b      	strb	r3, [r1, r2]
   10c90:	4904      	ldr	r1, [pc, #16]	; (10ca4 <ExecuteLinkAdr+0x118>)
   10c92:	4a0b      	ldr	r2, [pc, #44]	; (10cc0 <ExecuteLinkAdr+0x134>)
   10c94:	9803      	ldr	r0, [sp, #12]
   10c96:	5c8b      	ldrb	r3, [r1, r2]
   10c98:	3301      	adds	r3, #1
   10c9a:	548b      	strb	r3, [r1, r2]
   10c9c:	b009      	add	sp, #36	; 0x24
   10c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10ca0:	00016c47 	.word	0x00016c47
   10ca4:	20003180 	.word	0x20003180
   10ca8:	00000223 	.word	0x00000223
   10cac:	0000d04d 	.word	0x0000d04d
   10cb0:	0000d069 	.word	0x0000d069
   10cb4:	00000227 	.word	0x00000227
   10cb8:	00000229 	.word	0x00000229
   10cbc:	00000225 	.word	0x00000225
   10cc0:	00000226 	.word	0x00000226

00010cc4 <ExecuteDevTimeAns>:
   10cc4:	b510      	push	{r4, lr}
   10cc6:	0001      	movs	r1, r0
   10cc8:	0004      	movs	r4, r0
   10cca:	2204      	movs	r2, #4
   10ccc:	4b04      	ldr	r3, [pc, #16]	; (10ce0 <ExecuteDevTimeAns+0x1c>)
   10cce:	4805      	ldr	r0, [pc, #20]	; (10ce4 <ExecuteDevTimeAns+0x20>)
   10cd0:	4798      	blx	r3
   10cd2:	238e      	movs	r3, #142	; 0x8e
   10cd4:	7921      	ldrb	r1, [r4, #4]
   10cd6:	4a04      	ldr	r2, [pc, #16]	; (10ce8 <ExecuteDevTimeAns+0x24>)
   10cd8:	009b      	lsls	r3, r3, #2
   10cda:	1d60      	adds	r0, r4, #5
   10cdc:	54d1      	strb	r1, [r2, r3]
   10cde:	bd10      	pop	{r4, pc}
   10ce0:	00016c47 	.word	0x00016c47
   10ce4:	200033b4 	.word	0x200033b4
   10ce8:	20003180 	.word	0x20003180

00010cec <PrepareJoinRequestFrame>:
   10cec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   10cee:	2210      	movs	r2, #16
   10cf0:	4d22      	ldr	r5, [pc, #136]	; (10d7c <PrepareJoinRequestFrame+0x90>)
   10cf2:	4b23      	ldr	r3, [pc, #140]	; (10d80 <PrepareJoinRequestFrame+0x94>)
   10cf4:	32ff      	adds	r2, #255	; 0xff
   10cf6:	2100      	movs	r1, #0
   10cf8:	0028      	movs	r0, r5
   10cfa:	4798      	blx	r3
   10cfc:	2300      	movs	r3, #0
   10cfe:	4c21      	ldr	r4, [pc, #132]	; (10d84 <PrepareJoinRequestFrame+0x98>)
   10d00:	702b      	strb	r3, [r5, #0]
   10d02:	4b21      	ldr	r3, [pc, #132]	; (10d88 <PrepareJoinRequestFrame+0x9c>)
   10d04:	5ce3      	ldrb	r3, [r4, r3]
   10d06:	2b00      	cmp	r3, #0
   10d08:	d006      	beq.n	10d18 <PrepareJoinRequestFrame+0x2c>
   10d0a:	4920      	ldr	r1, [pc, #128]	; (10d8c <PrepareJoinRequestFrame+0xa0>)
   10d0c:	2006      	movs	r0, #6
   10d0e:	4e20      	ldr	r6, [pc, #128]	; (10d90 <PrepareJoinRequestFrame+0xa4>)
   10d10:	47b0      	blx	r6
   10d12:	4920      	ldr	r1, [pc, #128]	; (10d94 <PrepareJoinRequestFrame+0xa8>)
   10d14:	2007      	movs	r0, #7
   10d16:	47b0      	blx	r6
   10d18:	2300      	movs	r3, #0
   10d1a:	205c      	movs	r0, #92	; 0x5c
   10d1c:	1ac1      	subs	r1, r0, r3
   10d1e:	5c61      	ldrb	r1, [r4, r1]
   10d20:	18ea      	adds	r2, r5, r3
   10d22:	3301      	adds	r3, #1
   10d24:	7051      	strb	r1, [r2, #1]
   10d26:	2b08      	cmp	r3, #8
   10d28:	d1f8      	bne.n	10d1c <PrepareJoinRequestFrame+0x30>
   10d2a:	2300      	movs	r3, #0
   10d2c:	2064      	movs	r0, #100	; 0x64
   10d2e:	1ac1      	subs	r1, r0, r3
   10d30:	5c61      	ldrb	r1, [r4, r1]
   10d32:	18ea      	adds	r2, r5, r3
   10d34:	3301      	adds	r3, #1
   10d36:	7251      	strb	r1, [r2, #9]
   10d38:	2b08      	cmp	r3, #8
   10d3a:	d1f8      	bne.n	10d2e <PrepareJoinRequestFrame+0x42>
   10d3c:	4b16      	ldr	r3, [pc, #88]	; (10d98 <PrepareJoinRequestFrame+0xac>)
   10d3e:	4798      	blx	r3
   10d40:	4b16      	ldr	r3, [pc, #88]	; (10d9c <PrepareJoinRequestFrame+0xb0>)
   10d42:	4917      	ldr	r1, [pc, #92]	; (10da0 <PrepareJoinRequestFrame+0xb4>)
   10d44:	4798      	blx	r3
   10d46:	34cc      	adds	r4, #204	; 0xcc
   10d48:	8021      	strh	r1, [r4, #0]
   10d4a:	2202      	movs	r2, #2
   10d4c:	0021      	movs	r1, r4
   10d4e:	4815      	ldr	r0, [pc, #84]	; (10da4 <PrepareJoinRequestFrame+0xb8>)
   10d50:	4c15      	ldr	r4, [pc, #84]	; (10da8 <PrepareJoinRequestFrame+0xbc>)
   10d52:	47a0      	blx	r4
   10d54:	2313      	movs	r3, #19
   10d56:	4e15      	ldr	r6, [pc, #84]	; (10dac <PrepareJoinRequestFrame+0xc0>)
   10d58:	9300      	str	r3, [sp, #0]
   10d5a:	0032      	movs	r2, r6
   10d5c:	002b      	movs	r3, r5
   10d5e:	2100      	movs	r1, #0
   10d60:	4d13      	ldr	r5, [pc, #76]	; (10db0 <PrepareJoinRequestFrame+0xc4>)
   10d62:	4814      	ldr	r0, [pc, #80]	; (10db4 <PrepareJoinRequestFrame+0xc8>)
   10d64:	47a8      	blx	r5
   10d66:	0031      	movs	r1, r6
   10d68:	2204      	movs	r2, #4
   10d6a:	a803      	add	r0, sp, #12
   10d6c:	47a0      	blx	r4
   10d6e:	2204      	movs	r2, #4
   10d70:	a903      	add	r1, sp, #12
   10d72:	4811      	ldr	r0, [pc, #68]	; (10db8 <PrepareJoinRequestFrame+0xcc>)
   10d74:	47a0      	blx	r4
   10d76:	2017      	movs	r0, #23
   10d78:	b004      	add	sp, #16
   10d7a:	bd70      	pop	{r4, r5, r6, pc}
   10d7c:	200033c8 	.word	0x200033c8
   10d80:	00016c59 	.word	0x00016c59
   10d84:	20003180 	.word	0x20003180
   10d88:	0000022d 	.word	0x0000022d
   10d8c:	200031d5 	.word	0x200031d5
   10d90:	00007271 	.word	0x00007271
   10d94:	200031dd 	.word	0x200031dd
   10d98:	0001738d 	.word	0x0001738d
   10d9c:	00013cc5 	.word	0x00013cc5
   10da0:	0000ffff 	.word	0x0000ffff
   10da4:	200033d9 	.word	0x200033d9
   10da8:	00016c47 	.word	0x00016c47
   10dac:	20001eb5 	.word	0x20001eb5
   10db0:	00007275 	.word	0x00007275
   10db4:	200031c5 	.word	0x200031c5
   10db8:	200033db 	.word	0x200033db

00010dbc <ConfigureRadioRx>:
   10dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   10dbe:	b087      	sub	sp, #28
   10dc0:	466b      	mov	r3, sp
   10dc2:	2600      	movs	r6, #0
   10dc4:	1ddc      	adds	r4, r3, #7
   10dc6:	71d8      	strb	r0, [r3, #7]
   10dc8:	729e      	strb	r6, [r3, #10]
   10dca:	466a      	mov	r2, sp
   10dcc:	2301      	movs	r3, #1
   10dce:	72d3      	strb	r3, [r2, #11]
   10dd0:	2215      	movs	r2, #21
   10dd2:	ad03      	add	r5, sp, #12
   10dd4:	4f11      	ldr	r7, [pc, #68]	; (10e1c <ConfigureRadioRx+0x60>)
   10dd6:	9100      	str	r1, [sp, #0]
   10dd8:	446a      	add	r2, sp
   10dda:	0021      	movs	r1, r4
   10ddc:	2023      	movs	r0, #35	; 0x23
   10dde:	80ae      	strh	r6, [r5, #4]
   10de0:	47b8      	blx	r7
   10de2:	2216      	movs	r2, #22
   10de4:	0021      	movs	r1, r4
   10de6:	446a      	add	r2, sp
   10de8:	2024      	movs	r0, #36	; 0x24
   10dea:	47b8      	blx	r7
   10dec:	2217      	movs	r2, #23
   10dee:	0021      	movs	r1, r4
   10df0:	446a      	add	r2, sp
   10df2:	2025      	movs	r0, #37	; 0x25
   10df4:	47b8      	blx	r7
   10df6:	9b00      	ldr	r3, [sp, #0]
   10df8:	0028      	movs	r0, r5
   10dfa:	9303      	str	r3, [sp, #12]
   10dfc:	4b08      	ldr	r3, [pc, #32]	; (10e20 <ConfigureRadioRx+0x64>)
   10dfe:	80ae      	strh	r6, [r5, #4]
   10e00:	4798      	blx	r3
   10e02:	230a      	movs	r3, #10
   10e04:	446b      	add	r3, sp
   10e06:	0019      	movs	r1, r3
   10e08:	4c06      	ldr	r4, [pc, #24]	; (10e24 <ConfigureRadioRx+0x68>)
   10e0a:	2014      	movs	r0, #20
   10e0c:	47a0      	blx	r4
   10e0e:	230b      	movs	r3, #11
   10e10:	446b      	add	r3, sp
   10e12:	0019      	movs	r1, r3
   10e14:	2006      	movs	r0, #6
   10e16:	47a0      	blx	r4
   10e18:	b007      	add	sp, #28
   10e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10e1c:	0000d031 	.word	0x0000d031
   10e20:	00010429 	.word	0x00010429
   10e24:	0000e7b5 	.word	0x0000e7b5

00010e28 <ConfigureRadioTx>:
   10e28:	b5f0      	push	{r4, r5, r6, r7, lr}
   10e2a:	2517      	movs	r5, #23
   10e2c:	2300      	movs	r3, #0
   10e2e:	2616      	movs	r6, #22
   10e30:	2701      	movs	r7, #1
   10e32:	b087      	sub	sp, #28
   10e34:	ac01      	add	r4, sp, #4
   10e36:	446d      	add	r5, sp
   10e38:	9001      	str	r0, [sp, #4]
   10e3a:	702b      	strb	r3, [r5, #0]
   10e3c:	0020      	movs	r0, r4
   10e3e:	4b10      	ldr	r3, [pc, #64]	; (10e80 <ConfigureRadioTx+0x58>)
   10e40:	446e      	add	r6, sp
   10e42:	9102      	str	r1, [sp, #8]
   10e44:	9203      	str	r2, [sp, #12]
   10e46:	7037      	strb	r7, [r6, #0]
   10e48:	4798      	blx	r3
   10e4a:	79e3      	ldrb	r3, [r4, #7]
   10e4c:	4c0d      	ldr	r4, [pc, #52]	; (10e84 <ConfigureRadioTx+0x5c>)
   10e4e:	2b00      	cmp	r3, #0
   10e50:	d00a      	beq.n	10e68 <ConfigureRadioTx+0x40>
   10e52:	4b0d      	ldr	r3, [pc, #52]	; (10e88 <ConfigureRadioTx+0x60>)
   10e54:	4a0d      	ldr	r2, [pc, #52]	; (10e8c <ConfigureRadioTx+0x64>)
   10e56:	490e      	ldr	r1, [pc, #56]	; (10e90 <ConfigureRadioTx+0x68>)
   10e58:	54d7      	strb	r7, [r2, r3]
   10e5a:	200b      	movs	r0, #11
   10e5c:	4b0d      	ldr	r3, [pc, #52]	; (10e94 <ConfigureRadioTx+0x6c>)
   10e5e:	4798      	blx	r3
   10e60:	210a      	movs	r1, #10
   10e62:	200b      	movs	r0, #11
   10e64:	4469      	add	r1, sp
   10e66:	47a0      	blx	r4
   10e68:	a903      	add	r1, sp, #12
   10e6a:	2004      	movs	r0, #4
   10e6c:	47a0      	blx	r4
   10e6e:	0031      	movs	r1, r6
   10e70:	2014      	movs	r0, #20
   10e72:	47a0      	blx	r4
   10e74:	0029      	movs	r1, r5
   10e76:	2006      	movs	r0, #6
   10e78:	47a0      	blx	r4
   10e7a:	b007      	add	sp, #28
   10e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10e7e:	46c0      	nop			; (mov r8, r8)
   10e80:	00010429 	.word	0x00010429
   10e84:	0000e7b5 	.word	0x0000e7b5
   10e88:	00000222 	.word	0x00000222
   10e8c:	20003180 	.word	0x20003180
   10e90:	200033a1 	.word	0x200033a1
   10e94:	0000e6c5 	.word	0x0000e6c5

00010e98 <LorawanGetChAndInitiateRadioTransmit>:
   10e98:	2301      	movs	r3, #1
   10e9a:	b530      	push	{r4, r5, lr}
   10e9c:	4c46      	ldr	r4, [pc, #280]	; (10fb8 <LorawanGetChAndInitiateRadioTransmit+0x120>)
   10e9e:	b089      	sub	sp, #36	; 0x24
   10ea0:	a902      	add	r1, sp, #8
   10ea2:	700b      	strb	r3, [r1, #0]
   10ea4:	0023      	movs	r3, r4
   10ea6:	33e9      	adds	r3, #233	; 0xe9
   10ea8:	781b      	ldrb	r3, [r3, #0]
   10eaa:	704b      	strb	r3, [r1, #1]
   10eac:	0023      	movs	r3, r4
   10eae:	33e7      	adds	r3, #231	; 0xe7
   10eb0:	781b      	ldrb	r3, [r3, #0]
   10eb2:	708b      	strb	r3, [r1, #2]
   10eb4:	0023      	movs	r3, r4
   10eb6:	33fd      	adds	r3, #253	; 0xfd
   10eb8:	781b      	ldrb	r3, [r3, #0]
   10eba:	2b01      	cmp	r3, #1
   10ebc:	d108      	bne.n	10ed0 <LorawanGetChAndInitiateRadioTransmit+0x38>
   10ebe:	0020      	movs	r0, r4
   10ec0:	220e      	movs	r2, #14
   10ec2:	3084      	adds	r0, #132	; 0x84
   10ec4:	7803      	ldrb	r3, [r0, #0]
   10ec6:	4393      	bics	r3, r2
   10ec8:	001a      	movs	r2, r3
   10eca:	230c      	movs	r3, #12
   10ecc:	4313      	orrs	r3, r2
   10ece:	7003      	strb	r3, [r0, #0]
   10ed0:	aa05      	add	r2, sp, #20
   10ed2:	202e      	movs	r0, #46	; 0x2e
   10ed4:	4d39      	ldr	r5, [pc, #228]	; (10fbc <LorawanGetChAndInitiateRadioTransmit+0x124>)
   10ed6:	47a8      	blx	r5
   10ed8:	0023      	movs	r3, r4
   10eda:	2808      	cmp	r0, #8
   10edc:	d135      	bne.n	10f4a <LorawanGetChAndInitiateRadioTransmit+0xb2>
   10ede:	33fd      	adds	r3, #253	; 0xfd
   10ee0:	781b      	ldrb	r3, [r3, #0]
   10ee2:	ad03      	add	r5, sp, #12
   10ee4:	2b04      	cmp	r3, #4
   10ee6:	d108      	bne.n	10efa <LorawanGetChAndInitiateRadioTransmit+0x62>
   10ee8:	2390      	movs	r3, #144	; 0x90
   10eea:	2200      	movs	r2, #0
   10eec:	009b      	lsls	r3, r3, #2
   10eee:	54e2      	strb	r2, [r4, r3]
   10ef0:	2301      	movs	r3, #1
   10ef2:	0028      	movs	r0, r5
   10ef4:	702b      	strb	r3, [r5, #0]
   10ef6:	4b32      	ldr	r3, [pc, #200]	; (10fc0 <LorawanGetChAndInitiateRadioTransmit+0x128>)
   10ef8:	4798      	blx	r3
   10efa:	9805      	ldr	r0, [sp, #20]
   10efc:	4b31      	ldr	r3, [pc, #196]	; (10fc4 <LorawanGetChAndInitiateRadioTransmit+0x12c>)
   10efe:	9906      	ldr	r1, [sp, #24]
   10f00:	9a07      	ldr	r2, [sp, #28]
   10f02:	4798      	blx	r3
   10f04:	0023      	movs	r3, r4
   10f06:	33ce      	adds	r3, #206	; 0xce
   10f08:	881b      	ldrh	r3, [r3, #0]
   10f0a:	0028      	movs	r0, r5
   10f0c:	702b      	strb	r3, [r5, #0]
   10f0e:	4b2e      	ldr	r3, [pc, #184]	; (10fc8 <LorawanGetChAndInitiateRadioTransmit+0x130>)
   10f10:	606b      	str	r3, [r5, #4]
   10f12:	4b2e      	ldr	r3, [pc, #184]	; (10fcc <LorawanGetChAndInitiateRadioTransmit+0x134>)
   10f14:	4798      	blx	r3
   10f16:	2800      	cmp	r0, #0
   10f18:	d109      	bne.n	10f2e <LorawanGetChAndInitiateRadioTransmit+0x96>
   10f1a:	220e      	movs	r2, #14
   10f1c:	3484      	adds	r4, #132	; 0x84
   10f1e:	7823      	ldrb	r3, [r4, #0]
   10f20:	4393      	bics	r3, r2
   10f22:	001a      	movs	r2, r3
   10f24:	2302      	movs	r3, #2
   10f26:	4313      	orrs	r3, r2
   10f28:	7023      	strb	r3, [r4, #0]
   10f2a:	b009      	add	sp, #36	; 0x24
   10f2c:	bd30      	pop	{r4, r5, pc}
   10f2e:	2200      	movs	r2, #0
   10f30:	4b27      	ldr	r3, [pc, #156]	; (10fd0 <LorawanGetChAndInitiateRadioTransmit+0x138>)
   10f32:	4928      	ldr	r1, [pc, #160]	; (10fd4 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
   10f34:	5ce3      	ldrb	r3, [r4, r3]
   10f36:	34fc      	adds	r4, #252	; 0xfc
   10f38:	4359      	muls	r1, r3
   10f3a:	4b27      	ldr	r3, [pc, #156]	; (10fd8 <LorawanGetChAndInitiateRadioTransmit+0x140>)
   10f3c:	7820      	ldrb	r0, [r4, #0]
   10f3e:	18c9      	adds	r1, r1, r3
   10f40:	4b26      	ldr	r3, [pc, #152]	; (10fdc <LorawanGetChAndInitiateRadioTransmit+0x144>)
   10f42:	9200      	str	r2, [sp, #0]
   10f44:	4c26      	ldr	r4, [pc, #152]	; (10fe0 <LorawanGetChAndInitiateRadioTransmit+0x148>)
   10f46:	47a0      	blx	r4
   10f48:	e7ef      	b.n	10f2a <LorawanGetChAndInitiateRadioTransmit+0x92>
   10f4a:	33ff      	adds	r3, #255	; 0xff
   10f4c:	7f5b      	ldrb	r3, [r3, #29]
   10f4e:	079a      	lsls	r2, r3, #30
   10f50:	d515      	bpl.n	10f7e <LorawanGetChAndInitiateRadioTransmit+0xe6>
   10f52:	aa03      	add	r2, sp, #12
   10f54:	4923      	ldr	r1, [pc, #140]	; (10fe4 <LorawanGetChAndInitiateRadioTransmit+0x14c>)
   10f56:	2026      	movs	r0, #38	; 0x26
   10f58:	47a8      	blx	r5
   10f5a:	9b03      	ldr	r3, [sp, #12]
   10f5c:	1c5a      	adds	r2, r3, #1
   10f5e:	d001      	beq.n	10f64 <LorawanGetChAndInitiateRadioTransmit+0xcc>
   10f60:	3314      	adds	r3, #20
   10f62:	9303      	str	r3, [sp, #12]
   10f64:	21fa      	movs	r1, #250	; 0xfa
   10f66:	4b1a      	ldr	r3, [pc, #104]	; (10fd0 <LorawanGetChAndInitiateRadioTransmit+0x138>)
   10f68:	9a03      	ldr	r2, [sp, #12]
   10f6a:	5ce3      	ldrb	r3, [r4, r3]
   10f6c:	0089      	lsls	r1, r1, #2
   10f6e:	1ad3      	subs	r3, r2, r3
   10f70:	2200      	movs	r2, #0
   10f72:	4359      	muls	r1, r3
   10f74:	34f2      	adds	r4, #242	; 0xf2
   10f76:	7820      	ldrb	r0, [r4, #0]
   10f78:	9200      	str	r2, [sp, #0]
   10f7a:	4b1b      	ldr	r3, [pc, #108]	; (10fe8 <LorawanGetChAndInitiateRadioTransmit+0x150>)
   10f7c:	e7e2      	b.n	10f44 <LorawanGetChAndInitiateRadioTransmit+0xac>
   10f7e:	075b      	lsls	r3, r3, #29
   10f80:	d508      	bpl.n	10f94 <LorawanGetChAndInitiateRadioTransmit+0xfc>
   10f82:	aa03      	add	r2, sp, #12
   10f84:	4917      	ldr	r1, [pc, #92]	; (10fe4 <LorawanGetChAndInitiateRadioTransmit+0x14c>)
   10f86:	2032      	movs	r0, #50	; 0x32
   10f88:	47a8      	blx	r5
   10f8a:	9b03      	ldr	r3, [sp, #12]
   10f8c:	1c5a      	adds	r2, r3, #1
   10f8e:	d0e9      	beq.n	10f64 <LorawanGetChAndInitiateRadioTransmit+0xcc>
   10f90:	3301      	adds	r3, #1
   10f92:	e7e6      	b.n	10f62 <LorawanGetChAndInitiateRadioTransmit+0xca>
   10f94:	0023      	movs	r3, r4
   10f96:	2201      	movs	r2, #1
   10f98:	3394      	adds	r3, #148	; 0x94
   10f9a:	781b      	ldrb	r3, [r3, #0]
   10f9c:	401a      	ands	r2, r3
   10f9e:	d108      	bne.n	10fb2 <LorawanGetChAndInitiateRadioTransmit+0x11a>
   10fa0:	4b0b      	ldr	r3, [pc, #44]	; (10fd0 <LorawanGetChAndInitiateRadioTransmit+0x138>)
   10fa2:	490c      	ldr	r1, [pc, #48]	; (10fd4 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
   10fa4:	5ce3      	ldrb	r3, [r4, r3]
   10fa6:	34f2      	adds	r4, #242	; 0xf2
   10fa8:	4359      	muls	r1, r3
   10faa:	4b0b      	ldr	r3, [pc, #44]	; (10fd8 <LorawanGetChAndInitiateRadioTransmit+0x140>)
   10fac:	7820      	ldrb	r0, [r4, #0]
   10fae:	18c9      	adds	r1, r1, r3
   10fb0:	e7e2      	b.n	10f78 <LorawanGetChAndInitiateRadioTransmit+0xe0>
   10fb2:	4b0e      	ldr	r3, [pc, #56]	; (10fec <LorawanGetChAndInitiateRadioTransmit+0x154>)
   10fb4:	4798      	blx	r3
   10fb6:	e7b8      	b.n	10f2a <LorawanGetChAndInitiateRadioTransmit+0x92>
   10fb8:	20003180 	.word	0x20003180
   10fbc:	0000d031 	.word	0x0000d031
   10fc0:	0000f9c1 	.word	0x0000f9c1
   10fc4:	00010e29 	.word	0x00010e29
   10fc8:	200033d8 	.word	0x200033d8
   10fcc:	0000f0e5 	.word	0x0000f0e5
   10fd0:	0000022b 	.word	0x0000022b
   10fd4:	fffffc18 	.word	0xfffffc18
   10fd8:	001e8480 	.word	0x001e8480
   10fdc:	00010ff1 	.word	0x00010ff1
   10fe0:	0000d579 	.word	0x0000d579
   10fe4:	20003267 	.word	0x20003267
   10fe8:	000110a9 	.word	0x000110a9
   10fec:	00010801 	.word	0x00010801

00010ff0 <TransmissionErrorCallback>:
   10ff0:	b530      	push	{r4, r5, lr}
   10ff2:	4c22      	ldr	r4, [pc, #136]	; (1107c <TransmissionErrorCallback+0x8c>)
   10ff4:	2501      	movs	r5, #1
   10ff6:	0023      	movs	r3, r4
   10ff8:	b08b      	sub	sp, #44	; 0x2c
   10ffa:	a903      	add	r1, sp, #12
   10ffc:	700d      	strb	r5, [r1, #0]
   10ffe:	33e9      	adds	r3, #233	; 0xe9
   11000:	781b      	ldrb	r3, [r3, #0]
   11002:	aa07      	add	r2, sp, #28
   11004:	704b      	strb	r3, [r1, #1]
   11006:	0023      	movs	r3, r4
   11008:	33e7      	adds	r3, #231	; 0xe7
   1100a:	781b      	ldrb	r3, [r3, #0]
   1100c:	202e      	movs	r0, #46	; 0x2e
   1100e:	708b      	strb	r3, [r1, #2]
   11010:	4b1b      	ldr	r3, [pc, #108]	; (11080 <TransmissionErrorCallback+0x90>)
   11012:	4798      	blx	r3
   11014:	2808      	cmp	r0, #8
   11016:	d121      	bne.n	1105c <TransmissionErrorCallback+0x6c>
   11018:	a804      	add	r0, sp, #16
   1101a:	4b1a      	ldr	r3, [pc, #104]	; (11084 <TransmissionErrorCallback+0x94>)
   1101c:	7005      	strb	r5, [r0, #0]
   1101e:	4798      	blx	r3
   11020:	9807      	ldr	r0, [sp, #28]
   11022:	4b19      	ldr	r3, [pc, #100]	; (11088 <TransmissionErrorCallback+0x98>)
   11024:	9908      	ldr	r1, [sp, #32]
   11026:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11028:	4798      	blx	r3
   1102a:	0023      	movs	r3, r4
   1102c:	33ce      	adds	r3, #206	; 0xce
   1102e:	881b      	ldrh	r3, [r3, #0]
   11030:	a805      	add	r0, sp, #20
   11032:	7003      	strb	r3, [r0, #0]
   11034:	4b15      	ldr	r3, [pc, #84]	; (1108c <TransmissionErrorCallback+0x9c>)
   11036:	6043      	str	r3, [r0, #4]
   11038:	4b15      	ldr	r3, [pc, #84]	; (11090 <TransmissionErrorCallback+0xa0>)
   1103a:	4798      	blx	r3
   1103c:	2800      	cmp	r0, #0
   1103e:	d01a      	beq.n	11076 <TransmissionErrorCallback+0x86>
   11040:	0023      	movs	r3, r4
   11042:	33fd      	adds	r3, #253	; 0xfd
   11044:	781b      	ldrb	r3, [r3, #0]
   11046:	42ab      	cmp	r3, r5
   11048:	d108      	bne.n	1105c <TransmissionErrorCallback+0x6c>
   1104a:	0021      	movs	r1, r4
   1104c:	220e      	movs	r2, #14
   1104e:	3184      	adds	r1, #132	; 0x84
   11050:	780b      	ldrb	r3, [r1, #0]
   11052:	4393      	bics	r3, r2
   11054:	001a      	movs	r2, r3
   11056:	230c      	movs	r3, #12
   11058:	4313      	orrs	r3, r2
   1105a:	700b      	strb	r3, [r1, #0]
   1105c:	2200      	movs	r2, #0
   1105e:	4b0d      	ldr	r3, [pc, #52]	; (11094 <TransmissionErrorCallback+0xa4>)
   11060:	490d      	ldr	r1, [pc, #52]	; (11098 <TransmissionErrorCallback+0xa8>)
   11062:	5ce3      	ldrb	r3, [r4, r3]
   11064:	34fc      	adds	r4, #252	; 0xfc
   11066:	4359      	muls	r1, r3
   11068:	4b0c      	ldr	r3, [pc, #48]	; (1109c <TransmissionErrorCallback+0xac>)
   1106a:	7820      	ldrb	r0, [r4, #0]
   1106c:	18c9      	adds	r1, r1, r3
   1106e:	9200      	str	r2, [sp, #0]
   11070:	4b0b      	ldr	r3, [pc, #44]	; (110a0 <TransmissionErrorCallback+0xb0>)
   11072:	4c0c      	ldr	r4, [pc, #48]	; (110a4 <TransmissionErrorCallback+0xb4>)
   11074:	47a0      	blx	r4
   11076:	b00b      	add	sp, #44	; 0x2c
   11078:	bd30      	pop	{r4, r5, pc}
   1107a:	46c0      	nop			; (mov r8, r8)
   1107c:	20003180 	.word	0x20003180
   11080:	0000d031 	.word	0x0000d031
   11084:	0000f9c1 	.word	0x0000f9c1
   11088:	00010e29 	.word	0x00010e29
   1108c:	200033d8 	.word	0x200033d8
   11090:	0000f0e5 	.word	0x0000f0e5
   11094:	0000022b 	.word	0x0000022b
   11098:	fffffc18 	.word	0xfffffc18
   1109c:	001e8480 	.word	0x001e8480
   110a0:	00010ff1 	.word	0x00010ff1
   110a4:	0000d579 	.word	0x0000d579

000110a8 <UnconfirmedTransmissionCallback>:
   110a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   110aa:	4c3a      	ldr	r4, [pc, #232]	; (11194 <UnconfirmedTransmissionCallback+0xec>)
   110ac:	b08b      	sub	sp, #44	; 0x2c
   110ae:	0023      	movs	r3, r4
   110b0:	33ce      	adds	r3, #206	; 0xce
   110b2:	881b      	ldrh	r3, [r3, #0]
   110b4:	af05      	add	r7, sp, #20
   110b6:	703b      	strb	r3, [r7, #0]
   110b8:	4b37      	ldr	r3, [pc, #220]	; (11198 <UnconfirmedTransmissionCallback+0xf0>)
   110ba:	a903      	add	r1, sp, #12
   110bc:	9306      	str	r3, [sp, #24]
   110be:	2301      	movs	r3, #1
   110c0:	700b      	strb	r3, [r1, #0]
   110c2:	0023      	movs	r3, r4
   110c4:	0026      	movs	r6, r4
   110c6:	33e9      	adds	r3, #233	; 0xe9
   110c8:	781b      	ldrb	r3, [r3, #0]
   110ca:	36e7      	adds	r6, #231	; 0xe7
   110cc:	704b      	strb	r3, [r1, #1]
   110ce:	7833      	ldrb	r3, [r6, #0]
   110d0:	aa07      	add	r2, sp, #28
   110d2:	202e      	movs	r0, #46	; 0x2e
   110d4:	4d31      	ldr	r5, [pc, #196]	; (1119c <UnconfirmedTransmissionCallback+0xf4>)
   110d6:	708b      	strb	r3, [r1, #2]
   110d8:	47a8      	blx	r5
   110da:	2808      	cmp	r0, #8
   110dc:	d12b      	bne.n	11136 <UnconfirmedTransmissionCallback+0x8e>
   110de:	2301      	movs	r3, #1
   110e0:	a804      	add	r0, sp, #16
   110e2:	7003      	strb	r3, [r0, #0]
   110e4:	4b2e      	ldr	r3, [pc, #184]	; (111a0 <UnconfirmedTransmissionCallback+0xf8>)
   110e6:	4798      	blx	r3
   110e8:	9807      	ldr	r0, [sp, #28]
   110ea:	4b2e      	ldr	r3, [pc, #184]	; (111a4 <UnconfirmedTransmissionCallback+0xfc>)
   110ec:	9908      	ldr	r1, [sp, #32]
   110ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
   110f0:	4798      	blx	r3
   110f2:	0038      	movs	r0, r7
   110f4:	4b2c      	ldr	r3, [pc, #176]	; (111a8 <UnconfirmedTransmissionCallback+0x100>)
   110f6:	4798      	blx	r3
   110f8:	2800      	cmp	r0, #0
   110fa:	d01a      	beq.n	11132 <UnconfirmedTransmissionCallback+0x8a>
   110fc:	0023      	movs	r3, r4
   110fe:	33fd      	adds	r3, #253	; 0xfd
   11100:	781b      	ldrb	r3, [r3, #0]
   11102:	2b01      	cmp	r3, #1
   11104:	d108      	bne.n	11118 <UnconfirmedTransmissionCallback+0x70>
   11106:	0021      	movs	r1, r4
   11108:	220e      	movs	r2, #14
   1110a:	3184      	adds	r1, #132	; 0x84
   1110c:	780b      	ldrb	r3, [r1, #0]
   1110e:	4393      	bics	r3, r2
   11110:	001a      	movs	r2, r3
   11112:	230c      	movs	r3, #12
   11114:	4313      	orrs	r3, r2
   11116:	700b      	strb	r3, [r1, #0]
   11118:	2200      	movs	r2, #0
   1111a:	4b24      	ldr	r3, [pc, #144]	; (111ac <UnconfirmedTransmissionCallback+0x104>)
   1111c:	4924      	ldr	r1, [pc, #144]	; (111b0 <UnconfirmedTransmissionCallback+0x108>)
   1111e:	5ce3      	ldrb	r3, [r4, r3]
   11120:	34fc      	adds	r4, #252	; 0xfc
   11122:	4359      	muls	r1, r3
   11124:	4b23      	ldr	r3, [pc, #140]	; (111b4 <UnconfirmedTransmissionCallback+0x10c>)
   11126:	7820      	ldrb	r0, [r4, #0]
   11128:	18c9      	adds	r1, r1, r3
   1112a:	4b23      	ldr	r3, [pc, #140]	; (111b8 <UnconfirmedTransmissionCallback+0x110>)
   1112c:	9200      	str	r2, [sp, #0]
   1112e:	4c23      	ldr	r4, [pc, #140]	; (111bc <UnconfirmedTransmissionCallback+0x114>)
   11130:	47a0      	blx	r4
   11132:	b00b      	add	sp, #44	; 0x2c
   11134:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11136:	4b22      	ldr	r3, [pc, #136]	; (111c0 <UnconfirmedTransmissionCallback+0x118>)
   11138:	4798      	blx	r3
   1113a:	4b22      	ldr	r3, [pc, #136]	; (111c4 <UnconfirmedTransmissionCallback+0x11c>)
   1113c:	4922      	ldr	r1, [pc, #136]	; (111c8 <UnconfirmedTransmissionCallback+0x120>)
   1113e:	4798      	blx	r3
   11140:	23fa      	movs	r3, #250	; 0xfa
   11142:	009b      	lsls	r3, r3, #2
   11144:	18c9      	adds	r1, r1, r3
   11146:	0023      	movs	r3, r4
   11148:	9104      	str	r1, [sp, #16]
   1114a:	33ff      	adds	r3, #255	; 0xff
   1114c:	7f5b      	ldrb	r3, [r3, #29]
   1114e:	079a      	lsls	r2, r3, #30
   11150:	d515      	bpl.n	1117e <UnconfirmedTransmissionCallback+0xd6>
   11152:	aa04      	add	r2, sp, #16
   11154:	0031      	movs	r1, r6
   11156:	2026      	movs	r0, #38	; 0x26
   11158:	47a8      	blx	r5
   1115a:	9b04      	ldr	r3, [sp, #16]
   1115c:	1c5a      	adds	r2, r3, #1
   1115e:	d001      	beq.n	11164 <UnconfirmedTransmissionCallback+0xbc>
   11160:	3314      	adds	r3, #20
   11162:	9304      	str	r3, [sp, #16]
   11164:	4b11      	ldr	r3, [pc, #68]	; (111ac <UnconfirmedTransmissionCallback+0x104>)
   11166:	9a04      	ldr	r2, [sp, #16]
   11168:	5ce3      	ldrb	r3, [r4, r3]
   1116a:	21fa      	movs	r1, #250	; 0xfa
   1116c:	1ad3      	subs	r3, r2, r3
   1116e:	2200      	movs	r2, #0
   11170:	0089      	lsls	r1, r1, #2
   11172:	34f2      	adds	r4, #242	; 0xf2
   11174:	4359      	muls	r1, r3
   11176:	7820      	ldrb	r0, [r4, #0]
   11178:	4b14      	ldr	r3, [pc, #80]	; (111cc <UnconfirmedTransmissionCallback+0x124>)
   1117a:	9200      	str	r2, [sp, #0]
   1117c:	e7d7      	b.n	1112e <UnconfirmedTransmissionCallback+0x86>
   1117e:	075b      	lsls	r3, r3, #29
   11180:	d5f0      	bpl.n	11164 <UnconfirmedTransmissionCallback+0xbc>
   11182:	aa04      	add	r2, sp, #16
   11184:	0031      	movs	r1, r6
   11186:	2032      	movs	r0, #50	; 0x32
   11188:	47a8      	blx	r5
   1118a:	9b04      	ldr	r3, [sp, #16]
   1118c:	1c5a      	adds	r2, r3, #1
   1118e:	d0e9      	beq.n	11164 <UnconfirmedTransmissionCallback+0xbc>
   11190:	3301      	adds	r3, #1
   11192:	e7e6      	b.n	11162 <UnconfirmedTransmissionCallback+0xba>
   11194:	20003180 	.word	0x20003180
   11198:	200033d8 	.word	0x200033d8
   1119c:	0000d031 	.word	0x0000d031
   111a0:	0000f9c1 	.word	0x0000f9c1
   111a4:	00010e29 	.word	0x00010e29
   111a8:	0000f0e5 	.word	0x0000f0e5
   111ac:	0000022b 	.word	0x0000022b
   111b0:	fffffc18 	.word	0xfffffc18
   111b4:	001e8480 	.word	0x001e8480
   111b8:	00010ff1 	.word	0x00010ff1
   111bc:	0000d579 	.word	0x0000d579
   111c0:	0001738d 	.word	0x0001738d
   111c4:	00013cc5 	.word	0x00013cc5
   111c8:	000007d1 	.word	0x000007d1
   111cc:	000110a9 	.word	0x000110a9

000111d0 <EncryptFRMPayload>:
   111d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   111d2:	0007      	movs	r7, r0
   111d4:	2401      	movs	r4, #1
   111d6:	b089      	sub	sp, #36	; 0x24
   111d8:	9306      	str	r3, [sp, #24]
   111da:	ab10      	add	r3, sp, #64	; 0x40
   111dc:	881d      	ldrh	r5, [r3, #0]
   111de:	090b      	lsrs	r3, r1, #4
   111e0:	9104      	str	r1, [sp, #16]
   111e2:	9205      	str	r2, [sp, #20]
   111e4:	9303      	str	r3, [sp, #12]
   111e6:	9b03      	ldr	r3, [sp, #12]
   111e8:	429c      	cmp	r4, r3
   111ea:	d907      	bls.n	111fc <EncryptFRMPayload+0x2c>
   111ec:	260f      	movs	r6, #15
   111ee:	9b04      	ldr	r3, [sp, #16]
   111f0:	4033      	ands	r3, r6
   111f2:	1e1e      	subs	r6, r3, #0
   111f4:	d126      	bne.n	11244 <EncryptFRMPayload+0x74>
   111f6:	2000      	movs	r0, #0
   111f8:	b009      	add	sp, #36	; 0x24
   111fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   111fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   111fe:	0022      	movs	r2, r4
   11200:	9300      	str	r3, [sp, #0]
   11202:	9906      	ldr	r1, [sp, #24]
   11204:	2301      	movs	r3, #1
   11206:	9805      	ldr	r0, [sp, #20]
   11208:	4e1e      	ldr	r6, [pc, #120]	; (11284 <EncryptFRMPayload+0xb4>)
   1120a:	47b0      	blx	r6
   1120c:	4e1e      	ldr	r6, [pc, #120]	; (11288 <EncryptFRMPayload+0xb8>)
   1120e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11210:	2101      	movs	r1, #1
   11212:	0030      	movs	r0, r6
   11214:	4b1d      	ldr	r3, [pc, #116]	; (1128c <EncryptFRMPayload+0xbc>)
   11216:	4798      	blx	r3
   11218:	2800      	cmp	r0, #0
   1121a:	d1ed      	bne.n	111f8 <EncryptFRMPayload+0x28>
   1121c:	1e63      	subs	r3, r4, #1
   1121e:	011b      	lsls	r3, r3, #4
   11220:	18fb      	adds	r3, r7, r3
   11222:	9307      	str	r3, [sp, #28]
   11224:	9b07      	ldr	r3, [sp, #28]
   11226:	182a      	adds	r2, r5, r0
   11228:	5c19      	ldrb	r1, [r3, r0]
   1122a:	5d83      	ldrb	r3, [r0, r6]
   1122c:	b292      	uxth	r2, r2
   1122e:	4059      	eors	r1, r3
   11230:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11232:	3001      	adds	r0, #1
   11234:	5499      	strb	r1, [r3, r2]
   11236:	2810      	cmp	r0, #16
   11238:	d1f4      	bne.n	11224 <EncryptFRMPayload+0x54>
   1123a:	3510      	adds	r5, #16
   1123c:	3401      	adds	r4, #1
   1123e:	b2ad      	uxth	r5, r5
   11240:	b2e4      	uxtb	r4, r4
   11242:	e7d0      	b.n	111e6 <EncryptFRMPayload+0x16>
   11244:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11246:	0022      	movs	r2, r4
   11248:	9300      	str	r3, [sp, #0]
   1124a:	9906      	ldr	r1, [sp, #24]
   1124c:	2301      	movs	r3, #1
   1124e:	9805      	ldr	r0, [sp, #20]
   11250:	4c0c      	ldr	r4, [pc, #48]	; (11284 <EncryptFRMPayload+0xb4>)
   11252:	47a0      	blx	r4
   11254:	4c0c      	ldr	r4, [pc, #48]	; (11288 <EncryptFRMPayload+0xb8>)
   11256:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11258:	2101      	movs	r1, #1
   1125a:	0020      	movs	r0, r4
   1125c:	4b0b      	ldr	r3, [pc, #44]	; (1128c <EncryptFRMPayload+0xbc>)
   1125e:	4798      	blx	r3
   11260:	2800      	cmp	r0, #0
   11262:	d1c9      	bne.n	111f8 <EncryptFRMPayload+0x28>
   11264:	9b03      	ldr	r3, [sp, #12]
   11266:	011b      	lsls	r3, r3, #4
   11268:	18fb      	adds	r3, r7, r3
   1126a:	5d07      	ldrb	r7, [r0, r4]
   1126c:	5c19      	ldrb	r1, [r3, r0]
   1126e:	182a      	adds	r2, r5, r0
   11270:	4079      	eors	r1, r7
   11272:	9f11      	ldr	r7, [sp, #68]	; 0x44
   11274:	b292      	uxth	r2, r2
   11276:	3001      	adds	r0, #1
   11278:	54b9      	strb	r1, [r7, r2]
   1127a:	b2c2      	uxtb	r2, r0
   1127c:	4296      	cmp	r6, r2
   1127e:	d8f4      	bhi.n	1126a <EncryptFRMPayload+0x9a>
   11280:	e7b9      	b.n	111f6 <EncryptFRMPayload+0x26>
   11282:	46c0      	nop			; (mov r8, r8)
   11284:	000103e9 	.word	0x000103e9
   11288:	20001eb5 	.word	0x20001eb5
   1128c:	0000723d 	.word	0x0000723d

00011290 <UpdateTransactionCompleteCbParams>:
   11290:	2388      	movs	r3, #136	; 0x88
   11292:	2201      	movs	r2, #1
   11294:	b570      	push	{r4, r5, r6, lr}
   11296:	0001      	movs	r1, r0
   11298:	4c13      	ldr	r4, [pc, #76]	; (112e8 <UpdateTransactionCompleteCbParams+0x58>)
   1129a:	4814      	ldr	r0, [pc, #80]	; (112ec <UpdateTransactionCompleteCbParams+0x5c>)
   1129c:	009b      	lsls	r3, r3, #2
   1129e:	54e2      	strb	r2, [r4, r3]
   112a0:	7842      	ldrb	r2, [r0, #1]
   112a2:	7803      	ldrb	r3, [r0, #0]
   112a4:	0212      	lsls	r2, r2, #8
   112a6:	431a      	orrs	r2, r3
   112a8:	7883      	ldrb	r3, [r0, #2]
   112aa:	041b      	lsls	r3, r3, #16
   112ac:	431a      	orrs	r2, r3
   112ae:	78c3      	ldrb	r3, [r0, #3]
   112b0:	061b      	lsls	r3, r3, #24
   112b2:	4313      	orrs	r3, r2
   112b4:	d00e      	beq.n	112d4 <UpdateTransactionCompleteCbParams+0x44>
   112b6:	0022      	movs	r2, r4
   112b8:	2504      	movs	r5, #4
   112ba:	32fc      	adds	r2, #252	; 0xfc
   112bc:	6890      	ldr	r0, [r2, #8]
   112be:	4228      	tst	r0, r5
   112c0:	d008      	beq.n	112d4 <UpdateTransactionCompleteCbParams+0x44>
   112c2:	68d0      	ldr	r0, [r2, #12]
   112c4:	2800      	cmp	r0, #0
   112c6:	d005      	beq.n	112d4 <UpdateTransactionCompleteCbParams+0x44>
   112c8:	0022      	movs	r2, r4
   112ca:	32ff      	adds	r2, #255	; 0xff
   112cc:	7451      	strb	r1, [r2, #17]
   112ce:	7355      	strb	r5, [r2, #13]
   112d0:	4907      	ldr	r1, [pc, #28]	; (112f0 <UpdateTransactionCompleteCbParams+0x60>)
   112d2:	4798      	blx	r3
   112d4:	2388      	movs	r3, #136	; 0x88
   112d6:	009b      	lsls	r3, r3, #2
   112d8:	5ce3      	ldrb	r3, [r4, r3]
   112da:	2b00      	cmp	r3, #0
   112dc:	d002      	beq.n	112e4 <UpdateTransactionCompleteCbParams+0x54>
   112de:	2300      	movs	r3, #0
   112e0:	34fc      	adds	r4, #252	; 0xfc
   112e2:	60e3      	str	r3, [r4, #12]
   112e4:	bd70      	pop	{r4, r5, r6, pc}
   112e6:	46c0      	nop			; (mov r8, r8)
   112e8:	20003180 	.word	0x20003180
   112ec:	200034dc 	.word	0x200034dc
   112f0:	2000328c 	.word	0x2000328c

000112f4 <UpdateRxDataAvailableCbParams>:
   112f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   112f6:	4e0f      	ldr	r6, [pc, #60]	; (11334 <UpdateRxDataAvailableCbParams+0x40>)
   112f8:	469c      	mov	ip, r3
   112fa:	7875      	ldrb	r5, [r6, #1]
   112fc:	7834      	ldrb	r4, [r6, #0]
   112fe:	022d      	lsls	r5, r5, #8
   11300:	4325      	orrs	r5, r4
   11302:	78b4      	ldrb	r4, [r6, #2]
   11304:	0424      	lsls	r4, r4, #16
   11306:	4325      	orrs	r5, r4
   11308:	78f4      	ldrb	r4, [r6, #3]
   1130a:	0624      	lsls	r4, r4, #24
   1130c:	432c      	orrs	r4, r5
   1130e:	d010      	beq.n	11332 <UpdateRxDataAvailableCbParams+0x3e>
   11310:	4d09      	ldr	r5, [pc, #36]	; (11338 <UpdateRxDataAvailableCbParams+0x44>)
   11312:	2702      	movs	r7, #2
   11314:	002e      	movs	r6, r5
   11316:	36fc      	adds	r6, #252	; 0xfc
   11318:	68b3      	ldr	r3, [r6, #8]
   1131a:	423b      	tst	r3, r7
   1131c:	d009      	beq.n	11332 <UpdateRxDataAvailableCbParams+0x3e>
   1131e:	4663      	mov	r3, ip
   11320:	35ff      	adds	r5, #255	; 0xff
   11322:	6170      	str	r0, [r6, #20]
   11324:	61b1      	str	r1, [r6, #24]
   11326:	736f      	strb	r7, [r5, #13]
   11328:	766a      	strb	r2, [r5, #25]
   1132a:	76ab      	strb	r3, [r5, #26]
   1132c:	4903      	ldr	r1, [pc, #12]	; (1133c <UpdateRxDataAvailableCbParams+0x48>)
   1132e:	68f0      	ldr	r0, [r6, #12]
   11330:	47a0      	blx	r4
   11332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11334:	200034dc 	.word	0x200034dc
   11338:	20003180 	.word	0x20003180
   1133c:	2000328c 	.word	0x2000328c

00011340 <LorawanNotifyAppOnRxdone>:
   11340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11342:	4c25      	ldr	r4, [pc, #148]	; (113d8 <LorawanNotifyAppOnRxdone+0x98>)
   11344:	0007      	movs	r7, r0
   11346:	0023      	movs	r3, r4
   11348:	33fd      	adds	r3, #253	; 0xfd
   1134a:	781b      	ldrb	r3, [r3, #0]
   1134c:	000d      	movs	r5, r1
   1134e:	0016      	movs	r6, r2
   11350:	2b01      	cmp	r3, #1
   11352:	d136      	bne.n	113c2 <LorawanNotifyAppOnRxdone+0x82>
   11354:	0022      	movs	r2, r4
   11356:	210e      	movs	r1, #14
   11358:	3284      	adds	r2, #132	; 0x84
   1135a:	7813      	ldrb	r3, [r2, #0]
   1135c:	438b      	bics	r3, r1
   1135e:	7013      	strb	r3, [r2, #0]
   11360:	491e      	ldr	r1, [pc, #120]	; (113dc <LorawanNotifyAppOnRxdone+0x9c>)
   11362:	784a      	ldrb	r2, [r1, #1]
   11364:	780b      	ldrb	r3, [r1, #0]
   11366:	0212      	lsls	r2, r2, #8
   11368:	431a      	orrs	r2, r3
   1136a:	788b      	ldrb	r3, [r1, #2]
   1136c:	041b      	lsls	r3, r3, #16
   1136e:	431a      	orrs	r2, r3
   11370:	78cb      	ldrb	r3, [r1, #3]
   11372:	061b      	lsls	r3, r3, #24
   11374:	4313      	orrs	r3, r2
   11376:	d023      	beq.n	113c0 <LorawanNotifyAppOnRxdone+0x80>
   11378:	0022      	movs	r2, r4
   1137a:	2120      	movs	r1, #32
   1137c:	3294      	adds	r2, #148	; 0x94
   1137e:	7813      	ldrb	r3, [r2, #0]
   11380:	438b      	bics	r3, r1
   11382:	7013      	strb	r3, [r2, #0]
   11384:	0023      	movs	r3, r4
   11386:	33fd      	adds	r3, #253	; 0xfd
   11388:	781b      	ldrb	r3, [r3, #0]
   1138a:	7878      	ldrb	r0, [r7, #1]
   1138c:	469c      	mov	ip, r3
   1138e:	78fa      	ldrb	r2, [r7, #3]
   11390:	78b9      	ldrb	r1, [r7, #2]
   11392:	793b      	ldrb	r3, [r7, #4]
   11394:	4667      	mov	r7, ip
   11396:	0209      	lsls	r1, r1, #8
   11398:	4301      	orrs	r1, r0
   1139a:	0410      	lsls	r0, r2, #16
   1139c:	4308      	orrs	r0, r1
   1139e:	061b      	lsls	r3, r3, #24
   113a0:	4318      	orrs	r0, r3
   113a2:	0032      	movs	r2, r6
   113a4:	2308      	movs	r3, #8
   113a6:	0029      	movs	r1, r5
   113a8:	2f04      	cmp	r7, #4
   113aa:	d112      	bne.n	113d2 <LorawanNotifyAppOnRxdone+0x92>
   113ac:	4d0c      	ldr	r5, [pc, #48]	; (113e0 <LorawanNotifyAppOnRxdone+0xa0>)
   113ae:	47a8      	blx	r5
   113b0:	2388      	movs	r3, #136	; 0x88
   113b2:	009b      	lsls	r3, r3, #2
   113b4:	5ce3      	ldrb	r3, [r4, r3]
   113b6:	2b00      	cmp	r3, #0
   113b8:	d102      	bne.n	113c0 <LorawanNotifyAppOnRxdone+0x80>
   113ba:	2008      	movs	r0, #8
   113bc:	4b09      	ldr	r3, [pc, #36]	; (113e4 <LorawanNotifyAppOnRxdone+0xa4>)
   113be:	4798      	blx	r3
   113c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   113c2:	2b04      	cmp	r3, #4
   113c4:	d1cc      	bne.n	11360 <LorawanNotifyAppOnRxdone+0x20>
   113c6:	0023      	movs	r3, r4
   113c8:	33f1      	adds	r3, #241	; 0xf1
   113ca:	7818      	ldrb	r0, [r3, #0]
   113cc:	4b06      	ldr	r3, [pc, #24]	; (113e8 <LorawanNotifyAppOnRxdone+0xa8>)
   113ce:	4798      	blx	r3
   113d0:	e7c6      	b.n	11360 <LorawanNotifyAppOnRxdone+0x20>
   113d2:	4d06      	ldr	r5, [pc, #24]	; (113ec <LorawanNotifyAppOnRxdone+0xac>)
   113d4:	47a8      	blx	r5
   113d6:	e7eb      	b.n	113b0 <LorawanNotifyAppOnRxdone+0x70>
   113d8:	20003180 	.word	0x20003180
   113dc:	200034dc 	.word	0x200034dc
   113e0:	00013299 	.word	0x00013299
   113e4:	00011291 	.word	0x00011291
   113e8:	0000d891 	.word	0x0000d891
   113ec:	000112f5 	.word	0x000112f5

000113f0 <LorawanSetReceiveWindow2Parameters>:
   113f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   113f2:	466b      	mov	r3, sp
   113f4:	1cdd      	adds	r5, r3, #3
   113f6:	9001      	str	r0, [sp, #4]
   113f8:	7029      	strb	r1, [r5, #0]
   113fa:	2001      	movs	r0, #1
   113fc:	a901      	add	r1, sp, #4
   113fe:	4c09      	ldr	r4, [pc, #36]	; (11424 <LorawanSetReceiveWindow2Parameters+0x34>)
   11400:	47a0      	blx	r4
   11402:	2808      	cmp	r0, #8
   11404:	d002      	beq.n	1140c <LorawanSetReceiveWindow2Parameters+0x1c>
   11406:	240a      	movs	r4, #10
   11408:	0020      	movs	r0, r4
   1140a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1140c:	0029      	movs	r1, r5
   1140e:	200f      	movs	r0, #15
   11410:	47a0      	blx	r4
   11412:	0004      	movs	r4, r0
   11414:	2808      	cmp	r0, #8
   11416:	d1f6      	bne.n	11406 <LorawanSetReceiveWindow2Parameters+0x16>
   11418:	7829      	ldrb	r1, [r5, #0]
   1141a:	9801      	ldr	r0, [sp, #4]
   1141c:	4b02      	ldr	r3, [pc, #8]	; (11428 <LorawanSetReceiveWindow2Parameters+0x38>)
   1141e:	4798      	blx	r3
   11420:	e7f2      	b.n	11408 <LorawanSetReceiveWindow2Parameters+0x18>
   11422:	46c0      	nop			; (mov r8, r8)
   11424:	0000d04d 	.word	0x0000d04d
   11428:	00010855 	.word	0x00010855

0001142c <LorawanSetReceiveWindowCParameters>:
   1142c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1142e:	466b      	mov	r3, sp
   11430:	1cdc      	adds	r4, r3, #3
   11432:	9001      	str	r0, [sp, #4]
   11434:	7021      	strb	r1, [r4, #0]
   11436:	2001      	movs	r0, #1
   11438:	a901      	add	r1, sp, #4
   1143a:	4d0d      	ldr	r5, [pc, #52]	; (11470 <LorawanSetReceiveWindowCParameters+0x44>)
   1143c:	47a8      	blx	r5
   1143e:	2808      	cmp	r0, #8
   11440:	d001      	beq.n	11446 <LorawanSetReceiveWindowCParameters+0x1a>
   11442:	200a      	movs	r0, #10
   11444:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   11446:	0021      	movs	r1, r4
   11448:	200f      	movs	r0, #15
   1144a:	47a8      	blx	r5
   1144c:	2808      	cmp	r0, #8
   1144e:	d1f8      	bne.n	11442 <LorawanSetReceiveWindowCParameters+0x16>
   11450:	4b08      	ldr	r3, [pc, #32]	; (11474 <LorawanSetReceiveWindowCParameters+0x48>)
   11452:	9a01      	ldr	r2, [sp, #4]
   11454:	0019      	movs	r1, r3
   11456:	7824      	ldrb	r4, [r4, #0]
   11458:	3173      	adds	r1, #115	; 0x73
   1145a:	336f      	adds	r3, #111	; 0x6f
   1145c:	700c      	strb	r4, [r1, #0]
   1145e:	0a11      	lsrs	r1, r2, #8
   11460:	701a      	strb	r2, [r3, #0]
   11462:	7059      	strb	r1, [r3, #1]
   11464:	0c11      	lsrs	r1, r2, #16
   11466:	0e12      	lsrs	r2, r2, #24
   11468:	7099      	strb	r1, [r3, #2]
   1146a:	70da      	strb	r2, [r3, #3]
   1146c:	e7ea      	b.n	11444 <LorawanSetReceiveWindowCParameters+0x18>
   1146e:	46c0      	nop			; (mov r8, r8)
   11470:	0000d04d 	.word	0x0000d04d
   11474:	20003180 	.word	0x20003180

00011478 <LorawanSetFrequency>:
   11478:	b507      	push	{r0, r1, r2, lr}
   1147a:	466b      	mov	r3, sp
   1147c:	9100      	str	r1, [sp, #0]
   1147e:	7118      	strb	r0, [r3, #4]
   11480:	4669      	mov	r1, sp
   11482:	2000      	movs	r0, #0
   11484:	4b01      	ldr	r3, [pc, #4]	; (1148c <LorawanSetFrequency+0x14>)
   11486:	4798      	blx	r3
   11488:	bd0e      	pop	{r1, r2, r3, pc}
   1148a:	46c0      	nop			; (mov r8, r8)
   1148c:	0000d069 	.word	0x0000d069

00011490 <LorawanCheckAndDoRetryOnTimeout>:
   11490:	b513      	push	{r0, r1, r4, lr}
   11492:	4c33      	ldr	r4, [pc, #204]	; (11560 <LorawanCheckAndDoRetryOnTimeout+0xd0>)
   11494:	0023      	movs	r3, r4
   11496:	3394      	adds	r3, #148	; 0x94
   11498:	781b      	ldrb	r3, [r3, #0]
   1149a:	0022      	movs	r2, r4
   1149c:	07db      	lsls	r3, r3, #31
   1149e:	d54b      	bpl.n	11538 <LorawanCheckAndDoRetryOnTimeout+0xa8>
   114a0:	0023      	movs	r3, r4
   114a2:	32e4      	adds	r2, #228	; 0xe4
   114a4:	33e2      	adds	r3, #226	; 0xe2
   114a6:	7812      	ldrb	r2, [r2, #0]
   114a8:	781b      	ldrb	r3, [r3, #0]
   114aa:	429a      	cmp	r2, r3
   114ac:	d836      	bhi.n	1151c <LorawanCheckAndDoRetryOnTimeout+0x8c>
   114ae:	4b2d      	ldr	r3, [pc, #180]	; (11564 <LorawanCheckAndDoRetryOnTimeout+0xd4>)
   114b0:	5ce3      	ldrb	r3, [r4, r3]
   114b2:	2b00      	cmp	r3, #0
   114b4:	d032      	beq.n	1151c <LorawanCheckAndDoRetryOnTimeout+0x8c>
   114b6:	0023      	movs	r3, r4
   114b8:	33fd      	adds	r3, #253	; 0xfd
   114ba:	781b      	ldrb	r3, [r3, #0]
   114bc:	2b01      	cmp	r3, #1
   114be:	d119      	bne.n	114f4 <LorawanCheckAndDoRetryOnTimeout+0x64>
   114c0:	0021      	movs	r1, r4
   114c2:	220e      	movs	r2, #14
   114c4:	3184      	adds	r1, #132	; 0x84
   114c6:	780b      	ldrb	r3, [r1, #0]
   114c8:	4393      	bics	r3, r2
   114ca:	001a      	movs	r2, r3
   114cc:	230c      	movs	r3, #12
   114ce:	4313      	orrs	r3, r2
   114d0:	700b      	strb	r3, [r1, #0]
   114d2:	0023      	movs	r3, r4
   114d4:	33da      	adds	r3, #218	; 0xda
   114d6:	8819      	ldrh	r1, [r3, #0]
   114d8:	4b23      	ldr	r3, [pc, #140]	; (11568 <LorawanCheckAndDoRetryOnTimeout+0xd8>)
   114da:	2200      	movs	r2, #0
   114dc:	5ce3      	ldrb	r3, [r4, r3]
   114de:	34f1      	adds	r4, #241	; 0xf1
   114e0:	1acb      	subs	r3, r1, r3
   114e2:	21fa      	movs	r1, #250	; 0xfa
   114e4:	0089      	lsls	r1, r1, #2
   114e6:	7820      	ldrb	r0, [r4, #0]
   114e8:	4359      	muls	r1, r3
   114ea:	9200      	str	r2, [sp, #0]
   114ec:	4b1f      	ldr	r3, [pc, #124]	; (1156c <LorawanCheckAndDoRetryOnTimeout+0xdc>)
   114ee:	4c20      	ldr	r4, [pc, #128]	; (11570 <LorawanCheckAndDoRetryOnTimeout+0xe0>)
   114f0:	47a0      	blx	r4
   114f2:	bd13      	pop	{r0, r1, r4, pc}
   114f4:	2b04      	cmp	r3, #4
   114f6:	d1fc      	bne.n	114f2 <LorawanCheckAndDoRetryOnTimeout+0x62>
   114f8:	4b1e      	ldr	r3, [pc, #120]	; (11574 <LorawanCheckAndDoRetryOnTimeout+0xe4>)
   114fa:	4798      	blx	r3
   114fc:	34ce      	adds	r4, #206	; 0xce
   114fe:	300d      	adds	r0, #13
   11500:	8823      	ldrh	r3, [r4, #0]
   11502:	b280      	uxth	r0, r0
   11504:	4283      	cmp	r3, r0
   11506:	d802      	bhi.n	1150e <LorawanCheckAndDoRetryOnTimeout+0x7e>
   11508:	4b1b      	ldr	r3, [pc, #108]	; (11578 <LorawanCheckAndDoRetryOnTimeout+0xe8>)
   1150a:	4798      	blx	r3
   1150c:	e7f1      	b.n	114f2 <LorawanCheckAndDoRetryOnTimeout+0x62>
   1150e:	200e      	movs	r0, #14
   11510:	4b1a      	ldr	r3, [pc, #104]	; (1157c <LorawanCheckAndDoRetryOnTimeout+0xec>)
   11512:	4798      	blx	r3
   11514:	4b1a      	ldr	r3, [pc, #104]	; (11580 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
   11516:	4798      	blx	r3
   11518:	4b1a      	ldr	r3, [pc, #104]	; (11584 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   1151a:	e7f6      	b.n	1150a <LorawanCheckAndDoRetryOnTimeout+0x7a>
   1151c:	2012      	movs	r0, #18
   1151e:	4b17      	ldr	r3, [pc, #92]	; (1157c <LorawanCheckAndDoRetryOnTimeout+0xec>)
   11520:	4798      	blx	r3
   11522:	4b17      	ldr	r3, [pc, #92]	; (11580 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
   11524:	4798      	blx	r3
   11526:	34fd      	adds	r4, #253	; 0xfd
   11528:	4b16      	ldr	r3, [pc, #88]	; (11584 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   1152a:	4798      	blx	r3
   1152c:	7823      	ldrb	r3, [r4, #0]
   1152e:	2b04      	cmp	r3, #4
   11530:	d1df      	bne.n	114f2 <LorawanCheckAndDoRetryOnTimeout+0x62>
   11532:	4b15      	ldr	r3, [pc, #84]	; (11588 <LorawanCheckAndDoRetryOnTimeout+0xf8>)
   11534:	4798      	blx	r3
   11536:	e7dc      	b.n	114f2 <LorawanCheckAndDoRetryOnTimeout+0x62>
   11538:	0023      	movs	r3, r4
   1153a:	32e3      	adds	r2, #227	; 0xe3
   1153c:	33e1      	adds	r3, #225	; 0xe1
   1153e:	7812      	ldrb	r2, [r2, #0]
   11540:	781b      	ldrb	r3, [r3, #0]
   11542:	429a      	cmp	r2, r3
   11544:	d803      	bhi.n	1154e <LorawanCheckAndDoRetryOnTimeout+0xbe>
   11546:	4b07      	ldr	r3, [pc, #28]	; (11564 <LorawanCheckAndDoRetryOnTimeout+0xd4>)
   11548:	5ce3      	ldrb	r3, [r4, r3]
   1154a:	2b00      	cmp	r3, #0
   1154c:	d1dc      	bne.n	11508 <LorawanCheckAndDoRetryOnTimeout+0x78>
   1154e:	4b0f      	ldr	r3, [pc, #60]	; (1158c <LorawanCheckAndDoRetryOnTimeout+0xfc>)
   11550:	4798      	blx	r3
   11552:	4b0c      	ldr	r3, [pc, #48]	; (11584 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   11554:	4798      	blx	r3
   11556:	2008      	movs	r0, #8
   11558:	4b08      	ldr	r3, [pc, #32]	; (1157c <LorawanCheckAndDoRetryOnTimeout+0xec>)
   1155a:	4798      	blx	r3
   1155c:	e7c9      	b.n	114f2 <LorawanCheckAndDoRetryOnTimeout+0x62>
   1155e:	46c0      	nop			; (mov r8, r8)
   11560:	20003180 	.word	0x20003180
   11564:	0000022a 	.word	0x0000022a
   11568:	0000022b 	.word	0x0000022b
   1156c:	00011591 	.word	0x00011591
   11570:	0000d579 	.word	0x0000d579
   11574:	0001005d 	.word	0x0001005d
   11578:	00010e99 	.word	0x00010e99
   1157c:	00011291 	.word	0x00011291
   11580:	0001089d 	.word	0x0001089d
   11584:	0000ffd9 	.word	0x0000ffd9
   11588:	0000f0c9 	.word	0x0000f0c9
   1158c:	000108cd 	.word	0x000108cd

00011590 <AckRetransmissionCallback>:
   11590:	b510      	push	{r4, lr}
   11592:	4c1c      	ldr	r4, [pc, #112]	; (11604 <AckRetransmissionCallback+0x74>)
   11594:	0023      	movs	r3, r4
   11596:	3384      	adds	r3, #132	; 0x84
   11598:	781b      	ldrb	r3, [r3, #0]
   1159a:	2b7f      	cmp	r3, #127	; 0x7f
   1159c:	d82d      	bhi.n	115fa <AckRetransmissionCallback+0x6a>
   1159e:	0023      	movs	r3, r4
   115a0:	33fd      	adds	r3, #253	; 0xfd
   115a2:	781b      	ldrb	r3, [r3, #0]
   115a4:	2b04      	cmp	r3, #4
   115a6:	d102      	bne.n	115ae <AckRetransmissionCallback+0x1e>
   115a8:	4b17      	ldr	r3, [pc, #92]	; (11608 <AckRetransmissionCallback+0x78>)
   115aa:	4798      	blx	r3
   115ac:	e01e      	b.n	115ec <AckRetransmissionCallback+0x5c>
   115ae:	2b01      	cmp	r3, #1
   115b0:	d11c      	bne.n	115ec <AckRetransmissionCallback+0x5c>
   115b2:	0022      	movs	r2, r4
   115b4:	0023      	movs	r3, r4
   115b6:	32e4      	adds	r2, #228	; 0xe4
   115b8:	33e2      	adds	r3, #226	; 0xe2
   115ba:	7812      	ldrb	r2, [r2, #0]
   115bc:	781b      	ldrb	r3, [r3, #0]
   115be:	429a      	cmp	r2, r3
   115c0:	d815      	bhi.n	115ee <AckRetransmissionCallback+0x5e>
   115c2:	4b12      	ldr	r3, [pc, #72]	; (1160c <AckRetransmissionCallback+0x7c>)
   115c4:	5ce3      	ldrb	r3, [r4, r3]
   115c6:	2b00      	cmp	r3, #0
   115c8:	d011      	beq.n	115ee <AckRetransmissionCallback+0x5e>
   115ca:	4b11      	ldr	r3, [pc, #68]	; (11610 <AckRetransmissionCallback+0x80>)
   115cc:	4798      	blx	r3
   115ce:	34ce      	adds	r4, #206	; 0xce
   115d0:	300d      	adds	r0, #13
   115d2:	8823      	ldrh	r3, [r4, #0]
   115d4:	b280      	uxth	r0, r0
   115d6:	4283      	cmp	r3, r0
   115d8:	d801      	bhi.n	115de <AckRetransmissionCallback+0x4e>
   115da:	4b0e      	ldr	r3, [pc, #56]	; (11614 <AckRetransmissionCallback+0x84>)
   115dc:	e7e5      	b.n	115aa <AckRetransmissionCallback+0x1a>
   115de:	4b0e      	ldr	r3, [pc, #56]	; (11618 <AckRetransmissionCallback+0x88>)
   115e0:	4798      	blx	r3
   115e2:	4b0e      	ldr	r3, [pc, #56]	; (1161c <AckRetransmissionCallback+0x8c>)
   115e4:	4798      	blx	r3
   115e6:	200e      	movs	r0, #14
   115e8:	4b0d      	ldr	r3, [pc, #52]	; (11620 <AckRetransmissionCallback+0x90>)
   115ea:	4798      	blx	r3
   115ec:	bd10      	pop	{r4, pc}
   115ee:	4b0a      	ldr	r3, [pc, #40]	; (11618 <AckRetransmissionCallback+0x88>)
   115f0:	4798      	blx	r3
   115f2:	4b0a      	ldr	r3, [pc, #40]	; (1161c <AckRetransmissionCallback+0x8c>)
   115f4:	4798      	blx	r3
   115f6:	2012      	movs	r0, #18
   115f8:	e7f6      	b.n	115e8 <AckRetransmissionCallback+0x58>
   115fa:	4b07      	ldr	r3, [pc, #28]	; (11618 <AckRetransmissionCallback+0x88>)
   115fc:	4798      	blx	r3
   115fe:	4b07      	ldr	r3, [pc, #28]	; (1161c <AckRetransmissionCallback+0x8c>)
   11600:	e7d3      	b.n	115aa <AckRetransmissionCallback+0x1a>
   11602:	46c0      	nop			; (mov r8, r8)
   11604:	20003180 	.word	0x20003180
   11608:	00011491 	.word	0x00011491
   1160c:	0000022a 	.word	0x0000022a
   11610:	0001005d 	.word	0x0001005d
   11614:	00010e99 	.word	0x00010e99
   11618:	0001089d 	.word	0x0001089d
   1161c:	0000ffd9 	.word	0x0000ffd9
   11620:	00011291 	.word	0x00011291

00011624 <LORAWAN_RxTimeout>:
   11624:	4b24      	ldr	r3, [pc, #144]	; (116b8 <LORAWAN_RxTimeout+0x94>)
   11626:	b510      	push	{r4, lr}
   11628:	001a      	movs	r2, r3
   1162a:	3284      	adds	r2, #132	; 0x84
   1162c:	7812      	ldrb	r2, [r2, #0]
   1162e:	b251      	sxtb	r1, r2
   11630:	2900      	cmp	r1, #0
   11632:	db27      	blt.n	11684 <LORAWAN_RxTimeout+0x60>
   11634:	0019      	movs	r1, r3
   11636:	31fd      	adds	r1, #253	; 0xfd
   11638:	7809      	ldrb	r1, [r1, #0]
   1163a:	2904      	cmp	r1, #4
   1163c:	d108      	bne.n	11650 <LORAWAN_RxTimeout+0x2c>
   1163e:	3903      	subs	r1, #3
   11640:	420a      	tst	r2, r1
   11642:	d005      	beq.n	11650 <LORAWAN_RxTimeout+0x2c>
   11644:	2290      	movs	r2, #144	; 0x90
   11646:	0092      	lsls	r2, r2, #2
   11648:	5499      	strb	r1, [r3, r2]
   1164a:	4b1c      	ldr	r3, [pc, #112]	; (116bc <LORAWAN_RxTimeout+0x98>)
   1164c:	4798      	blx	r3
   1164e:	bd10      	pop	{r4, pc}
   11650:	210e      	movs	r1, #14
   11652:	0010      	movs	r0, r2
   11654:	4008      	ands	r0, r1
   11656:	2806      	cmp	r0, #6
   11658:	d107      	bne.n	1166a <LORAWAN_RxTimeout+0x46>
   1165a:	3384      	adds	r3, #132	; 0x84
   1165c:	781a      	ldrb	r2, [r3, #0]
   1165e:	438a      	bics	r2, r1
   11660:	0011      	movs	r1, r2
   11662:	2208      	movs	r2, #8
   11664:	430a      	orrs	r2, r1
   11666:	701a      	strb	r2, [r3, #0]
   11668:	e7f1      	b.n	1164e <LORAWAN_RxTimeout+0x2a>
   1166a:	2004      	movs	r0, #4
   1166c:	3394      	adds	r3, #148	; 0x94
   1166e:	781b      	ldrb	r3, [r3, #0]
   11670:	4203      	tst	r3, r0
   11672:	d002      	beq.n	1167a <LORAWAN_RxTimeout+0x56>
   11674:	4b12      	ldr	r3, [pc, #72]	; (116c0 <LORAWAN_RxTimeout+0x9c>)
   11676:	4798      	blx	r3
   11678:	e7e9      	b.n	1164e <LORAWAN_RxTimeout+0x2a>
   1167a:	07d3      	lsls	r3, r2, #31
   1167c:	d5e7      	bpl.n	1164e <LORAWAN_RxTimeout+0x2a>
   1167e:	4b11      	ldr	r3, [pc, #68]	; (116c4 <LORAWAN_RxTimeout+0xa0>)
   11680:	4798      	blx	r3
   11682:	e7e4      	b.n	1164e <LORAWAN_RxTimeout+0x2a>
   11684:	4810      	ldr	r0, [pc, #64]	; (116c8 <LORAWAN_RxTimeout+0xa4>)
   11686:	7841      	ldrb	r1, [r0, #1]
   11688:	7802      	ldrb	r2, [r0, #0]
   1168a:	0209      	lsls	r1, r1, #8
   1168c:	4311      	orrs	r1, r2
   1168e:	7882      	ldrb	r2, [r0, #2]
   11690:	0412      	lsls	r2, r2, #16
   11692:	4311      	orrs	r1, r2
   11694:	78c2      	ldrb	r2, [r0, #3]
   11696:	0612      	lsls	r2, r2, #24
   11698:	430a      	orrs	r2, r1
   1169a:	d0d8      	beq.n	1164e <LORAWAN_RxTimeout+0x2a>
   1169c:	2188      	movs	r1, #136	; 0x88
   1169e:	2001      	movs	r0, #1
   116a0:	0089      	lsls	r1, r1, #2
   116a2:	5458      	strb	r0, [r3, r1]
   116a4:	0019      	movs	r1, r3
   116a6:	2404      	movs	r4, #4
   116a8:	31ff      	adds	r1, #255	; 0xff
   116aa:	33fc      	adds	r3, #252	; 0xfc
   116ac:	734c      	strb	r4, [r1, #13]
   116ae:	7448      	strb	r0, [r1, #17]
   116b0:	4906      	ldr	r1, [pc, #24]	; (116cc <LORAWAN_RxTimeout+0xa8>)
   116b2:	68d8      	ldr	r0, [r3, #12]
   116b4:	4790      	blx	r2
   116b6:	e7ca      	b.n	1164e <LORAWAN_RxTimeout+0x2a>
   116b8:	20003180 	.word	0x20003180
   116bc:	0001325d 	.word	0x0001325d
   116c0:	000108f1 	.word	0x000108f1
   116c4:	00011491 	.word	0x00011491
   116c8:	200034dc 	.word	0x200034dc
   116cc:	2000328c 	.word	0x2000328c

000116d0 <LorawanConfigureRadioForRX2>:
   116d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   116d2:	466b      	mov	r3, sp
   116d4:	1cdd      	adds	r5, r3, #3
   116d6:	2300      	movs	r3, #0
   116d8:	702b      	strb	r3, [r5, #0]
   116da:	2390      	movs	r3, #144	; 0x90
   116dc:	4c29      	ldr	r4, [pc, #164]	; (11784 <LorawanConfigureRadioForRX2+0xb4>)
   116de:	009b      	lsls	r3, r3, #2
   116e0:	5ce1      	ldrb	r1, [r4, r3]
   116e2:	0006      	movs	r6, r0
   116e4:	0023      	movs	r3, r4
   116e6:	2900      	cmp	r1, #0
   116e8:	d02f      	beq.n	1174a <LorawanConfigureRadioForRX2+0x7a>
   116ea:	3373      	adds	r3, #115	; 0x73
   116ec:	781b      	ldrb	r3, [r3, #0]
   116ee:	702b      	strb	r3, [r5, #0]
   116f0:	0023      	movs	r3, r4
   116f2:	6f22      	ldr	r2, [r4, #112]	; 0x70
   116f4:	336f      	adds	r3, #111	; 0x6f
   116f6:	781b      	ldrb	r3, [r3, #0]
   116f8:	0211      	lsls	r1, r2, #8
   116fa:	4319      	orrs	r1, r3
   116fc:	7828      	ldrb	r0, [r5, #0]
   116fe:	4b22      	ldr	r3, [pc, #136]	; (11788 <LorawanConfigureRadioForRX2+0xb8>)
   11700:	4798      	blx	r3
   11702:	2300      	movs	r3, #0
   11704:	0022      	movs	r2, r4
   11706:	af01      	add	r7, sp, #4
   11708:	703b      	strb	r3, [r7, #0]
   1170a:	32fd      	adds	r2, #253	; 0xfd
   1170c:	7812      	ldrb	r2, [r2, #0]
   1170e:	2a04      	cmp	r2, #4
   11710:	d130      	bne.n	11774 <LorawanConfigureRadioForRX2+0xa4>
   11712:	0022      	movs	r2, r4
   11714:	3284      	adds	r2, #132	; 0x84
   11716:	7812      	ldrb	r2, [r2, #0]
   11718:	07d2      	lsls	r2, r2, #31
   1171a:	d52b      	bpl.n	11774 <LorawanConfigureRadioForRX2+0xa4>
   1171c:	2290      	movs	r2, #144	; 0x90
   1171e:	0092      	lsls	r2, r2, #2
   11720:	5ca2      	ldrb	r2, [r4, r2]
   11722:	429a      	cmp	r2, r3
   11724:	d026      	beq.n	11774 <LorawanConfigureRadioForRX2+0xa4>
   11726:	807b      	strh	r3, [r7, #2]
   11728:	0038      	movs	r0, r7
   1172a:	4b18      	ldr	r3, [pc, #96]	; (1178c <LorawanConfigureRadioForRX2+0xbc>)
   1172c:	4798      	blx	r3
   1172e:	1e04      	subs	r4, r0, #0
   11730:	d00a      	beq.n	11748 <LorawanConfigureRadioForRX2+0x78>
   11732:	4b17      	ldr	r3, [pc, #92]	; (11790 <LorawanConfigureRadioForRX2+0xc0>)
   11734:	4798      	blx	r3
   11736:	4b17      	ldr	r3, [pc, #92]	; (11794 <LorawanConfigureRadioForRX2+0xc4>)
   11738:	4798      	blx	r3
   1173a:	4b17      	ldr	r3, [pc, #92]	; (11798 <LorawanConfigureRadioForRX2+0xc8>)
   1173c:	4798      	blx	r3
   1173e:	2e00      	cmp	r6, #0
   11740:	d002      	beq.n	11748 <LorawanConfigureRadioForRX2+0x78>
   11742:	0020      	movs	r0, r4
   11744:	4b15      	ldr	r3, [pc, #84]	; (1179c <LorawanConfigureRadioForRX2+0xcc>)
   11746:	4798      	blx	r3
   11748:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   1174a:	3394      	adds	r3, #148	; 0x94
   1174c:	781b      	ldrb	r3, [r3, #0]
   1174e:	075b      	lsls	r3, r3, #29
   11750:	d50b      	bpl.n	1176a <LorawanConfigureRadioForRX2+0x9a>
   11752:	002a      	movs	r2, r5
   11754:	2009      	movs	r0, #9
   11756:	4b12      	ldr	r3, [pc, #72]	; (117a0 <LorawanConfigureRadioForRX2+0xd0>)
   11758:	4798      	blx	r3
   1175a:	0022      	movs	r2, r4
   1175c:	0023      	movs	r3, r4
   1175e:	326c      	adds	r2, #108	; 0x6c
   11760:	8811      	ldrh	r1, [r2, #0]
   11762:	336a      	adds	r3, #106	; 0x6a
   11764:	881b      	ldrh	r3, [r3, #0]
   11766:	0409      	lsls	r1, r1, #16
   11768:	e7c7      	b.n	116fa <LorawanConfigureRadioForRX2+0x2a>
   1176a:	0023      	movs	r3, r4
   1176c:	336e      	adds	r3, #110	; 0x6e
   1176e:	781b      	ldrb	r3, [r3, #0]
   11770:	702b      	strb	r3, [r5, #0]
   11772:	e7f2      	b.n	1175a <LorawanConfigureRadioForRX2+0x8a>
   11774:	466b      	mov	r3, sp
   11776:	0029      	movs	r1, r5
   11778:	1d9a      	adds	r2, r3, #6
   1177a:	2003      	movs	r0, #3
   1177c:	4b08      	ldr	r3, [pc, #32]	; (117a0 <LorawanConfigureRadioForRX2+0xd0>)
   1177e:	4798      	blx	r3
   11780:	e7d2      	b.n	11728 <LorawanConfigureRadioForRX2+0x58>
   11782:	46c0      	nop			; (mov r8, r8)
   11784:	20003180 	.word	0x20003180
   11788:	00010dbd 	.word	0x00010dbd
   1178c:	0000f9c1 	.word	0x0000f9c1
   11790:	0001089d 	.word	0x0001089d
   11794:	000108cd 	.word	0x000108cd
   11798:	0000ffd9 	.word	0x0000ffd9
   1179c:	00011291 	.word	0x00011291
   117a0:	0000d031 	.word	0x0000d031

000117a4 <SetReceptionNotOkState>:
   117a4:	4a0c      	ldr	r2, [pc, #48]	; (117d8 <SetReceptionNotOkState+0x34>)
   117a6:	b510      	push	{r4, lr}
   117a8:	0013      	movs	r3, r2
   117aa:	33fd      	adds	r3, #253	; 0xfd
   117ac:	7819      	ldrb	r1, [r3, #0]
   117ae:	0013      	movs	r3, r2
   117b0:	4c0a      	ldr	r4, [pc, #40]	; (117dc <SetReceptionNotOkState+0x38>)
   117b2:	3384      	adds	r3, #132	; 0x84
   117b4:	2904      	cmp	r1, #4
   117b6:	d105      	bne.n	117c4 <SetReceptionNotOkState+0x20>
   117b8:	2088      	movs	r0, #136	; 0x88
   117ba:	3903      	subs	r1, #3
   117bc:	0080      	lsls	r0, r0, #2
   117be:	5411      	strb	r1, [r2, r0]
   117c0:	3020      	adds	r0, #32
   117c2:	5411      	strb	r1, [r2, r0]
   117c4:	210e      	movs	r1, #14
   117c6:	781a      	ldrb	r2, [r3, #0]
   117c8:	2000      	movs	r0, #0
   117ca:	438a      	bics	r2, r1
   117cc:	0011      	movs	r1, r2
   117ce:	220a      	movs	r2, #10
   117d0:	430a      	orrs	r2, r1
   117d2:	701a      	strb	r2, [r3, #0]
   117d4:	47a0      	blx	r4
   117d6:	bd10      	pop	{r4, pc}
   117d8:	20003180 	.word	0x20003180
   117dc:	000116d1 	.word	0x000116d1

000117e0 <LorawanProcessFcntDown>:
   117e0:	b570      	push	{r4, r5, r6, lr}
   117e2:	79c3      	ldrb	r3, [r0, #7]
   117e4:	7982      	ldrb	r2, [r0, #6]
   117e6:	4c1f      	ldr	r4, [pc, #124]	; (11864 <LorawanProcessFcntDown+0x84>)
   117e8:	021b      	lsls	r3, r3, #8
   117ea:	4313      	orrs	r3, r2
   117ec:	0022      	movs	r2, r4
   117ee:	218b      	movs	r1, #139	; 0x8b
   117f0:	328c      	adds	r2, #140	; 0x8c
   117f2:	8810      	ldrh	r0, [r2, #0]
   117f4:	0089      	lsls	r1, r1, #2
   117f6:	8013      	strh	r3, [r2, #0]
   117f8:	4298      	cmp	r0, r3
   117fa:	d80f      	bhi.n	1181c <LorawanProcessFcntDown+0x3c>
   117fc:	5c61      	ldrb	r1, [r4, r1]
   117fe:	2900      	cmp	r1, #0
   11800:	d007      	beq.n	11812 <LorawanProcessFcntDown+0x32>
   11802:	2301      	movs	r3, #1
   11804:	408b      	lsls	r3, r1
   11806:	6812      	ldr	r2, [r2, #0]
   11808:	3b01      	subs	r3, #1
   1180a:	421a      	tst	r2, r3
   1180c:	d001      	beq.n	11812 <LorawanProcessFcntDown+0x32>
   1180e:	2008      	movs	r0, #8
   11810:	bd70      	pop	{r4, r5, r6, pc}
   11812:	210a      	movs	r1, #10
   11814:	4b14      	ldr	r3, [pc, #80]	; (11868 <LorawanProcessFcntDown+0x88>)
   11816:	2001      	movs	r0, #1
   11818:	4798      	blx	r3
   1181a:	e7f8      	b.n	1180e <LorawanProcessFcntDown+0x2e>
   1181c:	0020      	movs	r0, r4
   1181e:	308e      	adds	r0, #142	; 0x8e
   11820:	8803      	ldrh	r3, [r0, #0]
   11822:	3301      	adds	r3, #1
   11824:	8003      	strh	r3, [r0, #0]
   11826:	5c61      	ldrb	r1, [r4, r1]
   11828:	2900      	cmp	r1, #0
   1182a:	d005      	beq.n	11838 <LorawanProcessFcntDown+0x58>
   1182c:	2301      	movs	r3, #1
   1182e:	408b      	lsls	r3, r1
   11830:	6812      	ldr	r2, [r2, #0]
   11832:	3b01      	subs	r3, #1
   11834:	421a      	tst	r2, r3
   11836:	d103      	bne.n	11840 <LorawanProcessFcntDown+0x60>
   11838:	210a      	movs	r1, #10
   1183a:	2001      	movs	r0, #1
   1183c:	4b0a      	ldr	r3, [pc, #40]	; (11868 <LorawanProcessFcntDown+0x88>)
   1183e:	4798      	blx	r3
   11840:	0023      	movs	r3, r4
   11842:	338c      	adds	r3, #140	; 0x8c
   11844:	681b      	ldr	r3, [r3, #0]
   11846:	3301      	adds	r3, #1
   11848:	d1e1      	bne.n	1180e <LorawanProcessFcntDown+0x2e>
   1184a:	2501      	movs	r5, #1
   1184c:	3484      	adds	r4, #132	; 0x84
   1184e:	78a3      	ldrb	r3, [r4, #2]
   11850:	432b      	orrs	r3, r5
   11852:	70a3      	strb	r3, [r4, #2]
   11854:	4b05      	ldr	r3, [pc, #20]	; (1186c <LorawanProcessFcntDown+0x8c>)
   11856:	4798      	blx	r3
   11858:	210b      	movs	r1, #11
   1185a:	0028      	movs	r0, r5
   1185c:	4b02      	ldr	r3, [pc, #8]	; (11868 <LorawanProcessFcntDown+0x88>)
   1185e:	4798      	blx	r3
   11860:	200d      	movs	r0, #13
   11862:	e7d5      	b.n	11810 <LorawanProcessFcntDown+0x30>
   11864:	20003180 	.word	0x20003180
   11868:	00009569 	.word	0x00009569
   1186c:	000117a5 	.word	0x000117a5

00011870 <UpdateCurrentDataRateAfterDataRangeChanges>:
   11870:	4b09      	ldr	r3, [pc, #36]	; (11898 <UpdateCurrentDataRateAfterDataRangeChanges+0x28>)
   11872:	001a      	movs	r2, r3
   11874:	32f4      	adds	r2, #244	; 0xf4
   11876:	7811      	ldrb	r1, [r2, #0]
   11878:	001a      	movs	r2, r3
   1187a:	32e7      	adds	r2, #231	; 0xe7
   1187c:	7810      	ldrb	r0, [r2, #0]
   1187e:	4288      	cmp	r0, r1
   11880:	d900      	bls.n	11884 <UpdateCurrentDataRateAfterDataRangeChanges+0x14>
   11882:	7011      	strb	r1, [r2, #0]
   11884:	001a      	movs	r2, r3
   11886:	33e7      	adds	r3, #231	; 0xe7
   11888:	32f3      	adds	r2, #243	; 0xf3
   1188a:	7812      	ldrb	r2, [r2, #0]
   1188c:	7819      	ldrb	r1, [r3, #0]
   1188e:	4291      	cmp	r1, r2
   11890:	d200      	bcs.n	11894 <UpdateCurrentDataRateAfterDataRangeChanges+0x24>
   11892:	701a      	strb	r2, [r3, #0]
   11894:	4770      	bx	lr
   11896:	46c0      	nop			; (mov r8, r8)
   11898:	20003180 	.word	0x20003180

0001189c <ExecuteNewChannel>:
   1189c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1189e:	b08d      	sub	sp, #52	; 0x34
   118a0:	7807      	ldrb	r7, [r0, #0]
   118a2:	ab02      	add	r3, sp, #8
   118a4:	0006      	movs	r6, r0
   118a6:	71df      	strb	r7, [r3, #7]
   118a8:	1c41      	adds	r1, r0, #1
   118aa:	4b59      	ldr	r3, [pc, #356]	; (11a10 <ExecuteNewChannel+0x174>)
   118ac:	2204      	movs	r2, #4
   118ae:	a808      	add	r0, sp, #32
   118b0:	4798      	blx	r3
   118b2:	9b08      	ldr	r3, [sp, #32]
   118b4:	4c57      	ldr	r4, [pc, #348]	; (11a14 <ExecuteNewChannel+0x178>)
   118b6:	021d      	lsls	r5, r3, #8
   118b8:	2364      	movs	r3, #100	; 0x64
   118ba:	0a2d      	lsrs	r5, r5, #8
   118bc:	435d      	muls	r5, r3
   118be:	1d73      	adds	r3, r6, #5
   118c0:	9301      	str	r3, [sp, #4]
   118c2:	0023      	movs	r3, r4
   118c4:	9508      	str	r5, [sp, #32]
   118c6:	33ff      	adds	r3, #255	; 0xff
   118c8:	781b      	ldrb	r3, [r3, #0]
   118ca:	3b02      	subs	r3, #2
   118cc:	2b01      	cmp	r3, #1
   118ce:	d800      	bhi.n	118d2 <ExecuteNewChannel+0x36>
   118d0:	e092      	b.n	119f8 <ExecuteNewChannel+0x15c>
   118d2:	7933      	ldrb	r3, [r6, #4]
   118d4:	a904      	add	r1, sp, #16
   118d6:	9300      	str	r3, [sp, #0]
   118d8:	2300      	movs	r3, #0
   118da:	2015      	movs	r0, #21
   118dc:	4e4e      	ldr	r6, [pc, #312]	; (11a18 <ExecuteNewChannel+0x17c>)
   118de:	700f      	strb	r7, [r1, #0]
   118e0:	704b      	strb	r3, [r1, #1]
   118e2:	47b0      	blx	r6
   118e4:	2808      	cmp	r0, #8
   118e6:	d12b      	bne.n	11940 <ExecuteNewChannel+0xa4>
   118e8:	466a      	mov	r2, sp
   118ea:	ab02      	add	r3, sp, #8
   118ec:	79db      	ldrb	r3, [r3, #7]
   118ee:	7812      	ldrb	r2, [r2, #0]
   118f0:	af06      	add	r7, sp, #24
   118f2:	a90a      	add	r1, sp, #40	; 0x28
   118f4:	3806      	subs	r0, #6
   118f6:	703b      	strb	r3, [r7, #0]
   118f8:	707a      	strb	r2, [r7, #1]
   118fa:	710b      	strb	r3, [r1, #4]
   118fc:	950a      	str	r5, [sp, #40]	; 0x28
   118fe:	47b0      	blx	r6
   11900:	2808      	cmp	r0, #8
   11902:	d001      	beq.n	11908 <ExecuteNewChannel+0x6c>
   11904:	2d00      	cmp	r5, #0
   11906:	d10b      	bne.n	11920 <ExecuteNewChannel+0x84>
   11908:	0023      	movs	r3, r4
   1190a:	33e0      	adds	r3, #224	; 0xe0
   1190c:	781a      	ldrb	r2, [r3, #0]
   1190e:	2303      	movs	r3, #3
   11910:	4353      	muls	r3, r2
   11912:	2280      	movs	r2, #128	; 0x80
   11914:	18e3      	adds	r3, r4, r3
   11916:	3398      	adds	r3, #152	; 0x98
   11918:	7899      	ldrb	r1, [r3, #2]
   1191a:	4252      	negs	r2, r2
   1191c:	430a      	orrs	r2, r1
   1191e:	709a      	strb	r2, [r3, #2]
   11920:	0039      	movs	r1, r7
   11922:	2012      	movs	r0, #18
   11924:	47b0      	blx	r6
   11926:	2808      	cmp	r0, #8
   11928:	d10a      	bne.n	11940 <ExecuteNewChannel+0xa4>
   1192a:	0023      	movs	r3, r4
   1192c:	33e0      	adds	r3, #224	; 0xe0
   1192e:	781a      	ldrb	r2, [r3, #0]
   11930:	2303      	movs	r3, #3
   11932:	4353      	muls	r3, r2
   11934:	2240      	movs	r2, #64	; 0x40
   11936:	18e3      	adds	r3, r4, r3
   11938:	3398      	adds	r3, #152	; 0x98
   1193a:	7899      	ldrb	r1, [r3, #2]
   1193c:	430a      	orrs	r2, r1
   1193e:	709a      	strb	r2, [r3, #2]
   11940:	0023      	movs	r3, r4
   11942:	33e0      	adds	r3, #224	; 0xe0
   11944:	781a      	ldrb	r2, [r3, #0]
   11946:	2303      	movs	r3, #3
   11948:	4353      	muls	r3, r2
   1194a:	18e3      	adds	r3, r4, r3
   1194c:	3398      	adds	r3, #152	; 0x98
   1194e:	789b      	ldrb	r3, [r3, #2]
   11950:	09da      	lsrs	r2, r3, #7
   11952:	2a01      	cmp	r2, #1
   11954:	d150      	bne.n	119f8 <ExecuteNewChannel+0x15c>
   11956:	065b      	lsls	r3, r3, #25
   11958:	d54e      	bpl.n	119f8 <ExecuteNewChannel+0x15c>
   1195a:	4e30      	ldr	r6, [pc, #192]	; (11a1c <ExecuteNewChannel+0x180>)
   1195c:	2d00      	cmp	r5, #0
   1195e:	d04e      	beq.n	119fe <ExecuteNewChannel+0x162>
   11960:	a906      	add	r1, sp, #24
   11962:	2012      	movs	r0, #18
   11964:	47b0      	blx	r6
   11966:	ad07      	add	r5, sp, #28
   11968:	a90a      	add	r1, sp, #40	; 0x28
   1196a:	2000      	movs	r0, #0
   1196c:	47b0      	blx	r6
   1196e:	002a      	movs	r2, r5
   11970:	2100      	movs	r1, #0
   11972:	2014      	movs	r0, #20
   11974:	4f2a      	ldr	r7, [pc, #168]	; (11a20 <ExecuteNewChannel+0x184>)
   11976:	47b8      	blx	r7
   11978:	0023      	movs	r3, r4
   1197a:	782a      	ldrb	r2, [r5, #0]
   1197c:	33f3      	adds	r3, #243	; 0xf3
   1197e:	701a      	strb	r2, [r3, #0]
   11980:	0023      	movs	r3, r4
   11982:	786a      	ldrb	r2, [r5, #1]
   11984:	33f4      	adds	r3, #244	; 0xf4
   11986:	701a      	strb	r2, [r3, #0]
   11988:	34ff      	adds	r4, #255	; 0xff
   1198a:	4b26      	ldr	r3, [pc, #152]	; (11a24 <ExecuteNewChannel+0x188>)
   1198c:	4798      	blx	r3
   1198e:	7f63      	ldrb	r3, [r4, #29]
   11990:	079b      	lsls	r3, r3, #30
   11992:	d50e      	bpl.n	119b2 <ExecuteNewChannel+0x116>
   11994:	2416      	movs	r4, #22
   11996:	ab02      	add	r3, sp, #8
   11998:	18e4      	adds	r4, r4, r3
   1199a:	1dd9      	adds	r1, r3, #7
   1199c:	0022      	movs	r2, r4
   1199e:	201e      	movs	r0, #30
   119a0:	47b8      	blx	r7
   119a2:	ab02      	add	r3, sp, #8
   119a4:	79db      	ldrb	r3, [r3, #7]
   119a6:	a909      	add	r1, sp, #36	; 0x24
   119a8:	708b      	strb	r3, [r1, #2]
   119aa:	8823      	ldrh	r3, [r4, #0]
   119ac:	201e      	movs	r0, #30
   119ae:	800b      	strh	r3, [r1, #0]
   119b0:	47b0      	blx	r6
   119b2:	ab02      	add	r3, sp, #8
   119b4:	79db      	ldrb	r3, [r3, #7]
   119b6:	a905      	add	r1, sp, #20
   119b8:	700b      	strb	r3, [r1, #0]
   119ba:	2301      	movs	r3, #1
   119bc:	2016      	movs	r0, #22
   119be:	704b      	strb	r3, [r1, #1]
   119c0:	4b16      	ldr	r3, [pc, #88]	; (11a1c <ExecuteNewChannel+0x180>)
   119c2:	4798      	blx	r3
   119c4:	ad09      	add	r5, sp, #36	; 0x24
   119c6:	2100      	movs	r1, #0
   119c8:	002a      	movs	r2, r5
   119ca:	4b15      	ldr	r3, [pc, #84]	; (11a20 <ExecuteNewChannel+0x184>)
   119cc:	2014      	movs	r0, #20
   119ce:	4798      	blx	r3
   119d0:	4c10      	ldr	r4, [pc, #64]	; (11a14 <ExecuteNewChannel+0x178>)
   119d2:	782a      	ldrb	r2, [r5, #0]
   119d4:	0023      	movs	r3, r4
   119d6:	33f3      	adds	r3, #243	; 0xf3
   119d8:	701a      	strb	r2, [r3, #0]
   119da:	0023      	movs	r3, r4
   119dc:	786a      	ldrb	r2, [r5, #1]
   119de:	33f4      	adds	r3, #244	; 0xf4
   119e0:	701a      	strb	r2, [r3, #0]
   119e2:	4b10      	ldr	r3, [pc, #64]	; (11a24 <ExecuteNewChannel+0x188>)
   119e4:	4798      	blx	r3
   119e6:	2304      	movs	r3, #4
   119e8:	3484      	adds	r4, #132	; 0x84
   119ea:	7862      	ldrb	r2, [r4, #1]
   119ec:	210b      	movs	r1, #11
   119ee:	4313      	orrs	r3, r2
   119f0:	7063      	strb	r3, [r4, #1]
   119f2:	2001      	movs	r0, #1
   119f4:	4b0c      	ldr	r3, [pc, #48]	; (11a28 <ExecuteNewChannel+0x18c>)
   119f6:	4798      	blx	r3
   119f8:	9801      	ldr	r0, [sp, #4]
   119fa:	b00d      	add	sp, #52	; 0x34
   119fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   119fe:	ab02      	add	r3, sp, #8
   11a00:	79db      	ldrb	r3, [r3, #7]
   11a02:	a905      	add	r1, sp, #20
   11a04:	2016      	movs	r0, #22
   11a06:	700b      	strb	r3, [r1, #0]
   11a08:	704d      	strb	r5, [r1, #1]
   11a0a:	47b0      	blx	r6
   11a0c:	e7da      	b.n	119c4 <ExecuteNewChannel+0x128>
   11a0e:	46c0      	nop			; (mov r8, r8)
   11a10:	00016c47 	.word	0x00016c47
   11a14:	20003180 	.word	0x20003180
   11a18:	0000d04d 	.word	0x0000d04d
   11a1c:	0000d069 	.word	0x0000d069
   11a20:	0000d031 	.word	0x0000d031
   11a24:	00011871 	.word	0x00011871
   11a28:	00009569 	.word	0x00009569

00011a2c <MacExecuteCommands>:
   11a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   11a2e:	1843      	adds	r3, r0, r1
   11a30:	b087      	sub	sp, #28
   11a32:	9301      	str	r3, [sp, #4]
   11a34:	2300      	movs	r3, #0
   11a36:	0007      	movs	r7, r0
   11a38:	2501      	movs	r5, #1
   11a3a:	9302      	str	r3, [sp, #8]
   11a3c:	9b01      	ldr	r3, [sp, #4]
   11a3e:	4e71      	ldr	r6, [pc, #452]	; (11c04 <MacExecuteCommands+0x1d8>)
   11a40:	429f      	cmp	r7, r3
   11a42:	d362      	bcc.n	11b0a <MacExecuteCommands+0xde>
   11a44:	4b70      	ldr	r3, [pc, #448]	; (11c08 <MacExecuteCommands+0x1dc>)
   11a46:	5cf3      	ldrb	r3, [r6, r3]
   11a48:	2b00      	cmp	r3, #0
   11a4a:	d000      	beq.n	11a4e <MacExecuteCommands+0x22>
   11a4c:	e08f      	b.n	11b6e <MacExecuteCommands+0x142>
   11a4e:	0038      	movs	r0, r7
   11a50:	b007      	add	sp, #28
   11a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11a54:	0032      	movs	r2, r6
   11a56:	7879      	ldrb	r1, [r7, #1]
   11a58:	32e5      	adds	r2, #229	; 0xe5
   11a5a:	7011      	strb	r1, [r2, #0]
   11a5c:	0032      	movs	r2, r6
   11a5e:	78b9      	ldrb	r1, [r7, #2]
   11a60:	32e6      	adds	r2, #230	; 0xe6
   11a62:	1cfc      	adds	r4, r7, #3
   11a64:	7011      	strb	r1, [r2, #0]
   11a66:	2203      	movs	r2, #3
   11a68:	4353      	muls	r3, r2
   11a6a:	18f3      	adds	r3, r6, r3
   11a6c:	3399      	adds	r3, #153	; 0x99
   11a6e:	32fc      	adds	r2, #252	; 0xfc
   11a70:	701a      	strb	r2, [r3, #0]
   11a72:	e020      	b.n	11ab6 <MacExecuteCommands+0x8a>
   11a74:	0020      	movs	r0, r4
   11a76:	4b65      	ldr	r3, [pc, #404]	; (11c0c <MacExecuteCommands+0x1e0>)
   11a78:	4798      	blx	r3
   11a7a:	0004      	movs	r4, r0
   11a7c:	e01b      	b.n	11ab6 <MacExecuteCommands+0x8a>
   11a7e:	0020      	movs	r0, r4
   11a80:	4b63      	ldr	r3, [pc, #396]	; (11c10 <MacExecuteCommands+0x1e4>)
   11a82:	e7f9      	b.n	11a78 <MacExecuteCommands+0x4c>
   11a84:	0020      	movs	r0, r4
   11a86:	4b63      	ldr	r3, [pc, #396]	; (11c14 <MacExecuteCommands+0x1e8>)
   11a88:	e7f6      	b.n	11a78 <MacExecuteCommands+0x4c>
   11a8a:	0020      	movs	r0, r4
   11a8c:	4b62      	ldr	r3, [pc, #392]	; (11c18 <MacExecuteCommands+0x1ec>)
   11a8e:	e7f3      	b.n	11a78 <MacExecuteCommands+0x4c>
   11a90:	7878      	ldrb	r0, [r7, #1]
   11a92:	230f      	movs	r3, #15
   11a94:	0002      	movs	r2, r0
   11a96:	1cbc      	adds	r4, r7, #2
   11a98:	439a      	bics	r2, r3
   11a9a:	d10c      	bne.n	11ab6 <MacExecuteCommands+0x8a>
   11a9c:	4b5f      	ldr	r3, [pc, #380]	; (11c1c <MacExecuteCommands+0x1f0>)
   11a9e:	4798      	blx	r3
   11aa0:	0032      	movs	r2, r6
   11aa2:	2380      	movs	r3, #128	; 0x80
   11aa4:	3284      	adds	r2, #132	; 0x84
   11aa6:	7851      	ldrb	r1, [r2, #1]
   11aa8:	425b      	negs	r3, r3
   11aaa:	430b      	orrs	r3, r1
   11aac:	7053      	strb	r3, [r2, #1]
   11aae:	210b      	movs	r1, #11
   11ab0:	0028      	movs	r0, r5
   11ab2:	4b5b      	ldr	r3, [pc, #364]	; (11c20 <MacExecuteCommands+0x1f4>)
   11ab4:	4798      	blx	r3
   11ab6:	0032      	movs	r2, r6
   11ab8:	2103      	movs	r1, #3
   11aba:	32e0      	adds	r2, #224	; 0xe0
   11abc:	7813      	ldrb	r3, [r2, #0]
   11abe:	4359      	muls	r1, r3
   11ac0:	1876      	adds	r6, r6, r1
   11ac2:	3699      	adds	r6, #153	; 0x99
   11ac4:	7831      	ldrb	r1, [r6, #0]
   11ac6:	29ff      	cmp	r1, #255	; 0xff
   11ac8:	d003      	beq.n	11ad2 <MacExecuteCommands+0xa6>
   11aca:	2b0f      	cmp	r3, #15
   11acc:	d801      	bhi.n	11ad2 <MacExecuteCommands+0xa6>
   11ace:	3301      	adds	r3, #1
   11ad0:	7013      	strb	r3, [r2, #0]
   11ad2:	0027      	movs	r7, r4
   11ad4:	e7b2      	b.n	11a3c <MacExecuteCommands+0x10>
   11ad6:	0020      	movs	r0, r4
   11ad8:	4b52      	ldr	r3, [pc, #328]	; (11c24 <MacExecuteCommands+0x1f8>)
   11ada:	e7cd      	b.n	11a78 <MacExecuteCommands+0x4c>
   11adc:	0020      	movs	r0, r4
   11ade:	4b52      	ldr	r3, [pc, #328]	; (11c28 <MacExecuteCommands+0x1fc>)
   11ae0:	e7ca      	b.n	11a78 <MacExecuteCommands+0x4c>
   11ae2:	0020      	movs	r0, r4
   11ae4:	4b51      	ldr	r3, [pc, #324]	; (11c2c <MacExecuteCommands+0x200>)
   11ae6:	4798      	blx	r3
   11ae8:	0033      	movs	r3, r6
   11aea:	33e0      	adds	r3, #224	; 0xe0
   11aec:	0004      	movs	r4, r0
   11aee:	781b      	ldrb	r3, [r3, #0]
   11af0:	e7b9      	b.n	11a66 <MacExecuteCommands+0x3a>
   11af2:	2203      	movs	r2, #3
   11af4:	4353      	muls	r3, r2
   11af6:	18f3      	adds	r3, r6, r3
   11af8:	3399      	adds	r3, #153	; 0x99
   11afa:	32fc      	adds	r2, #252	; 0xfc
   11afc:	701a      	strb	r2, [r3, #0]
   11afe:	9c01      	ldr	r4, [sp, #4]
   11b00:	9502      	str	r5, [sp, #8]
   11b02:	e7d8      	b.n	11ab6 <MacExecuteCommands+0x8a>
   11b04:	23ff      	movs	r3, #255	; 0xff
   11b06:	7013      	strb	r3, [r2, #0]
   11b08:	e7f9      	b.n	11afe <MacExecuteCommands+0xd2>
   11b0a:	9b02      	ldr	r3, [sp, #8]
   11b0c:	2b00      	cmp	r3, #0
   11b0e:	d199      	bne.n	11a44 <MacExecuteCommands+0x18>
   11b10:	0033      	movs	r3, r6
   11b12:	2203      	movs	r2, #3
   11b14:	33e0      	adds	r3, #224	; 0xe0
   11b16:	781b      	ldrb	r3, [r3, #0]
   11b18:	2401      	movs	r4, #1
   11b1a:	435a      	muls	r2, r3
   11b1c:	18b2      	adds	r2, r6, r2
   11b1e:	0010      	movs	r0, r2
   11b20:	3098      	adds	r0, #152	; 0x98
   11b22:	7881      	ldrb	r1, [r0, #2]
   11b24:	3299      	adds	r2, #153	; 0x99
   11b26:	43a9      	bics	r1, r5
   11b28:	4021      	ands	r1, r4
   11b2a:	7081      	strb	r1, [r0, #2]
   11b2c:	78c1      	ldrb	r1, [r0, #3]
   11b2e:	193c      	adds	r4, r7, r4
   11b30:	43a9      	bics	r1, r5
   11b32:	70c1      	strb	r1, [r0, #3]
   11b34:	7839      	ldrb	r1, [r7, #0]
   11b36:	7011      	strb	r1, [r2, #0]
   11b38:	7838      	ldrb	r0, [r7, #0]
   11b3a:	493d      	ldr	r1, [pc, #244]	; (11c30 <MacExecuteCommands+0x204>)
   11b3c:	1809      	adds	r1, r1, r0
   11b3e:	3902      	subs	r1, #2
   11b40:	7809      	ldrb	r1, [r1, #0]
   11b42:	1861      	adds	r1, r4, r1
   11b44:	468c      	mov	ip, r1
   11b46:	9901      	ldr	r1, [sp, #4]
   11b48:	4561      	cmp	r1, ip
   11b4a:	d3db      	bcc.n	11b04 <MacExecuteCommands+0xd8>
   11b4c:	3802      	subs	r0, #2
   11b4e:	280b      	cmp	r0, #11
   11b50:	d8cf      	bhi.n	11af2 <MacExecuteCommands+0xc6>
   11b52:	f001 ff33 	bl	139bc <__gnu_thumb1_case_shi>
   11b56:	ff7f      	.short	0xff7f
   11b58:	ff94ff8f 	.word	0xff94ff8f
   11b5c:	ffb0ff97 	.word	0xffb0ff97
   11b60:	ff9dff9a 	.word	0xff9dff9a
   11b64:	ffc3ffc0 	.word	0xffc3ffc0
   11b68:	ffceffce 	.word	0xffceffce
   11b6c:	ffc6      	.short	0xffc6
   11b6e:	4b31      	ldr	r3, [pc, #196]	; (11c34 <MacExecuteCommands+0x208>)
   11b70:	5cf3      	ldrb	r3, [r6, r3]
   11b72:	43db      	mvns	r3, r3
   11b74:	075b      	lsls	r3, r3, #29
   11b76:	d000      	beq.n	11b7a <MacExecuteCommands+0x14e>
   11b78:	e769      	b.n	11a4e <MacExecuteCommands+0x22>
   11b7a:	4b2f      	ldr	r3, [pc, #188]	; (11c38 <MacExecuteCommands+0x20c>)
   11b7c:	ad05      	add	r5, sp, #20
   11b7e:	5cf4      	ldrb	r4, [r6, r3]
   11b80:	2100      	movs	r1, #0
   11b82:	0724      	lsls	r4, r4, #28
   11b84:	0f24      	lsrs	r4, r4, #28
   11b86:	b2e3      	uxtb	r3, r4
   11b88:	9301      	str	r3, [sp, #4]
   11b8a:	4b2c      	ldr	r3, [pc, #176]	; (11c3c <MacExecuteCommands+0x210>)
   11b8c:	002a      	movs	r2, r5
   11b8e:	5cf3      	ldrb	r3, [r6, r3]
   11b90:	2014      	movs	r0, #20
   11b92:	9302      	str	r3, [sp, #8]
   11b94:	2389      	movs	r3, #137	; 0x89
   11b96:	009b      	lsls	r3, r3, #2
   11b98:	5cf3      	ldrb	r3, [r6, r3]
   11b9a:	9303      	str	r3, [sp, #12]
   11b9c:	4b28      	ldr	r3, [pc, #160]	; (11c40 <MacExecuteCommands+0x214>)
   11b9e:	4798      	blx	r3
   11ba0:	0033      	movs	r3, r6
   11ba2:	782a      	ldrb	r2, [r5, #0]
   11ba4:	33f3      	adds	r3, #243	; 0xf3
   11ba6:	701a      	strb	r2, [r3, #0]
   11ba8:	0033      	movs	r3, r6
   11baa:	786a      	ldrb	r2, [r5, #1]
   11bac:	33f4      	adds	r3, #244	; 0xf4
   11bae:	701a      	strb	r2, [r3, #0]
   11bb0:	4b24      	ldr	r3, [pc, #144]	; (11c44 <MacExecuteCommands+0x218>)
   11bb2:	4798      	blx	r3
   11bb4:	9802      	ldr	r0, [sp, #8]
   11bb6:	4b24      	ldr	r3, [pc, #144]	; (11c48 <MacExecuteCommands+0x21c>)
   11bb8:	4798      	blx	r3
   11bba:	0032      	movs	r2, r6
   11bbc:	2308      	movs	r3, #8
   11bbe:	3284      	adds	r2, #132	; 0x84
   11bc0:	7851      	ldrb	r1, [r2, #1]
   11bc2:	430b      	orrs	r3, r1
   11bc4:	7053      	strb	r3, [r2, #1]
   11bc6:	9803      	ldr	r0, [sp, #12]
   11bc8:	4b20      	ldr	r3, [pc, #128]	; (11c4c <MacExecuteCommands+0x220>)
   11bca:	4798      	blx	r3
   11bcc:	0033      	movs	r3, r6
   11bce:	b2e2      	uxtb	r2, r4
   11bd0:	33e1      	adds	r3, #225	; 0xe1
   11bd2:	2a00      	cmp	r2, #0
   11bd4:	d10e      	bne.n	11bf4 <MacExecuteCommands+0x1c8>
   11bd6:	701c      	strb	r4, [r3, #0]
   11bd8:	2113      	movs	r1, #19
   11bda:	4c11      	ldr	r4, [pc, #68]	; (11c20 <MacExecuteCommands+0x1f4>)
   11bdc:	2000      	movs	r0, #0
   11bde:	47a0      	blx	r4
   11be0:	2210      	movs	r2, #16
   11be2:	4b08      	ldr	r3, [pc, #32]	; (11c04 <MacExecuteCommands+0x1d8>)
   11be4:	2001      	movs	r0, #1
   11be6:	3384      	adds	r3, #132	; 0x84
   11be8:	7859      	ldrb	r1, [r3, #1]
   11bea:	430a      	orrs	r2, r1
   11bec:	705a      	strb	r2, [r3, #1]
   11bee:	210b      	movs	r1, #11
   11bf0:	47a0      	blx	r4
   11bf2:	e72c      	b.n	11a4e <MacExecuteCommands+0x22>
   11bf4:	9a01      	ldr	r2, [sp, #4]
   11bf6:	3a01      	subs	r2, #1
   11bf8:	b2d2      	uxtb	r2, r2
   11bfa:	701a      	strb	r2, [r3, #0]
   11bfc:	0033      	movs	r3, r6
   11bfe:	33e2      	adds	r3, #226	; 0xe2
   11c00:	701a      	strb	r2, [r3, #0]
   11c02:	e7e9      	b.n	11bd8 <MacExecuteCommands+0x1ac>
   11c04:	20003180 	.word	0x20003180
   11c08:	00000226 	.word	0x00000226
   11c0c:	00010b8d 	.word	0x00010b8d
   11c10:	00010a51 	.word	0x00010a51
   11c14:	00010955 	.word	0x00010955
   11c18:	0001189d 	.word	0x0001189d
   11c1c:	00010081 	.word	0x00010081
   11c20:	00009569 	.word	0x00009569
   11c24:	00010b3d 	.word	0x00010b3d
   11c28:	00010a89 	.word	0x00010a89
   11c2c:	00010cc5 	.word	0x00010cc5
   11c30:	00019087 	.word	0x00019087
   11c34:	00000223 	.word	0x00000223
   11c38:	00000229 	.word	0x00000229
   11c3c:	00000225 	.word	0x00000225
   11c40:	0000d031 	.word	0x0000d031
   11c44:	00011871 	.word	0x00011871
   11c48:	000107e5 	.word	0x000107e5
   11c4c:	00010779 	.word	0x00010779

00011c50 <LorawanSetDataRange>:
   11c50:	2201      	movs	r2, #1
   11c52:	b530      	push	{r4, r5, lr}
   11c54:	b085      	sub	sp, #20
   11c56:	ab01      	add	r3, sp, #4
   11c58:	ac02      	add	r4, sp, #8
   11c5a:	7018      	strb	r0, [r3, #0]
   11c5c:	7020      	strb	r0, [r4, #0]
   11c5e:	7061      	strb	r1, [r4, #1]
   11c60:	2015      	movs	r0, #21
   11c62:	0019      	movs	r1, r3
   11c64:	4d11      	ldr	r5, [pc, #68]	; (11cac <LorawanSetDataRange+0x5c>)
   11c66:	705a      	strb	r2, [r3, #1]
   11c68:	47a8      	blx	r5
   11c6a:	2808      	cmp	r0, #8
   11c6c:	d003      	beq.n	11c76 <LorawanSetDataRange+0x26>
   11c6e:	250a      	movs	r5, #10
   11c70:	0028      	movs	r0, r5
   11c72:	b005      	add	sp, #20
   11c74:	bd30      	pop	{r4, r5, pc}
   11c76:	0021      	movs	r1, r4
   11c78:	2012      	movs	r0, #18
   11c7a:	47a8      	blx	r5
   11c7c:	0005      	movs	r5, r0
   11c7e:	2808      	cmp	r0, #8
   11c80:	d1f5      	bne.n	11c6e <LorawanSetDataRange+0x1e>
   11c82:	0021      	movs	r1, r4
   11c84:	4b0a      	ldr	r3, [pc, #40]	; (11cb0 <LorawanSetDataRange+0x60>)
   11c86:	ac03      	add	r4, sp, #12
   11c88:	2012      	movs	r0, #18
   11c8a:	4798      	blx	r3
   11c8c:	0022      	movs	r2, r4
   11c8e:	2100      	movs	r1, #0
   11c90:	4b08      	ldr	r3, [pc, #32]	; (11cb4 <LorawanSetDataRange+0x64>)
   11c92:	2014      	movs	r0, #20
   11c94:	4798      	blx	r3
   11c96:	4b08      	ldr	r3, [pc, #32]	; (11cb8 <LorawanSetDataRange+0x68>)
   11c98:	7821      	ldrb	r1, [r4, #0]
   11c9a:	001a      	movs	r2, r3
   11c9c:	32f3      	adds	r2, #243	; 0xf3
   11c9e:	7011      	strb	r1, [r2, #0]
   11ca0:	7862      	ldrb	r2, [r4, #1]
   11ca2:	33f4      	adds	r3, #244	; 0xf4
   11ca4:	701a      	strb	r2, [r3, #0]
   11ca6:	4b05      	ldr	r3, [pc, #20]	; (11cbc <LorawanSetDataRange+0x6c>)
   11ca8:	4798      	blx	r3
   11caa:	e7e1      	b.n	11c70 <LorawanSetDataRange+0x20>
   11cac:	0000d04d 	.word	0x0000d04d
   11cb0:	0000d069 	.word	0x0000d069
   11cb4:	0000d031 	.word	0x0000d031
   11cb8:	20003180 	.word	0x20003180
   11cbc:	00011871 	.word	0x00011871

00011cc0 <LorawanSetChannelIdStatus>:
   11cc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11cc2:	466b      	mov	r3, sp
   11cc4:	7018      	strb	r0, [r3, #0]
   11cc6:	7059      	strb	r1, [r3, #1]
   11cc8:	2016      	movs	r0, #22
   11cca:	4669      	mov	r1, sp
   11ccc:	4b0c      	ldr	r3, [pc, #48]	; (11d00 <LorawanSetChannelIdStatus+0x40>)
   11cce:	4798      	blx	r3
   11cd0:	0004      	movs	r4, r0
   11cd2:	2808      	cmp	r0, #8
   11cd4:	d111      	bne.n	11cfa <LorawanSetChannelIdStatus+0x3a>
   11cd6:	ad01      	add	r5, sp, #4
   11cd8:	002a      	movs	r2, r5
   11cda:	2100      	movs	r1, #0
   11cdc:	4b09      	ldr	r3, [pc, #36]	; (11d04 <LorawanSetChannelIdStatus+0x44>)
   11cde:	2014      	movs	r0, #20
   11ce0:	4798      	blx	r3
   11ce2:	4b09      	ldr	r3, [pc, #36]	; (11d08 <LorawanSetChannelIdStatus+0x48>)
   11ce4:	7829      	ldrb	r1, [r5, #0]
   11ce6:	001a      	movs	r2, r3
   11ce8:	32f3      	adds	r2, #243	; 0xf3
   11cea:	7011      	strb	r1, [r2, #0]
   11cec:	786a      	ldrb	r2, [r5, #1]
   11cee:	33f4      	adds	r3, #244	; 0xf4
   11cf0:	701a      	strb	r2, [r3, #0]
   11cf2:	4b06      	ldr	r3, [pc, #24]	; (11d0c <LorawanSetChannelIdStatus+0x4c>)
   11cf4:	4798      	blx	r3
   11cf6:	0020      	movs	r0, r4
   11cf8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   11cfa:	240a      	movs	r4, #10
   11cfc:	e7fb      	b.n	11cf6 <LorawanSetChannelIdStatus+0x36>
   11cfe:	46c0      	nop			; (mov r8, r8)
   11d00:	0000d069 	.word	0x0000d069
   11d04:	0000d031 	.word	0x0000d031
   11d08:	20003180 	.word	0x20003180
   11d0c:	00011871 	.word	0x00011871

00011d10 <LORAWAN_RxDone>:
   11d10:	b5f0      	push	{r4, r5, r6, r7, lr}
   11d12:	4bc4      	ldr	r3, [pc, #784]	; (12024 <LORAWAN_RxDone+0x314>)
   11d14:	b093      	sub	sp, #76	; 0x4c
   11d16:	781b      	ldrb	r3, [r3, #0]
   11d18:	0007      	movs	r7, r0
   11d1a:	b25a      	sxtb	r2, r3
   11d1c:	9106      	str	r1, [sp, #24]
   11d1e:	4cc2      	ldr	r4, [pc, #776]	; (12028 <LORAWAN_RxDone+0x318>)
   11d20:	2a00      	cmp	r2, #0
   11d22:	da01      	bge.n	11d28 <LORAWAN_RxDone+0x18>
   11d24:	f000 fc86 	bl	12634 <LORAWAN_RxDone+0x924>
   11d28:	7801      	ldrb	r1, [r0, #0]
   11d2a:	221f      	movs	r2, #31
   11d2c:	000e      	movs	r6, r1
   11d2e:	4396      	bics	r6, r2
   11d30:	2e20      	cmp	r6, #32
   11d32:	d000      	beq.n	11d36 <LORAWAN_RxDone+0x26>
   11d34:	e1ae      	b.n	12094 <LORAWAN_RxDone+0x384>
   11d36:	7822      	ldrb	r2, [r4, #0]
   11d38:	2a00      	cmp	r2, #0
   11d3a:	d001      	beq.n	11d40 <LORAWAN_RxDone+0x30>
   11d3c:	f000 fc66 	bl	1260c <LORAWAN_RxDone+0x8fc>
   11d40:	0022      	movs	r2, r4
   11d42:	3294      	adds	r2, #148	; 0x94
   11d44:	7812      	ldrb	r2, [r2, #0]
   11d46:	0752      	lsls	r2, r2, #29
   11d48:	d401      	bmi.n	11d4e <LORAWAN_RxDone+0x3e>
   11d4a:	f000 fc5f 	bl	1260c <LORAWAN_RxDone+0x8fc>
   11d4e:	9b06      	ldr	r3, [sp, #24]
   11d50:	3b01      	subs	r3, #1
   11d52:	b2db      	uxtb	r3, r3
   11d54:	9307      	str	r3, [sp, #28]
   11d56:	4bb5      	ldr	r3, [pc, #724]	; (1202c <LORAWAN_RxDone+0x31c>)
   11d58:	469c      	mov	ip, r3
   11d5a:	9b07      	ldr	r3, [sp, #28]
   11d5c:	2b00      	cmp	r3, #0
   11d5e:	d12c      	bne.n	11dba <LORAWAN_RxDone+0xaa>
   11d60:	9b06      	ldr	r3, [sp, #24]
   11d62:	4660      	mov	r0, ip
   11d64:	1f1d      	subs	r5, r3, #4
   11d66:	b2eb      	uxtb	r3, r5
   11d68:	9300      	str	r3, [sp, #0]
   11d6a:	4ab1      	ldr	r2, [pc, #708]	; (12030 <LORAWAN_RxDone+0x320>)
   11d6c:	003b      	movs	r3, r7
   11d6e:	9907      	ldr	r1, [sp, #28]
   11d70:	4eb0      	ldr	r6, [pc, #704]	; (12034 <LORAWAN_RxDone+0x324>)
   11d72:	47b0      	blx	r6
   11d74:	2204      	movs	r2, #4
   11d76:	49ae      	ldr	r1, [pc, #696]	; (12030 <LORAWAN_RxDone+0x320>)
   11d78:	4baf      	ldr	r3, [pc, #700]	; (12038 <LORAWAN_RxDone+0x328>)
   11d7a:	a810      	add	r0, sp, #64	; 0x40
   11d7c:	4798      	blx	r3
   11d7e:	9e10      	ldr	r6, [sp, #64]	; 0x40
   11d80:	1979      	adds	r1, r7, r5
   11d82:	2204      	movs	r2, #4
   11d84:	4bac      	ldr	r3, [pc, #688]	; (12038 <LORAWAN_RxDone+0x328>)
   11d86:	a810      	add	r0, sp, #64	; 0x40
   11d88:	960d      	str	r6, [sp, #52]	; 0x34
   11d8a:	4798      	blx	r3
   11d8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11d8e:	4ba6      	ldr	r3, [pc, #664]	; (12028 <LORAWAN_RxDone+0x318>)
   11d90:	210e      	movs	r1, #14
   11d92:	42b2      	cmp	r2, r6
   11d94:	d029      	beq.n	11dea <LORAWAN_RxDone+0xda>
   11d96:	001a      	movs	r2, r3
   11d98:	3284      	adds	r2, #132	; 0x84
   11d9a:	7812      	ldrb	r2, [r2, #0]
   11d9c:	400a      	ands	r2, r1
   11d9e:	2a0a      	cmp	r2, #10
   11da0:	d005      	beq.n	11dae <LORAWAN_RxDone+0x9e>
   11da2:	2a06      	cmp	r2, #6
   11da4:	d106      	bne.n	11db4 <LORAWAN_RxDone+0xa4>
   11da6:	33f9      	adds	r3, #249	; 0xf9
   11da8:	781b      	ldrb	r3, [r3, #0]
   11daa:	2b00      	cmp	r3, #0
   11dac:	d002      	beq.n	11db4 <LORAWAN_RxDone+0xa4>
   11dae:	2018      	movs	r0, #24
   11db0:	4ba2      	ldr	r3, [pc, #648]	; (1203c <LORAWAN_RxDone+0x32c>)
   11db2:	4798      	blx	r3
   11db4:	4ba2      	ldr	r3, [pc, #648]	; (12040 <LORAWAN_RxDone+0x330>)
   11db6:	4798      	blx	r3
   11db8:	e1d0      	b.n	1215c <LORAWAN_RxDone+0x44c>
   11dba:	9b06      	ldr	r3, [sp, #24]
   11dbc:	9a07      	ldr	r2, [sp, #28]
   11dbe:	2100      	movs	r1, #0
   11dc0:	1a98      	subs	r0, r3, r2
   11dc2:	1838      	adds	r0, r7, r0
   11dc4:	4662      	mov	r2, ip
   11dc6:	4b9f      	ldr	r3, [pc, #636]	; (12044 <LORAWAN_RxDone+0x334>)
   11dc8:	4798      	blx	r3
   11dca:	2800      	cmp	r0, #0
   11dcc:	d006      	beq.n	11ddc <LORAWAN_RxDone+0xcc>
   11dce:	4b9b      	ldr	r3, [pc, #620]	; (1203c <LORAWAN_RxDone+0x32c>)
   11dd0:	4798      	blx	r3
   11dd2:	4b9b      	ldr	r3, [pc, #620]	; (12040 <LORAWAN_RxDone+0x330>)
   11dd4:	4798      	blx	r3
   11dd6:	201f      	movs	r0, #31
   11dd8:	b013      	add	sp, #76	; 0x4c
   11dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11ddc:	9b07      	ldr	r3, [sp, #28]
   11dde:	2b10      	cmp	r3, #16
   11de0:	d901      	bls.n	11de6 <LORAWAN_RxDone+0xd6>
   11de2:	3b10      	subs	r3, #16
   11de4:	e7b5      	b.n	11d52 <LORAWAN_RxDone+0x42>
   11de6:	9007      	str	r0, [sp, #28]
   11de8:	e7b5      	b.n	11d56 <LORAWAN_RxDone+0x46>
   11dea:	001a      	movs	r2, r3
   11dec:	3284      	adds	r2, #132	; 0x84
   11dee:	7812      	ldrb	r2, [r2, #0]
   11df0:	400a      	ands	r2, r1
   11df2:	2a06      	cmp	r2, #6
   11df4:	d103      	bne.n	11dfe <LORAWAN_RxDone+0xee>
   11df6:	33ec      	adds	r3, #236	; 0xec
   11df8:	7818      	ldrb	r0, [r3, #0]
   11dfa:	4b93      	ldr	r3, [pc, #588]	; (12048 <LORAWAN_RxDone+0x338>)
   11dfc:	4798      	blx	r3
   11dfe:	7a3a      	ldrb	r2, [r7, #8]
   11e00:	79fb      	ldrb	r3, [r7, #7]
   11e02:	0212      	lsls	r2, r2, #8
   11e04:	431a      	orrs	r2, r3
   11e06:	7a7b      	ldrb	r3, [r7, #9]
   11e08:	2001      	movs	r0, #1
   11e0a:	041b      	lsls	r3, r3, #16
   11e0c:	431a      	orrs	r2, r3
   11e0e:	7abb      	ldrb	r3, [r7, #10]
   11e10:	061b      	lsls	r3, r3, #24
   11e12:	4313      	orrs	r3, r2
   11e14:	0a19      	lsrs	r1, r3, #8
   11e16:	7063      	strb	r3, [r4, #1]
   11e18:	70a1      	strb	r1, [r4, #2]
   11e1a:	0c19      	lsrs	r1, r3, #16
   11e1c:	0e1b      	lsrs	r3, r3, #24
   11e1e:	70e1      	strb	r1, [r4, #3]
   11e20:	7123      	strb	r3, [r4, #4]
   11e22:	240f      	movs	r4, #15
   11e24:	2103      	movs	r1, #3
   11e26:	4b89      	ldr	r3, [pc, #548]	; (1204c <LORAWAN_RxDone+0x33c>)
   11e28:	4798      	blx	r3
   11e2a:	7b38      	ldrb	r0, [r7, #12]
   11e2c:	4b88      	ldr	r3, [pc, #544]	; (12050 <LORAWAN_RxDone+0x340>)
   11e2e:	4020      	ands	r0, r4
   11e30:	4798      	blx	r3
   11e32:	7af8      	ldrb	r0, [r7, #11]
   11e34:	4b87      	ldr	r3, [pc, #540]	; (12054 <LORAWAN_RxDone+0x344>)
   11e36:	0641      	lsls	r1, r0, #25
   11e38:	0700      	lsls	r0, r0, #28
   11e3a:	0f49      	lsrs	r1, r1, #29
   11e3c:	0f00      	lsrs	r0, r0, #28
   11e3e:	4798      	blx	r3
   11e40:	4b85      	ldr	r3, [pc, #532]	; (12058 <LORAWAN_RxDone+0x348>)
   11e42:	2100      	movs	r1, #0
   11e44:	203b      	movs	r0, #59	; 0x3b
   11e46:	4798      	blx	r3
   11e48:	9b06      	ldr	r3, [sp, #24]
   11e4a:	2b21      	cmp	r3, #33	; 0x21
   11e4c:	d000      	beq.n	11e50 <LORAWAN_RxDone+0x140>
   11e4e:	e08c      	b.n	11f6a <LORAWAN_RxDone+0x25a>
   11e50:	251a      	movs	r5, #26
   11e52:	ab04      	add	r3, sp, #16
   11e54:	18ed      	adds	r5, r5, r3
   11e56:	002a      	movs	r2, r5
   11e58:	4b80      	ldr	r3, [pc, #512]	; (1205c <LORAWAN_RxDone+0x34c>)
   11e5a:	4981      	ldr	r1, [pc, #516]	; (12060 <LORAWAN_RxDone+0x350>)
   11e5c:	2007      	movs	r0, #7
   11e5e:	4798      	blx	r3
   11e60:	782b      	ldrb	r3, [r5, #0]
   11e62:	2bff      	cmp	r3, #255	; 0xff
   11e64:	d100      	bne.n	11e68 <LORAWAN_RxDone+0x158>
   11e66:	e080      	b.n	11f6a <LORAWAN_RxDone+0x25a>
   11e68:	2350      	movs	r3, #80	; 0x50
   11e6a:	43a3      	bics	r3, r4
   11e6c:	9308      	str	r3, [sp, #32]
   11e6e:	003b      	movs	r3, r7
   11e70:	330d      	adds	r3, #13
   11e72:	9306      	str	r3, [sp, #24]
   11e74:	2600      	movs	r6, #0
   11e76:	2203      	movs	r2, #3
   11e78:	9906      	ldr	r1, [sp, #24]
   11e7a:	4b6f      	ldr	r3, [pc, #444]	; (12038 <LORAWAN_RxDone+0x328>)
   11e7c:	a80e      	add	r0, sp, #56	; 0x38
   11e7e:	960e      	str	r6, [sp, #56]	; 0x38
   11e80:	4798      	blx	r3
   11e82:	2364      	movs	r3, #100	; 0x64
   11e84:	990e      	ldr	r1, [sp, #56]	; 0x38
   11e86:	aa04      	add	r2, sp, #16
   11e88:	4359      	muls	r1, r3
   11e8a:	3b4a      	subs	r3, #74	; 0x4a
   11e8c:	189b      	adds	r3, r3, r2
   11e8e:	7818      	ldrb	r0, [r3, #0]
   11e90:	9b07      	ldr	r3, [sp, #28]
   11e92:	910e      	str	r1, [sp, #56]	; 0x38
   11e94:	1818      	adds	r0, r3, r0
   11e96:	b2c0      	uxtb	r0, r0
   11e98:	76d0      	strb	r0, [r2, #27]
   11e9a:	42b1      	cmp	r1, r6
   11e9c:	d100      	bne.n	11ea0 <LORAWAN_RxDone+0x190>
   11e9e:	e0a7      	b.n	11ff0 <LORAWAN_RxDone+0x2e0>
   11ea0:	466b      	mov	r3, sp
   11ea2:	2220      	movs	r2, #32
   11ea4:	189b      	adds	r3, r3, r2
   11ea6:	781b      	ldrb	r3, [r3, #0]
   11ea8:	ad10      	add	r5, sp, #64	; 0x40
   11eaa:	ac0b      	add	r4, sp, #44	; 0x2c
   11eac:	7128      	strb	r0, [r5, #4]
   11eae:	9110      	str	r1, [sp, #64]	; 0x40
   11eb0:	7020      	strb	r0, [r4, #0]
   11eb2:	7063      	strb	r3, [r4, #1]
   11eb4:	0029      	movs	r1, r5
   11eb6:	2002      	movs	r0, #2
   11eb8:	4b6a      	ldr	r3, [pc, #424]	; (12064 <LORAWAN_RxDone+0x354>)
   11eba:	4798      	blx	r3
   11ebc:	2808      	cmp	r0, #8
   11ebe:	d140      	bne.n	11f42 <LORAWAN_RxDone+0x232>
   11ec0:	0029      	movs	r1, r5
   11ec2:	0030      	movs	r0, r6
   11ec4:	4b64      	ldr	r3, [pc, #400]	; (12058 <LORAWAN_RxDone+0x348>)
   11ec6:	4798      	blx	r3
   11ec8:	ad0c      	add	r5, sp, #48	; 0x30
   11eca:	0021      	movs	r1, r4
   11ecc:	4b62      	ldr	r3, [pc, #392]	; (12058 <LORAWAN_RxDone+0x348>)
   11ece:	2012      	movs	r0, #18
   11ed0:	4798      	blx	r3
   11ed2:	0031      	movs	r1, r6
   11ed4:	002a      	movs	r2, r5
   11ed6:	4e61      	ldr	r6, [pc, #388]	; (1205c <LORAWAN_RxDone+0x34c>)
   11ed8:	2014      	movs	r0, #20
   11eda:	47b0      	blx	r6
   11edc:	4c52      	ldr	r4, [pc, #328]	; (12028 <LORAWAN_RxDone+0x318>)
   11ede:	782a      	ldrb	r2, [r5, #0]
   11ee0:	0023      	movs	r3, r4
   11ee2:	33f3      	adds	r3, #243	; 0xf3
   11ee4:	701a      	strb	r2, [r3, #0]
   11ee6:	0023      	movs	r3, r4
   11ee8:	786a      	ldrb	r2, [r5, #1]
   11eea:	2522      	movs	r5, #34	; 0x22
   11eec:	33f4      	adds	r3, #244	; 0xf4
   11eee:	701a      	strb	r2, [r3, #0]
   11ef0:	4b5d      	ldr	r3, [pc, #372]	; (12068 <LORAWAN_RxDone+0x358>)
   11ef2:	4798      	blx	r3
   11ef4:	ab04      	add	r3, sp, #16
   11ef6:	18ed      	adds	r5, r5, r3
   11ef8:	231b      	movs	r3, #27
   11efa:	a904      	add	r1, sp, #16
   11efc:	185b      	adds	r3, r3, r1
   11efe:	0019      	movs	r1, r3
   11f00:	002a      	movs	r2, r5
   11f02:	201e      	movs	r0, #30
   11f04:	47b0      	blx	r6
   11f06:	0023      	movs	r3, r4
   11f08:	33ff      	adds	r3, #255	; 0xff
   11f0a:	7f5b      	ldrb	r3, [r3, #29]
   11f0c:	079b      	lsls	r3, r3, #30
   11f0e:	d508      	bpl.n	11f22 <LORAWAN_RxDone+0x212>
   11f10:	ab04      	add	r3, sp, #16
   11f12:	7edb      	ldrb	r3, [r3, #27]
   11f14:	a90f      	add	r1, sp, #60	; 0x3c
   11f16:	708b      	strb	r3, [r1, #2]
   11f18:	882b      	ldrh	r3, [r5, #0]
   11f1a:	201e      	movs	r0, #30
   11f1c:	800b      	strh	r3, [r1, #0]
   11f1e:	4b4e      	ldr	r3, [pc, #312]	; (12058 <LORAWAN_RxDone+0x348>)
   11f20:	4798      	blx	r3
   11f22:	231b      	movs	r3, #27
   11f24:	aa04      	add	r2, sp, #16
   11f26:	189b      	adds	r3, r3, r2
   11f28:	7818      	ldrb	r0, [r3, #0]
   11f2a:	2101      	movs	r1, #1
   11f2c:	4b4f      	ldr	r3, [pc, #316]	; (1206c <LORAWAN_RxDone+0x35c>)
   11f2e:	4798      	blx	r3
   11f30:	2204      	movs	r2, #4
   11f32:	3484      	adds	r4, #132	; 0x84
   11f34:	7863      	ldrb	r3, [r4, #1]
   11f36:	210b      	movs	r1, #11
   11f38:	4313      	orrs	r3, r2
   11f3a:	7063      	strb	r3, [r4, #1]
   11f3c:	2001      	movs	r0, #1
   11f3e:	4b43      	ldr	r3, [pc, #268]	; (1204c <LORAWAN_RxDone+0x33c>)
   11f40:	4798      	blx	r3
   11f42:	9b07      	ldr	r3, [sp, #28]
   11f44:	3301      	adds	r3, #1
   11f46:	b2db      	uxtb	r3, r3
   11f48:	9307      	str	r3, [sp, #28]
   11f4a:	9b06      	ldr	r3, [sp, #24]
   11f4c:	3303      	adds	r3, #3
   11f4e:	9306      	str	r3, [sp, #24]
   11f50:	9b07      	ldr	r3, [sp, #28]
   11f52:	2b05      	cmp	r3, #5
   11f54:	d18e      	bne.n	11e74 <LORAWAN_RxDone+0x164>
   11f56:	2204      	movs	r2, #4
   11f58:	4b33      	ldr	r3, [pc, #204]	; (12028 <LORAWAN_RxDone+0x318>)
   11f5a:	2001      	movs	r0, #1
   11f5c:	3384      	adds	r3, #132	; 0x84
   11f5e:	7859      	ldrb	r1, [r3, #1]
   11f60:	430a      	orrs	r2, r1
   11f62:	705a      	strb	r2, [r3, #1]
   11f64:	210b      	movs	r1, #11
   11f66:	4b39      	ldr	r3, [pc, #228]	; (1204c <LORAWAN_RxDone+0x33c>)
   11f68:	4798      	blx	r3
   11f6a:	4d41      	ldr	r5, [pc, #260]	; (12070 <LORAWAN_RxDone+0x360>)
   11f6c:	1c7e      	adds	r6, r7, #1
   11f6e:	3704      	adds	r7, #4
   11f70:	0028      	movs	r0, r5
   11f72:	003a      	movs	r2, r7
   11f74:	0031      	movs	r1, r6
   11f76:	4b3f      	ldr	r3, [pc, #252]	; (12074 <LORAWAN_RxDone+0x364>)
   11f78:	4798      	blx	r3
   11f7a:	2302      	movs	r3, #2
   11f7c:	4c2a      	ldr	r4, [pc, #168]	; (12028 <LORAWAN_RxDone+0x318>)
   11f7e:	0028      	movs	r0, r5
   11f80:	7563      	strb	r3, [r4, #21]
   11f82:	4a2a      	ldr	r2, [pc, #168]	; (1202c <LORAWAN_RxDone+0x31c>)
   11f84:	3b01      	subs	r3, #1
   11f86:	2100      	movs	r1, #0
   11f88:	4d3b      	ldr	r5, [pc, #236]	; (12078 <LORAWAN_RxDone+0x368>)
   11f8a:	47a8      	blx	r5
   11f8c:	2800      	cmp	r0, #0
   11f8e:	d003      	beq.n	11f98 <LORAWAN_RxDone+0x288>
   11f90:	4b2a      	ldr	r3, [pc, #168]	; (1203c <LORAWAN_RxDone+0x32c>)
   11f92:	4798      	blx	r3
   11f94:	4b2a      	ldr	r3, [pc, #168]	; (12040 <LORAWAN_RxDone+0x330>)
   11f96:	4798      	blx	r3
   11f98:	2105      	movs	r1, #5
   11f9a:	4b2c      	ldr	r3, [pc, #176]	; (1204c <LORAWAN_RxDone+0x33c>)
   11f9c:	2001      	movs	r0, #1
   11f9e:	4798      	blx	r3
   11fa0:	4d36      	ldr	r5, [pc, #216]	; (1207c <LORAWAN_RxDone+0x36c>)
   11fa2:	003a      	movs	r2, r7
   11fa4:	0028      	movs	r0, r5
   11fa6:	0031      	movs	r1, r6
   11fa8:	4b32      	ldr	r3, [pc, #200]	; (12074 <LORAWAN_RxDone+0x364>)
   11faa:	4798      	blx	r3
   11fac:	2301      	movs	r3, #1
   11fae:	0028      	movs	r0, r5
   11fb0:	7163      	strb	r3, [r4, #5]
   11fb2:	4a1e      	ldr	r2, [pc, #120]	; (1202c <LORAWAN_RxDone+0x31c>)
   11fb4:	18db      	adds	r3, r3, r3
   11fb6:	2100      	movs	r1, #0
   11fb8:	4d2f      	ldr	r5, [pc, #188]	; (12078 <LORAWAN_RxDone+0x368>)
   11fba:	47a8      	blx	r5
   11fbc:	2800      	cmp	r0, #0
   11fbe:	d003      	beq.n	11fc8 <LORAWAN_RxDone+0x2b8>
   11fc0:	4b1e      	ldr	r3, [pc, #120]	; (1203c <LORAWAN_RxDone+0x32c>)
   11fc2:	4798      	blx	r3
   11fc4:	4b1e      	ldr	r3, [pc, #120]	; (12040 <LORAWAN_RxDone+0x330>)
   11fc6:	4798      	blx	r3
   11fc8:	4b20      	ldr	r3, [pc, #128]	; (1204c <LORAWAN_RxDone+0x33c>)
   11fca:	2104      	movs	r1, #4
   11fcc:	2001      	movs	r0, #1
   11fce:	4798      	blx	r3
   11fd0:	4b2b      	ldr	r3, [pc, #172]	; (12080 <LORAWAN_RxDone+0x370>)
   11fd2:	5ce3      	ldrb	r3, [r4, r3]
   11fd4:	2b00      	cmp	r3, #0
   11fd6:	d017      	beq.n	12008 <LORAWAN_RxDone+0x2f8>
   11fd8:	492a      	ldr	r1, [pc, #168]	; (12084 <LORAWAN_RxDone+0x374>)
   11fda:	2002      	movs	r0, #2
   11fdc:	4c2a      	ldr	r4, [pc, #168]	; (12088 <LORAWAN_RxDone+0x378>)
   11fde:	47a0      	blx	r4
   11fe0:	2800      	cmp	r0, #0
   11fe2:	d008      	beq.n	11ff6 <LORAWAN_RxDone+0x2e6>
   11fe4:	4b15      	ldr	r3, [pc, #84]	; (1203c <LORAWAN_RxDone+0x32c>)
   11fe6:	4798      	blx	r3
   11fe8:	4b15      	ldr	r3, [pc, #84]	; (12040 <LORAWAN_RxDone+0x330>)
   11fea:	4798      	blx	r3
   11fec:	2023      	movs	r0, #35	; 0x23
   11fee:	e6f3      	b.n	11dd8 <LORAWAN_RxDone+0xc8>
   11ff0:	4b1e      	ldr	r3, [pc, #120]	; (1206c <LORAWAN_RxDone+0x35c>)
   11ff2:	4798      	blx	r3
   11ff4:	e7a5      	b.n	11f42 <LORAWAN_RxDone+0x232>
   11ff6:	4925      	ldr	r1, [pc, #148]	; (1208c <LORAWAN_RxDone+0x37c>)
   11ff8:	2001      	movs	r0, #1
   11ffa:	47a0      	blx	r4
   11ffc:	2800      	cmp	r0, #0
   11ffe:	d1f1      	bne.n	11fe4 <LORAWAN_RxDone+0x2d4>
   12000:	4b23      	ldr	r3, [pc, #140]	; (12090 <LORAWAN_RxDone+0x380>)
   12002:	4798      	blx	r3
   12004:	2008      	movs	r0, #8
   12006:	e6e7      	b.n	11dd8 <LORAWAN_RxDone+0xc8>
   12008:	0020      	movs	r0, r4
   1200a:	0021      	movs	r1, r4
   1200c:	2210      	movs	r2, #16
   1200e:	3115      	adds	r1, #21
   12010:	4d09      	ldr	r5, [pc, #36]	; (12038 <LORAWAN_RxDone+0x328>)
   12012:	3035      	adds	r0, #53	; 0x35
   12014:	47a8      	blx	r5
   12016:	0020      	movs	r0, r4
   12018:	1d61      	adds	r1, r4, #5
   1201a:	2210      	movs	r2, #16
   1201c:	3025      	adds	r0, #37	; 0x25
   1201e:	47a8      	blx	r5
   12020:	e7ee      	b.n	12000 <LORAWAN_RxDone+0x2f0>
   12022:	46c0      	nop			; (mov r8, r8)
   12024:	20003204 	.word	0x20003204
   12028:	20003180 	.word	0x20003180
   1202c:	200031c5 	.word	0x200031c5
   12030:	20001eb5 	.word	0x20001eb5
   12034:	00007275 	.word	0x00007275
   12038:	00016c47 	.word	0x00016c47
   1203c:	000108f1 	.word	0x000108f1
   12040:	000117a5 	.word	0x000117a5
   12044:	0000723d 	.word	0x0000723d
   12048:	0000d891 	.word	0x0000d891
   1204c:	00009569 	.word	0x00009569
   12050:	00010081 	.word	0x00010081
   12054:	00010795 	.word	0x00010795
   12058:	0000d069 	.word	0x0000d069
   1205c:	0000d031 	.word	0x0000d031
   12060:	20003267 	.word	0x20003267
   12064:	0000d04d 	.word	0x0000d04d
   12068:	00011871 	.word	0x00011871
   1206c:	00011cc1 	.word	0x00011cc1
   12070:	20003195 	.word	0x20003195
   12074:	000103ad 	.word	0x000103ad
   12078:	00007265 	.word	0x00007265
   1207c:	20003185 	.word	0x20003185
   12080:	0000022d 	.word	0x0000022d
   12084:	200031a5 	.word	0x200031a5
   12088:	00007271 	.word	0x00007271
   1208c:	200031b5 	.word	0x200031b5
   12090:	000102c9 	.word	0x000102c9
   12094:	22bf      	movs	r2, #191	; 0xbf
   12096:	3e60      	subs	r6, #96	; 0x60
   12098:	4016      	ands	r6, r2
   1209a:	d000      	beq.n	1209e <LORAWAN_RxDone+0x38e>
   1209c:	e2b6      	b.n	1260c <LORAWAN_RxDone+0x8fc>
   1209e:	2501      	movs	r5, #1
   120a0:	422b      	tst	r3, r5
   120a2:	d100      	bne.n	120a6 <LORAWAN_RxDone+0x396>
   120a4:	e2b2      	b.n	1260c <LORAWAN_RxDone+0x8fc>
   120a6:	7922      	ldrb	r2, [r4, #4]
   120a8:	6823      	ldr	r3, [r4, #0]
   120aa:	0612      	lsls	r2, r2, #24
   120ac:	0a1b      	lsrs	r3, r3, #8
   120ae:	431a      	orrs	r2, r3
   120b0:	0023      	movs	r3, r4
   120b2:	33e0      	adds	r3, #224	; 0xe0
   120b4:	701e      	strb	r6, [r3, #0]
   120b6:	9207      	str	r2, [sp, #28]
   120b8:	7882      	ldrb	r2, [r0, #2]
   120ba:	7843      	ldrb	r3, [r0, #1]
   120bc:	0212      	lsls	r2, r2, #8
   120be:	431a      	orrs	r2, r3
   120c0:	78c3      	ldrb	r3, [r0, #3]
   120c2:	041b      	lsls	r3, r3, #16
   120c4:	431a      	orrs	r2, r3
   120c6:	7903      	ldrb	r3, [r0, #4]
   120c8:	061b      	lsls	r3, r3, #24
   120ca:	4313      	orrs	r3, r2
   120cc:	9a07      	ldr	r2, [sp, #28]
   120ce:	429a      	cmp	r2, r3
   120d0:	d100      	bne.n	120d4 <LORAWAN_RxDone+0x3c4>
   120d2:	e2cc      	b.n	1266e <LORAWAN_RxDone+0x95e>
   120d4:	ab04      	add	r3, sp, #16
   120d6:	3521      	adds	r5, #33	; 0x21
   120d8:	18ed      	adds	r5, r5, r3
   120da:	7a02      	ldrb	r2, [r0, #8]
   120dc:	0949      	lsrs	r1, r1, #5
   120de:	002b      	movs	r3, r5
   120e0:	4eda      	ldr	r6, [pc, #872]	; (1244c <LORAWAN_RxDone+0x73c>)
   120e2:	47b0      	blx	r6
   120e4:	2808      	cmp	r0, #8
   120e6:	d131      	bne.n	1214c <LORAWAN_RxDone+0x43c>
   120e8:	233c      	movs	r3, #60	; 0x3c
   120ea:	7829      	ldrb	r1, [r5, #0]
   120ec:	434b      	muls	r3, r1
   120ee:	001d      	movs	r5, r3
   120f0:	3535      	adds	r5, #53	; 0x35
   120f2:	35ff      	adds	r5, #255	; 0xff
   120f4:	192d      	adds	r5, r5, r4
   120f6:	18e4      	adds	r4, r4, r3
   120f8:	0023      	movs	r3, r4
   120fa:	33fc      	adds	r3, #252	; 0xfc
   120fc:	6b58      	ldr	r0, [r3, #52]	; 0x34
   120fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   12100:	9308      	str	r3, [sp, #32]
   12102:	79fb      	ldrb	r3, [r7, #7]
   12104:	79ba      	ldrb	r2, [r7, #6]
   12106:	021b      	lsls	r3, r3, #8
   12108:	4313      	orrs	r3, r2
   1210a:	0022      	movs	r2, r4
   1210c:	3255      	adds	r2, #85	; 0x55
   1210e:	32ff      	adds	r2, #255	; 0xff
   12110:	8816      	ldrh	r6, [r2, #0]
   12112:	429e      	cmp	r6, r3
   12114:	d908      	bls.n	12128 <LORAWAN_RxDone+0x418>
   12116:	3457      	adds	r4, #87	; 0x57
   12118:	34ff      	adds	r4, #255	; 0xff
   1211a:	8823      	ldrh	r3, [r4, #0]
   1211c:	3301      	adds	r3, #1
   1211e:	8023      	strh	r3, [r4, #0]
   12120:	79fb      	ldrb	r3, [r7, #7]
   12122:	79bc      	ldrb	r4, [r7, #6]
   12124:	021b      	lsls	r3, r3, #8
   12126:	4323      	orrs	r3, r4
   12128:	8013      	strh	r3, [r2, #0]
   1212a:	9b06      	ldr	r3, [sp, #24]
   1212c:	9000      	str	r0, [sp, #0]
   1212e:	1f1a      	subs	r2, r3, #4
   12130:	233c      	movs	r3, #60	; 0x3c
   12132:	434b      	muls	r3, r1
   12134:	49c6      	ldr	r1, [pc, #792]	; (12450 <LORAWAN_RxDone+0x740>)
   12136:	b2d2      	uxtb	r2, r2
   12138:	18c9      	adds	r1, r1, r3
   1213a:	31fc      	adds	r1, #252	; 0xfc
   1213c:	2349      	movs	r3, #73	; 0x49
   1213e:	6d89      	ldr	r1, [r1, #88]	; 0x58
   12140:	2001      	movs	r0, #1
   12142:	4cc4      	ldr	r4, [pc, #784]	; (12454 <LORAWAN_RxDone+0x744>)
   12144:	47a0      	blx	r4
   12146:	2301      	movs	r3, #1
   12148:	9307      	str	r3, [sp, #28]
   1214a:	e2a6      	b.n	1269a <LORAWAN_RxDone+0x98a>
   1214c:	220e      	movs	r2, #14
   1214e:	4bc2      	ldr	r3, [pc, #776]	; (12458 <LORAWAN_RxDone+0x748>)
   12150:	781b      	ldrb	r3, [r3, #0]
   12152:	4013      	ands	r3, r2
   12154:	2b0a      	cmp	r3, #10
   12156:	d008      	beq.n	1216a <LORAWAN_RxDone+0x45a>
   12158:	2b06      	cmp	r3, #6
   1215a:	d001      	beq.n	12160 <LORAWAN_RxDone+0x450>
   1215c:	200a      	movs	r0, #10
   1215e:	e63b      	b.n	11dd8 <LORAWAN_RxDone+0xc8>
   12160:	0023      	movs	r3, r4
   12162:	33f9      	adds	r3, #249	; 0xf9
   12164:	781b      	ldrb	r3, [r3, #0]
   12166:	2b00      	cmp	r3, #0
   12168:	d0f8      	beq.n	1215c <LORAWAN_RxDone+0x44c>
   1216a:	2220      	movs	r2, #32
   1216c:	201e      	movs	r0, #30
   1216e:	3494      	adds	r4, #148	; 0x94
   12170:	7823      	ldrb	r3, [r4, #0]
   12172:	4393      	bics	r3, r2
   12174:	7023      	strb	r3, [r4, #0]
   12176:	4bb9      	ldr	r3, [pc, #740]	; (1245c <LORAWAN_RxDone+0x74c>)
   12178:	e61b      	b.n	11db2 <LORAWAN_RxDone+0xa2>
   1217a:	0022      	movs	r2, r4
   1217c:	2102      	movs	r1, #2
   1217e:	e2a6      	b.n	126ce <LORAWAN_RxDone+0x9be>
   12180:	9b08      	ldr	r3, [sp, #32]
   12182:	328c      	adds	r2, #140	; 0x8c
   12184:	6013      	str	r3, [r2, #0]
   12186:	e2e3      	b.n	12750 <LORAWAN_RxDone+0xa40>
   12188:	9b07      	ldr	r3, [sp, #28]
   1218a:	4cb1      	ldr	r4, [pc, #708]	; (12450 <LORAWAN_RxDone+0x740>)
   1218c:	2b00      	cmp	r3, #0
   1218e:	d000      	beq.n	12192 <LORAWAN_RxDone+0x482>
   12190:	e224      	b.n	125dc <LORAWAN_RxDone+0x8cc>
   12192:	466a      	mov	r2, sp
   12194:	0023      	movs	r3, r4
   12196:	7f12      	ldrb	r2, [r2, #28]
   12198:	33e3      	adds	r3, #227	; 0xe3
   1219a:	701a      	strb	r2, [r3, #0]
   1219c:	797b      	ldrb	r3, [r7, #5]
   1219e:	2b7f      	cmp	r3, #127	; 0x7f
   121a0:	d909      	bls.n	121b6 <LORAWAN_RxDone+0x4a6>
   121a2:	0022      	movs	r2, r4
   121a4:	2320      	movs	r3, #32
   121a6:	3284      	adds	r2, #132	; 0x84
   121a8:	7811      	ldrb	r1, [r2, #0]
   121aa:	2001      	movs	r0, #1
   121ac:	430b      	orrs	r3, r1
   121ae:	7013      	strb	r3, [r2, #0]
   121b0:	210b      	movs	r1, #11
   121b2:	4bab      	ldr	r3, [pc, #684]	; (12460 <LORAWAN_RxDone+0x750>)
   121b4:	4798      	blx	r3
   121b6:	797b      	ldrb	r3, [r7, #5]
   121b8:	06db      	lsls	r3, r3, #27
   121ba:	d505      	bpl.n	121c8 <LORAWAN_RxDone+0x4b8>
   121bc:	0022      	movs	r2, r4
   121be:	2308      	movs	r3, #8
   121c0:	3294      	adds	r2, #148	; 0x94
   121c2:	7811      	ldrb	r1, [r2, #0]
   121c4:	430b      	orrs	r3, r1
   121c6:	7013      	strb	r3, [r2, #0]
   121c8:	797b      	ldrb	r3, [r7, #5]
   121ca:	065b      	lsls	r3, r3, #25
   121cc:	d505      	bpl.n	121da <LORAWAN_RxDone+0x4ca>
   121ce:	0022      	movs	r2, r4
   121d0:	2310      	movs	r3, #16
   121d2:	3294      	adds	r2, #148	; 0x94
   121d4:	7811      	ldrb	r1, [r2, #0]
   121d6:	430b      	orrs	r3, r1
   121d8:	7013      	strb	r3, [r2, #0]
   121da:	221f      	movs	r2, #31
   121dc:	783b      	ldrb	r3, [r7, #0]
   121de:	4393      	bics	r3, r2
   121e0:	2ba0      	cmp	r3, #160	; 0xa0
   121e2:	d105      	bne.n	121f0 <LORAWAN_RxDone+0x4e0>
   121e4:	0022      	movs	r2, r4
   121e6:	3294      	adds	r2, #148	; 0x94
   121e8:	7811      	ldrb	r1, [r2, #0]
   121ea:	3b9e      	subs	r3, #158	; 0x9e
   121ec:	430b      	orrs	r3, r1
   121ee:	7013      	strb	r3, [r2, #0]
   121f0:	7979      	ldrb	r1, [r7, #5]
   121f2:	070b      	lsls	r3, r1, #28
   121f4:	d100      	bne.n	121f8 <LORAWAN_RxDone+0x4e8>
   121f6:	e0d4      	b.n	123a2 <LORAWAN_RxDone+0x692>
   121f8:	0709      	lsls	r1, r1, #28
   121fa:	0f09      	lsrs	r1, r1, #28
   121fc:	187b      	adds	r3, r7, r1
   121fe:	7a1b      	ldrb	r3, [r3, #8]
   12200:	2b00      	cmp	r3, #0
   12202:	d100      	bne.n	12206 <LORAWAN_RxDone+0x4f6>
   12204:	e0a9      	b.n	1235a <LORAWAN_RxDone+0x64a>
   12206:	0038      	movs	r0, r7
   12208:	4b96      	ldr	r3, [pc, #600]	; (12464 <LORAWAN_RxDone+0x754>)
   1220a:	3008      	adds	r0, #8
   1220c:	4798      	blx	r3
   1220e:	2301      	movs	r3, #1
   12210:	0006      	movs	r6, r0
   12212:	9307      	str	r3, [sp, #28]
   12214:	7978      	ldrb	r0, [r7, #5]
   12216:	9906      	ldr	r1, [sp, #24]
   12218:	0703      	lsls	r3, r0, #28
   1221a:	0f1b      	lsrs	r3, r3, #28
   1221c:	001a      	movs	r2, r3
   1221e:	320c      	adds	r2, #12
   12220:	4291      	cmp	r1, r2
   12222:	d100      	bne.n	12226 <LORAWAN_RxDone+0x516>
   12224:	e0f1      	b.n	1240a <LORAWAN_RxDone+0x6fa>
   12226:	7832      	ldrb	r2, [r6, #0]
   12228:	1ac9      	subs	r1, r1, r3
   1222a:	b2c9      	uxtb	r1, r1
   1222c:	9208      	str	r2, [sp, #32]
   1222e:	000a      	movs	r2, r1
   12230:	3319      	adds	r3, #25
   12232:	3a0c      	subs	r2, #12
   12234:	469c      	mov	ip, r3
   12236:	9b08      	ldr	r3, [sp, #32]
   12238:	b2d2      	uxtb	r2, r2
   1223a:	9206      	str	r2, [sp, #24]
   1223c:	1c75      	adds	r5, r6, #1
   1223e:	4a84      	ldr	r2, [pc, #528]	; (12450 <LORAWAN_RxDone+0x740>)
   12240:	2b00      	cmp	r3, #0
   12242:	d100      	bne.n	12246 <LORAWAN_RxDone+0x536>
   12244:	e0b0      	b.n	123a8 <LORAWAN_RxDone+0x698>
   12246:	6813      	ldr	r3, [r2, #0]
   12248:	0010      	movs	r0, r2
   1224a:	7912      	ldrb	r2, [r2, #4]
   1224c:	0a1c      	lsrs	r4, r3, #8
   1224e:	0612      	lsls	r2, r2, #24
   12250:	4322      	orrs	r2, r4
   12252:	9204      	str	r2, [sp, #16]
   12254:	4a84      	ldr	r2, [pc, #528]	; (12468 <LORAWAN_RxDone+0x758>)
   12256:	4663      	mov	r3, ip
   12258:	9203      	str	r2, [sp, #12]
   1225a:	466a      	mov	r2, sp
   1225c:	8493      	strh	r3, [r2, #36]	; 0x24
   1225e:	8c93      	ldrh	r3, [r2, #36]	; 0x24
   12260:	2201      	movs	r2, #1
   12262:	9302      	str	r3, [sp, #8]
   12264:	4b81      	ldr	r3, [pc, #516]	; (1246c <LORAWAN_RxDone+0x75c>)
   12266:	308c      	adds	r0, #140	; 0x8c
   12268:	390d      	subs	r1, #13
   1226a:	9201      	str	r2, [sp, #4]
   1226c:	9300      	str	r3, [sp, #0]
   1226e:	6803      	ldr	r3, [r0, #0]
   12270:	b2c9      	uxtb	r1, r1
   12272:	0028      	movs	r0, r5
   12274:	4c7e      	ldr	r4, [pc, #504]	; (12470 <LORAWAN_RxDone+0x760>)
   12276:	47a0      	blx	r4
   12278:	2800      	cmp	r0, #0
   1227a:	d004      	beq.n	12286 <LORAWAN_RxDone+0x576>
   1227c:	4b7d      	ldr	r3, [pc, #500]	; (12474 <LORAWAN_RxDone+0x764>)
   1227e:	4798      	blx	r3
   12280:	201f      	movs	r0, #31
   12282:	4b76      	ldr	r3, [pc, #472]	; (1245c <LORAWAN_RxDone+0x74c>)
   12284:	4798      	blx	r3
   12286:	4c72      	ldr	r4, [pc, #456]	; (12450 <LORAWAN_RxDone+0x740>)
   12288:	2300      	movs	r3, #0
   1228a:	0022      	movs	r2, r4
   1228c:	32ca      	adds	r2, #202	; 0xca
   1228e:	8013      	strh	r3, [r2, #0]
   12290:	0022      	movs	r2, r4
   12292:	32f6      	adds	r2, #246	; 0xf6
   12294:	7013      	strb	r3, [r2, #0]
   12296:	0022      	movs	r2, r4
   12298:	2110      	movs	r1, #16
   1229a:	3294      	adds	r2, #148	; 0x94
   1229c:	7813      	ldrb	r3, [r2, #0]
   1229e:	438b      	bics	r3, r1
   122a0:	7013      	strb	r3, [r2, #0]
   122a2:	0023      	movs	r3, r4
   122a4:	2201      	movs	r2, #1
   122a6:	3384      	adds	r3, #132	; 0x84
   122a8:	7859      	ldrb	r1, [r3, #1]
   122aa:	430a      	orrs	r2, r1
   122ac:	705a      	strb	r2, [r3, #1]
   122ae:	220e      	movs	r2, #14
   122b0:	781b      	ldrb	r3, [r3, #0]
   122b2:	4013      	ands	r3, r2
   122b4:	2b06      	cmp	r3, #6
   122b6:	d104      	bne.n	122c2 <LORAWAN_RxDone+0x5b2>
   122b8:	0023      	movs	r3, r4
   122ba:	33ee      	adds	r3, #238	; 0xee
   122bc:	7818      	ldrb	r0, [r3, #0]
   122be:	4b6e      	ldr	r3, [pc, #440]	; (12478 <LORAWAN_RxDone+0x768>)
   122c0:	4798      	blx	r3
   122c2:	0025      	movs	r5, r4
   122c4:	2201      	movs	r2, #1
   122c6:	3594      	adds	r5, #148	; 0x94
   122c8:	782b      	ldrb	r3, [r5, #0]
   122ca:	4213      	tst	r3, r2
   122cc:	d100      	bne.n	122d0 <LORAWAN_RxDone+0x5c0>
   122ce:	e107      	b.n	124e0 <LORAWAN_RxDone+0x7d0>
   122d0:	797b      	ldrb	r3, [r7, #5]
   122d2:	321f      	adds	r2, #31
   122d4:	4213      	tst	r3, r2
   122d6:	d100      	bne.n	122da <LORAWAN_RxDone+0x5ca>
   122d8:	e0e8      	b.n	124ac <LORAWAN_RxDone+0x79c>
   122da:	4b68      	ldr	r3, [pc, #416]	; (1247c <LORAWAN_RxDone+0x76c>)
   122dc:	4798      	blx	r3
   122de:	0023      	movs	r3, r4
   122e0:	2101      	movs	r1, #1
   122e2:	3384      	adds	r3, #132	; 0x84
   122e4:	785a      	ldrb	r2, [r3, #1]
   122e6:	438a      	bics	r2, r1
   122e8:	705a      	strb	r2, [r3, #1]
   122ea:	9a08      	ldr	r2, [sp, #32]
   122ec:	2a00      	cmp	r2, #0
   122ee:	d100      	bne.n	122f2 <LORAWAN_RxDone+0x5e2>
   122f0:	e093      	b.n	1241a <LORAWAN_RxDone+0x70a>
   122f2:	9a06      	ldr	r2, [sp, #24]
   122f4:	0031      	movs	r1, r6
   122f6:	0038      	movs	r0, r7
   122f8:	4b61      	ldr	r3, [pc, #388]	; (12480 <LORAWAN_RxDone+0x770>)
   122fa:	4798      	blx	r3
   122fc:	4b56      	ldr	r3, [pc, #344]	; (12458 <LORAWAN_RxDone+0x748>)
   122fe:	4d54      	ldr	r5, [pc, #336]	; (12450 <LORAWAN_RxDone+0x740>)
   12300:	781b      	ldrb	r3, [r3, #0]
   12302:	06db      	lsls	r3, r3, #27
   12304:	d400      	bmi.n	12308 <LORAWAN_RxDone+0x5f8>
   12306:	e160      	b.n	125ca <LORAWAN_RxDone+0x8ba>
   12308:	2220      	movs	r2, #32
   1230a:	4b5e      	ldr	r3, [pc, #376]	; (12484 <LORAWAN_RxDone+0x774>)
   1230c:	781b      	ldrb	r3, [r3, #0]
   1230e:	401a      	ands	r2, r3
   12310:	9206      	str	r2, [sp, #24]
   12312:	d000      	beq.n	12316 <LORAWAN_RxDone+0x606>
   12314:	e159      	b.n	125ca <LORAWAN_RxDone+0x8ba>
   12316:	320a      	adds	r2, #10
   12318:	4213      	tst	r3, r2
   1231a:	d100      	bne.n	1231e <LORAWAN_RxDone+0x60e>
   1231c:	e155      	b.n	125ca <LORAWAN_RxDone+0x8ba>
   1231e:	002b      	movs	r3, r5
   12320:	33f5      	adds	r3, #245	; 0xf5
   12322:	781b      	ldrb	r3, [r3, #0]
   12324:	a90f      	add	r1, sp, #60	; 0x3c
   12326:	704b      	strb	r3, [r1, #1]
   12328:	002e      	movs	r6, r5
   1232a:	2301      	movs	r3, #1
   1232c:	36e7      	adds	r6, #231	; 0xe7
   1232e:	700b      	strb	r3, [r1, #0]
   12330:	7833      	ldrb	r3, [r6, #0]
   12332:	aa0e      	add	r2, sp, #56	; 0x38
   12334:	202f      	movs	r0, #47	; 0x2f
   12336:	4f54      	ldr	r7, [pc, #336]	; (12488 <LORAWAN_RxDone+0x778>)
   12338:	708b      	strb	r3, [r1, #2]
   1233a:	47b8      	blx	r7
   1233c:	9007      	str	r0, [sp, #28]
   1233e:	2808      	cmp	r0, #8
   12340:	d000      	beq.n	12344 <LORAWAN_RxDone+0x634>
   12342:	e0fb      	b.n	1253c <LORAWAN_RxDone+0x82c>
   12344:	4b51      	ldr	r3, [pc, #324]	; (1248c <LORAWAN_RxDone+0x77c>)
   12346:	9806      	ldr	r0, [sp, #24]
   12348:	4798      	blx	r3
   1234a:	4b4e      	ldr	r3, [pc, #312]	; (12484 <LORAWAN_RxDone+0x774>)
   1234c:	9a07      	ldr	r2, [sp, #28]
   1234e:	781b      	ldrb	r3, [r3, #0]
   12350:	4393      	bics	r3, r2
   12352:	4a4c      	ldr	r2, [pc, #304]	; (12484 <LORAWAN_RxDone+0x774>)
   12354:	7013      	strb	r3, [r2, #0]
   12356:	2001      	movs	r0, #1
   12358:	e53e      	b.n	11dd8 <LORAWAN_RxDone+0xc8>
   1235a:	0023      	movs	r3, r4
   1235c:	220e      	movs	r2, #14
   1235e:	3384      	adds	r3, #132	; 0x84
   12360:	781b      	ldrb	r3, [r3, #0]
   12362:	4013      	ands	r3, r2
   12364:	2b06      	cmp	r3, #6
   12366:	d101      	bne.n	1236c <LORAWAN_RxDone+0x65c>
   12368:	4b49      	ldr	r3, [pc, #292]	; (12490 <LORAWAN_RxDone+0x780>)
   1236a:	4798      	blx	r3
   1236c:	4949      	ldr	r1, [pc, #292]	; (12494 <LORAWAN_RxDone+0x784>)
   1236e:	784a      	ldrb	r2, [r1, #1]
   12370:	780b      	ldrb	r3, [r1, #0]
   12372:	0212      	lsls	r2, r2, #8
   12374:	431a      	orrs	r2, r3
   12376:	788b      	ldrb	r3, [r1, #2]
   12378:	041b      	lsls	r3, r3, #16
   1237a:	431a      	orrs	r2, r3
   1237c:	78cb      	ldrb	r3, [r1, #3]
   1237e:	061b      	lsls	r3, r3, #24
   12380:	4313      	orrs	r3, r2
   12382:	d008      	beq.n	12396 <LORAWAN_RxDone+0x686>
   12384:	0022      	movs	r2, r4
   12386:	2120      	movs	r1, #32
   12388:	3294      	adds	r2, #148	; 0x94
   1238a:	7813      	ldrb	r3, [r2, #0]
   1238c:	201e      	movs	r0, #30
   1238e:	438b      	bics	r3, r1
   12390:	7013      	strb	r3, [r2, #0]
   12392:	4b32      	ldr	r3, [pc, #200]	; (1245c <LORAWAN_RxDone+0x74c>)
   12394:	4798      	blx	r3
   12396:	2300      	movs	r3, #0
   12398:	34e0      	adds	r4, #224	; 0xe0
   1239a:	7023      	strb	r3, [r4, #0]
   1239c:	4b35      	ldr	r3, [pc, #212]	; (12474 <LORAWAN_RxDone+0x764>)
   1239e:	4798      	blx	r3
   123a0:	e7d9      	b.n	12356 <LORAWAN_RxDone+0x646>
   123a2:	003e      	movs	r6, r7
   123a4:	3608      	adds	r6, #8
   123a6:	e735      	b.n	12214 <LORAWAN_RxDone+0x504>
   123a8:	9b06      	ldr	r3, [sp, #24]
   123aa:	2b00      	cmp	r3, #0
   123ac:	d031      	beq.n	12412 <LORAWAN_RxDone+0x702>
   123ae:	0703      	lsls	r3, r0, #28
   123b0:	d1d3      	bne.n	1235a <LORAWAN_RxDone+0x64a>
   123b2:	390d      	subs	r1, #13
   123b4:	6813      	ldr	r3, [r2, #0]
   123b6:	b2cc      	uxtb	r4, r1
   123b8:	0011      	movs	r1, r2
   123ba:	7912      	ldrb	r2, [r2, #4]
   123bc:	0a18      	lsrs	r0, r3, #8
   123be:	0612      	lsls	r2, r2, #24
   123c0:	4302      	orrs	r2, r0
   123c2:	9204      	str	r2, [sp, #16]
   123c4:	4a28      	ldr	r2, [pc, #160]	; (12468 <LORAWAN_RxDone+0x758>)
   123c6:	4663      	mov	r3, ip
   123c8:	9203      	str	r2, [sp, #12]
   123ca:	466a      	mov	r2, sp
   123cc:	8313      	strh	r3, [r2, #24]
   123ce:	8b13      	ldrh	r3, [r2, #24]
   123d0:	318c      	adds	r1, #140	; 0x8c
   123d2:	9302      	str	r3, [sp, #8]
   123d4:	2302      	movs	r3, #2
   123d6:	9301      	str	r3, [sp, #4]
   123d8:	4b2f      	ldr	r3, [pc, #188]	; (12498 <LORAWAN_RxDone+0x788>)
   123da:	2201      	movs	r2, #1
   123dc:	9300      	str	r3, [sp, #0]
   123de:	680b      	ldr	r3, [r1, #0]
   123e0:	0028      	movs	r0, r5
   123e2:	0021      	movs	r1, r4
   123e4:	4e22      	ldr	r6, [pc, #136]	; (12470 <LORAWAN_RxDone+0x760>)
   123e6:	47b0      	blx	r6
   123e8:	2800      	cmp	r0, #0
   123ea:	d004      	beq.n	123f6 <LORAWAN_RxDone+0x6e6>
   123ec:	4b21      	ldr	r3, [pc, #132]	; (12474 <LORAWAN_RxDone+0x764>)
   123ee:	4798      	blx	r3
   123f0:	201f      	movs	r0, #31
   123f2:	4b1a      	ldr	r3, [pc, #104]	; (1245c <LORAWAN_RxDone+0x74c>)
   123f4:	4798      	blx	r3
   123f6:	4b1b      	ldr	r3, [pc, #108]	; (12464 <LORAWAN_RxDone+0x754>)
   123f8:	0021      	movs	r1, r4
   123fa:	0028      	movs	r0, r5
   123fc:	4798      	blx	r3
   123fe:	2300      	movs	r3, #0
   12400:	9306      	str	r3, [sp, #24]
   12402:	3301      	adds	r3, #1
   12404:	9307      	str	r3, [sp, #28]
   12406:	2600      	movs	r6, #0
   12408:	e73d      	b.n	12286 <LORAWAN_RxDone+0x576>
   1240a:	2600      	movs	r6, #0
   1240c:	9608      	str	r6, [sp, #32]
   1240e:	9606      	str	r6, [sp, #24]
   12410:	e739      	b.n	12286 <LORAWAN_RxDone+0x576>
   12412:	9b06      	ldr	r3, [sp, #24]
   12414:	9308      	str	r3, [sp, #32]
   12416:	001e      	movs	r6, r3
   12418:	e735      	b.n	12286 <LORAWAN_RxDone+0x576>
   1241a:	2120      	movs	r1, #32
   1241c:	782a      	ldrb	r2, [r5, #0]
   1241e:	438a      	bics	r2, r1
   12420:	702a      	strb	r2, [r5, #0]
   12422:	0022      	movs	r2, r4
   12424:	32fd      	adds	r2, #253	; 0xfd
   12426:	7812      	ldrb	r2, [r2, #0]
   12428:	2a01      	cmp	r2, #1
   1242a:	d137      	bne.n	1249c <LORAWAN_RxDone+0x78c>
   1242c:	781a      	ldrb	r2, [r3, #0]
   1242e:	3912      	subs	r1, #18
   12430:	438a      	bics	r2, r1
   12432:	701a      	strb	r2, [r3, #0]
   12434:	2388      	movs	r3, #136	; 0x88
   12436:	4a06      	ldr	r2, [pc, #24]	; (12450 <LORAWAN_RxDone+0x740>)
   12438:	009b      	lsls	r3, r3, #2
   1243a:	5cd3      	ldrb	r3, [r2, r3]
   1243c:	2b00      	cmp	r3, #0
   1243e:	d000      	beq.n	12442 <LORAWAN_RxDone+0x732>
   12440:	e75c      	b.n	122fc <LORAWAN_RxDone+0x5ec>
   12442:	2008      	movs	r0, #8
   12444:	4b05      	ldr	r3, [pc, #20]	; (1245c <LORAWAN_RxDone+0x74c>)
   12446:	4798      	blx	r3
   12448:	e758      	b.n	122fc <LORAWAN_RxDone+0x5ec>
   1244a:	46c0      	nop			; (mov r8, r8)
   1244c:	00013345 	.word	0x00013345
   12450:	20003180 	.word	0x20003180
   12454:	000103e9 	.word	0x000103e9
   12458:	20003204 	.word	0x20003204
   1245c:	00011291 	.word	0x00011291
   12460:	00009569 	.word	0x00009569
   12464:	00011a2d 	.word	0x00011a2d
   12468:	20002f44 	.word	0x20002f44
   1246c:	200031b5 	.word	0x200031b5
   12470:	000111d1 	.word	0x000111d1
   12474:	000117a5 	.word	0x000117a5
   12478:	0000d891 	.word	0x0000d891
   1247c:	0001089d 	.word	0x0001089d
   12480:	00011341 	.word	0x00011341
   12484:	20003214 	.word	0x20003214
   12488:	0000d031 	.word	0x0000d031
   1248c:	00010551 	.word	0x00010551
   12490:	00010481 	.word	0x00010481
   12494:	200034dc 	.word	0x200034dc
   12498:	200031a5 	.word	0x200031a5
   1249c:	2a04      	cmp	r2, #4
   1249e:	d1c9      	bne.n	12434 <LORAWAN_RxDone+0x724>
   124a0:	0023      	movs	r3, r4
   124a2:	33f1      	adds	r3, #241	; 0xf1
   124a4:	7818      	ldrb	r0, [r3, #0]
   124a6:	4bab      	ldr	r3, [pc, #684]	; (12754 <LORAWAN_RxDone+0xa44>)
   124a8:	4798      	blx	r3
   124aa:	e7c3      	b.n	12434 <LORAWAN_RxDone+0x724>
   124ac:	9b07      	ldr	r3, [sp, #28]
   124ae:	2b00      	cmp	r3, #0
   124b0:	d013      	beq.n	124da <LORAWAN_RxDone+0x7ca>
   124b2:	0023      	movs	r3, r4
   124b4:	33fd      	adds	r3, #253	; 0xfd
   124b6:	781e      	ldrb	r6, [r3, #0]
   124b8:	2e01      	cmp	r6, #1
   124ba:	d10e      	bne.n	124da <LORAWAN_RxDone+0x7ca>
   124bc:	4ba6      	ldr	r3, [pc, #664]	; (12758 <LORAWAN_RxDone+0xa48>)
   124be:	4798      	blx	r3
   124c0:	0022      	movs	r2, r4
   124c2:	3284      	adds	r2, #132	; 0x84
   124c4:	7853      	ldrb	r3, [r2, #1]
   124c6:	43b3      	bics	r3, r6
   124c8:	7053      	strb	r3, [r2, #1]
   124ca:	2220      	movs	r2, #32
   124cc:	782b      	ldrb	r3, [r5, #0]
   124ce:	4393      	bics	r3, r2
   124d0:	702b      	strb	r3, [r5, #0]
   124d2:	2388      	movs	r3, #136	; 0x88
   124d4:	009b      	lsls	r3, r3, #2
   124d6:	5ce3      	ldrb	r3, [r4, r3]
   124d8:	e7b0      	b.n	1243c <LORAWAN_RxDone+0x72c>
   124da:	4ba0      	ldr	r3, [pc, #640]	; (1275c <LORAWAN_RxDone+0xa4c>)
   124dc:	4798      	blx	r3
   124de:	e70d      	b.n	122fc <LORAWAN_RxDone+0x5ec>
   124e0:	9a08      	ldr	r2, [sp, #32]
   124e2:	2a00      	cmp	r2, #0
   124e4:	d00b      	beq.n	124fe <LORAWAN_RxDone+0x7ee>
   124e6:	9a06      	ldr	r2, [sp, #24]
   124e8:	0031      	movs	r1, r6
   124ea:	0038      	movs	r0, r7
   124ec:	4b9c      	ldr	r3, [pc, #624]	; (12760 <LORAWAN_RxDone+0xa50>)
   124ee:	4798      	blx	r3
   124f0:	0022      	movs	r2, r4
   124f2:	2101      	movs	r1, #1
   124f4:	3284      	adds	r2, #132	; 0x84
   124f6:	7853      	ldrb	r3, [r2, #1]
   124f8:	438b      	bics	r3, r1
   124fa:	7053      	strb	r3, [r2, #1]
   124fc:	e6fe      	b.n	122fc <LORAWAN_RxDone+0x5ec>
   124fe:	2220      	movs	r2, #32
   12500:	4393      	bics	r3, r2
   12502:	702b      	strb	r3, [r5, #0]
   12504:	0023      	movs	r3, r4
   12506:	33fd      	adds	r3, #253	; 0xfd
   12508:	781b      	ldrb	r3, [r3, #0]
   1250a:	2b01      	cmp	r3, #1
   1250c:	d10e      	bne.n	1252c <LORAWAN_RxDone+0x81c>
   1250e:	0022      	movs	r2, r4
   12510:	210e      	movs	r1, #14
   12512:	3284      	adds	r2, #132	; 0x84
   12514:	7813      	ldrb	r3, [r2, #0]
   12516:	438b      	bics	r3, r1
   12518:	7013      	strb	r3, [r2, #0]
   1251a:	2388      	movs	r3, #136	; 0x88
   1251c:	009b      	lsls	r3, r3, #2
   1251e:	5ce3      	ldrb	r3, [r4, r3]
   12520:	2b00      	cmp	r3, #0
   12522:	d1e5      	bne.n	124f0 <LORAWAN_RxDone+0x7e0>
   12524:	2008      	movs	r0, #8
   12526:	4b8f      	ldr	r3, [pc, #572]	; (12764 <LORAWAN_RxDone+0xa54>)
   12528:	4798      	blx	r3
   1252a:	e7e1      	b.n	124f0 <LORAWAN_RxDone+0x7e0>
   1252c:	2b04      	cmp	r3, #4
   1252e:	d1f4      	bne.n	1251a <LORAWAN_RxDone+0x80a>
   12530:	0023      	movs	r3, r4
   12532:	33f1      	adds	r3, #241	; 0xf1
   12534:	7818      	ldrb	r0, [r3, #0]
   12536:	4b87      	ldr	r3, [pc, #540]	; (12754 <LORAWAN_RxDone+0xa44>)
   12538:	4798      	blx	r3
   1253a:	e7ee      	b.n	1251a <LORAWAN_RxDone+0x80a>
   1253c:	35ff      	adds	r5, #255	; 0xff
   1253e:	7f6b      	ldrb	r3, [r5, #29]
   12540:	079a      	lsls	r2, r3, #30
   12542:	d520      	bpl.n	12586 <LORAWAN_RxDone+0x876>
   12544:	aa10      	add	r2, sp, #64	; 0x40
   12546:	0031      	movs	r1, r6
   12548:	2026      	movs	r0, #38	; 0x26
   1254a:	47b8      	blx	r7
   1254c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1254e:	1c5a      	adds	r2, r3, #1
   12550:	d001      	beq.n	12556 <LORAWAN_RxDone+0x846>
   12552:	3314      	adds	r3, #20
   12554:	9310      	str	r3, [sp, #64]	; 0x40
   12556:	0021      	movs	r1, r4
   12558:	220e      	movs	r2, #14
   1255a:	3184      	adds	r1, #132	; 0x84
   1255c:	780b      	ldrb	r3, [r1, #0]
   1255e:	4393      	bics	r3, r2
   12560:	001a      	movs	r2, r3
   12562:	230c      	movs	r3, #12
   12564:	4313      	orrs	r3, r2
   12566:	700b      	strb	r3, [r1, #0]
   12568:	4b7f      	ldr	r3, [pc, #508]	; (12768 <LORAWAN_RxDone+0xa58>)
   1256a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1256c:	5ce3      	ldrb	r3, [r4, r3]
   1256e:	21fa      	movs	r1, #250	; 0xfa
   12570:	1ad3      	subs	r3, r2, r3
   12572:	2200      	movs	r2, #0
   12574:	0089      	lsls	r1, r1, #2
   12576:	4359      	muls	r1, r3
   12578:	34ef      	adds	r4, #239	; 0xef
   1257a:	4b7c      	ldr	r3, [pc, #496]	; (1276c <LORAWAN_RxDone+0xa5c>)
   1257c:	7820      	ldrb	r0, [r4, #0]
   1257e:	9200      	str	r2, [sp, #0]
   12580:	4c7b      	ldr	r4, [pc, #492]	; (12770 <LORAWAN_RxDone+0xa60>)
   12582:	47a0      	blx	r4
   12584:	e6e7      	b.n	12356 <LORAWAN_RxDone+0x646>
   12586:	075b      	lsls	r3, r3, #29
   12588:	d400      	bmi.n	1258c <LORAWAN_RxDone+0x87c>
   1258a:	e6e4      	b.n	12356 <LORAWAN_RxDone+0x646>
   1258c:	aa10      	add	r2, sp, #64	; 0x40
   1258e:	0031      	movs	r1, r6
   12590:	2032      	movs	r0, #50	; 0x32
   12592:	47b8      	blx	r7
   12594:	220e      	movs	r2, #14
   12596:	4b77      	ldr	r3, [pc, #476]	; (12774 <LORAWAN_RxDone+0xa64>)
   12598:	781b      	ldrb	r3, [r3, #0]
   1259a:	4393      	bics	r3, r2
   1259c:	001a      	movs	r2, r3
   1259e:	230c      	movs	r3, #12
   125a0:	4313      	orrs	r3, r2
   125a2:	4a74      	ldr	r2, [pc, #464]	; (12774 <LORAWAN_RxDone+0xa64>)
   125a4:	7013      	strb	r3, [r2, #0]
   125a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   125a8:	1c5a      	adds	r2, r3, #1
   125aa:	d001      	beq.n	125b0 <LORAWAN_RxDone+0x8a0>
   125ac:	3301      	adds	r3, #1
   125ae:	9310      	str	r3, [sp, #64]	; 0x40
   125b0:	4b6d      	ldr	r3, [pc, #436]	; (12768 <LORAWAN_RxDone+0xa58>)
   125b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   125b4:	5ce3      	ldrb	r3, [r4, r3]
   125b6:	21fa      	movs	r1, #250	; 0xfa
   125b8:	1ad3      	subs	r3, r2, r3
   125ba:	2200      	movs	r2, #0
   125bc:	0089      	lsls	r1, r1, #2
   125be:	34f2      	adds	r4, #242	; 0xf2
   125c0:	4359      	muls	r1, r3
   125c2:	7820      	ldrb	r0, [r4, #0]
   125c4:	4b6c      	ldr	r3, [pc, #432]	; (12778 <LORAWAN_RxDone+0xa68>)
   125c6:	9200      	str	r2, [sp, #0]
   125c8:	e7da      	b.n	12580 <LORAWAN_RxDone+0x870>
   125ca:	35fd      	adds	r5, #253	; 0xfd
   125cc:	782b      	ldrb	r3, [r5, #0]
   125ce:	2b04      	cmp	r3, #4
   125d0:	d000      	beq.n	125d4 <LORAWAN_RxDone+0x8c4>
   125d2:	e6c0      	b.n	12356 <LORAWAN_RxDone+0x646>
   125d4:	0038      	movs	r0, r7
   125d6:	4b69      	ldr	r3, [pc, #420]	; (1277c <LORAWAN_RxDone+0xa6c>)
   125d8:	4798      	blx	r3
   125da:	e6bc      	b.n	12356 <LORAWAN_RxDone+0x646>
   125dc:	2390      	movs	r3, #144	; 0x90
   125de:	009b      	lsls	r3, r3, #2
   125e0:	5ce3      	ldrb	r3, [r4, r3]
   125e2:	2b00      	cmp	r3, #0
   125e4:	d009      	beq.n	125fa <LORAWAN_RxDone+0x8ea>
   125e6:	2322      	movs	r3, #34	; 0x22
   125e8:	aa04      	add	r2, sp, #16
   125ea:	189b      	adds	r3, r3, r2
   125ec:	781b      	ldrb	r3, [r3, #0]
   125ee:	003a      	movs	r2, r7
   125f0:	9906      	ldr	r1, [sp, #24]
   125f2:	0038      	movs	r0, r7
   125f4:	4c62      	ldr	r4, [pc, #392]	; (12780 <LORAWAN_RxDone+0xa70>)
   125f6:	47a0      	blx	r4
   125f8:	e6ad      	b.n	12356 <LORAWAN_RxDone+0x646>
   125fa:	2220      	movs	r2, #32
   125fc:	3494      	adds	r4, #148	; 0x94
   125fe:	7823      	ldrb	r3, [r4, #0]
   12600:	201e      	movs	r0, #30
   12602:	4393      	bics	r3, r2
   12604:	7023      	strb	r3, [r4, #0]
   12606:	4b57      	ldr	r3, [pc, #348]	; (12764 <LORAWAN_RxDone+0xa54>)
   12608:	4798      	blx	r3
   1260a:	e6c7      	b.n	1239c <LORAWAN_RxDone+0x68c>
   1260c:	220e      	movs	r2, #14
   1260e:	4013      	ands	r3, r2
   12610:	2b0a      	cmp	r3, #10
   12612:	d008      	beq.n	12626 <LORAWAN_RxDone+0x916>
   12614:	2b06      	cmp	r3, #6
   12616:	d000      	beq.n	1261a <LORAWAN_RxDone+0x90a>
   12618:	e5a0      	b.n	1215c <LORAWAN_RxDone+0x44c>
   1261a:	0023      	movs	r3, r4
   1261c:	33f9      	adds	r3, #249	; 0xf9
   1261e:	781b      	ldrb	r3, [r3, #0]
   12620:	2b00      	cmp	r3, #0
   12622:	d100      	bne.n	12626 <LORAWAN_RxDone+0x916>
   12624:	e59a      	b.n	1215c <LORAWAN_RxDone+0x44c>
   12626:	2220      	movs	r2, #32
   12628:	3494      	adds	r4, #148	; 0x94
   1262a:	7823      	ldrb	r3, [r4, #0]
   1262c:	2019      	movs	r0, #25
   1262e:	4393      	bics	r3, r2
   12630:	7023      	strb	r3, [r4, #0]
   12632:	e5a0      	b.n	12176 <LORAWAN_RxDone+0x466>
   12634:	4953      	ldr	r1, [pc, #332]	; (12784 <LORAWAN_RxDone+0xa74>)
   12636:	784a      	ldrb	r2, [r1, #1]
   12638:	780b      	ldrb	r3, [r1, #0]
   1263a:	0212      	lsls	r2, r2, #8
   1263c:	431a      	orrs	r2, r3
   1263e:	788b      	ldrb	r3, [r1, #2]
   12640:	041b      	lsls	r3, r3, #16
   12642:	431a      	orrs	r2, r3
   12644:	78cb      	ldrb	r3, [r1, #3]
   12646:	061b      	lsls	r3, r3, #24
   12648:	4313      	orrs	r3, r2
   1264a:	d100      	bne.n	1264e <LORAWAN_RxDone+0x93e>
   1264c:	e683      	b.n	12356 <LORAWAN_RxDone+0x646>
   1264e:	4b4e      	ldr	r3, [pc, #312]	; (12788 <LORAWAN_RxDone+0xa78>)
   12650:	4c4e      	ldr	r4, [pc, #312]	; (1278c <LORAWAN_RxDone+0xa7c>)
   12652:	781b      	ldrb	r3, [r3, #0]
   12654:	2b10      	cmp	r3, #16
   12656:	d105      	bne.n	12664 <LORAWAN_RxDone+0x954>
   12658:	0001      	movs	r1, r0
   1265a:	2000      	movs	r0, #0
   1265c:	9a06      	ldr	r2, [sp, #24]
   1265e:	3b0c      	subs	r3, #12
   12660:	47a0      	blx	r4
   12662:	e678      	b.n	12356 <LORAWAN_RxDone+0x646>
   12664:	2300      	movs	r3, #0
   12666:	0001      	movs	r1, r0
   12668:	9a06      	ldr	r2, [sp, #24]
   1266a:	0018      	movs	r0, r3
   1266c:	e7f8      	b.n	12660 <LORAWAN_RxDone+0x950>
   1266e:	348c      	adds	r4, #140	; 0x8c
   12670:	6823      	ldr	r3, [r4, #0]
   12672:	0031      	movs	r1, r6
   12674:	9308      	str	r3, [sp, #32]
   12676:	4b46      	ldr	r3, [pc, #280]	; (12790 <LORAWAN_RxDone+0xa80>)
   12678:	4798      	blx	r3
   1267a:	2808      	cmp	r0, #8
   1267c:	d001      	beq.n	12682 <LORAWAN_RxDone+0x972>
   1267e:	f7ff fbab 	bl	11dd8 <LORAWAN_RxDone+0xc8>
   12682:	9b06      	ldr	r3, [sp, #24]
   12684:	0028      	movs	r0, r5
   12686:	1f1a      	subs	r2, r3, #4
   12688:	9b07      	ldr	r3, [sp, #28]
   1268a:	b2d2      	uxtb	r2, r2
   1268c:	9300      	str	r3, [sp, #0]
   1268e:	6821      	ldr	r1, [r4, #0]
   12690:	2349      	movs	r3, #73	; 0x49
   12692:	4c40      	ldr	r4, [pc, #256]	; (12794 <LORAWAN_RxDone+0xa84>)
   12694:	47a0      	blx	r4
   12696:	4d40      	ldr	r5, [pc, #256]	; (12798 <LORAWAN_RxDone+0xa88>)
   12698:	9607      	str	r6, [sp, #28]
   1269a:	4e40      	ldr	r6, [pc, #256]	; (1279c <LORAWAN_RxDone+0xa8c>)
   1269c:	4c40      	ldr	r4, [pc, #256]	; (127a0 <LORAWAN_RxDone+0xa90>)
   1269e:	2210      	movs	r2, #16
   126a0:	0021      	movs	r1, r4
   126a2:	4b40      	ldr	r3, [pc, #256]	; (127a4 <LORAWAN_RxDone+0xa94>)
   126a4:	0030      	movs	r0, r6
   126a6:	4798      	blx	r3
   126a8:	9b06      	ldr	r3, [sp, #24]
   126aa:	0039      	movs	r1, r7
   126ac:	3b04      	subs	r3, #4
   126ae:	001a      	movs	r2, r3
   126b0:	9309      	str	r3, [sp, #36]	; 0x24
   126b2:	483d      	ldr	r0, [pc, #244]	; (127a8 <LORAWAN_RxDone+0xa98>)
   126b4:	4b3b      	ldr	r3, [pc, #236]	; (127a4 <LORAWAN_RxDone+0xa94>)
   126b6:	4798      	blx	r3
   126b8:	9b06      	ldr	r3, [sp, #24]
   126ba:	9a07      	ldr	r2, [sp, #28]
   126bc:	330c      	adds	r3, #12
   126be:	b29b      	uxth	r3, r3
   126c0:	9300      	str	r3, [sp, #0]
   126c2:	0033      	movs	r3, r6
   126c4:	2a00      	cmp	r2, #0
   126c6:	d100      	bne.n	126ca <LORAWAN_RxDone+0x9ba>
   126c8:	e557      	b.n	1217a <LORAWAN_RxDone+0x46a>
   126ca:	0022      	movs	r2, r4
   126cc:	2104      	movs	r1, #4
   126ce:	4c37      	ldr	r4, [pc, #220]	; (127ac <LORAWAN_RxDone+0xa9c>)
   126d0:	0028      	movs	r0, r5
   126d2:	47a0      	blx	r4
   126d4:	2204      	movs	r2, #4
   126d6:	4932      	ldr	r1, [pc, #200]	; (127a0 <LORAWAN_RxDone+0xa90>)
   126d8:	4c32      	ldr	r4, [pc, #200]	; (127a4 <LORAWAN_RxDone+0xa94>)
   126da:	a80d      	add	r0, sp, #52	; 0x34
   126dc:	47a0      	blx	r4
   126de:	9b09      	ldr	r3, [sp, #36]	; 0x24
   126e0:	2204      	movs	r2, #4
   126e2:	18f9      	adds	r1, r7, r3
   126e4:	a810      	add	r0, sp, #64	; 0x40
   126e6:	47a0      	blx	r4
   126e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   126ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
   126ec:	4293      	cmp	r3, r2
   126ee:	d100      	bne.n	126f2 <LORAWAN_RxDone+0x9e2>
   126f0:	e54a      	b.n	12188 <LORAWAN_RxDone+0x478>
   126f2:	9b07      	ldr	r3, [sp, #28]
   126f4:	2b00      	cmp	r3, #0
   126f6:	d108      	bne.n	1270a <LORAWAN_RxDone+0x9fa>
   126f8:	220e      	movs	r2, #14
   126fa:	4b2d      	ldr	r3, [pc, #180]	; (127b0 <LORAWAN_RxDone+0xaa0>)
   126fc:	3384      	adds	r3, #132	; 0x84
   126fe:	781b      	ldrb	r3, [r3, #0]
   12700:	4013      	ands	r3, r2
   12702:	2b06      	cmp	r3, #6
   12704:	d101      	bne.n	1270a <LORAWAN_RxDone+0x9fa>
   12706:	4b2b      	ldr	r3, [pc, #172]	; (127b4 <LORAWAN_RxDone+0xaa4>)
   12708:	4798      	blx	r3
   1270a:	491e      	ldr	r1, [pc, #120]	; (12784 <LORAWAN_RxDone+0xa74>)
   1270c:	784a      	ldrb	r2, [r1, #1]
   1270e:	780b      	ldrb	r3, [r1, #0]
   12710:	0212      	lsls	r2, r2, #8
   12712:	431a      	orrs	r2, r3
   12714:	788b      	ldrb	r3, [r1, #2]
   12716:	041b      	lsls	r3, r3, #16
   12718:	431a      	orrs	r2, r3
   1271a:	78cb      	ldrb	r3, [r1, #3]
   1271c:	061b      	lsls	r3, r3, #24
   1271e:	4313      	orrs	r3, r2
   12720:	d101      	bne.n	12726 <LORAWAN_RxDone+0xa16>
   12722:	f7ff fb47 	bl	11db4 <LORAWAN_RxDone+0xa4>
   12726:	4a22      	ldr	r2, [pc, #136]	; (127b0 <LORAWAN_RxDone+0xaa0>)
   12728:	2020      	movs	r0, #32
   1272a:	0011      	movs	r1, r2
   1272c:	3194      	adds	r1, #148	; 0x94
   1272e:	780b      	ldrb	r3, [r1, #0]
   12730:	4383      	bics	r3, r0
   12732:	700b      	strb	r3, [r1, #0]
   12734:	9b07      	ldr	r3, [sp, #28]
   12736:	2b00      	cmp	r3, #0
   12738:	d100      	bne.n	1273c <LORAWAN_RxDone+0xa2c>
   1273a:	e521      	b.n	12180 <LORAWAN_RxDone+0x470>
   1273c:	2322      	movs	r3, #34	; 0x22
   1273e:	a904      	add	r1, sp, #16
   12740:	185b      	adds	r3, r3, r1
   12742:	7819      	ldrb	r1, [r3, #0]
   12744:	233c      	movs	r3, #60	; 0x3c
   12746:	434b      	muls	r3, r1
   12748:	18d3      	adds	r3, r2, r3
   1274a:	9a08      	ldr	r2, [sp, #32]
   1274c:	33fc      	adds	r3, #252	; 0xfc
   1274e:	659a      	str	r2, [r3, #88]	; 0x58
   12750:	2018      	movs	r0, #24
   12752:	e510      	b.n	12176 <LORAWAN_RxDone+0x466>
   12754:	0000d891 	.word	0x0000d891
   12758:	0001089d 	.word	0x0001089d
   1275c:	00010801 	.word	0x00010801
   12760:	00011341 	.word	0x00011341
   12764:	00011291 	.word	0x00011291
   12768:	0000022b 	.word	0x0000022b
   1276c:	00010649 	.word	0x00010649
   12770:	0000d579 	.word	0x0000d579
   12774:	20003204 	.word	0x20003204
   12778:	000110a9 	.word	0x000110a9
   1277c:	000131c5 	.word	0x000131c5
   12780:	000133b9 	.word	0x000133b9
   12784:	200034dc 	.word	0x200034dc
   12788:	2000225b 	.word	0x2000225b
   1278c:	000112f5 	.word	0x000112f5
   12790:	000117e1 	.word	0x000117e1
   12794:	000103e9 	.word	0x000103e9
   12798:	200031a5 	.word	0x200031a5
   1279c:	20002f44 	.word	0x20002f44
   127a0:	20001eb5 	.word	0x20001eb5
   127a4:	00016c47 	.word	0x00016c47
   127a8:	20002f54 	.word	0x20002f54
   127ac:	00007275 	.word	0x00007275
   127b0:	20003180 	.word	0x20003180
   127b4:	00010481 	.word	0x00010481

000127b8 <LorawanSetEdClass>:
   127b8:	2388      	movs	r3, #136	; 0x88
   127ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
   127bc:	4d1a      	ldr	r5, [pc, #104]	; (12828 <LorawanSetEdClass+0x70>)
   127be:	009b      	lsls	r3, r3, #2
   127c0:	5ceb      	ldrb	r3, [r5, r3]
   127c2:	0004      	movs	r4, r0
   127c4:	2011      	movs	r0, #17
   127c6:	2b00      	cmp	r3, #0
   127c8:	d013      	beq.n	127f2 <LorawanSetEdClass+0x3a>
   127ca:	002b      	movs	r3, r5
   127cc:	33fe      	adds	r3, #254	; 0xfe
   127ce:	781b      	ldrb	r3, [r3, #0]
   127d0:	3807      	subs	r0, #7
   127d2:	4223      	tst	r3, r4
   127d4:	d00d      	beq.n	127f2 <LorawanSetEdClass+0x3a>
   127d6:	002b      	movs	r3, r5
   127d8:	33fd      	adds	r3, #253	; 0xfd
   127da:	7819      	ldrb	r1, [r3, #0]
   127dc:	428c      	cmp	r4, r1
   127de:	d007      	beq.n	127f0 <LorawanSetEdClass+0x38>
   127e0:	2901      	cmp	r1, #1
   127e2:	d107      	bne.n	127f4 <LorawanSetEdClass+0x3c>
   127e4:	2c04      	cmp	r4, #4
   127e6:	d104      	bne.n	127f2 <LorawanSetEdClass+0x3a>
   127e8:	701c      	strb	r4, [r3, #0]
   127ea:	2000      	movs	r0, #0
   127ec:	4b0f      	ldr	r3, [pc, #60]	; (1282c <LorawanSetEdClass+0x74>)
   127ee:	4798      	blx	r3
   127f0:	2008      	movs	r0, #8
   127f2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   127f4:	2904      	cmp	r1, #4
   127f6:	d1fc      	bne.n	127f2 <LorawanSetEdClass+0x3a>
   127f8:	2c01      	cmp	r4, #1
   127fa:	d1fa      	bne.n	127f2 <LorawanSetEdClass+0x3a>
   127fc:	701c      	strb	r4, [r3, #0]
   127fe:	0021      	movs	r1, r4
   12800:	4b0a      	ldr	r3, [pc, #40]	; (1282c <LorawanSetEdClass+0x74>)
   12802:	2000      	movs	r0, #0
   12804:	4798      	blx	r3
   12806:	002a      	movs	r2, r5
   12808:	210e      	movs	r1, #14
   1280a:	3284      	adds	r2, #132	; 0x84
   1280c:	7813      	ldrb	r3, [r2, #0]
   1280e:	a801      	add	r0, sp, #4
   12810:	438b      	bics	r3, r1
   12812:	7013      	strb	r3, [r2, #0]
   12814:	4b06      	ldr	r3, [pc, #24]	; (12830 <LorawanSetEdClass+0x78>)
   12816:	7004      	strb	r4, [r0, #0]
   12818:	4798      	blx	r3
   1281a:	2394      	movs	r3, #148	; 0x94
   1281c:	005b      	lsls	r3, r3, #1
   1281e:	5ce8      	ldrb	r0, [r5, r3]
   12820:	4b04      	ldr	r3, [pc, #16]	; (12834 <LorawanSetEdClass+0x7c>)
   12822:	4798      	blx	r3
   12824:	e7e4      	b.n	127f0 <LorawanSetEdClass+0x38>
   12826:	46c0      	nop			; (mov r8, r8)
   12828:	20003180 	.word	0x20003180
   1282c:	00009569 	.word	0x00009569
   12830:	0000f9c1 	.word	0x0000f9c1
   12834:	0000d891 	.word	0x0000d891

00012838 <LORAWAN_SetAttr>:
   12838:	2388      	movs	r3, #136	; 0x88
   1283a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1283c:	4cbb      	ldr	r4, [pc, #748]	; (12b2c <LORAWAN_SetAttr+0x2f4>)
   1283e:	009b      	lsls	r3, r3, #2
   12840:	5ce3      	ldrb	r3, [r4, r3]
   12842:	000d      	movs	r5, r1
   12844:	2611      	movs	r6, #17
   12846:	2b00      	cmp	r3, #0
   12848:	d100      	bne.n	1284c <LORAWAN_SetAttr+0x14>
   1284a:	e11f      	b.n	12a8c <LORAWAN_SetAttr+0x254>
   1284c:	2846      	cmp	r0, #70	; 0x46
   1284e:	d878      	bhi.n	12942 <LORAWAN_SetAttr+0x10a>
   12850:	f001 f8be 	bl	139d0 <__gnu_thumb1_case_uhi>
   12854:	00930047 	.word	0x00930047
   12858:	00fc00b2 	.word	0x00fc00b2
   1285c:	00e600c5 	.word	0x00e600c5
   12860:	0134011e 	.word	0x0134011e
   12864:	01660154 	.word	0x01660154
   12868:	01830178 	.word	0x01830178
   1286c:	01a6018d 	.word	0x01a6018d
   12870:	007701ab 	.word	0x007701ab
   12874:	01b501b0 	.word	0x01b501b0
   12878:	01bf01ba 	.word	0x01bf01ba
   1287c:	01e601c4 	.word	0x01e601c4
   12880:	01cb01eb 	.word	0x01cb01eb
   12884:	01fc01c8 	.word	0x01fc01c8
   12888:	01e101f8 	.word	0x01e101f8
   1288c:	01d701dd 	.word	0x01d701dd
   12890:	00770077 	.word	0x00770077
   12894:	0077019e 	.word	0x0077019e
   12898:	00770077 	.word	0x00770077
   1289c:	00770077 	.word	0x00770077
   128a0:	02000077 	.word	0x02000077
   128a4:	02030066 	.word	0x02030066
   128a8:	020d0211 	.word	0x020d0211
   128ac:	00770208 	.word	0x00770208
   128b0:	02190215 	.word	0x02190215
   128b4:	0221021d 	.word	0x0221021d
   128b8:	02290225 	.word	0x02290225
   128bc:	00770249 	.word	0x00770249
   128c0:	00770077 	.word	0x00770077
   128c4:	00770077 	.word	0x00770077
   128c8:	00770077 	.word	0x00770077
   128cc:	00770077 	.word	0x00770077
   128d0:	02600077 	.word	0x02600077
   128d4:	026e026a 	.word	0x026e026a
   128d8:	00770077 	.word	0x00770077
   128dc:	02730077 	.word	0x02730077
   128e0:	0271      	.short	0x0271
   128e2:	260a      	movs	r6, #10
   128e4:	2900      	cmp	r1, #0
   128e6:	d100      	bne.n	128ea <LORAWAN_SetAttr+0xb2>
   128e8:	e0d0      	b.n	12a8c <LORAWAN_SetAttr+0x254>
   128ea:	0020      	movs	r0, r4
   128ec:	2208      	movs	r2, #8
   128ee:	4b90      	ldr	r3, [pc, #576]	; (12b30 <LORAWAN_SetAttr+0x2f8>)
   128f0:	305d      	adds	r0, #93	; 0x5d
   128f2:	4798      	blx	r3
   128f4:	2108      	movs	r1, #8
   128f6:	4e8f      	ldr	r6, [pc, #572]	; (12b34 <LORAWAN_SetAttr+0x2fc>)
   128f8:	2001      	movs	r0, #1
   128fa:	47b0      	blx	r6
   128fc:	0022      	movs	r2, r4
   128fe:	2501      	movs	r5, #1
   12900:	32de      	adds	r2, #222	; 0xde
   12902:	7813      	ldrb	r3, [r2, #0]
   12904:	2109      	movs	r1, #9
   12906:	432b      	orrs	r3, r5
   12908:	3484      	adds	r4, #132	; 0x84
   1290a:	0028      	movs	r0, r5
   1290c:	7013      	strb	r3, [r2, #0]
   1290e:	47b0      	blx	r6
   12910:	7823      	ldrb	r3, [r4, #0]
   12912:	210b      	movs	r1, #11
   12914:	43ab      	bics	r3, r5
   12916:	0028      	movs	r0, r5
   12918:	7023      	strb	r3, [r4, #0]
   1291a:	47b0      	blx	r6
   1291c:	2608      	movs	r6, #8
   1291e:	e0b5      	b.n	12a8c <LORAWAN_SetAttr+0x254>
   12920:	0023      	movs	r3, r4
   12922:	33ff      	adds	r3, #255	; 0xff
   12924:	7f5b      	ldrb	r3, [r3, #29]
   12926:	260a      	movs	r6, #10
   12928:	075b      	lsls	r3, r3, #29
   1292a:	d400      	bmi.n	1292e <LORAWAN_SetAttr+0xf6>
   1292c:	e0ae      	b.n	12a8c <LORAWAN_SetAttr+0x254>
   1292e:	79ca      	ldrb	r2, [r1, #7]
   12930:	4b81      	ldr	r3, [pc, #516]	; (12b38 <LORAWAN_SetAttr+0x300>)
   12932:	2a00      	cmp	r2, #0
   12934:	d10e      	bne.n	12954 <LORAWAN_SetAttr+0x11c>
   12936:	4669      	mov	r1, sp
   12938:	201d      	movs	r0, #29
   1293a:	714a      	strb	r2, [r1, #5]
   1293c:	4798      	blx	r3
   1293e:	2800      	cmp	r0, #0
   12940:	d001      	beq.n	12946 <LORAWAN_SetAttr+0x10e>
   12942:	260a      	movs	r6, #10
   12944:	e0a2      	b.n	12a8c <LORAWAN_SetAttr+0x254>
   12946:	2109      	movs	r1, #9
   12948:	34fe      	adds	r4, #254	; 0xfe
   1294a:	8460      	strh	r0, [r4, #34]	; 0x22
   1294c:	8420      	strh	r0, [r4, #32]
   1294e:	4b79      	ldr	r3, [pc, #484]	; (12b34 <LORAWAN_SetAttr+0x2fc>)
   12950:	4798      	blx	r3
   12952:	e7e3      	b.n	1291c <LORAWAN_SetAttr+0xe4>
   12954:	2002      	movs	r0, #2
   12956:	5e2a      	ldrsh	r2, [r5, r0]
   12958:	88ae      	ldrh	r6, [r5, #4]
   1295a:	79a8      	ldrb	r0, [r5, #6]
   1295c:	466d      	mov	r5, sp
   1295e:	806a      	strh	r2, [r5, #2]
   12960:	2201      	movs	r2, #1
   12962:	8809      	ldrh	r1, [r1, #0]
   12964:	7128      	strb	r0, [r5, #4]
   12966:	8029      	strh	r1, [r5, #0]
   12968:	201d      	movs	r0, #29
   1296a:	4669      	mov	r1, sp
   1296c:	716a      	strb	r2, [r5, #5]
   1296e:	4798      	blx	r3
   12970:	2800      	cmp	r0, #0
   12972:	d1e6      	bne.n	12942 <LORAWAN_SetAttr+0x10a>
   12974:	34fe      	adds	r4, #254	; 0xfe
   12976:	8466      	strh	r6, [r4, #34]	; 0x22
   12978:	e7d0      	b.n	1291c <LORAWAN_SetAttr+0xe4>
   1297a:	260a      	movs	r6, #10
   1297c:	2900      	cmp	r1, #0
   1297e:	d100      	bne.n	12982 <LORAWAN_SetAttr+0x14a>
   12980:	e084      	b.n	12a8c <LORAWAN_SetAttr+0x254>
   12982:	0020      	movs	r0, r4
   12984:	2208      	movs	r2, #8
   12986:	4b6a      	ldr	r3, [pc, #424]	; (12b30 <LORAWAN_SetAttr+0x2f8>)
   12988:	3055      	adds	r0, #85	; 0x55
   1298a:	4798      	blx	r3
   1298c:	2107      	movs	r1, #7
   1298e:	4d69      	ldr	r5, [pc, #420]	; (12b34 <LORAWAN_SetAttr+0x2fc>)
   12990:	2001      	movs	r0, #1
   12992:	47a8      	blx	r5
   12994:	0022      	movs	r2, r4
   12996:	2302      	movs	r3, #2
   12998:	32de      	adds	r2, #222	; 0xde
   1299a:	7811      	ldrb	r1, [r2, #0]
   1299c:	2001      	movs	r0, #1
   1299e:	430b      	orrs	r3, r1
   129a0:	2109      	movs	r1, #9
   129a2:	7013      	strb	r3, [r2, #0]
   129a4:	47a8      	blx	r5
   129a6:	2001      	movs	r0, #1
   129a8:	3484      	adds	r4, #132	; 0x84
   129aa:	7823      	ldrb	r3, [r4, #0]
   129ac:	210b      	movs	r1, #11
   129ae:	4383      	bics	r3, r0
   129b0:	7023      	strb	r3, [r4, #0]
   129b2:	47a8      	blx	r5
   129b4:	3e02      	subs	r6, #2
   129b6:	e069      	b.n	12a8c <LORAWAN_SetAttr+0x254>
   129b8:	680b      	ldr	r3, [r1, #0]
   129ba:	2001      	movs	r0, #1
   129bc:	0a19      	lsrs	r1, r3, #8
   129be:	70a1      	strb	r1, [r4, #2]
   129c0:	0c19      	lsrs	r1, r3, #16
   129c2:	7063      	strb	r3, [r4, #1]
   129c4:	70e1      	strb	r1, [r4, #3]
   129c6:	0e1b      	lsrs	r3, r3, #24
   129c8:	2103      	movs	r1, #3
   129ca:	4d5a      	ldr	r5, [pc, #360]	; (12b34 <LORAWAN_SetAttr+0x2fc>)
   129cc:	7123      	strb	r3, [r4, #4]
   129ce:	47a8      	blx	r5
   129d0:	0022      	movs	r2, r4
   129d2:	2304      	movs	r3, #4
   129d4:	32de      	adds	r2, #222	; 0xde
   129d6:	7811      	ldrb	r1, [r2, #0]
   129d8:	430b      	orrs	r3, r1
   129da:	7013      	strb	r3, [r2, #0]
   129dc:	e015      	b.n	12a0a <LORAWAN_SetAttr+0x1d2>
   129de:	260a      	movs	r6, #10
   129e0:	2900      	cmp	r1, #0
   129e2:	d053      	beq.n	12a8c <LORAWAN_SetAttr+0x254>
   129e4:	3606      	adds	r6, #6
   129e6:	0032      	movs	r2, r6
   129e8:	4f51      	ldr	r7, [pc, #324]	; (12b30 <LORAWAN_SetAttr+0x2f8>)
   129ea:	1d60      	adds	r0, r4, #5
   129ec:	47b8      	blx	r7
   129ee:	0020      	movs	r0, r4
   129f0:	0032      	movs	r2, r6
   129f2:	0029      	movs	r1, r5
   129f4:	3025      	adds	r0, #37	; 0x25
   129f6:	47b8      	blx	r7
   129f8:	2104      	movs	r1, #4
   129fa:	2001      	movs	r0, #1
   129fc:	4d4d      	ldr	r5, [pc, #308]	; (12b34 <LORAWAN_SetAttr+0x2fc>)
   129fe:	47a8      	blx	r5
   12a00:	0023      	movs	r3, r4
   12a02:	33de      	adds	r3, #222	; 0xde
   12a04:	781a      	ldrb	r2, [r3, #0]
   12a06:	4316      	orrs	r6, r2
   12a08:	701e      	strb	r6, [r3, #0]
   12a0a:	2109      	movs	r1, #9
   12a0c:	2001      	movs	r0, #1
   12a0e:	47a8      	blx	r5
   12a10:	2001      	movs	r0, #1
   12a12:	210b      	movs	r1, #11
   12a14:	3484      	adds	r4, #132	; 0x84
   12a16:	7823      	ldrb	r3, [r4, #0]
   12a18:	4383      	bics	r3, r0
   12a1a:	7023      	strb	r3, [r4, #0]
   12a1c:	47a8      	blx	r5
   12a1e:	e77d      	b.n	1291c <LORAWAN_SetAttr+0xe4>
   12a20:	260a      	movs	r6, #10
   12a22:	2900      	cmp	r1, #0
   12a24:	d032      	beq.n	12a8c <LORAWAN_SetAttr+0x254>
   12a26:	0020      	movs	r0, r4
   12a28:	2210      	movs	r2, #16
   12a2a:	4e41      	ldr	r6, [pc, #260]	; (12b30 <LORAWAN_SetAttr+0x2f8>)
   12a2c:	3015      	adds	r0, #21
   12a2e:	47b0      	blx	r6
   12a30:	0020      	movs	r0, r4
   12a32:	2210      	movs	r2, #16
   12a34:	0029      	movs	r1, r5
   12a36:	3035      	adds	r0, #53	; 0x35
   12a38:	47b0      	blx	r6
   12a3a:	2105      	movs	r1, #5
   12a3c:	2001      	movs	r0, #1
   12a3e:	4d3d      	ldr	r5, [pc, #244]	; (12b34 <LORAWAN_SetAttr+0x2fc>)
   12a40:	47a8      	blx	r5
   12a42:	0022      	movs	r2, r4
   12a44:	32de      	adds	r2, #222	; 0xde
   12a46:	7811      	ldrb	r1, [r2, #0]
   12a48:	2320      	movs	r3, #32
   12a4a:	e7c5      	b.n	129d8 <LORAWAN_SetAttr+0x1a0>
   12a4c:	260a      	movs	r6, #10
   12a4e:	2900      	cmp	r1, #0
   12a50:	d01c      	beq.n	12a8c <LORAWAN_SetAttr+0x254>
   12a52:	4b3a      	ldr	r3, [pc, #232]	; (12b3c <LORAWAN_SetAttr+0x304>)
   12a54:	3e02      	subs	r6, #2
   12a56:	5ce3      	ldrb	r3, [r4, r3]
   12a58:	2b00      	cmp	r3, #0
   12a5a:	d117      	bne.n	12a8c <LORAWAN_SetAttr+0x254>
   12a5c:	0020      	movs	r0, r4
   12a5e:	2210      	movs	r2, #16
   12a60:	4b33      	ldr	r3, [pc, #204]	; (12b30 <LORAWAN_SetAttr+0x2f8>)
   12a62:	3045      	adds	r0, #69	; 0x45
   12a64:	4798      	blx	r3
   12a66:	2106      	movs	r1, #6
   12a68:	4d32      	ldr	r5, [pc, #200]	; (12b34 <LORAWAN_SetAttr+0x2fc>)
   12a6a:	2001      	movs	r0, #1
   12a6c:	47a8      	blx	r5
   12a6e:	0022      	movs	r2, r4
   12a70:	32de      	adds	r2, #222	; 0xde
   12a72:	7813      	ldrb	r3, [r2, #0]
   12a74:	2109      	movs	r1, #9
   12a76:	4333      	orrs	r3, r6
   12a78:	2001      	movs	r0, #1
   12a7a:	7013      	strb	r3, [r2, #0]
   12a7c:	47a8      	blx	r5
   12a7e:	2001      	movs	r0, #1
   12a80:	3484      	adds	r4, #132	; 0x84
   12a82:	7823      	ldrb	r3, [r4, #0]
   12a84:	210b      	movs	r1, #11
   12a86:	4383      	bics	r3, r0
   12a88:	7023      	strb	r3, [r4, #0]
   12a8a:	47a8      	blx	r5
   12a8c:	0030      	movs	r0, r6
   12a8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   12a90:	780b      	ldrb	r3, [r1, #0]
   12a92:	2001      	movs	r0, #1
   12a94:	0021      	movs	r1, r4
   12a96:	2520      	movs	r5, #32
   12a98:	3184      	adds	r1, #132	; 0x84
   12a9a:	4003      	ands	r3, r0
   12a9c:	015a      	lsls	r2, r3, #5
   12a9e:	780b      	ldrb	r3, [r1, #0]
   12aa0:	43ab      	bics	r3, r5
   12aa2:	4313      	orrs	r3, r2
   12aa4:	700b      	strb	r3, [r1, #0]
   12aa6:	0023      	movs	r3, r4
   12aa8:	2200      	movs	r2, #0
   12aaa:	33ca      	adds	r3, #202	; 0xca
   12aac:	3494      	adds	r4, #148	; 0x94
   12aae:	801a      	strh	r2, [r3, #0]
   12ab0:	7823      	ldrb	r3, [r4, #0]
   12ab2:	3210      	adds	r2, #16
   12ab4:	4393      	bics	r3, r2
   12ab6:	7023      	strb	r3, [r4, #0]
   12ab8:	210b      	movs	r1, #11
   12aba:	e748      	b.n	1294e <LORAWAN_SetAttr+0x116>
   12abc:	466a      	mov	r2, sp
   12abe:	780b      	ldrb	r3, [r1, #0]
   12ac0:	7013      	strb	r3, [r2, #0]
   12ac2:	0022      	movs	r2, r4
   12ac4:	32f3      	adds	r2, #243	; 0xf3
   12ac6:	7812      	ldrb	r2, [r2, #0]
   12ac8:	429a      	cmp	r2, r3
   12aca:	d900      	bls.n	12ace <LORAWAN_SetAttr+0x296>
   12acc:	e739      	b.n	12942 <LORAWAN_SetAttr+0x10a>
   12ace:	0022      	movs	r2, r4
   12ad0:	32f4      	adds	r2, #244	; 0xf4
   12ad2:	7812      	ldrb	r2, [r2, #0]
   12ad4:	429a      	cmp	r2, r3
   12ad6:	d200      	bcs.n	12ada <LORAWAN_SetAttr+0x2a2>
   12ad8:	e733      	b.n	12942 <LORAWAN_SetAttr+0x10a>
   12ada:	4669      	mov	r1, sp
   12adc:	2010      	movs	r0, #16
   12ade:	4b18      	ldr	r3, [pc, #96]	; (12b40 <LORAWAN_SetAttr+0x308>)
   12ae0:	4798      	blx	r3
   12ae2:	0006      	movs	r6, r0
   12ae4:	2808      	cmp	r0, #8
   12ae6:	d000      	beq.n	12aea <LORAWAN_SetAttr+0x2b2>
   12ae8:	e72b      	b.n	12942 <LORAWAN_SetAttr+0x10a>
   12aea:	466b      	mov	r3, sp
   12aec:	210c      	movs	r1, #12
   12aee:	2001      	movs	r0, #1
   12af0:	781b      	ldrb	r3, [r3, #0]
   12af2:	34e7      	adds	r4, #231	; 0xe7
   12af4:	7023      	strb	r3, [r4, #0]
   12af6:	4b0f      	ldr	r3, [pc, #60]	; (12b34 <LORAWAN_SetAttr+0x2fc>)
   12af8:	4798      	blx	r3
   12afa:	e7c7      	b.n	12a8c <LORAWAN_SetAttr+0x254>
   12afc:	466a      	mov	r2, sp
   12afe:	780b      	ldrb	r3, [r1, #0]
   12b00:	201d      	movs	r0, #29
   12b02:	7013      	strb	r3, [r2, #0]
   12b04:	4669      	mov	r1, sp
   12b06:	4b0e      	ldr	r3, [pc, #56]	; (12b40 <LORAWAN_SetAttr+0x308>)
   12b08:	4798      	blx	r3
   12b0a:	0006      	movs	r6, r0
   12b0c:	2808      	cmp	r0, #8
   12b0e:	d000      	beq.n	12b12 <LORAWAN_SetAttr+0x2da>
   12b10:	e717      	b.n	12942 <LORAWAN_SetAttr+0x10a>
   12b12:	466b      	mov	r3, sp
   12b14:	781b      	ldrb	r3, [r3, #0]
   12b16:	34e9      	adds	r4, #233	; 0xe9
   12b18:	7023      	strb	r3, [r4, #0]
   12b1a:	210a      	movs	r1, #10
   12b1c:	2000      	movs	r0, #0
   12b1e:	e7ea      	b.n	12af6 <LORAWAN_SetAttr+0x2be>
   12b20:	780b      	ldrb	r3, [r1, #0]
   12b22:	2103      	movs	r1, #3
   12b24:	34ff      	adds	r4, #255	; 0xff
   12b26:	7063      	strb	r3, [r4, #1]
   12b28:	2000      	movs	r0, #0
   12b2a:	e710      	b.n	1294e <LORAWAN_SetAttr+0x116>
   12b2c:	20003180 	.word	0x20003180
   12b30:	00016c47 	.word	0x00016c47
   12b34:	00009569 	.word	0x00009569
   12b38:	0000e7b5 	.word	0x0000e7b5
   12b3c:	0000022d 	.word	0x0000022d
   12b40:	0000d04d 	.word	0x0000d04d
   12b44:	680b      	ldr	r3, [r1, #0]
   12b46:	260a      	movs	r6, #10
   12b48:	1c5a      	adds	r2, r3, #1
   12b4a:	d09f      	beq.n	12a8c <LORAWAN_SetAttr+0x254>
   12b4c:	2115      	movs	r1, #21
   12b4e:	2000      	movs	r0, #0
   12b50:	3488      	adds	r4, #136	; 0x88
   12b52:	6023      	str	r3, [r4, #0]
   12b54:	4b7f      	ldr	r3, [pc, #508]	; (12d54 <LORAWAN_SetAttr+0x51c>)
   12b56:	4798      	blx	r3
   12b58:	e72c      	b.n	129b4 <LORAWAN_SetAttr+0x17c>
   12b5a:	680b      	ldr	r3, [r1, #0]
   12b5c:	260a      	movs	r6, #10
   12b5e:	1c5a      	adds	r2, r3, #1
   12b60:	d100      	bne.n	12b64 <LORAWAN_SetAttr+0x32c>
   12b62:	e793      	b.n	12a8c <LORAWAN_SetAttr+0x254>
   12b64:	0031      	movs	r1, r6
   12b66:	348c      	adds	r4, #140	; 0x8c
   12b68:	6023      	str	r3, [r4, #0]
   12b6a:	2001      	movs	r0, #1
   12b6c:	e7f2      	b.n	12b54 <LORAWAN_SetAttr+0x31c>
   12b6e:	0026      	movs	r6, r4
   12b70:	880b      	ldrh	r3, [r1, #0]
   12b72:	36d0      	adds	r6, #208	; 0xd0
   12b74:	210c      	movs	r1, #12
   12b76:	2000      	movs	r0, #0
   12b78:	4d76      	ldr	r5, [pc, #472]	; (12d54 <LORAWAN_SetAttr+0x51c>)
   12b7a:	8033      	strh	r3, [r6, #0]
   12b7c:	47a8      	blx	r5
   12b7e:	22fa      	movs	r2, #250	; 0xfa
   12b80:	8833      	ldrh	r3, [r6, #0]
   12b82:	0092      	lsls	r2, r2, #2
   12b84:	189b      	adds	r3, r3, r2
   12b86:	34d2      	adds	r4, #210	; 0xd2
   12b88:	8023      	strh	r3, [r4, #0]
   12b8a:	210d      	movs	r1, #13
   12b8c:	2000      	movs	r0, #0
   12b8e:	e745      	b.n	12a1c <LORAWAN_SetAttr+0x1e4>
   12b90:	780b      	ldrb	r3, [r1, #0]
   12b92:	260a      	movs	r6, #10
   12b94:	2b0f      	cmp	r3, #15
   12b96:	d900      	bls.n	12b9a <LORAWAN_SetAttr+0x362>
   12b98:	e778      	b.n	12a8c <LORAWAN_SetAttr+0x254>
   12b9a:	3498      	adds	r4, #152	; 0x98
   12b9c:	7023      	strb	r3, [r4, #0]
   12b9e:	e709      	b.n	129b4 <LORAWAN_SetAttr+0x17c>
   12ba0:	880b      	ldrh	r3, [r1, #0]
   12ba2:	34d4      	adds	r4, #212	; 0xd4
   12ba4:	8023      	strh	r3, [r4, #0]
   12ba6:	210e      	movs	r1, #14
   12ba8:	e7be      	b.n	12b28 <LORAWAN_SetAttr+0x2f0>
   12baa:	880b      	ldrh	r3, [r1, #0]
   12bac:	34d6      	adds	r4, #214	; 0xd6
   12bae:	8023      	strh	r3, [r4, #0]
   12bb0:	210f      	movs	r1, #15
   12bb2:	e7b9      	b.n	12b28 <LORAWAN_SetAttr+0x2f0>
   12bb4:	780b      	ldrb	r3, [r1, #0]
   12bb6:	34dc      	adds	r4, #220	; 0xdc
   12bb8:	7023      	strb	r3, [r4, #0]
   12bba:	2111      	movs	r1, #17
   12bbc:	e7b4      	b.n	12b28 <LORAWAN_SetAttr+0x2f0>
   12bbe:	780b      	ldrb	r3, [r1, #0]
   12bc0:	34dd      	adds	r4, #221	; 0xdd
   12bc2:	7023      	strb	r3, [r4, #0]
   12bc4:	2112      	movs	r1, #18
   12bc6:	e7af      	b.n	12b28 <LORAWAN_SetAttr+0x2f0>
   12bc8:	880b      	ldrh	r3, [r1, #0]
   12bca:	34da      	adds	r4, #218	; 0xda
   12bcc:	8023      	strh	r3, [r4, #0]
   12bce:	2110      	movs	r1, #16
   12bd0:	e7aa      	b.n	12b28 <LORAWAN_SetAttr+0x2f0>
   12bd2:	780b      	ldrb	r3, [r1, #0]
   12bd4:	34e2      	adds	r4, #226	; 0xe2
   12bd6:	7023      	strb	r3, [r4, #0]
   12bd8:	2114      	movs	r1, #20
   12bda:	e7a5      	b.n	12b28 <LORAWAN_SetAttr+0x2f0>
   12bdc:	780b      	ldrb	r3, [r1, #0]
   12bde:	34e1      	adds	r4, #225	; 0xe1
   12be0:	7023      	strb	r3, [r4, #0]
   12be2:	e69b      	b.n	1291c <LORAWAN_SetAttr+0xe4>
   12be4:	780b      	ldrb	r3, [r1, #0]
   12be6:	34e8      	adds	r4, #232	; 0xe8
   12be8:	e7fa      	b.n	12be0 <LORAWAN_SetAttr+0x3a8>
   12bea:	2001      	movs	r0, #1
   12bec:	780b      	ldrb	r3, [r1, #0]
   12bee:	2110      	movs	r1, #16
   12bf0:	3484      	adds	r4, #132	; 0x84
   12bf2:	4003      	ands	r3, r0
   12bf4:	011a      	lsls	r2, r3, #4
   12bf6:	7823      	ldrb	r3, [r4, #0]
   12bf8:	438b      	bics	r3, r1
   12bfa:	4313      	orrs	r3, r2
   12bfc:	7023      	strb	r3, [r4, #0]
   12bfe:	3905      	subs	r1, #5
   12c00:	e6a5      	b.n	1294e <LORAWAN_SetAttr+0x116>
   12c02:	7909      	ldrb	r1, [r1, #4]
   12c04:	7828      	ldrb	r0, [r5, #0]
   12c06:	4b54      	ldr	r3, [pc, #336]	; (12d58 <LORAWAN_SetAttr+0x520>)
   12c08:	4798      	blx	r3
   12c0a:	0006      	movs	r6, r0
   12c0c:	e73e      	b.n	12a8c <LORAWAN_SetAttr+0x254>
   12c0e:	7909      	ldrb	r1, [r1, #4]
   12c10:	7828      	ldrb	r0, [r5, #0]
   12c12:	4b52      	ldr	r3, [pc, #328]	; (12d5c <LORAWAN_SetAttr+0x524>)
   12c14:	e7f8      	b.n	12c08 <LORAWAN_SetAttr+0x3d0>
   12c16:	7808      	ldrb	r0, [r1, #0]
   12c18:	4b51      	ldr	r3, [pc, #324]	; (12d60 <LORAWAN_SetAttr+0x528>)
   12c1a:	6849      	ldr	r1, [r1, #4]
   12c1c:	4798      	blx	r3
   12c1e:	e7f4      	b.n	12c0a <LORAWAN_SetAttr+0x3d2>
   12c20:	7909      	ldrb	r1, [r1, #4]
   12c22:	6828      	ldr	r0, [r5, #0]
   12c24:	4b4f      	ldr	r3, [pc, #316]	; (12d64 <LORAWAN_SetAttr+0x52c>)
   12c26:	4798      	blx	r3
   12c28:	e7ef      	b.n	12c0a <LORAWAN_SetAttr+0x3d2>
   12c2a:	786b      	ldrb	r3, [r5, #1]
   12c2c:	7828      	ldrb	r0, [r5, #0]
   12c2e:	021b      	lsls	r3, r3, #8
   12c30:	4303      	orrs	r3, r0
   12c32:	78a8      	ldrb	r0, [r5, #2]
   12c34:	7909      	ldrb	r1, [r1, #4]
   12c36:	0400      	lsls	r0, r0, #16
   12c38:	4303      	orrs	r3, r0
   12c3a:	78e8      	ldrb	r0, [r5, #3]
   12c3c:	0600      	lsls	r0, r0, #24
   12c3e:	4318      	orrs	r0, r3
   12c40:	4b49      	ldr	r3, [pc, #292]	; (12d68 <LORAWAN_SetAttr+0x530>)
   12c42:	e7f0      	b.n	12c26 <LORAWAN_SetAttr+0x3ee>
   12c44:	7808      	ldrb	r0, [r1, #0]
   12c46:	4b49      	ldr	r3, [pc, #292]	; (12d6c <LORAWAN_SetAttr+0x534>)
   12c48:	4798      	blx	r3
   12c4a:	e7de      	b.n	12c0a <LORAWAN_SetAttr+0x3d2>
   12c4c:	8808      	ldrh	r0, [r1, #0]
   12c4e:	4b48      	ldr	r3, [pc, #288]	; (12d70 <LORAWAN_SetAttr+0x538>)
   12c50:	4798      	blx	r3
   12c52:	e663      	b.n	1291c <LORAWAN_SetAttr+0xe4>
   12c54:	4b47      	ldr	r3, [pc, #284]	; (12d74 <LORAWAN_SetAttr+0x53c>)
   12c56:	6019      	str	r1, [r3, #0]
   12c58:	e673      	b.n	12942 <LORAWAN_SetAttr+0x10a>
   12c5a:	7809      	ldrb	r1, [r1, #0]
   12c5c:	7868      	ldrb	r0, [r5, #1]
   12c5e:	4b46      	ldr	r3, [pc, #280]	; (12d78 <LORAWAN_SetAttr+0x540>)
   12c60:	4798      	blx	r3
   12c62:	e7d2      	b.n	12c0a <LORAWAN_SetAttr+0x3d2>
   12c64:	7809      	ldrb	r1, [r1, #0]
   12c66:	4b45      	ldr	r3, [pc, #276]	; (12d7c <LORAWAN_SetAttr+0x544>)
   12c68:	1c68      	adds	r0, r5, #1
   12c6a:	4798      	blx	r3
   12c6c:	e7cd      	b.n	12c0a <LORAWAN_SetAttr+0x3d2>
   12c6e:	7809      	ldrb	r1, [r1, #0]
   12c70:	1c68      	adds	r0, r5, #1
   12c72:	4b43      	ldr	r3, [pc, #268]	; (12d80 <LORAWAN_SetAttr+0x548>)
   12c74:	e7f9      	b.n	12c6a <LORAWAN_SetAttr+0x432>
   12c76:	7809      	ldrb	r1, [r1, #0]
   12c78:	6868      	ldr	r0, [r5, #4]
   12c7a:	4b42      	ldr	r3, [pc, #264]	; (12d84 <LORAWAN_SetAttr+0x54c>)
   12c7c:	e7f5      	b.n	12c6a <LORAWAN_SetAttr+0x432>
   12c7e:	7809      	ldrb	r1, [r1, #0]
   12c80:	6868      	ldr	r0, [r5, #4]
   12c82:	4b41      	ldr	r3, [pc, #260]	; (12d88 <LORAWAN_SetAttr+0x550>)
   12c84:	e7f1      	b.n	12c6a <LORAWAN_SetAttr+0x432>
   12c86:	7809      	ldrb	r1, [r1, #0]
   12c88:	6868      	ldr	r0, [r5, #4]
   12c8a:	4b40      	ldr	r3, [pc, #256]	; (12d8c <LORAWAN_SetAttr+0x554>)
   12c8c:	e7ed      	b.n	12c6a <LORAWAN_SetAttr+0x432>
   12c8e:	7809      	ldrb	r1, [r1, #0]
   12c90:	6868      	ldr	r0, [r5, #4]
   12c92:	4b3f      	ldr	r3, [pc, #252]	; (12d90 <LORAWAN_SetAttr+0x558>)
   12c94:	e7e9      	b.n	12c6a <LORAWAN_SetAttr+0x432>
   12c96:	7809      	ldrb	r1, [r1, #0]
   12c98:	7868      	ldrb	r0, [r5, #1]
   12c9a:	4b3e      	ldr	r3, [pc, #248]	; (12d94 <LORAWAN_SetAttr+0x55c>)
   12c9c:	e7e0      	b.n	12c60 <LORAWAN_SetAttr+0x428>
   12c9e:	7809      	ldrb	r1, [r1, #0]
   12ca0:	7868      	ldrb	r0, [r5, #1]
   12ca2:	4b3d      	ldr	r3, [pc, #244]	; (12d98 <LORAWAN_SetAttr+0x560>)
   12ca4:	e7dc      	b.n	12c60 <LORAWAN_SetAttr+0x428>
   12ca6:	2300      	movs	r3, #0
   12ca8:	466a      	mov	r2, sp
   12caa:	7809      	ldrb	r1, [r1, #0]
   12cac:	7013      	strb	r3, [r2, #0]
   12cae:	4299      	cmp	r1, r3
   12cb0:	d014      	beq.n	12cdc <LORAWAN_SetAttr+0x4a4>
   12cb2:	0022      	movs	r2, r4
   12cb4:	2102      	movs	r1, #2
   12cb6:	32ff      	adds	r2, #255	; 0xff
   12cb8:	7f53      	ldrb	r3, [r2, #29]
   12cba:	420b      	tst	r3, r1
   12cbc:	d001      	beq.n	12cc2 <LORAWAN_SetAttr+0x48a>
   12cbe:	438b      	bics	r3, r1
   12cc0:	7753      	strb	r3, [r2, #29]
   12cc2:	2220      	movs	r2, #32
   12cc4:	34ff      	adds	r4, #255	; 0xff
   12cc6:	7f63      	ldrb	r3, [r4, #29]
   12cc8:	4213      	tst	r3, r2
   12cca:	d100      	bne.n	12cce <LORAWAN_SetAttr+0x496>
   12ccc:	e626      	b.n	1291c <LORAWAN_SetAttr+0xe4>
   12cce:	4393      	bics	r3, r2
   12cd0:	7763      	strb	r3, [r4, #29]
   12cd2:	4669      	mov	r1, sp
   12cd4:	4b31      	ldr	r3, [pc, #196]	; (12d9c <LORAWAN_SetAttr+0x564>)
   12cd6:	2038      	movs	r0, #56	; 0x38
   12cd8:	4798      	blx	r3
   12cda:	e61f      	b.n	1291c <LORAWAN_SetAttr+0xe4>
   12cdc:	4a30      	ldr	r2, [pc, #192]	; (12da0 <LORAWAN_SetAttr+0x568>)
   12cde:	4b31      	ldr	r3, [pc, #196]	; (12da4 <LORAWAN_SetAttr+0x56c>)
   12ce0:	200e      	movs	r0, #14
   12ce2:	4798      	blx	r3
   12ce4:	e61a      	b.n	1291c <LORAWAN_SetAttr+0xe4>
   12ce6:	466b      	mov	r3, sp
   12ce8:	780a      	ldrb	r2, [r1, #0]
   12cea:	34ff      	adds	r4, #255	; 0xff
   12cec:	701a      	strb	r2, [r3, #0]
   12cee:	2320      	movs	r3, #32
   12cf0:	2a00      	cmp	r2, #0
   12cf2:	d007      	beq.n	12d04 <LORAWAN_SetAttr+0x4cc>
   12cf4:	7f62      	ldrb	r2, [r4, #29]
   12cf6:	4313      	orrs	r3, r2
   12cf8:	7763      	strb	r3, [r4, #29]
   12cfa:	4669      	mov	r1, sp
   12cfc:	4b27      	ldr	r3, [pc, #156]	; (12d9c <LORAWAN_SetAttr+0x564>)
   12cfe:	2038      	movs	r0, #56	; 0x38
   12d00:	4798      	blx	r3
   12d02:	e782      	b.n	12c0a <LORAWAN_SetAttr+0x3d2>
   12d04:	7f62      	ldrb	r2, [r4, #29]
   12d06:	260a      	movs	r6, #10
   12d08:	421a      	tst	r2, r3
   12d0a:	d100      	bne.n	12d0e <LORAWAN_SetAttr+0x4d6>
   12d0c:	e6be      	b.n	12a8c <LORAWAN_SetAttr+0x254>
   12d0e:	439a      	bics	r2, r3
   12d10:	7762      	strb	r2, [r4, #29]
   12d12:	e7f2      	b.n	12cfa <LORAWAN_SetAttr+0x4c2>
   12d14:	780b      	ldrb	r3, [r1, #0]
   12d16:	260a      	movs	r6, #10
   12d18:	2b08      	cmp	r3, #8
   12d1a:	d900      	bls.n	12d1e <LORAWAN_SetAttr+0x4e6>
   12d1c:	e6b6      	b.n	12a8c <LORAWAN_SetAttr+0x254>
   12d1e:	228b      	movs	r2, #139	; 0x8b
   12d20:	0092      	lsls	r2, r2, #2
   12d22:	54a3      	strb	r3, [r4, r2]
   12d24:	210d      	movs	r1, #13
   12d26:	e720      	b.n	12b6a <LORAWAN_SetAttr+0x332>
   12d28:	780a      	ldrb	r2, [r1, #0]
   12d2a:	4b1f      	ldr	r3, [pc, #124]	; (12da8 <LORAWAN_SetAttr+0x570>)
   12d2c:	54e2      	strb	r2, [r4, r3]
   12d2e:	e5f5      	b.n	1291c <LORAWAN_SetAttr+0xe4>
   12d30:	4b1e      	ldr	r3, [pc, #120]	; (12dac <LORAWAN_SetAttr+0x574>)
   12d32:	4798      	blx	r3
   12d34:	e769      	b.n	12c0a <LORAWAN_SetAttr+0x3d2>
   12d36:	4b1e      	ldr	r3, [pc, #120]	; (12db0 <LORAWAN_SetAttr+0x578>)
   12d38:	e7fb      	b.n	12d32 <LORAWAN_SetAttr+0x4fa>
   12d3a:	780a      	ldrb	r2, [r1, #0]
   12d3c:	2302      	movs	r3, #2
   12d3e:	34ff      	adds	r4, #255	; 0xff
   12d40:	2a00      	cmp	r2, #0
   12d42:	d003      	beq.n	12d4c <LORAWAN_SetAttr+0x514>
   12d44:	7f62      	ldrb	r2, [r4, #29]
   12d46:	4313      	orrs	r3, r2
   12d48:	7763      	strb	r3, [r4, #29]
   12d4a:	e5e7      	b.n	1291c <LORAWAN_SetAttr+0xe4>
   12d4c:	7f62      	ldrb	r2, [r4, #29]
   12d4e:	439a      	bics	r2, r3
   12d50:	7762      	strb	r2, [r4, #29]
   12d52:	e5e3      	b.n	1291c <LORAWAN_SetAttr+0xe4>
   12d54:	00009569 	.word	0x00009569
   12d58:	00011cc1 	.word	0x00011cc1
   12d5c:	00011c51 	.word	0x00011c51
   12d60:	00011479 	.word	0x00011479
   12d64:	000113f1 	.word	0x000113f1
   12d68:	0001142d 	.word	0x0001142d
   12d6c:	000127b9 	.word	0x000127b9
   12d70:	0001068d 	.word	0x0001068d
   12d74:	200034d8 	.word	0x200034d8
   12d78:	000132cd 	.word	0x000132cd
   12d7c:	0001352d 	.word	0x0001352d
   12d80:	00013579 	.word	0x00013579
   12d84:	000134e5 	.word	0x000134e5
   12d88:	000135c5 	.word	0x000135c5
   12d8c:	000135e5 	.word	0x000135e5
   12d90:	00013601 	.word	0x00013601
   12d94:	00013645 	.word	0x00013645
   12d98:	00013681 	.word	0x00013681
   12d9c:	0000d069 	.word	0x0000d069
   12da0:	2000329c 	.word	0x2000329c
   12da4:	0000d031 	.word	0x0000d031
   12da8:	0000022d 	.word	0x0000022d
   12dac:	00010729 	.word	0x00010729
   12db0:	00010751 	.word	0x00010751

00012db4 <AssemblePacket>:
   12db4:	b5f0      	push	{r4, r5, r6, r7, lr}
   12db6:	2710      	movs	r7, #16
   12db8:	b08f      	sub	sp, #60	; 0x3c
   12dba:	9308      	str	r3, [sp, #32]
   12dbc:	ab0d      	add	r3, sp, #52	; 0x34
   12dbe:	801f      	strh	r7, [r3, #0]
   12dc0:	231e      	movs	r3, #30
   12dc2:	920a      	str	r2, [sp, #40]	; 0x28
   12dc4:	aa06      	add	r2, sp, #24
   12dc6:	189b      	adds	r3, r3, r2
   12dc8:	2500      	movs	r5, #0
   12dca:	2210      	movs	r2, #16
   12dcc:	ac0c      	add	r4, sp, #48	; 0x30
   12dce:	9006      	str	r0, [sp, #24]
   12dd0:	910b      	str	r1, [sp, #44]	; 0x2c
   12dd2:	32ff      	adds	r2, #255	; 0xff
   12dd4:	0029      	movs	r1, r5
   12dd6:	4ed1      	ldr	r6, [pc, #836]	; (1311c <AssemblePacket+0x368>)
   12dd8:	7025      	strb	r5, [r4, #0]
   12dda:	48d1      	ldr	r0, [pc, #836]	; (13120 <AssemblePacket+0x36c>)
   12ddc:	801d      	strh	r5, [r3, #0]
   12dde:	47b0      	blx	r6
   12de0:	003a      	movs	r2, r7
   12de2:	0029      	movs	r1, r5
   12de4:	48cf      	ldr	r0, [pc, #828]	; (13124 <AssemblePacket+0x370>)
   12de6:	47b0      	blx	r6
   12de8:	221f      	movs	r2, #31
   12dea:	7823      	ldrb	r3, [r4, #0]
   12dec:	9906      	ldr	r1, [sp, #24]
   12dee:	4013      	ands	r3, r2
   12df0:	42a9      	cmp	r1, r5
   12df2:	d100      	bne.n	12df6 <AssemblePacket+0x42>
   12df4:	e0dc      	b.n	12fb0 <AssemblePacket+0x1fc>
   12df6:	3a9f      	subs	r2, #159	; 0x9f
   12df8:	4313      	orrs	r3, r2
   12dfa:	7023      	strb	r3, [r4, #0]
   12dfc:	4bca      	ldr	r3, [pc, #808]	; (13128 <AssemblePacket+0x374>)
   12dfe:	3281      	adds	r2, #129	; 0x81
   12e00:	3394      	adds	r3, #148	; 0x94
   12e02:	7819      	ldrb	r1, [r3, #0]
   12e04:	430a      	orrs	r2, r1
   12e06:	701a      	strb	r2, [r3, #0]
   12e08:	22e0      	movs	r2, #224	; 0xe0
   12e0a:	7823      	ldrb	r3, [r4, #0]
   12e0c:	48c4      	ldr	r0, [pc, #784]	; (13120 <AssemblePacket+0x36c>)
   12e0e:	4013      	ands	r3, r2
   12e10:	7023      	strb	r3, [r4, #0]
   12e12:	4cc5      	ldr	r4, [pc, #788]	; (13128 <AssemblePacket+0x374>)
   12e14:	7403      	strb	r3, [r0, #16]
   12e16:	3adc      	subs	r2, #220	; 0xdc
   12e18:	4bc4      	ldr	r3, [pc, #784]	; (1312c <AssemblePacket+0x378>)
   12e1a:	3011      	adds	r0, #17
   12e1c:	1c61      	adds	r1, r4, #1
   12e1e:	4798      	blx	r3
   12e20:	2215      	movs	r2, #21
   12e22:	ab0d      	add	r3, sp, #52	; 0x34
   12e24:	0025      	movs	r5, r4
   12e26:	801a      	strh	r2, [r3, #0]
   12e28:	2600      	movs	r6, #0
   12e2a:	466b      	mov	r3, sp
   12e2c:	3584      	adds	r5, #132	; 0x84
   12e2e:	761e      	strb	r6, [r3, #24]
   12e30:	782b      	ldrb	r3, [r5, #0]
   12e32:	069b      	lsls	r3, r3, #26
   12e34:	d400      	bmi.n	12e38 <AssemblePacket+0x84>
   12e36:	e130      	b.n	1309a <AssemblePacket+0x2e6>
   12e38:	0027      	movs	r7, r4
   12e3a:	4bbd      	ldr	r3, [pc, #756]	; (13130 <AssemblePacket+0x37c>)
   12e3c:	37f3      	adds	r7, #243	; 0xf3
   12e3e:	781a      	ldrb	r2, [r3, #0]
   12e40:	783b      	ldrb	r3, [r7, #0]
   12e42:	429a      	cmp	r2, r3
   12e44:	d31e      	bcc.n	12e84 <AssemblePacket+0xd0>
   12e46:	2180      	movs	r1, #128	; 0x80
   12e48:	466b      	mov	r3, sp
   12e4a:	0022      	movs	r2, r4
   12e4c:	4249      	negs	r1, r1
   12e4e:	32ca      	adds	r2, #202	; 0xca
   12e50:	7619      	strb	r1, [r3, #24]
   12e52:	8813      	ldrh	r3, [r2, #0]
   12e54:	3301      	adds	r3, #1
   12e56:	b29b      	uxth	r3, r3
   12e58:	8013      	strh	r3, [r2, #0]
   12e5a:	0022      	movs	r2, r4
   12e5c:	32dc      	adds	r2, #220	; 0xdc
   12e5e:	7812      	ldrb	r2, [r2, #0]
   12e60:	4293      	cmp	r3, r2
   12e62:	d30f      	bcc.n	12e84 <AssemblePacket+0xd0>
   12e64:	2040      	movs	r0, #64	; 0x40
   12e66:	4308      	orrs	r0, r1
   12e68:	9006      	str	r0, [sp, #24]
   12e6a:	0020      	movs	r0, r4
   12e6c:	3094      	adds	r0, #148	; 0x94
   12e6e:	7801      	ldrb	r1, [r0, #0]
   12e70:	4684      	mov	ip, r0
   12e72:	2010      	movs	r0, #16
   12e74:	4301      	orrs	r1, r0
   12e76:	4660      	mov	r0, ip
   12e78:	7001      	strb	r1, [r0, #0]
   12e7a:	4293      	cmp	r3, r2
   12e7c:	d000      	beq.n	12e80 <AssemblePacket+0xcc>
   12e7e:	e09b      	b.n	12fb8 <AssemblePacket+0x204>
   12e80:	34f6      	adds	r4, #246	; 0xf6
   12e82:	7026      	strb	r6, [r4, #0]
   12e84:	4da8      	ldr	r5, [pc, #672]	; (13128 <AssemblePacket+0x374>)
   12e86:	2102      	movs	r1, #2
   12e88:	002a      	movs	r2, r5
   12e8a:	3294      	adds	r2, #148	; 0x94
   12e8c:	7813      	ldrb	r3, [r2, #0]
   12e8e:	420b      	tst	r3, r1
   12e90:	d005      	beq.n	12e9e <AssemblePacket+0xea>
   12e92:	2020      	movs	r0, #32
   12e94:	9c06      	ldr	r4, [sp, #24]
   12e96:	438b      	bics	r3, r1
   12e98:	4304      	orrs	r4, r0
   12e9a:	9406      	str	r4, [sp, #24]
   12e9c:	7013      	strb	r3, [r2, #0]
   12e9e:	2310      	movs	r3, #16
   12ea0:	9c06      	ldr	r4, [sp, #24]
   12ea2:	439c      	bics	r4, r3
   12ea4:	002b      	movs	r3, r5
   12ea6:	33e0      	adds	r3, #224	; 0xe0
   12ea8:	781b      	ldrb	r3, [r3, #0]
   12eaa:	9309      	str	r3, [sp, #36]	; 0x24
   12eac:	2b00      	cmp	r3, #0
   12eae:	d003      	beq.n	12eb8 <AssemblePacket+0x104>
   12eb0:	9b08      	ldr	r3, [sp, #32]
   12eb2:	2b00      	cmp	r3, #0
   12eb4:	d000      	beq.n	12eb8 <AssemblePacket+0x104>
   12eb6:	e0f6      	b.n	130a6 <AssemblePacket+0x2f2>
   12eb8:	230f      	movs	r3, #15
   12eba:	439c      	bics	r4, r3
   12ebc:	466b      	mov	r3, sp
   12ebe:	9406      	str	r4, [sp, #24]
   12ec0:	ac0d      	add	r4, sp, #52	; 0x34
   12ec2:	8826      	ldrh	r6, [r4, #0]
   12ec4:	4f96      	ldr	r7, [pc, #600]	; (13120 <AssemblePacket+0x36c>)
   12ec6:	7e1b      	ldrb	r3, [r3, #24]
   12ec8:	1c70      	adds	r0, r6, #1
   12eca:	b280      	uxth	r0, r0
   12ecc:	55bb      	strb	r3, [r7, r6]
   12ece:	19c0      	adds	r0, r0, r7
   12ed0:	4b96      	ldr	r3, [pc, #600]	; (1312c <AssemblePacket+0x378>)
   12ed2:	2202      	movs	r2, #2
   12ed4:	4997      	ldr	r1, [pc, #604]	; (13134 <AssemblePacket+0x380>)
   12ed6:	4798      	blx	r3
   12ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12eda:	3603      	adds	r6, #3
   12edc:	8026      	strh	r6, [r4, #0]
   12ede:	2b00      	cmp	r3, #0
   12ee0:	d100      	bne.n	12ee4 <AssemblePacket+0x130>
   12ee2:	e0e7      	b.n	130b4 <AssemblePacket+0x300>
   12ee4:	9b08      	ldr	r3, [sp, #32]
   12ee6:	2b00      	cmp	r3, #0
   12ee8:	d004      	beq.n	12ef4 <AssemblePacket+0x140>
   12eea:	2201      	movs	r2, #1
   12eec:	0021      	movs	r1, r4
   12eee:	0038      	movs	r0, r7
   12ef0:	4b91      	ldr	r3, [pc, #580]	; (13138 <AssemblePacket+0x384>)
   12ef2:	4798      	blx	r3
   12ef4:	466a      	mov	r2, sp
   12ef6:	212c      	movs	r1, #44	; 0x2c
   12ef8:	1852      	adds	r2, r2, r1
   12efa:	8823      	ldrh	r3, [r4, #0]
   12efc:	7812      	ldrb	r2, [r2, #0]
   12efe:	1c5e      	adds	r6, r3, #1
   12f00:	54fa      	strb	r2, [r7, r3]
   12f02:	9b08      	ldr	r3, [sp, #32]
   12f04:	b2b6      	uxth	r6, r6
   12f06:	8026      	strh	r6, [r4, #0]
   12f08:	2b00      	cmp	r3, #0
   12f0a:	d100      	bne.n	12f0e <AssemblePacket+0x15a>
   12f0c:	e0d6      	b.n	130bc <AssemblePacket+0x308>
   12f0e:	001a      	movs	r2, r3
   12f10:	990a      	ldr	r1, [sp, #40]	; 0x28
   12f12:	4b86      	ldr	r3, [pc, #536]	; (1312c <AssemblePacket+0x378>)
   12f14:	19b8      	adds	r0, r7, r6
   12f16:	4798      	blx	r3
   12f18:	2120      	movs	r1, #32
   12f1a:	466b      	mov	r3, sp
   12f1c:	185b      	adds	r3, r3, r1
   12f1e:	7819      	ldrb	r1, [r3, #0]
   12f20:	682b      	ldr	r3, [r5, #0]
   12f22:	002a      	movs	r2, r5
   12f24:	0a18      	lsrs	r0, r3, #8
   12f26:	792b      	ldrb	r3, [r5, #4]
   12f28:	3288      	adds	r2, #136	; 0x88
   12f2a:	061b      	lsls	r3, r3, #24
   12f2c:	4303      	orrs	r3, r0
   12f2e:	9304      	str	r3, [sp, #16]
   12f30:	2301      	movs	r3, #1
   12f32:	9301      	str	r3, [sp, #4]
   12f34:	4b81      	ldr	r3, [pc, #516]	; (1313c <AssemblePacket+0x388>)
   12f36:	9703      	str	r7, [sp, #12]
   12f38:	9602      	str	r6, [sp, #8]
   12f3a:	9300      	str	r3, [sp, #0]
   12f3c:	6813      	ldr	r3, [r2, #0]
   12f3e:	980a      	ldr	r0, [sp, #40]	; 0x28
   12f40:	2200      	movs	r2, #0
   12f42:	4c7f      	ldr	r4, [pc, #508]	; (13140 <AssemblePacket+0x38c>)
   12f44:	47a0      	blx	r4
   12f46:	2800      	cmp	r0, #0
   12f48:	d002      	beq.n	12f50 <AssemblePacket+0x19c>
   12f4a:	2020      	movs	r0, #32
   12f4c:	4b7d      	ldr	r3, [pc, #500]	; (13144 <AssemblePacket+0x390>)
   12f4e:	4798      	blx	r3
   12f50:	aa0d      	add	r2, sp, #52	; 0x34
   12f52:	8813      	ldrh	r3, [r2, #0]
   12f54:	9908      	ldr	r1, [sp, #32]
   12f56:	18cb      	adds	r3, r1, r3
   12f58:	8013      	strh	r3, [r2, #0]
   12f5a:	4c73      	ldr	r4, [pc, #460]	; (13128 <AssemblePacket+0x374>)
   12f5c:	ae0d      	add	r6, sp, #52	; 0x34
   12f5e:	0021      	movs	r1, r4
   12f60:	6823      	ldr	r3, [r4, #0]
   12f62:	8832      	ldrh	r2, [r6, #0]
   12f64:	0a18      	lsrs	r0, r3, #8
   12f66:	7923      	ldrb	r3, [r4, #4]
   12f68:	3a10      	subs	r2, #16
   12f6a:	061b      	lsls	r3, r3, #24
   12f6c:	4303      	orrs	r3, r0
   12f6e:	9300      	str	r3, [sp, #0]
   12f70:	3188      	adds	r1, #136	; 0x88
   12f72:	b2d2      	uxtb	r2, r2
   12f74:	2349      	movs	r3, #73	; 0x49
   12f76:	6809      	ldr	r1, [r1, #0]
   12f78:	2000      	movs	r0, #0
   12f7a:	4d73      	ldr	r5, [pc, #460]	; (13148 <AssemblePacket+0x394>)
   12f7c:	47a8      	blx	r5
   12f7e:	4f68      	ldr	r7, [pc, #416]	; (13120 <AssemblePacket+0x36c>)
   12f80:	2210      	movs	r2, #16
   12f82:	4968      	ldr	r1, [pc, #416]	; (13124 <AssemblePacket+0x370>)
   12f84:	0038      	movs	r0, r7
   12f86:	4b69      	ldr	r3, [pc, #420]	; (1312c <AssemblePacket+0x378>)
   12f88:	4798      	blx	r3
   12f8a:	8833      	ldrh	r3, [r6, #0]
   12f8c:	4a65      	ldr	r2, [pc, #404]	; (13124 <AssemblePacket+0x370>)
   12f8e:	9300      	str	r3, [sp, #0]
   12f90:	2102      	movs	r1, #2
   12f92:	003b      	movs	r3, r7
   12f94:	4d6d      	ldr	r5, [pc, #436]	; (1314c <AssemblePacket+0x398>)
   12f96:	486e      	ldr	r0, [pc, #440]	; (13150 <AssemblePacket+0x39c>)
   12f98:	47a8      	blx	r5
   12f9a:	8836      	ldrh	r6, [r6, #0]
   12f9c:	2204      	movs	r2, #4
   12f9e:	19f0      	adds	r0, r6, r7
   12fa0:	4960      	ldr	r1, [pc, #384]	; (13124 <AssemblePacket+0x370>)
   12fa2:	4b62      	ldr	r3, [pc, #392]	; (1312c <AssemblePacket+0x378>)
   12fa4:	4798      	blx	r3
   12fa6:	3e0c      	subs	r6, #12
   12fa8:	34ce      	adds	r4, #206	; 0xce
   12faa:	8026      	strh	r6, [r4, #0]
   12fac:	b00f      	add	sp, #60	; 0x3c
   12fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12fb0:	2240      	movs	r2, #64	; 0x40
   12fb2:	4313      	orrs	r3, r2
   12fb4:	7023      	strb	r3, [r4, #0]
   12fb6:	e727      	b.n	12e08 <AssemblePacket+0x54>
   12fb8:	4293      	cmp	r3, r2
   12fba:	d800      	bhi.n	12fbe <AssemblePacket+0x20a>
   12fbc:	e762      	b.n	12e84 <AssemblePacket+0xd0>
   12fbe:	0022      	movs	r2, r4
   12fc0:	0021      	movs	r1, r4
   12fc2:	32f6      	adds	r2, #246	; 0xf6
   12fc4:	7813      	ldrb	r3, [r2, #0]
   12fc6:	31dd      	adds	r1, #221	; 0xdd
   12fc8:	3301      	adds	r3, #1
   12fca:	b2db      	uxtb	r3, r3
   12fcc:	7013      	strb	r3, [r2, #0]
   12fce:	7809      	ldrb	r1, [r1, #0]
   12fd0:	4299      	cmp	r1, r3
   12fd2:	d900      	bls.n	12fd6 <AssemblePacket+0x222>
   12fd4:	e756      	b.n	12e84 <AssemblePacket+0xd0>
   12fd6:	231a      	movs	r3, #26
   12fd8:	7016      	strb	r6, [r2, #0]
   12fda:	aa06      	add	r2, sp, #24
   12fdc:	189b      	adds	r3, r3, r2
   12fde:	001a      	movs	r2, r3
   12fe0:	0031      	movs	r1, r6
   12fe2:	4b5c      	ldr	r3, [pc, #368]	; (13154 <AssemblePacket+0x3a0>)
   12fe4:	203c      	movs	r0, #60	; 0x3c
   12fe6:	4798      	blx	r3
   12fe8:	4b5b      	ldr	r3, [pc, #364]	; (13158 <AssemblePacket+0x3a4>)
   12fea:	781a      	ldrb	r2, [r3, #0]
   12fec:	ab06      	add	r3, sp, #24
   12fee:	7e9b      	ldrb	r3, [r3, #26]
   12ff0:	429a      	cmp	r2, r3
   12ff2:	d00d      	beq.n	13010 <AssemblePacket+0x25c>
   12ff4:	34ff      	adds	r4, #255	; 0xff
   12ff6:	7820      	ldrb	r0, [r4, #0]
   12ff8:	4b58      	ldr	r3, [pc, #352]	; (1315c <AssemblePacket+0x3a8>)
   12ffa:	4798      	blx	r3
   12ffc:	0031      	movs	r1, r6
   12ffe:	4a56      	ldr	r2, [pc, #344]	; (13158 <AssemblePacket+0x3a4>)
   13000:	4b54      	ldr	r3, [pc, #336]	; (13154 <AssemblePacket+0x3a0>)
   13002:	2035      	movs	r0, #53	; 0x35
   13004:	4798      	blx	r3
   13006:	210a      	movs	r1, #10
   13008:	0030      	movs	r0, r6
   1300a:	4b55      	ldr	r3, [pc, #340]	; (13160 <AssemblePacket+0x3ac>)
   1300c:	4798      	blx	r3
   1300e:	e739      	b.n	12e84 <AssemblePacket+0xd0>
   13010:	4b47      	ldr	r3, [pc, #284]	; (13130 <AssemblePacket+0x37c>)
   13012:	783a      	ldrb	r2, [r7, #0]
   13014:	781b      	ldrb	r3, [r3, #0]
   13016:	4293      	cmp	r3, r2
   13018:	d022      	beq.n	13060 <AssemblePacket+0x2ac>
   1301a:	d800      	bhi.n	1301e <AssemblePacket+0x26a>
   1301c:	e732      	b.n	12e84 <AssemblePacket+0xd0>
   1301e:	221b      	movs	r2, #27
   13020:	003d      	movs	r5, r7
   13022:	a906      	add	r1, sp, #24
   13024:	3b01      	subs	r3, #1
   13026:	1852      	adds	r2, r2, r1
   13028:	7013      	strb	r3, [r2, #0]
   1302a:	261b      	movs	r6, #27
   1302c:	ab06      	add	r3, sp, #24
   1302e:	18f6      	adds	r6, r6, r3
   13030:	782a      	ldrb	r2, [r5, #0]
   13032:	7833      	ldrb	r3, [r6, #0]
   13034:	429a      	cmp	r2, r3
   13036:	d900      	bls.n	1303a <AssemblePacket+0x286>
   13038:	e724      	b.n	12e84 <AssemblePacket+0xd0>
   1303a:	0031      	movs	r1, r6
   1303c:	2010      	movs	r0, #16
   1303e:	4f49      	ldr	r7, [pc, #292]	; (13164 <AssemblePacket+0x3b0>)
   13040:	47b8      	blx	r7
   13042:	2808      	cmp	r0, #8
   13044:	d000      	beq.n	13048 <AssemblePacket+0x294>
   13046:	e71d      	b.n	12e84 <AssemblePacket+0xd0>
   13048:	0031      	movs	r1, r6
   1304a:	3009      	adds	r0, #9
   1304c:	47b8      	blx	r7
   1304e:	7833      	ldrb	r3, [r6, #0]
   13050:	2808      	cmp	r0, #8
   13052:	d061      	beq.n	13118 <AssemblePacket+0x364>
   13054:	782a      	ldrb	r2, [r5, #0]
   13056:	429a      	cmp	r2, r3
   13058:	d2e7      	bcs.n	1302a <AssemblePacket+0x276>
   1305a:	3b01      	subs	r3, #1
   1305c:	7033      	strb	r3, [r6, #0]
   1305e:	e7e4      	b.n	1302a <AssemblePacket+0x276>
   13060:	34ff      	adds	r4, #255	; 0xff
   13062:	7820      	ldrb	r0, [r4, #0]
   13064:	4b40      	ldr	r3, [pc, #256]	; (13168 <AssemblePacket+0x3b4>)
   13066:	4798      	blx	r3
   13068:	231b      	movs	r3, #27
   1306a:	aa06      	add	r2, sp, #24
   1306c:	189b      	adds	r3, r3, r2
   1306e:	0019      	movs	r1, r3
   13070:	4c3e      	ldr	r4, [pc, #248]	; (1316c <AssemblePacket+0x3b8>)
   13072:	2013      	movs	r0, #19
   13074:	47a0      	blx	r4
   13076:	231b      	movs	r3, #27
   13078:	aa06      	add	r2, sp, #24
   1307a:	189b      	adds	r3, r3, r2
   1307c:	0019      	movs	r1, r3
   1307e:	2014      	movs	r0, #20
   13080:	47a0      	blx	r4
   13082:	2113      	movs	r1, #19
   13084:	0030      	movs	r0, r6
   13086:	4c36      	ldr	r4, [pc, #216]	; (13160 <AssemblePacket+0x3ac>)
   13088:	47a0      	blx	r4
   1308a:	2210      	movs	r2, #16
   1308c:	786b      	ldrb	r3, [r5, #1]
   1308e:	210b      	movs	r1, #11
   13090:	4313      	orrs	r3, r2
   13092:	706b      	strb	r3, [r5, #1]
   13094:	2001      	movs	r0, #1
   13096:	47a0      	blx	r4
   13098:	e6f4      	b.n	12e84 <AssemblePacket+0xd0>
   1309a:	2210      	movs	r2, #16
   1309c:	3494      	adds	r4, #148	; 0x94
   1309e:	7823      	ldrb	r3, [r4, #0]
   130a0:	4393      	bics	r3, r2
   130a2:	7023      	strb	r3, [r4, #0]
   130a4:	e6ee      	b.n	12e84 <AssemblePacket+0xd0>
   130a6:	4b32      	ldr	r3, [pc, #200]	; (13170 <AssemblePacket+0x3bc>)
   130a8:	4798      	blx	r3
   130aa:	230f      	movs	r3, #15
   130ac:	4018      	ands	r0, r3
   130ae:	439c      	bics	r4, r3
   130b0:	4304      	orrs	r4, r0
   130b2:	e703      	b.n	12ebc <AssemblePacket+0x108>
   130b4:	9b08      	ldr	r3, [sp, #32]
   130b6:	2b00      	cmp	r3, #0
   130b8:	d000      	beq.n	130bc <AssemblePacket+0x308>
   130ba:	e71b      	b.n	12ef4 <AssemblePacket+0x140>
   130bc:	4d1a      	ldr	r5, [pc, #104]	; (13128 <AssemblePacket+0x374>)
   130be:	002b      	movs	r3, r5
   130c0:	33e0      	adds	r3, #224	; 0xe0
   130c2:	781b      	ldrb	r3, [r3, #0]
   130c4:	2b00      	cmp	r3, #0
   130c6:	d100      	bne.n	130ca <AssemblePacket+0x316>
   130c8:	e747      	b.n	12f5a <AssemblePacket+0x1a6>
   130ca:	261e      	movs	r6, #30
   130cc:	ab06      	add	r3, sp, #24
   130ce:	18f6      	adds	r6, r6, r3
   130d0:	2200      	movs	r2, #0
   130d2:	0031      	movs	r1, r6
   130d4:	4827      	ldr	r0, [pc, #156]	; (13174 <AssemblePacket+0x3c0>)
   130d6:	4b18      	ldr	r3, [pc, #96]	; (13138 <AssemblePacket+0x384>)
   130d8:	4798      	blx	r3
   130da:	682b      	ldr	r3, [r5, #0]
   130dc:	7831      	ldrb	r1, [r6, #0]
   130de:	0a18      	lsrs	r0, r3, #8
   130e0:	792b      	ldrb	r3, [r5, #4]
   130e2:	9703      	str	r7, [sp, #12]
   130e4:	061b      	lsls	r3, r3, #24
   130e6:	4303      	orrs	r3, r0
   130e8:	9304      	str	r3, [sp, #16]
   130ea:	8823      	ldrh	r3, [r4, #0]
   130ec:	002a      	movs	r2, r5
   130ee:	9302      	str	r3, [sp, #8]
   130f0:	2302      	movs	r3, #2
   130f2:	9301      	str	r3, [sp, #4]
   130f4:	4b16      	ldr	r3, [pc, #88]	; (13150 <AssemblePacket+0x39c>)
   130f6:	3288      	adds	r2, #136	; 0x88
   130f8:	9300      	str	r3, [sp, #0]
   130fa:	6813      	ldr	r3, [r2, #0]
   130fc:	481d      	ldr	r0, [pc, #116]	; (13174 <AssemblePacket+0x3c0>)
   130fe:	2200      	movs	r2, #0
   13100:	4d0f      	ldr	r5, [pc, #60]	; (13140 <AssemblePacket+0x38c>)
   13102:	47a8      	blx	r5
   13104:	2800      	cmp	r0, #0
   13106:	d002      	beq.n	1310e <AssemblePacket+0x35a>
   13108:	2020      	movs	r0, #32
   1310a:	4b0e      	ldr	r3, [pc, #56]	; (13144 <AssemblePacket+0x390>)
   1310c:	4798      	blx	r3
   1310e:	8823      	ldrh	r3, [r4, #0]
   13110:	8832      	ldrh	r2, [r6, #0]
   13112:	189b      	adds	r3, r3, r2
   13114:	8023      	strh	r3, [r4, #0]
   13116:	e720      	b.n	12f5a <AssemblePacket+0x1a6>
   13118:	34e7      	adds	r4, #231	; 0xe7
   1311a:	e7c2      	b.n	130a2 <AssemblePacket+0x2ee>
   1311c:	00016c59 	.word	0x00016c59
   13120:	200033c8 	.word	0x200033c8
   13124:	20001eb5 	.word	0x20001eb5
   13128:	20003180 	.word	0x20003180
   1312c:	00016c47 	.word	0x00016c47
   13130:	20003267 	.word	0x20003267
   13134:	20003208 	.word	0x20003208
   13138:	000100bd 	.word	0x000100bd
   1313c:	200031b5 	.word	0x200031b5
   13140:	000111d1 	.word	0x000111d1
   13144:	00011291 	.word	0x00011291
   13148:	000103e9 	.word	0x000103e9
   1314c:	00007275 	.word	0x00007275
   13150:	200031a5 	.word	0x200031a5
   13154:	0000d031 	.word	0x0000d031
   13158:	20003269 	.word	0x20003269
   1315c:	0000d085 	.word	0x0000d085
   13160:	00009569 	.word	0x00009569
   13164:	0000d04d 	.word	0x0000d04d
   13168:	0000d111 	.word	0x0000d111
   1316c:	00012839 	.word	0x00012839
   13170:	0001001d 	.word	0x0001001d
   13174:	20002f44 	.word	0x20002f44

00013178 <LorawanClasscUlAckTimerCallback>:
   13178:	2102      	movs	r1, #2
   1317a:	4b03      	ldr	r3, [pc, #12]	; (13188 <LorawanClasscUlAckTimerCallback+0x10>)
   1317c:	3394      	adds	r3, #148	; 0x94
   1317e:	781a      	ldrb	r2, [r3, #0]
   13180:	438a      	bics	r2, r1
   13182:	701a      	strb	r2, [r3, #0]
   13184:	4770      	bx	lr
   13186:	46c0      	nop			; (mov r8, r8)
   13188:	20003180 	.word	0x20003180

0001318c <LorawanClasscValidateSend>:
   1318c:	2388      	movs	r3, #136	; 0x88
   1318e:	b510      	push	{r4, lr}
   13190:	4c0a      	ldr	r4, [pc, #40]	; (131bc <LorawanClasscValidateSend+0x30>)
   13192:	009b      	lsls	r3, r3, #2
   13194:	5ce3      	ldrb	r3, [r4, r3]
   13196:	2b00      	cmp	r3, #0
   13198:	d008      	beq.n	131ac <LorawanClasscValidateSend+0x20>
   1319a:	220e      	movs	r2, #14
   1319c:	3484      	adds	r4, #132	; 0x84
   1319e:	7823      	ldrb	r3, [r4, #0]
   131a0:	2008      	movs	r0, #8
   131a2:	4013      	ands	r3, r2
   131a4:	2b02      	cmp	r3, #2
   131a6:	d100      	bne.n	131aa <LorawanClasscValidateSend+0x1e>
   131a8:	2011      	movs	r0, #17
   131aa:	bd10      	pop	{r4, pc}
   131ac:	2394      	movs	r3, #148	; 0x94
   131ae:	005b      	lsls	r3, r3, #1
   131b0:	5ce0      	ldrb	r0, [r4, r3]
   131b2:	4b03      	ldr	r3, [pc, #12]	; (131c0 <LorawanClasscValidateSend+0x34>)
   131b4:	4798      	blx	r3
   131b6:	2800      	cmp	r0, #0
   131b8:	d1ef      	bne.n	1319a <LorawanClasscValidateSend+0xe>
   131ba:	e7f5      	b.n	131a8 <LorawanClasscValidateSend+0x1c>
   131bc:	20003180 	.word	0x20003180
   131c0:	0000d711 	.word	0x0000d711

000131c4 <LorawanClasscRxDone>:
   131c4:	221f      	movs	r2, #31
   131c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   131c8:	7803      	ldrb	r3, [r0, #0]
   131ca:	4c1c      	ldr	r4, [pc, #112]	; (1323c <LorawanClasscRxDone+0x78>)
   131cc:	4393      	bics	r3, r2
   131ce:	2ba0      	cmp	r3, #160	; 0xa0
   131d0:	d10c      	bne.n	131ec <LorawanClasscRxDone+0x28>
   131d2:	2694      	movs	r6, #148	; 0x94
   131d4:	0076      	lsls	r6, r6, #1
   131d6:	5da0      	ldrb	r0, [r4, r6]
   131d8:	4b19      	ldr	r3, [pc, #100]	; (13240 <LorawanClasscRxDone+0x7c>)
   131da:	4798      	blx	r3
   131dc:	1e05      	subs	r5, r0, #0
   131de:	d019      	beq.n	13214 <LorawanClasscRxDone+0x50>
   131e0:	0022      	movs	r2, r4
   131e2:	2102      	movs	r1, #2
   131e4:	3294      	adds	r2, #148	; 0x94
   131e6:	7813      	ldrb	r3, [r2, #0]
   131e8:	438b      	bics	r3, r1
   131ea:	7013      	strb	r3, [r2, #0]
   131ec:	0021      	movs	r1, r4
   131ee:	3184      	adds	r1, #132	; 0x84
   131f0:	780b      	ldrb	r3, [r1, #0]
   131f2:	220e      	movs	r2, #14
   131f4:	0018      	movs	r0, r3
   131f6:	4010      	ands	r0, r2
   131f8:	2806      	cmp	r0, #6
   131fa:	d103      	bne.n	13204 <LorawanClasscRxDone+0x40>
   131fc:	4393      	bics	r3, r2
   131fe:	3a04      	subs	r2, #4
   13200:	4313      	orrs	r3, r2
   13202:	700b      	strb	r3, [r1, #0]
   13204:	2390      	movs	r3, #144	; 0x90
   13206:	2201      	movs	r2, #1
   13208:	009b      	lsls	r3, r3, #2
   1320a:	54e2      	strb	r2, [r4, r3]
   1320c:	2000      	movs	r0, #0
   1320e:	4b0d      	ldr	r3, [pc, #52]	; (13244 <LorawanClasscRxDone+0x80>)
   13210:	4798      	blx	r3
   13212:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   13214:	4b0c      	ldr	r3, [pc, #48]	; (13248 <LorawanClasscRxDone+0x84>)
   13216:	5da6      	ldrb	r6, [r4, r6]
   13218:	4798      	blx	r3
   1321a:	4b0c      	ldr	r3, [pc, #48]	; (1324c <LorawanClasscRxDone+0x88>)
   1321c:	490c      	ldr	r1, [pc, #48]	; (13250 <LorawanClasscRxDone+0x8c>)
   1321e:	4798      	blx	r3
   13220:	23fa      	movs	r3, #250	; 0xfa
   13222:	009b      	lsls	r3, r3, #2
   13224:	18cb      	adds	r3, r1, r3
   13226:	21fa      	movs	r1, #250	; 0xfa
   13228:	0089      	lsls	r1, r1, #2
   1322a:	4359      	muls	r1, r3
   1322c:	9500      	str	r5, [sp, #0]
   1322e:	002a      	movs	r2, r5
   13230:	4b08      	ldr	r3, [pc, #32]	; (13254 <LorawanClasscRxDone+0x90>)
   13232:	0030      	movs	r0, r6
   13234:	4d08      	ldr	r5, [pc, #32]	; (13258 <LorawanClasscRxDone+0x94>)
   13236:	47a8      	blx	r5
   13238:	e7d8      	b.n	131ec <LorawanClasscRxDone+0x28>
   1323a:	46c0      	nop			; (mov r8, r8)
   1323c:	20003180 	.word	0x20003180
   13240:	0000d711 	.word	0x0000d711
   13244:	000116d1 	.word	0x000116d1
   13248:	0001738d 	.word	0x0001738d
   1324c:	00013cc5 	.word	0x00013cc5
   13250:	000007d1 	.word	0x000007d1
   13254:	00013179 	.word	0x00013179
   13258:	0000d579 	.word	0x0000d579

0001325c <LorawanClasscRxTimeout>:
   1325c:	4a0c      	ldr	r2, [pc, #48]	; (13290 <LorawanClasscRxTimeout+0x34>)
   1325e:	b510      	push	{r4, lr}
   13260:	0010      	movs	r0, r2
   13262:	3084      	adds	r0, #132	; 0x84
   13264:	7803      	ldrb	r3, [r0, #0]
   13266:	240e      	movs	r4, #14
   13268:	0019      	movs	r1, r3
   1326a:	4021      	ands	r1, r4
   1326c:	2906      	cmp	r1, #6
   1326e:	d107      	bne.n	13280 <LorawanClasscRxTimeout+0x24>
   13270:	2208      	movs	r2, #8
   13272:	43a3      	bics	r3, r4
   13274:	4313      	orrs	r3, r2
   13276:	7003      	strb	r3, [r0, #0]
   13278:	2000      	movs	r0, #0
   1327a:	4b06      	ldr	r3, [pc, #24]	; (13294 <LorawanClasscRxTimeout+0x38>)
   1327c:	4798      	blx	r3
   1327e:	e006      	b.n	1328e <LorawanClasscRxTimeout+0x32>
   13280:	290a      	cmp	r1, #10
   13282:	d1f9      	bne.n	13278 <LorawanClasscRxTimeout+0x1c>
   13284:	2388      	movs	r3, #136	; 0x88
   13286:	009b      	lsls	r3, r3, #2
   13288:	5cd3      	ldrb	r3, [r2, r3]
   1328a:	2b00      	cmp	r3, #0
   1328c:	d0f4      	beq.n	13278 <LorawanClasscRxTimeout+0x1c>
   1328e:	bd10      	pop	{r4, pc}
   13290:	20003180 	.word	0x20003180
   13294:	000116d1 	.word	0x000116d1

00013298 <LorawanClasscNotifyAppOnReceive>:
   13298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1329a:	001f      	movs	r7, r3
   1329c:	2394      	movs	r3, #148	; 0x94
   1329e:	0016      	movs	r6, r2
   132a0:	4a07      	ldr	r2, [pc, #28]	; (132c0 <LorawanClasscNotifyAppOnReceive+0x28>)
   132a2:	005b      	lsls	r3, r3, #1
   132a4:	0004      	movs	r4, r0
   132a6:	5cd0      	ldrb	r0, [r2, r3]
   132a8:	4b06      	ldr	r3, [pc, #24]	; (132c4 <LorawanClasscNotifyAppOnReceive+0x2c>)
   132aa:	000d      	movs	r5, r1
   132ac:	4798      	blx	r3
   132ae:	2800      	cmp	r0, #0
   132b0:	d105      	bne.n	132be <LorawanClasscNotifyAppOnReceive+0x26>
   132b2:	0020      	movs	r0, r4
   132b4:	003b      	movs	r3, r7
   132b6:	0032      	movs	r2, r6
   132b8:	0029      	movs	r1, r5
   132ba:	4c03      	ldr	r4, [pc, #12]	; (132c8 <LorawanClasscNotifyAppOnReceive+0x30>)
   132bc:	47a0      	blx	r4
   132be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   132c0:	20003180 	.word	0x20003180
   132c4:	0000d711 	.word	0x0000d711
   132c8:	000112f5 	.word	0x000112f5

000132cc <LorawanMcastEnable>:
   132cc:	0002      	movs	r2, r0
   132ce:	b510      	push	{r4, lr}
   132d0:	200a      	movs	r0, #10
   132d2:	2903      	cmp	r1, #3
   132d4:	d822      	bhi.n	1331c <LorawanMcastEnable+0x50>
   132d6:	4b1a      	ldr	r3, [pc, #104]	; (13340 <LorawanMcastEnable+0x74>)
   132d8:	2a00      	cmp	r2, #0
   132da:	d020      	beq.n	1331e <LorawanMcastEnable+0x52>
   132dc:	223c      	movs	r2, #60	; 0x3c
   132de:	434a      	muls	r2, r1
   132e0:	189a      	adds	r2, r3, r2
   132e2:	3259      	adds	r2, #89	; 0x59
   132e4:	32ff      	adds	r2, #255	; 0xff
   132e6:	7a12      	ldrb	r2, [r2, #8]
   132e8:	0754      	lsls	r4, r2, #29
   132ea:	d512      	bpl.n	13312 <LorawanMcastEnable+0x46>
   132ec:	0794      	lsls	r4, r2, #30
   132ee:	d510      	bpl.n	13312 <LorawanMcastEnable+0x46>
   132f0:	07d2      	lsls	r2, r2, #31
   132f2:	0fd2      	lsrs	r2, r2, #31
   132f4:	2a01      	cmp	r2, #1
   132f6:	d10c      	bne.n	13312 <LorawanMcastEnable+0x46>
   132f8:	001c      	movs	r4, r3
   132fa:	34fd      	adds	r4, #253	; 0xfd
   132fc:	7824      	ldrb	r4, [r4, #0]
   132fe:	0764      	lsls	r4, r4, #29
   13300:	d007      	beq.n	13312 <LorawanMcastEnable+0x46>
   13302:	202e      	movs	r0, #46	; 0x2e
   13304:	408a      	lsls	r2, r1
   13306:	30ff      	adds	r0, #255	; 0xff
   13308:	5c19      	ldrb	r1, [r3, r0]
   1330a:	430a      	orrs	r2, r1
   1330c:	541a      	strb	r2, [r3, r0]
   1330e:	3826      	subs	r0, #38	; 0x26
   13310:	38ff      	subs	r0, #255	; 0xff
   13312:	2196      	movs	r1, #150	; 0x96
   13314:	0049      	lsls	r1, r1, #1
   13316:	5c5a      	ldrb	r2, [r3, r1]
   13318:	3201      	adds	r2, #1
   1331a:	545a      	strb	r2, [r3, r1]
   1331c:	bd10      	pop	{r4, pc}
   1331e:	2201      	movs	r2, #1
   13320:	408a      	lsls	r2, r1
   13322:	202e      	movs	r0, #46	; 0x2e
   13324:	0011      	movs	r1, r2
   13326:	30ff      	adds	r0, #255	; 0xff
   13328:	5c1a      	ldrb	r2, [r3, r0]
   1332a:	438a      	bics	r2, r1
   1332c:	2196      	movs	r1, #150	; 0x96
   1332e:	541a      	strb	r2, [r3, r0]
   13330:	0049      	lsls	r1, r1, #1
   13332:	5c5a      	ldrb	r2, [r3, r1]
   13334:	3826      	subs	r0, #38	; 0x26
   13336:	3a01      	subs	r2, #1
   13338:	545a      	strb	r2, [r3, r1]
   1333a:	38ff      	subs	r0, #255	; 0xff
   1333c:	e7ee      	b.n	1331c <LorawanMcastEnable+0x50>
   1333e:	46c0      	nop			; (mov r8, r8)
   13340:	20003180 	.word	0x20003180

00013344 <LorawanMcastValidateHdr>:
   13344:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13346:	469c      	mov	ip, r3
   13348:	2400      	movs	r4, #0
   1334a:	230a      	movs	r3, #10
   1334c:	4f18      	ldr	r7, [pc, #96]	; (133b0 <LorawanMcastValidateHdr+0x6c>)
   1334e:	b2e5      	uxtb	r5, r4
   13350:	9501      	str	r5, [sp, #4]
   13352:	252e      	movs	r5, #46	; 0x2e
   13354:	35ff      	adds	r5, #255	; 0xff
   13356:	5d7d      	ldrb	r5, [r7, r5]
   13358:	2601      	movs	r6, #1
   1335a:	4125      	asrs	r5, r4
   1335c:	4235      	tst	r5, r6
   1335e:	d022      	beq.n	133a6 <LorawanMcastValidateHdr+0x62>
   13360:	7886      	ldrb	r6, [r0, #2]
   13362:	7845      	ldrb	r5, [r0, #1]
   13364:	0236      	lsls	r6, r6, #8
   13366:	432e      	orrs	r6, r5
   13368:	78c5      	ldrb	r5, [r0, #3]
   1336a:	042d      	lsls	r5, r5, #16
   1336c:	432e      	orrs	r6, r5
   1336e:	7905      	ldrb	r5, [r0, #4]
   13370:	062d      	lsls	r5, r5, #24
   13372:	4335      	orrs	r5, r6
   13374:	263c      	movs	r6, #60	; 0x3c
   13376:	4366      	muls	r6, r4
   13378:	3631      	adds	r6, #49	; 0x31
   1337a:	36ff      	adds	r6, #255	; 0xff
   1337c:	59be      	ldr	r6, [r7, r6]
   1337e:	42b5      	cmp	r5, r6
   13380:	d111      	bne.n	133a6 <LorawanMcastValidateHdr+0x62>
   13382:	4d0c      	ldr	r5, [pc, #48]	; (133b4 <LorawanMcastValidateHdr+0x70>)
   13384:	782e      	ldrb	r6, [r5, #0]
   13386:	2506      	movs	r5, #6
   13388:	422e      	tst	r6, r5
   1338a:	d00c      	beq.n	133a6 <LorawanMcastValidateHdr+0x62>
   1338c:	2a00      	cmp	r2, #0
   1338e:	d00a      	beq.n	133a6 <LorawanMcastValidateHdr+0x62>
   13390:	7946      	ldrb	r6, [r0, #5]
   13392:	3569      	adds	r5, #105	; 0x69
   13394:	422e      	tst	r6, r5
   13396:	d106      	bne.n	133a6 <LorawanMcastValidateHdr+0x62>
   13398:	2903      	cmp	r1, #3
   1339a:	d104      	bne.n	133a6 <LorawanMcastValidateHdr+0x62>
   1339c:	466d      	mov	r5, sp
   1339e:	4663      	mov	r3, ip
   133a0:	792d      	ldrb	r5, [r5, #4]
   133a2:	701d      	strb	r5, [r3, #0]
   133a4:	2308      	movs	r3, #8
   133a6:	3401      	adds	r4, #1
   133a8:	2c04      	cmp	r4, #4
   133aa:	d1d0      	bne.n	1334e <LorawanMcastValidateHdr+0xa>
   133ac:	0018      	movs	r0, r3
   133ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   133b0:	20003180 	.word	0x20003180
   133b4:	2000327d 	.word	0x2000327d

000133b8 <LorawanMcastProcessPkt>:
   133b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   133ba:	0015      	movs	r5, r2
   133bc:	223c      	movs	r2, #60	; 0x3c
   133be:	435a      	muls	r2, r3
   133c0:	b089      	sub	sp, #36	; 0x24
   133c2:	9107      	str	r1, [sp, #28]
   133c4:	493f      	ldr	r1, [pc, #252]	; (134c4 <LorawanMcastProcessPkt+0x10c>)
   133c6:	9006      	str	r0, [sp, #24]
   133c8:	1889      	adds	r1, r1, r2
   133ca:	31fc      	adds	r1, #252	; 0xfc
   133cc:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
   133ce:	6e08      	ldr	r0, [r1, #96]	; 0x60
   133d0:	6d8a      	ldr	r2, [r1, #88]	; 0x58
   133d2:	4284      	cmp	r4, r0
   133d4:	d224      	bcs.n	13420 <LorawanMcastProcessPkt+0x68>
   133d6:	2100      	movs	r1, #0
   133d8:	4294      	cmp	r4, r2
   133da:	d802      	bhi.n	133e2 <LorawanMcastProcessPkt+0x2a>
   133dc:	4282      	cmp	r2, r0
   133de:	4192      	sbcs	r2, r2
   133e0:	4251      	negs	r1, r2
   133e2:	270a      	movs	r7, #10
   133e4:	2900      	cmp	r1, #0
   133e6:	d11d      	bne.n	13424 <LorawanMcastProcessPkt+0x6c>
   133e8:	4a36      	ldr	r2, [pc, #216]	; (134c4 <LorawanMcastProcessPkt+0x10c>)
   133ea:	210e      	movs	r1, #14
   133ec:	0010      	movs	r0, r2
   133ee:	3084      	adds	r0, #132	; 0x84
   133f0:	7803      	ldrb	r3, [r0, #0]
   133f2:	001c      	movs	r4, r3
   133f4:	400c      	ands	r4, r1
   133f6:	2c06      	cmp	r4, #6
   133f8:	d108      	bne.n	1340c <LorawanMcastProcessPkt+0x54>
   133fa:	0014      	movs	r4, r2
   133fc:	34fd      	adds	r4, #253	; 0xfd
   133fe:	7824      	ldrb	r4, [r4, #0]
   13400:	2c04      	cmp	r4, #4
   13402:	d103      	bne.n	1340c <LorawanMcastProcessPkt+0x54>
   13404:	438b      	bics	r3, r1
   13406:	3904      	subs	r1, #4
   13408:	430b      	orrs	r3, r1
   1340a:	7003      	strb	r3, [r0, #0]
   1340c:	2390      	movs	r3, #144	; 0x90
   1340e:	2101      	movs	r1, #1
   13410:	009b      	lsls	r3, r3, #2
   13412:	54d1      	strb	r1, [r2, r3]
   13414:	2000      	movs	r0, #0
   13416:	4b2c      	ldr	r3, [pc, #176]	; (134c8 <LorawanMcastProcessPkt+0x110>)
   13418:	4798      	blx	r3
   1341a:	0038      	movs	r0, r7
   1341c:	b009      	add	sp, #36	; 0x24
   1341e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13420:	4294      	cmp	r4, r2
   13422:	d8db      	bhi.n	133dc <LorawanMcastProcessPkt+0x24>
   13424:	243c      	movs	r4, #60	; 0x3c
   13426:	435c      	muls	r4, r3
   13428:	4e26      	ldr	r6, [pc, #152]	; (134c4 <LorawanMcastProcessPkt+0x10c>)
   1342a:	79ea      	ldrb	r2, [r5, #7]
   1342c:	1937      	adds	r7, r6, r4
   1342e:	003b      	movs	r3, r7
   13430:	79a9      	ldrb	r1, [r5, #6]
   13432:	0212      	lsls	r2, r2, #8
   13434:	3355      	adds	r3, #85	; 0x55
   13436:	430a      	orrs	r2, r1
   13438:	33ff      	adds	r3, #255	; 0xff
   1343a:	801a      	strh	r2, [r3, #0]
   1343c:	2105      	movs	r1, #5
   1343e:	4b23      	ldr	r3, [pc, #140]	; (134cc <LorawanMcastProcessPkt+0x114>)
   13440:	37fc      	adds	r7, #252	; 0xfc
   13442:	2000      	movs	r0, #0
   13444:	4798      	blx	r3
   13446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13448:	3445      	adds	r4, #69	; 0x45
   1344a:	9304      	str	r3, [sp, #16]
   1344c:	4b20      	ldr	r3, [pc, #128]	; (134d0 <LorawanMcastProcessPkt+0x118>)
   1344e:	9907      	ldr	r1, [sp, #28]
   13450:	9303      	str	r3, [sp, #12]
   13452:	2319      	movs	r3, #25
   13454:	34ff      	adds	r4, #255	; 0xff
   13456:	9302      	str	r3, [sp, #8]
   13458:	19a4      	adds	r4, r4, r6
   1345a:	3b16      	subs	r3, #22
   1345c:	9806      	ldr	r0, [sp, #24]
   1345e:	9400      	str	r4, [sp, #0]
   13460:	390d      	subs	r1, #13
   13462:	9301      	str	r3, [sp, #4]
   13464:	b2c9      	uxtb	r1, r1
   13466:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   13468:	2201      	movs	r2, #1
   1346a:	3009      	adds	r0, #9
   1346c:	4c19      	ldr	r4, [pc, #100]	; (134d4 <LorawanMcastProcessPkt+0x11c>)
   1346e:	47a0      	blx	r4
   13470:	2800      	cmp	r0, #0
   13472:	d002      	beq.n	1347a <LorawanMcastProcessPkt+0xc2>
   13474:	201f      	movs	r0, #31
   13476:	4b18      	ldr	r3, [pc, #96]	; (134d8 <LorawanMcastProcessPkt+0x120>)
   13478:	4798      	blx	r3
   1347a:	4918      	ldr	r1, [pc, #96]	; (134dc <LorawanMcastProcessPkt+0x124>)
   1347c:	2708      	movs	r7, #8
   1347e:	784a      	ldrb	r2, [r1, #1]
   13480:	780b      	ldrb	r3, [r1, #0]
   13482:	0212      	lsls	r2, r2, #8
   13484:	431a      	orrs	r2, r3
   13486:	788b      	ldrb	r3, [r1, #2]
   13488:	041b      	lsls	r3, r3, #16
   1348a:	431a      	orrs	r2, r3
   1348c:	78cb      	ldrb	r3, [r1, #3]
   1348e:	061b      	lsls	r3, r3, #24
   13490:	4313      	orrs	r3, r2
   13492:	d0a9      	beq.n	133e8 <LorawanMcastProcessPkt+0x30>
   13494:	2220      	movs	r2, #32
   13496:	3694      	adds	r6, #148	; 0x94
   13498:	7833      	ldrb	r3, [r6, #0]
   1349a:	9906      	ldr	r1, [sp, #24]
   1349c:	4393      	bics	r3, r2
   1349e:	7033      	strb	r3, [r6, #0]
   134a0:	78ab      	ldrb	r3, [r5, #2]
   134a2:	7868      	ldrb	r0, [r5, #1]
   134a4:	40bb      	lsls	r3, r7
   134a6:	4303      	orrs	r3, r0
   134a8:	78e8      	ldrb	r0, [r5, #3]
   134aa:	9a07      	ldr	r2, [sp, #28]
   134ac:	0400      	lsls	r0, r0, #16
   134ae:	4303      	orrs	r3, r0
   134b0:	7928      	ldrb	r0, [r5, #4]
   134b2:	3a0c      	subs	r2, #12
   134b4:	0600      	lsls	r0, r0, #24
   134b6:	4318      	orrs	r0, r3
   134b8:	b2d2      	uxtb	r2, r2
   134ba:	19c9      	adds	r1, r1, r7
   134bc:	003b      	movs	r3, r7
   134be:	4c08      	ldr	r4, [pc, #32]	; (134e0 <LorawanMcastProcessPkt+0x128>)
   134c0:	47a0      	blx	r4
   134c2:	e791      	b.n	133e8 <LorawanMcastProcessPkt+0x30>
   134c4:	20003180 	.word	0x20003180
   134c8:	000116d1 	.word	0x000116d1
   134cc:	00009569 	.word	0x00009569
   134d0:	20002f44 	.word	0x20002f44
   134d4:	000111d1 	.word	0x000111d1
   134d8:	00011291 	.word	0x00011291
   134dc:	200034dc 	.word	0x200034dc
   134e0:	000112f5 	.word	0x000112f5

000134e4 <LorawanAddMcastAddr>:
   134e4:	b570      	push	{r4, r5, r6, lr}
   134e6:	260a      	movs	r6, #10
   134e8:	2903      	cmp	r1, #3
   134ea:	d818      	bhi.n	1351e <LorawanAddMcastAddr+0x3a>
   134ec:	4b0d      	ldr	r3, [pc, #52]	; (13524 <LorawanAddMcastAddr+0x40>)
   134ee:	681a      	ldr	r2, [r3, #0]
   134f0:	0a15      	lsrs	r5, r2, #8
   134f2:	791a      	ldrb	r2, [r3, #4]
   134f4:	0612      	lsls	r2, r2, #24
   134f6:	432a      	orrs	r2, r5
   134f8:	4282      	cmp	r2, r0
   134fa:	d010      	beq.n	1351e <LorawanAddMcastAddr+0x3a>
   134fc:	243c      	movs	r4, #60	; 0x3c
   134fe:	434c      	muls	r4, r1
   13500:	191c      	adds	r4, r3, r4
   13502:	0023      	movs	r3, r4
   13504:	33fc      	adds	r3, #252	; 0xfc
   13506:	6358      	str	r0, [r3, #52]	; 0x34
   13508:	2106      	movs	r1, #6
   1350a:	2000      	movs	r0, #0
   1350c:	4b06      	ldr	r3, [pc, #24]	; (13528 <LorawanAddMcastAddr+0x44>)
   1350e:	4798      	blx	r3
   13510:	2201      	movs	r2, #1
   13512:	3459      	adds	r4, #89	; 0x59
   13514:	34ff      	adds	r4, #255	; 0xff
   13516:	7a21      	ldrb	r1, [r4, #8]
   13518:	3e02      	subs	r6, #2
   1351a:	430a      	orrs	r2, r1
   1351c:	7222      	strb	r2, [r4, #8]
   1351e:	0030      	movs	r0, r6
   13520:	bd70      	pop	{r4, r5, r6, pc}
   13522:	46c0      	nop			; (mov r8, r8)
   13524:	20003180 	.word	0x20003180
   13528:	00009569 	.word	0x00009569

0001352c <LorawanAddMcastAppskey>:
   1352c:	b570      	push	{r4, r5, r6, lr}
   1352e:	0006      	movs	r6, r0
   13530:	200a      	movs	r0, #10
   13532:	2903      	cmp	r1, #3
   13534:	d818      	bhi.n	13568 <LorawanAddMcastAppskey+0x3c>
   13536:	2e00      	cmp	r6, #0
   13538:	d016      	beq.n	13568 <LorawanAddMcastAppskey+0x3c>
   1353a:	253c      	movs	r5, #60	; 0x3c
   1353c:	434d      	muls	r5, r1
   1353e:	0028      	movs	r0, r5
   13540:	4c0a      	ldr	r4, [pc, #40]	; (1356c <LorawanAddMcastAppskey+0x40>)
   13542:	3045      	adds	r0, #69	; 0x45
   13544:	30ff      	adds	r0, #255	; 0xff
   13546:	2210      	movs	r2, #16
   13548:	1900      	adds	r0, r0, r4
   1354a:	0031      	movs	r1, r6
   1354c:	4b08      	ldr	r3, [pc, #32]	; (13570 <LorawanAddMcastAppskey+0x44>)
   1354e:	4798      	blx	r3
   13550:	4b08      	ldr	r3, [pc, #32]	; (13574 <LorawanAddMcastAppskey+0x48>)
   13552:	2107      	movs	r1, #7
   13554:	2000      	movs	r0, #0
   13556:	4798      	blx	r3
   13558:	2304      	movs	r3, #4
   1355a:	2008      	movs	r0, #8
   1355c:	1964      	adds	r4, r4, r5
   1355e:	3459      	adds	r4, #89	; 0x59
   13560:	34ff      	adds	r4, #255	; 0xff
   13562:	7a22      	ldrb	r2, [r4, #8]
   13564:	4313      	orrs	r3, r2
   13566:	7223      	strb	r3, [r4, #8]
   13568:	bd70      	pop	{r4, r5, r6, pc}
   1356a:	46c0      	nop			; (mov r8, r8)
   1356c:	20003180 	.word	0x20003180
   13570:	00016c47 	.word	0x00016c47
   13574:	00009569 	.word	0x00009569

00013578 <LorawanAddMcastNwkskey>:
   13578:	b570      	push	{r4, r5, r6, lr}
   1357a:	0006      	movs	r6, r0
   1357c:	200a      	movs	r0, #10
   1357e:	2903      	cmp	r1, #3
   13580:	d818      	bhi.n	135b4 <LorawanAddMcastNwkskey+0x3c>
   13582:	2e00      	cmp	r6, #0
   13584:	d016      	beq.n	135b4 <LorawanAddMcastNwkskey+0x3c>
   13586:	253c      	movs	r5, #60	; 0x3c
   13588:	434d      	muls	r5, r1
   1358a:	0028      	movs	r0, r5
   1358c:	4c0a      	ldr	r4, [pc, #40]	; (135b8 <LorawanAddMcastNwkskey+0x40>)
   1358e:	3035      	adds	r0, #53	; 0x35
   13590:	30ff      	adds	r0, #255	; 0xff
   13592:	2210      	movs	r2, #16
   13594:	1900      	adds	r0, r0, r4
   13596:	0031      	movs	r1, r6
   13598:	4b08      	ldr	r3, [pc, #32]	; (135bc <LorawanAddMcastNwkskey+0x44>)
   1359a:	4798      	blx	r3
   1359c:	4b08      	ldr	r3, [pc, #32]	; (135c0 <LorawanAddMcastNwkskey+0x48>)
   1359e:	2108      	movs	r1, #8
   135a0:	2000      	movs	r0, #0
   135a2:	4798      	blx	r3
   135a4:	2302      	movs	r3, #2
   135a6:	2008      	movs	r0, #8
   135a8:	1964      	adds	r4, r4, r5
   135aa:	3459      	adds	r4, #89	; 0x59
   135ac:	34ff      	adds	r4, #255	; 0xff
   135ae:	7a22      	ldrb	r2, [r4, #8]
   135b0:	4313      	orrs	r3, r2
   135b2:	7223      	strb	r3, [r4, #8]
   135b4:	bd70      	pop	{r4, r5, r6, pc}
   135b6:	46c0      	nop			; (mov r8, r8)
   135b8:	20003180 	.word	0x20003180
   135bc:	00016c47 	.word	0x00016c47
   135c0:	00009569 	.word	0x00009569

000135c4 <LorawanAddMcastFcntMin>:
   135c4:	220a      	movs	r2, #10
   135c6:	2903      	cmp	r1, #3
   135c8:	d807      	bhi.n	135da <LorawanAddMcastFcntMin+0x16>
   135ca:	233c      	movs	r3, #60	; 0x3c
   135cc:	434b      	muls	r3, r1
   135ce:	4904      	ldr	r1, [pc, #16]	; (135e0 <LorawanAddMcastFcntMin+0x1c>)
   135d0:	3a02      	subs	r2, #2
   135d2:	18c9      	adds	r1, r1, r3
   135d4:	31fc      	adds	r1, #252	; 0xfc
   135d6:	65c8      	str	r0, [r1, #92]	; 0x5c
   135d8:	6588      	str	r0, [r1, #88]	; 0x58
   135da:	0010      	movs	r0, r2
   135dc:	4770      	bx	lr
   135de:	46c0      	nop			; (mov r8, r8)
   135e0:	20003180 	.word	0x20003180

000135e4 <LorawanAddMcastFcntMax>:
   135e4:	220a      	movs	r2, #10
   135e6:	2903      	cmp	r1, #3
   135e8:	d806      	bhi.n	135f8 <LorawanAddMcastFcntMax+0x14>
   135ea:	233c      	movs	r3, #60	; 0x3c
   135ec:	434b      	muls	r3, r1
   135ee:	4903      	ldr	r1, [pc, #12]	; (135fc <LorawanAddMcastFcntMax+0x18>)
   135f0:	3a02      	subs	r2, #2
   135f2:	18c9      	adds	r1, r1, r3
   135f4:	31fc      	adds	r1, #252	; 0xfc
   135f6:	6608      	str	r0, [r1, #96]	; 0x60
   135f8:	0010      	movs	r0, r2
   135fa:	4770      	bx	lr
   135fc:	20003180 	.word	0x20003180

00013600 <LorawanAddMcastDlFrequency>:
   13600:	b513      	push	{r0, r1, r4, lr}
   13602:	000c      	movs	r4, r1
   13604:	9001      	str	r0, [sp, #4]
   13606:	2903      	cmp	r1, #3
   13608:	d901      	bls.n	1360e <LorawanAddMcastDlFrequency+0xe>
   1360a:	200a      	movs	r0, #10
   1360c:	bd16      	pop	{r1, r2, r4, pc}
   1360e:	a901      	add	r1, sp, #4
   13610:	2001      	movs	r0, #1
   13612:	4b0a      	ldr	r3, [pc, #40]	; (1363c <LorawanAddMcastDlFrequency+0x3c>)
   13614:	4798      	blx	r3
   13616:	2808      	cmp	r0, #8
   13618:	d1f7      	bne.n	1360a <LorawanAddMcastDlFrequency+0xa>
   1361a:	213c      	movs	r1, #60	; 0x3c
   1361c:	4361      	muls	r1, r4
   1361e:	4b08      	ldr	r3, [pc, #32]	; (13640 <LorawanAddMcastDlFrequency+0x40>)
   13620:	9a01      	ldr	r2, [sp, #4]
   13622:	1859      	adds	r1, r3, r1
   13624:	31fc      	adds	r1, #252	; 0xfc
   13626:	336f      	adds	r3, #111	; 0x6f
   13628:	668a      	str	r2, [r1, #104]	; 0x68
   1362a:	0a11      	lsrs	r1, r2, #8
   1362c:	701a      	strb	r2, [r3, #0]
   1362e:	7059      	strb	r1, [r3, #1]
   13630:	0c11      	lsrs	r1, r2, #16
   13632:	0e12      	lsrs	r2, r2, #24
   13634:	7099      	strb	r1, [r3, #2]
   13636:	70da      	strb	r2, [r3, #3]
   13638:	e7e8      	b.n	1360c <LorawanAddMcastDlFrequency+0xc>
   1363a:	46c0      	nop			; (mov r8, r8)
   1363c:	0000d04d 	.word	0x0000d04d
   13640:	20003180 	.word	0x20003180

00013644 <LorawanAddMcastDatarate>:
   13644:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13646:	466b      	mov	r3, sp
   13648:	1ddd      	adds	r5, r3, #7
   1364a:	000c      	movs	r4, r1
   1364c:	7028      	strb	r0, [r5, #0]
   1364e:	2903      	cmp	r1, #3
   13650:	d901      	bls.n	13656 <LorawanAddMcastDatarate+0x12>
   13652:	200a      	movs	r0, #10
   13654:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   13656:	0029      	movs	r1, r5
   13658:	200f      	movs	r0, #15
   1365a:	4b07      	ldr	r3, [pc, #28]	; (13678 <LorawanAddMcastDatarate+0x34>)
   1365c:	4798      	blx	r3
   1365e:	2808      	cmp	r0, #8
   13660:	d1f7      	bne.n	13652 <LorawanAddMcastDatarate+0xe>
   13662:	213c      	movs	r1, #60	; 0x3c
   13664:	4361      	muls	r1, r4
   13666:	4b05      	ldr	r3, [pc, #20]	; (1367c <LorawanAddMcastDatarate+0x38>)
   13668:	782a      	ldrb	r2, [r5, #0]
   1366a:	1859      	adds	r1, r3, r1
   1366c:	3169      	adds	r1, #105	; 0x69
   1366e:	31ff      	adds	r1, #255	; 0xff
   13670:	3373      	adds	r3, #115	; 0x73
   13672:	700a      	strb	r2, [r1, #0]
   13674:	701a      	strb	r2, [r3, #0]
   13676:	e7ed      	b.n	13654 <LorawanAddMcastDatarate+0x10>
   13678:	0000d04d 	.word	0x0000d04d
   1367c:	20003180 	.word	0x20003180

00013680 <LorawanAddMcastPeriodicity>:
   13680:	220a      	movs	r2, #10
   13682:	2903      	cmp	r1, #3
   13684:	d809      	bhi.n	1369a <LorawanAddMcastPeriodicity+0x1a>
   13686:	2807      	cmp	r0, #7
   13688:	d807      	bhi.n	1369a <LorawanAddMcastPeriodicity+0x1a>
   1368a:	233c      	movs	r3, #60	; 0x3c
   1368c:	434b      	muls	r3, r1
   1368e:	4904      	ldr	r1, [pc, #16]	; (136a0 <LorawanAddMcastPeriodicity+0x20>)
   13690:	3a02      	subs	r2, #2
   13692:	18c9      	adds	r1, r1, r3
   13694:	316a      	adds	r1, #106	; 0x6a
   13696:	31ff      	adds	r1, #255	; 0xff
   13698:	7008      	strb	r0, [r1, #0]
   1369a:	0010      	movs	r0, r2
   1369c:	4770      	bx	lr
   1369e:	46c0      	nop			; (mov r8, r8)
   136a0:	20003180 	.word	0x20003180

000136a4 <Radio_LBTScanTimeout>:
   136a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   136a6:	4c1c      	ldr	r4, [pc, #112]	; (13718 <Radio_LBTScanTimeout+0x74>)
   136a8:	0025      	movs	r5, r4
   136aa:	0023      	movs	r3, r4
   136ac:	354f      	adds	r5, #79	; 0x4f
   136ae:	7829      	ldrb	r1, [r5, #0]
   136b0:	3340      	adds	r3, #64	; 0x40
   136b2:	3101      	adds	r1, #1
   136b4:	b2c9      	uxtb	r1, r1
   136b6:	7029      	strb	r1, [r5, #0]
   136b8:	781b      	ldrb	r3, [r3, #0]
   136ba:	428b      	cmp	r3, r1
   136bc:	d315      	bcc.n	136ea <Radio_LBTScanTimeout+0x46>
   136be:	260e      	movs	r6, #14
   136c0:	446e      	add	r6, sp
   136c2:	4b16      	ldr	r3, [pc, #88]	; (1371c <Radio_LBTScanTimeout+0x78>)
   136c4:	0030      	movs	r0, r6
   136c6:	4798      	blx	r3
   136c8:	2300      	movs	r3, #0
   136ca:	5ef2      	ldrsh	r2, [r6, r3]
   136cc:	782b      	ldrb	r3, [r5, #0]
   136ce:	4353      	muls	r3, r2
   136d0:	6c62      	ldr	r2, [r4, #68]	; 0x44
   136d2:	189b      	adds	r3, r3, r2
   136d4:	6463      	str	r3, [r4, #68]	; 0x44
   136d6:	0023      	movs	r3, r4
   136d8:	2200      	movs	r2, #0
   136da:	3350      	adds	r3, #80	; 0x50
   136dc:	7818      	ldrb	r0, [r3, #0]
   136de:	9200      	str	r2, [sp, #0]
   136e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   136e2:	4b0f      	ldr	r3, [pc, #60]	; (13720 <Radio_LBTScanTimeout+0x7c>)
   136e4:	4c0f      	ldr	r4, [pc, #60]	; (13724 <Radio_LBTScanTimeout+0x80>)
   136e6:	47a0      	blx	r4
   136e8:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
   136ea:	2380      	movs	r3, #128	; 0x80
   136ec:	4a0e      	ldr	r2, [pc, #56]	; (13728 <Radio_LBTScanTimeout+0x84>)
   136ee:	009b      	lsls	r3, r3, #2
   136f0:	8810      	ldrh	r0, [r2, #0]
   136f2:	4303      	orrs	r3, r0
   136f4:	8013      	strh	r3, [r2, #0]
   136f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   136f8:	0058      	lsls	r0, r3, #1
   136fa:	1e4b      	subs	r3, r1, #1
   136fc:	4359      	muls	r1, r3
   136fe:	4b0b      	ldr	r3, [pc, #44]	; (1372c <Radio_LBTScanTimeout+0x88>)
   13700:	b289      	uxth	r1, r1
   13702:	4798      	blx	r3
   13704:	0023      	movs	r3, r4
   13706:	334c      	adds	r3, #76	; 0x4c
   13708:	8018      	strh	r0, [r3, #0]
   1370a:	2300      	movs	r3, #0
   1370c:	2001      	movs	r0, #1
   1370e:	702b      	strb	r3, [r5, #0]
   13710:	6463      	str	r3, [r4, #68]	; 0x44
   13712:	4b07      	ldr	r3, [pc, #28]	; (13730 <Radio_LBTScanTimeout+0x8c>)
   13714:	4798      	blx	r3
   13716:	e7e7      	b.n	136e8 <Radio_LBTScanTimeout+0x44>
   13718:	20002d88 	.word	0x20002d88
   1371c:	0000ddd1 	.word	0x0000ddd1
   13720:	000136a5 	.word	0x000136a5
   13724:	0000d579 	.word	0x0000d579
   13728:	20003054 	.word	0x20003054
   1372c:	00013af9 	.word	0x00013af9
   13730:	0000f011 	.word	0x0000f011

00013734 <RADIO_ScanHandler>:
   13734:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13736:	4b12      	ldr	r3, [pc, #72]	; (13780 <RADIO_ScanHandler+0x4c>)
   13738:	4798      	blx	r3
   1373a:	2000      	movs	r0, #0
   1373c:	4b11      	ldr	r3, [pc, #68]	; (13784 <RADIO_ScanHandler+0x50>)
   1373e:	4798      	blx	r3
   13740:	4d11      	ldr	r5, [pc, #68]	; (13788 <RADIO_ScanHandler+0x54>)
   13742:	4b12      	ldr	r3, [pc, #72]	; (1378c <RADIO_ScanHandler+0x58>)
   13744:	6828      	ldr	r0, [r5, #0]
   13746:	2400      	movs	r4, #0
   13748:	4798      	blx	r3
   1374a:	002b      	movs	r3, r5
   1374c:	4e10      	ldr	r6, [pc, #64]	; (13790 <RADIO_ScanHandler+0x5c>)
   1374e:	334c      	adds	r3, #76	; 0x4c
   13750:	2201      	movs	r2, #1
   13752:	0021      	movs	r1, r4
   13754:	0020      	movs	r0, r4
   13756:	801c      	strh	r4, [r3, #0]
   13758:	47b0      	blx	r6
   1375a:	4b0e      	ldr	r3, [pc, #56]	; (13794 <RADIO_ScanHandler+0x60>)
   1375c:	2109      	movs	r1, #9
   1375e:	2012      	movs	r0, #18
   13760:	4798      	blx	r3
   13762:	3550      	adds	r5, #80	; 0x50
   13764:	0022      	movs	r2, r4
   13766:	0021      	movs	r1, r4
   13768:	2005      	movs	r0, #5
   1376a:	47b0      	blx	r6
   1376c:	7828      	ldrb	r0, [r5, #0]
   1376e:	4b0a      	ldr	r3, [pc, #40]	; (13798 <RADIO_ScanHandler+0x64>)
   13770:	4d0a      	ldr	r5, [pc, #40]	; (1379c <RADIO_ScanHandler+0x68>)
   13772:	9400      	str	r4, [sp, #0]
   13774:	0022      	movs	r2, r4
   13776:	490a      	ldr	r1, [pc, #40]	; (137a0 <RADIO_ScanHandler+0x6c>)
   13778:	47a8      	blx	r5
   1377a:	0020      	movs	r0, r4
   1377c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   1377e:	46c0      	nop			; (mov r8, r8)
   13780:	0000f681 	.word	0x0000f681
   13784:	0000f2c5 	.word	0x0000f2c5
   13788:	20002d88 	.word	0x20002d88
   1378c:	0000ea09 	.word	0x0000ea09
   13790:	0000dbb5 	.word	0x0000dbb5
   13794:	0000c98d 	.word	0x0000c98d
   13798:	000136a5 	.word	0x000136a5
   1379c:	0000d579 	.word	0x0000d579
   137a0:	00002328 	.word	0x00002328

000137a4 <radioScanDoneHandler>:
   137a4:	b530      	push	{r4, r5, lr}
   137a6:	4a18      	ldr	r2, [pc, #96]	; (13808 <radioScanDoneHandler+0x64>)
   137a8:	4918      	ldr	r1, [pc, #96]	; (1380c <radioScanDoneHandler+0x68>)
   137aa:	8813      	ldrh	r3, [r2, #0]
   137ac:	b085      	sub	sp, #20
   137ae:	400b      	ands	r3, r1
   137b0:	8013      	strh	r3, [r2, #0]
   137b2:	2200      	movs	r2, #0
   137b4:	4b16      	ldr	r3, [pc, #88]	; (13810 <radioScanDoneHandler+0x6c>)
   137b6:	0011      	movs	r1, r2
   137b8:	0010      	movs	r0, r2
   137ba:	4798      	blx	r3
   137bc:	2000      	movs	r0, #0
   137be:	4b15      	ldr	r3, [pc, #84]	; (13814 <radioScanDoneHandler+0x70>)
   137c0:	4798      	blx	r3
   137c2:	4b15      	ldr	r3, [pc, #84]	; (13818 <radioScanDoneHandler+0x74>)
   137c4:	4798      	blx	r3
   137c6:	4c15      	ldr	r4, [pc, #84]	; (1381c <radioScanDoneHandler+0x78>)
   137c8:	0023      	movs	r3, r4
   137ca:	334c      	adds	r3, #76	; 0x4c
   137cc:	2100      	movs	r1, #0
   137ce:	5e59      	ldrsh	r1, [r3, r1]
   137d0:	233e      	movs	r3, #62	; 0x3e
   137d2:	5ee2      	ldrsh	r2, [r4, r3]
   137d4:	4b12      	ldr	r3, [pc, #72]	; (13820 <radioScanDoneHandler+0x7c>)
   137d6:	4291      	cmp	r1, r2
   137d8:	da06      	bge.n	137e8 <radioScanDoneHandler+0x44>
   137da:	2002      	movs	r0, #2
   137dc:	4798      	blx	r3
   137de:	4b11      	ldr	r3, [pc, #68]	; (13824 <radioScanDoneHandler+0x80>)
   137e0:	4798      	blx	r3
   137e2:	2000      	movs	r0, #0
   137e4:	b005      	add	sp, #20
   137e6:	bd30      	pop	{r4, r5, pc}
   137e8:	2207      	movs	r2, #7
   137ea:	ad01      	add	r5, sp, #4
   137ec:	2001      	movs	r0, #1
   137ee:	702a      	strb	r2, [r5, #0]
   137f0:	4798      	blx	r3
   137f2:	4b0d      	ldr	r3, [pc, #52]	; (13828 <radioScanDoneHandler+0x84>)
   137f4:	781b      	ldrb	r3, [r3, #0]
   137f6:	079b      	lsls	r3, r3, #30
   137f8:	d5f3      	bpl.n	137e2 <radioScanDoneHandler+0x3e>
   137fa:	6923      	ldr	r3, [r4, #16]
   137fc:	2b00      	cmp	r3, #0
   137fe:	d0f0      	beq.n	137e2 <radioScanDoneHandler+0x3e>
   13800:	0029      	movs	r1, r5
   13802:	2002      	movs	r0, #2
   13804:	4798      	blx	r3
   13806:	e7ec      	b.n	137e2 <radioScanDoneHandler+0x3e>
   13808:	20003054 	.word	0x20003054
   1380c:	fffffdff 	.word	0xfffffdff
   13810:	0000dbb5 	.word	0x0000dbb5
   13814:	0000f2f9 	.word	0x0000f2f9
   13818:	0000f7b1 	.word	0x0000f7b1
   1381c:	20002d88 	.word	0x20002d88
   13820:	0000f0bd 	.word	0x0000f0bd
   13824:	0000fa7d 	.word	0x0000fa7d
   13828:	20003056 	.word	0x20003056

0001382c <common_tc_read_count>:
   1382c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1382e:	4b0d      	ldr	r3, [pc, #52]	; (13864 <common_tc_read_count+0x38>)
   13830:	4798      	blx	r3
   13832:	4b0d      	ldr	r3, [pc, #52]	; (13868 <common_tc_read_count+0x3c>)
   13834:	781b      	ldrb	r3, [r3, #0]
   13836:	2b00      	cmp	r3, #0
   13838:	d00e      	beq.n	13858 <common_tc_read_count+0x2c>
   1383a:	4b0c      	ldr	r3, [pc, #48]	; (1386c <common_tc_read_count+0x40>)
   1383c:	781d      	ldrb	r5, [r3, #0]
   1383e:	4b0a      	ldr	r3, [pc, #40]	; (13868 <common_tc_read_count+0x3c>)
   13840:	781f      	ldrb	r7, [r3, #0]
   13842:	4c0b      	ldr	r4, [pc, #44]	; (13870 <common_tc_read_count+0x44>)
   13844:	1c29      	adds	r1, r5, #0
   13846:	47a0      	blx	r4
   13848:	1c06      	adds	r6, r0, #0
   1384a:	480a      	ldr	r0, [pc, #40]	; (13874 <common_tc_read_count+0x48>)
   1384c:	1c29      	adds	r1, r5, #0
   1384e:	47a0      	blx	r4
   13850:	4378      	muls	r0, r7
   13852:	1830      	adds	r0, r6, r0
   13854:	b280      	uxth	r0, r0
   13856:	e004      	b.n	13862 <common_tc_read_count+0x36>
   13858:	4b04      	ldr	r3, [pc, #16]	; (1386c <common_tc_read_count+0x40>)
   1385a:	7819      	ldrb	r1, [r3, #0]
   1385c:	4b04      	ldr	r3, [pc, #16]	; (13870 <common_tc_read_count+0x44>)
   1385e:	4798      	blx	r3
   13860:	b280      	uxth	r0, r0
   13862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13864:	0000de05 	.word	0x0000de05
   13868:	20001ec8 	.word	0x20001ec8
   1386c:	200034e4 	.word	0x200034e4
   13870:	00013af9 	.word	0x00013af9
   13874:	0000ffff 	.word	0x0000ffff

00013878 <common_tc_compare_stop>:
   13878:	b508      	push	{r3, lr}
   1387a:	4b05      	ldr	r3, [pc, #20]	; (13890 <common_tc_compare_stop+0x18>)
   1387c:	4798      	blx	r3
   1387e:	4b05      	ldr	r3, [pc, #20]	; (13894 <common_tc_compare_stop+0x1c>)
   13880:	4798      	blx	r3
   13882:	4b05      	ldr	r3, [pc, #20]	; (13898 <common_tc_compare_stop+0x20>)
   13884:	2200      	movs	r2, #0
   13886:	605a      	str	r2, [r3, #4]
   13888:	811a      	strh	r2, [r3, #8]
   1388a:	4b04      	ldr	r3, [pc, #16]	; (1389c <common_tc_compare_stop+0x24>)
   1388c:	4798      	blx	r3
   1388e:	bd08      	pop	{r3, pc}
   13890:	0000de19 	.word	0x0000de19
   13894:	0000ded1 	.word	0x0000ded1
   13898:	20001ec8 	.word	0x20001ec8
   1389c:	0000def5 	.word	0x0000def5

000138a0 <common_tc_delay>:
   138a0:	b510      	push	{r4, lr}
   138a2:	1c04      	adds	r4, r0, #0
   138a4:	4b13      	ldr	r3, [pc, #76]	; (138f4 <common_tc_delay+0x54>)
   138a6:	4798      	blx	r3
   138a8:	4b13      	ldr	r3, [pc, #76]	; (138f8 <common_tc_delay+0x58>)
   138aa:	781a      	ldrb	r2, [r3, #0]
   138ac:	4362      	muls	r2, r4
   138ae:	1881      	adds	r1, r0, r2
   138b0:	4b12      	ldr	r3, [pc, #72]	; (138fc <common_tc_delay+0x5c>)
   138b2:	6059      	str	r1, [r3, #4]
   138b4:	6859      	ldr	r1, [r3, #4]
   138b6:	0c09      	lsrs	r1, r1, #16
   138b8:	6059      	str	r1, [r3, #4]
   138ba:	685b      	ldr	r3, [r3, #4]
   138bc:	2b00      	cmp	r3, #0
   138be:	d007      	beq.n	138d0 <common_tc_delay+0x30>
   138c0:	4b0e      	ldr	r3, [pc, #56]	; (138fc <common_tc_delay+0x5c>)
   138c2:	6859      	ldr	r1, [r3, #4]
   138c4:	3201      	adds	r2, #1
   138c6:	1880      	adds	r0, r0, r2
   138c8:	8118      	strh	r0, [r3, #8]
   138ca:	4b0d      	ldr	r3, [pc, #52]	; (13900 <common_tc_delay+0x60>)
   138cc:	4798      	blx	r3
   138ce:	e004      	b.n	138da <common_tc_delay+0x3a>
   138d0:	1882      	adds	r2, r0, r2
   138d2:	4b0a      	ldr	r3, [pc, #40]	; (138fc <common_tc_delay+0x5c>)
   138d4:	811a      	strh	r2, [r3, #8]
   138d6:	4b0b      	ldr	r3, [pc, #44]	; (13904 <common_tc_delay+0x64>)
   138d8:	4798      	blx	r3
   138da:	4b08      	ldr	r3, [pc, #32]	; (138fc <common_tc_delay+0x5c>)
   138dc:	891b      	ldrh	r3, [r3, #8]
   138de:	2b63      	cmp	r3, #99	; 0x63
   138e0:	d802      	bhi.n	138e8 <common_tc_delay+0x48>
   138e2:	3364      	adds	r3, #100	; 0x64
   138e4:	4a05      	ldr	r2, [pc, #20]	; (138fc <common_tc_delay+0x5c>)
   138e6:	8113      	strh	r3, [r2, #8]
   138e8:	4b04      	ldr	r3, [pc, #16]	; (138fc <common_tc_delay+0x5c>)
   138ea:	8918      	ldrh	r0, [r3, #8]
   138ec:	4b06      	ldr	r3, [pc, #24]	; (13908 <common_tc_delay+0x68>)
   138ee:	4798      	blx	r3
   138f0:	bd10      	pop	{r4, pc}
   138f2:	46c0      	nop			; (mov r8, r8)
   138f4:	0000de05 	.word	0x0000de05
   138f8:	200034e4 	.word	0x200034e4
   138fc:	20001ec8 	.word	0x20001ec8
   13900:	0000de19 	.word	0x0000de19
   13904:	0000de2d 	.word	0x0000de2d
   13908:	0000deb9 	.word	0x0000deb9

0001390c <common_tc_init>:
   1390c:	b508      	push	{r3, lr}
   1390e:	2200      	movs	r2, #0
   13910:	4b03      	ldr	r3, [pc, #12]	; (13920 <common_tc_init+0x14>)
   13912:	701a      	strb	r2, [r3, #0]
   13914:	4b03      	ldr	r3, [pc, #12]	; (13924 <common_tc_init+0x18>)
   13916:	4798      	blx	r3
   13918:	4b03      	ldr	r3, [pc, #12]	; (13928 <common_tc_init+0x1c>)
   1391a:	7018      	strb	r0, [r3, #0]
   1391c:	bd08      	pop	{r3, pc}
   1391e:	46c0      	nop			; (mov r8, r8)
   13920:	20001ec8 	.word	0x20001ec8
   13924:	0000df0d 	.word	0x0000df0d
   13928:	200034e4 	.word	0x200034e4

0001392c <tmr_ovf_callback>:
   1392c:	b508      	push	{r3, lr}
   1392e:	4b0e      	ldr	r3, [pc, #56]	; (13968 <tmr_ovf_callback+0x3c>)
   13930:	685b      	ldr	r3, [r3, #4]
   13932:	2b00      	cmp	r3, #0
   13934:	d007      	beq.n	13946 <tmr_ovf_callback+0x1a>
   13936:	4a0c      	ldr	r2, [pc, #48]	; (13968 <tmr_ovf_callback+0x3c>)
   13938:	6853      	ldr	r3, [r2, #4]
   1393a:	3b01      	subs	r3, #1
   1393c:	6053      	str	r3, [r2, #4]
   1393e:	2b00      	cmp	r3, #0
   13940:	d101      	bne.n	13946 <tmr_ovf_callback+0x1a>
   13942:	4b0a      	ldr	r3, [pc, #40]	; (1396c <tmr_ovf_callback+0x40>)
   13944:	4798      	blx	r3
   13946:	4a08      	ldr	r2, [pc, #32]	; (13968 <tmr_ovf_callback+0x3c>)
   13948:	7813      	ldrb	r3, [r2, #0]
   1394a:	3301      	adds	r3, #1
   1394c:	b2db      	uxtb	r3, r3
   1394e:	7013      	strb	r3, [r2, #0]
   13950:	4a07      	ldr	r2, [pc, #28]	; (13970 <tmr_ovf_callback+0x44>)
   13952:	7812      	ldrb	r2, [r2, #0]
   13954:	429a      	cmp	r2, r3
   13956:	d806      	bhi.n	13966 <tmr_ovf_callback+0x3a>
   13958:	4b03      	ldr	r3, [pc, #12]	; (13968 <tmr_ovf_callback+0x3c>)
   1395a:	2200      	movs	r2, #0
   1395c:	701a      	strb	r2, [r3, #0]
   1395e:	68db      	ldr	r3, [r3, #12]
   13960:	2b00      	cmp	r3, #0
   13962:	d000      	beq.n	13966 <tmr_ovf_callback+0x3a>
   13964:	4798      	blx	r3
   13966:	bd08      	pop	{r3, pc}
   13968:	20001ec8 	.word	0x20001ec8
   1396c:	0000de2d 	.word	0x0000de2d
   13970:	200034e4 	.word	0x200034e4

00013974 <tmr_cca_callback>:
   13974:	b508      	push	{r3, lr}
   13976:	4b04      	ldr	r3, [pc, #16]	; (13988 <tmr_cca_callback+0x14>)
   13978:	4798      	blx	r3
   1397a:	4b04      	ldr	r3, [pc, #16]	; (1398c <tmr_cca_callback+0x18>)
   1397c:	691b      	ldr	r3, [r3, #16]
   1397e:	2b00      	cmp	r3, #0
   13980:	d000      	beq.n	13984 <tmr_cca_callback+0x10>
   13982:	4798      	blx	r3
   13984:	bd08      	pop	{r3, pc}
   13986:	46c0      	nop			; (mov r8, r8)
   13988:	0000de19 	.word	0x0000de19
   1398c:	20001ec8 	.word	0x20001ec8

00013990 <set_common_tc_overflow_callback>:
   13990:	4b01      	ldr	r3, [pc, #4]	; (13998 <set_common_tc_overflow_callback+0x8>)
   13992:	60d8      	str	r0, [r3, #12]
   13994:	4770      	bx	lr
   13996:	46c0      	nop			; (mov r8, r8)
   13998:	20001ec8 	.word	0x20001ec8

0001399c <set_common_tc_expiry_callback>:
   1399c:	4b01      	ldr	r3, [pc, #4]	; (139a4 <set_common_tc_expiry_callback+0x8>)
   1399e:	6118      	str	r0, [r3, #16]
   139a0:	4770      	bx	lr
   139a2:	46c0      	nop			; (mov r8, r8)
   139a4:	20001ec8 	.word	0x20001ec8

000139a8 <__gnu_thumb1_case_uqi>:
   139a8:	b402      	push	{r1}
   139aa:	4671      	mov	r1, lr
   139ac:	0849      	lsrs	r1, r1, #1
   139ae:	0049      	lsls	r1, r1, #1
   139b0:	5c09      	ldrb	r1, [r1, r0]
   139b2:	0049      	lsls	r1, r1, #1
   139b4:	448e      	add	lr, r1
   139b6:	bc02      	pop	{r1}
   139b8:	4770      	bx	lr
   139ba:	46c0      	nop			; (mov r8, r8)

000139bc <__gnu_thumb1_case_shi>:
   139bc:	b403      	push	{r0, r1}
   139be:	4671      	mov	r1, lr
   139c0:	0849      	lsrs	r1, r1, #1
   139c2:	0040      	lsls	r0, r0, #1
   139c4:	0049      	lsls	r1, r1, #1
   139c6:	5e09      	ldrsh	r1, [r1, r0]
   139c8:	0049      	lsls	r1, r1, #1
   139ca:	448e      	add	lr, r1
   139cc:	bc03      	pop	{r0, r1}
   139ce:	4770      	bx	lr

000139d0 <__gnu_thumb1_case_uhi>:
   139d0:	b403      	push	{r0, r1}
   139d2:	4671      	mov	r1, lr
   139d4:	0849      	lsrs	r1, r1, #1
   139d6:	0040      	lsls	r0, r0, #1
   139d8:	0049      	lsls	r1, r1, #1
   139da:	5a09      	ldrh	r1, [r1, r0]
   139dc:	0049      	lsls	r1, r1, #1
   139de:	448e      	add	lr, r1
   139e0:	bc03      	pop	{r0, r1}
   139e2:	4770      	bx	lr

000139e4 <__udivsi3>:
   139e4:	2200      	movs	r2, #0
   139e6:	0843      	lsrs	r3, r0, #1
   139e8:	428b      	cmp	r3, r1
   139ea:	d374      	bcc.n	13ad6 <__udivsi3+0xf2>
   139ec:	0903      	lsrs	r3, r0, #4
   139ee:	428b      	cmp	r3, r1
   139f0:	d35f      	bcc.n	13ab2 <__udivsi3+0xce>
   139f2:	0a03      	lsrs	r3, r0, #8
   139f4:	428b      	cmp	r3, r1
   139f6:	d344      	bcc.n	13a82 <__udivsi3+0x9e>
   139f8:	0b03      	lsrs	r3, r0, #12
   139fa:	428b      	cmp	r3, r1
   139fc:	d328      	bcc.n	13a50 <__udivsi3+0x6c>
   139fe:	0c03      	lsrs	r3, r0, #16
   13a00:	428b      	cmp	r3, r1
   13a02:	d30d      	bcc.n	13a20 <__udivsi3+0x3c>
   13a04:	22ff      	movs	r2, #255	; 0xff
   13a06:	0209      	lsls	r1, r1, #8
   13a08:	ba12      	rev	r2, r2
   13a0a:	0c03      	lsrs	r3, r0, #16
   13a0c:	428b      	cmp	r3, r1
   13a0e:	d302      	bcc.n	13a16 <__udivsi3+0x32>
   13a10:	1212      	asrs	r2, r2, #8
   13a12:	0209      	lsls	r1, r1, #8
   13a14:	d065      	beq.n	13ae2 <__udivsi3+0xfe>
   13a16:	0b03      	lsrs	r3, r0, #12
   13a18:	428b      	cmp	r3, r1
   13a1a:	d319      	bcc.n	13a50 <__udivsi3+0x6c>
   13a1c:	e000      	b.n	13a20 <__udivsi3+0x3c>
   13a1e:	0a09      	lsrs	r1, r1, #8
   13a20:	0bc3      	lsrs	r3, r0, #15
   13a22:	428b      	cmp	r3, r1
   13a24:	d301      	bcc.n	13a2a <__udivsi3+0x46>
   13a26:	03cb      	lsls	r3, r1, #15
   13a28:	1ac0      	subs	r0, r0, r3
   13a2a:	4152      	adcs	r2, r2
   13a2c:	0b83      	lsrs	r3, r0, #14
   13a2e:	428b      	cmp	r3, r1
   13a30:	d301      	bcc.n	13a36 <__udivsi3+0x52>
   13a32:	038b      	lsls	r3, r1, #14
   13a34:	1ac0      	subs	r0, r0, r3
   13a36:	4152      	adcs	r2, r2
   13a38:	0b43      	lsrs	r3, r0, #13
   13a3a:	428b      	cmp	r3, r1
   13a3c:	d301      	bcc.n	13a42 <__udivsi3+0x5e>
   13a3e:	034b      	lsls	r3, r1, #13
   13a40:	1ac0      	subs	r0, r0, r3
   13a42:	4152      	adcs	r2, r2
   13a44:	0b03      	lsrs	r3, r0, #12
   13a46:	428b      	cmp	r3, r1
   13a48:	d301      	bcc.n	13a4e <__udivsi3+0x6a>
   13a4a:	030b      	lsls	r3, r1, #12
   13a4c:	1ac0      	subs	r0, r0, r3
   13a4e:	4152      	adcs	r2, r2
   13a50:	0ac3      	lsrs	r3, r0, #11
   13a52:	428b      	cmp	r3, r1
   13a54:	d301      	bcc.n	13a5a <__udivsi3+0x76>
   13a56:	02cb      	lsls	r3, r1, #11
   13a58:	1ac0      	subs	r0, r0, r3
   13a5a:	4152      	adcs	r2, r2
   13a5c:	0a83      	lsrs	r3, r0, #10
   13a5e:	428b      	cmp	r3, r1
   13a60:	d301      	bcc.n	13a66 <__udivsi3+0x82>
   13a62:	028b      	lsls	r3, r1, #10
   13a64:	1ac0      	subs	r0, r0, r3
   13a66:	4152      	adcs	r2, r2
   13a68:	0a43      	lsrs	r3, r0, #9
   13a6a:	428b      	cmp	r3, r1
   13a6c:	d301      	bcc.n	13a72 <__udivsi3+0x8e>
   13a6e:	024b      	lsls	r3, r1, #9
   13a70:	1ac0      	subs	r0, r0, r3
   13a72:	4152      	adcs	r2, r2
   13a74:	0a03      	lsrs	r3, r0, #8
   13a76:	428b      	cmp	r3, r1
   13a78:	d301      	bcc.n	13a7e <__udivsi3+0x9a>
   13a7a:	020b      	lsls	r3, r1, #8
   13a7c:	1ac0      	subs	r0, r0, r3
   13a7e:	4152      	adcs	r2, r2
   13a80:	d2cd      	bcs.n	13a1e <__udivsi3+0x3a>
   13a82:	09c3      	lsrs	r3, r0, #7
   13a84:	428b      	cmp	r3, r1
   13a86:	d301      	bcc.n	13a8c <__udivsi3+0xa8>
   13a88:	01cb      	lsls	r3, r1, #7
   13a8a:	1ac0      	subs	r0, r0, r3
   13a8c:	4152      	adcs	r2, r2
   13a8e:	0983      	lsrs	r3, r0, #6
   13a90:	428b      	cmp	r3, r1
   13a92:	d301      	bcc.n	13a98 <__udivsi3+0xb4>
   13a94:	018b      	lsls	r3, r1, #6
   13a96:	1ac0      	subs	r0, r0, r3
   13a98:	4152      	adcs	r2, r2
   13a9a:	0943      	lsrs	r3, r0, #5
   13a9c:	428b      	cmp	r3, r1
   13a9e:	d301      	bcc.n	13aa4 <__udivsi3+0xc0>
   13aa0:	014b      	lsls	r3, r1, #5
   13aa2:	1ac0      	subs	r0, r0, r3
   13aa4:	4152      	adcs	r2, r2
   13aa6:	0903      	lsrs	r3, r0, #4
   13aa8:	428b      	cmp	r3, r1
   13aaa:	d301      	bcc.n	13ab0 <__udivsi3+0xcc>
   13aac:	010b      	lsls	r3, r1, #4
   13aae:	1ac0      	subs	r0, r0, r3
   13ab0:	4152      	adcs	r2, r2
   13ab2:	08c3      	lsrs	r3, r0, #3
   13ab4:	428b      	cmp	r3, r1
   13ab6:	d301      	bcc.n	13abc <__udivsi3+0xd8>
   13ab8:	00cb      	lsls	r3, r1, #3
   13aba:	1ac0      	subs	r0, r0, r3
   13abc:	4152      	adcs	r2, r2
   13abe:	0883      	lsrs	r3, r0, #2
   13ac0:	428b      	cmp	r3, r1
   13ac2:	d301      	bcc.n	13ac8 <__udivsi3+0xe4>
   13ac4:	008b      	lsls	r3, r1, #2
   13ac6:	1ac0      	subs	r0, r0, r3
   13ac8:	4152      	adcs	r2, r2
   13aca:	0843      	lsrs	r3, r0, #1
   13acc:	428b      	cmp	r3, r1
   13ace:	d301      	bcc.n	13ad4 <__udivsi3+0xf0>
   13ad0:	004b      	lsls	r3, r1, #1
   13ad2:	1ac0      	subs	r0, r0, r3
   13ad4:	4152      	adcs	r2, r2
   13ad6:	1a41      	subs	r1, r0, r1
   13ad8:	d200      	bcs.n	13adc <__udivsi3+0xf8>
   13ada:	4601      	mov	r1, r0
   13adc:	4152      	adcs	r2, r2
   13ade:	4610      	mov	r0, r2
   13ae0:	4770      	bx	lr
   13ae2:	e7ff      	b.n	13ae4 <__udivsi3+0x100>
   13ae4:	b501      	push	{r0, lr}
   13ae6:	2000      	movs	r0, #0
   13ae8:	f000 f8f0 	bl	13ccc <__aeabi_idiv0>
   13aec:	bd02      	pop	{r1, pc}
   13aee:	46c0      	nop			; (mov r8, r8)

00013af0 <__aeabi_uidivmod>:
   13af0:	2900      	cmp	r1, #0
   13af2:	d0f7      	beq.n	13ae4 <__udivsi3+0x100>
   13af4:	e776      	b.n	139e4 <__udivsi3>
   13af6:	4770      	bx	lr

00013af8 <__divsi3>:
   13af8:	4603      	mov	r3, r0
   13afa:	430b      	orrs	r3, r1
   13afc:	d47f      	bmi.n	13bfe <__divsi3+0x106>
   13afe:	2200      	movs	r2, #0
   13b00:	0843      	lsrs	r3, r0, #1
   13b02:	428b      	cmp	r3, r1
   13b04:	d374      	bcc.n	13bf0 <__divsi3+0xf8>
   13b06:	0903      	lsrs	r3, r0, #4
   13b08:	428b      	cmp	r3, r1
   13b0a:	d35f      	bcc.n	13bcc <__divsi3+0xd4>
   13b0c:	0a03      	lsrs	r3, r0, #8
   13b0e:	428b      	cmp	r3, r1
   13b10:	d344      	bcc.n	13b9c <__divsi3+0xa4>
   13b12:	0b03      	lsrs	r3, r0, #12
   13b14:	428b      	cmp	r3, r1
   13b16:	d328      	bcc.n	13b6a <__divsi3+0x72>
   13b18:	0c03      	lsrs	r3, r0, #16
   13b1a:	428b      	cmp	r3, r1
   13b1c:	d30d      	bcc.n	13b3a <__divsi3+0x42>
   13b1e:	22ff      	movs	r2, #255	; 0xff
   13b20:	0209      	lsls	r1, r1, #8
   13b22:	ba12      	rev	r2, r2
   13b24:	0c03      	lsrs	r3, r0, #16
   13b26:	428b      	cmp	r3, r1
   13b28:	d302      	bcc.n	13b30 <__divsi3+0x38>
   13b2a:	1212      	asrs	r2, r2, #8
   13b2c:	0209      	lsls	r1, r1, #8
   13b2e:	d065      	beq.n	13bfc <__divsi3+0x104>
   13b30:	0b03      	lsrs	r3, r0, #12
   13b32:	428b      	cmp	r3, r1
   13b34:	d319      	bcc.n	13b6a <__divsi3+0x72>
   13b36:	e000      	b.n	13b3a <__divsi3+0x42>
   13b38:	0a09      	lsrs	r1, r1, #8
   13b3a:	0bc3      	lsrs	r3, r0, #15
   13b3c:	428b      	cmp	r3, r1
   13b3e:	d301      	bcc.n	13b44 <__divsi3+0x4c>
   13b40:	03cb      	lsls	r3, r1, #15
   13b42:	1ac0      	subs	r0, r0, r3
   13b44:	4152      	adcs	r2, r2
   13b46:	0b83      	lsrs	r3, r0, #14
   13b48:	428b      	cmp	r3, r1
   13b4a:	d301      	bcc.n	13b50 <__divsi3+0x58>
   13b4c:	038b      	lsls	r3, r1, #14
   13b4e:	1ac0      	subs	r0, r0, r3
   13b50:	4152      	adcs	r2, r2
   13b52:	0b43      	lsrs	r3, r0, #13
   13b54:	428b      	cmp	r3, r1
   13b56:	d301      	bcc.n	13b5c <__divsi3+0x64>
   13b58:	034b      	lsls	r3, r1, #13
   13b5a:	1ac0      	subs	r0, r0, r3
   13b5c:	4152      	adcs	r2, r2
   13b5e:	0b03      	lsrs	r3, r0, #12
   13b60:	428b      	cmp	r3, r1
   13b62:	d301      	bcc.n	13b68 <__divsi3+0x70>
   13b64:	030b      	lsls	r3, r1, #12
   13b66:	1ac0      	subs	r0, r0, r3
   13b68:	4152      	adcs	r2, r2
   13b6a:	0ac3      	lsrs	r3, r0, #11
   13b6c:	428b      	cmp	r3, r1
   13b6e:	d301      	bcc.n	13b74 <__divsi3+0x7c>
   13b70:	02cb      	lsls	r3, r1, #11
   13b72:	1ac0      	subs	r0, r0, r3
   13b74:	4152      	adcs	r2, r2
   13b76:	0a83      	lsrs	r3, r0, #10
   13b78:	428b      	cmp	r3, r1
   13b7a:	d301      	bcc.n	13b80 <__divsi3+0x88>
   13b7c:	028b      	lsls	r3, r1, #10
   13b7e:	1ac0      	subs	r0, r0, r3
   13b80:	4152      	adcs	r2, r2
   13b82:	0a43      	lsrs	r3, r0, #9
   13b84:	428b      	cmp	r3, r1
   13b86:	d301      	bcc.n	13b8c <__divsi3+0x94>
   13b88:	024b      	lsls	r3, r1, #9
   13b8a:	1ac0      	subs	r0, r0, r3
   13b8c:	4152      	adcs	r2, r2
   13b8e:	0a03      	lsrs	r3, r0, #8
   13b90:	428b      	cmp	r3, r1
   13b92:	d301      	bcc.n	13b98 <__divsi3+0xa0>
   13b94:	020b      	lsls	r3, r1, #8
   13b96:	1ac0      	subs	r0, r0, r3
   13b98:	4152      	adcs	r2, r2
   13b9a:	d2cd      	bcs.n	13b38 <__divsi3+0x40>
   13b9c:	09c3      	lsrs	r3, r0, #7
   13b9e:	428b      	cmp	r3, r1
   13ba0:	d301      	bcc.n	13ba6 <__divsi3+0xae>
   13ba2:	01cb      	lsls	r3, r1, #7
   13ba4:	1ac0      	subs	r0, r0, r3
   13ba6:	4152      	adcs	r2, r2
   13ba8:	0983      	lsrs	r3, r0, #6
   13baa:	428b      	cmp	r3, r1
   13bac:	d301      	bcc.n	13bb2 <__divsi3+0xba>
   13bae:	018b      	lsls	r3, r1, #6
   13bb0:	1ac0      	subs	r0, r0, r3
   13bb2:	4152      	adcs	r2, r2
   13bb4:	0943      	lsrs	r3, r0, #5
   13bb6:	428b      	cmp	r3, r1
   13bb8:	d301      	bcc.n	13bbe <__divsi3+0xc6>
   13bba:	014b      	lsls	r3, r1, #5
   13bbc:	1ac0      	subs	r0, r0, r3
   13bbe:	4152      	adcs	r2, r2
   13bc0:	0903      	lsrs	r3, r0, #4
   13bc2:	428b      	cmp	r3, r1
   13bc4:	d301      	bcc.n	13bca <__divsi3+0xd2>
   13bc6:	010b      	lsls	r3, r1, #4
   13bc8:	1ac0      	subs	r0, r0, r3
   13bca:	4152      	adcs	r2, r2
   13bcc:	08c3      	lsrs	r3, r0, #3
   13bce:	428b      	cmp	r3, r1
   13bd0:	d301      	bcc.n	13bd6 <__divsi3+0xde>
   13bd2:	00cb      	lsls	r3, r1, #3
   13bd4:	1ac0      	subs	r0, r0, r3
   13bd6:	4152      	adcs	r2, r2
   13bd8:	0883      	lsrs	r3, r0, #2
   13bda:	428b      	cmp	r3, r1
   13bdc:	d301      	bcc.n	13be2 <__divsi3+0xea>
   13bde:	008b      	lsls	r3, r1, #2
   13be0:	1ac0      	subs	r0, r0, r3
   13be2:	4152      	adcs	r2, r2
   13be4:	0843      	lsrs	r3, r0, #1
   13be6:	428b      	cmp	r3, r1
   13be8:	d301      	bcc.n	13bee <__divsi3+0xf6>
   13bea:	004b      	lsls	r3, r1, #1
   13bec:	1ac0      	subs	r0, r0, r3
   13bee:	4152      	adcs	r2, r2
   13bf0:	1a41      	subs	r1, r0, r1
   13bf2:	d200      	bcs.n	13bf6 <__divsi3+0xfe>
   13bf4:	4601      	mov	r1, r0
   13bf6:	4152      	adcs	r2, r2
   13bf8:	4610      	mov	r0, r2
   13bfa:	4770      	bx	lr
   13bfc:	e05d      	b.n	13cba <__divsi3+0x1c2>
   13bfe:	0fca      	lsrs	r2, r1, #31
   13c00:	d000      	beq.n	13c04 <__divsi3+0x10c>
   13c02:	4249      	negs	r1, r1
   13c04:	1003      	asrs	r3, r0, #32
   13c06:	d300      	bcc.n	13c0a <__divsi3+0x112>
   13c08:	4240      	negs	r0, r0
   13c0a:	4053      	eors	r3, r2
   13c0c:	2200      	movs	r2, #0
   13c0e:	469c      	mov	ip, r3
   13c10:	0903      	lsrs	r3, r0, #4
   13c12:	428b      	cmp	r3, r1
   13c14:	d32d      	bcc.n	13c72 <__divsi3+0x17a>
   13c16:	0a03      	lsrs	r3, r0, #8
   13c18:	428b      	cmp	r3, r1
   13c1a:	d312      	bcc.n	13c42 <__divsi3+0x14a>
   13c1c:	22fc      	movs	r2, #252	; 0xfc
   13c1e:	0189      	lsls	r1, r1, #6
   13c20:	ba12      	rev	r2, r2
   13c22:	0a03      	lsrs	r3, r0, #8
   13c24:	428b      	cmp	r3, r1
   13c26:	d30c      	bcc.n	13c42 <__divsi3+0x14a>
   13c28:	0189      	lsls	r1, r1, #6
   13c2a:	1192      	asrs	r2, r2, #6
   13c2c:	428b      	cmp	r3, r1
   13c2e:	d308      	bcc.n	13c42 <__divsi3+0x14a>
   13c30:	0189      	lsls	r1, r1, #6
   13c32:	1192      	asrs	r2, r2, #6
   13c34:	428b      	cmp	r3, r1
   13c36:	d304      	bcc.n	13c42 <__divsi3+0x14a>
   13c38:	0189      	lsls	r1, r1, #6
   13c3a:	d03a      	beq.n	13cb2 <__divsi3+0x1ba>
   13c3c:	1192      	asrs	r2, r2, #6
   13c3e:	e000      	b.n	13c42 <__divsi3+0x14a>
   13c40:	0989      	lsrs	r1, r1, #6
   13c42:	09c3      	lsrs	r3, r0, #7
   13c44:	428b      	cmp	r3, r1
   13c46:	d301      	bcc.n	13c4c <__divsi3+0x154>
   13c48:	01cb      	lsls	r3, r1, #7
   13c4a:	1ac0      	subs	r0, r0, r3
   13c4c:	4152      	adcs	r2, r2
   13c4e:	0983      	lsrs	r3, r0, #6
   13c50:	428b      	cmp	r3, r1
   13c52:	d301      	bcc.n	13c58 <__divsi3+0x160>
   13c54:	018b      	lsls	r3, r1, #6
   13c56:	1ac0      	subs	r0, r0, r3
   13c58:	4152      	adcs	r2, r2
   13c5a:	0943      	lsrs	r3, r0, #5
   13c5c:	428b      	cmp	r3, r1
   13c5e:	d301      	bcc.n	13c64 <__divsi3+0x16c>
   13c60:	014b      	lsls	r3, r1, #5
   13c62:	1ac0      	subs	r0, r0, r3
   13c64:	4152      	adcs	r2, r2
   13c66:	0903      	lsrs	r3, r0, #4
   13c68:	428b      	cmp	r3, r1
   13c6a:	d301      	bcc.n	13c70 <__divsi3+0x178>
   13c6c:	010b      	lsls	r3, r1, #4
   13c6e:	1ac0      	subs	r0, r0, r3
   13c70:	4152      	adcs	r2, r2
   13c72:	08c3      	lsrs	r3, r0, #3
   13c74:	428b      	cmp	r3, r1
   13c76:	d301      	bcc.n	13c7c <__divsi3+0x184>
   13c78:	00cb      	lsls	r3, r1, #3
   13c7a:	1ac0      	subs	r0, r0, r3
   13c7c:	4152      	adcs	r2, r2
   13c7e:	0883      	lsrs	r3, r0, #2
   13c80:	428b      	cmp	r3, r1
   13c82:	d301      	bcc.n	13c88 <__divsi3+0x190>
   13c84:	008b      	lsls	r3, r1, #2
   13c86:	1ac0      	subs	r0, r0, r3
   13c88:	4152      	adcs	r2, r2
   13c8a:	d2d9      	bcs.n	13c40 <__divsi3+0x148>
   13c8c:	0843      	lsrs	r3, r0, #1
   13c8e:	428b      	cmp	r3, r1
   13c90:	d301      	bcc.n	13c96 <__divsi3+0x19e>
   13c92:	004b      	lsls	r3, r1, #1
   13c94:	1ac0      	subs	r0, r0, r3
   13c96:	4152      	adcs	r2, r2
   13c98:	1a41      	subs	r1, r0, r1
   13c9a:	d200      	bcs.n	13c9e <__divsi3+0x1a6>
   13c9c:	4601      	mov	r1, r0
   13c9e:	4663      	mov	r3, ip
   13ca0:	4152      	adcs	r2, r2
   13ca2:	105b      	asrs	r3, r3, #1
   13ca4:	4610      	mov	r0, r2
   13ca6:	d301      	bcc.n	13cac <__divsi3+0x1b4>
   13ca8:	4240      	negs	r0, r0
   13caa:	2b00      	cmp	r3, #0
   13cac:	d500      	bpl.n	13cb0 <__divsi3+0x1b8>
   13cae:	4249      	negs	r1, r1
   13cb0:	4770      	bx	lr
   13cb2:	4663      	mov	r3, ip
   13cb4:	105b      	asrs	r3, r3, #1
   13cb6:	d300      	bcc.n	13cba <__divsi3+0x1c2>
   13cb8:	4240      	negs	r0, r0
   13cba:	b501      	push	{r0, lr}
   13cbc:	2000      	movs	r0, #0
   13cbe:	f000 f805 	bl	13ccc <__aeabi_idiv0>
   13cc2:	bd02      	pop	{r1, pc}

00013cc4 <__aeabi_idivmod>:
   13cc4:	2900      	cmp	r1, #0
   13cc6:	d0f8      	beq.n	13cba <__divsi3+0x1c2>
   13cc8:	e716      	b.n	13af8 <__divsi3>
   13cca:	4770      	bx	lr

00013ccc <__aeabi_idiv0>:
   13ccc:	4770      	bx	lr
   13cce:	46c0      	nop			; (mov r8, r8)

00013cd0 <__aeabi_cdrcmple>:
   13cd0:	4684      	mov	ip, r0
   13cd2:	1c10      	adds	r0, r2, #0
   13cd4:	4662      	mov	r2, ip
   13cd6:	468c      	mov	ip, r1
   13cd8:	1c19      	adds	r1, r3, #0
   13cda:	4663      	mov	r3, ip
   13cdc:	e000      	b.n	13ce0 <__aeabi_cdcmpeq>
   13cde:	46c0      	nop			; (mov r8, r8)

00013ce0 <__aeabi_cdcmpeq>:
   13ce0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   13ce2:	f001 ffa3 	bl	15c2c <__ledf2>
   13ce6:	2800      	cmp	r0, #0
   13ce8:	d401      	bmi.n	13cee <__aeabi_cdcmpeq+0xe>
   13cea:	2100      	movs	r1, #0
   13cec:	42c8      	cmn	r0, r1
   13cee:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00013cf0 <__aeabi_dcmpeq>:
   13cf0:	b510      	push	{r4, lr}
   13cf2:	f001 fefd 	bl	15af0 <__eqdf2>
   13cf6:	4240      	negs	r0, r0
   13cf8:	3001      	adds	r0, #1
   13cfa:	bd10      	pop	{r4, pc}

00013cfc <__aeabi_dcmplt>:
   13cfc:	b510      	push	{r4, lr}
   13cfe:	f001 ff95 	bl	15c2c <__ledf2>
   13d02:	2800      	cmp	r0, #0
   13d04:	db01      	blt.n	13d0a <__aeabi_dcmplt+0xe>
   13d06:	2000      	movs	r0, #0
   13d08:	bd10      	pop	{r4, pc}
   13d0a:	2001      	movs	r0, #1
   13d0c:	bd10      	pop	{r4, pc}
   13d0e:	46c0      	nop			; (mov r8, r8)

00013d10 <__aeabi_dcmple>:
   13d10:	b510      	push	{r4, lr}
   13d12:	f001 ff8b 	bl	15c2c <__ledf2>
   13d16:	2800      	cmp	r0, #0
   13d18:	dd01      	ble.n	13d1e <__aeabi_dcmple+0xe>
   13d1a:	2000      	movs	r0, #0
   13d1c:	bd10      	pop	{r4, pc}
   13d1e:	2001      	movs	r0, #1
   13d20:	bd10      	pop	{r4, pc}
   13d22:	46c0      	nop			; (mov r8, r8)

00013d24 <__aeabi_dcmpgt>:
   13d24:	b510      	push	{r4, lr}
   13d26:	f001 ff1d 	bl	15b64 <__gedf2>
   13d2a:	2800      	cmp	r0, #0
   13d2c:	dc01      	bgt.n	13d32 <__aeabi_dcmpgt+0xe>
   13d2e:	2000      	movs	r0, #0
   13d30:	bd10      	pop	{r4, pc}
   13d32:	2001      	movs	r0, #1
   13d34:	bd10      	pop	{r4, pc}
   13d36:	46c0      	nop			; (mov r8, r8)

00013d38 <__aeabi_dcmpge>:
   13d38:	b510      	push	{r4, lr}
   13d3a:	f001 ff13 	bl	15b64 <__gedf2>
   13d3e:	2800      	cmp	r0, #0
   13d40:	da01      	bge.n	13d46 <__aeabi_dcmpge+0xe>
   13d42:	2000      	movs	r0, #0
   13d44:	bd10      	pop	{r4, pc}
   13d46:	2001      	movs	r0, #1
   13d48:	bd10      	pop	{r4, pc}
   13d4a:	46c0      	nop			; (mov r8, r8)

00013d4c <__aeabi_cfrcmple>:
   13d4c:	4684      	mov	ip, r0
   13d4e:	1c08      	adds	r0, r1, #0
   13d50:	4661      	mov	r1, ip
   13d52:	e7ff      	b.n	13d54 <__aeabi_cfcmpeq>

00013d54 <__aeabi_cfcmpeq>:
   13d54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   13d56:	f000 fcd3 	bl	14700 <__lesf2>
   13d5a:	2800      	cmp	r0, #0
   13d5c:	d401      	bmi.n	13d62 <__aeabi_cfcmpeq+0xe>
   13d5e:	2100      	movs	r1, #0
   13d60:	42c8      	cmn	r0, r1
   13d62:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00013d64 <__aeabi_fcmpeq>:
   13d64:	b510      	push	{r4, lr}
   13d66:	f000 fc65 	bl	14634 <__eqsf2>
   13d6a:	4240      	negs	r0, r0
   13d6c:	3001      	adds	r0, #1
   13d6e:	bd10      	pop	{r4, pc}

00013d70 <__aeabi_fcmplt>:
   13d70:	b510      	push	{r4, lr}
   13d72:	f000 fcc5 	bl	14700 <__lesf2>
   13d76:	2800      	cmp	r0, #0
   13d78:	db01      	blt.n	13d7e <__aeabi_fcmplt+0xe>
   13d7a:	2000      	movs	r0, #0
   13d7c:	bd10      	pop	{r4, pc}
   13d7e:	2001      	movs	r0, #1
   13d80:	bd10      	pop	{r4, pc}
   13d82:	46c0      	nop			; (mov r8, r8)

00013d84 <__aeabi_fcmple>:
   13d84:	b510      	push	{r4, lr}
   13d86:	f000 fcbb 	bl	14700 <__lesf2>
   13d8a:	2800      	cmp	r0, #0
   13d8c:	dd01      	ble.n	13d92 <__aeabi_fcmple+0xe>
   13d8e:	2000      	movs	r0, #0
   13d90:	bd10      	pop	{r4, pc}
   13d92:	2001      	movs	r0, #1
   13d94:	bd10      	pop	{r4, pc}
   13d96:	46c0      	nop			; (mov r8, r8)

00013d98 <__aeabi_fcmpgt>:
   13d98:	b510      	push	{r4, lr}
   13d9a:	f000 fc71 	bl	14680 <__gesf2>
   13d9e:	2800      	cmp	r0, #0
   13da0:	dc01      	bgt.n	13da6 <__aeabi_fcmpgt+0xe>
   13da2:	2000      	movs	r0, #0
   13da4:	bd10      	pop	{r4, pc}
   13da6:	2001      	movs	r0, #1
   13da8:	bd10      	pop	{r4, pc}
   13daa:	46c0      	nop			; (mov r8, r8)

00013dac <__aeabi_fcmpge>:
   13dac:	b510      	push	{r4, lr}
   13dae:	f000 fc67 	bl	14680 <__gesf2>
   13db2:	2800      	cmp	r0, #0
   13db4:	da01      	bge.n	13dba <__aeabi_fcmpge+0xe>
   13db6:	2000      	movs	r0, #0
   13db8:	bd10      	pop	{r4, pc}
   13dba:	2001      	movs	r0, #1
   13dbc:	bd10      	pop	{r4, pc}
   13dbe:	46c0      	nop			; (mov r8, r8)

00013dc0 <__aeabi_uldivmod>:
   13dc0:	2b00      	cmp	r3, #0
   13dc2:	d111      	bne.n	13de8 <__aeabi_uldivmod+0x28>
   13dc4:	2a00      	cmp	r2, #0
   13dc6:	d10f      	bne.n	13de8 <__aeabi_uldivmod+0x28>
   13dc8:	2900      	cmp	r1, #0
   13dca:	d100      	bne.n	13dce <__aeabi_uldivmod+0xe>
   13dcc:	2800      	cmp	r0, #0
   13dce:	d002      	beq.n	13dd6 <__aeabi_uldivmod+0x16>
   13dd0:	2100      	movs	r1, #0
   13dd2:	43c9      	mvns	r1, r1
   13dd4:	1c08      	adds	r0, r1, #0
   13dd6:	b407      	push	{r0, r1, r2}
   13dd8:	4802      	ldr	r0, [pc, #8]	; (13de4 <__aeabi_uldivmod+0x24>)
   13dda:	a102      	add	r1, pc, #8	; (adr r1, 13de4 <__aeabi_uldivmod+0x24>)
   13ddc:	1840      	adds	r0, r0, r1
   13dde:	9002      	str	r0, [sp, #8]
   13de0:	bd03      	pop	{r0, r1, pc}
   13de2:	46c0      	nop			; (mov r8, r8)
   13de4:	fffffee9 	.word	0xfffffee9
   13de8:	b403      	push	{r0, r1}
   13dea:	4668      	mov	r0, sp
   13dec:	b501      	push	{r0, lr}
   13dee:	9802      	ldr	r0, [sp, #8]
   13df0:	f000 f886 	bl	13f00 <__udivmoddi4>
   13df4:	9b01      	ldr	r3, [sp, #4]
   13df6:	469e      	mov	lr, r3
   13df8:	b002      	add	sp, #8
   13dfa:	bc0c      	pop	{r2, r3}
   13dfc:	4770      	bx	lr
   13dfe:	46c0      	nop			; (mov r8, r8)

00013e00 <__aeabi_lmul>:
   13e00:	b5f0      	push	{r4, r5, r6, r7, lr}
   13e02:	46ce      	mov	lr, r9
   13e04:	4647      	mov	r7, r8
   13e06:	0415      	lsls	r5, r2, #16
   13e08:	0c2d      	lsrs	r5, r5, #16
   13e0a:	002e      	movs	r6, r5
   13e0c:	b580      	push	{r7, lr}
   13e0e:	0407      	lsls	r7, r0, #16
   13e10:	0c14      	lsrs	r4, r2, #16
   13e12:	0c3f      	lsrs	r7, r7, #16
   13e14:	4699      	mov	r9, r3
   13e16:	0c03      	lsrs	r3, r0, #16
   13e18:	437e      	muls	r6, r7
   13e1a:	435d      	muls	r5, r3
   13e1c:	4367      	muls	r7, r4
   13e1e:	4363      	muls	r3, r4
   13e20:	197f      	adds	r7, r7, r5
   13e22:	0c34      	lsrs	r4, r6, #16
   13e24:	19e4      	adds	r4, r4, r7
   13e26:	469c      	mov	ip, r3
   13e28:	42a5      	cmp	r5, r4
   13e2a:	d903      	bls.n	13e34 <__aeabi_lmul+0x34>
   13e2c:	2380      	movs	r3, #128	; 0x80
   13e2e:	025b      	lsls	r3, r3, #9
   13e30:	4698      	mov	r8, r3
   13e32:	44c4      	add	ip, r8
   13e34:	464b      	mov	r3, r9
   13e36:	4351      	muls	r1, r2
   13e38:	4343      	muls	r3, r0
   13e3a:	0436      	lsls	r6, r6, #16
   13e3c:	0c36      	lsrs	r6, r6, #16
   13e3e:	0c25      	lsrs	r5, r4, #16
   13e40:	0424      	lsls	r4, r4, #16
   13e42:	4465      	add	r5, ip
   13e44:	19a4      	adds	r4, r4, r6
   13e46:	1859      	adds	r1, r3, r1
   13e48:	1949      	adds	r1, r1, r5
   13e4a:	0020      	movs	r0, r4
   13e4c:	bc0c      	pop	{r2, r3}
   13e4e:	4690      	mov	r8, r2
   13e50:	4699      	mov	r9, r3
   13e52:	bdf0      	pop	{r4, r5, r6, r7, pc}

00013e54 <__aeabi_f2uiz>:
   13e54:	219e      	movs	r1, #158	; 0x9e
   13e56:	b510      	push	{r4, lr}
   13e58:	05c9      	lsls	r1, r1, #23
   13e5a:	1c04      	adds	r4, r0, #0
   13e5c:	f7ff ffa6 	bl	13dac <__aeabi_fcmpge>
   13e60:	2800      	cmp	r0, #0
   13e62:	d103      	bne.n	13e6c <__aeabi_f2uiz+0x18>
   13e64:	1c20      	adds	r0, r4, #0
   13e66:	f000 ff49 	bl	14cfc <__aeabi_f2iz>
   13e6a:	bd10      	pop	{r4, pc}
   13e6c:	219e      	movs	r1, #158	; 0x9e
   13e6e:	1c20      	adds	r0, r4, #0
   13e70:	05c9      	lsls	r1, r1, #23
   13e72:	f000 fda7 	bl	149c4 <__aeabi_fsub>
   13e76:	f000 ff41 	bl	14cfc <__aeabi_f2iz>
   13e7a:	2380      	movs	r3, #128	; 0x80
   13e7c:	061b      	lsls	r3, r3, #24
   13e7e:	469c      	mov	ip, r3
   13e80:	4460      	add	r0, ip
   13e82:	e7f2      	b.n	13e6a <__aeabi_f2uiz+0x16>

00013e84 <__aeabi_d2uiz>:
   13e84:	b570      	push	{r4, r5, r6, lr}
   13e86:	2200      	movs	r2, #0
   13e88:	4b0c      	ldr	r3, [pc, #48]	; (13ebc <__aeabi_d2uiz+0x38>)
   13e8a:	0004      	movs	r4, r0
   13e8c:	000d      	movs	r5, r1
   13e8e:	f7ff ff53 	bl	13d38 <__aeabi_dcmpge>
   13e92:	2800      	cmp	r0, #0
   13e94:	d104      	bne.n	13ea0 <__aeabi_d2uiz+0x1c>
   13e96:	0020      	movs	r0, r4
   13e98:	0029      	movs	r1, r5
   13e9a:	f002 fcbf 	bl	1681c <__aeabi_d2iz>
   13e9e:	bd70      	pop	{r4, r5, r6, pc}
   13ea0:	4b06      	ldr	r3, [pc, #24]	; (13ebc <__aeabi_d2uiz+0x38>)
   13ea2:	2200      	movs	r2, #0
   13ea4:	0020      	movs	r0, r4
   13ea6:	0029      	movs	r1, r5
   13ea8:	f002 f9a2 	bl	161f0 <__aeabi_dsub>
   13eac:	f002 fcb6 	bl	1681c <__aeabi_d2iz>
   13eb0:	2380      	movs	r3, #128	; 0x80
   13eb2:	061b      	lsls	r3, r3, #24
   13eb4:	469c      	mov	ip, r3
   13eb6:	4460      	add	r0, ip
   13eb8:	e7f1      	b.n	13e9e <__aeabi_d2uiz+0x1a>
   13eba:	46c0      	nop			; (mov r8, r8)
   13ebc:	41e00000 	.word	0x41e00000

00013ec0 <__aeabi_f2ulz>:
   13ec0:	b570      	push	{r4, r5, r6, lr}
   13ec2:	f002 fd59 	bl	16978 <__aeabi_f2d>
   13ec6:	2200      	movs	r2, #0
   13ec8:	4b0b      	ldr	r3, [pc, #44]	; (13ef8 <__aeabi_f2ulz+0x38>)
   13eca:	000d      	movs	r5, r1
   13ecc:	0004      	movs	r4, r0
   13ece:	f001 ff0f 	bl	15cf0 <__aeabi_dmul>
   13ed2:	f7ff ffd7 	bl	13e84 <__aeabi_d2uiz>
   13ed6:	0006      	movs	r6, r0
   13ed8:	f002 fd16 	bl	16908 <__aeabi_ui2d>
   13edc:	2200      	movs	r2, #0
   13ede:	4b07      	ldr	r3, [pc, #28]	; (13efc <__aeabi_f2ulz+0x3c>)
   13ee0:	f001 ff06 	bl	15cf0 <__aeabi_dmul>
   13ee4:	0002      	movs	r2, r0
   13ee6:	000b      	movs	r3, r1
   13ee8:	0020      	movs	r0, r4
   13eea:	0029      	movs	r1, r5
   13eec:	f002 f980 	bl	161f0 <__aeabi_dsub>
   13ef0:	f7ff ffc8 	bl	13e84 <__aeabi_d2uiz>
   13ef4:	0031      	movs	r1, r6
   13ef6:	bd70      	pop	{r4, r5, r6, pc}
   13ef8:	3df00000 	.word	0x3df00000
   13efc:	41f00000 	.word	0x41f00000

00013f00 <__udivmoddi4>:
   13f00:	b5f0      	push	{r4, r5, r6, r7, lr}
   13f02:	4657      	mov	r7, sl
   13f04:	464e      	mov	r6, r9
   13f06:	4645      	mov	r5, r8
   13f08:	46de      	mov	lr, fp
   13f0a:	b5e0      	push	{r5, r6, r7, lr}
   13f0c:	0004      	movs	r4, r0
   13f0e:	b083      	sub	sp, #12
   13f10:	000d      	movs	r5, r1
   13f12:	4692      	mov	sl, r2
   13f14:	4699      	mov	r9, r3
   13f16:	428b      	cmp	r3, r1
   13f18:	d82f      	bhi.n	13f7a <__udivmoddi4+0x7a>
   13f1a:	d02c      	beq.n	13f76 <__udivmoddi4+0x76>
   13f1c:	4649      	mov	r1, r9
   13f1e:	4650      	mov	r0, sl
   13f20:	f002 fe24 	bl	16b6c <__clzdi2>
   13f24:	0029      	movs	r1, r5
   13f26:	0006      	movs	r6, r0
   13f28:	0020      	movs	r0, r4
   13f2a:	f002 fe1f 	bl	16b6c <__clzdi2>
   13f2e:	1a33      	subs	r3, r6, r0
   13f30:	4698      	mov	r8, r3
   13f32:	3b20      	subs	r3, #32
   13f34:	469b      	mov	fp, r3
   13f36:	d500      	bpl.n	13f3a <__udivmoddi4+0x3a>
   13f38:	e074      	b.n	14024 <__udivmoddi4+0x124>
   13f3a:	4653      	mov	r3, sl
   13f3c:	465a      	mov	r2, fp
   13f3e:	4093      	lsls	r3, r2
   13f40:	001f      	movs	r7, r3
   13f42:	4653      	mov	r3, sl
   13f44:	4642      	mov	r2, r8
   13f46:	4093      	lsls	r3, r2
   13f48:	001e      	movs	r6, r3
   13f4a:	42af      	cmp	r7, r5
   13f4c:	d829      	bhi.n	13fa2 <__udivmoddi4+0xa2>
   13f4e:	d026      	beq.n	13f9e <__udivmoddi4+0x9e>
   13f50:	465b      	mov	r3, fp
   13f52:	1ba4      	subs	r4, r4, r6
   13f54:	41bd      	sbcs	r5, r7
   13f56:	2b00      	cmp	r3, #0
   13f58:	da00      	bge.n	13f5c <__udivmoddi4+0x5c>
   13f5a:	e079      	b.n	14050 <__udivmoddi4+0x150>
   13f5c:	2200      	movs	r2, #0
   13f5e:	2300      	movs	r3, #0
   13f60:	9200      	str	r2, [sp, #0]
   13f62:	9301      	str	r3, [sp, #4]
   13f64:	2301      	movs	r3, #1
   13f66:	465a      	mov	r2, fp
   13f68:	4093      	lsls	r3, r2
   13f6a:	9301      	str	r3, [sp, #4]
   13f6c:	2301      	movs	r3, #1
   13f6e:	4642      	mov	r2, r8
   13f70:	4093      	lsls	r3, r2
   13f72:	9300      	str	r3, [sp, #0]
   13f74:	e019      	b.n	13faa <__udivmoddi4+0xaa>
   13f76:	4282      	cmp	r2, r0
   13f78:	d9d0      	bls.n	13f1c <__udivmoddi4+0x1c>
   13f7a:	2200      	movs	r2, #0
   13f7c:	2300      	movs	r3, #0
   13f7e:	9200      	str	r2, [sp, #0]
   13f80:	9301      	str	r3, [sp, #4]
   13f82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13f84:	2b00      	cmp	r3, #0
   13f86:	d001      	beq.n	13f8c <__udivmoddi4+0x8c>
   13f88:	601c      	str	r4, [r3, #0]
   13f8a:	605d      	str	r5, [r3, #4]
   13f8c:	9800      	ldr	r0, [sp, #0]
   13f8e:	9901      	ldr	r1, [sp, #4]
   13f90:	b003      	add	sp, #12
   13f92:	bc3c      	pop	{r2, r3, r4, r5}
   13f94:	4690      	mov	r8, r2
   13f96:	4699      	mov	r9, r3
   13f98:	46a2      	mov	sl, r4
   13f9a:	46ab      	mov	fp, r5
   13f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13f9e:	42a3      	cmp	r3, r4
   13fa0:	d9d6      	bls.n	13f50 <__udivmoddi4+0x50>
   13fa2:	2200      	movs	r2, #0
   13fa4:	2300      	movs	r3, #0
   13fa6:	9200      	str	r2, [sp, #0]
   13fa8:	9301      	str	r3, [sp, #4]
   13faa:	4643      	mov	r3, r8
   13fac:	2b00      	cmp	r3, #0
   13fae:	d0e8      	beq.n	13f82 <__udivmoddi4+0x82>
   13fb0:	07fb      	lsls	r3, r7, #31
   13fb2:	0872      	lsrs	r2, r6, #1
   13fb4:	431a      	orrs	r2, r3
   13fb6:	4646      	mov	r6, r8
   13fb8:	087b      	lsrs	r3, r7, #1
   13fba:	e00e      	b.n	13fda <__udivmoddi4+0xda>
   13fbc:	42ab      	cmp	r3, r5
   13fbe:	d101      	bne.n	13fc4 <__udivmoddi4+0xc4>
   13fc0:	42a2      	cmp	r2, r4
   13fc2:	d80c      	bhi.n	13fde <__udivmoddi4+0xde>
   13fc4:	1aa4      	subs	r4, r4, r2
   13fc6:	419d      	sbcs	r5, r3
   13fc8:	2001      	movs	r0, #1
   13fca:	1924      	adds	r4, r4, r4
   13fcc:	416d      	adcs	r5, r5
   13fce:	2100      	movs	r1, #0
   13fd0:	3e01      	subs	r6, #1
   13fd2:	1824      	adds	r4, r4, r0
   13fd4:	414d      	adcs	r5, r1
   13fd6:	2e00      	cmp	r6, #0
   13fd8:	d006      	beq.n	13fe8 <__udivmoddi4+0xe8>
   13fda:	42ab      	cmp	r3, r5
   13fdc:	d9ee      	bls.n	13fbc <__udivmoddi4+0xbc>
   13fde:	3e01      	subs	r6, #1
   13fe0:	1924      	adds	r4, r4, r4
   13fe2:	416d      	adcs	r5, r5
   13fe4:	2e00      	cmp	r6, #0
   13fe6:	d1f8      	bne.n	13fda <__udivmoddi4+0xda>
   13fe8:	465b      	mov	r3, fp
   13fea:	9800      	ldr	r0, [sp, #0]
   13fec:	9901      	ldr	r1, [sp, #4]
   13fee:	1900      	adds	r0, r0, r4
   13ff0:	4169      	adcs	r1, r5
   13ff2:	2b00      	cmp	r3, #0
   13ff4:	db22      	blt.n	1403c <__udivmoddi4+0x13c>
   13ff6:	002b      	movs	r3, r5
   13ff8:	465a      	mov	r2, fp
   13ffa:	40d3      	lsrs	r3, r2
   13ffc:	002a      	movs	r2, r5
   13ffe:	4644      	mov	r4, r8
   14000:	40e2      	lsrs	r2, r4
   14002:	001c      	movs	r4, r3
   14004:	465b      	mov	r3, fp
   14006:	0015      	movs	r5, r2
   14008:	2b00      	cmp	r3, #0
   1400a:	db2c      	blt.n	14066 <__udivmoddi4+0x166>
   1400c:	0026      	movs	r6, r4
   1400e:	409e      	lsls	r6, r3
   14010:	0033      	movs	r3, r6
   14012:	0026      	movs	r6, r4
   14014:	4647      	mov	r7, r8
   14016:	40be      	lsls	r6, r7
   14018:	0032      	movs	r2, r6
   1401a:	1a80      	subs	r0, r0, r2
   1401c:	4199      	sbcs	r1, r3
   1401e:	9000      	str	r0, [sp, #0]
   14020:	9101      	str	r1, [sp, #4]
   14022:	e7ae      	b.n	13f82 <__udivmoddi4+0x82>
   14024:	4642      	mov	r2, r8
   14026:	2320      	movs	r3, #32
   14028:	1a9b      	subs	r3, r3, r2
   1402a:	4652      	mov	r2, sl
   1402c:	40da      	lsrs	r2, r3
   1402e:	4641      	mov	r1, r8
   14030:	0013      	movs	r3, r2
   14032:	464a      	mov	r2, r9
   14034:	408a      	lsls	r2, r1
   14036:	0017      	movs	r7, r2
   14038:	431f      	orrs	r7, r3
   1403a:	e782      	b.n	13f42 <__udivmoddi4+0x42>
   1403c:	4642      	mov	r2, r8
   1403e:	2320      	movs	r3, #32
   14040:	1a9b      	subs	r3, r3, r2
   14042:	002a      	movs	r2, r5
   14044:	4646      	mov	r6, r8
   14046:	409a      	lsls	r2, r3
   14048:	0023      	movs	r3, r4
   1404a:	40f3      	lsrs	r3, r6
   1404c:	4313      	orrs	r3, r2
   1404e:	e7d5      	b.n	13ffc <__udivmoddi4+0xfc>
   14050:	4642      	mov	r2, r8
   14052:	2320      	movs	r3, #32
   14054:	2100      	movs	r1, #0
   14056:	1a9b      	subs	r3, r3, r2
   14058:	2200      	movs	r2, #0
   1405a:	9100      	str	r1, [sp, #0]
   1405c:	9201      	str	r2, [sp, #4]
   1405e:	2201      	movs	r2, #1
   14060:	40da      	lsrs	r2, r3
   14062:	9201      	str	r2, [sp, #4]
   14064:	e782      	b.n	13f6c <__udivmoddi4+0x6c>
   14066:	4642      	mov	r2, r8
   14068:	2320      	movs	r3, #32
   1406a:	0026      	movs	r6, r4
   1406c:	1a9b      	subs	r3, r3, r2
   1406e:	40de      	lsrs	r6, r3
   14070:	002f      	movs	r7, r5
   14072:	46b4      	mov	ip, r6
   14074:	4097      	lsls	r7, r2
   14076:	4666      	mov	r6, ip
   14078:	003b      	movs	r3, r7
   1407a:	4333      	orrs	r3, r6
   1407c:	e7c9      	b.n	14012 <__udivmoddi4+0x112>
   1407e:	46c0      	nop			; (mov r8, r8)

00014080 <__aeabi_fadd>:
   14080:	b5f0      	push	{r4, r5, r6, r7, lr}
   14082:	46c6      	mov	lr, r8
   14084:	024e      	lsls	r6, r1, #9
   14086:	0247      	lsls	r7, r0, #9
   14088:	0a76      	lsrs	r6, r6, #9
   1408a:	0a7b      	lsrs	r3, r7, #9
   1408c:	0044      	lsls	r4, r0, #1
   1408e:	0fc5      	lsrs	r5, r0, #31
   14090:	00f7      	lsls	r7, r6, #3
   14092:	0048      	lsls	r0, r1, #1
   14094:	4698      	mov	r8, r3
   14096:	b500      	push	{lr}
   14098:	0e24      	lsrs	r4, r4, #24
   1409a:	002a      	movs	r2, r5
   1409c:	00db      	lsls	r3, r3, #3
   1409e:	0e00      	lsrs	r0, r0, #24
   140a0:	0fc9      	lsrs	r1, r1, #31
   140a2:	46bc      	mov	ip, r7
   140a4:	428d      	cmp	r5, r1
   140a6:	d067      	beq.n	14178 <__aeabi_fadd+0xf8>
   140a8:	1a22      	subs	r2, r4, r0
   140aa:	2a00      	cmp	r2, #0
   140ac:	dc00      	bgt.n	140b0 <__aeabi_fadd+0x30>
   140ae:	e0a5      	b.n	141fc <__aeabi_fadd+0x17c>
   140b0:	2800      	cmp	r0, #0
   140b2:	d13a      	bne.n	1412a <__aeabi_fadd+0xaa>
   140b4:	2f00      	cmp	r7, #0
   140b6:	d100      	bne.n	140ba <__aeabi_fadd+0x3a>
   140b8:	e093      	b.n	141e2 <__aeabi_fadd+0x162>
   140ba:	1e51      	subs	r1, r2, #1
   140bc:	2900      	cmp	r1, #0
   140be:	d000      	beq.n	140c2 <__aeabi_fadd+0x42>
   140c0:	e0bc      	b.n	1423c <__aeabi_fadd+0x1bc>
   140c2:	2401      	movs	r4, #1
   140c4:	1bdb      	subs	r3, r3, r7
   140c6:	015a      	lsls	r2, r3, #5
   140c8:	d546      	bpl.n	14158 <__aeabi_fadd+0xd8>
   140ca:	019b      	lsls	r3, r3, #6
   140cc:	099e      	lsrs	r6, r3, #6
   140ce:	0030      	movs	r0, r6
   140d0:	f002 fd2e 	bl	16b30 <__clzsi2>
   140d4:	3805      	subs	r0, #5
   140d6:	4086      	lsls	r6, r0
   140d8:	4284      	cmp	r4, r0
   140da:	dd00      	ble.n	140de <__aeabi_fadd+0x5e>
   140dc:	e09d      	b.n	1421a <__aeabi_fadd+0x19a>
   140de:	1b04      	subs	r4, r0, r4
   140e0:	0032      	movs	r2, r6
   140e2:	2020      	movs	r0, #32
   140e4:	3401      	adds	r4, #1
   140e6:	40e2      	lsrs	r2, r4
   140e8:	1b04      	subs	r4, r0, r4
   140ea:	40a6      	lsls	r6, r4
   140ec:	0033      	movs	r3, r6
   140ee:	1e5e      	subs	r6, r3, #1
   140f0:	41b3      	sbcs	r3, r6
   140f2:	2400      	movs	r4, #0
   140f4:	4313      	orrs	r3, r2
   140f6:	075a      	lsls	r2, r3, #29
   140f8:	d004      	beq.n	14104 <__aeabi_fadd+0x84>
   140fa:	220f      	movs	r2, #15
   140fc:	401a      	ands	r2, r3
   140fe:	2a04      	cmp	r2, #4
   14100:	d000      	beq.n	14104 <__aeabi_fadd+0x84>
   14102:	3304      	adds	r3, #4
   14104:	015a      	lsls	r2, r3, #5
   14106:	d529      	bpl.n	1415c <__aeabi_fadd+0xdc>
   14108:	3401      	adds	r4, #1
   1410a:	2cff      	cmp	r4, #255	; 0xff
   1410c:	d100      	bne.n	14110 <__aeabi_fadd+0x90>
   1410e:	e081      	b.n	14214 <__aeabi_fadd+0x194>
   14110:	002a      	movs	r2, r5
   14112:	019b      	lsls	r3, r3, #6
   14114:	0a5b      	lsrs	r3, r3, #9
   14116:	b2e4      	uxtb	r4, r4
   14118:	025b      	lsls	r3, r3, #9
   1411a:	05e4      	lsls	r4, r4, #23
   1411c:	0a58      	lsrs	r0, r3, #9
   1411e:	07d2      	lsls	r2, r2, #31
   14120:	4320      	orrs	r0, r4
   14122:	4310      	orrs	r0, r2
   14124:	bc04      	pop	{r2}
   14126:	4690      	mov	r8, r2
   14128:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1412a:	2cff      	cmp	r4, #255	; 0xff
   1412c:	d0e3      	beq.n	140f6 <__aeabi_fadd+0x76>
   1412e:	2180      	movs	r1, #128	; 0x80
   14130:	0038      	movs	r0, r7
   14132:	04c9      	lsls	r1, r1, #19
   14134:	4308      	orrs	r0, r1
   14136:	4684      	mov	ip, r0
   14138:	2a1b      	cmp	r2, #27
   1413a:	dd00      	ble.n	1413e <__aeabi_fadd+0xbe>
   1413c:	e082      	b.n	14244 <__aeabi_fadd+0x1c4>
   1413e:	2020      	movs	r0, #32
   14140:	4661      	mov	r1, ip
   14142:	40d1      	lsrs	r1, r2
   14144:	1a82      	subs	r2, r0, r2
   14146:	4660      	mov	r0, ip
   14148:	4090      	lsls	r0, r2
   1414a:	0002      	movs	r2, r0
   1414c:	1e50      	subs	r0, r2, #1
   1414e:	4182      	sbcs	r2, r0
   14150:	430a      	orrs	r2, r1
   14152:	1a9b      	subs	r3, r3, r2
   14154:	015a      	lsls	r2, r3, #5
   14156:	d4b8      	bmi.n	140ca <__aeabi_fadd+0x4a>
   14158:	075a      	lsls	r2, r3, #29
   1415a:	d1ce      	bne.n	140fa <__aeabi_fadd+0x7a>
   1415c:	08de      	lsrs	r6, r3, #3
   1415e:	002a      	movs	r2, r5
   14160:	2cff      	cmp	r4, #255	; 0xff
   14162:	d13a      	bne.n	141da <__aeabi_fadd+0x15a>
   14164:	2e00      	cmp	r6, #0
   14166:	d100      	bne.n	1416a <__aeabi_fadd+0xea>
   14168:	e0ae      	b.n	142c8 <__aeabi_fadd+0x248>
   1416a:	2380      	movs	r3, #128	; 0x80
   1416c:	03db      	lsls	r3, r3, #15
   1416e:	4333      	orrs	r3, r6
   14170:	025b      	lsls	r3, r3, #9
   14172:	0a5b      	lsrs	r3, r3, #9
   14174:	24ff      	movs	r4, #255	; 0xff
   14176:	e7cf      	b.n	14118 <__aeabi_fadd+0x98>
   14178:	1a21      	subs	r1, r4, r0
   1417a:	2900      	cmp	r1, #0
   1417c:	dd52      	ble.n	14224 <__aeabi_fadd+0x1a4>
   1417e:	2800      	cmp	r0, #0
   14180:	d031      	beq.n	141e6 <__aeabi_fadd+0x166>
   14182:	2cff      	cmp	r4, #255	; 0xff
   14184:	d0b7      	beq.n	140f6 <__aeabi_fadd+0x76>
   14186:	2080      	movs	r0, #128	; 0x80
   14188:	003e      	movs	r6, r7
   1418a:	04c0      	lsls	r0, r0, #19
   1418c:	4306      	orrs	r6, r0
   1418e:	46b4      	mov	ip, r6
   14190:	291b      	cmp	r1, #27
   14192:	dd00      	ble.n	14196 <__aeabi_fadd+0x116>
   14194:	e0aa      	b.n	142ec <__aeabi_fadd+0x26c>
   14196:	2620      	movs	r6, #32
   14198:	4660      	mov	r0, ip
   1419a:	40c8      	lsrs	r0, r1
   1419c:	1a71      	subs	r1, r6, r1
   1419e:	4666      	mov	r6, ip
   141a0:	408e      	lsls	r6, r1
   141a2:	0031      	movs	r1, r6
   141a4:	1e4e      	subs	r6, r1, #1
   141a6:	41b1      	sbcs	r1, r6
   141a8:	4301      	orrs	r1, r0
   141aa:	185b      	adds	r3, r3, r1
   141ac:	0159      	lsls	r1, r3, #5
   141ae:	d5d3      	bpl.n	14158 <__aeabi_fadd+0xd8>
   141b0:	3401      	adds	r4, #1
   141b2:	2cff      	cmp	r4, #255	; 0xff
   141b4:	d100      	bne.n	141b8 <__aeabi_fadd+0x138>
   141b6:	e087      	b.n	142c8 <__aeabi_fadd+0x248>
   141b8:	2201      	movs	r2, #1
   141ba:	4978      	ldr	r1, [pc, #480]	; (1439c <__aeabi_fadd+0x31c>)
   141bc:	401a      	ands	r2, r3
   141be:	085b      	lsrs	r3, r3, #1
   141c0:	400b      	ands	r3, r1
   141c2:	4313      	orrs	r3, r2
   141c4:	e797      	b.n	140f6 <__aeabi_fadd+0x76>
   141c6:	2c00      	cmp	r4, #0
   141c8:	d000      	beq.n	141cc <__aeabi_fadd+0x14c>
   141ca:	e0a7      	b.n	1431c <__aeabi_fadd+0x29c>
   141cc:	2b00      	cmp	r3, #0
   141ce:	d000      	beq.n	141d2 <__aeabi_fadd+0x152>
   141d0:	e0b6      	b.n	14340 <__aeabi_fadd+0x2c0>
   141d2:	1e3b      	subs	r3, r7, #0
   141d4:	d162      	bne.n	1429c <__aeabi_fadd+0x21c>
   141d6:	2600      	movs	r6, #0
   141d8:	2200      	movs	r2, #0
   141da:	0273      	lsls	r3, r6, #9
   141dc:	0a5b      	lsrs	r3, r3, #9
   141de:	b2e4      	uxtb	r4, r4
   141e0:	e79a      	b.n	14118 <__aeabi_fadd+0x98>
   141e2:	0014      	movs	r4, r2
   141e4:	e787      	b.n	140f6 <__aeabi_fadd+0x76>
   141e6:	2f00      	cmp	r7, #0
   141e8:	d04d      	beq.n	14286 <__aeabi_fadd+0x206>
   141ea:	1e48      	subs	r0, r1, #1
   141ec:	2800      	cmp	r0, #0
   141ee:	d157      	bne.n	142a0 <__aeabi_fadd+0x220>
   141f0:	4463      	add	r3, ip
   141f2:	2401      	movs	r4, #1
   141f4:	015a      	lsls	r2, r3, #5
   141f6:	d5af      	bpl.n	14158 <__aeabi_fadd+0xd8>
   141f8:	2402      	movs	r4, #2
   141fa:	e7dd      	b.n	141b8 <__aeabi_fadd+0x138>
   141fc:	2a00      	cmp	r2, #0
   141fe:	d124      	bne.n	1424a <__aeabi_fadd+0x1ca>
   14200:	1c62      	adds	r2, r4, #1
   14202:	b2d2      	uxtb	r2, r2
   14204:	2a01      	cmp	r2, #1
   14206:	ddde      	ble.n	141c6 <__aeabi_fadd+0x146>
   14208:	1bde      	subs	r6, r3, r7
   1420a:	0172      	lsls	r2, r6, #5
   1420c:	d535      	bpl.n	1427a <__aeabi_fadd+0x1fa>
   1420e:	1afe      	subs	r6, r7, r3
   14210:	000d      	movs	r5, r1
   14212:	e75c      	b.n	140ce <__aeabi_fadd+0x4e>
   14214:	002a      	movs	r2, r5
   14216:	2300      	movs	r3, #0
   14218:	e77e      	b.n	14118 <__aeabi_fadd+0x98>
   1421a:	0033      	movs	r3, r6
   1421c:	4a60      	ldr	r2, [pc, #384]	; (143a0 <__aeabi_fadd+0x320>)
   1421e:	1a24      	subs	r4, r4, r0
   14220:	4013      	ands	r3, r2
   14222:	e768      	b.n	140f6 <__aeabi_fadd+0x76>
   14224:	2900      	cmp	r1, #0
   14226:	d163      	bne.n	142f0 <__aeabi_fadd+0x270>
   14228:	1c61      	adds	r1, r4, #1
   1422a:	b2c8      	uxtb	r0, r1
   1422c:	2801      	cmp	r0, #1
   1422e:	dd4e      	ble.n	142ce <__aeabi_fadd+0x24e>
   14230:	29ff      	cmp	r1, #255	; 0xff
   14232:	d049      	beq.n	142c8 <__aeabi_fadd+0x248>
   14234:	4463      	add	r3, ip
   14236:	085b      	lsrs	r3, r3, #1
   14238:	000c      	movs	r4, r1
   1423a:	e75c      	b.n	140f6 <__aeabi_fadd+0x76>
   1423c:	2aff      	cmp	r2, #255	; 0xff
   1423e:	d041      	beq.n	142c4 <__aeabi_fadd+0x244>
   14240:	000a      	movs	r2, r1
   14242:	e779      	b.n	14138 <__aeabi_fadd+0xb8>
   14244:	2201      	movs	r2, #1
   14246:	1a9b      	subs	r3, r3, r2
   14248:	e784      	b.n	14154 <__aeabi_fadd+0xd4>
   1424a:	2c00      	cmp	r4, #0
   1424c:	d01d      	beq.n	1428a <__aeabi_fadd+0x20a>
   1424e:	28ff      	cmp	r0, #255	; 0xff
   14250:	d022      	beq.n	14298 <__aeabi_fadd+0x218>
   14252:	2480      	movs	r4, #128	; 0x80
   14254:	04e4      	lsls	r4, r4, #19
   14256:	4252      	negs	r2, r2
   14258:	4323      	orrs	r3, r4
   1425a:	2a1b      	cmp	r2, #27
   1425c:	dd00      	ble.n	14260 <__aeabi_fadd+0x1e0>
   1425e:	e08a      	b.n	14376 <__aeabi_fadd+0x2f6>
   14260:	001c      	movs	r4, r3
   14262:	2520      	movs	r5, #32
   14264:	40d4      	lsrs	r4, r2
   14266:	1aaa      	subs	r2, r5, r2
   14268:	4093      	lsls	r3, r2
   1426a:	1e5a      	subs	r2, r3, #1
   1426c:	4193      	sbcs	r3, r2
   1426e:	4323      	orrs	r3, r4
   14270:	4662      	mov	r2, ip
   14272:	0004      	movs	r4, r0
   14274:	1ad3      	subs	r3, r2, r3
   14276:	000d      	movs	r5, r1
   14278:	e725      	b.n	140c6 <__aeabi_fadd+0x46>
   1427a:	2e00      	cmp	r6, #0
   1427c:	d000      	beq.n	14280 <__aeabi_fadd+0x200>
   1427e:	e726      	b.n	140ce <__aeabi_fadd+0x4e>
   14280:	2200      	movs	r2, #0
   14282:	2400      	movs	r4, #0
   14284:	e7a9      	b.n	141da <__aeabi_fadd+0x15a>
   14286:	000c      	movs	r4, r1
   14288:	e735      	b.n	140f6 <__aeabi_fadd+0x76>
   1428a:	2b00      	cmp	r3, #0
   1428c:	d04d      	beq.n	1432a <__aeabi_fadd+0x2aa>
   1428e:	43d2      	mvns	r2, r2
   14290:	2a00      	cmp	r2, #0
   14292:	d0ed      	beq.n	14270 <__aeabi_fadd+0x1f0>
   14294:	28ff      	cmp	r0, #255	; 0xff
   14296:	d1e0      	bne.n	1425a <__aeabi_fadd+0x1da>
   14298:	4663      	mov	r3, ip
   1429a:	24ff      	movs	r4, #255	; 0xff
   1429c:	000d      	movs	r5, r1
   1429e:	e72a      	b.n	140f6 <__aeabi_fadd+0x76>
   142a0:	29ff      	cmp	r1, #255	; 0xff
   142a2:	d00f      	beq.n	142c4 <__aeabi_fadd+0x244>
   142a4:	0001      	movs	r1, r0
   142a6:	e773      	b.n	14190 <__aeabi_fadd+0x110>
   142a8:	2b00      	cmp	r3, #0
   142aa:	d061      	beq.n	14370 <__aeabi_fadd+0x2f0>
   142ac:	24ff      	movs	r4, #255	; 0xff
   142ae:	2f00      	cmp	r7, #0
   142b0:	d100      	bne.n	142b4 <__aeabi_fadd+0x234>
   142b2:	e720      	b.n	140f6 <__aeabi_fadd+0x76>
   142b4:	2280      	movs	r2, #128	; 0x80
   142b6:	4641      	mov	r1, r8
   142b8:	03d2      	lsls	r2, r2, #15
   142ba:	4211      	tst	r1, r2
   142bc:	d002      	beq.n	142c4 <__aeabi_fadd+0x244>
   142be:	4216      	tst	r6, r2
   142c0:	d100      	bne.n	142c4 <__aeabi_fadd+0x244>
   142c2:	003b      	movs	r3, r7
   142c4:	24ff      	movs	r4, #255	; 0xff
   142c6:	e716      	b.n	140f6 <__aeabi_fadd+0x76>
   142c8:	24ff      	movs	r4, #255	; 0xff
   142ca:	2300      	movs	r3, #0
   142cc:	e724      	b.n	14118 <__aeabi_fadd+0x98>
   142ce:	2c00      	cmp	r4, #0
   142d0:	d1ea      	bne.n	142a8 <__aeabi_fadd+0x228>
   142d2:	2b00      	cmp	r3, #0
   142d4:	d058      	beq.n	14388 <__aeabi_fadd+0x308>
   142d6:	2f00      	cmp	r7, #0
   142d8:	d100      	bne.n	142dc <__aeabi_fadd+0x25c>
   142da:	e70c      	b.n	140f6 <__aeabi_fadd+0x76>
   142dc:	4463      	add	r3, ip
   142de:	015a      	lsls	r2, r3, #5
   142e0:	d400      	bmi.n	142e4 <__aeabi_fadd+0x264>
   142e2:	e739      	b.n	14158 <__aeabi_fadd+0xd8>
   142e4:	4a2e      	ldr	r2, [pc, #184]	; (143a0 <__aeabi_fadd+0x320>)
   142e6:	000c      	movs	r4, r1
   142e8:	4013      	ands	r3, r2
   142ea:	e704      	b.n	140f6 <__aeabi_fadd+0x76>
   142ec:	2101      	movs	r1, #1
   142ee:	e75c      	b.n	141aa <__aeabi_fadd+0x12a>
   142f0:	2c00      	cmp	r4, #0
   142f2:	d11e      	bne.n	14332 <__aeabi_fadd+0x2b2>
   142f4:	2b00      	cmp	r3, #0
   142f6:	d040      	beq.n	1437a <__aeabi_fadd+0x2fa>
   142f8:	43c9      	mvns	r1, r1
   142fa:	2900      	cmp	r1, #0
   142fc:	d00b      	beq.n	14316 <__aeabi_fadd+0x296>
   142fe:	28ff      	cmp	r0, #255	; 0xff
   14300:	d036      	beq.n	14370 <__aeabi_fadd+0x2f0>
   14302:	291b      	cmp	r1, #27
   14304:	dc47      	bgt.n	14396 <__aeabi_fadd+0x316>
   14306:	001c      	movs	r4, r3
   14308:	2620      	movs	r6, #32
   1430a:	40cc      	lsrs	r4, r1
   1430c:	1a71      	subs	r1, r6, r1
   1430e:	408b      	lsls	r3, r1
   14310:	1e59      	subs	r1, r3, #1
   14312:	418b      	sbcs	r3, r1
   14314:	4323      	orrs	r3, r4
   14316:	4463      	add	r3, ip
   14318:	0004      	movs	r4, r0
   1431a:	e747      	b.n	141ac <__aeabi_fadd+0x12c>
   1431c:	2b00      	cmp	r3, #0
   1431e:	d118      	bne.n	14352 <__aeabi_fadd+0x2d2>
   14320:	1e3b      	subs	r3, r7, #0
   14322:	d02d      	beq.n	14380 <__aeabi_fadd+0x300>
   14324:	000d      	movs	r5, r1
   14326:	24ff      	movs	r4, #255	; 0xff
   14328:	e6e5      	b.n	140f6 <__aeabi_fadd+0x76>
   1432a:	003b      	movs	r3, r7
   1432c:	0004      	movs	r4, r0
   1432e:	000d      	movs	r5, r1
   14330:	e6e1      	b.n	140f6 <__aeabi_fadd+0x76>
   14332:	28ff      	cmp	r0, #255	; 0xff
   14334:	d01c      	beq.n	14370 <__aeabi_fadd+0x2f0>
   14336:	2480      	movs	r4, #128	; 0x80
   14338:	04e4      	lsls	r4, r4, #19
   1433a:	4249      	negs	r1, r1
   1433c:	4323      	orrs	r3, r4
   1433e:	e7e0      	b.n	14302 <__aeabi_fadd+0x282>
   14340:	2f00      	cmp	r7, #0
   14342:	d100      	bne.n	14346 <__aeabi_fadd+0x2c6>
   14344:	e6d7      	b.n	140f6 <__aeabi_fadd+0x76>
   14346:	1bde      	subs	r6, r3, r7
   14348:	0172      	lsls	r2, r6, #5
   1434a:	d51f      	bpl.n	1438c <__aeabi_fadd+0x30c>
   1434c:	1afb      	subs	r3, r7, r3
   1434e:	000d      	movs	r5, r1
   14350:	e6d1      	b.n	140f6 <__aeabi_fadd+0x76>
   14352:	24ff      	movs	r4, #255	; 0xff
   14354:	2f00      	cmp	r7, #0
   14356:	d100      	bne.n	1435a <__aeabi_fadd+0x2da>
   14358:	e6cd      	b.n	140f6 <__aeabi_fadd+0x76>
   1435a:	2280      	movs	r2, #128	; 0x80
   1435c:	4640      	mov	r0, r8
   1435e:	03d2      	lsls	r2, r2, #15
   14360:	4210      	tst	r0, r2
   14362:	d0af      	beq.n	142c4 <__aeabi_fadd+0x244>
   14364:	4216      	tst	r6, r2
   14366:	d1ad      	bne.n	142c4 <__aeabi_fadd+0x244>
   14368:	003b      	movs	r3, r7
   1436a:	000d      	movs	r5, r1
   1436c:	24ff      	movs	r4, #255	; 0xff
   1436e:	e6c2      	b.n	140f6 <__aeabi_fadd+0x76>
   14370:	4663      	mov	r3, ip
   14372:	24ff      	movs	r4, #255	; 0xff
   14374:	e6bf      	b.n	140f6 <__aeabi_fadd+0x76>
   14376:	2301      	movs	r3, #1
   14378:	e77a      	b.n	14270 <__aeabi_fadd+0x1f0>
   1437a:	003b      	movs	r3, r7
   1437c:	0004      	movs	r4, r0
   1437e:	e6ba      	b.n	140f6 <__aeabi_fadd+0x76>
   14380:	2680      	movs	r6, #128	; 0x80
   14382:	2200      	movs	r2, #0
   14384:	03f6      	lsls	r6, r6, #15
   14386:	e6f0      	b.n	1416a <__aeabi_fadd+0xea>
   14388:	003b      	movs	r3, r7
   1438a:	e6b4      	b.n	140f6 <__aeabi_fadd+0x76>
   1438c:	1e33      	subs	r3, r6, #0
   1438e:	d000      	beq.n	14392 <__aeabi_fadd+0x312>
   14390:	e6e2      	b.n	14158 <__aeabi_fadd+0xd8>
   14392:	2200      	movs	r2, #0
   14394:	e721      	b.n	141da <__aeabi_fadd+0x15a>
   14396:	2301      	movs	r3, #1
   14398:	e7bd      	b.n	14316 <__aeabi_fadd+0x296>
   1439a:	46c0      	nop			; (mov r8, r8)
   1439c:	7dffffff 	.word	0x7dffffff
   143a0:	fbffffff 	.word	0xfbffffff

000143a4 <__aeabi_fdiv>:
   143a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   143a6:	4657      	mov	r7, sl
   143a8:	464e      	mov	r6, r9
   143aa:	46de      	mov	lr, fp
   143ac:	4645      	mov	r5, r8
   143ae:	b5e0      	push	{r5, r6, r7, lr}
   143b0:	0244      	lsls	r4, r0, #9
   143b2:	0043      	lsls	r3, r0, #1
   143b4:	0fc6      	lsrs	r6, r0, #31
   143b6:	b083      	sub	sp, #12
   143b8:	1c0f      	adds	r7, r1, #0
   143ba:	0a64      	lsrs	r4, r4, #9
   143bc:	0e1b      	lsrs	r3, r3, #24
   143be:	46b2      	mov	sl, r6
   143c0:	d053      	beq.n	1446a <__aeabi_fdiv+0xc6>
   143c2:	2bff      	cmp	r3, #255	; 0xff
   143c4:	d027      	beq.n	14416 <__aeabi_fdiv+0x72>
   143c6:	2280      	movs	r2, #128	; 0x80
   143c8:	00e4      	lsls	r4, r4, #3
   143ca:	04d2      	lsls	r2, r2, #19
   143cc:	4314      	orrs	r4, r2
   143ce:	227f      	movs	r2, #127	; 0x7f
   143d0:	4252      	negs	r2, r2
   143d2:	4690      	mov	r8, r2
   143d4:	4498      	add	r8, r3
   143d6:	2300      	movs	r3, #0
   143d8:	4699      	mov	r9, r3
   143da:	469b      	mov	fp, r3
   143dc:	027d      	lsls	r5, r7, #9
   143de:	0078      	lsls	r0, r7, #1
   143e0:	0ffb      	lsrs	r3, r7, #31
   143e2:	0a6d      	lsrs	r5, r5, #9
   143e4:	0e00      	lsrs	r0, r0, #24
   143e6:	9300      	str	r3, [sp, #0]
   143e8:	d024      	beq.n	14434 <__aeabi_fdiv+0x90>
   143ea:	28ff      	cmp	r0, #255	; 0xff
   143ec:	d046      	beq.n	1447c <__aeabi_fdiv+0xd8>
   143ee:	2380      	movs	r3, #128	; 0x80
   143f0:	2100      	movs	r1, #0
   143f2:	00ed      	lsls	r5, r5, #3
   143f4:	04db      	lsls	r3, r3, #19
   143f6:	431d      	orrs	r5, r3
   143f8:	387f      	subs	r0, #127	; 0x7f
   143fa:	4647      	mov	r7, r8
   143fc:	1a38      	subs	r0, r7, r0
   143fe:	464f      	mov	r7, r9
   14400:	430f      	orrs	r7, r1
   14402:	00bf      	lsls	r7, r7, #2
   14404:	46b9      	mov	r9, r7
   14406:	0033      	movs	r3, r6
   14408:	9a00      	ldr	r2, [sp, #0]
   1440a:	4f87      	ldr	r7, [pc, #540]	; (14628 <__aeabi_fdiv+0x284>)
   1440c:	4053      	eors	r3, r2
   1440e:	464a      	mov	r2, r9
   14410:	58ba      	ldr	r2, [r7, r2]
   14412:	9301      	str	r3, [sp, #4]
   14414:	4697      	mov	pc, r2
   14416:	2c00      	cmp	r4, #0
   14418:	d14e      	bne.n	144b8 <__aeabi_fdiv+0x114>
   1441a:	2308      	movs	r3, #8
   1441c:	4699      	mov	r9, r3
   1441e:	33f7      	adds	r3, #247	; 0xf7
   14420:	4698      	mov	r8, r3
   14422:	3bfd      	subs	r3, #253	; 0xfd
   14424:	469b      	mov	fp, r3
   14426:	027d      	lsls	r5, r7, #9
   14428:	0078      	lsls	r0, r7, #1
   1442a:	0ffb      	lsrs	r3, r7, #31
   1442c:	0a6d      	lsrs	r5, r5, #9
   1442e:	0e00      	lsrs	r0, r0, #24
   14430:	9300      	str	r3, [sp, #0]
   14432:	d1da      	bne.n	143ea <__aeabi_fdiv+0x46>
   14434:	2d00      	cmp	r5, #0
   14436:	d126      	bne.n	14486 <__aeabi_fdiv+0xe2>
   14438:	2000      	movs	r0, #0
   1443a:	2101      	movs	r1, #1
   1443c:	0033      	movs	r3, r6
   1443e:	9a00      	ldr	r2, [sp, #0]
   14440:	4f7a      	ldr	r7, [pc, #488]	; (1462c <__aeabi_fdiv+0x288>)
   14442:	4053      	eors	r3, r2
   14444:	4642      	mov	r2, r8
   14446:	1a10      	subs	r0, r2, r0
   14448:	464a      	mov	r2, r9
   1444a:	430a      	orrs	r2, r1
   1444c:	0092      	lsls	r2, r2, #2
   1444e:	58ba      	ldr	r2, [r7, r2]
   14450:	001d      	movs	r5, r3
   14452:	4697      	mov	pc, r2
   14454:	9b00      	ldr	r3, [sp, #0]
   14456:	002c      	movs	r4, r5
   14458:	469a      	mov	sl, r3
   1445a:	468b      	mov	fp, r1
   1445c:	465b      	mov	r3, fp
   1445e:	2b02      	cmp	r3, #2
   14460:	d131      	bne.n	144c6 <__aeabi_fdiv+0x122>
   14462:	4653      	mov	r3, sl
   14464:	21ff      	movs	r1, #255	; 0xff
   14466:	2400      	movs	r4, #0
   14468:	e038      	b.n	144dc <__aeabi_fdiv+0x138>
   1446a:	2c00      	cmp	r4, #0
   1446c:	d117      	bne.n	1449e <__aeabi_fdiv+0xfa>
   1446e:	2304      	movs	r3, #4
   14470:	4699      	mov	r9, r3
   14472:	2300      	movs	r3, #0
   14474:	4698      	mov	r8, r3
   14476:	3301      	adds	r3, #1
   14478:	469b      	mov	fp, r3
   1447a:	e7af      	b.n	143dc <__aeabi_fdiv+0x38>
   1447c:	20ff      	movs	r0, #255	; 0xff
   1447e:	2d00      	cmp	r5, #0
   14480:	d10b      	bne.n	1449a <__aeabi_fdiv+0xf6>
   14482:	2102      	movs	r1, #2
   14484:	e7da      	b.n	1443c <__aeabi_fdiv+0x98>
   14486:	0028      	movs	r0, r5
   14488:	f002 fb52 	bl	16b30 <__clzsi2>
   1448c:	1f43      	subs	r3, r0, #5
   1448e:	409d      	lsls	r5, r3
   14490:	2376      	movs	r3, #118	; 0x76
   14492:	425b      	negs	r3, r3
   14494:	1a18      	subs	r0, r3, r0
   14496:	2100      	movs	r1, #0
   14498:	e7af      	b.n	143fa <__aeabi_fdiv+0x56>
   1449a:	2103      	movs	r1, #3
   1449c:	e7ad      	b.n	143fa <__aeabi_fdiv+0x56>
   1449e:	0020      	movs	r0, r4
   144a0:	f002 fb46 	bl	16b30 <__clzsi2>
   144a4:	1f43      	subs	r3, r0, #5
   144a6:	409c      	lsls	r4, r3
   144a8:	2376      	movs	r3, #118	; 0x76
   144aa:	425b      	negs	r3, r3
   144ac:	1a1b      	subs	r3, r3, r0
   144ae:	4698      	mov	r8, r3
   144b0:	2300      	movs	r3, #0
   144b2:	4699      	mov	r9, r3
   144b4:	469b      	mov	fp, r3
   144b6:	e791      	b.n	143dc <__aeabi_fdiv+0x38>
   144b8:	230c      	movs	r3, #12
   144ba:	4699      	mov	r9, r3
   144bc:	33f3      	adds	r3, #243	; 0xf3
   144be:	4698      	mov	r8, r3
   144c0:	3bfc      	subs	r3, #252	; 0xfc
   144c2:	469b      	mov	fp, r3
   144c4:	e78a      	b.n	143dc <__aeabi_fdiv+0x38>
   144c6:	2b03      	cmp	r3, #3
   144c8:	d100      	bne.n	144cc <__aeabi_fdiv+0x128>
   144ca:	e0a5      	b.n	14618 <__aeabi_fdiv+0x274>
   144cc:	4655      	mov	r5, sl
   144ce:	2b01      	cmp	r3, #1
   144d0:	d000      	beq.n	144d4 <__aeabi_fdiv+0x130>
   144d2:	e081      	b.n	145d8 <__aeabi_fdiv+0x234>
   144d4:	2301      	movs	r3, #1
   144d6:	2100      	movs	r1, #0
   144d8:	2400      	movs	r4, #0
   144da:	402b      	ands	r3, r5
   144dc:	0264      	lsls	r4, r4, #9
   144de:	05c9      	lsls	r1, r1, #23
   144e0:	0a60      	lsrs	r0, r4, #9
   144e2:	07db      	lsls	r3, r3, #31
   144e4:	4308      	orrs	r0, r1
   144e6:	4318      	orrs	r0, r3
   144e8:	b003      	add	sp, #12
   144ea:	bc3c      	pop	{r2, r3, r4, r5}
   144ec:	4690      	mov	r8, r2
   144ee:	4699      	mov	r9, r3
   144f0:	46a2      	mov	sl, r4
   144f2:	46ab      	mov	fp, r5
   144f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   144f6:	2480      	movs	r4, #128	; 0x80
   144f8:	2300      	movs	r3, #0
   144fa:	03e4      	lsls	r4, r4, #15
   144fc:	21ff      	movs	r1, #255	; 0xff
   144fe:	e7ed      	b.n	144dc <__aeabi_fdiv+0x138>
   14500:	21ff      	movs	r1, #255	; 0xff
   14502:	2400      	movs	r4, #0
   14504:	e7ea      	b.n	144dc <__aeabi_fdiv+0x138>
   14506:	2301      	movs	r3, #1
   14508:	1a59      	subs	r1, r3, r1
   1450a:	291b      	cmp	r1, #27
   1450c:	dd66      	ble.n	145dc <__aeabi_fdiv+0x238>
   1450e:	9a01      	ldr	r2, [sp, #4]
   14510:	4013      	ands	r3, r2
   14512:	2100      	movs	r1, #0
   14514:	2400      	movs	r4, #0
   14516:	e7e1      	b.n	144dc <__aeabi_fdiv+0x138>
   14518:	2380      	movs	r3, #128	; 0x80
   1451a:	03db      	lsls	r3, r3, #15
   1451c:	421c      	tst	r4, r3
   1451e:	d038      	beq.n	14592 <__aeabi_fdiv+0x1ee>
   14520:	421d      	tst	r5, r3
   14522:	d051      	beq.n	145c8 <__aeabi_fdiv+0x224>
   14524:	431c      	orrs	r4, r3
   14526:	0264      	lsls	r4, r4, #9
   14528:	0a64      	lsrs	r4, r4, #9
   1452a:	0033      	movs	r3, r6
   1452c:	21ff      	movs	r1, #255	; 0xff
   1452e:	e7d5      	b.n	144dc <__aeabi_fdiv+0x138>
   14530:	0163      	lsls	r3, r4, #5
   14532:	016c      	lsls	r4, r5, #5
   14534:	42a3      	cmp	r3, r4
   14536:	d23b      	bcs.n	145b0 <__aeabi_fdiv+0x20c>
   14538:	261b      	movs	r6, #27
   1453a:	2100      	movs	r1, #0
   1453c:	3801      	subs	r0, #1
   1453e:	2501      	movs	r5, #1
   14540:	001f      	movs	r7, r3
   14542:	0049      	lsls	r1, r1, #1
   14544:	005b      	lsls	r3, r3, #1
   14546:	2f00      	cmp	r7, #0
   14548:	db01      	blt.n	1454e <__aeabi_fdiv+0x1aa>
   1454a:	429c      	cmp	r4, r3
   1454c:	d801      	bhi.n	14552 <__aeabi_fdiv+0x1ae>
   1454e:	1b1b      	subs	r3, r3, r4
   14550:	4329      	orrs	r1, r5
   14552:	3e01      	subs	r6, #1
   14554:	2e00      	cmp	r6, #0
   14556:	d1f3      	bne.n	14540 <__aeabi_fdiv+0x19c>
   14558:	001c      	movs	r4, r3
   1455a:	1e63      	subs	r3, r4, #1
   1455c:	419c      	sbcs	r4, r3
   1455e:	430c      	orrs	r4, r1
   14560:	0001      	movs	r1, r0
   14562:	317f      	adds	r1, #127	; 0x7f
   14564:	2900      	cmp	r1, #0
   14566:	ddce      	ble.n	14506 <__aeabi_fdiv+0x162>
   14568:	0763      	lsls	r3, r4, #29
   1456a:	d004      	beq.n	14576 <__aeabi_fdiv+0x1d2>
   1456c:	230f      	movs	r3, #15
   1456e:	4023      	ands	r3, r4
   14570:	2b04      	cmp	r3, #4
   14572:	d000      	beq.n	14576 <__aeabi_fdiv+0x1d2>
   14574:	3404      	adds	r4, #4
   14576:	0123      	lsls	r3, r4, #4
   14578:	d503      	bpl.n	14582 <__aeabi_fdiv+0x1de>
   1457a:	0001      	movs	r1, r0
   1457c:	4b2c      	ldr	r3, [pc, #176]	; (14630 <__aeabi_fdiv+0x28c>)
   1457e:	3180      	adds	r1, #128	; 0x80
   14580:	401c      	ands	r4, r3
   14582:	29fe      	cmp	r1, #254	; 0xfe
   14584:	dd0d      	ble.n	145a2 <__aeabi_fdiv+0x1fe>
   14586:	2301      	movs	r3, #1
   14588:	9a01      	ldr	r2, [sp, #4]
   1458a:	21ff      	movs	r1, #255	; 0xff
   1458c:	4013      	ands	r3, r2
   1458e:	2400      	movs	r4, #0
   14590:	e7a4      	b.n	144dc <__aeabi_fdiv+0x138>
   14592:	2380      	movs	r3, #128	; 0x80
   14594:	03db      	lsls	r3, r3, #15
   14596:	431c      	orrs	r4, r3
   14598:	0264      	lsls	r4, r4, #9
   1459a:	0a64      	lsrs	r4, r4, #9
   1459c:	0033      	movs	r3, r6
   1459e:	21ff      	movs	r1, #255	; 0xff
   145a0:	e79c      	b.n	144dc <__aeabi_fdiv+0x138>
   145a2:	2301      	movs	r3, #1
   145a4:	9a01      	ldr	r2, [sp, #4]
   145a6:	01a4      	lsls	r4, r4, #6
   145a8:	0a64      	lsrs	r4, r4, #9
   145aa:	b2c9      	uxtb	r1, r1
   145ac:	4013      	ands	r3, r2
   145ae:	e795      	b.n	144dc <__aeabi_fdiv+0x138>
   145b0:	1b1b      	subs	r3, r3, r4
   145b2:	261a      	movs	r6, #26
   145b4:	2101      	movs	r1, #1
   145b6:	e7c2      	b.n	1453e <__aeabi_fdiv+0x19a>
   145b8:	9b00      	ldr	r3, [sp, #0]
   145ba:	468b      	mov	fp, r1
   145bc:	469a      	mov	sl, r3
   145be:	2400      	movs	r4, #0
   145c0:	e74c      	b.n	1445c <__aeabi_fdiv+0xb8>
   145c2:	0263      	lsls	r3, r4, #9
   145c4:	d5e5      	bpl.n	14592 <__aeabi_fdiv+0x1ee>
   145c6:	2500      	movs	r5, #0
   145c8:	2480      	movs	r4, #128	; 0x80
   145ca:	03e4      	lsls	r4, r4, #15
   145cc:	432c      	orrs	r4, r5
   145ce:	0264      	lsls	r4, r4, #9
   145d0:	0a64      	lsrs	r4, r4, #9
   145d2:	9b00      	ldr	r3, [sp, #0]
   145d4:	21ff      	movs	r1, #255	; 0xff
   145d6:	e781      	b.n	144dc <__aeabi_fdiv+0x138>
   145d8:	9501      	str	r5, [sp, #4]
   145da:	e7c1      	b.n	14560 <__aeabi_fdiv+0x1bc>
   145dc:	0023      	movs	r3, r4
   145de:	2020      	movs	r0, #32
   145e0:	40cb      	lsrs	r3, r1
   145e2:	1a41      	subs	r1, r0, r1
   145e4:	408c      	lsls	r4, r1
   145e6:	1e61      	subs	r1, r4, #1
   145e8:	418c      	sbcs	r4, r1
   145ea:	431c      	orrs	r4, r3
   145ec:	0763      	lsls	r3, r4, #29
   145ee:	d004      	beq.n	145fa <__aeabi_fdiv+0x256>
   145f0:	230f      	movs	r3, #15
   145f2:	4023      	ands	r3, r4
   145f4:	2b04      	cmp	r3, #4
   145f6:	d000      	beq.n	145fa <__aeabi_fdiv+0x256>
   145f8:	3404      	adds	r4, #4
   145fa:	0163      	lsls	r3, r4, #5
   145fc:	d505      	bpl.n	1460a <__aeabi_fdiv+0x266>
   145fe:	2301      	movs	r3, #1
   14600:	9a01      	ldr	r2, [sp, #4]
   14602:	2101      	movs	r1, #1
   14604:	4013      	ands	r3, r2
   14606:	2400      	movs	r4, #0
   14608:	e768      	b.n	144dc <__aeabi_fdiv+0x138>
   1460a:	2301      	movs	r3, #1
   1460c:	9a01      	ldr	r2, [sp, #4]
   1460e:	01a4      	lsls	r4, r4, #6
   14610:	0a64      	lsrs	r4, r4, #9
   14612:	4013      	ands	r3, r2
   14614:	2100      	movs	r1, #0
   14616:	e761      	b.n	144dc <__aeabi_fdiv+0x138>
   14618:	2380      	movs	r3, #128	; 0x80
   1461a:	03db      	lsls	r3, r3, #15
   1461c:	431c      	orrs	r4, r3
   1461e:	0264      	lsls	r4, r4, #9
   14620:	0a64      	lsrs	r4, r4, #9
   14622:	4653      	mov	r3, sl
   14624:	21ff      	movs	r1, #255	; 0xff
   14626:	e759      	b.n	144dc <__aeabi_fdiv+0x138>
   14628:	000190b8 	.word	0x000190b8
   1462c:	000190f8 	.word	0x000190f8
   14630:	f7ffffff 	.word	0xf7ffffff

00014634 <__eqsf2>:
   14634:	b570      	push	{r4, r5, r6, lr}
   14636:	0042      	lsls	r2, r0, #1
   14638:	0245      	lsls	r5, r0, #9
   1463a:	024e      	lsls	r6, r1, #9
   1463c:	004c      	lsls	r4, r1, #1
   1463e:	0fc3      	lsrs	r3, r0, #31
   14640:	0a6d      	lsrs	r5, r5, #9
   14642:	0e12      	lsrs	r2, r2, #24
   14644:	0a76      	lsrs	r6, r6, #9
   14646:	0e24      	lsrs	r4, r4, #24
   14648:	0fc9      	lsrs	r1, r1, #31
   1464a:	2001      	movs	r0, #1
   1464c:	2aff      	cmp	r2, #255	; 0xff
   1464e:	d006      	beq.n	1465e <__eqsf2+0x2a>
   14650:	2cff      	cmp	r4, #255	; 0xff
   14652:	d003      	beq.n	1465c <__eqsf2+0x28>
   14654:	42a2      	cmp	r2, r4
   14656:	d101      	bne.n	1465c <__eqsf2+0x28>
   14658:	42b5      	cmp	r5, r6
   1465a:	d006      	beq.n	1466a <__eqsf2+0x36>
   1465c:	bd70      	pop	{r4, r5, r6, pc}
   1465e:	2d00      	cmp	r5, #0
   14660:	d1fc      	bne.n	1465c <__eqsf2+0x28>
   14662:	2cff      	cmp	r4, #255	; 0xff
   14664:	d1fa      	bne.n	1465c <__eqsf2+0x28>
   14666:	2e00      	cmp	r6, #0
   14668:	d1f8      	bne.n	1465c <__eqsf2+0x28>
   1466a:	428b      	cmp	r3, r1
   1466c:	d006      	beq.n	1467c <__eqsf2+0x48>
   1466e:	2001      	movs	r0, #1
   14670:	2a00      	cmp	r2, #0
   14672:	d1f3      	bne.n	1465c <__eqsf2+0x28>
   14674:	0028      	movs	r0, r5
   14676:	1e45      	subs	r5, r0, #1
   14678:	41a8      	sbcs	r0, r5
   1467a:	e7ef      	b.n	1465c <__eqsf2+0x28>
   1467c:	2000      	movs	r0, #0
   1467e:	e7ed      	b.n	1465c <__eqsf2+0x28>

00014680 <__gesf2>:
   14680:	b5f0      	push	{r4, r5, r6, r7, lr}
   14682:	0042      	lsls	r2, r0, #1
   14684:	0245      	lsls	r5, r0, #9
   14686:	024c      	lsls	r4, r1, #9
   14688:	0fc3      	lsrs	r3, r0, #31
   1468a:	0048      	lsls	r0, r1, #1
   1468c:	0a6d      	lsrs	r5, r5, #9
   1468e:	0e12      	lsrs	r2, r2, #24
   14690:	0a64      	lsrs	r4, r4, #9
   14692:	0e00      	lsrs	r0, r0, #24
   14694:	0fc9      	lsrs	r1, r1, #31
   14696:	2aff      	cmp	r2, #255	; 0xff
   14698:	d01e      	beq.n	146d8 <__gesf2+0x58>
   1469a:	28ff      	cmp	r0, #255	; 0xff
   1469c:	d021      	beq.n	146e2 <__gesf2+0x62>
   1469e:	2a00      	cmp	r2, #0
   146a0:	d10a      	bne.n	146b8 <__gesf2+0x38>
   146a2:	426e      	negs	r6, r5
   146a4:	416e      	adcs	r6, r5
   146a6:	b2f6      	uxtb	r6, r6
   146a8:	2800      	cmp	r0, #0
   146aa:	d10f      	bne.n	146cc <__gesf2+0x4c>
   146ac:	2c00      	cmp	r4, #0
   146ae:	d10d      	bne.n	146cc <__gesf2+0x4c>
   146b0:	2000      	movs	r0, #0
   146b2:	2d00      	cmp	r5, #0
   146b4:	d009      	beq.n	146ca <__gesf2+0x4a>
   146b6:	e005      	b.n	146c4 <__gesf2+0x44>
   146b8:	2800      	cmp	r0, #0
   146ba:	d101      	bne.n	146c0 <__gesf2+0x40>
   146bc:	2c00      	cmp	r4, #0
   146be:	d001      	beq.n	146c4 <__gesf2+0x44>
   146c0:	428b      	cmp	r3, r1
   146c2:	d011      	beq.n	146e8 <__gesf2+0x68>
   146c4:	2101      	movs	r1, #1
   146c6:	4258      	negs	r0, r3
   146c8:	4308      	orrs	r0, r1
   146ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   146cc:	2e00      	cmp	r6, #0
   146ce:	d0f7      	beq.n	146c0 <__gesf2+0x40>
   146d0:	2001      	movs	r0, #1
   146d2:	3901      	subs	r1, #1
   146d4:	4308      	orrs	r0, r1
   146d6:	e7f8      	b.n	146ca <__gesf2+0x4a>
   146d8:	2d00      	cmp	r5, #0
   146da:	d0de      	beq.n	1469a <__gesf2+0x1a>
   146dc:	2002      	movs	r0, #2
   146de:	4240      	negs	r0, r0
   146e0:	e7f3      	b.n	146ca <__gesf2+0x4a>
   146e2:	2c00      	cmp	r4, #0
   146e4:	d0db      	beq.n	1469e <__gesf2+0x1e>
   146e6:	e7f9      	b.n	146dc <__gesf2+0x5c>
   146e8:	4282      	cmp	r2, r0
   146ea:	dceb      	bgt.n	146c4 <__gesf2+0x44>
   146ec:	db04      	blt.n	146f8 <__gesf2+0x78>
   146ee:	42a5      	cmp	r5, r4
   146f0:	d8e8      	bhi.n	146c4 <__gesf2+0x44>
   146f2:	2000      	movs	r0, #0
   146f4:	42a5      	cmp	r5, r4
   146f6:	d2e8      	bcs.n	146ca <__gesf2+0x4a>
   146f8:	2101      	movs	r1, #1
   146fa:	1e58      	subs	r0, r3, #1
   146fc:	4308      	orrs	r0, r1
   146fe:	e7e4      	b.n	146ca <__gesf2+0x4a>

00014700 <__lesf2>:
   14700:	b5f0      	push	{r4, r5, r6, r7, lr}
   14702:	0042      	lsls	r2, r0, #1
   14704:	024d      	lsls	r5, r1, #9
   14706:	004c      	lsls	r4, r1, #1
   14708:	0246      	lsls	r6, r0, #9
   1470a:	0a76      	lsrs	r6, r6, #9
   1470c:	0e12      	lsrs	r2, r2, #24
   1470e:	0fc3      	lsrs	r3, r0, #31
   14710:	0a6d      	lsrs	r5, r5, #9
   14712:	0e24      	lsrs	r4, r4, #24
   14714:	0fc9      	lsrs	r1, r1, #31
   14716:	2aff      	cmp	r2, #255	; 0xff
   14718:	d016      	beq.n	14748 <__lesf2+0x48>
   1471a:	2cff      	cmp	r4, #255	; 0xff
   1471c:	d018      	beq.n	14750 <__lesf2+0x50>
   1471e:	2a00      	cmp	r2, #0
   14720:	d10a      	bne.n	14738 <__lesf2+0x38>
   14722:	4270      	negs	r0, r6
   14724:	4170      	adcs	r0, r6
   14726:	b2c0      	uxtb	r0, r0
   14728:	2c00      	cmp	r4, #0
   1472a:	d015      	beq.n	14758 <__lesf2+0x58>
   1472c:	2800      	cmp	r0, #0
   1472e:	d005      	beq.n	1473c <__lesf2+0x3c>
   14730:	2001      	movs	r0, #1
   14732:	3901      	subs	r1, #1
   14734:	4308      	orrs	r0, r1
   14736:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14738:	2c00      	cmp	r4, #0
   1473a:	d013      	beq.n	14764 <__lesf2+0x64>
   1473c:	4299      	cmp	r1, r3
   1473e:	d014      	beq.n	1476a <__lesf2+0x6a>
   14740:	2001      	movs	r0, #1
   14742:	425b      	negs	r3, r3
   14744:	4318      	orrs	r0, r3
   14746:	e7f6      	b.n	14736 <__lesf2+0x36>
   14748:	2002      	movs	r0, #2
   1474a:	2e00      	cmp	r6, #0
   1474c:	d1f3      	bne.n	14736 <__lesf2+0x36>
   1474e:	e7e4      	b.n	1471a <__lesf2+0x1a>
   14750:	2002      	movs	r0, #2
   14752:	2d00      	cmp	r5, #0
   14754:	d1ef      	bne.n	14736 <__lesf2+0x36>
   14756:	e7e2      	b.n	1471e <__lesf2+0x1e>
   14758:	2d00      	cmp	r5, #0
   1475a:	d1e7      	bne.n	1472c <__lesf2+0x2c>
   1475c:	2000      	movs	r0, #0
   1475e:	2e00      	cmp	r6, #0
   14760:	d0e9      	beq.n	14736 <__lesf2+0x36>
   14762:	e7ed      	b.n	14740 <__lesf2+0x40>
   14764:	2d00      	cmp	r5, #0
   14766:	d1e9      	bne.n	1473c <__lesf2+0x3c>
   14768:	e7ea      	b.n	14740 <__lesf2+0x40>
   1476a:	42a2      	cmp	r2, r4
   1476c:	dc06      	bgt.n	1477c <__lesf2+0x7c>
   1476e:	dbdf      	blt.n	14730 <__lesf2+0x30>
   14770:	42ae      	cmp	r6, r5
   14772:	d803      	bhi.n	1477c <__lesf2+0x7c>
   14774:	2000      	movs	r0, #0
   14776:	42ae      	cmp	r6, r5
   14778:	d3da      	bcc.n	14730 <__lesf2+0x30>
   1477a:	e7dc      	b.n	14736 <__lesf2+0x36>
   1477c:	2001      	movs	r0, #1
   1477e:	4249      	negs	r1, r1
   14780:	4308      	orrs	r0, r1
   14782:	e7d8      	b.n	14736 <__lesf2+0x36>

00014784 <__aeabi_fmul>:
   14784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14786:	4657      	mov	r7, sl
   14788:	464e      	mov	r6, r9
   1478a:	4645      	mov	r5, r8
   1478c:	46de      	mov	lr, fp
   1478e:	b5e0      	push	{r5, r6, r7, lr}
   14790:	0247      	lsls	r7, r0, #9
   14792:	0046      	lsls	r6, r0, #1
   14794:	4688      	mov	r8, r1
   14796:	0a7f      	lsrs	r7, r7, #9
   14798:	0e36      	lsrs	r6, r6, #24
   1479a:	0fc4      	lsrs	r4, r0, #31
   1479c:	2e00      	cmp	r6, #0
   1479e:	d047      	beq.n	14830 <__aeabi_fmul+0xac>
   147a0:	2eff      	cmp	r6, #255	; 0xff
   147a2:	d024      	beq.n	147ee <__aeabi_fmul+0x6a>
   147a4:	00fb      	lsls	r3, r7, #3
   147a6:	2780      	movs	r7, #128	; 0x80
   147a8:	04ff      	lsls	r7, r7, #19
   147aa:	431f      	orrs	r7, r3
   147ac:	2300      	movs	r3, #0
   147ae:	4699      	mov	r9, r3
   147b0:	469a      	mov	sl, r3
   147b2:	3e7f      	subs	r6, #127	; 0x7f
   147b4:	4643      	mov	r3, r8
   147b6:	025d      	lsls	r5, r3, #9
   147b8:	0058      	lsls	r0, r3, #1
   147ba:	0fdb      	lsrs	r3, r3, #31
   147bc:	0a6d      	lsrs	r5, r5, #9
   147be:	0e00      	lsrs	r0, r0, #24
   147c0:	4698      	mov	r8, r3
   147c2:	d043      	beq.n	1484c <__aeabi_fmul+0xc8>
   147c4:	28ff      	cmp	r0, #255	; 0xff
   147c6:	d03b      	beq.n	14840 <__aeabi_fmul+0xbc>
   147c8:	00eb      	lsls	r3, r5, #3
   147ca:	2580      	movs	r5, #128	; 0x80
   147cc:	2200      	movs	r2, #0
   147ce:	04ed      	lsls	r5, r5, #19
   147d0:	431d      	orrs	r5, r3
   147d2:	387f      	subs	r0, #127	; 0x7f
   147d4:	1836      	adds	r6, r6, r0
   147d6:	1c73      	adds	r3, r6, #1
   147d8:	4641      	mov	r1, r8
   147da:	469b      	mov	fp, r3
   147dc:	464b      	mov	r3, r9
   147de:	4061      	eors	r1, r4
   147e0:	4313      	orrs	r3, r2
   147e2:	2b0f      	cmp	r3, #15
   147e4:	d864      	bhi.n	148b0 <__aeabi_fmul+0x12c>
   147e6:	4875      	ldr	r0, [pc, #468]	; (149bc <__aeabi_fmul+0x238>)
   147e8:	009b      	lsls	r3, r3, #2
   147ea:	58c3      	ldr	r3, [r0, r3]
   147ec:	469f      	mov	pc, r3
   147ee:	2f00      	cmp	r7, #0
   147f0:	d142      	bne.n	14878 <__aeabi_fmul+0xf4>
   147f2:	2308      	movs	r3, #8
   147f4:	4699      	mov	r9, r3
   147f6:	3b06      	subs	r3, #6
   147f8:	26ff      	movs	r6, #255	; 0xff
   147fa:	469a      	mov	sl, r3
   147fc:	e7da      	b.n	147b4 <__aeabi_fmul+0x30>
   147fe:	4641      	mov	r1, r8
   14800:	2a02      	cmp	r2, #2
   14802:	d028      	beq.n	14856 <__aeabi_fmul+0xd2>
   14804:	2a03      	cmp	r2, #3
   14806:	d100      	bne.n	1480a <__aeabi_fmul+0x86>
   14808:	e0ce      	b.n	149a8 <__aeabi_fmul+0x224>
   1480a:	2a01      	cmp	r2, #1
   1480c:	d000      	beq.n	14810 <__aeabi_fmul+0x8c>
   1480e:	e0ac      	b.n	1496a <__aeabi_fmul+0x1e6>
   14810:	4011      	ands	r1, r2
   14812:	2000      	movs	r0, #0
   14814:	2200      	movs	r2, #0
   14816:	b2cc      	uxtb	r4, r1
   14818:	0240      	lsls	r0, r0, #9
   1481a:	05d2      	lsls	r2, r2, #23
   1481c:	0a40      	lsrs	r0, r0, #9
   1481e:	07e4      	lsls	r4, r4, #31
   14820:	4310      	orrs	r0, r2
   14822:	4320      	orrs	r0, r4
   14824:	bc3c      	pop	{r2, r3, r4, r5}
   14826:	4690      	mov	r8, r2
   14828:	4699      	mov	r9, r3
   1482a:	46a2      	mov	sl, r4
   1482c:	46ab      	mov	fp, r5
   1482e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14830:	2f00      	cmp	r7, #0
   14832:	d115      	bne.n	14860 <__aeabi_fmul+0xdc>
   14834:	2304      	movs	r3, #4
   14836:	4699      	mov	r9, r3
   14838:	3b03      	subs	r3, #3
   1483a:	2600      	movs	r6, #0
   1483c:	469a      	mov	sl, r3
   1483e:	e7b9      	b.n	147b4 <__aeabi_fmul+0x30>
   14840:	20ff      	movs	r0, #255	; 0xff
   14842:	2202      	movs	r2, #2
   14844:	2d00      	cmp	r5, #0
   14846:	d0c5      	beq.n	147d4 <__aeabi_fmul+0x50>
   14848:	2203      	movs	r2, #3
   1484a:	e7c3      	b.n	147d4 <__aeabi_fmul+0x50>
   1484c:	2d00      	cmp	r5, #0
   1484e:	d119      	bne.n	14884 <__aeabi_fmul+0x100>
   14850:	2000      	movs	r0, #0
   14852:	2201      	movs	r2, #1
   14854:	e7be      	b.n	147d4 <__aeabi_fmul+0x50>
   14856:	2401      	movs	r4, #1
   14858:	22ff      	movs	r2, #255	; 0xff
   1485a:	400c      	ands	r4, r1
   1485c:	2000      	movs	r0, #0
   1485e:	e7db      	b.n	14818 <__aeabi_fmul+0x94>
   14860:	0038      	movs	r0, r7
   14862:	f002 f965 	bl	16b30 <__clzsi2>
   14866:	2676      	movs	r6, #118	; 0x76
   14868:	1f43      	subs	r3, r0, #5
   1486a:	409f      	lsls	r7, r3
   1486c:	2300      	movs	r3, #0
   1486e:	4276      	negs	r6, r6
   14870:	1a36      	subs	r6, r6, r0
   14872:	4699      	mov	r9, r3
   14874:	469a      	mov	sl, r3
   14876:	e79d      	b.n	147b4 <__aeabi_fmul+0x30>
   14878:	230c      	movs	r3, #12
   1487a:	4699      	mov	r9, r3
   1487c:	3b09      	subs	r3, #9
   1487e:	26ff      	movs	r6, #255	; 0xff
   14880:	469a      	mov	sl, r3
   14882:	e797      	b.n	147b4 <__aeabi_fmul+0x30>
   14884:	0028      	movs	r0, r5
   14886:	f002 f953 	bl	16b30 <__clzsi2>
   1488a:	1f43      	subs	r3, r0, #5
   1488c:	409d      	lsls	r5, r3
   1488e:	2376      	movs	r3, #118	; 0x76
   14890:	425b      	negs	r3, r3
   14892:	1a18      	subs	r0, r3, r0
   14894:	2200      	movs	r2, #0
   14896:	e79d      	b.n	147d4 <__aeabi_fmul+0x50>
   14898:	2080      	movs	r0, #128	; 0x80
   1489a:	2400      	movs	r4, #0
   1489c:	03c0      	lsls	r0, r0, #15
   1489e:	22ff      	movs	r2, #255	; 0xff
   148a0:	e7ba      	b.n	14818 <__aeabi_fmul+0x94>
   148a2:	003d      	movs	r5, r7
   148a4:	4652      	mov	r2, sl
   148a6:	e7ab      	b.n	14800 <__aeabi_fmul+0x7c>
   148a8:	003d      	movs	r5, r7
   148aa:	0021      	movs	r1, r4
   148ac:	4652      	mov	r2, sl
   148ae:	e7a7      	b.n	14800 <__aeabi_fmul+0x7c>
   148b0:	0c3b      	lsrs	r3, r7, #16
   148b2:	469c      	mov	ip, r3
   148b4:	042a      	lsls	r2, r5, #16
   148b6:	0c12      	lsrs	r2, r2, #16
   148b8:	0c2b      	lsrs	r3, r5, #16
   148ba:	0014      	movs	r4, r2
   148bc:	4660      	mov	r0, ip
   148be:	4665      	mov	r5, ip
   148c0:	043f      	lsls	r7, r7, #16
   148c2:	0c3f      	lsrs	r7, r7, #16
   148c4:	437c      	muls	r4, r7
   148c6:	4342      	muls	r2, r0
   148c8:	435d      	muls	r5, r3
   148ca:	437b      	muls	r3, r7
   148cc:	0c27      	lsrs	r7, r4, #16
   148ce:	189b      	adds	r3, r3, r2
   148d0:	18ff      	adds	r7, r7, r3
   148d2:	42ba      	cmp	r2, r7
   148d4:	d903      	bls.n	148de <__aeabi_fmul+0x15a>
   148d6:	2380      	movs	r3, #128	; 0x80
   148d8:	025b      	lsls	r3, r3, #9
   148da:	469c      	mov	ip, r3
   148dc:	4465      	add	r5, ip
   148de:	0424      	lsls	r4, r4, #16
   148e0:	043a      	lsls	r2, r7, #16
   148e2:	0c24      	lsrs	r4, r4, #16
   148e4:	1912      	adds	r2, r2, r4
   148e6:	0193      	lsls	r3, r2, #6
   148e8:	1e5c      	subs	r4, r3, #1
   148ea:	41a3      	sbcs	r3, r4
   148ec:	0c3f      	lsrs	r7, r7, #16
   148ee:	0e92      	lsrs	r2, r2, #26
   148f0:	197d      	adds	r5, r7, r5
   148f2:	431a      	orrs	r2, r3
   148f4:	01ad      	lsls	r5, r5, #6
   148f6:	4315      	orrs	r5, r2
   148f8:	012b      	lsls	r3, r5, #4
   148fa:	d504      	bpl.n	14906 <__aeabi_fmul+0x182>
   148fc:	2301      	movs	r3, #1
   148fe:	465e      	mov	r6, fp
   14900:	086a      	lsrs	r2, r5, #1
   14902:	401d      	ands	r5, r3
   14904:	4315      	orrs	r5, r2
   14906:	0032      	movs	r2, r6
   14908:	327f      	adds	r2, #127	; 0x7f
   1490a:	2a00      	cmp	r2, #0
   1490c:	dd25      	ble.n	1495a <__aeabi_fmul+0x1d6>
   1490e:	076b      	lsls	r3, r5, #29
   14910:	d004      	beq.n	1491c <__aeabi_fmul+0x198>
   14912:	230f      	movs	r3, #15
   14914:	402b      	ands	r3, r5
   14916:	2b04      	cmp	r3, #4
   14918:	d000      	beq.n	1491c <__aeabi_fmul+0x198>
   1491a:	3504      	adds	r5, #4
   1491c:	012b      	lsls	r3, r5, #4
   1491e:	d503      	bpl.n	14928 <__aeabi_fmul+0x1a4>
   14920:	0032      	movs	r2, r6
   14922:	4b27      	ldr	r3, [pc, #156]	; (149c0 <__aeabi_fmul+0x23c>)
   14924:	3280      	adds	r2, #128	; 0x80
   14926:	401d      	ands	r5, r3
   14928:	2afe      	cmp	r2, #254	; 0xfe
   1492a:	dc94      	bgt.n	14856 <__aeabi_fmul+0xd2>
   1492c:	2401      	movs	r4, #1
   1492e:	01a8      	lsls	r0, r5, #6
   14930:	0a40      	lsrs	r0, r0, #9
   14932:	b2d2      	uxtb	r2, r2
   14934:	400c      	ands	r4, r1
   14936:	e76f      	b.n	14818 <__aeabi_fmul+0x94>
   14938:	2080      	movs	r0, #128	; 0x80
   1493a:	03c0      	lsls	r0, r0, #15
   1493c:	4207      	tst	r7, r0
   1493e:	d007      	beq.n	14950 <__aeabi_fmul+0x1cc>
   14940:	4205      	tst	r5, r0
   14942:	d105      	bne.n	14950 <__aeabi_fmul+0x1cc>
   14944:	4328      	orrs	r0, r5
   14946:	0240      	lsls	r0, r0, #9
   14948:	0a40      	lsrs	r0, r0, #9
   1494a:	4644      	mov	r4, r8
   1494c:	22ff      	movs	r2, #255	; 0xff
   1494e:	e763      	b.n	14818 <__aeabi_fmul+0x94>
   14950:	4338      	orrs	r0, r7
   14952:	0240      	lsls	r0, r0, #9
   14954:	0a40      	lsrs	r0, r0, #9
   14956:	22ff      	movs	r2, #255	; 0xff
   14958:	e75e      	b.n	14818 <__aeabi_fmul+0x94>
   1495a:	2401      	movs	r4, #1
   1495c:	1aa3      	subs	r3, r4, r2
   1495e:	2b1b      	cmp	r3, #27
   14960:	dd05      	ble.n	1496e <__aeabi_fmul+0x1ea>
   14962:	400c      	ands	r4, r1
   14964:	2200      	movs	r2, #0
   14966:	2000      	movs	r0, #0
   14968:	e756      	b.n	14818 <__aeabi_fmul+0x94>
   1496a:	465e      	mov	r6, fp
   1496c:	e7cb      	b.n	14906 <__aeabi_fmul+0x182>
   1496e:	002a      	movs	r2, r5
   14970:	2020      	movs	r0, #32
   14972:	40da      	lsrs	r2, r3
   14974:	1ac3      	subs	r3, r0, r3
   14976:	409d      	lsls	r5, r3
   14978:	002b      	movs	r3, r5
   1497a:	1e5d      	subs	r5, r3, #1
   1497c:	41ab      	sbcs	r3, r5
   1497e:	4313      	orrs	r3, r2
   14980:	075a      	lsls	r2, r3, #29
   14982:	d004      	beq.n	1498e <__aeabi_fmul+0x20a>
   14984:	220f      	movs	r2, #15
   14986:	401a      	ands	r2, r3
   14988:	2a04      	cmp	r2, #4
   1498a:	d000      	beq.n	1498e <__aeabi_fmul+0x20a>
   1498c:	3304      	adds	r3, #4
   1498e:	015a      	lsls	r2, r3, #5
   14990:	d504      	bpl.n	1499c <__aeabi_fmul+0x218>
   14992:	2401      	movs	r4, #1
   14994:	2201      	movs	r2, #1
   14996:	400c      	ands	r4, r1
   14998:	2000      	movs	r0, #0
   1499a:	e73d      	b.n	14818 <__aeabi_fmul+0x94>
   1499c:	2401      	movs	r4, #1
   1499e:	019b      	lsls	r3, r3, #6
   149a0:	0a58      	lsrs	r0, r3, #9
   149a2:	400c      	ands	r4, r1
   149a4:	2200      	movs	r2, #0
   149a6:	e737      	b.n	14818 <__aeabi_fmul+0x94>
   149a8:	2080      	movs	r0, #128	; 0x80
   149aa:	2401      	movs	r4, #1
   149ac:	03c0      	lsls	r0, r0, #15
   149ae:	4328      	orrs	r0, r5
   149b0:	0240      	lsls	r0, r0, #9
   149b2:	0a40      	lsrs	r0, r0, #9
   149b4:	400c      	ands	r4, r1
   149b6:	22ff      	movs	r2, #255	; 0xff
   149b8:	e72e      	b.n	14818 <__aeabi_fmul+0x94>
   149ba:	46c0      	nop			; (mov r8, r8)
   149bc:	00019138 	.word	0x00019138
   149c0:	f7ffffff 	.word	0xf7ffffff

000149c4 <__aeabi_fsub>:
   149c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   149c6:	464f      	mov	r7, r9
   149c8:	46d6      	mov	lr, sl
   149ca:	4646      	mov	r6, r8
   149cc:	0044      	lsls	r4, r0, #1
   149ce:	b5c0      	push	{r6, r7, lr}
   149d0:	0fc2      	lsrs	r2, r0, #31
   149d2:	0247      	lsls	r7, r0, #9
   149d4:	0248      	lsls	r0, r1, #9
   149d6:	0a40      	lsrs	r0, r0, #9
   149d8:	4684      	mov	ip, r0
   149da:	4666      	mov	r6, ip
   149dc:	0a7b      	lsrs	r3, r7, #9
   149de:	0048      	lsls	r0, r1, #1
   149e0:	0fc9      	lsrs	r1, r1, #31
   149e2:	469a      	mov	sl, r3
   149e4:	0e24      	lsrs	r4, r4, #24
   149e6:	0015      	movs	r5, r2
   149e8:	00db      	lsls	r3, r3, #3
   149ea:	0e00      	lsrs	r0, r0, #24
   149ec:	4689      	mov	r9, r1
   149ee:	00f6      	lsls	r6, r6, #3
   149f0:	28ff      	cmp	r0, #255	; 0xff
   149f2:	d100      	bne.n	149f6 <__aeabi_fsub+0x32>
   149f4:	e08f      	b.n	14b16 <__aeabi_fsub+0x152>
   149f6:	2101      	movs	r1, #1
   149f8:	464f      	mov	r7, r9
   149fa:	404f      	eors	r7, r1
   149fc:	0039      	movs	r1, r7
   149fe:	4291      	cmp	r1, r2
   14a00:	d066      	beq.n	14ad0 <__aeabi_fsub+0x10c>
   14a02:	1a22      	subs	r2, r4, r0
   14a04:	2a00      	cmp	r2, #0
   14a06:	dc00      	bgt.n	14a0a <__aeabi_fsub+0x46>
   14a08:	e09d      	b.n	14b46 <__aeabi_fsub+0x182>
   14a0a:	2800      	cmp	r0, #0
   14a0c:	d13d      	bne.n	14a8a <__aeabi_fsub+0xc6>
   14a0e:	2e00      	cmp	r6, #0
   14a10:	d100      	bne.n	14a14 <__aeabi_fsub+0x50>
   14a12:	e08b      	b.n	14b2c <__aeabi_fsub+0x168>
   14a14:	1e51      	subs	r1, r2, #1
   14a16:	2900      	cmp	r1, #0
   14a18:	d000      	beq.n	14a1c <__aeabi_fsub+0x58>
   14a1a:	e0b5      	b.n	14b88 <__aeabi_fsub+0x1c4>
   14a1c:	2401      	movs	r4, #1
   14a1e:	1b9b      	subs	r3, r3, r6
   14a20:	015a      	lsls	r2, r3, #5
   14a22:	d544      	bpl.n	14aae <__aeabi_fsub+0xea>
   14a24:	019b      	lsls	r3, r3, #6
   14a26:	099f      	lsrs	r7, r3, #6
   14a28:	0038      	movs	r0, r7
   14a2a:	f002 f881 	bl	16b30 <__clzsi2>
   14a2e:	3805      	subs	r0, #5
   14a30:	4087      	lsls	r7, r0
   14a32:	4284      	cmp	r4, r0
   14a34:	dd00      	ble.n	14a38 <__aeabi_fsub+0x74>
   14a36:	e096      	b.n	14b66 <__aeabi_fsub+0x1a2>
   14a38:	1b04      	subs	r4, r0, r4
   14a3a:	003a      	movs	r2, r7
   14a3c:	2020      	movs	r0, #32
   14a3e:	3401      	adds	r4, #1
   14a40:	40e2      	lsrs	r2, r4
   14a42:	1b04      	subs	r4, r0, r4
   14a44:	40a7      	lsls	r7, r4
   14a46:	003b      	movs	r3, r7
   14a48:	1e5f      	subs	r7, r3, #1
   14a4a:	41bb      	sbcs	r3, r7
   14a4c:	2400      	movs	r4, #0
   14a4e:	4313      	orrs	r3, r2
   14a50:	075a      	lsls	r2, r3, #29
   14a52:	d004      	beq.n	14a5e <__aeabi_fsub+0x9a>
   14a54:	220f      	movs	r2, #15
   14a56:	401a      	ands	r2, r3
   14a58:	2a04      	cmp	r2, #4
   14a5a:	d000      	beq.n	14a5e <__aeabi_fsub+0x9a>
   14a5c:	3304      	adds	r3, #4
   14a5e:	015a      	lsls	r2, r3, #5
   14a60:	d527      	bpl.n	14ab2 <__aeabi_fsub+0xee>
   14a62:	3401      	adds	r4, #1
   14a64:	2cff      	cmp	r4, #255	; 0xff
   14a66:	d100      	bne.n	14a6a <__aeabi_fsub+0xa6>
   14a68:	e079      	b.n	14b5e <__aeabi_fsub+0x19a>
   14a6a:	2201      	movs	r2, #1
   14a6c:	019b      	lsls	r3, r3, #6
   14a6e:	0a5b      	lsrs	r3, r3, #9
   14a70:	b2e4      	uxtb	r4, r4
   14a72:	402a      	ands	r2, r5
   14a74:	025b      	lsls	r3, r3, #9
   14a76:	05e4      	lsls	r4, r4, #23
   14a78:	0a58      	lsrs	r0, r3, #9
   14a7a:	07d2      	lsls	r2, r2, #31
   14a7c:	4320      	orrs	r0, r4
   14a7e:	4310      	orrs	r0, r2
   14a80:	bc1c      	pop	{r2, r3, r4}
   14a82:	4690      	mov	r8, r2
   14a84:	4699      	mov	r9, r3
   14a86:	46a2      	mov	sl, r4
   14a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14a8a:	2cff      	cmp	r4, #255	; 0xff
   14a8c:	d0e0      	beq.n	14a50 <__aeabi_fsub+0x8c>
   14a8e:	2180      	movs	r1, #128	; 0x80
   14a90:	04c9      	lsls	r1, r1, #19
   14a92:	430e      	orrs	r6, r1
   14a94:	2a1b      	cmp	r2, #27
   14a96:	dc7b      	bgt.n	14b90 <__aeabi_fsub+0x1cc>
   14a98:	0031      	movs	r1, r6
   14a9a:	2020      	movs	r0, #32
   14a9c:	40d1      	lsrs	r1, r2
   14a9e:	1a82      	subs	r2, r0, r2
   14aa0:	4096      	lsls	r6, r2
   14aa2:	1e72      	subs	r2, r6, #1
   14aa4:	4196      	sbcs	r6, r2
   14aa6:	430e      	orrs	r6, r1
   14aa8:	1b9b      	subs	r3, r3, r6
   14aaa:	015a      	lsls	r2, r3, #5
   14aac:	d4ba      	bmi.n	14a24 <__aeabi_fsub+0x60>
   14aae:	075a      	lsls	r2, r3, #29
   14ab0:	d1d0      	bne.n	14a54 <__aeabi_fsub+0x90>
   14ab2:	2201      	movs	r2, #1
   14ab4:	08df      	lsrs	r7, r3, #3
   14ab6:	402a      	ands	r2, r5
   14ab8:	2cff      	cmp	r4, #255	; 0xff
   14aba:	d133      	bne.n	14b24 <__aeabi_fsub+0x160>
   14abc:	2f00      	cmp	r7, #0
   14abe:	d100      	bne.n	14ac2 <__aeabi_fsub+0xfe>
   14ac0:	e0a8      	b.n	14c14 <__aeabi_fsub+0x250>
   14ac2:	2380      	movs	r3, #128	; 0x80
   14ac4:	03db      	lsls	r3, r3, #15
   14ac6:	433b      	orrs	r3, r7
   14ac8:	025b      	lsls	r3, r3, #9
   14aca:	0a5b      	lsrs	r3, r3, #9
   14acc:	24ff      	movs	r4, #255	; 0xff
   14ace:	e7d1      	b.n	14a74 <__aeabi_fsub+0xb0>
   14ad0:	1a21      	subs	r1, r4, r0
   14ad2:	2900      	cmp	r1, #0
   14ad4:	dd4c      	ble.n	14b70 <__aeabi_fsub+0x1ac>
   14ad6:	2800      	cmp	r0, #0
   14ad8:	d02a      	beq.n	14b30 <__aeabi_fsub+0x16c>
   14ada:	2cff      	cmp	r4, #255	; 0xff
   14adc:	d0b8      	beq.n	14a50 <__aeabi_fsub+0x8c>
   14ade:	2080      	movs	r0, #128	; 0x80
   14ae0:	04c0      	lsls	r0, r0, #19
   14ae2:	4306      	orrs	r6, r0
   14ae4:	291b      	cmp	r1, #27
   14ae6:	dd00      	ble.n	14aea <__aeabi_fsub+0x126>
   14ae8:	e0af      	b.n	14c4a <__aeabi_fsub+0x286>
   14aea:	0030      	movs	r0, r6
   14aec:	2720      	movs	r7, #32
   14aee:	40c8      	lsrs	r0, r1
   14af0:	1a79      	subs	r1, r7, r1
   14af2:	408e      	lsls	r6, r1
   14af4:	1e71      	subs	r1, r6, #1
   14af6:	418e      	sbcs	r6, r1
   14af8:	4306      	orrs	r6, r0
   14afa:	199b      	adds	r3, r3, r6
   14afc:	0159      	lsls	r1, r3, #5
   14afe:	d5d6      	bpl.n	14aae <__aeabi_fsub+0xea>
   14b00:	3401      	adds	r4, #1
   14b02:	2cff      	cmp	r4, #255	; 0xff
   14b04:	d100      	bne.n	14b08 <__aeabi_fsub+0x144>
   14b06:	e085      	b.n	14c14 <__aeabi_fsub+0x250>
   14b08:	2201      	movs	r2, #1
   14b0a:	497a      	ldr	r1, [pc, #488]	; (14cf4 <__aeabi_fsub+0x330>)
   14b0c:	401a      	ands	r2, r3
   14b0e:	085b      	lsrs	r3, r3, #1
   14b10:	400b      	ands	r3, r1
   14b12:	4313      	orrs	r3, r2
   14b14:	e79c      	b.n	14a50 <__aeabi_fsub+0x8c>
   14b16:	2e00      	cmp	r6, #0
   14b18:	d000      	beq.n	14b1c <__aeabi_fsub+0x158>
   14b1a:	e770      	b.n	149fe <__aeabi_fsub+0x3a>
   14b1c:	e76b      	b.n	149f6 <__aeabi_fsub+0x32>
   14b1e:	1e3b      	subs	r3, r7, #0
   14b20:	d1c5      	bne.n	14aae <__aeabi_fsub+0xea>
   14b22:	2200      	movs	r2, #0
   14b24:	027b      	lsls	r3, r7, #9
   14b26:	0a5b      	lsrs	r3, r3, #9
   14b28:	b2e4      	uxtb	r4, r4
   14b2a:	e7a3      	b.n	14a74 <__aeabi_fsub+0xb0>
   14b2c:	0014      	movs	r4, r2
   14b2e:	e78f      	b.n	14a50 <__aeabi_fsub+0x8c>
   14b30:	2e00      	cmp	r6, #0
   14b32:	d04d      	beq.n	14bd0 <__aeabi_fsub+0x20c>
   14b34:	1e48      	subs	r0, r1, #1
   14b36:	2800      	cmp	r0, #0
   14b38:	d157      	bne.n	14bea <__aeabi_fsub+0x226>
   14b3a:	199b      	adds	r3, r3, r6
   14b3c:	2401      	movs	r4, #1
   14b3e:	015a      	lsls	r2, r3, #5
   14b40:	d5b5      	bpl.n	14aae <__aeabi_fsub+0xea>
   14b42:	2402      	movs	r4, #2
   14b44:	e7e0      	b.n	14b08 <__aeabi_fsub+0x144>
   14b46:	2a00      	cmp	r2, #0
   14b48:	d125      	bne.n	14b96 <__aeabi_fsub+0x1d2>
   14b4a:	1c62      	adds	r2, r4, #1
   14b4c:	b2d2      	uxtb	r2, r2
   14b4e:	2a01      	cmp	r2, #1
   14b50:	dd72      	ble.n	14c38 <__aeabi_fsub+0x274>
   14b52:	1b9f      	subs	r7, r3, r6
   14b54:	017a      	lsls	r2, r7, #5
   14b56:	d535      	bpl.n	14bc4 <__aeabi_fsub+0x200>
   14b58:	1af7      	subs	r7, r6, r3
   14b5a:	000d      	movs	r5, r1
   14b5c:	e764      	b.n	14a28 <__aeabi_fsub+0x64>
   14b5e:	2201      	movs	r2, #1
   14b60:	2300      	movs	r3, #0
   14b62:	402a      	ands	r2, r5
   14b64:	e786      	b.n	14a74 <__aeabi_fsub+0xb0>
   14b66:	003b      	movs	r3, r7
   14b68:	4a63      	ldr	r2, [pc, #396]	; (14cf8 <__aeabi_fsub+0x334>)
   14b6a:	1a24      	subs	r4, r4, r0
   14b6c:	4013      	ands	r3, r2
   14b6e:	e76f      	b.n	14a50 <__aeabi_fsub+0x8c>
   14b70:	2900      	cmp	r1, #0
   14b72:	d16c      	bne.n	14c4e <__aeabi_fsub+0x28a>
   14b74:	1c61      	adds	r1, r4, #1
   14b76:	b2c8      	uxtb	r0, r1
   14b78:	2801      	cmp	r0, #1
   14b7a:	dd4e      	ble.n	14c1a <__aeabi_fsub+0x256>
   14b7c:	29ff      	cmp	r1, #255	; 0xff
   14b7e:	d049      	beq.n	14c14 <__aeabi_fsub+0x250>
   14b80:	199b      	adds	r3, r3, r6
   14b82:	085b      	lsrs	r3, r3, #1
   14b84:	000c      	movs	r4, r1
   14b86:	e763      	b.n	14a50 <__aeabi_fsub+0x8c>
   14b88:	2aff      	cmp	r2, #255	; 0xff
   14b8a:	d041      	beq.n	14c10 <__aeabi_fsub+0x24c>
   14b8c:	000a      	movs	r2, r1
   14b8e:	e781      	b.n	14a94 <__aeabi_fsub+0xd0>
   14b90:	2601      	movs	r6, #1
   14b92:	1b9b      	subs	r3, r3, r6
   14b94:	e789      	b.n	14aaa <__aeabi_fsub+0xe6>
   14b96:	2c00      	cmp	r4, #0
   14b98:	d01c      	beq.n	14bd4 <__aeabi_fsub+0x210>
   14b9a:	28ff      	cmp	r0, #255	; 0xff
   14b9c:	d021      	beq.n	14be2 <__aeabi_fsub+0x21e>
   14b9e:	2480      	movs	r4, #128	; 0x80
   14ba0:	04e4      	lsls	r4, r4, #19
   14ba2:	4252      	negs	r2, r2
   14ba4:	4323      	orrs	r3, r4
   14ba6:	2a1b      	cmp	r2, #27
   14ba8:	dd00      	ble.n	14bac <__aeabi_fsub+0x1e8>
   14baa:	e096      	b.n	14cda <__aeabi_fsub+0x316>
   14bac:	001c      	movs	r4, r3
   14bae:	2520      	movs	r5, #32
   14bb0:	40d4      	lsrs	r4, r2
   14bb2:	1aaa      	subs	r2, r5, r2
   14bb4:	4093      	lsls	r3, r2
   14bb6:	1e5a      	subs	r2, r3, #1
   14bb8:	4193      	sbcs	r3, r2
   14bba:	4323      	orrs	r3, r4
   14bbc:	1af3      	subs	r3, r6, r3
   14bbe:	0004      	movs	r4, r0
   14bc0:	000d      	movs	r5, r1
   14bc2:	e72d      	b.n	14a20 <__aeabi_fsub+0x5c>
   14bc4:	2f00      	cmp	r7, #0
   14bc6:	d000      	beq.n	14bca <__aeabi_fsub+0x206>
   14bc8:	e72e      	b.n	14a28 <__aeabi_fsub+0x64>
   14bca:	2200      	movs	r2, #0
   14bcc:	2400      	movs	r4, #0
   14bce:	e7a9      	b.n	14b24 <__aeabi_fsub+0x160>
   14bd0:	000c      	movs	r4, r1
   14bd2:	e73d      	b.n	14a50 <__aeabi_fsub+0x8c>
   14bd4:	2b00      	cmp	r3, #0
   14bd6:	d058      	beq.n	14c8a <__aeabi_fsub+0x2c6>
   14bd8:	43d2      	mvns	r2, r2
   14bda:	2a00      	cmp	r2, #0
   14bdc:	d0ee      	beq.n	14bbc <__aeabi_fsub+0x1f8>
   14bde:	28ff      	cmp	r0, #255	; 0xff
   14be0:	d1e1      	bne.n	14ba6 <__aeabi_fsub+0x1e2>
   14be2:	0033      	movs	r3, r6
   14be4:	24ff      	movs	r4, #255	; 0xff
   14be6:	000d      	movs	r5, r1
   14be8:	e732      	b.n	14a50 <__aeabi_fsub+0x8c>
   14bea:	29ff      	cmp	r1, #255	; 0xff
   14bec:	d010      	beq.n	14c10 <__aeabi_fsub+0x24c>
   14bee:	0001      	movs	r1, r0
   14bf0:	e778      	b.n	14ae4 <__aeabi_fsub+0x120>
   14bf2:	2b00      	cmp	r3, #0
   14bf4:	d06e      	beq.n	14cd4 <__aeabi_fsub+0x310>
   14bf6:	24ff      	movs	r4, #255	; 0xff
   14bf8:	2e00      	cmp	r6, #0
   14bfa:	d100      	bne.n	14bfe <__aeabi_fsub+0x23a>
   14bfc:	e728      	b.n	14a50 <__aeabi_fsub+0x8c>
   14bfe:	2280      	movs	r2, #128	; 0x80
   14c00:	4651      	mov	r1, sl
   14c02:	03d2      	lsls	r2, r2, #15
   14c04:	4211      	tst	r1, r2
   14c06:	d003      	beq.n	14c10 <__aeabi_fsub+0x24c>
   14c08:	4661      	mov	r1, ip
   14c0a:	4211      	tst	r1, r2
   14c0c:	d100      	bne.n	14c10 <__aeabi_fsub+0x24c>
   14c0e:	0033      	movs	r3, r6
   14c10:	24ff      	movs	r4, #255	; 0xff
   14c12:	e71d      	b.n	14a50 <__aeabi_fsub+0x8c>
   14c14:	24ff      	movs	r4, #255	; 0xff
   14c16:	2300      	movs	r3, #0
   14c18:	e72c      	b.n	14a74 <__aeabi_fsub+0xb0>
   14c1a:	2c00      	cmp	r4, #0
   14c1c:	d1e9      	bne.n	14bf2 <__aeabi_fsub+0x22e>
   14c1e:	2b00      	cmp	r3, #0
   14c20:	d063      	beq.n	14cea <__aeabi_fsub+0x326>
   14c22:	2e00      	cmp	r6, #0
   14c24:	d100      	bne.n	14c28 <__aeabi_fsub+0x264>
   14c26:	e713      	b.n	14a50 <__aeabi_fsub+0x8c>
   14c28:	199b      	adds	r3, r3, r6
   14c2a:	015a      	lsls	r2, r3, #5
   14c2c:	d400      	bmi.n	14c30 <__aeabi_fsub+0x26c>
   14c2e:	e73e      	b.n	14aae <__aeabi_fsub+0xea>
   14c30:	4a31      	ldr	r2, [pc, #196]	; (14cf8 <__aeabi_fsub+0x334>)
   14c32:	000c      	movs	r4, r1
   14c34:	4013      	ands	r3, r2
   14c36:	e70b      	b.n	14a50 <__aeabi_fsub+0x8c>
   14c38:	2c00      	cmp	r4, #0
   14c3a:	d11e      	bne.n	14c7a <__aeabi_fsub+0x2b6>
   14c3c:	2b00      	cmp	r3, #0
   14c3e:	d12f      	bne.n	14ca0 <__aeabi_fsub+0x2dc>
   14c40:	2e00      	cmp	r6, #0
   14c42:	d04f      	beq.n	14ce4 <__aeabi_fsub+0x320>
   14c44:	0033      	movs	r3, r6
   14c46:	000d      	movs	r5, r1
   14c48:	e702      	b.n	14a50 <__aeabi_fsub+0x8c>
   14c4a:	2601      	movs	r6, #1
   14c4c:	e755      	b.n	14afa <__aeabi_fsub+0x136>
   14c4e:	2c00      	cmp	r4, #0
   14c50:	d11f      	bne.n	14c92 <__aeabi_fsub+0x2ce>
   14c52:	2b00      	cmp	r3, #0
   14c54:	d043      	beq.n	14cde <__aeabi_fsub+0x31a>
   14c56:	43c9      	mvns	r1, r1
   14c58:	2900      	cmp	r1, #0
   14c5a:	d00b      	beq.n	14c74 <__aeabi_fsub+0x2b0>
   14c5c:	28ff      	cmp	r0, #255	; 0xff
   14c5e:	d039      	beq.n	14cd4 <__aeabi_fsub+0x310>
   14c60:	291b      	cmp	r1, #27
   14c62:	dc44      	bgt.n	14cee <__aeabi_fsub+0x32a>
   14c64:	001c      	movs	r4, r3
   14c66:	2720      	movs	r7, #32
   14c68:	40cc      	lsrs	r4, r1
   14c6a:	1a79      	subs	r1, r7, r1
   14c6c:	408b      	lsls	r3, r1
   14c6e:	1e59      	subs	r1, r3, #1
   14c70:	418b      	sbcs	r3, r1
   14c72:	4323      	orrs	r3, r4
   14c74:	199b      	adds	r3, r3, r6
   14c76:	0004      	movs	r4, r0
   14c78:	e740      	b.n	14afc <__aeabi_fsub+0x138>
   14c7a:	2b00      	cmp	r3, #0
   14c7c:	d11a      	bne.n	14cb4 <__aeabi_fsub+0x2f0>
   14c7e:	2e00      	cmp	r6, #0
   14c80:	d124      	bne.n	14ccc <__aeabi_fsub+0x308>
   14c82:	2780      	movs	r7, #128	; 0x80
   14c84:	2200      	movs	r2, #0
   14c86:	03ff      	lsls	r7, r7, #15
   14c88:	e71b      	b.n	14ac2 <__aeabi_fsub+0xfe>
   14c8a:	0033      	movs	r3, r6
   14c8c:	0004      	movs	r4, r0
   14c8e:	000d      	movs	r5, r1
   14c90:	e6de      	b.n	14a50 <__aeabi_fsub+0x8c>
   14c92:	28ff      	cmp	r0, #255	; 0xff
   14c94:	d01e      	beq.n	14cd4 <__aeabi_fsub+0x310>
   14c96:	2480      	movs	r4, #128	; 0x80
   14c98:	04e4      	lsls	r4, r4, #19
   14c9a:	4249      	negs	r1, r1
   14c9c:	4323      	orrs	r3, r4
   14c9e:	e7df      	b.n	14c60 <__aeabi_fsub+0x29c>
   14ca0:	2e00      	cmp	r6, #0
   14ca2:	d100      	bne.n	14ca6 <__aeabi_fsub+0x2e2>
   14ca4:	e6d4      	b.n	14a50 <__aeabi_fsub+0x8c>
   14ca6:	1b9f      	subs	r7, r3, r6
   14ca8:	017a      	lsls	r2, r7, #5
   14caa:	d400      	bmi.n	14cae <__aeabi_fsub+0x2ea>
   14cac:	e737      	b.n	14b1e <__aeabi_fsub+0x15a>
   14cae:	1af3      	subs	r3, r6, r3
   14cb0:	000d      	movs	r5, r1
   14cb2:	e6cd      	b.n	14a50 <__aeabi_fsub+0x8c>
   14cb4:	24ff      	movs	r4, #255	; 0xff
   14cb6:	2e00      	cmp	r6, #0
   14cb8:	d100      	bne.n	14cbc <__aeabi_fsub+0x2f8>
   14cba:	e6c9      	b.n	14a50 <__aeabi_fsub+0x8c>
   14cbc:	2280      	movs	r2, #128	; 0x80
   14cbe:	4650      	mov	r0, sl
   14cc0:	03d2      	lsls	r2, r2, #15
   14cc2:	4210      	tst	r0, r2
   14cc4:	d0a4      	beq.n	14c10 <__aeabi_fsub+0x24c>
   14cc6:	4660      	mov	r0, ip
   14cc8:	4210      	tst	r0, r2
   14cca:	d1a1      	bne.n	14c10 <__aeabi_fsub+0x24c>
   14ccc:	0033      	movs	r3, r6
   14cce:	000d      	movs	r5, r1
   14cd0:	24ff      	movs	r4, #255	; 0xff
   14cd2:	e6bd      	b.n	14a50 <__aeabi_fsub+0x8c>
   14cd4:	0033      	movs	r3, r6
   14cd6:	24ff      	movs	r4, #255	; 0xff
   14cd8:	e6ba      	b.n	14a50 <__aeabi_fsub+0x8c>
   14cda:	2301      	movs	r3, #1
   14cdc:	e76e      	b.n	14bbc <__aeabi_fsub+0x1f8>
   14cde:	0033      	movs	r3, r6
   14ce0:	0004      	movs	r4, r0
   14ce2:	e6b5      	b.n	14a50 <__aeabi_fsub+0x8c>
   14ce4:	2700      	movs	r7, #0
   14ce6:	2200      	movs	r2, #0
   14ce8:	e71c      	b.n	14b24 <__aeabi_fsub+0x160>
   14cea:	0033      	movs	r3, r6
   14cec:	e6b0      	b.n	14a50 <__aeabi_fsub+0x8c>
   14cee:	2301      	movs	r3, #1
   14cf0:	e7c0      	b.n	14c74 <__aeabi_fsub+0x2b0>
   14cf2:	46c0      	nop			; (mov r8, r8)
   14cf4:	7dffffff 	.word	0x7dffffff
   14cf8:	fbffffff 	.word	0xfbffffff

00014cfc <__aeabi_f2iz>:
   14cfc:	0241      	lsls	r1, r0, #9
   14cfe:	0043      	lsls	r3, r0, #1
   14d00:	0fc2      	lsrs	r2, r0, #31
   14d02:	0a49      	lsrs	r1, r1, #9
   14d04:	0e1b      	lsrs	r3, r3, #24
   14d06:	2000      	movs	r0, #0
   14d08:	2b7e      	cmp	r3, #126	; 0x7e
   14d0a:	dd0d      	ble.n	14d28 <__aeabi_f2iz+0x2c>
   14d0c:	2b9d      	cmp	r3, #157	; 0x9d
   14d0e:	dc0c      	bgt.n	14d2a <__aeabi_f2iz+0x2e>
   14d10:	2080      	movs	r0, #128	; 0x80
   14d12:	0400      	lsls	r0, r0, #16
   14d14:	4301      	orrs	r1, r0
   14d16:	2b95      	cmp	r3, #149	; 0x95
   14d18:	dc0a      	bgt.n	14d30 <__aeabi_f2iz+0x34>
   14d1a:	2096      	movs	r0, #150	; 0x96
   14d1c:	1ac3      	subs	r3, r0, r3
   14d1e:	40d9      	lsrs	r1, r3
   14d20:	4248      	negs	r0, r1
   14d22:	2a00      	cmp	r2, #0
   14d24:	d100      	bne.n	14d28 <__aeabi_f2iz+0x2c>
   14d26:	0008      	movs	r0, r1
   14d28:	4770      	bx	lr
   14d2a:	4b03      	ldr	r3, [pc, #12]	; (14d38 <__aeabi_f2iz+0x3c>)
   14d2c:	18d0      	adds	r0, r2, r3
   14d2e:	e7fb      	b.n	14d28 <__aeabi_f2iz+0x2c>
   14d30:	3b96      	subs	r3, #150	; 0x96
   14d32:	4099      	lsls	r1, r3
   14d34:	e7f4      	b.n	14d20 <__aeabi_f2iz+0x24>
   14d36:	46c0      	nop			; (mov r8, r8)
   14d38:	7fffffff 	.word	0x7fffffff

00014d3c <__aeabi_i2f>:
   14d3c:	b570      	push	{r4, r5, r6, lr}
   14d3e:	2800      	cmp	r0, #0
   14d40:	d030      	beq.n	14da4 <__aeabi_i2f+0x68>
   14d42:	17c3      	asrs	r3, r0, #31
   14d44:	18c4      	adds	r4, r0, r3
   14d46:	405c      	eors	r4, r3
   14d48:	0fc5      	lsrs	r5, r0, #31
   14d4a:	0020      	movs	r0, r4
   14d4c:	f001 fef0 	bl	16b30 <__clzsi2>
   14d50:	239e      	movs	r3, #158	; 0x9e
   14d52:	1a1b      	subs	r3, r3, r0
   14d54:	2b96      	cmp	r3, #150	; 0x96
   14d56:	dc0d      	bgt.n	14d74 <__aeabi_i2f+0x38>
   14d58:	2296      	movs	r2, #150	; 0x96
   14d5a:	1ad2      	subs	r2, r2, r3
   14d5c:	4094      	lsls	r4, r2
   14d5e:	002a      	movs	r2, r5
   14d60:	0264      	lsls	r4, r4, #9
   14d62:	0a64      	lsrs	r4, r4, #9
   14d64:	b2db      	uxtb	r3, r3
   14d66:	0264      	lsls	r4, r4, #9
   14d68:	05db      	lsls	r3, r3, #23
   14d6a:	0a60      	lsrs	r0, r4, #9
   14d6c:	07d2      	lsls	r2, r2, #31
   14d6e:	4318      	orrs	r0, r3
   14d70:	4310      	orrs	r0, r2
   14d72:	bd70      	pop	{r4, r5, r6, pc}
   14d74:	2b99      	cmp	r3, #153	; 0x99
   14d76:	dc19      	bgt.n	14dac <__aeabi_i2f+0x70>
   14d78:	2299      	movs	r2, #153	; 0x99
   14d7a:	1ad2      	subs	r2, r2, r3
   14d7c:	2a00      	cmp	r2, #0
   14d7e:	dd29      	ble.n	14dd4 <__aeabi_i2f+0x98>
   14d80:	4094      	lsls	r4, r2
   14d82:	0022      	movs	r2, r4
   14d84:	4c14      	ldr	r4, [pc, #80]	; (14dd8 <__aeabi_i2f+0x9c>)
   14d86:	4014      	ands	r4, r2
   14d88:	0751      	lsls	r1, r2, #29
   14d8a:	d004      	beq.n	14d96 <__aeabi_i2f+0x5a>
   14d8c:	210f      	movs	r1, #15
   14d8e:	400a      	ands	r2, r1
   14d90:	2a04      	cmp	r2, #4
   14d92:	d000      	beq.n	14d96 <__aeabi_i2f+0x5a>
   14d94:	3404      	adds	r4, #4
   14d96:	0162      	lsls	r2, r4, #5
   14d98:	d413      	bmi.n	14dc2 <__aeabi_i2f+0x86>
   14d9a:	01a4      	lsls	r4, r4, #6
   14d9c:	0a64      	lsrs	r4, r4, #9
   14d9e:	b2db      	uxtb	r3, r3
   14da0:	002a      	movs	r2, r5
   14da2:	e7e0      	b.n	14d66 <__aeabi_i2f+0x2a>
   14da4:	2200      	movs	r2, #0
   14da6:	2300      	movs	r3, #0
   14da8:	2400      	movs	r4, #0
   14daa:	e7dc      	b.n	14d66 <__aeabi_i2f+0x2a>
   14dac:	2205      	movs	r2, #5
   14dae:	0021      	movs	r1, r4
   14db0:	1a12      	subs	r2, r2, r0
   14db2:	40d1      	lsrs	r1, r2
   14db4:	22b9      	movs	r2, #185	; 0xb9
   14db6:	1ad2      	subs	r2, r2, r3
   14db8:	4094      	lsls	r4, r2
   14dba:	1e62      	subs	r2, r4, #1
   14dbc:	4194      	sbcs	r4, r2
   14dbe:	430c      	orrs	r4, r1
   14dc0:	e7da      	b.n	14d78 <__aeabi_i2f+0x3c>
   14dc2:	4b05      	ldr	r3, [pc, #20]	; (14dd8 <__aeabi_i2f+0x9c>)
   14dc4:	002a      	movs	r2, r5
   14dc6:	401c      	ands	r4, r3
   14dc8:	239f      	movs	r3, #159	; 0x9f
   14dca:	01a4      	lsls	r4, r4, #6
   14dcc:	1a1b      	subs	r3, r3, r0
   14dce:	0a64      	lsrs	r4, r4, #9
   14dd0:	b2db      	uxtb	r3, r3
   14dd2:	e7c8      	b.n	14d66 <__aeabi_i2f+0x2a>
   14dd4:	0022      	movs	r2, r4
   14dd6:	e7d5      	b.n	14d84 <__aeabi_i2f+0x48>
   14dd8:	fbffffff 	.word	0xfbffffff

00014ddc <__aeabi_ui2f>:
   14ddc:	b510      	push	{r4, lr}
   14dde:	1e04      	subs	r4, r0, #0
   14de0:	d027      	beq.n	14e32 <__aeabi_ui2f+0x56>
   14de2:	f001 fea5 	bl	16b30 <__clzsi2>
   14de6:	239e      	movs	r3, #158	; 0x9e
   14de8:	1a1b      	subs	r3, r3, r0
   14dea:	2b96      	cmp	r3, #150	; 0x96
   14dec:	dc0a      	bgt.n	14e04 <__aeabi_ui2f+0x28>
   14dee:	2296      	movs	r2, #150	; 0x96
   14df0:	1ad2      	subs	r2, r2, r3
   14df2:	4094      	lsls	r4, r2
   14df4:	0264      	lsls	r4, r4, #9
   14df6:	0a64      	lsrs	r4, r4, #9
   14df8:	b2db      	uxtb	r3, r3
   14dfa:	0264      	lsls	r4, r4, #9
   14dfc:	05db      	lsls	r3, r3, #23
   14dfe:	0a60      	lsrs	r0, r4, #9
   14e00:	4318      	orrs	r0, r3
   14e02:	bd10      	pop	{r4, pc}
   14e04:	2b99      	cmp	r3, #153	; 0x99
   14e06:	dc17      	bgt.n	14e38 <__aeabi_ui2f+0x5c>
   14e08:	2299      	movs	r2, #153	; 0x99
   14e0a:	1ad2      	subs	r2, r2, r3
   14e0c:	2a00      	cmp	r2, #0
   14e0e:	dd27      	ble.n	14e60 <__aeabi_ui2f+0x84>
   14e10:	4094      	lsls	r4, r2
   14e12:	0022      	movs	r2, r4
   14e14:	4c13      	ldr	r4, [pc, #76]	; (14e64 <__aeabi_ui2f+0x88>)
   14e16:	4014      	ands	r4, r2
   14e18:	0751      	lsls	r1, r2, #29
   14e1a:	d004      	beq.n	14e26 <__aeabi_ui2f+0x4a>
   14e1c:	210f      	movs	r1, #15
   14e1e:	400a      	ands	r2, r1
   14e20:	2a04      	cmp	r2, #4
   14e22:	d000      	beq.n	14e26 <__aeabi_ui2f+0x4a>
   14e24:	3404      	adds	r4, #4
   14e26:	0162      	lsls	r2, r4, #5
   14e28:	d412      	bmi.n	14e50 <__aeabi_ui2f+0x74>
   14e2a:	01a4      	lsls	r4, r4, #6
   14e2c:	0a64      	lsrs	r4, r4, #9
   14e2e:	b2db      	uxtb	r3, r3
   14e30:	e7e3      	b.n	14dfa <__aeabi_ui2f+0x1e>
   14e32:	2300      	movs	r3, #0
   14e34:	2400      	movs	r4, #0
   14e36:	e7e0      	b.n	14dfa <__aeabi_ui2f+0x1e>
   14e38:	22b9      	movs	r2, #185	; 0xb9
   14e3a:	0021      	movs	r1, r4
   14e3c:	1ad2      	subs	r2, r2, r3
   14e3e:	4091      	lsls	r1, r2
   14e40:	000a      	movs	r2, r1
   14e42:	1e51      	subs	r1, r2, #1
   14e44:	418a      	sbcs	r2, r1
   14e46:	2105      	movs	r1, #5
   14e48:	1a09      	subs	r1, r1, r0
   14e4a:	40cc      	lsrs	r4, r1
   14e4c:	4314      	orrs	r4, r2
   14e4e:	e7db      	b.n	14e08 <__aeabi_ui2f+0x2c>
   14e50:	4b04      	ldr	r3, [pc, #16]	; (14e64 <__aeabi_ui2f+0x88>)
   14e52:	401c      	ands	r4, r3
   14e54:	239f      	movs	r3, #159	; 0x9f
   14e56:	01a4      	lsls	r4, r4, #6
   14e58:	1a1b      	subs	r3, r3, r0
   14e5a:	0a64      	lsrs	r4, r4, #9
   14e5c:	b2db      	uxtb	r3, r3
   14e5e:	e7cc      	b.n	14dfa <__aeabi_ui2f+0x1e>
   14e60:	0022      	movs	r2, r4
   14e62:	e7d7      	b.n	14e14 <__aeabi_ui2f+0x38>
   14e64:	fbffffff 	.word	0xfbffffff

00014e68 <__aeabi_dadd>:
   14e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14e6a:	4645      	mov	r5, r8
   14e6c:	46de      	mov	lr, fp
   14e6e:	4657      	mov	r7, sl
   14e70:	464e      	mov	r6, r9
   14e72:	030c      	lsls	r4, r1, #12
   14e74:	b5e0      	push	{r5, r6, r7, lr}
   14e76:	004e      	lsls	r6, r1, #1
   14e78:	0fc9      	lsrs	r1, r1, #31
   14e7a:	4688      	mov	r8, r1
   14e7c:	000d      	movs	r5, r1
   14e7e:	0a61      	lsrs	r1, r4, #9
   14e80:	0f44      	lsrs	r4, r0, #29
   14e82:	430c      	orrs	r4, r1
   14e84:	00c7      	lsls	r7, r0, #3
   14e86:	0319      	lsls	r1, r3, #12
   14e88:	0058      	lsls	r0, r3, #1
   14e8a:	0fdb      	lsrs	r3, r3, #31
   14e8c:	469b      	mov	fp, r3
   14e8e:	0a4b      	lsrs	r3, r1, #9
   14e90:	0f51      	lsrs	r1, r2, #29
   14e92:	430b      	orrs	r3, r1
   14e94:	0d76      	lsrs	r6, r6, #21
   14e96:	0d40      	lsrs	r0, r0, #21
   14e98:	0019      	movs	r1, r3
   14e9a:	00d2      	lsls	r2, r2, #3
   14e9c:	45d8      	cmp	r8, fp
   14e9e:	d100      	bne.n	14ea2 <__aeabi_dadd+0x3a>
   14ea0:	e0ae      	b.n	15000 <__aeabi_dadd+0x198>
   14ea2:	1a35      	subs	r5, r6, r0
   14ea4:	2d00      	cmp	r5, #0
   14ea6:	dc00      	bgt.n	14eaa <__aeabi_dadd+0x42>
   14ea8:	e0f6      	b.n	15098 <__aeabi_dadd+0x230>
   14eaa:	2800      	cmp	r0, #0
   14eac:	d10f      	bne.n	14ece <__aeabi_dadd+0x66>
   14eae:	4313      	orrs	r3, r2
   14eb0:	d100      	bne.n	14eb4 <__aeabi_dadd+0x4c>
   14eb2:	e0db      	b.n	1506c <__aeabi_dadd+0x204>
   14eb4:	1e6b      	subs	r3, r5, #1
   14eb6:	2b00      	cmp	r3, #0
   14eb8:	d000      	beq.n	14ebc <__aeabi_dadd+0x54>
   14eba:	e137      	b.n	1512c <__aeabi_dadd+0x2c4>
   14ebc:	1aba      	subs	r2, r7, r2
   14ebe:	4297      	cmp	r7, r2
   14ec0:	41bf      	sbcs	r7, r7
   14ec2:	1a64      	subs	r4, r4, r1
   14ec4:	427f      	negs	r7, r7
   14ec6:	1be4      	subs	r4, r4, r7
   14ec8:	2601      	movs	r6, #1
   14eca:	0017      	movs	r7, r2
   14ecc:	e024      	b.n	14f18 <__aeabi_dadd+0xb0>
   14ece:	4bc6      	ldr	r3, [pc, #792]	; (151e8 <__aeabi_dadd+0x380>)
   14ed0:	429e      	cmp	r6, r3
   14ed2:	d04d      	beq.n	14f70 <__aeabi_dadd+0x108>
   14ed4:	2380      	movs	r3, #128	; 0x80
   14ed6:	041b      	lsls	r3, r3, #16
   14ed8:	4319      	orrs	r1, r3
   14eda:	2d38      	cmp	r5, #56	; 0x38
   14edc:	dd00      	ble.n	14ee0 <__aeabi_dadd+0x78>
   14ede:	e107      	b.n	150f0 <__aeabi_dadd+0x288>
   14ee0:	2d1f      	cmp	r5, #31
   14ee2:	dd00      	ble.n	14ee6 <__aeabi_dadd+0x7e>
   14ee4:	e138      	b.n	15158 <__aeabi_dadd+0x2f0>
   14ee6:	2020      	movs	r0, #32
   14ee8:	1b43      	subs	r3, r0, r5
   14eea:	469a      	mov	sl, r3
   14eec:	000b      	movs	r3, r1
   14eee:	4650      	mov	r0, sl
   14ef0:	4083      	lsls	r3, r0
   14ef2:	4699      	mov	r9, r3
   14ef4:	0013      	movs	r3, r2
   14ef6:	4648      	mov	r0, r9
   14ef8:	40eb      	lsrs	r3, r5
   14efa:	4318      	orrs	r0, r3
   14efc:	0003      	movs	r3, r0
   14efe:	4650      	mov	r0, sl
   14f00:	4082      	lsls	r2, r0
   14f02:	1e50      	subs	r0, r2, #1
   14f04:	4182      	sbcs	r2, r0
   14f06:	40e9      	lsrs	r1, r5
   14f08:	431a      	orrs	r2, r3
   14f0a:	1aba      	subs	r2, r7, r2
   14f0c:	1a61      	subs	r1, r4, r1
   14f0e:	4297      	cmp	r7, r2
   14f10:	41a4      	sbcs	r4, r4
   14f12:	0017      	movs	r7, r2
   14f14:	4264      	negs	r4, r4
   14f16:	1b0c      	subs	r4, r1, r4
   14f18:	0223      	lsls	r3, r4, #8
   14f1a:	d562      	bpl.n	14fe2 <__aeabi_dadd+0x17a>
   14f1c:	0264      	lsls	r4, r4, #9
   14f1e:	0a65      	lsrs	r5, r4, #9
   14f20:	2d00      	cmp	r5, #0
   14f22:	d100      	bne.n	14f26 <__aeabi_dadd+0xbe>
   14f24:	e0df      	b.n	150e6 <__aeabi_dadd+0x27e>
   14f26:	0028      	movs	r0, r5
   14f28:	f001 fe02 	bl	16b30 <__clzsi2>
   14f2c:	0003      	movs	r3, r0
   14f2e:	3b08      	subs	r3, #8
   14f30:	2b1f      	cmp	r3, #31
   14f32:	dd00      	ble.n	14f36 <__aeabi_dadd+0xce>
   14f34:	e0d2      	b.n	150dc <__aeabi_dadd+0x274>
   14f36:	2220      	movs	r2, #32
   14f38:	003c      	movs	r4, r7
   14f3a:	1ad2      	subs	r2, r2, r3
   14f3c:	409d      	lsls	r5, r3
   14f3e:	40d4      	lsrs	r4, r2
   14f40:	409f      	lsls	r7, r3
   14f42:	4325      	orrs	r5, r4
   14f44:	429e      	cmp	r6, r3
   14f46:	dd00      	ble.n	14f4a <__aeabi_dadd+0xe2>
   14f48:	e0c4      	b.n	150d4 <__aeabi_dadd+0x26c>
   14f4a:	1b9e      	subs	r6, r3, r6
   14f4c:	1c73      	adds	r3, r6, #1
   14f4e:	2b1f      	cmp	r3, #31
   14f50:	dd00      	ble.n	14f54 <__aeabi_dadd+0xec>
   14f52:	e0f1      	b.n	15138 <__aeabi_dadd+0x2d0>
   14f54:	2220      	movs	r2, #32
   14f56:	0038      	movs	r0, r7
   14f58:	0029      	movs	r1, r5
   14f5a:	1ad2      	subs	r2, r2, r3
   14f5c:	40d8      	lsrs	r0, r3
   14f5e:	4091      	lsls	r1, r2
   14f60:	4097      	lsls	r7, r2
   14f62:	002c      	movs	r4, r5
   14f64:	4301      	orrs	r1, r0
   14f66:	1e78      	subs	r0, r7, #1
   14f68:	4187      	sbcs	r7, r0
   14f6a:	40dc      	lsrs	r4, r3
   14f6c:	2600      	movs	r6, #0
   14f6e:	430f      	orrs	r7, r1
   14f70:	077b      	lsls	r3, r7, #29
   14f72:	d009      	beq.n	14f88 <__aeabi_dadd+0x120>
   14f74:	230f      	movs	r3, #15
   14f76:	403b      	ands	r3, r7
   14f78:	2b04      	cmp	r3, #4
   14f7a:	d005      	beq.n	14f88 <__aeabi_dadd+0x120>
   14f7c:	1d3b      	adds	r3, r7, #4
   14f7e:	42bb      	cmp	r3, r7
   14f80:	41bf      	sbcs	r7, r7
   14f82:	427f      	negs	r7, r7
   14f84:	19e4      	adds	r4, r4, r7
   14f86:	001f      	movs	r7, r3
   14f88:	0223      	lsls	r3, r4, #8
   14f8a:	d52c      	bpl.n	14fe6 <__aeabi_dadd+0x17e>
   14f8c:	4b96      	ldr	r3, [pc, #600]	; (151e8 <__aeabi_dadd+0x380>)
   14f8e:	3601      	adds	r6, #1
   14f90:	429e      	cmp	r6, r3
   14f92:	d100      	bne.n	14f96 <__aeabi_dadd+0x12e>
   14f94:	e09a      	b.n	150cc <__aeabi_dadd+0x264>
   14f96:	4645      	mov	r5, r8
   14f98:	4b94      	ldr	r3, [pc, #592]	; (151ec <__aeabi_dadd+0x384>)
   14f9a:	08ff      	lsrs	r7, r7, #3
   14f9c:	401c      	ands	r4, r3
   14f9e:	0760      	lsls	r0, r4, #29
   14fa0:	0576      	lsls	r6, r6, #21
   14fa2:	0264      	lsls	r4, r4, #9
   14fa4:	4307      	orrs	r7, r0
   14fa6:	0b24      	lsrs	r4, r4, #12
   14fa8:	0d76      	lsrs	r6, r6, #21
   14faa:	2100      	movs	r1, #0
   14fac:	0324      	lsls	r4, r4, #12
   14fae:	0b23      	lsrs	r3, r4, #12
   14fb0:	0d0c      	lsrs	r4, r1, #20
   14fb2:	4a8f      	ldr	r2, [pc, #572]	; (151f0 <__aeabi_dadd+0x388>)
   14fb4:	0524      	lsls	r4, r4, #20
   14fb6:	431c      	orrs	r4, r3
   14fb8:	4014      	ands	r4, r2
   14fba:	0533      	lsls	r3, r6, #20
   14fbc:	4323      	orrs	r3, r4
   14fbe:	005b      	lsls	r3, r3, #1
   14fc0:	07ed      	lsls	r5, r5, #31
   14fc2:	085b      	lsrs	r3, r3, #1
   14fc4:	432b      	orrs	r3, r5
   14fc6:	0038      	movs	r0, r7
   14fc8:	0019      	movs	r1, r3
   14fca:	bc3c      	pop	{r2, r3, r4, r5}
   14fcc:	4690      	mov	r8, r2
   14fce:	4699      	mov	r9, r3
   14fd0:	46a2      	mov	sl, r4
   14fd2:	46ab      	mov	fp, r5
   14fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14fd6:	4664      	mov	r4, ip
   14fd8:	4304      	orrs	r4, r0
   14fda:	d100      	bne.n	14fde <__aeabi_dadd+0x176>
   14fdc:	e211      	b.n	15402 <__aeabi_dadd+0x59a>
   14fde:	0004      	movs	r4, r0
   14fe0:	4667      	mov	r7, ip
   14fe2:	077b      	lsls	r3, r7, #29
   14fe4:	d1c6      	bne.n	14f74 <__aeabi_dadd+0x10c>
   14fe6:	4645      	mov	r5, r8
   14fe8:	0760      	lsls	r0, r4, #29
   14fea:	08ff      	lsrs	r7, r7, #3
   14fec:	4307      	orrs	r7, r0
   14fee:	08e4      	lsrs	r4, r4, #3
   14ff0:	4b7d      	ldr	r3, [pc, #500]	; (151e8 <__aeabi_dadd+0x380>)
   14ff2:	429e      	cmp	r6, r3
   14ff4:	d030      	beq.n	15058 <__aeabi_dadd+0x1f0>
   14ff6:	0324      	lsls	r4, r4, #12
   14ff8:	0576      	lsls	r6, r6, #21
   14ffa:	0b24      	lsrs	r4, r4, #12
   14ffc:	0d76      	lsrs	r6, r6, #21
   14ffe:	e7d4      	b.n	14faa <__aeabi_dadd+0x142>
   15000:	1a33      	subs	r3, r6, r0
   15002:	469a      	mov	sl, r3
   15004:	2b00      	cmp	r3, #0
   15006:	dd78      	ble.n	150fa <__aeabi_dadd+0x292>
   15008:	2800      	cmp	r0, #0
   1500a:	d031      	beq.n	15070 <__aeabi_dadd+0x208>
   1500c:	4876      	ldr	r0, [pc, #472]	; (151e8 <__aeabi_dadd+0x380>)
   1500e:	4286      	cmp	r6, r0
   15010:	d0ae      	beq.n	14f70 <__aeabi_dadd+0x108>
   15012:	2080      	movs	r0, #128	; 0x80
   15014:	0400      	lsls	r0, r0, #16
   15016:	4301      	orrs	r1, r0
   15018:	4653      	mov	r3, sl
   1501a:	2b38      	cmp	r3, #56	; 0x38
   1501c:	dc00      	bgt.n	15020 <__aeabi_dadd+0x1b8>
   1501e:	e0e9      	b.n	151f4 <__aeabi_dadd+0x38c>
   15020:	430a      	orrs	r2, r1
   15022:	1e51      	subs	r1, r2, #1
   15024:	418a      	sbcs	r2, r1
   15026:	2100      	movs	r1, #0
   15028:	19d2      	adds	r2, r2, r7
   1502a:	42ba      	cmp	r2, r7
   1502c:	41bf      	sbcs	r7, r7
   1502e:	1909      	adds	r1, r1, r4
   15030:	427c      	negs	r4, r7
   15032:	0017      	movs	r7, r2
   15034:	190c      	adds	r4, r1, r4
   15036:	0223      	lsls	r3, r4, #8
   15038:	d5d3      	bpl.n	14fe2 <__aeabi_dadd+0x17a>
   1503a:	4b6b      	ldr	r3, [pc, #428]	; (151e8 <__aeabi_dadd+0x380>)
   1503c:	3601      	adds	r6, #1
   1503e:	429e      	cmp	r6, r3
   15040:	d100      	bne.n	15044 <__aeabi_dadd+0x1dc>
   15042:	e13a      	b.n	152ba <__aeabi_dadd+0x452>
   15044:	2001      	movs	r0, #1
   15046:	4b69      	ldr	r3, [pc, #420]	; (151ec <__aeabi_dadd+0x384>)
   15048:	401c      	ands	r4, r3
   1504a:	087b      	lsrs	r3, r7, #1
   1504c:	4007      	ands	r7, r0
   1504e:	431f      	orrs	r7, r3
   15050:	07e0      	lsls	r0, r4, #31
   15052:	4307      	orrs	r7, r0
   15054:	0864      	lsrs	r4, r4, #1
   15056:	e78b      	b.n	14f70 <__aeabi_dadd+0x108>
   15058:	0023      	movs	r3, r4
   1505a:	433b      	orrs	r3, r7
   1505c:	d100      	bne.n	15060 <__aeabi_dadd+0x1f8>
   1505e:	e1cb      	b.n	153f8 <__aeabi_dadd+0x590>
   15060:	2280      	movs	r2, #128	; 0x80
   15062:	0312      	lsls	r2, r2, #12
   15064:	4314      	orrs	r4, r2
   15066:	0324      	lsls	r4, r4, #12
   15068:	0b24      	lsrs	r4, r4, #12
   1506a:	e79e      	b.n	14faa <__aeabi_dadd+0x142>
   1506c:	002e      	movs	r6, r5
   1506e:	e77f      	b.n	14f70 <__aeabi_dadd+0x108>
   15070:	0008      	movs	r0, r1
   15072:	4310      	orrs	r0, r2
   15074:	d100      	bne.n	15078 <__aeabi_dadd+0x210>
   15076:	e0b4      	b.n	151e2 <__aeabi_dadd+0x37a>
   15078:	1e58      	subs	r0, r3, #1
   1507a:	2800      	cmp	r0, #0
   1507c:	d000      	beq.n	15080 <__aeabi_dadd+0x218>
   1507e:	e0de      	b.n	1523e <__aeabi_dadd+0x3d6>
   15080:	18ba      	adds	r2, r7, r2
   15082:	42ba      	cmp	r2, r7
   15084:	419b      	sbcs	r3, r3
   15086:	1864      	adds	r4, r4, r1
   15088:	425b      	negs	r3, r3
   1508a:	18e4      	adds	r4, r4, r3
   1508c:	0017      	movs	r7, r2
   1508e:	2601      	movs	r6, #1
   15090:	0223      	lsls	r3, r4, #8
   15092:	d5a6      	bpl.n	14fe2 <__aeabi_dadd+0x17a>
   15094:	2602      	movs	r6, #2
   15096:	e7d5      	b.n	15044 <__aeabi_dadd+0x1dc>
   15098:	2d00      	cmp	r5, #0
   1509a:	d16e      	bne.n	1517a <__aeabi_dadd+0x312>
   1509c:	1c70      	adds	r0, r6, #1
   1509e:	0540      	lsls	r0, r0, #21
   150a0:	0d40      	lsrs	r0, r0, #21
   150a2:	2801      	cmp	r0, #1
   150a4:	dc00      	bgt.n	150a8 <__aeabi_dadd+0x240>
   150a6:	e0f9      	b.n	1529c <__aeabi_dadd+0x434>
   150a8:	1ab8      	subs	r0, r7, r2
   150aa:	4684      	mov	ip, r0
   150ac:	4287      	cmp	r7, r0
   150ae:	4180      	sbcs	r0, r0
   150b0:	1ae5      	subs	r5, r4, r3
   150b2:	4240      	negs	r0, r0
   150b4:	1a2d      	subs	r5, r5, r0
   150b6:	0228      	lsls	r0, r5, #8
   150b8:	d400      	bmi.n	150bc <__aeabi_dadd+0x254>
   150ba:	e089      	b.n	151d0 <__aeabi_dadd+0x368>
   150bc:	1bd7      	subs	r7, r2, r7
   150be:	42ba      	cmp	r2, r7
   150c0:	4192      	sbcs	r2, r2
   150c2:	1b1c      	subs	r4, r3, r4
   150c4:	4252      	negs	r2, r2
   150c6:	1aa5      	subs	r5, r4, r2
   150c8:	46d8      	mov	r8, fp
   150ca:	e729      	b.n	14f20 <__aeabi_dadd+0xb8>
   150cc:	4645      	mov	r5, r8
   150ce:	2400      	movs	r4, #0
   150d0:	2700      	movs	r7, #0
   150d2:	e76a      	b.n	14faa <__aeabi_dadd+0x142>
   150d4:	4c45      	ldr	r4, [pc, #276]	; (151ec <__aeabi_dadd+0x384>)
   150d6:	1af6      	subs	r6, r6, r3
   150d8:	402c      	ands	r4, r5
   150da:	e749      	b.n	14f70 <__aeabi_dadd+0x108>
   150dc:	003d      	movs	r5, r7
   150de:	3828      	subs	r0, #40	; 0x28
   150e0:	4085      	lsls	r5, r0
   150e2:	2700      	movs	r7, #0
   150e4:	e72e      	b.n	14f44 <__aeabi_dadd+0xdc>
   150e6:	0038      	movs	r0, r7
   150e8:	f001 fd22 	bl	16b30 <__clzsi2>
   150ec:	3020      	adds	r0, #32
   150ee:	e71d      	b.n	14f2c <__aeabi_dadd+0xc4>
   150f0:	430a      	orrs	r2, r1
   150f2:	1e51      	subs	r1, r2, #1
   150f4:	418a      	sbcs	r2, r1
   150f6:	2100      	movs	r1, #0
   150f8:	e707      	b.n	14f0a <__aeabi_dadd+0xa2>
   150fa:	2b00      	cmp	r3, #0
   150fc:	d000      	beq.n	15100 <__aeabi_dadd+0x298>
   150fe:	e0f3      	b.n	152e8 <__aeabi_dadd+0x480>
   15100:	1c70      	adds	r0, r6, #1
   15102:	0543      	lsls	r3, r0, #21
   15104:	0d5b      	lsrs	r3, r3, #21
   15106:	2b01      	cmp	r3, #1
   15108:	dc00      	bgt.n	1510c <__aeabi_dadd+0x2a4>
   1510a:	e0ad      	b.n	15268 <__aeabi_dadd+0x400>
   1510c:	4b36      	ldr	r3, [pc, #216]	; (151e8 <__aeabi_dadd+0x380>)
   1510e:	4298      	cmp	r0, r3
   15110:	d100      	bne.n	15114 <__aeabi_dadd+0x2ac>
   15112:	e0d1      	b.n	152b8 <__aeabi_dadd+0x450>
   15114:	18ba      	adds	r2, r7, r2
   15116:	42ba      	cmp	r2, r7
   15118:	41bf      	sbcs	r7, r7
   1511a:	1864      	adds	r4, r4, r1
   1511c:	427f      	negs	r7, r7
   1511e:	19e4      	adds	r4, r4, r7
   15120:	07e7      	lsls	r7, r4, #31
   15122:	0852      	lsrs	r2, r2, #1
   15124:	4317      	orrs	r7, r2
   15126:	0864      	lsrs	r4, r4, #1
   15128:	0006      	movs	r6, r0
   1512a:	e721      	b.n	14f70 <__aeabi_dadd+0x108>
   1512c:	482e      	ldr	r0, [pc, #184]	; (151e8 <__aeabi_dadd+0x380>)
   1512e:	4285      	cmp	r5, r0
   15130:	d100      	bne.n	15134 <__aeabi_dadd+0x2cc>
   15132:	e093      	b.n	1525c <__aeabi_dadd+0x3f4>
   15134:	001d      	movs	r5, r3
   15136:	e6d0      	b.n	14eda <__aeabi_dadd+0x72>
   15138:	0029      	movs	r1, r5
   1513a:	3e1f      	subs	r6, #31
   1513c:	40f1      	lsrs	r1, r6
   1513e:	2b20      	cmp	r3, #32
   15140:	d100      	bne.n	15144 <__aeabi_dadd+0x2dc>
   15142:	e08d      	b.n	15260 <__aeabi_dadd+0x3f8>
   15144:	2240      	movs	r2, #64	; 0x40
   15146:	1ad3      	subs	r3, r2, r3
   15148:	409d      	lsls	r5, r3
   1514a:	432f      	orrs	r7, r5
   1514c:	1e7d      	subs	r5, r7, #1
   1514e:	41af      	sbcs	r7, r5
   15150:	2400      	movs	r4, #0
   15152:	430f      	orrs	r7, r1
   15154:	2600      	movs	r6, #0
   15156:	e744      	b.n	14fe2 <__aeabi_dadd+0x17a>
   15158:	002b      	movs	r3, r5
   1515a:	0008      	movs	r0, r1
   1515c:	3b20      	subs	r3, #32
   1515e:	40d8      	lsrs	r0, r3
   15160:	0003      	movs	r3, r0
   15162:	2d20      	cmp	r5, #32
   15164:	d100      	bne.n	15168 <__aeabi_dadd+0x300>
   15166:	e07d      	b.n	15264 <__aeabi_dadd+0x3fc>
   15168:	2040      	movs	r0, #64	; 0x40
   1516a:	1b45      	subs	r5, r0, r5
   1516c:	40a9      	lsls	r1, r5
   1516e:	430a      	orrs	r2, r1
   15170:	1e51      	subs	r1, r2, #1
   15172:	418a      	sbcs	r2, r1
   15174:	2100      	movs	r1, #0
   15176:	431a      	orrs	r2, r3
   15178:	e6c7      	b.n	14f0a <__aeabi_dadd+0xa2>
   1517a:	2e00      	cmp	r6, #0
   1517c:	d050      	beq.n	15220 <__aeabi_dadd+0x3b8>
   1517e:	4e1a      	ldr	r6, [pc, #104]	; (151e8 <__aeabi_dadd+0x380>)
   15180:	42b0      	cmp	r0, r6
   15182:	d057      	beq.n	15234 <__aeabi_dadd+0x3cc>
   15184:	2680      	movs	r6, #128	; 0x80
   15186:	426b      	negs	r3, r5
   15188:	4699      	mov	r9, r3
   1518a:	0436      	lsls	r6, r6, #16
   1518c:	4334      	orrs	r4, r6
   1518e:	464b      	mov	r3, r9
   15190:	2b38      	cmp	r3, #56	; 0x38
   15192:	dd00      	ble.n	15196 <__aeabi_dadd+0x32e>
   15194:	e0d6      	b.n	15344 <__aeabi_dadd+0x4dc>
   15196:	2b1f      	cmp	r3, #31
   15198:	dd00      	ble.n	1519c <__aeabi_dadd+0x334>
   1519a:	e135      	b.n	15408 <__aeabi_dadd+0x5a0>
   1519c:	2620      	movs	r6, #32
   1519e:	1af5      	subs	r5, r6, r3
   151a0:	0026      	movs	r6, r4
   151a2:	40ae      	lsls	r6, r5
   151a4:	46b2      	mov	sl, r6
   151a6:	003e      	movs	r6, r7
   151a8:	40de      	lsrs	r6, r3
   151aa:	46ac      	mov	ip, r5
   151ac:	0035      	movs	r5, r6
   151ae:	4656      	mov	r6, sl
   151b0:	432e      	orrs	r6, r5
   151b2:	4665      	mov	r5, ip
   151b4:	40af      	lsls	r7, r5
   151b6:	1e7d      	subs	r5, r7, #1
   151b8:	41af      	sbcs	r7, r5
   151ba:	40dc      	lsrs	r4, r3
   151bc:	4337      	orrs	r7, r6
   151be:	1bd7      	subs	r7, r2, r7
   151c0:	42ba      	cmp	r2, r7
   151c2:	4192      	sbcs	r2, r2
   151c4:	1b0c      	subs	r4, r1, r4
   151c6:	4252      	negs	r2, r2
   151c8:	1aa4      	subs	r4, r4, r2
   151ca:	0006      	movs	r6, r0
   151cc:	46d8      	mov	r8, fp
   151ce:	e6a3      	b.n	14f18 <__aeabi_dadd+0xb0>
   151d0:	4664      	mov	r4, ip
   151d2:	4667      	mov	r7, ip
   151d4:	432c      	orrs	r4, r5
   151d6:	d000      	beq.n	151da <__aeabi_dadd+0x372>
   151d8:	e6a2      	b.n	14f20 <__aeabi_dadd+0xb8>
   151da:	2500      	movs	r5, #0
   151dc:	2600      	movs	r6, #0
   151de:	2700      	movs	r7, #0
   151e0:	e706      	b.n	14ff0 <__aeabi_dadd+0x188>
   151e2:	001e      	movs	r6, r3
   151e4:	e6c4      	b.n	14f70 <__aeabi_dadd+0x108>
   151e6:	46c0      	nop			; (mov r8, r8)
   151e8:	000007ff 	.word	0x000007ff
   151ec:	ff7fffff 	.word	0xff7fffff
   151f0:	800fffff 	.word	0x800fffff
   151f4:	2b1f      	cmp	r3, #31
   151f6:	dc63      	bgt.n	152c0 <__aeabi_dadd+0x458>
   151f8:	2020      	movs	r0, #32
   151fa:	1ac3      	subs	r3, r0, r3
   151fc:	0008      	movs	r0, r1
   151fe:	4098      	lsls	r0, r3
   15200:	469c      	mov	ip, r3
   15202:	4683      	mov	fp, r0
   15204:	4653      	mov	r3, sl
   15206:	0010      	movs	r0, r2
   15208:	40d8      	lsrs	r0, r3
   1520a:	0003      	movs	r3, r0
   1520c:	4658      	mov	r0, fp
   1520e:	4318      	orrs	r0, r3
   15210:	4663      	mov	r3, ip
   15212:	409a      	lsls	r2, r3
   15214:	1e53      	subs	r3, r2, #1
   15216:	419a      	sbcs	r2, r3
   15218:	4653      	mov	r3, sl
   1521a:	4302      	orrs	r2, r0
   1521c:	40d9      	lsrs	r1, r3
   1521e:	e703      	b.n	15028 <__aeabi_dadd+0x1c0>
   15220:	0026      	movs	r6, r4
   15222:	433e      	orrs	r6, r7
   15224:	d006      	beq.n	15234 <__aeabi_dadd+0x3cc>
   15226:	43eb      	mvns	r3, r5
   15228:	4699      	mov	r9, r3
   1522a:	2b00      	cmp	r3, #0
   1522c:	d0c7      	beq.n	151be <__aeabi_dadd+0x356>
   1522e:	4e94      	ldr	r6, [pc, #592]	; (15480 <__aeabi_dadd+0x618>)
   15230:	42b0      	cmp	r0, r6
   15232:	d1ac      	bne.n	1518e <__aeabi_dadd+0x326>
   15234:	000c      	movs	r4, r1
   15236:	0017      	movs	r7, r2
   15238:	0006      	movs	r6, r0
   1523a:	46d8      	mov	r8, fp
   1523c:	e698      	b.n	14f70 <__aeabi_dadd+0x108>
   1523e:	4b90      	ldr	r3, [pc, #576]	; (15480 <__aeabi_dadd+0x618>)
   15240:	459a      	cmp	sl, r3
   15242:	d00b      	beq.n	1525c <__aeabi_dadd+0x3f4>
   15244:	4682      	mov	sl, r0
   15246:	e6e7      	b.n	15018 <__aeabi_dadd+0x1b0>
   15248:	2800      	cmp	r0, #0
   1524a:	d000      	beq.n	1524e <__aeabi_dadd+0x3e6>
   1524c:	e09e      	b.n	1538c <__aeabi_dadd+0x524>
   1524e:	0018      	movs	r0, r3
   15250:	4310      	orrs	r0, r2
   15252:	d100      	bne.n	15256 <__aeabi_dadd+0x3ee>
   15254:	e0e9      	b.n	1542a <__aeabi_dadd+0x5c2>
   15256:	001c      	movs	r4, r3
   15258:	0017      	movs	r7, r2
   1525a:	46d8      	mov	r8, fp
   1525c:	4e88      	ldr	r6, [pc, #544]	; (15480 <__aeabi_dadd+0x618>)
   1525e:	e687      	b.n	14f70 <__aeabi_dadd+0x108>
   15260:	2500      	movs	r5, #0
   15262:	e772      	b.n	1514a <__aeabi_dadd+0x2e2>
   15264:	2100      	movs	r1, #0
   15266:	e782      	b.n	1516e <__aeabi_dadd+0x306>
   15268:	0023      	movs	r3, r4
   1526a:	433b      	orrs	r3, r7
   1526c:	2e00      	cmp	r6, #0
   1526e:	d000      	beq.n	15272 <__aeabi_dadd+0x40a>
   15270:	e0ab      	b.n	153ca <__aeabi_dadd+0x562>
   15272:	2b00      	cmp	r3, #0
   15274:	d100      	bne.n	15278 <__aeabi_dadd+0x410>
   15276:	e0e7      	b.n	15448 <__aeabi_dadd+0x5e0>
   15278:	000b      	movs	r3, r1
   1527a:	4313      	orrs	r3, r2
   1527c:	d100      	bne.n	15280 <__aeabi_dadd+0x418>
   1527e:	e677      	b.n	14f70 <__aeabi_dadd+0x108>
   15280:	18ba      	adds	r2, r7, r2
   15282:	42ba      	cmp	r2, r7
   15284:	41bf      	sbcs	r7, r7
   15286:	1864      	adds	r4, r4, r1
   15288:	427f      	negs	r7, r7
   1528a:	19e4      	adds	r4, r4, r7
   1528c:	0223      	lsls	r3, r4, #8
   1528e:	d400      	bmi.n	15292 <__aeabi_dadd+0x42a>
   15290:	e0f2      	b.n	15478 <__aeabi_dadd+0x610>
   15292:	4b7c      	ldr	r3, [pc, #496]	; (15484 <__aeabi_dadd+0x61c>)
   15294:	0017      	movs	r7, r2
   15296:	401c      	ands	r4, r3
   15298:	0006      	movs	r6, r0
   1529a:	e669      	b.n	14f70 <__aeabi_dadd+0x108>
   1529c:	0020      	movs	r0, r4
   1529e:	4338      	orrs	r0, r7
   152a0:	2e00      	cmp	r6, #0
   152a2:	d1d1      	bne.n	15248 <__aeabi_dadd+0x3e0>
   152a4:	2800      	cmp	r0, #0
   152a6:	d15b      	bne.n	15360 <__aeabi_dadd+0x4f8>
   152a8:	001c      	movs	r4, r3
   152aa:	4314      	orrs	r4, r2
   152ac:	d100      	bne.n	152b0 <__aeabi_dadd+0x448>
   152ae:	e0a8      	b.n	15402 <__aeabi_dadd+0x59a>
   152b0:	001c      	movs	r4, r3
   152b2:	0017      	movs	r7, r2
   152b4:	46d8      	mov	r8, fp
   152b6:	e65b      	b.n	14f70 <__aeabi_dadd+0x108>
   152b8:	0006      	movs	r6, r0
   152ba:	2400      	movs	r4, #0
   152bc:	2700      	movs	r7, #0
   152be:	e697      	b.n	14ff0 <__aeabi_dadd+0x188>
   152c0:	4650      	mov	r0, sl
   152c2:	000b      	movs	r3, r1
   152c4:	3820      	subs	r0, #32
   152c6:	40c3      	lsrs	r3, r0
   152c8:	4699      	mov	r9, r3
   152ca:	4653      	mov	r3, sl
   152cc:	2b20      	cmp	r3, #32
   152ce:	d100      	bne.n	152d2 <__aeabi_dadd+0x46a>
   152d0:	e095      	b.n	153fe <__aeabi_dadd+0x596>
   152d2:	2340      	movs	r3, #64	; 0x40
   152d4:	4650      	mov	r0, sl
   152d6:	1a1b      	subs	r3, r3, r0
   152d8:	4099      	lsls	r1, r3
   152da:	430a      	orrs	r2, r1
   152dc:	1e51      	subs	r1, r2, #1
   152de:	418a      	sbcs	r2, r1
   152e0:	464b      	mov	r3, r9
   152e2:	2100      	movs	r1, #0
   152e4:	431a      	orrs	r2, r3
   152e6:	e69f      	b.n	15028 <__aeabi_dadd+0x1c0>
   152e8:	2e00      	cmp	r6, #0
   152ea:	d130      	bne.n	1534e <__aeabi_dadd+0x4e6>
   152ec:	0026      	movs	r6, r4
   152ee:	433e      	orrs	r6, r7
   152f0:	d067      	beq.n	153c2 <__aeabi_dadd+0x55a>
   152f2:	43db      	mvns	r3, r3
   152f4:	469a      	mov	sl, r3
   152f6:	2b00      	cmp	r3, #0
   152f8:	d01c      	beq.n	15334 <__aeabi_dadd+0x4cc>
   152fa:	4e61      	ldr	r6, [pc, #388]	; (15480 <__aeabi_dadd+0x618>)
   152fc:	42b0      	cmp	r0, r6
   152fe:	d060      	beq.n	153c2 <__aeabi_dadd+0x55a>
   15300:	4653      	mov	r3, sl
   15302:	2b38      	cmp	r3, #56	; 0x38
   15304:	dd00      	ble.n	15308 <__aeabi_dadd+0x4a0>
   15306:	e096      	b.n	15436 <__aeabi_dadd+0x5ce>
   15308:	2b1f      	cmp	r3, #31
   1530a:	dd00      	ble.n	1530e <__aeabi_dadd+0x4a6>
   1530c:	e09f      	b.n	1544e <__aeabi_dadd+0x5e6>
   1530e:	2620      	movs	r6, #32
   15310:	1af3      	subs	r3, r6, r3
   15312:	0026      	movs	r6, r4
   15314:	409e      	lsls	r6, r3
   15316:	469c      	mov	ip, r3
   15318:	46b3      	mov	fp, r6
   1531a:	4653      	mov	r3, sl
   1531c:	003e      	movs	r6, r7
   1531e:	40de      	lsrs	r6, r3
   15320:	0033      	movs	r3, r6
   15322:	465e      	mov	r6, fp
   15324:	431e      	orrs	r6, r3
   15326:	4663      	mov	r3, ip
   15328:	409f      	lsls	r7, r3
   1532a:	1e7b      	subs	r3, r7, #1
   1532c:	419f      	sbcs	r7, r3
   1532e:	4653      	mov	r3, sl
   15330:	40dc      	lsrs	r4, r3
   15332:	4337      	orrs	r7, r6
   15334:	18bf      	adds	r7, r7, r2
   15336:	4297      	cmp	r7, r2
   15338:	4192      	sbcs	r2, r2
   1533a:	1864      	adds	r4, r4, r1
   1533c:	4252      	negs	r2, r2
   1533e:	18a4      	adds	r4, r4, r2
   15340:	0006      	movs	r6, r0
   15342:	e678      	b.n	15036 <__aeabi_dadd+0x1ce>
   15344:	4327      	orrs	r7, r4
   15346:	1e7c      	subs	r4, r7, #1
   15348:	41a7      	sbcs	r7, r4
   1534a:	2400      	movs	r4, #0
   1534c:	e737      	b.n	151be <__aeabi_dadd+0x356>
   1534e:	4e4c      	ldr	r6, [pc, #304]	; (15480 <__aeabi_dadd+0x618>)
   15350:	42b0      	cmp	r0, r6
   15352:	d036      	beq.n	153c2 <__aeabi_dadd+0x55a>
   15354:	2680      	movs	r6, #128	; 0x80
   15356:	425b      	negs	r3, r3
   15358:	0436      	lsls	r6, r6, #16
   1535a:	469a      	mov	sl, r3
   1535c:	4334      	orrs	r4, r6
   1535e:	e7cf      	b.n	15300 <__aeabi_dadd+0x498>
   15360:	0018      	movs	r0, r3
   15362:	4310      	orrs	r0, r2
   15364:	d100      	bne.n	15368 <__aeabi_dadd+0x500>
   15366:	e603      	b.n	14f70 <__aeabi_dadd+0x108>
   15368:	1ab8      	subs	r0, r7, r2
   1536a:	4684      	mov	ip, r0
   1536c:	4567      	cmp	r7, ip
   1536e:	41ad      	sbcs	r5, r5
   15370:	1ae0      	subs	r0, r4, r3
   15372:	426d      	negs	r5, r5
   15374:	1b40      	subs	r0, r0, r5
   15376:	0205      	lsls	r5, r0, #8
   15378:	d400      	bmi.n	1537c <__aeabi_dadd+0x514>
   1537a:	e62c      	b.n	14fd6 <__aeabi_dadd+0x16e>
   1537c:	1bd7      	subs	r7, r2, r7
   1537e:	42ba      	cmp	r2, r7
   15380:	4192      	sbcs	r2, r2
   15382:	1b1c      	subs	r4, r3, r4
   15384:	4252      	negs	r2, r2
   15386:	1aa4      	subs	r4, r4, r2
   15388:	46d8      	mov	r8, fp
   1538a:	e5f1      	b.n	14f70 <__aeabi_dadd+0x108>
   1538c:	0018      	movs	r0, r3
   1538e:	4310      	orrs	r0, r2
   15390:	d100      	bne.n	15394 <__aeabi_dadd+0x52c>
   15392:	e763      	b.n	1525c <__aeabi_dadd+0x3f4>
   15394:	08f8      	lsrs	r0, r7, #3
   15396:	0767      	lsls	r7, r4, #29
   15398:	4307      	orrs	r7, r0
   1539a:	2080      	movs	r0, #128	; 0x80
   1539c:	08e4      	lsrs	r4, r4, #3
   1539e:	0300      	lsls	r0, r0, #12
   153a0:	4204      	tst	r4, r0
   153a2:	d008      	beq.n	153b6 <__aeabi_dadd+0x54e>
   153a4:	08dd      	lsrs	r5, r3, #3
   153a6:	4205      	tst	r5, r0
   153a8:	d105      	bne.n	153b6 <__aeabi_dadd+0x54e>
   153aa:	08d2      	lsrs	r2, r2, #3
   153ac:	0759      	lsls	r1, r3, #29
   153ae:	4311      	orrs	r1, r2
   153b0:	000f      	movs	r7, r1
   153b2:	002c      	movs	r4, r5
   153b4:	46d8      	mov	r8, fp
   153b6:	0f7b      	lsrs	r3, r7, #29
   153b8:	00e4      	lsls	r4, r4, #3
   153ba:	431c      	orrs	r4, r3
   153bc:	00ff      	lsls	r7, r7, #3
   153be:	4e30      	ldr	r6, [pc, #192]	; (15480 <__aeabi_dadd+0x618>)
   153c0:	e5d6      	b.n	14f70 <__aeabi_dadd+0x108>
   153c2:	000c      	movs	r4, r1
   153c4:	0017      	movs	r7, r2
   153c6:	0006      	movs	r6, r0
   153c8:	e5d2      	b.n	14f70 <__aeabi_dadd+0x108>
   153ca:	2b00      	cmp	r3, #0
   153cc:	d038      	beq.n	15440 <__aeabi_dadd+0x5d8>
   153ce:	000b      	movs	r3, r1
   153d0:	4313      	orrs	r3, r2
   153d2:	d100      	bne.n	153d6 <__aeabi_dadd+0x56e>
   153d4:	e742      	b.n	1525c <__aeabi_dadd+0x3f4>
   153d6:	08f8      	lsrs	r0, r7, #3
   153d8:	0767      	lsls	r7, r4, #29
   153da:	4307      	orrs	r7, r0
   153dc:	2080      	movs	r0, #128	; 0x80
   153de:	08e4      	lsrs	r4, r4, #3
   153e0:	0300      	lsls	r0, r0, #12
   153e2:	4204      	tst	r4, r0
   153e4:	d0e7      	beq.n	153b6 <__aeabi_dadd+0x54e>
   153e6:	08cb      	lsrs	r3, r1, #3
   153e8:	4203      	tst	r3, r0
   153ea:	d1e4      	bne.n	153b6 <__aeabi_dadd+0x54e>
   153ec:	08d2      	lsrs	r2, r2, #3
   153ee:	0749      	lsls	r1, r1, #29
   153f0:	4311      	orrs	r1, r2
   153f2:	000f      	movs	r7, r1
   153f4:	001c      	movs	r4, r3
   153f6:	e7de      	b.n	153b6 <__aeabi_dadd+0x54e>
   153f8:	2700      	movs	r7, #0
   153fa:	2400      	movs	r4, #0
   153fc:	e5d5      	b.n	14faa <__aeabi_dadd+0x142>
   153fe:	2100      	movs	r1, #0
   15400:	e76b      	b.n	152da <__aeabi_dadd+0x472>
   15402:	2500      	movs	r5, #0
   15404:	2700      	movs	r7, #0
   15406:	e5f3      	b.n	14ff0 <__aeabi_dadd+0x188>
   15408:	464e      	mov	r6, r9
   1540a:	0025      	movs	r5, r4
   1540c:	3e20      	subs	r6, #32
   1540e:	40f5      	lsrs	r5, r6
   15410:	464b      	mov	r3, r9
   15412:	002e      	movs	r6, r5
   15414:	2b20      	cmp	r3, #32
   15416:	d02d      	beq.n	15474 <__aeabi_dadd+0x60c>
   15418:	2540      	movs	r5, #64	; 0x40
   1541a:	1aed      	subs	r5, r5, r3
   1541c:	40ac      	lsls	r4, r5
   1541e:	4327      	orrs	r7, r4
   15420:	1e7c      	subs	r4, r7, #1
   15422:	41a7      	sbcs	r7, r4
   15424:	2400      	movs	r4, #0
   15426:	4337      	orrs	r7, r6
   15428:	e6c9      	b.n	151be <__aeabi_dadd+0x356>
   1542a:	2480      	movs	r4, #128	; 0x80
   1542c:	2500      	movs	r5, #0
   1542e:	0324      	lsls	r4, r4, #12
   15430:	4e13      	ldr	r6, [pc, #76]	; (15480 <__aeabi_dadd+0x618>)
   15432:	2700      	movs	r7, #0
   15434:	e5dc      	b.n	14ff0 <__aeabi_dadd+0x188>
   15436:	4327      	orrs	r7, r4
   15438:	1e7c      	subs	r4, r7, #1
   1543a:	41a7      	sbcs	r7, r4
   1543c:	2400      	movs	r4, #0
   1543e:	e779      	b.n	15334 <__aeabi_dadd+0x4cc>
   15440:	000c      	movs	r4, r1
   15442:	0017      	movs	r7, r2
   15444:	4e0e      	ldr	r6, [pc, #56]	; (15480 <__aeabi_dadd+0x618>)
   15446:	e593      	b.n	14f70 <__aeabi_dadd+0x108>
   15448:	000c      	movs	r4, r1
   1544a:	0017      	movs	r7, r2
   1544c:	e590      	b.n	14f70 <__aeabi_dadd+0x108>
   1544e:	4656      	mov	r6, sl
   15450:	0023      	movs	r3, r4
   15452:	3e20      	subs	r6, #32
   15454:	40f3      	lsrs	r3, r6
   15456:	4699      	mov	r9, r3
   15458:	4653      	mov	r3, sl
   1545a:	2b20      	cmp	r3, #32
   1545c:	d00e      	beq.n	1547c <__aeabi_dadd+0x614>
   1545e:	2340      	movs	r3, #64	; 0x40
   15460:	4656      	mov	r6, sl
   15462:	1b9b      	subs	r3, r3, r6
   15464:	409c      	lsls	r4, r3
   15466:	4327      	orrs	r7, r4
   15468:	1e7c      	subs	r4, r7, #1
   1546a:	41a7      	sbcs	r7, r4
   1546c:	464b      	mov	r3, r9
   1546e:	2400      	movs	r4, #0
   15470:	431f      	orrs	r7, r3
   15472:	e75f      	b.n	15334 <__aeabi_dadd+0x4cc>
   15474:	2400      	movs	r4, #0
   15476:	e7d2      	b.n	1541e <__aeabi_dadd+0x5b6>
   15478:	0017      	movs	r7, r2
   1547a:	e5b2      	b.n	14fe2 <__aeabi_dadd+0x17a>
   1547c:	2400      	movs	r4, #0
   1547e:	e7f2      	b.n	15466 <__aeabi_dadd+0x5fe>
   15480:	000007ff 	.word	0x000007ff
   15484:	ff7fffff 	.word	0xff7fffff

00015488 <__aeabi_ddiv>:
   15488:	b5f0      	push	{r4, r5, r6, r7, lr}
   1548a:	4657      	mov	r7, sl
   1548c:	4645      	mov	r5, r8
   1548e:	46de      	mov	lr, fp
   15490:	464e      	mov	r6, r9
   15492:	b5e0      	push	{r5, r6, r7, lr}
   15494:	004c      	lsls	r4, r1, #1
   15496:	030e      	lsls	r6, r1, #12
   15498:	b087      	sub	sp, #28
   1549a:	4683      	mov	fp, r0
   1549c:	4692      	mov	sl, r2
   1549e:	001d      	movs	r5, r3
   154a0:	4680      	mov	r8, r0
   154a2:	0b36      	lsrs	r6, r6, #12
   154a4:	0d64      	lsrs	r4, r4, #21
   154a6:	0fcf      	lsrs	r7, r1, #31
   154a8:	2c00      	cmp	r4, #0
   154aa:	d04f      	beq.n	1554c <__aeabi_ddiv+0xc4>
   154ac:	4b6f      	ldr	r3, [pc, #444]	; (1566c <__aeabi_ddiv+0x1e4>)
   154ae:	429c      	cmp	r4, r3
   154b0:	d035      	beq.n	1551e <__aeabi_ddiv+0x96>
   154b2:	2380      	movs	r3, #128	; 0x80
   154b4:	0f42      	lsrs	r2, r0, #29
   154b6:	041b      	lsls	r3, r3, #16
   154b8:	00f6      	lsls	r6, r6, #3
   154ba:	4313      	orrs	r3, r2
   154bc:	4333      	orrs	r3, r6
   154be:	4699      	mov	r9, r3
   154c0:	00c3      	lsls	r3, r0, #3
   154c2:	4698      	mov	r8, r3
   154c4:	4b6a      	ldr	r3, [pc, #424]	; (15670 <__aeabi_ddiv+0x1e8>)
   154c6:	2600      	movs	r6, #0
   154c8:	469c      	mov	ip, r3
   154ca:	2300      	movs	r3, #0
   154cc:	4464      	add	r4, ip
   154ce:	9303      	str	r3, [sp, #12]
   154d0:	032b      	lsls	r3, r5, #12
   154d2:	0b1b      	lsrs	r3, r3, #12
   154d4:	469b      	mov	fp, r3
   154d6:	006b      	lsls	r3, r5, #1
   154d8:	0fed      	lsrs	r5, r5, #31
   154da:	4650      	mov	r0, sl
   154dc:	0d5b      	lsrs	r3, r3, #21
   154de:	9501      	str	r5, [sp, #4]
   154e0:	d05e      	beq.n	155a0 <__aeabi_ddiv+0x118>
   154e2:	4a62      	ldr	r2, [pc, #392]	; (1566c <__aeabi_ddiv+0x1e4>)
   154e4:	4293      	cmp	r3, r2
   154e6:	d053      	beq.n	15590 <__aeabi_ddiv+0x108>
   154e8:	465a      	mov	r2, fp
   154ea:	00d1      	lsls	r1, r2, #3
   154ec:	2280      	movs	r2, #128	; 0x80
   154ee:	0f40      	lsrs	r0, r0, #29
   154f0:	0412      	lsls	r2, r2, #16
   154f2:	4302      	orrs	r2, r0
   154f4:	430a      	orrs	r2, r1
   154f6:	4693      	mov	fp, r2
   154f8:	4652      	mov	r2, sl
   154fa:	00d1      	lsls	r1, r2, #3
   154fc:	4a5c      	ldr	r2, [pc, #368]	; (15670 <__aeabi_ddiv+0x1e8>)
   154fe:	4694      	mov	ip, r2
   15500:	2200      	movs	r2, #0
   15502:	4463      	add	r3, ip
   15504:	0038      	movs	r0, r7
   15506:	4068      	eors	r0, r5
   15508:	4684      	mov	ip, r0
   1550a:	9002      	str	r0, [sp, #8]
   1550c:	1ae4      	subs	r4, r4, r3
   1550e:	4316      	orrs	r6, r2
   15510:	2e0f      	cmp	r6, #15
   15512:	d900      	bls.n	15516 <__aeabi_ddiv+0x8e>
   15514:	e0b4      	b.n	15680 <__aeabi_ddiv+0x1f8>
   15516:	4b57      	ldr	r3, [pc, #348]	; (15674 <__aeabi_ddiv+0x1ec>)
   15518:	00b6      	lsls	r6, r6, #2
   1551a:	599b      	ldr	r3, [r3, r6]
   1551c:	469f      	mov	pc, r3
   1551e:	0003      	movs	r3, r0
   15520:	4333      	orrs	r3, r6
   15522:	4699      	mov	r9, r3
   15524:	d16c      	bne.n	15600 <__aeabi_ddiv+0x178>
   15526:	2300      	movs	r3, #0
   15528:	4698      	mov	r8, r3
   1552a:	3302      	adds	r3, #2
   1552c:	2608      	movs	r6, #8
   1552e:	9303      	str	r3, [sp, #12]
   15530:	e7ce      	b.n	154d0 <__aeabi_ddiv+0x48>
   15532:	46cb      	mov	fp, r9
   15534:	4641      	mov	r1, r8
   15536:	9a03      	ldr	r2, [sp, #12]
   15538:	9701      	str	r7, [sp, #4]
   1553a:	2a02      	cmp	r2, #2
   1553c:	d165      	bne.n	1560a <__aeabi_ddiv+0x182>
   1553e:	9b01      	ldr	r3, [sp, #4]
   15540:	4c4a      	ldr	r4, [pc, #296]	; (1566c <__aeabi_ddiv+0x1e4>)
   15542:	469c      	mov	ip, r3
   15544:	2300      	movs	r3, #0
   15546:	2200      	movs	r2, #0
   15548:	4698      	mov	r8, r3
   1554a:	e06b      	b.n	15624 <__aeabi_ddiv+0x19c>
   1554c:	0003      	movs	r3, r0
   1554e:	4333      	orrs	r3, r6
   15550:	4699      	mov	r9, r3
   15552:	d04e      	beq.n	155f2 <__aeabi_ddiv+0x16a>
   15554:	2e00      	cmp	r6, #0
   15556:	d100      	bne.n	1555a <__aeabi_ddiv+0xd2>
   15558:	e1bc      	b.n	158d4 <__aeabi_ddiv+0x44c>
   1555a:	0030      	movs	r0, r6
   1555c:	f001 fae8 	bl	16b30 <__clzsi2>
   15560:	0003      	movs	r3, r0
   15562:	3b0b      	subs	r3, #11
   15564:	2b1c      	cmp	r3, #28
   15566:	dd00      	ble.n	1556a <__aeabi_ddiv+0xe2>
   15568:	e1ac      	b.n	158c4 <__aeabi_ddiv+0x43c>
   1556a:	221d      	movs	r2, #29
   1556c:	1ad3      	subs	r3, r2, r3
   1556e:	465a      	mov	r2, fp
   15570:	0001      	movs	r1, r0
   15572:	40da      	lsrs	r2, r3
   15574:	3908      	subs	r1, #8
   15576:	408e      	lsls	r6, r1
   15578:	0013      	movs	r3, r2
   1557a:	4333      	orrs	r3, r6
   1557c:	4699      	mov	r9, r3
   1557e:	465b      	mov	r3, fp
   15580:	408b      	lsls	r3, r1
   15582:	4698      	mov	r8, r3
   15584:	2300      	movs	r3, #0
   15586:	4c3c      	ldr	r4, [pc, #240]	; (15678 <__aeabi_ddiv+0x1f0>)
   15588:	2600      	movs	r6, #0
   1558a:	1a24      	subs	r4, r4, r0
   1558c:	9303      	str	r3, [sp, #12]
   1558e:	e79f      	b.n	154d0 <__aeabi_ddiv+0x48>
   15590:	4651      	mov	r1, sl
   15592:	465a      	mov	r2, fp
   15594:	4311      	orrs	r1, r2
   15596:	d129      	bne.n	155ec <__aeabi_ddiv+0x164>
   15598:	2200      	movs	r2, #0
   1559a:	4693      	mov	fp, r2
   1559c:	3202      	adds	r2, #2
   1559e:	e7b1      	b.n	15504 <__aeabi_ddiv+0x7c>
   155a0:	4659      	mov	r1, fp
   155a2:	4301      	orrs	r1, r0
   155a4:	d01e      	beq.n	155e4 <__aeabi_ddiv+0x15c>
   155a6:	465b      	mov	r3, fp
   155a8:	2b00      	cmp	r3, #0
   155aa:	d100      	bne.n	155ae <__aeabi_ddiv+0x126>
   155ac:	e19e      	b.n	158ec <__aeabi_ddiv+0x464>
   155ae:	4658      	mov	r0, fp
   155b0:	f001 fabe 	bl	16b30 <__clzsi2>
   155b4:	0003      	movs	r3, r0
   155b6:	3b0b      	subs	r3, #11
   155b8:	2b1c      	cmp	r3, #28
   155ba:	dd00      	ble.n	155be <__aeabi_ddiv+0x136>
   155bc:	e18f      	b.n	158de <__aeabi_ddiv+0x456>
   155be:	0002      	movs	r2, r0
   155c0:	4659      	mov	r1, fp
   155c2:	3a08      	subs	r2, #8
   155c4:	4091      	lsls	r1, r2
   155c6:	468b      	mov	fp, r1
   155c8:	211d      	movs	r1, #29
   155ca:	1acb      	subs	r3, r1, r3
   155cc:	4651      	mov	r1, sl
   155ce:	40d9      	lsrs	r1, r3
   155d0:	000b      	movs	r3, r1
   155d2:	4659      	mov	r1, fp
   155d4:	430b      	orrs	r3, r1
   155d6:	4651      	mov	r1, sl
   155d8:	469b      	mov	fp, r3
   155da:	4091      	lsls	r1, r2
   155dc:	4b26      	ldr	r3, [pc, #152]	; (15678 <__aeabi_ddiv+0x1f0>)
   155de:	2200      	movs	r2, #0
   155e0:	1a1b      	subs	r3, r3, r0
   155e2:	e78f      	b.n	15504 <__aeabi_ddiv+0x7c>
   155e4:	2300      	movs	r3, #0
   155e6:	2201      	movs	r2, #1
   155e8:	469b      	mov	fp, r3
   155ea:	e78b      	b.n	15504 <__aeabi_ddiv+0x7c>
   155ec:	4651      	mov	r1, sl
   155ee:	2203      	movs	r2, #3
   155f0:	e788      	b.n	15504 <__aeabi_ddiv+0x7c>
   155f2:	2300      	movs	r3, #0
   155f4:	4698      	mov	r8, r3
   155f6:	3301      	adds	r3, #1
   155f8:	2604      	movs	r6, #4
   155fa:	2400      	movs	r4, #0
   155fc:	9303      	str	r3, [sp, #12]
   155fe:	e767      	b.n	154d0 <__aeabi_ddiv+0x48>
   15600:	2303      	movs	r3, #3
   15602:	46b1      	mov	r9, r6
   15604:	9303      	str	r3, [sp, #12]
   15606:	260c      	movs	r6, #12
   15608:	e762      	b.n	154d0 <__aeabi_ddiv+0x48>
   1560a:	2a03      	cmp	r2, #3
   1560c:	d100      	bne.n	15610 <__aeabi_ddiv+0x188>
   1560e:	e25c      	b.n	15aca <__aeabi_ddiv+0x642>
   15610:	9b01      	ldr	r3, [sp, #4]
   15612:	2a01      	cmp	r2, #1
   15614:	d000      	beq.n	15618 <__aeabi_ddiv+0x190>
   15616:	e1e4      	b.n	159e2 <__aeabi_ddiv+0x55a>
   15618:	4013      	ands	r3, r2
   1561a:	469c      	mov	ip, r3
   1561c:	2300      	movs	r3, #0
   1561e:	2400      	movs	r4, #0
   15620:	2200      	movs	r2, #0
   15622:	4698      	mov	r8, r3
   15624:	2100      	movs	r1, #0
   15626:	0312      	lsls	r2, r2, #12
   15628:	0b13      	lsrs	r3, r2, #12
   1562a:	0d0a      	lsrs	r2, r1, #20
   1562c:	0512      	lsls	r2, r2, #20
   1562e:	431a      	orrs	r2, r3
   15630:	0523      	lsls	r3, r4, #20
   15632:	4c12      	ldr	r4, [pc, #72]	; (1567c <__aeabi_ddiv+0x1f4>)
   15634:	4640      	mov	r0, r8
   15636:	4022      	ands	r2, r4
   15638:	4313      	orrs	r3, r2
   1563a:	4662      	mov	r2, ip
   1563c:	005b      	lsls	r3, r3, #1
   1563e:	07d2      	lsls	r2, r2, #31
   15640:	085b      	lsrs	r3, r3, #1
   15642:	4313      	orrs	r3, r2
   15644:	0019      	movs	r1, r3
   15646:	b007      	add	sp, #28
   15648:	bc3c      	pop	{r2, r3, r4, r5}
   1564a:	4690      	mov	r8, r2
   1564c:	4699      	mov	r9, r3
   1564e:	46a2      	mov	sl, r4
   15650:	46ab      	mov	fp, r5
   15652:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15654:	2300      	movs	r3, #0
   15656:	2280      	movs	r2, #128	; 0x80
   15658:	469c      	mov	ip, r3
   1565a:	0312      	lsls	r2, r2, #12
   1565c:	4698      	mov	r8, r3
   1565e:	4c03      	ldr	r4, [pc, #12]	; (1566c <__aeabi_ddiv+0x1e4>)
   15660:	e7e0      	b.n	15624 <__aeabi_ddiv+0x19c>
   15662:	2300      	movs	r3, #0
   15664:	4c01      	ldr	r4, [pc, #4]	; (1566c <__aeabi_ddiv+0x1e4>)
   15666:	2200      	movs	r2, #0
   15668:	4698      	mov	r8, r3
   1566a:	e7db      	b.n	15624 <__aeabi_ddiv+0x19c>
   1566c:	000007ff 	.word	0x000007ff
   15670:	fffffc01 	.word	0xfffffc01
   15674:	00019178 	.word	0x00019178
   15678:	fffffc0d 	.word	0xfffffc0d
   1567c:	800fffff 	.word	0x800fffff
   15680:	45d9      	cmp	r9, fp
   15682:	d900      	bls.n	15686 <__aeabi_ddiv+0x1fe>
   15684:	e139      	b.n	158fa <__aeabi_ddiv+0x472>
   15686:	d100      	bne.n	1568a <__aeabi_ddiv+0x202>
   15688:	e134      	b.n	158f4 <__aeabi_ddiv+0x46c>
   1568a:	2300      	movs	r3, #0
   1568c:	4646      	mov	r6, r8
   1568e:	464d      	mov	r5, r9
   15690:	469a      	mov	sl, r3
   15692:	3c01      	subs	r4, #1
   15694:	465b      	mov	r3, fp
   15696:	0e0a      	lsrs	r2, r1, #24
   15698:	021b      	lsls	r3, r3, #8
   1569a:	431a      	orrs	r2, r3
   1569c:	020b      	lsls	r3, r1, #8
   1569e:	0c17      	lsrs	r7, r2, #16
   156a0:	9303      	str	r3, [sp, #12]
   156a2:	0413      	lsls	r3, r2, #16
   156a4:	0c1b      	lsrs	r3, r3, #16
   156a6:	0039      	movs	r1, r7
   156a8:	0028      	movs	r0, r5
   156aa:	4690      	mov	r8, r2
   156ac:	9301      	str	r3, [sp, #4]
   156ae:	f7fe f999 	bl	139e4 <__udivsi3>
   156b2:	0002      	movs	r2, r0
   156b4:	9b01      	ldr	r3, [sp, #4]
   156b6:	4683      	mov	fp, r0
   156b8:	435a      	muls	r2, r3
   156ba:	0028      	movs	r0, r5
   156bc:	0039      	movs	r1, r7
   156be:	4691      	mov	r9, r2
   156c0:	f7fe fa16 	bl	13af0 <__aeabi_uidivmod>
   156c4:	0c35      	lsrs	r5, r6, #16
   156c6:	0409      	lsls	r1, r1, #16
   156c8:	430d      	orrs	r5, r1
   156ca:	45a9      	cmp	r9, r5
   156cc:	d90d      	bls.n	156ea <__aeabi_ddiv+0x262>
   156ce:	465b      	mov	r3, fp
   156d0:	4445      	add	r5, r8
   156d2:	3b01      	subs	r3, #1
   156d4:	45a8      	cmp	r8, r5
   156d6:	d900      	bls.n	156da <__aeabi_ddiv+0x252>
   156d8:	e13a      	b.n	15950 <__aeabi_ddiv+0x4c8>
   156da:	45a9      	cmp	r9, r5
   156dc:	d800      	bhi.n	156e0 <__aeabi_ddiv+0x258>
   156de:	e137      	b.n	15950 <__aeabi_ddiv+0x4c8>
   156e0:	2302      	movs	r3, #2
   156e2:	425b      	negs	r3, r3
   156e4:	469c      	mov	ip, r3
   156e6:	4445      	add	r5, r8
   156e8:	44e3      	add	fp, ip
   156ea:	464b      	mov	r3, r9
   156ec:	1aeb      	subs	r3, r5, r3
   156ee:	0039      	movs	r1, r7
   156f0:	0018      	movs	r0, r3
   156f2:	9304      	str	r3, [sp, #16]
   156f4:	f7fe f976 	bl	139e4 <__udivsi3>
   156f8:	9b01      	ldr	r3, [sp, #4]
   156fa:	0005      	movs	r5, r0
   156fc:	4343      	muls	r3, r0
   156fe:	0039      	movs	r1, r7
   15700:	9804      	ldr	r0, [sp, #16]
   15702:	4699      	mov	r9, r3
   15704:	f7fe f9f4 	bl	13af0 <__aeabi_uidivmod>
   15708:	0433      	lsls	r3, r6, #16
   1570a:	0409      	lsls	r1, r1, #16
   1570c:	0c1b      	lsrs	r3, r3, #16
   1570e:	430b      	orrs	r3, r1
   15710:	4599      	cmp	r9, r3
   15712:	d909      	bls.n	15728 <__aeabi_ddiv+0x2a0>
   15714:	4443      	add	r3, r8
   15716:	1e6a      	subs	r2, r5, #1
   15718:	4598      	cmp	r8, r3
   1571a:	d900      	bls.n	1571e <__aeabi_ddiv+0x296>
   1571c:	e11a      	b.n	15954 <__aeabi_ddiv+0x4cc>
   1571e:	4599      	cmp	r9, r3
   15720:	d800      	bhi.n	15724 <__aeabi_ddiv+0x29c>
   15722:	e117      	b.n	15954 <__aeabi_ddiv+0x4cc>
   15724:	3d02      	subs	r5, #2
   15726:	4443      	add	r3, r8
   15728:	464a      	mov	r2, r9
   1572a:	1a9b      	subs	r3, r3, r2
   1572c:	465a      	mov	r2, fp
   1572e:	0412      	lsls	r2, r2, #16
   15730:	432a      	orrs	r2, r5
   15732:	9903      	ldr	r1, [sp, #12]
   15734:	4693      	mov	fp, r2
   15736:	0c10      	lsrs	r0, r2, #16
   15738:	0c0a      	lsrs	r2, r1, #16
   1573a:	4691      	mov	r9, r2
   1573c:	0409      	lsls	r1, r1, #16
   1573e:	465a      	mov	r2, fp
   15740:	0c09      	lsrs	r1, r1, #16
   15742:	464e      	mov	r6, r9
   15744:	000d      	movs	r5, r1
   15746:	0412      	lsls	r2, r2, #16
   15748:	0c12      	lsrs	r2, r2, #16
   1574a:	4345      	muls	r5, r0
   1574c:	9105      	str	r1, [sp, #20]
   1574e:	4351      	muls	r1, r2
   15750:	4372      	muls	r2, r6
   15752:	4370      	muls	r0, r6
   15754:	1952      	adds	r2, r2, r5
   15756:	0c0e      	lsrs	r6, r1, #16
   15758:	18b2      	adds	r2, r6, r2
   1575a:	4295      	cmp	r5, r2
   1575c:	d903      	bls.n	15766 <__aeabi_ddiv+0x2de>
   1575e:	2580      	movs	r5, #128	; 0x80
   15760:	026d      	lsls	r5, r5, #9
   15762:	46ac      	mov	ip, r5
   15764:	4460      	add	r0, ip
   15766:	0c15      	lsrs	r5, r2, #16
   15768:	0409      	lsls	r1, r1, #16
   1576a:	0412      	lsls	r2, r2, #16
   1576c:	0c09      	lsrs	r1, r1, #16
   1576e:	1828      	adds	r0, r5, r0
   15770:	1852      	adds	r2, r2, r1
   15772:	4283      	cmp	r3, r0
   15774:	d200      	bcs.n	15778 <__aeabi_ddiv+0x2f0>
   15776:	e0ce      	b.n	15916 <__aeabi_ddiv+0x48e>
   15778:	d100      	bne.n	1577c <__aeabi_ddiv+0x2f4>
   1577a:	e0c8      	b.n	1590e <__aeabi_ddiv+0x486>
   1577c:	1a1d      	subs	r5, r3, r0
   1577e:	4653      	mov	r3, sl
   15780:	1a9e      	subs	r6, r3, r2
   15782:	45b2      	cmp	sl, r6
   15784:	4192      	sbcs	r2, r2
   15786:	4252      	negs	r2, r2
   15788:	1aab      	subs	r3, r5, r2
   1578a:	469a      	mov	sl, r3
   1578c:	4598      	cmp	r8, r3
   1578e:	d100      	bne.n	15792 <__aeabi_ddiv+0x30a>
   15790:	e117      	b.n	159c2 <__aeabi_ddiv+0x53a>
   15792:	0039      	movs	r1, r7
   15794:	0018      	movs	r0, r3
   15796:	f7fe f925 	bl	139e4 <__udivsi3>
   1579a:	9b01      	ldr	r3, [sp, #4]
   1579c:	0005      	movs	r5, r0
   1579e:	4343      	muls	r3, r0
   157a0:	0039      	movs	r1, r7
   157a2:	4650      	mov	r0, sl
   157a4:	9304      	str	r3, [sp, #16]
   157a6:	f7fe f9a3 	bl	13af0 <__aeabi_uidivmod>
   157aa:	9804      	ldr	r0, [sp, #16]
   157ac:	040b      	lsls	r3, r1, #16
   157ae:	0c31      	lsrs	r1, r6, #16
   157b0:	4319      	orrs	r1, r3
   157b2:	4288      	cmp	r0, r1
   157b4:	d909      	bls.n	157ca <__aeabi_ddiv+0x342>
   157b6:	4441      	add	r1, r8
   157b8:	1e6b      	subs	r3, r5, #1
   157ba:	4588      	cmp	r8, r1
   157bc:	d900      	bls.n	157c0 <__aeabi_ddiv+0x338>
   157be:	e107      	b.n	159d0 <__aeabi_ddiv+0x548>
   157c0:	4288      	cmp	r0, r1
   157c2:	d800      	bhi.n	157c6 <__aeabi_ddiv+0x33e>
   157c4:	e104      	b.n	159d0 <__aeabi_ddiv+0x548>
   157c6:	3d02      	subs	r5, #2
   157c8:	4441      	add	r1, r8
   157ca:	9b04      	ldr	r3, [sp, #16]
   157cc:	1acb      	subs	r3, r1, r3
   157ce:	0018      	movs	r0, r3
   157d0:	0039      	movs	r1, r7
   157d2:	9304      	str	r3, [sp, #16]
   157d4:	f7fe f906 	bl	139e4 <__udivsi3>
   157d8:	9b01      	ldr	r3, [sp, #4]
   157da:	4682      	mov	sl, r0
   157dc:	4343      	muls	r3, r0
   157de:	0039      	movs	r1, r7
   157e0:	9804      	ldr	r0, [sp, #16]
   157e2:	9301      	str	r3, [sp, #4]
   157e4:	f7fe f984 	bl	13af0 <__aeabi_uidivmod>
   157e8:	9801      	ldr	r0, [sp, #4]
   157ea:	040b      	lsls	r3, r1, #16
   157ec:	0431      	lsls	r1, r6, #16
   157ee:	0c09      	lsrs	r1, r1, #16
   157f0:	4319      	orrs	r1, r3
   157f2:	4288      	cmp	r0, r1
   157f4:	d90d      	bls.n	15812 <__aeabi_ddiv+0x38a>
   157f6:	4653      	mov	r3, sl
   157f8:	4441      	add	r1, r8
   157fa:	3b01      	subs	r3, #1
   157fc:	4588      	cmp	r8, r1
   157fe:	d900      	bls.n	15802 <__aeabi_ddiv+0x37a>
   15800:	e0e8      	b.n	159d4 <__aeabi_ddiv+0x54c>
   15802:	4288      	cmp	r0, r1
   15804:	d800      	bhi.n	15808 <__aeabi_ddiv+0x380>
   15806:	e0e5      	b.n	159d4 <__aeabi_ddiv+0x54c>
   15808:	2302      	movs	r3, #2
   1580a:	425b      	negs	r3, r3
   1580c:	469c      	mov	ip, r3
   1580e:	4441      	add	r1, r8
   15810:	44e2      	add	sl, ip
   15812:	9b01      	ldr	r3, [sp, #4]
   15814:	042d      	lsls	r5, r5, #16
   15816:	1ace      	subs	r6, r1, r3
   15818:	4651      	mov	r1, sl
   1581a:	4329      	orrs	r1, r5
   1581c:	9d05      	ldr	r5, [sp, #20]
   1581e:	464f      	mov	r7, r9
   15820:	002a      	movs	r2, r5
   15822:	040b      	lsls	r3, r1, #16
   15824:	0c08      	lsrs	r0, r1, #16
   15826:	0c1b      	lsrs	r3, r3, #16
   15828:	435a      	muls	r2, r3
   1582a:	4345      	muls	r5, r0
   1582c:	437b      	muls	r3, r7
   1582e:	4378      	muls	r0, r7
   15830:	195b      	adds	r3, r3, r5
   15832:	0c17      	lsrs	r7, r2, #16
   15834:	18fb      	adds	r3, r7, r3
   15836:	429d      	cmp	r5, r3
   15838:	d903      	bls.n	15842 <__aeabi_ddiv+0x3ba>
   1583a:	2580      	movs	r5, #128	; 0x80
   1583c:	026d      	lsls	r5, r5, #9
   1583e:	46ac      	mov	ip, r5
   15840:	4460      	add	r0, ip
   15842:	0c1d      	lsrs	r5, r3, #16
   15844:	0412      	lsls	r2, r2, #16
   15846:	041b      	lsls	r3, r3, #16
   15848:	0c12      	lsrs	r2, r2, #16
   1584a:	1828      	adds	r0, r5, r0
   1584c:	189b      	adds	r3, r3, r2
   1584e:	4286      	cmp	r6, r0
   15850:	d200      	bcs.n	15854 <__aeabi_ddiv+0x3cc>
   15852:	e093      	b.n	1597c <__aeabi_ddiv+0x4f4>
   15854:	d100      	bne.n	15858 <__aeabi_ddiv+0x3d0>
   15856:	e08e      	b.n	15976 <__aeabi_ddiv+0x4ee>
   15858:	2301      	movs	r3, #1
   1585a:	4319      	orrs	r1, r3
   1585c:	4ba0      	ldr	r3, [pc, #640]	; (15ae0 <__aeabi_ddiv+0x658>)
   1585e:	18e3      	adds	r3, r4, r3
   15860:	2b00      	cmp	r3, #0
   15862:	dc00      	bgt.n	15866 <__aeabi_ddiv+0x3de>
   15864:	e099      	b.n	1599a <__aeabi_ddiv+0x512>
   15866:	074a      	lsls	r2, r1, #29
   15868:	d000      	beq.n	1586c <__aeabi_ddiv+0x3e4>
   1586a:	e09e      	b.n	159aa <__aeabi_ddiv+0x522>
   1586c:	465a      	mov	r2, fp
   1586e:	01d2      	lsls	r2, r2, #7
   15870:	d506      	bpl.n	15880 <__aeabi_ddiv+0x3f8>
   15872:	465a      	mov	r2, fp
   15874:	4b9b      	ldr	r3, [pc, #620]	; (15ae4 <__aeabi_ddiv+0x65c>)
   15876:	401a      	ands	r2, r3
   15878:	2380      	movs	r3, #128	; 0x80
   1587a:	4693      	mov	fp, r2
   1587c:	00db      	lsls	r3, r3, #3
   1587e:	18e3      	adds	r3, r4, r3
   15880:	4a99      	ldr	r2, [pc, #612]	; (15ae8 <__aeabi_ddiv+0x660>)
   15882:	4293      	cmp	r3, r2
   15884:	dd68      	ble.n	15958 <__aeabi_ddiv+0x4d0>
   15886:	2301      	movs	r3, #1
   15888:	9a02      	ldr	r2, [sp, #8]
   1588a:	4c98      	ldr	r4, [pc, #608]	; (15aec <__aeabi_ddiv+0x664>)
   1588c:	401a      	ands	r2, r3
   1588e:	2300      	movs	r3, #0
   15890:	4694      	mov	ip, r2
   15892:	4698      	mov	r8, r3
   15894:	2200      	movs	r2, #0
   15896:	e6c5      	b.n	15624 <__aeabi_ddiv+0x19c>
   15898:	2280      	movs	r2, #128	; 0x80
   1589a:	464b      	mov	r3, r9
   1589c:	0312      	lsls	r2, r2, #12
   1589e:	4213      	tst	r3, r2
   158a0:	d00a      	beq.n	158b8 <__aeabi_ddiv+0x430>
   158a2:	465b      	mov	r3, fp
   158a4:	4213      	tst	r3, r2
   158a6:	d106      	bne.n	158b6 <__aeabi_ddiv+0x42e>
   158a8:	431a      	orrs	r2, r3
   158aa:	0312      	lsls	r2, r2, #12
   158ac:	0b12      	lsrs	r2, r2, #12
   158ae:	46ac      	mov	ip, r5
   158b0:	4688      	mov	r8, r1
   158b2:	4c8e      	ldr	r4, [pc, #568]	; (15aec <__aeabi_ddiv+0x664>)
   158b4:	e6b6      	b.n	15624 <__aeabi_ddiv+0x19c>
   158b6:	464b      	mov	r3, r9
   158b8:	431a      	orrs	r2, r3
   158ba:	0312      	lsls	r2, r2, #12
   158bc:	0b12      	lsrs	r2, r2, #12
   158be:	46bc      	mov	ip, r7
   158c0:	4c8a      	ldr	r4, [pc, #552]	; (15aec <__aeabi_ddiv+0x664>)
   158c2:	e6af      	b.n	15624 <__aeabi_ddiv+0x19c>
   158c4:	0003      	movs	r3, r0
   158c6:	465a      	mov	r2, fp
   158c8:	3b28      	subs	r3, #40	; 0x28
   158ca:	409a      	lsls	r2, r3
   158cc:	2300      	movs	r3, #0
   158ce:	4691      	mov	r9, r2
   158d0:	4698      	mov	r8, r3
   158d2:	e657      	b.n	15584 <__aeabi_ddiv+0xfc>
   158d4:	4658      	mov	r0, fp
   158d6:	f001 f92b 	bl	16b30 <__clzsi2>
   158da:	3020      	adds	r0, #32
   158dc:	e640      	b.n	15560 <__aeabi_ddiv+0xd8>
   158de:	0003      	movs	r3, r0
   158e0:	4652      	mov	r2, sl
   158e2:	3b28      	subs	r3, #40	; 0x28
   158e4:	409a      	lsls	r2, r3
   158e6:	2100      	movs	r1, #0
   158e8:	4693      	mov	fp, r2
   158ea:	e677      	b.n	155dc <__aeabi_ddiv+0x154>
   158ec:	f001 f920 	bl	16b30 <__clzsi2>
   158f0:	3020      	adds	r0, #32
   158f2:	e65f      	b.n	155b4 <__aeabi_ddiv+0x12c>
   158f4:	4588      	cmp	r8, r1
   158f6:	d200      	bcs.n	158fa <__aeabi_ddiv+0x472>
   158f8:	e6c7      	b.n	1568a <__aeabi_ddiv+0x202>
   158fa:	464b      	mov	r3, r9
   158fc:	07de      	lsls	r6, r3, #31
   158fe:	085d      	lsrs	r5, r3, #1
   15900:	4643      	mov	r3, r8
   15902:	085b      	lsrs	r3, r3, #1
   15904:	431e      	orrs	r6, r3
   15906:	4643      	mov	r3, r8
   15908:	07db      	lsls	r3, r3, #31
   1590a:	469a      	mov	sl, r3
   1590c:	e6c2      	b.n	15694 <__aeabi_ddiv+0x20c>
   1590e:	2500      	movs	r5, #0
   15910:	4592      	cmp	sl, r2
   15912:	d300      	bcc.n	15916 <__aeabi_ddiv+0x48e>
   15914:	e733      	b.n	1577e <__aeabi_ddiv+0x2f6>
   15916:	9e03      	ldr	r6, [sp, #12]
   15918:	4659      	mov	r1, fp
   1591a:	46b4      	mov	ip, r6
   1591c:	44e2      	add	sl, ip
   1591e:	45b2      	cmp	sl, r6
   15920:	41ad      	sbcs	r5, r5
   15922:	426d      	negs	r5, r5
   15924:	4445      	add	r5, r8
   15926:	18eb      	adds	r3, r5, r3
   15928:	3901      	subs	r1, #1
   1592a:	4598      	cmp	r8, r3
   1592c:	d207      	bcs.n	1593e <__aeabi_ddiv+0x4b6>
   1592e:	4298      	cmp	r0, r3
   15930:	d900      	bls.n	15934 <__aeabi_ddiv+0x4ac>
   15932:	e07f      	b.n	15a34 <__aeabi_ddiv+0x5ac>
   15934:	d100      	bne.n	15938 <__aeabi_ddiv+0x4b0>
   15936:	e0bc      	b.n	15ab2 <__aeabi_ddiv+0x62a>
   15938:	1a1d      	subs	r5, r3, r0
   1593a:	468b      	mov	fp, r1
   1593c:	e71f      	b.n	1577e <__aeabi_ddiv+0x2f6>
   1593e:	4598      	cmp	r8, r3
   15940:	d1fa      	bne.n	15938 <__aeabi_ddiv+0x4b0>
   15942:	9d03      	ldr	r5, [sp, #12]
   15944:	4555      	cmp	r5, sl
   15946:	d9f2      	bls.n	1592e <__aeabi_ddiv+0x4a6>
   15948:	4643      	mov	r3, r8
   1594a:	468b      	mov	fp, r1
   1594c:	1a1d      	subs	r5, r3, r0
   1594e:	e716      	b.n	1577e <__aeabi_ddiv+0x2f6>
   15950:	469b      	mov	fp, r3
   15952:	e6ca      	b.n	156ea <__aeabi_ddiv+0x262>
   15954:	0015      	movs	r5, r2
   15956:	e6e7      	b.n	15728 <__aeabi_ddiv+0x2a0>
   15958:	465a      	mov	r2, fp
   1595a:	08c9      	lsrs	r1, r1, #3
   1595c:	0752      	lsls	r2, r2, #29
   1595e:	430a      	orrs	r2, r1
   15960:	055b      	lsls	r3, r3, #21
   15962:	4690      	mov	r8, r2
   15964:	0d5c      	lsrs	r4, r3, #21
   15966:	465a      	mov	r2, fp
   15968:	2301      	movs	r3, #1
   1596a:	9902      	ldr	r1, [sp, #8]
   1596c:	0252      	lsls	r2, r2, #9
   1596e:	4019      	ands	r1, r3
   15970:	0b12      	lsrs	r2, r2, #12
   15972:	468c      	mov	ip, r1
   15974:	e656      	b.n	15624 <__aeabi_ddiv+0x19c>
   15976:	2b00      	cmp	r3, #0
   15978:	d100      	bne.n	1597c <__aeabi_ddiv+0x4f4>
   1597a:	e76f      	b.n	1585c <__aeabi_ddiv+0x3d4>
   1597c:	4446      	add	r6, r8
   1597e:	1e4a      	subs	r2, r1, #1
   15980:	45b0      	cmp	r8, r6
   15982:	d929      	bls.n	159d8 <__aeabi_ddiv+0x550>
   15984:	0011      	movs	r1, r2
   15986:	4286      	cmp	r6, r0
   15988:	d000      	beq.n	1598c <__aeabi_ddiv+0x504>
   1598a:	e765      	b.n	15858 <__aeabi_ddiv+0x3d0>
   1598c:	9a03      	ldr	r2, [sp, #12]
   1598e:	4293      	cmp	r3, r2
   15990:	d000      	beq.n	15994 <__aeabi_ddiv+0x50c>
   15992:	e761      	b.n	15858 <__aeabi_ddiv+0x3d0>
   15994:	e762      	b.n	1585c <__aeabi_ddiv+0x3d4>
   15996:	2101      	movs	r1, #1
   15998:	4249      	negs	r1, r1
   1599a:	2001      	movs	r0, #1
   1599c:	1ac2      	subs	r2, r0, r3
   1599e:	2a38      	cmp	r2, #56	; 0x38
   159a0:	dd21      	ble.n	159e6 <__aeabi_ddiv+0x55e>
   159a2:	9b02      	ldr	r3, [sp, #8]
   159a4:	4003      	ands	r3, r0
   159a6:	469c      	mov	ip, r3
   159a8:	e638      	b.n	1561c <__aeabi_ddiv+0x194>
   159aa:	220f      	movs	r2, #15
   159ac:	400a      	ands	r2, r1
   159ae:	2a04      	cmp	r2, #4
   159b0:	d100      	bne.n	159b4 <__aeabi_ddiv+0x52c>
   159b2:	e75b      	b.n	1586c <__aeabi_ddiv+0x3e4>
   159b4:	000a      	movs	r2, r1
   159b6:	1d11      	adds	r1, r2, #4
   159b8:	4291      	cmp	r1, r2
   159ba:	4192      	sbcs	r2, r2
   159bc:	4252      	negs	r2, r2
   159be:	4493      	add	fp, r2
   159c0:	e754      	b.n	1586c <__aeabi_ddiv+0x3e4>
   159c2:	4b47      	ldr	r3, [pc, #284]	; (15ae0 <__aeabi_ddiv+0x658>)
   159c4:	18e3      	adds	r3, r4, r3
   159c6:	2b00      	cmp	r3, #0
   159c8:	dde5      	ble.n	15996 <__aeabi_ddiv+0x50e>
   159ca:	2201      	movs	r2, #1
   159cc:	4252      	negs	r2, r2
   159ce:	e7f2      	b.n	159b6 <__aeabi_ddiv+0x52e>
   159d0:	001d      	movs	r5, r3
   159d2:	e6fa      	b.n	157ca <__aeabi_ddiv+0x342>
   159d4:	469a      	mov	sl, r3
   159d6:	e71c      	b.n	15812 <__aeabi_ddiv+0x38a>
   159d8:	42b0      	cmp	r0, r6
   159da:	d839      	bhi.n	15a50 <__aeabi_ddiv+0x5c8>
   159dc:	d06e      	beq.n	15abc <__aeabi_ddiv+0x634>
   159de:	0011      	movs	r1, r2
   159e0:	e73a      	b.n	15858 <__aeabi_ddiv+0x3d0>
   159e2:	9302      	str	r3, [sp, #8]
   159e4:	e73a      	b.n	1585c <__aeabi_ddiv+0x3d4>
   159e6:	2a1f      	cmp	r2, #31
   159e8:	dc3c      	bgt.n	15a64 <__aeabi_ddiv+0x5dc>
   159ea:	2320      	movs	r3, #32
   159ec:	1a9b      	subs	r3, r3, r2
   159ee:	000c      	movs	r4, r1
   159f0:	4658      	mov	r0, fp
   159f2:	4099      	lsls	r1, r3
   159f4:	4098      	lsls	r0, r3
   159f6:	1e4b      	subs	r3, r1, #1
   159f8:	4199      	sbcs	r1, r3
   159fa:	465b      	mov	r3, fp
   159fc:	40d4      	lsrs	r4, r2
   159fe:	40d3      	lsrs	r3, r2
   15a00:	4320      	orrs	r0, r4
   15a02:	4308      	orrs	r0, r1
   15a04:	001a      	movs	r2, r3
   15a06:	0743      	lsls	r3, r0, #29
   15a08:	d009      	beq.n	15a1e <__aeabi_ddiv+0x596>
   15a0a:	230f      	movs	r3, #15
   15a0c:	4003      	ands	r3, r0
   15a0e:	2b04      	cmp	r3, #4
   15a10:	d005      	beq.n	15a1e <__aeabi_ddiv+0x596>
   15a12:	0001      	movs	r1, r0
   15a14:	1d08      	adds	r0, r1, #4
   15a16:	4288      	cmp	r0, r1
   15a18:	419b      	sbcs	r3, r3
   15a1a:	425b      	negs	r3, r3
   15a1c:	18d2      	adds	r2, r2, r3
   15a1e:	0213      	lsls	r3, r2, #8
   15a20:	d53a      	bpl.n	15a98 <__aeabi_ddiv+0x610>
   15a22:	2301      	movs	r3, #1
   15a24:	9a02      	ldr	r2, [sp, #8]
   15a26:	2401      	movs	r4, #1
   15a28:	401a      	ands	r2, r3
   15a2a:	2300      	movs	r3, #0
   15a2c:	4694      	mov	ip, r2
   15a2e:	4698      	mov	r8, r3
   15a30:	2200      	movs	r2, #0
   15a32:	e5f7      	b.n	15624 <__aeabi_ddiv+0x19c>
   15a34:	2102      	movs	r1, #2
   15a36:	4249      	negs	r1, r1
   15a38:	468c      	mov	ip, r1
   15a3a:	9d03      	ldr	r5, [sp, #12]
   15a3c:	44e3      	add	fp, ip
   15a3e:	46ac      	mov	ip, r5
   15a40:	44e2      	add	sl, ip
   15a42:	45aa      	cmp	sl, r5
   15a44:	41ad      	sbcs	r5, r5
   15a46:	426d      	negs	r5, r5
   15a48:	4445      	add	r5, r8
   15a4a:	18ed      	adds	r5, r5, r3
   15a4c:	1a2d      	subs	r5, r5, r0
   15a4e:	e696      	b.n	1577e <__aeabi_ddiv+0x2f6>
   15a50:	1e8a      	subs	r2, r1, #2
   15a52:	9903      	ldr	r1, [sp, #12]
   15a54:	004d      	lsls	r5, r1, #1
   15a56:	428d      	cmp	r5, r1
   15a58:	4189      	sbcs	r1, r1
   15a5a:	4249      	negs	r1, r1
   15a5c:	4441      	add	r1, r8
   15a5e:	1876      	adds	r6, r6, r1
   15a60:	9503      	str	r5, [sp, #12]
   15a62:	e78f      	b.n	15984 <__aeabi_ddiv+0x4fc>
   15a64:	201f      	movs	r0, #31
   15a66:	4240      	negs	r0, r0
   15a68:	1ac3      	subs	r3, r0, r3
   15a6a:	4658      	mov	r0, fp
   15a6c:	40d8      	lsrs	r0, r3
   15a6e:	0003      	movs	r3, r0
   15a70:	2a20      	cmp	r2, #32
   15a72:	d028      	beq.n	15ac6 <__aeabi_ddiv+0x63e>
   15a74:	2040      	movs	r0, #64	; 0x40
   15a76:	465d      	mov	r5, fp
   15a78:	1a82      	subs	r2, r0, r2
   15a7a:	4095      	lsls	r5, r2
   15a7c:	4329      	orrs	r1, r5
   15a7e:	1e4a      	subs	r2, r1, #1
   15a80:	4191      	sbcs	r1, r2
   15a82:	4319      	orrs	r1, r3
   15a84:	2307      	movs	r3, #7
   15a86:	2200      	movs	r2, #0
   15a88:	400b      	ands	r3, r1
   15a8a:	d009      	beq.n	15aa0 <__aeabi_ddiv+0x618>
   15a8c:	230f      	movs	r3, #15
   15a8e:	2200      	movs	r2, #0
   15a90:	400b      	ands	r3, r1
   15a92:	0008      	movs	r0, r1
   15a94:	2b04      	cmp	r3, #4
   15a96:	d1bd      	bne.n	15a14 <__aeabi_ddiv+0x58c>
   15a98:	0001      	movs	r1, r0
   15a9a:	0753      	lsls	r3, r2, #29
   15a9c:	0252      	lsls	r2, r2, #9
   15a9e:	0b12      	lsrs	r2, r2, #12
   15aa0:	08c9      	lsrs	r1, r1, #3
   15aa2:	4319      	orrs	r1, r3
   15aa4:	2301      	movs	r3, #1
   15aa6:	4688      	mov	r8, r1
   15aa8:	9902      	ldr	r1, [sp, #8]
   15aaa:	2400      	movs	r4, #0
   15aac:	4019      	ands	r1, r3
   15aae:	468c      	mov	ip, r1
   15ab0:	e5b8      	b.n	15624 <__aeabi_ddiv+0x19c>
   15ab2:	4552      	cmp	r2, sl
   15ab4:	d8be      	bhi.n	15a34 <__aeabi_ddiv+0x5ac>
   15ab6:	468b      	mov	fp, r1
   15ab8:	2500      	movs	r5, #0
   15aba:	e660      	b.n	1577e <__aeabi_ddiv+0x2f6>
   15abc:	9d03      	ldr	r5, [sp, #12]
   15abe:	429d      	cmp	r5, r3
   15ac0:	d3c6      	bcc.n	15a50 <__aeabi_ddiv+0x5c8>
   15ac2:	0011      	movs	r1, r2
   15ac4:	e762      	b.n	1598c <__aeabi_ddiv+0x504>
   15ac6:	2500      	movs	r5, #0
   15ac8:	e7d8      	b.n	15a7c <__aeabi_ddiv+0x5f4>
   15aca:	2280      	movs	r2, #128	; 0x80
   15acc:	465b      	mov	r3, fp
   15ace:	0312      	lsls	r2, r2, #12
   15ad0:	431a      	orrs	r2, r3
   15ad2:	9b01      	ldr	r3, [sp, #4]
   15ad4:	0312      	lsls	r2, r2, #12
   15ad6:	0b12      	lsrs	r2, r2, #12
   15ad8:	469c      	mov	ip, r3
   15ada:	4688      	mov	r8, r1
   15adc:	4c03      	ldr	r4, [pc, #12]	; (15aec <__aeabi_ddiv+0x664>)
   15ade:	e5a1      	b.n	15624 <__aeabi_ddiv+0x19c>
   15ae0:	000003ff 	.word	0x000003ff
   15ae4:	feffffff 	.word	0xfeffffff
   15ae8:	000007fe 	.word	0x000007fe
   15aec:	000007ff 	.word	0x000007ff

00015af0 <__eqdf2>:
   15af0:	b5f0      	push	{r4, r5, r6, r7, lr}
   15af2:	464f      	mov	r7, r9
   15af4:	4646      	mov	r6, r8
   15af6:	46d6      	mov	lr, sl
   15af8:	005c      	lsls	r4, r3, #1
   15afa:	b5c0      	push	{r6, r7, lr}
   15afc:	031f      	lsls	r7, r3, #12
   15afe:	0fdb      	lsrs	r3, r3, #31
   15b00:	469a      	mov	sl, r3
   15b02:	4b17      	ldr	r3, [pc, #92]	; (15b60 <__eqdf2+0x70>)
   15b04:	030e      	lsls	r6, r1, #12
   15b06:	004d      	lsls	r5, r1, #1
   15b08:	4684      	mov	ip, r0
   15b0a:	4680      	mov	r8, r0
   15b0c:	0b36      	lsrs	r6, r6, #12
   15b0e:	0d6d      	lsrs	r5, r5, #21
   15b10:	0fc9      	lsrs	r1, r1, #31
   15b12:	4691      	mov	r9, r2
   15b14:	0b3f      	lsrs	r7, r7, #12
   15b16:	0d64      	lsrs	r4, r4, #21
   15b18:	2001      	movs	r0, #1
   15b1a:	429d      	cmp	r5, r3
   15b1c:	d008      	beq.n	15b30 <__eqdf2+0x40>
   15b1e:	429c      	cmp	r4, r3
   15b20:	d001      	beq.n	15b26 <__eqdf2+0x36>
   15b22:	42a5      	cmp	r5, r4
   15b24:	d00b      	beq.n	15b3e <__eqdf2+0x4e>
   15b26:	bc1c      	pop	{r2, r3, r4}
   15b28:	4690      	mov	r8, r2
   15b2a:	4699      	mov	r9, r3
   15b2c:	46a2      	mov	sl, r4
   15b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15b30:	4663      	mov	r3, ip
   15b32:	4333      	orrs	r3, r6
   15b34:	d1f7      	bne.n	15b26 <__eqdf2+0x36>
   15b36:	42ac      	cmp	r4, r5
   15b38:	d1f5      	bne.n	15b26 <__eqdf2+0x36>
   15b3a:	433a      	orrs	r2, r7
   15b3c:	d1f3      	bne.n	15b26 <__eqdf2+0x36>
   15b3e:	2001      	movs	r0, #1
   15b40:	42be      	cmp	r6, r7
   15b42:	d1f0      	bne.n	15b26 <__eqdf2+0x36>
   15b44:	45c8      	cmp	r8, r9
   15b46:	d1ee      	bne.n	15b26 <__eqdf2+0x36>
   15b48:	4551      	cmp	r1, sl
   15b4a:	d007      	beq.n	15b5c <__eqdf2+0x6c>
   15b4c:	2d00      	cmp	r5, #0
   15b4e:	d1ea      	bne.n	15b26 <__eqdf2+0x36>
   15b50:	4663      	mov	r3, ip
   15b52:	431e      	orrs	r6, r3
   15b54:	0030      	movs	r0, r6
   15b56:	1e46      	subs	r6, r0, #1
   15b58:	41b0      	sbcs	r0, r6
   15b5a:	e7e4      	b.n	15b26 <__eqdf2+0x36>
   15b5c:	2000      	movs	r0, #0
   15b5e:	e7e2      	b.n	15b26 <__eqdf2+0x36>
   15b60:	000007ff 	.word	0x000007ff

00015b64 <__gedf2>:
   15b64:	b5f0      	push	{r4, r5, r6, r7, lr}
   15b66:	4645      	mov	r5, r8
   15b68:	46de      	mov	lr, fp
   15b6a:	4657      	mov	r7, sl
   15b6c:	464e      	mov	r6, r9
   15b6e:	b5e0      	push	{r5, r6, r7, lr}
   15b70:	031f      	lsls	r7, r3, #12
   15b72:	0b3d      	lsrs	r5, r7, #12
   15b74:	4f2c      	ldr	r7, [pc, #176]	; (15c28 <__gedf2+0xc4>)
   15b76:	030e      	lsls	r6, r1, #12
   15b78:	004c      	lsls	r4, r1, #1
   15b7a:	46ab      	mov	fp, r5
   15b7c:	005d      	lsls	r5, r3, #1
   15b7e:	4684      	mov	ip, r0
   15b80:	0b36      	lsrs	r6, r6, #12
   15b82:	0d64      	lsrs	r4, r4, #21
   15b84:	0fc9      	lsrs	r1, r1, #31
   15b86:	4690      	mov	r8, r2
   15b88:	0d6d      	lsrs	r5, r5, #21
   15b8a:	0fdb      	lsrs	r3, r3, #31
   15b8c:	42bc      	cmp	r4, r7
   15b8e:	d02a      	beq.n	15be6 <__gedf2+0x82>
   15b90:	4f25      	ldr	r7, [pc, #148]	; (15c28 <__gedf2+0xc4>)
   15b92:	42bd      	cmp	r5, r7
   15b94:	d02d      	beq.n	15bf2 <__gedf2+0x8e>
   15b96:	2c00      	cmp	r4, #0
   15b98:	d10f      	bne.n	15bba <__gedf2+0x56>
   15b9a:	4330      	orrs	r0, r6
   15b9c:	0007      	movs	r7, r0
   15b9e:	4681      	mov	r9, r0
   15ba0:	4278      	negs	r0, r7
   15ba2:	4178      	adcs	r0, r7
   15ba4:	b2c0      	uxtb	r0, r0
   15ba6:	2d00      	cmp	r5, #0
   15ba8:	d117      	bne.n	15bda <__gedf2+0x76>
   15baa:	465f      	mov	r7, fp
   15bac:	433a      	orrs	r2, r7
   15bae:	d114      	bne.n	15bda <__gedf2+0x76>
   15bb0:	464b      	mov	r3, r9
   15bb2:	2000      	movs	r0, #0
   15bb4:	2b00      	cmp	r3, #0
   15bb6:	d00a      	beq.n	15bce <__gedf2+0x6a>
   15bb8:	e006      	b.n	15bc8 <__gedf2+0x64>
   15bba:	2d00      	cmp	r5, #0
   15bbc:	d102      	bne.n	15bc4 <__gedf2+0x60>
   15bbe:	4658      	mov	r0, fp
   15bc0:	4302      	orrs	r2, r0
   15bc2:	d001      	beq.n	15bc8 <__gedf2+0x64>
   15bc4:	4299      	cmp	r1, r3
   15bc6:	d018      	beq.n	15bfa <__gedf2+0x96>
   15bc8:	4248      	negs	r0, r1
   15bca:	2101      	movs	r1, #1
   15bcc:	4308      	orrs	r0, r1
   15bce:	bc3c      	pop	{r2, r3, r4, r5}
   15bd0:	4690      	mov	r8, r2
   15bd2:	4699      	mov	r9, r3
   15bd4:	46a2      	mov	sl, r4
   15bd6:	46ab      	mov	fp, r5
   15bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15bda:	2800      	cmp	r0, #0
   15bdc:	d0f2      	beq.n	15bc4 <__gedf2+0x60>
   15bde:	2001      	movs	r0, #1
   15be0:	3b01      	subs	r3, #1
   15be2:	4318      	orrs	r0, r3
   15be4:	e7f3      	b.n	15bce <__gedf2+0x6a>
   15be6:	0037      	movs	r7, r6
   15be8:	4307      	orrs	r7, r0
   15bea:	d0d1      	beq.n	15b90 <__gedf2+0x2c>
   15bec:	2002      	movs	r0, #2
   15bee:	4240      	negs	r0, r0
   15bf0:	e7ed      	b.n	15bce <__gedf2+0x6a>
   15bf2:	465f      	mov	r7, fp
   15bf4:	4317      	orrs	r7, r2
   15bf6:	d0ce      	beq.n	15b96 <__gedf2+0x32>
   15bf8:	e7f8      	b.n	15bec <__gedf2+0x88>
   15bfa:	42ac      	cmp	r4, r5
   15bfc:	dce4      	bgt.n	15bc8 <__gedf2+0x64>
   15bfe:	da03      	bge.n	15c08 <__gedf2+0xa4>
   15c00:	1e48      	subs	r0, r1, #1
   15c02:	2101      	movs	r1, #1
   15c04:	4308      	orrs	r0, r1
   15c06:	e7e2      	b.n	15bce <__gedf2+0x6a>
   15c08:	455e      	cmp	r6, fp
   15c0a:	d8dd      	bhi.n	15bc8 <__gedf2+0x64>
   15c0c:	d006      	beq.n	15c1c <__gedf2+0xb8>
   15c0e:	2000      	movs	r0, #0
   15c10:	455e      	cmp	r6, fp
   15c12:	d2dc      	bcs.n	15bce <__gedf2+0x6a>
   15c14:	2301      	movs	r3, #1
   15c16:	1e48      	subs	r0, r1, #1
   15c18:	4318      	orrs	r0, r3
   15c1a:	e7d8      	b.n	15bce <__gedf2+0x6a>
   15c1c:	45c4      	cmp	ip, r8
   15c1e:	d8d3      	bhi.n	15bc8 <__gedf2+0x64>
   15c20:	2000      	movs	r0, #0
   15c22:	45c4      	cmp	ip, r8
   15c24:	d3f6      	bcc.n	15c14 <__gedf2+0xb0>
   15c26:	e7d2      	b.n	15bce <__gedf2+0x6a>
   15c28:	000007ff 	.word	0x000007ff

00015c2c <__ledf2>:
   15c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   15c2e:	464e      	mov	r6, r9
   15c30:	4645      	mov	r5, r8
   15c32:	46de      	mov	lr, fp
   15c34:	4657      	mov	r7, sl
   15c36:	005c      	lsls	r4, r3, #1
   15c38:	b5e0      	push	{r5, r6, r7, lr}
   15c3a:	031f      	lsls	r7, r3, #12
   15c3c:	0fdb      	lsrs	r3, r3, #31
   15c3e:	4699      	mov	r9, r3
   15c40:	4b2a      	ldr	r3, [pc, #168]	; (15cec <__ledf2+0xc0>)
   15c42:	030e      	lsls	r6, r1, #12
   15c44:	004d      	lsls	r5, r1, #1
   15c46:	0fc9      	lsrs	r1, r1, #31
   15c48:	4684      	mov	ip, r0
   15c4a:	0b36      	lsrs	r6, r6, #12
   15c4c:	0d6d      	lsrs	r5, r5, #21
   15c4e:	468b      	mov	fp, r1
   15c50:	4690      	mov	r8, r2
   15c52:	0b3f      	lsrs	r7, r7, #12
   15c54:	0d64      	lsrs	r4, r4, #21
   15c56:	429d      	cmp	r5, r3
   15c58:	d020      	beq.n	15c9c <__ledf2+0x70>
   15c5a:	4b24      	ldr	r3, [pc, #144]	; (15cec <__ledf2+0xc0>)
   15c5c:	429c      	cmp	r4, r3
   15c5e:	d022      	beq.n	15ca6 <__ledf2+0x7a>
   15c60:	2d00      	cmp	r5, #0
   15c62:	d112      	bne.n	15c8a <__ledf2+0x5e>
   15c64:	4330      	orrs	r0, r6
   15c66:	4243      	negs	r3, r0
   15c68:	4143      	adcs	r3, r0
   15c6a:	b2db      	uxtb	r3, r3
   15c6c:	2c00      	cmp	r4, #0
   15c6e:	d01f      	beq.n	15cb0 <__ledf2+0x84>
   15c70:	2b00      	cmp	r3, #0
   15c72:	d00c      	beq.n	15c8e <__ledf2+0x62>
   15c74:	464b      	mov	r3, r9
   15c76:	2001      	movs	r0, #1
   15c78:	3b01      	subs	r3, #1
   15c7a:	4303      	orrs	r3, r0
   15c7c:	0018      	movs	r0, r3
   15c7e:	bc3c      	pop	{r2, r3, r4, r5}
   15c80:	4690      	mov	r8, r2
   15c82:	4699      	mov	r9, r3
   15c84:	46a2      	mov	sl, r4
   15c86:	46ab      	mov	fp, r5
   15c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15c8a:	2c00      	cmp	r4, #0
   15c8c:	d016      	beq.n	15cbc <__ledf2+0x90>
   15c8e:	45cb      	cmp	fp, r9
   15c90:	d017      	beq.n	15cc2 <__ledf2+0x96>
   15c92:	465b      	mov	r3, fp
   15c94:	4259      	negs	r1, r3
   15c96:	2301      	movs	r3, #1
   15c98:	430b      	orrs	r3, r1
   15c9a:	e7ef      	b.n	15c7c <__ledf2+0x50>
   15c9c:	0031      	movs	r1, r6
   15c9e:	2302      	movs	r3, #2
   15ca0:	4301      	orrs	r1, r0
   15ca2:	d1eb      	bne.n	15c7c <__ledf2+0x50>
   15ca4:	e7d9      	b.n	15c5a <__ledf2+0x2e>
   15ca6:	0039      	movs	r1, r7
   15ca8:	2302      	movs	r3, #2
   15caa:	4311      	orrs	r1, r2
   15cac:	d1e6      	bne.n	15c7c <__ledf2+0x50>
   15cae:	e7d7      	b.n	15c60 <__ledf2+0x34>
   15cb0:	433a      	orrs	r2, r7
   15cb2:	d1dd      	bne.n	15c70 <__ledf2+0x44>
   15cb4:	2300      	movs	r3, #0
   15cb6:	2800      	cmp	r0, #0
   15cb8:	d0e0      	beq.n	15c7c <__ledf2+0x50>
   15cba:	e7ea      	b.n	15c92 <__ledf2+0x66>
   15cbc:	433a      	orrs	r2, r7
   15cbe:	d1e6      	bne.n	15c8e <__ledf2+0x62>
   15cc0:	e7e7      	b.n	15c92 <__ledf2+0x66>
   15cc2:	42a5      	cmp	r5, r4
   15cc4:	dce5      	bgt.n	15c92 <__ledf2+0x66>
   15cc6:	db05      	blt.n	15cd4 <__ledf2+0xa8>
   15cc8:	42be      	cmp	r6, r7
   15cca:	d8e2      	bhi.n	15c92 <__ledf2+0x66>
   15ccc:	d007      	beq.n	15cde <__ledf2+0xb2>
   15cce:	2300      	movs	r3, #0
   15cd0:	42be      	cmp	r6, r7
   15cd2:	d2d3      	bcs.n	15c7c <__ledf2+0x50>
   15cd4:	4659      	mov	r1, fp
   15cd6:	2301      	movs	r3, #1
   15cd8:	3901      	subs	r1, #1
   15cda:	430b      	orrs	r3, r1
   15cdc:	e7ce      	b.n	15c7c <__ledf2+0x50>
   15cde:	45c4      	cmp	ip, r8
   15ce0:	d8d7      	bhi.n	15c92 <__ledf2+0x66>
   15ce2:	2300      	movs	r3, #0
   15ce4:	45c4      	cmp	ip, r8
   15ce6:	d3f5      	bcc.n	15cd4 <__ledf2+0xa8>
   15ce8:	e7c8      	b.n	15c7c <__ledf2+0x50>
   15cea:	46c0      	nop			; (mov r8, r8)
   15cec:	000007ff 	.word	0x000007ff

00015cf0 <__aeabi_dmul>:
   15cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
   15cf2:	4657      	mov	r7, sl
   15cf4:	4645      	mov	r5, r8
   15cf6:	46de      	mov	lr, fp
   15cf8:	464e      	mov	r6, r9
   15cfa:	b5e0      	push	{r5, r6, r7, lr}
   15cfc:	030c      	lsls	r4, r1, #12
   15cfe:	4698      	mov	r8, r3
   15d00:	004e      	lsls	r6, r1, #1
   15d02:	0b23      	lsrs	r3, r4, #12
   15d04:	b087      	sub	sp, #28
   15d06:	0007      	movs	r7, r0
   15d08:	4692      	mov	sl, r2
   15d0a:	469b      	mov	fp, r3
   15d0c:	0d76      	lsrs	r6, r6, #21
   15d0e:	0fcd      	lsrs	r5, r1, #31
   15d10:	2e00      	cmp	r6, #0
   15d12:	d06b      	beq.n	15dec <__aeabi_dmul+0xfc>
   15d14:	4b6d      	ldr	r3, [pc, #436]	; (15ecc <__aeabi_dmul+0x1dc>)
   15d16:	429e      	cmp	r6, r3
   15d18:	d035      	beq.n	15d86 <__aeabi_dmul+0x96>
   15d1a:	2480      	movs	r4, #128	; 0x80
   15d1c:	465b      	mov	r3, fp
   15d1e:	0f42      	lsrs	r2, r0, #29
   15d20:	0424      	lsls	r4, r4, #16
   15d22:	00db      	lsls	r3, r3, #3
   15d24:	4314      	orrs	r4, r2
   15d26:	431c      	orrs	r4, r3
   15d28:	00c3      	lsls	r3, r0, #3
   15d2a:	4699      	mov	r9, r3
   15d2c:	4b68      	ldr	r3, [pc, #416]	; (15ed0 <__aeabi_dmul+0x1e0>)
   15d2e:	46a3      	mov	fp, r4
   15d30:	469c      	mov	ip, r3
   15d32:	2300      	movs	r3, #0
   15d34:	2700      	movs	r7, #0
   15d36:	4466      	add	r6, ip
   15d38:	9302      	str	r3, [sp, #8]
   15d3a:	4643      	mov	r3, r8
   15d3c:	031c      	lsls	r4, r3, #12
   15d3e:	005a      	lsls	r2, r3, #1
   15d40:	0fdb      	lsrs	r3, r3, #31
   15d42:	4650      	mov	r0, sl
   15d44:	0b24      	lsrs	r4, r4, #12
   15d46:	0d52      	lsrs	r2, r2, #21
   15d48:	4698      	mov	r8, r3
   15d4a:	d100      	bne.n	15d4e <__aeabi_dmul+0x5e>
   15d4c:	e076      	b.n	15e3c <__aeabi_dmul+0x14c>
   15d4e:	4b5f      	ldr	r3, [pc, #380]	; (15ecc <__aeabi_dmul+0x1dc>)
   15d50:	429a      	cmp	r2, r3
   15d52:	d06d      	beq.n	15e30 <__aeabi_dmul+0x140>
   15d54:	2380      	movs	r3, #128	; 0x80
   15d56:	0f41      	lsrs	r1, r0, #29
   15d58:	041b      	lsls	r3, r3, #16
   15d5a:	430b      	orrs	r3, r1
   15d5c:	495c      	ldr	r1, [pc, #368]	; (15ed0 <__aeabi_dmul+0x1e0>)
   15d5e:	00e4      	lsls	r4, r4, #3
   15d60:	468c      	mov	ip, r1
   15d62:	431c      	orrs	r4, r3
   15d64:	00c3      	lsls	r3, r0, #3
   15d66:	2000      	movs	r0, #0
   15d68:	4462      	add	r2, ip
   15d6a:	4641      	mov	r1, r8
   15d6c:	18b6      	adds	r6, r6, r2
   15d6e:	4069      	eors	r1, r5
   15d70:	1c72      	adds	r2, r6, #1
   15d72:	9101      	str	r1, [sp, #4]
   15d74:	4694      	mov	ip, r2
   15d76:	4307      	orrs	r7, r0
   15d78:	2f0f      	cmp	r7, #15
   15d7a:	d900      	bls.n	15d7e <__aeabi_dmul+0x8e>
   15d7c:	e0b0      	b.n	15ee0 <__aeabi_dmul+0x1f0>
   15d7e:	4a55      	ldr	r2, [pc, #340]	; (15ed4 <__aeabi_dmul+0x1e4>)
   15d80:	00bf      	lsls	r7, r7, #2
   15d82:	59d2      	ldr	r2, [r2, r7]
   15d84:	4697      	mov	pc, r2
   15d86:	465b      	mov	r3, fp
   15d88:	4303      	orrs	r3, r0
   15d8a:	4699      	mov	r9, r3
   15d8c:	d000      	beq.n	15d90 <__aeabi_dmul+0xa0>
   15d8e:	e087      	b.n	15ea0 <__aeabi_dmul+0x1b0>
   15d90:	2300      	movs	r3, #0
   15d92:	469b      	mov	fp, r3
   15d94:	3302      	adds	r3, #2
   15d96:	2708      	movs	r7, #8
   15d98:	9302      	str	r3, [sp, #8]
   15d9a:	e7ce      	b.n	15d3a <__aeabi_dmul+0x4a>
   15d9c:	4642      	mov	r2, r8
   15d9e:	9201      	str	r2, [sp, #4]
   15da0:	2802      	cmp	r0, #2
   15da2:	d067      	beq.n	15e74 <__aeabi_dmul+0x184>
   15da4:	2803      	cmp	r0, #3
   15da6:	d100      	bne.n	15daa <__aeabi_dmul+0xba>
   15da8:	e20e      	b.n	161c8 <__aeabi_dmul+0x4d8>
   15daa:	2801      	cmp	r0, #1
   15dac:	d000      	beq.n	15db0 <__aeabi_dmul+0xc0>
   15dae:	e162      	b.n	16076 <__aeabi_dmul+0x386>
   15db0:	2300      	movs	r3, #0
   15db2:	2400      	movs	r4, #0
   15db4:	2200      	movs	r2, #0
   15db6:	4699      	mov	r9, r3
   15db8:	9901      	ldr	r1, [sp, #4]
   15dba:	4001      	ands	r1, r0
   15dbc:	b2cd      	uxtb	r5, r1
   15dbe:	2100      	movs	r1, #0
   15dc0:	0312      	lsls	r2, r2, #12
   15dc2:	0d0b      	lsrs	r3, r1, #20
   15dc4:	0b12      	lsrs	r2, r2, #12
   15dc6:	051b      	lsls	r3, r3, #20
   15dc8:	4313      	orrs	r3, r2
   15dca:	4a43      	ldr	r2, [pc, #268]	; (15ed8 <__aeabi_dmul+0x1e8>)
   15dcc:	0524      	lsls	r4, r4, #20
   15dce:	4013      	ands	r3, r2
   15dd0:	431c      	orrs	r4, r3
   15dd2:	0064      	lsls	r4, r4, #1
   15dd4:	07ed      	lsls	r5, r5, #31
   15dd6:	0864      	lsrs	r4, r4, #1
   15dd8:	432c      	orrs	r4, r5
   15dda:	4648      	mov	r0, r9
   15ddc:	0021      	movs	r1, r4
   15dde:	b007      	add	sp, #28
   15de0:	bc3c      	pop	{r2, r3, r4, r5}
   15de2:	4690      	mov	r8, r2
   15de4:	4699      	mov	r9, r3
   15de6:	46a2      	mov	sl, r4
   15de8:	46ab      	mov	fp, r5
   15dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15dec:	4303      	orrs	r3, r0
   15dee:	4699      	mov	r9, r3
   15df0:	d04f      	beq.n	15e92 <__aeabi_dmul+0x1a2>
   15df2:	465b      	mov	r3, fp
   15df4:	2b00      	cmp	r3, #0
   15df6:	d100      	bne.n	15dfa <__aeabi_dmul+0x10a>
   15df8:	e189      	b.n	1610e <__aeabi_dmul+0x41e>
   15dfa:	4658      	mov	r0, fp
   15dfc:	f000 fe98 	bl	16b30 <__clzsi2>
   15e00:	0003      	movs	r3, r0
   15e02:	3b0b      	subs	r3, #11
   15e04:	2b1c      	cmp	r3, #28
   15e06:	dd00      	ble.n	15e0a <__aeabi_dmul+0x11a>
   15e08:	e17a      	b.n	16100 <__aeabi_dmul+0x410>
   15e0a:	221d      	movs	r2, #29
   15e0c:	1ad3      	subs	r3, r2, r3
   15e0e:	003a      	movs	r2, r7
   15e10:	0001      	movs	r1, r0
   15e12:	465c      	mov	r4, fp
   15e14:	40da      	lsrs	r2, r3
   15e16:	3908      	subs	r1, #8
   15e18:	408c      	lsls	r4, r1
   15e1a:	0013      	movs	r3, r2
   15e1c:	408f      	lsls	r7, r1
   15e1e:	4323      	orrs	r3, r4
   15e20:	469b      	mov	fp, r3
   15e22:	46b9      	mov	r9, r7
   15e24:	2300      	movs	r3, #0
   15e26:	4e2d      	ldr	r6, [pc, #180]	; (15edc <__aeabi_dmul+0x1ec>)
   15e28:	2700      	movs	r7, #0
   15e2a:	1a36      	subs	r6, r6, r0
   15e2c:	9302      	str	r3, [sp, #8]
   15e2e:	e784      	b.n	15d3a <__aeabi_dmul+0x4a>
   15e30:	4653      	mov	r3, sl
   15e32:	4323      	orrs	r3, r4
   15e34:	d12a      	bne.n	15e8c <__aeabi_dmul+0x19c>
   15e36:	2400      	movs	r4, #0
   15e38:	2002      	movs	r0, #2
   15e3a:	e796      	b.n	15d6a <__aeabi_dmul+0x7a>
   15e3c:	4653      	mov	r3, sl
   15e3e:	4323      	orrs	r3, r4
   15e40:	d020      	beq.n	15e84 <__aeabi_dmul+0x194>
   15e42:	2c00      	cmp	r4, #0
   15e44:	d100      	bne.n	15e48 <__aeabi_dmul+0x158>
   15e46:	e157      	b.n	160f8 <__aeabi_dmul+0x408>
   15e48:	0020      	movs	r0, r4
   15e4a:	f000 fe71 	bl	16b30 <__clzsi2>
   15e4e:	0003      	movs	r3, r0
   15e50:	3b0b      	subs	r3, #11
   15e52:	2b1c      	cmp	r3, #28
   15e54:	dd00      	ble.n	15e58 <__aeabi_dmul+0x168>
   15e56:	e149      	b.n	160ec <__aeabi_dmul+0x3fc>
   15e58:	211d      	movs	r1, #29
   15e5a:	1acb      	subs	r3, r1, r3
   15e5c:	4651      	mov	r1, sl
   15e5e:	0002      	movs	r2, r0
   15e60:	40d9      	lsrs	r1, r3
   15e62:	4653      	mov	r3, sl
   15e64:	3a08      	subs	r2, #8
   15e66:	4094      	lsls	r4, r2
   15e68:	4093      	lsls	r3, r2
   15e6a:	430c      	orrs	r4, r1
   15e6c:	4a1b      	ldr	r2, [pc, #108]	; (15edc <__aeabi_dmul+0x1ec>)
   15e6e:	1a12      	subs	r2, r2, r0
   15e70:	2000      	movs	r0, #0
   15e72:	e77a      	b.n	15d6a <__aeabi_dmul+0x7a>
   15e74:	2501      	movs	r5, #1
   15e76:	9b01      	ldr	r3, [sp, #4]
   15e78:	4c14      	ldr	r4, [pc, #80]	; (15ecc <__aeabi_dmul+0x1dc>)
   15e7a:	401d      	ands	r5, r3
   15e7c:	2300      	movs	r3, #0
   15e7e:	2200      	movs	r2, #0
   15e80:	4699      	mov	r9, r3
   15e82:	e79c      	b.n	15dbe <__aeabi_dmul+0xce>
   15e84:	2400      	movs	r4, #0
   15e86:	2200      	movs	r2, #0
   15e88:	2001      	movs	r0, #1
   15e8a:	e76e      	b.n	15d6a <__aeabi_dmul+0x7a>
   15e8c:	4653      	mov	r3, sl
   15e8e:	2003      	movs	r0, #3
   15e90:	e76b      	b.n	15d6a <__aeabi_dmul+0x7a>
   15e92:	2300      	movs	r3, #0
   15e94:	469b      	mov	fp, r3
   15e96:	3301      	adds	r3, #1
   15e98:	2704      	movs	r7, #4
   15e9a:	2600      	movs	r6, #0
   15e9c:	9302      	str	r3, [sp, #8]
   15e9e:	e74c      	b.n	15d3a <__aeabi_dmul+0x4a>
   15ea0:	2303      	movs	r3, #3
   15ea2:	4681      	mov	r9, r0
   15ea4:	270c      	movs	r7, #12
   15ea6:	9302      	str	r3, [sp, #8]
   15ea8:	e747      	b.n	15d3a <__aeabi_dmul+0x4a>
   15eaa:	2280      	movs	r2, #128	; 0x80
   15eac:	2300      	movs	r3, #0
   15eae:	2500      	movs	r5, #0
   15eb0:	0312      	lsls	r2, r2, #12
   15eb2:	4699      	mov	r9, r3
   15eb4:	4c05      	ldr	r4, [pc, #20]	; (15ecc <__aeabi_dmul+0x1dc>)
   15eb6:	e782      	b.n	15dbe <__aeabi_dmul+0xce>
   15eb8:	465c      	mov	r4, fp
   15eba:	464b      	mov	r3, r9
   15ebc:	9802      	ldr	r0, [sp, #8]
   15ebe:	e76f      	b.n	15da0 <__aeabi_dmul+0xb0>
   15ec0:	465c      	mov	r4, fp
   15ec2:	464b      	mov	r3, r9
   15ec4:	9501      	str	r5, [sp, #4]
   15ec6:	9802      	ldr	r0, [sp, #8]
   15ec8:	e76a      	b.n	15da0 <__aeabi_dmul+0xb0>
   15eca:	46c0      	nop			; (mov r8, r8)
   15ecc:	000007ff 	.word	0x000007ff
   15ed0:	fffffc01 	.word	0xfffffc01
   15ed4:	000191b8 	.word	0x000191b8
   15ed8:	800fffff 	.word	0x800fffff
   15edc:	fffffc0d 	.word	0xfffffc0d
   15ee0:	464a      	mov	r2, r9
   15ee2:	4649      	mov	r1, r9
   15ee4:	0c17      	lsrs	r7, r2, #16
   15ee6:	0c1a      	lsrs	r2, r3, #16
   15ee8:	041b      	lsls	r3, r3, #16
   15eea:	0c1b      	lsrs	r3, r3, #16
   15eec:	0408      	lsls	r0, r1, #16
   15eee:	0019      	movs	r1, r3
   15ef0:	0c00      	lsrs	r0, r0, #16
   15ef2:	4341      	muls	r1, r0
   15ef4:	0015      	movs	r5, r2
   15ef6:	4688      	mov	r8, r1
   15ef8:	0019      	movs	r1, r3
   15efa:	437d      	muls	r5, r7
   15efc:	4379      	muls	r1, r7
   15efe:	9503      	str	r5, [sp, #12]
   15f00:	4689      	mov	r9, r1
   15f02:	0029      	movs	r1, r5
   15f04:	0015      	movs	r5, r2
   15f06:	4345      	muls	r5, r0
   15f08:	444d      	add	r5, r9
   15f0a:	9502      	str	r5, [sp, #8]
   15f0c:	4645      	mov	r5, r8
   15f0e:	0c2d      	lsrs	r5, r5, #16
   15f10:	46aa      	mov	sl, r5
   15f12:	9d02      	ldr	r5, [sp, #8]
   15f14:	4455      	add	r5, sl
   15f16:	45a9      	cmp	r9, r5
   15f18:	d906      	bls.n	15f28 <__aeabi_dmul+0x238>
   15f1a:	468a      	mov	sl, r1
   15f1c:	2180      	movs	r1, #128	; 0x80
   15f1e:	0249      	lsls	r1, r1, #9
   15f20:	4689      	mov	r9, r1
   15f22:	44ca      	add	sl, r9
   15f24:	4651      	mov	r1, sl
   15f26:	9103      	str	r1, [sp, #12]
   15f28:	0c29      	lsrs	r1, r5, #16
   15f2a:	9104      	str	r1, [sp, #16]
   15f2c:	4641      	mov	r1, r8
   15f2e:	0409      	lsls	r1, r1, #16
   15f30:	042d      	lsls	r5, r5, #16
   15f32:	0c09      	lsrs	r1, r1, #16
   15f34:	4688      	mov	r8, r1
   15f36:	0029      	movs	r1, r5
   15f38:	0c25      	lsrs	r5, r4, #16
   15f3a:	0424      	lsls	r4, r4, #16
   15f3c:	4441      	add	r1, r8
   15f3e:	0c24      	lsrs	r4, r4, #16
   15f40:	9105      	str	r1, [sp, #20]
   15f42:	0021      	movs	r1, r4
   15f44:	4341      	muls	r1, r0
   15f46:	4688      	mov	r8, r1
   15f48:	0021      	movs	r1, r4
   15f4a:	4379      	muls	r1, r7
   15f4c:	468a      	mov	sl, r1
   15f4e:	4368      	muls	r0, r5
   15f50:	4641      	mov	r1, r8
   15f52:	4450      	add	r0, sl
   15f54:	4681      	mov	r9, r0
   15f56:	0c08      	lsrs	r0, r1, #16
   15f58:	4448      	add	r0, r9
   15f5a:	436f      	muls	r7, r5
   15f5c:	4582      	cmp	sl, r0
   15f5e:	d903      	bls.n	15f68 <__aeabi_dmul+0x278>
   15f60:	2180      	movs	r1, #128	; 0x80
   15f62:	0249      	lsls	r1, r1, #9
   15f64:	4689      	mov	r9, r1
   15f66:	444f      	add	r7, r9
   15f68:	0c01      	lsrs	r1, r0, #16
   15f6a:	4689      	mov	r9, r1
   15f6c:	0039      	movs	r1, r7
   15f6e:	4449      	add	r1, r9
   15f70:	9102      	str	r1, [sp, #8]
   15f72:	4641      	mov	r1, r8
   15f74:	040f      	lsls	r7, r1, #16
   15f76:	9904      	ldr	r1, [sp, #16]
   15f78:	0c3f      	lsrs	r7, r7, #16
   15f7a:	4688      	mov	r8, r1
   15f7c:	0400      	lsls	r0, r0, #16
   15f7e:	19c0      	adds	r0, r0, r7
   15f80:	4480      	add	r8, r0
   15f82:	4641      	mov	r1, r8
   15f84:	9104      	str	r1, [sp, #16]
   15f86:	4659      	mov	r1, fp
   15f88:	0c0f      	lsrs	r7, r1, #16
   15f8a:	0409      	lsls	r1, r1, #16
   15f8c:	0c09      	lsrs	r1, r1, #16
   15f8e:	4688      	mov	r8, r1
   15f90:	4359      	muls	r1, r3
   15f92:	468a      	mov	sl, r1
   15f94:	0039      	movs	r1, r7
   15f96:	4351      	muls	r1, r2
   15f98:	4689      	mov	r9, r1
   15f9a:	4641      	mov	r1, r8
   15f9c:	434a      	muls	r2, r1
   15f9e:	4651      	mov	r1, sl
   15fa0:	0c09      	lsrs	r1, r1, #16
   15fa2:	468b      	mov	fp, r1
   15fa4:	437b      	muls	r3, r7
   15fa6:	18d2      	adds	r2, r2, r3
   15fa8:	445a      	add	r2, fp
   15faa:	4293      	cmp	r3, r2
   15fac:	d903      	bls.n	15fb6 <__aeabi_dmul+0x2c6>
   15fae:	2380      	movs	r3, #128	; 0x80
   15fb0:	025b      	lsls	r3, r3, #9
   15fb2:	469b      	mov	fp, r3
   15fb4:	44d9      	add	r9, fp
   15fb6:	4651      	mov	r1, sl
   15fb8:	0409      	lsls	r1, r1, #16
   15fba:	0c09      	lsrs	r1, r1, #16
   15fbc:	468a      	mov	sl, r1
   15fbe:	4641      	mov	r1, r8
   15fc0:	4361      	muls	r1, r4
   15fc2:	437c      	muls	r4, r7
   15fc4:	0c13      	lsrs	r3, r2, #16
   15fc6:	0412      	lsls	r2, r2, #16
   15fc8:	444b      	add	r3, r9
   15fca:	4452      	add	r2, sl
   15fcc:	46a1      	mov	r9, r4
   15fce:	468a      	mov	sl, r1
   15fd0:	003c      	movs	r4, r7
   15fd2:	4641      	mov	r1, r8
   15fd4:	436c      	muls	r4, r5
   15fd6:	434d      	muls	r5, r1
   15fd8:	4651      	mov	r1, sl
   15fda:	444d      	add	r5, r9
   15fdc:	0c0f      	lsrs	r7, r1, #16
   15fde:	197d      	adds	r5, r7, r5
   15fe0:	45a9      	cmp	r9, r5
   15fe2:	d903      	bls.n	15fec <__aeabi_dmul+0x2fc>
   15fe4:	2180      	movs	r1, #128	; 0x80
   15fe6:	0249      	lsls	r1, r1, #9
   15fe8:	4688      	mov	r8, r1
   15fea:	4444      	add	r4, r8
   15fec:	9f04      	ldr	r7, [sp, #16]
   15fee:	9903      	ldr	r1, [sp, #12]
   15ff0:	46b8      	mov	r8, r7
   15ff2:	4441      	add	r1, r8
   15ff4:	468b      	mov	fp, r1
   15ff6:	4583      	cmp	fp, r0
   15ff8:	4180      	sbcs	r0, r0
   15ffa:	4241      	negs	r1, r0
   15ffc:	4688      	mov	r8, r1
   15ffe:	4651      	mov	r1, sl
   16000:	0408      	lsls	r0, r1, #16
   16002:	042f      	lsls	r7, r5, #16
   16004:	0c00      	lsrs	r0, r0, #16
   16006:	183f      	adds	r7, r7, r0
   16008:	4658      	mov	r0, fp
   1600a:	9902      	ldr	r1, [sp, #8]
   1600c:	1810      	adds	r0, r2, r0
   1600e:	4689      	mov	r9, r1
   16010:	4290      	cmp	r0, r2
   16012:	4192      	sbcs	r2, r2
   16014:	444f      	add	r7, r9
   16016:	46ba      	mov	sl, r7
   16018:	4252      	negs	r2, r2
   1601a:	4699      	mov	r9, r3
   1601c:	4693      	mov	fp, r2
   1601e:	44c2      	add	sl, r8
   16020:	44d1      	add	r9, sl
   16022:	44cb      	add	fp, r9
   16024:	428f      	cmp	r7, r1
   16026:	41bf      	sbcs	r7, r7
   16028:	45c2      	cmp	sl, r8
   1602a:	4189      	sbcs	r1, r1
   1602c:	4599      	cmp	r9, r3
   1602e:	419b      	sbcs	r3, r3
   16030:	4593      	cmp	fp, r2
   16032:	4192      	sbcs	r2, r2
   16034:	427f      	negs	r7, r7
   16036:	4249      	negs	r1, r1
   16038:	0c2d      	lsrs	r5, r5, #16
   1603a:	4252      	negs	r2, r2
   1603c:	430f      	orrs	r7, r1
   1603e:	425b      	negs	r3, r3
   16040:	4313      	orrs	r3, r2
   16042:	197f      	adds	r7, r7, r5
   16044:	18ff      	adds	r7, r7, r3
   16046:	465b      	mov	r3, fp
   16048:	193c      	adds	r4, r7, r4
   1604a:	0ddb      	lsrs	r3, r3, #23
   1604c:	9a05      	ldr	r2, [sp, #20]
   1604e:	0264      	lsls	r4, r4, #9
   16050:	431c      	orrs	r4, r3
   16052:	0243      	lsls	r3, r0, #9
   16054:	4313      	orrs	r3, r2
   16056:	1e5d      	subs	r5, r3, #1
   16058:	41ab      	sbcs	r3, r5
   1605a:	465a      	mov	r2, fp
   1605c:	0dc0      	lsrs	r0, r0, #23
   1605e:	4303      	orrs	r3, r0
   16060:	0252      	lsls	r2, r2, #9
   16062:	4313      	orrs	r3, r2
   16064:	01e2      	lsls	r2, r4, #7
   16066:	d556      	bpl.n	16116 <__aeabi_dmul+0x426>
   16068:	2001      	movs	r0, #1
   1606a:	085a      	lsrs	r2, r3, #1
   1606c:	4003      	ands	r3, r0
   1606e:	4313      	orrs	r3, r2
   16070:	07e2      	lsls	r2, r4, #31
   16072:	4313      	orrs	r3, r2
   16074:	0864      	lsrs	r4, r4, #1
   16076:	485a      	ldr	r0, [pc, #360]	; (161e0 <__aeabi_dmul+0x4f0>)
   16078:	4460      	add	r0, ip
   1607a:	2800      	cmp	r0, #0
   1607c:	dd4d      	ble.n	1611a <__aeabi_dmul+0x42a>
   1607e:	075a      	lsls	r2, r3, #29
   16080:	d009      	beq.n	16096 <__aeabi_dmul+0x3a6>
   16082:	220f      	movs	r2, #15
   16084:	401a      	ands	r2, r3
   16086:	2a04      	cmp	r2, #4
   16088:	d005      	beq.n	16096 <__aeabi_dmul+0x3a6>
   1608a:	1d1a      	adds	r2, r3, #4
   1608c:	429a      	cmp	r2, r3
   1608e:	419b      	sbcs	r3, r3
   16090:	425b      	negs	r3, r3
   16092:	18e4      	adds	r4, r4, r3
   16094:	0013      	movs	r3, r2
   16096:	01e2      	lsls	r2, r4, #7
   16098:	d504      	bpl.n	160a4 <__aeabi_dmul+0x3b4>
   1609a:	2080      	movs	r0, #128	; 0x80
   1609c:	4a51      	ldr	r2, [pc, #324]	; (161e4 <__aeabi_dmul+0x4f4>)
   1609e:	00c0      	lsls	r0, r0, #3
   160a0:	4014      	ands	r4, r2
   160a2:	4460      	add	r0, ip
   160a4:	4a50      	ldr	r2, [pc, #320]	; (161e8 <__aeabi_dmul+0x4f8>)
   160a6:	4290      	cmp	r0, r2
   160a8:	dd00      	ble.n	160ac <__aeabi_dmul+0x3bc>
   160aa:	e6e3      	b.n	15e74 <__aeabi_dmul+0x184>
   160ac:	2501      	movs	r5, #1
   160ae:	08db      	lsrs	r3, r3, #3
   160b0:	0762      	lsls	r2, r4, #29
   160b2:	431a      	orrs	r2, r3
   160b4:	0264      	lsls	r4, r4, #9
   160b6:	9b01      	ldr	r3, [sp, #4]
   160b8:	4691      	mov	r9, r2
   160ba:	0b22      	lsrs	r2, r4, #12
   160bc:	0544      	lsls	r4, r0, #21
   160be:	0d64      	lsrs	r4, r4, #21
   160c0:	401d      	ands	r5, r3
   160c2:	e67c      	b.n	15dbe <__aeabi_dmul+0xce>
   160c4:	2280      	movs	r2, #128	; 0x80
   160c6:	4659      	mov	r1, fp
   160c8:	0312      	lsls	r2, r2, #12
   160ca:	4211      	tst	r1, r2
   160cc:	d008      	beq.n	160e0 <__aeabi_dmul+0x3f0>
   160ce:	4214      	tst	r4, r2
   160d0:	d106      	bne.n	160e0 <__aeabi_dmul+0x3f0>
   160d2:	4322      	orrs	r2, r4
   160d4:	0312      	lsls	r2, r2, #12
   160d6:	0b12      	lsrs	r2, r2, #12
   160d8:	4645      	mov	r5, r8
   160da:	4699      	mov	r9, r3
   160dc:	4c43      	ldr	r4, [pc, #268]	; (161ec <__aeabi_dmul+0x4fc>)
   160de:	e66e      	b.n	15dbe <__aeabi_dmul+0xce>
   160e0:	465b      	mov	r3, fp
   160e2:	431a      	orrs	r2, r3
   160e4:	0312      	lsls	r2, r2, #12
   160e6:	0b12      	lsrs	r2, r2, #12
   160e8:	4c40      	ldr	r4, [pc, #256]	; (161ec <__aeabi_dmul+0x4fc>)
   160ea:	e668      	b.n	15dbe <__aeabi_dmul+0xce>
   160ec:	0003      	movs	r3, r0
   160ee:	4654      	mov	r4, sl
   160f0:	3b28      	subs	r3, #40	; 0x28
   160f2:	409c      	lsls	r4, r3
   160f4:	2300      	movs	r3, #0
   160f6:	e6b9      	b.n	15e6c <__aeabi_dmul+0x17c>
   160f8:	f000 fd1a 	bl	16b30 <__clzsi2>
   160fc:	3020      	adds	r0, #32
   160fe:	e6a6      	b.n	15e4e <__aeabi_dmul+0x15e>
   16100:	0003      	movs	r3, r0
   16102:	3b28      	subs	r3, #40	; 0x28
   16104:	409f      	lsls	r7, r3
   16106:	2300      	movs	r3, #0
   16108:	46bb      	mov	fp, r7
   1610a:	4699      	mov	r9, r3
   1610c:	e68a      	b.n	15e24 <__aeabi_dmul+0x134>
   1610e:	f000 fd0f 	bl	16b30 <__clzsi2>
   16112:	3020      	adds	r0, #32
   16114:	e674      	b.n	15e00 <__aeabi_dmul+0x110>
   16116:	46b4      	mov	ip, r6
   16118:	e7ad      	b.n	16076 <__aeabi_dmul+0x386>
   1611a:	2501      	movs	r5, #1
   1611c:	1a2a      	subs	r2, r5, r0
   1611e:	2a38      	cmp	r2, #56	; 0x38
   16120:	dd06      	ble.n	16130 <__aeabi_dmul+0x440>
   16122:	9b01      	ldr	r3, [sp, #4]
   16124:	2400      	movs	r4, #0
   16126:	401d      	ands	r5, r3
   16128:	2300      	movs	r3, #0
   1612a:	2200      	movs	r2, #0
   1612c:	4699      	mov	r9, r3
   1612e:	e646      	b.n	15dbe <__aeabi_dmul+0xce>
   16130:	2a1f      	cmp	r2, #31
   16132:	dc21      	bgt.n	16178 <__aeabi_dmul+0x488>
   16134:	2520      	movs	r5, #32
   16136:	0020      	movs	r0, r4
   16138:	1aad      	subs	r5, r5, r2
   1613a:	001e      	movs	r6, r3
   1613c:	40ab      	lsls	r3, r5
   1613e:	40a8      	lsls	r0, r5
   16140:	40d6      	lsrs	r6, r2
   16142:	1e5d      	subs	r5, r3, #1
   16144:	41ab      	sbcs	r3, r5
   16146:	4330      	orrs	r0, r6
   16148:	4318      	orrs	r0, r3
   1614a:	40d4      	lsrs	r4, r2
   1614c:	0743      	lsls	r3, r0, #29
   1614e:	d009      	beq.n	16164 <__aeabi_dmul+0x474>
   16150:	230f      	movs	r3, #15
   16152:	4003      	ands	r3, r0
   16154:	2b04      	cmp	r3, #4
   16156:	d005      	beq.n	16164 <__aeabi_dmul+0x474>
   16158:	0003      	movs	r3, r0
   1615a:	1d18      	adds	r0, r3, #4
   1615c:	4298      	cmp	r0, r3
   1615e:	419b      	sbcs	r3, r3
   16160:	425b      	negs	r3, r3
   16162:	18e4      	adds	r4, r4, r3
   16164:	0223      	lsls	r3, r4, #8
   16166:	d521      	bpl.n	161ac <__aeabi_dmul+0x4bc>
   16168:	2501      	movs	r5, #1
   1616a:	9b01      	ldr	r3, [sp, #4]
   1616c:	2401      	movs	r4, #1
   1616e:	401d      	ands	r5, r3
   16170:	2300      	movs	r3, #0
   16172:	2200      	movs	r2, #0
   16174:	4699      	mov	r9, r3
   16176:	e622      	b.n	15dbe <__aeabi_dmul+0xce>
   16178:	251f      	movs	r5, #31
   1617a:	0021      	movs	r1, r4
   1617c:	426d      	negs	r5, r5
   1617e:	1a28      	subs	r0, r5, r0
   16180:	40c1      	lsrs	r1, r0
   16182:	0008      	movs	r0, r1
   16184:	2a20      	cmp	r2, #32
   16186:	d01d      	beq.n	161c4 <__aeabi_dmul+0x4d4>
   16188:	355f      	adds	r5, #95	; 0x5f
   1618a:	1aaa      	subs	r2, r5, r2
   1618c:	4094      	lsls	r4, r2
   1618e:	4323      	orrs	r3, r4
   16190:	1e5c      	subs	r4, r3, #1
   16192:	41a3      	sbcs	r3, r4
   16194:	2507      	movs	r5, #7
   16196:	4303      	orrs	r3, r0
   16198:	401d      	ands	r5, r3
   1619a:	2200      	movs	r2, #0
   1619c:	2d00      	cmp	r5, #0
   1619e:	d009      	beq.n	161b4 <__aeabi_dmul+0x4c4>
   161a0:	220f      	movs	r2, #15
   161a2:	2400      	movs	r4, #0
   161a4:	401a      	ands	r2, r3
   161a6:	0018      	movs	r0, r3
   161a8:	2a04      	cmp	r2, #4
   161aa:	d1d6      	bne.n	1615a <__aeabi_dmul+0x46a>
   161ac:	0003      	movs	r3, r0
   161ae:	0765      	lsls	r5, r4, #29
   161b0:	0264      	lsls	r4, r4, #9
   161b2:	0b22      	lsrs	r2, r4, #12
   161b4:	08db      	lsrs	r3, r3, #3
   161b6:	432b      	orrs	r3, r5
   161b8:	2501      	movs	r5, #1
   161ba:	4699      	mov	r9, r3
   161bc:	9b01      	ldr	r3, [sp, #4]
   161be:	2400      	movs	r4, #0
   161c0:	401d      	ands	r5, r3
   161c2:	e5fc      	b.n	15dbe <__aeabi_dmul+0xce>
   161c4:	2400      	movs	r4, #0
   161c6:	e7e2      	b.n	1618e <__aeabi_dmul+0x49e>
   161c8:	2280      	movs	r2, #128	; 0x80
   161ca:	2501      	movs	r5, #1
   161cc:	0312      	lsls	r2, r2, #12
   161ce:	4322      	orrs	r2, r4
   161d0:	9901      	ldr	r1, [sp, #4]
   161d2:	0312      	lsls	r2, r2, #12
   161d4:	0b12      	lsrs	r2, r2, #12
   161d6:	400d      	ands	r5, r1
   161d8:	4699      	mov	r9, r3
   161da:	4c04      	ldr	r4, [pc, #16]	; (161ec <__aeabi_dmul+0x4fc>)
   161dc:	e5ef      	b.n	15dbe <__aeabi_dmul+0xce>
   161de:	46c0      	nop			; (mov r8, r8)
   161e0:	000003ff 	.word	0x000003ff
   161e4:	feffffff 	.word	0xfeffffff
   161e8:	000007fe 	.word	0x000007fe
   161ec:	000007ff 	.word	0x000007ff

000161f0 <__aeabi_dsub>:
   161f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   161f2:	4646      	mov	r6, r8
   161f4:	46d6      	mov	lr, sl
   161f6:	464f      	mov	r7, r9
   161f8:	030c      	lsls	r4, r1, #12
   161fa:	b5c0      	push	{r6, r7, lr}
   161fc:	0fcd      	lsrs	r5, r1, #31
   161fe:	004e      	lsls	r6, r1, #1
   16200:	0a61      	lsrs	r1, r4, #9
   16202:	0f44      	lsrs	r4, r0, #29
   16204:	430c      	orrs	r4, r1
   16206:	00c1      	lsls	r1, r0, #3
   16208:	0058      	lsls	r0, r3, #1
   1620a:	0d40      	lsrs	r0, r0, #21
   1620c:	4684      	mov	ip, r0
   1620e:	468a      	mov	sl, r1
   16210:	000f      	movs	r7, r1
   16212:	0319      	lsls	r1, r3, #12
   16214:	0f50      	lsrs	r0, r2, #29
   16216:	0a49      	lsrs	r1, r1, #9
   16218:	4301      	orrs	r1, r0
   1621a:	48c6      	ldr	r0, [pc, #792]	; (16534 <__aeabi_dsub+0x344>)
   1621c:	0d76      	lsrs	r6, r6, #21
   1621e:	46a8      	mov	r8, r5
   16220:	0fdb      	lsrs	r3, r3, #31
   16222:	00d2      	lsls	r2, r2, #3
   16224:	4584      	cmp	ip, r0
   16226:	d100      	bne.n	1622a <__aeabi_dsub+0x3a>
   16228:	e0d8      	b.n	163dc <__aeabi_dsub+0x1ec>
   1622a:	2001      	movs	r0, #1
   1622c:	4043      	eors	r3, r0
   1622e:	42ab      	cmp	r3, r5
   16230:	d100      	bne.n	16234 <__aeabi_dsub+0x44>
   16232:	e0a6      	b.n	16382 <__aeabi_dsub+0x192>
   16234:	4660      	mov	r0, ip
   16236:	1a35      	subs	r5, r6, r0
   16238:	2d00      	cmp	r5, #0
   1623a:	dc00      	bgt.n	1623e <__aeabi_dsub+0x4e>
   1623c:	e105      	b.n	1644a <__aeabi_dsub+0x25a>
   1623e:	2800      	cmp	r0, #0
   16240:	d110      	bne.n	16264 <__aeabi_dsub+0x74>
   16242:	000b      	movs	r3, r1
   16244:	4313      	orrs	r3, r2
   16246:	d100      	bne.n	1624a <__aeabi_dsub+0x5a>
   16248:	e0d7      	b.n	163fa <__aeabi_dsub+0x20a>
   1624a:	1e6b      	subs	r3, r5, #1
   1624c:	2b00      	cmp	r3, #0
   1624e:	d000      	beq.n	16252 <__aeabi_dsub+0x62>
   16250:	e14b      	b.n	164ea <__aeabi_dsub+0x2fa>
   16252:	4653      	mov	r3, sl
   16254:	1a9f      	subs	r7, r3, r2
   16256:	45ba      	cmp	sl, r7
   16258:	4180      	sbcs	r0, r0
   1625a:	1a64      	subs	r4, r4, r1
   1625c:	4240      	negs	r0, r0
   1625e:	1a24      	subs	r4, r4, r0
   16260:	2601      	movs	r6, #1
   16262:	e01e      	b.n	162a2 <__aeabi_dsub+0xb2>
   16264:	4bb3      	ldr	r3, [pc, #716]	; (16534 <__aeabi_dsub+0x344>)
   16266:	429e      	cmp	r6, r3
   16268:	d048      	beq.n	162fc <__aeabi_dsub+0x10c>
   1626a:	2380      	movs	r3, #128	; 0x80
   1626c:	041b      	lsls	r3, r3, #16
   1626e:	4319      	orrs	r1, r3
   16270:	2d38      	cmp	r5, #56	; 0x38
   16272:	dd00      	ble.n	16276 <__aeabi_dsub+0x86>
   16274:	e119      	b.n	164aa <__aeabi_dsub+0x2ba>
   16276:	2d1f      	cmp	r5, #31
   16278:	dd00      	ble.n	1627c <__aeabi_dsub+0x8c>
   1627a:	e14c      	b.n	16516 <__aeabi_dsub+0x326>
   1627c:	2320      	movs	r3, #32
   1627e:	000f      	movs	r7, r1
   16280:	1b5b      	subs	r3, r3, r5
   16282:	0010      	movs	r0, r2
   16284:	409a      	lsls	r2, r3
   16286:	409f      	lsls	r7, r3
   16288:	40e8      	lsrs	r0, r5
   1628a:	1e53      	subs	r3, r2, #1
   1628c:	419a      	sbcs	r2, r3
   1628e:	40e9      	lsrs	r1, r5
   16290:	4307      	orrs	r7, r0
   16292:	4317      	orrs	r7, r2
   16294:	4653      	mov	r3, sl
   16296:	1bdf      	subs	r7, r3, r7
   16298:	1a61      	subs	r1, r4, r1
   1629a:	45ba      	cmp	sl, r7
   1629c:	41a4      	sbcs	r4, r4
   1629e:	4264      	negs	r4, r4
   162a0:	1b0c      	subs	r4, r1, r4
   162a2:	0223      	lsls	r3, r4, #8
   162a4:	d400      	bmi.n	162a8 <__aeabi_dsub+0xb8>
   162a6:	e0c5      	b.n	16434 <__aeabi_dsub+0x244>
   162a8:	0264      	lsls	r4, r4, #9
   162aa:	0a65      	lsrs	r5, r4, #9
   162ac:	2d00      	cmp	r5, #0
   162ae:	d100      	bne.n	162b2 <__aeabi_dsub+0xc2>
   162b0:	e0f6      	b.n	164a0 <__aeabi_dsub+0x2b0>
   162b2:	0028      	movs	r0, r5
   162b4:	f000 fc3c 	bl	16b30 <__clzsi2>
   162b8:	0003      	movs	r3, r0
   162ba:	3b08      	subs	r3, #8
   162bc:	2b1f      	cmp	r3, #31
   162be:	dd00      	ble.n	162c2 <__aeabi_dsub+0xd2>
   162c0:	e0e9      	b.n	16496 <__aeabi_dsub+0x2a6>
   162c2:	2220      	movs	r2, #32
   162c4:	003c      	movs	r4, r7
   162c6:	1ad2      	subs	r2, r2, r3
   162c8:	409d      	lsls	r5, r3
   162ca:	40d4      	lsrs	r4, r2
   162cc:	409f      	lsls	r7, r3
   162ce:	4325      	orrs	r5, r4
   162d0:	429e      	cmp	r6, r3
   162d2:	dd00      	ble.n	162d6 <__aeabi_dsub+0xe6>
   162d4:	e0db      	b.n	1648e <__aeabi_dsub+0x29e>
   162d6:	1b9e      	subs	r6, r3, r6
   162d8:	1c73      	adds	r3, r6, #1
   162da:	2b1f      	cmp	r3, #31
   162dc:	dd00      	ble.n	162e0 <__aeabi_dsub+0xf0>
   162de:	e10a      	b.n	164f6 <__aeabi_dsub+0x306>
   162e0:	2220      	movs	r2, #32
   162e2:	0038      	movs	r0, r7
   162e4:	1ad2      	subs	r2, r2, r3
   162e6:	0029      	movs	r1, r5
   162e8:	4097      	lsls	r7, r2
   162ea:	002c      	movs	r4, r5
   162ec:	4091      	lsls	r1, r2
   162ee:	40d8      	lsrs	r0, r3
   162f0:	1e7a      	subs	r2, r7, #1
   162f2:	4197      	sbcs	r7, r2
   162f4:	40dc      	lsrs	r4, r3
   162f6:	2600      	movs	r6, #0
   162f8:	4301      	orrs	r1, r0
   162fa:	430f      	orrs	r7, r1
   162fc:	077b      	lsls	r3, r7, #29
   162fe:	d009      	beq.n	16314 <__aeabi_dsub+0x124>
   16300:	230f      	movs	r3, #15
   16302:	403b      	ands	r3, r7
   16304:	2b04      	cmp	r3, #4
   16306:	d005      	beq.n	16314 <__aeabi_dsub+0x124>
   16308:	1d3b      	adds	r3, r7, #4
   1630a:	42bb      	cmp	r3, r7
   1630c:	41bf      	sbcs	r7, r7
   1630e:	427f      	negs	r7, r7
   16310:	19e4      	adds	r4, r4, r7
   16312:	001f      	movs	r7, r3
   16314:	0223      	lsls	r3, r4, #8
   16316:	d525      	bpl.n	16364 <__aeabi_dsub+0x174>
   16318:	4b86      	ldr	r3, [pc, #536]	; (16534 <__aeabi_dsub+0x344>)
   1631a:	3601      	adds	r6, #1
   1631c:	429e      	cmp	r6, r3
   1631e:	d100      	bne.n	16322 <__aeabi_dsub+0x132>
   16320:	e0af      	b.n	16482 <__aeabi_dsub+0x292>
   16322:	4b85      	ldr	r3, [pc, #532]	; (16538 <__aeabi_dsub+0x348>)
   16324:	2501      	movs	r5, #1
   16326:	401c      	ands	r4, r3
   16328:	4643      	mov	r3, r8
   1632a:	0762      	lsls	r2, r4, #29
   1632c:	08ff      	lsrs	r7, r7, #3
   1632e:	0264      	lsls	r4, r4, #9
   16330:	0576      	lsls	r6, r6, #21
   16332:	4317      	orrs	r7, r2
   16334:	0b24      	lsrs	r4, r4, #12
   16336:	0d76      	lsrs	r6, r6, #21
   16338:	401d      	ands	r5, r3
   1633a:	2100      	movs	r1, #0
   1633c:	0324      	lsls	r4, r4, #12
   1633e:	0b23      	lsrs	r3, r4, #12
   16340:	0d0c      	lsrs	r4, r1, #20
   16342:	4a7e      	ldr	r2, [pc, #504]	; (1653c <__aeabi_dsub+0x34c>)
   16344:	0524      	lsls	r4, r4, #20
   16346:	431c      	orrs	r4, r3
   16348:	4014      	ands	r4, r2
   1634a:	0533      	lsls	r3, r6, #20
   1634c:	4323      	orrs	r3, r4
   1634e:	005b      	lsls	r3, r3, #1
   16350:	07ed      	lsls	r5, r5, #31
   16352:	085b      	lsrs	r3, r3, #1
   16354:	432b      	orrs	r3, r5
   16356:	0038      	movs	r0, r7
   16358:	0019      	movs	r1, r3
   1635a:	bc1c      	pop	{r2, r3, r4}
   1635c:	4690      	mov	r8, r2
   1635e:	4699      	mov	r9, r3
   16360:	46a2      	mov	sl, r4
   16362:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16364:	2501      	movs	r5, #1
   16366:	4643      	mov	r3, r8
   16368:	0762      	lsls	r2, r4, #29
   1636a:	08ff      	lsrs	r7, r7, #3
   1636c:	4317      	orrs	r7, r2
   1636e:	08e4      	lsrs	r4, r4, #3
   16370:	401d      	ands	r5, r3
   16372:	4b70      	ldr	r3, [pc, #448]	; (16534 <__aeabi_dsub+0x344>)
   16374:	429e      	cmp	r6, r3
   16376:	d036      	beq.n	163e6 <__aeabi_dsub+0x1f6>
   16378:	0324      	lsls	r4, r4, #12
   1637a:	0576      	lsls	r6, r6, #21
   1637c:	0b24      	lsrs	r4, r4, #12
   1637e:	0d76      	lsrs	r6, r6, #21
   16380:	e7db      	b.n	1633a <__aeabi_dsub+0x14a>
   16382:	4663      	mov	r3, ip
   16384:	1af3      	subs	r3, r6, r3
   16386:	2b00      	cmp	r3, #0
   16388:	dc00      	bgt.n	1638c <__aeabi_dsub+0x19c>
   1638a:	e094      	b.n	164b6 <__aeabi_dsub+0x2c6>
   1638c:	4660      	mov	r0, ip
   1638e:	2800      	cmp	r0, #0
   16390:	d035      	beq.n	163fe <__aeabi_dsub+0x20e>
   16392:	4868      	ldr	r0, [pc, #416]	; (16534 <__aeabi_dsub+0x344>)
   16394:	4286      	cmp	r6, r0
   16396:	d0b1      	beq.n	162fc <__aeabi_dsub+0x10c>
   16398:	2780      	movs	r7, #128	; 0x80
   1639a:	043f      	lsls	r7, r7, #16
   1639c:	4339      	orrs	r1, r7
   1639e:	2b38      	cmp	r3, #56	; 0x38
   163a0:	dc00      	bgt.n	163a4 <__aeabi_dsub+0x1b4>
   163a2:	e0fd      	b.n	165a0 <__aeabi_dsub+0x3b0>
   163a4:	430a      	orrs	r2, r1
   163a6:	0017      	movs	r7, r2
   163a8:	2100      	movs	r1, #0
   163aa:	1e7a      	subs	r2, r7, #1
   163ac:	4197      	sbcs	r7, r2
   163ae:	4457      	add	r7, sl
   163b0:	4557      	cmp	r7, sl
   163b2:	4180      	sbcs	r0, r0
   163b4:	1909      	adds	r1, r1, r4
   163b6:	4244      	negs	r4, r0
   163b8:	190c      	adds	r4, r1, r4
   163ba:	0223      	lsls	r3, r4, #8
   163bc:	d53a      	bpl.n	16434 <__aeabi_dsub+0x244>
   163be:	4b5d      	ldr	r3, [pc, #372]	; (16534 <__aeabi_dsub+0x344>)
   163c0:	3601      	adds	r6, #1
   163c2:	429e      	cmp	r6, r3
   163c4:	d100      	bne.n	163c8 <__aeabi_dsub+0x1d8>
   163c6:	e14b      	b.n	16660 <__aeabi_dsub+0x470>
   163c8:	2201      	movs	r2, #1
   163ca:	4b5b      	ldr	r3, [pc, #364]	; (16538 <__aeabi_dsub+0x348>)
   163cc:	401c      	ands	r4, r3
   163ce:	087b      	lsrs	r3, r7, #1
   163d0:	4017      	ands	r7, r2
   163d2:	431f      	orrs	r7, r3
   163d4:	07e2      	lsls	r2, r4, #31
   163d6:	4317      	orrs	r7, r2
   163d8:	0864      	lsrs	r4, r4, #1
   163da:	e78f      	b.n	162fc <__aeabi_dsub+0x10c>
   163dc:	0008      	movs	r0, r1
   163de:	4310      	orrs	r0, r2
   163e0:	d000      	beq.n	163e4 <__aeabi_dsub+0x1f4>
   163e2:	e724      	b.n	1622e <__aeabi_dsub+0x3e>
   163e4:	e721      	b.n	1622a <__aeabi_dsub+0x3a>
   163e6:	0023      	movs	r3, r4
   163e8:	433b      	orrs	r3, r7
   163ea:	d100      	bne.n	163ee <__aeabi_dsub+0x1fe>
   163ec:	e1b9      	b.n	16762 <__aeabi_dsub+0x572>
   163ee:	2280      	movs	r2, #128	; 0x80
   163f0:	0312      	lsls	r2, r2, #12
   163f2:	4314      	orrs	r4, r2
   163f4:	0324      	lsls	r4, r4, #12
   163f6:	0b24      	lsrs	r4, r4, #12
   163f8:	e79f      	b.n	1633a <__aeabi_dsub+0x14a>
   163fa:	002e      	movs	r6, r5
   163fc:	e77e      	b.n	162fc <__aeabi_dsub+0x10c>
   163fe:	0008      	movs	r0, r1
   16400:	4310      	orrs	r0, r2
   16402:	d100      	bne.n	16406 <__aeabi_dsub+0x216>
   16404:	e0ca      	b.n	1659c <__aeabi_dsub+0x3ac>
   16406:	1e58      	subs	r0, r3, #1
   16408:	4684      	mov	ip, r0
   1640a:	2800      	cmp	r0, #0
   1640c:	d000      	beq.n	16410 <__aeabi_dsub+0x220>
   1640e:	e0e7      	b.n	165e0 <__aeabi_dsub+0x3f0>
   16410:	4452      	add	r2, sl
   16412:	4552      	cmp	r2, sl
   16414:	4180      	sbcs	r0, r0
   16416:	1864      	adds	r4, r4, r1
   16418:	4240      	negs	r0, r0
   1641a:	1824      	adds	r4, r4, r0
   1641c:	0017      	movs	r7, r2
   1641e:	2601      	movs	r6, #1
   16420:	0223      	lsls	r3, r4, #8
   16422:	d507      	bpl.n	16434 <__aeabi_dsub+0x244>
   16424:	2602      	movs	r6, #2
   16426:	e7cf      	b.n	163c8 <__aeabi_dsub+0x1d8>
   16428:	4664      	mov	r4, ip
   1642a:	432c      	orrs	r4, r5
   1642c:	d100      	bne.n	16430 <__aeabi_dsub+0x240>
   1642e:	e1b3      	b.n	16798 <__aeabi_dsub+0x5a8>
   16430:	002c      	movs	r4, r5
   16432:	4667      	mov	r7, ip
   16434:	077b      	lsls	r3, r7, #29
   16436:	d000      	beq.n	1643a <__aeabi_dsub+0x24a>
   16438:	e762      	b.n	16300 <__aeabi_dsub+0x110>
   1643a:	0763      	lsls	r3, r4, #29
   1643c:	08ff      	lsrs	r7, r7, #3
   1643e:	431f      	orrs	r7, r3
   16440:	2501      	movs	r5, #1
   16442:	4643      	mov	r3, r8
   16444:	08e4      	lsrs	r4, r4, #3
   16446:	401d      	ands	r5, r3
   16448:	e793      	b.n	16372 <__aeabi_dsub+0x182>
   1644a:	2d00      	cmp	r5, #0
   1644c:	d178      	bne.n	16540 <__aeabi_dsub+0x350>
   1644e:	1c75      	adds	r5, r6, #1
   16450:	056d      	lsls	r5, r5, #21
   16452:	0d6d      	lsrs	r5, r5, #21
   16454:	2d01      	cmp	r5, #1
   16456:	dc00      	bgt.n	1645a <__aeabi_dsub+0x26a>
   16458:	e0f2      	b.n	16640 <__aeabi_dsub+0x450>
   1645a:	4650      	mov	r0, sl
   1645c:	1a80      	subs	r0, r0, r2
   1645e:	4582      	cmp	sl, r0
   16460:	41bf      	sbcs	r7, r7
   16462:	1a65      	subs	r5, r4, r1
   16464:	427f      	negs	r7, r7
   16466:	1bed      	subs	r5, r5, r7
   16468:	4684      	mov	ip, r0
   1646a:	0228      	lsls	r0, r5, #8
   1646c:	d400      	bmi.n	16470 <__aeabi_dsub+0x280>
   1646e:	e08c      	b.n	1658a <__aeabi_dsub+0x39a>
   16470:	4650      	mov	r0, sl
   16472:	1a17      	subs	r7, r2, r0
   16474:	42ba      	cmp	r2, r7
   16476:	4192      	sbcs	r2, r2
   16478:	1b0c      	subs	r4, r1, r4
   1647a:	4255      	negs	r5, r2
   1647c:	1b65      	subs	r5, r4, r5
   1647e:	4698      	mov	r8, r3
   16480:	e714      	b.n	162ac <__aeabi_dsub+0xbc>
   16482:	2501      	movs	r5, #1
   16484:	4643      	mov	r3, r8
   16486:	2400      	movs	r4, #0
   16488:	401d      	ands	r5, r3
   1648a:	2700      	movs	r7, #0
   1648c:	e755      	b.n	1633a <__aeabi_dsub+0x14a>
   1648e:	4c2a      	ldr	r4, [pc, #168]	; (16538 <__aeabi_dsub+0x348>)
   16490:	1af6      	subs	r6, r6, r3
   16492:	402c      	ands	r4, r5
   16494:	e732      	b.n	162fc <__aeabi_dsub+0x10c>
   16496:	003d      	movs	r5, r7
   16498:	3828      	subs	r0, #40	; 0x28
   1649a:	4085      	lsls	r5, r0
   1649c:	2700      	movs	r7, #0
   1649e:	e717      	b.n	162d0 <__aeabi_dsub+0xe0>
   164a0:	0038      	movs	r0, r7
   164a2:	f000 fb45 	bl	16b30 <__clzsi2>
   164a6:	3020      	adds	r0, #32
   164a8:	e706      	b.n	162b8 <__aeabi_dsub+0xc8>
   164aa:	430a      	orrs	r2, r1
   164ac:	0017      	movs	r7, r2
   164ae:	2100      	movs	r1, #0
   164b0:	1e7a      	subs	r2, r7, #1
   164b2:	4197      	sbcs	r7, r2
   164b4:	e6ee      	b.n	16294 <__aeabi_dsub+0xa4>
   164b6:	2b00      	cmp	r3, #0
   164b8:	d000      	beq.n	164bc <__aeabi_dsub+0x2cc>
   164ba:	e0e5      	b.n	16688 <__aeabi_dsub+0x498>
   164bc:	1c73      	adds	r3, r6, #1
   164be:	469c      	mov	ip, r3
   164c0:	055b      	lsls	r3, r3, #21
   164c2:	0d5b      	lsrs	r3, r3, #21
   164c4:	2b01      	cmp	r3, #1
   164c6:	dc00      	bgt.n	164ca <__aeabi_dsub+0x2da>
   164c8:	e09f      	b.n	1660a <__aeabi_dsub+0x41a>
   164ca:	4b1a      	ldr	r3, [pc, #104]	; (16534 <__aeabi_dsub+0x344>)
   164cc:	459c      	cmp	ip, r3
   164ce:	d100      	bne.n	164d2 <__aeabi_dsub+0x2e2>
   164d0:	e0c5      	b.n	1665e <__aeabi_dsub+0x46e>
   164d2:	4452      	add	r2, sl
   164d4:	4552      	cmp	r2, sl
   164d6:	4180      	sbcs	r0, r0
   164d8:	1864      	adds	r4, r4, r1
   164da:	4240      	negs	r0, r0
   164dc:	1824      	adds	r4, r4, r0
   164de:	07e7      	lsls	r7, r4, #31
   164e0:	0852      	lsrs	r2, r2, #1
   164e2:	4317      	orrs	r7, r2
   164e4:	0864      	lsrs	r4, r4, #1
   164e6:	4666      	mov	r6, ip
   164e8:	e708      	b.n	162fc <__aeabi_dsub+0x10c>
   164ea:	4812      	ldr	r0, [pc, #72]	; (16534 <__aeabi_dsub+0x344>)
   164ec:	4285      	cmp	r5, r0
   164ee:	d100      	bne.n	164f2 <__aeabi_dsub+0x302>
   164f0:	e085      	b.n	165fe <__aeabi_dsub+0x40e>
   164f2:	001d      	movs	r5, r3
   164f4:	e6bc      	b.n	16270 <__aeabi_dsub+0x80>
   164f6:	0029      	movs	r1, r5
   164f8:	3e1f      	subs	r6, #31
   164fa:	40f1      	lsrs	r1, r6
   164fc:	2b20      	cmp	r3, #32
   164fe:	d100      	bne.n	16502 <__aeabi_dsub+0x312>
   16500:	e07f      	b.n	16602 <__aeabi_dsub+0x412>
   16502:	2240      	movs	r2, #64	; 0x40
   16504:	1ad3      	subs	r3, r2, r3
   16506:	409d      	lsls	r5, r3
   16508:	432f      	orrs	r7, r5
   1650a:	1e7d      	subs	r5, r7, #1
   1650c:	41af      	sbcs	r7, r5
   1650e:	2400      	movs	r4, #0
   16510:	430f      	orrs	r7, r1
   16512:	2600      	movs	r6, #0
   16514:	e78e      	b.n	16434 <__aeabi_dsub+0x244>
   16516:	002b      	movs	r3, r5
   16518:	000f      	movs	r7, r1
   1651a:	3b20      	subs	r3, #32
   1651c:	40df      	lsrs	r7, r3
   1651e:	2d20      	cmp	r5, #32
   16520:	d071      	beq.n	16606 <__aeabi_dsub+0x416>
   16522:	2340      	movs	r3, #64	; 0x40
   16524:	1b5d      	subs	r5, r3, r5
   16526:	40a9      	lsls	r1, r5
   16528:	430a      	orrs	r2, r1
   1652a:	1e51      	subs	r1, r2, #1
   1652c:	418a      	sbcs	r2, r1
   1652e:	2100      	movs	r1, #0
   16530:	4317      	orrs	r7, r2
   16532:	e6af      	b.n	16294 <__aeabi_dsub+0xa4>
   16534:	000007ff 	.word	0x000007ff
   16538:	ff7fffff 	.word	0xff7fffff
   1653c:	800fffff 	.word	0x800fffff
   16540:	2e00      	cmp	r6, #0
   16542:	d03e      	beq.n	165c2 <__aeabi_dsub+0x3d2>
   16544:	4eb3      	ldr	r6, [pc, #716]	; (16814 <__aeabi_dsub+0x624>)
   16546:	45b4      	cmp	ip, r6
   16548:	d045      	beq.n	165d6 <__aeabi_dsub+0x3e6>
   1654a:	2680      	movs	r6, #128	; 0x80
   1654c:	0436      	lsls	r6, r6, #16
   1654e:	426d      	negs	r5, r5
   16550:	4334      	orrs	r4, r6
   16552:	2d38      	cmp	r5, #56	; 0x38
   16554:	dd00      	ble.n	16558 <__aeabi_dsub+0x368>
   16556:	e0a8      	b.n	166aa <__aeabi_dsub+0x4ba>
   16558:	2d1f      	cmp	r5, #31
   1655a:	dd00      	ble.n	1655e <__aeabi_dsub+0x36e>
   1655c:	e11f      	b.n	1679e <__aeabi_dsub+0x5ae>
   1655e:	2620      	movs	r6, #32
   16560:	0027      	movs	r7, r4
   16562:	4650      	mov	r0, sl
   16564:	1b76      	subs	r6, r6, r5
   16566:	40b7      	lsls	r7, r6
   16568:	40e8      	lsrs	r0, r5
   1656a:	4307      	orrs	r7, r0
   1656c:	4650      	mov	r0, sl
   1656e:	40b0      	lsls	r0, r6
   16570:	1e46      	subs	r6, r0, #1
   16572:	41b0      	sbcs	r0, r6
   16574:	40ec      	lsrs	r4, r5
   16576:	4338      	orrs	r0, r7
   16578:	1a17      	subs	r7, r2, r0
   1657a:	42ba      	cmp	r2, r7
   1657c:	4192      	sbcs	r2, r2
   1657e:	1b0c      	subs	r4, r1, r4
   16580:	4252      	negs	r2, r2
   16582:	1aa4      	subs	r4, r4, r2
   16584:	4666      	mov	r6, ip
   16586:	4698      	mov	r8, r3
   16588:	e68b      	b.n	162a2 <__aeabi_dsub+0xb2>
   1658a:	4664      	mov	r4, ip
   1658c:	4667      	mov	r7, ip
   1658e:	432c      	orrs	r4, r5
   16590:	d000      	beq.n	16594 <__aeabi_dsub+0x3a4>
   16592:	e68b      	b.n	162ac <__aeabi_dsub+0xbc>
   16594:	2500      	movs	r5, #0
   16596:	2600      	movs	r6, #0
   16598:	2700      	movs	r7, #0
   1659a:	e6ea      	b.n	16372 <__aeabi_dsub+0x182>
   1659c:	001e      	movs	r6, r3
   1659e:	e6ad      	b.n	162fc <__aeabi_dsub+0x10c>
   165a0:	2b1f      	cmp	r3, #31
   165a2:	dc60      	bgt.n	16666 <__aeabi_dsub+0x476>
   165a4:	2720      	movs	r7, #32
   165a6:	1af8      	subs	r0, r7, r3
   165a8:	000f      	movs	r7, r1
   165aa:	4684      	mov	ip, r0
   165ac:	4087      	lsls	r7, r0
   165ae:	0010      	movs	r0, r2
   165b0:	40d8      	lsrs	r0, r3
   165b2:	4307      	orrs	r7, r0
   165b4:	4660      	mov	r0, ip
   165b6:	4082      	lsls	r2, r0
   165b8:	1e50      	subs	r0, r2, #1
   165ba:	4182      	sbcs	r2, r0
   165bc:	40d9      	lsrs	r1, r3
   165be:	4317      	orrs	r7, r2
   165c0:	e6f5      	b.n	163ae <__aeabi_dsub+0x1be>
   165c2:	0026      	movs	r6, r4
   165c4:	4650      	mov	r0, sl
   165c6:	4306      	orrs	r6, r0
   165c8:	d005      	beq.n	165d6 <__aeabi_dsub+0x3e6>
   165ca:	43ed      	mvns	r5, r5
   165cc:	2d00      	cmp	r5, #0
   165ce:	d0d3      	beq.n	16578 <__aeabi_dsub+0x388>
   165d0:	4e90      	ldr	r6, [pc, #576]	; (16814 <__aeabi_dsub+0x624>)
   165d2:	45b4      	cmp	ip, r6
   165d4:	d1bd      	bne.n	16552 <__aeabi_dsub+0x362>
   165d6:	000c      	movs	r4, r1
   165d8:	0017      	movs	r7, r2
   165da:	4666      	mov	r6, ip
   165dc:	4698      	mov	r8, r3
   165de:	e68d      	b.n	162fc <__aeabi_dsub+0x10c>
   165e0:	488c      	ldr	r0, [pc, #560]	; (16814 <__aeabi_dsub+0x624>)
   165e2:	4283      	cmp	r3, r0
   165e4:	d00b      	beq.n	165fe <__aeabi_dsub+0x40e>
   165e6:	4663      	mov	r3, ip
   165e8:	e6d9      	b.n	1639e <__aeabi_dsub+0x1ae>
   165ea:	2d00      	cmp	r5, #0
   165ec:	d000      	beq.n	165f0 <__aeabi_dsub+0x400>
   165ee:	e096      	b.n	1671e <__aeabi_dsub+0x52e>
   165f0:	0008      	movs	r0, r1
   165f2:	4310      	orrs	r0, r2
   165f4:	d100      	bne.n	165f8 <__aeabi_dsub+0x408>
   165f6:	e0e2      	b.n	167be <__aeabi_dsub+0x5ce>
   165f8:	000c      	movs	r4, r1
   165fa:	0017      	movs	r7, r2
   165fc:	4698      	mov	r8, r3
   165fe:	4e85      	ldr	r6, [pc, #532]	; (16814 <__aeabi_dsub+0x624>)
   16600:	e67c      	b.n	162fc <__aeabi_dsub+0x10c>
   16602:	2500      	movs	r5, #0
   16604:	e780      	b.n	16508 <__aeabi_dsub+0x318>
   16606:	2100      	movs	r1, #0
   16608:	e78e      	b.n	16528 <__aeabi_dsub+0x338>
   1660a:	0023      	movs	r3, r4
   1660c:	4650      	mov	r0, sl
   1660e:	4303      	orrs	r3, r0
   16610:	2e00      	cmp	r6, #0
   16612:	d000      	beq.n	16616 <__aeabi_dsub+0x426>
   16614:	e0a8      	b.n	16768 <__aeabi_dsub+0x578>
   16616:	2b00      	cmp	r3, #0
   16618:	d100      	bne.n	1661c <__aeabi_dsub+0x42c>
   1661a:	e0de      	b.n	167da <__aeabi_dsub+0x5ea>
   1661c:	000b      	movs	r3, r1
   1661e:	4313      	orrs	r3, r2
   16620:	d100      	bne.n	16624 <__aeabi_dsub+0x434>
   16622:	e66b      	b.n	162fc <__aeabi_dsub+0x10c>
   16624:	4452      	add	r2, sl
   16626:	4552      	cmp	r2, sl
   16628:	4180      	sbcs	r0, r0
   1662a:	1864      	adds	r4, r4, r1
   1662c:	4240      	negs	r0, r0
   1662e:	1824      	adds	r4, r4, r0
   16630:	0017      	movs	r7, r2
   16632:	0223      	lsls	r3, r4, #8
   16634:	d400      	bmi.n	16638 <__aeabi_dsub+0x448>
   16636:	e6fd      	b.n	16434 <__aeabi_dsub+0x244>
   16638:	4b77      	ldr	r3, [pc, #476]	; (16818 <__aeabi_dsub+0x628>)
   1663a:	4666      	mov	r6, ip
   1663c:	401c      	ands	r4, r3
   1663e:	e65d      	b.n	162fc <__aeabi_dsub+0x10c>
   16640:	0025      	movs	r5, r4
   16642:	4650      	mov	r0, sl
   16644:	4305      	orrs	r5, r0
   16646:	2e00      	cmp	r6, #0
   16648:	d1cf      	bne.n	165ea <__aeabi_dsub+0x3fa>
   1664a:	2d00      	cmp	r5, #0
   1664c:	d14f      	bne.n	166ee <__aeabi_dsub+0x4fe>
   1664e:	000c      	movs	r4, r1
   16650:	4314      	orrs	r4, r2
   16652:	d100      	bne.n	16656 <__aeabi_dsub+0x466>
   16654:	e0a0      	b.n	16798 <__aeabi_dsub+0x5a8>
   16656:	000c      	movs	r4, r1
   16658:	0017      	movs	r7, r2
   1665a:	4698      	mov	r8, r3
   1665c:	e64e      	b.n	162fc <__aeabi_dsub+0x10c>
   1665e:	4666      	mov	r6, ip
   16660:	2400      	movs	r4, #0
   16662:	2700      	movs	r7, #0
   16664:	e685      	b.n	16372 <__aeabi_dsub+0x182>
   16666:	001f      	movs	r7, r3
   16668:	0008      	movs	r0, r1
   1666a:	3f20      	subs	r7, #32
   1666c:	40f8      	lsrs	r0, r7
   1666e:	0007      	movs	r7, r0
   16670:	2b20      	cmp	r3, #32
   16672:	d100      	bne.n	16676 <__aeabi_dsub+0x486>
   16674:	e08e      	b.n	16794 <__aeabi_dsub+0x5a4>
   16676:	2040      	movs	r0, #64	; 0x40
   16678:	1ac3      	subs	r3, r0, r3
   1667a:	4099      	lsls	r1, r3
   1667c:	430a      	orrs	r2, r1
   1667e:	1e51      	subs	r1, r2, #1
   16680:	418a      	sbcs	r2, r1
   16682:	2100      	movs	r1, #0
   16684:	4317      	orrs	r7, r2
   16686:	e692      	b.n	163ae <__aeabi_dsub+0x1be>
   16688:	2e00      	cmp	r6, #0
   1668a:	d114      	bne.n	166b6 <__aeabi_dsub+0x4c6>
   1668c:	0026      	movs	r6, r4
   1668e:	4650      	mov	r0, sl
   16690:	4306      	orrs	r6, r0
   16692:	d062      	beq.n	1675a <__aeabi_dsub+0x56a>
   16694:	43db      	mvns	r3, r3
   16696:	2b00      	cmp	r3, #0
   16698:	d15c      	bne.n	16754 <__aeabi_dsub+0x564>
   1669a:	1887      	adds	r7, r0, r2
   1669c:	4297      	cmp	r7, r2
   1669e:	4192      	sbcs	r2, r2
   166a0:	1864      	adds	r4, r4, r1
   166a2:	4252      	negs	r2, r2
   166a4:	18a4      	adds	r4, r4, r2
   166a6:	4666      	mov	r6, ip
   166a8:	e687      	b.n	163ba <__aeabi_dsub+0x1ca>
   166aa:	4650      	mov	r0, sl
   166ac:	4320      	orrs	r0, r4
   166ae:	1e44      	subs	r4, r0, #1
   166b0:	41a0      	sbcs	r0, r4
   166b2:	2400      	movs	r4, #0
   166b4:	e760      	b.n	16578 <__aeabi_dsub+0x388>
   166b6:	4e57      	ldr	r6, [pc, #348]	; (16814 <__aeabi_dsub+0x624>)
   166b8:	45b4      	cmp	ip, r6
   166ba:	d04e      	beq.n	1675a <__aeabi_dsub+0x56a>
   166bc:	2680      	movs	r6, #128	; 0x80
   166be:	0436      	lsls	r6, r6, #16
   166c0:	425b      	negs	r3, r3
   166c2:	4334      	orrs	r4, r6
   166c4:	2b38      	cmp	r3, #56	; 0x38
   166c6:	dd00      	ble.n	166ca <__aeabi_dsub+0x4da>
   166c8:	e07f      	b.n	167ca <__aeabi_dsub+0x5da>
   166ca:	2b1f      	cmp	r3, #31
   166cc:	dd00      	ble.n	166d0 <__aeabi_dsub+0x4e0>
   166ce:	e08b      	b.n	167e8 <__aeabi_dsub+0x5f8>
   166d0:	2620      	movs	r6, #32
   166d2:	0027      	movs	r7, r4
   166d4:	4650      	mov	r0, sl
   166d6:	1af6      	subs	r6, r6, r3
   166d8:	40b7      	lsls	r7, r6
   166da:	40d8      	lsrs	r0, r3
   166dc:	4307      	orrs	r7, r0
   166de:	4650      	mov	r0, sl
   166e0:	40b0      	lsls	r0, r6
   166e2:	1e46      	subs	r6, r0, #1
   166e4:	41b0      	sbcs	r0, r6
   166e6:	4307      	orrs	r7, r0
   166e8:	40dc      	lsrs	r4, r3
   166ea:	18bf      	adds	r7, r7, r2
   166ec:	e7d6      	b.n	1669c <__aeabi_dsub+0x4ac>
   166ee:	000d      	movs	r5, r1
   166f0:	4315      	orrs	r5, r2
   166f2:	d100      	bne.n	166f6 <__aeabi_dsub+0x506>
   166f4:	e602      	b.n	162fc <__aeabi_dsub+0x10c>
   166f6:	4650      	mov	r0, sl
   166f8:	1a80      	subs	r0, r0, r2
   166fa:	4582      	cmp	sl, r0
   166fc:	41bf      	sbcs	r7, r7
   166fe:	1a65      	subs	r5, r4, r1
   16700:	427f      	negs	r7, r7
   16702:	1bed      	subs	r5, r5, r7
   16704:	4684      	mov	ip, r0
   16706:	0228      	lsls	r0, r5, #8
   16708:	d400      	bmi.n	1670c <__aeabi_dsub+0x51c>
   1670a:	e68d      	b.n	16428 <__aeabi_dsub+0x238>
   1670c:	4650      	mov	r0, sl
   1670e:	1a17      	subs	r7, r2, r0
   16710:	42ba      	cmp	r2, r7
   16712:	4192      	sbcs	r2, r2
   16714:	1b0c      	subs	r4, r1, r4
   16716:	4252      	negs	r2, r2
   16718:	1aa4      	subs	r4, r4, r2
   1671a:	4698      	mov	r8, r3
   1671c:	e5ee      	b.n	162fc <__aeabi_dsub+0x10c>
   1671e:	000d      	movs	r5, r1
   16720:	4315      	orrs	r5, r2
   16722:	d100      	bne.n	16726 <__aeabi_dsub+0x536>
   16724:	e76b      	b.n	165fe <__aeabi_dsub+0x40e>
   16726:	4650      	mov	r0, sl
   16728:	0767      	lsls	r7, r4, #29
   1672a:	08c0      	lsrs	r0, r0, #3
   1672c:	4307      	orrs	r7, r0
   1672e:	2080      	movs	r0, #128	; 0x80
   16730:	08e4      	lsrs	r4, r4, #3
   16732:	0300      	lsls	r0, r0, #12
   16734:	4204      	tst	r4, r0
   16736:	d007      	beq.n	16748 <__aeabi_dsub+0x558>
   16738:	08cd      	lsrs	r5, r1, #3
   1673a:	4205      	tst	r5, r0
   1673c:	d104      	bne.n	16748 <__aeabi_dsub+0x558>
   1673e:	002c      	movs	r4, r5
   16740:	4698      	mov	r8, r3
   16742:	08d7      	lsrs	r7, r2, #3
   16744:	0749      	lsls	r1, r1, #29
   16746:	430f      	orrs	r7, r1
   16748:	0f7b      	lsrs	r3, r7, #29
   1674a:	00e4      	lsls	r4, r4, #3
   1674c:	431c      	orrs	r4, r3
   1674e:	00ff      	lsls	r7, r7, #3
   16750:	4e30      	ldr	r6, [pc, #192]	; (16814 <__aeabi_dsub+0x624>)
   16752:	e5d3      	b.n	162fc <__aeabi_dsub+0x10c>
   16754:	4e2f      	ldr	r6, [pc, #188]	; (16814 <__aeabi_dsub+0x624>)
   16756:	45b4      	cmp	ip, r6
   16758:	d1b4      	bne.n	166c4 <__aeabi_dsub+0x4d4>
   1675a:	000c      	movs	r4, r1
   1675c:	0017      	movs	r7, r2
   1675e:	4666      	mov	r6, ip
   16760:	e5cc      	b.n	162fc <__aeabi_dsub+0x10c>
   16762:	2700      	movs	r7, #0
   16764:	2400      	movs	r4, #0
   16766:	e5e8      	b.n	1633a <__aeabi_dsub+0x14a>
   16768:	2b00      	cmp	r3, #0
   1676a:	d039      	beq.n	167e0 <__aeabi_dsub+0x5f0>
   1676c:	000b      	movs	r3, r1
   1676e:	4313      	orrs	r3, r2
   16770:	d100      	bne.n	16774 <__aeabi_dsub+0x584>
   16772:	e744      	b.n	165fe <__aeabi_dsub+0x40e>
   16774:	08c0      	lsrs	r0, r0, #3
   16776:	0767      	lsls	r7, r4, #29
   16778:	4307      	orrs	r7, r0
   1677a:	2080      	movs	r0, #128	; 0x80
   1677c:	08e4      	lsrs	r4, r4, #3
   1677e:	0300      	lsls	r0, r0, #12
   16780:	4204      	tst	r4, r0
   16782:	d0e1      	beq.n	16748 <__aeabi_dsub+0x558>
   16784:	08cb      	lsrs	r3, r1, #3
   16786:	4203      	tst	r3, r0
   16788:	d1de      	bne.n	16748 <__aeabi_dsub+0x558>
   1678a:	08d7      	lsrs	r7, r2, #3
   1678c:	0749      	lsls	r1, r1, #29
   1678e:	430f      	orrs	r7, r1
   16790:	001c      	movs	r4, r3
   16792:	e7d9      	b.n	16748 <__aeabi_dsub+0x558>
   16794:	2100      	movs	r1, #0
   16796:	e771      	b.n	1667c <__aeabi_dsub+0x48c>
   16798:	2500      	movs	r5, #0
   1679a:	2700      	movs	r7, #0
   1679c:	e5e9      	b.n	16372 <__aeabi_dsub+0x182>
   1679e:	002e      	movs	r6, r5
   167a0:	0027      	movs	r7, r4
   167a2:	3e20      	subs	r6, #32
   167a4:	40f7      	lsrs	r7, r6
   167a6:	2d20      	cmp	r5, #32
   167a8:	d02f      	beq.n	1680a <__aeabi_dsub+0x61a>
   167aa:	2640      	movs	r6, #64	; 0x40
   167ac:	1b75      	subs	r5, r6, r5
   167ae:	40ac      	lsls	r4, r5
   167b0:	4650      	mov	r0, sl
   167b2:	4320      	orrs	r0, r4
   167b4:	1e44      	subs	r4, r0, #1
   167b6:	41a0      	sbcs	r0, r4
   167b8:	2400      	movs	r4, #0
   167ba:	4338      	orrs	r0, r7
   167bc:	e6dc      	b.n	16578 <__aeabi_dsub+0x388>
   167be:	2480      	movs	r4, #128	; 0x80
   167c0:	2500      	movs	r5, #0
   167c2:	0324      	lsls	r4, r4, #12
   167c4:	4e13      	ldr	r6, [pc, #76]	; (16814 <__aeabi_dsub+0x624>)
   167c6:	2700      	movs	r7, #0
   167c8:	e5d3      	b.n	16372 <__aeabi_dsub+0x182>
   167ca:	4650      	mov	r0, sl
   167cc:	4320      	orrs	r0, r4
   167ce:	0007      	movs	r7, r0
   167d0:	1e78      	subs	r0, r7, #1
   167d2:	4187      	sbcs	r7, r0
   167d4:	2400      	movs	r4, #0
   167d6:	18bf      	adds	r7, r7, r2
   167d8:	e760      	b.n	1669c <__aeabi_dsub+0x4ac>
   167da:	000c      	movs	r4, r1
   167dc:	0017      	movs	r7, r2
   167de:	e58d      	b.n	162fc <__aeabi_dsub+0x10c>
   167e0:	000c      	movs	r4, r1
   167e2:	0017      	movs	r7, r2
   167e4:	4e0b      	ldr	r6, [pc, #44]	; (16814 <__aeabi_dsub+0x624>)
   167e6:	e589      	b.n	162fc <__aeabi_dsub+0x10c>
   167e8:	001e      	movs	r6, r3
   167ea:	0027      	movs	r7, r4
   167ec:	3e20      	subs	r6, #32
   167ee:	40f7      	lsrs	r7, r6
   167f0:	2b20      	cmp	r3, #32
   167f2:	d00c      	beq.n	1680e <__aeabi_dsub+0x61e>
   167f4:	2640      	movs	r6, #64	; 0x40
   167f6:	1af3      	subs	r3, r6, r3
   167f8:	409c      	lsls	r4, r3
   167fa:	4650      	mov	r0, sl
   167fc:	4320      	orrs	r0, r4
   167fe:	1e44      	subs	r4, r0, #1
   16800:	41a0      	sbcs	r0, r4
   16802:	4307      	orrs	r7, r0
   16804:	2400      	movs	r4, #0
   16806:	18bf      	adds	r7, r7, r2
   16808:	e748      	b.n	1669c <__aeabi_dsub+0x4ac>
   1680a:	2400      	movs	r4, #0
   1680c:	e7d0      	b.n	167b0 <__aeabi_dsub+0x5c0>
   1680e:	2400      	movs	r4, #0
   16810:	e7f3      	b.n	167fa <__aeabi_dsub+0x60a>
   16812:	46c0      	nop			; (mov r8, r8)
   16814:	000007ff 	.word	0x000007ff
   16818:	ff7fffff 	.word	0xff7fffff

0001681c <__aeabi_d2iz>:
   1681c:	b530      	push	{r4, r5, lr}
   1681e:	4d13      	ldr	r5, [pc, #76]	; (1686c <__aeabi_d2iz+0x50>)
   16820:	030a      	lsls	r2, r1, #12
   16822:	004b      	lsls	r3, r1, #1
   16824:	0b12      	lsrs	r2, r2, #12
   16826:	0d5b      	lsrs	r3, r3, #21
   16828:	0fc9      	lsrs	r1, r1, #31
   1682a:	2400      	movs	r4, #0
   1682c:	42ab      	cmp	r3, r5
   1682e:	dd10      	ble.n	16852 <__aeabi_d2iz+0x36>
   16830:	4c0f      	ldr	r4, [pc, #60]	; (16870 <__aeabi_d2iz+0x54>)
   16832:	42a3      	cmp	r3, r4
   16834:	dc0f      	bgt.n	16856 <__aeabi_d2iz+0x3a>
   16836:	2480      	movs	r4, #128	; 0x80
   16838:	4d0e      	ldr	r5, [pc, #56]	; (16874 <__aeabi_d2iz+0x58>)
   1683a:	0364      	lsls	r4, r4, #13
   1683c:	4322      	orrs	r2, r4
   1683e:	1aed      	subs	r5, r5, r3
   16840:	2d1f      	cmp	r5, #31
   16842:	dd0b      	ble.n	1685c <__aeabi_d2iz+0x40>
   16844:	480c      	ldr	r0, [pc, #48]	; (16878 <__aeabi_d2iz+0x5c>)
   16846:	1ac3      	subs	r3, r0, r3
   16848:	40da      	lsrs	r2, r3
   1684a:	4254      	negs	r4, r2
   1684c:	2900      	cmp	r1, #0
   1684e:	d100      	bne.n	16852 <__aeabi_d2iz+0x36>
   16850:	0014      	movs	r4, r2
   16852:	0020      	movs	r0, r4
   16854:	bd30      	pop	{r4, r5, pc}
   16856:	4b09      	ldr	r3, [pc, #36]	; (1687c <__aeabi_d2iz+0x60>)
   16858:	18cc      	adds	r4, r1, r3
   1685a:	e7fa      	b.n	16852 <__aeabi_d2iz+0x36>
   1685c:	4c08      	ldr	r4, [pc, #32]	; (16880 <__aeabi_d2iz+0x64>)
   1685e:	40e8      	lsrs	r0, r5
   16860:	46a4      	mov	ip, r4
   16862:	4463      	add	r3, ip
   16864:	409a      	lsls	r2, r3
   16866:	4302      	orrs	r2, r0
   16868:	e7ef      	b.n	1684a <__aeabi_d2iz+0x2e>
   1686a:	46c0      	nop			; (mov r8, r8)
   1686c:	000003fe 	.word	0x000003fe
   16870:	0000041d 	.word	0x0000041d
   16874:	00000433 	.word	0x00000433
   16878:	00000413 	.word	0x00000413
   1687c:	7fffffff 	.word	0x7fffffff
   16880:	fffffbed 	.word	0xfffffbed

00016884 <__aeabi_i2d>:
   16884:	b570      	push	{r4, r5, r6, lr}
   16886:	2800      	cmp	r0, #0
   16888:	d030      	beq.n	168ec <__aeabi_i2d+0x68>
   1688a:	17c3      	asrs	r3, r0, #31
   1688c:	18c4      	adds	r4, r0, r3
   1688e:	405c      	eors	r4, r3
   16890:	0fc5      	lsrs	r5, r0, #31
   16892:	0020      	movs	r0, r4
   16894:	f000 f94c 	bl	16b30 <__clzsi2>
   16898:	4b17      	ldr	r3, [pc, #92]	; (168f8 <__aeabi_i2d+0x74>)
   1689a:	4a18      	ldr	r2, [pc, #96]	; (168fc <__aeabi_i2d+0x78>)
   1689c:	1a1b      	subs	r3, r3, r0
   1689e:	1ad2      	subs	r2, r2, r3
   168a0:	2a1f      	cmp	r2, #31
   168a2:	dd18      	ble.n	168d6 <__aeabi_i2d+0x52>
   168a4:	4a16      	ldr	r2, [pc, #88]	; (16900 <__aeabi_i2d+0x7c>)
   168a6:	1ad2      	subs	r2, r2, r3
   168a8:	4094      	lsls	r4, r2
   168aa:	2200      	movs	r2, #0
   168ac:	0324      	lsls	r4, r4, #12
   168ae:	055b      	lsls	r3, r3, #21
   168b0:	0b24      	lsrs	r4, r4, #12
   168b2:	0d5b      	lsrs	r3, r3, #21
   168b4:	2100      	movs	r1, #0
   168b6:	0010      	movs	r0, r2
   168b8:	0324      	lsls	r4, r4, #12
   168ba:	0d0a      	lsrs	r2, r1, #20
   168bc:	0b24      	lsrs	r4, r4, #12
   168be:	0512      	lsls	r2, r2, #20
   168c0:	4322      	orrs	r2, r4
   168c2:	4c10      	ldr	r4, [pc, #64]	; (16904 <__aeabi_i2d+0x80>)
   168c4:	051b      	lsls	r3, r3, #20
   168c6:	4022      	ands	r2, r4
   168c8:	4313      	orrs	r3, r2
   168ca:	005b      	lsls	r3, r3, #1
   168cc:	07ed      	lsls	r5, r5, #31
   168ce:	085b      	lsrs	r3, r3, #1
   168d0:	432b      	orrs	r3, r5
   168d2:	0019      	movs	r1, r3
   168d4:	bd70      	pop	{r4, r5, r6, pc}
   168d6:	0021      	movs	r1, r4
   168d8:	4091      	lsls	r1, r2
   168da:	000a      	movs	r2, r1
   168dc:	210b      	movs	r1, #11
   168de:	1a08      	subs	r0, r1, r0
   168e0:	40c4      	lsrs	r4, r0
   168e2:	055b      	lsls	r3, r3, #21
   168e4:	0324      	lsls	r4, r4, #12
   168e6:	0b24      	lsrs	r4, r4, #12
   168e8:	0d5b      	lsrs	r3, r3, #21
   168ea:	e7e3      	b.n	168b4 <__aeabi_i2d+0x30>
   168ec:	2500      	movs	r5, #0
   168ee:	2300      	movs	r3, #0
   168f0:	2400      	movs	r4, #0
   168f2:	2200      	movs	r2, #0
   168f4:	e7de      	b.n	168b4 <__aeabi_i2d+0x30>
   168f6:	46c0      	nop			; (mov r8, r8)
   168f8:	0000041e 	.word	0x0000041e
   168fc:	00000433 	.word	0x00000433
   16900:	00000413 	.word	0x00000413
   16904:	800fffff 	.word	0x800fffff

00016908 <__aeabi_ui2d>:
   16908:	b510      	push	{r4, lr}
   1690a:	1e04      	subs	r4, r0, #0
   1690c:	d028      	beq.n	16960 <__aeabi_ui2d+0x58>
   1690e:	f000 f90f 	bl	16b30 <__clzsi2>
   16912:	4b15      	ldr	r3, [pc, #84]	; (16968 <__aeabi_ui2d+0x60>)
   16914:	4a15      	ldr	r2, [pc, #84]	; (1696c <__aeabi_ui2d+0x64>)
   16916:	1a1b      	subs	r3, r3, r0
   16918:	1ad2      	subs	r2, r2, r3
   1691a:	2a1f      	cmp	r2, #31
   1691c:	dd15      	ble.n	1694a <__aeabi_ui2d+0x42>
   1691e:	4a14      	ldr	r2, [pc, #80]	; (16970 <__aeabi_ui2d+0x68>)
   16920:	1ad2      	subs	r2, r2, r3
   16922:	4094      	lsls	r4, r2
   16924:	2200      	movs	r2, #0
   16926:	0324      	lsls	r4, r4, #12
   16928:	055b      	lsls	r3, r3, #21
   1692a:	0b24      	lsrs	r4, r4, #12
   1692c:	0d5b      	lsrs	r3, r3, #21
   1692e:	2100      	movs	r1, #0
   16930:	0010      	movs	r0, r2
   16932:	0324      	lsls	r4, r4, #12
   16934:	0d0a      	lsrs	r2, r1, #20
   16936:	0b24      	lsrs	r4, r4, #12
   16938:	0512      	lsls	r2, r2, #20
   1693a:	4322      	orrs	r2, r4
   1693c:	4c0d      	ldr	r4, [pc, #52]	; (16974 <__aeabi_ui2d+0x6c>)
   1693e:	051b      	lsls	r3, r3, #20
   16940:	4022      	ands	r2, r4
   16942:	4313      	orrs	r3, r2
   16944:	005b      	lsls	r3, r3, #1
   16946:	0859      	lsrs	r1, r3, #1
   16948:	bd10      	pop	{r4, pc}
   1694a:	0021      	movs	r1, r4
   1694c:	4091      	lsls	r1, r2
   1694e:	000a      	movs	r2, r1
   16950:	210b      	movs	r1, #11
   16952:	1a08      	subs	r0, r1, r0
   16954:	40c4      	lsrs	r4, r0
   16956:	055b      	lsls	r3, r3, #21
   16958:	0324      	lsls	r4, r4, #12
   1695a:	0b24      	lsrs	r4, r4, #12
   1695c:	0d5b      	lsrs	r3, r3, #21
   1695e:	e7e6      	b.n	1692e <__aeabi_ui2d+0x26>
   16960:	2300      	movs	r3, #0
   16962:	2400      	movs	r4, #0
   16964:	2200      	movs	r2, #0
   16966:	e7e2      	b.n	1692e <__aeabi_ui2d+0x26>
   16968:	0000041e 	.word	0x0000041e
   1696c:	00000433 	.word	0x00000433
   16970:	00000413 	.word	0x00000413
   16974:	800fffff 	.word	0x800fffff

00016978 <__aeabi_f2d>:
   16978:	0041      	lsls	r1, r0, #1
   1697a:	0e09      	lsrs	r1, r1, #24
   1697c:	1c4b      	adds	r3, r1, #1
   1697e:	b570      	push	{r4, r5, r6, lr}
   16980:	b2db      	uxtb	r3, r3
   16982:	0246      	lsls	r6, r0, #9
   16984:	0a75      	lsrs	r5, r6, #9
   16986:	0fc4      	lsrs	r4, r0, #31
   16988:	2b01      	cmp	r3, #1
   1698a:	dd14      	ble.n	169b6 <__aeabi_f2d+0x3e>
   1698c:	23e0      	movs	r3, #224	; 0xe0
   1698e:	009b      	lsls	r3, r3, #2
   16990:	076d      	lsls	r5, r5, #29
   16992:	0b36      	lsrs	r6, r6, #12
   16994:	18cb      	adds	r3, r1, r3
   16996:	2100      	movs	r1, #0
   16998:	0d0a      	lsrs	r2, r1, #20
   1699a:	0028      	movs	r0, r5
   1699c:	0512      	lsls	r2, r2, #20
   1699e:	4d1c      	ldr	r5, [pc, #112]	; (16a10 <__aeabi_f2d+0x98>)
   169a0:	4332      	orrs	r2, r6
   169a2:	055b      	lsls	r3, r3, #21
   169a4:	402a      	ands	r2, r5
   169a6:	085b      	lsrs	r3, r3, #1
   169a8:	4313      	orrs	r3, r2
   169aa:	005b      	lsls	r3, r3, #1
   169ac:	07e4      	lsls	r4, r4, #31
   169ae:	085b      	lsrs	r3, r3, #1
   169b0:	4323      	orrs	r3, r4
   169b2:	0019      	movs	r1, r3
   169b4:	bd70      	pop	{r4, r5, r6, pc}
   169b6:	2900      	cmp	r1, #0
   169b8:	d114      	bne.n	169e4 <__aeabi_f2d+0x6c>
   169ba:	2d00      	cmp	r5, #0
   169bc:	d01e      	beq.n	169fc <__aeabi_f2d+0x84>
   169be:	0028      	movs	r0, r5
   169c0:	f000 f8b6 	bl	16b30 <__clzsi2>
   169c4:	280a      	cmp	r0, #10
   169c6:	dc1c      	bgt.n	16a02 <__aeabi_f2d+0x8a>
   169c8:	230b      	movs	r3, #11
   169ca:	002a      	movs	r2, r5
   169cc:	1a1b      	subs	r3, r3, r0
   169ce:	40da      	lsrs	r2, r3
   169d0:	0003      	movs	r3, r0
   169d2:	3315      	adds	r3, #21
   169d4:	409d      	lsls	r5, r3
   169d6:	4b0f      	ldr	r3, [pc, #60]	; (16a14 <__aeabi_f2d+0x9c>)
   169d8:	0312      	lsls	r2, r2, #12
   169da:	1a1b      	subs	r3, r3, r0
   169dc:	055b      	lsls	r3, r3, #21
   169de:	0b16      	lsrs	r6, r2, #12
   169e0:	0d5b      	lsrs	r3, r3, #21
   169e2:	e7d8      	b.n	16996 <__aeabi_f2d+0x1e>
   169e4:	2d00      	cmp	r5, #0
   169e6:	d006      	beq.n	169f6 <__aeabi_f2d+0x7e>
   169e8:	0b32      	lsrs	r2, r6, #12
   169ea:	2680      	movs	r6, #128	; 0x80
   169ec:	0336      	lsls	r6, r6, #12
   169ee:	076d      	lsls	r5, r5, #29
   169f0:	4316      	orrs	r6, r2
   169f2:	4b09      	ldr	r3, [pc, #36]	; (16a18 <__aeabi_f2d+0xa0>)
   169f4:	e7cf      	b.n	16996 <__aeabi_f2d+0x1e>
   169f6:	4b08      	ldr	r3, [pc, #32]	; (16a18 <__aeabi_f2d+0xa0>)
   169f8:	2600      	movs	r6, #0
   169fa:	e7cc      	b.n	16996 <__aeabi_f2d+0x1e>
   169fc:	2300      	movs	r3, #0
   169fe:	2600      	movs	r6, #0
   16a00:	e7c9      	b.n	16996 <__aeabi_f2d+0x1e>
   16a02:	0003      	movs	r3, r0
   16a04:	002a      	movs	r2, r5
   16a06:	3b0b      	subs	r3, #11
   16a08:	409a      	lsls	r2, r3
   16a0a:	2500      	movs	r5, #0
   16a0c:	e7e3      	b.n	169d6 <__aeabi_f2d+0x5e>
   16a0e:	46c0      	nop			; (mov r8, r8)
   16a10:	800fffff 	.word	0x800fffff
   16a14:	00000389 	.word	0x00000389
   16a18:	000007ff 	.word	0x000007ff

00016a1c <__aeabi_d2f>:
   16a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   16a1e:	004c      	lsls	r4, r1, #1
   16a20:	0d64      	lsrs	r4, r4, #21
   16a22:	030b      	lsls	r3, r1, #12
   16a24:	1c62      	adds	r2, r4, #1
   16a26:	0f45      	lsrs	r5, r0, #29
   16a28:	0a5b      	lsrs	r3, r3, #9
   16a2a:	0552      	lsls	r2, r2, #21
   16a2c:	432b      	orrs	r3, r5
   16a2e:	0fc9      	lsrs	r1, r1, #31
   16a30:	00c5      	lsls	r5, r0, #3
   16a32:	0d52      	lsrs	r2, r2, #21
   16a34:	2a01      	cmp	r2, #1
   16a36:	dd28      	ble.n	16a8a <__aeabi_d2f+0x6e>
   16a38:	4a3a      	ldr	r2, [pc, #232]	; (16b24 <__aeabi_d2f+0x108>)
   16a3a:	18a6      	adds	r6, r4, r2
   16a3c:	2efe      	cmp	r6, #254	; 0xfe
   16a3e:	dc1b      	bgt.n	16a78 <__aeabi_d2f+0x5c>
   16a40:	2e00      	cmp	r6, #0
   16a42:	dd3e      	ble.n	16ac2 <__aeabi_d2f+0xa6>
   16a44:	0180      	lsls	r0, r0, #6
   16a46:	0002      	movs	r2, r0
   16a48:	1e50      	subs	r0, r2, #1
   16a4a:	4182      	sbcs	r2, r0
   16a4c:	0f6d      	lsrs	r5, r5, #29
   16a4e:	432a      	orrs	r2, r5
   16a50:	00db      	lsls	r3, r3, #3
   16a52:	4313      	orrs	r3, r2
   16a54:	075a      	lsls	r2, r3, #29
   16a56:	d004      	beq.n	16a62 <__aeabi_d2f+0x46>
   16a58:	220f      	movs	r2, #15
   16a5a:	401a      	ands	r2, r3
   16a5c:	2a04      	cmp	r2, #4
   16a5e:	d000      	beq.n	16a62 <__aeabi_d2f+0x46>
   16a60:	3304      	adds	r3, #4
   16a62:	2280      	movs	r2, #128	; 0x80
   16a64:	04d2      	lsls	r2, r2, #19
   16a66:	401a      	ands	r2, r3
   16a68:	d05a      	beq.n	16b20 <__aeabi_d2f+0x104>
   16a6a:	3601      	adds	r6, #1
   16a6c:	2eff      	cmp	r6, #255	; 0xff
   16a6e:	d003      	beq.n	16a78 <__aeabi_d2f+0x5c>
   16a70:	019b      	lsls	r3, r3, #6
   16a72:	0a5b      	lsrs	r3, r3, #9
   16a74:	b2f4      	uxtb	r4, r6
   16a76:	e001      	b.n	16a7c <__aeabi_d2f+0x60>
   16a78:	24ff      	movs	r4, #255	; 0xff
   16a7a:	2300      	movs	r3, #0
   16a7c:	0258      	lsls	r0, r3, #9
   16a7e:	05e4      	lsls	r4, r4, #23
   16a80:	0a40      	lsrs	r0, r0, #9
   16a82:	07c9      	lsls	r1, r1, #31
   16a84:	4320      	orrs	r0, r4
   16a86:	4308      	orrs	r0, r1
   16a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16a8a:	2c00      	cmp	r4, #0
   16a8c:	d007      	beq.n	16a9e <__aeabi_d2f+0x82>
   16a8e:	431d      	orrs	r5, r3
   16a90:	d0f2      	beq.n	16a78 <__aeabi_d2f+0x5c>
   16a92:	2080      	movs	r0, #128	; 0x80
   16a94:	00db      	lsls	r3, r3, #3
   16a96:	0480      	lsls	r0, r0, #18
   16a98:	4303      	orrs	r3, r0
   16a9a:	26ff      	movs	r6, #255	; 0xff
   16a9c:	e7da      	b.n	16a54 <__aeabi_d2f+0x38>
   16a9e:	432b      	orrs	r3, r5
   16aa0:	d003      	beq.n	16aaa <__aeabi_d2f+0x8e>
   16aa2:	2305      	movs	r3, #5
   16aa4:	08db      	lsrs	r3, r3, #3
   16aa6:	2cff      	cmp	r4, #255	; 0xff
   16aa8:	d003      	beq.n	16ab2 <__aeabi_d2f+0x96>
   16aaa:	025b      	lsls	r3, r3, #9
   16aac:	0a5b      	lsrs	r3, r3, #9
   16aae:	b2e4      	uxtb	r4, r4
   16ab0:	e7e4      	b.n	16a7c <__aeabi_d2f+0x60>
   16ab2:	2b00      	cmp	r3, #0
   16ab4:	d032      	beq.n	16b1c <__aeabi_d2f+0x100>
   16ab6:	2080      	movs	r0, #128	; 0x80
   16ab8:	03c0      	lsls	r0, r0, #15
   16aba:	4303      	orrs	r3, r0
   16abc:	025b      	lsls	r3, r3, #9
   16abe:	0a5b      	lsrs	r3, r3, #9
   16ac0:	e7dc      	b.n	16a7c <__aeabi_d2f+0x60>
   16ac2:	0032      	movs	r2, r6
   16ac4:	3217      	adds	r2, #23
   16ac6:	db14      	blt.n	16af2 <__aeabi_d2f+0xd6>
   16ac8:	2280      	movs	r2, #128	; 0x80
   16aca:	271e      	movs	r7, #30
   16acc:	0412      	lsls	r2, r2, #16
   16ace:	4313      	orrs	r3, r2
   16ad0:	1bbf      	subs	r7, r7, r6
   16ad2:	2f1f      	cmp	r7, #31
   16ad4:	dc0f      	bgt.n	16af6 <__aeabi_d2f+0xda>
   16ad6:	4a14      	ldr	r2, [pc, #80]	; (16b28 <__aeabi_d2f+0x10c>)
   16ad8:	4694      	mov	ip, r2
   16ada:	4464      	add	r4, ip
   16adc:	002a      	movs	r2, r5
   16ade:	40a5      	lsls	r5, r4
   16ae0:	002e      	movs	r6, r5
   16ae2:	40a3      	lsls	r3, r4
   16ae4:	1e75      	subs	r5, r6, #1
   16ae6:	41ae      	sbcs	r6, r5
   16ae8:	40fa      	lsrs	r2, r7
   16aea:	4333      	orrs	r3, r6
   16aec:	4313      	orrs	r3, r2
   16aee:	2600      	movs	r6, #0
   16af0:	e7b0      	b.n	16a54 <__aeabi_d2f+0x38>
   16af2:	2400      	movs	r4, #0
   16af4:	e7d5      	b.n	16aa2 <__aeabi_d2f+0x86>
   16af6:	2202      	movs	r2, #2
   16af8:	4252      	negs	r2, r2
   16afa:	1b96      	subs	r6, r2, r6
   16afc:	001a      	movs	r2, r3
   16afe:	40f2      	lsrs	r2, r6
   16b00:	2f20      	cmp	r7, #32
   16b02:	d009      	beq.n	16b18 <__aeabi_d2f+0xfc>
   16b04:	4809      	ldr	r0, [pc, #36]	; (16b2c <__aeabi_d2f+0x110>)
   16b06:	4684      	mov	ip, r0
   16b08:	4464      	add	r4, ip
   16b0a:	40a3      	lsls	r3, r4
   16b0c:	432b      	orrs	r3, r5
   16b0e:	1e5d      	subs	r5, r3, #1
   16b10:	41ab      	sbcs	r3, r5
   16b12:	2600      	movs	r6, #0
   16b14:	4313      	orrs	r3, r2
   16b16:	e79d      	b.n	16a54 <__aeabi_d2f+0x38>
   16b18:	2300      	movs	r3, #0
   16b1a:	e7f7      	b.n	16b0c <__aeabi_d2f+0xf0>
   16b1c:	2300      	movs	r3, #0
   16b1e:	e7ad      	b.n	16a7c <__aeabi_d2f+0x60>
   16b20:	0034      	movs	r4, r6
   16b22:	e7bf      	b.n	16aa4 <__aeabi_d2f+0x88>
   16b24:	fffffc80 	.word	0xfffffc80
   16b28:	fffffc82 	.word	0xfffffc82
   16b2c:	fffffca2 	.word	0xfffffca2

00016b30 <__clzsi2>:
   16b30:	211c      	movs	r1, #28
   16b32:	2301      	movs	r3, #1
   16b34:	041b      	lsls	r3, r3, #16
   16b36:	4298      	cmp	r0, r3
   16b38:	d301      	bcc.n	16b3e <__clzsi2+0xe>
   16b3a:	0c00      	lsrs	r0, r0, #16
   16b3c:	3910      	subs	r1, #16
   16b3e:	0a1b      	lsrs	r3, r3, #8
   16b40:	4298      	cmp	r0, r3
   16b42:	d301      	bcc.n	16b48 <__clzsi2+0x18>
   16b44:	0a00      	lsrs	r0, r0, #8
   16b46:	3908      	subs	r1, #8
   16b48:	091b      	lsrs	r3, r3, #4
   16b4a:	4298      	cmp	r0, r3
   16b4c:	d301      	bcc.n	16b52 <__clzsi2+0x22>
   16b4e:	0900      	lsrs	r0, r0, #4
   16b50:	3904      	subs	r1, #4
   16b52:	a202      	add	r2, pc, #8	; (adr r2, 16b5c <__clzsi2+0x2c>)
   16b54:	5c10      	ldrb	r0, [r2, r0]
   16b56:	1840      	adds	r0, r0, r1
   16b58:	4770      	bx	lr
   16b5a:	46c0      	nop			; (mov r8, r8)
   16b5c:	02020304 	.word	0x02020304
   16b60:	01010101 	.word	0x01010101
	...

00016b6c <__clzdi2>:
   16b6c:	b510      	push	{r4, lr}
   16b6e:	2900      	cmp	r1, #0
   16b70:	d103      	bne.n	16b7a <__clzdi2+0xe>
   16b72:	f7ff ffdd 	bl	16b30 <__clzsi2>
   16b76:	3020      	adds	r0, #32
   16b78:	e002      	b.n	16b80 <__clzdi2+0x14>
   16b7a:	1c08      	adds	r0, r1, #0
   16b7c:	f7ff ffd8 	bl	16b30 <__clzsi2>
   16b80:	bd10      	pop	{r4, pc}
   16b82:	46c0      	nop			; (mov r8, r8)

00016b84 <__assert_func>:
   16b84:	b530      	push	{r4, r5, lr}
   16b86:	001c      	movs	r4, r3
   16b88:	4b09      	ldr	r3, [pc, #36]	; (16bb0 <__assert_func+0x2c>)
   16b8a:	0005      	movs	r5, r0
   16b8c:	681b      	ldr	r3, [r3, #0]
   16b8e:	b085      	sub	sp, #20
   16b90:	68d8      	ldr	r0, [r3, #12]
   16b92:	4b08      	ldr	r3, [pc, #32]	; (16bb4 <__assert_func+0x30>)
   16b94:	2a00      	cmp	r2, #0
   16b96:	d101      	bne.n	16b9c <__assert_func+0x18>
   16b98:	4b07      	ldr	r3, [pc, #28]	; (16bb8 <__assert_func+0x34>)
   16b9a:	001a      	movs	r2, r3
   16b9c:	9202      	str	r2, [sp, #8]
   16b9e:	9301      	str	r3, [sp, #4]
   16ba0:	9100      	str	r1, [sp, #0]
   16ba2:	002b      	movs	r3, r5
   16ba4:	0022      	movs	r2, r4
   16ba6:	4905      	ldr	r1, [pc, #20]	; (16bbc <__assert_func+0x38>)
   16ba8:	f000 f80a 	bl	16bc0 <fiprintf>
   16bac:	f000 fdac 	bl	17708 <abort>
   16bb0:	20000020 	.word	0x20000020
   16bb4:	000191f8 	.word	0x000191f8
   16bb8:	00019233 	.word	0x00019233
   16bbc:	00019205 	.word	0x00019205

00016bc0 <fiprintf>:
   16bc0:	b40e      	push	{r1, r2, r3}
   16bc2:	b503      	push	{r0, r1, lr}
   16bc4:	0001      	movs	r1, r0
   16bc6:	ab03      	add	r3, sp, #12
   16bc8:	4804      	ldr	r0, [pc, #16]	; (16bdc <fiprintf+0x1c>)
   16bca:	cb04      	ldmia	r3!, {r2}
   16bcc:	6800      	ldr	r0, [r0, #0]
   16bce:	9301      	str	r3, [sp, #4]
   16bd0:	f000 f872 	bl	16cb8 <_vfiprintf_r>
   16bd4:	b002      	add	sp, #8
   16bd6:	bc08      	pop	{r3}
   16bd8:	b003      	add	sp, #12
   16bda:	4718      	bx	r3
   16bdc:	20000020 	.word	0x20000020

00016be0 <__libc_init_array>:
   16be0:	b570      	push	{r4, r5, r6, lr}
   16be2:	2600      	movs	r6, #0
   16be4:	4d0c      	ldr	r5, [pc, #48]	; (16c18 <__libc_init_array+0x38>)
   16be6:	4c0d      	ldr	r4, [pc, #52]	; (16c1c <__libc_init_array+0x3c>)
   16be8:	1b64      	subs	r4, r4, r5
   16bea:	10a4      	asrs	r4, r4, #2
   16bec:	42a6      	cmp	r6, r4
   16bee:	d109      	bne.n	16c04 <__libc_init_array+0x24>
   16bf0:	2600      	movs	r6, #0
   16bf2:	f002 fb6b 	bl	192cc <_init>
   16bf6:	4d0a      	ldr	r5, [pc, #40]	; (16c20 <__libc_init_array+0x40>)
   16bf8:	4c0a      	ldr	r4, [pc, #40]	; (16c24 <__libc_init_array+0x44>)
   16bfa:	1b64      	subs	r4, r4, r5
   16bfc:	10a4      	asrs	r4, r4, #2
   16bfe:	42a6      	cmp	r6, r4
   16c00:	d105      	bne.n	16c0e <__libc_init_array+0x2e>
   16c02:	bd70      	pop	{r4, r5, r6, pc}
   16c04:	00b3      	lsls	r3, r6, #2
   16c06:	58eb      	ldr	r3, [r5, r3]
   16c08:	4798      	blx	r3
   16c0a:	3601      	adds	r6, #1
   16c0c:	e7ee      	b.n	16bec <__libc_init_array+0xc>
   16c0e:	00b3      	lsls	r3, r6, #2
   16c10:	58eb      	ldr	r3, [r5, r3]
   16c12:	4798      	blx	r3
   16c14:	3601      	adds	r6, #1
   16c16:	e7f2      	b.n	16bfe <__libc_init_array+0x1e>
   16c18:	000192d8 	.word	0x000192d8
   16c1c:	000192d8 	.word	0x000192d8
   16c20:	000192d8 	.word	0x000192d8
   16c24:	000192dc 	.word	0x000192dc

00016c28 <memcmp>:
   16c28:	b530      	push	{r4, r5, lr}
   16c2a:	2400      	movs	r4, #0
   16c2c:	42a2      	cmp	r2, r4
   16c2e:	d101      	bne.n	16c34 <memcmp+0xc>
   16c30:	2000      	movs	r0, #0
   16c32:	e005      	b.n	16c40 <memcmp+0x18>
   16c34:	5d03      	ldrb	r3, [r0, r4]
   16c36:	1c65      	adds	r5, r4, #1
   16c38:	5d0c      	ldrb	r4, [r1, r4]
   16c3a:	42a3      	cmp	r3, r4
   16c3c:	d001      	beq.n	16c42 <memcmp+0x1a>
   16c3e:	1b18      	subs	r0, r3, r4
   16c40:	bd30      	pop	{r4, r5, pc}
   16c42:	002c      	movs	r4, r5
   16c44:	e7f2      	b.n	16c2c <memcmp+0x4>

00016c46 <memcpy>:
   16c46:	2300      	movs	r3, #0
   16c48:	b510      	push	{r4, lr}
   16c4a:	429a      	cmp	r2, r3
   16c4c:	d100      	bne.n	16c50 <memcpy+0xa>
   16c4e:	bd10      	pop	{r4, pc}
   16c50:	5ccc      	ldrb	r4, [r1, r3]
   16c52:	54c4      	strb	r4, [r0, r3]
   16c54:	3301      	adds	r3, #1
   16c56:	e7f8      	b.n	16c4a <memcpy+0x4>

00016c58 <memset>:
   16c58:	0003      	movs	r3, r0
   16c5a:	1882      	adds	r2, r0, r2
   16c5c:	4293      	cmp	r3, r2
   16c5e:	d100      	bne.n	16c62 <memset+0xa>
   16c60:	4770      	bx	lr
   16c62:	7019      	strb	r1, [r3, #0]
   16c64:	3301      	adds	r3, #1
   16c66:	e7f9      	b.n	16c5c <memset+0x4>

00016c68 <__sfputc_r>:
   16c68:	6893      	ldr	r3, [r2, #8]
   16c6a:	b510      	push	{r4, lr}
   16c6c:	3b01      	subs	r3, #1
   16c6e:	6093      	str	r3, [r2, #8]
   16c70:	2b00      	cmp	r3, #0
   16c72:	da05      	bge.n	16c80 <__sfputc_r+0x18>
   16c74:	6994      	ldr	r4, [r2, #24]
   16c76:	42a3      	cmp	r3, r4
   16c78:	db08      	blt.n	16c8c <__sfputc_r+0x24>
   16c7a:	b2cb      	uxtb	r3, r1
   16c7c:	2b0a      	cmp	r3, #10
   16c7e:	d005      	beq.n	16c8c <__sfputc_r+0x24>
   16c80:	6813      	ldr	r3, [r2, #0]
   16c82:	1c58      	adds	r0, r3, #1
   16c84:	6010      	str	r0, [r2, #0]
   16c86:	7019      	strb	r1, [r3, #0]
   16c88:	b2c8      	uxtb	r0, r1
   16c8a:	bd10      	pop	{r4, pc}
   16c8c:	f000 fc70 	bl	17570 <__swbuf_r>
   16c90:	e7fb      	b.n	16c8a <__sfputc_r+0x22>

00016c92 <__sfputs_r>:
   16c92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16c94:	0006      	movs	r6, r0
   16c96:	000f      	movs	r7, r1
   16c98:	0014      	movs	r4, r2
   16c9a:	18d5      	adds	r5, r2, r3
   16c9c:	42ac      	cmp	r4, r5
   16c9e:	d101      	bne.n	16ca4 <__sfputs_r+0x12>
   16ca0:	2000      	movs	r0, #0
   16ca2:	e007      	b.n	16cb4 <__sfputs_r+0x22>
   16ca4:	7821      	ldrb	r1, [r4, #0]
   16ca6:	003a      	movs	r2, r7
   16ca8:	0030      	movs	r0, r6
   16caa:	f7ff ffdd 	bl	16c68 <__sfputc_r>
   16cae:	3401      	adds	r4, #1
   16cb0:	1c43      	adds	r3, r0, #1
   16cb2:	d1f3      	bne.n	16c9c <__sfputs_r+0xa>
   16cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16cb6:	Address 0x00016cb6 is out of bounds.


00016cb8 <_vfiprintf_r>:
   16cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   16cba:	b09f      	sub	sp, #124	; 0x7c
   16cbc:	0006      	movs	r6, r0
   16cbe:	000f      	movs	r7, r1
   16cc0:	0014      	movs	r4, r2
   16cc2:	9305      	str	r3, [sp, #20]
   16cc4:	2800      	cmp	r0, #0
   16cc6:	d004      	beq.n	16cd2 <_vfiprintf_r+0x1a>
   16cc8:	6983      	ldr	r3, [r0, #24]
   16cca:	2b00      	cmp	r3, #0
   16ccc:	d101      	bne.n	16cd2 <_vfiprintf_r+0x1a>
   16cce:	f000 fe1b 	bl	17908 <__sinit>
   16cd2:	4b7f      	ldr	r3, [pc, #508]	; (16ed0 <_vfiprintf_r+0x218>)
   16cd4:	429f      	cmp	r7, r3
   16cd6:	d15c      	bne.n	16d92 <_vfiprintf_r+0xda>
   16cd8:	6877      	ldr	r7, [r6, #4]
   16cda:	89bb      	ldrh	r3, [r7, #12]
   16cdc:	071b      	lsls	r3, r3, #28
   16cde:	d562      	bpl.n	16da6 <_vfiprintf_r+0xee>
   16ce0:	693b      	ldr	r3, [r7, #16]
   16ce2:	2b00      	cmp	r3, #0
   16ce4:	d05f      	beq.n	16da6 <_vfiprintf_r+0xee>
   16ce6:	2300      	movs	r3, #0
   16ce8:	ad06      	add	r5, sp, #24
   16cea:	616b      	str	r3, [r5, #20]
   16cec:	3320      	adds	r3, #32
   16cee:	766b      	strb	r3, [r5, #25]
   16cf0:	3310      	adds	r3, #16
   16cf2:	76ab      	strb	r3, [r5, #26]
   16cf4:	9402      	str	r4, [sp, #8]
   16cf6:	9c02      	ldr	r4, [sp, #8]
   16cf8:	7823      	ldrb	r3, [r4, #0]
   16cfa:	2b00      	cmp	r3, #0
   16cfc:	d15d      	bne.n	16dba <_vfiprintf_r+0x102>
   16cfe:	9b02      	ldr	r3, [sp, #8]
   16d00:	1ae3      	subs	r3, r4, r3
   16d02:	9304      	str	r3, [sp, #16]
   16d04:	d00d      	beq.n	16d22 <_vfiprintf_r+0x6a>
   16d06:	9b04      	ldr	r3, [sp, #16]
   16d08:	9a02      	ldr	r2, [sp, #8]
   16d0a:	0039      	movs	r1, r7
   16d0c:	0030      	movs	r0, r6
   16d0e:	f7ff ffc0 	bl	16c92 <__sfputs_r>
   16d12:	1c43      	adds	r3, r0, #1
   16d14:	d100      	bne.n	16d18 <_vfiprintf_r+0x60>
   16d16:	e0cc      	b.n	16eb2 <_vfiprintf_r+0x1fa>
   16d18:	696a      	ldr	r2, [r5, #20]
   16d1a:	9b04      	ldr	r3, [sp, #16]
   16d1c:	4694      	mov	ip, r2
   16d1e:	4463      	add	r3, ip
   16d20:	616b      	str	r3, [r5, #20]
   16d22:	7823      	ldrb	r3, [r4, #0]
   16d24:	2b00      	cmp	r3, #0
   16d26:	d100      	bne.n	16d2a <_vfiprintf_r+0x72>
   16d28:	e0c3      	b.n	16eb2 <_vfiprintf_r+0x1fa>
   16d2a:	2201      	movs	r2, #1
   16d2c:	2300      	movs	r3, #0
   16d2e:	4252      	negs	r2, r2
   16d30:	606a      	str	r2, [r5, #4]
   16d32:	a902      	add	r1, sp, #8
   16d34:	3254      	adds	r2, #84	; 0x54
   16d36:	1852      	adds	r2, r2, r1
   16d38:	3401      	adds	r4, #1
   16d3a:	602b      	str	r3, [r5, #0]
   16d3c:	60eb      	str	r3, [r5, #12]
   16d3e:	60ab      	str	r3, [r5, #8]
   16d40:	7013      	strb	r3, [r2, #0]
   16d42:	65ab      	str	r3, [r5, #88]	; 0x58
   16d44:	7821      	ldrb	r1, [r4, #0]
   16d46:	2205      	movs	r2, #5
   16d48:	4862      	ldr	r0, [pc, #392]	; (16ed4 <_vfiprintf_r+0x21c>)
   16d4a:	f000 fee9 	bl	17b20 <memchr>
   16d4e:	1c63      	adds	r3, r4, #1
   16d50:	469c      	mov	ip, r3
   16d52:	2800      	cmp	r0, #0
   16d54:	d135      	bne.n	16dc2 <_vfiprintf_r+0x10a>
   16d56:	6829      	ldr	r1, [r5, #0]
   16d58:	06cb      	lsls	r3, r1, #27
   16d5a:	d504      	bpl.n	16d66 <_vfiprintf_r+0xae>
   16d5c:	2353      	movs	r3, #83	; 0x53
   16d5e:	aa02      	add	r2, sp, #8
   16d60:	3020      	adds	r0, #32
   16d62:	189b      	adds	r3, r3, r2
   16d64:	7018      	strb	r0, [r3, #0]
   16d66:	070b      	lsls	r3, r1, #28
   16d68:	d504      	bpl.n	16d74 <_vfiprintf_r+0xbc>
   16d6a:	2353      	movs	r3, #83	; 0x53
   16d6c:	202b      	movs	r0, #43	; 0x2b
   16d6e:	aa02      	add	r2, sp, #8
   16d70:	189b      	adds	r3, r3, r2
   16d72:	7018      	strb	r0, [r3, #0]
   16d74:	7823      	ldrb	r3, [r4, #0]
   16d76:	2b2a      	cmp	r3, #42	; 0x2a
   16d78:	d02c      	beq.n	16dd4 <_vfiprintf_r+0x11c>
   16d7a:	2000      	movs	r0, #0
   16d7c:	210a      	movs	r1, #10
   16d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16d80:	7822      	ldrb	r2, [r4, #0]
   16d82:	3a30      	subs	r2, #48	; 0x30
   16d84:	2a09      	cmp	r2, #9
   16d86:	d800      	bhi.n	16d8a <_vfiprintf_r+0xd2>
   16d88:	e06b      	b.n	16e62 <_vfiprintf_r+0x1aa>
   16d8a:	2800      	cmp	r0, #0
   16d8c:	d02a      	beq.n	16de4 <_vfiprintf_r+0x12c>
   16d8e:	9309      	str	r3, [sp, #36]	; 0x24
   16d90:	e028      	b.n	16de4 <_vfiprintf_r+0x12c>
   16d92:	4b51      	ldr	r3, [pc, #324]	; (16ed8 <_vfiprintf_r+0x220>)
   16d94:	429f      	cmp	r7, r3
   16d96:	d101      	bne.n	16d9c <_vfiprintf_r+0xe4>
   16d98:	68b7      	ldr	r7, [r6, #8]
   16d9a:	e79e      	b.n	16cda <_vfiprintf_r+0x22>
   16d9c:	4b4f      	ldr	r3, [pc, #316]	; (16edc <_vfiprintf_r+0x224>)
   16d9e:	429f      	cmp	r7, r3
   16da0:	d19b      	bne.n	16cda <_vfiprintf_r+0x22>
   16da2:	68f7      	ldr	r7, [r6, #12]
   16da4:	e799      	b.n	16cda <_vfiprintf_r+0x22>
   16da6:	0039      	movs	r1, r7
   16da8:	0030      	movs	r0, r6
   16daa:	f000 fc37 	bl	1761c <__swsetup_r>
   16dae:	2800      	cmp	r0, #0
   16db0:	d099      	beq.n	16ce6 <_vfiprintf_r+0x2e>
   16db2:	2001      	movs	r0, #1
   16db4:	4240      	negs	r0, r0
   16db6:	b01f      	add	sp, #124	; 0x7c
   16db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16dba:	2b25      	cmp	r3, #37	; 0x25
   16dbc:	d09f      	beq.n	16cfe <_vfiprintf_r+0x46>
   16dbe:	3401      	adds	r4, #1
   16dc0:	e79a      	b.n	16cf8 <_vfiprintf_r+0x40>
   16dc2:	4b44      	ldr	r3, [pc, #272]	; (16ed4 <_vfiprintf_r+0x21c>)
   16dc4:	6829      	ldr	r1, [r5, #0]
   16dc6:	1ac0      	subs	r0, r0, r3
   16dc8:	2301      	movs	r3, #1
   16dca:	4083      	lsls	r3, r0
   16dcc:	430b      	orrs	r3, r1
   16dce:	602b      	str	r3, [r5, #0]
   16dd0:	4664      	mov	r4, ip
   16dd2:	e7b7      	b.n	16d44 <_vfiprintf_r+0x8c>
   16dd4:	9b05      	ldr	r3, [sp, #20]
   16dd6:	1d18      	adds	r0, r3, #4
   16dd8:	681b      	ldr	r3, [r3, #0]
   16dda:	9005      	str	r0, [sp, #20]
   16ddc:	2b00      	cmp	r3, #0
   16dde:	db3a      	blt.n	16e56 <_vfiprintf_r+0x19e>
   16de0:	9309      	str	r3, [sp, #36]	; 0x24
   16de2:	4664      	mov	r4, ip
   16de4:	7823      	ldrb	r3, [r4, #0]
   16de6:	2b2e      	cmp	r3, #46	; 0x2e
   16de8:	d10b      	bne.n	16e02 <_vfiprintf_r+0x14a>
   16dea:	7863      	ldrb	r3, [r4, #1]
   16dec:	1c62      	adds	r2, r4, #1
   16dee:	2b2a      	cmp	r3, #42	; 0x2a
   16df0:	d13f      	bne.n	16e72 <_vfiprintf_r+0x1ba>
   16df2:	9b05      	ldr	r3, [sp, #20]
   16df4:	3402      	adds	r4, #2
   16df6:	1d1a      	adds	r2, r3, #4
   16df8:	681b      	ldr	r3, [r3, #0]
   16dfa:	9205      	str	r2, [sp, #20]
   16dfc:	2b00      	cmp	r3, #0
   16dfe:	db35      	blt.n	16e6c <_vfiprintf_r+0x1b4>
   16e00:	9307      	str	r3, [sp, #28]
   16e02:	7821      	ldrb	r1, [r4, #0]
   16e04:	2203      	movs	r2, #3
   16e06:	4836      	ldr	r0, [pc, #216]	; (16ee0 <_vfiprintf_r+0x228>)
   16e08:	f000 fe8a 	bl	17b20 <memchr>
   16e0c:	2800      	cmp	r0, #0
   16e0e:	d007      	beq.n	16e20 <_vfiprintf_r+0x168>
   16e10:	4b33      	ldr	r3, [pc, #204]	; (16ee0 <_vfiprintf_r+0x228>)
   16e12:	682a      	ldr	r2, [r5, #0]
   16e14:	1ac0      	subs	r0, r0, r3
   16e16:	2340      	movs	r3, #64	; 0x40
   16e18:	4083      	lsls	r3, r0
   16e1a:	4313      	orrs	r3, r2
   16e1c:	602b      	str	r3, [r5, #0]
   16e1e:	3401      	adds	r4, #1
   16e20:	7821      	ldrb	r1, [r4, #0]
   16e22:	1c63      	adds	r3, r4, #1
   16e24:	2206      	movs	r2, #6
   16e26:	482f      	ldr	r0, [pc, #188]	; (16ee4 <_vfiprintf_r+0x22c>)
   16e28:	9302      	str	r3, [sp, #8]
   16e2a:	7629      	strb	r1, [r5, #24]
   16e2c:	f000 fe78 	bl	17b20 <memchr>
   16e30:	2800      	cmp	r0, #0
   16e32:	d044      	beq.n	16ebe <_vfiprintf_r+0x206>
   16e34:	4b2c      	ldr	r3, [pc, #176]	; (16ee8 <_vfiprintf_r+0x230>)
   16e36:	2b00      	cmp	r3, #0
   16e38:	d12f      	bne.n	16e9a <_vfiprintf_r+0x1e2>
   16e3a:	6829      	ldr	r1, [r5, #0]
   16e3c:	9b05      	ldr	r3, [sp, #20]
   16e3e:	2207      	movs	r2, #7
   16e40:	05c9      	lsls	r1, r1, #23
   16e42:	d528      	bpl.n	16e96 <_vfiprintf_r+0x1de>
   16e44:	189b      	adds	r3, r3, r2
   16e46:	4393      	bics	r3, r2
   16e48:	3308      	adds	r3, #8
   16e4a:	9305      	str	r3, [sp, #20]
   16e4c:	696b      	ldr	r3, [r5, #20]
   16e4e:	9a03      	ldr	r2, [sp, #12]
   16e50:	189b      	adds	r3, r3, r2
   16e52:	616b      	str	r3, [r5, #20]
   16e54:	e74f      	b.n	16cf6 <_vfiprintf_r+0x3e>
   16e56:	425b      	negs	r3, r3
   16e58:	60eb      	str	r3, [r5, #12]
   16e5a:	2302      	movs	r3, #2
   16e5c:	430b      	orrs	r3, r1
   16e5e:	602b      	str	r3, [r5, #0]
   16e60:	e7bf      	b.n	16de2 <_vfiprintf_r+0x12a>
   16e62:	434b      	muls	r3, r1
   16e64:	3401      	adds	r4, #1
   16e66:	189b      	adds	r3, r3, r2
   16e68:	2001      	movs	r0, #1
   16e6a:	e789      	b.n	16d80 <_vfiprintf_r+0xc8>
   16e6c:	2301      	movs	r3, #1
   16e6e:	425b      	negs	r3, r3
   16e70:	e7c6      	b.n	16e00 <_vfiprintf_r+0x148>
   16e72:	2300      	movs	r3, #0
   16e74:	0014      	movs	r4, r2
   16e76:	200a      	movs	r0, #10
   16e78:	001a      	movs	r2, r3
   16e7a:	606b      	str	r3, [r5, #4]
   16e7c:	7821      	ldrb	r1, [r4, #0]
   16e7e:	3930      	subs	r1, #48	; 0x30
   16e80:	2909      	cmp	r1, #9
   16e82:	d903      	bls.n	16e8c <_vfiprintf_r+0x1d4>
   16e84:	2b00      	cmp	r3, #0
   16e86:	d0bc      	beq.n	16e02 <_vfiprintf_r+0x14a>
   16e88:	9207      	str	r2, [sp, #28]
   16e8a:	e7ba      	b.n	16e02 <_vfiprintf_r+0x14a>
   16e8c:	4342      	muls	r2, r0
   16e8e:	3401      	adds	r4, #1
   16e90:	1852      	adds	r2, r2, r1
   16e92:	2301      	movs	r3, #1
   16e94:	e7f2      	b.n	16e7c <_vfiprintf_r+0x1c4>
   16e96:	3307      	adds	r3, #7
   16e98:	e7d5      	b.n	16e46 <_vfiprintf_r+0x18e>
   16e9a:	ab05      	add	r3, sp, #20
   16e9c:	9300      	str	r3, [sp, #0]
   16e9e:	003a      	movs	r2, r7
   16ea0:	4b12      	ldr	r3, [pc, #72]	; (16eec <_vfiprintf_r+0x234>)
   16ea2:	0029      	movs	r1, r5
   16ea4:	0030      	movs	r0, r6
   16ea6:	e000      	b.n	16eaa <_vfiprintf_r+0x1f2>
   16ea8:	bf00      	nop
   16eaa:	9003      	str	r0, [sp, #12]
   16eac:	9b03      	ldr	r3, [sp, #12]
   16eae:	3301      	adds	r3, #1
   16eb0:	d1cc      	bne.n	16e4c <_vfiprintf_r+0x194>
   16eb2:	89bb      	ldrh	r3, [r7, #12]
   16eb4:	065b      	lsls	r3, r3, #25
   16eb6:	d500      	bpl.n	16eba <_vfiprintf_r+0x202>
   16eb8:	e77b      	b.n	16db2 <_vfiprintf_r+0xfa>
   16eba:	980b      	ldr	r0, [sp, #44]	; 0x2c
   16ebc:	e77b      	b.n	16db6 <_vfiprintf_r+0xfe>
   16ebe:	ab05      	add	r3, sp, #20
   16ec0:	9300      	str	r3, [sp, #0]
   16ec2:	003a      	movs	r2, r7
   16ec4:	4b09      	ldr	r3, [pc, #36]	; (16eec <_vfiprintf_r+0x234>)
   16ec6:	0029      	movs	r1, r5
   16ec8:	0030      	movs	r0, r6
   16eca:	f000 f87f 	bl	16fcc <_printf_i>
   16ece:	e7ec      	b.n	16eaa <_vfiprintf_r+0x1f2>
   16ed0:	0001928c 	.word	0x0001928c
   16ed4:	00019238 	.word	0x00019238
   16ed8:	000192ac 	.word	0x000192ac
   16edc:	0001926c 	.word	0x0001926c
   16ee0:	0001923e 	.word	0x0001923e
   16ee4:	00019242 	.word	0x00019242
   16ee8:	00000000 	.word	0x00000000
   16eec:	00016c93 	.word	0x00016c93

00016ef0 <_printf_common>:
   16ef0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16ef2:	0015      	movs	r5, r2
   16ef4:	9301      	str	r3, [sp, #4]
   16ef6:	688a      	ldr	r2, [r1, #8]
   16ef8:	690b      	ldr	r3, [r1, #16]
   16efa:	9000      	str	r0, [sp, #0]
   16efc:	000c      	movs	r4, r1
   16efe:	4293      	cmp	r3, r2
   16f00:	da00      	bge.n	16f04 <_printf_common+0x14>
   16f02:	0013      	movs	r3, r2
   16f04:	0022      	movs	r2, r4
   16f06:	602b      	str	r3, [r5, #0]
   16f08:	3243      	adds	r2, #67	; 0x43
   16f0a:	7812      	ldrb	r2, [r2, #0]
   16f0c:	2a00      	cmp	r2, #0
   16f0e:	d001      	beq.n	16f14 <_printf_common+0x24>
   16f10:	3301      	adds	r3, #1
   16f12:	602b      	str	r3, [r5, #0]
   16f14:	6823      	ldr	r3, [r4, #0]
   16f16:	069b      	lsls	r3, r3, #26
   16f18:	d502      	bpl.n	16f20 <_printf_common+0x30>
   16f1a:	682b      	ldr	r3, [r5, #0]
   16f1c:	3302      	adds	r3, #2
   16f1e:	602b      	str	r3, [r5, #0]
   16f20:	2706      	movs	r7, #6
   16f22:	6823      	ldr	r3, [r4, #0]
   16f24:	401f      	ands	r7, r3
   16f26:	d027      	beq.n	16f78 <_printf_common+0x88>
   16f28:	0023      	movs	r3, r4
   16f2a:	3343      	adds	r3, #67	; 0x43
   16f2c:	781b      	ldrb	r3, [r3, #0]
   16f2e:	1e5a      	subs	r2, r3, #1
   16f30:	4193      	sbcs	r3, r2
   16f32:	6822      	ldr	r2, [r4, #0]
   16f34:	0692      	lsls	r2, r2, #26
   16f36:	d430      	bmi.n	16f9a <_printf_common+0xaa>
   16f38:	0022      	movs	r2, r4
   16f3a:	9901      	ldr	r1, [sp, #4]
   16f3c:	3243      	adds	r2, #67	; 0x43
   16f3e:	9800      	ldr	r0, [sp, #0]
   16f40:	9e08      	ldr	r6, [sp, #32]
   16f42:	47b0      	blx	r6
   16f44:	1c43      	adds	r3, r0, #1
   16f46:	d025      	beq.n	16f94 <_printf_common+0xa4>
   16f48:	2306      	movs	r3, #6
   16f4a:	6820      	ldr	r0, [r4, #0]
   16f4c:	682a      	ldr	r2, [r5, #0]
   16f4e:	68e1      	ldr	r1, [r4, #12]
   16f50:	4003      	ands	r3, r0
   16f52:	2500      	movs	r5, #0
   16f54:	2b04      	cmp	r3, #4
   16f56:	d103      	bne.n	16f60 <_printf_common+0x70>
   16f58:	1a8d      	subs	r5, r1, r2
   16f5a:	43eb      	mvns	r3, r5
   16f5c:	17db      	asrs	r3, r3, #31
   16f5e:	401d      	ands	r5, r3
   16f60:	68a3      	ldr	r3, [r4, #8]
   16f62:	6922      	ldr	r2, [r4, #16]
   16f64:	4293      	cmp	r3, r2
   16f66:	dd01      	ble.n	16f6c <_printf_common+0x7c>
   16f68:	1a9b      	subs	r3, r3, r2
   16f6a:	18ed      	adds	r5, r5, r3
   16f6c:	2700      	movs	r7, #0
   16f6e:	42bd      	cmp	r5, r7
   16f70:	d120      	bne.n	16fb4 <_printf_common+0xc4>
   16f72:	2000      	movs	r0, #0
   16f74:	e010      	b.n	16f98 <_printf_common+0xa8>
   16f76:	3701      	adds	r7, #1
   16f78:	68e3      	ldr	r3, [r4, #12]
   16f7a:	682a      	ldr	r2, [r5, #0]
   16f7c:	1a9b      	subs	r3, r3, r2
   16f7e:	429f      	cmp	r7, r3
   16f80:	dad2      	bge.n	16f28 <_printf_common+0x38>
   16f82:	0022      	movs	r2, r4
   16f84:	2301      	movs	r3, #1
   16f86:	3219      	adds	r2, #25
   16f88:	9901      	ldr	r1, [sp, #4]
   16f8a:	9800      	ldr	r0, [sp, #0]
   16f8c:	9e08      	ldr	r6, [sp, #32]
   16f8e:	47b0      	blx	r6
   16f90:	1c43      	adds	r3, r0, #1
   16f92:	d1f0      	bne.n	16f76 <_printf_common+0x86>
   16f94:	2001      	movs	r0, #1
   16f96:	4240      	negs	r0, r0
   16f98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   16f9a:	2030      	movs	r0, #48	; 0x30
   16f9c:	18e1      	adds	r1, r4, r3
   16f9e:	3143      	adds	r1, #67	; 0x43
   16fa0:	7008      	strb	r0, [r1, #0]
   16fa2:	0021      	movs	r1, r4
   16fa4:	1c5a      	adds	r2, r3, #1
   16fa6:	3145      	adds	r1, #69	; 0x45
   16fa8:	7809      	ldrb	r1, [r1, #0]
   16faa:	18a2      	adds	r2, r4, r2
   16fac:	3243      	adds	r2, #67	; 0x43
   16fae:	3302      	adds	r3, #2
   16fb0:	7011      	strb	r1, [r2, #0]
   16fb2:	e7c1      	b.n	16f38 <_printf_common+0x48>
   16fb4:	0022      	movs	r2, r4
   16fb6:	2301      	movs	r3, #1
   16fb8:	321a      	adds	r2, #26
   16fba:	9901      	ldr	r1, [sp, #4]
   16fbc:	9800      	ldr	r0, [sp, #0]
   16fbe:	9e08      	ldr	r6, [sp, #32]
   16fc0:	47b0      	blx	r6
   16fc2:	1c43      	adds	r3, r0, #1
   16fc4:	d0e6      	beq.n	16f94 <_printf_common+0xa4>
   16fc6:	3701      	adds	r7, #1
   16fc8:	e7d1      	b.n	16f6e <_printf_common+0x7e>
   16fca:	Address 0x00016fca is out of bounds.


00016fcc <_printf_i>:
   16fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   16fce:	b08b      	sub	sp, #44	; 0x2c
   16fd0:	9206      	str	r2, [sp, #24]
   16fd2:	000a      	movs	r2, r1
   16fd4:	3243      	adds	r2, #67	; 0x43
   16fd6:	9307      	str	r3, [sp, #28]
   16fd8:	9005      	str	r0, [sp, #20]
   16fda:	9204      	str	r2, [sp, #16]
   16fdc:	7e0a      	ldrb	r2, [r1, #24]
   16fde:	000c      	movs	r4, r1
   16fe0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   16fe2:	2a6e      	cmp	r2, #110	; 0x6e
   16fe4:	d100      	bne.n	16fe8 <_printf_i+0x1c>
   16fe6:	e08f      	b.n	17108 <_printf_i+0x13c>
   16fe8:	d817      	bhi.n	1701a <_printf_i+0x4e>
   16fea:	2a63      	cmp	r2, #99	; 0x63
   16fec:	d02c      	beq.n	17048 <_printf_i+0x7c>
   16fee:	d808      	bhi.n	17002 <_printf_i+0x36>
   16ff0:	2a00      	cmp	r2, #0
   16ff2:	d100      	bne.n	16ff6 <_printf_i+0x2a>
   16ff4:	e099      	b.n	1712a <_printf_i+0x15e>
   16ff6:	2a58      	cmp	r2, #88	; 0x58
   16ff8:	d054      	beq.n	170a4 <_printf_i+0xd8>
   16ffa:	0026      	movs	r6, r4
   16ffc:	3642      	adds	r6, #66	; 0x42
   16ffe:	7032      	strb	r2, [r6, #0]
   17000:	e029      	b.n	17056 <_printf_i+0x8a>
   17002:	2a64      	cmp	r2, #100	; 0x64
   17004:	d001      	beq.n	1700a <_printf_i+0x3e>
   17006:	2a69      	cmp	r2, #105	; 0x69
   17008:	d1f7      	bne.n	16ffa <_printf_i+0x2e>
   1700a:	6821      	ldr	r1, [r4, #0]
   1700c:	681a      	ldr	r2, [r3, #0]
   1700e:	0608      	lsls	r0, r1, #24
   17010:	d523      	bpl.n	1705a <_printf_i+0x8e>
   17012:	1d11      	adds	r1, r2, #4
   17014:	6019      	str	r1, [r3, #0]
   17016:	6815      	ldr	r5, [r2, #0]
   17018:	e025      	b.n	17066 <_printf_i+0x9a>
   1701a:	2a73      	cmp	r2, #115	; 0x73
   1701c:	d100      	bne.n	17020 <_printf_i+0x54>
   1701e:	e088      	b.n	17132 <_printf_i+0x166>
   17020:	d808      	bhi.n	17034 <_printf_i+0x68>
   17022:	2a6f      	cmp	r2, #111	; 0x6f
   17024:	d029      	beq.n	1707a <_printf_i+0xae>
   17026:	2a70      	cmp	r2, #112	; 0x70
   17028:	d1e7      	bne.n	16ffa <_printf_i+0x2e>
   1702a:	2220      	movs	r2, #32
   1702c:	6809      	ldr	r1, [r1, #0]
   1702e:	430a      	orrs	r2, r1
   17030:	6022      	str	r2, [r4, #0]
   17032:	e003      	b.n	1703c <_printf_i+0x70>
   17034:	2a75      	cmp	r2, #117	; 0x75
   17036:	d020      	beq.n	1707a <_printf_i+0xae>
   17038:	2a78      	cmp	r2, #120	; 0x78
   1703a:	d1de      	bne.n	16ffa <_printf_i+0x2e>
   1703c:	0022      	movs	r2, r4
   1703e:	2178      	movs	r1, #120	; 0x78
   17040:	3245      	adds	r2, #69	; 0x45
   17042:	7011      	strb	r1, [r2, #0]
   17044:	4a6c      	ldr	r2, [pc, #432]	; (171f8 <_printf_i+0x22c>)
   17046:	e030      	b.n	170aa <_printf_i+0xde>
   17048:	000e      	movs	r6, r1
   1704a:	681a      	ldr	r2, [r3, #0]
   1704c:	3642      	adds	r6, #66	; 0x42
   1704e:	1d11      	adds	r1, r2, #4
   17050:	6019      	str	r1, [r3, #0]
   17052:	6813      	ldr	r3, [r2, #0]
   17054:	7033      	strb	r3, [r6, #0]
   17056:	2301      	movs	r3, #1
   17058:	e079      	b.n	1714e <_printf_i+0x182>
   1705a:	0649      	lsls	r1, r1, #25
   1705c:	d5d9      	bpl.n	17012 <_printf_i+0x46>
   1705e:	1d11      	adds	r1, r2, #4
   17060:	6019      	str	r1, [r3, #0]
   17062:	2300      	movs	r3, #0
   17064:	5ed5      	ldrsh	r5, [r2, r3]
   17066:	2d00      	cmp	r5, #0
   17068:	da03      	bge.n	17072 <_printf_i+0xa6>
   1706a:	232d      	movs	r3, #45	; 0x2d
   1706c:	9a04      	ldr	r2, [sp, #16]
   1706e:	426d      	negs	r5, r5
   17070:	7013      	strb	r3, [r2, #0]
   17072:	4b62      	ldr	r3, [pc, #392]	; (171fc <_printf_i+0x230>)
   17074:	270a      	movs	r7, #10
   17076:	9303      	str	r3, [sp, #12]
   17078:	e02f      	b.n	170da <_printf_i+0x10e>
   1707a:	6820      	ldr	r0, [r4, #0]
   1707c:	6819      	ldr	r1, [r3, #0]
   1707e:	0605      	lsls	r5, r0, #24
   17080:	d503      	bpl.n	1708a <_printf_i+0xbe>
   17082:	1d08      	adds	r0, r1, #4
   17084:	6018      	str	r0, [r3, #0]
   17086:	680d      	ldr	r5, [r1, #0]
   17088:	e005      	b.n	17096 <_printf_i+0xca>
   1708a:	0640      	lsls	r0, r0, #25
   1708c:	d5f9      	bpl.n	17082 <_printf_i+0xb6>
   1708e:	680d      	ldr	r5, [r1, #0]
   17090:	1d08      	adds	r0, r1, #4
   17092:	6018      	str	r0, [r3, #0]
   17094:	b2ad      	uxth	r5, r5
   17096:	4b59      	ldr	r3, [pc, #356]	; (171fc <_printf_i+0x230>)
   17098:	2708      	movs	r7, #8
   1709a:	9303      	str	r3, [sp, #12]
   1709c:	2a6f      	cmp	r2, #111	; 0x6f
   1709e:	d018      	beq.n	170d2 <_printf_i+0x106>
   170a0:	270a      	movs	r7, #10
   170a2:	e016      	b.n	170d2 <_printf_i+0x106>
   170a4:	3145      	adds	r1, #69	; 0x45
   170a6:	700a      	strb	r2, [r1, #0]
   170a8:	4a54      	ldr	r2, [pc, #336]	; (171fc <_printf_i+0x230>)
   170aa:	9203      	str	r2, [sp, #12]
   170ac:	681a      	ldr	r2, [r3, #0]
   170ae:	6821      	ldr	r1, [r4, #0]
   170b0:	1d10      	adds	r0, r2, #4
   170b2:	6018      	str	r0, [r3, #0]
   170b4:	6815      	ldr	r5, [r2, #0]
   170b6:	0608      	lsls	r0, r1, #24
   170b8:	d522      	bpl.n	17100 <_printf_i+0x134>
   170ba:	07cb      	lsls	r3, r1, #31
   170bc:	d502      	bpl.n	170c4 <_printf_i+0xf8>
   170be:	2320      	movs	r3, #32
   170c0:	4319      	orrs	r1, r3
   170c2:	6021      	str	r1, [r4, #0]
   170c4:	2710      	movs	r7, #16
   170c6:	2d00      	cmp	r5, #0
   170c8:	d103      	bne.n	170d2 <_printf_i+0x106>
   170ca:	2320      	movs	r3, #32
   170cc:	6822      	ldr	r2, [r4, #0]
   170ce:	439a      	bics	r2, r3
   170d0:	6022      	str	r2, [r4, #0]
   170d2:	0023      	movs	r3, r4
   170d4:	2200      	movs	r2, #0
   170d6:	3343      	adds	r3, #67	; 0x43
   170d8:	701a      	strb	r2, [r3, #0]
   170da:	6863      	ldr	r3, [r4, #4]
   170dc:	60a3      	str	r3, [r4, #8]
   170de:	2b00      	cmp	r3, #0
   170e0:	db5c      	blt.n	1719c <_printf_i+0x1d0>
   170e2:	2204      	movs	r2, #4
   170e4:	6821      	ldr	r1, [r4, #0]
   170e6:	4391      	bics	r1, r2
   170e8:	6021      	str	r1, [r4, #0]
   170ea:	2d00      	cmp	r5, #0
   170ec:	d158      	bne.n	171a0 <_printf_i+0x1d4>
   170ee:	9e04      	ldr	r6, [sp, #16]
   170f0:	2b00      	cmp	r3, #0
   170f2:	d064      	beq.n	171be <_printf_i+0x1f2>
   170f4:	0026      	movs	r6, r4
   170f6:	9b03      	ldr	r3, [sp, #12]
   170f8:	3642      	adds	r6, #66	; 0x42
   170fa:	781b      	ldrb	r3, [r3, #0]
   170fc:	7033      	strb	r3, [r6, #0]
   170fe:	e05e      	b.n	171be <_printf_i+0x1f2>
   17100:	0648      	lsls	r0, r1, #25
   17102:	d5da      	bpl.n	170ba <_printf_i+0xee>
   17104:	b2ad      	uxth	r5, r5
   17106:	e7d8      	b.n	170ba <_printf_i+0xee>
   17108:	6809      	ldr	r1, [r1, #0]
   1710a:	681a      	ldr	r2, [r3, #0]
   1710c:	0608      	lsls	r0, r1, #24
   1710e:	d505      	bpl.n	1711c <_printf_i+0x150>
   17110:	1d11      	adds	r1, r2, #4
   17112:	6019      	str	r1, [r3, #0]
   17114:	6813      	ldr	r3, [r2, #0]
   17116:	6962      	ldr	r2, [r4, #20]
   17118:	601a      	str	r2, [r3, #0]
   1711a:	e006      	b.n	1712a <_printf_i+0x15e>
   1711c:	0649      	lsls	r1, r1, #25
   1711e:	d5f7      	bpl.n	17110 <_printf_i+0x144>
   17120:	1d11      	adds	r1, r2, #4
   17122:	6019      	str	r1, [r3, #0]
   17124:	6813      	ldr	r3, [r2, #0]
   17126:	8aa2      	ldrh	r2, [r4, #20]
   17128:	801a      	strh	r2, [r3, #0]
   1712a:	2300      	movs	r3, #0
   1712c:	9e04      	ldr	r6, [sp, #16]
   1712e:	6123      	str	r3, [r4, #16]
   17130:	e054      	b.n	171dc <_printf_i+0x210>
   17132:	681a      	ldr	r2, [r3, #0]
   17134:	1d11      	adds	r1, r2, #4
   17136:	6019      	str	r1, [r3, #0]
   17138:	6816      	ldr	r6, [r2, #0]
   1713a:	2100      	movs	r1, #0
   1713c:	6862      	ldr	r2, [r4, #4]
   1713e:	0030      	movs	r0, r6
   17140:	f000 fcee 	bl	17b20 <memchr>
   17144:	2800      	cmp	r0, #0
   17146:	d001      	beq.n	1714c <_printf_i+0x180>
   17148:	1b80      	subs	r0, r0, r6
   1714a:	6060      	str	r0, [r4, #4]
   1714c:	6863      	ldr	r3, [r4, #4]
   1714e:	6123      	str	r3, [r4, #16]
   17150:	2300      	movs	r3, #0
   17152:	9a04      	ldr	r2, [sp, #16]
   17154:	7013      	strb	r3, [r2, #0]
   17156:	e041      	b.n	171dc <_printf_i+0x210>
   17158:	6923      	ldr	r3, [r4, #16]
   1715a:	0032      	movs	r2, r6
   1715c:	9906      	ldr	r1, [sp, #24]
   1715e:	9805      	ldr	r0, [sp, #20]
   17160:	9d07      	ldr	r5, [sp, #28]
   17162:	47a8      	blx	r5
   17164:	1c43      	adds	r3, r0, #1
   17166:	d043      	beq.n	171f0 <_printf_i+0x224>
   17168:	6823      	ldr	r3, [r4, #0]
   1716a:	2500      	movs	r5, #0
   1716c:	079b      	lsls	r3, r3, #30
   1716e:	d40f      	bmi.n	17190 <_printf_i+0x1c4>
   17170:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17172:	68e0      	ldr	r0, [r4, #12]
   17174:	4298      	cmp	r0, r3
   17176:	da3d      	bge.n	171f4 <_printf_i+0x228>
   17178:	0018      	movs	r0, r3
   1717a:	e03b      	b.n	171f4 <_printf_i+0x228>
   1717c:	0022      	movs	r2, r4
   1717e:	2301      	movs	r3, #1
   17180:	3219      	adds	r2, #25
   17182:	9906      	ldr	r1, [sp, #24]
   17184:	9805      	ldr	r0, [sp, #20]
   17186:	9e07      	ldr	r6, [sp, #28]
   17188:	47b0      	blx	r6
   1718a:	1c43      	adds	r3, r0, #1
   1718c:	d030      	beq.n	171f0 <_printf_i+0x224>
   1718e:	3501      	adds	r5, #1
   17190:	68e3      	ldr	r3, [r4, #12]
   17192:	9a09      	ldr	r2, [sp, #36]	; 0x24
   17194:	1a9b      	subs	r3, r3, r2
   17196:	429d      	cmp	r5, r3
   17198:	dbf0      	blt.n	1717c <_printf_i+0x1b0>
   1719a:	e7e9      	b.n	17170 <_printf_i+0x1a4>
   1719c:	2d00      	cmp	r5, #0
   1719e:	d0a9      	beq.n	170f4 <_printf_i+0x128>
   171a0:	9e04      	ldr	r6, [sp, #16]
   171a2:	0028      	movs	r0, r5
   171a4:	0039      	movs	r1, r7
   171a6:	f7fc fca3 	bl	13af0 <__aeabi_uidivmod>
   171aa:	9b03      	ldr	r3, [sp, #12]
   171ac:	3e01      	subs	r6, #1
   171ae:	5c5b      	ldrb	r3, [r3, r1]
   171b0:	0028      	movs	r0, r5
   171b2:	7033      	strb	r3, [r6, #0]
   171b4:	0039      	movs	r1, r7
   171b6:	f7fc fc15 	bl	139e4 <__udivsi3>
   171ba:	1e05      	subs	r5, r0, #0
   171bc:	d1f1      	bne.n	171a2 <_printf_i+0x1d6>
   171be:	2f08      	cmp	r7, #8
   171c0:	d109      	bne.n	171d6 <_printf_i+0x20a>
   171c2:	6823      	ldr	r3, [r4, #0]
   171c4:	07db      	lsls	r3, r3, #31
   171c6:	d506      	bpl.n	171d6 <_printf_i+0x20a>
   171c8:	6863      	ldr	r3, [r4, #4]
   171ca:	6922      	ldr	r2, [r4, #16]
   171cc:	4293      	cmp	r3, r2
   171ce:	dc02      	bgt.n	171d6 <_printf_i+0x20a>
   171d0:	2330      	movs	r3, #48	; 0x30
   171d2:	3e01      	subs	r6, #1
   171d4:	7033      	strb	r3, [r6, #0]
   171d6:	9b04      	ldr	r3, [sp, #16]
   171d8:	1b9b      	subs	r3, r3, r6
   171da:	6123      	str	r3, [r4, #16]
   171dc:	9b07      	ldr	r3, [sp, #28]
   171de:	aa09      	add	r2, sp, #36	; 0x24
   171e0:	9300      	str	r3, [sp, #0]
   171e2:	0021      	movs	r1, r4
   171e4:	9b06      	ldr	r3, [sp, #24]
   171e6:	9805      	ldr	r0, [sp, #20]
   171e8:	f7ff fe82 	bl	16ef0 <_printf_common>
   171ec:	1c43      	adds	r3, r0, #1
   171ee:	d1b3      	bne.n	17158 <_printf_i+0x18c>
   171f0:	2001      	movs	r0, #1
   171f2:	4240      	negs	r0, r0
   171f4:	b00b      	add	sp, #44	; 0x2c
   171f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   171f8:	0001925a 	.word	0x0001925a
   171fc:	00019249 	.word	0x00019249

00017200 <iprintf>:
   17200:	b40f      	push	{r0, r1, r2, r3}
   17202:	4b0b      	ldr	r3, [pc, #44]	; (17230 <iprintf+0x30>)
   17204:	b513      	push	{r0, r1, r4, lr}
   17206:	681c      	ldr	r4, [r3, #0]
   17208:	2c00      	cmp	r4, #0
   1720a:	d005      	beq.n	17218 <iprintf+0x18>
   1720c:	69a3      	ldr	r3, [r4, #24]
   1720e:	2b00      	cmp	r3, #0
   17210:	d102      	bne.n	17218 <iprintf+0x18>
   17212:	0020      	movs	r0, r4
   17214:	f000 fb78 	bl	17908 <__sinit>
   17218:	ab05      	add	r3, sp, #20
   1721a:	9a04      	ldr	r2, [sp, #16]
   1721c:	68a1      	ldr	r1, [r4, #8]
   1721e:	0020      	movs	r0, r4
   17220:	9301      	str	r3, [sp, #4]
   17222:	f7ff fd49 	bl	16cb8 <_vfiprintf_r>
   17226:	bc16      	pop	{r1, r2, r4}
   17228:	bc08      	pop	{r3}
   1722a:	b004      	add	sp, #16
   1722c:	4718      	bx	r3
   1722e:	46c0      	nop			; (mov r8, r8)
   17230:	20000020 	.word	0x20000020

00017234 <putchar>:
   17234:	4b08      	ldr	r3, [pc, #32]	; (17258 <putchar+0x24>)
   17236:	b570      	push	{r4, r5, r6, lr}
   17238:	681c      	ldr	r4, [r3, #0]
   1723a:	0005      	movs	r5, r0
   1723c:	2c00      	cmp	r4, #0
   1723e:	d005      	beq.n	1724c <putchar+0x18>
   17240:	69a3      	ldr	r3, [r4, #24]
   17242:	2b00      	cmp	r3, #0
   17244:	d102      	bne.n	1724c <putchar+0x18>
   17246:	0020      	movs	r0, r4
   17248:	f000 fb5e 	bl	17908 <__sinit>
   1724c:	0029      	movs	r1, r5
   1724e:	68a2      	ldr	r2, [r4, #8]
   17250:	0020      	movs	r0, r4
   17252:	f000 fd19 	bl	17c88 <_putc_r>
   17256:	bd70      	pop	{r4, r5, r6, pc}
   17258:	20000020 	.word	0x20000020

0001725c <_puts_r>:
   1725c:	b570      	push	{r4, r5, r6, lr}
   1725e:	0005      	movs	r5, r0
   17260:	000e      	movs	r6, r1
   17262:	2800      	cmp	r0, #0
   17264:	d004      	beq.n	17270 <_puts_r+0x14>
   17266:	6983      	ldr	r3, [r0, #24]
   17268:	2b00      	cmp	r3, #0
   1726a:	d101      	bne.n	17270 <_puts_r+0x14>
   1726c:	f000 fb4c 	bl	17908 <__sinit>
   17270:	69ab      	ldr	r3, [r5, #24]
   17272:	68ac      	ldr	r4, [r5, #8]
   17274:	2b00      	cmp	r3, #0
   17276:	d102      	bne.n	1727e <_puts_r+0x22>
   17278:	0028      	movs	r0, r5
   1727a:	f000 fb45 	bl	17908 <__sinit>
   1727e:	4b24      	ldr	r3, [pc, #144]	; (17310 <_puts_r+0xb4>)
   17280:	429c      	cmp	r4, r3
   17282:	d10f      	bne.n	172a4 <_puts_r+0x48>
   17284:	686c      	ldr	r4, [r5, #4]
   17286:	89a3      	ldrh	r3, [r4, #12]
   17288:	071b      	lsls	r3, r3, #28
   1728a:	d502      	bpl.n	17292 <_puts_r+0x36>
   1728c:	6923      	ldr	r3, [r4, #16]
   1728e:	2b00      	cmp	r3, #0
   17290:	d120      	bne.n	172d4 <_puts_r+0x78>
   17292:	0021      	movs	r1, r4
   17294:	0028      	movs	r0, r5
   17296:	f000 f9c1 	bl	1761c <__swsetup_r>
   1729a:	2800      	cmp	r0, #0
   1729c:	d01a      	beq.n	172d4 <_puts_r+0x78>
   1729e:	2001      	movs	r0, #1
   172a0:	4240      	negs	r0, r0
   172a2:	bd70      	pop	{r4, r5, r6, pc}
   172a4:	4b1b      	ldr	r3, [pc, #108]	; (17314 <_puts_r+0xb8>)
   172a6:	429c      	cmp	r4, r3
   172a8:	d101      	bne.n	172ae <_puts_r+0x52>
   172aa:	68ac      	ldr	r4, [r5, #8]
   172ac:	e7eb      	b.n	17286 <_puts_r+0x2a>
   172ae:	4b1a      	ldr	r3, [pc, #104]	; (17318 <_puts_r+0xbc>)
   172b0:	429c      	cmp	r4, r3
   172b2:	d1e8      	bne.n	17286 <_puts_r+0x2a>
   172b4:	68ec      	ldr	r4, [r5, #12]
   172b6:	e7e6      	b.n	17286 <_puts_r+0x2a>
   172b8:	3b01      	subs	r3, #1
   172ba:	3601      	adds	r6, #1
   172bc:	60a3      	str	r3, [r4, #8]
   172be:	2b00      	cmp	r3, #0
   172c0:	da04      	bge.n	172cc <_puts_r+0x70>
   172c2:	69a2      	ldr	r2, [r4, #24]
   172c4:	4293      	cmp	r3, r2
   172c6:	db16      	blt.n	172f6 <_puts_r+0x9a>
   172c8:	290a      	cmp	r1, #10
   172ca:	d014      	beq.n	172f6 <_puts_r+0x9a>
   172cc:	6823      	ldr	r3, [r4, #0]
   172ce:	1c5a      	adds	r2, r3, #1
   172d0:	6022      	str	r2, [r4, #0]
   172d2:	7019      	strb	r1, [r3, #0]
   172d4:	7831      	ldrb	r1, [r6, #0]
   172d6:	68a3      	ldr	r3, [r4, #8]
   172d8:	2900      	cmp	r1, #0
   172da:	d1ed      	bne.n	172b8 <_puts_r+0x5c>
   172dc:	3b01      	subs	r3, #1
   172de:	60a3      	str	r3, [r4, #8]
   172e0:	2b00      	cmp	r3, #0
   172e2:	da0f      	bge.n	17304 <_puts_r+0xa8>
   172e4:	0022      	movs	r2, r4
   172e6:	310a      	adds	r1, #10
   172e8:	0028      	movs	r0, r5
   172ea:	f000 f941 	bl	17570 <__swbuf_r>
   172ee:	1c43      	adds	r3, r0, #1
   172f0:	d0d5      	beq.n	1729e <_puts_r+0x42>
   172f2:	200a      	movs	r0, #10
   172f4:	e7d5      	b.n	172a2 <_puts_r+0x46>
   172f6:	0022      	movs	r2, r4
   172f8:	0028      	movs	r0, r5
   172fa:	f000 f939 	bl	17570 <__swbuf_r>
   172fe:	1c43      	adds	r3, r0, #1
   17300:	d1e8      	bne.n	172d4 <_puts_r+0x78>
   17302:	e7cc      	b.n	1729e <_puts_r+0x42>
   17304:	200a      	movs	r0, #10
   17306:	6823      	ldr	r3, [r4, #0]
   17308:	1c5a      	adds	r2, r3, #1
   1730a:	6022      	str	r2, [r4, #0]
   1730c:	7018      	strb	r0, [r3, #0]
   1730e:	e7c8      	b.n	172a2 <_puts_r+0x46>
   17310:	0001928c 	.word	0x0001928c
   17314:	000192ac 	.word	0x000192ac
   17318:	0001926c 	.word	0x0001926c

0001731c <puts>:
   1731c:	b510      	push	{r4, lr}
   1731e:	4b03      	ldr	r3, [pc, #12]	; (1732c <puts+0x10>)
   17320:	0001      	movs	r1, r0
   17322:	6818      	ldr	r0, [r3, #0]
   17324:	f7ff ff9a 	bl	1725c <_puts_r>
   17328:	bd10      	pop	{r4, pc}
   1732a:	46c0      	nop			; (mov r8, r8)
   1732c:	20000020 	.word	0x20000020

00017330 <srand>:
   17330:	4b10      	ldr	r3, [pc, #64]	; (17374 <srand+0x44>)
   17332:	b570      	push	{r4, r5, r6, lr}
   17334:	681c      	ldr	r4, [r3, #0]
   17336:	0005      	movs	r5, r0
   17338:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1733a:	2b00      	cmp	r3, #0
   1733c:	d115      	bne.n	1736a <srand+0x3a>
   1733e:	2018      	movs	r0, #24
   17340:	f000 fbe4 	bl	17b0c <malloc>
   17344:	4b0c      	ldr	r3, [pc, #48]	; (17378 <srand+0x48>)
   17346:	63a0      	str	r0, [r4, #56]	; 0x38
   17348:	8003      	strh	r3, [r0, #0]
   1734a:	4b0c      	ldr	r3, [pc, #48]	; (1737c <srand+0x4c>)
   1734c:	2201      	movs	r2, #1
   1734e:	8043      	strh	r3, [r0, #2]
   17350:	4b0b      	ldr	r3, [pc, #44]	; (17380 <srand+0x50>)
   17352:	8083      	strh	r3, [r0, #4]
   17354:	4b0b      	ldr	r3, [pc, #44]	; (17384 <srand+0x54>)
   17356:	80c3      	strh	r3, [r0, #6]
   17358:	4b0b      	ldr	r3, [pc, #44]	; (17388 <srand+0x58>)
   1735a:	8103      	strh	r3, [r0, #8]
   1735c:	2305      	movs	r3, #5
   1735e:	8143      	strh	r3, [r0, #10]
   17360:	3306      	adds	r3, #6
   17362:	8183      	strh	r3, [r0, #12]
   17364:	2300      	movs	r3, #0
   17366:	6102      	str	r2, [r0, #16]
   17368:	6143      	str	r3, [r0, #20]
   1736a:	2200      	movs	r2, #0
   1736c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1736e:	611d      	str	r5, [r3, #16]
   17370:	615a      	str	r2, [r3, #20]
   17372:	bd70      	pop	{r4, r5, r6, pc}
   17374:	20000020 	.word	0x20000020
   17378:	0000330e 	.word	0x0000330e
   1737c:	ffffabcd 	.word	0xffffabcd
   17380:	00001234 	.word	0x00001234
   17384:	ffffe66d 	.word	0xffffe66d
   17388:	ffffdeec 	.word	0xffffdeec

0001738c <rand>:
   1738c:	4b15      	ldr	r3, [pc, #84]	; (173e4 <rand+0x58>)
   1738e:	b510      	push	{r4, lr}
   17390:	681c      	ldr	r4, [r3, #0]
   17392:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   17394:	2b00      	cmp	r3, #0
   17396:	d115      	bne.n	173c4 <rand+0x38>
   17398:	2018      	movs	r0, #24
   1739a:	f000 fbb7 	bl	17b0c <malloc>
   1739e:	4b12      	ldr	r3, [pc, #72]	; (173e8 <rand+0x5c>)
   173a0:	63a0      	str	r0, [r4, #56]	; 0x38
   173a2:	8003      	strh	r3, [r0, #0]
   173a4:	4b11      	ldr	r3, [pc, #68]	; (173ec <rand+0x60>)
   173a6:	2201      	movs	r2, #1
   173a8:	8043      	strh	r3, [r0, #2]
   173aa:	4b11      	ldr	r3, [pc, #68]	; (173f0 <rand+0x64>)
   173ac:	8083      	strh	r3, [r0, #4]
   173ae:	4b11      	ldr	r3, [pc, #68]	; (173f4 <rand+0x68>)
   173b0:	80c3      	strh	r3, [r0, #6]
   173b2:	4b11      	ldr	r3, [pc, #68]	; (173f8 <rand+0x6c>)
   173b4:	8103      	strh	r3, [r0, #8]
   173b6:	2305      	movs	r3, #5
   173b8:	8143      	strh	r3, [r0, #10]
   173ba:	3306      	adds	r3, #6
   173bc:	8183      	strh	r3, [r0, #12]
   173be:	2300      	movs	r3, #0
   173c0:	6102      	str	r2, [r0, #16]
   173c2:	6143      	str	r3, [r0, #20]
   173c4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   173c6:	4a0d      	ldr	r2, [pc, #52]	; (173fc <rand+0x70>)
   173c8:	6920      	ldr	r0, [r4, #16]
   173ca:	6961      	ldr	r1, [r4, #20]
   173cc:	4b0c      	ldr	r3, [pc, #48]	; (17400 <rand+0x74>)
   173ce:	f7fc fd17 	bl	13e00 <__aeabi_lmul>
   173d2:	2201      	movs	r2, #1
   173d4:	2300      	movs	r3, #0
   173d6:	1880      	adds	r0, r0, r2
   173d8:	4159      	adcs	r1, r3
   173da:	6120      	str	r0, [r4, #16]
   173dc:	6161      	str	r1, [r4, #20]
   173de:	0048      	lsls	r0, r1, #1
   173e0:	0840      	lsrs	r0, r0, #1
   173e2:	bd10      	pop	{r4, pc}
   173e4:	20000020 	.word	0x20000020
   173e8:	0000330e 	.word	0x0000330e
   173ec:	ffffabcd 	.word	0xffffabcd
   173f0:	00001234 	.word	0x00001234
   173f4:	ffffe66d 	.word	0xffffe66d
   173f8:	ffffdeec 	.word	0xffffdeec
   173fc:	4c957f2d 	.word	0x4c957f2d
   17400:	5851f42d 	.word	0x5851f42d

00017404 <setbuf>:
   17404:	424a      	negs	r2, r1
   17406:	414a      	adcs	r2, r1
   17408:	2380      	movs	r3, #128	; 0x80
   1740a:	b510      	push	{r4, lr}
   1740c:	0052      	lsls	r2, r2, #1
   1740e:	00db      	lsls	r3, r3, #3
   17410:	f000 f802 	bl	17418 <setvbuf>
   17414:	bd10      	pop	{r4, pc}
   17416:	Address 0x00017416 is out of bounds.


00017418 <setvbuf>:
   17418:	b5f0      	push	{r4, r5, r6, r7, lr}
   1741a:	001d      	movs	r5, r3
   1741c:	4b4f      	ldr	r3, [pc, #316]	; (1755c <setvbuf+0x144>)
   1741e:	b085      	sub	sp, #20
   17420:	681e      	ldr	r6, [r3, #0]
   17422:	0004      	movs	r4, r0
   17424:	000f      	movs	r7, r1
   17426:	9200      	str	r2, [sp, #0]
   17428:	2e00      	cmp	r6, #0
   1742a:	d005      	beq.n	17438 <setvbuf+0x20>
   1742c:	69b3      	ldr	r3, [r6, #24]
   1742e:	2b00      	cmp	r3, #0
   17430:	d102      	bne.n	17438 <setvbuf+0x20>
   17432:	0030      	movs	r0, r6
   17434:	f000 fa68 	bl	17908 <__sinit>
   17438:	4b49      	ldr	r3, [pc, #292]	; (17560 <setvbuf+0x148>)
   1743a:	429c      	cmp	r4, r3
   1743c:	d150      	bne.n	174e0 <setvbuf+0xc8>
   1743e:	6874      	ldr	r4, [r6, #4]
   17440:	9b00      	ldr	r3, [sp, #0]
   17442:	2b02      	cmp	r3, #2
   17444:	d005      	beq.n	17452 <setvbuf+0x3a>
   17446:	2b01      	cmp	r3, #1
   17448:	d900      	bls.n	1744c <setvbuf+0x34>
   1744a:	e084      	b.n	17556 <setvbuf+0x13e>
   1744c:	2d00      	cmp	r5, #0
   1744e:	da00      	bge.n	17452 <setvbuf+0x3a>
   17450:	e081      	b.n	17556 <setvbuf+0x13e>
   17452:	0021      	movs	r1, r4
   17454:	0030      	movs	r0, r6
   17456:	f000 f9e9 	bl	1782c <_fflush_r>
   1745a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1745c:	2900      	cmp	r1, #0
   1745e:	d008      	beq.n	17472 <setvbuf+0x5a>
   17460:	0023      	movs	r3, r4
   17462:	3344      	adds	r3, #68	; 0x44
   17464:	4299      	cmp	r1, r3
   17466:	d002      	beq.n	1746e <setvbuf+0x56>
   17468:	0030      	movs	r0, r6
   1746a:	f000 fb65 	bl	17b38 <_free_r>
   1746e:	2300      	movs	r3, #0
   17470:	6363      	str	r3, [r4, #52]	; 0x34
   17472:	2300      	movs	r3, #0
   17474:	61a3      	str	r3, [r4, #24]
   17476:	6063      	str	r3, [r4, #4]
   17478:	89a3      	ldrh	r3, [r4, #12]
   1747a:	061b      	lsls	r3, r3, #24
   1747c:	d503      	bpl.n	17486 <setvbuf+0x6e>
   1747e:	6921      	ldr	r1, [r4, #16]
   17480:	0030      	movs	r0, r6
   17482:	f000 fb59 	bl	17b38 <_free_r>
   17486:	89a3      	ldrh	r3, [r4, #12]
   17488:	4a36      	ldr	r2, [pc, #216]	; (17564 <setvbuf+0x14c>)
   1748a:	4013      	ands	r3, r2
   1748c:	81a3      	strh	r3, [r4, #12]
   1748e:	9b00      	ldr	r3, [sp, #0]
   17490:	2b02      	cmp	r3, #2
   17492:	d05a      	beq.n	1754a <setvbuf+0x132>
   17494:	ab03      	add	r3, sp, #12
   17496:	aa02      	add	r2, sp, #8
   17498:	0021      	movs	r1, r4
   1749a:	0030      	movs	r0, r6
   1749c:	f000 faca 	bl	17a34 <__swhatbuf_r>
   174a0:	89a3      	ldrh	r3, [r4, #12]
   174a2:	4318      	orrs	r0, r3
   174a4:	81a0      	strh	r0, [r4, #12]
   174a6:	2d00      	cmp	r5, #0
   174a8:	d124      	bne.n	174f4 <setvbuf+0xdc>
   174aa:	9d02      	ldr	r5, [sp, #8]
   174ac:	0028      	movs	r0, r5
   174ae:	f000 fb2d 	bl	17b0c <malloc>
   174b2:	9501      	str	r5, [sp, #4]
   174b4:	1e07      	subs	r7, r0, #0
   174b6:	d142      	bne.n	1753e <setvbuf+0x126>
   174b8:	9b02      	ldr	r3, [sp, #8]
   174ba:	9301      	str	r3, [sp, #4]
   174bc:	42ab      	cmp	r3, r5
   174be:	d139      	bne.n	17534 <setvbuf+0x11c>
   174c0:	2001      	movs	r0, #1
   174c2:	4240      	negs	r0, r0
   174c4:	2302      	movs	r3, #2
   174c6:	89a2      	ldrh	r2, [r4, #12]
   174c8:	4313      	orrs	r3, r2
   174ca:	81a3      	strh	r3, [r4, #12]
   174cc:	2300      	movs	r3, #0
   174ce:	60a3      	str	r3, [r4, #8]
   174d0:	0023      	movs	r3, r4
   174d2:	3347      	adds	r3, #71	; 0x47
   174d4:	6023      	str	r3, [r4, #0]
   174d6:	6123      	str	r3, [r4, #16]
   174d8:	2301      	movs	r3, #1
   174da:	6163      	str	r3, [r4, #20]
   174dc:	b005      	add	sp, #20
   174de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   174e0:	4b21      	ldr	r3, [pc, #132]	; (17568 <setvbuf+0x150>)
   174e2:	429c      	cmp	r4, r3
   174e4:	d101      	bne.n	174ea <setvbuf+0xd2>
   174e6:	68b4      	ldr	r4, [r6, #8]
   174e8:	e7aa      	b.n	17440 <setvbuf+0x28>
   174ea:	4b20      	ldr	r3, [pc, #128]	; (1756c <setvbuf+0x154>)
   174ec:	429c      	cmp	r4, r3
   174ee:	d1a7      	bne.n	17440 <setvbuf+0x28>
   174f0:	68f4      	ldr	r4, [r6, #12]
   174f2:	e7a5      	b.n	17440 <setvbuf+0x28>
   174f4:	2f00      	cmp	r7, #0
   174f6:	d0d9      	beq.n	174ac <setvbuf+0x94>
   174f8:	69b3      	ldr	r3, [r6, #24]
   174fa:	2b00      	cmp	r3, #0
   174fc:	d102      	bne.n	17504 <setvbuf+0xec>
   174fe:	0030      	movs	r0, r6
   17500:	f000 fa02 	bl	17908 <__sinit>
   17504:	9b00      	ldr	r3, [sp, #0]
   17506:	2b01      	cmp	r3, #1
   17508:	d103      	bne.n	17512 <setvbuf+0xfa>
   1750a:	89a3      	ldrh	r3, [r4, #12]
   1750c:	9a00      	ldr	r2, [sp, #0]
   1750e:	431a      	orrs	r2, r3
   17510:	81a2      	strh	r2, [r4, #12]
   17512:	2008      	movs	r0, #8
   17514:	89a3      	ldrh	r3, [r4, #12]
   17516:	6027      	str	r7, [r4, #0]
   17518:	6127      	str	r7, [r4, #16]
   1751a:	6165      	str	r5, [r4, #20]
   1751c:	4018      	ands	r0, r3
   1751e:	d018      	beq.n	17552 <setvbuf+0x13a>
   17520:	2001      	movs	r0, #1
   17522:	4018      	ands	r0, r3
   17524:	2300      	movs	r3, #0
   17526:	4298      	cmp	r0, r3
   17528:	d011      	beq.n	1754e <setvbuf+0x136>
   1752a:	426d      	negs	r5, r5
   1752c:	60a3      	str	r3, [r4, #8]
   1752e:	61a5      	str	r5, [r4, #24]
   17530:	0018      	movs	r0, r3
   17532:	e7d3      	b.n	174dc <setvbuf+0xc4>
   17534:	9801      	ldr	r0, [sp, #4]
   17536:	f000 fae9 	bl	17b0c <malloc>
   1753a:	1e07      	subs	r7, r0, #0
   1753c:	d0c0      	beq.n	174c0 <setvbuf+0xa8>
   1753e:	2380      	movs	r3, #128	; 0x80
   17540:	89a2      	ldrh	r2, [r4, #12]
   17542:	9d01      	ldr	r5, [sp, #4]
   17544:	4313      	orrs	r3, r2
   17546:	81a3      	strh	r3, [r4, #12]
   17548:	e7d6      	b.n	174f8 <setvbuf+0xe0>
   1754a:	2000      	movs	r0, #0
   1754c:	e7ba      	b.n	174c4 <setvbuf+0xac>
   1754e:	60a5      	str	r5, [r4, #8]
   17550:	e7c4      	b.n	174dc <setvbuf+0xc4>
   17552:	60a0      	str	r0, [r4, #8]
   17554:	e7c2      	b.n	174dc <setvbuf+0xc4>
   17556:	2001      	movs	r0, #1
   17558:	4240      	negs	r0, r0
   1755a:	e7bf      	b.n	174dc <setvbuf+0xc4>
   1755c:	20000020 	.word	0x20000020
   17560:	0001928c 	.word	0x0001928c
   17564:	fffff35c 	.word	0xfffff35c
   17568:	000192ac 	.word	0x000192ac
   1756c:	0001926c 	.word	0x0001926c

00017570 <__swbuf_r>:
   17570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17572:	0005      	movs	r5, r0
   17574:	000e      	movs	r6, r1
   17576:	0014      	movs	r4, r2
   17578:	2800      	cmp	r0, #0
   1757a:	d004      	beq.n	17586 <__swbuf_r+0x16>
   1757c:	6983      	ldr	r3, [r0, #24]
   1757e:	2b00      	cmp	r3, #0
   17580:	d101      	bne.n	17586 <__swbuf_r+0x16>
   17582:	f000 f9c1 	bl	17908 <__sinit>
   17586:	4b22      	ldr	r3, [pc, #136]	; (17610 <__swbuf_r+0xa0>)
   17588:	429c      	cmp	r4, r3
   1758a:	d12d      	bne.n	175e8 <__swbuf_r+0x78>
   1758c:	686c      	ldr	r4, [r5, #4]
   1758e:	69a3      	ldr	r3, [r4, #24]
   17590:	60a3      	str	r3, [r4, #8]
   17592:	89a3      	ldrh	r3, [r4, #12]
   17594:	071b      	lsls	r3, r3, #28
   17596:	d531      	bpl.n	175fc <__swbuf_r+0x8c>
   17598:	6923      	ldr	r3, [r4, #16]
   1759a:	2b00      	cmp	r3, #0
   1759c:	d02e      	beq.n	175fc <__swbuf_r+0x8c>
   1759e:	6823      	ldr	r3, [r4, #0]
   175a0:	6922      	ldr	r2, [r4, #16]
   175a2:	b2f7      	uxtb	r7, r6
   175a4:	1a98      	subs	r0, r3, r2
   175a6:	6963      	ldr	r3, [r4, #20]
   175a8:	b2f6      	uxtb	r6, r6
   175aa:	4298      	cmp	r0, r3
   175ac:	db05      	blt.n	175ba <__swbuf_r+0x4a>
   175ae:	0021      	movs	r1, r4
   175b0:	0028      	movs	r0, r5
   175b2:	f000 f93b 	bl	1782c <_fflush_r>
   175b6:	2800      	cmp	r0, #0
   175b8:	d126      	bne.n	17608 <__swbuf_r+0x98>
   175ba:	68a3      	ldr	r3, [r4, #8]
   175bc:	3001      	adds	r0, #1
   175be:	3b01      	subs	r3, #1
   175c0:	60a3      	str	r3, [r4, #8]
   175c2:	6823      	ldr	r3, [r4, #0]
   175c4:	1c5a      	adds	r2, r3, #1
   175c6:	6022      	str	r2, [r4, #0]
   175c8:	701f      	strb	r7, [r3, #0]
   175ca:	6963      	ldr	r3, [r4, #20]
   175cc:	4298      	cmp	r0, r3
   175ce:	d004      	beq.n	175da <__swbuf_r+0x6a>
   175d0:	89a3      	ldrh	r3, [r4, #12]
   175d2:	07db      	lsls	r3, r3, #31
   175d4:	d51a      	bpl.n	1760c <__swbuf_r+0x9c>
   175d6:	2e0a      	cmp	r6, #10
   175d8:	d118      	bne.n	1760c <__swbuf_r+0x9c>
   175da:	0021      	movs	r1, r4
   175dc:	0028      	movs	r0, r5
   175de:	f000 f925 	bl	1782c <_fflush_r>
   175e2:	2800      	cmp	r0, #0
   175e4:	d012      	beq.n	1760c <__swbuf_r+0x9c>
   175e6:	e00f      	b.n	17608 <__swbuf_r+0x98>
   175e8:	4b0a      	ldr	r3, [pc, #40]	; (17614 <__swbuf_r+0xa4>)
   175ea:	429c      	cmp	r4, r3
   175ec:	d101      	bne.n	175f2 <__swbuf_r+0x82>
   175ee:	68ac      	ldr	r4, [r5, #8]
   175f0:	e7cd      	b.n	1758e <__swbuf_r+0x1e>
   175f2:	4b09      	ldr	r3, [pc, #36]	; (17618 <__swbuf_r+0xa8>)
   175f4:	429c      	cmp	r4, r3
   175f6:	d1ca      	bne.n	1758e <__swbuf_r+0x1e>
   175f8:	68ec      	ldr	r4, [r5, #12]
   175fa:	e7c8      	b.n	1758e <__swbuf_r+0x1e>
   175fc:	0021      	movs	r1, r4
   175fe:	0028      	movs	r0, r5
   17600:	f000 f80c 	bl	1761c <__swsetup_r>
   17604:	2800      	cmp	r0, #0
   17606:	d0ca      	beq.n	1759e <__swbuf_r+0x2e>
   17608:	2601      	movs	r6, #1
   1760a:	4276      	negs	r6, r6
   1760c:	0030      	movs	r0, r6
   1760e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17610:	0001928c 	.word	0x0001928c
   17614:	000192ac 	.word	0x000192ac
   17618:	0001926c 	.word	0x0001926c

0001761c <__swsetup_r>:
   1761c:	4b36      	ldr	r3, [pc, #216]	; (176f8 <__swsetup_r+0xdc>)
   1761e:	b570      	push	{r4, r5, r6, lr}
   17620:	681d      	ldr	r5, [r3, #0]
   17622:	0006      	movs	r6, r0
   17624:	000c      	movs	r4, r1
   17626:	2d00      	cmp	r5, #0
   17628:	d005      	beq.n	17636 <__swsetup_r+0x1a>
   1762a:	69ab      	ldr	r3, [r5, #24]
   1762c:	2b00      	cmp	r3, #0
   1762e:	d102      	bne.n	17636 <__swsetup_r+0x1a>
   17630:	0028      	movs	r0, r5
   17632:	f000 f969 	bl	17908 <__sinit>
   17636:	4b31      	ldr	r3, [pc, #196]	; (176fc <__swsetup_r+0xe0>)
   17638:	429c      	cmp	r4, r3
   1763a:	d10f      	bne.n	1765c <__swsetup_r+0x40>
   1763c:	686c      	ldr	r4, [r5, #4]
   1763e:	230c      	movs	r3, #12
   17640:	5ee2      	ldrsh	r2, [r4, r3]
   17642:	b293      	uxth	r3, r2
   17644:	0719      	lsls	r1, r3, #28
   17646:	d42d      	bmi.n	176a4 <__swsetup_r+0x88>
   17648:	06d9      	lsls	r1, r3, #27
   1764a:	d411      	bmi.n	17670 <__swsetup_r+0x54>
   1764c:	2309      	movs	r3, #9
   1764e:	2001      	movs	r0, #1
   17650:	6033      	str	r3, [r6, #0]
   17652:	3337      	adds	r3, #55	; 0x37
   17654:	4313      	orrs	r3, r2
   17656:	81a3      	strh	r3, [r4, #12]
   17658:	4240      	negs	r0, r0
   1765a:	bd70      	pop	{r4, r5, r6, pc}
   1765c:	4b28      	ldr	r3, [pc, #160]	; (17700 <__swsetup_r+0xe4>)
   1765e:	429c      	cmp	r4, r3
   17660:	d101      	bne.n	17666 <__swsetup_r+0x4a>
   17662:	68ac      	ldr	r4, [r5, #8]
   17664:	e7eb      	b.n	1763e <__swsetup_r+0x22>
   17666:	4b27      	ldr	r3, [pc, #156]	; (17704 <__swsetup_r+0xe8>)
   17668:	429c      	cmp	r4, r3
   1766a:	d1e8      	bne.n	1763e <__swsetup_r+0x22>
   1766c:	68ec      	ldr	r4, [r5, #12]
   1766e:	e7e6      	b.n	1763e <__swsetup_r+0x22>
   17670:	075b      	lsls	r3, r3, #29
   17672:	d513      	bpl.n	1769c <__swsetup_r+0x80>
   17674:	6b61      	ldr	r1, [r4, #52]	; 0x34
   17676:	2900      	cmp	r1, #0
   17678:	d008      	beq.n	1768c <__swsetup_r+0x70>
   1767a:	0023      	movs	r3, r4
   1767c:	3344      	adds	r3, #68	; 0x44
   1767e:	4299      	cmp	r1, r3
   17680:	d002      	beq.n	17688 <__swsetup_r+0x6c>
   17682:	0030      	movs	r0, r6
   17684:	f000 fa58 	bl	17b38 <_free_r>
   17688:	2300      	movs	r3, #0
   1768a:	6363      	str	r3, [r4, #52]	; 0x34
   1768c:	2224      	movs	r2, #36	; 0x24
   1768e:	89a3      	ldrh	r3, [r4, #12]
   17690:	4393      	bics	r3, r2
   17692:	81a3      	strh	r3, [r4, #12]
   17694:	2300      	movs	r3, #0
   17696:	6063      	str	r3, [r4, #4]
   17698:	6923      	ldr	r3, [r4, #16]
   1769a:	6023      	str	r3, [r4, #0]
   1769c:	2308      	movs	r3, #8
   1769e:	89a2      	ldrh	r2, [r4, #12]
   176a0:	4313      	orrs	r3, r2
   176a2:	81a3      	strh	r3, [r4, #12]
   176a4:	6923      	ldr	r3, [r4, #16]
   176a6:	2b00      	cmp	r3, #0
   176a8:	d10b      	bne.n	176c2 <__swsetup_r+0xa6>
   176aa:	21a0      	movs	r1, #160	; 0xa0
   176ac:	2280      	movs	r2, #128	; 0x80
   176ae:	89a3      	ldrh	r3, [r4, #12]
   176b0:	0089      	lsls	r1, r1, #2
   176b2:	0092      	lsls	r2, r2, #2
   176b4:	400b      	ands	r3, r1
   176b6:	4293      	cmp	r3, r2
   176b8:	d003      	beq.n	176c2 <__swsetup_r+0xa6>
   176ba:	0021      	movs	r1, r4
   176bc:	0030      	movs	r0, r6
   176be:	f000 f9e1 	bl	17a84 <__smakebuf_r>
   176c2:	2301      	movs	r3, #1
   176c4:	89a2      	ldrh	r2, [r4, #12]
   176c6:	4013      	ands	r3, r2
   176c8:	d011      	beq.n	176ee <__swsetup_r+0xd2>
   176ca:	2300      	movs	r3, #0
   176cc:	60a3      	str	r3, [r4, #8]
   176ce:	6963      	ldr	r3, [r4, #20]
   176d0:	425b      	negs	r3, r3
   176d2:	61a3      	str	r3, [r4, #24]
   176d4:	2000      	movs	r0, #0
   176d6:	6923      	ldr	r3, [r4, #16]
   176d8:	4283      	cmp	r3, r0
   176da:	d1be      	bne.n	1765a <__swsetup_r+0x3e>
   176dc:	230c      	movs	r3, #12
   176de:	5ee2      	ldrsh	r2, [r4, r3]
   176e0:	0613      	lsls	r3, r2, #24
   176e2:	d5ba      	bpl.n	1765a <__swsetup_r+0x3e>
   176e4:	2340      	movs	r3, #64	; 0x40
   176e6:	4313      	orrs	r3, r2
   176e8:	81a3      	strh	r3, [r4, #12]
   176ea:	3801      	subs	r0, #1
   176ec:	e7b5      	b.n	1765a <__swsetup_r+0x3e>
   176ee:	0792      	lsls	r2, r2, #30
   176f0:	d400      	bmi.n	176f4 <__swsetup_r+0xd8>
   176f2:	6963      	ldr	r3, [r4, #20]
   176f4:	60a3      	str	r3, [r4, #8]
   176f6:	e7ed      	b.n	176d4 <__swsetup_r+0xb8>
   176f8:	20000020 	.word	0x20000020
   176fc:	0001928c 	.word	0x0001928c
   17700:	000192ac 	.word	0x000192ac
   17704:	0001926c 	.word	0x0001926c

00017708 <abort>:
   17708:	b510      	push	{r4, lr}
   1770a:	2006      	movs	r0, #6
   1770c:	f000 fb2e 	bl	17d6c <raise>
   17710:	2001      	movs	r0, #1
   17712:	f7ef fd7b 	bl	720c <_exit>
   17716:	Address 0x00017716 is out of bounds.


00017718 <__sflush_r>:
   17718:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1771a:	898a      	ldrh	r2, [r1, #12]
   1771c:	0005      	movs	r5, r0
   1771e:	000c      	movs	r4, r1
   17720:	0713      	lsls	r3, r2, #28
   17722:	d460      	bmi.n	177e6 <__sflush_r+0xce>
   17724:	684b      	ldr	r3, [r1, #4]
   17726:	2b00      	cmp	r3, #0
   17728:	dc04      	bgt.n	17734 <__sflush_r+0x1c>
   1772a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   1772c:	2b00      	cmp	r3, #0
   1772e:	dc01      	bgt.n	17734 <__sflush_r+0x1c>
   17730:	2000      	movs	r0, #0
   17732:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   17734:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   17736:	2f00      	cmp	r7, #0
   17738:	d0fa      	beq.n	17730 <__sflush_r+0x18>
   1773a:	2300      	movs	r3, #0
   1773c:	682e      	ldr	r6, [r5, #0]
   1773e:	602b      	str	r3, [r5, #0]
   17740:	2380      	movs	r3, #128	; 0x80
   17742:	015b      	lsls	r3, r3, #5
   17744:	401a      	ands	r2, r3
   17746:	d034      	beq.n	177b2 <__sflush_r+0x9a>
   17748:	6d60      	ldr	r0, [r4, #84]	; 0x54
   1774a:	89a3      	ldrh	r3, [r4, #12]
   1774c:	075b      	lsls	r3, r3, #29
   1774e:	d506      	bpl.n	1775e <__sflush_r+0x46>
   17750:	6863      	ldr	r3, [r4, #4]
   17752:	1ac0      	subs	r0, r0, r3
   17754:	6b63      	ldr	r3, [r4, #52]	; 0x34
   17756:	2b00      	cmp	r3, #0
   17758:	d001      	beq.n	1775e <__sflush_r+0x46>
   1775a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1775c:	1ac0      	subs	r0, r0, r3
   1775e:	0002      	movs	r2, r0
   17760:	6a21      	ldr	r1, [r4, #32]
   17762:	2300      	movs	r3, #0
   17764:	0028      	movs	r0, r5
   17766:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   17768:	47b8      	blx	r7
   1776a:	89a1      	ldrh	r1, [r4, #12]
   1776c:	1c43      	adds	r3, r0, #1
   1776e:	d106      	bne.n	1777e <__sflush_r+0x66>
   17770:	682b      	ldr	r3, [r5, #0]
   17772:	2b1d      	cmp	r3, #29
   17774:	d831      	bhi.n	177da <__sflush_r+0xc2>
   17776:	4a2c      	ldr	r2, [pc, #176]	; (17828 <__sflush_r+0x110>)
   17778:	40da      	lsrs	r2, r3
   1777a:	07d3      	lsls	r3, r2, #31
   1777c:	d52d      	bpl.n	177da <__sflush_r+0xc2>
   1777e:	2300      	movs	r3, #0
   17780:	6063      	str	r3, [r4, #4]
   17782:	6923      	ldr	r3, [r4, #16]
   17784:	6023      	str	r3, [r4, #0]
   17786:	04cb      	lsls	r3, r1, #19
   17788:	d505      	bpl.n	17796 <__sflush_r+0x7e>
   1778a:	1c43      	adds	r3, r0, #1
   1778c:	d102      	bne.n	17794 <__sflush_r+0x7c>
   1778e:	682b      	ldr	r3, [r5, #0]
   17790:	2b00      	cmp	r3, #0
   17792:	d100      	bne.n	17796 <__sflush_r+0x7e>
   17794:	6560      	str	r0, [r4, #84]	; 0x54
   17796:	6b61      	ldr	r1, [r4, #52]	; 0x34
   17798:	602e      	str	r6, [r5, #0]
   1779a:	2900      	cmp	r1, #0
   1779c:	d0c8      	beq.n	17730 <__sflush_r+0x18>
   1779e:	0023      	movs	r3, r4
   177a0:	3344      	adds	r3, #68	; 0x44
   177a2:	4299      	cmp	r1, r3
   177a4:	d002      	beq.n	177ac <__sflush_r+0x94>
   177a6:	0028      	movs	r0, r5
   177a8:	f000 f9c6 	bl	17b38 <_free_r>
   177ac:	2000      	movs	r0, #0
   177ae:	6360      	str	r0, [r4, #52]	; 0x34
   177b0:	e7bf      	b.n	17732 <__sflush_r+0x1a>
   177b2:	2301      	movs	r3, #1
   177b4:	6a21      	ldr	r1, [r4, #32]
   177b6:	0028      	movs	r0, r5
   177b8:	47b8      	blx	r7
   177ba:	1c43      	adds	r3, r0, #1
   177bc:	d1c5      	bne.n	1774a <__sflush_r+0x32>
   177be:	682b      	ldr	r3, [r5, #0]
   177c0:	2b00      	cmp	r3, #0
   177c2:	d0c2      	beq.n	1774a <__sflush_r+0x32>
   177c4:	2b1d      	cmp	r3, #29
   177c6:	d001      	beq.n	177cc <__sflush_r+0xb4>
   177c8:	2b16      	cmp	r3, #22
   177ca:	d101      	bne.n	177d0 <__sflush_r+0xb8>
   177cc:	602e      	str	r6, [r5, #0]
   177ce:	e7af      	b.n	17730 <__sflush_r+0x18>
   177d0:	2340      	movs	r3, #64	; 0x40
   177d2:	89a2      	ldrh	r2, [r4, #12]
   177d4:	4313      	orrs	r3, r2
   177d6:	81a3      	strh	r3, [r4, #12]
   177d8:	e7ab      	b.n	17732 <__sflush_r+0x1a>
   177da:	2340      	movs	r3, #64	; 0x40
   177dc:	430b      	orrs	r3, r1
   177de:	2001      	movs	r0, #1
   177e0:	81a3      	strh	r3, [r4, #12]
   177e2:	4240      	negs	r0, r0
   177e4:	e7a5      	b.n	17732 <__sflush_r+0x1a>
   177e6:	690f      	ldr	r7, [r1, #16]
   177e8:	2f00      	cmp	r7, #0
   177ea:	d0a1      	beq.n	17730 <__sflush_r+0x18>
   177ec:	680b      	ldr	r3, [r1, #0]
   177ee:	600f      	str	r7, [r1, #0]
   177f0:	1bdb      	subs	r3, r3, r7
   177f2:	9301      	str	r3, [sp, #4]
   177f4:	2300      	movs	r3, #0
   177f6:	0792      	lsls	r2, r2, #30
   177f8:	d100      	bne.n	177fc <__sflush_r+0xe4>
   177fa:	694b      	ldr	r3, [r1, #20]
   177fc:	60a3      	str	r3, [r4, #8]
   177fe:	9b01      	ldr	r3, [sp, #4]
   17800:	2b00      	cmp	r3, #0
   17802:	dc00      	bgt.n	17806 <__sflush_r+0xee>
   17804:	e794      	b.n	17730 <__sflush_r+0x18>
   17806:	9b01      	ldr	r3, [sp, #4]
   17808:	003a      	movs	r2, r7
   1780a:	6a21      	ldr	r1, [r4, #32]
   1780c:	0028      	movs	r0, r5
   1780e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   17810:	47b0      	blx	r6
   17812:	2800      	cmp	r0, #0
   17814:	dc03      	bgt.n	1781e <__sflush_r+0x106>
   17816:	2340      	movs	r3, #64	; 0x40
   17818:	89a2      	ldrh	r2, [r4, #12]
   1781a:	4313      	orrs	r3, r2
   1781c:	e7df      	b.n	177de <__sflush_r+0xc6>
   1781e:	9b01      	ldr	r3, [sp, #4]
   17820:	183f      	adds	r7, r7, r0
   17822:	1a1b      	subs	r3, r3, r0
   17824:	9301      	str	r3, [sp, #4]
   17826:	e7ea      	b.n	177fe <__sflush_r+0xe6>
   17828:	20400001 	.word	0x20400001

0001782c <_fflush_r>:
   1782c:	690b      	ldr	r3, [r1, #16]
   1782e:	b570      	push	{r4, r5, r6, lr}
   17830:	0005      	movs	r5, r0
   17832:	000c      	movs	r4, r1
   17834:	2b00      	cmp	r3, #0
   17836:	d101      	bne.n	1783c <_fflush_r+0x10>
   17838:	2000      	movs	r0, #0
   1783a:	bd70      	pop	{r4, r5, r6, pc}
   1783c:	2800      	cmp	r0, #0
   1783e:	d004      	beq.n	1784a <_fflush_r+0x1e>
   17840:	6983      	ldr	r3, [r0, #24]
   17842:	2b00      	cmp	r3, #0
   17844:	d101      	bne.n	1784a <_fflush_r+0x1e>
   17846:	f000 f85f 	bl	17908 <__sinit>
   1784a:	4b0b      	ldr	r3, [pc, #44]	; (17878 <_fflush_r+0x4c>)
   1784c:	429c      	cmp	r4, r3
   1784e:	d109      	bne.n	17864 <_fflush_r+0x38>
   17850:	686c      	ldr	r4, [r5, #4]
   17852:	220c      	movs	r2, #12
   17854:	5ea3      	ldrsh	r3, [r4, r2]
   17856:	2b00      	cmp	r3, #0
   17858:	d0ee      	beq.n	17838 <_fflush_r+0xc>
   1785a:	0021      	movs	r1, r4
   1785c:	0028      	movs	r0, r5
   1785e:	f7ff ff5b 	bl	17718 <__sflush_r>
   17862:	e7ea      	b.n	1783a <_fflush_r+0xe>
   17864:	4b05      	ldr	r3, [pc, #20]	; (1787c <_fflush_r+0x50>)
   17866:	429c      	cmp	r4, r3
   17868:	d101      	bne.n	1786e <_fflush_r+0x42>
   1786a:	68ac      	ldr	r4, [r5, #8]
   1786c:	e7f1      	b.n	17852 <_fflush_r+0x26>
   1786e:	4b04      	ldr	r3, [pc, #16]	; (17880 <_fflush_r+0x54>)
   17870:	429c      	cmp	r4, r3
   17872:	d1ee      	bne.n	17852 <_fflush_r+0x26>
   17874:	68ec      	ldr	r4, [r5, #12]
   17876:	e7ec      	b.n	17852 <_fflush_r+0x26>
   17878:	0001928c 	.word	0x0001928c
   1787c:	000192ac 	.word	0x000192ac
   17880:	0001926c 	.word	0x0001926c

00017884 <_cleanup_r>:
   17884:	b510      	push	{r4, lr}
   17886:	4902      	ldr	r1, [pc, #8]	; (17890 <_cleanup_r+0xc>)
   17888:	f000 f8b2 	bl	179f0 <_fwalk_reent>
   1788c:	bd10      	pop	{r4, pc}
   1788e:	46c0      	nop			; (mov r8, r8)
   17890:	0001782d 	.word	0x0001782d

00017894 <std.isra.0>:
   17894:	2300      	movs	r3, #0
   17896:	b510      	push	{r4, lr}
   17898:	0004      	movs	r4, r0
   1789a:	6003      	str	r3, [r0, #0]
   1789c:	6043      	str	r3, [r0, #4]
   1789e:	6083      	str	r3, [r0, #8]
   178a0:	8181      	strh	r1, [r0, #12]
   178a2:	6643      	str	r3, [r0, #100]	; 0x64
   178a4:	81c2      	strh	r2, [r0, #14]
   178a6:	6103      	str	r3, [r0, #16]
   178a8:	6143      	str	r3, [r0, #20]
   178aa:	6183      	str	r3, [r0, #24]
   178ac:	0019      	movs	r1, r3
   178ae:	2208      	movs	r2, #8
   178b0:	305c      	adds	r0, #92	; 0x5c
   178b2:	f7ff f9d1 	bl	16c58 <memset>
   178b6:	4b05      	ldr	r3, [pc, #20]	; (178cc <std.isra.0+0x38>)
   178b8:	6224      	str	r4, [r4, #32]
   178ba:	6263      	str	r3, [r4, #36]	; 0x24
   178bc:	4b04      	ldr	r3, [pc, #16]	; (178d0 <std.isra.0+0x3c>)
   178be:	62a3      	str	r3, [r4, #40]	; 0x28
   178c0:	4b04      	ldr	r3, [pc, #16]	; (178d4 <std.isra.0+0x40>)
   178c2:	62e3      	str	r3, [r4, #44]	; 0x2c
   178c4:	4b04      	ldr	r3, [pc, #16]	; (178d8 <std.isra.0+0x44>)
   178c6:	6323      	str	r3, [r4, #48]	; 0x30
   178c8:	bd10      	pop	{r4, pc}
   178ca:	46c0      	nop			; (mov r8, r8)
   178cc:	00017dad 	.word	0x00017dad
   178d0:	00017dd5 	.word	0x00017dd5
   178d4:	00017e0d 	.word	0x00017e0d
   178d8:	00017e39 	.word	0x00017e39

000178dc <__sfmoreglue>:
   178dc:	b570      	push	{r4, r5, r6, lr}
   178de:	2568      	movs	r5, #104	; 0x68
   178e0:	1e4a      	subs	r2, r1, #1
   178e2:	4355      	muls	r5, r2
   178e4:	000e      	movs	r6, r1
   178e6:	0029      	movs	r1, r5
   178e8:	3174      	adds	r1, #116	; 0x74
   178ea:	f000 f96f 	bl	17bcc <_malloc_r>
   178ee:	1e04      	subs	r4, r0, #0
   178f0:	d008      	beq.n	17904 <__sfmoreglue+0x28>
   178f2:	2100      	movs	r1, #0
   178f4:	002a      	movs	r2, r5
   178f6:	6001      	str	r1, [r0, #0]
   178f8:	6046      	str	r6, [r0, #4]
   178fa:	300c      	adds	r0, #12
   178fc:	60a0      	str	r0, [r4, #8]
   178fe:	3268      	adds	r2, #104	; 0x68
   17900:	f7ff f9aa 	bl	16c58 <memset>
   17904:	0020      	movs	r0, r4
   17906:	bd70      	pop	{r4, r5, r6, pc}

00017908 <__sinit>:
   17908:	6983      	ldr	r3, [r0, #24]
   1790a:	b513      	push	{r0, r1, r4, lr}
   1790c:	0004      	movs	r4, r0
   1790e:	2b00      	cmp	r3, #0
   17910:	d128      	bne.n	17964 <__sinit+0x5c>
   17912:	6483      	str	r3, [r0, #72]	; 0x48
   17914:	64c3      	str	r3, [r0, #76]	; 0x4c
   17916:	6503      	str	r3, [r0, #80]	; 0x50
   17918:	4b13      	ldr	r3, [pc, #76]	; (17968 <__sinit+0x60>)
   1791a:	4a14      	ldr	r2, [pc, #80]	; (1796c <__sinit+0x64>)
   1791c:	681b      	ldr	r3, [r3, #0]
   1791e:	6282      	str	r2, [r0, #40]	; 0x28
   17920:	9301      	str	r3, [sp, #4]
   17922:	4298      	cmp	r0, r3
   17924:	d101      	bne.n	1792a <__sinit+0x22>
   17926:	2301      	movs	r3, #1
   17928:	6183      	str	r3, [r0, #24]
   1792a:	0020      	movs	r0, r4
   1792c:	f000 f820 	bl	17970 <__sfp>
   17930:	6060      	str	r0, [r4, #4]
   17932:	0020      	movs	r0, r4
   17934:	f000 f81c 	bl	17970 <__sfp>
   17938:	60a0      	str	r0, [r4, #8]
   1793a:	0020      	movs	r0, r4
   1793c:	f000 f818 	bl	17970 <__sfp>
   17940:	2200      	movs	r2, #0
   17942:	60e0      	str	r0, [r4, #12]
   17944:	2104      	movs	r1, #4
   17946:	6860      	ldr	r0, [r4, #4]
   17948:	f7ff ffa4 	bl	17894 <std.isra.0>
   1794c:	2201      	movs	r2, #1
   1794e:	2109      	movs	r1, #9
   17950:	68a0      	ldr	r0, [r4, #8]
   17952:	f7ff ff9f 	bl	17894 <std.isra.0>
   17956:	2202      	movs	r2, #2
   17958:	2112      	movs	r1, #18
   1795a:	68e0      	ldr	r0, [r4, #12]
   1795c:	f7ff ff9a 	bl	17894 <std.isra.0>
   17960:	2301      	movs	r3, #1
   17962:	61a3      	str	r3, [r4, #24]
   17964:	bd13      	pop	{r0, r1, r4, pc}
   17966:	46c0      	nop			; (mov r8, r8)
   17968:	00019234 	.word	0x00019234
   1796c:	00017885 	.word	0x00017885

00017970 <__sfp>:
   17970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17972:	4b1e      	ldr	r3, [pc, #120]	; (179ec <__sfp+0x7c>)
   17974:	0007      	movs	r7, r0
   17976:	681e      	ldr	r6, [r3, #0]
   17978:	69b3      	ldr	r3, [r6, #24]
   1797a:	2b00      	cmp	r3, #0
   1797c:	d102      	bne.n	17984 <__sfp+0x14>
   1797e:	0030      	movs	r0, r6
   17980:	f7ff ffc2 	bl	17908 <__sinit>
   17984:	3648      	adds	r6, #72	; 0x48
   17986:	68b4      	ldr	r4, [r6, #8]
   17988:	6873      	ldr	r3, [r6, #4]
   1798a:	3b01      	subs	r3, #1
   1798c:	d504      	bpl.n	17998 <__sfp+0x28>
   1798e:	6833      	ldr	r3, [r6, #0]
   17990:	2b00      	cmp	r3, #0
   17992:	d007      	beq.n	179a4 <__sfp+0x34>
   17994:	6836      	ldr	r6, [r6, #0]
   17996:	e7f6      	b.n	17986 <__sfp+0x16>
   17998:	220c      	movs	r2, #12
   1799a:	5ea5      	ldrsh	r5, [r4, r2]
   1799c:	2d00      	cmp	r5, #0
   1799e:	d00d      	beq.n	179bc <__sfp+0x4c>
   179a0:	3468      	adds	r4, #104	; 0x68
   179a2:	e7f2      	b.n	1798a <__sfp+0x1a>
   179a4:	2104      	movs	r1, #4
   179a6:	0038      	movs	r0, r7
   179a8:	f7ff ff98 	bl	178dc <__sfmoreglue>
   179ac:	6030      	str	r0, [r6, #0]
   179ae:	2800      	cmp	r0, #0
   179b0:	d1f0      	bne.n	17994 <__sfp+0x24>
   179b2:	230c      	movs	r3, #12
   179b4:	0004      	movs	r4, r0
   179b6:	603b      	str	r3, [r7, #0]
   179b8:	0020      	movs	r0, r4
   179ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   179bc:	2301      	movs	r3, #1
   179be:	0020      	movs	r0, r4
   179c0:	425b      	negs	r3, r3
   179c2:	81e3      	strh	r3, [r4, #14]
   179c4:	3302      	adds	r3, #2
   179c6:	81a3      	strh	r3, [r4, #12]
   179c8:	6665      	str	r5, [r4, #100]	; 0x64
   179ca:	6025      	str	r5, [r4, #0]
   179cc:	60a5      	str	r5, [r4, #8]
   179ce:	6065      	str	r5, [r4, #4]
   179d0:	6125      	str	r5, [r4, #16]
   179d2:	6165      	str	r5, [r4, #20]
   179d4:	61a5      	str	r5, [r4, #24]
   179d6:	2208      	movs	r2, #8
   179d8:	0029      	movs	r1, r5
   179da:	305c      	adds	r0, #92	; 0x5c
   179dc:	f7ff f93c 	bl	16c58 <memset>
   179e0:	6365      	str	r5, [r4, #52]	; 0x34
   179e2:	63a5      	str	r5, [r4, #56]	; 0x38
   179e4:	64a5      	str	r5, [r4, #72]	; 0x48
   179e6:	64e5      	str	r5, [r4, #76]	; 0x4c
   179e8:	e7e6      	b.n	179b8 <__sfp+0x48>
   179ea:	46c0      	nop			; (mov r8, r8)
   179ec:	00019234 	.word	0x00019234

000179f0 <_fwalk_reent>:
   179f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   179f2:	0004      	movs	r4, r0
   179f4:	0007      	movs	r7, r0
   179f6:	2600      	movs	r6, #0
   179f8:	9101      	str	r1, [sp, #4]
   179fa:	3448      	adds	r4, #72	; 0x48
   179fc:	2c00      	cmp	r4, #0
   179fe:	d101      	bne.n	17a04 <_fwalk_reent+0x14>
   17a00:	0030      	movs	r0, r6
   17a02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   17a04:	6863      	ldr	r3, [r4, #4]
   17a06:	68a5      	ldr	r5, [r4, #8]
   17a08:	9300      	str	r3, [sp, #0]
   17a0a:	9b00      	ldr	r3, [sp, #0]
   17a0c:	3b01      	subs	r3, #1
   17a0e:	9300      	str	r3, [sp, #0]
   17a10:	d501      	bpl.n	17a16 <_fwalk_reent+0x26>
   17a12:	6824      	ldr	r4, [r4, #0]
   17a14:	e7f2      	b.n	179fc <_fwalk_reent+0xc>
   17a16:	89ab      	ldrh	r3, [r5, #12]
   17a18:	2b01      	cmp	r3, #1
   17a1a:	d908      	bls.n	17a2e <_fwalk_reent+0x3e>
   17a1c:	220e      	movs	r2, #14
   17a1e:	5eab      	ldrsh	r3, [r5, r2]
   17a20:	3301      	adds	r3, #1
   17a22:	d004      	beq.n	17a2e <_fwalk_reent+0x3e>
   17a24:	0029      	movs	r1, r5
   17a26:	0038      	movs	r0, r7
   17a28:	9b01      	ldr	r3, [sp, #4]
   17a2a:	4798      	blx	r3
   17a2c:	4306      	orrs	r6, r0
   17a2e:	3568      	adds	r5, #104	; 0x68
   17a30:	e7eb      	b.n	17a0a <_fwalk_reent+0x1a>
   17a32:	Address 0x00017a32 is out of bounds.


00017a34 <__swhatbuf_r>:
   17a34:	b570      	push	{r4, r5, r6, lr}
   17a36:	000e      	movs	r6, r1
   17a38:	001d      	movs	r5, r3
   17a3a:	230e      	movs	r3, #14
   17a3c:	5ec9      	ldrsh	r1, [r1, r3]
   17a3e:	b090      	sub	sp, #64	; 0x40
   17a40:	0014      	movs	r4, r2
   17a42:	2900      	cmp	r1, #0
   17a44:	da07      	bge.n	17a56 <__swhatbuf_r+0x22>
   17a46:	2300      	movs	r3, #0
   17a48:	602b      	str	r3, [r5, #0]
   17a4a:	89b3      	ldrh	r3, [r6, #12]
   17a4c:	061b      	lsls	r3, r3, #24
   17a4e:	d411      	bmi.n	17a74 <__swhatbuf_r+0x40>
   17a50:	2380      	movs	r3, #128	; 0x80
   17a52:	00db      	lsls	r3, r3, #3
   17a54:	e00f      	b.n	17a76 <__swhatbuf_r+0x42>
   17a56:	aa01      	add	r2, sp, #4
   17a58:	f000 fa1a 	bl	17e90 <_fstat_r>
   17a5c:	2800      	cmp	r0, #0
   17a5e:	dbf2      	blt.n	17a46 <__swhatbuf_r+0x12>
   17a60:	22f0      	movs	r2, #240	; 0xf0
   17a62:	9b02      	ldr	r3, [sp, #8]
   17a64:	0212      	lsls	r2, r2, #8
   17a66:	4013      	ands	r3, r2
   17a68:	4a05      	ldr	r2, [pc, #20]	; (17a80 <__swhatbuf_r+0x4c>)
   17a6a:	189b      	adds	r3, r3, r2
   17a6c:	425a      	negs	r2, r3
   17a6e:	4153      	adcs	r3, r2
   17a70:	602b      	str	r3, [r5, #0]
   17a72:	e7ed      	b.n	17a50 <__swhatbuf_r+0x1c>
   17a74:	2340      	movs	r3, #64	; 0x40
   17a76:	2000      	movs	r0, #0
   17a78:	6023      	str	r3, [r4, #0]
   17a7a:	b010      	add	sp, #64	; 0x40
   17a7c:	bd70      	pop	{r4, r5, r6, pc}
   17a7e:	46c0      	nop			; (mov r8, r8)
   17a80:	ffffe000 	.word	0xffffe000

00017a84 <__smakebuf_r>:
   17a84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17a86:	2602      	movs	r6, #2
   17a88:	898b      	ldrh	r3, [r1, #12]
   17a8a:	0005      	movs	r5, r0
   17a8c:	000c      	movs	r4, r1
   17a8e:	4233      	tst	r3, r6
   17a90:	d006      	beq.n	17aa0 <__smakebuf_r+0x1c>
   17a92:	0023      	movs	r3, r4
   17a94:	3347      	adds	r3, #71	; 0x47
   17a96:	6023      	str	r3, [r4, #0]
   17a98:	6123      	str	r3, [r4, #16]
   17a9a:	2301      	movs	r3, #1
   17a9c:	6163      	str	r3, [r4, #20]
   17a9e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   17aa0:	ab01      	add	r3, sp, #4
   17aa2:	466a      	mov	r2, sp
   17aa4:	f7ff ffc6 	bl	17a34 <__swhatbuf_r>
   17aa8:	9900      	ldr	r1, [sp, #0]
   17aaa:	0007      	movs	r7, r0
   17aac:	0028      	movs	r0, r5
   17aae:	f000 f88d 	bl	17bcc <_malloc_r>
   17ab2:	2800      	cmp	r0, #0
   17ab4:	d108      	bne.n	17ac8 <__smakebuf_r+0x44>
   17ab6:	220c      	movs	r2, #12
   17ab8:	5ea3      	ldrsh	r3, [r4, r2]
   17aba:	059a      	lsls	r2, r3, #22
   17abc:	d4ef      	bmi.n	17a9e <__smakebuf_r+0x1a>
   17abe:	2203      	movs	r2, #3
   17ac0:	4393      	bics	r3, r2
   17ac2:	431e      	orrs	r6, r3
   17ac4:	81a6      	strh	r6, [r4, #12]
   17ac6:	e7e4      	b.n	17a92 <__smakebuf_r+0xe>
   17ac8:	4b0f      	ldr	r3, [pc, #60]	; (17b08 <__smakebuf_r+0x84>)
   17aca:	62ab      	str	r3, [r5, #40]	; 0x28
   17acc:	2380      	movs	r3, #128	; 0x80
   17ace:	89a2      	ldrh	r2, [r4, #12]
   17ad0:	6020      	str	r0, [r4, #0]
   17ad2:	4313      	orrs	r3, r2
   17ad4:	81a3      	strh	r3, [r4, #12]
   17ad6:	9b00      	ldr	r3, [sp, #0]
   17ad8:	6120      	str	r0, [r4, #16]
   17ada:	6163      	str	r3, [r4, #20]
   17adc:	9b01      	ldr	r3, [sp, #4]
   17ade:	2b00      	cmp	r3, #0
   17ae0:	d00d      	beq.n	17afe <__smakebuf_r+0x7a>
   17ae2:	230e      	movs	r3, #14
   17ae4:	5ee1      	ldrsh	r1, [r4, r3]
   17ae6:	0028      	movs	r0, r5
   17ae8:	f000 f9e4 	bl	17eb4 <_isatty_r>
   17aec:	2800      	cmp	r0, #0
   17aee:	d006      	beq.n	17afe <__smakebuf_r+0x7a>
   17af0:	2203      	movs	r2, #3
   17af2:	89a3      	ldrh	r3, [r4, #12]
   17af4:	4393      	bics	r3, r2
   17af6:	001a      	movs	r2, r3
   17af8:	2301      	movs	r3, #1
   17afa:	4313      	orrs	r3, r2
   17afc:	81a3      	strh	r3, [r4, #12]
   17afe:	89a0      	ldrh	r0, [r4, #12]
   17b00:	4338      	orrs	r0, r7
   17b02:	81a0      	strh	r0, [r4, #12]
   17b04:	e7cb      	b.n	17a9e <__smakebuf_r+0x1a>
   17b06:	46c0      	nop			; (mov r8, r8)
   17b08:	00017885 	.word	0x00017885

00017b0c <malloc>:
   17b0c:	b510      	push	{r4, lr}
   17b0e:	4b03      	ldr	r3, [pc, #12]	; (17b1c <malloc+0x10>)
   17b10:	0001      	movs	r1, r0
   17b12:	6818      	ldr	r0, [r3, #0]
   17b14:	f000 f85a 	bl	17bcc <_malloc_r>
   17b18:	bd10      	pop	{r4, pc}
   17b1a:	46c0      	nop			; (mov r8, r8)
   17b1c:	20000020 	.word	0x20000020

00017b20 <memchr>:
   17b20:	b2c9      	uxtb	r1, r1
   17b22:	1882      	adds	r2, r0, r2
   17b24:	4290      	cmp	r0, r2
   17b26:	d101      	bne.n	17b2c <memchr+0xc>
   17b28:	2000      	movs	r0, #0
   17b2a:	4770      	bx	lr
   17b2c:	7803      	ldrb	r3, [r0, #0]
   17b2e:	428b      	cmp	r3, r1
   17b30:	d0fb      	beq.n	17b2a <memchr+0xa>
   17b32:	3001      	adds	r0, #1
   17b34:	e7f6      	b.n	17b24 <memchr+0x4>
   17b36:	Address 0x00017b36 is out of bounds.


00017b38 <_free_r>:
   17b38:	b570      	push	{r4, r5, r6, lr}
   17b3a:	0005      	movs	r5, r0
   17b3c:	2900      	cmp	r1, #0
   17b3e:	d010      	beq.n	17b62 <_free_r+0x2a>
   17b40:	1f0c      	subs	r4, r1, #4
   17b42:	6823      	ldr	r3, [r4, #0]
   17b44:	2b00      	cmp	r3, #0
   17b46:	da00      	bge.n	17b4a <_free_r+0x12>
   17b48:	18e4      	adds	r4, r4, r3
   17b4a:	0028      	movs	r0, r5
   17b4c:	f000 f9d8 	bl	17f00 <__malloc_lock>
   17b50:	4a1d      	ldr	r2, [pc, #116]	; (17bc8 <_free_r+0x90>)
   17b52:	6813      	ldr	r3, [r2, #0]
   17b54:	2b00      	cmp	r3, #0
   17b56:	d105      	bne.n	17b64 <_free_r+0x2c>
   17b58:	6063      	str	r3, [r4, #4]
   17b5a:	6014      	str	r4, [r2, #0]
   17b5c:	0028      	movs	r0, r5
   17b5e:	f000 f9d0 	bl	17f02 <__malloc_unlock>
   17b62:	bd70      	pop	{r4, r5, r6, pc}
   17b64:	42a3      	cmp	r3, r4
   17b66:	d909      	bls.n	17b7c <_free_r+0x44>
   17b68:	6821      	ldr	r1, [r4, #0]
   17b6a:	1860      	adds	r0, r4, r1
   17b6c:	4283      	cmp	r3, r0
   17b6e:	d1f3      	bne.n	17b58 <_free_r+0x20>
   17b70:	6818      	ldr	r0, [r3, #0]
   17b72:	685b      	ldr	r3, [r3, #4]
   17b74:	1841      	adds	r1, r0, r1
   17b76:	6021      	str	r1, [r4, #0]
   17b78:	e7ee      	b.n	17b58 <_free_r+0x20>
   17b7a:	0013      	movs	r3, r2
   17b7c:	685a      	ldr	r2, [r3, #4]
   17b7e:	2a00      	cmp	r2, #0
   17b80:	d001      	beq.n	17b86 <_free_r+0x4e>
   17b82:	42a2      	cmp	r2, r4
   17b84:	d9f9      	bls.n	17b7a <_free_r+0x42>
   17b86:	6819      	ldr	r1, [r3, #0]
   17b88:	1858      	adds	r0, r3, r1
   17b8a:	42a0      	cmp	r0, r4
   17b8c:	d10b      	bne.n	17ba6 <_free_r+0x6e>
   17b8e:	6820      	ldr	r0, [r4, #0]
   17b90:	1809      	adds	r1, r1, r0
   17b92:	1858      	adds	r0, r3, r1
   17b94:	6019      	str	r1, [r3, #0]
   17b96:	4282      	cmp	r2, r0
   17b98:	d1e0      	bne.n	17b5c <_free_r+0x24>
   17b9a:	6810      	ldr	r0, [r2, #0]
   17b9c:	6852      	ldr	r2, [r2, #4]
   17b9e:	1841      	adds	r1, r0, r1
   17ba0:	6019      	str	r1, [r3, #0]
   17ba2:	605a      	str	r2, [r3, #4]
   17ba4:	e7da      	b.n	17b5c <_free_r+0x24>
   17ba6:	42a0      	cmp	r0, r4
   17ba8:	d902      	bls.n	17bb0 <_free_r+0x78>
   17baa:	230c      	movs	r3, #12
   17bac:	602b      	str	r3, [r5, #0]
   17bae:	e7d5      	b.n	17b5c <_free_r+0x24>
   17bb0:	6821      	ldr	r1, [r4, #0]
   17bb2:	1860      	adds	r0, r4, r1
   17bb4:	4282      	cmp	r2, r0
   17bb6:	d103      	bne.n	17bc0 <_free_r+0x88>
   17bb8:	6810      	ldr	r0, [r2, #0]
   17bba:	6852      	ldr	r2, [r2, #4]
   17bbc:	1841      	adds	r1, r0, r1
   17bbe:	6021      	str	r1, [r4, #0]
   17bc0:	6062      	str	r2, [r4, #4]
   17bc2:	605c      	str	r4, [r3, #4]
   17bc4:	e7ca      	b.n	17b5c <_free_r+0x24>
   17bc6:	46c0      	nop			; (mov r8, r8)
   17bc8:	20001edc 	.word	0x20001edc

00017bcc <_malloc_r>:
   17bcc:	2303      	movs	r3, #3
   17bce:	b570      	push	{r4, r5, r6, lr}
   17bd0:	1ccd      	adds	r5, r1, #3
   17bd2:	439d      	bics	r5, r3
   17bd4:	3508      	adds	r5, #8
   17bd6:	0006      	movs	r6, r0
   17bd8:	2d0c      	cmp	r5, #12
   17bda:	d21e      	bcs.n	17c1a <_malloc_r+0x4e>
   17bdc:	250c      	movs	r5, #12
   17bde:	42a9      	cmp	r1, r5
   17be0:	d81d      	bhi.n	17c1e <_malloc_r+0x52>
   17be2:	0030      	movs	r0, r6
   17be4:	f000 f98c 	bl	17f00 <__malloc_lock>
   17be8:	4a25      	ldr	r2, [pc, #148]	; (17c80 <_malloc_r+0xb4>)
   17bea:	6814      	ldr	r4, [r2, #0]
   17bec:	0021      	movs	r1, r4
   17bee:	2900      	cmp	r1, #0
   17bf0:	d119      	bne.n	17c26 <_malloc_r+0x5a>
   17bf2:	4c24      	ldr	r4, [pc, #144]	; (17c84 <_malloc_r+0xb8>)
   17bf4:	6823      	ldr	r3, [r4, #0]
   17bf6:	2b00      	cmp	r3, #0
   17bf8:	d103      	bne.n	17c02 <_malloc_r+0x36>
   17bfa:	0030      	movs	r0, r6
   17bfc:	f000 f87a 	bl	17cf4 <_sbrk_r>
   17c00:	6020      	str	r0, [r4, #0]
   17c02:	0029      	movs	r1, r5
   17c04:	0030      	movs	r0, r6
   17c06:	f000 f875 	bl	17cf4 <_sbrk_r>
   17c0a:	1c43      	adds	r3, r0, #1
   17c0c:	d12c      	bne.n	17c68 <_malloc_r+0x9c>
   17c0e:	230c      	movs	r3, #12
   17c10:	0030      	movs	r0, r6
   17c12:	6033      	str	r3, [r6, #0]
   17c14:	f000 f975 	bl	17f02 <__malloc_unlock>
   17c18:	e003      	b.n	17c22 <_malloc_r+0x56>
   17c1a:	2d00      	cmp	r5, #0
   17c1c:	dadf      	bge.n	17bde <_malloc_r+0x12>
   17c1e:	230c      	movs	r3, #12
   17c20:	6033      	str	r3, [r6, #0]
   17c22:	2000      	movs	r0, #0
   17c24:	bd70      	pop	{r4, r5, r6, pc}
   17c26:	680b      	ldr	r3, [r1, #0]
   17c28:	1b5b      	subs	r3, r3, r5
   17c2a:	d41a      	bmi.n	17c62 <_malloc_r+0x96>
   17c2c:	2b0b      	cmp	r3, #11
   17c2e:	d903      	bls.n	17c38 <_malloc_r+0x6c>
   17c30:	600b      	str	r3, [r1, #0]
   17c32:	18cc      	adds	r4, r1, r3
   17c34:	6025      	str	r5, [r4, #0]
   17c36:	e003      	b.n	17c40 <_malloc_r+0x74>
   17c38:	428c      	cmp	r4, r1
   17c3a:	d10e      	bne.n	17c5a <_malloc_r+0x8e>
   17c3c:	6863      	ldr	r3, [r4, #4]
   17c3e:	6013      	str	r3, [r2, #0]
   17c40:	0030      	movs	r0, r6
   17c42:	f000 f95e 	bl	17f02 <__malloc_unlock>
   17c46:	0020      	movs	r0, r4
   17c48:	2207      	movs	r2, #7
   17c4a:	300b      	adds	r0, #11
   17c4c:	1d23      	adds	r3, r4, #4
   17c4e:	4390      	bics	r0, r2
   17c50:	1ac3      	subs	r3, r0, r3
   17c52:	d0e7      	beq.n	17c24 <_malloc_r+0x58>
   17c54:	425a      	negs	r2, r3
   17c56:	50e2      	str	r2, [r4, r3]
   17c58:	e7e4      	b.n	17c24 <_malloc_r+0x58>
   17c5a:	684b      	ldr	r3, [r1, #4]
   17c5c:	6063      	str	r3, [r4, #4]
   17c5e:	000c      	movs	r4, r1
   17c60:	e7ee      	b.n	17c40 <_malloc_r+0x74>
   17c62:	000c      	movs	r4, r1
   17c64:	6849      	ldr	r1, [r1, #4]
   17c66:	e7c2      	b.n	17bee <_malloc_r+0x22>
   17c68:	2303      	movs	r3, #3
   17c6a:	1cc4      	adds	r4, r0, #3
   17c6c:	439c      	bics	r4, r3
   17c6e:	42a0      	cmp	r0, r4
   17c70:	d0e0      	beq.n	17c34 <_malloc_r+0x68>
   17c72:	1a21      	subs	r1, r4, r0
   17c74:	0030      	movs	r0, r6
   17c76:	f000 f83d 	bl	17cf4 <_sbrk_r>
   17c7a:	1c43      	adds	r3, r0, #1
   17c7c:	d1da      	bne.n	17c34 <_malloc_r+0x68>
   17c7e:	e7c6      	b.n	17c0e <_malloc_r+0x42>
   17c80:	20001edc 	.word	0x20001edc
   17c84:	20001ee0 	.word	0x20001ee0

00017c88 <_putc_r>:
   17c88:	b570      	push	{r4, r5, r6, lr}
   17c8a:	0006      	movs	r6, r0
   17c8c:	000d      	movs	r5, r1
   17c8e:	0014      	movs	r4, r2
   17c90:	2800      	cmp	r0, #0
   17c92:	d004      	beq.n	17c9e <_putc_r+0x16>
   17c94:	6983      	ldr	r3, [r0, #24]
   17c96:	2b00      	cmp	r3, #0
   17c98:	d101      	bne.n	17c9e <_putc_r+0x16>
   17c9a:	f7ff fe35 	bl	17908 <__sinit>
   17c9e:	4b12      	ldr	r3, [pc, #72]	; (17ce8 <_putc_r+0x60>)
   17ca0:	429c      	cmp	r4, r3
   17ca2:	d111      	bne.n	17cc8 <_putc_r+0x40>
   17ca4:	6874      	ldr	r4, [r6, #4]
   17ca6:	68a3      	ldr	r3, [r4, #8]
   17ca8:	3b01      	subs	r3, #1
   17caa:	60a3      	str	r3, [r4, #8]
   17cac:	2b00      	cmp	r3, #0
   17cae:	da05      	bge.n	17cbc <_putc_r+0x34>
   17cb0:	69a2      	ldr	r2, [r4, #24]
   17cb2:	4293      	cmp	r3, r2
   17cb4:	db12      	blt.n	17cdc <_putc_r+0x54>
   17cb6:	b2eb      	uxtb	r3, r5
   17cb8:	2b0a      	cmp	r3, #10
   17cba:	d00f      	beq.n	17cdc <_putc_r+0x54>
   17cbc:	6823      	ldr	r3, [r4, #0]
   17cbe:	b2e8      	uxtb	r0, r5
   17cc0:	1c5a      	adds	r2, r3, #1
   17cc2:	6022      	str	r2, [r4, #0]
   17cc4:	701d      	strb	r5, [r3, #0]
   17cc6:	bd70      	pop	{r4, r5, r6, pc}
   17cc8:	4b08      	ldr	r3, [pc, #32]	; (17cec <_putc_r+0x64>)
   17cca:	429c      	cmp	r4, r3
   17ccc:	d101      	bne.n	17cd2 <_putc_r+0x4a>
   17cce:	68b4      	ldr	r4, [r6, #8]
   17cd0:	e7e9      	b.n	17ca6 <_putc_r+0x1e>
   17cd2:	4b07      	ldr	r3, [pc, #28]	; (17cf0 <_putc_r+0x68>)
   17cd4:	429c      	cmp	r4, r3
   17cd6:	d1e6      	bne.n	17ca6 <_putc_r+0x1e>
   17cd8:	68f4      	ldr	r4, [r6, #12]
   17cda:	e7e4      	b.n	17ca6 <_putc_r+0x1e>
   17cdc:	0022      	movs	r2, r4
   17cde:	0029      	movs	r1, r5
   17ce0:	0030      	movs	r0, r6
   17ce2:	f7ff fc45 	bl	17570 <__swbuf_r>
   17ce6:	e7ee      	b.n	17cc6 <_putc_r+0x3e>
   17ce8:	0001928c 	.word	0x0001928c
   17cec:	000192ac 	.word	0x000192ac
   17cf0:	0001926c 	.word	0x0001926c

00017cf4 <_sbrk_r>:
   17cf4:	2300      	movs	r3, #0
   17cf6:	b570      	push	{r4, r5, r6, lr}
   17cf8:	4c06      	ldr	r4, [pc, #24]	; (17d14 <_sbrk_r+0x20>)
   17cfa:	0005      	movs	r5, r0
   17cfc:	0008      	movs	r0, r1
   17cfe:	6023      	str	r3, [r4, #0]
   17d00:	f7ef fa66 	bl	71d0 <_sbrk>
   17d04:	1c43      	adds	r3, r0, #1
   17d06:	d103      	bne.n	17d10 <_sbrk_r+0x1c>
   17d08:	6823      	ldr	r3, [r4, #0]
   17d0a:	2b00      	cmp	r3, #0
   17d0c:	d000      	beq.n	17d10 <_sbrk_r+0x1c>
   17d0e:	602b      	str	r3, [r5, #0]
   17d10:	bd70      	pop	{r4, r5, r6, pc}
   17d12:	46c0      	nop			; (mov r8, r8)
   17d14:	200034e8 	.word	0x200034e8

00017d18 <_raise_r>:
   17d18:	b570      	push	{r4, r5, r6, lr}
   17d1a:	0004      	movs	r4, r0
   17d1c:	000d      	movs	r5, r1
   17d1e:	291f      	cmp	r1, #31
   17d20:	d904      	bls.n	17d2c <_raise_r+0x14>
   17d22:	2316      	movs	r3, #22
   17d24:	6003      	str	r3, [r0, #0]
   17d26:	2001      	movs	r0, #1
   17d28:	4240      	negs	r0, r0
   17d2a:	bd70      	pop	{r4, r5, r6, pc}
   17d2c:	6c43      	ldr	r3, [r0, #68]	; 0x44
   17d2e:	2b00      	cmp	r3, #0
   17d30:	d004      	beq.n	17d3c <_raise_r+0x24>
   17d32:	008a      	lsls	r2, r1, #2
   17d34:	189b      	adds	r3, r3, r2
   17d36:	681a      	ldr	r2, [r3, #0]
   17d38:	2a00      	cmp	r2, #0
   17d3a:	d108      	bne.n	17d4e <_raise_r+0x36>
   17d3c:	0020      	movs	r0, r4
   17d3e:	f000 f831 	bl	17da4 <_getpid_r>
   17d42:	002a      	movs	r2, r5
   17d44:	0001      	movs	r1, r0
   17d46:	0020      	movs	r0, r4
   17d48:	f000 f81a 	bl	17d80 <_kill_r>
   17d4c:	e7ed      	b.n	17d2a <_raise_r+0x12>
   17d4e:	2000      	movs	r0, #0
   17d50:	2a01      	cmp	r2, #1
   17d52:	d0ea      	beq.n	17d2a <_raise_r+0x12>
   17d54:	1c51      	adds	r1, r2, #1
   17d56:	d103      	bne.n	17d60 <_raise_r+0x48>
   17d58:	2316      	movs	r3, #22
   17d5a:	3001      	adds	r0, #1
   17d5c:	6023      	str	r3, [r4, #0]
   17d5e:	e7e4      	b.n	17d2a <_raise_r+0x12>
   17d60:	2400      	movs	r4, #0
   17d62:	0028      	movs	r0, r5
   17d64:	601c      	str	r4, [r3, #0]
   17d66:	4790      	blx	r2
   17d68:	0020      	movs	r0, r4
   17d6a:	e7de      	b.n	17d2a <_raise_r+0x12>

00017d6c <raise>:
   17d6c:	b510      	push	{r4, lr}
   17d6e:	4b03      	ldr	r3, [pc, #12]	; (17d7c <raise+0x10>)
   17d70:	0001      	movs	r1, r0
   17d72:	6818      	ldr	r0, [r3, #0]
   17d74:	f7ff ffd0 	bl	17d18 <_raise_r>
   17d78:	bd10      	pop	{r4, pc}
   17d7a:	46c0      	nop			; (mov r8, r8)
   17d7c:	20000020 	.word	0x20000020

00017d80 <_kill_r>:
   17d80:	2300      	movs	r3, #0
   17d82:	b570      	push	{r4, r5, r6, lr}
   17d84:	4c06      	ldr	r4, [pc, #24]	; (17da0 <_kill_r+0x20>)
   17d86:	0005      	movs	r5, r0
   17d88:	0008      	movs	r0, r1
   17d8a:	0011      	movs	r1, r2
   17d8c:	6023      	str	r3, [r4, #0]
   17d8e:	f7ef fa3f 	bl	7210 <_kill>
   17d92:	1c43      	adds	r3, r0, #1
   17d94:	d103      	bne.n	17d9e <_kill_r+0x1e>
   17d96:	6823      	ldr	r3, [r4, #0]
   17d98:	2b00      	cmp	r3, #0
   17d9a:	d000      	beq.n	17d9e <_kill_r+0x1e>
   17d9c:	602b      	str	r3, [r5, #0]
   17d9e:	bd70      	pop	{r4, r5, r6, pc}
   17da0:	200034e8 	.word	0x200034e8

00017da4 <_getpid_r>:
   17da4:	b510      	push	{r4, lr}
   17da6:	f7ef fa34 	bl	7212 <_getpid>
   17daa:	bd10      	pop	{r4, pc}

00017dac <__sread>:
   17dac:	b570      	push	{r4, r5, r6, lr}
   17dae:	000c      	movs	r4, r1
   17db0:	250e      	movs	r5, #14
   17db2:	5f49      	ldrsh	r1, [r1, r5]
   17db4:	f000 f8a6 	bl	17f04 <_read_r>
   17db8:	2800      	cmp	r0, #0
   17dba:	db03      	blt.n	17dc4 <__sread+0x18>
   17dbc:	6d63      	ldr	r3, [r4, #84]	; 0x54
   17dbe:	181b      	adds	r3, r3, r0
   17dc0:	6563      	str	r3, [r4, #84]	; 0x54
   17dc2:	bd70      	pop	{r4, r5, r6, pc}
   17dc4:	89a3      	ldrh	r3, [r4, #12]
   17dc6:	4a02      	ldr	r2, [pc, #8]	; (17dd0 <__sread+0x24>)
   17dc8:	4013      	ands	r3, r2
   17dca:	81a3      	strh	r3, [r4, #12]
   17dcc:	e7f9      	b.n	17dc2 <__sread+0x16>
   17dce:	46c0      	nop			; (mov r8, r8)
   17dd0:	ffffefff 	.word	0xffffefff

00017dd4 <__swrite>:
   17dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17dd6:	001f      	movs	r7, r3
   17dd8:	898b      	ldrh	r3, [r1, #12]
   17dda:	0005      	movs	r5, r0
   17ddc:	000c      	movs	r4, r1
   17dde:	0016      	movs	r6, r2
   17de0:	05db      	lsls	r3, r3, #23
   17de2:	d505      	bpl.n	17df0 <__swrite+0x1c>
   17de4:	230e      	movs	r3, #14
   17de6:	5ec9      	ldrsh	r1, [r1, r3]
   17de8:	2200      	movs	r2, #0
   17dea:	2302      	movs	r3, #2
   17dec:	f000 f874 	bl	17ed8 <_lseek_r>
   17df0:	89a3      	ldrh	r3, [r4, #12]
   17df2:	4a05      	ldr	r2, [pc, #20]	; (17e08 <__swrite+0x34>)
   17df4:	0028      	movs	r0, r5
   17df6:	4013      	ands	r3, r2
   17df8:	81a3      	strh	r3, [r4, #12]
   17dfa:	0032      	movs	r2, r6
   17dfc:	230e      	movs	r3, #14
   17dfe:	5ee1      	ldrsh	r1, [r4, r3]
   17e00:	003b      	movs	r3, r7
   17e02:	f000 f81f 	bl	17e44 <_write_r>
   17e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17e08:	ffffefff 	.word	0xffffefff

00017e0c <__sseek>:
   17e0c:	b570      	push	{r4, r5, r6, lr}
   17e0e:	000c      	movs	r4, r1
   17e10:	250e      	movs	r5, #14
   17e12:	5f49      	ldrsh	r1, [r1, r5]
   17e14:	f000 f860 	bl	17ed8 <_lseek_r>
   17e18:	89a3      	ldrh	r3, [r4, #12]
   17e1a:	1c42      	adds	r2, r0, #1
   17e1c:	d103      	bne.n	17e26 <__sseek+0x1a>
   17e1e:	4a05      	ldr	r2, [pc, #20]	; (17e34 <__sseek+0x28>)
   17e20:	4013      	ands	r3, r2
   17e22:	81a3      	strh	r3, [r4, #12]
   17e24:	bd70      	pop	{r4, r5, r6, pc}
   17e26:	2280      	movs	r2, #128	; 0x80
   17e28:	0152      	lsls	r2, r2, #5
   17e2a:	4313      	orrs	r3, r2
   17e2c:	81a3      	strh	r3, [r4, #12]
   17e2e:	6560      	str	r0, [r4, #84]	; 0x54
   17e30:	e7f8      	b.n	17e24 <__sseek+0x18>
   17e32:	46c0      	nop			; (mov r8, r8)
   17e34:	ffffefff 	.word	0xffffefff

00017e38 <__sclose>:
   17e38:	b510      	push	{r4, lr}
   17e3a:	230e      	movs	r3, #14
   17e3c:	5ec9      	ldrsh	r1, [r1, r3]
   17e3e:	f000 f815 	bl	17e6c <_close_r>
   17e42:	bd10      	pop	{r4, pc}

00017e44 <_write_r>:
   17e44:	b570      	push	{r4, r5, r6, lr}
   17e46:	0005      	movs	r5, r0
   17e48:	0008      	movs	r0, r1
   17e4a:	0011      	movs	r1, r2
   17e4c:	2200      	movs	r2, #0
   17e4e:	4c06      	ldr	r4, [pc, #24]	; (17e68 <_write_r+0x24>)
   17e50:	6022      	str	r2, [r4, #0]
   17e52:	001a      	movs	r2, r3
   17e54:	f7ef f994 	bl	7180 <_write>
   17e58:	1c43      	adds	r3, r0, #1
   17e5a:	d103      	bne.n	17e64 <_write_r+0x20>
   17e5c:	6823      	ldr	r3, [r4, #0]
   17e5e:	2b00      	cmp	r3, #0
   17e60:	d000      	beq.n	17e64 <_write_r+0x20>
   17e62:	602b      	str	r3, [r5, #0]
   17e64:	bd70      	pop	{r4, r5, r6, pc}
   17e66:	46c0      	nop			; (mov r8, r8)
   17e68:	200034e8 	.word	0x200034e8

00017e6c <_close_r>:
   17e6c:	2300      	movs	r3, #0
   17e6e:	b570      	push	{r4, r5, r6, lr}
   17e70:	4c06      	ldr	r4, [pc, #24]	; (17e8c <_close_r+0x20>)
   17e72:	0005      	movs	r5, r0
   17e74:	0008      	movs	r0, r1
   17e76:	6023      	str	r3, [r4, #0]
   17e78:	f7ef f9bc 	bl	71f4 <_close>
   17e7c:	1c43      	adds	r3, r0, #1
   17e7e:	d103      	bne.n	17e88 <_close_r+0x1c>
   17e80:	6823      	ldr	r3, [r4, #0]
   17e82:	2b00      	cmp	r3, #0
   17e84:	d000      	beq.n	17e88 <_close_r+0x1c>
   17e86:	602b      	str	r3, [r5, #0]
   17e88:	bd70      	pop	{r4, r5, r6, pc}
   17e8a:	46c0      	nop			; (mov r8, r8)
   17e8c:	200034e8 	.word	0x200034e8

00017e90 <_fstat_r>:
   17e90:	2300      	movs	r3, #0
   17e92:	b570      	push	{r4, r5, r6, lr}
   17e94:	4c06      	ldr	r4, [pc, #24]	; (17eb0 <_fstat_r+0x20>)
   17e96:	0005      	movs	r5, r0
   17e98:	0008      	movs	r0, r1
   17e9a:	0011      	movs	r1, r2
   17e9c:	6023      	str	r3, [r4, #0]
   17e9e:	f7ef f9ac 	bl	71fa <_fstat>
   17ea2:	1c43      	adds	r3, r0, #1
   17ea4:	d103      	bne.n	17eae <_fstat_r+0x1e>
   17ea6:	6823      	ldr	r3, [r4, #0]
   17ea8:	2b00      	cmp	r3, #0
   17eaa:	d000      	beq.n	17eae <_fstat_r+0x1e>
   17eac:	602b      	str	r3, [r5, #0]
   17eae:	bd70      	pop	{r4, r5, r6, pc}
   17eb0:	200034e8 	.word	0x200034e8

00017eb4 <_isatty_r>:
   17eb4:	2300      	movs	r3, #0
   17eb6:	b570      	push	{r4, r5, r6, lr}
   17eb8:	4c06      	ldr	r4, [pc, #24]	; (17ed4 <_isatty_r+0x20>)
   17eba:	0005      	movs	r5, r0
   17ebc:	0008      	movs	r0, r1
   17ebe:	6023      	str	r3, [r4, #0]
   17ec0:	f7ef f9a0 	bl	7204 <_isatty>
   17ec4:	1c43      	adds	r3, r0, #1
   17ec6:	d103      	bne.n	17ed0 <_isatty_r+0x1c>
   17ec8:	6823      	ldr	r3, [r4, #0]
   17eca:	2b00      	cmp	r3, #0
   17ecc:	d000      	beq.n	17ed0 <_isatty_r+0x1c>
   17ece:	602b      	str	r3, [r5, #0]
   17ed0:	bd70      	pop	{r4, r5, r6, pc}
   17ed2:	46c0      	nop			; (mov r8, r8)
   17ed4:	200034e8 	.word	0x200034e8

00017ed8 <_lseek_r>:
   17ed8:	b570      	push	{r4, r5, r6, lr}
   17eda:	0005      	movs	r5, r0
   17edc:	0008      	movs	r0, r1
   17ede:	0011      	movs	r1, r2
   17ee0:	2200      	movs	r2, #0
   17ee2:	4c06      	ldr	r4, [pc, #24]	; (17efc <_lseek_r+0x24>)
   17ee4:	6022      	str	r2, [r4, #0]
   17ee6:	001a      	movs	r2, r3
   17ee8:	f7ef f98e 	bl	7208 <_lseek>
   17eec:	1c43      	adds	r3, r0, #1
   17eee:	d103      	bne.n	17ef8 <_lseek_r+0x20>
   17ef0:	6823      	ldr	r3, [r4, #0]
   17ef2:	2b00      	cmp	r3, #0
   17ef4:	d000      	beq.n	17ef8 <_lseek_r+0x20>
   17ef6:	602b      	str	r3, [r5, #0]
   17ef8:	bd70      	pop	{r4, r5, r6, pc}
   17efa:	46c0      	nop			; (mov r8, r8)
   17efc:	200034e8 	.word	0x200034e8

00017f00 <__malloc_lock>:
   17f00:	4770      	bx	lr

00017f02 <__malloc_unlock>:
   17f02:	4770      	bx	lr

00017f04 <_read_r>:
   17f04:	b570      	push	{r4, r5, r6, lr}
   17f06:	0005      	movs	r5, r0
   17f08:	0008      	movs	r0, r1
   17f0a:	0011      	movs	r1, r2
   17f0c:	2200      	movs	r2, #0
   17f0e:	4c06      	ldr	r4, [pc, #24]	; (17f28 <_read_r+0x24>)
   17f10:	6022      	str	r2, [r4, #0]
   17f12:	001a      	movs	r2, r3
   17f14:	f7ef f912 	bl	713c <_read>
   17f18:	1c43      	adds	r3, r0, #1
   17f1a:	d103      	bne.n	17f24 <_read_r+0x20>
   17f1c:	6823      	ldr	r3, [r4, #0]
   17f1e:	2b00      	cmp	r3, #0
   17f20:	d000      	beq.n	17f24 <_read_r+0x20>
   17f22:	602b      	str	r3, [r5, #0]
   17f24:	bd70      	pop	{r4, r5, r6, pc}
   17f26:	46c0      	nop			; (mov r8, r8)
   17f28:	200034e8 	.word	0x200034e8
   17f2c:	00004b1e 	.word	0x00004b1e
   17f30:	00004b1e 	.word	0x00004b1e
   17f34:	00004afa 	.word	0x00004afa
   17f38:	00004b1e 	.word	0x00004b1e
   17f3c:	00004afa 	.word	0x00004afa
   17f40:	00004ae0 	.word	0x00004ae0
   17f44:	00004ae0 	.word	0x00004ae0
   17f48:	00004b1e 	.word	0x00004b1e
   17f4c:	00004b1e 	.word	0x00004b1e
   17f50:	00004b1e 	.word	0x00004b1e
   17f54:	00004b1e 	.word	0x00004b1e
   17f58:	00004b1e 	.word	0x00004b1e
   17f5c:	00004b1e 	.word	0x00004b1e
   17f60:	00004b1e 	.word	0x00004b1e
   17f64:	00004b1e 	.word	0x00004b1e
   17f68:	00004b1e 	.word	0x00004b1e
   17f6c:	00004b1e 	.word	0x00004b1e
   17f70:	00004b1e 	.word	0x00004b1e
   17f74:	00004b1e 	.word	0x00004b1e
   17f78:	00004b1e 	.word	0x00004b1e
   17f7c:	00004b1e 	.word	0x00004b1e
   17f80:	00004b1e 	.word	0x00004b1e
   17f84:	00004b1e 	.word	0x00004b1e
   17f88:	00004b1e 	.word	0x00004b1e
   17f8c:	00004b1e 	.word	0x00004b1e
   17f90:	00004b1e 	.word	0x00004b1e
   17f94:	00004afa 	.word	0x00004afa
   17f98:	00004b1e 	.word	0x00004b1e
   17f9c:	00004afa 	.word	0x00004afa
   17fa0:	00004b1e 	.word	0x00004b1e
   17fa4:	00004b1e 	.word	0x00004b1e
   17fa8:	00004b1e 	.word	0x00004b1e
   17fac:	00004b1e 	.word	0x00004b1e
   17fb0:	00004b1e 	.word	0x00004b1e
   17fb4:	00004b1e 	.word	0x00004b1e
   17fb8:	00004b1e 	.word	0x00004b1e
   17fbc:	00004b1e 	.word	0x00004b1e
   17fc0:	00004b1e 	.word	0x00004b1e
   17fc4:	00004b1e 	.word	0x00004b1e
   17fc8:	00004b1e 	.word	0x00004b1e
   17fcc:	00004b1e 	.word	0x00004b1e
   17fd0:	00004b1e 	.word	0x00004b1e
   17fd4:	00004b1e 	.word	0x00004b1e
   17fd8:	00004b1e 	.word	0x00004b1e
   17fdc:	00004b1e 	.word	0x00004b1e
   17fe0:	00004b1e 	.word	0x00004b1e
   17fe4:	00004b1e 	.word	0x00004b1e
   17fe8:	00004b1e 	.word	0x00004b1e
   17fec:	00004b1e 	.word	0x00004b1e
   17ff0:	00004b1e 	.word	0x00004b1e
   17ff4:	00004b1e 	.word	0x00004b1e
   17ff8:	00004b1e 	.word	0x00004b1e
   17ffc:	00004b1e 	.word	0x00004b1e
   18000:	00004b1e 	.word	0x00004b1e
   18004:	00004b1e 	.word	0x00004b1e
   18008:	00004b1e 	.word	0x00004b1e
   1800c:	00004b1e 	.word	0x00004b1e
   18010:	00004b1e 	.word	0x00004b1e
   18014:	00004b1e 	.word	0x00004b1e
   18018:	00004b1e 	.word	0x00004b1e
   1801c:	00004b1e 	.word	0x00004b1e
   18020:	00004b1e 	.word	0x00004b1e
   18024:	00004b1e 	.word	0x00004b1e
   18028:	00004b1e 	.word	0x00004b1e
   1802c:	00004afa 	.word	0x00004afa
   18030:	00004afa 	.word	0x00004afa
   18034:	00004b02 	.word	0x00004b02
   18038:	00004b02 	.word	0x00004b02
   1803c:	00004b02 	.word	0x00004b02
   18040:	00004b02 	.word	0x00004b02
   18044:	42000000 	.word	0x42000000
   18048:	42000400 	.word	0x42000400
   1804c:	42000800 	.word	0x42000800
   18050:	42000c00 	.word	0x42000c00
   18054:	42001000 	.word	0x42001000
   18058:	43000400 	.word	0x43000400
   1805c:	00006442 	.word	0x00006442
   18060:	0000643e 	.word	0x0000643e
   18064:	0000643e 	.word	0x0000643e
   18068:	000064a4 	.word	0x000064a4
   1806c:	000064a4 	.word	0x000064a4
   18070:	00006458 	.word	0x00006458
   18074:	00006448 	.word	0x00006448
   18078:	0000645e 	.word	0x0000645e
   1807c:	00006492 	.word	0x00006492
   18080:	000065c0 	.word	0x000065c0
   18084:	000065a0 	.word	0x000065a0
   18088:	000065a0 	.word	0x000065a0
   1808c:	0000663a 	.word	0x0000663a
   18090:	000065b2 	.word	0x000065b2
   18094:	000065ce 	.word	0x000065ce
   18098:	000065a4 	.word	0x000065a4
   1809c:	000065dc 	.word	0x000065dc
   180a0:	0000661e 	.word	0x0000661e
   180a4:	00006678 	.word	0x00006678
   180a8:	000066ba 	.word	0x000066ba
   180ac:	000066ba 	.word	0x000066ba
   180b0:	000066ba 	.word	0x000066ba
   180b4:	0000666a 	.word	0x0000666a
   180b8:	00006686 	.word	0x00006686
   180bc:	0000665c 	.word	0x0000665c
   180c0:	00006694 	.word	0x00006694
   180c4:	000066aa 	.word	0x000066aa
   180c8:	00006db6 	.word	0x00006db6
   180cc:	00006eac 	.word	0x00006eac
   180d0:	00006eb6 	.word	0x00006eb6
   180d4:	00006ec0 	.word	0x00006ec0
   180d8:	00006eca 	.word	0x00006eca
   180dc:	00006efc 	.word	0x00006efc
   180e0:	00006f06 	.word	0x00006f06
   180e4:	00006f10 	.word	0x00006f10
   180e8:	00006f1a 	.word	0x00006f1a
   180ec:	00006f24 	.word	0x00006f24
   180f0:	42002000 	.word	0x42002000
   180f4:	42002400 	.word	0x42002400
   180f8:	42002800 	.word	0x42002800
   180fc:	42002c00 	.word	0x42002c00
   18100:	43000800 	.word	0x43000800
   18104:	00000002 	.word	0x00000002
   18108:	00000100 	.word	0x00000100
   1810c:	00000002 	.word	0x00000002
   18110:	00000200 	.word	0x00000200
   18114:	00000002 	.word	0x00000002
   18118:	00000400 	.word	0x00000400
   1811c:	00000002 	.word	0x00000002
   18120:	00000800 	.word	0x00000800
   18124:	00000003 	.word	0x00000003
   18128:	00000004 	.word	0x00000004
   1812c:	72420a0d 	.word	0x72420a0d
   18130:	6364616f 	.word	0x6364616f
   18134:	20747361 	.word	0x20747361
   18138:	6c696146 	.word	0x6c696146
   1813c:	000d6465 	.word	0x000d6465
   18140:	6f430a0d 	.word	0x6f430a0d
   18144:	63656e6e 	.word	0x63656e6e
   18148:	676e6974 	.word	0x676e6974
   1814c:	65655020 	.word	0x65655020
   18150:	6e6f2072 	.word	0x6e6f2072
   18154:	61684320 	.word	0x61684320
   18158:	6c656e6e 	.word	0x6c656e6e
   1815c:	00000020 	.word	0x00000020
   18160:	00006425 	.word	0x00006425
   18164:	6f430a0d 	.word	0x6f430a0d
   18168:	63656e6e 	.word	0x63656e6e
   1816c:	20646574 	.word	0x20646574
   18170:	72656550 	.word	0x72656550
   18174:	206e6f20 	.word	0x206e6f20
   18178:	6e616843 	.word	0x6e616843
   1817c:	206c656e 	.word	0x206c656e
   18180:	ffffff00 	.word	0xffffff00
   18184:	65530a0d 	.word	0x65530a0d
   18188:	7463656c 	.word	0x7463656c
   1818c:	206e6f69 	.word	0x206e6f69
   18190:	6320666f 	.word	0x6320666f
   18194:	6e6e6168 	.word	0x6e6e6168
   18198:	00206c65 	.word	0x00206c65
   1819c:	20736920 	.word	0x20736920
   181a0:	20746f6e 	.word	0x20746f6e
   181a4:	70707573 	.word	0x70707573
   181a8:	6574726f 	.word	0x6574726f
   181ac:	6e692064 	.word	0x6e692064
   181b0:	72756320 	.word	0x72756320
   181b4:	746e6572 	.word	0x746e6572
   181b8:	6e6f6320 	.word	0x6e6f6320
   181bc:	75676966 	.word	0x75676966
   181c0:	69746172 	.word	0x69746172
   181c4:	0d2e6e6f 	.word	0x0d2e6e6f
   181c8:	ffffff00 	.word	0xffffff00
   181cc:	2d2d0d0a 	.word	0x2d2d0d0a
   181d0:	2d2d2d2d 	.word	0x2d2d2d2d
   181d4:	2d2d2d2d 	.word	0x2d2d2d2d
   181d8:	2d2d2d2d 	.word	0x2d2d2d2d
   181dc:	2d2d2d2d 	.word	0x2d2d2d2d
   181e0:	2d2d2d2d 	.word	0x2d2d2d2d
   181e4:	2d2d2d2d 	.word	0x2d2d2d2d
   181e8:	2d2d2d2d 	.word	0x2d2d2d2d
   181ec:	2d2d2d2d 	.word	0x2d2d2d2d
   181f0:	2d2d2d2d 	.word	0x2d2d2d2d
   181f4:	2d2d2d2d 	.word	0x2d2d2d2d
   181f8:	2d2d2d2d 	.word	0x2d2d2d2d
   181fc:	2d2d2d2d 	.word	0x2d2d2d2d
   18200:	0a2d2d2d 	.word	0x0a2d2d2d
   18204:	2d2d2d0d 	.word	0x2d2d2d0d
   18208:	2d2d2d2d 	.word	0x2d2d2d2d
   1820c:	2d2d2d2d 	.word	0x2d2d2d2d
   18210:	2d2d2d2d 	.word	0x2d2d2d2d
   18214:	2d2d2d2d 	.word	0x2d2d2d2d
   18218:	2d2d2d2d 	.word	0x2d2d2d2d
   1821c:	2d2d2d2d 	.word	0x2d2d2d2d
   18220:	2d2d2d2d 	.word	0x2d2d2d2d
   18224:	2d2d2d2d 	.word	0x2d2d2d2d
   18228:	2d2d2d2d 	.word	0x2d2d2d2d
   1822c:	2d2d2d2d 	.word	0x2d2d2d2d
   18230:	2d2d2d2d 	.word	0x2d2d2d2d
   18234:	2d2d2d2d 	.word	0x2d2d2d2d
   18238:	00002d2d 	.word	0x00002d2d
   1823c:	74530a0d 	.word	0x74530a0d
   18240:	69747261 	.word	0x69747261
   18244:	4e20676e 	.word	0x4e20676e
   18248:	2065646f 	.word	0x2065646f
   1824c:	666f2031 	.word	0x666f2031
   18250:	6d695320 	.word	0x6d695320
   18254:	20656c70 	.word	0x20656c70
   18258:	6f6d6544 	.word	0x6f6d6544
   1825c:	726f6620 	.word	0x726f6620
   18260:	526f4c20 	.word	0x526f4c20
   18264:	32502061 	.word	0x32502061
   18268:	74532050 	.word	0x74532050
   1826c:	206b6361 	.word	0x206b6361
   18270:	002e2e2e 	.word	0x002e2e2e
   18274:	75460a0d 	.word	0x75460a0d
   18278:	46206c6c 	.word	0x46206c6c
   1827c:	74636e75 	.word	0x74636e75
   18280:	206e6f69 	.word	0x206e6f69
   18284:	69766544 	.word	0x69766544
   18288:	28206563 	.word	0x28206563
   1828c:	29444646 	.word	0x29444646
   18290:	65706f20 	.word	0x65706f20
   18294:	69746172 	.word	0x69746172
   18298:	00736e6f 	.word	0x00736e6f
   1829c:	20200a0d 	.word	0x20200a0d
   182a0:	52202020 	.word	0x52202020
   182a4:	72542046 	.word	0x72542046
   182a8:	63736e61 	.word	0x63736e61
   182ac:	65766965 	.word	0x65766965
   182b0:	53203a72 	.word	0x53203a72
   182b4:	32315f58 	.word	0x32315f58
   182b8:	00003637 	.word	0x00003637
   182bc:	20200a0d 	.word	0x20200a0d
   182c0:	44202020 	.word	0x44202020
   182c4:	206f6d65 	.word	0x206f6d65
   182c8:	74736e49 	.word	0x74736e49
   182cc:	74637572 	.word	0x74637572
   182d0:	3a6e6f69 	.word	0x3a6e6f69
   182d4:	00000000 	.word	0x00000000
   182d8:	20200a0d 	.word	0x20200a0d
   182dc:	20202020 	.word	0x20202020
   182e0:	20202020 	.word	0x20202020
   182e4:	20202020 	.word	0x20202020
   182e8:	20202020 	.word	0x20202020
   182ec:	50202020 	.word	0x50202020
   182f0:	7265776f 	.word	0x7265776f
   182f4:	206e6f20 	.word	0x206e6f20
   182f8:	20656874 	.word	0x20656874
   182fc:	72616f62 	.word	0x72616f62
   18300:	6e752064 	.word	0x6e752064
   18304:	206c6974 	.word	0x206c6974
   18308:	2044454c 	.word	0x2044454c
   1830c:	696c2031 	.word	0x696c2031
   18310:	73746867 	.word	0x73746867
   18314:	00707520 	.word	0x00707520
   18318:	20200a0d 	.word	0x20200a0d
   1831c:	20202020 	.word	0x20202020
   18320:	20202020 	.word	0x20202020
   18324:	20202020 	.word	0x20202020
   18328:	20202020 	.word	0x20202020
   1832c:	74202020 	.word	0x74202020
   18330:	6e69206f 	.word	0x6e69206f
   18334:	61636964 	.word	0x61636964
   18338:	63206574 	.word	0x63206574
   1833c:	656e6e6f 	.word	0x656e6e6f
   18340:	6e697463 	.word	0x6e697463
   18344:	69772067 	.word	0x69772067
   18348:	70206874 	.word	0x70206874
   1834c:	2e726565 	.word	0x2e726565
   18350:	00000000 	.word	0x00000000
   18354:	20200a0d 	.word	0x20200a0d
   18358:	20202020 	.word	0x20202020
   1835c:	20202020 	.word	0x20202020
   18360:	20202020 	.word	0x20202020
   18364:	20202020 	.word	0x20202020
   18368:	50202020 	.word	0x50202020
   1836c:	20687375 	.word	0x20687375
   18370:	74747542 	.word	0x74747542
   18374:	31206e6f 	.word	0x31206e6f
   18378:	206f7420 	.word	0x206f7420
   1837c:	616f7262 	.word	0x616f7262
   18380:	73616364 	.word	0x73616364
   18384:	656d2074 	.word	0x656d2074
   18388:	67617373 	.word	0x67617373
   1838c:	00002e65 	.word	0x00002e65
   18390:	20200a0d 	.word	0x20200a0d
   18394:	20202020 	.word	0x20202020
   18398:	20202020 	.word	0x20202020
   1839c:	20202020 	.word	0x20202020
   183a0:	20202020 	.word	0x20202020
   183a4:	4c202020 	.word	0x4c202020
   183a8:	31204445 	.word	0x31204445
   183ac:	6c697720 	.word	0x6c697720
   183b0:	6562206c 	.word	0x6562206c
   183b4:	676f7420 	.word	0x676f7420
   183b8:	64656c67 	.word	0x64656c67
   183bc:	6f707520 	.word	0x6f707520
   183c0:	6572206e 	.word	0x6572206e
   183c4:	76696563 	.word	0x76696563
   183c8:	20676e69 	.word	0x20676e69
   183cc:	7373656d 	.word	0x7373656d
   183d0:	73656761 	.word	0x73656761
   183d4:	0000202e 	.word	0x0000202e
   183d8:	000d0a0d 	.word	0x000d0a0d
   183dc:	69726550 	.word	0x69726550
   183e0:	6369646f 	.word	0x6369646f
   183e4:	61725420 	.word	0x61725420
   183e8:	696d736e 	.word	0x696d736e
   183ec:	6f697373 	.word	0x6f697373
   183f0:	203d206e 	.word	0x203d206e
   183f4:	61736944 	.word	0x61736944
   183f8:	0d656c62 	.word	0x0d656c62
   183fc:	00000000 	.word	0x00000000
   18400:	79747544 	.word	0x79747544
   18404:	63794320 	.word	0x63794320
   18408:	676e696c 	.word	0x676e696c
   1840c:	70757320 	.word	0x70757320
   18410:	74726f70 	.word	0x74726f70
   18414:	44203d20 	.word	0x44203d20
   18418:	62617369 	.word	0x62617369
   1841c:	000d656c 	.word	0x000d656c
   18420:	2054424c 	.word	0x2054424c
   18424:	70707573 	.word	0x70707573
   18428:	2074726f 	.word	0x2074726f
   1842c:	6944203d 	.word	0x6944203d
   18430:	6c626173 	.word	0x6c626173
   18434:	ff000d65 	.word	0xff000d65
   18438:	75636553 	.word	0x75636553
   1843c:	20646572 	.word	0x20646572
   18440:	00000000 	.word	0x00000000
   18444:	616f7242 	.word	0x616f7242
   18448:	73616364 	.word	0x73616364
   1844c:	61502074 	.word	0x61502074
   18450:	74656b63 	.word	0x74656b63
   18454:	74697720 	.word	0x74697720
   18458:	53522068 	.word	0x53522068
   1845c:	00204953 	.word	0x00204953
   18460:	63696e55 	.word	0x63696e55
   18464:	20747361 	.word	0x20747361
   18468:	6b636150 	.word	0x6b636150
   1846c:	77207465 	.word	0x77207465
   18470:	20687469 	.word	0x20687469
   18474:	49535352 	.word	0x49535352
   18478:	00000020 	.word	0x00000020
   1847c:	78323025 	.word	0x78323025
   18480:	00000000 	.word	0x00000000
   18484:	6f726620 	.word	0x6f726620
   18488:	0000206d 	.word	0x0000206d
   1848c:	00007825 	.word	0x00007825
   18490:	ff00203a 	.word	0xff00203a
   18494:	00007882 	.word	0x00007882
   18498:	00007882 	.word	0x00007882
   1849c:	0000786e 	.word	0x0000786e
   184a0:	0000788e 	.word	0x0000788e
   184a4:	00007882 	.word	0x00007882
   184a8:	000078aa 	.word	0x000078aa
   184ac:	00007882 	.word	0x00007882
   184b0:	00007882 	.word	0x00007882
   184b4:	00007882 	.word	0x00007882
   184b8:	00007882 	.word	0x00007882
   184bc:	00007882 	.word	0x00007882
   184c0:	00007882 	.word	0x00007882
   184c4:	000078b2 	.word	0x000078b2
   184c8:	00007882 	.word	0x00007882
   184cc:	00007882 	.word	0x00007882
   184d0:	00007882 	.word	0x00007882
   184d4:	6b636150 	.word	0x6b636150
   184d8:	72207465 	.word	0x72207465
   184dc:	69656365 	.word	0x69656365
   184e0:	20646576 	.word	0x20646576
   184e4:	6d6f7266 	.word	0x6d6f7266
   184e8:	68746f20 	.word	0x68746f20
   184ec:	53207265 	.word	0x53207265
   184f0:	6372756f 	.word	0x6372756f
   184f4:	41502065 	.word	0x41502065
   184f8:	4449204e 	.word	0x4449204e
   184fc:	30203a20 	.word	0x30203a20
   18500:	25782578 	.word	0x25782578
   18504:	000a0d78 	.word	0x000a0d78
   18508:	52200d0a 	.word	0x52200d0a
   1850c:	69656365 	.word	0x69656365
   18510:	20646576 	.word	0x20646576
   18514:	61526f4c 	.word	0x61526f4c
   18518:	73656d20 	.word	0x73656d20
   1851c:	65676173 	.word	0x65676173
   18520:	7825203a 	.word	0x7825203a
   18524:	00000000 	.word	0x00000000
   18528:	704f200a 	.word	0x704f200a
   1852c:	67206e65 	.word	0x67206e65
   18530:	20657461 	.word	0x20657461
   18534:	74207461 	.word	0x74207461
   18538:	696d7265 	.word	0x696d7265
   1853c:	206c616e 	.word	0x206c616e
   18540:	0d0a2041 	.word	0x0d0a2041
   18544:	00000000 	.word	0x00000000
   18548:	6c43200a 	.word	0x6c43200a
   1854c:	2065736f 	.word	0x2065736f
   18550:	65746167 	.word	0x65746167
   18554:	20746120 	.word	0x20746120
   18558:	6d726574 	.word	0x6d726574
   1855c:	6c616e69 	.word	0x6c616e69
   18560:	00004120 	.word	0x00004120
   18564:	724f200a 	.word	0x724f200a
   18568:	20726564 	.word	0x20726564
   1856c:	666e6f63 	.word	0x666e6f63
   18570:	656d7269 	.word	0x656d7269
   18574:	77202c64 	.word	0x77202c64
   18578:	20746961 	.word	0x20746961
   1857c:	20726f66 	.word	0x20726f66
   18580:	72726566 	.word	0x72726566
   18584:	6f742079 	.word	0x6f742079
   18588:	72726120 	.word	0x72726120
   1858c:	00657669 	.word	0x00657669
   18590:	6553200a 	.word	0x6553200a
   18594:	6d20646e 	.word	0x6d20646e
   18598:	61737365 	.word	0x61737365
   1859c:	61206567 	.word	0x61206567
   185a0:	6e696167 	.word	0x6e696167
   185a4:	000d0a20 	.word	0x000d0a20
   185a8:	6546200a 	.word	0x6546200a
   185ac:	20797272 	.word	0x20797272
   185b0:	61207369 	.word	0x61207369
   185b4:	65742074 	.word	0x65742074
   185b8:	6e696d72 	.word	0x6e696d72
   185bc:	42206c61 	.word	0x42206c61
   185c0:	000d0a20 	.word	0x000d0a20
   185c4:	6546200a 	.word	0x6546200a
   185c8:	20797272 	.word	0x20797272
   185cc:	6c207369 	.word	0x6c207369
   185d0:	69766165 	.word	0x69766165
   185d4:	7420676e 	.word	0x7420676e
   185d8:	696d7265 	.word	0x696d7265
   185dc:	206c616e 	.word	0x206c616e
   185e0:	ffff0042 	.word	0xffff0042
   185e4:	4d200d0a 	.word	0x4d200d0a
   185e8:	61737365 	.word	0x61737365
   185ec:	72206567 	.word	0x72206567
   185f0:	69656365 	.word	0x69656365
   185f4:	3a646576 	.word	0x3a646576
   185f8:	00782520 	.word	0x00782520
   185fc:	6552200a 	.word	0x6552200a
   18600:	69766563 	.word	0x69766563
   18604:	55206465 	.word	0x55206465
   18608:	20545241 	.word	0x20545241
   1860c:	7373656d 	.word	0x7373656d
   18610:	20656761 	.word	0x20656761
   18614:	6d6f7266 	.word	0x6d6f7266
   18618:	2d4f4920 	.word	0x2d4f4920
   1861c:	6863616d 	.word	0x6863616d
   18620:	20656e69 	.word	0x20656e69
   18624:	ff000d0a 	.word	0xff000d0a
   18628:	7461440a 	.word	0x7461440a
   1862c:	6f432061 	.word	0x6f432061
   18630:	7269666e 	.word	0x7269666e
   18634:	48203a6d 	.word	0x48203a6d
   18638:	6c646e61 	.word	0x6c646e61
   1863c:	25203a65 	.word	0x25203a65
   18640:	74732064 	.word	0x74732064
   18644:	73757461 	.word	0x73757461
   18648:	2064253a 	.word	0x2064253a
   1864c:	ff000a0d 	.word	0xff000a0d
   18650:	6f430a0d 	.word	0x6f430a0d
   18654:	63656e6e 	.word	0x63656e6e
   18658:	704f2074 	.word	0x704f2074
   1865c:	74617265 	.word	0x74617265
   18660:	206e6f69 	.word	0x206e6f69
   18664:	74617453 	.word	0x74617453
   18668:	203a7375 	.word	0x203a7375
   1866c:	000a6425 	.word	0x000a6425
   18670:	74530a0d 	.word	0x74530a0d
   18674:	65747261 	.word	0x65747261
   18678:	69572064 	.word	0x69572064
   1867c:	656c6572 	.word	0x656c6572
   18680:	43207373 	.word	0x43207373
   18684:	756d6d6f 	.word	0x756d6d6f
   18688:	6163696e 	.word	0x6163696e
   1868c:	6e6f6974 	.word	0x6e6f6974
   18690:	206e6f20 	.word	0x206e6f20
   18694:	6e616843 	.word	0x6e616843
   18698:	206c656e 	.word	0x206c656e
   1869c:	0a0d7525 	.word	0x0a0d7525
   186a0:	ffffff00 	.word	0xffffff00
   186a4:	7275430a 	.word	0x7275430a
   186a8:	746e6572 	.word	0x746e6572
   186ac:	20785420 	.word	0x20785420
   186b0:	7074756f 	.word	0x7074756f
   186b4:	70207475 	.word	0x70207475
   186b8:	7265776f 	.word	0x7265776f
   186bc:	6425203a 	.word	0x6425203a
   186c0:	00000a0d 	.word	0x00000a0d
   186c4:	42204150 	.word	0x42204150
   186c8:	54534f4f 	.word	0x54534f4f
   186cc:	61747320 	.word	0x61747320
   186d0:	3a737574 	.word	0x3a737574
   186d4:	0d642520 	.word	0x0d642520
   186d8:	0000000a 	.word	0x0000000a
   186dc:	72727543 	.word	0x72727543
   186e0:	20746e65 	.word	0x20746e65
   186e4:	203a4653 	.word	0x203a4653
   186e8:	64254653 	.word	0x64254653
   186ec:	00000a0d 	.word	0x00000a0d
   186f0:	72727543 	.word	0x72727543
   186f4:	20746e65 	.word	0x20746e65
   186f8:	28205742 	.word	0x28205742
   186fc:	6b353231 	.word	0x6b353231
   18700:	373d7a48 	.word	0x373d7a48
   18704:	3532202c 	.word	0x3532202c
   18708:	7a486b30 	.word	0x7a486b30
   1870c:	202c383d 	.word	0x202c383d
   18710:	6b303035 	.word	0x6b303035
   18714:	393d7a48 	.word	0x393d7a48
   18718:	25203a29 	.word	0x25203a29
   1871c:	000a0d64 	.word	0x000a0d64
   18720:	6153200a 	.word	0x6153200a
   18724:	6f207474 	.word	0x6f207474
   18728:	6e207070 	.word	0x6e207070
   1872c:	76747465 	.word	0x76747465
   18730:	206b7265 	.word	0x206b7265
   18734:	0000000d 	.word	0x0000000d
   18738:	6a4b200a 	.word	0x6a4b200a
   1873c:	2074726f 	.word	0x2074726f
   18740:	65657266 	.word	0x65657266
   18744:	2072657a 	.word	0x2072657a
   18748:	ffff000d 	.word	0xffff000d
   1874c:	0944490a 	.word	0x0944490a
   18750:	69766544 	.word	0x69766544
   18754:	41206563 	.word	0x41206563
   18758:	65726464 	.word	0x65726464
   1875c:	09207373 	.word	0x09207373
   18760:	70614309 	.word	0x70614309
   18764:	6c696261 	.word	0x6c696261
   18768:	20797469 	.word	0x20797469
   1876c:	4e415009 	.word	0x4e415009
   18770:	20444920 	.word	0x20444920
   18774:	61684309 	.word	0x61684309
   18778:	6c656e6e 	.word	0x6c656e6e
   1877c:	00000020 	.word	0x00000020
   18780:	00000909 	.word	0x00000909
   18784:	53200a0d 	.word	0x53200a0d
   18788:	206e6163 	.word	0x206e6163
   1878c:	7265704f 	.word	0x7265704f
   18790:	6f697461 	.word	0x6f697461
   18794:	7453206e 	.word	0x7453206e
   18798:	73757461 	.word	0x73757461
   1879c:	6425203a 	.word	0x6425203a
   187a0:	76656420 	.word	0x76656420
   187a4:	20656369 	.word	0x20656369
   187a8:	6e756f66 	.word	0x6e756f66
   187ac:	ffff0064 	.word	0xffff0064
   187b0:	626d756e 	.word	0x626d756e
   187b4:	664f7265 	.word	0x664f7265
   187b8:	65747942 	.word	0x65747942
   187bc:	00000073 	.word	0x00000073
   187c0:	732f2e2e 	.word	0x732f2e2e
   187c4:	412f6372 	.word	0x412f6372
   187c8:	742f4653 	.word	0x742f4653
   187cc:	64726968 	.word	0x64726968
   187d0:	74726170 	.word	0x74726170
   187d4:	69772f79 	.word	0x69772f79
   187d8:	656c6572 	.word	0x656c6572
   187dc:	4c2f7373 	.word	0x4c2f7373
   187e0:	5f61526f 	.word	0x5f61526f
   187e4:	2f503250 	.word	0x2f503250
   187e8:	76726573 	.word	0x76726573
   187ec:	73656369 	.word	0x73656369
   187f0:	7364702f 	.word	0x7364702f
   187f4:	6372732f 	.word	0x6372732f
   187f8:	2f766e2f 	.word	0x2f766e2f
   187fc:	764e5f44 	.word	0x764e5f44
   18800:	0000632e 	.word	0x0000632e
   18804:	72646461 	.word	0x72646461
   18808:	20737365 	.word	0x20737365
   1880c:	44203d3c 	.word	0x44203d3c
   18810:	5f564e5f 	.word	0x5f564e5f
   18814:	4f4d454d 	.word	0x4f4d454d
   18818:	455f5952 	.word	0x455f5952
   1881c:	0000444e 	.word	0x0000444e
   18820:	64646128 	.word	0x64646128
   18824:	73736572 	.word	0x73736572
   18828:	6e202b20 	.word	0x6e202b20
   1882c:	65626d75 	.word	0x65626d75
   18830:	42664f72 	.word	0x42664f72
   18834:	73657479 	.word	0x73657479
   18838:	3d3c2029 	.word	0x3d3c2029
   1883c:	5f442820 	.word	0x5f442820
   18840:	4d5f564e 	.word	0x4d5f564e
   18844:	524f4d45 	.word	0x524f4d45
   18848:	4e455f59 	.word	0x4e455f59
   1884c:	202b2044 	.word	0x202b2044
   18850:	00295531 	.word	0x00295531
   18854:	66666f28 	.word	0x66666f28
   18858:	20746573 	.word	0x20746573
   1885c:	756e202b 	.word	0x756e202b
   18860:	7265626d 	.word	0x7265626d
   18864:	7942664f 	.word	0x7942664f
   18868:	29736574 	.word	0x29736574
   1886c:	203d3c20 	.word	0x203d3c20
   18870:	564e5f44 	.word	0x564e5f44
   18874:	4345535f 	.word	0x4345535f
   18878:	5f524f54 	.word	0x5f524f54
   1887c:	455a4953 	.word	0x455a4953
   18880:	ffffff00 	.word	0xffffff00
   18884:	4e5f4428 	.word	0x4e5f4428
   18888:	454d5f56 	.word	0x454d5f56
   1888c:	59524f4d 	.word	0x59524f4d
   18890:	4154535f 	.word	0x4154535f
   18894:	25205452 	.word	0x25205452
   18898:	4d564e20 	.word	0x4d564e20
   1889c:	4c525443 	.word	0x4c525443
   188a0:	574f525f 	.word	0x574f525f
   188a4:	5a49535f 	.word	0x5a49535f
   188a8:	3d202945 	.word	0x3d202945
   188ac:	5530203d 	.word	0x5530203d
   188b0:	00000000 	.word	0x00000000
   188b4:	4e5f4428 	.word	0x4e5f4428
   188b8:	454d5f56 	.word	0x454d5f56
   188bc:	59524f4d 	.word	0x59524f4d
   188c0:	444e455f 	.word	0x444e455f
   188c4:	44202d20 	.word	0x44202d20
   188c8:	5f564e5f 	.word	0x5f564e5f
   188cc:	4f4d454d 	.word	0x4f4d454d
   188d0:	535f5952 	.word	0x535f5952
   188d4:	54524154 	.word	0x54524154
   188d8:	31202b20 	.word	0x31202b20
   188dc:	3d202955 	.word	0x3d202955
   188e0:	5f44203d 	.word	0x5f44203d
   188e4:	4d5f564e 	.word	0x4d5f564e
   188e8:	524f4d45 	.word	0x524f4d45
   188ec:	49535f59 	.word	0x49535f59
   188f0:	ff00455a 	.word	0xff00455a

000188f4 <__func__.13263>:
   188f4:	764e5f44 696e495f ffff0074              D_Nv_Init...

00018900 <__func__.13275>:
   18900:	764e5f44 6165525f 6d495f64 ff006c70     D_Nv_Read_Impl..

00018910 <__func__.13288>:
   18910:	764e5f44 6972575f 495f6574 006c706d     D_Nv_Write_Impl.

00018920 <__func__.13300>:
   18920:	764e5f44 6172455f 65536573 726f7463     D_Nv_EraseSector
   18930:	706d495f ffff006c                       _Impl...

00018938 <__func__.13313>:
   18938:	706d6f43 44657261 00617461 68636163     CompareData.cach
   18948:	3d212065 4c554e20 ffff004c 736c6166     e != NULL...fals
   18958:	ffff0065 646e6946 6d657449 68636143     e...FindItemCach
   18968:	64692865 3d3d2029 4c554e20 0000004c     e(id) == NULL...
   18978:	74695f73 6f436d65 20746e75 414d203c     s_itemCount < MA
   18988:	54495f58 435f4d45 544e554f ffffff00     X_ITEM_COUNT....
   18998:	646e6946 6d657449 68636143 64692865     FindItemCache(id
   189a8:	3d212029 4c554e20 ffff004c 68636163     ) != NULL...cach
   189b8:	6c3e2d65 42747361 6b636f6c 203d2120     e->lastBlock != 
   189c8:	30307830 00003030 732f2e2e 412f6372     0x0000..../src/A
   189d8:	742f4653 64726968 74726170 69772f79     SF/thirdparty/wi
   189e8:	656c6572 4c2f7373 5f61526f 2f503250     reless/LoRa_P2P/
   189f8:	76726573 73656369 7364702f 6372732f     services/pds/src
   18a08:	2f766e2f 764e5f53 6d61532d 2e313252     /nv/S_Nv-SamR21.
   18a18:	ffff0063 20646928 30203d21 26202975     c...(id != 0u) &
   18a28:	69282026 203c2064 30467830 29753030     & (id < 0xF000u)
   18a38:	20262620 65746928 6e654c6d 20687467      && (itemLength 
   18a48:	4d203d3c 495f5841 5f4d4554 474e454c     <= MAX_ITEM_LENG
   18a58:	00294854 21206469 7530203d ffffff00     TH).id != 0u....
   18a68:	20646928 30203d21 26202975 70282026     (id != 0u) && (p
   18a78:	61746144 203d2120 4c4c554e ffff0029     Data != NULL)...

00018a88 <__func__.13290>:
   18a88:	706d6f63 53746361 6f746365 6d695472     compactSectorTim
   18a98:	69467265 00646572                       erFired.

00018aa0 <__func__.13326>:
   18aa0:	646e6946 6d657449 68636143 ffff0065     FindItemCache...

00018ab0 <__func__.13333>:
   18ab0:	61657243 74496574 61436d65 00656863     CreateItemCache.

00018ac0 <__func__.13338>:
   18ac0:	656c6544 74496574 61436d65 00656863     DeleteItemCache.

00018ad0 <__func__.13431>:
   18ad0:	64616f4c 74636553 ff00726f              LoadSector..

00018adc <__func__.13453>:
   18adc:	706d6f43 53746361 6f746365 ffff0072     CompactSector...

00018aec <__func__.13473>:
   18aec:	706d6f43 53746361 6f746365 4e664972     CompactSectorIfN
   18afc:	65646565 ffff0064                       eeded...

00018b04 <__func__.13480>:
   18b04:	706d6f43 49746361 006d6574              CompactItem.

00018b10 <__func__.13504>:
   18b10:	764e5f53 7261455f 6e49796c ff007469     S_Nv_EarlyInit..

00018b20 <__func__.13514>:
   18b20:	764e5f53 6574495f 696e496d 6d495f74     S_Nv_ItemInit_Im
   18b30:	ff006c70                                pl..

00018b34 <__func__.13527>:
   18b34:	764e5f53 6972575f 495f6574 006c706d     S_Nv_Write_Impl.

00018b44 <__func__.13538>:
   18b44:	764e5f53 6165525f 6d495f64 ff006c70     S_Nv_Read_Impl..

00018b54 <__func__.13543>:
   18b54:	764e5f53 6574495f 6e654c6d 5f687467     S_Nv_ItemLength_
   18b64:	6c706d49 ffffff00 20553028 69203d21     Impl....(0U != i
   18b74:	446d6574 72637365 6574692e 7a69536d     temDescr.itemSiz
   18b84:	26202965 4e282026 204c4c55 69203d21     e) && (NULL != i
   18b94:	446d6574 72637365 6574692e 7461446d     temDescr.itemDat
   18ba4:	00002961 732f2e2e 412f6372 742f4653     a)..../src/ASF/t
   18bb4:	64726968 74726170 69772f79 656c6572     hirdparty/wirele
   18bc4:	4c2f7373 5f61526f 2f503250 76726573     ss/LoRa_P2P/serv
   18bd4:	73656369 7364702f 6372732f 2f6c772f     ices/pds/src/wl/
   18be4:	64506c77 74614473 72655361 2e726576     wlPdsDataServer.
   18bf4:	00000063 4e5f5328 65525f76 6e727574     c...(S_Nv_Return
   18c04:	756c6156 69445f65 746f4e64 73697845     Value_DidNotExis
   18c14:	3d3d2074 74657220 7c7c2029 5f532820     t == ret) || (S_
   18c24:	525f764e 72757465 6c61566e 4f5f6575     Nv_ReturnValue_O
   18c34:	3d3d206b 74657220 ffff0029              k == ret)...

00018c40 <__func__.13203>:
   18c40:	53736470 65726f74 6d657449 6b736154     pdsStoreItemTask
   18c50:	646e6148 0072656c                       Handler.

00018c58 <__func__.13223>:
   18c58:	53736470 65726f74 6d657449 ffffff00     pdsStoreItem....

00018c68 <__func__.13230>:
   18c68:	52736470 6f747365 74496572 ff006d65     pdsRestoreItem..
   18c78:	20746572 53203d3d 5f764e5f 75746552     ret == S_Nv_Retu
   18c88:	61566e72 5f65756c ff006b4f              rnValue_Ok..

00018c94 <__func__.13397>:
   18c94:	69726576 74497966 69536d65 0073657a     verifyItemSizes.
   18ca4:	4970616d 2e6d6574 67616c66 20262073     mapItem.flags & 
   18cb4:	455a4953 444f4d5f 43494649 4f495441     SIZE_MODIFICATIO
   18cc4:	4c415f4e 45574f4c 00000044 732f2e2e     N_ALLOWED...../s
   18cd4:	412f6372 742f4653 64726968 74726170     rc/ASF/thirdpart
   18ce4:	69772f79 656c6572 4c2f7373 5f61526f     y/wireless/LoRa_
   18cf4:	2f503250 76726573 73656369 7364702f     P2P/services/pds
   18d04:	6372732f 2f6c772f 64506c77 70795473     /src/wl/wlPdsTyp
   18d14:	6f437365 7265766e 2e726574 ffff0063     esConverter.c...

00018d24 <mySecurityKey>:
   18d24:	03020100 07060504 0b0a0908 0f0e0d0c     ................
   18d34:	0000a86c 0000a87c 0000a882 0000a888     l...|...........
   18d44:	0000a88e 0000a894 0000a89a 0000a8a0     ................
   18d54:	0000a8a6 0000a8ac 0000a8b2 0000a8b8     ................
   18d64:	0000a8be 0000a8c4 0000a8ca 0000a8d0     ................
   18d74:	0000a8d6 0000a8dc 0000a8e2 0000a8e8     ................
   18d84:	0000a8ee 0000a8f4 0000a8fa 0000a900     ................
   18d94:	0000a906 0000a90c 0000aa50 0000a9b0     ........P.......
   18da4:	0000aa30 0000aa50 0000aa30 0000aa50     0...P...0...P...
   18db4:	0000aa50 0000aa50 0000a9b0 0000aa50     P...P.......P...
   18dc4:	0000aa50 0000aa50 0000aa50 0000aa50     P...P...P...P...
   18dd4:	0000aa50 0000aa50 0000aa78 0a0d0a0d     P...P...x.......
   18de4:	4120794d 65726464 203a7373 00007830     My Address: 0x..
   18df4:	41502020 3a44494e 00783020 68432020       PANID: 0x.  Ch
   18e04:	656e6e61 00203a6c 6f430a0d 63656e6e     annel: ...Connec
   18e14:	6e6f6974 65500920 6f4c7265 6441676e     tion .PeerLongAd
   18e24:	73657264 50092073 49726565 206f666e     dress .PeerInfo 
   18e34:	4f785209 6174536e 31737574 0000000d     .RxOnStatus1....
   18e44:	00090909 0000742f 0a0d0a0d 6e6e6f43     ..../t......Conn
   18e54:	69746365 20206e6f 50202020 4c726565     ection     PeerL
   18e64:	41676e6f 65726464 20207373 50202020     ongAddress     P
   18e74:	49726565 096f666e 6e4f7852 74617453     eerInfo.RxOnStat
   18e84:	000d7375 20202020 20202020 20202020     us..            
   18e94:	00000020 20202020 ffffff00 41500a0d      ...    ......PA
   18ea4:	3a44494e 00000000 61684320 6c656e6e     NID:.... Channel
   18eb4:	ffff003a 63530a0d 43206e61 6e6e6168     :.....Scan Chann
   18ec4:	00206c65 61530a0d 43206576 656e6e6f     el ...Save Conne
   18ed4:	6f697463 00000d6e 41200a0d 54206b63     ction..... Ack T
   18ee4:	6f656d69 000d7475                       imeout..

00018eec <AdvChannels433>:
   18eec:	19d1b9d8 19d1b9d8 ff0c0101 19d4c718     ................
   18efc:	19d4c718 ff0c0101 19d7d458 19d7d458     ........X...X...
   18f0c:	ff0c0101                                ....

00018f10 <AdvChannels868>:
   18f10:	33be27a0 33be27a0 ff100101 33c134e0     .'.3.'.3.....4.3
   18f20:	33c134e0 ff100101 33c44220 33c44220     .4.3.... B.3 B.3
   18f30:	ff100101                                ....

00018f34 <DefaultChannels433>:
   18f34:	50015001 ffff5001                       .P.P.P..

00018f3c <DefaultChannels868>:
   18f3c:	50015001 ffff5001                       .P.P.P..

00018f44 <SubBandDutyCycle868>:
   18f44:	006403e8 03e80064 0064000a              ..d.d.....d.

00018f50 <SubBandParams433>:
   18f50:	19cf0e40 19ea8580 00000000              @...........

00018f5c <SubBandParams868>:
   18f5c:	337055c0 338eda40 00000000 338eda41     .Up3@..3....A..3
   18f6c:	33bca100 00000000 33bca101 33c5c8c0     ...3.......3...3
   18f7c:	00000000 33c74f60 33cef080 00000000     ....`O.3...3....
   18f8c:	33d1fdc0 33d5ce50 00000000 33d691a0     ...3P..3.......3
   18f9c:	33db2580 00000000                       .%.3....

00018fa4 <AdvChannels923JP>:
   18fa4:	3706ea00 3706ea00 ff100101 3709f740     ...7...7....@..7
   18fb4:	3709f740 ff100101                       @..7....

00018fbc <DefaultChannels923JP>:
   18fbc:	50015001                                .P.P

00018fc0 <SubBandDutyCycleJP923>:
   18fc0:	000a0064                                d...

00018fc4 <SubBandParamsJP923>:
   18fc4:	36d61600 36f7a7c0 00000000 36fab500     ...6...6.......6
   18fd4:	37502800 00000000                       .(P7....

00018fdc <AdvChannels920KR>:
   18fdc:	36f62120 36f62120 ff0e0100 36f92e60      !.6 !.6....`..6
   18fec:	36f92e60 ff0e0100 36fc3ba0 36fc3ba0     `..6.....;.6.;.6
   18ffc:	ff0e0100                                ....

00019000 <DefaultChannels920KR>:
   19000:	50015001 ffff5001                       .P.P.P..

00019008 <taskHandlers>:
   19008:	0000d881 0000f061 0000e675 000096f1     ....a...u.......
   19018:	00007a1d                                .z..

0001901c <tc_interrupt_vectors.13447>:
   1901c:	00151211 ffffff00 00020028 2000001c     ........(...... 
   1902c:	00000000 20433249 76616c53 6f4e2065     ....I2C Slave No
   1903c:	76412074 616c6961 00656c62 656d6954     t Available.Time
   1904c:	2074756f 00000031 656d6954 2074756f     out 1...Timeout 
   1905c:	00000032                                2...

00019060 <lorawanHandlers>:
   19060:	0000e539 0000e44d 0000e5fd fffffffd     9...M...........

00019070 <radioTaskHandlers>:
   19070:	0000fc41 0000fd41 0000fa7d 0000f6b5     A...A...}.......
   19080:	00013735                                57..

00019084 <FskSyncWordBuff>:
   19084:	02c194c1                                         ...

00019087 <macEndDevCmdInputLen>:
   19087:	04010402 01010500 05000004              ............

00019093 <macEndDevCmdReplyLen>:
   19093:	02010201 01010203 01000002 02020000     ................
   190a3:	0a080200                                         ..

000190a5 <maxEIRPTable>:
   190a5:	0d0c0a08 1412100e 1b1a1815 24211e1d     ..............!$
   190b5:	30ffffff 00000145 12000145 54000145     ...0E...E...E..T
   190c5:	12000144 f6000145 12000144 54000145     D...E...D...E..T
   190d5:	00000144 00000145 f6000145 54000144     D...E...E...D..T
   190e5:	5c000144 5c000144 5c000144 18000144     D..\D..\D..\D...
   190f5:	00000145 00000145 d4000145 b8000144     E...E...E...D...
   19105:	d4000145 f6000144 d4000144 b8000144     E...D...D...D...
   19115:	00000145 00000145 f6000145 b8000144     E...E...E...D...
   19125:	5c000145 5c000144 5c000144 c2000144     E..\D..\D..\D...
   19135:	b0000145 00000148 00000148 fe000148     E...H...H...H...
   19145:	a2000147 a2000148 98000148 fe000148     G...H...H...H...
   19155:	a2000147 98000148 a2000148 fe000148     G...H...H...H...
   19165:	a8000147 a8000148 a8000148 38000148     G...H...H...H..8
   19175:	80000149 62000156 1c000156 3a000156     I...V..bV...V..:
   19185:	1c000155 54000156 1c000156 3a000156     U...V..TV...V..:
   19195:	62000155 62000156 54000156 3a000156     U..bV..bV..TV..:
   191a5:	32000155 32000155 32000155 98000155     U..2U..2U..2U...
   191b5:	e0000158 a000015e a000015d 9c00015d     X...^...]...]...
   191c5:	b800015d b800015e aa00015e 9c00015e     ]...^...^...^...
   191d5:	b800015d aa00015e b800015e 9c00015e     ]...^...^...^...
   191e5:	c000015d c000015e c000015e c400015e     ]...^...^...^...
   191f5:	2c000160 6e756620 6f697463 00203a6e     `.., function: .
   19205:	65737361 6f697472 2522206e 66202273     assertion "%s" f
   19215:	656c6961 66203a64 20656c69 22732522     ailed: file "%s"
   19225:	696c202c 2520656e 25732564 24000a73              , line %d%s%s..

00019234 <_global_impure_ptr>:
   19234:	20000024 2b302d23 6c680020 6665004c     $.. #-0+ .hlL.ef
   19244:	47464567 32313000 36353433 41393837     gEFG.0123456789A
   19254:	45444342 31300046 35343332 39383736     BCDEF.0123456789
   19264:	64636261 ff006665                       abcdef..

0001926c <__sf_fake_stderr>:
	...

0001928c <__sf_fake_stdin>:
	...

000192ac <__sf_fake_stdout>:
	...

000192cc <_init>:
   192cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   192ce:	46c0      	nop			; (mov r8, r8)
   192d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   192d2:	bc08      	pop	{r3}
   192d4:	469e      	mov	lr, r3
   192d6:	4770      	bx	lr

000192d8 <__init_array_start>:
   192d8:	00004499 	.word	0x00004499

000192dc <_fini>:
   192dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   192de:	46c0      	nop			; (mov r8, r8)
   192e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   192e2:	bc08      	pop	{r3}
   192e4:	469e      	mov	lr, r3
   192e6:	4770      	bx	lr

000192e8 <__fini_array_start>:
   192e8:	00004471 	.word	0x00004471
