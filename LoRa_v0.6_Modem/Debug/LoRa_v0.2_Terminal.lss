
LoRa_v0.2_Terminal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00018554  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00018554  00018554  00028554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000084  20000000  0001855c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .lpram        00000000  30000000  30000000  00030084  2**0
                  CONTENTS
  4 .bss          00003454  20000088  000185e8  00030088  2**3
                  ALLOC
  5 .stack        00002004  200034dc  0001ba3c  00030088  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  00030084  2**0
                  CONTENTS, READONLY
  7 .comment      0000008c  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY
  8 .debug_info   00093f0a  00000000  00000000  00030138  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000ceaf  00000000  00000000  000c4042  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001d919  00000000  00000000  000d0ef1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000018d8  00000000  00000000  000ee80a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000024a8  00000000  00000000  000f00e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001a907  00000000  00000000  000f258a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000336ab  00000000  00000000  0010ce91  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b55b9  00000000  00000000  0014053c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000510c  00000000  00000000  001f5af8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e0 54 00 20 91 6f 00 00 8d 6f 00 00 8d 6f 00 00     .T. .o...o...o..
	...
      2c:	8d 6f 00 00 00 00 00 00 00 00 00 00 8d 6f 00 00     .o...........o..
      3c:	8d 6f 00 00 8d 6f 00 00 8d 6f 00 00 45 4c 00 00     .o...o...o..EL..
      4c:	01 48 00 00 8d 6f 00 00 8d 6f 00 00 8d 6f 00 00     .H...o...o...o..
      5c:	8d 6f 00 00 1d 57 00 00 2d 57 00 00 3d 57 00 00     .o...W..-W..=W..
      6c:	4d 57 00 00 5d 57 00 00 6d 57 00 00 8d 6f 00 00     MW..]W..mW...o..
      7c:	8d 6f 00 00 8d 6f 00 00 61 6b 00 00 71 6b 00 00     .o...o..ak..qk..
      8c:	8d 6f 00 00 8d 6f 00 00 81 6b 00 00 8d 6f 00 00     .o...o...k...o..
      9c:	8d 6f 00 00 8d 6f 00 00 8d 6f 00 00 79 47 00 00     .o...o...o..yG..
      ac:	8d 6f 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .o..............
	...

00000400 <__d_nv_mem_start>:
     400:	ffffffff 	.word	0xffffffff
     404:	ffffffff 	.word	0xffffffff
     408:	ffffffff 	.word	0xffffffff
     40c:	ffffffff 	.word	0xffffffff
     410:	ffffffff 	.word	0xffffffff
     414:	ffffffff 	.word	0xffffffff
     418:	ffffffff 	.word	0xffffffff
     41c:	ffffffff 	.word	0xffffffff
     420:	ffffffff 	.word	0xffffffff
     424:	ffffffff 	.word	0xffffffff
     428:	ffffffff 	.word	0xffffffff
     42c:	ffffffff 	.word	0xffffffff
     430:	ffffffff 	.word	0xffffffff
     434:	ffffffff 	.word	0xffffffff
     438:	ffffffff 	.word	0xffffffff
     43c:	ffffffff 	.word	0xffffffff
     440:	ffffffff 	.word	0xffffffff
     444:	ffffffff 	.word	0xffffffff
     448:	ffffffff 	.word	0xffffffff
     44c:	ffffffff 	.word	0xffffffff
     450:	ffffffff 	.word	0xffffffff
     454:	ffffffff 	.word	0xffffffff
     458:	ffffffff 	.word	0xffffffff
     45c:	ffffffff 	.word	0xffffffff
     460:	ffffffff 	.word	0xffffffff
     464:	ffffffff 	.word	0xffffffff
     468:	ffffffff 	.word	0xffffffff
     46c:	ffffffff 	.word	0xffffffff
     470:	ffffffff 	.word	0xffffffff
     474:	ffffffff 	.word	0xffffffff
     478:	ffffffff 	.word	0xffffffff
     47c:	ffffffff 	.word	0xffffffff
     480:	ffffffff 	.word	0xffffffff
     484:	ffffffff 	.word	0xffffffff
     488:	ffffffff 	.word	0xffffffff
     48c:	ffffffff 	.word	0xffffffff
     490:	ffffffff 	.word	0xffffffff
     494:	ffffffff 	.word	0xffffffff
     498:	ffffffff 	.word	0xffffffff
     49c:	ffffffff 	.word	0xffffffff
     4a0:	ffffffff 	.word	0xffffffff
     4a4:	ffffffff 	.word	0xffffffff
     4a8:	ffffffff 	.word	0xffffffff
     4ac:	ffffffff 	.word	0xffffffff
     4b0:	ffffffff 	.word	0xffffffff
     4b4:	ffffffff 	.word	0xffffffff
     4b8:	ffffffff 	.word	0xffffffff
     4bc:	ffffffff 	.word	0xffffffff
     4c0:	ffffffff 	.word	0xffffffff
     4c4:	ffffffff 	.word	0xffffffff
     4c8:	ffffffff 	.word	0xffffffff
     4cc:	ffffffff 	.word	0xffffffff
     4d0:	ffffffff 	.word	0xffffffff
     4d4:	ffffffff 	.word	0xffffffff
     4d8:	ffffffff 	.word	0xffffffff
     4dc:	ffffffff 	.word	0xffffffff
     4e0:	ffffffff 	.word	0xffffffff
     4e4:	ffffffff 	.word	0xffffffff
     4e8:	ffffffff 	.word	0xffffffff
     4ec:	ffffffff 	.word	0xffffffff
     4f0:	ffffffff 	.word	0xffffffff
     4f4:	ffffffff 	.word	0xffffffff
     4f8:	ffffffff 	.word	0xffffffff
     4fc:	ffffffff 	.word	0xffffffff
     500:	ffffffff 	.word	0xffffffff
     504:	ffffffff 	.word	0xffffffff
     508:	ffffffff 	.word	0xffffffff
     50c:	ffffffff 	.word	0xffffffff
     510:	ffffffff 	.word	0xffffffff
     514:	ffffffff 	.word	0xffffffff
     518:	ffffffff 	.word	0xffffffff
     51c:	ffffffff 	.word	0xffffffff
     520:	ffffffff 	.word	0xffffffff
     524:	ffffffff 	.word	0xffffffff
     528:	ffffffff 	.word	0xffffffff
     52c:	ffffffff 	.word	0xffffffff
     530:	ffffffff 	.word	0xffffffff
     534:	ffffffff 	.word	0xffffffff
     538:	ffffffff 	.word	0xffffffff
     53c:	ffffffff 	.word	0xffffffff
     540:	ffffffff 	.word	0xffffffff
     544:	ffffffff 	.word	0xffffffff
     548:	ffffffff 	.word	0xffffffff
     54c:	ffffffff 	.word	0xffffffff
     550:	ffffffff 	.word	0xffffffff
     554:	ffffffff 	.word	0xffffffff
     558:	ffffffff 	.word	0xffffffff
     55c:	ffffffff 	.word	0xffffffff
     560:	ffffffff 	.word	0xffffffff
     564:	ffffffff 	.word	0xffffffff
     568:	ffffffff 	.word	0xffffffff
     56c:	ffffffff 	.word	0xffffffff
     570:	ffffffff 	.word	0xffffffff
     574:	ffffffff 	.word	0xffffffff
     578:	ffffffff 	.word	0xffffffff
     57c:	ffffffff 	.word	0xffffffff
     580:	ffffffff 	.word	0xffffffff
     584:	ffffffff 	.word	0xffffffff
     588:	ffffffff 	.word	0xffffffff
     58c:	ffffffff 	.word	0xffffffff
     590:	ffffffff 	.word	0xffffffff
     594:	ffffffff 	.word	0xffffffff
     598:	ffffffff 	.word	0xffffffff
     59c:	ffffffff 	.word	0xffffffff
     5a0:	ffffffff 	.word	0xffffffff
     5a4:	ffffffff 	.word	0xffffffff
     5a8:	ffffffff 	.word	0xffffffff
     5ac:	ffffffff 	.word	0xffffffff
     5b0:	ffffffff 	.word	0xffffffff
     5b4:	ffffffff 	.word	0xffffffff
     5b8:	ffffffff 	.word	0xffffffff
     5bc:	ffffffff 	.word	0xffffffff
     5c0:	ffffffff 	.word	0xffffffff
     5c4:	ffffffff 	.word	0xffffffff
     5c8:	ffffffff 	.word	0xffffffff
     5cc:	ffffffff 	.word	0xffffffff
     5d0:	ffffffff 	.word	0xffffffff
     5d4:	ffffffff 	.word	0xffffffff
     5d8:	ffffffff 	.word	0xffffffff
     5dc:	ffffffff 	.word	0xffffffff
     5e0:	ffffffff 	.word	0xffffffff
     5e4:	ffffffff 	.word	0xffffffff
     5e8:	ffffffff 	.word	0xffffffff
     5ec:	ffffffff 	.word	0xffffffff
     5f0:	ffffffff 	.word	0xffffffff
     5f4:	ffffffff 	.word	0xffffffff
     5f8:	ffffffff 	.word	0xffffffff
     5fc:	ffffffff 	.word	0xffffffff
     600:	ffffffff 	.word	0xffffffff
     604:	ffffffff 	.word	0xffffffff
     608:	ffffffff 	.word	0xffffffff
     60c:	ffffffff 	.word	0xffffffff
     610:	ffffffff 	.word	0xffffffff
     614:	ffffffff 	.word	0xffffffff
     618:	ffffffff 	.word	0xffffffff
     61c:	ffffffff 	.word	0xffffffff
     620:	ffffffff 	.word	0xffffffff
     624:	ffffffff 	.word	0xffffffff
     628:	ffffffff 	.word	0xffffffff
     62c:	ffffffff 	.word	0xffffffff
     630:	ffffffff 	.word	0xffffffff
     634:	ffffffff 	.word	0xffffffff
     638:	ffffffff 	.word	0xffffffff
     63c:	ffffffff 	.word	0xffffffff
     640:	ffffffff 	.word	0xffffffff
     644:	ffffffff 	.word	0xffffffff
     648:	ffffffff 	.word	0xffffffff
     64c:	ffffffff 	.word	0xffffffff
     650:	ffffffff 	.word	0xffffffff
     654:	ffffffff 	.word	0xffffffff
     658:	ffffffff 	.word	0xffffffff
     65c:	ffffffff 	.word	0xffffffff
     660:	ffffffff 	.word	0xffffffff
     664:	ffffffff 	.word	0xffffffff
     668:	ffffffff 	.word	0xffffffff
     66c:	ffffffff 	.word	0xffffffff
     670:	ffffffff 	.word	0xffffffff
     674:	ffffffff 	.word	0xffffffff
     678:	ffffffff 	.word	0xffffffff
     67c:	ffffffff 	.word	0xffffffff
     680:	ffffffff 	.word	0xffffffff
     684:	ffffffff 	.word	0xffffffff
     688:	ffffffff 	.word	0xffffffff
     68c:	ffffffff 	.word	0xffffffff
     690:	ffffffff 	.word	0xffffffff
     694:	ffffffff 	.word	0xffffffff
     698:	ffffffff 	.word	0xffffffff
     69c:	ffffffff 	.word	0xffffffff
     6a0:	ffffffff 	.word	0xffffffff
     6a4:	ffffffff 	.word	0xffffffff
     6a8:	ffffffff 	.word	0xffffffff
     6ac:	ffffffff 	.word	0xffffffff
     6b0:	ffffffff 	.word	0xffffffff
     6b4:	ffffffff 	.word	0xffffffff
     6b8:	ffffffff 	.word	0xffffffff
     6bc:	ffffffff 	.word	0xffffffff
     6c0:	ffffffff 	.word	0xffffffff
     6c4:	ffffffff 	.word	0xffffffff
     6c8:	ffffffff 	.word	0xffffffff
     6cc:	ffffffff 	.word	0xffffffff
     6d0:	ffffffff 	.word	0xffffffff
     6d4:	ffffffff 	.word	0xffffffff
     6d8:	ffffffff 	.word	0xffffffff
     6dc:	ffffffff 	.word	0xffffffff
     6e0:	ffffffff 	.word	0xffffffff
     6e4:	ffffffff 	.word	0xffffffff
     6e8:	ffffffff 	.word	0xffffffff
     6ec:	ffffffff 	.word	0xffffffff
     6f0:	ffffffff 	.word	0xffffffff
     6f4:	ffffffff 	.word	0xffffffff
     6f8:	ffffffff 	.word	0xffffffff
     6fc:	ffffffff 	.word	0xffffffff
     700:	ffffffff 	.word	0xffffffff
     704:	ffffffff 	.word	0xffffffff
     708:	ffffffff 	.word	0xffffffff
     70c:	ffffffff 	.word	0xffffffff
     710:	ffffffff 	.word	0xffffffff
     714:	ffffffff 	.word	0xffffffff
     718:	ffffffff 	.word	0xffffffff
     71c:	ffffffff 	.word	0xffffffff
     720:	ffffffff 	.word	0xffffffff
     724:	ffffffff 	.word	0xffffffff
     728:	ffffffff 	.word	0xffffffff
     72c:	ffffffff 	.word	0xffffffff
     730:	ffffffff 	.word	0xffffffff
     734:	ffffffff 	.word	0xffffffff
     738:	ffffffff 	.word	0xffffffff
     73c:	ffffffff 	.word	0xffffffff
     740:	ffffffff 	.word	0xffffffff
     744:	ffffffff 	.word	0xffffffff
     748:	ffffffff 	.word	0xffffffff
     74c:	ffffffff 	.word	0xffffffff
     750:	ffffffff 	.word	0xffffffff
     754:	ffffffff 	.word	0xffffffff
     758:	ffffffff 	.word	0xffffffff
     75c:	ffffffff 	.word	0xffffffff
     760:	ffffffff 	.word	0xffffffff
     764:	ffffffff 	.word	0xffffffff
     768:	ffffffff 	.word	0xffffffff
     76c:	ffffffff 	.word	0xffffffff
     770:	ffffffff 	.word	0xffffffff
     774:	ffffffff 	.word	0xffffffff
     778:	ffffffff 	.word	0xffffffff
     77c:	ffffffff 	.word	0xffffffff
     780:	ffffffff 	.word	0xffffffff
     784:	ffffffff 	.word	0xffffffff
     788:	ffffffff 	.word	0xffffffff
     78c:	ffffffff 	.word	0xffffffff
     790:	ffffffff 	.word	0xffffffff
     794:	ffffffff 	.word	0xffffffff
     798:	ffffffff 	.word	0xffffffff
     79c:	ffffffff 	.word	0xffffffff
     7a0:	ffffffff 	.word	0xffffffff
     7a4:	ffffffff 	.word	0xffffffff
     7a8:	ffffffff 	.word	0xffffffff
     7ac:	ffffffff 	.word	0xffffffff
     7b0:	ffffffff 	.word	0xffffffff
     7b4:	ffffffff 	.word	0xffffffff
     7b8:	ffffffff 	.word	0xffffffff
     7bc:	ffffffff 	.word	0xffffffff
     7c0:	ffffffff 	.word	0xffffffff
     7c4:	ffffffff 	.word	0xffffffff
     7c8:	ffffffff 	.word	0xffffffff
     7cc:	ffffffff 	.word	0xffffffff
     7d0:	ffffffff 	.word	0xffffffff
     7d4:	ffffffff 	.word	0xffffffff
     7d8:	ffffffff 	.word	0xffffffff
     7dc:	ffffffff 	.word	0xffffffff
     7e0:	ffffffff 	.word	0xffffffff
     7e4:	ffffffff 	.word	0xffffffff
     7e8:	ffffffff 	.word	0xffffffff
     7ec:	ffffffff 	.word	0xffffffff
     7f0:	ffffffff 	.word	0xffffffff
     7f4:	ffffffff 	.word	0xffffffff
     7f8:	ffffffff 	.word	0xffffffff
     7fc:	ffffffff 	.word	0xffffffff
     800:	ffffffff 	.word	0xffffffff
     804:	ffffffff 	.word	0xffffffff
     808:	ffffffff 	.word	0xffffffff
     80c:	ffffffff 	.word	0xffffffff
     810:	ffffffff 	.word	0xffffffff
     814:	ffffffff 	.word	0xffffffff
     818:	ffffffff 	.word	0xffffffff
     81c:	ffffffff 	.word	0xffffffff
     820:	ffffffff 	.word	0xffffffff
     824:	ffffffff 	.word	0xffffffff
     828:	ffffffff 	.word	0xffffffff
     82c:	ffffffff 	.word	0xffffffff
     830:	ffffffff 	.word	0xffffffff
     834:	ffffffff 	.word	0xffffffff
     838:	ffffffff 	.word	0xffffffff
     83c:	ffffffff 	.word	0xffffffff
     840:	ffffffff 	.word	0xffffffff
     844:	ffffffff 	.word	0xffffffff
     848:	ffffffff 	.word	0xffffffff
     84c:	ffffffff 	.word	0xffffffff
     850:	ffffffff 	.word	0xffffffff
     854:	ffffffff 	.word	0xffffffff
     858:	ffffffff 	.word	0xffffffff
     85c:	ffffffff 	.word	0xffffffff
     860:	ffffffff 	.word	0xffffffff
     864:	ffffffff 	.word	0xffffffff
     868:	ffffffff 	.word	0xffffffff
     86c:	ffffffff 	.word	0xffffffff
     870:	ffffffff 	.word	0xffffffff
     874:	ffffffff 	.word	0xffffffff
     878:	ffffffff 	.word	0xffffffff
     87c:	ffffffff 	.word	0xffffffff
     880:	ffffffff 	.word	0xffffffff
     884:	ffffffff 	.word	0xffffffff
     888:	ffffffff 	.word	0xffffffff
     88c:	ffffffff 	.word	0xffffffff
     890:	ffffffff 	.word	0xffffffff
     894:	ffffffff 	.word	0xffffffff
     898:	ffffffff 	.word	0xffffffff
     89c:	ffffffff 	.word	0xffffffff
     8a0:	ffffffff 	.word	0xffffffff
     8a4:	ffffffff 	.word	0xffffffff
     8a8:	ffffffff 	.word	0xffffffff
     8ac:	ffffffff 	.word	0xffffffff
     8b0:	ffffffff 	.word	0xffffffff
     8b4:	ffffffff 	.word	0xffffffff
     8b8:	ffffffff 	.word	0xffffffff
     8bc:	ffffffff 	.word	0xffffffff
     8c0:	ffffffff 	.word	0xffffffff
     8c4:	ffffffff 	.word	0xffffffff
     8c8:	ffffffff 	.word	0xffffffff
     8cc:	ffffffff 	.word	0xffffffff
     8d0:	ffffffff 	.word	0xffffffff
     8d4:	ffffffff 	.word	0xffffffff
     8d8:	ffffffff 	.word	0xffffffff
     8dc:	ffffffff 	.word	0xffffffff
     8e0:	ffffffff 	.word	0xffffffff
     8e4:	ffffffff 	.word	0xffffffff
     8e8:	ffffffff 	.word	0xffffffff
     8ec:	ffffffff 	.word	0xffffffff
     8f0:	ffffffff 	.word	0xffffffff
     8f4:	ffffffff 	.word	0xffffffff
     8f8:	ffffffff 	.word	0xffffffff
     8fc:	ffffffff 	.word	0xffffffff
     900:	ffffffff 	.word	0xffffffff
     904:	ffffffff 	.word	0xffffffff
     908:	ffffffff 	.word	0xffffffff
     90c:	ffffffff 	.word	0xffffffff
     910:	ffffffff 	.word	0xffffffff
     914:	ffffffff 	.word	0xffffffff
     918:	ffffffff 	.word	0xffffffff
     91c:	ffffffff 	.word	0xffffffff
     920:	ffffffff 	.word	0xffffffff
     924:	ffffffff 	.word	0xffffffff
     928:	ffffffff 	.word	0xffffffff
     92c:	ffffffff 	.word	0xffffffff
     930:	ffffffff 	.word	0xffffffff
     934:	ffffffff 	.word	0xffffffff
     938:	ffffffff 	.word	0xffffffff
     93c:	ffffffff 	.word	0xffffffff
     940:	ffffffff 	.word	0xffffffff
     944:	ffffffff 	.word	0xffffffff
     948:	ffffffff 	.word	0xffffffff
     94c:	ffffffff 	.word	0xffffffff
     950:	ffffffff 	.word	0xffffffff
     954:	ffffffff 	.word	0xffffffff
     958:	ffffffff 	.word	0xffffffff
     95c:	ffffffff 	.word	0xffffffff
     960:	ffffffff 	.word	0xffffffff
     964:	ffffffff 	.word	0xffffffff
     968:	ffffffff 	.word	0xffffffff
     96c:	ffffffff 	.word	0xffffffff
     970:	ffffffff 	.word	0xffffffff
     974:	ffffffff 	.word	0xffffffff
     978:	ffffffff 	.word	0xffffffff
     97c:	ffffffff 	.word	0xffffffff
     980:	ffffffff 	.word	0xffffffff
     984:	ffffffff 	.word	0xffffffff
     988:	ffffffff 	.word	0xffffffff
     98c:	ffffffff 	.word	0xffffffff
     990:	ffffffff 	.word	0xffffffff
     994:	ffffffff 	.word	0xffffffff
     998:	ffffffff 	.word	0xffffffff
     99c:	ffffffff 	.word	0xffffffff
     9a0:	ffffffff 	.word	0xffffffff
     9a4:	ffffffff 	.word	0xffffffff
     9a8:	ffffffff 	.word	0xffffffff
     9ac:	ffffffff 	.word	0xffffffff
     9b0:	ffffffff 	.word	0xffffffff
     9b4:	ffffffff 	.word	0xffffffff
     9b8:	ffffffff 	.word	0xffffffff
     9bc:	ffffffff 	.word	0xffffffff
     9c0:	ffffffff 	.word	0xffffffff
     9c4:	ffffffff 	.word	0xffffffff
     9c8:	ffffffff 	.word	0xffffffff
     9cc:	ffffffff 	.word	0xffffffff
     9d0:	ffffffff 	.word	0xffffffff
     9d4:	ffffffff 	.word	0xffffffff
     9d8:	ffffffff 	.word	0xffffffff
     9dc:	ffffffff 	.word	0xffffffff
     9e0:	ffffffff 	.word	0xffffffff
     9e4:	ffffffff 	.word	0xffffffff
     9e8:	ffffffff 	.word	0xffffffff
     9ec:	ffffffff 	.word	0xffffffff
     9f0:	ffffffff 	.word	0xffffffff
     9f4:	ffffffff 	.word	0xffffffff
     9f8:	ffffffff 	.word	0xffffffff
     9fc:	ffffffff 	.word	0xffffffff
     a00:	ffffffff 	.word	0xffffffff
     a04:	ffffffff 	.word	0xffffffff
     a08:	ffffffff 	.word	0xffffffff
     a0c:	ffffffff 	.word	0xffffffff
     a10:	ffffffff 	.word	0xffffffff
     a14:	ffffffff 	.word	0xffffffff
     a18:	ffffffff 	.word	0xffffffff
     a1c:	ffffffff 	.word	0xffffffff
     a20:	ffffffff 	.word	0xffffffff
     a24:	ffffffff 	.word	0xffffffff
     a28:	ffffffff 	.word	0xffffffff
     a2c:	ffffffff 	.word	0xffffffff
     a30:	ffffffff 	.word	0xffffffff
     a34:	ffffffff 	.word	0xffffffff
     a38:	ffffffff 	.word	0xffffffff
     a3c:	ffffffff 	.word	0xffffffff
     a40:	ffffffff 	.word	0xffffffff
     a44:	ffffffff 	.word	0xffffffff
     a48:	ffffffff 	.word	0xffffffff
     a4c:	ffffffff 	.word	0xffffffff
     a50:	ffffffff 	.word	0xffffffff
     a54:	ffffffff 	.word	0xffffffff
     a58:	ffffffff 	.word	0xffffffff
     a5c:	ffffffff 	.word	0xffffffff
     a60:	ffffffff 	.word	0xffffffff
     a64:	ffffffff 	.word	0xffffffff
     a68:	ffffffff 	.word	0xffffffff
     a6c:	ffffffff 	.word	0xffffffff
     a70:	ffffffff 	.word	0xffffffff
     a74:	ffffffff 	.word	0xffffffff
     a78:	ffffffff 	.word	0xffffffff
     a7c:	ffffffff 	.word	0xffffffff
     a80:	ffffffff 	.word	0xffffffff
     a84:	ffffffff 	.word	0xffffffff
     a88:	ffffffff 	.word	0xffffffff
     a8c:	ffffffff 	.word	0xffffffff
     a90:	ffffffff 	.word	0xffffffff
     a94:	ffffffff 	.word	0xffffffff
     a98:	ffffffff 	.word	0xffffffff
     a9c:	ffffffff 	.word	0xffffffff
     aa0:	ffffffff 	.word	0xffffffff
     aa4:	ffffffff 	.word	0xffffffff
     aa8:	ffffffff 	.word	0xffffffff
     aac:	ffffffff 	.word	0xffffffff
     ab0:	ffffffff 	.word	0xffffffff
     ab4:	ffffffff 	.word	0xffffffff
     ab8:	ffffffff 	.word	0xffffffff
     abc:	ffffffff 	.word	0xffffffff
     ac0:	ffffffff 	.word	0xffffffff
     ac4:	ffffffff 	.word	0xffffffff
     ac8:	ffffffff 	.word	0xffffffff
     acc:	ffffffff 	.word	0xffffffff
     ad0:	ffffffff 	.word	0xffffffff
     ad4:	ffffffff 	.word	0xffffffff
     ad8:	ffffffff 	.word	0xffffffff
     adc:	ffffffff 	.word	0xffffffff
     ae0:	ffffffff 	.word	0xffffffff
     ae4:	ffffffff 	.word	0xffffffff
     ae8:	ffffffff 	.word	0xffffffff
     aec:	ffffffff 	.word	0xffffffff
     af0:	ffffffff 	.word	0xffffffff
     af4:	ffffffff 	.word	0xffffffff
     af8:	ffffffff 	.word	0xffffffff
     afc:	ffffffff 	.word	0xffffffff
     b00:	ffffffff 	.word	0xffffffff
     b04:	ffffffff 	.word	0xffffffff
     b08:	ffffffff 	.word	0xffffffff
     b0c:	ffffffff 	.word	0xffffffff
     b10:	ffffffff 	.word	0xffffffff
     b14:	ffffffff 	.word	0xffffffff
     b18:	ffffffff 	.word	0xffffffff
     b1c:	ffffffff 	.word	0xffffffff
     b20:	ffffffff 	.word	0xffffffff
     b24:	ffffffff 	.word	0xffffffff
     b28:	ffffffff 	.word	0xffffffff
     b2c:	ffffffff 	.word	0xffffffff
     b30:	ffffffff 	.word	0xffffffff
     b34:	ffffffff 	.word	0xffffffff
     b38:	ffffffff 	.word	0xffffffff
     b3c:	ffffffff 	.word	0xffffffff
     b40:	ffffffff 	.word	0xffffffff
     b44:	ffffffff 	.word	0xffffffff
     b48:	ffffffff 	.word	0xffffffff
     b4c:	ffffffff 	.word	0xffffffff
     b50:	ffffffff 	.word	0xffffffff
     b54:	ffffffff 	.word	0xffffffff
     b58:	ffffffff 	.word	0xffffffff
     b5c:	ffffffff 	.word	0xffffffff
     b60:	ffffffff 	.word	0xffffffff
     b64:	ffffffff 	.word	0xffffffff
     b68:	ffffffff 	.word	0xffffffff
     b6c:	ffffffff 	.word	0xffffffff
     b70:	ffffffff 	.word	0xffffffff
     b74:	ffffffff 	.word	0xffffffff
     b78:	ffffffff 	.word	0xffffffff
     b7c:	ffffffff 	.word	0xffffffff
     b80:	ffffffff 	.word	0xffffffff
     b84:	ffffffff 	.word	0xffffffff
     b88:	ffffffff 	.word	0xffffffff
     b8c:	ffffffff 	.word	0xffffffff
     b90:	ffffffff 	.word	0xffffffff
     b94:	ffffffff 	.word	0xffffffff
     b98:	ffffffff 	.word	0xffffffff
     b9c:	ffffffff 	.word	0xffffffff
     ba0:	ffffffff 	.word	0xffffffff
     ba4:	ffffffff 	.word	0xffffffff
     ba8:	ffffffff 	.word	0xffffffff
     bac:	ffffffff 	.word	0xffffffff
     bb0:	ffffffff 	.word	0xffffffff
     bb4:	ffffffff 	.word	0xffffffff
     bb8:	ffffffff 	.word	0xffffffff
     bbc:	ffffffff 	.word	0xffffffff
     bc0:	ffffffff 	.word	0xffffffff
     bc4:	ffffffff 	.word	0xffffffff
     bc8:	ffffffff 	.word	0xffffffff
     bcc:	ffffffff 	.word	0xffffffff
     bd0:	ffffffff 	.word	0xffffffff
     bd4:	ffffffff 	.word	0xffffffff
     bd8:	ffffffff 	.word	0xffffffff
     bdc:	ffffffff 	.word	0xffffffff
     be0:	ffffffff 	.word	0xffffffff
     be4:	ffffffff 	.word	0xffffffff
     be8:	ffffffff 	.word	0xffffffff
     bec:	ffffffff 	.word	0xffffffff
     bf0:	ffffffff 	.word	0xffffffff
     bf4:	ffffffff 	.word	0xffffffff
     bf8:	ffffffff 	.word	0xffffffff
     bfc:	ffffffff 	.word	0xffffffff
     c00:	ffffffff 	.word	0xffffffff
     c04:	ffffffff 	.word	0xffffffff
     c08:	ffffffff 	.word	0xffffffff
     c0c:	ffffffff 	.word	0xffffffff
     c10:	ffffffff 	.word	0xffffffff
     c14:	ffffffff 	.word	0xffffffff
     c18:	ffffffff 	.word	0xffffffff
     c1c:	ffffffff 	.word	0xffffffff
     c20:	ffffffff 	.word	0xffffffff
     c24:	ffffffff 	.word	0xffffffff
     c28:	ffffffff 	.word	0xffffffff
     c2c:	ffffffff 	.word	0xffffffff
     c30:	ffffffff 	.word	0xffffffff
     c34:	ffffffff 	.word	0xffffffff
     c38:	ffffffff 	.word	0xffffffff
     c3c:	ffffffff 	.word	0xffffffff
     c40:	ffffffff 	.word	0xffffffff
     c44:	ffffffff 	.word	0xffffffff
     c48:	ffffffff 	.word	0xffffffff
     c4c:	ffffffff 	.word	0xffffffff
     c50:	ffffffff 	.word	0xffffffff
     c54:	ffffffff 	.word	0xffffffff
     c58:	ffffffff 	.word	0xffffffff
     c5c:	ffffffff 	.word	0xffffffff
     c60:	ffffffff 	.word	0xffffffff
     c64:	ffffffff 	.word	0xffffffff
     c68:	ffffffff 	.word	0xffffffff
     c6c:	ffffffff 	.word	0xffffffff
     c70:	ffffffff 	.word	0xffffffff
     c74:	ffffffff 	.word	0xffffffff
     c78:	ffffffff 	.word	0xffffffff
     c7c:	ffffffff 	.word	0xffffffff
     c80:	ffffffff 	.word	0xffffffff
     c84:	ffffffff 	.word	0xffffffff
     c88:	ffffffff 	.word	0xffffffff
     c8c:	ffffffff 	.word	0xffffffff
     c90:	ffffffff 	.word	0xffffffff
     c94:	ffffffff 	.word	0xffffffff
     c98:	ffffffff 	.word	0xffffffff
     c9c:	ffffffff 	.word	0xffffffff
     ca0:	ffffffff 	.word	0xffffffff
     ca4:	ffffffff 	.word	0xffffffff
     ca8:	ffffffff 	.word	0xffffffff
     cac:	ffffffff 	.word	0xffffffff
     cb0:	ffffffff 	.word	0xffffffff
     cb4:	ffffffff 	.word	0xffffffff
     cb8:	ffffffff 	.word	0xffffffff
     cbc:	ffffffff 	.word	0xffffffff
     cc0:	ffffffff 	.word	0xffffffff
     cc4:	ffffffff 	.word	0xffffffff
     cc8:	ffffffff 	.word	0xffffffff
     ccc:	ffffffff 	.word	0xffffffff
     cd0:	ffffffff 	.word	0xffffffff
     cd4:	ffffffff 	.word	0xffffffff
     cd8:	ffffffff 	.word	0xffffffff
     cdc:	ffffffff 	.word	0xffffffff
     ce0:	ffffffff 	.word	0xffffffff
     ce4:	ffffffff 	.word	0xffffffff
     ce8:	ffffffff 	.word	0xffffffff
     cec:	ffffffff 	.word	0xffffffff
     cf0:	ffffffff 	.word	0xffffffff
     cf4:	ffffffff 	.word	0xffffffff
     cf8:	ffffffff 	.word	0xffffffff
     cfc:	ffffffff 	.word	0xffffffff
     d00:	ffffffff 	.word	0xffffffff
     d04:	ffffffff 	.word	0xffffffff
     d08:	ffffffff 	.word	0xffffffff
     d0c:	ffffffff 	.word	0xffffffff
     d10:	ffffffff 	.word	0xffffffff
     d14:	ffffffff 	.word	0xffffffff
     d18:	ffffffff 	.word	0xffffffff
     d1c:	ffffffff 	.word	0xffffffff
     d20:	ffffffff 	.word	0xffffffff
     d24:	ffffffff 	.word	0xffffffff
     d28:	ffffffff 	.word	0xffffffff
     d2c:	ffffffff 	.word	0xffffffff
     d30:	ffffffff 	.word	0xffffffff
     d34:	ffffffff 	.word	0xffffffff
     d38:	ffffffff 	.word	0xffffffff
     d3c:	ffffffff 	.word	0xffffffff
     d40:	ffffffff 	.word	0xffffffff
     d44:	ffffffff 	.word	0xffffffff
     d48:	ffffffff 	.word	0xffffffff
     d4c:	ffffffff 	.word	0xffffffff
     d50:	ffffffff 	.word	0xffffffff
     d54:	ffffffff 	.word	0xffffffff
     d58:	ffffffff 	.word	0xffffffff
     d5c:	ffffffff 	.word	0xffffffff
     d60:	ffffffff 	.word	0xffffffff
     d64:	ffffffff 	.word	0xffffffff
     d68:	ffffffff 	.word	0xffffffff
     d6c:	ffffffff 	.word	0xffffffff
     d70:	ffffffff 	.word	0xffffffff
     d74:	ffffffff 	.word	0xffffffff
     d78:	ffffffff 	.word	0xffffffff
     d7c:	ffffffff 	.word	0xffffffff
     d80:	ffffffff 	.word	0xffffffff
     d84:	ffffffff 	.word	0xffffffff
     d88:	ffffffff 	.word	0xffffffff
     d8c:	ffffffff 	.word	0xffffffff
     d90:	ffffffff 	.word	0xffffffff
     d94:	ffffffff 	.word	0xffffffff
     d98:	ffffffff 	.word	0xffffffff
     d9c:	ffffffff 	.word	0xffffffff
     da0:	ffffffff 	.word	0xffffffff
     da4:	ffffffff 	.word	0xffffffff
     da8:	ffffffff 	.word	0xffffffff
     dac:	ffffffff 	.word	0xffffffff
     db0:	ffffffff 	.word	0xffffffff
     db4:	ffffffff 	.word	0xffffffff
     db8:	ffffffff 	.word	0xffffffff
     dbc:	ffffffff 	.word	0xffffffff
     dc0:	ffffffff 	.word	0xffffffff
     dc4:	ffffffff 	.word	0xffffffff
     dc8:	ffffffff 	.word	0xffffffff
     dcc:	ffffffff 	.word	0xffffffff
     dd0:	ffffffff 	.word	0xffffffff
     dd4:	ffffffff 	.word	0xffffffff
     dd8:	ffffffff 	.word	0xffffffff
     ddc:	ffffffff 	.word	0xffffffff
     de0:	ffffffff 	.word	0xffffffff
     de4:	ffffffff 	.word	0xffffffff
     de8:	ffffffff 	.word	0xffffffff
     dec:	ffffffff 	.word	0xffffffff
     df0:	ffffffff 	.word	0xffffffff
     df4:	ffffffff 	.word	0xffffffff
     df8:	ffffffff 	.word	0xffffffff
     dfc:	ffffffff 	.word	0xffffffff
     e00:	ffffffff 	.word	0xffffffff
     e04:	ffffffff 	.word	0xffffffff
     e08:	ffffffff 	.word	0xffffffff
     e0c:	ffffffff 	.word	0xffffffff
     e10:	ffffffff 	.word	0xffffffff
     e14:	ffffffff 	.word	0xffffffff
     e18:	ffffffff 	.word	0xffffffff
     e1c:	ffffffff 	.word	0xffffffff
     e20:	ffffffff 	.word	0xffffffff
     e24:	ffffffff 	.word	0xffffffff
     e28:	ffffffff 	.word	0xffffffff
     e2c:	ffffffff 	.word	0xffffffff
     e30:	ffffffff 	.word	0xffffffff
     e34:	ffffffff 	.word	0xffffffff
     e38:	ffffffff 	.word	0xffffffff
     e3c:	ffffffff 	.word	0xffffffff
     e40:	ffffffff 	.word	0xffffffff
     e44:	ffffffff 	.word	0xffffffff
     e48:	ffffffff 	.word	0xffffffff
     e4c:	ffffffff 	.word	0xffffffff
     e50:	ffffffff 	.word	0xffffffff
     e54:	ffffffff 	.word	0xffffffff
     e58:	ffffffff 	.word	0xffffffff
     e5c:	ffffffff 	.word	0xffffffff
     e60:	ffffffff 	.word	0xffffffff
     e64:	ffffffff 	.word	0xffffffff
     e68:	ffffffff 	.word	0xffffffff
     e6c:	ffffffff 	.word	0xffffffff
     e70:	ffffffff 	.word	0xffffffff
     e74:	ffffffff 	.word	0xffffffff
     e78:	ffffffff 	.word	0xffffffff
     e7c:	ffffffff 	.word	0xffffffff
     e80:	ffffffff 	.word	0xffffffff
     e84:	ffffffff 	.word	0xffffffff
     e88:	ffffffff 	.word	0xffffffff
     e8c:	ffffffff 	.word	0xffffffff
     e90:	ffffffff 	.word	0xffffffff
     e94:	ffffffff 	.word	0xffffffff
     e98:	ffffffff 	.word	0xffffffff
     e9c:	ffffffff 	.word	0xffffffff
     ea0:	ffffffff 	.word	0xffffffff
     ea4:	ffffffff 	.word	0xffffffff
     ea8:	ffffffff 	.word	0xffffffff
     eac:	ffffffff 	.word	0xffffffff
     eb0:	ffffffff 	.word	0xffffffff
     eb4:	ffffffff 	.word	0xffffffff
     eb8:	ffffffff 	.word	0xffffffff
     ebc:	ffffffff 	.word	0xffffffff
     ec0:	ffffffff 	.word	0xffffffff
     ec4:	ffffffff 	.word	0xffffffff
     ec8:	ffffffff 	.word	0xffffffff
     ecc:	ffffffff 	.word	0xffffffff
     ed0:	ffffffff 	.word	0xffffffff
     ed4:	ffffffff 	.word	0xffffffff
     ed8:	ffffffff 	.word	0xffffffff
     edc:	ffffffff 	.word	0xffffffff
     ee0:	ffffffff 	.word	0xffffffff
     ee4:	ffffffff 	.word	0xffffffff
     ee8:	ffffffff 	.word	0xffffffff
     eec:	ffffffff 	.word	0xffffffff
     ef0:	ffffffff 	.word	0xffffffff
     ef4:	ffffffff 	.word	0xffffffff
     ef8:	ffffffff 	.word	0xffffffff
     efc:	ffffffff 	.word	0xffffffff
     f00:	ffffffff 	.word	0xffffffff
     f04:	ffffffff 	.word	0xffffffff
     f08:	ffffffff 	.word	0xffffffff
     f0c:	ffffffff 	.word	0xffffffff
     f10:	ffffffff 	.word	0xffffffff
     f14:	ffffffff 	.word	0xffffffff
     f18:	ffffffff 	.word	0xffffffff
     f1c:	ffffffff 	.word	0xffffffff
     f20:	ffffffff 	.word	0xffffffff
     f24:	ffffffff 	.word	0xffffffff
     f28:	ffffffff 	.word	0xffffffff
     f2c:	ffffffff 	.word	0xffffffff
     f30:	ffffffff 	.word	0xffffffff
     f34:	ffffffff 	.word	0xffffffff
     f38:	ffffffff 	.word	0xffffffff
     f3c:	ffffffff 	.word	0xffffffff
     f40:	ffffffff 	.word	0xffffffff
     f44:	ffffffff 	.word	0xffffffff
     f48:	ffffffff 	.word	0xffffffff
     f4c:	ffffffff 	.word	0xffffffff
     f50:	ffffffff 	.word	0xffffffff
     f54:	ffffffff 	.word	0xffffffff
     f58:	ffffffff 	.word	0xffffffff
     f5c:	ffffffff 	.word	0xffffffff
     f60:	ffffffff 	.word	0xffffffff
     f64:	ffffffff 	.word	0xffffffff
     f68:	ffffffff 	.word	0xffffffff
     f6c:	ffffffff 	.word	0xffffffff
     f70:	ffffffff 	.word	0xffffffff
     f74:	ffffffff 	.word	0xffffffff
     f78:	ffffffff 	.word	0xffffffff
     f7c:	ffffffff 	.word	0xffffffff
     f80:	ffffffff 	.word	0xffffffff
     f84:	ffffffff 	.word	0xffffffff
     f88:	ffffffff 	.word	0xffffffff
     f8c:	ffffffff 	.word	0xffffffff
     f90:	ffffffff 	.word	0xffffffff
     f94:	ffffffff 	.word	0xffffffff
     f98:	ffffffff 	.word	0xffffffff
     f9c:	ffffffff 	.word	0xffffffff
     fa0:	ffffffff 	.word	0xffffffff
     fa4:	ffffffff 	.word	0xffffffff
     fa8:	ffffffff 	.word	0xffffffff
     fac:	ffffffff 	.word	0xffffffff
     fb0:	ffffffff 	.word	0xffffffff
     fb4:	ffffffff 	.word	0xffffffff
     fb8:	ffffffff 	.word	0xffffffff
     fbc:	ffffffff 	.word	0xffffffff
     fc0:	ffffffff 	.word	0xffffffff
     fc4:	ffffffff 	.word	0xffffffff
     fc8:	ffffffff 	.word	0xffffffff
     fcc:	ffffffff 	.word	0xffffffff
     fd0:	ffffffff 	.word	0xffffffff
     fd4:	ffffffff 	.word	0xffffffff
     fd8:	ffffffff 	.word	0xffffffff
     fdc:	ffffffff 	.word	0xffffffff
     fe0:	ffffffff 	.word	0xffffffff
     fe4:	ffffffff 	.word	0xffffffff
     fe8:	ffffffff 	.word	0xffffffff
     fec:	ffffffff 	.word	0xffffffff
     ff0:	ffffffff 	.word	0xffffffff
     ff4:	ffffffff 	.word	0xffffffff
     ff8:	ffffffff 	.word	0xffffffff
     ffc:	ffffffff 	.word	0xffffffff
    1000:	ffffffff 	.word	0xffffffff
    1004:	ffffffff 	.word	0xffffffff
    1008:	ffffffff 	.word	0xffffffff
    100c:	ffffffff 	.word	0xffffffff
    1010:	ffffffff 	.word	0xffffffff
    1014:	ffffffff 	.word	0xffffffff
    1018:	ffffffff 	.word	0xffffffff
    101c:	ffffffff 	.word	0xffffffff
    1020:	ffffffff 	.word	0xffffffff
    1024:	ffffffff 	.word	0xffffffff
    1028:	ffffffff 	.word	0xffffffff
    102c:	ffffffff 	.word	0xffffffff
    1030:	ffffffff 	.word	0xffffffff
    1034:	ffffffff 	.word	0xffffffff
    1038:	ffffffff 	.word	0xffffffff
    103c:	ffffffff 	.word	0xffffffff
    1040:	ffffffff 	.word	0xffffffff
    1044:	ffffffff 	.word	0xffffffff
    1048:	ffffffff 	.word	0xffffffff
    104c:	ffffffff 	.word	0xffffffff
    1050:	ffffffff 	.word	0xffffffff
    1054:	ffffffff 	.word	0xffffffff
    1058:	ffffffff 	.word	0xffffffff
    105c:	ffffffff 	.word	0xffffffff
    1060:	ffffffff 	.word	0xffffffff
    1064:	ffffffff 	.word	0xffffffff
    1068:	ffffffff 	.word	0xffffffff
    106c:	ffffffff 	.word	0xffffffff
    1070:	ffffffff 	.word	0xffffffff
    1074:	ffffffff 	.word	0xffffffff
    1078:	ffffffff 	.word	0xffffffff
    107c:	ffffffff 	.word	0xffffffff
    1080:	ffffffff 	.word	0xffffffff
    1084:	ffffffff 	.word	0xffffffff
    1088:	ffffffff 	.word	0xffffffff
    108c:	ffffffff 	.word	0xffffffff
    1090:	ffffffff 	.word	0xffffffff
    1094:	ffffffff 	.word	0xffffffff
    1098:	ffffffff 	.word	0xffffffff
    109c:	ffffffff 	.word	0xffffffff
    10a0:	ffffffff 	.word	0xffffffff
    10a4:	ffffffff 	.word	0xffffffff
    10a8:	ffffffff 	.word	0xffffffff
    10ac:	ffffffff 	.word	0xffffffff
    10b0:	ffffffff 	.word	0xffffffff
    10b4:	ffffffff 	.word	0xffffffff
    10b8:	ffffffff 	.word	0xffffffff
    10bc:	ffffffff 	.word	0xffffffff
    10c0:	ffffffff 	.word	0xffffffff
    10c4:	ffffffff 	.word	0xffffffff
    10c8:	ffffffff 	.word	0xffffffff
    10cc:	ffffffff 	.word	0xffffffff
    10d0:	ffffffff 	.word	0xffffffff
    10d4:	ffffffff 	.word	0xffffffff
    10d8:	ffffffff 	.word	0xffffffff
    10dc:	ffffffff 	.word	0xffffffff
    10e0:	ffffffff 	.word	0xffffffff
    10e4:	ffffffff 	.word	0xffffffff
    10e8:	ffffffff 	.word	0xffffffff
    10ec:	ffffffff 	.word	0xffffffff
    10f0:	ffffffff 	.word	0xffffffff
    10f4:	ffffffff 	.word	0xffffffff
    10f8:	ffffffff 	.word	0xffffffff
    10fc:	ffffffff 	.word	0xffffffff
    1100:	ffffffff 	.word	0xffffffff
    1104:	ffffffff 	.word	0xffffffff
    1108:	ffffffff 	.word	0xffffffff
    110c:	ffffffff 	.word	0xffffffff
    1110:	ffffffff 	.word	0xffffffff
    1114:	ffffffff 	.word	0xffffffff
    1118:	ffffffff 	.word	0xffffffff
    111c:	ffffffff 	.word	0xffffffff
    1120:	ffffffff 	.word	0xffffffff
    1124:	ffffffff 	.word	0xffffffff
    1128:	ffffffff 	.word	0xffffffff
    112c:	ffffffff 	.word	0xffffffff
    1130:	ffffffff 	.word	0xffffffff
    1134:	ffffffff 	.word	0xffffffff
    1138:	ffffffff 	.word	0xffffffff
    113c:	ffffffff 	.word	0xffffffff
    1140:	ffffffff 	.word	0xffffffff
    1144:	ffffffff 	.word	0xffffffff
    1148:	ffffffff 	.word	0xffffffff
    114c:	ffffffff 	.word	0xffffffff
    1150:	ffffffff 	.word	0xffffffff
    1154:	ffffffff 	.word	0xffffffff
    1158:	ffffffff 	.word	0xffffffff
    115c:	ffffffff 	.word	0xffffffff
    1160:	ffffffff 	.word	0xffffffff
    1164:	ffffffff 	.word	0xffffffff
    1168:	ffffffff 	.word	0xffffffff
    116c:	ffffffff 	.word	0xffffffff
    1170:	ffffffff 	.word	0xffffffff
    1174:	ffffffff 	.word	0xffffffff
    1178:	ffffffff 	.word	0xffffffff
    117c:	ffffffff 	.word	0xffffffff
    1180:	ffffffff 	.word	0xffffffff
    1184:	ffffffff 	.word	0xffffffff
    1188:	ffffffff 	.word	0xffffffff
    118c:	ffffffff 	.word	0xffffffff
    1190:	ffffffff 	.word	0xffffffff
    1194:	ffffffff 	.word	0xffffffff
    1198:	ffffffff 	.word	0xffffffff
    119c:	ffffffff 	.word	0xffffffff
    11a0:	ffffffff 	.word	0xffffffff
    11a4:	ffffffff 	.word	0xffffffff
    11a8:	ffffffff 	.word	0xffffffff
    11ac:	ffffffff 	.word	0xffffffff
    11b0:	ffffffff 	.word	0xffffffff
    11b4:	ffffffff 	.word	0xffffffff
    11b8:	ffffffff 	.word	0xffffffff
    11bc:	ffffffff 	.word	0xffffffff
    11c0:	ffffffff 	.word	0xffffffff
    11c4:	ffffffff 	.word	0xffffffff
    11c8:	ffffffff 	.word	0xffffffff
    11cc:	ffffffff 	.word	0xffffffff
    11d0:	ffffffff 	.word	0xffffffff
    11d4:	ffffffff 	.word	0xffffffff
    11d8:	ffffffff 	.word	0xffffffff
    11dc:	ffffffff 	.word	0xffffffff
    11e0:	ffffffff 	.word	0xffffffff
    11e4:	ffffffff 	.word	0xffffffff
    11e8:	ffffffff 	.word	0xffffffff
    11ec:	ffffffff 	.word	0xffffffff
    11f0:	ffffffff 	.word	0xffffffff
    11f4:	ffffffff 	.word	0xffffffff
    11f8:	ffffffff 	.word	0xffffffff
    11fc:	ffffffff 	.word	0xffffffff
    1200:	ffffffff 	.word	0xffffffff
    1204:	ffffffff 	.word	0xffffffff
    1208:	ffffffff 	.word	0xffffffff
    120c:	ffffffff 	.word	0xffffffff
    1210:	ffffffff 	.word	0xffffffff
    1214:	ffffffff 	.word	0xffffffff
    1218:	ffffffff 	.word	0xffffffff
    121c:	ffffffff 	.word	0xffffffff
    1220:	ffffffff 	.word	0xffffffff
    1224:	ffffffff 	.word	0xffffffff
    1228:	ffffffff 	.word	0xffffffff
    122c:	ffffffff 	.word	0xffffffff
    1230:	ffffffff 	.word	0xffffffff
    1234:	ffffffff 	.word	0xffffffff
    1238:	ffffffff 	.word	0xffffffff
    123c:	ffffffff 	.word	0xffffffff
    1240:	ffffffff 	.word	0xffffffff
    1244:	ffffffff 	.word	0xffffffff
    1248:	ffffffff 	.word	0xffffffff
    124c:	ffffffff 	.word	0xffffffff
    1250:	ffffffff 	.word	0xffffffff
    1254:	ffffffff 	.word	0xffffffff
    1258:	ffffffff 	.word	0xffffffff
    125c:	ffffffff 	.word	0xffffffff
    1260:	ffffffff 	.word	0xffffffff
    1264:	ffffffff 	.word	0xffffffff
    1268:	ffffffff 	.word	0xffffffff
    126c:	ffffffff 	.word	0xffffffff
    1270:	ffffffff 	.word	0xffffffff
    1274:	ffffffff 	.word	0xffffffff
    1278:	ffffffff 	.word	0xffffffff
    127c:	ffffffff 	.word	0xffffffff
    1280:	ffffffff 	.word	0xffffffff
    1284:	ffffffff 	.word	0xffffffff
    1288:	ffffffff 	.word	0xffffffff
    128c:	ffffffff 	.word	0xffffffff
    1290:	ffffffff 	.word	0xffffffff
    1294:	ffffffff 	.word	0xffffffff
    1298:	ffffffff 	.word	0xffffffff
    129c:	ffffffff 	.word	0xffffffff
    12a0:	ffffffff 	.word	0xffffffff
    12a4:	ffffffff 	.word	0xffffffff
    12a8:	ffffffff 	.word	0xffffffff
    12ac:	ffffffff 	.word	0xffffffff
    12b0:	ffffffff 	.word	0xffffffff
    12b4:	ffffffff 	.word	0xffffffff
    12b8:	ffffffff 	.word	0xffffffff
    12bc:	ffffffff 	.word	0xffffffff
    12c0:	ffffffff 	.word	0xffffffff
    12c4:	ffffffff 	.word	0xffffffff
    12c8:	ffffffff 	.word	0xffffffff
    12cc:	ffffffff 	.word	0xffffffff
    12d0:	ffffffff 	.word	0xffffffff
    12d4:	ffffffff 	.word	0xffffffff
    12d8:	ffffffff 	.word	0xffffffff
    12dc:	ffffffff 	.word	0xffffffff
    12e0:	ffffffff 	.word	0xffffffff
    12e4:	ffffffff 	.word	0xffffffff
    12e8:	ffffffff 	.word	0xffffffff
    12ec:	ffffffff 	.word	0xffffffff
    12f0:	ffffffff 	.word	0xffffffff
    12f4:	ffffffff 	.word	0xffffffff
    12f8:	ffffffff 	.word	0xffffffff
    12fc:	ffffffff 	.word	0xffffffff
    1300:	ffffffff 	.word	0xffffffff
    1304:	ffffffff 	.word	0xffffffff
    1308:	ffffffff 	.word	0xffffffff
    130c:	ffffffff 	.word	0xffffffff
    1310:	ffffffff 	.word	0xffffffff
    1314:	ffffffff 	.word	0xffffffff
    1318:	ffffffff 	.word	0xffffffff
    131c:	ffffffff 	.word	0xffffffff
    1320:	ffffffff 	.word	0xffffffff
    1324:	ffffffff 	.word	0xffffffff
    1328:	ffffffff 	.word	0xffffffff
    132c:	ffffffff 	.word	0xffffffff
    1330:	ffffffff 	.word	0xffffffff
    1334:	ffffffff 	.word	0xffffffff
    1338:	ffffffff 	.word	0xffffffff
    133c:	ffffffff 	.word	0xffffffff
    1340:	ffffffff 	.word	0xffffffff
    1344:	ffffffff 	.word	0xffffffff
    1348:	ffffffff 	.word	0xffffffff
    134c:	ffffffff 	.word	0xffffffff
    1350:	ffffffff 	.word	0xffffffff
    1354:	ffffffff 	.word	0xffffffff
    1358:	ffffffff 	.word	0xffffffff
    135c:	ffffffff 	.word	0xffffffff
    1360:	ffffffff 	.word	0xffffffff
    1364:	ffffffff 	.word	0xffffffff
    1368:	ffffffff 	.word	0xffffffff
    136c:	ffffffff 	.word	0xffffffff
    1370:	ffffffff 	.word	0xffffffff
    1374:	ffffffff 	.word	0xffffffff
    1378:	ffffffff 	.word	0xffffffff
    137c:	ffffffff 	.word	0xffffffff
    1380:	ffffffff 	.word	0xffffffff
    1384:	ffffffff 	.word	0xffffffff
    1388:	ffffffff 	.word	0xffffffff
    138c:	ffffffff 	.word	0xffffffff
    1390:	ffffffff 	.word	0xffffffff
    1394:	ffffffff 	.word	0xffffffff
    1398:	ffffffff 	.word	0xffffffff
    139c:	ffffffff 	.word	0xffffffff
    13a0:	ffffffff 	.word	0xffffffff
    13a4:	ffffffff 	.word	0xffffffff
    13a8:	ffffffff 	.word	0xffffffff
    13ac:	ffffffff 	.word	0xffffffff
    13b0:	ffffffff 	.word	0xffffffff
    13b4:	ffffffff 	.word	0xffffffff
    13b8:	ffffffff 	.word	0xffffffff
    13bc:	ffffffff 	.word	0xffffffff
    13c0:	ffffffff 	.word	0xffffffff
    13c4:	ffffffff 	.word	0xffffffff
    13c8:	ffffffff 	.word	0xffffffff
    13cc:	ffffffff 	.word	0xffffffff
    13d0:	ffffffff 	.word	0xffffffff
    13d4:	ffffffff 	.word	0xffffffff
    13d8:	ffffffff 	.word	0xffffffff
    13dc:	ffffffff 	.word	0xffffffff
    13e0:	ffffffff 	.word	0xffffffff
    13e4:	ffffffff 	.word	0xffffffff
    13e8:	ffffffff 	.word	0xffffffff
    13ec:	ffffffff 	.word	0xffffffff
    13f0:	ffffffff 	.word	0xffffffff
    13f4:	ffffffff 	.word	0xffffffff
    13f8:	ffffffff 	.word	0xffffffff
    13fc:	ffffffff 	.word	0xffffffff
    1400:	ffffffff 	.word	0xffffffff
    1404:	ffffffff 	.word	0xffffffff
    1408:	ffffffff 	.word	0xffffffff
    140c:	ffffffff 	.word	0xffffffff
    1410:	ffffffff 	.word	0xffffffff
    1414:	ffffffff 	.word	0xffffffff
    1418:	ffffffff 	.word	0xffffffff
    141c:	ffffffff 	.word	0xffffffff
    1420:	ffffffff 	.word	0xffffffff
    1424:	ffffffff 	.word	0xffffffff
    1428:	ffffffff 	.word	0xffffffff
    142c:	ffffffff 	.word	0xffffffff
    1430:	ffffffff 	.word	0xffffffff
    1434:	ffffffff 	.word	0xffffffff
    1438:	ffffffff 	.word	0xffffffff
    143c:	ffffffff 	.word	0xffffffff
    1440:	ffffffff 	.word	0xffffffff
    1444:	ffffffff 	.word	0xffffffff
    1448:	ffffffff 	.word	0xffffffff
    144c:	ffffffff 	.word	0xffffffff
    1450:	ffffffff 	.word	0xffffffff
    1454:	ffffffff 	.word	0xffffffff
    1458:	ffffffff 	.word	0xffffffff
    145c:	ffffffff 	.word	0xffffffff
    1460:	ffffffff 	.word	0xffffffff
    1464:	ffffffff 	.word	0xffffffff
    1468:	ffffffff 	.word	0xffffffff
    146c:	ffffffff 	.word	0xffffffff
    1470:	ffffffff 	.word	0xffffffff
    1474:	ffffffff 	.word	0xffffffff
    1478:	ffffffff 	.word	0xffffffff
    147c:	ffffffff 	.word	0xffffffff
    1480:	ffffffff 	.word	0xffffffff
    1484:	ffffffff 	.word	0xffffffff
    1488:	ffffffff 	.word	0xffffffff
    148c:	ffffffff 	.word	0xffffffff
    1490:	ffffffff 	.word	0xffffffff
    1494:	ffffffff 	.word	0xffffffff
    1498:	ffffffff 	.word	0xffffffff
    149c:	ffffffff 	.word	0xffffffff
    14a0:	ffffffff 	.word	0xffffffff
    14a4:	ffffffff 	.word	0xffffffff
    14a8:	ffffffff 	.word	0xffffffff
    14ac:	ffffffff 	.word	0xffffffff
    14b0:	ffffffff 	.word	0xffffffff
    14b4:	ffffffff 	.word	0xffffffff
    14b8:	ffffffff 	.word	0xffffffff
    14bc:	ffffffff 	.word	0xffffffff
    14c0:	ffffffff 	.word	0xffffffff
    14c4:	ffffffff 	.word	0xffffffff
    14c8:	ffffffff 	.word	0xffffffff
    14cc:	ffffffff 	.word	0xffffffff
    14d0:	ffffffff 	.word	0xffffffff
    14d4:	ffffffff 	.word	0xffffffff
    14d8:	ffffffff 	.word	0xffffffff
    14dc:	ffffffff 	.word	0xffffffff
    14e0:	ffffffff 	.word	0xffffffff
    14e4:	ffffffff 	.word	0xffffffff
    14e8:	ffffffff 	.word	0xffffffff
    14ec:	ffffffff 	.word	0xffffffff
    14f0:	ffffffff 	.word	0xffffffff
    14f4:	ffffffff 	.word	0xffffffff
    14f8:	ffffffff 	.word	0xffffffff
    14fc:	ffffffff 	.word	0xffffffff
    1500:	ffffffff 	.word	0xffffffff
    1504:	ffffffff 	.word	0xffffffff
    1508:	ffffffff 	.word	0xffffffff
    150c:	ffffffff 	.word	0xffffffff
    1510:	ffffffff 	.word	0xffffffff
    1514:	ffffffff 	.word	0xffffffff
    1518:	ffffffff 	.word	0xffffffff
    151c:	ffffffff 	.word	0xffffffff
    1520:	ffffffff 	.word	0xffffffff
    1524:	ffffffff 	.word	0xffffffff
    1528:	ffffffff 	.word	0xffffffff
    152c:	ffffffff 	.word	0xffffffff
    1530:	ffffffff 	.word	0xffffffff
    1534:	ffffffff 	.word	0xffffffff
    1538:	ffffffff 	.word	0xffffffff
    153c:	ffffffff 	.word	0xffffffff
    1540:	ffffffff 	.word	0xffffffff
    1544:	ffffffff 	.word	0xffffffff
    1548:	ffffffff 	.word	0xffffffff
    154c:	ffffffff 	.word	0xffffffff
    1550:	ffffffff 	.word	0xffffffff
    1554:	ffffffff 	.word	0xffffffff
    1558:	ffffffff 	.word	0xffffffff
    155c:	ffffffff 	.word	0xffffffff
    1560:	ffffffff 	.word	0xffffffff
    1564:	ffffffff 	.word	0xffffffff
    1568:	ffffffff 	.word	0xffffffff
    156c:	ffffffff 	.word	0xffffffff
    1570:	ffffffff 	.word	0xffffffff
    1574:	ffffffff 	.word	0xffffffff
    1578:	ffffffff 	.word	0xffffffff
    157c:	ffffffff 	.word	0xffffffff
    1580:	ffffffff 	.word	0xffffffff
    1584:	ffffffff 	.word	0xffffffff
    1588:	ffffffff 	.word	0xffffffff
    158c:	ffffffff 	.word	0xffffffff
    1590:	ffffffff 	.word	0xffffffff
    1594:	ffffffff 	.word	0xffffffff
    1598:	ffffffff 	.word	0xffffffff
    159c:	ffffffff 	.word	0xffffffff
    15a0:	ffffffff 	.word	0xffffffff
    15a4:	ffffffff 	.word	0xffffffff
    15a8:	ffffffff 	.word	0xffffffff
    15ac:	ffffffff 	.word	0xffffffff
    15b0:	ffffffff 	.word	0xffffffff
    15b4:	ffffffff 	.word	0xffffffff
    15b8:	ffffffff 	.word	0xffffffff
    15bc:	ffffffff 	.word	0xffffffff
    15c0:	ffffffff 	.word	0xffffffff
    15c4:	ffffffff 	.word	0xffffffff
    15c8:	ffffffff 	.word	0xffffffff
    15cc:	ffffffff 	.word	0xffffffff
    15d0:	ffffffff 	.word	0xffffffff
    15d4:	ffffffff 	.word	0xffffffff
    15d8:	ffffffff 	.word	0xffffffff
    15dc:	ffffffff 	.word	0xffffffff
    15e0:	ffffffff 	.word	0xffffffff
    15e4:	ffffffff 	.word	0xffffffff
    15e8:	ffffffff 	.word	0xffffffff
    15ec:	ffffffff 	.word	0xffffffff
    15f0:	ffffffff 	.word	0xffffffff
    15f4:	ffffffff 	.word	0xffffffff
    15f8:	ffffffff 	.word	0xffffffff
    15fc:	ffffffff 	.word	0xffffffff
    1600:	ffffffff 	.word	0xffffffff
    1604:	ffffffff 	.word	0xffffffff
    1608:	ffffffff 	.word	0xffffffff
    160c:	ffffffff 	.word	0xffffffff
    1610:	ffffffff 	.word	0xffffffff
    1614:	ffffffff 	.word	0xffffffff
    1618:	ffffffff 	.word	0xffffffff
    161c:	ffffffff 	.word	0xffffffff
    1620:	ffffffff 	.word	0xffffffff
    1624:	ffffffff 	.word	0xffffffff
    1628:	ffffffff 	.word	0xffffffff
    162c:	ffffffff 	.word	0xffffffff
    1630:	ffffffff 	.word	0xffffffff
    1634:	ffffffff 	.word	0xffffffff
    1638:	ffffffff 	.word	0xffffffff
    163c:	ffffffff 	.word	0xffffffff
    1640:	ffffffff 	.word	0xffffffff
    1644:	ffffffff 	.word	0xffffffff
    1648:	ffffffff 	.word	0xffffffff
    164c:	ffffffff 	.word	0xffffffff
    1650:	ffffffff 	.word	0xffffffff
    1654:	ffffffff 	.word	0xffffffff
    1658:	ffffffff 	.word	0xffffffff
    165c:	ffffffff 	.word	0xffffffff
    1660:	ffffffff 	.word	0xffffffff
    1664:	ffffffff 	.word	0xffffffff
    1668:	ffffffff 	.word	0xffffffff
    166c:	ffffffff 	.word	0xffffffff
    1670:	ffffffff 	.word	0xffffffff
    1674:	ffffffff 	.word	0xffffffff
    1678:	ffffffff 	.word	0xffffffff
    167c:	ffffffff 	.word	0xffffffff
    1680:	ffffffff 	.word	0xffffffff
    1684:	ffffffff 	.word	0xffffffff
    1688:	ffffffff 	.word	0xffffffff
    168c:	ffffffff 	.word	0xffffffff
    1690:	ffffffff 	.word	0xffffffff
    1694:	ffffffff 	.word	0xffffffff
    1698:	ffffffff 	.word	0xffffffff
    169c:	ffffffff 	.word	0xffffffff
    16a0:	ffffffff 	.word	0xffffffff
    16a4:	ffffffff 	.word	0xffffffff
    16a8:	ffffffff 	.word	0xffffffff
    16ac:	ffffffff 	.word	0xffffffff
    16b0:	ffffffff 	.word	0xffffffff
    16b4:	ffffffff 	.word	0xffffffff
    16b8:	ffffffff 	.word	0xffffffff
    16bc:	ffffffff 	.word	0xffffffff
    16c0:	ffffffff 	.word	0xffffffff
    16c4:	ffffffff 	.word	0xffffffff
    16c8:	ffffffff 	.word	0xffffffff
    16cc:	ffffffff 	.word	0xffffffff
    16d0:	ffffffff 	.word	0xffffffff
    16d4:	ffffffff 	.word	0xffffffff
    16d8:	ffffffff 	.word	0xffffffff
    16dc:	ffffffff 	.word	0xffffffff
    16e0:	ffffffff 	.word	0xffffffff
    16e4:	ffffffff 	.word	0xffffffff
    16e8:	ffffffff 	.word	0xffffffff
    16ec:	ffffffff 	.word	0xffffffff
    16f0:	ffffffff 	.word	0xffffffff
    16f4:	ffffffff 	.word	0xffffffff
    16f8:	ffffffff 	.word	0xffffffff
    16fc:	ffffffff 	.word	0xffffffff
    1700:	ffffffff 	.word	0xffffffff
    1704:	ffffffff 	.word	0xffffffff
    1708:	ffffffff 	.word	0xffffffff
    170c:	ffffffff 	.word	0xffffffff
    1710:	ffffffff 	.word	0xffffffff
    1714:	ffffffff 	.word	0xffffffff
    1718:	ffffffff 	.word	0xffffffff
    171c:	ffffffff 	.word	0xffffffff
    1720:	ffffffff 	.word	0xffffffff
    1724:	ffffffff 	.word	0xffffffff
    1728:	ffffffff 	.word	0xffffffff
    172c:	ffffffff 	.word	0xffffffff
    1730:	ffffffff 	.word	0xffffffff
    1734:	ffffffff 	.word	0xffffffff
    1738:	ffffffff 	.word	0xffffffff
    173c:	ffffffff 	.word	0xffffffff
    1740:	ffffffff 	.word	0xffffffff
    1744:	ffffffff 	.word	0xffffffff
    1748:	ffffffff 	.word	0xffffffff
    174c:	ffffffff 	.word	0xffffffff
    1750:	ffffffff 	.word	0xffffffff
    1754:	ffffffff 	.word	0xffffffff
    1758:	ffffffff 	.word	0xffffffff
    175c:	ffffffff 	.word	0xffffffff
    1760:	ffffffff 	.word	0xffffffff
    1764:	ffffffff 	.word	0xffffffff
    1768:	ffffffff 	.word	0xffffffff
    176c:	ffffffff 	.word	0xffffffff
    1770:	ffffffff 	.word	0xffffffff
    1774:	ffffffff 	.word	0xffffffff
    1778:	ffffffff 	.word	0xffffffff
    177c:	ffffffff 	.word	0xffffffff
    1780:	ffffffff 	.word	0xffffffff
    1784:	ffffffff 	.word	0xffffffff
    1788:	ffffffff 	.word	0xffffffff
    178c:	ffffffff 	.word	0xffffffff
    1790:	ffffffff 	.word	0xffffffff
    1794:	ffffffff 	.word	0xffffffff
    1798:	ffffffff 	.word	0xffffffff
    179c:	ffffffff 	.word	0xffffffff
    17a0:	ffffffff 	.word	0xffffffff
    17a4:	ffffffff 	.word	0xffffffff
    17a8:	ffffffff 	.word	0xffffffff
    17ac:	ffffffff 	.word	0xffffffff
    17b0:	ffffffff 	.word	0xffffffff
    17b4:	ffffffff 	.word	0xffffffff
    17b8:	ffffffff 	.word	0xffffffff
    17bc:	ffffffff 	.word	0xffffffff
    17c0:	ffffffff 	.word	0xffffffff
    17c4:	ffffffff 	.word	0xffffffff
    17c8:	ffffffff 	.word	0xffffffff
    17cc:	ffffffff 	.word	0xffffffff
    17d0:	ffffffff 	.word	0xffffffff
    17d4:	ffffffff 	.word	0xffffffff
    17d8:	ffffffff 	.word	0xffffffff
    17dc:	ffffffff 	.word	0xffffffff
    17e0:	ffffffff 	.word	0xffffffff
    17e4:	ffffffff 	.word	0xffffffff
    17e8:	ffffffff 	.word	0xffffffff
    17ec:	ffffffff 	.word	0xffffffff
    17f0:	ffffffff 	.word	0xffffffff
    17f4:	ffffffff 	.word	0xffffffff
    17f8:	ffffffff 	.word	0xffffffff
    17fc:	ffffffff 	.word	0xffffffff
    1800:	ffffffff 	.word	0xffffffff
    1804:	ffffffff 	.word	0xffffffff
    1808:	ffffffff 	.word	0xffffffff
    180c:	ffffffff 	.word	0xffffffff
    1810:	ffffffff 	.word	0xffffffff
    1814:	ffffffff 	.word	0xffffffff
    1818:	ffffffff 	.word	0xffffffff
    181c:	ffffffff 	.word	0xffffffff
    1820:	ffffffff 	.word	0xffffffff
    1824:	ffffffff 	.word	0xffffffff
    1828:	ffffffff 	.word	0xffffffff
    182c:	ffffffff 	.word	0xffffffff
    1830:	ffffffff 	.word	0xffffffff
    1834:	ffffffff 	.word	0xffffffff
    1838:	ffffffff 	.word	0xffffffff
    183c:	ffffffff 	.word	0xffffffff
    1840:	ffffffff 	.word	0xffffffff
    1844:	ffffffff 	.word	0xffffffff
    1848:	ffffffff 	.word	0xffffffff
    184c:	ffffffff 	.word	0xffffffff
    1850:	ffffffff 	.word	0xffffffff
    1854:	ffffffff 	.word	0xffffffff
    1858:	ffffffff 	.word	0xffffffff
    185c:	ffffffff 	.word	0xffffffff
    1860:	ffffffff 	.word	0xffffffff
    1864:	ffffffff 	.word	0xffffffff
    1868:	ffffffff 	.word	0xffffffff
    186c:	ffffffff 	.word	0xffffffff
    1870:	ffffffff 	.word	0xffffffff
    1874:	ffffffff 	.word	0xffffffff
    1878:	ffffffff 	.word	0xffffffff
    187c:	ffffffff 	.word	0xffffffff
    1880:	ffffffff 	.word	0xffffffff
    1884:	ffffffff 	.word	0xffffffff
    1888:	ffffffff 	.word	0xffffffff
    188c:	ffffffff 	.word	0xffffffff
    1890:	ffffffff 	.word	0xffffffff
    1894:	ffffffff 	.word	0xffffffff
    1898:	ffffffff 	.word	0xffffffff
    189c:	ffffffff 	.word	0xffffffff
    18a0:	ffffffff 	.word	0xffffffff
    18a4:	ffffffff 	.word	0xffffffff
    18a8:	ffffffff 	.word	0xffffffff
    18ac:	ffffffff 	.word	0xffffffff
    18b0:	ffffffff 	.word	0xffffffff
    18b4:	ffffffff 	.word	0xffffffff
    18b8:	ffffffff 	.word	0xffffffff
    18bc:	ffffffff 	.word	0xffffffff
    18c0:	ffffffff 	.word	0xffffffff
    18c4:	ffffffff 	.word	0xffffffff
    18c8:	ffffffff 	.word	0xffffffff
    18cc:	ffffffff 	.word	0xffffffff
    18d0:	ffffffff 	.word	0xffffffff
    18d4:	ffffffff 	.word	0xffffffff
    18d8:	ffffffff 	.word	0xffffffff
    18dc:	ffffffff 	.word	0xffffffff
    18e0:	ffffffff 	.word	0xffffffff
    18e4:	ffffffff 	.word	0xffffffff
    18e8:	ffffffff 	.word	0xffffffff
    18ec:	ffffffff 	.word	0xffffffff
    18f0:	ffffffff 	.word	0xffffffff
    18f4:	ffffffff 	.word	0xffffffff
    18f8:	ffffffff 	.word	0xffffffff
    18fc:	ffffffff 	.word	0xffffffff
    1900:	ffffffff 	.word	0xffffffff
    1904:	ffffffff 	.word	0xffffffff
    1908:	ffffffff 	.word	0xffffffff
    190c:	ffffffff 	.word	0xffffffff
    1910:	ffffffff 	.word	0xffffffff
    1914:	ffffffff 	.word	0xffffffff
    1918:	ffffffff 	.word	0xffffffff
    191c:	ffffffff 	.word	0xffffffff
    1920:	ffffffff 	.word	0xffffffff
    1924:	ffffffff 	.word	0xffffffff
    1928:	ffffffff 	.word	0xffffffff
    192c:	ffffffff 	.word	0xffffffff
    1930:	ffffffff 	.word	0xffffffff
    1934:	ffffffff 	.word	0xffffffff
    1938:	ffffffff 	.word	0xffffffff
    193c:	ffffffff 	.word	0xffffffff
    1940:	ffffffff 	.word	0xffffffff
    1944:	ffffffff 	.word	0xffffffff
    1948:	ffffffff 	.word	0xffffffff
    194c:	ffffffff 	.word	0xffffffff
    1950:	ffffffff 	.word	0xffffffff
    1954:	ffffffff 	.word	0xffffffff
    1958:	ffffffff 	.word	0xffffffff
    195c:	ffffffff 	.word	0xffffffff
    1960:	ffffffff 	.word	0xffffffff
    1964:	ffffffff 	.word	0xffffffff
    1968:	ffffffff 	.word	0xffffffff
    196c:	ffffffff 	.word	0xffffffff
    1970:	ffffffff 	.word	0xffffffff
    1974:	ffffffff 	.word	0xffffffff
    1978:	ffffffff 	.word	0xffffffff
    197c:	ffffffff 	.word	0xffffffff
    1980:	ffffffff 	.word	0xffffffff
    1984:	ffffffff 	.word	0xffffffff
    1988:	ffffffff 	.word	0xffffffff
    198c:	ffffffff 	.word	0xffffffff
    1990:	ffffffff 	.word	0xffffffff
    1994:	ffffffff 	.word	0xffffffff
    1998:	ffffffff 	.word	0xffffffff
    199c:	ffffffff 	.word	0xffffffff
    19a0:	ffffffff 	.word	0xffffffff
    19a4:	ffffffff 	.word	0xffffffff
    19a8:	ffffffff 	.word	0xffffffff
    19ac:	ffffffff 	.word	0xffffffff
    19b0:	ffffffff 	.word	0xffffffff
    19b4:	ffffffff 	.word	0xffffffff
    19b8:	ffffffff 	.word	0xffffffff
    19bc:	ffffffff 	.word	0xffffffff
    19c0:	ffffffff 	.word	0xffffffff
    19c4:	ffffffff 	.word	0xffffffff
    19c8:	ffffffff 	.word	0xffffffff
    19cc:	ffffffff 	.word	0xffffffff
    19d0:	ffffffff 	.word	0xffffffff
    19d4:	ffffffff 	.word	0xffffffff
    19d8:	ffffffff 	.word	0xffffffff
    19dc:	ffffffff 	.word	0xffffffff
    19e0:	ffffffff 	.word	0xffffffff
    19e4:	ffffffff 	.word	0xffffffff
    19e8:	ffffffff 	.word	0xffffffff
    19ec:	ffffffff 	.word	0xffffffff
    19f0:	ffffffff 	.word	0xffffffff
    19f4:	ffffffff 	.word	0xffffffff
    19f8:	ffffffff 	.word	0xffffffff
    19fc:	ffffffff 	.word	0xffffffff
    1a00:	ffffffff 	.word	0xffffffff
    1a04:	ffffffff 	.word	0xffffffff
    1a08:	ffffffff 	.word	0xffffffff
    1a0c:	ffffffff 	.word	0xffffffff
    1a10:	ffffffff 	.word	0xffffffff
    1a14:	ffffffff 	.word	0xffffffff
    1a18:	ffffffff 	.word	0xffffffff
    1a1c:	ffffffff 	.word	0xffffffff
    1a20:	ffffffff 	.word	0xffffffff
    1a24:	ffffffff 	.word	0xffffffff
    1a28:	ffffffff 	.word	0xffffffff
    1a2c:	ffffffff 	.word	0xffffffff
    1a30:	ffffffff 	.word	0xffffffff
    1a34:	ffffffff 	.word	0xffffffff
    1a38:	ffffffff 	.word	0xffffffff
    1a3c:	ffffffff 	.word	0xffffffff
    1a40:	ffffffff 	.word	0xffffffff
    1a44:	ffffffff 	.word	0xffffffff
    1a48:	ffffffff 	.word	0xffffffff
    1a4c:	ffffffff 	.word	0xffffffff
    1a50:	ffffffff 	.word	0xffffffff
    1a54:	ffffffff 	.word	0xffffffff
    1a58:	ffffffff 	.word	0xffffffff
    1a5c:	ffffffff 	.word	0xffffffff
    1a60:	ffffffff 	.word	0xffffffff
    1a64:	ffffffff 	.word	0xffffffff
    1a68:	ffffffff 	.word	0xffffffff
    1a6c:	ffffffff 	.word	0xffffffff
    1a70:	ffffffff 	.word	0xffffffff
    1a74:	ffffffff 	.word	0xffffffff
    1a78:	ffffffff 	.word	0xffffffff
    1a7c:	ffffffff 	.word	0xffffffff
    1a80:	ffffffff 	.word	0xffffffff
    1a84:	ffffffff 	.word	0xffffffff
    1a88:	ffffffff 	.word	0xffffffff
    1a8c:	ffffffff 	.word	0xffffffff
    1a90:	ffffffff 	.word	0xffffffff
    1a94:	ffffffff 	.word	0xffffffff
    1a98:	ffffffff 	.word	0xffffffff
    1a9c:	ffffffff 	.word	0xffffffff
    1aa0:	ffffffff 	.word	0xffffffff
    1aa4:	ffffffff 	.word	0xffffffff
    1aa8:	ffffffff 	.word	0xffffffff
    1aac:	ffffffff 	.word	0xffffffff
    1ab0:	ffffffff 	.word	0xffffffff
    1ab4:	ffffffff 	.word	0xffffffff
    1ab8:	ffffffff 	.word	0xffffffff
    1abc:	ffffffff 	.word	0xffffffff
    1ac0:	ffffffff 	.word	0xffffffff
    1ac4:	ffffffff 	.word	0xffffffff
    1ac8:	ffffffff 	.word	0xffffffff
    1acc:	ffffffff 	.word	0xffffffff
    1ad0:	ffffffff 	.word	0xffffffff
    1ad4:	ffffffff 	.word	0xffffffff
    1ad8:	ffffffff 	.word	0xffffffff
    1adc:	ffffffff 	.word	0xffffffff
    1ae0:	ffffffff 	.word	0xffffffff
    1ae4:	ffffffff 	.word	0xffffffff
    1ae8:	ffffffff 	.word	0xffffffff
    1aec:	ffffffff 	.word	0xffffffff
    1af0:	ffffffff 	.word	0xffffffff
    1af4:	ffffffff 	.word	0xffffffff
    1af8:	ffffffff 	.word	0xffffffff
    1afc:	ffffffff 	.word	0xffffffff
    1b00:	ffffffff 	.word	0xffffffff
    1b04:	ffffffff 	.word	0xffffffff
    1b08:	ffffffff 	.word	0xffffffff
    1b0c:	ffffffff 	.word	0xffffffff
    1b10:	ffffffff 	.word	0xffffffff
    1b14:	ffffffff 	.word	0xffffffff
    1b18:	ffffffff 	.word	0xffffffff
    1b1c:	ffffffff 	.word	0xffffffff
    1b20:	ffffffff 	.word	0xffffffff
    1b24:	ffffffff 	.word	0xffffffff
    1b28:	ffffffff 	.word	0xffffffff
    1b2c:	ffffffff 	.word	0xffffffff
    1b30:	ffffffff 	.word	0xffffffff
    1b34:	ffffffff 	.word	0xffffffff
    1b38:	ffffffff 	.word	0xffffffff
    1b3c:	ffffffff 	.word	0xffffffff
    1b40:	ffffffff 	.word	0xffffffff
    1b44:	ffffffff 	.word	0xffffffff
    1b48:	ffffffff 	.word	0xffffffff
    1b4c:	ffffffff 	.word	0xffffffff
    1b50:	ffffffff 	.word	0xffffffff
    1b54:	ffffffff 	.word	0xffffffff
    1b58:	ffffffff 	.word	0xffffffff
    1b5c:	ffffffff 	.word	0xffffffff
    1b60:	ffffffff 	.word	0xffffffff
    1b64:	ffffffff 	.word	0xffffffff
    1b68:	ffffffff 	.word	0xffffffff
    1b6c:	ffffffff 	.word	0xffffffff
    1b70:	ffffffff 	.word	0xffffffff
    1b74:	ffffffff 	.word	0xffffffff
    1b78:	ffffffff 	.word	0xffffffff
    1b7c:	ffffffff 	.word	0xffffffff
    1b80:	ffffffff 	.word	0xffffffff
    1b84:	ffffffff 	.word	0xffffffff
    1b88:	ffffffff 	.word	0xffffffff
    1b8c:	ffffffff 	.word	0xffffffff
    1b90:	ffffffff 	.word	0xffffffff
    1b94:	ffffffff 	.word	0xffffffff
    1b98:	ffffffff 	.word	0xffffffff
    1b9c:	ffffffff 	.word	0xffffffff
    1ba0:	ffffffff 	.word	0xffffffff
    1ba4:	ffffffff 	.word	0xffffffff
    1ba8:	ffffffff 	.word	0xffffffff
    1bac:	ffffffff 	.word	0xffffffff
    1bb0:	ffffffff 	.word	0xffffffff
    1bb4:	ffffffff 	.word	0xffffffff
    1bb8:	ffffffff 	.word	0xffffffff
    1bbc:	ffffffff 	.word	0xffffffff
    1bc0:	ffffffff 	.word	0xffffffff
    1bc4:	ffffffff 	.word	0xffffffff
    1bc8:	ffffffff 	.word	0xffffffff
    1bcc:	ffffffff 	.word	0xffffffff
    1bd0:	ffffffff 	.word	0xffffffff
    1bd4:	ffffffff 	.word	0xffffffff
    1bd8:	ffffffff 	.word	0xffffffff
    1bdc:	ffffffff 	.word	0xffffffff
    1be0:	ffffffff 	.word	0xffffffff
    1be4:	ffffffff 	.word	0xffffffff
    1be8:	ffffffff 	.word	0xffffffff
    1bec:	ffffffff 	.word	0xffffffff
    1bf0:	ffffffff 	.word	0xffffffff
    1bf4:	ffffffff 	.word	0xffffffff
    1bf8:	ffffffff 	.word	0xffffffff
    1bfc:	ffffffff 	.word	0xffffffff
    1c00:	ffffffff 	.word	0xffffffff
    1c04:	ffffffff 	.word	0xffffffff
    1c08:	ffffffff 	.word	0xffffffff
    1c0c:	ffffffff 	.word	0xffffffff
    1c10:	ffffffff 	.word	0xffffffff
    1c14:	ffffffff 	.word	0xffffffff
    1c18:	ffffffff 	.word	0xffffffff
    1c1c:	ffffffff 	.word	0xffffffff
    1c20:	ffffffff 	.word	0xffffffff
    1c24:	ffffffff 	.word	0xffffffff
    1c28:	ffffffff 	.word	0xffffffff
    1c2c:	ffffffff 	.word	0xffffffff
    1c30:	ffffffff 	.word	0xffffffff
    1c34:	ffffffff 	.word	0xffffffff
    1c38:	ffffffff 	.word	0xffffffff
    1c3c:	ffffffff 	.word	0xffffffff
    1c40:	ffffffff 	.word	0xffffffff
    1c44:	ffffffff 	.word	0xffffffff
    1c48:	ffffffff 	.word	0xffffffff
    1c4c:	ffffffff 	.word	0xffffffff
    1c50:	ffffffff 	.word	0xffffffff
    1c54:	ffffffff 	.word	0xffffffff
    1c58:	ffffffff 	.word	0xffffffff
    1c5c:	ffffffff 	.word	0xffffffff
    1c60:	ffffffff 	.word	0xffffffff
    1c64:	ffffffff 	.word	0xffffffff
    1c68:	ffffffff 	.word	0xffffffff
    1c6c:	ffffffff 	.word	0xffffffff
    1c70:	ffffffff 	.word	0xffffffff
    1c74:	ffffffff 	.word	0xffffffff
    1c78:	ffffffff 	.word	0xffffffff
    1c7c:	ffffffff 	.word	0xffffffff
    1c80:	ffffffff 	.word	0xffffffff
    1c84:	ffffffff 	.word	0xffffffff
    1c88:	ffffffff 	.word	0xffffffff
    1c8c:	ffffffff 	.word	0xffffffff
    1c90:	ffffffff 	.word	0xffffffff
    1c94:	ffffffff 	.word	0xffffffff
    1c98:	ffffffff 	.word	0xffffffff
    1c9c:	ffffffff 	.word	0xffffffff
    1ca0:	ffffffff 	.word	0xffffffff
    1ca4:	ffffffff 	.word	0xffffffff
    1ca8:	ffffffff 	.word	0xffffffff
    1cac:	ffffffff 	.word	0xffffffff
    1cb0:	ffffffff 	.word	0xffffffff
    1cb4:	ffffffff 	.word	0xffffffff
    1cb8:	ffffffff 	.word	0xffffffff
    1cbc:	ffffffff 	.word	0xffffffff
    1cc0:	ffffffff 	.word	0xffffffff
    1cc4:	ffffffff 	.word	0xffffffff
    1cc8:	ffffffff 	.word	0xffffffff
    1ccc:	ffffffff 	.word	0xffffffff
    1cd0:	ffffffff 	.word	0xffffffff
    1cd4:	ffffffff 	.word	0xffffffff
    1cd8:	ffffffff 	.word	0xffffffff
    1cdc:	ffffffff 	.word	0xffffffff
    1ce0:	ffffffff 	.word	0xffffffff
    1ce4:	ffffffff 	.word	0xffffffff
    1ce8:	ffffffff 	.word	0xffffffff
    1cec:	ffffffff 	.word	0xffffffff
    1cf0:	ffffffff 	.word	0xffffffff
    1cf4:	ffffffff 	.word	0xffffffff
    1cf8:	ffffffff 	.word	0xffffffff
    1cfc:	ffffffff 	.word	0xffffffff
    1d00:	ffffffff 	.word	0xffffffff
    1d04:	ffffffff 	.word	0xffffffff
    1d08:	ffffffff 	.word	0xffffffff
    1d0c:	ffffffff 	.word	0xffffffff
    1d10:	ffffffff 	.word	0xffffffff
    1d14:	ffffffff 	.word	0xffffffff
    1d18:	ffffffff 	.word	0xffffffff
    1d1c:	ffffffff 	.word	0xffffffff
    1d20:	ffffffff 	.word	0xffffffff
    1d24:	ffffffff 	.word	0xffffffff
    1d28:	ffffffff 	.word	0xffffffff
    1d2c:	ffffffff 	.word	0xffffffff
    1d30:	ffffffff 	.word	0xffffffff
    1d34:	ffffffff 	.word	0xffffffff
    1d38:	ffffffff 	.word	0xffffffff
    1d3c:	ffffffff 	.word	0xffffffff
    1d40:	ffffffff 	.word	0xffffffff
    1d44:	ffffffff 	.word	0xffffffff
    1d48:	ffffffff 	.word	0xffffffff
    1d4c:	ffffffff 	.word	0xffffffff
    1d50:	ffffffff 	.word	0xffffffff
    1d54:	ffffffff 	.word	0xffffffff
    1d58:	ffffffff 	.word	0xffffffff
    1d5c:	ffffffff 	.word	0xffffffff
    1d60:	ffffffff 	.word	0xffffffff
    1d64:	ffffffff 	.word	0xffffffff
    1d68:	ffffffff 	.word	0xffffffff
    1d6c:	ffffffff 	.word	0xffffffff
    1d70:	ffffffff 	.word	0xffffffff
    1d74:	ffffffff 	.word	0xffffffff
    1d78:	ffffffff 	.word	0xffffffff
    1d7c:	ffffffff 	.word	0xffffffff
    1d80:	ffffffff 	.word	0xffffffff
    1d84:	ffffffff 	.word	0xffffffff
    1d88:	ffffffff 	.word	0xffffffff
    1d8c:	ffffffff 	.word	0xffffffff
    1d90:	ffffffff 	.word	0xffffffff
    1d94:	ffffffff 	.word	0xffffffff
    1d98:	ffffffff 	.word	0xffffffff
    1d9c:	ffffffff 	.word	0xffffffff
    1da0:	ffffffff 	.word	0xffffffff
    1da4:	ffffffff 	.word	0xffffffff
    1da8:	ffffffff 	.word	0xffffffff
    1dac:	ffffffff 	.word	0xffffffff
    1db0:	ffffffff 	.word	0xffffffff
    1db4:	ffffffff 	.word	0xffffffff
    1db8:	ffffffff 	.word	0xffffffff
    1dbc:	ffffffff 	.word	0xffffffff
    1dc0:	ffffffff 	.word	0xffffffff
    1dc4:	ffffffff 	.word	0xffffffff
    1dc8:	ffffffff 	.word	0xffffffff
    1dcc:	ffffffff 	.word	0xffffffff
    1dd0:	ffffffff 	.word	0xffffffff
    1dd4:	ffffffff 	.word	0xffffffff
    1dd8:	ffffffff 	.word	0xffffffff
    1ddc:	ffffffff 	.word	0xffffffff
    1de0:	ffffffff 	.word	0xffffffff
    1de4:	ffffffff 	.word	0xffffffff
    1de8:	ffffffff 	.word	0xffffffff
    1dec:	ffffffff 	.word	0xffffffff
    1df0:	ffffffff 	.word	0xffffffff
    1df4:	ffffffff 	.word	0xffffffff
    1df8:	ffffffff 	.word	0xffffffff
    1dfc:	ffffffff 	.word	0xffffffff
    1e00:	ffffffff 	.word	0xffffffff
    1e04:	ffffffff 	.word	0xffffffff
    1e08:	ffffffff 	.word	0xffffffff
    1e0c:	ffffffff 	.word	0xffffffff
    1e10:	ffffffff 	.word	0xffffffff
    1e14:	ffffffff 	.word	0xffffffff
    1e18:	ffffffff 	.word	0xffffffff
    1e1c:	ffffffff 	.word	0xffffffff
    1e20:	ffffffff 	.word	0xffffffff
    1e24:	ffffffff 	.word	0xffffffff
    1e28:	ffffffff 	.word	0xffffffff
    1e2c:	ffffffff 	.word	0xffffffff
    1e30:	ffffffff 	.word	0xffffffff
    1e34:	ffffffff 	.word	0xffffffff
    1e38:	ffffffff 	.word	0xffffffff
    1e3c:	ffffffff 	.word	0xffffffff
    1e40:	ffffffff 	.word	0xffffffff
    1e44:	ffffffff 	.word	0xffffffff
    1e48:	ffffffff 	.word	0xffffffff
    1e4c:	ffffffff 	.word	0xffffffff
    1e50:	ffffffff 	.word	0xffffffff
    1e54:	ffffffff 	.word	0xffffffff
    1e58:	ffffffff 	.word	0xffffffff
    1e5c:	ffffffff 	.word	0xffffffff
    1e60:	ffffffff 	.word	0xffffffff
    1e64:	ffffffff 	.word	0xffffffff
    1e68:	ffffffff 	.word	0xffffffff
    1e6c:	ffffffff 	.word	0xffffffff
    1e70:	ffffffff 	.word	0xffffffff
    1e74:	ffffffff 	.word	0xffffffff
    1e78:	ffffffff 	.word	0xffffffff
    1e7c:	ffffffff 	.word	0xffffffff
    1e80:	ffffffff 	.word	0xffffffff
    1e84:	ffffffff 	.word	0xffffffff
    1e88:	ffffffff 	.word	0xffffffff
    1e8c:	ffffffff 	.word	0xffffffff
    1e90:	ffffffff 	.word	0xffffffff
    1e94:	ffffffff 	.word	0xffffffff
    1e98:	ffffffff 	.word	0xffffffff
    1e9c:	ffffffff 	.word	0xffffffff
    1ea0:	ffffffff 	.word	0xffffffff
    1ea4:	ffffffff 	.word	0xffffffff
    1ea8:	ffffffff 	.word	0xffffffff
    1eac:	ffffffff 	.word	0xffffffff
    1eb0:	ffffffff 	.word	0xffffffff
    1eb4:	ffffffff 	.word	0xffffffff
    1eb8:	ffffffff 	.word	0xffffffff
    1ebc:	ffffffff 	.word	0xffffffff
    1ec0:	ffffffff 	.word	0xffffffff
    1ec4:	ffffffff 	.word	0xffffffff
    1ec8:	ffffffff 	.word	0xffffffff
    1ecc:	ffffffff 	.word	0xffffffff
    1ed0:	ffffffff 	.word	0xffffffff
    1ed4:	ffffffff 	.word	0xffffffff
    1ed8:	ffffffff 	.word	0xffffffff
    1edc:	ffffffff 	.word	0xffffffff
    1ee0:	ffffffff 	.word	0xffffffff
    1ee4:	ffffffff 	.word	0xffffffff
    1ee8:	ffffffff 	.word	0xffffffff
    1eec:	ffffffff 	.word	0xffffffff
    1ef0:	ffffffff 	.word	0xffffffff
    1ef4:	ffffffff 	.word	0xffffffff
    1ef8:	ffffffff 	.word	0xffffffff
    1efc:	ffffffff 	.word	0xffffffff
    1f00:	ffffffff 	.word	0xffffffff
    1f04:	ffffffff 	.word	0xffffffff
    1f08:	ffffffff 	.word	0xffffffff
    1f0c:	ffffffff 	.word	0xffffffff
    1f10:	ffffffff 	.word	0xffffffff
    1f14:	ffffffff 	.word	0xffffffff
    1f18:	ffffffff 	.word	0xffffffff
    1f1c:	ffffffff 	.word	0xffffffff
    1f20:	ffffffff 	.word	0xffffffff
    1f24:	ffffffff 	.word	0xffffffff
    1f28:	ffffffff 	.word	0xffffffff
    1f2c:	ffffffff 	.word	0xffffffff
    1f30:	ffffffff 	.word	0xffffffff
    1f34:	ffffffff 	.word	0xffffffff
    1f38:	ffffffff 	.word	0xffffffff
    1f3c:	ffffffff 	.word	0xffffffff
    1f40:	ffffffff 	.word	0xffffffff
    1f44:	ffffffff 	.word	0xffffffff
    1f48:	ffffffff 	.word	0xffffffff
    1f4c:	ffffffff 	.word	0xffffffff
    1f50:	ffffffff 	.word	0xffffffff
    1f54:	ffffffff 	.word	0xffffffff
    1f58:	ffffffff 	.word	0xffffffff
    1f5c:	ffffffff 	.word	0xffffffff
    1f60:	ffffffff 	.word	0xffffffff
    1f64:	ffffffff 	.word	0xffffffff
    1f68:	ffffffff 	.word	0xffffffff
    1f6c:	ffffffff 	.word	0xffffffff
    1f70:	ffffffff 	.word	0xffffffff
    1f74:	ffffffff 	.word	0xffffffff
    1f78:	ffffffff 	.word	0xffffffff
    1f7c:	ffffffff 	.word	0xffffffff
    1f80:	ffffffff 	.word	0xffffffff
    1f84:	ffffffff 	.word	0xffffffff
    1f88:	ffffffff 	.word	0xffffffff
    1f8c:	ffffffff 	.word	0xffffffff
    1f90:	ffffffff 	.word	0xffffffff
    1f94:	ffffffff 	.word	0xffffffff
    1f98:	ffffffff 	.word	0xffffffff
    1f9c:	ffffffff 	.word	0xffffffff
    1fa0:	ffffffff 	.word	0xffffffff
    1fa4:	ffffffff 	.word	0xffffffff
    1fa8:	ffffffff 	.word	0xffffffff
    1fac:	ffffffff 	.word	0xffffffff
    1fb0:	ffffffff 	.word	0xffffffff
    1fb4:	ffffffff 	.word	0xffffffff
    1fb8:	ffffffff 	.word	0xffffffff
    1fbc:	ffffffff 	.word	0xffffffff
    1fc0:	ffffffff 	.word	0xffffffff
    1fc4:	ffffffff 	.word	0xffffffff
    1fc8:	ffffffff 	.word	0xffffffff
    1fcc:	ffffffff 	.word	0xffffffff
    1fd0:	ffffffff 	.word	0xffffffff
    1fd4:	ffffffff 	.word	0xffffffff
    1fd8:	ffffffff 	.word	0xffffffff
    1fdc:	ffffffff 	.word	0xffffffff
    1fe0:	ffffffff 	.word	0xffffffff
    1fe4:	ffffffff 	.word	0xffffffff
    1fe8:	ffffffff 	.word	0xffffffff
    1fec:	ffffffff 	.word	0xffffffff
    1ff0:	ffffffff 	.word	0xffffffff
    1ff4:	ffffffff 	.word	0xffffffff
    1ff8:	ffffffff 	.word	0xffffffff
    1ffc:	ffffffff 	.word	0xffffffff
    2000:	ffffffff 	.word	0xffffffff
    2004:	ffffffff 	.word	0xffffffff
    2008:	ffffffff 	.word	0xffffffff
    200c:	ffffffff 	.word	0xffffffff
    2010:	ffffffff 	.word	0xffffffff
    2014:	ffffffff 	.word	0xffffffff
    2018:	ffffffff 	.word	0xffffffff
    201c:	ffffffff 	.word	0xffffffff
    2020:	ffffffff 	.word	0xffffffff
    2024:	ffffffff 	.word	0xffffffff
    2028:	ffffffff 	.word	0xffffffff
    202c:	ffffffff 	.word	0xffffffff
    2030:	ffffffff 	.word	0xffffffff
    2034:	ffffffff 	.word	0xffffffff
    2038:	ffffffff 	.word	0xffffffff
    203c:	ffffffff 	.word	0xffffffff
    2040:	ffffffff 	.word	0xffffffff
    2044:	ffffffff 	.word	0xffffffff
    2048:	ffffffff 	.word	0xffffffff
    204c:	ffffffff 	.word	0xffffffff
    2050:	ffffffff 	.word	0xffffffff
    2054:	ffffffff 	.word	0xffffffff
    2058:	ffffffff 	.word	0xffffffff
    205c:	ffffffff 	.word	0xffffffff
    2060:	ffffffff 	.word	0xffffffff
    2064:	ffffffff 	.word	0xffffffff
    2068:	ffffffff 	.word	0xffffffff
    206c:	ffffffff 	.word	0xffffffff
    2070:	ffffffff 	.word	0xffffffff
    2074:	ffffffff 	.word	0xffffffff
    2078:	ffffffff 	.word	0xffffffff
    207c:	ffffffff 	.word	0xffffffff
    2080:	ffffffff 	.word	0xffffffff
    2084:	ffffffff 	.word	0xffffffff
    2088:	ffffffff 	.word	0xffffffff
    208c:	ffffffff 	.word	0xffffffff
    2090:	ffffffff 	.word	0xffffffff
    2094:	ffffffff 	.word	0xffffffff
    2098:	ffffffff 	.word	0xffffffff
    209c:	ffffffff 	.word	0xffffffff
    20a0:	ffffffff 	.word	0xffffffff
    20a4:	ffffffff 	.word	0xffffffff
    20a8:	ffffffff 	.word	0xffffffff
    20ac:	ffffffff 	.word	0xffffffff
    20b0:	ffffffff 	.word	0xffffffff
    20b4:	ffffffff 	.word	0xffffffff
    20b8:	ffffffff 	.word	0xffffffff
    20bc:	ffffffff 	.word	0xffffffff
    20c0:	ffffffff 	.word	0xffffffff
    20c4:	ffffffff 	.word	0xffffffff
    20c8:	ffffffff 	.word	0xffffffff
    20cc:	ffffffff 	.word	0xffffffff
    20d0:	ffffffff 	.word	0xffffffff
    20d4:	ffffffff 	.word	0xffffffff
    20d8:	ffffffff 	.word	0xffffffff
    20dc:	ffffffff 	.word	0xffffffff
    20e0:	ffffffff 	.word	0xffffffff
    20e4:	ffffffff 	.word	0xffffffff
    20e8:	ffffffff 	.word	0xffffffff
    20ec:	ffffffff 	.word	0xffffffff
    20f0:	ffffffff 	.word	0xffffffff
    20f4:	ffffffff 	.word	0xffffffff
    20f8:	ffffffff 	.word	0xffffffff
    20fc:	ffffffff 	.word	0xffffffff
    2100:	ffffffff 	.word	0xffffffff
    2104:	ffffffff 	.word	0xffffffff
    2108:	ffffffff 	.word	0xffffffff
    210c:	ffffffff 	.word	0xffffffff
    2110:	ffffffff 	.word	0xffffffff
    2114:	ffffffff 	.word	0xffffffff
    2118:	ffffffff 	.word	0xffffffff
    211c:	ffffffff 	.word	0xffffffff
    2120:	ffffffff 	.word	0xffffffff
    2124:	ffffffff 	.word	0xffffffff
    2128:	ffffffff 	.word	0xffffffff
    212c:	ffffffff 	.word	0xffffffff
    2130:	ffffffff 	.word	0xffffffff
    2134:	ffffffff 	.word	0xffffffff
    2138:	ffffffff 	.word	0xffffffff
    213c:	ffffffff 	.word	0xffffffff
    2140:	ffffffff 	.word	0xffffffff
    2144:	ffffffff 	.word	0xffffffff
    2148:	ffffffff 	.word	0xffffffff
    214c:	ffffffff 	.word	0xffffffff
    2150:	ffffffff 	.word	0xffffffff
    2154:	ffffffff 	.word	0xffffffff
    2158:	ffffffff 	.word	0xffffffff
    215c:	ffffffff 	.word	0xffffffff
    2160:	ffffffff 	.word	0xffffffff
    2164:	ffffffff 	.word	0xffffffff
    2168:	ffffffff 	.word	0xffffffff
    216c:	ffffffff 	.word	0xffffffff
    2170:	ffffffff 	.word	0xffffffff
    2174:	ffffffff 	.word	0xffffffff
    2178:	ffffffff 	.word	0xffffffff
    217c:	ffffffff 	.word	0xffffffff
    2180:	ffffffff 	.word	0xffffffff
    2184:	ffffffff 	.word	0xffffffff
    2188:	ffffffff 	.word	0xffffffff
    218c:	ffffffff 	.word	0xffffffff
    2190:	ffffffff 	.word	0xffffffff
    2194:	ffffffff 	.word	0xffffffff
    2198:	ffffffff 	.word	0xffffffff
    219c:	ffffffff 	.word	0xffffffff
    21a0:	ffffffff 	.word	0xffffffff
    21a4:	ffffffff 	.word	0xffffffff
    21a8:	ffffffff 	.word	0xffffffff
    21ac:	ffffffff 	.word	0xffffffff
    21b0:	ffffffff 	.word	0xffffffff
    21b4:	ffffffff 	.word	0xffffffff
    21b8:	ffffffff 	.word	0xffffffff
    21bc:	ffffffff 	.word	0xffffffff
    21c0:	ffffffff 	.word	0xffffffff
    21c4:	ffffffff 	.word	0xffffffff
    21c8:	ffffffff 	.word	0xffffffff
    21cc:	ffffffff 	.word	0xffffffff
    21d0:	ffffffff 	.word	0xffffffff
    21d4:	ffffffff 	.word	0xffffffff
    21d8:	ffffffff 	.word	0xffffffff
    21dc:	ffffffff 	.word	0xffffffff
    21e0:	ffffffff 	.word	0xffffffff
    21e4:	ffffffff 	.word	0xffffffff
    21e8:	ffffffff 	.word	0xffffffff
    21ec:	ffffffff 	.word	0xffffffff
    21f0:	ffffffff 	.word	0xffffffff
    21f4:	ffffffff 	.word	0xffffffff
    21f8:	ffffffff 	.word	0xffffffff
    21fc:	ffffffff 	.word	0xffffffff
    2200:	ffffffff 	.word	0xffffffff
    2204:	ffffffff 	.word	0xffffffff
    2208:	ffffffff 	.word	0xffffffff
    220c:	ffffffff 	.word	0xffffffff
    2210:	ffffffff 	.word	0xffffffff
    2214:	ffffffff 	.word	0xffffffff
    2218:	ffffffff 	.word	0xffffffff
    221c:	ffffffff 	.word	0xffffffff
    2220:	ffffffff 	.word	0xffffffff
    2224:	ffffffff 	.word	0xffffffff
    2228:	ffffffff 	.word	0xffffffff
    222c:	ffffffff 	.word	0xffffffff
    2230:	ffffffff 	.word	0xffffffff
    2234:	ffffffff 	.word	0xffffffff
    2238:	ffffffff 	.word	0xffffffff
    223c:	ffffffff 	.word	0xffffffff
    2240:	ffffffff 	.word	0xffffffff
    2244:	ffffffff 	.word	0xffffffff
    2248:	ffffffff 	.word	0xffffffff
    224c:	ffffffff 	.word	0xffffffff
    2250:	ffffffff 	.word	0xffffffff
    2254:	ffffffff 	.word	0xffffffff
    2258:	ffffffff 	.word	0xffffffff
    225c:	ffffffff 	.word	0xffffffff
    2260:	ffffffff 	.word	0xffffffff
    2264:	ffffffff 	.word	0xffffffff
    2268:	ffffffff 	.word	0xffffffff
    226c:	ffffffff 	.word	0xffffffff
    2270:	ffffffff 	.word	0xffffffff
    2274:	ffffffff 	.word	0xffffffff
    2278:	ffffffff 	.word	0xffffffff
    227c:	ffffffff 	.word	0xffffffff
    2280:	ffffffff 	.word	0xffffffff
    2284:	ffffffff 	.word	0xffffffff
    2288:	ffffffff 	.word	0xffffffff
    228c:	ffffffff 	.word	0xffffffff
    2290:	ffffffff 	.word	0xffffffff
    2294:	ffffffff 	.word	0xffffffff
    2298:	ffffffff 	.word	0xffffffff
    229c:	ffffffff 	.word	0xffffffff
    22a0:	ffffffff 	.word	0xffffffff
    22a4:	ffffffff 	.word	0xffffffff
    22a8:	ffffffff 	.word	0xffffffff
    22ac:	ffffffff 	.word	0xffffffff
    22b0:	ffffffff 	.word	0xffffffff
    22b4:	ffffffff 	.word	0xffffffff
    22b8:	ffffffff 	.word	0xffffffff
    22bc:	ffffffff 	.word	0xffffffff
    22c0:	ffffffff 	.word	0xffffffff
    22c4:	ffffffff 	.word	0xffffffff
    22c8:	ffffffff 	.word	0xffffffff
    22cc:	ffffffff 	.word	0xffffffff
    22d0:	ffffffff 	.word	0xffffffff
    22d4:	ffffffff 	.word	0xffffffff
    22d8:	ffffffff 	.word	0xffffffff
    22dc:	ffffffff 	.word	0xffffffff
    22e0:	ffffffff 	.word	0xffffffff
    22e4:	ffffffff 	.word	0xffffffff
    22e8:	ffffffff 	.word	0xffffffff
    22ec:	ffffffff 	.word	0xffffffff
    22f0:	ffffffff 	.word	0xffffffff
    22f4:	ffffffff 	.word	0xffffffff
    22f8:	ffffffff 	.word	0xffffffff
    22fc:	ffffffff 	.word	0xffffffff
    2300:	ffffffff 	.word	0xffffffff
    2304:	ffffffff 	.word	0xffffffff
    2308:	ffffffff 	.word	0xffffffff
    230c:	ffffffff 	.word	0xffffffff
    2310:	ffffffff 	.word	0xffffffff
    2314:	ffffffff 	.word	0xffffffff
    2318:	ffffffff 	.word	0xffffffff
    231c:	ffffffff 	.word	0xffffffff
    2320:	ffffffff 	.word	0xffffffff
    2324:	ffffffff 	.word	0xffffffff
    2328:	ffffffff 	.word	0xffffffff
    232c:	ffffffff 	.word	0xffffffff
    2330:	ffffffff 	.word	0xffffffff
    2334:	ffffffff 	.word	0xffffffff
    2338:	ffffffff 	.word	0xffffffff
    233c:	ffffffff 	.word	0xffffffff
    2340:	ffffffff 	.word	0xffffffff
    2344:	ffffffff 	.word	0xffffffff
    2348:	ffffffff 	.word	0xffffffff
    234c:	ffffffff 	.word	0xffffffff
    2350:	ffffffff 	.word	0xffffffff
    2354:	ffffffff 	.word	0xffffffff
    2358:	ffffffff 	.word	0xffffffff
    235c:	ffffffff 	.word	0xffffffff
    2360:	ffffffff 	.word	0xffffffff
    2364:	ffffffff 	.word	0xffffffff
    2368:	ffffffff 	.word	0xffffffff
    236c:	ffffffff 	.word	0xffffffff
    2370:	ffffffff 	.word	0xffffffff
    2374:	ffffffff 	.word	0xffffffff
    2378:	ffffffff 	.word	0xffffffff
    237c:	ffffffff 	.word	0xffffffff
    2380:	ffffffff 	.word	0xffffffff
    2384:	ffffffff 	.word	0xffffffff
    2388:	ffffffff 	.word	0xffffffff
    238c:	ffffffff 	.word	0xffffffff
    2390:	ffffffff 	.word	0xffffffff
    2394:	ffffffff 	.word	0xffffffff
    2398:	ffffffff 	.word	0xffffffff
    239c:	ffffffff 	.word	0xffffffff
    23a0:	ffffffff 	.word	0xffffffff
    23a4:	ffffffff 	.word	0xffffffff
    23a8:	ffffffff 	.word	0xffffffff
    23ac:	ffffffff 	.word	0xffffffff
    23b0:	ffffffff 	.word	0xffffffff
    23b4:	ffffffff 	.word	0xffffffff
    23b8:	ffffffff 	.word	0xffffffff
    23bc:	ffffffff 	.word	0xffffffff
    23c0:	ffffffff 	.word	0xffffffff
    23c4:	ffffffff 	.word	0xffffffff
    23c8:	ffffffff 	.word	0xffffffff
    23cc:	ffffffff 	.word	0xffffffff
    23d0:	ffffffff 	.word	0xffffffff
    23d4:	ffffffff 	.word	0xffffffff
    23d8:	ffffffff 	.word	0xffffffff
    23dc:	ffffffff 	.word	0xffffffff
    23e0:	ffffffff 	.word	0xffffffff
    23e4:	ffffffff 	.word	0xffffffff
    23e8:	ffffffff 	.word	0xffffffff
    23ec:	ffffffff 	.word	0xffffffff
    23f0:	ffffffff 	.word	0xffffffff
    23f4:	ffffffff 	.word	0xffffffff
    23f8:	ffffffff 	.word	0xffffffff
    23fc:	ffffffff 	.word	0xffffffff
    2400:	ffffffff 	.word	0xffffffff
    2404:	ffffffff 	.word	0xffffffff
    2408:	ffffffff 	.word	0xffffffff
    240c:	ffffffff 	.word	0xffffffff
    2410:	ffffffff 	.word	0xffffffff
    2414:	ffffffff 	.word	0xffffffff
    2418:	ffffffff 	.word	0xffffffff
    241c:	ffffffff 	.word	0xffffffff
    2420:	ffffffff 	.word	0xffffffff
    2424:	ffffffff 	.word	0xffffffff
    2428:	ffffffff 	.word	0xffffffff
    242c:	ffffffff 	.word	0xffffffff
    2430:	ffffffff 	.word	0xffffffff
    2434:	ffffffff 	.word	0xffffffff
    2438:	ffffffff 	.word	0xffffffff
    243c:	ffffffff 	.word	0xffffffff
    2440:	ffffffff 	.word	0xffffffff
    2444:	ffffffff 	.word	0xffffffff
    2448:	ffffffff 	.word	0xffffffff
    244c:	ffffffff 	.word	0xffffffff
    2450:	ffffffff 	.word	0xffffffff
    2454:	ffffffff 	.word	0xffffffff
    2458:	ffffffff 	.word	0xffffffff
    245c:	ffffffff 	.word	0xffffffff
    2460:	ffffffff 	.word	0xffffffff
    2464:	ffffffff 	.word	0xffffffff
    2468:	ffffffff 	.word	0xffffffff
    246c:	ffffffff 	.word	0xffffffff
    2470:	ffffffff 	.word	0xffffffff
    2474:	ffffffff 	.word	0xffffffff
    2478:	ffffffff 	.word	0xffffffff
    247c:	ffffffff 	.word	0xffffffff
    2480:	ffffffff 	.word	0xffffffff
    2484:	ffffffff 	.word	0xffffffff
    2488:	ffffffff 	.word	0xffffffff
    248c:	ffffffff 	.word	0xffffffff
    2490:	ffffffff 	.word	0xffffffff
    2494:	ffffffff 	.word	0xffffffff
    2498:	ffffffff 	.word	0xffffffff
    249c:	ffffffff 	.word	0xffffffff
    24a0:	ffffffff 	.word	0xffffffff
    24a4:	ffffffff 	.word	0xffffffff
    24a8:	ffffffff 	.word	0xffffffff
    24ac:	ffffffff 	.word	0xffffffff
    24b0:	ffffffff 	.word	0xffffffff
    24b4:	ffffffff 	.word	0xffffffff
    24b8:	ffffffff 	.word	0xffffffff
    24bc:	ffffffff 	.word	0xffffffff
    24c0:	ffffffff 	.word	0xffffffff
    24c4:	ffffffff 	.word	0xffffffff
    24c8:	ffffffff 	.word	0xffffffff
    24cc:	ffffffff 	.word	0xffffffff
    24d0:	ffffffff 	.word	0xffffffff
    24d4:	ffffffff 	.word	0xffffffff
    24d8:	ffffffff 	.word	0xffffffff
    24dc:	ffffffff 	.word	0xffffffff
    24e0:	ffffffff 	.word	0xffffffff
    24e4:	ffffffff 	.word	0xffffffff
    24e8:	ffffffff 	.word	0xffffffff
    24ec:	ffffffff 	.word	0xffffffff
    24f0:	ffffffff 	.word	0xffffffff
    24f4:	ffffffff 	.word	0xffffffff
    24f8:	ffffffff 	.word	0xffffffff
    24fc:	ffffffff 	.word	0xffffffff
    2500:	ffffffff 	.word	0xffffffff
    2504:	ffffffff 	.word	0xffffffff
    2508:	ffffffff 	.word	0xffffffff
    250c:	ffffffff 	.word	0xffffffff
    2510:	ffffffff 	.word	0xffffffff
    2514:	ffffffff 	.word	0xffffffff
    2518:	ffffffff 	.word	0xffffffff
    251c:	ffffffff 	.word	0xffffffff
    2520:	ffffffff 	.word	0xffffffff
    2524:	ffffffff 	.word	0xffffffff
    2528:	ffffffff 	.word	0xffffffff
    252c:	ffffffff 	.word	0xffffffff
    2530:	ffffffff 	.word	0xffffffff
    2534:	ffffffff 	.word	0xffffffff
    2538:	ffffffff 	.word	0xffffffff
    253c:	ffffffff 	.word	0xffffffff
    2540:	ffffffff 	.word	0xffffffff
    2544:	ffffffff 	.word	0xffffffff
    2548:	ffffffff 	.word	0xffffffff
    254c:	ffffffff 	.word	0xffffffff
    2550:	ffffffff 	.word	0xffffffff
    2554:	ffffffff 	.word	0xffffffff
    2558:	ffffffff 	.word	0xffffffff
    255c:	ffffffff 	.word	0xffffffff
    2560:	ffffffff 	.word	0xffffffff
    2564:	ffffffff 	.word	0xffffffff
    2568:	ffffffff 	.word	0xffffffff
    256c:	ffffffff 	.word	0xffffffff
    2570:	ffffffff 	.word	0xffffffff
    2574:	ffffffff 	.word	0xffffffff
    2578:	ffffffff 	.word	0xffffffff
    257c:	ffffffff 	.word	0xffffffff
    2580:	ffffffff 	.word	0xffffffff
    2584:	ffffffff 	.word	0xffffffff
    2588:	ffffffff 	.word	0xffffffff
    258c:	ffffffff 	.word	0xffffffff
    2590:	ffffffff 	.word	0xffffffff
    2594:	ffffffff 	.word	0xffffffff
    2598:	ffffffff 	.word	0xffffffff
    259c:	ffffffff 	.word	0xffffffff
    25a0:	ffffffff 	.word	0xffffffff
    25a4:	ffffffff 	.word	0xffffffff
    25a8:	ffffffff 	.word	0xffffffff
    25ac:	ffffffff 	.word	0xffffffff
    25b0:	ffffffff 	.word	0xffffffff
    25b4:	ffffffff 	.word	0xffffffff
    25b8:	ffffffff 	.word	0xffffffff
    25bc:	ffffffff 	.word	0xffffffff
    25c0:	ffffffff 	.word	0xffffffff
    25c4:	ffffffff 	.word	0xffffffff
    25c8:	ffffffff 	.word	0xffffffff
    25cc:	ffffffff 	.word	0xffffffff
    25d0:	ffffffff 	.word	0xffffffff
    25d4:	ffffffff 	.word	0xffffffff
    25d8:	ffffffff 	.word	0xffffffff
    25dc:	ffffffff 	.word	0xffffffff
    25e0:	ffffffff 	.word	0xffffffff
    25e4:	ffffffff 	.word	0xffffffff
    25e8:	ffffffff 	.word	0xffffffff
    25ec:	ffffffff 	.word	0xffffffff
    25f0:	ffffffff 	.word	0xffffffff
    25f4:	ffffffff 	.word	0xffffffff
    25f8:	ffffffff 	.word	0xffffffff
    25fc:	ffffffff 	.word	0xffffffff
    2600:	ffffffff 	.word	0xffffffff
    2604:	ffffffff 	.word	0xffffffff
    2608:	ffffffff 	.word	0xffffffff
    260c:	ffffffff 	.word	0xffffffff
    2610:	ffffffff 	.word	0xffffffff
    2614:	ffffffff 	.word	0xffffffff
    2618:	ffffffff 	.word	0xffffffff
    261c:	ffffffff 	.word	0xffffffff
    2620:	ffffffff 	.word	0xffffffff
    2624:	ffffffff 	.word	0xffffffff
    2628:	ffffffff 	.word	0xffffffff
    262c:	ffffffff 	.word	0xffffffff
    2630:	ffffffff 	.word	0xffffffff
    2634:	ffffffff 	.word	0xffffffff
    2638:	ffffffff 	.word	0xffffffff
    263c:	ffffffff 	.word	0xffffffff
    2640:	ffffffff 	.word	0xffffffff
    2644:	ffffffff 	.word	0xffffffff
    2648:	ffffffff 	.word	0xffffffff
    264c:	ffffffff 	.word	0xffffffff
    2650:	ffffffff 	.word	0xffffffff
    2654:	ffffffff 	.word	0xffffffff
    2658:	ffffffff 	.word	0xffffffff
    265c:	ffffffff 	.word	0xffffffff
    2660:	ffffffff 	.word	0xffffffff
    2664:	ffffffff 	.word	0xffffffff
    2668:	ffffffff 	.word	0xffffffff
    266c:	ffffffff 	.word	0xffffffff
    2670:	ffffffff 	.word	0xffffffff
    2674:	ffffffff 	.word	0xffffffff
    2678:	ffffffff 	.word	0xffffffff
    267c:	ffffffff 	.word	0xffffffff
    2680:	ffffffff 	.word	0xffffffff
    2684:	ffffffff 	.word	0xffffffff
    2688:	ffffffff 	.word	0xffffffff
    268c:	ffffffff 	.word	0xffffffff
    2690:	ffffffff 	.word	0xffffffff
    2694:	ffffffff 	.word	0xffffffff
    2698:	ffffffff 	.word	0xffffffff
    269c:	ffffffff 	.word	0xffffffff
    26a0:	ffffffff 	.word	0xffffffff
    26a4:	ffffffff 	.word	0xffffffff
    26a8:	ffffffff 	.word	0xffffffff
    26ac:	ffffffff 	.word	0xffffffff
    26b0:	ffffffff 	.word	0xffffffff
    26b4:	ffffffff 	.word	0xffffffff
    26b8:	ffffffff 	.word	0xffffffff
    26bc:	ffffffff 	.word	0xffffffff
    26c0:	ffffffff 	.word	0xffffffff
    26c4:	ffffffff 	.word	0xffffffff
    26c8:	ffffffff 	.word	0xffffffff
    26cc:	ffffffff 	.word	0xffffffff
    26d0:	ffffffff 	.word	0xffffffff
    26d4:	ffffffff 	.word	0xffffffff
    26d8:	ffffffff 	.word	0xffffffff
    26dc:	ffffffff 	.word	0xffffffff
    26e0:	ffffffff 	.word	0xffffffff
    26e4:	ffffffff 	.word	0xffffffff
    26e8:	ffffffff 	.word	0xffffffff
    26ec:	ffffffff 	.word	0xffffffff
    26f0:	ffffffff 	.word	0xffffffff
    26f4:	ffffffff 	.word	0xffffffff
    26f8:	ffffffff 	.word	0xffffffff
    26fc:	ffffffff 	.word	0xffffffff
    2700:	ffffffff 	.word	0xffffffff
    2704:	ffffffff 	.word	0xffffffff
    2708:	ffffffff 	.word	0xffffffff
    270c:	ffffffff 	.word	0xffffffff
    2710:	ffffffff 	.word	0xffffffff
    2714:	ffffffff 	.word	0xffffffff
    2718:	ffffffff 	.word	0xffffffff
    271c:	ffffffff 	.word	0xffffffff
    2720:	ffffffff 	.word	0xffffffff
    2724:	ffffffff 	.word	0xffffffff
    2728:	ffffffff 	.word	0xffffffff
    272c:	ffffffff 	.word	0xffffffff
    2730:	ffffffff 	.word	0xffffffff
    2734:	ffffffff 	.word	0xffffffff
    2738:	ffffffff 	.word	0xffffffff
    273c:	ffffffff 	.word	0xffffffff
    2740:	ffffffff 	.word	0xffffffff
    2744:	ffffffff 	.word	0xffffffff
    2748:	ffffffff 	.word	0xffffffff
    274c:	ffffffff 	.word	0xffffffff
    2750:	ffffffff 	.word	0xffffffff
    2754:	ffffffff 	.word	0xffffffff
    2758:	ffffffff 	.word	0xffffffff
    275c:	ffffffff 	.word	0xffffffff
    2760:	ffffffff 	.word	0xffffffff
    2764:	ffffffff 	.word	0xffffffff
    2768:	ffffffff 	.word	0xffffffff
    276c:	ffffffff 	.word	0xffffffff
    2770:	ffffffff 	.word	0xffffffff
    2774:	ffffffff 	.word	0xffffffff
    2778:	ffffffff 	.word	0xffffffff
    277c:	ffffffff 	.word	0xffffffff
    2780:	ffffffff 	.word	0xffffffff
    2784:	ffffffff 	.word	0xffffffff
    2788:	ffffffff 	.word	0xffffffff
    278c:	ffffffff 	.word	0xffffffff
    2790:	ffffffff 	.word	0xffffffff
    2794:	ffffffff 	.word	0xffffffff
    2798:	ffffffff 	.word	0xffffffff
    279c:	ffffffff 	.word	0xffffffff
    27a0:	ffffffff 	.word	0xffffffff
    27a4:	ffffffff 	.word	0xffffffff
    27a8:	ffffffff 	.word	0xffffffff
    27ac:	ffffffff 	.word	0xffffffff
    27b0:	ffffffff 	.word	0xffffffff
    27b4:	ffffffff 	.word	0xffffffff
    27b8:	ffffffff 	.word	0xffffffff
    27bc:	ffffffff 	.word	0xffffffff
    27c0:	ffffffff 	.word	0xffffffff
    27c4:	ffffffff 	.word	0xffffffff
    27c8:	ffffffff 	.word	0xffffffff
    27cc:	ffffffff 	.word	0xffffffff
    27d0:	ffffffff 	.word	0xffffffff
    27d4:	ffffffff 	.word	0xffffffff
    27d8:	ffffffff 	.word	0xffffffff
    27dc:	ffffffff 	.word	0xffffffff
    27e0:	ffffffff 	.word	0xffffffff
    27e4:	ffffffff 	.word	0xffffffff
    27e8:	ffffffff 	.word	0xffffffff
    27ec:	ffffffff 	.word	0xffffffff
    27f0:	ffffffff 	.word	0xffffffff
    27f4:	ffffffff 	.word	0xffffffff
    27f8:	ffffffff 	.word	0xffffffff
    27fc:	ffffffff 	.word	0xffffffff
    2800:	ffffffff 	.word	0xffffffff
    2804:	ffffffff 	.word	0xffffffff
    2808:	ffffffff 	.word	0xffffffff
    280c:	ffffffff 	.word	0xffffffff
    2810:	ffffffff 	.word	0xffffffff
    2814:	ffffffff 	.word	0xffffffff
    2818:	ffffffff 	.word	0xffffffff
    281c:	ffffffff 	.word	0xffffffff
    2820:	ffffffff 	.word	0xffffffff
    2824:	ffffffff 	.word	0xffffffff
    2828:	ffffffff 	.word	0xffffffff
    282c:	ffffffff 	.word	0xffffffff
    2830:	ffffffff 	.word	0xffffffff
    2834:	ffffffff 	.word	0xffffffff
    2838:	ffffffff 	.word	0xffffffff
    283c:	ffffffff 	.word	0xffffffff
    2840:	ffffffff 	.word	0xffffffff
    2844:	ffffffff 	.word	0xffffffff
    2848:	ffffffff 	.word	0xffffffff
    284c:	ffffffff 	.word	0xffffffff
    2850:	ffffffff 	.word	0xffffffff
    2854:	ffffffff 	.word	0xffffffff
    2858:	ffffffff 	.word	0xffffffff
    285c:	ffffffff 	.word	0xffffffff
    2860:	ffffffff 	.word	0xffffffff
    2864:	ffffffff 	.word	0xffffffff
    2868:	ffffffff 	.word	0xffffffff
    286c:	ffffffff 	.word	0xffffffff
    2870:	ffffffff 	.word	0xffffffff
    2874:	ffffffff 	.word	0xffffffff
    2878:	ffffffff 	.word	0xffffffff
    287c:	ffffffff 	.word	0xffffffff
    2880:	ffffffff 	.word	0xffffffff
    2884:	ffffffff 	.word	0xffffffff
    2888:	ffffffff 	.word	0xffffffff
    288c:	ffffffff 	.word	0xffffffff
    2890:	ffffffff 	.word	0xffffffff
    2894:	ffffffff 	.word	0xffffffff
    2898:	ffffffff 	.word	0xffffffff
    289c:	ffffffff 	.word	0xffffffff
    28a0:	ffffffff 	.word	0xffffffff
    28a4:	ffffffff 	.word	0xffffffff
    28a8:	ffffffff 	.word	0xffffffff
    28ac:	ffffffff 	.word	0xffffffff
    28b0:	ffffffff 	.word	0xffffffff
    28b4:	ffffffff 	.word	0xffffffff
    28b8:	ffffffff 	.word	0xffffffff
    28bc:	ffffffff 	.word	0xffffffff
    28c0:	ffffffff 	.word	0xffffffff
    28c4:	ffffffff 	.word	0xffffffff
    28c8:	ffffffff 	.word	0xffffffff
    28cc:	ffffffff 	.word	0xffffffff
    28d0:	ffffffff 	.word	0xffffffff
    28d4:	ffffffff 	.word	0xffffffff
    28d8:	ffffffff 	.word	0xffffffff
    28dc:	ffffffff 	.word	0xffffffff
    28e0:	ffffffff 	.word	0xffffffff
    28e4:	ffffffff 	.word	0xffffffff
    28e8:	ffffffff 	.word	0xffffffff
    28ec:	ffffffff 	.word	0xffffffff
    28f0:	ffffffff 	.word	0xffffffff
    28f4:	ffffffff 	.word	0xffffffff
    28f8:	ffffffff 	.word	0xffffffff
    28fc:	ffffffff 	.word	0xffffffff
    2900:	ffffffff 	.word	0xffffffff
    2904:	ffffffff 	.word	0xffffffff
    2908:	ffffffff 	.word	0xffffffff
    290c:	ffffffff 	.word	0xffffffff
    2910:	ffffffff 	.word	0xffffffff
    2914:	ffffffff 	.word	0xffffffff
    2918:	ffffffff 	.word	0xffffffff
    291c:	ffffffff 	.word	0xffffffff
    2920:	ffffffff 	.word	0xffffffff
    2924:	ffffffff 	.word	0xffffffff
    2928:	ffffffff 	.word	0xffffffff
    292c:	ffffffff 	.word	0xffffffff
    2930:	ffffffff 	.word	0xffffffff
    2934:	ffffffff 	.word	0xffffffff
    2938:	ffffffff 	.word	0xffffffff
    293c:	ffffffff 	.word	0xffffffff
    2940:	ffffffff 	.word	0xffffffff
    2944:	ffffffff 	.word	0xffffffff
    2948:	ffffffff 	.word	0xffffffff
    294c:	ffffffff 	.word	0xffffffff
    2950:	ffffffff 	.word	0xffffffff
    2954:	ffffffff 	.word	0xffffffff
    2958:	ffffffff 	.word	0xffffffff
    295c:	ffffffff 	.word	0xffffffff
    2960:	ffffffff 	.word	0xffffffff
    2964:	ffffffff 	.word	0xffffffff
    2968:	ffffffff 	.word	0xffffffff
    296c:	ffffffff 	.word	0xffffffff
    2970:	ffffffff 	.word	0xffffffff
    2974:	ffffffff 	.word	0xffffffff
    2978:	ffffffff 	.word	0xffffffff
    297c:	ffffffff 	.word	0xffffffff
    2980:	ffffffff 	.word	0xffffffff
    2984:	ffffffff 	.word	0xffffffff
    2988:	ffffffff 	.word	0xffffffff
    298c:	ffffffff 	.word	0xffffffff
    2990:	ffffffff 	.word	0xffffffff
    2994:	ffffffff 	.word	0xffffffff
    2998:	ffffffff 	.word	0xffffffff
    299c:	ffffffff 	.word	0xffffffff
    29a0:	ffffffff 	.word	0xffffffff
    29a4:	ffffffff 	.word	0xffffffff
    29a8:	ffffffff 	.word	0xffffffff
    29ac:	ffffffff 	.word	0xffffffff
    29b0:	ffffffff 	.word	0xffffffff
    29b4:	ffffffff 	.word	0xffffffff
    29b8:	ffffffff 	.word	0xffffffff
    29bc:	ffffffff 	.word	0xffffffff
    29c0:	ffffffff 	.word	0xffffffff
    29c4:	ffffffff 	.word	0xffffffff
    29c8:	ffffffff 	.word	0xffffffff
    29cc:	ffffffff 	.word	0xffffffff
    29d0:	ffffffff 	.word	0xffffffff
    29d4:	ffffffff 	.word	0xffffffff
    29d8:	ffffffff 	.word	0xffffffff
    29dc:	ffffffff 	.word	0xffffffff
    29e0:	ffffffff 	.word	0xffffffff
    29e4:	ffffffff 	.word	0xffffffff
    29e8:	ffffffff 	.word	0xffffffff
    29ec:	ffffffff 	.word	0xffffffff
    29f0:	ffffffff 	.word	0xffffffff
    29f4:	ffffffff 	.word	0xffffffff
    29f8:	ffffffff 	.word	0xffffffff
    29fc:	ffffffff 	.word	0xffffffff
    2a00:	ffffffff 	.word	0xffffffff
    2a04:	ffffffff 	.word	0xffffffff
    2a08:	ffffffff 	.word	0xffffffff
    2a0c:	ffffffff 	.word	0xffffffff
    2a10:	ffffffff 	.word	0xffffffff
    2a14:	ffffffff 	.word	0xffffffff
    2a18:	ffffffff 	.word	0xffffffff
    2a1c:	ffffffff 	.word	0xffffffff
    2a20:	ffffffff 	.word	0xffffffff
    2a24:	ffffffff 	.word	0xffffffff
    2a28:	ffffffff 	.word	0xffffffff
    2a2c:	ffffffff 	.word	0xffffffff
    2a30:	ffffffff 	.word	0xffffffff
    2a34:	ffffffff 	.word	0xffffffff
    2a38:	ffffffff 	.word	0xffffffff
    2a3c:	ffffffff 	.word	0xffffffff
    2a40:	ffffffff 	.word	0xffffffff
    2a44:	ffffffff 	.word	0xffffffff
    2a48:	ffffffff 	.word	0xffffffff
    2a4c:	ffffffff 	.word	0xffffffff
    2a50:	ffffffff 	.word	0xffffffff
    2a54:	ffffffff 	.word	0xffffffff
    2a58:	ffffffff 	.word	0xffffffff
    2a5c:	ffffffff 	.word	0xffffffff
    2a60:	ffffffff 	.word	0xffffffff
    2a64:	ffffffff 	.word	0xffffffff
    2a68:	ffffffff 	.word	0xffffffff
    2a6c:	ffffffff 	.word	0xffffffff
    2a70:	ffffffff 	.word	0xffffffff
    2a74:	ffffffff 	.word	0xffffffff
    2a78:	ffffffff 	.word	0xffffffff
    2a7c:	ffffffff 	.word	0xffffffff
    2a80:	ffffffff 	.word	0xffffffff
    2a84:	ffffffff 	.word	0xffffffff
    2a88:	ffffffff 	.word	0xffffffff
    2a8c:	ffffffff 	.word	0xffffffff
    2a90:	ffffffff 	.word	0xffffffff
    2a94:	ffffffff 	.word	0xffffffff
    2a98:	ffffffff 	.word	0xffffffff
    2a9c:	ffffffff 	.word	0xffffffff
    2aa0:	ffffffff 	.word	0xffffffff
    2aa4:	ffffffff 	.word	0xffffffff
    2aa8:	ffffffff 	.word	0xffffffff
    2aac:	ffffffff 	.word	0xffffffff
    2ab0:	ffffffff 	.word	0xffffffff
    2ab4:	ffffffff 	.word	0xffffffff
    2ab8:	ffffffff 	.word	0xffffffff
    2abc:	ffffffff 	.word	0xffffffff
    2ac0:	ffffffff 	.word	0xffffffff
    2ac4:	ffffffff 	.word	0xffffffff
    2ac8:	ffffffff 	.word	0xffffffff
    2acc:	ffffffff 	.word	0xffffffff
    2ad0:	ffffffff 	.word	0xffffffff
    2ad4:	ffffffff 	.word	0xffffffff
    2ad8:	ffffffff 	.word	0xffffffff
    2adc:	ffffffff 	.word	0xffffffff
    2ae0:	ffffffff 	.word	0xffffffff
    2ae4:	ffffffff 	.word	0xffffffff
    2ae8:	ffffffff 	.word	0xffffffff
    2aec:	ffffffff 	.word	0xffffffff
    2af0:	ffffffff 	.word	0xffffffff
    2af4:	ffffffff 	.word	0xffffffff
    2af8:	ffffffff 	.word	0xffffffff
    2afc:	ffffffff 	.word	0xffffffff
    2b00:	ffffffff 	.word	0xffffffff
    2b04:	ffffffff 	.word	0xffffffff
    2b08:	ffffffff 	.word	0xffffffff
    2b0c:	ffffffff 	.word	0xffffffff
    2b10:	ffffffff 	.word	0xffffffff
    2b14:	ffffffff 	.word	0xffffffff
    2b18:	ffffffff 	.word	0xffffffff
    2b1c:	ffffffff 	.word	0xffffffff
    2b20:	ffffffff 	.word	0xffffffff
    2b24:	ffffffff 	.word	0xffffffff
    2b28:	ffffffff 	.word	0xffffffff
    2b2c:	ffffffff 	.word	0xffffffff
    2b30:	ffffffff 	.word	0xffffffff
    2b34:	ffffffff 	.word	0xffffffff
    2b38:	ffffffff 	.word	0xffffffff
    2b3c:	ffffffff 	.word	0xffffffff
    2b40:	ffffffff 	.word	0xffffffff
    2b44:	ffffffff 	.word	0xffffffff
    2b48:	ffffffff 	.word	0xffffffff
    2b4c:	ffffffff 	.word	0xffffffff
    2b50:	ffffffff 	.word	0xffffffff
    2b54:	ffffffff 	.word	0xffffffff
    2b58:	ffffffff 	.word	0xffffffff
    2b5c:	ffffffff 	.word	0xffffffff
    2b60:	ffffffff 	.word	0xffffffff
    2b64:	ffffffff 	.word	0xffffffff
    2b68:	ffffffff 	.word	0xffffffff
    2b6c:	ffffffff 	.word	0xffffffff
    2b70:	ffffffff 	.word	0xffffffff
    2b74:	ffffffff 	.word	0xffffffff
    2b78:	ffffffff 	.word	0xffffffff
    2b7c:	ffffffff 	.word	0xffffffff
    2b80:	ffffffff 	.word	0xffffffff
    2b84:	ffffffff 	.word	0xffffffff
    2b88:	ffffffff 	.word	0xffffffff
    2b8c:	ffffffff 	.word	0xffffffff
    2b90:	ffffffff 	.word	0xffffffff
    2b94:	ffffffff 	.word	0xffffffff
    2b98:	ffffffff 	.word	0xffffffff
    2b9c:	ffffffff 	.word	0xffffffff
    2ba0:	ffffffff 	.word	0xffffffff
    2ba4:	ffffffff 	.word	0xffffffff
    2ba8:	ffffffff 	.word	0xffffffff
    2bac:	ffffffff 	.word	0xffffffff
    2bb0:	ffffffff 	.word	0xffffffff
    2bb4:	ffffffff 	.word	0xffffffff
    2bb8:	ffffffff 	.word	0xffffffff
    2bbc:	ffffffff 	.word	0xffffffff
    2bc0:	ffffffff 	.word	0xffffffff
    2bc4:	ffffffff 	.word	0xffffffff
    2bc8:	ffffffff 	.word	0xffffffff
    2bcc:	ffffffff 	.word	0xffffffff
    2bd0:	ffffffff 	.word	0xffffffff
    2bd4:	ffffffff 	.word	0xffffffff
    2bd8:	ffffffff 	.word	0xffffffff
    2bdc:	ffffffff 	.word	0xffffffff
    2be0:	ffffffff 	.word	0xffffffff
    2be4:	ffffffff 	.word	0xffffffff
    2be8:	ffffffff 	.word	0xffffffff
    2bec:	ffffffff 	.word	0xffffffff
    2bf0:	ffffffff 	.word	0xffffffff
    2bf4:	ffffffff 	.word	0xffffffff
    2bf8:	ffffffff 	.word	0xffffffff
    2bfc:	ffffffff 	.word	0xffffffff
    2c00:	ffffffff 	.word	0xffffffff
    2c04:	ffffffff 	.word	0xffffffff
    2c08:	ffffffff 	.word	0xffffffff
    2c0c:	ffffffff 	.word	0xffffffff
    2c10:	ffffffff 	.word	0xffffffff
    2c14:	ffffffff 	.word	0xffffffff
    2c18:	ffffffff 	.word	0xffffffff
    2c1c:	ffffffff 	.word	0xffffffff
    2c20:	ffffffff 	.word	0xffffffff
    2c24:	ffffffff 	.word	0xffffffff
    2c28:	ffffffff 	.word	0xffffffff
    2c2c:	ffffffff 	.word	0xffffffff
    2c30:	ffffffff 	.word	0xffffffff
    2c34:	ffffffff 	.word	0xffffffff
    2c38:	ffffffff 	.word	0xffffffff
    2c3c:	ffffffff 	.word	0xffffffff
    2c40:	ffffffff 	.word	0xffffffff
    2c44:	ffffffff 	.word	0xffffffff
    2c48:	ffffffff 	.word	0xffffffff
    2c4c:	ffffffff 	.word	0xffffffff
    2c50:	ffffffff 	.word	0xffffffff
    2c54:	ffffffff 	.word	0xffffffff
    2c58:	ffffffff 	.word	0xffffffff
    2c5c:	ffffffff 	.word	0xffffffff
    2c60:	ffffffff 	.word	0xffffffff
    2c64:	ffffffff 	.word	0xffffffff
    2c68:	ffffffff 	.word	0xffffffff
    2c6c:	ffffffff 	.word	0xffffffff
    2c70:	ffffffff 	.word	0xffffffff
    2c74:	ffffffff 	.word	0xffffffff
    2c78:	ffffffff 	.word	0xffffffff
    2c7c:	ffffffff 	.word	0xffffffff
    2c80:	ffffffff 	.word	0xffffffff
    2c84:	ffffffff 	.word	0xffffffff
    2c88:	ffffffff 	.word	0xffffffff
    2c8c:	ffffffff 	.word	0xffffffff
    2c90:	ffffffff 	.word	0xffffffff
    2c94:	ffffffff 	.word	0xffffffff
    2c98:	ffffffff 	.word	0xffffffff
    2c9c:	ffffffff 	.word	0xffffffff
    2ca0:	ffffffff 	.word	0xffffffff
    2ca4:	ffffffff 	.word	0xffffffff
    2ca8:	ffffffff 	.word	0xffffffff
    2cac:	ffffffff 	.word	0xffffffff
    2cb0:	ffffffff 	.word	0xffffffff
    2cb4:	ffffffff 	.word	0xffffffff
    2cb8:	ffffffff 	.word	0xffffffff
    2cbc:	ffffffff 	.word	0xffffffff
    2cc0:	ffffffff 	.word	0xffffffff
    2cc4:	ffffffff 	.word	0xffffffff
    2cc8:	ffffffff 	.word	0xffffffff
    2ccc:	ffffffff 	.word	0xffffffff
    2cd0:	ffffffff 	.word	0xffffffff
    2cd4:	ffffffff 	.word	0xffffffff
    2cd8:	ffffffff 	.word	0xffffffff
    2cdc:	ffffffff 	.word	0xffffffff
    2ce0:	ffffffff 	.word	0xffffffff
    2ce4:	ffffffff 	.word	0xffffffff
    2ce8:	ffffffff 	.word	0xffffffff
    2cec:	ffffffff 	.word	0xffffffff
    2cf0:	ffffffff 	.word	0xffffffff
    2cf4:	ffffffff 	.word	0xffffffff
    2cf8:	ffffffff 	.word	0xffffffff
    2cfc:	ffffffff 	.word	0xffffffff
    2d00:	ffffffff 	.word	0xffffffff
    2d04:	ffffffff 	.word	0xffffffff
    2d08:	ffffffff 	.word	0xffffffff
    2d0c:	ffffffff 	.word	0xffffffff
    2d10:	ffffffff 	.word	0xffffffff
    2d14:	ffffffff 	.word	0xffffffff
    2d18:	ffffffff 	.word	0xffffffff
    2d1c:	ffffffff 	.word	0xffffffff
    2d20:	ffffffff 	.word	0xffffffff
    2d24:	ffffffff 	.word	0xffffffff
    2d28:	ffffffff 	.word	0xffffffff
    2d2c:	ffffffff 	.word	0xffffffff
    2d30:	ffffffff 	.word	0xffffffff
    2d34:	ffffffff 	.word	0xffffffff
    2d38:	ffffffff 	.word	0xffffffff
    2d3c:	ffffffff 	.word	0xffffffff
    2d40:	ffffffff 	.word	0xffffffff
    2d44:	ffffffff 	.word	0xffffffff
    2d48:	ffffffff 	.word	0xffffffff
    2d4c:	ffffffff 	.word	0xffffffff
    2d50:	ffffffff 	.word	0xffffffff
    2d54:	ffffffff 	.word	0xffffffff
    2d58:	ffffffff 	.word	0xffffffff
    2d5c:	ffffffff 	.word	0xffffffff
    2d60:	ffffffff 	.word	0xffffffff
    2d64:	ffffffff 	.word	0xffffffff
    2d68:	ffffffff 	.word	0xffffffff
    2d6c:	ffffffff 	.word	0xffffffff
    2d70:	ffffffff 	.word	0xffffffff
    2d74:	ffffffff 	.word	0xffffffff
    2d78:	ffffffff 	.word	0xffffffff
    2d7c:	ffffffff 	.word	0xffffffff
    2d80:	ffffffff 	.word	0xffffffff
    2d84:	ffffffff 	.word	0xffffffff
    2d88:	ffffffff 	.word	0xffffffff
    2d8c:	ffffffff 	.word	0xffffffff
    2d90:	ffffffff 	.word	0xffffffff
    2d94:	ffffffff 	.word	0xffffffff
    2d98:	ffffffff 	.word	0xffffffff
    2d9c:	ffffffff 	.word	0xffffffff
    2da0:	ffffffff 	.word	0xffffffff
    2da4:	ffffffff 	.word	0xffffffff
    2da8:	ffffffff 	.word	0xffffffff
    2dac:	ffffffff 	.word	0xffffffff
    2db0:	ffffffff 	.word	0xffffffff
    2db4:	ffffffff 	.word	0xffffffff
    2db8:	ffffffff 	.word	0xffffffff
    2dbc:	ffffffff 	.word	0xffffffff
    2dc0:	ffffffff 	.word	0xffffffff
    2dc4:	ffffffff 	.word	0xffffffff
    2dc8:	ffffffff 	.word	0xffffffff
    2dcc:	ffffffff 	.word	0xffffffff
    2dd0:	ffffffff 	.word	0xffffffff
    2dd4:	ffffffff 	.word	0xffffffff
    2dd8:	ffffffff 	.word	0xffffffff
    2ddc:	ffffffff 	.word	0xffffffff
    2de0:	ffffffff 	.word	0xffffffff
    2de4:	ffffffff 	.word	0xffffffff
    2de8:	ffffffff 	.word	0xffffffff
    2dec:	ffffffff 	.word	0xffffffff
    2df0:	ffffffff 	.word	0xffffffff
    2df4:	ffffffff 	.word	0xffffffff
    2df8:	ffffffff 	.word	0xffffffff
    2dfc:	ffffffff 	.word	0xffffffff
    2e00:	ffffffff 	.word	0xffffffff
    2e04:	ffffffff 	.word	0xffffffff
    2e08:	ffffffff 	.word	0xffffffff
    2e0c:	ffffffff 	.word	0xffffffff
    2e10:	ffffffff 	.word	0xffffffff
    2e14:	ffffffff 	.word	0xffffffff
    2e18:	ffffffff 	.word	0xffffffff
    2e1c:	ffffffff 	.word	0xffffffff
    2e20:	ffffffff 	.word	0xffffffff
    2e24:	ffffffff 	.word	0xffffffff
    2e28:	ffffffff 	.word	0xffffffff
    2e2c:	ffffffff 	.word	0xffffffff
    2e30:	ffffffff 	.word	0xffffffff
    2e34:	ffffffff 	.word	0xffffffff
    2e38:	ffffffff 	.word	0xffffffff
    2e3c:	ffffffff 	.word	0xffffffff
    2e40:	ffffffff 	.word	0xffffffff
    2e44:	ffffffff 	.word	0xffffffff
    2e48:	ffffffff 	.word	0xffffffff
    2e4c:	ffffffff 	.word	0xffffffff
    2e50:	ffffffff 	.word	0xffffffff
    2e54:	ffffffff 	.word	0xffffffff
    2e58:	ffffffff 	.word	0xffffffff
    2e5c:	ffffffff 	.word	0xffffffff
    2e60:	ffffffff 	.word	0xffffffff
    2e64:	ffffffff 	.word	0xffffffff
    2e68:	ffffffff 	.word	0xffffffff
    2e6c:	ffffffff 	.word	0xffffffff
    2e70:	ffffffff 	.word	0xffffffff
    2e74:	ffffffff 	.word	0xffffffff
    2e78:	ffffffff 	.word	0xffffffff
    2e7c:	ffffffff 	.word	0xffffffff
    2e80:	ffffffff 	.word	0xffffffff
    2e84:	ffffffff 	.word	0xffffffff
    2e88:	ffffffff 	.word	0xffffffff
    2e8c:	ffffffff 	.word	0xffffffff
    2e90:	ffffffff 	.word	0xffffffff
    2e94:	ffffffff 	.word	0xffffffff
    2e98:	ffffffff 	.word	0xffffffff
    2e9c:	ffffffff 	.word	0xffffffff
    2ea0:	ffffffff 	.word	0xffffffff
    2ea4:	ffffffff 	.word	0xffffffff
    2ea8:	ffffffff 	.word	0xffffffff
    2eac:	ffffffff 	.word	0xffffffff
    2eb0:	ffffffff 	.word	0xffffffff
    2eb4:	ffffffff 	.word	0xffffffff
    2eb8:	ffffffff 	.word	0xffffffff
    2ebc:	ffffffff 	.word	0xffffffff
    2ec0:	ffffffff 	.word	0xffffffff
    2ec4:	ffffffff 	.word	0xffffffff
    2ec8:	ffffffff 	.word	0xffffffff
    2ecc:	ffffffff 	.word	0xffffffff
    2ed0:	ffffffff 	.word	0xffffffff
    2ed4:	ffffffff 	.word	0xffffffff
    2ed8:	ffffffff 	.word	0xffffffff
    2edc:	ffffffff 	.word	0xffffffff
    2ee0:	ffffffff 	.word	0xffffffff
    2ee4:	ffffffff 	.word	0xffffffff
    2ee8:	ffffffff 	.word	0xffffffff
    2eec:	ffffffff 	.word	0xffffffff
    2ef0:	ffffffff 	.word	0xffffffff
    2ef4:	ffffffff 	.word	0xffffffff
    2ef8:	ffffffff 	.word	0xffffffff
    2efc:	ffffffff 	.word	0xffffffff
    2f00:	ffffffff 	.word	0xffffffff
    2f04:	ffffffff 	.word	0xffffffff
    2f08:	ffffffff 	.word	0xffffffff
    2f0c:	ffffffff 	.word	0xffffffff
    2f10:	ffffffff 	.word	0xffffffff
    2f14:	ffffffff 	.word	0xffffffff
    2f18:	ffffffff 	.word	0xffffffff
    2f1c:	ffffffff 	.word	0xffffffff
    2f20:	ffffffff 	.word	0xffffffff
    2f24:	ffffffff 	.word	0xffffffff
    2f28:	ffffffff 	.word	0xffffffff
    2f2c:	ffffffff 	.word	0xffffffff
    2f30:	ffffffff 	.word	0xffffffff
    2f34:	ffffffff 	.word	0xffffffff
    2f38:	ffffffff 	.word	0xffffffff
    2f3c:	ffffffff 	.word	0xffffffff
    2f40:	ffffffff 	.word	0xffffffff
    2f44:	ffffffff 	.word	0xffffffff
    2f48:	ffffffff 	.word	0xffffffff
    2f4c:	ffffffff 	.word	0xffffffff
    2f50:	ffffffff 	.word	0xffffffff
    2f54:	ffffffff 	.word	0xffffffff
    2f58:	ffffffff 	.word	0xffffffff
    2f5c:	ffffffff 	.word	0xffffffff
    2f60:	ffffffff 	.word	0xffffffff
    2f64:	ffffffff 	.word	0xffffffff
    2f68:	ffffffff 	.word	0xffffffff
    2f6c:	ffffffff 	.word	0xffffffff
    2f70:	ffffffff 	.word	0xffffffff
    2f74:	ffffffff 	.word	0xffffffff
    2f78:	ffffffff 	.word	0xffffffff
    2f7c:	ffffffff 	.word	0xffffffff
    2f80:	ffffffff 	.word	0xffffffff
    2f84:	ffffffff 	.word	0xffffffff
    2f88:	ffffffff 	.word	0xffffffff
    2f8c:	ffffffff 	.word	0xffffffff
    2f90:	ffffffff 	.word	0xffffffff
    2f94:	ffffffff 	.word	0xffffffff
    2f98:	ffffffff 	.word	0xffffffff
    2f9c:	ffffffff 	.word	0xffffffff
    2fa0:	ffffffff 	.word	0xffffffff
    2fa4:	ffffffff 	.word	0xffffffff
    2fa8:	ffffffff 	.word	0xffffffff
    2fac:	ffffffff 	.word	0xffffffff
    2fb0:	ffffffff 	.word	0xffffffff
    2fb4:	ffffffff 	.word	0xffffffff
    2fb8:	ffffffff 	.word	0xffffffff
    2fbc:	ffffffff 	.word	0xffffffff
    2fc0:	ffffffff 	.word	0xffffffff
    2fc4:	ffffffff 	.word	0xffffffff
    2fc8:	ffffffff 	.word	0xffffffff
    2fcc:	ffffffff 	.word	0xffffffff
    2fd0:	ffffffff 	.word	0xffffffff
    2fd4:	ffffffff 	.word	0xffffffff
    2fd8:	ffffffff 	.word	0xffffffff
    2fdc:	ffffffff 	.word	0xffffffff
    2fe0:	ffffffff 	.word	0xffffffff
    2fe4:	ffffffff 	.word	0xffffffff
    2fe8:	ffffffff 	.word	0xffffffff
    2fec:	ffffffff 	.word	0xffffffff
    2ff0:	ffffffff 	.word	0xffffffff
    2ff4:	ffffffff 	.word	0xffffffff
    2ff8:	ffffffff 	.word	0xffffffff
    2ffc:	ffffffff 	.word	0xffffffff
    3000:	ffffffff 	.word	0xffffffff
    3004:	ffffffff 	.word	0xffffffff
    3008:	ffffffff 	.word	0xffffffff
    300c:	ffffffff 	.word	0xffffffff
    3010:	ffffffff 	.word	0xffffffff
    3014:	ffffffff 	.word	0xffffffff
    3018:	ffffffff 	.word	0xffffffff
    301c:	ffffffff 	.word	0xffffffff
    3020:	ffffffff 	.word	0xffffffff
    3024:	ffffffff 	.word	0xffffffff
    3028:	ffffffff 	.word	0xffffffff
    302c:	ffffffff 	.word	0xffffffff
    3030:	ffffffff 	.word	0xffffffff
    3034:	ffffffff 	.word	0xffffffff
    3038:	ffffffff 	.word	0xffffffff
    303c:	ffffffff 	.word	0xffffffff
    3040:	ffffffff 	.word	0xffffffff
    3044:	ffffffff 	.word	0xffffffff
    3048:	ffffffff 	.word	0xffffffff
    304c:	ffffffff 	.word	0xffffffff
    3050:	ffffffff 	.word	0xffffffff
    3054:	ffffffff 	.word	0xffffffff
    3058:	ffffffff 	.word	0xffffffff
    305c:	ffffffff 	.word	0xffffffff
    3060:	ffffffff 	.word	0xffffffff
    3064:	ffffffff 	.word	0xffffffff
    3068:	ffffffff 	.word	0xffffffff
    306c:	ffffffff 	.word	0xffffffff
    3070:	ffffffff 	.word	0xffffffff
    3074:	ffffffff 	.word	0xffffffff
    3078:	ffffffff 	.word	0xffffffff
    307c:	ffffffff 	.word	0xffffffff
    3080:	ffffffff 	.word	0xffffffff
    3084:	ffffffff 	.word	0xffffffff
    3088:	ffffffff 	.word	0xffffffff
    308c:	ffffffff 	.word	0xffffffff
    3090:	ffffffff 	.word	0xffffffff
    3094:	ffffffff 	.word	0xffffffff
    3098:	ffffffff 	.word	0xffffffff
    309c:	ffffffff 	.word	0xffffffff
    30a0:	ffffffff 	.word	0xffffffff
    30a4:	ffffffff 	.word	0xffffffff
    30a8:	ffffffff 	.word	0xffffffff
    30ac:	ffffffff 	.word	0xffffffff
    30b0:	ffffffff 	.word	0xffffffff
    30b4:	ffffffff 	.word	0xffffffff
    30b8:	ffffffff 	.word	0xffffffff
    30bc:	ffffffff 	.word	0xffffffff
    30c0:	ffffffff 	.word	0xffffffff
    30c4:	ffffffff 	.word	0xffffffff
    30c8:	ffffffff 	.word	0xffffffff
    30cc:	ffffffff 	.word	0xffffffff
    30d0:	ffffffff 	.word	0xffffffff
    30d4:	ffffffff 	.word	0xffffffff
    30d8:	ffffffff 	.word	0xffffffff
    30dc:	ffffffff 	.word	0xffffffff
    30e0:	ffffffff 	.word	0xffffffff
    30e4:	ffffffff 	.word	0xffffffff
    30e8:	ffffffff 	.word	0xffffffff
    30ec:	ffffffff 	.word	0xffffffff
    30f0:	ffffffff 	.word	0xffffffff
    30f4:	ffffffff 	.word	0xffffffff
    30f8:	ffffffff 	.word	0xffffffff
    30fc:	ffffffff 	.word	0xffffffff
    3100:	ffffffff 	.word	0xffffffff
    3104:	ffffffff 	.word	0xffffffff
    3108:	ffffffff 	.word	0xffffffff
    310c:	ffffffff 	.word	0xffffffff
    3110:	ffffffff 	.word	0xffffffff
    3114:	ffffffff 	.word	0xffffffff
    3118:	ffffffff 	.word	0xffffffff
    311c:	ffffffff 	.word	0xffffffff
    3120:	ffffffff 	.word	0xffffffff
    3124:	ffffffff 	.word	0xffffffff
    3128:	ffffffff 	.word	0xffffffff
    312c:	ffffffff 	.word	0xffffffff
    3130:	ffffffff 	.word	0xffffffff
    3134:	ffffffff 	.word	0xffffffff
    3138:	ffffffff 	.word	0xffffffff
    313c:	ffffffff 	.word	0xffffffff
    3140:	ffffffff 	.word	0xffffffff
    3144:	ffffffff 	.word	0xffffffff
    3148:	ffffffff 	.word	0xffffffff
    314c:	ffffffff 	.word	0xffffffff
    3150:	ffffffff 	.word	0xffffffff
    3154:	ffffffff 	.word	0xffffffff
    3158:	ffffffff 	.word	0xffffffff
    315c:	ffffffff 	.word	0xffffffff
    3160:	ffffffff 	.word	0xffffffff
    3164:	ffffffff 	.word	0xffffffff
    3168:	ffffffff 	.word	0xffffffff
    316c:	ffffffff 	.word	0xffffffff
    3170:	ffffffff 	.word	0xffffffff
    3174:	ffffffff 	.word	0xffffffff
    3178:	ffffffff 	.word	0xffffffff
    317c:	ffffffff 	.word	0xffffffff
    3180:	ffffffff 	.word	0xffffffff
    3184:	ffffffff 	.word	0xffffffff
    3188:	ffffffff 	.word	0xffffffff
    318c:	ffffffff 	.word	0xffffffff
    3190:	ffffffff 	.word	0xffffffff
    3194:	ffffffff 	.word	0xffffffff
    3198:	ffffffff 	.word	0xffffffff
    319c:	ffffffff 	.word	0xffffffff
    31a0:	ffffffff 	.word	0xffffffff
    31a4:	ffffffff 	.word	0xffffffff
    31a8:	ffffffff 	.word	0xffffffff
    31ac:	ffffffff 	.word	0xffffffff
    31b0:	ffffffff 	.word	0xffffffff
    31b4:	ffffffff 	.word	0xffffffff
    31b8:	ffffffff 	.word	0xffffffff
    31bc:	ffffffff 	.word	0xffffffff
    31c0:	ffffffff 	.word	0xffffffff
    31c4:	ffffffff 	.word	0xffffffff
    31c8:	ffffffff 	.word	0xffffffff
    31cc:	ffffffff 	.word	0xffffffff
    31d0:	ffffffff 	.word	0xffffffff
    31d4:	ffffffff 	.word	0xffffffff
    31d8:	ffffffff 	.word	0xffffffff
    31dc:	ffffffff 	.word	0xffffffff
    31e0:	ffffffff 	.word	0xffffffff
    31e4:	ffffffff 	.word	0xffffffff
    31e8:	ffffffff 	.word	0xffffffff
    31ec:	ffffffff 	.word	0xffffffff
    31f0:	ffffffff 	.word	0xffffffff
    31f4:	ffffffff 	.word	0xffffffff
    31f8:	ffffffff 	.word	0xffffffff
    31fc:	ffffffff 	.word	0xffffffff
    3200:	ffffffff 	.word	0xffffffff
    3204:	ffffffff 	.word	0xffffffff
    3208:	ffffffff 	.word	0xffffffff
    320c:	ffffffff 	.word	0xffffffff
    3210:	ffffffff 	.word	0xffffffff
    3214:	ffffffff 	.word	0xffffffff
    3218:	ffffffff 	.word	0xffffffff
    321c:	ffffffff 	.word	0xffffffff
    3220:	ffffffff 	.word	0xffffffff
    3224:	ffffffff 	.word	0xffffffff
    3228:	ffffffff 	.word	0xffffffff
    322c:	ffffffff 	.word	0xffffffff
    3230:	ffffffff 	.word	0xffffffff
    3234:	ffffffff 	.word	0xffffffff
    3238:	ffffffff 	.word	0xffffffff
    323c:	ffffffff 	.word	0xffffffff
    3240:	ffffffff 	.word	0xffffffff
    3244:	ffffffff 	.word	0xffffffff
    3248:	ffffffff 	.word	0xffffffff
    324c:	ffffffff 	.word	0xffffffff
    3250:	ffffffff 	.word	0xffffffff
    3254:	ffffffff 	.word	0xffffffff
    3258:	ffffffff 	.word	0xffffffff
    325c:	ffffffff 	.word	0xffffffff
    3260:	ffffffff 	.word	0xffffffff
    3264:	ffffffff 	.word	0xffffffff
    3268:	ffffffff 	.word	0xffffffff
    326c:	ffffffff 	.word	0xffffffff
    3270:	ffffffff 	.word	0xffffffff
    3274:	ffffffff 	.word	0xffffffff
    3278:	ffffffff 	.word	0xffffffff
    327c:	ffffffff 	.word	0xffffffff
    3280:	ffffffff 	.word	0xffffffff
    3284:	ffffffff 	.word	0xffffffff
    3288:	ffffffff 	.word	0xffffffff
    328c:	ffffffff 	.word	0xffffffff
    3290:	ffffffff 	.word	0xffffffff
    3294:	ffffffff 	.word	0xffffffff
    3298:	ffffffff 	.word	0xffffffff
    329c:	ffffffff 	.word	0xffffffff
    32a0:	ffffffff 	.word	0xffffffff
    32a4:	ffffffff 	.word	0xffffffff
    32a8:	ffffffff 	.word	0xffffffff
    32ac:	ffffffff 	.word	0xffffffff
    32b0:	ffffffff 	.word	0xffffffff
    32b4:	ffffffff 	.word	0xffffffff
    32b8:	ffffffff 	.word	0xffffffff
    32bc:	ffffffff 	.word	0xffffffff
    32c0:	ffffffff 	.word	0xffffffff
    32c4:	ffffffff 	.word	0xffffffff
    32c8:	ffffffff 	.word	0xffffffff
    32cc:	ffffffff 	.word	0xffffffff
    32d0:	ffffffff 	.word	0xffffffff
    32d4:	ffffffff 	.word	0xffffffff
    32d8:	ffffffff 	.word	0xffffffff
    32dc:	ffffffff 	.word	0xffffffff
    32e0:	ffffffff 	.word	0xffffffff
    32e4:	ffffffff 	.word	0xffffffff
    32e8:	ffffffff 	.word	0xffffffff
    32ec:	ffffffff 	.word	0xffffffff
    32f0:	ffffffff 	.word	0xffffffff
    32f4:	ffffffff 	.word	0xffffffff
    32f8:	ffffffff 	.word	0xffffffff
    32fc:	ffffffff 	.word	0xffffffff
    3300:	ffffffff 	.word	0xffffffff
    3304:	ffffffff 	.word	0xffffffff
    3308:	ffffffff 	.word	0xffffffff
    330c:	ffffffff 	.word	0xffffffff
    3310:	ffffffff 	.word	0xffffffff
    3314:	ffffffff 	.word	0xffffffff
    3318:	ffffffff 	.word	0xffffffff
    331c:	ffffffff 	.word	0xffffffff
    3320:	ffffffff 	.word	0xffffffff
    3324:	ffffffff 	.word	0xffffffff
    3328:	ffffffff 	.word	0xffffffff
    332c:	ffffffff 	.word	0xffffffff
    3330:	ffffffff 	.word	0xffffffff
    3334:	ffffffff 	.word	0xffffffff
    3338:	ffffffff 	.word	0xffffffff
    333c:	ffffffff 	.word	0xffffffff
    3340:	ffffffff 	.word	0xffffffff
    3344:	ffffffff 	.word	0xffffffff
    3348:	ffffffff 	.word	0xffffffff
    334c:	ffffffff 	.word	0xffffffff
    3350:	ffffffff 	.word	0xffffffff
    3354:	ffffffff 	.word	0xffffffff
    3358:	ffffffff 	.word	0xffffffff
    335c:	ffffffff 	.word	0xffffffff
    3360:	ffffffff 	.word	0xffffffff
    3364:	ffffffff 	.word	0xffffffff
    3368:	ffffffff 	.word	0xffffffff
    336c:	ffffffff 	.word	0xffffffff
    3370:	ffffffff 	.word	0xffffffff
    3374:	ffffffff 	.word	0xffffffff
    3378:	ffffffff 	.word	0xffffffff
    337c:	ffffffff 	.word	0xffffffff
    3380:	ffffffff 	.word	0xffffffff
    3384:	ffffffff 	.word	0xffffffff
    3388:	ffffffff 	.word	0xffffffff
    338c:	ffffffff 	.word	0xffffffff
    3390:	ffffffff 	.word	0xffffffff
    3394:	ffffffff 	.word	0xffffffff
    3398:	ffffffff 	.word	0xffffffff
    339c:	ffffffff 	.word	0xffffffff
    33a0:	ffffffff 	.word	0xffffffff
    33a4:	ffffffff 	.word	0xffffffff
    33a8:	ffffffff 	.word	0xffffffff
    33ac:	ffffffff 	.word	0xffffffff
    33b0:	ffffffff 	.word	0xffffffff
    33b4:	ffffffff 	.word	0xffffffff
    33b8:	ffffffff 	.word	0xffffffff
    33bc:	ffffffff 	.word	0xffffffff
    33c0:	ffffffff 	.word	0xffffffff
    33c4:	ffffffff 	.word	0xffffffff
    33c8:	ffffffff 	.word	0xffffffff
    33cc:	ffffffff 	.word	0xffffffff
    33d0:	ffffffff 	.word	0xffffffff
    33d4:	ffffffff 	.word	0xffffffff
    33d8:	ffffffff 	.word	0xffffffff
    33dc:	ffffffff 	.word	0xffffffff
    33e0:	ffffffff 	.word	0xffffffff
    33e4:	ffffffff 	.word	0xffffffff
    33e8:	ffffffff 	.word	0xffffffff
    33ec:	ffffffff 	.word	0xffffffff
    33f0:	ffffffff 	.word	0xffffffff
    33f4:	ffffffff 	.word	0xffffffff
    33f8:	ffffffff 	.word	0xffffffff
    33fc:	ffffffff 	.word	0xffffffff
    3400:	ffffffff 	.word	0xffffffff
    3404:	ffffffff 	.word	0xffffffff
    3408:	ffffffff 	.word	0xffffffff
    340c:	ffffffff 	.word	0xffffffff
    3410:	ffffffff 	.word	0xffffffff
    3414:	ffffffff 	.word	0xffffffff
    3418:	ffffffff 	.word	0xffffffff
    341c:	ffffffff 	.word	0xffffffff
    3420:	ffffffff 	.word	0xffffffff
    3424:	ffffffff 	.word	0xffffffff
    3428:	ffffffff 	.word	0xffffffff
    342c:	ffffffff 	.word	0xffffffff
    3430:	ffffffff 	.word	0xffffffff
    3434:	ffffffff 	.word	0xffffffff
    3438:	ffffffff 	.word	0xffffffff
    343c:	ffffffff 	.word	0xffffffff
    3440:	ffffffff 	.word	0xffffffff
    3444:	ffffffff 	.word	0xffffffff
    3448:	ffffffff 	.word	0xffffffff
    344c:	ffffffff 	.word	0xffffffff
    3450:	ffffffff 	.word	0xffffffff
    3454:	ffffffff 	.word	0xffffffff
    3458:	ffffffff 	.word	0xffffffff
    345c:	ffffffff 	.word	0xffffffff
    3460:	ffffffff 	.word	0xffffffff
    3464:	ffffffff 	.word	0xffffffff
    3468:	ffffffff 	.word	0xffffffff
    346c:	ffffffff 	.word	0xffffffff
    3470:	ffffffff 	.word	0xffffffff
    3474:	ffffffff 	.word	0xffffffff
    3478:	ffffffff 	.word	0xffffffff
    347c:	ffffffff 	.word	0xffffffff
    3480:	ffffffff 	.word	0xffffffff
    3484:	ffffffff 	.word	0xffffffff
    3488:	ffffffff 	.word	0xffffffff
    348c:	ffffffff 	.word	0xffffffff
    3490:	ffffffff 	.word	0xffffffff
    3494:	ffffffff 	.word	0xffffffff
    3498:	ffffffff 	.word	0xffffffff
    349c:	ffffffff 	.word	0xffffffff
    34a0:	ffffffff 	.word	0xffffffff
    34a4:	ffffffff 	.word	0xffffffff
    34a8:	ffffffff 	.word	0xffffffff
    34ac:	ffffffff 	.word	0xffffffff
    34b0:	ffffffff 	.word	0xffffffff
    34b4:	ffffffff 	.word	0xffffffff
    34b8:	ffffffff 	.word	0xffffffff
    34bc:	ffffffff 	.word	0xffffffff
    34c0:	ffffffff 	.word	0xffffffff
    34c4:	ffffffff 	.word	0xffffffff
    34c8:	ffffffff 	.word	0xffffffff
    34cc:	ffffffff 	.word	0xffffffff
    34d0:	ffffffff 	.word	0xffffffff
    34d4:	ffffffff 	.word	0xffffffff
    34d8:	ffffffff 	.word	0xffffffff
    34dc:	ffffffff 	.word	0xffffffff
    34e0:	ffffffff 	.word	0xffffffff
    34e4:	ffffffff 	.word	0xffffffff
    34e8:	ffffffff 	.word	0xffffffff
    34ec:	ffffffff 	.word	0xffffffff
    34f0:	ffffffff 	.word	0xffffffff
    34f4:	ffffffff 	.word	0xffffffff
    34f8:	ffffffff 	.word	0xffffffff
    34fc:	ffffffff 	.word	0xffffffff
    3500:	ffffffff 	.word	0xffffffff
    3504:	ffffffff 	.word	0xffffffff
    3508:	ffffffff 	.word	0xffffffff
    350c:	ffffffff 	.word	0xffffffff
    3510:	ffffffff 	.word	0xffffffff
    3514:	ffffffff 	.word	0xffffffff
    3518:	ffffffff 	.word	0xffffffff
    351c:	ffffffff 	.word	0xffffffff
    3520:	ffffffff 	.word	0xffffffff
    3524:	ffffffff 	.word	0xffffffff
    3528:	ffffffff 	.word	0xffffffff
    352c:	ffffffff 	.word	0xffffffff
    3530:	ffffffff 	.word	0xffffffff
    3534:	ffffffff 	.word	0xffffffff
    3538:	ffffffff 	.word	0xffffffff
    353c:	ffffffff 	.word	0xffffffff
    3540:	ffffffff 	.word	0xffffffff
    3544:	ffffffff 	.word	0xffffffff
    3548:	ffffffff 	.word	0xffffffff
    354c:	ffffffff 	.word	0xffffffff
    3550:	ffffffff 	.word	0xffffffff
    3554:	ffffffff 	.word	0xffffffff
    3558:	ffffffff 	.word	0xffffffff
    355c:	ffffffff 	.word	0xffffffff
    3560:	ffffffff 	.word	0xffffffff
    3564:	ffffffff 	.word	0xffffffff
    3568:	ffffffff 	.word	0xffffffff
    356c:	ffffffff 	.word	0xffffffff
    3570:	ffffffff 	.word	0xffffffff
    3574:	ffffffff 	.word	0xffffffff
    3578:	ffffffff 	.word	0xffffffff
    357c:	ffffffff 	.word	0xffffffff
    3580:	ffffffff 	.word	0xffffffff
    3584:	ffffffff 	.word	0xffffffff
    3588:	ffffffff 	.word	0xffffffff
    358c:	ffffffff 	.word	0xffffffff
    3590:	ffffffff 	.word	0xffffffff
    3594:	ffffffff 	.word	0xffffffff
    3598:	ffffffff 	.word	0xffffffff
    359c:	ffffffff 	.word	0xffffffff
    35a0:	ffffffff 	.word	0xffffffff
    35a4:	ffffffff 	.word	0xffffffff
    35a8:	ffffffff 	.word	0xffffffff
    35ac:	ffffffff 	.word	0xffffffff
    35b0:	ffffffff 	.word	0xffffffff
    35b4:	ffffffff 	.word	0xffffffff
    35b8:	ffffffff 	.word	0xffffffff
    35bc:	ffffffff 	.word	0xffffffff
    35c0:	ffffffff 	.word	0xffffffff
    35c4:	ffffffff 	.word	0xffffffff
    35c8:	ffffffff 	.word	0xffffffff
    35cc:	ffffffff 	.word	0xffffffff
    35d0:	ffffffff 	.word	0xffffffff
    35d4:	ffffffff 	.word	0xffffffff
    35d8:	ffffffff 	.word	0xffffffff
    35dc:	ffffffff 	.word	0xffffffff
    35e0:	ffffffff 	.word	0xffffffff
    35e4:	ffffffff 	.word	0xffffffff
    35e8:	ffffffff 	.word	0xffffffff
    35ec:	ffffffff 	.word	0xffffffff
    35f0:	ffffffff 	.word	0xffffffff
    35f4:	ffffffff 	.word	0xffffffff
    35f8:	ffffffff 	.word	0xffffffff
    35fc:	ffffffff 	.word	0xffffffff
    3600:	ffffffff 	.word	0xffffffff
    3604:	ffffffff 	.word	0xffffffff
    3608:	ffffffff 	.word	0xffffffff
    360c:	ffffffff 	.word	0xffffffff
    3610:	ffffffff 	.word	0xffffffff
    3614:	ffffffff 	.word	0xffffffff
    3618:	ffffffff 	.word	0xffffffff
    361c:	ffffffff 	.word	0xffffffff
    3620:	ffffffff 	.word	0xffffffff
    3624:	ffffffff 	.word	0xffffffff
    3628:	ffffffff 	.word	0xffffffff
    362c:	ffffffff 	.word	0xffffffff
    3630:	ffffffff 	.word	0xffffffff
    3634:	ffffffff 	.word	0xffffffff
    3638:	ffffffff 	.word	0xffffffff
    363c:	ffffffff 	.word	0xffffffff
    3640:	ffffffff 	.word	0xffffffff
    3644:	ffffffff 	.word	0xffffffff
    3648:	ffffffff 	.word	0xffffffff
    364c:	ffffffff 	.word	0xffffffff
    3650:	ffffffff 	.word	0xffffffff
    3654:	ffffffff 	.word	0xffffffff
    3658:	ffffffff 	.word	0xffffffff
    365c:	ffffffff 	.word	0xffffffff
    3660:	ffffffff 	.word	0xffffffff
    3664:	ffffffff 	.word	0xffffffff
    3668:	ffffffff 	.word	0xffffffff
    366c:	ffffffff 	.word	0xffffffff
    3670:	ffffffff 	.word	0xffffffff
    3674:	ffffffff 	.word	0xffffffff
    3678:	ffffffff 	.word	0xffffffff
    367c:	ffffffff 	.word	0xffffffff
    3680:	ffffffff 	.word	0xffffffff
    3684:	ffffffff 	.word	0xffffffff
    3688:	ffffffff 	.word	0xffffffff
    368c:	ffffffff 	.word	0xffffffff
    3690:	ffffffff 	.word	0xffffffff
    3694:	ffffffff 	.word	0xffffffff
    3698:	ffffffff 	.word	0xffffffff
    369c:	ffffffff 	.word	0xffffffff
    36a0:	ffffffff 	.word	0xffffffff
    36a4:	ffffffff 	.word	0xffffffff
    36a8:	ffffffff 	.word	0xffffffff
    36ac:	ffffffff 	.word	0xffffffff
    36b0:	ffffffff 	.word	0xffffffff
    36b4:	ffffffff 	.word	0xffffffff
    36b8:	ffffffff 	.word	0xffffffff
    36bc:	ffffffff 	.word	0xffffffff
    36c0:	ffffffff 	.word	0xffffffff
    36c4:	ffffffff 	.word	0xffffffff
    36c8:	ffffffff 	.word	0xffffffff
    36cc:	ffffffff 	.word	0xffffffff
    36d0:	ffffffff 	.word	0xffffffff
    36d4:	ffffffff 	.word	0xffffffff
    36d8:	ffffffff 	.word	0xffffffff
    36dc:	ffffffff 	.word	0xffffffff
    36e0:	ffffffff 	.word	0xffffffff
    36e4:	ffffffff 	.word	0xffffffff
    36e8:	ffffffff 	.word	0xffffffff
    36ec:	ffffffff 	.word	0xffffffff
    36f0:	ffffffff 	.word	0xffffffff
    36f4:	ffffffff 	.word	0xffffffff
    36f8:	ffffffff 	.word	0xffffffff
    36fc:	ffffffff 	.word	0xffffffff
    3700:	ffffffff 	.word	0xffffffff
    3704:	ffffffff 	.word	0xffffffff
    3708:	ffffffff 	.word	0xffffffff
    370c:	ffffffff 	.word	0xffffffff
    3710:	ffffffff 	.word	0xffffffff
    3714:	ffffffff 	.word	0xffffffff
    3718:	ffffffff 	.word	0xffffffff
    371c:	ffffffff 	.word	0xffffffff
    3720:	ffffffff 	.word	0xffffffff
    3724:	ffffffff 	.word	0xffffffff
    3728:	ffffffff 	.word	0xffffffff
    372c:	ffffffff 	.word	0xffffffff
    3730:	ffffffff 	.word	0xffffffff
    3734:	ffffffff 	.word	0xffffffff
    3738:	ffffffff 	.word	0xffffffff
    373c:	ffffffff 	.word	0xffffffff
    3740:	ffffffff 	.word	0xffffffff
    3744:	ffffffff 	.word	0xffffffff
    3748:	ffffffff 	.word	0xffffffff
    374c:	ffffffff 	.word	0xffffffff
    3750:	ffffffff 	.word	0xffffffff
    3754:	ffffffff 	.word	0xffffffff
    3758:	ffffffff 	.word	0xffffffff
    375c:	ffffffff 	.word	0xffffffff
    3760:	ffffffff 	.word	0xffffffff
    3764:	ffffffff 	.word	0xffffffff
    3768:	ffffffff 	.word	0xffffffff
    376c:	ffffffff 	.word	0xffffffff
    3770:	ffffffff 	.word	0xffffffff
    3774:	ffffffff 	.word	0xffffffff
    3778:	ffffffff 	.word	0xffffffff
    377c:	ffffffff 	.word	0xffffffff
    3780:	ffffffff 	.word	0xffffffff
    3784:	ffffffff 	.word	0xffffffff
    3788:	ffffffff 	.word	0xffffffff
    378c:	ffffffff 	.word	0xffffffff
    3790:	ffffffff 	.word	0xffffffff
    3794:	ffffffff 	.word	0xffffffff
    3798:	ffffffff 	.word	0xffffffff
    379c:	ffffffff 	.word	0xffffffff
    37a0:	ffffffff 	.word	0xffffffff
    37a4:	ffffffff 	.word	0xffffffff
    37a8:	ffffffff 	.word	0xffffffff
    37ac:	ffffffff 	.word	0xffffffff
    37b0:	ffffffff 	.word	0xffffffff
    37b4:	ffffffff 	.word	0xffffffff
    37b8:	ffffffff 	.word	0xffffffff
    37bc:	ffffffff 	.word	0xffffffff
    37c0:	ffffffff 	.word	0xffffffff
    37c4:	ffffffff 	.word	0xffffffff
    37c8:	ffffffff 	.word	0xffffffff
    37cc:	ffffffff 	.word	0xffffffff
    37d0:	ffffffff 	.word	0xffffffff
    37d4:	ffffffff 	.word	0xffffffff
    37d8:	ffffffff 	.word	0xffffffff
    37dc:	ffffffff 	.word	0xffffffff
    37e0:	ffffffff 	.word	0xffffffff
    37e4:	ffffffff 	.word	0xffffffff
    37e8:	ffffffff 	.word	0xffffffff
    37ec:	ffffffff 	.word	0xffffffff
    37f0:	ffffffff 	.word	0xffffffff
    37f4:	ffffffff 	.word	0xffffffff
    37f8:	ffffffff 	.word	0xffffffff
    37fc:	ffffffff 	.word	0xffffffff
    3800:	ffffffff 	.word	0xffffffff
    3804:	ffffffff 	.word	0xffffffff
    3808:	ffffffff 	.word	0xffffffff
    380c:	ffffffff 	.word	0xffffffff
    3810:	ffffffff 	.word	0xffffffff
    3814:	ffffffff 	.word	0xffffffff
    3818:	ffffffff 	.word	0xffffffff
    381c:	ffffffff 	.word	0xffffffff
    3820:	ffffffff 	.word	0xffffffff
    3824:	ffffffff 	.word	0xffffffff
    3828:	ffffffff 	.word	0xffffffff
    382c:	ffffffff 	.word	0xffffffff
    3830:	ffffffff 	.word	0xffffffff
    3834:	ffffffff 	.word	0xffffffff
    3838:	ffffffff 	.word	0xffffffff
    383c:	ffffffff 	.word	0xffffffff
    3840:	ffffffff 	.word	0xffffffff
    3844:	ffffffff 	.word	0xffffffff
    3848:	ffffffff 	.word	0xffffffff
    384c:	ffffffff 	.word	0xffffffff
    3850:	ffffffff 	.word	0xffffffff
    3854:	ffffffff 	.word	0xffffffff
    3858:	ffffffff 	.word	0xffffffff
    385c:	ffffffff 	.word	0xffffffff
    3860:	ffffffff 	.word	0xffffffff
    3864:	ffffffff 	.word	0xffffffff
    3868:	ffffffff 	.word	0xffffffff
    386c:	ffffffff 	.word	0xffffffff
    3870:	ffffffff 	.word	0xffffffff
    3874:	ffffffff 	.word	0xffffffff
    3878:	ffffffff 	.word	0xffffffff
    387c:	ffffffff 	.word	0xffffffff
    3880:	ffffffff 	.word	0xffffffff
    3884:	ffffffff 	.word	0xffffffff
    3888:	ffffffff 	.word	0xffffffff
    388c:	ffffffff 	.word	0xffffffff
    3890:	ffffffff 	.word	0xffffffff
    3894:	ffffffff 	.word	0xffffffff
    3898:	ffffffff 	.word	0xffffffff
    389c:	ffffffff 	.word	0xffffffff
    38a0:	ffffffff 	.word	0xffffffff
    38a4:	ffffffff 	.word	0xffffffff
    38a8:	ffffffff 	.word	0xffffffff
    38ac:	ffffffff 	.word	0xffffffff
    38b0:	ffffffff 	.word	0xffffffff
    38b4:	ffffffff 	.word	0xffffffff
    38b8:	ffffffff 	.word	0xffffffff
    38bc:	ffffffff 	.word	0xffffffff
    38c0:	ffffffff 	.word	0xffffffff
    38c4:	ffffffff 	.word	0xffffffff
    38c8:	ffffffff 	.word	0xffffffff
    38cc:	ffffffff 	.word	0xffffffff
    38d0:	ffffffff 	.word	0xffffffff
    38d4:	ffffffff 	.word	0xffffffff
    38d8:	ffffffff 	.word	0xffffffff
    38dc:	ffffffff 	.word	0xffffffff
    38e0:	ffffffff 	.word	0xffffffff
    38e4:	ffffffff 	.word	0xffffffff
    38e8:	ffffffff 	.word	0xffffffff
    38ec:	ffffffff 	.word	0xffffffff
    38f0:	ffffffff 	.word	0xffffffff
    38f4:	ffffffff 	.word	0xffffffff
    38f8:	ffffffff 	.word	0xffffffff
    38fc:	ffffffff 	.word	0xffffffff
    3900:	ffffffff 	.word	0xffffffff
    3904:	ffffffff 	.word	0xffffffff
    3908:	ffffffff 	.word	0xffffffff
    390c:	ffffffff 	.word	0xffffffff
    3910:	ffffffff 	.word	0xffffffff
    3914:	ffffffff 	.word	0xffffffff
    3918:	ffffffff 	.word	0xffffffff
    391c:	ffffffff 	.word	0xffffffff
    3920:	ffffffff 	.word	0xffffffff
    3924:	ffffffff 	.word	0xffffffff
    3928:	ffffffff 	.word	0xffffffff
    392c:	ffffffff 	.word	0xffffffff
    3930:	ffffffff 	.word	0xffffffff
    3934:	ffffffff 	.word	0xffffffff
    3938:	ffffffff 	.word	0xffffffff
    393c:	ffffffff 	.word	0xffffffff
    3940:	ffffffff 	.word	0xffffffff
    3944:	ffffffff 	.word	0xffffffff
    3948:	ffffffff 	.word	0xffffffff
    394c:	ffffffff 	.word	0xffffffff
    3950:	ffffffff 	.word	0xffffffff
    3954:	ffffffff 	.word	0xffffffff
    3958:	ffffffff 	.word	0xffffffff
    395c:	ffffffff 	.word	0xffffffff
    3960:	ffffffff 	.word	0xffffffff
    3964:	ffffffff 	.word	0xffffffff
    3968:	ffffffff 	.word	0xffffffff
    396c:	ffffffff 	.word	0xffffffff
    3970:	ffffffff 	.word	0xffffffff
    3974:	ffffffff 	.word	0xffffffff
    3978:	ffffffff 	.word	0xffffffff
    397c:	ffffffff 	.word	0xffffffff
    3980:	ffffffff 	.word	0xffffffff
    3984:	ffffffff 	.word	0xffffffff
    3988:	ffffffff 	.word	0xffffffff
    398c:	ffffffff 	.word	0xffffffff
    3990:	ffffffff 	.word	0xffffffff
    3994:	ffffffff 	.word	0xffffffff
    3998:	ffffffff 	.word	0xffffffff
    399c:	ffffffff 	.word	0xffffffff
    39a0:	ffffffff 	.word	0xffffffff
    39a4:	ffffffff 	.word	0xffffffff
    39a8:	ffffffff 	.word	0xffffffff
    39ac:	ffffffff 	.word	0xffffffff
    39b0:	ffffffff 	.word	0xffffffff
    39b4:	ffffffff 	.word	0xffffffff
    39b8:	ffffffff 	.word	0xffffffff
    39bc:	ffffffff 	.word	0xffffffff
    39c0:	ffffffff 	.word	0xffffffff
    39c4:	ffffffff 	.word	0xffffffff
    39c8:	ffffffff 	.word	0xffffffff
    39cc:	ffffffff 	.word	0xffffffff
    39d0:	ffffffff 	.word	0xffffffff
    39d4:	ffffffff 	.word	0xffffffff
    39d8:	ffffffff 	.word	0xffffffff
    39dc:	ffffffff 	.word	0xffffffff
    39e0:	ffffffff 	.word	0xffffffff
    39e4:	ffffffff 	.word	0xffffffff
    39e8:	ffffffff 	.word	0xffffffff
    39ec:	ffffffff 	.word	0xffffffff
    39f0:	ffffffff 	.word	0xffffffff
    39f4:	ffffffff 	.word	0xffffffff
    39f8:	ffffffff 	.word	0xffffffff
    39fc:	ffffffff 	.word	0xffffffff
    3a00:	ffffffff 	.word	0xffffffff
    3a04:	ffffffff 	.word	0xffffffff
    3a08:	ffffffff 	.word	0xffffffff
    3a0c:	ffffffff 	.word	0xffffffff
    3a10:	ffffffff 	.word	0xffffffff
    3a14:	ffffffff 	.word	0xffffffff
    3a18:	ffffffff 	.word	0xffffffff
    3a1c:	ffffffff 	.word	0xffffffff
    3a20:	ffffffff 	.word	0xffffffff
    3a24:	ffffffff 	.word	0xffffffff
    3a28:	ffffffff 	.word	0xffffffff
    3a2c:	ffffffff 	.word	0xffffffff
    3a30:	ffffffff 	.word	0xffffffff
    3a34:	ffffffff 	.word	0xffffffff
    3a38:	ffffffff 	.word	0xffffffff
    3a3c:	ffffffff 	.word	0xffffffff
    3a40:	ffffffff 	.word	0xffffffff
    3a44:	ffffffff 	.word	0xffffffff
    3a48:	ffffffff 	.word	0xffffffff
    3a4c:	ffffffff 	.word	0xffffffff
    3a50:	ffffffff 	.word	0xffffffff
    3a54:	ffffffff 	.word	0xffffffff
    3a58:	ffffffff 	.word	0xffffffff
    3a5c:	ffffffff 	.word	0xffffffff
    3a60:	ffffffff 	.word	0xffffffff
    3a64:	ffffffff 	.word	0xffffffff
    3a68:	ffffffff 	.word	0xffffffff
    3a6c:	ffffffff 	.word	0xffffffff
    3a70:	ffffffff 	.word	0xffffffff
    3a74:	ffffffff 	.word	0xffffffff
    3a78:	ffffffff 	.word	0xffffffff
    3a7c:	ffffffff 	.word	0xffffffff
    3a80:	ffffffff 	.word	0xffffffff
    3a84:	ffffffff 	.word	0xffffffff
    3a88:	ffffffff 	.word	0xffffffff
    3a8c:	ffffffff 	.word	0xffffffff
    3a90:	ffffffff 	.word	0xffffffff
    3a94:	ffffffff 	.word	0xffffffff
    3a98:	ffffffff 	.word	0xffffffff
    3a9c:	ffffffff 	.word	0xffffffff
    3aa0:	ffffffff 	.word	0xffffffff
    3aa4:	ffffffff 	.word	0xffffffff
    3aa8:	ffffffff 	.word	0xffffffff
    3aac:	ffffffff 	.word	0xffffffff
    3ab0:	ffffffff 	.word	0xffffffff
    3ab4:	ffffffff 	.word	0xffffffff
    3ab8:	ffffffff 	.word	0xffffffff
    3abc:	ffffffff 	.word	0xffffffff
    3ac0:	ffffffff 	.word	0xffffffff
    3ac4:	ffffffff 	.word	0xffffffff
    3ac8:	ffffffff 	.word	0xffffffff
    3acc:	ffffffff 	.word	0xffffffff
    3ad0:	ffffffff 	.word	0xffffffff
    3ad4:	ffffffff 	.word	0xffffffff
    3ad8:	ffffffff 	.word	0xffffffff
    3adc:	ffffffff 	.word	0xffffffff
    3ae0:	ffffffff 	.word	0xffffffff
    3ae4:	ffffffff 	.word	0xffffffff
    3ae8:	ffffffff 	.word	0xffffffff
    3aec:	ffffffff 	.word	0xffffffff
    3af0:	ffffffff 	.word	0xffffffff
    3af4:	ffffffff 	.word	0xffffffff
    3af8:	ffffffff 	.word	0xffffffff
    3afc:	ffffffff 	.word	0xffffffff
    3b00:	ffffffff 	.word	0xffffffff
    3b04:	ffffffff 	.word	0xffffffff
    3b08:	ffffffff 	.word	0xffffffff
    3b0c:	ffffffff 	.word	0xffffffff
    3b10:	ffffffff 	.word	0xffffffff
    3b14:	ffffffff 	.word	0xffffffff
    3b18:	ffffffff 	.word	0xffffffff
    3b1c:	ffffffff 	.word	0xffffffff
    3b20:	ffffffff 	.word	0xffffffff
    3b24:	ffffffff 	.word	0xffffffff
    3b28:	ffffffff 	.word	0xffffffff
    3b2c:	ffffffff 	.word	0xffffffff
    3b30:	ffffffff 	.word	0xffffffff
    3b34:	ffffffff 	.word	0xffffffff
    3b38:	ffffffff 	.word	0xffffffff
    3b3c:	ffffffff 	.word	0xffffffff
    3b40:	ffffffff 	.word	0xffffffff
    3b44:	ffffffff 	.word	0xffffffff
    3b48:	ffffffff 	.word	0xffffffff
    3b4c:	ffffffff 	.word	0xffffffff
    3b50:	ffffffff 	.word	0xffffffff
    3b54:	ffffffff 	.word	0xffffffff
    3b58:	ffffffff 	.word	0xffffffff
    3b5c:	ffffffff 	.word	0xffffffff
    3b60:	ffffffff 	.word	0xffffffff
    3b64:	ffffffff 	.word	0xffffffff
    3b68:	ffffffff 	.word	0xffffffff
    3b6c:	ffffffff 	.word	0xffffffff
    3b70:	ffffffff 	.word	0xffffffff
    3b74:	ffffffff 	.word	0xffffffff
    3b78:	ffffffff 	.word	0xffffffff
    3b7c:	ffffffff 	.word	0xffffffff
    3b80:	ffffffff 	.word	0xffffffff
    3b84:	ffffffff 	.word	0xffffffff
    3b88:	ffffffff 	.word	0xffffffff
    3b8c:	ffffffff 	.word	0xffffffff
    3b90:	ffffffff 	.word	0xffffffff
    3b94:	ffffffff 	.word	0xffffffff
    3b98:	ffffffff 	.word	0xffffffff
    3b9c:	ffffffff 	.word	0xffffffff
    3ba0:	ffffffff 	.word	0xffffffff
    3ba4:	ffffffff 	.word	0xffffffff
    3ba8:	ffffffff 	.word	0xffffffff
    3bac:	ffffffff 	.word	0xffffffff
    3bb0:	ffffffff 	.word	0xffffffff
    3bb4:	ffffffff 	.word	0xffffffff
    3bb8:	ffffffff 	.word	0xffffffff
    3bbc:	ffffffff 	.word	0xffffffff
    3bc0:	ffffffff 	.word	0xffffffff
    3bc4:	ffffffff 	.word	0xffffffff
    3bc8:	ffffffff 	.word	0xffffffff
    3bcc:	ffffffff 	.word	0xffffffff
    3bd0:	ffffffff 	.word	0xffffffff
    3bd4:	ffffffff 	.word	0xffffffff
    3bd8:	ffffffff 	.word	0xffffffff
    3bdc:	ffffffff 	.word	0xffffffff
    3be0:	ffffffff 	.word	0xffffffff
    3be4:	ffffffff 	.word	0xffffffff
    3be8:	ffffffff 	.word	0xffffffff
    3bec:	ffffffff 	.word	0xffffffff
    3bf0:	ffffffff 	.word	0xffffffff
    3bf4:	ffffffff 	.word	0xffffffff
    3bf8:	ffffffff 	.word	0xffffffff
    3bfc:	ffffffff 	.word	0xffffffff
    3c00:	ffffffff 	.word	0xffffffff
    3c04:	ffffffff 	.word	0xffffffff
    3c08:	ffffffff 	.word	0xffffffff
    3c0c:	ffffffff 	.word	0xffffffff
    3c10:	ffffffff 	.word	0xffffffff
    3c14:	ffffffff 	.word	0xffffffff
    3c18:	ffffffff 	.word	0xffffffff
    3c1c:	ffffffff 	.word	0xffffffff
    3c20:	ffffffff 	.word	0xffffffff
    3c24:	ffffffff 	.word	0xffffffff
    3c28:	ffffffff 	.word	0xffffffff
    3c2c:	ffffffff 	.word	0xffffffff
    3c30:	ffffffff 	.word	0xffffffff
    3c34:	ffffffff 	.word	0xffffffff
    3c38:	ffffffff 	.word	0xffffffff
    3c3c:	ffffffff 	.word	0xffffffff
    3c40:	ffffffff 	.word	0xffffffff
    3c44:	ffffffff 	.word	0xffffffff
    3c48:	ffffffff 	.word	0xffffffff
    3c4c:	ffffffff 	.word	0xffffffff
    3c50:	ffffffff 	.word	0xffffffff
    3c54:	ffffffff 	.word	0xffffffff
    3c58:	ffffffff 	.word	0xffffffff
    3c5c:	ffffffff 	.word	0xffffffff
    3c60:	ffffffff 	.word	0xffffffff
    3c64:	ffffffff 	.word	0xffffffff
    3c68:	ffffffff 	.word	0xffffffff
    3c6c:	ffffffff 	.word	0xffffffff
    3c70:	ffffffff 	.word	0xffffffff
    3c74:	ffffffff 	.word	0xffffffff
    3c78:	ffffffff 	.word	0xffffffff
    3c7c:	ffffffff 	.word	0xffffffff
    3c80:	ffffffff 	.word	0xffffffff
    3c84:	ffffffff 	.word	0xffffffff
    3c88:	ffffffff 	.word	0xffffffff
    3c8c:	ffffffff 	.word	0xffffffff
    3c90:	ffffffff 	.word	0xffffffff
    3c94:	ffffffff 	.word	0xffffffff
    3c98:	ffffffff 	.word	0xffffffff
    3c9c:	ffffffff 	.word	0xffffffff
    3ca0:	ffffffff 	.word	0xffffffff
    3ca4:	ffffffff 	.word	0xffffffff
    3ca8:	ffffffff 	.word	0xffffffff
    3cac:	ffffffff 	.word	0xffffffff
    3cb0:	ffffffff 	.word	0xffffffff
    3cb4:	ffffffff 	.word	0xffffffff
    3cb8:	ffffffff 	.word	0xffffffff
    3cbc:	ffffffff 	.word	0xffffffff
    3cc0:	ffffffff 	.word	0xffffffff
    3cc4:	ffffffff 	.word	0xffffffff
    3cc8:	ffffffff 	.word	0xffffffff
    3ccc:	ffffffff 	.word	0xffffffff
    3cd0:	ffffffff 	.word	0xffffffff
    3cd4:	ffffffff 	.word	0xffffffff
    3cd8:	ffffffff 	.word	0xffffffff
    3cdc:	ffffffff 	.word	0xffffffff
    3ce0:	ffffffff 	.word	0xffffffff
    3ce4:	ffffffff 	.word	0xffffffff
    3ce8:	ffffffff 	.word	0xffffffff
    3cec:	ffffffff 	.word	0xffffffff
    3cf0:	ffffffff 	.word	0xffffffff
    3cf4:	ffffffff 	.word	0xffffffff
    3cf8:	ffffffff 	.word	0xffffffff
    3cfc:	ffffffff 	.word	0xffffffff
    3d00:	ffffffff 	.word	0xffffffff
    3d04:	ffffffff 	.word	0xffffffff
    3d08:	ffffffff 	.word	0xffffffff
    3d0c:	ffffffff 	.word	0xffffffff
    3d10:	ffffffff 	.word	0xffffffff
    3d14:	ffffffff 	.word	0xffffffff
    3d18:	ffffffff 	.word	0xffffffff
    3d1c:	ffffffff 	.word	0xffffffff
    3d20:	ffffffff 	.word	0xffffffff
    3d24:	ffffffff 	.word	0xffffffff
    3d28:	ffffffff 	.word	0xffffffff
    3d2c:	ffffffff 	.word	0xffffffff
    3d30:	ffffffff 	.word	0xffffffff
    3d34:	ffffffff 	.word	0xffffffff
    3d38:	ffffffff 	.word	0xffffffff
    3d3c:	ffffffff 	.word	0xffffffff
    3d40:	ffffffff 	.word	0xffffffff
    3d44:	ffffffff 	.word	0xffffffff
    3d48:	ffffffff 	.word	0xffffffff
    3d4c:	ffffffff 	.word	0xffffffff
    3d50:	ffffffff 	.word	0xffffffff
    3d54:	ffffffff 	.word	0xffffffff
    3d58:	ffffffff 	.word	0xffffffff
    3d5c:	ffffffff 	.word	0xffffffff
    3d60:	ffffffff 	.word	0xffffffff
    3d64:	ffffffff 	.word	0xffffffff
    3d68:	ffffffff 	.word	0xffffffff
    3d6c:	ffffffff 	.word	0xffffffff
    3d70:	ffffffff 	.word	0xffffffff
    3d74:	ffffffff 	.word	0xffffffff
    3d78:	ffffffff 	.word	0xffffffff
    3d7c:	ffffffff 	.word	0xffffffff
    3d80:	ffffffff 	.word	0xffffffff
    3d84:	ffffffff 	.word	0xffffffff
    3d88:	ffffffff 	.word	0xffffffff
    3d8c:	ffffffff 	.word	0xffffffff
    3d90:	ffffffff 	.word	0xffffffff
    3d94:	ffffffff 	.word	0xffffffff
    3d98:	ffffffff 	.word	0xffffffff
    3d9c:	ffffffff 	.word	0xffffffff
    3da0:	ffffffff 	.word	0xffffffff
    3da4:	ffffffff 	.word	0xffffffff
    3da8:	ffffffff 	.word	0xffffffff
    3dac:	ffffffff 	.word	0xffffffff
    3db0:	ffffffff 	.word	0xffffffff
    3db4:	ffffffff 	.word	0xffffffff
    3db8:	ffffffff 	.word	0xffffffff
    3dbc:	ffffffff 	.word	0xffffffff
    3dc0:	ffffffff 	.word	0xffffffff
    3dc4:	ffffffff 	.word	0xffffffff
    3dc8:	ffffffff 	.word	0xffffffff
    3dcc:	ffffffff 	.word	0xffffffff
    3dd0:	ffffffff 	.word	0xffffffff
    3dd4:	ffffffff 	.word	0xffffffff
    3dd8:	ffffffff 	.word	0xffffffff
    3ddc:	ffffffff 	.word	0xffffffff
    3de0:	ffffffff 	.word	0xffffffff
    3de4:	ffffffff 	.word	0xffffffff
    3de8:	ffffffff 	.word	0xffffffff
    3dec:	ffffffff 	.word	0xffffffff
    3df0:	ffffffff 	.word	0xffffffff
    3df4:	ffffffff 	.word	0xffffffff
    3df8:	ffffffff 	.word	0xffffffff
    3dfc:	ffffffff 	.word	0xffffffff
    3e00:	ffffffff 	.word	0xffffffff
    3e04:	ffffffff 	.word	0xffffffff
    3e08:	ffffffff 	.word	0xffffffff
    3e0c:	ffffffff 	.word	0xffffffff
    3e10:	ffffffff 	.word	0xffffffff
    3e14:	ffffffff 	.word	0xffffffff
    3e18:	ffffffff 	.word	0xffffffff
    3e1c:	ffffffff 	.word	0xffffffff
    3e20:	ffffffff 	.word	0xffffffff
    3e24:	ffffffff 	.word	0xffffffff
    3e28:	ffffffff 	.word	0xffffffff
    3e2c:	ffffffff 	.word	0xffffffff
    3e30:	ffffffff 	.word	0xffffffff
    3e34:	ffffffff 	.word	0xffffffff
    3e38:	ffffffff 	.word	0xffffffff
    3e3c:	ffffffff 	.word	0xffffffff
    3e40:	ffffffff 	.word	0xffffffff
    3e44:	ffffffff 	.word	0xffffffff
    3e48:	ffffffff 	.word	0xffffffff
    3e4c:	ffffffff 	.word	0xffffffff
    3e50:	ffffffff 	.word	0xffffffff
    3e54:	ffffffff 	.word	0xffffffff
    3e58:	ffffffff 	.word	0xffffffff
    3e5c:	ffffffff 	.word	0xffffffff
    3e60:	ffffffff 	.word	0xffffffff
    3e64:	ffffffff 	.word	0xffffffff
    3e68:	ffffffff 	.word	0xffffffff
    3e6c:	ffffffff 	.word	0xffffffff
    3e70:	ffffffff 	.word	0xffffffff
    3e74:	ffffffff 	.word	0xffffffff
    3e78:	ffffffff 	.word	0xffffffff
    3e7c:	ffffffff 	.word	0xffffffff
    3e80:	ffffffff 	.word	0xffffffff
    3e84:	ffffffff 	.word	0xffffffff
    3e88:	ffffffff 	.word	0xffffffff
    3e8c:	ffffffff 	.word	0xffffffff
    3e90:	ffffffff 	.word	0xffffffff
    3e94:	ffffffff 	.word	0xffffffff
    3e98:	ffffffff 	.word	0xffffffff
    3e9c:	ffffffff 	.word	0xffffffff
    3ea0:	ffffffff 	.word	0xffffffff
    3ea4:	ffffffff 	.word	0xffffffff
    3ea8:	ffffffff 	.word	0xffffffff
    3eac:	ffffffff 	.word	0xffffffff
    3eb0:	ffffffff 	.word	0xffffffff
    3eb4:	ffffffff 	.word	0xffffffff
    3eb8:	ffffffff 	.word	0xffffffff
    3ebc:	ffffffff 	.word	0xffffffff
    3ec0:	ffffffff 	.word	0xffffffff
    3ec4:	ffffffff 	.word	0xffffffff
    3ec8:	ffffffff 	.word	0xffffffff
    3ecc:	ffffffff 	.word	0xffffffff
    3ed0:	ffffffff 	.word	0xffffffff
    3ed4:	ffffffff 	.word	0xffffffff
    3ed8:	ffffffff 	.word	0xffffffff
    3edc:	ffffffff 	.word	0xffffffff
    3ee0:	ffffffff 	.word	0xffffffff
    3ee4:	ffffffff 	.word	0xffffffff
    3ee8:	ffffffff 	.word	0xffffffff
    3eec:	ffffffff 	.word	0xffffffff
    3ef0:	ffffffff 	.word	0xffffffff
    3ef4:	ffffffff 	.word	0xffffffff
    3ef8:	ffffffff 	.word	0xffffffff
    3efc:	ffffffff 	.word	0xffffffff
    3f00:	ffffffff 	.word	0xffffffff
    3f04:	ffffffff 	.word	0xffffffff
    3f08:	ffffffff 	.word	0xffffffff
    3f0c:	ffffffff 	.word	0xffffffff
    3f10:	ffffffff 	.word	0xffffffff
    3f14:	ffffffff 	.word	0xffffffff
    3f18:	ffffffff 	.word	0xffffffff
    3f1c:	ffffffff 	.word	0xffffffff
    3f20:	ffffffff 	.word	0xffffffff
    3f24:	ffffffff 	.word	0xffffffff
    3f28:	ffffffff 	.word	0xffffffff
    3f2c:	ffffffff 	.word	0xffffffff
    3f30:	ffffffff 	.word	0xffffffff
    3f34:	ffffffff 	.word	0xffffffff
    3f38:	ffffffff 	.word	0xffffffff
    3f3c:	ffffffff 	.word	0xffffffff
    3f40:	ffffffff 	.word	0xffffffff
    3f44:	ffffffff 	.word	0xffffffff
    3f48:	ffffffff 	.word	0xffffffff
    3f4c:	ffffffff 	.word	0xffffffff
    3f50:	ffffffff 	.word	0xffffffff
    3f54:	ffffffff 	.word	0xffffffff
    3f58:	ffffffff 	.word	0xffffffff
    3f5c:	ffffffff 	.word	0xffffffff
    3f60:	ffffffff 	.word	0xffffffff
    3f64:	ffffffff 	.word	0xffffffff
    3f68:	ffffffff 	.word	0xffffffff
    3f6c:	ffffffff 	.word	0xffffffff
    3f70:	ffffffff 	.word	0xffffffff
    3f74:	ffffffff 	.word	0xffffffff
    3f78:	ffffffff 	.word	0xffffffff
    3f7c:	ffffffff 	.word	0xffffffff
    3f80:	ffffffff 	.word	0xffffffff
    3f84:	ffffffff 	.word	0xffffffff
    3f88:	ffffffff 	.word	0xffffffff
    3f8c:	ffffffff 	.word	0xffffffff
    3f90:	ffffffff 	.word	0xffffffff
    3f94:	ffffffff 	.word	0xffffffff
    3f98:	ffffffff 	.word	0xffffffff
    3f9c:	ffffffff 	.word	0xffffffff
    3fa0:	ffffffff 	.word	0xffffffff
    3fa4:	ffffffff 	.word	0xffffffff
    3fa8:	ffffffff 	.word	0xffffffff
    3fac:	ffffffff 	.word	0xffffffff
    3fb0:	ffffffff 	.word	0xffffffff
    3fb4:	ffffffff 	.word	0xffffffff
    3fb8:	ffffffff 	.word	0xffffffff
    3fbc:	ffffffff 	.word	0xffffffff
    3fc0:	ffffffff 	.word	0xffffffff
    3fc4:	ffffffff 	.word	0xffffffff
    3fc8:	ffffffff 	.word	0xffffffff
    3fcc:	ffffffff 	.word	0xffffffff
    3fd0:	ffffffff 	.word	0xffffffff
    3fd4:	ffffffff 	.word	0xffffffff
    3fd8:	ffffffff 	.word	0xffffffff
    3fdc:	ffffffff 	.word	0xffffffff
    3fe0:	ffffffff 	.word	0xffffffff
    3fe4:	ffffffff 	.word	0xffffffff
    3fe8:	ffffffff 	.word	0xffffffff
    3fec:	ffffffff 	.word	0xffffffff
    3ff0:	ffffffff 	.word	0xffffffff
    3ff4:	ffffffff 	.word	0xffffffff
    3ff8:	ffffffff 	.word	0xffffffff
    3ffc:	ffffffff 	.word	0xffffffff
    4000:	ffffffff 	.word	0xffffffff
    4004:	ffffffff 	.word	0xffffffff
    4008:	ffffffff 	.word	0xffffffff
    400c:	ffffffff 	.word	0xffffffff
    4010:	ffffffff 	.word	0xffffffff
    4014:	ffffffff 	.word	0xffffffff
    4018:	ffffffff 	.word	0xffffffff
    401c:	ffffffff 	.word	0xffffffff
    4020:	ffffffff 	.word	0xffffffff
    4024:	ffffffff 	.word	0xffffffff
    4028:	ffffffff 	.word	0xffffffff
    402c:	ffffffff 	.word	0xffffffff
    4030:	ffffffff 	.word	0xffffffff
    4034:	ffffffff 	.word	0xffffffff
    4038:	ffffffff 	.word	0xffffffff
    403c:	ffffffff 	.word	0xffffffff
    4040:	ffffffff 	.word	0xffffffff
    4044:	ffffffff 	.word	0xffffffff
    4048:	ffffffff 	.word	0xffffffff
    404c:	ffffffff 	.word	0xffffffff
    4050:	ffffffff 	.word	0xffffffff
    4054:	ffffffff 	.word	0xffffffff
    4058:	ffffffff 	.word	0xffffffff
    405c:	ffffffff 	.word	0xffffffff
    4060:	ffffffff 	.word	0xffffffff
    4064:	ffffffff 	.word	0xffffffff
    4068:	ffffffff 	.word	0xffffffff
    406c:	ffffffff 	.word	0xffffffff
    4070:	ffffffff 	.word	0xffffffff
    4074:	ffffffff 	.word	0xffffffff
    4078:	ffffffff 	.word	0xffffffff
    407c:	ffffffff 	.word	0xffffffff
    4080:	ffffffff 	.word	0xffffffff
    4084:	ffffffff 	.word	0xffffffff
    4088:	ffffffff 	.word	0xffffffff
    408c:	ffffffff 	.word	0xffffffff
    4090:	ffffffff 	.word	0xffffffff
    4094:	ffffffff 	.word	0xffffffff
    4098:	ffffffff 	.word	0xffffffff
    409c:	ffffffff 	.word	0xffffffff
    40a0:	ffffffff 	.word	0xffffffff
    40a4:	ffffffff 	.word	0xffffffff
    40a8:	ffffffff 	.word	0xffffffff
    40ac:	ffffffff 	.word	0xffffffff
    40b0:	ffffffff 	.word	0xffffffff
    40b4:	ffffffff 	.word	0xffffffff
    40b8:	ffffffff 	.word	0xffffffff
    40bc:	ffffffff 	.word	0xffffffff
    40c0:	ffffffff 	.word	0xffffffff
    40c4:	ffffffff 	.word	0xffffffff
    40c8:	ffffffff 	.word	0xffffffff
    40cc:	ffffffff 	.word	0xffffffff
    40d0:	ffffffff 	.word	0xffffffff
    40d4:	ffffffff 	.word	0xffffffff
    40d8:	ffffffff 	.word	0xffffffff
    40dc:	ffffffff 	.word	0xffffffff
    40e0:	ffffffff 	.word	0xffffffff
    40e4:	ffffffff 	.word	0xffffffff
    40e8:	ffffffff 	.word	0xffffffff
    40ec:	ffffffff 	.word	0xffffffff
    40f0:	ffffffff 	.word	0xffffffff
    40f4:	ffffffff 	.word	0xffffffff
    40f8:	ffffffff 	.word	0xffffffff
    40fc:	ffffffff 	.word	0xffffffff
    4100:	ffffffff 	.word	0xffffffff
    4104:	ffffffff 	.word	0xffffffff
    4108:	ffffffff 	.word	0xffffffff
    410c:	ffffffff 	.word	0xffffffff
    4110:	ffffffff 	.word	0xffffffff
    4114:	ffffffff 	.word	0xffffffff
    4118:	ffffffff 	.word	0xffffffff
    411c:	ffffffff 	.word	0xffffffff
    4120:	ffffffff 	.word	0xffffffff
    4124:	ffffffff 	.word	0xffffffff
    4128:	ffffffff 	.word	0xffffffff
    412c:	ffffffff 	.word	0xffffffff
    4130:	ffffffff 	.word	0xffffffff
    4134:	ffffffff 	.word	0xffffffff
    4138:	ffffffff 	.word	0xffffffff
    413c:	ffffffff 	.word	0xffffffff
    4140:	ffffffff 	.word	0xffffffff
    4144:	ffffffff 	.word	0xffffffff
    4148:	ffffffff 	.word	0xffffffff
    414c:	ffffffff 	.word	0xffffffff
    4150:	ffffffff 	.word	0xffffffff
    4154:	ffffffff 	.word	0xffffffff
    4158:	ffffffff 	.word	0xffffffff
    415c:	ffffffff 	.word	0xffffffff
    4160:	ffffffff 	.word	0xffffffff
    4164:	ffffffff 	.word	0xffffffff
    4168:	ffffffff 	.word	0xffffffff
    416c:	ffffffff 	.word	0xffffffff
    4170:	ffffffff 	.word	0xffffffff
    4174:	ffffffff 	.word	0xffffffff
    4178:	ffffffff 	.word	0xffffffff
    417c:	ffffffff 	.word	0xffffffff
    4180:	ffffffff 	.word	0xffffffff
    4184:	ffffffff 	.word	0xffffffff
    4188:	ffffffff 	.word	0xffffffff
    418c:	ffffffff 	.word	0xffffffff
    4190:	ffffffff 	.word	0xffffffff
    4194:	ffffffff 	.word	0xffffffff
    4198:	ffffffff 	.word	0xffffffff
    419c:	ffffffff 	.word	0xffffffff
    41a0:	ffffffff 	.word	0xffffffff
    41a4:	ffffffff 	.word	0xffffffff
    41a8:	ffffffff 	.word	0xffffffff
    41ac:	ffffffff 	.word	0xffffffff
    41b0:	ffffffff 	.word	0xffffffff
    41b4:	ffffffff 	.word	0xffffffff
    41b8:	ffffffff 	.word	0xffffffff
    41bc:	ffffffff 	.word	0xffffffff
    41c0:	ffffffff 	.word	0xffffffff
    41c4:	ffffffff 	.word	0xffffffff
    41c8:	ffffffff 	.word	0xffffffff
    41cc:	ffffffff 	.word	0xffffffff
    41d0:	ffffffff 	.word	0xffffffff
    41d4:	ffffffff 	.word	0xffffffff
    41d8:	ffffffff 	.word	0xffffffff
    41dc:	ffffffff 	.word	0xffffffff
    41e0:	ffffffff 	.word	0xffffffff
    41e4:	ffffffff 	.word	0xffffffff
    41e8:	ffffffff 	.word	0xffffffff
    41ec:	ffffffff 	.word	0xffffffff
    41f0:	ffffffff 	.word	0xffffffff
    41f4:	ffffffff 	.word	0xffffffff
    41f8:	ffffffff 	.word	0xffffffff
    41fc:	ffffffff 	.word	0xffffffff
    4200:	ffffffff 	.word	0xffffffff
    4204:	ffffffff 	.word	0xffffffff
    4208:	ffffffff 	.word	0xffffffff
    420c:	ffffffff 	.word	0xffffffff
    4210:	ffffffff 	.word	0xffffffff
    4214:	ffffffff 	.word	0xffffffff
    4218:	ffffffff 	.word	0xffffffff
    421c:	ffffffff 	.word	0xffffffff
    4220:	ffffffff 	.word	0xffffffff
    4224:	ffffffff 	.word	0xffffffff
    4228:	ffffffff 	.word	0xffffffff
    422c:	ffffffff 	.word	0xffffffff
    4230:	ffffffff 	.word	0xffffffff
    4234:	ffffffff 	.word	0xffffffff
    4238:	ffffffff 	.word	0xffffffff
    423c:	ffffffff 	.word	0xffffffff
    4240:	ffffffff 	.word	0xffffffff
    4244:	ffffffff 	.word	0xffffffff
    4248:	ffffffff 	.word	0xffffffff
    424c:	ffffffff 	.word	0xffffffff
    4250:	ffffffff 	.word	0xffffffff
    4254:	ffffffff 	.word	0xffffffff
    4258:	ffffffff 	.word	0xffffffff
    425c:	ffffffff 	.word	0xffffffff
    4260:	ffffffff 	.word	0xffffffff
    4264:	ffffffff 	.word	0xffffffff
    4268:	ffffffff 	.word	0xffffffff
    426c:	ffffffff 	.word	0xffffffff
    4270:	ffffffff 	.word	0xffffffff
    4274:	ffffffff 	.word	0xffffffff
    4278:	ffffffff 	.word	0xffffffff
    427c:	ffffffff 	.word	0xffffffff
    4280:	ffffffff 	.word	0xffffffff
    4284:	ffffffff 	.word	0xffffffff
    4288:	ffffffff 	.word	0xffffffff
    428c:	ffffffff 	.word	0xffffffff
    4290:	ffffffff 	.word	0xffffffff
    4294:	ffffffff 	.word	0xffffffff
    4298:	ffffffff 	.word	0xffffffff
    429c:	ffffffff 	.word	0xffffffff
    42a0:	ffffffff 	.word	0xffffffff
    42a4:	ffffffff 	.word	0xffffffff
    42a8:	ffffffff 	.word	0xffffffff
    42ac:	ffffffff 	.word	0xffffffff
    42b0:	ffffffff 	.word	0xffffffff
    42b4:	ffffffff 	.word	0xffffffff
    42b8:	ffffffff 	.word	0xffffffff
    42bc:	ffffffff 	.word	0xffffffff
    42c0:	ffffffff 	.word	0xffffffff
    42c4:	ffffffff 	.word	0xffffffff
    42c8:	ffffffff 	.word	0xffffffff
    42cc:	ffffffff 	.word	0xffffffff
    42d0:	ffffffff 	.word	0xffffffff
    42d4:	ffffffff 	.word	0xffffffff
    42d8:	ffffffff 	.word	0xffffffff
    42dc:	ffffffff 	.word	0xffffffff
    42e0:	ffffffff 	.word	0xffffffff
    42e4:	ffffffff 	.word	0xffffffff
    42e8:	ffffffff 	.word	0xffffffff
    42ec:	ffffffff 	.word	0xffffffff
    42f0:	ffffffff 	.word	0xffffffff
    42f4:	ffffffff 	.word	0xffffffff
    42f8:	ffffffff 	.word	0xffffffff
    42fc:	ffffffff 	.word	0xffffffff
    4300:	ffffffff 	.word	0xffffffff
    4304:	ffffffff 	.word	0xffffffff
    4308:	ffffffff 	.word	0xffffffff
    430c:	ffffffff 	.word	0xffffffff
    4310:	ffffffff 	.word	0xffffffff
    4314:	ffffffff 	.word	0xffffffff
    4318:	ffffffff 	.word	0xffffffff
    431c:	ffffffff 	.word	0xffffffff
    4320:	ffffffff 	.word	0xffffffff
    4324:	ffffffff 	.word	0xffffffff
    4328:	ffffffff 	.word	0xffffffff
    432c:	ffffffff 	.word	0xffffffff
    4330:	ffffffff 	.word	0xffffffff
    4334:	ffffffff 	.word	0xffffffff
    4338:	ffffffff 	.word	0xffffffff
    433c:	ffffffff 	.word	0xffffffff
    4340:	ffffffff 	.word	0xffffffff
    4344:	ffffffff 	.word	0xffffffff
    4348:	ffffffff 	.word	0xffffffff
    434c:	ffffffff 	.word	0xffffffff
    4350:	ffffffff 	.word	0xffffffff
    4354:	ffffffff 	.word	0xffffffff
    4358:	ffffffff 	.word	0xffffffff
    435c:	ffffffff 	.word	0xffffffff
    4360:	ffffffff 	.word	0xffffffff
    4364:	ffffffff 	.word	0xffffffff
    4368:	ffffffff 	.word	0xffffffff
    436c:	ffffffff 	.word	0xffffffff
    4370:	ffffffff 	.word	0xffffffff
    4374:	ffffffff 	.word	0xffffffff
    4378:	ffffffff 	.word	0xffffffff
    437c:	ffffffff 	.word	0xffffffff
    4380:	ffffffff 	.word	0xffffffff
    4384:	ffffffff 	.word	0xffffffff
    4388:	ffffffff 	.word	0xffffffff
    438c:	ffffffff 	.word	0xffffffff
    4390:	ffffffff 	.word	0xffffffff
    4394:	ffffffff 	.word	0xffffffff
    4398:	ffffffff 	.word	0xffffffff
    439c:	ffffffff 	.word	0xffffffff
    43a0:	ffffffff 	.word	0xffffffff
    43a4:	ffffffff 	.word	0xffffffff
    43a8:	ffffffff 	.word	0xffffffff
    43ac:	ffffffff 	.word	0xffffffff
    43b0:	ffffffff 	.word	0xffffffff
    43b4:	ffffffff 	.word	0xffffffff
    43b8:	ffffffff 	.word	0xffffffff
    43bc:	ffffffff 	.word	0xffffffff
    43c0:	ffffffff 	.word	0xffffffff
    43c4:	ffffffff 	.word	0xffffffff
    43c8:	ffffffff 	.word	0xffffffff
    43cc:	ffffffff 	.word	0xffffffff
    43d0:	ffffffff 	.word	0xffffffff
    43d4:	ffffffff 	.word	0xffffffff
    43d8:	ffffffff 	.word	0xffffffff
    43dc:	ffffffff 	.word	0xffffffff
    43e0:	ffffffff 	.word	0xffffffff
    43e4:	ffffffff 	.word	0xffffffff
    43e8:	ffffffff 	.word	0xffffffff
    43ec:	ffffffff 	.word	0xffffffff
    43f0:	ffffffff 	.word	0xffffffff
    43f4:	ffffffff 	.word	0xffffffff
    43f8:	ffffffff 	.word	0xffffffff
    43fc:	ffffffff 	.word	0xffffffff

00004400 <__do_global_dtors_aux>:
    4400:	b510      	push	{r4, lr}
    4402:	4c06      	ldr	r4, [pc, #24]	; (441c <__do_global_dtors_aux+0x1c>)
    4404:	7823      	ldrb	r3, [r4, #0]
    4406:	2b00      	cmp	r3, #0
    4408:	d107      	bne.n	441a <__do_global_dtors_aux+0x1a>
    440a:	4b05      	ldr	r3, [pc, #20]	; (4420 <__do_global_dtors_aux+0x20>)
    440c:	2b00      	cmp	r3, #0
    440e:	d002      	beq.n	4416 <__do_global_dtors_aux+0x16>
    4410:	4804      	ldr	r0, [pc, #16]	; (4424 <__do_global_dtors_aux+0x24>)
    4412:	e000      	b.n	4416 <__do_global_dtors_aux+0x16>
    4414:	bf00      	nop
    4416:	2301      	movs	r3, #1
    4418:	7023      	strb	r3, [r4, #0]
    441a:	bd10      	pop	{r4, pc}
    441c:	20000088 	.word	0x20000088
    4420:	00000000 	.word	0x00000000
    4424:	0001855c 	.word	0x0001855c

00004428 <frame_dummy>:
    4428:	4b08      	ldr	r3, [pc, #32]	; (444c <frame_dummy+0x24>)
    442a:	b510      	push	{r4, lr}
    442c:	2b00      	cmp	r3, #0
    442e:	d003      	beq.n	4438 <frame_dummy+0x10>
    4430:	4907      	ldr	r1, [pc, #28]	; (4450 <frame_dummy+0x28>)
    4432:	4808      	ldr	r0, [pc, #32]	; (4454 <frame_dummy+0x2c>)
    4434:	e000      	b.n	4438 <frame_dummy+0x10>
    4436:	bf00      	nop
    4438:	4807      	ldr	r0, [pc, #28]	; (4458 <frame_dummy+0x30>)
    443a:	6803      	ldr	r3, [r0, #0]
    443c:	2b00      	cmp	r3, #0
    443e:	d100      	bne.n	4442 <frame_dummy+0x1a>
    4440:	bd10      	pop	{r4, pc}
    4442:	4b06      	ldr	r3, [pc, #24]	; (445c <frame_dummy+0x34>)
    4444:	2b00      	cmp	r3, #0
    4446:	d0fb      	beq.n	4440 <frame_dummy+0x18>
    4448:	4798      	blx	r3
    444a:	e7f9      	b.n	4440 <frame_dummy+0x18>
    444c:	00000000 	.word	0x00000000
    4450:	2000008c 	.word	0x2000008c
    4454:	0001855c 	.word	0x0001855c
    4458:	0001855c 	.word	0x0001855c
    445c:	00000000 	.word	0x00000000

00004460 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    4460:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    4462:	2000      	movs	r0, #0
    4464:	4b08      	ldr	r3, [pc, #32]	; (4488 <delay_init+0x28>)
    4466:	4798      	blx	r3
    4468:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    446a:	4c08      	ldr	r4, [pc, #32]	; (448c <delay_init+0x2c>)
    446c:	21fa      	movs	r1, #250	; 0xfa
    446e:	0089      	lsls	r1, r1, #2
    4470:	47a0      	blx	r4
    4472:	4b07      	ldr	r3, [pc, #28]	; (4490 <delay_init+0x30>)
    4474:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    4476:	4907      	ldr	r1, [pc, #28]	; (4494 <delay_init+0x34>)
    4478:	0028      	movs	r0, r5
    447a:	47a0      	blx	r4
    447c:	4b06      	ldr	r3, [pc, #24]	; (4498 <delay_init+0x38>)
    447e:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    4480:	2205      	movs	r2, #5
    4482:	4b06      	ldr	r3, [pc, #24]	; (449c <delay_init+0x3c>)
    4484:	601a      	str	r2, [r3, #0]
}
    4486:	bd70      	pop	{r4, r5, r6, pc}
    4488:	00006891 	.word	0x00006891
    448c:	00012f55 	.word	0x00012f55
    4490:	20000000 	.word	0x20000000
    4494:	000f4240 	.word	0x000f4240
    4498:	20000004 	.word	0x20000004
    449c:	e000e010 	.word	0xe000e010

000044a0 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    44a0:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    44a2:	4b08      	ldr	r3, [pc, #32]	; (44c4 <delay_cycles_us+0x24>)
    44a4:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    44a6:	4a08      	ldr	r2, [pc, #32]	; (44c8 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    44a8:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    44aa:	2180      	movs	r1, #128	; 0x80
    44ac:	0249      	lsls	r1, r1, #9
	while (n--) {
    44ae:	3801      	subs	r0, #1
    44b0:	d307      	bcc.n	44c2 <delay_cycles_us+0x22>
	if (n > 0) {
    44b2:	2c00      	cmp	r4, #0
    44b4:	d0fb      	beq.n	44ae <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    44b6:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    44b8:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    44ba:	6813      	ldr	r3, [r2, #0]
    44bc:	420b      	tst	r3, r1
    44be:	d0fc      	beq.n	44ba <delay_cycles_us+0x1a>
    44c0:	e7f5      	b.n	44ae <delay_cycles_us+0xe>
	}
}
    44c2:	bd30      	pop	{r4, r5, pc}
    44c4:	20000004 	.word	0x20000004
    44c8:	e000e010 	.word	0xe000e010

000044cc <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    44cc:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    44ce:	4b08      	ldr	r3, [pc, #32]	; (44f0 <delay_cycles_ms+0x24>)
    44d0:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    44d2:	4a08      	ldr	r2, [pc, #32]	; (44f4 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    44d4:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    44d6:	2180      	movs	r1, #128	; 0x80
    44d8:	0249      	lsls	r1, r1, #9
	while (n--) {
    44da:	3801      	subs	r0, #1
    44dc:	d307      	bcc.n	44ee <delay_cycles_ms+0x22>
	if (n > 0) {
    44de:	2c00      	cmp	r4, #0
    44e0:	d0fb      	beq.n	44da <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    44e2:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    44e4:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    44e6:	6813      	ldr	r3, [r2, #0]
    44e8:	420b      	tst	r3, r1
    44ea:	d0fc      	beq.n	44e6 <delay_cycles_ms+0x1a>
    44ec:	e7f5      	b.n	44da <delay_cycles_ms+0xe>
	}
}
    44ee:	bd30      	pop	{r4, r5, pc}
    44f0:	20000000 	.word	0x20000000
    44f4:	e000e010 	.word	0xe000e010

000044f8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    44f8:	4b0c      	ldr	r3, [pc, #48]	; (452c <cpu_irq_enter_critical+0x34>)
    44fa:	681b      	ldr	r3, [r3, #0]
    44fc:	2b00      	cmp	r3, #0
    44fe:	d106      	bne.n	450e <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4500:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    4504:	2b00      	cmp	r3, #0
    4506:	d007      	beq.n	4518 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    4508:	2200      	movs	r2, #0
    450a:	4b09      	ldr	r3, [pc, #36]	; (4530 <cpu_irq_enter_critical+0x38>)
    450c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    450e:	4a07      	ldr	r2, [pc, #28]	; (452c <cpu_irq_enter_critical+0x34>)
    4510:	6813      	ldr	r3, [r2, #0]
    4512:	3301      	adds	r3, #1
    4514:	6013      	str	r3, [r2, #0]
}
    4516:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    4518:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    451a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    451e:	2200      	movs	r2, #0
    4520:	4b04      	ldr	r3, [pc, #16]	; (4534 <cpu_irq_enter_critical+0x3c>)
    4522:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    4524:	3201      	adds	r2, #1
    4526:	4b02      	ldr	r3, [pc, #8]	; (4530 <cpu_irq_enter_critical+0x38>)
    4528:	701a      	strb	r2, [r3, #0]
    452a:	e7f0      	b.n	450e <cpu_irq_enter_critical+0x16>
    452c:	200000a4 	.word	0x200000a4
    4530:	200000a8 	.word	0x200000a8
    4534:	20000008 	.word	0x20000008

00004538 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    4538:	4b08      	ldr	r3, [pc, #32]	; (455c <cpu_irq_leave_critical+0x24>)
    453a:	681a      	ldr	r2, [r3, #0]
    453c:	3a01      	subs	r2, #1
    453e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    4540:	681b      	ldr	r3, [r3, #0]
    4542:	2b00      	cmp	r3, #0
    4544:	d109      	bne.n	455a <cpu_irq_leave_critical+0x22>
    4546:	4b06      	ldr	r3, [pc, #24]	; (4560 <cpu_irq_leave_critical+0x28>)
    4548:	781b      	ldrb	r3, [r3, #0]
    454a:	2b00      	cmp	r3, #0
    454c:	d005      	beq.n	455a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    454e:	2201      	movs	r2, #1
    4550:	4b04      	ldr	r3, [pc, #16]	; (4564 <cpu_irq_leave_critical+0x2c>)
    4552:	701a      	strb	r2, [r3, #0]
    4554:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4558:	b662      	cpsie	i
	}
}
    455a:	4770      	bx	lr
    455c:	200000a4 	.word	0x200000a4
    4560:	200000a8 	.word	0x200000a8
    4564:	20000008 	.word	0x20000008

00004568 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    4568:	b5f0      	push	{r4, r5, r6, r7, lr}
    456a:	46c6      	mov	lr, r8
    456c:	b500      	push	{lr}
    456e:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    4570:	ac01      	add	r4, sp, #4
    4572:	2501      	movs	r5, #1
    4574:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    4576:	2300      	movs	r3, #0
    4578:	4698      	mov	r8, r3
    457a:	70a3      	strb	r3, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    457c:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    457e:	0021      	movs	r1, r4
    4580:	2013      	movs	r0, #19
    4582:	4e12      	ldr	r6, [pc, #72]	; (45cc <system_board_init+0x64>)
    4584:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    4586:	4f12      	ldr	r7, [pc, #72]	; (45d0 <system_board_init+0x68>)
    4588:	2380      	movs	r3, #128	; 0x80
    458a:	031b      	lsls	r3, r3, #12
    458c:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    458e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_1_PIN, &pin_conf);
    4590:	0021      	movs	r1, r4
    4592:	2012      	movs	r0, #18
    4594:	47b0      	blx	r6
    4596:	2380      	movs	r3, #128	; 0x80
    4598:	02db      	lsls	r3, r3, #11
    459a:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_1_PIN, LED_1_INACTIVE);
#ifdef RFSWITCH_ENABLE
	/* Configure RFSWITCH as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    459c:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(RF_SWITCH_PIN, &pin_conf);
    459e:	0021      	movs	r1, r4
    45a0:	200d      	movs	r0, #13
    45a2:	47b0      	blx	r6
	} else {
		port_base->OUTCLR.reg = pin_mask;
    45a4:	2380      	movs	r3, #128	; 0x80
    45a6:	019b      	lsls	r3, r3, #6
    45a8:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
#endif

#ifdef TCXO_ENABLE
	/* Configure TXPO PWR as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    45aa:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(TCXO_PWR_PIN, &pin_conf);
    45ac:	0021      	movs	r1, r4
    45ae:	2009      	movs	r0, #9
    45b0:	47b0      	blx	r6
    45b2:	2380      	movs	r3, #128	; 0x80
    45b4:	009b      	lsls	r3, r3, #2
    45b6:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    45b8:	4643      	mov	r3, r8
    45ba:	7023      	strb	r3, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    45bc:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    45be:	0021      	movs	r1, r4
    45c0:	201c      	movs	r0, #28
    45c2:	47b0      	blx	r6
		
}
    45c4:	b002      	add	sp, #8
    45c6:	bc04      	pop	{r2}
    45c8:	4690      	mov	r8, r2
    45ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    45cc:	00004ba9 	.word	0x00004ba9
    45d0:	40002800 	.word	0x40002800

000045d4 <aes_get_config_defaults>:
		struct aes_config *const config)
{

	/* Sanity check arguments */
	Assert(config);
	config->encrypt_mode = AES_ENCRYPTION;
    45d4:	2301      	movs	r3, #1
    45d6:	7003      	strb	r3, [r0, #0]
	config->key_size = AES_KEY_SIZE_128;
    45d8:	2300      	movs	r3, #0
    45da:	7043      	strb	r3, [r0, #1]
	config->start_mode = AES_MANUAL_START;
    45dc:	7083      	strb	r3, [r0, #2]
	config->opmode= AES_ECB_MODE;
    45de:	70c3      	strb	r3, [r0, #3]
	config->cfb_size = AES_CFB_SIZE_128;
    45e0:	7103      	strb	r3, [r0, #4]
	config->ctype = AES_COUNTERMEASURE_TYPE_ALL;
    45e2:	220f      	movs	r2, #15
    45e4:	7142      	strb	r2, [r0, #5]
	config->enable_xor_key = false;
    45e6:	7183      	strb	r3, [r0, #6]
	config->enable_key_gen = false;
    45e8:	71c3      	strb	r3, [r0, #7]
	config->lod = false;
    45ea:	7203      	strb	r3, [r0, #8]
}
    45ec:	4770      	bx	lr

000045ee <aes_enable>:
 */
void aes_enable(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLA.reg |= AES_CTRLA_ENABLE;
    45ee:	6802      	ldr	r2, [r0, #0]
    45f0:	6813      	ldr	r3, [r2, #0]
    45f2:	2102      	movs	r1, #2
    45f4:	430b      	orrs	r3, r1
    45f6:	6013      	str	r3, [r2, #0]

}
    45f8:	4770      	bx	lr

000045fa <aes_disable>:
{
	Assert(module);
	Assert(module->hw);

	/* Disbale interrupt */
	module->hw->INTENCLR.reg = AES_INTENCLR_MASK;
    45fa:	2303      	movs	r3, #3
    45fc:	6802      	ldr	r2, [r0, #0]
    45fe:	7153      	strb	r3, [r2, #5]
	/* Clear interrupt flag */
	module->hw->INTFLAG.reg = AES_INTFLAG_MASK;
    4600:	6802      	ldr	r2, [r0, #0]
    4602:	71d3      	strb	r3, [r2, #7]

	module->hw->CTRLA.reg &= (~AES_CTRLA_ENABLE);
    4604:	6802      	ldr	r2, [r0, #0]
    4606:	6813      	ldr	r3, [r2, #0]
    4608:	2102      	movs	r1, #2
    460a:	438b      	bics	r3, r1
    460c:	6013      	str	r3, [r2, #0]
}
    460e:	4770      	bx	lr

00004610 <aes_set_config>:
 */
void aes_set_config(
		struct aes_module *const module,
		Aes *const hw,
		struct aes_config *const config)
{
    4610:	b570      	push	{r4, r5, r6, lr}
    4612:	0004      	movs	r4, r0
    4614:	000d      	movs	r5, r1
	/* Validate arguments. */
	Assert(hw);
	Assert(config);
	Assert(module);

	module->opmode = config->opmode;
    4616:	78d3      	ldrb	r3, [r2, #3]
    4618:	7103      	strb	r3, [r0, #4]
	module->hw = hw;
    461a:	6021      	str	r1, [r4, #0]
	module->key_size = config->key_size;
    461c:	7853      	ldrb	r3, [r2, #1]
    461e:	7143      	strb	r3, [r0, #5]
	module->cfb_size = config->cfb_size;
    4620:	7913      	ldrb	r3, [r2, #4]
    4622:	7183      	strb	r3, [r0, #6]

	ul_mode |= (config->encrypt_mode << AES_CTRLA_CIPHER_Pos)
    4624:	7813      	ldrb	r3, [r2, #0]
    4626:	029b      	lsls	r3, r3, #10
			 | (config->start_mode << AES_CTRLA_STARTMODE_Pos)
    4628:	7891      	ldrb	r1, [r2, #2]
    462a:	02c9      	lsls	r1, r1, #11
    462c:	430b      	orrs	r3, r1
			 | (config->key_size << AES_CTRLA_KEYSIZE_Pos)
    462e:	7851      	ldrb	r1, [r2, #1]
    4630:	0209      	lsls	r1, r1, #8
    4632:	430b      	orrs	r3, r1
			 | (config->opmode << AES_CTRLA_AESMODE_Pos)
    4634:	78d1      	ldrb	r1, [r2, #3]
    4636:	0089      	lsls	r1, r1, #2
    4638:	430b      	orrs	r3, r1
			 | (config->cfb_size << AES_CTRLA_CFBS_Pos)
    463a:	7911      	ldrb	r1, [r2, #4]
    463c:	0149      	lsls	r1, r1, #5
    463e:	430b      	orrs	r3, r1
			 | (AES_CTRLA_CTYPE(config->ctype))
			 | (config->enable_xor_key << AES_CTRLA_XORKEY_Pos)
    4640:	7991      	ldrb	r1, [r2, #6]
    4642:	0389      	lsls	r1, r1, #14
			 | (config->enable_key_gen << AES_CTRLA_KEYGEN_Pos)
    4644:	79d0      	ldrb	r0, [r2, #7]
    4646:	0340      	lsls	r0, r0, #13
			 | (config->lod << AES_CTRLA_LOD_Pos);
    4648:	4301      	orrs	r1, r0
    464a:	7a10      	ldrb	r0, [r2, #8]
    464c:	0300      	lsls	r0, r0, #12
    464e:	4301      	orrs	r1, r0
			 | (AES_CTRLA_CTYPE(config->ctype))
    4650:	7952      	ldrb	r2, [r2, #5]
    4652:	0412      	lsls	r2, r2, #16
    4654:	20f0      	movs	r0, #240	; 0xf0
    4656:	0300      	lsls	r0, r0, #12
    4658:	4002      	ands	r2, r0
			 | (config->lod << AES_CTRLA_LOD_Pos);
    465a:	430a      	orrs	r2, r1
    465c:	4313      	orrs	r3, r2
    465e:	001e      	movs	r6, r3
	if (hw->CTRLA.reg & AES_CTRLA_ENABLE) {
    4660:	682b      	ldr	r3, [r5, #0]
    4662:	079b      	lsls	r3, r3, #30
    4664:	d401      	bmi.n	466a <aes_set_config+0x5a>
		aes_disable(module);
		hw->CTRLA.reg = ul_mode;
		aes_enable(module);
	} else {
		hw->CTRLA.reg = ul_mode;
    4666:	602e      	str	r6, [r5, #0]
	}
}
    4668:	bd70      	pop	{r4, r5, r6, pc}
		aes_disable(module);
    466a:	0020      	movs	r0, r4
    466c:	4b03      	ldr	r3, [pc, #12]	; (467c <aes_set_config+0x6c>)
    466e:	4798      	blx	r3
		hw->CTRLA.reg = ul_mode;
    4670:	602e      	str	r6, [r5, #0]
		aes_enable(module);
    4672:	0020      	movs	r0, r4
    4674:	4b02      	ldr	r3, [pc, #8]	; (4680 <aes_set_config+0x70>)
    4676:	4798      	blx	r3
    4678:	e7f6      	b.n	4668 <aes_set_config+0x58>
    467a:	46c0      	nop			; (mov r8, r8)
    467c:	000045fb 	.word	0x000045fb
    4680:	000045ef 	.word	0x000045ef

00004684 <aes_init>:
{
    4684:	b570      	push	{r4, r5, r6, lr}
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    4686:	4c05      	ldr	r4, [pc, #20]	; (469c <aes_init+0x18>)
    4688:	69e5      	ldr	r5, [r4, #28]
    468a:	2380      	movs	r3, #128	; 0x80
    468c:	019b      	lsls	r3, r3, #6
    468e:	432b      	orrs	r3, r5
    4690:	61e3      	str	r3, [r4, #28]
	hw->CTRLA.reg = AES_CTRLA_SWRST;
    4692:	2301      	movs	r3, #1
    4694:	600b      	str	r3, [r1, #0]
	aes_set_config(module,hw, config);
    4696:	4b02      	ldr	r3, [pc, #8]	; (46a0 <aes_init+0x1c>)
    4698:	4798      	blx	r3
}
    469a:	bd70      	pop	{r4, r5, r6, pc}
    469c:	40000400 	.word	0x40000400
    46a0:	00004611 	.word	0x00004611

000046a4 <aes_write_key>:
 * \note The key size depends on the current AES configuration.
 */
void aes_write_key(
		struct aes_module *const module,
		const uint32_t *key)
{
    46a4:	b570      	push	{r4, r5, r6, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(key);

	switch (module->key_size) {
    46a6:	7943      	ldrb	r3, [r0, #5]
    46a8:	2b01      	cmp	r3, #1
    46aa:	d005      	beq.n	46b8 <aes_write_key+0x14>
    46ac:	2b00      	cmp	r3, #0
    46ae:	d010      	beq.n	46d2 <aes_write_key+0x2e>
    46b0:	2b02      	cmp	r3, #2
    46b2:	d10d      	bne.n	46d0 <aes_write_key+0x2c>
	case AES_KEY_SIZE_192:
		key_length = 6;
		break;

	case AES_KEY_SIZE_256:
		key_length = 8;
    46b4:	2508      	movs	r5, #8
    46b6:	e000      	b.n	46ba <aes_write_key+0x16>
		key_length = 6;
    46b8:	2506      	movs	r5, #6
{
    46ba:	2300      	movs	r3, #0
	default:
		break;
	}

	for (i = 0; i < key_length; i++) {
		module->hw->KEYWORD[i].reg = *key;
    46bc:	c910      	ldmia	r1!, {r4}
    46be:	1c9a      	adds	r2, r3, #2
    46c0:	0092      	lsls	r2, r2, #2
    46c2:	6806      	ldr	r6, [r0, #0]
    46c4:	46b4      	mov	ip, r6
    46c6:	4462      	add	r2, ip
    46c8:	6054      	str	r4, [r2, #4]
	for (i = 0; i < key_length; i++) {
    46ca:	3301      	adds	r3, #1
    46cc:	42ab      	cmp	r3, r5
    46ce:	d3f5      	bcc.n	46bc <aes_write_key+0x18>
		key++;
	}
}
    46d0:	bd70      	pop	{r4, r5, r6, pc}
		key_length = 4;
    46d2:	2504      	movs	r5, #4
    46d4:	e7f1      	b.n	46ba <aes_write_key+0x16>
    46d6:	Address 0x000046d6 is out of bounds.


000046d8 <aes_write_input_data>:
 * \param[in] input_data_buffer Pointer to an input data buffer
 */
void aes_write_input_data(
		struct aes_module *const module,
		const uint32_t *input_data_buffer)
{
    46d8:	b510      	push	{r4, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);;
	Assert(input_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
    46da:	2300      	movs	r3, #0
    46dc:	6802      	ldr	r2, [r0, #0]
    46de:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
    46e0:	4b0f      	ldr	r3, [pc, #60]	; (4720 <aes_write_input_data+0x48>)
    46e2:	6842      	ldr	r2, [r0, #4]
    46e4:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
    46e6:	4a0f      	ldr	r2, [pc, #60]	; (4724 <aes_write_input_data+0x4c>)
    46e8:	4293      	cmp	r3, r2
    46ea:	d00a      	beq.n	4702 <aes_write_input_data+0x2a>
		for (i = 0; i < 2; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
			input_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
    46ec:	7903      	ldrb	r3, [r0, #4]
    46ee:	2b03      	cmp	r3, #3
    46f0:	d00e      	beq.n	4710 <aes_write_input_data+0x38>
    46f2:	000c      	movs	r4, r1
    46f4:	3410      	adds	r4, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		module->hw->INDATA.reg = *input_data_buffer;
	} else {
		for (i = 0; i < 4; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
    46f6:	6803      	ldr	r3, [r0, #0]
    46f8:	c904      	ldmia	r1!, {r2}
    46fa:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < 4; i++) {
    46fc:	428c      	cmp	r4, r1
    46fe:	d1fa      	bne.n	46f6 <aes_write_input_data+0x1e>
			input_data_buffer++;
		}
	}
}
    4700:	bd10      	pop	{r4, pc}
			module->hw->INDATA.reg = *input_data_buffer;
    4702:	6803      	ldr	r3, [r0, #0]
    4704:	680a      	ldr	r2, [r1, #0]
    4706:	639a      	str	r2, [r3, #56]	; 0x38
    4708:	6803      	ldr	r3, [r0, #0]
    470a:	684a      	ldr	r2, [r1, #4]
    470c:	639a      	str	r2, [r3, #56]	; 0x38
    470e:	e7f7      	b.n	4700 <aes_write_input_data+0x28>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
    4710:	7983      	ldrb	r3, [r0, #6]
    4712:	3b02      	subs	r3, #2
    4714:	2b01      	cmp	r3, #1
    4716:	d8ec      	bhi.n	46f2 <aes_write_input_data+0x1a>
		module->hw->INDATA.reg = *input_data_buffer;
    4718:	6803      	ldr	r3, [r0, #0]
    471a:	680a      	ldr	r2, [r1, #0]
    471c:	639a      	str	r2, [r3, #56]	; 0x38
    471e:	e7ef      	b.n	4700 <aes_write_input_data+0x28>
    4720:	00ff00ff 	.word	0x00ff00ff
    4724:	00010003 	.word	0x00010003

00004728 <aes_read_output_data>:
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(output_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
    4728:	2300      	movs	r3, #0
    472a:	6802      	ldr	r2, [r0, #0]
    472c:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
    472e:	4b10      	ldr	r3, [pc, #64]	; (4770 <aes_read_output_data+0x48>)
    4730:	6842      	ldr	r2, [r0, #4]
    4732:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
    4734:	4a0f      	ldr	r2, [pc, #60]	; (4774 <aes_read_output_data+0x4c>)
    4736:	4293      	cmp	r3, r2
    4738:	d00a      	beq.n	4750 <aes_read_output_data+0x28>
		for (i = 0; i < 2; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
			output_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
    473a:	7903      	ldrb	r3, [r0, #4]
    473c:	2b03      	cmp	r3, #3
    473e:	d00e      	beq.n	475e <aes_read_output_data+0x36>
    4740:	000a      	movs	r2, r1
    4742:	3210      	adds	r2, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		*output_data_buffer = module->hw->INDATA.reg;
	} else {
		for (i = 0; i < 4; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
    4744:	6803      	ldr	r3, [r0, #0]
    4746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4748:	c108      	stmia	r1!, {r3}
		for (i = 0; i < 4; i++) {
    474a:	428a      	cmp	r2, r1
    474c:	d1fa      	bne.n	4744 <aes_read_output_data+0x1c>
			output_data_buffer++;
		}
	}
}
    474e:	4770      	bx	lr
			*output_data_buffer = module->hw->INDATA.reg;
    4750:	6803      	ldr	r3, [r0, #0]
    4752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4754:	600b      	str	r3, [r1, #0]
    4756:	6803      	ldr	r3, [r0, #0]
    4758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    475a:	604b      	str	r3, [r1, #4]
    475c:	e7f7      	b.n	474e <aes_read_output_data+0x26>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
    475e:	7983      	ldrb	r3, [r0, #6]
    4760:	3b02      	subs	r3, #2
    4762:	2b01      	cmp	r3, #1
    4764:	d8ec      	bhi.n	4740 <aes_read_output_data+0x18>
		*output_data_buffer = module->hw->INDATA.reg;
    4766:	6803      	ldr	r3, [r0, #0]
    4768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    476a:	600b      	str	r3, [r1, #0]
    476c:	e7ef      	b.n	474e <aes_read_output_data+0x26>
    476e:	46c0      	nop			; (mov r8, r8)
    4770:	00ff00ff 	.word	0x00ff00ff
    4774:	00010003 	.word	0x00010003

00004778 <AES_Handler>:

/**
* \internal The AES interrupt handler.
*/
void AES_Handler(void)
{
    4778:	b510      	push	{r4, lr}
	uint32_t status = AES->INTFLAG.reg;
    477a:	4b0c      	ldr	r3, [pc, #48]	; (47ac <AES_Handler+0x34>)
    477c:	79dc      	ldrb	r4, [r3, #7]
    477e:	b2e4      	uxtb	r4, r4

	if (status & AES_INTFLAG_ENCCMP) {
    4780:	07e3      	lsls	r3, r4, #31
    4782:	d507      	bpl.n	4794 <AES_Handler+0x1c>
		if (aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]) {
    4784:	4b0a      	ldr	r3, [pc, #40]	; (47b0 <AES_Handler+0x38>)
    4786:	681b      	ldr	r3, [r3, #0]
    4788:	2b00      	cmp	r3, #0
    478a:	d00d      	beq.n	47a8 <AES_Handler+0x30>
			AES->INTFLAG.reg = AES_INTFLAG_ENCCMP;
    478c:	2101      	movs	r1, #1
    478e:	4a07      	ldr	r2, [pc, #28]	; (47ac <AES_Handler+0x34>)
    4790:	71d1      	strb	r1, [r2, #7]
			aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]();
    4792:	4798      	blx	r3
		}
	}

	if (status & AES_INTFLAG_GFMCMP) {
    4794:	07a3      	lsls	r3, r4, #30
    4796:	d507      	bpl.n	47a8 <AES_Handler+0x30>
		if (aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]) {
    4798:	4b05      	ldr	r3, [pc, #20]	; (47b0 <AES_Handler+0x38>)
    479a:	681b      	ldr	r3, [r3, #0]
    479c:	2b00      	cmp	r3, #0
    479e:	d003      	beq.n	47a8 <AES_Handler+0x30>
			AES->INTFLAG.reg = AES_INTFLAG_GFMCMP;
    47a0:	2102      	movs	r1, #2
    47a2:	4a02      	ldr	r2, [pc, #8]	; (47ac <AES_Handler+0x34>)
    47a4:	71d1      	strb	r1, [r2, #7]
			aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]();
    47a6:	4798      	blx	r3
		}
	}
}
    47a8:	bd10      	pop	{r4, pc}
    47aa:	46c0      	nop			; (mov r8, r8)
    47ac:	42003400 	.word	0x42003400
    47b0:	200000ac 	.word	0x200000ac

000047b4 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    47b4:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    47b6:	2a00      	cmp	r2, #0
    47b8:	d001      	beq.n	47be <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    47ba:	0018      	movs	r0, r3
    47bc:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    47be:	008b      	lsls	r3, r1, #2
    47c0:	4a06      	ldr	r2, [pc, #24]	; (47dc <extint_register_callback+0x28>)
    47c2:	589b      	ldr	r3, [r3, r2]
    47c4:	2b00      	cmp	r3, #0
    47c6:	d003      	beq.n	47d0 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    47c8:	4283      	cmp	r3, r0
    47ca:	d005      	beq.n	47d8 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    47cc:	231d      	movs	r3, #29
    47ce:	e7f4      	b.n	47ba <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    47d0:	0089      	lsls	r1, r1, #2
    47d2:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    47d4:	2300      	movs	r3, #0
    47d6:	e7f0      	b.n	47ba <extint_register_callback+0x6>
		return STATUS_OK;
    47d8:	2300      	movs	r3, #0
    47da:	e7ee      	b.n	47ba <extint_register_callback+0x6>
    47dc:	20001ed0 	.word	0x20001ed0

000047e0 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    47e0:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    47e2:	2900      	cmp	r1, #0
    47e4:	d001      	beq.n	47ea <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    47e6:	0018      	movs	r0, r3
    47e8:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    47ea:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    47ec:	281f      	cmp	r0, #31
    47ee:	d800      	bhi.n	47f2 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    47f0:	4a02      	ldr	r2, [pc, #8]	; (47fc <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    47f2:	2301      	movs	r3, #1
    47f4:	4083      	lsls	r3, r0
    47f6:	6113      	str	r3, [r2, #16]
	return STATUS_OK;
    47f8:	2300      	movs	r3, #0
    47fa:	e7f4      	b.n	47e6 <extint_chan_enable_callback+0x6>
    47fc:	40002400 	.word	0x40002400

00004800 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    4800:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4802:	2200      	movs	r2, #0
    4804:	4b10      	ldr	r3, [pc, #64]	; (4848 <EIC_Handler+0x48>)
    4806:	701a      	strb	r2, [r3, #0]
    4808:	2300      	movs	r3, #0
    480a:	4910      	ldr	r1, [pc, #64]	; (484c <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    480c:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    480e:	4e10      	ldr	r6, [pc, #64]	; (4850 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4810:	4c0d      	ldr	r4, [pc, #52]	; (4848 <EIC_Handler+0x48>)
    4812:	e00a      	b.n	482a <EIC_Handler+0x2a>
		return eics[eic_index];
    4814:	490d      	ldr	r1, [pc, #52]	; (484c <EIC_Handler+0x4c>)
    4816:	e008      	b.n	482a <EIC_Handler+0x2a>
    4818:	7823      	ldrb	r3, [r4, #0]
    481a:	3301      	adds	r3, #1
    481c:	b2db      	uxtb	r3, r3
    481e:	7023      	strb	r3, [r4, #0]
    4820:	2b0f      	cmp	r3, #15
    4822:	d810      	bhi.n	4846 <EIC_Handler+0x46>
		return NULL;
    4824:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    4826:	2b1f      	cmp	r3, #31
    4828:	d9f4      	bls.n	4814 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    482a:	0028      	movs	r0, r5
    482c:	4018      	ands	r0, r3
    482e:	2201      	movs	r2, #1
    4830:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    4832:	6948      	ldr	r0, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
    4834:	4210      	tst	r0, r2
    4836:	d0ef      	beq.n	4818 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    4838:	614a      	str	r2, [r1, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    483a:	009b      	lsls	r3, r3, #2
    483c:	599b      	ldr	r3, [r3, r6]
    483e:	2b00      	cmp	r3, #0
    4840:	d0ea      	beq.n	4818 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    4842:	4798      	blx	r3
    4844:	e7e8      	b.n	4818 <EIC_Handler+0x18>
			}
		}
	}
}
    4846:	bd70      	pop	{r4, r5, r6, pc}
    4848:	20001ecc 	.word	0x20001ecc
    484c:	40002400 	.word	0x40002400
    4850:	20001ed0 	.word	0x20001ed0

00004854 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
    4854:	4a06      	ldr	r2, [pc, #24]	; (4870 <_extint_enable+0x1c>)
    4856:	7813      	ldrb	r3, [r2, #0]
    4858:	2102      	movs	r1, #2
    485a:	430b      	orrs	r3, r1
    485c:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    485e:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4860:	6853      	ldr	r3, [r2, #4]
    4862:	4219      	tst	r1, r3
    4864:	d1fc      	bne.n	4860 <_extint_enable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4866:	6853      	ldr	r3, [r2, #4]
    4868:	4218      	tst	r0, r3
    486a:	d1f9      	bne.n	4860 <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    486c:	4770      	bx	lr
    486e:	46c0      	nop			; (mov r8, r8)
    4870:	40002400 	.word	0x40002400

00004874 <_extint_disable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    4874:	4a06      	ldr	r2, [pc, #24]	; (4890 <_extint_disable+0x1c>)
    4876:	7813      	ldrb	r3, [r2, #0]
    4878:	2102      	movs	r1, #2
    487a:	438b      	bics	r3, r1
    487c:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    487e:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4880:	6853      	ldr	r3, [r2, #4]
    4882:	4219      	tst	r1, r3
    4884:	d1fc      	bne.n	4880 <_extint_disable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4886:	6853      	ldr	r3, [r2, #4]
    4888:	4218      	tst	r0, r3
    488a:	d1f9      	bne.n	4880 <_extint_disable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    488c:	4770      	bx	lr
    488e:	46c0      	nop			; (mov r8, r8)
    4890:	40002400 	.word	0x40002400

00004894 <_system_extint_init>:
{
    4894:	b510      	push	{r4, lr}
			MCLK->APBAMASK.reg |= mask;
    4896:	4a12      	ldr	r2, [pc, #72]	; (48e0 <_system_extint_init+0x4c>)
    4898:	6951      	ldr	r1, [r2, #20]
    489a:	2380      	movs	r3, #128	; 0x80
    489c:	009b      	lsls	r3, r3, #2
    489e:	430b      	orrs	r3, r1
    48a0:	6153      	str	r3, [r2, #20]
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
    48a2:	4a10      	ldr	r2, [pc, #64]	; (48e4 <_system_extint_init+0x50>)
    48a4:	7813      	ldrb	r3, [r2, #0]
    48a6:	2101      	movs	r1, #1
    48a8:	430b      	orrs	r3, r1
    48aa:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    48ac:	3101      	adds	r1, #1
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    48ae:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    48b0:	6853      	ldr	r3, [r2, #4]
    48b2:	4219      	tst	r1, r3
    48b4:	d1fc      	bne.n	48b0 <_system_extint_init+0x1c>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    48b6:	6853      	ldr	r3, [r2, #4]
    48b8:	4218      	tst	r0, r3
    48ba:	d1f9      	bne.n	48b0 <_system_extint_init+0x1c>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_ULP32K;
    48bc:	4a09      	ldr	r2, [pc, #36]	; (48e4 <_system_extint_init+0x50>)
    48be:	7813      	ldrb	r3, [r2, #0]
    48c0:	2110      	movs	r1, #16
    48c2:	430b      	orrs	r3, r1
    48c4:	7013      	strb	r3, [r2, #0]
    48c6:	4b08      	ldr	r3, [pc, #32]	; (48e8 <_system_extint_init+0x54>)
    48c8:	0019      	movs	r1, r3
    48ca:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    48cc:	2200      	movs	r2, #0
    48ce:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    48d0:	428b      	cmp	r3, r1
    48d2:	d1fc      	bne.n	48ce <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    48d4:	2208      	movs	r2, #8
    48d6:	4b05      	ldr	r3, [pc, #20]	; (48ec <_system_extint_init+0x58>)
    48d8:	601a      	str	r2, [r3, #0]
	_extint_enable();
    48da:	4b05      	ldr	r3, [pc, #20]	; (48f0 <_system_extint_init+0x5c>)
    48dc:	4798      	blx	r3
}
    48de:	bd10      	pop	{r4, pc}
    48e0:	40000400 	.word	0x40000400
    48e4:	40002400 	.word	0x40002400
    48e8:	20001ed0 	.word	0x20001ed0
    48ec:	e000e100 	.word	0xe000e100
    48f0:	00004855 	.word	0x00004855

000048f4 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    48f4:	2300      	movs	r3, #0
    48f6:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    48f8:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    48fa:	2201      	movs	r2, #1
    48fc:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
    48fe:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    4900:	3201      	adds	r2, #1
    4902:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
    4904:	7243      	strb	r3, [r0, #9]
}
    4906:	4770      	bx	lr

00004908 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    4908:	b5f0      	push	{r4, r5, r6, r7, lr}
    490a:	b083      	sub	sp, #12
    490c:	0005      	movs	r5, r0
    490e:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
    4910:	4b1c      	ldr	r3, [pc, #112]	; (4984 <extint_chan_set_config+0x7c>)
    4912:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4914:	a901      	add	r1, sp, #4
    4916:	2300      	movs	r3, #0
    4918:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    491a:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    491c:	7923      	ldrb	r3, [r4, #4]
    491e:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    4920:	7a23      	ldrb	r3, [r4, #8]
    4922:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    4924:	7820      	ldrb	r0, [r4, #0]
    4926:	4b18      	ldr	r3, [pc, #96]	; (4988 <extint_chan_set_config+0x80>)
    4928:	4798      	blx	r3
		return NULL;
    492a:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    492c:	2d1f      	cmp	r5, #31
    492e:	d800      	bhi.n	4932 <extint_chan_set_config+0x2a>
		return eics[eic_index];
    4930:	4916      	ldr	r1, [pc, #88]	; (498c <extint_chan_set_config+0x84>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    4932:	2207      	movs	r2, #7
    4934:	402a      	ands	r2, r5
    4936:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    4938:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    493a:	7aa3      	ldrb	r3, [r4, #10]
    493c:	2b00      	cmp	r3, #0
    493e:	d001      	beq.n	4944 <extint_chan_set_config+0x3c>
    4940:	2308      	movs	r3, #8
    4942:	431f      	orrs	r7, r3
    4944:	08eb      	lsrs	r3, r5, #3
    4946:	009b      	lsls	r3, r3, #2
    4948:	18cb      	adds	r3, r1, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    494a:	69d8      	ldr	r0, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    494c:	260f      	movs	r6, #15
    494e:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    4950:	43b0      	bics	r0, r6
			(new_config << config_pos);
    4952:	4097      	lsls	r7, r2
    4954:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4956:	4302      	orrs	r2, r0
		= (EIC_module->CONFIG[channel / 8].reg &
    4958:	61da      	str	r2, [r3, #28]
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
    495a:	7a63      	ldrb	r3, [r4, #9]
    495c:	2b00      	cmp	r3, #0
    495e:	d10b      	bne.n	4978 <extint_chan_set_config+0x70>
		EIC_module->ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
    4960:	698a      	ldr	r2, [r1, #24]
    4962:	2301      	movs	r3, #1
    4964:	40ab      	lsls	r3, r5
    4966:	43db      	mvns	r3, r3
    4968:	041b      	lsls	r3, r3, #16
    496a:	0c1b      	lsrs	r3, r3, #16
    496c:	4013      	ands	r3, r2
    496e:	618b      	str	r3, [r1, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
    4970:	4b07      	ldr	r3, [pc, #28]	; (4990 <extint_chan_set_config+0x88>)
    4972:	4798      	blx	r3
}
    4974:	b003      	add	sp, #12
    4976:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->ASYNCH.reg |= (1UL << channel);
    4978:	698a      	ldr	r2, [r1, #24]
    497a:	2301      	movs	r3, #1
    497c:	40ab      	lsls	r3, r5
    497e:	4313      	orrs	r3, r2
    4980:	618b      	str	r3, [r1, #24]
    4982:	e7f5      	b.n	4970 <extint_chan_set_config+0x68>
    4984:	00004875 	.word	0x00004875
    4988:	00006a69 	.word	0x00006a69
    498c:	40002400 	.word	0x40002400
    4990:	00004855 	.word	0x00004855

00004994 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    4994:	b530      	push	{r4, r5, lr}
    4996:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    4998:	4a25      	ldr	r2, [pc, #148]	; (4a30 <nvm_execute_command+0x9c>)
    499a:	8810      	ldrh	r0, [r2, #0]
    499c:	8853      	ldrh	r3, [r2, #2]
    499e:	4343      	muls	r3, r0
    49a0:	428b      	cmp	r3, r1
    49a2:	d20b      	bcs.n	49bc <nvm_execute_command+0x28>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    49a4:	2280      	movs	r2, #128	; 0x80
    49a6:	0192      	lsls	r2, r2, #6
    49a8:	4b22      	ldr	r3, [pc, #136]	; (4a34 <nvm_execute_command+0xa0>)
    49aa:	18cb      	adds	r3, r1, r3
    49ac:	4293      	cmp	r3, r2
    49ae:	d905      	bls.n	49bc <nvm_execute_command+0x28>
#ifdef FEATURE_NVM_RWWEE
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    49b0:	4a21      	ldr	r2, [pc, #132]	; (4a38 <nvm_execute_command+0xa4>)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    49b2:	2018      	movs	r0, #24
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    49b4:	4b21      	ldr	r3, [pc, #132]	; (4a3c <nvm_execute_command+0xa8>)
    49b6:	18cb      	adds	r3, r1, r3
    49b8:	4293      	cmp	r3, r2
    49ba:	d80e      	bhi.n	49da <nvm_execute_command+0x46>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    49bc:	4b20      	ldr	r3, [pc, #128]	; (4a40 <nvm_execute_command+0xac>)
    49be:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    49c0:	2280      	movs	r2, #128	; 0x80
    49c2:	02d2      	lsls	r2, r2, #11
    49c4:	432a      	orrs	r2, r5
    49c6:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    49c8:	2220      	movs	r2, #32
    49ca:	32ff      	adds	r2, #255	; 0xff
    49cc:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    49ce:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    49d0:	07db      	lsls	r3, r3, #31
    49d2:	d403      	bmi.n	49dc <nvm_execute_command+0x48>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    49d4:	4b1a      	ldr	r3, [pc, #104]	; (4a40 <nvm_execute_command+0xac>)
    49d6:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
    49d8:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    49da:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    49dc:	2c45      	cmp	r4, #69	; 0x45
    49de:	d822      	bhi.n	4a26 <nvm_execute_command+0x92>
    49e0:	00a3      	lsls	r3, r4, #2
    49e2:	4a18      	ldr	r2, [pc, #96]	; (4a44 <nvm_execute_command+0xb0>)
    49e4:	58d3      	ldr	r3, [r2, r3]
    49e6:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    49e8:	4b15      	ldr	r3, [pc, #84]	; (4a40 <nvm_execute_command+0xac>)
    49ea:	8b1b      	ldrh	r3, [r3, #24]
    49ec:	05db      	lsls	r3, r3, #23
    49ee:	d503      	bpl.n	49f8 <nvm_execute_command+0x64>
				nvm_module->CTRLB.reg = ctrlb_bak;
    49f0:	4b13      	ldr	r3, [pc, #76]	; (4a40 <nvm_execute_command+0xac>)
    49f2:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
    49f4:	2010      	movs	r0, #16
    49f6:	e7f0      	b.n	49da <nvm_execute_command+0x46>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    49f8:	0889      	lsrs	r1, r1, #2
    49fa:	0049      	lsls	r1, r1, #1
    49fc:	4b10      	ldr	r3, [pc, #64]	; (4a40 <nvm_execute_command+0xac>)
    49fe:	61d9      	str	r1, [r3, #28]
			break;
    4a00:	e003      	b.n	4a0a <nvm_execute_command+0x76>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    4a02:	0889      	lsrs	r1, r1, #2
    4a04:	0049      	lsls	r1, r1, #1
    4a06:	4b0e      	ldr	r3, [pc, #56]	; (4a40 <nvm_execute_command+0xac>)
    4a08:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    4a0a:	20a5      	movs	r0, #165	; 0xa5
    4a0c:	0200      	lsls	r0, r0, #8
    4a0e:	4304      	orrs	r4, r0
    4a10:	4b0b      	ldr	r3, [pc, #44]	; (4a40 <nvm_execute_command+0xac>)
    4a12:	801c      	strh	r4, [r3, #0]
    4a14:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    4a16:	2201      	movs	r2, #1
    4a18:	7d0b      	ldrb	r3, [r1, #20]
    4a1a:	4213      	tst	r3, r2
    4a1c:	d0fc      	beq.n	4a18 <nvm_execute_command+0x84>
	nvm_module->CTRLB.reg = ctrlb_bak;
    4a1e:	4b08      	ldr	r3, [pc, #32]	; (4a40 <nvm_execute_command+0xac>)
    4a20:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
    4a22:	2000      	movs	r0, #0
    4a24:	e7d9      	b.n	49da <nvm_execute_command+0x46>
			nvm_module->CTRLB.reg = ctrlb_bak;
    4a26:	4b06      	ldr	r3, [pc, #24]	; (4a40 <nvm_execute_command+0xac>)
    4a28:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    4a2a:	2017      	movs	r0, #23
    4a2c:	e7d5      	b.n	49da <nvm_execute_command+0x46>
    4a2e:	46c0      	nop			; (mov r8, r8)
    4a30:	200000b4 	.word	0x200000b4
    4a34:	ff7fc000 	.word	0xff7fc000
    4a38:	00001fff 	.word	0x00001fff
    4a3c:	ffc00000 	.word	0xffc00000
    4a40:	41004000 	.word	0x41004000
    4a44:	0001749c 	.word	0x0001749c

00004a48 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    4a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    4a4a:	4b2f      	ldr	r3, [pc, #188]	; (4b08 <nvm_write_buffer+0xc0>)
    4a4c:	881c      	ldrh	r4, [r3, #0]
    4a4e:	885b      	ldrh	r3, [r3, #2]
    4a50:	4363      	muls	r3, r4
	if (destination_address >
    4a52:	4283      	cmp	r3, r0
    4a54:	d207      	bcs.n	4a66 <nvm_write_buffer+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4a56:	4e2d      	ldr	r6, [pc, #180]	; (4b0c <nvm_write_buffer+0xc4>)
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    4a58:	2518      	movs	r5, #24
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4a5a:	4b2d      	ldr	r3, [pc, #180]	; (4b10 <nvm_write_buffer+0xc8>)
    4a5c:	18c3      	adds	r3, r0, r3
    4a5e:	42b3      	cmp	r3, r6
    4a60:	d806      	bhi.n	4a70 <nvm_write_buffer+0x28>
		}
		is_rww_eeprom = true;
    4a62:	2601      	movs	r6, #1
    4a64:	e000      	b.n	4a68 <nvm_write_buffer+0x20>
	bool is_rww_eeprom = false;
    4a66:	2600      	movs	r6, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    4a68:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
    4a6a:	2518      	movs	r5, #24
	if (destination_address & (_nvm_dev.page_size - 1)) {
    4a6c:	4218      	tst	r0, r3
    4a6e:	d001      	beq.n	4a74 <nvm_write_buffer+0x2c>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    4a70:	0028      	movs	r0, r5
    4a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    4a74:	3d01      	subs	r5, #1
	if (length > _nvm_dev.page_size) {
    4a76:	4294      	cmp	r4, r2
    4a78:	d3fa      	bcc.n	4a70 <nvm_write_buffer+0x28>
    4a7a:	4b26      	ldr	r3, [pc, #152]	; (4b14 <nvm_write_buffer+0xcc>)
    4a7c:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    4a7e:	3d12      	subs	r5, #18
	if (!nvm_is_ready()) {
    4a80:	07db      	lsls	r3, r3, #31
    4a82:	d5f5      	bpl.n	4a70 <nvm_write_buffer+0x28>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    4a84:	4c24      	ldr	r4, [pc, #144]	; (4b18 <nvm_write_buffer+0xd0>)
    4a86:	4b23      	ldr	r3, [pc, #140]	; (4b14 <nvm_write_buffer+0xcc>)
    4a88:	801c      	strh	r4, [r3, #0]
    4a8a:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    4a8c:	2401      	movs	r4, #1
    4a8e:	7d2b      	ldrb	r3, [r5, #20]
    4a90:	4223      	tst	r3, r4
    4a92:	d0fc      	beq.n	4a8e <nvm_write_buffer+0x46>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4a94:	2420      	movs	r4, #32
    4a96:	34ff      	adds	r4, #255	; 0xff
    4a98:	4b1e      	ldr	r3, [pc, #120]	; (4b14 <nvm_write_buffer+0xcc>)
    4a9a:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    4a9c:	2a00      	cmp	r2, #0
    4a9e:	d02c      	beq.n	4afa <nvm_write_buffer+0xb2>
    4aa0:	2301      	movs	r3, #1
    4aa2:	0005      	movs	r5, r0
    4aa4:	439d      	bics	r5, r3
    4aa6:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    4aa8:	1e54      	subs	r4, r2, #1
    4aaa:	46a4      	mov	ip, r4
    4aac:	e009      	b.n	4ac2 <nvm_write_buffer+0x7a>
			data |= (buffer[i + 1] << 8);
    4aae:	18cf      	adds	r7, r1, r3
    4ab0:	787f      	ldrb	r7, [r7, #1]
    4ab2:	023f      	lsls	r7, r7, #8
    4ab4:	433c      	orrs	r4, r7
		NVM_MEMORY[nvm_address++] = data;
    4ab6:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    4ab8:	3302      	adds	r3, #2
    4aba:	b29b      	uxth	r3, r3
    4abc:	3502      	adds	r5, #2
    4abe:	429a      	cmp	r2, r3
    4ac0:	d904      	bls.n	4acc <nvm_write_buffer+0x84>
		data = buffer[i];
    4ac2:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    4ac4:	4563      	cmp	r3, ip
    4ac6:	dbf2      	blt.n	4aae <nvm_write_buffer+0x66>
		data = buffer[i];
    4ac8:	b2a4      	uxth	r4, r4
    4aca:	e7f4      	b.n	4ab6 <nvm_write_buffer+0x6e>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4acc:	4b0e      	ldr	r3, [pc, #56]	; (4b08 <nvm_write_buffer+0xc0>)
    4ace:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    4ad0:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4ad2:	2b00      	cmp	r3, #0
    4ad4:	d1cc      	bne.n	4a70 <nvm_write_buffer+0x28>
    4ad6:	2a3f      	cmp	r2, #63	; 0x3f
    4ad8:	d8ca      	bhi.n	4a70 <nvm_write_buffer+0x28>
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
    4ada:	2e00      	cmp	r6, #0
    4adc:	d106      	bne.n	4aec <nvm_write_buffer+0xa4>
    4ade:	2200      	movs	r2, #0
    4ae0:	0001      	movs	r1, r0
    4ae2:	2004      	movs	r0, #4
    4ae4:	4b0d      	ldr	r3, [pc, #52]	; (4b1c <nvm_write_buffer+0xd4>)
    4ae6:	4798      	blx	r3
    4ae8:	0005      	movs	r5, r0
    4aea:	e7c1      	b.n	4a70 <nvm_write_buffer+0x28>
    4aec:	2200      	movs	r2, #0
    4aee:	0001      	movs	r1, r0
    4af0:	201c      	movs	r0, #28
    4af2:	4b0a      	ldr	r3, [pc, #40]	; (4b1c <nvm_write_buffer+0xd4>)
    4af4:	4798      	blx	r3
    4af6:	0005      	movs	r5, r0
    4af8:	e7ba      	b.n	4a70 <nvm_write_buffer+0x28>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4afa:	4b03      	ldr	r3, [pc, #12]	; (4b08 <nvm_write_buffer+0xc0>)
    4afc:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    4afe:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4b00:	2b00      	cmp	r3, #0
    4b02:	d0ea      	beq.n	4ada <nvm_write_buffer+0x92>
    4b04:	e7b4      	b.n	4a70 <nvm_write_buffer+0x28>
    4b06:	46c0      	nop			; (mov r8, r8)
    4b08:	200000b4 	.word	0x200000b4
    4b0c:	00001fff 	.word	0x00001fff
    4b10:	ffc00000 	.word	0xffc00000
    4b14:	41004000 	.word	0x41004000
    4b18:	ffffa544 	.word	0xffffa544
    4b1c:	00004995 	.word	0x00004995

00004b20 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    4b20:	b510      	push	{r4, lr}
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    4b22:	4a1b      	ldr	r2, [pc, #108]	; (4b90 <nvm_erase_row+0x70>)
    4b24:	8813      	ldrh	r3, [r2, #0]
    4b26:	8852      	ldrh	r2, [r2, #2]
    4b28:	435a      	muls	r2, r3
	if (row_address >
    4b2a:	4282      	cmp	r2, r0
    4b2c:	d207      	bcs.n	4b3e <nvm_erase_row+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4b2e:	4c19      	ldr	r4, [pc, #100]	; (4b94 <nvm_erase_row+0x74>)
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    4b30:	2218      	movs	r2, #24
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4b32:	4919      	ldr	r1, [pc, #100]	; (4b98 <nvm_erase_row+0x78>)
    4b34:	1841      	adds	r1, r0, r1
    4b36:	42a1      	cmp	r1, r4
    4b38:	d807      	bhi.n	4b4a <nvm_erase_row+0x2a>
		}
		is_rww_eeprom = true;
    4b3a:	2101      	movs	r1, #1
    4b3c:	e000      	b.n	4b40 <nvm_erase_row+0x20>
		bool is_rww_eeprom = false;
    4b3e:	2100      	movs	r1, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    4b40:	009b      	lsls	r3, r3, #2
    4b42:	3b01      	subs	r3, #1
		return STATUS_ERR_BAD_ADDRESS;
    4b44:	2218      	movs	r2, #24
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    4b46:	4218      	tst	r0, r3
    4b48:	d001      	beq.n	4b4e <nvm_erase_row+0x2e>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    4b4a:	0010      	movs	r0, r2
    4b4c:	bd10      	pop	{r4, pc}
    4b4e:	4b13      	ldr	r3, [pc, #76]	; (4b9c <nvm_erase_row+0x7c>)
    4b50:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    4b52:	3a13      	subs	r2, #19
	if (!nvm_is_ready()) {
    4b54:	07db      	lsls	r3, r3, #31
    4b56:	d5f8      	bpl.n	4b4a <nvm_erase_row+0x2a>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4b58:	4b10      	ldr	r3, [pc, #64]	; (4b9c <nvm_erase_row+0x7c>)
    4b5a:	2220      	movs	r2, #32
    4b5c:	32ff      	adds	r2, #255	; 0xff
    4b5e:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    4b60:	0880      	lsrs	r0, r0, #2
    4b62:	0040      	lsls	r0, r0, #1
    4b64:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
    4b66:	2900      	cmp	r1, #0
    4b68:	d10f      	bne.n	4b8a <nvm_erase_row+0x6a>
    4b6a:	4a0d      	ldr	r2, [pc, #52]	; (4ba0 <nvm_erase_row+0x80>)
    4b6c:	4b0b      	ldr	r3, [pc, #44]	; (4b9c <nvm_erase_row+0x7c>)
    4b6e:	801a      	strh	r2, [r3, #0]
    4b70:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    4b72:	2201      	movs	r2, #1
    4b74:	7d0b      	ldrb	r3, [r1, #20]
    4b76:	4213      	tst	r3, r2
    4b78:	d0fc      	beq.n	4b74 <nvm_erase_row+0x54>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    4b7a:	4b08      	ldr	r3, [pc, #32]	; (4b9c <nvm_erase_row+0x7c>)
    4b7c:	8b1a      	ldrh	r2, [r3, #24]
    4b7e:	201c      	movs	r0, #28
    4b80:	4002      	ands	r2, r0
	return STATUS_OK;
    4b82:	1e50      	subs	r0, r2, #1
    4b84:	4182      	sbcs	r2, r0
    4b86:	0092      	lsls	r2, r2, #2
    4b88:	e7df      	b.n	4b4a <nvm_erase_row+0x2a>
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
    4b8a:	4a06      	ldr	r2, [pc, #24]	; (4ba4 <nvm_erase_row+0x84>)
    4b8c:	e7ee      	b.n	4b6c <nvm_erase_row+0x4c>
    4b8e:	46c0      	nop			; (mov r8, r8)
    4b90:	200000b4 	.word	0x200000b4
    4b94:	00001fff 	.word	0x00001fff
    4b98:	ffc00000 	.word	0xffc00000
    4b9c:	41004000 	.word	0x41004000
    4ba0:	0000a502 	.word	0x0000a502
    4ba4:	0000a51a 	.word	0x0000a51a

00004ba8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    4ba8:	b500      	push	{lr}
    4baa:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4bac:	ab01      	add	r3, sp, #4
    4bae:	2280      	movs	r2, #128	; 0x80
    4bb0:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    4bb2:	780a      	ldrb	r2, [r1, #0]
    4bb4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    4bb6:	784a      	ldrb	r2, [r1, #1]
    4bb8:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    4bba:	788a      	ldrb	r2, [r1, #2]
    4bbc:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    4bbe:	0019      	movs	r1, r3
    4bc0:	4b01      	ldr	r3, [pc, #4]	; (4bc8 <port_pin_set_config+0x20>)
    4bc2:	4798      	blx	r3
}
    4bc4:	b003      	add	sp, #12
    4bc6:	bd00      	pop	{pc}
    4bc8:	00006a69 	.word	0x00006a69

00004bcc <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4bcc:	6803      	ldr	r3, [r0, #0]

	if (rtc_module->MODE0.SYNCBUSY.reg) {
    4bce:	6918      	ldr	r0, [r3, #16]
    4bd0:	1e43      	subs	r3, r0, #1
    4bd2:	4198      	sbcs	r0, r3
    4bd4:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
    4bd6:	4770      	bx	lr

00004bd8 <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
    4bd8:	b570      	push	{r4, r5, r6, lr}
    4bda:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4bdc:	6806      	ldr	r6, [r0, #0]

	/* Initialize return value. */
	uint32_t ret_val;

	while (rtc_count_is_syncing(module)) {
    4bde:	4d08      	ldr	r5, [pc, #32]	; (4c00 <rtc_count_get_count+0x28>)
    4be0:	0020      	movs	r0, r4
    4be2:	47a8      	blx	r5
    4be4:	2800      	cmp	r0, #0
    4be6:	d1fb      	bne.n	4be0 <rtc_count_get_count+0x8>
		/* Wait for synchronization */
	}

	/* Read value based on mode. */
	switch (module->mode) {
    4be8:	7923      	ldrb	r3, [r4, #4]
    4bea:	2b00      	cmp	r3, #0
    4bec:	d004      	beq.n	4bf8 <rtc_count_get_count+0x20>
			break;

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
    4bee:	2000      	movs	r0, #0
	switch (module->mode) {
    4bf0:	2b01      	cmp	r3, #1
    4bf2:	d100      	bne.n	4bf6 <rtc_count_get_count+0x1e>
			ret_val = rtc_module->MODE0.COUNT.reg;
    4bf4:	69b0      	ldr	r0, [r6, #24]
			break;
	}

	return ret_val;
}
    4bf6:	bd70      	pop	{r4, r5, r6, pc}
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
    4bf8:	8b30      	ldrh	r0, [r6, #24]
    4bfa:	b280      	uxth	r0, r0
			break;
    4bfc:	e7fb      	b.n	4bf6 <rtc_count_get_count+0x1e>
    4bfe:	46c0      	nop			; (mov r8, r8)
    4c00:	00004bcd 	.word	0x00004bcd

00004c04 <rtc_count_disable_callback>:
 * \param[in]     callback_type Callback type to disable
 */
void rtc_count_disable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    4c04:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4c06:	6802      	ldr	r2, [r0, #0]

	/* Disable interrupt */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    4c08:	290a      	cmp	r1, #10
    4c0a:	d010      	beq.n	4c2e <rtc_count_disable_callback+0x2a>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if(callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    4c0c:	2907      	cmp	r1, #7
    4c0e:	d911      	bls.n	4c34 <rtc_count_disable_callback+0x30>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7){
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
	}else {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    4c10:	2380      	movs	r3, #128	; 0x80
    4c12:	005b      	lsls	r3, r3, #1
    4c14:	000c      	movs	r4, r1
    4c16:	3c08      	subs	r4, #8
    4c18:	40a3      	lsls	r3, r4
    4c1a:	24c0      	movs	r4, #192	; 0xc0
    4c1c:	00a4      	lsls	r4, r4, #2
    4c1e:	4023      	ands	r3, r4
    4c20:	8113      	strh	r3, [r2, #8]
	}

	/* Mark callback as disabled. */
	module->enabled_callback &= ~(1 << callback_type);
    4c22:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    4c24:	2201      	movs	r2, #1
    4c26:	408a      	lsls	r2, r1
    4c28:	4393      	bics	r3, r2
    4c2a:	86c3      	strh	r3, [r0, #54]	; 0x36
}
    4c2c:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
    4c2e:	4b04      	ldr	r3, [pc, #16]	; (4c40 <rtc_count_disable_callback+0x3c>)
    4c30:	8113      	strh	r3, [r2, #8]
    4c32:	e7f6      	b.n	4c22 <rtc_count_disable_callback+0x1e>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
    4c34:	2401      	movs	r4, #1
    4c36:	408c      	lsls	r4, r1
    4c38:	23ff      	movs	r3, #255	; 0xff
    4c3a:	4023      	ands	r3, r4
    4c3c:	8113      	strh	r3, [r2, #8]
    4c3e:	e7f0      	b.n	4c22 <rtc_count_disable_callback+0x1e>
    4c40:	ffff8000 	.word	0xffff8000

00004c44 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    4c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c46:	46de      	mov	lr, fp
    4c48:	4657      	mov	r7, sl
    4c4a:	464e      	mov	r6, r9
    4c4c:	4645      	mov	r5, r8
    4c4e:	b5e0      	push	{r5, r6, r7, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    4c50:	4b2b      	ldr	r3, [pc, #172]	; (4d00 <RTC_Handler+0xbc>)
    4c52:	681b      	ldr	r3, [r3, #0]
    4c54:	469a      	mov	sl, r3
	Rtc *const rtc_module = module->hw;
    4c56:	681e      	ldr	r6, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
    4c58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
	callback_mask &= module->registered_callback;
    4c5a:	4652      	mov	r2, sl
    4c5c:	8e92      	ldrh	r2, [r2, #52]	; 0x34
    4c5e:	401a      	ands	r2, r3
    4c60:	4690      	mov	r8, r2
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    4c62:	89b2      	ldrh	r2, [r6, #12]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    4c64:	8973      	ldrh	r3, [r6, #10]
    4c66:	4013      	ands	r3, r2
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    4c68:	b21a      	sxth	r2, r3
    4c6a:	2a00      	cmp	r2, #0
    4c6c:	db08      	blt.n	4c80 <RTC_Handler+0x3c>
    4c6e:	27ff      	movs	r7, #255	; 0xff
    4c70:	401f      	ands	r7, r3
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
    4c72:	d02a      	beq.n	4cca <RTC_Handler+0x86>
    4c74:	2400      	movs	r4, #0
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    4c76:	2301      	movs	r3, #1
    4c78:	4699      	mov	r9, r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    4c7a:	33fe      	adds	r3, #254	; 0xfe
    4c7c:	469b      	mov	fp, r3
    4c7e:	e014      	b.n	4caa <RTC_Handler+0x66>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    4c80:	4643      	mov	r3, r8
    4c82:	055b      	lsls	r3, r3, #21
    4c84:	d407      	bmi.n	4c96 <RTC_Handler+0x52>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    4c86:	4b1f      	ldr	r3, [pc, #124]	; (4d04 <RTC_Handler+0xc0>)
    4c88:	81b3      	strh	r3, [r6, #12]
	_rtc_interrupt_handler(0);
}
    4c8a:	bc3c      	pop	{r2, r3, r4, r5}
    4c8c:	4690      	mov	r8, r2
    4c8e:	4699      	mov	r9, r3
    4c90:	46a2      	mov	sl, r4
    4c92:	46ab      	mov	fp, r5
    4c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    4c96:	4653      	mov	r3, sl
    4c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4c9a:	4798      	blx	r3
    4c9c:	e7f3      	b.n	4c86 <RTC_Handler+0x42>
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    4c9e:	465b      	mov	r3, fp
    4ca0:	401d      	ands	r5, r3
    4ca2:	81b5      	strh	r5, [r6, #12]
    4ca4:	3401      	adds	r4, #1
		for ( i = 0;i < RTC_PER_NUM;i++) {
    4ca6:	2c08      	cmp	r4, #8
    4ca8:	d0ef      	beq.n	4c8a <RTC_Handler+0x46>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    4caa:	0023      	movs	r3, r4
    4cac:	464d      	mov	r5, r9
    4cae:	40a5      	lsls	r5, r4
    4cb0:	422f      	tst	r7, r5
    4cb2:	d0f4      	beq.n	4c9e <RTC_Handler+0x5a>
			  && (callback_mask & (1 << i))) {
    4cb4:	4642      	mov	r2, r8
    4cb6:	4122      	asrs	r2, r4
    4cb8:	4649      	mov	r1, r9
    4cba:	4211      	tst	r1, r2
    4cbc:	d0ef      	beq.n	4c9e <RTC_Handler+0x5a>
				module->callbacks[i]();
    4cbe:	3302      	adds	r3, #2
    4cc0:	009b      	lsls	r3, r3, #2
    4cc2:	4652      	mov	r2, sl
    4cc4:	589b      	ldr	r3, [r3, r2]
    4cc6:	4798      	blx	r3
    4cc8:	e7e9      	b.n	4c9e <RTC_Handler+0x5a>
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    4cca:	05da      	lsls	r2, r3, #23
    4ccc:	d50a      	bpl.n	4ce4 <RTC_Handler+0xa0>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    4cce:	4643      	mov	r3, r8
    4cd0:	05db      	lsls	r3, r3, #23
    4cd2:	d403      	bmi.n	4cdc <RTC_Handler+0x98>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    4cd4:	2380      	movs	r3, #128	; 0x80
    4cd6:	005b      	lsls	r3, r3, #1
    4cd8:	81b3      	strh	r3, [r6, #12]
    4cda:	e7d6      	b.n	4c8a <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    4cdc:	4653      	mov	r3, sl
    4cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4ce0:	4798      	blx	r3
    4ce2:	e7f7      	b.n	4cd4 <RTC_Handler+0x90>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    4ce4:	059b      	lsls	r3, r3, #22
    4ce6:	d5d0      	bpl.n	4c8a <RTC_Handler+0x46>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    4ce8:	4643      	mov	r3, r8
    4cea:	059b      	lsls	r3, r3, #22
    4cec:	d403      	bmi.n	4cf6 <RTC_Handler+0xb2>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    4cee:	2380      	movs	r3, #128	; 0x80
    4cf0:	009b      	lsls	r3, r3, #2
    4cf2:	81b3      	strh	r3, [r6, #12]
}
    4cf4:	e7c9      	b.n	4c8a <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    4cf6:	4653      	mov	r3, sl
    4cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4cfa:	4798      	blx	r3
    4cfc:	e7f7      	b.n	4cee <RTC_Handler+0xaa>
    4cfe:	46c0      	nop			; (mov r8, r8)
    4d00:	20001f10 	.word	0x20001f10
    4d04:	ffff8000 	.word	0xffff8000

00004d08 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    4d08:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    4d0a:	2207      	movs	r2, #7
    4d0c:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    4d0e:	421a      	tst	r2, r3
    4d10:	d1fc      	bne.n	4d0c <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
    4d12:	4770      	bx	lr

00004d14 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    4d14:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d16:	46d6      	mov	lr, sl
    4d18:	464f      	mov	r7, r9
    4d1a:	4646      	mov	r6, r8
    4d1c:	b5c0      	push	{r6, r7, lr}
    4d1e:	b08a      	sub	sp, #40	; 0x28
    4d20:	0007      	movs	r7, r0
    4d22:	000e      	movs	r6, r1
    4d24:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    4d26:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4d28:	0008      	movs	r0, r1
    4d2a:	4b9c      	ldr	r3, [pc, #624]	; (4f9c <i2c_master_init+0x288>)
    4d2c:	4798      	blx	r3

#if (SAML22) || (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
    4d2e:	2805      	cmp	r0, #5
    4d30:	d100      	bne.n	4d34 <i2c_master_init+0x20>
    4d32:	e12b      	b.n	4f8c <i2c_master_init+0x278>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4d34:	0005      	movs	r5, r0
    4d36:	3512      	adds	r5, #18
			MCLK->APBCMASK.reg |= mask;
    4d38:	4a99      	ldr	r2, [pc, #612]	; (4fa0 <i2c_master_init+0x28c>)
    4d3a:	69d1      	ldr	r1, [r2, #28]
	/* Turn on module in PM */
#if (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4d3c:	2301      	movs	r3, #1
    4d3e:	4083      	lsls	r3, r0
    4d40:	430b      	orrs	r3, r1
    4d42:	61d3      	str	r3, [r2, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    4d44:	a909      	add	r1, sp, #36	; 0x24
    4d46:	7b23      	ldrb	r3, [r4, #12]
    4d48:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4d4a:	b2ed      	uxtb	r5, r5
    4d4c:	0028      	movs	r0, r5
    4d4e:	4b95      	ldr	r3, [pc, #596]	; (4fa4 <i2c_master_init+0x290>)
    4d50:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4d52:	0028      	movs	r0, r5
    4d54:	4b94      	ldr	r3, [pc, #592]	; (4fa8 <i2c_master_init+0x294>)
    4d56:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4d58:	7b20      	ldrb	r0, [r4, #12]
    4d5a:	2100      	movs	r1, #0
    4d5c:	4b93      	ldr	r3, [pc, #588]	; (4fac <i2c_master_init+0x298>)
    4d5e:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    4d60:	6833      	ldr	r3, [r6, #0]
		return STATUS_ERR_DENIED;
    4d62:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    4d64:	079b      	lsls	r3, r3, #30
    4d66:	d505      	bpl.n	4d74 <i2c_master_init+0x60>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    4d68:	b00a      	add	sp, #40	; 0x28
    4d6a:	bc1c      	pop	{r2, r3, r4}
    4d6c:	4690      	mov	r8, r2
    4d6e:	4699      	mov	r9, r3
    4d70:	46a2      	mov	sl, r4
    4d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    4d74:	6833      	ldr	r3, [r6, #0]
		return STATUS_BUSY;
    4d76:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    4d78:	07db      	lsls	r3, r3, #31
    4d7a:	d4f5      	bmi.n	4d68 <i2c_master_init+0x54>
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    4d7c:	2314      	movs	r3, #20
    4d7e:	6033      	str	r3, [r6, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4d80:	683b      	ldr	r3, [r7, #0]
    4d82:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    4d84:	0018      	movs	r0, r3
    4d86:	4b85      	ldr	r3, [pc, #532]	; (4f9c <i2c_master_init+0x288>)
    4d88:	4798      	blx	r3
    4d8a:	0005      	movs	r5, r0
    4d8c:	2380      	movs	r3, #128	; 0x80
    4d8e:	aa08      	add	r2, sp, #32
    4d90:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4d92:	2300      	movs	r3, #0
    4d94:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4d96:	2201      	movs	r2, #1
    4d98:	a908      	add	r1, sp, #32
    4d9a:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
    4d9c:	70cb      	strb	r3, [r1, #3]
	uint32_t pad0 = config->pinmux_pad0;
    4d9e:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    4da0:	6a26      	ldr	r6, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
    4da2:	2800      	cmp	r0, #0
    4da4:	d100      	bne.n	4da8 <i2c_master_init+0x94>
    4da6:	e0ae      	b.n	4f06 <i2c_master_init+0x1f2>
	pin_conf.mux_position = pad0 & 0xFFFF;
    4da8:	ab08      	add	r3, sp, #32
    4daa:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    4dac:	2302      	movs	r3, #2
    4dae:	aa08      	add	r2, sp, #32
    4db0:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    4db2:	0c00      	lsrs	r0, r0, #16
    4db4:	b2c0      	uxtb	r0, r0
    4db6:	0011      	movs	r1, r2
    4db8:	4b7d      	ldr	r3, [pc, #500]	; (4fb0 <i2c_master_init+0x29c>)
    4dba:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    4dbc:	2e00      	cmp	r6, #0
    4dbe:	d100      	bne.n	4dc2 <i2c_master_init+0xae>
    4dc0:	e0a6      	b.n	4f10 <i2c_master_init+0x1fc>
	pin_conf.mux_position = pad1 & 0xFFFF;
    4dc2:	ab08      	add	r3, sp, #32
    4dc4:	701e      	strb	r6, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    4dc6:	2302      	movs	r3, #2
    4dc8:	aa08      	add	r2, sp, #32
    4dca:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    4dcc:	0c36      	lsrs	r6, r6, #16
    4dce:	b2f0      	uxtb	r0, r6
    4dd0:	0011      	movs	r1, r2
    4dd2:	4b77      	ldr	r3, [pc, #476]	; (4fb0 <i2c_master_init+0x29c>)
    4dd4:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    4dd6:	8aa3      	ldrh	r3, [r4, #20]
    4dd8:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
    4dda:	8ae3      	ldrh	r3, [r4, #22]
    4ddc:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    4dde:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    4de0:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    4de2:	2b00      	cmp	r3, #0
    4de4:	d104      	bne.n	4df0 <i2c_master_init+0xdc>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    4de6:	4b73      	ldr	r3, [pc, #460]	; (4fb4 <i2c_master_init+0x2a0>)
    4de8:	789b      	ldrb	r3, [r3, #2]
    4dea:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    4dec:	0fdb      	lsrs	r3, r3, #31
    4dee:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    4df0:	68a1      	ldr	r1, [r4, #8]
    4df2:	6923      	ldr	r3, [r4, #16]
    4df4:	430b      	orrs	r3, r1
    4df6:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    4df8:	2224      	movs	r2, #36	; 0x24
    4dfa:	5ca2      	ldrb	r2, [r4, r2]
    4dfc:	2a00      	cmp	r2, #0
    4dfe:	d002      	beq.n	4e06 <i2c_master_init+0xf2>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    4e00:	2280      	movs	r2, #128	; 0x80
    4e02:	05d2      	lsls	r2, r2, #23
    4e04:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    4e06:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4e08:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    4e0a:	222c      	movs	r2, #44	; 0x2c
    4e0c:	5ca2      	ldrb	r2, [r4, r2]
    4e0e:	2a00      	cmp	r2, #0
    4e10:	d103      	bne.n	4e1a <i2c_master_init+0x106>
    4e12:	2280      	movs	r2, #128	; 0x80
    4e14:	0492      	lsls	r2, r2, #18
    4e16:	4291      	cmp	r1, r2
    4e18:	d102      	bne.n	4e20 <i2c_master_init+0x10c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    4e1a:	2280      	movs	r2, #128	; 0x80
    4e1c:	0512      	lsls	r2, r2, #20
    4e1e:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    4e20:	222d      	movs	r2, #45	; 0x2d
    4e22:	5ca2      	ldrb	r2, [r4, r2]
    4e24:	2a00      	cmp	r2, #0
    4e26:	d002      	beq.n	4e2e <i2c_master_init+0x11a>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    4e28:	2280      	movs	r2, #128	; 0x80
    4e2a:	0412      	lsls	r2, r2, #16
    4e2c:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    4e2e:	222e      	movs	r2, #46	; 0x2e
    4e30:	5ca2      	ldrb	r2, [r4, r2]
    4e32:	2a00      	cmp	r2, #0
    4e34:	d002      	beq.n	4e3c <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    4e36:	2280      	movs	r2, #128	; 0x80
    4e38:	03d2      	lsls	r2, r2, #15
    4e3a:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    4e3c:	4642      	mov	r2, r8
    4e3e:	6812      	ldr	r2, [r2, #0]
    4e40:	4313      	orrs	r3, r2
    4e42:	4642      	mov	r2, r8
    4e44:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    4e46:	2380      	movs	r3, #128	; 0x80
    4e48:	005b      	lsls	r3, r3, #1
    4e4a:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    4e4c:	3512      	adds	r5, #18
    4e4e:	b2e8      	uxtb	r0, r5
    4e50:	4b59      	ldr	r3, [pc, #356]	; (4fb8 <i2c_master_init+0x2a4>)
    4e52:	4798      	blx	r3
    4e54:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    4e56:	23fa      	movs	r3, #250	; 0xfa
    4e58:	009b      	lsls	r3, r3, #2
    4e5a:	6822      	ldr	r2, [r4, #0]
    4e5c:	435a      	muls	r2, r3
    4e5e:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    4e60:	6863      	ldr	r3, [r4, #4]
    4e62:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    4e64:	4d55      	ldr	r5, [pc, #340]	; (4fbc <i2c_master_init+0x2a8>)
    4e66:	47a8      	blx	r5
    4e68:	9000      	str	r0, [sp, #0]
    4e6a:	9101      	str	r1, [sp, #4]
    4e6c:	464b      	mov	r3, r9
    4e6e:	0058      	lsls	r0, r3, #1
    4e70:	47a8      	blx	r5
    4e72:	9002      	str	r0, [sp, #8]
    4e74:	9103      	str	r1, [sp, #12]
    4e76:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    4e78:	47a8      	blx	r5
    4e7a:	9004      	str	r0, [sp, #16]
    4e7c:	9105      	str	r1, [sp, #20]
    4e7e:	4f50      	ldr	r7, [pc, #320]	; (4fc0 <i2c_master_init+0x2ac>)
    4e80:	4a50      	ldr	r2, [pc, #320]	; (4fc4 <i2c_master_init+0x2b0>)
    4e82:	4b51      	ldr	r3, [pc, #324]	; (4fc8 <i2c_master_init+0x2b4>)
    4e84:	9800      	ldr	r0, [sp, #0]
    4e86:	9901      	ldr	r1, [sp, #4]
    4e88:	47b8      	blx	r7
    4e8a:	0002      	movs	r2, r0
    4e8c:	000b      	movs	r3, r1
    4e8e:	9804      	ldr	r0, [sp, #16]
    4e90:	9905      	ldr	r1, [sp, #20]
    4e92:	47b8      	blx	r7
    4e94:	4e4d      	ldr	r6, [pc, #308]	; (4fcc <i2c_master_init+0x2b8>)
    4e96:	2200      	movs	r2, #0
    4e98:	4b4d      	ldr	r3, [pc, #308]	; (4fd0 <i2c_master_init+0x2bc>)
    4e9a:	47b0      	blx	r6
    4e9c:	9004      	str	r0, [sp, #16]
    4e9e:	9105      	str	r1, [sp, #20]
    4ea0:	4648      	mov	r0, r9
    4ea2:	47a8      	blx	r5
    4ea4:	0002      	movs	r2, r0
    4ea6:	000b      	movs	r3, r1
    4ea8:	9804      	ldr	r0, [sp, #16]
    4eaa:	9905      	ldr	r1, [sp, #20]
    4eac:	47b8      	blx	r7
    4eae:	0002      	movs	r2, r0
    4eb0:	000b      	movs	r3, r1
    4eb2:	4d48      	ldr	r5, [pc, #288]	; (4fd4 <i2c_master_init+0x2c0>)
    4eb4:	9800      	ldr	r0, [sp, #0]
    4eb6:	9901      	ldr	r1, [sp, #4]
    4eb8:	47a8      	blx	r5
    4eba:	9a02      	ldr	r2, [sp, #8]
    4ebc:	9b03      	ldr	r3, [sp, #12]
    4ebe:	47b0      	blx	r6
    4ec0:	2200      	movs	r2, #0
    4ec2:	4b45      	ldr	r3, [pc, #276]	; (4fd8 <i2c_master_init+0x2c4>)
    4ec4:	47a8      	blx	r5
    4ec6:	9a02      	ldr	r2, [sp, #8]
    4ec8:	9b03      	ldr	r3, [sp, #12]
    4eca:	4d44      	ldr	r5, [pc, #272]	; (4fdc <i2c_master_init+0x2c8>)
    4ecc:	47a8      	blx	r5
    4ece:	4b44      	ldr	r3, [pc, #272]	; (4fe0 <i2c_master_init+0x2cc>)
    4ed0:	4798      	blx	r3
    4ed2:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    4ed4:	2380      	movs	r3, #128	; 0x80
    4ed6:	049b      	lsls	r3, r3, #18
    4ed8:	68a2      	ldr	r2, [r4, #8]
    4eda:	429a      	cmp	r2, r3
    4edc:	d01e      	beq.n	4f1c <i2c_master_init+0x208>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    4ede:	0003      	movs	r3, r0
    4ee0:	2040      	movs	r0, #64	; 0x40
    4ee2:	2dff      	cmp	r5, #255	; 0xff
    4ee4:	d900      	bls.n	4ee8 <i2c_master_init+0x1d4>
    4ee6:	e73f      	b.n	4d68 <i2c_master_init+0x54>
	int32_t tmp_baudlow_hs = 0;
    4ee8:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    4eea:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    4eec:	25ff      	movs	r5, #255	; 0xff
    4eee:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    4ef0:	0624      	lsls	r4, r4, #24
    4ef2:	4325      	orrs	r5, r4
    4ef4:	0400      	lsls	r0, r0, #16
    4ef6:	23ff      	movs	r3, #255	; 0xff
    4ef8:	041b      	lsls	r3, r3, #16
    4efa:	4018      	ands	r0, r3
    4efc:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    4efe:	4643      	mov	r3, r8
    4f00:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    4f02:	2000      	movs	r0, #0
    4f04:	e730      	b.n	4d68 <i2c_master_init+0x54>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    4f06:	2100      	movs	r1, #0
    4f08:	4640      	mov	r0, r8
    4f0a:	4b36      	ldr	r3, [pc, #216]	; (4fe4 <i2c_master_init+0x2d0>)
    4f0c:	4798      	blx	r3
    4f0e:	e74b      	b.n	4da8 <i2c_master_init+0x94>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    4f10:	2101      	movs	r1, #1
    4f12:	4640      	mov	r0, r8
    4f14:	4b33      	ldr	r3, [pc, #204]	; (4fe4 <i2c_master_init+0x2d0>)
    4f16:	4798      	blx	r3
    4f18:	0006      	movs	r6, r0
    4f1a:	e752      	b.n	4dc2 <i2c_master_init+0xae>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    4f1c:	26fa      	movs	r6, #250	; 0xfa
    4f1e:	00b6      	lsls	r6, r6, #2
    4f20:	4653      	mov	r3, sl
    4f22:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    4f24:	9800      	ldr	r0, [sp, #0]
    4f26:	9901      	ldr	r1, [sp, #4]
    4f28:	0002      	movs	r2, r0
    4f2a:	000b      	movs	r3, r1
    4f2c:	4c27      	ldr	r4, [pc, #156]	; (4fcc <i2c_master_init+0x2b8>)
    4f2e:	47a0      	blx	r4
    4f30:	9000      	str	r0, [sp, #0]
    4f32:	9101      	str	r1, [sp, #4]
    4f34:	0030      	movs	r0, r6
    4f36:	4b21      	ldr	r3, [pc, #132]	; (4fbc <i2c_master_init+0x2a8>)
    4f38:	4798      	blx	r3
    4f3a:	2200      	movs	r2, #0
    4f3c:	4b2a      	ldr	r3, [pc, #168]	; (4fe8 <i2c_master_init+0x2d4>)
    4f3e:	47b8      	blx	r7
    4f40:	0002      	movs	r2, r0
    4f42:	000b      	movs	r3, r1
    4f44:	9800      	ldr	r0, [sp, #0]
    4f46:	9901      	ldr	r1, [sp, #4]
    4f48:	4c24      	ldr	r4, [pc, #144]	; (4fdc <i2c_master_init+0x2c8>)
    4f4a:	47a0      	blx	r4
    4f4c:	2200      	movs	r2, #0
    4f4e:	4b22      	ldr	r3, [pc, #136]	; (4fd8 <i2c_master_init+0x2c4>)
    4f50:	4c20      	ldr	r4, [pc, #128]	; (4fd4 <i2c_master_init+0x2c0>)
    4f52:	47a0      	blx	r4
    4f54:	4b22      	ldr	r3, [pc, #136]	; (4fe0 <i2c_master_init+0x2cc>)
    4f56:	4798      	blx	r3
    4f58:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    4f5a:	d00c      	beq.n	4f76 <i2c_master_init+0x262>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    4f5c:	0031      	movs	r1, r6
    4f5e:	9807      	ldr	r0, [sp, #28]
    4f60:	4b22      	ldr	r3, [pc, #136]	; (4fec <i2c_master_init+0x2d8>)
    4f62:	4798      	blx	r3
    4f64:	3802      	subs	r0, #2
    4f66:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    4f68:	002b      	movs	r3, r5
    4f6a:	2dff      	cmp	r5, #255	; 0xff
    4f6c:	d80c      	bhi.n	4f88 <i2c_master_init+0x274>
    4f6e:	28ff      	cmp	r0, #255	; 0xff
    4f70:	d9bc      	bls.n	4eec <i2c_master_init+0x1d8>
    4f72:	2040      	movs	r0, #64	; 0x40
    4f74:	e6f8      	b.n	4d68 <i2c_master_init+0x54>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    4f76:	0071      	lsls	r1, r6, #1
    4f78:	1e48      	subs	r0, r1, #1
    4f7a:	9b07      	ldr	r3, [sp, #28]
    4f7c:	469c      	mov	ip, r3
    4f7e:	4460      	add	r0, ip
    4f80:	4b1a      	ldr	r3, [pc, #104]	; (4fec <i2c_master_init+0x2d8>)
    4f82:	4798      	blx	r3
    4f84:	3801      	subs	r0, #1
    4f86:	e7ef      	b.n	4f68 <i2c_master_init+0x254>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    4f88:	2040      	movs	r0, #64	; 0x40
    4f8a:	e6ed      	b.n	4d68 <i2c_master_init+0x54>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    4f8c:	4a04      	ldr	r2, [pc, #16]	; (4fa0 <i2c_master_init+0x28c>)
    4f8e:	6a13      	ldr	r3, [r2, #32]
    4f90:	2102      	movs	r1, #2
    4f92:	430b      	orrs	r3, r1
    4f94:	6213      	str	r3, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    4f96:	2518      	movs	r5, #24
    4f98:	e6d4      	b.n	4d44 <i2c_master_init+0x30>
    4f9a:	46c0      	nop			; (mov r8, r8)
    4f9c:	00005675 	.word	0x00005675
    4fa0:	40000400 	.word	0x40000400
    4fa4:	0000696d 	.word	0x0000696d
    4fa8:	000068fd 	.word	0x000068fd
    4fac:	000054cd 	.word	0x000054cd
    4fb0:	00006a69 	.word	0x00006a69
    4fb4:	41002000 	.word	0x41002000
    4fb8:	00006991 	.word	0x00006991
    4fbc:	00015e79 	.word	0x00015e79
    4fc0:	00015261 	.word	0x00015261
    4fc4:	e826d695 	.word	0xe826d695
    4fc8:	3e112e0b 	.word	0x3e112e0b
    4fcc:	000143d9 	.word	0x000143d9
    4fd0:	40240000 	.word	0x40240000
    4fd4:	00015761 	.word	0x00015761
    4fd8:	3ff00000 	.word	0x3ff00000
    4fdc:	000149f9 	.word	0x000149f9
    4fe0:	00015d8d 	.word	0x00015d8d
    4fe4:	00005519 	.word	0x00005519
    4fe8:	40080000 	.word	0x40080000
    4fec:	00012f55 	.word	0x00012f55

00004ff0 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
    4ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4ff2:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4ff4:	6807      	ldr	r7, [r0, #0]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    4ff6:	4e08      	ldr	r6, [pc, #32]	; (5018 <i2c_master_reset+0x28>)
    4ff8:	47b0      	blx	r6
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4ffa:	6825      	ldr	r5, [r4, #0]
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    4ffc:	0020      	movs	r0, r4
    4ffe:	47b0      	blx	r6

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    5000:	2383      	movs	r3, #131	; 0x83
    5002:	752b      	strb	r3, [r5, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    5004:	762b      	strb	r3, [r5, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    5006:	682b      	ldr	r3, [r5, #0]
    5008:	2202      	movs	r2, #2
    500a:	4393      	bics	r3, r2
    500c:	602b      	str	r3, [r5, #0]
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
	system_interrupt_leave_critical_section();
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    500e:	0020      	movs	r0, r4
    5010:	47b0      	blx	r6

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
    5012:	2301      	movs	r3, #1
    5014:	603b      	str	r3, [r7, #0]
}
    5016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5018:	00004d09 	.word	0x00004d09

0000501c <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    501c:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    501e:	7e1a      	ldrb	r2, [r3, #24]
    5020:	0792      	lsls	r2, r2, #30
    5022:	d507      	bpl.n	5034 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    5024:	2202      	movs	r2, #2
    5026:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    5028:	8b5b      	ldrh	r3, [r3, #26]
    502a:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    502c:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    502e:	17db      	asrs	r3, r3, #31
    5030:	4018      	ands	r0, r3
}
    5032:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    5034:	8b5a      	ldrh	r2, [r3, #26]
    5036:	0752      	lsls	r2, r2, #29
    5038:	d506      	bpl.n	5048 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    503a:	6859      	ldr	r1, [r3, #4]
    503c:	22c0      	movs	r2, #192	; 0xc0
    503e:	0292      	lsls	r2, r2, #10
    5040:	430a      	orrs	r2, r1
    5042:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    5044:	2018      	movs	r0, #24
    5046:	e7f4      	b.n	5032 <_i2c_master_address_response+0x16>
	return STATUS_OK;
    5048:	2000      	movs	r0, #0
    504a:	e7f2      	b.n	5032 <_i2c_master_address_response+0x16>

0000504c <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    504c:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    504e:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    5050:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    5052:	2401      	movs	r4, #1
    5054:	2502      	movs	r5, #2
    5056:	7e11      	ldrb	r1, [r2, #24]
    5058:	4221      	tst	r1, r4
    505a:	d10b      	bne.n	5074 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    505c:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    505e:	4229      	tst	r1, r5
    5060:	d106      	bne.n	5070 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    5062:	3301      	adds	r3, #1
    5064:	b29b      	uxth	r3, r3
    5066:	8901      	ldrh	r1, [r0, #8]
    5068:	4299      	cmp	r1, r3
    506a:	d8f4      	bhi.n	5056 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    506c:	2012      	movs	r0, #18
    506e:	e002      	b.n	5076 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    5070:	2000      	movs	r0, #0
    5072:	e000      	b.n	5076 <_i2c_master_wait_for_bus+0x2a>
    5074:	2000      	movs	r0, #0
}
    5076:	bd30      	pop	{r4, r5, pc}

00005078 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    5078:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    507a:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    507c:	6862      	ldr	r2, [r4, #4]
    507e:	2380      	movs	r3, #128	; 0x80
    5080:	02db      	lsls	r3, r3, #11
    5082:	4313      	orrs	r3, r2
    5084:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    5086:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    5088:	4b02      	ldr	r3, [pc, #8]	; (5094 <_i2c_master_send_hs_master_code+0x1c>)
    508a:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    508c:	2301      	movs	r3, #1
    508e:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    5090:	bd10      	pop	{r4, pc}
    5092:	46c0      	nop			; (mov r8, r8)
    5094:	0000504d 	.word	0x0000504d

00005098 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    5098:	b5f0      	push	{r4, r5, r6, r7, lr}
    509a:	46de      	mov	lr, fp
    509c:	4657      	mov	r7, sl
    509e:	464e      	mov	r6, r9
    50a0:	4645      	mov	r5, r8
    50a2:	b5e0      	push	{r5, r6, r7, lr}
    50a4:	b083      	sub	sp, #12
    50a6:	0006      	movs	r6, r0
    50a8:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    50aa:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    50ac:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    50ae:	682b      	ldr	r3, [r5, #0]
    50b0:	011b      	lsls	r3, r3, #4
    50b2:	0fdb      	lsrs	r3, r3, #31
    50b4:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    50b6:	7a4b      	ldrb	r3, [r1, #9]
    50b8:	2b00      	cmp	r3, #0
    50ba:	d12b      	bne.n	5114 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    50bc:	686b      	ldr	r3, [r5, #4]
    50be:	4a58      	ldr	r2, [pc, #352]	; (5220 <_i2c_master_read_packet+0x188>)
    50c0:	4013      	ands	r3, r2
    50c2:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    50c4:	464b      	mov	r3, r9
    50c6:	7a1b      	ldrb	r3, [r3, #8]
    50c8:	2b00      	cmp	r3, #0
    50ca:	d127      	bne.n	511c <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    50cc:	464b      	mov	r3, r9
    50ce:	881b      	ldrh	r3, [r3, #0]
    50d0:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    50d2:	464a      	mov	r2, r9
    50d4:	7a52      	ldrb	r2, [r2, #9]
    50d6:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    50d8:	4313      	orrs	r3, r2
    50da:	2201      	movs	r2, #1
    50dc:	4313      	orrs	r3, r2
    50de:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    50e0:	0030      	movs	r0, r6
    50e2:	4b50      	ldr	r3, [pc, #320]	; (5224 <_i2c_master_read_packet+0x18c>)
    50e4:	4798      	blx	r3
    50e6:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    50e8:	4653      	mov	r3, sl
    50ea:	2b00      	cmp	r3, #0
    50ec:	d003      	beq.n	50f6 <_i2c_master_read_packet+0x5e>
    50ee:	464b      	mov	r3, r9
    50f0:	885b      	ldrh	r3, [r3, #2]
    50f2:	2b01      	cmp	r3, #1
    50f4:	d03b      	beq.n	516e <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    50f6:	686b      	ldr	r3, [r5, #4]
    50f8:	4a49      	ldr	r2, [pc, #292]	; (5220 <_i2c_master_read_packet+0x188>)
    50fa:	4013      	ands	r3, r2
    50fc:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    50fe:	9b01      	ldr	r3, [sp, #4]
    5100:	2b00      	cmp	r3, #0
    5102:	d03a      	beq.n	517a <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
    5104:	9801      	ldr	r0, [sp, #4]
    5106:	b003      	add	sp, #12
    5108:	bc3c      	pop	{r2, r3, r4, r5}
    510a:	4690      	mov	r8, r2
    510c:	4699      	mov	r9, r3
    510e:	46a2      	mov	sl, r4
    5110:	46ab      	mov	fp, r5
    5112:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    5114:	7a89      	ldrb	r1, [r1, #10]
    5116:	4b44      	ldr	r3, [pc, #272]	; (5228 <_i2c_master_read_packet+0x190>)
    5118:	4798      	blx	r3
    511a:	e7cf      	b.n	50bc <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
    511c:	464b      	mov	r3, r9
    511e:	881b      	ldrh	r3, [r3, #0]
    5120:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    5122:	464a      	mov	r2, r9
    5124:	7a52      	ldrb	r2, [r2, #9]
    5126:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    5128:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    512a:	2280      	movs	r2, #128	; 0x80
    512c:	0212      	lsls	r2, r2, #8
    512e:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    5130:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
    5132:	0030      	movs	r0, r6
    5134:	4b3b      	ldr	r3, [pc, #236]	; (5224 <_i2c_master_read_packet+0x18c>)
    5136:	4798      	blx	r3
    5138:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    513a:	686b      	ldr	r3, [r5, #4]
    513c:	4a38      	ldr	r2, [pc, #224]	; (5220 <_i2c_master_read_packet+0x188>)
    513e:	4013      	ands	r3, r2
    5140:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
    5142:	2800      	cmp	r0, #0
    5144:	d1de      	bne.n	5104 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
    5146:	0030      	movs	r0, r6
    5148:	4b38      	ldr	r3, [pc, #224]	; (522c <_i2c_master_read_packet+0x194>)
    514a:	4798      	blx	r3
    514c:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
    514e:	2800      	cmp	r0, #0
    5150:	d1d8      	bne.n	5104 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    5152:	464b      	mov	r3, r9
    5154:	881b      	ldrh	r3, [r3, #0]
    5156:	0a1b      	lsrs	r3, r3, #8
    5158:	2278      	movs	r2, #120	; 0x78
    515a:	4313      	orrs	r3, r2
    515c:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    515e:	464a      	mov	r2, r9
    5160:	7a52      	ldrb	r2, [r2, #9]
    5162:	0392      	lsls	r2, r2, #14
    5164:	2101      	movs	r1, #1
    5166:	430a      	orrs	r2, r1
    5168:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    516a:	626b      	str	r3, [r5, #36]	; 0x24
    516c:	e7b8      	b.n	50e0 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    516e:	686a      	ldr	r2, [r5, #4]
    5170:	2380      	movs	r3, #128	; 0x80
    5172:	02db      	lsls	r3, r3, #11
    5174:	4313      	orrs	r3, r2
    5176:	606b      	str	r3, [r5, #4]
    5178:	e7c1      	b.n	50fe <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
    517a:	0030      	movs	r0, r6
    517c:	4b2b      	ldr	r3, [pc, #172]	; (522c <_i2c_master_read_packet+0x194>)
    517e:	4798      	blx	r3
    5180:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    5182:	2800      	cmp	r0, #0
    5184:	d1be      	bne.n	5104 <_i2c_master_read_packet+0x6c>
    5186:	3c01      	subs	r4, #1
    5188:	b2a4      	uxth	r4, r4
    518a:	4680      	mov	r8, r0
		while (tmp_data_length--) {
    518c:	4b28      	ldr	r3, [pc, #160]	; (5230 <_i2c_master_read_packet+0x198>)
    518e:	469b      	mov	fp, r3
    5190:	e015      	b.n	51be <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    5192:	2c01      	cmp	r4, #1
    5194:	d020      	beq.n	51d8 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
    5196:	0030      	movs	r0, r6
    5198:	4b26      	ldr	r3, [pc, #152]	; (5234 <_i2c_master_read_packet+0x19c>)
    519a:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    519c:	4643      	mov	r3, r8
    519e:	1c5f      	adds	r7, r3, #1
    51a0:	b2bf      	uxth	r7, r7
    51a2:	2328      	movs	r3, #40	; 0x28
    51a4:	5ceb      	ldrb	r3, [r5, r3]
    51a6:	464a      	mov	r2, r9
    51a8:	6852      	ldr	r2, [r2, #4]
    51aa:	4641      	mov	r1, r8
    51ac:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
    51ae:	0030      	movs	r0, r6
    51b0:	4b1c      	ldr	r3, [pc, #112]	; (5224 <_i2c_master_read_packet+0x18c>)
    51b2:	4798      	blx	r3
    51b4:	3c01      	subs	r4, #1
    51b6:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
    51b8:	2800      	cmp	r0, #0
    51ba:	d115      	bne.n	51e8 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
    51bc:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
    51be:	455c      	cmp	r4, fp
    51c0:	d014      	beq.n	51ec <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    51c2:	8b6b      	ldrh	r3, [r5, #26]
    51c4:	069b      	lsls	r3, r3, #26
    51c6:	d527      	bpl.n	5218 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    51c8:	7af3      	ldrb	r3, [r6, #11]
    51ca:	2b00      	cmp	r3, #0
    51cc:	d0e3      	beq.n	5196 <_i2c_master_read_packet+0xfe>
    51ce:	4653      	mov	r3, sl
    51d0:	2b00      	cmp	r3, #0
    51d2:	d1de      	bne.n	5192 <_i2c_master_read_packet+0xfa>
    51d4:	2c00      	cmp	r4, #0
    51d6:	d1de      	bne.n	5196 <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    51d8:	686a      	ldr	r2, [r5, #4]
    51da:	2380      	movs	r3, #128	; 0x80
    51dc:	02db      	lsls	r3, r3, #11
    51de:	4313      	orrs	r3, r2
    51e0:	606b      	str	r3, [r5, #4]
    51e2:	3c01      	subs	r4, #1
    51e4:	b2a4      	uxth	r4, r4
    51e6:	e7ea      	b.n	51be <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
    51e8:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
    51ea:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    51ec:	7ab3      	ldrb	r3, [r6, #10]
    51ee:	2b00      	cmp	r3, #0
    51f0:	d109      	bne.n	5206 <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
    51f2:	0030      	movs	r0, r6
    51f4:	4b0f      	ldr	r3, [pc, #60]	; (5234 <_i2c_master_read_packet+0x19c>)
    51f6:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    51f8:	2328      	movs	r3, #40	; 0x28
    51fa:	5cea      	ldrb	r2, [r5, r3]
    51fc:	464b      	mov	r3, r9
    51fe:	685b      	ldr	r3, [r3, #4]
    5200:	4641      	mov	r1, r8
    5202:	545a      	strb	r2, [r3, r1]
    5204:	e77e      	b.n	5104 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
    5206:	0030      	movs	r0, r6
    5208:	4b0a      	ldr	r3, [pc, #40]	; (5234 <_i2c_master_read_packet+0x19c>)
    520a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    520c:	686a      	ldr	r2, [r5, #4]
    520e:	23c0      	movs	r3, #192	; 0xc0
    5210:	029b      	lsls	r3, r3, #10
    5212:	4313      	orrs	r3, r2
    5214:	606b      	str	r3, [r5, #4]
    5216:	e7ec      	b.n	51f2 <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
    5218:	2341      	movs	r3, #65	; 0x41
    521a:	9301      	str	r3, [sp, #4]
    521c:	e772      	b.n	5104 <_i2c_master_read_packet+0x6c>
    521e:	46c0      	nop			; (mov r8, r8)
    5220:	fffbffff 	.word	0xfffbffff
    5224:	0000504d 	.word	0x0000504d
    5228:	00005079 	.word	0x00005079
    522c:	0000501d 	.word	0x0000501d
    5230:	0000ffff 	.word	0x0000ffff
    5234:	00004d09 	.word	0x00004d09

00005238 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    5238:	b5f0      	push	{r4, r5, r6, r7, lr}
    523a:	46de      	mov	lr, fp
    523c:	4657      	mov	r7, sl
    523e:	464e      	mov	r6, r9
    5240:	4645      	mov	r5, r8
    5242:	b5e0      	push	{r5, r6, r7, lr}
    5244:	b083      	sub	sp, #12
    5246:	0006      	movs	r6, r0
    5248:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    524a:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    524c:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    524e:	4b32      	ldr	r3, [pc, #200]	; (5318 <_i2c_master_write_packet+0xe0>)
    5250:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    5252:	7a7b      	ldrb	r3, [r7, #9]
    5254:	2b00      	cmp	r3, #0
    5256:	d11d      	bne.n	5294 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5258:	686b      	ldr	r3, [r5, #4]
    525a:	4a30      	ldr	r2, [pc, #192]	; (531c <_i2c_master_write_packet+0xe4>)
    525c:	4013      	ands	r3, r2
    525e:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    5260:	7a3b      	ldrb	r3, [r7, #8]
    5262:	2b00      	cmp	r3, #0
    5264:	d01b      	beq.n	529e <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    5266:	883b      	ldrh	r3, [r7, #0]
    5268:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    526a:	7a7a      	ldrb	r2, [r7, #9]
    526c:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    526e:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    5270:	2280      	movs	r2, #128	; 0x80
    5272:	0212      	lsls	r2, r2, #8
    5274:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    5276:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    5278:	0030      	movs	r0, r6
    527a:	4b29      	ldr	r3, [pc, #164]	; (5320 <_i2c_master_write_packet+0xe8>)
    527c:	4798      	blx	r3
    527e:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    5280:	2800      	cmp	r0, #0
    5282:	d013      	beq.n	52ac <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    5284:	9801      	ldr	r0, [sp, #4]
    5286:	b003      	add	sp, #12
    5288:	bc3c      	pop	{r2, r3, r4, r5}
    528a:	4690      	mov	r8, r2
    528c:	4699      	mov	r9, r3
    528e:	46a2      	mov	sl, r4
    5290:	46ab      	mov	fp, r5
    5292:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    5294:	7ab9      	ldrb	r1, [r7, #10]
    5296:	0030      	movs	r0, r6
    5298:	4b22      	ldr	r3, [pc, #136]	; (5324 <_i2c_master_write_packet+0xec>)
    529a:	4798      	blx	r3
    529c:	e7dc      	b.n	5258 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    529e:	883b      	ldrh	r3, [r7, #0]
    52a0:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    52a2:	7a7a      	ldrb	r2, [r7, #9]
    52a4:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    52a6:	4313      	orrs	r3, r2
    52a8:	626b      	str	r3, [r5, #36]	; 0x24
    52aa:	e7e5      	b.n	5278 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
    52ac:	0030      	movs	r0, r6
    52ae:	4b1e      	ldr	r3, [pc, #120]	; (5328 <_i2c_master_write_packet+0xf0>)
    52b0:	4798      	blx	r3
    52b2:	1e03      	subs	r3, r0, #0
    52b4:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    52b6:	d1e5      	bne.n	5284 <_i2c_master_write_packet+0x4c>
    52b8:	46a0      	mov	r8, r4
    52ba:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    52bc:	3320      	adds	r3, #32
    52be:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
    52c0:	4b15      	ldr	r3, [pc, #84]	; (5318 <_i2c_master_write_packet+0xe0>)
    52c2:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
    52c4:	4b16      	ldr	r3, [pc, #88]	; (5320 <_i2c_master_write_packet+0xe8>)
    52c6:	469a      	mov	sl, r3
		while (tmp_data_length--) {
    52c8:	4544      	cmp	r4, r8
    52ca:	d015      	beq.n	52f8 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    52cc:	8b6b      	ldrh	r3, [r5, #26]
    52ce:	464a      	mov	r2, r9
    52d0:	4213      	tst	r3, r2
    52d2:	d01d      	beq.n	5310 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
    52d4:	0030      	movs	r0, r6
    52d6:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    52d8:	687b      	ldr	r3, [r7, #4]
    52da:	5d1a      	ldrb	r2, [r3, r4]
    52dc:	2328      	movs	r3, #40	; 0x28
    52de:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
    52e0:	0030      	movs	r0, r6
    52e2:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
    52e4:	2800      	cmp	r0, #0
    52e6:	d106      	bne.n	52f6 <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    52e8:	8b6b      	ldrh	r3, [r5, #26]
    52ea:	3401      	adds	r4, #1
    52ec:	075b      	lsls	r3, r3, #29
    52ee:	d5eb      	bpl.n	52c8 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
    52f0:	231e      	movs	r3, #30
    52f2:	9301      	str	r3, [sp, #4]
    52f4:	e000      	b.n	52f8 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
    52f6:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    52f8:	7ab3      	ldrb	r3, [r6, #10]
    52fa:	2b00      	cmp	r3, #0
    52fc:	d0c2      	beq.n	5284 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
    52fe:	0030      	movs	r0, r6
    5300:	4b05      	ldr	r3, [pc, #20]	; (5318 <_i2c_master_write_packet+0xe0>)
    5302:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    5304:	686a      	ldr	r2, [r5, #4]
    5306:	23c0      	movs	r3, #192	; 0xc0
    5308:	029b      	lsls	r3, r3, #10
    530a:	4313      	orrs	r3, r2
    530c:	606b      	str	r3, [r5, #4]
    530e:	e7b9      	b.n	5284 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
    5310:	2341      	movs	r3, #65	; 0x41
    5312:	9301      	str	r3, [sp, #4]
    5314:	e7b6      	b.n	5284 <_i2c_master_write_packet+0x4c>
    5316:	46c0      	nop			; (mov r8, r8)
    5318:	00004d09 	.word	0x00004d09
    531c:	fffbffff 	.word	0xfffbffff
    5320:	0000504d 	.word	0x0000504d
    5324:	00005079 	.word	0x00005079
    5328:	0000501d 	.word	0x0000501d

0000532c <i2c_master_read_packet_wait>:
{
    532c:	b510      	push	{r4, lr}
	module->send_stop = true;
    532e:	2301      	movs	r3, #1
    5330:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    5332:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    5334:	4b01      	ldr	r3, [pc, #4]	; (533c <i2c_master_read_packet_wait+0x10>)
    5336:	4798      	blx	r3
}
    5338:	bd10      	pop	{r4, pc}
    533a:	46c0      	nop			; (mov r8, r8)
    533c:	00005099 	.word	0x00005099

00005340 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    5340:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = false;
    5342:	2300      	movs	r3, #0
    5344:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    5346:	3301      	adds	r3, #1
    5348:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
    534a:	4b01      	ldr	r3, [pc, #4]	; (5350 <i2c_master_write_packet_wait_no_stop+0x10>)
    534c:	4798      	blx	r3
}
    534e:	bd10      	pop	{r4, pc}
    5350:	00005239 	.word	0x00005239

00005354 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    5354:	b5f0      	push	{r4, r5, r6, r7, lr}
    5356:	46de      	mov	lr, fp
    5358:	4657      	mov	r7, sl
    535a:	464e      	mov	r6, r9
    535c:	4645      	mov	r5, r8
    535e:	b5e0      	push	{r5, r6, r7, lr}
    5360:	b087      	sub	sp, #28
    5362:	4680      	mov	r8, r0
    5364:	9104      	str	r1, [sp, #16]
    5366:	0016      	movs	r6, r2
    5368:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    536a:	2200      	movs	r2, #0
    536c:	2300      	movs	r3, #0
    536e:	2100      	movs	r1, #0
    5370:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    5372:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    5374:	2001      	movs	r0, #1
    5376:	0021      	movs	r1, r4
    5378:	9600      	str	r6, [sp, #0]
    537a:	9701      	str	r7, [sp, #4]
    537c:	465c      	mov	r4, fp
    537e:	9403      	str	r4, [sp, #12]
    5380:	4644      	mov	r4, r8
    5382:	9405      	str	r4, [sp, #20]
    5384:	e013      	b.n	53ae <long_division+0x5a>
    5386:	2420      	movs	r4, #32
    5388:	1a64      	subs	r4, r4, r1
    538a:	0005      	movs	r5, r0
    538c:	40e5      	lsrs	r5, r4
    538e:	46a8      	mov	r8, r5
    5390:	e014      	b.n	53bc <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    5392:	9c00      	ldr	r4, [sp, #0]
    5394:	9d01      	ldr	r5, [sp, #4]
    5396:	1b12      	subs	r2, r2, r4
    5398:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    539a:	465c      	mov	r4, fp
    539c:	464d      	mov	r5, r9
    539e:	432c      	orrs	r4, r5
    53a0:	46a3      	mov	fp, r4
    53a2:	9c03      	ldr	r4, [sp, #12]
    53a4:	4645      	mov	r5, r8
    53a6:	432c      	orrs	r4, r5
    53a8:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    53aa:	3901      	subs	r1, #1
    53ac:	d325      	bcc.n	53fa <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    53ae:	2420      	movs	r4, #32
    53b0:	4264      	negs	r4, r4
    53b2:	190c      	adds	r4, r1, r4
    53b4:	d4e7      	bmi.n	5386 <long_division+0x32>
    53b6:	0005      	movs	r5, r0
    53b8:	40a5      	lsls	r5, r4
    53ba:	46a8      	mov	r8, r5
    53bc:	0004      	movs	r4, r0
    53be:	408c      	lsls	r4, r1
    53c0:	46a1      	mov	r9, r4
		r = r << 1;
    53c2:	1892      	adds	r2, r2, r2
    53c4:	415b      	adcs	r3, r3
    53c6:	0014      	movs	r4, r2
    53c8:	001d      	movs	r5, r3
		if (n & bit_shift) {
    53ca:	9e05      	ldr	r6, [sp, #20]
    53cc:	464f      	mov	r7, r9
    53ce:	403e      	ands	r6, r7
    53d0:	46b4      	mov	ip, r6
    53d2:	9e04      	ldr	r6, [sp, #16]
    53d4:	4647      	mov	r7, r8
    53d6:	403e      	ands	r6, r7
    53d8:	46b2      	mov	sl, r6
    53da:	4666      	mov	r6, ip
    53dc:	4657      	mov	r7, sl
    53de:	433e      	orrs	r6, r7
    53e0:	d003      	beq.n	53ea <long_division+0x96>
			r |= 0x01;
    53e2:	0006      	movs	r6, r0
    53e4:	4326      	orrs	r6, r4
    53e6:	0032      	movs	r2, r6
    53e8:	002b      	movs	r3, r5
		if (r >= d) {
    53ea:	9c00      	ldr	r4, [sp, #0]
    53ec:	9d01      	ldr	r5, [sp, #4]
    53ee:	429d      	cmp	r5, r3
    53f0:	d8db      	bhi.n	53aa <long_division+0x56>
    53f2:	d1ce      	bne.n	5392 <long_division+0x3e>
    53f4:	4294      	cmp	r4, r2
    53f6:	d8d8      	bhi.n	53aa <long_division+0x56>
    53f8:	e7cb      	b.n	5392 <long_division+0x3e>
    53fa:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    53fc:	4658      	mov	r0, fp
    53fe:	0019      	movs	r1, r3
    5400:	b007      	add	sp, #28
    5402:	bc3c      	pop	{r2, r3, r4, r5}
    5404:	4690      	mov	r8, r2
    5406:	4699      	mov	r9, r3
    5408:	46a2      	mov	sl, r4
    540a:	46ab      	mov	fp, r5
    540c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000540e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    540e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    5410:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5412:	2340      	movs	r3, #64	; 0x40
    5414:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    5416:	4281      	cmp	r1, r0
    5418:	d202      	bcs.n	5420 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    541a:	0018      	movs	r0, r3
    541c:	bd10      	pop	{r4, pc}
		baud_calculated++;
    541e:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    5420:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    5422:	1c63      	adds	r3, r4, #1
    5424:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    5426:	4288      	cmp	r0, r1
    5428:	d9f9      	bls.n	541e <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    542a:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    542c:	2cff      	cmp	r4, #255	; 0xff
    542e:	d8f4      	bhi.n	541a <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    5430:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    5432:	2300      	movs	r3, #0
    5434:	e7f1      	b.n	541a <_sercom_get_sync_baud_val+0xc>
    5436:	Address 0x00005436 is out of bounds.


00005438 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    5438:	b5f0      	push	{r4, r5, r6, r7, lr}
    543a:	b083      	sub	sp, #12
    543c:	000f      	movs	r7, r1
    543e:	0016      	movs	r6, r2
    5440:	aa08      	add	r2, sp, #32
    5442:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    5444:	0004      	movs	r4, r0
    5446:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5448:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    544a:	42bc      	cmp	r4, r7
    544c:	d902      	bls.n	5454 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    544e:	0010      	movs	r0, r2
    5450:	b003      	add	sp, #12
    5452:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    5454:	2b00      	cmp	r3, #0
    5456:	d114      	bne.n	5482 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    5458:	0002      	movs	r2, r0
    545a:	0008      	movs	r0, r1
    545c:	2100      	movs	r1, #0
    545e:	4c19      	ldr	r4, [pc, #100]	; (54c4 <_sercom_get_async_baud_val+0x8c>)
    5460:	47a0      	blx	r4
    5462:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    5464:	003a      	movs	r2, r7
    5466:	2300      	movs	r3, #0
    5468:	2000      	movs	r0, #0
    546a:	4c17      	ldr	r4, [pc, #92]	; (54c8 <_sercom_get_async_baud_val+0x90>)
    546c:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    546e:	2200      	movs	r2, #0
    5470:	2301      	movs	r3, #1
    5472:	1a12      	subs	r2, r2, r0
    5474:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    5476:	0c12      	lsrs	r2, r2, #16
    5478:	041b      	lsls	r3, r3, #16
    547a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    547c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    547e:	2200      	movs	r2, #0
    5480:	e7e5      	b.n	544e <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    5482:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    5484:	2b01      	cmp	r3, #1
    5486:	d1f9      	bne.n	547c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    5488:	000a      	movs	r2, r1
    548a:	2300      	movs	r3, #0
    548c:	2100      	movs	r1, #0
    548e:	4c0d      	ldr	r4, [pc, #52]	; (54c4 <_sercom_get_async_baud_val+0x8c>)
    5490:	47a0      	blx	r4
    5492:	0002      	movs	r2, r0
    5494:	000b      	movs	r3, r1
    5496:	9200      	str	r2, [sp, #0]
    5498:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    549a:	0038      	movs	r0, r7
    549c:	2100      	movs	r1, #0
    549e:	4c0a      	ldr	r4, [pc, #40]	; (54c8 <_sercom_get_async_baud_val+0x90>)
    54a0:	47a0      	blx	r4
    54a2:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    54a4:	2380      	movs	r3, #128	; 0x80
    54a6:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    54a8:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    54aa:	4298      	cmp	r0, r3
    54ac:	d8cf      	bhi.n	544e <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    54ae:	0f79      	lsrs	r1, r7, #29
    54b0:	00f8      	lsls	r0, r7, #3
    54b2:	9a00      	ldr	r2, [sp, #0]
    54b4:	9b01      	ldr	r3, [sp, #4]
    54b6:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    54b8:	00ea      	lsls	r2, r5, #3
    54ba:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    54bc:	b2d2      	uxtb	r2, r2
    54be:	0352      	lsls	r2, r2, #13
    54c0:	432a      	orrs	r2, r5
    54c2:	e7db      	b.n	547c <_sercom_get_async_baud_val+0x44>
    54c4:	00013371 	.word	0x00013371
    54c8:	00005355 	.word	0x00005355

000054cc <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    54cc:	b510      	push	{r4, lr}
    54ce:	b082      	sub	sp, #8
    54d0:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    54d2:	4b0e      	ldr	r3, [pc, #56]	; (550c <sercom_set_gclk_generator+0x40>)
    54d4:	781b      	ldrb	r3, [r3, #0]
    54d6:	2b00      	cmp	r3, #0
    54d8:	d007      	beq.n	54ea <sercom_set_gclk_generator+0x1e>
    54da:	2900      	cmp	r1, #0
    54dc:	d105      	bne.n	54ea <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    54de:	4b0b      	ldr	r3, [pc, #44]	; (550c <sercom_set_gclk_generator+0x40>)
    54e0:	785b      	ldrb	r3, [r3, #1]
    54e2:	4283      	cmp	r3, r0
    54e4:	d010      	beq.n	5508 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    54e6:	201d      	movs	r0, #29
    54e8:	e00c      	b.n	5504 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    54ea:	a901      	add	r1, sp, #4
    54ec:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    54ee:	2011      	movs	r0, #17
    54f0:	4b07      	ldr	r3, [pc, #28]	; (5510 <sercom_set_gclk_generator+0x44>)
    54f2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    54f4:	2011      	movs	r0, #17
    54f6:	4b07      	ldr	r3, [pc, #28]	; (5514 <sercom_set_gclk_generator+0x48>)
    54f8:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    54fa:	4b04      	ldr	r3, [pc, #16]	; (550c <sercom_set_gclk_generator+0x40>)
    54fc:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    54fe:	2201      	movs	r2, #1
    5500:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    5502:	2000      	movs	r0, #0
}
    5504:	b002      	add	sp, #8
    5506:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    5508:	2000      	movs	r0, #0
    550a:	e7fb      	b.n	5504 <sercom_set_gclk_generator+0x38>
    550c:	200000bc 	.word	0x200000bc
    5510:	0000696d 	.word	0x0000696d
    5514:	000068fd 	.word	0x000068fd

00005518 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    5518:	4b3c      	ldr	r3, [pc, #240]	; (560c <_sercom_get_default_pad+0xf4>)
    551a:	4298      	cmp	r0, r3
    551c:	d032      	beq.n	5584 <_sercom_get_default_pad+0x6c>
    551e:	d90a      	bls.n	5536 <_sercom_get_default_pad+0x1e>
    5520:	4b3b      	ldr	r3, [pc, #236]	; (5610 <_sercom_get_default_pad+0xf8>)
    5522:	4298      	cmp	r0, r3
    5524:	d04e      	beq.n	55c4 <_sercom_get_default_pad+0xac>
    5526:	4b3b      	ldr	r3, [pc, #236]	; (5614 <_sercom_get_default_pad+0xfc>)
    5528:	4298      	cmp	r0, r3
    552a:	d055      	beq.n	55d8 <_sercom_get_default_pad+0xc0>
    552c:	4b3a      	ldr	r3, [pc, #232]	; (5618 <_sercom_get_default_pad+0x100>)
    552e:	4298      	cmp	r0, r3
    5530:	d038      	beq.n	55a4 <_sercom_get_default_pad+0x8c>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    5532:	2000      	movs	r0, #0
}
    5534:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    5536:	2384      	movs	r3, #132	; 0x84
    5538:	05db      	lsls	r3, r3, #23
    553a:	4298      	cmp	r0, r3
    553c:	d00c      	beq.n	5558 <_sercom_get_default_pad+0x40>
    553e:	4b37      	ldr	r3, [pc, #220]	; (561c <_sercom_get_default_pad+0x104>)
    5540:	4298      	cmp	r0, r3
    5542:	d1f6      	bne.n	5532 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5544:	2901      	cmp	r1, #1
    5546:	d017      	beq.n	5578 <_sercom_get_default_pad+0x60>
    5548:	2900      	cmp	r1, #0
    554a:	d057      	beq.n	55fc <_sercom_get_default_pad+0xe4>
    554c:	2902      	cmp	r1, #2
    554e:	d015      	beq.n	557c <_sercom_get_default_pad+0x64>
    5550:	2903      	cmp	r1, #3
    5552:	d015      	beq.n	5580 <_sercom_get_default_pad+0x68>
	return 0;
    5554:	2000      	movs	r0, #0
    5556:	e7ed      	b.n	5534 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5558:	2901      	cmp	r1, #1
    555a:	d007      	beq.n	556c <_sercom_get_default_pad+0x54>
    555c:	2900      	cmp	r1, #0
    555e:	d04b      	beq.n	55f8 <_sercom_get_default_pad+0xe0>
    5560:	2902      	cmp	r1, #2
    5562:	d005      	beq.n	5570 <_sercom_get_default_pad+0x58>
    5564:	2903      	cmp	r1, #3
    5566:	d005      	beq.n	5574 <_sercom_get_default_pad+0x5c>
	return 0;
    5568:	2000      	movs	r0, #0
    556a:	e7e3      	b.n	5534 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    556c:	482c      	ldr	r0, [pc, #176]	; (5620 <_sercom_get_default_pad+0x108>)
    556e:	e7e1      	b.n	5534 <_sercom_get_default_pad+0x1c>
    5570:	482c      	ldr	r0, [pc, #176]	; (5624 <_sercom_get_default_pad+0x10c>)
    5572:	e7df      	b.n	5534 <_sercom_get_default_pad+0x1c>
    5574:	482c      	ldr	r0, [pc, #176]	; (5628 <_sercom_get_default_pad+0x110>)
    5576:	e7dd      	b.n	5534 <_sercom_get_default_pad+0x1c>
    5578:	482c      	ldr	r0, [pc, #176]	; (562c <_sercom_get_default_pad+0x114>)
    557a:	e7db      	b.n	5534 <_sercom_get_default_pad+0x1c>
    557c:	482c      	ldr	r0, [pc, #176]	; (5630 <_sercom_get_default_pad+0x118>)
    557e:	e7d9      	b.n	5534 <_sercom_get_default_pad+0x1c>
    5580:	482c      	ldr	r0, [pc, #176]	; (5634 <_sercom_get_default_pad+0x11c>)
    5582:	e7d7      	b.n	5534 <_sercom_get_default_pad+0x1c>
    5584:	2901      	cmp	r1, #1
    5586:	d007      	beq.n	5598 <_sercom_get_default_pad+0x80>
    5588:	2900      	cmp	r1, #0
    558a:	d039      	beq.n	5600 <_sercom_get_default_pad+0xe8>
    558c:	2902      	cmp	r1, #2
    558e:	d005      	beq.n	559c <_sercom_get_default_pad+0x84>
    5590:	2903      	cmp	r1, #3
    5592:	d005      	beq.n	55a0 <_sercom_get_default_pad+0x88>
	return 0;
    5594:	2000      	movs	r0, #0
    5596:	e7cd      	b.n	5534 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5598:	4827      	ldr	r0, [pc, #156]	; (5638 <_sercom_get_default_pad+0x120>)
    559a:	e7cb      	b.n	5534 <_sercom_get_default_pad+0x1c>
    559c:	4827      	ldr	r0, [pc, #156]	; (563c <_sercom_get_default_pad+0x124>)
    559e:	e7c9      	b.n	5534 <_sercom_get_default_pad+0x1c>
    55a0:	4827      	ldr	r0, [pc, #156]	; (5640 <_sercom_get_default_pad+0x128>)
    55a2:	e7c7      	b.n	5534 <_sercom_get_default_pad+0x1c>
    55a4:	2901      	cmp	r1, #1
    55a6:	d007      	beq.n	55b8 <_sercom_get_default_pad+0xa0>
    55a8:	2900      	cmp	r1, #0
    55aa:	d02b      	beq.n	5604 <_sercom_get_default_pad+0xec>
    55ac:	2902      	cmp	r1, #2
    55ae:	d005      	beq.n	55bc <_sercom_get_default_pad+0xa4>
    55b0:	2903      	cmp	r1, #3
    55b2:	d005      	beq.n	55c0 <_sercom_get_default_pad+0xa8>
	return 0;
    55b4:	2000      	movs	r0, #0
    55b6:	e7bd      	b.n	5534 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    55b8:	4822      	ldr	r0, [pc, #136]	; (5644 <_sercom_get_default_pad+0x12c>)
    55ba:	e7bb      	b.n	5534 <_sercom_get_default_pad+0x1c>
    55bc:	4822      	ldr	r0, [pc, #136]	; (5648 <_sercom_get_default_pad+0x130>)
    55be:	e7b9      	b.n	5534 <_sercom_get_default_pad+0x1c>
    55c0:	4822      	ldr	r0, [pc, #136]	; (564c <_sercom_get_default_pad+0x134>)
    55c2:	e7b7      	b.n	5534 <_sercom_get_default_pad+0x1c>
    55c4:	2902      	cmp	r1, #2
    55c6:	d003      	beq.n	55d0 <_sercom_get_default_pad+0xb8>
    55c8:	2903      	cmp	r1, #3
    55ca:	d003      	beq.n	55d4 <_sercom_get_default_pad+0xbc>
    55cc:	2000      	movs	r0, #0
    55ce:	e7b1      	b.n	5534 <_sercom_get_default_pad+0x1c>
    55d0:	481f      	ldr	r0, [pc, #124]	; (5650 <_sercom_get_default_pad+0x138>)
    55d2:	e7af      	b.n	5534 <_sercom_get_default_pad+0x1c>
    55d4:	481f      	ldr	r0, [pc, #124]	; (5654 <_sercom_get_default_pad+0x13c>)
    55d6:	e7ad      	b.n	5534 <_sercom_get_default_pad+0x1c>
    55d8:	2901      	cmp	r1, #1
    55da:	d007      	beq.n	55ec <_sercom_get_default_pad+0xd4>
    55dc:	2900      	cmp	r1, #0
    55de:	d013      	beq.n	5608 <_sercom_get_default_pad+0xf0>
    55e0:	2902      	cmp	r1, #2
    55e2:	d005      	beq.n	55f0 <_sercom_get_default_pad+0xd8>
    55e4:	2903      	cmp	r1, #3
    55e6:	d005      	beq.n	55f4 <_sercom_get_default_pad+0xdc>
	return 0;
    55e8:	2000      	movs	r0, #0
    55ea:	e7a3      	b.n	5534 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    55ec:	481a      	ldr	r0, [pc, #104]	; (5658 <_sercom_get_default_pad+0x140>)
    55ee:	e7a1      	b.n	5534 <_sercom_get_default_pad+0x1c>
    55f0:	481a      	ldr	r0, [pc, #104]	; (565c <_sercom_get_default_pad+0x144>)
    55f2:	e79f      	b.n	5534 <_sercom_get_default_pad+0x1c>
    55f4:	481a      	ldr	r0, [pc, #104]	; (5660 <_sercom_get_default_pad+0x148>)
    55f6:	e79d      	b.n	5534 <_sercom_get_default_pad+0x1c>
    55f8:	481a      	ldr	r0, [pc, #104]	; (5664 <_sercom_get_default_pad+0x14c>)
    55fa:	e79b      	b.n	5534 <_sercom_get_default_pad+0x1c>
    55fc:	2003      	movs	r0, #3
    55fe:	e799      	b.n	5534 <_sercom_get_default_pad+0x1c>
    5600:	4819      	ldr	r0, [pc, #100]	; (5668 <_sercom_get_default_pad+0x150>)
    5602:	e797      	b.n	5534 <_sercom_get_default_pad+0x1c>
    5604:	4819      	ldr	r0, [pc, #100]	; (566c <_sercom_get_default_pad+0x154>)
    5606:	e795      	b.n	5534 <_sercom_get_default_pad+0x1c>
    5608:	4819      	ldr	r0, [pc, #100]	; (5670 <_sercom_get_default_pad+0x158>)
    560a:	e793      	b.n	5534 <_sercom_get_default_pad+0x1c>
    560c:	42000800 	.word	0x42000800
    5610:	42001000 	.word	0x42001000
    5614:	43000400 	.word	0x43000400
    5618:	42000c00 	.word	0x42000c00
    561c:	42000400 	.word	0x42000400
    5620:	00050003 	.word	0x00050003
    5624:	00060003 	.word	0x00060003
    5628:	00070003 	.word	0x00070003
    562c:	00010003 	.word	0x00010003
    5630:	001e0003 	.word	0x001e0003
    5634:	001f0003 	.word	0x001f0003
    5638:	00090003 	.word	0x00090003
    563c:	000a0003 	.word	0x000a0003
    5640:	000b0003 	.word	0x000b0003
    5644:	00110003 	.word	0x00110003
    5648:	00120003 	.word	0x00120003
    564c:	00130003 	.word	0x00130003
    5650:	000e0003 	.word	0x000e0003
    5654:	000f0003 	.word	0x000f0003
    5658:	00170003 	.word	0x00170003
    565c:	00180003 	.word	0x00180003
    5660:	00190003 	.word	0x00190003
    5664:	00040003 	.word	0x00040003
    5668:	00080003 	.word	0x00080003
    566c:	00100003 	.word	0x00100003
    5670:	00160003 	.word	0x00160003

00005674 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    5674:	b530      	push	{r4, r5, lr}
    5676:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    5678:	4b0b      	ldr	r3, [pc, #44]	; (56a8 <_sercom_get_sercom_inst_index+0x34>)
    567a:	466a      	mov	r2, sp
    567c:	cb32      	ldmia	r3!, {r1, r4, r5}
    567e:	c232      	stmia	r2!, {r1, r4, r5}
    5680:	cb32      	ldmia	r3!, {r1, r4, r5}
    5682:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    5684:	9b00      	ldr	r3, [sp, #0]
    5686:	4283      	cmp	r3, r0
    5688:	d00b      	beq.n	56a2 <_sercom_get_sercom_inst_index+0x2e>
    568a:	2301      	movs	r3, #1
    568c:	009a      	lsls	r2, r3, #2
    568e:	4669      	mov	r1, sp
    5690:	5852      	ldr	r2, [r2, r1]
    5692:	4282      	cmp	r2, r0
    5694:	d006      	beq.n	56a4 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5696:	3301      	adds	r3, #1
    5698:	2b06      	cmp	r3, #6
    569a:	d1f7      	bne.n	568c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    569c:	2000      	movs	r0, #0
}
    569e:	b007      	add	sp, #28
    56a0:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    56a2:	2300      	movs	r3, #0
			return i;
    56a4:	b2d8      	uxtb	r0, r3
    56a6:	e7fa      	b.n	569e <_sercom_get_sercom_inst_index+0x2a>
    56a8:	000175b4 	.word	0x000175b4

000056ac <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    56ac:	4770      	bx	lr
    56ae:	Address 0x000056ae is out of bounds.


000056b0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    56b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    56b2:	4b0a      	ldr	r3, [pc, #40]	; (56dc <_sercom_set_handler+0x2c>)
    56b4:	781b      	ldrb	r3, [r3, #0]
    56b6:	2b00      	cmp	r3, #0
    56b8:	d10c      	bne.n	56d4 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    56ba:	4f09      	ldr	r7, [pc, #36]	; (56e0 <_sercom_set_handler+0x30>)
    56bc:	4e09      	ldr	r6, [pc, #36]	; (56e4 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    56be:	4d0a      	ldr	r5, [pc, #40]	; (56e8 <_sercom_set_handler+0x38>)
    56c0:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    56c2:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    56c4:	195a      	adds	r2, r3, r5
    56c6:	6014      	str	r4, [r2, #0]
    56c8:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    56ca:	2b18      	cmp	r3, #24
    56cc:	d1f9      	bne.n	56c2 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    56ce:	2201      	movs	r2, #1
    56d0:	4b02      	ldr	r3, [pc, #8]	; (56dc <_sercom_set_handler+0x2c>)
    56d2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    56d4:	0080      	lsls	r0, r0, #2
    56d6:	4b02      	ldr	r3, [pc, #8]	; (56e0 <_sercom_set_handler+0x30>)
    56d8:	50c1      	str	r1, [r0, r3]
}
    56da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    56dc:	200000be 	.word	0x200000be
    56e0:	200000c0 	.word	0x200000c0
    56e4:	000056ad 	.word	0x000056ad
    56e8:	20001f14 	.word	0x20001f14

000056ec <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    56ec:	b500      	push	{lr}
    56ee:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    56f0:	2308      	movs	r3, #8
    56f2:	466a      	mov	r2, sp
    56f4:	7013      	strb	r3, [r2, #0]
    56f6:	3301      	adds	r3, #1
    56f8:	7053      	strb	r3, [r2, #1]
    56fa:	3301      	adds	r3, #1
    56fc:	7093      	strb	r3, [r2, #2]
    56fe:	3301      	adds	r3, #1
    5700:	70d3      	strb	r3, [r2, #3]
    5702:	3301      	adds	r3, #1
    5704:	7113      	strb	r3, [r2, #4]
    5706:	3301      	adds	r3, #1
    5708:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    570a:	4b03      	ldr	r3, [pc, #12]	; (5718 <_sercom_get_interrupt_vector+0x2c>)
    570c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    570e:	466b      	mov	r3, sp
    5710:	5618      	ldrsb	r0, [r3, r0]
}
    5712:	b003      	add	sp, #12
    5714:	bd00      	pop	{pc}
    5716:	46c0      	nop			; (mov r8, r8)
    5718:	00005675 	.word	0x00005675

0000571c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    571c:	b510      	push	{r4, lr}
    571e:	4b02      	ldr	r3, [pc, #8]	; (5728 <SERCOM0_Handler+0xc>)
    5720:	681b      	ldr	r3, [r3, #0]
    5722:	2000      	movs	r0, #0
    5724:	4798      	blx	r3
    5726:	bd10      	pop	{r4, pc}
    5728:	200000c0 	.word	0x200000c0

0000572c <SERCOM1_Handler>:
    572c:	b510      	push	{r4, lr}
    572e:	4b02      	ldr	r3, [pc, #8]	; (5738 <SERCOM1_Handler+0xc>)
    5730:	685b      	ldr	r3, [r3, #4]
    5732:	2001      	movs	r0, #1
    5734:	4798      	blx	r3
    5736:	bd10      	pop	{r4, pc}
    5738:	200000c0 	.word	0x200000c0

0000573c <SERCOM2_Handler>:
    573c:	b510      	push	{r4, lr}
    573e:	4b02      	ldr	r3, [pc, #8]	; (5748 <SERCOM2_Handler+0xc>)
    5740:	689b      	ldr	r3, [r3, #8]
    5742:	2002      	movs	r0, #2
    5744:	4798      	blx	r3
    5746:	bd10      	pop	{r4, pc}
    5748:	200000c0 	.word	0x200000c0

0000574c <SERCOM3_Handler>:
    574c:	b510      	push	{r4, lr}
    574e:	4b02      	ldr	r3, [pc, #8]	; (5758 <SERCOM3_Handler+0xc>)
    5750:	68db      	ldr	r3, [r3, #12]
    5752:	2003      	movs	r0, #3
    5754:	4798      	blx	r3
    5756:	bd10      	pop	{r4, pc}
    5758:	200000c0 	.word	0x200000c0

0000575c <SERCOM4_Handler>:
    575c:	b510      	push	{r4, lr}
    575e:	4b02      	ldr	r3, [pc, #8]	; (5768 <SERCOM4_Handler+0xc>)
    5760:	691b      	ldr	r3, [r3, #16]
    5762:	2004      	movs	r0, #4
    5764:	4798      	blx	r3
    5766:	bd10      	pop	{r4, pc}
    5768:	200000c0 	.word	0x200000c0

0000576c <SERCOM5_Handler>:
    576c:	b510      	push	{r4, lr}
    576e:	4b02      	ldr	r3, [pc, #8]	; (5778 <SERCOM5_Handler+0xc>)
    5770:	695b      	ldr	r3, [r3, #20]
    5772:	2005      	movs	r0, #5
    5774:	4798      	blx	r3
    5776:	bd10      	pop	{r4, pc}
    5778:	200000c0 	.word	0x200000c0

0000577c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    577c:	b5f0      	push	{r4, r5, r6, r7, lr}
    577e:	46d6      	mov	lr, sl
    5780:	464f      	mov	r7, r9
    5782:	4646      	mov	r6, r8
    5784:	b5c0      	push	{r6, r7, lr}
    5786:	b08a      	sub	sp, #40	; 0x28
    5788:	0006      	movs	r6, r0
    578a:	000f      	movs	r7, r1
    578c:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    578e:	6031      	str	r1, [r6, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    5790:	680b      	ldr	r3, [r1, #0]
    5792:	079b      	lsls	r3, r3, #30
    5794:	d40a      	bmi.n	57ac <spi_init+0x30>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    5796:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    5798:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    579a:	07db      	lsls	r3, r3, #31
    579c:	d400      	bmi.n	57a0 <spi_init+0x24>
    579e:	e0af      	b.n	5900 <spi_init+0x184>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    57a0:	b00a      	add	sp, #40	; 0x28
    57a2:	bc1c      	pop	{r2, r3, r4}
    57a4:	4690      	mov	r8, r2
    57a6:	4699      	mov	r9, r3
    57a8:	46a2      	mov	sl, r4
    57aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    57ac:	6a93      	ldr	r3, [r2, #40]	; 0x28
    57ae:	9305      	str	r3, [sp, #20]
    57b0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    57b2:	9306      	str	r3, [sp, #24]
    57b4:	6b13      	ldr	r3, [r2, #48]	; 0x30
    57b6:	9307      	str	r3, [sp, #28]
    57b8:	6b53      	ldr	r3, [r2, #52]	; 0x34
    57ba:	9308      	str	r3, [sp, #32]
    57bc:	2500      	movs	r5, #0
    57be:	e00a      	b.n	57d6 <spi_init+0x5a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    57c0:	0038      	movs	r0, r7
    57c2:	4bb6      	ldr	r3, [pc, #728]	; (5a9c <spi_init+0x320>)
    57c4:	4798      	blx	r3
    57c6:	e00e      	b.n	57e6 <spi_init+0x6a>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    57c8:	230f      	movs	r3, #15
    57ca:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    57cc:	4581      	cmp	r9, r0
    57ce:	d130      	bne.n	5832 <spi_init+0xb6>
    57d0:	3501      	adds	r5, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    57d2:	2d04      	cmp	r5, #4
    57d4:	d031      	beq.n	583a <spi_init+0xbe>
    57d6:	b2e9      	uxtb	r1, r5
		uint32_t current_pinmux = pad_pinmuxes[pad];
    57d8:	00ab      	lsls	r3, r5, #2
    57da:	aa02      	add	r2, sp, #8
    57dc:	200c      	movs	r0, #12
    57de:	1812      	adds	r2, r2, r0
    57e0:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    57e2:	2800      	cmp	r0, #0
    57e4:	d0ec      	beq.n	57c0 <spi_init+0x44>
		if (current_pinmux == PINMUX_UNUSED) {
    57e6:	1c43      	adds	r3, r0, #1
    57e8:	d0f2      	beq.n	57d0 <spi_init+0x54>
		if ((current_pinmux & 0xFFFF) !=
    57ea:	0401      	lsls	r1, r0, #16
    57ec:	0c0b      	lsrs	r3, r1, #16
    57ee:	4699      	mov	r9, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    57f0:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    57f2:	b2c3      	uxtb	r3, r0
    57f4:	469c      	mov	ip, r3
		return NULL;
    57f6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    57f8:	0602      	lsls	r2, r0, #24
    57fa:	d405      	bmi.n	5808 <spi_init+0x8c>
		return &(ports[port_index]->Group[group_index]);
    57fc:	4663      	mov	r3, ip
    57fe:	095b      	lsrs	r3, r3, #5
    5800:	01db      	lsls	r3, r3, #7
    5802:	4aa7      	ldr	r2, [pc, #668]	; (5aa0 <spi_init+0x324>)
    5804:	4690      	mov	r8, r2
    5806:	4443      	add	r3, r8
	uint32_t pin_index = (gpio_pin % 32);
    5808:	221f      	movs	r2, #31
    580a:	4660      	mov	r0, ip
    580c:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    580e:	1898      	adds	r0, r3, r2
    5810:	3040      	adds	r0, #64	; 0x40
    5812:	7800      	ldrb	r0, [r0, #0]
    5814:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    5816:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    5818:	4651      	mov	r1, sl
    581a:	07c9      	lsls	r1, r1, #31
    581c:	d5d6      	bpl.n	57cc <spi_init+0x50>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    581e:	0852      	lsrs	r2, r2, #1
    5820:	189b      	adds	r3, r3, r2
    5822:	3330      	adds	r3, #48	; 0x30
    5824:	7818      	ldrb	r0, [r3, #0]
    5826:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    5828:	4663      	mov	r3, ip
    582a:	07db      	lsls	r3, r3, #31
    582c:	d5cc      	bpl.n	57c8 <spi_init+0x4c>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    582e:	0900      	lsrs	r0, r0, #4
    5830:	e7cc      	b.n	57cc <spi_init+0x50>
			module->hw = NULL;
    5832:	2300      	movs	r3, #0
    5834:	6033      	str	r3, [r6, #0]
			return STATUS_ERR_DENIED;
    5836:	201c      	movs	r0, #28
    5838:	e7b2      	b.n	57a0 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    583a:	2011      	movs	r0, #17
    583c:	4b99      	ldr	r3, [pc, #612]	; (5aa4 <spi_init+0x328>)
    583e:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    5840:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    5842:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    5844:	2a01      	cmp	r2, #1
    5846:	d016      	beq.n	5876 <spi_init+0xfa>
	if (config->mode == SPI_MODE_SLAVE) {
    5848:	7821      	ldrb	r1, [r4, #0]
    584a:	2900      	cmp	r1, #0
    584c:	d127      	bne.n	589e <spi_init+0x122>
		if (spi_module->CTRLA.reg != addr) {
    584e:	683b      	ldr	r3, [r7, #0]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    5850:	7fe2      	ldrb	r2, [r4, #31]
    5852:	0412      	lsls	r2, r2, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    5854:	7fa0      	ldrb	r0, [r4, #30]
    5856:	4302      	orrs	r2, r0
			return STATUS_ERR_DENIED;
    5858:	201c      	movs	r0, #28
		if (spi_module->CTRLA.reg != addr) {
    585a:	429a      	cmp	r2, r3
    585c:	d1a0      	bne.n	57a0 <spi_init+0x24>
		ctrla |= config->mode_specific.slave.frame_format;
    585e:	69a3      	ldr	r3, [r4, #24]
		ctrlb |= config->mode_specific.slave.address_mode;
    5860:	8ba2      	ldrh	r2, [r4, #28]
		if (config->mode_specific.slave.preload_enable) {
    5862:	3004      	adds	r0, #4
    5864:	5c20      	ldrb	r0, [r4, r0]
    5866:	2800      	cmp	r0, #0
    5868:	d001      	beq.n	586e <spi_init+0xf2>
    586a:	2040      	movs	r0, #64	; 0x40
    586c:	4302      	orrs	r2, r0
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
    586e:	2008      	movs	r0, #8
    5870:	4303      	orrs	r3, r0
    5872:	431d      	orrs	r5, r3
    5874:	e014      	b.n	58a0 <spi_init+0x124>
		enum status_code error_code = _sercom_get_sync_baud_val(
    5876:	aa04      	add	r2, sp, #16
    5878:	0001      	movs	r1, r0
    587a:	69a0      	ldr	r0, [r4, #24]
    587c:	4b8a      	ldr	r3, [pc, #552]	; (5aa8 <spi_init+0x32c>)
    587e:	4798      	blx	r3
    5880:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    5882:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    5884:	2b00      	cmp	r3, #0
    5886:	d000      	beq.n	588a <spi_init+0x10e>
    5888:	e78a      	b.n	57a0 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    588a:	7b3b      	ldrb	r3, [r7, #12]
    588c:	b2db      	uxtb	r3, r3
    588e:	aa04      	add	r2, sp, #16
    5890:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    5892:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    5894:	429a      	cmp	r2, r3
    5896:	d000      	beq.n	589a <spi_init+0x11e>
    5898:	e782      	b.n	57a0 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    589a:	350c      	adds	r5, #12
    589c:	e7d4      	b.n	5848 <spi_init+0xcc>
	uint32_t ctrlb = 0;
    589e:	2200      	movs	r2, #0
	ctrla |= config->mux_setting;
    58a0:	6863      	ldr	r3, [r4, #4]
    58a2:	68a0      	ldr	r0, [r4, #8]
    58a4:	4303      	orrs	r3, r0
    58a6:	68e0      	ldr	r0, [r4, #12]
    58a8:	4303      	orrs	r3, r0
    58aa:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    58ac:	7c20      	ldrb	r0, [r4, #16]
    58ae:	4302      	orrs	r2, r0
	if (config->run_in_standby) {
    58b0:	7c60      	ldrb	r0, [r4, #17]
    58b2:	2800      	cmp	r0, #0
    58b4:	d001      	beq.n	58ba <spi_init+0x13e>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    58b6:	2080      	movs	r0, #128	; 0x80
    58b8:	4303      	orrs	r3, r0
	if (config->receiver_enable) {
    58ba:	7ca0      	ldrb	r0, [r4, #18]
    58bc:	2800      	cmp	r0, #0
    58be:	d002      	beq.n	58c6 <spi_init+0x14a>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    58c0:	2080      	movs	r0, #128	; 0x80
    58c2:	0280      	lsls	r0, r0, #10
    58c4:	4302      	orrs	r2, r0
	if (config->select_slave_low_detect_enable) {
    58c6:	7ce0      	ldrb	r0, [r4, #19]
    58c8:	2800      	cmp	r0, #0
    58ca:	d002      	beq.n	58d2 <spi_init+0x156>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    58cc:	2080      	movs	r0, #128	; 0x80
    58ce:	0080      	lsls	r0, r0, #2
    58d0:	4302      	orrs	r2, r0
	if (config->master_slave_select_enable) {
    58d2:	7d20      	ldrb	r0, [r4, #20]
    58d4:	2800      	cmp	r0, #0
    58d6:	d002      	beq.n	58de <spi_init+0x162>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    58d8:	2080      	movs	r0, #128	; 0x80
    58da:	0180      	lsls	r0, r0, #6
    58dc:	4302      	orrs	r2, r0
	if (spi_module->CTRLA.reg == ctrla &&
    58de:	6838      	ldr	r0, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    58e0:	2502      	movs	r5, #2
    58e2:	432b      	orrs	r3, r5
	if (spi_module->CTRLA.reg == ctrla &&
    58e4:	4283      	cmp	r3, r0
    58e6:	d003      	beq.n	58f0 <spi_init+0x174>
	module->hw = NULL;
    58e8:	2300      	movs	r3, #0
    58ea:	6033      	str	r3, [r6, #0]
	return STATUS_ERR_DENIED;
    58ec:	201c      	movs	r0, #28
    58ee:	e757      	b.n	57a0 <spi_init+0x24>
			spi_module->CTRLB.reg == ctrlb) {
    58f0:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    58f2:	4293      	cmp	r3, r2
    58f4:	d1f8      	bne.n	58e8 <spi_init+0x16c>
		module->mode           = config->mode;
    58f6:	7171      	strb	r1, [r6, #5]
		module->character_size = config->character_size;
    58f8:	7c23      	ldrb	r3, [r4, #16]
    58fa:	71b3      	strb	r3, [r6, #6]
		return STATUS_OK;
    58fc:	2000      	movs	r0, #0
    58fe:	e74f      	b.n	57a0 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5900:	0008      	movs	r0, r1
    5902:	4b6a      	ldr	r3, [pc, #424]	; (5aac <spi_init+0x330>)
    5904:	4798      	blx	r3
	if (sercom_index == 5) {
    5906:	2805      	cmp	r0, #5
    5908:	d100      	bne.n	590c <spi_init+0x190>
    590a:	e0bf      	b.n	5a8c <spi_init+0x310>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    590c:	0003      	movs	r3, r0
    590e:	3312      	adds	r3, #18
			MCLK->APBCMASK.reg |= mask;
    5910:	4967      	ldr	r1, [pc, #412]	; (5ab0 <spi_init+0x334>)
    5912:	69cd      	ldr	r5, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    5914:	2201      	movs	r2, #1
    5916:	4082      	lsls	r2, r0
    5918:	432a      	orrs	r2, r5
    591a:	61ca      	str	r2, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    591c:	a909      	add	r1, sp, #36	; 0x24
    591e:	2524      	movs	r5, #36	; 0x24
    5920:	5d62      	ldrb	r2, [r4, r5]
    5922:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    5924:	b2db      	uxtb	r3, r3
    5926:	9301      	str	r3, [sp, #4]
    5928:	0018      	movs	r0, r3
    592a:	4b62      	ldr	r3, [pc, #392]	; (5ab4 <spi_init+0x338>)
    592c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    592e:	9801      	ldr	r0, [sp, #4]
    5930:	4b61      	ldr	r3, [pc, #388]	; (5ab8 <spi_init+0x33c>)
    5932:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5934:	5d60      	ldrb	r0, [r4, r5]
    5936:	2100      	movs	r1, #0
    5938:	4b60      	ldr	r3, [pc, #384]	; (5abc <spi_init+0x340>)
    593a:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    593c:	7823      	ldrb	r3, [r4, #0]
    593e:	2b01      	cmp	r3, #1
    5940:	d020      	beq.n	5984 <spi_init+0x208>
	if (config->mode == SPI_MODE_SLAVE) {
    5942:	7823      	ldrb	r3, [r4, #0]
    5944:	2b00      	cmp	r3, #0
    5946:	d103      	bne.n	5950 <spi_init+0x1d4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    5948:	683b      	ldr	r3, [r7, #0]
    594a:	2208      	movs	r2, #8
    594c:	4313      	orrs	r3, r2
    594e:	603b      	str	r3, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5950:	6833      	ldr	r3, [r6, #0]
    5952:	4698      	mov	r8, r3
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5954:	ab04      	add	r3, sp, #16
    5956:	2280      	movs	r2, #128	; 0x80
    5958:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    595a:	2200      	movs	r2, #0
    595c:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    595e:	2101      	movs	r1, #1
    5960:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    5962:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    5964:	7823      	ldrb	r3, [r4, #0]
    5966:	2b00      	cmp	r3, #0
    5968:	d101      	bne.n	596e <spi_init+0x1f2>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    596a:	ab04      	add	r3, sp, #16
    596c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    596e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5970:	9305      	str	r3, [sp, #20]
    5972:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5974:	9306      	str	r3, [sp, #24]
    5976:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5978:	9307      	str	r3, [sp, #28]
    597a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    597c:	9308      	str	r3, [sp, #32]
    597e:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5980:	ad05      	add	r5, sp, #20
    5982:	e011      	b.n	59a8 <spi_init+0x22c>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    5984:	683b      	ldr	r3, [r7, #0]
    5986:	220c      	movs	r2, #12
    5988:	4313      	orrs	r3, r2
    598a:	603b      	str	r3, [r7, #0]
    598c:	e7d9      	b.n	5942 <spi_init+0x1c6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    598e:	4640      	mov	r0, r8
    5990:	4b42      	ldr	r3, [pc, #264]	; (5a9c <spi_init+0x320>)
    5992:	4798      	blx	r3
    5994:	e00d      	b.n	59b2 <spi_init+0x236>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    5996:	a904      	add	r1, sp, #16
    5998:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    599a:	0c00      	lsrs	r0, r0, #16
    599c:	b2c0      	uxtb	r0, r0
    599e:	4b48      	ldr	r3, [pc, #288]	; (5ac0 <spi_init+0x344>)
    59a0:	4798      	blx	r3
    59a2:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    59a4:	2f04      	cmp	r7, #4
    59a6:	d007      	beq.n	59b8 <spi_init+0x23c>
    59a8:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    59aa:	00bb      	lsls	r3, r7, #2
    59ac:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    59ae:	2800      	cmp	r0, #0
    59b0:	d0ed      	beq.n	598e <spi_init+0x212>
		if (current_pinmux != PINMUX_UNUSED) {
    59b2:	1c43      	adds	r3, r0, #1
    59b4:	d1ef      	bne.n	5996 <spi_init+0x21a>
    59b6:	e7f4      	b.n	59a2 <spi_init+0x226>
	module->mode             = config->mode;
    59b8:	7823      	ldrb	r3, [r4, #0]
    59ba:	7173      	strb	r3, [r6, #5]
	module->character_size   = config->character_size;
    59bc:	7c23      	ldrb	r3, [r4, #16]
    59be:	71b3      	strb	r3, [r6, #6]
	module->receiver_enabled = config->receiver_enable;
    59c0:	7ca3      	ldrb	r3, [r4, #18]
    59c2:	71f3      	strb	r3, [r6, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    59c4:	7d23      	ldrb	r3, [r4, #20]
    59c6:	7233      	strb	r3, [r6, #8]
	uint16_t baud = 0;
    59c8:	2200      	movs	r2, #0
    59ca:	ab02      	add	r3, sp, #8
    59cc:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    59ce:	7823      	ldrb	r3, [r4, #0]
    59d0:	2b01      	cmp	r3, #1
    59d2:	d014      	beq.n	59fe <spi_init+0x282>
	if (config->mode == SPI_MODE_SLAVE) {
    59d4:	7823      	ldrb	r3, [r4, #0]
    59d6:	2b00      	cmp	r3, #0
    59d8:	d129      	bne.n	5a2e <spi_init+0x2b2>
		ctrla = config->mode_specific.slave.frame_format;
    59da:	69a0      	ldr	r0, [r4, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    59dc:	8ba2      	ldrh	r2, [r4, #28]
		spi_module->ADDR.reg |=
    59de:	4643      	mov	r3, r8
    59e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    59e2:	7fe1      	ldrb	r1, [r4, #31]
    59e4:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    59e6:	7fa5      	ldrb	r5, [r4, #30]
    59e8:	4329      	orrs	r1, r5
		spi_module->ADDR.reg |=
    59ea:	4319      	orrs	r1, r3
    59ec:	4643      	mov	r3, r8
    59ee:	6259      	str	r1, [r3, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    59f0:	2320      	movs	r3, #32
    59f2:	5ce3      	ldrb	r3, [r4, r3]
    59f4:	2b00      	cmp	r3, #0
    59f6:	d01c      	beq.n	5a32 <spi_init+0x2b6>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    59f8:	2340      	movs	r3, #64	; 0x40
    59fa:	431a      	orrs	r2, r3
    59fc:	e019      	b.n	5a32 <spi_init+0x2b6>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    59fe:	6830      	ldr	r0, [r6, #0]
    5a00:	4b2a      	ldr	r3, [pc, #168]	; (5aac <spi_init+0x330>)
    5a02:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5a04:	3012      	adds	r0, #18
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    5a06:	b2c0      	uxtb	r0, r0
    5a08:	4b26      	ldr	r3, [pc, #152]	; (5aa4 <spi_init+0x328>)
    5a0a:	4798      	blx	r3
    5a0c:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    5a0e:	ab02      	add	r3, sp, #8
    5a10:	1d9a      	adds	r2, r3, #6
    5a12:	69a0      	ldr	r0, [r4, #24]
    5a14:	4b24      	ldr	r3, [pc, #144]	; (5aa8 <spi_init+0x32c>)
    5a16:	4798      	blx	r3
    5a18:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    5a1a:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    5a1c:	2b00      	cmp	r3, #0
    5a1e:	d000      	beq.n	5a22 <spi_init+0x2a6>
    5a20:	e6be      	b.n	57a0 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    5a22:	ab02      	add	r3, sp, #8
    5a24:	3306      	adds	r3, #6
    5a26:	781b      	ldrb	r3, [r3, #0]
    5a28:	4642      	mov	r2, r8
    5a2a:	7313      	strb	r3, [r2, #12]
    5a2c:	e7d2      	b.n	59d4 <spi_init+0x258>
	uint32_t ctrlb = 0;
    5a2e:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    5a30:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    5a32:	6863      	ldr	r3, [r4, #4]
    5a34:	68a1      	ldr	r1, [r4, #8]
    5a36:	430b      	orrs	r3, r1
    5a38:	68e1      	ldr	r1, [r4, #12]
    5a3a:	430b      	orrs	r3, r1
    5a3c:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    5a3e:	7c21      	ldrb	r1, [r4, #16]
    5a40:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    5a42:	7c61      	ldrb	r1, [r4, #17]
    5a44:	2900      	cmp	r1, #0
    5a46:	d103      	bne.n	5a50 <spi_init+0x2d4>
    5a48:	491e      	ldr	r1, [pc, #120]	; (5ac4 <spi_init+0x348>)
    5a4a:	7889      	ldrb	r1, [r1, #2]
    5a4c:	0789      	lsls	r1, r1, #30
    5a4e:	d501      	bpl.n	5a54 <spi_init+0x2d8>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    5a50:	2180      	movs	r1, #128	; 0x80
    5a52:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    5a54:	7ca1      	ldrb	r1, [r4, #18]
    5a56:	2900      	cmp	r1, #0
    5a58:	d002      	beq.n	5a60 <spi_init+0x2e4>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    5a5a:	2180      	movs	r1, #128	; 0x80
    5a5c:	0289      	lsls	r1, r1, #10
    5a5e:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    5a60:	7ce1      	ldrb	r1, [r4, #19]
    5a62:	2900      	cmp	r1, #0
    5a64:	d002      	beq.n	5a6c <spi_init+0x2f0>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    5a66:	2180      	movs	r1, #128	; 0x80
    5a68:	0089      	lsls	r1, r1, #2
    5a6a:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    5a6c:	7d21      	ldrb	r1, [r4, #20]
    5a6e:	2900      	cmp	r1, #0
    5a70:	d002      	beq.n	5a78 <spi_init+0x2fc>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    5a72:	2180      	movs	r1, #128	; 0x80
    5a74:	0189      	lsls	r1, r1, #6
    5a76:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    5a78:	4641      	mov	r1, r8
    5a7a:	6809      	ldr	r1, [r1, #0]
    5a7c:	430b      	orrs	r3, r1
    5a7e:	4641      	mov	r1, r8
    5a80:	600b      	str	r3, [r1, #0]
	spi_module->CTRLB.reg |= ctrlb;
    5a82:	684b      	ldr	r3, [r1, #4]
    5a84:	431a      	orrs	r2, r3
    5a86:	604a      	str	r2, [r1, #4]
	return STATUS_OK;
    5a88:	2000      	movs	r0, #0
    5a8a:	e689      	b.n	57a0 <spi_init+0x24>
			MCLK->APBDMASK.reg |= mask;
    5a8c:	4a08      	ldr	r2, [pc, #32]	; (5ab0 <spi_init+0x334>)
    5a8e:	6a13      	ldr	r3, [r2, #32]
    5a90:	2102      	movs	r1, #2
    5a92:	430b      	orrs	r3, r1
    5a94:	6213      	str	r3, [r2, #32]
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
    5a96:	2318      	movs	r3, #24
    5a98:	e740      	b.n	591c <spi_init+0x1a0>
    5a9a:	46c0      	nop			; (mov r8, r8)
    5a9c:	00005519 	.word	0x00005519
    5aa0:	40002800 	.word	0x40002800
    5aa4:	00006991 	.word	0x00006991
    5aa8:	0000540f 	.word	0x0000540f
    5aac:	00005675 	.word	0x00005675
    5ab0:	40000400 	.word	0x40000400
    5ab4:	0000696d 	.word	0x0000696d
    5ab8:	000068fd 	.word	0x000068fd
    5abc:	000054cd 	.word	0x000054cd
    5ac0:	00006a69 	.word	0x00006a69
    5ac4:	41002000 	.word	0x41002000

00005ac8 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    5ac8:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    5aca:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    5acc:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    5ace:	2c01      	cmp	r4, #1
    5ad0:	d001      	beq.n	5ad6 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    5ad2:	0018      	movs	r0, r3
    5ad4:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    5ad6:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    5ad8:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    5ada:	2c00      	cmp	r4, #0
    5adc:	d1f9      	bne.n	5ad2 <spi_select_slave+0xa>
		if (select) {
    5ade:	2a00      	cmp	r2, #0
    5ae0:	d058      	beq.n	5b94 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    5ae2:	784b      	ldrb	r3, [r1, #1]
    5ae4:	2b00      	cmp	r3, #0
    5ae6:	d044      	beq.n	5b72 <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5ae8:	6803      	ldr	r3, [r0, #0]
    5aea:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    5aec:	07db      	lsls	r3, r3, #31
    5aee:	d410      	bmi.n	5b12 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    5af0:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5af2:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5af4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5af6:	2900      	cmp	r1, #0
    5af8:	d104      	bne.n	5b04 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    5afa:	0953      	lsrs	r3, r2, #5
    5afc:	01db      	lsls	r3, r3, #7
    5afe:	492e      	ldr	r1, [pc, #184]	; (5bb8 <spi_select_slave+0xf0>)
    5b00:	468c      	mov	ip, r1
    5b02:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5b04:	211f      	movs	r1, #31
    5b06:	4011      	ands	r1, r2
    5b08:	2201      	movs	r2, #1
    5b0a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5b0c:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    5b0e:	2305      	movs	r3, #5
    5b10:	e7df      	b.n	5ad2 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    5b12:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5b14:	09d4      	lsrs	r4, r2, #7
		return NULL;
    5b16:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5b18:	2c00      	cmp	r4, #0
    5b1a:	d104      	bne.n	5b26 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    5b1c:	0953      	lsrs	r3, r2, #5
    5b1e:	01db      	lsls	r3, r3, #7
    5b20:	4c25      	ldr	r4, [pc, #148]	; (5bb8 <spi_select_slave+0xf0>)
    5b22:	46a4      	mov	ip, r4
    5b24:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5b26:	241f      	movs	r4, #31
    5b28:	4014      	ands	r4, r2
    5b2a:	2201      	movs	r2, #1
    5b2c:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    5b2e:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5b30:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5b32:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    5b34:	07d2      	lsls	r2, r2, #31
    5b36:	d501      	bpl.n	5b3c <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5b38:	788a      	ldrb	r2, [r1, #2]
    5b3a:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    5b3c:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    5b3e:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    5b40:	2a00      	cmp	r2, #0
    5b42:	d1c6      	bne.n	5ad2 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5b44:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    5b46:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5b48:	7e13      	ldrb	r3, [r2, #24]
    5b4a:	420b      	tst	r3, r1
    5b4c:	d0fc      	beq.n	5b48 <spi_select_slave+0x80>
    5b4e:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    5b50:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    5b52:	0749      	lsls	r1, r1, #29
    5b54:	d5bd      	bpl.n	5ad2 <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5b56:	8b53      	ldrh	r3, [r2, #26]
    5b58:	075b      	lsls	r3, r3, #29
    5b5a:	d501      	bpl.n	5b60 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5b5c:	2304      	movs	r3, #4
    5b5e:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5b60:	7983      	ldrb	r3, [r0, #6]
    5b62:	2b01      	cmp	r3, #1
    5b64:	d002      	beq.n	5b6c <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5b66:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5b68:	2300      	movs	r3, #0
    5b6a:	e7b2      	b.n	5ad2 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5b6c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5b6e:	2300      	movs	r3, #0
    5b70:	e7af      	b.n	5ad2 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    5b72:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5b74:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5b76:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5b78:	2900      	cmp	r1, #0
    5b7a:	d104      	bne.n	5b86 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    5b7c:	0953      	lsrs	r3, r2, #5
    5b7e:	01db      	lsls	r3, r3, #7
    5b80:	490d      	ldr	r1, [pc, #52]	; (5bb8 <spi_select_slave+0xf0>)
    5b82:	468c      	mov	ip, r1
    5b84:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5b86:	211f      	movs	r1, #31
    5b88:	4011      	ands	r1, r2
    5b8a:	2201      	movs	r2, #1
    5b8c:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    5b8e:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    5b90:	2300      	movs	r3, #0
    5b92:	e79e      	b.n	5ad2 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    5b94:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5b96:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5b98:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5b9a:	2900      	cmp	r1, #0
    5b9c:	d104      	bne.n	5ba8 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    5b9e:	0953      	lsrs	r3, r2, #5
    5ba0:	01db      	lsls	r3, r3, #7
    5ba2:	4905      	ldr	r1, [pc, #20]	; (5bb8 <spi_select_slave+0xf0>)
    5ba4:	468c      	mov	ip, r1
    5ba6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5ba8:	211f      	movs	r1, #31
    5baa:	4011      	ands	r1, r2
    5bac:	2201      	movs	r2, #1
    5bae:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5bb0:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    5bb2:	2300      	movs	r3, #0
    5bb4:	e78d      	b.n	5ad2 <spi_select_slave+0xa>
    5bb6:	46c0      	nop			; (mov r8, r8)
    5bb8:	40002800 	.word	0x40002800

00005bbc <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    5bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    5bbe:	46de      	mov	lr, fp
    5bc0:	4657      	mov	r7, sl
    5bc2:	464e      	mov	r6, r9
    5bc4:	4645      	mov	r5, r8
    5bc6:	b5e0      	push	{r5, r6, r7, lr}
    5bc8:	b091      	sub	sp, #68	; 0x44
    5bca:	0005      	movs	r5, r0
    5bcc:	000c      	movs	r4, r1
    5bce:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    5bd0:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5bd2:	0008      	movs	r0, r1
    5bd4:	4bc6      	ldr	r3, [pc, #792]	; (5ef0 <usart_init+0x334>)
    5bd6:	4798      	blx	r3
    5bd8:	0002      	movs	r2, r0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
    5bda:	2805      	cmp	r0, #5
    5bdc:	d00d      	beq.n	5bfa <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5bde:	0007      	movs	r7, r0
    5be0:	3712      	adds	r7, #18
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    5be2:	0003      	movs	r3, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    5be4:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    5be6:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    5be8:	07c9      	lsls	r1, r1, #31
    5bea:	d509      	bpl.n	5c00 <usart_init+0x44>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    5bec:	b011      	add	sp, #68	; 0x44
    5bee:	bc3c      	pop	{r2, r3, r4, r5}
    5bf0:	4690      	mov	r8, r2
    5bf2:	4699      	mov	r9, r3
    5bf4:	46a2      	mov	sl, r4
    5bf6:	46ab      	mov	fp, r5
    5bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    5bfa:	2718      	movs	r7, #24
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    5bfc:	2301      	movs	r3, #1
    5bfe:	e7f1      	b.n	5be4 <usart_init+0x28>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    5c00:	6821      	ldr	r1, [r4, #0]
		return STATUS_ERR_DENIED;
    5c02:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    5c04:	0789      	lsls	r1, r1, #30
    5c06:	d4f1      	bmi.n	5bec <usart_init+0x30>
	if (sercom_index == 5) {
    5c08:	2a05      	cmp	r2, #5
    5c0a:	d049      	beq.n	5ca0 <usart_init+0xe4>
			MCLK->APBCMASK.reg |= mask;
    5c0c:	49b9      	ldr	r1, [pc, #740]	; (5ef4 <usart_init+0x338>)
    5c0e:	69c8      	ldr	r0, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
    5c10:	2201      	movs	r2, #1
    5c12:	409a      	lsls	r2, r3
    5c14:	0013      	movs	r3, r2
    5c16:	4303      	orrs	r3, r0
    5c18:	61cb      	str	r3, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    5c1a:	a90f      	add	r1, sp, #60	; 0x3c
    5c1c:	232d      	movs	r3, #45	; 0x2d
    5c1e:	4698      	mov	r8, r3
    5c20:	5cf3      	ldrb	r3, [r6, r3]
    5c22:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    5c24:	b2ff      	uxtb	r7, r7
    5c26:	0038      	movs	r0, r7
    5c28:	4bb3      	ldr	r3, [pc, #716]	; (5ef8 <usart_init+0x33c>)
    5c2a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    5c2c:	0038      	movs	r0, r7
    5c2e:	4bb3      	ldr	r3, [pc, #716]	; (5efc <usart_init+0x340>)
    5c30:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5c32:	4643      	mov	r3, r8
    5c34:	5cf0      	ldrb	r0, [r6, r3]
    5c36:	2100      	movs	r1, #0
    5c38:	4bb1      	ldr	r3, [pc, #708]	; (5f00 <usart_init+0x344>)
    5c3a:	4798      	blx	r3
	module->character_size = config->character_size;
    5c3c:	7af3      	ldrb	r3, [r6, #11]
    5c3e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    5c40:	2324      	movs	r3, #36	; 0x24
    5c42:	5cf3      	ldrb	r3, [r6, r3]
    5c44:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    5c46:	2325      	movs	r3, #37	; 0x25
    5c48:	5cf3      	ldrb	r3, [r6, r3]
    5c4a:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    5c4c:	7ef3      	ldrb	r3, [r6, #27]
    5c4e:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    5c50:	7f33      	ldrb	r3, [r6, #28]
    5c52:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5c54:	682b      	ldr	r3, [r5, #0]
    5c56:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5c58:	0018      	movs	r0, r3
    5c5a:	4ba5      	ldr	r3, [pc, #660]	; (5ef0 <usart_init+0x334>)
    5c5c:	4798      	blx	r3
	if (sercom_index == 5) {
    5c5e:	2805      	cmp	r0, #5
    5c60:	d026      	beq.n	5cb0 <usart_init+0xf4>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5c62:	3012      	adds	r0, #18
	uint16_t baud  = 0;
    5c64:	2200      	movs	r2, #0
    5c66:	230e      	movs	r3, #14
    5c68:	a906      	add	r1, sp, #24
    5c6a:	468c      	mov	ip, r1
    5c6c:	4463      	add	r3, ip
    5c6e:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    5c70:	8a32      	ldrh	r2, [r6, #16]
    5c72:	9202      	str	r2, [sp, #8]
    5c74:	2380      	movs	r3, #128	; 0x80
    5c76:	01db      	lsls	r3, r3, #7
    5c78:	429a      	cmp	r2, r3
    5c7a:	d100      	bne.n	5c7e <usart_init+0xc2>
    5c7c:	e0ab      	b.n	5dd6 <usart_init+0x21a>
    5c7e:	d919      	bls.n	5cb4 <usart_init+0xf8>
    5c80:	23c0      	movs	r3, #192	; 0xc0
    5c82:	01db      	lsls	r3, r3, #7
    5c84:	9a02      	ldr	r2, [sp, #8]
    5c86:	429a      	cmp	r2, r3
    5c88:	d100      	bne.n	5c8c <usart_init+0xd0>
    5c8a:	e09f      	b.n	5dcc <usart_init+0x210>
    5c8c:	2380      	movs	r3, #128	; 0x80
    5c8e:	021b      	lsls	r3, r3, #8
    5c90:	429a      	cmp	r2, r3
    5c92:	d000      	beq.n	5c96 <usart_init+0xda>
    5c94:	e127      	b.n	5ee6 <usart_init+0x32a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    5c96:	2303      	movs	r3, #3
    5c98:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5c9a:	2300      	movs	r3, #0
    5c9c:	9307      	str	r3, [sp, #28]
    5c9e:	e012      	b.n	5cc6 <usart_init+0x10a>
			MCLK->APBDMASK.reg |= mask;
    5ca0:	4994      	ldr	r1, [pc, #592]	; (5ef4 <usart_init+0x338>)
    5ca2:	6a08      	ldr	r0, [r1, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    5ca4:	3a04      	subs	r2, #4
    5ca6:	409a      	lsls	r2, r3
    5ca8:	0013      	movs	r3, r2
    5caa:	4303      	orrs	r3, r0
    5cac:	620b      	str	r3, [r1, #32]
    5cae:	e7b4      	b.n	5c1a <usart_init+0x5e>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    5cb0:	2018      	movs	r0, #24
    5cb2:	e7d7      	b.n	5c64 <usart_init+0xa8>
	switch (config->sample_rate) {
    5cb4:	2380      	movs	r3, #128	; 0x80
    5cb6:	019b      	lsls	r3, r3, #6
    5cb8:	429a      	cmp	r2, r3
    5cba:	d000      	beq.n	5cbe <usart_init+0x102>
    5cbc:	e113      	b.n	5ee6 <usart_init+0x32a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5cbe:	2310      	movs	r3, #16
    5cc0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5cc2:	3b0f      	subs	r3, #15
    5cc4:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    5cc6:	6833      	ldr	r3, [r6, #0]
    5cc8:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    5cca:	68f3      	ldr	r3, [r6, #12]
    5ccc:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    5cce:	6973      	ldr	r3, [r6, #20]
    5cd0:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5cd2:	7e33      	ldrb	r3, [r6, #24]
    5cd4:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5cd6:	2326      	movs	r3, #38	; 0x26
    5cd8:	5cf3      	ldrb	r3, [r6, r3]
    5cda:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    5cdc:	6873      	ldr	r3, [r6, #4]
    5cde:	4699      	mov	r9, r3
	switch (transfer_mode)
    5ce0:	2b00      	cmp	r3, #0
    5ce2:	d100      	bne.n	5ce6 <usart_init+0x12a>
    5ce4:	e09f      	b.n	5e26 <usart_init+0x26a>
    5ce6:	2380      	movs	r3, #128	; 0x80
    5ce8:	055b      	lsls	r3, r3, #21
    5cea:	4599      	cmp	r9, r3
    5cec:	d104      	bne.n	5cf8 <usart_init+0x13c>
			if (!config->use_external_clock) {
    5cee:	2327      	movs	r3, #39	; 0x27
    5cf0:	5cf3      	ldrb	r3, [r6, r3]
    5cf2:	2b00      	cmp	r3, #0
    5cf4:	d100      	bne.n	5cf8 <usart_init+0x13c>
    5cf6:	e084      	b.n	5e02 <usart_init+0x246>
	if(config->encoding_format_enable) {
    5cf8:	7e73      	ldrb	r3, [r6, #25]
    5cfa:	2b00      	cmp	r3, #0
    5cfc:	d002      	beq.n	5d04 <usart_init+0x148>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    5cfe:	7eb3      	ldrb	r3, [r6, #26]
    5d00:	4642      	mov	r2, r8
    5d02:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    5d04:	682a      	ldr	r2, [r5, #0]
    5d06:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    5d08:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    5d0a:	2b00      	cmp	r3, #0
    5d0c:	d1fc      	bne.n	5d08 <usart_init+0x14c>
	usart_hw->BAUD.reg = baud;
    5d0e:	330e      	adds	r3, #14
    5d10:	aa06      	add	r2, sp, #24
    5d12:	4694      	mov	ip, r2
    5d14:	4463      	add	r3, ip
    5d16:	881b      	ldrh	r3, [r3, #0]
    5d18:	4642      	mov	r2, r8
    5d1a:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    5d1c:	9b05      	ldr	r3, [sp, #20]
    5d1e:	9a03      	ldr	r2, [sp, #12]
    5d20:	4313      	orrs	r3, r2
    5d22:	9a04      	ldr	r2, [sp, #16]
    5d24:	4313      	orrs	r3, r2
    5d26:	464a      	mov	r2, r9
    5d28:	4313      	orrs	r3, r2
    5d2a:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5d2c:	465b      	mov	r3, fp
    5d2e:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    5d30:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5d32:	4653      	mov	r3, sl
    5d34:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    5d36:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    5d38:	2327      	movs	r3, #39	; 0x27
    5d3a:	5cf3      	ldrb	r3, [r6, r3]
    5d3c:	2b00      	cmp	r3, #0
    5d3e:	d101      	bne.n	5d44 <usart_init+0x188>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    5d40:	3304      	adds	r3, #4
    5d42:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    5d44:	7e73      	ldrb	r3, [r6, #25]
    5d46:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5d48:	7f32      	ldrb	r2, [r6, #28]
    5d4a:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    5d4c:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    5d4e:	7f72      	ldrb	r2, [r6, #29]
    5d50:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5d52:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5d54:	2224      	movs	r2, #36	; 0x24
    5d56:	5cb2      	ldrb	r2, [r6, r2]
    5d58:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    5d5a:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    5d5c:	2225      	movs	r2, #37	; 0x25
    5d5e:	5cb2      	ldrb	r2, [r6, r2]
    5d60:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5d62:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    5d64:	7ab1      	ldrb	r1, [r6, #10]
    5d66:	7af2      	ldrb	r2, [r6, #11]
    5d68:	4311      	orrs	r1, r2
    5d6a:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    5d6c:	8933      	ldrh	r3, [r6, #8]
    5d6e:	2bff      	cmp	r3, #255	; 0xff
    5d70:	d07d      	beq.n	5e6e <usart_init+0x2b2>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    5d72:	2280      	movs	r2, #128	; 0x80
    5d74:	0452      	lsls	r2, r2, #17
    5d76:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    5d78:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    5d7a:	232c      	movs	r3, #44	; 0x2c
    5d7c:	5cf3      	ldrb	r3, [r6, r3]
    5d7e:	2b00      	cmp	r3, #0
    5d80:	d103      	bne.n	5d8a <usart_init+0x1ce>
    5d82:	4b60      	ldr	r3, [pc, #384]	; (5f04 <usart_init+0x348>)
    5d84:	789b      	ldrb	r3, [r3, #2]
    5d86:	079b      	lsls	r3, r3, #30
    5d88:	d501      	bpl.n	5d8e <usart_init+0x1d2>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    5d8a:	2380      	movs	r3, #128	; 0x80
    5d8c:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    5d8e:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    5d90:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    5d92:	2b00      	cmp	r3, #0
    5d94:	d1fc      	bne.n	5d90 <usart_init+0x1d4>
	usart_hw->CTRLB.reg = ctrlb;
    5d96:	4643      	mov	r3, r8
    5d98:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5d9a:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    5d9c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    5d9e:	2b00      	cmp	r3, #0
    5da0:	d1fc      	bne.n	5d9c <usart_init+0x1e0>
	usart_hw->CTRLA.reg = ctrla;
    5da2:	4643      	mov	r3, r8
    5da4:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5da6:	ab0e      	add	r3, sp, #56	; 0x38
    5da8:	2280      	movs	r2, #128	; 0x80
    5daa:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5dac:	2200      	movs	r2, #0
    5dae:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    5db0:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    5db2:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    5db4:	6b33      	ldr	r3, [r6, #48]	; 0x30
    5db6:	930a      	str	r3, [sp, #40]	; 0x28
    5db8:	6b73      	ldr	r3, [r6, #52]	; 0x34
    5dba:	930b      	str	r3, [sp, #44]	; 0x2c
    5dbc:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    5dbe:	930c      	str	r3, [sp, #48]	; 0x30
    5dc0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    5dc2:	9302      	str	r3, [sp, #8]
    5dc4:	930d      	str	r3, [sp, #52]	; 0x34
    5dc6:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5dc8:	ae0a      	add	r6, sp, #40	; 0x28
    5dca:	e05e      	b.n	5e8a <usart_init+0x2ce>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5dcc:	2308      	movs	r3, #8
    5dce:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5dd0:	3b07      	subs	r3, #7
    5dd2:	9307      	str	r3, [sp, #28]
    5dd4:	e777      	b.n	5cc6 <usart_init+0x10a>
	ctrla = (uint32_t)config->data_order |
    5dd6:	6833      	ldr	r3, [r6, #0]
    5dd8:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    5dda:	68f3      	ldr	r3, [r6, #12]
    5ddc:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    5dde:	6973      	ldr	r3, [r6, #20]
    5de0:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5de2:	7e33      	ldrb	r3, [r6, #24]
    5de4:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5de6:	2326      	movs	r3, #38	; 0x26
    5de8:	5cf3      	ldrb	r3, [r6, r3]
    5dea:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    5dec:	6873      	ldr	r3, [r6, #4]
    5dee:	4699      	mov	r9, r3
	switch (transfer_mode)
    5df0:	2b00      	cmp	r3, #0
    5df2:	d014      	beq.n	5e1e <usart_init+0x262>
    5df4:	2380      	movs	r3, #128	; 0x80
    5df6:	055b      	lsls	r3, r3, #21
    5df8:	4599      	cmp	r9, r3
    5dfa:	d100      	bne.n	5dfe <usart_init+0x242>
    5dfc:	e777      	b.n	5cee <usart_init+0x132>
	enum status_code status_code = STATUS_OK;
    5dfe:	2000      	movs	r0, #0
    5e00:	e020      	b.n	5e44 <usart_init+0x288>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    5e02:	6a33      	ldr	r3, [r6, #32]
    5e04:	001f      	movs	r7, r3
    5e06:	b2c0      	uxtb	r0, r0
    5e08:	4b3f      	ldr	r3, [pc, #252]	; (5f08 <usart_init+0x34c>)
    5e0a:	4798      	blx	r3
    5e0c:	0001      	movs	r1, r0
    5e0e:	220e      	movs	r2, #14
    5e10:	ab06      	add	r3, sp, #24
    5e12:	469c      	mov	ip, r3
    5e14:	4462      	add	r2, ip
    5e16:	0038      	movs	r0, r7
    5e18:	4b3c      	ldr	r3, [pc, #240]	; (5f0c <usart_init+0x350>)
    5e1a:	4798      	blx	r3
    5e1c:	e012      	b.n	5e44 <usart_init+0x288>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5e1e:	2308      	movs	r3, #8
    5e20:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5e22:	2300      	movs	r3, #0
    5e24:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    5e26:	2327      	movs	r3, #39	; 0x27
    5e28:	5cf3      	ldrb	r3, [r6, r3]
    5e2a:	2b00      	cmp	r3, #0
    5e2c:	d00e      	beq.n	5e4c <usart_init+0x290>
				status_code =
    5e2e:	9b06      	ldr	r3, [sp, #24]
    5e30:	9300      	str	r3, [sp, #0]
    5e32:	9b07      	ldr	r3, [sp, #28]
    5e34:	220e      	movs	r2, #14
    5e36:	a906      	add	r1, sp, #24
    5e38:	468c      	mov	ip, r1
    5e3a:	4462      	add	r2, ip
    5e3c:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    5e3e:	6a30      	ldr	r0, [r6, #32]
    5e40:	4f33      	ldr	r7, [pc, #204]	; (5f10 <usart_init+0x354>)
    5e42:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    5e44:	2800      	cmp	r0, #0
    5e46:	d000      	beq.n	5e4a <usart_init+0x28e>
    5e48:	e6d0      	b.n	5bec <usart_init+0x30>
    5e4a:	e755      	b.n	5cf8 <usart_init+0x13c>
						_sercom_get_async_baud_val(config->baudrate,
    5e4c:	6a33      	ldr	r3, [r6, #32]
    5e4e:	001f      	movs	r7, r3
    5e50:	b2c0      	uxtb	r0, r0
    5e52:	4b2d      	ldr	r3, [pc, #180]	; (5f08 <usart_init+0x34c>)
    5e54:	4798      	blx	r3
    5e56:	0001      	movs	r1, r0
				status_code =
    5e58:	9b06      	ldr	r3, [sp, #24]
    5e5a:	9300      	str	r3, [sp, #0]
    5e5c:	9b07      	ldr	r3, [sp, #28]
    5e5e:	220e      	movs	r2, #14
    5e60:	a806      	add	r0, sp, #24
    5e62:	4684      	mov	ip, r0
    5e64:	4462      	add	r2, ip
    5e66:	0038      	movs	r0, r7
    5e68:	4f29      	ldr	r7, [pc, #164]	; (5f10 <usart_init+0x354>)
    5e6a:	47b8      	blx	r7
    5e6c:	e7ea      	b.n	5e44 <usart_init+0x288>
		if(config->lin_slave_enable) {
    5e6e:	7ef3      	ldrb	r3, [r6, #27]
    5e70:	2b00      	cmp	r3, #0
    5e72:	d082      	beq.n	5d7a <usart_init+0x1be>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    5e74:	2380      	movs	r3, #128	; 0x80
    5e76:	04db      	lsls	r3, r3, #19
    5e78:	431f      	orrs	r7, r3
    5e7a:	e77e      	b.n	5d7a <usart_init+0x1be>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5e7c:	0020      	movs	r0, r4
    5e7e:	4b25      	ldr	r3, [pc, #148]	; (5f14 <usart_init+0x358>)
    5e80:	4798      	blx	r3
    5e82:	e007      	b.n	5e94 <usart_init+0x2d8>
    5e84:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    5e86:	2f04      	cmp	r7, #4
    5e88:	d00d      	beq.n	5ea6 <usart_init+0x2ea>
    5e8a:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5e8c:	00bb      	lsls	r3, r7, #2
    5e8e:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    5e90:	2800      	cmp	r0, #0
    5e92:	d0f3      	beq.n	5e7c <usart_init+0x2c0>
		if (current_pinmux != PINMUX_UNUSED) {
    5e94:	1c43      	adds	r3, r0, #1
    5e96:	d0f5      	beq.n	5e84 <usart_init+0x2c8>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    5e98:	a90e      	add	r1, sp, #56	; 0x38
    5e9a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    5e9c:	0c00      	lsrs	r0, r0, #16
    5e9e:	b2c0      	uxtb	r0, r0
    5ea0:	4b1d      	ldr	r3, [pc, #116]	; (5f18 <usart_init+0x35c>)
    5ea2:	4798      	blx	r3
    5ea4:	e7ee      	b.n	5e84 <usart_init+0x2c8>
		module->callback[i]            = NULL;
    5ea6:	2300      	movs	r3, #0
    5ea8:	60eb      	str	r3, [r5, #12]
    5eaa:	612b      	str	r3, [r5, #16]
    5eac:	616b      	str	r3, [r5, #20]
    5eae:	61ab      	str	r3, [r5, #24]
    5eb0:	61eb      	str	r3, [r5, #28]
    5eb2:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    5eb4:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    5eb6:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    5eb8:	2200      	movs	r2, #0
    5eba:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    5ebc:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    5ebe:	3330      	adds	r3, #48	; 0x30
    5ec0:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    5ec2:	3301      	adds	r3, #1
    5ec4:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    5ec6:	3301      	adds	r3, #1
    5ec8:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    5eca:	3301      	adds	r3, #1
    5ecc:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    5ece:	6828      	ldr	r0, [r5, #0]
    5ed0:	4b07      	ldr	r3, [pc, #28]	; (5ef0 <usart_init+0x334>)
    5ed2:	4798      	blx	r3
    5ed4:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    5ed6:	4911      	ldr	r1, [pc, #68]	; (5f1c <usart_init+0x360>)
    5ed8:	4b11      	ldr	r3, [pc, #68]	; (5f20 <usart_init+0x364>)
    5eda:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    5edc:	00a4      	lsls	r4, r4, #2
    5ede:	4b11      	ldr	r3, [pc, #68]	; (5f24 <usart_init+0x368>)
    5ee0:	50e5      	str	r5, [r4, r3]
	return status_code;
    5ee2:	2000      	movs	r0, #0
    5ee4:	e682      	b.n	5bec <usart_init+0x30>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5ee6:	2310      	movs	r3, #16
    5ee8:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5eea:	2300      	movs	r3, #0
    5eec:	9307      	str	r3, [sp, #28]
    5eee:	e6ea      	b.n	5cc6 <usart_init+0x10a>
    5ef0:	00005675 	.word	0x00005675
    5ef4:	40000400 	.word	0x40000400
    5ef8:	0000696d 	.word	0x0000696d
    5efc:	000068fd 	.word	0x000068fd
    5f00:	000054cd 	.word	0x000054cd
    5f04:	41002000 	.word	0x41002000
    5f08:	00006991 	.word	0x00006991
    5f0c:	0000540f 	.word	0x0000540f
    5f10:	00005439 	.word	0x00005439
    5f14:	00005519 	.word	0x00005519
    5f18:	00006a69 	.word	0x00006a69
    5f1c:	000061a5 	.word	0x000061a5
    5f20:	000056b1 	.word	0x000056b1
    5f24:	20001f14 	.word	0x20001f14

00005f28 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    5f28:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    5f2a:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    5f2c:	2a00      	cmp	r2, #0
    5f2e:	d101      	bne.n	5f34 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    5f30:	0018      	movs	r0, r3
    5f32:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    5f34:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    5f36:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    5f38:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    5f3a:	2a00      	cmp	r2, #0
    5f3c:	d1f8      	bne.n	5f30 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    5f3e:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    5f40:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    5f42:	2a00      	cmp	r2, #0
    5f44:	d1fc      	bne.n	5f40 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    5f46:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    5f48:	2102      	movs	r1, #2
    5f4a:	7e1a      	ldrb	r2, [r3, #24]
    5f4c:	420a      	tst	r2, r1
    5f4e:	d0fc      	beq.n	5f4a <usart_write_wait+0x22>
	return STATUS_OK;
    5f50:	2300      	movs	r3, #0
    5f52:	e7ed      	b.n	5f30 <usart_write_wait+0x8>

00005f54 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    5f54:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    5f56:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    5f58:	2a00      	cmp	r2, #0
    5f5a:	d101      	bne.n	5f60 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    5f5c:	0018      	movs	r0, r3
    5f5e:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    5f60:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    5f62:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    5f64:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    5f66:	2a00      	cmp	r2, #0
    5f68:	d1f8      	bne.n	5f5c <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    5f6a:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    5f6c:	7e10      	ldrb	r0, [r2, #24]
    5f6e:	0740      	lsls	r0, r0, #29
    5f70:	d5f4      	bpl.n	5f5c <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    5f72:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    5f74:	2b00      	cmp	r3, #0
    5f76:	d1fc      	bne.n	5f72 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    5f78:	8b53      	ldrh	r3, [r2, #26]
    5f7a:	b2db      	uxtb	r3, r3
	if (error_code) {
    5f7c:	0698      	lsls	r0, r3, #26
    5f7e:	d01d      	beq.n	5fbc <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    5f80:	0798      	lsls	r0, r3, #30
    5f82:	d503      	bpl.n	5f8c <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    5f84:	2302      	movs	r3, #2
    5f86:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    5f88:	3318      	adds	r3, #24
    5f8a:	e7e7      	b.n	5f5c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    5f8c:	0758      	lsls	r0, r3, #29
    5f8e:	d503      	bpl.n	5f98 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    5f90:	2304      	movs	r3, #4
    5f92:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    5f94:	331a      	adds	r3, #26
    5f96:	e7e1      	b.n	5f5c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    5f98:	07d8      	lsls	r0, r3, #31
    5f9a:	d503      	bpl.n	5fa4 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    5f9c:	2301      	movs	r3, #1
    5f9e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    5fa0:	3312      	adds	r3, #18
    5fa2:	e7db      	b.n	5f5c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    5fa4:	06d8      	lsls	r0, r3, #27
    5fa6:	d503      	bpl.n	5fb0 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    5fa8:	2310      	movs	r3, #16
    5faa:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    5fac:	3332      	adds	r3, #50	; 0x32
    5fae:	e7d5      	b.n	5f5c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    5fb0:	069b      	lsls	r3, r3, #26
    5fb2:	d503      	bpl.n	5fbc <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    5fb4:	2320      	movs	r3, #32
    5fb6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    5fb8:	3321      	adds	r3, #33	; 0x21
    5fba:	e7cf      	b.n	5f5c <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    5fbc:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    5fbe:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    5fc0:	2300      	movs	r3, #0
    5fc2:	e7cb      	b.n	5f5c <usart_read_wait+0x8>

00005fc4 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    5fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5fc6:	46ce      	mov	lr, r9
    5fc8:	4647      	mov	r7, r8
    5fca:	b580      	push	{r7, lr}
    5fcc:	b083      	sub	sp, #12
    5fce:	0005      	movs	r5, r0
    5fd0:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    5fd2:	2017      	movs	r0, #23
	if (length == 0) {
    5fd4:	2a00      	cmp	r2, #0
    5fd6:	d104      	bne.n	5fe2 <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    5fd8:	b003      	add	sp, #12
    5fda:	bc0c      	pop	{r2, r3}
    5fdc:	4690      	mov	r8, r2
    5fde:	4699      	mov	r9, r3
    5fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    5fe2:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    5fe4:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    5fe6:	2b00      	cmp	r3, #0
    5fe8:	d0f6      	beq.n	5fd8 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
    5fea:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    5fec:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    5fee:	2b00      	cmp	r3, #0
    5ff0:	d1fc      	bne.n	5fec <usart_write_buffer_wait+0x28>
	while (length--) {
    5ff2:	3a01      	subs	r2, #1
    5ff4:	b293      	uxth	r3, r2
    5ff6:	4699      	mov	r9, r3
    5ff8:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    5ffa:	2701      	movs	r7, #1
	while (length--) {
    5ffc:	4b1f      	ldr	r3, [pc, #124]	; (607c <usart_write_buffer_wait+0xb8>)
    5ffe:	4698      	mov	r8, r3
    6000:	e011      	b.n	6026 <usart_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
    6002:	1c73      	adds	r3, r6, #1
    6004:	b29b      	uxth	r3, r3
    6006:	9a01      	ldr	r2, [sp, #4]
    6008:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    600a:	796a      	ldrb	r2, [r5, #5]
    600c:	2a01      	cmp	r2, #1
    600e:	d017      	beq.n	6040 <usart_write_buffer_wait+0x7c>
		uint16_t data_to_send = tx_data[tx_pos++];
    6010:	b289      	uxth	r1, r1
    6012:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
    6014:	0028      	movs	r0, r5
    6016:	4b1a      	ldr	r3, [pc, #104]	; (6080 <usart_write_buffer_wait+0xbc>)
    6018:	4798      	blx	r3
	while (length--) {
    601a:	464b      	mov	r3, r9
    601c:	3b01      	subs	r3, #1
    601e:	b29b      	uxth	r3, r3
    6020:	4699      	mov	r9, r3
    6022:	4543      	cmp	r3, r8
    6024:	d013      	beq.n	604e <usart_write_buffer_wait+0x8a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    6026:	7e23      	ldrb	r3, [r4, #24]
    6028:	423b      	tst	r3, r7
    602a:	d1ea      	bne.n	6002 <usart_write_buffer_wait+0x3e>
    602c:	4b13      	ldr	r3, [pc, #76]	; (607c <usart_write_buffer_wait+0xb8>)
    602e:	7e22      	ldrb	r2, [r4, #24]
    6030:	423a      	tst	r2, r7
    6032:	d1e6      	bne.n	6002 <usart_write_buffer_wait+0x3e>
			} else if (i == USART_TIMEOUT) {
    6034:	2b01      	cmp	r3, #1
    6036:	d019      	beq.n	606c <usart_write_buffer_wait+0xa8>
    6038:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    603a:	2b00      	cmp	r3, #0
    603c:	d1f7      	bne.n	602e <usart_write_buffer_wait+0x6a>
    603e:	e7e0      	b.n	6002 <usart_write_buffer_wait+0x3e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    6040:	3602      	adds	r6, #2
    6042:	b2b6      	uxth	r6, r6
    6044:	9a01      	ldr	r2, [sp, #4]
    6046:	5cd3      	ldrb	r3, [r2, r3]
    6048:	021b      	lsls	r3, r3, #8
    604a:	4319      	orrs	r1, r3
    604c:	e7e2      	b.n	6014 <usart_write_buffer_wait+0x50>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    604e:	7e23      	ldrb	r3, [r4, #24]
    6050:	079b      	lsls	r3, r3, #30
    6052:	d40d      	bmi.n	6070 <usart_write_buffer_wait+0xac>
    6054:	4b09      	ldr	r3, [pc, #36]	; (607c <usart_write_buffer_wait+0xb8>)
    6056:	2102      	movs	r1, #2
    6058:	7e22      	ldrb	r2, [r4, #24]
    605a:	420a      	tst	r2, r1
    605c:	d10a      	bne.n	6074 <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
    605e:	2b01      	cmp	r3, #1
    6060:	d00a      	beq.n	6078 <usart_write_buffer_wait+0xb4>
    6062:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    6064:	2b00      	cmp	r3, #0
    6066:	d1f7      	bne.n	6058 <usart_write_buffer_wait+0x94>
	return STATUS_OK;
    6068:	2000      	movs	r0, #0
    606a:	e7b5      	b.n	5fd8 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    606c:	2012      	movs	r0, #18
    606e:	e7b3      	b.n	5fd8 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    6070:	2000      	movs	r0, #0
    6072:	e7b1      	b.n	5fd8 <usart_write_buffer_wait+0x14>
    6074:	2000      	movs	r0, #0
    6076:	e7af      	b.n	5fd8 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    6078:	2012      	movs	r0, #18
    607a:	e7ad      	b.n	5fd8 <usart_write_buffer_wait+0x14>
    607c:	0000ffff 	.word	0x0000ffff
    6080:	00005f29 	.word	0x00005f29

00006084 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    6084:	b5f0      	push	{r4, r5, r6, r7, lr}
    6086:	46d6      	mov	lr, sl
    6088:	b500      	push	{lr}
    608a:	b084      	sub	sp, #16
    608c:	0004      	movs	r4, r0
    608e:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    6090:	2017      	movs	r0, #23
	if (length == 0) {
    6092:	2a00      	cmp	r2, #0
    6094:	d103      	bne.n	609e <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    6096:	b004      	add	sp, #16
    6098:	bc04      	pop	{r2}
    609a:	4692      	mov	sl, r2
    609c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    609e:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    60a0:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    60a2:	2b00      	cmp	r3, #0
    60a4:	d0f7      	beq.n	6096 <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    60a6:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    60a8:	3a01      	subs	r2, #1
    60aa:	b293      	uxth	r3, r2
    60ac:	469a      	mov	sl, r3
    60ae:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    60b0:	2704      	movs	r7, #4
    60b2:	e019      	b.n	60e8 <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    60b4:	2300      	movs	r3, #0
    60b6:	aa02      	add	r2, sp, #8
    60b8:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    60ba:	1d91      	adds	r1, r2, #6
    60bc:	0020      	movs	r0, r4
    60be:	4b15      	ldr	r3, [pc, #84]	; (6114 <usart_read_buffer_wait+0x90>)
    60c0:	4798      	blx	r3
		if (retval != STATUS_OK) {
    60c2:	2800      	cmp	r0, #0
    60c4:	d1e7      	bne.n	6096 <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    60c6:	1c69      	adds	r1, r5, #1
    60c8:	b289      	uxth	r1, r1
    60ca:	ab02      	add	r3, sp, #8
    60cc:	88db      	ldrh	r3, [r3, #6]
    60ce:	9a01      	ldr	r2, [sp, #4]
    60d0:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    60d2:	7962      	ldrb	r2, [r4, #5]
    60d4:	2a01      	cmp	r2, #1
    60d6:	d014      	beq.n	6102 <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    60d8:	000d      	movs	r5, r1
	while (length--) {
    60da:	4653      	mov	r3, sl
    60dc:	3b01      	subs	r3, #1
    60de:	b29b      	uxth	r3, r3
    60e0:	469a      	mov	sl, r3
    60e2:	4b0d      	ldr	r3, [pc, #52]	; (6118 <usart_read_buffer_wait+0x94>)
    60e4:	459a      	cmp	sl, r3
    60e6:	d0d6      	beq.n	6096 <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    60e8:	7e33      	ldrb	r3, [r6, #24]
    60ea:	423b      	tst	r3, r7
    60ec:	d1e2      	bne.n	60b4 <usart_read_buffer_wait+0x30>
    60ee:	4b0a      	ldr	r3, [pc, #40]	; (6118 <usart_read_buffer_wait+0x94>)
    60f0:	7e32      	ldrb	r2, [r6, #24]
    60f2:	423a      	tst	r2, r7
    60f4:	d1de      	bne.n	60b4 <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    60f6:	2b01      	cmp	r3, #1
    60f8:	d009      	beq.n	610e <usart_read_buffer_wait+0x8a>
    60fa:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    60fc:	2b00      	cmp	r3, #0
    60fe:	d1f7      	bne.n	60f0 <usart_read_buffer_wait+0x6c>
    6100:	e7d8      	b.n	60b4 <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    6102:	3502      	adds	r5, #2
    6104:	b2ad      	uxth	r5, r5
    6106:	0a1b      	lsrs	r3, r3, #8
    6108:	9a01      	ldr	r2, [sp, #4]
    610a:	5453      	strb	r3, [r2, r1]
    610c:	e7e5      	b.n	60da <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    610e:	2012      	movs	r0, #18
    6110:	e7c1      	b.n	6096 <usart_read_buffer_wait+0x12>
    6112:	46c0      	nop			; (mov r8, r8)
    6114:	00005f55 	.word	0x00005f55
    6118:	0000ffff 	.word	0x0000ffff

0000611c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    611c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    611e:	0004      	movs	r4, r0
    6120:	000d      	movs	r5, r1
    6122:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    6124:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    6126:	4b0f      	ldr	r3, [pc, #60]	; (6164 <_usart_read_buffer+0x48>)
    6128:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    612a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    612c:	b29b      	uxth	r3, r3
    612e:	2b00      	cmp	r3, #0
    6130:	d003      	beq.n	613a <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    6132:	4b0d      	ldr	r3, [pc, #52]	; (6168 <_usart_read_buffer+0x4c>)
    6134:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    6136:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    6138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    613a:	85a6      	strh	r6, [r4, #44]	; 0x2c
    613c:	4b0a      	ldr	r3, [pc, #40]	; (6168 <_usart_read_buffer+0x4c>)
    613e:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    6140:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    6142:	2205      	movs	r2, #5
    6144:	2332      	movs	r3, #50	; 0x32
    6146:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    6148:	3b2e      	subs	r3, #46	; 0x2e
    614a:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    614c:	7a23      	ldrb	r3, [r4, #8]
    614e:	2b00      	cmp	r3, #0
    6150:	d001      	beq.n	6156 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    6152:	2320      	movs	r3, #32
    6154:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    6156:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    6158:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    615a:	2b00      	cmp	r3, #0
    615c:	d0ec      	beq.n	6138 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    615e:	2308      	movs	r3, #8
    6160:	75bb      	strb	r3, [r7, #22]
    6162:	e7e9      	b.n	6138 <_usart_read_buffer+0x1c>
    6164:	000044f9 	.word	0x000044f9
    6168:	00004539 	.word	0x00004539

0000616c <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    616c:	1c93      	adds	r3, r2, #2
    616e:	009b      	lsls	r3, r3, #2
    6170:	18c3      	adds	r3, r0, r3
    6172:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    6174:	2130      	movs	r1, #48	; 0x30
    6176:	2301      	movs	r3, #1
    6178:	4093      	lsls	r3, r2
    617a:	001a      	movs	r2, r3
    617c:	5c43      	ldrb	r3, [r0, r1]
    617e:	4313      	orrs	r3, r2
    6180:	5443      	strb	r3, [r0, r1]
}
    6182:	4770      	bx	lr

00006184 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    6184:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    6186:	2317      	movs	r3, #23
	if (length == 0) {
    6188:	2a00      	cmp	r2, #0
    618a:	d101      	bne.n	6190 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    618c:	0018      	movs	r0, r3
    618e:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    6190:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    6192:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    6194:	2c00      	cmp	r4, #0
    6196:	d0f9      	beq.n	618c <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    6198:	4b01      	ldr	r3, [pc, #4]	; (61a0 <usart_read_buffer_job+0x1c>)
    619a:	4798      	blx	r3
    619c:	0003      	movs	r3, r0
    619e:	e7f5      	b.n	618c <usart_read_buffer_job+0x8>
    61a0:	0000611d 	.word	0x0000611d

000061a4 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    61a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    61a6:	0080      	lsls	r0, r0, #2
    61a8:	4b62      	ldr	r3, [pc, #392]	; (6334 <_usart_interrupt_handler+0x190>)
    61aa:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    61ac:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    61ae:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    61b0:	2b00      	cmp	r3, #0
    61b2:	d1fc      	bne.n	61ae <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    61b4:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    61b6:	7da6      	ldrb	r6, [r4, #22]
    61b8:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    61ba:	2330      	movs	r3, #48	; 0x30
    61bc:	5ceb      	ldrb	r3, [r5, r3]
    61be:	2231      	movs	r2, #49	; 0x31
    61c0:	5caf      	ldrb	r7, [r5, r2]
    61c2:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    61c4:	07f3      	lsls	r3, r6, #31
    61c6:	d522      	bpl.n	620e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    61c8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    61ca:	b29b      	uxth	r3, r3
    61cc:	2b00      	cmp	r3, #0
    61ce:	d01c      	beq.n	620a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    61d0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    61d2:	7813      	ldrb	r3, [r2, #0]
    61d4:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    61d6:	1c51      	adds	r1, r2, #1
    61d8:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    61da:	7969      	ldrb	r1, [r5, #5]
    61dc:	2901      	cmp	r1, #1
    61de:	d00e      	beq.n	61fe <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    61e0:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    61e2:	05db      	lsls	r3, r3, #23
    61e4:	0ddb      	lsrs	r3, r3, #23
    61e6:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    61e8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    61ea:	3b01      	subs	r3, #1
    61ec:	b29b      	uxth	r3, r3
    61ee:	85eb      	strh	r3, [r5, #46]	; 0x2e
    61f0:	2b00      	cmp	r3, #0
    61f2:	d10c      	bne.n	620e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    61f4:	3301      	adds	r3, #1
    61f6:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    61f8:	3301      	adds	r3, #1
    61fa:	75a3      	strb	r3, [r4, #22]
    61fc:	e007      	b.n	620e <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    61fe:	7851      	ldrb	r1, [r2, #1]
    6200:	0209      	lsls	r1, r1, #8
    6202:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    6204:	3202      	adds	r2, #2
    6206:	62aa      	str	r2, [r5, #40]	; 0x28
    6208:	e7eb      	b.n	61e2 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    620a:	2301      	movs	r3, #1
    620c:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    620e:	07b3      	lsls	r3, r6, #30
    6210:	d506      	bpl.n	6220 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    6212:	2302      	movs	r3, #2
    6214:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    6216:	2200      	movs	r2, #0
    6218:	3331      	adds	r3, #49	; 0x31
    621a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    621c:	07fb      	lsls	r3, r7, #31
    621e:	d41a      	bmi.n	6256 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    6220:	0773      	lsls	r3, r6, #29
    6222:	d565      	bpl.n	62f0 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    6224:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    6226:	b29b      	uxth	r3, r3
    6228:	2b00      	cmp	r3, #0
    622a:	d05f      	beq.n	62ec <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    622c:	8b63      	ldrh	r3, [r4, #26]
    622e:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    6230:	071a      	lsls	r2, r3, #28
    6232:	d414      	bmi.n	625e <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    6234:	223f      	movs	r2, #63	; 0x3f
    6236:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    6238:	2b00      	cmp	r3, #0
    623a:	d034      	beq.n	62a6 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    623c:	079a      	lsls	r2, r3, #30
    623e:	d511      	bpl.n	6264 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    6240:	221a      	movs	r2, #26
    6242:	2332      	movs	r3, #50	; 0x32
    6244:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    6246:	3b30      	subs	r3, #48	; 0x30
    6248:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    624a:	077b      	lsls	r3, r7, #29
    624c:	d550      	bpl.n	62f0 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    624e:	0028      	movs	r0, r5
    6250:	696b      	ldr	r3, [r5, #20]
    6252:	4798      	blx	r3
    6254:	e04c      	b.n	62f0 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    6256:	0028      	movs	r0, r5
    6258:	68eb      	ldr	r3, [r5, #12]
    625a:	4798      	blx	r3
    625c:	e7e0      	b.n	6220 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    625e:	2237      	movs	r2, #55	; 0x37
    6260:	4013      	ands	r3, r2
    6262:	e7e9      	b.n	6238 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    6264:	075a      	lsls	r2, r3, #29
    6266:	d505      	bpl.n	6274 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    6268:	221e      	movs	r2, #30
    626a:	2332      	movs	r3, #50	; 0x32
    626c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    626e:	3b2e      	subs	r3, #46	; 0x2e
    6270:	8363      	strh	r3, [r4, #26]
    6272:	e7ea      	b.n	624a <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    6274:	07da      	lsls	r2, r3, #31
    6276:	d505      	bpl.n	6284 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    6278:	2213      	movs	r2, #19
    627a:	2332      	movs	r3, #50	; 0x32
    627c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    627e:	3b31      	subs	r3, #49	; 0x31
    6280:	8363      	strh	r3, [r4, #26]
    6282:	e7e2      	b.n	624a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    6284:	06da      	lsls	r2, r3, #27
    6286:	d505      	bpl.n	6294 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    6288:	2242      	movs	r2, #66	; 0x42
    628a:	2332      	movs	r3, #50	; 0x32
    628c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    628e:	3b22      	subs	r3, #34	; 0x22
    6290:	8363      	strh	r3, [r4, #26]
    6292:	e7da      	b.n	624a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    6294:	2220      	movs	r2, #32
    6296:	421a      	tst	r2, r3
    6298:	d0d7      	beq.n	624a <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    629a:	3221      	adds	r2, #33	; 0x21
    629c:	2332      	movs	r3, #50	; 0x32
    629e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    62a0:	3b12      	subs	r3, #18
    62a2:	8363      	strh	r3, [r4, #26]
    62a4:	e7d1      	b.n	624a <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    62a6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    62a8:	05db      	lsls	r3, r3, #23
    62aa:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    62ac:	b2da      	uxtb	r2, r3
    62ae:	6a69      	ldr	r1, [r5, #36]	; 0x24
    62b0:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    62b2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    62b4:	1c51      	adds	r1, r2, #1
    62b6:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    62b8:	7969      	ldrb	r1, [r5, #5]
    62ba:	2901      	cmp	r1, #1
    62bc:	d010      	beq.n	62e0 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    62be:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    62c0:	3b01      	subs	r3, #1
    62c2:	b29b      	uxth	r3, r3
    62c4:	85ab      	strh	r3, [r5, #44]	; 0x2c
    62c6:	2b00      	cmp	r3, #0
    62c8:	d112      	bne.n	62f0 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    62ca:	3304      	adds	r3, #4
    62cc:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    62ce:	2200      	movs	r2, #0
    62d0:	332e      	adds	r3, #46	; 0x2e
    62d2:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    62d4:	07bb      	lsls	r3, r7, #30
    62d6:	d50b      	bpl.n	62f0 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    62d8:	0028      	movs	r0, r5
    62da:	692b      	ldr	r3, [r5, #16]
    62dc:	4798      	blx	r3
    62de:	e007      	b.n	62f0 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    62e0:	0a1b      	lsrs	r3, r3, #8
    62e2:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    62e4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    62e6:	3301      	adds	r3, #1
    62e8:	626b      	str	r3, [r5, #36]	; 0x24
    62ea:	e7e8      	b.n	62be <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    62ec:	2304      	movs	r3, #4
    62ee:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    62f0:	06f3      	lsls	r3, r6, #27
    62f2:	d504      	bpl.n	62fe <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    62f4:	2310      	movs	r3, #16
    62f6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    62f8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    62fa:	06fb      	lsls	r3, r7, #27
    62fc:	d40e      	bmi.n	631c <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    62fe:	06b3      	lsls	r3, r6, #26
    6300:	d504      	bpl.n	630c <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    6302:	2320      	movs	r3, #32
    6304:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    6306:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    6308:	073b      	lsls	r3, r7, #28
    630a:	d40b      	bmi.n	6324 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    630c:	0733      	lsls	r3, r6, #28
    630e:	d504      	bpl.n	631a <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    6310:	2308      	movs	r3, #8
    6312:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    6314:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    6316:	06bb      	lsls	r3, r7, #26
    6318:	d408      	bmi.n	632c <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    631a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    631c:	0028      	movs	r0, r5
    631e:	69eb      	ldr	r3, [r5, #28]
    6320:	4798      	blx	r3
    6322:	e7ec      	b.n	62fe <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    6324:	0028      	movs	r0, r5
    6326:	69ab      	ldr	r3, [r5, #24]
    6328:	4798      	blx	r3
    632a:	e7ef      	b.n	630c <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    632c:	6a2b      	ldr	r3, [r5, #32]
    632e:	0028      	movs	r0, r5
    6330:	4798      	blx	r3
}
    6332:	e7f2      	b.n	631a <_usart_interrupt_handler+0x176>
    6334:	20001f14 	.word	0x20001f14

00006338 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    6338:	b510      	push	{r4, lr}
	switch (clock_source) {
    633a:	2808      	cmp	r0, #8
    633c:	d803      	bhi.n	6346 <system_clock_source_get_hz+0xe>
    633e:	0080      	lsls	r0, r0, #2
    6340:	4b1c      	ldr	r3, [pc, #112]	; (63b4 <system_clock_source_get_hz+0x7c>)
    6342:	581b      	ldr	r3, [r3, r0]
    6344:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    6346:	2000      	movs	r0, #0
    6348:	e032      	b.n	63b0 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    634a:	4b1b      	ldr	r3, [pc, #108]	; (63b8 <system_clock_source_get_hz+0x80>)
    634c:	6918      	ldr	r0, [r3, #16]
    634e:	e02f      	b.n	63b0 <system_clock_source_get_hz+0x78>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    6350:	4b1a      	ldr	r3, [pc, #104]	; (63bc <system_clock_source_get_hz+0x84>)
    6352:	7d18      	ldrb	r0, [r3, #20]
    6354:	0700      	lsls	r0, r0, #28
    6356:	0f80      	lsrs	r0, r0, #30
    6358:	1c43      	adds	r3, r0, #1
    635a:	4819      	ldr	r0, [pc, #100]	; (63c0 <system_clock_source_get_hz+0x88>)
    635c:	4358      	muls	r0, r3
    635e:	e027      	b.n	63b0 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    6360:	4b15      	ldr	r3, [pc, #84]	; (63b8 <system_clock_source_get_hz+0x80>)
    6362:	6958      	ldr	r0, [r3, #20]
    6364:	e024      	b.n	63b0 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    6366:	4b14      	ldr	r3, [pc, #80]	; (63b8 <system_clock_source_get_hz+0x80>)
    6368:	681b      	ldr	r3, [r3, #0]
			return 0;
    636a:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    636c:	079b      	lsls	r3, r3, #30
    636e:	d51f      	bpl.n	63b0 <system_clock_source_get_hz+0x78>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    6370:	4912      	ldr	r1, [pc, #72]	; (63bc <system_clock_source_get_hz+0x84>)
    6372:	2280      	movs	r2, #128	; 0x80
    6374:	0052      	lsls	r2, r2, #1
    6376:	68cb      	ldr	r3, [r1, #12]
    6378:	4213      	tst	r3, r2
    637a:	d0fc      	beq.n	6376 <system_clock_source_get_hz+0x3e>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    637c:	4b0e      	ldr	r3, [pc, #56]	; (63b8 <system_clock_source_get_hz+0x80>)
    637e:	681b      	ldr	r3, [r3, #0]
    6380:	075b      	lsls	r3, r3, #29
    6382:	d401      	bmi.n	6388 <system_clock_source_get_hz+0x50>
		return 48000000UL;
    6384:	480f      	ldr	r0, [pc, #60]	; (63c4 <system_clock_source_get_hz+0x8c>)
    6386:	e013      	b.n	63b0 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    6388:	2000      	movs	r0, #0
    638a:	4b0f      	ldr	r3, [pc, #60]	; (63c8 <system_clock_source_get_hz+0x90>)
    638c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    638e:	4b0a      	ldr	r3, [pc, #40]	; (63b8 <system_clock_source_get_hz+0x80>)
    6390:	689b      	ldr	r3, [r3, #8]
    6392:	041b      	lsls	r3, r3, #16
    6394:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    6396:	4358      	muls	r0, r3
    6398:	e00a      	b.n	63b0 <system_clock_source_get_hz+0x78>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    639a:	2328      	movs	r3, #40	; 0x28
    639c:	4a07      	ldr	r2, [pc, #28]	; (63bc <system_clock_source_get_hz+0x84>)
    639e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    63a0:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    63a2:	079b      	lsls	r3, r3, #30
    63a4:	d504      	bpl.n	63b0 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    63a6:	4b04      	ldr	r3, [pc, #16]	; (63b8 <system_clock_source_get_hz+0x80>)
    63a8:	68d8      	ldr	r0, [r3, #12]
    63aa:	e001      	b.n	63b0 <system_clock_source_get_hz+0x78>
		return 32768UL;
    63ac:	2080      	movs	r0, #128	; 0x80
    63ae:	0200      	lsls	r0, r0, #8
	}
}
    63b0:	bd10      	pop	{r4, pc}
    63b2:	46c0      	nop			; (mov r8, r8)
    63b4:	000175cc 	.word	0x000175cc
    63b8:	200000d8 	.word	0x200000d8
    63bc:	40000c00 	.word	0x40000c00
    63c0:	003d0900 	.word	0x003d0900
    63c4:	02dc6c00 	.word	0x02dc6c00
    63c8:	00006991 	.word	0x00006991

000063cc <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
    63cc:	b570      	push	{r4, r5, r6, lr}
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
    63ce:	4c0b      	ldr	r4, [pc, #44]	; (63fc <system_clock_source_osc16m_set_config+0x30>)
    63d0:	7d23      	ldrb	r3, [r4, #20]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
	temp.bit.ONDEMAND = config->on_demand;
    63d2:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;
    63d4:	7846      	ldrb	r6, [r0, #1]

	OSCCTRL->OSC16MCTRL = temp;
    63d6:	7802      	ldrb	r2, [r0, #0]
    63d8:	2103      	movs	r1, #3
    63da:	4011      	ands	r1, r2
    63dc:	0089      	lsls	r1, r1, #2
    63de:	220c      	movs	r2, #12
    63e0:	4393      	bics	r3, r2
    63e2:	430b      	orrs	r3, r1
    63e4:	3a0b      	subs	r2, #11
    63e6:	4032      	ands	r2, r6
    63e8:	0192      	lsls	r2, r2, #6
    63ea:	2140      	movs	r1, #64	; 0x40
    63ec:	438b      	bics	r3, r1
    63ee:	4313      	orrs	r3, r2
    63f0:	01ed      	lsls	r5, r5, #7
    63f2:	227f      	movs	r2, #127	; 0x7f
    63f4:	4013      	ands	r3, r2
    63f6:	432b      	orrs	r3, r5
    63f8:	7523      	strb	r3, [r4, #20]
}
    63fa:	bd70      	pop	{r4, r5, r6, pc}
    63fc:	40000c00 	.word	0x40000c00

00006400 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    6400:	b5f0      	push	{r4, r5, r6, r7, lr}
    6402:	46d6      	mov	lr, sl
    6404:	464f      	mov	r7, r9
    6406:	4646      	mov	r6, r8
    6408:	b5c0      	push	{r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    640a:	4b20      	ldr	r3, [pc, #128]	; (648c <system_clock_source_xosc32k_set_config+0x8c>)
    640c:	469a      	mov	sl, r3
    640e:	695b      	ldr	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    6410:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    6412:	7801      	ldrb	r1, [r0, #0]
    6414:	424c      	negs	r4, r1
    6416:	414c      	adcs	r4, r1
    6418:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    641a:	7881      	ldrb	r1, [r0, #2]
    641c:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
    641e:	78c1      	ldrb	r1, [r0, #3]
    6420:	4688      	mov	r8, r1

	temp.bit.ONDEMAND = config->on_demand;
    6422:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    6424:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
    6426:	7a84      	ldrb	r4, [r0, #10]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    6428:	6840      	ldr	r0, [r0, #4]
    642a:	4919      	ldr	r1, [pc, #100]	; (6490 <system_clock_source_xosc32k_set_config+0x90>)
    642c:	6148      	str	r0, [r1, #20]

	OSC32KCTRL->XOSC32K = temp;
    642e:	2101      	movs	r1, #1
    6430:	4648      	mov	r0, r9
    6432:	0080      	lsls	r0, r0, #2
    6434:	2204      	movs	r2, #4
    6436:	4393      	bics	r3, r2
    6438:	4303      	orrs	r3, r0
    643a:	4640      	mov	r0, r8
    643c:	4008      	ands	r0, r1
    643e:	00c0      	lsls	r0, r0, #3
    6440:	3204      	adds	r2, #4
    6442:	4393      	bics	r3, r2
    6444:	4303      	orrs	r3, r0
    6446:	4660      	mov	r0, ip
    6448:	4008      	ands	r0, r1
    644a:	0100      	lsls	r0, r0, #4
    644c:	3208      	adds	r2, #8
    644e:	4393      	bics	r3, r2
    6450:	4303      	orrs	r3, r0
    6452:	400f      	ands	r7, r1
    6454:	01bf      	lsls	r7, r7, #6
    6456:	2040      	movs	r0, #64	; 0x40
    6458:	4383      	bics	r3, r0
    645a:	433b      	orrs	r3, r7
    645c:	400e      	ands	r6, r1
    645e:	01f6      	lsls	r6, r6, #7
    6460:	3040      	adds	r0, #64	; 0x40
    6462:	4383      	bics	r3, r0
    6464:	4333      	orrs	r3, r6
    6466:	3879      	subs	r0, #121	; 0x79
    6468:	4005      	ands	r5, r0
    646a:	022d      	lsls	r5, r5, #8
    646c:	4809      	ldr	r0, [pc, #36]	; (6494 <system_clock_source_xosc32k_set_config+0x94>)
    646e:	4003      	ands	r3, r0
    6470:	432b      	orrs	r3, r5
    6472:	4021      	ands	r1, r4
    6474:	0309      	lsls	r1, r1, #12
    6476:	4808      	ldr	r0, [pc, #32]	; (6498 <system_clock_source_xosc32k_set_config+0x98>)
    6478:	4003      	ands	r3, r0
    647a:	430b      	orrs	r3, r1
    647c:	4652      	mov	r2, sl
    647e:	6153      	str	r3, [r2, #20]
}
    6480:	bc1c      	pop	{r2, r3, r4}
    6482:	4690      	mov	r8, r2
    6484:	4699      	mov	r9, r3
    6486:	46a2      	mov	sl, r4
    6488:	bdf0      	pop	{r4, r5, r6, r7, pc}
    648a:	46c0      	nop			; (mov r8, r8)
    648c:	40001000 	.word	0x40001000
    6490:	200000d8 	.word	0x200000d8
    6494:	fffff8ff 	.word	0xfffff8ff
    6498:	ffffefff 	.word	0xffffefff

0000649c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    649c:	2808      	cmp	r0, #8
    649e:	d803      	bhi.n	64a8 <system_clock_source_enable+0xc>
    64a0:	0080      	lsls	r0, r0, #2
    64a2:	4b29      	ldr	r3, [pc, #164]	; (6548 <system_clock_source_enable+0xac>)
    64a4:	581b      	ldr	r3, [r3, r0]
    64a6:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    64a8:	2017      	movs	r0, #23
    64aa:	e04b      	b.n	6544 <system_clock_source_enable+0xa8>
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    64ac:	4a27      	ldr	r2, [pc, #156]	; (654c <system_clock_source_enable+0xb0>)
    64ae:	7d13      	ldrb	r3, [r2, #20]
    64b0:	2102      	movs	r1, #2
    64b2:	430b      	orrs	r3, r1
    64b4:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    64b6:	2000      	movs	r0, #0
    64b8:	e044      	b.n	6544 <system_clock_source_enable+0xa8>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    64ba:	4a25      	ldr	r2, [pc, #148]	; (6550 <system_clock_source_enable+0xb4>)
    64bc:	6993      	ldr	r3, [r2, #24]
    64be:	2102      	movs	r1, #2
    64c0:	430b      	orrs	r3, r1
    64c2:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    64c4:	2000      	movs	r0, #0
		break;
    64c6:	e03d      	b.n	6544 <system_clock_source_enable+0xa8>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    64c8:	4a20      	ldr	r2, [pc, #128]	; (654c <system_clock_source_enable+0xb0>)
    64ca:	8a13      	ldrh	r3, [r2, #16]
    64cc:	2102      	movs	r1, #2
    64ce:	430b      	orrs	r3, r1
    64d0:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    64d2:	2000      	movs	r0, #0
		break;
    64d4:	e036      	b.n	6544 <system_clock_source_enable+0xa8>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    64d6:	4a1e      	ldr	r2, [pc, #120]	; (6550 <system_clock_source_enable+0xb4>)
    64d8:	6953      	ldr	r3, [r2, #20]
    64da:	2102      	movs	r1, #2
    64dc:	430b      	orrs	r3, r1
    64de:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    64e0:	2000      	movs	r0, #0
		break;
    64e2:	e02f      	b.n	6544 <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    64e4:	491b      	ldr	r1, [pc, #108]	; (6554 <system_clock_source_enable+0xb8>)
    64e6:	680b      	ldr	r3, [r1, #0]
    64e8:	2202      	movs	r2, #2
    64ea:	4313      	orrs	r3, r2
    64ec:	600b      	str	r3, [r1, #0]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    64ee:	4b17      	ldr	r3, [pc, #92]	; (654c <system_clock_source_enable+0xb0>)
    64f0:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    64f2:	0019      	movs	r1, r3
    64f4:	32fe      	adds	r2, #254	; 0xfe
    64f6:	68cb      	ldr	r3, [r1, #12]
    64f8:	4213      	tst	r3, r2
    64fa:	d0fc      	beq.n	64f6 <system_clock_source_enable+0x5a>
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    64fc:	4a15      	ldr	r2, [pc, #84]	; (6554 <system_clock_source_enable+0xb8>)
    64fe:	6891      	ldr	r1, [r2, #8]
    6500:	4b12      	ldr	r3, [pc, #72]	; (654c <system_clock_source_enable+0xb0>)
    6502:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    6504:	6852      	ldr	r2, [r2, #4]
    6506:	61da      	str	r2, [r3, #28]
	OSCCTRL->DFLLCTRL.reg = 0;
    6508:	2200      	movs	r2, #0
    650a:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    650c:	0019      	movs	r1, r3
    650e:	3201      	adds	r2, #1
    6510:	32ff      	adds	r2, #255	; 0xff
    6512:	68cb      	ldr	r3, [r1, #12]
    6514:	4213      	tst	r3, r2
    6516:	d0fc      	beq.n	6512 <system_clock_source_enable+0x76>
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    6518:	4b0e      	ldr	r3, [pc, #56]	; (6554 <system_clock_source_enable+0xb8>)
    651a:	681b      	ldr	r3, [r3, #0]
    651c:	b29b      	uxth	r3, r3
    651e:	4a0b      	ldr	r2, [pc, #44]	; (654c <system_clock_source_enable+0xb0>)
    6520:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    6522:	2000      	movs	r0, #0
    6524:	e00e      	b.n	6544 <system_clock_source_enable+0xa8>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    6526:	4909      	ldr	r1, [pc, #36]	; (654c <system_clock_source_enable+0xb0>)
    6528:	2228      	movs	r2, #40	; 0x28
    652a:	5c8b      	ldrb	r3, [r1, r2]
    652c:	2002      	movs	r0, #2
    652e:	4303      	orrs	r3, r0
    6530:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    6532:	0008      	movs	r0, r1
    6534:	2138      	movs	r1, #56	; 0x38
    6536:	3a26      	subs	r2, #38	; 0x26
    6538:	5c43      	ldrb	r3, [r0, r1]
    653a:	4213      	tst	r3, r2
    653c:	d1fc      	bne.n	6538 <system_clock_source_enable+0x9c>
	return STATUS_OK;
    653e:	2000      	movs	r0, #0
    6540:	e000      	b.n	6544 <system_clock_source_enable+0xa8>
		return STATUS_OK;
    6542:	2000      	movs	r0, #0
}
    6544:	4770      	bx	lr
    6546:	46c0      	nop			; (mov r8, r8)
    6548:	000175f0 	.word	0x000175f0
    654c:	40000c00 	.word	0x40000c00
    6550:	40001000 	.word	0x40001000
    6554:	200000d8 	.word	0x200000d8

00006558 <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    6558:	2808      	cmp	r0, #8
    655a:	d832      	bhi.n	65c2 <system_clock_source_disable+0x6a>
    655c:	0080      	lsls	r0, r0, #2
    655e:	4b1a      	ldr	r3, [pc, #104]	; (65c8 <system_clock_source_disable+0x70>)
    6560:	581b      	ldr	r3, [r3, r0]
    6562:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    6564:	4a19      	ldr	r2, [pc, #100]	; (65cc <system_clock_source_disable+0x74>)
    6566:	7d13      	ldrb	r3, [r2, #20]
    6568:	2102      	movs	r1, #2
    656a:	438b      	bics	r3, r1
    656c:	7513      	strb	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    656e:	2000      	movs	r0, #0
}
    6570:	4770      	bx	lr
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    6572:	4a17      	ldr	r2, [pc, #92]	; (65d0 <system_clock_source_disable+0x78>)
    6574:	6993      	ldr	r3, [r2, #24]
    6576:	2102      	movs	r1, #2
    6578:	438b      	bics	r3, r1
    657a:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    657c:	2000      	movs	r0, #0
		break;
    657e:	e7f7      	b.n	6570 <system_clock_source_disable+0x18>
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    6580:	4a12      	ldr	r2, [pc, #72]	; (65cc <system_clock_source_disable+0x74>)
    6582:	8a13      	ldrh	r3, [r2, #16]
    6584:	2102      	movs	r1, #2
    6586:	438b      	bics	r3, r1
    6588:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    658a:	2000      	movs	r0, #0
		break;
    658c:	e7f0      	b.n	6570 <system_clock_source_disable+0x18>
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    658e:	4a10      	ldr	r2, [pc, #64]	; (65d0 <system_clock_source_disable+0x78>)
    6590:	6953      	ldr	r3, [r2, #20]
    6592:	2102      	movs	r1, #2
    6594:	438b      	bics	r3, r1
    6596:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    6598:	2000      	movs	r0, #0
		break;
    659a:	e7e9      	b.n	6570 <system_clock_source_disable+0x18>
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    659c:	4b0d      	ldr	r3, [pc, #52]	; (65d4 <system_clock_source_disable+0x7c>)
    659e:	681a      	ldr	r2, [r3, #0]
    65a0:	2102      	movs	r1, #2
    65a2:	438a      	bics	r2, r1
    65a4:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    65a6:	681b      	ldr	r3, [r3, #0]
    65a8:	b29b      	uxth	r3, r3
    65aa:	4a08      	ldr	r2, [pc, #32]	; (65cc <system_clock_source_disable+0x74>)
    65ac:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    65ae:	2000      	movs	r0, #0
		break;
    65b0:	e7de      	b.n	6570 <system_clock_source_disable+0x18>
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    65b2:	4906      	ldr	r1, [pc, #24]	; (65cc <system_clock_source_disable+0x74>)
    65b4:	2228      	movs	r2, #40	; 0x28
    65b6:	5c8b      	ldrb	r3, [r1, r2]
    65b8:	2002      	movs	r0, #2
    65ba:	4383      	bics	r3, r0
    65bc:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    65be:	2000      	movs	r0, #0
		break;
    65c0:	e7d6      	b.n	6570 <system_clock_source_disable+0x18>
		return STATUS_ERR_INVALID_ARG;
    65c2:	2017      	movs	r0, #23
    65c4:	e7d4      	b.n	6570 <system_clock_source_disable+0x18>
    65c6:	46c0      	nop			; (mov r8, r8)
    65c8:	00017614 	.word	0x00017614
    65cc:	40000c00 	.word	0x40000c00
    65d0:	40001000 	.word	0x40001000
    65d4:	200000d8 	.word	0x200000d8

000065d8 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    65d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    65da:	46d6      	mov	lr, sl
    65dc:	464f      	mov	r7, r9
    65de:	4646      	mov	r6, r8
    65e0:	b5c0      	push	{r6, r7, lr}
    65e2:	b088      	sub	sp, #32
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    65e4:	2280      	movs	r2, #128	; 0x80
    65e6:	0052      	lsls	r2, r2, #1
    65e8:	4b56      	ldr	r3, [pc, #344]	; (6744 <system_clock_init+0x16c>)
    65ea:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    65ec:	3afd      	subs	r2, #253	; 0xfd
    65ee:	4b56      	ldr	r3, [pc, #344]	; (6748 <system_clock_init+0x170>)
    65f0:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    65f2:	4a56      	ldr	r2, [pc, #344]	; (674c <system_clock_init+0x174>)
    65f4:	6853      	ldr	r3, [r2, #4]
    65f6:	211e      	movs	r1, #30
    65f8:	438b      	bics	r3, r1
    65fa:	391a      	subs	r1, #26
    65fc:	430b      	orrs	r3, r1
    65fe:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    6600:	2380      	movs	r3, #128	; 0x80
    6602:	05db      	lsls	r3, r3, #23
    6604:	789b      	ldrb	r3, [r3, #2]
    6606:	2b02      	cmp	r3, #2
    6608:	d00f      	beq.n	662a <system_clock_init+0x52>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB || SAMR34J || SAMR35J || (WLR089U0)
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    660a:	2380      	movs	r3, #128	; 0x80
    660c:	05db      	lsls	r3, r3, #23
    660e:	789b      	ldrb	r3, [r3, #2]
    6610:	b25b      	sxtb	r3, r3
    6612:	2b00      	cmp	r3, #0
    6614:	db09      	blt.n	662a <system_clock_init+0x52>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    6616:	2380      	movs	r3, #128	; 0x80
    6618:	05db      	lsls	r3, r3, #23
    661a:	2201      	movs	r2, #1
    661c:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    661e:	3201      	adds	r2, #1
    6620:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    6622:	001a      	movs	r2, r3
    6624:	7993      	ldrb	r3, [r2, #6]
    6626:	2b00      	cmp	r3, #0
    6628:	d0fc      	beq.n	6624 <system_clock_init+0x4c>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    662a:	a805      	add	r0, sp, #20
    662c:	2300      	movs	r3, #0
    662e:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    6630:	2280      	movs	r2, #128	; 0x80
    6632:	0212      	lsls	r2, r2, #8
    6634:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    6636:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    6638:	2201      	movs	r2, #1
    663a:	70c2      	strb	r2, [r0, #3]
	config->run_in_standby      = false;
    663c:	7203      	strb	r3, [r0, #8]
	config->write_once          = false;
    663e:	7283      	strb	r3, [r0, #10]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    6640:	3203      	adds	r2, #3
    6642:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    6644:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    6646:	4b42      	ldr	r3, [pc, #264]	; (6750 <system_clock_init+0x178>)
    6648:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    664a:	2005      	movs	r0, #5
    664c:	4b41      	ldr	r3, [pc, #260]	; (6754 <system_clock_init+0x17c>)
    664e:	4798      	blx	r3
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    6650:	4941      	ldr	r1, [pc, #260]	; (6758 <system_clock_init+0x180>)
    6652:	2201      	movs	r2, #1
    6654:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    6656:	421a      	tst	r2, r3
    6658:	d0fc      	beq.n	6654 <system_clock_init+0x7c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		OSC32KCTRL->XOSC32K.bit.ONDEMAND = 1;
    665a:	4a3f      	ldr	r2, [pc, #252]	; (6758 <system_clock_init+0x180>)
    665c:	6953      	ldr	r3, [r2, #20]
    665e:	2180      	movs	r1, #128	; 0x80
    6660:	430b      	orrs	r3, r1
    6662:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    6664:	a902      	add	r1, sp, #8
    6666:	2501      	movs	r5, #1
    6668:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    666a:	2400      	movs	r4, #0
    666c:	704c      	strb	r4, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    666e:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    6670:	724c      	strb	r4, [r1, #9]
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    6672:	2303      	movs	r3, #3
    6674:	700b      	strb	r3, [r1, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    6676:	2000      	movs	r0, #0
    6678:	4b38      	ldr	r3, [pc, #224]	; (675c <system_clock_init+0x184>)
    667a:	4798      	blx	r3
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    667c:	2006      	movs	r0, #6
    667e:	4b38      	ldr	r3, [pc, #224]	; (6760 <system_clock_init+0x188>)
    6680:	4798      	blx	r3
	config->run_in_standby  = false;
    6682:	a801      	add	r0, sp, #4
    6684:	7044      	strb	r4, [r0, #1]
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
    6686:	7005      	strb	r5, [r0, #0]
	osc16m_conf.on_demand       = 0;
    6688:	7084      	strb	r4, [r0, #2]
	system_clock_source_osc16m_set_config(&osc16m_conf);
    668a:	4b36      	ldr	r3, [pc, #216]	; (6764 <system_clock_init+0x18c>)
    668c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
    668e:	2006      	movs	r0, #6
    6690:	4b30      	ldr	r3, [pc, #192]	; (6754 <system_clock_init+0x17c>)
    6692:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    6694:	492b      	ldr	r1, [pc, #172]	; (6744 <system_clock_init+0x16c>)
    6696:	2210      	movs	r2, #16
    6698:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    669a:	421a      	tst	r2, r3
    669c:	d0fc      	beq.n	6698 <system_clock_init+0xc0>
	config->division_factor    = 1;
    669e:	ac02      	add	r4, sp, #8
    66a0:	2601      	movs	r6, #1
    66a2:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    66a4:	2500      	movs	r5, #0
    66a6:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    66a8:	2306      	movs	r3, #6
    66aa:	469a      	mov	sl, r3
    66ac:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    66ae:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    66b0:	7265      	strb	r5, [r4, #9]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    66b2:	0021      	movs	r1, r4
    66b4:	2000      	movs	r0, #0
    66b6:	4b29      	ldr	r3, [pc, #164]	; (675c <system_clock_init+0x184>)
    66b8:	4698      	mov	r8, r3
    66ba:	4798      	blx	r3
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    66bc:	4b2a      	ldr	r3, [pc, #168]	; (6768 <system_clock_init+0x190>)
    66be:	4798      	blx	r3
	config->division_factor    = 1;
    66c0:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    66c2:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    66c4:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    66c6:	2305      	movs	r3, #5
    66c8:	7023      	strb	r3, [r4, #0]
    66ca:	7226      	strb	r6, [r4, #8]
    66cc:	0021      	movs	r1, r4
    66ce:	2001      	movs	r0, #1
    66d0:	47c0      	blx	r8
    66d2:	2001      	movs	r0, #1
    66d4:	4b25      	ldr	r3, [pc, #148]	; (676c <system_clock_init+0x194>)
    66d6:	4699      	mov	r9, r3
    66d8:	4798      	blx	r3
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    66da:	4f25      	ldr	r7, [pc, #148]	; (6770 <system_clock_init+0x198>)
    66dc:	71be      	strb	r6, [r7, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    66de:	717e      	strb	r6, [r7, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    66e0:	713e      	strb	r6, [r7, #4]
	config->division_factor    = 1;
    66e2:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    66e4:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    66e6:	4653      	mov	r3, sl
    66e8:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    66ea:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    66ec:	7265      	strb	r5, [r4, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    66ee:	0021      	movs	r1, r4
    66f0:	2000      	movs	r0, #0
    66f2:	47c0      	blx	r8
    66f4:	2000      	movs	r0, #0
    66f6:	47c8      	blx	r9
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    66f8:	2000      	movs	r0, #0
    66fa:	4b1e      	ldr	r3, [pc, #120]	; (6774 <system_clock_init+0x19c>)
    66fc:	4798      	blx	r3
    66fe:	7939      	ldrb	r1, [r7, #4]
    6700:	b2c9      	uxtb	r1, r1
    6702:	4b1d      	ldr	r3, [pc, #116]	; (6778 <system_clock_init+0x1a0>)
    6704:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    6706:	4b1d      	ldr	r3, [pc, #116]	; (677c <system_clock_init+0x1a4>)
    6708:	4298      	cmp	r0, r3
    670a:	d814      	bhi.n	6736 <system_clock_init+0x15e>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    670c:	2380      	movs	r3, #128	; 0x80
    670e:	05db      	lsls	r3, r3, #23
    6710:	789b      	ldrb	r3, [r3, #2]
    6712:	2b00      	cmp	r3, #0
    6714:	d00f      	beq.n	6736 <system_clock_init+0x15e>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    6716:	2380      	movs	r3, #128	; 0x80
    6718:	05db      	lsls	r3, r3, #23
    671a:	789b      	ldrb	r3, [r3, #2]
    671c:	b25b      	sxtb	r3, r3
    671e:	2b00      	cmp	r3, #0
    6720:	db09      	blt.n	6736 <system_clock_init+0x15e>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    6722:	2380      	movs	r3, #128	; 0x80
    6724:	05db      	lsls	r3, r3, #23
    6726:	2201      	movs	r2, #1
    6728:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    672a:	2200      	movs	r2, #0
    672c:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    672e:	001a      	movs	r2, r3
    6730:	7993      	ldrb	r3, [r2, #6]
    6732:	2b00      	cmp	r3, #0
    6734:	d0fc      	beq.n	6730 <system_clock_init+0x158>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    6736:	b008      	add	sp, #32
    6738:	bc1c      	pop	{r2, r3, r4}
    673a:	4690      	mov	r8, r2
    673c:	4699      	mov	r9, r3
    673e:	46a2      	mov	sl, r4
    6740:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6742:	46c0      	nop			; (mov r8, r8)
    6744:	40000c00 	.word	0x40000c00
    6748:	40001400 	.word	0x40001400
    674c:	41004000 	.word	0x41004000
    6750:	00006401 	.word	0x00006401
    6754:	0000649d 	.word	0x0000649d
    6758:	40001000 	.word	0x40001000
    675c:	000067a5 	.word	0x000067a5
    6760:	00006559 	.word	0x00006559
    6764:	000063cd 	.word	0x000063cd
    6768:	00006781 	.word	0x00006781
    676c:	00006851 	.word	0x00006851
    6770:	40000400 	.word	0x40000400
    6774:	00006891 	.word	0x00006891
    6778:	00012f55 	.word	0x00012f55
    677c:	00b71b00 	.word	0x00b71b00

00006780 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    6780:	4a06      	ldr	r2, [pc, #24]	; (679c <system_gclk_init+0x1c>)
    6782:	6953      	ldr	r3, [r2, #20]
    6784:	2140      	movs	r1, #64	; 0x40
    6786:	430b      	orrs	r3, r1
    6788:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    678a:	2201      	movs	r2, #1
    678c:	4b04      	ldr	r3, [pc, #16]	; (67a0 <system_gclk_init+0x20>)
    678e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    6790:	0019      	movs	r1, r3
    6792:	780b      	ldrb	r3, [r1, #0]
    6794:	4213      	tst	r3, r2
    6796:	d1fc      	bne.n	6792 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    6798:	4770      	bx	lr
    679a:	46c0      	nop			; (mov r8, r8)
    679c:	40000400 	.word	0x40000400
    67a0:	40001800 	.word	0x40001800

000067a4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    67a4:	b570      	push	{r4, r5, r6, lr}
    67a6:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    67a8:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    67aa:	784b      	ldrb	r3, [r1, #1]
    67ac:	2b00      	cmp	r3, #0
    67ae:	d002      	beq.n	67b6 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    67b0:	2380      	movs	r3, #128	; 0x80
    67b2:	00db      	lsls	r3, r3, #3
    67b4:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    67b6:	7a4b      	ldrb	r3, [r1, #9]
    67b8:	2b00      	cmp	r3, #0
    67ba:	d002      	beq.n	67c2 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    67bc:	2380      	movs	r3, #128	; 0x80
    67be:	011b      	lsls	r3, r3, #4
    67c0:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    67c2:	6848      	ldr	r0, [r1, #4]
    67c4:	2801      	cmp	r0, #1
    67c6:	d90f      	bls.n	67e8 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    67c8:	1e43      	subs	r3, r0, #1
    67ca:	4218      	tst	r0, r3
    67cc:	d131      	bne.n	6832 <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    67ce:	2802      	cmp	r0, #2
    67d0:	d92d      	bls.n	682e <system_gclk_gen_set_config+0x8a>
    67d2:	2302      	movs	r3, #2
    67d4:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    67d6:	3201      	adds	r2, #1
						mask <<= 1) {
    67d8:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    67da:	4298      	cmp	r0, r3
    67dc:	d8fb      	bhi.n	67d6 <system_gclk_gen_set_config+0x32>
    67de:	2380      	movs	r3, #128	; 0x80
    67e0:	015b      	lsls	r3, r3, #5
    67e2:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    67e4:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    67e6:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    67e8:	7a0b      	ldrb	r3, [r1, #8]
    67ea:	2b00      	cmp	r3, #0
    67ec:	d002      	beq.n	67f4 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    67ee:	2380      	movs	r3, #128	; 0x80
    67f0:	019b      	lsls	r3, r3, #6
    67f2:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    67f4:	2604      	movs	r6, #4
    67f6:	40a6      	lsls	r6, r4
    67f8:	4911      	ldr	r1, [pc, #68]	; (6840 <system_gclk_gen_set_config+0x9c>)
    67fa:	4a12      	ldr	r2, [pc, #72]	; (6844 <system_gclk_gen_set_config+0xa0>)
    67fc:	684b      	ldr	r3, [r1, #4]
    67fe:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    6800:	421e      	tst	r6, r3
    6802:	d1fb      	bne.n	67fc <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    6804:	4b10      	ldr	r3, [pc, #64]	; (6848 <system_gclk_gen_set_config+0xa4>)
    6806:	4798      	blx	r3
    6808:	00a4      	lsls	r4, r4, #2
    680a:	4b0d      	ldr	r3, [pc, #52]	; (6840 <system_gclk_gen_set_config+0x9c>)
    680c:	469c      	mov	ip, r3
    680e:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    6810:	6a22      	ldr	r2, [r4, #32]
    6812:	2380      	movs	r3, #128	; 0x80
    6814:	005b      	lsls	r3, r3, #1
    6816:	401a      	ands	r2, r3
    6818:	432a      	orrs	r2, r5
    681a:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    681c:	4661      	mov	r1, ip
    681e:	4a09      	ldr	r2, [pc, #36]	; (6844 <system_gclk_gen_set_config+0xa0>)
    6820:	684b      	ldr	r3, [r1, #4]
    6822:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    6824:	421e      	tst	r6, r3
    6826:	d1fb      	bne.n	6820 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    6828:	4b08      	ldr	r3, [pc, #32]	; (684c <system_gclk_gen_set_config+0xa8>)
    682a:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    682c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    682e:	2200      	movs	r2, #0
    6830:	e7d5      	b.n	67de <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    6832:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    6834:	2380      	movs	r3, #128	; 0x80
    6836:	009b      	lsls	r3, r3, #2
    6838:	4318      	orrs	r0, r3
    683a:	4305      	orrs	r5, r0
    683c:	e7d4      	b.n	67e8 <system_gclk_gen_set_config+0x44>
    683e:	46c0      	nop			; (mov r8, r8)
    6840:	40001800 	.word	0x40001800
    6844:	000007fc 	.word	0x000007fc
    6848:	000044f9 	.word	0x000044f9
    684c:	00004539 	.word	0x00004539

00006850 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    6850:	b510      	push	{r4, lr}
    6852:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    6854:	2204      	movs	r2, #4
    6856:	4082      	lsls	r2, r0
    6858:	4809      	ldr	r0, [pc, #36]	; (6880 <system_gclk_gen_enable+0x30>)
    685a:	490a      	ldr	r1, [pc, #40]	; (6884 <system_gclk_gen_enable+0x34>)
    685c:	6843      	ldr	r3, [r0, #4]
    685e:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    6860:	421a      	tst	r2, r3
    6862:	d1fb      	bne.n	685c <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    6864:	4b08      	ldr	r3, [pc, #32]	; (6888 <system_gclk_gen_enable+0x38>)
    6866:	4798      	blx	r3
    6868:	00a4      	lsls	r4, r4, #2
    686a:	4b05      	ldr	r3, [pc, #20]	; (6880 <system_gclk_gen_enable+0x30>)
    686c:	469c      	mov	ip, r3
    686e:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    6870:	6a22      	ldr	r2, [r4, #32]
    6872:	2380      	movs	r3, #128	; 0x80
    6874:	005b      	lsls	r3, r3, #1
    6876:	4313      	orrs	r3, r2
    6878:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    687a:	4b04      	ldr	r3, [pc, #16]	; (688c <system_gclk_gen_enable+0x3c>)
    687c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    687e:	bd10      	pop	{r4, pc}
    6880:	40001800 	.word	0x40001800
    6884:	000007fc 	.word	0x000007fc
    6888:	000044f9 	.word	0x000044f9
    688c:	00004539 	.word	0x00004539

00006890 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    6890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6892:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    6894:	2204      	movs	r2, #4
    6896:	4082      	lsls	r2, r0
    6898:	4812      	ldr	r0, [pc, #72]	; (68e4 <system_gclk_gen_get_hz+0x54>)
    689a:	4913      	ldr	r1, [pc, #76]	; (68e8 <system_gclk_gen_get_hz+0x58>)
    689c:	6843      	ldr	r3, [r0, #4]
    689e:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    68a0:	421a      	tst	r2, r3
    68a2:	d1fb      	bne.n	689c <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    68a4:	4b11      	ldr	r3, [pc, #68]	; (68ec <system_gclk_gen_get_hz+0x5c>)
    68a6:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    68a8:	4f0e      	ldr	r7, [pc, #56]	; (68e4 <system_gclk_gen_get_hz+0x54>)
    68aa:	3408      	adds	r4, #8
    68ac:	00a4      	lsls	r4, r4, #2
    68ae:	59e0      	ldr	r0, [r4, r7]
    68b0:	0700      	lsls	r0, r0, #28
    68b2:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
    68b4:	4b0e      	ldr	r3, [pc, #56]	; (68f0 <system_gclk_gen_get_hz+0x60>)
    68b6:	4798      	blx	r3
    68b8:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    68ba:	59e5      	ldr	r5, [r4, r7]
    68bc:	04ed      	lsls	r5, r5, #19
    68be:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    68c0:	59e4      	ldr	r4, [r4, r7]
    68c2:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    68c4:	4b0b      	ldr	r3, [pc, #44]	; (68f4 <system_gclk_gen_get_hz+0x64>)
    68c6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    68c8:	2d00      	cmp	r5, #0
    68ca:	d107      	bne.n	68dc <system_gclk_gen_get_hz+0x4c>
    68cc:	2c01      	cmp	r4, #1
    68ce:	d907      	bls.n	68e0 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    68d0:	0021      	movs	r1, r4
    68d2:	0030      	movs	r0, r6
    68d4:	4b08      	ldr	r3, [pc, #32]	; (68f8 <system_gclk_gen_get_hz+0x68>)
    68d6:	4798      	blx	r3
    68d8:	0006      	movs	r6, r0
    68da:	e001      	b.n	68e0 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    68dc:	3401      	adds	r4, #1
    68de:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    68e0:	0030      	movs	r0, r6
    68e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    68e4:	40001800 	.word	0x40001800
    68e8:	000007fc 	.word	0x000007fc
    68ec:	000044f9 	.word	0x000044f9
    68f0:	00006339 	.word	0x00006339
    68f4:	00004539 	.word	0x00004539
    68f8:	00012f55 	.word	0x00012f55

000068fc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    68fc:	b510      	push	{r4, lr}
    68fe:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    6900:	4b09      	ldr	r3, [pc, #36]	; (6928 <system_gclk_chan_enable+0x2c>)
    6902:	4798      	blx	r3
    6904:	00a0      	lsls	r0, r4, #2
    6906:	4b09      	ldr	r3, [pc, #36]	; (692c <system_gclk_chan_enable+0x30>)
    6908:	469c      	mov	ip, r3
    690a:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    690c:	2280      	movs	r2, #128	; 0x80
    690e:	5883      	ldr	r3, [r0, r2]
    6910:	2140      	movs	r1, #64	; 0x40
    6912:	430b      	orrs	r3, r1
    6914:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    6916:	3140      	adds	r1, #64	; 0x40
    6918:	3a40      	subs	r2, #64	; 0x40
    691a:	5843      	ldr	r3, [r0, r1]
    691c:	421a      	tst	r2, r3
    691e:	d0fc      	beq.n	691a <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    6920:	4b03      	ldr	r3, [pc, #12]	; (6930 <system_gclk_chan_enable+0x34>)
    6922:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    6924:	bd10      	pop	{r4, pc}
    6926:	46c0      	nop			; (mov r8, r8)
    6928:	000044f9 	.word	0x000044f9
    692c:	40001800 	.word	0x40001800
    6930:	00004539 	.word	0x00004539

00006934 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    6934:	b510      	push	{r4, lr}
    6936:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    6938:	4b09      	ldr	r3, [pc, #36]	; (6960 <system_gclk_chan_disable+0x2c>)
    693a:	4798      	blx	r3
    693c:	00a0      	lsls	r0, r4, #2
    693e:	4b09      	ldr	r3, [pc, #36]	; (6964 <system_gclk_chan_disable+0x30>)
    6940:	469c      	mov	ip, r3
    6942:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    6944:	2280      	movs	r2, #128	; 0x80
    6946:	5883      	ldr	r3, [r0, r2]
    6948:	2140      	movs	r1, #64	; 0x40
    694a:	438b      	bics	r3, r1
    694c:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    694e:	3140      	adds	r1, #64	; 0x40
    6950:	3a40      	subs	r2, #64	; 0x40
    6952:	5843      	ldr	r3, [r0, r1]
    6954:	421a      	tst	r2, r3
    6956:	d1fc      	bne.n	6952 <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    6958:	4b03      	ldr	r3, [pc, #12]	; (6968 <system_gclk_chan_disable+0x34>)
    695a:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    695c:	bd10      	pop	{r4, pc}
    695e:	46c0      	nop			; (mov r8, r8)
    6960:	000044f9 	.word	0x000044f9
    6964:	40001800 	.word	0x40001800
    6968:	00004539 	.word	0x00004539

0000696c <system_gclk_chan_set_config>:
{
    696c:	b570      	push	{r4, r5, r6, lr}
    696e:	0004      	movs	r4, r0
    6970:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    6972:	4b05      	ldr	r3, [pc, #20]	; (6988 <system_gclk_chan_set_config+0x1c>)
    6974:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    6976:	782a      	ldrb	r2, [r5, #0]
    6978:	230f      	movs	r3, #15
    697a:	4013      	ands	r3, r2
    697c:	3420      	adds	r4, #32
    697e:	00a4      	lsls	r4, r4, #2
    6980:	4a02      	ldr	r2, [pc, #8]	; (698c <system_gclk_chan_set_config+0x20>)
    6982:	50a3      	str	r3, [r4, r2]
}
    6984:	bd70      	pop	{r4, r5, r6, pc}
    6986:	46c0      	nop			; (mov r8, r8)
    6988:	00006935 	.word	0x00006935
    698c:	40001800 	.word	0x40001800

00006990 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    6990:	b510      	push	{r4, lr}
    6992:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    6994:	4b06      	ldr	r3, [pc, #24]	; (69b0 <system_gclk_chan_get_hz+0x20>)
    6996:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    6998:	3420      	adds	r4, #32
    699a:	00a4      	lsls	r4, r4, #2
    699c:	4b05      	ldr	r3, [pc, #20]	; (69b4 <system_gclk_chan_get_hz+0x24>)
    699e:	58e4      	ldr	r4, [r4, r3]
    69a0:	0724      	lsls	r4, r4, #28
    69a2:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    69a4:	4b04      	ldr	r3, [pc, #16]	; (69b8 <system_gclk_chan_get_hz+0x28>)
    69a6:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    69a8:	0020      	movs	r0, r4
    69aa:	4b04      	ldr	r3, [pc, #16]	; (69bc <system_gclk_chan_get_hz+0x2c>)
    69ac:	4798      	blx	r3
}
    69ae:	bd10      	pop	{r4, pc}
    69b0:	000044f9 	.word	0x000044f9
    69b4:	40001800 	.word	0x40001800
    69b8:	00004539 	.word	0x00004539
    69bc:	00006891 	.word	0x00006891

000069c0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    69c0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    69c2:	78d3      	ldrb	r3, [r2, #3]
    69c4:	2b00      	cmp	r3, #0
    69c6:	d135      	bne.n	6a34 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    69c8:	7813      	ldrb	r3, [r2, #0]
    69ca:	2b80      	cmp	r3, #128	; 0x80
    69cc:	d029      	beq.n	6a22 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    69ce:	061b      	lsls	r3, r3, #24
    69d0:	2480      	movs	r4, #128	; 0x80
    69d2:	0264      	lsls	r4, r4, #9
    69d4:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    69d6:	7854      	ldrb	r4, [r2, #1]
    69d8:	2502      	movs	r5, #2
    69da:	43ac      	bics	r4, r5
    69dc:	d106      	bne.n	69ec <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    69de:	7894      	ldrb	r4, [r2, #2]
    69e0:	2c00      	cmp	r4, #0
    69e2:	d120      	bne.n	6a26 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    69e4:	2480      	movs	r4, #128	; 0x80
    69e6:	02a4      	lsls	r4, r4, #10
    69e8:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    69ea:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    69ec:	7854      	ldrb	r4, [r2, #1]
    69ee:	3c01      	subs	r4, #1
    69f0:	2c01      	cmp	r4, #1
    69f2:	d91c      	bls.n	6a2e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    69f4:	040d      	lsls	r5, r1, #16
    69f6:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    69f8:	24a0      	movs	r4, #160	; 0xa0
    69fa:	05e4      	lsls	r4, r4, #23
    69fc:	432c      	orrs	r4, r5
    69fe:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6a00:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    6a02:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6a04:	24d0      	movs	r4, #208	; 0xd0
    6a06:	0624      	lsls	r4, r4, #24
    6a08:	432c      	orrs	r4, r5
    6a0a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6a0c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    6a0e:	78d4      	ldrb	r4, [r2, #3]
    6a10:	2c00      	cmp	r4, #0
    6a12:	d122      	bne.n	6a5a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    6a14:	035b      	lsls	r3, r3, #13
    6a16:	d51c      	bpl.n	6a52 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    6a18:	7893      	ldrb	r3, [r2, #2]
    6a1a:	2b01      	cmp	r3, #1
    6a1c:	d01e      	beq.n	6a5c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    6a1e:	6141      	str	r1, [r0, #20]
    6a20:	e017      	b.n	6a52 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    6a22:	2300      	movs	r3, #0
    6a24:	e7d7      	b.n	69d6 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    6a26:	24c0      	movs	r4, #192	; 0xc0
    6a28:	02e4      	lsls	r4, r4, #11
    6a2a:	4323      	orrs	r3, r4
    6a2c:	e7dd      	b.n	69ea <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    6a2e:	4c0d      	ldr	r4, [pc, #52]	; (6a64 <_system_pinmux_config+0xa4>)
    6a30:	4023      	ands	r3, r4
    6a32:	e7df      	b.n	69f4 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    6a34:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6a36:	040c      	lsls	r4, r1, #16
    6a38:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6a3a:	23a0      	movs	r3, #160	; 0xa0
    6a3c:	05db      	lsls	r3, r3, #23
    6a3e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6a40:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    6a42:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6a44:	23d0      	movs	r3, #208	; 0xd0
    6a46:	061b      	lsls	r3, r3, #24
    6a48:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6a4a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    6a4c:	78d3      	ldrb	r3, [r2, #3]
    6a4e:	2b00      	cmp	r3, #0
    6a50:	d103      	bne.n	6a5a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6a52:	7853      	ldrb	r3, [r2, #1]
    6a54:	3b01      	subs	r3, #1
    6a56:	2b01      	cmp	r3, #1
    6a58:	d902      	bls.n	6a60 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    6a5a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    6a5c:	6181      	str	r1, [r0, #24]
    6a5e:	e7f8      	b.n	6a52 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    6a60:	6081      	str	r1, [r0, #8]
}
    6a62:	e7fa      	b.n	6a5a <_system_pinmux_config+0x9a>
    6a64:	fffbffff 	.word	0xfffbffff

00006a68 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    6a68:	b510      	push	{r4, lr}
    6a6a:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    6a6c:	09c1      	lsrs	r1, r0, #7
		return NULL;
    6a6e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    6a70:	2900      	cmp	r1, #0
    6a72:	d104      	bne.n	6a7e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    6a74:	0943      	lsrs	r3, r0, #5
    6a76:	01db      	lsls	r3, r3, #7
    6a78:	4905      	ldr	r1, [pc, #20]	; (6a90 <system_pinmux_pin_set_config+0x28>)
    6a7a:	468c      	mov	ip, r1
    6a7c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    6a7e:	241f      	movs	r4, #31
    6a80:	4020      	ands	r0, r4
    6a82:	2101      	movs	r1, #1
    6a84:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    6a86:	0018      	movs	r0, r3
    6a88:	4b02      	ldr	r3, [pc, #8]	; (6a94 <system_pinmux_pin_set_config+0x2c>)
    6a8a:	4798      	blx	r3
}
    6a8c:	bd10      	pop	{r4, pc}
    6a8e:	46c0      	nop			; (mov r8, r8)
    6a90:	40002800 	.word	0x40002800
    6a94:	000069c1 	.word	0x000069c1

00006a98 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    6a98:	4770      	bx	lr
    6a9a:	Address 0x00006a9a is out of bounds.


00006a9c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6a9c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    6a9e:	4b05      	ldr	r3, [pc, #20]	; (6ab4 <system_init+0x18>)
    6aa0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    6aa2:	4b05      	ldr	r3, [pc, #20]	; (6ab8 <system_init+0x1c>)
    6aa4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    6aa6:	4b05      	ldr	r3, [pc, #20]	; (6abc <system_init+0x20>)
    6aa8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    6aaa:	4b05      	ldr	r3, [pc, #20]	; (6ac0 <system_init+0x24>)
    6aac:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    6aae:	4b05      	ldr	r3, [pc, #20]	; (6ac4 <system_init+0x28>)
    6ab0:	4798      	blx	r3
}
    6ab2:	bd10      	pop	{r4, pc}
    6ab4:	000065d9 	.word	0x000065d9
    6ab8:	00004569 	.word	0x00004569
    6abc:	00006a99 	.word	0x00006a99
    6ac0:	00004895 	.word	0x00004895
    6ac4:	00006a99 	.word	0x00006a99

00006ac8 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    6ac8:	1c93      	adds	r3, r2, #2
    6aca:	009b      	lsls	r3, r3, #2
    6acc:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    6ace:	2a02      	cmp	r2, #2
    6ad0:	d009      	beq.n	6ae6 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    6ad2:	2a03      	cmp	r2, #3
    6ad4:	d00c      	beq.n	6af0 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    6ad6:	2301      	movs	r3, #1
    6ad8:	4093      	lsls	r3, r2
    6ada:	001a      	movs	r2, r3
    6adc:	7e03      	ldrb	r3, [r0, #24]
    6ade:	4313      	orrs	r3, r2
    6ae0:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    6ae2:	2000      	movs	r0, #0
    6ae4:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    6ae6:	7e03      	ldrb	r3, [r0, #24]
    6ae8:	2210      	movs	r2, #16
    6aea:	4313      	orrs	r3, r2
    6aec:	7603      	strb	r3, [r0, #24]
    6aee:	e7f8      	b.n	6ae2 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    6af0:	7e03      	ldrb	r3, [r0, #24]
    6af2:	2220      	movs	r2, #32
    6af4:	4313      	orrs	r3, r2
    6af6:	7603      	strb	r3, [r0, #24]
    6af8:	e7f3      	b.n	6ae2 <tc_register_callback+0x1a>
    6afa:	Address 0x00006afa is out of bounds.


00006afc <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    6afc:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    6afe:	0080      	lsls	r0, r0, #2
    6b00:	4b16      	ldr	r3, [pc, #88]	; (6b5c <_tc_interrupt_handler+0x60>)
    6b02:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    6b04:	6823      	ldr	r3, [r4, #0]
    6b06:	7a9d      	ldrb	r5, [r3, #10]
    6b08:	7e22      	ldrb	r2, [r4, #24]
    6b0a:	7e63      	ldrb	r3, [r4, #25]
    6b0c:	4013      	ands	r3, r2
    6b0e:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    6b10:	07eb      	lsls	r3, r5, #31
    6b12:	d406      	bmi.n	6b22 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    6b14:	07ab      	lsls	r3, r5, #30
    6b16:	d40b      	bmi.n	6b30 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    6b18:	06eb      	lsls	r3, r5, #27
    6b1a:	d410      	bmi.n	6b3e <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    6b1c:	06ab      	lsls	r3, r5, #26
    6b1e:	d415      	bmi.n	6b4c <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    6b20:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    6b22:	0020      	movs	r0, r4
    6b24:	68a3      	ldr	r3, [r4, #8]
    6b26:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    6b28:	2301      	movs	r3, #1
    6b2a:	6822      	ldr	r2, [r4, #0]
    6b2c:	7293      	strb	r3, [r2, #10]
    6b2e:	e7f1      	b.n	6b14 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    6b30:	0020      	movs	r0, r4
    6b32:	68e3      	ldr	r3, [r4, #12]
    6b34:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    6b36:	2302      	movs	r3, #2
    6b38:	6822      	ldr	r2, [r4, #0]
    6b3a:	7293      	strb	r3, [r2, #10]
    6b3c:	e7ec      	b.n	6b18 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    6b3e:	0020      	movs	r0, r4
    6b40:	6923      	ldr	r3, [r4, #16]
    6b42:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    6b44:	2310      	movs	r3, #16
    6b46:	6822      	ldr	r2, [r4, #0]
    6b48:	7293      	strb	r3, [r2, #10]
    6b4a:	e7e7      	b.n	6b1c <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    6b4c:	0020      	movs	r0, r4
    6b4e:	6963      	ldr	r3, [r4, #20]
    6b50:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    6b52:	6823      	ldr	r3, [r4, #0]
    6b54:	2220      	movs	r2, #32
    6b56:	729a      	strb	r2, [r3, #10]
}
    6b58:	e7e2      	b.n	6b20 <_tc_interrupt_handler+0x24>
    6b5a:	46c0      	nop			; (mov r8, r8)
    6b5c:	20001f2c 	.word	0x20001f2c

00006b60 <TC0_Handler>:
	_TC_INTERRUPT_HANDLER(0,0)
    6b60:	b510      	push	{r4, lr}
    6b62:	2000      	movs	r0, #0
    6b64:	4b01      	ldr	r3, [pc, #4]	; (6b6c <TC0_Handler+0xc>)
    6b66:	4798      	blx	r3
    6b68:	bd10      	pop	{r4, pc}
    6b6a:	46c0      	nop			; (mov r8, r8)
    6b6c:	00006afd 	.word	0x00006afd

00006b70 <TC1_Handler>:
	_TC_INTERRUPT_HANDLER(1,1)
    6b70:	b510      	push	{r4, lr}
    6b72:	2001      	movs	r0, #1
    6b74:	4b01      	ldr	r3, [pc, #4]	; (6b7c <TC1_Handler+0xc>)
    6b76:	4798      	blx	r3
    6b78:	bd10      	pop	{r4, pc}
    6b7a:	46c0      	nop			; (mov r8, r8)
    6b7c:	00006afd 	.word	0x00006afd

00006b80 <TC4_Handler>:
	_TC_INTERRUPT_HANDLER(4,2)
    6b80:	b510      	push	{r4, lr}
    6b82:	2002      	movs	r0, #2
    6b84:	4b01      	ldr	r3, [pc, #4]	; (6b8c <TC4_Handler+0xc>)
    6b86:	4798      	blx	r3
    6b88:	bd10      	pop	{r4, pc}
    6b8a:	46c0      	nop			; (mov r8, r8)
    6b8c:	00006afd 	.word	0x00006afd

00006b90 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    6b90:	b530      	push	{r4, r5, lr}
    6b92:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    6b94:	a901      	add	r1, sp, #4
    6b96:	4b0c      	ldr	r3, [pc, #48]	; (6bc8 <_tc_get_inst_index+0x38>)
    6b98:	000a      	movs	r2, r1
    6b9a:	cb32      	ldmia	r3!, {r1, r4, r5}
    6b9c:	c232      	stmia	r2!, {r1, r4, r5}
    6b9e:	cb12      	ldmia	r3!, {r1, r4}
    6ba0:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    6ba2:	9b01      	ldr	r3, [sp, #4]
    6ba4:	4298      	cmp	r0, r3
    6ba6:	d00b      	beq.n	6bc0 <_tc_get_inst_index+0x30>
    6ba8:	2301      	movs	r3, #1
    6baa:	a901      	add	r1, sp, #4
    6bac:	009a      	lsls	r2, r3, #2
    6bae:	5852      	ldr	r2, [r2, r1]
    6bb0:	4282      	cmp	r2, r0
    6bb2:	d006      	beq.n	6bc2 <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    6bb4:	3301      	adds	r3, #1
    6bb6:	2b05      	cmp	r3, #5
    6bb8:	d1f8      	bne.n	6bac <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    6bba:	2000      	movs	r0, #0
}
    6bbc:	b007      	add	sp, #28
    6bbe:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    6bc0:	2300      	movs	r3, #0
			return i;
    6bc2:	b2d8      	uxtb	r0, r3
    6bc4:	e7fa      	b.n	6bbc <_tc_get_inst_index+0x2c>
    6bc6:	46c0      	nop			; (mov r8, r8)
    6bc8:	00017660 	.word	0x00017660

00006bcc <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    6bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    6bce:	46c6      	mov	lr, r8
    6bd0:	b500      	push	{lr}
    6bd2:	b08e      	sub	sp, #56	; 0x38
    6bd4:	0004      	movs	r4, r0
    6bd6:	000d      	movs	r5, r1
    6bd8:	0016      	movs	r6, r2
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    6bda:	0008      	movs	r0, r1
    6bdc:	4bae      	ldr	r3, [pc, #696]	; (6e98 <tc_init+0x2cc>)
    6bde:	4798      	blx	r3
    6be0:	4680      	mov	r8, r0
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC4};
#elif (SAML21J) || (SAMR34J) || (SAMR35J) || (WLR089U0)
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC2_GCLK_ID, TC3_GCLK_ID, TC4_GCLK_ID};
    6be2:	ab0c      	add	r3, sp, #48	; 0x30
    6be4:	221b      	movs	r2, #27
    6be6:	701a      	strb	r2, [r3, #0]
    6be8:	705a      	strb	r2, [r3, #1]
    6bea:	3201      	adds	r2, #1
    6bec:	709a      	strb	r2, [r3, #2]
    6bee:	70da      	strb	r2, [r3, #3]
    6bf0:	3201      	adds	r2, #1
    6bf2:	711a      	strb	r2, [r3, #4]
	/* Array of MCLK APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    6bf4:	a902      	add	r1, sp, #8
    6bf6:	4ba9      	ldr	r3, [pc, #676]	; (6e9c <tc_init+0x2d0>)
    6bf8:	3314      	adds	r3, #20
    6bfa:	000a      	movs	r2, r1
    6bfc:	cb83      	ldmia	r3!, {r0, r1, r7}
    6bfe:	c283      	stmia	r2!, {r0, r1, r7}
    6c00:	cb83      	ldmia	r3!, {r0, r1, r7}
    6c02:	c283      	stmia	r2!, {r0, r1, r7}
    6c04:	cb83      	ldmia	r3!, {r0, r1, r7}
    6c06:	c283      	stmia	r2!, {r0, r1, r7}
    6c08:	681b      	ldr	r3, [r3, #0]
    6c0a:	6013      	str	r3, [r2, #0]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    6c0c:	2300      	movs	r3, #0
    6c0e:	60a3      	str	r3, [r4, #8]
    6c10:	60e3      	str	r3, [r4, #12]
    6c12:	6123      	str	r3, [r4, #16]
    6c14:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    6c16:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    6c18:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    6c1a:	4643      	mov	r3, r8
    6c1c:	009a      	lsls	r2, r3, #2
    6c1e:	4ba0      	ldr	r3, [pc, #640]	; (6ea0 <tc_init+0x2d4>)
    6c20:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    6c22:	6025      	str	r5, [r4, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    6c24:	2334      	movs	r3, #52	; 0x34
    6c26:	5cf3      	ldrb	r3, [r6, r3]
    6c28:	76a3      	strb	r3, [r4, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    6c2a:	78f3      	ldrb	r3, [r6, #3]
    6c2c:	2b08      	cmp	r3, #8
    6c2e:	d008      	beq.n	6c42 <tc_init+0x76>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    6c30:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    6c32:	682b      	ldr	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    6c34:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    6c36:	07db      	lsls	r3, r3, #31
    6c38:	d508      	bpl.n	6c4c <tc_init+0x80>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    6c3a:	b00e      	add	sp, #56	; 0x38
    6c3c:	bc04      	pop	{r2}
    6c3e:	4690      	mov	r8, r2
    6c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    6c42:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    6c44:	4642      	mov	r2, r8
    6c46:	07d2      	lsls	r2, r2, #31
    6c48:	d4f7      	bmi.n	6c3a <tc_init+0x6e>
    6c4a:	e7f1      	b.n	6c30 <tc_init+0x64>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    6c4c:	7aeb      	ldrb	r3, [r5, #11]
		return STATUS_ERR_DENIED;
    6c4e:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    6c50:	079b      	lsls	r3, r3, #30
    6c52:	d4f2      	bmi.n	6c3a <tc_init+0x6e>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    6c54:	682b      	ldr	r3, [r5, #0]
    6c56:	079b      	lsls	r3, r3, #30
    6c58:	d4ef      	bmi.n	6c3a <tc_init+0x6e>
	if (config->pwm_channel[0].enabled) {
    6c5a:	7c33      	ldrb	r3, [r6, #16]
    6c5c:	2b00      	cmp	r3, #0
    6c5e:	d112      	bne.n	6c86 <tc_init+0xba>
	if (config->pwm_channel[1].enabled) {
    6c60:	7f33      	ldrb	r3, [r6, #28]
    6c62:	2b00      	cmp	r3, #0
    6c64:	d11b      	bne.n	6c9e <tc_init+0xd2>
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    6c66:	4643      	mov	r3, r8
    6c68:	005a      	lsls	r2, r3, #1
    6c6a:	a902      	add	r1, sp, #8
    6c6c:	1c53      	adds	r3, r2, #1
    6c6e:	009b      	lsls	r3, r3, #2
    6c70:	5858      	ldr	r0, [r3, r1]
    6c72:	4643      	mov	r3, r8
    6c74:	00db      	lsls	r3, r3, #3
    6c76:	585b      	ldr	r3, [r3, r1]
	switch (bus) {
    6c78:	b2d9      	uxtb	r1, r3
    6c7a:	2904      	cmp	r1, #4
    6c7c:	d823      	bhi.n	6cc6 <tc_init+0xfa>
    6c7e:	008b      	lsls	r3, r1, #2
    6c80:	4988      	ldr	r1, [pc, #544]	; (6ea4 <tc_init+0x2d8>)
    6c82:	58cb      	ldr	r3, [r1, r3]
    6c84:	469f      	mov	pc, r3
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6c86:	a901      	add	r1, sp, #4
    6c88:	2301      	movs	r3, #1
    6c8a:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    6c8c:	2200      	movs	r2, #0
    6c8e:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    6c90:	7e32      	ldrb	r2, [r6, #24]
    6c92:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    6c94:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    6c96:	7d30      	ldrb	r0, [r6, #20]
    6c98:	4b83      	ldr	r3, [pc, #524]	; (6ea8 <tc_init+0x2dc>)
    6c9a:	4798      	blx	r3
    6c9c:	e7e0      	b.n	6c60 <tc_init+0x94>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6c9e:	a901      	add	r1, sp, #4
    6ca0:	2301      	movs	r3, #1
    6ca2:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    6ca4:	2200      	movs	r2, #0
    6ca6:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    6ca8:	3224      	adds	r2, #36	; 0x24
    6caa:	18b2      	adds	r2, r6, r2
    6cac:	7812      	ldrb	r2, [r2, #0]
    6cae:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    6cb0:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    6cb2:	331f      	adds	r3, #31
    6cb4:	18f3      	adds	r3, r6, r3
    6cb6:	7818      	ldrb	r0, [r3, #0]
    6cb8:	4b7b      	ldr	r3, [pc, #492]	; (6ea8 <tc_init+0x2dc>)
    6cba:	4798      	blx	r3
    6cbc:	e7d3      	b.n	6c66 <tc_init+0x9a>
			MCLK->APBAMASK.reg |= mask;
    6cbe:	497b      	ldr	r1, [pc, #492]	; (6eac <tc_init+0x2e0>)
    6cc0:	694b      	ldr	r3, [r1, #20]
    6cc2:	4318      	orrs	r0, r3
    6cc4:	6148      	str	r0, [r1, #20]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    6cc6:	78f3      	ldrb	r3, [r6, #3]
    6cc8:	2b08      	cmp	r3, #8
    6cca:	d100      	bne.n	6cce <tc_init+0x102>
    6ccc:	e086      	b.n	6ddc <tc_init+0x210>
	gclk_chan_config.source_generator = config->clock_source;
    6cce:	7833      	ldrb	r3, [r6, #0]
    6cd0:	466a      	mov	r2, sp
    6cd2:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    6cd4:	ab0c      	add	r3, sp, #48	; 0x30
    6cd6:	4642      	mov	r2, r8
    6cd8:	5c9f      	ldrb	r7, [r3, r2]
    6cda:	4669      	mov	r1, sp
    6cdc:	0038      	movs	r0, r7
    6cde:	4b74      	ldr	r3, [pc, #464]	; (6eb0 <tc_init+0x2e4>)
    6ce0:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    6ce2:	0038      	movs	r0, r7
    6ce4:	4b73      	ldr	r3, [pc, #460]	; (6eb4 <tc_init+0x2e8>)
    6ce6:	4798      	blx	r3
			(uint32_t)config->counter_size |
    6ce8:	78f3      	ldrb	r3, [r6, #3]
    6cea:	79f2      	ldrb	r2, [r6, #7]
    6cec:	4313      	orrs	r3, r2
			(uint32_t)config->clock_prescaler;
    6cee:	88b2      	ldrh	r2, [r6, #4]
	ctrla_tmp =
    6cf0:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    6cf2:	7a72      	ldrb	r2, [r6, #9]
    6cf4:	2a00      	cmp	r2, #0
    6cf6:	d002      	beq.n	6cfe <tc_init+0x132>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    6cf8:	2280      	movs	r2, #128	; 0x80
    6cfa:	0252      	lsls	r2, r2, #9
    6cfc:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    6cfe:	7ab2      	ldrb	r2, [r6, #10]
    6d00:	2a00      	cmp	r2, #0
    6d02:	d002      	beq.n	6d0a <tc_init+0x13e>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    6d04:	2280      	movs	r2, #128	; 0x80
    6d06:	0292      	lsls	r2, r2, #10
    6d08:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    6d0a:	7af2      	ldrb	r2, [r6, #11]
    6d0c:	2a00      	cmp	r2, #0
    6d0e:	d002      	beq.n	6d16 <tc_init+0x14a>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    6d10:	2280      	movs	r2, #128	; 0x80
    6d12:	0352      	lsls	r2, r2, #13
    6d14:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    6d16:	7b32      	ldrb	r2, [r6, #12]
    6d18:	2a00      	cmp	r2, #0
    6d1a:	d002      	beq.n	6d22 <tc_init+0x156>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    6d1c:	2280      	movs	r2, #128	; 0x80
    6d1e:	0392      	lsls	r2, r2, #14
    6d20:	4313      	orrs	r3, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    6d22:	7871      	ldrb	r1, [r6, #1]
    6d24:	0189      	lsls	r1, r1, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    6d26:	78b2      	ldrb	r2, [r6, #2]
    6d28:	01d2      	lsls	r2, r2, #7
    6d2a:	4311      	orrs	r1, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    6d2c:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6d2e:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	return (tc_module->SYNCBUSY.reg);
    6d30:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    6d32:	2b00      	cmp	r3, #0
    6d34:	d1fc      	bne.n	6d30 <tc_init+0x164>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    6d36:	6029      	str	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6d38:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6d3a:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    6d3c:	2b00      	cmp	r3, #0
    6d3e:	d1fc      	bne.n	6d3a <tc_init+0x16e>
	hw->COUNT8.WAVE.reg = config->wave_generation;
    6d40:	79b3      	ldrb	r3, [r6, #6]
    6d42:	732b      	strb	r3, [r5, #12]
	if (config->oneshot) {
    6d44:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    6d46:	1e4b      	subs	r3, r1, #1
    6d48:	4199      	sbcs	r1, r3
    6d4a:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    6d4c:	7bb3      	ldrb	r3, [r6, #14]
    6d4e:	2b00      	cmp	r3, #0
    6d50:	d001      	beq.n	6d56 <tc_init+0x18a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    6d52:	2301      	movs	r3, #1
    6d54:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6d56:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6d58:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    6d5a:	2b00      	cmp	r3, #0
    6d5c:	d1fc      	bne.n	6d58 <tc_init+0x18c>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    6d5e:	33ff      	adds	r3, #255	; 0xff
    6d60:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    6d62:	2900      	cmp	r1, #0
    6d64:	d004      	beq.n	6d70 <tc_init+0x1a4>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6d66:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6d68:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
    6d6a:	2b00      	cmp	r3, #0
    6d6c:	d1fc      	bne.n	6d68 <tc_init+0x19c>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    6d6e:	7169      	strb	r1, [r5, #5]
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    6d70:	7a33      	ldrb	r3, [r6, #8]
    6d72:	736b      	strb	r3, [r5, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6d74:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6d76:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    6d78:	2b00      	cmp	r3, #0
    6d7a:	d1fc      	bne.n	6d76 <tc_init+0x1aa>
	switch (module_inst->counter_size) {
    6d7c:	7923      	ldrb	r3, [r4, #4]
    6d7e:	2b04      	cmp	r3, #4
    6d80:	d059      	beq.n	6e36 <tc_init+0x26a>
    6d82:	2b08      	cmp	r3, #8
    6d84:	d074      	beq.n	6e70 <tc_init+0x2a4>
	return STATUS_ERR_INVALID_ARG;
    6d86:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    6d88:	2b00      	cmp	r3, #0
    6d8a:	d000      	beq.n	6d8e <tc_init+0x1c2>
    6d8c:	e755      	b.n	6c3a <tc_init+0x6e>
    6d8e:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6d90:	2b00      	cmp	r3, #0
    6d92:	d1fc      	bne.n	6d8e <tc_init+0x1c2>
				= config->counter_16_bit.value;
    6d94:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    6d96:	82ab      	strh	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6d98:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6d9a:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6d9c:	2b00      	cmp	r3, #0
    6d9e:	d1fc      	bne.n	6d9a <tc_init+0x1ce>
					config->counter_16_bit.compare_capture_channel[0];
    6da0:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    6da2:	83ab      	strh	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6da4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6da6:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6da8:	2b00      	cmp	r3, #0
    6daa:	d1fc      	bne.n	6da6 <tc_init+0x1da>
					config->counter_16_bit.compare_capture_channel[1];
    6dac:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    6dae:	83eb      	strh	r3, [r5, #30]
			return STATUS_OK;
    6db0:	2000      	movs	r0, #0
    6db2:	e742      	b.n	6c3a <tc_init+0x6e>
			MCLK->APBBMASK.reg |= mask;
    6db4:	493d      	ldr	r1, [pc, #244]	; (6eac <tc_init+0x2e0>)
    6db6:	698b      	ldr	r3, [r1, #24]
    6db8:	4318      	orrs	r0, r3
    6dba:	6188      	str	r0, [r1, #24]
    6dbc:	e783      	b.n	6cc6 <tc_init+0xfa>
			MCLK->APBCMASK.reg |= mask;
    6dbe:	493b      	ldr	r1, [pc, #236]	; (6eac <tc_init+0x2e0>)
    6dc0:	69cb      	ldr	r3, [r1, #28]
    6dc2:	4318      	orrs	r0, r3
    6dc4:	61c8      	str	r0, [r1, #28]
    6dc6:	e77e      	b.n	6cc6 <tc_init+0xfa>
			MCLK->APBDMASK.reg |= mask;
    6dc8:	4938      	ldr	r1, [pc, #224]	; (6eac <tc_init+0x2e0>)
    6dca:	6a0b      	ldr	r3, [r1, #32]
    6dcc:	4318      	orrs	r0, r3
    6dce:	6208      	str	r0, [r1, #32]
    6dd0:	e779      	b.n	6cc6 <tc_init+0xfa>
			MCLK->APBEMASK.reg |= mask;
    6dd2:	4b36      	ldr	r3, [pc, #216]	; (6eac <tc_init+0x2e0>)
    6dd4:	6a59      	ldr	r1, [r3, #36]	; 0x24
    6dd6:	4308      	orrs	r0, r1
    6dd8:	6258      	str	r0, [r3, #36]	; 0x24
    6dda:	e774      	b.n	6cc6 <tc_init+0xfa>
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    6ddc:	4643      	mov	r3, r8
    6dde:	3301      	adds	r3, #1
    6de0:	2b04      	cmp	r3, #4
    6de2:	dd00      	ble.n	6de6 <tc_init+0x21a>
    6de4:	e773      	b.n	6cce <tc_init+0x102>
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    6de6:	ab02      	add	r3, sp, #8
    6de8:	1cd1      	adds	r1, r2, #3
    6dea:	0089      	lsls	r1, r1, #2
    6dec:	58c9      	ldr	r1, [r1, r3]
    6dee:	3202      	adds	r2, #2
    6df0:	0092      	lsls	r2, r2, #2
    6df2:	58d3      	ldr	r3, [r2, r3]
	switch (bus) {
    6df4:	b2da      	uxtb	r2, r3
    6df6:	2a04      	cmp	r2, #4
    6df8:	d900      	bls.n	6dfc <tc_init+0x230>
    6dfa:	e768      	b.n	6cce <tc_init+0x102>
    6dfc:	0093      	lsls	r3, r2, #2
    6dfe:	4a2e      	ldr	r2, [pc, #184]	; (6eb8 <tc_init+0x2ec>)
    6e00:	58d3      	ldr	r3, [r2, r3]
    6e02:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    6e04:	4a29      	ldr	r2, [pc, #164]	; (6eac <tc_init+0x2e0>)
    6e06:	6953      	ldr	r3, [r2, #20]
    6e08:	4319      	orrs	r1, r3
    6e0a:	6151      	str	r1, [r2, #20]
    6e0c:	e75f      	b.n	6cce <tc_init+0x102>
			MCLK->APBBMASK.reg |= mask;
    6e0e:	4a27      	ldr	r2, [pc, #156]	; (6eac <tc_init+0x2e0>)
    6e10:	6993      	ldr	r3, [r2, #24]
    6e12:	4319      	orrs	r1, r3
    6e14:	6191      	str	r1, [r2, #24]
    6e16:	e75a      	b.n	6cce <tc_init+0x102>
			MCLK->APBCMASK.reg |= mask;
    6e18:	4a24      	ldr	r2, [pc, #144]	; (6eac <tc_init+0x2e0>)
    6e1a:	69d3      	ldr	r3, [r2, #28]
    6e1c:	4319      	orrs	r1, r3
    6e1e:	61d1      	str	r1, [r2, #28]
    6e20:	e755      	b.n	6cce <tc_init+0x102>
			MCLK->APBDMASK.reg |= mask;
    6e22:	4a22      	ldr	r2, [pc, #136]	; (6eac <tc_init+0x2e0>)
    6e24:	6a13      	ldr	r3, [r2, #32]
    6e26:	4319      	orrs	r1, r3
    6e28:	6211      	str	r1, [r2, #32]
    6e2a:	e750      	b.n	6cce <tc_init+0x102>
			MCLK->APBEMASK.reg |= mask;
    6e2c:	4b1f      	ldr	r3, [pc, #124]	; (6eac <tc_init+0x2e0>)
    6e2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    6e30:	4311      	orrs	r1, r2
    6e32:	6259      	str	r1, [r3, #36]	; 0x24
    6e34:	e74b      	b.n	6cce <tc_init+0x102>
    6e36:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6e38:	2b00      	cmp	r3, #0
    6e3a:	d1fc      	bne.n	6e36 <tc_init+0x26a>
					config->counter_8_bit.value;
    6e3c:	3328      	adds	r3, #40	; 0x28
    6e3e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    6e40:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6e42:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6e44:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6e46:	2b00      	cmp	r3, #0
    6e48:	d1fc      	bne.n	6e44 <tc_init+0x278>
					config->counter_8_bit.period;
    6e4a:	3329      	adds	r3, #41	; 0x29
    6e4c:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    6e4e:	76eb      	strb	r3, [r5, #27]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6e50:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6e52:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6e54:	2b00      	cmp	r3, #0
    6e56:	d1fc      	bne.n	6e52 <tc_init+0x286>
					config->counter_8_bit.compare_capture_channel[0];
    6e58:	332a      	adds	r3, #42	; 0x2a
    6e5a:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    6e5c:	772b      	strb	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6e5e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6e60:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6e62:	2b00      	cmp	r3, #0
    6e64:	d1fc      	bne.n	6e60 <tc_init+0x294>
					config->counter_8_bit.compare_capture_channel[1];
    6e66:	332b      	adds	r3, #43	; 0x2b
    6e68:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    6e6a:	776b      	strb	r3, [r5, #29]
			return STATUS_OK;
    6e6c:	2000      	movs	r0, #0
    6e6e:	e6e4      	b.n	6c3a <tc_init+0x6e>
    6e70:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6e72:	2b00      	cmp	r3, #0
    6e74:	d1fc      	bne.n	6e70 <tc_init+0x2a4>
				= config->counter_32_bit.value;
    6e76:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    6e78:	616b      	str	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6e7a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6e7c:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6e7e:	2b00      	cmp	r3, #0
    6e80:	d1fc      	bne.n	6e7c <tc_init+0x2b0>
			hw->COUNT32.CC[0].reg =
    6e82:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    6e84:	61eb      	str	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6e86:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6e88:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6e8a:	2b00      	cmp	r3, #0
    6e8c:	d1fc      	bne.n	6e88 <tc_init+0x2bc>
					config->counter_32_bit.compare_capture_channel[1];
    6e8e:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    6e90:	622b      	str	r3, [r5, #32]
			return STATUS_OK;
    6e92:	2000      	movs	r0, #0
    6e94:	e6d1      	b.n	6c3a <tc_init+0x6e>
    6e96:	46c0      	nop			; (mov r8, r8)
    6e98:	00006b91 	.word	0x00006b91
    6e9c:	00017660 	.word	0x00017660
    6ea0:	20001f2c 	.word	0x20001f2c
    6ea4:	00017638 	.word	0x00017638
    6ea8:	00006a69 	.word	0x00006a69
    6eac:	40000400 	.word	0x40000400
    6eb0:	0000696d 	.word	0x0000696d
    6eb4:	000068fd 	.word	0x000068fd
    6eb8:	0001764c 	.word	0x0001764c

00006ebc <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6ebc:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    6ebe:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    6ec0:	2b00      	cmp	r3, #0
    6ec2:	d1fc      	bne.n	6ebe <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    6ec4:	7113      	strb	r3, [r2, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6ec6:	6801      	ldr	r1, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    6ec8:	690b      	ldr	r3, [r1, #16]

	while (tc_is_syncing(module_inst)) {
    6eca:	2b00      	cmp	r3, #0
    6ecc:	d1fc      	bne.n	6ec8 <tc_get_count_value+0xc>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_READSYNC_Val);
    6ece:	3380      	adds	r3, #128	; 0x80
    6ed0:	7153      	strb	r3, [r2, #5]
#if (SAMC20) || (SAMC21) || (SAML21) || (SAML22) || (SAMR30) || (SAMR34) || (WLR089)
	/* wait for the CMD bits in CTRLBSET to be cleared, meaning the CMD has been executed */
	while(tc_module->CTRLBSET.reg & TC_CTRLBSET_CMD_READSYNC);	
    6ed2:	7953      	ldrb	r3, [r2, #5]
    6ed4:	b25b      	sxtb	r3, r3
    6ed6:	2b00      	cmp	r3, #0
    6ed8:	dbfb      	blt.n	6ed2 <tc_get_count_value+0x16>

	/* Read synchronization */
	tc_sync_read_count(module_inst);
	
	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    6eda:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    6edc:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    6ede:	2b00      	cmp	r3, #0
    6ee0:	d1fc      	bne.n	6edc <tc_get_count_value+0x20>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    6ee2:	7903      	ldrb	r3, [r0, #4]
    6ee4:	2b04      	cmp	r3, #4
    6ee6:	d005      	beq.n	6ef4 <tc_get_count_value+0x38>
    6ee8:	2b08      	cmp	r3, #8
    6eea:	d009      	beq.n	6f00 <tc_get_count_value+0x44>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    6eec:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    6eee:	2b00      	cmp	r3, #0
    6ef0:	d003      	beq.n	6efa <tc_get_count_value+0x3e>
}
    6ef2:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    6ef4:	7d10      	ldrb	r0, [r2, #20]
    6ef6:	b2c0      	uxtb	r0, r0
    6ef8:	e7fb      	b.n	6ef2 <tc_get_count_value+0x36>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    6efa:	8a90      	ldrh	r0, [r2, #20]
    6efc:	b280      	uxth	r0, r0
    6efe:	e7f8      	b.n	6ef2 <tc_get_count_value+0x36>
			return tc_module->COUNT32.COUNT.reg;
    6f00:	6950      	ldr	r0, [r2, #20]
    6f02:	e7f6      	b.n	6ef2 <tc_get_count_value+0x36>

00006f04 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    6f04:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(compare);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    6f06:	6804      	ldr	r4, [r0, #0]
    6f08:	6923      	ldr	r3, [r4, #16]

	while (tc_is_syncing(module_inst)) {
    6f0a:	2b00      	cmp	r3, #0
    6f0c:	d1fc      	bne.n	6f08 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    6f0e:	7903      	ldrb	r3, [r0, #4]
    6f10:	2b04      	cmp	r3, #4
    6f12:	d006      	beq.n	6f22 <tc_set_compare_value+0x1e>
    6f14:	2b08      	cmp	r3, #8
    6f16:	d028      	beq.n	6f6a <tc_set_compare_value+0x66>
    6f18:	2b00      	cmp	r3, #0
    6f1a:	d013      	beq.n	6f44 <tc_set_compare_value+0x40>
				}
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    6f1c:	2317      	movs	r3, #23
}
    6f1e:	0018      	movs	r0, r3
    6f20:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    6f22:	2317      	movs	r3, #23
			if (channel_index <
    6f24:	2901      	cmp	r1, #1
    6f26:	d8fa      	bhi.n	6f1e <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    6f28:	7e83      	ldrb	r3, [r0, #26]
    6f2a:	2b00      	cmp	r3, #0
    6f2c:	d005      	beq.n	6f3a <tc_set_compare_value+0x36>
							(uint8_t)compare;
    6f2e:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CCBUF[channel_index].reg =
    6f30:	1861      	adds	r1, r4, r1
    6f32:	3130      	adds	r1, #48	; 0x30
    6f34:	700a      	strb	r2, [r1, #0]
				return STATUS_OK;
    6f36:	2300      	movs	r3, #0
    6f38:	e7f1      	b.n	6f1e <tc_set_compare_value+0x1a>
							(uint8_t)compare;
    6f3a:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CC[channel_index].reg  =
    6f3c:	1864      	adds	r4, r4, r1
    6f3e:	7722      	strb	r2, [r4, #28]
				return STATUS_OK;
    6f40:	2300      	movs	r3, #0
    6f42:	e7ec      	b.n	6f1e <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    6f44:	2317      	movs	r3, #23
			if (channel_index <
    6f46:	2901      	cmp	r1, #1
    6f48:	d8e9      	bhi.n	6f1e <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    6f4a:	7e83      	ldrb	r3, [r0, #26]
    6f4c:	2b00      	cmp	r3, #0
    6f4e:	d005      	beq.n	6f5c <tc_set_compare_value+0x58>
							(uint16_t)compare;
    6f50:	b292      	uxth	r2, r2
					tc_module->COUNT16.CCBUF[channel_index].reg =
    6f52:	3118      	adds	r1, #24
    6f54:	0049      	lsls	r1, r1, #1
    6f56:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    6f58:	2300      	movs	r3, #0
    6f5a:	e7e0      	b.n	6f1e <tc_set_compare_value+0x1a>
							(uint16_t)compare;
    6f5c:	b292      	uxth	r2, r2
					tc_module->COUNT16.CC[channel_index].reg =
    6f5e:	310c      	adds	r1, #12
    6f60:	0049      	lsls	r1, r1, #1
    6f62:	1864      	adds	r4, r4, r1
    6f64:	80a2      	strh	r2, [r4, #4]
				return STATUS_OK;
    6f66:	2300      	movs	r3, #0
    6f68:	e7d9      	b.n	6f1e <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    6f6a:	2317      	movs	r3, #23
			if (channel_index <
    6f6c:	2901      	cmp	r1, #1
    6f6e:	d8d6      	bhi.n	6f1e <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    6f70:	7e83      	ldrb	r3, [r0, #26]
    6f72:	2b00      	cmp	r3, #0
    6f74:	d105      	bne.n	6f82 <tc_set_compare_value+0x7e>
					tc_module->COUNT32.CC[channel_index].reg =
    6f76:	3106      	adds	r1, #6
    6f78:	0089      	lsls	r1, r1, #2
    6f7a:	1864      	adds	r4, r4, r1
    6f7c:	6062      	str	r2, [r4, #4]
				return STATUS_OK;
    6f7e:	2300      	movs	r3, #0
    6f80:	e7cd      	b.n	6f1e <tc_set_compare_value+0x1a>
					tc_module->COUNT32.CCBUF[channel_index].reg =
    6f82:	310c      	adds	r1, #12
    6f84:	0089      	lsls	r1, r1, #2
    6f86:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    6f88:	2300      	movs	r3, #0
    6f8a:	e7c8      	b.n	6f1e <tc_set_compare_value+0x1a>

00006f8c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    6f8c:	e7fe      	b.n	6f8c <Dummy_Handler>
    6f8e:	Address 0x00006f8e is out of bounds.


00006f90 <Reset_Handler>:
{
    6f90:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    6f92:	4a1a      	ldr	r2, [pc, #104]	; (6ffc <Reset_Handler+0x6c>)
    6f94:	4b1a      	ldr	r3, [pc, #104]	; (7000 <Reset_Handler+0x70>)
    6f96:	429a      	cmp	r2, r3
    6f98:	d011      	beq.n	6fbe <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    6f9a:	001a      	movs	r2, r3
    6f9c:	4b19      	ldr	r3, [pc, #100]	; (7004 <Reset_Handler+0x74>)
    6f9e:	429a      	cmp	r2, r3
    6fa0:	d20d      	bcs.n	6fbe <Reset_Handler+0x2e>
    6fa2:	4a19      	ldr	r2, [pc, #100]	; (7008 <Reset_Handler+0x78>)
    6fa4:	3303      	adds	r3, #3
    6fa6:	1a9b      	subs	r3, r3, r2
    6fa8:	089b      	lsrs	r3, r3, #2
    6faa:	3301      	adds	r3, #1
    6fac:	009b      	lsls	r3, r3, #2
    6fae:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    6fb0:	4813      	ldr	r0, [pc, #76]	; (7000 <Reset_Handler+0x70>)
    6fb2:	4912      	ldr	r1, [pc, #72]	; (6ffc <Reset_Handler+0x6c>)
    6fb4:	588c      	ldr	r4, [r1, r2]
    6fb6:	5084      	str	r4, [r0, r2]
    6fb8:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    6fba:	429a      	cmp	r2, r3
    6fbc:	d1fa      	bne.n	6fb4 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    6fbe:	4a13      	ldr	r2, [pc, #76]	; (700c <Reset_Handler+0x7c>)
    6fc0:	4b13      	ldr	r3, [pc, #76]	; (7010 <Reset_Handler+0x80>)
    6fc2:	429a      	cmp	r2, r3
    6fc4:	d20a      	bcs.n	6fdc <Reset_Handler+0x4c>
    6fc6:	43d3      	mvns	r3, r2
    6fc8:	4911      	ldr	r1, [pc, #68]	; (7010 <Reset_Handler+0x80>)
    6fca:	185b      	adds	r3, r3, r1
    6fcc:	2103      	movs	r1, #3
    6fce:	438b      	bics	r3, r1
    6fd0:	3304      	adds	r3, #4
    6fd2:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    6fd4:	2100      	movs	r1, #0
    6fd6:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    6fd8:	4293      	cmp	r3, r2
    6fda:	d1fc      	bne.n	6fd6 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    6fdc:	4a0d      	ldr	r2, [pc, #52]	; (7014 <Reset_Handler+0x84>)
    6fde:	21ff      	movs	r1, #255	; 0xff
    6fe0:	4b0d      	ldr	r3, [pc, #52]	; (7018 <Reset_Handler+0x88>)
    6fe2:	438b      	bics	r3, r1
    6fe4:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    6fe6:	4a0d      	ldr	r2, [pc, #52]	; (701c <Reset_Handler+0x8c>)
    6fe8:	6853      	ldr	r3, [r2, #4]
    6fea:	397f      	subs	r1, #127	; 0x7f
    6fec:	430b      	orrs	r3, r1
    6fee:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    6ff0:	4b0b      	ldr	r3, [pc, #44]	; (7020 <Reset_Handler+0x90>)
    6ff2:	4798      	blx	r3
        main();
    6ff4:	4b0b      	ldr	r3, [pc, #44]	; (7024 <Reset_Handler+0x94>)
    6ff6:	4798      	blx	r3
    6ff8:	e7fe      	b.n	6ff8 <Reset_Handler+0x68>
    6ffa:	46c0      	nop			; (mov r8, r8)
    6ffc:	0001855c 	.word	0x0001855c
    7000:	20000000 	.word	0x20000000
    7004:	20000084 	.word	0x20000084
    7008:	20000004 	.word	0x20000004
    700c:	20000088 	.word	0x20000088
    7010:	200034dc 	.word	0x200034dc
    7014:	e000ed00 	.word	0xe000ed00
    7018:	00000000 	.word	0x00000000
    701c:	41004000 	.word	0x41004000
    7020:	00016151 	.word	0x00016151
    7024:	000077cd 	.word	0x000077cd

00007028 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    7028:	b5f0      	push	{r4, r5, r6, r7, lr}
    702a:	46c6      	mov	lr, r8
    702c:	b500      	push	{lr}
    702e:	000c      	movs	r4, r1
    7030:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    7032:	2800      	cmp	r0, #0
    7034:	d10f      	bne.n	7056 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    7036:	2a00      	cmp	r2, #0
    7038:	dd11      	ble.n	705e <_read+0x36>
    703a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    703c:	4e09      	ldr	r6, [pc, #36]	; (7064 <_read+0x3c>)
    703e:	4d0a      	ldr	r5, [pc, #40]	; (7068 <_read+0x40>)
    7040:	6830      	ldr	r0, [r6, #0]
    7042:	0021      	movs	r1, r4
    7044:	682b      	ldr	r3, [r5, #0]
    7046:	4798      	blx	r3
		ptr++;
    7048:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    704a:	42bc      	cmp	r4, r7
    704c:	d1f8      	bne.n	7040 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    704e:	4640      	mov	r0, r8
    7050:	bc04      	pop	{r2}
    7052:	4690      	mov	r8, r2
    7054:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    7056:	2301      	movs	r3, #1
    7058:	425b      	negs	r3, r3
    705a:	4698      	mov	r8, r3
    705c:	e7f7      	b.n	704e <_read+0x26>
	for (; len > 0; --len) {
    705e:	4680      	mov	r8, r0
    7060:	e7f5      	b.n	704e <_read+0x26>
    7062:	46c0      	nop			; (mov r8, r8)
    7064:	20001f48 	.word	0x20001f48
    7068:	20001f40 	.word	0x20001f40

0000706c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    706c:	b5f0      	push	{r4, r5, r6, r7, lr}
    706e:	46c6      	mov	lr, r8
    7070:	b500      	push	{lr}
    7072:	000e      	movs	r6, r1
    7074:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    7076:	3801      	subs	r0, #1
    7078:	2802      	cmp	r0, #2
    707a:	d810      	bhi.n	709e <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    707c:	2a00      	cmp	r2, #0
    707e:	d011      	beq.n	70a4 <_write+0x38>
    7080:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    7082:	4b0c      	ldr	r3, [pc, #48]	; (70b4 <_write+0x48>)
    7084:	4698      	mov	r8, r3
    7086:	4f0c      	ldr	r7, [pc, #48]	; (70b8 <_write+0x4c>)
    7088:	4643      	mov	r3, r8
    708a:	6818      	ldr	r0, [r3, #0]
    708c:	5d31      	ldrb	r1, [r6, r4]
    708e:	683b      	ldr	r3, [r7, #0]
    7090:	4798      	blx	r3
    7092:	2800      	cmp	r0, #0
    7094:	db08      	blt.n	70a8 <_write+0x3c>
			return -1;
		}
		++nChars;
    7096:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    7098:	42a5      	cmp	r5, r4
    709a:	d1f5      	bne.n	7088 <_write+0x1c>
    709c:	e006      	b.n	70ac <_write+0x40>
		return -1;
    709e:	2401      	movs	r4, #1
    70a0:	4264      	negs	r4, r4
    70a2:	e003      	b.n	70ac <_write+0x40>
	for (; len != 0; --len) {
    70a4:	0014      	movs	r4, r2
    70a6:	e001      	b.n	70ac <_write+0x40>
			return -1;
    70a8:	2401      	movs	r4, #1
    70aa:	4264      	negs	r4, r4
	}
	return nChars;
}
    70ac:	0020      	movs	r0, r4
    70ae:	bc04      	pop	{r2}
    70b0:	4690      	mov	r8, r2
    70b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    70b4:	20001f48 	.word	0x20001f48
    70b8:	20001f44 	.word	0x20001f44

000070bc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    70bc:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    70be:	4a06      	ldr	r2, [pc, #24]	; (70d8 <_sbrk+0x1c>)
    70c0:	6812      	ldr	r2, [r2, #0]
    70c2:	2a00      	cmp	r2, #0
    70c4:	d004      	beq.n	70d0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    70c6:	4a04      	ldr	r2, [pc, #16]	; (70d8 <_sbrk+0x1c>)
    70c8:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    70ca:	18c3      	adds	r3, r0, r3
    70cc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    70ce:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    70d0:	4902      	ldr	r1, [pc, #8]	; (70dc <_sbrk+0x20>)
    70d2:	4a01      	ldr	r2, [pc, #4]	; (70d8 <_sbrk+0x1c>)
    70d4:	6011      	str	r1, [r2, #0]
    70d6:	e7f6      	b.n	70c6 <_sbrk+0xa>
    70d8:	200000f0 	.word	0x200000f0
    70dc:	200054e0 	.word	0x200054e0

000070e0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    70e0:	2001      	movs	r0, #1
    70e2:	4240      	negs	r0, r0
    70e4:	4770      	bx	lr

000070e6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    70e6:	2380      	movs	r3, #128	; 0x80
    70e8:	019b      	lsls	r3, r3, #6
    70ea:	604b      	str	r3, [r1, #4]

	return 0;
}
    70ec:	2000      	movs	r0, #0
    70ee:	4770      	bx	lr

000070f0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    70f0:	2001      	movs	r0, #1
    70f2:	4770      	bx	lr

000070f4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    70f4:	2000      	movs	r0, #0
    70f6:	4770      	bx	lr

000070f8 <_exit>:

extern void _exit(int status)
{
	asm("BKPT #0");
    70f8:	be00      	bkpt	0x0000
    70fa:	e7fe      	b.n	70fa <_exit+0x2>

000070fc <_kill>:
}

extern void _kill(int pid, int sig)
{
	return;
}
    70fc:	4770      	bx	lr

000070fe <_getpid>:

extern int _getpid(void)
{
	return -1;
}
    70fe:	2001      	movs	r0, #1
    7100:	4240      	negs	r0, r0
    7102:	4770      	bx	lr

00007104 <sal_FillSubKey>:
		}
	}
}

static void sal_FillSubKey( uint8_t *source, uint8_t *key, uint8_t size)
{
    7104:	b530      	push	{r4, r5, lr}
	uint8_t i = 0;
	uint8_t carry = 0;

	i=size;

	while(i--)
    7106:	1e53      	subs	r3, r2, #1
    7108:	b2db      	uxtb	r3, r3
    710a:	2a00      	cmp	r2, #0
    710c:	d00b      	beq.n	7126 <sal_FillSubKey+0x22>
    710e:	2400      	movs	r4, #0
	{
		key[i] = (source[i] << 1) | carry;
    7110:	18c5      	adds	r5, r0, r3
    7112:	782a      	ldrb	r2, [r5, #0]
    7114:	0052      	lsls	r2, r2, #1
    7116:	4322      	orrs	r2, r4
    7118:	54ca      	strb	r2, [r1, r3]
		carry = !!(source[i] & 0x80);
    711a:	782c      	ldrb	r4, [r5, #0]
    711c:	09e4      	lsrs	r4, r4, #7
	while(i--)
    711e:	3b01      	subs	r3, #1
    7120:	b2db      	uxtb	r3, r3
    7122:	2bff      	cmp	r3, #255	; 0xff
    7124:	d1f4      	bne.n	7110 <sal_FillSubKey+0xc>
	}
}
    7126:	bd30      	pop	{r4, r5, pc}

00007128 <SAL_AESEncode>:
{
    7128:	b510      	push	{r4, lr}
    712a:	b084      	sub	sp, #16
    712c:	0004      	movs	r4, r0
    712e:	0011      	movs	r1, r2
	memcpy(useKey, key, sizeof(useKey));
    7130:	2210      	movs	r2, #16
    7132:	4668      	mov	r0, sp
    7134:	4b04      	ldr	r3, [pc, #16]	; (7148 <SAL_AESEncode+0x20>)
    7136:	4798      	blx	r3
	AESEncode(buffer, useKey);
    7138:	4669      	mov	r1, sp
    713a:	0020      	movs	r0, r4
    713c:	4b03      	ldr	r3, [pc, #12]	; (714c <SAL_AESEncode+0x24>)
    713e:	4798      	blx	r3
}
    7140:	2000      	movs	r0, #0
    7142:	b004      	add	sp, #16
    7144:	bd10      	pop	{r4, pc}
    7146:	46c0      	nop			; (mov r8, r8)
    7148:	000161b7 	.word	0x000161b7
    714c:	0000c80d 	.word	0x0000c80d

00007150 <SAL_DeriveSessionKey>:
{
    7150:	b510      	push	{r4, lr}
	sal_status = SAL_AESEncode(block, src_key, key);
    7152:	4b01      	ldr	r3, [pc, #4]	; (7158 <SAL_DeriveSessionKey+0x8>)
    7154:	4798      	blx	r3
}
    7156:	bd10      	pop	{r4, pc}
    7158:	00007129 	.word	0x00007129

0000715c <SAL_Read>:
}
    715c:	2000      	movs	r0, #0
    715e:	4770      	bx	lr

00007160 <SAL_AESCmac>:
{
    7160:	b5f0      	push	{r4, r5, r6, r7, lr}
    7162:	46d6      	mov	lr, sl
    7164:	464f      	mov	r7, r9
    7166:	4646      	mov	r6, r8
    7168:	b5c0      	push	{r6, r7, lr}
    716a:	b0a4      	sub	sp, #144	; 0x90
    716c:	9001      	str	r0, [sp, #4]
    716e:	000f      	movs	r7, r1
    7170:	9102      	str	r1, [sp, #8]
    7172:	9203      	str	r2, [sp, #12]
    7174:	469a      	mov	sl, r3
    7176:	ab2c      	add	r3, sp, #176	; 0xb0
    7178:	881c      	ldrh	r4, [r3, #0]
	uint8_t const_Rb[16] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    717a:	ae08      	add	r6, sp, #32
    717c:	2210      	movs	r2, #16
    717e:	2100      	movs	r1, #0
    7180:	0030      	movs	r0, r6
    7182:	4d64      	ldr	r5, [pc, #400]	; (7314 <SAL_AESCmac+0x1b4>)
    7184:	47a8      	blx	r5
    7186:	2387      	movs	r3, #135	; 0x87
    7188:	73f3      	strb	r3, [r6, #15]
	memset(l, 0, sizeof(l));
    718a:	2210      	movs	r2, #16
    718c:	2100      	movs	r1, #0
    718e:	a804      	add	r0, sp, #16
    7190:	47a8      	blx	r5
	SAL_AESEncode(l, key_type, key);
    7192:	9a01      	ldr	r2, [sp, #4]
    7194:	0039      	movs	r1, r7
    7196:	a804      	add	r0, sp, #16
    7198:	4b5f      	ldr	r3, [pc, #380]	; (7318 <SAL_AESCmac+0x1b8>)
    719a:	4798      	blx	r3
	if ( (l[0] & 0x80) == 0x00 )  // MSB( bufferLocal[0] ) is '0'
    719c:	ab04      	add	r3, sp, #16
    719e:	781b      	ldrb	r3, [r3, #0]
    71a0:	2b7f      	cmp	r3, #127	; 0x7f
    71a2:	d82d      	bhi.n	7200 <SAL_AESCmac+0xa0>
		sal_FillSubKey( l, k1, (sizeof(l) ) );
    71a4:	2210      	movs	r2, #16
    71a6:	a920      	add	r1, sp, #128	; 0x80
    71a8:	a804      	add	r0, sp, #16
    71aa:	4b5c      	ldr	r3, [pc, #368]	; (731c <SAL_AESCmac+0x1bc>)
    71ac:	4798      	blx	r3
	if ( (k1[0] & 0x80) == 0x00 )   // MSB( k1[0] ) is '0'
    71ae:	ab20      	add	r3, sp, #128	; 0x80
    71b0:	781b      	ldrb	r3, [r3, #0]
    71b2:	2b7f      	cmp	r3, #127	; 0x7f
    71b4:	d834      	bhi.n	7220 <SAL_AESCmac+0xc0>
		sal_FillSubKey( k1, k2, (sizeof(l)) );
    71b6:	2210      	movs	r2, #16
    71b8:	a91c      	add	r1, sp, #112	; 0x70
    71ba:	a820      	add	r0, sp, #128	; 0x80
    71bc:	4b57      	ldr	r3, [pc, #348]	; (731c <SAL_AESCmac+0x1bc>)
    71be:	4798      	blx	r3
	n = (size + 15) >> 4;
    71c0:	0023      	movs	r3, r4
    71c2:	330f      	adds	r3, #15
    71c4:	111d      	asrs	r5, r3, #4
    71c6:	b2aa      	uxth	r2, r5
    71c8:	4690      	mov	r8, r2
	if (n == 0)
    71ca:	2a00      	cmp	r2, #0
    71cc:	d038      	beq.n	7240 <SAL_AESCmac+0xe0>
	if ( flag == 1 )
    71ce:	0722      	lsls	r2, r4, #28
    71d0:	d138      	bne.n	7244 <SAL_AESCmac+0xe4>
		for (i=((n-1) << 4); i<(n << 4); i++)
    71d2:	4642      	mov	r2, r8
    71d4:	3a01      	subs	r2, #1
    71d6:	0112      	lsls	r2, r2, #4
    71d8:	b296      	uxth	r6, r2
    71da:	4f51      	ldr	r7, [pc, #324]	; (7320 <SAL_AESCmac+0x1c0>)
    71dc:	401f      	ands	r7, r3
    71de:	42be      	cmp	r6, r7
    71e0:	da54      	bge.n	728c <SAL_AESCmac+0x12c>
    71e2:	0033      	movs	r3, r6
			mLast[j] = input[i] ^ k1[j];
    71e4:	a910      	add	r1, sp, #64	; 0x40
    71e6:	aa20      	add	r2, sp, #128	; 0x80
    71e8:	1b98      	subs	r0, r3, r6
    71ea:	b280      	uxth	r0, r0
    71ec:	4654      	mov	r4, sl
    71ee:	5ce4      	ldrb	r4, [r4, r3]
    71f0:	5c15      	ldrb	r5, [r2, r0]
    71f2:	406c      	eors	r4, r5
    71f4:	540c      	strb	r4, [r1, r0]
		for (i=((n-1) << 4); i<(n << 4); i++)
    71f6:	3301      	adds	r3, #1
    71f8:	b29b      	uxth	r3, r3
    71fa:	42bb      	cmp	r3, r7
    71fc:	dbf4      	blt.n	71e8 <SAL_AESCmac+0x88>
    71fe:	e045      	b.n	728c <SAL_AESCmac+0x12c>
		sal_FillSubKey( l, k1, (sizeof(l) ) );
    7200:	2210      	movs	r2, #16
    7202:	a920      	add	r1, sp, #128	; 0x80
    7204:	a804      	add	r0, sp, #16
    7206:	4b45      	ldr	r3, [pc, #276]	; (731c <SAL_AESCmac+0x1bc>)
    7208:	4798      	blx	r3
    720a:	2300      	movs	r3, #0
			k1[i] ^= const_Rb[i];
    720c:	aa20      	add	r2, sp, #128	; 0x80
    720e:	a908      	add	r1, sp, #32
    7210:	5c98      	ldrb	r0, [r3, r2]
    7212:	5c5d      	ldrb	r5, [r3, r1]
    7214:	4068      	eors	r0, r5
    7216:	5498      	strb	r0, [r3, r2]
    7218:	3301      	adds	r3, #1
		for (i=0; i<sizeof(l); i++)
    721a:	2b10      	cmp	r3, #16
    721c:	d1f8      	bne.n	7210 <SAL_AESCmac+0xb0>
    721e:	e7c6      	b.n	71ae <SAL_AESCmac+0x4e>
		sal_FillSubKey( k1, k2, (sizeof(l) ) );
    7220:	2210      	movs	r2, #16
    7222:	a91c      	add	r1, sp, #112	; 0x70
    7224:	a820      	add	r0, sp, #128	; 0x80
    7226:	4b3d      	ldr	r3, [pc, #244]	; (731c <SAL_AESCmac+0x1bc>)
    7228:	4798      	blx	r3
    722a:	2300      	movs	r3, #0
			k2[i] = k2[i] ^ const_Rb[i];
    722c:	aa1c      	add	r2, sp, #112	; 0x70
    722e:	a908      	add	r1, sp, #32
    7230:	5c98      	ldrb	r0, [r3, r2]
    7232:	5c5d      	ldrb	r5, [r3, r1]
    7234:	4068      	eors	r0, r5
    7236:	5498      	strb	r0, [r3, r2]
    7238:	3301      	adds	r3, #1
		for (i=0; i<sizeof(l); i++)
    723a:	2b10      	cmp	r3, #16
    723c:	d1f8      	bne.n	7230 <SAL_AESCmac+0xd0>
    723e:	e7bf      	b.n	71c0 <SAL_AESCmac+0x60>
		n = 1;
    7240:	2301      	movs	r3, #1
    7242:	4698      	mov	r8, r3
		ptr = &input[size - (size%16)];
    7244:	230f      	movs	r3, #15
    7246:	0020      	movs	r0, r4
    7248:	4398      	bics	r0, r3
    724a:	2300      	movs	r3, #0
			if ( i < (size%16) )
    724c:	220f      	movs	r2, #15
    724e:	4014      	ands	r4, r2
					padded[i] = 0x00;
    7250:	a90c      	add	r1, sp, #48	; 0x30
    7252:	2700      	movs	r7, #0
					padded[i] = 0x80;
    7254:	2680      	movs	r6, #128	; 0x80
				padded[i] = ptr[i];
    7256:	4450      	add	r0, sl
    7258:	e005      	b.n	7266 <SAL_AESCmac+0x106>
				if ( i == (size%16) )
    725a:	4294      	cmp	r4, r2
    725c:	d009      	beq.n	7272 <SAL_AESCmac+0x112>
					padded[i] = 0x00;
    725e:	545f      	strb	r7, [r3, r1]
    7260:	3301      	adds	r3, #1
		for (i=0; i<16; i++)
    7262:	2b10      	cmp	r3, #16
    7264:	d007      	beq.n	7276 <SAL_AESCmac+0x116>
    7266:	b29a      	uxth	r2, r3
			if ( i < (size%16) )
    7268:	4294      	cmp	r4, r2
    726a:	d9f6      	bls.n	725a <SAL_AESCmac+0xfa>
				padded[i] = ptr[i];
    726c:	5cc2      	ldrb	r2, [r0, r3]
    726e:	545a      	strb	r2, [r3, r1]
    7270:	e7f6      	b.n	7260 <SAL_AESCmac+0x100>
					padded[i] = 0x80;
    7272:	545e      	strb	r6, [r3, r1]
    7274:	e7f4      	b.n	7260 <SAL_AESCmac+0x100>
    7276:	2300      	movs	r3, #0
			mLast[i] = padded[i] ^ k2[i];
    7278:	a810      	add	r0, sp, #64	; 0x40
    727a:	a90c      	add	r1, sp, #48	; 0x30
    727c:	aa1c      	add	r2, sp, #112	; 0x70
    727e:	5c5c      	ldrb	r4, [r3, r1]
    7280:	5c9d      	ldrb	r5, [r3, r2]
    7282:	406c      	eors	r4, r5
    7284:	541c      	strb	r4, [r3, r0]
    7286:	3301      	adds	r3, #1
		for (i=0; i<sizeof(mLast); i++)
    7288:	2b10      	cmp	r3, #16
    728a:	d1f8      	bne.n	727e <SAL_AESCmac+0x11e>
	memset(x, 0, sizeof(x));
    728c:	2210      	movs	r2, #16
    728e:	2100      	movs	r1, #0
    7290:	a818      	add	r0, sp, #96	; 0x60
    7292:	4b20      	ldr	r3, [pc, #128]	; (7314 <SAL_AESCmac+0x1b4>)
    7294:	4798      	blx	r3
	for (i=0; i<(n-1); i++)
    7296:	2301      	movs	r3, #1
    7298:	425b      	negs	r3, r3
    729a:	4443      	add	r3, r8
    729c:	4699      	mov	r9, r3
    729e:	2000      	movs	r0, #0
    72a0:	2700      	movs	r7, #0
    72a2:	2b00      	cmp	r3, #0
    72a4:	dd1a      	ble.n	72dc <SAL_AESCmac+0x17c>
			y[j] = x[j] ^ input[(i << 4)+j];
    72a6:	ad14      	add	r5, sp, #80	; 0x50
    72a8:	ac18      	add	r4, sp, #96	; 0x60
		memcpy(x, y, sizeof(y));
    72aa:	4e1e      	ldr	r6, [pc, #120]	; (7324 <SAL_AESCmac+0x1c4>)
			y[j] = x[j] ^ input[(i << 4)+j];
    72ac:	0100      	lsls	r0, r0, #4
    72ae:	2300      	movs	r3, #0
    72b0:	4450      	add	r0, sl
    72b2:	5cc2      	ldrb	r2, [r0, r3]
    72b4:	5d19      	ldrb	r1, [r3, r4]
    72b6:	404a      	eors	r2, r1
    72b8:	555a      	strb	r2, [r3, r5]
    72ba:	3301      	adds	r3, #1
		for (j=0; j<16; j++)
    72bc:	2b10      	cmp	r3, #16
    72be:	d1f8      	bne.n	72b2 <SAL_AESCmac+0x152>
		memcpy(x, y, sizeof(y));
    72c0:	2210      	movs	r2, #16
    72c2:	0029      	movs	r1, r5
    72c4:	0020      	movs	r0, r4
    72c6:	47b0      	blx	r6
		SAL_AESEncode(x, key_type, key);
    72c8:	9a01      	ldr	r2, [sp, #4]
    72ca:	9902      	ldr	r1, [sp, #8]
    72cc:	0020      	movs	r0, r4
    72ce:	4b12      	ldr	r3, [pc, #72]	; (7318 <SAL_AESCmac+0x1b8>)
    72d0:	4798      	blx	r3
	for (i=0; i<(n-1); i++)
    72d2:	3701      	adds	r7, #1
    72d4:	b2bf      	uxth	r7, r7
    72d6:	0038      	movs	r0, r7
    72d8:	454f      	cmp	r7, r9
    72da:	dbe7      	blt.n	72ac <SAL_AESCmac+0x14c>
    72dc:	2300      	movs	r3, #0
		y[i] = x[i] ^ mLast[i];
    72de:	ac14      	add	r4, sp, #80	; 0x50
    72e0:	a818      	add	r0, sp, #96	; 0x60
    72e2:	a910      	add	r1, sp, #64	; 0x40
    72e4:	5c1a      	ldrb	r2, [r3, r0]
    72e6:	5c5d      	ldrb	r5, [r3, r1]
    72e8:	406a      	eors	r2, r5
    72ea:	551a      	strb	r2, [r3, r4]
    72ec:	3301      	adds	r3, #1
	for (i=0; i<sizeof(x); i++)
    72ee:	2b10      	cmp	r3, #16
    72f0:	d1f8      	bne.n	72e4 <SAL_AESCmac+0x184>
	SAL_AESEncode(y, key_type, key);
    72f2:	9a01      	ldr	r2, [sp, #4]
    72f4:	9902      	ldr	r1, [sp, #8]
    72f6:	a814      	add	r0, sp, #80	; 0x50
    72f8:	4b07      	ldr	r3, [pc, #28]	; (7318 <SAL_AESCmac+0x1b8>)
    72fa:	4798      	blx	r3
	memcpy(output, y, sizeof(y));
    72fc:	2210      	movs	r2, #16
    72fe:	a914      	add	r1, sp, #80	; 0x50
    7300:	9803      	ldr	r0, [sp, #12]
    7302:	4b08      	ldr	r3, [pc, #32]	; (7324 <SAL_AESCmac+0x1c4>)
    7304:	4798      	blx	r3
}
    7306:	2000      	movs	r0, #0
    7308:	b024      	add	sp, #144	; 0x90
    730a:	bc1c      	pop	{r2, r3, r4}
    730c:	4690      	mov	r8, r2
    730e:	4699      	mov	r9, r3
    7310:	46a2      	mov	sl, r4
    7312:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7314:	000161c9 	.word	0x000161c9
    7318:	00007129 	.word	0x00007129
    731c:	00007105 	.word	0x00007105
    7320:	000ffff0 	.word	0x000ffff0
    7324:	000161b7 	.word	0x000161b7

00007328 <DemoOutput_Greeting>:

bool PUSH_BUTTON_pressed;
MIWI_TICK PUSH_BUTTON_press_time;

void DemoOutput_Greeting(void)
{    
    7328:	b510      	push	{r4, lr}
		LCDDisplay((char *)"Simple LoRa P2P Demo on \n SAMR34 Node ", 0, true);
	#endif
#endif
    #if defined (ENABLE_CONSOLE)
        #if defined(PROTOCOL_P2P)
			printf("\n\r-----------------------------------------------------\n\r-----------------------------------------------------");
    732a:	480e      	ldr	r0, [pc, #56]	; (7364 <DemoOutput_Greeting+0x3c>)
    732c:	4c0e      	ldr	r4, [pc, #56]	; (7368 <DemoOutput_Greeting+0x40>)
    732e:	47a0      	blx	r4
            printf("\r\nStarting Node 1 of Simple Demo for LoRa P2P Stack ...");  
    7330:	480e      	ldr	r0, [pc, #56]	; (736c <DemoOutput_Greeting+0x44>)
    7332:	47a0      	blx	r4
        #endif
		#if defined(ENABLE_SLEEP_FEATURE)
			printf("\r\nReduced Function Device (RFD) operations") ;
		#else
			printf("\r\nFull Function Device (FFD) operations") ;
    7334:	480e      	ldr	r0, [pc, #56]	; (7370 <DemoOutput_Greeting+0x48>)
    7336:	47a0      	blx	r4
		#endif
        printf("\r\n     RF Transceiver: SX_1276");
    7338:	480e      	ldr	r0, [pc, #56]	; (7374 <DemoOutput_Greeting+0x4c>)
    733a:	47a0      	blx	r4
        printf("\r\n     Demo Instruction:");
    733c:	480e      	ldr	r0, [pc, #56]	; (7378 <DemoOutput_Greeting+0x50>)
    733e:	47a0      	blx	r4
        printf("\r\n                     Power on the board until LED 1 lights up");
    7340:	480e      	ldr	r0, [pc, #56]	; (737c <DemoOutput_Greeting+0x54>)
    7342:	47a0      	blx	r4
        printf("\r\n                     to indicate connecting with peer.");
    7344:	480e      	ldr	r0, [pc, #56]	; (7380 <DemoOutput_Greeting+0x58>)
    7346:	47a0      	blx	r4
        printf("\r\n                     Push Button 1 to broadcast message.");
    7348:	480e      	ldr	r0, [pc, #56]	; (7384 <DemoOutput_Greeting+0x5c>)
    734a:	47a0      	blx	r4
        printf("\r\n                     LED 1 will be toggled upon receiving messages. ");
    734c:	480e      	ldr	r0, [pc, #56]	; (7388 <DemoOutput_Greeting+0x60>)
    734e:	47a0      	blx	r4
        printf("\r\n\r\n");		
    7350:	480e      	ldr	r0, [pc, #56]	; (738c <DemoOutput_Greeting+0x64>)
    7352:	4c0f      	ldr	r4, [pc, #60]	; (7390 <DemoOutput_Greeting+0x68>)
    7354:	47a0      	blx	r4
		#ifdef PERIODIC_TX
			printf("Periodic Transmission = Enable\r\n") ;
		#else
			printf("Periodic Transmission = Disable\r\n") ;
    7356:	480f      	ldr	r0, [pc, #60]	; (7394 <DemoOutput_Greeting+0x6c>)
    7358:	47a0      	blx	r4
		#endif
		#ifdef DUTY_CYCLING
			printf("Duty Cycling support = Enable\r\n") ;
		#else
			printf("Duty Cycling support = Disable\r\n") ;
    735a:	480f      	ldr	r0, [pc, #60]	; (7398 <DemoOutput_Greeting+0x70>)
    735c:	47a0      	blx	r4
		#endif
		#ifdef LBT_SUPPORT_ENABLED
			printf("LBT support = Enable\r\n") ;
		#else
			printf("LBT support = Disable\r\n") ;
    735e:	480f      	ldr	r0, [pc, #60]	; (739c <DemoOutput_Greeting+0x74>)
    7360:	47a0      	blx	r4
		#endif
    #endif 
}        
    7362:	bd10      	pop	{r4, pc}
    7364:	0001773c 	.word	0x0001773c
    7368:	00016771 	.word	0x00016771
    736c:	000177ac 	.word	0x000177ac
    7370:	000177e4 	.word	0x000177e4
    7374:	0001780c 	.word	0x0001780c
    7378:	0001782c 	.word	0x0001782c
    737c:	00017848 	.word	0x00017848
    7380:	00017888 	.word	0x00017888
    7384:	000178c4 	.word	0x000178c4
    7388:	00017900 	.word	0x00017900
    738c:	00017948 	.word	0x00017948
    7390:	0001688d 	.word	0x0001688d
    7394:	0001794c 	.word	0x0001794c
    7398:	00017970 	.word	0x00017970
    739c:	00017990 	.word	0x00017990

000073a0 <DemoOutput_Channel>:
	LCDDisplay((char *)"SW: Use Nwk Freezer \nPress in 5 sec", 0, false);	
	delay_ms(1000);
#endif
}
void DemoOutput_Channel(uint8_t channel, uint8_t Step)
{
    73a0:	b570      	push	{r4, r5, r6, lr}
    73a2:	0004      	movs	r4, r0
    if( Step == 0 )
    73a4:	2900      	cmp	r1, #0
    73a6:	d009      	beq.n	73bc <DemoOutput_Channel+0x1c>
#if defined (ENABLE_LCD)
        LCDDisplay((char *)"Connected Peer on \n Channel ", channel, true);
#endif
#if defined (ENABLE_CONSOLE)
        #if !defined(MIWIKIT)
        printf("\r\nConnected Peer on Channel ");
    73a8:	4809      	ldr	r0, [pc, #36]	; (73d0 <DemoOutput_Channel+0x30>)
    73aa:	4d0a      	ldr	r5, [pc, #40]	; (73d4 <DemoOutput_Channel+0x34>)
    73ac:	47a8      	blx	r5
        printf("%d",channel);
    73ae:	0021      	movs	r1, r4
    73b0:	4809      	ldr	r0, [pc, #36]	; (73d8 <DemoOutput_Channel+0x38>)
    73b2:	47a8      	blx	r5
        printf("\r\n");
    73b4:	4809      	ldr	r0, [pc, #36]	; (73dc <DemoOutput_Channel+0x3c>)
    73b6:	4b0a      	ldr	r3, [pc, #40]	; (73e0 <DemoOutput_Channel+0x40>)
    73b8:	4798      	blx	r3
        #endif
#endif
    }
}    
    73ba:	bd70      	pop	{r4, r5, r6, pc}
        printf("\r\nConnecting Peer on Channel ");
    73bc:	4809      	ldr	r0, [pc, #36]	; (73e4 <DemoOutput_Channel+0x44>)
    73be:	4d05      	ldr	r5, [pc, #20]	; (73d4 <DemoOutput_Channel+0x34>)
    73c0:	47a8      	blx	r5
        printf("%d",channel);
    73c2:	0021      	movs	r1, r4
    73c4:	4804      	ldr	r0, [pc, #16]	; (73d8 <DemoOutput_Channel+0x38>)
    73c6:	47a8      	blx	r5
        printf("\r\n");
    73c8:	4804      	ldr	r0, [pc, #16]	; (73dc <DemoOutput_Channel+0x3c>)
    73ca:	4b05      	ldr	r3, [pc, #20]	; (73e0 <DemoOutput_Channel+0x40>)
    73cc:	4798      	blx	r3
    73ce:	e7f4      	b.n	73ba <DemoOutput_Channel+0x1a>
    73d0:	000176d4 	.word	0x000176d4
    73d4:	00016771 	.word	0x00016771
    73d8:	000176d0 	.word	0x000176d0
    73dc:	000180d4 	.word	0x000180d4
    73e0:	0001688d 	.word	0x0001688d
    73e4:	000176b0 	.word	0x000176b0

000073e8 <DemoOutput_Instruction>:
		LCDDisplay((char *)"SW     : Broadcast \nBUTTON1: Unicast", 0, false);
	#else
		LCDDisplay((char *)"SW: Broadcast", 0, false);
	#endif
#endif
}
    73e8:	4770      	bx	lr
    73ea:	Address 0x000073ea is out of bounds.


000073ec <DemoOutput_HandleMessage>:


void DemoOutput_HandleMessage(void)
{
    73ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;

    if( rxMessage.flags.bits.secEn )
    73ee:	4b2a      	ldr	r3, [pc, #168]	; (7498 <DemoOutput_HandleMessage+0xac>)
    73f0:	781b      	ldrb	r3, [r3, #0]
    73f2:	071b      	lsls	r3, r3, #28
    73f4:	d426      	bmi.n	7444 <DemoOutput_HandleMessage+0x58>
    {
        sio2host_tx((uint8_t *)"Secured ", sizeof("Secured "));
    }

    if( rxMessage.flags.bits.broadcast )
    73f6:	4b28      	ldr	r3, [pc, #160]	; (7498 <DemoOutput_HandleMessage+0xac>)
    73f8:	781b      	ldrb	r3, [r3, #0]
    73fa:	079b      	lsls	r3, r3, #30
    73fc:	d027      	beq.n	744e <DemoOutput_HandleMessage+0x62>
    {
        sio2host_tx((uint8_t *)"Broadcast Packet with RSSI ", sizeof("Broadcast Packet with RSSI "));
    73fe:	211c      	movs	r1, #28
    7400:	4826      	ldr	r0, [pc, #152]	; (749c <DemoOutput_HandleMessage+0xb0>)
    7402:	4b27      	ldr	r3, [pc, #156]	; (74a0 <DemoOutput_HandleMessage+0xb4>)
    7404:	4798      	blx	r3
    }
    else
    {
        sio2host_tx((uint8_t *)"Unicast Packet with RSSI ",sizeof("Unicast Packet with RSSI "));
    }
    printf("%02x", rxMessage.PacketRSSI);
    7406:	4c24      	ldr	r4, [pc, #144]	; (7498 <DemoOutput_HandleMessage+0xac>)
    7408:	7b61      	ldrb	r1, [r4, #13]
    740a:	4826      	ldr	r0, [pc, #152]	; (74a4 <DemoOutput_HandleMessage+0xb8>)
    740c:	4b26      	ldr	r3, [pc, #152]	; (74a8 <DemoOutput_HandleMessage+0xbc>)
    740e:	4798      	blx	r3
    if( rxMessage.flags.bits.srcPrsnt )
    7410:	7823      	ldrb	r3, [r4, #0]
    7412:	065b      	lsls	r3, r3, #25
    7414:	d420      	bmi.n	7458 <DemoOutput_HandleMessage+0x6c>
            {
                printf("%x", rxMessage.SourceAddress[MY_ADDRESS_LENGTH-1-i]);
            }    
        }
    }
    sio2host_tx((uint8_t *)": ",sizeof(": "));
    7416:	2103      	movs	r1, #3
    7418:	4824      	ldr	r0, [pc, #144]	; (74ac <DemoOutput_HandleMessage+0xc0>)
    741a:	4b21      	ldr	r3, [pc, #132]	; (74a0 <DemoOutput_HandleMessage+0xb4>)
    741c:	4798      	blx	r3
    
    for(i = 0; i < rxMessage.PayloadSize; i++)
    741e:	4b1e      	ldr	r3, [pc, #120]	; (7498 <DemoOutput_HandleMessage+0xac>)
    7420:	7b1b      	ldrb	r3, [r3, #12]
    7422:	2b00      	cmp	r3, #0
    7424:	d00a      	beq.n	743c <DemoOutput_HandleMessage+0x50>
    7426:	2400      	movs	r4, #0
    {
        sio2host_putchar(rxMessage.Payload[i]);
    7428:	4d1b      	ldr	r5, [pc, #108]	; (7498 <DemoOutput_HandleMessage+0xac>)
    742a:	4e21      	ldr	r6, [pc, #132]	; (74b0 <DemoOutput_HandleMessage+0xc4>)
    742c:	68ab      	ldr	r3, [r5, #8]
    742e:	5d18      	ldrb	r0, [r3, r4]
    7430:	47b0      	blx	r6
    for(i = 0; i < rxMessage.PayloadSize; i++)
    7432:	3401      	adds	r4, #1
    7434:	b2e4      	uxtb	r4, r4
    7436:	7b2b      	ldrb	r3, [r5, #12]
    7438:	42a3      	cmp	r3, r4
    743a:	d8f7      	bhi.n	742c <DemoOutput_HandleMessage+0x40>
    }   
	printf("\r\n");    
    743c:	481d      	ldr	r0, [pc, #116]	; (74b4 <DemoOutput_HandleMessage+0xc8>)
    743e:	4b1e      	ldr	r3, [pc, #120]	; (74b8 <DemoOutput_HandleMessage+0xcc>)
    7440:	4798      	blx	r3
} 
    7442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        sio2host_tx((uint8_t *)"Secured ", sizeof("Secured "));
    7444:	2109      	movs	r1, #9
    7446:	481d      	ldr	r0, [pc, #116]	; (74bc <DemoOutput_HandleMessage+0xd0>)
    7448:	4b15      	ldr	r3, [pc, #84]	; (74a0 <DemoOutput_HandleMessage+0xb4>)
    744a:	4798      	blx	r3
    744c:	e7d3      	b.n	73f6 <DemoOutput_HandleMessage+0xa>
        sio2host_tx((uint8_t *)"Unicast Packet with RSSI ",sizeof("Unicast Packet with RSSI "));
    744e:	211a      	movs	r1, #26
    7450:	481b      	ldr	r0, [pc, #108]	; (74c0 <DemoOutput_HandleMessage+0xd4>)
    7452:	4b13      	ldr	r3, [pc, #76]	; (74a0 <DemoOutput_HandleMessage+0xb4>)
    7454:	4798      	blx	r3
    7456:	e7d6      	b.n	7406 <DemoOutput_HandleMessage+0x1a>
        sio2host_tx((uint8_t *)" from ", sizeof(" from "));
    7458:	2107      	movs	r1, #7
    745a:	481a      	ldr	r0, [pc, #104]	; (74c4 <DemoOutput_HandleMessage+0xd8>)
    745c:	4b10      	ldr	r3, [pc, #64]	; (74a0 <DemoOutput_HandleMessage+0xb4>)
    745e:	4798      	blx	r3
        if( rxMessage.flags.bits.altSrcAddr )
    7460:	4b0d      	ldr	r3, [pc, #52]	; (7498 <DemoOutput_HandleMessage+0xac>)
    7462:	781b      	ldrb	r3, [r3, #0]
    7464:	2407      	movs	r4, #7
    7466:	2b7f      	cmp	r3, #127	; 0x7f
    7468:	d809      	bhi.n	747e <DemoOutput_HandleMessage+0x92>
                printf("%x", rxMessage.SourceAddress[MY_ADDRESS_LENGTH-1-i]);
    746a:	4f0b      	ldr	r7, [pc, #44]	; (7498 <DemoOutput_HandleMessage+0xac>)
    746c:	4e16      	ldr	r6, [pc, #88]	; (74c8 <DemoOutput_HandleMessage+0xdc>)
    746e:	4d0e      	ldr	r5, [pc, #56]	; (74a8 <DemoOutput_HandleMessage+0xbc>)
    7470:	687b      	ldr	r3, [r7, #4]
    7472:	5d19      	ldrb	r1, [r3, r4]
    7474:	0030      	movs	r0, r6
    7476:	47a8      	blx	r5
            for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    7478:	3c01      	subs	r4, #1
    747a:	d2f9      	bcs.n	7470 <DemoOutput_HandleMessage+0x84>
    747c:	e7cb      	b.n	7416 <DemoOutput_HandleMessage+0x2a>
            printf( "%x", rxMessage.SourceAddress[1]);
    747e:	4e06      	ldr	r6, [pc, #24]	; (7498 <DemoOutput_HandleMessage+0xac>)
    7480:	6873      	ldr	r3, [r6, #4]
    7482:	7859      	ldrb	r1, [r3, #1]
    7484:	4d10      	ldr	r5, [pc, #64]	; (74c8 <DemoOutput_HandleMessage+0xdc>)
    7486:	0028      	movs	r0, r5
    7488:	4c07      	ldr	r4, [pc, #28]	; (74a8 <DemoOutput_HandleMessage+0xbc>)
    748a:	47a0      	blx	r4
            printf( "%x", rxMessage.SourceAddress[0]);
    748c:	6873      	ldr	r3, [r6, #4]
    748e:	7819      	ldrb	r1, [r3, #0]
    7490:	0028      	movs	r0, r5
    7492:	47a0      	blx	r4
    7494:	e7bf      	b.n	7416 <DemoOutput_HandleMessage+0x2a>
    7496:	46c0      	nop			; (mov r8, r8)
    7498:	2000294c 	.word	0x2000294c
    749c:	000179b4 	.word	0x000179b4
    74a0:	0000bced 	.word	0x0000bced
    74a4:	000179ec 	.word	0x000179ec
    74a8:	00016771 	.word	0x00016771
    74ac:	00017a00 	.word	0x00017a00
    74b0:	0000bd19 	.word	0x0000bd19
    74b4:	000180d4 	.word	0x000180d4
    74b8:	0001688d 	.word	0x0001688d
    74bc:	000179a8 	.word	0x000179a8
    74c0:	000179d0 	.word	0x000179d0
    74c4:	000179f4 	.word	0x000179f4
    74c8:	000179fc 	.word	0x000179fc

000074cc <DemoOutput_UpdateTxRx>:
void DemoOutput_UpdateTxRx(uint8_t TxNum, uint8_t RxNum)
{
#if defined (ENABLE_LCD)
    LCDTRXCount(TxNum, RxNum);  
#endif
}
    74cc:	4770      	bx	lr
    74ce:	Address 0x000074ce is out of bounds.


000074d0 <DemoOutput_ChannelError>:

void DemoOutput_ChannelError(uint8_t channel)
{
    74d0:	b570      	push	{r4, r5, r6, lr}
    74d2:	0005      	movs	r5, r0
    #if defined (ENABLE_CONSOLE)
        printf("\r\nSelection of channel ");
    74d4:	4804      	ldr	r0, [pc, #16]	; (74e8 <DemoOutput_ChannelError+0x18>)
    74d6:	4c05      	ldr	r4, [pc, #20]	; (74ec <DemoOutput_ChannelError+0x1c>)
    74d8:	47a0      	blx	r4
        printf("%d", channel);
    74da:	0029      	movs	r1, r5
    74dc:	4804      	ldr	r0, [pc, #16]	; (74f0 <DemoOutput_ChannelError+0x20>)
    74de:	47a0      	blx	r4
        printf(" is not supported in current configuration.\r\n");
    74e0:	4804      	ldr	r0, [pc, #16]	; (74f4 <DemoOutput_ChannelError+0x24>)
    74e2:	4b05      	ldr	r3, [pc, #20]	; (74f8 <DemoOutput_ChannelError+0x28>)
    74e4:	4798      	blx	r3
    #endif
}
    74e6:	bd70      	pop	{r4, r5, r6, pc}
    74e8:	000176f4 	.word	0x000176f4
    74ec:	00016771 	.word	0x00016771
    74f0:	000176d0 	.word	0x000176d0
    74f4:	0001770c 	.word	0x0001770c
    74f8:	0001688d 	.word	0x0001688d

000074fc <DemoOutput_BroadcastFail>:
    LCDDisplay((char *)" Unicast Failed", 0, true);
#endif
}    

void DemoOutput_BroadcastFail(void)
{
    74fc:	b510      	push	{r4, lr}
	#if defined (ENABLE_CONSOLE)
	printf("\r\nBroadcast Failed\r\n");
    74fe:	4802      	ldr	r0, [pc, #8]	; (7508 <DemoOutput_BroadcastFail+0xc>)
    7500:	4b02      	ldr	r3, [pc, #8]	; (750c <DemoOutput_BroadcastFail+0x10>)
    7502:	4798      	blx	r3
	#endif
	#if defined (ENABLE_LCD)
	LCDDisplay((char *)" Broadcast Failed", 0, true);
	#endif
}    
    7504:	bd10      	pop	{r4, pc}
    7506:	46c0      	nop			; (mov r8, r8)
    7508:	0001769c 	.word	0x0001769c
    750c:	0001688d 	.word	0x0001688d

00007510 <ButtonPressed>:
 *
 * Note:
 ********************************************************************/

uint8_t ButtonPressed(void)
{
    7510:	b500      	push	{lr}
    7512:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    7514:	a901      	add	r1, sp, #4
    7516:	2300      	movs	r3, #0
    7518:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    751a:	2201      	movs	r2, #1
    751c:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    751e:	708b      	strb	r3, [r1, #2]
	struct port_config test_conf;
	port_get_config_defaults(&test_conf);
	test_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(PIN_PA07, &test_conf);
    7520:	2007      	movs	r0, #7
    7522:	4b12      	ldr	r3, [pc, #72]	; (756c <ButtonPressed+0x5c>)
    7524:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    7526:	4b12      	ldr	r3, [pc, #72]	; (7570 <ButtonPressed+0x60>)
    7528:	6a1b      	ldr	r3, [r3, #32]
	
    MIWI_TICK tickDifference;
    //if(!port_pin_get_input_level(BUTTON_0_PIN))
	if(port_pin_get_input_level(PIN_PA07))
    752a:	061b      	lsls	r3, r3, #24
    752c:	d50f      	bpl.n	754e <ButtonPressed+0x3e>
    {
        //if the button was previously not pressed
        if(PUSH_BUTTON_pressed == false)
    752e:	4b11      	ldr	r3, [pc, #68]	; (7574 <ButtonPressed+0x64>)
    7530:	781b      	ldrb	r3, [r3, #0]
        if(tickDifference.Val > DEBOUNCE_TIME)
        {
            PUSH_BUTTON_pressed = false;
        }
    }
    return 0;
    7532:	2000      	movs	r0, #0
        if(PUSH_BUTTON_pressed == false)
    7534:	2b00      	cmp	r3, #0
    7536:	d001      	beq.n	753c <ButtonPressed+0x2c>
}
    7538:	b003      	add	sp, #12
    753a:	bd00      	pop	{pc}
            PUSH_BUTTON_pressed = true;
    753c:	2201      	movs	r2, #1
    753e:	4b0d      	ldr	r3, [pc, #52]	; (7574 <ButtonPressed+0x64>)
    7540:	701a      	strb	r2, [r3, #0]
            PUSH_BUTTON_press_time.Val = MiWi_TickGet();
    7542:	4b0d      	ldr	r3, [pc, #52]	; (7578 <ButtonPressed+0x68>)
    7544:	4798      	blx	r3
    7546:	4b0d      	ldr	r3, [pc, #52]	; (757c <ButtonPressed+0x6c>)
    7548:	6018      	str	r0, [r3, #0]
            return 1;
    754a:	2001      	movs	r0, #1
    754c:	e7f4      	b.n	7538 <ButtonPressed+0x28>
		t.Val = MiWi_TickGet();
    754e:	4b0a      	ldr	r3, [pc, #40]	; (7578 <ButtonPressed+0x68>)
    7550:	4798      	blx	r3
        tickDifference.Val = MiWi_TickGetDiff(t,PUSH_BUTTON_press_time);
    7552:	4b0a      	ldr	r3, [pc, #40]	; (757c <ButtonPressed+0x6c>)
    7554:	6819      	ldr	r1, [r3, #0]
    7556:	4b0a      	ldr	r3, [pc, #40]	; (7580 <ButtonPressed+0x70>)
    7558:	4798      	blx	r3
        if(tickDifference.Val > DEBOUNCE_TIME)
    755a:	4b0a      	ldr	r3, [pc, #40]	; (7584 <ButtonPressed+0x74>)
    755c:	4298      	cmp	r0, r3
    755e:	d902      	bls.n	7566 <ButtonPressed+0x56>
            PUSH_BUTTON_pressed = false;
    7560:	2200      	movs	r2, #0
    7562:	4b04      	ldr	r3, [pc, #16]	; (7574 <ButtonPressed+0x64>)
    7564:	701a      	strb	r2, [r3, #0]
    return 0;
    7566:	2000      	movs	r0, #0
    7568:	e7e6      	b.n	7538 <ButtonPressed+0x28>
    756a:	46c0      	nop			; (mov r8, r8)
    756c:	00004ba9 	.word	0x00004ba9
    7570:	40002800 	.word	0x40002800
    7574:	20001f4c 	.word	0x20001f4c
    7578:	0000ba8d 	.word	0x0000ba8d
    757c:	20001f50 	.word	0x20001f50
    7580:	0000baed 	.word	0x0000baed
    7584:	00003fff 	.word	0x00003fff

00007588 <TxToutCallback>:
}
#endif // #ifdef DUTY_CYCLING


void TxToutCallback(void)
{
    7588:	b510      	push	{r4, lr}
	#if defined(ENABLE_SLEEP_FEATURE)
	send_data = 0;
	#endif // #if defined(ENABLE_SLEEP_FEATURE)
	/* That bring the node back to continuous transaction cycle */
	PHY_DataConf(TRANSACTION_EXPIRED);
    758a:	2005      	movs	r0, #5
    758c:	4b03      	ldr	r3, [pc, #12]	; (759c <TxToutCallback+0x14>)
    758e:	4798      	blx	r3
	SwTimerStop(TxTimerId);
    7590:	4b03      	ldr	r3, [pc, #12]	; (75a0 <TxToutCallback+0x18>)
    7592:	7818      	ldrb	r0, [r3, #0]
    7594:	4b03      	ldr	r3, [pc, #12]	; (75a4 <TxToutCallback+0x1c>)
    7596:	4798      	blx	r3
}
    7598:	bd10      	pop	{r4, pc}
    759a:	46c0      	nop			; (mov r8, r8)
    759c:	0000980d 	.word	0x0000980d
    75a0:	200000f7 	.word	0x200000f7
    75a4:	0000cf3d 	.word	0x0000cf3d

000075a8 <dataConfcb>:


// Transmission callback
void dataConfcb(uint8_t handle, miwi_status_t status, uint8_t* msgPointer)
{
    75a8:	b510      	push	{r4, lr}
    75aa:	0014      	movs	r4, r2
#if defined (ENABLE_CONSOLE)
	printf("\nData Confirm: Handle: %d status:%d \r\n", handle, status);
    75ac:	000a      	movs	r2, r1
    75ae:	0001      	movs	r1, r0
    75b0:	4805      	ldr	r0, [pc, #20]	; (75c8 <dataConfcb+0x20>)
    75b2:	4b06      	ldr	r3, [pc, #24]	; (75cc <dataConfcb+0x24>)
    75b4:	4798      	blx	r3
#endif // #if defined (ENABLE_CONSOLE)
#if defined(ENABLE_SLEEP_FEATURE)
	send_data = 0;
#endif // #if defined(ENABLE_SLEEP_FEATURE)
	/* Stop transmission timeout timer */
	SwTimerStop(TxTimerId);
    75b6:	4b06      	ldr	r3, [pc, #24]	; (75d0 <dataConfcb+0x28>)
    75b8:	7818      	ldrb	r0, [r3, #0]
    75ba:	4b06      	ldr	r3, [pc, #24]	; (75d4 <dataConfcb+0x2c>)
    75bc:	4798      	blx	r3
	//printf("\nDette er en test \r");
	/* Free payload buffer allocated */
	MiMem_Free(msgPointer);
    75be:	0020      	movs	r0, r4
    75c0:	4b05      	ldr	r3, [pc, #20]	; (75d8 <dataConfcb+0x30>)
    75c2:	4798      	blx	r3
	SwTimerStart (DutyCyclingTimerId, MS_TO_US(dutyCyclingDurationMilliSec) , 0/*SW_TIMEOUT_RELATIVE*/, (void *)dutyCyclingCallback, NULL) ;
#if defined (ENABLE_CONSOLE)
	printf("Send next data after: %ld ms\r\n", dutyCyclingDurationMilliSec) ;
#endif
#endif // #ifdef DUTY_CYCLING
}
    75c4:	bd10      	pop	{r4, pc}
    75c6:	46c0      	nop			; (mov r8, r8)
    75c8:	00017a4c 	.word	0x00017a4c
    75cc:	00016771 	.word	0x00016771
    75d0:	200000f7 	.word	0x200000f7
    75d4:	0000cf3d 	.word	0x0000cf3d
    75d8:	0000b909 	.word	0x0000b909

000075dc <T_BroadcastMessageToFerry>:
}



void T_BroadcastMessageToFerry(uint8_t signal)
{
    75dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    75de:	46c6      	mov	lr, r8
    75e0:	b500      	push	{lr}
    75e2:	b086      	sub	sp, #24
    75e4:	0007      	movs	r7, r0
	uint8_t* dataPtr = NULL;
	uint8_t dataLen = 0;
	uint16_t broadcastAddress = 0xFFFF;
    75e6:	2201      	movs	r2, #1
    75e8:	4252      	negs	r2, r2
    75ea:	2316      	movs	r3, #22
    75ec:	446b      	add	r3, sp
    75ee:	801a      	strh	r2, [r3, #0]
	
	dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PAYLOAD_TERMINAL));
    75f0:	2010      	movs	r0, #16
    75f2:	4b1c      	ldr	r3, [pc, #112]	; (7664 <T_BroadcastMessageToFerry+0x88>)
    75f4:	4798      	blx	r3
    75f6:	1e06      	subs	r6, r0, #0
	
	if (NULL == dataPtr) return;
    75f8:	d026      	beq.n	7648 <T_BroadcastMessageToFerry+0x6c>
	
	for (i = 0; i < PAYLOAD_TERMINAL; i++)
    75fa:	2200      	movs	r2, #0
    75fc:	4b1a      	ldr	r3, [pc, #104]	; (7668 <T_BroadcastMessageToFerry+0x8c>)
    75fe:	701a      	strb	r2, [r3, #0]
	{
		dataPtr[dataLen++] = signal;
		sio2host_putchar(dataPtr[i]);
    7600:	001d      	movs	r5, r3
    7602:	4b1a      	ldr	r3, [pc, #104]	; (766c <T_BroadcastMessageToFerry+0x90>)
    7604:	4698      	mov	r8, r3
		dataPtr[dataLen++] = signal;
    7606:	1c54      	adds	r4, r2, #1
    7608:	b2e4      	uxtb	r4, r4
    760a:	54b7      	strb	r7, [r6, r2]
		sio2host_putchar(dataPtr[i]);
    760c:	782b      	ldrb	r3, [r5, #0]
    760e:	5cf0      	ldrb	r0, [r6, r3]
    7610:	47c0      	blx	r8
	for (i = 0; i < PAYLOAD_TERMINAL; i++)
    7612:	782b      	ldrb	r3, [r5, #0]
    7614:	3301      	adds	r3, #1
    7616:	b2db      	uxtb	r3, r3
    7618:	702b      	strb	r3, [r5, #0]
		dataPtr[dataLen++] = signal;
    761a:	0022      	movs	r2, r4
	for (i = 0; i < PAYLOAD_TERMINAL; i++)
    761c:	2b00      	cmp	r3, #0
    761e:	d0f2      	beq.n	7606 <T_BroadcastMessageToFerry+0x2a>
	}
			
	// Broadcast the message
	if (MiApp_SendData(SHORT_ADDR_LEN, (uint8_t *)&broadcastAddress, dataLen, dataPtr, msghandledemo++, true, dataConfcb) == false)
    7620:	4a13      	ldr	r2, [pc, #76]	; (7670 <T_BroadcastMessageToFerry+0x94>)
    7622:	7813      	ldrb	r3, [r2, #0]
    7624:	1c59      	adds	r1, r3, #1
    7626:	7011      	strb	r1, [r2, #0]
    7628:	4a12      	ldr	r2, [pc, #72]	; (7674 <T_BroadcastMessageToFerry+0x98>)
    762a:	9202      	str	r2, [sp, #8]
    762c:	2201      	movs	r2, #1
    762e:	9201      	str	r2, [sp, #4]
    7630:	9300      	str	r3, [sp, #0]
    7632:	0033      	movs	r3, r6
    7634:	0022      	movs	r2, r4
    7636:	2116      	movs	r1, #22
    7638:	4469      	add	r1, sp
    763a:	2002      	movs	r0, #2
    763c:	4c0e      	ldr	r4, [pc, #56]	; (7678 <T_BroadcastMessageToFerry+0x9c>)
    763e:	47a0      	blx	r4
    7640:	2800      	cmp	r0, #0
    7642:	d105      	bne.n	7650 <T_BroadcastMessageToFerry+0x74>
	{
		DemoOutput_BroadcastFail();
    7644:	4b0d      	ldr	r3, [pc, #52]	; (767c <T_BroadcastMessageToFerry+0xa0>)
    7646:	4798      	blx	r3
	else
	{
		SwTimerStart(TxTimerId, MS_TO_US(5000), 0, (void *)TxToutCallback, NULL);
	}
	
}
    7648:	b006      	add	sp, #24
    764a:	bc04      	pop	{r2}
    764c:	4690      	mov	r8, r2
    764e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SwTimerStart(TxTimerId, MS_TO_US(5000), 0, (void *)TxToutCallback, NULL);
    7650:	4b0b      	ldr	r3, [pc, #44]	; (7680 <T_BroadcastMessageToFerry+0xa4>)
    7652:	7818      	ldrb	r0, [r3, #0]
    7654:	2300      	movs	r3, #0
    7656:	9300      	str	r3, [sp, #0]
    7658:	4b0a      	ldr	r3, [pc, #40]	; (7684 <T_BroadcastMessageToFerry+0xa8>)
    765a:	2200      	movs	r2, #0
    765c:	490a      	ldr	r1, [pc, #40]	; (7688 <T_BroadcastMessageToFerry+0xac>)
    765e:	4c0b      	ldr	r4, [pc, #44]	; (768c <T_BroadcastMessageToFerry+0xb0>)
    7660:	47a0      	blx	r4
    7662:	e7f1      	b.n	7648 <T_BroadcastMessageToFerry+0x6c>
    7664:	0000b84d 	.word	0x0000b84d
    7668:	20001f68 	.word	0x20001f68
    766c:	0000bd19 	.word	0x0000bd19
    7670:	200000f6 	.word	0x200000f6
    7674:	000075a9 	.word	0x000075a9
    7678:	0000a68d 	.word	0x0000a68d
    767c:	000074fd 	.word	0x000074fd
    7680:	200000f7 	.word	0x200000f7
    7684:	00007589 	.word	0x00007589
    7688:	004c4b40 	.word	0x004c4b40
    768c:	0000cc25 	.word	0x0000cc25

00007690 <run_system>:
{
    7690:	b510      	push	{r4, lr}
	usart_read_buffer_job(&UART_LoRa, (uint8_t*)rx_buffer_LoRa, LoRa_UART_RX_BUFFER_LENGTH);
    7692:	2201      	movs	r2, #1
    7694:	4906      	ldr	r1, [pc, #24]	; (76b0 <run_system+0x20>)
    7696:	4807      	ldr	r0, [pc, #28]	; (76b4 <run_system+0x24>)
    7698:	4b07      	ldr	r3, [pc, #28]	; (76b8 <run_system+0x28>)
    769a:	4798      	blx	r3
	uint8_t pressedButton = ButtonPressed();
    769c:	4b07      	ldr	r3, [pc, #28]	; (76bc <run_system+0x2c>)
    769e:	4798      	blx	r3
	switch(pressedButton)
    76a0:	2801      	cmp	r0, #1
    76a2:	d000      	beq.n	76a6 <run_system+0x16>
}
    76a4:	bd10      	pop	{r4, pc}
			T_BroadcastMessageToFerry(TERMINAL_A_REQUEST);
    76a6:	3043      	adds	r0, #67	; 0x43
    76a8:	4b05      	ldr	r3, [pc, #20]	; (76c0 <run_system+0x30>)
    76aa:	4798      	blx	r3
}
    76ac:	e7fa      	b.n	76a4 <run_system+0x14>
    76ae:	46c0      	nop			; (mov r8, r8)
    76b0:	20001f54 	.word	0x20001f54
    76b4:	20001fa0 	.word	0x20001fa0
    76b8:	00006185 	.word	0x00006185
    76bc:	00007511 	.word	0x00007511
    76c0:	000075dd 	.word	0x000075dd

000076c4 <T_SendReceivedLoRaMessage>:
	//}
}
*/

void T_SendReceivedLoRaMessage(uint8_t message)
{
    76c4:	b500      	push	{lr}
    76c6:	b083      	sub	sp, #12
    76c8:	466b      	mov	r3, sp
    76ca:	71d8      	strb	r0, [r3, #7]
	//if (T_A_CheckIdentifier(message))
	//{		

		switch(message)
    76cc:	3841      	subs	r0, #65	; 0x41
    76ce:	b2c3      	uxtb	r3, r0
    76d0:	2b04      	cmp	r3, #4
    76d2:	d807      	bhi.n	76e4 <T_SendReceivedLoRaMessage+0x20>
    76d4:	0098      	lsls	r0, r3, #2
    76d6:	4b10      	ldr	r3, [pc, #64]	; (7718 <T_SendReceivedLoRaMessage+0x54>)
    76d8:	581b      	ldr	r3, [r3, r0]
    76da:	469f      	mov	pc, r3
		{
			case DOCK_COMP_AT_TEAID:
				
				// UART message
				// Open gate at terminal A
				UART_SAM_To_RPi(&message);
    76dc:	466b      	mov	r3, sp
    76de:	1dd8      	adds	r0, r3, #7
    76e0:	4b0e      	ldr	r3, [pc, #56]	; (771c <T_SendReceivedLoRaMessage+0x58>)
    76e2:	4798      	blx	r3
				break;
				
			
		}
	//}
}
    76e4:	b003      	add	sp, #12
    76e6:	bd00      	pop	{pc}
				UART_SAM_To_RPi(&message);
    76e8:	466b      	mov	r3, sp
    76ea:	1dd8      	adds	r0, r3, #7
    76ec:	4b0b      	ldr	r3, [pc, #44]	; (771c <T_SendReceivedLoRaMessage+0x58>)
    76ee:	4798      	blx	r3
				break;
    76f0:	e7f8      	b.n	76e4 <T_SendReceivedLoRaMessage+0x20>
				UART_SAM_To_RPi(&message);
    76f2:	466b      	mov	r3, sp
    76f4:	1dd8      	adds	r0, r3, #7
    76f6:	4b09      	ldr	r3, [pc, #36]	; (771c <T_SendReceivedLoRaMessage+0x58>)
    76f8:	4798      	blx	r3
				break;
    76fa:	e7f3      	b.n	76e4 <T_SendReceivedLoRaMessage+0x20>
				UART_SAM_To_RPi(&message);
    76fc:	466b      	mov	r3, sp
    76fe:	1dd8      	adds	r0, r3, #7
    7700:	4b06      	ldr	r3, [pc, #24]	; (771c <T_SendReceivedLoRaMessage+0x58>)
    7702:	4798      	blx	r3
				break;
    7704:	e7ee      	b.n	76e4 <T_SendReceivedLoRaMessage+0x20>
		port_base->OUTCLR.reg = pin_mask;
    7706:	2280      	movs	r2, #128	; 0x80
    7708:	02d2      	lsls	r2, r2, #11
    770a:	4b05      	ldr	r3, [pc, #20]	; (7720 <T_SendReceivedLoRaMessage+0x5c>)
    770c:	615a      	str	r2, [r3, #20]
				UART_SAM_To_RPi(&message);
    770e:	466b      	mov	r3, sp
    7710:	1dd8      	adds	r0, r3, #7
    7712:	4b02      	ldr	r3, [pc, #8]	; (771c <T_SendReceivedLoRaMessage+0x58>)
    7714:	4798      	blx	r3
}
    7716:	e7e5      	b.n	76e4 <T_SendReceivedLoRaMessage+0x20>
    7718:	00017a04 	.word	0x00017a04
    771c:	0000d9a5 	.word	0x0000d9a5
    7720:	40002800 	.word	0x40002800

00007724 <ReceivedDataIndication>:
{
    7724:	b510      	push	{r4, lr}
	if ((myPANID.v[1] == ind->SourcePANID.v[1]) && (myPANID.v[0] == ind->SourcePANID.v[0]))
    7726:	4b11      	ldr	r3, [pc, #68]	; (776c <ReceivedDataIndication+0x48>)
    7728:	881a      	ldrh	r2, [r3, #0]
    772a:	8843      	ldrh	r3, [r0, #2]
    772c:	429a      	cmp	r2, r3
    772e:	d005      	beq.n	773c <ReceivedDataIndication+0x18>
		printf("Packet received from other Source PAN ID : 0x%x%x\r\n",ind->SourcePANID.v[1],ind->SourcePANID.v[0]);
    7730:	7882      	ldrb	r2, [r0, #2]
    7732:	78c1      	ldrb	r1, [r0, #3]
    7734:	480e      	ldr	r0, [pc, #56]	; (7770 <ReceivedDataIndication+0x4c>)
    7736:	4b0f      	ldr	r3, [pc, #60]	; (7774 <ReceivedDataIndication+0x50>)
    7738:	4798      	blx	r3
}
    773a:	bd10      	pop	{r4, pc}
		T_SendReceivedLoRaMessage(rxMessage.Payload[0]);
    773c:	4b0e      	ldr	r3, [pc, #56]	; (7778 <ReceivedDataIndication+0x54>)
    773e:	689b      	ldr	r3, [r3, #8]
    7740:	7818      	ldrb	r0, [r3, #0]
    7742:	4b0e      	ldr	r3, [pc, #56]	; (777c <ReceivedDataIndication+0x58>)
    7744:	4798      	blx	r3
		DemoOutput_HandleMessage();
    7746:	4b0e      	ldr	r3, [pc, #56]	; (7780 <ReceivedDataIndication+0x5c>)
    7748:	4798      	blx	r3
		DemoOutput_UpdateTxRx(TxNum, ++RxNum);
    774a:	4b0e      	ldr	r3, [pc, #56]	; (7784 <ReceivedDataIndication+0x60>)
    774c:	7818      	ldrb	r0, [r3, #0]
    774e:	4b0e      	ldr	r3, [pc, #56]	; (7788 <ReceivedDataIndication+0x64>)
    7750:	7819      	ldrb	r1, [r3, #0]
    7752:	3101      	adds	r1, #1
    7754:	b2c9      	uxtb	r1, r1
    7756:	7019      	strb	r1, [r3, #0]
    7758:	4b0c      	ldr	r3, [pc, #48]	; (778c <ReceivedDataIndication+0x68>)
    775a:	4798      	blx	r3
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    775c:	2280      	movs	r2, #128	; 0x80
    775e:	0312      	lsls	r2, r2, #12
    7760:	4b0b      	ldr	r3, [pc, #44]	; (7790 <ReceivedDataIndication+0x6c>)
    7762:	61da      	str	r2, [r3, #28]
		DemoOutput_Instruction();
    7764:	4b0b      	ldr	r3, [pc, #44]	; (7794 <ReceivedDataIndication+0x70>)
    7766:	4798      	blx	r3
    7768:	e7e7      	b.n	773a <ReceivedDataIndication+0x16>
    776a:	46c0      	nop			; (mov r8, r8)
    776c:	200026b8 	.word	0x200026b8
    7770:	00017a18 	.word	0x00017a18
    7774:	00016771 	.word	0x00016771
    7778:	2000294c 	.word	0x2000294c
    777c:	000076c5 	.word	0x000076c5
    7780:	000073ed 	.word	0x000073ed
    7784:	200000f5 	.word	0x200000f5
    7788:	200000f4 	.word	0x200000f4
    778c:	000074cd 	.word	0x000074cd
    7790:	40002800 	.word	0x40002800
    7794:	000073e9 	.word	0x000073e9

00007798 <APP_TaskHandler>:

/*********************************************************************//*
 \brief      Application Task Handler
 ************************************************************************/
SYSTEM_TaskStatus_t APP_TaskHandler(void)
{
    7798:	b510      	push	{r4, lr}
    Run_Communication();
    779a:	4b02      	ldr	r3, [pc, #8]	; (77a4 <APP_TaskHandler+0xc>)
    779c:	4798      	blx	r3
    return SYSTEM_TASK_SUCCESS;
}
    779e:	2000      	movs	r0, #0
    77a0:	bd10      	pop	{r4, pc}
    77a2:	46c0      	nop			; (mov r8, r8)
    77a4:	00007b7d 	.word	0x00007b7d

000077a8 <ReadMacAddress>:
* Overview:		    Uses the MAC Address for addressing
*
* Note:			    
**********************************************************************/
void ReadMacAddress(void)
{
    77a8:	b510      	push	{r4, lr}
	#if (BOARD == SAMR34_XPLAINED_PRO && defined(__SAMR34J18B__))
	// only applicable for SAM R34 Xpro with EDBG on-board
	uint8_t* peui64 = edbg_eui_read_eui64() ;
    77aa:	4b06      	ldr	r3, [pc, #24]	; (77c4 <ReadMacAddress+0x1c>)
    77ac:	4798      	blx	r3
    77ae:	1dc3      	adds	r3, r0, #7
    77b0:	4a05      	ldr	r2, [pc, #20]	; (77c8 <ReadMacAddress+0x20>)
    77b2:	3801      	subs	r0, #1
	for (uint8_t i = 0; i < MY_ADDRESS_LENGTH; i++)
	{
		myLongAddress[i] = peui64[MY_ADDRESS_LENGTH-i-1] ;
    77b4:	7819      	ldrb	r1, [r3, #0]
    77b6:	7011      	strb	r1, [r2, #0]
    77b8:	3b01      	subs	r3, #1
    77ba:	3201      	adds	r2, #1
	for (uint8_t i = 0; i < MY_ADDRESS_LENGTH; i++)
    77bc:	4283      	cmp	r3, r0
    77be:	d1f9      	bne.n	77b4 <ReadMacAddress+0xc>
	for (i= 0; i < MY_ADDRESS_LENGTH; i++)
	{
		myLongAddress[i] = peui64[MY_ADDRESS_LENGTH-i-1] ;
	}
	#endif
}
    77c0:	bd10      	pop	{r4, pc}
    77c2:	46c0      	nop			; (mov r8, r8)
    77c4:	0000d6d1 	.word	0x0000d6d1
    77c8:	20000014 	.word	0x20000014

000077cc <main>:
{   
    77cc:	b570      	push	{r4, r5, r6, lr}
	system_init();
    77ce:	4b10      	ldr	r3, [pc, #64]	; (7810 <main+0x44>)
    77d0:	4798      	blx	r3
	delay_init();
    77d2:	4b10      	ldr	r3, [pc, #64]	; (7814 <main+0x48>)
    77d4:	4798      	blx	r3
	UART_init();
    77d6:	4b10      	ldr	r3, [pc, #64]	; (7818 <main+0x4c>)
    77d8:	4798      	blx	r3
	UART_cb_init();
    77da:	4b10      	ldr	r3, [pc, #64]	; (781c <main+0x50>)
    77dc:	4798      	blx	r3
	cpu_irq_enable();
    77de:	2201      	movs	r2, #1
    77e0:	4b0f      	ldr	r3, [pc, #60]	; (7820 <main+0x54>)
    77e2:	701a      	strb	r2, [r3, #0]
    77e4:	f3bf 8f5f 	dmb	sy
    77e8:	b662      	cpsie	i
	sio2host_init();
    77ea:	4b0e      	ldr	r3, [pc, #56]	; (7824 <main+0x58>)
    77ec:	4798      	blx	r3
	ReadMacAddress(); 
    77ee:	4b0e      	ldr	r3, [pc, #56]	; (7828 <main+0x5c>)
    77f0:	4798      	blx	r3
	SystemTimerInit();
    77f2:	4b0e      	ldr	r3, [pc, #56]	; (782c <main+0x60>)
    77f4:	4798      	blx	r3
    DemoOutput_Greeting();	
    77f6:	4b0e      	ldr	r3, [pc, #56]	; (7830 <main+0x64>)
    77f8:	4798      	blx	r3
    Initialize_LoRa(freezer_enable);
    77fa:	2000      	movs	r0, #0
    77fc:	4b0d      	ldr	r3, [pc, #52]	; (7834 <main+0x68>)
    77fe:	4798      	blx	r3
    Stack_Init();
    7800:	4b0d      	ldr	r3, [pc, #52]	; (7838 <main+0x6c>)
    7802:	4798      	blx	r3
		SYSTEM_RunTasks();
    7804:	4d0d      	ldr	r5, [pc, #52]	; (783c <main+0x70>)
		Run_Communication();
    7806:	4c0e      	ldr	r4, [pc, #56]	; (7840 <main+0x74>)
		SYSTEM_RunTasks();
    7808:	47a8      	blx	r5
		Run_Communication();
    780a:	47a0      	blx	r4
    780c:	e7fc      	b.n	7808 <main+0x3c>
    780e:	46c0      	nop			; (mov r8, r8)
    7810:	00006a9d 	.word	0x00006a9d
    7814:	00004461 	.word	0x00004461
    7818:	0000d965 	.word	0x0000d965
    781c:	0000d999 	.word	0x0000d999
    7820:	20000008 	.word	0x20000008
    7824:	0000bba1 	.word	0x0000bba1
    7828:	000077a9 	.word	0x000077a9
    782c:	0000cb89 	.word	0x0000cb89
    7830:	00007329 	.word	0x00007329
    7834:	00007949 	.word	0x00007949
    7838:	0000d1c1 	.word	0x0000d1c1
    783c:	0000d1d1 	.word	0x0000d1d1
    7840:	00007b7d 	.word	0x00007b7d

00007844 <Connection_Confirm>:
#endif // #if defined (ENABLE_CONSOLE)
}
#endif // #ifdef ENABLE_ACTIVE_SCAN	

static void Connection_Confirm(miwi_status_t status)
{
    7844:	b510      	push	{r4, lr}
    7846:	0004      	movs	r4, r0
#if defined (ENABLE_CONSOLE)	
	printf("\r\nConnect Operation Status: %d\n", status) ;
    7848:	0001      	movs	r1, r0
    784a:	4806      	ldr	r0, [pc, #24]	; (7864 <Connection_Confirm+0x20>)
    784c:	4b06      	ldr	r3, [pc, #24]	; (7868 <Connection_Confirm+0x24>)
    784e:	4798      	blx	r3
#endif // #if defined (ENABLE_CONSOLE)

    if ((SUCCESS == status) || (ALREADY_EXISTS == status))
    7850:	2c00      	cmp	r4, #0
    7852:	d001      	beq.n	7858 <Connection_Confirm+0x14>
    7854:	2c06      	cmp	r4, #6
    7856:	d104      	bne.n	7862 <Connection_Confirm+0x1e>
    {
#if defined (ENABLE_CONSOLE)
		printf("\r\nStarted Wireless Communication on Channel %u\r\n", currentChannel) ;
    7858:	4b04      	ldr	r3, [pc, #16]	; (786c <Connection_Confirm+0x28>)
    785a:	7819      	ldrb	r1, [r3, #0]
    785c:	4804      	ldr	r0, [pc, #16]	; (7870 <Connection_Confirm+0x2c>)
    785e:	4b02      	ldr	r3, [pc, #8]	; (7868 <Connection_Confirm+0x24>)
    7860:	4798      	blx	r3

#ifdef DUTY_CYCLING
		SwTimerCreate(&DutyCyclingTimerId) ;
#endif // #ifdef DUTY_CYCLING
	}
}
    7862:	bd10      	pop	{r4, pc}
    7864:	00017a74 	.word	0x00017a74
    7868:	00016771 	.word	0x00016771
    786c:	20000011 	.word	0x20000011
    7870:	00017a94 	.word	0x00017a94

00007874 <Scan_Confirm>:
{
    7874:	b5f0      	push	{r4, r5, r6, r7, lr}
    7876:	46de      	mov	lr, fp
    7878:	4657      	mov	r7, sl
    787a:	464e      	mov	r6, r9
    787c:	4645      	mov	r5, r8
    787e:	b5e0      	push	{r5, r6, r7, lr}
    7880:	b083      	sub	sp, #12
    7882:	0003      	movs	r3, r0
    7884:	9001      	str	r0, [sp, #4]
    7886:	468b      	mov	fp, r1
	for(uint8_t count =0; count <= ActiveScanResultCount-1; count++ )
    7888:	3b01      	subs	r3, #1
    788a:	4699      	mov	r9, r3
    788c:	d440      	bmi.n	7910 <Scan_Confirm+0x9c>
    788e:	2400      	movs	r4, #0
    7890:	2300      	movs	r3, #0
    7892:	4698      	mov	r8, r3
		printf("\nID\tDevice Address \t\tCapability \tPAN ID \tChannel \n");
    7894:	4b24      	ldr	r3, [pc, #144]	; (7928 <Scan_Confirm+0xb4>)
    7896:	469a      	mov	sl, r3
		printf("%02x",count+1);
    7898:	464b      	mov	r3, r9
    789a:	9300      	str	r3, [sp, #0]
    789c:	e01f      	b.n	78de <Scan_Confirm+0x6a>
		printf("\t");
    789e:	2009      	movs	r0, #9
    78a0:	4e22      	ldr	r6, [pc, #136]	; (792c <Scan_Confirm+0xb8>)
    78a2:	47b0      	blx	r6
		printf("%02x",(ActiveScanResult[count].Capability.Val));	
    78a4:	464b      	mov	r3, r9
    78a6:	7b99      	ldrb	r1, [r3, #14]
    78a8:	4c21      	ldr	r4, [pc, #132]	; (7930 <Scan_Confirm+0xbc>)
    78aa:	0020      	movs	r0, r4
    78ac:	4d21      	ldr	r5, [pc, #132]	; (7934 <Scan_Confirm+0xc0>)
    78ae:	47a8      	blx	r5
		printf("\t\t");
    78b0:	4821      	ldr	r0, [pc, #132]	; (7938 <Scan_Confirm+0xc4>)
    78b2:	47a8      	blx	r5
		printf("%02x",(ActiveScanResult[count].PANID.Val));
    78b4:	464b      	mov	r3, r9
    78b6:	8959      	ldrh	r1, [r3, #10]
    78b8:	0020      	movs	r0, r4
    78ba:	47a8      	blx	r5
		printf("\t");
    78bc:	2009      	movs	r0, #9
    78be:	47b0      	blx	r6
		printf("%02x",ActiveScanResult[count].Channel);
    78c0:	464b      	mov	r3, r9
    78c2:	7819      	ldrb	r1, [r3, #0]
    78c4:	0020      	movs	r0, r4
    78c6:	47a8      	blx	r5
		printf("\r\n");
    78c8:	481c      	ldr	r0, [pc, #112]	; (793c <Scan_Confirm+0xc8>)
    78ca:	4b17      	ldr	r3, [pc, #92]	; (7928 <Scan_Confirm+0xb4>)
    78cc:	4798      	blx	r3
	for(uint8_t count =0; count <= ActiveScanResultCount-1; count++ )
    78ce:	4643      	mov	r3, r8
    78d0:	3301      	adds	r3, #1
    78d2:	b2db      	uxtb	r3, r3
    78d4:	4698      	mov	r8, r3
    78d6:	001c      	movs	r4, r3
    78d8:	9b00      	ldr	r3, [sp, #0]
    78da:	4598      	cmp	r8, r3
    78dc:	dc18      	bgt.n	7910 <Scan_Confirm+0x9c>
		printf("\nID\tDevice Address \t\tCapability \tPAN ID \tChannel \n");
    78de:	4818      	ldr	r0, [pc, #96]	; (7940 <Scan_Confirm+0xcc>)
    78e0:	47d0      	blx	sl
		printf("%02x",count+1);
    78e2:	1c61      	adds	r1, r4, #1
    78e4:	4812      	ldr	r0, [pc, #72]	; (7930 <Scan_Confirm+0xbc>)
    78e6:	4b13      	ldr	r3, [pc, #76]	; (7934 <Scan_Confirm+0xc0>)
    78e8:	4798      	blx	r3
		printf("\t");
    78ea:	2009      	movs	r0, #9
    78ec:	4b0f      	ldr	r3, [pc, #60]	; (792c <Scan_Confirm+0xb8>)
    78ee:	4798      	blx	r3
				printf("%02x",ActiveScanResult[count].Address[MY_ADDRESS_LENGTH-1-j] );
    78f0:	4643      	mov	r3, r8
    78f2:	011b      	lsls	r3, r3, #4
    78f4:	445b      	add	r3, fp
    78f6:	4699      	mov	r9, r3
    78f8:	001c      	movs	r4, r3
    78fa:	3408      	adds	r4, #8
    78fc:	001f      	movs	r7, r3
    78fe:	4e0c      	ldr	r6, [pc, #48]	; (7930 <Scan_Confirm+0xbc>)
    7900:	4d0c      	ldr	r5, [pc, #48]	; (7934 <Scan_Confirm+0xc0>)
    7902:	7821      	ldrb	r1, [r4, #0]
    7904:	0030      	movs	r0, r6
    7906:	47a8      	blx	r5
    7908:	3c01      	subs	r4, #1
		for(uint8_t j = 0; j < 8; j++)
    790a:	42a7      	cmp	r7, r4
    790c:	d1f9      	bne.n	7902 <Scan_Confirm+0x8e>
    790e:	e7c6      	b.n	789e <Scan_Confirm+0x2a>
	printf("\r\n Scan Operation Status: %d device found",ActiveScanResultCount); 
    7910:	9901      	ldr	r1, [sp, #4]
    7912:	480c      	ldr	r0, [pc, #48]	; (7944 <Scan_Confirm+0xd0>)
    7914:	4b07      	ldr	r3, [pc, #28]	; (7934 <Scan_Confirm+0xc0>)
    7916:	4798      	blx	r3
}
    7918:	b003      	add	sp, #12
    791a:	bc3c      	pop	{r2, r3, r4, r5}
    791c:	4690      	mov	r8, r2
    791e:	4699      	mov	r9, r3
    7920:	46a2      	mov	sl, r4
    7922:	46ab      	mov	fp, r5
    7924:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7926:	46c0      	nop			; (mov r8, r8)
    7928:	0001688d 	.word	0x0001688d
    792c:	000167a5 	.word	0x000167a5
    7930:	000179ec 	.word	0x000179ec
    7934:	00016771 	.word	0x00016771
    7938:	00017b78 	.word	0x00017b78
    793c:	000180d4 	.word	0x000180d4
    7940:	00017b44 	.word	0x00017b44
    7944:	00017b7c 	.word	0x00017b7c

00007948 <Initialize_LoRa>:

bool Initialize_LoRa(bool freezer_enable)
{
    7948:	b5f0      	push	{r4, r5, r6, r7, lr}
    794a:	b087      	sub	sp, #28
    794c:	0004      	movs	r4, r0
    uint8_t i;

	bool invalidIEEEAddrFlag = false;
	uint64_t invalidIEEEAddr;

    MiApp_SubscribeDataIndicationCallback(ReceivedDataIndication);
    794e:	486b      	ldr	r0, [pc, #428]	; (7afc <Initialize_LoRa+0x1b4>)
    7950:	4b6b      	ldr	r3, [pc, #428]	; (7b00 <Initialize_LoRa+0x1b8>)
    7952:	4798      	blx	r3
	
#ifdef ENABLE_SLEEP_FEATURE
	sm_init();
#endif

    if (freezer_enable)
    7954:	2c00      	cmp	r4, #0
    7956:	d033      	beq.n	79c0 <Initialize_LoRa+0x78>
    {
        MiApp_ProtocolInit(NULL, NULL);
    7958:	2100      	movs	r1, #0
    795a:	2000      	movs	r0, #0
    795c:	4b69      	ldr	r3, [pc, #420]	; (7b04 <Initialize_LoRa+0x1bc>)
    795e:	4798      	blx	r3
		srand(PHY_RandomReq());
    7960:	4b69      	ldr	r3, [pc, #420]	; (7b08 <Initialize_LoRa+0x1c0>)
    7962:	4798      	blx	r3
    7964:	4b69      	ldr	r3, [pc, #420]	; (7b0c <Initialize_LoRa+0x1c4>)
    7966:	4798      	blx	r3
		/* Check if a valid IEEE address is available.
		0x0000000000000000 and 0xFFFFFFFFFFFFFFFF is presumed to be invalid */
		/* Check if IEEE address is 0x0000000000000000 */
		memset((uint8_t *)&invalidIEEEAddr, 0x00, LONG_ADDR_LEN);
    7968:	2200      	movs	r2, #0
    796a:	2300      	movs	r3, #0
    796c:	9204      	str	r2, [sp, #16]
    796e:	9305      	str	r3, [sp, #20]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    7970:	4e67      	ldr	r6, [pc, #412]	; (7b10 <Initialize_LoRa+0x1c8>)
    7972:	3208      	adds	r2, #8
    7974:	0031      	movs	r1, r6
    7976:	a804      	add	r0, sp, #16
    7978:	4d66      	ldr	r5, [pc, #408]	; (7b14 <Initialize_LoRa+0x1cc>)
    797a:	47a8      	blx	r5
    797c:	0004      	movs	r4, r0
		{
			invalidIEEEAddrFlag = true;
		}

		/* Check if IEEE address is 0xFFFFFFFFFFFFFFFF */
		memset((uint8_t *)&invalidIEEEAddr, 0xFF, LONG_ADDR_LEN);
    797e:	2201      	movs	r2, #1
    7980:	4252      	negs	r2, r2
    7982:	17d3      	asrs	r3, r2, #31
    7984:	9204      	str	r2, [sp, #16]
    7986:	9305      	str	r3, [sp, #20]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    7988:	3209      	adds	r2, #9
    798a:	0031      	movs	r1, r6
    798c:	a804      	add	r0, sp, #16
    798e:	47a8      	blx	r5
    7990:	2800      	cmp	r0, #0
    7992:	d001      	beq.n	7998 <Initialize_LoRa+0x50>
		{
			invalidIEEEAddrFlag = true;
		}
		
		if (invalidIEEEAddrFlag)
    7994:	2c00      	cmp	r4, #0
    7996:	d108      	bne.n	79aa <Initialize_LoRa+0x62>
    7998:	4c5d      	ldr	r4, [pc, #372]	; (7b10 <Initialize_LoRa+0x1c8>)
    799a:	0026      	movs	r6, r4
    799c:	3608      	adds	r6, #8
			 * In production code this can be omitted.
			 */
			uint8_t* peui64 = (uint8_t *)&myLongAddress;
			for(i = 0; i<MY_ADDRESS_LENGTH; i++)
			{
				*peui64++ = (uint8_t)rand();
    799e:	4d5e      	ldr	r5, [pc, #376]	; (7b18 <Initialize_LoRa+0x1d0>)
    79a0:	47a8      	blx	r5
    79a2:	7020      	strb	r0, [r4, #0]
    79a4:	3401      	adds	r4, #1
			for(i = 0; i<MY_ADDRESS_LENGTH; i++)
    79a6:	42b4      	cmp	r4, r6
    79a8:	d1fa      	bne.n	79a0 <Initialize_LoRa+0x58>
			}
		}
		PHY_SetIEEEAddr((uint8_t *)&myLongAddress);
    79aa:	4859      	ldr	r0, [pc, #356]	; (7b10 <Initialize_LoRa+0x1c8>)
    79ac:	4b5b      	ldr	r3, [pc, #364]	; (7b1c <Initialize_LoRa+0x1d4>)
    79ae:	4798      	blx	r3
#if defined(PROTOCOL_P2P)  
		DemoOutput_Instruction();
    79b0:	4b5b      	ldr	r3, [pc, #364]	; (7b20 <Initialize_LoRa+0x1d8>)
    79b2:	4798      	blx	r3
        DemoOutput_Instruction();
#endif    
    }
	
	/* Create SW timer for transmission timeout */
	SwTimerCreate(&TxTimerId) ;
    79b4:	485b      	ldr	r0, [pc, #364]	; (7b24 <Initialize_LoRa+0x1dc>)
    79b6:	4b5c      	ldr	r3, [pc, #368]	; (7b28 <Initialize_LoRa+0x1e0>)
    79b8:	4798      	blx	r3
	
	return true;
}
    79ba:	2001      	movs	r0, #1
    79bc:	b007      	add	sp, #28
    79be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port_base->OUTSET.reg = pin_mask;
    79c0:	2280      	movs	r2, #128	; 0x80
    79c2:	0312      	lsls	r2, r2, #12
    79c4:	4b59      	ldr	r3, [pc, #356]	; (7b2c <Initialize_LoRa+0x1e4>)
    79c6:	619a      	str	r2, [r3, #24]
        MiApp_ProtocolInit(NULL, NULL);
    79c8:	2100      	movs	r1, #0
    79ca:	2000      	movs	r0, #0
    79cc:	4b4d      	ldr	r3, [pc, #308]	; (7b04 <Initialize_LoRa+0x1bc>)
    79ce:	4798      	blx	r3
		uint8_t txPower = 0x01 ; // 1 dBm
    79d0:	240a      	movs	r4, #10
    79d2:	446c      	add	r4, sp
    79d4:	2301      	movs	r3, #1
    79d6:	7023      	strb	r3, [r4, #0]
		PHY_SetTxPower(txPower) ;
    79d8:	2001      	movs	r0, #1
    79da:	4b55      	ldr	r3, [pc, #340]	; (7b30 <Initialize_LoRa+0x1e8>)
    79dc:	4798      	blx	r3
		txPower = 255 ;
    79de:	27ff      	movs	r7, #255	; 0xff
    79e0:	7027      	strb	r7, [r4, #0]
		RADIO_GetAttr(OUTPUT_POWER, (void *)&txPower) ;
    79e2:	0021      	movs	r1, r4
    79e4:	2004      	movs	r0, #4
    79e6:	4e53      	ldr	r6, [pc, #332]	; (7b34 <Initialize_LoRa+0x1ec>)
    79e8:	47b0      	blx	r6
		printf("\nCurrent Tx output power: %d\r\n", txPower) ;
    79ea:	7821      	ldrb	r1, [r4, #0]
    79ec:	4852      	ldr	r0, [pc, #328]	; (7b38 <Initialize_LoRa+0x1f0>)
    79ee:	4c53      	ldr	r4, [pc, #332]	; (7b3c <Initialize_LoRa+0x1f4>)
    79f0:	47a0      	blx	r4
		uint8_t paBoost = 255 ;
    79f2:	250b      	movs	r5, #11
    79f4:	446d      	add	r5, sp
    79f6:	702f      	strb	r7, [r5, #0]
		RADIO_GetAttr(PABOOST, (void *)&paBoost) ;
    79f8:	0029      	movs	r1, r5
    79fa:	2008      	movs	r0, #8
    79fc:	47b0      	blx	r6
		printf("PA BOOST status: %d\r\n", paBoost) ;
    79fe:	7829      	ldrb	r1, [r5, #0]
    7a00:	484f      	ldr	r0, [pc, #316]	; (7b40 <Initialize_LoRa+0x1f8>)
    7a02:	47a0      	blx	r4
		RadioDataRate_t sf = SF_7 ;
    7a04:	ad03      	add	r5, sp, #12
    7a06:	2307      	movs	r3, #7
    7a08:	702b      	strb	r3, [r5, #0]
		PHY_GetAttribute(SPREADING_FACTOR, (void *)&sf) ;
    7a0a:	0029      	movs	r1, r5
    7a0c:	2016      	movs	r0, #22
    7a0e:	4e4d      	ldr	r6, [pc, #308]	; (7b44 <Initialize_LoRa+0x1fc>)
    7a10:	47b0      	blx	r6
		printf("Current SF: SF%d\r\n", sf) ;
    7a12:	7829      	ldrb	r1, [r5, #0]
    7a14:	484c      	ldr	r0, [pc, #304]	; (7b48 <Initialize_LoRa+0x200>)
    7a16:	47a0      	blx	r4
		PHY_GetAttribute(BANDWIDTH, (void *)&bw) ;
    7a18:	250d      	movs	r5, #13
    7a1a:	446d      	add	r5, sp
    7a1c:	0029      	movs	r1, r5
    7a1e:	2007      	movs	r0, #7
    7a20:	47b0      	blx	r6
		printf("Current BW (125kHz=7, 250kHz=8, 500kHz=9): %d\r\n", bw) ;
    7a22:	7829      	ldrb	r1, [r5, #0]
    7a24:	4849      	ldr	r0, [pc, #292]	; (7b4c <Initialize_LoRa+0x204>)
    7a26:	47a0      	blx	r4
		srand(PHY_RandomReq());
    7a28:	4b37      	ldr	r3, [pc, #220]	; (7b08 <Initialize_LoRa+0x1c0>)
    7a2a:	4798      	blx	r3
    7a2c:	4b37      	ldr	r3, [pc, #220]	; (7b0c <Initialize_LoRa+0x1c4>)
    7a2e:	4798      	blx	r3
		memset((uint8_t *)&invalidIEEEAddr, 0x00, LONG_ADDR_LEN);
    7a30:	2200      	movs	r2, #0
    7a32:	2300      	movs	r3, #0
    7a34:	9204      	str	r2, [sp, #16]
    7a36:	9305      	str	r3, [sp, #20]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    7a38:	4e35      	ldr	r6, [pc, #212]	; (7b10 <Initialize_LoRa+0x1c8>)
    7a3a:	3208      	adds	r2, #8
    7a3c:	0031      	movs	r1, r6
    7a3e:	a804      	add	r0, sp, #16
    7a40:	4d34      	ldr	r5, [pc, #208]	; (7b14 <Initialize_LoRa+0x1cc>)
    7a42:	47a8      	blx	r5
    7a44:	0004      	movs	r4, r0
		memset((uint8_t *)&invalidIEEEAddr, 0xFF, LONG_ADDR_LEN);
    7a46:	2201      	movs	r2, #1
    7a48:	4252      	negs	r2, r2
    7a4a:	17d3      	asrs	r3, r2, #31
    7a4c:	9204      	str	r2, [sp, #16]
    7a4e:	9305      	str	r3, [sp, #20]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    7a50:	3209      	adds	r2, #9
    7a52:	0031      	movs	r1, r6
    7a54:	a804      	add	r0, sp, #16
    7a56:	47a8      	blx	r5
    7a58:	2800      	cmp	r0, #0
    7a5a:	d036      	beq.n	7aca <Initialize_LoRa+0x182>
		if (invalidIEEEAddrFlag)
    7a5c:	2c00      	cmp	r4, #0
    7a5e:	d034      	beq.n	7aca <Initialize_LoRa+0x182>
		PHY_SetIEEEAddr((uint8_t *)&myLongAddress);
    7a60:	482b      	ldr	r0, [pc, #172]	; (7b10 <Initialize_LoRa+0x1c8>)
    7a62:	4b2e      	ldr	r3, [pc, #184]	; (7b1c <Initialize_LoRa+0x1d4>)
    7a64:	4798      	blx	r3
        MiApp_ConnectionMode(ENABLE_ALL_CONN);
    7a66:	2000      	movs	r0, #0
    7a68:	4b39      	ldr	r3, [pc, #228]	; (7b50 <Initialize_LoRa+0x208>)
    7a6a:	4798      	blx	r3
        DemoOutput_Channel(myChannel, 0);
    7a6c:	4c39      	ldr	r4, [pc, #228]	; (7b54 <Initialize_LoRa+0x20c>)
    7a6e:	7820      	ldrb	r0, [r4, #0]
    7a70:	2100      	movs	r1, #0
    7a72:	4b39      	ldr	r3, [pc, #228]	; (7b58 <Initialize_LoRa+0x210>)
    7a74:	4798      	blx	r3
		MiApp_SearchConnection(5, 0xFFFFFFFF, Scan_Confirm);
    7a76:	4a39      	ldr	r2, [pc, #228]	; (7b5c <Initialize_LoRa+0x214>)
    7a78:	2101      	movs	r1, #1
    7a7a:	4249      	negs	r1, r1
    7a7c:	2005      	movs	r0, #5
    7a7e:	4b38      	ldr	r3, [pc, #224]	; (7b60 <Initialize_LoRa+0x218>)
    7a80:	4798      	blx	r3
        if( MiApp_Set(CHANNEL, &myChannel) == false )
    7a82:	0021      	movs	r1, r4
    7a84:	2000      	movs	r0, #0
    7a86:	4b37      	ldr	r3, [pc, #220]	; (7b64 <Initialize_LoRa+0x21c>)
    7a88:	4798      	blx	r3
    7a8a:	2800      	cmp	r0, #0
    7a8c:	d027      	beq.n	7ade <Initialize_LoRa+0x196>
		uint16_t broadcastAddress = 0xFFFF;
    7a8e:	220e      	movs	r2, #14
    7a90:	446a      	add	r2, sp
    7a92:	2301      	movs	r3, #1
    7a94:	425b      	negs	r3, r3
    7a96:	8013      	strh	r3, [r2, #0]
		i = MiApp_EstablishConnection(myChannel, 0, (uint8_t*)&broadcastAddress, 0, Connection_Confirm);
    7a98:	4b2e      	ldr	r3, [pc, #184]	; (7b54 <Initialize_LoRa+0x20c>)
    7a9a:	7818      	ldrb	r0, [r3, #0]
    7a9c:	4b32      	ldr	r3, [pc, #200]	; (7b68 <Initialize_LoRa+0x220>)
    7a9e:	9300      	str	r3, [sp, #0]
    7aa0:	2300      	movs	r3, #0
    7aa2:	2100      	movs	r1, #0
    7aa4:	4c31      	ldr	r4, [pc, #196]	; (7b6c <Initialize_LoRa+0x224>)
    7aa6:	47a0      	blx	r4
        if( i != 0xFF )
    7aa8:	28ff      	cmp	r0, #255	; 0xff
    7aaa:	d01d      	beq.n	7ae8 <Initialize_LoRa+0x1a0>
            DemoOutput_Channel(myChannel, 1);
    7aac:	4b29      	ldr	r3, [pc, #164]	; (7b54 <Initialize_LoRa+0x20c>)
    7aae:	7818      	ldrb	r0, [r3, #0]
    7ab0:	2101      	movs	r1, #1
    7ab2:	4b29      	ldr	r3, [pc, #164]	; (7b58 <Initialize_LoRa+0x210>)
    7ab4:	4798      	blx	r3
		DumpConnection(0xFF);
    7ab6:	20ff      	movs	r0, #255	; 0xff
    7ab8:	4b2d      	ldr	r3, [pc, #180]	; (7b70 <Initialize_LoRa+0x228>)
    7aba:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    7abc:	2280      	movs	r2, #128	; 0x80
    7abe:	0312      	lsls	r2, r2, #12
    7ac0:	4b1a      	ldr	r3, [pc, #104]	; (7b2c <Initialize_LoRa+0x1e4>)
    7ac2:	615a      	str	r2, [r3, #20]
        DemoOutput_Instruction();
    7ac4:	4b16      	ldr	r3, [pc, #88]	; (7b20 <Initialize_LoRa+0x1d8>)
    7ac6:	4798      	blx	r3
    7ac8:	e774      	b.n	79b4 <Initialize_LoRa+0x6c>
    7aca:	4c11      	ldr	r4, [pc, #68]	; (7b10 <Initialize_LoRa+0x1c8>)
    7acc:	0026      	movs	r6, r4
    7ace:	3608      	adds	r6, #8
				*peui64++ = (uint8_t)rand();
    7ad0:	4d11      	ldr	r5, [pc, #68]	; (7b18 <Initialize_LoRa+0x1d0>)
    7ad2:	47a8      	blx	r5
    7ad4:	7020      	strb	r0, [r4, #0]
    7ad6:	3401      	adds	r4, #1
			for(i = 0; i<MY_ADDRESS_LENGTH; i++)
    7ad8:	42b4      	cmp	r4, r6
    7ada:	d1fa      	bne.n	7ad2 <Initialize_LoRa+0x18a>
    7adc:	e7c0      	b.n	7a60 <Initialize_LoRa+0x118>
            DemoOutput_ChannelError(myChannel);
    7ade:	4b1d      	ldr	r3, [pc, #116]	; (7b54 <Initialize_LoRa+0x20c>)
    7ae0:	7818      	ldrb	r0, [r3, #0]
    7ae2:	4b24      	ldr	r3, [pc, #144]	; (7b74 <Initialize_LoRa+0x22c>)
    7ae4:	4798      	blx	r3
    7ae6:	e7d2      	b.n	7a8e <Initialize_LoRa+0x146>
            MiApp_StartConnection(START_CONN_DIRECT, 10, (1L << myChannel), Connection_Confirm);
    7ae8:	4b1a      	ldr	r3, [pc, #104]	; (7b54 <Initialize_LoRa+0x20c>)
    7aea:	781b      	ldrb	r3, [r3, #0]
    7aec:	2201      	movs	r2, #1
    7aee:	409a      	lsls	r2, r3
    7af0:	4b1d      	ldr	r3, [pc, #116]	; (7b68 <Initialize_LoRa+0x220>)
    7af2:	210a      	movs	r1, #10
    7af4:	2000      	movs	r0, #0
    7af6:	4c20      	ldr	r4, [pc, #128]	; (7b78 <Initialize_LoRa+0x230>)
    7af8:	47a0      	blx	r4
    7afa:	e7dc      	b.n	7ab6 <Initialize_LoRa+0x16e>
    7afc:	00007725 	.word	0x00007725
    7b00:	0000ac19 	.word	0x0000ac19
    7b04:	0000a7e5 	.word	0x0000a7e5
    7b08:	0000a3e9 	.word	0x0000a3e9
    7b0c:	000168a1 	.word	0x000168a1
    7b10:	20000014 	.word	0x20000014
    7b14:	00016199 	.word	0x00016199
    7b18:	000168fd 	.word	0x000168fd
    7b1c:	0000a40d 	.word	0x0000a40d
    7b20:	000073e9 	.word	0x000073e9
    7b24:	200000f7 	.word	0x200000f7
    7b28:	0000cbf1 	.word	0x0000cbf1
    7b2c:	40002800 	.word	0x40002800
    7b30:	0000a29d 	.word	0x0000a29d
    7b34:	0000dc35 	.word	0x0000dc35
    7b38:	00017ac8 	.word	0x00017ac8
    7b3c:	00016771 	.word	0x00016771
    7b40:	00017ae8 	.word	0x00017ae8
    7b44:	0000a2e5 	.word	0x0000a2e5
    7b48:	00017b00 	.word	0x00017b00
    7b4c:	00017b14 	.word	0x00017b14
    7b50:	0000abf9 	.word	0x0000abf9
    7b54:	2000000d 	.word	0x2000000d
    7b58:	000073a1 	.word	0x000073a1
    7b5c:	00007875 	.word	0x00007875
    7b60:	0000b6d5 	.word	0x0000b6d5
    7b64:	0000a7c1 	.word	0x0000a7c1
    7b68:	00007845 	.word	0x00007845
    7b6c:	0000b4e1 	.word	0x0000b4e1
    7b70:	0000a931 	.word	0x0000a931
    7b74:	000074d1 	.word	0x000074d1
    7b78:	0000a891 	.word	0x0000a891

00007b7c <Run_Communication>:

void Run_Communication(void)
{
    7b7c:	b510      	push	{r4, lr}
    P2PTasks();
    7b7e:	4b02      	ldr	r3, [pc, #8]	; (7b88 <Run_Communication+0xc>)
    7b80:	4798      	blx	r3
    //run_LoRa_P2P();   
	run_system();
    7b82:	4b02      	ldr	r3, [pc, #8]	; (7b8c <Run_Communication+0x10>)
    7b84:	4798      	blx	r3
    7b86:	bd10      	pop	{r4, pc}
    7b88:	0000ad8d 	.word	0x0000ad8d
    7b8c:	00007691 	.word	0x00007691

00007b90 <CompareData>:
     Otherwise it is the start address of the buffer that contains the data to compare with
    \param numberOfBytes The number of bytes to compare
    \note offset+numberOfBytes must be <= D_NV_SECTOR_SIZE (meaning sector crossing is not permitted)
*/
static bool CompareData(uint8_t sector, uint16_t offset, uint8_t *pBuffer, D_Nv_Size_t numberOfBytes)
{
    7b90:	b5f0      	push	{r4, r5, r6, r7, lr}
    7b92:	46c6      	mov	lr, r8
    7b94:	b500      	push	{lr}
    7b96:	b084      	sub	sp, #16
    7b98:	0014      	movs	r4, r2
    7b9a:	001f      	movs	r7, r3
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    7b9c:	4b29      	ldr	r3, [pc, #164]	; (7c44 <CompareData+0xb4>)
    7b9e:	18cb      	adds	r3, r1, r3
    7ba0:	0340      	lsls	r0, r0, #13
    7ba2:	181d      	adds	r5, r3, r0
  uint8_t  buffer[16U];

  assert(numberOfBytes);
    7ba4:	2f00      	cmp	r7, #0
    7ba6:	d01a      	beq.n	7bde <CompareData+0x4e>
  assert(address <= D_NV_MEMORY_END);
    7ba8:	4b27      	ldr	r3, [pc, #156]	; (7c48 <CompareData+0xb8>)
    7baa:	1e5a      	subs	r2, r3, #1
    7bac:	4295      	cmp	r5, r2
    7bae:	d81c      	bhi.n	7bea <CompareData+0x5a>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    7bb0:	197a      	adds	r2, r7, r5
    7bb2:	4293      	cmp	r3, r2
    7bb4:	d31f      	bcc.n	7bf6 <CompareData+0x66>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    7bb6:	19c9      	adds	r1, r1, r7
    7bb8:	2380      	movs	r3, #128	; 0x80
    7bba:	019b      	lsls	r3, r3, #6
    7bbc:	4299      	cmp	r1, r3
    7bbe:	d820      	bhi.n	7c02 <CompareData+0x72>

  while(numberOfBytes)
  {
    uint16_t bytesToRead = MIN(sizeof(buffer), numberOfBytes);

    memcpy(buffer, (uint8_t FLASH_PTR *)address, bytesToRead);
    7bc0:	4b22      	ldr	r3, [pc, #136]	; (7c4c <CompareData+0xbc>)
    7bc2:	4698      	mov	r8, r3
    uint16_t bytesToRead = MIN(sizeof(buffer), numberOfBytes);
    7bc4:	1c3e      	adds	r6, r7, #0
    7bc6:	2f10      	cmp	r7, #16
    7bc8:	d900      	bls.n	7bcc <CompareData+0x3c>
    7bca:	2610      	movs	r6, #16
    7bcc:	b2b6      	uxth	r6, r6
    memcpy(buffer, (uint8_t FLASH_PTR *)address, bytesToRead);
    7bce:	0032      	movs	r2, r6
    7bd0:	0029      	movs	r1, r5
    7bd2:	4668      	mov	r0, sp
    7bd4:	47c0      	blx	r8
    for (uint8_t i = 0U; i < bytesToRead; i++)
    7bd6:	2e00      	cmp	r6, #0
    7bd8:	d028      	beq.n	7c2c <CompareData+0x9c>
    7bda:	2300      	movs	r3, #0
    7bdc:	e01f      	b.n	7c1e <CompareData+0x8e>
  assert(numberOfBytes);
    7bde:	4b1c      	ldr	r3, [pc, #112]	; (7c50 <CompareData+0xc0>)
    7be0:	4a1c      	ldr	r2, [pc, #112]	; (7c54 <CompareData+0xc4>)
    7be2:	21d9      	movs	r1, #217	; 0xd9
    7be4:	481c      	ldr	r0, [pc, #112]	; (7c58 <CompareData+0xc8>)
    7be6:	4c1d      	ldr	r4, [pc, #116]	; (7c5c <CompareData+0xcc>)
    7be8:	47a0      	blx	r4
  assert(address <= D_NV_MEMORY_END);
    7bea:	4b1d      	ldr	r3, [pc, #116]	; (7c60 <CompareData+0xd0>)
    7bec:	4a19      	ldr	r2, [pc, #100]	; (7c54 <CompareData+0xc4>)
    7bee:	21da      	movs	r1, #218	; 0xda
    7bf0:	4819      	ldr	r0, [pc, #100]	; (7c58 <CompareData+0xc8>)
    7bf2:	4c1a      	ldr	r4, [pc, #104]	; (7c5c <CompareData+0xcc>)
    7bf4:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    7bf6:	4b1b      	ldr	r3, [pc, #108]	; (7c64 <CompareData+0xd4>)
    7bf8:	4a16      	ldr	r2, [pc, #88]	; (7c54 <CompareData+0xc4>)
    7bfa:	21db      	movs	r1, #219	; 0xdb
    7bfc:	4816      	ldr	r0, [pc, #88]	; (7c58 <CompareData+0xc8>)
    7bfe:	4c17      	ldr	r4, [pc, #92]	; (7c5c <CompareData+0xcc>)
    7c00:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    7c02:	4b19      	ldr	r3, [pc, #100]	; (7c68 <CompareData+0xd8>)
    7c04:	4a13      	ldr	r2, [pc, #76]	; (7c54 <CompareData+0xc4>)
    7c06:	21dc      	movs	r1, #220	; 0xdc
    7c08:	4813      	ldr	r0, [pc, #76]	; (7c58 <CompareData+0xc8>)
    7c0a:	4c14      	ldr	r4, [pc, #80]	; (7c5c <CompareData+0xcc>)
    7c0c:	47a0      	blx	r4
      if (buffer[i] != ((pBuffer != NULL) ? *(pBuffer++) : 0xFF))
    7c0e:	21ff      	movs	r1, #255	; 0xff
    7c10:	4291      	cmp	r1, r2
    7c12:	d112      	bne.n	7c3a <CompareData+0xaa>
    for (uint8_t i = 0U; i < bytesToRead; i++)
    7c14:	3301      	adds	r3, #1
    7c16:	b2db      	uxtb	r3, r3
    7c18:	b29a      	uxth	r2, r3
    7c1a:	4296      	cmp	r6, r2
    7c1c:	d906      	bls.n	7c2c <CompareData+0x9c>
      if (buffer[i] != ((pBuffer != NULL) ? *(pBuffer++) : 0xFF))
    7c1e:	466a      	mov	r2, sp
    7c20:	5cd2      	ldrb	r2, [r2, r3]
    7c22:	2c00      	cmp	r4, #0
    7c24:	d0f3      	beq.n	7c0e <CompareData+0x7e>
    7c26:	7821      	ldrb	r1, [r4, #0]
    7c28:	3401      	adds	r4, #1
    7c2a:	e7f1      	b.n	7c10 <CompareData+0x80>
        return false;

    numberOfBytes -= bytesToRead;
    7c2c:	1bbf      	subs	r7, r7, r6
    7c2e:	b2bf      	uxth	r7, r7
    address += bytesToRead;
    7c30:	19ad      	adds	r5, r5, r6
  while(numberOfBytes)
    7c32:	2f00      	cmp	r7, #0
    7c34:	d1c6      	bne.n	7bc4 <CompareData+0x34>
  }

  return true;
    7c36:	2001      	movs	r0, #1
    7c38:	e000      	b.n	7c3c <CompareData+0xac>
        return false;
    7c3a:	2000      	movs	r0, #0
}
    7c3c:	b004      	add	sp, #16
    7c3e:	bc04      	pop	{r2}
    7c40:	4690      	mov	r8, r2
    7c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7c44:	00000400 	.word	0x00000400
    7c48:	00004400 	.word	0x00004400
    7c4c:	000161b7 	.word	0x000161b7
    7c50:	00017ba8 	.word	0x00017ba8
    7c54:	00017cb4 	.word	0x00017cb4
    7c58:	00017bb8 	.word	0x00017bb8
    7c5c:	000160f5 	.word	0x000160f5
    7c60:	00017bfc 	.word	0x00017bfc
    7c64:	00017c18 	.word	0x00017c18
    7c68:	00017c4c 	.word	0x00017c4c

00007c6c <D_Nv_Read_Impl>:
{
    7c6c:	b570      	push	{r4, r5, r6, lr}
    7c6e:	0015      	movs	r5, r2
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    7c70:	0344      	lsls	r4, r0, #13
    7c72:	4813      	ldr	r0, [pc, #76]	; (7cc0 <D_Nv_Read_Impl+0x54>)
    7c74:	1808      	adds	r0, r1, r0
    7c76:	1824      	adds	r4, r4, r0
  assert(address <= D_NV_MEMORY_END);
    7c78:	4a12      	ldr	r2, [pc, #72]	; (7cc4 <D_Nv_Read_Impl+0x58>)
    7c7a:	1e50      	subs	r0, r2, #1
    7c7c:	4284      	cmp	r4, r0
    7c7e:	d80d      	bhi.n	7c9c <D_Nv_Read_Impl+0x30>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    7c80:	18e0      	adds	r0, r4, r3
    7c82:	4282      	cmp	r2, r0
    7c84:	d310      	bcc.n	7ca8 <D_Nv_Read_Impl+0x3c>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    7c86:	18c9      	adds	r1, r1, r3
    7c88:	2280      	movs	r2, #128	; 0x80
    7c8a:	0192      	lsls	r2, r2, #6
    7c8c:	4291      	cmp	r1, r2
    7c8e:	d811      	bhi.n	7cb4 <D_Nv_Read_Impl+0x48>
  memcpy(pBuffer, (uint8_t FLASH_PTR *)address, numberOfBytes);
    7c90:	001a      	movs	r2, r3
    7c92:	0021      	movs	r1, r4
    7c94:	0028      	movs	r0, r5
    7c96:	4b0c      	ldr	r3, [pc, #48]	; (7cc8 <D_Nv_Read_Impl+0x5c>)
    7c98:	4798      	blx	r3
}
    7c9a:	bd70      	pop	{r4, r5, r6, pc}
  assert(address <= D_NV_MEMORY_END);
    7c9c:	4b0b      	ldr	r3, [pc, #44]	; (7ccc <D_Nv_Read_Impl+0x60>)
    7c9e:	4a0c      	ldr	r2, [pc, #48]	; (7cd0 <D_Nv_Read_Impl+0x64>)
    7ca0:	2172      	movs	r1, #114	; 0x72
    7ca2:	480c      	ldr	r0, [pc, #48]	; (7cd4 <D_Nv_Read_Impl+0x68>)
    7ca4:	4c0c      	ldr	r4, [pc, #48]	; (7cd8 <D_Nv_Read_Impl+0x6c>)
    7ca6:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    7ca8:	4b0c      	ldr	r3, [pc, #48]	; (7cdc <D_Nv_Read_Impl+0x70>)
    7caa:	4a09      	ldr	r2, [pc, #36]	; (7cd0 <D_Nv_Read_Impl+0x64>)
    7cac:	2173      	movs	r1, #115	; 0x73
    7cae:	4809      	ldr	r0, [pc, #36]	; (7cd4 <D_Nv_Read_Impl+0x68>)
    7cb0:	4c09      	ldr	r4, [pc, #36]	; (7cd8 <D_Nv_Read_Impl+0x6c>)
    7cb2:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    7cb4:	4b0a      	ldr	r3, [pc, #40]	; (7ce0 <D_Nv_Read_Impl+0x74>)
    7cb6:	4a06      	ldr	r2, [pc, #24]	; (7cd0 <D_Nv_Read_Impl+0x64>)
    7cb8:	2174      	movs	r1, #116	; 0x74
    7cba:	4806      	ldr	r0, [pc, #24]	; (7cd4 <D_Nv_Read_Impl+0x68>)
    7cbc:	4c06      	ldr	r4, [pc, #24]	; (7cd8 <D_Nv_Read_Impl+0x6c>)
    7cbe:	47a0      	blx	r4
    7cc0:	00000400 	.word	0x00000400
    7cc4:	00004400 	.word	0x00004400
    7cc8:	000161b7 	.word	0x000161b7
    7ccc:	00017bfc 	.word	0x00017bfc
    7cd0:	00017c7c 	.word	0x00017c7c
    7cd4:	00017bb8 	.word	0x00017bb8
    7cd8:	000160f5 	.word	0x000160f5
    7cdc:	00017c18 	.word	0x00017c18
    7ce0:	00017c4c 	.word	0x00017c4c

00007ce4 <D_Nv_Write_Impl>:
{
    7ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
    7ce6:	46de      	mov	lr, fp
    7ce8:	4657      	mov	r7, sl
    7cea:	464e      	mov	r6, r9
    7cec:	4645      	mov	r5, r8
    7cee:	b5e0      	push	{r5, r6, r7, lr}
    7cf0:	b093      	sub	sp, #76	; 0x4c
    7cf2:	9201      	str	r2, [sp, #4]
    7cf4:	469a      	mov	sl, r3
  uint32_t  address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    7cf6:	4c46      	ldr	r4, [pc, #280]	; (7e10 <D_Nv_Write_Impl+0x12c>)
    7cf8:	190c      	adds	r4, r1, r4
    7cfa:	0340      	lsls	r0, r0, #13
    7cfc:	1825      	adds	r5, r4, r0
  assert(numberOfBytes);
    7cfe:	2b00      	cmp	r3, #0
    7d00:	d047      	beq.n	7d92 <D_Nv_Write_Impl+0xae>
  assert(address <= D_NV_MEMORY_END);
    7d02:	4b44      	ldr	r3, [pc, #272]	; (7e14 <D_Nv_Write_Impl+0x130>)
    7d04:	1e5a      	subs	r2, r3, #1
    7d06:	4295      	cmp	r5, r2
    7d08:	d849      	bhi.n	7d9e <D_Nv_Write_Impl+0xba>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    7d0a:	4652      	mov	r2, sl
    7d0c:	1952      	adds	r2, r2, r5
    7d0e:	4293      	cmp	r3, r2
    7d10:	d34b      	bcc.n	7daa <D_Nv_Write_Impl+0xc6>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    7d12:	46d3      	mov	fp, sl
    7d14:	4451      	add	r1, sl
    7d16:	2380      	movs	r3, #128	; 0x80
    7d18:	019b      	lsls	r3, r3, #6
    7d1a:	4299      	cmp	r1, r3
    7d1c:	d84b      	bhi.n	7db6 <D_Nv_Write_Impl+0xd2>
  if (s_pfSystemCheckCallback != NULL)
    7d1e:	4b3e      	ldr	r3, [pc, #248]	; (7e18 <D_Nv_Write_Impl+0x134>)
    7d20:	681b      	ldr	r3, [r3, #0]
    7d22:	2b00      	cmp	r3, #0
    7d24:	d000      	beq.n	7d28 <D_Nv_Write_Impl+0x44>
    s_pfSystemCheckCallback();
    7d26:	4798      	blx	r3
  pageOffset = address % NVMCTRL_PAGE_SIZE;
    7d28:	273f      	movs	r7, #63	; 0x3f
    7d2a:	402f      	ands	r7, r5
  pageStart = address - pageOffset;
    7d2c:	1bec      	subs	r4, r5, r7
  numberOfPageBytes = MIN((NVMCTRL_PAGE_SIZE - pageOffset), numberOfBytes);
    7d2e:	2640      	movs	r6, #64	; 0x40
    7d30:	1bf6      	subs	r6, r6, r7
    7d32:	455e      	cmp	r6, fp
    7d34:	dd00      	ble.n	7d38 <D_Nv_Write_Impl+0x54>
    7d36:	4656      	mov	r6, sl
    7d38:	b2b3      	uxth	r3, r6
    7d3a:	469b      	mov	fp, r3
  memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    7d3c:	2240      	movs	r2, #64	; 0x40
    7d3e:	21ff      	movs	r1, #255	; 0xff
    7d40:	a802      	add	r0, sp, #8
    7d42:	4b36      	ldr	r3, [pc, #216]	; (7e1c <D_Nv_Write_Impl+0x138>)
    7d44:	4798      	blx	r3
  memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    7d46:	003b      	movs	r3, r7
    7d48:	aa02      	add	r2, sp, #8
    7d4a:	4694      	mov	ip, r2
    7d4c:	4463      	add	r3, ip
    7d4e:	9300      	str	r3, [sp, #0]
    7d50:	0436      	lsls	r6, r6, #16
    7d52:	0c37      	lsrs	r7, r6, #16
    7d54:	003a      	movs	r2, r7
    7d56:	9901      	ldr	r1, [sp, #4]
    7d58:	0018      	movs	r0, r3
    7d5a:	4b31      	ldr	r3, [pc, #196]	; (7e20 <D_Nv_Write_Impl+0x13c>)
    7d5c:	4798      	blx	r3
	cpu_irq_enter_critical();
    7d5e:	4b31      	ldr	r3, [pc, #196]	; (7e24 <D_Nv_Write_Impl+0x140>)
    7d60:	4798      	blx	r3
    error_code = nvm_write_buffer(pageStart, page_buf, NVMCTRL_PAGE_SIZE);
    7d62:	4e31      	ldr	r6, [pc, #196]	; (7e28 <D_Nv_Write_Impl+0x144>)
    7d64:	2240      	movs	r2, #64	; 0x40
    7d66:	a902      	add	r1, sp, #8
    7d68:	0020      	movs	r0, r4
    7d6a:	47b0      	blx	r6
  } while (error_code == STATUS_BUSY);
    7d6c:	2805      	cmp	r0, #5
    7d6e:	d0f9      	beq.n	7d64 <D_Nv_Write_Impl+0x80>
	cpu_irq_leave_critical();
    7d70:	4b2e      	ldr	r3, [pc, #184]	; (7e2c <D_Nv_Write_Impl+0x148>)
    7d72:	4798      	blx	r3
  numberOfBytes -= numberOfPageBytes;
    7d74:	4653      	mov	r3, sl
    7d76:	465a      	mov	r2, fp
    7d78:	1a9e      	subs	r6, r3, r2
    7d7a:	b2b6      	uxth	r6, r6
  address += numberOfPageBytes;
    7d7c:	19ec      	adds	r4, r5, r7
  pBuffer += numberOfPageBytes;
    7d7e:	9b01      	ldr	r3, [sp, #4]
    7d80:	4699      	mov	r9, r3
    7d82:	44b9      	add	r9, r7
  while (0U < numberOfBytes)
    7d84:	2e00      	cmp	r6, #0
    7d86:	d03b      	beq.n	7e00 <D_Nv_Write_Impl+0x11c>
    memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    7d88:	4b24      	ldr	r3, [pc, #144]	; (7e1c <D_Nv_Write_Impl+0x138>)
    7d8a:	469b      	mov	fp, r3
    memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    7d8c:	4b24      	ldr	r3, [pc, #144]	; (7e20 <D_Nv_Write_Impl+0x13c>)
    7d8e:	4698      	mov	r8, r3
    7d90:	e031      	b.n	7df6 <D_Nv_Write_Impl+0x112>
  assert(numberOfBytes);
    7d92:	4b27      	ldr	r3, [pc, #156]	; (7e30 <D_Nv_Write_Impl+0x14c>)
    7d94:	4a27      	ldr	r2, [pc, #156]	; (7e34 <D_Nv_Write_Impl+0x150>)
    7d96:	218a      	movs	r1, #138	; 0x8a
    7d98:	4827      	ldr	r0, [pc, #156]	; (7e38 <D_Nv_Write_Impl+0x154>)
    7d9a:	4c28      	ldr	r4, [pc, #160]	; (7e3c <D_Nv_Write_Impl+0x158>)
    7d9c:	47a0      	blx	r4
  assert(address <= D_NV_MEMORY_END);
    7d9e:	4b28      	ldr	r3, [pc, #160]	; (7e40 <D_Nv_Write_Impl+0x15c>)
    7da0:	4a24      	ldr	r2, [pc, #144]	; (7e34 <D_Nv_Write_Impl+0x150>)
    7da2:	218b      	movs	r1, #139	; 0x8b
    7da4:	4824      	ldr	r0, [pc, #144]	; (7e38 <D_Nv_Write_Impl+0x154>)
    7da6:	4c25      	ldr	r4, [pc, #148]	; (7e3c <D_Nv_Write_Impl+0x158>)
    7da8:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    7daa:	4b26      	ldr	r3, [pc, #152]	; (7e44 <D_Nv_Write_Impl+0x160>)
    7dac:	4a21      	ldr	r2, [pc, #132]	; (7e34 <D_Nv_Write_Impl+0x150>)
    7dae:	218c      	movs	r1, #140	; 0x8c
    7db0:	4821      	ldr	r0, [pc, #132]	; (7e38 <D_Nv_Write_Impl+0x154>)
    7db2:	4c22      	ldr	r4, [pc, #136]	; (7e3c <D_Nv_Write_Impl+0x158>)
    7db4:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    7db6:	4b24      	ldr	r3, [pc, #144]	; (7e48 <D_Nv_Write_Impl+0x164>)
    7db8:	4a1e      	ldr	r2, [pc, #120]	; (7e34 <D_Nv_Write_Impl+0x150>)
    7dba:	218d      	movs	r1, #141	; 0x8d
    7dbc:	481e      	ldr	r0, [pc, #120]	; (7e38 <D_Nv_Write_Impl+0x154>)
    7dbe:	4c1f      	ldr	r4, [pc, #124]	; (7e3c <D_Nv_Write_Impl+0x158>)
    7dc0:	47a0      	blx	r4
    numberOfPageBytes = MIN(NVMCTRL_PAGE_SIZE, numberOfBytes);
    7dc2:	b29f      	uxth	r7, r3
    memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    7dc4:	2240      	movs	r2, #64	; 0x40
    7dc6:	21ff      	movs	r1, #255	; 0xff
    7dc8:	a802      	add	r0, sp, #8
    7dca:	47d8      	blx	fp
    memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    7dcc:	003a      	movs	r2, r7
    7dce:	4649      	mov	r1, r9
    7dd0:	9800      	ldr	r0, [sp, #0]
    7dd2:	47c0      	blx	r8
	cpu_irq_enter_critical();
    7dd4:	4b13      	ldr	r3, [pc, #76]	; (7e24 <D_Nv_Write_Impl+0x140>)
    7dd6:	4798      	blx	r3
      error_code = nvm_write_buffer(address, page_buf, NVMCTRL_PAGE_SIZE);
    7dd8:	4d13      	ldr	r5, [pc, #76]	; (7e28 <D_Nv_Write_Impl+0x144>)
    7dda:	2240      	movs	r2, #64	; 0x40
    7ddc:	a902      	add	r1, sp, #8
    7dde:	0020      	movs	r0, r4
    7de0:	47a8      	blx	r5
    } while (error_code == STATUS_BUSY);
    7de2:	2805      	cmp	r0, #5
    7de4:	d0f9      	beq.n	7dda <D_Nv_Write_Impl+0xf6>
	cpu_irq_leave_critical();
    7de6:	4b11      	ldr	r3, [pc, #68]	; (7e2c <D_Nv_Write_Impl+0x148>)
    7de8:	4798      	blx	r3
    numberOfBytes -= numberOfPageBytes;
    7dea:	1bf6      	subs	r6, r6, r7
    7dec:	b2b6      	uxth	r6, r6
    address += numberOfPageBytes;
    7dee:	19e4      	adds	r4, r4, r7
    pBuffer += numberOfPageBytes;
    7df0:	44b9      	add	r9, r7
  while (0U < numberOfBytes)
    7df2:	2e00      	cmp	r6, #0
    7df4:	d004      	beq.n	7e00 <D_Nv_Write_Impl+0x11c>
    numberOfPageBytes = MIN(NVMCTRL_PAGE_SIZE, numberOfBytes);
    7df6:	1c33      	adds	r3, r6, #0
    7df8:	2e40      	cmp	r6, #64	; 0x40
    7dfa:	d9e2      	bls.n	7dc2 <D_Nv_Write_Impl+0xde>
    7dfc:	2340      	movs	r3, #64	; 0x40
    7dfe:	e7e0      	b.n	7dc2 <D_Nv_Write_Impl+0xde>
}
    7e00:	b013      	add	sp, #76	; 0x4c
    7e02:	bc3c      	pop	{r2, r3, r4, r5}
    7e04:	4690      	mov	r8, r2
    7e06:	4699      	mov	r9, r3
    7e08:	46a2      	mov	sl, r4
    7e0a:	46ab      	mov	fp, r5
    7e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7e0e:	46c0      	nop			; (mov r8, r8)
    7e10:	00000400 	.word	0x00000400
    7e14:	00004400 	.word	0x00004400
    7e18:	200000f8 	.word	0x200000f8
    7e1c:	000161c9 	.word	0x000161c9
    7e20:	000161b7 	.word	0x000161b7
    7e24:	000044f9 	.word	0x000044f9
    7e28:	00004a49 	.word	0x00004a49
    7e2c:	00004539 	.word	0x00004539
    7e30:	00017ba8 	.word	0x00017ba8
    7e34:	00017c8c 	.word	0x00017c8c
    7e38:	00017bb8 	.word	0x00017bb8
    7e3c:	000160f5 	.word	0x000160f5
    7e40:	00017bfc 	.word	0x00017bfc
    7e44:	00017c18 	.word	0x00017c18
    7e48:	00017c4c 	.word	0x00017c4c

00007e4c <D_Nv_EraseSector_Impl>:
{
    7e4c:	b570      	push	{r4, r5, r6, lr}
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE;
    7e4e:	0344      	lsls	r4, r0, #13
    7e50:	480c      	ldr	r0, [pc, #48]	; (7e84 <D_Nv_EraseSector_Impl+0x38>)
    7e52:	1824      	adds	r4, r4, r0
  address &= ~(NVMCTRL_ROW_SIZE - 1);
    7e54:	23ff      	movs	r3, #255	; 0xff
    7e56:	439c      	bics	r4, r3
  assert(address <= D_NV_MEMORY_END);
    7e58:	4b0b      	ldr	r3, [pc, #44]	; (7e88 <D_Nv_EraseSector_Impl+0x3c>)
    7e5a:	3b01      	subs	r3, #1
    7e5c:	2280      	movs	r2, #128	; 0x80
    7e5e:	0192      	lsls	r2, r2, #6
    7e60:	18a6      	adds	r6, r4, r2
    7e62:	429c      	cmp	r4, r3
    7e64:	d807      	bhi.n	7e76 <D_Nv_EraseSector_Impl+0x2a>
    nvm_erase_row (address);
    7e66:	4d09      	ldr	r5, [pc, #36]	; (7e8c <D_Nv_EraseSector_Impl+0x40>)
    7e68:	0020      	movs	r0, r4
    7e6a:	47a8      	blx	r5
    address += NVMCTRL_ROW_SIZE;
    7e6c:	3401      	adds	r4, #1
    7e6e:	34ff      	adds	r4, #255	; 0xff
  for (uint8_t i = 0U; i < (D_NV_SECTOR_SIZE / NVMCTRL_ROW_SIZE); i++)
    7e70:	42b4      	cmp	r4, r6
    7e72:	d1f9      	bne.n	7e68 <D_Nv_EraseSector_Impl+0x1c>
}
    7e74:	bd70      	pop	{r4, r5, r6, pc}
  assert(address <= D_NV_MEMORY_END);
    7e76:	4b06      	ldr	r3, [pc, #24]	; (7e90 <D_Nv_EraseSector_Impl+0x44>)
    7e78:	4a06      	ldr	r2, [pc, #24]	; (7e94 <D_Nv_EraseSector_Impl+0x48>)
    7e7a:	21c2      	movs	r1, #194	; 0xc2
    7e7c:	4806      	ldr	r0, [pc, #24]	; (7e98 <D_Nv_EraseSector_Impl+0x4c>)
    7e7e:	4c07      	ldr	r4, [pc, #28]	; (7e9c <D_Nv_EraseSector_Impl+0x50>)
    7e80:	47a0      	blx	r4
    7e82:	46c0      	nop			; (mov r8, r8)
    7e84:	00000400 	.word	0x00000400
    7e88:	00004400 	.word	0x00004400
    7e8c:	00004b21 	.word	0x00004b21
    7e90:	00017bfc 	.word	0x00017bfc
    7e94:	00017c9c 	.word	0x00017c9c
    7e98:	00017bb8 	.word	0x00017bb8
    7e9c:	000160f5 	.word	0x000160f5

00007ea0 <D_Nv_IsEmpty_Impl>:
    \param numberOfBytes The number of bytes to check
    \returns true if the range is empty, FALSE otherwise.
    \note Sector crossing is not permitted
*/
bool D_Nv_IsEmpty(uint8_t sector, uint16_t offset, D_Nv_Size_t numberOfBytes)
{
    7ea0:	b510      	push	{r4, lr}
    7ea2:	0013      	movs	r3, r2
  return CompareData(sector, offset, NULL, numberOfBytes);
    7ea4:	2200      	movs	r2, #0
    7ea6:	4c01      	ldr	r4, [pc, #4]	; (7eac <D_Nv_IsEmpty_Impl+0xc>)
    7ea8:	47a0      	blx	r4
}
    7eaa:	bd10      	pop	{r4, pc}
    7eac:	00007b91 	.word	0x00007b91

00007eb0 <D_Nv_IsEqual_Impl>:
    \param[in] pBuffer The start address of the buffer that contains the data to compare with
    \param numberOfBytes The number of bytes to compare
    \note offset+numberOfBytes must be <= D_NV_SECTOR_SIZE (meaning sector crossing is not permitted)
*/
bool D_Nv_IsEqual(uint8_t sector, uint16_t offset, uint8_t *pBuffer, D_Nv_Size_t numberOfBytes)
{
    7eb0:	b510      	push	{r4, lr}
  return CompareData(sector, offset, pBuffer, numberOfBytes);
    7eb2:	4c01      	ldr	r4, [pc, #4]	; (7eb8 <D_Nv_IsEqual_Impl+0x8>)
    7eb4:	47a0      	blx	r4
}
    7eb6:	bd10      	pop	{r4, pc}
    7eb8:	00007b91 	.word	0x00007b91

00007ebc <PowerSupplyTooLow>:
/** Check the power supply.
    \returns TRUE if the power supply is too low, FALSE when the the power
             supply is OK or when there is no callback installed.
*/
static bool PowerSupplyTooLow()
{
    7ebc:	b510      	push	{r4, lr}
    bool result = false;
    if ( s_powerSupplyCheckingFunction != NULL )
    7ebe:	4b05      	ldr	r3, [pc, #20]	; (7ed4 <PowerSupplyTooLow+0x18>)
    7ec0:	681b      	ldr	r3, [r3, #0]
    7ec2:	2b00      	cmp	r3, #0
    7ec4:	d004      	beq.n	7ed0 <PowerSupplyTooLow+0x14>
    {
        if ( !s_powerSupplyCheckingFunction() )
    7ec6:	4798      	blx	r3
    7ec8:	2301      	movs	r3, #1
    7eca:	4058      	eors	r0, r3
    7ecc:	b2c0      	uxtb	r0, r0
        {
            result = true;
        }
    }
    return result;
}
    7ece:	bd10      	pop	{r4, pc}
    bool result = false;
    7ed0:	2000      	movs	r0, #0
    7ed2:	e7fc      	b.n	7ece <PowerSupplyTooLow+0x12>
    7ed4:	20000264 	.word	0x20000264

00007ed8 <UpdateSectorHead>:
*/

static void UpdateSectorHead(uint16_t increment, ItemAlignment_t itemAlignment )
{
    // Adjust the sector head according to the increment and alignment given
    switch(itemAlignment)
    7ed8:	2901      	cmp	r1, #1
    7eda:	d009      	beq.n	7ef0 <UpdateSectorHead+0x18>
    7edc:	2900      	cmp	r1, #0
    7ede:	d002      	beq.n	7ee6 <UpdateSectorHead+0xe>
    7ee0:	2902      	cmp	r1, #2
    7ee2:	d00d      	beq.n	7f00 <UpdateSectorHead+0x28>
           s_sectorHead = (s_sectorHead + increment + 0x003Fu) & 0xFFC0u;
           break;
        default:
           break;
    }
}
    7ee4:	4770      	bx	lr
           s_sectorHead = (s_sectorHead + increment);
    7ee6:	4b0a      	ldr	r3, [pc, #40]	; (7f10 <UpdateSectorHead+0x38>)
    7ee8:	881a      	ldrh	r2, [r3, #0]
    7eea:	1880      	adds	r0, r0, r2
    7eec:	8018      	strh	r0, [r3, #0]
           break;
    7eee:	e7f9      	b.n	7ee4 <UpdateSectorHead+0xc>
           s_sectorHead = (s_sectorHead + increment + 0x000Fu) & 0xFFF0u;
    7ef0:	4a07      	ldr	r2, [pc, #28]	; (7f10 <UpdateSectorHead+0x38>)
    7ef2:	8813      	ldrh	r3, [r2, #0]
    7ef4:	330f      	adds	r3, #15
    7ef6:	18c0      	adds	r0, r0, r3
    7ef8:	230f      	movs	r3, #15
    7efa:	4398      	bics	r0, r3
    7efc:	8010      	strh	r0, [r2, #0]
           break;
    7efe:	e7f1      	b.n	7ee4 <UpdateSectorHead+0xc>
           s_sectorHead = (s_sectorHead + increment + 0x003Fu) & 0xFFC0u;
    7f00:	4a03      	ldr	r2, [pc, #12]	; (7f10 <UpdateSectorHead+0x38>)
    7f02:	8813      	ldrh	r3, [r2, #0]
    7f04:	333f      	adds	r3, #63	; 0x3f
    7f06:	18c0      	adds	r0, r0, r3
    7f08:	233f      	movs	r3, #63	; 0x3f
    7f0a:	4398      	bics	r0, r3
    7f0c:	8010      	strh	r0, [r2, #0]
}
    7f0e:	e7e9      	b.n	7ee4 <UpdateSectorHead+0xc>
    7f10:	2000026a 	.word	0x2000026a

00007f14 <ComputeCrc>:
    // item not found
    return 0x0000u;
}

static uint16_t ComputeCrc(uint8_t* pData, uint16_t length, uint16_t crc)
{
    7f14:	b530      	push	{r4, r5, lr}
    for ( /* empty */ ; length != 0u; length-- )
    7f16:	2900      	cmp	r1, #0
    7f18:	d019      	beq.n	7f4e <ComputeCrc+0x3a>
    {
        uint8_t x;
        uint8_t data;

        if (pData == NULL)
            data = 0xFF;
    7f1a:	24ff      	movs	r4, #255	; 0xff
    7f1c:	e013      	b.n	7f46 <ComputeCrc+0x32>
    7f1e:	0023      	movs	r3, r4
        else
            data = *pData;

        x = (uint8_t) ((crc >> 8) ^ data);
    7f20:	0a15      	lsrs	r5, r2, #8
    7f22:	406b      	eors	r3, r5
        x = x ^ (x >> 4);
    7f24:	091d      	lsrs	r5, r3, #4
    7f26:	406b      	eors	r3, r5
        crc = (crc << 8) ^ ((uint16_t) x << 12) ^ ((uint16_t) x << 5) ^ (uint16_t) x;
    7f28:	0212      	lsls	r2, r2, #8
    7f2a:	405a      	eors	r2, r3
    7f2c:	031d      	lsls	r5, r3, #12
    7f2e:	406a      	eors	r2, r5
    7f30:	015b      	lsls	r3, r3, #5
    7f32:	405a      	eors	r2, r3
    7f34:	b292      	uxth	r2, r2

        if ( pData != NULL )
          pData++;
    7f36:	0003      	movs	r3, r0
    7f38:	1e5d      	subs	r5, r3, #1
    7f3a:	41ab      	sbcs	r3, r5
    7f3c:	18c0      	adds	r0, r0, r3
    for ( /* empty */ ; length != 0u; length-- )
    7f3e:	3901      	subs	r1, #1
    7f40:	b289      	uxth	r1, r1
    7f42:	2900      	cmp	r1, #0
    7f44:	d003      	beq.n	7f4e <ComputeCrc+0x3a>
        if (pData == NULL)
    7f46:	2800      	cmp	r0, #0
    7f48:	d0e9      	beq.n	7f1e <ComputeCrc+0xa>
            data = *pData;
    7f4a:	7803      	ldrb	r3, [r0, #0]
    7f4c:	e7e8      	b.n	7f20 <ComputeCrc+0xc>
    }

    return crc;
}
    7f4e:	0010      	movs	r0, r2
    7f50:	bd30      	pop	{r4, r5, pc}
    7f52:	Address 0x00007f52 is out of bounds.


00007f54 <GatherData>:
       be copied to the flash memory \ref s_sectorHead in sector \ref s_sector.

*/

static bool GatherData(uint8_t sourceSector, uint16_t lastBlockPointer, uint16_t offset, uint16_t length, void* pData)
{
    7f54:	b5f0      	push	{r4, r5, r6, r7, lr}
    7f56:	46de      	mov	lr, fp
    7f58:	4657      	mov	r7, sl
    7f5a:	b580      	push	{r7, lr}
    7f5c:	b089      	sub	sp, #36	; 0x24
    7f5e:	9001      	str	r0, [sp, #4]
    7f60:	9102      	str	r1, [sp, #8]
    7f62:	4693      	mov	fp, r2
    uint16_t blockStart;
    uint16_t blockEnd;
    uint16_t count;

    // prepare the correct pointer
    if ( pData != NULL )
    7f64:	9a10      	ldr	r2, [sp, #64]	; 0x40
    7f66:	2a00      	cmp	r2, #0
    7f68:	d00d      	beq.n	7f86 <GatherData+0x32>
    {
        pDestination = (uint8_t*) pData + length;
    7f6a:	4692      	mov	sl, r2
    7f6c:	449a      	add	sl, r3

    // [readStart, readEnd> is the range of data that can be read during the current
    // pass over the blocks (the range includes readStart, but not readEnd).
    // it is initialized with the requested range
    uint16_t readStart = offset;
    uint16_t readEnd = offset + length;
    7f6e:	445b      	add	r3, fp
    7f70:	b29d      	uxth	r5, r3

    // continue until we have all the data that was requested
    while ( readStart != readEnd )
    7f72:	465e      	mov	r6, fp
    7f74:	9c02      	ldr	r4, [sp, #8]
            sourcePointer -= count;
            pDestination -= count;
            D_Nv_Read(sourceSector, sourcePointer, (uint8_t*)pDestination, count);
        }
    }
    return true;
    7f76:	2001      	movs	r0, #1
    while ( readStart != readEnd )
    7f78:	45ab      	cmp	fp, r5
    7f7a:	d03e      	beq.n	7ffa <GatherData+0xa6>
            D_Nv_Read(sourceSector, currentBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    7f7c:	4f22      	ldr	r7, [pc, #136]	; (8008 <GatherData+0xb4>)
            if ( currentBlockPointer == 0x0000u )
    7f7e:	2c00      	cmp	r4, #0
    7f80:	d108      	bne.n	7f94 <GatherData+0x40>
                return false;
    7f82:	2000      	movs	r0, #0
    7f84:	e039      	b.n	7ffa <GatherData+0xa6>
    uint8_t* pDestination = NULL;
    7f86:	2200      	movs	r2, #0
    7f88:	4692      	mov	sl, r2
    7f8a:	e7f0      	b.n	7f6e <GatherData+0x1a>
            currentBlockPointer = blockHeader.previousBlock;
    7f8c:	ab04      	add	r3, sp, #16
    7f8e:	895c      	ldrh	r4, [r3, #10]
            if ( currentBlockPointer == 0x0000u )
    7f90:	2c00      	cmp	r4, #0
    7f92:	d031      	beq.n	7ff8 <GatherData+0xa4>
            D_Nv_Read(sourceSector, currentBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    7f94:	2310      	movs	r3, #16
    7f96:	aa04      	add	r2, sp, #16
    7f98:	0021      	movs	r1, r4
    7f9a:	9801      	ldr	r0, [sp, #4]
    7f9c:	47b8      	blx	r7
            blockStart = blockHeader.blockOffset;
    7f9e:	ab04      	add	r3, sp, #16
    7fa0:	889a      	ldrh	r2, [r3, #4]
            if ( (readEnd <= blockStart) || (readStart >= blockEnd) )
    7fa2:	42aa      	cmp	r2, r5
    7fa4:	d2f2      	bcs.n	7f8c <GatherData+0x38>
            blockEnd = blockHeader.blockOffset + blockHeader.blockLength;
    7fa6:	88db      	ldrh	r3, [r3, #6]
    7fa8:	18d3      	adds	r3, r2, r3
    7faa:	b29b      	uxth	r3, r3
            if ( (readEnd <= blockStart) || (readStart >= blockEnd) )
    7fac:	42b3      	cmp	r3, r6
    7fae:	d9ed      	bls.n	7f8c <GatherData+0x38>
            else if ( readEnd > blockEnd )
    7fb0:	42ab      	cmp	r3, r5
    7fb2:	d201      	bcs.n	7fb8 <GatherData+0x64>
                readStart = blockEnd;
    7fb4:	001e      	movs	r6, r3
    7fb6:	e7e9      	b.n	7f8c <GatherData+0x38>
        uint16_t sourcePointer = (currentBlockPointer + BLOCK_HEADER_SIZE) + (readEnd - blockStart);
    7fb8:	1aa9      	subs	r1, r5, r2
    7fba:	b289      	uxth	r1, r1
        if ( readStart < blockStart )
    7fbc:	42b2      	cmp	r2, r6
    7fbe:	d915      	bls.n	7fec <GatherData+0x98>
            currentBlockPointer = blockHeader.previousBlock;
    7fc0:	ab04      	add	r3, sp, #16
    7fc2:	895b      	ldrh	r3, [r3, #10]
    7fc4:	9303      	str	r3, [sp, #12]
            count = readEnd - blockStart;
    7fc6:	000b      	movs	r3, r1
        readEnd -= count;
    7fc8:	1aed      	subs	r5, r5, r3
    7fca:	b2ad      	uxth	r5, r5
        if ( pDestination != NULL)
    7fcc:	4652      	mov	r2, sl
    7fce:	2a00      	cmp	r2, #0
    7fd0:	d008      	beq.n	7fe4 <GatherData+0x90>
        uint16_t sourcePointer = (currentBlockPointer + BLOCK_HEADER_SIZE) + (readEnd - blockStart);
    7fd2:	3410      	adds	r4, #16
    7fd4:	1909      	adds	r1, r1, r4
            pDestination -= count;
    7fd6:	1ad2      	subs	r2, r2, r3
    7fd8:	4692      	mov	sl, r2
            sourcePointer -= count;
    7fda:	1ac9      	subs	r1, r1, r3
            D_Nv_Read(sourceSector, sourcePointer, (uint8_t*)pDestination, count);
    7fdc:	b289      	uxth	r1, r1
    7fde:	9801      	ldr	r0, [sp, #4]
    7fe0:	4c09      	ldr	r4, [pc, #36]	; (8008 <GatherData+0xb4>)
    7fe2:	47a0      	blx	r4
    while ( readStart != readEnd )
    7fe4:	42ae      	cmp	r6, r5
    7fe6:	d00d      	beq.n	8004 <GatherData+0xb0>
    7fe8:	9c03      	ldr	r4, [sp, #12]
    7fea:	e7c8      	b.n	7f7e <GatherData+0x2a>
            count = readEnd - readStart;
    7fec:	1bab      	subs	r3, r5, r6
    7fee:	b29b      	uxth	r3, r3
            readStart = offset;
    7ff0:	465e      	mov	r6, fp
            currentBlockPointer = lastBlockPointer;
    7ff2:	9a02      	ldr	r2, [sp, #8]
    7ff4:	9203      	str	r2, [sp, #12]
    7ff6:	e7e7      	b.n	7fc8 <GatherData+0x74>
                return false;
    7ff8:	2000      	movs	r0, #0
}
    7ffa:	b009      	add	sp, #36	; 0x24
    7ffc:	bc0c      	pop	{r2, r3}
    7ffe:	4692      	mov	sl, r2
    8000:	469b      	mov	fp, r3
    8002:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return true;
    8004:	2001      	movs	r0, #1
    8006:	e7f8      	b.n	7ffa <GatherData+0xa6>
    8008:	00007c6d 	.word	0x00007c6d

0000800c <ComputeDataCrc>:
{
    800c:	b5f0      	push	{r4, r5, r6, r7, lr}
    800e:	46de      	mov	lr, fp
    8010:	4647      	mov	r7, r8
    8012:	b580      	push	{r7, lr}
    8014:	b087      	sub	sp, #28
    8016:	9004      	str	r0, [sp, #16]
    8018:	9105      	str	r1, [sp, #20]
    length = pBlockHeader->blockLength;
    801a:	7995      	ldrb	r5, [r2, #6]
    801c:	79d3      	ldrb	r3, [r2, #7]
    801e:	021b      	lsls	r3, r3, #8
    8020:	431d      	orrs	r5, r3
    offset = pBlockHeader->blockOffset;
    8022:	7917      	ldrb	r7, [r2, #4]
    8024:	7953      	ldrb	r3, [r2, #5]
    8026:	021b      	lsls	r3, r3, #8
    8028:	431f      	orrs	r7, r3
    for(int8_t i= (length/sizeof(dataBlock)); i>=0; i--)
    802a:	0a2c      	lsrs	r4, r5, #8
    802c:	b264      	sxtb	r4, r4
    802e:	2c00      	cmp	r4, #0
    8030:	db2f      	blt.n	8092 <ComputeDataCrc+0x86>
    8032:	4b1c      	ldr	r3, [pc, #112]	; (80a4 <ComputeDataCrc+0x98>)
    8034:	9303      	str	r3, [sp, #12]
            crc = ComputeCrc(((uint8_t*) &dataBlock), dataLength, crc);
    8036:	4b1c      	ldr	r3, [pc, #112]	; (80a8 <ComputeDataCrc+0x9c>)
    8038:	4698      	mov	r8, r3
    803a:	e011      	b.n	8060 <ComputeDataCrc+0x54>
        if (dataLength == 0)
    803c:	2d00      	cmp	r5, #0
    803e:	d02a      	beq.n	8096 <ComputeDataCrc+0x8a>
        if (GatherData(sourceSector, blockPointer, offset, dataLength, dataBlock))
    8040:	4b1a      	ldr	r3, [pc, #104]	; (80ac <ComputeDataCrc+0xa0>)
    8042:	9300      	str	r3, [sp, #0]
    8044:	002b      	movs	r3, r5
    8046:	003a      	movs	r2, r7
    8048:	9905      	ldr	r1, [sp, #20]
    804a:	9804      	ldr	r0, [sp, #16]
    804c:	4e18      	ldr	r6, [pc, #96]	; (80b0 <ComputeDataCrc+0xa4>)
    804e:	47b0      	blx	r6
    8050:	2800      	cmp	r0, #0
    8052:	d020      	beq.n	8096 <ComputeDataCrc+0x8a>
    8054:	0029      	movs	r1, r5
    8056:	e015      	b.n	8084 <ComputeDataCrc+0x78>
    8058:	3c01      	subs	r4, #1
    805a:	b264      	sxtb	r4, r4
    for(int8_t i= (length/sizeof(dataBlock)); i>=0; i--)
    805c:	1c63      	adds	r3, r4, #1
    805e:	d01a      	beq.n	8096 <ComputeDataCrc+0x8a>
        if (i)
    8060:	2c00      	cmp	r4, #0
    8062:	d0eb      	beq.n	803c <ComputeDataCrc+0x30>
            length = length - sizeof(dataBlock);
    8064:	3d01      	subs	r5, #1
    8066:	3dff      	subs	r5, #255	; 0xff
    8068:	b2ad      	uxth	r5, r5
        if (GatherData(sourceSector, blockPointer, offset, dataLength, dataBlock))
    806a:	4b10      	ldr	r3, [pc, #64]	; (80ac <ComputeDataCrc+0xa0>)
    806c:	9300      	str	r3, [sp, #0]
    806e:	2380      	movs	r3, #128	; 0x80
    8070:	005b      	lsls	r3, r3, #1
    8072:	003a      	movs	r2, r7
    8074:	9905      	ldr	r1, [sp, #20]
    8076:	9804      	ldr	r0, [sp, #16]
    8078:	4e0d      	ldr	r6, [pc, #52]	; (80b0 <ComputeDataCrc+0xa4>)
    807a:	47b0      	blx	r6
    807c:	2800      	cmp	r0, #0
    807e:	d0eb      	beq.n	8058 <ComputeDataCrc+0x4c>
            dataLength = sizeof(dataBlock);
    8080:	2180      	movs	r1, #128	; 0x80
    8082:	0049      	lsls	r1, r1, #1
            offset = offset+dataLength;
    8084:	187f      	adds	r7, r7, r1
    8086:	b2bf      	uxth	r7, r7
            crc = ComputeCrc(((uint8_t*) &dataBlock), dataLength, crc);
    8088:	9a03      	ldr	r2, [sp, #12]
    808a:	4808      	ldr	r0, [pc, #32]	; (80ac <ComputeDataCrc+0xa0>)
    808c:	47c0      	blx	r8
    808e:	9003      	str	r0, [sp, #12]
    8090:	e7e2      	b.n	8058 <ComputeDataCrc+0x4c>
    uint16_t crc = 0xFFFFu;
    8092:	4b04      	ldr	r3, [pc, #16]	; (80a4 <ComputeDataCrc+0x98>)
    8094:	9303      	str	r3, [sp, #12]
}
    8096:	9803      	ldr	r0, [sp, #12]
    8098:	b007      	add	sp, #28
    809a:	bc0c      	pop	{r2, r3}
    809c:	4690      	mov	r8, r2
    809e:	469b      	mov	fp, r3
    80a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    80a2:	46c0      	nop			; (mov r8, r8)
    80a4:	0000ffff 	.word	0x0000ffff
    80a8:	00007f15 	.word	0x00007f15
    80ac:	2000012c 	.word	0x2000012c
    80b0:	00007f55 	.word	0x00007f55

000080b4 <FindItemCache>:
{
    80b4:	b570      	push	{r4, r5, r6, lr}
    for ( uint8_t cacheIndex = 0u; cacheIndex < s_itemCount; cacheIndex++ )
    80b6:	4b16      	ldr	r3, [pc, #88]	; (8110 <FindItemCache+0x5c>)
    80b8:	781c      	ldrb	r4, [r3, #0]
    80ba:	2c00      	cmp	r4, #0
    80bc:	d026      	beq.n	810c <FindItemCache+0x58>
        if ( cache->id == id )
    80be:	4b15      	ldr	r3, [pc, #84]	; (8114 <FindItemCache+0x60>)
    80c0:	881b      	ldrh	r3, [r3, #0]
    80c2:	4283      	cmp	r3, r0
    80c4:	d016      	beq.n	80f4 <FindItemCache+0x40>
    80c6:	2301      	movs	r3, #1
    80c8:	4e12      	ldr	r6, [pc, #72]	; (8114 <FindItemCache+0x60>)
    for ( uint8_t cacheIndex = 0u; cacheIndex < s_itemCount; cacheIndex++ )
    80ca:	b2da      	uxtb	r2, r3
    80cc:	4294      	cmp	r4, r2
    80ce:	d91b      	bls.n	8108 <FindItemCache+0x54>
        Item_t *cache = &s_itemCache[cacheIndex];
    80d0:	001d      	movs	r5, r3
        if ( cache->id == id )
    80d2:	1c59      	adds	r1, r3, #1
    80d4:	009a      	lsls	r2, r3, #2
    80d6:	5ab2      	ldrh	r2, [r6, r2]
    80d8:	4282      	cmp	r2, r0
    80da:	d001      	beq.n	80e0 <FindItemCache+0x2c>
    80dc:	000b      	movs	r3, r1
    80de:	e7f4      	b.n	80ca <FindItemCache+0x16>
        Item_t *cache = &s_itemCache[cacheIndex];
    80e0:	009b      	lsls	r3, r3, #2
    80e2:	480c      	ldr	r0, [pc, #48]	; (8114 <FindItemCache+0x60>)
    80e4:	18c0      	adds	r0, r0, r3
            assert(cache->lastBlock != 0x0000);
    80e6:	00ad      	lsls	r5, r5, #2
    80e8:	4b0a      	ldr	r3, [pc, #40]	; (8114 <FindItemCache+0x60>)
    80ea:	195d      	adds	r5, r3, r5
    80ec:	886b      	ldrh	r3, [r5, #2]
    80ee:	2b00      	cmp	r3, #0
    80f0:	d003      	beq.n	80fa <FindItemCache+0x46>
}
    80f2:	bd70      	pop	{r4, r5, r6, pc}
        Item_t *cache = &s_itemCache[cacheIndex];
    80f4:	4807      	ldr	r0, [pc, #28]	; (8114 <FindItemCache+0x60>)
    80f6:	2500      	movs	r5, #0
    80f8:	e7f5      	b.n	80e6 <FindItemCache+0x32>
            assert(cache->lastBlock != 0x0000);
    80fa:	4b07      	ldr	r3, [pc, #28]	; (8118 <FindItemCache+0x64>)
    80fc:	4a07      	ldr	r2, [pc, #28]	; (811c <FindItemCache+0x68>)
    80fe:	218c      	movs	r1, #140	; 0x8c
    8100:	31ff      	adds	r1, #255	; 0xff
    8102:	4807      	ldr	r0, [pc, #28]	; (8120 <FindItemCache+0x6c>)
    8104:	4c07      	ldr	r4, [pc, #28]	; (8124 <FindItemCache+0x70>)
    8106:	47a0      	blx	r4
    return NULL;
    8108:	2000      	movs	r0, #0
    810a:	e7f2      	b.n	80f2 <FindItemCache+0x3e>
    810c:	2000      	movs	r0, #0
    810e:	e7f0      	b.n	80f2 <FindItemCache+0x3e>
    8110:	20000260 	.word	0x20000260
    8114:	20000244 	.word	0x20000244
    8118:	00017d14 	.word	0x00017d14
    811c:	00017e00 	.word	0x00017e00
    8120:	00017d30 	.word	0x00017d30
    8124:	000160f5 	.word	0x000160f5

00008128 <FindItem>:
{
    8128:	b510      	push	{r4, lr}
    Item_t *cache = FindItemCache(id);
    812a:	4b05      	ldr	r3, [pc, #20]	; (8140 <FindItem+0x18>)
    812c:	4798      	blx	r3
    if (cache)
    812e:	2800      	cmp	r0, #0
    8130:	d004      	beq.n	813c <FindItem+0x14>
        return cache->lastBlock;
    8132:	7883      	ldrb	r3, [r0, #2]
    8134:	78c0      	ldrb	r0, [r0, #3]
    8136:	0200      	lsls	r0, r0, #8
    8138:	4318      	orrs	r0, r3
}
    813a:	bd10      	pop	{r4, pc}
    return 0x0000u;
    813c:	2000      	movs	r0, #0
    813e:	e7fc      	b.n	813a <FindItem+0x12>
    8140:	000080b5 	.word	0x000080b5

00008144 <CreateItemCache>:
{
    8144:	b510      	push	{r4, lr}
    8146:	0004      	movs	r4, r0
    assert(FindItemCache(id) == NULL);
    8148:	4b0e      	ldr	r3, [pc, #56]	; (8184 <CreateItemCache+0x40>)
    814a:	4798      	blx	r3
    814c:	2800      	cmp	r0, #0
    814e:	d10b      	bne.n	8168 <CreateItemCache+0x24>
    assert(s_itemCount < MAX_ITEM_COUNT);
    8150:	4b0d      	ldr	r3, [pc, #52]	; (8188 <CreateItemCache+0x44>)
    8152:	781b      	ldrb	r3, [r3, #0]
    8154:	2b06      	cmp	r3, #6
    8156:	d80e      	bhi.n	8176 <CreateItemCache+0x32>
    Item_t *cache = &s_itemCache[s_itemCount++];
    8158:	1c59      	adds	r1, r3, #1
    815a:	4a0b      	ldr	r2, [pc, #44]	; (8188 <CreateItemCache+0x44>)
    815c:	7011      	strb	r1, [r2, #0]
    cache->id = id;
    815e:	480b      	ldr	r0, [pc, #44]	; (818c <CreateItemCache+0x48>)
    8160:	009b      	lsls	r3, r3, #2
    8162:	521c      	strh	r4, [r3, r0]
    Item_t *cache = &s_itemCache[s_itemCount++];
    8164:	18c0      	adds	r0, r0, r3
}
    8166:	bd10      	pop	{r4, pc}
    assert(FindItemCache(id) == NULL);
    8168:	4b09      	ldr	r3, [pc, #36]	; (8190 <CreateItemCache+0x4c>)
    816a:	4a0a      	ldr	r2, [pc, #40]	; (8194 <CreateItemCache+0x50>)
    816c:	21cc      	movs	r1, #204	; 0xcc
    816e:	0049      	lsls	r1, r1, #1
    8170:	4809      	ldr	r0, [pc, #36]	; (8198 <CreateItemCache+0x54>)
    8172:	4c0a      	ldr	r4, [pc, #40]	; (819c <CreateItemCache+0x58>)
    8174:	47a0      	blx	r4
    assert(s_itemCount < MAX_ITEM_COUNT);
    8176:	4b0a      	ldr	r3, [pc, #40]	; (81a0 <CreateItemCache+0x5c>)
    8178:	4a06      	ldr	r2, [pc, #24]	; (8194 <CreateItemCache+0x50>)
    817a:	219a      	movs	r1, #154	; 0x9a
    817c:	31ff      	adds	r1, #255	; 0xff
    817e:	4806      	ldr	r0, [pc, #24]	; (8198 <CreateItemCache+0x54>)
    8180:	4c06      	ldr	r4, [pc, #24]	; (819c <CreateItemCache+0x58>)
    8182:	47a0      	blx	r4
    8184:	000080b5 	.word	0x000080b5
    8188:	20000260 	.word	0x20000260
    818c:	20000244 	.word	0x20000244
    8190:	00017cd8 	.word	0x00017cd8
    8194:	00017e10 	.word	0x00017e10
    8198:	00017d30 	.word	0x00017d30
    819c:	000160f5 	.word	0x000160f5
    81a0:	00017cf4 	.word	0x00017cf4

000081a4 <EraseSector>:

static bool EraseSector(void)
{
    81a4:	b510      	push	{r4, lr}
    // Erase the sector
    D_Nv_EraseSector(s_sector);
    81a6:	4c08      	ldr	r4, [pc, #32]	; (81c8 <EraseSector+0x24>)
    81a8:	7820      	ldrb	r0, [r4, #0]
    81aa:	4b08      	ldr	r3, [pc, #32]	; (81cc <EraseSector+0x28>)
    81ac:	4798      	blx	r3
    // check if the erase succeeded
    if ( !D_Nv_IsEmpty(s_sector, 0u, SECTOR_SIZE) )
    81ae:	7820      	ldrb	r0, [r4, #0]
    81b0:	2280      	movs	r2, #128	; 0x80
    81b2:	0192      	lsls	r2, r2, #6
    81b4:	2100      	movs	r1, #0
    81b6:	4b06      	ldr	r3, [pc, #24]	; (81d0 <EraseSector+0x2c>)
    81b8:	4798      	blx	r3
    81ba:	2800      	cmp	r0, #0
    81bc:	d003      	beq.n	81c6 <EraseSector+0x22>
    {
        return false;
    }
    s_sectorHead =  ITEMS_AREA_START_ADDRESS;
    81be:	2280      	movs	r2, #128	; 0x80
    81c0:	0052      	lsls	r2, r2, #1
    81c2:	4b04      	ldr	r3, [pc, #16]	; (81d4 <EraseSector+0x30>)
    81c4:	801a      	strh	r2, [r3, #0]

    return true;
}
    81c6:	bd10      	pop	{r4, pc}
    81c8:	20000268 	.word	0x20000268
    81cc:	00007e4d 	.word	0x00007e4d
    81d0:	00007ea1 	.word	0x00007ea1
    81d4:	2000026a 	.word	0x2000026a

000081d8 <WriteAndCheck>:
{
    81d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    81da:	b083      	sub	sp, #12
    81dc:	9001      	str	r0, [sp, #4]
    81de:	000d      	movs	r5, r1
    81e0:	0016      	movs	r6, r2
    D_Nv_Write(s_sector, offset, pData, length);
    81e2:	4f07      	ldr	r7, [pc, #28]	; (8200 <WriteAndCheck+0x28>)
    81e4:	7838      	ldrb	r0, [r7, #0]
    81e6:	0013      	movs	r3, r2
    81e8:	000a      	movs	r2, r1
    81ea:	9901      	ldr	r1, [sp, #4]
    81ec:	4c05      	ldr	r4, [pc, #20]	; (8204 <WriteAndCheck+0x2c>)
    81ee:	47a0      	blx	r4
    return D_Nv_IsEqual(s_sector, offset, pData, length);
    81f0:	7838      	ldrb	r0, [r7, #0]
    81f2:	0033      	movs	r3, r6
    81f4:	002a      	movs	r2, r5
    81f6:	9901      	ldr	r1, [sp, #4]
    81f8:	4c03      	ldr	r4, [pc, #12]	; (8208 <WriteAndCheck+0x30>)
    81fa:	47a0      	blx	r4
}
    81fc:	b003      	add	sp, #12
    81fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8200:	20000268 	.word	0x20000268
    8204:	00007ce5 	.word	0x00007ce5
    8208:	00007eb1 	.word	0x00007eb1

0000820c <WriteSectorHeader>:

static bool WriteSectorHeader(uint32_t sequenceNumber)
{
    820c:	b510      	push	{r4, lr}
    820e:	b086      	sub	sp, #24
    // write sector header
    SectorHeader_t sectorHeader;
    sectorHeader.signature[0] = (uint8_t) 'A';
    8210:	ac01      	add	r4, sp, #4
    8212:	2341      	movs	r3, #65	; 0x41
    8214:	70a3      	strb	r3, [r4, #2]
    sectorHeader.signature[1] = (uint8_t) 'T';
    8216:	3313      	adds	r3, #19
    8218:	70e3      	strb	r3, [r4, #3]
    sectorHeader.signature[2] = (uint8_t) 'S';
    821a:	3b01      	subs	r3, #1
    821c:	7123      	strb	r3, [r4, #4]
    sectorHeader.signature[3] = (uint8_t) 'N';
    821e:	3b05      	subs	r3, #5
    8220:	7163      	strb	r3, [r4, #5]
    sectorHeader.signature[4] = (uint8_t) 'v';
    8222:	3328      	adds	r3, #40	; 0x28
    8224:	71a3      	strb	r3, [r4, #6]
    sectorHeader.signature[5] = (uint8_t) '2';
    8226:	3b44      	subs	r3, #68	; 0x44
    8228:	71e3      	strb	r3, [r4, #7]
    sectorHeader.sequenceNumber = sequenceNumber;
    822a:	9003      	str	r0, [sp, #12]
    sectorHeader.sequenceParity = sequenceNumber ^ 0xFFFFFFFFuL;
    822c:	43c0      	mvns	r0, r0
    822e:	9004      	str	r0, [sp, #16]
    sectorHeader.nextPageAddressAfterCompact = s_nextPageAddressAfterCompact;
    8230:	4b08      	ldr	r3, [pc, #32]	; (8254 <WriteSectorHeader+0x48>)
    8232:	881b      	ldrh	r3, [r3, #0]
    8234:	8223      	strh	r3, [r4, #16]
    return ComputeCrc(((uint8_t*) pSectorHeader) + sizeof(pSectorHeader->headerCrc), (sizeof(SectorHeader_t)- sizeof(pSectorHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    8236:	4a08      	ldr	r2, [pc, #32]	; (8258 <WriteSectorHeader+0x4c>)
    8238:	2110      	movs	r1, #16
    823a:	466b      	mov	r3, sp
    823c:	1d98      	adds	r0, r3, #6
    823e:	4b07      	ldr	r3, [pc, #28]	; (825c <WriteSectorHeader+0x50>)
    8240:	4798      	blx	r3
    sectorHeader.headerCrc = ComputeSectorHeaderCrc(&sectorHeader);
    8242:	8020      	strh	r0, [r4, #0]
    if ( !WriteAndCheck(0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE) )
    8244:	2212      	movs	r2, #18
    8246:	0021      	movs	r1, r4
    8248:	2000      	movs	r0, #0
    824a:	4b05      	ldr	r3, [pc, #20]	; (8260 <WriteSectorHeader+0x54>)
    824c:	4798      	blx	r3
    {
        return false;
    }
    return true;
}
    824e:	b006      	add	sp, #24
    8250:	bd10      	pop	{r4, pc}
    8252:	46c0      	nop			; (mov r8, r8)
    8254:	20000262 	.word	0x20000262
    8258:	0000ffff 	.word	0x0000ffff
    825c:	00007f15 	.word	0x00007f15
    8260:	000081d9 	.word	0x000081d9

00008264 <SmartCompacting>:
 * without following any alignements as normal item updates.Items are filled into
  256 byte buffer(= row size), committed in shot which takes 4 page writs maximum
 */

static bool SmartCompacting(uint8_t* compactBlock, uint16_t curItemLength)
{
    8264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8266:	0004      	movs	r4, r0
    8268:	000d      	movs	r5, r1
    //manupulate the current compact length
    currentCompactLength += curItemLength;
    826a:	4a21      	ldr	r2, [pc, #132]	; (82f0 <SmartCompacting+0x8c>)
    826c:	8813      	ldrh	r3, [r2, #0]
    826e:	18cb      	adds	r3, r1, r3
    8270:	b29b      	uxth	r3, r3
    8272:	8013      	strh	r3, [r2, #0]

    // if the complete buffer cannot be filled with the current item
    if ( currentCompactLength < ROW_SIZE)
    8274:	2bff      	cmp	r3, #255	; 0xff
    8276:	d92e      	bls.n	82d6 <SmartCompacting+0x72>
    else  //(currentCompactLength >= ROW_SIZE) cases
    {
        uint16_t dataBlockOffset = 0;


        memcpy(compactBlock + compactBlockOffset, dataBlock, (ROW_SIZE - compactBlockOffset));
    8278:	4b1e      	ldr	r3, [pc, #120]	; (82f4 <SmartCompacting+0x90>)
    827a:	881a      	ldrh	r2, [r3, #0]
    827c:	1880      	adds	r0, r0, r2
    827e:	2580      	movs	r5, #128	; 0x80
    8280:	006d      	lsls	r5, r5, #1
    8282:	1aaa      	subs	r2, r5, r2
    8284:	491c      	ldr	r1, [pc, #112]	; (82f8 <SmartCompacting+0x94>)
    8286:	4b1d      	ldr	r3, [pc, #116]	; (82fc <SmartCompacting+0x98>)
    8288:	4798      	blx	r3
        if ( !WriteAndCheck(s_sectorHead, compactBlock, ROW_SIZE ))
    828a:	4b1d      	ldr	r3, [pc, #116]	; (8300 <SmartCompacting+0x9c>)
    828c:	8818      	ldrh	r0, [r3, #0]
    828e:	002a      	movs	r2, r5
    8290:	0021      	movs	r1, r4
    8292:	4b1c      	ldr	r3, [pc, #112]	; (8304 <SmartCompacting+0xa0>)
    8294:	4798      	blx	r3
    8296:	1e05      	subs	r5, r0, #0
    8298:	d027      	beq.n	82ea <SmartCompacting+0x86>
        {
            return false;
        }
        UpdateSectorHead(ROW_SIZE, ITEM_NO_ALIGNMENT);
    829a:	2100      	movs	r1, #0
    829c:	2080      	movs	r0, #128	; 0x80
    829e:	0040      	lsls	r0, r0, #1
    82a0:	4b19      	ldr	r3, [pc, #100]	; (8308 <SmartCompacting+0xa4>)
    82a2:	4798      	blx	r3
        dataBlockOffset += (ROW_SIZE - compactBlockOffset);
    82a4:	4b13      	ldr	r3, [pc, #76]	; (82f4 <SmartCompacting+0x90>)
    82a6:	8818      	ldrh	r0, [r3, #0]
        compactBlockOffset = 0;
    82a8:	2200      	movs	r2, #0
    82aa:	801a      	strh	r2, [r3, #0]
        currentCompactLength -= ROW_SIZE;
    82ac:	4b10      	ldr	r3, [pc, #64]	; (82f0 <SmartCompacting+0x8c>)
    82ae:	881e      	ldrh	r6, [r3, #0]
    82b0:	3e01      	subs	r6, #1
    82b2:	3eff      	subs	r6, #255	; 0xff
    82b4:	b2b6      	uxth	r6, r6
    82b6:	801e      	strh	r6, [r3, #0]
        if (currentCompactLength)
    82b8:	2e00      	cmp	r6, #0
    82ba:	d016      	beq.n	82ea <SmartCompacting+0x86>
        dataBlockOffset += (ROW_SIZE - compactBlockOffset);
    82bc:	2180      	movs	r1, #128	; 0x80
    82be:	0049      	lsls	r1, r1, #1
    82c0:	1a09      	subs	r1, r1, r0
        {
            memcpy(compactBlock, dataBlock + dataBlockOffset, currentCompactLength);
    82c2:	b289      	uxth	r1, r1
    82c4:	4b0c      	ldr	r3, [pc, #48]	; (82f8 <SmartCompacting+0x94>)
    82c6:	1859      	adds	r1, r3, r1
    82c8:	0032      	movs	r2, r6
    82ca:	0020      	movs	r0, r4
    82cc:	4b0b      	ldr	r3, [pc, #44]	; (82fc <SmartCompacting+0x98>)
    82ce:	4798      	blx	r3
            compactBlockOffset = currentCompactLength;
    82d0:	4b08      	ldr	r3, [pc, #32]	; (82f4 <SmartCompacting+0x90>)
    82d2:	801e      	strh	r6, [r3, #0]
    82d4:	e009      	b.n	82ea <SmartCompacting+0x86>
        memcpy(compactBlock + compactBlockOffset, dataBlock, curItemLength);
    82d6:	4e07      	ldr	r6, [pc, #28]	; (82f4 <SmartCompacting+0x90>)
    82d8:	8837      	ldrh	r7, [r6, #0]
    82da:	19c0      	adds	r0, r0, r7
    82dc:	000a      	movs	r2, r1
    82de:	4906      	ldr	r1, [pc, #24]	; (82f8 <SmartCompacting+0x94>)
    82e0:	4b06      	ldr	r3, [pc, #24]	; (82fc <SmartCompacting+0x98>)
    82e2:	4798      	blx	r3
        compactBlockOffset += curItemLength;
    82e4:	19ed      	adds	r5, r5, r7
    82e6:	8035      	strh	r5, [r6, #0]
        return true;
    82e8:	2501      	movs	r5, #1
        }
    }

    return true;

}
    82ea:	0028      	movs	r0, r5
    82ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    82ee:	46c0      	nop			; (mov r8, r8)
    82f0:	20000128 	.word	0x20000128
    82f4:	200000fc 	.word	0x200000fc
    82f8:	2000012c 	.word	0x2000012c
    82fc:	000161b7 	.word	0x000161b7
    8300:	2000026a 	.word	0x2000026a
    8304:	000081d9 	.word	0x000081d9
    8308:	00007ed9 	.word	0x00007ed9

0000830c <CompactSector>:
 * This is because the itemCache, sector head and sector selector will
 * be messed up.
 */

static bool CompactSector(void)
{
    830c:	b5f0      	push	{r4, r5, r6, r7, lr}
    830e:	46de      	mov	lr, fp
    8310:	4657      	mov	r7, sl
    8312:	464e      	mov	r6, r9
    8314:	4645      	mov	r5, r8
    8316:	b5e0      	push	{r5, r6, r7, lr}
    8318:	b0d5      	sub	sp, #340	; 0x154
    PRINTA(("CompactSector(s=%X)", s_sector));
#endif
    uint8_t compactBlock[ROW_SIZE];

    // stop timer for preemptive compact sector as this will not be needed any more
    SYS_TimerStop(&compactSectorTimer);
    831a:	487b      	ldr	r0, [pc, #492]	; (8508 <CompactSector+0x1fc>)
    831c:	4b7b      	ldr	r3, [pc, #492]	; (850c <CompactSector+0x200>)
    831e:	4798      	blx	r3

    // stop the compact item as a compact sector will compact all items
    s_compactItemId = 0u;
    8320:	2300      	movs	r3, #0
    8322:	4a7b      	ldr	r2, [pc, #492]	; (8510 <CompactSector+0x204>)
    8324:	8013      	strh	r3, [r2, #0]
    s_compactItemLength = 0u;
    8326:	4a7b      	ldr	r2, [pc, #492]	; (8514 <CompactSector+0x208>)
    8328:	8013      	strh	r3, [r2, #0]

    compactBlockOffset = 0;
    832a:	4a7b      	ldr	r2, [pc, #492]	; (8518 <CompactSector+0x20c>)
    832c:	8013      	strh	r3, [r2, #0]
    currentCompactLength = 0;
    832e:	4a7b      	ldr	r2, [pc, #492]	; (851c <CompactSector+0x210>)
    8330:	8013      	strh	r3, [r2, #0]

    uint8_t sourceSector = s_sector;
    8332:	4b7b      	ldr	r3, [pc, #492]	; (8520 <CompactSector+0x214>)
    8334:	781b      	ldrb	r3, [r3, #0]
    8336:	001f      	movs	r7, r3
    8338:	9303      	str	r3, [sp, #12]

    // get the sector header for the source sector
    SectorHeader_t sectorHeader;
    D_Nv_Read(sourceSector, 0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE);
    833a:	2312      	movs	r3, #18
    833c:	aa0f      	add	r2, sp, #60	; 0x3c
    833e:	2100      	movs	r1, #0
    8340:	0038      	movs	r0, r7
    8342:	4c78      	ldr	r4, [pc, #480]	; (8524 <CompactSector+0x218>)
    8344:	47a0      	blx	r4

    uint32_t nextSequenceNumber = sectorHeader.sequenceNumber - 1uL;
    8346:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8348:	9309      	str	r3, [sp, #36]	; 0x24

    // find and prepare a destination sector
    do
    {
        s_sector++;
    834a:	4c75      	ldr	r4, [pc, #468]	; (8520 <CompactSector+0x214>)
        if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
        {
            s_sector = FIRST_SECTOR;
    834c:	0025      	movs	r5, r4
        s_sector++;
    834e:	0026      	movs	r6, r4
    8350:	e008      	b.n	8364 <CompactSector+0x58>
    8352:	7033      	strb	r3, [r6, #0]
        }

        if ( s_sector == sourceSector )
    8354:	4b72      	ldr	r3, [pc, #456]	; (8520 <CompactSector+0x214>)
    8356:	781b      	ldrb	r3, [r3, #0]
    8358:	42bb      	cmp	r3, r7
    835a:	d00b      	beq.n	8374 <CompactSector+0x68>
        {
            // all sector failed to initialize
            assert(false);
        }
    }
    while ( !EraseSector());
    835c:	4b72      	ldr	r3, [pc, #456]	; (8528 <CompactSector+0x21c>)
    835e:	4798      	blx	r3
    8360:	2800      	cmp	r0, #0
    8362:	d10d      	bne.n	8380 <CompactSector+0x74>
        s_sector++;
    8364:	7823      	ldrb	r3, [r4, #0]
    8366:	3301      	adds	r3, #1
    8368:	b2db      	uxtb	r3, r3
        if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
    836a:	2b01      	cmp	r3, #1
    836c:	d9f1      	bls.n	8352 <CompactSector+0x46>
            s_sector = FIRST_SECTOR;
    836e:	2300      	movs	r3, #0
    8370:	702b      	strb	r3, [r5, #0]
    8372:	e7ef      	b.n	8354 <CompactSector+0x48>
            assert(false);
    8374:	4b6d      	ldr	r3, [pc, #436]	; (852c <CompactSector+0x220>)
    8376:	4a6e      	ldr	r2, [pc, #440]	; (8530 <CompactSector+0x224>)
    8378:	496e      	ldr	r1, [pc, #440]	; (8534 <CompactSector+0x228>)
    837a:	486f      	ldr	r0, [pc, #444]	; (8538 <CompactSector+0x22c>)
    837c:	4c6f      	ldr	r4, [pc, #444]	; (853c <CompactSector+0x230>)
    837e:	47a0      	blx	r4

    // Traverse the item cache, writing all items to the new sector
    for (uint8_t cacheIndex = 0; cacheIndex < s_itemCount; cacheIndex++) {
    8380:	4b6f      	ldr	r3, [pc, #444]	; (8540 <CompactSector+0x234>)
    8382:	781b      	ldrb	r3, [r3, #0]
    8384:	2b00      	cmp	r3, #0
    8386:	d06a      	beq.n	845e <CompactSector+0x152>
    8388:	2300      	movs	r3, #0
    838a:	9306      	str	r3, [sp, #24]

        blockHeader.dataCrc =  ComputeDataCrc(sourceSector, lastBlockPointer, &blockHeader);

        blockHeader.headerCrc = ComputeHeaderCrc(&blockHeader);

        memset(dataBlock, 0xFF, sizeof(dataBlock));
    838c:	3301      	adds	r3, #1
    838e:	33ff      	adds	r3, #255	; 0xff
    8390:	4699      	mov	r9, r3
            uint16_t bytesToGather;
            uint16_t inDataOffset = 0;

            do
            {
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    8392:	466a      	mov	r2, sp
    8394:	82d3      	strh	r3, [r2, #22]
            if (!GatherData(sourceSector, lastBlockPointer, 0u, blockHeader.itemLength, (dataBlock + BLOCK_HEADER_SIZE )))
    8396:	4b6b      	ldr	r3, [pc, #428]	; (8544 <CompactSector+0x238>)
    8398:	3310      	adds	r3, #16
    839a:	9308      	str	r3, [sp, #32]
        Item_t *cache = &s_itemCache[cacheIndex];
    839c:	9b06      	ldr	r3, [sp, #24]
    839e:	9307      	str	r3, [sp, #28]
        uint16_t lastBlockPointer = cache->lastBlock;
    83a0:	009f      	lsls	r7, r3, #2
    83a2:	4b69      	ldr	r3, [pc, #420]	; (8548 <CompactSector+0x23c>)
    83a4:	469c      	mov	ip, r3
    83a6:	4467      	add	r7, ip
    83a8:	887b      	ldrh	r3, [r7, #2]
    83aa:	001d      	movs	r5, r3
    83ac:	9304      	str	r3, [sp, #16]
        D_Nv_Read(sourceSector, lastBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    83ae:	2310      	movs	r3, #16
    83b0:	aa0b      	add	r2, sp, #44	; 0x2c
    83b2:	0029      	movs	r1, r5
    83b4:	9803      	ldr	r0, [sp, #12]
    83b6:	4680      	mov	r8, r0
    83b8:	4c5a      	ldr	r4, [pc, #360]	; (8524 <CompactSector+0x218>)
    83ba:	47a0      	blx	r4
        blockHeader.blockOffset = 0x0000u;
    83bc:	ae0b      	add	r6, sp, #44	; 0x2c
    83be:	2300      	movs	r3, #0
    83c0:	80b3      	strh	r3, [r6, #4]
        blockHeader.blockLength = blockHeader.itemLength;
    83c2:	8934      	ldrh	r4, [r6, #8]
    83c4:	80f4      	strh	r4, [r6, #6]
        blockHeader.previousBlock = 0x0000u;
    83c6:	8173      	strh	r3, [r6, #10]
        blockHeader.writeCount = 0u;
    83c8:	81b3      	strh	r3, [r6, #12]
        uint16_t currLength = BLOCK_HEADER_SIZE + blockHeader.itemLength;
    83ca:	3410      	adds	r4, #16
    83cc:	b2a4      	uxth	r4, r4
        blockHeader.dataCrc =  ComputeDataCrc(sourceSector, lastBlockPointer, &blockHeader);
    83ce:	0032      	movs	r2, r6
    83d0:	0029      	movs	r1, r5
    83d2:	4640      	mov	r0, r8
    83d4:	4b5d      	ldr	r3, [pc, #372]	; (854c <CompactSector+0x240>)
    83d6:	4798      	blx	r3
    83d8:	8030      	strh	r0, [r6, #0]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    83da:	4a5d      	ldr	r2, [pc, #372]	; (8550 <CompactSector+0x244>)
    83dc:	210e      	movs	r1, #14
    83de:	a80b      	add	r0, sp, #44	; 0x2c
    83e0:	4b5c      	ldr	r3, [pc, #368]	; (8554 <CompactSector+0x248>)
    83e2:	4798      	blx	r3
        blockHeader.headerCrc = ComputeHeaderCrc(&blockHeader);
    83e4:	81f0      	strh	r0, [r6, #14]
        memset(dataBlock, 0xFF, sizeof(dataBlock));
    83e6:	4d57      	ldr	r5, [pc, #348]	; (8544 <CompactSector+0x238>)
    83e8:	464a      	mov	r2, r9
    83ea:	21ff      	movs	r1, #255	; 0xff
    83ec:	0028      	movs	r0, r5
    83ee:	4b5a      	ldr	r3, [pc, #360]	; (8558 <CompactSector+0x24c>)
    83f0:	4798      	blx	r3
        memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    83f2:	002b      	movs	r3, r5
    83f4:	ce07      	ldmia	r6!, {r0, r1, r2}
    83f6:	c307      	stmia	r3!, {r0, r1, r2}
    83f8:	6832      	ldr	r2, [r6, #0]
    83fa:	601a      	str	r2, [r3, #0]
        cache->lastBlock = s_sectorHead  + compactBlockOffset;
    83fc:	4b57      	ldr	r3, [pc, #348]	; (855c <CompactSector+0x250>)
    83fe:	881b      	ldrh	r3, [r3, #0]
    8400:	4a45      	ldr	r2, [pc, #276]	; (8518 <CompactSector+0x20c>)
    8402:	8812      	ldrh	r2, [r2, #0]
    8404:	189b      	adds	r3, r3, r2
    8406:	807b      	strh	r3, [r7, #2]
        if (currLength <= ROW_SIZE)
    8408:	454c      	cmp	r4, r9
    840a:	d904      	bls.n	8416 <CompactSector+0x10a>
    840c:	2600      	movs	r6, #0
    840e:	2310      	movs	r3, #16
              
              if (!GatherData(sourceSector, lastBlockPointer, inDataOffset, (bytesToGather - dataBlockOffset) , (dataBlock + dataBlockOffset)))
    8410:	4a4c      	ldr	r2, [pc, #304]	; (8544 <CompactSector+0x238>)
    8412:	4690      	mov	r8, r2
    8414:	e068      	b.n	84e8 <CompactSector+0x1dc>
            if (!GatherData(sourceSector, lastBlockPointer, 0u, blockHeader.itemLength, (dataBlock + BLOCK_HEADER_SIZE )))
    8416:	ab0b      	add	r3, sp, #44	; 0x2c
    8418:	891b      	ldrh	r3, [r3, #8]
    841a:	9a08      	ldr	r2, [sp, #32]
    841c:	9200      	str	r2, [sp, #0]
    841e:	2200      	movs	r2, #0
    8420:	9904      	ldr	r1, [sp, #16]
    8422:	9803      	ldr	r0, [sp, #12]
    8424:	4e4e      	ldr	r6, [pc, #312]	; (8560 <CompactSector+0x254>)
    8426:	47b0      	blx	r6
    8428:	2800      	cmp	r0, #0
    842a:	d063      	beq.n	84f4 <CompactSector+0x1e8>
            cache->lastBlock = s_sectorHead  + compactBlockOffset;
    842c:	9b07      	ldr	r3, [sp, #28]
    842e:	009d      	lsls	r5, r3, #2
    8430:	4b45      	ldr	r3, [pc, #276]	; (8548 <CompactSector+0x23c>)
    8432:	195d      	adds	r5, r3, r5
    8434:	4b49      	ldr	r3, [pc, #292]	; (855c <CompactSector+0x250>)
    8436:	881b      	ldrh	r3, [r3, #0]
    8438:	4a37      	ldr	r2, [pc, #220]	; (8518 <CompactSector+0x20c>)
    843a:	8812      	ldrh	r2, [r2, #0]
    843c:	189b      	adds	r3, r3, r2
    843e:	806b      	strh	r3, [r5, #2]
            if (!SmartCompacting(compactBlock, currLength))
    8440:	0021      	movs	r1, r4
    8442:	a814      	add	r0, sp, #80	; 0x50
    8444:	4b47      	ldr	r3, [pc, #284]	; (8564 <CompactSector+0x258>)
    8446:	4798      	blx	r3
    8448:	2800      	cmp	r0, #0
    844a:	d053      	beq.n	84f4 <CompactSector+0x1e8>
    for (uint8_t cacheIndex = 0; cacheIndex < s_itemCount; cacheIndex++) {
    844c:	9b06      	ldr	r3, [sp, #24]
    844e:	3301      	adds	r3, #1
    8450:	b2db      	uxtb	r3, r3
    8452:	001a      	movs	r2, r3
    8454:	9306      	str	r3, [sp, #24]
    8456:	4b3a      	ldr	r3, [pc, #232]	; (8540 <CompactSector+0x234>)
    8458:	781b      	ldrb	r3, [r3, #0]
    845a:	4293      	cmp	r3, r2
    845c:	d89e      	bhi.n	839c <CompactSector+0x90>

            } while(currLength > 0);
        }
    }
    // if some uncommitted data avaialble, committ it
    if ( currentCompactLength)
    845e:	4b2f      	ldr	r3, [pc, #188]	; (851c <CompactSector+0x210>)
    8460:	881a      	ldrh	r2, [r3, #0]
    8462:	2a00      	cmp	r2, #0
    8464:	d006      	beq.n	8474 <CompactSector+0x168>
    {
        if ( !WriteAndCheck(s_sectorHead, compactBlock, currentCompactLength) )
    8466:	4b3d      	ldr	r3, [pc, #244]	; (855c <CompactSector+0x250>)
    8468:	8818      	ldrh	r0, [r3, #0]
    846a:	a914      	add	r1, sp, #80	; 0x50
    846c:	4b3e      	ldr	r3, [pc, #248]	; (8568 <CompactSector+0x25c>)
    846e:	4798      	blx	r3
    8470:	1e04      	subs	r4, r0, #0
    8472:	d040      	beq.n	84f6 <CompactSector+0x1ea>
        {
            return false;
        }
    }
    // Just update sector header as per the the length of the data committed, no alignments
    UpdateSectorHead(currentCompactLength, ITEM_NO_ALIGNMENT);
    8474:	4b29      	ldr	r3, [pc, #164]	; (851c <CompactSector+0x210>)
    8476:	8818      	ldrh	r0, [r3, #0]
    8478:	2100      	movs	r1, #0
    847a:	4b3c      	ldr	r3, [pc, #240]	; (856c <CompactSector+0x260>)
    847c:	4798      	blx	r3

    s_nextPageAddressAfterCompact = s_sectorHead;
    847e:	4b37      	ldr	r3, [pc, #220]	; (855c <CompactSector+0x250>)
    8480:	881a      	ldrh	r2, [r3, #0]
    8482:	4b3b      	ldr	r3, [pc, #236]	; (8570 <CompactSector+0x264>)
    8484:	801a      	strh	r2, [r3, #0]
    uint32_t nextSequenceNumber = sectorHeader.sequenceNumber - 1uL;
    8486:	9809      	ldr	r0, [sp, #36]	; 0x24
    8488:	3801      	subs	r0, #1
    //SYS_PostEvent(BC_EVENT_UPGRADE_STRUCT_CHANGED_ITEMS, 0U);

    // update nextPageAddressAfterCompact in the sector header
    // All items moved, so now we just need to Write the Sector Header with 
    // nextPageAddressAfterCompact at the end of compact sector operation
    if ( !WriteSectorHeader(nextSequenceNumber))
    848a:	4b3a      	ldr	r3, [pc, #232]	; (8574 <CompactSector+0x268>)
    848c:	4798      	blx	r3
    848e:	1e04      	subs	r4, r0, #0
    8490:	d031      	beq.n	84f6 <CompactSector+0x1ea>
    {
        return false;
    }
    // Done with compact sector opration, Set the Sector Head to next page address for normal item update 
    UpdateSectorHead(0, ITEM_64BYTE_ALIGNMENT);
    8492:	2102      	movs	r1, #2
    8494:	2000      	movs	r0, #0
    8496:	4b35      	ldr	r3, [pc, #212]	; (856c <CompactSector+0x260>)
    8498:	4798      	blx	r3

    // schedule an erase of the source sector,Restart the timer if it is already running.
    s_sectorToErase = sourceSector;
    849a:	4b37      	ldr	r3, [pc, #220]	; (8578 <CompactSector+0x26c>)
    849c:	466a      	mov	r2, sp
    849e:	7b12      	ldrb	r2, [r2, #12]
    84a0:	701a      	strb	r2, [r3, #0]
    SYS_TimerStop(&eraseSectorTimer);
    84a2:	4d36      	ldr	r5, [pc, #216]	; (857c <CompactSector+0x270>)
    84a4:	0028      	movs	r0, r5
    84a6:	4b19      	ldr	r3, [pc, #100]	; (850c <CompactSector+0x200>)
    84a8:	4798      	blx	r3
    SYS_TimerStart(&eraseSectorTimer);
    84aa:	0028      	movs	r0, r5
    84ac:	4b34      	ldr	r3, [pc, #208]	; (8580 <CompactSector+0x274>)
    84ae:	4798      	blx	r3

    return true;
    84b0:	e021      	b.n	84f6 <CompactSector+0x1ea>
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    84b2:	b2ad      	uxth	r5, r5
              if (!GatherData(sourceSector, lastBlockPointer, inDataOffset, (bytesToGather - dataBlockOffset) , (dataBlock + dataBlockOffset)))
    84b4:	1aef      	subs	r7, r5, r3
    84b6:	b2ba      	uxth	r2, r7
    84b8:	4693      	mov	fp, r2
    84ba:	4443      	add	r3, r8
    84bc:	9300      	str	r3, [sp, #0]
    84be:	0013      	movs	r3, r2
    84c0:	0032      	movs	r2, r6
    84c2:	9904      	ldr	r1, [sp, #16]
    84c4:	9803      	ldr	r0, [sp, #12]
    84c6:	4f26      	ldr	r7, [pc, #152]	; (8560 <CompactSector+0x254>)
    84c8:	47b8      	blx	r7
    84ca:	2800      	cmp	r0, #0
    84cc:	d012      	beq.n	84f4 <CompactSector+0x1e8>
              if (!SmartCompacting(compactBlock, bytesToGather))
    84ce:	0029      	movs	r1, r5
    84d0:	a814      	add	r0, sp, #80	; 0x50
    84d2:	4b24      	ldr	r3, [pc, #144]	; (8564 <CompactSector+0x258>)
    84d4:	4798      	blx	r3
    84d6:	2800      	cmp	r0, #0
    84d8:	d00c      	beq.n	84f4 <CompactSector+0x1e8>
              currLength -= bytesToGather;
    84da:	1b64      	subs	r4, r4, r5
    84dc:	b2a4      	uxth	r4, r4
              inDataOffset += (bytesToGather - dataBlockOffset);
    84de:	445e      	add	r6, fp
    84e0:	b2b6      	uxth	r6, r6
              dataBlockOffset = 0;
    84e2:	2300      	movs	r3, #0
            } while(currLength > 0);
    84e4:	2c00      	cmp	r4, #0
    84e6:	d0b1      	beq.n	844c <CompactSector+0x140>
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    84e8:	1c25      	adds	r5, r4, #0
    84ea:	454c      	cmp	r4, r9
    84ec:	d9e1      	bls.n	84b2 <CompactSector+0x1a6>
    84ee:	466a      	mov	r2, sp
    84f0:	8ad5      	ldrh	r5, [r2, #22]
    84f2:	e7de      	b.n	84b2 <CompactSector+0x1a6>
                return false;
    84f4:	2400      	movs	r4, #0
}
    84f6:	0020      	movs	r0, r4
    84f8:	b055      	add	sp, #340	; 0x154
    84fa:	bc3c      	pop	{r2, r3, r4, r5}
    84fc:	4690      	mov	r8, r2
    84fe:	4699      	mov	r9, r3
    8500:	46a2      	mov	sl, r4
    8502:	46ab      	mov	fp, r5
    8504:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8506:	46c0      	nop			; (mov r8, r8)
    8508:	20000114 	.word	0x20000114
    850c:	0000ba01 	.word	0x0000ba01
    8510:	20000240 	.word	0x20000240
    8514:	20000242 	.word	0x20000242
    8518:	200000fc 	.word	0x200000fc
    851c:	20000128 	.word	0x20000128
    8520:	20000268 	.word	0x20000268
    8524:	00007c6d 	.word	0x00007c6d
    8528:	000081a5 	.word	0x000081a5
    852c:	00017cd0 	.word	0x00017cd0
    8530:	00017e20 	.word	0x00017e20
    8534:	000003d5 	.word	0x000003d5
    8538:	00017d30 	.word	0x00017d30
    853c:	000160f5 	.word	0x000160f5
    8540:	20000260 	.word	0x20000260
    8544:	2000012c 	.word	0x2000012c
    8548:	20000244 	.word	0x20000244
    854c:	0000800d 	.word	0x0000800d
    8550:	0000ffff 	.word	0x0000ffff
    8554:	00007f15 	.word	0x00007f15
    8558:	000161c9 	.word	0x000161c9
    855c:	2000026a 	.word	0x2000026a
    8560:	00007f55 	.word	0x00007f55
    8564:	00008265 	.word	0x00008265
    8568:	000081d9 	.word	0x000081d9
    856c:	00007ed9 	.word	0x00007ed9
    8570:	20000262 	.word	0x20000262
    8574:	0000820d 	.word	0x0000820d
    8578:	2000000e 	.word	0x2000000e
    857c:	2000022c 	.word	0x2000022c
    8580:	0000ba6d 	.word	0x0000ba6d

00008584 <compactSectorTimerFired>:
{
    8584:	b510      	push	{r4, lr}
    if (!PowerSupplyTooLow()) {
    8586:	4b07      	ldr	r3, [pc, #28]	; (85a4 <compactSectorTimerFired+0x20>)
    8588:	4798      	blx	r3
    858a:	2800      	cmp	r0, #0
    858c:	d000      	beq.n	8590 <compactSectorTimerFired+0xc>
}
    858e:	bd10      	pop	{r4, pc}
      status = CompactSector();
    8590:	4b05      	ldr	r3, [pc, #20]	; (85a8 <compactSectorTimerFired+0x24>)
    8592:	4798      	blx	r3
      assert(false);
    8594:	4b05      	ldr	r3, [pc, #20]	; (85ac <compactSectorTimerFired+0x28>)
    8596:	4a06      	ldr	r2, [pc, #24]	; (85b0 <compactSectorTimerFired+0x2c>)
    8598:	212c      	movs	r1, #44	; 0x2c
    859a:	31ff      	adds	r1, #255	; 0xff
    859c:	4805      	ldr	r0, [pc, #20]	; (85b4 <compactSectorTimerFired+0x30>)
    859e:	4c06      	ldr	r4, [pc, #24]	; (85b8 <compactSectorTimerFired+0x34>)
    85a0:	47a0      	blx	r4
    85a2:	46c0      	nop			; (mov r8, r8)
    85a4:	00007ebd 	.word	0x00007ebd
    85a8:	0000830d 	.word	0x0000830d
    85ac:	00017cd0 	.word	0x00017cd0
    85b0:	00017de8 	.word	0x00017de8
    85b4:	00017d30 	.word	0x00017d30
    85b8:	000160f5 	.word	0x000160f5

000085bc <CompactSectorIfNeeded>:

static void CompactSectorIfNeeded(uint16_t immediateThreshold)
{
    85bc:	b510      	push	{r4, lr}
    uint16_t freeSpace = SECTOR_SIZE - s_sectorHead;
    85be:	4b12      	ldr	r3, [pc, #72]	; (8608 <CompactSectorIfNeeded+0x4c>)
    85c0:	881a      	ldrh	r2, [r3, #0]
    85c2:	2380      	movs	r3, #128	; 0x80
    85c4:	019b      	lsls	r3, r3, #6
    85c6:	1a9b      	subs	r3, r3, r2
    85c8:	b29b      	uxth	r3, r3

    if ( freeSpace < immediateThreshold )
    85ca:	4283      	cmp	r3, r0
    85cc:	d303      	bcc.n	85d6 <CompactSectorIfNeeded+0x1a>
        {
            assert(false);
        }
        return;
    }
    if ( freeSpace < PREEMPTIVE_COMPACT_SECTOR_THRESHOLD )
    85ce:	4a0f      	ldr	r2, [pc, #60]	; (860c <CompactSectorIfNeeded+0x50>)
    85d0:	4293      	cmp	r3, r2
    85d2:	d90a      	bls.n	85ea <CompactSectorIfNeeded+0x2e>
        compactSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
        //TODO: check timer to be started or not
        //SYS_StartTimer(&compactSectorTimer);
        }
    }
}
    85d4:	bd10      	pop	{r4, pc}
        if ( !CompactSector() )
    85d6:	4b0e      	ldr	r3, [pc, #56]	; (8610 <CompactSectorIfNeeded+0x54>)
    85d8:	4798      	blx	r3
    85da:	2800      	cmp	r0, #0
    85dc:	d1fa      	bne.n	85d4 <CompactSectorIfNeeded+0x18>
            assert(false);
    85de:	4b0d      	ldr	r3, [pc, #52]	; (8614 <CompactSectorIfNeeded+0x58>)
    85e0:	4a0d      	ldr	r2, [pc, #52]	; (8618 <CompactSectorIfNeeded+0x5c>)
    85e2:	490e      	ldr	r1, [pc, #56]	; (861c <CompactSectorIfNeeded+0x60>)
    85e4:	480e      	ldr	r0, [pc, #56]	; (8620 <CompactSectorIfNeeded+0x64>)
    85e6:	4c0f      	ldr	r4, [pc, #60]	; (8624 <CompactSectorIfNeeded+0x68>)
    85e8:	47a0      	blx	r4
        if (!SYS_TimerStarted(&compactSectorTimer))
    85ea:	480f      	ldr	r0, [pc, #60]	; (8628 <CompactSectorIfNeeded+0x6c>)
    85ec:	4b0f      	ldr	r3, [pc, #60]	; (862c <CompactSectorIfNeeded+0x70>)
    85ee:	4798      	blx	r3
    85f0:	2800      	cmp	r0, #0
    85f2:	d1ef      	bne.n	85d4 <CompactSectorIfNeeded+0x18>
        compactSectorTimer.handler = compactSectorTimerFired;
    85f4:	4b0c      	ldr	r3, [pc, #48]	; (8628 <CompactSectorIfNeeded+0x6c>)
    85f6:	4a0e      	ldr	r2, [pc, #56]	; (8630 <CompactSectorIfNeeded+0x74>)
    85f8:	611a      	str	r2, [r3, #16]
        compactSectorTimer.timeout = COMPACT_SECTOR_DELAY_MS;
    85fa:	4a0e      	ldr	r2, [pc, #56]	; (8634 <CompactSectorIfNeeded+0x78>)
    85fc:	605a      	str	r2, [r3, #4]
        compactSectorTimer.interval = COMPACT_SECTOR_DELAY_MS;
    85fe:	609a      	str	r2, [r3, #8]
        compactSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
    8600:	2200      	movs	r2, #0
    8602:	731a      	strb	r2, [r3, #12]
    8604:	e7e6      	b.n	85d4 <CompactSectorIfNeeded+0x18>
    8606:	46c0      	nop			; (mov r8, r8)
    8608:	2000026a 	.word	0x2000026a
    860c:	0000080f 	.word	0x0000080f
    8610:	0000830d 	.word	0x0000830d
    8614:	00017cd0 	.word	0x00017cd0
    8618:	00017e30 	.word	0x00017e30
    861c:	0000044e 	.word	0x0000044e
    8620:	00017d30 	.word	0x00017d30
    8624:	000160f5 	.word	0x000160f5
    8628:	20000114 	.word	0x20000114
    862c:	0000ba41 	.word	0x0000ba41
    8630:	00008585 	.word	0x00008585
    8634:	00002710 	.word	0x00002710

00008638 <CompactItem>:

static S_Nv_ReturnValue_t CompactItem(void)
{
    8638:	b5f0      	push	{r4, r5, r6, r7, lr}
    863a:	46de      	mov	lr, fp
    863c:	4657      	mov	r7, sl
    863e:	464e      	mov	r6, r9
    8640:	4645      	mov	r5, r8
    8642:	b5e0      	push	{r5, r6, r7, lr}
    8644:	b08b      	sub	sp, #44	; 0x2c
#if defined(ENABLE_NV_COMPACT_LOGGING)
    PRINTA(("CompactItem(id=%X)", s_compactItemId));
#endif

    if ( PowerSupplyTooLow() )
    8646:	4b77      	ldr	r3, [pc, #476]	; (8824 <CompactItem+0x1ec>)
    8648:	4798      	blx	r3
    {
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    864a:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    864c:	2800      	cmp	r0, #0
    864e:	d007      	beq.n	8660 <CompactItem+0x28>
    s_compactItemLength = 0u;

    cache->lastBlock = lastBlock;

    return S_Nv_ReturnValue_Ok;
}
    8650:	0018      	movs	r0, r3
    8652:	b00b      	add	sp, #44	; 0x2c
    8654:	bc3c      	pop	{r2, r3, r4, r5}
    8656:	4690      	mov	r8, r2
    8658:	4699      	mov	r9, r3
    865a:	46a2      	mov	sl, r4
    865c:	46ab      	mov	fp, r5
    865e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ( (s_compactItemLength == 0u) && ( s_compactItemId == 0u ) )
    8660:	4b71      	ldr	r3, [pc, #452]	; (8828 <CompactItem+0x1f0>)
    8662:	8818      	ldrh	r0, [r3, #0]
    8664:	2800      	cmp	r0, #0
    8666:	d146      	bne.n	86f6 <CompactItem+0xbe>
    8668:	4b70      	ldr	r3, [pc, #448]	; (882c <CompactItem+0x1f4>)
    866a:	881b      	ldrh	r3, [r3, #0]
    866c:	2b00      	cmp	r3, #0
    866e:	d100      	bne.n	8672 <CompactItem+0x3a>
    8670:	e0d0      	b.n	8814 <CompactItem+0x1dc>
    Item_t *cache = FindItemCache(s_compactItemId);
    8672:	4b6e      	ldr	r3, [pc, #440]	; (882c <CompactItem+0x1f4>)
    8674:	8818      	ldrh	r0, [r3, #0]
    8676:	4b6e      	ldr	r3, [pc, #440]	; (8830 <CompactItem+0x1f8>)
    8678:	4798      	blx	r3
    867a:	4683      	mov	fp, r0
    if ( cache == NULL )
    867c:	2800      	cmp	r0, #0
    867e:	d100      	bne.n	8682 <CompactItem+0x4a>
    8680:	e0ca      	b.n	8818 <CompactItem+0x1e0>
    uint16_t blockPointer = cache->lastBlock;
    8682:	7882      	ldrb	r2, [r0, #2]
    8684:	78c3      	ldrb	r3, [r0, #3]
    8686:	021b      	lsls	r3, r3, #8
    8688:	4313      	orrs	r3, r2
    868a:	0019      	movs	r1, r3
    868c:	9303      	str	r3, [sp, #12]
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    868e:	4b69      	ldr	r3, [pc, #420]	; (8834 <CompactItem+0x1fc>)
    8690:	7818      	ldrb	r0, [r3, #0]
    8692:	2310      	movs	r3, #16
    8694:	aa06      	add	r2, sp, #24
    8696:	4c68      	ldr	r4, [pc, #416]	; (8838 <CompactItem+0x200>)
    8698:	47a0      	blx	r4
    if (s_compactItemLength == 0)
    869a:	4b63      	ldr	r3, [pc, #396]	; (8828 <CompactItem+0x1f0>)
    869c:	881a      	ldrh	r2, [r3, #0]
    869e:	2a00      	cmp	r2, #0
    86a0:	d02e      	beq.n	8700 <CompactItem+0xc8>
    uint16_t lastBlock = s_sectorHead;
    86a2:	4b66      	ldr	r3, [pc, #408]	; (883c <CompactItem+0x204>)
    86a4:	881b      	ldrh	r3, [r3, #0]
    86a6:	9305      	str	r3, [sp, #20]
    uint16_t bytesToGather = blockHeader.itemLength;
    86a8:	ab06      	add	r3, sp, #24
    86aa:	891b      	ldrh	r3, [r3, #8]
        blockHeader.itemLength = s_compactItemLength;
    86ac:	a906      	add	r1, sp, #24
    86ae:	810a      	strh	r2, [r1, #8]
    86b0:	1c19      	adds	r1, r3, #0
    86b2:	4293      	cmp	r3, r2
    86b4:	d900      	bls.n	86b8 <CompactItem+0x80>
    86b6:	1c11      	adds	r1, r2, #0
    86b8:	b28b      	uxth	r3, r1
    blockHeader.blockOffset = 0u;
    86ba:	aa06      	add	r2, sp, #24
    86bc:	2100      	movs	r1, #0
    86be:	8091      	strh	r1, [r2, #4]
    blockHeader.blockLength = blockHeader.itemLength;
    86c0:	8910      	ldrh	r0, [r2, #8]
    86c2:	80d0      	strh	r0, [r2, #6]
    blockHeader.previousBlock = 0x0000u;
    86c4:	8151      	strh	r1, [r2, #10]
    blockHeader.writeCount = 0u;
    86c6:	8191      	strh	r1, [r2, #12]
    uint16_t currLength = BLOCK_HEADER_SIZE + bytesToGather;
    86c8:	001c      	movs	r4, r3
    86ca:	3410      	adds	r4, #16
    86cc:	b2a4      	uxth	r4, r4
    memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    86ce:	495c      	ldr	r1, [pc, #368]	; (8840 <CompactItem+0x208>)
    86d0:	ca61      	ldmia	r2!, {r0, r5, r6}
    86d2:	c161      	stmia	r1!, {r0, r5, r6}
    86d4:	6812      	ldr	r2, [r2, #0]
    86d6:	600a      	str	r2, [r1, #0]
    if (currLength <= ROW_SIZE)
    86d8:	2280      	movs	r2, #128	; 0x80
    86da:	0052      	lsls	r2, r2, #1
    86dc:	4294      	cmp	r4, r2
    86de:	d939      	bls.n	8754 <CompactItem+0x11c>
    86e0:	2600      	movs	r6, #0
    86e2:	2310      	movs	r3, #16
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    86e4:	2280      	movs	r2, #128	; 0x80
    86e6:	0052      	lsls	r2, r2, #1
    86e8:	4691      	mov	r9, r2
    86ea:	4669      	mov	r1, sp
    86ec:	824a      	strh	r2, [r1, #18]
            if (!GatherData(s_sector, blockPointer, inDataOffset, bytesToGatherAndCommit - dataBlockOffset , (dataBlock + dataBlockOffset)))
    86ee:	4a51      	ldr	r2, [pc, #324]	; (8834 <CompactItem+0x1fc>)
    86f0:	4692      	mov	sl, r2
    86f2:	001a      	movs	r2, r3
    86f4:	e088      	b.n	8808 <CompactItem+0x1d0>
        CompactSectorIfNeeded(s_compactItemLength + BLOCK_HEADER_SIZE);
    86f6:	3010      	adds	r0, #16
    86f8:	b280      	uxth	r0, r0
    86fa:	4b52      	ldr	r3, [pc, #328]	; (8844 <CompactItem+0x20c>)
    86fc:	4798      	blx	r3
    86fe:	e7b8      	b.n	8672 <CompactItem+0x3a>
        CompactSectorIfNeeded(blockHeader.itemLength + BLOCK_HEADER_SIZE);
    8700:	ab06      	add	r3, sp, #24
    8702:	8918      	ldrh	r0, [r3, #8]
    8704:	3010      	adds	r0, #16
    8706:	b280      	uxth	r0, r0
    8708:	4b4e      	ldr	r3, [pc, #312]	; (8844 <CompactItem+0x20c>)
    870a:	4798      	blx	r3
        cache = FindItemCache(s_compactItemId);
    870c:	4b47      	ldr	r3, [pc, #284]	; (882c <CompactItem+0x1f4>)
    870e:	8818      	ldrh	r0, [r3, #0]
    8710:	4b47      	ldr	r3, [pc, #284]	; (8830 <CompactItem+0x1f8>)
    8712:	4798      	blx	r3
    8714:	4683      	mov	fp, r0
        assert(cache != NULL);
    8716:	2800      	cmp	r0, #0
    8718:	d015      	beq.n	8746 <CompactItem+0x10e>
        blockPointer = cache->lastBlock;
    871a:	7882      	ldrb	r2, [r0, #2]
    871c:	78c3      	ldrb	r3, [r0, #3]
    871e:	021b      	lsls	r3, r3, #8
    8720:	4313      	orrs	r3, r2
    8722:	0019      	movs	r1, r3
    8724:	9303      	str	r3, [sp, #12]
        D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8726:	ac06      	add	r4, sp, #24
    8728:	4b42      	ldr	r3, [pc, #264]	; (8834 <CompactItem+0x1fc>)
    872a:	7818      	ldrb	r0, [r3, #0]
    872c:	2310      	movs	r3, #16
    872e:	0022      	movs	r2, r4
    8730:	4d41      	ldr	r5, [pc, #260]	; (8838 <CompactItem+0x200>)
    8732:	47a8      	blx	r5
    uint16_t lastBlock = s_sectorHead;
    8734:	4b41      	ldr	r3, [pc, #260]	; (883c <CompactItem+0x204>)
    8736:	881b      	ldrh	r3, [r3, #0]
    8738:	9305      	str	r3, [sp, #20]
    uint16_t bytesToGather = blockHeader.itemLength;
    873a:	8923      	ldrh	r3, [r4, #8]
    if ( s_compactItemLength != 0u )
    873c:	4a3a      	ldr	r2, [pc, #232]	; (8828 <CompactItem+0x1f0>)
    873e:	8812      	ldrh	r2, [r2, #0]
    8740:	2a00      	cmp	r2, #0
    8742:	d0ba      	beq.n	86ba <CompactItem+0x82>
    8744:	e7b2      	b.n	86ac <CompactItem+0x74>
        assert(cache != NULL);
    8746:	4b40      	ldr	r3, [pc, #256]	; (8848 <CompactItem+0x210>)
    8748:	4a40      	ldr	r2, [pc, #256]	; (884c <CompactItem+0x214>)
    874a:	2191      	movs	r1, #145	; 0x91
    874c:	00c9      	lsls	r1, r1, #3
    874e:	4840      	ldr	r0, [pc, #256]	; (8850 <CompactItem+0x218>)
    8750:	4c40      	ldr	r4, [pc, #256]	; (8854 <CompactItem+0x21c>)
    8752:	47a0      	blx	r4
        if (!GatherData(s_sector, blockPointer, 0u, bytesToGather, (dataBlock + BLOCK_HEADER_SIZE )))
    8754:	4a37      	ldr	r2, [pc, #220]	; (8834 <CompactItem+0x1fc>)
    8756:	7810      	ldrb	r0, [r2, #0]
    8758:	4a39      	ldr	r2, [pc, #228]	; (8840 <CompactItem+0x208>)
    875a:	3210      	adds	r2, #16
    875c:	9200      	str	r2, [sp, #0]
    875e:	2200      	movs	r2, #0
    8760:	9903      	ldr	r1, [sp, #12]
    8762:	4c3d      	ldr	r4, [pc, #244]	; (8858 <CompactItem+0x220>)
    8764:	47a0      	blx	r4
            return S_Nv_ReturnValue_Failure;
    8766:	2301      	movs	r3, #1
        if (!GatherData(s_sector, blockPointer, 0u, bytesToGather, (dataBlock + BLOCK_HEADER_SIZE )))
    8768:	2800      	cmp	r0, #0
    876a:	d100      	bne.n	876e <CompactItem+0x136>
    876c:	e770      	b.n	8650 <CompactItem+0x18>
        memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    876e:	4934      	ldr	r1, [pc, #208]	; (8840 <CompactItem+0x208>)
    8770:	ab06      	add	r3, sp, #24
    8772:	000a      	movs	r2, r1
    8774:	0018      	movs	r0, r3
    8776:	c870      	ldmia	r0!, {r4, r5, r6}
    8778:	c270      	stmia	r2!, {r4, r5, r6}
    877a:	6800      	ldr	r0, [r0, #0]
    877c:	6010      	str	r0, [r2, #0]
        if ( !WriteAndCheck(s_sectorHead, dataBlock, blockHeader.blockLength + BLOCK_HEADER_SIZE) )
    877e:	88da      	ldrh	r2, [r3, #6]
    8780:	3210      	adds	r2, #16
    8782:	b292      	uxth	r2, r2
    8784:	4b2d      	ldr	r3, [pc, #180]	; (883c <CompactItem+0x204>)
    8786:	8818      	ldrh	r0, [r3, #0]
    8788:	4b34      	ldr	r3, [pc, #208]	; (885c <CompactItem+0x224>)
    878a:	4798      	blx	r3
            return false;
    878c:	2300      	movs	r3, #0
        if ( !WriteAndCheck(s_sectorHead, dataBlock, blockHeader.blockLength + BLOCK_HEADER_SIZE) )
    878e:	2800      	cmp	r0, #0
    8790:	d100      	bne.n	8794 <CompactItem+0x15c>
    8792:	e75d      	b.n	8650 <CompactItem+0x18>
        UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), ITEM_64BYTE_ALIGNMENT);
    8794:	ab06      	add	r3, sp, #24
    8796:	88d8      	ldrh	r0, [r3, #6]
    8798:	3010      	adds	r0, #16
    879a:	b280      	uxth	r0, r0
    879c:	2102      	movs	r1, #2
    879e:	4b30      	ldr	r3, [pc, #192]	; (8860 <CompactItem+0x228>)
    87a0:	4798      	blx	r3
    s_compactItemId = 0u;
    87a2:	2300      	movs	r3, #0
    87a4:	4a21      	ldr	r2, [pc, #132]	; (882c <CompactItem+0x1f4>)
    87a6:	8013      	strh	r3, [r2, #0]
    s_compactItemLength = 0u;
    87a8:	4a1f      	ldr	r2, [pc, #124]	; (8828 <CompactItem+0x1f0>)
    87aa:	8013      	strh	r3, [r2, #0]
    cache->lastBlock = lastBlock;
    87ac:	465b      	mov	r3, fp
    87ae:	9905      	ldr	r1, [sp, #20]
    87b0:	7099      	strb	r1, [r3, #2]
    87b2:	0a0b      	lsrs	r3, r1, #8
    87b4:	465a      	mov	r2, fp
    87b6:	70d3      	strb	r3, [r2, #3]
    return S_Nv_ReturnValue_Ok;
    87b8:	2300      	movs	r3, #0
    87ba:	e749      	b.n	8650 <CompactItem+0x18>
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    87bc:	b2ad      	uxth	r5, r5
            if (!GatherData(s_sector, blockPointer, inDataOffset, bytesToGatherAndCommit - dataBlockOffset , (dataBlock + dataBlockOffset)))
    87be:	1aaf      	subs	r7, r5, r2
    87c0:	b2bb      	uxth	r3, r7
    87c2:	0019      	movs	r1, r3
    87c4:	4653      	mov	r3, sl
    87c6:	7818      	ldrb	r0, [r3, #0]
    87c8:	4b1d      	ldr	r3, [pc, #116]	; (8840 <CompactItem+0x208>)
    87ca:	189b      	adds	r3, r3, r2
    87cc:	9300      	str	r3, [sp, #0]
    87ce:	9102      	str	r1, [sp, #8]
    87d0:	000b      	movs	r3, r1
    87d2:	0032      	movs	r2, r6
    87d4:	9903      	ldr	r1, [sp, #12]
    87d6:	4f20      	ldr	r7, [pc, #128]	; (8858 <CompactItem+0x220>)
    87d8:	47b8      	blx	r7
    87da:	2800      	cmp	r0, #0
    87dc:	d01e      	beq.n	881c <CompactItem+0x1e4>
            if ( !WriteAndCheck(s_sectorHead, dataBlock, bytesToGatherAndCommit) )
    87de:	4b17      	ldr	r3, [pc, #92]	; (883c <CompactItem+0x204>)
    87e0:	8818      	ldrh	r0, [r3, #0]
    87e2:	002a      	movs	r2, r5
    87e4:	4916      	ldr	r1, [pc, #88]	; (8840 <CompactItem+0x208>)
    87e6:	4b1d      	ldr	r3, [pc, #116]	; (885c <CompactItem+0x224>)
    87e8:	4798      	blx	r3
    87ea:	2800      	cmp	r0, #0
    87ec:	d018      	beq.n	8820 <CompactItem+0x1e8>
            UpdateSectorHead(bytesToGatherAndCommit, ITEM_64BYTE_ALIGNMENT);
    87ee:	2102      	movs	r1, #2
    87f0:	0028      	movs	r0, r5
    87f2:	4b1b      	ldr	r3, [pc, #108]	; (8860 <CompactItem+0x228>)
    87f4:	4798      	blx	r3
            currLength -= bytesToGatherAndCommit;
    87f6:	1b64      	subs	r4, r4, r5
    87f8:	b2a4      	uxth	r4, r4
            inDataOffset += (bytesToGatherAndCommit - dataBlockOffset);
    87fa:	9902      	ldr	r1, [sp, #8]
    87fc:	468c      	mov	ip, r1
    87fe:	4466      	add	r6, ip
    8800:	b2b6      	uxth	r6, r6
            dataBlockOffset = 0;
    8802:	2200      	movs	r2, #0
        } while(currLength > 0);
    8804:	2c00      	cmp	r4, #0
    8806:	d0cc      	beq.n	87a2 <CompactItem+0x16a>
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    8808:	1c25      	adds	r5, r4, #0
    880a:	454c      	cmp	r4, r9
    880c:	d9d6      	bls.n	87bc <CompactItem+0x184>
    880e:	466b      	mov	r3, sp
    8810:	8a5d      	ldrh	r5, [r3, #18]
    8812:	e7d3      	b.n	87bc <CompactItem+0x184>
        return S_Nv_ReturnValue_Ok;
    8814:	2300      	movs	r3, #0
    8816:	e71b      	b.n	8650 <CompactItem+0x18>
        return S_Nv_ReturnValue_Ok;
    8818:	2300      	movs	r3, #0
    881a:	e719      	b.n	8650 <CompactItem+0x18>
                return S_Nv_ReturnValue_Failure;
    881c:	2301      	movs	r3, #1
    881e:	e717      	b.n	8650 <CompactItem+0x18>
                return false;
    8820:	2300      	movs	r3, #0
    8822:	e715      	b.n	8650 <CompactItem+0x18>
    8824:	00007ebd 	.word	0x00007ebd
    8828:	20000242 	.word	0x20000242
    882c:	20000240 	.word	0x20000240
    8830:	000080b5 	.word	0x000080b5
    8834:	20000268 	.word	0x20000268
    8838:	00007c6d 	.word	0x00007c6d
    883c:	2000026a 	.word	0x2000026a
    8840:	2000012c 	.word	0x2000012c
    8844:	000085bd 	.word	0x000085bd
    8848:	00017cc0 	.word	0x00017cc0
    884c:	00017e48 	.word	0x00017e48
    8850:	00017d30 	.word	0x00017d30
    8854:	000160f5 	.word	0x000160f5
    8858:	00007f55 	.word	0x00007f55
    885c:	000081d9 	.word	0x000081d9
    8860:	00007ed9 	.word	0x00007ed9

00008864 <compactItemTimerFired>:
{
    8864:	b510      	push	{r4, lr}
    (void)CompactItem();
    8866:	4b01      	ldr	r3, [pc, #4]	; (886c <compactItemTimerFired+0x8>)
    8868:	4798      	blx	r3
}
    886a:	bd10      	pop	{r4, pc}
    886c:	00008639 	.word	0x00008639

00008870 <WriteDataBlockAndHeader>:
{
    8870:	b5f0      	push	{r4, r5, r6, r7, lr}
    8872:	46de      	mov	lr, fp
    8874:	4657      	mov	r7, sl
    8876:	464e      	mov	r6, r9
    8878:	4645      	mov	r5, r8
    887a:	b5e0      	push	{r5, r6, r7, lr}
    887c:	b083      	sub	sp, #12
    887e:	0004      	movs	r4, r0
    8880:	468a      	mov	sl, r1
    memset(dataBlock, 0xFF, sizeof(dataBlock));
    8882:	4d46      	ldr	r5, [pc, #280]	; (899c <WriteDataBlockAndHeader+0x12c>)
    8884:	2280      	movs	r2, #128	; 0x80
    8886:	0052      	lsls	r2, r2, #1
    8888:	21ff      	movs	r1, #255	; 0xff
    888a:	0028      	movs	r0, r5
    888c:	4b44      	ldr	r3, [pc, #272]	; (89a0 <WriteDataBlockAndHeader+0x130>)
    888e:	4798      	blx	r3
    pBlockHeader->dataCrc = ComputeCrc(pData, pBlockHeader->blockLength, 0xFFFF);
    8890:	4e44      	ldr	r6, [pc, #272]	; (89a4 <WriteDataBlockAndHeader+0x134>)
    8892:	79a3      	ldrb	r3, [r4, #6]
    8894:	79e1      	ldrb	r1, [r4, #7]
    8896:	0209      	lsls	r1, r1, #8
    8898:	4319      	orrs	r1, r3
    889a:	0032      	movs	r2, r6
    889c:	4650      	mov	r0, sl
    889e:	4f42      	ldr	r7, [pc, #264]	; (89a8 <WriteDataBlockAndHeader+0x138>)
    88a0:	47b8      	blx	r7
    88a2:	7020      	strb	r0, [r4, #0]
    88a4:	0a00      	lsrs	r0, r0, #8
    88a6:	7060      	strb	r0, [r4, #1]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    88a8:	0032      	movs	r2, r6
    88aa:	210e      	movs	r1, #14
    88ac:	0020      	movs	r0, r4
    88ae:	47b8      	blx	r7
    pBlockHeader->headerCrc = ComputeHeaderCrc(pBlockHeader);
    88b0:	73a0      	strb	r0, [r4, #14]
    88b2:	0a00      	lsrs	r0, r0, #8
    88b4:	73e0      	strb	r0, [r4, #15]
    memcpy(dataBlock, pBlockHeader, BLOCK_HEADER_SIZE);
    88b6:	2210      	movs	r2, #16
    88b8:	0021      	movs	r1, r4
    88ba:	0028      	movs	r0, r5
    88bc:	4b3b      	ldr	r3, [pc, #236]	; (89ac <WriteDataBlockAndHeader+0x13c>)
    88be:	4798      	blx	r3
    currentLength = pBlockHeader->blockLength + BLOCK_HEADER_SIZE;
    88c0:	79a3      	ldrb	r3, [r4, #6]
    88c2:	79e2      	ldrb	r2, [r4, #7]
    88c4:	0212      	lsls	r2, r2, #8
    88c6:	431a      	orrs	r2, r3
    88c8:	0015      	movs	r5, r2
    88ca:	3510      	adds	r5, #16
    88cc:	b2ad      	uxth	r5, r5
    if (pData != NULL )
    88ce:	4653      	mov	r3, sl
    88d0:	2b00      	cmp	r3, #0
    88d2:	d012      	beq.n	88fa <WriteDataBlockAndHeader+0x8a>
        if(currentLength <= ROW_SIZE)
    88d4:	2380      	movs	r3, #128	; 0x80
    88d6:	005b      	lsls	r3, r3, #1
    88d8:	429d      	cmp	r5, r3
    88da:	d909      	bls.n	88f0 <WriteDataBlockAndHeader+0x80>
    88dc:	2600      	movs	r6, #0
    88de:	2710      	movs	r7, #16
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    88e0:	2380      	movs	r3, #128	; 0x80
    88e2:	005b      	lsls	r3, r3, #1
    88e4:	469b      	mov	fp, r3
    88e6:	466a      	mov	r2, sp
    88e8:	80d3      	strh	r3, [r2, #6]
                memcpy(dataBlock + dataBlockOffset, pData + inDataOffset, bytesToCommit - dataBlockOffset);
    88ea:	4b2c      	ldr	r3, [pc, #176]	; (899c <WriteDataBlockAndHeader+0x12c>)
    88ec:	4699      	mov	r9, r3
    88ee:	e045      	b.n	897c <WriteDataBlockAndHeader+0x10c>
            memcpy(dataBlock + BLOCK_HEADER_SIZE , pData, pBlockHeader->blockLength);
    88f0:	4651      	mov	r1, sl
    88f2:	482a      	ldr	r0, [pc, #168]	; (899c <WriteDataBlockAndHeader+0x12c>)
    88f4:	3010      	adds	r0, #16
    88f6:	4b2d      	ldr	r3, [pc, #180]	; (89ac <WriteDataBlockAndHeader+0x13c>)
    88f8:	4798      	blx	r3
    if ( !WriteAndCheck(s_sectorHead, dataBlock, MIN((BLOCK_HEADER_SIZE + pBlockHeader->blockLength), ROW_SIZE)) )
    88fa:	79a3      	ldrb	r3, [r4, #6]
    88fc:	79e2      	ldrb	r2, [r4, #7]
    88fe:	0212      	lsls	r2, r2, #8
    8900:	431a      	orrs	r2, r3
    8902:	3210      	adds	r2, #16
    8904:	2380      	movs	r3, #128	; 0x80
    8906:	005b      	lsls	r3, r3, #1
    8908:	429a      	cmp	r2, r3
    890a:	dd00      	ble.n	890e <WriteDataBlockAndHeader+0x9e>
    890c:	001a      	movs	r2, r3
    890e:	b292      	uxth	r2, r2
    8910:	4b27      	ldr	r3, [pc, #156]	; (89b0 <WriteDataBlockAndHeader+0x140>)
    8912:	8818      	ldrh	r0, [r3, #0]
    8914:	4921      	ldr	r1, [pc, #132]	; (899c <WriteDataBlockAndHeader+0x12c>)
    8916:	4b27      	ldr	r3, [pc, #156]	; (89b4 <WriteDataBlockAndHeader+0x144>)
    8918:	4798      	blx	r3
    891a:	4680      	mov	r8, r0
    891c:	2800      	cmp	r0, #0
    891e:	d033      	beq.n	8988 <WriteDataBlockAndHeader+0x118>
    UpdateSectorHead((pBlockHeader->blockLength + BLOCK_HEADER_SIZE), ITEM_64BYTE_ALIGNMENT );
    8920:	79a3      	ldrb	r3, [r4, #6]
    8922:	79e0      	ldrb	r0, [r4, #7]
    8924:	0200      	lsls	r0, r0, #8
    8926:	4318      	orrs	r0, r3
    8928:	3010      	adds	r0, #16
    892a:	b280      	uxth	r0, r0
    892c:	2102      	movs	r1, #2
    892e:	4b22      	ldr	r3, [pc, #136]	; (89b8 <WriteDataBlockAndHeader+0x148>)
    8930:	4798      	blx	r3
}
    8932:	4640      	mov	r0, r8
    8934:	b003      	add	sp, #12
    8936:	bc3c      	pop	{r2, r3, r4, r5}
    8938:	4690      	mov	r8, r2
    893a:	4699      	mov	r9, r3
    893c:	46a2      	mov	sl, r4
    893e:	46ab      	mov	fp, r5
    8940:	bdf0      	pop	{r4, r5, r6, r7, pc}
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    8942:	b2a4      	uxth	r4, r4
                memcpy(dataBlock + dataBlockOffset, pData + inDataOffset, bytesToCommit - dataBlockOffset);
    8944:	464b      	mov	r3, r9
    8946:	19d8      	adds	r0, r3, r7
    8948:	1be2      	subs	r2, r4, r7
    894a:	4653      	mov	r3, sl
    894c:	1999      	adds	r1, r3, r6
    894e:	4b17      	ldr	r3, [pc, #92]	; (89ac <WriteDataBlockAndHeader+0x13c>)
    8950:	4798      	blx	r3
                if ( !WriteAndCheck(s_sectorHead, dataBlock, bytesToCommit))
    8952:	4b17      	ldr	r3, [pc, #92]	; (89b0 <WriteDataBlockAndHeader+0x140>)
    8954:	8818      	ldrh	r0, [r3, #0]
    8956:	0022      	movs	r2, r4
    8958:	4649      	mov	r1, r9
    895a:	4b16      	ldr	r3, [pc, #88]	; (89b4 <WriteDataBlockAndHeader+0x144>)
    895c:	4798      	blx	r3
    895e:	4680      	mov	r8, r0
    8960:	2800      	cmp	r0, #0
    8962:	d0e6      	beq.n	8932 <WriteDataBlockAndHeader+0xc2>
                UpdateSectorHead(bytesToCommit, ITEM_64BYTE_ALIGNMENT);
    8964:	2102      	movs	r1, #2
    8966:	0020      	movs	r0, r4
    8968:	4b13      	ldr	r3, [pc, #76]	; (89b8 <WriteDataBlockAndHeader+0x148>)
    896a:	4798      	blx	r3
                currentLength -= bytesToCommit;
    896c:	1b2d      	subs	r5, r5, r4
    896e:	b2ad      	uxth	r5, r5
                inDataOffset += (bytesToCommit - dataBlockOffset);
    8970:	1be4      	subs	r4, r4, r7
    8972:	1936      	adds	r6, r6, r4
    8974:	b2b6      	uxth	r6, r6
                dataBlockOffset = 0;
    8976:	2700      	movs	r7, #0
            } while(currentLength > 0);
    8978:	2d00      	cmp	r5, #0
    897a:	d0da      	beq.n	8932 <WriteDataBlockAndHeader+0xc2>
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    897c:	1c2c      	adds	r4, r5, #0
    897e:	455d      	cmp	r5, fp
    8980:	d9df      	bls.n	8942 <WriteDataBlockAndHeader+0xd2>
    8982:	466b      	mov	r3, sp
    8984:	88dc      	ldrh	r4, [r3, #6]
    8986:	e7dc      	b.n	8942 <WriteDataBlockAndHeader+0xd2>
        UpdateSectorHead((pBlockHeader->blockLength + BLOCK_HEADER_SIZE), ITEM_64BYTE_ALIGNMENT);
    8988:	79a3      	ldrb	r3, [r4, #6]
    898a:	79e0      	ldrb	r0, [r4, #7]
    898c:	0200      	lsls	r0, r0, #8
    898e:	4318      	orrs	r0, r3
    8990:	3010      	adds	r0, #16
    8992:	b280      	uxth	r0, r0
    8994:	2102      	movs	r1, #2
    8996:	4b08      	ldr	r3, [pc, #32]	; (89b8 <WriteDataBlockAndHeader+0x148>)
    8998:	4798      	blx	r3
        return false;
    899a:	e7ca      	b.n	8932 <WriteDataBlockAndHeader+0xc2>
    899c:	2000012c 	.word	0x2000012c
    89a0:	000161c9 	.word	0x000161c9
    89a4:	0000ffff 	.word	0x0000ffff
    89a8:	00007f15 	.word	0x00007f15
    89ac:	000161b7 	.word	0x000161b7
    89b0:	2000026a 	.word	0x2000026a
    89b4:	000081d9 	.word	0x000081d9
    89b8:	00007ed9 	.word	0x00007ed9

000089bc <S_Nv_Write_Impl>:
#if defined(S_XNV_LOGGING)
static S_Nv_ReturnValue_t S_Nv_Write_Original(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#else
S_Nv_ReturnValue_t S_Nv_Write_Impl(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#endif
{
    89bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    89be:	46ce      	mov	lr, r9
    89c0:	4647      	mov	r7, r8
    89c2:	b580      	push	{r7, lr}
    89c4:	b087      	sub	sp, #28
    89c6:	0004      	movs	r4, r0
    89c8:	9101      	str	r1, [sp, #4]
    89ca:	0015      	movs	r5, r2
    89cc:	001f      	movs	r7, r3
    assert((id != 0u) && (pData != NULL));
    89ce:	2800      	cmp	r0, #0
    89d0:	d00c      	beq.n	89ec <S_Nv_Write_Impl+0x30>
    89d2:	2b00      	cmp	r3, #0
    89d4:	d00a      	beq.n	89ec <S_Nv_Write_Impl+0x30>

    if ( PowerSupplyTooLow() )
    89d6:	4b35      	ldr	r3, [pc, #212]	; (8aac <S_Nv_Write_Impl+0xf0>)
    89d8:	4798      	blx	r3
    {
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    89da:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    89dc:	2800      	cmp	r0, #0
    89de:	d00b      	beq.n	89f8 <S_Nv_Write_Impl+0x3c>
        //SYS_StartTimer(&compactItemTimer);
        }
    }

    return S_Nv_ReturnValue_Ok;
}
    89e0:	0018      	movs	r0, r3
    89e2:	b007      	add	sp, #28
    89e4:	bc0c      	pop	{r2, r3}
    89e6:	4690      	mov	r8, r2
    89e8:	4699      	mov	r9, r3
    89ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((id != 0u) && (pData != NULL));
    89ec:	4b30      	ldr	r3, [pc, #192]	; (8ab0 <S_Nv_Write_Impl+0xf4>)
    89ee:	4a31      	ldr	r2, [pc, #196]	; (8ab4 <S_Nv_Write_Impl+0xf8>)
    89f0:	4931      	ldr	r1, [pc, #196]	; (8ab8 <S_Nv_Write_Impl+0xfc>)
    89f2:	4832      	ldr	r0, [pc, #200]	; (8abc <S_Nv_Write_Impl+0x100>)
    89f4:	4c32      	ldr	r4, [pc, #200]	; (8ac0 <S_Nv_Write_Impl+0x104>)
    89f6:	47a0      	blx	r4
    CompactSectorIfNeeded(BLOCK_HEADER_SIZE + dataLength);
    89f8:	0028      	movs	r0, r5
    89fa:	3010      	adds	r0, #16
    89fc:	b280      	uxth	r0, r0
    89fe:	4b31      	ldr	r3, [pc, #196]	; (8ac4 <S_Nv_Write_Impl+0x108>)
    8a00:	4798      	blx	r3
    Item_t *cache = FindItemCache(id);
    8a02:	0020      	movs	r0, r4
    8a04:	4b30      	ldr	r3, [pc, #192]	; (8ac8 <S_Nv_Write_Impl+0x10c>)
    8a06:	4798      	blx	r3
    8a08:	0006      	movs	r6, r0
        return S_Nv_ReturnValue_DoesNotExist;
    8a0a:	2303      	movs	r3, #3
    if ( cache == NULL )
    8a0c:	2800      	cmp	r0, #0
    8a0e:	d0e7      	beq.n	89e0 <S_Nv_Write_Impl+0x24>
    uint16_t blockPointer = cache->lastBlock;
    8a10:	7883      	ldrb	r3, [r0, #2]
    8a12:	78c4      	ldrb	r4, [r0, #3]
    8a14:	0224      	lsls	r4, r4, #8
    8a16:	431c      	orrs	r4, r3
    8a18:	46a0      	mov	r8, r4
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8a1a:	4b2c      	ldr	r3, [pc, #176]	; (8acc <S_Nv_Write_Impl+0x110>)
    8a1c:	7818      	ldrb	r0, [r3, #0]
    8a1e:	2310      	movs	r3, #16
    8a20:	aa02      	add	r2, sp, #8
    8a22:	0021      	movs	r1, r4
    8a24:	4c2a      	ldr	r4, [pc, #168]	; (8ad0 <S_Nv_Write_Impl+0x114>)
    8a26:	47a0      	blx	r4
    if ( ((uint32_t) offset + (uint32_t) dataLength) > (uint32_t) blockHeader.itemLength )
    8a28:	ab02      	add	r3, sp, #8
    8a2a:	8919      	ldrh	r1, [r3, #8]
    8a2c:	9b01      	ldr	r3, [sp, #4]
    8a2e:	195a      	adds	r2, r3, r5
        return S_Nv_ReturnValue_BeyondEnd;
    8a30:	2304      	movs	r3, #4
    if ( ((uint32_t) offset + (uint32_t) dataLength) > (uint32_t) blockHeader.itemLength )
    8a32:	428a      	cmp	r2, r1
    8a34:	d8d4      	bhi.n	89e0 <S_Nv_Write_Impl+0x24>
    blockHeader.blockOffset = offset;
    8a36:	ab02      	add	r3, sp, #8
    8a38:	466a      	mov	r2, sp
    8a3a:	8892      	ldrh	r2, [r2, #4]
    8a3c:	809a      	strh	r2, [r3, #4]
    blockHeader.blockLength = dataLength;
    8a3e:	80dd      	strh	r5, [r3, #6]
    blockHeader.previousBlock = blockPointer;
    8a40:	4642      	mov	r2, r8
    8a42:	815a      	strh	r2, [r3, #10]
    if ( blockHeader.blockLength == blockHeader.itemLength )
    8a44:	428d      	cmp	r5, r1
    8a46:	d02c      	beq.n	8aa2 <S_Nv_Write_Impl+0xe6>
        blockHeader.writeCount++;
    8a48:	ab02      	add	r3, sp, #8
    8a4a:	899b      	ldrh	r3, [r3, #12]
    8a4c:	3301      	adds	r3, #1
    8a4e:	aa02      	add	r2, sp, #8
    8a50:	8193      	strh	r3, [r2, #12]
    uint16_t newBlockPointer = s_sectorHead;
    8a52:	4b20      	ldr	r3, [pc, #128]	; (8ad4 <S_Nv_Write_Impl+0x118>)
    8a54:	881c      	ldrh	r4, [r3, #0]
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pData) )
    8a56:	0039      	movs	r1, r7
    8a58:	a802      	add	r0, sp, #8
    8a5a:	4b1f      	ldr	r3, [pc, #124]	; (8ad8 <S_Nv_Write_Impl+0x11c>)
    8a5c:	4798      	blx	r3
        return S_Nv_ReturnValue_Failure;
    8a5e:	2301      	movs	r3, #1
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pData) )
    8a60:	2800      	cmp	r0, #0
    8a62:	d0bd      	beq.n	89e0 <S_Nv_Write_Impl+0x24>
    cache->lastBlock = newBlockPointer;
    8a64:	70b4      	strb	r4, [r6, #2]
    8a66:	0a24      	lsrs	r4, r4, #8
    8a68:	70f4      	strb	r4, [r6, #3]
    if ( blockHeader.writeCount > COMPACT_ITEM_THRESHOLD )
    8a6a:	ab02      	add	r3, sp, #8
    8a6c:	899a      	ldrh	r2, [r3, #12]
    return S_Nv_ReturnValue_Ok;
    8a6e:	2300      	movs	r3, #0
    if ( blockHeader.writeCount > COMPACT_ITEM_THRESHOLD )
    8a70:	2a64      	cmp	r2, #100	; 0x64
    8a72:	d9b5      	bls.n	89e0 <S_Nv_Write_Impl+0x24>
        s_compactItemId = blockHeader.id;
    8a74:	ab02      	add	r3, sp, #8
    8a76:	885a      	ldrh	r2, [r3, #2]
    8a78:	4b18      	ldr	r3, [pc, #96]	; (8adc <S_Nv_Write_Impl+0x120>)
    8a7a:	801a      	strh	r2, [r3, #0]
        s_compactItemLength = 0u;           // no need to resize this item here
    8a7c:	2200      	movs	r2, #0
    8a7e:	4b18      	ldr	r3, [pc, #96]	; (8ae0 <S_Nv_Write_Impl+0x124>)
    8a80:	801a      	strh	r2, [r3, #0]
        if (!SYS_TimerStarted(&compactItemTimer))
    8a82:	4818      	ldr	r0, [pc, #96]	; (8ae4 <S_Nv_Write_Impl+0x128>)
    8a84:	4b18      	ldr	r3, [pc, #96]	; (8ae8 <S_Nv_Write_Impl+0x12c>)
    8a86:	4798      	blx	r3
    return S_Nv_ReturnValue_Ok;
    8a88:	2300      	movs	r3, #0
        if (!SYS_TimerStarted(&compactItemTimer))
    8a8a:	2800      	cmp	r0, #0
    8a8c:	d1a8      	bne.n	89e0 <S_Nv_Write_Impl+0x24>
        compactItemTimer.handler = compactItemTimerFired;
    8a8e:	4b15      	ldr	r3, [pc, #84]	; (8ae4 <S_Nv_Write_Impl+0x128>)
    8a90:	4a16      	ldr	r2, [pc, #88]	; (8aec <S_Nv_Write_Impl+0x130>)
    8a92:	611a      	str	r2, [r3, #16]
        compactItemTimer.timeout = COMPACT_ITEM_DELAY_MS;
    8a94:	4a16      	ldr	r2, [pc, #88]	; (8af0 <S_Nv_Write_Impl+0x134>)
    8a96:	605a      	str	r2, [r3, #4]
        compactItemTimer.interval = COMPACT_ITEM_DELAY_MS;
    8a98:	609a      	str	r2, [r3, #8]
        compactItemTimer.mode = SYS_TIMER_INTERVAL_MODE;
    8a9a:	2200      	movs	r2, #0
    8a9c:	731a      	strb	r2, [r3, #12]
    return S_Nv_ReturnValue_Ok;
    8a9e:	2300      	movs	r3, #0
    8aa0:	e79e      	b.n	89e0 <S_Nv_Write_Impl+0x24>
        blockHeader.writeCount = 0u;
    8aa2:	2300      	movs	r3, #0
    8aa4:	aa02      	add	r2, sp, #8
    8aa6:	8193      	strh	r3, [r2, #12]
    8aa8:	e7d3      	b.n	8a52 <S_Nv_Write_Impl+0x96>
    8aaa:	46c0      	nop			; (mov r8, r8)
    8aac:	00007ebd 	.word	0x00007ebd
    8ab0:	00017dc8 	.word	0x00017dc8
    8ab4:	00017e68 	.word	0x00017e68
    8ab8:	00000596 	.word	0x00000596
    8abc:	00017d30 	.word	0x00017d30
    8ac0:	000160f5 	.word	0x000160f5
    8ac4:	000085bd 	.word	0x000085bd
    8ac8:	000080b5 	.word	0x000080b5
    8acc:	20000268 	.word	0x20000268
    8ad0:	00007c6d 	.word	0x00007c6d
    8ad4:	2000026a 	.word	0x2000026a
    8ad8:	00008871 	.word	0x00008871
    8adc:	20000240 	.word	0x20000240
    8ae0:	20000242 	.word	0x20000242
    8ae4:	20000100 	.word	0x20000100
    8ae8:	0000ba41 	.word	0x0000ba41
    8aec:	00008865 	.word	0x00008865
    8af0:	00000bb8 	.word	0x00000bb8

00008af4 <S_Nv_Read_Impl>:
#if defined(S_XNV_LOGGING)
static S_Nv_ReturnValue_t S_Nv_Read_Original(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#else
S_Nv_ReturnValue_t S_Nv_Read_Impl(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#endif
{
    8af4:	b5f0      	push	{r4, r5, r6, r7, lr}
    8af6:	b083      	sub	sp, #12
    8af8:	000c      	movs	r4, r1
    8afa:	0015      	movs	r5, r2
    8afc:	001e      	movs	r6, r3
    assert((id != 0u) && (pData != NULL));
    8afe:	2800      	cmp	r0, #0
    8b00:	d009      	beq.n	8b16 <S_Nv_Read_Impl+0x22>
    8b02:	2b00      	cmp	r3, #0
    8b04:	d007      	beq.n	8b16 <S_Nv_Read_Impl+0x22>

    // get the pointer to the last written block for the item
    uint16_t lastBlockPointer = FindItem(id);
    8b06:	4b10      	ldr	r3, [pc, #64]	; (8b48 <S_Nv_Read_Impl+0x54>)
    8b08:	4798      	blx	r3
    if ( lastBlockPointer == 0x0000u )
    {
        // item does not exist
        return S_Nv_ReturnValue_DoesNotExist;
    8b0a:	2303      	movs	r3, #3
    if ( lastBlockPointer == 0x0000u )
    8b0c:	2800      	cmp	r0, #0
    8b0e:	d108      	bne.n	8b22 <S_Nv_Read_Impl+0x2e>
    {
        return S_Nv_ReturnValue_BeyondEnd;
    }

    return S_Nv_ReturnValue_Ok;
}
    8b10:	0018      	movs	r0, r3
    8b12:	b003      	add	sp, #12
    8b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((id != 0u) && (pData != NULL));
    8b16:	4b0d      	ldr	r3, [pc, #52]	; (8b4c <S_Nv_Read_Impl+0x58>)
    8b18:	4a0d      	ldr	r2, [pc, #52]	; (8b50 <S_Nv_Read_Impl+0x5c>)
    8b1a:	490e      	ldr	r1, [pc, #56]	; (8b54 <S_Nv_Read_Impl+0x60>)
    8b1c:	480e      	ldr	r0, [pc, #56]	; (8b58 <S_Nv_Read_Impl+0x64>)
    8b1e:	4c0f      	ldr	r4, [pc, #60]	; (8b5c <S_Nv_Read_Impl+0x68>)
    8b20:	47a0      	blx	r4
    if ( ((uint32_t) offset + (uint32_t) dataLength) >= 0x10000uL )
    8b22:	1962      	adds	r2, r4, r5
    8b24:	490e      	ldr	r1, [pc, #56]	; (8b60 <S_Nv_Read_Impl+0x6c>)
        return S_Nv_ReturnValue_BeyondEnd;
    8b26:	3301      	adds	r3, #1
    if ( ((uint32_t) offset + (uint32_t) dataLength) >= 0x10000uL )
    8b28:	428a      	cmp	r2, r1
    8b2a:	d8f1      	bhi.n	8b10 <S_Nv_Read_Impl+0x1c>
    if ( !GatherData(s_sector, lastBlockPointer, offset, dataLength, pData ))
    8b2c:	4b0d      	ldr	r3, [pc, #52]	; (8b64 <S_Nv_Read_Impl+0x70>)
    8b2e:	781f      	ldrb	r7, [r3, #0]
    8b30:	9600      	str	r6, [sp, #0]
    8b32:	002b      	movs	r3, r5
    8b34:	0022      	movs	r2, r4
    8b36:	0001      	movs	r1, r0
    8b38:	0038      	movs	r0, r7
    8b3a:	4c0b      	ldr	r4, [pc, #44]	; (8b68 <S_Nv_Read_Impl+0x74>)
    8b3c:	47a0      	blx	r4
    return S_Nv_ReturnValue_Ok;
    8b3e:	4243      	negs	r3, r0
    8b40:	4143      	adcs	r3, r0
    8b42:	009b      	lsls	r3, r3, #2
    8b44:	e7e4      	b.n	8b10 <S_Nv_Read_Impl+0x1c>
    8b46:	46c0      	nop			; (mov r8, r8)
    8b48:	00008129 	.word	0x00008129
    8b4c:	00017dc8 	.word	0x00017dc8
    8b50:	00017e78 	.word	0x00017e78
    8b54:	000005ee 	.word	0x000005ee
    8b58:	00017d30 	.word	0x00017d30
    8b5c:	000160f5 	.word	0x000160f5
    8b60:	0000ffff 	.word	0x0000ffff
    8b64:	20000268 	.word	0x20000268
    8b68:	00007f55 	.word	0x00007f55

00008b6c <S_Nv_ItemLength_Impl>:

/** Interface function, see \ref S_Nv_ItemLength. */
uint16_t S_Nv_ItemLength_Impl(S_Nv_ItemId_t id)
{
    8b6c:	b510      	push	{r4, lr}
    8b6e:	b084      	sub	sp, #16
    assert(id != 0u);
    8b70:	2800      	cmp	r0, #0
    8b72:	d005      	beq.n	8b80 <S_Nv_ItemLength_Impl+0x14>

    uint16_t blockPointer = FindItem(id);
    8b74:	4b0a      	ldr	r3, [pc, #40]	; (8ba0 <S_Nv_ItemLength_Impl+0x34>)
    8b76:	4798      	blx	r3
    8b78:	1e01      	subs	r1, r0, #0
    if ( blockPointer == 0x0000u )
    8b7a:	d107      	bne.n	8b8c <S_Nv_ItemLength_Impl+0x20>

    // read last written item block header
    BlockHeader_t blockHeader;
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    return blockHeader.itemLength;
}
    8b7c:	b004      	add	sp, #16
    8b7e:	bd10      	pop	{r4, pc}
    assert(id != 0u);
    8b80:	4b08      	ldr	r3, [pc, #32]	; (8ba4 <S_Nv_ItemLength_Impl+0x38>)
    8b82:	4a09      	ldr	r2, [pc, #36]	; (8ba8 <S_Nv_ItemLength_Impl+0x3c>)
    8b84:	4909      	ldr	r1, [pc, #36]	; (8bac <S_Nv_ItemLength_Impl+0x40>)
    8b86:	480a      	ldr	r0, [pc, #40]	; (8bb0 <S_Nv_ItemLength_Impl+0x44>)
    8b88:	4c0a      	ldr	r4, [pc, #40]	; (8bb4 <S_Nv_ItemLength_Impl+0x48>)
    8b8a:	47a0      	blx	r4
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8b8c:	4b0a      	ldr	r3, [pc, #40]	; (8bb8 <S_Nv_ItemLength_Impl+0x4c>)
    8b8e:	7818      	ldrb	r0, [r3, #0]
    8b90:	2310      	movs	r3, #16
    8b92:	466a      	mov	r2, sp
    8b94:	4c09      	ldr	r4, [pc, #36]	; (8bbc <S_Nv_ItemLength_Impl+0x50>)
    8b96:	47a0      	blx	r4
    return blockHeader.itemLength;
    8b98:	466b      	mov	r3, sp
    8b9a:	8918      	ldrh	r0, [r3, #8]
    8b9c:	e7ee      	b.n	8b7c <S_Nv_ItemLength_Impl+0x10>
    8b9e:	46c0      	nop			; (mov r8, r8)
    8ba0:	00008129 	.word	0x00008129
    8ba4:	00017dbc 	.word	0x00017dbc
    8ba8:	00017e88 	.word	0x00017e88
    8bac:	0000060b 	.word	0x0000060b
    8bb0:	00017d30 	.word	0x00017d30
    8bb4:	000160f5 	.word	0x000160f5
    8bb8:	20000268 	.word	0x20000268
    8bbc:	00007c6d 	.word	0x00007c6d

00008bc0 <S_Nv_ItemInit_Impl>:
{
    8bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    8bc2:	b085      	sub	sp, #20
    8bc4:	0004      	movs	r4, r0
    8bc6:	000e      	movs	r6, r1
    8bc8:	0015      	movs	r5, r2
    assert((id != 0u) && (id < 0xF000u) && (itemLength <= MAX_ITEM_LENGTH));
    8bca:	1e43      	subs	r3, r0, #1
    8bcc:	b29b      	uxth	r3, r3
    8bce:	4a2e      	ldr	r2, [pc, #184]	; (8c88 <S_Nv_ItemInit_Impl+0xc8>)
    8bd0:	4293      	cmp	r3, r2
    8bd2:	d81e      	bhi.n	8c12 <S_Nv_ItemInit_Impl+0x52>
    8bd4:	2380      	movs	r3, #128	; 0x80
    8bd6:	011b      	lsls	r3, r3, #4
    8bd8:	4299      	cmp	r1, r3
    8bda:	d81a      	bhi.n	8c12 <S_Nv_ItemInit_Impl+0x52>
    if ( FindItem(id) != 0x0000u )
    8bdc:	4b2b      	ldr	r3, [pc, #172]	; (8c8c <S_Nv_ItemInit_Impl+0xcc>)
    8bde:	4798      	blx	r3
    8be0:	2800      	cmp	r0, #0
    8be2:	d01d      	beq.n	8c20 <S_Nv_ItemInit_Impl+0x60>
        uint16_t oldItemLength = S_Nv_ItemLength(id);
    8be4:	0020      	movs	r0, r4
    8be6:	4b2a      	ldr	r3, [pc, #168]	; (8c90 <S_Nv_ItemInit_Impl+0xd0>)
    8be8:	4798      	blx	r3
        if ( oldItemLength != itemLength )
    8bea:	4286      	cmp	r6, r0
    8bec:	d007      	beq.n	8bfe <S_Nv_ItemInit_Impl+0x3e>
            s_compactItemId = id;
    8bee:	4b29      	ldr	r3, [pc, #164]	; (8c94 <S_Nv_ItemInit_Impl+0xd4>)
    8bf0:	801c      	strh	r4, [r3, #0]
            s_compactItemLength = itemLength;
    8bf2:	4b29      	ldr	r3, [pc, #164]	; (8c98 <S_Nv_ItemInit_Impl+0xd8>)
    8bf4:	801e      	strh	r6, [r3, #0]
            S_Nv_ReturnValue_t resizeResult = CompactItem();
    8bf6:	4b29      	ldr	r3, [pc, #164]	; (8c9c <S_Nv_ItemInit_Impl+0xdc>)
    8bf8:	4798      	blx	r3
    8bfa:	1e03      	subs	r3, r0, #0
            if ( resizeResult != S_Nv_ReturnValue_Ok )
    8bfc:	d115      	bne.n	8c2a <S_Nv_ItemInit_Impl+0x6a>
        if (pDefaultData != NULL)
    8bfe:	2d00      	cmp	r5, #0
    8c00:	d040      	beq.n	8c84 <S_Nv_ItemInit_Impl+0xc4>
            return S_Nv_Read(id, 0u, itemLength, pDefaultData);
    8c02:	002b      	movs	r3, r5
    8c04:	0032      	movs	r2, r6
    8c06:	2100      	movs	r1, #0
    8c08:	0020      	movs	r0, r4
    8c0a:	4c25      	ldr	r4, [pc, #148]	; (8ca0 <S_Nv_ItemInit_Impl+0xe0>)
    8c0c:	47a0      	blx	r4
    8c0e:	0003      	movs	r3, r0
    8c10:	e00b      	b.n	8c2a <S_Nv_ItemInit_Impl+0x6a>
    assert((id != 0u) && (id < 0xF000u) && (itemLength <= MAX_ITEM_LENGTH));
    8c12:	4b24      	ldr	r3, [pc, #144]	; (8ca4 <S_Nv_ItemInit_Impl+0xe4>)
    8c14:	4a24      	ldr	r2, [pc, #144]	; (8ca8 <S_Nv_ItemInit_Impl+0xe8>)
    8c16:	21aa      	movs	r1, #170	; 0xaa
    8c18:	00c9      	lsls	r1, r1, #3
    8c1a:	4824      	ldr	r0, [pc, #144]	; (8cac <S_Nv_ItemInit_Impl+0xec>)
    8c1c:	4c24      	ldr	r4, [pc, #144]	; (8cb0 <S_Nv_ItemInit_Impl+0xf0>)
    8c1e:	47a0      	blx	r4
    if ( PowerSupplyTooLow() )
    8c20:	4b24      	ldr	r3, [pc, #144]	; (8cb4 <S_Nv_ItemInit_Impl+0xf4>)
    8c22:	4798      	blx	r3
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    8c24:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    8c26:	2800      	cmp	r0, #0
    8c28:	d002      	beq.n	8c30 <S_Nv_ItemInit_Impl+0x70>
}
    8c2a:	0018      	movs	r0, r3
    8c2c:	b005      	add	sp, #20
    8c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CompactSectorIfNeeded(BLOCK_HEADER_SIZE + itemLength);
    8c30:	0030      	movs	r0, r6
    8c32:	3010      	adds	r0, #16
    8c34:	b280      	uxth	r0, r0
    8c36:	4b20      	ldr	r3, [pc, #128]	; (8cb8 <S_Nv_ItemInit_Impl+0xf8>)
    8c38:	4798      	blx	r3
    assert(s_itemCount < MAX_ITEM_COUNT);
    8c3a:	4b20      	ldr	r3, [pc, #128]	; (8cbc <S_Nv_ItemInit_Impl+0xfc>)
    8c3c:	781b      	ldrb	r3, [r3, #0]
    8c3e:	2b06      	cmp	r3, #6
    8c40:	d819      	bhi.n	8c76 <S_Nv_ItemInit_Impl+0xb6>
    uint16_t newItemPointer = s_sectorHead;
    8c42:	4b1f      	ldr	r3, [pc, #124]	; (8cc0 <S_Nv_ItemInit_Impl+0x100>)
    8c44:	881f      	ldrh	r7, [r3, #0]
    blockHeader.id = newItemId;
    8c46:	466b      	mov	r3, sp
    8c48:	805c      	strh	r4, [r3, #2]
    blockHeader.blockOffset = 0x0000u;
    8c4a:	2300      	movs	r3, #0
    8c4c:	466a      	mov	r2, sp
    8c4e:	8093      	strh	r3, [r2, #4]
    blockHeader.blockLength = itemLength;
    8c50:	80d6      	strh	r6, [r2, #6]
    blockHeader.itemLength = itemLength;
    8c52:	8116      	strh	r6, [r2, #8]
    blockHeader.previousBlock = 0x0000u;
    8c54:	8153      	strh	r3, [r2, #10]
    blockHeader.writeCount = 0u;
    8c56:	8193      	strh	r3, [r2, #12]
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pDefaultData) )
    8c58:	0029      	movs	r1, r5
    8c5a:	4668      	mov	r0, sp
    8c5c:	4b19      	ldr	r3, [pc, #100]	; (8cc4 <S_Nv_ItemInit_Impl+0x104>)
    8c5e:	4798      	blx	r3
        return S_Nv_ReturnValue_Failure;
    8c60:	2301      	movs	r3, #1
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pDefaultData) )
    8c62:	2800      	cmp	r0, #0
    8c64:	d0e1      	beq.n	8c2a <S_Nv_ItemInit_Impl+0x6a>
    Item_t *newItemCache = CreateItemCache(newItemId);
    8c66:	0020      	movs	r0, r4
    8c68:	4b17      	ldr	r3, [pc, #92]	; (8cc8 <S_Nv_ItemInit_Impl+0x108>)
    8c6a:	4798      	blx	r3
    newItemCache->lastBlock = newItemPointer;
    8c6c:	7087      	strb	r7, [r0, #2]
    8c6e:	0a3f      	lsrs	r7, r7, #8
    8c70:	70c7      	strb	r7, [r0, #3]
    return S_Nv_ReturnValue_DidNotExist;
    8c72:	2302      	movs	r3, #2
    8c74:	e7d9      	b.n	8c2a <S_Nv_ItemInit_Impl+0x6a>
    assert(s_itemCount < MAX_ITEM_COUNT);
    8c76:	4b15      	ldr	r3, [pc, #84]	; (8ccc <S_Nv_ItemInit_Impl+0x10c>)
    8c78:	4a0b      	ldr	r2, [pc, #44]	; (8ca8 <S_Nv_ItemInit_Impl+0xe8>)
    8c7a:	21af      	movs	r1, #175	; 0xaf
    8c7c:	00c9      	lsls	r1, r1, #3
    8c7e:	480b      	ldr	r0, [pc, #44]	; (8cac <S_Nv_ItemInit_Impl+0xec>)
    8c80:	4c0b      	ldr	r4, [pc, #44]	; (8cb0 <S_Nv_ItemInit_Impl+0xf0>)
    8c82:	47a0      	blx	r4
            return S_Nv_ReturnValue_Ok;
    8c84:	2300      	movs	r3, #0
    8c86:	e7d0      	b.n	8c2a <S_Nv_ItemInit_Impl+0x6a>
    8c88:	0000effe 	.word	0x0000effe
    8c8c:	00008129 	.word	0x00008129
    8c90:	00008b6d 	.word	0x00008b6d
    8c94:	20000240 	.word	0x20000240
    8c98:	20000242 	.word	0x20000242
    8c9c:	00008639 	.word	0x00008639
    8ca0:	00008af5 	.word	0x00008af5
    8ca4:	00017d7c 	.word	0x00017d7c
    8ca8:	00017e54 	.word	0x00017e54
    8cac:	00017d30 	.word	0x00017d30
    8cb0:	000160f5 	.word	0x000160f5
    8cb4:	00007ebd 	.word	0x00007ebd
    8cb8:	000085bd 	.word	0x000085bd
    8cbc:	20000260 	.word	0x20000260
    8cc0:	2000026a 	.word	0x2000026a
    8cc4:	00008871 	.word	0x00008871
    8cc8:	00008145 	.word	0x00008145
    8ccc:	00017cf4 	.word	0x00017cf4

00008cd0 <S_Nv_IsItemAvailable_Impl>:
/** Interface function, see \ref S_Nv_IsItemAvailable.
 *
 * Important: This will check whether the item is found in the storage area
 */
bool S_Nv_IsItemAvailable_Impl(S_Nv_ItemId_t id)
{
    8cd0:	b510      	push	{r4, lr}
  return ( FindItem(id) != 0x0000u );
    8cd2:	4b03      	ldr	r3, [pc, #12]	; (8ce0 <S_Nv_IsItemAvailable_Impl+0x10>)
    8cd4:	4798      	blx	r3
    8cd6:	1e43      	subs	r3, r0, #1
    8cd8:	4198      	sbcs	r0, r3
    8cda:	b2c0      	uxtb	r0, r0
}
    8cdc:	bd10      	pop	{r4, pc}
    8cde:	46c0      	nop			; (mov r8, r8)
    8ce0:	00008129 	.word	0x00008129

00008ce4 <pdsInitItemMask>:
\param[in] itemMask - itemMask to be initialized

\return true itemMask is initialized, false otherwise
******************************************************************************/
static bool pdsInitItemMask(S_Nv_ItemId_t memoryId, uint8_t *itemMask)
{
    8ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
    8ce6:	46d6      	mov	lr, sl
    8ce8:	4647      	mov	r7, r8
    8cea:	b580      	push	{r7, lr}
    8cec:	b087      	sub	sp, #28
    8cee:	000f      	movs	r7, r1
  if (PDS_ALL_EXISTENT_MEMORY == memoryId)
    8cf0:	4b20      	ldr	r3, [pc, #128]	; (8d74 <pdsInitItemMask+0x90>)
    8cf2:	4298      	cmp	r0, r3
    8cf4:	d012      	beq.n	8d1c <pdsInitItemMask+0x38>
  {
    memset(itemMask, 0xFFU, PDS_ITEM_MASK_SIZE);
    itemMask[0] &= 0xFEU;
  }
  else if (PDS_DIRECTORY_MASK & memoryId)
    8cf6:	0443      	lsls	r3, r0, #17
    8cf8:	d415      	bmi.n	8d26 <pdsInitItemMask+0x42>
    else
      return false;
  }
  else
  {
    itemMask[memoryId / 8] |= 1 << (memoryId % 8);
    8cfa:	08c3      	lsrs	r3, r0, #3
    8cfc:	18cf      	adds	r7, r1, r3
    8cfe:	2307      	movs	r3, #7
    8d00:	4018      	ands	r0, r3
    8d02:	3b06      	subs	r3, #6
    8d04:	4083      	lsls	r3, r0
    8d06:	783a      	ldrb	r2, [r7, #0]
    8d08:	4313      	orrs	r3, r2
    8d0a:	703b      	strb	r3, [r7, #0]
  }

  return true;
    8d0c:	2301      	movs	r3, #1
    8d0e:	9301      	str	r3, [sp, #4]
}
    8d10:	9801      	ldr	r0, [sp, #4]
    8d12:	b007      	add	sp, #28
    8d14:	bc0c      	pop	{r2, r3}
    8d16:	4690      	mov	r8, r2
    8d18:	469a      	mov	sl, r3
    8d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    itemMask[0] &= 0xFEU;
    8d1c:	23fe      	movs	r3, #254	; 0xfe
    8d1e:	700b      	strb	r3, [r1, #0]
  return true;
    8d20:	3bfd      	subs	r3, #253	; 0xfd
    8d22:	9301      	str	r3, [sp, #4]
    8d24:	e7f4      	b.n	8d10 <pdsInitItemMask+0x2c>
    if (pdsGetDirDescr(memoryId, &dirDescr))
    8d26:	a904      	add	r1, sp, #16
    8d28:	4b13      	ldr	r3, [pc, #76]	; (8d78 <pdsInitItemMask+0x94>)
    8d2a:	4798      	blx	r3
    8d2c:	9001      	str	r0, [sp, #4]
    8d2e:	2800      	cmp	r0, #0
    8d30:	d0ee      	beq.n	8d10 <pdsInitItemMask+0x2c>
      for (uint8_t index=0U; index < dirDescr.filesCount; index++)
    8d32:	ab04      	add	r3, sp, #16
    8d34:	889b      	ldrh	r3, [r3, #4]
    8d36:	4698      	mov	r8, r3
    8d38:	2b00      	cmp	r3, #0
    8d3a:	d0e9      	beq.n	8d10 <pdsInitItemMask+0x2c>
    8d3c:	2400      	movs	r4, #0
        memcpy(&memId, (void const FLASH_PTR*)(dirDescr.list + index), sizeof(uint16_t));
    8d3e:	ab02      	add	r3, sp, #8
    8d40:	1d9d      	adds	r5, r3, #6
    8d42:	4b0e      	ldr	r3, [pc, #56]	; (8d7c <pdsInitItemMask+0x98>)
    8d44:	469a      	mov	sl, r3
        itemMask[memId / 8U] |= 1U << (memId % 8U);
    8d46:	2607      	movs	r6, #7
        memcpy(&memId, (void const FLASH_PTR*)(dirDescr.list + index), sizeof(uint16_t));
    8d48:	0061      	lsls	r1, r4, #1
    8d4a:	9b04      	ldr	r3, [sp, #16]
    8d4c:	469c      	mov	ip, r3
    8d4e:	4461      	add	r1, ip
    8d50:	2202      	movs	r2, #2
    8d52:	0028      	movs	r0, r5
    8d54:	47d0      	blx	sl
        itemMask[memId / 8U] |= 1U << (memId % 8U);
    8d56:	8829      	ldrh	r1, [r5, #0]
    8d58:	08ca      	lsrs	r2, r1, #3
    8d5a:	18ba      	adds	r2, r7, r2
    8d5c:	4031      	ands	r1, r6
    8d5e:	2301      	movs	r3, #1
    8d60:	408b      	lsls	r3, r1
    8d62:	7811      	ldrb	r1, [r2, #0]
    8d64:	430b      	orrs	r3, r1
    8d66:	7013      	strb	r3, [r2, #0]
      for (uint8_t index=0U; index < dirDescr.filesCount; index++)
    8d68:	3401      	adds	r4, #1
    8d6a:	b2e4      	uxtb	r4, r4
    8d6c:	b2a3      	uxth	r3, r4
    8d6e:	4543      	cmp	r3, r8
    8d70:	d3ea      	bcc.n	8d48 <pdsInitItemMask+0x64>
    8d72:	e7cd      	b.n	8d10 <pdsInitItemMask+0x2c>
    8d74:	00004002 	.word	0x00004002
    8d78:	00008f91 	.word	0x00008f91
    8d7c:	000161b7 	.word	0x000161b7

00008d80 <PDS_Store>:
{
    8d80:	b510      	push	{r4, lr}
  if (!pdsInitItemMask(memoryId, itemsToStore))
    8d82:	4905      	ldr	r1, [pc, #20]	; (8d98 <PDS_Store+0x18>)
    8d84:	4b05      	ldr	r3, [pc, #20]	; (8d9c <PDS_Store+0x1c>)
    8d86:	4798      	blx	r3
    8d88:	1e04      	subs	r4, r0, #0
    8d8a:	d101      	bne.n	8d90 <PDS_Store+0x10>
}
    8d8c:	0020      	movs	r0, r4
    8d8e:	bd10      	pop	{r4, pc}
  pdsPostTask(PDS_STORE_ITEM_TASK_ID);
    8d90:	2000      	movs	r0, #0
    8d92:	4b03      	ldr	r3, [pc, #12]	; (8da0 <PDS_Store+0x20>)
    8d94:	4798      	blx	r3
  return true;
    8d96:	e7f9      	b.n	8d8c <PDS_Store+0xc>
    8d98:	20000270 	.word	0x20000270
    8d9c:	00008ce5 	.word	0x00008ce5
    8da0:	00008ee1 	.word	0x00008ee1

00008da4 <pdsStoreItemTaskHandler>:
{
    8da4:	b5f0      	push	{r4, r5, r6, r7, lr}
    8da6:	b085      	sub	sp, #20
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    8da8:	4b3e      	ldr	r3, [pc, #248]	; (8ea4 <pdsStoreItemTaskHandler+0x100>)
    8daa:	781b      	ldrb	r3, [r3, #0]
    8dac:	3301      	adds	r3, #1
      bit_index %= 8;
    8dae:	2207      	movs	r2, #7
    8db0:	4013      	ands	r3, r2
      if (itemsToStore[byte_index] & (1U << bit_index))
    8db2:	4a3d      	ldr	r2, [pc, #244]	; (8ea8 <pdsStoreItemTaskHandler+0x104>)
    8db4:	7817      	ldrb	r7, [r2, #0]
    8db6:	0038      	movs	r0, r7
    8db8:	001e      	movs	r6, r3
    8dba:	003a      	movs	r2, r7
    8dbc:	40da      	lsrs	r2, r3
    8dbe:	07d2      	lsls	r2, r2, #31
    8dc0:	d431      	bmi.n	8e26 <pdsStoreItemTaskHandler+0x82>
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    8dc2:	3301      	adds	r3, #1
    8dc4:	b2db      	uxtb	r3, r3
    8dc6:	2207      	movs	r2, #7
      bit_index %= 8;
    8dc8:	2507      	movs	r5, #7
      if (itemsToStore[byte_index] & (1U << bit_index))
    8dca:	2401      	movs	r4, #1
      bit_index %= 8;
    8dcc:	402b      	ands	r3, r5
      if (itemsToStore[byte_index] & (1U << bit_index))
    8dce:	001e      	movs	r6, r3
    8dd0:	0001      	movs	r1, r0
    8dd2:	40d9      	lsrs	r1, r3
    8dd4:	420c      	tst	r4, r1
    8dd6:	d126      	bne.n	8e26 <pdsStoreItemTaskHandler+0x82>
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    8dd8:	3301      	adds	r3, #1
    8dda:	b2db      	uxtb	r3, r3
    8ddc:	3a01      	subs	r2, #1
    8dde:	b2d2      	uxtb	r2, r2
    8de0:	2a00      	cmp	r2, #0
    8de2:	d1f3      	bne.n	8dcc <pdsStoreItemTaskHandler+0x28>
  for (i = 0U, byte_index = i_found + 1; i < PDS_ITEM_MASK_SIZE; i++, byte_index++)
    8de4:	2401      	movs	r4, #1
  if (!S_Nv_IsItemAvailable(((S_Nv_ItemId_t)byte_index << 3U) + bit_index))
    8de6:	00e4      	lsls	r4, r4, #3
    8de8:	18e4      	adds	r4, r4, r3
    8dea:	0020      	movs	r0, r4
    8dec:	4b2f      	ldr	r3, [pc, #188]	; (8eac <pdsStoreItemTaskHandler+0x108>)
    8dee:	4798      	blx	r3
    8df0:	2800      	cmp	r0, #0
    8df2:	d124      	bne.n	8e3e <pdsStoreItemTaskHandler+0x9a>
    if(pdsGetItemDescr(((S_Nv_ItemId_t)byte_index << 3U) + bit_index, &itemDescr))
    8df4:	4669      	mov	r1, sp
    8df6:	0020      	movs	r0, r4
    8df8:	4b2d      	ldr	r3, [pc, #180]	; (8eb0 <pdsStoreItemTaskHandler+0x10c>)
    8dfa:	4798      	blx	r3
    8dfc:	2800      	cmp	r0, #0
    8dfe:	d038      	beq.n	8e72 <pdsStoreItemTaskHandler+0xce>
      if (itemDescr.filler)
    8e00:	9b02      	ldr	r3, [sp, #8]
    8e02:	2b00      	cmp	r3, #0
    8e04:	d000      	beq.n	8e08 <pdsStoreItemTaskHandler+0x64>
        itemDescr.filler();
    8e06:	4798      	blx	r3
      ret = S_Nv_ItemInit(((S_Nv_ItemId_t)byte_index << 3U) + bit_index, itemDescr.itemSize, itemDescr.itemData);
    8e08:	9a01      	ldr	r2, [sp, #4]
    8e0a:	466b      	mov	r3, sp
    8e0c:	8859      	ldrh	r1, [r3, #2]
    8e0e:	0020      	movs	r0, r4
    8e10:	4b28      	ldr	r3, [pc, #160]	; (8eb4 <pdsStoreItemTaskHandler+0x110>)
    8e12:	4798      	blx	r3
      assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    8e14:	23fd      	movs	r3, #253	; 0xfd
    8e16:	4218      	tst	r0, r3
    8e18:	d02b      	beq.n	8e72 <pdsStoreItemTaskHandler+0xce>
    8e1a:	4b27      	ldr	r3, [pc, #156]	; (8eb8 <pdsStoreItemTaskHandler+0x114>)
    8e1c:	4a27      	ldr	r2, [pc, #156]	; (8ebc <pdsStoreItemTaskHandler+0x118>)
    8e1e:	21ea      	movs	r1, #234	; 0xea
    8e20:	4827      	ldr	r0, [pc, #156]	; (8ec0 <pdsStoreItemTaskHandler+0x11c>)
    8e22:	4c28      	ldr	r4, [pc, #160]	; (8ec4 <pdsStoreItemTaskHandler+0x120>)
    8e24:	47a0      	blx	r4
        itemsToStore[byte_index] &= ~(1U << bit_index);
    8e26:	2201      	movs	r2, #1
    8e28:	40b2      	lsls	r2, r6
    8e2a:	4397      	bics	r7, r2
    8e2c:	4a1e      	ldr	r2, [pc, #120]	; (8ea8 <pdsStoreItemTaskHandler+0x104>)
    8e2e:	7017      	strb	r7, [r2, #0]
        i_found = byte_index;
    8e30:	2100      	movs	r1, #0
    8e32:	4a25      	ldr	r2, [pc, #148]	; (8ec8 <pdsStoreItemTaskHandler+0x124>)
    8e34:	7011      	strb	r1, [r2, #0]
        j_found = bit_index;
    8e36:	4a1b      	ldr	r2, [pc, #108]	; (8ea4 <pdsStoreItemTaskHandler+0x100>)
    8e38:	7013      	strb	r3, [r2, #0]
    byte_index %= PDS_ITEM_MASK_SIZE;
    8e3a:	2400      	movs	r4, #0
    8e3c:	e7d3      	b.n	8de6 <pdsStoreItemTaskHandler+0x42>
  if (pdsGetItemDescr(id, &itemDescr))
    8e3e:	4669      	mov	r1, sp
    8e40:	0020      	movs	r0, r4
    8e42:	4b1b      	ldr	r3, [pc, #108]	; (8eb0 <pdsStoreItemTaskHandler+0x10c>)
    8e44:	4798      	blx	r3
    8e46:	2800      	cmp	r0, #0
    8e48:	d013      	beq.n	8e72 <pdsStoreItemTaskHandler+0xce>
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    8e4a:	466b      	mov	r3, sp
    8e4c:	885b      	ldrh	r3, [r3, #2]
    8e4e:	2b00      	cmp	r3, #0
    8e50:	d015      	beq.n	8e7e <pdsStoreItemTaskHandler+0xda>
    8e52:	9b01      	ldr	r3, [sp, #4]
    8e54:	2b00      	cmp	r3, #0
    8e56:	d012      	beq.n	8e7e <pdsStoreItemTaskHandler+0xda>
    if (itemDescr.filler)
    8e58:	9b02      	ldr	r3, [sp, #8]
    8e5a:	2b00      	cmp	r3, #0
    8e5c:	d000      	beq.n	8e60 <pdsStoreItemTaskHandler+0xbc>
      itemDescr.filler();
    8e5e:	4798      	blx	r3
      ret = S_Nv_Write(id, 0U, itemDescr.itemSize, itemDescr.itemData);
    8e60:	9b01      	ldr	r3, [sp, #4]
    8e62:	466a      	mov	r2, sp
    8e64:	8852      	ldrh	r2, [r2, #2]
    8e66:	2100      	movs	r1, #0
    8e68:	0020      	movs	r0, r4
    8e6a:	4c18      	ldr	r4, [pc, #96]	; (8ecc <pdsStoreItemTaskHandler+0x128>)
    8e6c:	47a0      	blx	r4
      assert(ret == S_Nv_ReturnValue_Ok);
    8e6e:	2800      	cmp	r0, #0
    8e70:	d10c      	bne.n	8e8c <pdsStoreItemTaskHandler+0xe8>
    if (itemsToStore[i])
    8e72:	4b0d      	ldr	r3, [pc, #52]	; (8ea8 <pdsStoreItemTaskHandler+0x104>)
    8e74:	781b      	ldrb	r3, [r3, #0]
    8e76:	2b00      	cmp	r3, #0
    8e78:	d10f      	bne.n	8e9a <pdsStoreItemTaskHandler+0xf6>
}
    8e7a:	b005      	add	sp, #20
    8e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    8e7e:	4b14      	ldr	r3, [pc, #80]	; (8ed0 <pdsStoreItemTaskHandler+0x12c>)
    8e80:	4a14      	ldr	r2, [pc, #80]	; (8ed4 <pdsStoreItemTaskHandler+0x130>)
    8e82:	2134      	movs	r1, #52	; 0x34
    8e84:	31ff      	adds	r1, #255	; 0xff
    8e86:	480e      	ldr	r0, [pc, #56]	; (8ec0 <pdsStoreItemTaskHandler+0x11c>)
    8e88:	4c0e      	ldr	r4, [pc, #56]	; (8ec4 <pdsStoreItemTaskHandler+0x120>)
    8e8a:	47a0      	blx	r4
      assert(ret == S_Nv_ReturnValue_Ok);
    8e8c:	4b12      	ldr	r3, [pc, #72]	; (8ed8 <pdsStoreItemTaskHandler+0x134>)
    8e8e:	4a11      	ldr	r2, [pc, #68]	; (8ed4 <pdsStoreItemTaskHandler+0x130>)
    8e90:	2142      	movs	r1, #66	; 0x42
    8e92:	31ff      	adds	r1, #255	; 0xff
    8e94:	480a      	ldr	r0, [pc, #40]	; (8ec0 <pdsStoreItemTaskHandler+0x11c>)
    8e96:	4c0b      	ldr	r4, [pc, #44]	; (8ec4 <pdsStoreItemTaskHandler+0x120>)
    8e98:	47a0      	blx	r4
      pdsPostTask(PDS_STORE_ITEM_TASK_ID);
    8e9a:	2000      	movs	r0, #0
    8e9c:	4b0f      	ldr	r3, [pc, #60]	; (8edc <pdsStoreItemTaskHandler+0x138>)
    8e9e:	4798      	blx	r3
}
    8ea0:	e7eb      	b.n	8e7a <pdsStoreItemTaskHandler+0xd6>
    8ea2:	46c0      	nop			; (mov r8, r8)
    8ea4:	20000271 	.word	0x20000271
    8ea8:	20000270 	.word	0x20000270
    8eac:	00008cd1 	.word	0x00008cd1
    8eb0:	00008f35 	.word	0x00008f35
    8eb4:	00008bc1 	.word	0x00008bc1
    8eb8:	00017f2c 	.word	0x00017f2c
    8ebc:	00017f74 	.word	0x00017f74
    8ec0:	00017edc 	.word	0x00017edc
    8ec4:	000160f5 	.word	0x000160f5
    8ec8:	2000026c 	.word	0x2000026c
    8ecc:	000089bd 	.word	0x000089bd
    8ed0:	00017ea0 	.word	0x00017ea0
    8ed4:	00017f8c 	.word	0x00017f8c
    8ed8:	00017f9c 	.word	0x00017f9c
    8edc:	00008ee1 	.word	0x00008ee1

00008ee0 <pdsPostTask>:
\param[in] taskId - id of a task
******************************************************************************/

void pdsPostTask(PdsTaskId_t taskId)
{
  pendingTasks |= (1U << taskId);
    8ee0:	4a03      	ldr	r2, [pc, #12]	; (8ef0 <pdsPostTask+0x10>)
    8ee2:	2301      	movs	r3, #1
    8ee4:	4083      	lsls	r3, r0
    8ee6:	7811      	ldrb	r1, [r2, #0]
    8ee8:	430b      	orrs	r3, r1
    8eea:	7013      	strb	r3, [r2, #0]
//  SYS_PostTask(PDS_TASK_ID);
}
    8eec:	4770      	bx	lr
    8eee:	46c0      	nop			; (mov r8, r8)
    8ef0:	20000272 	.word	0x20000272

00008ef4 <PDS_TaskHandler>:

/******************************************************************************
\brief General PDS task handler
******************************************************************************/
void PDS_TaskHandler(void)
{
    8ef4:	b570      	push	{r4, r5, r6, lr}
  if (pendingTasks)
    8ef6:	4b0d      	ldr	r3, [pc, #52]	; (8f2c <PDS_TaskHandler+0x38>)
    8ef8:	781d      	ldrb	r5, [r3, #0]
    8efa:	2d00      	cmp	r5, #0
    8efc:	d012      	beq.n	8f24 <PDS_TaskHandler+0x30>
  {
    uint8_t taskId = 0U;

    while (!(pendingTasks & (1U << taskId)))
    8efe:	0028      	movs	r0, r5
    8f00:	07eb      	lsls	r3, r5, #31
    8f02:	d410      	bmi.n	8f26 <PDS_TaskHandler+0x32>
    8f04:	2300      	movs	r3, #0
    8f06:	2401      	movs	r4, #1
      taskId++;
    8f08:	3301      	adds	r3, #1
    8f0a:	b2db      	uxtb	r3, r3
    while (!(pendingTasks & (1U << taskId)))
    8f0c:	0019      	movs	r1, r3
    8f0e:	0002      	movs	r2, r0
    8f10:	40da      	lsrs	r2, r3
    8f12:	4214      	tst	r4, r2
    8f14:	d0f8      	beq.n	8f08 <PDS_TaskHandler+0x14>

    pendingTasks ^= (1U << taskId);
    8f16:	2301      	movs	r3, #1
    8f18:	408b      	lsls	r3, r1
    8f1a:	405d      	eors	r5, r3
    8f1c:	4b03      	ldr	r3, [pc, #12]	; (8f2c <PDS_TaskHandler+0x38>)
    8f1e:	701d      	strb	r5, [r3, #0]
    pdsTaskHandlers[taskId]();
    8f20:	4b03      	ldr	r3, [pc, #12]	; (8f30 <PDS_TaskHandler+0x3c>)
    8f22:	4798      	blx	r3
   
  }
}
    8f24:	bd70      	pop	{r4, r5, r6, pc}
    while (!(pendingTasks & (1U << taskId)))
    8f26:	2100      	movs	r1, #0
    8f28:	e7f5      	b.n	8f16 <PDS_TaskHandler+0x22>
    8f2a:	46c0      	nop			; (mov r8, r8)
    8f2c:	20000272 	.word	0x20000272
    8f30:	00008da5 	.word	0x00008da5

00008f34 <pdsGetItemDescr>:
\param[in] itemDescrToGet    - pointer to item descriptor to be loaded;

returns true if descriptor is found out for the given item ID, false - otherwise
******************************************************************************/
bool pdsGetItemDescr(S_Nv_ItemId_t itemId, ItemIdToMemoryMapping_t *itemDescrToGet )
{
    8f34:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f36:	b087      	sub	sp, #28
    8f38:	9101      	str	r1, [sp, #4]
  /* Calculate raw data size */
  for (uint8_t fileIdx = 0; fileIdx < PDS_ITEM_AMOUNT; fileIdx++)
  {
    ItemIdToMemoryMapping_t itemDescr;

    memcpy(&itemDescr, (void const *)itemDescrPtr, sizeof(ItemIdToMemoryMapping_t));
    8f3a:	aa02      	add	r2, sp, #8
    8f3c:	4b10      	ldr	r3, [pc, #64]	; (8f80 <pdsGetItemDescr+0x4c>)
    8f3e:	0011      	movs	r1, r2
    8f40:	cb70      	ldmia	r3!, {r4, r5, r6}
    8f42:	c170      	stmia	r1!, {r4, r5, r6}
    8f44:	681b      	ldr	r3, [r3, #0]
    8f46:	600b      	str	r3, [r1, #0]

    if(itemDescr.itemId == itemId)
    8f48:	8813      	ldrh	r3, [r2, #0]
    8f4a:	4283      	cmp	r3, r0
    8f4c:	d011      	beq.n	8f72 <pdsGetItemDescr+0x3e>
    {
      memcpy(itemDescrToGet, &itemDescr, sizeof(ItemIdToMemoryMapping_t));
      return true;
    }
    itemDescrPtr++;
    8f4e:	4b0d      	ldr	r3, [pc, #52]	; (8f84 <pdsGetItemDescr+0x50>)
    memcpy(&itemDescr, (void const *)itemDescrPtr, sizeof(ItemIdToMemoryMapping_t));
    8f50:	aa02      	add	r2, sp, #8
    8f52:	0011      	movs	r1, r2
    8f54:	001c      	movs	r4, r3
    8f56:	cce0      	ldmia	r4!, {r5, r6, r7}
    8f58:	c1e0      	stmia	r1!, {r5, r6, r7}
    8f5a:	6824      	ldr	r4, [r4, #0]
    8f5c:	600c      	str	r4, [r1, #0]
    if(itemDescr.itemId == itemId)
    8f5e:	8811      	ldrh	r1, [r2, #0]
    8f60:	4281      	cmp	r1, r0
    8f62:	d006      	beq.n	8f72 <pdsGetItemDescr+0x3e>
    itemDescrPtr++;
    8f64:	3310      	adds	r3, #16
  for (uint8_t fileIdx = 0; fileIdx < PDS_ITEM_AMOUNT; fileIdx++)
    8f66:	4908      	ldr	r1, [pc, #32]	; (8f88 <pdsGetItemDescr+0x54>)
    8f68:	428b      	cmp	r3, r1
    8f6a:	d1f2      	bne.n	8f52 <pdsGetItemDescr+0x1e>

  }
  return false;
    8f6c:	2000      	movs	r0, #0
}
    8f6e:	b007      	add	sp, #28
    8f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
      memcpy(itemDescrToGet, &itemDescr, sizeof(ItemIdToMemoryMapping_t));
    8f72:	2210      	movs	r2, #16
    8f74:	a902      	add	r1, sp, #8
    8f76:	9801      	ldr	r0, [sp, #4]
    8f78:	4b04      	ldr	r3, [pc, #16]	; (8f8c <pdsGetItemDescr+0x58>)
    8f7a:	4798      	blx	r3
      return true;
    8f7c:	2001      	movs	r0, #1
    8f7e:	e7f6      	b.n	8f6e <pdsGetItemDescr+0x3a>
    8f80:	00004400 	.word	0x00004400
    8f84:	00004410 	.word	0x00004410
    8f88:	00004470 	.word	0x00004470
    8f8c:	000161b7 	.word	0x000161b7

00008f90 <pdsGetDirDescr>:
\param[in] dirDescrToGet    - pointer to dir descriptor to be loaded;

returns true if descriptor is found out for the given dir ID, false - otherwise
******************************************************************************/
bool pdsGetDirDescr(S_Nv_ItemId_t itemId, PDS_DirDescr_t *dirDescrToGet )
{
    8f90:	b570      	push	{r4, r5, r6, lr}
    8f92:	b082      	sub	sp, #8
    8f94:	000c      	movs	r4, r1
  /* Calculate raw data size */
  for (uint8_t fileIdx = 0; fileIdx < PDS_DIRECTORIES_AMOUNT; fileIdx++)
  {
    PDS_DirDescr_t dirDescr;

    memcpy(&dirDescr, (void const *)dirDescrPtr, sizeof(PDS_DirDescr_t));
    8f96:	466b      	mov	r3, sp
    8f98:	4a08      	ldr	r2, [pc, #32]	; (8fbc <pdsGetDirDescr+0x2c>)
    8f9a:	4669      	mov	r1, sp
    8f9c:	ca60      	ldmia	r2!, {r5, r6}
    8f9e:	c160      	stmia	r1!, {r5, r6}
    if(dirDescr.memoryId == itemId)
    8fa0:	88da      	ldrh	r2, [r3, #6]
      memcpy(dirDescrToGet, &dirDescr, sizeof(PDS_DirDescr_t));
      return true;
    }
    dirDescrPtr++;
  }
  return false;
    8fa2:	2300      	movs	r3, #0
    if(dirDescr.memoryId == itemId)
    8fa4:	4282      	cmp	r2, r0
    8fa6:	d002      	beq.n	8fae <pdsGetDirDescr+0x1e>
}
    8fa8:	0018      	movs	r0, r3
    8faa:	b002      	add	sp, #8
    8fac:	bd70      	pop	{r4, r5, r6, pc}
      memcpy(dirDescrToGet, &dirDescr, sizeof(PDS_DirDescr_t));
    8fae:	2208      	movs	r2, #8
    8fb0:	4669      	mov	r1, sp
    8fb2:	0020      	movs	r0, r4
    8fb4:	4b02      	ldr	r3, [pc, #8]	; (8fc0 <pdsGetDirDescr+0x30>)
    8fb6:	4798      	blx	r3
      return true;
    8fb8:	2301      	movs	r3, #1
    8fba:	e7f5      	b.n	8fa8 <pdsGetDirDescr+0x18>
    8fbc:	00004400 	.word	0x00004400
    8fc0:	000161b7 	.word	0x000161b7

00008fc4 <MiMAC_SetAltAddress>:
 *      None
 *
 *****************************************************************************************/

bool MiMAC_SetAltAddress( uint8_t *Address,  uint8_t *PanId)
{
    8fc4:	b510      	push	{r4, lr}
	myNetworkAddress.v[0] = Address[0];
    8fc6:	7802      	ldrb	r2, [r0, #0]
    8fc8:	4b08      	ldr	r3, [pc, #32]	; (8fec <MiMAC_SetAltAddress+0x28>)
    8fca:	701a      	strb	r2, [r3, #0]
	myNetworkAddress.v[1] = Address[1];
    8fcc:	7842      	ldrb	r2, [r0, #1]
    8fce:	705a      	strb	r2, [r3, #1]
	MAC_PANID.v[0] = PanId[0];
    8fd0:	780a      	ldrb	r2, [r1, #0]
    8fd2:	4c07      	ldr	r4, [pc, #28]	; (8ff0 <MiMAC_SetAltAddress+0x2c>)
    8fd4:	7022      	strb	r2, [r4, #0]
	MAC_PANID.v[1] = PanId[1];
    8fd6:	784a      	ldrb	r2, [r1, #1]
    8fd8:	7062      	strb	r2, [r4, #1]
	PHY_SetShortAddr(myNetworkAddress.Val);
    8fda:	8818      	ldrh	r0, [r3, #0]
    8fdc:	4b05      	ldr	r3, [pc, #20]	; (8ff4 <MiMAC_SetAltAddress+0x30>)
    8fde:	4798      	blx	r3
	PHY_SetPanId(MAC_PANID.Val);
    8fe0:	8820      	ldrh	r0, [r4, #0]
    8fe2:	4b05      	ldr	r3, [pc, #20]	; (8ff8 <MiMAC_SetAltAddress+0x34>)
    8fe4:	4798      	blx	r3
	return true;
}
    8fe6:	2001      	movs	r0, #1
    8fe8:	bd10      	pop	{r4, pc}
    8fea:	46c0      	nop			; (mov r8, r8)
    8fec:	200020d8 	.word	0x200020d8
    8ff0:	2000214c 	.word	0x2000214c
    8ff4:	0000a289 	.word	0x0000a289
    8ff8:	0000a275 	.word	0x0000a275

00008ffc <mic_generator>:

#if defined (ENABLE_SECURITY)
uint8_t addr[8] = {0xda , 0x98 , 0x22 , 0xfe , 0xff , 0xa3 , 0x04 , 0x00};
void mic_generator (uint8_t *Payloadinfo, uint8_t len , uint8_t frame_control ,  API_UINT32_UNION FrameCounter ,  uint8_t *SourceIEEEAddress)
{
    8ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
    8ffe:	46c6      	mov	lr, r8
    9000:	b500      	push	{lr}
    9002:	b0c6      	sub	sp, #280	; 0x118
    9004:	0006      	movs	r6, r0
    9006:	000c      	movs	r4, r1
    9008:	469c      	mov	ip, r3
    900a:	994c      	ldr	r1, [sp, #304]	; 0x130
	uint16_t i ;										
	uint8_t j , iterations  , copy_packet1[255] , cbc_header_with_padding[16];
	// Calculating No of blocks in the packet (1 block = 16 bytes of data)
	iterations = len/16;
    900c:	0925      	lsrs	r5, r4, #4
	if (len % 16 != 0) iterations++;
    900e:	0723      	lsls	r3, r4, #28
    9010:	d000      	beq.n	9014 <mic_generator+0x18>
    9012:	3501      	adds	r5, #1
	InitVect_in[0] = 0x49;//frame_control;
    9014:	2049      	movs	r0, #73	; 0x49
    9016:	4b40      	ldr	r3, [pc, #256]	; (9118 <mic_generator+0x11c>)
    9018:	7018      	strb	r0, [r3, #0]
	cbc_header_with_padding[0] = 0x00;  // l(a)
    901a:	2300      	movs	r3, #0
    901c:	a802      	add	r0, sp, #8
    901e:	7003      	strb	r3, [r0, #0]
	cbc_header_with_padding[1] = 0x0d;  // l(a)Header Length
    9020:	330d      	adds	r3, #13
    9022:	7043      	strb	r3, [r0, #1]
	cbc_header_with_padding[2] = frame_control;  //frame_control;  //byte 1
    9024:	7082      	strb	r2, [r0, #2]
    9026:	2200      	movs	r2, #0
	for (i=0;i<8;i++)
	{
		InitVect_in[i+1] =  SourceIEEEAddress[i];
    9028:	4b3b      	ldr	r3, [pc, #236]	; (9118 <mic_generator+0x11c>)
    902a:	5c8f      	ldrb	r7, [r1, r2]
    902c:	18d0      	adds	r0, r2, r3
    902e:	7047      	strb	r7, [r0, #1]
		cbc_header_with_padding[i+7] = SourceIEEEAddress[i];
    9030:	0010      	movs	r0, r2
    9032:	af02      	add	r7, sp, #8
    9034:	46b8      	mov	r8, r7
    9036:	4440      	add	r0, r8
    9038:	5c8f      	ldrb	r7, [r1, r2]
    903a:	71c7      	strb	r7, [r0, #7]
    903c:	3201      	adds	r2, #1
	for (i=0;i<8;i++)
    903e:	2a08      	cmp	r2, #8
    9040:	d1f3      	bne.n	902a <mic_generator+0x2e>
	}
	for (i=0;i<4;i++)
	{
		InitVect_in[i+9] = FrameCounter.v[i];
    9042:	4663      	mov	r3, ip
    9044:	466a      	mov	r2, sp
    9046:	71d3      	strb	r3, [r2, #7]
    9048:	79d3      	ldrb	r3, [r2, #7]
    904a:	4833      	ldr	r0, [pc, #204]	; (9118 <mic_generator+0x11c>)
    904c:	7243      	strb	r3, [r0, #9]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    904e:	4642      	mov	r2, r8
    9050:	70d3      	strb	r3, [r2, #3]
		InitVect_in[i+9] = FrameCounter.v[i];
    9052:	4663      	mov	r3, ip
    9054:	041b      	lsls	r3, r3, #16
    9056:	0e1b      	lsrs	r3, r3, #24
    9058:	7283      	strb	r3, [r0, #10]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    905a:	7113      	strb	r3, [r2, #4]
		InitVect_in[i+9] = FrameCounter.v[i];
    905c:	4663      	mov	r3, ip
    905e:	021b      	lsls	r3, r3, #8
    9060:	0e1b      	lsrs	r3, r3, #24
    9062:	72c3      	strb	r3, [r0, #11]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    9064:	7153      	strb	r3, [r2, #5]
		InitVect_in[i+9] = FrameCounter.v[i];
    9066:	4663      	mov	r3, ip
    9068:	0e1b      	lsrs	r3, r3, #24
    906a:	7303      	strb	r3, [r0, #12]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    906c:	7193      	strb	r3, [r2, #6]
	}
	//cbc_header_with_padding[14] = 0x00;  // Padding
	cbc_header_with_padding[15] = 0x00;   // Padding
    906e:	2300      	movs	r3, #0
    9070:	73d3      	strb	r3, [r2, #15]
	InitVect_in[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
    9072:	2204      	movs	r2, #4
    9074:	7342      	strb	r2, [r0, #13]
	InitVect_in[14] = 0x00; // 15 th byte padded to zero
    9076:	7383      	strb	r3, [r0, #14]
	InitVect_in[15] = len; // For MIC calculation All preceding blocks will be incremented by 1
    9078:	73c4      	strb	r4, [r0, #15]
	PHY_EncryptReq(&InitVect_in[0], (uint8_t *)mySecurityKey);
    907a:	4928      	ldr	r1, [pc, #160]	; (911c <mic_generator+0x120>)
    907c:	4b28      	ldr	r3, [pc, #160]	; (9120 <mic_generator+0x124>)
    907e:	4798      	blx	r3
    9080:	2300      	movs	r3, #0
	for (i=0;i<16;i++)
	{
		copy_packet1[i] = cbc_header_with_padding[i];
    9082:	a906      	add	r1, sp, #24
    9084:	aa02      	add	r2, sp, #8
    9086:	5c9a      	ldrb	r2, [r3, r2]
    9088:	545a      	strb	r2, [r3, r1]
    908a:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    908c:	2b10      	cmp	r3, #16
    908e:	d1f9      	bne.n	9084 <mic_generator+0x88>
	}
	// Copy the Payload and Do the padding
	for (i=16;i<len+16;i++)
    9090:	0027      	movs	r7, r4
    9092:	3710      	adds	r7, #16
    9094:	2f10      	cmp	r7, #16
    9096:	dd0a      	ble.n	90ae <mic_generator+0xb2>
    9098:	2010      	movs	r0, #16
	{
		copy_packet1[i]	= Payloadinfo[i-16];  // Copying the Payload
    909a:	a906      	add	r1, sp, #24
    909c:	18f2      	adds	r2, r6, r3
    909e:	3a10      	subs	r2, #16
    90a0:	7812      	ldrb	r2, [r2, #0]
    90a2:	540a      	strb	r2, [r1, r0]
	for (i=16;i<len+16;i++)
    90a4:	3301      	adds	r3, #1
    90a6:	b29b      	uxth	r3, r3
    90a8:	0018      	movs	r0, r3
    90aa:	42bb      	cmp	r3, r7
    90ac:	dbf6      	blt.n	909c <mic_generator+0xa0>
	}
	for (i=len+16;i<(iterations *16) + 16 ; i++ )
    90ae:	0023      	movs	r3, r4
    90b0:	3310      	adds	r3, #16
    90b2:	001a      	movs	r2, r3
    90b4:	3501      	adds	r5, #1
    90b6:	0129      	lsls	r1, r5, #4
    90b8:	428b      	cmp	r3, r1
    90ba:	da07      	bge.n	90cc <mic_generator+0xd0>
	{
		copy_packet1[i] = 0; // Padding
    90bc:	ac06      	add	r4, sp, #24
    90be:	2000      	movs	r0, #0
    90c0:	54a0      	strb	r0, [r4, r2]
	for (i=len+16;i<(iterations *16) + 16 ; i++ )
    90c2:	3301      	adds	r3, #1
    90c4:	b29b      	uxth	r3, r3
    90c6:	001a      	movs	r2, r3
    90c8:	428b      	cmp	r3, r1
    90ca:	dbf9      	blt.n	90c0 <mic_generator+0xc4>
	}
	for (i=0;i<iterations+1;i++)
    90cc:	2200      	movs	r2, #0
    90ce:	2700      	movs	r7, #0
    90d0:	2d00      	cmp	r5, #0
    90d2:	dd15      	ble.n	9100 <mic_generator+0x104>
	{
		for (j=0;j<16;j++)
		{
			InitVect_in[j]	= InitVect_in[j] ^ copy_packet1[j+(i*16)];
    90d4:	4e10      	ldr	r6, [pc, #64]	; (9118 <mic_generator+0x11c>)
    90d6:	0112      	lsls	r2, r2, #4
    90d8:	2300      	movs	r3, #0
    90da:	a906      	add	r1, sp, #24
    90dc:	188c      	adds	r4, r1, r2
    90de:	1999      	adds	r1, r3, r6
    90e0:	5ce2      	ldrb	r2, [r4, r3]
    90e2:	7808      	ldrb	r0, [r1, #0]
    90e4:	4042      	eors	r2, r0
    90e6:	700a      	strb	r2, [r1, #0]
    90e8:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    90ea:	2b10      	cmp	r3, #16
    90ec:	d1f7      	bne.n	90de <mic_generator+0xe2>
		}
		PHY_EncryptReq(&InitVect_in[0], (uint8_t *)mySecurityKey);
    90ee:	490b      	ldr	r1, [pc, #44]	; (911c <mic_generator+0x120>)
    90f0:	4809      	ldr	r0, [pc, #36]	; (9118 <mic_generator+0x11c>)
    90f2:	4b0b      	ldr	r3, [pc, #44]	; (9120 <mic_generator+0x124>)
    90f4:	4798      	blx	r3
	for (i=0;i<iterations+1;i++)
    90f6:	3701      	adds	r7, #1
    90f8:	b2bf      	uxth	r7, r7
    90fa:	003a      	movs	r2, r7
    90fc:	42af      	cmp	r7, r5
    90fe:	dbea      	blt.n	90d6 <mic_generator+0xda>
    9100:	2300      	movs	r3, #0
	}
	for (i=0;i<16;i++)
	{
		CBC_mic[i] = InitVect_in[i];
    9102:	4808      	ldr	r0, [pc, #32]	; (9124 <mic_generator+0x128>)
    9104:	4904      	ldr	r1, [pc, #16]	; (9118 <mic_generator+0x11c>)
    9106:	5cca      	ldrb	r2, [r1, r3]
    9108:	54c2      	strb	r2, [r0, r3]
    910a:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    910c:	2b10      	cmp	r3, #16
    910e:	d1fa      	bne.n	9106 <mic_generator+0x10a>
	}

}
    9110:	b046      	add	sp, #280	; 0x118
    9112:	bc04      	pop	{r2}
    9114:	4690      	mov	r8, r2
    9116:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9118:	200020e8 	.word	0x200020e8
    911c:	00017fb8 	.word	0x00017fb8
    9120:	0000a401 	.word	0x0000a401
    9124:	2000212c 	.word	0x2000212c

00009128 <DataEncrypt>:
 *
 *****************************************************************************************/

bool DataEncrypt(uint8_t *Payloadinfo, uint8_t *Payload_len, API_UINT32_UNION FrameCounter,
uint8_t FrameControl)
{
    9128:	b5f0      	push	{r4, r5, r6, r7, lr}
    912a:	46de      	mov	lr, fp
    912c:	4657      	mov	r7, sl
    912e:	464e      	mov	r6, r9
    9130:	4645      	mov	r5, r8
    9132:	b5e0      	push	{r5, r6, r7, lr}
    9134:	b08d      	sub	sp, #52	; 0x34
    9136:	4680      	mov	r8, r0
    9138:	000e      	movs	r6, r1
    913a:	0014      	movs	r4, r2
    913c:	001a      	movs	r2, r3
	uint16_t i ;
	uint8_t iterations , block[16] , j , CTR_Nonce_and_Counter[16];
	// Calculating No of blocks in the packet (1 block = 16 bytes of data)
	iterations = *Payload_len/16;
    913e:	7809      	ldrb	r1, [r1, #0]
    9140:	090d      	lsrs	r5, r1, #4
	if (*Payload_len % 16 != 0) iterations++;
    9142:	070b      	lsls	r3, r1, #28
    9144:	d000      	beq.n	9148 <DataEncrypt+0x20>
    9146:	3501      	adds	r5, #1

	mic_generator(&Payloadinfo[0] , *Payload_len, FrameControl  , FrameCounter ,  MACInitParams.PAddress);
    9148:	4b37      	ldr	r3, [pc, #220]	; (9228 <DataEncrypt+0x100>)
    914a:	685b      	ldr	r3, [r3, #4]
    914c:	9300      	str	r3, [sp, #0]
    914e:	0023      	movs	r3, r4
    9150:	4640      	mov	r0, r8
    9152:	4f36      	ldr	r7, [pc, #216]	; (922c <DataEncrypt+0x104>)
    9154:	47b8      	blx	r7

	for (i=*Payload_len;i<iterations *16 ; i++ )
    9156:	7831      	ldrb	r1, [r6, #0]
    9158:	b28b      	uxth	r3, r1
    915a:	002e      	movs	r6, r5
    915c:	012d      	lsls	r5, r5, #4
    915e:	42a9      	cmp	r1, r5
    9160:	da07      	bge.n	9172 <DataEncrypt+0x4a>
	{
		Payloadinfo[i] = 0; // Padding
    9162:	2100      	movs	r1, #0
    9164:	4642      	mov	r2, r8
    9166:	54d1      	strb	r1, [r2, r3]
	for (i=*Payload_len;i<iterations *16 ; i++ )
    9168:	3301      	adds	r3, #1
    916a:	b29b      	uxth	r3, r3
    916c:	42ab      	cmp	r3, r5
    916e:	dbfa      	blt.n	9166 <DataEncrypt+0x3e>
    9170:	4690      	mov	r8, r2
	}
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    9172:	2201      	movs	r2, #1
    9174:	ab04      	add	r3, sp, #16
    9176:	701a      	strb	r2, [r3, #0]
	for (i=0;i<8;i++)
	{
		CTR_Nonce_and_Counter[i+1] = MACInitParams.PAddress[i];
    9178:	4b2b      	ldr	r3, [pc, #172]	; (9228 <DataEncrypt+0x100>)
    917a:	6858      	ldr	r0, [r3, #4]
    917c:	2300      	movs	r3, #0
    917e:	aa04      	add	r2, sp, #16
    9180:	18d2      	adds	r2, r2, r3
    9182:	5cc1      	ldrb	r1, [r0, r3]
    9184:	7051      	strb	r1, [r2, #1]
    9186:	3301      	adds	r3, #1
	for (i=0;i<8;i++)
    9188:	2b08      	cmp	r3, #8
    918a:	d1f8      	bne.n	917e <DataEncrypt+0x56>
	}
	for (i=0;i<4;i++)
	{
		CTR_Nonce_and_Counter[i+9] = FrameCounter.v[i];
    918c:	ab04      	add	r3, sp, #16
    918e:	725c      	strb	r4, [r3, #9]
    9190:	0a22      	lsrs	r2, r4, #8
    9192:	729a      	strb	r2, [r3, #10]
    9194:	0c22      	lsrs	r2, r4, #16
    9196:	72da      	strb	r2, [r3, #11]
    9198:	0e24      	lsrs	r4, r4, #24
    919a:	731c      	strb	r4, [r3, #12]
	}
	CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
    919c:	2204      	movs	r2, #4
    919e:	735a      	strb	r2, [r3, #13]
	CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
    91a0:	2200      	movs	r2, #0
    91a2:	739a      	strb	r2, [r3, #14]
	CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1
    91a4:	73da      	strb	r2, [r3, #15]

	for (i=0;i<iterations+1;i++)
    91a6:	1c73      	adds	r3, r6, #1
    91a8:	4699      	mov	r9, r3
    91aa:	2300      	movs	r3, #0
    91ac:	469b      	mov	fp, r3
    91ae:	9303      	str	r3, [sp, #12]
    91b0:	464b      	mov	r3, r9
    91b2:	2b00      	cmp	r3, #0
    91b4:	dd2f      	ble.n	9216 <DataEncrypt+0xee>
	{
		for (j=0;j<16;j++)
		{
			block[j] = CTR_Nonce_and_Counter[j];
    91b6:	ac08      	add	r4, sp, #32
    91b8:	ad04      	add	r5, sp, #16
		}
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    91ba:	4b1d      	ldr	r3, [pc, #116]	; (9230 <DataEncrypt+0x108>)
    91bc:	469a      	mov	sl, r3
		for (j=0;j<16;j++)
		{
			if (CTR_Nonce_and_Counter[15] == 0)
			{
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    91be:	4e1d      	ldr	r6, [pc, #116]	; (9234 <DataEncrypt+0x10c>)
    91c0:	e017      	b.n	91f2 <DataEncrypt+0xca>
			}
			else
			{
				Payloadinfo[j+(i-1)*16] = block[j] ^ Payloadinfo[j+(i-1)*16];
    91c2:	5d1a      	ldrb	r2, [r3, r4]
    91c4:	5ccf      	ldrb	r7, [r1, r3]
    91c6:	407a      	eors	r2, r7
    91c8:	54ca      	strb	r2, [r1, r3]
    91ca:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    91cc:	2b10      	cmp	r3, #16
    91ce:	d007      	beq.n	91e0 <DataEncrypt+0xb8>
			if (CTR_Nonce_and_Counter[15] == 0)
    91d0:	2800      	cmp	r0, #0
    91d2:	d1f6      	bne.n	91c2 <DataEncrypt+0x9a>
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    91d4:	5d1a      	ldrb	r2, [r3, r4]
    91d6:	4667      	mov	r7, ip
    91d8:	5cff      	ldrb	r7, [r7, r3]
    91da:	407a      	eors	r2, r7
    91dc:	54f2      	strb	r2, [r6, r3]
    91de:	e7f4      	b.n	91ca <DataEncrypt+0xa2>
			}
		}
		CTR_Nonce_and_Counter[15]++; // Increment Counter for next operation
    91e0:	3001      	adds	r0, #1
    91e2:	73e8      	strb	r0, [r5, #15]
	for (i=0;i<iterations+1;i++)
    91e4:	9f03      	ldr	r7, [sp, #12]
    91e6:	3701      	adds	r7, #1
    91e8:	b2bb      	uxth	r3, r7
    91ea:	9303      	str	r3, [sp, #12]
    91ec:	469b      	mov	fp, r3
    91ee:	454b      	cmp	r3, r9
    91f0:	da11      	bge.n	9216 <DataEncrypt+0xee>
		CTR_Nonce_and_Counter[i+1] = MACInitParams.PAddress[i];
    91f2:	2300      	movs	r3, #0
			block[j] = CTR_Nonce_and_Counter[j];
    91f4:	5d5a      	ldrb	r2, [r3, r5]
    91f6:	551a      	strb	r2, [r3, r4]
    91f8:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    91fa:	2b10      	cmp	r3, #16
    91fc:	d1fa      	bne.n	91f4 <DataEncrypt+0xcc>
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    91fe:	490e      	ldr	r1, [pc, #56]	; (9238 <DataEncrypt+0x110>)
    9200:	0020      	movs	r0, r4
    9202:	47d0      	blx	sl
			if (CTR_Nonce_and_Counter[15] == 0)
    9204:	7be8      	ldrb	r0, [r5, #15]
				Payloadinfo[j+(i-1)*16] = block[j] ^ Payloadinfo[j+(i-1)*16];
    9206:	4659      	mov	r1, fp
    9208:	3901      	subs	r1, #1
    920a:	0109      	lsls	r1, r1, #4
    920c:	2300      	movs	r3, #0
    920e:	4441      	add	r1, r8
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    9210:	4a0a      	ldr	r2, [pc, #40]	; (923c <DataEncrypt+0x114>)
    9212:	4694      	mov	ip, r2
    9214:	e7dc      	b.n	91d0 <DataEncrypt+0xa8>
	}
	return true;

}
    9216:	2001      	movs	r0, #1
    9218:	b00d      	add	sp, #52	; 0x34
    921a:	bc3c      	pop	{r2, r3, r4, r5}
    921c:	4690      	mov	r8, r2
    921e:	4699      	mov	r9, r3
    9220:	46a2      	mov	sl, r4
    9222:	46ab      	mov	fp, r5
    9224:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9226:	46c0      	nop			; (mov r8, r8)
    9228:	200020e0 	.word	0x200020e0
    922c:	00008ffd 	.word	0x00008ffd
    9230:	0000a401 	.word	0x0000a401
    9234:	20002114 	.word	0x20002114
    9238:	00017fb8 	.word	0x00017fb8
    923c:	2000212c 	.word	0x2000212c

00009240 <validate_mic>:
// Validates the Received mic with the mic computed from data packet decryption.
bool validate_mic(void)
{
	/*************************************************************/
	//SECURITY PATCH UPDATE
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3])
    9240:	4b0e      	ldr	r3, [pc, #56]	; (927c <validate_mic+0x3c>)
    9242:	781a      	ldrb	r2, [r3, #0]
    9244:	4b0e      	ldr	r3, [pc, #56]	; (9280 <validate_mic+0x40>)
    9246:	781b      	ldrb	r3, [r3, #0]
	/*************************************************************/
	{
		return false;
    9248:	2000      	movs	r0, #0
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3])
    924a:	429a      	cmp	r2, r3
    924c:	d000      	beq.n	9250 <validate_mic+0x10>
	}
	else
	{
		return true;
	}
}
    924e:	4770      	bx	lr
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3])
    9250:	4b0a      	ldr	r3, [pc, #40]	; (927c <validate_mic+0x3c>)
    9252:	785a      	ldrb	r2, [r3, #1]
    9254:	4b0a      	ldr	r3, [pc, #40]	; (9280 <validate_mic+0x40>)
    9256:	785b      	ldrb	r3, [r3, #1]
    9258:	429a      	cmp	r2, r3
    925a:	d1f8      	bne.n	924e <validate_mic+0xe>
    925c:	4b07      	ldr	r3, [pc, #28]	; (927c <validate_mic+0x3c>)
    925e:	789a      	ldrb	r2, [r3, #2]
    9260:	4b07      	ldr	r3, [pc, #28]	; (9280 <validate_mic+0x40>)
    9262:	789b      	ldrb	r3, [r3, #2]
    9264:	429a      	cmp	r2, r3
    9266:	d1f2      	bne.n	924e <validate_mic+0xe>
    9268:	4b04      	ldr	r3, [pc, #16]	; (927c <validate_mic+0x3c>)
    926a:	78d8      	ldrb	r0, [r3, #3]
    926c:	4b04      	ldr	r3, [pc, #16]	; (9280 <validate_mic+0x40>)
    926e:	78db      	ldrb	r3, [r3, #3]
    9270:	1ac0      	subs	r0, r0, r3
    9272:	4243      	negs	r3, r0
    9274:	4158      	adcs	r0, r3
    9276:	b2c0      	uxtb	r0, r0
    9278:	e7e9      	b.n	924e <validate_mic+0xe>
    927a:	46c0      	nop			; (mov r8, r8)
    927c:	20002114 	.word	0x20002114
    9280:	2000213c 	.word	0x2000213c

00009284 <DataDecrypt>:
 *      None
 *
 *****************************************************************************************/
bool DataDecrypt(uint8_t *Payload, uint8_t *PayloadLen, uint8_t *SourceIEEEAddress,
API_UINT32_UNION FrameCounter, uint8_t FrameControl)
{
    9284:	b5f0      	push	{r4, r5, r6, r7, lr}
    9286:	46de      	mov	lr, fp
    9288:	4657      	mov	r7, sl
    928a:	464e      	mov	r6, r9
    928c:	4645      	mov	r5, r8
    928e:	b5e0      	push	{r5, r6, r7, lr}
    9290:	b091      	sub	sp, #68	; 0x44
    9292:	4681      	mov	r9, r0
    9294:	9106      	str	r1, [sp, #24]
    9296:	9204      	str	r2, [sp, #16]
    9298:	9305      	str	r3, [sp, #20]
    929a:	ab1a      	add	r3, sp, #104	; 0x68
    929c:	781b      	ldrb	r3, [r3, #0]
    929e:	9307      	str	r3, [sp, #28]
	uint16_t i ;
	uint8_t iterations , block[16] , j , CTR_Nonce_and_Counter[16];
	// Calculating No of blocks in the packet (1 block = 16 bytes of data)
	iterations = *PayloadLen/16;
    92a0:	7809      	ldrb	r1, [r1, #0]
    92a2:	090a      	lsrs	r2, r1, #4
	if (*PayloadLen % 16 != 0) iterations++;
    92a4:	070b      	lsls	r3, r1, #28
    92a6:	d000      	beq.n	92aa <DataDecrypt+0x26>
    92a8:	3201      	adds	r2, #1

	//mic_generator(&Payloadinfo[0] , *Payload_len);

	for (i=*PayloadLen;i<iterations *16 ; i++ )
    92aa:	b28b      	uxth	r3, r1
    92ac:	0010      	movs	r0, r2
    92ae:	0112      	lsls	r2, r2, #4
    92b0:	4291      	cmp	r1, r2
    92b2:	da07      	bge.n	92c4 <DataDecrypt+0x40>
	{
		Payload[i] = 0; // Padding
    92b4:	2100      	movs	r1, #0
    92b6:	464c      	mov	r4, r9
    92b8:	54e1      	strb	r1, [r4, r3]
	for (i=*PayloadLen;i<iterations *16 ; i++ )
    92ba:	3301      	adds	r3, #1
    92bc:	b29b      	uxth	r3, r3
    92be:	4293      	cmp	r3, r2
    92c0:	dbfa      	blt.n	92b8 <DataDecrypt+0x34>
    92c2:	46a1      	mov	r9, r4
	}
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    92c4:	2201      	movs	r2, #1
    92c6:	ab08      	add	r3, sp, #32
    92c8:	701a      	strb	r2, [r3, #0]
    92ca:	2300      	movs	r3, #0
	for (i=0;i<8;i++)
	{
		CTR_Nonce_and_Counter[i+1] = SourceIEEEAddress[i];
    92cc:	9c04      	ldr	r4, [sp, #16]
    92ce:	aa08      	add	r2, sp, #32
    92d0:	18d2      	adds	r2, r2, r3
    92d2:	5ce1      	ldrb	r1, [r4, r3]
    92d4:	7051      	strb	r1, [r2, #1]
    92d6:	3301      	adds	r3, #1
	for (i=0;i<8;i++)
    92d8:	2b08      	cmp	r3, #8
    92da:	d1f8      	bne.n	92ce <DataDecrypt+0x4a>
	}
	for (i=0;i<4;i++)
	{
		CTR_Nonce_and_Counter[i+9] = FrameCounter.v[i];
    92dc:	ab08      	add	r3, sp, #32
    92de:	9905      	ldr	r1, [sp, #20]
    92e0:	7259      	strb	r1, [r3, #9]
    92e2:	0a0a      	lsrs	r2, r1, #8
    92e4:	729a      	strb	r2, [r3, #10]
    92e6:	0c0a      	lsrs	r2, r1, #16
    92e8:	72da      	strb	r2, [r3, #11]
    92ea:	0e0a      	lsrs	r2, r1, #24
    92ec:	731a      	strb	r2, [r3, #12]
	}
	CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode
    92ee:	2204      	movs	r2, #4
    92f0:	735a      	strb	r2, [r3, #13]
	CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
    92f2:	2200      	movs	r2, #0
    92f4:	739a      	strb	r2, [r3, #14]
	CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1
    92f6:	73da      	strb	r2, [r3, #15]


	for (i=0;i<iterations+1;i++)
    92f8:	1c43      	adds	r3, r0, #1
    92fa:	469a      	mov	sl, r3
    92fc:	2500      	movs	r5, #0
    92fe:	2300      	movs	r3, #0
    9300:	4698      	mov	r8, r3
    9302:	4653      	mov	r3, sl
    9304:	2b00      	cmp	r3, #0
    9306:	dd2e      	ble.n	9366 <DataDecrypt+0xe2>
	{
		for (j=0;j<16;j++)
		{
			block[j] = CTR_Nonce_and_Counter[j];
    9308:	ac0c      	add	r4, sp, #48	; 0x30
    930a:	ae08      	add	r6, sp, #32
		}
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    930c:	4b26      	ldr	r3, [pc, #152]	; (93a8 <DataDecrypt+0x124>)
    930e:	469b      	mov	fp, r3
		for (j=0;j<16;j++)
		{
			if (CTR_Nonce_and_Counter[15] == 0)
			{
				CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    9310:	4f26      	ldr	r7, [pc, #152]	; (93ac <DataDecrypt+0x128>)
    9312:	4643      	mov	r3, r8
    9314:	9303      	str	r3, [sp, #12]
    9316:	46a8      	mov	r8, r5
    9318:	e014      	b.n	9344 <DataDecrypt+0xc0>
			}
			else
			{
				Payload[j+(i-1)*16] = block[j] ^ Payload[j+(i-1)*16];
    931a:	5d1a      	ldrb	r2, [r3, r4]
    931c:	5ce9      	ldrb	r1, [r5, r3]
    931e:	404a      	eors	r2, r1
    9320:	54ea      	strb	r2, [r5, r3]
    9322:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    9324:	2b10      	cmp	r3, #16
    9326:	d004      	beq.n	9332 <DataDecrypt+0xae>
			if (CTR_Nonce_and_Counter[15] == 0)
    9328:	2800      	cmp	r0, #0
    932a:	d1f6      	bne.n	931a <DataDecrypt+0x96>
				CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    932c:	5d1a      	ldrb	r2, [r3, r4]
    932e:	54fa      	strb	r2, [r7, r3]
    9330:	e7f7      	b.n	9322 <DataDecrypt+0x9e>
			}
		}
		CTR_Nonce_and_Counter[15]++; // Increment Counter for next opration
    9332:	3001      	adds	r0, #1
    9334:	73f0      	strb	r0, [r6, #15]
	for (i=0;i<iterations+1;i++)
    9336:	9d03      	ldr	r5, [sp, #12]
    9338:	3501      	adds	r5, #1
    933a:	b2ab      	uxth	r3, r5
    933c:	9303      	str	r3, [sp, #12]
    933e:	4698      	mov	r8, r3
    9340:	4553      	cmp	r3, sl
    9342:	da10      	bge.n	9366 <DataDecrypt+0xe2>
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    9344:	2300      	movs	r3, #0
			block[j] = CTR_Nonce_and_Counter[j];
    9346:	5d9a      	ldrb	r2, [r3, r6]
    9348:	551a      	strb	r2, [r3, r4]
    934a:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    934c:	2b10      	cmp	r3, #16
    934e:	d1fa      	bne.n	9346 <DataDecrypt+0xc2>
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    9350:	4917      	ldr	r1, [pc, #92]	; (93b0 <DataDecrypt+0x12c>)
    9352:	0020      	movs	r0, r4
    9354:	47d8      	blx	fp
			if (CTR_Nonce_and_Counter[15] == 0)
    9356:	7bf0      	ldrb	r0, [r6, #15]
				Payload[j+(i-1)*16] = block[j] ^ Payload[j+(i-1)*16];
    9358:	4642      	mov	r2, r8
    935a:	3a01      	subs	r2, #1
    935c:	0112      	lsls	r2, r2, #4
    935e:	2300      	movs	r3, #0
    9360:	444a      	add	r2, r9
    9362:	0015      	movs	r5, r2
    9364:	e7e0      	b.n	9328 <DataDecrypt+0xa4>
	}
	*PayloadLen = *PayloadLen-4;
    9366:	9b06      	ldr	r3, [sp, #24]
    9368:	7819      	ldrb	r1, [r3, #0]
    936a:	3904      	subs	r1, #4
    936c:	b2c9      	uxtb	r1, r1
    936e:	7019      	strb	r1, [r3, #0]
	mic_generator(&Payload[0] , *PayloadLen , FrameControl  , FrameCounter , SourceIEEEAddress);
    9370:	9b04      	ldr	r3, [sp, #16]
    9372:	9300      	str	r3, [sp, #0]
    9374:	9b05      	ldr	r3, [sp, #20]
    9376:	9a07      	ldr	r2, [sp, #28]
    9378:	4648      	mov	r0, r9
    937a:	4c0e      	ldr	r4, [pc, #56]	; (93b4 <DataDecrypt+0x130>)
    937c:	47a0      	blx	r4
    937e:	2300      	movs	r3, #0
	for (i=0;i<16;i++)
	{
		final_mic_value[i] = CTR_mic[i] ^ CBC_mic[i];
    9380:	4d0d      	ldr	r5, [pc, #52]	; (93b8 <DataDecrypt+0x134>)
    9382:	4c0a      	ldr	r4, [pc, #40]	; (93ac <DataDecrypt+0x128>)
    9384:	480d      	ldr	r0, [pc, #52]	; (93bc <DataDecrypt+0x138>)
    9386:	5ce2      	ldrb	r2, [r4, r3]
    9388:	5cc1      	ldrb	r1, [r0, r3]
    938a:	404a      	eors	r2, r1
    938c:	54ea      	strb	r2, [r5, r3]
    938e:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    9390:	2b10      	cmp	r3, #16
    9392:	d1f8      	bne.n	9386 <DataDecrypt+0x102>
	}
	return validate_mic();
    9394:	4b0a      	ldr	r3, [pc, #40]	; (93c0 <DataDecrypt+0x13c>)
    9396:	4798      	blx	r3

}
    9398:	b011      	add	sp, #68	; 0x44
    939a:	bc3c      	pop	{r2, r3, r4, r5}
    939c:	4690      	mov	r8, r2
    939e:	4699      	mov	r9, r3
    93a0:	46a2      	mov	sl, r4
    93a2:	46ab      	mov	fp, r5
    93a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    93a6:	46c0      	nop			; (mov r8, r8)
    93a8:	0000a401 	.word	0x0000a401
    93ac:	20002104 	.word	0x20002104
    93b0:	00017fb8 	.word	0x00017fb8
    93b4:	00008ffd 	.word	0x00008ffd
    93b8:	20002114 	.word	0x20002114
    93bc:	2000212c 	.word	0x2000212c
    93c0:	00009241 	.word	0x00009241

000093c4 <MiMAC_Set>:
     * Remarks:
     *      None
     *
     *****************************************************************************************/
bool MiMAC_Set(mac_set_params_t id, uint8_t *value)
{
    93c4:	b510      	push	{r4, lr}
    switch(id)
    93c6:	2800      	cmp	r0, #0
    93c8:	d109      	bne.n	93de <MiMAC_Set+0x1a>
    {
      case MAC_CHANNEL:
      {
         if(*value > LAST_CHANNEL_NUM) //26 // TODO: this check is necessary here? as we may connect a sub-gig or a 2.4gig?
    93ca:	780b      	ldrb	r3, [r1, #0]
    93cc:	2b19      	cmp	r3, #25
    93ce:	d807      	bhi.n	93e0 <MiMAC_Set+0x1c>
         {
           return false;
         }
          MACCurrentChannel = *value;
    93d0:	4a04      	ldr	r2, [pc, #16]	; (93e4 <MiMAC_Set+0x20>)
    93d2:	7013      	strb	r3, [r2, #0]
          PHY_SetChannel(MACCurrentChannel);
    93d4:	0018      	movs	r0, r3
    93d6:	4b04      	ldr	r3, [pc, #16]	; (93e8 <MiMAC_Set+0x24>)
    93d8:	4798      	blx	r3
          return true;
    93da:	2001      	movs	r0, #1
    93dc:	e000      	b.n	93e0 <MiMAC_Set+0x1c>
      break;

     default:
     break;
    }
    return false;
    93de:	2000      	movs	r0, #0
}
    93e0:	bd10      	pop	{r4, pc}
    93e2:	46c0      	nop			; (mov r8, r8)
    93e4:	2000214e 	.word	0x2000214e
    93e8:	0000a34d 	.word	0x0000a34d

000093ec <MiMAC_Init>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
bool MiMAC_Init(MACINIT_PARAM initValue)
{
    93ec:	b530      	push	{r4, r5, lr}
    93ee:	b083      	sub	sp, #12
    93f0:	466c      	mov	r4, sp
    93f2:	9000      	str	r0, [sp, #0]
    93f4:	9101      	str	r1, [sp, #4]
	uint8_t i;

	PHY_Init();
    93f6:	4b10      	ldr	r3, [pc, #64]	; (9438 <MiMAC_Init+0x4c>)
    93f8:	4798      	blx	r3
	MACInitParams = initValue;
    93fa:	4d10      	ldr	r5, [pc, #64]	; (943c <MiMAC_Init+0x50>)
    93fc:	002b      	movs	r3, r5
    93fe:	cc06      	ldmia	r4!, {r1, r2}
    9400:	c306      	stmia	r3!, {r1, r2}
	uint16_t x =  PHY_RandomReq();
    9402:	4b0f      	ldr	r3, [pc, #60]	; (9440 <MiMAC_Init+0x54>)
    9404:	4798      	blx	r3
    9406:	0004      	movs	r4, r0
	// Set RF mode
	PHY_SetRxState(true);
    9408:	2001      	movs	r0, #1
    940a:	4b0e      	ldr	r3, [pc, #56]	; (9444 <MiMAC_Init+0x58>)
    940c:	4798      	blx	r3
	IEEESeqNum =   x & 0xff;
    940e:	4b0e      	ldr	r3, [pc, #56]	; (9448 <MiMAC_Init+0x5c>)
    9410:	701c      	strb	r4, [r3, #0]

	// Set Node Address
	PHY_SetIEEEAddr(MACInitParams.PAddress);
    9412:	6868      	ldr	r0, [r5, #4]
    9414:	4b0d      	ldr	r3, [pc, #52]	; (944c <MiMAC_Init+0x60>)
    9416:	4798      	blx	r3

	for (i = 0; i < BANK_SIZE; i++)
	{
		RxBuffer[i].PayloadLen = 0;
    9418:	4b0d      	ldr	r3, [pc, #52]	; (9450 <MiMAC_Init+0x64>)
    941a:	2200      	movs	r2, #0
    941c:	701a      	strb	r2, [r3, #0]
    941e:	2102      	movs	r1, #2
    9420:	31ff      	adds	r1, #255	; 0xff
    9422:	545a      	strb	r2, [r3, r1]
    9424:	490b      	ldr	r1, [pc, #44]	; (9454 <MiMAC_Init+0x68>)
    9426:	545a      	strb	r2, [r3, r1]
    9428:	490b      	ldr	r1, [pc, #44]	; (9458 <MiMAC_Init+0x6c>)
    942a:	545a      	strb	r2, [r3, r1]
				OutgoingFrameCounter.Val = 0;
				PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
				OutgoingFrameCounter.Val = 1;
			}
		#else
			OutgoingFrameCounter.Val = 1;
    942c:	3201      	adds	r2, #1
    942e:	4b0b      	ldr	r3, [pc, #44]	; (945c <MiMAC_Init+0x70>)
    9430:	601a      	str	r2, [r3, #0]
		#endif
	#endif

	return true;
}
    9432:	2001      	movs	r0, #1
    9434:	b003      	add	sp, #12
    9436:	bd30      	pop	{r4, r5, pc}
    9438:	0000a235 	.word	0x0000a235
    943c:	200020e0 	.word	0x200020e0
    9440:	0000a3e9 	.word	0x0000a3e9
    9444:	0000a269 	.word	0x0000a269
    9448:	20001fd5 	.word	0x20001fd5
    944c:	0000a40d 	.word	0x0000a40d
    9450:	20002258 	.word	0x20002258
    9454:	00000202 	.word	0x00000202
    9458:	00000303 	.word	0x00000303
    945c:	20002128 	.word	0x20002128

00009460 <MiMAC_SendPacket>:

bool MiMAC_SendPacket( MAC_TRANS_PARAM transParam,
         uint8_t *MACPayload,
         uint8_t MACPayloadLen, uint8_t msghandle,
         DataConf_callback_t ConfCallback)
{
    9460:	b5f0      	push	{r4, r5, r6, r7, lr}
    9462:	46de      	mov	lr, fp
    9464:	4657      	mov	r7, sl
    9466:	464e      	mov	r6, r9
    9468:	4645      	mov	r5, r8
    946a:	b5e0      	push	{r5, r6, r7, lr}
    946c:	b087      	sub	sp, #28
    946e:	af03      	add	r7, sp, #12
    9470:	1c04      	adds	r4, r0, #0
    9472:	9003      	str	r0, [sp, #12]
    9474:	0008      	movs	r0, r1
    9476:	9104      	str	r1, [sp, #16]
    9478:	0015      	movs	r5, r2
    947a:	0a2d      	lsrs	r5, r5, #8
    947c:	9205      	str	r2, [sp, #20]
    947e:	9300      	str	r3, [sp, #0]
    9480:	ab11      	add	r3, sp, #68	; 0x44
    9482:	781b      	ldrb	r3, [r3, #0]
    9484:	469a      	mov	sl, r3
    9486:	b2e4      	uxtb	r4, r4
    9488:	06a6      	lsls	r6, r4, #26
    948a:	0ff6      	lsrs	r6, r6, #31
    948c:	9002      	str	r0, [sp, #8]
    948e:	b2d3      	uxtb	r3, r2
    9490:	469c      	mov	ip, r3
    9492:	b2ed      	uxtb	r5, r5
    uint8_t headerLength;
    uint8_t loc = 0;
    uint8_t i = 0;

	uint8_t frameControl = 0;
	dataConfAvailable = false;
    9494:	2200      	movs	r2, #0
    9496:	4bc4      	ldr	r3, [pc, #784]	; (97a8 <MiMAC_SendPacket+0x348>)
    9498:	701a      	strb	r2, [r3, #0]
	#ifndef TARGET_SMALL
		bool IntraPAN;
	#endif
	
	MACdatatransParam = transParam;
    949a:	4bc4      	ldr	r3, [pc, #784]	; (97ac <MiMAC_SendPacket+0x34c>)
    949c:	cf07      	ldmia	r7!, {r0, r1, r2}
    949e:	c307      	stmia	r3!, {r0, r1, r2}

    if (transParam.flags.bits.broadcast)
    94a0:	0763      	lsls	r3, r4, #29
    94a2:	d501      	bpl.n	94a8 <MiMAC_SendPacket+0x48>
    {
        transParam.altDestAddr = true;
    94a4:	2301      	movs	r3, #1
    94a6:	469c      	mov	ip, r3
    }

    if (transParam.flags.bits.secEn)
    94a8:	2308      	movs	r3, #8
    94aa:	4023      	ands	r3, r4
    94ac:	001a      	movs	r2, r3
    {
        transParam.altSrcAddr = false;
    94ae:	4253      	negs	r3, r2
    94b0:	4153      	adcs	r3, r2
    94b2:	425b      	negs	r3, r3
    94b4:	401d      	ands	r5, r3
    }

    // set the frame control in variable i
    if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND)
    94b6:	2303      	movs	r3, #3
    94b8:	4023      	ands	r3, r4
    94ba:	2b01      	cmp	r3, #1
    94bc:	d04d      	beq.n	955a <MiMAC_SendPacket+0xfa>
    {
        frameControl = 0x03;
    } else if (transParam.flags.bits.packetType == PACKET_TYPE_DATA)
    {
        frameControl = 0x01;
    94be:	2201      	movs	r2, #1
    94c0:	4691      	mov	r9, r2
    } else if (transParam.flags.bits.packetType == PACKET_TYPE_DATA)
    94c2:	2b00      	cmp	r3, #0
    94c4:	d004      	beq.n	94d0 <MiMAC_SendPacket+0x70>
    }
	else if (transParam.flags.bits.packetType == PACKET_TYPE_ACK)
    {
        frameControl = 0x02;
    94c6:	1e9a      	subs	r2, r3, #2
    94c8:	4251      	negs	r1, r2
    94ca:	4151      	adcs	r1, r2
    94cc:	004a      	lsls	r2, r1, #1
    94ce:	4691      	mov	r9, r2
    }
    // decide the header length for different addressing mode
#ifndef TARGET_SMALL
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    94d0:	aa03      	add	r2, sp, #12
    94d2:	8952      	ldrh	r2, [r2, #10]
    94d4:	48b6      	ldr	r0, [pc, #728]	; (97b0 <MiMAC_SendPacket+0x350>)
    94d6:	8800      	ldrh	r0, [r0, #0]
    94d8:	4290      	cmp	r0, r2
    94da:	d041      	beq.n	9560 <MiMAC_SendPacket+0x100>
    }
#ifndef TARGET_SMALL
    else
    {
        headerLength = 7;
        IntraPAN = false;
    94dc:	2200      	movs	r2, #0
    94de:	4693      	mov	fp, r2
        headerLength = 7;
    94e0:	3207      	adds	r2, #7
    }
#endif

    if (transParam.altDestAddr)
    94e2:	46e0      	mov	r8, ip
    {
        headerLength += 2;
    } else
    {
        headerLength += 8;
    94e4:	0017      	movs	r7, r2
    94e6:	3708      	adds	r7, #8
    if (transParam.altDestAddr)
    94e8:	4661      	mov	r1, ip
    94ea:	2900      	cmp	r1, #0
    94ec:	d000      	beq.n	94f0 <MiMAC_SendPacket+0x90>
        headerLength += 2;
    94ee:	1c97      	adds	r7, r2, #2
    }

    if (transParam.altSrcAddr)
    94f0:	2d00      	cmp	r5, #0
    94f2:	d044      	beq.n	957e <MiMAC_SendPacket+0x11e>
    {
        headerLength += 2;
    94f4:	3702      	adds	r7, #2
    94f6:	b2fa      	uxtb	r2, r7
    94f8:	9201      	str	r2, [sp, #4]
    } else
    {
        headerLength += 8;
    }

    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false)
    94fa:	2224      	movs	r2, #36	; 0x24
    94fc:	4014      	ands	r4, r2
    94fe:	2c20      	cmp	r4, #32
    9500:	d041      	beq.n	9586 <MiMAC_SendPacket+0x126>
    {
        frameControl |= 0x20;
    }

    // use PACKET_TYPE_RESERVE to represent beacon. Fixed format for beacon packet
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    9502:	2b03      	cmp	r3, #3
    9504:	d044      	beq.n	9590 <MiMAC_SendPacket+0x130>
        IntraPAN = false;
#endif
        transParam.altSrcAddr = true;
        transParam.flags.bits.ackReq = false;
    }
	if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND) 
    9506:	aa03      	add	r2, sp, #12
    9508:	0171      	lsls	r1, r6, #5
    950a:	7813      	ldrb	r3, [r2, #0]
    950c:	2020      	movs	r0, #32
    950e:	4383      	bics	r3, r0
    9510:	430b      	orrs	r3, r1
    9512:	7013      	strb	r3, [r2, #0]
    9514:	2203      	movs	r2, #3
    9516:	4013      	ands	r3, r2
    9518:	2b01      	cmp	r3, #1
    951a:	d041      	beq.n	95a0 <MiMAC_SendPacket+0x140>
    {
        transParam.flags.bits.ackReq = false;
    }

#ifdef ENABLE_SECURITY
    if (transParam.flags.bits.secEn)
    951c:	ab03      	add	r3, sp, #12
    951e:	0172      	lsls	r2, r6, #5
    9520:	781c      	ldrb	r4, [r3, #0]
    9522:	2120      	movs	r1, #32
    9524:	438c      	bics	r4, r1
    9526:	4314      	orrs	r4, r2
    9528:	701c      	strb	r4, [r3, #0]
    952a:	b2e4      	uxtb	r4, r4
    952c:	0723      	lsls	r3, r4, #28
    952e:	d439      	bmi.n	95a4 <MiMAC_SendPacket+0x144>
		// 4 byte mic and 5 byte outgoing frame counter
		packet[loc++] = MACPayloadLen+headerLength+9;
    } else
#endif
    {
		packet[loc++] = MACPayloadLen+headerLength;
    9530:	ab10      	add	r3, sp, #64	; 0x40
    9532:	781b      	ldrb	r3, [r3, #0]
    9534:	9a01      	ldr	r2, [sp, #4]
    9536:	18d7      	adds	r7, r2, r3
    9538:	4b9e      	ldr	r3, [pc, #632]	; (97b4 <MiMAC_SendPacket+0x354>)
    953a:	701f      	strb	r7, [r3, #0]
    }

    // set frame control LSB
	packet[loc++] = frameControl;
    953c:	4b9d      	ldr	r3, [pc, #628]	; (97b4 <MiMAC_SendPacket+0x354>)
    953e:	464a      	mov	r2, r9
    9540:	705a      	strb	r2, [r3, #1]

    // set frame control MSB
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    9542:	43e3      	mvns	r3, r4
    9544:	079b      	lsls	r3, r3, #30
    9546:	d040      	beq.n	95ca <MiMAC_SendPacket+0x16a>
		packet[loc++] = 0x80;
        // sequence number
		packet[loc++] = IEEESeqNum++;
    } else
    {
        if (transParam.altDestAddr && transParam.altSrcAddr)
    9548:	4643      	mov	r3, r8
    954a:	2b00      	cmp	r3, #0
    954c:	d05f      	beq.n	960e <MiMAC_SendPacket+0x1ae>
    954e:	2d00      	cmp	r5, #0
    9550:	d045      	beq.n	95de <MiMAC_SendPacket+0x17e>
        {
			packet[loc++] = 0x88;
    9552:	2288      	movs	r2, #136	; 0x88
    9554:	4b97      	ldr	r3, [pc, #604]	; (97b4 <MiMAC_SendPacket+0x354>)
    9556:	709a      	strb	r2, [r3, #2]
    9558:	e044      	b.n	95e4 <MiMAC_SendPacket+0x184>
        frameControl = 0x03;
    955a:	2203      	movs	r2, #3
    955c:	4691      	mov	r9, r2
    955e:	e7b7      	b.n	94d0 <MiMAC_SendPacket+0x70>
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    9560:	4895      	ldr	r0, [pc, #596]	; (97b8 <MiMAC_SendPacket+0x358>)
    9562:	4282      	cmp	r2, r0
    9564:	d007      	beq.n	9576 <MiMAC_SendPacket+0x116>
        frameControl |= 0x40;
    9566:	2240      	movs	r2, #64	; 0x40
    9568:	4649      	mov	r1, r9
    956a:	4311      	orrs	r1, r2
    956c:	4689      	mov	r9, r1
        IntraPAN = true;
    956e:	3a3f      	subs	r2, #63	; 0x3f
    9570:	4693      	mov	fp, r2
        headerLength = 5;
    9572:	3204      	adds	r2, #4
        IntraPAN = true;
    9574:	e7b5      	b.n	94e2 <MiMAC_SendPacket+0x82>
        IntraPAN = false;
    9576:	2200      	movs	r2, #0
    9578:	4693      	mov	fp, r2
        headerLength = 7;
    957a:	3207      	adds	r2, #7
    957c:	e7b1      	b.n	94e2 <MiMAC_SendPacket+0x82>
        headerLength += 8;
    957e:	3708      	adds	r7, #8
    9580:	b2fa      	uxtb	r2, r7
    9582:	9201      	str	r2, [sp, #4]
    9584:	e7b9      	b.n	94fa <MiMAC_SendPacket+0x9a>
        frameControl |= 0x20;
    9586:	3a04      	subs	r2, #4
    9588:	4649      	mov	r1, r9
    958a:	4311      	orrs	r1, r2
    958c:	4689      	mov	r9, r1
    958e:	e7b8      	b.n	9502 <MiMAC_SendPacket+0xa2>
        transParam.altSrcAddr = true;
    9590:	2501      	movs	r5, #1
        transParam.flags.bits.ackReq = false;
    9592:	2600      	movs	r6, #0
        IntraPAN = false;
    9594:	2300      	movs	r3, #0
    9596:	469b      	mov	fp, r3
        frameControl = 0x00;
    9598:	4699      	mov	r9, r3
        headerLength = 7;
    959a:	3307      	adds	r3, #7
    959c:	9301      	str	r3, [sp, #4]
    959e:	e7b2      	b.n	9506 <MiMAC_SendPacket+0xa6>
        transParam.flags.bits.ackReq = false;
    95a0:	2600      	movs	r6, #0
    95a2:	e7bb      	b.n	951c <MiMAC_SendPacket+0xbc>
        frameControl |= 0x08;
    95a4:	2308      	movs	r3, #8
    95a6:	464a      	mov	r2, r9
    95a8:	431a      	orrs	r2, r3
    95aa:	4691      	mov	r9, r2
		DataEncrypt(MACPayload, &MACPayloadLen, OutgoingFrameCounter, frameControl);
    95ac:	4b83      	ldr	r3, [pc, #524]	; (97bc <MiMAC_SendPacket+0x35c>)
    95ae:	681a      	ldr	r2, [r3, #0]
    95b0:	464b      	mov	r3, r9
    95b2:	a910      	add	r1, sp, #64	; 0x40
    95b4:	9800      	ldr	r0, [sp, #0]
    95b6:	4f82      	ldr	r7, [pc, #520]	; (97c0 <MiMAC_SendPacket+0x360>)
    95b8:	47b8      	blx	r7
		packet[loc++] = MACPayloadLen+headerLength+9;
    95ba:	ab10      	add	r3, sp, #64	; 0x40
    95bc:	781b      	ldrb	r3, [r3, #0]
    95be:	3309      	adds	r3, #9
    95c0:	9a01      	ldr	r2, [sp, #4]
    95c2:	18d7      	adds	r7, r2, r3
    95c4:	4b7b      	ldr	r3, [pc, #492]	; (97b4 <MiMAC_SendPacket+0x354>)
    95c6:	701f      	strb	r7, [r3, #0]
    95c8:	e7b8      	b.n	953c <MiMAC_SendPacket+0xdc>
		packet[loc++] = 0x80;
    95ca:	4b7a      	ldr	r3, [pc, #488]	; (97b4 <MiMAC_SendPacket+0x354>)
    95cc:	2280      	movs	r2, #128	; 0x80
    95ce:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    95d0:	497c      	ldr	r1, [pc, #496]	; (97c4 <MiMAC_SendPacket+0x364>)
    95d2:	780a      	ldrb	r2, [r1, #0]
    95d4:	1c50      	adds	r0, r2, #1
    95d6:	7008      	strb	r0, [r1, #0]
    95d8:	70da      	strb	r2, [r3, #3]
    95da:	2204      	movs	r2, #4
    95dc:	e03e      	b.n	965c <MiMAC_SendPacket+0x1fc>

        } else if (transParam.altDestAddr && transParam.altSrcAddr == 0)
        {
			packet[loc++] = 0xC8;
    95de:	22c8      	movs	r2, #200	; 0xc8
    95e0:	4b74      	ldr	r3, [pc, #464]	; (97b4 <MiMAC_SendPacket+0x354>)
    95e2:	709a      	strb	r2, [r3, #2]
        {
			packet[loc++] = 0xCC;
        }

        // sequence number
		packet[loc++] = IEEESeqNum++;
    95e4:	4b77      	ldr	r3, [pc, #476]	; (97c4 <MiMAC_SendPacket+0x364>)
    95e6:	781a      	ldrb	r2, [r3, #0]
    95e8:	1c51      	adds	r1, r2, #1
    95ea:	7019      	strb	r1, [r3, #0]
    95ec:	4b71      	ldr	r3, [pc, #452]	; (97b4 <MiMAC_SendPacket+0x354>)
    95ee:	70da      	strb	r2, [r3, #3]

        // destination PANID
		packet[loc++] = transParam.DestPANID.v[0];
    95f0:	aa03      	add	r2, sp, #12
    95f2:	7a91      	ldrb	r1, [r2, #10]
    95f4:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    95f6:	7ad2      	ldrb	r2, [r2, #11]
    95f8:	715a      	strb	r2, [r3, #5]

        // destination address
        if (transParam.flags.bits.broadcast)
    95fa:	0763      	lsls	r3, r4, #29
    95fc:	d429      	bmi.n	9652 <MiMAC_SendPacket+0x1f2>
			packet[loc++] = 0xFF;
        } else
        {
            if (transParam.altDestAddr)
            {
				packet[loc++] = transParam.DestAddress[0];
    95fe:	9902      	ldr	r1, [sp, #8]
    9600:	780a      	ldrb	r2, [r1, #0]
    9602:	4b6c      	ldr	r3, [pc, #432]	; (97b4 <MiMAC_SendPacket+0x354>)
    9604:	719a      	strb	r2, [r3, #6]
				packet[loc++] = transParam.DestAddress[1];
    9606:	784a      	ldrb	r2, [r1, #1]
    9608:	71da      	strb	r2, [r3, #7]
    960a:	2208      	movs	r2, #8
    960c:	e026      	b.n	965c <MiMAC_SendPacket+0x1fc>
        } else if (transParam.altDestAddr == 0 && transParam.altSrcAddr == 1)
    960e:	2d00      	cmp	r5, #0
    9610:	d00f      	beq.n	9632 <MiMAC_SendPacket+0x1d2>
			packet[loc++] = 0x8C;
    9612:	4b68      	ldr	r3, [pc, #416]	; (97b4 <MiMAC_SendPacket+0x354>)
    9614:	228c      	movs	r2, #140	; 0x8c
    9616:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    9618:	496a      	ldr	r1, [pc, #424]	; (97c4 <MiMAC_SendPacket+0x364>)
    961a:	780a      	ldrb	r2, [r1, #0]
    961c:	1c50      	adds	r0, r2, #1
    961e:	7008      	strb	r0, [r1, #0]
    9620:	70da      	strb	r2, [r3, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    9622:	aa03      	add	r2, sp, #12
    9624:	7a91      	ldrb	r1, [r2, #10]
    9626:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    9628:	7ad2      	ldrb	r2, [r2, #11]
    962a:	715a      	strb	r2, [r3, #5]
        if (transParam.flags.bits.broadcast)
    962c:	0763      	lsls	r3, r4, #29
    962e:	d410      	bmi.n	9652 <MiMAC_SendPacket+0x1f2>
    9630:	e099      	b.n	9766 <MiMAC_SendPacket+0x306>
			packet[loc++] = 0xCC;
    9632:	4b60      	ldr	r3, [pc, #384]	; (97b4 <MiMAC_SendPacket+0x354>)
    9634:	22cc      	movs	r2, #204	; 0xcc
    9636:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    9638:	4962      	ldr	r1, [pc, #392]	; (97c4 <MiMAC_SendPacket+0x364>)
    963a:	780a      	ldrb	r2, [r1, #0]
    963c:	1c50      	adds	r0, r2, #1
    963e:	7008      	strb	r0, [r1, #0]
    9640:	70da      	strb	r2, [r3, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    9642:	aa03      	add	r2, sp, #12
    9644:	7a91      	ldrb	r1, [r2, #10]
    9646:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    9648:	7ad2      	ldrb	r2, [r2, #11]
    964a:	715a      	strb	r2, [r3, #5]
        if (transParam.flags.bits.broadcast)
    964c:	0763      	lsls	r3, r4, #29
    964e:	d400      	bmi.n	9652 <MiMAC_SendPacket+0x1f2>
    9650:	e085      	b.n	975e <MiMAC_SendPacket+0x2fe>
			packet[loc++] = 0xFF;
    9652:	4b58      	ldr	r3, [pc, #352]	; (97b4 <MiMAC_SendPacket+0x354>)
    9654:	22ff      	movs	r2, #255	; 0xff
    9656:	719a      	strb	r2, [r3, #6]
			packet[loc++] = 0xFF;
    9658:	71da      	strb	r2, [r3, #7]
    965a:	3af7      	subs	r2, #247	; 0xf7
                }
            }
        }
    }
	
	if(transParam.flags.bits.ackReq)
    965c:	a903      	add	r1, sp, #12
    965e:	0170      	lsls	r0, r6, #5
    9660:	780b      	ldrb	r3, [r1, #0]
    9662:	2420      	movs	r4, #32
    9664:	43a3      	bics	r3, r4
    9666:	4303      	orrs	r3, r0
    9668:	700b      	strb	r3, [r1, #0]
    966a:	069b      	lsls	r3, r3, #26
    966c:	d400      	bmi.n	9670 <MiMAC_SendPacket+0x210>
    966e:	e085      	b.n	977c <MiMAC_SendPacket+0x31c>
	{
	 	AckSeqNum = IEEESeqNum-1;
    9670:	4b54      	ldr	r3, [pc, #336]	; (97c4 <MiMAC_SendPacket+0x364>)
    9672:	781b      	ldrb	r3, [r3, #0]
    9674:	3b01      	subs	r3, #1
    9676:	4954      	ldr	r1, [pc, #336]	; (97c8 <MiMAC_SendPacket+0x368>)
    9678:	700b      	strb	r3, [r1, #0]
		 AckReqData = 1;
    967a:	2101      	movs	r1, #1
    967c:	4b53      	ldr	r3, [pc, #332]	; (97cc <MiMAC_SendPacket+0x36c>)
    967e:	7019      	strb	r1, [r3, #0]
	{
		AckReqData = 0;
	}
#ifndef TARGET_SMALL
    // source PANID if necessary
    if (IntraPAN == false)
    9680:	465b      	mov	r3, fp
    9682:	2b00      	cmp	r3, #0
    9684:	d109      	bne.n	969a <MiMAC_SendPacket+0x23a>
    {
		packet[loc++] = MAC_PANID.v[0];
    9686:	1c53      	adds	r3, r2, #1
    9688:	b2db      	uxtb	r3, r3
    968a:	494a      	ldr	r1, [pc, #296]	; (97b4 <MiMAC_SendPacket+0x354>)
    968c:	4848      	ldr	r0, [pc, #288]	; (97b0 <MiMAC_SendPacket+0x350>)
    968e:	7804      	ldrb	r4, [r0, #0]
    9690:	548c      	strb	r4, [r1, r2]
		packet[loc++] = MAC_PANID.v[1];
    9692:	3202      	adds	r2, #2
    9694:	b2d2      	uxtb	r2, r2
    9696:	7840      	ldrb	r0, [r0, #1]
    9698:	54c8      	strb	r0, [r1, r3]
    }
#endif

    // source address
    if (transParam.altSrcAddr)
    969a:	2d00      	cmp	r5, #0
    969c:	d100      	bne.n	96a0 <MiMAC_SendPacket+0x240>
    969e:	e071      	b.n	9784 <MiMAC_SendPacket+0x324>
    {
		packet[loc++] = myNetworkAddress.v[0];
    96a0:	4944      	ldr	r1, [pc, #272]	; (97b4 <MiMAC_SendPacket+0x354>)
    96a2:	484b      	ldr	r0, [pc, #300]	; (97d0 <MiMAC_SendPacket+0x370>)
    96a4:	7803      	ldrb	r3, [r0, #0]
    96a6:	548b      	strb	r3, [r1, r2]
		packet[loc++] = myNetworkAddress.v[1];
    96a8:	1c93      	adds	r3, r2, #2
    96aa:	b2db      	uxtb	r3, r3
		packet[loc++] = myNetworkAddress.v[0];
    96ac:	3201      	adds	r2, #1
		packet[loc++] = myNetworkAddress.v[1];
    96ae:	b2d2      	uxtb	r2, r2
    96b0:	7840      	ldrb	r0, [r0, #1]
    96b2:	5488      	strb	r0, [r1, r2]
        {
			packet[loc++] = MACInitParams.PAddress[i];
        }
    }
#ifdef ENABLE_SECURITY
if (transParam.flags.bits.secEn)
    96b4:	aa03      	add	r2, sp, #12
    96b6:	0171      	lsls	r1, r6, #5
    96b8:	7816      	ldrb	r6, [r2, #0]
    96ba:	2020      	movs	r0, #32
    96bc:	4386      	bics	r6, r0
    96be:	430e      	orrs	r6, r1
    96c0:	7016      	strb	r6, [r2, #0]
    96c2:	0732      	lsls	r2, r6, #28
    96c4:	d515      	bpl.n	96f2 <MiMAC_SendPacket+0x292>
    96c6:	0019      	movs	r1, r3
    96c8:	2200      	movs	r2, #0
{
	// fill the additional security aux header
	for (i = 0; i < 4; i++)
	{
		packet[loc++] = OutgoingFrameCounter.v[i];
    96ca:	4e3a      	ldr	r6, [pc, #232]	; (97b4 <MiMAC_SendPacket+0x354>)
    96cc:	4d3b      	ldr	r5, [pc, #236]	; (97bc <MiMAC_SendPacket+0x35c>)
    96ce:	1c48      	adds	r0, r1, #1
    96d0:	5cac      	ldrb	r4, [r5, r2]
    96d2:	5474      	strb	r4, [r6, r1]
    96d4:	3201      	adds	r2, #1
    96d6:	b2c1      	uxtb	r1, r0
	for (i = 0; i < 4; i++)
    96d8:	2a04      	cmp	r2, #4
    96da:	d1f8      	bne.n	96ce <MiMAC_SendPacket+0x26e>
    96dc:	1d1a      	adds	r2, r3, #4
    96de:	b2d2      	uxtb	r2, r2
	}
	OutgoingFrameCounter.Val++;
    96e0:	4836      	ldr	r0, [pc, #216]	; (97bc <MiMAC_SendPacket+0x35c>)
    96e2:	6801      	ldr	r1, [r0, #0]
    96e4:	3101      	adds	r1, #1
    96e6:	6001      	str	r1, [r0, #0]
	{
		PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
	}
	#endif
	//copy myKeySequenceNumber
	packet[loc++] = myKeySequenceNumber;
    96e8:	3305      	adds	r3, #5
    96ea:	b2db      	uxtb	r3, r3
    96ec:	2000      	movs	r0, #0
    96ee:	4931      	ldr	r1, [pc, #196]	; (97b4 <MiMAC_SendPacket+0x354>)
    96f0:	5488      	strb	r0, [r1, r2]
    {
		packet[loc++] = MACPayload[i];
    }
#else
    // write the payload
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    96f2:	aa10      	add	r2, sp, #64	; 0x40
    96f4:	7816      	ldrb	r6, [r2, #0]
    96f6:	2e00      	cmp	r6, #0
    96f8:	d053      	beq.n	97a2 <MiMAC_SendPacket+0x342>
    96fa:	9a00      	ldr	r2, [sp, #0]
    96fc:	18f1      	adds	r1, r6, r3
    96fe:	b2c9      	uxtb	r1, r1
    {
	    packet[loc++] = MACPayload[i];
    9700:	4d2c      	ldr	r5, [pc, #176]	; (97b4 <MiMAC_SendPacket+0x354>)
    9702:	1c58      	adds	r0, r3, #1
    9704:	7814      	ldrb	r4, [r2, #0]
    9706:	54ec      	strb	r4, [r5, r3]
    9708:	3201      	adds	r2, #1
    970a:	b2c3      	uxtb	r3, r0
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    970c:	428b      	cmp	r3, r1
    970e:	d1f8      	bne.n	9702 <MiMAC_SendPacket+0x2a2>
    }
	packet[loc++] = final_mic_value[0];
    9710:	4828      	ldr	r0, [pc, #160]	; (97b4 <MiMAC_SendPacket+0x354>)
    9712:	4b30      	ldr	r3, [pc, #192]	; (97d4 <MiMAC_SendPacket+0x374>)
    9714:	781a      	ldrb	r2, [r3, #0]
    9716:	5442      	strb	r2, [r0, r1]
    9718:	1c4a      	adds	r2, r1, #1
	packet[loc++] = final_mic_value[1];
    971a:	b2d2      	uxtb	r2, r2
    971c:	785c      	ldrb	r4, [r3, #1]
    971e:	5484      	strb	r4, [r0, r2]
    9720:	1c8a      	adds	r2, r1, #2
	packet[loc++] = final_mic_value[2];
    9722:	b2d2      	uxtb	r2, r2
    9724:	789c      	ldrb	r4, [r3, #2]
    9726:	5484      	strb	r4, [r0, r2]
    9728:	3103      	adds	r1, #3
	packet[loc++] = final_mic_value[3];
    972a:	b2c9      	uxtb	r1, r1
    972c:	78db      	ldrb	r3, [r3, #3]
    972e:	5443      	strb	r3, [r0, r1]
    } else
    {
        i = 0x01;
    }

    dataPointer = MACPayload;
    9730:	4b29      	ldr	r3, [pc, #164]	; (97d8 <MiMAC_SendPacket+0x378>)
    9732:	9a00      	ldr	r2, [sp, #0]
    9734:	601a      	str	r2, [r3, #0]
	dataConfCallback = ConfCallback;
    9736:	4b29      	ldr	r3, [pc, #164]	; (97dc <MiMAC_SendPacket+0x37c>)
    9738:	9a12      	ldr	r2, [sp, #72]	; 0x48
    973a:	601a      	str	r2, [r3, #0]
    dataHandle = msghandle;
    973c:	4b28      	ldr	r3, [pc, #160]	; (97e0 <MiMAC_SendPacket+0x380>)
    973e:	4652      	mov	r2, sl
    9740:	701a      	strb	r2, [r3, #0]
	MACdataPayloadLen = MACPayloadLen;
    9742:	4b28      	ldr	r3, [pc, #160]	; (97e4 <MiMAC_SendPacket+0x384>)
    9744:	701e      	strb	r6, [r3, #0]
	//DataRetryCount = 0;

    // Now Trigger the Transmission of packet
    return PHY_DataReq(packet);					
    9746:	4b28      	ldr	r3, [pc, #160]	; (97e8 <MiMAC_SendPacket+0x388>)
    9748:	4798      	blx	r3
    974a:	1e43      	subs	r3, r0, #1
    974c:	4198      	sbcs	r0, r3
    974e:	b2c0      	uxtb	r0, r0
}
    9750:	b007      	add	sp, #28
    9752:	bc3c      	pop	{r2, r3, r4, r5}
    9754:	4690      	mov	r8, r2
    9756:	4699      	mov	r9, r3
    9758:	46a2      	mov	sl, r4
    975a:	46ab      	mov	fp, r5
    975c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (transParam.altDestAddr)
    975e:	4643      	mov	r3, r8
    9760:	2b00      	cmp	r3, #0
    9762:	d000      	beq.n	9766 <MiMAC_SendPacket+0x306>
    9764:	e74b      	b.n	95fe <MiMAC_SendPacket+0x19e>
        transParam.flags.bits.ackReq = false;
    9766:	2300      	movs	r3, #0
					packet[loc++] = transParam.DestAddress[i];
    9768:	4812      	ldr	r0, [pc, #72]	; (97b4 <MiMAC_SendPacket+0x354>)
    976a:	9c02      	ldr	r4, [sp, #8]
    976c:	5ce1      	ldrb	r1, [r4, r3]
    976e:	181a      	adds	r2, r3, r0
    9770:	7191      	strb	r1, [r2, #6]
    9772:	3301      	adds	r3, #1
                for (i = 0; i < 8; i++)
    9774:	2b08      	cmp	r3, #8
    9776:	d1f9      	bne.n	976c <MiMAC_SendPacket+0x30c>
					packet[loc++] = transParam.DestAddress[i];
    9778:	220e      	movs	r2, #14
    977a:	e76f      	b.n	965c <MiMAC_SendPacket+0x1fc>
		AckReqData = 0;
    977c:	2100      	movs	r1, #0
    977e:	4b13      	ldr	r3, [pc, #76]	; (97cc <MiMAC_SendPacket+0x36c>)
    9780:	7019      	strb	r1, [r3, #0]
    9782:	e77d      	b.n	9680 <MiMAC_SendPacket+0x220>
			packet[loc++] = MACInitParams.PAddress[i];
    9784:	4b19      	ldr	r3, [pc, #100]	; (97ec <MiMAC_SendPacket+0x38c>)
    9786:	6859      	ldr	r1, [r3, #4]
    9788:	0014      	movs	r4, r2
    978a:	3408      	adds	r4, #8
    978c:	b2e4      	uxtb	r4, r4
    978e:	4d09      	ldr	r5, [pc, #36]	; (97b4 <MiMAC_SendPacket+0x354>)
    9790:	1c53      	adds	r3, r2, #1
    9792:	b2db      	uxtb	r3, r3
    9794:	7808      	ldrb	r0, [r1, #0]
    9796:	54a8      	strb	r0, [r5, r2]
    9798:	3101      	adds	r1, #1
    979a:	001a      	movs	r2, r3
        for (i = 0; i < 8; i++)
    979c:	429c      	cmp	r4, r3
    979e:	d1f7      	bne.n	9790 <MiMAC_SendPacket+0x330>
    97a0:	e788      	b.n	96b4 <MiMAC_SendPacket+0x254>
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    97a2:	0019      	movs	r1, r3
    97a4:	e7b4      	b.n	9710 <MiMAC_SendPacket+0x2b0>
    97a6:	46c0      	nop			; (mov r8, r8)
    97a8:	20000276 	.word	0x20000276
    97ac:	200020f8 	.word	0x200020f8
    97b0:	2000214c 	.word	0x2000214c
    97b4:	20001fd8 	.word	0x20001fd8
    97b8:	0000ffff 	.word	0x0000ffff
    97bc:	20002128 	.word	0x20002128
    97c0:	00009129 	.word	0x00009129
    97c4:	20001fd5 	.word	0x20001fd5
    97c8:	20001fd4 	.word	0x20001fd4
    97cc:	20000273 	.word	0x20000273
    97d0:	200020d8 	.word	0x200020d8
    97d4:	20002114 	.word	0x20002114
    97d8:	20000280 	.word	0x20000280
    97dc:	20000278 	.word	0x20000278
    97e0:	2000027c 	.word	0x2000027c
    97e4:	20000275 	.word	0x20000275
    97e8:	0000a379 	.word	0x0000a379
    97ec:	200020e0 	.word	0x200020e0

000097f0 <MiMAC_DiscardPacket>:
 *
 *****************************************************************************************/
void MiMAC_DiscardPacket(void)
{
	//re-enable buffer for next packets
	if (BankIndex < BANK_SIZE)
    97f0:	4b04      	ldr	r3, [pc, #16]	; (9804 <MiMAC_DiscardPacket+0x14>)
    97f2:	781b      	ldrb	r3, [r3, #0]
    97f4:	2b03      	cmp	r3, #3
    97f6:	d804      	bhi.n	9802 <MiMAC_DiscardPacket+0x12>
	{
		RxBuffer[BankIndex].PayloadLen = 0;
    97f8:	021a      	lsls	r2, r3, #8
    97fa:	18d3      	adds	r3, r2, r3
    97fc:	2100      	movs	r1, #0
    97fe:	4a02      	ldr	r2, [pc, #8]	; (9808 <MiMAC_DiscardPacket+0x18>)
    9800:	5499      	strb	r1, [r3, r2]
	}
}
    9802:	4770      	bx	lr
    9804:	2000000f 	.word	0x2000000f
    9808:	20002258 	.word	0x20002258

0000980c <PHY_DataConf>:
 *      None
 *
 *****************************************************************************************/
void PHY_DataConf(uint8_t status)
{
	DataRetryCount = 0;
    980c:	2200      	movs	r2, #0
    980e:	4b04      	ldr	r3, [pc, #16]	; (9820 <PHY_DataConf+0x14>)
    9810:	701a      	strb	r2, [r3, #0]
	dataStatus = (miwi_status_t)status;
    9812:	4b04      	ldr	r3, [pc, #16]	; (9824 <PHY_DataConf+0x18>)
    9814:	7018      	strb	r0, [r3, #0]
	dataConfAvailable = true;
    9816:	3201      	adds	r2, #1
    9818:	4b03      	ldr	r3, [pc, #12]	; (9828 <PHY_DataConf+0x1c>)
    981a:	701a      	strb	r2, [r3, #0]
}
    981c:	4770      	bx	lr
    981e:	46c0      	nop			; (mov r8, r8)
    9820:	20000274 	.word	0x20000274
    9824:	20002124 	.word	0x20002124
    9828:	20000276 	.word	0x20000276

0000982c <MiMAC_RetryPacket>:
{
    982c:	b510      	push	{r4, lr}
	DataRetryCount++;
    982e:	4a0b      	ldr	r2, [pc, #44]	; (985c <MiMAC_RetryPacket+0x30>)
    9830:	7813      	ldrb	r3, [r2, #0]
    9832:	3301      	adds	r3, #1
    9834:	b2db      	uxtb	r3, r3
    9836:	7013      	strb	r3, [r2, #0]
	if (DataRetryCount < DATA_RETRY_ATTEMPT)
    9838:	2b02      	cmp	r3, #2
    983a:	d904      	bls.n	9846 <MiMAC_RetryPacket+0x1a>
		PHY_DataConf(NO_ACK); // No Ack response
    983c:	2003      	movs	r0, #3
    983e:	4b08      	ldr	r3, [pc, #32]	; (9860 <MiMAC_RetryPacket+0x34>)
    9840:	4798      	blx	r3
	bool status = false;
    9842:	2000      	movs	r0, #0
}
    9844:	bd10      	pop	{r4, pc}
		AckReqData = 1;
    9846:	2201      	movs	r2, #1
    9848:	4b06      	ldr	r3, [pc, #24]	; (9864 <MiMAC_RetryPacket+0x38>)
    984a:	701a      	strb	r2, [r3, #0]
		status = PHY_DataReq(packet);
    984c:	4806      	ldr	r0, [pc, #24]	; (9868 <MiMAC_RetryPacket+0x3c>)
    984e:	4b07      	ldr	r3, [pc, #28]	; (986c <MiMAC_RetryPacket+0x40>)
    9850:	4798      	blx	r3
    9852:	1e43      	subs	r3, r0, #1
    9854:	4198      	sbcs	r0, r3
    9856:	b2c0      	uxtb	r0, r0
    9858:	e7f4      	b.n	9844 <MiMAC_RetryPacket+0x18>
    985a:	46c0      	nop			; (mov r8, r8)
    985c:	20000274 	.word	0x20000274
    9860:	0000980d 	.word	0x0000980d
    9864:	20000273 	.word	0x20000273
    9868:	20001fd8 	.word	0x20001fd8
    986c:	0000a379 	.word	0x0000a379

00009870 <MiMAC_ReceivedPacket>:
{
    9870:	b5f0      	push	{r4, r5, r6, r7, lr}
    9872:	46c6      	mov	lr, r8
    9874:	b500      	push	{lr}
    9876:	b088      	sub	sp, #32
	BankIndex = 0xFF;
    9878:	22ff      	movs	r2, #255	; 0xff
    987a:	4bcc      	ldr	r3, [pc, #816]	; (9bac <MiMAC_ReceivedPacket+0x33c>)
    987c:	701a      	strb	r2, [r3, #0]
		if (RxBuffer[i].PayloadLen > 0)
    987e:	4bcc      	ldr	r3, [pc, #816]	; (9bb0 <MiMAC_ReceivedPacket+0x340>)
    9880:	781b      	ldrb	r3, [r3, #0]
    9882:	2b00      	cmp	r3, #0
    9884:	d000      	beq.n	9888 <MiMAC_ReceivedPacket+0x18>
    9886:	e354      	b.n	9f32 <MiMAC_ReceivedPacket+0x6c2>
    9888:	2302      	movs	r3, #2
    988a:	33ff      	adds	r3, #255	; 0xff
    988c:	4ac8      	ldr	r2, [pc, #800]	; (9bb0 <MiMAC_ReceivedPacket+0x340>)
    988e:	5cd3      	ldrb	r3, [r2, r3]
    9890:	2b00      	cmp	r3, #0
    9892:	d10e      	bne.n	98b2 <MiMAC_ReceivedPacket+0x42>
    9894:	4bc7      	ldr	r3, [pc, #796]	; (9bb4 <MiMAC_ReceivedPacket+0x344>)
    9896:	5cd3      	ldrb	r3, [r2, r3]
    9898:	2b00      	cmp	r3, #0
    989a:	d140      	bne.n	991e <MiMAC_ReceivedPacket+0xae>
    989c:	4bc6      	ldr	r3, [pc, #792]	; (9bb8 <MiMAC_ReceivedPacket+0x348>)
    989e:	5cd3      	ldrb	r3, [r2, r3]
	return false;
    98a0:	2400      	movs	r4, #0
	for (i = 0; i < BANK_SIZE; i++)
    98a2:	2203      	movs	r2, #3
		if (RxBuffer[i].PayloadLen > 0)
    98a4:	2b00      	cmp	r3, #0
    98a6:	d105      	bne.n	98b4 <MiMAC_ReceivedPacket+0x44>
}
    98a8:	0020      	movs	r0, r4
    98aa:	b008      	add	sp, #32
    98ac:	bc04      	pop	{r2}
    98ae:	4690      	mov	r8, r2
    98b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < BANK_SIZE; i++)
    98b2:	2201      	movs	r2, #1
			BankIndex = i;
    98b4:	4bbd      	ldr	r3, [pc, #756]	; (9bac <MiMAC_ReceivedPacket+0x33c>)
    98b6:	701a      	strb	r2, [r3, #0]
	return false;
    98b8:	2400      	movs	r4, #0
	if (BankIndex < BANK_SIZE)
    98ba:	2a03      	cmp	r2, #3
    98bc:	d8f4      	bhi.n	98a8 <MiMAC_ReceivedPacket+0x38>
		if ((RxBuffer[BankIndex].Payload[0] & 0x40) == 0)
    98be:	0010      	movs	r0, r2
    98c0:	0211      	lsls	r1, r2, #8
    98c2:	1889      	adds	r1, r1, r2
    98c4:	4bba      	ldr	r3, [pc, #744]	; (9bb0 <MiMAC_ReceivedPacket+0x340>)
    98c6:	185b      	adds	r3, r3, r1
    98c8:	789d      	ldrb	r5, [r3, #2]
    98ca:	2440      	movs	r4, #64	; 0x40
    98cc:	4025      	ands	r5, r4
		MACRxPacket.flags.Val = 0;
    98ce:	49bb      	ldr	r1, [pc, #748]	; (9bbc <MiMAC_ReceivedPacket+0x34c>)
    98d0:	2400      	movs	r4, #0
    98d2:	700c      	strb	r4, [r1, #0]
		MACRxPacket.altSourceAddress = false;
    98d4:	73cc      	strb	r4, [r1, #15]
		addrMode = RxBuffer[BankIndex].Payload[1] & 0xCC;
    98d6:	78db      	ldrb	r3, [r3, #3]
    98d8:	2133      	movs	r1, #51	; 0x33
    98da:	438b      	bics	r3, r1
		switch (addrMode)
    98dc:	b2d9      	uxtb	r1, r3
    98de:	2988      	cmp	r1, #136	; 0x88
    98e0:	d100      	bne.n	98e4 <MiMAC_ReceivedPacket+0x74>
    98e2:	e12f      	b.n	9b44 <MiMAC_ReceivedPacket+0x2d4>
    98e4:	d91d      	bls.n	9922 <MiMAC_ReceivedPacket+0xb2>
    98e6:	b2d9      	uxtb	r1, r3
    98e8:	29c8      	cmp	r1, #200	; 0xc8
    98ea:	d06f      	beq.n	99cc <MiMAC_ReceivedPacket+0x15c>
    98ec:	29cc      	cmp	r1, #204	; 0xcc
    98ee:	d100      	bne.n	98f2 <MiMAC_ReceivedPacket+0x82>
    98f0:	e0b9      	b.n	9a66 <MiMAC_ReceivedPacket+0x1f6>
    98f2:	298c      	cmp	r1, #140	; 0x8c
    98f4:	d100      	bne.n	98f8 <MiMAC_ReceivedPacket+0x88>
    98f6:	e1aa      	b.n	9c4e <MiMAC_ReceivedPacket+0x3de>
			MiMAC_DiscardPacket();
    98f8:	4bb1      	ldr	r3, [pc, #708]	; (9bc0 <MiMAC_ReceivedPacket+0x350>)
    98fa:	4798      	blx	r3
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    98fc:	4bab      	ldr	r3, [pc, #684]	; (9bac <MiMAC_ReceivedPacket+0x33c>)
    98fe:	781a      	ldrb	r2, [r3, #0]
    9900:	0213      	lsls	r3, r2, #8
    9902:	189a      	adds	r2, r3, r2
    9904:	4baa      	ldr	r3, [pc, #680]	; (9bb0 <MiMAC_ReceivedPacket+0x340>)
    9906:	189b      	adds	r3, r3, r2
    9908:	789b      	ldrb	r3, [r3, #2]
			return false;
    990a:	2400      	movs	r4, #0
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    990c:	069b      	lsls	r3, r3, #26
    990e:	d5cb      	bpl.n	98a8 <MiMAC_ReceivedPacket+0x38>
				MiRadioReceiveParam.action = RECEIVE_START;					
    9910:	a807      	add	r0, sp, #28
    9912:	2300      	movs	r3, #0
    9914:	7003      	strb	r3, [r0, #0]
				MiRadioReceiveParam.rxWindowSize = 0;
    9916:	8043      	strh	r3, [r0, #2]
				RADIO_Receive(&MiRadioReceiveParam);
    9918:	4baa      	ldr	r3, [pc, #680]	; (9bc4 <MiMAC_ReceivedPacket+0x354>)
    991a:	4798      	blx	r3
    991c:	e7c4      	b.n	98a8 <MiMAC_ReceivedPacket+0x38>
	for (i = 0; i < BANK_SIZE; i++)
    991e:	2202      	movs	r2, #2
    9920:	e7c8      	b.n	98b4 <MiMAC_ReceivedPacket+0x44>
		switch (addrMode)
    9922:	2b08      	cmp	r3, #8
    9924:	d100      	bne.n	9928 <MiMAC_ReceivedPacket+0xb8>
    9926:	e1e1      	b.n	9cec <MiMAC_ReceivedPacket+0x47c>
    9928:	2980      	cmp	r1, #128	; 0x80
    992a:	d1e5      	bne.n	98f8 <MiMAC_ReceivedPacket+0x88>
				MACRxPacket.flags.bits.broadcast = 1;
    992c:	4ba3      	ldr	r3, [pc, #652]	; (9bbc <MiMAC_ReceivedPacket+0x34c>)
    992e:	7819      	ldrb	r1, [r3, #0]
    9930:	2404      	movs	r4, #4
    9932:	4321      	orrs	r1, r4
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    9934:	2480      	movs	r4, #128	; 0x80
    9936:	4264      	negs	r4, r4
    9938:	4321      	orrs	r1, r4
    993a:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    993c:	2101      	movs	r1, #1
    993e:	73d9      	strb	r1, [r3, #15]
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    9940:	4c9b      	ldr	r4, [pc, #620]	; (9bb0 <MiMAC_ReceivedPacket+0x340>)
    9942:	0211      	lsls	r1, r2, #8
    9944:	1888      	adds	r0, r1, r2
    9946:	1821      	adds	r1, r4, r0
    9948:	794d      	ldrb	r5, [r1, #5]
    994a:	741d      	strb	r5, [r3, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    994c:	7989      	ldrb	r1, [r1, #6]
    994e:	7459      	strb	r1, [r3, #17]
    9950:	0211      	lsls	r1, r2, #8
    9952:	188a      	adds	r2, r1, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[5]);
    9954:	1dd1      	adds	r1, r2, #7
    9956:	1909      	adds	r1, r1, r4
    9958:	6059      	str	r1, [r3, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 11;
    995a:	5d01      	ldrb	r1, [r0, r4]
    995c:	390b      	subs	r1, #11
    995e:	7319      	strb	r1, [r3, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    9960:	3209      	adds	r2, #9
    9962:	1912      	adds	r2, r2, r4
    9964:	609a      	str	r2, [r3, #8]
		if (RxBuffer[BankIndex].Payload[0] & 0x08)
    9966:	4b91      	ldr	r3, [pc, #580]	; (9bac <MiMAC_ReceivedPacket+0x33c>)
    9968:	781a      	ldrb	r2, [r3, #0]
    996a:	0213      	lsls	r3, r2, #8
    996c:	189a      	adds	r2, r3, r2
    996e:	4b90      	ldr	r3, [pc, #576]	; (9bb0 <MiMAC_ReceivedPacket+0x340>)
    9970:	189b      	adds	r3, r3, r2
    9972:	789b      	ldrb	r3, [r3, #2]
    9974:	071b      	lsls	r3, r3, #28
    9976:	d500      	bpl.n	997a <MiMAC_ReceivedPacket+0x10a>
    9978:	e1d9      	b.n	9d2e <MiMAC_ReceivedPacket+0x4be>
		switch (RxBuffer[BankIndex].Payload[0] & 0x07) // check frame type
    997a:	4b8c      	ldr	r3, [pc, #560]	; (9bac <MiMAC_ReceivedPacket+0x33c>)
    997c:	7818      	ldrb	r0, [r3, #0]
    997e:	0202      	lsls	r2, r0, #8
    9980:	1812      	adds	r2, r2, r0
    9982:	4b8b      	ldr	r3, [pc, #556]	; (9bb0 <MiMAC_ReceivedPacket+0x340>)
    9984:	189b      	adds	r3, r3, r2
    9986:	7899      	ldrb	r1, [r3, #2]
    9988:	2307      	movs	r3, #7
    998a:	400b      	ands	r3, r1
    998c:	2b01      	cmp	r3, #1
    998e:	d100      	bne.n	9992 <MiMAC_ReceivedPacket+0x122>
    9990:	e24e      	b.n	9e30 <MiMAC_ReceivedPacket+0x5c0>
    9992:	2b00      	cmp	r3, #0
    9994:	d100      	bne.n	9998 <MiMAC_ReceivedPacket+0x128>
    9996:	e283      	b.n	9ea0 <MiMAC_ReceivedPacket+0x630>
    9998:	2b02      	cmp	r3, #2
    999a:	d100      	bne.n	999e <MiMAC_ReceivedPacket+0x12e>
    999c:	e286      	b.n	9eac <MiMAC_ReceivedPacket+0x63c>
    999e:	2b03      	cmp	r3, #3
    99a0:	d100      	bne.n	99a4 <MiMAC_ReceivedPacket+0x134>
    99a2:	e275      	b.n	9e90 <MiMAC_ReceivedPacket+0x620>
			MiMAC_DiscardPacket();
    99a4:	4b86      	ldr	r3, [pc, #536]	; (9bc0 <MiMAC_ReceivedPacket+0x350>)
    99a6:	4798      	blx	r3
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    99a8:	4b80      	ldr	r3, [pc, #512]	; (9bac <MiMAC_ReceivedPacket+0x33c>)
    99aa:	781a      	ldrb	r2, [r3, #0]
    99ac:	0213      	lsls	r3, r2, #8
    99ae:	189a      	adds	r2, r3, r2
    99b0:	4b7f      	ldr	r3, [pc, #508]	; (9bb0 <MiMAC_ReceivedPacket+0x340>)
    99b2:	189b      	adds	r3, r3, r2
    99b4:	789b      	ldrb	r3, [r3, #2]
			return false;
    99b6:	2400      	movs	r4, #0
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    99b8:	069b      	lsls	r3, r3, #26
    99ba:	d400      	bmi.n	99be <MiMAC_ReceivedPacket+0x14e>
    99bc:	e774      	b.n	98a8 <MiMAC_ReceivedPacket+0x38>
				MiRadioReceiveParam.action = RECEIVE_START;	
    99be:	a807      	add	r0, sp, #28
    99c0:	2300      	movs	r3, #0
    99c2:	7003      	strb	r3, [r0, #0]
				MiRadioReceiveParam.rxWindowSize = 0;
    99c4:	8043      	strh	r3, [r0, #2]
				RADIO_Receive(&MiRadioReceiveParam);
    99c6:	4b7f      	ldr	r3, [pc, #508]	; (9bc4 <MiMAC_ReceivedPacket+0x354>)
    99c8:	4798      	blx	r3
    99ca:	e76d      	b.n	98a8 <MiMAC_ReceivedPacket+0x38>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    99cc:	0211      	lsls	r1, r2, #8
    99ce:	1889      	adds	r1, r1, r2
    99d0:	4b77      	ldr	r3, [pc, #476]	; (9bb0 <MiMAC_ReceivedPacket+0x340>)
    99d2:	185b      	adds	r3, r3, r1
    99d4:	79dc      	ldrb	r4, [r3, #7]
    99d6:	2cff      	cmp	r4, #255	; 0xff
    99d8:	d01e      	beq.n	9a18 <MiMAC_ReceivedPacket+0x1a8>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    99da:	4978      	ldr	r1, [pc, #480]	; (9bbc <MiMAC_ReceivedPacket+0x34c>)
    99dc:	780e      	ldrb	r6, [r1, #0]
    99de:	2380      	movs	r3, #128	; 0x80
    99e0:	425b      	negs	r3, r3
    99e2:	4333      	orrs	r3, r6
    99e4:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    99e6:	2d00      	cmp	r5, #0
    99e8:	d000      	beq.n	99ec <MiMAC_ReceivedPacket+0x17c>
    99ea:	e27d      	b.n	9ee8 <MiMAC_ReceivedPacket+0x678>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    99ec:	4973      	ldr	r1, [pc, #460]	; (9bbc <MiMAC_ReceivedPacket+0x34c>)
    99ee:	4c70      	ldr	r4, [pc, #448]	; (9bb0 <MiMAC_ReceivedPacket+0x340>)
    99f0:	0203      	lsls	r3, r0, #8
    99f2:	1818      	adds	r0, r3, r0
    99f4:	1823      	adds	r3, r4, r0
    99f6:	7a5d      	ldrb	r5, [r3, #9]
    99f8:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    99fa:	7a9b      	ldrb	r3, [r3, #10]
    99fc:	744b      	strb	r3, [r1, #17]
    99fe:	0213      	lsls	r3, r2, #8
    9a00:	189a      	adds	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    9a02:	0013      	movs	r3, r2
    9a04:	330b      	adds	r3, #11
    9a06:	191b      	adds	r3, r3, r4
    9a08:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    9a0a:	5d03      	ldrb	r3, [r0, r4]
    9a0c:	3b15      	subs	r3, #21
    9a0e:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    9a10:	3213      	adds	r2, #19
    9a12:	1912      	adds	r2, r2, r4
    9a14:	608a      	str	r2, [r1, #8]
    9a16:	e043      	b.n	9aa0 <MiMAC_ReceivedPacket+0x230>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    9a18:	0211      	lsls	r1, r2, #8
    9a1a:	1889      	adds	r1, r1, r2
    9a1c:	4b64      	ldr	r3, [pc, #400]	; (9bb0 <MiMAC_ReceivedPacket+0x340>)
    9a1e:	185b      	adds	r3, r3, r1
    9a20:	7a1b      	ldrb	r3, [r3, #8]
    9a22:	2bff      	cmp	r3, #255	; 0xff
    9a24:	d1d9      	bne.n	99da <MiMAC_ReceivedPacket+0x16a>
				MACRxPacket.flags.bits.broadcast = 1;
    9a26:	4965      	ldr	r1, [pc, #404]	; (9bbc <MiMAC_ReceivedPacket+0x34c>)
    9a28:	780b      	ldrb	r3, [r1, #0]
    9a2a:	2404      	movs	r4, #4
    9a2c:	4323      	orrs	r3, r4
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    9a2e:	2480      	movs	r4, #128	; 0x80
    9a30:	4264      	negs	r4, r4
    9a32:	4323      	orrs	r3, r4
    9a34:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    9a36:	2d00      	cmp	r5, #0
    9a38:	d000      	beq.n	9a3c <MiMAC_ReceivedPacket+0x1cc>
    9a3a:	e264      	b.n	9f06 <MiMAC_ReceivedPacket+0x696>
    9a3c:	e7d6      	b.n	99ec <MiMAC_ReceivedPacket+0x17c>
					MiMAC_DiscardPacket();
    9a3e:	4b60      	ldr	r3, [pc, #384]	; (9bc0 <MiMAC_ReceivedPacket+0x350>)
    9a40:	4798      	blx	r3
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9a42:	4b5a      	ldr	r3, [pc, #360]	; (9bac <MiMAC_ReceivedPacket+0x33c>)
    9a44:	781a      	ldrb	r2, [r3, #0]
    9a46:	0213      	lsls	r3, r2, #8
    9a48:	189a      	adds	r2, r3, r2
    9a4a:	4b59      	ldr	r3, [pc, #356]	; (9bb0 <MiMAC_ReceivedPacket+0x340>)
    9a4c:	189b      	adds	r3, r3, r2
    9a4e:	789b      	ldrb	r3, [r3, #2]
					return false;
    9a50:	2400      	movs	r4, #0
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9a52:	069b      	lsls	r3, r3, #26
    9a54:	d400      	bmi.n	9a58 <MiMAC_ReceivedPacket+0x1e8>
    9a56:	e727      	b.n	98a8 <MiMAC_ReceivedPacket+0x38>
						MiRadioReceiveParam.action = RECEIVE_START;					
    9a58:	a807      	add	r0, sp, #28
    9a5a:	2300      	movs	r3, #0
    9a5c:	7003      	strb	r3, [r0, #0]
						MiRadioReceiveParam.rxWindowSize = 0;
    9a5e:	8043      	strh	r3, [r0, #2]
						RADIO_Receive(&MiRadioReceiveParam);
    9a60:	4b58      	ldr	r3, [pc, #352]	; (9bc4 <MiMAC_ReceivedPacket+0x354>)
    9a62:	4798      	blx	r3
    9a64:	e720      	b.n	98a8 <MiMAC_ReceivedPacket+0x38>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    9a66:	4955      	ldr	r1, [pc, #340]	; (9bbc <MiMAC_ReceivedPacket+0x34c>)
    9a68:	780c      	ldrb	r4, [r1, #0]
    9a6a:	2380      	movs	r3, #128	; 0x80
    9a6c:	425b      	negs	r3, r3
    9a6e:	4323      	orrs	r3, r4
    9a70:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    9a72:	2d00      	cmp	r5, #0
    9a74:	d133      	bne.n	9ade <MiMAC_ReceivedPacket+0x26e>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[13];
    9a76:	4951      	ldr	r1, [pc, #324]	; (9bbc <MiMAC_ReceivedPacket+0x34c>)
    9a78:	4c4d      	ldr	r4, [pc, #308]	; (9bb0 <MiMAC_ReceivedPacket+0x340>)
    9a7a:	0213      	lsls	r3, r2, #8
    9a7c:	1898      	adds	r0, r3, r2
    9a7e:	1823      	adds	r3, r4, r0
    9a80:	7bdd      	ldrb	r5, [r3, #15]
    9a82:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[14];
    9a84:	7c1b      	ldrb	r3, [r3, #16]
    9a86:	744b      	strb	r3, [r1, #17]
    9a88:	0213      	lsls	r3, r2, #8
    9a8a:	189a      	adds	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[15]);
    9a8c:	0013      	movs	r3, r2
    9a8e:	3311      	adds	r3, #17
    9a90:	191b      	adds	r3, r3, r4
    9a92:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 27;
    9a94:	5d03      	ldrb	r3, [r0, r4]
    9a96:	3b1b      	subs	r3, #27
    9a98:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[23]);
    9a9a:	3219      	adds	r2, #25
    9a9c:	1912      	adds	r2, r2, r4
    9a9e:	608a      	str	r2, [r1, #8]
		if (RxBuffer[BankIndex].Payload[0] & 0x08)
    9aa0:	4b42      	ldr	r3, [pc, #264]	; (9bac <MiMAC_ReceivedPacket+0x33c>)
    9aa2:	781a      	ldrb	r2, [r3, #0]
    9aa4:	0213      	lsls	r3, r2, #8
    9aa6:	189a      	adds	r2, r3, r2
    9aa8:	4b41      	ldr	r3, [pc, #260]	; (9bb0 <MiMAC_ReceivedPacket+0x340>)
    9aaa:	189b      	adds	r3, r3, r2
    9aac:	789b      	ldrb	r3, [r3, #2]
    9aae:	071b      	lsls	r3, r3, #28
    9ab0:	d400      	bmi.n	9ab4 <MiMAC_ReceivedPacket+0x244>
    9ab2:	e762      	b.n	997a <MiMAC_ReceivedPacket+0x10a>
			FrameCounter.v[0] = MACRxPacket.Payload[0];
    9ab4:	4b41      	ldr	r3, [pc, #260]	; (9bbc <MiMAC_ReceivedPacket+0x34c>)
    9ab6:	689b      	ldr	r3, [r3, #8]
			FrameCounter.v[1] = MACRxPacket.Payload[1];
    9ab8:	785f      	ldrb	r7, [r3, #1]
    9aba:	023f      	lsls	r7, r7, #8
    9abc:	781a      	ldrb	r2, [r3, #0]
    9abe:	4317      	orrs	r7, r2
			FrameCounter.v[2] = MACRxPacket.Payload[2];
    9ac0:	789a      	ldrb	r2, [r3, #2]
    9ac2:	0412      	lsls	r2, r2, #16
    9ac4:	4940      	ldr	r1, [pc, #256]	; (9bc8 <MiMAC_ReceivedPacket+0x358>)
    9ac6:	400f      	ands	r7, r1
    9ac8:	4317      	orrs	r7, r2
			FrameCounter.v[3] = MACRxPacket.Payload[3];
    9aca:	78db      	ldrb	r3, [r3, #3]
    9acc:	061b      	lsls	r3, r3, #24
    9ace:	023f      	lsls	r7, r7, #8
    9ad0:	0a3f      	lsrs	r7, r7, #8
    9ad2:	431f      	orrs	r7, r3
    9ad4:	4d3d      	ldr	r5, [pc, #244]	; (9bcc <MiMAC_ReceivedPacket+0x35c>)
    9ad6:	2600      	movs	r6, #0
			for (i = 0; i < CONNECTION_SIZE; i++)
    9ad8:	2400      	movs	r4, #0
				if ((ConnectionTable[i].status.bits.isValid) &&
    9ada:	46a8      	mov	r8, r5
    9adc:	e141      	b.n	9d62 <MiMAC_ReceivedPacket+0x4f2>
				if(!(isSameAddress((uint8_t *)&DevIEEEaddr, &RxBuffer[BankIndex].Payload[5])))
    9ade:	0211      	lsls	r1, r2, #8
    9ae0:	1889      	adds	r1, r1, r2
    9ae2:	3107      	adds	r1, #7
    9ae4:	4a32      	ldr	r2, [pc, #200]	; (9bb0 <MiMAC_ReceivedPacket+0x340>)
    9ae6:	1889      	adds	r1, r1, r2
    9ae8:	4839      	ldr	r0, [pc, #228]	; (9bd0 <MiMAC_ReceivedPacket+0x360>)
    9aea:	4b3a      	ldr	r3, [pc, #232]	; (9bd4 <MiMAC_ReceivedPacket+0x364>)
    9aec:	4798      	blx	r3
    9aee:	1e04      	subs	r4, r0, #0
    9af0:	d015      	beq.n	9b1e <MiMAC_ReceivedPacket+0x2ae>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    9af2:	4b2e      	ldr	r3, [pc, #184]	; (9bac <MiMAC_ReceivedPacket+0x33c>)
    9af4:	7818      	ldrb	r0, [r3, #0]
    9af6:	4a31      	ldr	r2, [pc, #196]	; (9bbc <MiMAC_ReceivedPacket+0x34c>)
    9af8:	492d      	ldr	r1, [pc, #180]	; (9bb0 <MiMAC_ReceivedPacket+0x340>)
    9afa:	0203      	lsls	r3, r0, #8
    9afc:	181b      	adds	r3, r3, r0
    9afe:	18c8      	adds	r0, r1, r3
    9b00:	7944      	ldrb	r4, [r0, #5]
    9b02:	7414      	strb	r4, [r2, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    9b04:	7980      	ldrb	r0, [r0, #6]
    9b06:	7450      	strb	r0, [r2, #17]
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
    9b08:	0018      	movs	r0, r3
    9b0a:	300f      	adds	r0, #15
    9b0c:	1840      	adds	r0, r0, r1
    9b0e:	6050      	str	r0, [r2, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 25;
    9b10:	5c58      	ldrb	r0, [r3, r1]
    9b12:	3819      	subs	r0, #25
    9b14:	7310      	strb	r0, [r2, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[21]);
    9b16:	3317      	adds	r3, #23
    9b18:	185b      	adds	r3, r3, r1
    9b1a:	6093      	str	r3, [r2, #8]
    9b1c:	e7c0      	b.n	9aa0 <MiMAC_ReceivedPacket+0x230>
					MiMAC_DiscardPacket();
    9b1e:	4b28      	ldr	r3, [pc, #160]	; (9bc0 <MiMAC_ReceivedPacket+0x350>)
    9b20:	4798      	blx	r3
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9b22:	4b22      	ldr	r3, [pc, #136]	; (9bac <MiMAC_ReceivedPacket+0x33c>)
    9b24:	781a      	ldrb	r2, [r3, #0]
    9b26:	0213      	lsls	r3, r2, #8
    9b28:	189a      	adds	r2, r3, r2
    9b2a:	4b21      	ldr	r3, [pc, #132]	; (9bb0 <MiMAC_ReceivedPacket+0x340>)
    9b2c:	189b      	adds	r3, r3, r2
    9b2e:	789b      	ldrb	r3, [r3, #2]
    9b30:	069b      	lsls	r3, r3, #26
    9b32:	d400      	bmi.n	9b36 <MiMAC_ReceivedPacket+0x2c6>
    9b34:	e6b8      	b.n	98a8 <MiMAC_ReceivedPacket+0x38>
						MiRadioReceiveParam.action = RECEIVE_START;					
    9b36:	a807      	add	r0, sp, #28
    9b38:	2300      	movs	r3, #0
    9b3a:	7003      	strb	r3, [r0, #0]
						MiRadioReceiveParam.rxWindowSize = 0;
    9b3c:	8043      	strh	r3, [r0, #2]
						RADIO_Receive(&MiRadioReceiveParam);
    9b3e:	4b21      	ldr	r3, [pc, #132]	; (9bc4 <MiMAC_ReceivedPacket+0x354>)
    9b40:	4798      	blx	r3
    9b42:	e6b1      	b.n	98a8 <MiMAC_ReceivedPacket+0x38>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    9b44:	0211      	lsls	r1, r2, #8
    9b46:	1889      	adds	r1, r1, r2
    9b48:	4b19      	ldr	r3, [pc, #100]	; (9bb0 <MiMAC_ReceivedPacket+0x340>)
    9b4a:	185b      	adds	r3, r3, r1
    9b4c:	79dc      	ldrb	r4, [r3, #7]
    9b4e:	2cff      	cmp	r4, #255	; 0xff
    9b50:	d01f      	beq.n	9b92 <MiMAC_ReceivedPacket+0x322>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    9b52:	4b1a      	ldr	r3, [pc, #104]	; (9bbc <MiMAC_ReceivedPacket+0x34c>)
    9b54:	781e      	ldrb	r6, [r3, #0]
    9b56:	2180      	movs	r1, #128	; 0x80
    9b58:	4249      	negs	r1, r1
    9b5a:	4331      	orrs	r1, r6
    9b5c:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    9b5e:	2101      	movs	r1, #1
    9b60:	73d9      	strb	r1, [r3, #15]
				if (bIntraPAN == false)
    9b62:	2d00      	cmp	r5, #0
    9b64:	d138      	bne.n	9bd8 <MiMAC_ReceivedPacket+0x368>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    9b66:	0019      	movs	r1, r3
    9b68:	4c11      	ldr	r4, [pc, #68]	; (9bb0 <MiMAC_ReceivedPacket+0x340>)
    9b6a:	0203      	lsls	r3, r0, #8
    9b6c:	1818      	adds	r0, r3, r0
    9b6e:	1823      	adds	r3, r4, r0
    9b70:	7a5d      	ldrb	r5, [r3, #9]
    9b72:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    9b74:	7a9b      	ldrb	r3, [r3, #10]
    9b76:	744b      	strb	r3, [r1, #17]
    9b78:	0213      	lsls	r3, r2, #8
    9b7a:	189a      	adds	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    9b7c:	0013      	movs	r3, r2
    9b7e:	330b      	adds	r3, #11
    9b80:	191b      	adds	r3, r3, r4
    9b82:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 15;
    9b84:	5d03      	ldrb	r3, [r0, r4]
    9b86:	3b0f      	subs	r3, #15
    9b88:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[11]);
    9b8a:	320d      	adds	r2, #13
    9b8c:	1912      	adds	r2, r2, r4
    9b8e:	608a      	str	r2, [r1, #8]
    9b90:	e6e9      	b.n	9966 <MiMAC_ReceivedPacket+0xf6>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    9b92:	0211      	lsls	r1, r2, #8
    9b94:	1889      	adds	r1, r1, r2
    9b96:	4b06      	ldr	r3, [pc, #24]	; (9bb0 <MiMAC_ReceivedPacket+0x340>)
    9b98:	185b      	adds	r3, r3, r1
    9b9a:	7a1b      	ldrb	r3, [r3, #8]
    9b9c:	2bff      	cmp	r3, #255	; 0xff
    9b9e:	d1d8      	bne.n	9b52 <MiMAC_ReceivedPacket+0x2e2>
					MACRxPacket.flags.bits.broadcast = 1;
    9ba0:	4906      	ldr	r1, [pc, #24]	; (9bbc <MiMAC_ReceivedPacket+0x34c>)
    9ba2:	780b      	ldrb	r3, [r1, #0]
    9ba4:	2604      	movs	r6, #4
    9ba6:	4333      	orrs	r3, r6
    9ba8:	700b      	strb	r3, [r1, #0]
    9baa:	e7d2      	b.n	9b52 <MiMAC_ReceivedPacket+0x2e2>
    9bac:	2000000f 	.word	0x2000000f
    9bb0:	20002258 	.word	0x20002258
    9bb4:	00000202 	.word	0x00000202
    9bb8:	00000303 	.word	0x00000303
    9bbc:	200026a0 	.word	0x200026a0
    9bc0:	000097f1 	.word	0x000097f1
    9bc4:	0000ef31 	.word	0x0000ef31
    9bc8:	ff00ffff 	.word	0xff00ffff
    9bcc:	20002668 	.word	0x20002668
    9bd0:	20002250 	.word	0x20002250
    9bd4:	0000a665 	.word	0x0000a665
					if (!(((RxBuffer[BankIndex].Payload[5] == 0xFF) & (RxBuffer[BankIndex].Payload[6] == 0xFF)) ||((RxBuffer[BankIndex].Payload[5] == DevShortAddress[0]) & (RxBuffer[BankIndex].Payload[6] == DevShortAddress[1]))) )
    9bd8:	0201      	lsls	r1, r0, #8
    9bda:	1809      	adds	r1, r1, r0
    9bdc:	4bd7      	ldr	r3, [pc, #860]	; (9f3c <MiMAC_ReceivedPacket+0x6cc>)
    9bde:	185b      	adds	r3, r3, r1
    9be0:	7a1b      	ldrb	r3, [r3, #8]
    9be2:	2cff      	cmp	r4, #255	; 0xff
    9be4:	d117      	bne.n	9c16 <MiMAC_ReceivedPacket+0x3a6>
    9be6:	2bff      	cmp	r3, #255	; 0xff
    9be8:	d115      	bne.n	9c16 <MiMAC_ReceivedPacket+0x3a6>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    9bea:	49d5      	ldr	r1, [pc, #852]	; (9f40 <MiMAC_ReceivedPacket+0x6d0>)
    9bec:	4cd3      	ldr	r4, [pc, #844]	; (9f3c <MiMAC_ReceivedPacket+0x6cc>)
    9bee:	0203      	lsls	r3, r0, #8
    9bf0:	1818      	adds	r0, r3, r0
    9bf2:	1823      	adds	r3, r4, r0
    9bf4:	795d      	ldrb	r5, [r3, #5]
    9bf6:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    9bf8:	799b      	ldrb	r3, [r3, #6]
    9bfa:	744b      	strb	r3, [r1, #17]
    9bfc:	0213      	lsls	r3, r2, #8
    9bfe:	189a      	adds	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    9c00:	0013      	movs	r3, r2
    9c02:	3309      	adds	r3, #9
    9c04:	191b      	adds	r3, r3, r4
    9c06:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 13;
    9c08:	5d03      	ldrb	r3, [r0, r4]
    9c0a:	3b0d      	subs	r3, #13
    9c0c:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[9]);
    9c0e:	320b      	adds	r2, #11
    9c10:	1912      	adds	r2, r2, r4
    9c12:	608a      	str	r2, [r1, #8]
    9c14:	e6a7      	b.n	9966 <MiMAC_ReceivedPacket+0xf6>
					if (!(((RxBuffer[BankIndex].Payload[5] == 0xFF) & (RxBuffer[BankIndex].Payload[6] == 0xFF)) ||((RxBuffer[BankIndex].Payload[5] == DevShortAddress[0]) & (RxBuffer[BankIndex].Payload[6] == DevShortAddress[1]))) )
    9c16:	49cb      	ldr	r1, [pc, #812]	; (9f44 <MiMAC_ReceivedPacket+0x6d4>)
    9c18:	7809      	ldrb	r1, [r1, #0]
    9c1a:	42a1      	cmp	r1, r4
    9c1c:	d103      	bne.n	9c26 <MiMAC_ReceivedPacket+0x3b6>
    9c1e:	49c9      	ldr	r1, [pc, #804]	; (9f44 <MiMAC_ReceivedPacket+0x6d4>)
    9c20:	7849      	ldrb	r1, [r1, #1]
    9c22:	4299      	cmp	r1, r3
    9c24:	d0e1      	beq.n	9bea <MiMAC_ReceivedPacket+0x37a>
						MiMAC_DiscardPacket();
    9c26:	4bc8      	ldr	r3, [pc, #800]	; (9f48 <MiMAC_ReceivedPacket+0x6d8>)
    9c28:	4798      	blx	r3
						if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9c2a:	4bc8      	ldr	r3, [pc, #800]	; (9f4c <MiMAC_ReceivedPacket+0x6dc>)
    9c2c:	781a      	ldrb	r2, [r3, #0]
    9c2e:	0213      	lsls	r3, r2, #8
    9c30:	189a      	adds	r2, r3, r2
    9c32:	4bc2      	ldr	r3, [pc, #776]	; (9f3c <MiMAC_ReceivedPacket+0x6cc>)
    9c34:	189b      	adds	r3, r3, r2
    9c36:	789b      	ldrb	r3, [r3, #2]
						return false;
    9c38:	2400      	movs	r4, #0
						if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9c3a:	069b      	lsls	r3, r3, #26
    9c3c:	d400      	bmi.n	9c40 <MiMAC_ReceivedPacket+0x3d0>
    9c3e:	e633      	b.n	98a8 <MiMAC_ReceivedPacket+0x38>
							MiRadioReceiveParam.action = RECEIVE_START;	
    9c40:	a807      	add	r0, sp, #28
    9c42:	2300      	movs	r3, #0
    9c44:	7003      	strb	r3, [r0, #0]
							MiRadioReceiveParam.rxWindowSize = 0;
    9c46:	8043      	strh	r3, [r0, #2]
							RADIO_Receive(&MiRadioReceiveParam);
    9c48:	4bc1      	ldr	r3, [pc, #772]	; (9f50 <MiMAC_ReceivedPacket+0x6e0>)
    9c4a:	4798      	blx	r3
    9c4c:	e62c      	b.n	98a8 <MiMAC_ReceivedPacket+0x38>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    9c4e:	4bbc      	ldr	r3, [pc, #752]	; (9f40 <MiMAC_ReceivedPacket+0x6d0>)
    9c50:	781c      	ldrb	r4, [r3, #0]
    9c52:	2180      	movs	r1, #128	; 0x80
    9c54:	4249      	negs	r1, r1
    9c56:	4321      	orrs	r1, r4
    9c58:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    9c5a:	2101      	movs	r1, #1
    9c5c:	73d9      	strb	r1, [r3, #15]
				if (bIntraPAN) // check if it is intraPAN
    9c5e:	2d00      	cmp	r5, #0
    9c60:	d115      	bne.n	9c8e <MiMAC_ReceivedPacket+0x41e>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[12];
    9c62:	49b7      	ldr	r1, [pc, #732]	; (9f40 <MiMAC_ReceivedPacket+0x6d0>)
    9c64:	4cb5      	ldr	r4, [pc, #724]	; (9f3c <MiMAC_ReceivedPacket+0x6cc>)
    9c66:	0213      	lsls	r3, r2, #8
    9c68:	1898      	adds	r0, r3, r2
    9c6a:	1823      	adds	r3, r4, r0
    9c6c:	7b9d      	ldrb	r5, [r3, #14]
    9c6e:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[13];
    9c70:	7bdb      	ldrb	r3, [r3, #15]
    9c72:	744b      	strb	r3, [r1, #17]
    9c74:	0213      	lsls	r3, r2, #8
    9c76:	189a      	adds	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[14]);
    9c78:	0013      	movs	r3, r2
    9c7a:	3310      	adds	r3, #16
    9c7c:	191b      	adds	r3, r3, r4
    9c7e:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    9c80:	5d03      	ldrb	r3, [r0, r4]
    9c82:	3b15      	subs	r3, #21
    9c84:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    9c86:	3213      	adds	r2, #19
    9c88:	1912      	adds	r2, r2, r4
    9c8a:	608a      	str	r2, [r1, #8]
    9c8c:	e66b      	b.n	9966 <MiMAC_ReceivedPacket+0xf6>
					if(!(isSameAddress((uint8_t *)&DevIEEEaddr, &RxBuffer[BankIndex].Payload[5])))
    9c8e:	0211      	lsls	r1, r2, #8
    9c90:	1889      	adds	r1, r1, r2
    9c92:	3107      	adds	r1, #7
    9c94:	4aa9      	ldr	r2, [pc, #676]	; (9f3c <MiMAC_ReceivedPacket+0x6cc>)
    9c96:	1889      	adds	r1, r1, r2
    9c98:	48ae      	ldr	r0, [pc, #696]	; (9f54 <MiMAC_ReceivedPacket+0x6e4>)
    9c9a:	4baf      	ldr	r3, [pc, #700]	; (9f58 <MiMAC_ReceivedPacket+0x6e8>)
    9c9c:	4798      	blx	r3
    9c9e:	1e04      	subs	r4, r0, #0
    9ca0:	d011      	beq.n	9cc6 <MiMAC_ReceivedPacket+0x456>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    9ca2:	4baa      	ldr	r3, [pc, #680]	; (9f4c <MiMAC_ReceivedPacket+0x6dc>)
    9ca4:	7818      	ldrb	r0, [r3, #0]
    9ca6:	4aa6      	ldr	r2, [pc, #664]	; (9f40 <MiMAC_ReceivedPacket+0x6d0>)
    9ca8:	49a4      	ldr	r1, [pc, #656]	; (9f3c <MiMAC_ReceivedPacket+0x6cc>)
    9caa:	0203      	lsls	r3, r0, #8
    9cac:	181b      	adds	r3, r3, r0
    9cae:	18c8      	adds	r0, r1, r3
    9cb0:	7944      	ldrb	r4, [r0, #5]
    9cb2:	7414      	strb	r4, [r2, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    9cb4:	7980      	ldrb	r0, [r0, #6]
    9cb6:	7450      	strb	r0, [r2, #17]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    9cb8:	5c58      	ldrb	r0, [r3, r1]
    9cba:	3813      	subs	r0, #19
    9cbc:	7310      	strb	r0, [r2, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    9cbe:	3311      	adds	r3, #17
    9cc0:	185b      	adds	r3, r3, r1
    9cc2:	6093      	str	r3, [r2, #8]
    9cc4:	e64f      	b.n	9966 <MiMAC_ReceivedPacket+0xf6>
						MiMAC_DiscardPacket();
    9cc6:	4ba0      	ldr	r3, [pc, #640]	; (9f48 <MiMAC_ReceivedPacket+0x6d8>)
    9cc8:	4798      	blx	r3
						if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9cca:	4ba0      	ldr	r3, [pc, #640]	; (9f4c <MiMAC_ReceivedPacket+0x6dc>)
    9ccc:	781a      	ldrb	r2, [r3, #0]
    9cce:	0213      	lsls	r3, r2, #8
    9cd0:	189a      	adds	r2, r3, r2
    9cd2:	4b9a      	ldr	r3, [pc, #616]	; (9f3c <MiMAC_ReceivedPacket+0x6cc>)
    9cd4:	189b      	adds	r3, r3, r2
    9cd6:	789b      	ldrb	r3, [r3, #2]
    9cd8:	069b      	lsls	r3, r3, #26
    9cda:	d400      	bmi.n	9cde <MiMAC_ReceivedPacket+0x46e>
    9cdc:	e5e4      	b.n	98a8 <MiMAC_ReceivedPacket+0x38>
							MiRadioReceiveParam.action = RECEIVE_START;	
    9cde:	a807      	add	r0, sp, #28
    9ce0:	2300      	movs	r3, #0
    9ce2:	7003      	strb	r3, [r0, #0]
							MiRadioReceiveParam.rxWindowSize = 0;
    9ce4:	8043      	strh	r3, [r0, #2]
							RADIO_Receive(&MiRadioReceiveParam);
    9ce6:	4b9a      	ldr	r3, [pc, #616]	; (9f50 <MiMAC_ReceivedPacket+0x6e0>)
    9ce8:	4798      	blx	r3
    9cea:	e5dd      	b.n	98a8 <MiMAC_ReceivedPacket+0x38>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    9cec:	0211      	lsls	r1, r2, #8
    9cee:	1889      	adds	r1, r1, r2
    9cf0:	4b92      	ldr	r3, [pc, #584]	; (9f3c <MiMAC_ReceivedPacket+0x6cc>)
    9cf2:	185b      	adds	r3, r3, r1
    9cf4:	79db      	ldrb	r3, [r3, #7]
    9cf6:	2bff      	cmp	r3, #255	; 0xff
    9cf8:	d00c      	beq.n	9d14 <MiMAC_ReceivedPacket+0x4a4>
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 10;
    9cfa:	4991      	ldr	r1, [pc, #580]	; (9f40 <MiMAC_ReceivedPacket+0x6d0>)
    9cfc:	4c8f      	ldr	r4, [pc, #572]	; (9f3c <MiMAC_ReceivedPacket+0x6cc>)
    9cfe:	0203      	lsls	r3, r0, #8
    9d00:	1818      	adds	r0, r3, r0
    9d02:	5d03      	ldrb	r3, [r0, r4]
    9d04:	3b0a      	subs	r3, #10
    9d06:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    9d08:	0213      	lsls	r3, r2, #8
    9d0a:	189a      	adds	r2, r3, r2
    9d0c:	3209      	adds	r2, #9
    9d0e:	1912      	adds	r2, r2, r4
    9d10:	608a      	str	r2, [r1, #8]
			break;
    9d12:	e628      	b.n	9966 <MiMAC_ReceivedPacket+0xf6>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    9d14:	0211      	lsls	r1, r2, #8
    9d16:	1889      	adds	r1, r1, r2
    9d18:	4b88      	ldr	r3, [pc, #544]	; (9f3c <MiMAC_ReceivedPacket+0x6cc>)
    9d1a:	185b      	adds	r3, r3, r1
    9d1c:	7a1b      	ldrb	r3, [r3, #8]
    9d1e:	2bff      	cmp	r3, #255	; 0xff
    9d20:	d1eb      	bne.n	9cfa <MiMAC_ReceivedPacket+0x48a>
					MACRxPacket.flags.bits.broadcast = 1;
    9d22:	4987      	ldr	r1, [pc, #540]	; (9f40 <MiMAC_ReceivedPacket+0x6d0>)
    9d24:	780b      	ldrb	r3, [r1, #0]
    9d26:	2404      	movs	r4, #4
    9d28:	4323      	orrs	r3, r4
    9d2a:	700b      	strb	r3, [r1, #0]
    9d2c:	e7e5      	b.n	9cfa <MiMAC_ReceivedPacket+0x48a>
				MiMAC_DiscardPacket();
    9d2e:	4b86      	ldr	r3, [pc, #536]	; (9f48 <MiMAC_ReceivedPacket+0x6d8>)
    9d30:	4798      	blx	r3
				if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9d32:	4b86      	ldr	r3, [pc, #536]	; (9f4c <MiMAC_ReceivedPacket+0x6dc>)
    9d34:	781a      	ldrb	r2, [r3, #0]
    9d36:	0213      	lsls	r3, r2, #8
    9d38:	189a      	adds	r2, r3, r2
    9d3a:	4b80      	ldr	r3, [pc, #512]	; (9f3c <MiMAC_ReceivedPacket+0x6cc>)
    9d3c:	189b      	adds	r3, r3, r2
    9d3e:	789b      	ldrb	r3, [r3, #2]
    9d40:	069b      	lsls	r3, r3, #26
    9d42:	d401      	bmi.n	9d48 <MiMAC_ReceivedPacket+0x4d8>
				return false;
    9d44:	2400      	movs	r4, #0
    9d46:	e5af      	b.n	98a8 <MiMAC_ReceivedPacket+0x38>
					MiRadioReceiveParam.action = RECEIVE_START;					
    9d48:	a807      	add	r0, sp, #28
    9d4a:	2300      	movs	r3, #0
    9d4c:	7003      	strb	r3, [r0, #0]
					MiRadioReceiveParam.rxWindowSize = 0;
    9d4e:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&MiRadioReceiveParam);
    9d50:	4b7f      	ldr	r3, [pc, #508]	; (9f50 <MiMAC_ReceivedPacket+0x6e0>)
    9d52:	4798      	blx	r3
    9d54:	e7f6      	b.n	9d44 <MiMAC_ReceivedPacket+0x4d4>
			for (i = 0; i < CONNECTION_SIZE; i++)
    9d56:	3401      	adds	r4, #1
    9d58:	b2e4      	uxtb	r4, r4
    9d5a:	3601      	adds	r6, #1
    9d5c:	350a      	adds	r5, #10
    9d5e:	2c05      	cmp	r4, #5
    9d60:	d014      	beq.n	9d8c <MiMAC_ReceivedPacket+0x51c>
				if ((ConnectionTable[i].status.bits.isValid) &&
    9d62:	00b3      	lsls	r3, r6, #2
    9d64:	199b      	adds	r3, r3, r6
    9d66:	005b      	lsls	r3, r3, #1
    9d68:	4443      	add	r3, r8
    9d6a:	7a1b      	ldrb	r3, [r3, #8]
    9d6c:	09db      	lsrs	r3, r3, #7
    9d6e:	d0f2      	beq.n	9d56 <MiMAC_ReceivedPacket+0x4e6>
				isSameAddress(ConnectionTable[i].Address, MACRxPacket.SourceAddress))
    9d70:	4b73      	ldr	r3, [pc, #460]	; (9f40 <MiMAC_ReceivedPacket+0x6d0>)
    9d72:	6859      	ldr	r1, [r3, #4]
    9d74:	0028      	movs	r0, r5
    9d76:	4b78      	ldr	r3, [pc, #480]	; (9f58 <MiMAC_ReceivedPacket+0x6e8>)
    9d78:	4798      	blx	r3
				if ((ConnectionTable[i].status.bits.isValid) &&
    9d7a:	2800      	cmp	r0, #0
    9d7c:	d0eb      	beq.n	9d56 <MiMAC_ReceivedPacket+0x4e6>
			if (i < CONNECTION_SIZE)
    9d7e:	2c04      	cmp	r4, #4
    9d80:	d804      	bhi.n	9d8c <MiMAC_ReceivedPacket+0x51c>
				if (IncomingFrameCounter[i].Val >= FrameCounter.Val)	// drop the packet if saved frame counter (IncomingFrameCounter) is equal or greater than the lastest received packet (FrameCounter.Val)
    9d82:	00a3      	lsls	r3, r4, #2
    9d84:	4a75      	ldr	r2, [pc, #468]	; (9f5c <MiMAC_ReceivedPacket+0x6ec>)
    9d86:	589b      	ldr	r3, [r3, r2]
    9d88:	42bb      	cmp	r3, r7
    9d8a:	d22d      	bcs.n	9de8 <MiMAC_ReceivedPacket+0x578>
			MACRxPacket.PayloadLen -= 5;  // used to 5 for frame counter now -4 also added for MIC integrity
    9d8c:	496c      	ldr	r1, [pc, #432]	; (9f40 <MiMAC_ReceivedPacket+0x6d0>)
    9d8e:	7b0b      	ldrb	r3, [r1, #12]
    9d90:	3b05      	subs	r3, #5
    9d92:	b2db      	uxtb	r3, r3
    9d94:	730b      	strb	r3, [r1, #12]
			received_mic_values[0] = MACRxPacket.Payload[MACRxPacket.PayloadLen+1];
    9d96:	6888      	ldr	r0, [r1, #8]
    9d98:	18c3      	adds	r3, r0, r3
    9d9a:	785d      	ldrb	r5, [r3, #1]
    9d9c:	4a70      	ldr	r2, [pc, #448]	; (9f60 <MiMAC_ReceivedPacket+0x6f0>)
    9d9e:	7015      	strb	r5, [r2, #0]
			received_mic_values[1] = MACRxPacket.Payload[MACRxPacket.PayloadLen+2];
    9da0:	789d      	ldrb	r5, [r3, #2]
    9da2:	7055      	strb	r5, [r2, #1]
			received_mic_values[2] = MACRxPacket.Payload[MACRxPacket.PayloadLen+3];
    9da4:	78dd      	ldrb	r5, [r3, #3]
    9da6:	7095      	strb	r5, [r2, #2]
			received_mic_values[3] = MACRxPacket.Payload[MACRxPacket.PayloadLen+4];
    9da8:	791b      	ldrb	r3, [r3, #4]
    9daa:	70d3      	strb	r3, [r2, #3]
			if (false == DataDecrypt(&(MACRxPacket.Payload[5]), &(MACRxPacket.PayloadLen), MACRxPacket.SourceAddress, FrameCounter, RxBuffer[BankIndex].Payload[0]))
    9dac:	684a      	ldr	r2, [r1, #4]
    9dae:	310c      	adds	r1, #12
    9db0:	3005      	adds	r0, #5
    9db2:	4b66      	ldr	r3, [pc, #408]	; (9f4c <MiMAC_ReceivedPacket+0x6dc>)
    9db4:	781d      	ldrb	r5, [r3, #0]
    9db6:	022b      	lsls	r3, r5, #8
    9db8:	195d      	adds	r5, r3, r5
    9dba:	4b60      	ldr	r3, [pc, #384]	; (9f3c <MiMAC_ReceivedPacket+0x6cc>)
    9dbc:	195b      	adds	r3, r3, r5
    9dbe:	789b      	ldrb	r3, [r3, #2]
    9dc0:	9300      	str	r3, [sp, #0]
    9dc2:	003b      	movs	r3, r7
    9dc4:	4d67      	ldr	r5, [pc, #412]	; (9f64 <MiMAC_ReceivedPacket+0x6f4>)
    9dc6:	47a8      	blx	r5
    9dc8:	2800      	cmp	r0, #0
    9dca:	d01f      	beq.n	9e0c <MiMAC_ReceivedPacket+0x59c>
			if (i < CONNECTION_SIZE)
    9dcc:	2c04      	cmp	r4, #4
    9dce:	d802      	bhi.n	9dd6 <MiMAC_ReceivedPacket+0x566>
				IncomingFrameCounter[i].Val = FrameCounter.Val;
    9dd0:	00a4      	lsls	r4, r4, #2
    9dd2:	4b62      	ldr	r3, [pc, #392]	; (9f5c <MiMAC_ReceivedPacket+0x6ec>)
    9dd4:	50e7      	str	r7, [r4, r3]
			MACRxPacket.Payload = &(MACRxPacket.Payload[5]);
    9dd6:	4b5a      	ldr	r3, [pc, #360]	; (9f40 <MiMAC_ReceivedPacket+0x6d0>)
    9dd8:	689a      	ldr	r2, [r3, #8]
    9dda:	3205      	adds	r2, #5
    9ddc:	609a      	str	r2, [r3, #8]
			MACRxPacket.flags.bits.secEn = 1;
    9dde:	781a      	ldrb	r2, [r3, #0]
    9de0:	2108      	movs	r1, #8
    9de2:	430a      	orrs	r2, r1
    9de4:	701a      	strb	r2, [r3, #0]
    9de6:	e5c8      	b.n	997a <MiMAC_ReceivedPacket+0x10a>
					MiMAC_DiscardPacket();
    9de8:	4b57      	ldr	r3, [pc, #348]	; (9f48 <MiMAC_ReceivedPacket+0x6d8>)
    9dea:	4798      	blx	r3
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9dec:	4b57      	ldr	r3, [pc, #348]	; (9f4c <MiMAC_ReceivedPacket+0x6dc>)
    9dee:	781a      	ldrb	r2, [r3, #0]
    9df0:	0213      	lsls	r3, r2, #8
    9df2:	189a      	adds	r2, r3, r2
    9df4:	4b51      	ldr	r3, [pc, #324]	; (9f3c <MiMAC_ReceivedPacket+0x6cc>)
    9df6:	189b      	adds	r3, r3, r2
    9df8:	789b      	ldrb	r3, [r3, #2]
    9dfa:	069b      	lsls	r3, r3, #26
    9dfc:	d5a2      	bpl.n	9d44 <MiMAC_ReceivedPacket+0x4d4>
						MiRadioReceiveParam.action = RECEIVE_START;					
    9dfe:	a807      	add	r0, sp, #28
    9e00:	2300      	movs	r3, #0
    9e02:	7003      	strb	r3, [r0, #0]
						MiRadioReceiveParam.rxWindowSize = 0;
    9e04:	8043      	strh	r3, [r0, #2]
						RADIO_Receive(&MiRadioReceiveParam);
    9e06:	4b52      	ldr	r3, [pc, #328]	; (9f50 <MiMAC_ReceivedPacket+0x6e0>)
    9e08:	4798      	blx	r3
    9e0a:	e79b      	b.n	9d44 <MiMAC_ReceivedPacket+0x4d4>
				MiMAC_DiscardPacket();
    9e0c:	4b4e      	ldr	r3, [pc, #312]	; (9f48 <MiMAC_ReceivedPacket+0x6d8>)
    9e0e:	4798      	blx	r3
				if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9e10:	4b4e      	ldr	r3, [pc, #312]	; (9f4c <MiMAC_ReceivedPacket+0x6dc>)
    9e12:	781a      	ldrb	r2, [r3, #0]
    9e14:	0213      	lsls	r3, r2, #8
    9e16:	189a      	adds	r2, r3, r2
    9e18:	4b48      	ldr	r3, [pc, #288]	; (9f3c <MiMAC_ReceivedPacket+0x6cc>)
    9e1a:	189b      	adds	r3, r3, r2
    9e1c:	789b      	ldrb	r3, [r3, #2]
    9e1e:	069b      	lsls	r3, r3, #26
    9e20:	d590      	bpl.n	9d44 <MiMAC_ReceivedPacket+0x4d4>
					MiRadioReceiveParam.action = RECEIVE_START;					
    9e22:	a807      	add	r0, sp, #28
    9e24:	2300      	movs	r3, #0
    9e26:	7003      	strb	r3, [r0, #0]
					MiRadioReceiveParam.rxWindowSize = 0;
    9e28:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&MiRadioReceiveParam);
    9e2a:	4b49      	ldr	r3, [pc, #292]	; (9f50 <MiMAC_ReceivedPacket+0x6e0>)
    9e2c:	4798      	blx	r3
    9e2e:	e789      	b.n	9d44 <MiMAC_ReceivedPacket+0x4d4>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_DATA;
    9e30:	4a43      	ldr	r2, [pc, #268]	; (9f40 <MiMAC_ReceivedPacket+0x6d0>)
    9e32:	7813      	ldrb	r3, [r2, #0]
    9e34:	2403      	movs	r4, #3
    9e36:	43a3      	bics	r3, r4
    9e38:	7013      	strb	r3, [r2, #0]
		MACRxPacket.LQIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 2];
    9e3a:	4c41      	ldr	r4, [pc, #260]	; (9f40 <MiMAC_ReceivedPacket+0x6d0>)
    9e3c:	4b3f      	ldr	r3, [pc, #252]	; (9f3c <MiMAC_ReceivedPacket+0x6cc>)
    9e3e:	0202      	lsls	r2, r0, #8
    9e40:	1812      	adds	r2, r2, r0
    9e42:	5cd5      	ldrb	r5, [r2, r3]
    9e44:	189b      	adds	r3, r3, r2
    9e46:	5d5a      	ldrb	r2, [r3, r5]
    9e48:	73a2      	strb	r2, [r4, #14]
		MACRxPacket.RSSIValue = RxBuffer[BankIndex].radioRSSI;				
    9e4a:	785b      	ldrb	r3, [r3, #1]
    9e4c:	7363      	strb	r3, [r4, #13]
		return true;
    9e4e:	2401      	movs	r4, #1
		if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9e50:	068b      	lsls	r3, r1, #26
    9e52:	d400      	bmi.n	9e56 <MiMAC_ReceivedPacket+0x5e6>
    9e54:	e528      	b.n	98a8 <MiMAC_ReceivedPacket+0x38>
			    tParamAck.flags.Val = 0;
    9e56:	aa04      	add	r2, sp, #16
    9e58:	2400      	movs	r4, #0
			    tParamAck.altSrcAddr = 0;
    9e5a:	7254      	strb	r4, [r2, #9]
			    tParamAck.altDestAddr = false;
    9e5c:	7214      	strb	r4, [r2, #8]
 			    tParamAck.flags.bits.sourcePrsnt = 1;
    9e5e:	233e      	movs	r3, #62	; 0x3e
    9e60:	425b      	negs	r3, r3
    9e62:	7013      	strb	r3, [r2, #0]
			    tParamAck.DestAddress = MACRxPacket.SourceAddress;
    9e64:	4b36      	ldr	r3, [pc, #216]	; (9f40 <MiMAC_ReceivedPacket+0x6d0>)
    9e66:	6859      	ldr	r1, [r3, #4]
    9e68:	9105      	str	r1, [sp, #20]
			    tParamAck.DestPANID.Val = MACRxPacket.SourcePANID.Val;
    9e6a:	8a1b      	ldrh	r3, [r3, #16]
    9e6c:	8153      	strh	r3, [r2, #10]
			AckBuffer[0] = RxBuffer[BankIndex].Payload[2];	
    9e6e:	4b3e      	ldr	r3, [pc, #248]	; (9f68 <MiMAC_ReceivedPacket+0x6f8>)
    9e70:	0205      	lsls	r5, r0, #8
    9e72:	182d      	adds	r5, r5, r0
    9e74:	4831      	ldr	r0, [pc, #196]	; (9f3c <MiMAC_ReceivedPacket+0x6cc>)
    9e76:	1940      	adds	r0, r0, r5
    9e78:	7900      	ldrb	r0, [r0, #4]
    9e7a:	7018      	strb	r0, [r3, #0]
			MiMAC_SendPacket(tParamAck, AckBuffer, 1, 0, NULL);
    9e7c:	9402      	str	r4, [sp, #8]
    9e7e:	9401      	str	r4, [sp, #4]
    9e80:	2001      	movs	r0, #1
    9e82:	9000      	str	r0, [sp, #0]
    9e84:	9804      	ldr	r0, [sp, #16]
    9e86:	9a06      	ldr	r2, [sp, #24]
    9e88:	4c38      	ldr	r4, [pc, #224]	; (9f6c <MiMAC_ReceivedPacket+0x6fc>)
    9e8a:	47a0      	blx	r4
		return true;
    9e8c:	2401      	movs	r4, #1
    9e8e:	e50b      	b.n	98a8 <MiMAC_ReceivedPacket+0x38>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_COMMAND;
    9e90:	4a2b      	ldr	r2, [pc, #172]	; (9f40 <MiMAC_ReceivedPacket+0x6d0>)
    9e92:	7813      	ldrb	r3, [r2, #0]
    9e94:	2403      	movs	r4, #3
    9e96:	43a3      	bics	r3, r4
    9e98:	2401      	movs	r4, #1
    9e9a:	4323      	orrs	r3, r4
    9e9c:	7013      	strb	r3, [r2, #0]
			break;
    9e9e:	e7cc      	b.n	9e3a <MiMAC_ReceivedPacket+0x5ca>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_RESERVE;
    9ea0:	4a27      	ldr	r2, [pc, #156]	; (9f40 <MiMAC_ReceivedPacket+0x6d0>)
    9ea2:	7813      	ldrb	r3, [r2, #0]
    9ea4:	2403      	movs	r4, #3
    9ea6:	4323      	orrs	r3, r4
    9ea8:	7013      	strb	r3, [r2, #0]
			break;
    9eaa:	e7c6      	b.n	9e3a <MiMAC_ReceivedPacket+0x5ca>
				MACRxPacket.flags.bits.packetType = PACKET_TYPE_ACK;
    9eac:	4a24      	ldr	r2, [pc, #144]	; (9f40 <MiMAC_ReceivedPacket+0x6d0>)
    9eae:	7813      	ldrb	r3, [r2, #0]
    9eb0:	2103      	movs	r1, #3
    9eb2:	438b      	bics	r3, r1
    9eb4:	2102      	movs	r1, #2
    9eb6:	430b      	orrs	r3, r1
    9eb8:	7013      	strb	r3, [r2, #0]
				if((AckSeqNum == *(MACRxPacket.Payload))&& (AckReqData))
    9eba:	6893      	ldr	r3, [r2, #8]
    9ebc:	781a      	ldrb	r2, [r3, #0]
    9ebe:	4b2c      	ldr	r3, [pc, #176]	; (9f70 <MiMAC_ReceivedPacket+0x700>)
    9ec0:	781b      	ldrb	r3, [r3, #0]
    9ec2:	429a      	cmp	r2, r3
    9ec4:	d003      	beq.n	9ece <MiMAC_ReceivedPacket+0x65e>
				MiMAC_DiscardPacket();
    9ec6:	4b20      	ldr	r3, [pc, #128]	; (9f48 <MiMAC_ReceivedPacket+0x6d8>)
    9ec8:	4798      	blx	r3
				return false;
    9eca:	2400      	movs	r4, #0
    9ecc:	e4ec      	b.n	98a8 <MiMAC_ReceivedPacket+0x38>
				if((AckSeqNum == *(MACRxPacket.Payload))&& (AckReqData))
    9ece:	4b29      	ldr	r3, [pc, #164]	; (9f74 <MiMAC_ReceivedPacket+0x704>)
    9ed0:	781b      	ldrb	r3, [r3, #0]
    9ed2:	2b00      	cmp	r3, #0
    9ed4:	d0f7      	beq.n	9ec6 <MiMAC_ReceivedPacket+0x656>
					DataTxAckTimer.Val = 0;
    9ed6:	2400      	movs	r4, #0
    9ed8:	4b27      	ldr	r3, [pc, #156]	; (9f78 <MiMAC_ReceivedPacket+0x708>)
    9eda:	601c      	str	r4, [r3, #0]
					PHY_DataConf(SUCCESS); 
    9edc:	2000      	movs	r0, #0
    9ede:	4b27      	ldr	r3, [pc, #156]	; (9f7c <MiMAC_ReceivedPacket+0x70c>)
    9ee0:	4798      	blx	r3
					AckReqData = 0;
    9ee2:	4b24      	ldr	r3, [pc, #144]	; (9f74 <MiMAC_ReceivedPacket+0x704>)
    9ee4:	701c      	strb	r4, [r3, #0]
    9ee6:	e7ee      	b.n	9ec6 <MiMAC_ReceivedPacket+0x656>
				if (!(((RxBuffer[BankIndex].Payload[5] == 0xFF) & (RxBuffer[BankIndex].Payload[6] == 0xFF)) ||((RxBuffer[BankIndex].Payload[5] == DevShortAddress[0]) & (RxBuffer[BankIndex].Payload[6] == DevShortAddress[1]))) )
    9ee8:	0201      	lsls	r1, r0, #8
    9eea:	1809      	adds	r1, r1, r0
    9eec:	4b13      	ldr	r3, [pc, #76]	; (9f3c <MiMAC_ReceivedPacket+0x6cc>)
    9eee:	185b      	adds	r3, r3, r1
    9ef0:	4914      	ldr	r1, [pc, #80]	; (9f44 <MiMAC_ReceivedPacket+0x6d4>)
    9ef2:	7849      	ldrb	r1, [r1, #1]
    9ef4:	7a1b      	ldrb	r3, [r3, #8]
    9ef6:	4299      	cmp	r1, r3
    9ef8:	d000      	beq.n	9efc <MiMAC_ReceivedPacket+0x68c>
    9efa:	e5a0      	b.n	9a3e <MiMAC_ReceivedPacket+0x1ce>
    9efc:	4b11      	ldr	r3, [pc, #68]	; (9f44 <MiMAC_ReceivedPacket+0x6d4>)
    9efe:	781b      	ldrb	r3, [r3, #0]
    9f00:	42a3      	cmp	r3, r4
    9f02:	d000      	beq.n	9f06 <MiMAC_ReceivedPacket+0x696>
    9f04:	e59b      	b.n	9a3e <MiMAC_ReceivedPacket+0x1ce>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    9f06:	490e      	ldr	r1, [pc, #56]	; (9f40 <MiMAC_ReceivedPacket+0x6d0>)
    9f08:	4c0c      	ldr	r4, [pc, #48]	; (9f3c <MiMAC_ReceivedPacket+0x6cc>)
    9f0a:	0203      	lsls	r3, r0, #8
    9f0c:	1818      	adds	r0, r3, r0
    9f0e:	1823      	adds	r3, r4, r0
    9f10:	795d      	ldrb	r5, [r3, #5]
    9f12:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    9f14:	799b      	ldrb	r3, [r3, #6]
    9f16:	744b      	strb	r3, [r1, #17]
    9f18:	0213      	lsls	r3, r2, #8
    9f1a:	189a      	adds	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    9f1c:	0013      	movs	r3, r2
    9f1e:	3309      	adds	r3, #9
    9f20:	191b      	adds	r3, r3, r4
    9f22:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    9f24:	5d03      	ldrb	r3, [r0, r4]
    9f26:	3b13      	subs	r3, #19
    9f28:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    9f2a:	3211      	adds	r2, #17
    9f2c:	1912      	adds	r2, r2, r4
    9f2e:	608a      	str	r2, [r1, #8]
    9f30:	e5b6      	b.n	9aa0 <MiMAC_ReceivedPacket+0x230>
			BankIndex = i;
    9f32:	2200      	movs	r2, #0
    9f34:	4b05      	ldr	r3, [pc, #20]	; (9f4c <MiMAC_ReceivedPacket+0x6dc>)
    9f36:	701a      	strb	r2, [r3, #0]
    9f38:	e4c1      	b.n	98be <MiMAC_ReceivedPacket+0x4e>
    9f3a:	46c0      	nop			; (mov r8, r8)
    9f3c:	20002258 	.word	0x20002258
    9f40:	200026a0 	.word	0x200026a0
    9f44:	20002660 	.word	0x20002660
    9f48:	000097f1 	.word	0x000097f1
    9f4c:	2000000f 	.word	0x2000000f
    9f50:	0000ef31 	.word	0x0000ef31
    9f54:	20002250 	.word	0x20002250
    9f58:	0000a665 	.word	0x0000a665
    9f5c:	200026c4 	.word	0x200026c4
    9f60:	2000213c 	.word	0x2000213c
    9f64:	00009285 	.word	0x00009285
    9f68:	20002140 	.word	0x20002140
    9f6c:	00009461 	.word	0x00009461
    9f70:	20001fd4 	.word	0x20001fd4
    9f74:	20000273 	.word	0x20000273
    9f78:	20002960 	.word	0x20002960
    9f7c:	0000980d 	.word	0x0000980d

00009f80 <MiMAC_Task>:

void MiMAC_Task(void)
{
    9f80:	b510      	push	{r4, lr}
  PHY_TaskHandler();
    9f82:	4b0b      	ldr	r3, [pc, #44]	; (9fb0 <MiMAC_Task+0x30>)
    9f84:	4798      	blx	r3
  if(dataConfCallback && dataConfAvailable)
    9f86:	4b0b      	ldr	r3, [pc, #44]	; (9fb4 <MiMAC_Task+0x34>)
    9f88:	681b      	ldr	r3, [r3, #0]
    9f8a:	2b00      	cmp	r3, #0
    9f8c:	d003      	beq.n	9f96 <MiMAC_Task+0x16>
    9f8e:	4a0a      	ldr	r2, [pc, #40]	; (9fb8 <MiMAC_Task+0x38>)
    9f90:	7812      	ldrb	r2, [r2, #0]
    9f92:	2a00      	cmp	r2, #0
    9f94:	d100      	bne.n	9f98 <MiMAC_Task+0x18>
  {
	  dataConfAvailable = false;
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
  }
}
    9f96:	bd10      	pop	{r4, pc}
	  dataConfAvailable = false;
    9f98:	2100      	movs	r1, #0
    9f9a:	4a07      	ldr	r2, [pc, #28]	; (9fb8 <MiMAC_Task+0x38>)
    9f9c:	7011      	strb	r1, [r2, #0]
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
    9f9e:	4a07      	ldr	r2, [pc, #28]	; (9fbc <MiMAC_Task+0x3c>)
    9fa0:	6812      	ldr	r2, [r2, #0]
    9fa2:	4907      	ldr	r1, [pc, #28]	; (9fc0 <MiMAC_Task+0x40>)
    9fa4:	7809      	ldrb	r1, [r1, #0]
    9fa6:	4807      	ldr	r0, [pc, #28]	; (9fc4 <MiMAC_Task+0x44>)
    9fa8:	7800      	ldrb	r0, [r0, #0]
    9faa:	4798      	blx	r3
}
    9fac:	e7f3      	b.n	9f96 <MiMAC_Task+0x16>
    9fae:	46c0      	nop			; (mov r8, r8)
    9fb0:	0000a421 	.word	0x0000a421
    9fb4:	20000278 	.word	0x20000278
    9fb8:	20000276 	.word	0x20000276
    9fbc:	20000280 	.word	0x20000280
    9fc0:	20002124 	.word	0x20002124
    9fc4:	2000027c 	.word	0x2000027c

00009fc8 <phySetChannel>:
}

/*************************************************************************//**
*****************************************************************************/
static void phySetChannel(void)
{
    9fc8:	b500      	push	{lr}
    9fca:	b083      	sub	sp, #12
	uint32_t frequncy_set;
	if(phyChannel) // Based on channel we need to set frequency 
    9fcc:	4b2f      	ldr	r3, [pc, #188]	; (a08c <phySetChannel+0xc4>)
    9fce:	781b      	ldrb	r3, [r3, #0]
    9fd0:	2b00      	cmp	r3, #0
    9fd2:	d007      	beq.n	9fe4 <phySetChannel+0x1c>
	{
		switch(phyChannel)
    9fd4:	2b19      	cmp	r3, #25
    9fd6:	d856      	bhi.n	a086 <phySetChannel+0xbe>
    9fd8:	009b      	lsls	r3, r3, #2
    9fda:	4a2d      	ldr	r2, [pc, #180]	; (a090 <phySetChannel+0xc8>)
    9fdc:	58d3      	ldr	r3, [r2, r3]
    9fde:	469f      	mov	pc, r3
				//break;
			//case 8:
				//frequncy_set = FREQ_786000KHZ;
				//break;
			case 0:
				frequncy_set = FREQ_862000KHZ;
    9fe0:	4b2c      	ldr	r3, [pc, #176]	; (a094 <phySetChannel+0xcc>)
    9fe2:	9301      	str	r3, [sp, #4]
				break;				
																									
		}
	}
		
	if(RADIO_SetAttr(CHANNEL_FREQUENCY,(void *)&frequncy_set) == 0)  
    9fe4:	a901      	add	r1, sp, #4
    9fe6:	2001      	movs	r0, #1
    9fe8:	4b2b      	ldr	r3, [pc, #172]	; (a098 <phySetChannel+0xd0>)
    9fea:	4798      	blx	r3
	{
	}
}
    9fec:	b003      	add	sp, #12
    9fee:	bd00      	pop	{pc}
				frequncy_set = FREQ_863000KHZ;
    9ff0:	4b2a      	ldr	r3, [pc, #168]	; (a09c <phySetChannel+0xd4>)
    9ff2:	9301      	str	r3, [sp, #4]
				break;
    9ff4:	e7f6      	b.n	9fe4 <phySetChannel+0x1c>
				frequncy_set = FREQ_865000KHZ;
    9ff6:	4b2a      	ldr	r3, [pc, #168]	; (a0a0 <phySetChannel+0xd8>)
    9ff8:	9301      	str	r3, [sp, #4]
				break;
    9ffa:	e7f3      	b.n	9fe4 <phySetChannel+0x1c>
				frequncy_set = FREQ_866550KHZ;
    9ffc:	4b29      	ldr	r3, [pc, #164]	; (a0a4 <phySetChannel+0xdc>)
    9ffe:	9301      	str	r3, [sp, #4]
				break;
    a000:	e7f0      	b.n	9fe4 <phySetChannel+0x1c>
				frequncy_set = FREQ_867000KHZ;
    a002:	4b29      	ldr	r3, [pc, #164]	; (a0a8 <phySetChannel+0xe0>)
    a004:	9301      	str	r3, [sp, #4]
				break;			
    a006:	e7ed      	b.n	9fe4 <phySetChannel+0x1c>
				frequncy_set = FREQ_868100KHZ;
    a008:	4b28      	ldr	r3, [pc, #160]	; (a0ac <phySetChannel+0xe4>)
    a00a:	9301      	str	r3, [sp, #4]
				break;
    a00c:	e7ea      	b.n	9fe4 <phySetChannel+0x1c>
				frequncy_set = FREQ_869525KHZ;
    a00e:	4b28      	ldr	r3, [pc, #160]	; (a0b0 <phySetChannel+0xe8>)
    a010:	9301      	str	r3, [sp, #4]
				break;			
    a012:	e7e7      	b.n	9fe4 <phySetChannel+0x1c>
				frequncy_set = FREQ_870000KHZ;
    a014:	4b27      	ldr	r3, [pc, #156]	; (a0b4 <phySetChannel+0xec>)
    a016:	9301      	str	r3, [sp, #4]
				break;
    a018:	e7e4      	b.n	9fe4 <phySetChannel+0x1c>
				frequncy_set = FREQ_902300KHZ;
    a01a:	4b27      	ldr	r3, [pc, #156]	; (a0b8 <phySetChannel+0xf0>)
    a01c:	9301      	str	r3, [sp, #4]
				break;
    a01e:	e7e1      	b.n	9fe4 <phySetChannel+0x1c>
				frequncy_set = FREQ_903000KHZ;
    a020:	4b26      	ldr	r3, [pc, #152]	; (a0bc <phySetChannel+0xf4>)
    a022:	9301      	str	r3, [sp, #4]
				break;
    a024:	e7de      	b.n	9fe4 <phySetChannel+0x1c>
				frequncy_set = FREQ_915000KHZ;
    a026:	4b26      	ldr	r3, [pc, #152]	; (a0c0 <phySetChannel+0xf8>)
    a028:	9301      	str	r3, [sp, #4]
				break;
    a02a:	e7db      	b.n	9fe4 <phySetChannel+0x1c>
				frequncy_set = FREQ_915200KHZ;
    a02c:	4b25      	ldr	r3, [pc, #148]	; (a0c4 <phySetChannel+0xfc>)
    a02e:	9301      	str	r3, [sp, #4]
				break;
    a030:	e7d8      	b.n	9fe4 <phySetChannel+0x1c>
				frequncy_set = FREQ_915900KHZ;
    a032:	4b25      	ldr	r3, [pc, #148]	; (a0c8 <phySetChannel+0x100>)
    a034:	9301      	str	r3, [sp, #4]
				break;
    a036:	e7d5      	b.n	9fe4 <phySetChannel+0x1c>
				frequncy_set = FREQ_920000KHZ;
    a038:	4b24      	ldr	r3, [pc, #144]	; (a0cc <phySetChannel+0x104>)
    a03a:	9301      	str	r3, [sp, #4]
				break;
    a03c:	e7d2      	b.n	9fe4 <phySetChannel+0x1c>
				frequncy_set = FREQ_920900KHZ;
    a03e:	4b24      	ldr	r3, [pc, #144]	; (a0d0 <phySetChannel+0x108>)
    a040:	9301      	str	r3, [sp, #4]
				break;
    a042:	e7cf      	b.n	9fe4 <phySetChannel+0x1c>
				frequncy_set = FREQ_921900KHZ;
    a044:	4b23      	ldr	r3, [pc, #140]	; (a0d4 <phySetChannel+0x10c>)
    a046:	9301      	str	r3, [sp, #4]
				break;
    a048:	e7cc      	b.n	9fe4 <phySetChannel+0x1c>
				frequncy_set = FREQ_922000KHZ;
    a04a:	4b23      	ldr	r3, [pc, #140]	; (a0d8 <phySetChannel+0x110>)
    a04c:	9301      	str	r3, [sp, #4]
				break;
    a04e:	e7c9      	b.n	9fe4 <phySetChannel+0x1c>
				frequncy_set = FREQ_922100KHZ;
    a050:	4b22      	ldr	r3, [pc, #136]	; (a0dc <phySetChannel+0x114>)
    a052:	9301      	str	r3, [sp, #4]
				break;
    a054:	e7c6      	b.n	9fe4 <phySetChannel+0x1c>
				frequncy_set = FREQ_923000KHZ;
    a056:	4b22      	ldr	r3, [pc, #136]	; (a0e0 <phySetChannel+0x118>)
    a058:	9301      	str	r3, [sp, #4]
				break;
    a05a:	e7c3      	b.n	9fe4 <phySetChannel+0x1c>
				frequncy_set = FREQ_923200KHZ;
    a05c:	4b21      	ldr	r3, [pc, #132]	; (a0e4 <phySetChannel+0x11c>)
    a05e:	9301      	str	r3, [sp, #4]
				break;
    a060:	e7c0      	b.n	9fe4 <phySetChannel+0x1c>
				frequncy_set = FREQ_923300KHZ;
    a062:	4b21      	ldr	r3, [pc, #132]	; (a0e8 <phySetChannel+0x120>)
    a064:	9301      	str	r3, [sp, #4]
				break;
    a066:	e7bd      	b.n	9fe4 <phySetChannel+0x1c>
				frequncy_set = FREQ_925000KHZ;
    a068:	4b20      	ldr	r3, [pc, #128]	; (a0ec <phySetChannel+0x124>)
    a06a:	9301      	str	r3, [sp, #4]
				break;		
    a06c:	e7ba      	b.n	9fe4 <phySetChannel+0x1c>
				frequncy_set = FREQ_927500KHZ;
    a06e:	4b20      	ldr	r3, [pc, #128]	; (a0f0 <phySetChannel+0x128>)
    a070:	9301      	str	r3, [sp, #4]
				break;
    a072:	e7b7      	b.n	9fe4 <phySetChannel+0x1c>
				frequncy_set = FREQ_928000KHZ;
    a074:	4b1f      	ldr	r3, [pc, #124]	; (a0f4 <phySetChannel+0x12c>)
    a076:	9301      	str	r3, [sp, #4]
				break;
    a078:	e7b4      	b.n	9fe4 <phySetChannel+0x1c>
				frequncy_set = FREQ_928500KHZ;
    a07a:	4b1f      	ldr	r3, [pc, #124]	; (a0f8 <phySetChannel+0x130>)
    a07c:	9301      	str	r3, [sp, #4]
				break;
    a07e:	e7b1      	b.n	9fe4 <phySetChannel+0x1c>
				frequncy_set = FREQ_1020000KHZ;
    a080:	4b1e      	ldr	r3, [pc, #120]	; (a0fc <phySetChannel+0x134>)
    a082:	9301      	str	r3, [sp, #4]
				break;
    a084:	e7ae      	b.n	9fe4 <phySetChannel+0x1c>
				frequncy_set = FREQ_868100KHZ;
    a086:	4b09      	ldr	r3, [pc, #36]	; (a0ac <phySetChannel+0xe4>)
    a088:	9301      	str	r3, [sp, #4]
				break;				
    a08a:	e7ab      	b.n	9fe4 <phySetChannel+0x1c>
    a08c:	20000284 	.word	0x20000284
    a090:	00017fc8 	.word	0x00017fc8
    a094:	33611380 	.word	0x33611380
    a098:	0000dd25 	.word	0x0000dd25
    a09c:	337055c0 	.word	0x337055c0
    a0a0:	338eda40 	.word	0x338eda40
    a0a4:	33a680f0 	.word	0x33a680f0
    a0a8:	33ad5ec0 	.word	0x33ad5ec0
    a0ac:	33be27a0 	.word	0x33be27a0
    a0b0:	33d3e608 	.word	0x33d3e608
    a0b4:	33db2580 	.word	0x33db2580
    a0b8:	35c80160 	.word	0x35c80160
    a0bc:	35d2afc0 	.word	0x35d2afc0
    a0c0:	3689cac0 	.word	0x3689cac0
    a0c4:	368cd800 	.word	0x368cd800
    a0c8:	36978660 	.word	0x36978660
    a0cc:	36d61600 	.word	0x36d61600
    a0d0:	36e3d1a0 	.word	0x36e3d1a0
    a0d4:	36f313e0 	.word	0x36f313e0
    a0d8:	36f49a80 	.word	0x36f49a80
    a0dc:	36f62120 	.word	0x36f62120
    a0e0:	3703dcc0 	.word	0x3703dcc0
    a0e4:	3706ea00 	.word	0x3706ea00
    a0e8:	370870a0 	.word	0x370870a0
    a0ec:	37226140 	.word	0x37226140
    a0f0:	374886e0 	.word	0x374886e0
    a0f4:	37502800 	.word	0x37502800
    a0f8:	3757c920 	.word	0x3757c920
    a0fc:	3ccbf700 	.word	0x3ccbf700

0000a100 <radioCallback>:
{
    a100:	b570      	push	{r4, r5, r6, lr}
    a102:	b082      	sub	sp, #8
    a104:	0004      	movs	r4, r0
    a106:	000d      	movs	r5, r1
	callbackBackup = callback;
    a108:	4b3e      	ldr	r3, [pc, #248]	; (a204 <radioCallback+0x104>)
    a10a:	7018      	strb	r0, [r3, #0]
	int16_t rssi_readVal=0;
    a10c:	466b      	mov	r3, sp
    a10e:	1c98      	adds	r0, r3, #2
    a110:	2300      	movs	r3, #0
    a112:	8003      	strh	r3, [r0, #0]
	Radio_ReadRssi(&rssi_readVal);
    a114:	4b3c      	ldr	r3, [pc, #240]	; (a208 <radioCallback+0x108>)
    a116:	4798      	blx	r3
	switch (callback)
    a118:	2c10      	cmp	r4, #16
    a11a:	d853      	bhi.n	a1c4 <radioCallback+0xc4>
    a11c:	00a4      	lsls	r4, r4, #2
    a11e:	4b3b      	ldr	r3, [pc, #236]	; (a20c <radioCallback+0x10c>)
    a120:	591b      	ldr	r3, [r3, r4]
    a122:	469f      	mov	pc, r3
					if (RxBuffer[i].PayloadLen == 0)
    a124:	4b3a      	ldr	r3, [pc, #232]	; (a210 <radioCallback+0x110>)
    a126:	781a      	ldrb	r2, [r3, #0]
    a128:	2a00      	cmp	r2, #0
    a12a:	d00e      	beq.n	a14a <radioCallback+0x4a>
    a12c:	2302      	movs	r3, #2
    a12e:	33ff      	adds	r3, #255	; 0xff
    a130:	4a37      	ldr	r2, [pc, #220]	; (a210 <radioCallback+0x110>)
    a132:	5cd3      	ldrb	r3, [r2, r3]
    a134:	2b00      	cmp	r3, #0
    a136:	d04e      	beq.n	a1d6 <radioCallback+0xd6>
    a138:	4b36      	ldr	r3, [pc, #216]	; (a214 <radioCallback+0x114>)
    a13a:	5cd3      	ldrb	r3, [r2, r3]
    a13c:	2b00      	cmp	r3, #0
    a13e:	d04c      	beq.n	a1da <radioCallback+0xda>
    a140:	4b35      	ldr	r3, [pc, #212]	; (a218 <radioCallback+0x118>)
    a142:	5cd3      	ldrb	r3, [r2, r3]
	uint8_t i,RxBank=0xFF;
    a144:	22ff      	movs	r2, #255	; 0xff
					if (RxBuffer[i].PayloadLen == 0)
    a146:	2b00      	cmp	r3, #0
    a148:	d043      	beq.n	a1d2 <radioCallback+0xd2>
				RxBuffer[RxBank].PayloadLen = callbackRx->RX.bufferLength;
    a14a:	0016      	movs	r6, r2
    a14c:	7a2c      	ldrb	r4, [r5, #8]
    a14e:	0213      	lsls	r3, r2, #8
    a150:	189a      	adds	r2, r3, r2
    a152:	4b2f      	ldr	r3, [pc, #188]	; (a210 <radioCallback+0x110>)
    a154:	54d4      	strb	r4, [r2, r3]
				if (RxBuffer[RxBank].PayloadLen < (RX_PACKET_SIZE - 4))			
    a156:	2cfa      	cmp	r4, #250	; 0xfa
    a158:	d80d      	bhi.n	a176 <radioCallback+0x76>
    a15a:	2300      	movs	r3, #0
						RxBuffer[RxBank].Payload[i] = callbackRx->RX.buffer[i];
    a15c:	0232      	lsls	r2, r6, #8
    a15e:	1992      	adds	r2, r2, r6
    a160:	482b      	ldr	r0, [pc, #172]	; (a210 <radioCallback+0x110>)
    a162:	1880      	adds	r0, r0, r2
    a164:	686a      	ldr	r2, [r5, #4]
    a166:	5cd1      	ldrb	r1, [r2, r3]
    a168:	18c2      	adds	r2, r0, r3
    a16a:	7091      	strb	r1, [r2, #2]
					for (i = 0; i <= callbackRx->RX.bufferLength; i++)
    a16c:	3301      	adds	r3, #1
    a16e:	b2db      	uxtb	r3, r3
    a170:	7a2a      	ldrb	r2, [r5, #8]
    a172:	429a      	cmp	r2, r3
    a174:	d2f6      	bcs.n	a164 <radioCallback+0x64>
				RxBuffer[RxBank].PayloadLen +=4;
    a176:	4b26      	ldr	r3, [pc, #152]	; (a210 <radioCallback+0x110>)
    a178:	0232      	lsls	r2, r6, #8
    a17a:	1992      	adds	r2, r2, r6
    a17c:	3404      	adds	r4, #4
    a17e:	54d4      	strb	r4, [r2, r3]
				rssi_readVal = radioConfiguration.packetRSSI;
    a180:	2156      	movs	r1, #86	; 0x56
    a182:	4826      	ldr	r0, [pc, #152]	; (a21c <radioCallback+0x11c>)
    a184:	5e41      	ldrsh	r1, [r0, r1]
    a186:	4668      	mov	r0, sp
    a188:	8041      	strh	r1, [r0, #2]
				RxBuffer[RxBank].radioRSSI = rssi_readVal;						
    a18a:	189b      	adds	r3, r3, r2
    a18c:	7059      	strb	r1, [r3, #1]
				if(RxBuffer[RxBank].Payload[0] & 0x20)
    a18e:	789b      	ldrb	r3, [r3, #2]
    a190:	069b      	lsls	r3, r3, #26
    a192:	d524      	bpl.n	a1de <radioCallback+0xde>
					RadioReceiveParam.action = RECEIVE_STOP;					
    a194:	a801      	add	r0, sp, #4
    a196:	2301      	movs	r3, #1
    a198:	7003      	strb	r3, [r0, #0]
					RadioReceiveParam.rxWindowSize = 0;
    a19a:	2300      	movs	r3, #0
    a19c:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&RadioReceiveParam);
    a19e:	4b20      	ldr	r3, [pc, #128]	; (a220 <radioCallback+0x120>)
    a1a0:	4798      	blx	r3
    a1a2:	e00f      	b.n	a1c4 <radioCallback+0xc4>
			if((!AckReqData)||(callbackRx->status != ERR_NONE))
    a1a4:	4b1f      	ldr	r3, [pc, #124]	; (a224 <radioCallback+0x124>)
    a1a6:	781b      	ldrb	r3, [r3, #0]
    a1a8:	2b00      	cmp	r3, #0
    a1aa:	d002      	beq.n	a1b2 <radioCallback+0xb2>
    a1ac:	782b      	ldrb	r3, [r5, #0]
    a1ae:	2b00      	cmp	r3, #0
    a1b0:	d00a      	beq.n	a1c8 <radioCallback+0xc8>
				PHY_DataConf(callbackRx->status); // Need to convert LoRa status to MiWi status
    a1b2:	7828      	ldrb	r0, [r5, #0]
    a1b4:	4b1c      	ldr	r3, [pc, #112]	; (a228 <radioCallback+0x128>)
    a1b6:	4798      	blx	r3
			RadioReceiveParam.action = RECEIVE_START;
    a1b8:	a801      	add	r0, sp, #4
    a1ba:	2300      	movs	r3, #0
    a1bc:	7003      	strb	r3, [r0, #0]
			RadioReceiveParam.rxWindowSize = 0;
    a1be:	8043      	strh	r3, [r0, #2]
			RADIO_Receive(&RadioReceiveParam);
    a1c0:	4b17      	ldr	r3, [pc, #92]	; (a220 <radioCallback+0x120>)
    a1c2:	4798      	blx	r3
}
    a1c4:	b002      	add	sp, #8
    a1c6:	bd70      	pop	{r4, r5, r6, pc}
				DataTxAckTimer.Val = MiWi_TickGet();
    a1c8:	4b18      	ldr	r3, [pc, #96]	; (a22c <radioCallback+0x12c>)
    a1ca:	4798      	blx	r3
    a1cc:	4b18      	ldr	r3, [pc, #96]	; (a230 <radioCallback+0x130>)
    a1ce:	6018      	str	r0, [r3, #0]
    a1d0:	e7f2      	b.n	a1b8 <radioCallback+0xb8>
				for (i = 0; i < BANK_SIZE; i++)
    a1d2:	3afc      	subs	r2, #252	; 0xfc
    a1d4:	e7b9      	b.n	a14a <radioCallback+0x4a>
    a1d6:	2201      	movs	r2, #1
    a1d8:	e7b7      	b.n	a14a <radioCallback+0x4a>
    a1da:	2202      	movs	r2, #2
    a1dc:	e7b5      	b.n	a14a <radioCallback+0x4a>
					RadioReceiveParam.action = RECEIVE_START;
    a1de:	a801      	add	r0, sp, #4
    a1e0:	2300      	movs	r3, #0
    a1e2:	7003      	strb	r3, [r0, #0]
					RadioReceiveParam.rxWindowSize = 0;
    a1e4:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&RadioReceiveParam);	
    a1e6:	4b0e      	ldr	r3, [pc, #56]	; (a220 <radioCallback+0x120>)
    a1e8:	4798      	blx	r3
    a1ea:	e7eb      	b.n	a1c4 <radioCallback+0xc4>
				RadioReceiveParam.action = RECEIVE_START;
    a1ec:	ac01      	add	r4, sp, #4
    a1ee:	2300      	movs	r3, #0
    a1f0:	7023      	strb	r3, [r4, #0]
				RadioReceiveParam.rxWindowSize = 0;
    a1f2:	8063      	strh	r3, [r4, #2]
				PHY_DataConf(FAILURE);											
    a1f4:	2001      	movs	r0, #1
    a1f6:	4b0c      	ldr	r3, [pc, #48]	; (a228 <radioCallback+0x128>)
    a1f8:	4798      	blx	r3
				RADIO_Receive(&RadioReceiveParam);
    a1fa:	0020      	movs	r0, r4
    a1fc:	4b08      	ldr	r3, [pc, #32]	; (a220 <radioCallback+0x120>)
    a1fe:	4798      	blx	r3
}
    a200:	e7e0      	b.n	a1c4 <radioCallback+0xc4>
    a202:	46c0      	nop			; (mov r8, r8)
    a204:	2000224f 	.word	0x2000224f
    a208:	0000d425 	.word	0x0000d425
    a20c:	00018030 	.word	0x00018030
    a210:	20002258 	.word	0x20002258
    a214:	00000202 	.word	0x00000202
    a218:	00000303 	.word	0x00000303
    a21c:	20002d78 	.word	0x20002d78
    a220:	0000ef31 	.word	0x0000ef31
    a224:	20000273 	.word	0x20000273
    a228:	0000980d 	.word	0x0000980d
    a22c:	0000ba8d 	.word	0x0000ba8d
    a230:	20002960 	.word	0x20002960

0000a234 <PHY_Init>:
{
    a234:	b510      	push	{r4, lr}
    HAL_RadioInit();
    a236:	4b06      	ldr	r3, [pc, #24]	; (a250 <PHY_Init+0x1c>)
    a238:	4798      	blx	r3
    AESInit();	
    a23a:	4b06      	ldr	r3, [pc, #24]	; (a254 <PHY_Init+0x20>)
    a23c:	4798      	blx	r3
	RADIO_Init();
    a23e:	4b06      	ldr	r3, [pc, #24]	; (a258 <PHY_Init+0x24>)
    a240:	4798      	blx	r3
	RADIO_SetAttr(RADIO_CALLBACK, (void *)&radioCallback);
    a242:	4906      	ldr	r1, [pc, #24]	; (a25c <PHY_Init+0x28>)
    a244:	201a      	movs	r0, #26
    a246:	4b06      	ldr	r3, [pc, #24]	; (a260 <PHY_Init+0x2c>)
    a248:	4798      	blx	r3
   RADIO_InitDefaultAttributes();				
    a24a:	4b06      	ldr	r3, [pc, #24]	; (a264 <PHY_Init+0x30>)
    a24c:	4798      	blx	r3
}
    a24e:	bd10      	pop	{r4, pc}
    a250:	0000be41 	.word	0x0000be41
    a254:	0000c8e9 	.word	0x0000c8e9
    a258:	0000df21 	.word	0x0000df21
    a25c:	0000a101 	.word	0x0000a101
    a260:	0000dd25 	.word	0x0000dd25
    a264:	0000ed3d 	.word	0x0000ed3d

0000a268 <PHY_SetRxState>:
{
    a268:	b510      	push	{r4, lr}

/*************************************************************************//**
*****************************************************************************/
static void phySetRxState(void)
{
	RADIO_RxHandler();
    a26a:	4b01      	ldr	r3, [pc, #4]	; (a270 <PHY_SetRxState+0x8>)
    a26c:	4798      	blx	r3
}
    a26e:	bd10      	pop	{r4, pc}
    a270:	0000ec25 	.word	0x0000ec25

0000a274 <PHY_SetPanId>:
{
    a274:	b082      	sub	sp, #8
	DevPanId[0]=d[0];
    a276:	b2c2      	uxtb	r2, r0
    a278:	4b02      	ldr	r3, [pc, #8]	; (a284 <PHY_SetPanId+0x10>)
    a27a:	701a      	strb	r2, [r3, #0]
	DevPanId[1]=d[1];
    a27c:	0a00      	lsrs	r0, r0, #8
    a27e:	7058      	strb	r0, [r3, #1]
}
    a280:	b002      	add	sp, #8
    a282:	4770      	bx	lr
    a284:	2000265c 	.word	0x2000265c

0000a288 <PHY_SetShortAddr>:
{
    a288:	b082      	sub	sp, #8
	DevShortAddress[0]=d[0];
    a28a:	b2c2      	uxtb	r2, r0
    a28c:	4b02      	ldr	r3, [pc, #8]	; (a298 <PHY_SetShortAddr+0x10>)
    a28e:	701a      	strb	r2, [r3, #0]
	DevShortAddress[1]=d[1];
    a290:	0a00      	lsrs	r0, r0, #8
    a292:	7058      	strb	r0, [r3, #1]
}
    a294:	b002      	add	sp, #8
    a296:	4770      	bx	lr
    a298:	20002660 	.word	0x20002660

0000a29c <PHY_SetTxPower>:
{
    a29c:	b500      	push	{lr}
    a29e:	b083      	sub	sp, #12
	reg = txPower;
    a2a0:	466b      	mov	r3, sp
    a2a2:	71d8      	strb	r0, [r3, #7]
	if(reg > 15)
    a2a4:	280f      	cmp	r0, #15
    a2a6:	d813      	bhi.n	a2d0 <PHY_SetTxPower+0x34>
		PaBoost = DISABLED;
    a2a8:	466b      	mov	r3, sp
    a2aa:	1d99      	adds	r1, r3, #6
    a2ac:	2300      	movs	r3, #0
    a2ae:	700b      	strb	r3, [r1, #0]
		RADIO_SetAttr(PABOOST, (void *)&PaBoost);
    a2b0:	2008      	movs	r0, #8
    a2b2:	4b0b      	ldr	r3, [pc, #44]	; (a2e0 <PHY_SetTxPower+0x44>)
    a2b4:	4798      	blx	r3
		reg &= 0x0F ;
    a2b6:	466b      	mov	r3, sp
    a2b8:	1dda      	adds	r2, r3, #7
    a2ba:	79d9      	ldrb	r1, [r3, #7]
    a2bc:	230f      	movs	r3, #15
    a2be:	400b      	ands	r3, r1
    a2c0:	7013      	strb	r3, [r2, #0]
	RADIO_SetAttr(OUTPUT_POWER, &reg);
    a2c2:	466b      	mov	r3, sp
    a2c4:	1dd9      	adds	r1, r3, #7
    a2c6:	2004      	movs	r0, #4
    a2c8:	4b05      	ldr	r3, [pc, #20]	; (a2e0 <PHY_SetTxPower+0x44>)
    a2ca:	4798      	blx	r3
}
    a2cc:	b003      	add	sp, #12
    a2ce:	bd00      	pop	{pc}
		PaBoost = ENABLED;
    a2d0:	466b      	mov	r3, sp
    a2d2:	1d99      	adds	r1, r3, #6
    a2d4:	2301      	movs	r3, #1
    a2d6:	700b      	strb	r3, [r1, #0]
		RADIO_SetAttr(PABOOST, (void *)&PaBoost);
    a2d8:	2008      	movs	r0, #8
    a2da:	4b01      	ldr	r3, [pc, #4]	; (a2e0 <PHY_SetTxPower+0x44>)
    a2dc:	4798      	blx	r3
    a2de:	e7f0      	b.n	a2c2 <PHY_SetTxPower+0x26>
    a2e0:	0000dd25 	.word	0x0000dd25

0000a2e4 <PHY_GetAttribute>:
{
    a2e4:	b510      	push	{r4, lr}
	switch(RadioAttr)
    a2e6:	2807      	cmp	r0, #7
    a2e8:	d003      	beq.n	a2f2 <PHY_GetAttribute+0xe>
    a2ea:	2816      	cmp	r0, #22
    a2ec:	d001      	beq.n	a2f2 <PHY_GetAttribute+0xe>
			Status = ERR_INVALID_REQ;
    a2ee:	2003      	movs	r0, #3
}
    a2f0:	bd10      	pop	{r4, pc}
			Status = RADIO_GetAttr(RadioAttr,AttrVal);
    a2f2:	4b01      	ldr	r3, [pc, #4]	; (a2f8 <PHY_GetAttribute+0x14>)
    a2f4:	4798      	blx	r3
			break;
    a2f6:	e7fb      	b.n	a2f0 <PHY_GetAttribute+0xc>
    a2f8:	0000dc35 	.word	0x0000dc35

0000a2fc <PHY_Wakeup>:
{
    a2fc:	b510      	push	{r4, lr}
	if (PHY_STATE_SLEEP == phyState)
    a2fe:	4b0c      	ldr	r3, [pc, #48]	; (a330 <PHY_Wakeup+0x34>)
    a300:	781b      	ldrb	r3, [r3, #0]
    a302:	2b02      	cmp	r3, #2
    a304:	d000      	beq.n	a308 <PHY_Wakeup+0xc>
}
    a306:	bd10      	pop	{r4, pc}
		HAL_TCXOPowerOn();
    a308:	4b0a      	ldr	r3, [pc, #40]	; (a334 <PHY_Wakeup+0x38>)
    a30a:	4798      	blx	r3
		HAL_RadioInit();
    a30c:	4b0a      	ldr	r3, [pc, #40]	; (a338 <PHY_Wakeup+0x3c>)
    a30e:	4798      	blx	r3
		RADIO_Reset();
    a310:	4b0a      	ldr	r3, [pc, #40]	; (a33c <PHY_Wakeup+0x40>)
    a312:	4798      	blx	r3
		Radio_WriteMode(MODE_STANDBY, radioConfiguration.modulation, 0);
    a314:	2334      	movs	r3, #52	; 0x34
    a316:	4a0a      	ldr	r2, [pc, #40]	; (a340 <PHY_Wakeup+0x44>)
    a318:	5cd1      	ldrb	r1, [r2, r3]
    a31a:	2200      	movs	r2, #0
    a31c:	2001      	movs	r0, #1
    a31e:	4b09      	ldr	r3, [pc, #36]	; (a344 <PHY_Wakeup+0x48>)
    a320:	4798      	blx	r3
	RADIO_RxHandler();
    a322:	4b09      	ldr	r3, [pc, #36]	; (a348 <PHY_Wakeup+0x4c>)
    a324:	4798      	blx	r3
	 	phyState = PHY_STATE_IDLE;
    a326:	2201      	movs	r2, #1
    a328:	4b01      	ldr	r3, [pc, #4]	; (a330 <PHY_Wakeup+0x34>)
    a32a:	701a      	strb	r2, [r3, #0]
}
    a32c:	e7eb      	b.n	a306 <PHY_Wakeup+0xa>
    a32e:	46c0      	nop			; (mov r8, r8)
    a330:	20000285 	.word	0x20000285
    a334:	0000c181 	.word	0x0000c181
    a338:	0000be41 	.word	0x0000be41
    a33c:	0000bff9 	.word	0x0000bff9
    a340:	20002d78 	.word	0x20002d78
    a344:	0000d261 	.word	0x0000d261
    a348:	0000ec25 	.word	0x0000ec25

0000a34c <PHY_SetChannel>:
{
    a34c:	b510      	push	{r4, lr}
	phyChannel = channel;
    a34e:	4b06      	ldr	r3, [pc, #24]	; (a368 <PHY_SetChannel+0x1c>)
    a350:	7018      	strb	r0, [r3, #0]
	if (PHY_STATE_SLEEP == phyState)
    a352:	4b06      	ldr	r3, [pc, #24]	; (a36c <PHY_SetChannel+0x20>)
    a354:	781b      	ldrb	r3, [r3, #0]
    a356:	2b02      	cmp	r3, #2
    a358:	d002      	beq.n	a360 <PHY_SetChannel+0x14>
	phySetChannel();
    a35a:	4b05      	ldr	r3, [pc, #20]	; (a370 <PHY_SetChannel+0x24>)
    a35c:	4798      	blx	r3
}
    a35e:	bd10      	pop	{r4, pc}
		PHY_Wakeup();
    a360:	4b04      	ldr	r3, [pc, #16]	; (a374 <PHY_SetChannel+0x28>)
    a362:	4798      	blx	r3
    a364:	e7f9      	b.n	a35a <PHY_SetChannel+0xe>
    a366:	46c0      	nop			; (mov r8, r8)
    a368:	20000284 	.word	0x20000284
    a36c:	20000285 	.word	0x20000285
    a370:	00009fc9 	.word	0x00009fc9
    a374:	0000a2fd 	.word	0x0000a2fd

0000a378 <PHY_DataReq>:
{
    a378:	b500      	push	{lr}
    a37a:	b085      	sub	sp, #20
		RadioTransmitParam.bufferLen = data[0];
    a37c:	7803      	ldrb	r3, [r0, #0]
    a37e:	aa02      	add	r2, sp, #8
    a380:	7013      	strb	r3, [r2, #0]
		for (count = 0; count < data[0]; count++)
    a382:	2b00      	cmp	r3, #0
    a384:	d009      	beq.n	a39a <PHY_DataReq+0x22>
    a386:	2300      	movs	r3, #0
			DataRequestBuffer[count] = data[1+count];
    a388:	4912      	ldr	r1, [pc, #72]	; (a3d4 <PHY_DataReq+0x5c>)
    a38a:	18c2      	adds	r2, r0, r3
    a38c:	7852      	ldrb	r2, [r2, #1]
    a38e:	54ca      	strb	r2, [r1, r3]
		for (count = 0; count < data[0]; count++)
    a390:	3301      	adds	r3, #1
    a392:	b2db      	uxtb	r3, r3
    a394:	7802      	ldrb	r2, [r0, #0]
    a396:	429a      	cmp	r2, r3
    a398:	d8f7      	bhi.n	a38a <PHY_DataReq+0x12>
		RadioTransmitParam.bufferPtr = (uint8_t *)&DataRequestBuffer;
    a39a:	4b0e      	ldr	r3, [pc, #56]	; (a3d4 <PHY_DataReq+0x5c>)
    a39c:	9303      	str	r3, [sp, #12]
		RadioSetState(RADIO_STATE_IDLE);
    a39e:	2001      	movs	r0, #1
    a3a0:	4b0d      	ldr	r3, [pc, #52]	; (a3d8 <PHY_DataReq+0x60>)
    a3a2:	4798      	blx	r3
		phySetChannel();
    a3a4:	4b0d      	ldr	r3, [pc, #52]	; (a3dc <PHY_DataReq+0x64>)
    a3a6:	4798      	blx	r3
		localRadioLBTParams.lbtScanPeriod = 5 ;
    a3a8:	2305      	movs	r3, #5
    a3aa:	466a      	mov	r2, sp
    a3ac:	8013      	strh	r3, [r2, #0]
		localRadioLBTParams.lbtThreshold = -90 ;
    a3ae:	3b5f      	subs	r3, #95	; 0x5f
    a3b0:	8053      	strh	r3, [r2, #2]
		localRadioLBTParams.lbtNumOfSamples = 5;
    a3b2:	2305      	movs	r3, #5
    a3b4:	7113      	strb	r3, [r2, #4]
		localRadioLBTParams.lbtTransmitOn = 0;
    a3b6:	2300      	movs	r3, #0
    a3b8:	7153      	strb	r3, [r2, #5]
		status = RADIO_SetAttr(RADIO_LBT_PARAMS, &localRadioLBTParams);
    a3ba:	4669      	mov	r1, sp
    a3bc:	201d      	movs	r0, #29
    a3be:	4b08      	ldr	r3, [pc, #32]	; (a3e0 <PHY_DataReq+0x68>)
    a3c0:	4798      	blx	r3
		status = RADIO_Transmit (&RadioTransmitParam);
    a3c2:	a802      	add	r0, sp, #8
    a3c4:	4b07      	ldr	r3, [pc, #28]	; (a3e4 <PHY_DataReq+0x6c>)
    a3c6:	4798      	blx	r3
		return (!status);							
    a3c8:	4243      	negs	r3, r0
    a3ca:	4158      	adcs	r0, r3
    a3cc:	b2c0      	uxtb	r0, r0
}
    a3ce:	b005      	add	sp, #20
    a3d0:	bd00      	pop	{pc}
    a3d2:	46c0      	nop			; (mov r8, r8)
    a3d4:	20002150 	.word	0x20002150
    a3d8:	0000e62d 	.word	0x0000e62d
    a3dc:	00009fc9 	.word	0x00009fc9
    a3e0:	0000dd25 	.word	0x0000dd25
    a3e4:	0000e655 	.word	0x0000e655

0000a3e8 <PHY_RandomReq>:
{
    a3e8:	b510      	push	{r4, lr}
	rnd = RADIO_ReadRandom();
    a3ea:	4b03      	ldr	r3, [pc, #12]	; (a3f8 <PHY_RandomReq+0x10>)
    a3ec:	4798      	blx	r3
    a3ee:	0004      	movs	r4, r0
	RADIO_RxHandler();
    a3f0:	4b02      	ldr	r3, [pc, #8]	; (a3fc <PHY_RandomReq+0x14>)
    a3f2:	4798      	blx	r3
}
    a3f4:	0020      	movs	r0, r4
    a3f6:	bd10      	pop	{r4, pc}
    a3f8:	0000d395 	.word	0x0000d395
    a3fc:	0000ec25 	.word	0x0000ec25

0000a400 <PHY_EncryptReq>:
{	
    a400:	b510      	push	{r4, lr}
	AESEncode(text,key);
    a402:	4b01      	ldr	r3, [pc, #4]	; (a408 <PHY_EncryptReq+0x8>)
    a404:	4798      	blx	r3
}
    a406:	bd10      	pop	{r4, pc}
    a408:	0000c80d 	.word	0x0000c80d

0000a40c <PHY_SetIEEEAddr>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_SetIEEEAddr(uint8_t *ieee_addr)
{
    a40c:	2300      	movs	r3, #0
	uint8_t *ptr_to_reg = ieee_addr;

	for (uint8_t i = 0; i < 8; i++)
	{
		DevIEEEaddr[i] = ptr_to_reg[i];
    a40e:	4903      	ldr	r1, [pc, #12]	; (a41c <PHY_SetIEEEAddr+0x10>)
    a410:	5cc2      	ldrb	r2, [r0, r3]
    a412:	54ca      	strb	r2, [r1, r3]
    a414:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < 8; i++)
    a416:	2b08      	cmp	r3, #8
    a418:	d1fa      	bne.n	a410 <PHY_SetIEEEAddr+0x4>
	}
}
    a41a:	4770      	bx	lr
    a41c:	20002250 	.word	0x20002250

0000a420 <PHY_TaskHandler>:
    if (PHY_STATE_SLEEP == phyState)
    {
        return;
    }
	// Handled in DIO interrupts 
}
    a420:	4770      	bx	lr
    a422:	Address 0x0000a422 is out of bounds.


0000a424 <CommandConfCallback>:

bool CheckForData(void);

/************************ FUNCTIONS ********************************/
void CommandConfCallback(uint8_t msgConfHandle, miwi_status_t status, uint8_t* msgPointer)
{
    a424:	b510      	push	{r4, lr}
	#if defined (ENABLE_CONSOLE)
		//printf("\r\n  Command Conf : Handle %d & Status %02X  ",msgConfHandle , status );
	#endif
    MiMem_Free(msgPointer);
    a426:	0010      	movs	r0, r2
    a428:	4b01      	ldr	r3, [pc, #4]	; (a430 <CommandConfCallback+0xc>)
    a42a:	4798      	blx	r3
}
    a42c:	bd10      	pop	{r4, pc}
    a42e:	46c0      	nop			; (mov r8, r8)
    a430:	0000b909 	.word	0x0000b909

0000a434 <Total_Connections>:
{
    a434:	2200      	movs	r2, #0
    uint8_t count=0 , i;
    a436:	2000      	movs	r0, #0
        if (ConnectionTable[i].status.bits.isValid)
    a438:	4907      	ldr	r1, [pc, #28]	; (a458 <Total_Connections+0x24>)
    a43a:	e002      	b.n	a442 <Total_Connections+0xe>
    a43c:	3201      	adds	r2, #1
    for (i=0;i<CONNECTION_SIZE;i++)
    a43e:	2a05      	cmp	r2, #5
    a440:	d009      	beq.n	a456 <Total_Connections+0x22>
        if (ConnectionTable[i].status.bits.isValid)
    a442:	0093      	lsls	r3, r2, #2
    a444:	189b      	adds	r3, r3, r2
    a446:	005b      	lsls	r3, r3, #1
    a448:	18cb      	adds	r3, r1, r3
    a44a:	7a1b      	ldrb	r3, [r3, #8]
    a44c:	09db      	lsrs	r3, r3, #7
    a44e:	d0f5      	beq.n	a43c <Total_Connections+0x8>
            count++;
    a450:	3001      	adds	r0, #1
    a452:	b2c0      	uxtb	r0, r0
    a454:	e7f2      	b.n	a43c <Total_Connections+0x8>
}
    a456:	4770      	bx	lr
    a458:	20002668 	.word	0x20002668

0000a45c <IndirectPacket>:
							INPUT uint8_t* msgPtr,
							INPUT uint8_t msghandle,
							INPUT bool ackReq,
                            DataConf_callback_t ConfCallback)
    #endif                            
    { 
    a45c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a45e:	46de      	mov	lr, fp
    a460:	4657      	mov	r7, sl
    a462:	464e      	mov	r6, r9
    a464:	4645      	mov	r5, r8
    a466:	b5e0      	push	{r5, r6, r7, lr}
    a468:	b083      	sub	sp, #12
    a46a:	466c      	mov	r4, sp
    a46c:	8061      	strh	r1, [r4, #2]
    a46e:	ac0c      	add	r4, sp, #48	; 0x30
    a470:	7827      	ldrb	r7, [r4, #0]
    a472:	ac0d      	add	r4, sp, #52	; 0x34
    a474:	7826      	ldrb	r6, [r4, #0]
    a476:	ac0f      	add	r4, sp, #60	; 0x3c
    a478:	7825      	ldrb	r5, [r4, #0]
    a47a:	ac10      	add	r4, sp, #64	; 0x40
    a47c:	7821      	ldrb	r1, [r4, #0]
    a47e:	4688      	mov	r8, r1
        uint8_t i;
        
        #ifndef ENABLE_BROADCAST
            if( Broadcast )
    a480:	2800      	cmp	r0, #0
    a482:	d000      	beq.n	a486 <IndirectPacket+0x2a>
    a484:	e07e      	b.n	a584 <IndirectPacket+0x128>

        // loop through the available indirect message buffer and locate
        // the empty message slot
        for(i = 0; i < INDIRECT_MESSAGE_SIZE; i++)
        {
            if( indirectMessages[i].flags.bits.isValid == 0 )
    a486:	4c40      	ldr	r4, [pc, #256]	; (a588 <IndirectPacket+0x12c>)
    a488:	7ba4      	ldrb	r4, [r4, #14]
    a48a:	07e1      	lsls	r1, r4, #31
    a48c:	d400      	bmi.n	a490 <IndirectPacket+0x34>
    a48e:	e077      	b.n	a580 <IndirectPacket+0x124>
    a490:	2491      	movs	r4, #145	; 0x91
    a492:	0064      	lsls	r4, r4, #1
    a494:	493c      	ldr	r1, [pc, #240]	; (a588 <IndirectPacket+0x12c>)
    a496:	5d0c      	ldrb	r4, [r1, r4]
    a498:	07e1      	lsls	r1, r4, #31
    a49a:	d506      	bpl.n	a4aa <IndirectPacket+0x4e>
				indirectMessages[i].TickStart.Val = MiWi_TickGet();
                return true;
            }
        }
        return false;
    }
    a49c:	b003      	add	sp, #12
    a49e:	bc3c      	pop	{r2, r3, r4, r5}
    a4a0:	4690      	mov	r8, r2
    a4a2:	4699      	mov	r9, r3
    a4a4:	46a2      	mov	sl, r4
    a4a6:	46ab      	mov	fp, r5
    a4a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( indirectMessages[i].flags.bits.isValid == 0 )
    a4aa:	2401      	movs	r4, #1
                indirectMessages[i].flags.bits.isValid          = true;
    a4ac:	208a      	movs	r0, #138	; 0x8a
    a4ae:	0040      	lsls	r0, r0, #1
    a4b0:	4360      	muls	r0, r4
    a4b2:	4935      	ldr	r1, [pc, #212]	; (a588 <IndirectPacket+0x12c>)
    a4b4:	468c      	mov	ip, r1
    a4b6:	4484      	add	ip, r0
    a4b8:	2108      	movs	r1, #8
    a4ba:	4461      	add	r1, ip
    a4bc:	4689      	mov	r9, r1
    a4be:	7989      	ldrb	r1, [r1, #6]
    a4c0:	2001      	movs	r0, #1
    a4c2:	4301      	orrs	r1, r0
    a4c4:	468a      	mov	sl, r1
                indirectMessages[i].flags.bits.isCommand        = isCommand;
    a4c6:	2001      	movs	r0, #1
    a4c8:	4003      	ands	r3, r0
    a4ca:	0099      	lsls	r1, r3, #2
    a4cc:	9101      	str	r1, [sp, #4]
    a4ce:	21fd      	movs	r1, #253	; 0xfd
    a4d0:	468b      	mov	fp, r1
    a4d2:	4651      	mov	r1, sl
    a4d4:	465b      	mov	r3, fp
    a4d6:	4019      	ands	r1, r3
    a4d8:	3bf9      	subs	r3, #249	; 0xf9
    a4da:	4399      	bics	r1, r3
                indirectMessages[i].flags.bits.isSecured        = SecurityEnabled;
    a4dc:	4007      	ands	r7, r0
    a4de:	00ff      	lsls	r7, r7, #3
    a4e0:	000b      	movs	r3, r1
    a4e2:	9901      	ldr	r1, [sp, #4]
    a4e4:	4319      	orrs	r1, r3
    a4e6:	000b      	movs	r3, r1
    a4e8:	2108      	movs	r1, #8
    a4ea:	438b      	bics	r3, r1
				indirectMessages[i].flags.bits.ackReq           = ackReq;
    a4ec:	4641      	mov	r1, r8
    a4ee:	4008      	ands	r0, r1
    a4f0:	0101      	lsls	r1, r0, #4
    a4f2:	433b      	orrs	r3, r7
    a4f4:	0018      	movs	r0, r3
    a4f6:	2310      	movs	r3, #16
    a4f8:	4398      	bics	r0, r3
    a4fa:	4308      	orrs	r0, r1
    a4fc:	464b      	mov	r3, r9
    a4fe:	7198      	strb	r0, [r3, #6]
                    indirectMessages[i].DestPANID.Val           = DestinationPANID.Val;
    a500:	4663      	mov	r3, ip
    a502:	4669      	mov	r1, sp
    a504:	8849      	ldrh	r1, [r1, #2]
    a506:	8099      	strh	r1, [r3, #4]
                if( DestinationAddress != NULL )
    a508:	2a00      	cmp	r2, #0
    a50a:	d00d      	beq.n	a528 <IndirectPacket+0xcc>
    a50c:	0013      	movs	r3, r2
    a50e:	218a      	movs	r1, #138	; 0x8a
    a510:	0049      	lsls	r1, r1, #1
    a512:	4361      	muls	r1, r4
    a514:	3106      	adds	r1, #6
    a516:	481c      	ldr	r0, [pc, #112]	; (a588 <IndirectPacket+0x12c>)
    a518:	1809      	adds	r1, r1, r0
    a51a:	3208      	adds	r2, #8
                        indirectMessages[i].DestAddress.DestLongAddress[j] = DestinationAddress[j];
    a51c:	7818      	ldrb	r0, [r3, #0]
    a51e:	7008      	strb	r0, [r1, #0]
    a520:	3301      	adds	r3, #1
    a522:	3101      	adds	r1, #1
                    for(j = 0; j < MY_ADDRESS_LENGTH; j++)
    a524:	4293      	cmp	r3, r2
    a526:	d1f9      	bne.n	a51c <IndirectPacket+0xc0>
                indirectMessages[i].PayLoadSize = msgLen;
    a528:	228a      	movs	r2, #138	; 0x8a
    a52a:	0052      	lsls	r2, r2, #1
    a52c:	4362      	muls	r2, r4
    a52e:	4b16      	ldr	r3, [pc, #88]	; (a588 <IndirectPacket+0x12c>)
    a530:	189b      	adds	r3, r3, r2
    a532:	73de      	strb	r6, [r3, #15]
                for(j = 0; j < msgLen; j++)
    a534:	2e00      	cmp	r6, #0
    a536:	d011      	beq.n	a55c <IndirectPacket+0x100>
    a538:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a53a:	228a      	movs	r2, #138	; 0x8a
    a53c:	0052      	lsls	r2, r2, #1
    a53e:	4362      	muls	r2, r4
    a540:	3210      	adds	r2, #16
    a542:	4911      	ldr	r1, [pc, #68]	; (a588 <IndirectPacket+0x12c>)
    a544:	1852      	adds	r2, r2, r1
    a546:	3e01      	subs	r6, #1
    a548:	b2f0      	uxtb	r0, r6
    a54a:	3001      	adds	r0, #1
    a54c:	469c      	mov	ip, r3
    a54e:	4460      	add	r0, ip
                    indirectMessages[i].PayLoad[j] = msgPtr[j];
    a550:	7819      	ldrb	r1, [r3, #0]
    a552:	7011      	strb	r1, [r2, #0]
    a554:	3301      	adds	r3, #1
    a556:	3201      	adds	r2, #1
                for(j = 0; j < msgLen; j++)
    a558:	4283      	cmp	r3, r0
    a55a:	d1f9      	bne.n	a550 <IndirectPacket+0xf4>
                indirectMessages[i].indirectDataHandle = msghandle;
    a55c:	4e0a      	ldr	r6, [pc, #40]	; (a588 <IndirectPacket+0x12c>)
    a55e:	238a      	movs	r3, #138	; 0x8a
    a560:	005b      	lsls	r3, r3, #1
    a562:	435c      	muls	r4, r3
    a564:	1933      	adds	r3, r6, r4
    a566:	001a      	movs	r2, r3
    a568:	3210      	adds	r2, #16
    a56a:	32ff      	adds	r2, #255	; 0xff
    a56c:	7015      	strb	r5, [r2, #0]
				indirectMessages[i].indirectConfCallback = ConfCallback;
    a56e:	3311      	adds	r3, #17
    a570:	33ff      	adds	r3, #255	; 0xff
    a572:	9a11      	ldr	r2, [sp, #68]	; 0x44
    a574:	601a      	str	r2, [r3, #0]
				indirectMessages[i].TickStart.Val = MiWi_TickGet();
    a576:	4b05      	ldr	r3, [pc, #20]	; (a58c <IndirectPacket+0x130>)
    a578:	4798      	blx	r3
    a57a:	51a0      	str	r0, [r4, r6]
                return true;
    a57c:	2001      	movs	r0, #1
    a57e:	e78d      	b.n	a49c <IndirectPacket+0x40>
            if( indirectMessages[i].flags.bits.isValid == 0 )
    a580:	2400      	movs	r4, #0
    a582:	e793      	b.n	a4ac <IndirectPacket+0x50>
                return false;
    a584:	2000      	movs	r0, #0
    a586:	e789      	b.n	a49c <IndirectPacket+0x40>
    a588:	200026e0 	.word	0x200026e0
    a58c:	0000ba8d 	.word	0x0000ba8d

0000a590 <SendPacket>:
                    INPUT uint8_t* msgPtr,
                    INPUT uint8_t msghandle,
					INPUT bool ackReq,
                    INPUT DataConf_callback_t ConfCallback)
#endif                                        
{ 
    a590:	b5f0      	push	{r4, r5, r6, r7, lr}
    a592:	46ce      	mov	lr, r9
    a594:	4647      	mov	r7, r8
    a596:	b580      	push	{r7, lr}
    a598:	b08b      	sub	sp, #44	; 0x2c
    a59a:	0005      	movs	r5, r0
    a59c:	468c      	mov	ip, r1
    a59e:	9205      	str	r2, [sp, #20]
    a5a0:	a812      	add	r0, sp, #72	; 0x48
    a5a2:	7800      	ldrb	r0, [r0, #0]
    a5a4:	ac13      	add	r4, sp, #76	; 0x4c
    a5a6:	7826      	ldrb	r6, [r4, #0]
    a5a8:	ac15      	add	r4, sp, #84	; 0x54
    a5aa:	7827      	ldrb	r7, [r4, #0]
    a5ac:	ac16      	add	r4, sp, #88	; 0x58
    a5ae:	7822      	ldrb	r2, [r4, #0]
    MAC_TRANS_PARAM tParam;
    bool status;

    tParam.flags.Val = 0;
    a5b0:	2400      	movs	r4, #0
    a5b2:	46a0      	mov	r8, r4
    a5b4:	ac07      	add	r4, sp, #28
    a5b6:	4641      	mov	r1, r8
    a5b8:	7021      	strb	r1, [r4, #0]
    //tParam.flags.bits.packetType = (isCommand) ? PACKET_TYPE_COMMAND : PACKET_TYPE_DATA;
	if(isCommand)
    a5ba:	2b00      	cmp	r3, #0
    a5bc:	d043      	beq.n	a646 <SendPacket+0xb6>
		tParam.flags.bits.packetType = PACKET_TYPE_COMMAND;
    a5be:	0023      	movs	r3, r4
    a5c0:	b2cc      	uxtb	r4, r1
    a5c2:	2103      	movs	r1, #3
    a5c4:	438c      	bics	r4, r1
    a5c6:	2101      	movs	r1, #1
    a5c8:	4688      	mov	r8, r1
    a5ca:	4641      	mov	r1, r8
    a5cc:	430c      	orrs	r4, r1
    a5ce:	701c      	strb	r4, [r3, #0]
	else
		tParam.flags.bits.packetType = PACKET_TYPE_DATA;
   // tParam.flags.bits.ackReq = (Broadcast) ? 0 : ackReq;
   if(Broadcast)
    a5d0:	2d00      	cmp	r5, #0
    a5d2:	d13e      	bne.n	a652 <SendPacket+0xc2>
   {
	tParam.flags.bits.ackReq = 0;
   }
   else
   {
	   tParam.flags.bits.ackReq = ackReq;
    a5d4:	ac07      	add	r4, sp, #28
    a5d6:	2301      	movs	r3, #1
    a5d8:	4013      	ands	r3, r2
    a5da:	015a      	lsls	r2, r3, #5
    a5dc:	7823      	ldrb	r3, [r4, #0]
    a5de:	2120      	movs	r1, #32
    a5e0:	438b      	bics	r3, r1
    a5e2:	4313      	orrs	r3, r2
    a5e4:	7023      	strb	r3, [r4, #0]
   }
    tParam.flags.bits.broadcast = Broadcast;
    a5e6:	ac07      	add	r4, sp, #28
    a5e8:	2201      	movs	r2, #1
    a5ea:	0013      	movs	r3, r2
    a5ec:	402b      	ands	r3, r5
    a5ee:	009b      	lsls	r3, r3, #2
    a5f0:	4698      	mov	r8, r3
    a5f2:	7823      	ldrb	r3, [r4, #0]
    a5f4:	2104      	movs	r1, #4
    a5f6:	438b      	bics	r3, r1
    tParam.flags.bits.secEn = SecurityEnabled;
    a5f8:	4010      	ands	r0, r2
    a5fa:	00c0      	lsls	r0, r0, #3
    a5fc:	4641      	mov	r1, r8
    a5fe:	430b      	orrs	r3, r1
    a600:	2108      	movs	r1, #8
    a602:	438b      	bics	r3, r1
    #if defined(IEEE_802_15_4)
        tParam.altSrcAddr = 0;
    a604:	2100      	movs	r1, #0
    a606:	7261      	strb	r1, [r4, #9]
        tParam.altDestAddr = (Broadcast) ? true : false;
    a608:	7225      	strb	r5, [r4, #8]
    #endif
    
    #if defined(INFER_DEST_ADDRESS)
        tParam.flags.bits.destPrsnt = 0;
    #else
        tParam.flags.bits.destPrsnt = (Broadcast) ? 0:1;
    a60a:	2101      	movs	r1, #1
    a60c:	4688      	mov	r8, r1
    a60e:	4641      	mov	r1, r8
    a610:	404d      	eors	r5, r1
    a612:	4015      	ands	r5, r2
    a614:	01ad      	lsls	r5, r5, #6
    a616:	4318      	orrs	r0, r3
    a618:	2340      	movs	r3, #64	; 0x40
    a61a:	4398      	bics	r0, r3
        else
        {
            tParam.flags.bits.sourcePrsnt = 0;
        }
    #else
        tParam.flags.bits.sourcePrsnt = 1;
    a61c:	4328      	orrs	r0, r5
    a61e:	3bc0      	subs	r3, #192	; 0xc0
    a620:	4318      	orrs	r0, r3
    a622:	7020      	strb	r0, [r4, #0]
    #endif
    
    tParam.DestAddress = DestinationAddress;

    #if defined(IEEE_802_15_4)
        tParam.DestPANID.Val = DestinationPANID.Val;
    a624:	4663      	mov	r3, ip
    a626:	8163      	strh	r3, [r4, #10]
    #endif

    status = MiMAC_SendPacket(tParam, msgPtr, msgLen, msghandle, ConfCallback);
    a628:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a62a:	9302      	str	r3, [sp, #8]
    a62c:	9701      	str	r7, [sp, #4]
    a62e:	9600      	str	r6, [sp, #0]
    a630:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a632:	9807      	ldr	r0, [sp, #28]
    a634:	9905      	ldr	r1, [sp, #20]
    a636:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a638:	4c09      	ldr	r4, [pc, #36]	; (a660 <SendPacket+0xd0>)
    a63a:	47a0      	blx	r4
    
    return status;
}
    a63c:	b00b      	add	sp, #44	; 0x2c
    a63e:	bc0c      	pop	{r2, r3}
    a640:	4690      	mov	r8, r2
    a642:	4699      	mov	r9, r3
    a644:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tParam.flags.bits.packetType = PACKET_TYPE_DATA;
    a646:	ab07      	add	r3, sp, #28
    a648:	781c      	ldrb	r4, [r3, #0]
    a64a:	2103      	movs	r1, #3
    a64c:	438c      	bics	r4, r1
    a64e:	701c      	strb	r4, [r3, #0]
    a650:	e7be      	b.n	a5d0 <SendPacket+0x40>
	tParam.flags.bits.ackReq = 0;
    a652:	ac07      	add	r4, sp, #28
    a654:	7823      	ldrb	r3, [r4, #0]
    a656:	2220      	movs	r2, #32
    a658:	4393      	bics	r3, r2
    a65a:	7023      	strb	r3, [r4, #0]
    a65c:	e7c3      	b.n	a5e6 <SendPacket+0x56>
    a65e:	46c0      	nop			; (mov r8, r8)
    a660:	00009461 	.word	0x00009461

0000a664 <isSameAddress>:
 *
 * Side Effects:    
 *
 ********************************************************************/
bool    isSameAddress(INPUT uint8_t *Address1, INPUT uint8_t *Address2)
{
    a664:	b510      	push	{r4, lr}
    uint8_t i;
    
    for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    {
        if( Address1[i] != Address2[i] )
    a666:	7802      	ldrb	r2, [r0, #0]
    a668:	780b      	ldrb	r3, [r1, #0]
    a66a:	429a      	cmp	r2, r3
    a66c:	d109      	bne.n	a682 <isSameAddress+0x1e>
    a66e:	2301      	movs	r3, #1
    a670:	5cc4      	ldrb	r4, [r0, r3]
    a672:	5cca      	ldrb	r2, [r1, r3]
    a674:	4294      	cmp	r4, r2
    a676:	d106      	bne.n	a686 <isSameAddress+0x22>
    a678:	3301      	adds	r3, #1
    for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    a67a:	2b08      	cmp	r3, #8
    a67c:	d1f8      	bne.n	a670 <isSameAddress+0xc>
        {
            return false;
        }
    }
    return true;
    a67e:	2001      	movs	r0, #1
}
    a680:	bd10      	pop	{r4, pc}
            return false;
    a682:	2000      	movs	r0, #0
    a684:	e7fc      	b.n	a680 <isSameAddress+0x1c>
    a686:	2000      	movs	r0, #0
    a688:	e7fa      	b.n	a680 <isSameAddress+0x1c>
    a68a:	Address 0x0000a68a is out of bounds.


0000a68c <MiApp_SendData>:
   {
    a68c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a68e:	46de      	mov	lr, fp
    a690:	4657      	mov	r7, sl
    a692:	464e      	mov	r6, r9
    a694:	b5c0      	push	{r6, r7, lr}
    a696:	b088      	sub	sp, #32
    a698:	9107      	str	r1, [sp, #28]
    a69a:	0017      	movs	r7, r2
    a69c:	4699      	mov	r9, r3
    a69e:	ab10      	add	r3, sp, #64	; 0x40
    a6a0:	781b      	ldrb	r3, [r3, #0]
    a6a2:	469a      	mov	sl, r3
    a6a4:	ab11      	add	r3, sp, #68	; 0x44
    a6a6:	781b      	ldrb	r3, [r3, #0]
    a6a8:	469b      	mov	fp, r3
		if(addr_len == 2 && (DestinationAddress16 == 0xFFFF))
    a6aa:	2802      	cmp	r0, #2
    a6ac:	d003      	beq.n	a6b6 <MiApp_SendData+0x2a>
    a6ae:	4d3e      	ldr	r5, [pc, #248]	; (a7a8 <MiApp_SendData+0x11c>)
    a6b0:	2400      	movs	r4, #0
            if( ConnectionTable[i].status.bits.isValid && (ConnectionTable[i].status.bits.RXOnWhenIdle == 0) &&
    a6b2:	002e      	movs	r6, r5
    a6b4:	e036      	b.n	a724 <MiApp_SendData+0x98>
		uint16_t DestinationAddress16 = ((addr[1] << 8) + addr[0]);	
    a6b6:	784a      	ldrb	r2, [r1, #1]
    a6b8:	0212      	lsls	r2, r2, #8
    a6ba:	780b      	ldrb	r3, [r1, #0]
    a6bc:	189b      	adds	r3, r3, r2
		if(addr_len == 2 && (DestinationAddress16 == 0xFFFF))
    a6be:	b29b      	uxth	r3, r3
    a6c0:	4a3a      	ldr	r2, [pc, #232]	; (a7ac <MiApp_SendData+0x120>)
    a6c2:	4293      	cmp	r3, r2
    a6c4:	d1f3      	bne.n	a6ae <MiApp_SendData+0x22>
    a6c6:	2100      	movs	r1, #0
				    if( ConnectionTable[i].status.bits.isValid && ConnectionTable[i].status.bits.RXOnWhenIdle == 0 )
    a6c8:	4837      	ldr	r0, [pc, #220]	; (a7a8 <MiApp_SendData+0x11c>)
    a6ca:	0002      	movs	r2, r0
    a6cc:	e002      	b.n	a6d4 <MiApp_SendData+0x48>
    a6ce:	3101      	adds	r1, #1
			    for(i = 0; i < CONNECTION_SIZE; i++)
    a6d0:	2905      	cmp	r1, #5
    a6d2:	d021      	beq.n	a718 <MiApp_SendData+0x8c>
				    if( ConnectionTable[i].status.bits.isValid && ConnectionTable[i].status.bits.RXOnWhenIdle == 0 )
    a6d4:	008b      	lsls	r3, r1, #2
    a6d6:	185b      	adds	r3, r3, r1
    a6d8:	005b      	lsls	r3, r3, #1
    a6da:	18c3      	adds	r3, r0, r3
    a6dc:	7a1b      	ldrb	r3, [r3, #8]
    a6de:	09db      	lsrs	r3, r3, #7
    a6e0:	d0f5      	beq.n	a6ce <MiApp_SendData+0x42>
    a6e2:	008b      	lsls	r3, r1, #2
    a6e4:	185b      	adds	r3, r3, r1
    a6e6:	005b      	lsls	r3, r3, #1
    a6e8:	18d3      	adds	r3, r2, r3
    a6ea:	7a1b      	ldrb	r3, [r3, #8]
    a6ec:	07db      	lsls	r3, r3, #31
    a6ee:	d4ee      	bmi.n	a6ce <MiApp_SendData+0x42>
					    IndirectPacket(true, myPANID, NULL, false, true, msglen, msgpointer, msghandle, ackReq, ConfCallback);
    a6f0:	4b2f      	ldr	r3, [pc, #188]	; (a7b0 <MiApp_SendData+0x124>)
    a6f2:	8819      	ldrh	r1, [r3, #0]
    a6f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a6f6:	9305      	str	r3, [sp, #20]
    a6f8:	465b      	mov	r3, fp
    a6fa:	9304      	str	r3, [sp, #16]
    a6fc:	4653      	mov	r3, sl
    a6fe:	9303      	str	r3, [sp, #12]
    a700:	464b      	mov	r3, r9
    a702:	9302      	str	r3, [sp, #8]
    a704:	9701      	str	r7, [sp, #4]
    a706:	2301      	movs	r3, #1
    a708:	9300      	str	r3, [sp, #0]
    a70a:	2300      	movs	r3, #0
    a70c:	2200      	movs	r2, #0
    a70e:	2001      	movs	r0, #1
    a710:	4c28      	ldr	r4, [pc, #160]	; (a7b4 <MiApp_SendData+0x128>)
    a712:	47a0      	blx	r4
			broadcast = true;
    a714:	2001      	movs	r0, #1
					    break;
    a716:	e02f      	b.n	a778 <MiApp_SendData+0xec>
			broadcast = true;
    a718:	2001      	movs	r0, #1
    a71a:	e02d      	b.n	a778 <MiApp_SendData+0xec>
    a71c:	3401      	adds	r4, #1
    a71e:	350a      	adds	r5, #10
        for(i = 0; i < CONNECTION_SIZE; i++)
    a720:	2c05      	cmp	r4, #5
    a722:	d028      	beq.n	a776 <MiApp_SendData+0xea>
            if( ConnectionTable[i].status.bits.isValid && (ConnectionTable[i].status.bits.RXOnWhenIdle == 0) &&
    a724:	00a3      	lsls	r3, r4, #2
    a726:	191b      	adds	r3, r3, r4
    a728:	005b      	lsls	r3, r3, #1
    a72a:	18f3      	adds	r3, r6, r3
    a72c:	7a1b      	ldrb	r3, [r3, #8]
    a72e:	09db      	lsrs	r3, r3, #7
    a730:	d0f4      	beq.n	a71c <MiApp_SendData+0x90>
    a732:	00a3      	lsls	r3, r4, #2
    a734:	191b      	adds	r3, r3, r4
    a736:	005b      	lsls	r3, r3, #1
    a738:	4a1b      	ldr	r2, [pc, #108]	; (a7a8 <MiApp_SendData+0x11c>)
    a73a:	4694      	mov	ip, r2
    a73c:	4463      	add	r3, ip
    a73e:	7a1b      	ldrb	r3, [r3, #8]
    a740:	07db      	lsls	r3, r3, #31
    a742:	d4eb      	bmi.n	a71c <MiApp_SendData+0x90>
                isSameAddress(addr, ConnectionTable[i].Address) )
    a744:	0029      	movs	r1, r5
    a746:	9807      	ldr	r0, [sp, #28]
    a748:	4b1b      	ldr	r3, [pc, #108]	; (a7b8 <MiApp_SendData+0x12c>)
    a74a:	4798      	blx	r3
            if( ConnectionTable[i].status.bits.isValid && (ConnectionTable[i].status.bits.RXOnWhenIdle == 0) &&
    a74c:	2800      	cmp	r0, #0
    a74e:	d0e5      	beq.n	a71c <MiApp_SendData+0x90>
                    return IndirectPacket(broadcast, myPANID, addr, false, true, msglen,
    a750:	4b17      	ldr	r3, [pc, #92]	; (a7b0 <MiApp_SendData+0x124>)
    a752:	8819      	ldrh	r1, [r3, #0]
    a754:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a756:	9305      	str	r3, [sp, #20]
    a758:	465b      	mov	r3, fp
    a75a:	9304      	str	r3, [sp, #16]
    a75c:	4653      	mov	r3, sl
    a75e:	9303      	str	r3, [sp, #12]
    a760:	464b      	mov	r3, r9
    a762:	9302      	str	r3, [sp, #8]
    a764:	9701      	str	r7, [sp, #4]
    a766:	2301      	movs	r3, #1
    a768:	9300      	str	r3, [sp, #0]
    a76a:	2300      	movs	r3, #0
    a76c:	9a07      	ldr	r2, [sp, #28]
    a76e:	2000      	movs	r0, #0
    a770:	4c10      	ldr	r4, [pc, #64]	; (a7b4 <MiApp_SendData+0x128>)
    a772:	47a0      	blx	r4
    a774:	e011      	b.n	a79a <MiApp_SendData+0x10e>
	    bool broadcast = false;
    a776:	2000      	movs	r0, #0
        return SendPacket(broadcast, myPANID, addr, false, true, msglen,
    a778:	4b0d      	ldr	r3, [pc, #52]	; (a7b0 <MiApp_SendData+0x124>)
    a77a:	8819      	ldrh	r1, [r3, #0]
    a77c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a77e:	9305      	str	r3, [sp, #20]
    a780:	465b      	mov	r3, fp
    a782:	9304      	str	r3, [sp, #16]
    a784:	4653      	mov	r3, sl
    a786:	9303      	str	r3, [sp, #12]
    a788:	464b      	mov	r3, r9
    a78a:	9302      	str	r3, [sp, #8]
    a78c:	9701      	str	r7, [sp, #4]
    a78e:	2301      	movs	r3, #1
    a790:	9300      	str	r3, [sp, #0]
    a792:	2300      	movs	r3, #0
    a794:	9a07      	ldr	r2, [sp, #28]
    a796:	4c09      	ldr	r4, [pc, #36]	; (a7bc <MiApp_SendData+0x130>)
    a798:	47a0      	blx	r4
}
    a79a:	b008      	add	sp, #32
    a79c:	bc1c      	pop	{r2, r3, r4}
    a79e:	4691      	mov	r9, r2
    a7a0:	469a      	mov	sl, r3
    a7a2:	46a3      	mov	fp, r4
    a7a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a7a6:	46c0      	nop			; (mov r8, r8)
    a7a8:	20002668 	.word	0x20002668
    a7ac:	0000ffff 	.word	0x0000ffff
    a7b0:	200026b8 	.word	0x200026b8
    a7b4:	0000a45d 	.word	0x0000a45d
    a7b8:	0000a665 	.word	0x0000a665
    a7bc:	0000a591 	.word	0x0000a591

0000a7c0 <MiApp_Set>:


#endif

bool MiApp_Set(miwi_params_t id, uint8_t *value)
{
    a7c0:	b510      	push	{r4, lr}
    a7c2:	000c      	movs	r4, r1
    switch(id)
    a7c4:	2800      	cmp	r0, #0
    a7c6:	d001      	beq.n	a7cc <MiApp_Set+0xc>
     break;

     default:
     break;
   }
    return false;
    a7c8:	2000      	movs	r0, #0
}
    a7ca:	bd10      	pop	{r4, pc}
        if( MiMAC_Set(MAC_CHANNEL, value))
    a7cc:	4b03      	ldr	r3, [pc, #12]	; (a7dc <MiApp_Set+0x1c>)
    a7ce:	4798      	blx	r3
    a7d0:	2800      	cmp	r0, #0
    a7d2:	d0fa      	beq.n	a7ca <MiApp_Set+0xa>
          currentChannel = *value;
    a7d4:	7822      	ldrb	r2, [r4, #0]
    a7d6:	4b02      	ldr	r3, [pc, #8]	; (a7e0 <MiApp_Set+0x20>)
    a7d8:	701a      	strb	r2, [r3, #0]
          return true;
    a7da:	e7f6      	b.n	a7ca <MiApp_Set+0xa>
    a7dc:	000093c5 	.word	0x000093c5
    a7e0:	20000011 	.word	0x20000011

0000a7e4 <MiApp_ProtocolInit>:
{
    a7e4:	b500      	push	{lr}
    a7e6:	b085      	sub	sp, #20
    P2PStatus.Val = 0;
    a7e8:	2300      	movs	r3, #0
    a7ea:	4a1d      	ldr	r2, [pc, #116]	; (a860 <MiApp_ProtocolInit+0x7c>)
    a7ec:	7013      	strb	r3, [r2, #0]
            indirectMessages[i].flags.Val = 0;
    a7ee:	4a1d      	ldr	r2, [pc, #116]	; (a864 <MiApp_ProtocolInit+0x80>)
    a7f0:	7393      	strb	r3, [r2, #14]
    a7f2:	2191      	movs	r1, #145	; 0x91
    a7f4:	0049      	lsls	r1, r1, #1
    a7f6:	5453      	strb	r3, [r2, r1]
            IncomingFrameCounter[i].Val = 0;
    a7f8:	4a1b      	ldr	r2, [pc, #108]	; (a868 <MiApp_ProtocolInit+0x84>)
    a7fa:	6013      	str	r3, [r2, #0]
    a7fc:	6053      	str	r3, [r2, #4]
    a7fe:	6093      	str	r3, [r2, #8]
    a800:	60d3      	str	r3, [r2, #12]
    a802:	6113      	str	r3, [r2, #16]
            myPANID.Val = MY_PAN_ID; 
    a804:	4a19      	ldr	r2, [pc, #100]	; (a86c <MiApp_ProtocolInit+0x88>)
    a806:	4b1a      	ldr	r3, [pc, #104]	; (a870 <MiApp_ProtocolInit+0x8c>)
    a808:	801a      	strh	r2, [r3, #0]
    initValue.PAddress = myLongAddress;
    a80a:	a902      	add	r1, sp, #8
    initValue.actionFlags.bits.CCAEnable = 1;
    a80c:	780b      	ldrb	r3, [r1, #0]
    a80e:	2202      	movs	r2, #2
    a810:	4313      	orrs	r3, r2
    initValue.actionFlags.bits.PAddrLength = MY_ADDRESS_LENGTH;
    a812:	2287      	movs	r2, #135	; 0x87
    a814:	4013      	ands	r3, r2
    a816:	2240      	movs	r2, #64	; 0x40
    a818:	4313      	orrs	r3, r2
    initValue.actionFlags.bits.RepeaterMode = 0;
    a81a:	22c3      	movs	r2, #195	; 0xc3
    a81c:	4013      	ands	r3, r2
    a81e:	3ac2      	subs	r2, #194	; 0xc2
    a820:	4393      	bics	r3, r2
    a822:	700b      	strb	r3, [r1, #0]
    MiMAC_Init(initValue);
    a824:	9802      	ldr	r0, [sp, #8]
    a826:	4913      	ldr	r1, [pc, #76]	; (a874 <MiApp_ProtocolInit+0x90>)
    a828:	4b13      	ldr	r3, [pc, #76]	; (a878 <MiApp_ProtocolInit+0x94>)
    a82a:	4798      	blx	r3
    if (currentChannel != 0xFF)
    a82c:	4b13      	ldr	r3, [pc, #76]	; (a87c <MiApp_ProtocolInit+0x98>)
    a82e:	781b      	ldrb	r3, [r3, #0]
    a830:	2bff      	cmp	r3, #255	; 0xff
    a832:	d003      	beq.n	a83c <MiApp_ProtocolInit+0x58>
	    MiApp_Set(CHANNEL, &currentChannel);
    a834:	4911      	ldr	r1, [pc, #68]	; (a87c <MiApp_ProtocolInit+0x98>)
    a836:	2000      	movs	r0, #0
    a838:	4b11      	ldr	r3, [pc, #68]	; (a880 <MiApp_ProtocolInit+0x9c>)
    a83a:	4798      	blx	r3
            uint16_t tmp = 0xFFFF;
    a83c:	466b      	mov	r3, sp
    a83e:	1d98      	adds	r0, r3, #6
    a840:	2301      	movs	r3, #1
    a842:	425b      	negs	r3, r3
    a844:	8003      	strh	r3, [r0, #0]
            MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    a846:	490a      	ldr	r1, [pc, #40]	; (a870 <MiApp_ProtocolInit+0x8c>)
    a848:	4b0e      	ldr	r3, [pc, #56]	; (a884 <MiApp_ProtocolInit+0xa0>)
    a84a:	4798      	blx	r3
    P2PCapacityInfo |= (ConnMode << 4);
    a84c:	4b0e      	ldr	r3, [pc, #56]	; (a888 <MiApp_ProtocolInit+0xa4>)
    a84e:	781b      	ldrb	r3, [r3, #0]
    a850:	011b      	lsls	r3, r3, #4
    a852:	2209      	movs	r2, #9
    a854:	4313      	orrs	r3, r2
    a856:	4a0d      	ldr	r2, [pc, #52]	; (a88c <MiApp_ProtocolInit+0xa8>)
    a858:	7013      	strb	r3, [r2, #0]
}
    a85a:	2000      	movs	r0, #0
    a85c:	b005      	add	sp, #20
    a85e:	bd00      	pop	{pc}
    a860:	200026dc 	.word	0x200026dc
    a864:	200026e0 	.word	0x200026e0
    a868:	200026c4 	.word	0x200026c4
    a86c:	00001234 	.word	0x00001234
    a870:	200026b8 	.word	0x200026b8
    a874:	20000014 	.word	0x20000014
    a878:	000093ed 	.word	0x000093ed
    a87c:	20000011 	.word	0x20000011
    a880:	0000a7c1 	.word	0x0000a7c1
    a884:	00008fc5 	.word	0x00008fc5
    a888:	20000010 	.word	0x20000010
    a88c:	200026b5 	.word	0x200026b5

0000a890 <MiApp_StartConnection>:
    {
    a890:	b530      	push	{r4, r5, lr}
    a892:	b083      	sub	sp, #12
    a894:	0014      	movs	r4, r2
    a896:	001d      	movs	r5, r3
        switch(Mode)
    a898:	2801      	cmp	r0, #1
    a89a:	d032      	beq.n	a902 <MiApp_StartConnection+0x72>
    a89c:	2800      	cmp	r0, #0
    a89e:	d005      	beq.n	a8ac <MiApp_StartConnection+0x1c>
    a8a0:	2802      	cmp	r0, #2
    a8a2:	d032      	beq.n	a90a <MiApp_StartConnection+0x7a>
        ConfCallback(FAILURE);
    a8a4:	2001      	movs	r0, #1
    a8a6:	4798      	blx	r3
        return false;
    a8a8:	2000      	movs	r0, #0
    a8aa:	e028      	b.n	a8fe <MiApp_StartConnection+0x6e>
                uint8_t channel = 0;
    a8ac:	2200      	movs	r2, #0
    a8ae:	466b      	mov	r3, sp
    a8b0:	715a      	strb	r2, [r3, #5]
                        myPANID.Val = MY_PAN_ID;
    a8b2:	4918      	ldr	r1, [pc, #96]	; (a914 <MiApp_StartConnection+0x84>)
    a8b4:	4b18      	ldr	r3, [pc, #96]	; (a918 <MiApp_StartConnection+0x88>)
    a8b6:	800b      	strh	r3, [r1, #0]
                        uint16_t tmp = 0xFFFF;
    a8b8:	466b      	mov	r3, sp
    a8ba:	1d98      	adds	r0, r3, #6
    a8bc:	2301      	movs	r3, #1
    a8be:	425b      	negs	r3, r3
    a8c0:	8003      	strh	r3, [r0, #0]
                        MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    a8c2:	4b16      	ldr	r3, [pc, #88]	; (a91c <MiApp_StartConnection+0x8c>)
    a8c4:	4798      	blx	r3
				while (!(index & ChannelMap))
    a8c6:	07e3      	lsls	r3, r4, #31
    a8c8:	d40a      	bmi.n	a8e0 <MiApp_StartConnection+0x50>
    a8ca:	466b      	mov	r3, sp
    a8cc:	3305      	adds	r3, #5
    a8ce:	781b      	ldrb	r3, [r3, #0]
    a8d0:	2201      	movs	r2, #1
				index = index << 1;
    a8d2:	0052      	lsls	r2, r2, #1
				++channel;
    a8d4:	3301      	adds	r3, #1
    a8d6:	b2db      	uxtb	r3, r3
				while (!(index & ChannelMap))
    a8d8:	4222      	tst	r2, r4
    a8da:	d0fa      	beq.n	a8d2 <MiApp_StartConnection+0x42>
    a8dc:	466a      	mov	r2, sp
    a8de:	7153      	strb	r3, [r2, #5]
				MiApp_Set(CHANNEL, &channel);
    a8e0:	466b      	mov	r3, sp
    a8e2:	1d59      	adds	r1, r3, #5
    a8e4:	2000      	movs	r0, #0
    a8e6:	4b0e      	ldr	r3, [pc, #56]	; (a920 <MiApp_StartConnection+0x90>)
    a8e8:	4798      	blx	r3
                tick1.Val = MiWi_TickGet();
    a8ea:	4c0e      	ldr	r4, [pc, #56]	; (a924 <MiApp_StartConnection+0x94>)
    a8ec:	47a0      	blx	r4
    a8ee:	4b0e      	ldr	r3, [pc, #56]	; (a928 <MiApp_StartConnection+0x98>)
    a8f0:	6018      	str	r0, [r3, #0]
                tick4.Val = MiWi_TickGet();
    a8f2:	47a0      	blx	r4
    a8f4:	4b0d      	ldr	r3, [pc, #52]	; (a92c <MiApp_StartConnection+0x9c>)
    a8f6:	6018      	str	r0, [r3, #0]
				ConfCallback(SUCCESS);
    a8f8:	2000      	movs	r0, #0
    a8fa:	47a8      	blx	r5
                return true;
    a8fc:	2001      	movs	r0, #1
    }
    a8fe:	b003      	add	sp, #12
    a900:	bd30      	pop	{r4, r5, pc}
                    ConfCallback(FAILURE);
    a902:	2001      	movs	r0, #1
    a904:	4798      	blx	r3
                    return false;
    a906:	2000      	movs	r0, #0
    a908:	e7f9      	b.n	a8fe <MiApp_StartConnection+0x6e>
                ConfCallback(FAILURE);
    a90a:	2001      	movs	r0, #1
    a90c:	4798      	blx	r3
                return false;
    a90e:	2000      	movs	r0, #0
    a910:	e7f5      	b.n	a8fe <MiApp_StartConnection+0x6e>
    a912:	46c0      	nop			; (mov r8, r8)
    a914:	200026b8 	.word	0x200026b8
    a918:	00001234 	.word	0x00001234
    a91c:	00008fc5 	.word	0x00008fc5
    a920:	0000a7c1 	.word	0x0000a7c1
    a924:	0000ba8d 	.word	0x0000ba8d
    a928:	20002908 	.word	0x20002908
    a92c:	2000269c 	.word	0x2000269c

0000a930 <DumpConnection>:
     * Side Effects:    The content of the connection pointed by the index 
     *                  of the P2P Connection Entry will be printed out
     *
     ********************************************************************/
    void DumpConnection(INPUT uint8_t index)
    {
    a930:	b5f0      	push	{r4, r5, r6, r7, lr}
    a932:	46d6      	mov	lr, sl
    a934:	4647      	mov	r7, r8
    a936:	b580      	push	{r7, lr}
    a938:	b083      	sub	sp, #12
    a93a:	0005      	movs	r5, r0
#if defined (ENABLE_CONSOLE)		
        uint8_t i, j;
        
        if( index > CONNECTION_SIZE )
    a93c:	2805      	cmp	r0, #5
    a93e:	d811      	bhi.n	a964 <DumpConnection+0x34>
            #endif
            printf("  Channel: ");
            printf("%d",currentChannel);
        }
            
        if( index < CONNECTION_SIZE )
    a940:	2d04      	cmp	r5, #4
    a942:	d85e      	bhi.n	aa02 <DumpConnection+0xd2>
        {
            printf("\r\nConnection \tPeerLongAddress \tPeerInfo \tRxOnStatus1\r\n");  
    a944:	4851      	ldr	r0, [pc, #324]	; (aa8c <DumpConnection+0x15c>)
    a946:	4b52      	ldr	r3, [pc, #328]	; (aa90 <DumpConnection+0x160>)
    a948:	4798      	blx	r3
            if( ConnectionTable[index].status.bits.isValid )
    a94a:	00ab      	lsls	r3, r5, #2
    a94c:	195b      	adds	r3, r3, r5
    a94e:	005b      	lsls	r3, r3, #1
    a950:	4a50      	ldr	r2, [pc, #320]	; (aa94 <DumpConnection+0x164>)
    a952:	18d3      	adds	r3, r2, r3
    a954:	7a1b      	ldrb	r3, [r3, #8]
    a956:	09db      	lsrs	r3, r3, #7
    a958:	d123      	bne.n	a9a2 <DumpConnection+0x72>
					
                }  
            }
        }
#endif // #if defined (ENABLE_CONSOLE)		
    }
    a95a:	b003      	add	sp, #12
    a95c:	bc0c      	pop	{r2, r3}
    a95e:	4690      	mov	r8, r2
    a960:	469a      	mov	sl, r3
    a962:	bdf0      	pop	{r4, r5, r6, r7, pc}
            printf("\r\n\r\nMy Address: 0x");
    a964:	484c      	ldr	r0, [pc, #304]	; (aa98 <DumpConnection+0x168>)
    a966:	4b4d      	ldr	r3, [pc, #308]	; (aa9c <DumpConnection+0x16c>)
    a968:	4798      	blx	r3
    a96a:	4c4d      	ldr	r4, [pc, #308]	; (aaa0 <DumpConnection+0x170>)
    a96c:	0026      	movs	r6, r4
    a96e:	3e08      	subs	r6, #8
				printf("%02x",myLongAddress[MY_ADDRESS_LENGTH-1-i]);
    a970:	4f4a      	ldr	r7, [pc, #296]	; (aa9c <DumpConnection+0x16c>)
    a972:	79e1      	ldrb	r1, [r4, #7]
    a974:	484b      	ldr	r0, [pc, #300]	; (aaa4 <DumpConnection+0x174>)
    a976:	47b8      	blx	r7
    a978:	3c01      	subs	r4, #1
            for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    a97a:	42b4      	cmp	r4, r6
    a97c:	d1f9      	bne.n	a972 <DumpConnection+0x42>
                printf("  PANID: 0x");
    a97e:	484a      	ldr	r0, [pc, #296]	; (aaa8 <DumpConnection+0x178>)
    a980:	4c46      	ldr	r4, [pc, #280]	; (aa9c <DumpConnection+0x16c>)
    a982:	47a0      	blx	r4
                printf("%x",myPANID.v[1]);
    a984:	4f49      	ldr	r7, [pc, #292]	; (aaac <DumpConnection+0x17c>)
    a986:	7879      	ldrb	r1, [r7, #1]
    a988:	4e49      	ldr	r6, [pc, #292]	; (aab0 <DumpConnection+0x180>)
    a98a:	0030      	movs	r0, r6
    a98c:	47a0      	blx	r4
                printf("%x",myPANID.v[0]);
    a98e:	7839      	ldrb	r1, [r7, #0]
    a990:	0030      	movs	r0, r6
    a992:	47a0      	blx	r4
            printf("  Channel: ");
    a994:	4847      	ldr	r0, [pc, #284]	; (aab4 <DumpConnection+0x184>)
    a996:	47a0      	blx	r4
            printf("%d",currentChannel);
    a998:	4b47      	ldr	r3, [pc, #284]	; (aab8 <DumpConnection+0x188>)
    a99a:	7819      	ldrb	r1, [r3, #0]
    a99c:	4847      	ldr	r0, [pc, #284]	; (aabc <DumpConnection+0x18c>)
    a99e:	47a0      	blx	r4
    a9a0:	e7ce      	b.n	a940 <DumpConnection+0x10>
                printf("%02x",index);
    a9a2:	0029      	movs	r1, r5
    a9a4:	483f      	ldr	r0, [pc, #252]	; (aaa4 <DumpConnection+0x174>)
    a9a6:	4c3d      	ldr	r4, [pc, #244]	; (aa9c <DumpConnection+0x16c>)
    a9a8:	47a0      	blx	r4
                printf("\t\t\t");
    a9aa:	4845      	ldr	r0, [pc, #276]	; (aac0 <DumpConnection+0x190>)
    a9ac:	47a0      	blx	r4
    a9ae:	00ae      	lsls	r6, r5, #2
    a9b0:	1976      	adds	r6, r6, r5
    a9b2:	0076      	lsls	r6, r6, #1
    a9b4:	1df4      	adds	r4, r6, #7
    a9b6:	4b37      	ldr	r3, [pc, #220]	; (aa94 <DumpConnection+0x164>)
    a9b8:	18e4      	adds	r4, r4, r3
    a9ba:	3e01      	subs	r6, #1
    a9bc:	18f6      	adds	r6, r6, r3
                        printf("%02x", ConnectionTable[index].Address[MY_ADDRESS_LENGTH-1-i] );
    a9be:	4f37      	ldr	r7, [pc, #220]	; (aa9c <DumpConnection+0x16c>)
    a9c0:	7821      	ldrb	r1, [r4, #0]
    a9c2:	4838      	ldr	r0, [pc, #224]	; (aaa4 <DumpConnection+0x174>)
    a9c4:	47b8      	blx	r7
    a9c6:	3c01      	subs	r4, #1
                for(i = 0; i < 8; i++)
    a9c8:	42b4      	cmp	r4, r6
    a9ca:	d1f9      	bne.n	a9c0 <DumpConnection+0x90>
                printf("/t");
    a9cc:	483d      	ldr	r0, [pc, #244]	; (aac4 <DumpConnection+0x194>)
    a9ce:	4f33      	ldr	r7, [pc, #204]	; (aa9c <DumpConnection+0x16c>)
    a9d0:	47b8      	blx	r7
                        printf("%02x", ConnectionTable[index].PeerInfo[i] );
    a9d2:	4e30      	ldr	r6, [pc, #192]	; (aa94 <DumpConnection+0x164>)
    a9d4:	00ac      	lsls	r4, r5, #2
    a9d6:	1963      	adds	r3, r4, r5
    a9d8:	005b      	lsls	r3, r3, #1
    a9da:	18f3      	adds	r3, r6, r3
    a9dc:	7a59      	ldrb	r1, [r3, #9]
    a9de:	4831      	ldr	r0, [pc, #196]	; (aaa4 <DumpConnection+0x174>)
    a9e0:	47b8      	blx	r7
				printf("\t");
    a9e2:	2009      	movs	r0, #9
    a9e4:	4b38      	ldr	r3, [pc, #224]	; (aac8 <DumpConnection+0x198>)
    a9e6:	4698      	mov	r8, r3
    a9e8:	4798      	blx	r3
				printf("\t");
    a9ea:	2009      	movs	r0, #9
    a9ec:	47c0      	blx	r8
				printf("%d", ConnectionTable[index].status.Val );
    a9ee:	1964      	adds	r4, r4, r5
    a9f0:	0064      	lsls	r4, r4, #1
    a9f2:	1934      	adds	r4, r6, r4
    a9f4:	7a21      	ldrb	r1, [r4, #8]
    a9f6:	4831      	ldr	r0, [pc, #196]	; (aabc <DumpConnection+0x18c>)
    a9f8:	47b8      	blx	r7
                printf("\r\n");
    a9fa:	4834      	ldr	r0, [pc, #208]	; (aacc <DumpConnection+0x19c>)
    a9fc:	4b24      	ldr	r3, [pc, #144]	; (aa90 <DumpConnection+0x160>)
    a9fe:	4798      	blx	r3
    aa00:	e7ab      	b.n	a95a <DumpConnection+0x2a>
            printf("\r\n\r\nConnection     PeerLongAddress     PeerInfo\tRxOnStatus\r\n");  
    aa02:	4833      	ldr	r0, [pc, #204]	; (aad0 <DumpConnection+0x1a0>)
    aa04:	4b22      	ldr	r3, [pc, #136]	; (aa90 <DumpConnection+0x160>)
    aa06:	4798      	blx	r3
    aa08:	4b32      	ldr	r3, [pc, #200]	; (aad4 <DumpConnection+0x1a4>)
    aa0a:	4698      	mov	r8, r3
    aa0c:	2500      	movs	r5, #0
                if( ConnectionTable[i].status.bits.isValid )
    aa0e:	4b21      	ldr	r3, [pc, #132]	; (aa94 <DumpConnection+0x164>)
    aa10:	469a      	mov	sl, r3
    aa12:	e020      	b.n	aa56 <DumpConnection+0x126>
                    printf("    ");
    aa14:	4830      	ldr	r0, [pc, #192]	; (aad8 <DumpConnection+0x1a8>)
    aa16:	4e21      	ldr	r6, [pc, #132]	; (aa9c <DumpConnection+0x16c>)
    aa18:	47b0      	blx	r6
                            printf("%02x", ConnectionTable[i].PeerInfo[j] );
    aa1a:	4643      	mov	r3, r8
    aa1c:	7899      	ldrb	r1, [r3, #2]
    aa1e:	4821      	ldr	r0, [pc, #132]	; (aaa4 <DumpConnection+0x174>)
    aa20:	47b0      	blx	r6
					printf("\t");
    aa22:	2009      	movs	r0, #9
    aa24:	4c28      	ldr	r4, [pc, #160]	; (aac8 <DumpConnection+0x198>)
    aa26:	47a0      	blx	r4
					printf("\t");
    aa28:	2009      	movs	r0, #9
    aa2a:	47a0      	blx	r4
					printf("%02x", ConnectionTable[i].status.bits.RXOnWhenIdle );					
    aa2c:	9a01      	ldr	r2, [sp, #4]
    aa2e:	0093      	lsls	r3, r2, #2
    aa30:	189f      	adds	r7, r3, r2
    aa32:	007f      	lsls	r7, r7, #1
    aa34:	4b17      	ldr	r3, [pc, #92]	; (aa94 <DumpConnection+0x164>)
    aa36:	19df      	adds	r7, r3, r7
    aa38:	7a39      	ldrb	r1, [r7, #8]
    aa3a:	07c9      	lsls	r1, r1, #31
    aa3c:	0fc9      	lsrs	r1, r1, #31
    aa3e:	4819      	ldr	r0, [pc, #100]	; (aaa4 <DumpConnection+0x174>)
    aa40:	47b0      	blx	r6
                    printf("\r\n");
    aa42:	4822      	ldr	r0, [pc, #136]	; (aacc <DumpConnection+0x19c>)
    aa44:	4b12      	ldr	r3, [pc, #72]	; (aa90 <DumpConnection+0x160>)
    aa46:	4798      	blx	r3
    aa48:	3501      	adds	r5, #1
    aa4a:	230a      	movs	r3, #10
    aa4c:	469c      	mov	ip, r3
    aa4e:	44e0      	add	r8, ip
            for(i = 0; i < CONNECTION_SIZE; i++)
    aa50:	2d05      	cmp	r5, #5
    aa52:	d100      	bne.n	aa56 <DumpConnection+0x126>
    aa54:	e781      	b.n	a95a <DumpConnection+0x2a>
                if( ConnectionTable[i].status.bits.isValid )
    aa56:	9501      	str	r5, [sp, #4]
    aa58:	00ab      	lsls	r3, r5, #2
    aa5a:	195b      	adds	r3, r3, r5
    aa5c:	005b      	lsls	r3, r3, #1
    aa5e:	4453      	add	r3, sl
    aa60:	7a1b      	ldrb	r3, [r3, #8]
    aa62:	09db      	lsrs	r3, r3, #7
    aa64:	d0f0      	beq.n	aa48 <DumpConnection+0x118>
                    printf("%02x",i);
    aa66:	0029      	movs	r1, r5
    aa68:	480e      	ldr	r0, [pc, #56]	; (aaa4 <DumpConnection+0x174>)
    aa6a:	4b0c      	ldr	r3, [pc, #48]	; (aa9c <DumpConnection+0x16c>)
    aa6c:	4798      	blx	r3
                    printf("             ");
    aa6e:	481b      	ldr	r0, [pc, #108]	; (aadc <DumpConnection+0x1ac>)
    aa70:	4b0a      	ldr	r3, [pc, #40]	; (aa9c <DumpConnection+0x16c>)
    aa72:	4798      	blx	r3
    aa74:	4647      	mov	r7, r8
    aa76:	3f08      	subs	r7, #8
    aa78:	4644      	mov	r4, r8
                            printf("%02x", ConnectionTable[i].Address[MY_ADDRESS_LENGTH-1-j] );
    aa7a:	4e08      	ldr	r6, [pc, #32]	; (aa9c <DumpConnection+0x16c>)
    aa7c:	7821      	ldrb	r1, [r4, #0]
    aa7e:	4809      	ldr	r0, [pc, #36]	; (aaa4 <DumpConnection+0x174>)
    aa80:	47b0      	blx	r6
    aa82:	3c01      	subs	r4, #1
                    for(j = 0; j < 8; j++)
    aa84:	42bc      	cmp	r4, r7
    aa86:	d1f9      	bne.n	aa7c <DumpConnection+0x14c>
    aa88:	e7c4      	b.n	aa14 <DumpConnection+0xe4>
    aa8a:	46c0      	nop			; (mov r8, r8)
    aa8c:	000180a0 	.word	0x000180a0
    aa90:	0001688d 	.word	0x0001688d
    aa94:	20002668 	.word	0x20002668
    aa98:	00018074 	.word	0x00018074
    aa9c:	00016771 	.word	0x00016771
    aaa0:	20000014 	.word	0x20000014
    aaa4:	000179ec 	.word	0x000179ec
    aaa8:	00018088 	.word	0x00018088
    aaac:	200026b8 	.word	0x200026b8
    aab0:	000179fc 	.word	0x000179fc
    aab4:	00018094 	.word	0x00018094
    aab8:	20000011 	.word	0x20000011
    aabc:	000176d0 	.word	0x000176d0
    aac0:	000180d8 	.word	0x000180d8
    aac4:	000180dc 	.word	0x000180dc
    aac8:	000167a5 	.word	0x000167a5
    aacc:	000180d4 	.word	0x000180d4
    aad0:	000180e0 	.word	0x000180e0
    aad4:	2000266f 	.word	0x2000266f
    aad8:	0001812c 	.word	0x0001812c
    aadc:	0001811c 	.word	0x0001811c

0000aae0 <AddConnection>:
     *                  connection operation ends if an entry is added 
     *                  successfully
     *
     ********************************************************************/
    uint8_t AddConnection(void)
    {
    aae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aae2:	46d6      	mov	lr, sl
    aae4:	464f      	mov	r7, r9
    aae6:	b580      	push	{r7, lr}
        {
            // check if the entry is valid
            if( ConnectionTable[i].status.bits.isValid )
            {
                // check if the entry address matches source address of current received packet
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    aae8:	4b39      	ldr	r3, [pc, #228]	; (abd0 <AddConnection+0xf0>)
    aaea:	685e      	ldr	r6, [r3, #4]
    aaec:	4d39      	ldr	r5, [pc, #228]	; (abd4 <AddConnection+0xf4>)
    aaee:	2400      	movs	r4, #0
        uint8_t connectionSlot = 0xFF;
    aaf0:	27ff      	movs	r7, #255	; 0xff
            if( ConnectionTable[i].status.bits.isValid )
    aaf2:	46a9      	mov	r9, r5
    aaf4:	e005      	b.n	ab02 <AddConnection+0x22>
                    connectionSlot = i;
                    status = STATUS_EXISTS;
                    break;
                }
            }
            else if( connectionSlot == 0xFF )
    aaf6:	2fff      	cmp	r7, #255	; 0xff
    aaf8:	d015      	beq.n	ab26 <AddConnection+0x46>
    aafa:	3401      	adds	r4, #1
    aafc:	350a      	adds	r5, #10
        for(i = 0; i < CONNECTION_SIZE; i++)
    aafe:	2c05      	cmp	r4, #5
    ab00:	d013      	beq.n	ab2a <AddConnection+0x4a>
    ab02:	b2e3      	uxtb	r3, r4
    ab04:	469a      	mov	sl, r3
            if( ConnectionTable[i].status.bits.isValid )
    ab06:	00a3      	lsls	r3, r4, #2
    ab08:	191b      	adds	r3, r3, r4
    ab0a:	005b      	lsls	r3, r3, #1
    ab0c:	444b      	add	r3, r9
    ab0e:	7a1b      	ldrb	r3, [r3, #8]
    ab10:	09db      	lsrs	r3, r3, #7
    ab12:	d0f0      	beq.n	aaf6 <AddConnection+0x16>
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    ab14:	0029      	movs	r1, r5
    ab16:	0030      	movs	r0, r6
    ab18:	4b2f      	ldr	r3, [pc, #188]	; (abd8 <AddConnection+0xf8>)
    ab1a:	4798      	blx	r3
    ab1c:	2800      	cmp	r0, #0
    ab1e:	d0ec      	beq.n	aafa <AddConnection+0x1a>
    ab20:	4657      	mov	r7, sl
                    status = STATUS_EXISTS;
    ab22:	2401      	movs	r4, #1
    ab24:	e002      	b.n	ab2c <AddConnection+0x4c>
            else if( connectionSlot == 0xFF )
    ab26:	4657      	mov	r7, sl
    ab28:	e7e7      	b.n	aafa <AddConnection+0x1a>
        uint8_t status = STATUS_SUCCESS;
    ab2a:	2400      	movs	r4, #0
                // store the first empty slot
                connectionSlot = i;
            }  
        }
            
        if( connectionSlot == 0xFF )
    ab2c:	2fff      	cmp	r7, #255	; 0xff
    ab2e:	d049      	beq.n	abc4 <AddConnection+0xe4>
        {
            return STATUS_NOT_ENOUGH_SPACE;
        }
        else 
        {
            if( ConnMode >= ENABLE_PREV_CONN )
    ab30:	4b2a      	ldr	r3, [pc, #168]	; (abdc <AddConnection+0xfc>)
    ab32:	781b      	ldrb	r3, [r3, #0]
    ab34:	2b00      	cmp	r3, #0
    ab36:	d146      	bne.n	abc6 <AddConnection+0xe6>
            {
                return status;
            }
            MyindexinPC = connectionSlot;    
    ab38:	4b29      	ldr	r3, [pc, #164]	; (abe0 <AddConnection+0x100>)
    ab3a:	701f      	strb	r7, [r3, #0]
    ab3c:	00b9      	lsls	r1, r7, #2
    ab3e:	19c9      	adds	r1, r1, r7
    ab40:	0049      	lsls	r1, r1, #1
    ab42:	4b24      	ldr	r3, [pc, #144]	; (abd4 <AddConnection+0xf4>)
    ab44:	18c9      	adds	r1, r1, r3
    ab46:	2300      	movs	r3, #0
            // store the source address
            for(i = 0; i < 8; i++)
            {
                ConnectionTable[connectionSlot].Address[i] = rxMessage.SourceAddress[i];
    ab48:	0038      	movs	r0, r7
    ab4a:	5cf2      	ldrb	r2, [r6, r3]
    ab4c:	54ca      	strb	r2, [r1, r3]
    ab4e:	3301      	adds	r3, #1
            for(i = 0; i < 8; i++)
    ab50:	2b08      	cmp	r3, #8
    ab52:	d1fa      	bne.n	ab4a <AddConnection+0x6a>
            }
			ConnectionTable[connectionSlot].status.bits.isValid = 1;
    ab54:	0083      	lsls	r3, r0, #2
    ab56:	181b      	adds	r3, r3, r0
    ab58:	005b      	lsls	r3, r3, #1
    ab5a:	4a1e      	ldr	r2, [pc, #120]	; (abd4 <AddConnection+0xf4>)
    ab5c:	18d3      	adds	r3, r2, r3
    ab5e:	7a19      	ldrb	r1, [r3, #8]
    ab60:	2280      	movs	r2, #128	; 0x80
    ab62:	4252      	negs	r2, r2
    ab64:	430a      	orrs	r2, r1
    ab66:	721a      	strb	r2, [r3, #8]
			if(rxMessage.Payload[2] & 0x01)
    ab68:	4b19      	ldr	r3, [pc, #100]	; (abd0 <AddConnection+0xf0>)
    ab6a:	689b      	ldr	r3, [r3, #8]
    ab6c:	789a      	ldrb	r2, [r3, #2]
    ab6e:	07d2      	lsls	r2, r2, #31
    ab70:	d51e      	bpl.n	abb0 <AddConnection+0xd0>
				{
					ConnectionTable[connectionSlot].status.bits.RXOnWhenIdle = 1;
    ab72:	0082      	lsls	r2, r0, #2
    ab74:	1812      	adds	r2, r2, r0
    ab76:	0052      	lsls	r2, r2, #1
    ab78:	4916      	ldr	r1, [pc, #88]	; (abd4 <AddConnection+0xf4>)
    ab7a:	188a      	adds	r2, r1, r2
    ab7c:	7a11      	ldrb	r1, [r2, #8]
    ab7e:	2501      	movs	r5, #1
    ab80:	4329      	orrs	r1, r5
    ab82:	7211      	strb	r1, [r2, #8]
            //ConnectionTable[connectionSlot].status.Val = temp;
            // store possible additional connection payload
            #if ADDITIONAL_NODE_ID_SIZE > 0
                for(i = 0; i < ADDITIONAL_NODE_ID_SIZE; i++)
                {
                    ConnectionTable[connectionSlot].PeerInfo[i] = rxMessage.Payload[3+i];
    ab84:	78d9      	ldrb	r1, [r3, #3]
    ab86:	0082      	lsls	r2, r0, #2
    ab88:	1810      	adds	r0, r2, r0
    ab8a:	0043      	lsls	r3, r0, #1
    ab8c:	4811      	ldr	r0, [pc, #68]	; (abd4 <AddConnection+0xf4>)
    ab8e:	18c0      	adds	r0, r0, r3
    ab90:	7241      	strb	r1, [r0, #9]
                }
            #endif
    
            #ifdef ENABLE_SECURITY
                // if security is enabled, clear the incoming frame control
                IncomingFrameCounter[connectionSlot].Val = 0;
    ab92:	2100      	movs	r1, #0
    ab94:	4b13      	ldr	r3, [pc, #76]	; (abe4 <AddConnection+0x104>)
    ab96:	50d1      	str	r1, [r2, r3]
            #endif
            LatestConnection = connectionSlot;
    ab98:	4b13      	ldr	r3, [pc, #76]	; (abe8 <AddConnection+0x108>)
    ab9a:	701f      	strb	r7, [r3, #0]
            P2PStatus.bits.SearchConnection = 0;   
    ab9c:	4a13      	ldr	r2, [pc, #76]	; (abec <AddConnection+0x10c>)
    ab9e:	7813      	ldrb	r3, [r2, #0]
    aba0:	3110      	adds	r1, #16
    aba2:	438b      	bics	r3, r1
    aba4:	7013      	strb	r3, [r2, #0]
        }
        conn_size = Total_Connections();
    aba6:	4b12      	ldr	r3, [pc, #72]	; (abf0 <AddConnection+0x110>)
    aba8:	4798      	blx	r3
    abaa:	4b12      	ldr	r3, [pc, #72]	; (abf4 <AddConnection+0x114>)
    abac:	7018      	strb	r0, [r3, #0]
    #if defined (ENABLE_NETWORK_FREEZER)
		PDS_Store(PDS_EDC_ID);
    #endif

        return status;
    abae:	e00a      	b.n	abc6 <AddConnection+0xe6>
					ConnectionTable[connectionSlot].status.bits.RXOnWhenIdle = 0;
    abb0:	0082      	lsls	r2, r0, #2
    abb2:	1812      	adds	r2, r2, r0
    abb4:	0052      	lsls	r2, r2, #1
    abb6:	4907      	ldr	r1, [pc, #28]	; (abd4 <AddConnection+0xf4>)
    abb8:	188a      	adds	r2, r1, r2
    abba:	7a11      	ldrb	r1, [r2, #8]
    abbc:	2501      	movs	r5, #1
    abbe:	43a9      	bics	r1, r5
    abc0:	7211      	strb	r1, [r2, #8]
    abc2:	e7df      	b.n	ab84 <AddConnection+0xa4>
            return STATUS_NOT_ENOUGH_SPACE;
    abc4:	24f1      	movs	r4, #241	; 0xf1
    }
    abc6:	0020      	movs	r0, r4
    abc8:	bc0c      	pop	{r2, r3}
    abca:	4691      	mov	r9, r2
    abcc:	469a      	mov	sl, r3
    abce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    abd0:	2000294c 	.word	0x2000294c
    abd4:	20002668 	.word	0x20002668
    abd8:	0000a665 	.word	0x0000a665
    abdc:	20000010 	.word	0x20000010
    abe0:	200026d8 	.word	0x200026d8
    abe4:	200026c4 	.word	0x200026c4
    abe8:	20002664 	.word	0x20002664
    abec:	200026dc 	.word	0x200026dc
    abf0:	0000a435 	.word	0x0000a435
    abf4:	200026c1 	.word	0x200026c1

0000abf8 <MiApp_ConnectionMode>:
 *      None
 *
 *****************************************************************************************/ 
void MiApp_ConnectionMode(INPUT uint8_t Mode)
{
    if( Mode > 3 )
    abf8:	2803      	cmp	r0, #3
    abfa:	d808      	bhi.n	ac0e <MiApp_ConnectionMode+0x16>
    {
        return;
    }
    ConnMode = Mode;
    abfc:	4b04      	ldr	r3, [pc, #16]	; (ac10 <MiApp_ConnectionMode+0x18>)
    abfe:	7018      	strb	r0, [r3, #0]
    P2PCapacityInfo = (P2PCapacityInfo & 0x0F) | (ConnMode << 4);
    ac00:	4a04      	ldr	r2, [pc, #16]	; (ac14 <MiApp_ConnectionMode+0x1c>)
    ac02:	7811      	ldrb	r1, [r2, #0]
    ac04:	230f      	movs	r3, #15
    ac06:	400b      	ands	r3, r1
    ac08:	0100      	lsls	r0, r0, #4
    ac0a:	4318      	orrs	r0, r3
    ac0c:	7010      	strb	r0, [r2, #0]
    
    #if defined(ENABLE_NETWORK_FREEZER)
		PDS_Store(PDS_CONNECTION_MODE_ID);
    #endif
}
    ac0e:	4770      	bx	lr
    ac10:	20000010 	.word	0x20000010
    ac14:	200026b5 	.word	0x200026b5

0000ac18 <MiApp_SubscribeDataIndicationCallback>:
 *      None
 *
 *****************************************************************************************/      
bool  MiApp_SubscribeDataIndicationCallback(PacketIndCallback_t callback)
{
    if (NULL != callback)
    ac18:	2800      	cmp	r0, #0
    ac1a:	d003      	beq.n	ac24 <MiApp_SubscribeDataIndicationCallback+0xc>
    {
        pktRxcallback = callback;
    ac1c:	4b02      	ldr	r3, [pc, #8]	; (ac28 <MiApp_SubscribeDataIndicationCallback+0x10>)
    ac1e:	6018      	str	r0, [r3, #0]
        return true;
    ac20:	2001      	movs	r0, #1
    }
    return false;
}
    ac22:	4770      	bx	lr
    return false;
    ac24:	2000      	movs	r0, #0
    ac26:	e7fc      	b.n	ac22 <MiApp_SubscribeDataIndicationCallback+0xa>
    ac28:	2000028c 	.word	0x2000028c

0000ac2c <calculate_ToA>:
	}
}
#endif

uint16_t calculate_ToA(uint8_t payload_length)
{
    ac2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ac2e:	46ce      	mov	lr, r9
    ac30:	4647      	mov	r7, r8
    ac32:	b580      	push	{r7, lr}
    ac34:	b087      	sub	sp, #28
    ac36:	4680      	mov	r8, r0
	   Rev.7 - May 2020 */
	
	/* Tested only with EU868 channel plan SF = 7 to 12 , BW = 125 kHz */
	 
	    //LoRa Modem Settings
	    uint8_t spreadFactor = 0;
    ac38:	ab04      	add	r3, sp, #16
    ac3a:	1dde      	adds	r6, r3, #7
    ac3c:	2300      	movs	r3, #0
    ac3e:	7033      	strb	r3, [r6, #0]
	    uint8_t bandWidth = 125;
	    uint8_t codingRate = 0;
    ac40:	aa04      	add	r2, sp, #16
    ac42:	1d97      	adds	r7, r2, #6
    ac44:	7193      	strb	r3, [r2, #6]
	    bool ldro = false;   //LowDataRateOptimize
	    
	    //Packet Configuration
	    uint16_t programmedPreambleLength = 0;
    ac46:	ad05      	add	r5, sp, #20
    ac48:	802b      	strh	r3, [r5, #0]
	    bool implicitHeaderMode = 0; //Implicit or Explicit header
	    bool crcEnable = 0; //CRC
    ac4a:	3303      	adds	r3, #3
    ac4c:	4694      	mov	ip, r2
    ac4e:	4463      	add	r3, ip
    ac50:	4699      	mov	r9, r3
    ac52:	2300      	movs	r3, #0
    ac54:	464a      	mov	r2, r9
    ac56:	7013      	strb	r3, [r2, #0]
		if(payload_length > 255)
		{
			payload_length = 255;
		}
			    
	    RADIO_GetAttr(SPREADING_FACTOR,(void *)&spreadFactor);
    ac58:	0031      	movs	r1, r6
    ac5a:	2016      	movs	r0, #22
    ac5c:	4c39      	ldr	r4, [pc, #228]	; (ad44 <calculate_ToA+0x118>)
    ac5e:	47a0      	blx	r4
	    RADIO_GetAttr(PREAMBLE_LEN,(void *)&programmedPreambleLength);
    ac60:	0029      	movs	r1, r5
    ac62:	2003      	movs	r0, #3
    ac64:	47a0      	blx	r4
	    RADIO_GetAttr(CRC_ON,(void *)&crcEnable);
    ac66:	4649      	mov	r1, r9
    ac68:	2014      	movs	r0, #20
    ac6a:	47a0      	blx	r4
	    RADIO_GetAttr(ERROR_CODING_RATE,(void *)&codingRate);
    ac6c:	0039      	movs	r1, r7
    ac6e:	200b      	movs	r0, #11
    ac70:	47a0      	blx	r4


	    symbolRate = (bandWidth * 1000) /  ((float)(1 << spreadFactor));
    ac72:	7836      	ldrb	r6, [r6, #0]
    ac74:	2001      	movs	r0, #1
    ac76:	40b0      	lsls	r0, r6
    ac78:	4b33      	ldr	r3, [pc, #204]	; (ad48 <calculate_ToA+0x11c>)
    ac7a:	4798      	blx	r3
    ac7c:	1c01      	adds	r1, r0, #0
    ac7e:	4c33      	ldr	r4, [pc, #204]	; (ad4c <calculate_ToA+0x120>)
    ac80:	4833      	ldr	r0, [pc, #204]	; (ad50 <calculate_ToA+0x124>)
    ac82:	47a0      	blx	r4
    ac84:	1c01      	adds	r1, r0, #0
	    symbolTime = 1000 / (symbolRate);
    ac86:	4833      	ldr	r0, [pc, #204]	; (ad54 <calculate_ToA+0x128>)
    ac88:	47a0      	blx	r4
    ac8a:	1c04      	adds	r4, r0, #0
	    preambleDuration = (programmedPreambleLength + 4.25) * symbolTime;
    ac8c:	8828      	ldrh	r0, [r5, #0]
    ac8e:	4b32      	ldr	r3, [pc, #200]	; (ad58 <calculate_ToA+0x12c>)
    ac90:	4798      	blx	r3
    ac92:	2200      	movs	r2, #0
    ac94:	4b31      	ldr	r3, [pc, #196]	; (ad5c <calculate_ToA+0x130>)
    ac96:	4d32      	ldr	r5, [pc, #200]	; (ad60 <calculate_ToA+0x134>)
    ac98:	47a8      	blx	r5
    ac9a:	9000      	str	r0, [sp, #0]
    ac9c:	9101      	str	r1, [sp, #4]
    ac9e:	1c20      	adds	r0, r4, #0
    aca0:	4b30      	ldr	r3, [pc, #192]	; (ad64 <calculate_ToA+0x138>)
    aca2:	4798      	blx	r3
    aca4:	0002      	movs	r2, r0
    aca6:	000b      	movs	r3, r1
    aca8:	9800      	ldr	r0, [sp, #0]
    acaa:	9901      	ldr	r1, [sp, #4]
    acac:	4d2e      	ldr	r5, [pc, #184]	; (ad68 <calculate_ToA+0x13c>)
    acae:	47a8      	blx	r5
    acb0:	4b2e      	ldr	r3, [pc, #184]	; (ad6c <calculate_ToA+0x140>)
    acb2:	4798      	blx	r3
    acb4:	9000      	str	r0, [sp, #0]

	    if ( ((spreadFactor == 12) && ((bandWidth == 125) || (bandWidth == 250))) || ((spreadFactor == 11) && (bandWidth == 125)))
    acb6:	2e0c      	cmp	r6, #12
    acb8:	d040      	beq.n	ad3c <calculate_ToA+0x110>
    acba:	0033      	movs	r3, r6
    acbc:	3b0b      	subs	r3, #11
    acbe:	425a      	negs	r2, r3
    acc0:	4153      	adcs	r3, r2
    acc2:	b2db      	uxtb	r3, r3
	    {
		    ldro = false;
	    }
	    
	    ceilValueNumerator = (8 * payload_length - 4 * spreadFactor + 28 + 16 * crcEnable - 20 * implicitHeaderMode);
	    ceilValueDenominator= (4 * (spreadFactor - 2 * ldro));
    acc4:	005b      	lsls	r3, r3, #1
    acc6:	1af3      	subs	r3, r6, r3
    acc8:	009b      	lsls	r3, r3, #2
	    ceilValue = (ceilValueNumerator + ceilValueDenominator - 1.0) / ceilValueDenominator;
    acca:	b2df      	uxtb	r7, r3
	    ceilValueNumerator = (8 * payload_length - 4 * spreadFactor + 28 + 16 * crcEnable - 20 * implicitHeaderMode);
    accc:	4643      	mov	r3, r8
    acce:	0058      	lsls	r0, r3, #1
    acd0:	1b80      	subs	r0, r0, r6
    acd2:	3007      	adds	r0, #7
    acd4:	ab04      	add	r3, sp, #16
    acd6:	3303      	adds	r3, #3
    acd8:	781b      	ldrb	r3, [r3, #0]
    acda:	009b      	lsls	r3, r3, #2
    acdc:	18c0      	adds	r0, r0, r3
    acde:	0080      	lsls	r0, r0, #2
	    ceilValue = (ceilValueNumerator + ceilValueDenominator - 1.0) / ceilValueDenominator;
    ace0:	b280      	uxth	r0, r0
    ace2:	19c0      	adds	r0, r0, r7
    ace4:	4d1c      	ldr	r5, [pc, #112]	; (ad58 <calculate_ToA+0x12c>)
    ace6:	47a8      	blx	r5
    ace8:	2200      	movs	r2, #0
    acea:	4b21      	ldr	r3, [pc, #132]	; (ad70 <calculate_ToA+0x144>)
    acec:	4e21      	ldr	r6, [pc, #132]	; (ad74 <calculate_ToA+0x148>)
    acee:	47b0      	blx	r6
    acf0:	9002      	str	r0, [sp, #8]
    acf2:	9103      	str	r1, [sp, #12]
    acf4:	0038      	movs	r0, r7
    acf6:	47a8      	blx	r5
    acf8:	0002      	movs	r2, r0
    acfa:	000b      	movs	r3, r1
    acfc:	9802      	ldr	r0, [sp, #8]
    acfe:	9903      	ldr	r1, [sp, #12]
    ad00:	4e1d      	ldr	r6, [pc, #116]	; (ad78 <calculate_ToA+0x14c>)
    ad02:	47b0      	blx	r6
    ad04:	4b1d      	ldr	r3, [pc, #116]	; (ad7c <calculate_ToA+0x150>)
    ad06:	4798      	blx	r3
	    
	    if ((ceilValue * (codingRate + 4)) > 0)
    ad08:	b282      	uxth	r2, r0
    ad0a:	ab04      	add	r3, sp, #16
    ad0c:	7998      	ldrb	r0, [r3, #6]
    ad0e:	3004      	adds	r0, #4
    ad10:	4350      	muls	r0, r2
    ad12:	2800      	cmp	r0, #0
    ad14:	dd14      	ble.n	ad40 <calculate_ToA+0x114>
	    {
		    maxCeilValue = ceilValue * (codingRate + 4);
    ad16:	4b0c      	ldr	r3, [pc, #48]	; (ad48 <calculate_ToA+0x11c>)
    ad18:	4798      	blx	r3
	    else
	    {
		    maxCeilValue = 0;
	    }

	    numberOfPayloadSymbols = 8 + maxCeilValue;
    ad1a:	4e19      	ldr	r6, [pc, #100]	; (ad80 <calculate_ToA+0x154>)
    ad1c:	2182      	movs	r1, #130	; 0x82
    ad1e:	05c9      	lsls	r1, r1, #23
    ad20:	47b0      	blx	r6
	    payloadDuration = numberOfPayloadSymbols * symbolTime;
    ad22:	1c21      	adds	r1, r4, #0
    ad24:	4b17      	ldr	r3, [pc, #92]	; (ad84 <calculate_ToA+0x158>)
    ad26:	4798      	blx	r3
		
	    totalTimeOnAir = preambleDuration + payloadDuration;
    ad28:	9900      	ldr	r1, [sp, #0]
    ad2a:	47b0      	blx	r6
		
		return ((uint16_t)totalTimeOnAir) ;
    ad2c:	4b16      	ldr	r3, [pc, #88]	; (ad88 <calculate_ToA+0x15c>)
    ad2e:	4798      	blx	r3
    ad30:	b280      	uxth	r0, r0
    ad32:	b007      	add	sp, #28
    ad34:	bc0c      	pop	{r2, r3}
    ad36:	4690      	mov	r8, r2
    ad38:	4699      	mov	r9, r3
    ad3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		    ldro =  true;
    ad3c:	2301      	movs	r3, #1
    ad3e:	e7c1      	b.n	acc4 <calculate_ToA+0x98>
		    maxCeilValue = 0;
    ad40:	2000      	movs	r0, #0
    ad42:	e7ea      	b.n	ad1a <calculate_ToA+0xee>
    ad44:	0000dc35 	.word	0x0000dc35
    ad48:	000142ad 	.word	0x000142ad
    ad4c:	00013915 	.word	0x00013915
    ad50:	47f42400 	.word	0x47f42400
    ad54:	447a0000 	.word	0x447a0000
    ad58:	00015df5 	.word	0x00015df5
    ad5c:	40110000 	.word	0x40110000
    ad60:	000143d9 	.word	0x000143d9
    ad64:	00015ee9 	.word	0x00015ee9
    ad68:	00015261 	.word	0x00015261
    ad6c:	00015f8d 	.word	0x00015f8d
    ad70:	3ff00000 	.word	0x3ff00000
    ad74:	00015761 	.word	0x00015761
    ad78:	000149f9 	.word	0x000149f9
    ad7c:	000133f5 	.word	0x000133f5
    ad80:	000135f1 	.word	0x000135f1
    ad84:	00013cf5 	.word	0x00013cf5
    ad88:	000133c5 	.word	0x000133c5

0000ad8c <P2PTasks>:
{
    ad8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad8e:	46de      	mov	lr, fp
    ad90:	4657      	mov	r7, sl
    ad92:	464e      	mov	r6, r9
    ad94:	4645      	mov	r5, r8
    ad96:	b5e0      	push	{r5, r6, r7, lr}
    ad98:	b08b      	sub	sp, #44	; 0x2c
    MiMAC_Task();
    ad9a:	4bb6      	ldr	r3, [pc, #728]	; (b074 <P2PTasks+0x2e8>)
    ad9c:	4798      	blx	r3
            if( indirectMessages[i].flags.bits.isValid )
    ad9e:	4bb6      	ldr	r3, [pc, #728]	; (b078 <P2PTasks+0x2ec>)
    ada0:	7b9b      	ldrb	r3, [r3, #14]
    ada2:	07db      	lsls	r3, r3, #31
    ada4:	d423      	bmi.n	adee <P2PTasks+0x62>
    ada6:	2391      	movs	r3, #145	; 0x91
    ada8:	005b      	lsls	r3, r3, #1
    adaa:	4ab3      	ldr	r2, [pc, #716]	; (b078 <P2PTasks+0x2ec>)
    adac:	5cd3      	ldrb	r3, [r2, r3]
    adae:	07db      	lsls	r3, r3, #31
    adb0:	d434      	bmi.n	ae1c <P2PTasks+0x90>
	ack_timeout_variable = calculate_ToA(PACKETLEN_ACK);
    adb2:	2016      	movs	r0, #22
    adb4:	4bb1      	ldr	r3, [pc, #708]	; (b07c <P2PTasks+0x2f0>)
    adb6:	4798      	blx	r3
	ack_timeout_variable = (ack_timeout_variable + TOTAL_ACK_PROCESSING_DELAY) * 1000;
    adb8:	23fa      	movs	r3, #250	; 0xfa
    adba:	009b      	lsls	r3, r3, #2
    adbc:	4358      	muls	r0, r3
    adbe:	4bb0      	ldr	r3, [pc, #704]	; (b080 <P2PTasks+0x2f4>)
    adc0:	469c      	mov	ip, r3
    adc2:	4460      	add	r0, ip
    adc4:	4baf      	ldr	r3, [pc, #700]	; (b084 <P2PTasks+0x2f8>)
    adc6:	6018      	str	r0, [r3, #0]
	if((AckReqData) && (DataTxAckTimer.Val)) // AckReqData
    adc8:	4baf      	ldr	r3, [pc, #700]	; (b088 <P2PTasks+0x2fc>)
    adca:	781b      	ldrb	r3, [r3, #0]
    adcc:	2b00      	cmp	r3, #0
    adce:	d003      	beq.n	add8 <P2PTasks+0x4c>
    add0:	4bae      	ldr	r3, [pc, #696]	; (b08c <P2PTasks+0x300>)
    add2:	681b      	ldr	r3, [r3, #0]
    add4:	2b00      	cmp	r3, #0
    add6:	d13b      	bne.n	ae50 <P2PTasks+0xc4>
    if( P2PStatus.bits.RxHasUserData == 0 && MiMAC_ReceivedPacket() )
    add8:	4bad      	ldr	r3, [pc, #692]	; (b090 <P2PTasks+0x304>)
    adda:	781b      	ldrb	r3, [r3, #0]
    addc:	071b      	lsls	r3, r3, #28
    adde:	d54c      	bpl.n	ae7a <P2PTasks+0xee>
}
    ade0:	b00b      	add	sp, #44	; 0x2c
    ade2:	bc3c      	pop	{r2, r3, r4, r5}
    ade4:	4690      	mov	r8, r2
    ade6:	4699      	mov	r9, r3
    ade8:	46a2      	mov	sl, r4
    adea:	46ab      	mov	fp, r5
    adec:	bdf0      	pop	{r4, r5, r6, r7, pc}
                tmpTick.Val = MiWi_TickGet();
    adee:	4ba9      	ldr	r3, [pc, #676]	; (b094 <P2PTasks+0x308>)
    adf0:	4798      	blx	r3
                if( MiWi_TickGetDiff(tmpTick, indirectMessages[i].TickStart) > INDIRECT_MESSAGE_TIMEOUT )
    adf2:	4ba1      	ldr	r3, [pc, #644]	; (b078 <P2PTasks+0x2ec>)
    adf4:	6819      	ldr	r1, [r3, #0]
    adf6:	4ba8      	ldr	r3, [pc, #672]	; (b098 <P2PTasks+0x30c>)
    adf8:	4798      	blx	r3
    adfa:	4ba8      	ldr	r3, [pc, #672]	; (b09c <P2PTasks+0x310>)
    adfc:	4298      	cmp	r0, r3
    adfe:	d9d2      	bls.n	ada6 <P2PTasks+0x1a>
                    indirectMessages[i].flags.Val = 0x00;   
    ae00:	4b9d      	ldr	r3, [pc, #628]	; (b078 <P2PTasks+0x2ec>)
    ae02:	2200      	movs	r2, #0
    ae04:	739a      	strb	r2, [r3, #14]
                    indirectMessages[i].indirectConfCallback(indirectMessages[i].indirectDataHandle, TRANSACTION_EXPIRED, indirectMessages[i].PayLoad);
    ae06:	001a      	movs	r2, r3
    ae08:	3210      	adds	r2, #16
    ae0a:	2110      	movs	r1, #16
    ae0c:	31ff      	adds	r1, #255	; 0xff
    ae0e:	5c58      	ldrb	r0, [r3, r1]
    ae10:	3101      	adds	r1, #1
    ae12:	585b      	ldr	r3, [r3, r1]
    ae14:	390c      	subs	r1, #12
    ae16:	39ff      	subs	r1, #255	; 0xff
    ae18:	4798      	blx	r3
    ae1a:	e7c4      	b.n	ada6 <P2PTasks+0x1a>
                tmpTick.Val = MiWi_TickGet();
    ae1c:	4b9d      	ldr	r3, [pc, #628]	; (b094 <P2PTasks+0x308>)
    ae1e:	4798      	blx	r3
                if( MiWi_TickGetDiff(tmpTick, indirectMessages[i].TickStart) > INDIRECT_MESSAGE_TIMEOUT )
    ae20:	238a      	movs	r3, #138	; 0x8a
    ae22:	005b      	lsls	r3, r3, #1
    ae24:	4a94      	ldr	r2, [pc, #592]	; (b078 <P2PTasks+0x2ec>)
    ae26:	58d1      	ldr	r1, [r2, r3]
    ae28:	4b9b      	ldr	r3, [pc, #620]	; (b098 <P2PTasks+0x30c>)
    ae2a:	4798      	blx	r3
    ae2c:	4b9b      	ldr	r3, [pc, #620]	; (b09c <P2PTasks+0x310>)
    ae2e:	4298      	cmp	r0, r3
    ae30:	d9bf      	bls.n	adb2 <P2PTasks+0x26>
                    indirectMessages[i].flags.Val = 0x00;   
    ae32:	4b91      	ldr	r3, [pc, #580]	; (b078 <P2PTasks+0x2ec>)
    ae34:	2100      	movs	r1, #0
    ae36:	2291      	movs	r2, #145	; 0x91
    ae38:	0052      	lsls	r2, r2, #1
    ae3a:	5499      	strb	r1, [r3, r2]
                    indirectMessages[i].indirectConfCallback(indirectMessages[i].indirectDataHandle, TRANSACTION_EXPIRED, indirectMessages[i].PayLoad);
    ae3c:	001a      	movs	r2, r3
    ae3e:	3225      	adds	r2, #37	; 0x25
    ae40:	32ff      	adds	r2, #255	; 0xff
    ae42:	4997      	ldr	r1, [pc, #604]	; (b0a0 <P2PTasks+0x314>)
    ae44:	5c58      	ldrb	r0, [r3, r1]
    ae46:	3101      	adds	r1, #1
    ae48:	585b      	ldr	r3, [r3, r1]
    ae4a:	2105      	movs	r1, #5
    ae4c:	4798      	blx	r3
    ae4e:	e7b0      	b.n	adb2 <P2PTasks+0x26>
		tmpTick.Val = MiWi_TickGet();
    ae50:	4b90      	ldr	r3, [pc, #576]	; (b094 <P2PTasks+0x308>)
    ae52:	4798      	blx	r3
		if( MiWi_TickGetDiff(tmpTick, DataTxAckTimer) > ((ack_timeout_variable) * ACK_TIMEOUT_INTERVAL) )
    ae54:	4b8d      	ldr	r3, [pc, #564]	; (b08c <P2PTasks+0x300>)
    ae56:	6819      	ldr	r1, [r3, #0]
    ae58:	4b8f      	ldr	r3, [pc, #572]	; (b098 <P2PTasks+0x30c>)
    ae5a:	4798      	blx	r3
    ae5c:	4b89      	ldr	r3, [pc, #548]	; (b084 <P2PTasks+0x2f8>)
    ae5e:	681b      	ldr	r3, [r3, #0]
    ae60:	4298      	cmp	r0, r3
    ae62:	d9b9      	bls.n	add8 <P2PTasks+0x4c>
			DataTxAckTimer.Val =0;
    ae64:	2300      	movs	r3, #0
    ae66:	4a89      	ldr	r2, [pc, #548]	; (b08c <P2PTasks+0x300>)
    ae68:	6013      	str	r3, [r2, #0]
			AckReqData = 0;
    ae6a:	4a87      	ldr	r2, [pc, #540]	; (b088 <P2PTasks+0x2fc>)
    ae6c:	7013      	strb	r3, [r2, #0]
			MiMAC_RetryPacket();
    ae6e:	4b8d      	ldr	r3, [pc, #564]	; (b0a4 <P2PTasks+0x318>)
    ae70:	4798      	blx	r3
			printf("\r\n Ack Timeout\r\n");
    ae72:	488d      	ldr	r0, [pc, #564]	; (b0a8 <P2PTasks+0x31c>)
    ae74:	4b8d      	ldr	r3, [pc, #564]	; (b0ac <P2PTasks+0x320>)
    ae76:	4798      	blx	r3
    ae78:	e7ae      	b.n	add8 <P2PTasks+0x4c>
    if( P2PStatus.bits.RxHasUserData == 0 && MiMAC_ReceivedPacket() )
    ae7a:	4b8d      	ldr	r3, [pc, #564]	; (b0b0 <P2PTasks+0x324>)
    ae7c:	4798      	blx	r3
    ae7e:	2800      	cmp	r0, #0
    ae80:	d0ae      	beq.n	ade0 <P2PTasks+0x54>
        FW_Stat = false;  // Used for SW_Generated ACK T PAN CO
    ae82:	2200      	movs	r2, #0
    ae84:	4b8b      	ldr	r3, [pc, #556]	; (b0b4 <P2PTasks+0x328>)
    ae86:	701a      	strb	r2, [r3, #0]
            temp_bit = MACRxPacket.flags.bits.broadcast;
    ae88:	4b8b      	ldr	r3, [pc, #556]	; (b0b8 <P2PTasks+0x32c>)
    ae8a:	7819      	ldrb	r1, [r3, #0]
    ae8c:	074b      	lsls	r3, r1, #29
    ae8e:	0fdb      	lsrs	r3, r3, #31
    ae90:	4a8a      	ldr	r2, [pc, #552]	; (b0bc <P2PTasks+0x330>)
    ae92:	7013      	strb	r3, [r2, #0]
            rxMessage.flags.bits.broadcast = temp_bit;
    ae94:	2203      	movs	r2, #3
        rxMessage.flags.bits.secEn = MACRxPacket.flags.bits.secEn;
    ae96:	08cc      	lsrs	r4, r1, #3
    ae98:	2001      	movs	r0, #1
    ae9a:	4004      	ands	r4, r0
    ae9c:	00e4      	lsls	r4, r4, #3
    ae9e:	4013      	ands	r3, r2
        rxMessage.flags.bits.command = (MACRxPacket.flags.bits.packetType == PACKET_TYPE_COMMAND) ? 1:0;
    aea0:	400a      	ands	r2, r1
    aea2:	3a01      	subs	r2, #1
    aea4:	4255      	negs	r5, r2
    aea6:	416a      	adcs	r2, r5
    aea8:	4002      	ands	r2, r0
    aeaa:	0152      	lsls	r2, r2, #5
    aeac:	4323      	orrs	r3, r4
        rxMessage.flags.bits.srcPrsnt = MACRxPacket.flags.bits.sourcePrsnt;
    aeae:	09cc      	lsrs	r4, r1, #7
    aeb0:	4020      	ands	r0, r4
    aeb2:	0180      	lsls	r0, r0, #6
    aeb4:	4313      	orrs	r3, r2
    aeb6:	4303      	orrs	r3, r0
    aeb8:	4a81      	ldr	r2, [pc, #516]	; (b0c0 <P2PTasks+0x334>)
    aeba:	7013      	strb	r3, [r2, #0]
        if( MACRxPacket.flags.bits.sourcePrsnt )
    aebc:	b249      	sxtb	r1, r1
    aebe:	2900      	cmp	r1, #0
    aec0:	db36      	blt.n	af30 <P2PTasks+0x1a4>
            rxMessage.SourcePANID.Val = MACRxPacket.SourcePANID.Val;
    aec2:	4a7d      	ldr	r2, [pc, #500]	; (b0b8 <P2PTasks+0x32c>)
    aec4:	8a17      	ldrh	r7, [r2, #16]
    aec6:	4b7e      	ldr	r3, [pc, #504]	; (b0c0 <P2PTasks+0x334>)
    aec8:	805f      	strh	r7, [r3, #2]
        rxMessage.PayloadSize = MACRxPacket.PayloadLen;
    aeca:	7b11      	ldrb	r1, [r2, #12]
    aecc:	7319      	strb	r1, [r3, #12]
        rxMessage.Payload = MACRxPacket.Payload;
    aece:	6895      	ldr	r5, [r2, #8]
    aed0:	609d      	str	r5, [r3, #8]
            rxMessage.PacketLQI = MACRxPacket.LQIValue;
    aed2:	7b90      	ldrb	r0, [r2, #14]
    aed4:	4680      	mov	r8, r0
    aed6:	7398      	strb	r0, [r3, #14]
            rxMessage.PacketRSSI = MACRxPacket.RSSIValue;
    aed8:	7b52      	ldrb	r2, [r2, #13]
    aeda:	4691      	mov	r9, r2
    aedc:	735a      	strb	r2, [r3, #13]
        if( rxMessage.flags.bits.command )
    aede:	781b      	ldrb	r3, [r3, #0]
    aee0:	069b      	lsls	r3, r3, #26
    aee2:	d400      	bmi.n	aee6 <P2PTasks+0x15a>
    aee4:	e277      	b.n	b3d6 <P2PTasks+0x64a>
            switch( rxMessage.Payload[0] )
    aee6:	782b      	ldrb	r3, [r5, #0]
    aee8:	b2da      	uxtb	r2, r3
    aeea:	2a83      	cmp	r2, #131	; 0x83
    aeec:	d100      	bne.n	aef0 <P2PTasks+0x164>
    aeee:	e210      	b.n	b312 <P2PTasks+0x586>
    aef0:	d923      	bls.n	af3a <P2PTasks+0x1ae>
    aef2:	b2da      	uxtb	r2, r3
    aef4:	2a91      	cmp	r2, #145	; 0x91
    aef6:	d100      	bne.n	aefa <P2PTasks+0x16e>
    aef8:	e174      	b.n	b1e4 <P2PTasks+0x458>
    aefa:	d935      	bls.n	af68 <P2PTasks+0x1dc>
    aefc:	b2da      	uxtb	r2, r3
    aefe:	2a92      	cmp	r2, #146	; 0x92
    af00:	d100      	bne.n	af04 <P2PTasks+0x178>
    af02:	e1e1      	b.n	b2c8 <P2PTasks+0x53c>
    af04:	2a97      	cmp	r2, #151	; 0x97
    af06:	d11f      	bne.n	af48 <P2PTasks+0x1bc>
                            if( P2PStatus.bits.Resync )
    af08:	4b61      	ldr	r3, [pc, #388]	; (b090 <P2PTasks+0x304>)
    af0a:	781b      	ldrb	r3, [r3, #0]
    af0c:	069b      	lsls	r3, r3, #26
    af0e:	d500      	bpl.n	af12 <P2PTasks+0x186>
    af10:	e198      	b.n	b244 <P2PTasks+0x4b8>
                                    for(; i < ActiveScanResultIndex; i++)
    af12:	4b6c      	ldr	r3, [pc, #432]	; (b0c4 <P2PTasks+0x338>)
    af14:	781b      	ldrb	r3, [r3, #0]
    af16:	469a      	mov	sl, r3
    af18:	2b00      	cmp	r3, #0
    af1a:	d100      	bne.n	af1e <P2PTasks+0x192>
    af1c:	e1af      	b.n	b27e <P2PTasks+0x4f2>
                                        if( (ActiveScanResults[i].Channel == currentChannel) &&
    af1e:	4b6a      	ldr	r3, [pc, #424]	; (b0c8 <P2PTasks+0x33c>)
    af20:	781b      	ldrb	r3, [r3, #0]
    af22:	469b      	mov	fp, r3
                                            isSameAddress(ActiveScanResults[i].Address, rxMessage.SourceAddress)
    af24:	4b66      	ldr	r3, [pc, #408]	; (b0c0 <P2PTasks+0x334>)
    af26:	685b      	ldr	r3, [r3, #4]
    af28:	9306      	str	r3, [sp, #24]
    af2a:	4e68      	ldr	r6, [pc, #416]	; (b0cc <P2PTasks+0x340>)
    af2c:	2400      	movs	r4, #0
    af2e:	e196      	b.n	b25e <P2PTasks+0x4d2>
            rxMessage.SourceAddress = MACRxPacket.SourceAddress;
    af30:	4b61      	ldr	r3, [pc, #388]	; (b0b8 <P2PTasks+0x32c>)
    af32:	685a      	ldr	r2, [r3, #4]
    af34:	4b62      	ldr	r3, [pc, #392]	; (b0c0 <P2PTasks+0x334>)
    af36:	605a      	str	r2, [r3, #4]
    af38:	e7c3      	b.n	aec2 <P2PTasks+0x136>
            switch( rxMessage.Payload[0] )
    af3a:	2a81      	cmp	r2, #129	; 0x81
    af3c:	d023      	beq.n	af86 <P2PTasks+0x1fa>
    af3e:	d900      	bls.n	af42 <P2PTasks+0x1b6>
    af40:	e118      	b.n	b174 <P2PTasks+0x3e8>
    af42:	2b04      	cmp	r3, #4
    af44:	d100      	bne.n	af48 <P2PTasks+0x1bc>
    af46:	e1e4      	b.n	b312 <P2PTasks+0x586>
                    P2PStatus.bits.RxHasUserData = 1;
    af48:	4c51      	ldr	r4, [pc, #324]	; (b090 <P2PTasks+0x304>)
    af4a:	7823      	ldrb	r3, [r4, #0]
    af4c:	2208      	movs	r2, #8
    af4e:	4313      	orrs	r3, r2
    af50:	7023      	strb	r3, [r4, #0]
					pktRxcallback(&rxMessage);
    af52:	4b5f      	ldr	r3, [pc, #380]	; (b0d0 <P2PTasks+0x344>)
    af54:	681b      	ldr	r3, [r3, #0]
    af56:	485a      	ldr	r0, [pc, #360]	; (b0c0 <P2PTasks+0x334>)
    af58:	4798      	blx	r3
					P2PStatus.bits.RxHasUserData = 0;
    af5a:	7823      	ldrb	r3, [r4, #0]
    af5c:	2208      	movs	r2, #8
    af5e:	4393      	bics	r3, r2
    af60:	7023      	strb	r3, [r4, #0]
					MiMAC_DiscardPacket();
    af62:	4b5c      	ldr	r3, [pc, #368]	; (b0d4 <P2PTasks+0x348>)
    af64:	4798      	blx	r3
                    break;
    af66:	e245      	b.n	b3f4 <P2PTasks+0x668>
            switch( rxMessage.Payload[0] )
    af68:	2a87      	cmp	r2, #135	; 0x87
    af6a:	d1ed      	bne.n	af48 <P2PTasks+0x1bc>
                        if(ConnMode > ENABLE_ACTIVE_SCAN_RSP)
    af6c:	4b5a      	ldr	r3, [pc, #360]	; (b0d8 <P2PTasks+0x34c>)
    af6e:	781b      	ldrb	r3, [r3, #0]
    af70:	2b02      	cmp	r3, #2
    af72:	d87b      	bhi.n	b06c <P2PTasks+0x2e0>
                            if( currentChannel != rxMessage.Payload[1] )
    af74:	786a      	ldrb	r2, [r5, #1]
    af76:	4b54      	ldr	r3, [pc, #336]	; (b0c8 <P2PTasks+0x33c>)
    af78:	781b      	ldrb	r3, [r3, #0]
    af7a:	429a      	cmp	r2, r3
    af7c:	d100      	bne.n	af80 <P2PTasks+0x1f4>
    af7e:	e0c7      	b.n	b110 <P2PTasks+0x384>
                                MiMAC_DiscardPacket();
    af80:	4b54      	ldr	r3, [pc, #336]	; (b0d4 <P2PTasks+0x348>)
    af82:	4798      	blx	r3
                                break;
    af84:	e236      	b.n	b3f4 <P2PTasks+0x668>
                                if( currentChannel != rxMessage.Payload[1] )
    af86:	786a      	ldrb	r2, [r5, #1]
    af88:	4b4f      	ldr	r3, [pc, #316]	; (b0c8 <P2PTasks+0x33c>)
    af8a:	781b      	ldrb	r3, [r3, #0]
    af8c:	429a      	cmp	r2, r3
    af8e:	d002      	beq.n	af96 <P2PTasks+0x20a>
                                    MiMAC_DiscardPacket();
    af90:	4b50      	ldr	r3, [pc, #320]	; (b0d4 <P2PTasks+0x348>)
    af92:	4798      	blx	r3
                                    break;
    af94:	e22e      	b.n	b3f4 <P2PTasks+0x668>
                                if( ConnMode == DISABLE_ALL_CONN )
    af96:	4b50      	ldr	r3, [pc, #320]	; (b0d8 <P2PTasks+0x34c>)
    af98:	781b      	ldrb	r3, [r3, #0]
    af9a:	2b03      	cmp	r3, #3
    af9c:	d047      	beq.n	b02e <P2PTasks+0x2a2>
                                    if( rxMessage.SourcePANID.Val != 0xFFFF &&
    af9e:	4b4f      	ldr	r3, [pc, #316]	; (b0dc <P2PTasks+0x350>)
    afa0:	429f      	cmp	r7, r3
    afa2:	d006      	beq.n	afb2 <P2PTasks+0x226>
                                        rxMessage.SourcePANID.Val != myPANID.Val &&
    afa4:	4b4e      	ldr	r3, [pc, #312]	; (b0e0 <P2PTasks+0x354>)
                                    if( rxMessage.SourcePANID.Val != 0xFFFF &&
    afa6:	881b      	ldrh	r3, [r3, #0]
    afa8:	42bb      	cmp	r3, r7
    afaa:	d002      	beq.n	afb2 <P2PTasks+0x226>
                                        rxMessage.SourcePANID.Val != myPANID.Val &&
    afac:	2902      	cmp	r1, #2
    afae:	d900      	bls.n	afb2 <P2PTasks+0x226>
    afb0:	e235      	b.n	b41e <P2PTasks+0x692>
                                    status = AddConnection();
    afb2:	4b4c      	ldr	r3, [pc, #304]	; (b0e4 <P2PTasks+0x358>)
    afb4:	4798      	blx	r3
    afb6:	0005      	movs	r5, r0
                                if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    afb8:	4b47      	ldr	r3, [pc, #284]	; (b0d8 <P2PTasks+0x34c>)
    afba:	781b      	ldrb	r3, [r3, #0]
    afbc:	2b01      	cmp	r3, #1
    afbe:	d039      	beq.n	b034 <P2PTasks+0x2a8>
                                dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(TX_BUFFER_SIZE));
    afc0:	20e0      	movs	r0, #224	; 0xe0
    afc2:	4b49      	ldr	r3, [pc, #292]	; (b0e8 <P2PTasks+0x35c>)
    afc4:	4798      	blx	r3
    afc6:	1e04      	subs	r4, r0, #0
                                if (NULL == dataPtr)
    afc8:	d100      	bne.n	afcc <P2PTasks+0x240>
    afca:	e709      	b.n	ade0 <P2PTasks+0x54>
                                dataPtr[dataLen++] = CMD_P2P_CONNECTION_RESPONSE;
    afcc:	2391      	movs	r3, #145	; 0x91
    afce:	7003      	strb	r3, [r0, #0]
                                dataPtr[dataLen++] = status;
    afd0:	7045      	strb	r5, [r0, #1]
    afd2:	2602      	movs	r6, #2
                                if( status == STATUS_SUCCESS ||
    afd4:	2d01      	cmp	r5, #1
    afd6:	d93d      	bls.n	b054 <P2PTasks+0x2c8>
                                MiMAC_DiscardPacket();
    afd8:	4b3e      	ldr	r3, [pc, #248]	; (b0d4 <P2PTasks+0x348>)
    afda:	4798      	blx	r3
                                i = PHY_RandomReq();
    afdc:	4b43      	ldr	r3, [pc, #268]	; (b0ec <P2PTasks+0x360>)
    afde:	4798      	blx	r3
    afe0:	b2c5      	uxtb	r5, r0
                                delay_s(i % (CONNECTION_INTERVAL-1));
    afe2:	2103      	movs	r1, #3
    afe4:	0028      	movs	r0, r5
    afe6:	4b42      	ldr	r3, [pc, #264]	; (b0f0 <P2PTasks+0x364>)
    afe8:	4798      	blx	r3
    afea:	b2c9      	uxtb	r1, r1
    afec:	2900      	cmp	r1, #0
    afee:	d039      	beq.n	b064 <P2PTasks+0x2d8>
    aff0:	20fa      	movs	r0, #250	; 0xfa
    aff2:	0080      	lsls	r0, r0, #2
    aff4:	4368      	muls	r0, r5
    aff6:	2103      	movs	r1, #3
    aff8:	4b3e      	ldr	r3, [pc, #248]	; (b0f4 <P2PTasks+0x368>)
    affa:	4798      	blx	r3
    affc:	0008      	movs	r0, r1
    affe:	4b3e      	ldr	r3, [pc, #248]	; (b0f8 <P2PTasks+0x36c>)
    b000:	4798      	blx	r3
                                        SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn, 
    b002:	4b2f      	ldr	r3, [pc, #188]	; (b0c0 <P2PTasks+0x334>)
    b004:	685a      	ldr	r2, [r3, #4]
    b006:	8859      	ldrh	r1, [r3, #2]
    b008:	483c      	ldr	r0, [pc, #240]	; (b0fc <P2PTasks+0x370>)
    b00a:	9005      	str	r0, [sp, #20]
    b00c:	2001      	movs	r0, #1
    b00e:	9004      	str	r0, [sp, #16]
    b010:	2000      	movs	r0, #0
    b012:	9003      	str	r0, [sp, #12]
    b014:	9402      	str	r4, [sp, #8]
    b016:	9601      	str	r6, [sp, #4]
    b018:	781b      	ldrb	r3, [r3, #0]
    b01a:	071b      	lsls	r3, r3, #28
    b01c:	0fdb      	lsrs	r3, r3, #31
    b01e:	9300      	str	r3, [sp, #0]
    b020:	2301      	movs	r3, #1
    b022:	4c37      	ldr	r4, [pc, #220]	; (b100 <P2PTasks+0x374>)
    b024:	47a0      	blx	r4
								delay_ms (100);
    b026:	2064      	movs	r0, #100	; 0x64
    b028:	4b33      	ldr	r3, [pc, #204]	; (b0f8 <P2PTasks+0x36c>)
    b02a:	4798      	blx	r3
                        break; 
    b02c:	e1e2      	b.n	b3f4 <P2PTasks+0x668>
                                    MiMAC_DiscardPacket();
    b02e:	4b29      	ldr	r3, [pc, #164]	; (b0d4 <P2PTasks+0x348>)
    b030:	4798      	blx	r3
                                    break;
    b032:	e1df      	b.n	b3f4 <P2PTasks+0x668>
                                if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    b034:	3801      	subs	r0, #1
    b036:	b2c0      	uxtb	r0, r0
    b038:	2801      	cmp	r0, #1
    b03a:	d9c1      	bls.n	afc0 <P2PTasks+0x234>
                                dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(TX_BUFFER_SIZE));
    b03c:	20e0      	movs	r0, #224	; 0xe0
    b03e:	4b2a      	ldr	r3, [pc, #168]	; (b0e8 <P2PTasks+0x35c>)
    b040:	4798      	blx	r3
    b042:	1e04      	subs	r4, r0, #0
                                if (NULL == dataPtr)
    b044:	d100      	bne.n	b048 <P2PTasks+0x2bc>
    b046:	e6cb      	b.n	ade0 <P2PTasks+0x54>
                                dataPtr[dataLen++] = CMD_P2P_CONNECTION_RESPONSE;
    b048:	2391      	movs	r3, #145	; 0x91
    b04a:	7023      	strb	r3, [r4, #0]
                                dataPtr[dataLen++] = status;
    b04c:	3362      	adds	r3, #98	; 0x62
    b04e:	7063      	strb	r3, [r4, #1]
    b050:	2602      	movs	r6, #2
    b052:	e7c1      	b.n	afd8 <P2PTasks+0x24c>
                                    dataPtr[dataLen++] = P2PCapacityInfo;
    b054:	4b2b      	ldr	r3, [pc, #172]	; (b104 <P2PTasks+0x378>)
    b056:	781b      	ldrb	r3, [r3, #0]
    b058:	7083      	strb	r3, [r0, #2]
                                            dataPtr[dataLen++] = AdditionalNodeID[i];
    b05a:	4b2b      	ldr	r3, [pc, #172]	; (b108 <P2PTasks+0x37c>)
    b05c:	781b      	ldrb	r3, [r3, #0]
    b05e:	70c3      	strb	r3, [r0, #3]
    b060:	3602      	adds	r6, #2
    b062:	e7b9      	b.n	afd8 <P2PTasks+0x24c>
                                delay_s(i % (CONNECTION_INTERVAL-1));
    b064:	2001      	movs	r0, #1
    b066:	4b29      	ldr	r3, [pc, #164]	; (b10c <P2PTasks+0x380>)
    b068:	4798      	blx	r3
    b06a:	e7ca      	b.n	b002 <P2PTasks+0x276>
                                MiMAC_DiscardPacket();
    b06c:	4b19      	ldr	r3, [pc, #100]	; (b0d4 <P2PTasks+0x348>)
    b06e:	4798      	blx	r3
                                break;
    b070:	e1c0      	b.n	b3f4 <P2PTasks+0x668>
    b072:	46c0      	nop			; (mov r8, r8)
    b074:	00009f81 	.word	0x00009f81
    b078:	200026e0 	.word	0x200026e0
    b07c:	0000ac2d 	.word	0x0000ac2d
    b080:	000c8708 	.word	0x000c8708
    b084:	20000288 	.word	0x20000288
    b088:	20000273 	.word	0x20000273
    b08c:	20002960 	.word	0x20002960
    b090:	200026dc 	.word	0x200026dc
    b094:	0000ba8d 	.word	0x0000ba8d
    b098:	0000baed 	.word	0x0000baed
    b09c:	016e3600 	.word	0x016e3600
    b0a0:	00000223 	.word	0x00000223
    b0a4:	0000982d 	.word	0x0000982d
    b0a8:	00018144 	.word	0x00018144
    b0ac:	0001688d 	.word	0x0001688d
    b0b0:	00009871 	.word	0x00009871
    b0b4:	200026c2 	.word	0x200026c2
    b0b8:	200026a0 	.word	0x200026a0
    b0bc:	200026c0 	.word	0x200026c0
    b0c0:	2000294c 	.word	0x2000294c
    b0c4:	2000295c 	.word	0x2000295c
    b0c8:	20000011 	.word	0x20000011
    b0cc:	2000290c 	.word	0x2000290c
    b0d0:	2000028c 	.word	0x2000028c
    b0d4:	000097f1 	.word	0x000097f1
    b0d8:	20000010 	.word	0x20000010
    b0dc:	0000ffff 	.word	0x0000ffff
    b0e0:	200026b8 	.word	0x200026b8
    b0e4:	0000aae1 	.word	0x0000aae1
    b0e8:	0000b84d 	.word	0x0000b84d
    b0ec:	0000a3e9 	.word	0x0000a3e9
    b0f0:	00013061 	.word	0x00013061
    b0f4:	00013235 	.word	0x00013235
    b0f8:	000044cd 	.word	0x000044cd
    b0fc:	0000a425 	.word	0x0000a425
    b100:	0000a591 	.word	0x0000a591
    b104:	200026b5 	.word	0x200026b5
    b108:	2000000c 	.word	0x2000000c
    b10c:	000044a1 	.word	0x000044a1
                            dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_P2P_ACTIVE_SCAN_RESPONSE));
    b110:	2010      	movs	r0, #16
    b112:	4bc6      	ldr	r3, [pc, #792]	; (b42c <P2PTasks+0x6a0>)
    b114:	4798      	blx	r3
    b116:	1e04      	subs	r4, r0, #0
                            if (NULL == dataPtr)
    b118:	d100      	bne.n	b11c <P2PTasks+0x390>
    b11a:	e661      	b.n	ade0 <P2PTasks+0x54>
                            dataPtr[dataLen++] = CMD_P2P_ACTIVE_SCAN_RESPONSE;
    b11c:	2397      	movs	r3, #151	; 0x97
    b11e:	7003      	strb	r3, [r0, #0]
                            dataPtr[dataLen++] = P2PCapacityInfo;
    b120:	4bc3      	ldr	r3, [pc, #780]	; (b430 <P2PTasks+0x6a4>)
    b122:	781b      	ldrb	r3, [r3, #0]
    b124:	7043      	strb	r3, [r0, #1]
                                    dataPtr[dataLen++] = (AdditionalNodeID[i]);
    b126:	4bc3      	ldr	r3, [pc, #780]	; (b434 <P2PTasks+0x6a8>)
    b128:	781b      	ldrb	r3, [r3, #0]
    b12a:	7083      	strb	r3, [r0, #2]
                            MiMAC_DiscardPacket();
    b12c:	4bc2      	ldr	r3, [pc, #776]	; (b438 <P2PTasks+0x6ac>)
    b12e:	4798      	blx	r3
							i = PHY_RandomReq();
    b130:	4bc2      	ldr	r3, [pc, #776]	; (b43c <P2PTasks+0x6b0>)
    b132:	4798      	blx	r3
							delay_ms(i*100);
    b134:	b2c3      	uxtb	r3, r0
    b136:	2064      	movs	r0, #100	; 0x64
    b138:	4358      	muls	r0, r3
    b13a:	2800      	cmp	r0, #0
    b13c:	d016      	beq.n	b16c <P2PTasks+0x3e0>
    b13e:	4bc0      	ldr	r3, [pc, #768]	; (b440 <P2PTasks+0x6b4>)
    b140:	4798      	blx	r3
                                    SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn, 
    b142:	4bc0      	ldr	r3, [pc, #768]	; (b444 <P2PTasks+0x6b8>)
    b144:	685a      	ldr	r2, [r3, #4]
    b146:	8859      	ldrh	r1, [r3, #2]
    b148:	48bf      	ldr	r0, [pc, #764]	; (b448 <P2PTasks+0x6bc>)
    b14a:	9005      	str	r0, [sp, #20]
    b14c:	2001      	movs	r0, #1
    b14e:	9004      	str	r0, [sp, #16]
    b150:	2000      	movs	r0, #0
    b152:	9003      	str	r0, [sp, #12]
    b154:	9402      	str	r4, [sp, #8]
    b156:	3003      	adds	r0, #3
    b158:	9001      	str	r0, [sp, #4]
    b15a:	781b      	ldrb	r3, [r3, #0]
    b15c:	071b      	lsls	r3, r3, #28
    b15e:	0fdb      	lsrs	r3, r3, #31
    b160:	9300      	str	r3, [sp, #0]
    b162:	2301      	movs	r3, #1
    b164:	2000      	movs	r0, #0
    b166:	4cb9      	ldr	r4, [pc, #740]	; (b44c <P2PTasks+0x6c0>)
    b168:	47a0      	blx	r4
                        break;
    b16a:	e143      	b.n	b3f4 <P2PTasks+0x668>
							delay_ms(i*100);
    b16c:	2001      	movs	r0, #1
    b16e:	4bb8      	ldr	r3, [pc, #736]	; (b450 <P2PTasks+0x6c4>)
    b170:	4798      	blx	r3
    b172:	e7e6      	b.n	b142 <P2PTasks+0x3b6>
                            dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_P2P_CONNECTION_REMOVAL_RESPONSE));
    b174:	2010      	movs	r0, #16
    b176:	4bad      	ldr	r3, [pc, #692]	; (b42c <P2PTasks+0x6a0>)
    b178:	4798      	blx	r3
    b17a:	4680      	mov	r8, r0
                            if (NULL == dataPtr)
    b17c:	2800      	cmp	r0, #0
    b17e:	d100      	bne.n	b182 <P2PTasks+0x3f6>
    b180:	e62e      	b.n	ade0 <P2PTasks+0x54>
                            dataPtr[dataLen++] = CMD_P2P_CONNECTION_REMOVAL_RESPONSE;
    b182:	2392      	movs	r3, #146	; 0x92
    b184:	7003      	strb	r3, [r0, #0]
                                    if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    b186:	4baf      	ldr	r3, [pc, #700]	; (b444 <P2PTasks+0x6b8>)
    b188:	685b      	ldr	r3, [r3, #4]
    b18a:	9307      	str	r3, [sp, #28]
    b18c:	4eb1      	ldr	r6, [pc, #708]	; (b454 <P2PTasks+0x6c8>)
    b18e:	2700      	movs	r7, #0
                            for(i = 0; i < CONNECTION_SIZE; i++)
    b190:	2400      	movs	r4, #0
                                if( ConnectionTable[i].status.bits.isValid )
    b192:	0035      	movs	r5, r6
    b194:	e006      	b.n	b1a4 <P2PTasks+0x418>
                            for(i = 0; i < CONNECTION_SIZE; i++)
    b196:	3401      	adds	r4, #1
    b198:	b2e4      	uxtb	r4, r4
    b19a:	3701      	adds	r7, #1
    b19c:	360a      	adds	r6, #10
    b19e:	2c05      	cmp	r4, #5
    b1a0:	d100      	bne.n	b1a4 <P2PTasks+0x418>
    b1a2:	e179      	b.n	b498 <P2PTasks+0x70c>
                                if( ConnectionTable[i].status.bits.isValid )
    b1a4:	9706      	str	r7, [sp, #24]
    b1a6:	00bb      	lsls	r3, r7, #2
    b1a8:	19db      	adds	r3, r3, r7
    b1aa:	005b      	lsls	r3, r3, #1
    b1ac:	18eb      	adds	r3, r5, r3
    b1ae:	7a1b      	ldrb	r3, [r3, #8]
    b1b0:	09db      	lsrs	r3, r3, #7
    b1b2:	d0f0      	beq.n	b196 <P2PTasks+0x40a>
                                    if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    b1b4:	0031      	movs	r1, r6
    b1b6:	9807      	ldr	r0, [sp, #28]
    b1b8:	4ba7      	ldr	r3, [pc, #668]	; (b458 <P2PTasks+0x6cc>)
    b1ba:	4798      	blx	r3
    b1bc:	2800      	cmp	r0, #0
    b1be:	d0ea      	beq.n	b196 <P2PTasks+0x40a>
                                        ConnectionTable[i].status.Val = 0;
    b1c0:	9a06      	ldr	r2, [sp, #24]
    b1c2:	0093      	lsls	r3, r2, #2
    b1c4:	189d      	adds	r5, r3, r2
    b1c6:	006d      	lsls	r5, r5, #1
    b1c8:	4ba2      	ldr	r3, [pc, #648]	; (b454 <P2PTasks+0x6c8>)
    b1ca:	195d      	adds	r5, r3, r5
    b1cc:	2300      	movs	r3, #0
    b1ce:	722b      	strb	r3, [r5, #8]
                                        dataPtr[dataLen++] = STATUS_SUCCESS;
    b1d0:	4642      	mov	r2, r8
    b1d2:	7053      	strb	r3, [r2, #1]
                            MiMAC_DiscardPacket();
    b1d4:	4b98      	ldr	r3, [pc, #608]	; (b438 <P2PTasks+0x6ac>)
    b1d6:	4798      	blx	r3
                            if( i == CONNECTION_SIZE ) 
    b1d8:	2c05      	cmp	r4, #5
    b1da:	d001      	beq.n	b1e0 <P2PTasks+0x454>
                                        dataPtr[dataLen++] = STATUS_SUCCESS;
    b1dc:	2402      	movs	r4, #2
    b1de:	e162      	b.n	b4a6 <P2PTasks+0x71a>
    b1e0:	2302      	movs	r3, #2
    b1e2:	e15c      	b.n	b49e <P2PTasks+0x712>
                            switch( rxMessage.Payload[1] )
    b1e4:	786b      	ldrb	r3, [r5, #1]
    b1e6:	2b00      	cmp	r3, #0
    b1e8:	d014      	beq.n	b214 <P2PTasks+0x488>
    b1ea:	2b01      	cmp	r3, #1
    b1ec:	d10f      	bne.n	b20e <P2PTasks+0x482>
                                    if (EstConfCallback)
    b1ee:	4b9b      	ldr	r3, [pc, #620]	; (b45c <P2PTasks+0x6d0>)
    b1f0:	681b      	ldr	r3, [r3, #0]
    b1f2:	2b00      	cmp	r3, #0
    b1f4:	d004      	beq.n	b200 <P2PTasks+0x474>
                                        EstConfCallback(ALREADY_EXISTS);
    b1f6:	2006      	movs	r0, #6
    b1f8:	4798      	blx	r3
                                        EstConfCallback = NULL;
    b1fa:	2200      	movs	r2, #0
    b1fc:	4b97      	ldr	r3, [pc, #604]	; (b45c <P2PTasks+0x6d0>)
    b1fe:	601a      	str	r2, [r3, #0]
                                        if( myPANID.Val == 0xFFFF )
    b200:	4b97      	ldr	r3, [pc, #604]	; (b460 <P2PTasks+0x6d4>)
    b202:	881a      	ldrh	r2, [r3, #0]
    b204:	4b97      	ldr	r3, [pc, #604]	; (b464 <P2PTasks+0x6d8>)
    b206:	429a      	cmp	r2, r3
    b208:	d00e      	beq.n	b228 <P2PTasks+0x49c>
                                    AddConnection();
    b20a:	4b97      	ldr	r3, [pc, #604]	; (b468 <P2PTasks+0x6dc>)
    b20c:	4798      	blx	r3
                        MiMAC_DiscardPacket();
    b20e:	4b8a      	ldr	r3, [pc, #552]	; (b438 <P2PTasks+0x6ac>)
    b210:	4798      	blx	r3
                        break; 
    b212:	e0ef      	b.n	b3f4 <P2PTasks+0x668>
                                    if (EstConfCallback)
    b214:	4b91      	ldr	r3, [pc, #580]	; (b45c <P2PTasks+0x6d0>)
    b216:	681b      	ldr	r3, [r3, #0]
    b218:	2b00      	cmp	r3, #0
    b21a:	d0f1      	beq.n	b200 <P2PTasks+0x474>
                                        EstConfCallback(SUCCESS);
    b21c:	2000      	movs	r0, #0
    b21e:	4798      	blx	r3
                                        EstConfCallback = NULL;
    b220:	2200      	movs	r2, #0
    b222:	4b8e      	ldr	r3, [pc, #568]	; (b45c <P2PTasks+0x6d0>)
    b224:	601a      	str	r2, [r3, #0]
    b226:	e7eb      	b.n	b200 <P2PTasks+0x474>
                                            myPANID.Val = rxMessage.SourcePANID.Val;
    b228:	498d      	ldr	r1, [pc, #564]	; (b460 <P2PTasks+0x6d4>)
    b22a:	4b86      	ldr	r3, [pc, #536]	; (b444 <P2PTasks+0x6b8>)
    b22c:	885b      	ldrh	r3, [r3, #2]
    b22e:	800b      	strh	r3, [r1, #0]
                                                uint16_t tmp = 0xFFFF;
    b230:	201e      	movs	r0, #30
    b232:	ab02      	add	r3, sp, #8
    b234:	469c      	mov	ip, r3
    b236:	4460      	add	r0, ip
    b238:	2301      	movs	r3, #1
    b23a:	425b      	negs	r3, r3
    b23c:	8003      	strh	r3, [r0, #0]
                                                MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    b23e:	4b8b      	ldr	r3, [pc, #556]	; (b46c <P2PTasks+0x6e0>)
    b240:	4798      	blx	r3
    b242:	e7e2      	b.n	b20a <P2PTasks+0x47e>
                                P2PStatus.bits.Resync = 0;   
    b244:	4a8a      	ldr	r2, [pc, #552]	; (b470 <P2PTasks+0x6e4>)
    b246:	7813      	ldrb	r3, [r2, #0]
    b248:	2120      	movs	r1, #32
    b24a:	438b      	bics	r3, r1
    b24c:	7013      	strb	r3, [r2, #0]
                            MiMAC_DiscardPacket(); 
    b24e:	4b7a      	ldr	r3, [pc, #488]	; (b438 <P2PTasks+0x6ac>)
    b250:	4798      	blx	r3
                        break;                
    b252:	e0cf      	b.n	b3f4 <P2PTasks+0x668>
                                    for(; i < ActiveScanResultIndex; i++)
    b254:	3401      	adds	r4, #1
    b256:	b2e4      	uxtb	r4, r4
    b258:	3610      	adds	r6, #16
    b25a:	4554      	cmp	r4, sl
    b25c:	d00d      	beq.n	b27a <P2PTasks+0x4ee>
                                        if( (ActiveScanResults[i].Channel == currentChannel) &&
    b25e:	7833      	ldrb	r3, [r6, #0]
    b260:	455b      	cmp	r3, fp
    b262:	d1f7      	bne.n	b254 <P2PTasks+0x4c8>
    b264:	8973      	ldrh	r3, [r6, #10]
    b266:	42bb      	cmp	r3, r7
    b268:	d1f4      	bne.n	b254 <P2PTasks+0x4c8>
                                            isSameAddress(ActiveScanResults[i].Address, rxMessage.SourceAddress)
    b26a:	1c70      	adds	r0, r6, #1
    b26c:	9906      	ldr	r1, [sp, #24]
    b26e:	4b7a      	ldr	r3, [pc, #488]	; (b458 <P2PTasks+0x6cc>)
    b270:	4798      	blx	r3
                                            (ActiveScanResults[i].PANID.Val == rxMessage.SourcePANID.Val) &&
    b272:	2800      	cmp	r0, #0
    b274:	d0ee      	beq.n	b254 <P2PTasks+0x4c8>
                                    if( i == ActiveScanResultIndex && (i < ACTIVE_SCAN_RESULT_SIZE))
    b276:	45a2      	cmp	sl, r4
    b278:	d1e9      	bne.n	b24e <P2PTasks+0x4c2>
    b27a:	2c03      	cmp	r4, #3
    b27c:	d8e7      	bhi.n	b24e <P2PTasks+0x4c2>
                                        ActiveScanResults[ActiveScanResultIndex].Channel = currentChannel;
    b27e:	497d      	ldr	r1, [pc, #500]	; (b474 <P2PTasks+0x6e8>)
    b280:	4653      	mov	r3, sl
    b282:	011b      	lsls	r3, r3, #4
    b284:	4a7c      	ldr	r2, [pc, #496]	; (b478 <P2PTasks+0x6ec>)
    b286:	7812      	ldrb	r2, [r2, #0]
    b288:	545a      	strb	r2, [r3, r1]
                                        ActiveScanResults[ActiveScanResultIndex].RSSIValue = rxMessage.PacketRSSI;
    b28a:	18ca      	adds	r2, r1, r3
    b28c:	4648      	mov	r0, r9
    b28e:	7310      	strb	r0, [r2, #12]
                                        ActiveScanResults[ActiveScanResultIndex].LQIValue = rxMessage.PacketLQI;
    b290:	4640      	mov	r0, r8
    b292:	7350      	strb	r0, [r2, #13]
                                            ActiveScanResults[ActiveScanResultIndex].PANID.Val = rxMessage.SourcePANID.Val;
    b294:	8157      	strh	r7, [r2, #10]
                                            ActiveScanResults[ActiveScanResultIndex].Address[i] = rxMessage.SourceAddress[i];
    b296:	4a6b      	ldr	r2, [pc, #428]	; (b444 <P2PTasks+0x6b8>)
    b298:	6852      	ldr	r2, [r2, #4]
    b29a:	3301      	adds	r3, #1
    b29c:	185b      	adds	r3, r3, r1
    b29e:	0010      	movs	r0, r2
    b2a0:	3008      	adds	r0, #8
    b2a2:	7811      	ldrb	r1, [r2, #0]
    b2a4:	7019      	strb	r1, [r3, #0]
    b2a6:	3201      	adds	r2, #1
    b2a8:	3301      	adds	r3, #1
                                        for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    b2aa:	4290      	cmp	r0, r2
    b2ac:	d1f9      	bne.n	b2a2 <P2PTasks+0x516>
                                        ActiveScanResults[ActiveScanResultIndex].Capability.Val = rxMessage.Payload[1];
    b2ae:	786a      	ldrb	r2, [r5, #1]
    b2b0:	4653      	mov	r3, sl
    b2b2:	0119      	lsls	r1, r3, #4
    b2b4:	4b6f      	ldr	r3, [pc, #444]	; (b474 <P2PTasks+0x6e8>)
    b2b6:	185b      	adds	r3, r3, r1
    b2b8:	739a      	strb	r2, [r3, #14]
                                                ActiveScanResults[ActiveScanResultIndex].PeerInfo[i] = rxMessage.Payload[2+i];
    b2ba:	78aa      	ldrb	r2, [r5, #2]
    b2bc:	73da      	strb	r2, [r3, #15]
                                        ActiveScanResultIndex++;
    b2be:	4653      	mov	r3, sl
    b2c0:	3301      	adds	r3, #1
    b2c2:	4a6e      	ldr	r2, [pc, #440]	; (b47c <P2PTasks+0x6f0>)
    b2c4:	7013      	strb	r3, [r2, #0]
    b2c6:	e7c2      	b.n	b24e <P2PTasks+0x4c2>
                            if( rxMessage.Payload[1] == STATUS_SUCCESS )
    b2c8:	786b      	ldrb	r3, [r5, #1]
    b2ca:	2b00      	cmp	r3, #0
    b2cc:	d11e      	bne.n	b30c <P2PTasks+0x580>
                                        if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    b2ce:	4b5d      	ldr	r3, [pc, #372]	; (b444 <P2PTasks+0x6b8>)
    b2d0:	685b      	ldr	r3, [r3, #4]
    b2d2:	9306      	str	r3, [sp, #24]
    b2d4:	4e5f      	ldr	r6, [pc, #380]	; (b454 <P2PTasks+0x6c8>)
    b2d6:	2700      	movs	r7, #0
                                    if( ConnectionTable[i].status.bits.isValid )
    b2d8:	0035      	movs	r5, r6
    b2da:	e003      	b.n	b2e4 <P2PTasks+0x558>
    b2dc:	3701      	adds	r7, #1
    b2de:	360a      	adds	r6, #10
                                for(i = 0; i < CONNECTION_SIZE; i++)
    b2e0:	2f05      	cmp	r7, #5
    b2e2:	d013      	beq.n	b30c <P2PTasks+0x580>
                                    if( ConnectionTable[i].status.bits.isValid )
    b2e4:	00bb      	lsls	r3, r7, #2
    b2e6:	19db      	adds	r3, r3, r7
    b2e8:	005b      	lsls	r3, r3, #1
    b2ea:	18eb      	adds	r3, r5, r3
    b2ec:	7a1b      	ldrb	r3, [r3, #8]
    b2ee:	09db      	lsrs	r3, r3, #7
    b2f0:	d0f4      	beq.n	b2dc <P2PTasks+0x550>
                                        if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    b2f2:	0031      	movs	r1, r6
    b2f4:	9806      	ldr	r0, [sp, #24]
    b2f6:	4b58      	ldr	r3, [pc, #352]	; (b458 <P2PTasks+0x6cc>)
    b2f8:	4798      	blx	r3
    b2fa:	2800      	cmp	r0, #0
    b2fc:	d0ee      	beq.n	b2dc <P2PTasks+0x550>
                                            ConnectionTable[i].status.Val = 0;
    b2fe:	00bb      	lsls	r3, r7, #2
    b300:	19dc      	adds	r4, r3, r7
    b302:	0064      	lsls	r4, r4, #1
    b304:	4b53      	ldr	r3, [pc, #332]	; (b454 <P2PTasks+0x6c8>)
    b306:	191c      	adds	r4, r3, r4
    b308:	2300      	movs	r3, #0
    b30a:	7223      	strb	r3, [r4, #8]
                        MiMAC_DiscardPacket();
    b30c:	4b4a      	ldr	r3, [pc, #296]	; (b438 <P2PTasks+0x6ac>)
    b30e:	4798      	blx	r3
                        break;
    b310:	e070      	b.n	b3f4 <P2PTasks+0x668>
                            dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_TIME_SYNC_DATA_PACKET));
    b312:	20e0      	movs	r0, #224	; 0xe0
    b314:	4b45      	ldr	r3, [pc, #276]	; (b42c <P2PTasks+0x6a0>)
    b316:	4798      	blx	r3
    b318:	1e04      	subs	r4, r0, #0
                            if (NULL == dataPtr)
    b31a:	d100      	bne.n	b31e <P2PTasks+0x592>
    b31c:	e560      	b.n	ade0 <P2PTasks+0x54>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    b31e:	4b49      	ldr	r3, [pc, #292]	; (b444 <P2PTasks+0x6b8>)
    b320:	685d      	ldr	r5, [r3, #4]
                                if( indirectMessages[i].flags.bits.isValid )
    b322:	4b57      	ldr	r3, [pc, #348]	; (b480 <P2PTasks+0x6f4>)
    b324:	7b9b      	ldrb	r3, [r3, #14]
    b326:	07db      	lsls	r3, r3, #31
    b328:	d505      	bpl.n	b336 <P2PTasks+0x5aa>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    b32a:	0029      	movs	r1, r5
    b32c:	4855      	ldr	r0, [pc, #340]	; (b484 <P2PTasks+0x6f8>)
    b32e:	4b4a      	ldr	r3, [pc, #296]	; (b458 <P2PTasks+0x6cc>)
    b330:	4798      	blx	r3
    b332:	2800      	cmp	r0, #0
    b334:	d14c      	bne.n	b3d0 <P2PTasks+0x644>
                                if( indirectMessages[i].flags.bits.isValid )
    b336:	2391      	movs	r3, #145	; 0x91
    b338:	005b      	lsls	r3, r3, #1
    b33a:	4a51      	ldr	r2, [pc, #324]	; (b480 <P2PTasks+0x6f4>)
    b33c:	5cd3      	ldrb	r3, [r2, r3]
    b33e:	07db      	lsls	r3, r3, #31
    b340:	d505      	bpl.n	b34e <P2PTasks+0x5c2>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    b342:	0029      	movs	r1, r5
    b344:	4850      	ldr	r0, [pc, #320]	; (b488 <P2PTasks+0x6fc>)
    b346:	4b44      	ldr	r3, [pc, #272]	; (b458 <P2PTasks+0x6cc>)
    b348:	4798      	blx	r3
    b34a:	2800      	cmp	r0, #0
    b34c:	d110      	bne.n	b370 <P2PTasks+0x5e4>
                                        SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, isCommand, false, 
    b34e:	4b3d      	ldr	r3, [pc, #244]	; (b444 <P2PTasks+0x6b8>)
    b350:	8859      	ldrh	r1, [r3, #2]
    b352:	4b4e      	ldr	r3, [pc, #312]	; (b48c <P2PTasks+0x700>)
    b354:	9305      	str	r3, [sp, #20]
    b356:	2300      	movs	r3, #0
    b358:	9304      	str	r3, [sp, #16]
    b35a:	9303      	str	r3, [sp, #12]
    b35c:	9402      	str	r4, [sp, #8]
    b35e:	9301      	str	r3, [sp, #4]
    b360:	9300      	str	r3, [sp, #0]
    b362:	002a      	movs	r2, r5
    b364:	2000      	movs	r0, #0
    b366:	4c39      	ldr	r4, [pc, #228]	; (b44c <P2PTasks+0x6c0>)
    b368:	47a0      	blx	r4
                            MiMAC_DiscardPacket();
    b36a:	4b33      	ldr	r3, [pc, #204]	; (b438 <P2PTasks+0x6ac>)
    b36c:	4798      	blx	r3
                        break;
    b36e:	e041      	b.n	b3f4 <P2PTasks+0x668>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    b370:	4a45      	ldr	r2, [pc, #276]	; (b488 <P2PTasks+0x6fc>)
                                if( indirectMessages[i].flags.bits.isValid )
    b372:	2001      	movs	r0, #1
                                        for(j = 0; j < indirectMessages[i].PayLoadSize; j++)
    b374:	218a      	movs	r1, #138	; 0x8a
    b376:	0049      	lsls	r1, r1, #1
    b378:	4341      	muls	r1, r0
    b37a:	4b41      	ldr	r3, [pc, #260]	; (b480 <P2PTasks+0x6f4>)
    b37c:	185b      	adds	r3, r3, r1
    b37e:	7bdb      	ldrb	r3, [r3, #15]
    b380:	2b00      	cmp	r3, #0
    b382:	d00e      	beq.n	b3a2 <P2PTasks+0x616>
    b384:	2600      	movs	r6, #0
                                            dataPtr[dataLen++] =indirectMessages[i].PayLoad[j];
    b386:	000b      	movs	r3, r1
    b388:	493d      	ldr	r1, [pc, #244]	; (b480 <P2PTasks+0x6f4>)
    b38a:	18c9      	adds	r1, r1, r3
                                        for(j = 0; j < indirectMessages[i].PayLoadSize; j++)
    b38c:	000f      	movs	r7, r1
    b38e:	370f      	adds	r7, #15
                                            dataPtr[dataLen++] =indirectMessages[i].PayLoad[j];
    b390:	1c73      	adds	r3, r6, #1
    b392:	b2db      	uxtb	r3, r3
    b394:	198d      	adds	r5, r1, r6
    b396:	7c2d      	ldrb	r5, [r5, #16]
    b398:	55a5      	strb	r5, [r4, r6]
    b39a:	001e      	movs	r6, r3
                                        for(j = 0; j < indirectMessages[i].PayLoadSize; j++)
    b39c:	783d      	ldrb	r5, [r7, #0]
    b39e:	429d      	cmp	r5, r3
    b3a0:	d8f6      	bhi.n	b390 <P2PTasks+0x604>
                                            SendPacket(false, indirectMessages[i].DestPANID, indirectMessages[i].DestAddress.DestLongAddress, isCommand, (bool)indirectMessages[i].flags.bits.isSecured,
    b3a2:	258a      	movs	r5, #138	; 0x8a
    b3a4:	006d      	lsls	r5, r5, #1
    b3a6:	4368      	muls	r0, r5
    b3a8:	4d35      	ldr	r5, [pc, #212]	; (b480 <P2PTasks+0x6f4>)
    b3aa:	182d      	adds	r5, r5, r0
    b3ac:	88a9      	ldrh	r1, [r5, #4]
    b3ae:	4837      	ldr	r0, [pc, #220]	; (b48c <P2PTasks+0x700>)
    b3b0:	9005      	str	r0, [sp, #20]
    b3b2:	2600      	movs	r6, #0
    b3b4:	9604      	str	r6, [sp, #16]
    b3b6:	9603      	str	r6, [sp, #12]
    b3b8:	9402      	str	r4, [sp, #8]
    b3ba:	9301      	str	r3, [sp, #4]
    b3bc:	7bab      	ldrb	r3, [r5, #14]
    b3be:	071b      	lsls	r3, r3, #28
    b3c0:	0fdb      	lsrs	r3, r3, #31
    b3c2:	9300      	str	r3, [sp, #0]
    b3c4:	2300      	movs	r3, #0
    b3c6:	2000      	movs	r0, #0
    b3c8:	4c20      	ldr	r4, [pc, #128]	; (b44c <P2PTasks+0x6c0>)
    b3ca:	47a0      	blx	r4
                                        indirectMessages[i].flags.Val = 0;   
    b3cc:	73ae      	strb	r6, [r5, #14]
                                        goto END_OF_SENDING_INDIRECT_MESSAGE;    
    b3ce:	e7cc      	b.n	b36a <P2PTasks+0x5de>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    b3d0:	4a2c      	ldr	r2, [pc, #176]	; (b484 <P2PTasks+0x6f8>)
                                if( indirectMessages[i].flags.bits.isValid )
    b3d2:	2000      	movs	r0, #0
    b3d4:	e7ce      	b.n	b374 <P2PTasks+0x5e8>
            P2PStatus.bits.RxHasUserData = 1;
    b3d6:	4c26      	ldr	r4, [pc, #152]	; (b470 <P2PTasks+0x6e4>)
    b3d8:	7823      	ldrb	r3, [r4, #0]
    b3da:	2208      	movs	r2, #8
    b3dc:	4313      	orrs	r3, r2
    b3de:	7023      	strb	r3, [r4, #0]
			pktRxcallback(&rxMessage);
    b3e0:	4b2b      	ldr	r3, [pc, #172]	; (b490 <P2PTasks+0x704>)
    b3e2:	681b      	ldr	r3, [r3, #0]
    b3e4:	4817      	ldr	r0, [pc, #92]	; (b444 <P2PTasks+0x6b8>)
    b3e6:	4798      	blx	r3
			P2PStatus.bits.RxHasUserData = 0;
    b3e8:	7823      	ldrb	r3, [r4, #0]
    b3ea:	2208      	movs	r2, #8
    b3ec:	4393      	bics	r3, r2
    b3ee:	7023      	strb	r3, [r4, #0]
			MiMAC_DiscardPacket();
    b3f0:	4b11      	ldr	r3, [pc, #68]	; (b438 <P2PTasks+0x6ac>)
    b3f2:	4798      	blx	r3
        if( rxMessage.PayloadSize == 0  || P2PStatus.bits.SearchConnection || P2PStatus.bits.Resync )
    b3f4:	4b13      	ldr	r3, [pc, #76]	; (b444 <P2PTasks+0x6b8>)
    b3f6:	7b1b      	ldrb	r3, [r3, #12]
    b3f8:	2b00      	cmp	r3, #0
    b3fa:	d008      	beq.n	b40e <P2PTasks+0x682>
    b3fc:	4b1c      	ldr	r3, [pc, #112]	; (b470 <P2PTasks+0x6e4>)
    b3fe:	781b      	ldrb	r3, [r3, #0]
    b400:	06db      	lsls	r3, r3, #27
    b402:	d404      	bmi.n	b40e <P2PTasks+0x682>
    b404:	4b1a      	ldr	r3, [pc, #104]	; (b470 <P2PTasks+0x6e4>)
    b406:	781b      	ldrb	r3, [r3, #0]
    b408:	069b      	lsls	r3, r3, #26
    b40a:	d400      	bmi.n	b40e <P2PTasks+0x682>
    b40c:	e4e8      	b.n	ade0 <P2PTasks+0x54>
            P2PStatus.bits.RxHasUserData = 0;
    b40e:	4a18      	ldr	r2, [pc, #96]	; (b470 <P2PTasks+0x6e4>)
    b410:	7813      	ldrb	r3, [r2, #0]
    b412:	2108      	movs	r1, #8
    b414:	438b      	bics	r3, r1
    b416:	7013      	strb	r3, [r2, #0]
            MiMAC_DiscardPacket();
    b418:	4b07      	ldr	r3, [pc, #28]	; (b438 <P2PTasks+0x6ac>)
    b41a:	4798      	blx	r3
    b41c:	e4e0      	b.n	ade0 <P2PTasks+0x54>
                                if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    b41e:	4b1d      	ldr	r3, [pc, #116]	; (b494 <P2PTasks+0x708>)
    b420:	781b      	ldrb	r3, [r3, #0]
    b422:	2b01      	cmp	r3, #1
    b424:	d100      	bne.n	b428 <P2PTasks+0x69c>
    b426:	e609      	b.n	b03c <P2PTasks+0x2b0>
                                        status = STATUS_NOT_SAME_PAN;
    b428:	25f2      	movs	r5, #242	; 0xf2
    b42a:	e5c9      	b.n	afc0 <P2PTasks+0x234>
    b42c:	0000b84d 	.word	0x0000b84d
    b430:	200026b5 	.word	0x200026b5
    b434:	2000000c 	.word	0x2000000c
    b438:	000097f1 	.word	0x000097f1
    b43c:	0000a3e9 	.word	0x0000a3e9
    b440:	000044cd 	.word	0x000044cd
    b444:	2000294c 	.word	0x2000294c
    b448:	0000a425 	.word	0x0000a425
    b44c:	0000a591 	.word	0x0000a591
    b450:	000044a1 	.word	0x000044a1
    b454:	20002668 	.word	0x20002668
    b458:	0000a665 	.word	0x0000a665
    b45c:	200026bc 	.word	0x200026bc
    b460:	200026b8 	.word	0x200026b8
    b464:	0000ffff 	.word	0x0000ffff
    b468:	0000aae1 	.word	0x0000aae1
    b46c:	00008fc5 	.word	0x00008fc5
    b470:	200026dc 	.word	0x200026dc
    b474:	2000290c 	.word	0x2000290c
    b478:	20000011 	.word	0x20000011
    b47c:	2000295c 	.word	0x2000295c
    b480:	200026e0 	.word	0x200026e0
    b484:	200026e6 	.word	0x200026e6
    b488:	200027fa 	.word	0x200027fa
    b48c:	000075a9 	.word	0x000075a9
    b490:	2000028c 	.word	0x2000028c
    b494:	20000010 	.word	0x20000010
                            MiMAC_DiscardPacket();
    b498:	4b0d      	ldr	r3, [pc, #52]	; (b4d0 <P2PTasks+0x744>)
    b49a:	4798      	blx	r3
                            dataPtr[dataLen++] = CMD_P2P_CONNECTION_REMOVAL_RESPONSE;
    b49c:	2301      	movs	r3, #1
                                dataPtr[dataLen++] = STATUS_ENTRY_NOT_EXIST;
    b49e:	1c5c      	adds	r4, r3, #1
    b4a0:	22f0      	movs	r2, #240	; 0xf0
    b4a2:	4641      	mov	r1, r8
    b4a4:	54ca      	strb	r2, [r1, r3]
                                    SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn, 
    b4a6:	4b0b      	ldr	r3, [pc, #44]	; (b4d4 <P2PTasks+0x748>)
    b4a8:	685a      	ldr	r2, [r3, #4]
    b4aa:	8859      	ldrh	r1, [r3, #2]
    b4ac:	480a      	ldr	r0, [pc, #40]	; (b4d8 <P2PTasks+0x74c>)
    b4ae:	9005      	str	r0, [sp, #20]
    b4b0:	2001      	movs	r0, #1
    b4b2:	9004      	str	r0, [sp, #16]
    b4b4:	2000      	movs	r0, #0
    b4b6:	9003      	str	r0, [sp, #12]
    b4b8:	4640      	mov	r0, r8
    b4ba:	9002      	str	r0, [sp, #8]
    b4bc:	9401      	str	r4, [sp, #4]
    b4be:	781b      	ldrb	r3, [r3, #0]
    b4c0:	071b      	lsls	r3, r3, #28
    b4c2:	0fdb      	lsrs	r3, r3, #31
    b4c4:	9300      	str	r3, [sp, #0]
    b4c6:	2301      	movs	r3, #1
    b4c8:	2000      	movs	r0, #0
    b4ca:	4c04      	ldr	r4, [pc, #16]	; (b4dc <P2PTasks+0x750>)
    b4cc:	47a0      	blx	r4
                            break;
    b4ce:	e791      	b.n	b3f4 <P2PTasks+0x668>
    b4d0:	000097f1 	.word	0x000097f1
    b4d4:	2000294c 	.word	0x2000294c
    b4d8:	0000a425 	.word	0x0000a425
    b4dc:	0000a591 	.word	0x0000a591

0000b4e0 <MiApp_EstablishConnection>:
    {
    b4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b4e2:	46de      	mov	lr, fp
    b4e4:	4657      	mov	r7, sl
    b4e6:	464e      	mov	r6, r9
    b4e8:	4645      	mov	r5, r8
    b4ea:	b5e0      	push	{r5, r6, r7, lr}
    b4ec:	b08b      	sub	sp, #44	; 0x2c
    b4ee:	0016      	movs	r6, r2
    b4f0:	231f      	movs	r3, #31
    b4f2:	aa02      	add	r2, sp, #8
    b4f4:	4694      	mov	ip, r2
    b4f6:	4463      	add	r3, ip
    b4f8:	7018      	strb	r0, [r3, #0]
        uint8_t    tmpConnectionMode = ConnMode;
    b4fa:	4c61      	ldr	r4, [pc, #388]	; (b680 <MiApp_EstablishConnection+0x1a0>)
    b4fc:	7823      	ldrb	r3, [r4, #0]
    b4fe:	9308      	str	r3, [sp, #32]
        tick1.Val = MiWi_TickGet();
    b500:	4d60      	ldr	r5, [pc, #384]	; (b684 <MiApp_EstablishConnection+0x1a4>)
    b502:	47a8      	blx	r5
    b504:	4b60      	ldr	r3, [pc, #384]	; (b688 <MiApp_EstablishConnection+0x1a8>)
    b506:	6018      	str	r0, [r3, #0]
        t1.Val = MiWi_TickGet();
    b508:	47a8      	blx	r5
        t1.Val -= (ONE_SECOND);
    b50a:	4b60      	ldr	r3, [pc, #384]	; (b68c <MiApp_EstablishConnection+0x1ac>)
    b50c:	18c5      	adds	r5, r0, r3
        ConnMode = ENABLE_ALL_CONN;
    b50e:	2300      	movs	r3, #0
    b510:	7023      	strb	r3, [r4, #0]
        P2PStatus.bits.SearchConnection = 1;
    b512:	4a5f      	ldr	r2, [pc, #380]	; (b690 <MiApp_EstablishConnection+0x1b0>)
    b514:	7813      	ldrb	r3, [r2, #0]
    b516:	2110      	movs	r1, #16
    b518:	430b      	orrs	r3, r1
    b51a:	7013      	strb	r3, [r2, #0]
        EstConfCallback = ConfCallback;
    b51c:	4b5d      	ldr	r3, [pc, #372]	; (b694 <MiApp_EstablishConnection+0x1b4>)
    b51e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    b520:	601a      	str	r2, [r3, #0]
        uint8_t    connectionInterval = 0;
    b522:	2400      	movs	r4, #0
        uint8_t    retry = CONNECTION_RETRY_TIMES;
    b524:	2703      	movs	r7, #3
        while( P2PStatus.bits.SearchConnection )
    b526:	4b5a      	ldr	r3, [pc, #360]	; (b690 <MiApp_EstablishConnection+0x1b0>)
    b528:	4699      	mov	r9, r3
            t2.Val = MiWi_TickGet();
    b52a:	4b56      	ldr	r3, [pc, #344]	; (b684 <MiApp_EstablishConnection+0x1a4>)
    b52c:	4698      	mov	r8, r3
    b52e:	002b      	movs	r3, r5
    b530:	003d      	movs	r5, r7
    b532:	001f      	movs	r7, r3
        while( P2PStatus.bits.SearchConnection )
    b534:	e08c      	b.n	b650 <MiApp_EstablishConnection+0x170>
                if( retry-- == 0 )
    b536:	1e6b      	subs	r3, r5, #1
    b538:	b2db      	uxtb	r3, r3
    b53a:	9307      	str	r3, [sp, #28]
    b53c:	2d00      	cmp	r5, #0
    b53e:	d02d      	beq.n	b59c <MiApp_EstablishConnection+0xbc>
                MiApp_Set(CHANNEL, &Channel);
    b540:	211f      	movs	r1, #31
    b542:	ab02      	add	r3, sp, #8
    b544:	469c      	mov	ip, r3
    b546:	4461      	add	r1, ip
    b548:	2000      	movs	r0, #0
    b54a:	4b53      	ldr	r3, [pc, #332]	; (b698 <MiApp_EstablishConnection+0x1b8>)
    b54c:	4798      	blx	r3
                dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_P2P_CONNECTION_REQUEST));
    b54e:	2010      	movs	r0, #16
    b550:	4b52      	ldr	r3, [pc, #328]	; (b69c <MiApp_EstablishConnection+0x1bc>)
    b552:	4798      	blx	r3
    b554:	1e07      	subs	r7, r0, #0
                if (NULL == dataPtr)
    b556:	d045      	beq.n	b5e4 <MiApp_EstablishConnection+0x104>
                dataPtr[dataLen++] = CMD_P2P_CONNECTION_REQUEST;
    b558:	2381      	movs	r3, #129	; 0x81
    b55a:	7003      	strb	r3, [r0, #0]
                dataPtr[dataLen++] = currentChannel;
    b55c:	4b50      	ldr	r3, [pc, #320]	; (b6a0 <MiApp_EstablishConnection+0x1c0>)
    b55e:	781b      	ldrb	r3, [r3, #0]
    b560:	7043      	strb	r3, [r0, #1]
                dataPtr[dataLen++] = P2PCapacityInfo;
    b562:	4b50      	ldr	r3, [pc, #320]	; (b6a4 <MiApp_EstablishConnection+0x1c4>)
    b564:	781b      	ldrb	r3, [r3, #0]
    b566:	7083      	strb	r3, [r0, #2]
                            dataPtr[dataLen++] = AdditionalNodeID[i];
    b568:	4b4f      	ldr	r3, [pc, #316]	; (b6a8 <MiApp_EstablishConnection+0x1c8>)
    b56a:	781b      	ldrb	r3, [r3, #0]
    b56c:	70c3      	strb	r3, [r0, #3]
                        uint16_t DestinationAddress16 = ((addr[1] << 8) + addr[0]);	
    b56e:	7872      	ldrb	r2, [r6, #1]
    b570:	0212      	lsls	r2, r2, #8
    b572:	7833      	ldrb	r3, [r6, #0]
    b574:	189b      	adds	r3, r3, r2
                        if( DestinationAddress16 == 0xFFFF )
    b576:	b29b      	uxth	r3, r3
    b578:	4a4c      	ldr	r2, [pc, #304]	; (b6ac <MiApp_EstablishConnection+0x1cc>)
    b57a:	4293      	cmp	r3, r2
    b57c:	d015      	beq.n	b5aa <MiApp_EstablishConnection+0xca>
							MiApp_Set(CHANNEL, &Channel);
    b57e:	211f      	movs	r1, #31
    b580:	ab02      	add	r3, sp, #8
    b582:	469c      	mov	ip, r3
    b584:	4461      	add	r1, ip
    b586:	2000      	movs	r0, #0
    b588:	4b43      	ldr	r3, [pc, #268]	; (b698 <MiApp_EstablishConnection+0x1b8>)
    b58a:	4798      	blx	r3
								  if (addr[j] != ActiveScanResults[i].Address[j])
    b58c:	7833      	ldrb	r3, [r6, #0]
    b58e:	469b      	mov	fp, r3
    b590:	4b47      	ldr	r3, [pc, #284]	; (b6b0 <MiApp_EstablishConnection+0x1d0>)
    b592:	0035      	movs	r5, r6
    b594:	3508      	adds	r5, #8
    b596:	46bc      	mov	ip, r7
    b598:	001f      	movs	r7, r3
    b59a:	e030      	b.n	b5fe <MiApp_EstablishConnection+0x11e>
                    P2PStatus.bits.SearchConnection = 0;
    b59c:	4a3c      	ldr	r2, [pc, #240]	; (b690 <MiApp_EstablishConnection+0x1b0>)
    b59e:	7813      	ldrb	r3, [r2, #0]
    b5a0:	2110      	movs	r1, #16
    b5a2:	438b      	bics	r3, r1
    b5a4:	7013      	strb	r3, [r2, #0]
                    return 0xFF;
    b5a6:	24ff      	movs	r4, #255	; 0xff
    b5a8:	e01c      	b.n	b5e4 <MiApp_EstablishConnection+0x104>
                            SendPacket(true, myPANID, NULL, true, false, dataLen, dataPtr,0, true, CommandConfCallback);
    b5aa:	4b42      	ldr	r3, [pc, #264]	; (b6b4 <MiApp_EstablishConnection+0x1d4>)
    b5ac:	8819      	ldrh	r1, [r3, #0]
    b5ae:	4b42      	ldr	r3, [pc, #264]	; (b6b8 <MiApp_EstablishConnection+0x1d8>)
    b5b0:	9305      	str	r3, [sp, #20]
    b5b2:	2301      	movs	r3, #1
    b5b4:	9304      	str	r3, [sp, #16]
    b5b6:	2300      	movs	r3, #0
    b5b8:	9303      	str	r3, [sp, #12]
    b5ba:	9002      	str	r0, [sp, #8]
    b5bc:	2204      	movs	r2, #4
    b5be:	9201      	str	r2, [sp, #4]
    b5c0:	9300      	str	r3, [sp, #0]
    b5c2:	3301      	adds	r3, #1
    b5c4:	2200      	movs	r2, #0
    b5c6:	2001      	movs	r0, #1
    b5c8:	4c3c      	ldr	r4, [pc, #240]	; (b6bc <MiApp_EstablishConnection+0x1dc>)
    b5ca:	47a0      	blx	r4
                t1.Val = t2.Val;
    b5cc:	9f06      	ldr	r7, [sp, #24]
                if( retry-- == 0 )
    b5ce:	9d07      	ldr	r5, [sp, #28]
                connectionInterval = CONNECTION_INTERVAL-1;
    b5d0:	2403      	movs	r4, #3
    b5d2:	e039      	b.n	b648 <MiApp_EstablishConnection+0x168>
        ConnMode = tmpConnectionMode;
    b5d4:	4b2a      	ldr	r3, [pc, #168]	; (b680 <MiApp_EstablishConnection+0x1a0>)
    b5d6:	466a      	mov	r2, sp
    b5d8:	2120      	movs	r1, #32
    b5da:	1852      	adds	r2, r2, r1
    b5dc:	7812      	ldrb	r2, [r2, #0]
    b5de:	701a      	strb	r2, [r3, #0]
        return LatestConnection;
    b5e0:	4b37      	ldr	r3, [pc, #220]	; (b6c0 <MiApp_EstablishConnection+0x1e0>)
    b5e2:	781c      	ldrb	r4, [r3, #0]
    }
    b5e4:	0020      	movs	r0, r4
    b5e6:	b00b      	add	sp, #44	; 0x2c
    b5e8:	bc3c      	pop	{r2, r3, r4, r5}
    b5ea:	4690      	mov	r8, r2
    b5ec:	4699      	mov	r9, r3
    b5ee:	46a2      	mov	sl, r4
    b5f0:	46ab      	mov	fp, r5
    b5f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
							for(i = 0; i < ACTIVE_SCAN_RESULT_SIZE; i++)
    b5f4:	3401      	adds	r4, #1
    b5f6:	b2e4      	uxtb	r4, r4
    b5f8:	3710      	adds	r7, #16
    b5fa:	2c04      	cmp	r4, #4
    b5fc:	d03b      	beq.n	b676 <MiApp_EstablishConnection+0x196>
								  if (addr[j] != ActiveScanResults[i].Address[j])
    b5fe:	787b      	ldrb	r3, [r7, #1]
    b600:	455b      	cmp	r3, fp
    b602:	d1f7      	bne.n	b5f4 <MiApp_EstablishConnection+0x114>
    b604:	1c73      	adds	r3, r6, #1
    b606:	1cba      	adds	r2, r7, #2
    b608:	7818      	ldrb	r0, [r3, #0]
    b60a:	7811      	ldrb	r1, [r2, #0]
    b60c:	4288      	cmp	r0, r1
    b60e:	d1f1      	bne.n	b5f4 <MiApp_EstablishConnection+0x114>
    b610:	3301      	adds	r3, #1
    b612:	3201      	adds	r2, #1
								for(j = 0; j < MY_ADDRESS_LENGTH; j++)
    b614:	42ab      	cmp	r3, r5
    b616:	d1f7      	bne.n	b608 <MiApp_EstablishConnection+0x128>
    b618:	4667      	mov	r7, ip
								SendPacket(false, ActiveScanResults[i].PANID, ActiveScanResults[i].Address, true, false, 
    b61a:	0124      	lsls	r4, r4, #4
    b61c:	1c62      	adds	r2, r4, #1
    b61e:	4b24      	ldr	r3, [pc, #144]	; (b6b0 <MiApp_EstablishConnection+0x1d0>)
    b620:	18d2      	adds	r2, r2, r3
    b622:	191b      	adds	r3, r3, r4
    b624:	8959      	ldrh	r1, [r3, #10]
    b626:	4b24      	ldr	r3, [pc, #144]	; (b6b8 <MiApp_EstablishConnection+0x1d8>)
    b628:	9305      	str	r3, [sp, #20]
    b62a:	2301      	movs	r3, #1
    b62c:	9304      	str	r3, [sp, #16]
    b62e:	2300      	movs	r3, #0
    b630:	9303      	str	r3, [sp, #12]
    b632:	9702      	str	r7, [sp, #8]
    b634:	2004      	movs	r0, #4
    b636:	9001      	str	r0, [sp, #4]
    b638:	9300      	str	r3, [sp, #0]
    b63a:	3301      	adds	r3, #1
    b63c:	2000      	movs	r0, #0
    b63e:	4c1f      	ldr	r4, [pc, #124]	; (b6bc <MiApp_EstablishConnection+0x1dc>)
    b640:	47a0      	blx	r4
                t1.Val = t2.Val;
    b642:	9f06      	ldr	r7, [sp, #24]
                if( retry-- == 0 )
    b644:	9d07      	ldr	r5, [sp, #28]
                connectionInterval = CONNECTION_INTERVAL-1;
    b646:	2403      	movs	r4, #3
            P2PTasks();
    b648:	4b1e      	ldr	r3, [pc, #120]	; (b6c4 <MiApp_EstablishConnection+0x1e4>)
    b64a:	4798      	blx	r3
			SYSTEM_RunTasks();
    b64c:	4b1e      	ldr	r3, [pc, #120]	; (b6c8 <MiApp_EstablishConnection+0x1e8>)
    b64e:	4798      	blx	r3
        while( P2PStatus.bits.SearchConnection )
    b650:	464b      	mov	r3, r9
    b652:	781b      	ldrb	r3, [r3, #0]
    b654:	06db      	lsls	r3, r3, #27
    b656:	d5bd      	bpl.n	b5d4 <MiApp_EstablishConnection+0xf4>
            t2.Val = MiWi_TickGet();
    b658:	47c0      	blx	r8
            if( MiWi_TickGetDiff(t2, t1) > (ONE_SECOND) )
    b65a:	0039      	movs	r1, r7
    b65c:	9006      	str	r0, [sp, #24]
    b65e:	4b1b      	ldr	r3, [pc, #108]	; (b6cc <MiApp_EstablishConnection+0x1ec>)
    b660:	4798      	blx	r3
    b662:	4b1b      	ldr	r3, [pc, #108]	; (b6d0 <MiApp_EstablishConnection+0x1f0>)
    b664:	4298      	cmp	r0, r3
    b666:	d9ef      	bls.n	b648 <MiApp_EstablishConnection+0x168>
                if( connectionInterval-- > 0 )
    b668:	2c00      	cmp	r4, #0
    b66a:	d100      	bne.n	b66e <MiApp_EstablishConnection+0x18e>
    b66c:	e763      	b.n	b536 <MiApp_EstablishConnection+0x56>
    b66e:	3c01      	subs	r4, #1
    b670:	b2e4      	uxtb	r4, r4
                t1.Val = t2.Val;
    b672:	9f06      	ldr	r7, [sp, #24]
    b674:	e7ec      	b.n	b650 <MiApp_EstablishConnection+0x170>
    b676:	9f06      	ldr	r7, [sp, #24]
                if( retry-- == 0 )
    b678:	9d07      	ldr	r5, [sp, #28]
                connectionInterval = CONNECTION_INTERVAL-1;
    b67a:	3c01      	subs	r4, #1
    b67c:	e7e4      	b.n	b648 <MiApp_EstablishConnection+0x168>
    b67e:	46c0      	nop			; (mov r8, r8)
    b680:	20000010 	.word	0x20000010
    b684:	0000ba8d 	.word	0x0000ba8d
    b688:	20002908 	.word	0x20002908
    b68c:	fff0bdc0 	.word	0xfff0bdc0
    b690:	200026dc 	.word	0x200026dc
    b694:	200026bc 	.word	0x200026bc
    b698:	0000a7c1 	.word	0x0000a7c1
    b69c:	0000b84d 	.word	0x0000b84d
    b6a0:	20000011 	.word	0x20000011
    b6a4:	200026b5 	.word	0x200026b5
    b6a8:	2000000c 	.word	0x2000000c
    b6ac:	0000ffff 	.word	0x0000ffff
    b6b0:	2000290c 	.word	0x2000290c
    b6b4:	200026b8 	.word	0x200026b8
    b6b8:	0000a425 	.word	0x0000a425
    b6bc:	0000a591 	.word	0x0000a591
    b6c0:	20002664 	.word	0x20002664
    b6c4:	0000ad8d 	.word	0x0000ad8d
    b6c8:	0000d1d1 	.word	0x0000d1d1
    b6cc:	0000baed 	.word	0x0000baed
    b6d0:	000f4240 	.word	0x000f4240

0000b6d4 <MiApp_SearchConnection>:
    {
    b6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b6d6:	46d6      	mov	lr, sl
    b6d8:	464f      	mov	r7, r9
    b6da:	4646      	mov	r6, r8
    b6dc:	b5c0      	push	{r6, r7, lr}
    b6de:	b08a      	sub	sp, #40	; 0x28
    b6e0:	4690      	mov	r8, r2
        uint8_t backupChannel = currentChannel;
    b6e2:	4b3d      	ldr	r3, [pc, #244]	; (b7d8 <MiApp_SearchConnection+0x104>)
    b6e4:	781a      	ldrb	r2, [r3, #0]
    b6e6:	231e      	movs	r3, #30
    b6e8:	ac02      	add	r4, sp, #8
    b6ea:	46a4      	mov	ip, r4
    b6ec:	4463      	add	r3, ip
    b6ee:	701a      	strb	r2, [r3, #0]
            ActiveScanResults[i].Channel = 0xFF;
    b6f0:	4b3a      	ldr	r3, [pc, #232]	; (b7dc <MiApp_SearchConnection+0x108>)
    b6f2:	22ff      	movs	r2, #255	; 0xff
    b6f4:	701a      	strb	r2, [r3, #0]
    b6f6:	741a      	strb	r2, [r3, #16]
    b6f8:	2420      	movs	r4, #32
    b6fa:	551a      	strb	r2, [r3, r4]
    b6fc:	3410      	adds	r4, #16
    b6fe:	551a      	strb	r2, [r3, r4]
        ActiveScanResultIndex = 0;
    b700:	2300      	movs	r3, #0
    b702:	4a37      	ldr	r2, [pc, #220]	; (b7e0 <MiApp_SearchConnection+0x10c>)
    b704:	7013      	strb	r3, [r2, #0]
        i = 0;
    b706:	221f      	movs	r2, #31
    b708:	4462      	add	r2, ip
    b70a:	7013      	strb	r3, [r2, #0]
		scan_symbols =   ABASESUPERFRAMEDURATION *((1<<scan_duration) + 1);
    b70c:	3301      	adds	r3, #1
    b70e:	4083      	lsls	r3, r0
    b710:	3301      	adds	r3, #1
    b712:	011d      	lsls	r5, r3, #4
    b714:	1aeb      	subs	r3, r5, r3
    b716:	019b      	lsls	r3, r3, #6
		return SYMBOLS_TO_TICKS(scan_symbols);
    b718:	25fa      	movs	r5, #250	; 0xfa
    b71a:	00ad      	lsls	r5, r5, #2
    b71c:	435d      	muls	r5, r3
    b71e:	2300      	movs	r3, #0
            if( ChannelMap & FULL_CHANNEL_MAP & (channelMask << i) )
    b720:	2603      	movs	r6, #3
    b722:	400e      	ands	r6, r1
    b724:	46b2      	mov	sl, r6
                printf("\r\nScan Channel ");
    b726:	4a2f      	ldr	r2, [pc, #188]	; (b7e4 <MiApp_SearchConnection+0x110>)
    b728:	4691      	mov	r9, r2
    b72a:	e009      	b.n	b740 <MiApp_SearchConnection+0x6c>
            i++;
    b72c:	221f      	movs	r2, #31
    b72e:	ab02      	add	r3, sp, #8
    b730:	469c      	mov	ip, r3
    b732:	4462      	add	r2, ip
    b734:	7813      	ldrb	r3, [r2, #0]
    b736:	3301      	adds	r3, #1
    b738:	b2db      	uxtb	r3, r3
    b73a:	7013      	strb	r3, [r2, #0]
        while( i < 32 )
    b73c:	2b1f      	cmp	r3, #31
    b73e:	d83b      	bhi.n	b7b8 <MiApp_SearchConnection+0xe4>
            if( ChannelMap & FULL_CHANNEL_MAP & (channelMask << i) )
    b740:	2201      	movs	r2, #1
    b742:	409a      	lsls	r2, r3
    b744:	4653      	mov	r3, sl
    b746:	421a      	tst	r2, r3
    b748:	d0f0      	beq.n	b72c <MiApp_SearchConnection+0x58>
                printf("\r\nScan Channel ");
    b74a:	4827      	ldr	r0, [pc, #156]	; (b7e8 <MiApp_SearchConnection+0x114>)
    b74c:	47c8      	blx	r9
                printf("%d",i);
    b74e:	241f      	movs	r4, #31
    b750:	ab02      	add	r3, sp, #8
    b752:	469c      	mov	ip, r3
    b754:	4464      	add	r4, ip
    b756:	7821      	ldrb	r1, [r4, #0]
    b758:	4824      	ldr	r0, [pc, #144]	; (b7ec <MiApp_SearchConnection+0x118>)
    b75a:	47c8      	blx	r9
                MiApp_Set(CHANNEL, &i);
    b75c:	0021      	movs	r1, r4
    b75e:	2000      	movs	r0, #0
    b760:	4b23      	ldr	r3, [pc, #140]	; (b7f0 <MiApp_SearchConnection+0x11c>)
    b762:	4798      	blx	r3
                dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_P2P_ACTIVE_SCAN_REQUEST));
    b764:	2010      	movs	r0, #16
    b766:	4b23      	ldr	r3, [pc, #140]	; (b7f4 <MiApp_SearchConnection+0x120>)
    b768:	4798      	blx	r3
                if (NULL == dataPtr)
    b76a:	2800      	cmp	r0, #0
    b76c:	d02e      	beq.n	b7cc <MiApp_SearchConnection+0xf8>
                dataPtr[dataLen++] = CMD_P2P_ACTIVE_SCAN_REQUEST;
    b76e:	2387      	movs	r3, #135	; 0x87
    b770:	7003      	strb	r3, [r0, #0]
                dataPtr[dataLen++] = currentChannel;
    b772:	4b19      	ldr	r3, [pc, #100]	; (b7d8 <MiApp_SearchConnection+0x104>)
    b774:	781b      	ldrb	r3, [r3, #0]
    b776:	7043      	strb	r3, [r0, #1]
                    SendPacket(true, tmpPANID, NULL, true, false, dataLen, dataPtr,0, true, CommandConfCallback);
    b778:	4b1f      	ldr	r3, [pc, #124]	; (b7f8 <MiApp_SearchConnection+0x124>)
    b77a:	9305      	str	r3, [sp, #20]
    b77c:	2301      	movs	r3, #1
    b77e:	9304      	str	r3, [sp, #16]
    b780:	2300      	movs	r3, #0
    b782:	9303      	str	r3, [sp, #12]
    b784:	9002      	str	r0, [sp, #8]
    b786:	2202      	movs	r2, #2
    b788:	9201      	str	r2, [sp, #4]
    b78a:	9300      	str	r3, [sp, #0]
    b78c:	3301      	adds	r3, #1
    b78e:	2200      	movs	r2, #0
    b790:	2101      	movs	r1, #1
    b792:	4249      	negs	r1, r1
    b794:	2001      	movs	r0, #1
    b796:	4c19      	ldr	r4, [pc, #100]	; (b7fc <MiApp_SearchConnection+0x128>)
    b798:	47a0      	blx	r4
                t1.Val = MiWi_TickGet();
    b79a:	4b19      	ldr	r3, [pc, #100]	; (b800 <MiApp_SearchConnection+0x12c>)
    b79c:	4798      	blx	r3
    b79e:	9007      	str	r0, [sp, #28]
                    P2PTasks();
    b7a0:	4e18      	ldr	r6, [pc, #96]	; (b804 <MiApp_SearchConnection+0x130>)
					SYSTEM_RunTasks();			
    b7a2:	4f19      	ldr	r7, [pc, #100]	; (b808 <MiApp_SearchConnection+0x134>)
                    t2.Val = MiWi_TickGet();
    b7a4:	4c16      	ldr	r4, [pc, #88]	; (b800 <MiApp_SearchConnection+0x12c>)
                    P2PTasks();
    b7a6:	47b0      	blx	r6
					SYSTEM_RunTasks();			
    b7a8:	47b8      	blx	r7
                    t2.Val = MiWi_TickGet();
    b7aa:	47a0      	blx	r4
                    if( MiWi_TickGetDiff(t2, t1) > ((uint32_t)(miwi_scan_duration_ticks(ScanDuration))) )
    b7ac:	9907      	ldr	r1, [sp, #28]
    b7ae:	4b17      	ldr	r3, [pc, #92]	; (b80c <MiApp_SearchConnection+0x138>)
    b7b0:	4798      	blx	r3
    b7b2:	42a8      	cmp	r0, r5
    b7b4:	d9f7      	bls.n	b7a6 <MiApp_SearchConnection+0xd2>
    b7b6:	e7b9      	b.n	b72c <MiApp_SearchConnection+0x58>
        MiApp_Set(CHANNEL, &backupChannel);
    b7b8:	211e      	movs	r1, #30
    b7ba:	4461      	add	r1, ip
    b7bc:	2000      	movs	r0, #0
    b7be:	4b0c      	ldr	r3, [pc, #48]	; (b7f0 <MiApp_SearchConnection+0x11c>)
    b7c0:	4798      	blx	r3
        ConfCallback(ActiveScanResultIndex, (uint8_t*)ActiveScanResults);
    b7c2:	4c07      	ldr	r4, [pc, #28]	; (b7e0 <MiApp_SearchConnection+0x10c>)
    b7c4:	7820      	ldrb	r0, [r4, #0]
    b7c6:	4905      	ldr	r1, [pc, #20]	; (b7dc <MiApp_SearchConnection+0x108>)
    b7c8:	47c0      	blx	r8
        return ActiveScanResultIndex;
    b7ca:	7820      	ldrb	r0, [r4, #0]
    }   
    b7cc:	b00a      	add	sp, #40	; 0x28
    b7ce:	bc1c      	pop	{r2, r3, r4}
    b7d0:	4690      	mov	r8, r2
    b7d2:	4699      	mov	r9, r3
    b7d4:	46a2      	mov	sl, r4
    b7d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b7d8:	20000011 	.word	0x20000011
    b7dc:	2000290c 	.word	0x2000290c
    b7e0:	2000295c 	.word	0x2000295c
    b7e4:	00016771 	.word	0x00016771
    b7e8:	00018134 	.word	0x00018134
    b7ec:	000176d0 	.word	0x000176d0
    b7f0:	0000a7c1 	.word	0x0000a7c1
    b7f4:	0000b84d 	.word	0x0000b84d
    b7f8:	0000a425 	.word	0x0000a425
    b7fc:	0000a591 	.word	0x0000a591
    b800:	0000ba8d 	.word	0x0000ba8d
    b804:	0000ad8d 	.word	0x0000ad8d
    b808:	0000d1d1 	.word	0x0000d1d1
    b80c:	0000baed 	.word	0x0000baed

0000b810 <MiMem_Init>:
* Output:		    none
*
* Overview:		    This function will initialize the Mimem buffers
********************************************************************/
void MiMem_Init(void)
{
    b810:	b510      	push	{r4, lr}
	size_t startAddress =  ALIGN((size_t)heapMem);
    b812:	4a0b      	ldr	r2, [pc, #44]	; (b840 <MiMem_Init+0x30>)
    b814:	1e50      	subs	r0, r2, #1
    b816:	2403      	movs	r4, #3
    b818:	43a0      	bics	r0, r4
    b81a:	1d01      	adds	r1, r0, #4

	/*Aligned heap is the base */
	base = (Block_t*) startAddress;
    b81c:	4b09      	ldr	r3, [pc, #36]	; (b844 <MiMem_Init+0x34>)
    b81e:	6019      	str	r1, [r3, #0]
	base->size = totalFreeBytesRemaining = HEAP_SIZE - (startAddress - (size_t)heapMem);
    b820:	4253      	negs	r3, r2
    b822:	43a3      	bics	r3, r4
    b824:	24c0      	movs	r4, #192	; 0xc0
    b826:	0164      	lsls	r4, r4, #5
    b828:	46a4      	mov	ip, r4
    b82a:	4462      	add	r2, ip
    b82c:	189b      	adds	r3, r3, r2
    b82e:	4a06      	ldr	r2, [pc, #24]	; (b848 <MiMem_Init+0x38>)
    b830:	6013      	str	r3, [r2, #0]
    b832:	60c3      	str	r3, [r0, #12]
	base->free = true;
    b834:	2301      	movs	r3, #1
    b836:	7403      	strb	r3, [r0, #16]
	base->next = NULL;
    b838:	2300      	movs	r3, #0
    b83a:	6043      	str	r3, [r0, #4]
	base->prev = NULL;
    b83c:	6083      	str	r3, [r0, #8]
}
    b83e:	bd10      	pop	{r4, pc}
    b840:	20000294 	.word	0x20000294
    b844:	20000290 	.word	0x20000290
    b848:	20001a94 	.word	0x20001a94

0000b84c <MiMem_Alloc>:
*  or returns NULL if no memory available
*
* Note:			    none
********************************************************************/
void* MiMem_Alloc(uint8_t size)
{
    b84c:	b570      	push	{r4, r5, r6, lr}
    b84e:	0005      	movs	r5, r0
	size_t requestedSize = 0U;
	void* requestedMemPtr = NULL;

	/* Initialize the Heap */
	if (!base)
    b850:	4b29      	ldr	r3, [pc, #164]	; (b8f8 <MiMem_Alloc+0xac>)
    b852:	681b      	ldr	r3, [r3, #0]
    b854:	2b00      	cmp	r3, #0
    b856:	d012      	beq.n	b87e <MiMem_Alloc+0x32>
	{
		MiMem_Init();
	}
	/* if requested size is of non zero */
	if (size)
    b858:	2d00      	cmp	r5, #0
    b85a:	d047      	beq.n	b8ec <MiMem_Alloc+0xa0>
	{
		requestedSize =  size + blockMetaDataSize;
		requestedSize = ALIGN(requestedSize);
    b85c:	0029      	movs	r1, r5
    b85e:	310f      	adds	r1, #15
    b860:	2303      	movs	r3, #3
    b862:	4399      	bics	r1, r3
    b864:	3104      	adds	r1, #4
		if (requestedSize <= totalFreeBytesRemaining)
    b866:	4b25      	ldr	r3, [pc, #148]	; (b8fc <MiMem_Alloc+0xb0>)
    b868:	6818      	ldr	r0, [r3, #0]
    b86a:	4281      	cmp	r1, r0
    b86c:	d840      	bhi.n	b8f0 <MiMem_Alloc+0xa4>
		{
			size_t receivedSize = (size_t)~0U;
			Block_t *requestedBlock = NULL;
			Block_t *blockPtr = base;
    b86e:	4b22      	ldr	r3, [pc, #136]	; (b8f8 <MiMem_Alloc+0xac>)
    b870:	681b      	ldr	r3, [r3, #0]

			/* Find best fit free Block */
			while (blockPtr)
    b872:	2b00      	cmp	r3, #0
    b874:	d03e      	beq.n	b8f4 <MiMem_Alloc+0xa8>
    b876:	2600      	movs	r6, #0
    b878:	2401      	movs	r4, #1
    b87a:	4264      	negs	r4, r4
    b87c:	e005      	b.n	b88a <MiMem_Alloc+0x3e>
		MiMem_Init();
    b87e:	4b20      	ldr	r3, [pc, #128]	; (b900 <MiMem_Alloc+0xb4>)
    b880:	4798      	blx	r3
    b882:	e7e9      	b.n	b858 <MiMem_Alloc+0xc>
				if ((blockPtr->free) && (blockPtr->size >= requestedSize) && (blockPtr->size < receivedSize))
				{
					receivedSize = blockPtr->size;
					requestedBlock = blockPtr;
				}
				blockPtr = blockPtr->next;
    b884:	681b      	ldr	r3, [r3, #0]
			while (blockPtr)
    b886:	2b00      	cmp	r3, #0
    b888:	d00a      	beq.n	b8a0 <MiMem_Alloc+0x54>
				if ((blockPtr->free) && (blockPtr->size >= requestedSize) && (blockPtr->size < receivedSize))
    b88a:	7b1a      	ldrb	r2, [r3, #12]
    b88c:	2a00      	cmp	r2, #0
    b88e:	d0f9      	beq.n	b884 <MiMem_Alloc+0x38>
    b890:	689a      	ldr	r2, [r3, #8]
    b892:	4291      	cmp	r1, r2
    b894:	d8f6      	bhi.n	b884 <MiMem_Alloc+0x38>
    b896:	42a2      	cmp	r2, r4
    b898:	d2f4      	bcs.n	b884 <MiMem_Alloc+0x38>
    b89a:	001e      	movs	r6, r3
					receivedSize = blockPtr->size;
    b89c:	0014      	movs	r4, r2
    b89e:	e7f1      	b.n	b884 <MiMem_Alloc+0x38>
    b8a0:	2400      	movs	r4, #0
			}

			if (requestedBlock)
    b8a2:	2e00      	cmp	r6, #0
    b8a4:	d012      	beq.n	b8cc <MiMem_Alloc+0x80>
			{
				if ((requestedBlock->size - requestedSize) > HEAP_MINIMUM_BLOCK_SIZE)
    b8a6:	68b3      	ldr	r3, [r6, #8]
    b8a8:	1a5b      	subs	r3, r3, r1
    b8aa:	2b14      	cmp	r3, #20
    b8ac:	d810      	bhi.n	b8d0 <MiMem_Alloc+0x84>
				splitBlock (requestedBlock, requestedSize);
				requestedBlock->free = false;
    b8ae:	2300      	movs	r3, #0
    b8b0:	7333      	strb	r3, [r6, #12]
				totalFreeBytesRemaining -= requestedBlock->size;
    b8b2:	68b3      	ldr	r3, [r6, #8]
    b8b4:	1ac0      	subs	r0, r0, r3
    b8b6:	4b11      	ldr	r3, [pc, #68]	; (b8fc <MiMem_Alloc+0xb0>)
    b8b8:	6018      	str	r0, [r3, #0]
				requestedMemPtr = ( void* )(((uint8_t*)requestedBlock) + blockMetaDataSize);
    b8ba:	0034      	movs	r4, r6
    b8bc:	3410      	adds	r4, #16
			}
		}
	}
	if (NULL != requestedMemPtr)
    b8be:	2c00      	cmp	r4, #0
    b8c0:	d004      	beq.n	b8cc <MiMem_Alloc+0x80>
	{
		memset(requestedMemPtr, 0, size);
    b8c2:	002a      	movs	r2, r5
    b8c4:	2100      	movs	r1, #0
    b8c6:	0020      	movs	r0, r4
    b8c8:	4b0e      	ldr	r3, [pc, #56]	; (b904 <MiMem_Alloc+0xb8>)
    b8ca:	4798      	blx	r3
	}
	return requestedMemPtr;
}
    b8cc:	0020      	movs	r0, r4
    b8ce:	bd70      	pop	{r4, r5, r6, pc}
  \param[in] size size of the memory chunk requested
  \return None.
 ******************************************************************************/
static void splitBlock(Block_t* blockTobeSplitted, size_t size)
{
	uint8_t* ptr = (uint8_t*)blockTobeSplitted + size;
    b8d0:	1872      	adds	r2, r6, r1
	Block_t* newBlock = (Block_t*)ptr;

	newBlock->size = blockTobeSplitted->size - size;
    b8d2:	6093      	str	r3, [r2, #8]

	if (blockTobeSplitted->next)
    b8d4:	6833      	ldr	r3, [r6, #0]
    b8d6:	2b00      	cmp	r3, #0
    b8d8:	d000      	beq.n	b8dc <MiMem_Alloc+0x90>
		blockTobeSplitted->next->prev = newBlock;
    b8da:	605a      	str	r2, [r3, #4]

	newBlock->next = blockTobeSplitted->next;
    b8dc:	6833      	ldr	r3, [r6, #0]
    b8de:	6013      	str	r3, [r2, #0]
	newBlock->prev = blockTobeSplitted;
    b8e0:	6056      	str	r6, [r2, #4]
	newBlock->free = true;
    b8e2:	2301      	movs	r3, #1
    b8e4:	7313      	strb	r3, [r2, #12]

	blockTobeSplitted->next = newBlock;
    b8e6:	6032      	str	r2, [r6, #0]
	blockTobeSplitted->size = size;
    b8e8:	60b1      	str	r1, [r6, #8]
    b8ea:	e7e0      	b.n	b8ae <MiMem_Alloc+0x62>
    b8ec:	2400      	movs	r4, #0
    b8ee:	e7ed      	b.n	b8cc <MiMem_Alloc+0x80>
    b8f0:	2400      	movs	r4, #0
    b8f2:	e7eb      	b.n	b8cc <MiMem_Alloc+0x80>
			while (blockPtr)
    b8f4:	2400      	movs	r4, #0
    b8f6:	e7e9      	b.n	b8cc <MiMem_Alloc+0x80>
    b8f8:	20000290 	.word	0x20000290
    b8fc:	20001a94 	.word	0x20001a94
    b900:	0000b811 	.word	0x0000b811
    b904:	000161c9 	.word	0x000161c9

0000b908 <MiMem_Free>:
	Block_t* blockPtr = base;
    b908:	4b1c      	ldr	r3, [pc, #112]	; (b97c <MiMem_Free+0x74>)
    b90a:	681b      	ldr	r3, [r3, #0]
	Block_t* freeBlockPtr = (Block_t*)((uint8_t*)ptr - (uint8_t*)blockMetaDataSize);
    b90c:	3810      	subs	r0, #16
	for(; ((blockPtr != NULL) && (blockPtr != freeBlockPtr)); blockPtr = blockPtr->next);
    b90e:	2b00      	cmp	r3, #0
    b910:	d030      	beq.n	b974 <MiMem_Free+0x6c>
    b912:	4283      	cmp	r3, r0
    b914:	d02f      	beq.n	b976 <MiMem_Free+0x6e>
    b916:	681b      	ldr	r3, [r3, #0]
    b918:	2b00      	cmp	r3, #0
    b91a:	d02b      	beq.n	b974 <MiMem_Free+0x6c>
    b91c:	4298      	cmp	r0, r3
    b91e:	d1fa      	bne.n	b916 <MiMem_Free+0xe>
		blockPtr->free = true;
    b920:	2301      	movs	r3, #1
    b922:	7303      	strb	r3, [r0, #12]
		totalFreeBytesRemaining += blockPtr->size;
    b924:	6881      	ldr	r1, [r0, #8]
    b926:	4a16      	ldr	r2, [pc, #88]	; (b980 <MiMem_Free+0x78>)
    b928:	6813      	ldr	r3, [r2, #0]
    b92a:	185b      	adds	r3, r3, r1
    b92c:	6013      	str	r3, [r2, #0]
		if (blockPtr->prev && blockPtr->prev->free)
    b92e:	6843      	ldr	r3, [r0, #4]
    b930:	2b00      	cmp	r3, #0
    b932:	d00f      	beq.n	b954 <MiMem_Free+0x4c>
    b934:	7b1a      	ldrb	r2, [r3, #12]
    b936:	2a00      	cmp	r2, #0
    b938:	d00c      	beq.n	b954 <MiMem_Free+0x4c>
			blockPtr->prev->size += blockPtr->size;
    b93a:	689a      	ldr	r2, [r3, #8]
    b93c:	4694      	mov	ip, r2
    b93e:	4461      	add	r1, ip
    b940:	6099      	str	r1, [r3, #8]
			if (blockPtr->next)
    b942:	6803      	ldr	r3, [r0, #0]
    b944:	2b00      	cmp	r3, #0
    b946:	d001      	beq.n	b94c <MiMem_Free+0x44>
			blockPtr->next->prev = blockPtr->prev;
    b948:	6842      	ldr	r2, [r0, #4]
    b94a:	605a      	str	r2, [r3, #4]
			blockPtr->prev->next = blockPtr->next;
    b94c:	6843      	ldr	r3, [r0, #4]
    b94e:	6802      	ldr	r2, [r0, #0]
    b950:	601a      	str	r2, [r3, #0]
			blockPtr = blockPtr->prev;
    b952:	6840      	ldr	r0, [r0, #4]
		if (blockPtr->next && blockPtr->next->free)
    b954:	6803      	ldr	r3, [r0, #0]
    b956:	2b00      	cmp	r3, #0
    b958:	d00c      	beq.n	b974 <MiMem_Free+0x6c>
    b95a:	7b1a      	ldrb	r2, [r3, #12]
    b95c:	2a00      	cmp	r2, #0
    b95e:	d009      	beq.n	b974 <MiMem_Free+0x6c>
			blockPtr->size += blockPtr->next->size ;
    b960:	6882      	ldr	r2, [r0, #8]
    b962:	6899      	ldr	r1, [r3, #8]
    b964:	468c      	mov	ip, r1
    b966:	4462      	add	r2, ip
    b968:	6082      	str	r2, [r0, #8]
			blockPtr->next = blockPtr->next->next;
    b96a:	681b      	ldr	r3, [r3, #0]
    b96c:	6003      	str	r3, [r0, #0]
			if (blockPtr->next)
    b96e:	2b00      	cmp	r3, #0
    b970:	d000      	beq.n	b974 <MiMem_Free+0x6c>
			blockPtr->next->prev = blockPtr;
    b972:	6058      	str	r0, [r3, #4]
}
    b974:	4770      	bx	lr
	Block_t* blockPtr = base;
    b976:	0018      	movs	r0, r3
    b978:	e7d2      	b.n	b920 <MiMem_Free+0x18>
    b97a:	46c0      	nop			; (mov r8, r8)
    b97c:	20000290 	.word	0x20000290
    b980:	20001a94 	.word	0x20001a94

0000b984 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    b984:	b530      	push	{r4, r5, lr}
	if (timers) {
    b986:	4b14      	ldr	r3, [pc, #80]	; (b9d8 <placeTimer+0x54>)
    b988:	681d      	ldr	r5, [r3, #0]
    b98a:	2d00      	cmp	r5, #0
    b98c:	d01c      	beq.n	b9c8 <placeTimer+0x44>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    b98e:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    b990:	6869      	ldr	r1, [r5, #4]
    b992:	428a      	cmp	r2, r1
    b994:	d309      	bcc.n	b9aa <placeTimer+0x26>
    b996:	002c      	movs	r4, r5
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    b998:	1a52      	subs	r2, r2, r1
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    b99a:	6823      	ldr	r3, [r4, #0]
    b99c:	2b00      	cmp	r3, #0
    b99e:	d008      	beq.n	b9b2 <placeTimer+0x2e>
			if (timeout < t->timeout) {
    b9a0:	6859      	ldr	r1, [r3, #4]
    b9a2:	4291      	cmp	r1, r2
    b9a4:	d803      	bhi.n	b9ae <placeTimer+0x2a>
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    b9a6:	001c      	movs	r4, r3
    b9a8:	e7f6      	b.n	b998 <placeTimer+0x14>
    b9aa:	002b      	movs	r3, r5
		SYS_Timer_t *prev = NULL;
    b9ac:	2400      	movs	r4, #0
				t->timeout -= timeout;
    b9ae:	1a89      	subs	r1, r1, r2
    b9b0:	6059      	str	r1, [r3, #4]
			}

			prev = t;
		}

		timer->timeout = timeout;
    b9b2:	6042      	str	r2, [r0, #4]

		if (prev) {
    b9b4:	2c00      	cmp	r4, #0
    b9b6:	d003      	beq.n	b9c0 <placeTimer+0x3c>
			timer->next = prev->next;
    b9b8:	6823      	ldr	r3, [r4, #0]
    b9ba:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    b9bc:	6020      	str	r0, [r4, #0]
	} else {
		timer->next = NULL;
		timer->timeout = timer->interval;
		timers = timer;
	}
}
    b9be:	bd30      	pop	{r4, r5, pc}
			timer->next = timers;
    b9c0:	6005      	str	r5, [r0, #0]
			timers = timer;
    b9c2:	4b05      	ldr	r3, [pc, #20]	; (b9d8 <placeTimer+0x54>)
    b9c4:	6018      	str	r0, [r3, #0]
    b9c6:	e7fa      	b.n	b9be <placeTimer+0x3a>
		timer->next = NULL;
    b9c8:	2300      	movs	r3, #0
    b9ca:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    b9cc:	6883      	ldr	r3, [r0, #8]
    b9ce:	6043      	str	r3, [r0, #4]
		timers = timer;
    b9d0:	4b01      	ldr	r3, [pc, #4]	; (b9d8 <placeTimer+0x54>)
    b9d2:	6018      	str	r0, [r3, #0]
}
    b9d4:	e7f3      	b.n	b9be <placeTimer+0x3a>
    b9d6:	46c0      	nop			; (mov r8, r8)
    b9d8:	20001a98 	.word	0x20001a98

0000b9dc <SYS_HwOverflow_Cb>:
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
}

void SYS_HwOverflow_Cb(void)
{
	timerExtension1++;
    b9dc:	4a06      	ldr	r2, [pc, #24]	; (b9f8 <SYS_HwOverflow_Cb+0x1c>)
    b9de:	7813      	ldrb	r3, [r2, #0]
    b9e0:	3301      	adds	r3, #1
    b9e2:	b2db      	uxtb	r3, r3
    b9e4:	7013      	strb	r3, [r2, #0]
	if(timerExtension1 == 0)
    b9e6:	7813      	ldrb	r3, [r2, #0]
    b9e8:	2b00      	cmp	r3, #0
    b9ea:	d104      	bne.n	b9f6 <SYS_HwOverflow_Cb+0x1a>
	{
		timerExtension2++;
    b9ec:	4a03      	ldr	r2, [pc, #12]	; (b9fc <SYS_HwOverflow_Cb+0x20>)
    b9ee:	7813      	ldrb	r3, [r2, #0]
    b9f0:	3301      	adds	r3, #1
    b9f2:	b2db      	uxtb	r3, r3
    b9f4:	7013      	strb	r3, [r2, #0]
	}
}
    b9f6:	4770      	bx	lr
    b9f8:	20002968 	.word	0x20002968
    b9fc:	20002969 	.word	0x20002969

0000ba00 <SYS_TimerStop>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    ba00:	4b0e      	ldr	r3, [pc, #56]	; (ba3c <SYS_TimerStop+0x3c>)
    ba02:	681a      	ldr	r2, [r3, #0]
    ba04:	2a00      	cmp	r2, #0
    ba06:	d014      	beq.n	ba32 <SYS_TimerStop+0x32>
		if (t == timer) {
    ba08:	4282      	cmp	r2, r0
    ba0a:	d013      	beq.n	ba34 <SYS_TimerStop+0x34>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    ba0c:	6813      	ldr	r3, [r2, #0]
    ba0e:	2b00      	cmp	r3, #0
    ba10:	d00f      	beq.n	ba32 <SYS_TimerStop+0x32>
		if (t == timer) {
    ba12:	4298      	cmp	r0, r3
    ba14:	d001      	beq.n	ba1a <SYS_TimerStop+0x1a>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    ba16:	001a      	movs	r2, r3
    ba18:	e7f8      	b.n	ba0c <SYS_TimerStop+0xc>
			if (prev) {
    ba1a:	2a00      	cmp	r2, #0
    ba1c:	d00a      	beq.n	ba34 <SYS_TimerStop+0x34>
				prev->next = t->next;
    ba1e:	6803      	ldr	r3, [r0, #0]
    ba20:	6013      	str	r3, [r2, #0]
			if (t->next) {
    ba22:	6803      	ldr	r3, [r0, #0]
    ba24:	2b00      	cmp	r3, #0
    ba26:	d004      	beq.n	ba32 <SYS_TimerStop+0x32>
				t->next->timeout += timer->timeout;
    ba28:	6842      	ldr	r2, [r0, #4]
    ba2a:	6859      	ldr	r1, [r3, #4]
    ba2c:	468c      	mov	ip, r1
    ba2e:	4462      	add	r2, ip
    ba30:	605a      	str	r2, [r3, #4]
}
    ba32:	4770      	bx	lr
				timers = t->next;
    ba34:	4b01      	ldr	r3, [pc, #4]	; (ba3c <SYS_TimerStop+0x3c>)
    ba36:	6802      	ldr	r2, [r0, #0]
    ba38:	601a      	str	r2, [r3, #0]
    ba3a:	e7f2      	b.n	ba22 <SYS_TimerStop+0x22>
    ba3c:	20001a98 	.word	0x20001a98

0000ba40 <SYS_TimerStarted>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    ba40:	4b09      	ldr	r3, [pc, #36]	; (ba68 <SYS_TimerStarted+0x28>)
    ba42:	681b      	ldr	r3, [r3, #0]
    ba44:	2b00      	cmp	r3, #0
    ba46:	d00a      	beq.n	ba5e <SYS_TimerStarted+0x1e>
		if (t == timer) {
    ba48:	4283      	cmp	r3, r0
    ba4a:	d00a      	beq.n	ba62 <SYS_TimerStarted+0x22>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    ba4c:	681b      	ldr	r3, [r3, #0]
    ba4e:	2b00      	cmp	r3, #0
    ba50:	d003      	beq.n	ba5a <SYS_TimerStarted+0x1a>
		if (t == timer) {
    ba52:	4298      	cmp	r0, r3
    ba54:	d1fa      	bne.n	ba4c <SYS_TimerStarted+0xc>
			return true;
    ba56:	2001      	movs	r0, #1
    ba58:	e000      	b.n	ba5c <SYS_TimerStarted+0x1c>
	return false;
    ba5a:	2000      	movs	r0, #0
}
    ba5c:	4770      	bx	lr
	return false;
    ba5e:	2000      	movs	r0, #0
    ba60:	e7fc      	b.n	ba5c <SYS_TimerStarted+0x1c>
			return true;
    ba62:	2001      	movs	r0, #1
    ba64:	e7fa      	b.n	ba5c <SYS_TimerStarted+0x1c>
    ba66:	46c0      	nop			; (mov r8, r8)
    ba68:	20001a98 	.word	0x20001a98

0000ba6c <SYS_TimerStart>:
{
    ba6c:	b510      	push	{r4, lr}
    ba6e:	0004      	movs	r4, r0
	if (!SYS_TimerStarted(timer)) {
    ba70:	4b04      	ldr	r3, [pc, #16]	; (ba84 <SYS_TimerStart+0x18>)
    ba72:	4798      	blx	r3
    ba74:	2800      	cmp	r0, #0
    ba76:	d000      	beq.n	ba7a <SYS_TimerStart+0xe>
}
    ba78:	bd10      	pop	{r4, pc}
		placeTimer(timer);
    ba7a:	0020      	movs	r0, r4
    ba7c:	4b02      	ldr	r3, [pc, #8]	; (ba88 <SYS_TimerStart+0x1c>)
    ba7e:	4798      	blx	r3
}
    ba80:	e7fa      	b.n	ba78 <SYS_TimerStart+0xc>
    ba82:	46c0      	nop			; (mov r8, r8)
    ba84:	0000ba41 	.word	0x0000ba41
    ba88:	0000b985 	.word	0x0000b985

0000ba8c <MiWi_TickGet>:
{
    ba8c:	b570      	push	{r4, r5, r6, lr}
	uint8_t current_timerExtension1 = timerExtension1;
    ba8e:	4e11      	ldr	r6, [pc, #68]	; (bad4 <MiWi_TickGet+0x48>)
    ba90:	7835      	ldrb	r5, [r6, #0]
    ba92:	b2ed      	uxtb	r5, r5
	tmr_disable_ovf_interrupt();
    ba94:	4b10      	ldr	r3, [pc, #64]	; (bad8 <MiWi_TickGet+0x4c>)
    ba96:	4798      	blx	r3
	currentTime.word.w0 = common_tc_read_count();
    ba98:	4b10      	ldr	r3, [pc, #64]	; (badc <MiWi_TickGet+0x50>)
    ba9a:	4798      	blx	r3
    ba9c:	0004      	movs	r4, r0
	tmr_enable_ovf_interrupt();
    ba9e:	4b10      	ldr	r3, [pc, #64]	; (bae0 <MiWi_TickGet+0x54>)
    baa0:	4798      	blx	r3
  __ASM volatile ("nop");
    baa2:	46c0      	nop			; (mov r8, r8)
	if (current_timerExtension1 != timerExtension1)
    baa4:	7833      	ldrb	r3, [r6, #0]
    baa6:	b2db      	uxtb	r3, r3
    baa8:	429d      	cmp	r5, r3
    baaa:	d004      	beq.n	bab6 <MiWi_TickGet+0x2a>
		currentTime.word.w0 = common_tc_read_count();
    baac:	4b0b      	ldr	r3, [pc, #44]	; (badc <MiWi_TickGet+0x50>)
    baae:	4798      	blx	r3
    bab0:	0c24      	lsrs	r4, r4, #16
    bab2:	0424      	lsls	r4, r4, #16
    bab4:	4304      	orrs	r4, r0
    currentTime.byte.b2 = timerExtension1;
    bab6:	4b07      	ldr	r3, [pc, #28]	; (bad4 <MiWi_TickGet+0x48>)
    bab8:	781b      	ldrb	r3, [r3, #0]
    baba:	041b      	lsls	r3, r3, #16
    babc:	4809      	ldr	r0, [pc, #36]	; (bae4 <MiWi_TickGet+0x58>)
    babe:	4004      	ands	r4, r0
    bac0:	431c      	orrs	r4, r3
    currentTime.byte.b3 = timerExtension2;
    bac2:	4b09      	ldr	r3, [pc, #36]	; (bae8 <MiWi_TickGet+0x5c>)
    bac4:	781b      	ldrb	r3, [r3, #0]
    bac6:	061b      	lsls	r3, r3, #24
    bac8:	0224      	lsls	r4, r4, #8
    baca:	0a24      	lsrs	r4, r4, #8
    bacc:	431c      	orrs	r4, r3
}
    bace:	0020      	movs	r0, r4
    bad0:	bd70      	pop	{r4, r5, r6, pc}
    bad2:	46c0      	nop			; (mov r8, r8)
    bad4:	20002968 	.word	0x20002968
    bad8:	0000d515 	.word	0x0000d515
    badc:	00012d9d 	.word	0x00012d9d
    bae0:	0000d529 	.word	0x0000d529
    bae4:	ff00ffff 	.word	0xff00ffff
    bae8:	20002969 	.word	0x20002969

0000baec <MiWi_TickGetDiff>:
	if (current_tick.Val > previous_tick.Val)
    baec:	4288      	cmp	r0, r1
    baee:	d802      	bhi.n	baf6 <MiWi_TickGetDiff+0xa>
		ret_val = (0xFFFFFFFF - previous_tick.Val) + current_tick.Val;
    baf0:	3801      	subs	r0, #1
    baf2:	1a40      	subs	r0, r0, r1
}
    baf4:	4770      	bx	lr
		ret_val = current_tick.Val - previous_tick.Val;
    baf6:	1a40      	subs	r0, r0, r1
    baf8:	e7fc      	b.n	baf4 <MiWi_TickGetDiff+0x8>
    bafa:	Address 0x0000bafa is out of bounds.


0000bafc <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    bafc:	b570      	push	{r4, r5, r6, lr}
    bafe:	b082      	sub	sp, #8
    bb00:	0005      	movs	r5, r0
    bb02:	000e      	movs	r6, r1
	uint16_t temp = 0;
    bb04:	2200      	movs	r2, #0
    bb06:	466b      	mov	r3, sp
    bb08:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    bb0a:	4c06      	ldr	r4, [pc, #24]	; (bb24 <usart_serial_getchar+0x28>)
    bb0c:	466b      	mov	r3, sp
    bb0e:	1d99      	adds	r1, r3, #6
    bb10:	0028      	movs	r0, r5
    bb12:	47a0      	blx	r4
    bb14:	2800      	cmp	r0, #0
    bb16:	d1f9      	bne.n	bb0c <usart_serial_getchar+0x10>

	*c = temp;
    bb18:	466b      	mov	r3, sp
    bb1a:	3306      	adds	r3, #6
    bb1c:	881b      	ldrh	r3, [r3, #0]
    bb1e:	7033      	strb	r3, [r6, #0]
}
    bb20:	b002      	add	sp, #8
    bb22:	bd70      	pop	{r4, r5, r6, pc}
    bb24:	00005f55 	.word	0x00005f55

0000bb28 <usart_serial_putchar>:
{
    bb28:	b570      	push	{r4, r5, r6, lr}
    bb2a:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    bb2c:	b28c      	uxth	r4, r1
    bb2e:	4e03      	ldr	r6, [pc, #12]	; (bb3c <usart_serial_putchar+0x14>)
    bb30:	0021      	movs	r1, r4
    bb32:	0028      	movs	r0, r5
    bb34:	47b0      	blx	r6
    bb36:	2800      	cmp	r0, #0
    bb38:	d1fa      	bne.n	bb30 <usart_serial_putchar+0x8>
}
    bb3a:	bd70      	pop	{r4, r5, r6, pc}
    bb3c:	00005f29 	.word	0x00005f29

0000bb40 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35 || WLR089
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    bb40:	b510      	push	{r4, lr}
    bb42:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    bb44:	466b      	mov	r3, sp
    bb46:	1ddc      	adds	r4, r3, #7
    bb48:	2201      	movs	r2, #1
    bb4a:	0021      	movs	r1, r4
    bb4c:	480f      	ldr	r0, [pc, #60]	; (bb8c <USART_HOST_ISR_VECT+0x4c>)
    bb4e:	4b10      	ldr	r3, [pc, #64]	; (bb90 <USART_HOST_ISR_VECT+0x50>)
    bb50:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    bb52:	b672      	cpsid	i
  __ASM volatile ("dmb");
    bb54:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    bb58:	2200      	movs	r2, #0
    bb5a:	4b0e      	ldr	r3, [pc, #56]	; (bb94 <USART_HOST_ISR_VECT+0x54>)
    bb5c:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    bb5e:	4b0e      	ldr	r3, [pc, #56]	; (bb98 <USART_HOST_ISR_VECT+0x58>)
    bb60:	781b      	ldrb	r3, [r3, #0]
    bb62:	7821      	ldrb	r1, [r4, #0]
    bb64:	4a0d      	ldr	r2, [pc, #52]	; (bb9c <USART_HOST_ISR_VECT+0x5c>)
    bb66:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    bb68:	2b7f      	cmp	r3, #127	; 0x7f
    bb6a:	d00a      	beq.n	bb82 <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    bb6c:	3301      	adds	r3, #1
    bb6e:	4a0a      	ldr	r2, [pc, #40]	; (bb98 <USART_HOST_ISR_VECT+0x58>)
    bb70:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    bb72:	2201      	movs	r2, #1
    bb74:	4b07      	ldr	r3, [pc, #28]	; (bb94 <USART_HOST_ISR_VECT+0x54>)
    bb76:	701a      	strb	r2, [r3, #0]
    bb78:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    bb7c:	b662      	cpsie	i
}
    bb7e:	b002      	add	sp, #8
    bb80:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
    bb82:	2200      	movs	r2, #0
    bb84:	4b04      	ldr	r3, [pc, #16]	; (bb98 <USART_HOST_ISR_VECT+0x58>)
    bb86:	701a      	strb	r2, [r3, #0]
    bb88:	e7f3      	b.n	bb72 <USART_HOST_ISR_VECT+0x32>
    bb8a:	46c0      	nop			; (mov r8, r8)
    bb8c:	20001a9c 	.word	0x20001a9c
    bb90:	00006085 	.word	0x00006085
    bb94:	20000008 	.word	0x20000008
    bb98:	20001b50 	.word	0x20001b50
    bb9c:	20001ad0 	.word	0x20001ad0

0000bba0 <sio2host_init>:
{
    bba0:	b5f0      	push	{r4, r5, r6, r7, lr}
    bba2:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    bba4:	2380      	movs	r3, #128	; 0x80
    bba6:	05db      	lsls	r3, r3, #23
    bba8:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    bbaa:	2300      	movs	r3, #0
    bbac:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    bbae:	22ff      	movs	r2, #255	; 0xff
    bbb0:	4669      	mov	r1, sp
    bbb2:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    bbb4:	2200      	movs	r2, #0
    bbb6:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    bbb8:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    bbba:	2401      	movs	r4, #1
    bbbc:	2124      	movs	r1, #36	; 0x24
    bbbe:	4668      	mov	r0, sp
    bbc0:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    bbc2:	3101      	adds	r1, #1
    bbc4:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    bbc6:	3101      	adds	r1, #1
    bbc8:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    bbca:	3101      	adds	r1, #1
    bbcc:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    bbce:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    bbd0:	3105      	adds	r1, #5
    bbd2:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    bbd4:	3101      	adds	r1, #1
    bbd6:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    bbd8:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    bbda:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    bbdc:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    bbde:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    bbe0:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    bbe2:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    bbe4:	2313      	movs	r3, #19
    bbe6:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    bbe8:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    bbea:	2380      	movs	r3, #128	; 0x80
    bbec:	035b      	lsls	r3, r3, #13
    bbee:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    bbf0:	4b2f      	ldr	r3, [pc, #188]	; (bcb0 <sio2host_init+0x110>)
    bbf2:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    bbf4:	4b2f      	ldr	r3, [pc, #188]	; (bcb4 <sio2host_init+0x114>)
    bbf6:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    bbf8:	2301      	movs	r3, #1
    bbfa:	425b      	negs	r3, r3
    bbfc:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    bbfe:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    bc00:	23e1      	movs	r3, #225	; 0xe1
    bc02:	025b      	lsls	r3, r3, #9
    bc04:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    bc06:	4d2c      	ldr	r5, [pc, #176]	; (bcb8 <sio2host_init+0x118>)
    bc08:	4b2c      	ldr	r3, [pc, #176]	; (bcbc <sio2host_init+0x11c>)
    bc0a:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    bc0c:	4a2c      	ldr	r2, [pc, #176]	; (bcc0 <sio2host_init+0x120>)
    bc0e:	4b2d      	ldr	r3, [pc, #180]	; (bcc4 <sio2host_init+0x124>)
    bc10:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    bc12:	4a2d      	ldr	r2, [pc, #180]	; (bcc8 <sio2host_init+0x128>)
    bc14:	4b2d      	ldr	r3, [pc, #180]	; (bccc <sio2host_init+0x12c>)
    bc16:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    bc18:	466a      	mov	r2, sp
    bc1a:	2184      	movs	r1, #132	; 0x84
    bc1c:	05c9      	lsls	r1, r1, #23
    bc1e:	0028      	movs	r0, r5
    bc20:	4b2b      	ldr	r3, [pc, #172]	; (bcd0 <sio2host_init+0x130>)
    bc22:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    bc24:	4f2b      	ldr	r7, [pc, #172]	; (bcd4 <sio2host_init+0x134>)
    bc26:	683b      	ldr	r3, [r7, #0]
    bc28:	6898      	ldr	r0, [r3, #8]
    bc2a:	2100      	movs	r1, #0
    bc2c:	4e2a      	ldr	r6, [pc, #168]	; (bcd8 <sio2host_init+0x138>)
    bc2e:	47b0      	blx	r6
	setbuf(stdin, NULL);
    bc30:	683b      	ldr	r3, [r7, #0]
    bc32:	6858      	ldr	r0, [r3, #4]
    bc34:	2100      	movs	r1, #0
    bc36:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    bc38:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    bc3a:	0030      	movs	r0, r6
    bc3c:	4b27      	ldr	r3, [pc, #156]	; (bcdc <sio2host_init+0x13c>)
    bc3e:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    bc40:	231f      	movs	r3, #31
    bc42:	4018      	ands	r0, r3
    bc44:	4084      	lsls	r4, r0
    bc46:	4b26      	ldr	r3, [pc, #152]	; (bce0 <sio2host_init+0x140>)
    bc48:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    bc4a:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    bc4c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    bc4e:	2b00      	cmp	r3, #0
    bc50:	d1fc      	bne.n	bc4c <sio2host_init+0xac>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    bc52:	6833      	ldr	r3, [r6, #0]
    bc54:	2202      	movs	r2, #2
    bc56:	4313      	orrs	r3, r2
    bc58:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    bc5a:	4b17      	ldr	r3, [pc, #92]	; (bcb8 <sio2host_init+0x118>)
    bc5c:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    bc5e:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    bc60:	2a00      	cmp	r2, #0
    bc62:	d1fc      	bne.n	bc5e <sio2host_init+0xbe>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    bc64:	6859      	ldr	r1, [r3, #4]
    bc66:	2280      	movs	r2, #128	; 0x80
    bc68:	0252      	lsls	r2, r2, #9
    bc6a:	430a      	orrs	r2, r1
    bc6c:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    bc6e:	2101      	movs	r1, #1
    bc70:	4a11      	ldr	r2, [pc, #68]	; (bcb8 <sio2host_init+0x118>)
    bc72:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    bc74:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    bc76:	2a00      	cmp	r2, #0
    bc78:	d1fc      	bne.n	bc74 <sio2host_init+0xd4>
	return (usart_hw->SYNCBUSY.reg);
    bc7a:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    bc7c:	2a00      	cmp	r2, #0
    bc7e:	d1fc      	bne.n	bc7a <sio2host_init+0xda>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    bc80:	6859      	ldr	r1, [r3, #4]
    bc82:	2280      	movs	r2, #128	; 0x80
    bc84:	0292      	lsls	r2, r2, #10
    bc86:	430a      	orrs	r2, r1
    bc88:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    bc8a:	2101      	movs	r1, #1
    bc8c:	4a0a      	ldr	r2, [pc, #40]	; (bcb8 <sio2host_init+0x118>)
    bc8e:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    bc90:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    bc92:	2a00      	cmp	r2, #0
    bc94:	d1fc      	bne.n	bc90 <sio2host_init+0xf0>
	USART_HOST_RX_ISR_ENABLE();
    bc96:	4913      	ldr	r1, [pc, #76]	; (bce4 <sio2host_init+0x144>)
    bc98:	2000      	movs	r0, #0
    bc9a:	4b13      	ldr	r3, [pc, #76]	; (bce8 <sio2host_init+0x148>)
    bc9c:	4798      	blx	r3
    bc9e:	2204      	movs	r2, #4
    bca0:	2384      	movs	r3, #132	; 0x84
    bca2:	05db      	lsls	r3, r3, #23
    bca4:	759a      	strb	r2, [r3, #22]
    bca6:	32fc      	adds	r2, #252	; 0xfc
    bca8:	4b0d      	ldr	r3, [pc, #52]	; (bce0 <sio2host_init+0x140>)
    bcaa:	601a      	str	r2, [r3, #0]
}
    bcac:	b011      	add	sp, #68	; 0x44
    bcae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bcb0:	00040003 	.word	0x00040003
    bcb4:	00050003 	.word	0x00050003
    bcb8:	20001a9c 	.word	0x20001a9c
    bcbc:	20001f48 	.word	0x20001f48
    bcc0:	0000bb29 	.word	0x0000bb29
    bcc4:	20001f44 	.word	0x20001f44
    bcc8:	0000bafd 	.word	0x0000bafd
    bccc:	20001f40 	.word	0x20001f40
    bcd0:	00005bbd 	.word	0x00005bbd
    bcd4:	20000020 	.word	0x20000020
    bcd8:	00016975 	.word	0x00016975
    bcdc:	000056ed 	.word	0x000056ed
    bce0:	e000e100 	.word	0xe000e100
    bce4:	0000bb41 	.word	0x0000bb41
    bce8:	000056b1 	.word	0x000056b1

0000bcec <sio2host_tx>:
{
    bcec:	b5f0      	push	{r4, r5, r6, r7, lr}
    bcee:	b083      	sub	sp, #12
    bcf0:	0006      	movs	r6, r0
    bcf2:	9101      	str	r1, [sp, #4]
	return usart_write_buffer_wait(module, tx_data, length);
    bcf4:	466b      	mov	r3, sp
    bcf6:	889d      	ldrh	r5, [r3, #4]
    bcf8:	4c05      	ldr	r4, [pc, #20]	; (bd10 <sio2host_tx+0x24>)
    bcfa:	4f06      	ldr	r7, [pc, #24]	; (bd14 <sio2host_tx+0x28>)
    bcfc:	002a      	movs	r2, r5
    bcfe:	0031      	movs	r1, r6
    bd00:	0020      	movs	r0, r4
    bd02:	47b8      	blx	r7
	} while (status != STATUS_OK);
    bd04:	2800      	cmp	r0, #0
    bd06:	d1f9      	bne.n	bcfc <sio2host_tx+0x10>
}
    bd08:	9801      	ldr	r0, [sp, #4]
    bd0a:	b003      	add	sp, #12
    bd0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bd0e:	46c0      	nop			; (mov r8, r8)
    bd10:	20001a9c 	.word	0x20001a9c
    bd14:	00005fc5 	.word	0x00005fc5

0000bd18 <sio2host_putchar>:
{
    bd18:	b500      	push	{lr}
    bd1a:	b083      	sub	sp, #12
    bd1c:	466b      	mov	r3, sp
    bd1e:	71d8      	strb	r0, [r3, #7]
    bd20:	3307      	adds	r3, #7
	sio2host_tx(&ch, 1);
    bd22:	2101      	movs	r1, #1
    bd24:	0018      	movs	r0, r3
    bd26:	4b02      	ldr	r3, [pc, #8]	; (bd30 <sio2host_putchar+0x18>)
    bd28:	4798      	blx	r3
}
    bd2a:	b003      	add	sp, #12
    bd2c:	bd00      	pop	{pc}
    bd2e:	46c0      	nop			; (mov r8, r8)
    bd30:	0000bced 	.word	0x0000bced

0000bd34 <HAL_SPISend>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    bd34:	4b13      	ldr	r3, [pc, #76]	; (bd84 <HAL_SPISend+0x50>)
    bd36:	681b      	ldr	r3, [r3, #0]
static uint8_t HAL_SPISend(uint8_t data)
{
	uint16_t read_val = 0;
	
	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master));
    bd38:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    bd3a:	7e1a      	ldrb	r2, [r3, #24]
    bd3c:	420a      	tst	r2, r1
    bd3e:	d0fc      	beq.n	bd3a <HAL_SPISend+0x6>
    bd40:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    bd42:	07d2      	lsls	r2, r2, #31
    bd44:	d500      	bpl.n	bd48 <HAL_SPISend+0x14>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    bd46:	6298      	str	r0, [r3, #40]	; 0x28
	spi_write(&master, data);
	while (!spi_is_write_complete(&master));
    bd48:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    bd4a:	7e1a      	ldrb	r2, [r3, #24]
    bd4c:	420a      	tst	r2, r1
    bd4e:	d0fc      	beq.n	bd4a <HAL_SPISend+0x16>
	
	while (!spi_is_ready_to_read(&master));
    bd50:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    bd52:	7e1a      	ldrb	r2, [r3, #24]
    bd54:	420a      	tst	r2, r1
    bd56:	d0fc      	beq.n	bd52 <HAL_SPISend+0x1e>
    bd58:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t read_val = 0;
    bd5a:	2000      	movs	r0, #0
	if (!spi_is_ready_to_read(module)) {
    bd5c:	0752      	lsls	r2, r2, #29
    bd5e:	d50a      	bpl.n	bd76 <HAL_SPISend+0x42>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    bd60:	8b5a      	ldrh	r2, [r3, #26]
    bd62:	0752      	lsls	r2, r2, #29
    bd64:	d501      	bpl.n	bd6a <HAL_SPISend+0x36>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    bd66:	2204      	movs	r2, #4
    bd68:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    bd6a:	4a06      	ldr	r2, [pc, #24]	; (bd84 <HAL_SPISend+0x50>)
    bd6c:	7992      	ldrb	r2, [r2, #6]
    bd6e:	2a01      	cmp	r2, #1
    bd70:	d003      	beq.n	bd7a <HAL_SPISend+0x46>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    bd72:	6a98      	ldr	r0, [r3, #40]	; 0x28
    bd74:	b2c0      	uxtb	r0, r0
	spi_read(&master, &read_val);
	
	return ((uint8_t)read_val);
    bd76:	b2c0      	uxtb	r0, r0
}
    bd78:	4770      	bx	lr
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    bd7a:	6a98      	ldr	r0, [r3, #40]	; 0x28
    bd7c:	05c0      	lsls	r0, r0, #23
    bd7e:	0dc0      	lsrs	r0, r0, #23
    bd80:	e7f9      	b.n	bd76 <HAL_SPISend+0x42>
    bd82:	46c0      	nop			; (mov r8, r8)
    bd84:	20001b60 	.word	0x20001b60

0000bd88 <HAL_ResetPinMakeOutput>:
{
    bd88:	b500      	push	{lr}
    bd8a:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    bd8c:	a901      	add	r1, sp, #4
    bd8e:	2301      	movs	r3, #1
    bd90:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    bd92:	2200      	movs	r2, #0
    bd94:	708a      	strb	r2, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    bd96:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    bd98:	202f      	movs	r0, #47	; 0x2f
    bd9a:	4b02      	ldr	r3, [pc, #8]	; (bda4 <HAL_ResetPinMakeOutput+0x1c>)
    bd9c:	4798      	blx	r3
}
    bd9e:	b003      	add	sp, #12
    bda0:	bd00      	pop	{pc}
    bda2:	46c0      	nop			; (mov r8, r8)
    bda4:	00004ba9 	.word	0x00004ba9

0000bda8 <HAL_RadioDIO2Callback>:
{
    bda8:	b510      	push	{r4, lr}
  if (interruptHandlerDio2)
    bdaa:	4b05      	ldr	r3, [pc, #20]	; (bdc0 <HAL_RadioDIO2Callback+0x18>)
    bdac:	681b      	ldr	r3, [r3, #0]
    bdae:	2b00      	cmp	r3, #0
    bdb0:	d004      	beq.n	bdbc <HAL_RadioDIO2Callback+0x14>
	PMM_Wakeup();
    bdb2:	4b04      	ldr	r3, [pc, #16]	; (bdc4 <HAL_RadioDIO2Callback+0x1c>)
    bdb4:	4798      	blx	r3
    interruptHandlerDio2();
    bdb6:	4b02      	ldr	r3, [pc, #8]	; (bdc0 <HAL_RadioDIO2Callback+0x18>)
    bdb8:	681b      	ldr	r3, [r3, #0]
    bdba:	4798      	blx	r3
}
    bdbc:	bd10      	pop	{r4, pc}
    bdbe:	46c0      	nop			; (mov r8, r8)
    bdc0:	20001b5c 	.word	0x20001b5c
    bdc4:	0000c209 	.word	0x0000c209

0000bdc8 <HAL_RadioDIO1Callback>:
{
    bdc8:	b510      	push	{r4, lr}
  if (interruptHandlerDio1)
    bdca:	4b05      	ldr	r3, [pc, #20]	; (bde0 <HAL_RadioDIO1Callback+0x18>)
    bdcc:	681b      	ldr	r3, [r3, #0]
    bdce:	2b00      	cmp	r3, #0
    bdd0:	d004      	beq.n	bddc <HAL_RadioDIO1Callback+0x14>
	PMM_Wakeup();
    bdd2:	4b04      	ldr	r3, [pc, #16]	; (bde4 <HAL_RadioDIO1Callback+0x1c>)
    bdd4:	4798      	blx	r3
    interruptHandlerDio1();
    bdd6:	4b02      	ldr	r3, [pc, #8]	; (bde0 <HAL_RadioDIO1Callback+0x18>)
    bdd8:	681b      	ldr	r3, [r3, #0]
    bdda:	4798      	blx	r3
}
    bddc:	bd10      	pop	{r4, pc}
    bdde:	46c0      	nop			; (mov r8, r8)
    bde0:	20001b58 	.word	0x20001b58
    bde4:	0000c209 	.word	0x0000c209

0000bde8 <HAL_RadioDIO0Callback>:
{
    bde8:	b510      	push	{r4, lr}
  if (interruptHandlerDio0)
    bdea:	4b05      	ldr	r3, [pc, #20]	; (be00 <HAL_RadioDIO0Callback+0x18>)
    bdec:	681b      	ldr	r3, [r3, #0]
    bdee:	2b00      	cmp	r3, #0
    bdf0:	d004      	beq.n	bdfc <HAL_RadioDIO0Callback+0x14>
	PMM_Wakeup();
    bdf2:	4b04      	ldr	r3, [pc, #16]	; (be04 <HAL_RadioDIO0Callback+0x1c>)
    bdf4:	4798      	blx	r3
    interruptHandlerDio0();
    bdf6:	4b02      	ldr	r3, [pc, #8]	; (be00 <HAL_RadioDIO0Callback+0x18>)
    bdf8:	681b      	ldr	r3, [r3, #0]
    bdfa:	4798      	blx	r3
}
    bdfc:	bd10      	pop	{r4, pc}
    bdfe:	46c0      	nop			; (mov r8, r8)
    be00:	20001b54 	.word	0x20001b54
    be04:	0000c209 	.word	0x0000c209

0000be08 <HAL_SPICSAssert>:
{
    be08:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, true);
    be0a:	2201      	movs	r2, #1
    be0c:	4902      	ldr	r1, [pc, #8]	; (be18 <HAL_SPICSAssert+0x10>)
    be0e:	4803      	ldr	r0, [pc, #12]	; (be1c <HAL_SPICSAssert+0x14>)
    be10:	4b03      	ldr	r3, [pc, #12]	; (be20 <HAL_SPICSAssert+0x18>)
    be12:	4798      	blx	r3
}
    be14:	bd10      	pop	{r4, pc}
    be16:	46c0      	nop			; (mov r8, r8)
    be18:	2000296c 	.word	0x2000296c
    be1c:	20001b60 	.word	0x20001b60
    be20:	00005ac9 	.word	0x00005ac9

0000be24 <HAL_SPICSDeassert>:
{
    be24:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, false);
    be26:	2200      	movs	r2, #0
    be28:	4902      	ldr	r1, [pc, #8]	; (be34 <HAL_SPICSDeassert+0x10>)
    be2a:	4803      	ldr	r0, [pc, #12]	; (be38 <HAL_SPICSDeassert+0x14>)
    be2c:	4b03      	ldr	r3, [pc, #12]	; (be3c <HAL_SPICSDeassert+0x18>)
    be2e:	4798      	blx	r3
}
    be30:	bd10      	pop	{r4, pc}
    be32:	46c0      	nop			; (mov r8, r8)
    be34:	2000296c 	.word	0x2000296c
    be38:	20001b60 	.word	0x20001b60
    be3c:	00005ac9 	.word	0x00005ac9

0000be40 <HAL_RadioInit>:
{
    be40:	b5f0      	push	{r4, r5, r6, r7, lr}
    be42:	46d6      	mov	lr, sl
    be44:	464f      	mov	r7, r9
    be46:	4646      	mov	r6, r8
    be48:	b5c0      	push	{r6, r7, lr}
    be4a:	b090      	sub	sp, #64	; 0x40
	config->input_pull = PORT_PIN_PULL_UP;
    be4c:	ac01      	add	r4, sp, #4
    be4e:	2601      	movs	r6, #1
    be50:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    be52:	2500      	movs	r5, #0
    be54:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    be56:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(SX_RF_SPI_SCK, &pin_conf);
    be58:	0021      	movs	r1, r4
    be5a:	2052      	movs	r0, #82	; 0x52
    be5c:	4f52      	ldr	r7, [pc, #328]	; (bfa8 <HAL_RadioInit+0x168>)
    be5e:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_MOSI, &pin_conf);
    be60:	0021      	movs	r1, r4
    be62:	203e      	movs	r0, #62	; 0x3e
    be64:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_CS, &pin_conf);
    be66:	0021      	movs	r1, r4
    be68:	203f      	movs	r0, #63	; 0x3f
    be6a:	47b8      	blx	r7
	port_pin_set_config(SX_RF_RESET_PIN, &pin_conf);
    be6c:	0021      	movs	r1, r4
    be6e:	202f      	movs	r0, #47	; 0x2f
    be70:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    be72:	2280      	movs	r2, #128	; 0x80
    be74:	02d2      	lsls	r2, r2, #11
    be76:	4b4d      	ldr	r3, [pc, #308]	; (bfac <HAL_RadioInit+0x16c>)
    be78:	619a      	str	r2, [r3, #24]
    be7a:	4b4d      	ldr	r3, [pc, #308]	; (bfb0 <HAL_RadioInit+0x170>)
    be7c:	2280      	movs	r2, #128	; 0x80
    be7e:	05d2      	lsls	r2, r2, #23
    be80:	619a      	str	r2, [r3, #24]
    be82:	2280      	movs	r2, #128	; 0x80
    be84:	0612      	lsls	r2, r2, #24
    be86:	619a      	str	r2, [r3, #24]
    be88:	2280      	movs	r2, #128	; 0x80
    be8a:	0212      	lsls	r2, r2, #8
    be8c:	619a      	str	r2, [r3, #24]
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    be8e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(SX_RF_SPI_MISO, &pin_conf);
    be90:	0021      	movs	r1, r4
    be92:	2053      	movs	r0, #83	; 0x53
    be94:	47b8      	blx	r7
	extint_chan_get_config_defaults(&config_extint_chan);
    be96:	ac02      	add	r4, sp, #8
    be98:	0020      	movs	r0, r4
    be9a:	4b46      	ldr	r3, [pc, #280]	; (bfb4 <HAL_RadioInit+0x174>)
    be9c:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO0_EIC_PIN;
    be9e:	2330      	movs	r3, #48	; 0x30
    bea0:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO0_EIC_MUX;
    bea2:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    bea4:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    bea6:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO0_EIC_LINE, &config_extint_chan);
    bea8:	0021      	movs	r1, r4
    beaa:	2000      	movs	r0, #0
    beac:	4b42      	ldr	r3, [pc, #264]	; (bfb8 <HAL_RadioInit+0x178>)
    beae:	469a      	mov	sl, r3
    beb0:	4798      	blx	r3
	extint_register_callback(HAL_RadioDIO0Callback,DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    beb2:	2200      	movs	r2, #0
    beb4:	2100      	movs	r1, #0
    beb6:	4841      	ldr	r0, [pc, #260]	; (bfbc <HAL_RadioInit+0x17c>)
    beb8:	4b41      	ldr	r3, [pc, #260]	; (bfc0 <HAL_RadioInit+0x180>)
    beba:	4699      	mov	r9, r3
    bebc:	4798      	blx	r3
	extint_chan_enable_callback(DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    bebe:	2100      	movs	r1, #0
    bec0:	2000      	movs	r0, #0
    bec2:	4b40      	ldr	r3, [pc, #256]	; (bfc4 <HAL_RadioInit+0x184>)
    bec4:	4698      	mov	r8, r3
    bec6:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO1_EIC_PIN;
    bec8:	230b      	movs	r3, #11
    beca:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO1_EIC_MUX;
    becc:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    bece:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    bed0:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO1_EIC_LINE, &config_extint_chan);
    bed2:	0021      	movs	r1, r4
    bed4:	200b      	movs	r0, #11
    bed6:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO1Callback,DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    bed8:	2200      	movs	r2, #0
    beda:	210b      	movs	r1, #11
    bedc:	483a      	ldr	r0, [pc, #232]	; (bfc8 <HAL_RadioInit+0x188>)
    bede:	47c8      	blx	r9
	extint_chan_enable_callback(DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    bee0:	2100      	movs	r1, #0
    bee2:	200b      	movs	r0, #11
    bee4:	47c0      	blx	r8
	config_extint_chan.gpio_pin           = DIO2_EIC_PIN;
    bee6:	230c      	movs	r3, #12
    bee8:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO2_EIC_MUX;
    beea:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    beec:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    beee:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO2_EIC_LINE, &config_extint_chan);
    bef0:	0021      	movs	r1, r4
    bef2:	200c      	movs	r0, #12
    bef4:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO2Callback,DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    bef6:	2200      	movs	r2, #0
    bef8:	210c      	movs	r1, #12
    befa:	4834      	ldr	r0, [pc, #208]	; (bfcc <HAL_RadioInit+0x18c>)
    befc:	47c8      	blx	r9
	extint_chan_enable_callback(DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    befe:	2100      	movs	r1, #0
    bf00:	200c      	movs	r0, #12
    bf02:	47c0      	blx	r8
	slave->ss_pin          = config->ss_pin;
    bf04:	4b32      	ldr	r3, [pc, #200]	; (bfd0 <HAL_RadioInit+0x190>)
    bf06:	4698      	mov	r8, r3
    bf08:	233f      	movs	r3, #63	; 0x3f
    bf0a:	4642      	mov	r2, r8
    bf0c:	7013      	strb	r3, [r2, #0]
	slave->address_enabled = config->address_enabled;
    bf0e:	7055      	strb	r5, [r2, #1]
	slave->address         = config->address;
    bf10:	7095      	strb	r5, [r2, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    bf12:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    bf14:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    bf16:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    bf18:	0021      	movs	r1, r4
    bf1a:	203f      	movs	r0, #63	; 0x3f
    bf1c:	47b8      	blx	r7
	port_pin_set_output_level(slave->ss_pin, true);
    bf1e:	4643      	mov	r3, r8
    bf20:	781a      	ldrb	r2, [r3, #0]
	if (port_index < PORT_INST_NUM) {
    bf22:	09d1      	lsrs	r1, r2, #7
		return NULL;
    bf24:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    bf26:	2900      	cmp	r1, #0
    bf28:	d104      	bne.n	bf34 <HAL_RadioInit+0xf4>
		return &(ports[port_index]->Group[group_index]);
    bf2a:	0953      	lsrs	r3, r2, #5
    bf2c:	01db      	lsls	r3, r3, #7
    bf2e:	4929      	ldr	r1, [pc, #164]	; (bfd4 <HAL_RadioInit+0x194>)
    bf30:	468c      	mov	ip, r1
    bf32:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    bf34:	211f      	movs	r1, #31
    bf36:	4011      	ands	r1, r2
    bf38:	2201      	movs	r2, #1
    bf3a:	0010      	movs	r0, r2
    bf3c:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    bf3e:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    bf40:	ac02      	add	r4, sp, #8
    bf42:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    bf44:	2300      	movs	r3, #0
    bf46:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    bf48:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    bf4a:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    bf4c:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    bf4e:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    bf50:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    bf52:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    bf54:	3223      	adds	r2, #35	; 0x23
    bf56:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    bf58:	3a18      	subs	r2, #24
    bf5a:	2100      	movs	r1, #0
    bf5c:	a808      	add	r0, sp, #32
    bf5e:	4b1e      	ldr	r3, [pc, #120]	; (bfd8 <HAL_RadioInit+0x198>)
    bf60:	4798      	blx	r3
	config_spi_master.mode_specific.master.baudrate = SX_RF_SPI_BAUDRATE;
    bf62:	4b1e      	ldr	r3, [pc, #120]	; (bfdc <HAL_RadioInit+0x19c>)
    bf64:	61a3      	str	r3, [r4, #24]
	config_spi_master.mux_setting = SX_RF_SPI_SERCOM_MUX_SETTING;
    bf66:	2380      	movs	r3, #128	; 0x80
    bf68:	025b      	lsls	r3, r3, #9
    bf6a:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = SX_RF_SPI_SERCOM_PINMUX_PAD0;
    bf6c:	4b1c      	ldr	r3, [pc, #112]	; (bfe0 <HAL_RadioInit+0x1a0>)
    bf6e:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    bf70:	2301      	movs	r3, #1
    bf72:	425b      	negs	r3, r3
    bf74:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = SX_RF_SPI_SERCOM_PINMUX_PAD2;
    bf76:	4b1b      	ldr	r3, [pc, #108]	; (bfe4 <HAL_RadioInit+0x1a4>)
    bf78:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = SX_RF_SPI_SERCOM_PINMUX_PAD3;
    bf7a:	4b1b      	ldr	r3, [pc, #108]	; (bfe8 <HAL_RadioInit+0x1a8>)
    bf7c:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, SX_RF_SPI, &config_spi_master);	
    bf7e:	4d1b      	ldr	r5, [pc, #108]	; (bfec <HAL_RadioInit+0x1ac>)
    bf80:	0022      	movs	r2, r4
    bf82:	491b      	ldr	r1, [pc, #108]	; (bff0 <HAL_RadioInit+0x1b0>)
    bf84:	0028      	movs	r0, r5
    bf86:	4b1b      	ldr	r3, [pc, #108]	; (bff4 <HAL_RadioInit+0x1b4>)
    bf88:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    bf8a:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    bf8c:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    bf8e:	2b00      	cmp	r3, #0
    bf90:	d1fc      	bne.n	bf8c <HAL_RadioInit+0x14c>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    bf92:	6813      	ldr	r3, [r2, #0]
    bf94:	2102      	movs	r1, #2
    bf96:	430b      	orrs	r3, r1
    bf98:	6013      	str	r3, [r2, #0]
}
    bf9a:	b010      	add	sp, #64	; 0x40
    bf9c:	bc1c      	pop	{r2, r3, r4}
    bf9e:	4690      	mov	r8, r2
    bfa0:	4699      	mov	r9, r3
    bfa2:	46a2      	mov	sl, r4
    bfa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bfa6:	46c0      	nop			; (mov r8, r8)
    bfa8:	00004ba9 	.word	0x00004ba9
    bfac:	40002900 	.word	0x40002900
    bfb0:	40002880 	.word	0x40002880
    bfb4:	000048f5 	.word	0x000048f5
    bfb8:	00004909 	.word	0x00004909
    bfbc:	0000bde9 	.word	0x0000bde9
    bfc0:	000047b5 	.word	0x000047b5
    bfc4:	000047e1 	.word	0x000047e1
    bfc8:	0000bdc9 	.word	0x0000bdc9
    bfcc:	0000bda9 	.word	0x0000bda9
    bfd0:	2000296c 	.word	0x2000296c
    bfd4:	40002800 	.word	0x40002800
    bfd8:	000161c9 	.word	0x000161c9
    bfdc:	001e8480 	.word	0x001e8480
    bfe0:	00530005 	.word	0x00530005
    bfe4:	003e0005 	.word	0x003e0005
    bfe8:	00520005 	.word	0x00520005
    bfec:	20001b60 	.word	0x20001b60
    bff0:	42001000 	.word	0x42001000
    bff4:	0000577d 	.word	0x0000577d

0000bff8 <RADIO_Reset>:
{
    bff8:	b570      	push	{r4, r5, r6, lr}
    bffa:	b082      	sub	sp, #8
	HAL_ResetPinMakeOutput();
    bffc:	4c0a      	ldr	r4, [pc, #40]	; (c028 <RADIO_Reset+0x30>)
    bffe:	47a0      	blx	r4
		port_base->OUTCLR.reg = pin_mask;
    c000:	4d0a      	ldr	r5, [pc, #40]	; (c02c <RADIO_Reset+0x34>)
    c002:	2680      	movs	r6, #128	; 0x80
    c004:	0236      	lsls	r6, r6, #8
    c006:	616e      	str	r6, [r5, #20]
	SystemBlockingWaitMs(1);
    c008:	2001      	movs	r0, #1
    c00a:	4b09      	ldr	r3, [pc, #36]	; (c030 <RADIO_Reset+0x38>)
    c00c:	4798      	blx	r3
	config->direction  = PORT_PIN_DIR_INPUT;
    c00e:	a901      	add	r1, sp, #4
    c010:	2300      	movs	r3, #0
    c012:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    c014:	2201      	movs	r2, #1
    c016:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    c018:	708b      	strb	r3, [r1, #2]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    c01a:	202f      	movs	r0, #47	; 0x2f
    c01c:	4b05      	ldr	r3, [pc, #20]	; (c034 <RADIO_Reset+0x3c>)
    c01e:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    c020:	61ae      	str	r6, [r5, #24]
	HAL_ResetPinMakeOutput();
    c022:	47a0      	blx	r4
}
    c024:	b002      	add	sp, #8
    c026:	bd70      	pop	{r4, r5, r6, pc}
    c028:	0000bd89 	.word	0x0000bd89
    c02c:	40002880 	.word	0x40002880
    c030:	0000c1d5 	.word	0x0000c1d5
    c034:	00004ba9 	.word	0x00004ba9

0000c038 <RADIO_RegisterWrite>:
{
    c038:	b570      	push	{r4, r5, r6, lr}
    c03a:	0004      	movs	r4, r0
    c03c:	000d      	movs	r5, r1
	HAL_SPICSAssert();
    c03e:	4b05      	ldr	r3, [pc, #20]	; (c054 <RADIO_RegisterWrite+0x1c>)
    c040:	4798      	blx	r3
	HAL_SPISend(REG_WRITE_CMD | reg);
    c042:	2080      	movs	r0, #128	; 0x80
    c044:	4320      	orrs	r0, r4
    c046:	4c04      	ldr	r4, [pc, #16]	; (c058 <RADIO_RegisterWrite+0x20>)
    c048:	47a0      	blx	r4
	HAL_SPISend(value);
    c04a:	0028      	movs	r0, r5
    c04c:	47a0      	blx	r4
	HAL_SPICSDeassert();
    c04e:	4b03      	ldr	r3, [pc, #12]	; (c05c <RADIO_RegisterWrite+0x24>)
    c050:	4798      	blx	r3
}
    c052:	bd70      	pop	{r4, r5, r6, pc}
    c054:	0000be09 	.word	0x0000be09
    c058:	0000bd35 	.word	0x0000bd35
    c05c:	0000be25 	.word	0x0000be25

0000c060 <RADIO_RegisterRead>:
{
    c060:	b510      	push	{r4, lr}
    c062:	0004      	movs	r4, r0
	HAL_SPICSAssert();
    c064:	4b06      	ldr	r3, [pc, #24]	; (c080 <RADIO_RegisterRead+0x20>)
    c066:	4798      	blx	r3
	HAL_SPISend(reg);
    c068:	207f      	movs	r0, #127	; 0x7f
    c06a:	4020      	ands	r0, r4
    c06c:	4c05      	ldr	r4, [pc, #20]	; (c084 <RADIO_RegisterRead+0x24>)
    c06e:	47a0      	blx	r4
	readValue = HAL_SPISend(0xFF);
    c070:	20ff      	movs	r0, #255	; 0xff
    c072:	47a0      	blx	r4
    c074:	0004      	movs	r4, r0
	HAL_SPICSDeassert();
    c076:	4b04      	ldr	r3, [pc, #16]	; (c088 <RADIO_RegisterRead+0x28>)
    c078:	4798      	blx	r3
}
    c07a:	0020      	movs	r0, r4
    c07c:	bd10      	pop	{r4, pc}
    c07e:	46c0      	nop			; (mov r8, r8)
    c080:	0000be09 	.word	0x0000be09
    c084:	0000bd35 	.word	0x0000bd35
    c088:	0000be25 	.word	0x0000be25

0000c08c <RADIO_FrameWrite>:
{
    c08c:	b570      	push	{r4, r5, r6, lr}
    c08e:	0004      	movs	r4, r0
    c090:	000e      	movs	r6, r1
    c092:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    c094:	4b0a      	ldr	r3, [pc, #40]	; (c0c0 <RADIO_FrameWrite+0x34>)
    c096:	4798      	blx	r3
    HAL_SPISend(REG_WRITE_CMD | offset);
    c098:	2080      	movs	r0, #128	; 0x80
    c09a:	4320      	orrs	r0, r4
    c09c:	4b09      	ldr	r3, [pc, #36]	; (c0c4 <RADIO_FrameWrite+0x38>)
    c09e:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    c0a0:	2d00      	cmp	r5, #0
    c0a2:	d00a      	beq.n	c0ba <RADIO_FrameWrite+0x2e>
    c0a4:	0034      	movs	r4, r6
    c0a6:	3d01      	subs	r5, #1
    c0a8:	b2ed      	uxtb	r5, r5
    c0aa:	3501      	adds	r5, #1
    c0ac:	1975      	adds	r5, r6, r5
	    HAL_SPISend(buffer[i]);
    c0ae:	4e05      	ldr	r6, [pc, #20]	; (c0c4 <RADIO_FrameWrite+0x38>)
    c0b0:	7820      	ldrb	r0, [r4, #0]
    c0b2:	47b0      	blx	r6
    c0b4:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    c0b6:	42ac      	cmp	r4, r5
    c0b8:	d1fa      	bne.n	c0b0 <RADIO_FrameWrite+0x24>
    HAL_SPICSDeassert();
    c0ba:	4b03      	ldr	r3, [pc, #12]	; (c0c8 <RADIO_FrameWrite+0x3c>)
    c0bc:	4798      	blx	r3
}
    c0be:	bd70      	pop	{r4, r5, r6, pc}
    c0c0:	0000be09 	.word	0x0000be09
    c0c4:	0000bd35 	.word	0x0000bd35
    c0c8:	0000be25 	.word	0x0000be25

0000c0cc <RADIO_FrameRead>:
{
    c0cc:	b570      	push	{r4, r5, r6, lr}
    c0ce:	0004      	movs	r4, r0
    c0d0:	000e      	movs	r6, r1
    c0d2:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    c0d4:	4b0a      	ldr	r3, [pc, #40]	; (c100 <RADIO_FrameRead+0x34>)
    c0d6:	4798      	blx	r3
    HAL_SPISend(offset);
    c0d8:	0020      	movs	r0, r4
    c0da:	4b0a      	ldr	r3, [pc, #40]	; (c104 <RADIO_FrameRead+0x38>)
    c0dc:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    c0de:	2d00      	cmp	r5, #0
    c0e0:	d00b      	beq.n	c0fa <RADIO_FrameRead+0x2e>
    c0e2:	0034      	movs	r4, r6
    c0e4:	3d01      	subs	r5, #1
    c0e6:	b2ed      	uxtb	r5, r5
    c0e8:	3501      	adds	r5, #1
    c0ea:	1975      	adds	r5, r6, r5
	    buffer[i] = HAL_SPISend(0xFF);
    c0ec:	4e05      	ldr	r6, [pc, #20]	; (c104 <RADIO_FrameRead+0x38>)
    c0ee:	20ff      	movs	r0, #255	; 0xff
    c0f0:	47b0      	blx	r6
    c0f2:	7020      	strb	r0, [r4, #0]
    c0f4:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    c0f6:	42ac      	cmp	r4, r5
    c0f8:	d1f9      	bne.n	c0ee <RADIO_FrameRead+0x22>
    HAL_SPICSDeassert();
    c0fa:	4b03      	ldr	r3, [pc, #12]	; (c108 <RADIO_FrameRead+0x3c>)
    c0fc:	4798      	blx	r3
}
    c0fe:	bd70      	pop	{r4, r5, r6, pc}
    c100:	0000be09 	.word	0x0000be09
    c104:	0000bd35 	.word	0x0000bd35
    c108:	0000be25 	.word	0x0000be25

0000c10c <HAL_RegisterDioInterruptHandler>:
 * \param[in] dioPin  - DIO pin
 * \param[in] handler - function to be called upon given DIO interrupt
 */
void HAL_RegisterDioInterruptHandler(uint8_t dioPin, DioInterruptHandler_t handler)
{
  switch (dioPin)
    c10c:	2802      	cmp	r0, #2
    c10e:	d007      	beq.n	c120 <HAL_RegisterDioInterruptHandler+0x14>
    c110:	2804      	cmp	r0, #4
    c112:	d008      	beq.n	c126 <HAL_RegisterDioInterruptHandler+0x1a>
    c114:	2801      	cmp	r0, #1
    c116:	d000      	beq.n	c11a <HAL_RegisterDioInterruptHandler+0xe>
#endif

    default:
      break;
  }
}
    c118:	4770      	bx	lr
      interruptHandlerDio0 = handler;
    c11a:	4b04      	ldr	r3, [pc, #16]	; (c12c <HAL_RegisterDioInterruptHandler+0x20>)
    c11c:	6019      	str	r1, [r3, #0]
      break;
    c11e:	e7fb      	b.n	c118 <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio1 = handler;
    c120:	4b03      	ldr	r3, [pc, #12]	; (c130 <HAL_RegisterDioInterruptHandler+0x24>)
    c122:	6019      	str	r1, [r3, #0]
      break;
    c124:	e7f8      	b.n	c118 <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio2 = handler;
    c126:	4b03      	ldr	r3, [pc, #12]	; (c134 <HAL_RegisterDioInterruptHandler+0x28>)
    c128:	6019      	str	r1, [r3, #0]
}
    c12a:	e7f5      	b.n	c118 <HAL_RegisterDioInterruptHandler+0xc>
    c12c:	20001b54 	.word	0x20001b54
    c130:	20001b58 	.word	0x20001b58
    c134:	20001b5c 	.word	0x20001b5c

0000c138 <HAL_EnableRFCtrl>:

void HAL_EnableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
   if ((RFCtrl1 == RFO_HF) || (RFCtrl2 == RX))
    c138:	2801      	cmp	r0, #1
    c13a:	d00a      	beq.n	c152 <HAL_EnableRFCtrl+0x1a>
    c13c:	2900      	cmp	r1, #0
    c13e:	d008      	beq.n	c152 <HAL_EnableRFCtrl+0x1a>
   {
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_ACTIVE);		
   }
   else if ((RFCtrl1 == PA_BOOST) && (RFCtrl2 == TX))
    c140:	2802      	cmp	r0, #2
    c142:	d10a      	bne.n	c15a <HAL_EnableRFCtrl+0x22>
    c144:	2901      	cmp	r1, #1
    c146:	d108      	bne.n	c15a <HAL_EnableRFCtrl+0x22>
		port_base->OUTCLR.reg = pin_mask;
    c148:	2280      	movs	r2, #128	; 0x80
    c14a:	0192      	lsls	r2, r2, #6
    c14c:	4b03      	ldr	r3, [pc, #12]	; (c15c <HAL_EnableRFCtrl+0x24>)
    c14e:	615a      	str	r2, [r3, #20]
   {
	   port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);
   }
#endif	
}
    c150:	e003      	b.n	c15a <HAL_EnableRFCtrl+0x22>
		port_base->OUTSET.reg = pin_mask;
    c152:	2280      	movs	r2, #128	; 0x80
    c154:	0192      	lsls	r2, r2, #6
    c156:	4b01      	ldr	r3, [pc, #4]	; (c15c <HAL_EnableRFCtrl+0x24>)
    c158:	619a      	str	r2, [r3, #24]
    c15a:	4770      	bx	lr
    c15c:	40002800 	.word	0x40002800

0000c160 <HAL_DisableRFCtrl>:

void HAL_DisableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
	if ((RFCtrl1 == RFO_HF) || (RFCtrl2 == RX))
    c160:	2801      	cmp	r0, #1
    c162:	d001      	beq.n	c168 <HAL_DisableRFCtrl+0x8>
    c164:	2900      	cmp	r1, #0
    c166:	d103      	bne.n	c170 <HAL_DisableRFCtrl+0x10>
		port_base->OUTCLR.reg = pin_mask;
    c168:	2280      	movs	r2, #128	; 0x80
    c16a:	0192      	lsls	r2, r2, #6
    c16c:	4b01      	ldr	r3, [pc, #4]	; (c174 <HAL_DisableRFCtrl+0x14>)
    c16e:	615a      	str	r2, [r3, #20]
	{
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
	}
#endif	
}
    c170:	4770      	bx	lr
    c172:	46c0      	nop			; (mov r8, r8)
    c174:	40002800 	.word	0x40002800

0000c178 <HAL_GetRadioClkStabilizationDelay>:
 * \param[out] Time value in ms
 */
uint8_t HAL_GetRadioClkStabilizationDelay(void)
{
	return RADIO_CLK_STABILITATION_DELAY;
}
    c178:	2002      	movs	r0, #2
    c17a:	4770      	bx	lr

0000c17c <HAL_GetRadioClkSrc>:
 * \param[out] Type of clock source TCXO or XTAL
 */
RadioClockSources_t HAL_GetRadioClkSrc(void)
{
	return RADIO_CLK_SRC;
}
    c17c:	2000      	movs	r0, #0
    c17e:	4770      	bx	lr

0000c180 <HAL_TCXOPowerOn>:
 *
 * \param[in] None
 * \param[out] None
 */
void HAL_TCXOPowerOn(void)
{
    c180:	b510      	push	{r4, lr}
		port_base->OUTSET.reg = pin_mask;
    c182:	2280      	movs	r2, #128	; 0x80
    c184:	0092      	lsls	r2, r2, #2
    c186:	4b03      	ldr	r3, [pc, #12]	; (c194 <HAL_TCXOPowerOn+0x14>)
    c188:	619a      	str	r2, [r3, #24]
#ifdef TCXO_ENABLE
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_ACTIVE);
	delay_ms(RADIO_CLK_STABILITATION_DELAY);
    c18a:	2002      	movs	r0, #2
    c18c:	4b02      	ldr	r3, [pc, #8]	; (c198 <HAL_TCXOPowerOn+0x18>)
    c18e:	4798      	blx	r3
#endif
}
    c190:	bd10      	pop	{r4, pc}
    c192:	46c0      	nop			; (mov r8, r8)
    c194:	40002800 	.word	0x40002800
    c198:	000044cd 	.word	0x000044cd

0000c19c <HAL_TCXOPowerOff>:
		port_base->OUTCLR.reg = pin_mask;
    c19c:	2280      	movs	r2, #128	; 0x80
    c19e:	0092      	lsls	r2, r2, #2
    c1a0:	4b01      	ldr	r3, [pc, #4]	; (c1a8 <HAL_TCXOPowerOff+0xc>)
    c1a2:	615a      	str	r2, [r3, #20]
#ifdef TCXO_ENABLE
#ifndef TCXO_ALWAYS_ON
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
#endif
}
    c1a4:	4770      	bx	lr
    c1a6:	46c0      	nop			; (mov r8, r8)
    c1a8:	40002800 	.word	0x40002800

0000c1ac <SleepTimerGetElapsedTime>:
/**
* \brief Calculate the Elapsed Time from the previous call of this function
* \retval Elapsed time in ticks
*/
uint32_t SleepTimerGetElapsedTime(void)
{
    c1ac:	b510      	push	{r4, lr}
	return rtc_count_get_count(&rtc);
    c1ae:	4802      	ldr	r0, [pc, #8]	; (c1b8 <SleepTimerGetElapsedTime+0xc>)
    c1b0:	4b02      	ldr	r3, [pc, #8]	; (c1bc <SleepTimerGetElapsedTime+0x10>)
    c1b2:	4798      	blx	r3
}
    c1b4:	bd10      	pop	{r4, pc}
    c1b6:	46c0      	nop			; (mov r8, r8)
    c1b8:	20002970 	.word	0x20002970
    c1bc:	00004bd9 	.word	0x00004bd9

0000c1c0 <SleepTimerStop>:

/**
* \brief Stop the sleep timer
*/
void SleepTimerStop(void)
{
    c1c0:	b510      	push	{r4, lr}
	rtc_count_disable_callback(&rtc, RTC_COUNT_CALLBACK_COMPARE_0);
    c1c2:	2108      	movs	r1, #8
    c1c4:	4801      	ldr	r0, [pc, #4]	; (c1cc <SleepTimerStop+0xc>)
    c1c6:	4b02      	ldr	r3, [pc, #8]	; (c1d0 <SleepTimerStop+0x10>)
    c1c8:	4798      	blx	r3
}
    c1ca:	bd10      	pop	{r4, pc}
    c1cc:	20002970 	.word	0x20002970
    c1d0:	00004c05 	.word	0x00004c05

0000c1d4 <SystemBlockingWaitMs>:
 * waiting with the MCU in sleep.
 * Find out how long it takes the MCU to go to and wake up from sleep to see if
 * it makes sense to go to sleep at all 
 */
void SystemBlockingWaitMs(uint32_t ms)
{
    c1d4:	b510      	push	{r4, lr}
#ifndef UT
    delay_ms(ms);
    c1d6:	2800      	cmp	r0, #0
    c1d8:	d103      	bne.n	c1e2 <SystemBlockingWaitMs+0xe>
    c1da:	2001      	movs	r0, #1
    c1dc:	4b02      	ldr	r3, [pc, #8]	; (c1e8 <SystemBlockingWaitMs+0x14>)
    c1de:	4798      	blx	r3
#endif
}
    c1e0:	bd10      	pop	{r4, pc}
    delay_ms(ms);
    c1e2:	4b02      	ldr	r3, [pc, #8]	; (c1ec <SystemBlockingWaitMs+0x18>)
    c1e4:	4798      	blx	r3
    c1e6:	e7fb      	b.n	c1e0 <SystemBlockingWaitMs+0xc>
    c1e8:	000044a1 	.word	0x000044a1
    c1ec:	000044cd 	.word	0x000044cd

0000c1f0 <system_enter_critical_section>:
{

}

void system_enter_critical_section(void)
{
    c1f0:	b510      	push	{r4, lr}
	cpu_irq_enter_critical();
    c1f2:	4b01      	ldr	r3, [pc, #4]	; (c1f8 <system_enter_critical_section+0x8>)
    c1f4:	4798      	blx	r3
#ifndef UT
	system_interrupt_enter_critical_section();
#endif
}
    c1f6:	bd10      	pop	{r4, pc}
    c1f8:	000044f9 	.word	0x000044f9

0000c1fc <system_leave_critical_section>:

void system_leave_critical_section(void)
{
    c1fc:	b510      	push	{r4, lr}
	cpu_irq_leave_critical();
    c1fe:	4b01      	ldr	r3, [pc, #4]	; (c204 <system_leave_critical_section+0x8>)
    c200:	4798      	blx	r3
#ifndef UT
	system_interrupt_leave_critical_section();
#endif
}
    c202:	bd10      	pop	{r4, pc}
    c204:	00004539 	.word	0x00004539

0000c208 <PMM_Wakeup>:

/**
* \brief Wakeup from sleep
*/
void PMM_Wakeup(void)
{
    c208:	b570      	push	{r4, r5, r6, lr}
    uint64_t sleptTimeUs = 0;

    if (PMM_STATE_SLEEP == pmmState)
    c20a:	4b16      	ldr	r3, [pc, #88]	; (c264 <PMM_Wakeup+0x5c>)
    c20c:	781b      	ldrb	r3, [r3, #0]
    c20e:	2b01      	cmp	r3, #1
    c210:	d000      	beq.n	c214 <PMM_Wakeup+0xc>
        {
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
            sleepReq = NULL;
        }
    }
}
    c212:	bd70      	pop	{r4, r5, r6, pc}
		pmmState = PMM_STATE_ACTIVE;
    c214:	2200      	movs	r2, #0
    c216:	4b13      	ldr	r3, [pc, #76]	; (c264 <PMM_Wakeup+0x5c>)
    c218:	701a      	strb	r2, [r3, #0]
        sleptTimeUs = SLEEP_TICKS_TO_US(SleepTimerGetElapsedTime());
    c21a:	4b13      	ldr	r3, [pc, #76]	; (c268 <PMM_Wakeup+0x60>)
    c21c:	4798      	blx	r3
    c21e:	4b13      	ldr	r3, [pc, #76]	; (c26c <PMM_Wakeup+0x64>)
    c220:	4798      	blx	r3
    c222:	4913      	ldr	r1, [pc, #76]	; (c270 <PMM_Wakeup+0x68>)
    c224:	4b13      	ldr	r3, [pc, #76]	; (c274 <PMM_Wakeup+0x6c>)
    c226:	4798      	blx	r3
    c228:	4b13      	ldr	r3, [pc, #76]	; (c278 <PMM_Wakeup+0x70>)
    c22a:	4798      	blx	r3
    c22c:	0004      	movs	r4, r0
    c22e:	000d      	movs	r5, r1
        SleepTimerStop();
    c230:	4b12      	ldr	r3, [pc, #72]	; (c27c <PMM_Wakeup+0x74>)
    c232:	4798      	blx	r3
        SystemTimerSync(sleptTimeUs);
    c234:	0020      	movs	r0, r4
    c236:	0029      	movs	r1, r5
    c238:	4b11      	ldr	r3, [pc, #68]	; (c280 <PMM_Wakeup+0x78>)
    c23a:	4798      	blx	r3
        if (sleepReq && sleepReq->pmmWakeupCallback)
    c23c:	4b11      	ldr	r3, [pc, #68]	; (c284 <PMM_Wakeup+0x7c>)
    c23e:	681b      	ldr	r3, [r3, #0]
    c240:	2b00      	cmp	r3, #0
    c242:	d0e6      	beq.n	c212 <PMM_Wakeup+0xa>
    c244:	689e      	ldr	r6, [r3, #8]
    c246:	2e00      	cmp	r6, #0
    c248:	d0e3      	beq.n	c212 <PMM_Wakeup+0xa>
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
    c24a:	22fa      	movs	r2, #250	; 0xfa
    c24c:	0092      	lsls	r2, r2, #2
    c24e:	2300      	movs	r3, #0
    c250:	0020      	movs	r0, r4
    c252:	0029      	movs	r1, r5
    c254:	4c0c      	ldr	r4, [pc, #48]	; (c288 <PMM_Wakeup+0x80>)
    c256:	47a0      	blx	r4
    c258:	47b0      	blx	r6
            sleepReq = NULL;
    c25a:	2200      	movs	r2, #0
    c25c:	4b09      	ldr	r3, [pc, #36]	; (c284 <PMM_Wakeup+0x7c>)
    c25e:	601a      	str	r2, [r3, #0]
}
    c260:	e7d7      	b.n	c212 <PMM_Wakeup+0xa>
    c262:	46c0      	nop			; (mov r8, r8)
    c264:	20001b6c 	.word	0x20001b6c
    c268:	0000c1ad 	.word	0x0000c1ad
    c26c:	0001434d 	.word	0x0001434d
    c270:	41f423d7 	.word	0x41f423d7
    c274:	00013cf5 	.word	0x00013cf5
    c278:	00013431 	.word	0x00013431
    c27c:	0000c1c1 	.word	0x0000c1c1
    c280:	0000d0e5 	.word	0x0000d0e5
    c284:	20001b70 	.word	0x20001b70
    c288:	00013331 	.word	0x00013331

0000c28c <InitDefault868Channels>:
/*
 * \brief This function initializes all the EU868 Channels to default values
 */
#if (EU_BAND == 1)
void InitDefault868Channels (void)
{
    c28c:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    memset (RegParams.pChParams, 0, sizeof(DefaultChannels868) );
    c28e:	4c39      	ldr	r4, [pc, #228]	; (c374 <InitDefault868Channels+0xe8>)
    c290:	7920      	ldrb	r0, [r4, #4]
    c292:	7963      	ldrb	r3, [r4, #5]
    c294:	021b      	lsls	r3, r3, #8
    c296:	4303      	orrs	r3, r0
    c298:	79a0      	ldrb	r0, [r4, #6]
    c29a:	0400      	lsls	r0, r0, #16
    c29c:	4303      	orrs	r3, r0
    c29e:	79e0      	ldrb	r0, [r4, #7]
    c2a0:	0600      	lsls	r0, r0, #24
    c2a2:	4318      	orrs	r0, r3
    c2a4:	2206      	movs	r2, #6
    c2a6:	2100      	movs	r1, #0
    c2a8:	4e33      	ldr	r6, [pc, #204]	; (c378 <InitDefault868Channels+0xec>)
    c2aa:	47b0      	blx	r6
    memcpy (RegParams.pChParams, DefaultChannels868, sizeof(DefaultChannels868) );
    c2ac:	7920      	ldrb	r0, [r4, #4]
    c2ae:	7963      	ldrb	r3, [r4, #5]
    c2b0:	021b      	lsls	r3, r3, #8
    c2b2:	4303      	orrs	r3, r0
    c2b4:	79a0      	ldrb	r0, [r4, #6]
    c2b6:	0400      	lsls	r0, r0, #16
    c2b8:	4303      	orrs	r3, r0
    c2ba:	79e0      	ldrb	r0, [r4, #7]
    c2bc:	0600      	lsls	r0, r0, #24
    c2be:	4318      	orrs	r0, r3
    c2c0:	2206      	movs	r2, #6
    c2c2:	492e      	ldr	r1, [pc, #184]	; (c37c <InitDefault868Channels+0xf0>)
    c2c4:	4d2e      	ldr	r5, [pc, #184]	; (c380 <InitDefault868Channels+0xf4>)
    c2c6:	47a8      	blx	r5
    memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels868) );
    c2c8:	7a20      	ldrb	r0, [r4, #8]
    c2ca:	7a63      	ldrb	r3, [r4, #9]
    c2cc:	021b      	lsls	r3, r3, #8
    c2ce:	4303      	orrs	r3, r0
    c2d0:	7aa0      	ldrb	r0, [r4, #10]
    c2d2:	0400      	lsls	r0, r0, #16
    c2d4:	4303      	orrs	r3, r0
    c2d6:	7ae0      	ldrb	r0, [r4, #11]
    c2d8:	0600      	lsls	r0, r0, #24
    c2da:	4318      	orrs	r0, r3
    c2dc:	2224      	movs	r2, #36	; 0x24
    c2de:	2100      	movs	r1, #0
    c2e0:	47b0      	blx	r6
    memcpy (RegParams.pOtherChParams, AdvChannels868, sizeof(AdvChannels868) );	
    c2e2:	7a20      	ldrb	r0, [r4, #8]
    c2e4:	7a63      	ldrb	r3, [r4, #9]
    c2e6:	021b      	lsls	r3, r3, #8
    c2e8:	4303      	orrs	r3, r0
    c2ea:	7aa0      	ldrb	r0, [r4, #10]
    c2ec:	0400      	lsls	r0, r0, #16
    c2ee:	4303      	orrs	r3, r0
    c2f0:	7ae0      	ldrb	r0, [r4, #11]
    c2f2:	0600      	lsls	r0, r0, #24
    c2f4:	4318      	orrs	r0, r3
    c2f6:	2224      	movs	r2, #36	; 0x24
    c2f8:	4922      	ldr	r1, [pc, #136]	; (c384 <InitDefault868Channels+0xf8>)
    c2fa:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParams868) );
    c2fc:	7b20      	ldrb	r0, [r4, #12]
    c2fe:	7b63      	ldrb	r3, [r4, #13]
    c300:	021b      	lsls	r3, r3, #8
    c302:	4303      	orrs	r3, r0
    c304:	7ba0      	ldrb	r0, [r4, #14]
    c306:	0400      	lsls	r0, r0, #16
    c308:	4303      	orrs	r3, r0
    c30a:	7be0      	ldrb	r0, [r4, #15]
    c30c:	0600      	lsls	r0, r0, #24
    c30e:	4318      	orrs	r0, r3
    c310:	2248      	movs	r2, #72	; 0x48
    c312:	2100      	movs	r1, #0
    c314:	47b0      	blx	r6
	memcpy (RegParams.pSubBandParams, SubBandParams868, sizeof(SubBandParams868) );
    c316:	7b20      	ldrb	r0, [r4, #12]
    c318:	7b63      	ldrb	r3, [r4, #13]
    c31a:	021b      	lsls	r3, r3, #8
    c31c:	4303      	orrs	r3, r0
    c31e:	7ba0      	ldrb	r0, [r4, #14]
    c320:	0400      	lsls	r0, r0, #16
    c322:	4303      	orrs	r3, r0
    c324:	7be0      	ldrb	r0, [r4, #15]
    c326:	0600      	lsls	r0, r0, #24
    c328:	4318      	orrs	r0, r3
    c32a:	2248      	movs	r2, #72	; 0x48
    c32c:	4916      	ldr	r1, [pc, #88]	; (c388 <InitDefault868Channels+0xfc>)
    c32e:	47a8      	blx	r5
	memset(RegParams.cmnParams.paramsType2.subBandDutyCycle,0,sizeof(SubBandDutyCycle868));
	memcpy(RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycle868,sizeof(SubBandDutyCycle868));
    c330:	0020      	movs	r0, r4
    c332:	30af      	adds	r0, #175	; 0xaf
    c334:	30ff      	adds	r0, #255	; 0xff
    c336:	220c      	movs	r2, #12
    c338:	4914      	ldr	r1, [pc, #80]	; (c38c <InitDefault868Channels+0x100>)
    c33a:	47a8      	blx	r5
    for (i = 3; i < RegParams.maxChannels; i++)
    c33c:	232a      	movs	r3, #42	; 0x2a
    c33e:	56e3      	ldrsb	r3, [r4, r3]
    c340:	2b03      	cmp	r3, #3
    c342:	dd15      	ble.n	c370 <InitDefault868Channels+0xe4>
    c344:	2303      	movs	r3, #3
    {
        // for undefined channels the duty cycle should be a very big value, and the data range a not-valid value
        //duty cycle 0 means no duty cycle limitation, the bigger the duty cycle value, the greater the limitation
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    c346:	480b      	ldr	r0, [pc, #44]	; (c374 <InitDefault868Channels+0xe8>)
    c348:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    c34a:	242a      	movs	r4, #42	; 0x2a
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    c34c:	7902      	ldrb	r2, [r0, #4]
    c34e:	7941      	ldrb	r1, [r0, #5]
    c350:	0209      	lsls	r1, r1, #8
    c352:	4311      	orrs	r1, r2
    c354:	7982      	ldrb	r2, [r0, #6]
    c356:	0412      	lsls	r2, r2, #16
    c358:	4311      	orrs	r1, r2
    c35a:	79c2      	ldrb	r2, [r0, #7]
    c35c:	0612      	lsls	r2, r2, #24
    c35e:	430a      	orrs	r2, r1
    c360:	0059      	lsls	r1, r3, #1
    c362:	188a      	adds	r2, r1, r2
    c364:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    c366:	3301      	adds	r3, #1
    c368:	b2db      	uxtb	r3, r3
    c36a:	5702      	ldrsb	r2, [r0, r4]
    c36c:	4293      	cmp	r3, r2
    c36e:	dbed      	blt.n	c34c <InitDefault868Channels+0xc0>
    }
}
    c370:	bd70      	pop	{r4, r5, r6, pc}
    c372:	46c0      	nop			; (mov r8, r8)
    c374:	200029ac 	.word	0x200029ac
    c378:	000161c9 	.word	0x000161c9
    c37c:	000181a4 	.word	0x000181a4
    c380:	000161b7 	.word	0x000161b7
    c384:	00018178 	.word	0x00018178
    c388:	000181c4 	.word	0x000181c4
    c38c:	000181ac 	.word	0x000181ac

0000c390 <InitDefault433Channels>:

/*
 * \brief This function initializes all the EU433 Channels to default values
 */
void InitDefault433Channels (void)
{
    c390:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    memset (RegParams.pChParams, 0, sizeof(DefaultChannels433) );
    c392:	4c36      	ldr	r4, [pc, #216]	; (c46c <InitDefault433Channels+0xdc>)
    c394:	7920      	ldrb	r0, [r4, #4]
    c396:	7963      	ldrb	r3, [r4, #5]
    c398:	021b      	lsls	r3, r3, #8
    c39a:	4303      	orrs	r3, r0
    c39c:	79a0      	ldrb	r0, [r4, #6]
    c39e:	0400      	lsls	r0, r0, #16
    c3a0:	4303      	orrs	r3, r0
    c3a2:	79e0      	ldrb	r0, [r4, #7]
    c3a4:	0600      	lsls	r0, r0, #24
    c3a6:	4318      	orrs	r0, r3
    c3a8:	2206      	movs	r2, #6
    c3aa:	2100      	movs	r1, #0
    c3ac:	4e30      	ldr	r6, [pc, #192]	; (c470 <InitDefault433Channels+0xe0>)
    c3ae:	47b0      	blx	r6
    memcpy (RegParams.pChParams, DefaultChannels433, sizeof(DefaultChannels433) );
    c3b0:	7920      	ldrb	r0, [r4, #4]
    c3b2:	7963      	ldrb	r3, [r4, #5]
    c3b4:	021b      	lsls	r3, r3, #8
    c3b6:	4303      	orrs	r3, r0
    c3b8:	79a0      	ldrb	r0, [r4, #6]
    c3ba:	0400      	lsls	r0, r0, #16
    c3bc:	4303      	orrs	r3, r0
    c3be:	79e0      	ldrb	r0, [r4, #7]
    c3c0:	0600      	lsls	r0, r0, #24
    c3c2:	4318      	orrs	r0, r3
    c3c4:	2206      	movs	r2, #6
    c3c6:	492b      	ldr	r1, [pc, #172]	; (c474 <InitDefault433Channels+0xe4>)
    c3c8:	4d2b      	ldr	r5, [pc, #172]	; (c478 <InitDefault433Channels+0xe8>)
    c3ca:	47a8      	blx	r5
    memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels433) );
    c3cc:	7a20      	ldrb	r0, [r4, #8]
    c3ce:	7a63      	ldrb	r3, [r4, #9]
    c3d0:	021b      	lsls	r3, r3, #8
    c3d2:	4303      	orrs	r3, r0
    c3d4:	7aa0      	ldrb	r0, [r4, #10]
    c3d6:	0400      	lsls	r0, r0, #16
    c3d8:	4303      	orrs	r3, r0
    c3da:	7ae0      	ldrb	r0, [r4, #11]
    c3dc:	0600      	lsls	r0, r0, #24
    c3de:	4318      	orrs	r0, r3
    c3e0:	2224      	movs	r2, #36	; 0x24
    c3e2:	2100      	movs	r1, #0
    c3e4:	47b0      	blx	r6
    memcpy (RegParams.pOtherChParams, AdvChannels433, sizeof(AdvChannels433) );
    c3e6:	7a20      	ldrb	r0, [r4, #8]
    c3e8:	7a63      	ldrb	r3, [r4, #9]
    c3ea:	021b      	lsls	r3, r3, #8
    c3ec:	4303      	orrs	r3, r0
    c3ee:	7aa0      	ldrb	r0, [r4, #10]
    c3f0:	0400      	lsls	r0, r0, #16
    c3f2:	4303      	orrs	r3, r0
    c3f4:	7ae0      	ldrb	r0, [r4, #11]
    c3f6:	0600      	lsls	r0, r0, #24
    c3f8:	4318      	orrs	r0, r3
    c3fa:	2224      	movs	r2, #36	; 0x24
    c3fc:	491f      	ldr	r1, [pc, #124]	; (c47c <InitDefault433Channels+0xec>)
    c3fe:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParams433) );
    c400:	7b20      	ldrb	r0, [r4, #12]
    c402:	7b63      	ldrb	r3, [r4, #13]
    c404:	021b      	lsls	r3, r3, #8
    c406:	4303      	orrs	r3, r0
    c408:	7ba0      	ldrb	r0, [r4, #14]
    c40a:	0400      	lsls	r0, r0, #16
    c40c:	4303      	orrs	r3, r0
    c40e:	7be0      	ldrb	r0, [r4, #15]
    c410:	0600      	lsls	r0, r0, #24
    c412:	4318      	orrs	r0, r3
    c414:	220c      	movs	r2, #12
    c416:	2100      	movs	r1, #0
    c418:	47b0      	blx	r6
	memcpy (RegParams.pSubBandParams, SubBandParams433, sizeof(SubBandParams433) );	
    c41a:	7b20      	ldrb	r0, [r4, #12]
    c41c:	7b63      	ldrb	r3, [r4, #13]
    c41e:	021b      	lsls	r3, r3, #8
    c420:	4303      	orrs	r3, r0
    c422:	7ba0      	ldrb	r0, [r4, #14]
    c424:	0400      	lsls	r0, r0, #16
    c426:	4303      	orrs	r3, r0
    c428:	7be0      	ldrb	r0, [r4, #15]
    c42a:	0600      	lsls	r0, r0, #24
    c42c:	4318      	orrs	r0, r3
    c42e:	220c      	movs	r2, #12
    c430:	4913      	ldr	r1, [pc, #76]	; (c480 <InitDefault433Channels+0xf0>)
    c432:	47a8      	blx	r5
	
    for (i = 3; i < RegParams.maxChannels; i++)
    c434:	232a      	movs	r3, #42	; 0x2a
    c436:	56e3      	ldrsb	r3, [r4, r3]
    c438:	2b03      	cmp	r3, #3
    c43a:	dd15      	ble.n	c468 <InitDefault433Channels+0xd8>
    c43c:	2303      	movs	r3, #3
    {
        // for undefined channels the duty cycle should be a very big value, and the data range a not-valid value
        //duty cycle 0 means no duty cycle limitation, the bigger the duty cycle value, the greater the limitation
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    c43e:	480b      	ldr	r0, [pc, #44]	; (c46c <InitDefault433Channels+0xdc>)
    c440:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    c442:	242a      	movs	r4, #42	; 0x2a
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    c444:	7902      	ldrb	r2, [r0, #4]
    c446:	7941      	ldrb	r1, [r0, #5]
    c448:	0209      	lsls	r1, r1, #8
    c44a:	4311      	orrs	r1, r2
    c44c:	7982      	ldrb	r2, [r0, #6]
    c44e:	0412      	lsls	r2, r2, #16
    c450:	4311      	orrs	r1, r2
    c452:	79c2      	ldrb	r2, [r0, #7]
    c454:	0612      	lsls	r2, r2, #24
    c456:	430a      	orrs	r2, r1
    c458:	0059      	lsls	r1, r3, #1
    c45a:	188a      	adds	r2, r1, r2
    c45c:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    c45e:	3301      	adds	r3, #1
    c460:	b2db      	uxtb	r3, r3
    c462:	5702      	ldrsb	r2, [r0, r4]
    c464:	4293      	cmp	r3, r2
    c466:	dbed      	blt.n	c444 <InitDefault433Channels+0xb4>
    }
}
    c468:	bd70      	pop	{r4, r5, r6, pc}
    c46a:	46c0      	nop			; (mov r8, r8)
    c46c:	200029ac 	.word	0x200029ac
    c470:	000161c9 	.word	0x000161c9
    c474:	0001819c 	.word	0x0001819c
    c478:	000161b7 	.word	0x000161b7
    c47c:	00018154 	.word	0x00018154
    c480:	000181b8 	.word	0x000181b8

0000c484 <InitDefault920Channels>:
/*
 * \brief This function initializes all the IN865 Channels to default values
 */
#if (JPN_BAND == 1)
void InitDefault920Channels (void)
{
    c484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
    memset (RegParams.pChParams, 0, sizeof(DefaultChannels923JP) );
    c486:	4c40      	ldr	r4, [pc, #256]	; (c588 <InitDefault920Channels+0x104>)
    c488:	7920      	ldrb	r0, [r4, #4]
    c48a:	7963      	ldrb	r3, [r4, #5]
    c48c:	021b      	lsls	r3, r3, #8
    c48e:	4303      	orrs	r3, r0
    c490:	79a0      	ldrb	r0, [r4, #6]
    c492:	0400      	lsls	r0, r0, #16
    c494:	4303      	orrs	r3, r0
    c496:	79e0      	ldrb	r0, [r4, #7]
    c498:	0600      	lsls	r0, r0, #24
    c49a:	4318      	orrs	r0, r3
    c49c:	2204      	movs	r2, #4
    c49e:	2100      	movs	r1, #0
    c4a0:	4e3a      	ldr	r6, [pc, #232]	; (c58c <InitDefault920Channels+0x108>)
    c4a2:	47b0      	blx	r6
	memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels923JP) );
    c4a4:	7a20      	ldrb	r0, [r4, #8]
    c4a6:	7a63      	ldrb	r3, [r4, #9]
    c4a8:	021b      	lsls	r3, r3, #8
    c4aa:	4303      	orrs	r3, r0
    c4ac:	7aa0      	ldrb	r0, [r4, #10]
    c4ae:	0400      	lsls	r0, r0, #16
    c4b0:	4303      	orrs	r3, r0
    c4b2:	7ae0      	ldrb	r0, [r4, #11]
    c4b4:	0600      	lsls	r0, r0, #24
    c4b6:	4318      	orrs	r0, r3
    c4b8:	2218      	movs	r2, #24
    c4ba:	2100      	movs	r1, #0
    c4bc:	47b0      	blx	r6
    memcpy (RegParams.pChParams, DefaultChannels923JP, sizeof(DefaultChannels923JP) );
    c4be:	7920      	ldrb	r0, [r4, #4]
    c4c0:	7963      	ldrb	r3, [r4, #5]
    c4c2:	021b      	lsls	r3, r3, #8
    c4c4:	4303      	orrs	r3, r0
    c4c6:	79a0      	ldrb	r0, [r4, #6]
    c4c8:	0400      	lsls	r0, r0, #16
    c4ca:	4303      	orrs	r3, r0
    c4cc:	79e0      	ldrb	r0, [r4, #7]
    c4ce:	0600      	lsls	r0, r0, #24
    c4d0:	4318      	orrs	r0, r3
    c4d2:	2204      	movs	r2, #4
    c4d4:	492e      	ldr	r1, [pc, #184]	; (c590 <InitDefault920Channels+0x10c>)
    c4d6:	4d2f      	ldr	r5, [pc, #188]	; (c594 <InitDefault920Channels+0x110>)
    c4d8:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels923JP, sizeof(AdvChannels923JP) );
    c4da:	7a20      	ldrb	r0, [r4, #8]
    c4dc:	7a63      	ldrb	r3, [r4, #9]
    c4de:	021b      	lsls	r3, r3, #8
    c4e0:	4303      	orrs	r3, r0
    c4e2:	7aa0      	ldrb	r0, [r4, #10]
    c4e4:	0400      	lsls	r0, r0, #16
    c4e6:	4303      	orrs	r3, r0
    c4e8:	7ae0      	ldrb	r0, [r4, #11]
    c4ea:	0600      	lsls	r0, r0, #24
    c4ec:	4318      	orrs	r0, r3
    c4ee:	2218      	movs	r2, #24
    c4f0:	4929      	ldr	r1, [pc, #164]	; (c598 <InitDefault920Channels+0x114>)
    c4f2:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParamsJP923) );
    c4f4:	7b20      	ldrb	r0, [r4, #12]
    c4f6:	7b63      	ldrb	r3, [r4, #13]
    c4f8:	021b      	lsls	r3, r3, #8
    c4fa:	4303      	orrs	r3, r0
    c4fc:	7ba0      	ldrb	r0, [r4, #14]
    c4fe:	0400      	lsls	r0, r0, #16
    c500:	4303      	orrs	r3, r0
    c502:	7be0      	ldrb	r0, [r4, #15]
    c504:	0600      	lsls	r0, r0, #24
    c506:	4318      	orrs	r0, r3
    c508:	2218      	movs	r2, #24
    c50a:	2100      	movs	r1, #0
    c50c:	47b0      	blx	r6
	memcpy (RegParams.pSubBandParams, SubBandParamsJP923, sizeof(SubBandParamsJP923) );
    c50e:	7b20      	ldrb	r0, [r4, #12]
    c510:	7b63      	ldrb	r3, [r4, #13]
    c512:	021b      	lsls	r3, r3, #8
    c514:	4303      	orrs	r3, r0
    c516:	7ba0      	ldrb	r0, [r4, #14]
    c518:	0400      	lsls	r0, r0, #16
    c51a:	4303      	orrs	r3, r0
    c51c:	7be0      	ldrb	r0, [r4, #15]
    c51e:	0600      	lsls	r0, r0, #24
    c520:	4318      	orrs	r0, r3
    c522:	2218      	movs	r2, #24
    c524:	491d      	ldr	r1, [pc, #116]	; (c59c <InitDefault920Channels+0x118>)
    c526:	47a8      	blx	r5
	memset (RegParams.cmnParams.paramsType2.subBandDutyCycle,0,sizeof(SubBandDutyCycleJP923));
	memcpy (RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycleJP923,sizeof(SubBandDutyCycleJP923));
    c528:	0020      	movs	r0, r4
    c52a:	30af      	adds	r0, #175	; 0xaf
    c52c:	30ff      	adds	r0, #255	; 0xff
    c52e:	2204      	movs	r2, #4
    c530:	491b      	ldr	r1, [pc, #108]	; (c5a0 <InitDefault920Channels+0x11c>)
    c532:	47a8      	blx	r5
    for (i = 2; i < RegParams.maxChannels; i++)
    c534:	232a      	movs	r3, #42	; 0x2a
    c536:	56e3      	ldrsb	r3, [r4, r3]
    c538:	2b02      	cmp	r3, #2
    c53a:	dd1f      	ble.n	c57c <InitDefault920Channels+0xf8>
    c53c:	2302      	movs	r3, #2
    c53e:	2202      	movs	r2, #2
    {
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    c540:	4911      	ldr	r1, [pc, #68]	; (c588 <InitDefault920Channels+0x104>)
    c542:	27ff      	movs	r7, #255	; 0xff
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    c544:	2500      	movs	r5, #0
    for (i = 2; i < RegParams.maxChannels; i++)
    c546:	262a      	movs	r6, #42	; 0x2a
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    c548:	7908      	ldrb	r0, [r1, #4]
    c54a:	794c      	ldrb	r4, [r1, #5]
    c54c:	0224      	lsls	r4, r4, #8
    c54e:	4304      	orrs	r4, r0
    c550:	7988      	ldrb	r0, [r1, #6]
    c552:	0400      	lsls	r0, r0, #16
    c554:	4304      	orrs	r4, r0
    c556:	79c8      	ldrb	r0, [r1, #7]
    c558:	0600      	lsls	r0, r0, #24
    c55a:	4320      	orrs	r0, r4
    c55c:	0054      	lsls	r4, r2, #1
    c55e:	1820      	adds	r0, r4, r0
    c560:	7047      	strb	r7, [r0, #1]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    c562:	3358      	adds	r3, #88	; 0x58
    c564:	009b      	lsls	r3, r3, #2
    c566:	18cb      	adds	r3, r1, r3
    c568:	725d      	strb	r5, [r3, #9]
    c56a:	729d      	strb	r5, [r3, #10]
    c56c:	72dd      	strb	r5, [r3, #11]
    c56e:	731d      	strb	r5, [r3, #12]
    for (i = 2; i < RegParams.maxChannels; i++)
    c570:	3201      	adds	r2, #1
    c572:	b2d2      	uxtb	r2, r2
    c574:	0013      	movs	r3, r2
    c576:	5788      	ldrsb	r0, [r1, r6]
    c578:	4282      	cmp	r2, r0
    c57a:	dbe5      	blt.n	c548 <InitDefault920Channels+0xc4>
    }
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    c57c:	21ff      	movs	r1, #255	; 0xff
    c57e:	2330      	movs	r3, #48	; 0x30
    c580:	4a01      	ldr	r2, [pc, #4]	; (c588 <InitDefault920Channels+0x104>)
    c582:	54d1      	strb	r1, [r2, r3]
}
    c584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c586:	46c0      	nop			; (mov r8, r8)
    c588:	200029ac 	.word	0x200029ac
    c58c:	000161c9 	.word	0x000161c9
    c590:	00018224 	.word	0x00018224
    c594:	000161b7 	.word	0x000161b7
    c598:	0001820c 	.word	0x0001820c
    c59c:	0001822c 	.word	0x0001822c
    c5a0:	00018228 	.word	0x00018228

0000c5a4 <InitDefault920ChannelsKR>:
/*
 * \brief This function initializes all the IN865 Channels to default values
 */
#if (KR_BAND == 1)
void InitDefault920ChannelsKR (void)
{
    c5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c5a6:	46d6      	mov	lr, sl
    c5a8:	464f      	mov	r7, r9
    c5aa:	4646      	mov	r6, r8
    c5ac:	b5c0      	push	{r6, r7, lr}
    uint8_t i;
    memset (RegParams.pChParams, 0, sizeof(DefaultChannels920KR) );
    c5ae:	4c46      	ldr	r4, [pc, #280]	; (c6c8 <InitDefault920ChannelsKR+0x124>)
    c5b0:	7920      	ldrb	r0, [r4, #4]
    c5b2:	7963      	ldrb	r3, [r4, #5]
    c5b4:	021b      	lsls	r3, r3, #8
    c5b6:	4303      	orrs	r3, r0
    c5b8:	79a0      	ldrb	r0, [r4, #6]
    c5ba:	0400      	lsls	r0, r0, #16
    c5bc:	4303      	orrs	r3, r0
    c5be:	79e0      	ldrb	r0, [r4, #7]
    c5c0:	0600      	lsls	r0, r0, #24
    c5c2:	4318      	orrs	r0, r3
    c5c4:	2206      	movs	r2, #6
    c5c6:	2100      	movs	r1, #0
    c5c8:	4d40      	ldr	r5, [pc, #256]	; (c6cc <InitDefault920ChannelsKR+0x128>)
    c5ca:	47a8      	blx	r5
	memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels920KR) );
    c5cc:	7a20      	ldrb	r0, [r4, #8]
    c5ce:	7a63      	ldrb	r3, [r4, #9]
    c5d0:	021b      	lsls	r3, r3, #8
    c5d2:	4303      	orrs	r3, r0
    c5d4:	7aa0      	ldrb	r0, [r4, #10]
    c5d6:	0400      	lsls	r0, r0, #16
    c5d8:	4303      	orrs	r3, r0
    c5da:	7ae0      	ldrb	r0, [r4, #11]
    c5dc:	0600      	lsls	r0, r0, #24
    c5de:	4318      	orrs	r0, r3
    c5e0:	2224      	movs	r2, #36	; 0x24
    c5e2:	2100      	movs	r1, #0
    c5e4:	47a8      	blx	r5
    memcpy (RegParams.pChParams, DefaultChannels920KR, sizeof(DefaultChannels920KR) );
    c5e6:	7920      	ldrb	r0, [r4, #4]
    c5e8:	7963      	ldrb	r3, [r4, #5]
    c5ea:	021b      	lsls	r3, r3, #8
    c5ec:	4303      	orrs	r3, r0
    c5ee:	79a0      	ldrb	r0, [r4, #6]
    c5f0:	0400      	lsls	r0, r0, #16
    c5f2:	4303      	orrs	r3, r0
    c5f4:	79e0      	ldrb	r0, [r4, #7]
    c5f6:	0600      	lsls	r0, r0, #24
    c5f8:	4318      	orrs	r0, r3
    c5fa:	2206      	movs	r2, #6
    c5fc:	4934      	ldr	r1, [pc, #208]	; (c6d0 <InitDefault920ChannelsKR+0x12c>)
    c5fe:	4d35      	ldr	r5, [pc, #212]	; (c6d4 <InitDefault920ChannelsKR+0x130>)
    c600:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels920KR, sizeof(AdvChannels920KR) );
    c602:	7a20      	ldrb	r0, [r4, #8]
    c604:	7a63      	ldrb	r3, [r4, #9]
    c606:	021b      	lsls	r3, r3, #8
    c608:	4303      	orrs	r3, r0
    c60a:	7aa0      	ldrb	r0, [r4, #10]
    c60c:	0400      	lsls	r0, r0, #16
    c60e:	4303      	orrs	r3, r0
    c610:	7ae0      	ldrb	r0, [r4, #11]
    c612:	0600      	lsls	r0, r0, #24
    c614:	4318      	orrs	r0, r3
    c616:	2224      	movs	r2, #36	; 0x24
    c618:	492f      	ldr	r1, [pc, #188]	; (c6d8 <InitDefault920ChannelsKR+0x134>)
    c61a:	47a8      	blx	r5
    for (i = 3; i < RegParams.maxChannels; i++)
    c61c:	232a      	movs	r3, #42	; 0x2a
    c61e:	56e3      	ldrsb	r3, [r4, r3]
    c620:	2b03      	cmp	r3, #3
    c622:	dd48      	ble.n	c6b6 <InitDefault920ChannelsKR+0x112>
    c624:	2103      	movs	r1, #3
    c626:	2003      	movs	r0, #3
    {
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    c628:	4b27      	ldr	r3, [pc, #156]	; (c6c8 <InitDefault920ChannelsKR+0x124>)
    c62a:	26ff      	movs	r6, #255	; 0xff
		RegParams.pChParams[i].status = DISABLED;
    c62c:	2500      	movs	r5, #0
		RegParams.pOtherChParams[i].joinRequestChannel = DISABLED;
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    c62e:	22e1      	movs	r2, #225	; 0xe1
    c630:	0052      	lsls	r2, r2, #1
    c632:	4690      	mov	r8, r2
    c634:	46b4      	mov	ip, r6
    for (i = 3; i < RegParams.maxChannels; i++)
    c636:	3a99      	subs	r2, #153	; 0x99
    c638:	3aff      	subs	r2, #255	; 0xff
    c63a:	4692      	mov	sl, r2
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    c63c:	0042      	lsls	r2, r0, #1
    c63e:	791c      	ldrb	r4, [r3, #4]
    c640:	46a1      	mov	r9, r4
    c642:	795c      	ldrb	r4, [r3, #5]
    c644:	0224      	lsls	r4, r4, #8
    c646:	464f      	mov	r7, r9
    c648:	4327      	orrs	r7, r4
    c64a:	799c      	ldrb	r4, [r3, #6]
    c64c:	0424      	lsls	r4, r4, #16
    c64e:	4327      	orrs	r7, r4
    c650:	79dc      	ldrb	r4, [r3, #7]
    c652:	0624      	lsls	r4, r4, #24
    c654:	433c      	orrs	r4, r7
    c656:	18a4      	adds	r4, r4, r2
    c658:	7066      	strb	r6, [r4, #1]
		RegParams.pChParams[i].status = DISABLED;
    c65a:	791c      	ldrb	r4, [r3, #4]
    c65c:	46a1      	mov	r9, r4
    c65e:	795c      	ldrb	r4, [r3, #5]
    c660:	0224      	lsls	r4, r4, #8
    c662:	464f      	mov	r7, r9
    c664:	4327      	orrs	r7, r4
    c666:	799c      	ldrb	r4, [r3, #6]
    c668:	0424      	lsls	r4, r4, #16
    c66a:	4327      	orrs	r7, r4
    c66c:	79dc      	ldrb	r4, [r3, #7]
    c66e:	0624      	lsls	r4, r4, #24
    c670:	433c      	orrs	r4, r7
    c672:	54a5      	strb	r5, [r4, r2]
		RegParams.pOtherChParams[i].joinRequestChannel = DISABLED;
    c674:	7a1c      	ldrb	r4, [r3, #8]
    c676:	46a1      	mov	r9, r4
    c678:	7a5c      	ldrb	r4, [r3, #9]
    c67a:	0224      	lsls	r4, r4, #8
    c67c:	464f      	mov	r7, r9
    c67e:	4327      	orrs	r7, r4
    c680:	7a9c      	ldrb	r4, [r3, #10]
    c682:	0424      	lsls	r4, r4, #16
    c684:	4327      	orrs	r7, r4
    c686:	7adc      	ldrb	r4, [r3, #11]
    c688:	0624      	lsls	r4, r4, #24
    c68a:	433c      	orrs	r4, r7
    c68c:	1812      	adds	r2, r2, r0
    c68e:	0092      	lsls	r2, r2, #2
    c690:	1912      	adds	r2, r2, r4
    c692:	7255      	strb	r5, [r2, #9]
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    c694:	4642      	mov	r2, r8
    c696:	4664      	mov	r4, ip
    c698:	549c      	strb	r4, [r3, r2]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    c69a:	3158      	adds	r1, #88	; 0x58
    c69c:	0089      	lsls	r1, r1, #2
    c69e:	1859      	adds	r1, r3, r1
    c6a0:	724d      	strb	r5, [r1, #9]
    c6a2:	728d      	strb	r5, [r1, #10]
    c6a4:	72cd      	strb	r5, [r1, #11]
    c6a6:	730d      	strb	r5, [r1, #12]
    for (i = 3; i < RegParams.maxChannels; i++)
    c6a8:	3001      	adds	r0, #1
    c6aa:	b2c0      	uxtb	r0, r0
    c6ac:	0001      	movs	r1, r0
    c6ae:	4652      	mov	r2, sl
    c6b0:	569a      	ldrsb	r2, [r3, r2]
    c6b2:	4290      	cmp	r0, r2
    c6b4:	dbc2      	blt.n	c63c <InitDefault920ChannelsKR+0x98>
    }
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    c6b6:	21ff      	movs	r1, #255	; 0xff
    c6b8:	2330      	movs	r3, #48	; 0x30
    c6ba:	4a03      	ldr	r2, [pc, #12]	; (c6c8 <InitDefault920ChannelsKR+0x124>)
    c6bc:	54d1      	strb	r1, [r2, r3]
}
    c6be:	bc1c      	pop	{r2, r3, r4}
    c6c0:	4690      	mov	r8, r2
    c6c2:	4699      	mov	r9, r3
    c6c4:	46a2      	mov	sl, r4
    c6c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c6c8:	200029ac 	.word	0x200029ac
    c6cc:	000161c9 	.word	0x000161c9
    c6d0:	00018268 	.word	0x00018268
    c6d4:	000161b7 	.word	0x000161b7
    c6d8:	00018244 	.word	0x00018244

0000c6dc <LORAREG_GetAttr>:
 * \param[out] Result of the GET operation
 * \retval LORAWAN_SUCCESS : If GET is successful
 *	LORAWAN_INVALID_PARAMETER if the input attribute or the attribute type is invalid
 */
StackRetStatus_t LORAREG_GetAttr(LorawanRegionalAttributes_t attrType, void *attrInput, void *attrOutput)
{
    c6dc:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    c6de:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    c6e0:	283c      	cmp	r0, #60	; 0x3c
    c6e2:	d901      	bls.n	c6e8 <LORAREG_GetAttr+0xc>
	{
	    result = pGetAttr[attrType](attrType, attrInput,attrOutput);	
	}

	return result;
}
    c6e4:	0018      	movs	r0, r3
    c6e6:	bd10      	pop	{r4, pc}
	    result = pGetAttr[attrType](attrType, attrInput,attrOutput);	
    c6e8:	0084      	lsls	r4, r0, #2
    c6ea:	4b02      	ldr	r3, [pc, #8]	; (c6f4 <LORAREG_GetAttr+0x18>)
    c6ec:	58e3      	ldr	r3, [r4, r3]
    c6ee:	4798      	blx	r3
    c6f0:	0003      	movs	r3, r0
    c6f2:	e7f7      	b.n	c6e4 <LORAREG_GetAttr+0x8>
    c6f4:	20001b74 	.word	0x20001b74

0000c6f8 <LORAREG_ValidateAttr>:
 * \param[in] attrInput Input used to validate the attribute value
 * \retval LORAWAN_SUCCESS : If Validate is successful
 *	LORAWAN_INVALID_PARAMETER if the input attribute or the attribute type is invalid
 */
StackRetStatus_t LORAREG_ValidateAttr(LorawanRegionalAttributes_t attrType, void *attrInput)
{
    c6f8:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    c6fa:	230a      	movs	r3, #10
	
	if(attrType < REG_NUM_ATTRIBUTES)
    c6fc:	283c      	cmp	r0, #60	; 0x3c
    c6fe:	d901      	bls.n	c704 <LORAREG_ValidateAttr+0xc>
	{
	    result = pValidateAttr[attrType](attrType, attrInput);		
	}

	return result;
}
    c700:	0018      	movs	r0, r3
    c702:	bd10      	pop	{r4, pc}
	    result = pValidateAttr[attrType](attrType, attrInput);		
    c704:	0082      	lsls	r2, r0, #2
    c706:	4b02      	ldr	r3, [pc, #8]	; (c710 <LORAREG_ValidateAttr+0x18>)
    c708:	58d3      	ldr	r3, [r2, r3]
    c70a:	4798      	blx	r3
    c70c:	0003      	movs	r3, r0
    c70e:	e7f7      	b.n	c700 <LORAREG_ValidateAttr+0x8>
    c710:	20001d5c 	.word	0x20001d5c

0000c714 <LORAREG_SetAttr>:
 * \param[in] attrInput Input used to update the attribute value
 * \retval LORAWAN_SUCCESS : If Update is successful
 *	LORAWAN_INVALID_PARAMETER if the input attribute or the attribute type is invalid
 */
StackRetStatus_t LORAREG_SetAttr(LorawanRegionalAttributes_t attrType, void *attrInput)
{
    c714:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    c716:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    c718:	283c      	cmp	r0, #60	; 0x3c
    c71a:	d901      	bls.n	c720 <LORAREG_SetAttr+0xc>
	{
	    result = pSetAttr[attrType](attrType, attrInput);		
	}

	return result;
}
    c71c:	0018      	movs	r0, r3
    c71e:	bd10      	pop	{r4, pc}
	    result = pSetAttr[attrType](attrType, attrInput);		
    c720:	0082      	lsls	r2, r0, #2
    c722:	4b02      	ldr	r3, [pc, #8]	; (c72c <LORAREG_SetAttr+0x18>)
    c724:	58d3      	ldr	r3, [r2, r3]
    c726:	4798      	blx	r3
    c728:	0003      	movs	r3, r0
    c72a:	e7f7      	b.n	c71c <LORAREG_SetAttr+0x8>
    c72c:	20001c68 	.word	0x20001c68

0000c730 <setDefaultTxPower>:
}
#endif
StackRetStatus_t setDefaultTxPower(IsmBand_t ismBand)
{   
	StackRetStatus_t result = LORAWAN_SUCCESS;
	if(ismBand == ISM_EU868)
    c730:	2800      	cmp	r0, #0
    c732:	d00e      	beq.n	c752 <setDefaultTxPower+0x22>
	{
			RegParams.MacTxPower = MAC_DEF_TX_POWER_EU;
	}
	else if(ismBand == ISM_JPN923)
    c734:	2805      	cmp	r0, #5
    c736:	d013      	beq.n	c760 <setDefaultTxPower+0x30>
	{
		RegParams.MacTxPower = MAC_DEF_TX_POWER_JP;
	}
	else if (ismBand == ISM_KR920)
    c738:	2804      	cmp	r0, #4
    c73a:	d017      	beq.n	c76c <setDefaultTxPower+0x3c>
	}
	else if (ismBand == ISM_ASBAND)
	{
		RegParams.MacTxPower = MAC_DEF_TX_POWER_AS;
	}
	else if(ismBand == ISM_AU915)
    c73c:	2803      	cmp	r0, #3
    c73e:	d01b      	beq.n	c778 <setDefaultTxPower+0x48>
	{
		RegParams.MacTxPower = MAC_DEF_TX_POWER_NA;
	}
	else
	{
		result = LORAWAN_INVALID_PARAMETER;
    c740:	230a      	movs	r3, #10
	else if(ismBand == ISM_NA915)
    c742:	2802      	cmp	r0, #2
    c744:	d10a      	bne.n	c75c <setDefaultTxPower+0x2c>
		RegParams.MacTxPower = MAC_DEF_TX_POWER_NA;
    c746:	2107      	movs	r1, #7
    c748:	331d      	adds	r3, #29
    c74a:	4a0e      	ldr	r2, [pc, #56]	; (c784 <setDefaultTxPower+0x54>)
    c74c:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c74e:	3b1f      	subs	r3, #31
    c750:	e004      	b.n	c75c <setDefaultTxPower+0x2c>
			RegParams.MacTxPower = MAC_DEF_TX_POWER_EU;
    c752:	2101      	movs	r1, #1
    c754:	2327      	movs	r3, #39	; 0x27
    c756:	4a0b      	ldr	r2, [pc, #44]	; (c784 <setDefaultTxPower+0x54>)
    c758:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c75a:	3b1f      	subs	r3, #31
	}
#if (ENABLE_PDS==1)
	PDS_STORE(RegParams.MacTxPower);
#endif
	return result;
}
    c75c:	0018      	movs	r0, r3
    c75e:	4770      	bx	lr
		RegParams.MacTxPower = MAC_DEF_TX_POWER_JP;
    c760:	2101      	movs	r1, #1
    c762:	2327      	movs	r3, #39	; 0x27
    c764:	4a07      	ldr	r2, [pc, #28]	; (c784 <setDefaultTxPower+0x54>)
    c766:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c768:	3b1f      	subs	r3, #31
    c76a:	e7f7      	b.n	c75c <setDefaultTxPower+0x2c>
		RegParams.MacTxPower = MAC_DEF_TX_POWER_KR;
    c76c:	2101      	movs	r1, #1
    c76e:	2327      	movs	r3, #39	; 0x27
    c770:	4a04      	ldr	r2, [pc, #16]	; (c784 <setDefaultTxPower+0x54>)
    c772:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c774:	3b1f      	subs	r3, #31
    c776:	e7f1      	b.n	c75c <setDefaultTxPower+0x2c>
		RegParams.MacTxPower = MAC_DEF_TX_POWER_AU;
    c778:	2107      	movs	r1, #7
    c77a:	2327      	movs	r3, #39	; 0x27
    c77c:	4a01      	ldr	r2, [pc, #4]	; (c784 <setDefaultTxPower+0x54>)
    c77e:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c780:	3b1f      	subs	r3, #31
    c782:	e7eb      	b.n	c75c <setDefaultTxPower+0x2c>
    c784:	200029ac 	.word	0x200029ac

0000c788 <Enableallchannels>:
	}
	return status;
}
#endif
void Enableallchannels()
{
    c788:	b510      	push	{r4, lr}
    c78a:	2000      	movs	r0, #0
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
	{
		RegParams.pChParams[i].status = ENABLED;
    c78c:	490a      	ldr	r1, [pc, #40]	; (c7b8 <Enableallchannels+0x30>)
    c78e:	2401      	movs	r4, #1
    c790:	790b      	ldrb	r3, [r1, #4]
    c792:	794a      	ldrb	r2, [r1, #5]
    c794:	0212      	lsls	r2, r2, #8
    c796:	431a      	orrs	r2, r3
    c798:	798b      	ldrb	r3, [r1, #6]
    c79a:	041b      	lsls	r3, r3, #16
    c79c:	431a      	orrs	r2, r3
    c79e:	79cb      	ldrb	r3, [r1, #7]
    c7a0:	061b      	lsls	r3, r3, #24
    c7a2:	4313      	orrs	r3, r2
    c7a4:	541c      	strb	r4, [r3, r0]
    c7a6:	3002      	adds	r0, #2
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
    c7a8:	2890      	cmp	r0, #144	; 0x90
    c7aa:	d1f1      	bne.n	c790 <Enableallchannels+0x8>
	}
	RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    c7ac:	2100      	movs	r1, #0
    c7ae:	23ac      	movs	r3, #172	; 0xac
    c7b0:	005b      	lsls	r3, r3, #1
    c7b2:	4a01      	ldr	r2, [pc, #4]	; (c7b8 <Enableallchannels+0x30>)
    c7b4:	54d1      	strb	r1, [r2, r3]
#if (ENABLE_PDS == 1)
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
	PDS_STORE(RegParams.regParamItems.lastUsedSB);
#endif
}
    c7b6:	bd10      	pop	{r4, pc}
    c7b8:	200029ac 	.word	0x200029ac

0000c7bc <LORAREG_EnableallChannels>:
StackRetStatus_t LORAREG_EnableallChannels(IsmBand_t ismBand)
{
    c7bc:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_SUCCESS;
	if(ismBand == ISM_EU868)
    c7be:	2800      	cmp	r0, #0
    c7c0:	d00a      	beq.n	c7d8 <LORAREG_EnableallChannels+0x1c>
	{
		 InitDefault868Channels();
	}
	else if (ismBand == ISM_EU433)
    c7c2:	2801      	cmp	r0, #1
    c7c4:	d00b      	beq.n	c7de <LORAREG_EnableallChannels+0x22>
	{
		 InitDefault433Channels();
	}
	else if(ismBand == ISM_JPN923)
    c7c6:	2805      	cmp	r0, #5
    c7c8:	d00c      	beq.n	c7e4 <LORAREG_EnableallChannels+0x28>
	{
		 InitDefault920Channels();	
	}
	else if (ismBand == ISM_KR920)
    c7ca:	2804      	cmp	r0, #4
    c7cc:	d00d      	beq.n	c7ea <LORAREG_EnableallChannels+0x2e>
	}
	else if (ismBand == ISM_ASBAND)
	{
		 InitDefault923Channels ();
	}
	else if(ismBand == ISM_AU915 || ismBand == ISM_NA915)
    c7ce:	3802      	subs	r0, #2
    c7d0:	2801      	cmp	r0, #1
    c7d2:	d90d      	bls.n	c7f0 <LORAREG_EnableallChannels+0x34>
	{
		 Enableallchannels();
	}
	return result;
}
    c7d4:	2008      	movs	r0, #8
    c7d6:	bd10      	pop	{r4, pc}
		 InitDefault868Channels();
    c7d8:	4b07      	ldr	r3, [pc, #28]	; (c7f8 <LORAREG_EnableallChannels+0x3c>)
    c7da:	4798      	blx	r3
    c7dc:	e7fa      	b.n	c7d4 <LORAREG_EnableallChannels+0x18>
		 InitDefault433Channels();
    c7de:	4b07      	ldr	r3, [pc, #28]	; (c7fc <LORAREG_EnableallChannels+0x40>)
    c7e0:	4798      	blx	r3
    c7e2:	e7f7      	b.n	c7d4 <LORAREG_EnableallChannels+0x18>
		 InitDefault920Channels();	
    c7e4:	4b06      	ldr	r3, [pc, #24]	; (c800 <LORAREG_EnableallChannels+0x44>)
    c7e6:	4798      	blx	r3
    c7e8:	e7f4      	b.n	c7d4 <LORAREG_EnableallChannels+0x18>
		 InitDefault920ChannelsKR();
    c7ea:	4b06      	ldr	r3, [pc, #24]	; (c804 <LORAREG_EnableallChannels+0x48>)
    c7ec:	4798      	blx	r3
    c7ee:	e7f1      	b.n	c7d4 <LORAREG_EnableallChannels+0x18>
		 Enableallchannels();
    c7f0:	4b05      	ldr	r3, [pc, #20]	; (c808 <LORAREG_EnableallChannels+0x4c>)
    c7f2:	4798      	blx	r3
    c7f4:	e7ee      	b.n	c7d4 <LORAREG_EnableallChannels+0x18>
    c7f6:	46c0      	nop			; (mov r8, r8)
    c7f8:	0000c28d 	.word	0x0000c28d
    c7fc:	0000c391 	.word	0x0000c391
    c800:	0000c485 	.word	0x0000c485
    c804:	0000c5a5 	.word	0x0000c5a5
    c808:	0000c789 	.word	0x0000c789

0000c80c <AESEncode>:
 * \brief Encrypts the given block of data
 * \param[in,out] block Block of input data to be encrypted
 * \param[in] key Cryptographic key to be used in AES encryption
 */
void AESEncode(unsigned char* block, unsigned char* masterKey)
{
    c80c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c80e:	b083      	sub	sp, #12
    c810:	0004      	movs	r4, r0
    c812:	000e      	movs	r6, r1
#ifndef UT	
	
	/* Configure the AES. */
	g_aes_cfg.encrypt_mode = AES_ENCRYPTION;
    c814:	4a2b      	ldr	r2, [pc, #172]	; (c8c4 <AESEncode+0xb8>)
    c816:	2101      	movs	r1, #1
    c818:	7011      	strb	r1, [r2, #0]
	g_aes_cfg.key_size = AES_KEY_SIZE_128;
    c81a:	2300      	movs	r3, #0
    c81c:	7053      	strb	r3, [r2, #1]
	g_aes_cfg.start_mode = AES_AUTO_START;
    c81e:	7091      	strb	r1, [r2, #2]
	g_aes_cfg.opmode = AES_ECB_MODE;
    c820:	70d3      	strb	r3, [r2, #3]
	g_aes_cfg.cfb_size = AES_CFB_SIZE_128;
    c822:	7113      	strb	r3, [r2, #4]
	g_aes_cfg.lod = false;
    c824:	7213      	strb	r3, [r2, #8]
	aes_set_config(&aes_instance,AES, &g_aes_cfg);
    c826:	4928      	ldr	r1, [pc, #160]	; (c8c8 <AESEncode+0xbc>)
    c828:	4828      	ldr	r0, [pc, #160]	; (c8cc <AESEncode+0xc0>)
    c82a:	4b29      	ldr	r3, [pc, #164]	; (c8d0 <AESEncode+0xc4>)
    c82c:	4798      	blx	r3
    c82e:	2100      	movs	r1, #0
		uint8_t u8[4];
	}long_addr;
	uint8_t index;
	for (index = 0; index < 4; index++)
	{
		long_addr.u8[index] = *data++;
    c830:	ad01      	add	r5, sp, #4
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(masterKey+(i*(sizeof(uint32_t))));
    c832:	4f28      	ldr	r7, [pc, #160]	; (c8d4 <AESEncode+0xc8>)
    c834:	1870      	adds	r0, r6, r1
    c836:	2300      	movs	r3, #0
    c838:	5cc2      	ldrb	r2, [r0, r3]
    c83a:	555a      	strb	r2, [r3, r5]
    c83c:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    c83e:	2b04      	cmp	r3, #4
    c840:	d1fa      	bne.n	c838 <AESEncode+0x2c>
    c842:	9b01      	ldr	r3, [sp, #4]
    c844:	51cb      	str	r3, [r1, r7]
    c846:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    c848:	2910      	cmp	r1, #16
    c84a:	d1f3      	bne.n	c834 <AESEncode+0x28>
	}
	
	/* Set the cryptographic key. */
	aes_write_key(&aes_instance, io_data);
    c84c:	4d1f      	ldr	r5, [pc, #124]	; (c8cc <AESEncode+0xc0>)
    c84e:	4921      	ldr	r1, [pc, #132]	; (c8d4 <AESEncode+0xc8>)
    c850:	0028      	movs	r0, r5
    c852:	4b21      	ldr	r3, [pc, #132]	; (c8d8 <AESEncode+0xcc>)
    c854:	4798      	blx	r3
 */
static inline void aes_set_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg |= AES_CTRLB_NEWMSG;
    c856:	682a      	ldr	r2, [r5, #0]
    c858:	7913      	ldrb	r3, [r2, #4]
    c85a:	2102      	movs	r1, #2
    c85c:	430b      	orrs	r3, r1
    c85e:	7113      	strb	r3, [r2, #4]
    c860:	2100      	movs	r1, #0
		long_addr.u8[index] = *data++;
    c862:	ad01      	add	r5, sp, #4
	
	aes_set_new_message(&aes_instance);
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(block+(i*(sizeof(uint32_t))));			
    c864:	4e1b      	ldr	r6, [pc, #108]	; (c8d4 <AESEncode+0xc8>)
    c866:	1860      	adds	r0, r4, r1
    c868:	2300      	movs	r3, #0
    c86a:	5cc2      	ldrb	r2, [r0, r3]
    c86c:	555a      	strb	r2, [r3, r5]
    c86e:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    c870:	2b04      	cmp	r3, #4
    c872:	d1fa      	bne.n	c86a <AESEncode+0x5e>
    c874:	9b01      	ldr	r3, [sp, #4]
    c876:	518b      	str	r3, [r1, r6]
    c878:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    c87a:	2910      	cmp	r1, #16
    c87c:	d1f3      	bne.n	c866 <AESEncode+0x5a>
	}
		
	/* Write the data to be ciphered to the input data registers. */
	aes_write_input_data(&aes_instance, io_data);
    c87e:	4d13      	ldr	r5, [pc, #76]	; (c8cc <AESEncode+0xc0>)
    c880:	4914      	ldr	r1, [pc, #80]	; (c8d4 <AESEncode+0xc8>)
    c882:	0028      	movs	r0, r5
    c884:	4b15      	ldr	r3, [pc, #84]	; (c8dc <AESEncode+0xd0>)
    c886:	4798      	blx	r3
 */
static inline void aes_clear_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg &= ~AES_CTRLB_NEWMSG;
    c888:	682d      	ldr	r5, [r5, #0]
    c88a:	792b      	ldrb	r3, [r5, #4]
    c88c:	2202      	movs	r2, #2
    c88e:	4393      	bics	r3, r2
    c890:	712b      	strb	r3, [r5, #4]
	Assert(module->hw);

	uint32_t int_flags = module->hw->INTFLAG.reg;
	uint32_t status_flags = 0;

	if (int_flags & AES_INTFLAG_ENCCMP) {
    c892:	2101      	movs	r1, #1
		status_flags |= AES_ENCRYPTION_COMPLETE;
	}

	if (int_flags & AES_INTFLAG_GFMCMP) {
    c894:	2002      	movs	r0, #2
    c896:	e001      	b.n	c89c <AESEncode+0x90>
	aes_clear_new_message(&aes_instance);
	/* Wait for the end of the encryption process. */
	while (!(aes_get_status(&aes_instance) & AES_ENCRYPTION_COMPLETE)) {
    c898:	4211      	tst	r1, r2
    c89a:	d107      	bne.n	c8ac <AESEncode+0xa0>
	uint32_t int_flags = module->hw->INTFLAG.reg;
    c89c:	79eb      	ldrb	r3, [r5, #7]
    c89e:	b2db      	uxtb	r3, r3
	if (int_flags & AES_INTFLAG_ENCCMP) {
    c8a0:	000a      	movs	r2, r1
    c8a2:	401a      	ands	r2, r3
	if (int_flags & AES_INTFLAG_GFMCMP) {
    c8a4:	4218      	tst	r0, r3
    c8a6:	d0f7      	beq.n	c898 <AESEncode+0x8c>
		status_flags |= AES_GF_MULTI_COMPLETE;
    c8a8:	4302      	orrs	r2, r0
    c8aa:	e7f5      	b.n	c898 <AESEncode+0x8c>
	}
	aes_read_output_data(&aes_instance,io_data);
    c8ac:	4d09      	ldr	r5, [pc, #36]	; (c8d4 <AESEncode+0xc8>)
    c8ae:	0029      	movs	r1, r5
    c8b0:	4806      	ldr	r0, [pc, #24]	; (c8cc <AESEncode+0xc0>)
    c8b2:	4b0b      	ldr	r3, [pc, #44]	; (c8e0 <AESEncode+0xd4>)
    c8b4:	4798      	blx	r3
	
	memcpy(block,io_data,BLOCKSIZE);
    c8b6:	2210      	movs	r2, #16
    c8b8:	0029      	movs	r1, r5
    c8ba:	0020      	movs	r0, r4
    c8bc:	4b09      	ldr	r3, [pc, #36]	; (c8e4 <AESEncode+0xd8>)
    c8be:	4798      	blx	r3
#endif	
}
    c8c0:	b003      	add	sp, #12
    c8c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c8c4:	20002bb8 	.word	0x20002bb8
    c8c8:	42003400 	.word	0x42003400
    c8cc:	20002bc4 	.word	0x20002bc4
    c8d0:	00004611 	.word	0x00004611
    c8d4:	20001e50 	.word	0x20001e50
    c8d8:	000046a5 	.word	0x000046a5
    c8dc:	000046d9 	.word	0x000046d9
    c8e0:	00004729 	.word	0x00004729
    c8e4:	000161b7 	.word	0x000161b7

0000c8e8 <AESInit>:

/**
 * \brief Initializes the AES Engine.
 */
void AESInit(void)
{
    c8e8:	b570      	push	{r4, r5, r6, lr}
#ifndef UT	
	//! [setup_config]
	aes_get_config_defaults(&g_aes_cfg);
    c8ea:	4d07      	ldr	r5, [pc, #28]	; (c908 <AESInit+0x20>)
    c8ec:	0028      	movs	r0, r5
    c8ee:	4b07      	ldr	r3, [pc, #28]	; (c90c <AESInit+0x24>)
    c8f0:	4798      	blx	r3
	//! [setup_config]

	//! [setup_config_defaults]
	aes_init(&aes_instance,AES, &g_aes_cfg);
    c8f2:	4c07      	ldr	r4, [pc, #28]	; (c910 <AESInit+0x28>)
    c8f4:	002a      	movs	r2, r5
    c8f6:	4907      	ldr	r1, [pc, #28]	; (c914 <AESInit+0x2c>)
    c8f8:	0020      	movs	r0, r4
    c8fa:	4b07      	ldr	r3, [pc, #28]	; (c918 <AESInit+0x30>)
    c8fc:	4798      	blx	r3
	//! [setup_config_defaults]
	//! [module_enable]
	aes_enable(&aes_instance);
    c8fe:	0020      	movs	r0, r4
    c900:	4b06      	ldr	r3, [pc, #24]	; (c91c <AESInit+0x34>)
    c902:	4798      	blx	r3
#endif	
}
    c904:	bd70      	pop	{r4, r5, r6, pc}
    c906:	46c0      	nop			; (mov r8, r8)
    c908:	20002bb8 	.word	0x20002bb8
    c90c:	000045d5 	.word	0x000045d5
    c910:	20002bc4 	.word	0x20002bc4
    c914:	42003400 	.word	0x42003400
    c918:	00004685 	.word	0x00004685
    c91c:	000045ef 	.word	0x000045ef

0000c920 <hwTimerExpiryCallback>:
	SYS_HwOverflow_Cb();
}

/* ISR to handle CC0 interrupt from TC0 */
static void hwTimerExpiryCallback(void)
{
    c920:	b510      	push	{r4, lr}
    if (0 < runningTimers)
    c922:	4b06      	ldr	r3, [pc, #24]	; (c93c <hwTimerExpiryCallback+0x1c>)
    c924:	781b      	ldrb	r3, [r3, #0]
    c926:	2b00      	cmp	r3, #0
    c928:	d100      	bne.n	c92c <hwTimerExpiryCallback+0xc>
    {
        isTimerTriggered = true;
        SYSTEM_PostTask(TIMER_TASK_ID);
    }
}
    c92a:	bd10      	pop	{r4, pc}
        isTimerTriggered = true;
    c92c:	2201      	movs	r2, #1
    c92e:	4b04      	ldr	r3, [pc, #16]	; (c940 <hwTimerExpiryCallback+0x20>)
    c930:	701a      	strb	r2, [r3, #0]
        SYSTEM_PostTask(TIMER_TASK_ID);
    c932:	2001      	movs	r0, #1
    c934:	4b03      	ldr	r3, [pc, #12]	; (c944 <hwTimerExpiryCallback+0x24>)
    c936:	4798      	blx	r3
}
    c938:	e7f7      	b.n	c92a <hwTimerExpiryCallback+0xa>
    c93a:	46c0      	nop			; (mov r8, r8)
    c93c:	20001e70 	.word	0x20001e70
    c940:	20002d72 	.word	0x20002d72
    c944:	0000d23d 	.word	0x0000d23d

0000c948 <hwTimerOverflowCallback>:
{
    c948:	b510      	push	{r4, lr}
    c94a:	b082      	sub	sp, #8
    uint16_t temp = sysTime;
    c94c:	4925      	ldr	r1, [pc, #148]	; (c9e4 <hwTimerOverflowCallback+0x9c>)
    c94e:	880a      	ldrh	r2, [r1, #0]
    c950:	b292      	uxth	r2, r2
    if (++sysTime < temp)
    c952:	880b      	ldrh	r3, [r1, #0]
    c954:	3301      	adds	r3, #1
    c956:	b29b      	uxth	r3, r3
    c958:	800b      	strh	r3, [r1, #0]
    c95a:	429a      	cmp	r2, r3
    c95c:	d903      	bls.n	c966 <hwTimerOverflowCallback+0x1e>
        sysTimeOvf++;
    c95e:	4a22      	ldr	r2, [pc, #136]	; (c9e8 <hwTimerOverflowCallback+0xa0>)
    c960:	6813      	ldr	r3, [r2, #0]
    c962:	3301      	adds	r3, #1
    c964:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    c966:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    c96a:	425a      	negs	r2, r3
    c96c:	4153      	adcs	r3, r2
    c96e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    c970:	b672      	cpsid	i
    c972:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    c976:	2200      	movs	r2, #0
    c978:	4b1c      	ldr	r3, [pc, #112]	; (c9ec <hwTimerOverflowCallback+0xa4>)
    c97a:	701a      	strb	r2, [r3, #0]
	return flags;
    c97c:	9c01      	ldr	r4, [sp, #4]
{
    uint32_t tmo32;
    uint16_t tmoHigh16, tmoLow16;
    uint8_t flags = cpu_irq_save();

    if (SWTIMER_INVALID != runningTimerQueueHead && !swTimers[runningTimerQueueHead].loaded)
    c97e:	4b1c      	ldr	r3, [pc, #112]	; (c9f0 <hwTimerOverflowCallback+0xa8>)
    c980:	681b      	ldr	r3, [r3, #0]
    c982:	2bff      	cmp	r3, #255	; 0xff
    c984:	d00d      	beq.n	c9a2 <hwTimerOverflowCallback+0x5a>
    c986:	0119      	lsls	r1, r3, #4
    c988:	4a1a      	ldr	r2, [pc, #104]	; (c9f4 <hwTimerOverflowCallback+0xac>)
    c98a:	1852      	adds	r2, r2, r1
    c98c:	7b52      	ldrb	r2, [r2, #13]
    c98e:	2a00      	cmp	r2, #0
    c990:	d107      	bne.n	c9a2 <hwTimerOverflowCallback+0x5a>
    {
        tmo32 = swTimers[runningTimerQueueHead].absoluteExpiryTime;
    c992:	4a18      	ldr	r2, [pc, #96]	; (c9f4 <hwTimerOverflowCallback+0xac>)
    c994:	5888      	ldr	r0, [r1, r2]
        tmoHigh16 = (uint16_t)(tmo32 >> SWTIMER_SYSTIME_SHIFTMASK);

        if (tmoHigh16 == sysTime)
    c996:	4b13      	ldr	r3, [pc, #76]	; (c9e4 <hwTimerOverflowCallback+0x9c>)
    c998:	881b      	ldrh	r3, [r3, #0]
    c99a:	b29b      	uxth	r3, r3
    c99c:	0c02      	lsrs	r2, r0, #16
    c99e:	429a      	cmp	r2, r3
    c9a0:	d00c      	beq.n	c9bc <hwTimerOverflowCallback+0x74>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    c9a2:	23ff      	movs	r3, #255	; 0xff
    c9a4:	4223      	tst	r3, r4
    c9a6:	d005      	beq.n	c9b4 <hwTimerOverflowCallback+0x6c>
		cpu_irq_enable();
    c9a8:	2201      	movs	r2, #1
    c9aa:	4b10      	ldr	r3, [pc, #64]	; (c9ec <hwTimerOverflowCallback+0xa4>)
    c9ac:	701a      	strb	r2, [r3, #0]
    c9ae:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    c9b2:	b662      	cpsie	i
	SYS_HwOverflow_Cb();
    c9b4:	4b10      	ldr	r3, [pc, #64]	; (c9f8 <hwTimerOverflowCallback+0xb0>)
    c9b6:	4798      	blx	r3
}
    c9b8:	b002      	add	sp, #8
    c9ba:	bd10      	pop	{r4, pc}
        {
            tmoLow16 = (uint16_t)(tmo32 & SWTIMER_HWTIME_MASK);
    c9bc:	b280      	uxth	r0, r0
            if (SWTIMER_MIN_TIMEOUT < tmoLow16)
    c9be:	28ff      	cmp	r0, #255	; 0xff
    c9c0:	d909      	bls.n	c9d6 <hwTimerOverflowCallback+0x8e>
            {
                common_tc_delay(tmoLow16);
    c9c2:	4b0e      	ldr	r3, [pc, #56]	; (c9fc <hwTimerOverflowCallback+0xb4>)
    c9c4:	4798      	blx	r3
                swTimers[runningTimerQueueHead].loaded = true;
    c9c6:	4b0a      	ldr	r3, [pc, #40]	; (c9f0 <hwTimerOverflowCallback+0xa8>)
    c9c8:	681a      	ldr	r2, [r3, #0]
    c9ca:	0112      	lsls	r2, r2, #4
    c9cc:	4b09      	ldr	r3, [pc, #36]	; (c9f4 <hwTimerOverflowCallback+0xac>)
    c9ce:	189b      	adds	r3, r3, r2
    c9d0:	2201      	movs	r2, #1
    c9d2:	735a      	strb	r2, [r3, #13]
    c9d4:	e7e5      	b.n	c9a2 <hwTimerOverflowCallback+0x5a>
            }
            else
            {
                isTimerTriggered = true;
    c9d6:	2201      	movs	r2, #1
    c9d8:	4b09      	ldr	r3, [pc, #36]	; (ca00 <hwTimerOverflowCallback+0xb8>)
    c9da:	701a      	strb	r2, [r3, #0]
                SYSTEM_PostTask(TIMER_TASK_ID);
    c9dc:	2001      	movs	r0, #1
    c9de:	4b09      	ldr	r3, [pc, #36]	; (ca04 <hwTimerOverflowCallback+0xbc>)
    c9e0:	4798      	blx	r3
    c9e2:	e7de      	b.n	c9a2 <hwTimerOverflowCallback+0x5a>
    c9e4:	20002d70 	.word	0x20002d70
    c9e8:	20002d74 	.word	0x20002d74
    c9ec:	20000008 	.word	0x20000008
    c9f0:	20001e6c 	.word	0x20001e6c
    c9f4:	20002be0 	.word	0x20002be0
    c9f8:	0000b9dd 	.word	0x0000b9dd
    c9fc:	00012e11 	.word	0x00012e11
    ca00:	20002d72 	.word	0x20002d72
    ca04:	0000d23d 	.word	0x0000d23d

0000ca08 <loadHwTimer>:
{
    ca08:	b570      	push	{r4, r5, r6, lr}
    ca0a:	0004      	movs	r4, r0
    if (SWTIMER_INVALID != timerId)
    ca0c:	28ff      	cmp	r0, #255	; 0xff
    ca0e:	d030      	beq.n	ca72 <loadHwTimer+0x6a>
    time |= ((uint64_t) sysTimeOvf) << 32;
    ca10:	4b19      	ldr	r3, [pc, #100]	; (ca78 <loadHwTimer+0x70>)
    ca12:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    ca14:	4b19      	ldr	r3, [pc, #100]	; (ca7c <loadHwTimer+0x74>)
    ca16:	881d      	ldrh	r5, [r3, #0]
    ca18:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    ca1a:	4b19      	ldr	r3, [pc, #100]	; (ca80 <loadHwTimer+0x78>)
    ca1c:	4798      	blx	r3
        uint32_t expiryTime = swTimers[timerId].absoluteExpiryTime;
    ca1e:	0123      	lsls	r3, r4, #4
    time |= (uint64_t) common_tc_read_count();
    ca20:	4328      	orrs	r0, r5
    return ((t2 - t1) < INT32_MAX);
    ca22:	4a18      	ldr	r2, [pc, #96]	; (ca84 <loadHwTimer+0x7c>)
    ca24:	589b      	ldr	r3, [r3, r2]
    ca26:	1a18      	subs	r0, r3, r0
        if (swtimerCompareTime(now, expiryTime))
    ca28:	4b17      	ldr	r3, [pc, #92]	; (ca88 <loadHwTimer+0x80>)
    ca2a:	4298      	cmp	r0, r3
    ca2c:	d81a      	bhi.n	ca64 <loadHwTimer+0x5c>
            if (!swTimers[timerId].loaded)
    ca2e:	0122      	lsls	r2, r4, #4
    ca30:	4b14      	ldr	r3, [pc, #80]	; (ca84 <loadHwTimer+0x7c>)
    ca32:	189b      	adds	r3, r3, r2
    ca34:	7b5b      	ldrb	r3, [r3, #13]
    ca36:	2b00      	cmp	r3, #0
    ca38:	d11d      	bne.n	ca76 <loadHwTimer+0x6e>
                if (SWTIMER_MIN_TIMEOUT >= timeDiff)
    ca3a:	28ff      	cmp	r0, #255	; 0xff
    ca3c:	d90b      	bls.n	ca56 <loadHwTimer+0x4e>
                else  if ((uint32_t)TIMER_PERIOD >= timeDiff)
    ca3e:	4b13      	ldr	r3, [pc, #76]	; (ca8c <loadHwTimer+0x84>)
    ca40:	4298      	cmp	r0, r3
    ca42:	d818      	bhi.n	ca76 <loadHwTimer+0x6e>
                    common_tc_delay((uint16_t)timeDiff);
    ca44:	b280      	uxth	r0, r0
    ca46:	4b12      	ldr	r3, [pc, #72]	; (ca90 <loadHwTimer+0x88>)
    ca48:	4798      	blx	r3
                    swTimers[timerId].loaded = true;
    ca4a:	0124      	lsls	r4, r4, #4
    ca4c:	4b0d      	ldr	r3, [pc, #52]	; (ca84 <loadHwTimer+0x7c>)
    ca4e:	191c      	adds	r4, r3, r4
    ca50:	2301      	movs	r3, #1
    ca52:	7363      	strb	r3, [r4, #13]
    ca54:	e00f      	b.n	ca76 <loadHwTimer+0x6e>
                    isTimerTriggered = true;
    ca56:	2201      	movs	r2, #1
    ca58:	4b0e      	ldr	r3, [pc, #56]	; (ca94 <loadHwTimer+0x8c>)
    ca5a:	701a      	strb	r2, [r3, #0]
                    SYSTEM_PostTask(TIMER_TASK_ID);
    ca5c:	2001      	movs	r0, #1
    ca5e:	4b0e      	ldr	r3, [pc, #56]	; (ca98 <loadHwTimer+0x90>)
    ca60:	4798      	blx	r3
    ca62:	e008      	b.n	ca76 <loadHwTimer+0x6e>
            isTimerTriggered = true;
    ca64:	2201      	movs	r2, #1
    ca66:	4b0b      	ldr	r3, [pc, #44]	; (ca94 <loadHwTimer+0x8c>)
    ca68:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    ca6a:	2001      	movs	r0, #1
    ca6c:	4b0a      	ldr	r3, [pc, #40]	; (ca98 <loadHwTimer+0x90>)
    ca6e:	4798      	blx	r3
    ca70:	e001      	b.n	ca76 <loadHwTimer+0x6e>
        common_tc_compare_stop();
    ca72:	4b0a      	ldr	r3, [pc, #40]	; (ca9c <loadHwTimer+0x94>)
    ca74:	4798      	blx	r3
}
    ca76:	bd70      	pop	{r4, r5, r6, pc}
    ca78:	20002d74 	.word	0x20002d74
    ca7c:	20002d70 	.word	0x20002d70
    ca80:	00012d9d 	.word	0x00012d9d
    ca84:	20002be0 	.word	0x20002be0
    ca88:	7ffffffe 	.word	0x7ffffffe
    ca8c:	0000ffff 	.word	0x0000ffff
    ca90:	00012e11 	.word	0x00012e11
    ca94:	20002d72 	.word	0x20002d72
    ca98:	0000d23d 	.word	0x0000d23d
    ca9c:	00012de9 	.word	0x00012de9

0000caa0 <swtimerInternalHandler>:

/**************************************************************************//**
\brief Internal handler for the timer trigger
******************************************************************************/
static void swtimerInternalHandler(void)
{
    caa0:	b510      	push	{r4, lr}
    if (isTimerTriggered)
    caa2:	4b1d      	ldr	r3, [pc, #116]	; (cb18 <swtimerInternalHandler+0x78>)
    caa4:	781b      	ldrb	r3, [r3, #0]
    caa6:	2b00      	cmp	r3, #0
    caa8:	d027      	beq.n	cafa <swtimerInternalHandler+0x5a>
    {
        isTimerTriggered = false;
    caaa:	2200      	movs	r2, #0
    caac:	4b1a      	ldr	r3, [pc, #104]	; (cb18 <swtimerInternalHandler+0x78>)
    caae:	701a      	strb	r2, [r3, #0]

        if (0 < runningTimers)
    cab0:	4b1a      	ldr	r3, [pc, #104]	; (cb1c <swtimerInternalHandler+0x7c>)
    cab2:	781b      	ldrb	r3, [r3, #0]
    cab4:	2b00      	cmp	r3, #0
    cab6:	d020      	beq.n	cafa <swtimerInternalHandler+0x5a>
        { /* Holds the number of running timers */
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    cab8:	4b19      	ldr	r3, [pc, #100]	; (cb20 <swtimerInternalHandler+0x80>)
    caba:	681b      	ldr	r3, [r3, #0]
    cabc:	2bff      	cmp	r3, #255	; 0xff
    cabe:	d01d      	beq.n	cafc <swtimerInternalHandler+0x5c>
                expiredTimerQueueHead = runningTimerQueueHead;
                expiredTimerQueueTail = runningTimerQueueHead;
            }
            else
            { /* there were already some timers expired before this one */
                swTimers[expiredTimerQueueTail].nextTimer = runningTimerQueueHead;
    cac0:	4b18      	ldr	r3, [pc, #96]	; (cb24 <swtimerInternalHandler+0x84>)
    cac2:	6818      	ldr	r0, [r3, #0]
    cac4:	4918      	ldr	r1, [pc, #96]	; (cb28 <swtimerInternalHandler+0x88>)
    cac6:	680b      	ldr	r3, [r1, #0]
    cac8:	011a      	lsls	r2, r3, #4
    caca:	4b18      	ldr	r3, [pc, #96]	; (cb2c <swtimerInternalHandler+0x8c>)
    cacc:	189b      	adds	r3, r3, r2
    cace:	7318      	strb	r0, [r3, #12]
                expiredTimerQueueTail = runningTimerQueueHead;
    cad0:	6008      	str	r0, [r1, #0]
            }

            runningTimerQueueHead = swTimers[runningTimerQueueHead].nextTimer;
    cad2:	4a16      	ldr	r2, [pc, #88]	; (cb2c <swtimerInternalHandler+0x8c>)
    cad4:	4913      	ldr	r1, [pc, #76]	; (cb24 <swtimerInternalHandler+0x84>)
    cad6:	680b      	ldr	r3, [r1, #0]
    cad8:	011b      	lsls	r3, r3, #4
    cada:	18d3      	adds	r3, r2, r3
    cadc:	7b18      	ldrb	r0, [r3, #12]
    cade:	6008      	str	r0, [r1, #0]

            swTimers[expiredTimerQueueTail].nextTimer = SWTIMER_INVALID;
    cae0:	4b11      	ldr	r3, [pc, #68]	; (cb28 <swtimerInternalHandler+0x88>)
    cae2:	681b      	ldr	r3, [r3, #0]
    cae4:	011b      	lsls	r3, r3, #4
    cae6:	18d2      	adds	r2, r2, r3
    cae8:	23ff      	movs	r3, #255	; 0xff
    caea:	7313      	strb	r3, [r2, #12]

            if ((--runningTimers) > 0)
    caec:	4a0b      	ldr	r2, [pc, #44]	; (cb1c <swtimerInternalHandler+0x7c>)
    caee:	7813      	ldrb	r3, [r2, #0]
    caf0:	3b01      	subs	r3, #1
    caf2:	b2db      	uxtb	r3, r3
    caf4:	7013      	strb	r3, [r2, #0]
    caf6:	2b00      	cmp	r3, #0
    caf8:	d10b      	bne.n	cb12 <swtimerInternalHandler+0x72>
            { /* keep the ball rolling! load the next head timer from the queue */
                loadHwTimer(runningTimerQueueHead);
            }
        }
    }
}
    cafa:	bd10      	pop	{r4, pc}
                (expiredTimerQueueTail == SWTIMER_INVALID))
    cafc:	4b0a      	ldr	r3, [pc, #40]	; (cb28 <swtimerInternalHandler+0x88>)
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    cafe:	681b      	ldr	r3, [r3, #0]
    cb00:	2bff      	cmp	r3, #255	; 0xff
    cb02:	d1dd      	bne.n	cac0 <swtimerInternalHandler+0x20>
                expiredTimerQueueHead = runningTimerQueueHead;
    cb04:	4b07      	ldr	r3, [pc, #28]	; (cb24 <swtimerInternalHandler+0x84>)
    cb06:	681b      	ldr	r3, [r3, #0]
    cb08:	4a05      	ldr	r2, [pc, #20]	; (cb20 <swtimerInternalHandler+0x80>)
    cb0a:	6013      	str	r3, [r2, #0]
                expiredTimerQueueTail = runningTimerQueueHead;
    cb0c:	4a06      	ldr	r2, [pc, #24]	; (cb28 <swtimerInternalHandler+0x88>)
    cb0e:	6013      	str	r3, [r2, #0]
    cb10:	e7df      	b.n	cad2 <swtimerInternalHandler+0x32>
                loadHwTimer(runningTimerQueueHead);
    cb12:	4b07      	ldr	r3, [pc, #28]	; (cb30 <swtimerInternalHandler+0x90>)
    cb14:	4798      	blx	r3
}
    cb16:	e7f0      	b.n	cafa <swtimerInternalHandler+0x5a>
    cb18:	20002d72 	.word	0x20002d72
    cb1c:	20001e70 	.word	0x20001e70
    cb20:	20001e64 	.word	0x20001e64
    cb24:	20001e6c 	.word	0x20001e6c
    cb28:	20001e68 	.word	0x20001e68
    cb2c:	20002be0 	.word	0x20002be0
    cb30:	0000ca09 	.word	0x0000ca09

0000cb34 <SwTimerReset>:
    /*
    * Initialize the timer resources like timer arrays queues, timer registers
    */
    uint8_t index;

    runningTimers = 0u;
    cb34:	2300      	movs	r3, #0
    cb36:	4a0d      	ldr	r2, [pc, #52]	; (cb6c <SwTimerReset+0x38>)
    cb38:	7013      	strb	r3, [r2, #0]
    isTimerTriggered = false;
    cb3a:	4a0d      	ldr	r2, [pc, #52]	; (cb70 <SwTimerReset+0x3c>)
    cb3c:	7013      	strb	r3, [r2, #0]

    runningTimerQueueHead = SWTIMER_INVALID;
    cb3e:	33ff      	adds	r3, #255	; 0xff
    cb40:	4a0c      	ldr	r2, [pc, #48]	; (cb74 <SwTimerReset+0x40>)
    cb42:	6013      	str	r3, [r2, #0]
    expiredTimerQueueHead = SWTIMER_INVALID;
    cb44:	4a0c      	ldr	r2, [pc, #48]	; (cb78 <SwTimerReset+0x44>)
    cb46:	6013      	str	r3, [r2, #0]
    expiredTimerQueueTail = SWTIMER_INVALID;
    cb48:	4a0c      	ldr	r2, [pc, #48]	; (cb7c <SwTimerReset+0x48>)
    cb4a:	6013      	str	r3, [r2, #0]
    cb4c:	4b0c      	ldr	r3, [pc, #48]	; (cb80 <SwTimerReset+0x4c>)
    cb4e:	0018      	movs	r0, r3
    cb50:	3091      	adds	r0, #145	; 0x91
    cb52:	30ff      	adds	r0, #255	; 0xff

    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    {
        swTimers[index].nextTimer = SWTIMER_INVALID;
    cb54:	21ff      	movs	r1, #255	; 0xff
        swTimers[index].timerCb = NULL;
    cb56:	2200      	movs	r2, #0
        swTimers[index].nextTimer = SWTIMER_INVALID;
    cb58:	7219      	strb	r1, [r3, #8]
        swTimers[index].timerCb = NULL;
    cb5a:	601a      	str	r2, [r3, #0]
    cb5c:	3310      	adds	r3, #16
    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    cb5e:	4283      	cmp	r3, r0
    cb60:	d1fa      	bne.n	cb58 <SwTimerReset+0x24>
    }

    allocatedTimerId = 0u;
    cb62:	2200      	movs	r2, #0
    cb64:	4b07      	ldr	r3, [pc, #28]	; (cb84 <SwTimerReset+0x50>)
    cb66:	701a      	strb	r2, [r3, #0]
}
    cb68:	4770      	bx	lr
    cb6a:	46c0      	nop			; (mov r8, r8)
    cb6c:	20001e70 	.word	0x20001e70
    cb70:	20002d72 	.word	0x20002d72
    cb74:	20001e6c 	.word	0x20001e6c
    cb78:	20001e64 	.word	0x20001e64
    cb7c:	20001e68 	.word	0x20001e68
    cb80:	20002be4 	.word	0x20002be4
    cb84:	20001e60 	.word	0x20001e60

0000cb88 <SystemTimerInit>:

/**************************************************************************//**
\brief Initializes the Software Timer module
******************************************************************************/
void SystemTimerInit(void)
{
    cb88:	b510      	push	{r4, lr}
    SwTimerReset();
    cb8a:	4b08      	ldr	r3, [pc, #32]	; (cbac <SystemTimerInit+0x24>)
    cb8c:	4798      	blx	r3

    /* initialize system time parameters */
    sysTimeOvf = 0x00000000;
    cb8e:	2300      	movs	r3, #0
    cb90:	4a07      	ldr	r2, [pc, #28]	; (cbb0 <SystemTimerInit+0x28>)
    cb92:	6013      	str	r3, [r2, #0]
    sysTime = 0x0000;
    cb94:	4a07      	ldr	r2, [pc, #28]	; (cbb4 <SystemTimerInit+0x2c>)
    cb96:	8013      	strh	r3, [r2, #0]

    common_tc_init();
    cb98:	4b07      	ldr	r3, [pc, #28]	; (cbb8 <SystemTimerInit+0x30>)
    cb9a:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    cb9c:	4807      	ldr	r0, [pc, #28]	; (cbbc <SystemTimerInit+0x34>)
    cb9e:	4b08      	ldr	r3, [pc, #32]	; (cbc0 <SystemTimerInit+0x38>)
    cba0:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    cba2:	4808      	ldr	r0, [pc, #32]	; (cbc4 <SystemTimerInit+0x3c>)
    cba4:	4b08      	ldr	r3, [pc, #32]	; (cbc8 <SystemTimerInit+0x40>)
    cba6:	4798      	blx	r3
}
    cba8:	bd10      	pop	{r4, pc}
    cbaa:	46c0      	nop			; (mov r8, r8)
    cbac:	0000cb35 	.word	0x0000cb35
    cbb0:	20002d74 	.word	0x20002d74
    cbb4:	20002d70 	.word	0x20002d70
    cbb8:	00012e7d 	.word	0x00012e7d
    cbbc:	0000c949 	.word	0x0000c949
    cbc0:	00012f01 	.word	0x00012f01
    cbc4:	0000c921 	.word	0x0000c921
    cbc8:	00012f0d 	.word	0x00012f0d

0000cbcc <SwTimerGetTime>:
/**************************************************************************//**
\brief Get current system time.
\return Returns current system time in microseconds
******************************************************************************/
uint64_t SwTimerGetTime(void)
{
    cbcc:	b570      	push	{r4, r5, r6, lr}
    time |= ((uint64_t) sysTimeOvf) << 32;
    cbce:	4b05      	ldr	r3, [pc, #20]	; (cbe4 <SwTimerGetTime+0x18>)
    cbd0:	681c      	ldr	r4, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    cbd2:	4b05      	ldr	r3, [pc, #20]	; (cbe8 <SwTimerGetTime+0x1c>)
    cbd4:	881d      	ldrh	r5, [r3, #0]
    cbd6:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    cbd8:	4b04      	ldr	r3, [pc, #16]	; (cbec <SwTimerGetTime+0x20>)
    cbda:	4798      	blx	r3
    cbdc:	4328      	orrs	r0, r5
    return gettime();
}
    cbde:	0021      	movs	r1, r4
    cbe0:	bd70      	pop	{r4, r5, r6, pc}
    cbe2:	46c0      	nop			; (mov r8, r8)
    cbe4:	20002d74 	.word	0x20002d74
    cbe8:	20002d70 	.word	0x20002d70
    cbec:	00012d9d 	.word	0x00012d9d

0000cbf0 <SwTimerCreate>:

\return LORAWAN_SUCCESS if new timerId is allocated
        LORAWAN_RESOURCE_UNAVAILABLE if there is no more timerId to allocate
******************************************************************************/
StackRetStatus_t SwTimerCreate(uint8_t *timerId)
{
    cbf0:	b510      	push	{r4, lr}
    cbf2:	0004      	movs	r4, r0
    StackRetStatus_t retVal = LORAWAN_SUCCESS;

    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    cbf4:	4b08      	ldr	r3, [pc, #32]	; (cc18 <SwTimerCreate+0x28>)
    cbf6:	781b      	ldrb	r3, [r3, #0]
        * If you reach this spot it means the TOTAL_NUMBER_OF_SW_TIMERS
        * is #defined to a lower value than the number of timers that have
        * been SwTimerCreate()
        */
        SYS_ASSERT_FATAL(ASSERT_HAL_TIMERID_EXHAUSTED);
        retVal = LORAWAN_RESOURCE_UNAVAILABLE;
    cbf8:	2014      	movs	r0, #20
    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    cbfa:	2b18      	cmp	r3, #24
    cbfc:	d900      	bls.n	cc00 <SwTimerCreate+0x10>
    }

    return retVal;
}
    cbfe:	bd10      	pop	{r4, pc}
        ATOMIC_SECTION_ENTER
    cc00:	4b06      	ldr	r3, [pc, #24]	; (cc1c <SwTimerCreate+0x2c>)
    cc02:	4798      	blx	r3
        *timerId = allocatedTimerId;
    cc04:	4a04      	ldr	r2, [pc, #16]	; (cc18 <SwTimerCreate+0x28>)
    cc06:	7813      	ldrb	r3, [r2, #0]
    cc08:	7023      	strb	r3, [r4, #0]
        allocatedTimerId++;
    cc0a:	3301      	adds	r3, #1
    cc0c:	7013      	strb	r3, [r2, #0]
        ATOMIC_SECTION_EXIT
    cc0e:	4b04      	ldr	r3, [pc, #16]	; (cc20 <SwTimerCreate+0x30>)
    cc10:	4798      	blx	r3
    StackRetStatus_t retVal = LORAWAN_SUCCESS;
    cc12:	2008      	movs	r0, #8
    cc14:	e7f3      	b.n	cbfe <SwTimerCreate+0xe>
    cc16:	46c0      	nop			; (mov r8, r8)
    cc18:	20001e60 	.word	0x20001e60
    cc1c:	0000c1f1 	.word	0x0000c1f1
    cc20:	0000c1fd 	.word	0x0000c1fd

0000cc24 <SwTimerStart>:
        LORAWAN_INVALID_REQUEST if \timerId is already running
        LORAWAN_SUCCESS if \timerId is successfully queued for running
******************************************************************************/
StackRetStatus_t SwTimerStart(uint8_t timerId, uint32_t timerCount,
    SwTimeoutType_t timeoutType, void *timerCb, void *paramCb)
{
    cc24:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc26:	46d6      	mov	lr, sl
    cc28:	464f      	mov	r7, r9
    cc2a:	4646      	mov	r6, r8
    cc2c:	b5c0      	push	{r6, r7, lr}
    cc2e:	b084      	sub	sp, #16
    cc30:	0007      	movs	r7, r0
    cc32:	000d      	movs	r5, r1
    cc34:	0016      	movs	r6, r2
    cc36:	001c      	movs	r4, r3
    uint32_t pointInTime;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    cc38:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    cc3a:	2f18      	cmp	r7, #24
    cc3c:	d809      	bhi.n	cc52 <SwTimerStart+0x2e>
    cc3e:	2b00      	cmp	r3, #0
    cc40:	d100      	bne.n	cc44 <SwTimerStart+0x20>
    cc42:	e08c      	b.n	cd5e <SwTimerStart+0x13a>
    }

    if (NULL != swTimers[timerId].timerCb)
    cc44:	013a      	lsls	r2, r7, #4
    cc46:	4b52      	ldr	r3, [pc, #328]	; (cd90 <SwTimerStart+0x16c>)
    cc48:	189b      	adds	r3, r3, r2
    cc4a:	685b      	ldr	r3, [r3, #4]
        /*
        * Timer is already running if the callback function of the
        * corresponding timer index in the timer array is not NULL.
        */
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_REQUEST;
    cc4c:	300b      	adds	r0, #11
    if (NULL != swTimers[timerId].timerCb)
    cc4e:	2b00      	cmp	r3, #0
    cc50:	d005      	beq.n	cc5e <SwTimerStart+0x3a>
        }
    }

    swtimerStartAbsoluteTimer(timerId, pointInTime, timerCb, paramCb);
    return LORAWAN_SUCCESS;
}
    cc52:	b004      	add	sp, #16
    cc54:	bc1c      	pop	{r2, r3, r4}
    cc56:	4690      	mov	r8, r2
    cc58:	4699      	mov	r9, r3
    cc5a:	46a2      	mov	sl, r4
    cc5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    time |= ((uint64_t) sysTimeOvf) << 32;
    cc5e:	4b4d      	ldr	r3, [pc, #308]	; (cd94 <SwTimerStart+0x170>)
    cc60:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    cc62:	4b4d      	ldr	r3, [pc, #308]	; (cd98 <SwTimerStart+0x174>)
    cc64:	8818      	ldrh	r0, [r3, #0]
    cc66:	0403      	lsls	r3, r0, #16
    cc68:	4698      	mov	r8, r3
    time |= (uint64_t) common_tc_read_count();
    cc6a:	4b4c      	ldr	r3, [pc, #304]	; (cd9c <SwTimerStart+0x178>)
    cc6c:	4798      	blx	r3
    cc6e:	4643      	mov	r3, r8
    cc70:	4303      	orrs	r3, r0
    switch (timeoutType)
    cc72:	2e00      	cmp	r6, #0
    cc74:	d003      	beq.n	cc7e <SwTimerStart+0x5a>
    cc76:	2e01      	cmp	r6, #1
    cc78:	d038      	beq.n	ccec <SwTimerStart+0xc8>
            return LORAWAN_INVALID_PARAMETER;
    cc7a:	200a      	movs	r0, #10
    cc7c:	e7e9      	b.n	cc52 <SwTimerStart+0x2e>
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    cc7e:	4948      	ldr	r1, [pc, #288]	; (cda0 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    cc80:	200a      	movs	r0, #10
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    cc82:	002a      	movs	r2, r5
    cc84:	3aff      	subs	r2, #255	; 0xff
            pointInTime = ADD_TIME(timerCount, now);
    cc86:	18ed      	adds	r5, r5, r3
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    cc88:	428a      	cmp	r2, r1
    cc8a:	d8e2      	bhi.n	cc52 <SwTimerStart+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    cc8c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    cc90:	425a      	negs	r2, r3
    cc92:	4153      	adcs	r3, r2
    cc94:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    cc96:	b672      	cpsid	i
    cc98:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    cc9c:	2600      	movs	r6, #0
    cc9e:	4b41      	ldr	r3, [pc, #260]	; (cda4 <SwTimerStart+0x180>)
    cca0:	701e      	strb	r6, [r3, #0]
	return flags;
    cca2:	9b03      	ldr	r3, [sp, #12]
    cca4:	4699      	mov	r9, r3
    swtimerInternalHandler();
    cca6:	4b40      	ldr	r3, [pc, #256]	; (cda8 <SwTimerStart+0x184>)
    cca8:	4798      	blx	r3
    swTimers[timerId].absoluteExpiryTime = pointInTime;
    ccaa:	4b39      	ldr	r3, [pc, #228]	; (cd90 <SwTimerStart+0x16c>)
    ccac:	013a      	lsls	r2, r7, #4
    ccae:	50d5      	str	r5, [r2, r3]
    swTimers[timerId].timerCb = (void (*)(void*))handlerCb;
    ccb0:	189b      	adds	r3, r3, r2
    ccb2:	605c      	str	r4, [r3, #4]
    swTimers[timerId].paramCb = parameter;
    ccb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ccb6:	609a      	str	r2, [r3, #8]
    swTimers[timerId].loaded = false;
    ccb8:	735e      	strb	r6, [r3, #13]
    runningTimers++;
    ccba:	4a3c      	ldr	r2, [pc, #240]	; (cdac <SwTimerStart+0x188>)
    ccbc:	7813      	ldrb	r3, [r2, #0]
    ccbe:	3301      	adds	r3, #1
    ccc0:	b2db      	uxtb	r3, r3
    ccc2:	7013      	strb	r3, [r2, #0]
    if (SWTIMER_INVALID == runningTimerQueueHead)
    ccc4:	4b3a      	ldr	r3, [pc, #232]	; (cdb0 <SwTimerStart+0x18c>)
    ccc6:	681b      	ldr	r3, [r3, #0]
    ccc8:	469a      	mov	sl, r3
    ccca:	2bff      	cmp	r3, #255	; 0xff
    cccc:	d016      	beq.n	ccfc <SwTimerStart+0xd8>
        uint8_t currIndex = runningTimerQueueHead;
    ccce:	466a      	mov	r2, sp
    ccd0:	7013      	strb	r3, [r2, #0]
    ccd2:	7812      	ldrb	r2, [r2, #0]
        for (index = 0; index < runningTimers; index++)
    ccd4:	4b35      	ldr	r3, [pc, #212]	; (cdac <SwTimerStart+0x188>)
    ccd6:	781b      	ldrb	r3, [r3, #0]
    ccd8:	2b00      	cmp	r3, #0
    ccda:	d042      	beq.n	cd62 <SwTimerStart+0x13e>
    ccdc:	9200      	str	r2, [sp, #0]
    ccde:	2300      	movs	r3, #0
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    cce0:	492b      	ldr	r1, [pc, #172]	; (cd90 <SwTimerStart+0x16c>)
    cce2:	4688      	mov	r8, r1
    cce4:	4833      	ldr	r0, [pc, #204]	; (cdb4 <SwTimerStart+0x190>)
                    currIndex = swTimers[currIndex].nextTimer;
    cce6:	468c      	mov	ip, r1
        for (index = 0; index < runningTimers; index++)
    cce8:	4c30      	ldr	r4, [pc, #192]	; (cdac <SwTimerStart+0x188>)
    ccea:	e02a      	b.n	cd42 <SwTimerStart+0x11e>
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    ccec:	0028      	movs	r0, r5
    ccee:	38ff      	subs	r0, #255	; 0xff
    ccf0:	1ac3      	subs	r3, r0, r3
    ccf2:	4a2b      	ldr	r2, [pc, #172]	; (cda0 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    ccf4:	200a      	movs	r0, #10
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    ccf6:	4293      	cmp	r3, r2
    ccf8:	d9c8      	bls.n	cc8c <SwTimerStart+0x68>
    ccfa:	e7aa      	b.n	cc52 <SwTimerStart+0x2e>
        runningTimerQueueHead = timerId;
    ccfc:	4b2c      	ldr	r3, [pc, #176]	; (cdb0 <SwTimerStart+0x18c>)
    ccfe:	601f      	str	r7, [r3, #0]
        loadHwTimer(runningTimerQueueHead);
    cd00:	0038      	movs	r0, r7
    cd02:	4b2d      	ldr	r3, [pc, #180]	; (cdb8 <SwTimerStart+0x194>)
    cd04:	4798      	blx	r3
    cd06:	e036      	b.n	cd76 <SwTimerStart+0x152>
                    swTimers[timerId].nextTimer = currIndex;
    cd08:	4b21      	ldr	r3, [pc, #132]	; (cd90 <SwTimerStart+0x16c>)
    cd0a:	013c      	lsls	r4, r7, #4
    cd0c:	191c      	adds	r4, r3, r4
    cd0e:	7322      	strb	r2, [r4, #12]
                    swTimers[currIndex].loaded = false;
    cd10:	9901      	ldr	r1, [sp, #4]
    cd12:	0109      	lsls	r1, r1, #4
    cd14:	1859      	adds	r1, r3, r1
    cd16:	2300      	movs	r3, #0
    cd18:	734b      	strb	r3, [r1, #13]
                    if (runningTimerQueueHead == currIndex)
    cd1a:	4592      	cmp	sl, r2
    cd1c:	d005      	beq.n	cd2a <SwTimerStart+0x106>
                        swTimers[prevIndex].nextTimer = timerId;
    cd1e:	9b00      	ldr	r3, [sp, #0]
    cd20:	0118      	lsls	r0, r3, #4
    cd22:	4b1b      	ldr	r3, [pc, #108]	; (cd90 <SwTimerStart+0x16c>)
    cd24:	1818      	adds	r0, r3, r0
    cd26:	7307      	strb	r7, [r0, #12]
    cd28:	e025      	b.n	cd76 <SwTimerStart+0x152>
                        runningTimerQueueHead = timerId;
    cd2a:	4b21      	ldr	r3, [pc, #132]	; (cdb0 <SwTimerStart+0x18c>)
    cd2c:	601f      	str	r7, [r3, #0]
                        loadHwTimer(runningTimerQueueHead);
    cd2e:	0038      	movs	r0, r7
    cd30:	4b21      	ldr	r3, [pc, #132]	; (cdb8 <SwTimerStart+0x194>)
    cd32:	4798      	blx	r3
    cd34:	e01f      	b.n	cd76 <SwTimerStart+0x152>
        for (index = 0; index < runningTimers; index++)
    cd36:	3301      	adds	r3, #1
    cd38:	b2db      	uxtb	r3, r3
    cd3a:	7821      	ldrb	r1, [r4, #0]
    cd3c:	b2c9      	uxtb	r1, r1
    cd3e:	428b      	cmp	r3, r1
    cd40:	d210      	bcs.n	cd64 <SwTimerStart+0x140>
            if (SWTIMER_INVALID != currIndex)
    cd42:	2aff      	cmp	r2, #255	; 0xff
    cd44:	d0f7      	beq.n	cd36 <SwTimerStart+0x112>
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    cd46:	9201      	str	r2, [sp, #4]
    cd48:	0111      	lsls	r1, r2, #4
    return ((t2 - t1) < INT32_MAX);
    cd4a:	4646      	mov	r6, r8
    cd4c:	5989      	ldr	r1, [r1, r6]
    cd4e:	1a69      	subs	r1, r5, r1
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    cd50:	4281      	cmp	r1, r0
    cd52:	d8d9      	bhi.n	cd08 <SwTimerStart+0xe4>
                    currIndex = swTimers[currIndex].nextTimer;
    cd54:	0111      	lsls	r1, r2, #4
    cd56:	4461      	add	r1, ip
    cd58:	9200      	str	r2, [sp, #0]
    cd5a:	7b0a      	ldrb	r2, [r1, #12]
    cd5c:	e7eb      	b.n	cd36 <SwTimerStart+0x112>
        return LORAWAN_INVALID_PARAMETER;
    cd5e:	200a      	movs	r0, #10
    cd60:	e777      	b.n	cc52 <SwTimerStart+0x2e>
        uint8_t prevIndex = runningTimerQueueHead;
    cd62:	9200      	str	r2, [sp, #0]
            swTimers[prevIndex].nextTimer = timerId;
    cd64:	4b0a      	ldr	r3, [pc, #40]	; (cd90 <SwTimerStart+0x16c>)
    cd66:	9a00      	ldr	r2, [sp, #0]
    cd68:	0110      	lsls	r0, r2, #4
    cd6a:	1818      	adds	r0, r3, r0
    cd6c:	7307      	strb	r7, [r0, #12]
            swTimers[timerId].nextTimer = SWTIMER_INVALID;
    cd6e:	013f      	lsls	r7, r7, #4
    cd70:	19df      	adds	r7, r3, r7
    cd72:	23ff      	movs	r3, #255	; 0xff
    cd74:	733b      	strb	r3, [r7, #12]
	if (cpu_irq_is_enabled_flags(flags))
    cd76:	23ff      	movs	r3, #255	; 0xff
    return LORAWAN_SUCCESS;
    cd78:	2008      	movs	r0, #8
    cd7a:	464a      	mov	r2, r9
    cd7c:	4213      	tst	r3, r2
    cd7e:	d100      	bne.n	cd82 <SwTimerStart+0x15e>
    cd80:	e767      	b.n	cc52 <SwTimerStart+0x2e>
		cpu_irq_enable();
    cd82:	2201      	movs	r2, #1
    cd84:	4b07      	ldr	r3, [pc, #28]	; (cda4 <SwTimerStart+0x180>)
    cd86:	701a      	strb	r2, [r3, #0]
    cd88:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    cd8c:	b662      	cpsie	i
    cd8e:	e760      	b.n	cc52 <SwTimerStart+0x2e>
    cd90:	20002be0 	.word	0x20002be0
    cd94:	20002d74 	.word	0x20002d74
    cd98:	20002d70 	.word	0x20002d70
    cd9c:	00012d9d 	.word	0x00012d9d
    cda0:	7fffff00 	.word	0x7fffff00
    cda4:	20000008 	.word	0x20000008
    cda8:	0000caa1 	.word	0x0000caa1
    cdac:	20001e70 	.word	0x20001e70
    cdb0:	20001e6c 	.word	0x20001e6c
    cdb4:	7ffffffe 	.word	0x7ffffffe
    cdb8:	0000ca09 	.word	0x0000ca09

0000cdbc <SwTimerIsRunning>:
\param[in] timerId Timer ID to be checked for running
\return True if the timer is running else False
******************************************************************************/
bool SwTimerIsRunning(uint8_t timerId)
{
    if (NULL == swTimers[timerId].timerCb)
    cdbc:	0103      	lsls	r3, r0, #4
    cdbe:	4803      	ldr	r0, [pc, #12]	; (cdcc <SwTimerIsRunning+0x10>)
    cdc0:	18c0      	adds	r0, r0, r3
    cdc2:	6840      	ldr	r0, [r0, #4]
    cdc4:	1e43      	subs	r3, r0, #1
    cdc6:	4198      	sbcs	r0, r3
    cdc8:	b2c0      	uxtb	r0, r0
    {
        return false;
    }

    return true;
}
    cdca:	4770      	bx	lr
    cdcc:	20002be0 	.word	0x20002be0

0000cdd0 <SwTimerReadValue>:
\brief Returns the remaining timeout for the given timerId
\param[in] timerId Timer ID to get the remaining time
\return Remaining time until expiry in microseconds
******************************************************************************/
uint32_t SwTimerReadValue(uint8_t timerId)
{
    cdd0:	b570      	push	{r4, r5, r6, lr}
    uint32_t remainingTime = 0u;
    uint32_t timerExpiryTime = 0u;
    uint32_t currentSysTime = 0u;
    if ( NULL != swTimers[timerId].timerCb )
    cdd2:	0102      	lsls	r2, r0, #4
    cdd4:	4b0d      	ldr	r3, [pc, #52]	; (ce0c <SwTimerReadValue+0x3c>)
    cdd6:	189b      	adds	r3, r3, r2
    cdd8:	685b      	ldr	r3, [r3, #4]
    cdda:	2b00      	cmp	r3, #0
    cddc:	d014      	beq.n	ce08 <SwTimerReadValue+0x38>
    {
	    timerExpiryTime = swTimers[timerId].absoluteExpiryTime;
    cdde:	4b0b      	ldr	r3, [pc, #44]	; (ce0c <SwTimerReadValue+0x3c>)
    cde0:	58d5      	ldr	r5, [r2, r3]
    time |= ((uint64_t) sysTimeOvf) << 32;
    cde2:	4b0b      	ldr	r3, [pc, #44]	; (ce10 <SwTimerReadValue+0x40>)
    cde4:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    cde6:	4b0b      	ldr	r3, [pc, #44]	; (ce14 <SwTimerReadValue+0x44>)
    cde8:	881c      	ldrh	r4, [r3, #0]
    cdea:	0424      	lsls	r4, r4, #16
    time |= (uint64_t) common_tc_read_count();
    cdec:	4b0a      	ldr	r3, [pc, #40]	; (ce18 <SwTimerReadValue+0x48>)
    cdee:	4798      	blx	r3
    cdf0:	4320      	orrs	r0, r4
	    currentSysTime = (uint32_t) gettime();
	    if ( currentSysTime <= timerExpiryTime )
    cdf2:	4285      	cmp	r5, r0
    cdf4:	d305      	bcc.n	ce02 <SwTimerReadValue+0x32>
	    {
		    remainingTime = timerExpiryTime - currentSysTime;
    cdf6:	1a28      	subs	r0, r5, r0
	    else if ( currentSysTime > timerExpiryTime )
	    {
		    remainingTime = (UINT32_MAX - currentSysTime) + timerExpiryTime;
	    }

        if (remainingTime >= SWTIMER_MAX_TIMEOUT)
    cdf8:	4b08      	ldr	r3, [pc, #32]	; (ce1c <SwTimerReadValue+0x4c>)
    cdfa:	4298      	cmp	r0, r3
    cdfc:	d900      	bls.n	ce00 <SwTimerReadValue+0x30>
        {
            /* Diff cannot be more than max timeout */
            remainingTime = 0;
    cdfe:	2000      	movs	r0, #0
        }
    }
    return remainingTime;
}
    ce00:	bd70      	pop	{r4, r5, r6, pc}
		    remainingTime = (UINT32_MAX - currentSysTime) + timerExpiryTime;
    ce02:	3d01      	subs	r5, #1
    ce04:	1a28      	subs	r0, r5, r0
    ce06:	e7f7      	b.n	cdf8 <SwTimerReadValue+0x28>
    uint32_t remainingTime = 0u;
    ce08:	2000      	movs	r0, #0
    return remainingTime;
    ce0a:	e7f9      	b.n	ce00 <SwTimerReadValue+0x30>
    ce0c:	20002be0 	.word	0x20002be0
    ce10:	20002d74 	.word	0x20002d74
    ce14:	20002d70 	.word	0x20002d70
    ce18:	00012d9d 	.word	0x00012d9d
    ce1c:	7ffffffe 	.word	0x7ffffffe

0000ce20 <SwTimerNextExpiryDuration>:
/**************************************************************************//**
\brief Returns the duration until the next timer expiry
\return Returns the duration until the next timeout in microseconds
******************************************************************************/
uint32_t SwTimerNextExpiryDuration(void)
{
    ce20:	b510      	push	{r4, lr}
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;

    if (SWTIMER_INVALID != runningTimerQueueHead)
    ce22:	4b05      	ldr	r3, [pc, #20]	; (ce38 <SwTimerNextExpiryDuration+0x18>)
    ce24:	6818      	ldr	r0, [r3, #0]
    ce26:	28ff      	cmp	r0, #255	; 0xff
    ce28:	d102      	bne.n	ce30 <SwTimerNextExpiryDuration+0x10>
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;
    ce2a:	2001      	movs	r0, #1
    ce2c:	4240      	negs	r0, r0
    {
        duration = SwTimerReadValue(runningTimerQueueHead);
    }

    return duration;
}
    ce2e:	bd10      	pop	{r4, pc}
        duration = SwTimerReadValue(runningTimerQueueHead);
    ce30:	b2c0      	uxtb	r0, r0
    ce32:	4b02      	ldr	r3, [pc, #8]	; (ce3c <SwTimerNextExpiryDuration+0x1c>)
    ce34:	4798      	blx	r3
    ce36:	e7fa      	b.n	ce2e <SwTimerNextExpiryDuration+0xe>
    ce38:	20001e6c 	.word	0x20001e6c
    ce3c:	0000cdd1 	.word	0x0000cdd1

0000ce40 <SwTimersExecute>:

/**************************************************************************//**
\brief Handles Queues and Callbacks for Expired Timers
******************************************************************************/
void SwTimersExecute(void)
{
    ce40:	b5f0      	push	{r4, r5, r6, r7, lr}
    ce42:	46de      	mov	lr, fp
    ce44:	4657      	mov	r7, sl
    ce46:	464e      	mov	r6, r9
    ce48:	4645      	mov	r5, r8
    ce4a:	b5e0      	push	{r5, r6, r7, lr}
    ce4c:	b083      	sub	sp, #12
    time |= ((uint64_t) sysTimeOvf) << 32;
    ce4e:	4b2f      	ldr	r3, [pc, #188]	; (cf0c <SwTimersExecute+0xcc>)
    ce50:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    ce52:	4b2f      	ldr	r3, [pc, #188]	; (cf10 <SwTimersExecute+0xd0>)
    ce54:	881b      	ldrh	r3, [r3, #0]
    time |= (uint64_t) common_tc_read_count();
    ce56:	4b2f      	ldr	r3, [pc, #188]	; (cf14 <SwTimersExecute+0xd4>)
    ce58:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    ce5a:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    ce5e:	4253      	negs	r3, r2
    ce60:	4153      	adcs	r3, r2
    ce62:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    ce64:	b672      	cpsid	i
    ce66:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    ce6a:	2200      	movs	r2, #0
    ce6c:	4b2a      	ldr	r3, [pc, #168]	; (cf18 <SwTimersExecute+0xd8>)
    ce6e:	701a      	strb	r2, [r3, #0]
	return flags;
    ce70:	9c00      	ldr	r4, [sp, #0]
    uint64_t now = gettime();

    uint8_t flags = cpu_irq_save();
    swtimerInternalHandler();
    ce72:	4b2a      	ldr	r3, [pc, #168]	; (cf1c <SwTimersExecute+0xdc>)
    ce74:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    ce76:	23ff      	movs	r3, #255	; 0xff
    ce78:	4223      	tst	r3, r4
    ce7a:	d005      	beq.n	ce88 <SwTimersExecute+0x48>
		cpu_irq_enable();
    ce7c:	2201      	movs	r2, #1
    ce7e:	4b26      	ldr	r3, [pc, #152]	; (cf18 <SwTimersExecute+0xd8>)
    ce80:	701a      	strb	r2, [r3, #0]
    ce82:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    ce86:	b662      	cpsie	i
	cpu_irq_disable();
    ce88:	4b23      	ldr	r3, [pc, #140]	; (cf18 <SwTimersExecute+0xd8>)
    ce8a:	469a      	mov	sl, r3
        /* Expired timer if any will be processed here */
        while (SWTIMER_INVALID != expiredTimerQueueHead)
        {
            flags = cpu_irq_save();

            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    ce8c:	4c24      	ldr	r4, [pc, #144]	; (cf20 <SwTimersExecute+0xe0>)
    ce8e:	4b25      	ldr	r3, [pc, #148]	; (cf24 <SwTimersExecute+0xe4>)
    ce90:	4699      	mov	r9, r3
    ce92:	2200      	movs	r2, #0

            /*
            * The expired timer's structure elements are updated
            * and the timer is taken out of expired timer queue
            */
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    ce94:	20ff      	movs	r0, #255	; 0xff
            */
            expiredTimerQueueHead = nextExpiredTimer;

            if (SWTIMER_INVALID == expiredTimerQueueHead)
            {
                expiredTimerQueueTail = SWTIMER_INVALID;
    ce96:	4b24      	ldr	r3, [pc, #144]	; (cf28 <SwTimersExecute+0xe8>)
    ce98:	4698      	mov	r8, r3
		cpu_irq_enable();
    ce9a:	4b1f      	ldr	r3, [pc, #124]	; (cf18 <SwTimersExecute+0xd8>)
    ce9c:	469c      	mov	ip, r3
    ce9e:	e004      	b.n	ceaa <SwTimersExecute+0x6a>
    cea0:	4643      	mov	r3, r8
    cea2:	6018      	str	r0, [r3, #0]
    cea4:	e01e      	b.n	cee4 <SwTimersExecute+0xa4>
            }

            cpu_irq_restore(flags);

            if (NULL != callback)
    cea6:	2e00      	cmp	r6, #0
    cea8:	d125      	bne.n	cef6 <SwTimersExecute+0xb6>
        while (SWTIMER_INVALID != expiredTimerQueueHead)
    ceaa:	4b1d      	ldr	r3, [pc, #116]	; (cf20 <SwTimersExecute+0xe0>)
    ceac:	681b      	ldr	r3, [r3, #0]
    ceae:	2bff      	cmp	r3, #255	; 0xff
    ceb0:	d024      	beq.n	cefc <SwTimersExecute+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    ceb2:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    ceb6:	424b      	negs	r3, r1
    ceb8:	414b      	adcs	r3, r1
    ceba:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    cebc:	b672      	cpsid	i
    cebe:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    cec2:	4653      	mov	r3, sl
    cec4:	701a      	strb	r2, [r3, #0]
	return flags;
    cec6:	9f01      	ldr	r7, [sp, #4]
            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    cec8:	6823      	ldr	r3, [r4, #0]
    ceca:	011b      	lsls	r3, r3, #4
    cecc:	444b      	add	r3, r9
    cece:	7b19      	ldrb	r1, [r3, #12]
            callback = (SwTimerCallbackFunc_t)swTimers[expiredTimerQueueHead].timerCb;
    ced0:	685e      	ldr	r6, [r3, #4]
            cbParam = swTimers[expiredTimerQueueHead].paramCb;
    ced2:	689d      	ldr	r5, [r3, #8]
    ced4:	46ab      	mov	fp, r5
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    ced6:	7318      	strb	r0, [r3, #12]
            swTimers[expiredTimerQueueHead].timerCb = NULL;
    ced8:	605a      	str	r2, [r3, #4]
            swTimers[expiredTimerQueueHead].paramCb = NULL;
    ceda:	609a      	str	r2, [r3, #8]
            swTimers[expiredTimerQueueHead].loaded = false;
    cedc:	735a      	strb	r2, [r3, #13]
            expiredTimerQueueHead = nextExpiredTimer;
    cede:	6021      	str	r1, [r4, #0]
            if (SWTIMER_INVALID == expiredTimerQueueHead)
    cee0:	29ff      	cmp	r1, #255	; 0xff
    cee2:	d0dd      	beq.n	cea0 <SwTimersExecute+0x60>
	if (cpu_irq_is_enabled_flags(flags))
    cee4:	4238      	tst	r0, r7
    cee6:	d0de      	beq.n	cea6 <SwTimersExecute+0x66>
		cpu_irq_enable();
    cee8:	2301      	movs	r3, #1
    ceea:	4661      	mov	r1, ip
    ceec:	700b      	strb	r3, [r1, #0]
    ceee:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    cef2:	b662      	cpsie	i
    cef4:	e7d7      	b.n	cea6 <SwTimersExecute+0x66>
            {
                /* Callback function is called */
                callback(cbParam);
    cef6:	4658      	mov	r0, fp
    cef8:	47b0      	blx	r6
    cefa:	e7ca      	b.n	ce92 <SwTimersExecute+0x52>
                (void)now;
            }
        }
    }
}
    cefc:	b003      	add	sp, #12
    cefe:	bc3c      	pop	{r2, r3, r4, r5}
    cf00:	4690      	mov	r8, r2
    cf02:	4699      	mov	r9, r3
    cf04:	46a2      	mov	sl, r4
    cf06:	46ab      	mov	fp, r5
    cf08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cf0a:	46c0      	nop			; (mov r8, r8)
    cf0c:	20002d74 	.word	0x20002d74
    cf10:	20002d70 	.word	0x20002d70
    cf14:	00012d9d 	.word	0x00012d9d
    cf18:	20000008 	.word	0x20000008
    cf1c:	0000caa1 	.word	0x0000caa1
    cf20:	20001e64 	.word	0x20001e64
    cf24:	20002be0 	.word	0x20002be0
    cf28:	20001e68 	.word	0x20001e68

0000cf2c <TIMER_TaskHandler>:
{
    cf2c:	b510      	push	{r4, lr}
    SwTimersExecute();
    cf2e:	4b02      	ldr	r3, [pc, #8]	; (cf38 <TIMER_TaskHandler+0xc>)
    cf30:	4798      	blx	r3
}
    cf32:	2000      	movs	r0, #0
    cf34:	bd10      	pop	{r4, pc}
    cf36:	46c0      	nop			; (mov r8, r8)
    cf38:	0000ce41 	.word	0x0000ce41

0000cf3c <SwTimerStop>:
        LORAWAN_INVALID_PARAMETER if timerId is not valid
        LORAWAN_INVALID_REQUEST if timerId was not started before
        LORAWAN_SUCCESS if it is successfully stopped
******************************************************************************/
StackRetStatus_t SwTimerStop(uint8_t timerId)
{
    cf3c:	b570      	push	{r4, r5, r6, lr}
    cf3e:	b082      	sub	sp, #8
    cf40:	0004      	movs	r4, r0
    uint8_t prevIndex;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    cf42:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    cf44:	2c18      	cmp	r4, #24
    cf46:	d901      	bls.n	cf4c <SwTimerStop+0x10>
        return LORAWAN_SUCCESS;
    }

    SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
    return LORAWAN_INVALID_REQUEST;
}
    cf48:	b002      	add	sp, #8
    cf4a:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    cf4c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    cf50:	425a      	negs	r2, r3
    cf52:	4153      	adcs	r3, r2
    cf54:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    cf56:	b672      	cpsid	i
    cf58:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    cf5c:	2200      	movs	r2, #0
    cf5e:	4b47      	ldr	r3, [pc, #284]	; (d07c <SwTimerStop+0x140>)
    cf60:	701a      	strb	r2, [r3, #0]
	return flags;
    cf62:	9d01      	ldr	r5, [sp, #4]
    swtimerInternalHandler();
    cf64:	4b46      	ldr	r3, [pc, #280]	; (d080 <SwTimerStop+0x144>)
    cf66:	4798      	blx	r3
    if (runningTimers > 0)
    cf68:	4b46      	ldr	r3, [pc, #280]	; (d084 <SwTimerStop+0x148>)
    cf6a:	781b      	ldrb	r3, [r3, #0]
    cf6c:	2b00      	cmp	r3, #0
    cf6e:	d040      	beq.n	cff2 <SwTimerStop+0xb6>
        uint8_t timer_count = runningTimers;
    cf70:	4b44      	ldr	r3, [pc, #272]	; (d084 <SwTimerStop+0x148>)
    cf72:	781b      	ldrb	r3, [r3, #0]
    cf74:	b2db      	uxtb	r3, r3
        prevIndex = currIndex = runningTimerQueueHead;
    cf76:	4a44      	ldr	r2, [pc, #272]	; (d088 <SwTimerStop+0x14c>)
    cf78:	6816      	ldr	r6, [r2, #0]
    cf7a:	b2f1      	uxtb	r1, r6
        while (timer_count > 0)
    cf7c:	2b00      	cmp	r3, #0
    cf7e:	d038      	beq.n	cff2 <SwTimerStop+0xb6>
            if (timerId == currIndex)
    cf80:	428c      	cmp	r4, r1
    cf82:	d00b      	beq.n	cf9c <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    cf84:	4841      	ldr	r0, [pc, #260]	; (d08c <SwTimerStop+0x150>)
    cf86:	010a      	lsls	r2, r1, #4
    cf88:	1882      	adds	r2, r0, r2
    cf8a:	7b12      	ldrb	r2, [r2, #12]
            timer_count--;
    cf8c:	3b01      	subs	r3, #1
    cf8e:	b2db      	uxtb	r3, r3
        while (timer_count > 0)
    cf90:	2b00      	cmp	r3, #0
    cf92:	d02e      	beq.n	cff2 <SwTimerStop+0xb6>
            if (timerId == currIndex)
    cf94:	4294      	cmp	r4, r2
    cf96:	d001      	beq.n	cf9c <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    cf98:	0011      	movs	r1, r2
    cf9a:	e7f4      	b.n	cf86 <SwTimerStop+0x4a>
                if (timerId == runningTimerQueueHead)
    cf9c:	42a6      	cmp	r6, r4
    cf9e:	d01d      	beq.n	cfdc <SwTimerStop+0xa0>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    cfa0:	4b3a      	ldr	r3, [pc, #232]	; (d08c <SwTimerStop+0x150>)
    cfa2:	0122      	lsls	r2, r4, #4
    cfa4:	189a      	adds	r2, r3, r2
    cfa6:	7b12      	ldrb	r2, [r2, #12]
    cfa8:	0109      	lsls	r1, r1, #4
    cfaa:	1859      	adds	r1, r3, r1
    cfac:	730a      	strb	r2, [r1, #12]
                swTimers[timerId].nextTimer  = SWTIMER_INVALID;
    cfae:	0122      	lsls	r2, r4, #4
    cfb0:	4b36      	ldr	r3, [pc, #216]	; (d08c <SwTimerStop+0x150>)
    cfb2:	189b      	adds	r3, r3, r2
    cfb4:	22ff      	movs	r2, #255	; 0xff
    cfb6:	731a      	strb	r2, [r3, #12]
            runningTimers--;
    cfb8:	4a32      	ldr	r2, [pc, #200]	; (d084 <SwTimerStop+0x148>)
    cfba:	7813      	ldrb	r3, [r2, #0]
    cfbc:	3b01      	subs	r3, #1
    cfbe:	b2db      	uxtb	r3, r3
    cfc0:	7013      	strb	r3, [r2, #0]
        swTimers[timerId].timerCb = NULL;
    cfc2:	0124      	lsls	r4, r4, #4
    cfc4:	4b31      	ldr	r3, [pc, #196]	; (d08c <SwTimerStop+0x150>)
    cfc6:	191c      	adds	r4, r3, r4
    cfc8:	2300      	movs	r3, #0
    cfca:	6063      	str	r3, [r4, #4]
        swTimers[timerId].paramCb = NULL;
    cfcc:	60a3      	str	r3, [r4, #8]
        swTimers[timerId].loaded = false;
    cfce:	7363      	strb	r3, [r4, #13]
	if (cpu_irq_is_enabled_flags(flags))
    cfd0:	33ff      	adds	r3, #255	; 0xff
        return LORAWAN_SUCCESS;
    cfd2:	2008      	movs	r0, #8
    cfd4:	422b      	tst	r3, r5
    cfd6:	d0b7      	beq.n	cf48 <SwTimerStop+0xc>
    cfd8:	2301      	movs	r3, #1
    cfda:	e040      	b.n	d05e <SwTimerStop+0x122>
                    common_tc_compare_stop();
    cfdc:	4b2c      	ldr	r3, [pc, #176]	; (d090 <SwTimerStop+0x154>)
    cfde:	4798      	blx	r3
                    runningTimerQueueHead = swTimers[timerId].nextTimer;
    cfe0:	0122      	lsls	r2, r4, #4
    cfe2:	4b2a      	ldr	r3, [pc, #168]	; (d08c <SwTimerStop+0x150>)
    cfe4:	189b      	adds	r3, r3, r2
    cfe6:	7b18      	ldrb	r0, [r3, #12]
    cfe8:	4b27      	ldr	r3, [pc, #156]	; (d088 <SwTimerStop+0x14c>)
    cfea:	6018      	str	r0, [r3, #0]
                    loadHwTimer(runningTimerQueueHead);
    cfec:	4b29      	ldr	r3, [pc, #164]	; (d094 <SwTimerStop+0x158>)
    cfee:	4798      	blx	r3
    cff0:	e7dd      	b.n	cfae <SwTimerStop+0x72>
        prevIndex = currIndex = expiredTimerQueueHead;
    cff2:	4b29      	ldr	r3, [pc, #164]	; (d098 <SwTimerStop+0x15c>)
    cff4:	6818      	ldr	r0, [r3, #0]
    cff6:	b2c2      	uxtb	r2, r0
        while (SWTIMER_INVALID != currIndex)
    cff8:	2aff      	cmp	r2, #255	; 0xff
    cffa:	d02c      	beq.n	d056 <SwTimerStop+0x11a>
            if (timerId == currIndex)
    cffc:	4294      	cmp	r4, r2
    cffe:	d009      	beq.n	d014 <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    d000:	4922      	ldr	r1, [pc, #136]	; (d08c <SwTimerStop+0x150>)
    d002:	0113      	lsls	r3, r2, #4
    d004:	18cb      	adds	r3, r1, r3
    d006:	7b1b      	ldrb	r3, [r3, #12]
        while (SWTIMER_INVALID != currIndex)
    d008:	2bff      	cmp	r3, #255	; 0xff
    d00a:	d024      	beq.n	d056 <SwTimerStop+0x11a>
            if (timerId == currIndex)
    d00c:	429c      	cmp	r4, r3
    d00e:	d001      	beq.n	d014 <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    d010:	001a      	movs	r2, r3
    d012:	e7f6      	b.n	d002 <SwTimerStop+0xc6>
                if (timerId == expiredTimerQueueHead)
    d014:	42a0      	cmp	r0, r4
    d016:	d00d      	beq.n	d034 <SwTimerStop+0xf8>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    d018:	4b1c      	ldr	r3, [pc, #112]	; (d08c <SwTimerStop+0x150>)
    d01a:	0121      	lsls	r1, r4, #4
    d01c:	1859      	adds	r1, r3, r1
    d01e:	7b09      	ldrb	r1, [r1, #12]
    d020:	0110      	lsls	r0, r2, #4
    d022:	181b      	adds	r3, r3, r0
    d024:	7319      	strb	r1, [r3, #12]
                    if (timerId == expiredTimerQueueTail)
    d026:	4b1d      	ldr	r3, [pc, #116]	; (d09c <SwTimerStop+0x160>)
    d028:	681b      	ldr	r3, [r3, #0]
    d02a:	429c      	cmp	r4, r3
    d02c:	d1c9      	bne.n	cfc2 <SwTimerStop+0x86>
                        expiredTimerQueueTail = prevIndex;
    d02e:	4b1b      	ldr	r3, [pc, #108]	; (d09c <SwTimerStop+0x160>)
    d030:	601a      	str	r2, [r3, #0]
    d032:	e7c6      	b.n	cfc2 <SwTimerStop+0x86>
                    if (expiredTimerQueueHead == expiredTimerQueueTail)
    d034:	4b19      	ldr	r3, [pc, #100]	; (d09c <SwTimerStop+0x160>)
    d036:	681b      	ldr	r3, [r3, #0]
    d038:	4298      	cmp	r0, r3
    d03a:	d006      	beq.n	d04a <SwTimerStop+0x10e>
                        expiredTimerQueueHead = swTimers[expiredTimerQueueHead].nextTimer;
    d03c:	0100      	lsls	r0, r0, #4
    d03e:	4b13      	ldr	r3, [pc, #76]	; (d08c <SwTimerStop+0x150>)
    d040:	1818      	adds	r0, r3, r0
    d042:	7b02      	ldrb	r2, [r0, #12]
    d044:	4b14      	ldr	r3, [pc, #80]	; (d098 <SwTimerStop+0x15c>)
    d046:	601a      	str	r2, [r3, #0]
    d048:	e7bb      	b.n	cfc2 <SwTimerStop+0x86>
                        expiredTimerQueueHead = expiredTimerQueueTail = SWTIMER_INVALID;
    d04a:	23ff      	movs	r3, #255	; 0xff
    d04c:	4a13      	ldr	r2, [pc, #76]	; (d09c <SwTimerStop+0x160>)
    d04e:	6013      	str	r3, [r2, #0]
    d050:	4a11      	ldr	r2, [pc, #68]	; (d098 <SwTimerStop+0x15c>)
    d052:	6013      	str	r3, [r2, #0]
    d054:	e7b5      	b.n	cfc2 <SwTimerStop+0x86>
    d056:	23ff      	movs	r3, #255	; 0xff
    d058:	422b      	tst	r3, r5
    d05a:	d00a      	beq.n	d072 <SwTimerStop+0x136>
    d05c:	2300      	movs	r3, #0
		cpu_irq_enable();
    d05e:	2101      	movs	r1, #1
    d060:	4a06      	ldr	r2, [pc, #24]	; (d07c <SwTimerStop+0x140>)
    d062:	7011      	strb	r1, [r2, #0]
    d064:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d068:	b662      	cpsie	i
    if (timerStopReqStatus)
    d06a:	2b00      	cmp	r3, #0
    d06c:	d103      	bne.n	d076 <SwTimerStop+0x13a>
    return LORAWAN_INVALID_REQUEST;
    d06e:	2015      	movs	r0, #21
    d070:	e76a      	b.n	cf48 <SwTimerStop+0xc>
    d072:	2015      	movs	r0, #21
    d074:	e768      	b.n	cf48 <SwTimerStop+0xc>
        return LORAWAN_SUCCESS;
    d076:	2008      	movs	r0, #8
    d078:	e766      	b.n	cf48 <SwTimerStop+0xc>
    d07a:	46c0      	nop			; (mov r8, r8)
    d07c:	20000008 	.word	0x20000008
    d080:	0000caa1 	.word	0x0000caa1
    d084:	20001e70 	.word	0x20001e70
    d088:	20001e6c 	.word	0x20001e6c
    d08c:	20002be0 	.word	0x20002be0
    d090:	00012de9 	.word	0x00012de9
    d094:	0000ca09 	.word	0x0000ca09
    d098:	20001e64 	.word	0x20001e64
    d09c:	20001e68 	.word	0x20001e68

0000d0a0 <SwTimerRunRemainingTime>:
{
    d0a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d0a2:	b083      	sub	sp, #12
    d0a4:	0005      	movs	r5, r0
    void * timerCb = (void*)(swTimers[runningTimerQueueHead].timerCb);
    d0a6:	4b0b      	ldr	r3, [pc, #44]	; (d0d4 <SwTimerRunRemainingTime+0x34>)
    d0a8:	681c      	ldr	r4, [r3, #0]
    d0aa:	0122      	lsls	r2, r4, #4
    d0ac:	4b0a      	ldr	r3, [pc, #40]	; (d0d8 <SwTimerRunRemainingTime+0x38>)
    d0ae:	189b      	adds	r3, r3, r2
    d0b0:	685e      	ldr	r6, [r3, #4]
    void *paramCb = swTimers[runningTimerQueueHead].paramCb;
    d0b2:	689f      	ldr	r7, [r3, #8]
    uint8_t timerId = runningTimerQueueHead;
    d0b4:	b2e4      	uxtb	r4, r4
    if (LORAWAN_SUCCESS == SwTimerStop(runningTimerQueueHead))
    d0b6:	0020      	movs	r0, r4
    d0b8:	4b08      	ldr	r3, [pc, #32]	; (d0dc <SwTimerRunRemainingTime+0x3c>)
    d0ba:	4798      	blx	r3
    d0bc:	2808      	cmp	r0, #8
    d0be:	d001      	beq.n	d0c4 <SwTimerRunRemainingTime+0x24>
}
    d0c0:	b003      	add	sp, #12
    d0c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        SwTimerStart(timerId, offset, SW_TIMEOUT_RELATIVE, timerCb, paramCb);
    d0c4:	9700      	str	r7, [sp, #0]
    d0c6:	0033      	movs	r3, r6
    d0c8:	2200      	movs	r2, #0
    d0ca:	0029      	movs	r1, r5
    d0cc:	0020      	movs	r0, r4
    d0ce:	4c04      	ldr	r4, [pc, #16]	; (d0e0 <SwTimerRunRemainingTime+0x40>)
    d0d0:	47a0      	blx	r4
}
    d0d2:	e7f5      	b.n	d0c0 <SwTimerRunRemainingTime+0x20>
    d0d4:	20001e6c 	.word	0x20001e6c
    d0d8:	20002be0 	.word	0x20002be0
    d0dc:	0000cf3d 	.word	0x0000cf3d
    d0e0:	0000cc25 	.word	0x0000cc25

0000d0e4 <SystemTimerSync>:
/**************************************************************************//**
\brief Resumes the software timer by offseting it with given time
\param[in] timeToSync Amount of duration to offset from known system time
******************************************************************************/
void SystemTimerSync(uint64_t timeToSync)
{
    d0e4:	b570      	push	{r4, r5, r6, lr}
    uint8_t timerId;
    uint16_t adjustOffset;

    sysTimeLastKnown += timeToSync;
    d0e6:	4b22      	ldr	r3, [pc, #136]	; (d170 <SystemTimerSync+0x8c>)
    d0e8:	681c      	ldr	r4, [r3, #0]
    d0ea:	685d      	ldr	r5, [r3, #4]
    d0ec:	1900      	adds	r0, r0, r4
    d0ee:	4169      	adcs	r1, r5
    d0f0:	6018      	str	r0, [r3, #0]
    d0f2:	6059      	str	r1, [r3, #4]

    /* 1. Update system time */
    sysTimeOvf = (uint32_t) (sysTimeLastKnown >> 32);
    d0f4:	4b1f      	ldr	r3, [pc, #124]	; (d174 <SystemTimerSync+0x90>)
    d0f6:	6019      	str	r1, [r3, #0]
    sysTime = (uint16_t) ((sysTimeLastKnown >> SWTIMER_SYSTIME_SHIFTMASK) & 0xffff);
    d0f8:	0c02      	lsrs	r2, r0, #16
    d0fa:	4b1f      	ldr	r3, [pc, #124]	; (d178 <SystemTimerSync+0x94>)
    d0fc:	801a      	strh	r2, [r3, #0]

    /* 2. Adjust expiration of running timers */
    adjustOffset = (uint16_t) sysTimeLastKnown;
    d0fe:	b280      	uxth	r0, r0
    timerId = runningTimerQueueHead;
    d100:	4b1e      	ldr	r3, [pc, #120]	; (d17c <SystemTimerSync+0x98>)
    d102:	781b      	ldrb	r3, [r3, #0]
    for (uint8_t index = 0; index < runningTimers; index++)
    d104:	4a1e      	ldr	r2, [pc, #120]	; (d180 <SystemTimerSync+0x9c>)
    d106:	7812      	ldrb	r2, [r2, #0]
    d108:	2a00      	cmp	r2, #0
    d10a:	d012      	beq.n	d132 <SystemTimerSync+0x4e>
    d10c:	2200      	movs	r2, #0
    {
        if (SWTIMER_INVALID != timerId)
        {
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    d10e:	4c1d      	ldr	r4, [pc, #116]	; (d184 <SystemTimerSync+0xa0>)
    for (uint8_t index = 0; index < runningTimers; index++)
    d110:	4d1b      	ldr	r5, [pc, #108]	; (d180 <SystemTimerSync+0x9c>)
    d112:	e005      	b.n	d120 <SystemTimerSync+0x3c>
    d114:	3201      	adds	r2, #1
    d116:	b2d2      	uxtb	r2, r2
    d118:	7829      	ldrb	r1, [r5, #0]
    d11a:	b2c9      	uxtb	r1, r1
    d11c:	4291      	cmp	r1, r2
    d11e:	d908      	bls.n	d132 <SystemTimerSync+0x4e>
        if (SWTIMER_INVALID != timerId)
    d120:	2bff      	cmp	r3, #255	; 0xff
    d122:	d0f7      	beq.n	d114 <SystemTimerSync+0x30>
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    d124:	011b      	lsls	r3, r3, #4
    d126:	5919      	ldr	r1, [r3, r4]
    d128:	1a09      	subs	r1, r1, r0
    d12a:	5119      	str	r1, [r3, r4]
            timerId = swTimers[timerId].nextTimer;
    d12c:	18e3      	adds	r3, r4, r3
    d12e:	7b1b      	ldrb	r3, [r3, #12]
    d130:	e7f0      	b.n	d114 <SystemTimerSync+0x30>
        }
    }

    /* 3. Start hardware timer */
    common_tc_init();
    d132:	4b15      	ldr	r3, [pc, #84]	; (d188 <SystemTimerSync+0xa4>)
    d134:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    d136:	4815      	ldr	r0, [pc, #84]	; (d18c <SystemTimerSync+0xa8>)
    d138:	4b15      	ldr	r3, [pc, #84]	; (d190 <SystemTimerSync+0xac>)
    d13a:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    d13c:	4815      	ldr	r0, [pc, #84]	; (d194 <SystemTimerSync+0xb0>)
    d13e:	4b16      	ldr	r3, [pc, #88]	; (d198 <SystemTimerSync+0xb4>)
    d140:	4798      	blx	r3

    /* 4. Resume timer queue operations */
    if (runningTimers && (SWTIMER_INVALID != runningTimerQueueHead))
    d142:	4b0f      	ldr	r3, [pc, #60]	; (d180 <SystemTimerSync+0x9c>)
    d144:	781b      	ldrb	r3, [r3, #0]
    d146:	2b00      	cmp	r3, #0
    d148:	d009      	beq.n	d15e <SystemTimerSync+0x7a>
    d14a:	4b0c      	ldr	r3, [pc, #48]	; (d17c <SystemTimerSync+0x98>)
    d14c:	681b      	ldr	r3, [r3, #0]
    d14e:	2bff      	cmp	r3, #255	; 0xff
    d150:	d005      	beq.n	d15e <SystemTimerSync+0x7a>
    {
        uint32_t remainingTime = SwTimerNextExpiryDuration();
    d152:	4b12      	ldr	r3, [pc, #72]	; (d19c <SystemTimerSync+0xb8>)
    d154:	4798      	blx	r3

        if (SWTIMER_MIN_TIMEOUT > remainingTime)
    d156:	28fe      	cmp	r0, #254	; 0xfe
    d158:	d902      	bls.n	d160 <SystemTimerSync+0x7c>
        else
        {
            /*
            * There is some time left in head timer, so restart it.
            */
            SwTimerRunRemainingTime(remainingTime);
    d15a:	4b11      	ldr	r3, [pc, #68]	; (d1a0 <SystemTimerSync+0xbc>)
    d15c:	4798      	blx	r3
        }
    }
}
    d15e:	bd70      	pop	{r4, r5, r6, pc}
            isTimerTriggered = true;
    d160:	2201      	movs	r2, #1
    d162:	4b10      	ldr	r3, [pc, #64]	; (d1a4 <SystemTimerSync+0xc0>)
    d164:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    d166:	2001      	movs	r0, #1
    d168:	4b0f      	ldr	r3, [pc, #60]	; (d1a8 <SystemTimerSync+0xc4>)
    d16a:	4798      	blx	r3
    d16c:	e7f7      	b.n	d15e <SystemTimerSync+0x7a>
    d16e:	46c0      	nop			; (mov r8, r8)
    d170:	20001e78 	.word	0x20001e78
    d174:	20002d74 	.word	0x20002d74
    d178:	20002d70 	.word	0x20002d70
    d17c:	20001e6c 	.word	0x20001e6c
    d180:	20001e70 	.word	0x20001e70
    d184:	20002be0 	.word	0x20002be0
    d188:	00012e7d 	.word	0x00012e7d
    d18c:	0000c949 	.word	0x0000c949
    d190:	00012f01 	.word	0x00012f01
    d194:	0000c921 	.word	0x0000c921
    d198:	00012f0d 	.word	0x00012f0d
    d19c:	0000ce21 	.word	0x0000ce21
    d1a0:	0000d0a1 	.word	0x0000d0a1
    d1a4:	20002d72 	.word	0x20002d72
    d1a8:	0000d23d 	.word	0x0000d23d

0000d1ac <SwTimerWriteTimestamp>:
\param[in] index Index of the system timestamp
\param[in] *timestamp Pointer-to-timestamp to be stored in the given index
******************************************************************************/
void SwTimerWriteTimestamp(uint8_t index, SwTimestamp_t *timestamp)
{
    swTimestamp[index] = *timestamp;
    d1ac:	680a      	ldr	r2, [r1, #0]
    d1ae:	684b      	ldr	r3, [r1, #4]
    d1b0:	00c1      	lsls	r1, r0, #3
    d1b2:	4802      	ldr	r0, [pc, #8]	; (d1bc <SwTimerWriteTimestamp+0x10>)
    d1b4:	1840      	adds	r0, r0, r1
    d1b6:	6002      	str	r2, [r0, #0]
    d1b8:	6043      	str	r3, [r0, #4]
}
    d1ba:	4770      	bx	lr
    d1bc:	20002bd0 	.word	0x20002bd0

0000d1c0 <Stack_Init>:
/**************************************************************************//**
\brief Initializes the system. This is the first stack function to be called
       by the application in the main() function.
******************************************************************************/
void Stack_Init(void)
{
    d1c0:	b510      	push	{r4, lr}
	
	/* LORAWAN_Init() should have been called form here, 
	   but parser application has a round-about way to call it now */
 
	/* Post application task to initiate the execution from there */
	SYSTEM_PostTask(APP_TASK_ID);
    d1c2:	2010      	movs	r0, #16
    d1c4:	4b01      	ldr	r3, [pc, #4]	; (d1cc <Stack_Init+0xc>)
    d1c6:	4798      	blx	r3
}
    d1c8:	bd10      	pop	{r4, pc}
    d1ca:	46c0      	nop			; (mov r8, r8)
    d1cc:	0000d23d 	.word	0x0000d23d

0000d1d0 <SYSTEM_RunTasks>:
/************************************************************************/
/*********************************************************************//**
\brief System tasks execution entry point
*************************************************************************/
void SYSTEM_RunTasks(void)
{
    d1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ((1 << SYSTEM_TASK_ID_COUNT) > sysTaskFlag)
    d1d2:	4b16      	ldr	r3, [pc, #88]	; (d22c <SYSTEM_RunTasks+0x5c>)
    d1d4:	881b      	ldrh	r3, [r3, #0]
    d1d6:	b29b      	uxth	r3, r3
    d1d8:	2b1f      	cmp	r3, #31
    d1da:	d922      	bls.n	d222 <SYSTEM_RunTasks+0x52>
    d1dc:	e7fe      	b.n	d1dc <SYSTEM_RunTasks+0xc>
    { /* Only valid task bits are set */
        while (sysTaskFlag)
        { /* One or more task are pending to execute */
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
            {
                if ((1 << taskId) & sysTaskFlag)
    d1de:	2500      	movs	r5, #0
                    /*
                    * Reset the task bit since it is to be executed now.
                    * It is done inside atomic section to avoid any interrupt context
                    * corrupting the bits.
                    */
                    ATOMIC_SECTION_ENTER
    d1e0:	4b13      	ldr	r3, [pc, #76]	; (d230 <SYSTEM_RunTasks+0x60>)
    d1e2:	4798      	blx	r3
                    sysTaskFlag &= ~(1 << taskId);
    d1e4:	4911      	ldr	r1, [pc, #68]	; (d22c <SYSTEM_RunTasks+0x5c>)
    d1e6:	880b      	ldrh	r3, [r1, #0]
    d1e8:	2201      	movs	r2, #1
    d1ea:	40aa      	lsls	r2, r5
    d1ec:	4393      	bics	r3, r2
    d1ee:	800b      	strh	r3, [r1, #0]
                    ATOMIC_SECTION_EXIT
    d1f0:	4b10      	ldr	r3, [pc, #64]	; (d234 <SYSTEM_RunTasks+0x64>)
    d1f2:	4798      	blx	r3

                    /* Return value is not used now, can be used later */
                    taskHandlers[taskId]();
    d1f4:	00ad      	lsls	r5, r5, #2
    d1f6:	4b10      	ldr	r3, [pc, #64]	; (d238 <SYSTEM_RunTasks+0x68>)
    d1f8:	58eb      	ldr	r3, [r5, r3]
    d1fa:	4798      	blx	r3
                if ((1 << taskId) & sysTaskFlag)
    d1fc:	2101      	movs	r1, #1
        while (sysTaskFlag)
    d1fe:	883b      	ldrh	r3, [r7, #0]
    d200:	b29b      	uxth	r3, r3
    d202:	2b00      	cmp	r3, #0
    d204:	d011      	beq.n	d22a <SYSTEM_RunTasks+0x5a>
                if ((1 << taskId) & sysTaskFlag)
    d206:	8823      	ldrh	r3, [r4, #0]
    d208:	420b      	tst	r3, r1
    d20a:	d1e8      	bne.n	d1de <SYSTEM_RunTasks+0xe>
    d20c:	2201      	movs	r2, #1
    d20e:	8833      	ldrh	r3, [r6, #0]
    d210:	b29b      	uxth	r3, r3
    d212:	0015      	movs	r5, r2
    d214:	4113      	asrs	r3, r2
    d216:	4219      	tst	r1, r3
    d218:	d1e2      	bne.n	d1e0 <SYSTEM_RunTasks+0x10>
    d21a:	3201      	adds	r2, #1
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
    d21c:	2a05      	cmp	r2, #5
    d21e:	d1f6      	bne.n	d20e <SYSTEM_RunTasks+0x3e>
    d220:	e7ed      	b.n	d1fe <SYSTEM_RunTasks+0x2e>
        while (sysTaskFlag)
    d222:	4f02      	ldr	r7, [pc, #8]	; (d22c <SYSTEM_RunTasks+0x5c>)
                if ((1 << taskId) & sysTaskFlag)
    d224:	003c      	movs	r4, r7
    d226:	003e      	movs	r6, r7
    d228:	e7e8      	b.n	d1fc <SYSTEM_RunTasks+0x2c>
        * Can happen only due to corruption, so halt
        * TODO : replace this with assert implementation
        */
        while(1);
    }
}
    d22a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d22c:	20001e80 	.word	0x20001e80
    d230:	0000c1f1 	.word	0x0000c1f1
    d234:	0000c1fd 	.word	0x0000c1fd
    d238:	00018270 	.word	0x00018270

0000d23c <SYSTEM_PostTask>:

\param[in] task - ID of the posted task.
*************************************************************************/

void SYSTEM_PostTask(SYSTEM_Task_t task)
{
    d23c:	b510      	push	{r4, lr}
    d23e:	0004      	movs	r4, r0
    ATOMIC_SECTION_ENTER
    d240:	4b04      	ldr	r3, [pc, #16]	; (d254 <SYSTEM_PostTask+0x18>)
    d242:	4798      	blx	r3
    sysTaskFlag |= task;
    d244:	4b04      	ldr	r3, [pc, #16]	; (d258 <SYSTEM_PostTask+0x1c>)
    d246:	8818      	ldrh	r0, [r3, #0]
    d248:	4320      	orrs	r0, r4
    d24a:	8018      	strh	r0, [r3, #0]
    ATOMIC_SECTION_EXIT
    d24c:	4b03      	ldr	r3, [pc, #12]	; (d25c <SYSTEM_PostTask+0x20>)
    d24e:	4798      	blx	r3
}
    d250:	bd10      	pop	{r4, pc}
    d252:	46c0      	nop			; (mov r8, r8)
    d254:	0000c1f1 	.word	0x0000c1f1
    d258:	20001e80 	.word	0x20001e80
    d25c:	0000c1fd 	.word	0x0000c1fd

0000d260 <Radio_WriteMode>:
\param newModulation	- Sets the modulation.
\param blocking			- Sets if its blocking call or not.
\return					- none.
*************************************************************************/
void Radio_WriteMode(RadioMode_t newMode, RadioModulation_t newModulation, uint8_t blocking)
{
    d260:	b5f0      	push	{r4, r5, r6, r7, lr}
    d262:	46d6      	mov	lr, sl
    d264:	464f      	mov	r7, r9
    d266:	b580      	push	{r7, lr}
    d268:	b083      	sub	sp, #12
    d26a:	9201      	str	r2, [sp, #4]
    uint8_t opMode;
    uint8_t dioMapping;
    RadioModulation_t currentModulation;
    RadioMode_t currentMode;

    if ((MODULATION_FSK == newModulation) &&
    d26c:	2900      	cmp	r1, #0
    d26e:	d102      	bne.n	d276 <Radio_WriteMode+0x16>
    d270:	1f83      	subs	r3, r0, #6
    d272:	2b01      	cmp	r3, #1
    d274:	d92a      	bls.n	d2cc <Radio_WriteMode+0x6c>
        // Unavailable modes for FSK. Just return.
        return;
    }

    // Sanity enforcement on parameters
    newMode &= 0x07;
    d276:	2307      	movs	r3, #7
    d278:	4699      	mov	r9, r3
    d27a:	001c      	movs	r4, r3
    d27c:	4004      	ands	r4, r0
    newModulation &= 0x01;
    d27e:	2601      	movs	r6, #1
    d280:	400e      	ands	r6, r1

    opMode = RADIO_RegisterRead(REG_OPMODE);
    d282:	2001      	movs	r0, #1
    d284:	4b2b      	ldr	r3, [pc, #172]	; (d334 <Radio_WriteMode+0xd4>)
    d286:	4798      	blx	r3
    d288:	0005      	movs	r5, r0
    d28a:	0007      	movs	r7, r0

    if ((opMode & 0x80) != 0)
    d28c:	b243      	sxtb	r3, r0
    d28e:	469a      	mov	sl, r3
    else
    {
        currentModulation = MODULATION_FSK;
    }

    currentMode = opMode & 0x07;
    d290:	464b      	mov	r3, r9
    d292:	4003      	ands	r3, r0

    // If we need to change modulation, we need to do this in sleep mode.
    // Otherwise, we can go straight to changing the current mode to newMode.
    if (newModulation != currentModulation)
    d294:	4652      	mov	r2, sl
    d296:	0fd2      	lsrs	r2, r2, #31
    d298:	4296      	cmp	r6, r2
    d29a:	d00a      	beq.n	d2b2 <Radio_WriteMode+0x52>
    {
        // Go to sleep
        if (MODE_SLEEP != currentMode)
    d29c:	2b00      	cmp	r3, #0
    d29e:	d11a      	bne.n	d2d6 <Radio_WriteMode+0x76>
            // Clear mode bits, effectively going to sleep
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
            currentMode = MODE_SLEEP;
        }
        // Change modulation
        if (MODULATION_FSK == newModulation)
    d2a0:	2e00      	cmp	r6, #0
    d2a2:	d11e      	bne.n	d2e2 <Radio_WriteMode+0x82>
        {
            // Clear MSB and sleep bits to make it stay in sleep
            opMode = opMode & (~0x87);
    d2a4:	2778      	movs	r7, #120	; 0x78
    d2a6:	402f      	ands	r7, r5
        else
        {
            // LoRa mode. Set MSB and clear sleep bits to make it stay in sleep
            opMode = 0x80 | (opMode & (~0x87));
        }
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    d2a8:	0039      	movs	r1, r7
    d2aa:	2001      	movs	r0, #1
    d2ac:	4b22      	ldr	r3, [pc, #136]	; (d338 <Radio_WriteMode+0xd8>)
    d2ae:	4798      	blx	r3
    d2b0:	2300      	movs	r3, #0

    // From here on currentModulation is no longer current, we will use
    // newModulation instead as it reflects the chip configuration.
    // opMode reflects the actual configuration of the chip.

    if (newMode != currentMode)
    d2b2:	42a3      	cmp	r3, r4
    d2b4:	d00a      	beq.n	d2cc <Radio_WriteMode+0x6c>
    {
        // If we need to block until the mode switch is ready, configure the
        // DIO5 pin to relay this information.
        if ((MODE_SLEEP != newMode) && (1 == blocking))
    d2b6:	2c00      	cmp	r4, #0
    d2b8:	d030      	beq.n	d31c <Radio_WriteMode+0xbc>
    d2ba:	9b01      	ldr	r3, [sp, #4]
    d2bc:	2b01      	cmp	r3, #1
    d2be:	d016      	beq.n	d2ee <Radio_WriteMode+0x8e>
            }
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
        }

        // Do the actual mode switch.
        opMode &= ~0x07;                // Clear old mode bits
    d2c0:	21f8      	movs	r1, #248	; 0xf8
    d2c2:	4039      	ands	r1, r7
        opMode |= newMode;              // Set new mode bits
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    d2c4:	4321      	orrs	r1, r4
    d2c6:	2001      	movs	r0, #1
    d2c8:	4b1b      	ldr	r3, [pc, #108]	; (d338 <Radio_WriteMode+0xd8>)
    d2ca:	4798      	blx	r3
                SystemBlockingWaitMs(1);
            }
        }
    }
#endif
}
    d2cc:	b003      	add	sp, #12
    d2ce:	bc0c      	pop	{r2, r3}
    d2d0:	4691      	mov	r9, r2
    d2d2:	469a      	mov	sl, r3
    d2d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
    d2d6:	21f8      	movs	r1, #248	; 0xf8
    d2d8:	4001      	ands	r1, r0
    d2da:	2001      	movs	r0, #1
    d2dc:	4b16      	ldr	r3, [pc, #88]	; (d338 <Radio_WriteMode+0xd8>)
    d2de:	4798      	blx	r3
    d2e0:	e7de      	b.n	d2a0 <Radio_WriteMode+0x40>
            opMode = 0x80 | (opMode & (~0x87));
    d2e2:	2778      	movs	r7, #120	; 0x78
    d2e4:	4653      	mov	r3, sl
    d2e6:	401f      	ands	r7, r3
    d2e8:	2180      	movs	r1, #128	; 0x80
    d2ea:	430f      	orrs	r7, r1
    d2ec:	e7dc      	b.n	d2a8 <Radio_WriteMode+0x48>
            dioMapping = RADIO_RegisterRead(REG_DIOMAPPING2);
    d2ee:	2041      	movs	r0, #65	; 0x41
    d2f0:	4b10      	ldr	r3, [pc, #64]	; (d334 <Radio_WriteMode+0xd4>)
    d2f2:	4798      	blx	r3
            if (MODULATION_FSK == newModulation)
    d2f4:	2e00      	cmp	r6, #0
    d2f6:	d10e      	bne.n	d316 <Radio_WriteMode+0xb6>
                dioMapping |= 0x30;     // DIO5 = 11 means ModeReady in FSK mode
    d2f8:	2130      	movs	r1, #48	; 0x30
    d2fa:	4301      	orrs	r1, r0
    d2fc:	b2c9      	uxtb	r1, r1
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
    d2fe:	2041      	movs	r0, #65	; 0x41
    d300:	4d0d      	ldr	r5, [pc, #52]	; (d338 <Radio_WriteMode+0xd8>)
    d302:	47a8      	blx	r5
        opMode &= ~0x07;                // Clear old mode bits
    d304:	21f8      	movs	r1, #248	; 0xf8
    d306:	4039      	ands	r1, r7
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    d308:	4321      	orrs	r1, r4
    d30a:	2001      	movs	r0, #1
    d30c:	47a8      	blx	r5
			   delay_ms(1);
    d30e:	2001      	movs	r0, #1
    d310:	4b0a      	ldr	r3, [pc, #40]	; (d33c <Radio_WriteMode+0xdc>)
    d312:	4798      	blx	r3
    d314:	e7da      	b.n	d2cc <Radio_WriteMode+0x6c>
                dioMapping &= ~0x30;    // DIO5 = 00 means ModeReady in LoRa mode
    d316:	21cf      	movs	r1, #207	; 0xcf
    d318:	4001      	ands	r1, r0
    d31a:	e7f0      	b.n	d2fe <Radio_WriteMode+0x9e>
        opMode &= ~0x07;                // Clear old mode bits
    d31c:	21f8      	movs	r1, #248	; 0xf8
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    d31e:	4039      	ands	r1, r7
    d320:	2001      	movs	r0, #1
    d322:	4b05      	ldr	r3, [pc, #20]	; (d338 <Radio_WriteMode+0xd8>)
    d324:	4798      	blx	r3
        if (1 == blocking)
    d326:	9b01      	ldr	r3, [sp, #4]
    d328:	2b01      	cmp	r3, #1
    d32a:	d1cf      	bne.n	d2cc <Radio_WriteMode+0x6c>
                SystemBlockingWaitMs(1);
    d32c:	2001      	movs	r0, #1
    d32e:	4b04      	ldr	r3, [pc, #16]	; (d340 <Radio_WriteMode+0xe0>)
    d330:	4798      	blx	r3
    d332:	e7cb      	b.n	d2cc <Radio_WriteMode+0x6c>
    d334:	0000c061 	.word	0x0000c061
    d338:	0000c039 	.word	0x0000c039
    d33c:	000044cd 	.word	0x000044cd
    d340:	0000c1d5 	.word	0x0000c1d5

0000d344 <RADIO_FHSSChangeChannel>:

\param		- none	
\return		- none.
*************************************************************************/
void RADIO_FHSSChangeChannel(void)
{
    d344:	b500      	push	{lr}
    d346:	b083      	sub	sp, #12
    uint32_t freq;
    RADIO_RegisterRead(REG_LORA_IRQFLAGS);
    d348:	2012      	movs	r0, #18
    d34a:	4b0d      	ldr	r3, [pc, #52]	; (d380 <RADIO_FHSSChangeChannel+0x3c>)
    d34c:	4798      	blx	r3

    if (radioConfiguration.frequencyHopPeriod)
    d34e:	4b0d      	ldr	r3, [pc, #52]	; (d384 <RADIO_FHSSChangeChannel+0x40>)
    d350:	8adb      	ldrh	r3, [r3, #22]
    d352:	2b00      	cmp	r3, #0
    d354:	d007      	beq.n	d366 <RADIO_FHSSChangeChannel+0x22>
    {
        if ((radioConfiguration.radioCallback) &&
    d356:	4b0b      	ldr	r3, [pc, #44]	; (d384 <RADIO_FHSSChangeChannel+0x40>)
    d358:	691b      	ldr	r3, [r3, #16]
    d35a:	2b00      	cmp	r3, #0
    d35c:	d003      	beq.n	d366 <RADIO_FHSSChangeChannel+0x22>
            (1 == radioCallbackMask.BitMask.radioFhssfreqCallback))
    d35e:	4a0a      	ldr	r2, [pc, #40]	; (d388 <RADIO_FHSSChangeChannel+0x44>)
    d360:	7812      	ldrb	r2, [r2, #0]
        if ((radioConfiguration.radioCallback) &&
    d362:	0692      	lsls	r2, r2, #26
    d364:	d405      	bmi.n	d372 <RADIO_FHSSChangeChannel+0x2e>
            Radio_WriteFrequency(freq);
        }
    }

    // Clear FHSSChangeChannel interrupt
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 1 << SHIFT1);
    d366:	2102      	movs	r1, #2
    d368:	2012      	movs	r0, #18
    d36a:	4b08      	ldr	r3, [pc, #32]	; (d38c <RADIO_FHSSChangeChannel+0x48>)
    d36c:	4798      	blx	r3
}
    d36e:	b003      	add	sp, #12
    d370:	bd00      	pop	{pc}
            radioConfiguration.radioCallback(RADIO_FHSS_NEXT_FREQ_CALLBACK, (void *)&freq);
    d372:	a901      	add	r1, sp, #4
    d374:	2020      	movs	r0, #32
    d376:	4798      	blx	r3
            Radio_WriteFrequency(freq);
    d378:	9801      	ldr	r0, [sp, #4]
    d37a:	4b05      	ldr	r3, [pc, #20]	; (d390 <RADIO_FHSSChangeChannel+0x4c>)
    d37c:	4798      	blx	r3
    d37e:	e7f2      	b.n	d366 <RADIO_FHSSChangeChannel+0x22>
    d380:	0000c061 	.word	0x0000c061
    d384:	20002d78 	.word	0x20002d78
    d388:	20003046 	.word	0x20003046
    d38c:	0000c039 	.word	0x0000c039
    d390:	0000df79 	.word	0x0000df79

0000d394 <RADIO_ReadRandom>:

\param		- none	
\return		- returns the random number generated.
*************************************************************************/
uint16_t RADIO_ReadRandom(void)
{
    d394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
    uint16_t retVal;
    retVal = 0;
	
	// Turn on the RF switch.
	Radio_EnableRfControl(RADIO_RFCTRL_RX); 
    d396:	2000      	movs	r0, #0
    d398:	4b1a      	ldr	r3, [pc, #104]	; (d404 <RADIO_ReadRandom+0x70>)
    d39a:	4798      	blx	r3
	// Enabling Radio Clock
	Radio_SetClockInput();
    d39c:	4b1a      	ldr	r3, [pc, #104]	; (d408 <RADIO_ReadRandom+0x74>)
    d39e:	4798      	blx	r3
	
    // Mask all interrupts, do many measurements of RSSI
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    d3a0:	2201      	movs	r2, #1
    d3a2:	2101      	movs	r1, #1
    d3a4:	2000      	movs	r0, #0
    d3a6:	4c19      	ldr	r4, [pc, #100]	; (d40c <RADIO_ReadRandom+0x78>)
    d3a8:	47a0      	blx	r4
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0xFF);
    d3aa:	21ff      	movs	r1, #255	; 0xff
    d3ac:	2011      	movs	r0, #17
    d3ae:	4b18      	ldr	r3, [pc, #96]	; (d410 <RADIO_ReadRandom+0x7c>)
    d3b0:	4798      	blx	r3
    Radio_WriteMode(MODE_RXCONT, MODULATION_LORA, 1);
    d3b2:	2201      	movs	r2, #1
    d3b4:	2101      	movs	r1, #1
    d3b6:	2005      	movs	r0, #5
    d3b8:	47a0      	blx	r4
    d3ba:	2410      	movs	r4, #16
    retVal = 0;
    d3bc:	2500      	movs	r5, #0
    for (i = 0; i < 16; i++)
    {
        SystemBlockingWaitMs(1);
    d3be:	4f15      	ldr	r7, [pc, #84]	; (d414 <RADIO_ReadRandom+0x80>)
        retVal <<= SHIFT1;
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    d3c0:	4e15      	ldr	r6, [pc, #84]	; (d418 <RADIO_ReadRandom+0x84>)
        SystemBlockingWaitMs(1);
    d3c2:	2001      	movs	r0, #1
    d3c4:	47b8      	blx	r7
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    d3c6:	202c      	movs	r0, #44	; 0x2c
    d3c8:	47b0      	blx	r6
    d3ca:	2301      	movs	r3, #1
    d3cc:	4018      	ands	r0, r3
        retVal <<= SHIFT1;
    d3ce:	006d      	lsls	r5, r5, #1
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    d3d0:	4305      	orrs	r5, r0
    d3d2:	b2ad      	uxth	r5, r5
    d3d4:	3c01      	subs	r4, #1
    d3d6:	b2e4      	uxtb	r4, r4
    for (i = 0; i < 16; i++)
    d3d8:	2c00      	cmp	r4, #0
    d3da:	d1f2      	bne.n	d3c2 <RADIO_ReadRandom+0x2e>
    }
	
	// Turning off the RF switch now.
	Radio_DisableRfControl(RADIO_RFCTRL_RX);
    d3dc:	2000      	movs	r0, #0
    d3de:	4b0f      	ldr	r3, [pc, #60]	; (d41c <RADIO_ReadRandom+0x88>)
    d3e0:	4798      	blx	r3
	
    // Return radio to sleep
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    d3e2:	2201      	movs	r2, #1
    d3e4:	2101      	movs	r1, #1
    d3e6:	2000      	movs	r0, #0
    d3e8:	4b08      	ldr	r3, [pc, #32]	; (d40c <RADIO_ReadRandom+0x78>)
    d3ea:	4798      	blx	r3
    // Clear interrupts in case any have been generated
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 0xFF);
    d3ec:	21ff      	movs	r1, #255	; 0xff
    d3ee:	2012      	movs	r0, #18
    d3f0:	4c07      	ldr	r4, [pc, #28]	; (d410 <RADIO_ReadRandom+0x7c>)
    d3f2:	47a0      	blx	r4
    // Unmask all interrupts
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0x00);
    d3f4:	2100      	movs	r1, #0
    d3f6:	2011      	movs	r0, #17
    d3f8:	47a0      	blx	r4
	// Disabling Radio Clock save power
	Radio_ResetClockInput();
    d3fa:	4b09      	ldr	r3, [pc, #36]	; (d420 <RADIO_ReadRandom+0x8c>)
    d3fc:	4798      	blx	r3
	
    return retVal;
}
    d3fe:	0028      	movs	r0, r5
    d400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d402:	46c0      	nop			; (mov r8, r8)
    d404:	0000e835 	.word	0x0000e835
    d408:	0000ebf1 	.word	0x0000ebf1
    d40c:	0000d261 	.word	0x0000d261
    d410:	0000c039 	.word	0x0000c039
    d414:	0000c1d5 	.word	0x0000c1d5
    d418:	0000c061 	.word	0x0000c061
    d41c:	0000e869 	.word	0x0000e869
    d420:	0000ed21 	.word	0x0000ed21

0000d424 <Radio_ReadRssi>:

\param rssi	- The RSSI measured in the channel.
\return		- ERR_NONE. Other types are not used now.
*************************************************************************/
RadioError_t Radio_ReadRssi(int16_t *rssi)
{
    d424:	b510      	push	{r4, lr}
    d426:	0004      	movs	r4, r0
	if (MODULATION_LORA == radioConfiguration.modulation)
    d428:	2334      	movs	r3, #52	; 0x34
    d42a:	4a11      	ldr	r2, [pc, #68]	; (d470 <Radio_ReadRssi+0x4c>)
    d42c:	5cd3      	ldrb	r3, [r2, r3]
    d42e:	2b01      	cmp	r3, #1
    d430:	d003      	beq.n	d43a <Radio_ReadRssi+0x16>
		*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
	#endif // UT
	}
	else
	{
		return ERR_UNSUPPORTED_ATTR;
    d432:	2006      	movs	r0, #6
	else if (MODULATION_FSK == radioConfiguration.modulation)
    d434:	2b00      	cmp	r3, #0
    d436:	d012      	beq.n	d45e <Radio_ReadRssi+0x3a>
	}
	return ERR_NONE;
}
    d438:	bd10      	pop	{r4, pc}
		if (radioConfiguration.frequency >= HF_FREQ_HZ)
    d43a:	4b0e      	ldr	r3, [pc, #56]	; (d474 <Radio_ReadRssi+0x50>)
    d43c:	6812      	ldr	r2, [r2, #0]
    d43e:	429a      	cmp	r2, r3
    d440:	d906      	bls.n	d450 <Radio_ReadRssi+0x2c>
			*rssi = RSSI_HF_OFFSET + RADIO_RegisterRead(REG_LORA_PKTRSSIVALUE);
    d442:	201a      	movs	r0, #26
    d444:	4b0c      	ldr	r3, [pc, #48]	; (d478 <Radio_ReadRssi+0x54>)
    d446:	4798      	blx	r3
    d448:	389d      	subs	r0, #157	; 0x9d
    d44a:	8020      	strh	r0, [r4, #0]
	return ERR_NONE;
    d44c:	2000      	movs	r0, #0
    d44e:	e7f3      	b.n	d438 <Radio_ReadRssi+0x14>
			*rssi = RSSI_LF_OFFSET + RADIO_RegisterRead(REG_LORA_PKTRSSIVALUE);
    d450:	201a      	movs	r0, #26
    d452:	4b09      	ldr	r3, [pc, #36]	; (d478 <Radio_ReadRssi+0x54>)
    d454:	4798      	blx	r3
    d456:	38a4      	subs	r0, #164	; 0xa4
    d458:	8020      	strh	r0, [r4, #0]
	return ERR_NONE;
    d45a:	2000      	movs	r0, #0
    d45c:	e7ec      	b.n	d438 <Radio_ReadRssi+0x14>
		*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
    d45e:	300b      	adds	r0, #11
    d460:	4b05      	ldr	r3, [pc, #20]	; (d478 <Radio_ReadRssi+0x54>)
    d462:	4798      	blx	r3
    d464:	0840      	lsrs	r0, r0, #1
    d466:	b2c3      	uxtb	r3, r0
    d468:	425b      	negs	r3, r3
    d46a:	8023      	strh	r3, [r4, #0]
	return ERR_NONE;
    d46c:	2000      	movs	r0, #0
    d46e:	e7e3      	b.n	d438 <Radio_ReadRssi+0x14>
    d470:	20002d78 	.word	0x20002d78
    d474:	3361137f 	.word	0x3361137f
    d478:	0000c061 	.word	0x0000c061

0000d47c <Radio_ReadFSKRssi>:

\param rssi	- The RSSI measured in the channel.
\return		- ERR_NONE. Other types are not used now.
*************************************************************************/
RadioError_t Radio_ReadFSKRssi(int16_t *rssi)
{	
    d47c:	b510      	push	{r4, lr}
    d47e:	0004      	movs	r4, r0
#ifdef UT
	*rssi = testRssi;
#else // UT
	*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
    d480:	2011      	movs	r0, #17
    d482:	4b04      	ldr	r3, [pc, #16]	; (d494 <Radio_ReadFSKRssi+0x18>)
    d484:	4798      	blx	r3
    d486:	0840      	lsrs	r0, r0, #1
    d488:	b2c0      	uxtb	r0, r0
    d48a:	4240      	negs	r0, r0
    d48c:	8020      	strh	r0, [r4, #0]
#endif // UT
	
	return ERR_NONE;
}
    d48e:	2000      	movs	r0, #0
    d490:	bd10      	pop	{r4, pc}
    d492:	46c0      	nop			; (mov r8, r8)
    d494:	0000c061 	.word	0x0000c061

0000d498 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    d498:	b510      	push	{r4, lr}
	tmr_cca_callback();
    d49a:	4b01      	ldr	r3, [pc, #4]	; (d4a0 <tc_cca_callback+0x8>)
    d49c:	4798      	blx	r3
}
    d49e:	bd10      	pop	{r4, pc}
    d4a0:	00012ee5 	.word	0x00012ee5

0000d4a4 <tc_ovf_callback>:
{
    d4a4:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    d4a6:	4b01      	ldr	r3, [pc, #4]	; (d4ac <tc_ovf_callback+0x8>)
    d4a8:	4798      	blx	r3
}
    d4aa:	bd10      	pop	{r4, pc}
    d4ac:	00012e9d 	.word	0x00012e9d

0000d4b0 <tmr_read_count>:
{
    d4b0:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    d4b2:	4802      	ldr	r0, [pc, #8]	; (d4bc <tmr_read_count+0xc>)
    d4b4:	4b02      	ldr	r3, [pc, #8]	; (d4c0 <tmr_read_count+0x10>)
    d4b6:	4798      	blx	r3
    d4b8:	b280      	uxth	r0, r0
}
    d4ba:	bd10      	pop	{r4, pc}
    d4bc:	20002e0c 	.word	0x20002e0c
    d4c0:	00006ebd 	.word	0x00006ebd

0000d4c4 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    d4c4:	4b03      	ldr	r3, [pc, #12]	; (d4d4 <tmr_disable_cc_interrupt+0x10>)
    d4c6:	2110      	movs	r1, #16
    d4c8:	681a      	ldr	r2, [r3, #0]
    d4ca:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    d4cc:	7e5a      	ldrb	r2, [r3, #25]
    d4ce:	438a      	bics	r2, r1
    d4d0:	765a      	strb	r2, [r3, #25]
}
    d4d2:	4770      	bx	lr
    d4d4:	20002e0c 	.word	0x20002e0c

0000d4d8 <tmr_enable_cc_interrupt>:
{
    d4d8:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    d4da:	4c0a      	ldr	r4, [pc, #40]	; (d504 <tmr_enable_cc_interrupt+0x2c>)
    d4dc:	6820      	ldr	r0, [r4, #0]
    d4de:	4b0a      	ldr	r3, [pc, #40]	; (d508 <tmr_enable_cc_interrupt+0x30>)
    d4e0:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    d4e2:	4b0a      	ldr	r3, [pc, #40]	; (d50c <tmr_enable_cc_interrupt+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    d4e4:	5c1b      	ldrb	r3, [r3, r0]
    d4e6:	221f      	movs	r2, #31
    d4e8:	401a      	ands	r2, r3
    d4ea:	2301      	movs	r3, #1
    d4ec:	4093      	lsls	r3, r2
    d4ee:	4a08      	ldr	r2, [pc, #32]	; (d510 <tmr_enable_cc_interrupt+0x38>)
    d4f0:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    d4f2:	7e63      	ldrb	r3, [r4, #25]
    d4f4:	2210      	movs	r2, #16
    d4f6:	4313      	orrs	r3, r2
    d4f8:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    d4fa:	6823      	ldr	r3, [r4, #0]
    d4fc:	2210      	movs	r2, #16
    d4fe:	725a      	strb	r2, [r3, #9]
}
    d500:	bd10      	pop	{r4, pc}
    d502:	46c0      	nop			; (mov r8, r8)
    d504:	20002e0c 	.word	0x20002e0c
    d508:	00006b91 	.word	0x00006b91
    d50c:	00018284 	.word	0x00018284
    d510:	e000e100 	.word	0xe000e100

0000d514 <tmr_disable_ovf_interrupt>:
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(2);
		module->enable_callback_mask &= ~TC_INTFLAG_MC(2);
	}
	else {
		module->hw->COUNT8.INTENCLR.reg = (1 << callback_type);
    d514:	4b03      	ldr	r3, [pc, #12]	; (d524 <tmr_disable_ovf_interrupt+0x10>)
    d516:	2101      	movs	r1, #1
    d518:	681a      	ldr	r2, [r3, #0]
    d51a:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~(1 << callback_type);
    d51c:	7e5a      	ldrb	r2, [r3, #25]
    d51e:	438a      	bics	r2, r1
    d520:	765a      	strb	r2, [r3, #25]
}
    d522:	4770      	bx	lr
    d524:	20002e0c 	.word	0x20002e0c

0000d528 <tmr_enable_ovf_interrupt>:
{
    d528:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    d52a:	4c0a      	ldr	r4, [pc, #40]	; (d554 <tmr_enable_ovf_interrupt+0x2c>)
    d52c:	6820      	ldr	r0, [r4, #0]
    d52e:	4b0a      	ldr	r3, [pc, #40]	; (d558 <tmr_enable_ovf_interrupt+0x30>)
    d530:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    d532:	4b0a      	ldr	r3, [pc, #40]	; (d55c <tmr_enable_ovf_interrupt+0x34>)
    d534:	5c1a      	ldrb	r2, [r3, r0]
    d536:	231f      	movs	r3, #31
    d538:	4013      	ands	r3, r2
    d53a:	2201      	movs	r2, #1
    d53c:	0011      	movs	r1, r2
    d53e:	4099      	lsls	r1, r3
    d540:	4b07      	ldr	r3, [pc, #28]	; (d560 <tmr_enable_ovf_interrupt+0x38>)
    d542:	6019      	str	r1, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    d544:	7e63      	ldrb	r3, [r4, #25]
    d546:	2101      	movs	r1, #1
    d548:	430b      	orrs	r3, r1
    d54a:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    d54c:	6823      	ldr	r3, [r4, #0]
    d54e:	725a      	strb	r2, [r3, #9]
}
    d550:	bd10      	pop	{r4, pc}
    d552:	46c0      	nop			; (mov r8, r8)
    d554:	20002e0c 	.word	0x20002e0c
    d558:	00006b91 	.word	0x00006b91
    d55c:	00018284 	.word	0x00018284
    d560:	e000e100 	.word	0xe000e100

0000d564 <tmr_write_cmpreg>:
{
    d564:	b510      	push	{r4, lr}
    d566:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    d568:	2100      	movs	r1, #0
    d56a:	4802      	ldr	r0, [pc, #8]	; (d574 <tmr_write_cmpreg+0x10>)
    d56c:	4b02      	ldr	r3, [pc, #8]	; (d578 <tmr_write_cmpreg+0x14>)
    d56e:	4798      	blx	r3
}
    d570:	bd10      	pop	{r4, pc}
    d572:	46c0      	nop			; (mov r8, r8)
    d574:	20002e0c 	.word	0x20002e0c
    d578:	00006f05 	.word	0x00006f05

0000d57c <save_cpu_interrupt>:
{
    d57c:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    d57e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d582:	425a      	negs	r2, r3
    d584:	4153      	adcs	r3, r2
    d586:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    d588:	b672      	cpsid	i
    d58a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d58e:	2200      	movs	r2, #0
    d590:	4b02      	ldr	r3, [pc, #8]	; (d59c <save_cpu_interrupt+0x20>)
    d592:	701a      	strb	r2, [r3, #0]
	return flags;
    d594:	9801      	ldr	r0, [sp, #4]
	return cpu_irq_save();
    d596:	b2c0      	uxtb	r0, r0
}
    d598:	b002      	add	sp, #8
    d59a:	4770      	bx	lr
    d59c:	20000008 	.word	0x20000008

0000d5a0 <restore_cpu_interrupt>:
	if (cpu_irq_is_enabled_flags(flags))
    d5a0:	2800      	cmp	r0, #0
    d5a2:	d005      	beq.n	d5b0 <restore_cpu_interrupt+0x10>
		cpu_irq_enable();
    d5a4:	2201      	movs	r2, #1
    d5a6:	4b03      	ldr	r3, [pc, #12]	; (d5b4 <restore_cpu_interrupt+0x14>)
    d5a8:	701a      	strb	r2, [r3, #0]
    d5aa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d5ae:	b662      	cpsie	i
}
    d5b0:	4770      	bx	lr
    d5b2:	46c0      	nop			; (mov r8, r8)
    d5b4:	20000008 	.word	0x20000008

0000d5b8 <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    d5b8:	b570      	push	{r4, r5, r6, lr}
	config->clock_source               = GCLK_GENERATOR_0;
    d5ba:	4a33      	ldr	r2, [pc, #204]	; (d688 <tmr_init+0xd0>)
    d5bc:	2100      	movs	r1, #0
    d5be:	2300      	movs	r3, #0
    d5c0:	7011      	strb	r1, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    d5c2:	70d1      	strb	r1, [r2, #3]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    d5c4:	2000      	movs	r0, #0
    d5c6:	8091      	strh	r1, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    d5c8:	7190      	strb	r0, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    d5ca:	71d3      	strb	r3, [r2, #7]
	config->run_in_standby             = false;
    d5cc:	7053      	strb	r3, [r2, #1]
	config->on_demand                  = false;
    d5ce:	7093      	strb	r3, [r2, #2]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    d5d0:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    d5d2:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    d5d4:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    d5d6:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    d5d8:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    d5da:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    d5dc:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    d5de:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    d5e0:	6151      	str	r1, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    d5e2:	6191      	str	r1, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    d5e4:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    d5e6:	6211      	str	r1, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    d5e8:	6251      	str	r1, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    d5ea:	8511      	strh	r1, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    d5ec:	8591      	strh	r1, [r2, #44]	; 0x2c
	config->double_buffering_enabled = false;
    d5ee:	2334      	movs	r3, #52	; 0x34
    d5f0:	54d0      	strb	r0, [r2, r3]
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    d5f2:	3b35      	subs	r3, #53	; 0x35
    d5f4:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    d5f6:	4c25      	ldr	r4, [pc, #148]	; (d68c <tmr_init+0xd4>)
    d5f8:	4925      	ldr	r1, [pc, #148]	; (d690 <tmr_init+0xd8>)
    d5fa:	0020      	movs	r0, r4
    d5fc:	4b25      	ldr	r3, [pc, #148]	; (d694 <tmr_init+0xdc>)
    d5fe:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    d600:	2200      	movs	r2, #0
    d602:	4925      	ldr	r1, [pc, #148]	; (d698 <tmr_init+0xe0>)
    d604:	0020      	movs	r0, r4
    d606:	4d25      	ldr	r5, [pc, #148]	; (d69c <tmr_init+0xe4>)
    d608:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    d60a:	2202      	movs	r2, #2
    d60c:	4924      	ldr	r1, [pc, #144]	; (d6a0 <tmr_init+0xe8>)
    d60e:	0020      	movs	r0, r4
    d610:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    d612:	6820      	ldr	r0, [r4, #0]
    d614:	4b23      	ldr	r3, [pc, #140]	; (d6a4 <tmr_init+0xec>)
    d616:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    d618:	4b23      	ldr	r3, [pc, #140]	; (d6a8 <tmr_init+0xf0>)
    d61a:	5c1a      	ldrb	r2, [r3, r0]
    d61c:	231f      	movs	r3, #31
    d61e:	4013      	ands	r3, r2
    d620:	2101      	movs	r1, #1
    d622:	000a      	movs	r2, r1
    d624:	409a      	lsls	r2, r3
    d626:	4b21      	ldr	r3, [pc, #132]	; (d6ac <tmr_init+0xf4>)
    d628:	601a      	str	r2, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    d62a:	7e63      	ldrb	r3, [r4, #25]
    d62c:	2201      	movs	r2, #1
    d62e:	4313      	orrs	r3, r2
    d630:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    d632:	6822      	ldr	r2, [r4, #0]
    d634:	7251      	strb	r1, [r2, #9]
	return (tc_module->SYNCBUSY.reg);
    d636:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    d638:	2b00      	cmp	r3, #0
    d63a:	d1fc      	bne.n	d636 <tmr_init+0x7e>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    d63c:	6813      	ldr	r3, [r2, #0]
    d63e:	2102      	movs	r1, #2
    d640:	430b      	orrs	r3, r1
    d642:	6013      	str	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;	
    d644:	2000      	movs	r0, #0
    d646:	4b1a      	ldr	r3, [pc, #104]	; (d6b0 <tmr_init+0xf8>)
    d648:	4798      	blx	r3
    d64a:	4d1a      	ldr	r5, [pc, #104]	; (d6b4 <tmr_init+0xfc>)
    d64c:	47a8      	blx	r5
    d64e:	491a      	ldr	r1, [pc, #104]	; (d6b8 <tmr_init+0x100>)
    d650:	4b1a      	ldr	r3, [pc, #104]	; (d6bc <tmr_init+0x104>)
    d652:	4798      	blx	r3
    d654:	1c04      	adds	r4, r0, #0
	#endif
	
	if ((timer_multiplier - (uint32_t)timer_multiplier) >= 0.5f)
    d656:	4b1a      	ldr	r3, [pc, #104]	; (d6c0 <tmr_init+0x108>)
    d658:	4798      	blx	r3
    d65a:	47a8      	blx	r5
    d65c:	1c01      	adds	r1, r0, #0
    d65e:	1c20      	adds	r0, r4, #0
    d660:	4b18      	ldr	r3, [pc, #96]	; (d6c4 <tmr_init+0x10c>)
    d662:	4798      	blx	r3
    d664:	21fc      	movs	r1, #252	; 0xfc
    d666:	0589      	lsls	r1, r1, #22
    d668:	4b17      	ldr	r3, [pc, #92]	; (d6c8 <tmr_init+0x110>)
    d66a:	4798      	blx	r3
    d66c:	2800      	cmp	r0, #0
    d66e:	d005      	beq.n	d67c <tmr_init+0xc4>
	{
		timer_multiplier += 1.0f;
    d670:	21fe      	movs	r1, #254	; 0xfe
    d672:	0589      	lsls	r1, r1, #22
    d674:	1c20      	adds	r0, r4, #0
    d676:	4b15      	ldr	r3, [pc, #84]	; (d6cc <tmr_init+0x114>)
    d678:	4798      	blx	r3
    d67a:	1c04      	adds	r4, r0, #0
	}
	
	return (uint8_t) timer_multiplier;
    d67c:	1c20      	adds	r0, r4, #0
    d67e:	4b10      	ldr	r3, [pc, #64]	; (d6c0 <tmr_init+0x108>)
    d680:	4798      	blx	r3
    d682:	b2c0      	uxtb	r0, r0
}
    d684:	bd70      	pop	{r4, r5, r6, pc}
    d686:	46c0      	nop			; (mov r8, r8)
    d688:	20002dd4 	.word	0x20002dd4
    d68c:	20002e0c 	.word	0x20002e0c
    d690:	42002000 	.word	0x42002000
    d694:	00006bcd 	.word	0x00006bcd
    d698:	0000d4a5 	.word	0x0000d4a5
    d69c:	00006ac9 	.word	0x00006ac9
    d6a0:	0000d499 	.word	0x0000d499
    d6a4:	00006b91 	.word	0x00006b91
    d6a8:	00018284 	.word	0x00018284
    d6ac:	e000e100 	.word	0xe000e100
    d6b0:	00006891 	.word	0x00006891
    d6b4:	0001434d 	.word	0x0001434d
    d6b8:	49742400 	.word	0x49742400
    d6bc:	00013915 	.word	0x00013915
    d6c0:	000133c5 	.word	0x000133c5
    d6c4:	00013f35 	.word	0x00013f35
    d6c8:	0001331d 	.word	0x0001331d
    d6cc:	000135f1 	.word	0x000135f1

0000d6d0 <edbg_eui_read_eui64>:
#define LEN_EUI    256
uint8_t readbuf[LEN_EUI];

uint8_t *
edbg_eui_read_eui64(void)
{
    d6d0:	b570      	push	{r4, r5, r6, lr}
    d6d2:	b090      	sub	sp, #64	; 0x40
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    d6d4:	aa03      	add	r2, sp, #12
    d6d6:	2364      	movs	r3, #100	; 0x64
    d6d8:	9303      	str	r3, [sp, #12]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    d6da:	4b54      	ldr	r3, [pc, #336]	; (d82c <edbg_eui_read_eui64+0x15c>)
    d6dc:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    d6de:	2300      	movs	r3, #0
    d6e0:	6093      	str	r3, [r2, #8]
	config->generator_source = GCLK_GENERATOR_0;
    d6e2:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    d6e4:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    d6e6:	2180      	movs	r1, #128	; 0x80
    d6e8:	0389      	lsls	r1, r1, #14
    d6ea:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
    d6ec:	2101      	movs	r1, #1
    d6ee:	4249      	negs	r1, r1
    d6f0:	82d1      	strh	r1, [r2, #22]
	config->unknown_bus_state_timeout = 65535;
    d6f2:	8291      	strh	r1, [r2, #20]
	config->scl_low_timeout  = false;
    d6f4:	3125      	adds	r1, #37	; 0x25
    d6f6:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    d6f8:	6293      	str	r3, [r2, #40]	; 0x28
	config->scl_stretch_only_after_ack_bit = false;
    d6fa:	3108      	adds	r1, #8
    d6fc:	5453      	strb	r3, [r2, r1]
	config->slave_scl_low_extend_timeout   = false;
    d6fe:	3101      	adds	r1, #1
    d700:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    d702:	3101      	adds	r1, #1
    d704:	5453      	strb	r3, [r2, r1]
	config->sda_scl_rise_time_ns = 215;
    d706:	33d7      	adds	r3, #215	; 0xd7
    d708:	8613      	strh	r3, [r2, #48]	; 0x30
  int timeout2 = 0;
  bool random_mac_address = false;
  uint8_t edbg_status = 0xFF;
  struct i2c_master_config config_i2c_master;
  i2c_master_get_config_defaults(&config_i2c_master);
  config_i2c_master.pinmux_pad0  = EDBG_I2C_SERCOM_PINMUX_PAD0;
    d70a:	4b49      	ldr	r3, [pc, #292]	; (d830 <edbg_eui_read_eui64+0x160>)
    d70c:	61d3      	str	r3, [r2, #28]
  config_i2c_master.pinmux_pad1  = EDBG_I2C_SERCOM_PINMUX_PAD1;
    d70e:	4b49      	ldr	r3, [pc, #292]	; (d834 <edbg_eui_read_eui64+0x164>)
    d710:	6213      	str	r3, [r2, #32]

  i2c_master_init(&i2c_master_instance, EDBG_I2C_MODULE, &config_i2c_master);
    d712:	4c49      	ldr	r4, [pc, #292]	; (d838 <edbg_eui_read_eui64+0x168>)
    d714:	4949      	ldr	r1, [pc, #292]	; (d83c <edbg_eui_read_eui64+0x16c>)
    d716:	0020      	movs	r0, r4
    d718:	4b49      	ldr	r3, [pc, #292]	; (d840 <edbg_eui_read_eui64+0x170>)
    d71a:	4798      	blx	r3
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    d71c:	6822      	ldr	r2, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    d71e:	2107      	movs	r1, #7
    d720:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
    d722:	4219      	tst	r1, r3
    d724:	d1fc      	bne.n	d720 <edbg_eui_read_eui64+0x50>
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    d726:	6813      	ldr	r3, [r2, #0]
    d728:	2102      	movs	r1, #2
    d72a:	430b      	orrs	r3, r1
    d72c:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    d72e:	4b42      	ldr	r3, [pc, #264]	; (d838 <edbg_eui_read_eui64+0x168>)
    d730:	88dc      	ldrh	r4, [r3, #6]
	uint32_t timeout_counter = 0;
    d732:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    d734:	2010      	movs	r0, #16
    d736:	8b51      	ldrh	r1, [r2, #26]
    d738:	4201      	tst	r1, r0
    d73a:	d104      	bne.n	d746 <edbg_eui_read_eui64+0x76>
		timeout_counter++;
    d73c:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    d73e:	42a3      	cmp	r3, r4
    d740:	d3f9      	bcc.n	d736 <edbg_eui_read_eui64+0x66>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    d742:	2310      	movs	r3, #16
    d744:	8353      	strh	r3, [r2, #26]

  i2c_master_enable(&i2c_master_instance);

  struct i2c_master_packet packet = {
    d746:	466a      	mov	r2, sp
    d748:	4b3e      	ldr	r3, [pc, #248]	; (d844 <edbg_eui_read_eui64+0x174>)
    d74a:	cb13      	ldmia	r3!, {r0, r1, r4}
    d74c:	c213      	stmia	r2!, {r0, r1, r4}
  int timeout2 = 0;
    d74e:	2600      	movs	r6, #0
    .hs_master_code  = 0x0,
  };
   
    do
    {
	    edbg_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &packet);
    d750:	4c39      	ldr	r4, [pc, #228]	; (d838 <edbg_eui_read_eui64+0x168>)
    d752:	4d3d      	ldr	r5, [pc, #244]	; (d848 <edbg_eui_read_eui64+0x178>)
    d754:	e003      	b.n	d75e <edbg_eui_read_eui64+0x8e>
	    if(edbg_status == STATUS_ERR_BAD_ADDRESS)
		{
			if(timeout2++ == SLAVE_WAIT_TIMEOUT)
    d756:	1c73      	adds	r3, r6, #1
    d758:	2e0a      	cmp	r6, #10
    d75a:	d033      	beq.n	d7c4 <edbg_eui_read_eui64+0xf4>
    d75c:	001e      	movs	r6, r3
	    edbg_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &packet);
    d75e:	4669      	mov	r1, sp
    d760:	0020      	movs	r0, r4
    d762:	47a8      	blx	r5
	    if(edbg_status == STATUS_ERR_BAD_ADDRESS)
    d764:	2818      	cmp	r0, #24
    d766:	d0f6      	beq.n	d756 <edbg_eui_read_eui64+0x86>
				random_mac_address = true;
				timeout2 = 0;
				break;
			}
		}
		else if(edbg_status == STATUS_ERR_TIMEOUT) {
    d768:	2812      	cmp	r0, #18
    d76a:	d02f      	beq.n	d7cc <edbg_eui_read_eui64+0xfc>
		PRINTF("Timeout 1\n");
		random_mac_address = true;	
		break;
		}
    } while (edbg_status!=STATUS_OK && edbg_status!=0xFF);
    d76c:	3801      	subs	r0, #1
    d76e:	b2c0      	uxtb	r0, r0
    d770:	28fd      	cmp	r0, #253	; 0xfd
    d772:	d9f4      	bls.n	d75e <edbg_eui_read_eui64+0x8e>
	
  packet.data = readbuf;
    d774:	4b35      	ldr	r3, [pc, #212]	; (d84c <edbg_eui_read_eui64+0x17c>)
    d776:	9301      	str	r3, [sp, #4]
  packet.data_length = sizeof(readbuf);
    d778:	2380      	movs	r3, #128	; 0x80
    d77a:	005b      	lsls	r3, r3, #1
    d77c:	466a      	mov	r2, sp
    d77e:	8053      	strh	r3, [r2, #2]
if(random_mac_address == false)
{
  do 
  {
	  edbg_status = i2c_master_read_packet_wait(&i2c_master_instance, &packet) ;
    d780:	4c2d      	ldr	r4, [pc, #180]	; (d838 <edbg_eui_read_eui64+0x168>)
    d782:	4d33      	ldr	r5, [pc, #204]	; (d850 <edbg_eui_read_eui64+0x180>)
    d784:	4669      	mov	r1, sp
    d786:	0020      	movs	r0, r4
    d788:	47a8      	blx	r5
	    if(edbg_status==STATUS_ERR_BAD_ADDRESS)
    d78a:	2818      	cmp	r0, #24
    d78c:	d043      	beq.n	d816 <edbg_eui_read_eui64+0x146>
	    {			
			PRINTF("I2C Slave Not Available");
			random_mac_address = true;	
		    break;
	    }
		else if(edbg_status == STATUS_ERR_TIMEOUT) {
    d78e:	2812      	cmp	r0, #18
    d790:	d048      	beq.n	d824 <edbg_eui_read_eui64+0x154>
			random_mac_address = true;	
			PRINTF("Timeout 2\n");
			break;
		}		
  } while (edbg_status!=STATUS_OK && edbg_status!=0xFF);
    d792:	3801      	subs	r0, #1
    d794:	b2c0      	uxtb	r0, r0
    d796:	28fd      	cmp	r0, #253	; 0xfd
    d798:	d9f4      	bls.n	d784 <edbg_eui_read_eui64+0xb4>
}
  i2c_master_reset(&i2c_master_instance);
    d79a:	4827      	ldr	r0, [pc, #156]	; (d838 <edbg_eui_read_eui64+0x168>)
    d79c:	4b2d      	ldr	r3, [pc, #180]	; (d854 <edbg_eui_read_eui64+0x184>)
    d79e:	4798      	blx	r3
  if(random_mac_address || !(readbuf[0] ^ readbuf[1] ^ readbuf[2] ^ readbuf[3] ^ readbuf[4] ^ readbuf[5] ^ readbuf[6] ^ readbuf[7]))
    d7a0:	4a2a      	ldr	r2, [pc, #168]	; (d84c <edbg_eui_read_eui64+0x17c>)
    d7a2:	7813      	ldrb	r3, [r2, #0]
    d7a4:	7851      	ldrb	r1, [r2, #1]
    d7a6:	404b      	eors	r3, r1
    d7a8:	7891      	ldrb	r1, [r2, #2]
    d7aa:	404b      	eors	r3, r1
    d7ac:	78d1      	ldrb	r1, [r2, #3]
    d7ae:	404b      	eors	r3, r1
    d7b0:	7911      	ldrb	r1, [r2, #4]
    d7b2:	404b      	eors	r3, r1
    d7b4:	7951      	ldrb	r1, [r2, #5]
    d7b6:	404b      	eors	r3, r1
    d7b8:	7991      	ldrb	r1, [r2, #6]
    d7ba:	79d2      	ldrb	r2, [r2, #7]
    d7bc:	404b      	eors	r3, r1
    d7be:	429a      	cmp	r2, r3
    d7c0:	d126      	bne.n	d810 <edbg_eui_read_eui64+0x140>
    d7c2:	e00f      	b.n	d7e4 <edbg_eui_read_eui64+0x114>
				PRINTF("I2C Slave Not Available");
    d7c4:	4824      	ldr	r0, [pc, #144]	; (d858 <edbg_eui_read_eui64+0x188>)
    d7c6:	4b25      	ldr	r3, [pc, #148]	; (d85c <edbg_eui_read_eui64+0x18c>)
    d7c8:	4798      	blx	r3
				break;
    d7ca:	e002      	b.n	d7d2 <edbg_eui_read_eui64+0x102>
		PRINTF("Timeout 1\n");
    d7cc:	4824      	ldr	r0, [pc, #144]	; (d860 <edbg_eui_read_eui64+0x190>)
    d7ce:	4b25      	ldr	r3, [pc, #148]	; (d864 <edbg_eui_read_eui64+0x194>)
    d7d0:	4798      	blx	r3
  packet.data = readbuf;
    d7d2:	4b1e      	ldr	r3, [pc, #120]	; (d84c <edbg_eui_read_eui64+0x17c>)
    d7d4:	9301      	str	r3, [sp, #4]
  packet.data_length = sizeof(readbuf);
    d7d6:	2380      	movs	r3, #128	; 0x80
    d7d8:	005b      	lsls	r3, r3, #1
    d7da:	466a      	mov	r2, sp
    d7dc:	8053      	strh	r3, [r2, #2]
  i2c_master_reset(&i2c_master_instance);
    d7de:	4816      	ldr	r0, [pc, #88]	; (d838 <edbg_eui_read_eui64+0x168>)
    d7e0:	4b1c      	ldr	r3, [pc, #112]	; (d854 <edbg_eui_read_eui64+0x184>)
    d7e2:	4798      	blx	r3
  {
	  unsigned int seed;
	  seed = ((*S_NO_WORD0) ^ (*S_NO_WORD1) ^ (*S_NO_WORD2) ^ (*S_NO_WORD3));
    d7e4:	4b20      	ldr	r3, [pc, #128]	; (d868 <edbg_eui_read_eui64+0x198>)
    d7e6:	6818      	ldr	r0, [r3, #0]
    d7e8:	4b20      	ldr	r3, [pc, #128]	; (d86c <edbg_eui_read_eui64+0x19c>)
    d7ea:	681b      	ldr	r3, [r3, #0]
    d7ec:	4058      	eors	r0, r3
    d7ee:	4b20      	ldr	r3, [pc, #128]	; (d870 <edbg_eui_read_eui64+0x1a0>)
    d7f0:	681b      	ldr	r3, [r3, #0]
    d7f2:	4058      	eors	r0, r3
    d7f4:	4b1f      	ldr	r3, [pc, #124]	; (d874 <edbg_eui_read_eui64+0x1a4>)
    d7f6:	681b      	ldr	r3, [r3, #0]
    d7f8:	4058      	eors	r0, r3
	  srand(seed);
    d7fa:	4b1f      	ldr	r3, [pc, #124]	; (d878 <edbg_eui_read_eui64+0x1a8>)
    d7fc:	4798      	blx	r3
    d7fe:	4c13      	ldr	r4, [pc, #76]	; (d84c <edbg_eui_read_eui64+0x17c>)
    d800:	0026      	movs	r6, r4
    d802:	3608      	adds	r6, #8
	  //printf("\r\n Generating Random MAC \r\n");
	  for (uint8_t i = 0; i < 8; i++) {
		  *(readbuf+i) = rand();
    d804:	4d1d      	ldr	r5, [pc, #116]	; (d87c <edbg_eui_read_eui64+0x1ac>)
    d806:	47a8      	blx	r5
    d808:	7020      	strb	r0, [r4, #0]
    d80a:	3401      	adds	r4, #1
	  for (uint8_t i = 0; i < 8; i++) {
    d80c:	42a6      	cmp	r6, r4
    d80e:	d1fa      	bne.n	d806 <edbg_eui_read_eui64+0x136>
	  }
	  
  }
  return readbuf;
}
    d810:	480e      	ldr	r0, [pc, #56]	; (d84c <edbg_eui_read_eui64+0x17c>)
    d812:	b010      	add	sp, #64	; 0x40
    d814:	bd70      	pop	{r4, r5, r6, pc}
			PRINTF("I2C Slave Not Available");
    d816:	4810      	ldr	r0, [pc, #64]	; (d858 <edbg_eui_read_eui64+0x188>)
    d818:	4b10      	ldr	r3, [pc, #64]	; (d85c <edbg_eui_read_eui64+0x18c>)
    d81a:	4798      	blx	r3
  i2c_master_reset(&i2c_master_instance);
    d81c:	4806      	ldr	r0, [pc, #24]	; (d838 <edbg_eui_read_eui64+0x168>)
    d81e:	4b0d      	ldr	r3, [pc, #52]	; (d854 <edbg_eui_read_eui64+0x184>)
    d820:	4798      	blx	r3
    d822:	e7df      	b.n	d7e4 <edbg_eui_read_eui64+0x114>
			PRINTF("Timeout 2\n");
    d824:	4816      	ldr	r0, [pc, #88]	; (d880 <edbg_eui_read_eui64+0x1b0>)
    d826:	4b0f      	ldr	r3, [pc, #60]	; (d864 <edbg_eui_read_eui64+0x194>)
    d828:	4798      	blx	r3
			break;
    d82a:	e7f7      	b.n	d81c <edbg_eui_read_eui64+0x14c>
    d82c:	00000d48 	.word	0x00000d48
    d830:	00100002 	.word	0x00100002
    d834:	00110002 	.word	0x00110002
    d838:	20002f28 	.word	0x20002f28
    d83c:	42000400 	.word	0x42000400
    d840:	00004d15 	.word	0x00004d15
    d844:	0001828c 	.word	0x0001828c
    d848:	00005341 	.word	0x00005341
    d84c:	20002e28 	.word	0x20002e28
    d850:	0000532d 	.word	0x0000532d
    d854:	00004ff1 	.word	0x00004ff1
    d858:	00018298 	.word	0x00018298
    d85c:	00016771 	.word	0x00016771
    d860:	000182b0 	.word	0x000182b0
    d864:	0001688d 	.word	0x0001688d
    d868:	0080a00c 	.word	0x0080a00c
    d86c:	0080a040 	.word	0x0080a040
    d870:	0080a044 	.word	0x0080a044
    d874:	0080a048 	.word	0x0080a048
    d878:	000168a1 	.word	0x000168a1
    d87c:	000168fd 	.word	0x000168fd
    d880:	000182bc 	.word	0x000182bc

0000d884 <UART_LoRa_rx_cb>:
{
	port_pin_toggle_output_level(LED_0_PIN);
}

void UART_LoRa_rx_cb(struct usart_module *const usart_module)
{
    d884:	b510      	push	{r4, lr}
	port_base->OUTTGL.reg = pin_mask;
    d886:	2280      	movs	r2, #128	; 0x80
    d888:	02d2      	lsls	r2, r2, #11
    d88a:	4b04      	ldr	r3, [pc, #16]	; (d89c <UART_LoRa_rx_cb+0x18>)
    d88c:	61da      	str	r2, [r3, #28]
	port_pin_toggle_output_level(LED_1_PIN);
	//usart_write_buffer_job(&UART_LoRa,(uint8_t *)rx_buffer_LoRa, LoRa_UART_RX_BUFFER_LENGTH);

	T_BroadcastMessageToFerry(rx_buffer_LoRa[0]);
    d88e:	4b04      	ldr	r3, [pc, #16]	; (d8a0 <UART_LoRa_rx_cb+0x1c>)
    d890:	7818      	ldrb	r0, [r3, #0]
    d892:	b2c0      	uxtb	r0, r0
    d894:	4b03      	ldr	r3, [pc, #12]	; (d8a4 <UART_LoRa_rx_cb+0x20>)
    d896:	4798      	blx	r3
}
    d898:	bd10      	pop	{r4, pc}
    d89a:	46c0      	nop			; (mov r8, r8)
    d89c:	40002800 	.word	0x40002800
    d8a0:	20001f54 	.word	0x20001f54
    d8a4:	000075dd 	.word	0x000075dd

0000d8a8 <UART_LoRa_init>:
{
    d8a8:	b530      	push	{r4, r5, lr}
    d8aa:	b091      	sub	sp, #68	; 0x44
	config->data_order       = USART_DATAORDER_LSB;
    d8ac:	2380      	movs	r3, #128	; 0x80
    d8ae:	05db      	lsls	r3, r3, #23
    d8b0:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    d8b2:	2300      	movs	r3, #0
    d8b4:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    d8b6:	22ff      	movs	r2, #255	; 0xff
    d8b8:	4669      	mov	r1, sp
    d8ba:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    d8bc:	2200      	movs	r2, #0
    d8be:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    d8c0:	72cb      	strb	r3, [r1, #11]
	config->receiver_enable  = true;
    d8c2:	2101      	movs	r1, #1
    d8c4:	2024      	movs	r0, #36	; 0x24
    d8c6:	466c      	mov	r4, sp
    d8c8:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    d8ca:	3001      	adds	r0, #1
    d8cc:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    d8ce:	3125      	adds	r1, #37	; 0x25
    d8d0:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    d8d2:	3101      	adds	r1, #1
    d8d4:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    d8d6:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    d8d8:	3105      	adds	r1, #5
    d8da:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    d8dc:	3101      	adds	r1, #1
    d8de:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    d8e0:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    d8e2:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    d8e4:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    d8e6:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    d8e8:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    d8ea:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    d8ec:	2313      	movs	r3, #19
    d8ee:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    d8f0:	7762      	strb	r2, [r4, #29]
	config_uart_LoRa.baudrate    = UART_BAUD;
    d8f2:	23e1      	movs	r3, #225	; 0xe1
    d8f4:	025b      	lsls	r3, r3, #9
    d8f6:	9308      	str	r3, [sp, #32]
	config_uart_LoRa.mux_setting = USART_RX_1_TX_0_XCK_1; //RX - TX positon ref: https://asf.microchip.com/docs/latest/common.services.fs.fatfs.access_example.saml21_xplained_pro/html/asfdoc_sam0_sercom_usart_mux_settings.html
    d8f8:	2380      	movs	r3, #128	; 0x80
    d8fa:	035b      	lsls	r3, r3, #13
    d8fc:	9303      	str	r3, [sp, #12]
	config_uart_LoRa.pinmux_pad0 = PINMUX_PA22C_SERCOM3_PAD0; //UNUSED - TX
    d8fe:	4b12      	ldr	r3, [pc, #72]	; (d948 <UART_LoRa_init+0xa0>)
    d900:	930c      	str	r3, [sp, #48]	; 0x30
	config_uart_LoRa.pinmux_pad1 = PINMUX_PA23C_SERCOM3_PAD1; //UNUSED - RX
    d902:	4b12      	ldr	r3, [pc, #72]	; (d94c <UART_LoRa_init+0xa4>)
    d904:	930d      	str	r3, [sp, #52]	; 0x34
	config_uart_LoRa.pinmux_pad2 = PINMUX_UNUSED; //PA06 - TX
    d906:	2301      	movs	r3, #1
    d908:	425b      	negs	r3, r3
    d90a:	930e      	str	r3, [sp, #56]	; 0x38
	config_uart_LoRa.pinmux_pad3 = PINMUX_UNUSED; //PA06 - RX
    d90c:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&UART_LoRa,SERCOM3, &config_uart_LoRa) != STATUS_OK) {
    d90e:	4d10      	ldr	r5, [pc, #64]	; (d950 <UART_LoRa_init+0xa8>)
    d910:	4c10      	ldr	r4, [pc, #64]	; (d954 <UART_LoRa_init+0xac>)
    d912:	466a      	mov	r2, sp
    d914:	4910      	ldr	r1, [pc, #64]	; (d958 <UART_LoRa_init+0xb0>)
    d916:	0028      	movs	r0, r5
    d918:	47a0      	blx	r4
    d91a:	2800      	cmp	r0, #0
    d91c:	d1f9      	bne.n	d912 <UART_LoRa_init+0x6a>
	SercomUsart *const usart_hw = &(module->hw->USART);
    d91e:	4d0c      	ldr	r5, [pc, #48]	; (d950 <UART_LoRa_init+0xa8>)
    d920:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    d922:	0020      	movs	r0, r4
    d924:	4b0d      	ldr	r3, [pc, #52]	; (d95c <UART_LoRa_init+0xb4>)
    d926:	4798      	blx	r3
    d928:	231f      	movs	r3, #31
    d92a:	4018      	ands	r0, r3
    d92c:	3b1e      	subs	r3, #30
    d92e:	4083      	lsls	r3, r0
    d930:	4a0b      	ldr	r2, [pc, #44]	; (d960 <UART_LoRa_init+0xb8>)
    d932:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    d934:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    d936:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    d938:	2b00      	cmp	r3, #0
    d93a:	d1fc      	bne.n	d936 <UART_LoRa_init+0x8e>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    d93c:	6823      	ldr	r3, [r4, #0]
    d93e:	2202      	movs	r2, #2
    d940:	4313      	orrs	r3, r2
    d942:	6023      	str	r3, [r4, #0]
}
    d944:	b011      	add	sp, #68	; 0x44
    d946:	bd30      	pop	{r4, r5, pc}
    d948:	00160002 	.word	0x00160002
    d94c:	00170002 	.word	0x00170002
    d950:	20001fa0 	.word	0x20001fa0
    d954:	00005bbd 	.word	0x00005bbd
    d958:	42000c00 	.word	0x42000c00
    d95c:	000056ed 	.word	0x000056ed
    d960:	e000e100 	.word	0xe000e100

0000d964 <UART_init>:
{
    d964:	b510      	push	{r4, lr}
	UART_LoRa_init();
    d966:	4b01      	ldr	r3, [pc, #4]	; (d96c <UART_init+0x8>)
    d968:	4798      	blx	r3
}
    d96a:	bd10      	pop	{r4, pc}
    d96c:	0000d8a9 	.word	0x0000d8a9

0000d970 <UART_LoRa_cb_init>:
{
    d970:	b510      	push	{r4, lr}
	usart_register_callback(&UART_LoRa,UART_LoRa_rx_cb, USART_CALLBACK_BUFFER_RECEIVED);
    d972:	4c06      	ldr	r4, [pc, #24]	; (d98c <UART_LoRa_cb_init+0x1c>)
    d974:	2201      	movs	r2, #1
    d976:	4906      	ldr	r1, [pc, #24]	; (d990 <UART_LoRa_cb_init+0x20>)
    d978:	0020      	movs	r0, r4
    d97a:	4b06      	ldr	r3, [pc, #24]	; (d994 <UART_LoRa_cb_init+0x24>)
    d97c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    d97e:	2231      	movs	r2, #49	; 0x31
    d980:	5ca3      	ldrb	r3, [r4, r2]
    d982:	2102      	movs	r1, #2
    d984:	430b      	orrs	r3, r1
    d986:	54a3      	strb	r3, [r4, r2]
}
    d988:	bd10      	pop	{r4, pc}
    d98a:	46c0      	nop			; (mov r8, r8)
    d98c:	20001fa0 	.word	0x20001fa0
    d990:	0000d885 	.word	0x0000d885
    d994:	0000616d 	.word	0x0000616d

0000d998 <UART_cb_init>:
{
    d998:	b510      	push	{r4, lr}
	UART_LoRa_cb_init();
    d99a:	4b01      	ldr	r3, [pc, #4]	; (d9a0 <UART_cb_init+0x8>)
    d99c:	4798      	blx	r3
}
    d99e:	bd10      	pop	{r4, pc}
    d9a0:	0000d971 	.word	0x0000d971

0000d9a4 <UART_SAM_To_RPi>:
{
	port_pin_toggle_output_level(LED_0_PIN);
	usart_write_buffer_job(&UART_LoRa,(uint8_t *)rx_buffer_AUTOPAX, AUTOPAX_UART_RX_BUFFER_LENGTH);
}

void UART_SAM_To_RPi(uint8_t* data){
    d9a4:	b510      	push	{r4, lr}
    d9a6:	0001      	movs	r1, r0
	usart_write_buffer_wait(&UART_LoRa, data, 1);
    d9a8:	2201      	movs	r2, #1
    d9aa:	4802      	ldr	r0, [pc, #8]	; (d9b4 <UART_SAM_To_RPi+0x10>)
    d9ac:	4b02      	ldr	r3, [pc, #8]	; (d9b8 <UART_SAM_To_RPi+0x14>)
    d9ae:	4798      	blx	r3
	
    d9b0:	bd10      	pop	{r4, pc}
    d9b2:	46c0      	nop			; (mov r8, r8)
    d9b4:	20001fa0 	.word	0x20001fa0
    d9b8:	00005fc5 	.word	0x00005fc5

0000d9bc <LORAWAN_TxHandler>:
    d9bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    d9be:	b087      	sub	sp, #28
    d9c0:	466b      	mov	r3, sp
    d9c2:	2501      	movs	r5, #1
    d9c4:	4c2f      	ldr	r4, [pc, #188]	; (da84 <LORAWAN_TxHandler+0xc8>)
    d9c6:	701d      	strb	r5, [r3, #0]
    d9c8:	0023      	movs	r3, r4
    d9ca:	466a      	mov	r2, sp
    d9cc:	33e9      	adds	r3, #233	; 0xe9
    d9ce:	781b      	ldrb	r3, [r3, #0]
    d9d0:	4669      	mov	r1, sp
    d9d2:	7053      	strb	r3, [r2, #1]
    d9d4:	0023      	movs	r3, r4
    d9d6:	33e7      	adds	r3, #231	; 0xe7
    d9d8:	781b      	ldrb	r3, [r3, #0]
    d9da:	202e      	movs	r0, #46	; 0x2e
    d9dc:	7093      	strb	r3, [r2, #2]
    d9de:	aa03      	add	r2, sp, #12
    d9e0:	4b29      	ldr	r3, [pc, #164]	; (da88 <LORAWAN_TxHandler+0xcc>)
    d9e2:	4798      	blx	r3
    d9e4:	2808      	cmp	r0, #8
    d9e6:	d004      	beq.n	d9f2 <LORAWAN_TxHandler+0x36>
    d9e8:	4b28      	ldr	r3, [pc, #160]	; (da8c <LORAWAN_TxHandler+0xd0>)
    d9ea:	4798      	blx	r3
    d9ec:	2000      	movs	r0, #0
    d9ee:	b007      	add	sp, #28
    d9f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d9f2:	0023      	movs	r3, r4
    d9f4:	33fd      	adds	r3, #253	; 0xfd
    d9f6:	781b      	ldrb	r3, [r3, #0]
    d9f8:	ae01      	add	r6, sp, #4
    d9fa:	2b04      	cmp	r3, #4
    d9fc:	d103      	bne.n	da06 <LORAWAN_TxHandler+0x4a>
    d9fe:	0030      	movs	r0, r6
    da00:	4b23      	ldr	r3, [pc, #140]	; (da90 <LORAWAN_TxHandler+0xd4>)
    da02:	7035      	strb	r5, [r6, #0]
    da04:	4798      	blx	r3
    da06:	4b23      	ldr	r3, [pc, #140]	; (da94 <LORAWAN_TxHandler+0xd8>)
    da08:	9803      	ldr	r0, [sp, #12]
    da0a:	9904      	ldr	r1, [sp, #16]
    da0c:	9a05      	ldr	r2, [sp, #20]
    da0e:	4798      	blx	r3
    da10:	0023      	movs	r3, r4
    da12:	33fc      	adds	r3, #252	; 0xfc
    da14:	68dd      	ldr	r5, [r3, #12]
    da16:	4f20      	ldr	r7, [pc, #128]	; (da98 <LORAWAN_TxHandler+0xdc>)
    da18:	4b20      	ldr	r3, [pc, #128]	; (da9c <LORAWAN_TxHandler+0xe0>)
    da1a:	2d00      	cmp	r5, #0
    da1c:	d023      	beq.n	da66 <LORAWAN_TxHandler+0xaa>
    da1e:	2201      	movs	r2, #1
    da20:	54e2      	strb	r2, [r4, r3]
    da22:	7828      	ldrb	r0, [r5, #0]
    da24:	7a2b      	ldrb	r3, [r5, #8]
    da26:	1e42      	subs	r2, r0, #1
    da28:	4190      	sbcs	r0, r2
    da2a:	7869      	ldrb	r1, [r5, #1]
    da2c:	686a      	ldr	r2, [r5, #4]
    da2e:	b2c0      	uxtb	r0, r0
    da30:	47b8      	blx	r7
    da32:	0023      	movs	r3, r4
    da34:	33ce      	adds	r3, #206	; 0xce
    da36:	881b      	ldrh	r3, [r3, #0]
    da38:	0030      	movs	r0, r6
    da3a:	7033      	strb	r3, [r6, #0]
    da3c:	4b18      	ldr	r3, [pc, #96]	; (daa0 <LORAWAN_TxHandler+0xe4>)
    da3e:	6073      	str	r3, [r6, #4]
    da40:	4b18      	ldr	r3, [pc, #96]	; (daa4 <LORAWAN_TxHandler+0xe8>)
    da42:	4798      	blx	r3
    da44:	2800      	cmp	r0, #0
    da46:	d114      	bne.n	da72 <LORAWAN_TxHandler+0xb6>
    da48:	0021      	movs	r1, r4
    da4a:	220e      	movs	r2, #14
    da4c:	3184      	adds	r1, #132	; 0x84
    da4e:	780b      	ldrb	r3, [r1, #0]
    da50:	4393      	bics	r3, r2
    da52:	001a      	movs	r2, r3
    da54:	2302      	movs	r3, #2
    da56:	4313      	orrs	r3, r2
    da58:	700b      	strb	r3, [r1, #0]
    da5a:	2208      	movs	r2, #8
    da5c:	3494      	adds	r4, #148	; 0x94
    da5e:	7823      	ldrb	r3, [r4, #0]
    da60:	4393      	bics	r3, r2
    da62:	7023      	strb	r3, [r4, #0]
    da64:	e7c2      	b.n	d9ec <LORAWAN_TxHandler+0x30>
    da66:	54e5      	strb	r5, [r4, r3]
    da68:	002a      	movs	r2, r5
    da6a:	002b      	movs	r3, r5
    da6c:	0029      	movs	r1, r5
    da6e:	0028      	movs	r0, r5
    da70:	e7de      	b.n	da30 <LORAWAN_TxHandler+0x74>
    da72:	0022      	movs	r2, r4
    da74:	2120      	movs	r1, #32
    da76:	3294      	adds	r2, #148	; 0x94
    da78:	7813      	ldrb	r3, [r2, #0]
    da7a:	438b      	bics	r3, r1
    da7c:	7013      	strb	r3, [r2, #0]
    da7e:	4b03      	ldr	r3, [pc, #12]	; (da8c <LORAWAN_TxHandler+0xd0>)
    da80:	4798      	blx	r3
    da82:	e7ea      	b.n	da5a <LORAWAN_TxHandler+0x9e>
    da84:	20003170 	.word	0x20003170
    da88:	0000c6dd 	.word	0x0000c6dd
    da8c:	00010801 	.word	0x00010801
    da90:	0000ef31 	.word	0x0000ef31
    da94:	00010399 	.word	0x00010399
    da98:	00012325 	.word	0x00012325
    da9c:	0000022a 	.word	0x0000022a
    daa0:	200033c8 	.word	0x200033c8
    daa4:	0000e655 	.word	0x0000e655

0000daa8 <LORAWAN_JoinReqHandler>:
    daa8:	b530      	push	{r4, r5, lr}
    daaa:	b087      	sub	sp, #28
    daac:	466a      	mov	r2, sp
    daae:	2300      	movs	r3, #0
    dab0:	4c25      	ldr	r4, [pc, #148]	; (db48 <LORAWAN_JoinReqHandler+0xa0>)
    dab2:	7013      	strb	r3, [r2, #0]
    dab4:	0023      	movs	r3, r4
    dab6:	33e9      	adds	r3, #233	; 0xe9
    dab8:	781b      	ldrb	r3, [r3, #0]
    daba:	7053      	strb	r3, [r2, #1]
    dabc:	0023      	movs	r3, r4
    dabe:	33e7      	adds	r3, #231	; 0xe7
    dac0:	781b      	ldrb	r3, [r3, #0]
    dac2:	7093      	strb	r3, [r2, #2]
    dac4:	0023      	movs	r3, r4
    dac6:	33ff      	adds	r3, #255	; 0xff
    dac8:	7f5b      	ldrb	r3, [r3, #29]
    daca:	069b      	lsls	r3, r3, #26
    dacc:	d507      	bpl.n	dade <LORAWAN_JoinReqHandler+0x36>
    dace:	6f63      	ldr	r3, [r4, #116]	; 0x74
    dad0:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    dad2:	4313      	orrs	r3, r2
    dad4:	d103      	bne.n	dade <LORAWAN_JoinReqHandler+0x36>
    dad6:	0023      	movs	r3, r4
    dad8:	2201      	movs	r2, #1
    dada:	3380      	adds	r3, #128	; 0x80
    dadc:	701a      	strb	r2, [r3, #0]
    dade:	aa03      	add	r2, sp, #12
    dae0:	4669      	mov	r1, sp
    dae2:	202e      	movs	r0, #46	; 0x2e
    dae4:	4b19      	ldr	r3, [pc, #100]	; (db4c <LORAWAN_JoinReqHandler+0xa4>)
    dae6:	4798      	blx	r3
    dae8:	2808      	cmp	r0, #8
    daea:	d004      	beq.n	daf6 <LORAWAN_JoinReqHandler+0x4e>
    daec:	4b18      	ldr	r3, [pc, #96]	; (db50 <LORAWAN_JoinReqHandler+0xa8>)
    daee:	4798      	blx	r3
    daf0:	2000      	movs	r0, #0
    daf2:	b007      	add	sp, #28
    daf4:	bd30      	pop	{r4, r5, pc}
    daf6:	4b17      	ldr	r3, [pc, #92]	; (db54 <LORAWAN_JoinReqHandler+0xac>)
    daf8:	9803      	ldr	r0, [sp, #12]
    dafa:	9904      	ldr	r1, [sp, #16]
    dafc:	9a05      	ldr	r2, [sp, #20]
    dafe:	4798      	blx	r3
    db00:	0023      	movs	r3, r4
    db02:	33fd      	adds	r3, #253	; 0xfd
    db04:	781b      	ldrb	r3, [r3, #0]
    db06:	ad01      	add	r5, sp, #4
    db08:	2b04      	cmp	r3, #4
    db0a:	d104      	bne.n	db16 <LORAWAN_JoinReqHandler+0x6e>
    db0c:	3b03      	subs	r3, #3
    db0e:	702b      	strb	r3, [r5, #0]
    db10:	0028      	movs	r0, r5
    db12:	4b11      	ldr	r3, [pc, #68]	; (db58 <LORAWAN_JoinReqHandler+0xb0>)
    db14:	4798      	blx	r3
    db16:	2200      	movs	r2, #0
    db18:	4b10      	ldr	r3, [pc, #64]	; (db5c <LORAWAN_JoinReqHandler+0xb4>)
    db1a:	54e2      	strb	r2, [r4, r3]
    db1c:	4b10      	ldr	r3, [pc, #64]	; (db60 <LORAWAN_JoinReqHandler+0xb8>)
    db1e:	4798      	blx	r3
    db20:	4b10      	ldr	r3, [pc, #64]	; (db64 <LORAWAN_JoinReqHandler+0xbc>)
    db22:	7028      	strb	r0, [r5, #0]
    db24:	606b      	str	r3, [r5, #4]
    db26:	0028      	movs	r0, r5
    db28:	4b0f      	ldr	r3, [pc, #60]	; (db68 <LORAWAN_JoinReqHandler+0xc0>)
    db2a:	4798      	blx	r3
    db2c:	2800      	cmp	r0, #0
    db2e:	d001      	beq.n	db34 <LORAWAN_JoinReqHandler+0x8c>
    db30:	201b      	movs	r0, #27
    db32:	e7db      	b.n	daec <LORAWAN_JoinReqHandler+0x44>
    db34:	220e      	movs	r2, #14
    db36:	3484      	adds	r4, #132	; 0x84
    db38:	7823      	ldrb	r3, [r4, #0]
    db3a:	4393      	bics	r3, r2
    db3c:	001a      	movs	r2, r3
    db3e:	2302      	movs	r3, #2
    db40:	4313      	orrs	r3, r2
    db42:	7023      	strb	r3, [r4, #0]
    db44:	e7d4      	b.n	daf0 <LORAWAN_JoinReqHandler+0x48>
    db46:	46c0      	nop			; (mov r8, r8)
    db48:	20003170 	.word	0x20003170
    db4c:	0000c6dd 	.word	0x0000c6dd
    db50:	0000fe61 	.word	0x0000fe61
    db54:	00010399 	.word	0x00010399
    db58:	0000ef31 	.word	0x0000ef31
    db5c:	0000022a 	.word	0x0000022a
    db60:	0001025d 	.word	0x0001025d
    db64:	200033b8 	.word	0x200033b8
    db68:	0000e655 	.word	0x0000e655

0000db6c <LORAWAN_RxHandler>:
    db6c:	b513      	push	{r0, r1, r4, lr}
    db6e:	4b0c      	ldr	r3, [pc, #48]	; (dba0 <LORAWAN_RxHandler+0x34>)
    db70:	781b      	ldrb	r3, [r3, #0]
    db72:	2b08      	cmp	r3, #8
    db74:	d011      	beq.n	db9a <LORAWAN_RxHandler+0x2e>
    db76:	2b10      	cmp	r3, #16
    db78:	d001      	beq.n	db7e <LORAWAN_RxHandler+0x12>
    db7a:	2b01      	cmp	r3, #1
    db7c:	d10b      	bne.n	db96 <LORAWAN_RxHandler+0x2a>
    db7e:	466b      	mov	r3, sp
    db80:	1c9c      	adds	r4, r3, #2
    db82:	0021      	movs	r1, r4
    db84:	a801      	add	r0, sp, #4
    db86:	4b07      	ldr	r3, [pc, #28]	; (dba4 <LORAWAN_RxHandler+0x38>)
    db88:	4798      	blx	r3
    db8a:	9801      	ldr	r0, [sp, #4]
    db8c:	2800      	cmp	r0, #0
    db8e:	d002      	beq.n	db96 <LORAWAN_RxHandler+0x2a>
    db90:	7821      	ldrb	r1, [r4, #0]
    db92:	4b05      	ldr	r3, [pc, #20]	; (dba8 <LORAWAN_RxHandler+0x3c>)
    db94:	4798      	blx	r3
    db96:	2000      	movs	r0, #0
    db98:	bd16      	pop	{r1, r2, r4, pc}
    db9a:	4b04      	ldr	r3, [pc, #16]	; (dbac <LORAWAN_RxHandler+0x40>)
    db9c:	4798      	blx	r3
    db9e:	e7fa      	b.n	db96 <LORAWAN_RxHandler+0x2a>
    dba0:	2000224f 	.word	0x2000224f
    dba4:	0000e821 	.word	0x0000e821
    dba8:	00011281 	.word	0x00011281
    dbac:	00010b95 	.word	0x00010b95

0000dbb0 <LORAWAN_PostTask>:
    dbb0:	b510      	push	{r4, lr}
    dbb2:	4b08      	ldr	r3, [pc, #32]	; (dbd4 <LORAWAN_PostTask+0x24>)
    dbb4:	0004      	movs	r4, r0
    dbb6:	4798      	blx	r3
    dbb8:	2201      	movs	r2, #1
    dbba:	40a2      	lsls	r2, r4
    dbbc:	4906      	ldr	r1, [pc, #24]	; (dbd8 <LORAWAN_PostTask+0x28>)
    dbbe:	780b      	ldrb	r3, [r1, #0]
    dbc0:	4313      	orrs	r3, r2
    dbc2:	b2db      	uxtb	r3, r3
    dbc4:	700b      	strb	r3, [r1, #0]
    dbc6:	4b05      	ldr	r3, [pc, #20]	; (dbdc <LORAWAN_PostTask+0x2c>)
    dbc8:	4798      	blx	r3
    dbca:	2004      	movs	r0, #4
    dbcc:	4b04      	ldr	r3, [pc, #16]	; (dbe0 <LORAWAN_PostTask+0x30>)
    dbce:	4798      	blx	r3
    dbd0:	bd10      	pop	{r4, pc}
    dbd2:	46c0      	nop			; (mov r8, r8)
    dbd4:	0000c1f1 	.word	0x0000c1f1
    dbd8:	20001e82 	.word	0x20001e82
    dbdc:	0000c1fd 	.word	0x0000c1fd
    dbe0:	0000d23d 	.word	0x0000d23d

0000dbe4 <LORAWAN_TaskHandler>:
    dbe4:	b570      	push	{r4, r5, r6, lr}
    dbe6:	2601      	movs	r6, #1
    dbe8:	4d0e      	ldr	r5, [pc, #56]	; (dc24 <LORAWAN_TaskHandler+0x40>)
    dbea:	e015      	b.n	dc18 <LORAWAN_TaskHandler+0x34>
    dbec:	2400      	movs	r4, #0
    dbee:	782b      	ldrb	r3, [r5, #0]
    dbf0:	4123      	asrs	r3, r4
    dbf2:	4233      	tst	r3, r6
    dbf4:	d00d      	beq.n	dc12 <LORAWAN_TaskHandler+0x2e>
    dbf6:	4b0c      	ldr	r3, [pc, #48]	; (dc28 <LORAWAN_TaskHandler+0x44>)
    dbf8:	4798      	blx	r3
    dbfa:	0032      	movs	r2, r6
    dbfc:	40a2      	lsls	r2, r4
    dbfe:	782b      	ldrb	r3, [r5, #0]
    dc00:	00a4      	lsls	r4, r4, #2
    dc02:	4393      	bics	r3, r2
    dc04:	702b      	strb	r3, [r5, #0]
    dc06:	4b09      	ldr	r3, [pc, #36]	; (dc2c <LORAWAN_TaskHandler+0x48>)
    dc08:	4798      	blx	r3
    dc0a:	4b09      	ldr	r3, [pc, #36]	; (dc30 <LORAWAN_TaskHandler+0x4c>)
    dc0c:	58e3      	ldr	r3, [r4, r3]
    dc0e:	4798      	blx	r3
    dc10:	e7ea      	b.n	dbe8 <LORAWAN_TaskHandler+0x4>
    dc12:	3401      	adds	r4, #1
    dc14:	2c03      	cmp	r4, #3
    dc16:	d1ea      	bne.n	dbee <LORAWAN_TaskHandler+0xa>
    dc18:	7828      	ldrb	r0, [r5, #0]
    dc1a:	b2c0      	uxtb	r0, r0
    dc1c:	2800      	cmp	r0, #0
    dc1e:	d1e5      	bne.n	dbec <LORAWAN_TaskHandler+0x8>
    dc20:	bd70      	pop	{r4, r5, r6, pc}
    dc22:	46c0      	nop			; (mov r8, r8)
    dc24:	20001e82 	.word	0x20001e82
    dc28:	0000c1f1 	.word	0x0000c1f1
    dc2c:	0000c1fd 	.word	0x0000c1fd
    dc30:	000182c8 	.word	0x000182c8

0000dc34 <RADIO_GetAttr>:
    dc34:	b510      	push	{r4, lr}
    dc36:	000b      	movs	r3, r1
    dc38:	281f      	cmp	r0, #31
    dc3a:	d900      	bls.n	dc3e <RADIO_GetAttr+0xa>
    dc3c:	e069      	b.n	dd12 <RADIO_GetAttr+0xde>
    dc3e:	f005 f96b 	bl	12f18 <__gnu_thumb1_case_uqi>
    dc42:	1410      	.short	0x1410
    dc44:	68201c19 	.word	0x68201c19
    dc48:	312e2a27 	.word	0x312e2a27
    dc4c:	3d3a3734 	.word	0x3d3a3734
    dc50:	46434054 	.word	0x46434054
    dc54:	68245149 	.word	0x68245149
    dc58:	68686859 	.word	0x68686859
    dc5c:	5c686817 	.word	0x5c686817
    dc60:	6360      	.short	0x6360
    dc62:	4a2d      	ldr	r2, [pc, #180]	; (dd18 <RADIO_GetAttr+0xe4>)
    dc64:	7e12      	ldrb	r2, [r2, #24]
    dc66:	701a      	strb	r2, [r3, #0]
    dc68:	e002      	b.n	dc70 <RADIO_GetAttr+0x3c>
    dc6a:	4a2b      	ldr	r2, [pc, #172]	; (dd18 <RADIO_GetAttr+0xe4>)
    dc6c:	6812      	ldr	r2, [r2, #0]
    dc6e:	601a      	str	r2, [r3, #0]
    dc70:	2000      	movs	r0, #0
    dc72:	bd10      	pop	{r4, pc}
    dc74:	4a28      	ldr	r2, [pc, #160]	; (dd18 <RADIO_GetAttr+0xe4>)
    dc76:	6852      	ldr	r2, [r2, #4]
    dc78:	e7f9      	b.n	dc6e <RADIO_GetAttr+0x3a>
    dc7a:	4a27      	ldr	r2, [pc, #156]	; (dd18 <RADIO_GetAttr+0xe4>)
    dc7c:	8a92      	ldrh	r2, [r2, #20]
    dc7e:	801a      	strh	r2, [r3, #0]
    dc80:	e7f6      	b.n	dc70 <RADIO_GetAttr+0x3c>
    dc82:	4a25      	ldr	r2, [pc, #148]	; (dd18 <RADIO_GetAttr+0xe4>)
    dc84:	3203      	adds	r2, #3
    dc86:	7fd2      	ldrb	r2, [r2, #31]
    dc88:	e7ed      	b.n	dc66 <RADIO_GetAttr+0x32>
    dc8a:	4a23      	ldr	r2, [pc, #140]	; (dd18 <RADIO_GetAttr+0xe4>)
    dc8c:	3204      	adds	r2, #4
    dc8e:	e7fa      	b.n	dc86 <RADIO_GetAttr+0x52>
    dc90:	4a21      	ldr	r2, [pc, #132]	; (dd18 <RADIO_GetAttr+0xe4>)
    dc92:	3206      	adds	r2, #6
    dc94:	e7f7      	b.n	dc86 <RADIO_GetAttr+0x52>
    dc96:	4a20      	ldr	r2, [pc, #128]	; (dd18 <RADIO_GetAttr+0xe4>)
    dc98:	3236      	adds	r2, #54	; 0x36
    dc9a:	7812      	ldrb	r2, [r2, #0]
    dc9c:	e7e3      	b.n	dc66 <RADIO_GetAttr+0x32>
    dc9e:	4a1e      	ldr	r2, [pc, #120]	; (dd18 <RADIO_GetAttr+0xe4>)
    dca0:	3205      	adds	r2, #5
    dca2:	e7f0      	b.n	dc86 <RADIO_GetAttr+0x52>
    dca4:	4a1c      	ldr	r2, [pc, #112]	; (dd18 <RADIO_GetAttr+0xe4>)
    dca6:	3234      	adds	r2, #52	; 0x34
    dca8:	e7f7      	b.n	dc9a <RADIO_GetAttr+0x66>
    dcaa:	4a1b      	ldr	r2, [pc, #108]	; (dd18 <RADIO_GetAttr+0xe4>)
    dcac:	8ad2      	ldrh	r2, [r2, #22]
    dcae:	e7e6      	b.n	dc7e <RADIO_GetAttr+0x4a>
    dcb0:	4a19      	ldr	r2, [pc, #100]	; (dd18 <RADIO_GetAttr+0xe4>)
    dcb2:	3233      	adds	r2, #51	; 0x33
    dcb4:	e7f1      	b.n	dc9a <RADIO_GetAttr+0x66>
    dcb6:	4a18      	ldr	r2, [pc, #96]	; (dd18 <RADIO_GetAttr+0xe4>)
    dcb8:	68d2      	ldr	r2, [r2, #12]
    dcba:	e7d8      	b.n	dc6e <RADIO_GetAttr+0x3a>
    dcbc:	4a16      	ldr	r2, [pc, #88]	; (dd18 <RADIO_GetAttr+0xe4>)
    dcbe:	6892      	ldr	r2, [r2, #8]
    dcc0:	e7d5      	b.n	dc6e <RADIO_GetAttr+0x3a>
    dcc2:	4a15      	ldr	r2, [pc, #84]	; (dd18 <RADIO_GetAttr+0xe4>)
    dcc4:	3237      	adds	r2, #55	; 0x37
    dcc6:	e7e8      	b.n	dc9a <RADIO_GetAttr+0x66>
    dcc8:	4a13      	ldr	r2, [pc, #76]	; (dd18 <RADIO_GetAttr+0xe4>)
    dcca:	3238      	adds	r2, #56	; 0x38
    dccc:	e7e5      	b.n	dc9a <RADIO_GetAttr+0x66>
    dcce:	4a12      	ldr	r2, [pc, #72]	; (dd18 <RADIO_GetAttr+0xe4>)
    dcd0:	3239      	adds	r2, #57	; 0x39
    dcd2:	e7e2      	b.n	dc9a <RADIO_GetAttr+0x66>
    dcd4:	4a10      	ldr	r2, [pc, #64]	; (dd18 <RADIO_GetAttr+0xe4>)
    dcd6:	4911      	ldr	r1, [pc, #68]	; (dd1c <RADIO_GetAttr+0xe8>)
    dcd8:	3202      	adds	r2, #2
    dcda:	7fd2      	ldrb	r2, [r2, #31]
    dcdc:	0018      	movs	r0, r3
    dcde:	4b10      	ldr	r3, [pc, #64]	; (dd20 <RADIO_GetAttr+0xec>)
    dce0:	4798      	blx	r3
    dce2:	e7c5      	b.n	dc70 <RADIO_GetAttr+0x3c>
    dce4:	4a0c      	ldr	r2, [pc, #48]	; (dd18 <RADIO_GetAttr+0xe4>)
    dce6:	3202      	adds	r2, #2
    dce8:	e7cd      	b.n	dc86 <RADIO_GetAttr+0x52>
    dcea:	4a0b      	ldr	r2, [pc, #44]	; (dd18 <RADIO_GetAttr+0xe4>)
    dcec:	3232      	adds	r2, #50	; 0x32
    dcee:	7812      	ldrb	r2, [r2, #0]
    dcf0:	b252      	sxtb	r2, r2
    dcf2:	e7b8      	b.n	dc66 <RADIO_GetAttr+0x32>
    dcf4:	4a08      	ldr	r2, [pc, #32]	; (dd18 <RADIO_GetAttr+0xe4>)
    dcf6:	3235      	adds	r2, #53	; 0x35
    dcf8:	e7cf      	b.n	dc9a <RADIO_GetAttr+0x66>
    dcfa:	4907      	ldr	r1, [pc, #28]	; (dd18 <RADIO_GetAttr+0xe4>)
    dcfc:	2206      	movs	r2, #6
    dcfe:	313c      	adds	r1, #60	; 0x3c
    dd00:	e7ec      	b.n	dcdc <RADIO_GetAttr+0xa8>
    dd02:	4a05      	ldr	r2, [pc, #20]	; (dd18 <RADIO_GetAttr+0xe4>)
    dd04:	3254      	adds	r2, #84	; 0x54
    dd06:	e7c8      	b.n	dc9a <RADIO_GetAttr+0x66>
    dd08:	4a03      	ldr	r2, [pc, #12]	; (dd18 <RADIO_GetAttr+0xe4>)
    dd0a:	3256      	adds	r2, #86	; 0x56
    dd0c:	2100      	movs	r1, #0
    dd0e:	5e52      	ldrsh	r2, [r2, r1]
    dd10:	e7b5      	b.n	dc7e <RADIO_GetAttr+0x4a>
    dd12:	2005      	movs	r0, #5
    dd14:	e7ad      	b.n	dc72 <RADIO_GetAttr+0x3e>
    dd16:	46c0      	nop			; (mov r8, r8)
    dd18:	20002d78 	.word	0x20002d78
    dd1c:	20002d91 	.word	0x20002d91
    dd20:	000161b7 	.word	0x000161b7

0000dd24 <RADIO_SetAttr>:
    dd24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    dd26:	4b71      	ldr	r3, [pc, #452]	; (deec <RADIO_SetAttr+0x1c8>)
    dd28:	0004      	movs	r4, r0
    dd2a:	000d      	movs	r5, r1
    dd2c:	4798      	blx	r3
    dd2e:	2304      	movs	r3, #4
    dd30:	2801      	cmp	r0, #1
    dd32:	d11a      	bne.n	dd6a <RADIO_SetAttr+0x46>
    dd34:	2c1d      	cmp	r4, #29
    dd36:	d900      	bls.n	dd3a <RADIO_SetAttr+0x16>
    dd38:	e0d5      	b.n	dee6 <RADIO_SetAttr+0x1c2>
    dd3a:	0020      	movs	r0, r4
    dd3c:	f005 f8ec 	bl	12f18 <__gnu_thumb1_case_uqi>
    dd40:	605c4844 	.word	0x605c4844
    dd44:	7770d364 	.word	0x7770d364
    dd48:	908c8480 	.word	0x908c8480
    dd4c:	a0d39c99 	.word	0xa0d39c99
    dd50:	c2bab1a8 	.word	0xc2bab1a8
    dd54:	d3cad369 	.word	0xd3cad369
    dd58:	d30fd3d3 	.word	0xd30fd3d3
    dd5c:	17d3      	.short	0x17d3
    dd5e:	2303      	movs	r3, #3
    dd60:	2d00      	cmp	r5, #0
    dd62:	d002      	beq.n	dd6a <RADIO_SetAttr+0x46>
    dd64:	4b62      	ldr	r3, [pc, #392]	; (def0 <RADIO_SetAttr+0x1cc>)
    dd66:	611d      	str	r5, [r3, #16]
    dd68:	2300      	movs	r3, #0
    dd6a:	0018      	movs	r0, r3
    dd6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    dd6e:	796c      	ldrb	r4, [r5, #5]
    dd70:	2c00      	cmp	r4, #0
    dd72:	d109      	bne.n	dd88 <RADIO_SetAttr+0x64>
    dd74:	4b5e      	ldr	r3, [pc, #376]	; (def0 <RADIO_SetAttr+0x1cc>)
    dd76:	001a      	movs	r2, r3
    dd78:	649c      	str	r4, [r3, #72]	; 0x48
    dd7a:	879c      	strh	r4, [r3, #60]	; 0x3c
    dd7c:	87dc      	strh	r4, [r3, #62]	; 0x3e
    dd7e:	3240      	adds	r2, #64	; 0x40
    dd80:	3341      	adds	r3, #65	; 0x41
    dd82:	7014      	strb	r4, [r2, #0]
    dd84:	701c      	strb	r4, [r3, #0]
    dd86:	e7ef      	b.n	dd68 <RADIO_SetAttr+0x44>
    dd88:	882f      	ldrh	r7, [r5, #0]
    dd8a:	2303      	movs	r3, #3
    dd8c:	2f00      	cmp	r7, #0
    dd8e:	d0ec      	beq.n	dd6a <RADIO_SetAttr+0x46>
    dd90:	792e      	ldrb	r6, [r5, #4]
    dd92:	2e00      	cmp	r6, #0
    dd94:	d0e9      	beq.n	dd6a <RADIO_SetAttr+0x46>
    dd96:	20fa      	movs	r0, #250	; 0xfa
    dd98:	2202      	movs	r2, #2
    dd9a:	5eab      	ldrsh	r3, [r5, r2]
    dd9c:	0080      	lsls	r0, r0, #2
    dd9e:	0031      	movs	r1, r6
    dda0:	9301      	str	r3, [sp, #4]
    dda2:	4378      	muls	r0, r7
    dda4:	4b53      	ldr	r3, [pc, #332]	; (def4 <RADIO_SetAttr+0x1d0>)
    dda6:	4798      	blx	r3
    dda8:	4b53      	ldr	r3, [pc, #332]	; (def8 <RADIO_SetAttr+0x1d4>)
    ddaa:	4798      	blx	r3
    ddac:	4b53      	ldr	r3, [pc, #332]	; (defc <RADIO_SetAttr+0x1d8>)
    ddae:	4798      	blx	r3
    ddb0:	466b      	mov	r3, sp
    ddb2:	4d4f      	ldr	r5, [pc, #316]	; (def0 <RADIO_SetAttr+0x1cc>)
    ddb4:	889b      	ldrh	r3, [r3, #4]
    ddb6:	64a8      	str	r0, [r5, #72]	; 0x48
    ddb8:	87eb      	strh	r3, [r5, #62]	; 0x3e
    ddba:	002b      	movs	r3, r5
    ddbc:	87af      	strh	r7, [r5, #60]	; 0x3c
    ddbe:	3340      	adds	r3, #64	; 0x40
    ddc0:	3541      	adds	r5, #65	; 0x41
    ddc2:	701e      	strb	r6, [r3, #0]
    ddc4:	702c      	strb	r4, [r5, #0]
    ddc6:	e7cf      	b.n	dd68 <RADIO_SetAttr+0x44>
    ddc8:	782a      	ldrb	r2, [r5, #0]
    ddca:	4b49      	ldr	r3, [pc, #292]	; (def0 <RADIO_SetAttr+0x1cc>)
    ddcc:	761a      	strb	r2, [r3, #24]
    ddce:	e7cb      	b.n	dd68 <RADIO_SetAttr+0x44>
    ddd0:	4b4b      	ldr	r3, [pc, #300]	; (df00 <RADIO_SetAttr+0x1dc>)
    ddd2:	682a      	ldr	r2, [r5, #0]
    ddd4:	18d1      	adds	r1, r2, r3
    ddd6:	4b4b      	ldr	r3, [pc, #300]	; (df04 <RADIO_SetAttr+0x1e0>)
    ddd8:	4299      	cmp	r1, r3
    ddda:	d90a      	bls.n	ddf2 <RADIO_SetAttr+0xce>
    dddc:	4b4a      	ldr	r3, [pc, #296]	; (df08 <RADIO_SetAttr+0x1e4>)
    ddde:	494b      	ldr	r1, [pc, #300]	; (df0c <RADIO_SetAttr+0x1e8>)
    dde0:	18d3      	adds	r3, r2, r3
    dde2:	428b      	cmp	r3, r1
    dde4:	d905      	bls.n	ddf2 <RADIO_SetAttr+0xce>
    dde6:	494a      	ldr	r1, [pc, #296]	; (df10 <RADIO_SetAttr+0x1ec>)
    dde8:	484a      	ldr	r0, [pc, #296]	; (df14 <RADIO_SetAttr+0x1f0>)
    ddea:	1851      	adds	r1, r2, r1
    ddec:	2305      	movs	r3, #5
    ddee:	4281      	cmp	r1, r0
    ddf0:	d8bb      	bhi.n	dd6a <RADIO_SetAttr+0x46>
    ddf2:	4b3f      	ldr	r3, [pc, #252]	; (def0 <RADIO_SetAttr+0x1cc>)
    ddf4:	601a      	str	r2, [r3, #0]
    ddf6:	e7b7      	b.n	dd68 <RADIO_SetAttr+0x44>
    ddf8:	682a      	ldr	r2, [r5, #0]
    ddfa:	4b3d      	ldr	r3, [pc, #244]	; (def0 <RADIO_SetAttr+0x1cc>)
    ddfc:	605a      	str	r2, [r3, #4]
    ddfe:	e7b3      	b.n	dd68 <RADIO_SetAttr+0x44>
    de00:	882a      	ldrh	r2, [r5, #0]
    de02:	4b3b      	ldr	r3, [pc, #236]	; (def0 <RADIO_SetAttr+0x1cc>)
    de04:	829a      	strh	r2, [r3, #20]
    de06:	e7af      	b.n	dd68 <RADIO_SetAttr+0x44>
    de08:	4b39      	ldr	r3, [pc, #228]	; (def0 <RADIO_SetAttr+0x1cc>)
    de0a:	782a      	ldrb	r2, [r5, #0]
    de0c:	3303      	adds	r3, #3
    de0e:	77da      	strb	r2, [r3, #31]
    de10:	e7aa      	b.n	dd68 <RADIO_SetAttr+0x44>
    de12:	782a      	ldrb	r2, [r5, #0]
    de14:	2305      	movs	r3, #5
    de16:	2a01      	cmp	r2, #1
    de18:	d8a7      	bhi.n	dd6a <RADIO_SetAttr+0x46>
    de1a:	4b35      	ldr	r3, [pc, #212]	; (def0 <RADIO_SetAttr+0x1cc>)
    de1c:	3304      	adds	r3, #4
    de1e:	e7f6      	b.n	de0e <RADIO_SetAttr+0xea>
    de20:	782a      	ldrb	r2, [r5, #0]
    de22:	2305      	movs	r3, #5
    de24:	2a01      	cmp	r2, #1
    de26:	d8a0      	bhi.n	dd6a <RADIO_SetAttr+0x46>
    de28:	4b31      	ldr	r3, [pc, #196]	; (def0 <RADIO_SetAttr+0x1cc>)
    de2a:	3306      	adds	r3, #6
    de2c:	e7ef      	b.n	de0e <RADIO_SetAttr+0xea>
    de2e:	782a      	ldrb	r2, [r5, #0]
    de30:	2305      	movs	r3, #5
    de32:	1fd1      	subs	r1, r2, #7
    de34:	2902      	cmp	r1, #2
    de36:	d898      	bhi.n	dd6a <RADIO_SetAttr+0x46>
    de38:	4b2d      	ldr	r3, [pc, #180]	; (def0 <RADIO_SetAttr+0x1cc>)
    de3a:	3336      	adds	r3, #54	; 0x36
    de3c:	701a      	strb	r2, [r3, #0]
    de3e:	e793      	b.n	dd68 <RADIO_SetAttr+0x44>
    de40:	4b2b      	ldr	r3, [pc, #172]	; (def0 <RADIO_SetAttr+0x1cc>)
    de42:	782a      	ldrb	r2, [r5, #0]
    de44:	3305      	adds	r3, #5
    de46:	e7e2      	b.n	de0e <RADIO_SetAttr+0xea>
    de48:	782a      	ldrb	r2, [r5, #0]
    de4a:	2305      	movs	r3, #5
    de4c:	2a01      	cmp	r2, #1
    de4e:	d900      	bls.n	de52 <RADIO_SetAttr+0x12e>
    de50:	e78b      	b.n	dd6a <RADIO_SetAttr+0x46>
    de52:	4b27      	ldr	r3, [pc, #156]	; (def0 <RADIO_SetAttr+0x1cc>)
    de54:	3334      	adds	r3, #52	; 0x34
    de56:	e7f1      	b.n	de3c <RADIO_SetAttr+0x118>
    de58:	882a      	ldrh	r2, [r5, #0]
    de5a:	4b25      	ldr	r3, [pc, #148]	; (def0 <RADIO_SetAttr+0x1cc>)
    de5c:	82da      	strh	r2, [r3, #22]
    de5e:	e783      	b.n	dd68 <RADIO_SetAttr+0x44>
    de60:	782a      	ldrb	r2, [r5, #0]
    de62:	2305      	movs	r3, #5
    de64:	1e51      	subs	r1, r2, #1
    de66:	2903      	cmp	r1, #3
    de68:	d900      	bls.n	de6c <RADIO_SetAttr+0x148>
    de6a:	e77e      	b.n	dd6a <RADIO_SetAttr+0x46>
    de6c:	4b20      	ldr	r3, [pc, #128]	; (def0 <RADIO_SetAttr+0x1cc>)
    de6e:	3333      	adds	r3, #51	; 0x33
    de70:	e7e4      	b.n	de3c <RADIO_SetAttr+0x118>
    de72:	4b1f      	ldr	r3, [pc, #124]	; (def0 <RADIO_SetAttr+0x1cc>)
    de74:	682a      	ldr	r2, [r5, #0]
    de76:	60da      	str	r2, [r3, #12]
    de78:	682a      	ldr	r2, [r5, #0]
    de7a:	4b1d      	ldr	r3, [pc, #116]	; (def0 <RADIO_SetAttr+0x1cc>)
    de7c:	609a      	str	r2, [r3, #8]
    de7e:	e773      	b.n	dd68 <RADIO_SetAttr+0x44>
    de80:	782a      	ldrb	r2, [r5, #0]
    de82:	2305      	movs	r3, #5
    de84:	2a03      	cmp	r2, #3
    de86:	d900      	bls.n	de8a <RADIO_SetAttr+0x166>
    de88:	e76f      	b.n	dd6a <RADIO_SetAttr+0x46>
    de8a:	4b19      	ldr	r3, [pc, #100]	; (def0 <RADIO_SetAttr+0x1cc>)
    de8c:	3337      	adds	r3, #55	; 0x37
    de8e:	e7d5      	b.n	de3c <RADIO_SetAttr+0x118>
    de90:	782a      	ldrb	r2, [r5, #0]
    de92:	2305      	movs	r3, #5
    de94:	1e51      	subs	r1, r2, #1
    de96:	2916      	cmp	r1, #22
    de98:	d900      	bls.n	de9c <RADIO_SetAttr+0x178>
    de9a:	e766      	b.n	dd6a <RADIO_SetAttr+0x46>
    de9c:	4b14      	ldr	r3, [pc, #80]	; (def0 <RADIO_SetAttr+0x1cc>)
    de9e:	3338      	adds	r3, #56	; 0x38
    dea0:	e7cc      	b.n	de3c <RADIO_SetAttr+0x118>
    dea2:	782a      	ldrb	r2, [r5, #0]
    dea4:	2305      	movs	r3, #5
    dea6:	1e51      	subs	r1, r2, #1
    dea8:	2916      	cmp	r1, #22
    deaa:	d900      	bls.n	deae <RADIO_SetAttr+0x18a>
    deac:	e75d      	b.n	dd6a <RADIO_SetAttr+0x46>
    deae:	4b10      	ldr	r3, [pc, #64]	; (def0 <RADIO_SetAttr+0x1cc>)
    deb0:	3339      	adds	r3, #57	; 0x39
    deb2:	e7c3      	b.n	de3c <RADIO_SetAttr+0x118>
    deb4:	4b0e      	ldr	r3, [pc, #56]	; (def0 <RADIO_SetAttr+0x1cc>)
    deb6:	0029      	movs	r1, r5
    deb8:	3302      	adds	r3, #2
    deba:	7fda      	ldrb	r2, [r3, #31]
    debc:	4816      	ldr	r0, [pc, #88]	; (df18 <RADIO_SetAttr+0x1f4>)
    debe:	4b17      	ldr	r3, [pc, #92]	; (df1c <RADIO_SetAttr+0x1f8>)
    dec0:	4798      	blx	r3
    dec2:	e751      	b.n	dd68 <RADIO_SetAttr+0x44>
    dec4:	782b      	ldrb	r3, [r5, #0]
    dec6:	1c1a      	adds	r2, r3, #0
    dec8:	2b08      	cmp	r3, #8
    deca:	d900      	bls.n	dece <RADIO_SetAttr+0x1aa>
    decc:	2208      	movs	r2, #8
    dece:	4b08      	ldr	r3, [pc, #32]	; (def0 <RADIO_SetAttr+0x1cc>)
    ded0:	3302      	adds	r3, #2
    ded2:	e79c      	b.n	de0e <RADIO_SetAttr+0xea>
    ded4:	2305      	movs	r3, #5
    ded6:	782a      	ldrb	r2, [r5, #0]
    ded8:	1fd1      	subs	r1, r2, #7
    deda:	4299      	cmp	r1, r3
    dedc:	d900      	bls.n	dee0 <RADIO_SetAttr+0x1bc>
    dede:	e744      	b.n	dd6a <RADIO_SetAttr+0x46>
    dee0:	4b03      	ldr	r3, [pc, #12]	; (def0 <RADIO_SetAttr+0x1cc>)
    dee2:	3335      	adds	r3, #53	; 0x35
    dee4:	e7aa      	b.n	de3c <RADIO_SetAttr+0x118>
    dee6:	2305      	movs	r3, #5
    dee8:	e73f      	b.n	dd6a <RADIO_SetAttr+0x46>
    deea:	46c0      	nop			; (mov r8, r8)
    deec:	0000e639 	.word	0x0000e639
    def0:	20002d78 	.word	0x20002d78
    def4:	00013069 	.word	0x00013069
    def8:	000142ad 	.word	0x000142ad
    defc:	000133c5 	.word	0x000133c5
    df00:	f7d58bc0 	.word	0xf7d58bc0
    df04:	0243d580 	.word	0x0243d580
    df08:	e78fe580 	.word	0xe78fe580
    df0c:	06dac2c0 	.word	0x06dac2c0
    df10:	cc9eec80 	.word	0xcc9eec80
    df14:	096ae380 	.word	0x096ae380
    df18:	20002d91 	.word	0x20002d91
    df1c:	000161b7 	.word	0x000161b7

0000df20 <RADIO_Init>:
    df20:	b510      	push	{r4, lr}
    df22:	4b0c      	ldr	r3, [pc, #48]	; (df54 <RADIO_Init+0x34>)
    df24:	4798      	blx	r3
    df26:	4b0c      	ldr	r3, [pc, #48]	; (df58 <RADIO_Init+0x38>)
    df28:	201f      	movs	r0, #31
    df2a:	4798      	blx	r3
    df2c:	4c0b      	ldr	r4, [pc, #44]	; (df5c <RADIO_Init+0x3c>)
    df2e:	490c      	ldr	r1, [pc, #48]	; (df60 <RADIO_Init+0x40>)
    df30:	2001      	movs	r0, #1
    df32:	47a0      	blx	r4
    df34:	490b      	ldr	r1, [pc, #44]	; (df64 <RADIO_Init+0x44>)
    df36:	2002      	movs	r0, #2
    df38:	47a0      	blx	r4
    df3a:	490b      	ldr	r1, [pc, #44]	; (df68 <RADIO_Init+0x48>)
    df3c:	2004      	movs	r0, #4
    df3e:	47a0      	blx	r4
    df40:	490a      	ldr	r1, [pc, #40]	; (df6c <RADIO_Init+0x4c>)
    df42:	2008      	movs	r0, #8
    df44:	47a0      	blx	r4
    df46:	490a      	ldr	r1, [pc, #40]	; (df70 <RADIO_Init+0x50>)
    df48:	2010      	movs	r0, #16
    df4a:	47a0      	blx	r4
    df4c:	4909      	ldr	r1, [pc, #36]	; (df74 <RADIO_Init+0x54>)
    df4e:	2020      	movs	r0, #32
    df50:	47a0      	blx	r4
    df52:	bd10      	pop	{r4, pc}
    df54:	0000ed3d 	.word	0x0000ed3d
    df58:	0000e645 	.word	0x0000e645
    df5c:	0000c10d 	.word	0x0000c10d
    df60:	0000e3d1 	.word	0x0000e3d1
    df64:	0000e449 	.word	0x0000e449
    df68:	0000e4b9 	.word	0x0000e4b9
    df6c:	0000e509 	.word	0x0000e509
    df70:	0000e531 	.word	0x0000e531
    df74:	0000e559 	.word	0x0000e559

0000df78 <Radio_WriteFrequency>:
    df78:	b570      	push	{r4, r5, r6, lr}
    df7a:	490d      	ldr	r1, [pc, #52]	; (dfb0 <Radio_WriteFrequency+0x38>)
    df7c:	4d0d      	ldr	r5, [pc, #52]	; (dfb4 <Radio_WriteFrequency+0x3c>)
    df7e:	0006      	movs	r6, r0
    df80:	47a8      	blx	r5
    df82:	4b0d      	ldr	r3, [pc, #52]	; (dfb8 <Radio_WriteFrequency+0x40>)
    df84:	0004      	movs	r4, r0
    df86:	490a      	ldr	r1, [pc, #40]	; (dfb0 <Radio_WriteFrequency+0x38>)
    df88:	0030      	movs	r0, r6
    df8a:	4798      	blx	r3
    df8c:	0208      	lsls	r0, r1, #8
    df8e:	4908      	ldr	r1, [pc, #32]	; (dfb0 <Radio_WriteFrequency+0x38>)
    df90:	47a8      	blx	r5
    df92:	0224      	lsls	r4, r4, #8
    df94:	1904      	adds	r4, r0, r4
    df96:	0c21      	lsrs	r1, r4, #16
    df98:	4d08      	ldr	r5, [pc, #32]	; (dfbc <Radio_WriteFrequency+0x44>)
    df9a:	b2c9      	uxtb	r1, r1
    df9c:	2006      	movs	r0, #6
    df9e:	47a8      	blx	r5
    dfa0:	0a21      	lsrs	r1, r4, #8
    dfa2:	b2c9      	uxtb	r1, r1
    dfa4:	2007      	movs	r0, #7
    dfa6:	47a8      	blx	r5
    dfa8:	b2e1      	uxtb	r1, r4
    dfaa:	2008      	movs	r0, #8
    dfac:	47a8      	blx	r5
    dfae:	bd70      	pop	{r4, r5, r6, pc}
    dfb0:	00003d09 	.word	0x00003d09
    dfb4:	00012f55 	.word	0x00012f55
    dfb8:	00013061 	.word	0x00013061
    dfbc:	0000c039 	.word	0x0000c039

0000dfc0 <Radio_WriteConfiguration>:
    dfc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    dfc2:	4cb0      	ldr	r4, [pc, #704]	; (e284 <Radio_WriteConfiguration+0x2c4>)
    dfc4:	2200      	movs	r2, #0
    dfc6:	0023      	movs	r3, r4
    dfc8:	b085      	sub	sp, #20
    dfca:	9002      	str	r0, [sp, #8]
    dfcc:	3334      	adds	r3, #52	; 0x34
    dfce:	0010      	movs	r0, r2
    dfd0:	7819      	ldrb	r1, [r3, #0]
    dfd2:	4bad      	ldr	r3, [pc, #692]	; (e288 <Radio_WriteConfiguration+0x2c8>)
    dfd4:	4798      	blx	r3
    dfd6:	4bad      	ldr	r3, [pc, #692]	; (e28c <Radio_WriteConfiguration+0x2cc>)
    dfd8:	6820      	ldr	r0, [r4, #0]
    dfda:	4798      	blx	r3
    dfdc:	1ce3      	adds	r3, r4, #3
    dfde:	1d62      	adds	r2, r4, #5
    dfe0:	7fdb      	ldrb	r3, [r3, #31]
    dfe2:	7fd2      	ldrb	r2, [r2, #31]
    dfe4:	b25b      	sxtb	r3, r3
    dfe6:	4eaa      	ldr	r6, [pc, #680]	; (e290 <Radio_WriteConfiguration+0x2d0>)
    dfe8:	4daa      	ldr	r5, [pc, #680]	; (e294 <Radio_WriteConfiguration+0x2d4>)
    dfea:	2a00      	cmp	r2, #0
    dfec:	d000      	beq.n	dff0 <Radio_WriteConfiguration+0x30>
    dfee:	e0fc      	b.n	e1ea <Radio_WriteConfiguration+0x22a>
    dff0:	1c1f      	adds	r7, r3, #0
    dff2:	2b0f      	cmp	r3, #15
    dff4:	dc00      	bgt.n	dff8 <Radio_WriteConfiguration+0x38>
    dff6:	e0ec      	b.n	e1d2 <Radio_WriteConfiguration+0x212>
    dff8:	270f      	movs	r7, #15
    dffa:	b27b      	sxtb	r3, r7
    dffc:	204d      	movs	r0, #77	; 0x4d
    dffe:	9301      	str	r3, [sp, #4]
    e000:	47b0      	blx	r6
    e002:	21f8      	movs	r1, #248	; 0xf8
    e004:	4008      	ands	r0, r1
    e006:	39f4      	subs	r1, #244	; 0xf4
    e008:	4301      	orrs	r1, r0
    e00a:	204d      	movs	r0, #77	; 0x4d
    e00c:	47a8      	blx	r5
    e00e:	b27b      	sxtb	r3, r7
    e010:	2b00      	cmp	r3, #0
    e012:	db00      	blt.n	e016 <Radio_WriteConfiguration+0x56>
    e014:	e0e4      	b.n	e1e0 <Radio_WriteConfiguration+0x220>
    e016:	3703      	adds	r7, #3
    e018:	b2f9      	uxtb	r1, r7
    e01a:	2720      	movs	r7, #32
    e01c:	4339      	orrs	r1, r7
    e01e:	2009      	movs	r0, #9
    e020:	47a8      	blx	r5
    e022:	0023      	movs	r3, r4
    e024:	3334      	adds	r3, #52	; 0x34
    e026:	781f      	ldrb	r7, [r3, #0]
    e028:	2f01      	cmp	r7, #1
    e02a:	d000      	beq.n	e02e <Radio_WriteConfiguration+0x6e>
    e02c:	e144      	b.n	e2b8 <Radio_WriteConfiguration+0x2f8>
    e02e:	7e21      	ldrb	r1, [r4, #24]
    e030:	2039      	movs	r0, #57	; 0x39
    e032:	47a8      	blx	r5
    e034:	4b98      	ldr	r3, [pc, #608]	; (e298 <Radio_WriteConfiguration+0x2d8>)
    e036:	201d      	movs	r0, #29
    e038:	7819      	ldrb	r1, [r3, #0]
    e03a:	0023      	movs	r3, r4
    e03c:	3333      	adds	r3, #51	; 0x33
    e03e:	781b      	ldrb	r3, [r3, #0]
    e040:	0109      	lsls	r1, r1, #4
    e042:	005b      	lsls	r3, r3, #1
    e044:	4319      	orrs	r1, r3
    e046:	1de3      	adds	r3, r4, #7
    e048:	7fdb      	ldrb	r3, [r3, #31]
    e04a:	401f      	ands	r7, r3
    e04c:	4339      	orrs	r1, r7
    e04e:	b2c9      	uxtb	r1, r1
    e050:	47a8      	blx	r5
    e052:	1d23      	adds	r3, r4, #4
    e054:	7fd9      	ldrb	r1, [r3, #31]
    e056:	2304      	movs	r3, #4
    e058:	0089      	lsls	r1, r1, #2
    e05a:	4019      	ands	r1, r3
    e05c:	0023      	movs	r3, r4
    e05e:	3335      	adds	r3, #53	; 0x35
    e060:	781b      	ldrb	r3, [r3, #0]
    e062:	201e      	movs	r0, #30
    e064:	011b      	lsls	r3, r3, #4
    e066:	4319      	orrs	r1, r3
    e068:	9b02      	ldr	r3, [sp, #8]
    e06a:	059b      	lsls	r3, r3, #22
    e06c:	0f9b      	lsrs	r3, r3, #30
    e06e:	4319      	orrs	r1, r3
    e070:	b2c9      	uxtb	r1, r1
    e072:	47a8      	blx	r5
    e074:	2300      	movs	r3, #0
    e076:	8ae1      	ldrh	r1, [r4, #22]
    e078:	4299      	cmp	r1, r3
    e07a:	d011      	beq.n	e0a0 <Radio_WriteConfiguration+0xe0>
    e07c:	4a86      	ldr	r2, [pc, #536]	; (e298 <Radio_WriteConfiguration+0x2d8>)
    e07e:	7812      	ldrb	r2, [r2, #0]
    e080:	2a08      	cmp	r2, #8
    e082:	d100      	bne.n	e086 <Radio_WriteConfiguration+0xc6>
    e084:	e0e4      	b.n	e250 <Radio_WriteConfiguration+0x290>
    e086:	2a09      	cmp	r2, #9
    e088:	d100      	bne.n	e08c <Radio_WriteConfiguration+0xcc>
    e08a:	e0e3      	b.n	e254 <Radio_WriteConfiguration+0x294>
    e08c:	2a07      	cmp	r2, #7
    e08e:	d000      	beq.n	e092 <Radio_WriteConfiguration+0xd2>
    e090:	e0e3      	b.n	e25a <Radio_WriteConfiguration+0x29a>
    e092:	337d      	adds	r3, #125	; 0x7d
    e094:	4359      	muls	r1, r3
    e096:	0023      	movs	r3, r4
    e098:	3335      	adds	r3, #53	; 0x35
    e09a:	781b      	ldrb	r3, [r3, #0]
    e09c:	40d9      	lsrs	r1, r3
    e09e:	000b      	movs	r3, r1
    e0a0:	b2d9      	uxtb	r1, r3
    e0a2:	2024      	movs	r0, #36	; 0x24
    e0a4:	4d7b      	ldr	r5, [pc, #492]	; (e294 <Radio_WriteConfiguration+0x2d4>)
    e0a6:	47a8      	blx	r5
    e0a8:	466b      	mov	r3, sp
    e0aa:	201f      	movs	r0, #31
    e0ac:	7a19      	ldrb	r1, [r3, #8]
    e0ae:	47a8      	blx	r5
    e0b0:	2026      	movs	r0, #38	; 0x26
    e0b2:	47b0      	blx	r6
    e0b4:	0023      	movs	r3, r4
    e0b6:	3335      	adds	r3, #53	; 0x35
    e0b8:	781b      	ldrb	r3, [r3, #0]
    e0ba:	2b0c      	cmp	r3, #12
    e0bc:	d105      	bne.n	e0ca <Radio_WriteConfiguration+0x10a>
    e0be:	0023      	movs	r3, r4
    e0c0:	3336      	adds	r3, #54	; 0x36
    e0c2:	781b      	ldrb	r3, [r3, #0]
    e0c4:	3b07      	subs	r3, #7
    e0c6:	2b01      	cmp	r3, #1
    e0c8:	d906      	bls.n	e0d8 <Radio_WriteConfiguration+0x118>
    e0ca:	6b62      	ldr	r2, [r4, #52]	; 0x34
    e0cc:	4b73      	ldr	r3, [pc, #460]	; (e29c <Radio_WriteConfiguration+0x2dc>)
    e0ce:	4013      	ands	r3, r2
    e0d0:	4a73      	ldr	r2, [pc, #460]	; (e2a0 <Radio_WriteConfiguration+0x2e0>)
    e0d2:	4293      	cmp	r3, r2
    e0d4:	d000      	beq.n	e0d8 <Radio_WriteConfiguration+0x118>
    e0d6:	e0c2      	b.n	e25e <Radio_WriteConfiguration+0x29e>
    e0d8:	2108      	movs	r1, #8
    e0da:	4308      	orrs	r0, r1
    e0dc:	b2c0      	uxtb	r0, r0
    e0de:	2104      	movs	r1, #4
    e0e0:	4301      	orrs	r1, r0
    e0e2:	2026      	movs	r0, #38	; 0x26
    e0e4:	47a8      	blx	r5
    e0e6:	2031      	movs	r0, #49	; 0x31
    e0e8:	47b0      	blx	r6
    e0ea:	21f8      	movs	r1, #248	; 0xf8
    e0ec:	4008      	ands	r0, r1
    e0ee:	39f5      	subs	r1, #245	; 0xf5
    e0f0:	4301      	orrs	r1, r0
    e0f2:	2031      	movs	r0, #49	; 0x31
    e0f4:	47a8      	blx	r5
    e0f6:	210a      	movs	r1, #10
    e0f8:	2037      	movs	r0, #55	; 0x37
    e0fa:	47a8      	blx	r5
    e0fc:	0023      	movs	r3, r4
    e0fe:	3331      	adds	r3, #49	; 0x31
    e100:	781b      	ldrb	r3, [r3, #0]
    e102:	2b12      	cmp	r3, #18
    e104:	d11e      	bne.n	e144 <Radio_WriteConfiguration+0x184>
    e106:	0023      	movs	r3, r4
    e108:	3336      	adds	r3, #54	; 0x36
    e10a:	781b      	ldrb	r3, [r3, #0]
    e10c:	3b07      	subs	r3, #7
    e10e:	2b01      	cmp	r3, #1
    e110:	d80b      	bhi.n	e12a <Radio_WriteConfiguration+0x16a>
    e112:	2031      	movs	r0, #49	; 0x31
    e114:	47b0      	blx	r6
    e116:	217f      	movs	r1, #127	; 0x7f
    e118:	4001      	ands	r1, r0
    e11a:	2031      	movs	r0, #49	; 0x31
    e11c:	47a8      	blx	r5
    e11e:	2140      	movs	r1, #64	; 0x40
    e120:	202f      	movs	r0, #47	; 0x2f
    e122:	47a8      	blx	r5
    e124:	2100      	movs	r1, #0
    e126:	2030      	movs	r0, #48	; 0x30
    e128:	47a8      	blx	r5
    e12a:	0023      	movs	r3, r4
    e12c:	3336      	adds	r3, #54	; 0x36
    e12e:	781b      	ldrb	r3, [r3, #0]
    e130:	2b09      	cmp	r3, #9
    e132:	d107      	bne.n	e144 <Radio_WriteConfiguration+0x184>
    e134:	2031      	movs	r0, #49	; 0x31
    e136:	47b0      	blx	r6
    e138:	2180      	movs	r1, #128	; 0x80
    e13a:	4249      	negs	r1, r1
    e13c:	4301      	orrs	r1, r0
    e13e:	b2c9      	uxtb	r1, r1
    e140:	2031      	movs	r0, #49	; 0x31
    e142:	47a8      	blx	r5
    e144:	2033      	movs	r0, #51	; 0x33
    e146:	47b0      	blx	r6
    e148:	1da3      	adds	r3, r4, #6
    e14a:	7fd9      	ldrb	r1, [r3, #31]
    e14c:	2340      	movs	r3, #64	; 0x40
    e14e:	0189      	lsls	r1, r1, #6
    e150:	4398      	bics	r0, r3
    e152:	4019      	ands	r1, r3
    e154:	4301      	orrs	r1, r0
    e156:	b2c9      	uxtb	r1, r1
    e158:	2033      	movs	r0, #51	; 0x33
    e15a:	47a8      	blx	r5
    e15c:	8aa1      	ldrh	r1, [r4, #20]
    e15e:	2020      	movs	r0, #32
    e160:	0a09      	lsrs	r1, r1, #8
    e162:	47a8      	blx	r5
    e164:	7d21      	ldrb	r1, [r4, #20]
    e166:	2021      	movs	r0, #33	; 0x21
    e168:	47a8      	blx	r5
    e16a:	2100      	movs	r1, #0
    e16c:	200d      	movs	r0, #13
    e16e:	47a8      	blx	r5
    e170:	2100      	movs	r1, #0
    e172:	200e      	movs	r0, #14
    e174:	47a8      	blx	r5
    e176:	2100      	movs	r1, #0
    e178:	200f      	movs	r0, #15
    e17a:	47a8      	blx	r5
    e17c:	0023      	movs	r3, r4
    e17e:	3331      	adds	r3, #49	; 0x31
    e180:	781b      	ldrb	r3, [r3, #0]
    e182:	2b12      	cmp	r3, #18
    e184:	d120      	bne.n	e1c8 <Radio_WriteConfiguration+0x208>
    e186:	0023      	movs	r3, r4
    e188:	3336      	adds	r3, #54	; 0x36
    e18a:	781b      	ldrb	r3, [r3, #0]
    e18c:	2b09      	cmp	r3, #9
    e18e:	d000      	beq.n	e192 <Radio_WriteConfiguration+0x1d2>
    e190:	e072      	b.n	e278 <Radio_WriteConfiguration+0x2b8>
    e192:	4a44      	ldr	r2, [pc, #272]	; (e2a4 <Radio_WriteConfiguration+0x2e4>)
    e194:	6823      	ldr	r3, [r4, #0]
    e196:	1899      	adds	r1, r3, r2
    e198:	4a43      	ldr	r2, [pc, #268]	; (e2a8 <Radio_WriteConfiguration+0x2e8>)
    e19a:	4291      	cmp	r1, r2
    e19c:	d862      	bhi.n	e264 <Radio_WriteConfiguration+0x2a4>
    e19e:	2102      	movs	r1, #2
    e1a0:	2036      	movs	r0, #54	; 0x36
    e1a2:	47a8      	blx	r5
    e1a4:	2164      	movs	r1, #100	; 0x64
    e1a6:	203a      	movs	r0, #58	; 0x3a
    e1a8:	47a8      	blx	r5
    e1aa:	0023      	movs	r3, r4
    e1ac:	3336      	adds	r3, #54	; 0x36
    e1ae:	781b      	ldrb	r3, [r3, #0]
    e1b0:	2165      	movs	r1, #101	; 0x65
    e1b2:	203a      	movs	r0, #58	; 0x3a
    e1b4:	2b09      	cmp	r3, #9
    e1b6:	d162      	bne.n	e27e <Radio_WriteConfiguration+0x2be>
    e1b8:	3406      	adds	r4, #6
    e1ba:	7fe3      	ldrb	r3, [r4, #31]
    e1bc:	2b01      	cmp	r3, #1
    e1be:	d15e      	bne.n	e27e <Radio_WriteConfiguration+0x2be>
    e1c0:	47a8      	blx	r5
    e1c2:	2119      	movs	r1, #25
    e1c4:	203b      	movs	r0, #59	; 0x3b
    e1c6:	47a8      	blx	r5
    e1c8:	21ff      	movs	r1, #255	; 0xff
    e1ca:	2012      	movs	r0, #18
    e1cc:	47a8      	blx	r5
    e1ce:	b005      	add	sp, #20
    e1d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e1d2:	b25b      	sxtb	r3, r3
    e1d4:	3303      	adds	r3, #3
    e1d6:	db00      	blt.n	e1da <Radio_WriteConfiguration+0x21a>
    e1d8:	e70f      	b.n	dffa <Radio_WriteConfiguration+0x3a>
    e1da:	4b34      	ldr	r3, [pc, #208]	; (e2ac <Radio_WriteConfiguration+0x2ec>)
    e1dc:	781f      	ldrb	r7, [r3, #0]
    e1de:	e70c      	b.n	dffa <Radio_WriteConfiguration+0x3a>
    e1e0:	2170      	movs	r1, #112	; 0x70
    e1e2:	9b01      	ldr	r3, [sp, #4]
    e1e4:	4319      	orrs	r1, r3
    e1e6:	b2c9      	uxtb	r1, r1
    e1e8:	e719      	b.n	e01e <Radio_WriteConfiguration+0x5e>
    e1ea:	2b01      	cmp	r3, #1
    e1ec:	dd07      	ble.n	e1fe <Radio_WriteConfiguration+0x23e>
    e1ee:	2714      	movs	r7, #20
    e1f0:	2b13      	cmp	r3, #19
    e1f2:	dc06      	bgt.n	e202 <Radio_WriteConfiguration+0x242>
    e1f4:	1c1f      	adds	r7, r3, #0
    e1f6:	2b11      	cmp	r3, #17
    e1f8:	dd02      	ble.n	e200 <Radio_WriteConfiguration+0x240>
    e1fa:	2711      	movs	r7, #17
    e1fc:	e000      	b.n	e200 <Radio_WriteConfiguration+0x240>
    e1fe:	2702      	movs	r7, #2
    e200:	b27f      	sxtb	r7, r7
    e202:	200b      	movs	r0, #11
    e204:	47b0      	blx	r6
    e206:	9003      	str	r0, [sp, #12]
    e208:	204d      	movs	r0, #77	; 0x4d
    e20a:	47b0      	blx	r6
    e20c:	2307      	movs	r3, #7
    e20e:	4398      	bics	r0, r3
    e210:	b2c1      	uxtb	r1, r0
    e212:	2f14      	cmp	r7, #20
    e214:	d112      	bne.n	e23c <Radio_WriteConfiguration+0x27c>
    e216:	4319      	orrs	r1, r3
    e218:	9b03      	ldr	r3, [sp, #12]
    e21a:	37cb      	adds	r7, #203	; 0xcb
    e21c:	403b      	ands	r3, r7
    e21e:	001f      	movs	r7, r3
    e220:	230f      	movs	r3, #15
    e222:	9301      	str	r3, [sp, #4]
    e224:	204d      	movs	r0, #77	; 0x4d
    e226:	47a8      	blx	r5
    e228:	2180      	movs	r1, #128	; 0x80
    e22a:	9b01      	ldr	r3, [sp, #4]
    e22c:	4249      	negs	r1, r1
    e22e:	4319      	orrs	r1, r3
    e230:	b2c9      	uxtb	r1, r1
    e232:	2009      	movs	r0, #9
    e234:	47a8      	blx	r5
    e236:	0039      	movs	r1, r7
    e238:	200b      	movs	r0, #11
    e23a:	e6f1      	b.n	e020 <Radio_WriteConfiguration+0x60>
    e23c:	3f02      	subs	r7, #2
    e23e:	b27b      	sxtb	r3, r7
    e240:	2720      	movs	r7, #32
    e242:	2004      	movs	r0, #4
    e244:	9301      	str	r3, [sp, #4]
    e246:	9b03      	ldr	r3, [sp, #12]
    e248:	4301      	orrs	r1, r0
    e24a:	431f      	orrs	r7, r3
    e24c:	b2ff      	uxtb	r7, r7
    e24e:	e7e9      	b.n	e224 <Radio_WriteConfiguration+0x264>
    e250:	23fa      	movs	r3, #250	; 0xfa
    e252:	e71f      	b.n	e094 <Radio_WriteConfiguration+0xd4>
    e254:	23fa      	movs	r3, #250	; 0xfa
    e256:	005b      	lsls	r3, r3, #1
    e258:	e71c      	b.n	e094 <Radio_WriteConfiguration+0xd4>
    e25a:	0019      	movs	r1, r3
    e25c:	e71b      	b.n	e096 <Radio_WriteConfiguration+0xd6>
    e25e:	21f7      	movs	r1, #247	; 0xf7
    e260:	4008      	ands	r0, r1
    e262:	e73c      	b.n	e0de <Radio_WriteConfiguration+0x11e>
    e264:	4a12      	ldr	r2, [pc, #72]	; (e2b0 <Radio_WriteConfiguration+0x2f0>)
    e266:	189b      	adds	r3, r3, r2
    e268:	4a12      	ldr	r2, [pc, #72]	; (e2b4 <Radio_WriteConfiguration+0x2f4>)
    e26a:	4293      	cmp	r3, r2
    e26c:	d804      	bhi.n	e278 <Radio_WriteConfiguration+0x2b8>
    e26e:	2102      	movs	r1, #2
    e270:	2036      	movs	r0, #54	; 0x36
    e272:	47a8      	blx	r5
    e274:	217f      	movs	r1, #127	; 0x7f
    e276:	e796      	b.n	e1a6 <Radio_WriteConfiguration+0x1e6>
    e278:	2103      	movs	r1, #3
    e27a:	2036      	movs	r0, #54	; 0x36
    e27c:	e794      	b.n	e1a8 <Radio_WriteConfiguration+0x1e8>
    e27e:	47a8      	blx	r5
    e280:	211d      	movs	r1, #29
    e282:	e79f      	b.n	e1c4 <Radio_WriteConfiguration+0x204>
    e284:	20002d78 	.word	0x20002d78
    e288:	0000d261 	.word	0x0000d261
    e28c:	0000df79 	.word	0x0000df79
    e290:	0000c061 	.word	0x0000c061
    e294:	0000c039 	.word	0x0000c039
    e298:	20002dae 	.word	0x20002dae
    e29c:	00ffff00 	.word	0x00ffff00
    e2a0:	00070b00 	.word	0x00070b00
    e2a4:	cc9eec80 	.word	0xcc9eec80
    e2a8:	096ae380 	.word	0x096ae380
    e2ac:	000182d4 	.word	0x000182d4
    e2b0:	e78fe580 	.word	0xe78fe580
    e2b4:	06dac2c0 	.word	0x06dac2c0
    e2b8:	6863      	ldr	r3, [r4, #4]
    e2ba:	492c      	ldr	r1, [pc, #176]	; (e36c <Radio_WriteConfiguration+0x3ac>)
    e2bc:	0218      	lsls	r0, r3, #8
    e2be:	4b2c      	ldr	r3, [pc, #176]	; (e370 <Radio_WriteConfiguration+0x3b0>)
    e2c0:	4798      	blx	r3
    e2c2:	0007      	movs	r7, r0
    e2c4:	0a01      	lsrs	r1, r0, #8
    e2c6:	b2c9      	uxtb	r1, r1
    e2c8:	2004      	movs	r0, #4
    e2ca:	47a8      	blx	r5
    e2cc:	b2f9      	uxtb	r1, r7
    e2ce:	2005      	movs	r0, #5
    e2d0:	47a8      	blx	r5
    e2d2:	4b27      	ldr	r3, [pc, #156]	; (e370 <Radio_WriteConfiguration+0x3b0>)
    e2d4:	68a1      	ldr	r1, [r4, #8]
    e2d6:	4827      	ldr	r0, [pc, #156]	; (e374 <Radio_WriteConfiguration+0x3b4>)
    e2d8:	4798      	blx	r3
    e2da:	0007      	movs	r7, r0
    e2dc:	0a01      	lsrs	r1, r0, #8
    e2de:	b2c9      	uxtb	r1, r1
    e2e0:	2002      	movs	r0, #2
    e2e2:	47a8      	blx	r5
    e2e4:	b2f9      	uxtb	r1, r7
    e2e6:	2003      	movs	r0, #3
    e2e8:	47a8      	blx	r5
    e2ea:	2100      	movs	r1, #0
    e2ec:	205d      	movs	r0, #93	; 0x5d
    e2ee:	47a8      	blx	r5
    e2f0:	8aa1      	ldrh	r1, [r4, #20]
    e2f2:	2025      	movs	r0, #37	; 0x25
    e2f4:	0a09      	lsrs	r1, r1, #8
    e2f6:	47a8      	blx	r5
    e2f8:	7d21      	ldrb	r1, [r4, #20]
    e2fa:	2026      	movs	r0, #38	; 0x26
    e2fc:	47a8      	blx	r5
    e2fe:	219e      	movs	r1, #158	; 0x9e
    e300:	200d      	movs	r0, #13
    e302:	47a8      	blx	r5
    e304:	21bf      	movs	r1, #191	; 0xbf
    e306:	2035      	movs	r0, #53	; 0x35
    e308:	47a8      	blx	r5
    e30a:	200a      	movs	r0, #10
    e30c:	47b0      	blx	r6
    e30e:	0023      	movs	r3, r4
    e310:	3337      	adds	r3, #55	; 0x37
    e312:	7819      	ldrb	r1, [r3, #0]
    e314:	2360      	movs	r3, #96	; 0x60
    e316:	0149      	lsls	r1, r1, #5
    e318:	4398      	bics	r0, r3
    e31a:	4301      	orrs	r1, r0
    e31c:	b2c9      	uxtb	r1, r1
    e31e:	200a      	movs	r0, #10
    e320:	47a8      	blx	r5
    e322:	1d23      	adds	r3, r4, #4
    e324:	7fdb      	ldrb	r3, [r3, #31]
    e326:	21c0      	movs	r1, #192	; 0xc0
    e328:	2b00      	cmp	r3, #0
    e32a:	d000      	beq.n	e32e <Radio_WriteConfiguration+0x36e>
    e32c:	3110      	adds	r1, #16
    e32e:	2030      	movs	r0, #48	; 0x30
    e330:	47a8      	blx	r5
    e332:	2600      	movs	r6, #0
    e334:	1ca3      	adds	r3, r4, #2
    e336:	7fd9      	ldrb	r1, [r3, #31]
    e338:	428e      	cmp	r6, r1
    e33a:	d30d      	bcc.n	e358 <Radio_WriteConfiguration+0x398>
    e33c:	2900      	cmp	r1, #0
    e33e:	d003      	beq.n	e348 <Radio_WriteConfiguration+0x388>
    e340:	2310      	movs	r3, #16
    e342:	3901      	subs	r1, #1
    e344:	4319      	orrs	r1, r3
    e346:	b2c9      	uxtb	r1, r1
    e348:	2027      	movs	r0, #39	; 0x27
    e34a:	47a8      	blx	r5
    e34c:	21ff      	movs	r1, #255	; 0xff
    e34e:	203e      	movs	r0, #62	; 0x3e
    e350:	47a8      	blx	r5
    e352:	21ff      	movs	r1, #255	; 0xff
    e354:	203f      	movs	r0, #63	; 0x3f
    e356:	e739      	b.n	e1cc <Radio_WriteConfiguration+0x20c>
    e358:	0030      	movs	r0, r6
    e35a:	19a3      	adds	r3, r4, r6
    e35c:	3028      	adds	r0, #40	; 0x28
    e35e:	7e59      	ldrb	r1, [r3, #25]
    e360:	b2c0      	uxtb	r0, r0
    e362:	3601      	adds	r6, #1
    e364:	47a8      	blx	r5
    e366:	b2f6      	uxtb	r6, r6
    e368:	e7e4      	b.n	e334 <Radio_WriteConfiguration+0x374>
    e36a:	46c0      	nop			; (mov r8, r8)
    e36c:	00003d09 	.word	0x00003d09
    e370:	00012f55 	.word	0x00012f55
    e374:	01e84800 	.word	0x01e84800

0000e378 <RADIO_getMappingAndOpmode>:
    e378:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e37a:	0006      	movs	r6, r0
    e37c:	4d06      	ldr	r5, [pc, #24]	; (e398 <RADIO_getMappingAndOpmode+0x20>)
    e37e:	2040      	movs	r0, #64	; 0x40
    e380:	001f      	movs	r7, r3
    e382:	0014      	movs	r4, r2
    e384:	9101      	str	r1, [sp, #4]
    e386:	47a8      	blx	r5
    e388:	4004      	ands	r4, r0
    e38a:	413c      	asrs	r4, r7
    e38c:	2001      	movs	r0, #1
    e38e:	7034      	strb	r4, [r6, #0]
    e390:	47a8      	blx	r5
    e392:	9b01      	ldr	r3, [sp, #4]
    e394:	7018      	strb	r0, [r3, #0]
    e396:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    e398:	0000c061 	.word	0x0000c061

0000e39c <RADIO_UnhandledInterrupt.part.0>:
    e39c:	b510      	push	{r4, lr}
    e39e:	21ff      	movs	r1, #255	; 0xff
    e3a0:	2012      	movs	r0, #18
    e3a2:	4b01      	ldr	r3, [pc, #4]	; (e3a8 <RADIO_UnhandledInterrupt.part.0+0xc>)
    e3a4:	4798      	blx	r3
    e3a6:	bd10      	pop	{r4, pc}
    e3a8:	0000c039 	.word	0x0000c039

0000e3ac <RADIO_UnhandledInterrupt>:
    e3ac:	b510      	push	{r4, lr}
    e3ae:	2801      	cmp	r0, #1
    e3b0:	d102      	bne.n	e3b8 <RADIO_UnhandledInterrupt+0xc>
    e3b2:	4b05      	ldr	r3, [pc, #20]	; (e3c8 <RADIO_UnhandledInterrupt+0x1c>)
    e3b4:	4798      	blx	r3
    e3b6:	bd10      	pop	{r4, pc}
    e3b8:	21ff      	movs	r1, #255	; 0xff
    e3ba:	203e      	movs	r0, #62	; 0x3e
    e3bc:	4c03      	ldr	r4, [pc, #12]	; (e3cc <RADIO_UnhandledInterrupt+0x20>)
    e3be:	47a0      	blx	r4
    e3c0:	21ff      	movs	r1, #255	; 0xff
    e3c2:	203f      	movs	r0, #63	; 0x3f
    e3c4:	47a0      	blx	r4
    e3c6:	e7f6      	b.n	e3b6 <RADIO_UnhandledInterrupt+0xa>
    e3c8:	0000e39d 	.word	0x0000e39d
    e3cc:	0000c039 	.word	0x0000c039

0000e3d0 <RADIO_DIO0>:
    e3d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e3d2:	466b      	mov	r3, sp
    e3d4:	1ddc      	adds	r4, r3, #7
    e3d6:	1d9d      	adds	r5, r3, #6
    e3d8:	22c0      	movs	r2, #192	; 0xc0
    e3da:	2306      	movs	r3, #6
    e3dc:	0028      	movs	r0, r5
    e3de:	0021      	movs	r1, r4
    e3e0:	4e12      	ldr	r6, [pc, #72]	; (e42c <RADIO_DIO0+0x5c>)
    e3e2:	47b0      	blx	r6
    e3e4:	7823      	ldrb	r3, [r4, #0]
    e3e6:	7828      	ldrb	r0, [r5, #0]
    e3e8:	b25a      	sxtb	r2, r3
    e3ea:	b2c0      	uxtb	r0, r0
    e3ec:	2a00      	cmp	r2, #0
    e3ee:	da0b      	bge.n	e408 <RADIO_DIO0+0x38>
    e3f0:	2800      	cmp	r0, #0
    e3f2:	d004      	beq.n	e3fe <RADIO_DIO0+0x2e>
    e3f4:	2801      	cmp	r0, #1
    e3f6:	d005      	beq.n	e404 <RADIO_DIO0+0x34>
    e3f8:	4b0d      	ldr	r3, [pc, #52]	; (e430 <RADIO_DIO0+0x60>)
    e3fa:	4798      	blx	r3
    e3fc:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    e3fe:	4b0d      	ldr	r3, [pc, #52]	; (e434 <RADIO_DIO0+0x64>)
    e400:	4798      	blx	r3
    e402:	e7fb      	b.n	e3fc <RADIO_DIO0+0x2c>
    e404:	4b0c      	ldr	r3, [pc, #48]	; (e438 <RADIO_DIO0+0x68>)
    e406:	e7fb      	b.n	e400 <RADIO_DIO0+0x30>
    e408:	2800      	cmp	r0, #0
    e40a:	d10a      	bne.n	e422 <RADIO_DIO0+0x52>
    e40c:	2207      	movs	r2, #7
    e40e:	4013      	ands	r3, r2
    e410:	7023      	strb	r3, [r4, #0]
    e412:	2b03      	cmp	r3, #3
    e414:	d101      	bne.n	e41a <RADIO_DIO0+0x4a>
    e416:	4b09      	ldr	r3, [pc, #36]	; (e43c <RADIO_DIO0+0x6c>)
    e418:	e7f2      	b.n	e400 <RADIO_DIO0+0x30>
    e41a:	2b05      	cmp	r3, #5
    e41c:	d102      	bne.n	e424 <RADIO_DIO0+0x54>
    e41e:	4b08      	ldr	r3, [pc, #32]	; (e440 <RADIO_DIO0+0x70>)
    e420:	e7ee      	b.n	e400 <RADIO_DIO0+0x30>
    e422:	2000      	movs	r0, #0
    e424:	4b07      	ldr	r3, [pc, #28]	; (e444 <RADIO_DIO0+0x74>)
    e426:	4798      	blx	r3
    e428:	e7e8      	b.n	e3fc <RADIO_DIO0+0x2c>
    e42a:	46c0      	nop			; (mov r8, r8)
    e42c:	0000e379 	.word	0x0000e379
    e430:	0000e39d 	.word	0x0000e39d
    e434:	0000ea61 	.word	0x0000ea61
    e438:	0000e965 	.word	0x0000e965
    e43c:	0000e9e1 	.word	0x0000e9e1
    e440:	0000eadd 	.word	0x0000eadd
    e444:	0000e3ad 	.word	0x0000e3ad

0000e448 <RADIO_DIO1>:
    e448:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e44a:	466b      	mov	r3, sp
    e44c:	1ddc      	adds	r4, r3, #7
    e44e:	1d9d      	adds	r5, r3, #6
    e450:	2230      	movs	r2, #48	; 0x30
    e452:	2304      	movs	r3, #4
    e454:	0021      	movs	r1, r4
    e456:	0028      	movs	r0, r5
    e458:	4e11      	ldr	r6, [pc, #68]	; (e4a0 <RADIO_DIO1+0x58>)
    e45a:	47b0      	blx	r6
    e45c:	7822      	ldrb	r2, [r4, #0]
    e45e:	782b      	ldrb	r3, [r5, #0]
    e460:	b251      	sxtb	r1, r2
    e462:	2900      	cmp	r1, #0
    e464:	da0c      	bge.n	e480 <RADIO_DIO1+0x38>
    e466:	b2db      	uxtb	r3, r3
    e468:	2b00      	cmp	r3, #0
    e46a:	d004      	beq.n	e476 <RADIO_DIO1+0x2e>
    e46c:	2b01      	cmp	r3, #1
    e46e:	d005      	beq.n	e47c <RADIO_DIO1+0x34>
    e470:	4b0c      	ldr	r3, [pc, #48]	; (e4a4 <RADIO_DIO1+0x5c>)
    e472:	4798      	blx	r3
    e474:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    e476:	4b0c      	ldr	r3, [pc, #48]	; (e4a8 <RADIO_DIO1+0x60>)
    e478:	4798      	blx	r3
    e47a:	e7fb      	b.n	e474 <RADIO_DIO1+0x2c>
    e47c:	4b0b      	ldr	r3, [pc, #44]	; (e4ac <RADIO_DIO1+0x64>)
    e47e:	e7fb      	b.n	e478 <RADIO_DIO1+0x30>
    e480:	2107      	movs	r1, #7
    e482:	b2db      	uxtb	r3, r3
    e484:	400a      	ands	r2, r1
    e486:	7022      	strb	r2, [r4, #0]
    e488:	2b00      	cmp	r3, #0
    e48a:	d005      	beq.n	e498 <RADIO_DIO1+0x50>
    e48c:	2b01      	cmp	r3, #1
    e48e:	d1f1      	bne.n	e474 <RADIO_DIO1+0x2c>
    e490:	2a03      	cmp	r2, #3
    e492:	d1ef      	bne.n	e474 <RADIO_DIO1+0x2c>
    e494:	4b06      	ldr	r3, [pc, #24]	; (e4b0 <RADIO_DIO1+0x68>)
    e496:	e7ef      	b.n	e478 <RADIO_DIO1+0x30>
    e498:	4b06      	ldr	r3, [pc, #24]	; (e4b4 <RADIO_DIO1+0x6c>)
    e49a:	2a05      	cmp	r2, #5
    e49c:	d1ea      	bne.n	e474 <RADIO_DIO1+0x2c>
    e49e:	e7eb      	b.n	e478 <RADIO_DIO1+0x30>
    e4a0:	0000e379 	.word	0x0000e379
    e4a4:	0000e39d 	.word	0x0000e39d
    e4a8:	0000e8e9 	.word	0x0000e8e9
    e4ac:	0000d345 	.word	0x0000d345
    e4b0:	0000e805 	.word	0x0000e805
    e4b4:	0000e769 	.word	0x0000e769

0000e4b8 <RADIO_DIO2>:
    e4b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e4ba:	466b      	mov	r3, sp
    e4bc:	1ddc      	adds	r4, r3, #7
    e4be:	1d9d      	adds	r5, r3, #6
    e4c0:	220c      	movs	r2, #12
    e4c2:	2302      	movs	r3, #2
    e4c4:	0021      	movs	r1, r4
    e4c6:	0028      	movs	r0, r5
    e4c8:	4e0b      	ldr	r6, [pc, #44]	; (e4f8 <RADIO_DIO2+0x40>)
    e4ca:	47b0      	blx	r6
    e4cc:	7823      	ldrb	r3, [r4, #0]
    e4ce:	782a      	ldrb	r2, [r5, #0]
    e4d0:	b259      	sxtb	r1, r3
    e4d2:	2900      	cmp	r1, #0
    e4d4:	da05      	bge.n	e4e2 <RADIO_DIO2+0x2a>
    e4d6:	4b09      	ldr	r3, [pc, #36]	; (e4fc <RADIO_DIO2+0x44>)
    e4d8:	2a02      	cmp	r2, #2
    e4da:	d90a      	bls.n	e4f2 <RADIO_DIO2+0x3a>
    e4dc:	4b08      	ldr	r3, [pc, #32]	; (e500 <RADIO_DIO2+0x48>)
    e4de:	4798      	blx	r3
    e4e0:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    e4e2:	2107      	movs	r1, #7
    e4e4:	400b      	ands	r3, r1
    e4e6:	7023      	strb	r3, [r4, #0]
    e4e8:	2a03      	cmp	r2, #3
    e4ea:	d1f9      	bne.n	e4e0 <RADIO_DIO2+0x28>
    e4ec:	2b05      	cmp	r3, #5
    e4ee:	d1f7      	bne.n	e4e0 <RADIO_DIO2+0x28>
    e4f0:	4b04      	ldr	r3, [pc, #16]	; (e504 <RADIO_DIO2+0x4c>)
    e4f2:	4798      	blx	r3
    e4f4:	e7f4      	b.n	e4e0 <RADIO_DIO2+0x28>
    e4f6:	46c0      	nop			; (mov r8, r8)
    e4f8:	0000e379 	.word	0x0000e379
    e4fc:	0000d345 	.word	0x0000d345
    e500:	0000e39d 	.word	0x0000e39d
    e504:	0000e739 	.word	0x0000e739

0000e508 <RADIO_DIO3>:
    e508:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e50a:	466b      	mov	r3, sp
    e50c:	4668      	mov	r0, sp
    e50e:	1ddc      	adds	r4, r3, #7
    e510:	2203      	movs	r2, #3
    e512:	2300      	movs	r3, #0
    e514:	0021      	movs	r1, r4
    e516:	3006      	adds	r0, #6
    e518:	4d03      	ldr	r5, [pc, #12]	; (e528 <RADIO_DIO3+0x20>)
    e51a:	47a8      	blx	r5
    e51c:	7823      	ldrb	r3, [r4, #0]
    e51e:	2b7f      	cmp	r3, #127	; 0x7f
    e520:	d901      	bls.n	e526 <RADIO_DIO3+0x1e>
    e522:	4b02      	ldr	r3, [pc, #8]	; (e52c <RADIO_DIO3+0x24>)
    e524:	4798      	blx	r3
    e526:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    e528:	0000e379 	.word	0x0000e379
    e52c:	0000e39d 	.word	0x0000e39d

0000e530 <RADIO_DIO4>:
    e530:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e532:	466b      	mov	r3, sp
    e534:	4668      	mov	r0, sp
    e536:	1ddc      	adds	r4, r3, #7
    e538:	2306      	movs	r3, #6
    e53a:	22c0      	movs	r2, #192	; 0xc0
    e53c:	18c0      	adds	r0, r0, r3
    e53e:	0021      	movs	r1, r4
    e540:	4d03      	ldr	r5, [pc, #12]	; (e550 <RADIO_DIO4+0x20>)
    e542:	47a8      	blx	r5
    e544:	7823      	ldrb	r3, [r4, #0]
    e546:	2b7f      	cmp	r3, #127	; 0x7f
    e548:	d901      	bls.n	e54e <RADIO_DIO4+0x1e>
    e54a:	4b02      	ldr	r3, [pc, #8]	; (e554 <RADIO_DIO4+0x24>)
    e54c:	4798      	blx	r3
    e54e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    e550:	0000e379 	.word	0x0000e379
    e554:	0000e39d 	.word	0x0000e39d

0000e558 <RADIO_DIO5>:
    e558:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e55a:	466b      	mov	r3, sp
    e55c:	4668      	mov	r0, sp
    e55e:	1ddc      	adds	r4, r3, #7
    e560:	2230      	movs	r2, #48	; 0x30
    e562:	2304      	movs	r3, #4
    e564:	0021      	movs	r1, r4
    e566:	3006      	adds	r0, #6
    e568:	4d03      	ldr	r5, [pc, #12]	; (e578 <RADIO_DIO5+0x20>)
    e56a:	47a8      	blx	r5
    e56c:	7823      	ldrb	r3, [r4, #0]
    e56e:	2b7f      	cmp	r3, #127	; 0x7f
    e570:	d901      	bls.n	e576 <RADIO_DIO5+0x1e>
    e572:	4b02      	ldr	r3, [pc, #8]	; (e57c <RADIO_DIO5+0x24>)
    e574:	4798      	blx	r3
    e576:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    e578:	0000e379 	.word	0x0000e379
    e57c:	0000e39d 	.word	0x0000e39d

0000e580 <radioPostTask>:
    e580:	b510      	push	{r4, lr}
    e582:	0004      	movs	r4, r0
    e584:	4b05      	ldr	r3, [pc, #20]	; (e59c <radioPostTask+0x1c>)
    e586:	4798      	blx	r3
    e588:	4b05      	ldr	r3, [pc, #20]	; (e5a0 <radioPostTask+0x20>)
    e58a:	8818      	ldrh	r0, [r3, #0]
    e58c:	4320      	orrs	r0, r4
    e58e:	8018      	strh	r0, [r3, #0]
    e590:	4b04      	ldr	r3, [pc, #16]	; (e5a4 <radioPostTask+0x24>)
    e592:	4798      	blx	r3
    e594:	2002      	movs	r0, #2
    e596:	4b04      	ldr	r3, [pc, #16]	; (e5a8 <radioPostTask+0x28>)
    e598:	4798      	blx	r3
    e59a:	bd10      	pop	{r4, pc}
    e59c:	0000c1f1 	.word	0x0000c1f1
    e5a0:	20001e84 	.word	0x20001e84
    e5a4:	0000c1fd 	.word	0x0000c1fd
    e5a8:	0000d23d 	.word	0x0000d23d

0000e5ac <radioClearTask>:
    e5ac:	b510      	push	{r4, lr}
    e5ae:	0004      	movs	r4, r0
    e5b0:	4b04      	ldr	r3, [pc, #16]	; (e5c4 <radioClearTask+0x18>)
    e5b2:	4798      	blx	r3
    e5b4:	4a04      	ldr	r2, [pc, #16]	; (e5c8 <radioClearTask+0x1c>)
    e5b6:	8813      	ldrh	r3, [r2, #0]
    e5b8:	43a3      	bics	r3, r4
    e5ba:	8013      	strh	r3, [r2, #0]
    e5bc:	4b03      	ldr	r3, [pc, #12]	; (e5cc <radioClearTask+0x20>)
    e5be:	4798      	blx	r3
    e5c0:	bd10      	pop	{r4, pc}
    e5c2:	46c0      	nop			; (mov r8, r8)
    e5c4:	0000c1f1 	.word	0x0000c1f1
    e5c8:	20001e84 	.word	0x20001e84
    e5cc:	0000c1fd 	.word	0x0000c1fd

0000e5d0 <RADIO_TaskHandler>:
    e5d0:	b570      	push	{r4, r5, r6, lr}
    e5d2:	2400      	movs	r4, #0
    e5d4:	4d10      	ldr	r5, [pc, #64]	; (e618 <RADIO_TaskHandler+0x48>)
    e5d6:	2601      	movs	r6, #1
    e5d8:	882b      	ldrh	r3, [r5, #0]
    e5da:	42a3      	cmp	r3, r4
    e5dc:	d015      	beq.n	e60a <RADIO_TaskHandler+0x3a>
    e5de:	882b      	ldrh	r3, [r5, #0]
    e5e0:	4123      	asrs	r3, r4
    e5e2:	4233      	tst	r3, r6
    e5e4:	d013      	beq.n	e60e <RADIO_TaskHandler+0x3e>
    e5e6:	40a6      	lsls	r6, r4
    e5e8:	4b0c      	ldr	r3, [pc, #48]	; (e61c <RADIO_TaskHandler+0x4c>)
    e5ea:	4798      	blx	r3
    e5ec:	882b      	ldrh	r3, [r5, #0]
    e5ee:	00a4      	lsls	r4, r4, #2
    e5f0:	43b3      	bics	r3, r6
    e5f2:	802b      	strh	r3, [r5, #0]
    e5f4:	4b0a      	ldr	r3, [pc, #40]	; (e620 <RADIO_TaskHandler+0x50>)
    e5f6:	4798      	blx	r3
    e5f8:	4b0a      	ldr	r3, [pc, #40]	; (e624 <RADIO_TaskHandler+0x54>)
    e5fa:	58e3      	ldr	r3, [r4, r3]
    e5fc:	4798      	blx	r3
    e5fe:	882b      	ldrh	r3, [r5, #0]
    e600:	2b00      	cmp	r3, #0
    e602:	d002      	beq.n	e60a <RADIO_TaskHandler+0x3a>
    e604:	2002      	movs	r0, #2
    e606:	4b08      	ldr	r3, [pc, #32]	; (e628 <RADIO_TaskHandler+0x58>)
    e608:	4798      	blx	r3
    e60a:	2000      	movs	r0, #0
    e60c:	bd70      	pop	{r4, r5, r6, pc}
    e60e:	3401      	adds	r4, #1
    e610:	2c05      	cmp	r4, #5
    e612:	d1e4      	bne.n	e5de <RADIO_TaskHandler+0xe>
    e614:	e7f9      	b.n	e60a <RADIO_TaskHandler+0x3a>
    e616:	46c0      	nop			; (mov r8, r8)
    e618:	20001e84 	.word	0x20001e84
    e61c:	0000c1f1 	.word	0x0000c1f1
    e620:	0000c1fd 	.word	0x0000c1fd
    e624:	000182d8 	.word	0x000182d8
    e628:	0000d23d 	.word	0x0000d23d

0000e62c <RadioSetState>:
    e62c:	4b01      	ldr	r3, [pc, #4]	; (e634 <RadioSetState+0x8>)
    e62e:	7018      	strb	r0, [r3, #0]
    e630:	4770      	bx	lr
    e632:	46c0      	nop			; (mov r8, r8)
    e634:	20003047 	.word	0x20003047

0000e638 <RADIO_GetState>:
    e638:	4b01      	ldr	r3, [pc, #4]	; (e640 <RADIO_GetState+0x8>)
    e63a:	7818      	ldrb	r0, [r3, #0]
    e63c:	b2c0      	uxtb	r0, r0
    e63e:	4770      	bx	lr
    e640:	20003047 	.word	0x20003047

0000e644 <RADIO_SetCallbackBitmask>:
    e644:	4a02      	ldr	r2, [pc, #8]	; (e650 <RADIO_SetCallbackBitmask+0xc>)
    e646:	7813      	ldrb	r3, [r2, #0]
    e648:	4318      	orrs	r0, r3
    e64a:	7010      	strb	r0, [r2, #0]
    e64c:	4770      	bx	lr
    e64e:	46c0      	nop			; (mov r8, r8)
    e650:	20003046 	.word	0x20003046

0000e654 <RADIO_Transmit>:
    e654:	b570      	push	{r4, r5, r6, lr}
    e656:	4d10      	ldr	r5, [pc, #64]	; (e698 <RADIO_Transmit+0x44>)
    e658:	0006      	movs	r6, r0
    e65a:	782b      	ldrb	r3, [r5, #0]
    e65c:	2004      	movs	r0, #4
    e65e:	2b01      	cmp	r3, #1
    e660:	d118      	bne.n	e694 <RADIO_Transmit+0x40>
    e662:	4c0e      	ldr	r4, [pc, #56]	; (e69c <RADIO_Transmit+0x48>)
    e664:	0023      	movs	r3, r4
    e666:	332f      	adds	r3, #47	; 0x2f
    e668:	7818      	ldrb	r0, [r3, #0]
    e66a:	4b0d      	ldr	r3, [pc, #52]	; (e6a0 <RADIO_Transmit+0x4c>)
    e66c:	4798      	blx	r3
    e66e:	4b0d      	ldr	r3, [pc, #52]	; (e6a4 <RADIO_Transmit+0x50>)
    e670:	7832      	ldrb	r2, [r6, #0]
    e672:	6871      	ldr	r1, [r6, #4]
    e674:	701a      	strb	r2, [r3, #0]
    e676:	4b0c      	ldr	r3, [pc, #48]	; (e6a8 <RADIO_Transmit+0x54>)
    e678:	3434      	adds	r4, #52	; 0x34
    e67a:	6019      	str	r1, [r3, #0]
    e67c:	7821      	ldrb	r1, [r4, #0]
    e67e:	2302      	movs	r3, #2
    e680:	2900      	cmp	r1, #0
    e682:	d102      	bne.n	e68a <RADIO_Transmit+0x36>
    e684:	0018      	movs	r0, r3
    e686:	2a3f      	cmp	r2, #63	; 0x3f
    e688:	d804      	bhi.n	e694 <RADIO_Transmit+0x40>
    e68a:	702b      	strb	r3, [r5, #0]
    e68c:	2004      	movs	r0, #4
    e68e:	4b07      	ldr	r3, [pc, #28]	; (e6ac <RADIO_Transmit+0x58>)
    e690:	4798      	blx	r3
    e692:	2000      	movs	r0, #0
    e694:	bd70      	pop	{r4, r5, r6, pc}
    e696:	46c0      	nop			; (mov r8, r8)
    e698:	20003047 	.word	0x20003047
    e69c:	20002d78 	.word	0x20002d78
    e6a0:	0000cf3d 	.word	0x0000cf3d
    e6a4:	20001e9c 	.word	0x20001e9c
    e6a8:	20001e98 	.word	0x20001e98
    e6ac:	0000e581 	.word	0x0000e581

0000e6b0 <Radio_FSKTxPayloadHandler>:
    e6b0:	b570      	push	{r4, r5, r6, lr}
    e6b2:	4b1c      	ldr	r3, [pc, #112]	; (e724 <Radio_FSKTxPayloadHandler+0x74>)
    e6b4:	000d      	movs	r5, r1
    e6b6:	4798      	blx	r3
    e6b8:	4c1b      	ldr	r4, [pc, #108]	; (e728 <Radio_FSKTxPayloadHandler+0x78>)
    e6ba:	3458      	adds	r4, #88	; 0x58
    e6bc:	7820      	ldrb	r0, [r4, #0]
    e6be:	b2c0      	uxtb	r0, r0
    e6c0:	2800      	cmp	r0, #0
    e6c2:	d112      	bne.n	e6ea <Radio_FSKTxPayloadHandler+0x3a>
    e6c4:	2d00      	cmp	r5, #0
    e6c6:	d007      	beq.n	e6d8 <Radio_FSKTxPayloadHandler+0x28>
    e6c8:	4918      	ldr	r1, [pc, #96]	; (e72c <Radio_FSKTxPayloadHandler+0x7c>)
    e6ca:	4b19      	ldr	r3, [pc, #100]	; (e730 <Radio_FSKTxPayloadHandler+0x80>)
    e6cc:	2d3e      	cmp	r5, #62	; 0x3e
    e6ce:	d806      	bhi.n	e6de <Radio_FSKTxPayloadHandler+0x2e>
    e6d0:	002a      	movs	r2, r5
    e6d2:	6809      	ldr	r1, [r1, #0]
    e6d4:	4798      	blx	r3
    e6d6:	7025      	strb	r5, [r4, #0]
    e6d8:	4b16      	ldr	r3, [pc, #88]	; (e734 <Radio_FSKTxPayloadHandler+0x84>)
    e6da:	4798      	blx	r3
    e6dc:	bd70      	pop	{r4, r5, r6, pc}
    e6de:	223f      	movs	r2, #63	; 0x3f
    e6e0:	6809      	ldr	r1, [r1, #0]
    e6e2:	4798      	blx	r3
    e6e4:	233f      	movs	r3, #63	; 0x3f
    e6e6:	7023      	strb	r3, [r4, #0]
    e6e8:	e7f6      	b.n	e6d8 <Radio_FSKTxPayloadHandler+0x28>
    e6ea:	7823      	ldrb	r3, [r4, #0]
    e6ec:	429d      	cmp	r5, r3
    e6ee:	d0f3      	beq.n	e6d8 <Radio_FSKTxPayloadHandler+0x28>
    e6f0:	7822      	ldrb	r2, [r4, #0]
    e6f2:	480e      	ldr	r0, [pc, #56]	; (e72c <Radio_FSKTxPayloadHandler+0x7c>)
    e6f4:	1aaa      	subs	r2, r5, r2
    e6f6:	b2d2      	uxtb	r2, r2
    e6f8:	4b0d      	ldr	r3, [pc, #52]	; (e730 <Radio_FSKTxPayloadHandler+0x80>)
    e6fa:	2a3f      	cmp	r2, #63	; 0x3f
    e6fc:	d807      	bhi.n	e70e <Radio_FSKTxPayloadHandler+0x5e>
    e6fe:	7826      	ldrb	r6, [r4, #0]
    e700:	7822      	ldrb	r2, [r4, #0]
    e702:	6801      	ldr	r1, [r0, #0]
    e704:	1aaa      	subs	r2, r5, r2
    e706:	b2d2      	uxtb	r2, r2
    e708:	1989      	adds	r1, r1, r6
    e70a:	2000      	movs	r0, #0
    e70c:	e7e2      	b.n	e6d4 <Radio_FSKTxPayloadHandler+0x24>
    e70e:	7822      	ldrb	r2, [r4, #0]
    e710:	6801      	ldr	r1, [r0, #0]
    e712:	2000      	movs	r0, #0
    e714:	1889      	adds	r1, r1, r2
    e716:	223f      	movs	r2, #63	; 0x3f
    e718:	4798      	blx	r3
    e71a:	7823      	ldrb	r3, [r4, #0]
    e71c:	333f      	adds	r3, #63	; 0x3f
    e71e:	b2db      	uxtb	r3, r3
    e720:	e7e1      	b.n	e6e6 <Radio_FSKTxPayloadHandler+0x36>
    e722:	46c0      	nop			; (mov r8, r8)
    e724:	000044f9 	.word	0x000044f9
    e728:	20002d78 	.word	0x20002d78
    e72c:	20001e98 	.word	0x20001e98
    e730:	0000c08d 	.word	0x0000c08d
    e734:	00004539 	.word	0x00004539

0000e738 <RADIO_FSKSyncAddr>:
    e738:	4b08      	ldr	r3, [pc, #32]	; (e75c <RADIO_FSKSyncAddr+0x24>)
    e73a:	b510      	push	{r4, lr}
    e73c:	4798      	blx	r3
    e73e:	4b08      	ldr	r3, [pc, #32]	; (e760 <RADIO_FSKSyncAddr+0x28>)
    e740:	001a      	movs	r2, r3
    e742:	3234      	adds	r2, #52	; 0x34
    e744:	7812      	ldrb	r2, [r2, #0]
    e746:	2a00      	cmp	r2, #0
    e748:	d104      	bne.n	e754 <RADIO_FSKSyncAddr+0x1c>
    e74a:	0019      	movs	r1, r3
    e74c:	3358      	adds	r3, #88	; 0x58
    e74e:	312c      	adds	r1, #44	; 0x2c
    e750:	700a      	strb	r2, [r1, #0]
    e752:	701a      	strb	r2, [r3, #0]
    e754:	4b03      	ldr	r3, [pc, #12]	; (e764 <RADIO_FSKSyncAddr+0x2c>)
    e756:	4798      	blx	r3
    e758:	bd10      	pop	{r4, pc}
    e75a:	46c0      	nop			; (mov r8, r8)
    e75c:	000044f9 	.word	0x000044f9
    e760:	20002d78 	.word	0x20002d78
    e764:	00004539 	.word	0x00004539

0000e768 <RADIO_FSKFifoLevel>:
    e768:	b570      	push	{r4, r5, r6, lr}
    e76a:	4b22      	ldr	r3, [pc, #136]	; (e7f4 <RADIO_FSKFifoLevel+0x8c>)
    e76c:	4798      	blx	r3
    e76e:	4d22      	ldr	r5, [pc, #136]	; (e7f8 <RADIO_FSKFifoLevel+0x90>)
    e770:	002a      	movs	r2, r5
    e772:	002b      	movs	r3, r5
    e774:	322c      	adds	r2, #44	; 0x2c
    e776:	3358      	adds	r3, #88	; 0x58
    e778:	7810      	ldrb	r0, [r2, #0]
    e77a:	7819      	ldrb	r1, [r3, #0]
    e77c:	4288      	cmp	r0, r1
    e77e:	d105      	bne.n	e78c <RADIO_FSKFifoLevel+0x24>
    e780:	7812      	ldrb	r2, [r2, #0]
    e782:	2a00      	cmp	r2, #0
    e784:	d002      	beq.n	e78c <RADIO_FSKFifoLevel+0x24>
    e786:	781b      	ldrb	r3, [r3, #0]
    e788:	2b00      	cmp	r3, #0
    e78a:	d11f      	bne.n	e7cc <RADIO_FSKFifoLevel+0x64>
    e78c:	0029      	movs	r1, r5
    e78e:	312c      	adds	r1, #44	; 0x2c
    e790:	7808      	ldrb	r0, [r1, #0]
    e792:	b2c0      	uxtb	r0, r0
    e794:	2800      	cmp	r0, #0
    e796:	d102      	bne.n	e79e <RADIO_FSKFifoLevel+0x36>
    e798:	2201      	movs	r2, #1
    e79a:	4b18      	ldr	r3, [pc, #96]	; (e7fc <RADIO_FSKFifoLevel+0x94>)
    e79c:	4798      	blx	r3
    e79e:	002e      	movs	r6, r5
    e7a0:	002c      	movs	r4, r5
    e7a2:	362c      	adds	r6, #44	; 0x2c
    e7a4:	3458      	adds	r4, #88	; 0x58
    e7a6:	7833      	ldrb	r3, [r6, #0]
    e7a8:	7822      	ldrb	r2, [r4, #0]
    e7aa:	1a9b      	subs	r3, r3, r2
    e7ac:	b2db      	uxtb	r3, r3
    e7ae:	2b3e      	cmp	r3, #62	; 0x3e
    e7b0:	d80f      	bhi.n	e7d2 <RADIO_FSKFifoLevel+0x6a>
    e7b2:	7823      	ldrb	r3, [r4, #0]
    e7b4:	7832      	ldrb	r2, [r6, #0]
    e7b6:	7821      	ldrb	r1, [r4, #0]
    e7b8:	2000      	movs	r0, #0
    e7ba:	1a52      	subs	r2, r2, r1
    e7bc:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    e7be:	b2d2      	uxtb	r2, r2
    e7c0:	18c9      	adds	r1, r1, r3
    e7c2:	4b0e      	ldr	r3, [pc, #56]	; (e7fc <RADIO_FSKFifoLevel+0x94>)
    e7c4:	4798      	blx	r3
    e7c6:	7833      	ldrb	r3, [r6, #0]
    e7c8:	b2db      	uxtb	r3, r3
    e7ca:	7023      	strb	r3, [r4, #0]
    e7cc:	4b0c      	ldr	r3, [pc, #48]	; (e800 <RADIO_FSKFifoLevel+0x98>)
    e7ce:	4798      	blx	r3
    e7d0:	bd70      	pop	{r4, r5, r6, pc}
    e7d2:	7833      	ldrb	r3, [r6, #0]
    e7d4:	7822      	ldrb	r2, [r4, #0]
    e7d6:	1a9b      	subs	r3, r3, r2
    e7d8:	b2db      	uxtb	r3, r3
    e7da:	2b3f      	cmp	r3, #63	; 0x3f
    e7dc:	d9f6      	bls.n	e7cc <RADIO_FSKFifoLevel+0x64>
    e7de:	7823      	ldrb	r3, [r4, #0]
    e7e0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    e7e2:	223f      	movs	r2, #63	; 0x3f
    e7e4:	18c9      	adds	r1, r1, r3
    e7e6:	2000      	movs	r0, #0
    e7e8:	4b04      	ldr	r3, [pc, #16]	; (e7fc <RADIO_FSKFifoLevel+0x94>)
    e7ea:	4798      	blx	r3
    e7ec:	7823      	ldrb	r3, [r4, #0]
    e7ee:	333f      	adds	r3, #63	; 0x3f
    e7f0:	e7ea      	b.n	e7c8 <RADIO_FSKFifoLevel+0x60>
    e7f2:	46c0      	nop			; (mov r8, r8)
    e7f4:	000044f9 	.word	0x000044f9
    e7f8:	20002d78 	.word	0x20002d78
    e7fc:	0000c0cd 	.word	0x0000c0cd
    e800:	00004539 	.word	0x00004539

0000e804 <RADIO_FSKFifoEmpty>:
    e804:	b510      	push	{r4, lr}
    e806:	4b03      	ldr	r3, [pc, #12]	; (e814 <RADIO_FSKFifoEmpty+0x10>)
    e808:	7819      	ldrb	r1, [r3, #0]
    e80a:	4b03      	ldr	r3, [pc, #12]	; (e818 <RADIO_FSKFifoEmpty+0x14>)
    e80c:	6818      	ldr	r0, [r3, #0]
    e80e:	4b03      	ldr	r3, [pc, #12]	; (e81c <RADIO_FSKFifoEmpty+0x18>)
    e810:	4798      	blx	r3
    e812:	bd10      	pop	{r4, pc}
    e814:	20001e9c 	.word	0x20001e9c
    e818:	20001e98 	.word	0x20001e98
    e81c:	0000e6b1 	.word	0x0000e6b1

0000e820 <RADIO_GetData>:
    e820:	4b03      	ldr	r3, [pc, #12]	; (e830 <RADIO_GetData+0x10>)
    e822:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e824:	332c      	adds	r3, #44	; 0x2c
    e826:	6002      	str	r2, [r0, #0]
    e828:	781b      	ldrb	r3, [r3, #0]
    e82a:	2000      	movs	r0, #0
    e82c:	800b      	strh	r3, [r1, #0]
    e82e:	4770      	bx	lr
    e830:	20002d78 	.word	0x20002d78

0000e834 <Radio_EnableRfControl>:
    e834:	b510      	push	{r4, lr}
    e836:	4b08      	ldr	r3, [pc, #32]	; (e858 <Radio_EnableRfControl+0x24>)
    e838:	0001      	movs	r1, r0
    e83a:	681a      	ldr	r2, [r3, #0]
    e83c:	4807      	ldr	r0, [pc, #28]	; (e85c <Radio_EnableRfControl+0x28>)
    e83e:	4c08      	ldr	r4, [pc, #32]	; (e860 <Radio_EnableRfControl+0x2c>)
    e840:	1812      	adds	r2, r2, r0
    e842:	2000      	movs	r0, #0
    e844:	42a2      	cmp	r2, r4
    e846:	d804      	bhi.n	e852 <Radio_EnableRfControl+0x1e>
    e848:	3305      	adds	r3, #5
    e84a:	7fdb      	ldrb	r3, [r3, #31]
    e84c:	1e58      	subs	r0, r3, #1
    e84e:	4183      	sbcs	r3, r0
    e850:	1c58      	adds	r0, r3, #1
    e852:	4b04      	ldr	r3, [pc, #16]	; (e864 <Radio_EnableRfControl+0x30>)
    e854:	4798      	blx	r3
    e856:	bd10      	pop	{r4, pc}
    e858:	20002d78 	.word	0x20002d78
    e85c:	cc9eec80 	.word	0xcc9eec80
    e860:	096ae380 	.word	0x096ae380
    e864:	0000c139 	.word	0x0000c139

0000e868 <Radio_DisableRfControl>:
    e868:	b510      	push	{r4, lr}
    e86a:	4b08      	ldr	r3, [pc, #32]	; (e88c <Radio_DisableRfControl+0x24>)
    e86c:	0001      	movs	r1, r0
    e86e:	681a      	ldr	r2, [r3, #0]
    e870:	4807      	ldr	r0, [pc, #28]	; (e890 <Radio_DisableRfControl+0x28>)
    e872:	4c08      	ldr	r4, [pc, #32]	; (e894 <Radio_DisableRfControl+0x2c>)
    e874:	1812      	adds	r2, r2, r0
    e876:	2000      	movs	r0, #0
    e878:	42a2      	cmp	r2, r4
    e87a:	d804      	bhi.n	e886 <Radio_DisableRfControl+0x1e>
    e87c:	3305      	adds	r3, #5
    e87e:	7fdb      	ldrb	r3, [r3, #31]
    e880:	1e58      	subs	r0, r3, #1
    e882:	4183      	sbcs	r3, r0
    e884:	1c58      	adds	r0, r3, #1
    e886:	4b04      	ldr	r3, [pc, #16]	; (e898 <Radio_DisableRfControl+0x30>)
    e888:	4798      	blx	r3
    e88a:	bd10      	pop	{r4, pc}
    e88c:	20002d78 	.word	0x20002d78
    e890:	cc9eec80 	.word	0xcc9eec80
    e894:	096ae380 	.word	0x096ae380
    e898:	0000c161 	.word	0x0000c161

0000e89c <Radio_WatchdogTimeout>:
    e89c:	b510      	push	{r4, lr}
    e89e:	4b0e      	ldr	r3, [pc, #56]	; (e8d8 <Radio_WatchdogTimeout+0x3c>)
    e8a0:	781a      	ldrb	r2, [r3, #0]
    e8a2:	2a04      	cmp	r2, #4
    e8a4:	d10b      	bne.n	e8be <Radio_WatchdogTimeout+0x22>
    e8a6:	2320      	movs	r3, #32
    e8a8:	4a0c      	ldr	r2, [pc, #48]	; (e8dc <Radio_WatchdogTimeout+0x40>)
    e8aa:	2000      	movs	r0, #0
    e8ac:	8811      	ldrh	r1, [r2, #0]
    e8ae:	430b      	orrs	r3, r1
    e8b0:	8013      	strh	r3, [r2, #0]
    e8b2:	4b0b      	ldr	r3, [pc, #44]	; (e8e0 <Radio_WatchdogTimeout+0x44>)
    e8b4:	4798      	blx	r3
    e8b6:	2002      	movs	r0, #2
    e8b8:	4b0a      	ldr	r3, [pc, #40]	; (e8e4 <Radio_WatchdogTimeout+0x48>)
    e8ba:	4798      	blx	r3
    e8bc:	bd10      	pop	{r4, pc}
    e8be:	781b      	ldrb	r3, [r3, #0]
    e8c0:	2b02      	cmp	r3, #2
    e8c2:	d1fb      	bne.n	e8bc <Radio_WatchdogTimeout+0x20>
    e8c4:	4a05      	ldr	r2, [pc, #20]	; (e8dc <Radio_WatchdogTimeout+0x40>)
    e8c6:	330e      	adds	r3, #14
    e8c8:	8811      	ldrh	r1, [r2, #0]
    e8ca:	2001      	movs	r0, #1
    e8cc:	430b      	orrs	r3, r1
    e8ce:	8013      	strh	r3, [r2, #0]
    e8d0:	4b03      	ldr	r3, [pc, #12]	; (e8e0 <Radio_WatchdogTimeout+0x44>)
    e8d2:	4798      	blx	r3
    e8d4:	2001      	movs	r0, #1
    e8d6:	e7ef      	b.n	e8b8 <Radio_WatchdogTimeout+0x1c>
    e8d8:	20003047 	.word	0x20003047
    e8dc:	20003044 	.word	0x20003044
    e8e0:	0000e869 	.word	0x0000e869
    e8e4:	0000e581 	.word	0x0000e581

0000e8e8 <RADIO_RxTimeout>:
    e8e8:	b510      	push	{r4, lr}
    e8ea:	4b0a      	ldr	r3, [pc, #40]	; (e914 <RADIO_RxTimeout+0x2c>)
    e8ec:	332f      	adds	r3, #47	; 0x2f
    e8ee:	7818      	ldrb	r0, [r3, #0]
    e8f0:	4b09      	ldr	r3, [pc, #36]	; (e918 <RADIO_RxTimeout+0x30>)
    e8f2:	4798      	blx	r3
    e8f4:	2000      	movs	r0, #0
    e8f6:	4b09      	ldr	r3, [pc, #36]	; (e91c <RADIO_RxTimeout+0x34>)
    e8f8:	4798      	blx	r3
    e8fa:	2180      	movs	r1, #128	; 0x80
    e8fc:	2012      	movs	r0, #18
    e8fe:	4b08      	ldr	r3, [pc, #32]	; (e920 <RADIO_RxTimeout+0x38>)
    e900:	4798      	blx	r3
    e902:	2340      	movs	r3, #64	; 0x40
    e904:	4a07      	ldr	r2, [pc, #28]	; (e924 <RADIO_RxTimeout+0x3c>)
    e906:	2002      	movs	r0, #2
    e908:	8811      	ldrh	r1, [r2, #0]
    e90a:	430b      	orrs	r3, r1
    e90c:	8013      	strh	r3, [r2, #0]
    e90e:	4b06      	ldr	r3, [pc, #24]	; (e928 <RADIO_RxTimeout+0x40>)
    e910:	4798      	blx	r3
    e912:	bd10      	pop	{r4, pc}
    e914:	20002d78 	.word	0x20002d78
    e918:	0000cf3d 	.word	0x0000cf3d
    e91c:	0000e869 	.word	0x0000e869
    e920:	0000c039 	.word	0x0000c039
    e924:	20003044 	.word	0x20003044
    e928:	0000e581 	.word	0x0000e581

0000e92c <Radio_RxFSKTimeout>:
    e92c:	b510      	push	{r4, lr}
    e92e:	4b08      	ldr	r3, [pc, #32]	; (e950 <Radio_RxFSKTimeout+0x24>)
    e930:	332f      	adds	r3, #47	; 0x2f
    e932:	7818      	ldrb	r0, [r3, #0]
    e934:	4b07      	ldr	r3, [pc, #28]	; (e954 <Radio_RxFSKTimeout+0x28>)
    e936:	4798      	blx	r3
    e938:	2000      	movs	r0, #0
    e93a:	4b07      	ldr	r3, [pc, #28]	; (e958 <Radio_RxFSKTimeout+0x2c>)
    e93c:	4798      	blx	r3
    e93e:	2380      	movs	r3, #128	; 0x80
    e940:	4a06      	ldr	r2, [pc, #24]	; (e95c <Radio_RxFSKTimeout+0x30>)
    e942:	2002      	movs	r0, #2
    e944:	8811      	ldrh	r1, [r2, #0]
    e946:	430b      	orrs	r3, r1
    e948:	8013      	strh	r3, [r2, #0]
    e94a:	4b05      	ldr	r3, [pc, #20]	; (e960 <Radio_RxFSKTimeout+0x34>)
    e94c:	4798      	blx	r3
    e94e:	bd10      	pop	{r4, pc}
    e950:	20002d78 	.word	0x20002d78
    e954:	0000cf3d 	.word	0x0000cf3d
    e958:	0000e869 	.word	0x0000e869
    e95c:	20003044 	.word	0x20003044
    e960:	0000e581 	.word	0x0000e581

0000e964 <RADIO_TxDone>:
    e964:	b570      	push	{r4, r5, r6, lr}
    e966:	4b14      	ldr	r3, [pc, #80]	; (e9b8 <RADIO_TxDone+0x54>)
    e968:	332f      	adds	r3, #47	; 0x2f
    e96a:	7818      	ldrb	r0, [r3, #0]
    e96c:	4b13      	ldr	r3, [pc, #76]	; (e9bc <RADIO_TxDone+0x58>)
    e96e:	4798      	blx	r3
    e970:	2001      	movs	r0, #1
    e972:	4b13      	ldr	r3, [pc, #76]	; (e9c0 <RADIO_TxDone+0x5c>)
    e974:	4798      	blx	r3
    e976:	4b13      	ldr	r3, [pc, #76]	; (e9c4 <RADIO_TxDone+0x60>)
    e978:	2108      	movs	r1, #8
    e97a:	2012      	movs	r0, #18
    e97c:	4798      	blx	r3
    e97e:	4b12      	ldr	r3, [pc, #72]	; (e9c8 <RADIO_TxDone+0x64>)
    e980:	781a      	ldrb	r2, [r3, #0]
    e982:	4b12      	ldr	r3, [pc, #72]	; (e9cc <RADIO_TxDone+0x68>)
    e984:	2a02      	cmp	r2, #2
    e986:	d002      	beq.n	e98e <RADIO_TxDone+0x2a>
    e988:	881a      	ldrh	r2, [r3, #0]
    e98a:	0692      	lsls	r2, r2, #26
    e98c:	d413      	bmi.n	e9b6 <RADIO_TxDone+0x52>
    e98e:	2001      	movs	r0, #1
    e990:	881a      	ldrh	r2, [r3, #0]
    e992:	4302      	orrs	r2, r0
    e994:	801a      	strh	r2, [r3, #0]
    e996:	4b0e      	ldr	r3, [pc, #56]	; (e9d0 <RADIO_TxDone+0x6c>)
    e998:	4798      	blx	r3
    e99a:	4b0e      	ldr	r3, [pc, #56]	; (e9d4 <RADIO_TxDone+0x70>)
    e99c:	4798      	blx	r3
    e99e:	4c0e      	ldr	r4, [pc, #56]	; (e9d8 <RADIO_TxDone+0x74>)
    e9a0:	4d0e      	ldr	r5, [pc, #56]	; (e9dc <RADIO_TxDone+0x78>)
    e9a2:	6822      	ldr	r2, [r4, #0]
    e9a4:	6863      	ldr	r3, [r4, #4]
    e9a6:	1a80      	subs	r0, r0, r2
    e9a8:	4199      	sbcs	r1, r3
    e9aa:	22fa      	movs	r2, #250	; 0xfa
    e9ac:	2300      	movs	r3, #0
    e9ae:	0092      	lsls	r2, r2, #2
    e9b0:	47a8      	blx	r5
    e9b2:	6020      	str	r0, [r4, #0]
    e9b4:	6061      	str	r1, [r4, #4]
    e9b6:	bd70      	pop	{r4, r5, r6, pc}
    e9b8:	20002d78 	.word	0x20002d78
    e9bc:	0000cf3d 	.word	0x0000cf3d
    e9c0:	0000e869 	.word	0x0000e869
    e9c4:	0000c039 	.word	0x0000c039
    e9c8:	20003047 	.word	0x20003047
    e9cc:	20003044 	.word	0x20003044
    e9d0:	0000e581 	.word	0x0000e581
    e9d4:	0000cbcd 	.word	0x0000cbcd
    e9d8:	20001e90 	.word	0x20001e90
    e9dc:	00013331 	.word	0x00013331

0000e9e0 <RADIO_FSKPacketSent>:
    e9e0:	b570      	push	{r4, r5, r6, lr}
    e9e2:	4b15      	ldr	r3, [pc, #84]	; (ea38 <RADIO_FSKPacketSent+0x58>)
    e9e4:	203f      	movs	r0, #63	; 0x3f
    e9e6:	4798      	blx	r3
    e9e8:	0703      	lsls	r3, r0, #28
    e9ea:	d524      	bpl.n	ea36 <RADIO_FSKPacketSent+0x56>
    e9ec:	4b13      	ldr	r3, [pc, #76]	; (ea3c <RADIO_FSKPacketSent+0x5c>)
    e9ee:	332f      	adds	r3, #47	; 0x2f
    e9f0:	7818      	ldrb	r0, [r3, #0]
    e9f2:	4b13      	ldr	r3, [pc, #76]	; (ea40 <RADIO_FSKPacketSent+0x60>)
    e9f4:	4798      	blx	r3
    e9f6:	4b13      	ldr	r3, [pc, #76]	; (ea44 <RADIO_FSKPacketSent+0x64>)
    e9f8:	2001      	movs	r0, #1
    e9fa:	4798      	blx	r3
    e9fc:	4b12      	ldr	r3, [pc, #72]	; (ea48 <RADIO_FSKPacketSent+0x68>)
    e9fe:	4c13      	ldr	r4, [pc, #76]	; (ea4c <RADIO_FSKPacketSent+0x6c>)
    ea00:	781b      	ldrb	r3, [r3, #0]
    ea02:	2b02      	cmp	r3, #2
    ea04:	d002      	beq.n	ea0c <RADIO_FSKPacketSent+0x2c>
    ea06:	8823      	ldrh	r3, [r4, #0]
    ea08:	069b      	lsls	r3, r3, #26
    ea0a:	d414      	bmi.n	ea36 <RADIO_FSKPacketSent+0x56>
    ea0c:	4b10      	ldr	r3, [pc, #64]	; (ea50 <RADIO_FSKPacketSent+0x70>)
    ea0e:	4798      	blx	r3
    ea10:	4d10      	ldr	r5, [pc, #64]	; (ea54 <RADIO_FSKPacketSent+0x74>)
    ea12:	4e11      	ldr	r6, [pc, #68]	; (ea58 <RADIO_FSKPacketSent+0x78>)
    ea14:	682a      	ldr	r2, [r5, #0]
    ea16:	686b      	ldr	r3, [r5, #4]
    ea18:	1a80      	subs	r0, r0, r2
    ea1a:	4199      	sbcs	r1, r3
    ea1c:	22fa      	movs	r2, #250	; 0xfa
    ea1e:	2300      	movs	r3, #0
    ea20:	0092      	lsls	r2, r2, #2
    ea22:	47b0      	blx	r6
    ea24:	4b0d      	ldr	r3, [pc, #52]	; (ea5c <RADIO_FSKPacketSent+0x7c>)
    ea26:	6028      	str	r0, [r5, #0]
    ea28:	6069      	str	r1, [r5, #4]
    ea2a:	2001      	movs	r0, #1
    ea2c:	4798      	blx	r3
    ea2e:	2304      	movs	r3, #4
    ea30:	8822      	ldrh	r2, [r4, #0]
    ea32:	4313      	orrs	r3, r2
    ea34:	8023      	strh	r3, [r4, #0]
    ea36:	bd70      	pop	{r4, r5, r6, pc}
    ea38:	0000c061 	.word	0x0000c061
    ea3c:	20002d78 	.word	0x20002d78
    ea40:	0000cf3d 	.word	0x0000cf3d
    ea44:	0000e869 	.word	0x0000e869
    ea48:	20003047 	.word	0x20003047
    ea4c:	20003044 	.word	0x20003044
    ea50:	0000cbcd 	.word	0x0000cbcd
    ea54:	20001e90 	.word	0x20001e90
    ea58:	00013331 	.word	0x00013331
    ea5c:	0000e581 	.word	0x0000e581

0000ea60 <RADIO_RxDone>:
    ea60:	b570      	push	{r4, r5, r6, lr}
    ea62:	2012      	movs	r0, #18
    ea64:	4e16      	ldr	r6, [pc, #88]	; (eac0 <RADIO_RxDone+0x60>)
    ea66:	47b0      	blx	r6
    ea68:	4b16      	ldr	r3, [pc, #88]	; (eac4 <RADIO_RxDone+0x64>)
    ea6a:	0005      	movs	r5, r0
    ea6c:	2170      	movs	r1, #112	; 0x70
    ea6e:	2012      	movs	r0, #18
    ea70:	4798      	blx	r3
    ea72:	2350      	movs	r3, #80	; 0x50
    ea74:	402b      	ands	r3, r5
    ea76:	2b50      	cmp	r3, #80	; 0x50
    ea78:	d119      	bne.n	eaae <RADIO_RxDone+0x4e>
    ea7a:	4c13      	ldr	r4, [pc, #76]	; (eac8 <RADIO_RxDone+0x68>)
    ea7c:	0023      	movs	r3, r4
    ea7e:	332f      	adds	r3, #47	; 0x2f
    ea80:	7818      	ldrb	r0, [r3, #0]
    ea82:	4b12      	ldr	r3, [pc, #72]	; (eacc <RADIO_RxDone+0x6c>)
    ea84:	4798      	blx	r3
    ea86:	4b12      	ldr	r3, [pc, #72]	; (ead0 <RADIO_RxDone+0x70>)
    ea88:	2000      	movs	r0, #0
    ea8a:	4798      	blx	r3
    ea8c:	3404      	adds	r4, #4
    ea8e:	201c      	movs	r0, #28
    ea90:	47b0      	blx	r6
    ea92:	7fe2      	ldrb	r2, [r4, #31]
    ea94:	4b0f      	ldr	r3, [pc, #60]	; (ead4 <RADIO_RxDone+0x74>)
    ea96:	4910      	ldr	r1, [pc, #64]	; (ead8 <RADIO_RxDone+0x78>)
    ea98:	2a00      	cmp	r2, #0
    ea9a:	d003      	beq.n	eaa4 <RADIO_RxDone+0x44>
    ea9c:	06aa      	lsls	r2, r5, #26
    ea9e:	d407      	bmi.n	eab0 <RADIO_RxDone+0x50>
    eaa0:	0642      	lsls	r2, r0, #25
    eaa2:	d505      	bpl.n	eab0 <RADIO_RxDone+0x50>
    eaa4:	2002      	movs	r0, #2
    eaa6:	881a      	ldrh	r2, [r3, #0]
    eaa8:	4302      	orrs	r2, r0
    eaaa:	801a      	strh	r2, [r3, #0]
    eaac:	4788      	blx	r1
    eaae:	bd70      	pop	{r4, r5, r6, pc}
    eab0:	2280      	movs	r2, #128	; 0x80
    eab2:	8818      	ldrh	r0, [r3, #0]
    eab4:	0052      	lsls	r2, r2, #1
    eab6:	4302      	orrs	r2, r0
    eab8:	801a      	strh	r2, [r3, #0]
    eaba:	2002      	movs	r0, #2
    eabc:	e7f6      	b.n	eaac <RADIO_RxDone+0x4c>
    eabe:	46c0      	nop			; (mov r8, r8)
    eac0:	0000c061 	.word	0x0000c061
    eac4:	0000c039 	.word	0x0000c039
    eac8:	20002d78 	.word	0x20002d78
    eacc:	0000cf3d 	.word	0x0000cf3d
    ead0:	0000e869 	.word	0x0000e869
    ead4:	20003044 	.word	0x20003044
    ead8:	0000e581 	.word	0x0000e581

0000eadc <RADIO_FSKPayloadReady>:
    eadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eade:	203f      	movs	r0, #63	; 0x3f
    eae0:	4b39      	ldr	r3, [pc, #228]	; (ebc8 <RADIO_FSKPayloadReady+0xec>)
    eae2:	4798      	blx	r3
    eae4:	0743      	lsls	r3, r0, #29
    eae6:	d559      	bpl.n	eb9c <RADIO_FSKPayloadReady+0xc0>
    eae8:	4c38      	ldr	r4, [pc, #224]	; (ebcc <RADIO_FSKPayloadReady+0xf0>)
    eaea:	4d39      	ldr	r5, [pc, #228]	; (ebd0 <RADIO_FSKPayloadReady+0xf4>)
    eaec:	1d23      	adds	r3, r4, #4
    eaee:	7fdb      	ldrb	r3, [r3, #31]
    eaf0:	2b01      	cmp	r3, #1
    eaf2:	d154      	bne.n	eb9e <RADIO_FSKPayloadReady+0xc2>
    eaf4:	2202      	movs	r2, #2
    eaf6:	4210      	tst	r0, r2
    eaf8:	d048      	beq.n	eb8c <RADIO_FSKPayloadReady+0xb0>
    eafa:	0023      	movs	r3, r4
    eafc:	332f      	adds	r3, #47	; 0x2f
    eafe:	7818      	ldrb	r0, [r3, #0]
    eb00:	4e34      	ldr	r6, [pc, #208]	; (ebd4 <RADIO_FSKPayloadReady+0xf8>)
    eb02:	47b0      	blx	r6
    eb04:	0023      	movs	r3, r4
    eb06:	332e      	adds	r3, #46	; 0x2e
    eb08:	7818      	ldrb	r0, [r3, #0]
    eb0a:	47b0      	blx	r6
    eb0c:	4b32      	ldr	r3, [pc, #200]	; (ebd8 <RADIO_FSKPayloadReady+0xfc>)
    eb0e:	4798      	blx	r3
    eb10:	0022      	movs	r2, r4
    eb12:	0023      	movs	r3, r4
    eb14:	322c      	adds	r2, #44	; 0x2c
    eb16:	3358      	adds	r3, #88	; 0x58
    eb18:	7810      	ldrb	r0, [r2, #0]
    eb1a:	7819      	ldrb	r1, [r3, #0]
    eb1c:	4288      	cmp	r0, r1
    eb1e:	d105      	bne.n	eb2c <RADIO_FSKPayloadReady+0x50>
    eb20:	7812      	ldrb	r2, [r2, #0]
    eb22:	2a00      	cmp	r2, #0
    eb24:	d002      	beq.n	eb2c <RADIO_FSKPayloadReady+0x50>
    eb26:	781b      	ldrb	r3, [r3, #0]
    eb28:	2b00      	cmp	r3, #0
    eb2a:	d118      	bne.n	eb5e <RADIO_FSKPayloadReady+0x82>
    eb2c:	0021      	movs	r1, r4
    eb2e:	312c      	adds	r1, #44	; 0x2c
    eb30:	7808      	ldrb	r0, [r1, #0]
    eb32:	b2c0      	uxtb	r0, r0
    eb34:	2800      	cmp	r0, #0
    eb36:	d102      	bne.n	eb3e <RADIO_FSKPayloadReady+0x62>
    eb38:	2201      	movs	r2, #1
    eb3a:	4b28      	ldr	r3, [pc, #160]	; (ebdc <RADIO_FSKPayloadReady+0x100>)
    eb3c:	4798      	blx	r3
    eb3e:	0026      	movs	r6, r4
    eb40:	0027      	movs	r7, r4
    eb42:	3658      	adds	r6, #88	; 0x58
    eb44:	7830      	ldrb	r0, [r6, #0]
    eb46:	372c      	adds	r7, #44	; 0x2c
    eb48:	b2c0      	uxtb	r0, r0
    eb4a:	2800      	cmp	r0, #0
    eb4c:	d110      	bne.n	eb70 <RADIO_FSKPayloadReady+0x94>
    eb4e:	783a      	ldrb	r2, [r7, #0]
    eb50:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    eb52:	b2d2      	uxtb	r2, r2
    eb54:	4b21      	ldr	r3, [pc, #132]	; (ebdc <RADIO_FSKPayloadReady+0x100>)
    eb56:	4798      	blx	r3
    eb58:	783b      	ldrb	r3, [r7, #0]
    eb5a:	b2db      	uxtb	r3, r3
    eb5c:	7033      	strb	r3, [r6, #0]
    eb5e:	4b20      	ldr	r3, [pc, #128]	; (ebe0 <RADIO_FSKPayloadReady+0x104>)
    eb60:	4798      	blx	r3
    eb62:	4b20      	ldr	r3, [pc, #128]	; (ebe4 <RADIO_FSKPayloadReady+0x108>)
    eb64:	2000      	movs	r0, #0
    eb66:	4798      	blx	r3
    eb68:	2308      	movs	r3, #8
    eb6a:	882a      	ldrh	r2, [r5, #0]
    eb6c:	4313      	orrs	r3, r2
    eb6e:	e011      	b.n	eb94 <RADIO_FSKPayloadReady+0xb8>
    eb70:	783b      	ldrb	r3, [r7, #0]
    eb72:	7832      	ldrb	r2, [r6, #0]
    eb74:	1a9b      	subs	r3, r3, r2
    eb76:	2b00      	cmp	r3, #0
    eb78:	ddf1      	ble.n	eb5e <RADIO_FSKPayloadReady+0x82>
    eb7a:	7833      	ldrb	r3, [r6, #0]
    eb7c:	783a      	ldrb	r2, [r7, #0]
    eb7e:	7831      	ldrb	r1, [r6, #0]
    eb80:	2000      	movs	r0, #0
    eb82:	1a52      	subs	r2, r2, r1
    eb84:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    eb86:	b2d2      	uxtb	r2, r2
    eb88:	18c9      	adds	r1, r1, r3
    eb8a:	e7e3      	b.n	eb54 <RADIO_FSKPayloadReady+0x78>
    eb8c:	2380      	movs	r3, #128	; 0x80
    eb8e:	8829      	ldrh	r1, [r5, #0]
    eb90:	005b      	lsls	r3, r3, #1
    eb92:	430b      	orrs	r3, r1
    eb94:	802b      	strh	r3, [r5, #0]
    eb96:	2002      	movs	r0, #2
    eb98:	4b13      	ldr	r3, [pc, #76]	; (ebe8 <RADIO_FSKPayloadReady+0x10c>)
    eb9a:	4798      	blx	r3
    eb9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eb9e:	0023      	movs	r3, r4
    eba0:	332f      	adds	r3, #47	; 0x2f
    eba2:	4e0c      	ldr	r6, [pc, #48]	; (ebd4 <RADIO_FSKPayloadReady+0xf8>)
    eba4:	7818      	ldrb	r0, [r3, #0]
    eba6:	47b0      	blx	r6
    eba8:	0023      	movs	r3, r4
    ebaa:	332e      	adds	r3, #46	; 0x2e
    ebac:	7818      	ldrb	r0, [r3, #0]
    ebae:	47b0      	blx	r6
    ebb0:	4e0e      	ldr	r6, [pc, #56]	; (ebec <RADIO_FSKPayloadReady+0x110>)
    ebb2:	2201      	movs	r2, #1
    ebb4:	0031      	movs	r1, r6
    ebb6:	2000      	movs	r0, #0
    ebb8:	4f08      	ldr	r7, [pc, #32]	; (ebdc <RADIO_FSKPayloadReady+0x100>)
    ebba:	47b8      	blx	r7
    ebbc:	7832      	ldrb	r2, [r6, #0]
    ebbe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    ebc0:	b2d2      	uxtb	r2, r2
    ebc2:	2000      	movs	r0, #0
    ebc4:	47b8      	blx	r7
    ebc6:	e7cc      	b.n	eb62 <RADIO_FSKPayloadReady+0x86>
    ebc8:	0000c061 	.word	0x0000c061
    ebcc:	20002d78 	.word	0x20002d78
    ebd0:	20003044 	.word	0x20003044
    ebd4:	0000cf3d 	.word	0x0000cf3d
    ebd8:	000044f9 	.word	0x000044f9
    ebdc:	0000c0cd 	.word	0x0000c0cd
    ebe0:	00004539 	.word	0x00004539
    ebe4:	0000e869 	.word	0x0000e869
    ebe8:	0000e581 	.word	0x0000e581
    ebec:	20002da4 	.word	0x20002da4

0000ebf0 <Radio_SetClockInput>:
    ebf0:	b510      	push	{r4, lr}
    ebf2:	4b08      	ldr	r3, [pc, #32]	; (ec14 <Radio_SetClockInput+0x24>)
    ebf4:	3355      	adds	r3, #85	; 0x55
    ebf6:	781b      	ldrb	r3, [r3, #0]
    ebf8:	2b00      	cmp	r3, #0
    ebfa:	d10a      	bne.n	ec12 <Radio_SetClockInput+0x22>
    ebfc:	4b06      	ldr	r3, [pc, #24]	; (ec18 <Radio_SetClockInput+0x28>)
    ebfe:	204b      	movs	r0, #75	; 0x4b
    ec00:	4798      	blx	r3
    ec02:	2110      	movs	r1, #16
    ec04:	4301      	orrs	r1, r0
    ec06:	4b05      	ldr	r3, [pc, #20]	; (ec1c <Radio_SetClockInput+0x2c>)
    ec08:	b2c9      	uxtb	r1, r1
    ec0a:	204b      	movs	r0, #75	; 0x4b
    ec0c:	4798      	blx	r3
    ec0e:	4b04      	ldr	r3, [pc, #16]	; (ec20 <Radio_SetClockInput+0x30>)
    ec10:	4798      	blx	r3
    ec12:	bd10      	pop	{r4, pc}
    ec14:	20002d78 	.word	0x20002d78
    ec18:	0000c061 	.word	0x0000c061
    ec1c:	0000c039 	.word	0x0000c039
    ec20:	0000c181 	.word	0x0000c181

0000ec24 <RADIO_RxHandler>:
    ec24:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ec26:	4b34      	ldr	r3, [pc, #208]	; (ecf8 <RADIO_RxHandler+0xd4>)
    ec28:	4798      	blx	r3
    ec2a:	2000      	movs	r0, #0
    ec2c:	4b33      	ldr	r3, [pc, #204]	; (ecfc <RADIO_RxHandler+0xd8>)
    ec2e:	4798      	blx	r3
    ec30:	4e33      	ldr	r6, [pc, #204]	; (ed00 <RADIO_RxHandler+0xdc>)
    ec32:	4b34      	ldr	r3, [pc, #208]	; (ed04 <RADIO_RxHandler+0xe0>)
    ec34:	8830      	ldrh	r0, [r6, #0]
    ec36:	2800      	cmp	r0, #0
    ec38:	d100      	bne.n	ec3c <RADIO_RxHandler+0x18>
    ec3a:	3004      	adds	r0, #4
    ec3c:	4798      	blx	r3
    ec3e:	4c32      	ldr	r4, [pc, #200]	; (ed08 <RADIO_RxHandler+0xe4>)
    ec40:	4d32      	ldr	r5, [pc, #200]	; (ed0c <RADIO_RxHandler+0xe8>)
    ec42:	0023      	movs	r3, r4
    ec44:	3334      	adds	r3, #52	; 0x34
    ec46:	7819      	ldrb	r1, [r3, #0]
    ec48:	2901      	cmp	r1, #1
    ec4a:	d122      	bne.n	ec92 <RADIO_RxHandler+0x6e>
    ec4c:	2022      	movs	r0, #34	; 0x22
    ec4e:	47a8      	blx	r5
    ec50:	2100      	movs	r1, #0
    ec52:	2040      	movs	r0, #64	; 0x40
    ec54:	47a8      	blx	r5
    ec56:	2100      	movs	r1, #0
    ec58:	2041      	movs	r0, #65	; 0x41
    ec5a:	47a8      	blx	r5
    ec5c:	8832      	ldrh	r2, [r6, #0]
    ec5e:	4b2c      	ldr	r3, [pc, #176]	; (ed10 <RADIO_RxHandler+0xec>)
    ec60:	2a00      	cmp	r2, #0
    ec62:	d131      	bne.n	ecc8 <RADIO_RxHandler+0xa4>
    ec64:	0021      	movs	r1, r4
    ec66:	2005      	movs	r0, #5
    ec68:	3134      	adds	r1, #52	; 0x34
    ec6a:	7809      	ldrb	r1, [r1, #0]
    ec6c:	4798      	blx	r3
    ec6e:	68e3      	ldr	r3, [r4, #12]
    ec70:	2b00      	cmp	r3, #0
    ec72:	d00c      	beq.n	ec8e <RADIO_RxHandler+0x6a>
    ec74:	8832      	ldrh	r2, [r6, #0]
    ec76:	2a00      	cmp	r2, #0
    ec78:	d009      	beq.n	ec8e <RADIO_RxHandler+0x6a>
    ec7a:	21fa      	movs	r1, #250	; 0xfa
    ec7c:	2200      	movs	r2, #0
    ec7e:	342f      	adds	r4, #47	; 0x2f
    ec80:	0089      	lsls	r1, r1, #2
    ec82:	7820      	ldrb	r0, [r4, #0]
    ec84:	4359      	muls	r1, r3
    ec86:	9200      	str	r2, [sp, #0]
    ec88:	4b22      	ldr	r3, [pc, #136]	; (ed14 <RADIO_RxHandler+0xf0>)
    ec8a:	4c23      	ldr	r4, [pc, #140]	; (ed18 <RADIO_RxHandler+0xf4>)
    ec8c:	47a0      	blx	r4
    ec8e:	2000      	movs	r0, #0
    ec90:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    ec92:	0023      	movs	r3, r4
    ec94:	3338      	adds	r3, #56	; 0x38
    ec96:	7819      	ldrb	r1, [r3, #0]
    ec98:	2012      	movs	r0, #18
    ec9a:	47a8      	blx	r5
    ec9c:	0023      	movs	r3, r4
    ec9e:	3339      	adds	r3, #57	; 0x39
    eca0:	7819      	ldrb	r1, [r3, #0]
    eca2:	2013      	movs	r0, #19
    eca4:	47a8      	blx	r5
    eca6:	210c      	movs	r1, #12
    eca8:	2040      	movs	r0, #64	; 0x40
    ecaa:	47a8      	blx	r5
    ecac:	2100      	movs	r1, #0
    ecae:	2041      	movs	r0, #65	; 0x41
    ecb0:	47a8      	blx	r5
    ecb2:	0022      	movs	r2, r4
    ecb4:	2300      	movs	r3, #0
    ecb6:	3256      	adds	r2, #86	; 0x56
    ecb8:	8013      	strh	r3, [r2, #0]
    ecba:	0022      	movs	r2, r4
    ecbc:	322c      	adds	r2, #44	; 0x2c
    ecbe:	7013      	strb	r3, [r2, #0]
    ecc0:	0022      	movs	r2, r4
    ecc2:	3258      	adds	r2, #88	; 0x58
    ecc4:	7013      	strb	r3, [r2, #0]
    ecc6:	e7c9      	b.n	ec5c <RADIO_RxHandler+0x38>
    ecc8:	0022      	movs	r2, r4
    ecca:	3234      	adds	r2, #52	; 0x34
    eccc:	7811      	ldrb	r1, [r2, #0]
    ecce:	2200      	movs	r2, #0
    ecd0:	2901      	cmp	r1, #1
    ecd2:	d101      	bne.n	ecd8 <RADIO_RxHandler+0xb4>
    ecd4:	2006      	movs	r0, #6
    ecd6:	e7c9      	b.n	ec6c <RADIO_RxHandler+0x48>
    ecd8:	0011      	movs	r1, r2
    ecda:	2005      	movs	r0, #5
    ecdc:	4798      	blx	r3
    ecde:	21fa      	movs	r1, #250	; 0xfa
    ece0:	8833      	ldrh	r3, [r6, #0]
    ece2:	0089      	lsls	r1, r1, #2
    ece4:	4359      	muls	r1, r3
    ece6:	0023      	movs	r3, r4
    ece8:	2200      	movs	r2, #0
    ecea:	332e      	adds	r3, #46	; 0x2e
    ecec:	7818      	ldrb	r0, [r3, #0]
    ecee:	4d0a      	ldr	r5, [pc, #40]	; (ed18 <RADIO_RxHandler+0xf4>)
    ecf0:	9200      	str	r2, [sp, #0]
    ecf2:	4b0a      	ldr	r3, [pc, #40]	; (ed1c <RADIO_RxHandler+0xf8>)
    ecf4:	47a8      	blx	r5
    ecf6:	e7ba      	b.n	ec6e <RADIO_RxHandler+0x4a>
    ecf8:	0000ebf1 	.word	0x0000ebf1
    ecfc:	0000e835 	.word	0x0000e835
    ed00:	20001e88 	.word	0x20001e88
    ed04:	0000dfc1 	.word	0x0000dfc1
    ed08:	20002d78 	.word	0x20002d78
    ed0c:	0000c039 	.word	0x0000c039
    ed10:	0000d261 	.word	0x0000d261
    ed14:	0000e89d 	.word	0x0000e89d
    ed18:	0000cc25 	.word	0x0000cc25
    ed1c:	0000e92d 	.word	0x0000e92d

0000ed20 <Radio_ResetClockInput>:
    ed20:	b510      	push	{r4, lr}
    ed22:	4b04      	ldr	r3, [pc, #16]	; (ed34 <Radio_ResetClockInput+0x14>)
    ed24:	3355      	adds	r3, #85	; 0x55
    ed26:	781b      	ldrb	r3, [r3, #0]
    ed28:	2b00      	cmp	r3, #0
    ed2a:	d101      	bne.n	ed30 <Radio_ResetClockInput+0x10>
    ed2c:	4b02      	ldr	r3, [pc, #8]	; (ed38 <Radio_ResetClockInput+0x18>)
    ed2e:	4798      	blx	r3
    ed30:	bd10      	pop	{r4, pc}
    ed32:	46c0      	nop			; (mov r8, r8)
    ed34:	20002d78 	.word	0x20002d78
    ed38:	0000c19d 	.word	0x0000c19d

0000ed3c <RADIO_InitDefaultAttributes>:
    ed3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ed3e:	2501      	movs	r5, #1
    ed40:	4b64      	ldr	r3, [pc, #400]	; (eed4 <RADIO_InitDefaultAttributes+0x198>)
    ed42:	4c65      	ldr	r4, [pc, #404]	; (eed8 <RADIO_InitDefaultAttributes+0x19c>)
    ed44:	701d      	strb	r5, [r3, #0]
    ed46:	4b65      	ldr	r3, [pc, #404]	; (eedc <RADIO_InitDefaultAttributes+0x1a0>)
    ed48:	2207      	movs	r2, #7
    ed4a:	6023      	str	r3, [r4, #0]
    ed4c:	4b64      	ldr	r3, [pc, #400]	; (eee0 <RADIO_InitDefaultAttributes+0x1a4>)
    ed4e:	18a1      	adds	r1, r4, r2
    ed50:	6063      	str	r3, [r4, #4]
    ed52:	4b64      	ldr	r3, [pc, #400]	; (eee4 <RADIO_InitDefaultAttributes+0x1a8>)
    ed54:	0027      	movs	r7, r4
    ed56:	60a3      	str	r3, [r4, #8]
    ed58:	0023      	movs	r3, r4
    ed5a:	3334      	adds	r3, #52	; 0x34
    ed5c:	701d      	strb	r5, [r3, #0]
    ed5e:	0023      	movs	r3, r4
    ed60:	3336      	adds	r3, #54	; 0x36
    ed62:	701a      	strb	r2, [r3, #0]
    ed64:	1ce3      	adds	r3, r4, #3
    ed66:	77dd      	strb	r5, [r3, #31]
    ed68:	0023      	movs	r3, r4
    ed6a:	3333      	adds	r3, #51	; 0x33
    ed6c:	701d      	strb	r5, [r3, #0]
    ed6e:	2300      	movs	r3, #0
    ed70:	77cb      	strb	r3, [r1, #31]
    ed72:	2108      	movs	r1, #8
    ed74:	82a1      	strh	r1, [r4, #20]
    ed76:	0021      	movs	r1, r4
    ed78:	3135      	adds	r1, #53	; 0x35
    ed7a:	700a      	strb	r2, [r1, #0]
    ed7c:	1d22      	adds	r2, r4, #4
    ed7e:	77d5      	strb	r5, [r2, #31]
    ed80:	1d62      	adds	r2, r4, #5
    ed82:	77d3      	strb	r3, [r2, #31]
    ed84:	1da2      	adds	r2, r4, #6
    ed86:	77d3      	strb	r3, [r2, #31]
    ed88:	2194      	movs	r1, #148	; 0x94
    ed8a:	22c1      	movs	r2, #193	; 0xc1
    ed8c:	76a1      	strb	r1, [r4, #26]
    ed8e:	7662      	strb	r2, [r4, #25]
    ed90:	76e2      	strb	r2, [r4, #27]
    ed92:	3991      	subs	r1, #145	; 0x91
    ed94:	1ca2      	adds	r2, r4, #2
    ed96:	77d1      	strb	r1, [r2, #31]
    ed98:	2234      	movs	r2, #52	; 0x34
    ed9a:	7622      	strb	r2, [r4, #24]
    ed9c:	0022      	movs	r2, r4
    ed9e:	317d      	adds	r1, #125	; 0x7d
    eda0:	3232      	adds	r2, #50	; 0x32
    eda2:	7011      	strb	r1, [r2, #0]
    eda4:	4a50      	ldr	r2, [pc, #320]	; (eee8 <RADIO_InitDefaultAttributes+0x1ac>)
    eda6:	397e      	subs	r1, #126	; 0x7e
    eda8:	60e2      	str	r2, [r4, #12]
    edaa:	0022      	movs	r2, r4
    edac:	3237      	adds	r2, #55	; 0x37
    edae:	7011      	strb	r1, [r2, #0]
    edb0:	0022      	movs	r2, r4
    edb2:	3109      	adds	r1, #9
    edb4:	3238      	adds	r2, #56	; 0x38
    edb6:	7011      	strb	r1, [r2, #0]
    edb8:	0022      	movs	r2, r4
    edba:	3107      	adds	r1, #7
    edbc:	3239      	adds	r2, #57	; 0x39
    edbe:	7011      	strb	r1, [r2, #0]
    edc0:	0022      	movs	r2, r4
    edc2:	322c      	adds	r2, #44	; 0x2c
    edc4:	7013      	strb	r3, [r2, #0]
    edc6:	4a49      	ldr	r2, [pc, #292]	; (eeec <RADIO_InitDefaultAttributes+0x1b0>)
    edc8:	82e3      	strh	r3, [r4, #22]
    edca:	62a2      	str	r2, [r4, #40]	; 0x28
    edcc:	0022      	movs	r2, r4
    edce:	324c      	adds	r2, #76	; 0x4c
    edd0:	8013      	strh	r3, [r2, #0]
    edd2:	0022      	movs	r2, r4
    edd4:	324e      	adds	r2, #78	; 0x4e
    edd6:	7013      	strb	r3, [r2, #0]
    edd8:	0022      	movs	r2, r4
    edda:	324f      	adds	r2, #79	; 0x4f
    eddc:	7013      	strb	r3, [r2, #0]
    edde:	0022      	movs	r2, r4
    ede0:	3240      	adds	r2, #64	; 0x40
    ede2:	7013      	strb	r3, [r2, #0]
    ede4:	0022      	movs	r2, r4
    ede6:	3241      	adds	r2, #65	; 0x41
    ede8:	7013      	strb	r3, [r2, #0]
    edea:	0022      	movs	r2, r4
    edec:	3254      	adds	r2, #84	; 0x54
    edee:	7013      	strb	r3, [r2, #0]
    edf0:	0022      	movs	r2, r4
    edf2:	3255      	adds	r2, #85	; 0x55
    edf4:	7015      	strb	r5, [r2, #0]
    edf6:	0022      	movs	r2, r4
    edf8:	3258      	adds	r2, #88	; 0x58
    edfa:	6463      	str	r3, [r4, #68]	; 0x44
    edfc:	64a3      	str	r3, [r4, #72]	; 0x48
    edfe:	87a3      	strh	r3, [r4, #60]	; 0x3c
    ee00:	87e3      	strh	r3, [r4, #62]	; 0x3e
    ee02:	7013      	strb	r3, [r2, #0]
    ee04:	3730      	adds	r7, #48	; 0x30
    ee06:	783b      	ldrb	r3, [r7, #0]
    ee08:	2b00      	cmp	r3, #0
    ee0a:	d151      	bne.n	eeb0 <RADIO_InitDefaultAttributes+0x174>
    ee0c:	4838      	ldr	r0, [pc, #224]	; (eef0 <RADIO_InitDefaultAttributes+0x1b4>)
    ee0e:	4e39      	ldr	r6, [pc, #228]	; (eef4 <RADIO_InitDefaultAttributes+0x1b8>)
    ee10:	47b0      	blx	r6
    ee12:	2808      	cmp	r0, #8
    ee14:	d149      	bne.n	eeaa <RADIO_InitDefaultAttributes+0x16e>
    ee16:	4838      	ldr	r0, [pc, #224]	; (eef8 <RADIO_InitDefaultAttributes+0x1bc>)
    ee18:	47b0      	blx	r6
    ee1a:	2808      	cmp	r0, #8
    ee1c:	d145      	bne.n	eeaa <RADIO_InitDefaultAttributes+0x16e>
    ee1e:	4837      	ldr	r0, [pc, #220]	; (eefc <RADIO_InitDefaultAttributes+0x1c0>)
    ee20:	47b0      	blx	r6
    ee22:	2808      	cmp	r0, #8
    ee24:	d141      	bne.n	eeaa <RADIO_InitDefaultAttributes+0x16e>
    ee26:	4836      	ldr	r0, [pc, #216]	; (ef00 <RADIO_InitDefaultAttributes+0x1c4>)
    ee28:	47b0      	blx	r6
    ee2a:	2808      	cmp	r0, #8
    ee2c:	d13d      	bne.n	eeaa <RADIO_InitDefaultAttributes+0x16e>
    ee2e:	703d      	strb	r5, [r7, #0]
    ee30:	4b34      	ldr	r3, [pc, #208]	; (ef04 <RADIO_InitDefaultAttributes+0x1c8>)
    ee32:	4798      	blx	r3
    ee34:	4b34      	ldr	r3, [pc, #208]	; (ef08 <RADIO_InitDefaultAttributes+0x1cc>)
    ee36:	4798      	blx	r3
    ee38:	2800      	cmp	r0, #0
    ee3a:	d107      	bne.n	ee4c <RADIO_InitDefaultAttributes+0x110>
    ee3c:	0023      	movs	r3, r4
    ee3e:	3355      	adds	r3, #85	; 0x55
    ee40:	7018      	strb	r0, [r3, #0]
    ee42:	4b32      	ldr	r3, [pc, #200]	; (ef0c <RADIO_InitDefaultAttributes+0x1d0>)
    ee44:	4798      	blx	r3
    ee46:	0023      	movs	r3, r4
    ee48:	3354      	adds	r3, #84	; 0x54
    ee4a:	7018      	strb	r0, [r3, #0]
    ee4c:	4b30      	ldr	r3, [pc, #192]	; (ef10 <RADIO_InitDefaultAttributes+0x1d4>)
    ee4e:	4798      	blx	r3
    ee50:	2201      	movs	r2, #1
    ee52:	2100      	movs	r1, #0
    ee54:	0010      	movs	r0, r2
    ee56:	4f2f      	ldr	r7, [pc, #188]	; (ef14 <RADIO_InitDefaultAttributes+0x1d8>)
    ee58:	47b8      	blx	r7
    ee5a:	6820      	ldr	r0, [r4, #0]
    ee5c:	4b2e      	ldr	r3, [pc, #184]	; (ef18 <RADIO_InitDefaultAttributes+0x1dc>)
    ee5e:	4798      	blx	r3
    ee60:	2142      	movs	r1, #66	; 0x42
    ee62:	203b      	movs	r0, #59	; 0x3b
    ee64:	4d2d      	ldr	r5, [pc, #180]	; (ef1c <RADIO_InitDefaultAttributes+0x1e0>)
    ee66:	47a8      	blx	r5
    ee68:	203b      	movs	r0, #59	; 0x3b
    ee6a:	4b2d      	ldr	r3, [pc, #180]	; (ef20 <RADIO_InitDefaultAttributes+0x1e4>)
    ee6c:	4798      	blx	r3
    ee6e:	2620      	movs	r6, #32
    ee70:	4006      	ands	r6, r0
    ee72:	d1f9      	bne.n	ee68 <RADIO_InitDefaultAttributes+0x12c>
    ee74:	2123      	movs	r1, #35	; 0x23
    ee76:	200c      	movs	r0, #12
    ee78:	47a8      	blx	r5
    ee7a:	21aa      	movs	r1, #170	; 0xaa
    ee7c:	201f      	movs	r0, #31
    ee7e:	47a8      	blx	r5
    ee80:	21ff      	movs	r1, #255	; 0xff
    ee82:	2032      	movs	r0, #50	; 0x32
    ee84:	47a8      	blx	r5
    ee86:	2140      	movs	r1, #64	; 0x40
    ee88:	2031      	movs	r0, #49	; 0x31
    ee8a:	47a8      	blx	r5
    ee8c:	2201      	movs	r2, #1
    ee8e:	0030      	movs	r0, r6
    ee90:	0011      	movs	r1, r2
    ee92:	47b8      	blx	r7
    ee94:	21ff      	movs	r1, #255	; 0xff
    ee96:	2023      	movs	r0, #35	; 0x23
    ee98:	47a8      	blx	r5
    ee9a:	4b21      	ldr	r3, [pc, #132]	; (ef20 <RADIO_InitDefaultAttributes+0x1e4>)
    ee9c:	2042      	movs	r0, #66	; 0x42
    ee9e:	4798      	blx	r3
    eea0:	3431      	adds	r4, #49	; 0x31
    eea2:	4b20      	ldr	r3, [pc, #128]	; (ef24 <RADIO_InitDefaultAttributes+0x1e8>)
    eea4:	7020      	strb	r0, [r4, #0]
    eea6:	4798      	blx	r3
    eea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eeaa:	4b1f      	ldr	r3, [pc, #124]	; (ef28 <RADIO_InitDefaultAttributes+0x1ec>)
    eeac:	4798      	blx	r3
    eeae:	e7bf      	b.n	ee30 <RADIO_InitDefaultAttributes+0xf4>
    eeb0:	0023      	movs	r3, r4
    eeb2:	332d      	adds	r3, #45	; 0x2d
    eeb4:	4d1d      	ldr	r5, [pc, #116]	; (ef2c <RADIO_InitDefaultAttributes+0x1f0>)
    eeb6:	7818      	ldrb	r0, [r3, #0]
    eeb8:	47a8      	blx	r5
    eeba:	0023      	movs	r3, r4
    eebc:	332e      	adds	r3, #46	; 0x2e
    eebe:	7818      	ldrb	r0, [r3, #0]
    eec0:	47a8      	blx	r5
    eec2:	0023      	movs	r3, r4
    eec4:	332f      	adds	r3, #47	; 0x2f
    eec6:	7818      	ldrb	r0, [r3, #0]
    eec8:	47a8      	blx	r5
    eeca:	0023      	movs	r3, r4
    eecc:	3350      	adds	r3, #80	; 0x50
    eece:	7818      	ldrb	r0, [r3, #0]
    eed0:	47a8      	blx	r5
    eed2:	e7ad      	b.n	ee30 <RADIO_InitDefaultAttributes+0xf4>
    eed4:	20003047 	.word	0x20003047
    eed8:	20002d78 	.word	0x20002d78
    eedc:	33be27a0 	.word	0x33be27a0
    eee0:	000061a8 	.word	0x000061a8
    eee4:	0000c350 	.word	0x0000c350
    eee8:	00003a98 	.word	0x00003a98
    eeec:	20002f44 	.word	0x20002f44
    eef0:	20002da5 	.word	0x20002da5
    eef4:	0000cbf1 	.word	0x0000cbf1
    eef8:	20002da6 	.word	0x20002da6
    eefc:	20002da7 	.word	0x20002da7
    ef00:	20002dc8 	.word	0x20002dc8
    ef04:	0000bff9 	.word	0x0000bff9
    ef08:	0000c17d 	.word	0x0000c17d
    ef0c:	0000c179 	.word	0x0000c179
    ef10:	0000ebf1 	.word	0x0000ebf1
    ef14:	0000d261 	.word	0x0000d261
    ef18:	0000df79 	.word	0x0000df79
    ef1c:	0000c039 	.word	0x0000c039
    ef20:	0000c061 	.word	0x0000c061
    ef24:	0000ed21 	.word	0x0000ed21
    ef28:	0000cb35 	.word	0x0000cb35
    ef2c:	0000cf3d 	.word	0x0000cf3d

0000ef30 <RADIO_Receive>:
    ef30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ef32:	7803      	ldrb	r3, [r0, #0]
    ef34:	0006      	movs	r6, r0
    ef36:	4d24      	ldr	r5, [pc, #144]	; (efc8 <RADIO_Receive+0x98>)
    ef38:	2b00      	cmp	r3, #0
    ef3a:	d11d      	bne.n	ef78 <RADIO_Receive+0x48>
    ef3c:	782b      	ldrb	r3, [r5, #0]
    ef3e:	2004      	movs	r0, #4
    ef40:	2b01      	cmp	r3, #1
    ef42:	d118      	bne.n	ef76 <RADIO_Receive+0x46>
    ef44:	4c21      	ldr	r4, [pc, #132]	; (efcc <RADIO_Receive+0x9c>)
    ef46:	4f22      	ldr	r7, [pc, #136]	; (efd0 <RADIO_Receive+0xa0>)
    ef48:	0023      	movs	r3, r4
    ef4a:	332f      	adds	r3, #47	; 0x2f
    ef4c:	7818      	ldrb	r0, [r3, #0]
    ef4e:	47b8      	blx	r7
    ef50:	0023      	movs	r3, r4
    ef52:	3334      	adds	r3, #52	; 0x34
    ef54:	781b      	ldrb	r3, [r3, #0]
    ef56:	2b00      	cmp	r3, #0
    ef58:	d102      	bne.n	ef60 <RADIO_Receive+0x30>
    ef5a:	342e      	adds	r4, #46	; 0x2e
    ef5c:	7820      	ldrb	r0, [r4, #0]
    ef5e:	47b8      	blx	r7
    ef60:	8872      	ldrh	r2, [r6, #2]
    ef62:	4b1c      	ldr	r3, [pc, #112]	; (efd4 <RADIO_Receive+0xa4>)
    ef64:	2008      	movs	r0, #8
    ef66:	801a      	strh	r2, [r3, #0]
    ef68:	2304      	movs	r3, #4
    ef6a:	702b      	strb	r3, [r5, #0]
    ef6c:	4b1a      	ldr	r3, [pc, #104]	; (efd8 <RADIO_Receive+0xa8>)
    ef6e:	4798      	blx	r3
    ef70:	4b1a      	ldr	r3, [pc, #104]	; (efdc <RADIO_Receive+0xac>)
    ef72:	4798      	blx	r3
    ef74:	2000      	movs	r0, #0
    ef76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ef78:	782b      	ldrb	r3, [r5, #0]
    ef7a:	2000      	movs	r0, #0
    ef7c:	2b01      	cmp	r3, #1
    ef7e:	d0fa      	beq.n	ef76 <RADIO_Receive+0x46>
    ef80:	782b      	ldrb	r3, [r5, #0]
    ef82:	3003      	adds	r0, #3
    ef84:	2b04      	cmp	r3, #4
    ef86:	d1f6      	bne.n	ef76 <RADIO_Receive+0x46>
    ef88:	4c10      	ldr	r4, [pc, #64]	; (efcc <RADIO_Receive+0x9c>)
    ef8a:	4e11      	ldr	r6, [pc, #68]	; (efd0 <RADIO_Receive+0xa0>)
    ef8c:	0023      	movs	r3, r4
    ef8e:	332f      	adds	r3, #47	; 0x2f
    ef90:	7818      	ldrb	r0, [r3, #0]
    ef92:	47b0      	blx	r6
    ef94:	0023      	movs	r3, r4
    ef96:	3334      	adds	r3, #52	; 0x34
    ef98:	781b      	ldrb	r3, [r3, #0]
    ef9a:	2b00      	cmp	r3, #0
    ef9c:	d103      	bne.n	efa6 <RADIO_Receive+0x76>
    ef9e:	0023      	movs	r3, r4
    efa0:	332e      	adds	r3, #46	; 0x2e
    efa2:	7818      	ldrb	r0, [r3, #0]
    efa4:	47b0      	blx	r6
    efa6:	2200      	movs	r2, #0
    efa8:	3434      	adds	r4, #52	; 0x34
    efaa:	7821      	ldrb	r1, [r4, #0]
    efac:	0010      	movs	r0, r2
    efae:	4b0c      	ldr	r3, [pc, #48]	; (efe0 <RADIO_Receive+0xb0>)
    efb0:	4798      	blx	r3
    efb2:	4b0c      	ldr	r3, [pc, #48]	; (efe4 <RADIO_Receive+0xb4>)
    efb4:	4798      	blx	r3
    efb6:	2301      	movs	r3, #1
    efb8:	2008      	movs	r0, #8
    efba:	4c0b      	ldr	r4, [pc, #44]	; (efe8 <RADIO_Receive+0xb8>)
    efbc:	702b      	strb	r3, [r5, #0]
    efbe:	47a0      	blx	r4
    efc0:	2002      	movs	r0, #2
    efc2:	47a0      	blx	r4
    efc4:	e7d6      	b.n	ef74 <RADIO_Receive+0x44>
    efc6:	46c0      	nop			; (mov r8, r8)
    efc8:	20003047 	.word	0x20003047
    efcc:	20002d78 	.word	0x20002d78
    efd0:	0000cf3d 	.word	0x0000cf3d
    efd4:	20001e88 	.word	0x20001e88
    efd8:	0000e581 	.word	0x0000e581
    efdc:	0000ebf1 	.word	0x0000ebf1
    efe0:	0000d261 	.word	0x0000d261
    efe4:	0000ed21 	.word	0x0000ed21
    efe8:	0000e5ad 	.word	0x0000e5ad

0000efec <RADIO_TxHandler>:
    efec:	b5f0      	push	{r4, r5, r6, r7, lr}
    efee:	2500      	movs	r5, #0
    eff0:	b087      	sub	sp, #28
    eff2:	ae03      	add	r6, sp, #12
    eff4:	4f56      	ldr	r7, [pc, #344]	; (f150 <RADIO_TxHandler+0x164>)
    eff6:	7035      	strb	r5, [r6, #0]
    eff8:	47b8      	blx	r7
    effa:	4c56      	ldr	r4, [pc, #344]	; (f154 <RADIO_TxHandler+0x168>)
    effc:	0023      	movs	r3, r4
    effe:	332d      	adds	r3, #45	; 0x2d
    f000:	7818      	ldrb	r0, [r3, #0]
    f002:	4b55      	ldr	r3, [pc, #340]	; (f158 <RADIO_TxHandler+0x16c>)
    f004:	4798      	blx	r3
    f006:	0023      	movs	r3, r4
    f008:	3341      	adds	r3, #65	; 0x41
    f00a:	781b      	ldrb	r3, [r3, #0]
    f00c:	42ab      	cmp	r3, r5
    f00e:	d021      	beq.n	f054 <RADIO_TxHandler+0x68>
    f010:	2214      	movs	r2, #20
    f012:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    f014:	4353      	muls	r3, r2
    f016:	0022      	movs	r2, r4
    f018:	3240      	adds	r2, #64	; 0x40
    f01a:	7013      	strb	r3, [r2, #0]
    f01c:	47b8      	blx	r7
    f01e:	0028      	movs	r0, r5
    f020:	4b4e      	ldr	r3, [pc, #312]	; (f15c <RADIO_TxHandler+0x170>)
    f022:	4798      	blx	r3
    f024:	6820      	ldr	r0, [r4, #0]
    f026:	4b4e      	ldr	r3, [pc, #312]	; (f160 <RADIO_TxHandler+0x174>)
    f028:	4798      	blx	r3
    f02a:	0023      	movs	r3, r4
    f02c:	2201      	movs	r2, #1
    f02e:	334c      	adds	r3, #76	; 0x4c
    f030:	0029      	movs	r1, r5
    f032:	0028      	movs	r0, r5
    f034:	4f4b      	ldr	r7, [pc, #300]	; (f164 <RADIO_TxHandler+0x178>)
    f036:	801d      	strh	r5, [r3, #0]
    f038:	47b8      	blx	r7
    f03a:	2109      	movs	r1, #9
    f03c:	2012      	movs	r0, #18
    f03e:	4b4a      	ldr	r3, [pc, #296]	; (f168 <RADIO_TxHandler+0x17c>)
    f040:	4798      	blx	r3
    f042:	2201      	movs	r2, #1
    f044:	0029      	movs	r1, r5
    f046:	2005      	movs	r0, #5
    f048:	47b8      	blx	r7
    f04a:	0023      	movs	r3, r4
    f04c:	3340      	adds	r3, #64	; 0x40
    f04e:	781b      	ldrb	r3, [r3, #0]
    f050:	42ab      	cmp	r3, r5
    f052:	d846      	bhi.n	f0e2 <RADIO_TxHandler+0xf6>
    f054:	7833      	ldrb	r3, [r6, #0]
    f056:	2b07      	cmp	r3, #7
    f058:	d076      	beq.n	f148 <RADIO_TxHandler+0x15c>
    f05a:	2001      	movs	r0, #1
    f05c:	4b3f      	ldr	r3, [pc, #252]	; (f15c <RADIO_TxHandler+0x170>)
    f05e:	4798      	blx	r3
    f060:	4b42      	ldr	r3, [pc, #264]	; (f16c <RADIO_TxHandler+0x180>)
    f062:	2004      	movs	r0, #4
    f064:	4798      	blx	r3
    f066:	4b42      	ldr	r3, [pc, #264]	; (f170 <RADIO_TxHandler+0x184>)
    f068:	4d3f      	ldr	r5, [pc, #252]	; (f168 <RADIO_TxHandler+0x17c>)
    f06a:	781f      	ldrb	r7, [r3, #0]
    f06c:	4e41      	ldr	r6, [pc, #260]	; (f174 <RADIO_TxHandler+0x188>)
    f06e:	2f01      	cmp	r7, #1
    f070:	d144      	bne.n	f0fc <RADIO_TxHandler+0x110>
    f072:	7831      	ldrb	r1, [r6, #0]
    f074:	2022      	movs	r0, #34	; 0x22
    f076:	47a8      	blx	r5
    f078:	4b3f      	ldr	r3, [pc, #252]	; (f178 <RADIO_TxHandler+0x18c>)
    f07a:	200a      	movs	r0, #10
    f07c:	4798      	blx	r3
    f07e:	21f0      	movs	r1, #240	; 0xf0
    f080:	4008      	ands	r0, r1
    f082:	39e8      	subs	r1, #232	; 0xe8
    f084:	4301      	orrs	r1, r0
    f086:	200a      	movs	r0, #10
    f088:	47a8      	blx	r5
    f08a:	2140      	movs	r1, #64	; 0x40
    f08c:	0008      	movs	r0, r1
    f08e:	47a8      	blx	r5
    f090:	2100      	movs	r1, #0
    f092:	2041      	movs	r0, #65	; 0x41
    f094:	47a8      	blx	r5
    f096:	4b36      	ldr	r3, [pc, #216]	; (f170 <RADIO_TxHandler+0x184>)
    f098:	003a      	movs	r2, r7
    f09a:	7819      	ldrb	r1, [r3, #0]
    f09c:	0038      	movs	r0, r7
    f09e:	4b31      	ldr	r3, [pc, #196]	; (f164 <RADIO_TxHandler+0x178>)
    f0a0:	4798      	blx	r3
    f0a2:	4b36      	ldr	r3, [pc, #216]	; (f17c <RADIO_TxHandler+0x190>)
    f0a4:	7832      	ldrb	r2, [r6, #0]
    f0a6:	6819      	ldr	r1, [r3, #0]
    f0a8:	2000      	movs	r0, #0
    f0aa:	4b35      	ldr	r3, [pc, #212]	; (f180 <RADIO_TxHandler+0x194>)
    f0ac:	4798      	blx	r3
    f0ae:	0023      	movs	r3, r4
    f0b0:	3334      	adds	r3, #52	; 0x34
    f0b2:	7819      	ldrb	r1, [r3, #0]
    f0b4:	2200      	movs	r2, #0
    f0b6:	2003      	movs	r0, #3
    f0b8:	4b2a      	ldr	r3, [pc, #168]	; (f164 <RADIO_TxHandler+0x178>)
    f0ba:	4798      	blx	r3
    f0bc:	4b31      	ldr	r3, [pc, #196]	; (f184 <RADIO_TxHandler+0x198>)
    f0be:	4798      	blx	r3
    f0c0:	4b31      	ldr	r3, [pc, #196]	; (f188 <RADIO_TxHandler+0x19c>)
    f0c2:	6018      	str	r0, [r3, #0]
    f0c4:	6059      	str	r1, [r3, #4]
    f0c6:	68e3      	ldr	r3, [r4, #12]
    f0c8:	2b00      	cmp	r3, #0
    f0ca:	d03d      	beq.n	f148 <RADIO_TxHandler+0x15c>
    f0cc:	21fa      	movs	r1, #250	; 0xfa
    f0ce:	2200      	movs	r2, #0
    f0d0:	342f      	adds	r4, #47	; 0x2f
    f0d2:	0089      	lsls	r1, r1, #2
    f0d4:	4359      	muls	r1, r3
    f0d6:	7820      	ldrb	r0, [r4, #0]
    f0d8:	4b2c      	ldr	r3, [pc, #176]	; (f18c <RADIO_TxHandler+0x1a0>)
    f0da:	9200      	str	r2, [sp, #0]
    f0dc:	4c2c      	ldr	r4, [pc, #176]	; (f190 <RADIO_TxHandler+0x1a4>)
    f0de:	47a0      	blx	r4
    f0e0:	e032      	b.n	f148 <RADIO_TxHandler+0x15c>
    f0e2:	4f2c      	ldr	r7, [pc, #176]	; (f194 <RADIO_TxHandler+0x1a8>)
    f0e4:	4b2c      	ldr	r3, [pc, #176]	; (f198 <RADIO_TxHandler+0x1ac>)
    f0e6:	0038      	movs	r0, r7
    f0e8:	4798      	blx	r3
    f0ea:	233e      	movs	r3, #62	; 0x3e
    f0ec:	5ee2      	ldrsh	r2, [r4, r3]
    f0ee:	2100      	movs	r1, #0
    f0f0:	5e7b      	ldrsh	r3, [r7, r1]
    f0f2:	429a      	cmp	r2, r3
    f0f4:	db14      	blt.n	f120 <RADIO_TxHandler+0x134>
    f0f6:	3501      	adds	r5, #1
    f0f8:	b2ed      	uxtb	r5, r5
    f0fa:	e7a6      	b.n	f04a <RADIO_TxHandler+0x5e>
    f0fc:	2100      	movs	r1, #0
    f0fe:	2040      	movs	r0, #64	; 0x40
    f100:	47a8      	blx	r5
    f102:	2100      	movs	r1, #0
    f104:	2041      	movs	r0, #65	; 0x41
    f106:	47a8      	blx	r5
    f108:	0023      	movs	r3, r4
    f10a:	2000      	movs	r0, #0
    f10c:	3358      	adds	r3, #88	; 0x58
    f10e:	7831      	ldrb	r1, [r6, #0]
    f110:	7018      	strb	r0, [r3, #0]
    f112:	47a8      	blx	r5
    f114:	4b19      	ldr	r3, [pc, #100]	; (f17c <RADIO_TxHandler+0x190>)
    f116:	7831      	ldrb	r1, [r6, #0]
    f118:	6818      	ldr	r0, [r3, #0]
    f11a:	4b20      	ldr	r3, [pc, #128]	; (f19c <RADIO_TxHandler+0x1b0>)
    f11c:	4798      	blx	r3
    f11e:	e7c6      	b.n	f0ae <RADIO_TxHandler+0xc2>
    f120:	2000      	movs	r0, #0
    f122:	4b1f      	ldr	r3, [pc, #124]	; (f1a0 <RADIO_TxHandler+0x1b4>)
    f124:	4798      	blx	r3
    f126:	4b1f      	ldr	r3, [pc, #124]	; (f1a4 <RADIO_TxHandler+0x1b8>)
    f128:	4798      	blx	r3
    f12a:	2307      	movs	r3, #7
    f12c:	2201      	movs	r2, #1
    f12e:	7033      	strb	r3, [r6, #0]
    f130:	4b1d      	ldr	r3, [pc, #116]	; (f1a8 <RADIO_TxHandler+0x1bc>)
    f132:	701a      	strb	r2, [r3, #0]
    f134:	4b1d      	ldr	r3, [pc, #116]	; (f1ac <RADIO_TxHandler+0x1c0>)
    f136:	781b      	ldrb	r3, [r3, #0]
    f138:	079b      	lsls	r3, r3, #30
    f13a:	d58b      	bpl.n	f054 <RADIO_TxHandler+0x68>
    f13c:	6923      	ldr	r3, [r4, #16]
    f13e:	2b00      	cmp	r3, #0
    f140:	d088      	beq.n	f054 <RADIO_TxHandler+0x68>
    f142:	0031      	movs	r1, r6
    f144:	2002      	movs	r0, #2
    f146:	4798      	blx	r3
    f148:	2000      	movs	r0, #0
    f14a:	b007      	add	sp, #28
    f14c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f14e:	46c0      	nop			; (mov r8, r8)
    f150:	0000ebf1 	.word	0x0000ebf1
    f154:	20002d78 	.word	0x20002d78
    f158:	0000cf3d 	.word	0x0000cf3d
    f15c:	0000e835 	.word	0x0000e835
    f160:	0000df79 	.word	0x0000df79
    f164:	0000d261 	.word	0x0000d261
    f168:	0000c039 	.word	0x0000c039
    f16c:	0000dfc1 	.word	0x0000dfc1
    f170:	20002dac 	.word	0x20002dac
    f174:	20001e9c 	.word	0x20001e9c
    f178:	0000c061 	.word	0x0000c061
    f17c:	20001e98 	.word	0x20001e98
    f180:	0000c08d 	.word	0x0000c08d
    f184:	0000cbcd 	.word	0x0000cbcd
    f188:	20001e90 	.word	0x20001e90
    f18c:	0000e89d 	.word	0x0000e89d
    f190:	0000cc25 	.word	0x0000cc25
    f194:	20001e86 	.word	0x20001e86
    f198:	0000d47d 	.word	0x0000d47d
    f19c:	0000e6b1 	.word	0x0000e6b1
    f1a0:	0000e869 	.word	0x0000e869
    f1a4:	0000ed21 	.word	0x0000ed21
    f1a8:	20003047 	.word	0x20003047
    f1ac:	20003046 	.word	0x20003046

0000f1b0 <RADIO_TxDoneHandler>:
    f1b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f1b2:	4b35      	ldr	r3, [pc, #212]	; (f288 <RADIO_TxDoneHandler+0xd8>)
    f1b4:	b087      	sub	sp, #28
    f1b6:	881a      	ldrh	r2, [r3, #0]
    f1b8:	06d2      	lsls	r2, r2, #27
    f1ba:	0fd2      	lsrs	r2, r2, #31
    f1bc:	9200      	str	r2, [sp, #0]
    f1be:	466a      	mov	r2, sp
    f1c0:	7810      	ldrb	r0, [r2, #0]
    f1c2:	881a      	ldrh	r2, [r3, #0]
    f1c4:	2801      	cmp	r0, #1
    f1c6:	d12b      	bne.n	f220 <RADIO_TxDoneHandler+0x70>
    f1c8:	4c30      	ldr	r4, [pc, #192]	; (f28c <RADIO_TxDoneHandler+0xdc>)
    f1ca:	2110      	movs	r1, #16
    f1cc:	0027      	movs	r7, r4
    f1ce:	2500      	movs	r5, #0
    f1d0:	438a      	bics	r2, r1
    f1d2:	801a      	strh	r2, [r3, #0]
    f1d4:	3734      	adds	r7, #52	; 0x34
    f1d6:	0002      	movs	r2, r0
    f1d8:	7839      	ldrb	r1, [r7, #0]
    f1da:	4b2d      	ldr	r3, [pc, #180]	; (f290 <RADIO_TxDoneHandler+0xe0>)
    f1dc:	4798      	blx	r3
    f1de:	68e3      	ldr	r3, [r4, #12]
    f1e0:	ae03      	add	r6, sp, #12
    f1e2:	9304      	str	r3, [sp, #16]
    f1e4:	7035      	strb	r5, [r6, #0]
    f1e6:	002a      	movs	r2, r5
    f1e8:	4b29      	ldr	r3, [pc, #164]	; (f290 <RADIO_TxDoneHandler+0xe0>)
    f1ea:	7839      	ldrb	r1, [r7, #0]
    f1ec:	0028      	movs	r0, r5
    f1ee:	4798      	blx	r3
    f1f0:	466a      	mov	r2, sp
    f1f2:	4b28      	ldr	r3, [pc, #160]	; (f294 <RADIO_TxDoneHandler+0xe4>)
    f1f4:	7812      	ldrb	r2, [r2, #0]
    f1f6:	701a      	strb	r2, [r3, #0]
    f1f8:	0023      	movs	r3, r4
    f1fa:	3358      	adds	r3, #88	; 0x58
    f1fc:	701d      	strb	r5, [r3, #0]
    f1fe:	4b26      	ldr	r3, [pc, #152]	; (f298 <RADIO_TxDoneHandler+0xe8>)
    f200:	781b      	ldrb	r3, [r3, #0]
    f202:	075b      	lsls	r3, r3, #29
    f204:	d505      	bpl.n	f212 <RADIO_TxDoneHandler+0x62>
    f206:	6923      	ldr	r3, [r4, #16]
    f208:	42ab      	cmp	r3, r5
    f20a:	d002      	beq.n	f212 <RADIO_TxDoneHandler+0x62>
    f20c:	0031      	movs	r1, r6
    f20e:	2004      	movs	r0, #4
    f210:	4798      	blx	r3
    f212:	4b22      	ldr	r3, [pc, #136]	; (f29c <RADIO_TxDoneHandler+0xec>)
    f214:	4798      	blx	r3
    f216:	4b22      	ldr	r3, [pc, #136]	; (f2a0 <RADIO_TxDoneHandler+0xf0>)
    f218:	4798      	blx	r3
    f21a:	2000      	movs	r0, #0
    f21c:	b007      	add	sp, #28
    f21e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f220:	07d2      	lsls	r2, r2, #31
    f222:	d402      	bmi.n	f22a <RADIO_TxDoneHandler+0x7a>
    f224:	881a      	ldrh	r2, [r3, #0]
    f226:	0752      	lsls	r2, r2, #29
    f228:	d527      	bpl.n	f27a <RADIO_TxDoneHandler+0xca>
    f22a:	2601      	movs	r6, #1
    f22c:	2104      	movs	r1, #4
    f22e:	881a      	ldrh	r2, [r3, #0]
    f230:	4f16      	ldr	r7, [pc, #88]	; (f28c <RADIO_TxDoneHandler+0xdc>)
    f232:	43b2      	bics	r2, r6
    f234:	801a      	strh	r2, [r3, #0]
    f236:	881a      	ldrh	r2, [r3, #0]
    f238:	2400      	movs	r4, #0
    f23a:	438a      	bics	r2, r1
    f23c:	801a      	strh	r2, [r3, #0]
    f23e:	4b19      	ldr	r3, [pc, #100]	; (f2a4 <RADIO_TxDoneHandler+0xf4>)
    f240:	ad03      	add	r5, sp, #12
    f242:	681b      	ldr	r3, [r3, #0]
    f244:	702c      	strb	r4, [r5, #0]
    f246:	9304      	str	r3, [sp, #16]
    f248:	003b      	movs	r3, r7
    f24a:	3334      	adds	r3, #52	; 0x34
    f24c:	7819      	ldrb	r1, [r3, #0]
    f24e:	0022      	movs	r2, r4
    f250:	0020      	movs	r0, r4
    f252:	4b0f      	ldr	r3, [pc, #60]	; (f290 <RADIO_TxDoneHandler+0xe0>)
    f254:	4798      	blx	r3
    f256:	4b14      	ldr	r3, [pc, #80]	; (f2a8 <RADIO_TxDoneHandler+0xf8>)
    f258:	4798      	blx	r3
    f25a:	4b0e      	ldr	r3, [pc, #56]	; (f294 <RADIO_TxDoneHandler+0xe4>)
    f25c:	701e      	strb	r6, [r3, #0]
    f25e:	003b      	movs	r3, r7
    f260:	3358      	adds	r3, #88	; 0x58
    f262:	701c      	strb	r4, [r3, #0]
    f264:	4b0c      	ldr	r3, [pc, #48]	; (f298 <RADIO_TxDoneHandler+0xe8>)
    f266:	781b      	ldrb	r3, [r3, #0]
    f268:	079b      	lsls	r3, r3, #30
    f26a:	d5d6      	bpl.n	f21a <RADIO_TxDoneHandler+0x6a>
    f26c:	693b      	ldr	r3, [r7, #16]
    f26e:	42a3      	cmp	r3, r4
    f270:	d0d3      	beq.n	f21a <RADIO_TxDoneHandler+0x6a>
    f272:	0029      	movs	r1, r5
    f274:	2002      	movs	r0, #2
    f276:	4798      	blx	r3
    f278:	e7cf      	b.n	f21a <RADIO_TxDoneHandler+0x6a>
    f27a:	881b      	ldrh	r3, [r3, #0]
    f27c:	059b      	lsls	r3, r3, #22
    f27e:	d5cc      	bpl.n	f21a <RADIO_TxDoneHandler+0x6a>
    f280:	4b0a      	ldr	r3, [pc, #40]	; (f2ac <RADIO_TxDoneHandler+0xfc>)
    f282:	4798      	blx	r3
    f284:	e7c9      	b.n	f21a <RADIO_TxDoneHandler+0x6a>
    f286:	46c0      	nop			; (mov r8, r8)
    f288:	20003044 	.word	0x20003044
    f28c:	20002d78 	.word	0x20002d78
    f290:	0000d261 	.word	0x0000d261
    f294:	20003047 	.word	0x20003047
    f298:	20003046 	.word	0x20003046
    f29c:	0000bff9 	.word	0x0000bff9
    f2a0:	0000ed3d 	.word	0x0000ed3d
    f2a4:	20001e90 	.word	0x20001e90
    f2a8:	0000ed21 	.word	0x0000ed21
    f2ac:	00012d15 	.word	0x00012d15

0000f2b0 <RADIO_RxDoneHandler>:
    f2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f2b2:	4b97      	ldr	r3, [pc, #604]	; (f510 <RADIO_RxDoneHandler+0x260>)
    f2b4:	b085      	sub	sp, #20
    f2b6:	881c      	ldrh	r4, [r3, #0]
    f2b8:	881a      	ldrh	r2, [r3, #0]
    f2ba:	06a4      	lsls	r4, r4, #26
    f2bc:	0fe4      	lsrs	r4, r4, #31
    f2be:	b2e0      	uxtb	r0, r4
    f2c0:	2801      	cmp	r0, #1
    f2c2:	d126      	bne.n	f312 <RADIO_RxDoneHandler+0x62>
    f2c4:	4d93      	ldr	r5, [pc, #588]	; (f514 <RADIO_RxDoneHandler+0x264>)
    f2c6:	2120      	movs	r1, #32
    f2c8:	002e      	movs	r6, r5
    f2ca:	438a      	bics	r2, r1
    f2cc:	801a      	strh	r2, [r3, #0]
    f2ce:	3634      	adds	r6, #52	; 0x34
    f2d0:	0002      	movs	r2, r0
    f2d2:	7831      	ldrb	r1, [r6, #0]
    f2d4:	4f90      	ldr	r7, [pc, #576]	; (f518 <RADIO_RxDoneHandler+0x268>)
    f2d6:	47b8      	blx	r7
    f2d8:	2200      	movs	r2, #0
    f2da:	7831      	ldrb	r1, [r6, #0]
    f2dc:	0010      	movs	r0, r2
    f2de:	47b8      	blx	r7
    f2e0:	4b8e      	ldr	r3, [pc, #568]	; (f51c <RADIO_RxDoneHandler+0x26c>)
    f2e2:	4798      	blx	r3
    f2e4:	4b8e      	ldr	r3, [pc, #568]	; (f520 <RADIO_RxDoneHandler+0x270>)
    f2e6:	002a      	movs	r2, r5
    f2e8:	701c      	strb	r4, [r3, #0]
    f2ea:	2300      	movs	r3, #0
    f2ec:	322c      	adds	r2, #44	; 0x2c
    f2ee:	7013      	strb	r3, [r2, #0]
    f2f0:	002a      	movs	r2, r5
    f2f2:	a901      	add	r1, sp, #4
    f2f4:	3258      	adds	r2, #88	; 0x58
    f2f6:	7013      	strb	r3, [r2, #0]
    f2f8:	700b      	strb	r3, [r1, #0]
    f2fa:	4b8a      	ldr	r3, [pc, #552]	; (f524 <RADIO_RxDoneHandler+0x274>)
    f2fc:	781b      	ldrb	r3, [r3, #0]
    f2fe:	071b      	lsls	r3, r3, #28
    f300:	d504      	bpl.n	f30c <RADIO_RxDoneHandler+0x5c>
    f302:	692b      	ldr	r3, [r5, #16]
    f304:	2008      	movs	r0, #8
    f306:	2b00      	cmp	r3, #0
    f308:	d000      	beq.n	f30c <RADIO_RxDoneHandler+0x5c>
    f30a:	e084      	b.n	f416 <RADIO_RxDoneHandler+0x166>
    f30c:	2000      	movs	r0, #0
    f30e:	b005      	add	sp, #20
    f310:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f312:	0652      	lsls	r2, r2, #25
    f314:	d402      	bmi.n	f31c <RADIO_RxDoneHandler+0x6c>
    f316:	881a      	ldrh	r2, [r3, #0]
    f318:	0612      	lsls	r2, r2, #24
    f31a:	d523      	bpl.n	f364 <RADIO_RxDoneHandler+0xb4>
    f31c:	2140      	movs	r1, #64	; 0x40
    f31e:	881a      	ldrh	r2, [r3, #0]
    f320:	4c7c      	ldr	r4, [pc, #496]	; (f514 <RADIO_RxDoneHandler+0x264>)
    f322:	438a      	bics	r2, r1
    f324:	801a      	strh	r2, [r3, #0]
    f326:	881a      	ldrh	r2, [r3, #0]
    f328:	1849      	adds	r1, r1, r1
    f32a:	438a      	bics	r2, r1
    f32c:	801a      	strh	r2, [r3, #0]
    f32e:	0023      	movs	r3, r4
    f330:	2200      	movs	r2, #0
    f332:	3334      	adds	r3, #52	; 0x34
    f334:	7819      	ldrb	r1, [r3, #0]
    f336:	0010      	movs	r0, r2
    f338:	4b77      	ldr	r3, [pc, #476]	; (f518 <RADIO_RxDoneHandler+0x268>)
    f33a:	4798      	blx	r3
    f33c:	4b77      	ldr	r3, [pc, #476]	; (f51c <RADIO_RxDoneHandler+0x26c>)
    f33e:	4798      	blx	r3
    f340:	2201      	movs	r2, #1
    f342:	4b77      	ldr	r3, [pc, #476]	; (f520 <RADIO_RxDoneHandler+0x270>)
    f344:	a901      	add	r1, sp, #4
    f346:	701a      	strb	r2, [r3, #0]
    f348:	0022      	movs	r2, r4
    f34a:	2300      	movs	r3, #0
    f34c:	322c      	adds	r2, #44	; 0x2c
    f34e:	7013      	strb	r3, [r2, #0]
    f350:	0022      	movs	r2, r4
    f352:	3258      	adds	r2, #88	; 0x58
    f354:	7013      	strb	r3, [r2, #0]
    f356:	700b      	strb	r3, [r1, #0]
    f358:	4b72      	ldr	r3, [pc, #456]	; (f524 <RADIO_RxDoneHandler+0x274>)
    f35a:	781b      	ldrb	r3, [r3, #0]
    f35c:	071b      	lsls	r3, r3, #28
    f35e:	d5d5      	bpl.n	f30c <RADIO_RxDoneHandler+0x5c>
    f360:	6923      	ldr	r3, [r4, #16]
    f362:	e7cf      	b.n	f304 <RADIO_RxDoneHandler+0x54>
    f364:	881a      	ldrh	r2, [r3, #0]
    f366:	0792      	lsls	r2, r2, #30
    f368:	d571      	bpl.n	f44e <RADIO_RxDoneHandler+0x19e>
    f36a:	2102      	movs	r1, #2
    f36c:	881a      	ldrh	r2, [r3, #0]
    f36e:	4d6e      	ldr	r5, [pc, #440]	; (f528 <RADIO_RxDoneHandler+0x278>)
    f370:	438a      	bics	r2, r1
    f372:	801a      	strh	r2, [r3, #0]
    f374:	2013      	movs	r0, #19
    f376:	47a8      	blx	r5
    f378:	4c66      	ldr	r4, [pc, #408]	; (f514 <RADIO_RxDoneHandler+0x264>)
    f37a:	2100      	movs	r1, #0
    f37c:	0026      	movs	r6, r4
    f37e:	362c      	adds	r6, #44	; 0x2c
    f380:	7030      	strb	r0, [r6, #0]
    f382:	4b6a      	ldr	r3, [pc, #424]	; (f52c <RADIO_RxDoneHandler+0x27c>)
    f384:	200d      	movs	r0, #13
    f386:	4798      	blx	r3
    f388:	7832      	ldrb	r2, [r6, #0]
    f38a:	4b69      	ldr	r3, [pc, #420]	; (f530 <RADIO_RxDoneHandler+0x280>)
    f38c:	b2d2      	uxtb	r2, r2
    f38e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    f390:	2000      	movs	r0, #0
    f392:	4798      	blx	r3
    f394:	2019      	movs	r0, #25
    f396:	47a8      	blx	r5
    f398:	0023      	movs	r3, r4
    f39a:	b240      	sxtb	r0, r0
    f39c:	3332      	adds	r3, #50	; 0x32
    f39e:	2800      	cmp	r0, #0
    f3a0:	da3b      	bge.n	f41a <RADIO_RxDoneHandler+0x16a>
    f3a2:	4240      	negs	r0, r0
    f3a4:	1080      	asrs	r0, r0, #2
    f3a6:	4240      	negs	r0, r0
    f3a8:	7018      	strb	r0, [r3, #0]
    f3aa:	201a      	movs	r0, #26
    f3ac:	47a8      	blx	r5
    f3ae:	0023      	movs	r3, r4
    f3b0:	3332      	adds	r3, #50	; 0x32
    f3b2:	781b      	ldrb	r3, [r3, #0]
    f3b4:	b202      	sxth	r2, r0
    f3b6:	b25b      	sxtb	r3, r3
    f3b8:	4d5e      	ldr	r5, [pc, #376]	; (f534 <RADIO_RxDoneHandler+0x284>)
    f3ba:	2b00      	cmp	r3, #0
    f3bc:	da36      	bge.n	f42c <RADIO_RxDoneHandler+0x17c>
    f3be:	6821      	ldr	r1, [r4, #0]
    f3c0:	4e5d      	ldr	r6, [pc, #372]	; (f538 <RADIO_RxDoneHandler+0x288>)
    f3c2:	198e      	adds	r6, r1, r6
    f3c4:	42ae      	cmp	r6, r5
    f3c6:	d82a      	bhi.n	f41e <RADIO_RxDoneHandler+0x16e>
    f3c8:	3b9d      	subs	r3, #157	; 0x9d
    f3ca:	181b      	adds	r3, r3, r0
    f3cc:	1112      	asrs	r2, r2, #4
    f3ce:	189b      	adds	r3, r3, r2
    f3d0:	0022      	movs	r2, r4
    f3d2:	3256      	adds	r2, #86	; 0x56
    f3d4:	8013      	strh	r3, [r2, #0]
    f3d6:	0023      	movs	r3, r4
    f3d8:	2200      	movs	r2, #0
    f3da:	3334      	adds	r3, #52	; 0x34
    f3dc:	7819      	ldrb	r1, [r3, #0]
    f3de:	0010      	movs	r0, r2
    f3e0:	4b4d      	ldr	r3, [pc, #308]	; (f518 <RADIO_RxDoneHandler+0x268>)
    f3e2:	4798      	blx	r3
    f3e4:	4b4d      	ldr	r3, [pc, #308]	; (f51c <RADIO_RxDoneHandler+0x26c>)
    f3e6:	4798      	blx	r3
    f3e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    f3ea:	a901      	add	r1, sp, #4
    f3ec:	604b      	str	r3, [r1, #4]
    f3ee:	0023      	movs	r3, r4
    f3f0:	332c      	adds	r3, #44	; 0x2c
    f3f2:	781b      	ldrb	r3, [r3, #0]
    f3f4:	2201      	movs	r2, #1
    f3f6:	720b      	strb	r3, [r1, #8]
    f3f8:	2300      	movs	r3, #0
    f3fa:	700b      	strb	r3, [r1, #0]
    f3fc:	4b48      	ldr	r3, [pc, #288]	; (f520 <RADIO_RxDoneHandler+0x270>)
    f3fe:	701a      	strb	r2, [r3, #0]
    f400:	4b48      	ldr	r3, [pc, #288]	; (f524 <RADIO_RxDoneHandler+0x274>)
    f402:	7818      	ldrb	r0, [r3, #0]
    f404:	07c0      	lsls	r0, r0, #31
    f406:	0fc0      	lsrs	r0, r0, #31
    f408:	4290      	cmp	r0, r2
    f40a:	d000      	beq.n	f40e <RADIO_RxDoneHandler+0x15e>
    f40c:	e77e      	b.n	f30c <RADIO_RxDoneHandler+0x5c>
    f40e:	6923      	ldr	r3, [r4, #16]
    f410:	2b00      	cmp	r3, #0
    f412:	d100      	bne.n	f416 <RADIO_RxDoneHandler+0x166>
    f414:	e77a      	b.n	f30c <RADIO_RxDoneHandler+0x5c>
    f416:	4798      	blx	r3
    f418:	e778      	b.n	f30c <RADIO_RxDoneHandler+0x5c>
    f41a:	1080      	asrs	r0, r0, #2
    f41c:	e7c4      	b.n	f3a8 <RADIO_RxDoneHandler+0xf8>
    f41e:	4d47      	ldr	r5, [pc, #284]	; (f53c <RADIO_RxDoneHandler+0x28c>)
    f420:	1949      	adds	r1, r1, r5
    f422:	4d47      	ldr	r5, [pc, #284]	; (f540 <RADIO_RxDoneHandler+0x290>)
    f424:	42a9      	cmp	r1, r5
    f426:	d8d6      	bhi.n	f3d6 <RADIO_RxDoneHandler+0x126>
    f428:	3ba4      	subs	r3, #164	; 0xa4
    f42a:	e7ce      	b.n	f3ca <RADIO_RxDoneHandler+0x11a>
    f42c:	6823      	ldr	r3, [r4, #0]
    f42e:	4942      	ldr	r1, [pc, #264]	; (f538 <RADIO_RxDoneHandler+0x288>)
    f430:	1859      	adds	r1, r3, r1
    f432:	42a9      	cmp	r1, r5
    f434:	d802      	bhi.n	f43c <RADIO_RxDoneHandler+0x18c>
    f436:	0003      	movs	r3, r0
    f438:	3b9d      	subs	r3, #157	; 0x9d
    f43a:	e7c7      	b.n	f3cc <RADIO_RxDoneHandler+0x11c>
    f43c:	493f      	ldr	r1, [pc, #252]	; (f53c <RADIO_RxDoneHandler+0x28c>)
    f43e:	185b      	adds	r3, r3, r1
    f440:	493f      	ldr	r1, [pc, #252]	; (f540 <RADIO_RxDoneHandler+0x290>)
    f442:	428b      	cmp	r3, r1
    f444:	d8c7      	bhi.n	f3d6 <RADIO_RxDoneHandler+0x126>
    f446:	38a4      	subs	r0, #164	; 0xa4
    f448:	1113      	asrs	r3, r2, #4
    f44a:	18c3      	adds	r3, r0, r3
    f44c:	e7c0      	b.n	f3d0 <RADIO_RxDoneHandler+0x120>
    f44e:	881a      	ldrh	r2, [r3, #0]
    f450:	0712      	lsls	r2, r2, #28
    f452:	0fd5      	lsrs	r5, r2, #31
    f454:	2a00      	cmp	r2, #0
    f456:	da27      	bge.n	f4a8 <RADIO_RxDoneHandler+0x1f8>
    f458:	2108      	movs	r1, #8
    f45a:	881a      	ldrh	r2, [r3, #0]
    f45c:	4c2d      	ldr	r4, [pc, #180]	; (f514 <RADIO_RxDoneHandler+0x264>)
    f45e:	438a      	bics	r2, r1
    f460:	801a      	strh	r2, [r3, #0]
    f462:	0023      	movs	r3, r4
    f464:	2280      	movs	r2, #128	; 0x80
    f466:	3332      	adds	r3, #50	; 0x32
    f468:	701a      	strb	r2, [r3, #0]
    f46a:	0023      	movs	r3, r4
    f46c:	2200      	movs	r2, #0
    f46e:	3334      	adds	r3, #52	; 0x34
    f470:	7819      	ldrb	r1, [r3, #0]
    f472:	0010      	movs	r0, r2
    f474:	4b28      	ldr	r3, [pc, #160]	; (f518 <RADIO_RxDoneHandler+0x268>)
    f476:	4798      	blx	r3
    f478:	4b28      	ldr	r3, [pc, #160]	; (f51c <RADIO_RxDoneHandler+0x26c>)
    f47a:	4798      	blx	r3
    f47c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    f47e:	a901      	add	r1, sp, #4
    f480:	604b      	str	r3, [r1, #4]
    f482:	0023      	movs	r3, r4
    f484:	332c      	adds	r3, #44	; 0x2c
    f486:	781b      	ldrb	r3, [r3, #0]
    f488:	0022      	movs	r2, r4
    f48a:	720b      	strb	r3, [r1, #8]
    f48c:	2300      	movs	r3, #0
    f48e:	3258      	adds	r2, #88	; 0x58
    f490:	7013      	strb	r3, [r2, #0]
    f492:	700b      	strb	r3, [r1, #0]
    f494:	4b22      	ldr	r3, [pc, #136]	; (f520 <RADIO_RxDoneHandler+0x270>)
    f496:	701d      	strb	r5, [r3, #0]
    f498:	4b22      	ldr	r3, [pc, #136]	; (f524 <RADIO_RxDoneHandler+0x274>)
    f49a:	7818      	ldrb	r0, [r3, #0]
    f49c:	07c0      	lsls	r0, r0, #31
    f49e:	0fc0      	lsrs	r0, r0, #31
    f4a0:	2801      	cmp	r0, #1
    f4a2:	d000      	beq.n	f4a6 <RADIO_RxDoneHandler+0x1f6>
    f4a4:	e732      	b.n	f30c <RADIO_RxDoneHandler+0x5c>
    f4a6:	e7b2      	b.n	f40e <RADIO_RxDoneHandler+0x15e>
    f4a8:	881a      	ldrh	r2, [r3, #0]
    f4aa:	05d2      	lsls	r2, r2, #23
    f4ac:	0fd5      	lsrs	r5, r2, #31
    f4ae:	2a00      	cmp	r2, #0
    f4b0:	db00      	blt.n	f4b4 <RADIO_RxDoneHandler+0x204>
    f4b2:	e72b      	b.n	f30c <RADIO_RxDoneHandler+0x5c>
    f4b4:	4c17      	ldr	r4, [pc, #92]	; (f514 <RADIO_RxDoneHandler+0x264>)
    f4b6:	881a      	ldrh	r2, [r3, #0]
    f4b8:	0026      	movs	r6, r4
    f4ba:	4922      	ldr	r1, [pc, #136]	; (f544 <RADIO_RxDoneHandler+0x294>)
    f4bc:	362c      	adds	r6, #44	; 0x2c
    f4be:	400a      	ands	r2, r1
    f4c0:	801a      	strh	r2, [r3, #0]
    f4c2:	7832      	ldrb	r2, [r6, #0]
    f4c4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    f4c6:	b2d2      	uxtb	r2, r2
    f4c8:	2000      	movs	r0, #0
    f4ca:	4b19      	ldr	r3, [pc, #100]	; (f530 <RADIO_RxDoneHandler+0x280>)
    f4cc:	4798      	blx	r3
    f4ce:	0023      	movs	r3, r4
    f4d0:	2200      	movs	r2, #0
    f4d2:	3334      	adds	r3, #52	; 0x34
    f4d4:	7819      	ldrb	r1, [r3, #0]
    f4d6:	0010      	movs	r0, r2
    f4d8:	4b0f      	ldr	r3, [pc, #60]	; (f518 <RADIO_RxDoneHandler+0x268>)
    f4da:	4798      	blx	r3
    f4dc:	4b0f      	ldr	r3, [pc, #60]	; (f51c <RADIO_RxDoneHandler+0x26c>)
    f4de:	4798      	blx	r3
    f4e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    f4e2:	a901      	add	r1, sp, #4
    f4e4:	604b      	str	r3, [r1, #4]
    f4e6:	7833      	ldrb	r3, [r6, #0]
    f4e8:	0022      	movs	r2, r4
    f4ea:	720b      	strb	r3, [r1, #8]
    f4ec:	2300      	movs	r3, #0
    f4ee:	3258      	adds	r2, #88	; 0x58
    f4f0:	7013      	strb	r3, [r2, #0]
    f4f2:	700b      	strb	r3, [r1, #0]
    f4f4:	4b0a      	ldr	r3, [pc, #40]	; (f520 <RADIO_RxDoneHandler+0x270>)
    f4f6:	701d      	strb	r5, [r3, #0]
    f4f8:	4b0a      	ldr	r3, [pc, #40]	; (f524 <RADIO_RxDoneHandler+0x274>)
    f4fa:	781b      	ldrb	r3, [r3, #0]
    f4fc:	06db      	lsls	r3, r3, #27
    f4fe:	d400      	bmi.n	f502 <RADIO_RxDoneHandler+0x252>
    f500:	e704      	b.n	f30c <RADIO_RxDoneHandler+0x5c>
    f502:	6923      	ldr	r3, [r4, #16]
    f504:	2b00      	cmp	r3, #0
    f506:	d100      	bne.n	f50a <RADIO_RxDoneHandler+0x25a>
    f508:	e700      	b.n	f30c <RADIO_RxDoneHandler+0x5c>
    f50a:	2010      	movs	r0, #16
    f50c:	e783      	b.n	f416 <RADIO_RxDoneHandler+0x166>
    f50e:	46c0      	nop			; (mov r8, r8)
    f510:	20003044 	.word	0x20003044
    f514:	20002d78 	.word	0x20002d78
    f518:	0000d261 	.word	0x0000d261
    f51c:	0000ed21 	.word	0x0000ed21
    f520:	20003047 	.word	0x20003047
    f524:	20003046 	.word	0x20003046
    f528:	0000c061 	.word	0x0000c061
    f52c:	0000c039 	.word	0x0000c039
    f530:	0000c0cd 	.word	0x0000c0cd
    f534:	096ae380 	.word	0x096ae380
    f538:	cc9eec80 	.word	0xcc9eec80
    f53c:	e78fe580 	.word	0xe78fe580
    f540:	06dac2c0 	.word	0x06dac2c0
    f544:	fffffeff 	.word	0xfffffeff

0000f548 <MacClearCommands>:
    f548:	490e      	ldr	r1, [pc, #56]	; (f584 <MacClearCommands+0x3c>)
    f54a:	b570      	push	{r4, r5, r6, lr}
    f54c:	000b      	movs	r3, r1
    f54e:	33e0      	adds	r3, #224	; 0xe0
    f550:	7818      	ldrb	r0, [r3, #0]
    f552:	2303      	movs	r3, #3
    f554:	25a4      	movs	r5, #164	; 0xa4
    f556:	4343      	muls	r3, r0
    f558:	2401      	movs	r4, #1
    f55a:	20ff      	movs	r0, #255	; 0xff
    f55c:	3399      	adds	r3, #153	; 0x99
    f55e:	4a0a      	ldr	r2, [pc, #40]	; (f588 <MacClearCommands+0x40>)
    f560:	185b      	adds	r3, r3, r1
    f562:	00ed      	lsls	r5, r5, #3
    f564:	429a      	cmp	r2, r3
    f566:	d100      	bne.n	f56a <MacClearCommands+0x22>
    f568:	bd70      	pop	{r4, r5, r6, pc}
    f56a:	7811      	ldrb	r1, [r2, #0]
    f56c:	29ff      	cmp	r1, #255	; 0xff
    f56e:	d006      	beq.n	f57e <MacClearCommands+0x36>
    f570:	290a      	cmp	r1, #10
    f572:	d803      	bhi.n	f57c <MacClearCommands+0x34>
    f574:	0026      	movs	r6, r4
    f576:	408e      	lsls	r6, r1
    f578:	422e      	tst	r6, r5
    f57a:	d100      	bne.n	f57e <MacClearCommands+0x36>
    f57c:	7010      	strb	r0, [r2, #0]
    f57e:	3203      	adds	r2, #3
    f580:	e7f0      	b.n	f564 <MacClearCommands+0x1c>
    f582:	46c0      	nop			; (mov r8, r8)
    f584:	20003170 	.word	0x20003170
    f588:	20003209 	.word	0x20003209

0000f58c <CountfOptsLength>:
    f58c:	2200      	movs	r2, #0
    f58e:	490d      	ldr	r1, [pc, #52]	; (f5c4 <CountfOptsLength+0x38>)
    f590:	b570      	push	{r4, r5, r6, lr}
    f592:	000b      	movs	r3, r1
    f594:	0010      	movs	r0, r2
    f596:	2503      	movs	r5, #3
    f598:	33e0      	adds	r3, #224	; 0xe0
    f59a:	781c      	ldrb	r4, [r3, #0]
    f59c:	4e0a      	ldr	r6, [pc, #40]	; (f5c8 <CountfOptsLength+0x3c>)
    f59e:	b2d3      	uxtb	r3, r2
    f5a0:	429c      	cmp	r4, r3
    f5a2:	d800      	bhi.n	f5a6 <CountfOptsLength+0x1a>
    f5a4:	bd70      	pop	{r4, r5, r6, pc}
    f5a6:	002b      	movs	r3, r5
    f5a8:	4353      	muls	r3, r2
    f5aa:	3399      	adds	r3, #153	; 0x99
    f5ac:	5ccb      	ldrb	r3, [r1, r3]
    f5ae:	2bff      	cmp	r3, #255	; 0xff
    f5b0:	d006      	beq.n	f5c0 <CountfOptsLength+0x34>
    f5b2:	18f3      	adds	r3, r6, r3
    f5b4:	3b02      	subs	r3, #2
    f5b6:	781b      	ldrb	r3, [r3, #0]
    f5b8:	18c3      	adds	r3, r0, r3
    f5ba:	2b0f      	cmp	r3, #15
    f5bc:	dcf2      	bgt.n	f5a4 <CountfOptsLength+0x18>
    f5be:	b2d8      	uxtb	r0, r3
    f5c0:	3201      	adds	r2, #1
    f5c2:	e7ec      	b.n	f59e <CountfOptsLength+0x12>
    f5c4:	20003170 	.word	0x20003170
    f5c8:	000182fb 	.word	0x000182fb

0000f5cc <LorawanGetMaxPayloadSize>:
    f5cc:	b513      	push	{r0, r1, r4, lr}
    f5ce:	466b      	mov	r3, sp
    f5d0:	1ddc      	adds	r4, r3, #7
    f5d2:	2300      	movs	r3, #0
    f5d4:	0022      	movs	r2, r4
    f5d6:	7023      	strb	r3, [r4, #0]
    f5d8:	4903      	ldr	r1, [pc, #12]	; (f5e8 <LorawanGetMaxPayloadSize+0x1c>)
    f5da:	4b04      	ldr	r3, [pc, #16]	; (f5ec <LorawanGetMaxPayloadSize+0x20>)
    f5dc:	2005      	movs	r0, #5
    f5de:	4798      	blx	r3
    f5e0:	7820      	ldrb	r0, [r4, #0]
    f5e2:	3808      	subs	r0, #8
    f5e4:	b2c0      	uxtb	r0, r0
    f5e6:	bd16      	pop	{r1, r2, r4, pc}
    f5e8:	20003257 	.word	0x20003257
    f5ec:	0000c6dd 	.word	0x0000c6dd

0000f5f0 <UpdateReceiveDelays>:
    f5f0:	23fa      	movs	r3, #250	; 0xfa
    f5f2:	b570      	push	{r4, r5, r6, lr}
    f5f4:	009b      	lsls	r3, r3, #2
    f5f6:	4c0b      	ldr	r4, [pc, #44]	; (f624 <UpdateReceiveDelays+0x34>)
    f5f8:	2800      	cmp	r0, #0
    f5fa:	d000      	beq.n	f5fe <UpdateReceiveDelays+0xe>
    f5fc:	4343      	muls	r3, r0
    f5fe:	0022      	movs	r2, r4
    f600:	4d09      	ldr	r5, [pc, #36]	; (f628 <UpdateReceiveDelays+0x38>)
    f602:	32d0      	adds	r2, #208	; 0xd0
    f604:	210c      	movs	r1, #12
    f606:	2000      	movs	r0, #0
    f608:	8013      	strh	r3, [r2, #0]
    f60a:	47a8      	blx	r5
    f60c:	0023      	movs	r3, r4
    f60e:	22fa      	movs	r2, #250	; 0xfa
    f610:	33d0      	adds	r3, #208	; 0xd0
    f612:	881b      	ldrh	r3, [r3, #0]
    f614:	0092      	lsls	r2, r2, #2
    f616:	189b      	adds	r3, r3, r2
    f618:	34d2      	adds	r4, #210	; 0xd2
    f61a:	210d      	movs	r1, #13
    f61c:	2000      	movs	r0, #0
    f61e:	8023      	strh	r3, [r4, #0]
    f620:	47a8      	blx	r5
    f622:	bd70      	pop	{r4, r5, r6, pc}
    f624:	20003170 	.word	0x20003170
    f628:	00008d81 	.word	0x00008d81

0000f62c <IncludeMacCommandsResponse>:
    f62c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f62e:	0005      	movs	r5, r0
    f630:	2600      	movs	r6, #0
    f632:	b087      	sub	sp, #28
    f634:	880c      	ldrh	r4, [r1, #0]
    f636:	9101      	str	r1, [sp, #4]
    f638:	9203      	str	r2, [sp, #12]
    f63a:	4f77      	ldr	r7, [pc, #476]	; (f818 <IncludeMacCommandsResponse+0x1ec>)
    f63c:	003b      	movs	r3, r7
    f63e:	33e0      	adds	r3, #224	; 0xe0
    f640:	781b      	ldrb	r3, [r3, #0]
    f642:	42b3      	cmp	r3, r6
    f644:	d913      	bls.n	f66e <IncludeMacCommandsResponse+0x42>
    f646:	9b03      	ldr	r3, [sp, #12]
    f648:	2b00      	cmp	r3, #0
    f64a:	d019      	beq.n	f680 <IncludeMacCommandsResponse+0x54>
    f64c:	2303      	movs	r3, #3
    f64e:	4373      	muls	r3, r6
    f650:	18fb      	adds	r3, r7, r3
    f652:	3399      	adds	r3, #153	; 0x99
    f654:	7819      	ldrb	r1, [r3, #0]
    f656:	29ff      	cmp	r1, #255	; 0xff
    f658:	d012      	beq.n	f680 <IncludeMacCommandsResponse+0x54>
    f65a:	9b01      	ldr	r3, [sp, #4]
    f65c:	881a      	ldrh	r2, [r3, #0]
    f65e:	4b6f      	ldr	r3, [pc, #444]	; (f81c <IncludeMacCommandsResponse+0x1f0>)
    f660:	1aa2      	subs	r2, r4, r2
    f662:	185b      	adds	r3, r3, r1
    f664:	3b02      	subs	r3, #2
    f666:	781b      	ldrb	r3, [r3, #0]
    f668:	18d3      	adds	r3, r2, r3
    f66a:	2b0f      	cmp	r3, #15
    f66c:	dd08      	ble.n	f680 <IncludeMacCommandsResponse+0x54>
    f66e:	2207      	movs	r2, #7
    f670:	2100      	movs	r1, #0
    f672:	4b6b      	ldr	r3, [pc, #428]	; (f820 <IncludeMacCommandsResponse+0x1f4>)
    f674:	486b      	ldr	r0, [pc, #428]	; (f824 <IncludeMacCommandsResponse+0x1f8>)
    f676:	4798      	blx	r3
    f678:	9b01      	ldr	r3, [sp, #4]
    f67a:	801c      	strh	r4, [r3, #0]
    f67c:	b007      	add	sp, #28
    f67e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f680:	2303      	movs	r3, #3
    f682:	4373      	muls	r3, r6
    f684:	18fb      	adds	r3, r7, r3
    f686:	3399      	adds	r3, #153	; 0x99
    f688:	781b      	ldrb	r3, [r3, #0]
    f68a:	1e98      	subs	r0, r3, #2
    f68c:	280b      	cmp	r0, #11
    f68e:	d862      	bhi.n	f756 <IncludeMacCommandsResponse+0x12a>
    f690:	f003 fc42 	bl	12f18 <__gnu_thumb1_case_uqi>
    f694:	27a20698 	.word	0x27a20698
    f698:	7da26748 	.word	0x7da26748
    f69c:	a6616182 	.word	0xa6616182
    f6a0:	2303      	movs	r3, #3
    f6a2:	2200      	movs	r2, #0
    f6a4:	552b      	strb	r3, [r5, r4]
    f6a6:	1c63      	adds	r3, r4, #1
    f6a8:	b29b      	uxth	r3, r3
    f6aa:	18eb      	adds	r3, r5, r3
    f6ac:	4f5a      	ldr	r7, [pc, #360]	; (f818 <IncludeMacCommandsResponse+0x1ec>)
    f6ae:	485e      	ldr	r0, [pc, #376]	; (f828 <IncludeMacCommandsResponse+0x1fc>)
    f6b0:	701a      	strb	r2, [r3, #0]
    f6b2:	5c39      	ldrb	r1, [r7, r0]
    f6b4:	3201      	adds	r2, #1
    f6b6:	4011      	ands	r1, r2
    f6b8:	466a      	mov	r2, sp
    f6ba:	9102      	str	r1, [sp, #8]
    f6bc:	7a12      	ldrb	r2, [r2, #8]
    f6be:	701a      	strb	r2, [r3, #0]
    f6c0:	5c3a      	ldrb	r2, [r7, r0]
    f6c2:	4694      	mov	ip, r2
    f6c4:	2202      	movs	r2, #2
    f6c6:	4661      	mov	r1, ip
    f6c8:	4211      	tst	r1, r2
    f6ca:	d002      	beq.n	f6d2 <IncludeMacCommandsResponse+0xa6>
    f6cc:	9902      	ldr	r1, [sp, #8]
    f6ce:	430a      	orrs	r2, r1
    f6d0:	701a      	strb	r2, [r3, #0]
    f6d2:	2204      	movs	r2, #4
    f6d4:	5c39      	ldrb	r1, [r7, r0]
    f6d6:	4211      	tst	r1, r2
    f6d8:	d071      	beq.n	f7be <IncludeMacCommandsResponse+0x192>
    f6da:	7819      	ldrb	r1, [r3, #0]
    f6dc:	430a      	orrs	r2, r1
    f6de:	701a      	strb	r2, [r3, #0]
    f6e0:	e06d      	b.n	f7be <IncludeMacCommandsResponse+0x192>
    f6e2:	2305      	movs	r3, #5
    f6e4:	2103      	movs	r1, #3
    f6e6:	2200      	movs	r2, #0
    f6e8:	552b      	strb	r3, [r5, r4]
    f6ea:	1c63      	adds	r3, r4, #1
    f6ec:	b29b      	uxth	r3, r3
    f6ee:	4371      	muls	r1, r6
    f6f0:	18eb      	adds	r3, r5, r3
    f6f2:	701a      	strb	r2, [r3, #0]
    f6f4:	4a48      	ldr	r2, [pc, #288]	; (f818 <IncludeMacCommandsResponse+0x1ec>)
    f6f6:	1851      	adds	r1, r2, r1
    f6f8:	3198      	adds	r1, #152	; 0x98
    f6fa:	7888      	ldrb	r0, [r1, #2]
    f6fc:	0700      	lsls	r0, r0, #28
    f6fe:	0fc0      	lsrs	r0, r0, #31
    f700:	7018      	strb	r0, [r3, #0]
    f702:	7889      	ldrb	r1, [r1, #2]
    f704:	b2c7      	uxtb	r7, r0
    f706:	06c9      	lsls	r1, r1, #27
    f708:	d502      	bpl.n	f710 <IncludeMacCommandsResponse+0xe4>
    f70a:	2102      	movs	r1, #2
    f70c:	4339      	orrs	r1, r7
    f70e:	7019      	strb	r1, [r3, #0]
    f710:	2103      	movs	r1, #3
    f712:	4371      	muls	r1, r6
    f714:	1852      	adds	r2, r2, r1
    f716:	3298      	adds	r2, #152	; 0x98
    f718:	7892      	ldrb	r2, [r2, #2]
    f71a:	0692      	lsls	r2, r2, #26
    f71c:	d54f      	bpl.n	f7be <IncludeMacCommandsResponse+0x192>
    f71e:	7819      	ldrb	r1, [r3, #0]
    f720:	2204      	movs	r2, #4
    f722:	e7db      	b.n	f6dc <IncludeMacCommandsResponse+0xb0>
    f724:	a904      	add	r1, sp, #16
    f726:	4b41      	ldr	r3, [pc, #260]	; (f82c <IncludeMacCommandsResponse+0x200>)
    f728:	200e      	movs	r0, #14
    f72a:	4798      	blx	r3
    f72c:	2306      	movs	r3, #6
    f72e:	4a3a      	ldr	r2, [pc, #232]	; (f818 <IncludeMacCommandsResponse+0x1ec>)
    f730:	552b      	strb	r3, [r5, r4]
    f732:	32e8      	adds	r2, #232	; 0xe8
    f734:	7811      	ldrb	r1, [r2, #0]
    f736:	1c62      	adds	r2, r4, #1
    f738:	b292      	uxth	r2, r2
    f73a:	54a9      	strb	r1, [r5, r2]
    f73c:	aa04      	add	r2, sp, #16
    f73e:	7812      	ldrb	r2, [r2, #0]
    f740:	1ca3      	adds	r3, r4, #2
    f742:	0011      	movs	r1, r2
    f744:	3120      	adds	r1, #32
    f746:	3403      	adds	r4, #3
    f748:	b2c9      	uxtb	r1, r1
    f74a:	b29b      	uxth	r3, r3
    f74c:	b2a4      	uxth	r4, r4
    f74e:	293f      	cmp	r1, #63	; 0x3f
    f750:	d904      	bls.n	f75c <IncludeMacCommandsResponse+0x130>
    f752:	2220      	movs	r2, #32
    f754:	54ea      	strb	r2, [r5, r3]
    f756:	3601      	adds	r6, #1
    f758:	b2f6      	uxtb	r6, r6
    f75a:	e76e      	b.n	f63a <IncludeMacCommandsResponse+0xe>
    f75c:	213f      	movs	r1, #63	; 0x3f
    f75e:	400a      	ands	r2, r1
    f760:	e7f8      	b.n	f754 <IncludeMacCommandsResponse+0x128>
    f762:	2307      	movs	r3, #7
    f764:	2103      	movs	r1, #3
    f766:	2200      	movs	r2, #0
    f768:	552b      	strb	r3, [r5, r4]
    f76a:	1c63      	adds	r3, r4, #1
    f76c:	4371      	muls	r1, r6
    f76e:	b29b      	uxth	r3, r3
    f770:	18eb      	adds	r3, r5, r3
    f772:	701a      	strb	r2, [r3, #0]
    f774:	4a28      	ldr	r2, [pc, #160]	; (f818 <IncludeMacCommandsResponse+0x1ec>)
    f776:	1852      	adds	r2, r2, r1
    f778:	3298      	adds	r2, #152	; 0x98
    f77a:	7891      	ldrb	r1, [r2, #2]
    f77c:	09c9      	lsrs	r1, r1, #7
    f77e:	7019      	strb	r1, [r3, #0]
    f780:	7892      	ldrb	r2, [r2, #2]
    f782:	b2c8      	uxtb	r0, r1
    f784:	0652      	lsls	r2, r2, #25
    f786:	d51a      	bpl.n	f7be <IncludeMacCommandsResponse+0x192>
    f788:	2202      	movs	r2, #2
    f78a:	4302      	orrs	r2, r0
    f78c:	e7a7      	b.n	f6de <IncludeMacCommandsResponse+0xb2>
    f78e:	2209      	movs	r2, #9
    f790:	1c63      	adds	r3, r4, #1
    f792:	552a      	strb	r2, [r5, r4]
    f794:	b29c      	uxth	r4, r3
    f796:	e7de      	b.n	f756 <IncludeMacCommandsResponse+0x12a>
    f798:	230a      	movs	r3, #10
    f79a:	2103      	movs	r1, #3
    f79c:	2200      	movs	r2, #0
    f79e:	552b      	strb	r3, [r5, r4]
    f7a0:	1c63      	adds	r3, r4, #1
    f7a2:	4371      	muls	r1, r6
    f7a4:	b29b      	uxth	r3, r3
    f7a6:	18eb      	adds	r3, r5, r3
    f7a8:	701a      	strb	r2, [r3, #0]
    f7aa:	4a1b      	ldr	r2, [pc, #108]	; (f818 <IncludeMacCommandsResponse+0x1ec>)
    f7ac:	1852      	adds	r2, r2, r1
    f7ae:	3298      	adds	r2, #152	; 0x98
    f7b0:	7891      	ldrb	r1, [r2, #2]
    f7b2:	09c9      	lsrs	r1, r1, #7
    f7b4:	7019      	strb	r1, [r3, #0]
    f7b6:	78d2      	ldrb	r2, [r2, #3]
    f7b8:	b2c8      	uxtb	r0, r1
    f7ba:	07d2      	lsls	r2, r2, #31
    f7bc:	d4e4      	bmi.n	f788 <IncludeMacCommandsResponse+0x15c>
    f7be:	3402      	adds	r4, #2
    f7c0:	b2a4      	uxth	r4, r4
    f7c2:	e7c8      	b.n	f756 <IncludeMacCommandsResponse+0x12a>
    f7c4:	003b      	movs	r3, r7
    f7c6:	22ff      	movs	r2, #255	; 0xff
    f7c8:	33e5      	adds	r3, #229	; 0xe5
    f7ca:	701a      	strb	r2, [r3, #0]
    f7cc:	2300      	movs	r3, #0
    f7ce:	37e6      	adds	r7, #230	; 0xe6
    f7d0:	703b      	strb	r3, [r7, #0]
    f7d2:	3afd      	subs	r2, #253	; 0xfd
    f7d4:	1c63      	adds	r3, r4, #1
    f7d6:	e7dc      	b.n	f792 <IncludeMacCommandsResponse+0x166>
    f7d8:	1c62      	adds	r2, r4, #1
    f7da:	552b      	strb	r3, [r5, r4]
    f7dc:	b294      	uxth	r4, r2
    f7de:	e7ba      	b.n	f756 <IncludeMacCommandsResponse+0x12a>
    f7e0:	2201      	movs	r2, #1
    f7e2:	4252      	negs	r2, r2
    f7e4:	17d3      	asrs	r3, r2, #31
    f7e6:	9204      	str	r2, [sp, #16]
    f7e8:	9305      	str	r3, [sp, #20]
    f7ea:	4b11      	ldr	r3, [pc, #68]	; (f830 <IncludeMacCommandsResponse+0x204>)
    f7ec:	a904      	add	r1, sp, #16
    f7ee:	5cf8      	ldrb	r0, [r7, r3]
    f7f0:	4b10      	ldr	r3, [pc, #64]	; (f834 <IncludeMacCommandsResponse+0x208>)
    f7f2:	4798      	blx	r3
    f7f4:	2301      	movs	r3, #1
    f7f6:	228d      	movs	r2, #141	; 0x8d
    f7f8:	425b      	negs	r3, r3
    f7fa:	0092      	lsls	r2, r2, #2
    f7fc:	50bb      	str	r3, [r7, r2]
    f7fe:	3204      	adds	r2, #4
    f800:	54bb      	strb	r3, [r7, r2]
    f802:	238c      	movs	r3, #140	; 0x8c
    f804:	2201      	movs	r2, #1
    f806:	009b      	lsls	r3, r3, #2
    f808:	54fa      	strb	r2, [r7, r3]
    f80a:	2303      	movs	r3, #3
    f80c:	4373      	muls	r3, r6
    f80e:	18ff      	adds	r7, r7, r3
    f810:	3799      	adds	r7, #153	; 0x99
    f812:	18a2      	adds	r2, r4, r2
    f814:	783b      	ldrb	r3, [r7, #0]
    f816:	e7e0      	b.n	f7da <IncludeMacCommandsResponse+0x1ae>
    f818:	20003170 	.word	0x20003170
    f81c:	000182fb 	.word	0x000182fb
    f820:	000161c9 	.word	0x000161c9
    f824:	20003393 	.word	0x20003393
    f828:	00000223 	.word	0x00000223
    f82c:	0000dc35 	.word	0x0000dc35
    f830:	00000231 	.word	0x00000231
    f834:	0000d1ad 	.word	0x0000d1ad

0000f838 <UpdateJoinSuccessState>:
    f838:	b5f0      	push	{r4, r5, r6, r7, lr}
    f83a:	4c32      	ldr	r4, [pc, #200]	; (f904 <UpdateJoinSuccessState+0xcc>)
    f83c:	2104      	movs	r1, #4
    f83e:	0022      	movs	r2, r4
    f840:	3294      	adds	r2, #148	; 0x94
    f842:	7813      	ldrb	r3, [r2, #0]
    f844:	2001      	movs	r0, #1
    f846:	438b      	bics	r3, r1
    f848:	7013      	strb	r3, [r2, #0]
    f84a:	0022      	movs	r2, r4
    f84c:	3284      	adds	r2, #132	; 0x84
    f84e:	7813      	ldrb	r3, [r2, #0]
    f850:	b087      	sub	sp, #28
    f852:	4303      	orrs	r3, r0
    f854:	3107      	adds	r1, #7
    f856:	4f2c      	ldr	r7, [pc, #176]	; (f908 <UpdateJoinSuccessState+0xd0>)
    f858:	7013      	strb	r3, [r2, #0]
    f85a:	2500      	movs	r5, #0
    f85c:	47b8      	blx	r7
    f85e:	0023      	movs	r3, r4
    f860:	2115      	movs	r1, #21
    f862:	3388      	adds	r3, #136	; 0x88
    f864:	0028      	movs	r0, r5
    f866:	601d      	str	r5, [r3, #0]
    f868:	47b8      	blx	r7
    f86a:	0023      	movs	r3, r4
    f86c:	2020      	movs	r0, #32
    f86e:	33ff      	adds	r3, #255	; 0xff
    f870:	7f5b      	ldrb	r3, [r3, #29]
    f872:	4e26      	ldr	r6, [pc, #152]	; (f90c <UpdateJoinSuccessState+0xd4>)
    f874:	4203      	tst	r3, r0
    f876:	d00c      	beq.n	f892 <UpdateJoinSuccessState+0x5a>
    f878:	0023      	movs	r3, r4
    f87a:	a904      	add	r1, sp, #16
    f87c:	3380      	adds	r3, #128	; 0x80
    f87e:	710d      	strb	r5, [r1, #4]
    f880:	701d      	strb	r5, [r3, #0]
    f882:	6765      	str	r5, [r4, #116]	; 0x74
    f884:	67a5      	str	r5, [r4, #120]	; 0x78
    f886:	47b0      	blx	r6
    f888:	210f      	movs	r1, #15
    f88a:	2021      	movs	r0, #33	; 0x21
    f88c:	4469      	add	r1, sp
    f88e:	700d      	strb	r5, [r1, #0]
    f890:	47b0      	blx	r6
    f892:	0023      	movs	r3, r4
    f894:	2500      	movs	r5, #0
    f896:	338c      	adds	r3, #140	; 0x8c
    f898:	210a      	movs	r1, #10
    f89a:	2001      	movs	r0, #1
    f89c:	601d      	str	r5, [r3, #0]
    f89e:	47b8      	blx	r7
    f8a0:	0023      	movs	r3, r4
    f8a2:	33ca      	adds	r3, #202	; 0xca
    f8a4:	801d      	strh	r5, [r3, #0]
    f8a6:	0022      	movs	r2, r4
    f8a8:	0023      	movs	r3, r4
    f8aa:	210e      	movs	r1, #14
    f8ac:	3284      	adds	r2, #132	; 0x84
    f8ae:	33f6      	adds	r3, #246	; 0xf6
    f8b0:	701d      	strb	r5, [r3, #0]
    f8b2:	7813      	ldrb	r3, [r2, #0]
    f8b4:	2039      	movs	r0, #57	; 0x39
    f8b6:	438b      	bics	r3, r1
    f8b8:	0029      	movs	r1, r5
    f8ba:	7013      	strb	r3, [r2, #0]
    f8bc:	47b0      	blx	r6
    f8be:	0023      	movs	r3, r4
    f8c0:	3385      	adds	r3, #133	; 0x85
    f8c2:	781b      	ldrb	r3, [r3, #0]
    f8c4:	079b      	lsls	r3, r3, #30
    f8c6:	d50c      	bpl.n	f8e2 <UpdateJoinSuccessState+0xaa>
    f8c8:	0023      	movs	r3, r4
    f8ca:	21fa      	movs	r1, #250	; 0xfa
    f8cc:	3390      	adds	r3, #144	; 0x90
    f8ce:	681b      	ldr	r3, [r3, #0]
    f8d0:	34f0      	adds	r4, #240	; 0xf0
    f8d2:	0089      	lsls	r1, r1, #2
    f8d4:	7820      	ldrb	r0, [r4, #0]
    f8d6:	4359      	muls	r1, r3
    f8d8:	9500      	str	r5, [sp, #0]
    f8da:	4b0d      	ldr	r3, [pc, #52]	; (f910 <UpdateJoinSuccessState+0xd8>)
    f8dc:	002a      	movs	r2, r5
    f8de:	4c0d      	ldr	r4, [pc, #52]	; (f914 <UpdateJoinSuccessState+0xdc>)
    f8e0:	47a0      	blx	r4
    f8e2:	490d      	ldr	r1, [pc, #52]	; (f918 <UpdateJoinSuccessState+0xe0>)
    f8e4:	794a      	ldrb	r2, [r1, #5]
    f8e6:	790b      	ldrb	r3, [r1, #4]
    f8e8:	0212      	lsls	r2, r2, #8
    f8ea:	431a      	orrs	r2, r3
    f8ec:	798b      	ldrb	r3, [r1, #6]
    f8ee:	041b      	lsls	r3, r3, #16
    f8f0:	431a      	orrs	r2, r3
    f8f2:	79cb      	ldrb	r3, [r1, #7]
    f8f4:	061b      	lsls	r3, r3, #24
    f8f6:	4313      	orrs	r3, r2
    f8f8:	d001      	beq.n	f8fe <UpdateJoinSuccessState+0xc6>
    f8fa:	2008      	movs	r0, #8
    f8fc:	4798      	blx	r3
    f8fe:	b007      	add	sp, #28
    f900:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f902:	46c0      	nop			; (mov r8, r8)
    f904:	20003170 	.word	0x20003170
    f908:	00008d81 	.word	0x00008d81
    f90c:	0000c715 	.word	0x0000c715
    f910:	0000fa59 	.word	0x0000fa59
    f914:	0000cc25 	.word	0x0000cc25
    f918:	200034cc 	.word	0x200034cc

0000f91c <PrepareSessionKeys>:
    f91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f91e:	0004      	movs	r4, r0
    f920:	2603      	movs	r6, #3
    f922:	000d      	movs	r5, r1
    f924:	0017      	movs	r7, r2
    f926:	4b09      	ldr	r3, [pc, #36]	; (f94c <PrepareSessionKeys+0x30>)
    f928:	2210      	movs	r2, #16
    f92a:	2100      	movs	r1, #0
    f92c:	4798      	blx	r3
    f92e:	0032      	movs	r2, r6
    f930:	0029      	movs	r1, r5
    f932:	1c60      	adds	r0, r4, #1
    f934:	4d06      	ldr	r5, [pc, #24]	; (f950 <PrepareSessionKeys+0x34>)
    f936:	47a8      	blx	r5
    f938:	0032      	movs	r2, r6
    f93a:	0039      	movs	r1, r7
    f93c:	1d20      	adds	r0, r4, #4
    f93e:	47a8      	blx	r5
    f940:	1de0      	adds	r0, r4, #7
    f942:	2202      	movs	r2, #2
    f944:	4903      	ldr	r1, [pc, #12]	; (f954 <PrepareSessionKeys+0x38>)
    f946:	47a8      	blx	r5
    f948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f94a:	46c0      	nop			; (mov r8, r8)
    f94c:	000161c9 	.word	0x000161c9
    f950:	000161b7 	.word	0x000161b7
    f954:	2000323c 	.word	0x2000323c

0000f958 <AssembleEncryptionBlock>:
    f958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f95a:	001e      	movs	r6, r3
    f95c:	4c0b      	ldr	r4, [pc, #44]	; (f98c <AssembleEncryptionBlock+0x34>)
    f95e:	0017      	movs	r7, r2
    f960:	4b0b      	ldr	r3, [pc, #44]	; (f990 <AssembleEncryptionBlock+0x38>)
    f962:	0005      	movs	r5, r0
    f964:	9101      	str	r1, [sp, #4]
    f966:	2210      	movs	r2, #16
    f968:	2100      	movs	r1, #0
    f96a:	0020      	movs	r0, r4
    f96c:	4798      	blx	r3
    f96e:	7026      	strb	r6, [r4, #0]
    f970:	2604      	movs	r6, #4
    f972:	7165      	strb	r5, [r4, #5]
    f974:	0032      	movs	r2, r6
    f976:	4d07      	ldr	r5, [pc, #28]	; (f994 <AssembleEncryptionBlock+0x3c>)
    f978:	a908      	add	r1, sp, #32
    f97a:	1da0      	adds	r0, r4, #6
    f97c:	47a8      	blx	r5
    f97e:	0020      	movs	r0, r4
    f980:	0032      	movs	r2, r6
    f982:	a901      	add	r1, sp, #4
    f984:	300a      	adds	r0, #10
    f986:	47a8      	blx	r5
    f988:	73e7      	strb	r7, [r4, #15]
    f98a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    f98c:	20001e9d 	.word	0x20001e9d
    f990:	000161c9 	.word	0x000161c9
    f994:	000161b7 	.word	0x000161b7

0000f998 <ConfigureRadio>:
    f998:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f99a:	0001      	movs	r1, r0
    f99c:	0005      	movs	r5, r0
    f99e:	4c11      	ldr	r4, [pc, #68]	; (f9e4 <ConfigureRadio+0x4c>)
    f9a0:	3109      	adds	r1, #9
    f9a2:	2009      	movs	r0, #9
    f9a4:	47a0      	blx	r4
    f9a6:	0029      	movs	r1, r5
    f9a8:	2001      	movs	r0, #1
    f9aa:	47a0      	blx	r4
    f9ac:	1d29      	adds	r1, r5, #4
    f9ae:	200a      	movs	r0, #10
    f9b0:	47a0      	blx	r4
    f9b2:	7a6b      	ldrb	r3, [r5, #9]
    f9b4:	2b01      	cmp	r3, #1
    f9b6:	d10b      	bne.n	f9d0 <ConfigureRadio+0x38>
    f9b8:	0029      	movs	r1, r5
    f9ba:	2016      	movs	r0, #22
    f9bc:	310b      	adds	r1, #11
    f9be:	47a0      	blx	r4
    f9c0:	0029      	movs	r1, r5
    f9c2:	2007      	movs	r0, #7
    f9c4:	310a      	adds	r1, #10
    f9c6:	47a0      	blx	r4
    f9c8:	2000      	movs	r0, #0
    f9ca:	4907      	ldr	r1, [pc, #28]	; (f9e8 <ConfigureRadio+0x50>)
    f9cc:	47a0      	blx	r4
    f9ce:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    f9d0:	466b      	mov	r3, sp
    f9d2:	1dd9      	adds	r1, r3, #7
    f9d4:	2303      	movs	r3, #3
    f9d6:	2013      	movs	r0, #19
    f9d8:	700b      	strb	r3, [r1, #0]
    f9da:	47a0      	blx	r4
    f9dc:	4903      	ldr	r1, [pc, #12]	; (f9ec <ConfigureRadio+0x54>)
    f9de:	2012      	movs	r0, #18
    f9e0:	e7f4      	b.n	f9cc <ConfigureRadio+0x34>
    f9e2:	46c0      	nop			; (mov r8, r8)
    f9e4:	0000dd25 	.word	0x0000dd25
    f9e8:	20003270 	.word	0x20003270
    f9ec:	000182ec 	.word	0x000182ec

0000f9f0 <StopReceiveWindow2Timer>:
    f9f0:	b510      	push	{r4, lr}
    f9f2:	4c0b      	ldr	r4, [pc, #44]	; (fa20 <StopReceiveWindow2Timer+0x30>)
    f9f4:	0022      	movs	r2, r4
    f9f6:	32fd      	adds	r2, #253	; 0xfd
    f9f8:	7812      	ldrb	r2, [r2, #0]
    f9fa:	2a01      	cmp	r2, #1
    f9fc:	d10e      	bne.n	fa1c <StopReceiveWindow2Timer+0x2c>
    f9fe:	0021      	movs	r1, r4
    fa00:	200e      	movs	r0, #14
    fa02:	3184      	adds	r1, #132	; 0x84
    fa04:	780a      	ldrb	r2, [r1, #0]
    fa06:	34ee      	adds	r4, #238	; 0xee
    fa08:	4382      	bics	r2, r0
    fa0a:	700a      	strb	r2, [r1, #0]
    fa0c:	7820      	ldrb	r0, [r4, #0]
    fa0e:	4b05      	ldr	r3, [pc, #20]	; (fa24 <StopReceiveWindow2Timer+0x34>)
    fa10:	4798      	blx	r3
    fa12:	2800      	cmp	r0, #0
    fa14:	d002      	beq.n	fa1c <StopReceiveWindow2Timer+0x2c>
    fa16:	7820      	ldrb	r0, [r4, #0]
    fa18:	4b03      	ldr	r3, [pc, #12]	; (fa28 <StopReceiveWindow2Timer+0x38>)
    fa1a:	4798      	blx	r3
    fa1c:	bd10      	pop	{r4, pc}
    fa1e:	46c0      	nop			; (mov r8, r8)
    fa20:	20003170 	.word	0x20003170
    fa24:	0000cdbd 	.word	0x0000cdbd
    fa28:	0000cf3d 	.word	0x0000cf3d

0000fa2c <LorawanLinkCheckCallback.part.1>:
    fa2c:	4b07      	ldr	r3, [pc, #28]	; (fa4c <LorawanLinkCheckCallback.part.1+0x20>)
    fa2e:	b513      	push	{r0, r1, r4, lr}
    fa30:	001a      	movs	r2, r3
    fa32:	21fa      	movs	r1, #250	; 0xfa
    fa34:	3290      	adds	r2, #144	; 0x90
    fa36:	6812      	ldr	r2, [r2, #0]
    fa38:	0089      	lsls	r1, r1, #2
    fa3a:	4351      	muls	r1, r2
    fa3c:	2200      	movs	r2, #0
    fa3e:	33f0      	adds	r3, #240	; 0xf0
    fa40:	7818      	ldrb	r0, [r3, #0]
    fa42:	4c03      	ldr	r4, [pc, #12]	; (fa50 <LorawanLinkCheckCallback.part.1+0x24>)
    fa44:	9200      	str	r2, [sp, #0]
    fa46:	4b03      	ldr	r3, [pc, #12]	; (fa54 <LorawanLinkCheckCallback.part.1+0x28>)
    fa48:	47a0      	blx	r4
    fa4a:	bd13      	pop	{r0, r1, r4, pc}
    fa4c:	20003170 	.word	0x20003170
    fa50:	0000cc25 	.word	0x0000cc25
    fa54:	0000fa59 	.word	0x0000fa59

0000fa58 <LorawanLinkCheckCallback>:
    fa58:	4b17      	ldr	r3, [pc, #92]	; (fab8 <LorawanLinkCheckCallback+0x60>)
    fa5a:	20a0      	movs	r0, #160	; 0xa0
    fa5c:	001a      	movs	r2, r3
    fa5e:	2180      	movs	r1, #128	; 0x80
    fa60:	b510      	push	{r4, lr}
    fa62:	3284      	adds	r2, #132	; 0x84
    fa64:	8812      	ldrh	r2, [r2, #0]
    fa66:	0080      	lsls	r0, r0, #2
    fa68:	0089      	lsls	r1, r1, #2
    fa6a:	4002      	ands	r2, r0
    fa6c:	428a      	cmp	r2, r1
    fa6e:	d11c      	bne.n	faaa <LorawanLinkCheckCallback+0x52>
    fa70:	001a      	movs	r2, r3
    fa72:	32e0      	adds	r2, #224	; 0xe0
    fa74:	7810      	ldrb	r0, [r2, #0]
    fa76:	2403      	movs	r4, #3
    fa78:	2200      	movs	r2, #0
    fa7a:	b2d1      	uxtb	r1, r2
    fa7c:	4281      	cmp	r1, r0
    fa7e:	d30d      	bcc.n	fa9c <LorawanLinkCheckCallback+0x44>
    fa80:	d113      	bne.n	faaa <LorawanLinkCheckCallback+0x52>
    fa82:	2203      	movs	r2, #3
    fa84:	434a      	muls	r2, r1
    fa86:	2102      	movs	r1, #2
    fa88:	189a      	adds	r2, r3, r2
    fa8a:	3299      	adds	r2, #153	; 0x99
    fa8c:	7011      	strb	r1, [r2, #0]
    fa8e:	280f      	cmp	r0, #15
    fa90:	d80b      	bhi.n	faaa <LorawanLinkCheckCallback+0x52>
    fa92:	001a      	movs	r2, r3
    fa94:	3001      	adds	r0, #1
    fa96:	32e0      	adds	r2, #224	; 0xe0
    fa98:	7010      	strb	r0, [r2, #0]
    fa9a:	e006      	b.n	faaa <LorawanLinkCheckCallback+0x52>
    fa9c:	0021      	movs	r1, r4
    fa9e:	3201      	adds	r2, #1
    faa0:	4351      	muls	r1, r2
    faa2:	3196      	adds	r1, #150	; 0x96
    faa4:	5c59      	ldrb	r1, [r3, r1]
    faa6:	2902      	cmp	r1, #2
    faa8:	d1e7      	bne.n	fa7a <LorawanLinkCheckCallback+0x22>
    faaa:	3385      	adds	r3, #133	; 0x85
    faac:	781b      	ldrb	r3, [r3, #0]
    faae:	079b      	lsls	r3, r3, #30
    fab0:	d501      	bpl.n	fab6 <LorawanLinkCheckCallback+0x5e>
    fab2:	4b02      	ldr	r3, [pc, #8]	; (fabc <LorawanLinkCheckCallback+0x64>)
    fab4:	4798      	blx	r3
    fab6:	bd10      	pop	{r4, pc}
    fab8:	20003170 	.word	0x20003170
    fabc:	0000fa2d 	.word	0x0000fa2d

0000fac0 <LORAWAN_Send>:
    fac0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    fac2:	4c37      	ldr	r4, [pc, #220]	; (fba0 <LORAWAN_Send+0xe0>)
    fac4:	0006      	movs	r6, r0
    fac6:	0023      	movs	r3, r4
    fac8:	3384      	adds	r3, #132	; 0x84
    faca:	781b      	ldrb	r3, [r3, #0]
    facc:	250f      	movs	r5, #15
    face:	b25a      	sxtb	r2, r3
    fad0:	2a00      	cmp	r2, #0
    fad2:	db0b      	blt.n	faec <LORAWAN_Send+0x2c>
    fad4:	3d03      	subs	r5, #3
    fad6:	065a      	lsls	r2, r3, #25
    fad8:	d408      	bmi.n	faec <LORAWAN_Send+0x2c>
    fada:	3d03      	subs	r5, #3
    fadc:	07db      	lsls	r3, r3, #31
    fade:	d505      	bpl.n	faec <LORAWAN_Send+0x2c>
    fae0:	2388      	movs	r3, #136	; 0x88
    fae2:	009b      	lsls	r3, r3, #2
    fae4:	5ce7      	ldrb	r7, [r4, r3]
    fae6:	2f00      	cmp	r7, #0
    fae8:	d102      	bne.n	faf0 <LORAWAN_Send+0x30>
    faea:	2511      	movs	r5, #17
    faec:	0028      	movs	r0, r5
    faee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    faf0:	2800      	cmp	r0, #0
    faf2:	d10f      	bne.n	fb14 <LORAWAN_Send+0x54>
    faf4:	2700      	movs	r7, #0
    faf6:	0023      	movs	r3, r4
    faf8:	3388      	adds	r3, #136	; 0x88
    fafa:	681b      	ldr	r3, [r3, #0]
    fafc:	3301      	adds	r3, #1
    fafe:	d123      	bne.n	fb48 <LORAWAN_Send+0x88>
    fb00:	2001      	movs	r0, #1
    fb02:	3484      	adds	r4, #132	; 0x84
    fb04:	78a3      	ldrb	r3, [r4, #2]
    fb06:	210b      	movs	r1, #11
    fb08:	4303      	orrs	r3, r0
    fb0a:	70a3      	strb	r3, [r4, #2]
    fb0c:	4b25      	ldr	r3, [pc, #148]	; (fba4 <LORAWAN_Send+0xe4>)
    fb0e:	4798      	blx	r3
    fb10:	250d      	movs	r5, #13
    fb12:	e7eb      	b.n	faec <LORAWAN_Send+0x2c>
    fb14:	7843      	ldrb	r3, [r0, #1]
    fb16:	7a02      	ldrb	r2, [r0, #8]
    fb18:	3b01      	subs	r3, #1
    fb1a:	b2db      	uxtb	r3, r3
    fb1c:	9201      	str	r2, [sp, #4]
    fb1e:	2bdf      	cmp	r3, #223	; 0xdf
    fb20:	d902      	bls.n	fb28 <LORAWAN_Send+0x68>
    fb22:	250a      	movs	r5, #10
    fb24:	2a00      	cmp	r2, #0
    fb26:	d1e1      	bne.n	faec <LORAWAN_Send+0x2c>
    fb28:	4b1f      	ldr	r3, [pc, #124]	; (fba8 <LORAWAN_Send+0xe8>)
    fb2a:	4798      	blx	r3
    fb2c:	4684      	mov	ip, r0
    fb2e:	9b01      	ldr	r3, [sp, #4]
    fb30:	9000      	str	r0, [sp, #0]
    fb32:	4463      	add	r3, ip
    fb34:	001d      	movs	r5, r3
    fb36:	4b1d      	ldr	r3, [pc, #116]	; (fbac <LORAWAN_Send+0xec>)
    fb38:	4798      	blx	r3
    fb3a:	4285      	cmp	r5, r0
    fb3c:	ddda      	ble.n	faf4 <LORAWAN_Send+0x34>
    fb3e:	9b00      	ldr	r3, [sp, #0]
    fb40:	250e      	movs	r5, #14
    fb42:	2b00      	cmp	r3, #0
    fb44:	d0d2      	beq.n	faec <LORAWAN_Send+0x2c>
    fb46:	e7d6      	b.n	faf6 <LORAWAN_Send+0x36>
    fb48:	0023      	movs	r3, r4
    fb4a:	33fd      	adds	r3, #253	; 0xfd
    fb4c:	781b      	ldrb	r3, [r3, #0]
    fb4e:	2b04      	cmp	r3, #4
    fb50:	d01d      	beq.n	fb8e <LORAWAN_Send+0xce>
    fb52:	0023      	movs	r3, r4
    fb54:	33fd      	adds	r3, #253	; 0xfd
    fb56:	781b      	ldrb	r3, [r3, #0]
    fb58:	2b01      	cmp	r3, #1
    fb5a:	d105      	bne.n	fb68 <LORAWAN_Send+0xa8>
    fb5c:	0023      	movs	r3, r4
    fb5e:	3384      	adds	r3, #132	; 0x84
    fb60:	781a      	ldrb	r2, [r3, #0]
    fb62:	230e      	movs	r3, #14
    fb64:	421a      	tst	r2, r3
    fb66:	d1c0      	bne.n	faea <LORAWAN_Send+0x2a>
    fb68:	0023      	movs	r3, r4
    fb6a:	33fc      	adds	r3, #252	; 0xfc
    fb6c:	2f00      	cmp	r7, #0
    fb6e:	d113      	bne.n	fb98 <LORAWAN_Send+0xd8>
    fb70:	2508      	movs	r5, #8
    fb72:	60de      	str	r6, [r3, #12]
    fb74:	2388      	movs	r3, #136	; 0x88
    fb76:	2200      	movs	r2, #0
    fb78:	009b      	lsls	r3, r3, #2
    fb7a:	54e2      	strb	r2, [r4, r3]
    fb7c:	2001      	movs	r0, #1
    fb7e:	4b0c      	ldr	r3, [pc, #48]	; (fbb0 <LORAWAN_Send+0xf0>)
    fb80:	4798      	blx	r3
    fb82:	2320      	movs	r3, #32
    fb84:	3494      	adds	r4, #148	; 0x94
    fb86:	7822      	ldrb	r2, [r4, #0]
    fb88:	4313      	orrs	r3, r2
    fb8a:	7023      	strb	r3, [r4, #0]
    fb8c:	e7ae      	b.n	faec <LORAWAN_Send+0x2c>
    fb8e:	4b09      	ldr	r3, [pc, #36]	; (fbb4 <LORAWAN_Send+0xf4>)
    fb90:	4798      	blx	r3
    fb92:	2808      	cmp	r0, #8
    fb94:	d1a9      	bne.n	faea <LORAWAN_Send+0x2a>
    fb96:	e7dc      	b.n	fb52 <LORAWAN_Send+0x92>
    fb98:	2200      	movs	r2, #0
    fb9a:	2511      	movs	r5, #17
    fb9c:	60da      	str	r2, [r3, #12]
    fb9e:	e7e9      	b.n	fb74 <LORAWAN_Send+0xb4>
    fba0:	20003170 	.word	0x20003170
    fba4:	00008d81 	.word	0x00008d81
    fba8:	0000f58d 	.word	0x0000f58d
    fbac:	0000f5cd 	.word	0x0000f5cd
    fbb0:	0000dbb1 	.word	0x0000dbb1
    fbb4:	000126fd 	.word	0x000126fd

0000fbb8 <AutomaticReplyCallback>:
    fbb8:	b510      	push	{r4, lr}
    fbba:	4c0d      	ldr	r4, [pc, #52]	; (fbf0 <AutomaticReplyCallback+0x38>)
    fbbc:	0023      	movs	r3, r4
    fbbe:	33fd      	adds	r3, #253	; 0xfd
    fbc0:	781b      	ldrb	r3, [r3, #0]
    fbc2:	2b01      	cmp	r3, #1
    fbc4:	d10e      	bne.n	fbe4 <AutomaticReplyCallback+0x2c>
    fbc6:	0022      	movs	r2, r4
    fbc8:	210e      	movs	r1, #14
    fbca:	3284      	adds	r2, #132	; 0x84
    fbcc:	7813      	ldrb	r3, [r2, #0]
    fbce:	438b      	bics	r3, r1
    fbd0:	7013      	strb	r3, [r2, #0]
    fbd2:	4b08      	ldr	r3, [pc, #32]	; (fbf4 <AutomaticReplyCallback+0x3c>)
    fbd4:	2000      	movs	r0, #0
    fbd6:	4798      	blx	r3
    fbd8:	2208      	movs	r2, #8
    fbda:	3494      	adds	r4, #148	; 0x94
    fbdc:	7823      	ldrb	r3, [r4, #0]
    fbde:	4393      	bics	r3, r2
    fbe0:	7023      	strb	r3, [r4, #0]
    fbe2:	bd10      	pop	{r4, pc}
    fbe4:	2b04      	cmp	r3, #4
    fbe6:	d1f4      	bne.n	fbd2 <AutomaticReplyCallback+0x1a>
    fbe8:	4b03      	ldr	r3, [pc, #12]	; (fbf8 <AutomaticReplyCallback+0x40>)
    fbea:	4798      	blx	r3
    fbec:	e7f1      	b.n	fbd2 <AutomaticReplyCallback+0x1a>
    fbee:	46c0      	nop			; (mov r8, r8)
    fbf0:	20003170 	.word	0x20003170
    fbf4:	0000fac1 	.word	0x0000fac1
    fbf8:	0000e639 	.word	0x0000e639

0000fbfc <LorawanLinkCheckConfigure>:
    fbfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fbfe:	23fa      	movs	r3, #250	; 0xfa
    fc00:	4c21      	ldr	r4, [pc, #132]	; (fc88 <LorawanLinkCheckConfigure+0x8c>)
    fc02:	009b      	lsls	r3, r3, #2
    fc04:	0022      	movs	r2, r4
    fc06:	0025      	movs	r5, r4
    fc08:	4343      	muls	r3, r0
    fc0a:	3290      	adds	r2, #144	; 0x90
    fc0c:	0006      	movs	r6, r0
    fc0e:	2102      	movs	r1, #2
    fc10:	2000      	movs	r0, #0
    fc12:	4f1e      	ldr	r7, [pc, #120]	; (fc8c <LorawanLinkCheckConfigure+0x90>)
    fc14:	6013      	str	r3, [r2, #0]
    fc16:	3584      	adds	r5, #132	; 0x84
    fc18:	47b8      	blx	r7
    fc1a:	2e00      	cmp	r6, #0
    fc1c:	d127      	bne.n	fc6e <LorawanLinkCheckConfigure+0x72>
    fc1e:	0023      	movs	r3, r4
    fc20:	33f0      	adds	r3, #240	; 0xf0
    fc22:	7818      	ldrb	r0, [r3, #0]
    fc24:	4b1a      	ldr	r3, [pc, #104]	; (fc90 <LorawanLinkCheckConfigure+0x94>)
    fc26:	4798      	blx	r3
    fc28:	2202      	movs	r2, #2
    fc2a:	786b      	ldrb	r3, [r5, #1]
    fc2c:	210b      	movs	r1, #11
    fc2e:	4393      	bics	r3, r2
    fc30:	706b      	strb	r3, [r5, #1]
    fc32:	2001      	movs	r0, #1
    fc34:	47b8      	blx	r7
    fc36:	0023      	movs	r3, r4
    fc38:	2701      	movs	r7, #1
    fc3a:	33e0      	adds	r3, #224	; 0xe0
    fc3c:	781b      	ldrb	r3, [r3, #0]
    fc3e:	0030      	movs	r0, r6
    fc40:	0032      	movs	r2, r6
    fc42:	36ff      	adds	r6, #255	; 0xff
    fc44:	429a      	cmp	r2, r3
    fc46:	d304      	bcc.n	fc52 <LorawanLinkCheckConfigure+0x56>
    fc48:	2800      	cmp	r0, #0
    fc4a:	d001      	beq.n	fc50 <LorawanLinkCheckConfigure+0x54>
    fc4c:	34e0      	adds	r4, #224	; 0xe0
    fc4e:	7023      	strb	r3, [r4, #0]
    fc50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fc52:	2103      	movs	r1, #3
    fc54:	4351      	muls	r1, r2
    fc56:	1861      	adds	r1, r4, r1
    fc58:	3199      	adds	r1, #153	; 0x99
    fc5a:	780d      	ldrb	r5, [r1, #0]
    fc5c:	2d02      	cmp	r5, #2
    fc5e:	d103      	bne.n	fc68 <LorawanLinkCheckConfigure+0x6c>
    fc60:	0038      	movs	r0, r7
    fc62:	3b01      	subs	r3, #1
    fc64:	700e      	strb	r6, [r1, #0]
    fc66:	b2db      	uxtb	r3, r3
    fc68:	3201      	adds	r2, #1
    fc6a:	b2d2      	uxtb	r2, r2
    fc6c:	e7ea      	b.n	fc44 <LorawanLinkCheckConfigure+0x48>
    fc6e:	2302      	movs	r3, #2
    fc70:	786a      	ldrb	r2, [r5, #1]
    fc72:	210b      	movs	r1, #11
    fc74:	4313      	orrs	r3, r2
    fc76:	706b      	strb	r3, [r5, #1]
    fc78:	2001      	movs	r0, #1
    fc7a:	47b8      	blx	r7
    fc7c:	782b      	ldrb	r3, [r5, #0]
    fc7e:	07db      	lsls	r3, r3, #31
    fc80:	d5e6      	bpl.n	fc50 <LorawanLinkCheckConfigure+0x54>
    fc82:	4b04      	ldr	r3, [pc, #16]	; (fc94 <LorawanLinkCheckConfigure+0x98>)
    fc84:	4798      	blx	r3
    fc86:	e7e3      	b.n	fc50 <LorawanLinkCheckConfigure+0x54>
    fc88:	20003170 	.word	0x20003170
    fc8c:	00008d81 	.word	0x00008d81
    fc90:	0000cf3d 	.word	0x0000cf3d
    fc94:	0000fa2d 	.word	0x0000fa2d

0000fc98 <EncodeDeviceTimeReq>:
    fc98:	4b08      	ldr	r3, [pc, #32]	; (fcbc <EncodeDeviceTimeReq+0x24>)
    fc9a:	b510      	push	{r4, lr}
    fc9c:	001c      	movs	r4, r3
    fc9e:	34e0      	adds	r4, #224	; 0xe0
    fca0:	7822      	ldrb	r2, [r4, #0]
    fca2:	2015      	movs	r0, #21
    fca4:	2a0f      	cmp	r2, #15
    fca6:	d808      	bhi.n	fcba <EncodeDeviceTimeReq+0x22>
    fca8:	2103      	movs	r1, #3
    fcaa:	4351      	muls	r1, r2
    fcac:	185b      	adds	r3, r3, r1
    fcae:	210d      	movs	r1, #13
    fcb0:	3399      	adds	r3, #153	; 0x99
    fcb2:	3201      	adds	r2, #1
    fcb4:	7019      	strb	r1, [r3, #0]
    fcb6:	7022      	strb	r2, [r4, #0]
    fcb8:	380d      	subs	r0, #13
    fcba:	bd10      	pop	{r4, pc}
    fcbc:	20003170 	.word	0x20003170

0000fcc0 <EncodeLinkCheckReq>:
    fcc0:	4b08      	ldr	r3, [pc, #32]	; (fce4 <EncodeLinkCheckReq+0x24>)
    fcc2:	b510      	push	{r4, lr}
    fcc4:	001c      	movs	r4, r3
    fcc6:	34e0      	adds	r4, #224	; 0xe0
    fcc8:	7822      	ldrb	r2, [r4, #0]
    fcca:	2015      	movs	r0, #21
    fccc:	2a0f      	cmp	r2, #15
    fcce:	d808      	bhi.n	fce2 <EncodeLinkCheckReq+0x22>
    fcd0:	2103      	movs	r1, #3
    fcd2:	4351      	muls	r1, r2
    fcd4:	185b      	adds	r3, r3, r1
    fcd6:	2102      	movs	r1, #2
    fcd8:	3399      	adds	r3, #153	; 0x99
    fcda:	3201      	adds	r2, #1
    fcdc:	7019      	strb	r1, [r3, #0]
    fcde:	7022      	strb	r2, [r4, #0]
    fce0:	380d      	subs	r0, #13
    fce2:	bd10      	pop	{r4, pc}
    fce4:	20003170 	.word	0x20003170

0000fce8 <UpdateCurrentDataRate>:
    fce8:	b510      	push	{r4, lr}
    fcea:	4b04      	ldr	r3, [pc, #16]	; (fcfc <UpdateCurrentDataRate+0x14>)
    fcec:	210c      	movs	r1, #12
    fcee:	33e7      	adds	r3, #231	; 0xe7
    fcf0:	7018      	strb	r0, [r3, #0]
    fcf2:	2001      	movs	r0, #1
    fcf4:	4b02      	ldr	r3, [pc, #8]	; (fd00 <UpdateCurrentDataRate+0x18>)
    fcf6:	4798      	blx	r3
    fcf8:	bd10      	pop	{r4, pc}
    fcfa:	46c0      	nop			; (mov r8, r8)
    fcfc:	20003170 	.word	0x20003170
    fd00:	00008d81 	.word	0x00008d81

0000fd04 <UpdateDLSettings>:
    fd04:	b573      	push	{r0, r1, r4, r5, r6, lr}
    fd06:	466b      	mov	r3, sp
    fd08:	1dde      	adds	r6, r3, #7
    fd0a:	1d9c      	adds	r4, r3, #6
    fd0c:	71d8      	strb	r0, [r3, #7]
    fd0e:	7021      	strb	r1, [r4, #0]
    fd10:	2017      	movs	r0, #23
    fd12:	0031      	movs	r1, r6
    fd14:	4d0c      	ldr	r5, [pc, #48]	; (fd48 <UpdateDLSettings+0x44>)
    fd16:	47a8      	blx	r5
    fd18:	2808      	cmp	r0, #8
    fd1a:	d107      	bne.n	fd2c <UpdateDLSettings+0x28>
    fd1c:	4b0b      	ldr	r3, [pc, #44]	; (fd4c <UpdateDLSettings+0x48>)
    fd1e:	7832      	ldrb	r2, [r6, #0]
    fd20:	336e      	adds	r3, #110	; 0x6e
    fd22:	701a      	strb	r2, [r3, #0]
    fd24:	2100      	movs	r1, #0
    fd26:	3807      	subs	r0, #7
    fd28:	4b09      	ldr	r3, [pc, #36]	; (fd50 <UpdateDLSettings+0x4c>)
    fd2a:	4798      	blx	r3
    fd2c:	0021      	movs	r1, r4
    fd2e:	2018      	movs	r0, #24
    fd30:	47a8      	blx	r5
    fd32:	2808      	cmp	r0, #8
    fd34:	d107      	bne.n	fd46 <UpdateDLSettings+0x42>
    fd36:	2101      	movs	r1, #1
    fd38:	4b04      	ldr	r3, [pc, #16]	; (fd4c <UpdateDLSettings+0x48>)
    fd3a:	7822      	ldrb	r2, [r4, #0]
    fd3c:	33f7      	adds	r3, #247	; 0xf7
    fd3e:	701a      	strb	r2, [r3, #0]
    fd40:	0008      	movs	r0, r1
    fd42:	4b03      	ldr	r3, [pc, #12]	; (fd50 <UpdateDLSettings+0x4c>)
    fd44:	4798      	blx	r3
    fd46:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    fd48:	0000c6f9 	.word	0x0000c6f9
    fd4c:	20003170 	.word	0x20003170
    fd50:	00008d81 	.word	0x00008d81

0000fd54 <UpdateTxPower>:
    fd54:	b510      	push	{r4, lr}
    fd56:	4b04      	ldr	r3, [pc, #16]	; (fd68 <UpdateTxPower+0x14>)
    fd58:	210a      	movs	r1, #10
    fd5a:	33e9      	adds	r3, #233	; 0xe9
    fd5c:	7018      	strb	r0, [r3, #0]
    fd5e:	2000      	movs	r0, #0
    fd60:	4b02      	ldr	r3, [pc, #8]	; (fd6c <UpdateTxPower+0x18>)
    fd62:	4798      	blx	r3
    fd64:	bd10      	pop	{r4, pc}
    fd66:	46c0      	nop			; (mov r8, r8)
    fd68:	20003170 	.word	0x20003170
    fd6c:	00008d81 	.word	0x00008d81

0000fd70 <UpdateRetransmissionAckTimeoutState>:
    fd70:	4b10      	ldr	r3, [pc, #64]	; (fdb4 <UpdateRetransmissionAckTimeoutState+0x44>)
    fd72:	b513      	push	{r0, r1, r4, lr}
    fd74:	001a      	movs	r2, r3
    fd76:	32fd      	adds	r2, #253	; 0xfd
    fd78:	7812      	ldrb	r2, [r2, #0]
    fd7a:	2a01      	cmp	r2, #1
    fd7c:	d108      	bne.n	fd90 <UpdateRetransmissionAckTimeoutState+0x20>
    fd7e:	0018      	movs	r0, r3
    fd80:	210e      	movs	r1, #14
    fd82:	3084      	adds	r0, #132	; 0x84
    fd84:	7802      	ldrb	r2, [r0, #0]
    fd86:	438a      	bics	r2, r1
    fd88:	0011      	movs	r1, r2
    fd8a:	220c      	movs	r2, #12
    fd8c:	430a      	orrs	r2, r1
    fd8e:	7002      	strb	r2, [r0, #0]
    fd90:	001a      	movs	r2, r3
    fd92:	32da      	adds	r2, #218	; 0xda
    fd94:	8811      	ldrh	r1, [r2, #0]
    fd96:	4a08      	ldr	r2, [pc, #32]	; (fdb8 <UpdateRetransmissionAckTimeoutState+0x48>)
    fd98:	4c08      	ldr	r4, [pc, #32]	; (fdbc <UpdateRetransmissionAckTimeoutState+0x4c>)
    fd9a:	5c9a      	ldrb	r2, [r3, r2]
    fd9c:	33f1      	adds	r3, #241	; 0xf1
    fd9e:	1a8a      	subs	r2, r1, r2
    fda0:	21fa      	movs	r1, #250	; 0xfa
    fda2:	0089      	lsls	r1, r1, #2
    fda4:	4351      	muls	r1, r2
    fda6:	2200      	movs	r2, #0
    fda8:	7818      	ldrb	r0, [r3, #0]
    fdaa:	9200      	str	r2, [sp, #0]
    fdac:	4b04      	ldr	r3, [pc, #16]	; (fdc0 <UpdateRetransmissionAckTimeoutState+0x50>)
    fdae:	47a0      	blx	r4
    fdb0:	bd13      	pop	{r0, r1, r4, pc}
    fdb2:	46c0      	nop			; (mov r8, r8)
    fdb4:	20003170 	.word	0x20003170
    fdb8:	0000022b 	.word	0x0000022b
    fdbc:	0000cc25 	.word	0x0000cc25
    fdc0:	00010b01 	.word	0x00010b01

0000fdc4 <UpdateReceiveWindow2Parameters>:
    fdc4:	4b0f      	ldr	r3, [pc, #60]	; (fe04 <UpdateReceiveWindow2Parameters+0x40>)
    fdc6:	b570      	push	{r4, r5, r6, lr}
    fdc8:	001a      	movs	r2, r3
    fdca:	326e      	adds	r2, #110	; 0x6e
    fdcc:	7011      	strb	r1, [r2, #0]
    fdce:	001a      	movs	r2, r3
    fdd0:	0c04      	lsrs	r4, r0, #16
    fdd2:	326a      	adds	r2, #106	; 0x6a
    fdd4:	8010      	strh	r0, [r2, #0]
    fdd6:	8054      	strh	r4, [r2, #2]
    fdd8:	001a      	movs	r2, r3
    fdda:	25fd      	movs	r5, #253	; 0xfd
    fddc:	32fd      	adds	r2, #253	; 0xfd
    fdde:	7812      	ldrb	r2, [r2, #0]
    fde0:	3a02      	subs	r2, #2
    fde2:	422a      	tst	r2, r5
    fde4:	d109      	bne.n	fdfa <UpdateReceiveWindow2Parameters+0x36>
    fde6:	001a      	movs	r2, r3
    fde8:	336f      	adds	r3, #111	; 0x6f
    fdea:	3273      	adds	r2, #115	; 0x73
    fdec:	7011      	strb	r1, [r2, #0]
    fdee:	7018      	strb	r0, [r3, #0]
    fdf0:	0a02      	lsrs	r2, r0, #8
    fdf2:	0e00      	lsrs	r0, r0, #24
    fdf4:	705a      	strb	r2, [r3, #1]
    fdf6:	709c      	strb	r4, [r3, #2]
    fdf8:	70d8      	strb	r0, [r3, #3]
    fdfa:	2100      	movs	r1, #0
    fdfc:	4b02      	ldr	r3, [pc, #8]	; (fe08 <UpdateReceiveWindow2Parameters+0x44>)
    fdfe:	2001      	movs	r0, #1
    fe00:	4798      	blx	r3
    fe02:	bd70      	pop	{r4, r5, r6, pc}
    fe04:	20003170 	.word	0x20003170
    fe08:	00008d81 	.word	0x00008d81

0000fe0c <ResetParametersForConfirmedTransmission>:
    fe0c:	4b0a      	ldr	r3, [pc, #40]	; (fe38 <ResetParametersForConfirmedTransmission+0x2c>)
    fe0e:	001a      	movs	r2, r3
    fe10:	32fd      	adds	r2, #253	; 0xfd
    fe12:	7812      	ldrb	r2, [r2, #0]
    fe14:	2a01      	cmp	r2, #1
    fe16:	d105      	bne.n	fe24 <ResetParametersForConfirmedTransmission+0x18>
    fe18:	0019      	movs	r1, r3
    fe1a:	200e      	movs	r0, #14
    fe1c:	3184      	adds	r1, #132	; 0x84
    fe1e:	780a      	ldrb	r2, [r1, #0]
    fe20:	4382      	bics	r2, r0
    fe22:	700a      	strb	r2, [r1, #0]
    fe24:	001a      	movs	r2, r3
    fe26:	2100      	movs	r1, #0
    fe28:	3394      	adds	r3, #148	; 0x94
    fe2a:	32e4      	adds	r2, #228	; 0xe4
    fe2c:	7011      	strb	r1, [r2, #0]
    fe2e:	781a      	ldrb	r2, [r3, #0]
    fe30:	3101      	adds	r1, #1
    fe32:	438a      	bics	r2, r1
    fe34:	701a      	strb	r2, [r3, #0]
    fe36:	4770      	bx	lr
    fe38:	20003170 	.word	0x20003170

0000fe3c <ResetParametersForUnconfirmedTransmission>:
    fe3c:	4b07      	ldr	r3, [pc, #28]	; (fe5c <ResetParametersForUnconfirmedTransmission+0x20>)
    fe3e:	001a      	movs	r2, r3
    fe40:	32fd      	adds	r2, #253	; 0xfd
    fe42:	7812      	ldrb	r2, [r2, #0]
    fe44:	2a01      	cmp	r2, #1
    fe46:	d105      	bne.n	fe54 <ResetParametersForUnconfirmedTransmission+0x18>
    fe48:	0019      	movs	r1, r3
    fe4a:	200e      	movs	r0, #14
    fe4c:	3184      	adds	r1, #132	; 0x84
    fe4e:	780a      	ldrb	r2, [r1, #0]
    fe50:	4382      	bics	r2, r0
    fe52:	700a      	strb	r2, [r1, #0]
    fe54:	2200      	movs	r2, #0
    fe56:	33e3      	adds	r3, #227	; 0xe3
    fe58:	701a      	strb	r2, [r3, #0]
    fe5a:	4770      	bx	lr
    fe5c:	20003170 	.word	0x20003170

0000fe60 <SetJoinFailState>:
    fe60:	b570      	push	{r4, r5, r6, lr}
    fe62:	4c15      	ldr	r4, [pc, #84]	; (feb8 <SetJoinFailState+0x58>)
    fe64:	2604      	movs	r6, #4
    fe66:	0025      	movs	r5, r4
    fe68:	3594      	adds	r5, #148	; 0x94
    fe6a:	782a      	ldrb	r2, [r5, #0]
    fe6c:	0021      	movs	r1, r4
    fe6e:	43b2      	bics	r2, r6
    fe70:	702a      	strb	r2, [r5, #0]
    fe72:	22f0      	movs	r2, #240	; 0xf0
    fe74:	3184      	adds	r1, #132	; 0x84
    fe76:	780b      	ldrb	r3, [r1, #0]
    fe78:	4013      	ands	r3, r2
    fe7a:	700b      	strb	r3, [r1, #0]
    fe7c:	0023      	movs	r3, r4
    fe7e:	33ff      	adds	r3, #255	; 0xff
    fe80:	7f5b      	ldrb	r3, [r3, #29]
    fe82:	069b      	lsls	r3, r3, #26
    fe84:	d503      	bpl.n	fe8e <SetJoinFailState+0x2e>
    fe86:	0023      	movs	r3, r4
    fe88:	2200      	movs	r2, #0
    fe8a:	3380      	adds	r3, #128	; 0x80
    fe8c:	701a      	strb	r2, [r3, #0]
    fe8e:	490b      	ldr	r1, [pc, #44]	; (febc <SetJoinFailState+0x5c>)
    fe90:	794a      	ldrb	r2, [r1, #5]
    fe92:	790b      	ldrb	r3, [r1, #4]
    fe94:	0212      	lsls	r2, r2, #8
    fe96:	431a      	orrs	r2, r3
    fe98:	798b      	ldrb	r3, [r1, #6]
    fe9a:	041b      	lsls	r3, r3, #16
    fe9c:	431a      	orrs	r2, r3
    fe9e:	79cb      	ldrb	r3, [r1, #7]
    fea0:	061b      	lsls	r3, r3, #24
    fea2:	4313      	orrs	r3, r2
    fea4:	d000      	beq.n	fea8 <SetJoinFailState+0x48>
    fea6:	4798      	blx	r3
    fea8:	2300      	movs	r3, #0
    feaa:	34f9      	adds	r4, #249	; 0xf9
    feac:	7023      	strb	r3, [r4, #0]
    feae:	210b      	movs	r1, #11
    feb0:	4b03      	ldr	r3, [pc, #12]	; (fec0 <SetJoinFailState+0x60>)
    feb2:	2001      	movs	r0, #1
    feb4:	4798      	blx	r3
    feb6:	bd70      	pop	{r4, r5, r6, pc}
    feb8:	20003170 	.word	0x20003170
    febc:	200034cc 	.word	0x200034cc
    fec0:	00008d81 	.word	0x00008d81

0000fec4 <ExecuteRxParamSetupReq>:
    fec4:	b5f0      	push	{r4, r5, r6, r7, lr}
    fec6:	b085      	sub	sp, #20
    fec8:	7805      	ldrb	r5, [r0, #0]
    feca:	0004      	movs	r4, r0
    fecc:	1c41      	adds	r1, r0, #1
    fece:	2204      	movs	r2, #4
    fed0:	4b36      	ldr	r3, [pc, #216]	; (ffac <ExecuteRxParamSetupReq+0xe8>)
    fed2:	a803      	add	r0, sp, #12
    fed4:	4798      	blx	r3
    fed6:	2264      	movs	r2, #100	; 0x64
    fed8:	9b03      	ldr	r3, [sp, #12]
    feda:	a903      	add	r1, sp, #12
    fedc:	021b      	lsls	r3, r3, #8
    fede:	0a1b      	lsrs	r3, r3, #8
    fee0:	4353      	muls	r3, r2
    fee2:	9303      	str	r3, [sp, #12]
    fee4:	1d23      	adds	r3, r4, #4
    fee6:	9301      	str	r3, [sp, #4]
    fee8:	072b      	lsls	r3, r5, #28
    feea:	0f1b      	lsrs	r3, r3, #28
    feec:	b2da      	uxtb	r2, r3
    feee:	9200      	str	r2, [sp, #0]
    fef0:	aa02      	add	r2, sp, #8
    fef2:	1c96      	adds	r6, r2, #2
    fef4:	066d      	lsls	r5, r5, #25
    fef6:	7033      	strb	r3, [r6, #0]
    fef8:	1cd7      	adds	r7, r2, #3
    fefa:	0f6d      	lsrs	r5, r5, #29
    fefc:	2001      	movs	r0, #1
    fefe:	4b2c      	ldr	r3, [pc, #176]	; (ffb0 <ExecuteRxParamSetupReq+0xec>)
    ff00:	703d      	strb	r5, [r7, #0]
    ff02:	4798      	blx	r3
    ff04:	4c2b      	ldr	r4, [pc, #172]	; (ffb4 <ExecuteRxParamSetupReq+0xf0>)
    ff06:	2808      	cmp	r0, #8
    ff08:	d109      	bne.n	ff1e <ExecuteRxParamSetupReq+0x5a>
    ff0a:	0023      	movs	r3, r4
    ff0c:	33e0      	adds	r3, #224	; 0xe0
    ff0e:	781a      	ldrb	r2, [r3, #0]
    ff10:	2303      	movs	r3, #3
    ff12:	4353      	muls	r3, r2
    ff14:	18e3      	adds	r3, r4, r3
    ff16:	3398      	adds	r3, #152	; 0x98
    ff18:	789a      	ldrb	r2, [r3, #2]
    ff1a:	4310      	orrs	r0, r2
    ff1c:	7098      	strb	r0, [r3, #2]
    ff1e:	0031      	movs	r1, r6
    ff20:	200f      	movs	r0, #15
    ff22:	4e23      	ldr	r6, [pc, #140]	; (ffb0 <ExecuteRxParamSetupReq+0xec>)
    ff24:	47b0      	blx	r6
    ff26:	2808      	cmp	r0, #8
    ff28:	d10a      	bne.n	ff40 <ExecuteRxParamSetupReq+0x7c>
    ff2a:	0023      	movs	r3, r4
    ff2c:	33e0      	adds	r3, #224	; 0xe0
    ff2e:	781a      	ldrb	r2, [r3, #0]
    ff30:	2303      	movs	r3, #3
    ff32:	4353      	muls	r3, r2
    ff34:	2210      	movs	r2, #16
    ff36:	18e3      	adds	r3, r4, r3
    ff38:	3398      	adds	r3, #152	; 0x98
    ff3a:	7899      	ldrb	r1, [r3, #2]
    ff3c:	430a      	orrs	r2, r1
    ff3e:	709a      	strb	r2, [r3, #2]
    ff40:	0039      	movs	r1, r7
    ff42:	2018      	movs	r0, #24
    ff44:	47b0      	blx	r6
    ff46:	2808      	cmp	r0, #8
    ff48:	d10a      	bne.n	ff60 <ExecuteRxParamSetupReq+0x9c>
    ff4a:	0023      	movs	r3, r4
    ff4c:	33e0      	adds	r3, #224	; 0xe0
    ff4e:	781a      	ldrb	r2, [r3, #0]
    ff50:	2303      	movs	r3, #3
    ff52:	4353      	muls	r3, r2
    ff54:	2220      	movs	r2, #32
    ff56:	18e3      	adds	r3, r4, r3
    ff58:	3398      	adds	r3, #152	; 0x98
    ff5a:	7899      	ldrb	r1, [r3, #2]
    ff5c:	430a      	orrs	r2, r1
    ff5e:	709a      	strb	r2, [r3, #2]
    ff60:	0023      	movs	r3, r4
    ff62:	33e0      	adds	r3, #224	; 0xe0
    ff64:	781a      	ldrb	r2, [r3, #0]
    ff66:	2303      	movs	r3, #3
    ff68:	4353      	muls	r3, r2
    ff6a:	18e3      	adds	r3, r4, r3
    ff6c:	3398      	adds	r3, #152	; 0x98
    ff6e:	789e      	ldrb	r6, [r3, #2]
    ff70:	06f3      	lsls	r3, r6, #27
    ff72:	d518      	bpl.n	ffa6 <ExecuteRxParamSetupReq+0xe2>
    ff74:	0733      	lsls	r3, r6, #28
    ff76:	d516      	bpl.n	ffa6 <ExecuteRxParamSetupReq+0xe2>
    ff78:	06b6      	lsls	r6, r6, #26
    ff7a:	0ff6      	lsrs	r6, r6, #31
    ff7c:	2e01      	cmp	r6, #1
    ff7e:	d112      	bne.n	ffa6 <ExecuteRxParamSetupReq+0xe2>
    ff80:	0023      	movs	r3, r4
    ff82:	33f7      	adds	r3, #247	; 0xf7
    ff84:	701d      	strb	r5, [r3, #0]
    ff86:	0031      	movs	r1, r6
    ff88:	0030      	movs	r0, r6
    ff8a:	4d0b      	ldr	r5, [pc, #44]	; (ffb8 <ExecuteRxParamSetupReq+0xf4>)
    ff8c:	47a8      	blx	r5
    ff8e:	9900      	ldr	r1, [sp, #0]
    ff90:	9803      	ldr	r0, [sp, #12]
    ff92:	4b0a      	ldr	r3, [pc, #40]	; (ffbc <ExecuteRxParamSetupReq+0xf8>)
    ff94:	4798      	blx	r3
    ff96:	2340      	movs	r3, #64	; 0x40
    ff98:	3484      	adds	r4, #132	; 0x84
    ff9a:	7862      	ldrb	r2, [r4, #1]
    ff9c:	210b      	movs	r1, #11
    ff9e:	4313      	orrs	r3, r2
    ffa0:	7063      	strb	r3, [r4, #1]
    ffa2:	0030      	movs	r0, r6
    ffa4:	47a8      	blx	r5
    ffa6:	9801      	ldr	r0, [sp, #4]
    ffa8:	b005      	add	sp, #20
    ffaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ffac:	000161b7 	.word	0x000161b7
    ffb0:	0000c6f9 	.word	0x0000c6f9
    ffb4:	20003170 	.word	0x20003170
    ffb8:	00008d81 	.word	0x00008d81
    ffbc:	0000fdc5 	.word	0x0000fdc5

0000ffc0 <ExecuteDutyCycle>:
    ffc0:	b570      	push	{r4, r5, r6, lr}
    ffc2:	7803      	ldrb	r3, [r0, #0]
    ffc4:	1c46      	adds	r6, r0, #1
    ffc6:	2b0f      	cmp	r3, #15
    ffc8:	d80f      	bhi.n	ffea <ExecuteDutyCycle+0x2a>
    ffca:	4c09      	ldr	r4, [pc, #36]	; (fff0 <ExecuteDutyCycle+0x30>)
    ffcc:	210b      	movs	r1, #11
    ffce:	0022      	movs	r2, r4
    ffd0:	2000      	movs	r0, #0
    ffd2:	3298      	adds	r2, #152	; 0x98
    ffd4:	4d07      	ldr	r5, [pc, #28]	; (fff4 <ExecuteDutyCycle+0x34>)
    ffd6:	7013      	strb	r3, [r2, #0]
    ffd8:	47a8      	blx	r5
    ffda:	2320      	movs	r3, #32
    ffdc:	3484      	adds	r4, #132	; 0x84
    ffde:	7862      	ldrb	r2, [r4, #1]
    ffe0:	210b      	movs	r1, #11
    ffe2:	4313      	orrs	r3, r2
    ffe4:	7063      	strb	r3, [r4, #1]
    ffe6:	2001      	movs	r0, #1
    ffe8:	47a8      	blx	r5
    ffea:	0030      	movs	r0, r6
    ffec:	bd70      	pop	{r4, r5, r6, pc}
    ffee:	46c0      	nop			; (mov r8, r8)
    fff0:	20003170 	.word	0x20003170
    fff4:	00008d81 	.word	0x00008d81

0000fff8 <ExecuteDlChannel>:
    fff8:	b5f0      	push	{r4, r5, r6, r7, lr}
    fffa:	b089      	sub	sp, #36	; 0x24
    fffc:	7805      	ldrb	r5, [r0, #0]
    fffe:	ab02      	add	r3, sp, #8
   10000:	1c41      	adds	r1, r0, #1
   10002:	0007      	movs	r7, r0
   10004:	719d      	strb	r5, [r3, #6]
   10006:	1d9e      	adds	r6, r3, #6
   10008:	2204      	movs	r2, #4
   1000a:	4b23      	ldr	r3, [pc, #140]	; (10098 <ExecuteDlChannel+0xa0>)
   1000c:	a805      	add	r0, sp, #20
   1000e:	4798      	blx	r3
   10010:	9b05      	ldr	r3, [sp, #20]
   10012:	a904      	add	r1, sp, #16
   10014:	021c      	lsls	r4, r3, #8
   10016:	2364      	movs	r3, #100	; 0x64
   10018:	0a24      	lsrs	r4, r4, #8
   1001a:	435c      	muls	r4, r3
   1001c:	1d3b      	adds	r3, r7, #4
   1001e:	9301      	str	r3, [sp, #4]
   10020:	2301      	movs	r3, #1
   10022:	2015      	movs	r0, #21
   10024:	704b      	strb	r3, [r1, #1]
   10026:	4b1d      	ldr	r3, [pc, #116]	; (1009c <ExecuteDlChannel+0xa4>)
   10028:	9405      	str	r4, [sp, #20]
   1002a:	700d      	strb	r5, [r1, #0]
   1002c:	4798      	blx	r3
   1002e:	2808      	cmp	r0, #8
   10030:	d12f      	bne.n	10092 <ExecuteDlChannel+0x9a>
   10032:	ab02      	add	r3, sp, #8
   10034:	1ddd      	adds	r5, r3, #7
   10036:	2300      	movs	r3, #0
   10038:	702b      	strb	r3, [r5, #0]
   1003a:	7833      	ldrb	r3, [r6, #0]
   1003c:	af06      	add	r7, sp, #24
   1003e:	713b      	strb	r3, [r7, #4]
   10040:	002a      	movs	r2, r5
   10042:	0031      	movs	r1, r6
   10044:	300e      	adds	r0, #14
   10046:	4b16      	ldr	r3, [pc, #88]	; (100a0 <ExecuteDlChannel+0xa8>)
   10048:	9406      	str	r4, [sp, #24]
   1004a:	4798      	blx	r3
   1004c:	280a      	cmp	r0, #10
   1004e:	d00d      	beq.n	1006c <ExecuteDlChannel+0x74>
   10050:	782a      	ldrb	r2, [r5, #0]
   10052:	2a01      	cmp	r2, #1
   10054:	d10a      	bne.n	1006c <ExecuteDlChannel+0x74>
   10056:	4b13      	ldr	r3, [pc, #76]	; (100a4 <ExecuteDlChannel+0xac>)
   10058:	0019      	movs	r1, r3
   1005a:	31e0      	adds	r1, #224	; 0xe0
   1005c:	7808      	ldrb	r0, [r1, #0]
   1005e:	2103      	movs	r1, #3
   10060:	4341      	muls	r1, r0
   10062:	185b      	adds	r3, r3, r1
   10064:	3398      	adds	r3, #152	; 0x98
   10066:	78d9      	ldrb	r1, [r3, #3]
   10068:	430a      	orrs	r2, r1
   1006a:	70da      	strb	r2, [r3, #3]
   1006c:	0039      	movs	r1, r7
   1006e:	2033      	movs	r0, #51	; 0x33
   10070:	4b0d      	ldr	r3, [pc, #52]	; (100a8 <ExecuteDlChannel+0xb0>)
   10072:	4798      	blx	r3
   10074:	2808      	cmp	r0, #8
   10076:	d10c      	bne.n	10092 <ExecuteDlChannel+0x9a>
   10078:	4b0a      	ldr	r3, [pc, #40]	; (100a4 <ExecuteDlChannel+0xac>)
   1007a:	001a      	movs	r2, r3
   1007c:	32e0      	adds	r2, #224	; 0xe0
   1007e:	7811      	ldrb	r1, [r2, #0]
   10080:	2203      	movs	r2, #3
   10082:	434a      	muls	r2, r1
   10084:	189b      	adds	r3, r3, r2
   10086:	2280      	movs	r2, #128	; 0x80
   10088:	3398      	adds	r3, #152	; 0x98
   1008a:	7899      	ldrb	r1, [r3, #2]
   1008c:	4252      	negs	r2, r2
   1008e:	430a      	orrs	r2, r1
   10090:	709a      	strb	r2, [r3, #2]
   10092:	9801      	ldr	r0, [sp, #4]
   10094:	b009      	add	sp, #36	; 0x24
   10096:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10098:	000161b7 	.word	0x000161b7
   1009c:	0000c6f9 	.word	0x0000c6f9
   100a0:	0000c6dd 	.word	0x0000c6dd
   100a4:	20003170 	.word	0x20003170
   100a8:	0000c715 	.word	0x0000c715

000100ac <ExecuteTxParamSetup>:
   100ac:	220f      	movs	r2, #15
   100ae:	b513      	push	{r0, r1, r4, lr}
   100b0:	7803      	ldrb	r3, [r0, #0]
   100b2:	4c0f      	ldr	r4, [pc, #60]	; (100f0 <ExecuteTxParamSetup+0x44>)
   100b4:	401a      	ands	r2, r3
   100b6:	5ca2      	ldrb	r2, [r4, r2]
   100b8:	2401      	movs	r4, #1
   100ba:	a901      	add	r1, sp, #4
   100bc:	700a      	strb	r2, [r1, #0]
   100be:	111a      	asrs	r2, r3, #4
   100c0:	115b      	asrs	r3, r3, #5
   100c2:	4023      	ands	r3, r4
   100c4:	40a3      	lsls	r3, r4
   100c6:	4022      	ands	r2, r4
   100c8:	4313      	orrs	r3, r2
   100ca:	704b      	strb	r3, [r1, #1]
   100cc:	1904      	adds	r4, r0, r4
   100ce:	4b09      	ldr	r3, [pc, #36]	; (100f4 <ExecuteTxParamSetup+0x48>)
   100d0:	2034      	movs	r0, #52	; 0x34
   100d2:	4798      	blx	r3
   100d4:	2808      	cmp	r0, #8
   100d6:	d009      	beq.n	100ec <ExecuteTxParamSetup+0x40>
   100d8:	4b07      	ldr	r3, [pc, #28]	; (100f8 <ExecuteTxParamSetup+0x4c>)
   100da:	001a      	movs	r2, r3
   100dc:	32e0      	adds	r2, #224	; 0xe0
   100de:	7811      	ldrb	r1, [r2, #0]
   100e0:	2203      	movs	r2, #3
   100e2:	434a      	muls	r2, r1
   100e4:	189b      	adds	r3, r3, r2
   100e6:	22ff      	movs	r2, #255	; 0xff
   100e8:	3399      	adds	r3, #153	; 0x99
   100ea:	701a      	strb	r2, [r3, #0]
   100ec:	0020      	movs	r0, r4
   100ee:	bd16      	pop	{r1, r2, r4, pc}
   100f0:	0001830d 	.word	0x0001830d
   100f4:	0000c715 	.word	0x0000c715
   100f8:	20003170 	.word	0x20003170

000100fc <ExecuteLinkAdr>:
   100fc:	220f      	movs	r2, #15
   100fe:	b5f0      	push	{r4, r5, r6, r7, lr}
   10100:	0006      	movs	r6, r0
   10102:	7803      	ldrb	r3, [r0, #0]
   10104:	b089      	sub	sp, #36	; 0x24
   10106:	401a      	ands	r2, r3
   10108:	a905      	add	r1, sp, #20
   1010a:	700a      	strb	r2, [r1, #0]
   1010c:	aa04      	add	r2, sp, #16
   1010e:	1d97      	adds	r7, r2, #6
   10110:	091b      	lsrs	r3, r3, #4
   10112:	7153      	strb	r3, [r2, #5]
   10114:	1c41      	adds	r1, r0, #1
   10116:	2202      	movs	r2, #2
   10118:	0038      	movs	r0, r7
   1011a:	4b3d      	ldr	r3, [pc, #244]	; (10210 <ExecuteLinkAdr+0x114>)
   1011c:	4798      	blx	r3
   1011e:	2201      	movs	r2, #1
   10120:	1d33      	adds	r3, r6, #4
   10122:	9303      	str	r3, [sp, #12]
   10124:	78f3      	ldrb	r3, [r6, #3]
   10126:	4c3b      	ldr	r4, [pc, #236]	; (10214 <ExecuteLinkAdr+0x118>)
   10128:	4d3b      	ldr	r5, [pc, #236]	; (10218 <ExecuteLinkAdr+0x11c>)
   1012a:	065b      	lsls	r3, r3, #25
   1012c:	0f5b      	lsrs	r3, r3, #29
   1012e:	9300      	str	r3, [sp, #0]
   10130:	5d63      	ldrb	r3, [r4, r5]
   10132:	a906      	add	r1, sp, #24
   10134:	4393      	bics	r3, r2
   10136:	1892      	adds	r2, r2, r2
   10138:	4393      	bics	r3, r2
   1013a:	3202      	adds	r2, #2
   1013c:	4393      	bics	r3, r2
   1013e:	5563      	strb	r3, [r4, r5]
   10140:	883b      	ldrh	r3, [r7, #0]
   10142:	2037      	movs	r0, #55	; 0x37
   10144:	9302      	str	r3, [sp, #8]
   10146:	466b      	mov	r3, sp
   10148:	891b      	ldrh	r3, [r3, #8]
   1014a:	4f34      	ldr	r7, [pc, #208]	; (1021c <ExecuteLinkAdr+0x120>)
   1014c:	804b      	strh	r3, [r1, #2]
   1014e:	466b      	mov	r3, sp
   10150:	781b      	ldrb	r3, [r3, #0]
   10152:	700b      	strb	r3, [r1, #0]
   10154:	47b8      	blx	r7
   10156:	2808      	cmp	r0, #8
   10158:	d117      	bne.n	1018a <ExecuteLinkAdr+0x8e>
   1015a:	466b      	mov	r3, sp
   1015c:	891b      	ldrh	r3, [r3, #8]
   1015e:	a907      	add	r1, sp, #28
   10160:	800b      	strh	r3, [r1, #0]
   10162:	466b      	mov	r3, sp
   10164:	781b      	ldrb	r3, [r3, #0]
   10166:	3014      	adds	r0, #20
   10168:	708b      	strb	r3, [r1, #2]
   1016a:	4b2d      	ldr	r3, [pc, #180]	; (10220 <ExecuteLinkAdr+0x124>)
   1016c:	4798      	blx	r3
   1016e:	2201      	movs	r2, #1
   10170:	5d63      	ldrb	r3, [r4, r5]
   10172:	2010      	movs	r0, #16
   10174:	4313      	orrs	r3, r2
   10176:	5563      	strb	r3, [r4, r5]
   10178:	ab04      	add	r3, sp, #16
   1017a:	1d59      	adds	r1, r3, #5
   1017c:	47b8      	blx	r7
   1017e:	2808      	cmp	r0, #8
   10180:	d103      	bne.n	1018a <ExecuteLinkAdr+0x8e>
   10182:	2202      	movs	r2, #2
   10184:	5d63      	ldrb	r3, [r4, r5]
   10186:	4313      	orrs	r3, r2
   10188:	5563      	strb	r3, [r4, r5]
   1018a:	af05      	add	r7, sp, #20
   1018c:	4b23      	ldr	r3, [pc, #140]	; (1021c <ExecuteLinkAdr+0x120>)
   1018e:	0039      	movs	r1, r7
   10190:	201d      	movs	r0, #29
   10192:	4798      	blx	r3
   10194:	4b1f      	ldr	r3, [pc, #124]	; (10214 <ExecuteLinkAdr+0x118>)
   10196:	2808      	cmp	r0, #8
   10198:	d103      	bne.n	101a2 <ExecuteLinkAdr+0xa6>
   1019a:	2204      	movs	r2, #4
   1019c:	5d59      	ldrb	r1, [r3, r5]
   1019e:	430a      	orrs	r2, r1
   101a0:	555a      	strb	r2, [r3, r5]
   101a2:	5d5a      	ldrb	r2, [r3, r5]
   101a4:	43d2      	mvns	r2, r2
   101a6:	0752      	lsls	r2, r2, #29
   101a8:	d12a      	bne.n	10200 <ExecuteLinkAdr+0x104>
   101aa:	4669      	mov	r1, sp
   101ac:	4a1d      	ldr	r2, [pc, #116]	; (10224 <ExecuteLinkAdr+0x128>)
   101ae:	7a09      	ldrb	r1, [r1, #8]
   101b0:	5499      	strb	r1, [r3, r2]
   101b2:	9a02      	ldr	r2, [sp, #8]
   101b4:	491b      	ldr	r1, [pc, #108]	; (10224 <ExecuteLinkAdr+0x128>)
   101b6:	0a12      	lsrs	r2, r2, #8
   101b8:	1859      	adds	r1, r3, r1
   101ba:	704a      	strb	r2, [r1, #1]
   101bc:	aa04      	add	r2, sp, #16
   101be:	3205      	adds	r2, #5
   101c0:	7812      	ldrb	r2, [r2, #0]
   101c2:	2a0f      	cmp	r2, #15
   101c4:	d101      	bne.n	101ca <ExecuteLinkAdr+0xce>
   101c6:	33e7      	adds	r3, #231	; 0xe7
   101c8:	781a      	ldrb	r2, [r3, #0]
   101ca:	2389      	movs	r3, #137	; 0x89
   101cc:	2170      	movs	r1, #112	; 0x70
   101ce:	2070      	movs	r0, #112	; 0x70
   101d0:	009b      	lsls	r3, r3, #2
   101d2:	54e2      	strb	r2, [r4, r3]
   101d4:	78f3      	ldrb	r3, [r6, #3]
   101d6:	4a14      	ldr	r2, [pc, #80]	; (10228 <ExecuteLinkAdr+0x12c>)
   101d8:	4019      	ands	r1, r3
   101da:	5ca3      	ldrb	r3, [r4, r2]
   101dc:	4383      	bics	r3, r0
   101de:	430b      	orrs	r3, r1
   101e0:	54a3      	strb	r3, [r4, r2]
   101e2:	78f1      	ldrb	r1, [r6, #3]
   101e4:	3861      	subs	r0, #97	; 0x61
   101e6:	b2db      	uxtb	r3, r3
   101e8:	4001      	ands	r1, r0
   101ea:	4383      	bics	r3, r0
   101ec:	430b      	orrs	r3, r1
   101ee:	54a3      	strb	r3, [r4, r2]
   101f0:	783b      	ldrb	r3, [r7, #0]
   101f2:	4283      	cmp	r3, r0
   101f4:	d101      	bne.n	101fa <ExecuteLinkAdr+0xfe>
   101f6:	34e9      	adds	r4, #233	; 0xe9
   101f8:	7823      	ldrb	r3, [r4, #0]
   101fa:	4a0c      	ldr	r2, [pc, #48]	; (1022c <ExecuteLinkAdr+0x130>)
   101fc:	4905      	ldr	r1, [pc, #20]	; (10214 <ExecuteLinkAdr+0x118>)
   101fe:	548b      	strb	r3, [r1, r2]
   10200:	4904      	ldr	r1, [pc, #16]	; (10214 <ExecuteLinkAdr+0x118>)
   10202:	4a0b      	ldr	r2, [pc, #44]	; (10230 <ExecuteLinkAdr+0x134>)
   10204:	9803      	ldr	r0, [sp, #12]
   10206:	5c8b      	ldrb	r3, [r1, r2]
   10208:	3301      	adds	r3, #1
   1020a:	548b      	strb	r3, [r1, r2]
   1020c:	b009      	add	sp, #36	; 0x24
   1020e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10210:	000161b7 	.word	0x000161b7
   10214:	20003170 	.word	0x20003170
   10218:	00000223 	.word	0x00000223
   1021c:	0000c6f9 	.word	0x0000c6f9
   10220:	0000c715 	.word	0x0000c715
   10224:	00000227 	.word	0x00000227
   10228:	00000229 	.word	0x00000229
   1022c:	00000225 	.word	0x00000225
   10230:	00000226 	.word	0x00000226

00010234 <ExecuteDevTimeAns>:
   10234:	b510      	push	{r4, lr}
   10236:	0001      	movs	r1, r0
   10238:	0004      	movs	r4, r0
   1023a:	2204      	movs	r2, #4
   1023c:	4b04      	ldr	r3, [pc, #16]	; (10250 <ExecuteDevTimeAns+0x1c>)
   1023e:	4805      	ldr	r0, [pc, #20]	; (10254 <ExecuteDevTimeAns+0x20>)
   10240:	4798      	blx	r3
   10242:	238e      	movs	r3, #142	; 0x8e
   10244:	7921      	ldrb	r1, [r4, #4]
   10246:	4a04      	ldr	r2, [pc, #16]	; (10258 <ExecuteDevTimeAns+0x24>)
   10248:	009b      	lsls	r3, r3, #2
   1024a:	1d60      	adds	r0, r4, #5
   1024c:	54d1      	strb	r1, [r2, r3]
   1024e:	bd10      	pop	{r4, pc}
   10250:	000161b7 	.word	0x000161b7
   10254:	200033a4 	.word	0x200033a4
   10258:	20003170 	.word	0x20003170

0001025c <PrepareJoinRequestFrame>:
   1025c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1025e:	2210      	movs	r2, #16
   10260:	4d22      	ldr	r5, [pc, #136]	; (102ec <PrepareJoinRequestFrame+0x90>)
   10262:	4b23      	ldr	r3, [pc, #140]	; (102f0 <PrepareJoinRequestFrame+0x94>)
   10264:	32ff      	adds	r2, #255	; 0xff
   10266:	2100      	movs	r1, #0
   10268:	0028      	movs	r0, r5
   1026a:	4798      	blx	r3
   1026c:	2300      	movs	r3, #0
   1026e:	4c21      	ldr	r4, [pc, #132]	; (102f4 <PrepareJoinRequestFrame+0x98>)
   10270:	702b      	strb	r3, [r5, #0]
   10272:	4b21      	ldr	r3, [pc, #132]	; (102f8 <PrepareJoinRequestFrame+0x9c>)
   10274:	5ce3      	ldrb	r3, [r4, r3]
   10276:	2b00      	cmp	r3, #0
   10278:	d006      	beq.n	10288 <PrepareJoinRequestFrame+0x2c>
   1027a:	4920      	ldr	r1, [pc, #128]	; (102fc <PrepareJoinRequestFrame+0xa0>)
   1027c:	2006      	movs	r0, #6
   1027e:	4e20      	ldr	r6, [pc, #128]	; (10300 <PrepareJoinRequestFrame+0xa4>)
   10280:	47b0      	blx	r6
   10282:	4920      	ldr	r1, [pc, #128]	; (10304 <PrepareJoinRequestFrame+0xa8>)
   10284:	2007      	movs	r0, #7
   10286:	47b0      	blx	r6
   10288:	2300      	movs	r3, #0
   1028a:	205c      	movs	r0, #92	; 0x5c
   1028c:	1ac1      	subs	r1, r0, r3
   1028e:	5c61      	ldrb	r1, [r4, r1]
   10290:	18ea      	adds	r2, r5, r3
   10292:	3301      	adds	r3, #1
   10294:	7051      	strb	r1, [r2, #1]
   10296:	2b08      	cmp	r3, #8
   10298:	d1f8      	bne.n	1028c <PrepareJoinRequestFrame+0x30>
   1029a:	2300      	movs	r3, #0
   1029c:	2064      	movs	r0, #100	; 0x64
   1029e:	1ac1      	subs	r1, r0, r3
   102a0:	5c61      	ldrb	r1, [r4, r1]
   102a2:	18ea      	adds	r2, r5, r3
   102a4:	3301      	adds	r3, #1
   102a6:	7251      	strb	r1, [r2, #9]
   102a8:	2b08      	cmp	r3, #8
   102aa:	d1f8      	bne.n	1029e <PrepareJoinRequestFrame+0x42>
   102ac:	4b16      	ldr	r3, [pc, #88]	; (10308 <PrepareJoinRequestFrame+0xac>)
   102ae:	4798      	blx	r3
   102b0:	4b16      	ldr	r3, [pc, #88]	; (1030c <PrepareJoinRequestFrame+0xb0>)
   102b2:	4917      	ldr	r1, [pc, #92]	; (10310 <PrepareJoinRequestFrame+0xb4>)
   102b4:	4798      	blx	r3
   102b6:	34cc      	adds	r4, #204	; 0xcc
   102b8:	8021      	strh	r1, [r4, #0]
   102ba:	2202      	movs	r2, #2
   102bc:	0021      	movs	r1, r4
   102be:	4815      	ldr	r0, [pc, #84]	; (10314 <PrepareJoinRequestFrame+0xb8>)
   102c0:	4c15      	ldr	r4, [pc, #84]	; (10318 <PrepareJoinRequestFrame+0xbc>)
   102c2:	47a0      	blx	r4
   102c4:	2313      	movs	r3, #19
   102c6:	4e15      	ldr	r6, [pc, #84]	; (1031c <PrepareJoinRequestFrame+0xc0>)
   102c8:	9300      	str	r3, [sp, #0]
   102ca:	0032      	movs	r2, r6
   102cc:	002b      	movs	r3, r5
   102ce:	2100      	movs	r1, #0
   102d0:	4d13      	ldr	r5, [pc, #76]	; (10320 <PrepareJoinRequestFrame+0xc4>)
   102d2:	4814      	ldr	r0, [pc, #80]	; (10324 <PrepareJoinRequestFrame+0xc8>)
   102d4:	47a8      	blx	r5
   102d6:	0031      	movs	r1, r6
   102d8:	2204      	movs	r2, #4
   102da:	a803      	add	r0, sp, #12
   102dc:	47a0      	blx	r4
   102de:	2204      	movs	r2, #4
   102e0:	a903      	add	r1, sp, #12
   102e2:	4811      	ldr	r0, [pc, #68]	; (10328 <PrepareJoinRequestFrame+0xcc>)
   102e4:	47a0      	blx	r4
   102e6:	2017      	movs	r0, #23
   102e8:	b004      	add	sp, #16
   102ea:	bd70      	pop	{r4, r5, r6, pc}
   102ec:	200033b8 	.word	0x200033b8
   102f0:	000161c9 	.word	0x000161c9
   102f4:	20003170 	.word	0x20003170
   102f8:	0000022d 	.word	0x0000022d
   102fc:	200031c5 	.word	0x200031c5
   10300:	0000715d 	.word	0x0000715d
   10304:	200031cd 	.word	0x200031cd
   10308:	000168fd 	.word	0x000168fd
   1030c:	00013235 	.word	0x00013235
   10310:	0000ffff 	.word	0x0000ffff
   10314:	200033c9 	.word	0x200033c9
   10318:	000161b7 	.word	0x000161b7
   1031c:	20001e9d 	.word	0x20001e9d
   10320:	00007161 	.word	0x00007161
   10324:	200031b5 	.word	0x200031b5
   10328:	200033cb 	.word	0x200033cb

0001032c <ConfigureRadioRx>:
   1032c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1032e:	b087      	sub	sp, #28
   10330:	466b      	mov	r3, sp
   10332:	2600      	movs	r6, #0
   10334:	1ddc      	adds	r4, r3, #7
   10336:	71d8      	strb	r0, [r3, #7]
   10338:	729e      	strb	r6, [r3, #10]
   1033a:	466a      	mov	r2, sp
   1033c:	2301      	movs	r3, #1
   1033e:	72d3      	strb	r3, [r2, #11]
   10340:	2215      	movs	r2, #21
   10342:	ad03      	add	r5, sp, #12
   10344:	4f11      	ldr	r7, [pc, #68]	; (1038c <ConfigureRadioRx+0x60>)
   10346:	9100      	str	r1, [sp, #0]
   10348:	446a      	add	r2, sp
   1034a:	0021      	movs	r1, r4
   1034c:	2023      	movs	r0, #35	; 0x23
   1034e:	80ae      	strh	r6, [r5, #4]
   10350:	47b8      	blx	r7
   10352:	2216      	movs	r2, #22
   10354:	0021      	movs	r1, r4
   10356:	446a      	add	r2, sp
   10358:	2024      	movs	r0, #36	; 0x24
   1035a:	47b8      	blx	r7
   1035c:	2217      	movs	r2, #23
   1035e:	0021      	movs	r1, r4
   10360:	446a      	add	r2, sp
   10362:	2025      	movs	r0, #37	; 0x25
   10364:	47b8      	blx	r7
   10366:	9b00      	ldr	r3, [sp, #0]
   10368:	0028      	movs	r0, r5
   1036a:	9303      	str	r3, [sp, #12]
   1036c:	4b08      	ldr	r3, [pc, #32]	; (10390 <ConfigureRadioRx+0x64>)
   1036e:	80ae      	strh	r6, [r5, #4]
   10370:	4798      	blx	r3
   10372:	230a      	movs	r3, #10
   10374:	446b      	add	r3, sp
   10376:	0019      	movs	r1, r3
   10378:	4c06      	ldr	r4, [pc, #24]	; (10394 <ConfigureRadioRx+0x68>)
   1037a:	2014      	movs	r0, #20
   1037c:	47a0      	blx	r4
   1037e:	230b      	movs	r3, #11
   10380:	446b      	add	r3, sp
   10382:	0019      	movs	r1, r3
   10384:	2006      	movs	r0, #6
   10386:	47a0      	blx	r4
   10388:	b007      	add	sp, #28
   1038a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1038c:	0000c6dd 	.word	0x0000c6dd
   10390:	0000f999 	.word	0x0000f999
   10394:	0000dd25 	.word	0x0000dd25

00010398 <ConfigureRadioTx>:
   10398:	b5f0      	push	{r4, r5, r6, r7, lr}
   1039a:	2517      	movs	r5, #23
   1039c:	2300      	movs	r3, #0
   1039e:	2616      	movs	r6, #22
   103a0:	2701      	movs	r7, #1
   103a2:	b087      	sub	sp, #28
   103a4:	ac01      	add	r4, sp, #4
   103a6:	446d      	add	r5, sp
   103a8:	9001      	str	r0, [sp, #4]
   103aa:	702b      	strb	r3, [r5, #0]
   103ac:	0020      	movs	r0, r4
   103ae:	4b10      	ldr	r3, [pc, #64]	; (103f0 <ConfigureRadioTx+0x58>)
   103b0:	446e      	add	r6, sp
   103b2:	9102      	str	r1, [sp, #8]
   103b4:	9203      	str	r2, [sp, #12]
   103b6:	7037      	strb	r7, [r6, #0]
   103b8:	4798      	blx	r3
   103ba:	79e3      	ldrb	r3, [r4, #7]
   103bc:	4c0d      	ldr	r4, [pc, #52]	; (103f4 <ConfigureRadioTx+0x5c>)
   103be:	2b00      	cmp	r3, #0
   103c0:	d00a      	beq.n	103d8 <ConfigureRadioTx+0x40>
   103c2:	4b0d      	ldr	r3, [pc, #52]	; (103f8 <ConfigureRadioTx+0x60>)
   103c4:	4a0d      	ldr	r2, [pc, #52]	; (103fc <ConfigureRadioTx+0x64>)
   103c6:	490e      	ldr	r1, [pc, #56]	; (10400 <ConfigureRadioTx+0x68>)
   103c8:	54d7      	strb	r7, [r2, r3]
   103ca:	200b      	movs	r0, #11
   103cc:	4b0d      	ldr	r3, [pc, #52]	; (10404 <ConfigureRadioTx+0x6c>)
   103ce:	4798      	blx	r3
   103d0:	210a      	movs	r1, #10
   103d2:	200b      	movs	r0, #11
   103d4:	4469      	add	r1, sp
   103d6:	47a0      	blx	r4
   103d8:	a903      	add	r1, sp, #12
   103da:	2004      	movs	r0, #4
   103dc:	47a0      	blx	r4
   103de:	0031      	movs	r1, r6
   103e0:	2014      	movs	r0, #20
   103e2:	47a0      	blx	r4
   103e4:	0029      	movs	r1, r5
   103e6:	2006      	movs	r0, #6
   103e8:	47a0      	blx	r4
   103ea:	b007      	add	sp, #28
   103ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   103ee:	46c0      	nop			; (mov r8, r8)
   103f0:	0000f999 	.word	0x0000f999
   103f4:	0000dd25 	.word	0x0000dd25
   103f8:	00000222 	.word	0x00000222
   103fc:	20003170 	.word	0x20003170
   10400:	20003391 	.word	0x20003391
   10404:	0000dc35 	.word	0x0000dc35

00010408 <LorawanGetChAndInitiateRadioTransmit>:
   10408:	2301      	movs	r3, #1
   1040a:	b530      	push	{r4, r5, lr}
   1040c:	4c46      	ldr	r4, [pc, #280]	; (10528 <LorawanGetChAndInitiateRadioTransmit+0x120>)
   1040e:	b089      	sub	sp, #36	; 0x24
   10410:	a902      	add	r1, sp, #8
   10412:	700b      	strb	r3, [r1, #0]
   10414:	0023      	movs	r3, r4
   10416:	33e9      	adds	r3, #233	; 0xe9
   10418:	781b      	ldrb	r3, [r3, #0]
   1041a:	704b      	strb	r3, [r1, #1]
   1041c:	0023      	movs	r3, r4
   1041e:	33e7      	adds	r3, #231	; 0xe7
   10420:	781b      	ldrb	r3, [r3, #0]
   10422:	708b      	strb	r3, [r1, #2]
   10424:	0023      	movs	r3, r4
   10426:	33fd      	adds	r3, #253	; 0xfd
   10428:	781b      	ldrb	r3, [r3, #0]
   1042a:	2b01      	cmp	r3, #1
   1042c:	d108      	bne.n	10440 <LorawanGetChAndInitiateRadioTransmit+0x38>
   1042e:	0020      	movs	r0, r4
   10430:	220e      	movs	r2, #14
   10432:	3084      	adds	r0, #132	; 0x84
   10434:	7803      	ldrb	r3, [r0, #0]
   10436:	4393      	bics	r3, r2
   10438:	001a      	movs	r2, r3
   1043a:	230c      	movs	r3, #12
   1043c:	4313      	orrs	r3, r2
   1043e:	7003      	strb	r3, [r0, #0]
   10440:	aa05      	add	r2, sp, #20
   10442:	202e      	movs	r0, #46	; 0x2e
   10444:	4d39      	ldr	r5, [pc, #228]	; (1052c <LorawanGetChAndInitiateRadioTransmit+0x124>)
   10446:	47a8      	blx	r5
   10448:	0023      	movs	r3, r4
   1044a:	2808      	cmp	r0, #8
   1044c:	d135      	bne.n	104ba <LorawanGetChAndInitiateRadioTransmit+0xb2>
   1044e:	33fd      	adds	r3, #253	; 0xfd
   10450:	781b      	ldrb	r3, [r3, #0]
   10452:	ad03      	add	r5, sp, #12
   10454:	2b04      	cmp	r3, #4
   10456:	d108      	bne.n	1046a <LorawanGetChAndInitiateRadioTransmit+0x62>
   10458:	2390      	movs	r3, #144	; 0x90
   1045a:	2200      	movs	r2, #0
   1045c:	009b      	lsls	r3, r3, #2
   1045e:	54e2      	strb	r2, [r4, r3]
   10460:	2301      	movs	r3, #1
   10462:	0028      	movs	r0, r5
   10464:	702b      	strb	r3, [r5, #0]
   10466:	4b32      	ldr	r3, [pc, #200]	; (10530 <LorawanGetChAndInitiateRadioTransmit+0x128>)
   10468:	4798      	blx	r3
   1046a:	9805      	ldr	r0, [sp, #20]
   1046c:	4b31      	ldr	r3, [pc, #196]	; (10534 <LorawanGetChAndInitiateRadioTransmit+0x12c>)
   1046e:	9906      	ldr	r1, [sp, #24]
   10470:	9a07      	ldr	r2, [sp, #28]
   10472:	4798      	blx	r3
   10474:	0023      	movs	r3, r4
   10476:	33ce      	adds	r3, #206	; 0xce
   10478:	881b      	ldrh	r3, [r3, #0]
   1047a:	0028      	movs	r0, r5
   1047c:	702b      	strb	r3, [r5, #0]
   1047e:	4b2e      	ldr	r3, [pc, #184]	; (10538 <LorawanGetChAndInitiateRadioTransmit+0x130>)
   10480:	606b      	str	r3, [r5, #4]
   10482:	4b2e      	ldr	r3, [pc, #184]	; (1053c <LorawanGetChAndInitiateRadioTransmit+0x134>)
   10484:	4798      	blx	r3
   10486:	2800      	cmp	r0, #0
   10488:	d109      	bne.n	1049e <LorawanGetChAndInitiateRadioTransmit+0x96>
   1048a:	220e      	movs	r2, #14
   1048c:	3484      	adds	r4, #132	; 0x84
   1048e:	7823      	ldrb	r3, [r4, #0]
   10490:	4393      	bics	r3, r2
   10492:	001a      	movs	r2, r3
   10494:	2302      	movs	r3, #2
   10496:	4313      	orrs	r3, r2
   10498:	7023      	strb	r3, [r4, #0]
   1049a:	b009      	add	sp, #36	; 0x24
   1049c:	bd30      	pop	{r4, r5, pc}
   1049e:	2200      	movs	r2, #0
   104a0:	4b27      	ldr	r3, [pc, #156]	; (10540 <LorawanGetChAndInitiateRadioTransmit+0x138>)
   104a2:	4928      	ldr	r1, [pc, #160]	; (10544 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
   104a4:	5ce3      	ldrb	r3, [r4, r3]
   104a6:	34fc      	adds	r4, #252	; 0xfc
   104a8:	4359      	muls	r1, r3
   104aa:	4b27      	ldr	r3, [pc, #156]	; (10548 <LorawanGetChAndInitiateRadioTransmit+0x140>)
   104ac:	7820      	ldrb	r0, [r4, #0]
   104ae:	18c9      	adds	r1, r1, r3
   104b0:	4b26      	ldr	r3, [pc, #152]	; (1054c <LorawanGetChAndInitiateRadioTransmit+0x144>)
   104b2:	9200      	str	r2, [sp, #0]
   104b4:	4c26      	ldr	r4, [pc, #152]	; (10550 <LorawanGetChAndInitiateRadioTransmit+0x148>)
   104b6:	47a0      	blx	r4
   104b8:	e7ef      	b.n	1049a <LorawanGetChAndInitiateRadioTransmit+0x92>
   104ba:	33ff      	adds	r3, #255	; 0xff
   104bc:	7f5b      	ldrb	r3, [r3, #29]
   104be:	079a      	lsls	r2, r3, #30
   104c0:	d515      	bpl.n	104ee <LorawanGetChAndInitiateRadioTransmit+0xe6>
   104c2:	aa03      	add	r2, sp, #12
   104c4:	4923      	ldr	r1, [pc, #140]	; (10554 <LorawanGetChAndInitiateRadioTransmit+0x14c>)
   104c6:	2026      	movs	r0, #38	; 0x26
   104c8:	47a8      	blx	r5
   104ca:	9b03      	ldr	r3, [sp, #12]
   104cc:	1c5a      	adds	r2, r3, #1
   104ce:	d001      	beq.n	104d4 <LorawanGetChAndInitiateRadioTransmit+0xcc>
   104d0:	3314      	adds	r3, #20
   104d2:	9303      	str	r3, [sp, #12]
   104d4:	21fa      	movs	r1, #250	; 0xfa
   104d6:	4b1a      	ldr	r3, [pc, #104]	; (10540 <LorawanGetChAndInitiateRadioTransmit+0x138>)
   104d8:	9a03      	ldr	r2, [sp, #12]
   104da:	5ce3      	ldrb	r3, [r4, r3]
   104dc:	0089      	lsls	r1, r1, #2
   104de:	1ad3      	subs	r3, r2, r3
   104e0:	2200      	movs	r2, #0
   104e2:	4359      	muls	r1, r3
   104e4:	34f2      	adds	r4, #242	; 0xf2
   104e6:	7820      	ldrb	r0, [r4, #0]
   104e8:	9200      	str	r2, [sp, #0]
   104ea:	4b1b      	ldr	r3, [pc, #108]	; (10558 <LorawanGetChAndInitiateRadioTransmit+0x150>)
   104ec:	e7e2      	b.n	104b4 <LorawanGetChAndInitiateRadioTransmit+0xac>
   104ee:	075b      	lsls	r3, r3, #29
   104f0:	d508      	bpl.n	10504 <LorawanGetChAndInitiateRadioTransmit+0xfc>
   104f2:	aa03      	add	r2, sp, #12
   104f4:	4917      	ldr	r1, [pc, #92]	; (10554 <LorawanGetChAndInitiateRadioTransmit+0x14c>)
   104f6:	2032      	movs	r0, #50	; 0x32
   104f8:	47a8      	blx	r5
   104fa:	9b03      	ldr	r3, [sp, #12]
   104fc:	1c5a      	adds	r2, r3, #1
   104fe:	d0e9      	beq.n	104d4 <LorawanGetChAndInitiateRadioTransmit+0xcc>
   10500:	3301      	adds	r3, #1
   10502:	e7e6      	b.n	104d2 <LorawanGetChAndInitiateRadioTransmit+0xca>
   10504:	0023      	movs	r3, r4
   10506:	2201      	movs	r2, #1
   10508:	3394      	adds	r3, #148	; 0x94
   1050a:	781b      	ldrb	r3, [r3, #0]
   1050c:	401a      	ands	r2, r3
   1050e:	d108      	bne.n	10522 <LorawanGetChAndInitiateRadioTransmit+0x11a>
   10510:	4b0b      	ldr	r3, [pc, #44]	; (10540 <LorawanGetChAndInitiateRadioTransmit+0x138>)
   10512:	490c      	ldr	r1, [pc, #48]	; (10544 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
   10514:	5ce3      	ldrb	r3, [r4, r3]
   10516:	34f2      	adds	r4, #242	; 0xf2
   10518:	4359      	muls	r1, r3
   1051a:	4b0b      	ldr	r3, [pc, #44]	; (10548 <LorawanGetChAndInitiateRadioTransmit+0x140>)
   1051c:	7820      	ldrb	r0, [r4, #0]
   1051e:	18c9      	adds	r1, r1, r3
   10520:	e7e2      	b.n	104e8 <LorawanGetChAndInitiateRadioTransmit+0xe0>
   10522:	4b0e      	ldr	r3, [pc, #56]	; (1055c <LorawanGetChAndInitiateRadioTransmit+0x154>)
   10524:	4798      	blx	r3
   10526:	e7b8      	b.n	1049a <LorawanGetChAndInitiateRadioTransmit+0x92>
   10528:	20003170 	.word	0x20003170
   1052c:	0000c6dd 	.word	0x0000c6dd
   10530:	0000ef31 	.word	0x0000ef31
   10534:	00010399 	.word	0x00010399
   10538:	200033c8 	.word	0x200033c8
   1053c:	0000e655 	.word	0x0000e655
   10540:	0000022b 	.word	0x0000022b
   10544:	fffffc18 	.word	0xfffffc18
   10548:	001e8480 	.word	0x001e8480
   1054c:	00010561 	.word	0x00010561
   10550:	0000cc25 	.word	0x0000cc25
   10554:	20003257 	.word	0x20003257
   10558:	00010619 	.word	0x00010619
   1055c:	0000fd71 	.word	0x0000fd71

00010560 <TransmissionErrorCallback>:
   10560:	b530      	push	{r4, r5, lr}
   10562:	4c22      	ldr	r4, [pc, #136]	; (105ec <TransmissionErrorCallback+0x8c>)
   10564:	2501      	movs	r5, #1
   10566:	0023      	movs	r3, r4
   10568:	b08b      	sub	sp, #44	; 0x2c
   1056a:	a903      	add	r1, sp, #12
   1056c:	700d      	strb	r5, [r1, #0]
   1056e:	33e9      	adds	r3, #233	; 0xe9
   10570:	781b      	ldrb	r3, [r3, #0]
   10572:	aa07      	add	r2, sp, #28
   10574:	704b      	strb	r3, [r1, #1]
   10576:	0023      	movs	r3, r4
   10578:	33e7      	adds	r3, #231	; 0xe7
   1057a:	781b      	ldrb	r3, [r3, #0]
   1057c:	202e      	movs	r0, #46	; 0x2e
   1057e:	708b      	strb	r3, [r1, #2]
   10580:	4b1b      	ldr	r3, [pc, #108]	; (105f0 <TransmissionErrorCallback+0x90>)
   10582:	4798      	blx	r3
   10584:	2808      	cmp	r0, #8
   10586:	d121      	bne.n	105cc <TransmissionErrorCallback+0x6c>
   10588:	a804      	add	r0, sp, #16
   1058a:	4b1a      	ldr	r3, [pc, #104]	; (105f4 <TransmissionErrorCallback+0x94>)
   1058c:	7005      	strb	r5, [r0, #0]
   1058e:	4798      	blx	r3
   10590:	9807      	ldr	r0, [sp, #28]
   10592:	4b19      	ldr	r3, [pc, #100]	; (105f8 <TransmissionErrorCallback+0x98>)
   10594:	9908      	ldr	r1, [sp, #32]
   10596:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10598:	4798      	blx	r3
   1059a:	0023      	movs	r3, r4
   1059c:	33ce      	adds	r3, #206	; 0xce
   1059e:	881b      	ldrh	r3, [r3, #0]
   105a0:	a805      	add	r0, sp, #20
   105a2:	7003      	strb	r3, [r0, #0]
   105a4:	4b15      	ldr	r3, [pc, #84]	; (105fc <TransmissionErrorCallback+0x9c>)
   105a6:	6043      	str	r3, [r0, #4]
   105a8:	4b15      	ldr	r3, [pc, #84]	; (10600 <TransmissionErrorCallback+0xa0>)
   105aa:	4798      	blx	r3
   105ac:	2800      	cmp	r0, #0
   105ae:	d01a      	beq.n	105e6 <TransmissionErrorCallback+0x86>
   105b0:	0023      	movs	r3, r4
   105b2:	33fd      	adds	r3, #253	; 0xfd
   105b4:	781b      	ldrb	r3, [r3, #0]
   105b6:	42ab      	cmp	r3, r5
   105b8:	d108      	bne.n	105cc <TransmissionErrorCallback+0x6c>
   105ba:	0021      	movs	r1, r4
   105bc:	220e      	movs	r2, #14
   105be:	3184      	adds	r1, #132	; 0x84
   105c0:	780b      	ldrb	r3, [r1, #0]
   105c2:	4393      	bics	r3, r2
   105c4:	001a      	movs	r2, r3
   105c6:	230c      	movs	r3, #12
   105c8:	4313      	orrs	r3, r2
   105ca:	700b      	strb	r3, [r1, #0]
   105cc:	2200      	movs	r2, #0
   105ce:	4b0d      	ldr	r3, [pc, #52]	; (10604 <TransmissionErrorCallback+0xa4>)
   105d0:	490d      	ldr	r1, [pc, #52]	; (10608 <TransmissionErrorCallback+0xa8>)
   105d2:	5ce3      	ldrb	r3, [r4, r3]
   105d4:	34fc      	adds	r4, #252	; 0xfc
   105d6:	4359      	muls	r1, r3
   105d8:	4b0c      	ldr	r3, [pc, #48]	; (1060c <TransmissionErrorCallback+0xac>)
   105da:	7820      	ldrb	r0, [r4, #0]
   105dc:	18c9      	adds	r1, r1, r3
   105de:	9200      	str	r2, [sp, #0]
   105e0:	4b0b      	ldr	r3, [pc, #44]	; (10610 <TransmissionErrorCallback+0xb0>)
   105e2:	4c0c      	ldr	r4, [pc, #48]	; (10614 <TransmissionErrorCallback+0xb4>)
   105e4:	47a0      	blx	r4
   105e6:	b00b      	add	sp, #44	; 0x2c
   105e8:	bd30      	pop	{r4, r5, pc}
   105ea:	46c0      	nop			; (mov r8, r8)
   105ec:	20003170 	.word	0x20003170
   105f0:	0000c6dd 	.word	0x0000c6dd
   105f4:	0000ef31 	.word	0x0000ef31
   105f8:	00010399 	.word	0x00010399
   105fc:	200033c8 	.word	0x200033c8
   10600:	0000e655 	.word	0x0000e655
   10604:	0000022b 	.word	0x0000022b
   10608:	fffffc18 	.word	0xfffffc18
   1060c:	001e8480 	.word	0x001e8480
   10610:	00010561 	.word	0x00010561
   10614:	0000cc25 	.word	0x0000cc25

00010618 <UnconfirmedTransmissionCallback>:
   10618:	b5f0      	push	{r4, r5, r6, r7, lr}
   1061a:	4c3a      	ldr	r4, [pc, #232]	; (10704 <UnconfirmedTransmissionCallback+0xec>)
   1061c:	b08b      	sub	sp, #44	; 0x2c
   1061e:	0023      	movs	r3, r4
   10620:	33ce      	adds	r3, #206	; 0xce
   10622:	881b      	ldrh	r3, [r3, #0]
   10624:	af05      	add	r7, sp, #20
   10626:	703b      	strb	r3, [r7, #0]
   10628:	4b37      	ldr	r3, [pc, #220]	; (10708 <UnconfirmedTransmissionCallback+0xf0>)
   1062a:	a903      	add	r1, sp, #12
   1062c:	9306      	str	r3, [sp, #24]
   1062e:	2301      	movs	r3, #1
   10630:	700b      	strb	r3, [r1, #0]
   10632:	0023      	movs	r3, r4
   10634:	0026      	movs	r6, r4
   10636:	33e9      	adds	r3, #233	; 0xe9
   10638:	781b      	ldrb	r3, [r3, #0]
   1063a:	36e7      	adds	r6, #231	; 0xe7
   1063c:	704b      	strb	r3, [r1, #1]
   1063e:	7833      	ldrb	r3, [r6, #0]
   10640:	aa07      	add	r2, sp, #28
   10642:	202e      	movs	r0, #46	; 0x2e
   10644:	4d31      	ldr	r5, [pc, #196]	; (1070c <UnconfirmedTransmissionCallback+0xf4>)
   10646:	708b      	strb	r3, [r1, #2]
   10648:	47a8      	blx	r5
   1064a:	2808      	cmp	r0, #8
   1064c:	d12b      	bne.n	106a6 <UnconfirmedTransmissionCallback+0x8e>
   1064e:	2301      	movs	r3, #1
   10650:	a804      	add	r0, sp, #16
   10652:	7003      	strb	r3, [r0, #0]
   10654:	4b2e      	ldr	r3, [pc, #184]	; (10710 <UnconfirmedTransmissionCallback+0xf8>)
   10656:	4798      	blx	r3
   10658:	9807      	ldr	r0, [sp, #28]
   1065a:	4b2e      	ldr	r3, [pc, #184]	; (10714 <UnconfirmedTransmissionCallback+0xfc>)
   1065c:	9908      	ldr	r1, [sp, #32]
   1065e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10660:	4798      	blx	r3
   10662:	0038      	movs	r0, r7
   10664:	4b2c      	ldr	r3, [pc, #176]	; (10718 <UnconfirmedTransmissionCallback+0x100>)
   10666:	4798      	blx	r3
   10668:	2800      	cmp	r0, #0
   1066a:	d01a      	beq.n	106a2 <UnconfirmedTransmissionCallback+0x8a>
   1066c:	0023      	movs	r3, r4
   1066e:	33fd      	adds	r3, #253	; 0xfd
   10670:	781b      	ldrb	r3, [r3, #0]
   10672:	2b01      	cmp	r3, #1
   10674:	d108      	bne.n	10688 <UnconfirmedTransmissionCallback+0x70>
   10676:	0021      	movs	r1, r4
   10678:	220e      	movs	r2, #14
   1067a:	3184      	adds	r1, #132	; 0x84
   1067c:	780b      	ldrb	r3, [r1, #0]
   1067e:	4393      	bics	r3, r2
   10680:	001a      	movs	r2, r3
   10682:	230c      	movs	r3, #12
   10684:	4313      	orrs	r3, r2
   10686:	700b      	strb	r3, [r1, #0]
   10688:	2200      	movs	r2, #0
   1068a:	4b24      	ldr	r3, [pc, #144]	; (1071c <UnconfirmedTransmissionCallback+0x104>)
   1068c:	4924      	ldr	r1, [pc, #144]	; (10720 <UnconfirmedTransmissionCallback+0x108>)
   1068e:	5ce3      	ldrb	r3, [r4, r3]
   10690:	34fc      	adds	r4, #252	; 0xfc
   10692:	4359      	muls	r1, r3
   10694:	4b23      	ldr	r3, [pc, #140]	; (10724 <UnconfirmedTransmissionCallback+0x10c>)
   10696:	7820      	ldrb	r0, [r4, #0]
   10698:	18c9      	adds	r1, r1, r3
   1069a:	4b23      	ldr	r3, [pc, #140]	; (10728 <UnconfirmedTransmissionCallback+0x110>)
   1069c:	9200      	str	r2, [sp, #0]
   1069e:	4c23      	ldr	r4, [pc, #140]	; (1072c <UnconfirmedTransmissionCallback+0x114>)
   106a0:	47a0      	blx	r4
   106a2:	b00b      	add	sp, #44	; 0x2c
   106a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   106a6:	4b22      	ldr	r3, [pc, #136]	; (10730 <UnconfirmedTransmissionCallback+0x118>)
   106a8:	4798      	blx	r3
   106aa:	4b22      	ldr	r3, [pc, #136]	; (10734 <UnconfirmedTransmissionCallback+0x11c>)
   106ac:	4922      	ldr	r1, [pc, #136]	; (10738 <UnconfirmedTransmissionCallback+0x120>)
   106ae:	4798      	blx	r3
   106b0:	23fa      	movs	r3, #250	; 0xfa
   106b2:	009b      	lsls	r3, r3, #2
   106b4:	18c9      	adds	r1, r1, r3
   106b6:	0023      	movs	r3, r4
   106b8:	9104      	str	r1, [sp, #16]
   106ba:	33ff      	adds	r3, #255	; 0xff
   106bc:	7f5b      	ldrb	r3, [r3, #29]
   106be:	079a      	lsls	r2, r3, #30
   106c0:	d515      	bpl.n	106ee <UnconfirmedTransmissionCallback+0xd6>
   106c2:	aa04      	add	r2, sp, #16
   106c4:	0031      	movs	r1, r6
   106c6:	2026      	movs	r0, #38	; 0x26
   106c8:	47a8      	blx	r5
   106ca:	9b04      	ldr	r3, [sp, #16]
   106cc:	1c5a      	adds	r2, r3, #1
   106ce:	d001      	beq.n	106d4 <UnconfirmedTransmissionCallback+0xbc>
   106d0:	3314      	adds	r3, #20
   106d2:	9304      	str	r3, [sp, #16]
   106d4:	4b11      	ldr	r3, [pc, #68]	; (1071c <UnconfirmedTransmissionCallback+0x104>)
   106d6:	9a04      	ldr	r2, [sp, #16]
   106d8:	5ce3      	ldrb	r3, [r4, r3]
   106da:	21fa      	movs	r1, #250	; 0xfa
   106dc:	1ad3      	subs	r3, r2, r3
   106de:	2200      	movs	r2, #0
   106e0:	0089      	lsls	r1, r1, #2
   106e2:	34f2      	adds	r4, #242	; 0xf2
   106e4:	4359      	muls	r1, r3
   106e6:	7820      	ldrb	r0, [r4, #0]
   106e8:	4b14      	ldr	r3, [pc, #80]	; (1073c <UnconfirmedTransmissionCallback+0x124>)
   106ea:	9200      	str	r2, [sp, #0]
   106ec:	e7d7      	b.n	1069e <UnconfirmedTransmissionCallback+0x86>
   106ee:	075b      	lsls	r3, r3, #29
   106f0:	d5f0      	bpl.n	106d4 <UnconfirmedTransmissionCallback+0xbc>
   106f2:	aa04      	add	r2, sp, #16
   106f4:	0031      	movs	r1, r6
   106f6:	2032      	movs	r0, #50	; 0x32
   106f8:	47a8      	blx	r5
   106fa:	9b04      	ldr	r3, [sp, #16]
   106fc:	1c5a      	adds	r2, r3, #1
   106fe:	d0e9      	beq.n	106d4 <UnconfirmedTransmissionCallback+0xbc>
   10700:	3301      	adds	r3, #1
   10702:	e7e6      	b.n	106d2 <UnconfirmedTransmissionCallback+0xba>
   10704:	20003170 	.word	0x20003170
   10708:	200033c8 	.word	0x200033c8
   1070c:	0000c6dd 	.word	0x0000c6dd
   10710:	0000ef31 	.word	0x0000ef31
   10714:	00010399 	.word	0x00010399
   10718:	0000e655 	.word	0x0000e655
   1071c:	0000022b 	.word	0x0000022b
   10720:	fffffc18 	.word	0xfffffc18
   10724:	001e8480 	.word	0x001e8480
   10728:	00010561 	.word	0x00010561
   1072c:	0000cc25 	.word	0x0000cc25
   10730:	000168fd 	.word	0x000168fd
   10734:	00013235 	.word	0x00013235
   10738:	000007d1 	.word	0x000007d1
   1073c:	00010619 	.word	0x00010619

00010740 <EncryptFRMPayload>:
   10740:	b5f0      	push	{r4, r5, r6, r7, lr}
   10742:	0007      	movs	r7, r0
   10744:	2401      	movs	r4, #1
   10746:	b089      	sub	sp, #36	; 0x24
   10748:	9306      	str	r3, [sp, #24]
   1074a:	ab10      	add	r3, sp, #64	; 0x40
   1074c:	881d      	ldrh	r5, [r3, #0]
   1074e:	090b      	lsrs	r3, r1, #4
   10750:	9104      	str	r1, [sp, #16]
   10752:	9205      	str	r2, [sp, #20]
   10754:	9303      	str	r3, [sp, #12]
   10756:	9b03      	ldr	r3, [sp, #12]
   10758:	429c      	cmp	r4, r3
   1075a:	d907      	bls.n	1076c <EncryptFRMPayload+0x2c>
   1075c:	260f      	movs	r6, #15
   1075e:	9b04      	ldr	r3, [sp, #16]
   10760:	4033      	ands	r3, r6
   10762:	1e1e      	subs	r6, r3, #0
   10764:	d126      	bne.n	107b4 <EncryptFRMPayload+0x74>
   10766:	2000      	movs	r0, #0
   10768:	b009      	add	sp, #36	; 0x24
   1076a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1076c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1076e:	0022      	movs	r2, r4
   10770:	9300      	str	r3, [sp, #0]
   10772:	9906      	ldr	r1, [sp, #24]
   10774:	2301      	movs	r3, #1
   10776:	9805      	ldr	r0, [sp, #20]
   10778:	4e1e      	ldr	r6, [pc, #120]	; (107f4 <EncryptFRMPayload+0xb4>)
   1077a:	47b0      	blx	r6
   1077c:	4e1e      	ldr	r6, [pc, #120]	; (107f8 <EncryptFRMPayload+0xb8>)
   1077e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10780:	2101      	movs	r1, #1
   10782:	0030      	movs	r0, r6
   10784:	4b1d      	ldr	r3, [pc, #116]	; (107fc <EncryptFRMPayload+0xbc>)
   10786:	4798      	blx	r3
   10788:	2800      	cmp	r0, #0
   1078a:	d1ed      	bne.n	10768 <EncryptFRMPayload+0x28>
   1078c:	1e63      	subs	r3, r4, #1
   1078e:	011b      	lsls	r3, r3, #4
   10790:	18fb      	adds	r3, r7, r3
   10792:	9307      	str	r3, [sp, #28]
   10794:	9b07      	ldr	r3, [sp, #28]
   10796:	182a      	adds	r2, r5, r0
   10798:	5c19      	ldrb	r1, [r3, r0]
   1079a:	5d83      	ldrb	r3, [r0, r6]
   1079c:	b292      	uxth	r2, r2
   1079e:	4059      	eors	r1, r3
   107a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   107a2:	3001      	adds	r0, #1
   107a4:	5499      	strb	r1, [r3, r2]
   107a6:	2810      	cmp	r0, #16
   107a8:	d1f4      	bne.n	10794 <EncryptFRMPayload+0x54>
   107aa:	3510      	adds	r5, #16
   107ac:	3401      	adds	r4, #1
   107ae:	b2ad      	uxth	r5, r5
   107b0:	b2e4      	uxtb	r4, r4
   107b2:	e7d0      	b.n	10756 <EncryptFRMPayload+0x16>
   107b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   107b6:	0022      	movs	r2, r4
   107b8:	9300      	str	r3, [sp, #0]
   107ba:	9906      	ldr	r1, [sp, #24]
   107bc:	2301      	movs	r3, #1
   107be:	9805      	ldr	r0, [sp, #20]
   107c0:	4c0c      	ldr	r4, [pc, #48]	; (107f4 <EncryptFRMPayload+0xb4>)
   107c2:	47a0      	blx	r4
   107c4:	4c0c      	ldr	r4, [pc, #48]	; (107f8 <EncryptFRMPayload+0xb8>)
   107c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   107c8:	2101      	movs	r1, #1
   107ca:	0020      	movs	r0, r4
   107cc:	4b0b      	ldr	r3, [pc, #44]	; (107fc <EncryptFRMPayload+0xbc>)
   107ce:	4798      	blx	r3
   107d0:	2800      	cmp	r0, #0
   107d2:	d1c9      	bne.n	10768 <EncryptFRMPayload+0x28>
   107d4:	9b03      	ldr	r3, [sp, #12]
   107d6:	011b      	lsls	r3, r3, #4
   107d8:	18fb      	adds	r3, r7, r3
   107da:	5d07      	ldrb	r7, [r0, r4]
   107dc:	5c19      	ldrb	r1, [r3, r0]
   107de:	182a      	adds	r2, r5, r0
   107e0:	4079      	eors	r1, r7
   107e2:	9f11      	ldr	r7, [sp, #68]	; 0x44
   107e4:	b292      	uxth	r2, r2
   107e6:	3001      	adds	r0, #1
   107e8:	54b9      	strb	r1, [r7, r2]
   107ea:	b2c2      	uxtb	r2, r0
   107ec:	4296      	cmp	r6, r2
   107ee:	d8f4      	bhi.n	107da <EncryptFRMPayload+0x9a>
   107f0:	e7b9      	b.n	10766 <EncryptFRMPayload+0x26>
   107f2:	46c0      	nop			; (mov r8, r8)
   107f4:	0000f959 	.word	0x0000f959
   107f8:	20001e9d 	.word	0x20001e9d
   107fc:	00007129 	.word	0x00007129

00010800 <UpdateTransactionCompleteCbParams>:
   10800:	2388      	movs	r3, #136	; 0x88
   10802:	2201      	movs	r2, #1
   10804:	b570      	push	{r4, r5, r6, lr}
   10806:	0001      	movs	r1, r0
   10808:	4c13      	ldr	r4, [pc, #76]	; (10858 <UpdateTransactionCompleteCbParams+0x58>)
   1080a:	4814      	ldr	r0, [pc, #80]	; (1085c <UpdateTransactionCompleteCbParams+0x5c>)
   1080c:	009b      	lsls	r3, r3, #2
   1080e:	54e2      	strb	r2, [r4, r3]
   10810:	7842      	ldrb	r2, [r0, #1]
   10812:	7803      	ldrb	r3, [r0, #0]
   10814:	0212      	lsls	r2, r2, #8
   10816:	431a      	orrs	r2, r3
   10818:	7883      	ldrb	r3, [r0, #2]
   1081a:	041b      	lsls	r3, r3, #16
   1081c:	431a      	orrs	r2, r3
   1081e:	78c3      	ldrb	r3, [r0, #3]
   10820:	061b      	lsls	r3, r3, #24
   10822:	4313      	orrs	r3, r2
   10824:	d00e      	beq.n	10844 <UpdateTransactionCompleteCbParams+0x44>
   10826:	0022      	movs	r2, r4
   10828:	2504      	movs	r5, #4
   1082a:	32fc      	adds	r2, #252	; 0xfc
   1082c:	6890      	ldr	r0, [r2, #8]
   1082e:	4228      	tst	r0, r5
   10830:	d008      	beq.n	10844 <UpdateTransactionCompleteCbParams+0x44>
   10832:	68d0      	ldr	r0, [r2, #12]
   10834:	2800      	cmp	r0, #0
   10836:	d005      	beq.n	10844 <UpdateTransactionCompleteCbParams+0x44>
   10838:	0022      	movs	r2, r4
   1083a:	32ff      	adds	r2, #255	; 0xff
   1083c:	7451      	strb	r1, [r2, #17]
   1083e:	7355      	strb	r5, [r2, #13]
   10840:	4907      	ldr	r1, [pc, #28]	; (10860 <UpdateTransactionCompleteCbParams+0x60>)
   10842:	4798      	blx	r3
   10844:	2388      	movs	r3, #136	; 0x88
   10846:	009b      	lsls	r3, r3, #2
   10848:	5ce3      	ldrb	r3, [r4, r3]
   1084a:	2b00      	cmp	r3, #0
   1084c:	d002      	beq.n	10854 <UpdateTransactionCompleteCbParams+0x54>
   1084e:	2300      	movs	r3, #0
   10850:	34fc      	adds	r4, #252	; 0xfc
   10852:	60e3      	str	r3, [r4, #12]
   10854:	bd70      	pop	{r4, r5, r6, pc}
   10856:	46c0      	nop			; (mov r8, r8)
   10858:	20003170 	.word	0x20003170
   1085c:	200034cc 	.word	0x200034cc
   10860:	2000327c 	.word	0x2000327c

00010864 <UpdateRxDataAvailableCbParams>:
   10864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10866:	4e0f      	ldr	r6, [pc, #60]	; (108a4 <UpdateRxDataAvailableCbParams+0x40>)
   10868:	469c      	mov	ip, r3
   1086a:	7875      	ldrb	r5, [r6, #1]
   1086c:	7834      	ldrb	r4, [r6, #0]
   1086e:	022d      	lsls	r5, r5, #8
   10870:	4325      	orrs	r5, r4
   10872:	78b4      	ldrb	r4, [r6, #2]
   10874:	0424      	lsls	r4, r4, #16
   10876:	4325      	orrs	r5, r4
   10878:	78f4      	ldrb	r4, [r6, #3]
   1087a:	0624      	lsls	r4, r4, #24
   1087c:	432c      	orrs	r4, r5
   1087e:	d010      	beq.n	108a2 <UpdateRxDataAvailableCbParams+0x3e>
   10880:	4d09      	ldr	r5, [pc, #36]	; (108a8 <UpdateRxDataAvailableCbParams+0x44>)
   10882:	2702      	movs	r7, #2
   10884:	002e      	movs	r6, r5
   10886:	36fc      	adds	r6, #252	; 0xfc
   10888:	68b3      	ldr	r3, [r6, #8]
   1088a:	423b      	tst	r3, r7
   1088c:	d009      	beq.n	108a2 <UpdateRxDataAvailableCbParams+0x3e>
   1088e:	4663      	mov	r3, ip
   10890:	35ff      	adds	r5, #255	; 0xff
   10892:	6170      	str	r0, [r6, #20]
   10894:	61b1      	str	r1, [r6, #24]
   10896:	736f      	strb	r7, [r5, #13]
   10898:	766a      	strb	r2, [r5, #25]
   1089a:	76ab      	strb	r3, [r5, #26]
   1089c:	4903      	ldr	r1, [pc, #12]	; (108ac <UpdateRxDataAvailableCbParams+0x48>)
   1089e:	68f0      	ldr	r0, [r6, #12]
   108a0:	47a0      	blx	r4
   108a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   108a4:	200034cc 	.word	0x200034cc
   108a8:	20003170 	.word	0x20003170
   108ac:	2000327c 	.word	0x2000327c

000108b0 <LorawanNotifyAppOnRxdone>:
   108b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   108b2:	4c25      	ldr	r4, [pc, #148]	; (10948 <LorawanNotifyAppOnRxdone+0x98>)
   108b4:	0007      	movs	r7, r0
   108b6:	0023      	movs	r3, r4
   108b8:	33fd      	adds	r3, #253	; 0xfd
   108ba:	781b      	ldrb	r3, [r3, #0]
   108bc:	000d      	movs	r5, r1
   108be:	0016      	movs	r6, r2
   108c0:	2b01      	cmp	r3, #1
   108c2:	d136      	bne.n	10932 <LorawanNotifyAppOnRxdone+0x82>
   108c4:	0022      	movs	r2, r4
   108c6:	210e      	movs	r1, #14
   108c8:	3284      	adds	r2, #132	; 0x84
   108ca:	7813      	ldrb	r3, [r2, #0]
   108cc:	438b      	bics	r3, r1
   108ce:	7013      	strb	r3, [r2, #0]
   108d0:	491e      	ldr	r1, [pc, #120]	; (1094c <LorawanNotifyAppOnRxdone+0x9c>)
   108d2:	784a      	ldrb	r2, [r1, #1]
   108d4:	780b      	ldrb	r3, [r1, #0]
   108d6:	0212      	lsls	r2, r2, #8
   108d8:	431a      	orrs	r2, r3
   108da:	788b      	ldrb	r3, [r1, #2]
   108dc:	041b      	lsls	r3, r3, #16
   108de:	431a      	orrs	r2, r3
   108e0:	78cb      	ldrb	r3, [r1, #3]
   108e2:	061b      	lsls	r3, r3, #24
   108e4:	4313      	orrs	r3, r2
   108e6:	d023      	beq.n	10930 <LorawanNotifyAppOnRxdone+0x80>
   108e8:	0022      	movs	r2, r4
   108ea:	2120      	movs	r1, #32
   108ec:	3294      	adds	r2, #148	; 0x94
   108ee:	7813      	ldrb	r3, [r2, #0]
   108f0:	438b      	bics	r3, r1
   108f2:	7013      	strb	r3, [r2, #0]
   108f4:	0023      	movs	r3, r4
   108f6:	33fd      	adds	r3, #253	; 0xfd
   108f8:	781b      	ldrb	r3, [r3, #0]
   108fa:	7878      	ldrb	r0, [r7, #1]
   108fc:	469c      	mov	ip, r3
   108fe:	78fa      	ldrb	r2, [r7, #3]
   10900:	78b9      	ldrb	r1, [r7, #2]
   10902:	793b      	ldrb	r3, [r7, #4]
   10904:	4667      	mov	r7, ip
   10906:	0209      	lsls	r1, r1, #8
   10908:	4301      	orrs	r1, r0
   1090a:	0410      	lsls	r0, r2, #16
   1090c:	4308      	orrs	r0, r1
   1090e:	061b      	lsls	r3, r3, #24
   10910:	4318      	orrs	r0, r3
   10912:	0032      	movs	r2, r6
   10914:	2308      	movs	r3, #8
   10916:	0029      	movs	r1, r5
   10918:	2f04      	cmp	r7, #4
   1091a:	d112      	bne.n	10942 <LorawanNotifyAppOnRxdone+0x92>
   1091c:	4d0c      	ldr	r5, [pc, #48]	; (10950 <LorawanNotifyAppOnRxdone+0xa0>)
   1091e:	47a8      	blx	r5
   10920:	2388      	movs	r3, #136	; 0x88
   10922:	009b      	lsls	r3, r3, #2
   10924:	5ce3      	ldrb	r3, [r4, r3]
   10926:	2b00      	cmp	r3, #0
   10928:	d102      	bne.n	10930 <LorawanNotifyAppOnRxdone+0x80>
   1092a:	2008      	movs	r0, #8
   1092c:	4b09      	ldr	r3, [pc, #36]	; (10954 <LorawanNotifyAppOnRxdone+0xa4>)
   1092e:	4798      	blx	r3
   10930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10932:	2b04      	cmp	r3, #4
   10934:	d1cc      	bne.n	108d0 <LorawanNotifyAppOnRxdone+0x20>
   10936:	0023      	movs	r3, r4
   10938:	33f1      	adds	r3, #241	; 0xf1
   1093a:	7818      	ldrb	r0, [r3, #0]
   1093c:	4b06      	ldr	r3, [pc, #24]	; (10958 <LorawanNotifyAppOnRxdone+0xa8>)
   1093e:	4798      	blx	r3
   10940:	e7c6      	b.n	108d0 <LorawanNotifyAppOnRxdone+0x20>
   10942:	4d06      	ldr	r5, [pc, #24]	; (1095c <LorawanNotifyAppOnRxdone+0xac>)
   10944:	47a8      	blx	r5
   10946:	e7eb      	b.n	10920 <LorawanNotifyAppOnRxdone+0x70>
   10948:	20003170 	.word	0x20003170
   1094c:	200034cc 	.word	0x200034cc
   10950:	00012809 	.word	0x00012809
   10954:	00010801 	.word	0x00010801
   10958:	0000cf3d 	.word	0x0000cf3d
   1095c:	00010865 	.word	0x00010865

00010960 <LorawanSetReceiveWindow2Parameters>:
   10960:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10962:	466b      	mov	r3, sp
   10964:	1cdd      	adds	r5, r3, #3
   10966:	9001      	str	r0, [sp, #4]
   10968:	7029      	strb	r1, [r5, #0]
   1096a:	2001      	movs	r0, #1
   1096c:	a901      	add	r1, sp, #4
   1096e:	4c09      	ldr	r4, [pc, #36]	; (10994 <LorawanSetReceiveWindow2Parameters+0x34>)
   10970:	47a0      	blx	r4
   10972:	2808      	cmp	r0, #8
   10974:	d002      	beq.n	1097c <LorawanSetReceiveWindow2Parameters+0x1c>
   10976:	240a      	movs	r4, #10
   10978:	0020      	movs	r0, r4
   1097a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1097c:	0029      	movs	r1, r5
   1097e:	200f      	movs	r0, #15
   10980:	47a0      	blx	r4
   10982:	0004      	movs	r4, r0
   10984:	2808      	cmp	r0, #8
   10986:	d1f6      	bne.n	10976 <LorawanSetReceiveWindow2Parameters+0x16>
   10988:	7829      	ldrb	r1, [r5, #0]
   1098a:	9801      	ldr	r0, [sp, #4]
   1098c:	4b02      	ldr	r3, [pc, #8]	; (10998 <LorawanSetReceiveWindow2Parameters+0x38>)
   1098e:	4798      	blx	r3
   10990:	e7f2      	b.n	10978 <LorawanSetReceiveWindow2Parameters+0x18>
   10992:	46c0      	nop			; (mov r8, r8)
   10994:	0000c6f9 	.word	0x0000c6f9
   10998:	0000fdc5 	.word	0x0000fdc5

0001099c <LorawanSetReceiveWindowCParameters>:
   1099c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1099e:	466b      	mov	r3, sp
   109a0:	1cdc      	adds	r4, r3, #3
   109a2:	9001      	str	r0, [sp, #4]
   109a4:	7021      	strb	r1, [r4, #0]
   109a6:	2001      	movs	r0, #1
   109a8:	a901      	add	r1, sp, #4
   109aa:	4d0d      	ldr	r5, [pc, #52]	; (109e0 <LorawanSetReceiveWindowCParameters+0x44>)
   109ac:	47a8      	blx	r5
   109ae:	2808      	cmp	r0, #8
   109b0:	d001      	beq.n	109b6 <LorawanSetReceiveWindowCParameters+0x1a>
   109b2:	200a      	movs	r0, #10
   109b4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   109b6:	0021      	movs	r1, r4
   109b8:	200f      	movs	r0, #15
   109ba:	47a8      	blx	r5
   109bc:	2808      	cmp	r0, #8
   109be:	d1f8      	bne.n	109b2 <LorawanSetReceiveWindowCParameters+0x16>
   109c0:	4b08      	ldr	r3, [pc, #32]	; (109e4 <LorawanSetReceiveWindowCParameters+0x48>)
   109c2:	9a01      	ldr	r2, [sp, #4]
   109c4:	0019      	movs	r1, r3
   109c6:	7824      	ldrb	r4, [r4, #0]
   109c8:	3173      	adds	r1, #115	; 0x73
   109ca:	336f      	adds	r3, #111	; 0x6f
   109cc:	700c      	strb	r4, [r1, #0]
   109ce:	0a11      	lsrs	r1, r2, #8
   109d0:	701a      	strb	r2, [r3, #0]
   109d2:	7059      	strb	r1, [r3, #1]
   109d4:	0c11      	lsrs	r1, r2, #16
   109d6:	0e12      	lsrs	r2, r2, #24
   109d8:	7099      	strb	r1, [r3, #2]
   109da:	70da      	strb	r2, [r3, #3]
   109dc:	e7ea      	b.n	109b4 <LorawanSetReceiveWindowCParameters+0x18>
   109de:	46c0      	nop			; (mov r8, r8)
   109e0:	0000c6f9 	.word	0x0000c6f9
   109e4:	20003170 	.word	0x20003170

000109e8 <LorawanSetFrequency>:
   109e8:	b507      	push	{r0, r1, r2, lr}
   109ea:	466b      	mov	r3, sp
   109ec:	9100      	str	r1, [sp, #0]
   109ee:	7118      	strb	r0, [r3, #4]
   109f0:	4669      	mov	r1, sp
   109f2:	2000      	movs	r0, #0
   109f4:	4b01      	ldr	r3, [pc, #4]	; (109fc <LorawanSetFrequency+0x14>)
   109f6:	4798      	blx	r3
   109f8:	bd0e      	pop	{r1, r2, r3, pc}
   109fa:	46c0      	nop			; (mov r8, r8)
   109fc:	0000c715 	.word	0x0000c715

00010a00 <LorawanCheckAndDoRetryOnTimeout>:
   10a00:	b513      	push	{r0, r1, r4, lr}
   10a02:	4c33      	ldr	r4, [pc, #204]	; (10ad0 <LorawanCheckAndDoRetryOnTimeout+0xd0>)
   10a04:	0023      	movs	r3, r4
   10a06:	3394      	adds	r3, #148	; 0x94
   10a08:	781b      	ldrb	r3, [r3, #0]
   10a0a:	0022      	movs	r2, r4
   10a0c:	07db      	lsls	r3, r3, #31
   10a0e:	d54b      	bpl.n	10aa8 <LorawanCheckAndDoRetryOnTimeout+0xa8>
   10a10:	0023      	movs	r3, r4
   10a12:	32e4      	adds	r2, #228	; 0xe4
   10a14:	33e2      	adds	r3, #226	; 0xe2
   10a16:	7812      	ldrb	r2, [r2, #0]
   10a18:	781b      	ldrb	r3, [r3, #0]
   10a1a:	429a      	cmp	r2, r3
   10a1c:	d836      	bhi.n	10a8c <LorawanCheckAndDoRetryOnTimeout+0x8c>
   10a1e:	4b2d      	ldr	r3, [pc, #180]	; (10ad4 <LorawanCheckAndDoRetryOnTimeout+0xd4>)
   10a20:	5ce3      	ldrb	r3, [r4, r3]
   10a22:	2b00      	cmp	r3, #0
   10a24:	d032      	beq.n	10a8c <LorawanCheckAndDoRetryOnTimeout+0x8c>
   10a26:	0023      	movs	r3, r4
   10a28:	33fd      	adds	r3, #253	; 0xfd
   10a2a:	781b      	ldrb	r3, [r3, #0]
   10a2c:	2b01      	cmp	r3, #1
   10a2e:	d119      	bne.n	10a64 <LorawanCheckAndDoRetryOnTimeout+0x64>
   10a30:	0021      	movs	r1, r4
   10a32:	220e      	movs	r2, #14
   10a34:	3184      	adds	r1, #132	; 0x84
   10a36:	780b      	ldrb	r3, [r1, #0]
   10a38:	4393      	bics	r3, r2
   10a3a:	001a      	movs	r2, r3
   10a3c:	230c      	movs	r3, #12
   10a3e:	4313      	orrs	r3, r2
   10a40:	700b      	strb	r3, [r1, #0]
   10a42:	0023      	movs	r3, r4
   10a44:	33da      	adds	r3, #218	; 0xda
   10a46:	8819      	ldrh	r1, [r3, #0]
   10a48:	4b23      	ldr	r3, [pc, #140]	; (10ad8 <LorawanCheckAndDoRetryOnTimeout+0xd8>)
   10a4a:	2200      	movs	r2, #0
   10a4c:	5ce3      	ldrb	r3, [r4, r3]
   10a4e:	34f1      	adds	r4, #241	; 0xf1
   10a50:	1acb      	subs	r3, r1, r3
   10a52:	21fa      	movs	r1, #250	; 0xfa
   10a54:	0089      	lsls	r1, r1, #2
   10a56:	7820      	ldrb	r0, [r4, #0]
   10a58:	4359      	muls	r1, r3
   10a5a:	9200      	str	r2, [sp, #0]
   10a5c:	4b1f      	ldr	r3, [pc, #124]	; (10adc <LorawanCheckAndDoRetryOnTimeout+0xdc>)
   10a5e:	4c20      	ldr	r4, [pc, #128]	; (10ae0 <LorawanCheckAndDoRetryOnTimeout+0xe0>)
   10a60:	47a0      	blx	r4
   10a62:	bd13      	pop	{r0, r1, r4, pc}
   10a64:	2b04      	cmp	r3, #4
   10a66:	d1fc      	bne.n	10a62 <LorawanCheckAndDoRetryOnTimeout+0x62>
   10a68:	4b1e      	ldr	r3, [pc, #120]	; (10ae4 <LorawanCheckAndDoRetryOnTimeout+0xe4>)
   10a6a:	4798      	blx	r3
   10a6c:	34ce      	adds	r4, #206	; 0xce
   10a6e:	300d      	adds	r0, #13
   10a70:	8823      	ldrh	r3, [r4, #0]
   10a72:	b280      	uxth	r0, r0
   10a74:	4283      	cmp	r3, r0
   10a76:	d802      	bhi.n	10a7e <LorawanCheckAndDoRetryOnTimeout+0x7e>
   10a78:	4b1b      	ldr	r3, [pc, #108]	; (10ae8 <LorawanCheckAndDoRetryOnTimeout+0xe8>)
   10a7a:	4798      	blx	r3
   10a7c:	e7f1      	b.n	10a62 <LorawanCheckAndDoRetryOnTimeout+0x62>
   10a7e:	200e      	movs	r0, #14
   10a80:	4b1a      	ldr	r3, [pc, #104]	; (10aec <LorawanCheckAndDoRetryOnTimeout+0xec>)
   10a82:	4798      	blx	r3
   10a84:	4b1a      	ldr	r3, [pc, #104]	; (10af0 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
   10a86:	4798      	blx	r3
   10a88:	4b1a      	ldr	r3, [pc, #104]	; (10af4 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   10a8a:	e7f6      	b.n	10a7a <LorawanCheckAndDoRetryOnTimeout+0x7a>
   10a8c:	2012      	movs	r0, #18
   10a8e:	4b17      	ldr	r3, [pc, #92]	; (10aec <LorawanCheckAndDoRetryOnTimeout+0xec>)
   10a90:	4798      	blx	r3
   10a92:	4b17      	ldr	r3, [pc, #92]	; (10af0 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
   10a94:	4798      	blx	r3
   10a96:	34fd      	adds	r4, #253	; 0xfd
   10a98:	4b16      	ldr	r3, [pc, #88]	; (10af4 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   10a9a:	4798      	blx	r3
   10a9c:	7823      	ldrb	r3, [r4, #0]
   10a9e:	2b04      	cmp	r3, #4
   10aa0:	d1df      	bne.n	10a62 <LorawanCheckAndDoRetryOnTimeout+0x62>
   10aa2:	4b15      	ldr	r3, [pc, #84]	; (10af8 <LorawanCheckAndDoRetryOnTimeout+0xf8>)
   10aa4:	4798      	blx	r3
   10aa6:	e7dc      	b.n	10a62 <LorawanCheckAndDoRetryOnTimeout+0x62>
   10aa8:	0023      	movs	r3, r4
   10aaa:	32e3      	adds	r2, #227	; 0xe3
   10aac:	33e1      	adds	r3, #225	; 0xe1
   10aae:	7812      	ldrb	r2, [r2, #0]
   10ab0:	781b      	ldrb	r3, [r3, #0]
   10ab2:	429a      	cmp	r2, r3
   10ab4:	d803      	bhi.n	10abe <LorawanCheckAndDoRetryOnTimeout+0xbe>
   10ab6:	4b07      	ldr	r3, [pc, #28]	; (10ad4 <LorawanCheckAndDoRetryOnTimeout+0xd4>)
   10ab8:	5ce3      	ldrb	r3, [r4, r3]
   10aba:	2b00      	cmp	r3, #0
   10abc:	d1dc      	bne.n	10a78 <LorawanCheckAndDoRetryOnTimeout+0x78>
   10abe:	4b0f      	ldr	r3, [pc, #60]	; (10afc <LorawanCheckAndDoRetryOnTimeout+0xfc>)
   10ac0:	4798      	blx	r3
   10ac2:	4b0c      	ldr	r3, [pc, #48]	; (10af4 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   10ac4:	4798      	blx	r3
   10ac6:	2008      	movs	r0, #8
   10ac8:	4b08      	ldr	r3, [pc, #32]	; (10aec <LorawanCheckAndDoRetryOnTimeout+0xec>)
   10aca:	4798      	blx	r3
   10acc:	e7c9      	b.n	10a62 <LorawanCheckAndDoRetryOnTimeout+0x62>
   10ace:	46c0      	nop			; (mov r8, r8)
   10ad0:	20003170 	.word	0x20003170
   10ad4:	0000022a 	.word	0x0000022a
   10ad8:	0000022b 	.word	0x0000022b
   10adc:	00010b01 	.word	0x00010b01
   10ae0:	0000cc25 	.word	0x0000cc25
   10ae4:	0000f5cd 	.word	0x0000f5cd
   10ae8:	00010409 	.word	0x00010409
   10aec:	00010801 	.word	0x00010801
   10af0:	0000fe0d 	.word	0x0000fe0d
   10af4:	0000f549 	.word	0x0000f549
   10af8:	0000e639 	.word	0x0000e639
   10afc:	0000fe3d 	.word	0x0000fe3d

00010b00 <AckRetransmissionCallback>:
   10b00:	b510      	push	{r4, lr}
   10b02:	4c1c      	ldr	r4, [pc, #112]	; (10b74 <AckRetransmissionCallback+0x74>)
   10b04:	0023      	movs	r3, r4
   10b06:	3384      	adds	r3, #132	; 0x84
   10b08:	781b      	ldrb	r3, [r3, #0]
   10b0a:	2b7f      	cmp	r3, #127	; 0x7f
   10b0c:	d82d      	bhi.n	10b6a <AckRetransmissionCallback+0x6a>
   10b0e:	0023      	movs	r3, r4
   10b10:	33fd      	adds	r3, #253	; 0xfd
   10b12:	781b      	ldrb	r3, [r3, #0]
   10b14:	2b04      	cmp	r3, #4
   10b16:	d102      	bne.n	10b1e <AckRetransmissionCallback+0x1e>
   10b18:	4b17      	ldr	r3, [pc, #92]	; (10b78 <AckRetransmissionCallback+0x78>)
   10b1a:	4798      	blx	r3
   10b1c:	e01e      	b.n	10b5c <AckRetransmissionCallback+0x5c>
   10b1e:	2b01      	cmp	r3, #1
   10b20:	d11c      	bne.n	10b5c <AckRetransmissionCallback+0x5c>
   10b22:	0022      	movs	r2, r4
   10b24:	0023      	movs	r3, r4
   10b26:	32e4      	adds	r2, #228	; 0xe4
   10b28:	33e2      	adds	r3, #226	; 0xe2
   10b2a:	7812      	ldrb	r2, [r2, #0]
   10b2c:	781b      	ldrb	r3, [r3, #0]
   10b2e:	429a      	cmp	r2, r3
   10b30:	d815      	bhi.n	10b5e <AckRetransmissionCallback+0x5e>
   10b32:	4b12      	ldr	r3, [pc, #72]	; (10b7c <AckRetransmissionCallback+0x7c>)
   10b34:	5ce3      	ldrb	r3, [r4, r3]
   10b36:	2b00      	cmp	r3, #0
   10b38:	d011      	beq.n	10b5e <AckRetransmissionCallback+0x5e>
   10b3a:	4b11      	ldr	r3, [pc, #68]	; (10b80 <AckRetransmissionCallback+0x80>)
   10b3c:	4798      	blx	r3
   10b3e:	34ce      	adds	r4, #206	; 0xce
   10b40:	300d      	adds	r0, #13
   10b42:	8823      	ldrh	r3, [r4, #0]
   10b44:	b280      	uxth	r0, r0
   10b46:	4283      	cmp	r3, r0
   10b48:	d801      	bhi.n	10b4e <AckRetransmissionCallback+0x4e>
   10b4a:	4b0e      	ldr	r3, [pc, #56]	; (10b84 <AckRetransmissionCallback+0x84>)
   10b4c:	e7e5      	b.n	10b1a <AckRetransmissionCallback+0x1a>
   10b4e:	4b0e      	ldr	r3, [pc, #56]	; (10b88 <AckRetransmissionCallback+0x88>)
   10b50:	4798      	blx	r3
   10b52:	4b0e      	ldr	r3, [pc, #56]	; (10b8c <AckRetransmissionCallback+0x8c>)
   10b54:	4798      	blx	r3
   10b56:	200e      	movs	r0, #14
   10b58:	4b0d      	ldr	r3, [pc, #52]	; (10b90 <AckRetransmissionCallback+0x90>)
   10b5a:	4798      	blx	r3
   10b5c:	bd10      	pop	{r4, pc}
   10b5e:	4b0a      	ldr	r3, [pc, #40]	; (10b88 <AckRetransmissionCallback+0x88>)
   10b60:	4798      	blx	r3
   10b62:	4b0a      	ldr	r3, [pc, #40]	; (10b8c <AckRetransmissionCallback+0x8c>)
   10b64:	4798      	blx	r3
   10b66:	2012      	movs	r0, #18
   10b68:	e7f6      	b.n	10b58 <AckRetransmissionCallback+0x58>
   10b6a:	4b07      	ldr	r3, [pc, #28]	; (10b88 <AckRetransmissionCallback+0x88>)
   10b6c:	4798      	blx	r3
   10b6e:	4b07      	ldr	r3, [pc, #28]	; (10b8c <AckRetransmissionCallback+0x8c>)
   10b70:	e7d3      	b.n	10b1a <AckRetransmissionCallback+0x1a>
   10b72:	46c0      	nop			; (mov r8, r8)
   10b74:	20003170 	.word	0x20003170
   10b78:	00010a01 	.word	0x00010a01
   10b7c:	0000022a 	.word	0x0000022a
   10b80:	0000f5cd 	.word	0x0000f5cd
   10b84:	00010409 	.word	0x00010409
   10b88:	0000fe0d 	.word	0x0000fe0d
   10b8c:	0000f549 	.word	0x0000f549
   10b90:	00010801 	.word	0x00010801

00010b94 <LORAWAN_RxTimeout>:
   10b94:	4b24      	ldr	r3, [pc, #144]	; (10c28 <LORAWAN_RxTimeout+0x94>)
   10b96:	b510      	push	{r4, lr}
   10b98:	001a      	movs	r2, r3
   10b9a:	3284      	adds	r2, #132	; 0x84
   10b9c:	7812      	ldrb	r2, [r2, #0]
   10b9e:	b251      	sxtb	r1, r2
   10ba0:	2900      	cmp	r1, #0
   10ba2:	db27      	blt.n	10bf4 <LORAWAN_RxTimeout+0x60>
   10ba4:	0019      	movs	r1, r3
   10ba6:	31fd      	adds	r1, #253	; 0xfd
   10ba8:	7809      	ldrb	r1, [r1, #0]
   10baa:	2904      	cmp	r1, #4
   10bac:	d108      	bne.n	10bc0 <LORAWAN_RxTimeout+0x2c>
   10bae:	3903      	subs	r1, #3
   10bb0:	420a      	tst	r2, r1
   10bb2:	d005      	beq.n	10bc0 <LORAWAN_RxTimeout+0x2c>
   10bb4:	2290      	movs	r2, #144	; 0x90
   10bb6:	0092      	lsls	r2, r2, #2
   10bb8:	5499      	strb	r1, [r3, r2]
   10bba:	4b1c      	ldr	r3, [pc, #112]	; (10c2c <LORAWAN_RxTimeout+0x98>)
   10bbc:	4798      	blx	r3
   10bbe:	bd10      	pop	{r4, pc}
   10bc0:	210e      	movs	r1, #14
   10bc2:	0010      	movs	r0, r2
   10bc4:	4008      	ands	r0, r1
   10bc6:	2806      	cmp	r0, #6
   10bc8:	d107      	bne.n	10bda <LORAWAN_RxTimeout+0x46>
   10bca:	3384      	adds	r3, #132	; 0x84
   10bcc:	781a      	ldrb	r2, [r3, #0]
   10bce:	438a      	bics	r2, r1
   10bd0:	0011      	movs	r1, r2
   10bd2:	2208      	movs	r2, #8
   10bd4:	430a      	orrs	r2, r1
   10bd6:	701a      	strb	r2, [r3, #0]
   10bd8:	e7f1      	b.n	10bbe <LORAWAN_RxTimeout+0x2a>
   10bda:	2004      	movs	r0, #4
   10bdc:	3394      	adds	r3, #148	; 0x94
   10bde:	781b      	ldrb	r3, [r3, #0]
   10be0:	4203      	tst	r3, r0
   10be2:	d002      	beq.n	10bea <LORAWAN_RxTimeout+0x56>
   10be4:	4b12      	ldr	r3, [pc, #72]	; (10c30 <LORAWAN_RxTimeout+0x9c>)
   10be6:	4798      	blx	r3
   10be8:	e7e9      	b.n	10bbe <LORAWAN_RxTimeout+0x2a>
   10bea:	07d3      	lsls	r3, r2, #31
   10bec:	d5e7      	bpl.n	10bbe <LORAWAN_RxTimeout+0x2a>
   10bee:	4b11      	ldr	r3, [pc, #68]	; (10c34 <LORAWAN_RxTimeout+0xa0>)
   10bf0:	4798      	blx	r3
   10bf2:	e7e4      	b.n	10bbe <LORAWAN_RxTimeout+0x2a>
   10bf4:	4810      	ldr	r0, [pc, #64]	; (10c38 <LORAWAN_RxTimeout+0xa4>)
   10bf6:	7841      	ldrb	r1, [r0, #1]
   10bf8:	7802      	ldrb	r2, [r0, #0]
   10bfa:	0209      	lsls	r1, r1, #8
   10bfc:	4311      	orrs	r1, r2
   10bfe:	7882      	ldrb	r2, [r0, #2]
   10c00:	0412      	lsls	r2, r2, #16
   10c02:	4311      	orrs	r1, r2
   10c04:	78c2      	ldrb	r2, [r0, #3]
   10c06:	0612      	lsls	r2, r2, #24
   10c08:	430a      	orrs	r2, r1
   10c0a:	d0d8      	beq.n	10bbe <LORAWAN_RxTimeout+0x2a>
   10c0c:	2188      	movs	r1, #136	; 0x88
   10c0e:	2001      	movs	r0, #1
   10c10:	0089      	lsls	r1, r1, #2
   10c12:	5458      	strb	r0, [r3, r1]
   10c14:	0019      	movs	r1, r3
   10c16:	2404      	movs	r4, #4
   10c18:	31ff      	adds	r1, #255	; 0xff
   10c1a:	33fc      	adds	r3, #252	; 0xfc
   10c1c:	734c      	strb	r4, [r1, #13]
   10c1e:	7448      	strb	r0, [r1, #17]
   10c20:	4906      	ldr	r1, [pc, #24]	; (10c3c <LORAWAN_RxTimeout+0xa8>)
   10c22:	68d8      	ldr	r0, [r3, #12]
   10c24:	4790      	blx	r2
   10c26:	e7ca      	b.n	10bbe <LORAWAN_RxTimeout+0x2a>
   10c28:	20003170 	.word	0x20003170
   10c2c:	000127cd 	.word	0x000127cd
   10c30:	0000fe61 	.word	0x0000fe61
   10c34:	00010a01 	.word	0x00010a01
   10c38:	200034cc 	.word	0x200034cc
   10c3c:	2000327c 	.word	0x2000327c

00010c40 <LorawanConfigureRadioForRX2>:
   10c40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10c42:	466b      	mov	r3, sp
   10c44:	1cdd      	adds	r5, r3, #3
   10c46:	2300      	movs	r3, #0
   10c48:	702b      	strb	r3, [r5, #0]
   10c4a:	2390      	movs	r3, #144	; 0x90
   10c4c:	4c29      	ldr	r4, [pc, #164]	; (10cf4 <LorawanConfigureRadioForRX2+0xb4>)
   10c4e:	009b      	lsls	r3, r3, #2
   10c50:	5ce1      	ldrb	r1, [r4, r3]
   10c52:	0006      	movs	r6, r0
   10c54:	0023      	movs	r3, r4
   10c56:	2900      	cmp	r1, #0
   10c58:	d02f      	beq.n	10cba <LorawanConfigureRadioForRX2+0x7a>
   10c5a:	3373      	adds	r3, #115	; 0x73
   10c5c:	781b      	ldrb	r3, [r3, #0]
   10c5e:	702b      	strb	r3, [r5, #0]
   10c60:	0023      	movs	r3, r4
   10c62:	6f22      	ldr	r2, [r4, #112]	; 0x70
   10c64:	336f      	adds	r3, #111	; 0x6f
   10c66:	781b      	ldrb	r3, [r3, #0]
   10c68:	0211      	lsls	r1, r2, #8
   10c6a:	4319      	orrs	r1, r3
   10c6c:	7828      	ldrb	r0, [r5, #0]
   10c6e:	4b22      	ldr	r3, [pc, #136]	; (10cf8 <LorawanConfigureRadioForRX2+0xb8>)
   10c70:	4798      	blx	r3
   10c72:	2300      	movs	r3, #0
   10c74:	0022      	movs	r2, r4
   10c76:	af01      	add	r7, sp, #4
   10c78:	703b      	strb	r3, [r7, #0]
   10c7a:	32fd      	adds	r2, #253	; 0xfd
   10c7c:	7812      	ldrb	r2, [r2, #0]
   10c7e:	2a04      	cmp	r2, #4
   10c80:	d130      	bne.n	10ce4 <LorawanConfigureRadioForRX2+0xa4>
   10c82:	0022      	movs	r2, r4
   10c84:	3284      	adds	r2, #132	; 0x84
   10c86:	7812      	ldrb	r2, [r2, #0]
   10c88:	07d2      	lsls	r2, r2, #31
   10c8a:	d52b      	bpl.n	10ce4 <LorawanConfigureRadioForRX2+0xa4>
   10c8c:	2290      	movs	r2, #144	; 0x90
   10c8e:	0092      	lsls	r2, r2, #2
   10c90:	5ca2      	ldrb	r2, [r4, r2]
   10c92:	429a      	cmp	r2, r3
   10c94:	d026      	beq.n	10ce4 <LorawanConfigureRadioForRX2+0xa4>
   10c96:	807b      	strh	r3, [r7, #2]
   10c98:	0038      	movs	r0, r7
   10c9a:	4b18      	ldr	r3, [pc, #96]	; (10cfc <LorawanConfigureRadioForRX2+0xbc>)
   10c9c:	4798      	blx	r3
   10c9e:	1e04      	subs	r4, r0, #0
   10ca0:	d00a      	beq.n	10cb8 <LorawanConfigureRadioForRX2+0x78>
   10ca2:	4b17      	ldr	r3, [pc, #92]	; (10d00 <LorawanConfigureRadioForRX2+0xc0>)
   10ca4:	4798      	blx	r3
   10ca6:	4b17      	ldr	r3, [pc, #92]	; (10d04 <LorawanConfigureRadioForRX2+0xc4>)
   10ca8:	4798      	blx	r3
   10caa:	4b17      	ldr	r3, [pc, #92]	; (10d08 <LorawanConfigureRadioForRX2+0xc8>)
   10cac:	4798      	blx	r3
   10cae:	2e00      	cmp	r6, #0
   10cb0:	d002      	beq.n	10cb8 <LorawanConfigureRadioForRX2+0x78>
   10cb2:	0020      	movs	r0, r4
   10cb4:	4b15      	ldr	r3, [pc, #84]	; (10d0c <LorawanConfigureRadioForRX2+0xcc>)
   10cb6:	4798      	blx	r3
   10cb8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   10cba:	3394      	adds	r3, #148	; 0x94
   10cbc:	781b      	ldrb	r3, [r3, #0]
   10cbe:	075b      	lsls	r3, r3, #29
   10cc0:	d50b      	bpl.n	10cda <LorawanConfigureRadioForRX2+0x9a>
   10cc2:	002a      	movs	r2, r5
   10cc4:	2009      	movs	r0, #9
   10cc6:	4b12      	ldr	r3, [pc, #72]	; (10d10 <LorawanConfigureRadioForRX2+0xd0>)
   10cc8:	4798      	blx	r3
   10cca:	0022      	movs	r2, r4
   10ccc:	0023      	movs	r3, r4
   10cce:	326c      	adds	r2, #108	; 0x6c
   10cd0:	8811      	ldrh	r1, [r2, #0]
   10cd2:	336a      	adds	r3, #106	; 0x6a
   10cd4:	881b      	ldrh	r3, [r3, #0]
   10cd6:	0409      	lsls	r1, r1, #16
   10cd8:	e7c7      	b.n	10c6a <LorawanConfigureRadioForRX2+0x2a>
   10cda:	0023      	movs	r3, r4
   10cdc:	336e      	adds	r3, #110	; 0x6e
   10cde:	781b      	ldrb	r3, [r3, #0]
   10ce0:	702b      	strb	r3, [r5, #0]
   10ce2:	e7f2      	b.n	10cca <LorawanConfigureRadioForRX2+0x8a>
   10ce4:	466b      	mov	r3, sp
   10ce6:	0029      	movs	r1, r5
   10ce8:	1d9a      	adds	r2, r3, #6
   10cea:	2003      	movs	r0, #3
   10cec:	4b08      	ldr	r3, [pc, #32]	; (10d10 <LorawanConfigureRadioForRX2+0xd0>)
   10cee:	4798      	blx	r3
   10cf0:	e7d2      	b.n	10c98 <LorawanConfigureRadioForRX2+0x58>
   10cf2:	46c0      	nop			; (mov r8, r8)
   10cf4:	20003170 	.word	0x20003170
   10cf8:	0001032d 	.word	0x0001032d
   10cfc:	0000ef31 	.word	0x0000ef31
   10d00:	0000fe0d 	.word	0x0000fe0d
   10d04:	0000fe3d 	.word	0x0000fe3d
   10d08:	0000f549 	.word	0x0000f549
   10d0c:	00010801 	.word	0x00010801
   10d10:	0000c6dd 	.word	0x0000c6dd

00010d14 <SetReceptionNotOkState>:
   10d14:	4a0c      	ldr	r2, [pc, #48]	; (10d48 <SetReceptionNotOkState+0x34>)
   10d16:	b510      	push	{r4, lr}
   10d18:	0013      	movs	r3, r2
   10d1a:	33fd      	adds	r3, #253	; 0xfd
   10d1c:	7819      	ldrb	r1, [r3, #0]
   10d1e:	0013      	movs	r3, r2
   10d20:	4c0a      	ldr	r4, [pc, #40]	; (10d4c <SetReceptionNotOkState+0x38>)
   10d22:	3384      	adds	r3, #132	; 0x84
   10d24:	2904      	cmp	r1, #4
   10d26:	d105      	bne.n	10d34 <SetReceptionNotOkState+0x20>
   10d28:	2088      	movs	r0, #136	; 0x88
   10d2a:	3903      	subs	r1, #3
   10d2c:	0080      	lsls	r0, r0, #2
   10d2e:	5411      	strb	r1, [r2, r0]
   10d30:	3020      	adds	r0, #32
   10d32:	5411      	strb	r1, [r2, r0]
   10d34:	210e      	movs	r1, #14
   10d36:	781a      	ldrb	r2, [r3, #0]
   10d38:	2000      	movs	r0, #0
   10d3a:	438a      	bics	r2, r1
   10d3c:	0011      	movs	r1, r2
   10d3e:	220a      	movs	r2, #10
   10d40:	430a      	orrs	r2, r1
   10d42:	701a      	strb	r2, [r3, #0]
   10d44:	47a0      	blx	r4
   10d46:	bd10      	pop	{r4, pc}
   10d48:	20003170 	.word	0x20003170
   10d4c:	00010c41 	.word	0x00010c41

00010d50 <LorawanProcessFcntDown>:
   10d50:	b570      	push	{r4, r5, r6, lr}
   10d52:	79c3      	ldrb	r3, [r0, #7]
   10d54:	7982      	ldrb	r2, [r0, #6]
   10d56:	4c1f      	ldr	r4, [pc, #124]	; (10dd4 <LorawanProcessFcntDown+0x84>)
   10d58:	021b      	lsls	r3, r3, #8
   10d5a:	4313      	orrs	r3, r2
   10d5c:	0022      	movs	r2, r4
   10d5e:	218b      	movs	r1, #139	; 0x8b
   10d60:	328c      	adds	r2, #140	; 0x8c
   10d62:	8810      	ldrh	r0, [r2, #0]
   10d64:	0089      	lsls	r1, r1, #2
   10d66:	8013      	strh	r3, [r2, #0]
   10d68:	4298      	cmp	r0, r3
   10d6a:	d80f      	bhi.n	10d8c <LorawanProcessFcntDown+0x3c>
   10d6c:	5c61      	ldrb	r1, [r4, r1]
   10d6e:	2900      	cmp	r1, #0
   10d70:	d007      	beq.n	10d82 <LorawanProcessFcntDown+0x32>
   10d72:	2301      	movs	r3, #1
   10d74:	408b      	lsls	r3, r1
   10d76:	6812      	ldr	r2, [r2, #0]
   10d78:	3b01      	subs	r3, #1
   10d7a:	421a      	tst	r2, r3
   10d7c:	d001      	beq.n	10d82 <LorawanProcessFcntDown+0x32>
   10d7e:	2008      	movs	r0, #8
   10d80:	bd70      	pop	{r4, r5, r6, pc}
   10d82:	210a      	movs	r1, #10
   10d84:	4b14      	ldr	r3, [pc, #80]	; (10dd8 <LorawanProcessFcntDown+0x88>)
   10d86:	2001      	movs	r0, #1
   10d88:	4798      	blx	r3
   10d8a:	e7f8      	b.n	10d7e <LorawanProcessFcntDown+0x2e>
   10d8c:	0020      	movs	r0, r4
   10d8e:	308e      	adds	r0, #142	; 0x8e
   10d90:	8803      	ldrh	r3, [r0, #0]
   10d92:	3301      	adds	r3, #1
   10d94:	8003      	strh	r3, [r0, #0]
   10d96:	5c61      	ldrb	r1, [r4, r1]
   10d98:	2900      	cmp	r1, #0
   10d9a:	d005      	beq.n	10da8 <LorawanProcessFcntDown+0x58>
   10d9c:	2301      	movs	r3, #1
   10d9e:	408b      	lsls	r3, r1
   10da0:	6812      	ldr	r2, [r2, #0]
   10da2:	3b01      	subs	r3, #1
   10da4:	421a      	tst	r2, r3
   10da6:	d103      	bne.n	10db0 <LorawanProcessFcntDown+0x60>
   10da8:	210a      	movs	r1, #10
   10daa:	2001      	movs	r0, #1
   10dac:	4b0a      	ldr	r3, [pc, #40]	; (10dd8 <LorawanProcessFcntDown+0x88>)
   10dae:	4798      	blx	r3
   10db0:	0023      	movs	r3, r4
   10db2:	338c      	adds	r3, #140	; 0x8c
   10db4:	681b      	ldr	r3, [r3, #0]
   10db6:	3301      	adds	r3, #1
   10db8:	d1e1      	bne.n	10d7e <LorawanProcessFcntDown+0x2e>
   10dba:	2501      	movs	r5, #1
   10dbc:	3484      	adds	r4, #132	; 0x84
   10dbe:	78a3      	ldrb	r3, [r4, #2]
   10dc0:	432b      	orrs	r3, r5
   10dc2:	70a3      	strb	r3, [r4, #2]
   10dc4:	4b05      	ldr	r3, [pc, #20]	; (10ddc <LorawanProcessFcntDown+0x8c>)
   10dc6:	4798      	blx	r3
   10dc8:	210b      	movs	r1, #11
   10dca:	0028      	movs	r0, r5
   10dcc:	4b02      	ldr	r3, [pc, #8]	; (10dd8 <LorawanProcessFcntDown+0x88>)
   10dce:	4798      	blx	r3
   10dd0:	200d      	movs	r0, #13
   10dd2:	e7d5      	b.n	10d80 <LorawanProcessFcntDown+0x30>
   10dd4:	20003170 	.word	0x20003170
   10dd8:	00008d81 	.word	0x00008d81
   10ddc:	00010d15 	.word	0x00010d15

00010de0 <UpdateCurrentDataRateAfterDataRangeChanges>:
   10de0:	4b09      	ldr	r3, [pc, #36]	; (10e08 <UpdateCurrentDataRateAfterDataRangeChanges+0x28>)
   10de2:	001a      	movs	r2, r3
   10de4:	32f4      	adds	r2, #244	; 0xf4
   10de6:	7811      	ldrb	r1, [r2, #0]
   10de8:	001a      	movs	r2, r3
   10dea:	32e7      	adds	r2, #231	; 0xe7
   10dec:	7810      	ldrb	r0, [r2, #0]
   10dee:	4288      	cmp	r0, r1
   10df0:	d900      	bls.n	10df4 <UpdateCurrentDataRateAfterDataRangeChanges+0x14>
   10df2:	7011      	strb	r1, [r2, #0]
   10df4:	001a      	movs	r2, r3
   10df6:	33e7      	adds	r3, #231	; 0xe7
   10df8:	32f3      	adds	r2, #243	; 0xf3
   10dfa:	7812      	ldrb	r2, [r2, #0]
   10dfc:	7819      	ldrb	r1, [r3, #0]
   10dfe:	4291      	cmp	r1, r2
   10e00:	d200      	bcs.n	10e04 <UpdateCurrentDataRateAfterDataRangeChanges+0x24>
   10e02:	701a      	strb	r2, [r3, #0]
   10e04:	4770      	bx	lr
   10e06:	46c0      	nop			; (mov r8, r8)
   10e08:	20003170 	.word	0x20003170

00010e0c <ExecuteNewChannel>:
   10e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   10e0e:	b08d      	sub	sp, #52	; 0x34
   10e10:	7807      	ldrb	r7, [r0, #0]
   10e12:	ab02      	add	r3, sp, #8
   10e14:	0006      	movs	r6, r0
   10e16:	71df      	strb	r7, [r3, #7]
   10e18:	1c41      	adds	r1, r0, #1
   10e1a:	4b59      	ldr	r3, [pc, #356]	; (10f80 <ExecuteNewChannel+0x174>)
   10e1c:	2204      	movs	r2, #4
   10e1e:	a808      	add	r0, sp, #32
   10e20:	4798      	blx	r3
   10e22:	9b08      	ldr	r3, [sp, #32]
   10e24:	4c57      	ldr	r4, [pc, #348]	; (10f84 <ExecuteNewChannel+0x178>)
   10e26:	021d      	lsls	r5, r3, #8
   10e28:	2364      	movs	r3, #100	; 0x64
   10e2a:	0a2d      	lsrs	r5, r5, #8
   10e2c:	435d      	muls	r5, r3
   10e2e:	1d73      	adds	r3, r6, #5
   10e30:	9301      	str	r3, [sp, #4]
   10e32:	0023      	movs	r3, r4
   10e34:	9508      	str	r5, [sp, #32]
   10e36:	33ff      	adds	r3, #255	; 0xff
   10e38:	781b      	ldrb	r3, [r3, #0]
   10e3a:	3b02      	subs	r3, #2
   10e3c:	2b01      	cmp	r3, #1
   10e3e:	d800      	bhi.n	10e42 <ExecuteNewChannel+0x36>
   10e40:	e092      	b.n	10f68 <ExecuteNewChannel+0x15c>
   10e42:	7933      	ldrb	r3, [r6, #4]
   10e44:	a904      	add	r1, sp, #16
   10e46:	9300      	str	r3, [sp, #0]
   10e48:	2300      	movs	r3, #0
   10e4a:	2015      	movs	r0, #21
   10e4c:	4e4e      	ldr	r6, [pc, #312]	; (10f88 <ExecuteNewChannel+0x17c>)
   10e4e:	700f      	strb	r7, [r1, #0]
   10e50:	704b      	strb	r3, [r1, #1]
   10e52:	47b0      	blx	r6
   10e54:	2808      	cmp	r0, #8
   10e56:	d12b      	bne.n	10eb0 <ExecuteNewChannel+0xa4>
   10e58:	466a      	mov	r2, sp
   10e5a:	ab02      	add	r3, sp, #8
   10e5c:	79db      	ldrb	r3, [r3, #7]
   10e5e:	7812      	ldrb	r2, [r2, #0]
   10e60:	af06      	add	r7, sp, #24
   10e62:	a90a      	add	r1, sp, #40	; 0x28
   10e64:	3806      	subs	r0, #6
   10e66:	703b      	strb	r3, [r7, #0]
   10e68:	707a      	strb	r2, [r7, #1]
   10e6a:	710b      	strb	r3, [r1, #4]
   10e6c:	950a      	str	r5, [sp, #40]	; 0x28
   10e6e:	47b0      	blx	r6
   10e70:	2808      	cmp	r0, #8
   10e72:	d001      	beq.n	10e78 <ExecuteNewChannel+0x6c>
   10e74:	2d00      	cmp	r5, #0
   10e76:	d10b      	bne.n	10e90 <ExecuteNewChannel+0x84>
   10e78:	0023      	movs	r3, r4
   10e7a:	33e0      	adds	r3, #224	; 0xe0
   10e7c:	781a      	ldrb	r2, [r3, #0]
   10e7e:	2303      	movs	r3, #3
   10e80:	4353      	muls	r3, r2
   10e82:	2280      	movs	r2, #128	; 0x80
   10e84:	18e3      	adds	r3, r4, r3
   10e86:	3398      	adds	r3, #152	; 0x98
   10e88:	7899      	ldrb	r1, [r3, #2]
   10e8a:	4252      	negs	r2, r2
   10e8c:	430a      	orrs	r2, r1
   10e8e:	709a      	strb	r2, [r3, #2]
   10e90:	0039      	movs	r1, r7
   10e92:	2012      	movs	r0, #18
   10e94:	47b0      	blx	r6
   10e96:	2808      	cmp	r0, #8
   10e98:	d10a      	bne.n	10eb0 <ExecuteNewChannel+0xa4>
   10e9a:	0023      	movs	r3, r4
   10e9c:	33e0      	adds	r3, #224	; 0xe0
   10e9e:	781a      	ldrb	r2, [r3, #0]
   10ea0:	2303      	movs	r3, #3
   10ea2:	4353      	muls	r3, r2
   10ea4:	2240      	movs	r2, #64	; 0x40
   10ea6:	18e3      	adds	r3, r4, r3
   10ea8:	3398      	adds	r3, #152	; 0x98
   10eaa:	7899      	ldrb	r1, [r3, #2]
   10eac:	430a      	orrs	r2, r1
   10eae:	709a      	strb	r2, [r3, #2]
   10eb0:	0023      	movs	r3, r4
   10eb2:	33e0      	adds	r3, #224	; 0xe0
   10eb4:	781a      	ldrb	r2, [r3, #0]
   10eb6:	2303      	movs	r3, #3
   10eb8:	4353      	muls	r3, r2
   10eba:	18e3      	adds	r3, r4, r3
   10ebc:	3398      	adds	r3, #152	; 0x98
   10ebe:	789b      	ldrb	r3, [r3, #2]
   10ec0:	09da      	lsrs	r2, r3, #7
   10ec2:	2a01      	cmp	r2, #1
   10ec4:	d150      	bne.n	10f68 <ExecuteNewChannel+0x15c>
   10ec6:	065b      	lsls	r3, r3, #25
   10ec8:	d54e      	bpl.n	10f68 <ExecuteNewChannel+0x15c>
   10eca:	4e30      	ldr	r6, [pc, #192]	; (10f8c <ExecuteNewChannel+0x180>)
   10ecc:	2d00      	cmp	r5, #0
   10ece:	d04e      	beq.n	10f6e <ExecuteNewChannel+0x162>
   10ed0:	a906      	add	r1, sp, #24
   10ed2:	2012      	movs	r0, #18
   10ed4:	47b0      	blx	r6
   10ed6:	ad07      	add	r5, sp, #28
   10ed8:	a90a      	add	r1, sp, #40	; 0x28
   10eda:	2000      	movs	r0, #0
   10edc:	47b0      	blx	r6
   10ede:	002a      	movs	r2, r5
   10ee0:	2100      	movs	r1, #0
   10ee2:	2014      	movs	r0, #20
   10ee4:	4f2a      	ldr	r7, [pc, #168]	; (10f90 <ExecuteNewChannel+0x184>)
   10ee6:	47b8      	blx	r7
   10ee8:	0023      	movs	r3, r4
   10eea:	782a      	ldrb	r2, [r5, #0]
   10eec:	33f3      	adds	r3, #243	; 0xf3
   10eee:	701a      	strb	r2, [r3, #0]
   10ef0:	0023      	movs	r3, r4
   10ef2:	786a      	ldrb	r2, [r5, #1]
   10ef4:	33f4      	adds	r3, #244	; 0xf4
   10ef6:	701a      	strb	r2, [r3, #0]
   10ef8:	34ff      	adds	r4, #255	; 0xff
   10efa:	4b26      	ldr	r3, [pc, #152]	; (10f94 <ExecuteNewChannel+0x188>)
   10efc:	4798      	blx	r3
   10efe:	7f63      	ldrb	r3, [r4, #29]
   10f00:	079b      	lsls	r3, r3, #30
   10f02:	d50e      	bpl.n	10f22 <ExecuteNewChannel+0x116>
   10f04:	2416      	movs	r4, #22
   10f06:	ab02      	add	r3, sp, #8
   10f08:	18e4      	adds	r4, r4, r3
   10f0a:	1dd9      	adds	r1, r3, #7
   10f0c:	0022      	movs	r2, r4
   10f0e:	201e      	movs	r0, #30
   10f10:	47b8      	blx	r7
   10f12:	ab02      	add	r3, sp, #8
   10f14:	79db      	ldrb	r3, [r3, #7]
   10f16:	a909      	add	r1, sp, #36	; 0x24
   10f18:	708b      	strb	r3, [r1, #2]
   10f1a:	8823      	ldrh	r3, [r4, #0]
   10f1c:	201e      	movs	r0, #30
   10f1e:	800b      	strh	r3, [r1, #0]
   10f20:	47b0      	blx	r6
   10f22:	ab02      	add	r3, sp, #8
   10f24:	79db      	ldrb	r3, [r3, #7]
   10f26:	a905      	add	r1, sp, #20
   10f28:	700b      	strb	r3, [r1, #0]
   10f2a:	2301      	movs	r3, #1
   10f2c:	2016      	movs	r0, #22
   10f2e:	704b      	strb	r3, [r1, #1]
   10f30:	4b16      	ldr	r3, [pc, #88]	; (10f8c <ExecuteNewChannel+0x180>)
   10f32:	4798      	blx	r3
   10f34:	ad09      	add	r5, sp, #36	; 0x24
   10f36:	2100      	movs	r1, #0
   10f38:	002a      	movs	r2, r5
   10f3a:	4b15      	ldr	r3, [pc, #84]	; (10f90 <ExecuteNewChannel+0x184>)
   10f3c:	2014      	movs	r0, #20
   10f3e:	4798      	blx	r3
   10f40:	4c10      	ldr	r4, [pc, #64]	; (10f84 <ExecuteNewChannel+0x178>)
   10f42:	782a      	ldrb	r2, [r5, #0]
   10f44:	0023      	movs	r3, r4
   10f46:	33f3      	adds	r3, #243	; 0xf3
   10f48:	701a      	strb	r2, [r3, #0]
   10f4a:	0023      	movs	r3, r4
   10f4c:	786a      	ldrb	r2, [r5, #1]
   10f4e:	33f4      	adds	r3, #244	; 0xf4
   10f50:	701a      	strb	r2, [r3, #0]
   10f52:	4b10      	ldr	r3, [pc, #64]	; (10f94 <ExecuteNewChannel+0x188>)
   10f54:	4798      	blx	r3
   10f56:	2304      	movs	r3, #4
   10f58:	3484      	adds	r4, #132	; 0x84
   10f5a:	7862      	ldrb	r2, [r4, #1]
   10f5c:	210b      	movs	r1, #11
   10f5e:	4313      	orrs	r3, r2
   10f60:	7063      	strb	r3, [r4, #1]
   10f62:	2001      	movs	r0, #1
   10f64:	4b0c      	ldr	r3, [pc, #48]	; (10f98 <ExecuteNewChannel+0x18c>)
   10f66:	4798      	blx	r3
   10f68:	9801      	ldr	r0, [sp, #4]
   10f6a:	b00d      	add	sp, #52	; 0x34
   10f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10f6e:	ab02      	add	r3, sp, #8
   10f70:	79db      	ldrb	r3, [r3, #7]
   10f72:	a905      	add	r1, sp, #20
   10f74:	2016      	movs	r0, #22
   10f76:	700b      	strb	r3, [r1, #0]
   10f78:	704d      	strb	r5, [r1, #1]
   10f7a:	47b0      	blx	r6
   10f7c:	e7da      	b.n	10f34 <ExecuteNewChannel+0x128>
   10f7e:	46c0      	nop			; (mov r8, r8)
   10f80:	000161b7 	.word	0x000161b7
   10f84:	20003170 	.word	0x20003170
   10f88:	0000c6f9 	.word	0x0000c6f9
   10f8c:	0000c715 	.word	0x0000c715
   10f90:	0000c6dd 	.word	0x0000c6dd
   10f94:	00010de1 	.word	0x00010de1
   10f98:	00008d81 	.word	0x00008d81

00010f9c <MacExecuteCommands>:
   10f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   10f9e:	1843      	adds	r3, r0, r1
   10fa0:	b087      	sub	sp, #28
   10fa2:	9301      	str	r3, [sp, #4]
   10fa4:	2300      	movs	r3, #0
   10fa6:	0007      	movs	r7, r0
   10fa8:	2501      	movs	r5, #1
   10faa:	9302      	str	r3, [sp, #8]
   10fac:	9b01      	ldr	r3, [sp, #4]
   10fae:	4e71      	ldr	r6, [pc, #452]	; (11174 <MacExecuteCommands+0x1d8>)
   10fb0:	429f      	cmp	r7, r3
   10fb2:	d362      	bcc.n	1107a <MacExecuteCommands+0xde>
   10fb4:	4b70      	ldr	r3, [pc, #448]	; (11178 <MacExecuteCommands+0x1dc>)
   10fb6:	5cf3      	ldrb	r3, [r6, r3]
   10fb8:	2b00      	cmp	r3, #0
   10fba:	d000      	beq.n	10fbe <MacExecuteCommands+0x22>
   10fbc:	e08f      	b.n	110de <MacExecuteCommands+0x142>
   10fbe:	0038      	movs	r0, r7
   10fc0:	b007      	add	sp, #28
   10fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10fc4:	0032      	movs	r2, r6
   10fc6:	7879      	ldrb	r1, [r7, #1]
   10fc8:	32e5      	adds	r2, #229	; 0xe5
   10fca:	7011      	strb	r1, [r2, #0]
   10fcc:	0032      	movs	r2, r6
   10fce:	78b9      	ldrb	r1, [r7, #2]
   10fd0:	32e6      	adds	r2, #230	; 0xe6
   10fd2:	1cfc      	adds	r4, r7, #3
   10fd4:	7011      	strb	r1, [r2, #0]
   10fd6:	2203      	movs	r2, #3
   10fd8:	4353      	muls	r3, r2
   10fda:	18f3      	adds	r3, r6, r3
   10fdc:	3399      	adds	r3, #153	; 0x99
   10fde:	32fc      	adds	r2, #252	; 0xfc
   10fe0:	701a      	strb	r2, [r3, #0]
   10fe2:	e020      	b.n	11026 <MacExecuteCommands+0x8a>
   10fe4:	0020      	movs	r0, r4
   10fe6:	4b65      	ldr	r3, [pc, #404]	; (1117c <MacExecuteCommands+0x1e0>)
   10fe8:	4798      	blx	r3
   10fea:	0004      	movs	r4, r0
   10fec:	e01b      	b.n	11026 <MacExecuteCommands+0x8a>
   10fee:	0020      	movs	r0, r4
   10ff0:	4b63      	ldr	r3, [pc, #396]	; (11180 <MacExecuteCommands+0x1e4>)
   10ff2:	e7f9      	b.n	10fe8 <MacExecuteCommands+0x4c>
   10ff4:	0020      	movs	r0, r4
   10ff6:	4b63      	ldr	r3, [pc, #396]	; (11184 <MacExecuteCommands+0x1e8>)
   10ff8:	e7f6      	b.n	10fe8 <MacExecuteCommands+0x4c>
   10ffa:	0020      	movs	r0, r4
   10ffc:	4b62      	ldr	r3, [pc, #392]	; (11188 <MacExecuteCommands+0x1ec>)
   10ffe:	e7f3      	b.n	10fe8 <MacExecuteCommands+0x4c>
   11000:	7878      	ldrb	r0, [r7, #1]
   11002:	230f      	movs	r3, #15
   11004:	0002      	movs	r2, r0
   11006:	1cbc      	adds	r4, r7, #2
   11008:	439a      	bics	r2, r3
   1100a:	d10c      	bne.n	11026 <MacExecuteCommands+0x8a>
   1100c:	4b5f      	ldr	r3, [pc, #380]	; (1118c <MacExecuteCommands+0x1f0>)
   1100e:	4798      	blx	r3
   11010:	0032      	movs	r2, r6
   11012:	2380      	movs	r3, #128	; 0x80
   11014:	3284      	adds	r2, #132	; 0x84
   11016:	7851      	ldrb	r1, [r2, #1]
   11018:	425b      	negs	r3, r3
   1101a:	430b      	orrs	r3, r1
   1101c:	7053      	strb	r3, [r2, #1]
   1101e:	210b      	movs	r1, #11
   11020:	0028      	movs	r0, r5
   11022:	4b5b      	ldr	r3, [pc, #364]	; (11190 <MacExecuteCommands+0x1f4>)
   11024:	4798      	blx	r3
   11026:	0032      	movs	r2, r6
   11028:	2103      	movs	r1, #3
   1102a:	32e0      	adds	r2, #224	; 0xe0
   1102c:	7813      	ldrb	r3, [r2, #0]
   1102e:	4359      	muls	r1, r3
   11030:	1876      	adds	r6, r6, r1
   11032:	3699      	adds	r6, #153	; 0x99
   11034:	7831      	ldrb	r1, [r6, #0]
   11036:	29ff      	cmp	r1, #255	; 0xff
   11038:	d003      	beq.n	11042 <MacExecuteCommands+0xa6>
   1103a:	2b0f      	cmp	r3, #15
   1103c:	d801      	bhi.n	11042 <MacExecuteCommands+0xa6>
   1103e:	3301      	adds	r3, #1
   11040:	7013      	strb	r3, [r2, #0]
   11042:	0027      	movs	r7, r4
   11044:	e7b2      	b.n	10fac <MacExecuteCommands+0x10>
   11046:	0020      	movs	r0, r4
   11048:	4b52      	ldr	r3, [pc, #328]	; (11194 <MacExecuteCommands+0x1f8>)
   1104a:	e7cd      	b.n	10fe8 <MacExecuteCommands+0x4c>
   1104c:	0020      	movs	r0, r4
   1104e:	4b52      	ldr	r3, [pc, #328]	; (11198 <MacExecuteCommands+0x1fc>)
   11050:	e7ca      	b.n	10fe8 <MacExecuteCommands+0x4c>
   11052:	0020      	movs	r0, r4
   11054:	4b51      	ldr	r3, [pc, #324]	; (1119c <MacExecuteCommands+0x200>)
   11056:	4798      	blx	r3
   11058:	0033      	movs	r3, r6
   1105a:	33e0      	adds	r3, #224	; 0xe0
   1105c:	0004      	movs	r4, r0
   1105e:	781b      	ldrb	r3, [r3, #0]
   11060:	e7b9      	b.n	10fd6 <MacExecuteCommands+0x3a>
   11062:	2203      	movs	r2, #3
   11064:	4353      	muls	r3, r2
   11066:	18f3      	adds	r3, r6, r3
   11068:	3399      	adds	r3, #153	; 0x99
   1106a:	32fc      	adds	r2, #252	; 0xfc
   1106c:	701a      	strb	r2, [r3, #0]
   1106e:	9c01      	ldr	r4, [sp, #4]
   11070:	9502      	str	r5, [sp, #8]
   11072:	e7d8      	b.n	11026 <MacExecuteCommands+0x8a>
   11074:	23ff      	movs	r3, #255	; 0xff
   11076:	7013      	strb	r3, [r2, #0]
   11078:	e7f9      	b.n	1106e <MacExecuteCommands+0xd2>
   1107a:	9b02      	ldr	r3, [sp, #8]
   1107c:	2b00      	cmp	r3, #0
   1107e:	d199      	bne.n	10fb4 <MacExecuteCommands+0x18>
   11080:	0033      	movs	r3, r6
   11082:	2203      	movs	r2, #3
   11084:	33e0      	adds	r3, #224	; 0xe0
   11086:	781b      	ldrb	r3, [r3, #0]
   11088:	2401      	movs	r4, #1
   1108a:	435a      	muls	r2, r3
   1108c:	18b2      	adds	r2, r6, r2
   1108e:	0010      	movs	r0, r2
   11090:	3098      	adds	r0, #152	; 0x98
   11092:	7881      	ldrb	r1, [r0, #2]
   11094:	3299      	adds	r2, #153	; 0x99
   11096:	43a9      	bics	r1, r5
   11098:	4021      	ands	r1, r4
   1109a:	7081      	strb	r1, [r0, #2]
   1109c:	78c1      	ldrb	r1, [r0, #3]
   1109e:	193c      	adds	r4, r7, r4
   110a0:	43a9      	bics	r1, r5
   110a2:	70c1      	strb	r1, [r0, #3]
   110a4:	7839      	ldrb	r1, [r7, #0]
   110a6:	7011      	strb	r1, [r2, #0]
   110a8:	7838      	ldrb	r0, [r7, #0]
   110aa:	493d      	ldr	r1, [pc, #244]	; (111a0 <MacExecuteCommands+0x204>)
   110ac:	1809      	adds	r1, r1, r0
   110ae:	3902      	subs	r1, #2
   110b0:	7809      	ldrb	r1, [r1, #0]
   110b2:	1861      	adds	r1, r4, r1
   110b4:	468c      	mov	ip, r1
   110b6:	9901      	ldr	r1, [sp, #4]
   110b8:	4561      	cmp	r1, ip
   110ba:	d3db      	bcc.n	11074 <MacExecuteCommands+0xd8>
   110bc:	3802      	subs	r0, #2
   110be:	280b      	cmp	r0, #11
   110c0:	d8cf      	bhi.n	11062 <MacExecuteCommands+0xc6>
   110c2:	f001 ff33 	bl	12f2c <__gnu_thumb1_case_shi>
   110c6:	ff7f      	.short	0xff7f
   110c8:	ff94ff8f 	.word	0xff94ff8f
   110cc:	ffb0ff97 	.word	0xffb0ff97
   110d0:	ff9dff9a 	.word	0xff9dff9a
   110d4:	ffc3ffc0 	.word	0xffc3ffc0
   110d8:	ffceffce 	.word	0xffceffce
   110dc:	ffc6      	.short	0xffc6
   110de:	4b31      	ldr	r3, [pc, #196]	; (111a4 <MacExecuteCommands+0x208>)
   110e0:	5cf3      	ldrb	r3, [r6, r3]
   110e2:	43db      	mvns	r3, r3
   110e4:	075b      	lsls	r3, r3, #29
   110e6:	d000      	beq.n	110ea <MacExecuteCommands+0x14e>
   110e8:	e769      	b.n	10fbe <MacExecuteCommands+0x22>
   110ea:	4b2f      	ldr	r3, [pc, #188]	; (111a8 <MacExecuteCommands+0x20c>)
   110ec:	ad05      	add	r5, sp, #20
   110ee:	5cf4      	ldrb	r4, [r6, r3]
   110f0:	2100      	movs	r1, #0
   110f2:	0724      	lsls	r4, r4, #28
   110f4:	0f24      	lsrs	r4, r4, #28
   110f6:	b2e3      	uxtb	r3, r4
   110f8:	9301      	str	r3, [sp, #4]
   110fa:	4b2c      	ldr	r3, [pc, #176]	; (111ac <MacExecuteCommands+0x210>)
   110fc:	002a      	movs	r2, r5
   110fe:	5cf3      	ldrb	r3, [r6, r3]
   11100:	2014      	movs	r0, #20
   11102:	9302      	str	r3, [sp, #8]
   11104:	2389      	movs	r3, #137	; 0x89
   11106:	009b      	lsls	r3, r3, #2
   11108:	5cf3      	ldrb	r3, [r6, r3]
   1110a:	9303      	str	r3, [sp, #12]
   1110c:	4b28      	ldr	r3, [pc, #160]	; (111b0 <MacExecuteCommands+0x214>)
   1110e:	4798      	blx	r3
   11110:	0033      	movs	r3, r6
   11112:	782a      	ldrb	r2, [r5, #0]
   11114:	33f3      	adds	r3, #243	; 0xf3
   11116:	701a      	strb	r2, [r3, #0]
   11118:	0033      	movs	r3, r6
   1111a:	786a      	ldrb	r2, [r5, #1]
   1111c:	33f4      	adds	r3, #244	; 0xf4
   1111e:	701a      	strb	r2, [r3, #0]
   11120:	4b24      	ldr	r3, [pc, #144]	; (111b4 <MacExecuteCommands+0x218>)
   11122:	4798      	blx	r3
   11124:	9802      	ldr	r0, [sp, #8]
   11126:	4b24      	ldr	r3, [pc, #144]	; (111b8 <MacExecuteCommands+0x21c>)
   11128:	4798      	blx	r3
   1112a:	0032      	movs	r2, r6
   1112c:	2308      	movs	r3, #8
   1112e:	3284      	adds	r2, #132	; 0x84
   11130:	7851      	ldrb	r1, [r2, #1]
   11132:	430b      	orrs	r3, r1
   11134:	7053      	strb	r3, [r2, #1]
   11136:	9803      	ldr	r0, [sp, #12]
   11138:	4b20      	ldr	r3, [pc, #128]	; (111bc <MacExecuteCommands+0x220>)
   1113a:	4798      	blx	r3
   1113c:	0033      	movs	r3, r6
   1113e:	b2e2      	uxtb	r2, r4
   11140:	33e1      	adds	r3, #225	; 0xe1
   11142:	2a00      	cmp	r2, #0
   11144:	d10e      	bne.n	11164 <MacExecuteCommands+0x1c8>
   11146:	701c      	strb	r4, [r3, #0]
   11148:	2113      	movs	r1, #19
   1114a:	4c11      	ldr	r4, [pc, #68]	; (11190 <MacExecuteCommands+0x1f4>)
   1114c:	2000      	movs	r0, #0
   1114e:	47a0      	blx	r4
   11150:	2210      	movs	r2, #16
   11152:	4b08      	ldr	r3, [pc, #32]	; (11174 <MacExecuteCommands+0x1d8>)
   11154:	2001      	movs	r0, #1
   11156:	3384      	adds	r3, #132	; 0x84
   11158:	7859      	ldrb	r1, [r3, #1]
   1115a:	430a      	orrs	r2, r1
   1115c:	705a      	strb	r2, [r3, #1]
   1115e:	210b      	movs	r1, #11
   11160:	47a0      	blx	r4
   11162:	e72c      	b.n	10fbe <MacExecuteCommands+0x22>
   11164:	9a01      	ldr	r2, [sp, #4]
   11166:	3a01      	subs	r2, #1
   11168:	b2d2      	uxtb	r2, r2
   1116a:	701a      	strb	r2, [r3, #0]
   1116c:	0033      	movs	r3, r6
   1116e:	33e2      	adds	r3, #226	; 0xe2
   11170:	701a      	strb	r2, [r3, #0]
   11172:	e7e9      	b.n	11148 <MacExecuteCommands+0x1ac>
   11174:	20003170 	.word	0x20003170
   11178:	00000226 	.word	0x00000226
   1117c:	000100fd 	.word	0x000100fd
   11180:	0000ffc1 	.word	0x0000ffc1
   11184:	0000fec5 	.word	0x0000fec5
   11188:	00010e0d 	.word	0x00010e0d
   1118c:	0000f5f1 	.word	0x0000f5f1
   11190:	00008d81 	.word	0x00008d81
   11194:	000100ad 	.word	0x000100ad
   11198:	0000fff9 	.word	0x0000fff9
   1119c:	00010235 	.word	0x00010235
   111a0:	000182ef 	.word	0x000182ef
   111a4:	00000223 	.word	0x00000223
   111a8:	00000229 	.word	0x00000229
   111ac:	00000225 	.word	0x00000225
   111b0:	0000c6dd 	.word	0x0000c6dd
   111b4:	00010de1 	.word	0x00010de1
   111b8:	0000fd55 	.word	0x0000fd55
   111bc:	0000fce9 	.word	0x0000fce9

000111c0 <LorawanSetDataRange>:
   111c0:	2201      	movs	r2, #1
   111c2:	b530      	push	{r4, r5, lr}
   111c4:	b085      	sub	sp, #20
   111c6:	ab01      	add	r3, sp, #4
   111c8:	ac02      	add	r4, sp, #8
   111ca:	7018      	strb	r0, [r3, #0]
   111cc:	7020      	strb	r0, [r4, #0]
   111ce:	7061      	strb	r1, [r4, #1]
   111d0:	2015      	movs	r0, #21
   111d2:	0019      	movs	r1, r3
   111d4:	4d11      	ldr	r5, [pc, #68]	; (1121c <LorawanSetDataRange+0x5c>)
   111d6:	705a      	strb	r2, [r3, #1]
   111d8:	47a8      	blx	r5
   111da:	2808      	cmp	r0, #8
   111dc:	d003      	beq.n	111e6 <LorawanSetDataRange+0x26>
   111de:	250a      	movs	r5, #10
   111e0:	0028      	movs	r0, r5
   111e2:	b005      	add	sp, #20
   111e4:	bd30      	pop	{r4, r5, pc}
   111e6:	0021      	movs	r1, r4
   111e8:	2012      	movs	r0, #18
   111ea:	47a8      	blx	r5
   111ec:	0005      	movs	r5, r0
   111ee:	2808      	cmp	r0, #8
   111f0:	d1f5      	bne.n	111de <LorawanSetDataRange+0x1e>
   111f2:	0021      	movs	r1, r4
   111f4:	4b0a      	ldr	r3, [pc, #40]	; (11220 <LorawanSetDataRange+0x60>)
   111f6:	ac03      	add	r4, sp, #12
   111f8:	2012      	movs	r0, #18
   111fa:	4798      	blx	r3
   111fc:	0022      	movs	r2, r4
   111fe:	2100      	movs	r1, #0
   11200:	4b08      	ldr	r3, [pc, #32]	; (11224 <LorawanSetDataRange+0x64>)
   11202:	2014      	movs	r0, #20
   11204:	4798      	blx	r3
   11206:	4b08      	ldr	r3, [pc, #32]	; (11228 <LorawanSetDataRange+0x68>)
   11208:	7821      	ldrb	r1, [r4, #0]
   1120a:	001a      	movs	r2, r3
   1120c:	32f3      	adds	r2, #243	; 0xf3
   1120e:	7011      	strb	r1, [r2, #0]
   11210:	7862      	ldrb	r2, [r4, #1]
   11212:	33f4      	adds	r3, #244	; 0xf4
   11214:	701a      	strb	r2, [r3, #0]
   11216:	4b05      	ldr	r3, [pc, #20]	; (1122c <LorawanSetDataRange+0x6c>)
   11218:	4798      	blx	r3
   1121a:	e7e1      	b.n	111e0 <LorawanSetDataRange+0x20>
   1121c:	0000c6f9 	.word	0x0000c6f9
   11220:	0000c715 	.word	0x0000c715
   11224:	0000c6dd 	.word	0x0000c6dd
   11228:	20003170 	.word	0x20003170
   1122c:	00010de1 	.word	0x00010de1

00011230 <LorawanSetChannelIdStatus>:
   11230:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11232:	466b      	mov	r3, sp
   11234:	7018      	strb	r0, [r3, #0]
   11236:	7059      	strb	r1, [r3, #1]
   11238:	2016      	movs	r0, #22
   1123a:	4669      	mov	r1, sp
   1123c:	4b0c      	ldr	r3, [pc, #48]	; (11270 <LorawanSetChannelIdStatus+0x40>)
   1123e:	4798      	blx	r3
   11240:	0004      	movs	r4, r0
   11242:	2808      	cmp	r0, #8
   11244:	d111      	bne.n	1126a <LorawanSetChannelIdStatus+0x3a>
   11246:	ad01      	add	r5, sp, #4
   11248:	002a      	movs	r2, r5
   1124a:	2100      	movs	r1, #0
   1124c:	4b09      	ldr	r3, [pc, #36]	; (11274 <LorawanSetChannelIdStatus+0x44>)
   1124e:	2014      	movs	r0, #20
   11250:	4798      	blx	r3
   11252:	4b09      	ldr	r3, [pc, #36]	; (11278 <LorawanSetChannelIdStatus+0x48>)
   11254:	7829      	ldrb	r1, [r5, #0]
   11256:	001a      	movs	r2, r3
   11258:	32f3      	adds	r2, #243	; 0xf3
   1125a:	7011      	strb	r1, [r2, #0]
   1125c:	786a      	ldrb	r2, [r5, #1]
   1125e:	33f4      	adds	r3, #244	; 0xf4
   11260:	701a      	strb	r2, [r3, #0]
   11262:	4b06      	ldr	r3, [pc, #24]	; (1127c <LorawanSetChannelIdStatus+0x4c>)
   11264:	4798      	blx	r3
   11266:	0020      	movs	r0, r4
   11268:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1126a:	240a      	movs	r4, #10
   1126c:	e7fb      	b.n	11266 <LorawanSetChannelIdStatus+0x36>
   1126e:	46c0      	nop			; (mov r8, r8)
   11270:	0000c715 	.word	0x0000c715
   11274:	0000c6dd 	.word	0x0000c6dd
   11278:	20003170 	.word	0x20003170
   1127c:	00010de1 	.word	0x00010de1

00011280 <LORAWAN_RxDone>:
   11280:	b5f0      	push	{r4, r5, r6, r7, lr}
   11282:	4bc4      	ldr	r3, [pc, #784]	; (11594 <LORAWAN_RxDone+0x314>)
   11284:	b093      	sub	sp, #76	; 0x4c
   11286:	781b      	ldrb	r3, [r3, #0]
   11288:	0007      	movs	r7, r0
   1128a:	b25a      	sxtb	r2, r3
   1128c:	9106      	str	r1, [sp, #24]
   1128e:	4cc2      	ldr	r4, [pc, #776]	; (11598 <LORAWAN_RxDone+0x318>)
   11290:	2a00      	cmp	r2, #0
   11292:	da01      	bge.n	11298 <LORAWAN_RxDone+0x18>
   11294:	f000 fc86 	bl	11ba4 <LORAWAN_RxDone+0x924>
   11298:	7801      	ldrb	r1, [r0, #0]
   1129a:	221f      	movs	r2, #31
   1129c:	000e      	movs	r6, r1
   1129e:	4396      	bics	r6, r2
   112a0:	2e20      	cmp	r6, #32
   112a2:	d000      	beq.n	112a6 <LORAWAN_RxDone+0x26>
   112a4:	e1ae      	b.n	11604 <LORAWAN_RxDone+0x384>
   112a6:	7822      	ldrb	r2, [r4, #0]
   112a8:	2a00      	cmp	r2, #0
   112aa:	d001      	beq.n	112b0 <LORAWAN_RxDone+0x30>
   112ac:	f000 fc66 	bl	11b7c <LORAWAN_RxDone+0x8fc>
   112b0:	0022      	movs	r2, r4
   112b2:	3294      	adds	r2, #148	; 0x94
   112b4:	7812      	ldrb	r2, [r2, #0]
   112b6:	0752      	lsls	r2, r2, #29
   112b8:	d401      	bmi.n	112be <LORAWAN_RxDone+0x3e>
   112ba:	f000 fc5f 	bl	11b7c <LORAWAN_RxDone+0x8fc>
   112be:	9b06      	ldr	r3, [sp, #24]
   112c0:	3b01      	subs	r3, #1
   112c2:	b2db      	uxtb	r3, r3
   112c4:	9307      	str	r3, [sp, #28]
   112c6:	4bb5      	ldr	r3, [pc, #724]	; (1159c <LORAWAN_RxDone+0x31c>)
   112c8:	469c      	mov	ip, r3
   112ca:	9b07      	ldr	r3, [sp, #28]
   112cc:	2b00      	cmp	r3, #0
   112ce:	d12c      	bne.n	1132a <LORAWAN_RxDone+0xaa>
   112d0:	9b06      	ldr	r3, [sp, #24]
   112d2:	4660      	mov	r0, ip
   112d4:	1f1d      	subs	r5, r3, #4
   112d6:	b2eb      	uxtb	r3, r5
   112d8:	9300      	str	r3, [sp, #0]
   112da:	4ab1      	ldr	r2, [pc, #708]	; (115a0 <LORAWAN_RxDone+0x320>)
   112dc:	003b      	movs	r3, r7
   112de:	9907      	ldr	r1, [sp, #28]
   112e0:	4eb0      	ldr	r6, [pc, #704]	; (115a4 <LORAWAN_RxDone+0x324>)
   112e2:	47b0      	blx	r6
   112e4:	2204      	movs	r2, #4
   112e6:	49ae      	ldr	r1, [pc, #696]	; (115a0 <LORAWAN_RxDone+0x320>)
   112e8:	4baf      	ldr	r3, [pc, #700]	; (115a8 <LORAWAN_RxDone+0x328>)
   112ea:	a810      	add	r0, sp, #64	; 0x40
   112ec:	4798      	blx	r3
   112ee:	9e10      	ldr	r6, [sp, #64]	; 0x40
   112f0:	1979      	adds	r1, r7, r5
   112f2:	2204      	movs	r2, #4
   112f4:	4bac      	ldr	r3, [pc, #688]	; (115a8 <LORAWAN_RxDone+0x328>)
   112f6:	a810      	add	r0, sp, #64	; 0x40
   112f8:	960d      	str	r6, [sp, #52]	; 0x34
   112fa:	4798      	blx	r3
   112fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
   112fe:	4ba6      	ldr	r3, [pc, #664]	; (11598 <LORAWAN_RxDone+0x318>)
   11300:	210e      	movs	r1, #14
   11302:	42b2      	cmp	r2, r6
   11304:	d029      	beq.n	1135a <LORAWAN_RxDone+0xda>
   11306:	001a      	movs	r2, r3
   11308:	3284      	adds	r2, #132	; 0x84
   1130a:	7812      	ldrb	r2, [r2, #0]
   1130c:	400a      	ands	r2, r1
   1130e:	2a0a      	cmp	r2, #10
   11310:	d005      	beq.n	1131e <LORAWAN_RxDone+0x9e>
   11312:	2a06      	cmp	r2, #6
   11314:	d106      	bne.n	11324 <LORAWAN_RxDone+0xa4>
   11316:	33f9      	adds	r3, #249	; 0xf9
   11318:	781b      	ldrb	r3, [r3, #0]
   1131a:	2b00      	cmp	r3, #0
   1131c:	d002      	beq.n	11324 <LORAWAN_RxDone+0xa4>
   1131e:	2018      	movs	r0, #24
   11320:	4ba2      	ldr	r3, [pc, #648]	; (115ac <LORAWAN_RxDone+0x32c>)
   11322:	4798      	blx	r3
   11324:	4ba2      	ldr	r3, [pc, #648]	; (115b0 <LORAWAN_RxDone+0x330>)
   11326:	4798      	blx	r3
   11328:	e1d0      	b.n	116cc <LORAWAN_RxDone+0x44c>
   1132a:	9b06      	ldr	r3, [sp, #24]
   1132c:	9a07      	ldr	r2, [sp, #28]
   1132e:	2100      	movs	r1, #0
   11330:	1a98      	subs	r0, r3, r2
   11332:	1838      	adds	r0, r7, r0
   11334:	4662      	mov	r2, ip
   11336:	4b9f      	ldr	r3, [pc, #636]	; (115b4 <LORAWAN_RxDone+0x334>)
   11338:	4798      	blx	r3
   1133a:	2800      	cmp	r0, #0
   1133c:	d006      	beq.n	1134c <LORAWAN_RxDone+0xcc>
   1133e:	4b9b      	ldr	r3, [pc, #620]	; (115ac <LORAWAN_RxDone+0x32c>)
   11340:	4798      	blx	r3
   11342:	4b9b      	ldr	r3, [pc, #620]	; (115b0 <LORAWAN_RxDone+0x330>)
   11344:	4798      	blx	r3
   11346:	201f      	movs	r0, #31
   11348:	b013      	add	sp, #76	; 0x4c
   1134a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1134c:	9b07      	ldr	r3, [sp, #28]
   1134e:	2b10      	cmp	r3, #16
   11350:	d901      	bls.n	11356 <LORAWAN_RxDone+0xd6>
   11352:	3b10      	subs	r3, #16
   11354:	e7b5      	b.n	112c2 <LORAWAN_RxDone+0x42>
   11356:	9007      	str	r0, [sp, #28]
   11358:	e7b5      	b.n	112c6 <LORAWAN_RxDone+0x46>
   1135a:	001a      	movs	r2, r3
   1135c:	3284      	adds	r2, #132	; 0x84
   1135e:	7812      	ldrb	r2, [r2, #0]
   11360:	400a      	ands	r2, r1
   11362:	2a06      	cmp	r2, #6
   11364:	d103      	bne.n	1136e <LORAWAN_RxDone+0xee>
   11366:	33ec      	adds	r3, #236	; 0xec
   11368:	7818      	ldrb	r0, [r3, #0]
   1136a:	4b93      	ldr	r3, [pc, #588]	; (115b8 <LORAWAN_RxDone+0x338>)
   1136c:	4798      	blx	r3
   1136e:	7a3a      	ldrb	r2, [r7, #8]
   11370:	79fb      	ldrb	r3, [r7, #7]
   11372:	0212      	lsls	r2, r2, #8
   11374:	431a      	orrs	r2, r3
   11376:	7a7b      	ldrb	r3, [r7, #9]
   11378:	2001      	movs	r0, #1
   1137a:	041b      	lsls	r3, r3, #16
   1137c:	431a      	orrs	r2, r3
   1137e:	7abb      	ldrb	r3, [r7, #10]
   11380:	061b      	lsls	r3, r3, #24
   11382:	4313      	orrs	r3, r2
   11384:	0a19      	lsrs	r1, r3, #8
   11386:	7063      	strb	r3, [r4, #1]
   11388:	70a1      	strb	r1, [r4, #2]
   1138a:	0c19      	lsrs	r1, r3, #16
   1138c:	0e1b      	lsrs	r3, r3, #24
   1138e:	70e1      	strb	r1, [r4, #3]
   11390:	7123      	strb	r3, [r4, #4]
   11392:	240f      	movs	r4, #15
   11394:	2103      	movs	r1, #3
   11396:	4b89      	ldr	r3, [pc, #548]	; (115bc <LORAWAN_RxDone+0x33c>)
   11398:	4798      	blx	r3
   1139a:	7b38      	ldrb	r0, [r7, #12]
   1139c:	4b88      	ldr	r3, [pc, #544]	; (115c0 <LORAWAN_RxDone+0x340>)
   1139e:	4020      	ands	r0, r4
   113a0:	4798      	blx	r3
   113a2:	7af8      	ldrb	r0, [r7, #11]
   113a4:	4b87      	ldr	r3, [pc, #540]	; (115c4 <LORAWAN_RxDone+0x344>)
   113a6:	0641      	lsls	r1, r0, #25
   113a8:	0700      	lsls	r0, r0, #28
   113aa:	0f49      	lsrs	r1, r1, #29
   113ac:	0f00      	lsrs	r0, r0, #28
   113ae:	4798      	blx	r3
   113b0:	4b85      	ldr	r3, [pc, #532]	; (115c8 <LORAWAN_RxDone+0x348>)
   113b2:	2100      	movs	r1, #0
   113b4:	203b      	movs	r0, #59	; 0x3b
   113b6:	4798      	blx	r3
   113b8:	9b06      	ldr	r3, [sp, #24]
   113ba:	2b21      	cmp	r3, #33	; 0x21
   113bc:	d000      	beq.n	113c0 <LORAWAN_RxDone+0x140>
   113be:	e08c      	b.n	114da <LORAWAN_RxDone+0x25a>
   113c0:	251a      	movs	r5, #26
   113c2:	ab04      	add	r3, sp, #16
   113c4:	18ed      	adds	r5, r5, r3
   113c6:	002a      	movs	r2, r5
   113c8:	4b80      	ldr	r3, [pc, #512]	; (115cc <LORAWAN_RxDone+0x34c>)
   113ca:	4981      	ldr	r1, [pc, #516]	; (115d0 <LORAWAN_RxDone+0x350>)
   113cc:	2007      	movs	r0, #7
   113ce:	4798      	blx	r3
   113d0:	782b      	ldrb	r3, [r5, #0]
   113d2:	2bff      	cmp	r3, #255	; 0xff
   113d4:	d100      	bne.n	113d8 <LORAWAN_RxDone+0x158>
   113d6:	e080      	b.n	114da <LORAWAN_RxDone+0x25a>
   113d8:	2350      	movs	r3, #80	; 0x50
   113da:	43a3      	bics	r3, r4
   113dc:	9308      	str	r3, [sp, #32]
   113de:	003b      	movs	r3, r7
   113e0:	330d      	adds	r3, #13
   113e2:	9306      	str	r3, [sp, #24]
   113e4:	2600      	movs	r6, #0
   113e6:	2203      	movs	r2, #3
   113e8:	9906      	ldr	r1, [sp, #24]
   113ea:	4b6f      	ldr	r3, [pc, #444]	; (115a8 <LORAWAN_RxDone+0x328>)
   113ec:	a80e      	add	r0, sp, #56	; 0x38
   113ee:	960e      	str	r6, [sp, #56]	; 0x38
   113f0:	4798      	blx	r3
   113f2:	2364      	movs	r3, #100	; 0x64
   113f4:	990e      	ldr	r1, [sp, #56]	; 0x38
   113f6:	aa04      	add	r2, sp, #16
   113f8:	4359      	muls	r1, r3
   113fa:	3b4a      	subs	r3, #74	; 0x4a
   113fc:	189b      	adds	r3, r3, r2
   113fe:	7818      	ldrb	r0, [r3, #0]
   11400:	9b07      	ldr	r3, [sp, #28]
   11402:	910e      	str	r1, [sp, #56]	; 0x38
   11404:	1818      	adds	r0, r3, r0
   11406:	b2c0      	uxtb	r0, r0
   11408:	76d0      	strb	r0, [r2, #27]
   1140a:	42b1      	cmp	r1, r6
   1140c:	d100      	bne.n	11410 <LORAWAN_RxDone+0x190>
   1140e:	e0a7      	b.n	11560 <LORAWAN_RxDone+0x2e0>
   11410:	466b      	mov	r3, sp
   11412:	2220      	movs	r2, #32
   11414:	189b      	adds	r3, r3, r2
   11416:	781b      	ldrb	r3, [r3, #0]
   11418:	ad10      	add	r5, sp, #64	; 0x40
   1141a:	ac0b      	add	r4, sp, #44	; 0x2c
   1141c:	7128      	strb	r0, [r5, #4]
   1141e:	9110      	str	r1, [sp, #64]	; 0x40
   11420:	7020      	strb	r0, [r4, #0]
   11422:	7063      	strb	r3, [r4, #1]
   11424:	0029      	movs	r1, r5
   11426:	2002      	movs	r0, #2
   11428:	4b6a      	ldr	r3, [pc, #424]	; (115d4 <LORAWAN_RxDone+0x354>)
   1142a:	4798      	blx	r3
   1142c:	2808      	cmp	r0, #8
   1142e:	d140      	bne.n	114b2 <LORAWAN_RxDone+0x232>
   11430:	0029      	movs	r1, r5
   11432:	0030      	movs	r0, r6
   11434:	4b64      	ldr	r3, [pc, #400]	; (115c8 <LORAWAN_RxDone+0x348>)
   11436:	4798      	blx	r3
   11438:	ad0c      	add	r5, sp, #48	; 0x30
   1143a:	0021      	movs	r1, r4
   1143c:	4b62      	ldr	r3, [pc, #392]	; (115c8 <LORAWAN_RxDone+0x348>)
   1143e:	2012      	movs	r0, #18
   11440:	4798      	blx	r3
   11442:	0031      	movs	r1, r6
   11444:	002a      	movs	r2, r5
   11446:	4e61      	ldr	r6, [pc, #388]	; (115cc <LORAWAN_RxDone+0x34c>)
   11448:	2014      	movs	r0, #20
   1144a:	47b0      	blx	r6
   1144c:	4c52      	ldr	r4, [pc, #328]	; (11598 <LORAWAN_RxDone+0x318>)
   1144e:	782a      	ldrb	r2, [r5, #0]
   11450:	0023      	movs	r3, r4
   11452:	33f3      	adds	r3, #243	; 0xf3
   11454:	701a      	strb	r2, [r3, #0]
   11456:	0023      	movs	r3, r4
   11458:	786a      	ldrb	r2, [r5, #1]
   1145a:	2522      	movs	r5, #34	; 0x22
   1145c:	33f4      	adds	r3, #244	; 0xf4
   1145e:	701a      	strb	r2, [r3, #0]
   11460:	4b5d      	ldr	r3, [pc, #372]	; (115d8 <LORAWAN_RxDone+0x358>)
   11462:	4798      	blx	r3
   11464:	ab04      	add	r3, sp, #16
   11466:	18ed      	adds	r5, r5, r3
   11468:	231b      	movs	r3, #27
   1146a:	a904      	add	r1, sp, #16
   1146c:	185b      	adds	r3, r3, r1
   1146e:	0019      	movs	r1, r3
   11470:	002a      	movs	r2, r5
   11472:	201e      	movs	r0, #30
   11474:	47b0      	blx	r6
   11476:	0023      	movs	r3, r4
   11478:	33ff      	adds	r3, #255	; 0xff
   1147a:	7f5b      	ldrb	r3, [r3, #29]
   1147c:	079b      	lsls	r3, r3, #30
   1147e:	d508      	bpl.n	11492 <LORAWAN_RxDone+0x212>
   11480:	ab04      	add	r3, sp, #16
   11482:	7edb      	ldrb	r3, [r3, #27]
   11484:	a90f      	add	r1, sp, #60	; 0x3c
   11486:	708b      	strb	r3, [r1, #2]
   11488:	882b      	ldrh	r3, [r5, #0]
   1148a:	201e      	movs	r0, #30
   1148c:	800b      	strh	r3, [r1, #0]
   1148e:	4b4e      	ldr	r3, [pc, #312]	; (115c8 <LORAWAN_RxDone+0x348>)
   11490:	4798      	blx	r3
   11492:	231b      	movs	r3, #27
   11494:	aa04      	add	r2, sp, #16
   11496:	189b      	adds	r3, r3, r2
   11498:	7818      	ldrb	r0, [r3, #0]
   1149a:	2101      	movs	r1, #1
   1149c:	4b4f      	ldr	r3, [pc, #316]	; (115dc <LORAWAN_RxDone+0x35c>)
   1149e:	4798      	blx	r3
   114a0:	2204      	movs	r2, #4
   114a2:	3484      	adds	r4, #132	; 0x84
   114a4:	7863      	ldrb	r3, [r4, #1]
   114a6:	210b      	movs	r1, #11
   114a8:	4313      	orrs	r3, r2
   114aa:	7063      	strb	r3, [r4, #1]
   114ac:	2001      	movs	r0, #1
   114ae:	4b43      	ldr	r3, [pc, #268]	; (115bc <LORAWAN_RxDone+0x33c>)
   114b0:	4798      	blx	r3
   114b2:	9b07      	ldr	r3, [sp, #28]
   114b4:	3301      	adds	r3, #1
   114b6:	b2db      	uxtb	r3, r3
   114b8:	9307      	str	r3, [sp, #28]
   114ba:	9b06      	ldr	r3, [sp, #24]
   114bc:	3303      	adds	r3, #3
   114be:	9306      	str	r3, [sp, #24]
   114c0:	9b07      	ldr	r3, [sp, #28]
   114c2:	2b05      	cmp	r3, #5
   114c4:	d18e      	bne.n	113e4 <LORAWAN_RxDone+0x164>
   114c6:	2204      	movs	r2, #4
   114c8:	4b33      	ldr	r3, [pc, #204]	; (11598 <LORAWAN_RxDone+0x318>)
   114ca:	2001      	movs	r0, #1
   114cc:	3384      	adds	r3, #132	; 0x84
   114ce:	7859      	ldrb	r1, [r3, #1]
   114d0:	430a      	orrs	r2, r1
   114d2:	705a      	strb	r2, [r3, #1]
   114d4:	210b      	movs	r1, #11
   114d6:	4b39      	ldr	r3, [pc, #228]	; (115bc <LORAWAN_RxDone+0x33c>)
   114d8:	4798      	blx	r3
   114da:	4d41      	ldr	r5, [pc, #260]	; (115e0 <LORAWAN_RxDone+0x360>)
   114dc:	1c7e      	adds	r6, r7, #1
   114de:	3704      	adds	r7, #4
   114e0:	0028      	movs	r0, r5
   114e2:	003a      	movs	r2, r7
   114e4:	0031      	movs	r1, r6
   114e6:	4b3f      	ldr	r3, [pc, #252]	; (115e4 <LORAWAN_RxDone+0x364>)
   114e8:	4798      	blx	r3
   114ea:	2302      	movs	r3, #2
   114ec:	4c2a      	ldr	r4, [pc, #168]	; (11598 <LORAWAN_RxDone+0x318>)
   114ee:	0028      	movs	r0, r5
   114f0:	7563      	strb	r3, [r4, #21]
   114f2:	4a2a      	ldr	r2, [pc, #168]	; (1159c <LORAWAN_RxDone+0x31c>)
   114f4:	3b01      	subs	r3, #1
   114f6:	2100      	movs	r1, #0
   114f8:	4d3b      	ldr	r5, [pc, #236]	; (115e8 <LORAWAN_RxDone+0x368>)
   114fa:	47a8      	blx	r5
   114fc:	2800      	cmp	r0, #0
   114fe:	d003      	beq.n	11508 <LORAWAN_RxDone+0x288>
   11500:	4b2a      	ldr	r3, [pc, #168]	; (115ac <LORAWAN_RxDone+0x32c>)
   11502:	4798      	blx	r3
   11504:	4b2a      	ldr	r3, [pc, #168]	; (115b0 <LORAWAN_RxDone+0x330>)
   11506:	4798      	blx	r3
   11508:	2105      	movs	r1, #5
   1150a:	4b2c      	ldr	r3, [pc, #176]	; (115bc <LORAWAN_RxDone+0x33c>)
   1150c:	2001      	movs	r0, #1
   1150e:	4798      	blx	r3
   11510:	4d36      	ldr	r5, [pc, #216]	; (115ec <LORAWAN_RxDone+0x36c>)
   11512:	003a      	movs	r2, r7
   11514:	0028      	movs	r0, r5
   11516:	0031      	movs	r1, r6
   11518:	4b32      	ldr	r3, [pc, #200]	; (115e4 <LORAWAN_RxDone+0x364>)
   1151a:	4798      	blx	r3
   1151c:	2301      	movs	r3, #1
   1151e:	0028      	movs	r0, r5
   11520:	7163      	strb	r3, [r4, #5]
   11522:	4a1e      	ldr	r2, [pc, #120]	; (1159c <LORAWAN_RxDone+0x31c>)
   11524:	18db      	adds	r3, r3, r3
   11526:	2100      	movs	r1, #0
   11528:	4d2f      	ldr	r5, [pc, #188]	; (115e8 <LORAWAN_RxDone+0x368>)
   1152a:	47a8      	blx	r5
   1152c:	2800      	cmp	r0, #0
   1152e:	d003      	beq.n	11538 <LORAWAN_RxDone+0x2b8>
   11530:	4b1e      	ldr	r3, [pc, #120]	; (115ac <LORAWAN_RxDone+0x32c>)
   11532:	4798      	blx	r3
   11534:	4b1e      	ldr	r3, [pc, #120]	; (115b0 <LORAWAN_RxDone+0x330>)
   11536:	4798      	blx	r3
   11538:	4b20      	ldr	r3, [pc, #128]	; (115bc <LORAWAN_RxDone+0x33c>)
   1153a:	2104      	movs	r1, #4
   1153c:	2001      	movs	r0, #1
   1153e:	4798      	blx	r3
   11540:	4b2b      	ldr	r3, [pc, #172]	; (115f0 <LORAWAN_RxDone+0x370>)
   11542:	5ce3      	ldrb	r3, [r4, r3]
   11544:	2b00      	cmp	r3, #0
   11546:	d017      	beq.n	11578 <LORAWAN_RxDone+0x2f8>
   11548:	492a      	ldr	r1, [pc, #168]	; (115f4 <LORAWAN_RxDone+0x374>)
   1154a:	2002      	movs	r0, #2
   1154c:	4c2a      	ldr	r4, [pc, #168]	; (115f8 <LORAWAN_RxDone+0x378>)
   1154e:	47a0      	blx	r4
   11550:	2800      	cmp	r0, #0
   11552:	d008      	beq.n	11566 <LORAWAN_RxDone+0x2e6>
   11554:	4b15      	ldr	r3, [pc, #84]	; (115ac <LORAWAN_RxDone+0x32c>)
   11556:	4798      	blx	r3
   11558:	4b15      	ldr	r3, [pc, #84]	; (115b0 <LORAWAN_RxDone+0x330>)
   1155a:	4798      	blx	r3
   1155c:	2023      	movs	r0, #35	; 0x23
   1155e:	e6f3      	b.n	11348 <LORAWAN_RxDone+0xc8>
   11560:	4b1e      	ldr	r3, [pc, #120]	; (115dc <LORAWAN_RxDone+0x35c>)
   11562:	4798      	blx	r3
   11564:	e7a5      	b.n	114b2 <LORAWAN_RxDone+0x232>
   11566:	4925      	ldr	r1, [pc, #148]	; (115fc <LORAWAN_RxDone+0x37c>)
   11568:	2001      	movs	r0, #1
   1156a:	47a0      	blx	r4
   1156c:	2800      	cmp	r0, #0
   1156e:	d1f1      	bne.n	11554 <LORAWAN_RxDone+0x2d4>
   11570:	4b23      	ldr	r3, [pc, #140]	; (11600 <LORAWAN_RxDone+0x380>)
   11572:	4798      	blx	r3
   11574:	2008      	movs	r0, #8
   11576:	e6e7      	b.n	11348 <LORAWAN_RxDone+0xc8>
   11578:	0020      	movs	r0, r4
   1157a:	0021      	movs	r1, r4
   1157c:	2210      	movs	r2, #16
   1157e:	3115      	adds	r1, #21
   11580:	4d09      	ldr	r5, [pc, #36]	; (115a8 <LORAWAN_RxDone+0x328>)
   11582:	3035      	adds	r0, #53	; 0x35
   11584:	47a8      	blx	r5
   11586:	0020      	movs	r0, r4
   11588:	1d61      	adds	r1, r4, #5
   1158a:	2210      	movs	r2, #16
   1158c:	3025      	adds	r0, #37	; 0x25
   1158e:	47a8      	blx	r5
   11590:	e7ee      	b.n	11570 <LORAWAN_RxDone+0x2f0>
   11592:	46c0      	nop			; (mov r8, r8)
   11594:	200031f4 	.word	0x200031f4
   11598:	20003170 	.word	0x20003170
   1159c:	200031b5 	.word	0x200031b5
   115a0:	20001e9d 	.word	0x20001e9d
   115a4:	00007161 	.word	0x00007161
   115a8:	000161b7 	.word	0x000161b7
   115ac:	0000fe61 	.word	0x0000fe61
   115b0:	00010d15 	.word	0x00010d15
   115b4:	00007129 	.word	0x00007129
   115b8:	0000cf3d 	.word	0x0000cf3d
   115bc:	00008d81 	.word	0x00008d81
   115c0:	0000f5f1 	.word	0x0000f5f1
   115c4:	0000fd05 	.word	0x0000fd05
   115c8:	0000c715 	.word	0x0000c715
   115cc:	0000c6dd 	.word	0x0000c6dd
   115d0:	20003257 	.word	0x20003257
   115d4:	0000c6f9 	.word	0x0000c6f9
   115d8:	00010de1 	.word	0x00010de1
   115dc:	00011231 	.word	0x00011231
   115e0:	20003185 	.word	0x20003185
   115e4:	0000f91d 	.word	0x0000f91d
   115e8:	00007151 	.word	0x00007151
   115ec:	20003175 	.word	0x20003175
   115f0:	0000022d 	.word	0x0000022d
   115f4:	20003195 	.word	0x20003195
   115f8:	0000715d 	.word	0x0000715d
   115fc:	200031a5 	.word	0x200031a5
   11600:	0000f839 	.word	0x0000f839
   11604:	22bf      	movs	r2, #191	; 0xbf
   11606:	3e60      	subs	r6, #96	; 0x60
   11608:	4016      	ands	r6, r2
   1160a:	d000      	beq.n	1160e <LORAWAN_RxDone+0x38e>
   1160c:	e2b6      	b.n	11b7c <LORAWAN_RxDone+0x8fc>
   1160e:	2501      	movs	r5, #1
   11610:	422b      	tst	r3, r5
   11612:	d100      	bne.n	11616 <LORAWAN_RxDone+0x396>
   11614:	e2b2      	b.n	11b7c <LORAWAN_RxDone+0x8fc>
   11616:	7922      	ldrb	r2, [r4, #4]
   11618:	6823      	ldr	r3, [r4, #0]
   1161a:	0612      	lsls	r2, r2, #24
   1161c:	0a1b      	lsrs	r3, r3, #8
   1161e:	431a      	orrs	r2, r3
   11620:	0023      	movs	r3, r4
   11622:	33e0      	adds	r3, #224	; 0xe0
   11624:	701e      	strb	r6, [r3, #0]
   11626:	9207      	str	r2, [sp, #28]
   11628:	7882      	ldrb	r2, [r0, #2]
   1162a:	7843      	ldrb	r3, [r0, #1]
   1162c:	0212      	lsls	r2, r2, #8
   1162e:	431a      	orrs	r2, r3
   11630:	78c3      	ldrb	r3, [r0, #3]
   11632:	041b      	lsls	r3, r3, #16
   11634:	431a      	orrs	r2, r3
   11636:	7903      	ldrb	r3, [r0, #4]
   11638:	061b      	lsls	r3, r3, #24
   1163a:	4313      	orrs	r3, r2
   1163c:	9a07      	ldr	r2, [sp, #28]
   1163e:	429a      	cmp	r2, r3
   11640:	d100      	bne.n	11644 <LORAWAN_RxDone+0x3c4>
   11642:	e2cc      	b.n	11bde <LORAWAN_RxDone+0x95e>
   11644:	ab04      	add	r3, sp, #16
   11646:	3521      	adds	r5, #33	; 0x21
   11648:	18ed      	adds	r5, r5, r3
   1164a:	7a02      	ldrb	r2, [r0, #8]
   1164c:	0949      	lsrs	r1, r1, #5
   1164e:	002b      	movs	r3, r5
   11650:	4eda      	ldr	r6, [pc, #872]	; (119bc <LORAWAN_RxDone+0x73c>)
   11652:	47b0      	blx	r6
   11654:	2808      	cmp	r0, #8
   11656:	d131      	bne.n	116bc <LORAWAN_RxDone+0x43c>
   11658:	233c      	movs	r3, #60	; 0x3c
   1165a:	7829      	ldrb	r1, [r5, #0]
   1165c:	434b      	muls	r3, r1
   1165e:	001d      	movs	r5, r3
   11660:	3535      	adds	r5, #53	; 0x35
   11662:	35ff      	adds	r5, #255	; 0xff
   11664:	192d      	adds	r5, r5, r4
   11666:	18e4      	adds	r4, r4, r3
   11668:	0023      	movs	r3, r4
   1166a:	33fc      	adds	r3, #252	; 0xfc
   1166c:	6b58      	ldr	r0, [r3, #52]	; 0x34
   1166e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   11670:	9308      	str	r3, [sp, #32]
   11672:	79fb      	ldrb	r3, [r7, #7]
   11674:	79ba      	ldrb	r2, [r7, #6]
   11676:	021b      	lsls	r3, r3, #8
   11678:	4313      	orrs	r3, r2
   1167a:	0022      	movs	r2, r4
   1167c:	3255      	adds	r2, #85	; 0x55
   1167e:	32ff      	adds	r2, #255	; 0xff
   11680:	8816      	ldrh	r6, [r2, #0]
   11682:	429e      	cmp	r6, r3
   11684:	d908      	bls.n	11698 <LORAWAN_RxDone+0x418>
   11686:	3457      	adds	r4, #87	; 0x57
   11688:	34ff      	adds	r4, #255	; 0xff
   1168a:	8823      	ldrh	r3, [r4, #0]
   1168c:	3301      	adds	r3, #1
   1168e:	8023      	strh	r3, [r4, #0]
   11690:	79fb      	ldrb	r3, [r7, #7]
   11692:	79bc      	ldrb	r4, [r7, #6]
   11694:	021b      	lsls	r3, r3, #8
   11696:	4323      	orrs	r3, r4
   11698:	8013      	strh	r3, [r2, #0]
   1169a:	9b06      	ldr	r3, [sp, #24]
   1169c:	9000      	str	r0, [sp, #0]
   1169e:	1f1a      	subs	r2, r3, #4
   116a0:	233c      	movs	r3, #60	; 0x3c
   116a2:	434b      	muls	r3, r1
   116a4:	49c6      	ldr	r1, [pc, #792]	; (119c0 <LORAWAN_RxDone+0x740>)
   116a6:	b2d2      	uxtb	r2, r2
   116a8:	18c9      	adds	r1, r1, r3
   116aa:	31fc      	adds	r1, #252	; 0xfc
   116ac:	2349      	movs	r3, #73	; 0x49
   116ae:	6d89      	ldr	r1, [r1, #88]	; 0x58
   116b0:	2001      	movs	r0, #1
   116b2:	4cc4      	ldr	r4, [pc, #784]	; (119c4 <LORAWAN_RxDone+0x744>)
   116b4:	47a0      	blx	r4
   116b6:	2301      	movs	r3, #1
   116b8:	9307      	str	r3, [sp, #28]
   116ba:	e2a6      	b.n	11c0a <LORAWAN_RxDone+0x98a>
   116bc:	220e      	movs	r2, #14
   116be:	4bc2      	ldr	r3, [pc, #776]	; (119c8 <LORAWAN_RxDone+0x748>)
   116c0:	781b      	ldrb	r3, [r3, #0]
   116c2:	4013      	ands	r3, r2
   116c4:	2b0a      	cmp	r3, #10
   116c6:	d008      	beq.n	116da <LORAWAN_RxDone+0x45a>
   116c8:	2b06      	cmp	r3, #6
   116ca:	d001      	beq.n	116d0 <LORAWAN_RxDone+0x450>
   116cc:	200a      	movs	r0, #10
   116ce:	e63b      	b.n	11348 <LORAWAN_RxDone+0xc8>
   116d0:	0023      	movs	r3, r4
   116d2:	33f9      	adds	r3, #249	; 0xf9
   116d4:	781b      	ldrb	r3, [r3, #0]
   116d6:	2b00      	cmp	r3, #0
   116d8:	d0f8      	beq.n	116cc <LORAWAN_RxDone+0x44c>
   116da:	2220      	movs	r2, #32
   116dc:	201e      	movs	r0, #30
   116de:	3494      	adds	r4, #148	; 0x94
   116e0:	7823      	ldrb	r3, [r4, #0]
   116e2:	4393      	bics	r3, r2
   116e4:	7023      	strb	r3, [r4, #0]
   116e6:	4bb9      	ldr	r3, [pc, #740]	; (119cc <LORAWAN_RxDone+0x74c>)
   116e8:	e61b      	b.n	11322 <LORAWAN_RxDone+0xa2>
   116ea:	0022      	movs	r2, r4
   116ec:	2102      	movs	r1, #2
   116ee:	e2a6      	b.n	11c3e <LORAWAN_RxDone+0x9be>
   116f0:	9b08      	ldr	r3, [sp, #32]
   116f2:	328c      	adds	r2, #140	; 0x8c
   116f4:	6013      	str	r3, [r2, #0]
   116f6:	e2e3      	b.n	11cc0 <LORAWAN_RxDone+0xa40>
   116f8:	9b07      	ldr	r3, [sp, #28]
   116fa:	4cb1      	ldr	r4, [pc, #708]	; (119c0 <LORAWAN_RxDone+0x740>)
   116fc:	2b00      	cmp	r3, #0
   116fe:	d000      	beq.n	11702 <LORAWAN_RxDone+0x482>
   11700:	e224      	b.n	11b4c <LORAWAN_RxDone+0x8cc>
   11702:	466a      	mov	r2, sp
   11704:	0023      	movs	r3, r4
   11706:	7f12      	ldrb	r2, [r2, #28]
   11708:	33e3      	adds	r3, #227	; 0xe3
   1170a:	701a      	strb	r2, [r3, #0]
   1170c:	797b      	ldrb	r3, [r7, #5]
   1170e:	2b7f      	cmp	r3, #127	; 0x7f
   11710:	d909      	bls.n	11726 <LORAWAN_RxDone+0x4a6>
   11712:	0022      	movs	r2, r4
   11714:	2320      	movs	r3, #32
   11716:	3284      	adds	r2, #132	; 0x84
   11718:	7811      	ldrb	r1, [r2, #0]
   1171a:	2001      	movs	r0, #1
   1171c:	430b      	orrs	r3, r1
   1171e:	7013      	strb	r3, [r2, #0]
   11720:	210b      	movs	r1, #11
   11722:	4bab      	ldr	r3, [pc, #684]	; (119d0 <LORAWAN_RxDone+0x750>)
   11724:	4798      	blx	r3
   11726:	797b      	ldrb	r3, [r7, #5]
   11728:	06db      	lsls	r3, r3, #27
   1172a:	d505      	bpl.n	11738 <LORAWAN_RxDone+0x4b8>
   1172c:	0022      	movs	r2, r4
   1172e:	2308      	movs	r3, #8
   11730:	3294      	adds	r2, #148	; 0x94
   11732:	7811      	ldrb	r1, [r2, #0]
   11734:	430b      	orrs	r3, r1
   11736:	7013      	strb	r3, [r2, #0]
   11738:	797b      	ldrb	r3, [r7, #5]
   1173a:	065b      	lsls	r3, r3, #25
   1173c:	d505      	bpl.n	1174a <LORAWAN_RxDone+0x4ca>
   1173e:	0022      	movs	r2, r4
   11740:	2310      	movs	r3, #16
   11742:	3294      	adds	r2, #148	; 0x94
   11744:	7811      	ldrb	r1, [r2, #0]
   11746:	430b      	orrs	r3, r1
   11748:	7013      	strb	r3, [r2, #0]
   1174a:	221f      	movs	r2, #31
   1174c:	783b      	ldrb	r3, [r7, #0]
   1174e:	4393      	bics	r3, r2
   11750:	2ba0      	cmp	r3, #160	; 0xa0
   11752:	d105      	bne.n	11760 <LORAWAN_RxDone+0x4e0>
   11754:	0022      	movs	r2, r4
   11756:	3294      	adds	r2, #148	; 0x94
   11758:	7811      	ldrb	r1, [r2, #0]
   1175a:	3b9e      	subs	r3, #158	; 0x9e
   1175c:	430b      	orrs	r3, r1
   1175e:	7013      	strb	r3, [r2, #0]
   11760:	7979      	ldrb	r1, [r7, #5]
   11762:	070b      	lsls	r3, r1, #28
   11764:	d100      	bne.n	11768 <LORAWAN_RxDone+0x4e8>
   11766:	e0d4      	b.n	11912 <LORAWAN_RxDone+0x692>
   11768:	0709      	lsls	r1, r1, #28
   1176a:	0f09      	lsrs	r1, r1, #28
   1176c:	187b      	adds	r3, r7, r1
   1176e:	7a1b      	ldrb	r3, [r3, #8]
   11770:	2b00      	cmp	r3, #0
   11772:	d100      	bne.n	11776 <LORAWAN_RxDone+0x4f6>
   11774:	e0a9      	b.n	118ca <LORAWAN_RxDone+0x64a>
   11776:	0038      	movs	r0, r7
   11778:	4b96      	ldr	r3, [pc, #600]	; (119d4 <LORAWAN_RxDone+0x754>)
   1177a:	3008      	adds	r0, #8
   1177c:	4798      	blx	r3
   1177e:	2301      	movs	r3, #1
   11780:	0006      	movs	r6, r0
   11782:	9307      	str	r3, [sp, #28]
   11784:	7978      	ldrb	r0, [r7, #5]
   11786:	9906      	ldr	r1, [sp, #24]
   11788:	0703      	lsls	r3, r0, #28
   1178a:	0f1b      	lsrs	r3, r3, #28
   1178c:	001a      	movs	r2, r3
   1178e:	320c      	adds	r2, #12
   11790:	4291      	cmp	r1, r2
   11792:	d100      	bne.n	11796 <LORAWAN_RxDone+0x516>
   11794:	e0f1      	b.n	1197a <LORAWAN_RxDone+0x6fa>
   11796:	7832      	ldrb	r2, [r6, #0]
   11798:	1ac9      	subs	r1, r1, r3
   1179a:	b2c9      	uxtb	r1, r1
   1179c:	9208      	str	r2, [sp, #32]
   1179e:	000a      	movs	r2, r1
   117a0:	3319      	adds	r3, #25
   117a2:	3a0c      	subs	r2, #12
   117a4:	469c      	mov	ip, r3
   117a6:	9b08      	ldr	r3, [sp, #32]
   117a8:	b2d2      	uxtb	r2, r2
   117aa:	9206      	str	r2, [sp, #24]
   117ac:	1c75      	adds	r5, r6, #1
   117ae:	4a84      	ldr	r2, [pc, #528]	; (119c0 <LORAWAN_RxDone+0x740>)
   117b0:	2b00      	cmp	r3, #0
   117b2:	d100      	bne.n	117b6 <LORAWAN_RxDone+0x536>
   117b4:	e0b0      	b.n	11918 <LORAWAN_RxDone+0x698>
   117b6:	6813      	ldr	r3, [r2, #0]
   117b8:	0010      	movs	r0, r2
   117ba:	7912      	ldrb	r2, [r2, #4]
   117bc:	0a1c      	lsrs	r4, r3, #8
   117be:	0612      	lsls	r2, r2, #24
   117c0:	4322      	orrs	r2, r4
   117c2:	9204      	str	r2, [sp, #16]
   117c4:	4a84      	ldr	r2, [pc, #528]	; (119d8 <LORAWAN_RxDone+0x758>)
   117c6:	4663      	mov	r3, ip
   117c8:	9203      	str	r2, [sp, #12]
   117ca:	466a      	mov	r2, sp
   117cc:	8493      	strh	r3, [r2, #36]	; 0x24
   117ce:	8c93      	ldrh	r3, [r2, #36]	; 0x24
   117d0:	2201      	movs	r2, #1
   117d2:	9302      	str	r3, [sp, #8]
   117d4:	4b81      	ldr	r3, [pc, #516]	; (119dc <LORAWAN_RxDone+0x75c>)
   117d6:	308c      	adds	r0, #140	; 0x8c
   117d8:	390d      	subs	r1, #13
   117da:	9201      	str	r2, [sp, #4]
   117dc:	9300      	str	r3, [sp, #0]
   117de:	6803      	ldr	r3, [r0, #0]
   117e0:	b2c9      	uxtb	r1, r1
   117e2:	0028      	movs	r0, r5
   117e4:	4c7e      	ldr	r4, [pc, #504]	; (119e0 <LORAWAN_RxDone+0x760>)
   117e6:	47a0      	blx	r4
   117e8:	2800      	cmp	r0, #0
   117ea:	d004      	beq.n	117f6 <LORAWAN_RxDone+0x576>
   117ec:	4b7d      	ldr	r3, [pc, #500]	; (119e4 <LORAWAN_RxDone+0x764>)
   117ee:	4798      	blx	r3
   117f0:	201f      	movs	r0, #31
   117f2:	4b76      	ldr	r3, [pc, #472]	; (119cc <LORAWAN_RxDone+0x74c>)
   117f4:	4798      	blx	r3
   117f6:	4c72      	ldr	r4, [pc, #456]	; (119c0 <LORAWAN_RxDone+0x740>)
   117f8:	2300      	movs	r3, #0
   117fa:	0022      	movs	r2, r4
   117fc:	32ca      	adds	r2, #202	; 0xca
   117fe:	8013      	strh	r3, [r2, #0]
   11800:	0022      	movs	r2, r4
   11802:	32f6      	adds	r2, #246	; 0xf6
   11804:	7013      	strb	r3, [r2, #0]
   11806:	0022      	movs	r2, r4
   11808:	2110      	movs	r1, #16
   1180a:	3294      	adds	r2, #148	; 0x94
   1180c:	7813      	ldrb	r3, [r2, #0]
   1180e:	438b      	bics	r3, r1
   11810:	7013      	strb	r3, [r2, #0]
   11812:	0023      	movs	r3, r4
   11814:	2201      	movs	r2, #1
   11816:	3384      	adds	r3, #132	; 0x84
   11818:	7859      	ldrb	r1, [r3, #1]
   1181a:	430a      	orrs	r2, r1
   1181c:	705a      	strb	r2, [r3, #1]
   1181e:	220e      	movs	r2, #14
   11820:	781b      	ldrb	r3, [r3, #0]
   11822:	4013      	ands	r3, r2
   11824:	2b06      	cmp	r3, #6
   11826:	d104      	bne.n	11832 <LORAWAN_RxDone+0x5b2>
   11828:	0023      	movs	r3, r4
   1182a:	33ee      	adds	r3, #238	; 0xee
   1182c:	7818      	ldrb	r0, [r3, #0]
   1182e:	4b6e      	ldr	r3, [pc, #440]	; (119e8 <LORAWAN_RxDone+0x768>)
   11830:	4798      	blx	r3
   11832:	0025      	movs	r5, r4
   11834:	2201      	movs	r2, #1
   11836:	3594      	adds	r5, #148	; 0x94
   11838:	782b      	ldrb	r3, [r5, #0]
   1183a:	4213      	tst	r3, r2
   1183c:	d100      	bne.n	11840 <LORAWAN_RxDone+0x5c0>
   1183e:	e107      	b.n	11a50 <LORAWAN_RxDone+0x7d0>
   11840:	797b      	ldrb	r3, [r7, #5]
   11842:	321f      	adds	r2, #31
   11844:	4213      	tst	r3, r2
   11846:	d100      	bne.n	1184a <LORAWAN_RxDone+0x5ca>
   11848:	e0e8      	b.n	11a1c <LORAWAN_RxDone+0x79c>
   1184a:	4b68      	ldr	r3, [pc, #416]	; (119ec <LORAWAN_RxDone+0x76c>)
   1184c:	4798      	blx	r3
   1184e:	0023      	movs	r3, r4
   11850:	2101      	movs	r1, #1
   11852:	3384      	adds	r3, #132	; 0x84
   11854:	785a      	ldrb	r2, [r3, #1]
   11856:	438a      	bics	r2, r1
   11858:	705a      	strb	r2, [r3, #1]
   1185a:	9a08      	ldr	r2, [sp, #32]
   1185c:	2a00      	cmp	r2, #0
   1185e:	d100      	bne.n	11862 <LORAWAN_RxDone+0x5e2>
   11860:	e093      	b.n	1198a <LORAWAN_RxDone+0x70a>
   11862:	9a06      	ldr	r2, [sp, #24]
   11864:	0031      	movs	r1, r6
   11866:	0038      	movs	r0, r7
   11868:	4b61      	ldr	r3, [pc, #388]	; (119f0 <LORAWAN_RxDone+0x770>)
   1186a:	4798      	blx	r3
   1186c:	4b56      	ldr	r3, [pc, #344]	; (119c8 <LORAWAN_RxDone+0x748>)
   1186e:	4d54      	ldr	r5, [pc, #336]	; (119c0 <LORAWAN_RxDone+0x740>)
   11870:	781b      	ldrb	r3, [r3, #0]
   11872:	06db      	lsls	r3, r3, #27
   11874:	d400      	bmi.n	11878 <LORAWAN_RxDone+0x5f8>
   11876:	e160      	b.n	11b3a <LORAWAN_RxDone+0x8ba>
   11878:	2220      	movs	r2, #32
   1187a:	4b5e      	ldr	r3, [pc, #376]	; (119f4 <LORAWAN_RxDone+0x774>)
   1187c:	781b      	ldrb	r3, [r3, #0]
   1187e:	401a      	ands	r2, r3
   11880:	9206      	str	r2, [sp, #24]
   11882:	d000      	beq.n	11886 <LORAWAN_RxDone+0x606>
   11884:	e159      	b.n	11b3a <LORAWAN_RxDone+0x8ba>
   11886:	320a      	adds	r2, #10
   11888:	4213      	tst	r3, r2
   1188a:	d100      	bne.n	1188e <LORAWAN_RxDone+0x60e>
   1188c:	e155      	b.n	11b3a <LORAWAN_RxDone+0x8ba>
   1188e:	002b      	movs	r3, r5
   11890:	33f5      	adds	r3, #245	; 0xf5
   11892:	781b      	ldrb	r3, [r3, #0]
   11894:	a90f      	add	r1, sp, #60	; 0x3c
   11896:	704b      	strb	r3, [r1, #1]
   11898:	002e      	movs	r6, r5
   1189a:	2301      	movs	r3, #1
   1189c:	36e7      	adds	r6, #231	; 0xe7
   1189e:	700b      	strb	r3, [r1, #0]
   118a0:	7833      	ldrb	r3, [r6, #0]
   118a2:	aa0e      	add	r2, sp, #56	; 0x38
   118a4:	202f      	movs	r0, #47	; 0x2f
   118a6:	4f54      	ldr	r7, [pc, #336]	; (119f8 <LORAWAN_RxDone+0x778>)
   118a8:	708b      	strb	r3, [r1, #2]
   118aa:	47b8      	blx	r7
   118ac:	9007      	str	r0, [sp, #28]
   118ae:	2808      	cmp	r0, #8
   118b0:	d000      	beq.n	118b4 <LORAWAN_RxDone+0x634>
   118b2:	e0fb      	b.n	11aac <LORAWAN_RxDone+0x82c>
   118b4:	4b51      	ldr	r3, [pc, #324]	; (119fc <LORAWAN_RxDone+0x77c>)
   118b6:	9806      	ldr	r0, [sp, #24]
   118b8:	4798      	blx	r3
   118ba:	4b4e      	ldr	r3, [pc, #312]	; (119f4 <LORAWAN_RxDone+0x774>)
   118bc:	9a07      	ldr	r2, [sp, #28]
   118be:	781b      	ldrb	r3, [r3, #0]
   118c0:	4393      	bics	r3, r2
   118c2:	4a4c      	ldr	r2, [pc, #304]	; (119f4 <LORAWAN_RxDone+0x774>)
   118c4:	7013      	strb	r3, [r2, #0]
   118c6:	2001      	movs	r0, #1
   118c8:	e53e      	b.n	11348 <LORAWAN_RxDone+0xc8>
   118ca:	0023      	movs	r3, r4
   118cc:	220e      	movs	r2, #14
   118ce:	3384      	adds	r3, #132	; 0x84
   118d0:	781b      	ldrb	r3, [r3, #0]
   118d2:	4013      	ands	r3, r2
   118d4:	2b06      	cmp	r3, #6
   118d6:	d101      	bne.n	118dc <LORAWAN_RxDone+0x65c>
   118d8:	4b49      	ldr	r3, [pc, #292]	; (11a00 <LORAWAN_RxDone+0x780>)
   118da:	4798      	blx	r3
   118dc:	4949      	ldr	r1, [pc, #292]	; (11a04 <LORAWAN_RxDone+0x784>)
   118de:	784a      	ldrb	r2, [r1, #1]
   118e0:	780b      	ldrb	r3, [r1, #0]
   118e2:	0212      	lsls	r2, r2, #8
   118e4:	431a      	orrs	r2, r3
   118e6:	788b      	ldrb	r3, [r1, #2]
   118e8:	041b      	lsls	r3, r3, #16
   118ea:	431a      	orrs	r2, r3
   118ec:	78cb      	ldrb	r3, [r1, #3]
   118ee:	061b      	lsls	r3, r3, #24
   118f0:	4313      	orrs	r3, r2
   118f2:	d008      	beq.n	11906 <LORAWAN_RxDone+0x686>
   118f4:	0022      	movs	r2, r4
   118f6:	2120      	movs	r1, #32
   118f8:	3294      	adds	r2, #148	; 0x94
   118fa:	7813      	ldrb	r3, [r2, #0]
   118fc:	201e      	movs	r0, #30
   118fe:	438b      	bics	r3, r1
   11900:	7013      	strb	r3, [r2, #0]
   11902:	4b32      	ldr	r3, [pc, #200]	; (119cc <LORAWAN_RxDone+0x74c>)
   11904:	4798      	blx	r3
   11906:	2300      	movs	r3, #0
   11908:	34e0      	adds	r4, #224	; 0xe0
   1190a:	7023      	strb	r3, [r4, #0]
   1190c:	4b35      	ldr	r3, [pc, #212]	; (119e4 <LORAWAN_RxDone+0x764>)
   1190e:	4798      	blx	r3
   11910:	e7d9      	b.n	118c6 <LORAWAN_RxDone+0x646>
   11912:	003e      	movs	r6, r7
   11914:	3608      	adds	r6, #8
   11916:	e735      	b.n	11784 <LORAWAN_RxDone+0x504>
   11918:	9b06      	ldr	r3, [sp, #24]
   1191a:	2b00      	cmp	r3, #0
   1191c:	d031      	beq.n	11982 <LORAWAN_RxDone+0x702>
   1191e:	0703      	lsls	r3, r0, #28
   11920:	d1d3      	bne.n	118ca <LORAWAN_RxDone+0x64a>
   11922:	390d      	subs	r1, #13
   11924:	6813      	ldr	r3, [r2, #0]
   11926:	b2cc      	uxtb	r4, r1
   11928:	0011      	movs	r1, r2
   1192a:	7912      	ldrb	r2, [r2, #4]
   1192c:	0a18      	lsrs	r0, r3, #8
   1192e:	0612      	lsls	r2, r2, #24
   11930:	4302      	orrs	r2, r0
   11932:	9204      	str	r2, [sp, #16]
   11934:	4a28      	ldr	r2, [pc, #160]	; (119d8 <LORAWAN_RxDone+0x758>)
   11936:	4663      	mov	r3, ip
   11938:	9203      	str	r2, [sp, #12]
   1193a:	466a      	mov	r2, sp
   1193c:	8313      	strh	r3, [r2, #24]
   1193e:	8b13      	ldrh	r3, [r2, #24]
   11940:	318c      	adds	r1, #140	; 0x8c
   11942:	9302      	str	r3, [sp, #8]
   11944:	2302      	movs	r3, #2
   11946:	9301      	str	r3, [sp, #4]
   11948:	4b2f      	ldr	r3, [pc, #188]	; (11a08 <LORAWAN_RxDone+0x788>)
   1194a:	2201      	movs	r2, #1
   1194c:	9300      	str	r3, [sp, #0]
   1194e:	680b      	ldr	r3, [r1, #0]
   11950:	0028      	movs	r0, r5
   11952:	0021      	movs	r1, r4
   11954:	4e22      	ldr	r6, [pc, #136]	; (119e0 <LORAWAN_RxDone+0x760>)
   11956:	47b0      	blx	r6
   11958:	2800      	cmp	r0, #0
   1195a:	d004      	beq.n	11966 <LORAWAN_RxDone+0x6e6>
   1195c:	4b21      	ldr	r3, [pc, #132]	; (119e4 <LORAWAN_RxDone+0x764>)
   1195e:	4798      	blx	r3
   11960:	201f      	movs	r0, #31
   11962:	4b1a      	ldr	r3, [pc, #104]	; (119cc <LORAWAN_RxDone+0x74c>)
   11964:	4798      	blx	r3
   11966:	4b1b      	ldr	r3, [pc, #108]	; (119d4 <LORAWAN_RxDone+0x754>)
   11968:	0021      	movs	r1, r4
   1196a:	0028      	movs	r0, r5
   1196c:	4798      	blx	r3
   1196e:	2300      	movs	r3, #0
   11970:	9306      	str	r3, [sp, #24]
   11972:	3301      	adds	r3, #1
   11974:	9307      	str	r3, [sp, #28]
   11976:	2600      	movs	r6, #0
   11978:	e73d      	b.n	117f6 <LORAWAN_RxDone+0x576>
   1197a:	2600      	movs	r6, #0
   1197c:	9608      	str	r6, [sp, #32]
   1197e:	9606      	str	r6, [sp, #24]
   11980:	e739      	b.n	117f6 <LORAWAN_RxDone+0x576>
   11982:	9b06      	ldr	r3, [sp, #24]
   11984:	9308      	str	r3, [sp, #32]
   11986:	001e      	movs	r6, r3
   11988:	e735      	b.n	117f6 <LORAWAN_RxDone+0x576>
   1198a:	2120      	movs	r1, #32
   1198c:	782a      	ldrb	r2, [r5, #0]
   1198e:	438a      	bics	r2, r1
   11990:	702a      	strb	r2, [r5, #0]
   11992:	0022      	movs	r2, r4
   11994:	32fd      	adds	r2, #253	; 0xfd
   11996:	7812      	ldrb	r2, [r2, #0]
   11998:	2a01      	cmp	r2, #1
   1199a:	d137      	bne.n	11a0c <LORAWAN_RxDone+0x78c>
   1199c:	781a      	ldrb	r2, [r3, #0]
   1199e:	3912      	subs	r1, #18
   119a0:	438a      	bics	r2, r1
   119a2:	701a      	strb	r2, [r3, #0]
   119a4:	2388      	movs	r3, #136	; 0x88
   119a6:	4a06      	ldr	r2, [pc, #24]	; (119c0 <LORAWAN_RxDone+0x740>)
   119a8:	009b      	lsls	r3, r3, #2
   119aa:	5cd3      	ldrb	r3, [r2, r3]
   119ac:	2b00      	cmp	r3, #0
   119ae:	d000      	beq.n	119b2 <LORAWAN_RxDone+0x732>
   119b0:	e75c      	b.n	1186c <LORAWAN_RxDone+0x5ec>
   119b2:	2008      	movs	r0, #8
   119b4:	4b05      	ldr	r3, [pc, #20]	; (119cc <LORAWAN_RxDone+0x74c>)
   119b6:	4798      	blx	r3
   119b8:	e758      	b.n	1186c <LORAWAN_RxDone+0x5ec>
   119ba:	46c0      	nop			; (mov r8, r8)
   119bc:	000128b5 	.word	0x000128b5
   119c0:	20003170 	.word	0x20003170
   119c4:	0000f959 	.word	0x0000f959
   119c8:	200031f4 	.word	0x200031f4
   119cc:	00010801 	.word	0x00010801
   119d0:	00008d81 	.word	0x00008d81
   119d4:	00010f9d 	.word	0x00010f9d
   119d8:	20002f34 	.word	0x20002f34
   119dc:	200031a5 	.word	0x200031a5
   119e0:	00010741 	.word	0x00010741
   119e4:	00010d15 	.word	0x00010d15
   119e8:	0000cf3d 	.word	0x0000cf3d
   119ec:	0000fe0d 	.word	0x0000fe0d
   119f0:	000108b1 	.word	0x000108b1
   119f4:	20003204 	.word	0x20003204
   119f8:	0000c6dd 	.word	0x0000c6dd
   119fc:	0000fac1 	.word	0x0000fac1
   11a00:	0000f9f1 	.word	0x0000f9f1
   11a04:	200034cc 	.word	0x200034cc
   11a08:	20003195 	.word	0x20003195
   11a0c:	2a04      	cmp	r2, #4
   11a0e:	d1c9      	bne.n	119a4 <LORAWAN_RxDone+0x724>
   11a10:	0023      	movs	r3, r4
   11a12:	33f1      	adds	r3, #241	; 0xf1
   11a14:	7818      	ldrb	r0, [r3, #0]
   11a16:	4bab      	ldr	r3, [pc, #684]	; (11cc4 <LORAWAN_RxDone+0xa44>)
   11a18:	4798      	blx	r3
   11a1a:	e7c3      	b.n	119a4 <LORAWAN_RxDone+0x724>
   11a1c:	9b07      	ldr	r3, [sp, #28]
   11a1e:	2b00      	cmp	r3, #0
   11a20:	d013      	beq.n	11a4a <LORAWAN_RxDone+0x7ca>
   11a22:	0023      	movs	r3, r4
   11a24:	33fd      	adds	r3, #253	; 0xfd
   11a26:	781e      	ldrb	r6, [r3, #0]
   11a28:	2e01      	cmp	r6, #1
   11a2a:	d10e      	bne.n	11a4a <LORAWAN_RxDone+0x7ca>
   11a2c:	4ba6      	ldr	r3, [pc, #664]	; (11cc8 <LORAWAN_RxDone+0xa48>)
   11a2e:	4798      	blx	r3
   11a30:	0022      	movs	r2, r4
   11a32:	3284      	adds	r2, #132	; 0x84
   11a34:	7853      	ldrb	r3, [r2, #1]
   11a36:	43b3      	bics	r3, r6
   11a38:	7053      	strb	r3, [r2, #1]
   11a3a:	2220      	movs	r2, #32
   11a3c:	782b      	ldrb	r3, [r5, #0]
   11a3e:	4393      	bics	r3, r2
   11a40:	702b      	strb	r3, [r5, #0]
   11a42:	2388      	movs	r3, #136	; 0x88
   11a44:	009b      	lsls	r3, r3, #2
   11a46:	5ce3      	ldrb	r3, [r4, r3]
   11a48:	e7b0      	b.n	119ac <LORAWAN_RxDone+0x72c>
   11a4a:	4ba0      	ldr	r3, [pc, #640]	; (11ccc <LORAWAN_RxDone+0xa4c>)
   11a4c:	4798      	blx	r3
   11a4e:	e70d      	b.n	1186c <LORAWAN_RxDone+0x5ec>
   11a50:	9a08      	ldr	r2, [sp, #32]
   11a52:	2a00      	cmp	r2, #0
   11a54:	d00b      	beq.n	11a6e <LORAWAN_RxDone+0x7ee>
   11a56:	9a06      	ldr	r2, [sp, #24]
   11a58:	0031      	movs	r1, r6
   11a5a:	0038      	movs	r0, r7
   11a5c:	4b9c      	ldr	r3, [pc, #624]	; (11cd0 <LORAWAN_RxDone+0xa50>)
   11a5e:	4798      	blx	r3
   11a60:	0022      	movs	r2, r4
   11a62:	2101      	movs	r1, #1
   11a64:	3284      	adds	r2, #132	; 0x84
   11a66:	7853      	ldrb	r3, [r2, #1]
   11a68:	438b      	bics	r3, r1
   11a6a:	7053      	strb	r3, [r2, #1]
   11a6c:	e6fe      	b.n	1186c <LORAWAN_RxDone+0x5ec>
   11a6e:	2220      	movs	r2, #32
   11a70:	4393      	bics	r3, r2
   11a72:	702b      	strb	r3, [r5, #0]
   11a74:	0023      	movs	r3, r4
   11a76:	33fd      	adds	r3, #253	; 0xfd
   11a78:	781b      	ldrb	r3, [r3, #0]
   11a7a:	2b01      	cmp	r3, #1
   11a7c:	d10e      	bne.n	11a9c <LORAWAN_RxDone+0x81c>
   11a7e:	0022      	movs	r2, r4
   11a80:	210e      	movs	r1, #14
   11a82:	3284      	adds	r2, #132	; 0x84
   11a84:	7813      	ldrb	r3, [r2, #0]
   11a86:	438b      	bics	r3, r1
   11a88:	7013      	strb	r3, [r2, #0]
   11a8a:	2388      	movs	r3, #136	; 0x88
   11a8c:	009b      	lsls	r3, r3, #2
   11a8e:	5ce3      	ldrb	r3, [r4, r3]
   11a90:	2b00      	cmp	r3, #0
   11a92:	d1e5      	bne.n	11a60 <LORAWAN_RxDone+0x7e0>
   11a94:	2008      	movs	r0, #8
   11a96:	4b8f      	ldr	r3, [pc, #572]	; (11cd4 <LORAWAN_RxDone+0xa54>)
   11a98:	4798      	blx	r3
   11a9a:	e7e1      	b.n	11a60 <LORAWAN_RxDone+0x7e0>
   11a9c:	2b04      	cmp	r3, #4
   11a9e:	d1f4      	bne.n	11a8a <LORAWAN_RxDone+0x80a>
   11aa0:	0023      	movs	r3, r4
   11aa2:	33f1      	adds	r3, #241	; 0xf1
   11aa4:	7818      	ldrb	r0, [r3, #0]
   11aa6:	4b87      	ldr	r3, [pc, #540]	; (11cc4 <LORAWAN_RxDone+0xa44>)
   11aa8:	4798      	blx	r3
   11aaa:	e7ee      	b.n	11a8a <LORAWAN_RxDone+0x80a>
   11aac:	35ff      	adds	r5, #255	; 0xff
   11aae:	7f6b      	ldrb	r3, [r5, #29]
   11ab0:	079a      	lsls	r2, r3, #30
   11ab2:	d520      	bpl.n	11af6 <LORAWAN_RxDone+0x876>
   11ab4:	aa10      	add	r2, sp, #64	; 0x40
   11ab6:	0031      	movs	r1, r6
   11ab8:	2026      	movs	r0, #38	; 0x26
   11aba:	47b8      	blx	r7
   11abc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11abe:	1c5a      	adds	r2, r3, #1
   11ac0:	d001      	beq.n	11ac6 <LORAWAN_RxDone+0x846>
   11ac2:	3314      	adds	r3, #20
   11ac4:	9310      	str	r3, [sp, #64]	; 0x40
   11ac6:	0021      	movs	r1, r4
   11ac8:	220e      	movs	r2, #14
   11aca:	3184      	adds	r1, #132	; 0x84
   11acc:	780b      	ldrb	r3, [r1, #0]
   11ace:	4393      	bics	r3, r2
   11ad0:	001a      	movs	r2, r3
   11ad2:	230c      	movs	r3, #12
   11ad4:	4313      	orrs	r3, r2
   11ad6:	700b      	strb	r3, [r1, #0]
   11ad8:	4b7f      	ldr	r3, [pc, #508]	; (11cd8 <LORAWAN_RxDone+0xa58>)
   11ada:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11adc:	5ce3      	ldrb	r3, [r4, r3]
   11ade:	21fa      	movs	r1, #250	; 0xfa
   11ae0:	1ad3      	subs	r3, r2, r3
   11ae2:	2200      	movs	r2, #0
   11ae4:	0089      	lsls	r1, r1, #2
   11ae6:	4359      	muls	r1, r3
   11ae8:	34ef      	adds	r4, #239	; 0xef
   11aea:	4b7c      	ldr	r3, [pc, #496]	; (11cdc <LORAWAN_RxDone+0xa5c>)
   11aec:	7820      	ldrb	r0, [r4, #0]
   11aee:	9200      	str	r2, [sp, #0]
   11af0:	4c7b      	ldr	r4, [pc, #492]	; (11ce0 <LORAWAN_RxDone+0xa60>)
   11af2:	47a0      	blx	r4
   11af4:	e6e7      	b.n	118c6 <LORAWAN_RxDone+0x646>
   11af6:	075b      	lsls	r3, r3, #29
   11af8:	d400      	bmi.n	11afc <LORAWAN_RxDone+0x87c>
   11afa:	e6e4      	b.n	118c6 <LORAWAN_RxDone+0x646>
   11afc:	aa10      	add	r2, sp, #64	; 0x40
   11afe:	0031      	movs	r1, r6
   11b00:	2032      	movs	r0, #50	; 0x32
   11b02:	47b8      	blx	r7
   11b04:	220e      	movs	r2, #14
   11b06:	4b77      	ldr	r3, [pc, #476]	; (11ce4 <LORAWAN_RxDone+0xa64>)
   11b08:	781b      	ldrb	r3, [r3, #0]
   11b0a:	4393      	bics	r3, r2
   11b0c:	001a      	movs	r2, r3
   11b0e:	230c      	movs	r3, #12
   11b10:	4313      	orrs	r3, r2
   11b12:	4a74      	ldr	r2, [pc, #464]	; (11ce4 <LORAWAN_RxDone+0xa64>)
   11b14:	7013      	strb	r3, [r2, #0]
   11b16:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11b18:	1c5a      	adds	r2, r3, #1
   11b1a:	d001      	beq.n	11b20 <LORAWAN_RxDone+0x8a0>
   11b1c:	3301      	adds	r3, #1
   11b1e:	9310      	str	r3, [sp, #64]	; 0x40
   11b20:	4b6d      	ldr	r3, [pc, #436]	; (11cd8 <LORAWAN_RxDone+0xa58>)
   11b22:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11b24:	5ce3      	ldrb	r3, [r4, r3]
   11b26:	21fa      	movs	r1, #250	; 0xfa
   11b28:	1ad3      	subs	r3, r2, r3
   11b2a:	2200      	movs	r2, #0
   11b2c:	0089      	lsls	r1, r1, #2
   11b2e:	34f2      	adds	r4, #242	; 0xf2
   11b30:	4359      	muls	r1, r3
   11b32:	7820      	ldrb	r0, [r4, #0]
   11b34:	4b6c      	ldr	r3, [pc, #432]	; (11ce8 <LORAWAN_RxDone+0xa68>)
   11b36:	9200      	str	r2, [sp, #0]
   11b38:	e7da      	b.n	11af0 <LORAWAN_RxDone+0x870>
   11b3a:	35fd      	adds	r5, #253	; 0xfd
   11b3c:	782b      	ldrb	r3, [r5, #0]
   11b3e:	2b04      	cmp	r3, #4
   11b40:	d000      	beq.n	11b44 <LORAWAN_RxDone+0x8c4>
   11b42:	e6c0      	b.n	118c6 <LORAWAN_RxDone+0x646>
   11b44:	0038      	movs	r0, r7
   11b46:	4b69      	ldr	r3, [pc, #420]	; (11cec <LORAWAN_RxDone+0xa6c>)
   11b48:	4798      	blx	r3
   11b4a:	e6bc      	b.n	118c6 <LORAWAN_RxDone+0x646>
   11b4c:	2390      	movs	r3, #144	; 0x90
   11b4e:	009b      	lsls	r3, r3, #2
   11b50:	5ce3      	ldrb	r3, [r4, r3]
   11b52:	2b00      	cmp	r3, #0
   11b54:	d009      	beq.n	11b6a <LORAWAN_RxDone+0x8ea>
   11b56:	2322      	movs	r3, #34	; 0x22
   11b58:	aa04      	add	r2, sp, #16
   11b5a:	189b      	adds	r3, r3, r2
   11b5c:	781b      	ldrb	r3, [r3, #0]
   11b5e:	003a      	movs	r2, r7
   11b60:	9906      	ldr	r1, [sp, #24]
   11b62:	0038      	movs	r0, r7
   11b64:	4c62      	ldr	r4, [pc, #392]	; (11cf0 <LORAWAN_RxDone+0xa70>)
   11b66:	47a0      	blx	r4
   11b68:	e6ad      	b.n	118c6 <LORAWAN_RxDone+0x646>
   11b6a:	2220      	movs	r2, #32
   11b6c:	3494      	adds	r4, #148	; 0x94
   11b6e:	7823      	ldrb	r3, [r4, #0]
   11b70:	201e      	movs	r0, #30
   11b72:	4393      	bics	r3, r2
   11b74:	7023      	strb	r3, [r4, #0]
   11b76:	4b57      	ldr	r3, [pc, #348]	; (11cd4 <LORAWAN_RxDone+0xa54>)
   11b78:	4798      	blx	r3
   11b7a:	e6c7      	b.n	1190c <LORAWAN_RxDone+0x68c>
   11b7c:	220e      	movs	r2, #14
   11b7e:	4013      	ands	r3, r2
   11b80:	2b0a      	cmp	r3, #10
   11b82:	d008      	beq.n	11b96 <LORAWAN_RxDone+0x916>
   11b84:	2b06      	cmp	r3, #6
   11b86:	d000      	beq.n	11b8a <LORAWAN_RxDone+0x90a>
   11b88:	e5a0      	b.n	116cc <LORAWAN_RxDone+0x44c>
   11b8a:	0023      	movs	r3, r4
   11b8c:	33f9      	adds	r3, #249	; 0xf9
   11b8e:	781b      	ldrb	r3, [r3, #0]
   11b90:	2b00      	cmp	r3, #0
   11b92:	d100      	bne.n	11b96 <LORAWAN_RxDone+0x916>
   11b94:	e59a      	b.n	116cc <LORAWAN_RxDone+0x44c>
   11b96:	2220      	movs	r2, #32
   11b98:	3494      	adds	r4, #148	; 0x94
   11b9a:	7823      	ldrb	r3, [r4, #0]
   11b9c:	2019      	movs	r0, #25
   11b9e:	4393      	bics	r3, r2
   11ba0:	7023      	strb	r3, [r4, #0]
   11ba2:	e5a0      	b.n	116e6 <LORAWAN_RxDone+0x466>
   11ba4:	4953      	ldr	r1, [pc, #332]	; (11cf4 <LORAWAN_RxDone+0xa74>)
   11ba6:	784a      	ldrb	r2, [r1, #1]
   11ba8:	780b      	ldrb	r3, [r1, #0]
   11baa:	0212      	lsls	r2, r2, #8
   11bac:	431a      	orrs	r2, r3
   11bae:	788b      	ldrb	r3, [r1, #2]
   11bb0:	041b      	lsls	r3, r3, #16
   11bb2:	431a      	orrs	r2, r3
   11bb4:	78cb      	ldrb	r3, [r1, #3]
   11bb6:	061b      	lsls	r3, r3, #24
   11bb8:	4313      	orrs	r3, r2
   11bba:	d100      	bne.n	11bbe <LORAWAN_RxDone+0x93e>
   11bbc:	e683      	b.n	118c6 <LORAWAN_RxDone+0x646>
   11bbe:	4b4e      	ldr	r3, [pc, #312]	; (11cf8 <LORAWAN_RxDone+0xa78>)
   11bc0:	4c4e      	ldr	r4, [pc, #312]	; (11cfc <LORAWAN_RxDone+0xa7c>)
   11bc2:	781b      	ldrb	r3, [r3, #0]
   11bc4:	2b10      	cmp	r3, #16
   11bc6:	d105      	bne.n	11bd4 <LORAWAN_RxDone+0x954>
   11bc8:	0001      	movs	r1, r0
   11bca:	2000      	movs	r0, #0
   11bcc:	9a06      	ldr	r2, [sp, #24]
   11bce:	3b0c      	subs	r3, #12
   11bd0:	47a0      	blx	r4
   11bd2:	e678      	b.n	118c6 <LORAWAN_RxDone+0x646>
   11bd4:	2300      	movs	r3, #0
   11bd6:	0001      	movs	r1, r0
   11bd8:	9a06      	ldr	r2, [sp, #24]
   11bda:	0018      	movs	r0, r3
   11bdc:	e7f8      	b.n	11bd0 <LORAWAN_RxDone+0x950>
   11bde:	348c      	adds	r4, #140	; 0x8c
   11be0:	6823      	ldr	r3, [r4, #0]
   11be2:	0031      	movs	r1, r6
   11be4:	9308      	str	r3, [sp, #32]
   11be6:	4b46      	ldr	r3, [pc, #280]	; (11d00 <LORAWAN_RxDone+0xa80>)
   11be8:	4798      	blx	r3
   11bea:	2808      	cmp	r0, #8
   11bec:	d001      	beq.n	11bf2 <LORAWAN_RxDone+0x972>
   11bee:	f7ff fbab 	bl	11348 <LORAWAN_RxDone+0xc8>
   11bf2:	9b06      	ldr	r3, [sp, #24]
   11bf4:	0028      	movs	r0, r5
   11bf6:	1f1a      	subs	r2, r3, #4
   11bf8:	9b07      	ldr	r3, [sp, #28]
   11bfa:	b2d2      	uxtb	r2, r2
   11bfc:	9300      	str	r3, [sp, #0]
   11bfe:	6821      	ldr	r1, [r4, #0]
   11c00:	2349      	movs	r3, #73	; 0x49
   11c02:	4c40      	ldr	r4, [pc, #256]	; (11d04 <LORAWAN_RxDone+0xa84>)
   11c04:	47a0      	blx	r4
   11c06:	4d40      	ldr	r5, [pc, #256]	; (11d08 <LORAWAN_RxDone+0xa88>)
   11c08:	9607      	str	r6, [sp, #28]
   11c0a:	4e40      	ldr	r6, [pc, #256]	; (11d0c <LORAWAN_RxDone+0xa8c>)
   11c0c:	4c40      	ldr	r4, [pc, #256]	; (11d10 <LORAWAN_RxDone+0xa90>)
   11c0e:	2210      	movs	r2, #16
   11c10:	0021      	movs	r1, r4
   11c12:	4b40      	ldr	r3, [pc, #256]	; (11d14 <LORAWAN_RxDone+0xa94>)
   11c14:	0030      	movs	r0, r6
   11c16:	4798      	blx	r3
   11c18:	9b06      	ldr	r3, [sp, #24]
   11c1a:	0039      	movs	r1, r7
   11c1c:	3b04      	subs	r3, #4
   11c1e:	001a      	movs	r2, r3
   11c20:	9309      	str	r3, [sp, #36]	; 0x24
   11c22:	483d      	ldr	r0, [pc, #244]	; (11d18 <LORAWAN_RxDone+0xa98>)
   11c24:	4b3b      	ldr	r3, [pc, #236]	; (11d14 <LORAWAN_RxDone+0xa94>)
   11c26:	4798      	blx	r3
   11c28:	9b06      	ldr	r3, [sp, #24]
   11c2a:	9a07      	ldr	r2, [sp, #28]
   11c2c:	330c      	adds	r3, #12
   11c2e:	b29b      	uxth	r3, r3
   11c30:	9300      	str	r3, [sp, #0]
   11c32:	0033      	movs	r3, r6
   11c34:	2a00      	cmp	r2, #0
   11c36:	d100      	bne.n	11c3a <LORAWAN_RxDone+0x9ba>
   11c38:	e557      	b.n	116ea <LORAWAN_RxDone+0x46a>
   11c3a:	0022      	movs	r2, r4
   11c3c:	2104      	movs	r1, #4
   11c3e:	4c37      	ldr	r4, [pc, #220]	; (11d1c <LORAWAN_RxDone+0xa9c>)
   11c40:	0028      	movs	r0, r5
   11c42:	47a0      	blx	r4
   11c44:	2204      	movs	r2, #4
   11c46:	4932      	ldr	r1, [pc, #200]	; (11d10 <LORAWAN_RxDone+0xa90>)
   11c48:	4c32      	ldr	r4, [pc, #200]	; (11d14 <LORAWAN_RxDone+0xa94>)
   11c4a:	a80d      	add	r0, sp, #52	; 0x34
   11c4c:	47a0      	blx	r4
   11c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11c50:	2204      	movs	r2, #4
   11c52:	18f9      	adds	r1, r7, r3
   11c54:	a810      	add	r0, sp, #64	; 0x40
   11c56:	47a0      	blx	r4
   11c58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11c5a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11c5c:	4293      	cmp	r3, r2
   11c5e:	d100      	bne.n	11c62 <LORAWAN_RxDone+0x9e2>
   11c60:	e54a      	b.n	116f8 <LORAWAN_RxDone+0x478>
   11c62:	9b07      	ldr	r3, [sp, #28]
   11c64:	2b00      	cmp	r3, #0
   11c66:	d108      	bne.n	11c7a <LORAWAN_RxDone+0x9fa>
   11c68:	220e      	movs	r2, #14
   11c6a:	4b2d      	ldr	r3, [pc, #180]	; (11d20 <LORAWAN_RxDone+0xaa0>)
   11c6c:	3384      	adds	r3, #132	; 0x84
   11c6e:	781b      	ldrb	r3, [r3, #0]
   11c70:	4013      	ands	r3, r2
   11c72:	2b06      	cmp	r3, #6
   11c74:	d101      	bne.n	11c7a <LORAWAN_RxDone+0x9fa>
   11c76:	4b2b      	ldr	r3, [pc, #172]	; (11d24 <LORAWAN_RxDone+0xaa4>)
   11c78:	4798      	blx	r3
   11c7a:	491e      	ldr	r1, [pc, #120]	; (11cf4 <LORAWAN_RxDone+0xa74>)
   11c7c:	784a      	ldrb	r2, [r1, #1]
   11c7e:	780b      	ldrb	r3, [r1, #0]
   11c80:	0212      	lsls	r2, r2, #8
   11c82:	431a      	orrs	r2, r3
   11c84:	788b      	ldrb	r3, [r1, #2]
   11c86:	041b      	lsls	r3, r3, #16
   11c88:	431a      	orrs	r2, r3
   11c8a:	78cb      	ldrb	r3, [r1, #3]
   11c8c:	061b      	lsls	r3, r3, #24
   11c8e:	4313      	orrs	r3, r2
   11c90:	d101      	bne.n	11c96 <LORAWAN_RxDone+0xa16>
   11c92:	f7ff fb47 	bl	11324 <LORAWAN_RxDone+0xa4>
   11c96:	4a22      	ldr	r2, [pc, #136]	; (11d20 <LORAWAN_RxDone+0xaa0>)
   11c98:	2020      	movs	r0, #32
   11c9a:	0011      	movs	r1, r2
   11c9c:	3194      	adds	r1, #148	; 0x94
   11c9e:	780b      	ldrb	r3, [r1, #0]
   11ca0:	4383      	bics	r3, r0
   11ca2:	700b      	strb	r3, [r1, #0]
   11ca4:	9b07      	ldr	r3, [sp, #28]
   11ca6:	2b00      	cmp	r3, #0
   11ca8:	d100      	bne.n	11cac <LORAWAN_RxDone+0xa2c>
   11caa:	e521      	b.n	116f0 <LORAWAN_RxDone+0x470>
   11cac:	2322      	movs	r3, #34	; 0x22
   11cae:	a904      	add	r1, sp, #16
   11cb0:	185b      	adds	r3, r3, r1
   11cb2:	7819      	ldrb	r1, [r3, #0]
   11cb4:	233c      	movs	r3, #60	; 0x3c
   11cb6:	434b      	muls	r3, r1
   11cb8:	18d3      	adds	r3, r2, r3
   11cba:	9a08      	ldr	r2, [sp, #32]
   11cbc:	33fc      	adds	r3, #252	; 0xfc
   11cbe:	659a      	str	r2, [r3, #88]	; 0x58
   11cc0:	2018      	movs	r0, #24
   11cc2:	e510      	b.n	116e6 <LORAWAN_RxDone+0x466>
   11cc4:	0000cf3d 	.word	0x0000cf3d
   11cc8:	0000fe0d 	.word	0x0000fe0d
   11ccc:	0000fd71 	.word	0x0000fd71
   11cd0:	000108b1 	.word	0x000108b1
   11cd4:	00010801 	.word	0x00010801
   11cd8:	0000022b 	.word	0x0000022b
   11cdc:	0000fbb9 	.word	0x0000fbb9
   11ce0:	0000cc25 	.word	0x0000cc25
   11ce4:	200031f4 	.word	0x200031f4
   11ce8:	00010619 	.word	0x00010619
   11cec:	00012735 	.word	0x00012735
   11cf0:	00012929 	.word	0x00012929
   11cf4:	200034cc 	.word	0x200034cc
   11cf8:	2000224f 	.word	0x2000224f
   11cfc:	00010865 	.word	0x00010865
   11d00:	00010d51 	.word	0x00010d51
   11d04:	0000f959 	.word	0x0000f959
   11d08:	20003195 	.word	0x20003195
   11d0c:	20002f34 	.word	0x20002f34
   11d10:	20001e9d 	.word	0x20001e9d
   11d14:	000161b7 	.word	0x000161b7
   11d18:	20002f44 	.word	0x20002f44
   11d1c:	00007161 	.word	0x00007161
   11d20:	20003170 	.word	0x20003170
   11d24:	0000f9f1 	.word	0x0000f9f1

00011d28 <LorawanSetEdClass>:
   11d28:	2388      	movs	r3, #136	; 0x88
   11d2a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11d2c:	4d1a      	ldr	r5, [pc, #104]	; (11d98 <LorawanSetEdClass+0x70>)
   11d2e:	009b      	lsls	r3, r3, #2
   11d30:	5ceb      	ldrb	r3, [r5, r3]
   11d32:	0004      	movs	r4, r0
   11d34:	2011      	movs	r0, #17
   11d36:	2b00      	cmp	r3, #0
   11d38:	d013      	beq.n	11d62 <LorawanSetEdClass+0x3a>
   11d3a:	002b      	movs	r3, r5
   11d3c:	33fe      	adds	r3, #254	; 0xfe
   11d3e:	781b      	ldrb	r3, [r3, #0]
   11d40:	3807      	subs	r0, #7
   11d42:	4223      	tst	r3, r4
   11d44:	d00d      	beq.n	11d62 <LorawanSetEdClass+0x3a>
   11d46:	002b      	movs	r3, r5
   11d48:	33fd      	adds	r3, #253	; 0xfd
   11d4a:	7819      	ldrb	r1, [r3, #0]
   11d4c:	428c      	cmp	r4, r1
   11d4e:	d007      	beq.n	11d60 <LorawanSetEdClass+0x38>
   11d50:	2901      	cmp	r1, #1
   11d52:	d107      	bne.n	11d64 <LorawanSetEdClass+0x3c>
   11d54:	2c04      	cmp	r4, #4
   11d56:	d104      	bne.n	11d62 <LorawanSetEdClass+0x3a>
   11d58:	701c      	strb	r4, [r3, #0]
   11d5a:	2000      	movs	r0, #0
   11d5c:	4b0f      	ldr	r3, [pc, #60]	; (11d9c <LorawanSetEdClass+0x74>)
   11d5e:	4798      	blx	r3
   11d60:	2008      	movs	r0, #8
   11d62:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   11d64:	2904      	cmp	r1, #4
   11d66:	d1fc      	bne.n	11d62 <LorawanSetEdClass+0x3a>
   11d68:	2c01      	cmp	r4, #1
   11d6a:	d1fa      	bne.n	11d62 <LorawanSetEdClass+0x3a>
   11d6c:	701c      	strb	r4, [r3, #0]
   11d6e:	0021      	movs	r1, r4
   11d70:	4b0a      	ldr	r3, [pc, #40]	; (11d9c <LorawanSetEdClass+0x74>)
   11d72:	2000      	movs	r0, #0
   11d74:	4798      	blx	r3
   11d76:	002a      	movs	r2, r5
   11d78:	210e      	movs	r1, #14
   11d7a:	3284      	adds	r2, #132	; 0x84
   11d7c:	7813      	ldrb	r3, [r2, #0]
   11d7e:	a801      	add	r0, sp, #4
   11d80:	438b      	bics	r3, r1
   11d82:	7013      	strb	r3, [r2, #0]
   11d84:	4b06      	ldr	r3, [pc, #24]	; (11da0 <LorawanSetEdClass+0x78>)
   11d86:	7004      	strb	r4, [r0, #0]
   11d88:	4798      	blx	r3
   11d8a:	2394      	movs	r3, #148	; 0x94
   11d8c:	005b      	lsls	r3, r3, #1
   11d8e:	5ce8      	ldrb	r0, [r5, r3]
   11d90:	4b04      	ldr	r3, [pc, #16]	; (11da4 <LorawanSetEdClass+0x7c>)
   11d92:	4798      	blx	r3
   11d94:	e7e4      	b.n	11d60 <LorawanSetEdClass+0x38>
   11d96:	46c0      	nop			; (mov r8, r8)
   11d98:	20003170 	.word	0x20003170
   11d9c:	00008d81 	.word	0x00008d81
   11da0:	0000ef31 	.word	0x0000ef31
   11da4:	0000cf3d 	.word	0x0000cf3d

00011da8 <LORAWAN_SetAttr>:
   11da8:	2388      	movs	r3, #136	; 0x88
   11daa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11dac:	4cbb      	ldr	r4, [pc, #748]	; (1209c <LORAWAN_SetAttr+0x2f4>)
   11dae:	009b      	lsls	r3, r3, #2
   11db0:	5ce3      	ldrb	r3, [r4, r3]
   11db2:	000d      	movs	r5, r1
   11db4:	2611      	movs	r6, #17
   11db6:	2b00      	cmp	r3, #0
   11db8:	d100      	bne.n	11dbc <LORAWAN_SetAttr+0x14>
   11dba:	e11f      	b.n	11ffc <LORAWAN_SetAttr+0x254>
   11dbc:	2846      	cmp	r0, #70	; 0x46
   11dbe:	d878      	bhi.n	11eb2 <LORAWAN_SetAttr+0x10a>
   11dc0:	f001 f8be 	bl	12f40 <__gnu_thumb1_case_uhi>
   11dc4:	00930047 	.word	0x00930047
   11dc8:	00fc00b2 	.word	0x00fc00b2
   11dcc:	00e600c5 	.word	0x00e600c5
   11dd0:	0134011e 	.word	0x0134011e
   11dd4:	01660154 	.word	0x01660154
   11dd8:	01830178 	.word	0x01830178
   11ddc:	01a6018d 	.word	0x01a6018d
   11de0:	007701ab 	.word	0x007701ab
   11de4:	01b501b0 	.word	0x01b501b0
   11de8:	01bf01ba 	.word	0x01bf01ba
   11dec:	01e601c4 	.word	0x01e601c4
   11df0:	01cb01eb 	.word	0x01cb01eb
   11df4:	01fc01c8 	.word	0x01fc01c8
   11df8:	01e101f8 	.word	0x01e101f8
   11dfc:	01d701dd 	.word	0x01d701dd
   11e00:	00770077 	.word	0x00770077
   11e04:	0077019e 	.word	0x0077019e
   11e08:	00770077 	.word	0x00770077
   11e0c:	00770077 	.word	0x00770077
   11e10:	02000077 	.word	0x02000077
   11e14:	02030066 	.word	0x02030066
   11e18:	020d0211 	.word	0x020d0211
   11e1c:	00770208 	.word	0x00770208
   11e20:	02190215 	.word	0x02190215
   11e24:	0221021d 	.word	0x0221021d
   11e28:	02290225 	.word	0x02290225
   11e2c:	00770249 	.word	0x00770249
   11e30:	00770077 	.word	0x00770077
   11e34:	00770077 	.word	0x00770077
   11e38:	00770077 	.word	0x00770077
   11e3c:	00770077 	.word	0x00770077
   11e40:	02600077 	.word	0x02600077
   11e44:	026e026a 	.word	0x026e026a
   11e48:	00770077 	.word	0x00770077
   11e4c:	02730077 	.word	0x02730077
   11e50:	0271      	.short	0x0271
   11e52:	260a      	movs	r6, #10
   11e54:	2900      	cmp	r1, #0
   11e56:	d100      	bne.n	11e5a <LORAWAN_SetAttr+0xb2>
   11e58:	e0d0      	b.n	11ffc <LORAWAN_SetAttr+0x254>
   11e5a:	0020      	movs	r0, r4
   11e5c:	2208      	movs	r2, #8
   11e5e:	4b90      	ldr	r3, [pc, #576]	; (120a0 <LORAWAN_SetAttr+0x2f8>)
   11e60:	305d      	adds	r0, #93	; 0x5d
   11e62:	4798      	blx	r3
   11e64:	2108      	movs	r1, #8
   11e66:	4e8f      	ldr	r6, [pc, #572]	; (120a4 <LORAWAN_SetAttr+0x2fc>)
   11e68:	2001      	movs	r0, #1
   11e6a:	47b0      	blx	r6
   11e6c:	0022      	movs	r2, r4
   11e6e:	2501      	movs	r5, #1
   11e70:	32de      	adds	r2, #222	; 0xde
   11e72:	7813      	ldrb	r3, [r2, #0]
   11e74:	2109      	movs	r1, #9
   11e76:	432b      	orrs	r3, r5
   11e78:	3484      	adds	r4, #132	; 0x84
   11e7a:	0028      	movs	r0, r5
   11e7c:	7013      	strb	r3, [r2, #0]
   11e7e:	47b0      	blx	r6
   11e80:	7823      	ldrb	r3, [r4, #0]
   11e82:	210b      	movs	r1, #11
   11e84:	43ab      	bics	r3, r5
   11e86:	0028      	movs	r0, r5
   11e88:	7023      	strb	r3, [r4, #0]
   11e8a:	47b0      	blx	r6
   11e8c:	2608      	movs	r6, #8
   11e8e:	e0b5      	b.n	11ffc <LORAWAN_SetAttr+0x254>
   11e90:	0023      	movs	r3, r4
   11e92:	33ff      	adds	r3, #255	; 0xff
   11e94:	7f5b      	ldrb	r3, [r3, #29]
   11e96:	260a      	movs	r6, #10
   11e98:	075b      	lsls	r3, r3, #29
   11e9a:	d400      	bmi.n	11e9e <LORAWAN_SetAttr+0xf6>
   11e9c:	e0ae      	b.n	11ffc <LORAWAN_SetAttr+0x254>
   11e9e:	79ca      	ldrb	r2, [r1, #7]
   11ea0:	4b81      	ldr	r3, [pc, #516]	; (120a8 <LORAWAN_SetAttr+0x300>)
   11ea2:	2a00      	cmp	r2, #0
   11ea4:	d10e      	bne.n	11ec4 <LORAWAN_SetAttr+0x11c>
   11ea6:	4669      	mov	r1, sp
   11ea8:	201d      	movs	r0, #29
   11eaa:	714a      	strb	r2, [r1, #5]
   11eac:	4798      	blx	r3
   11eae:	2800      	cmp	r0, #0
   11eb0:	d001      	beq.n	11eb6 <LORAWAN_SetAttr+0x10e>
   11eb2:	260a      	movs	r6, #10
   11eb4:	e0a2      	b.n	11ffc <LORAWAN_SetAttr+0x254>
   11eb6:	2109      	movs	r1, #9
   11eb8:	34fe      	adds	r4, #254	; 0xfe
   11eba:	8460      	strh	r0, [r4, #34]	; 0x22
   11ebc:	8420      	strh	r0, [r4, #32]
   11ebe:	4b79      	ldr	r3, [pc, #484]	; (120a4 <LORAWAN_SetAttr+0x2fc>)
   11ec0:	4798      	blx	r3
   11ec2:	e7e3      	b.n	11e8c <LORAWAN_SetAttr+0xe4>
   11ec4:	2002      	movs	r0, #2
   11ec6:	5e2a      	ldrsh	r2, [r5, r0]
   11ec8:	88ae      	ldrh	r6, [r5, #4]
   11eca:	79a8      	ldrb	r0, [r5, #6]
   11ecc:	466d      	mov	r5, sp
   11ece:	806a      	strh	r2, [r5, #2]
   11ed0:	2201      	movs	r2, #1
   11ed2:	8809      	ldrh	r1, [r1, #0]
   11ed4:	7128      	strb	r0, [r5, #4]
   11ed6:	8029      	strh	r1, [r5, #0]
   11ed8:	201d      	movs	r0, #29
   11eda:	4669      	mov	r1, sp
   11edc:	716a      	strb	r2, [r5, #5]
   11ede:	4798      	blx	r3
   11ee0:	2800      	cmp	r0, #0
   11ee2:	d1e6      	bne.n	11eb2 <LORAWAN_SetAttr+0x10a>
   11ee4:	34fe      	adds	r4, #254	; 0xfe
   11ee6:	8466      	strh	r6, [r4, #34]	; 0x22
   11ee8:	e7d0      	b.n	11e8c <LORAWAN_SetAttr+0xe4>
   11eea:	260a      	movs	r6, #10
   11eec:	2900      	cmp	r1, #0
   11eee:	d100      	bne.n	11ef2 <LORAWAN_SetAttr+0x14a>
   11ef0:	e084      	b.n	11ffc <LORAWAN_SetAttr+0x254>
   11ef2:	0020      	movs	r0, r4
   11ef4:	2208      	movs	r2, #8
   11ef6:	4b6a      	ldr	r3, [pc, #424]	; (120a0 <LORAWAN_SetAttr+0x2f8>)
   11ef8:	3055      	adds	r0, #85	; 0x55
   11efa:	4798      	blx	r3
   11efc:	2107      	movs	r1, #7
   11efe:	4d69      	ldr	r5, [pc, #420]	; (120a4 <LORAWAN_SetAttr+0x2fc>)
   11f00:	2001      	movs	r0, #1
   11f02:	47a8      	blx	r5
   11f04:	0022      	movs	r2, r4
   11f06:	2302      	movs	r3, #2
   11f08:	32de      	adds	r2, #222	; 0xde
   11f0a:	7811      	ldrb	r1, [r2, #0]
   11f0c:	2001      	movs	r0, #1
   11f0e:	430b      	orrs	r3, r1
   11f10:	2109      	movs	r1, #9
   11f12:	7013      	strb	r3, [r2, #0]
   11f14:	47a8      	blx	r5
   11f16:	2001      	movs	r0, #1
   11f18:	3484      	adds	r4, #132	; 0x84
   11f1a:	7823      	ldrb	r3, [r4, #0]
   11f1c:	210b      	movs	r1, #11
   11f1e:	4383      	bics	r3, r0
   11f20:	7023      	strb	r3, [r4, #0]
   11f22:	47a8      	blx	r5
   11f24:	3e02      	subs	r6, #2
   11f26:	e069      	b.n	11ffc <LORAWAN_SetAttr+0x254>
   11f28:	680b      	ldr	r3, [r1, #0]
   11f2a:	2001      	movs	r0, #1
   11f2c:	0a19      	lsrs	r1, r3, #8
   11f2e:	70a1      	strb	r1, [r4, #2]
   11f30:	0c19      	lsrs	r1, r3, #16
   11f32:	7063      	strb	r3, [r4, #1]
   11f34:	70e1      	strb	r1, [r4, #3]
   11f36:	0e1b      	lsrs	r3, r3, #24
   11f38:	2103      	movs	r1, #3
   11f3a:	4d5a      	ldr	r5, [pc, #360]	; (120a4 <LORAWAN_SetAttr+0x2fc>)
   11f3c:	7123      	strb	r3, [r4, #4]
   11f3e:	47a8      	blx	r5
   11f40:	0022      	movs	r2, r4
   11f42:	2304      	movs	r3, #4
   11f44:	32de      	adds	r2, #222	; 0xde
   11f46:	7811      	ldrb	r1, [r2, #0]
   11f48:	430b      	orrs	r3, r1
   11f4a:	7013      	strb	r3, [r2, #0]
   11f4c:	e015      	b.n	11f7a <LORAWAN_SetAttr+0x1d2>
   11f4e:	260a      	movs	r6, #10
   11f50:	2900      	cmp	r1, #0
   11f52:	d053      	beq.n	11ffc <LORAWAN_SetAttr+0x254>
   11f54:	3606      	adds	r6, #6
   11f56:	0032      	movs	r2, r6
   11f58:	4f51      	ldr	r7, [pc, #324]	; (120a0 <LORAWAN_SetAttr+0x2f8>)
   11f5a:	1d60      	adds	r0, r4, #5
   11f5c:	47b8      	blx	r7
   11f5e:	0020      	movs	r0, r4
   11f60:	0032      	movs	r2, r6
   11f62:	0029      	movs	r1, r5
   11f64:	3025      	adds	r0, #37	; 0x25
   11f66:	47b8      	blx	r7
   11f68:	2104      	movs	r1, #4
   11f6a:	2001      	movs	r0, #1
   11f6c:	4d4d      	ldr	r5, [pc, #308]	; (120a4 <LORAWAN_SetAttr+0x2fc>)
   11f6e:	47a8      	blx	r5
   11f70:	0023      	movs	r3, r4
   11f72:	33de      	adds	r3, #222	; 0xde
   11f74:	781a      	ldrb	r2, [r3, #0]
   11f76:	4316      	orrs	r6, r2
   11f78:	701e      	strb	r6, [r3, #0]
   11f7a:	2109      	movs	r1, #9
   11f7c:	2001      	movs	r0, #1
   11f7e:	47a8      	blx	r5
   11f80:	2001      	movs	r0, #1
   11f82:	210b      	movs	r1, #11
   11f84:	3484      	adds	r4, #132	; 0x84
   11f86:	7823      	ldrb	r3, [r4, #0]
   11f88:	4383      	bics	r3, r0
   11f8a:	7023      	strb	r3, [r4, #0]
   11f8c:	47a8      	blx	r5
   11f8e:	e77d      	b.n	11e8c <LORAWAN_SetAttr+0xe4>
   11f90:	260a      	movs	r6, #10
   11f92:	2900      	cmp	r1, #0
   11f94:	d032      	beq.n	11ffc <LORAWAN_SetAttr+0x254>
   11f96:	0020      	movs	r0, r4
   11f98:	2210      	movs	r2, #16
   11f9a:	4e41      	ldr	r6, [pc, #260]	; (120a0 <LORAWAN_SetAttr+0x2f8>)
   11f9c:	3015      	adds	r0, #21
   11f9e:	47b0      	blx	r6
   11fa0:	0020      	movs	r0, r4
   11fa2:	2210      	movs	r2, #16
   11fa4:	0029      	movs	r1, r5
   11fa6:	3035      	adds	r0, #53	; 0x35
   11fa8:	47b0      	blx	r6
   11faa:	2105      	movs	r1, #5
   11fac:	2001      	movs	r0, #1
   11fae:	4d3d      	ldr	r5, [pc, #244]	; (120a4 <LORAWAN_SetAttr+0x2fc>)
   11fb0:	47a8      	blx	r5
   11fb2:	0022      	movs	r2, r4
   11fb4:	32de      	adds	r2, #222	; 0xde
   11fb6:	7811      	ldrb	r1, [r2, #0]
   11fb8:	2320      	movs	r3, #32
   11fba:	e7c5      	b.n	11f48 <LORAWAN_SetAttr+0x1a0>
   11fbc:	260a      	movs	r6, #10
   11fbe:	2900      	cmp	r1, #0
   11fc0:	d01c      	beq.n	11ffc <LORAWAN_SetAttr+0x254>
   11fc2:	4b3a      	ldr	r3, [pc, #232]	; (120ac <LORAWAN_SetAttr+0x304>)
   11fc4:	3e02      	subs	r6, #2
   11fc6:	5ce3      	ldrb	r3, [r4, r3]
   11fc8:	2b00      	cmp	r3, #0
   11fca:	d117      	bne.n	11ffc <LORAWAN_SetAttr+0x254>
   11fcc:	0020      	movs	r0, r4
   11fce:	2210      	movs	r2, #16
   11fd0:	4b33      	ldr	r3, [pc, #204]	; (120a0 <LORAWAN_SetAttr+0x2f8>)
   11fd2:	3045      	adds	r0, #69	; 0x45
   11fd4:	4798      	blx	r3
   11fd6:	2106      	movs	r1, #6
   11fd8:	4d32      	ldr	r5, [pc, #200]	; (120a4 <LORAWAN_SetAttr+0x2fc>)
   11fda:	2001      	movs	r0, #1
   11fdc:	47a8      	blx	r5
   11fde:	0022      	movs	r2, r4
   11fe0:	32de      	adds	r2, #222	; 0xde
   11fe2:	7813      	ldrb	r3, [r2, #0]
   11fe4:	2109      	movs	r1, #9
   11fe6:	4333      	orrs	r3, r6
   11fe8:	2001      	movs	r0, #1
   11fea:	7013      	strb	r3, [r2, #0]
   11fec:	47a8      	blx	r5
   11fee:	2001      	movs	r0, #1
   11ff0:	3484      	adds	r4, #132	; 0x84
   11ff2:	7823      	ldrb	r3, [r4, #0]
   11ff4:	210b      	movs	r1, #11
   11ff6:	4383      	bics	r3, r0
   11ff8:	7023      	strb	r3, [r4, #0]
   11ffa:	47a8      	blx	r5
   11ffc:	0030      	movs	r0, r6
   11ffe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   12000:	780b      	ldrb	r3, [r1, #0]
   12002:	2001      	movs	r0, #1
   12004:	0021      	movs	r1, r4
   12006:	2520      	movs	r5, #32
   12008:	3184      	adds	r1, #132	; 0x84
   1200a:	4003      	ands	r3, r0
   1200c:	015a      	lsls	r2, r3, #5
   1200e:	780b      	ldrb	r3, [r1, #0]
   12010:	43ab      	bics	r3, r5
   12012:	4313      	orrs	r3, r2
   12014:	700b      	strb	r3, [r1, #0]
   12016:	0023      	movs	r3, r4
   12018:	2200      	movs	r2, #0
   1201a:	33ca      	adds	r3, #202	; 0xca
   1201c:	3494      	adds	r4, #148	; 0x94
   1201e:	801a      	strh	r2, [r3, #0]
   12020:	7823      	ldrb	r3, [r4, #0]
   12022:	3210      	adds	r2, #16
   12024:	4393      	bics	r3, r2
   12026:	7023      	strb	r3, [r4, #0]
   12028:	210b      	movs	r1, #11
   1202a:	e748      	b.n	11ebe <LORAWAN_SetAttr+0x116>
   1202c:	466a      	mov	r2, sp
   1202e:	780b      	ldrb	r3, [r1, #0]
   12030:	7013      	strb	r3, [r2, #0]
   12032:	0022      	movs	r2, r4
   12034:	32f3      	adds	r2, #243	; 0xf3
   12036:	7812      	ldrb	r2, [r2, #0]
   12038:	429a      	cmp	r2, r3
   1203a:	d900      	bls.n	1203e <LORAWAN_SetAttr+0x296>
   1203c:	e739      	b.n	11eb2 <LORAWAN_SetAttr+0x10a>
   1203e:	0022      	movs	r2, r4
   12040:	32f4      	adds	r2, #244	; 0xf4
   12042:	7812      	ldrb	r2, [r2, #0]
   12044:	429a      	cmp	r2, r3
   12046:	d200      	bcs.n	1204a <LORAWAN_SetAttr+0x2a2>
   12048:	e733      	b.n	11eb2 <LORAWAN_SetAttr+0x10a>
   1204a:	4669      	mov	r1, sp
   1204c:	2010      	movs	r0, #16
   1204e:	4b18      	ldr	r3, [pc, #96]	; (120b0 <LORAWAN_SetAttr+0x308>)
   12050:	4798      	blx	r3
   12052:	0006      	movs	r6, r0
   12054:	2808      	cmp	r0, #8
   12056:	d000      	beq.n	1205a <LORAWAN_SetAttr+0x2b2>
   12058:	e72b      	b.n	11eb2 <LORAWAN_SetAttr+0x10a>
   1205a:	466b      	mov	r3, sp
   1205c:	210c      	movs	r1, #12
   1205e:	2001      	movs	r0, #1
   12060:	781b      	ldrb	r3, [r3, #0]
   12062:	34e7      	adds	r4, #231	; 0xe7
   12064:	7023      	strb	r3, [r4, #0]
   12066:	4b0f      	ldr	r3, [pc, #60]	; (120a4 <LORAWAN_SetAttr+0x2fc>)
   12068:	4798      	blx	r3
   1206a:	e7c7      	b.n	11ffc <LORAWAN_SetAttr+0x254>
   1206c:	466a      	mov	r2, sp
   1206e:	780b      	ldrb	r3, [r1, #0]
   12070:	201d      	movs	r0, #29
   12072:	7013      	strb	r3, [r2, #0]
   12074:	4669      	mov	r1, sp
   12076:	4b0e      	ldr	r3, [pc, #56]	; (120b0 <LORAWAN_SetAttr+0x308>)
   12078:	4798      	blx	r3
   1207a:	0006      	movs	r6, r0
   1207c:	2808      	cmp	r0, #8
   1207e:	d000      	beq.n	12082 <LORAWAN_SetAttr+0x2da>
   12080:	e717      	b.n	11eb2 <LORAWAN_SetAttr+0x10a>
   12082:	466b      	mov	r3, sp
   12084:	781b      	ldrb	r3, [r3, #0]
   12086:	34e9      	adds	r4, #233	; 0xe9
   12088:	7023      	strb	r3, [r4, #0]
   1208a:	210a      	movs	r1, #10
   1208c:	2000      	movs	r0, #0
   1208e:	e7ea      	b.n	12066 <LORAWAN_SetAttr+0x2be>
   12090:	780b      	ldrb	r3, [r1, #0]
   12092:	2103      	movs	r1, #3
   12094:	34ff      	adds	r4, #255	; 0xff
   12096:	7063      	strb	r3, [r4, #1]
   12098:	2000      	movs	r0, #0
   1209a:	e710      	b.n	11ebe <LORAWAN_SetAttr+0x116>
   1209c:	20003170 	.word	0x20003170
   120a0:	000161b7 	.word	0x000161b7
   120a4:	00008d81 	.word	0x00008d81
   120a8:	0000dd25 	.word	0x0000dd25
   120ac:	0000022d 	.word	0x0000022d
   120b0:	0000c6f9 	.word	0x0000c6f9
   120b4:	680b      	ldr	r3, [r1, #0]
   120b6:	260a      	movs	r6, #10
   120b8:	1c5a      	adds	r2, r3, #1
   120ba:	d09f      	beq.n	11ffc <LORAWAN_SetAttr+0x254>
   120bc:	2115      	movs	r1, #21
   120be:	2000      	movs	r0, #0
   120c0:	3488      	adds	r4, #136	; 0x88
   120c2:	6023      	str	r3, [r4, #0]
   120c4:	4b7f      	ldr	r3, [pc, #508]	; (122c4 <LORAWAN_SetAttr+0x51c>)
   120c6:	4798      	blx	r3
   120c8:	e72c      	b.n	11f24 <LORAWAN_SetAttr+0x17c>
   120ca:	680b      	ldr	r3, [r1, #0]
   120cc:	260a      	movs	r6, #10
   120ce:	1c5a      	adds	r2, r3, #1
   120d0:	d100      	bne.n	120d4 <LORAWAN_SetAttr+0x32c>
   120d2:	e793      	b.n	11ffc <LORAWAN_SetAttr+0x254>
   120d4:	0031      	movs	r1, r6
   120d6:	348c      	adds	r4, #140	; 0x8c
   120d8:	6023      	str	r3, [r4, #0]
   120da:	2001      	movs	r0, #1
   120dc:	e7f2      	b.n	120c4 <LORAWAN_SetAttr+0x31c>
   120de:	0026      	movs	r6, r4
   120e0:	880b      	ldrh	r3, [r1, #0]
   120e2:	36d0      	adds	r6, #208	; 0xd0
   120e4:	210c      	movs	r1, #12
   120e6:	2000      	movs	r0, #0
   120e8:	4d76      	ldr	r5, [pc, #472]	; (122c4 <LORAWAN_SetAttr+0x51c>)
   120ea:	8033      	strh	r3, [r6, #0]
   120ec:	47a8      	blx	r5
   120ee:	22fa      	movs	r2, #250	; 0xfa
   120f0:	8833      	ldrh	r3, [r6, #0]
   120f2:	0092      	lsls	r2, r2, #2
   120f4:	189b      	adds	r3, r3, r2
   120f6:	34d2      	adds	r4, #210	; 0xd2
   120f8:	8023      	strh	r3, [r4, #0]
   120fa:	210d      	movs	r1, #13
   120fc:	2000      	movs	r0, #0
   120fe:	e745      	b.n	11f8c <LORAWAN_SetAttr+0x1e4>
   12100:	780b      	ldrb	r3, [r1, #0]
   12102:	260a      	movs	r6, #10
   12104:	2b0f      	cmp	r3, #15
   12106:	d900      	bls.n	1210a <LORAWAN_SetAttr+0x362>
   12108:	e778      	b.n	11ffc <LORAWAN_SetAttr+0x254>
   1210a:	3498      	adds	r4, #152	; 0x98
   1210c:	7023      	strb	r3, [r4, #0]
   1210e:	e709      	b.n	11f24 <LORAWAN_SetAttr+0x17c>
   12110:	880b      	ldrh	r3, [r1, #0]
   12112:	34d4      	adds	r4, #212	; 0xd4
   12114:	8023      	strh	r3, [r4, #0]
   12116:	210e      	movs	r1, #14
   12118:	e7be      	b.n	12098 <LORAWAN_SetAttr+0x2f0>
   1211a:	880b      	ldrh	r3, [r1, #0]
   1211c:	34d6      	adds	r4, #214	; 0xd6
   1211e:	8023      	strh	r3, [r4, #0]
   12120:	210f      	movs	r1, #15
   12122:	e7b9      	b.n	12098 <LORAWAN_SetAttr+0x2f0>
   12124:	780b      	ldrb	r3, [r1, #0]
   12126:	34dc      	adds	r4, #220	; 0xdc
   12128:	7023      	strb	r3, [r4, #0]
   1212a:	2111      	movs	r1, #17
   1212c:	e7b4      	b.n	12098 <LORAWAN_SetAttr+0x2f0>
   1212e:	780b      	ldrb	r3, [r1, #0]
   12130:	34dd      	adds	r4, #221	; 0xdd
   12132:	7023      	strb	r3, [r4, #0]
   12134:	2112      	movs	r1, #18
   12136:	e7af      	b.n	12098 <LORAWAN_SetAttr+0x2f0>
   12138:	880b      	ldrh	r3, [r1, #0]
   1213a:	34da      	adds	r4, #218	; 0xda
   1213c:	8023      	strh	r3, [r4, #0]
   1213e:	2110      	movs	r1, #16
   12140:	e7aa      	b.n	12098 <LORAWAN_SetAttr+0x2f0>
   12142:	780b      	ldrb	r3, [r1, #0]
   12144:	34e2      	adds	r4, #226	; 0xe2
   12146:	7023      	strb	r3, [r4, #0]
   12148:	2114      	movs	r1, #20
   1214a:	e7a5      	b.n	12098 <LORAWAN_SetAttr+0x2f0>
   1214c:	780b      	ldrb	r3, [r1, #0]
   1214e:	34e1      	adds	r4, #225	; 0xe1
   12150:	7023      	strb	r3, [r4, #0]
   12152:	e69b      	b.n	11e8c <LORAWAN_SetAttr+0xe4>
   12154:	780b      	ldrb	r3, [r1, #0]
   12156:	34e8      	adds	r4, #232	; 0xe8
   12158:	e7fa      	b.n	12150 <LORAWAN_SetAttr+0x3a8>
   1215a:	2001      	movs	r0, #1
   1215c:	780b      	ldrb	r3, [r1, #0]
   1215e:	2110      	movs	r1, #16
   12160:	3484      	adds	r4, #132	; 0x84
   12162:	4003      	ands	r3, r0
   12164:	011a      	lsls	r2, r3, #4
   12166:	7823      	ldrb	r3, [r4, #0]
   12168:	438b      	bics	r3, r1
   1216a:	4313      	orrs	r3, r2
   1216c:	7023      	strb	r3, [r4, #0]
   1216e:	3905      	subs	r1, #5
   12170:	e6a5      	b.n	11ebe <LORAWAN_SetAttr+0x116>
   12172:	7909      	ldrb	r1, [r1, #4]
   12174:	7828      	ldrb	r0, [r5, #0]
   12176:	4b54      	ldr	r3, [pc, #336]	; (122c8 <LORAWAN_SetAttr+0x520>)
   12178:	4798      	blx	r3
   1217a:	0006      	movs	r6, r0
   1217c:	e73e      	b.n	11ffc <LORAWAN_SetAttr+0x254>
   1217e:	7909      	ldrb	r1, [r1, #4]
   12180:	7828      	ldrb	r0, [r5, #0]
   12182:	4b52      	ldr	r3, [pc, #328]	; (122cc <LORAWAN_SetAttr+0x524>)
   12184:	e7f8      	b.n	12178 <LORAWAN_SetAttr+0x3d0>
   12186:	7808      	ldrb	r0, [r1, #0]
   12188:	4b51      	ldr	r3, [pc, #324]	; (122d0 <LORAWAN_SetAttr+0x528>)
   1218a:	6849      	ldr	r1, [r1, #4]
   1218c:	4798      	blx	r3
   1218e:	e7f4      	b.n	1217a <LORAWAN_SetAttr+0x3d2>
   12190:	7909      	ldrb	r1, [r1, #4]
   12192:	6828      	ldr	r0, [r5, #0]
   12194:	4b4f      	ldr	r3, [pc, #316]	; (122d4 <LORAWAN_SetAttr+0x52c>)
   12196:	4798      	blx	r3
   12198:	e7ef      	b.n	1217a <LORAWAN_SetAttr+0x3d2>
   1219a:	786b      	ldrb	r3, [r5, #1]
   1219c:	7828      	ldrb	r0, [r5, #0]
   1219e:	021b      	lsls	r3, r3, #8
   121a0:	4303      	orrs	r3, r0
   121a2:	78a8      	ldrb	r0, [r5, #2]
   121a4:	7909      	ldrb	r1, [r1, #4]
   121a6:	0400      	lsls	r0, r0, #16
   121a8:	4303      	orrs	r3, r0
   121aa:	78e8      	ldrb	r0, [r5, #3]
   121ac:	0600      	lsls	r0, r0, #24
   121ae:	4318      	orrs	r0, r3
   121b0:	4b49      	ldr	r3, [pc, #292]	; (122d8 <LORAWAN_SetAttr+0x530>)
   121b2:	e7f0      	b.n	12196 <LORAWAN_SetAttr+0x3ee>
   121b4:	7808      	ldrb	r0, [r1, #0]
   121b6:	4b49      	ldr	r3, [pc, #292]	; (122dc <LORAWAN_SetAttr+0x534>)
   121b8:	4798      	blx	r3
   121ba:	e7de      	b.n	1217a <LORAWAN_SetAttr+0x3d2>
   121bc:	8808      	ldrh	r0, [r1, #0]
   121be:	4b48      	ldr	r3, [pc, #288]	; (122e0 <LORAWAN_SetAttr+0x538>)
   121c0:	4798      	blx	r3
   121c2:	e663      	b.n	11e8c <LORAWAN_SetAttr+0xe4>
   121c4:	4b47      	ldr	r3, [pc, #284]	; (122e4 <LORAWAN_SetAttr+0x53c>)
   121c6:	6019      	str	r1, [r3, #0]
   121c8:	e673      	b.n	11eb2 <LORAWAN_SetAttr+0x10a>
   121ca:	7809      	ldrb	r1, [r1, #0]
   121cc:	7868      	ldrb	r0, [r5, #1]
   121ce:	4b46      	ldr	r3, [pc, #280]	; (122e8 <LORAWAN_SetAttr+0x540>)
   121d0:	4798      	blx	r3
   121d2:	e7d2      	b.n	1217a <LORAWAN_SetAttr+0x3d2>
   121d4:	7809      	ldrb	r1, [r1, #0]
   121d6:	4b45      	ldr	r3, [pc, #276]	; (122ec <LORAWAN_SetAttr+0x544>)
   121d8:	1c68      	adds	r0, r5, #1
   121da:	4798      	blx	r3
   121dc:	e7cd      	b.n	1217a <LORAWAN_SetAttr+0x3d2>
   121de:	7809      	ldrb	r1, [r1, #0]
   121e0:	1c68      	adds	r0, r5, #1
   121e2:	4b43      	ldr	r3, [pc, #268]	; (122f0 <LORAWAN_SetAttr+0x548>)
   121e4:	e7f9      	b.n	121da <LORAWAN_SetAttr+0x432>
   121e6:	7809      	ldrb	r1, [r1, #0]
   121e8:	6868      	ldr	r0, [r5, #4]
   121ea:	4b42      	ldr	r3, [pc, #264]	; (122f4 <LORAWAN_SetAttr+0x54c>)
   121ec:	e7f5      	b.n	121da <LORAWAN_SetAttr+0x432>
   121ee:	7809      	ldrb	r1, [r1, #0]
   121f0:	6868      	ldr	r0, [r5, #4]
   121f2:	4b41      	ldr	r3, [pc, #260]	; (122f8 <LORAWAN_SetAttr+0x550>)
   121f4:	e7f1      	b.n	121da <LORAWAN_SetAttr+0x432>
   121f6:	7809      	ldrb	r1, [r1, #0]
   121f8:	6868      	ldr	r0, [r5, #4]
   121fa:	4b40      	ldr	r3, [pc, #256]	; (122fc <LORAWAN_SetAttr+0x554>)
   121fc:	e7ed      	b.n	121da <LORAWAN_SetAttr+0x432>
   121fe:	7809      	ldrb	r1, [r1, #0]
   12200:	6868      	ldr	r0, [r5, #4]
   12202:	4b3f      	ldr	r3, [pc, #252]	; (12300 <LORAWAN_SetAttr+0x558>)
   12204:	e7e9      	b.n	121da <LORAWAN_SetAttr+0x432>
   12206:	7809      	ldrb	r1, [r1, #0]
   12208:	7868      	ldrb	r0, [r5, #1]
   1220a:	4b3e      	ldr	r3, [pc, #248]	; (12304 <LORAWAN_SetAttr+0x55c>)
   1220c:	e7e0      	b.n	121d0 <LORAWAN_SetAttr+0x428>
   1220e:	7809      	ldrb	r1, [r1, #0]
   12210:	7868      	ldrb	r0, [r5, #1]
   12212:	4b3d      	ldr	r3, [pc, #244]	; (12308 <LORAWAN_SetAttr+0x560>)
   12214:	e7dc      	b.n	121d0 <LORAWAN_SetAttr+0x428>
   12216:	2300      	movs	r3, #0
   12218:	466a      	mov	r2, sp
   1221a:	7809      	ldrb	r1, [r1, #0]
   1221c:	7013      	strb	r3, [r2, #0]
   1221e:	4299      	cmp	r1, r3
   12220:	d014      	beq.n	1224c <LORAWAN_SetAttr+0x4a4>
   12222:	0022      	movs	r2, r4
   12224:	2102      	movs	r1, #2
   12226:	32ff      	adds	r2, #255	; 0xff
   12228:	7f53      	ldrb	r3, [r2, #29]
   1222a:	420b      	tst	r3, r1
   1222c:	d001      	beq.n	12232 <LORAWAN_SetAttr+0x48a>
   1222e:	438b      	bics	r3, r1
   12230:	7753      	strb	r3, [r2, #29]
   12232:	2220      	movs	r2, #32
   12234:	34ff      	adds	r4, #255	; 0xff
   12236:	7f63      	ldrb	r3, [r4, #29]
   12238:	4213      	tst	r3, r2
   1223a:	d100      	bne.n	1223e <LORAWAN_SetAttr+0x496>
   1223c:	e626      	b.n	11e8c <LORAWAN_SetAttr+0xe4>
   1223e:	4393      	bics	r3, r2
   12240:	7763      	strb	r3, [r4, #29]
   12242:	4669      	mov	r1, sp
   12244:	4b31      	ldr	r3, [pc, #196]	; (1230c <LORAWAN_SetAttr+0x564>)
   12246:	2038      	movs	r0, #56	; 0x38
   12248:	4798      	blx	r3
   1224a:	e61f      	b.n	11e8c <LORAWAN_SetAttr+0xe4>
   1224c:	4a30      	ldr	r2, [pc, #192]	; (12310 <LORAWAN_SetAttr+0x568>)
   1224e:	4b31      	ldr	r3, [pc, #196]	; (12314 <LORAWAN_SetAttr+0x56c>)
   12250:	200e      	movs	r0, #14
   12252:	4798      	blx	r3
   12254:	e61a      	b.n	11e8c <LORAWAN_SetAttr+0xe4>
   12256:	466b      	mov	r3, sp
   12258:	780a      	ldrb	r2, [r1, #0]
   1225a:	34ff      	adds	r4, #255	; 0xff
   1225c:	701a      	strb	r2, [r3, #0]
   1225e:	2320      	movs	r3, #32
   12260:	2a00      	cmp	r2, #0
   12262:	d007      	beq.n	12274 <LORAWAN_SetAttr+0x4cc>
   12264:	7f62      	ldrb	r2, [r4, #29]
   12266:	4313      	orrs	r3, r2
   12268:	7763      	strb	r3, [r4, #29]
   1226a:	4669      	mov	r1, sp
   1226c:	4b27      	ldr	r3, [pc, #156]	; (1230c <LORAWAN_SetAttr+0x564>)
   1226e:	2038      	movs	r0, #56	; 0x38
   12270:	4798      	blx	r3
   12272:	e782      	b.n	1217a <LORAWAN_SetAttr+0x3d2>
   12274:	7f62      	ldrb	r2, [r4, #29]
   12276:	260a      	movs	r6, #10
   12278:	421a      	tst	r2, r3
   1227a:	d100      	bne.n	1227e <LORAWAN_SetAttr+0x4d6>
   1227c:	e6be      	b.n	11ffc <LORAWAN_SetAttr+0x254>
   1227e:	439a      	bics	r2, r3
   12280:	7762      	strb	r2, [r4, #29]
   12282:	e7f2      	b.n	1226a <LORAWAN_SetAttr+0x4c2>
   12284:	780b      	ldrb	r3, [r1, #0]
   12286:	260a      	movs	r6, #10
   12288:	2b08      	cmp	r3, #8
   1228a:	d900      	bls.n	1228e <LORAWAN_SetAttr+0x4e6>
   1228c:	e6b6      	b.n	11ffc <LORAWAN_SetAttr+0x254>
   1228e:	228b      	movs	r2, #139	; 0x8b
   12290:	0092      	lsls	r2, r2, #2
   12292:	54a3      	strb	r3, [r4, r2]
   12294:	210d      	movs	r1, #13
   12296:	e720      	b.n	120da <LORAWAN_SetAttr+0x332>
   12298:	780a      	ldrb	r2, [r1, #0]
   1229a:	4b1f      	ldr	r3, [pc, #124]	; (12318 <LORAWAN_SetAttr+0x570>)
   1229c:	54e2      	strb	r2, [r4, r3]
   1229e:	e5f5      	b.n	11e8c <LORAWAN_SetAttr+0xe4>
   122a0:	4b1e      	ldr	r3, [pc, #120]	; (1231c <LORAWAN_SetAttr+0x574>)
   122a2:	4798      	blx	r3
   122a4:	e769      	b.n	1217a <LORAWAN_SetAttr+0x3d2>
   122a6:	4b1e      	ldr	r3, [pc, #120]	; (12320 <LORAWAN_SetAttr+0x578>)
   122a8:	e7fb      	b.n	122a2 <LORAWAN_SetAttr+0x4fa>
   122aa:	780a      	ldrb	r2, [r1, #0]
   122ac:	2302      	movs	r3, #2
   122ae:	34ff      	adds	r4, #255	; 0xff
   122b0:	2a00      	cmp	r2, #0
   122b2:	d003      	beq.n	122bc <LORAWAN_SetAttr+0x514>
   122b4:	7f62      	ldrb	r2, [r4, #29]
   122b6:	4313      	orrs	r3, r2
   122b8:	7763      	strb	r3, [r4, #29]
   122ba:	e5e7      	b.n	11e8c <LORAWAN_SetAttr+0xe4>
   122bc:	7f62      	ldrb	r2, [r4, #29]
   122be:	439a      	bics	r2, r3
   122c0:	7762      	strb	r2, [r4, #29]
   122c2:	e5e3      	b.n	11e8c <LORAWAN_SetAttr+0xe4>
   122c4:	00008d81 	.word	0x00008d81
   122c8:	00011231 	.word	0x00011231
   122cc:	000111c1 	.word	0x000111c1
   122d0:	000109e9 	.word	0x000109e9
   122d4:	00010961 	.word	0x00010961
   122d8:	0001099d 	.word	0x0001099d
   122dc:	00011d29 	.word	0x00011d29
   122e0:	0000fbfd 	.word	0x0000fbfd
   122e4:	200034c8 	.word	0x200034c8
   122e8:	0001283d 	.word	0x0001283d
   122ec:	00012a9d 	.word	0x00012a9d
   122f0:	00012ae9 	.word	0x00012ae9
   122f4:	00012a55 	.word	0x00012a55
   122f8:	00012b35 	.word	0x00012b35
   122fc:	00012b55 	.word	0x00012b55
   12300:	00012b71 	.word	0x00012b71
   12304:	00012bb5 	.word	0x00012bb5
   12308:	00012bf1 	.word	0x00012bf1
   1230c:	0000c715 	.word	0x0000c715
   12310:	2000328c 	.word	0x2000328c
   12314:	0000c6dd 	.word	0x0000c6dd
   12318:	0000022d 	.word	0x0000022d
   1231c:	0000fc99 	.word	0x0000fc99
   12320:	0000fcc1 	.word	0x0000fcc1

00012324 <AssemblePacket>:
   12324:	b5f0      	push	{r4, r5, r6, r7, lr}
   12326:	2710      	movs	r7, #16
   12328:	b08f      	sub	sp, #60	; 0x3c
   1232a:	9308      	str	r3, [sp, #32]
   1232c:	ab0d      	add	r3, sp, #52	; 0x34
   1232e:	801f      	strh	r7, [r3, #0]
   12330:	231e      	movs	r3, #30
   12332:	920a      	str	r2, [sp, #40]	; 0x28
   12334:	aa06      	add	r2, sp, #24
   12336:	189b      	adds	r3, r3, r2
   12338:	2500      	movs	r5, #0
   1233a:	2210      	movs	r2, #16
   1233c:	ac0c      	add	r4, sp, #48	; 0x30
   1233e:	9006      	str	r0, [sp, #24]
   12340:	910b      	str	r1, [sp, #44]	; 0x2c
   12342:	32ff      	adds	r2, #255	; 0xff
   12344:	0029      	movs	r1, r5
   12346:	4ed1      	ldr	r6, [pc, #836]	; (1268c <AssemblePacket+0x368>)
   12348:	7025      	strb	r5, [r4, #0]
   1234a:	48d1      	ldr	r0, [pc, #836]	; (12690 <AssemblePacket+0x36c>)
   1234c:	801d      	strh	r5, [r3, #0]
   1234e:	47b0      	blx	r6
   12350:	003a      	movs	r2, r7
   12352:	0029      	movs	r1, r5
   12354:	48cf      	ldr	r0, [pc, #828]	; (12694 <AssemblePacket+0x370>)
   12356:	47b0      	blx	r6
   12358:	221f      	movs	r2, #31
   1235a:	7823      	ldrb	r3, [r4, #0]
   1235c:	9906      	ldr	r1, [sp, #24]
   1235e:	4013      	ands	r3, r2
   12360:	42a9      	cmp	r1, r5
   12362:	d100      	bne.n	12366 <AssemblePacket+0x42>
   12364:	e0dc      	b.n	12520 <AssemblePacket+0x1fc>
   12366:	3a9f      	subs	r2, #159	; 0x9f
   12368:	4313      	orrs	r3, r2
   1236a:	7023      	strb	r3, [r4, #0]
   1236c:	4bca      	ldr	r3, [pc, #808]	; (12698 <AssemblePacket+0x374>)
   1236e:	3281      	adds	r2, #129	; 0x81
   12370:	3394      	adds	r3, #148	; 0x94
   12372:	7819      	ldrb	r1, [r3, #0]
   12374:	430a      	orrs	r2, r1
   12376:	701a      	strb	r2, [r3, #0]
   12378:	22e0      	movs	r2, #224	; 0xe0
   1237a:	7823      	ldrb	r3, [r4, #0]
   1237c:	48c4      	ldr	r0, [pc, #784]	; (12690 <AssemblePacket+0x36c>)
   1237e:	4013      	ands	r3, r2
   12380:	7023      	strb	r3, [r4, #0]
   12382:	4cc5      	ldr	r4, [pc, #788]	; (12698 <AssemblePacket+0x374>)
   12384:	7403      	strb	r3, [r0, #16]
   12386:	3adc      	subs	r2, #220	; 0xdc
   12388:	4bc4      	ldr	r3, [pc, #784]	; (1269c <AssemblePacket+0x378>)
   1238a:	3011      	adds	r0, #17
   1238c:	1c61      	adds	r1, r4, #1
   1238e:	4798      	blx	r3
   12390:	2215      	movs	r2, #21
   12392:	ab0d      	add	r3, sp, #52	; 0x34
   12394:	0025      	movs	r5, r4
   12396:	801a      	strh	r2, [r3, #0]
   12398:	2600      	movs	r6, #0
   1239a:	466b      	mov	r3, sp
   1239c:	3584      	adds	r5, #132	; 0x84
   1239e:	761e      	strb	r6, [r3, #24]
   123a0:	782b      	ldrb	r3, [r5, #0]
   123a2:	069b      	lsls	r3, r3, #26
   123a4:	d400      	bmi.n	123a8 <AssemblePacket+0x84>
   123a6:	e130      	b.n	1260a <AssemblePacket+0x2e6>
   123a8:	0027      	movs	r7, r4
   123aa:	4bbd      	ldr	r3, [pc, #756]	; (126a0 <AssemblePacket+0x37c>)
   123ac:	37f3      	adds	r7, #243	; 0xf3
   123ae:	781a      	ldrb	r2, [r3, #0]
   123b0:	783b      	ldrb	r3, [r7, #0]
   123b2:	429a      	cmp	r2, r3
   123b4:	d31e      	bcc.n	123f4 <AssemblePacket+0xd0>
   123b6:	2180      	movs	r1, #128	; 0x80
   123b8:	466b      	mov	r3, sp
   123ba:	0022      	movs	r2, r4
   123bc:	4249      	negs	r1, r1
   123be:	32ca      	adds	r2, #202	; 0xca
   123c0:	7619      	strb	r1, [r3, #24]
   123c2:	8813      	ldrh	r3, [r2, #0]
   123c4:	3301      	adds	r3, #1
   123c6:	b29b      	uxth	r3, r3
   123c8:	8013      	strh	r3, [r2, #0]
   123ca:	0022      	movs	r2, r4
   123cc:	32dc      	adds	r2, #220	; 0xdc
   123ce:	7812      	ldrb	r2, [r2, #0]
   123d0:	4293      	cmp	r3, r2
   123d2:	d30f      	bcc.n	123f4 <AssemblePacket+0xd0>
   123d4:	2040      	movs	r0, #64	; 0x40
   123d6:	4308      	orrs	r0, r1
   123d8:	9006      	str	r0, [sp, #24]
   123da:	0020      	movs	r0, r4
   123dc:	3094      	adds	r0, #148	; 0x94
   123de:	7801      	ldrb	r1, [r0, #0]
   123e0:	4684      	mov	ip, r0
   123e2:	2010      	movs	r0, #16
   123e4:	4301      	orrs	r1, r0
   123e6:	4660      	mov	r0, ip
   123e8:	7001      	strb	r1, [r0, #0]
   123ea:	4293      	cmp	r3, r2
   123ec:	d000      	beq.n	123f0 <AssemblePacket+0xcc>
   123ee:	e09b      	b.n	12528 <AssemblePacket+0x204>
   123f0:	34f6      	adds	r4, #246	; 0xf6
   123f2:	7026      	strb	r6, [r4, #0]
   123f4:	4da8      	ldr	r5, [pc, #672]	; (12698 <AssemblePacket+0x374>)
   123f6:	2102      	movs	r1, #2
   123f8:	002a      	movs	r2, r5
   123fa:	3294      	adds	r2, #148	; 0x94
   123fc:	7813      	ldrb	r3, [r2, #0]
   123fe:	420b      	tst	r3, r1
   12400:	d005      	beq.n	1240e <AssemblePacket+0xea>
   12402:	2020      	movs	r0, #32
   12404:	9c06      	ldr	r4, [sp, #24]
   12406:	438b      	bics	r3, r1
   12408:	4304      	orrs	r4, r0
   1240a:	9406      	str	r4, [sp, #24]
   1240c:	7013      	strb	r3, [r2, #0]
   1240e:	2310      	movs	r3, #16
   12410:	9c06      	ldr	r4, [sp, #24]
   12412:	439c      	bics	r4, r3
   12414:	002b      	movs	r3, r5
   12416:	33e0      	adds	r3, #224	; 0xe0
   12418:	781b      	ldrb	r3, [r3, #0]
   1241a:	9309      	str	r3, [sp, #36]	; 0x24
   1241c:	2b00      	cmp	r3, #0
   1241e:	d003      	beq.n	12428 <AssemblePacket+0x104>
   12420:	9b08      	ldr	r3, [sp, #32]
   12422:	2b00      	cmp	r3, #0
   12424:	d000      	beq.n	12428 <AssemblePacket+0x104>
   12426:	e0f6      	b.n	12616 <AssemblePacket+0x2f2>
   12428:	230f      	movs	r3, #15
   1242a:	439c      	bics	r4, r3
   1242c:	466b      	mov	r3, sp
   1242e:	9406      	str	r4, [sp, #24]
   12430:	ac0d      	add	r4, sp, #52	; 0x34
   12432:	8826      	ldrh	r6, [r4, #0]
   12434:	4f96      	ldr	r7, [pc, #600]	; (12690 <AssemblePacket+0x36c>)
   12436:	7e1b      	ldrb	r3, [r3, #24]
   12438:	1c70      	adds	r0, r6, #1
   1243a:	b280      	uxth	r0, r0
   1243c:	55bb      	strb	r3, [r7, r6]
   1243e:	19c0      	adds	r0, r0, r7
   12440:	4b96      	ldr	r3, [pc, #600]	; (1269c <AssemblePacket+0x378>)
   12442:	2202      	movs	r2, #2
   12444:	4997      	ldr	r1, [pc, #604]	; (126a4 <AssemblePacket+0x380>)
   12446:	4798      	blx	r3
   12448:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1244a:	3603      	adds	r6, #3
   1244c:	8026      	strh	r6, [r4, #0]
   1244e:	2b00      	cmp	r3, #0
   12450:	d100      	bne.n	12454 <AssemblePacket+0x130>
   12452:	e0e7      	b.n	12624 <AssemblePacket+0x300>
   12454:	9b08      	ldr	r3, [sp, #32]
   12456:	2b00      	cmp	r3, #0
   12458:	d004      	beq.n	12464 <AssemblePacket+0x140>
   1245a:	2201      	movs	r2, #1
   1245c:	0021      	movs	r1, r4
   1245e:	0038      	movs	r0, r7
   12460:	4b91      	ldr	r3, [pc, #580]	; (126a8 <AssemblePacket+0x384>)
   12462:	4798      	blx	r3
   12464:	466a      	mov	r2, sp
   12466:	212c      	movs	r1, #44	; 0x2c
   12468:	1852      	adds	r2, r2, r1
   1246a:	8823      	ldrh	r3, [r4, #0]
   1246c:	7812      	ldrb	r2, [r2, #0]
   1246e:	1c5e      	adds	r6, r3, #1
   12470:	54fa      	strb	r2, [r7, r3]
   12472:	9b08      	ldr	r3, [sp, #32]
   12474:	b2b6      	uxth	r6, r6
   12476:	8026      	strh	r6, [r4, #0]
   12478:	2b00      	cmp	r3, #0
   1247a:	d100      	bne.n	1247e <AssemblePacket+0x15a>
   1247c:	e0d6      	b.n	1262c <AssemblePacket+0x308>
   1247e:	001a      	movs	r2, r3
   12480:	990a      	ldr	r1, [sp, #40]	; 0x28
   12482:	4b86      	ldr	r3, [pc, #536]	; (1269c <AssemblePacket+0x378>)
   12484:	19b8      	adds	r0, r7, r6
   12486:	4798      	blx	r3
   12488:	2120      	movs	r1, #32
   1248a:	466b      	mov	r3, sp
   1248c:	185b      	adds	r3, r3, r1
   1248e:	7819      	ldrb	r1, [r3, #0]
   12490:	682b      	ldr	r3, [r5, #0]
   12492:	002a      	movs	r2, r5
   12494:	0a18      	lsrs	r0, r3, #8
   12496:	792b      	ldrb	r3, [r5, #4]
   12498:	3288      	adds	r2, #136	; 0x88
   1249a:	061b      	lsls	r3, r3, #24
   1249c:	4303      	orrs	r3, r0
   1249e:	9304      	str	r3, [sp, #16]
   124a0:	2301      	movs	r3, #1
   124a2:	9301      	str	r3, [sp, #4]
   124a4:	4b81      	ldr	r3, [pc, #516]	; (126ac <AssemblePacket+0x388>)
   124a6:	9703      	str	r7, [sp, #12]
   124a8:	9602      	str	r6, [sp, #8]
   124aa:	9300      	str	r3, [sp, #0]
   124ac:	6813      	ldr	r3, [r2, #0]
   124ae:	980a      	ldr	r0, [sp, #40]	; 0x28
   124b0:	2200      	movs	r2, #0
   124b2:	4c7f      	ldr	r4, [pc, #508]	; (126b0 <AssemblePacket+0x38c>)
   124b4:	47a0      	blx	r4
   124b6:	2800      	cmp	r0, #0
   124b8:	d002      	beq.n	124c0 <AssemblePacket+0x19c>
   124ba:	2020      	movs	r0, #32
   124bc:	4b7d      	ldr	r3, [pc, #500]	; (126b4 <AssemblePacket+0x390>)
   124be:	4798      	blx	r3
   124c0:	aa0d      	add	r2, sp, #52	; 0x34
   124c2:	8813      	ldrh	r3, [r2, #0]
   124c4:	9908      	ldr	r1, [sp, #32]
   124c6:	18cb      	adds	r3, r1, r3
   124c8:	8013      	strh	r3, [r2, #0]
   124ca:	4c73      	ldr	r4, [pc, #460]	; (12698 <AssemblePacket+0x374>)
   124cc:	ae0d      	add	r6, sp, #52	; 0x34
   124ce:	0021      	movs	r1, r4
   124d0:	6823      	ldr	r3, [r4, #0]
   124d2:	8832      	ldrh	r2, [r6, #0]
   124d4:	0a18      	lsrs	r0, r3, #8
   124d6:	7923      	ldrb	r3, [r4, #4]
   124d8:	3a10      	subs	r2, #16
   124da:	061b      	lsls	r3, r3, #24
   124dc:	4303      	orrs	r3, r0
   124de:	9300      	str	r3, [sp, #0]
   124e0:	3188      	adds	r1, #136	; 0x88
   124e2:	b2d2      	uxtb	r2, r2
   124e4:	2349      	movs	r3, #73	; 0x49
   124e6:	6809      	ldr	r1, [r1, #0]
   124e8:	2000      	movs	r0, #0
   124ea:	4d73      	ldr	r5, [pc, #460]	; (126b8 <AssemblePacket+0x394>)
   124ec:	47a8      	blx	r5
   124ee:	4f68      	ldr	r7, [pc, #416]	; (12690 <AssemblePacket+0x36c>)
   124f0:	2210      	movs	r2, #16
   124f2:	4968      	ldr	r1, [pc, #416]	; (12694 <AssemblePacket+0x370>)
   124f4:	0038      	movs	r0, r7
   124f6:	4b69      	ldr	r3, [pc, #420]	; (1269c <AssemblePacket+0x378>)
   124f8:	4798      	blx	r3
   124fa:	8833      	ldrh	r3, [r6, #0]
   124fc:	4a65      	ldr	r2, [pc, #404]	; (12694 <AssemblePacket+0x370>)
   124fe:	9300      	str	r3, [sp, #0]
   12500:	2102      	movs	r1, #2
   12502:	003b      	movs	r3, r7
   12504:	4d6d      	ldr	r5, [pc, #436]	; (126bc <AssemblePacket+0x398>)
   12506:	486e      	ldr	r0, [pc, #440]	; (126c0 <AssemblePacket+0x39c>)
   12508:	47a8      	blx	r5
   1250a:	8836      	ldrh	r6, [r6, #0]
   1250c:	2204      	movs	r2, #4
   1250e:	19f0      	adds	r0, r6, r7
   12510:	4960      	ldr	r1, [pc, #384]	; (12694 <AssemblePacket+0x370>)
   12512:	4b62      	ldr	r3, [pc, #392]	; (1269c <AssemblePacket+0x378>)
   12514:	4798      	blx	r3
   12516:	3e0c      	subs	r6, #12
   12518:	34ce      	adds	r4, #206	; 0xce
   1251a:	8026      	strh	r6, [r4, #0]
   1251c:	b00f      	add	sp, #60	; 0x3c
   1251e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12520:	2240      	movs	r2, #64	; 0x40
   12522:	4313      	orrs	r3, r2
   12524:	7023      	strb	r3, [r4, #0]
   12526:	e727      	b.n	12378 <AssemblePacket+0x54>
   12528:	4293      	cmp	r3, r2
   1252a:	d800      	bhi.n	1252e <AssemblePacket+0x20a>
   1252c:	e762      	b.n	123f4 <AssemblePacket+0xd0>
   1252e:	0022      	movs	r2, r4
   12530:	0021      	movs	r1, r4
   12532:	32f6      	adds	r2, #246	; 0xf6
   12534:	7813      	ldrb	r3, [r2, #0]
   12536:	31dd      	adds	r1, #221	; 0xdd
   12538:	3301      	adds	r3, #1
   1253a:	b2db      	uxtb	r3, r3
   1253c:	7013      	strb	r3, [r2, #0]
   1253e:	7809      	ldrb	r1, [r1, #0]
   12540:	4299      	cmp	r1, r3
   12542:	d900      	bls.n	12546 <AssemblePacket+0x222>
   12544:	e756      	b.n	123f4 <AssemblePacket+0xd0>
   12546:	231a      	movs	r3, #26
   12548:	7016      	strb	r6, [r2, #0]
   1254a:	aa06      	add	r2, sp, #24
   1254c:	189b      	adds	r3, r3, r2
   1254e:	001a      	movs	r2, r3
   12550:	0031      	movs	r1, r6
   12552:	4b5c      	ldr	r3, [pc, #368]	; (126c4 <AssemblePacket+0x3a0>)
   12554:	203c      	movs	r0, #60	; 0x3c
   12556:	4798      	blx	r3
   12558:	4b5b      	ldr	r3, [pc, #364]	; (126c8 <AssemblePacket+0x3a4>)
   1255a:	781a      	ldrb	r2, [r3, #0]
   1255c:	ab06      	add	r3, sp, #24
   1255e:	7e9b      	ldrb	r3, [r3, #26]
   12560:	429a      	cmp	r2, r3
   12562:	d00d      	beq.n	12580 <AssemblePacket+0x25c>
   12564:	34ff      	adds	r4, #255	; 0xff
   12566:	7820      	ldrb	r0, [r4, #0]
   12568:	4b58      	ldr	r3, [pc, #352]	; (126cc <AssemblePacket+0x3a8>)
   1256a:	4798      	blx	r3
   1256c:	0031      	movs	r1, r6
   1256e:	4a56      	ldr	r2, [pc, #344]	; (126c8 <AssemblePacket+0x3a4>)
   12570:	4b54      	ldr	r3, [pc, #336]	; (126c4 <AssemblePacket+0x3a0>)
   12572:	2035      	movs	r0, #53	; 0x35
   12574:	4798      	blx	r3
   12576:	210a      	movs	r1, #10
   12578:	0030      	movs	r0, r6
   1257a:	4b55      	ldr	r3, [pc, #340]	; (126d0 <AssemblePacket+0x3ac>)
   1257c:	4798      	blx	r3
   1257e:	e739      	b.n	123f4 <AssemblePacket+0xd0>
   12580:	4b47      	ldr	r3, [pc, #284]	; (126a0 <AssemblePacket+0x37c>)
   12582:	783a      	ldrb	r2, [r7, #0]
   12584:	781b      	ldrb	r3, [r3, #0]
   12586:	4293      	cmp	r3, r2
   12588:	d022      	beq.n	125d0 <AssemblePacket+0x2ac>
   1258a:	d800      	bhi.n	1258e <AssemblePacket+0x26a>
   1258c:	e732      	b.n	123f4 <AssemblePacket+0xd0>
   1258e:	221b      	movs	r2, #27
   12590:	003d      	movs	r5, r7
   12592:	a906      	add	r1, sp, #24
   12594:	3b01      	subs	r3, #1
   12596:	1852      	adds	r2, r2, r1
   12598:	7013      	strb	r3, [r2, #0]
   1259a:	261b      	movs	r6, #27
   1259c:	ab06      	add	r3, sp, #24
   1259e:	18f6      	adds	r6, r6, r3
   125a0:	782a      	ldrb	r2, [r5, #0]
   125a2:	7833      	ldrb	r3, [r6, #0]
   125a4:	429a      	cmp	r2, r3
   125a6:	d900      	bls.n	125aa <AssemblePacket+0x286>
   125a8:	e724      	b.n	123f4 <AssemblePacket+0xd0>
   125aa:	0031      	movs	r1, r6
   125ac:	2010      	movs	r0, #16
   125ae:	4f49      	ldr	r7, [pc, #292]	; (126d4 <AssemblePacket+0x3b0>)
   125b0:	47b8      	blx	r7
   125b2:	2808      	cmp	r0, #8
   125b4:	d000      	beq.n	125b8 <AssemblePacket+0x294>
   125b6:	e71d      	b.n	123f4 <AssemblePacket+0xd0>
   125b8:	0031      	movs	r1, r6
   125ba:	3009      	adds	r0, #9
   125bc:	47b8      	blx	r7
   125be:	7833      	ldrb	r3, [r6, #0]
   125c0:	2808      	cmp	r0, #8
   125c2:	d061      	beq.n	12688 <AssemblePacket+0x364>
   125c4:	782a      	ldrb	r2, [r5, #0]
   125c6:	429a      	cmp	r2, r3
   125c8:	d2e7      	bcs.n	1259a <AssemblePacket+0x276>
   125ca:	3b01      	subs	r3, #1
   125cc:	7033      	strb	r3, [r6, #0]
   125ce:	e7e4      	b.n	1259a <AssemblePacket+0x276>
   125d0:	34ff      	adds	r4, #255	; 0xff
   125d2:	7820      	ldrb	r0, [r4, #0]
   125d4:	4b40      	ldr	r3, [pc, #256]	; (126d8 <AssemblePacket+0x3b4>)
   125d6:	4798      	blx	r3
   125d8:	231b      	movs	r3, #27
   125da:	aa06      	add	r2, sp, #24
   125dc:	189b      	adds	r3, r3, r2
   125de:	0019      	movs	r1, r3
   125e0:	4c3e      	ldr	r4, [pc, #248]	; (126dc <AssemblePacket+0x3b8>)
   125e2:	2013      	movs	r0, #19
   125e4:	47a0      	blx	r4
   125e6:	231b      	movs	r3, #27
   125e8:	aa06      	add	r2, sp, #24
   125ea:	189b      	adds	r3, r3, r2
   125ec:	0019      	movs	r1, r3
   125ee:	2014      	movs	r0, #20
   125f0:	47a0      	blx	r4
   125f2:	2113      	movs	r1, #19
   125f4:	0030      	movs	r0, r6
   125f6:	4c36      	ldr	r4, [pc, #216]	; (126d0 <AssemblePacket+0x3ac>)
   125f8:	47a0      	blx	r4
   125fa:	2210      	movs	r2, #16
   125fc:	786b      	ldrb	r3, [r5, #1]
   125fe:	210b      	movs	r1, #11
   12600:	4313      	orrs	r3, r2
   12602:	706b      	strb	r3, [r5, #1]
   12604:	2001      	movs	r0, #1
   12606:	47a0      	blx	r4
   12608:	e6f4      	b.n	123f4 <AssemblePacket+0xd0>
   1260a:	2210      	movs	r2, #16
   1260c:	3494      	adds	r4, #148	; 0x94
   1260e:	7823      	ldrb	r3, [r4, #0]
   12610:	4393      	bics	r3, r2
   12612:	7023      	strb	r3, [r4, #0]
   12614:	e6ee      	b.n	123f4 <AssemblePacket+0xd0>
   12616:	4b32      	ldr	r3, [pc, #200]	; (126e0 <AssemblePacket+0x3bc>)
   12618:	4798      	blx	r3
   1261a:	230f      	movs	r3, #15
   1261c:	4018      	ands	r0, r3
   1261e:	439c      	bics	r4, r3
   12620:	4304      	orrs	r4, r0
   12622:	e703      	b.n	1242c <AssemblePacket+0x108>
   12624:	9b08      	ldr	r3, [sp, #32]
   12626:	2b00      	cmp	r3, #0
   12628:	d000      	beq.n	1262c <AssemblePacket+0x308>
   1262a:	e71b      	b.n	12464 <AssemblePacket+0x140>
   1262c:	4d1a      	ldr	r5, [pc, #104]	; (12698 <AssemblePacket+0x374>)
   1262e:	002b      	movs	r3, r5
   12630:	33e0      	adds	r3, #224	; 0xe0
   12632:	781b      	ldrb	r3, [r3, #0]
   12634:	2b00      	cmp	r3, #0
   12636:	d100      	bne.n	1263a <AssemblePacket+0x316>
   12638:	e747      	b.n	124ca <AssemblePacket+0x1a6>
   1263a:	261e      	movs	r6, #30
   1263c:	ab06      	add	r3, sp, #24
   1263e:	18f6      	adds	r6, r6, r3
   12640:	2200      	movs	r2, #0
   12642:	0031      	movs	r1, r6
   12644:	4827      	ldr	r0, [pc, #156]	; (126e4 <AssemblePacket+0x3c0>)
   12646:	4b18      	ldr	r3, [pc, #96]	; (126a8 <AssemblePacket+0x384>)
   12648:	4798      	blx	r3
   1264a:	682b      	ldr	r3, [r5, #0]
   1264c:	7831      	ldrb	r1, [r6, #0]
   1264e:	0a18      	lsrs	r0, r3, #8
   12650:	792b      	ldrb	r3, [r5, #4]
   12652:	9703      	str	r7, [sp, #12]
   12654:	061b      	lsls	r3, r3, #24
   12656:	4303      	orrs	r3, r0
   12658:	9304      	str	r3, [sp, #16]
   1265a:	8823      	ldrh	r3, [r4, #0]
   1265c:	002a      	movs	r2, r5
   1265e:	9302      	str	r3, [sp, #8]
   12660:	2302      	movs	r3, #2
   12662:	9301      	str	r3, [sp, #4]
   12664:	4b16      	ldr	r3, [pc, #88]	; (126c0 <AssemblePacket+0x39c>)
   12666:	3288      	adds	r2, #136	; 0x88
   12668:	9300      	str	r3, [sp, #0]
   1266a:	6813      	ldr	r3, [r2, #0]
   1266c:	481d      	ldr	r0, [pc, #116]	; (126e4 <AssemblePacket+0x3c0>)
   1266e:	2200      	movs	r2, #0
   12670:	4d0f      	ldr	r5, [pc, #60]	; (126b0 <AssemblePacket+0x38c>)
   12672:	47a8      	blx	r5
   12674:	2800      	cmp	r0, #0
   12676:	d002      	beq.n	1267e <AssemblePacket+0x35a>
   12678:	2020      	movs	r0, #32
   1267a:	4b0e      	ldr	r3, [pc, #56]	; (126b4 <AssemblePacket+0x390>)
   1267c:	4798      	blx	r3
   1267e:	8823      	ldrh	r3, [r4, #0]
   12680:	8832      	ldrh	r2, [r6, #0]
   12682:	189b      	adds	r3, r3, r2
   12684:	8023      	strh	r3, [r4, #0]
   12686:	e720      	b.n	124ca <AssemblePacket+0x1a6>
   12688:	34e7      	adds	r4, #231	; 0xe7
   1268a:	e7c2      	b.n	12612 <AssemblePacket+0x2ee>
   1268c:	000161c9 	.word	0x000161c9
   12690:	200033b8 	.word	0x200033b8
   12694:	20001e9d 	.word	0x20001e9d
   12698:	20003170 	.word	0x20003170
   1269c:	000161b7 	.word	0x000161b7
   126a0:	20003257 	.word	0x20003257
   126a4:	200031f8 	.word	0x200031f8
   126a8:	0000f62d 	.word	0x0000f62d
   126ac:	200031a5 	.word	0x200031a5
   126b0:	00010741 	.word	0x00010741
   126b4:	00010801 	.word	0x00010801
   126b8:	0000f959 	.word	0x0000f959
   126bc:	00007161 	.word	0x00007161
   126c0:	20003195 	.word	0x20003195
   126c4:	0000c6dd 	.word	0x0000c6dd
   126c8:	20003259 	.word	0x20003259
   126cc:	0000c731 	.word	0x0000c731
   126d0:	00008d81 	.word	0x00008d81
   126d4:	0000c6f9 	.word	0x0000c6f9
   126d8:	0000c7bd 	.word	0x0000c7bd
   126dc:	00011da9 	.word	0x00011da9
   126e0:	0000f58d 	.word	0x0000f58d
   126e4:	20002f34 	.word	0x20002f34

000126e8 <LorawanClasscUlAckTimerCallback>:
   126e8:	2102      	movs	r1, #2
   126ea:	4b03      	ldr	r3, [pc, #12]	; (126f8 <LorawanClasscUlAckTimerCallback+0x10>)
   126ec:	3394      	adds	r3, #148	; 0x94
   126ee:	781a      	ldrb	r2, [r3, #0]
   126f0:	438a      	bics	r2, r1
   126f2:	701a      	strb	r2, [r3, #0]
   126f4:	4770      	bx	lr
   126f6:	46c0      	nop			; (mov r8, r8)
   126f8:	20003170 	.word	0x20003170

000126fc <LorawanClasscValidateSend>:
   126fc:	2388      	movs	r3, #136	; 0x88
   126fe:	b510      	push	{r4, lr}
   12700:	4c0a      	ldr	r4, [pc, #40]	; (1272c <LorawanClasscValidateSend+0x30>)
   12702:	009b      	lsls	r3, r3, #2
   12704:	5ce3      	ldrb	r3, [r4, r3]
   12706:	2b00      	cmp	r3, #0
   12708:	d008      	beq.n	1271c <LorawanClasscValidateSend+0x20>
   1270a:	220e      	movs	r2, #14
   1270c:	3484      	adds	r4, #132	; 0x84
   1270e:	7823      	ldrb	r3, [r4, #0]
   12710:	2008      	movs	r0, #8
   12712:	4013      	ands	r3, r2
   12714:	2b02      	cmp	r3, #2
   12716:	d100      	bne.n	1271a <LorawanClasscValidateSend+0x1e>
   12718:	2011      	movs	r0, #17
   1271a:	bd10      	pop	{r4, pc}
   1271c:	2394      	movs	r3, #148	; 0x94
   1271e:	005b      	lsls	r3, r3, #1
   12720:	5ce0      	ldrb	r0, [r4, r3]
   12722:	4b03      	ldr	r3, [pc, #12]	; (12730 <LorawanClasscValidateSend+0x34>)
   12724:	4798      	blx	r3
   12726:	2800      	cmp	r0, #0
   12728:	d1ef      	bne.n	1270a <LorawanClasscValidateSend+0xe>
   1272a:	e7f5      	b.n	12718 <LorawanClasscValidateSend+0x1c>
   1272c:	20003170 	.word	0x20003170
   12730:	0000cdbd 	.word	0x0000cdbd

00012734 <LorawanClasscRxDone>:
   12734:	221f      	movs	r2, #31
   12736:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12738:	7803      	ldrb	r3, [r0, #0]
   1273a:	4c1c      	ldr	r4, [pc, #112]	; (127ac <LorawanClasscRxDone+0x78>)
   1273c:	4393      	bics	r3, r2
   1273e:	2ba0      	cmp	r3, #160	; 0xa0
   12740:	d10c      	bne.n	1275c <LorawanClasscRxDone+0x28>
   12742:	2694      	movs	r6, #148	; 0x94
   12744:	0076      	lsls	r6, r6, #1
   12746:	5da0      	ldrb	r0, [r4, r6]
   12748:	4b19      	ldr	r3, [pc, #100]	; (127b0 <LorawanClasscRxDone+0x7c>)
   1274a:	4798      	blx	r3
   1274c:	1e05      	subs	r5, r0, #0
   1274e:	d019      	beq.n	12784 <LorawanClasscRxDone+0x50>
   12750:	0022      	movs	r2, r4
   12752:	2102      	movs	r1, #2
   12754:	3294      	adds	r2, #148	; 0x94
   12756:	7813      	ldrb	r3, [r2, #0]
   12758:	438b      	bics	r3, r1
   1275a:	7013      	strb	r3, [r2, #0]
   1275c:	0021      	movs	r1, r4
   1275e:	3184      	adds	r1, #132	; 0x84
   12760:	780b      	ldrb	r3, [r1, #0]
   12762:	220e      	movs	r2, #14
   12764:	0018      	movs	r0, r3
   12766:	4010      	ands	r0, r2
   12768:	2806      	cmp	r0, #6
   1276a:	d103      	bne.n	12774 <LorawanClasscRxDone+0x40>
   1276c:	4393      	bics	r3, r2
   1276e:	3a04      	subs	r2, #4
   12770:	4313      	orrs	r3, r2
   12772:	700b      	strb	r3, [r1, #0]
   12774:	2390      	movs	r3, #144	; 0x90
   12776:	2201      	movs	r2, #1
   12778:	009b      	lsls	r3, r3, #2
   1277a:	54e2      	strb	r2, [r4, r3]
   1277c:	2000      	movs	r0, #0
   1277e:	4b0d      	ldr	r3, [pc, #52]	; (127b4 <LorawanClasscRxDone+0x80>)
   12780:	4798      	blx	r3
   12782:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   12784:	4b0c      	ldr	r3, [pc, #48]	; (127b8 <LorawanClasscRxDone+0x84>)
   12786:	5da6      	ldrb	r6, [r4, r6]
   12788:	4798      	blx	r3
   1278a:	4b0c      	ldr	r3, [pc, #48]	; (127bc <LorawanClasscRxDone+0x88>)
   1278c:	490c      	ldr	r1, [pc, #48]	; (127c0 <LorawanClasscRxDone+0x8c>)
   1278e:	4798      	blx	r3
   12790:	23fa      	movs	r3, #250	; 0xfa
   12792:	009b      	lsls	r3, r3, #2
   12794:	18cb      	adds	r3, r1, r3
   12796:	21fa      	movs	r1, #250	; 0xfa
   12798:	0089      	lsls	r1, r1, #2
   1279a:	4359      	muls	r1, r3
   1279c:	9500      	str	r5, [sp, #0]
   1279e:	002a      	movs	r2, r5
   127a0:	4b08      	ldr	r3, [pc, #32]	; (127c4 <LorawanClasscRxDone+0x90>)
   127a2:	0030      	movs	r0, r6
   127a4:	4d08      	ldr	r5, [pc, #32]	; (127c8 <LorawanClasscRxDone+0x94>)
   127a6:	47a8      	blx	r5
   127a8:	e7d8      	b.n	1275c <LorawanClasscRxDone+0x28>
   127aa:	46c0      	nop			; (mov r8, r8)
   127ac:	20003170 	.word	0x20003170
   127b0:	0000cdbd 	.word	0x0000cdbd
   127b4:	00010c41 	.word	0x00010c41
   127b8:	000168fd 	.word	0x000168fd
   127bc:	00013235 	.word	0x00013235
   127c0:	000007d1 	.word	0x000007d1
   127c4:	000126e9 	.word	0x000126e9
   127c8:	0000cc25 	.word	0x0000cc25

000127cc <LorawanClasscRxTimeout>:
   127cc:	4a0c      	ldr	r2, [pc, #48]	; (12800 <LorawanClasscRxTimeout+0x34>)
   127ce:	b510      	push	{r4, lr}
   127d0:	0010      	movs	r0, r2
   127d2:	3084      	adds	r0, #132	; 0x84
   127d4:	7803      	ldrb	r3, [r0, #0]
   127d6:	240e      	movs	r4, #14
   127d8:	0019      	movs	r1, r3
   127da:	4021      	ands	r1, r4
   127dc:	2906      	cmp	r1, #6
   127de:	d107      	bne.n	127f0 <LorawanClasscRxTimeout+0x24>
   127e0:	2208      	movs	r2, #8
   127e2:	43a3      	bics	r3, r4
   127e4:	4313      	orrs	r3, r2
   127e6:	7003      	strb	r3, [r0, #0]
   127e8:	2000      	movs	r0, #0
   127ea:	4b06      	ldr	r3, [pc, #24]	; (12804 <LorawanClasscRxTimeout+0x38>)
   127ec:	4798      	blx	r3
   127ee:	e006      	b.n	127fe <LorawanClasscRxTimeout+0x32>
   127f0:	290a      	cmp	r1, #10
   127f2:	d1f9      	bne.n	127e8 <LorawanClasscRxTimeout+0x1c>
   127f4:	2388      	movs	r3, #136	; 0x88
   127f6:	009b      	lsls	r3, r3, #2
   127f8:	5cd3      	ldrb	r3, [r2, r3]
   127fa:	2b00      	cmp	r3, #0
   127fc:	d0f4      	beq.n	127e8 <LorawanClasscRxTimeout+0x1c>
   127fe:	bd10      	pop	{r4, pc}
   12800:	20003170 	.word	0x20003170
   12804:	00010c41 	.word	0x00010c41

00012808 <LorawanClasscNotifyAppOnReceive>:
   12808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1280a:	001f      	movs	r7, r3
   1280c:	2394      	movs	r3, #148	; 0x94
   1280e:	0016      	movs	r6, r2
   12810:	4a07      	ldr	r2, [pc, #28]	; (12830 <LorawanClasscNotifyAppOnReceive+0x28>)
   12812:	005b      	lsls	r3, r3, #1
   12814:	0004      	movs	r4, r0
   12816:	5cd0      	ldrb	r0, [r2, r3]
   12818:	4b06      	ldr	r3, [pc, #24]	; (12834 <LorawanClasscNotifyAppOnReceive+0x2c>)
   1281a:	000d      	movs	r5, r1
   1281c:	4798      	blx	r3
   1281e:	2800      	cmp	r0, #0
   12820:	d105      	bne.n	1282e <LorawanClasscNotifyAppOnReceive+0x26>
   12822:	0020      	movs	r0, r4
   12824:	003b      	movs	r3, r7
   12826:	0032      	movs	r2, r6
   12828:	0029      	movs	r1, r5
   1282a:	4c03      	ldr	r4, [pc, #12]	; (12838 <LorawanClasscNotifyAppOnReceive+0x30>)
   1282c:	47a0      	blx	r4
   1282e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12830:	20003170 	.word	0x20003170
   12834:	0000cdbd 	.word	0x0000cdbd
   12838:	00010865 	.word	0x00010865

0001283c <LorawanMcastEnable>:
   1283c:	0002      	movs	r2, r0
   1283e:	b510      	push	{r4, lr}
   12840:	200a      	movs	r0, #10
   12842:	2903      	cmp	r1, #3
   12844:	d822      	bhi.n	1288c <LorawanMcastEnable+0x50>
   12846:	4b1a      	ldr	r3, [pc, #104]	; (128b0 <LorawanMcastEnable+0x74>)
   12848:	2a00      	cmp	r2, #0
   1284a:	d020      	beq.n	1288e <LorawanMcastEnable+0x52>
   1284c:	223c      	movs	r2, #60	; 0x3c
   1284e:	434a      	muls	r2, r1
   12850:	189a      	adds	r2, r3, r2
   12852:	3259      	adds	r2, #89	; 0x59
   12854:	32ff      	adds	r2, #255	; 0xff
   12856:	7a12      	ldrb	r2, [r2, #8]
   12858:	0754      	lsls	r4, r2, #29
   1285a:	d512      	bpl.n	12882 <LorawanMcastEnable+0x46>
   1285c:	0794      	lsls	r4, r2, #30
   1285e:	d510      	bpl.n	12882 <LorawanMcastEnable+0x46>
   12860:	07d2      	lsls	r2, r2, #31
   12862:	0fd2      	lsrs	r2, r2, #31
   12864:	2a01      	cmp	r2, #1
   12866:	d10c      	bne.n	12882 <LorawanMcastEnable+0x46>
   12868:	001c      	movs	r4, r3
   1286a:	34fd      	adds	r4, #253	; 0xfd
   1286c:	7824      	ldrb	r4, [r4, #0]
   1286e:	0764      	lsls	r4, r4, #29
   12870:	d007      	beq.n	12882 <LorawanMcastEnable+0x46>
   12872:	202e      	movs	r0, #46	; 0x2e
   12874:	408a      	lsls	r2, r1
   12876:	30ff      	adds	r0, #255	; 0xff
   12878:	5c19      	ldrb	r1, [r3, r0]
   1287a:	430a      	orrs	r2, r1
   1287c:	541a      	strb	r2, [r3, r0]
   1287e:	3826      	subs	r0, #38	; 0x26
   12880:	38ff      	subs	r0, #255	; 0xff
   12882:	2196      	movs	r1, #150	; 0x96
   12884:	0049      	lsls	r1, r1, #1
   12886:	5c5a      	ldrb	r2, [r3, r1]
   12888:	3201      	adds	r2, #1
   1288a:	545a      	strb	r2, [r3, r1]
   1288c:	bd10      	pop	{r4, pc}
   1288e:	2201      	movs	r2, #1
   12890:	408a      	lsls	r2, r1
   12892:	202e      	movs	r0, #46	; 0x2e
   12894:	0011      	movs	r1, r2
   12896:	30ff      	adds	r0, #255	; 0xff
   12898:	5c1a      	ldrb	r2, [r3, r0]
   1289a:	438a      	bics	r2, r1
   1289c:	2196      	movs	r1, #150	; 0x96
   1289e:	541a      	strb	r2, [r3, r0]
   128a0:	0049      	lsls	r1, r1, #1
   128a2:	5c5a      	ldrb	r2, [r3, r1]
   128a4:	3826      	subs	r0, #38	; 0x26
   128a6:	3a01      	subs	r2, #1
   128a8:	545a      	strb	r2, [r3, r1]
   128aa:	38ff      	subs	r0, #255	; 0xff
   128ac:	e7ee      	b.n	1288c <LorawanMcastEnable+0x50>
   128ae:	46c0      	nop			; (mov r8, r8)
   128b0:	20003170 	.word	0x20003170

000128b4 <LorawanMcastValidateHdr>:
   128b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   128b6:	469c      	mov	ip, r3
   128b8:	2400      	movs	r4, #0
   128ba:	230a      	movs	r3, #10
   128bc:	4f18      	ldr	r7, [pc, #96]	; (12920 <LorawanMcastValidateHdr+0x6c>)
   128be:	b2e5      	uxtb	r5, r4
   128c0:	9501      	str	r5, [sp, #4]
   128c2:	252e      	movs	r5, #46	; 0x2e
   128c4:	35ff      	adds	r5, #255	; 0xff
   128c6:	5d7d      	ldrb	r5, [r7, r5]
   128c8:	2601      	movs	r6, #1
   128ca:	4125      	asrs	r5, r4
   128cc:	4235      	tst	r5, r6
   128ce:	d022      	beq.n	12916 <LorawanMcastValidateHdr+0x62>
   128d0:	7886      	ldrb	r6, [r0, #2]
   128d2:	7845      	ldrb	r5, [r0, #1]
   128d4:	0236      	lsls	r6, r6, #8
   128d6:	432e      	orrs	r6, r5
   128d8:	78c5      	ldrb	r5, [r0, #3]
   128da:	042d      	lsls	r5, r5, #16
   128dc:	432e      	orrs	r6, r5
   128de:	7905      	ldrb	r5, [r0, #4]
   128e0:	062d      	lsls	r5, r5, #24
   128e2:	4335      	orrs	r5, r6
   128e4:	263c      	movs	r6, #60	; 0x3c
   128e6:	4366      	muls	r6, r4
   128e8:	3631      	adds	r6, #49	; 0x31
   128ea:	36ff      	adds	r6, #255	; 0xff
   128ec:	59be      	ldr	r6, [r7, r6]
   128ee:	42b5      	cmp	r5, r6
   128f0:	d111      	bne.n	12916 <LorawanMcastValidateHdr+0x62>
   128f2:	4d0c      	ldr	r5, [pc, #48]	; (12924 <LorawanMcastValidateHdr+0x70>)
   128f4:	782e      	ldrb	r6, [r5, #0]
   128f6:	2506      	movs	r5, #6
   128f8:	422e      	tst	r6, r5
   128fa:	d00c      	beq.n	12916 <LorawanMcastValidateHdr+0x62>
   128fc:	2a00      	cmp	r2, #0
   128fe:	d00a      	beq.n	12916 <LorawanMcastValidateHdr+0x62>
   12900:	7946      	ldrb	r6, [r0, #5]
   12902:	3569      	adds	r5, #105	; 0x69
   12904:	422e      	tst	r6, r5
   12906:	d106      	bne.n	12916 <LorawanMcastValidateHdr+0x62>
   12908:	2903      	cmp	r1, #3
   1290a:	d104      	bne.n	12916 <LorawanMcastValidateHdr+0x62>
   1290c:	466d      	mov	r5, sp
   1290e:	4663      	mov	r3, ip
   12910:	792d      	ldrb	r5, [r5, #4]
   12912:	701d      	strb	r5, [r3, #0]
   12914:	2308      	movs	r3, #8
   12916:	3401      	adds	r4, #1
   12918:	2c04      	cmp	r4, #4
   1291a:	d1d0      	bne.n	128be <LorawanMcastValidateHdr+0xa>
   1291c:	0018      	movs	r0, r3
   1291e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   12920:	20003170 	.word	0x20003170
   12924:	2000326d 	.word	0x2000326d

00012928 <LorawanMcastProcessPkt>:
   12928:	b5f0      	push	{r4, r5, r6, r7, lr}
   1292a:	0015      	movs	r5, r2
   1292c:	223c      	movs	r2, #60	; 0x3c
   1292e:	435a      	muls	r2, r3
   12930:	b089      	sub	sp, #36	; 0x24
   12932:	9107      	str	r1, [sp, #28]
   12934:	493f      	ldr	r1, [pc, #252]	; (12a34 <LorawanMcastProcessPkt+0x10c>)
   12936:	9006      	str	r0, [sp, #24]
   12938:	1889      	adds	r1, r1, r2
   1293a:	31fc      	adds	r1, #252	; 0xfc
   1293c:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
   1293e:	6e08      	ldr	r0, [r1, #96]	; 0x60
   12940:	6d8a      	ldr	r2, [r1, #88]	; 0x58
   12942:	4284      	cmp	r4, r0
   12944:	d224      	bcs.n	12990 <LorawanMcastProcessPkt+0x68>
   12946:	2100      	movs	r1, #0
   12948:	4294      	cmp	r4, r2
   1294a:	d802      	bhi.n	12952 <LorawanMcastProcessPkt+0x2a>
   1294c:	4282      	cmp	r2, r0
   1294e:	4192      	sbcs	r2, r2
   12950:	4251      	negs	r1, r2
   12952:	270a      	movs	r7, #10
   12954:	2900      	cmp	r1, #0
   12956:	d11d      	bne.n	12994 <LorawanMcastProcessPkt+0x6c>
   12958:	4a36      	ldr	r2, [pc, #216]	; (12a34 <LorawanMcastProcessPkt+0x10c>)
   1295a:	210e      	movs	r1, #14
   1295c:	0010      	movs	r0, r2
   1295e:	3084      	adds	r0, #132	; 0x84
   12960:	7803      	ldrb	r3, [r0, #0]
   12962:	001c      	movs	r4, r3
   12964:	400c      	ands	r4, r1
   12966:	2c06      	cmp	r4, #6
   12968:	d108      	bne.n	1297c <LorawanMcastProcessPkt+0x54>
   1296a:	0014      	movs	r4, r2
   1296c:	34fd      	adds	r4, #253	; 0xfd
   1296e:	7824      	ldrb	r4, [r4, #0]
   12970:	2c04      	cmp	r4, #4
   12972:	d103      	bne.n	1297c <LorawanMcastProcessPkt+0x54>
   12974:	438b      	bics	r3, r1
   12976:	3904      	subs	r1, #4
   12978:	430b      	orrs	r3, r1
   1297a:	7003      	strb	r3, [r0, #0]
   1297c:	2390      	movs	r3, #144	; 0x90
   1297e:	2101      	movs	r1, #1
   12980:	009b      	lsls	r3, r3, #2
   12982:	54d1      	strb	r1, [r2, r3]
   12984:	2000      	movs	r0, #0
   12986:	4b2c      	ldr	r3, [pc, #176]	; (12a38 <LorawanMcastProcessPkt+0x110>)
   12988:	4798      	blx	r3
   1298a:	0038      	movs	r0, r7
   1298c:	b009      	add	sp, #36	; 0x24
   1298e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12990:	4294      	cmp	r4, r2
   12992:	d8db      	bhi.n	1294c <LorawanMcastProcessPkt+0x24>
   12994:	243c      	movs	r4, #60	; 0x3c
   12996:	435c      	muls	r4, r3
   12998:	4e26      	ldr	r6, [pc, #152]	; (12a34 <LorawanMcastProcessPkt+0x10c>)
   1299a:	79ea      	ldrb	r2, [r5, #7]
   1299c:	1937      	adds	r7, r6, r4
   1299e:	003b      	movs	r3, r7
   129a0:	79a9      	ldrb	r1, [r5, #6]
   129a2:	0212      	lsls	r2, r2, #8
   129a4:	3355      	adds	r3, #85	; 0x55
   129a6:	430a      	orrs	r2, r1
   129a8:	33ff      	adds	r3, #255	; 0xff
   129aa:	801a      	strh	r2, [r3, #0]
   129ac:	2105      	movs	r1, #5
   129ae:	4b23      	ldr	r3, [pc, #140]	; (12a3c <LorawanMcastProcessPkt+0x114>)
   129b0:	37fc      	adds	r7, #252	; 0xfc
   129b2:	2000      	movs	r0, #0
   129b4:	4798      	blx	r3
   129b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   129b8:	3445      	adds	r4, #69	; 0x45
   129ba:	9304      	str	r3, [sp, #16]
   129bc:	4b20      	ldr	r3, [pc, #128]	; (12a40 <LorawanMcastProcessPkt+0x118>)
   129be:	9907      	ldr	r1, [sp, #28]
   129c0:	9303      	str	r3, [sp, #12]
   129c2:	2319      	movs	r3, #25
   129c4:	34ff      	adds	r4, #255	; 0xff
   129c6:	9302      	str	r3, [sp, #8]
   129c8:	19a4      	adds	r4, r4, r6
   129ca:	3b16      	subs	r3, #22
   129cc:	9806      	ldr	r0, [sp, #24]
   129ce:	9400      	str	r4, [sp, #0]
   129d0:	390d      	subs	r1, #13
   129d2:	9301      	str	r3, [sp, #4]
   129d4:	b2c9      	uxtb	r1, r1
   129d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   129d8:	2201      	movs	r2, #1
   129da:	3009      	adds	r0, #9
   129dc:	4c19      	ldr	r4, [pc, #100]	; (12a44 <LorawanMcastProcessPkt+0x11c>)
   129de:	47a0      	blx	r4
   129e0:	2800      	cmp	r0, #0
   129e2:	d002      	beq.n	129ea <LorawanMcastProcessPkt+0xc2>
   129e4:	201f      	movs	r0, #31
   129e6:	4b18      	ldr	r3, [pc, #96]	; (12a48 <LorawanMcastProcessPkt+0x120>)
   129e8:	4798      	blx	r3
   129ea:	4918      	ldr	r1, [pc, #96]	; (12a4c <LorawanMcastProcessPkt+0x124>)
   129ec:	2708      	movs	r7, #8
   129ee:	784a      	ldrb	r2, [r1, #1]
   129f0:	780b      	ldrb	r3, [r1, #0]
   129f2:	0212      	lsls	r2, r2, #8
   129f4:	431a      	orrs	r2, r3
   129f6:	788b      	ldrb	r3, [r1, #2]
   129f8:	041b      	lsls	r3, r3, #16
   129fa:	431a      	orrs	r2, r3
   129fc:	78cb      	ldrb	r3, [r1, #3]
   129fe:	061b      	lsls	r3, r3, #24
   12a00:	4313      	orrs	r3, r2
   12a02:	d0a9      	beq.n	12958 <LorawanMcastProcessPkt+0x30>
   12a04:	2220      	movs	r2, #32
   12a06:	3694      	adds	r6, #148	; 0x94
   12a08:	7833      	ldrb	r3, [r6, #0]
   12a0a:	9906      	ldr	r1, [sp, #24]
   12a0c:	4393      	bics	r3, r2
   12a0e:	7033      	strb	r3, [r6, #0]
   12a10:	78ab      	ldrb	r3, [r5, #2]
   12a12:	7868      	ldrb	r0, [r5, #1]
   12a14:	40bb      	lsls	r3, r7
   12a16:	4303      	orrs	r3, r0
   12a18:	78e8      	ldrb	r0, [r5, #3]
   12a1a:	9a07      	ldr	r2, [sp, #28]
   12a1c:	0400      	lsls	r0, r0, #16
   12a1e:	4303      	orrs	r3, r0
   12a20:	7928      	ldrb	r0, [r5, #4]
   12a22:	3a0c      	subs	r2, #12
   12a24:	0600      	lsls	r0, r0, #24
   12a26:	4318      	orrs	r0, r3
   12a28:	b2d2      	uxtb	r2, r2
   12a2a:	19c9      	adds	r1, r1, r7
   12a2c:	003b      	movs	r3, r7
   12a2e:	4c08      	ldr	r4, [pc, #32]	; (12a50 <LorawanMcastProcessPkt+0x128>)
   12a30:	47a0      	blx	r4
   12a32:	e791      	b.n	12958 <LorawanMcastProcessPkt+0x30>
   12a34:	20003170 	.word	0x20003170
   12a38:	00010c41 	.word	0x00010c41
   12a3c:	00008d81 	.word	0x00008d81
   12a40:	20002f34 	.word	0x20002f34
   12a44:	00010741 	.word	0x00010741
   12a48:	00010801 	.word	0x00010801
   12a4c:	200034cc 	.word	0x200034cc
   12a50:	00010865 	.word	0x00010865

00012a54 <LorawanAddMcastAddr>:
   12a54:	b570      	push	{r4, r5, r6, lr}
   12a56:	260a      	movs	r6, #10
   12a58:	2903      	cmp	r1, #3
   12a5a:	d818      	bhi.n	12a8e <LorawanAddMcastAddr+0x3a>
   12a5c:	4b0d      	ldr	r3, [pc, #52]	; (12a94 <LorawanAddMcastAddr+0x40>)
   12a5e:	681a      	ldr	r2, [r3, #0]
   12a60:	0a15      	lsrs	r5, r2, #8
   12a62:	791a      	ldrb	r2, [r3, #4]
   12a64:	0612      	lsls	r2, r2, #24
   12a66:	432a      	orrs	r2, r5
   12a68:	4282      	cmp	r2, r0
   12a6a:	d010      	beq.n	12a8e <LorawanAddMcastAddr+0x3a>
   12a6c:	243c      	movs	r4, #60	; 0x3c
   12a6e:	434c      	muls	r4, r1
   12a70:	191c      	adds	r4, r3, r4
   12a72:	0023      	movs	r3, r4
   12a74:	33fc      	adds	r3, #252	; 0xfc
   12a76:	6358      	str	r0, [r3, #52]	; 0x34
   12a78:	2106      	movs	r1, #6
   12a7a:	2000      	movs	r0, #0
   12a7c:	4b06      	ldr	r3, [pc, #24]	; (12a98 <LorawanAddMcastAddr+0x44>)
   12a7e:	4798      	blx	r3
   12a80:	2201      	movs	r2, #1
   12a82:	3459      	adds	r4, #89	; 0x59
   12a84:	34ff      	adds	r4, #255	; 0xff
   12a86:	7a21      	ldrb	r1, [r4, #8]
   12a88:	3e02      	subs	r6, #2
   12a8a:	430a      	orrs	r2, r1
   12a8c:	7222      	strb	r2, [r4, #8]
   12a8e:	0030      	movs	r0, r6
   12a90:	bd70      	pop	{r4, r5, r6, pc}
   12a92:	46c0      	nop			; (mov r8, r8)
   12a94:	20003170 	.word	0x20003170
   12a98:	00008d81 	.word	0x00008d81

00012a9c <LorawanAddMcastAppskey>:
   12a9c:	b570      	push	{r4, r5, r6, lr}
   12a9e:	0006      	movs	r6, r0
   12aa0:	200a      	movs	r0, #10
   12aa2:	2903      	cmp	r1, #3
   12aa4:	d818      	bhi.n	12ad8 <LorawanAddMcastAppskey+0x3c>
   12aa6:	2e00      	cmp	r6, #0
   12aa8:	d016      	beq.n	12ad8 <LorawanAddMcastAppskey+0x3c>
   12aaa:	253c      	movs	r5, #60	; 0x3c
   12aac:	434d      	muls	r5, r1
   12aae:	0028      	movs	r0, r5
   12ab0:	4c0a      	ldr	r4, [pc, #40]	; (12adc <LorawanAddMcastAppskey+0x40>)
   12ab2:	3045      	adds	r0, #69	; 0x45
   12ab4:	30ff      	adds	r0, #255	; 0xff
   12ab6:	2210      	movs	r2, #16
   12ab8:	1900      	adds	r0, r0, r4
   12aba:	0031      	movs	r1, r6
   12abc:	4b08      	ldr	r3, [pc, #32]	; (12ae0 <LorawanAddMcastAppskey+0x44>)
   12abe:	4798      	blx	r3
   12ac0:	4b08      	ldr	r3, [pc, #32]	; (12ae4 <LorawanAddMcastAppskey+0x48>)
   12ac2:	2107      	movs	r1, #7
   12ac4:	2000      	movs	r0, #0
   12ac6:	4798      	blx	r3
   12ac8:	2304      	movs	r3, #4
   12aca:	2008      	movs	r0, #8
   12acc:	1964      	adds	r4, r4, r5
   12ace:	3459      	adds	r4, #89	; 0x59
   12ad0:	34ff      	adds	r4, #255	; 0xff
   12ad2:	7a22      	ldrb	r2, [r4, #8]
   12ad4:	4313      	orrs	r3, r2
   12ad6:	7223      	strb	r3, [r4, #8]
   12ad8:	bd70      	pop	{r4, r5, r6, pc}
   12ada:	46c0      	nop			; (mov r8, r8)
   12adc:	20003170 	.word	0x20003170
   12ae0:	000161b7 	.word	0x000161b7
   12ae4:	00008d81 	.word	0x00008d81

00012ae8 <LorawanAddMcastNwkskey>:
   12ae8:	b570      	push	{r4, r5, r6, lr}
   12aea:	0006      	movs	r6, r0
   12aec:	200a      	movs	r0, #10
   12aee:	2903      	cmp	r1, #3
   12af0:	d818      	bhi.n	12b24 <LorawanAddMcastNwkskey+0x3c>
   12af2:	2e00      	cmp	r6, #0
   12af4:	d016      	beq.n	12b24 <LorawanAddMcastNwkskey+0x3c>
   12af6:	253c      	movs	r5, #60	; 0x3c
   12af8:	434d      	muls	r5, r1
   12afa:	0028      	movs	r0, r5
   12afc:	4c0a      	ldr	r4, [pc, #40]	; (12b28 <LorawanAddMcastNwkskey+0x40>)
   12afe:	3035      	adds	r0, #53	; 0x35
   12b00:	30ff      	adds	r0, #255	; 0xff
   12b02:	2210      	movs	r2, #16
   12b04:	1900      	adds	r0, r0, r4
   12b06:	0031      	movs	r1, r6
   12b08:	4b08      	ldr	r3, [pc, #32]	; (12b2c <LorawanAddMcastNwkskey+0x44>)
   12b0a:	4798      	blx	r3
   12b0c:	4b08      	ldr	r3, [pc, #32]	; (12b30 <LorawanAddMcastNwkskey+0x48>)
   12b0e:	2108      	movs	r1, #8
   12b10:	2000      	movs	r0, #0
   12b12:	4798      	blx	r3
   12b14:	2302      	movs	r3, #2
   12b16:	2008      	movs	r0, #8
   12b18:	1964      	adds	r4, r4, r5
   12b1a:	3459      	adds	r4, #89	; 0x59
   12b1c:	34ff      	adds	r4, #255	; 0xff
   12b1e:	7a22      	ldrb	r2, [r4, #8]
   12b20:	4313      	orrs	r3, r2
   12b22:	7223      	strb	r3, [r4, #8]
   12b24:	bd70      	pop	{r4, r5, r6, pc}
   12b26:	46c0      	nop			; (mov r8, r8)
   12b28:	20003170 	.word	0x20003170
   12b2c:	000161b7 	.word	0x000161b7
   12b30:	00008d81 	.word	0x00008d81

00012b34 <LorawanAddMcastFcntMin>:
   12b34:	220a      	movs	r2, #10
   12b36:	2903      	cmp	r1, #3
   12b38:	d807      	bhi.n	12b4a <LorawanAddMcastFcntMin+0x16>
   12b3a:	233c      	movs	r3, #60	; 0x3c
   12b3c:	434b      	muls	r3, r1
   12b3e:	4904      	ldr	r1, [pc, #16]	; (12b50 <LorawanAddMcastFcntMin+0x1c>)
   12b40:	3a02      	subs	r2, #2
   12b42:	18c9      	adds	r1, r1, r3
   12b44:	31fc      	adds	r1, #252	; 0xfc
   12b46:	65c8      	str	r0, [r1, #92]	; 0x5c
   12b48:	6588      	str	r0, [r1, #88]	; 0x58
   12b4a:	0010      	movs	r0, r2
   12b4c:	4770      	bx	lr
   12b4e:	46c0      	nop			; (mov r8, r8)
   12b50:	20003170 	.word	0x20003170

00012b54 <LorawanAddMcastFcntMax>:
   12b54:	220a      	movs	r2, #10
   12b56:	2903      	cmp	r1, #3
   12b58:	d806      	bhi.n	12b68 <LorawanAddMcastFcntMax+0x14>
   12b5a:	233c      	movs	r3, #60	; 0x3c
   12b5c:	434b      	muls	r3, r1
   12b5e:	4903      	ldr	r1, [pc, #12]	; (12b6c <LorawanAddMcastFcntMax+0x18>)
   12b60:	3a02      	subs	r2, #2
   12b62:	18c9      	adds	r1, r1, r3
   12b64:	31fc      	adds	r1, #252	; 0xfc
   12b66:	6608      	str	r0, [r1, #96]	; 0x60
   12b68:	0010      	movs	r0, r2
   12b6a:	4770      	bx	lr
   12b6c:	20003170 	.word	0x20003170

00012b70 <LorawanAddMcastDlFrequency>:
   12b70:	b513      	push	{r0, r1, r4, lr}
   12b72:	000c      	movs	r4, r1
   12b74:	9001      	str	r0, [sp, #4]
   12b76:	2903      	cmp	r1, #3
   12b78:	d901      	bls.n	12b7e <LorawanAddMcastDlFrequency+0xe>
   12b7a:	200a      	movs	r0, #10
   12b7c:	bd16      	pop	{r1, r2, r4, pc}
   12b7e:	a901      	add	r1, sp, #4
   12b80:	2001      	movs	r0, #1
   12b82:	4b0a      	ldr	r3, [pc, #40]	; (12bac <LorawanAddMcastDlFrequency+0x3c>)
   12b84:	4798      	blx	r3
   12b86:	2808      	cmp	r0, #8
   12b88:	d1f7      	bne.n	12b7a <LorawanAddMcastDlFrequency+0xa>
   12b8a:	213c      	movs	r1, #60	; 0x3c
   12b8c:	4361      	muls	r1, r4
   12b8e:	4b08      	ldr	r3, [pc, #32]	; (12bb0 <LorawanAddMcastDlFrequency+0x40>)
   12b90:	9a01      	ldr	r2, [sp, #4]
   12b92:	1859      	adds	r1, r3, r1
   12b94:	31fc      	adds	r1, #252	; 0xfc
   12b96:	336f      	adds	r3, #111	; 0x6f
   12b98:	668a      	str	r2, [r1, #104]	; 0x68
   12b9a:	0a11      	lsrs	r1, r2, #8
   12b9c:	701a      	strb	r2, [r3, #0]
   12b9e:	7059      	strb	r1, [r3, #1]
   12ba0:	0c11      	lsrs	r1, r2, #16
   12ba2:	0e12      	lsrs	r2, r2, #24
   12ba4:	7099      	strb	r1, [r3, #2]
   12ba6:	70da      	strb	r2, [r3, #3]
   12ba8:	e7e8      	b.n	12b7c <LorawanAddMcastDlFrequency+0xc>
   12baa:	46c0      	nop			; (mov r8, r8)
   12bac:	0000c6f9 	.word	0x0000c6f9
   12bb0:	20003170 	.word	0x20003170

00012bb4 <LorawanAddMcastDatarate>:
   12bb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12bb6:	466b      	mov	r3, sp
   12bb8:	1ddd      	adds	r5, r3, #7
   12bba:	000c      	movs	r4, r1
   12bbc:	7028      	strb	r0, [r5, #0]
   12bbe:	2903      	cmp	r1, #3
   12bc0:	d901      	bls.n	12bc6 <LorawanAddMcastDatarate+0x12>
   12bc2:	200a      	movs	r0, #10
   12bc4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   12bc6:	0029      	movs	r1, r5
   12bc8:	200f      	movs	r0, #15
   12bca:	4b07      	ldr	r3, [pc, #28]	; (12be8 <LorawanAddMcastDatarate+0x34>)
   12bcc:	4798      	blx	r3
   12bce:	2808      	cmp	r0, #8
   12bd0:	d1f7      	bne.n	12bc2 <LorawanAddMcastDatarate+0xe>
   12bd2:	213c      	movs	r1, #60	; 0x3c
   12bd4:	4361      	muls	r1, r4
   12bd6:	4b05      	ldr	r3, [pc, #20]	; (12bec <LorawanAddMcastDatarate+0x38>)
   12bd8:	782a      	ldrb	r2, [r5, #0]
   12bda:	1859      	adds	r1, r3, r1
   12bdc:	3169      	adds	r1, #105	; 0x69
   12bde:	31ff      	adds	r1, #255	; 0xff
   12be0:	3373      	adds	r3, #115	; 0x73
   12be2:	700a      	strb	r2, [r1, #0]
   12be4:	701a      	strb	r2, [r3, #0]
   12be6:	e7ed      	b.n	12bc4 <LorawanAddMcastDatarate+0x10>
   12be8:	0000c6f9 	.word	0x0000c6f9
   12bec:	20003170 	.word	0x20003170

00012bf0 <LorawanAddMcastPeriodicity>:
   12bf0:	220a      	movs	r2, #10
   12bf2:	2903      	cmp	r1, #3
   12bf4:	d809      	bhi.n	12c0a <LorawanAddMcastPeriodicity+0x1a>
   12bf6:	2807      	cmp	r0, #7
   12bf8:	d807      	bhi.n	12c0a <LorawanAddMcastPeriodicity+0x1a>
   12bfa:	233c      	movs	r3, #60	; 0x3c
   12bfc:	434b      	muls	r3, r1
   12bfe:	4904      	ldr	r1, [pc, #16]	; (12c10 <LorawanAddMcastPeriodicity+0x20>)
   12c00:	3a02      	subs	r2, #2
   12c02:	18c9      	adds	r1, r1, r3
   12c04:	316a      	adds	r1, #106	; 0x6a
   12c06:	31ff      	adds	r1, #255	; 0xff
   12c08:	7008      	strb	r0, [r1, #0]
   12c0a:	0010      	movs	r0, r2
   12c0c:	4770      	bx	lr
   12c0e:	46c0      	nop			; (mov r8, r8)
   12c10:	20003170 	.word	0x20003170

00012c14 <Radio_LBTScanTimeout>:
   12c14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   12c16:	4c1c      	ldr	r4, [pc, #112]	; (12c88 <Radio_LBTScanTimeout+0x74>)
   12c18:	0025      	movs	r5, r4
   12c1a:	0023      	movs	r3, r4
   12c1c:	354f      	adds	r5, #79	; 0x4f
   12c1e:	7829      	ldrb	r1, [r5, #0]
   12c20:	3340      	adds	r3, #64	; 0x40
   12c22:	3101      	adds	r1, #1
   12c24:	b2c9      	uxtb	r1, r1
   12c26:	7029      	strb	r1, [r5, #0]
   12c28:	781b      	ldrb	r3, [r3, #0]
   12c2a:	428b      	cmp	r3, r1
   12c2c:	d315      	bcc.n	12c5a <Radio_LBTScanTimeout+0x46>
   12c2e:	260e      	movs	r6, #14
   12c30:	446e      	add	r6, sp
   12c32:	4b16      	ldr	r3, [pc, #88]	; (12c8c <Radio_LBTScanTimeout+0x78>)
   12c34:	0030      	movs	r0, r6
   12c36:	4798      	blx	r3
   12c38:	2300      	movs	r3, #0
   12c3a:	5ef2      	ldrsh	r2, [r6, r3]
   12c3c:	782b      	ldrb	r3, [r5, #0]
   12c3e:	4353      	muls	r3, r2
   12c40:	6c62      	ldr	r2, [r4, #68]	; 0x44
   12c42:	189b      	adds	r3, r3, r2
   12c44:	6463      	str	r3, [r4, #68]	; 0x44
   12c46:	0023      	movs	r3, r4
   12c48:	2200      	movs	r2, #0
   12c4a:	3350      	adds	r3, #80	; 0x50
   12c4c:	7818      	ldrb	r0, [r3, #0]
   12c4e:	9200      	str	r2, [sp, #0]
   12c50:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   12c52:	4b0f      	ldr	r3, [pc, #60]	; (12c90 <Radio_LBTScanTimeout+0x7c>)
   12c54:	4c0f      	ldr	r4, [pc, #60]	; (12c94 <Radio_LBTScanTimeout+0x80>)
   12c56:	47a0      	blx	r4
   12c58:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
   12c5a:	2380      	movs	r3, #128	; 0x80
   12c5c:	4a0e      	ldr	r2, [pc, #56]	; (12c98 <Radio_LBTScanTimeout+0x84>)
   12c5e:	009b      	lsls	r3, r3, #2
   12c60:	8810      	ldrh	r0, [r2, #0]
   12c62:	4303      	orrs	r3, r0
   12c64:	8013      	strh	r3, [r2, #0]
   12c66:	6c63      	ldr	r3, [r4, #68]	; 0x44
   12c68:	0058      	lsls	r0, r3, #1
   12c6a:	1e4b      	subs	r3, r1, #1
   12c6c:	4359      	muls	r1, r3
   12c6e:	4b0b      	ldr	r3, [pc, #44]	; (12c9c <Radio_LBTScanTimeout+0x88>)
   12c70:	b289      	uxth	r1, r1
   12c72:	4798      	blx	r3
   12c74:	0023      	movs	r3, r4
   12c76:	334c      	adds	r3, #76	; 0x4c
   12c78:	8018      	strh	r0, [r3, #0]
   12c7a:	2300      	movs	r3, #0
   12c7c:	2001      	movs	r0, #1
   12c7e:	702b      	strb	r3, [r5, #0]
   12c80:	6463      	str	r3, [r4, #68]	; 0x44
   12c82:	4b07      	ldr	r3, [pc, #28]	; (12ca0 <Radio_LBTScanTimeout+0x8c>)
   12c84:	4798      	blx	r3
   12c86:	e7e7      	b.n	12c58 <Radio_LBTScanTimeout+0x44>
   12c88:	20002d78 	.word	0x20002d78
   12c8c:	0000d47d 	.word	0x0000d47d
   12c90:	00012c15 	.word	0x00012c15
   12c94:	0000cc25 	.word	0x0000cc25
   12c98:	20003044 	.word	0x20003044
   12c9c:	00013069 	.word	0x00013069
   12ca0:	0000e581 	.word	0x0000e581

00012ca4 <RADIO_ScanHandler>:
   12ca4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12ca6:	4b12      	ldr	r3, [pc, #72]	; (12cf0 <RADIO_ScanHandler+0x4c>)
   12ca8:	4798      	blx	r3
   12caa:	2000      	movs	r0, #0
   12cac:	4b11      	ldr	r3, [pc, #68]	; (12cf4 <RADIO_ScanHandler+0x50>)
   12cae:	4798      	blx	r3
   12cb0:	4d11      	ldr	r5, [pc, #68]	; (12cf8 <RADIO_ScanHandler+0x54>)
   12cb2:	4b12      	ldr	r3, [pc, #72]	; (12cfc <RADIO_ScanHandler+0x58>)
   12cb4:	6828      	ldr	r0, [r5, #0]
   12cb6:	2400      	movs	r4, #0
   12cb8:	4798      	blx	r3
   12cba:	002b      	movs	r3, r5
   12cbc:	4e10      	ldr	r6, [pc, #64]	; (12d00 <RADIO_ScanHandler+0x5c>)
   12cbe:	334c      	adds	r3, #76	; 0x4c
   12cc0:	2201      	movs	r2, #1
   12cc2:	0021      	movs	r1, r4
   12cc4:	0020      	movs	r0, r4
   12cc6:	801c      	strh	r4, [r3, #0]
   12cc8:	47b0      	blx	r6
   12cca:	4b0e      	ldr	r3, [pc, #56]	; (12d04 <RADIO_ScanHandler+0x60>)
   12ccc:	2109      	movs	r1, #9
   12cce:	2012      	movs	r0, #18
   12cd0:	4798      	blx	r3
   12cd2:	3550      	adds	r5, #80	; 0x50
   12cd4:	0022      	movs	r2, r4
   12cd6:	0021      	movs	r1, r4
   12cd8:	2005      	movs	r0, #5
   12cda:	47b0      	blx	r6
   12cdc:	7828      	ldrb	r0, [r5, #0]
   12cde:	4b0a      	ldr	r3, [pc, #40]	; (12d08 <RADIO_ScanHandler+0x64>)
   12ce0:	4d0a      	ldr	r5, [pc, #40]	; (12d0c <RADIO_ScanHandler+0x68>)
   12ce2:	9400      	str	r4, [sp, #0]
   12ce4:	0022      	movs	r2, r4
   12ce6:	490a      	ldr	r1, [pc, #40]	; (12d10 <RADIO_ScanHandler+0x6c>)
   12ce8:	47a8      	blx	r5
   12cea:	0020      	movs	r0, r4
   12cec:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   12cee:	46c0      	nop			; (mov r8, r8)
   12cf0:	0000ebf1 	.word	0x0000ebf1
   12cf4:	0000e835 	.word	0x0000e835
   12cf8:	20002d78 	.word	0x20002d78
   12cfc:	0000df79 	.word	0x0000df79
   12d00:	0000d261 	.word	0x0000d261
   12d04:	0000c039 	.word	0x0000c039
   12d08:	00012c15 	.word	0x00012c15
   12d0c:	0000cc25 	.word	0x0000cc25
   12d10:	00002328 	.word	0x00002328

00012d14 <radioScanDoneHandler>:
   12d14:	b530      	push	{r4, r5, lr}
   12d16:	4a18      	ldr	r2, [pc, #96]	; (12d78 <radioScanDoneHandler+0x64>)
   12d18:	4918      	ldr	r1, [pc, #96]	; (12d7c <radioScanDoneHandler+0x68>)
   12d1a:	8813      	ldrh	r3, [r2, #0]
   12d1c:	b085      	sub	sp, #20
   12d1e:	400b      	ands	r3, r1
   12d20:	8013      	strh	r3, [r2, #0]
   12d22:	2200      	movs	r2, #0
   12d24:	4b16      	ldr	r3, [pc, #88]	; (12d80 <radioScanDoneHandler+0x6c>)
   12d26:	0011      	movs	r1, r2
   12d28:	0010      	movs	r0, r2
   12d2a:	4798      	blx	r3
   12d2c:	2000      	movs	r0, #0
   12d2e:	4b15      	ldr	r3, [pc, #84]	; (12d84 <radioScanDoneHandler+0x70>)
   12d30:	4798      	blx	r3
   12d32:	4b15      	ldr	r3, [pc, #84]	; (12d88 <radioScanDoneHandler+0x74>)
   12d34:	4798      	blx	r3
   12d36:	4c15      	ldr	r4, [pc, #84]	; (12d8c <radioScanDoneHandler+0x78>)
   12d38:	0023      	movs	r3, r4
   12d3a:	334c      	adds	r3, #76	; 0x4c
   12d3c:	2100      	movs	r1, #0
   12d3e:	5e59      	ldrsh	r1, [r3, r1]
   12d40:	233e      	movs	r3, #62	; 0x3e
   12d42:	5ee2      	ldrsh	r2, [r4, r3]
   12d44:	4b12      	ldr	r3, [pc, #72]	; (12d90 <radioScanDoneHandler+0x7c>)
   12d46:	4291      	cmp	r1, r2
   12d48:	da06      	bge.n	12d58 <radioScanDoneHandler+0x44>
   12d4a:	2002      	movs	r0, #2
   12d4c:	4798      	blx	r3
   12d4e:	4b11      	ldr	r3, [pc, #68]	; (12d94 <radioScanDoneHandler+0x80>)
   12d50:	4798      	blx	r3
   12d52:	2000      	movs	r0, #0
   12d54:	b005      	add	sp, #20
   12d56:	bd30      	pop	{r4, r5, pc}
   12d58:	2207      	movs	r2, #7
   12d5a:	ad01      	add	r5, sp, #4
   12d5c:	2001      	movs	r0, #1
   12d5e:	702a      	strb	r2, [r5, #0]
   12d60:	4798      	blx	r3
   12d62:	4b0d      	ldr	r3, [pc, #52]	; (12d98 <radioScanDoneHandler+0x84>)
   12d64:	781b      	ldrb	r3, [r3, #0]
   12d66:	079b      	lsls	r3, r3, #30
   12d68:	d5f3      	bpl.n	12d52 <radioScanDoneHandler+0x3e>
   12d6a:	6923      	ldr	r3, [r4, #16]
   12d6c:	2b00      	cmp	r3, #0
   12d6e:	d0f0      	beq.n	12d52 <radioScanDoneHandler+0x3e>
   12d70:	0029      	movs	r1, r5
   12d72:	2002      	movs	r0, #2
   12d74:	4798      	blx	r3
   12d76:	e7ec      	b.n	12d52 <radioScanDoneHandler+0x3e>
   12d78:	20003044 	.word	0x20003044
   12d7c:	fffffdff 	.word	0xfffffdff
   12d80:	0000d261 	.word	0x0000d261
   12d84:	0000e869 	.word	0x0000e869
   12d88:	0000ed21 	.word	0x0000ed21
   12d8c:	20002d78 	.word	0x20002d78
   12d90:	0000e62d 	.word	0x0000e62d
   12d94:	0000efed 	.word	0x0000efed
   12d98:	20003046 	.word	0x20003046

00012d9c <common_tc_read_count>:
   12d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12d9e:	4b0d      	ldr	r3, [pc, #52]	; (12dd4 <common_tc_read_count+0x38>)
   12da0:	4798      	blx	r3
   12da2:	4b0d      	ldr	r3, [pc, #52]	; (12dd8 <common_tc_read_count+0x3c>)
   12da4:	781b      	ldrb	r3, [r3, #0]
   12da6:	2b00      	cmp	r3, #0
   12da8:	d00e      	beq.n	12dc8 <common_tc_read_count+0x2c>
   12daa:	4b0c      	ldr	r3, [pc, #48]	; (12ddc <common_tc_read_count+0x40>)
   12dac:	781d      	ldrb	r5, [r3, #0]
   12dae:	4b0a      	ldr	r3, [pc, #40]	; (12dd8 <common_tc_read_count+0x3c>)
   12db0:	781f      	ldrb	r7, [r3, #0]
   12db2:	4c0b      	ldr	r4, [pc, #44]	; (12de0 <common_tc_read_count+0x44>)
   12db4:	1c29      	adds	r1, r5, #0
   12db6:	47a0      	blx	r4
   12db8:	1c06      	adds	r6, r0, #0
   12dba:	480a      	ldr	r0, [pc, #40]	; (12de4 <common_tc_read_count+0x48>)
   12dbc:	1c29      	adds	r1, r5, #0
   12dbe:	47a0      	blx	r4
   12dc0:	4378      	muls	r0, r7
   12dc2:	1830      	adds	r0, r6, r0
   12dc4:	b280      	uxth	r0, r0
   12dc6:	e004      	b.n	12dd2 <common_tc_read_count+0x36>
   12dc8:	4b04      	ldr	r3, [pc, #16]	; (12ddc <common_tc_read_count+0x40>)
   12dca:	7819      	ldrb	r1, [r3, #0]
   12dcc:	4b04      	ldr	r3, [pc, #16]	; (12de0 <common_tc_read_count+0x44>)
   12dce:	4798      	blx	r3
   12dd0:	b280      	uxth	r0, r0
   12dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12dd4:	0000d4b1 	.word	0x0000d4b1
   12dd8:	20001eb0 	.word	0x20001eb0
   12ddc:	200034d4 	.word	0x200034d4
   12de0:	00013069 	.word	0x00013069
   12de4:	0000ffff 	.word	0x0000ffff

00012de8 <common_tc_compare_stop>:
   12de8:	b508      	push	{r3, lr}
   12dea:	4b05      	ldr	r3, [pc, #20]	; (12e00 <common_tc_compare_stop+0x18>)
   12dec:	4798      	blx	r3
   12dee:	4b05      	ldr	r3, [pc, #20]	; (12e04 <common_tc_compare_stop+0x1c>)
   12df0:	4798      	blx	r3
   12df2:	4b05      	ldr	r3, [pc, #20]	; (12e08 <common_tc_compare_stop+0x20>)
   12df4:	2200      	movs	r2, #0
   12df6:	605a      	str	r2, [r3, #4]
   12df8:	811a      	strh	r2, [r3, #8]
   12dfa:	4b04      	ldr	r3, [pc, #16]	; (12e0c <common_tc_compare_stop+0x24>)
   12dfc:	4798      	blx	r3
   12dfe:	bd08      	pop	{r3, pc}
   12e00:	0000d4c5 	.word	0x0000d4c5
   12e04:	0000d57d 	.word	0x0000d57d
   12e08:	20001eb0 	.word	0x20001eb0
   12e0c:	0000d5a1 	.word	0x0000d5a1

00012e10 <common_tc_delay>:
   12e10:	b510      	push	{r4, lr}
   12e12:	1c04      	adds	r4, r0, #0
   12e14:	4b13      	ldr	r3, [pc, #76]	; (12e64 <common_tc_delay+0x54>)
   12e16:	4798      	blx	r3
   12e18:	4b13      	ldr	r3, [pc, #76]	; (12e68 <common_tc_delay+0x58>)
   12e1a:	781a      	ldrb	r2, [r3, #0]
   12e1c:	4362      	muls	r2, r4
   12e1e:	1881      	adds	r1, r0, r2
   12e20:	4b12      	ldr	r3, [pc, #72]	; (12e6c <common_tc_delay+0x5c>)
   12e22:	6059      	str	r1, [r3, #4]
   12e24:	6859      	ldr	r1, [r3, #4]
   12e26:	0c09      	lsrs	r1, r1, #16
   12e28:	6059      	str	r1, [r3, #4]
   12e2a:	685b      	ldr	r3, [r3, #4]
   12e2c:	2b00      	cmp	r3, #0
   12e2e:	d007      	beq.n	12e40 <common_tc_delay+0x30>
   12e30:	4b0e      	ldr	r3, [pc, #56]	; (12e6c <common_tc_delay+0x5c>)
   12e32:	6859      	ldr	r1, [r3, #4]
   12e34:	3201      	adds	r2, #1
   12e36:	1880      	adds	r0, r0, r2
   12e38:	8118      	strh	r0, [r3, #8]
   12e3a:	4b0d      	ldr	r3, [pc, #52]	; (12e70 <common_tc_delay+0x60>)
   12e3c:	4798      	blx	r3
   12e3e:	e004      	b.n	12e4a <common_tc_delay+0x3a>
   12e40:	1882      	adds	r2, r0, r2
   12e42:	4b0a      	ldr	r3, [pc, #40]	; (12e6c <common_tc_delay+0x5c>)
   12e44:	811a      	strh	r2, [r3, #8]
   12e46:	4b0b      	ldr	r3, [pc, #44]	; (12e74 <common_tc_delay+0x64>)
   12e48:	4798      	blx	r3
   12e4a:	4b08      	ldr	r3, [pc, #32]	; (12e6c <common_tc_delay+0x5c>)
   12e4c:	891b      	ldrh	r3, [r3, #8]
   12e4e:	2b63      	cmp	r3, #99	; 0x63
   12e50:	d802      	bhi.n	12e58 <common_tc_delay+0x48>
   12e52:	3364      	adds	r3, #100	; 0x64
   12e54:	4a05      	ldr	r2, [pc, #20]	; (12e6c <common_tc_delay+0x5c>)
   12e56:	8113      	strh	r3, [r2, #8]
   12e58:	4b04      	ldr	r3, [pc, #16]	; (12e6c <common_tc_delay+0x5c>)
   12e5a:	8918      	ldrh	r0, [r3, #8]
   12e5c:	4b06      	ldr	r3, [pc, #24]	; (12e78 <common_tc_delay+0x68>)
   12e5e:	4798      	blx	r3
   12e60:	bd10      	pop	{r4, pc}
   12e62:	46c0      	nop			; (mov r8, r8)
   12e64:	0000d4b1 	.word	0x0000d4b1
   12e68:	200034d4 	.word	0x200034d4
   12e6c:	20001eb0 	.word	0x20001eb0
   12e70:	0000d4c5 	.word	0x0000d4c5
   12e74:	0000d4d9 	.word	0x0000d4d9
   12e78:	0000d565 	.word	0x0000d565

00012e7c <common_tc_init>:
   12e7c:	b508      	push	{r3, lr}
   12e7e:	2200      	movs	r2, #0
   12e80:	4b03      	ldr	r3, [pc, #12]	; (12e90 <common_tc_init+0x14>)
   12e82:	701a      	strb	r2, [r3, #0]
   12e84:	4b03      	ldr	r3, [pc, #12]	; (12e94 <common_tc_init+0x18>)
   12e86:	4798      	blx	r3
   12e88:	4b03      	ldr	r3, [pc, #12]	; (12e98 <common_tc_init+0x1c>)
   12e8a:	7018      	strb	r0, [r3, #0]
   12e8c:	bd08      	pop	{r3, pc}
   12e8e:	46c0      	nop			; (mov r8, r8)
   12e90:	20001eb0 	.word	0x20001eb0
   12e94:	0000d5b9 	.word	0x0000d5b9
   12e98:	200034d4 	.word	0x200034d4

00012e9c <tmr_ovf_callback>:
   12e9c:	b508      	push	{r3, lr}
   12e9e:	4b0e      	ldr	r3, [pc, #56]	; (12ed8 <tmr_ovf_callback+0x3c>)
   12ea0:	685b      	ldr	r3, [r3, #4]
   12ea2:	2b00      	cmp	r3, #0
   12ea4:	d007      	beq.n	12eb6 <tmr_ovf_callback+0x1a>
   12ea6:	4a0c      	ldr	r2, [pc, #48]	; (12ed8 <tmr_ovf_callback+0x3c>)
   12ea8:	6853      	ldr	r3, [r2, #4]
   12eaa:	3b01      	subs	r3, #1
   12eac:	6053      	str	r3, [r2, #4]
   12eae:	2b00      	cmp	r3, #0
   12eb0:	d101      	bne.n	12eb6 <tmr_ovf_callback+0x1a>
   12eb2:	4b0a      	ldr	r3, [pc, #40]	; (12edc <tmr_ovf_callback+0x40>)
   12eb4:	4798      	blx	r3
   12eb6:	4a08      	ldr	r2, [pc, #32]	; (12ed8 <tmr_ovf_callback+0x3c>)
   12eb8:	7813      	ldrb	r3, [r2, #0]
   12eba:	3301      	adds	r3, #1
   12ebc:	b2db      	uxtb	r3, r3
   12ebe:	7013      	strb	r3, [r2, #0]
   12ec0:	4a07      	ldr	r2, [pc, #28]	; (12ee0 <tmr_ovf_callback+0x44>)
   12ec2:	7812      	ldrb	r2, [r2, #0]
   12ec4:	429a      	cmp	r2, r3
   12ec6:	d806      	bhi.n	12ed6 <tmr_ovf_callback+0x3a>
   12ec8:	4b03      	ldr	r3, [pc, #12]	; (12ed8 <tmr_ovf_callback+0x3c>)
   12eca:	2200      	movs	r2, #0
   12ecc:	701a      	strb	r2, [r3, #0]
   12ece:	68db      	ldr	r3, [r3, #12]
   12ed0:	2b00      	cmp	r3, #0
   12ed2:	d000      	beq.n	12ed6 <tmr_ovf_callback+0x3a>
   12ed4:	4798      	blx	r3
   12ed6:	bd08      	pop	{r3, pc}
   12ed8:	20001eb0 	.word	0x20001eb0
   12edc:	0000d4d9 	.word	0x0000d4d9
   12ee0:	200034d4 	.word	0x200034d4

00012ee4 <tmr_cca_callback>:
   12ee4:	b508      	push	{r3, lr}
   12ee6:	4b04      	ldr	r3, [pc, #16]	; (12ef8 <tmr_cca_callback+0x14>)
   12ee8:	4798      	blx	r3
   12eea:	4b04      	ldr	r3, [pc, #16]	; (12efc <tmr_cca_callback+0x18>)
   12eec:	691b      	ldr	r3, [r3, #16]
   12eee:	2b00      	cmp	r3, #0
   12ef0:	d000      	beq.n	12ef4 <tmr_cca_callback+0x10>
   12ef2:	4798      	blx	r3
   12ef4:	bd08      	pop	{r3, pc}
   12ef6:	46c0      	nop			; (mov r8, r8)
   12ef8:	0000d4c5 	.word	0x0000d4c5
   12efc:	20001eb0 	.word	0x20001eb0

00012f00 <set_common_tc_overflow_callback>:
   12f00:	4b01      	ldr	r3, [pc, #4]	; (12f08 <set_common_tc_overflow_callback+0x8>)
   12f02:	60d8      	str	r0, [r3, #12]
   12f04:	4770      	bx	lr
   12f06:	46c0      	nop			; (mov r8, r8)
   12f08:	20001eb0 	.word	0x20001eb0

00012f0c <set_common_tc_expiry_callback>:
   12f0c:	4b01      	ldr	r3, [pc, #4]	; (12f14 <set_common_tc_expiry_callback+0x8>)
   12f0e:	6118      	str	r0, [r3, #16]
   12f10:	4770      	bx	lr
   12f12:	46c0      	nop			; (mov r8, r8)
   12f14:	20001eb0 	.word	0x20001eb0

00012f18 <__gnu_thumb1_case_uqi>:
   12f18:	b402      	push	{r1}
   12f1a:	4671      	mov	r1, lr
   12f1c:	0849      	lsrs	r1, r1, #1
   12f1e:	0049      	lsls	r1, r1, #1
   12f20:	5c09      	ldrb	r1, [r1, r0]
   12f22:	0049      	lsls	r1, r1, #1
   12f24:	448e      	add	lr, r1
   12f26:	bc02      	pop	{r1}
   12f28:	4770      	bx	lr
   12f2a:	46c0      	nop			; (mov r8, r8)

00012f2c <__gnu_thumb1_case_shi>:
   12f2c:	b403      	push	{r0, r1}
   12f2e:	4671      	mov	r1, lr
   12f30:	0849      	lsrs	r1, r1, #1
   12f32:	0040      	lsls	r0, r0, #1
   12f34:	0049      	lsls	r1, r1, #1
   12f36:	5e09      	ldrsh	r1, [r1, r0]
   12f38:	0049      	lsls	r1, r1, #1
   12f3a:	448e      	add	lr, r1
   12f3c:	bc03      	pop	{r0, r1}
   12f3e:	4770      	bx	lr

00012f40 <__gnu_thumb1_case_uhi>:
   12f40:	b403      	push	{r0, r1}
   12f42:	4671      	mov	r1, lr
   12f44:	0849      	lsrs	r1, r1, #1
   12f46:	0040      	lsls	r0, r0, #1
   12f48:	0049      	lsls	r1, r1, #1
   12f4a:	5a09      	ldrh	r1, [r1, r0]
   12f4c:	0049      	lsls	r1, r1, #1
   12f4e:	448e      	add	lr, r1
   12f50:	bc03      	pop	{r0, r1}
   12f52:	4770      	bx	lr

00012f54 <__udivsi3>:
   12f54:	2200      	movs	r2, #0
   12f56:	0843      	lsrs	r3, r0, #1
   12f58:	428b      	cmp	r3, r1
   12f5a:	d374      	bcc.n	13046 <__udivsi3+0xf2>
   12f5c:	0903      	lsrs	r3, r0, #4
   12f5e:	428b      	cmp	r3, r1
   12f60:	d35f      	bcc.n	13022 <__udivsi3+0xce>
   12f62:	0a03      	lsrs	r3, r0, #8
   12f64:	428b      	cmp	r3, r1
   12f66:	d344      	bcc.n	12ff2 <__udivsi3+0x9e>
   12f68:	0b03      	lsrs	r3, r0, #12
   12f6a:	428b      	cmp	r3, r1
   12f6c:	d328      	bcc.n	12fc0 <__udivsi3+0x6c>
   12f6e:	0c03      	lsrs	r3, r0, #16
   12f70:	428b      	cmp	r3, r1
   12f72:	d30d      	bcc.n	12f90 <__udivsi3+0x3c>
   12f74:	22ff      	movs	r2, #255	; 0xff
   12f76:	0209      	lsls	r1, r1, #8
   12f78:	ba12      	rev	r2, r2
   12f7a:	0c03      	lsrs	r3, r0, #16
   12f7c:	428b      	cmp	r3, r1
   12f7e:	d302      	bcc.n	12f86 <__udivsi3+0x32>
   12f80:	1212      	asrs	r2, r2, #8
   12f82:	0209      	lsls	r1, r1, #8
   12f84:	d065      	beq.n	13052 <__udivsi3+0xfe>
   12f86:	0b03      	lsrs	r3, r0, #12
   12f88:	428b      	cmp	r3, r1
   12f8a:	d319      	bcc.n	12fc0 <__udivsi3+0x6c>
   12f8c:	e000      	b.n	12f90 <__udivsi3+0x3c>
   12f8e:	0a09      	lsrs	r1, r1, #8
   12f90:	0bc3      	lsrs	r3, r0, #15
   12f92:	428b      	cmp	r3, r1
   12f94:	d301      	bcc.n	12f9a <__udivsi3+0x46>
   12f96:	03cb      	lsls	r3, r1, #15
   12f98:	1ac0      	subs	r0, r0, r3
   12f9a:	4152      	adcs	r2, r2
   12f9c:	0b83      	lsrs	r3, r0, #14
   12f9e:	428b      	cmp	r3, r1
   12fa0:	d301      	bcc.n	12fa6 <__udivsi3+0x52>
   12fa2:	038b      	lsls	r3, r1, #14
   12fa4:	1ac0      	subs	r0, r0, r3
   12fa6:	4152      	adcs	r2, r2
   12fa8:	0b43      	lsrs	r3, r0, #13
   12faa:	428b      	cmp	r3, r1
   12fac:	d301      	bcc.n	12fb2 <__udivsi3+0x5e>
   12fae:	034b      	lsls	r3, r1, #13
   12fb0:	1ac0      	subs	r0, r0, r3
   12fb2:	4152      	adcs	r2, r2
   12fb4:	0b03      	lsrs	r3, r0, #12
   12fb6:	428b      	cmp	r3, r1
   12fb8:	d301      	bcc.n	12fbe <__udivsi3+0x6a>
   12fba:	030b      	lsls	r3, r1, #12
   12fbc:	1ac0      	subs	r0, r0, r3
   12fbe:	4152      	adcs	r2, r2
   12fc0:	0ac3      	lsrs	r3, r0, #11
   12fc2:	428b      	cmp	r3, r1
   12fc4:	d301      	bcc.n	12fca <__udivsi3+0x76>
   12fc6:	02cb      	lsls	r3, r1, #11
   12fc8:	1ac0      	subs	r0, r0, r3
   12fca:	4152      	adcs	r2, r2
   12fcc:	0a83      	lsrs	r3, r0, #10
   12fce:	428b      	cmp	r3, r1
   12fd0:	d301      	bcc.n	12fd6 <__udivsi3+0x82>
   12fd2:	028b      	lsls	r3, r1, #10
   12fd4:	1ac0      	subs	r0, r0, r3
   12fd6:	4152      	adcs	r2, r2
   12fd8:	0a43      	lsrs	r3, r0, #9
   12fda:	428b      	cmp	r3, r1
   12fdc:	d301      	bcc.n	12fe2 <__udivsi3+0x8e>
   12fde:	024b      	lsls	r3, r1, #9
   12fe0:	1ac0      	subs	r0, r0, r3
   12fe2:	4152      	adcs	r2, r2
   12fe4:	0a03      	lsrs	r3, r0, #8
   12fe6:	428b      	cmp	r3, r1
   12fe8:	d301      	bcc.n	12fee <__udivsi3+0x9a>
   12fea:	020b      	lsls	r3, r1, #8
   12fec:	1ac0      	subs	r0, r0, r3
   12fee:	4152      	adcs	r2, r2
   12ff0:	d2cd      	bcs.n	12f8e <__udivsi3+0x3a>
   12ff2:	09c3      	lsrs	r3, r0, #7
   12ff4:	428b      	cmp	r3, r1
   12ff6:	d301      	bcc.n	12ffc <__udivsi3+0xa8>
   12ff8:	01cb      	lsls	r3, r1, #7
   12ffa:	1ac0      	subs	r0, r0, r3
   12ffc:	4152      	adcs	r2, r2
   12ffe:	0983      	lsrs	r3, r0, #6
   13000:	428b      	cmp	r3, r1
   13002:	d301      	bcc.n	13008 <__udivsi3+0xb4>
   13004:	018b      	lsls	r3, r1, #6
   13006:	1ac0      	subs	r0, r0, r3
   13008:	4152      	adcs	r2, r2
   1300a:	0943      	lsrs	r3, r0, #5
   1300c:	428b      	cmp	r3, r1
   1300e:	d301      	bcc.n	13014 <__udivsi3+0xc0>
   13010:	014b      	lsls	r3, r1, #5
   13012:	1ac0      	subs	r0, r0, r3
   13014:	4152      	adcs	r2, r2
   13016:	0903      	lsrs	r3, r0, #4
   13018:	428b      	cmp	r3, r1
   1301a:	d301      	bcc.n	13020 <__udivsi3+0xcc>
   1301c:	010b      	lsls	r3, r1, #4
   1301e:	1ac0      	subs	r0, r0, r3
   13020:	4152      	adcs	r2, r2
   13022:	08c3      	lsrs	r3, r0, #3
   13024:	428b      	cmp	r3, r1
   13026:	d301      	bcc.n	1302c <__udivsi3+0xd8>
   13028:	00cb      	lsls	r3, r1, #3
   1302a:	1ac0      	subs	r0, r0, r3
   1302c:	4152      	adcs	r2, r2
   1302e:	0883      	lsrs	r3, r0, #2
   13030:	428b      	cmp	r3, r1
   13032:	d301      	bcc.n	13038 <__udivsi3+0xe4>
   13034:	008b      	lsls	r3, r1, #2
   13036:	1ac0      	subs	r0, r0, r3
   13038:	4152      	adcs	r2, r2
   1303a:	0843      	lsrs	r3, r0, #1
   1303c:	428b      	cmp	r3, r1
   1303e:	d301      	bcc.n	13044 <__udivsi3+0xf0>
   13040:	004b      	lsls	r3, r1, #1
   13042:	1ac0      	subs	r0, r0, r3
   13044:	4152      	adcs	r2, r2
   13046:	1a41      	subs	r1, r0, r1
   13048:	d200      	bcs.n	1304c <__udivsi3+0xf8>
   1304a:	4601      	mov	r1, r0
   1304c:	4152      	adcs	r2, r2
   1304e:	4610      	mov	r0, r2
   13050:	4770      	bx	lr
   13052:	e7ff      	b.n	13054 <__udivsi3+0x100>
   13054:	b501      	push	{r0, lr}
   13056:	2000      	movs	r0, #0
   13058:	f000 f8f0 	bl	1323c <__aeabi_idiv0>
   1305c:	bd02      	pop	{r1, pc}
   1305e:	46c0      	nop			; (mov r8, r8)

00013060 <__aeabi_uidivmod>:
   13060:	2900      	cmp	r1, #0
   13062:	d0f7      	beq.n	13054 <__udivsi3+0x100>
   13064:	e776      	b.n	12f54 <__udivsi3>
   13066:	4770      	bx	lr

00013068 <__divsi3>:
   13068:	4603      	mov	r3, r0
   1306a:	430b      	orrs	r3, r1
   1306c:	d47f      	bmi.n	1316e <__divsi3+0x106>
   1306e:	2200      	movs	r2, #0
   13070:	0843      	lsrs	r3, r0, #1
   13072:	428b      	cmp	r3, r1
   13074:	d374      	bcc.n	13160 <__divsi3+0xf8>
   13076:	0903      	lsrs	r3, r0, #4
   13078:	428b      	cmp	r3, r1
   1307a:	d35f      	bcc.n	1313c <__divsi3+0xd4>
   1307c:	0a03      	lsrs	r3, r0, #8
   1307e:	428b      	cmp	r3, r1
   13080:	d344      	bcc.n	1310c <__divsi3+0xa4>
   13082:	0b03      	lsrs	r3, r0, #12
   13084:	428b      	cmp	r3, r1
   13086:	d328      	bcc.n	130da <__divsi3+0x72>
   13088:	0c03      	lsrs	r3, r0, #16
   1308a:	428b      	cmp	r3, r1
   1308c:	d30d      	bcc.n	130aa <__divsi3+0x42>
   1308e:	22ff      	movs	r2, #255	; 0xff
   13090:	0209      	lsls	r1, r1, #8
   13092:	ba12      	rev	r2, r2
   13094:	0c03      	lsrs	r3, r0, #16
   13096:	428b      	cmp	r3, r1
   13098:	d302      	bcc.n	130a0 <__divsi3+0x38>
   1309a:	1212      	asrs	r2, r2, #8
   1309c:	0209      	lsls	r1, r1, #8
   1309e:	d065      	beq.n	1316c <__divsi3+0x104>
   130a0:	0b03      	lsrs	r3, r0, #12
   130a2:	428b      	cmp	r3, r1
   130a4:	d319      	bcc.n	130da <__divsi3+0x72>
   130a6:	e000      	b.n	130aa <__divsi3+0x42>
   130a8:	0a09      	lsrs	r1, r1, #8
   130aa:	0bc3      	lsrs	r3, r0, #15
   130ac:	428b      	cmp	r3, r1
   130ae:	d301      	bcc.n	130b4 <__divsi3+0x4c>
   130b0:	03cb      	lsls	r3, r1, #15
   130b2:	1ac0      	subs	r0, r0, r3
   130b4:	4152      	adcs	r2, r2
   130b6:	0b83      	lsrs	r3, r0, #14
   130b8:	428b      	cmp	r3, r1
   130ba:	d301      	bcc.n	130c0 <__divsi3+0x58>
   130bc:	038b      	lsls	r3, r1, #14
   130be:	1ac0      	subs	r0, r0, r3
   130c0:	4152      	adcs	r2, r2
   130c2:	0b43      	lsrs	r3, r0, #13
   130c4:	428b      	cmp	r3, r1
   130c6:	d301      	bcc.n	130cc <__divsi3+0x64>
   130c8:	034b      	lsls	r3, r1, #13
   130ca:	1ac0      	subs	r0, r0, r3
   130cc:	4152      	adcs	r2, r2
   130ce:	0b03      	lsrs	r3, r0, #12
   130d0:	428b      	cmp	r3, r1
   130d2:	d301      	bcc.n	130d8 <__divsi3+0x70>
   130d4:	030b      	lsls	r3, r1, #12
   130d6:	1ac0      	subs	r0, r0, r3
   130d8:	4152      	adcs	r2, r2
   130da:	0ac3      	lsrs	r3, r0, #11
   130dc:	428b      	cmp	r3, r1
   130de:	d301      	bcc.n	130e4 <__divsi3+0x7c>
   130e0:	02cb      	lsls	r3, r1, #11
   130e2:	1ac0      	subs	r0, r0, r3
   130e4:	4152      	adcs	r2, r2
   130e6:	0a83      	lsrs	r3, r0, #10
   130e8:	428b      	cmp	r3, r1
   130ea:	d301      	bcc.n	130f0 <__divsi3+0x88>
   130ec:	028b      	lsls	r3, r1, #10
   130ee:	1ac0      	subs	r0, r0, r3
   130f0:	4152      	adcs	r2, r2
   130f2:	0a43      	lsrs	r3, r0, #9
   130f4:	428b      	cmp	r3, r1
   130f6:	d301      	bcc.n	130fc <__divsi3+0x94>
   130f8:	024b      	lsls	r3, r1, #9
   130fa:	1ac0      	subs	r0, r0, r3
   130fc:	4152      	adcs	r2, r2
   130fe:	0a03      	lsrs	r3, r0, #8
   13100:	428b      	cmp	r3, r1
   13102:	d301      	bcc.n	13108 <__divsi3+0xa0>
   13104:	020b      	lsls	r3, r1, #8
   13106:	1ac0      	subs	r0, r0, r3
   13108:	4152      	adcs	r2, r2
   1310a:	d2cd      	bcs.n	130a8 <__divsi3+0x40>
   1310c:	09c3      	lsrs	r3, r0, #7
   1310e:	428b      	cmp	r3, r1
   13110:	d301      	bcc.n	13116 <__divsi3+0xae>
   13112:	01cb      	lsls	r3, r1, #7
   13114:	1ac0      	subs	r0, r0, r3
   13116:	4152      	adcs	r2, r2
   13118:	0983      	lsrs	r3, r0, #6
   1311a:	428b      	cmp	r3, r1
   1311c:	d301      	bcc.n	13122 <__divsi3+0xba>
   1311e:	018b      	lsls	r3, r1, #6
   13120:	1ac0      	subs	r0, r0, r3
   13122:	4152      	adcs	r2, r2
   13124:	0943      	lsrs	r3, r0, #5
   13126:	428b      	cmp	r3, r1
   13128:	d301      	bcc.n	1312e <__divsi3+0xc6>
   1312a:	014b      	lsls	r3, r1, #5
   1312c:	1ac0      	subs	r0, r0, r3
   1312e:	4152      	adcs	r2, r2
   13130:	0903      	lsrs	r3, r0, #4
   13132:	428b      	cmp	r3, r1
   13134:	d301      	bcc.n	1313a <__divsi3+0xd2>
   13136:	010b      	lsls	r3, r1, #4
   13138:	1ac0      	subs	r0, r0, r3
   1313a:	4152      	adcs	r2, r2
   1313c:	08c3      	lsrs	r3, r0, #3
   1313e:	428b      	cmp	r3, r1
   13140:	d301      	bcc.n	13146 <__divsi3+0xde>
   13142:	00cb      	lsls	r3, r1, #3
   13144:	1ac0      	subs	r0, r0, r3
   13146:	4152      	adcs	r2, r2
   13148:	0883      	lsrs	r3, r0, #2
   1314a:	428b      	cmp	r3, r1
   1314c:	d301      	bcc.n	13152 <__divsi3+0xea>
   1314e:	008b      	lsls	r3, r1, #2
   13150:	1ac0      	subs	r0, r0, r3
   13152:	4152      	adcs	r2, r2
   13154:	0843      	lsrs	r3, r0, #1
   13156:	428b      	cmp	r3, r1
   13158:	d301      	bcc.n	1315e <__divsi3+0xf6>
   1315a:	004b      	lsls	r3, r1, #1
   1315c:	1ac0      	subs	r0, r0, r3
   1315e:	4152      	adcs	r2, r2
   13160:	1a41      	subs	r1, r0, r1
   13162:	d200      	bcs.n	13166 <__divsi3+0xfe>
   13164:	4601      	mov	r1, r0
   13166:	4152      	adcs	r2, r2
   13168:	4610      	mov	r0, r2
   1316a:	4770      	bx	lr
   1316c:	e05d      	b.n	1322a <__divsi3+0x1c2>
   1316e:	0fca      	lsrs	r2, r1, #31
   13170:	d000      	beq.n	13174 <__divsi3+0x10c>
   13172:	4249      	negs	r1, r1
   13174:	1003      	asrs	r3, r0, #32
   13176:	d300      	bcc.n	1317a <__divsi3+0x112>
   13178:	4240      	negs	r0, r0
   1317a:	4053      	eors	r3, r2
   1317c:	2200      	movs	r2, #0
   1317e:	469c      	mov	ip, r3
   13180:	0903      	lsrs	r3, r0, #4
   13182:	428b      	cmp	r3, r1
   13184:	d32d      	bcc.n	131e2 <__divsi3+0x17a>
   13186:	0a03      	lsrs	r3, r0, #8
   13188:	428b      	cmp	r3, r1
   1318a:	d312      	bcc.n	131b2 <__divsi3+0x14a>
   1318c:	22fc      	movs	r2, #252	; 0xfc
   1318e:	0189      	lsls	r1, r1, #6
   13190:	ba12      	rev	r2, r2
   13192:	0a03      	lsrs	r3, r0, #8
   13194:	428b      	cmp	r3, r1
   13196:	d30c      	bcc.n	131b2 <__divsi3+0x14a>
   13198:	0189      	lsls	r1, r1, #6
   1319a:	1192      	asrs	r2, r2, #6
   1319c:	428b      	cmp	r3, r1
   1319e:	d308      	bcc.n	131b2 <__divsi3+0x14a>
   131a0:	0189      	lsls	r1, r1, #6
   131a2:	1192      	asrs	r2, r2, #6
   131a4:	428b      	cmp	r3, r1
   131a6:	d304      	bcc.n	131b2 <__divsi3+0x14a>
   131a8:	0189      	lsls	r1, r1, #6
   131aa:	d03a      	beq.n	13222 <__divsi3+0x1ba>
   131ac:	1192      	asrs	r2, r2, #6
   131ae:	e000      	b.n	131b2 <__divsi3+0x14a>
   131b0:	0989      	lsrs	r1, r1, #6
   131b2:	09c3      	lsrs	r3, r0, #7
   131b4:	428b      	cmp	r3, r1
   131b6:	d301      	bcc.n	131bc <__divsi3+0x154>
   131b8:	01cb      	lsls	r3, r1, #7
   131ba:	1ac0      	subs	r0, r0, r3
   131bc:	4152      	adcs	r2, r2
   131be:	0983      	lsrs	r3, r0, #6
   131c0:	428b      	cmp	r3, r1
   131c2:	d301      	bcc.n	131c8 <__divsi3+0x160>
   131c4:	018b      	lsls	r3, r1, #6
   131c6:	1ac0      	subs	r0, r0, r3
   131c8:	4152      	adcs	r2, r2
   131ca:	0943      	lsrs	r3, r0, #5
   131cc:	428b      	cmp	r3, r1
   131ce:	d301      	bcc.n	131d4 <__divsi3+0x16c>
   131d0:	014b      	lsls	r3, r1, #5
   131d2:	1ac0      	subs	r0, r0, r3
   131d4:	4152      	adcs	r2, r2
   131d6:	0903      	lsrs	r3, r0, #4
   131d8:	428b      	cmp	r3, r1
   131da:	d301      	bcc.n	131e0 <__divsi3+0x178>
   131dc:	010b      	lsls	r3, r1, #4
   131de:	1ac0      	subs	r0, r0, r3
   131e0:	4152      	adcs	r2, r2
   131e2:	08c3      	lsrs	r3, r0, #3
   131e4:	428b      	cmp	r3, r1
   131e6:	d301      	bcc.n	131ec <__divsi3+0x184>
   131e8:	00cb      	lsls	r3, r1, #3
   131ea:	1ac0      	subs	r0, r0, r3
   131ec:	4152      	adcs	r2, r2
   131ee:	0883      	lsrs	r3, r0, #2
   131f0:	428b      	cmp	r3, r1
   131f2:	d301      	bcc.n	131f8 <__divsi3+0x190>
   131f4:	008b      	lsls	r3, r1, #2
   131f6:	1ac0      	subs	r0, r0, r3
   131f8:	4152      	adcs	r2, r2
   131fa:	d2d9      	bcs.n	131b0 <__divsi3+0x148>
   131fc:	0843      	lsrs	r3, r0, #1
   131fe:	428b      	cmp	r3, r1
   13200:	d301      	bcc.n	13206 <__divsi3+0x19e>
   13202:	004b      	lsls	r3, r1, #1
   13204:	1ac0      	subs	r0, r0, r3
   13206:	4152      	adcs	r2, r2
   13208:	1a41      	subs	r1, r0, r1
   1320a:	d200      	bcs.n	1320e <__divsi3+0x1a6>
   1320c:	4601      	mov	r1, r0
   1320e:	4663      	mov	r3, ip
   13210:	4152      	adcs	r2, r2
   13212:	105b      	asrs	r3, r3, #1
   13214:	4610      	mov	r0, r2
   13216:	d301      	bcc.n	1321c <__divsi3+0x1b4>
   13218:	4240      	negs	r0, r0
   1321a:	2b00      	cmp	r3, #0
   1321c:	d500      	bpl.n	13220 <__divsi3+0x1b8>
   1321e:	4249      	negs	r1, r1
   13220:	4770      	bx	lr
   13222:	4663      	mov	r3, ip
   13224:	105b      	asrs	r3, r3, #1
   13226:	d300      	bcc.n	1322a <__divsi3+0x1c2>
   13228:	4240      	negs	r0, r0
   1322a:	b501      	push	{r0, lr}
   1322c:	2000      	movs	r0, #0
   1322e:	f000 f805 	bl	1323c <__aeabi_idiv0>
   13232:	bd02      	pop	{r1, pc}

00013234 <__aeabi_idivmod>:
   13234:	2900      	cmp	r1, #0
   13236:	d0f8      	beq.n	1322a <__divsi3+0x1c2>
   13238:	e716      	b.n	13068 <__divsi3>
   1323a:	4770      	bx	lr

0001323c <__aeabi_idiv0>:
   1323c:	4770      	bx	lr
   1323e:	46c0      	nop			; (mov r8, r8)

00013240 <__aeabi_cdrcmple>:
   13240:	4684      	mov	ip, r0
   13242:	1c10      	adds	r0, r2, #0
   13244:	4662      	mov	r2, ip
   13246:	468c      	mov	ip, r1
   13248:	1c19      	adds	r1, r3, #0
   1324a:	4663      	mov	r3, ip
   1324c:	e000      	b.n	13250 <__aeabi_cdcmpeq>
   1324e:	46c0      	nop			; (mov r8, r8)

00013250 <__aeabi_cdcmpeq>:
   13250:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   13252:	f001 ffa3 	bl	1519c <__ledf2>
   13256:	2800      	cmp	r0, #0
   13258:	d401      	bmi.n	1325e <__aeabi_cdcmpeq+0xe>
   1325a:	2100      	movs	r1, #0
   1325c:	42c8      	cmn	r0, r1
   1325e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00013260 <__aeabi_dcmpeq>:
   13260:	b510      	push	{r4, lr}
   13262:	f001 fefd 	bl	15060 <__eqdf2>
   13266:	4240      	negs	r0, r0
   13268:	3001      	adds	r0, #1
   1326a:	bd10      	pop	{r4, pc}

0001326c <__aeabi_dcmplt>:
   1326c:	b510      	push	{r4, lr}
   1326e:	f001 ff95 	bl	1519c <__ledf2>
   13272:	2800      	cmp	r0, #0
   13274:	db01      	blt.n	1327a <__aeabi_dcmplt+0xe>
   13276:	2000      	movs	r0, #0
   13278:	bd10      	pop	{r4, pc}
   1327a:	2001      	movs	r0, #1
   1327c:	bd10      	pop	{r4, pc}
   1327e:	46c0      	nop			; (mov r8, r8)

00013280 <__aeabi_dcmple>:
   13280:	b510      	push	{r4, lr}
   13282:	f001 ff8b 	bl	1519c <__ledf2>
   13286:	2800      	cmp	r0, #0
   13288:	dd01      	ble.n	1328e <__aeabi_dcmple+0xe>
   1328a:	2000      	movs	r0, #0
   1328c:	bd10      	pop	{r4, pc}
   1328e:	2001      	movs	r0, #1
   13290:	bd10      	pop	{r4, pc}
   13292:	46c0      	nop			; (mov r8, r8)

00013294 <__aeabi_dcmpgt>:
   13294:	b510      	push	{r4, lr}
   13296:	f001 ff1d 	bl	150d4 <__gedf2>
   1329a:	2800      	cmp	r0, #0
   1329c:	dc01      	bgt.n	132a2 <__aeabi_dcmpgt+0xe>
   1329e:	2000      	movs	r0, #0
   132a0:	bd10      	pop	{r4, pc}
   132a2:	2001      	movs	r0, #1
   132a4:	bd10      	pop	{r4, pc}
   132a6:	46c0      	nop			; (mov r8, r8)

000132a8 <__aeabi_dcmpge>:
   132a8:	b510      	push	{r4, lr}
   132aa:	f001 ff13 	bl	150d4 <__gedf2>
   132ae:	2800      	cmp	r0, #0
   132b0:	da01      	bge.n	132b6 <__aeabi_dcmpge+0xe>
   132b2:	2000      	movs	r0, #0
   132b4:	bd10      	pop	{r4, pc}
   132b6:	2001      	movs	r0, #1
   132b8:	bd10      	pop	{r4, pc}
   132ba:	46c0      	nop			; (mov r8, r8)

000132bc <__aeabi_cfrcmple>:
   132bc:	4684      	mov	ip, r0
   132be:	1c08      	adds	r0, r1, #0
   132c0:	4661      	mov	r1, ip
   132c2:	e7ff      	b.n	132c4 <__aeabi_cfcmpeq>

000132c4 <__aeabi_cfcmpeq>:
   132c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   132c6:	f000 fcd3 	bl	13c70 <__lesf2>
   132ca:	2800      	cmp	r0, #0
   132cc:	d401      	bmi.n	132d2 <__aeabi_cfcmpeq+0xe>
   132ce:	2100      	movs	r1, #0
   132d0:	42c8      	cmn	r0, r1
   132d2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000132d4 <__aeabi_fcmpeq>:
   132d4:	b510      	push	{r4, lr}
   132d6:	f000 fc65 	bl	13ba4 <__eqsf2>
   132da:	4240      	negs	r0, r0
   132dc:	3001      	adds	r0, #1
   132de:	bd10      	pop	{r4, pc}

000132e0 <__aeabi_fcmplt>:
   132e0:	b510      	push	{r4, lr}
   132e2:	f000 fcc5 	bl	13c70 <__lesf2>
   132e6:	2800      	cmp	r0, #0
   132e8:	db01      	blt.n	132ee <__aeabi_fcmplt+0xe>
   132ea:	2000      	movs	r0, #0
   132ec:	bd10      	pop	{r4, pc}
   132ee:	2001      	movs	r0, #1
   132f0:	bd10      	pop	{r4, pc}
   132f2:	46c0      	nop			; (mov r8, r8)

000132f4 <__aeabi_fcmple>:
   132f4:	b510      	push	{r4, lr}
   132f6:	f000 fcbb 	bl	13c70 <__lesf2>
   132fa:	2800      	cmp	r0, #0
   132fc:	dd01      	ble.n	13302 <__aeabi_fcmple+0xe>
   132fe:	2000      	movs	r0, #0
   13300:	bd10      	pop	{r4, pc}
   13302:	2001      	movs	r0, #1
   13304:	bd10      	pop	{r4, pc}
   13306:	46c0      	nop			; (mov r8, r8)

00013308 <__aeabi_fcmpgt>:
   13308:	b510      	push	{r4, lr}
   1330a:	f000 fc71 	bl	13bf0 <__gesf2>
   1330e:	2800      	cmp	r0, #0
   13310:	dc01      	bgt.n	13316 <__aeabi_fcmpgt+0xe>
   13312:	2000      	movs	r0, #0
   13314:	bd10      	pop	{r4, pc}
   13316:	2001      	movs	r0, #1
   13318:	bd10      	pop	{r4, pc}
   1331a:	46c0      	nop			; (mov r8, r8)

0001331c <__aeabi_fcmpge>:
   1331c:	b510      	push	{r4, lr}
   1331e:	f000 fc67 	bl	13bf0 <__gesf2>
   13322:	2800      	cmp	r0, #0
   13324:	da01      	bge.n	1332a <__aeabi_fcmpge+0xe>
   13326:	2000      	movs	r0, #0
   13328:	bd10      	pop	{r4, pc}
   1332a:	2001      	movs	r0, #1
   1332c:	bd10      	pop	{r4, pc}
   1332e:	46c0      	nop			; (mov r8, r8)

00013330 <__aeabi_uldivmod>:
   13330:	2b00      	cmp	r3, #0
   13332:	d111      	bne.n	13358 <__aeabi_uldivmod+0x28>
   13334:	2a00      	cmp	r2, #0
   13336:	d10f      	bne.n	13358 <__aeabi_uldivmod+0x28>
   13338:	2900      	cmp	r1, #0
   1333a:	d100      	bne.n	1333e <__aeabi_uldivmod+0xe>
   1333c:	2800      	cmp	r0, #0
   1333e:	d002      	beq.n	13346 <__aeabi_uldivmod+0x16>
   13340:	2100      	movs	r1, #0
   13342:	43c9      	mvns	r1, r1
   13344:	1c08      	adds	r0, r1, #0
   13346:	b407      	push	{r0, r1, r2}
   13348:	4802      	ldr	r0, [pc, #8]	; (13354 <__aeabi_uldivmod+0x24>)
   1334a:	a102      	add	r1, pc, #8	; (adr r1, 13354 <__aeabi_uldivmod+0x24>)
   1334c:	1840      	adds	r0, r0, r1
   1334e:	9002      	str	r0, [sp, #8]
   13350:	bd03      	pop	{r0, r1, pc}
   13352:	46c0      	nop			; (mov r8, r8)
   13354:	fffffee9 	.word	0xfffffee9
   13358:	b403      	push	{r0, r1}
   1335a:	4668      	mov	r0, sp
   1335c:	b501      	push	{r0, lr}
   1335e:	9802      	ldr	r0, [sp, #8]
   13360:	f000 f886 	bl	13470 <__udivmoddi4>
   13364:	9b01      	ldr	r3, [sp, #4]
   13366:	469e      	mov	lr, r3
   13368:	b002      	add	sp, #8
   1336a:	bc0c      	pop	{r2, r3}
   1336c:	4770      	bx	lr
   1336e:	46c0      	nop			; (mov r8, r8)

00013370 <__aeabi_lmul>:
   13370:	b5f0      	push	{r4, r5, r6, r7, lr}
   13372:	46ce      	mov	lr, r9
   13374:	4647      	mov	r7, r8
   13376:	0415      	lsls	r5, r2, #16
   13378:	0c2d      	lsrs	r5, r5, #16
   1337a:	002e      	movs	r6, r5
   1337c:	b580      	push	{r7, lr}
   1337e:	0407      	lsls	r7, r0, #16
   13380:	0c14      	lsrs	r4, r2, #16
   13382:	0c3f      	lsrs	r7, r7, #16
   13384:	4699      	mov	r9, r3
   13386:	0c03      	lsrs	r3, r0, #16
   13388:	437e      	muls	r6, r7
   1338a:	435d      	muls	r5, r3
   1338c:	4367      	muls	r7, r4
   1338e:	4363      	muls	r3, r4
   13390:	197f      	adds	r7, r7, r5
   13392:	0c34      	lsrs	r4, r6, #16
   13394:	19e4      	adds	r4, r4, r7
   13396:	469c      	mov	ip, r3
   13398:	42a5      	cmp	r5, r4
   1339a:	d903      	bls.n	133a4 <__aeabi_lmul+0x34>
   1339c:	2380      	movs	r3, #128	; 0x80
   1339e:	025b      	lsls	r3, r3, #9
   133a0:	4698      	mov	r8, r3
   133a2:	44c4      	add	ip, r8
   133a4:	464b      	mov	r3, r9
   133a6:	4351      	muls	r1, r2
   133a8:	4343      	muls	r3, r0
   133aa:	0436      	lsls	r6, r6, #16
   133ac:	0c36      	lsrs	r6, r6, #16
   133ae:	0c25      	lsrs	r5, r4, #16
   133b0:	0424      	lsls	r4, r4, #16
   133b2:	4465      	add	r5, ip
   133b4:	19a4      	adds	r4, r4, r6
   133b6:	1859      	adds	r1, r3, r1
   133b8:	1949      	adds	r1, r1, r5
   133ba:	0020      	movs	r0, r4
   133bc:	bc0c      	pop	{r2, r3}
   133be:	4690      	mov	r8, r2
   133c0:	4699      	mov	r9, r3
   133c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000133c4 <__aeabi_f2uiz>:
   133c4:	219e      	movs	r1, #158	; 0x9e
   133c6:	b510      	push	{r4, lr}
   133c8:	05c9      	lsls	r1, r1, #23
   133ca:	1c04      	adds	r4, r0, #0
   133cc:	f7ff ffa6 	bl	1331c <__aeabi_fcmpge>
   133d0:	2800      	cmp	r0, #0
   133d2:	d103      	bne.n	133dc <__aeabi_f2uiz+0x18>
   133d4:	1c20      	adds	r0, r4, #0
   133d6:	f000 ff49 	bl	1426c <__aeabi_f2iz>
   133da:	bd10      	pop	{r4, pc}
   133dc:	219e      	movs	r1, #158	; 0x9e
   133de:	1c20      	adds	r0, r4, #0
   133e0:	05c9      	lsls	r1, r1, #23
   133e2:	f000 fda7 	bl	13f34 <__aeabi_fsub>
   133e6:	f000 ff41 	bl	1426c <__aeabi_f2iz>
   133ea:	2380      	movs	r3, #128	; 0x80
   133ec:	061b      	lsls	r3, r3, #24
   133ee:	469c      	mov	ip, r3
   133f0:	4460      	add	r0, ip
   133f2:	e7f2      	b.n	133da <__aeabi_f2uiz+0x16>

000133f4 <__aeabi_d2uiz>:
   133f4:	b570      	push	{r4, r5, r6, lr}
   133f6:	2200      	movs	r2, #0
   133f8:	4b0c      	ldr	r3, [pc, #48]	; (1342c <__aeabi_d2uiz+0x38>)
   133fa:	0004      	movs	r4, r0
   133fc:	000d      	movs	r5, r1
   133fe:	f7ff ff53 	bl	132a8 <__aeabi_dcmpge>
   13402:	2800      	cmp	r0, #0
   13404:	d104      	bne.n	13410 <__aeabi_d2uiz+0x1c>
   13406:	0020      	movs	r0, r4
   13408:	0029      	movs	r1, r5
   1340a:	f002 fcbf 	bl	15d8c <__aeabi_d2iz>
   1340e:	bd70      	pop	{r4, r5, r6, pc}
   13410:	4b06      	ldr	r3, [pc, #24]	; (1342c <__aeabi_d2uiz+0x38>)
   13412:	2200      	movs	r2, #0
   13414:	0020      	movs	r0, r4
   13416:	0029      	movs	r1, r5
   13418:	f002 f9a2 	bl	15760 <__aeabi_dsub>
   1341c:	f002 fcb6 	bl	15d8c <__aeabi_d2iz>
   13420:	2380      	movs	r3, #128	; 0x80
   13422:	061b      	lsls	r3, r3, #24
   13424:	469c      	mov	ip, r3
   13426:	4460      	add	r0, ip
   13428:	e7f1      	b.n	1340e <__aeabi_d2uiz+0x1a>
   1342a:	46c0      	nop			; (mov r8, r8)
   1342c:	41e00000 	.word	0x41e00000

00013430 <__aeabi_f2ulz>:
   13430:	b570      	push	{r4, r5, r6, lr}
   13432:	f002 fd59 	bl	15ee8 <__aeabi_f2d>
   13436:	2200      	movs	r2, #0
   13438:	4b0b      	ldr	r3, [pc, #44]	; (13468 <__aeabi_f2ulz+0x38>)
   1343a:	000d      	movs	r5, r1
   1343c:	0004      	movs	r4, r0
   1343e:	f001 ff0f 	bl	15260 <__aeabi_dmul>
   13442:	f7ff ffd7 	bl	133f4 <__aeabi_d2uiz>
   13446:	0006      	movs	r6, r0
   13448:	f002 fd16 	bl	15e78 <__aeabi_ui2d>
   1344c:	2200      	movs	r2, #0
   1344e:	4b07      	ldr	r3, [pc, #28]	; (1346c <__aeabi_f2ulz+0x3c>)
   13450:	f001 ff06 	bl	15260 <__aeabi_dmul>
   13454:	0002      	movs	r2, r0
   13456:	000b      	movs	r3, r1
   13458:	0020      	movs	r0, r4
   1345a:	0029      	movs	r1, r5
   1345c:	f002 f980 	bl	15760 <__aeabi_dsub>
   13460:	f7ff ffc8 	bl	133f4 <__aeabi_d2uiz>
   13464:	0031      	movs	r1, r6
   13466:	bd70      	pop	{r4, r5, r6, pc}
   13468:	3df00000 	.word	0x3df00000
   1346c:	41f00000 	.word	0x41f00000

00013470 <__udivmoddi4>:
   13470:	b5f0      	push	{r4, r5, r6, r7, lr}
   13472:	4657      	mov	r7, sl
   13474:	464e      	mov	r6, r9
   13476:	4645      	mov	r5, r8
   13478:	46de      	mov	lr, fp
   1347a:	b5e0      	push	{r5, r6, r7, lr}
   1347c:	0004      	movs	r4, r0
   1347e:	b083      	sub	sp, #12
   13480:	000d      	movs	r5, r1
   13482:	4692      	mov	sl, r2
   13484:	4699      	mov	r9, r3
   13486:	428b      	cmp	r3, r1
   13488:	d82f      	bhi.n	134ea <__udivmoddi4+0x7a>
   1348a:	d02c      	beq.n	134e6 <__udivmoddi4+0x76>
   1348c:	4649      	mov	r1, r9
   1348e:	4650      	mov	r0, sl
   13490:	f002 fe24 	bl	160dc <__clzdi2>
   13494:	0029      	movs	r1, r5
   13496:	0006      	movs	r6, r0
   13498:	0020      	movs	r0, r4
   1349a:	f002 fe1f 	bl	160dc <__clzdi2>
   1349e:	1a33      	subs	r3, r6, r0
   134a0:	4698      	mov	r8, r3
   134a2:	3b20      	subs	r3, #32
   134a4:	469b      	mov	fp, r3
   134a6:	d500      	bpl.n	134aa <__udivmoddi4+0x3a>
   134a8:	e074      	b.n	13594 <__udivmoddi4+0x124>
   134aa:	4653      	mov	r3, sl
   134ac:	465a      	mov	r2, fp
   134ae:	4093      	lsls	r3, r2
   134b0:	001f      	movs	r7, r3
   134b2:	4653      	mov	r3, sl
   134b4:	4642      	mov	r2, r8
   134b6:	4093      	lsls	r3, r2
   134b8:	001e      	movs	r6, r3
   134ba:	42af      	cmp	r7, r5
   134bc:	d829      	bhi.n	13512 <__udivmoddi4+0xa2>
   134be:	d026      	beq.n	1350e <__udivmoddi4+0x9e>
   134c0:	465b      	mov	r3, fp
   134c2:	1ba4      	subs	r4, r4, r6
   134c4:	41bd      	sbcs	r5, r7
   134c6:	2b00      	cmp	r3, #0
   134c8:	da00      	bge.n	134cc <__udivmoddi4+0x5c>
   134ca:	e079      	b.n	135c0 <__udivmoddi4+0x150>
   134cc:	2200      	movs	r2, #0
   134ce:	2300      	movs	r3, #0
   134d0:	9200      	str	r2, [sp, #0]
   134d2:	9301      	str	r3, [sp, #4]
   134d4:	2301      	movs	r3, #1
   134d6:	465a      	mov	r2, fp
   134d8:	4093      	lsls	r3, r2
   134da:	9301      	str	r3, [sp, #4]
   134dc:	2301      	movs	r3, #1
   134de:	4642      	mov	r2, r8
   134e0:	4093      	lsls	r3, r2
   134e2:	9300      	str	r3, [sp, #0]
   134e4:	e019      	b.n	1351a <__udivmoddi4+0xaa>
   134e6:	4282      	cmp	r2, r0
   134e8:	d9d0      	bls.n	1348c <__udivmoddi4+0x1c>
   134ea:	2200      	movs	r2, #0
   134ec:	2300      	movs	r3, #0
   134ee:	9200      	str	r2, [sp, #0]
   134f0:	9301      	str	r3, [sp, #4]
   134f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   134f4:	2b00      	cmp	r3, #0
   134f6:	d001      	beq.n	134fc <__udivmoddi4+0x8c>
   134f8:	601c      	str	r4, [r3, #0]
   134fa:	605d      	str	r5, [r3, #4]
   134fc:	9800      	ldr	r0, [sp, #0]
   134fe:	9901      	ldr	r1, [sp, #4]
   13500:	b003      	add	sp, #12
   13502:	bc3c      	pop	{r2, r3, r4, r5}
   13504:	4690      	mov	r8, r2
   13506:	4699      	mov	r9, r3
   13508:	46a2      	mov	sl, r4
   1350a:	46ab      	mov	fp, r5
   1350c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1350e:	42a3      	cmp	r3, r4
   13510:	d9d6      	bls.n	134c0 <__udivmoddi4+0x50>
   13512:	2200      	movs	r2, #0
   13514:	2300      	movs	r3, #0
   13516:	9200      	str	r2, [sp, #0]
   13518:	9301      	str	r3, [sp, #4]
   1351a:	4643      	mov	r3, r8
   1351c:	2b00      	cmp	r3, #0
   1351e:	d0e8      	beq.n	134f2 <__udivmoddi4+0x82>
   13520:	07fb      	lsls	r3, r7, #31
   13522:	0872      	lsrs	r2, r6, #1
   13524:	431a      	orrs	r2, r3
   13526:	4646      	mov	r6, r8
   13528:	087b      	lsrs	r3, r7, #1
   1352a:	e00e      	b.n	1354a <__udivmoddi4+0xda>
   1352c:	42ab      	cmp	r3, r5
   1352e:	d101      	bne.n	13534 <__udivmoddi4+0xc4>
   13530:	42a2      	cmp	r2, r4
   13532:	d80c      	bhi.n	1354e <__udivmoddi4+0xde>
   13534:	1aa4      	subs	r4, r4, r2
   13536:	419d      	sbcs	r5, r3
   13538:	2001      	movs	r0, #1
   1353a:	1924      	adds	r4, r4, r4
   1353c:	416d      	adcs	r5, r5
   1353e:	2100      	movs	r1, #0
   13540:	3e01      	subs	r6, #1
   13542:	1824      	adds	r4, r4, r0
   13544:	414d      	adcs	r5, r1
   13546:	2e00      	cmp	r6, #0
   13548:	d006      	beq.n	13558 <__udivmoddi4+0xe8>
   1354a:	42ab      	cmp	r3, r5
   1354c:	d9ee      	bls.n	1352c <__udivmoddi4+0xbc>
   1354e:	3e01      	subs	r6, #1
   13550:	1924      	adds	r4, r4, r4
   13552:	416d      	adcs	r5, r5
   13554:	2e00      	cmp	r6, #0
   13556:	d1f8      	bne.n	1354a <__udivmoddi4+0xda>
   13558:	465b      	mov	r3, fp
   1355a:	9800      	ldr	r0, [sp, #0]
   1355c:	9901      	ldr	r1, [sp, #4]
   1355e:	1900      	adds	r0, r0, r4
   13560:	4169      	adcs	r1, r5
   13562:	2b00      	cmp	r3, #0
   13564:	db22      	blt.n	135ac <__udivmoddi4+0x13c>
   13566:	002b      	movs	r3, r5
   13568:	465a      	mov	r2, fp
   1356a:	40d3      	lsrs	r3, r2
   1356c:	002a      	movs	r2, r5
   1356e:	4644      	mov	r4, r8
   13570:	40e2      	lsrs	r2, r4
   13572:	001c      	movs	r4, r3
   13574:	465b      	mov	r3, fp
   13576:	0015      	movs	r5, r2
   13578:	2b00      	cmp	r3, #0
   1357a:	db2c      	blt.n	135d6 <__udivmoddi4+0x166>
   1357c:	0026      	movs	r6, r4
   1357e:	409e      	lsls	r6, r3
   13580:	0033      	movs	r3, r6
   13582:	0026      	movs	r6, r4
   13584:	4647      	mov	r7, r8
   13586:	40be      	lsls	r6, r7
   13588:	0032      	movs	r2, r6
   1358a:	1a80      	subs	r0, r0, r2
   1358c:	4199      	sbcs	r1, r3
   1358e:	9000      	str	r0, [sp, #0]
   13590:	9101      	str	r1, [sp, #4]
   13592:	e7ae      	b.n	134f2 <__udivmoddi4+0x82>
   13594:	4642      	mov	r2, r8
   13596:	2320      	movs	r3, #32
   13598:	1a9b      	subs	r3, r3, r2
   1359a:	4652      	mov	r2, sl
   1359c:	40da      	lsrs	r2, r3
   1359e:	4641      	mov	r1, r8
   135a0:	0013      	movs	r3, r2
   135a2:	464a      	mov	r2, r9
   135a4:	408a      	lsls	r2, r1
   135a6:	0017      	movs	r7, r2
   135a8:	431f      	orrs	r7, r3
   135aa:	e782      	b.n	134b2 <__udivmoddi4+0x42>
   135ac:	4642      	mov	r2, r8
   135ae:	2320      	movs	r3, #32
   135b0:	1a9b      	subs	r3, r3, r2
   135b2:	002a      	movs	r2, r5
   135b4:	4646      	mov	r6, r8
   135b6:	409a      	lsls	r2, r3
   135b8:	0023      	movs	r3, r4
   135ba:	40f3      	lsrs	r3, r6
   135bc:	4313      	orrs	r3, r2
   135be:	e7d5      	b.n	1356c <__udivmoddi4+0xfc>
   135c0:	4642      	mov	r2, r8
   135c2:	2320      	movs	r3, #32
   135c4:	2100      	movs	r1, #0
   135c6:	1a9b      	subs	r3, r3, r2
   135c8:	2200      	movs	r2, #0
   135ca:	9100      	str	r1, [sp, #0]
   135cc:	9201      	str	r2, [sp, #4]
   135ce:	2201      	movs	r2, #1
   135d0:	40da      	lsrs	r2, r3
   135d2:	9201      	str	r2, [sp, #4]
   135d4:	e782      	b.n	134dc <__udivmoddi4+0x6c>
   135d6:	4642      	mov	r2, r8
   135d8:	2320      	movs	r3, #32
   135da:	0026      	movs	r6, r4
   135dc:	1a9b      	subs	r3, r3, r2
   135de:	40de      	lsrs	r6, r3
   135e0:	002f      	movs	r7, r5
   135e2:	46b4      	mov	ip, r6
   135e4:	4097      	lsls	r7, r2
   135e6:	4666      	mov	r6, ip
   135e8:	003b      	movs	r3, r7
   135ea:	4333      	orrs	r3, r6
   135ec:	e7c9      	b.n	13582 <__udivmoddi4+0x112>
   135ee:	46c0      	nop			; (mov r8, r8)

000135f0 <__aeabi_fadd>:
   135f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   135f2:	46c6      	mov	lr, r8
   135f4:	024e      	lsls	r6, r1, #9
   135f6:	0247      	lsls	r7, r0, #9
   135f8:	0a76      	lsrs	r6, r6, #9
   135fa:	0a7b      	lsrs	r3, r7, #9
   135fc:	0044      	lsls	r4, r0, #1
   135fe:	0fc5      	lsrs	r5, r0, #31
   13600:	00f7      	lsls	r7, r6, #3
   13602:	0048      	lsls	r0, r1, #1
   13604:	4698      	mov	r8, r3
   13606:	b500      	push	{lr}
   13608:	0e24      	lsrs	r4, r4, #24
   1360a:	002a      	movs	r2, r5
   1360c:	00db      	lsls	r3, r3, #3
   1360e:	0e00      	lsrs	r0, r0, #24
   13610:	0fc9      	lsrs	r1, r1, #31
   13612:	46bc      	mov	ip, r7
   13614:	428d      	cmp	r5, r1
   13616:	d067      	beq.n	136e8 <__aeabi_fadd+0xf8>
   13618:	1a22      	subs	r2, r4, r0
   1361a:	2a00      	cmp	r2, #0
   1361c:	dc00      	bgt.n	13620 <__aeabi_fadd+0x30>
   1361e:	e0a5      	b.n	1376c <__aeabi_fadd+0x17c>
   13620:	2800      	cmp	r0, #0
   13622:	d13a      	bne.n	1369a <__aeabi_fadd+0xaa>
   13624:	2f00      	cmp	r7, #0
   13626:	d100      	bne.n	1362a <__aeabi_fadd+0x3a>
   13628:	e093      	b.n	13752 <__aeabi_fadd+0x162>
   1362a:	1e51      	subs	r1, r2, #1
   1362c:	2900      	cmp	r1, #0
   1362e:	d000      	beq.n	13632 <__aeabi_fadd+0x42>
   13630:	e0bc      	b.n	137ac <__aeabi_fadd+0x1bc>
   13632:	2401      	movs	r4, #1
   13634:	1bdb      	subs	r3, r3, r7
   13636:	015a      	lsls	r2, r3, #5
   13638:	d546      	bpl.n	136c8 <__aeabi_fadd+0xd8>
   1363a:	019b      	lsls	r3, r3, #6
   1363c:	099e      	lsrs	r6, r3, #6
   1363e:	0030      	movs	r0, r6
   13640:	f002 fd2e 	bl	160a0 <__clzsi2>
   13644:	3805      	subs	r0, #5
   13646:	4086      	lsls	r6, r0
   13648:	4284      	cmp	r4, r0
   1364a:	dd00      	ble.n	1364e <__aeabi_fadd+0x5e>
   1364c:	e09d      	b.n	1378a <__aeabi_fadd+0x19a>
   1364e:	1b04      	subs	r4, r0, r4
   13650:	0032      	movs	r2, r6
   13652:	2020      	movs	r0, #32
   13654:	3401      	adds	r4, #1
   13656:	40e2      	lsrs	r2, r4
   13658:	1b04      	subs	r4, r0, r4
   1365a:	40a6      	lsls	r6, r4
   1365c:	0033      	movs	r3, r6
   1365e:	1e5e      	subs	r6, r3, #1
   13660:	41b3      	sbcs	r3, r6
   13662:	2400      	movs	r4, #0
   13664:	4313      	orrs	r3, r2
   13666:	075a      	lsls	r2, r3, #29
   13668:	d004      	beq.n	13674 <__aeabi_fadd+0x84>
   1366a:	220f      	movs	r2, #15
   1366c:	401a      	ands	r2, r3
   1366e:	2a04      	cmp	r2, #4
   13670:	d000      	beq.n	13674 <__aeabi_fadd+0x84>
   13672:	3304      	adds	r3, #4
   13674:	015a      	lsls	r2, r3, #5
   13676:	d529      	bpl.n	136cc <__aeabi_fadd+0xdc>
   13678:	3401      	adds	r4, #1
   1367a:	2cff      	cmp	r4, #255	; 0xff
   1367c:	d100      	bne.n	13680 <__aeabi_fadd+0x90>
   1367e:	e081      	b.n	13784 <__aeabi_fadd+0x194>
   13680:	002a      	movs	r2, r5
   13682:	019b      	lsls	r3, r3, #6
   13684:	0a5b      	lsrs	r3, r3, #9
   13686:	b2e4      	uxtb	r4, r4
   13688:	025b      	lsls	r3, r3, #9
   1368a:	05e4      	lsls	r4, r4, #23
   1368c:	0a58      	lsrs	r0, r3, #9
   1368e:	07d2      	lsls	r2, r2, #31
   13690:	4320      	orrs	r0, r4
   13692:	4310      	orrs	r0, r2
   13694:	bc04      	pop	{r2}
   13696:	4690      	mov	r8, r2
   13698:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1369a:	2cff      	cmp	r4, #255	; 0xff
   1369c:	d0e3      	beq.n	13666 <__aeabi_fadd+0x76>
   1369e:	2180      	movs	r1, #128	; 0x80
   136a0:	0038      	movs	r0, r7
   136a2:	04c9      	lsls	r1, r1, #19
   136a4:	4308      	orrs	r0, r1
   136a6:	4684      	mov	ip, r0
   136a8:	2a1b      	cmp	r2, #27
   136aa:	dd00      	ble.n	136ae <__aeabi_fadd+0xbe>
   136ac:	e082      	b.n	137b4 <__aeabi_fadd+0x1c4>
   136ae:	2020      	movs	r0, #32
   136b0:	4661      	mov	r1, ip
   136b2:	40d1      	lsrs	r1, r2
   136b4:	1a82      	subs	r2, r0, r2
   136b6:	4660      	mov	r0, ip
   136b8:	4090      	lsls	r0, r2
   136ba:	0002      	movs	r2, r0
   136bc:	1e50      	subs	r0, r2, #1
   136be:	4182      	sbcs	r2, r0
   136c0:	430a      	orrs	r2, r1
   136c2:	1a9b      	subs	r3, r3, r2
   136c4:	015a      	lsls	r2, r3, #5
   136c6:	d4b8      	bmi.n	1363a <__aeabi_fadd+0x4a>
   136c8:	075a      	lsls	r2, r3, #29
   136ca:	d1ce      	bne.n	1366a <__aeabi_fadd+0x7a>
   136cc:	08de      	lsrs	r6, r3, #3
   136ce:	002a      	movs	r2, r5
   136d0:	2cff      	cmp	r4, #255	; 0xff
   136d2:	d13a      	bne.n	1374a <__aeabi_fadd+0x15a>
   136d4:	2e00      	cmp	r6, #0
   136d6:	d100      	bne.n	136da <__aeabi_fadd+0xea>
   136d8:	e0ae      	b.n	13838 <__aeabi_fadd+0x248>
   136da:	2380      	movs	r3, #128	; 0x80
   136dc:	03db      	lsls	r3, r3, #15
   136de:	4333      	orrs	r3, r6
   136e0:	025b      	lsls	r3, r3, #9
   136e2:	0a5b      	lsrs	r3, r3, #9
   136e4:	24ff      	movs	r4, #255	; 0xff
   136e6:	e7cf      	b.n	13688 <__aeabi_fadd+0x98>
   136e8:	1a21      	subs	r1, r4, r0
   136ea:	2900      	cmp	r1, #0
   136ec:	dd52      	ble.n	13794 <__aeabi_fadd+0x1a4>
   136ee:	2800      	cmp	r0, #0
   136f0:	d031      	beq.n	13756 <__aeabi_fadd+0x166>
   136f2:	2cff      	cmp	r4, #255	; 0xff
   136f4:	d0b7      	beq.n	13666 <__aeabi_fadd+0x76>
   136f6:	2080      	movs	r0, #128	; 0x80
   136f8:	003e      	movs	r6, r7
   136fa:	04c0      	lsls	r0, r0, #19
   136fc:	4306      	orrs	r6, r0
   136fe:	46b4      	mov	ip, r6
   13700:	291b      	cmp	r1, #27
   13702:	dd00      	ble.n	13706 <__aeabi_fadd+0x116>
   13704:	e0aa      	b.n	1385c <__aeabi_fadd+0x26c>
   13706:	2620      	movs	r6, #32
   13708:	4660      	mov	r0, ip
   1370a:	40c8      	lsrs	r0, r1
   1370c:	1a71      	subs	r1, r6, r1
   1370e:	4666      	mov	r6, ip
   13710:	408e      	lsls	r6, r1
   13712:	0031      	movs	r1, r6
   13714:	1e4e      	subs	r6, r1, #1
   13716:	41b1      	sbcs	r1, r6
   13718:	4301      	orrs	r1, r0
   1371a:	185b      	adds	r3, r3, r1
   1371c:	0159      	lsls	r1, r3, #5
   1371e:	d5d3      	bpl.n	136c8 <__aeabi_fadd+0xd8>
   13720:	3401      	adds	r4, #1
   13722:	2cff      	cmp	r4, #255	; 0xff
   13724:	d100      	bne.n	13728 <__aeabi_fadd+0x138>
   13726:	e087      	b.n	13838 <__aeabi_fadd+0x248>
   13728:	2201      	movs	r2, #1
   1372a:	4978      	ldr	r1, [pc, #480]	; (1390c <__aeabi_fadd+0x31c>)
   1372c:	401a      	ands	r2, r3
   1372e:	085b      	lsrs	r3, r3, #1
   13730:	400b      	ands	r3, r1
   13732:	4313      	orrs	r3, r2
   13734:	e797      	b.n	13666 <__aeabi_fadd+0x76>
   13736:	2c00      	cmp	r4, #0
   13738:	d000      	beq.n	1373c <__aeabi_fadd+0x14c>
   1373a:	e0a7      	b.n	1388c <__aeabi_fadd+0x29c>
   1373c:	2b00      	cmp	r3, #0
   1373e:	d000      	beq.n	13742 <__aeabi_fadd+0x152>
   13740:	e0b6      	b.n	138b0 <__aeabi_fadd+0x2c0>
   13742:	1e3b      	subs	r3, r7, #0
   13744:	d162      	bne.n	1380c <__aeabi_fadd+0x21c>
   13746:	2600      	movs	r6, #0
   13748:	2200      	movs	r2, #0
   1374a:	0273      	lsls	r3, r6, #9
   1374c:	0a5b      	lsrs	r3, r3, #9
   1374e:	b2e4      	uxtb	r4, r4
   13750:	e79a      	b.n	13688 <__aeabi_fadd+0x98>
   13752:	0014      	movs	r4, r2
   13754:	e787      	b.n	13666 <__aeabi_fadd+0x76>
   13756:	2f00      	cmp	r7, #0
   13758:	d04d      	beq.n	137f6 <__aeabi_fadd+0x206>
   1375a:	1e48      	subs	r0, r1, #1
   1375c:	2800      	cmp	r0, #0
   1375e:	d157      	bne.n	13810 <__aeabi_fadd+0x220>
   13760:	4463      	add	r3, ip
   13762:	2401      	movs	r4, #1
   13764:	015a      	lsls	r2, r3, #5
   13766:	d5af      	bpl.n	136c8 <__aeabi_fadd+0xd8>
   13768:	2402      	movs	r4, #2
   1376a:	e7dd      	b.n	13728 <__aeabi_fadd+0x138>
   1376c:	2a00      	cmp	r2, #0
   1376e:	d124      	bne.n	137ba <__aeabi_fadd+0x1ca>
   13770:	1c62      	adds	r2, r4, #1
   13772:	b2d2      	uxtb	r2, r2
   13774:	2a01      	cmp	r2, #1
   13776:	ddde      	ble.n	13736 <__aeabi_fadd+0x146>
   13778:	1bde      	subs	r6, r3, r7
   1377a:	0172      	lsls	r2, r6, #5
   1377c:	d535      	bpl.n	137ea <__aeabi_fadd+0x1fa>
   1377e:	1afe      	subs	r6, r7, r3
   13780:	000d      	movs	r5, r1
   13782:	e75c      	b.n	1363e <__aeabi_fadd+0x4e>
   13784:	002a      	movs	r2, r5
   13786:	2300      	movs	r3, #0
   13788:	e77e      	b.n	13688 <__aeabi_fadd+0x98>
   1378a:	0033      	movs	r3, r6
   1378c:	4a60      	ldr	r2, [pc, #384]	; (13910 <__aeabi_fadd+0x320>)
   1378e:	1a24      	subs	r4, r4, r0
   13790:	4013      	ands	r3, r2
   13792:	e768      	b.n	13666 <__aeabi_fadd+0x76>
   13794:	2900      	cmp	r1, #0
   13796:	d163      	bne.n	13860 <__aeabi_fadd+0x270>
   13798:	1c61      	adds	r1, r4, #1
   1379a:	b2c8      	uxtb	r0, r1
   1379c:	2801      	cmp	r0, #1
   1379e:	dd4e      	ble.n	1383e <__aeabi_fadd+0x24e>
   137a0:	29ff      	cmp	r1, #255	; 0xff
   137a2:	d049      	beq.n	13838 <__aeabi_fadd+0x248>
   137a4:	4463      	add	r3, ip
   137a6:	085b      	lsrs	r3, r3, #1
   137a8:	000c      	movs	r4, r1
   137aa:	e75c      	b.n	13666 <__aeabi_fadd+0x76>
   137ac:	2aff      	cmp	r2, #255	; 0xff
   137ae:	d041      	beq.n	13834 <__aeabi_fadd+0x244>
   137b0:	000a      	movs	r2, r1
   137b2:	e779      	b.n	136a8 <__aeabi_fadd+0xb8>
   137b4:	2201      	movs	r2, #1
   137b6:	1a9b      	subs	r3, r3, r2
   137b8:	e784      	b.n	136c4 <__aeabi_fadd+0xd4>
   137ba:	2c00      	cmp	r4, #0
   137bc:	d01d      	beq.n	137fa <__aeabi_fadd+0x20a>
   137be:	28ff      	cmp	r0, #255	; 0xff
   137c0:	d022      	beq.n	13808 <__aeabi_fadd+0x218>
   137c2:	2480      	movs	r4, #128	; 0x80
   137c4:	04e4      	lsls	r4, r4, #19
   137c6:	4252      	negs	r2, r2
   137c8:	4323      	orrs	r3, r4
   137ca:	2a1b      	cmp	r2, #27
   137cc:	dd00      	ble.n	137d0 <__aeabi_fadd+0x1e0>
   137ce:	e08a      	b.n	138e6 <__aeabi_fadd+0x2f6>
   137d0:	001c      	movs	r4, r3
   137d2:	2520      	movs	r5, #32
   137d4:	40d4      	lsrs	r4, r2
   137d6:	1aaa      	subs	r2, r5, r2
   137d8:	4093      	lsls	r3, r2
   137da:	1e5a      	subs	r2, r3, #1
   137dc:	4193      	sbcs	r3, r2
   137de:	4323      	orrs	r3, r4
   137e0:	4662      	mov	r2, ip
   137e2:	0004      	movs	r4, r0
   137e4:	1ad3      	subs	r3, r2, r3
   137e6:	000d      	movs	r5, r1
   137e8:	e725      	b.n	13636 <__aeabi_fadd+0x46>
   137ea:	2e00      	cmp	r6, #0
   137ec:	d000      	beq.n	137f0 <__aeabi_fadd+0x200>
   137ee:	e726      	b.n	1363e <__aeabi_fadd+0x4e>
   137f0:	2200      	movs	r2, #0
   137f2:	2400      	movs	r4, #0
   137f4:	e7a9      	b.n	1374a <__aeabi_fadd+0x15a>
   137f6:	000c      	movs	r4, r1
   137f8:	e735      	b.n	13666 <__aeabi_fadd+0x76>
   137fa:	2b00      	cmp	r3, #0
   137fc:	d04d      	beq.n	1389a <__aeabi_fadd+0x2aa>
   137fe:	43d2      	mvns	r2, r2
   13800:	2a00      	cmp	r2, #0
   13802:	d0ed      	beq.n	137e0 <__aeabi_fadd+0x1f0>
   13804:	28ff      	cmp	r0, #255	; 0xff
   13806:	d1e0      	bne.n	137ca <__aeabi_fadd+0x1da>
   13808:	4663      	mov	r3, ip
   1380a:	24ff      	movs	r4, #255	; 0xff
   1380c:	000d      	movs	r5, r1
   1380e:	e72a      	b.n	13666 <__aeabi_fadd+0x76>
   13810:	29ff      	cmp	r1, #255	; 0xff
   13812:	d00f      	beq.n	13834 <__aeabi_fadd+0x244>
   13814:	0001      	movs	r1, r0
   13816:	e773      	b.n	13700 <__aeabi_fadd+0x110>
   13818:	2b00      	cmp	r3, #0
   1381a:	d061      	beq.n	138e0 <__aeabi_fadd+0x2f0>
   1381c:	24ff      	movs	r4, #255	; 0xff
   1381e:	2f00      	cmp	r7, #0
   13820:	d100      	bne.n	13824 <__aeabi_fadd+0x234>
   13822:	e720      	b.n	13666 <__aeabi_fadd+0x76>
   13824:	2280      	movs	r2, #128	; 0x80
   13826:	4641      	mov	r1, r8
   13828:	03d2      	lsls	r2, r2, #15
   1382a:	4211      	tst	r1, r2
   1382c:	d002      	beq.n	13834 <__aeabi_fadd+0x244>
   1382e:	4216      	tst	r6, r2
   13830:	d100      	bne.n	13834 <__aeabi_fadd+0x244>
   13832:	003b      	movs	r3, r7
   13834:	24ff      	movs	r4, #255	; 0xff
   13836:	e716      	b.n	13666 <__aeabi_fadd+0x76>
   13838:	24ff      	movs	r4, #255	; 0xff
   1383a:	2300      	movs	r3, #0
   1383c:	e724      	b.n	13688 <__aeabi_fadd+0x98>
   1383e:	2c00      	cmp	r4, #0
   13840:	d1ea      	bne.n	13818 <__aeabi_fadd+0x228>
   13842:	2b00      	cmp	r3, #0
   13844:	d058      	beq.n	138f8 <__aeabi_fadd+0x308>
   13846:	2f00      	cmp	r7, #0
   13848:	d100      	bne.n	1384c <__aeabi_fadd+0x25c>
   1384a:	e70c      	b.n	13666 <__aeabi_fadd+0x76>
   1384c:	4463      	add	r3, ip
   1384e:	015a      	lsls	r2, r3, #5
   13850:	d400      	bmi.n	13854 <__aeabi_fadd+0x264>
   13852:	e739      	b.n	136c8 <__aeabi_fadd+0xd8>
   13854:	4a2e      	ldr	r2, [pc, #184]	; (13910 <__aeabi_fadd+0x320>)
   13856:	000c      	movs	r4, r1
   13858:	4013      	ands	r3, r2
   1385a:	e704      	b.n	13666 <__aeabi_fadd+0x76>
   1385c:	2101      	movs	r1, #1
   1385e:	e75c      	b.n	1371a <__aeabi_fadd+0x12a>
   13860:	2c00      	cmp	r4, #0
   13862:	d11e      	bne.n	138a2 <__aeabi_fadd+0x2b2>
   13864:	2b00      	cmp	r3, #0
   13866:	d040      	beq.n	138ea <__aeabi_fadd+0x2fa>
   13868:	43c9      	mvns	r1, r1
   1386a:	2900      	cmp	r1, #0
   1386c:	d00b      	beq.n	13886 <__aeabi_fadd+0x296>
   1386e:	28ff      	cmp	r0, #255	; 0xff
   13870:	d036      	beq.n	138e0 <__aeabi_fadd+0x2f0>
   13872:	291b      	cmp	r1, #27
   13874:	dc47      	bgt.n	13906 <__aeabi_fadd+0x316>
   13876:	001c      	movs	r4, r3
   13878:	2620      	movs	r6, #32
   1387a:	40cc      	lsrs	r4, r1
   1387c:	1a71      	subs	r1, r6, r1
   1387e:	408b      	lsls	r3, r1
   13880:	1e59      	subs	r1, r3, #1
   13882:	418b      	sbcs	r3, r1
   13884:	4323      	orrs	r3, r4
   13886:	4463      	add	r3, ip
   13888:	0004      	movs	r4, r0
   1388a:	e747      	b.n	1371c <__aeabi_fadd+0x12c>
   1388c:	2b00      	cmp	r3, #0
   1388e:	d118      	bne.n	138c2 <__aeabi_fadd+0x2d2>
   13890:	1e3b      	subs	r3, r7, #0
   13892:	d02d      	beq.n	138f0 <__aeabi_fadd+0x300>
   13894:	000d      	movs	r5, r1
   13896:	24ff      	movs	r4, #255	; 0xff
   13898:	e6e5      	b.n	13666 <__aeabi_fadd+0x76>
   1389a:	003b      	movs	r3, r7
   1389c:	0004      	movs	r4, r0
   1389e:	000d      	movs	r5, r1
   138a0:	e6e1      	b.n	13666 <__aeabi_fadd+0x76>
   138a2:	28ff      	cmp	r0, #255	; 0xff
   138a4:	d01c      	beq.n	138e0 <__aeabi_fadd+0x2f0>
   138a6:	2480      	movs	r4, #128	; 0x80
   138a8:	04e4      	lsls	r4, r4, #19
   138aa:	4249      	negs	r1, r1
   138ac:	4323      	orrs	r3, r4
   138ae:	e7e0      	b.n	13872 <__aeabi_fadd+0x282>
   138b0:	2f00      	cmp	r7, #0
   138b2:	d100      	bne.n	138b6 <__aeabi_fadd+0x2c6>
   138b4:	e6d7      	b.n	13666 <__aeabi_fadd+0x76>
   138b6:	1bde      	subs	r6, r3, r7
   138b8:	0172      	lsls	r2, r6, #5
   138ba:	d51f      	bpl.n	138fc <__aeabi_fadd+0x30c>
   138bc:	1afb      	subs	r3, r7, r3
   138be:	000d      	movs	r5, r1
   138c0:	e6d1      	b.n	13666 <__aeabi_fadd+0x76>
   138c2:	24ff      	movs	r4, #255	; 0xff
   138c4:	2f00      	cmp	r7, #0
   138c6:	d100      	bne.n	138ca <__aeabi_fadd+0x2da>
   138c8:	e6cd      	b.n	13666 <__aeabi_fadd+0x76>
   138ca:	2280      	movs	r2, #128	; 0x80
   138cc:	4640      	mov	r0, r8
   138ce:	03d2      	lsls	r2, r2, #15
   138d0:	4210      	tst	r0, r2
   138d2:	d0af      	beq.n	13834 <__aeabi_fadd+0x244>
   138d4:	4216      	tst	r6, r2
   138d6:	d1ad      	bne.n	13834 <__aeabi_fadd+0x244>
   138d8:	003b      	movs	r3, r7
   138da:	000d      	movs	r5, r1
   138dc:	24ff      	movs	r4, #255	; 0xff
   138de:	e6c2      	b.n	13666 <__aeabi_fadd+0x76>
   138e0:	4663      	mov	r3, ip
   138e2:	24ff      	movs	r4, #255	; 0xff
   138e4:	e6bf      	b.n	13666 <__aeabi_fadd+0x76>
   138e6:	2301      	movs	r3, #1
   138e8:	e77a      	b.n	137e0 <__aeabi_fadd+0x1f0>
   138ea:	003b      	movs	r3, r7
   138ec:	0004      	movs	r4, r0
   138ee:	e6ba      	b.n	13666 <__aeabi_fadd+0x76>
   138f0:	2680      	movs	r6, #128	; 0x80
   138f2:	2200      	movs	r2, #0
   138f4:	03f6      	lsls	r6, r6, #15
   138f6:	e6f0      	b.n	136da <__aeabi_fadd+0xea>
   138f8:	003b      	movs	r3, r7
   138fa:	e6b4      	b.n	13666 <__aeabi_fadd+0x76>
   138fc:	1e33      	subs	r3, r6, #0
   138fe:	d000      	beq.n	13902 <__aeabi_fadd+0x312>
   13900:	e6e2      	b.n	136c8 <__aeabi_fadd+0xd8>
   13902:	2200      	movs	r2, #0
   13904:	e721      	b.n	1374a <__aeabi_fadd+0x15a>
   13906:	2301      	movs	r3, #1
   13908:	e7bd      	b.n	13886 <__aeabi_fadd+0x296>
   1390a:	46c0      	nop			; (mov r8, r8)
   1390c:	7dffffff 	.word	0x7dffffff
   13910:	fbffffff 	.word	0xfbffffff

00013914 <__aeabi_fdiv>:
   13914:	b5f0      	push	{r4, r5, r6, r7, lr}
   13916:	4657      	mov	r7, sl
   13918:	464e      	mov	r6, r9
   1391a:	46de      	mov	lr, fp
   1391c:	4645      	mov	r5, r8
   1391e:	b5e0      	push	{r5, r6, r7, lr}
   13920:	0244      	lsls	r4, r0, #9
   13922:	0043      	lsls	r3, r0, #1
   13924:	0fc6      	lsrs	r6, r0, #31
   13926:	b083      	sub	sp, #12
   13928:	1c0f      	adds	r7, r1, #0
   1392a:	0a64      	lsrs	r4, r4, #9
   1392c:	0e1b      	lsrs	r3, r3, #24
   1392e:	46b2      	mov	sl, r6
   13930:	d053      	beq.n	139da <__aeabi_fdiv+0xc6>
   13932:	2bff      	cmp	r3, #255	; 0xff
   13934:	d027      	beq.n	13986 <__aeabi_fdiv+0x72>
   13936:	2280      	movs	r2, #128	; 0x80
   13938:	00e4      	lsls	r4, r4, #3
   1393a:	04d2      	lsls	r2, r2, #19
   1393c:	4314      	orrs	r4, r2
   1393e:	227f      	movs	r2, #127	; 0x7f
   13940:	4252      	negs	r2, r2
   13942:	4690      	mov	r8, r2
   13944:	4498      	add	r8, r3
   13946:	2300      	movs	r3, #0
   13948:	4699      	mov	r9, r3
   1394a:	469b      	mov	fp, r3
   1394c:	027d      	lsls	r5, r7, #9
   1394e:	0078      	lsls	r0, r7, #1
   13950:	0ffb      	lsrs	r3, r7, #31
   13952:	0a6d      	lsrs	r5, r5, #9
   13954:	0e00      	lsrs	r0, r0, #24
   13956:	9300      	str	r3, [sp, #0]
   13958:	d024      	beq.n	139a4 <__aeabi_fdiv+0x90>
   1395a:	28ff      	cmp	r0, #255	; 0xff
   1395c:	d046      	beq.n	139ec <__aeabi_fdiv+0xd8>
   1395e:	2380      	movs	r3, #128	; 0x80
   13960:	2100      	movs	r1, #0
   13962:	00ed      	lsls	r5, r5, #3
   13964:	04db      	lsls	r3, r3, #19
   13966:	431d      	orrs	r5, r3
   13968:	387f      	subs	r0, #127	; 0x7f
   1396a:	4647      	mov	r7, r8
   1396c:	1a38      	subs	r0, r7, r0
   1396e:	464f      	mov	r7, r9
   13970:	430f      	orrs	r7, r1
   13972:	00bf      	lsls	r7, r7, #2
   13974:	46b9      	mov	r9, r7
   13976:	0033      	movs	r3, r6
   13978:	9a00      	ldr	r2, [sp, #0]
   1397a:	4f87      	ldr	r7, [pc, #540]	; (13b98 <__aeabi_fdiv+0x284>)
   1397c:	4053      	eors	r3, r2
   1397e:	464a      	mov	r2, r9
   13980:	58ba      	ldr	r2, [r7, r2]
   13982:	9301      	str	r3, [sp, #4]
   13984:	4697      	mov	pc, r2
   13986:	2c00      	cmp	r4, #0
   13988:	d14e      	bne.n	13a28 <__aeabi_fdiv+0x114>
   1398a:	2308      	movs	r3, #8
   1398c:	4699      	mov	r9, r3
   1398e:	33f7      	adds	r3, #247	; 0xf7
   13990:	4698      	mov	r8, r3
   13992:	3bfd      	subs	r3, #253	; 0xfd
   13994:	469b      	mov	fp, r3
   13996:	027d      	lsls	r5, r7, #9
   13998:	0078      	lsls	r0, r7, #1
   1399a:	0ffb      	lsrs	r3, r7, #31
   1399c:	0a6d      	lsrs	r5, r5, #9
   1399e:	0e00      	lsrs	r0, r0, #24
   139a0:	9300      	str	r3, [sp, #0]
   139a2:	d1da      	bne.n	1395a <__aeabi_fdiv+0x46>
   139a4:	2d00      	cmp	r5, #0
   139a6:	d126      	bne.n	139f6 <__aeabi_fdiv+0xe2>
   139a8:	2000      	movs	r0, #0
   139aa:	2101      	movs	r1, #1
   139ac:	0033      	movs	r3, r6
   139ae:	9a00      	ldr	r2, [sp, #0]
   139b0:	4f7a      	ldr	r7, [pc, #488]	; (13b9c <__aeabi_fdiv+0x288>)
   139b2:	4053      	eors	r3, r2
   139b4:	4642      	mov	r2, r8
   139b6:	1a10      	subs	r0, r2, r0
   139b8:	464a      	mov	r2, r9
   139ba:	430a      	orrs	r2, r1
   139bc:	0092      	lsls	r2, r2, #2
   139be:	58ba      	ldr	r2, [r7, r2]
   139c0:	001d      	movs	r5, r3
   139c2:	4697      	mov	pc, r2
   139c4:	9b00      	ldr	r3, [sp, #0]
   139c6:	002c      	movs	r4, r5
   139c8:	469a      	mov	sl, r3
   139ca:	468b      	mov	fp, r1
   139cc:	465b      	mov	r3, fp
   139ce:	2b02      	cmp	r3, #2
   139d0:	d131      	bne.n	13a36 <__aeabi_fdiv+0x122>
   139d2:	4653      	mov	r3, sl
   139d4:	21ff      	movs	r1, #255	; 0xff
   139d6:	2400      	movs	r4, #0
   139d8:	e038      	b.n	13a4c <__aeabi_fdiv+0x138>
   139da:	2c00      	cmp	r4, #0
   139dc:	d117      	bne.n	13a0e <__aeabi_fdiv+0xfa>
   139de:	2304      	movs	r3, #4
   139e0:	4699      	mov	r9, r3
   139e2:	2300      	movs	r3, #0
   139e4:	4698      	mov	r8, r3
   139e6:	3301      	adds	r3, #1
   139e8:	469b      	mov	fp, r3
   139ea:	e7af      	b.n	1394c <__aeabi_fdiv+0x38>
   139ec:	20ff      	movs	r0, #255	; 0xff
   139ee:	2d00      	cmp	r5, #0
   139f0:	d10b      	bne.n	13a0a <__aeabi_fdiv+0xf6>
   139f2:	2102      	movs	r1, #2
   139f4:	e7da      	b.n	139ac <__aeabi_fdiv+0x98>
   139f6:	0028      	movs	r0, r5
   139f8:	f002 fb52 	bl	160a0 <__clzsi2>
   139fc:	1f43      	subs	r3, r0, #5
   139fe:	409d      	lsls	r5, r3
   13a00:	2376      	movs	r3, #118	; 0x76
   13a02:	425b      	negs	r3, r3
   13a04:	1a18      	subs	r0, r3, r0
   13a06:	2100      	movs	r1, #0
   13a08:	e7af      	b.n	1396a <__aeabi_fdiv+0x56>
   13a0a:	2103      	movs	r1, #3
   13a0c:	e7ad      	b.n	1396a <__aeabi_fdiv+0x56>
   13a0e:	0020      	movs	r0, r4
   13a10:	f002 fb46 	bl	160a0 <__clzsi2>
   13a14:	1f43      	subs	r3, r0, #5
   13a16:	409c      	lsls	r4, r3
   13a18:	2376      	movs	r3, #118	; 0x76
   13a1a:	425b      	negs	r3, r3
   13a1c:	1a1b      	subs	r3, r3, r0
   13a1e:	4698      	mov	r8, r3
   13a20:	2300      	movs	r3, #0
   13a22:	4699      	mov	r9, r3
   13a24:	469b      	mov	fp, r3
   13a26:	e791      	b.n	1394c <__aeabi_fdiv+0x38>
   13a28:	230c      	movs	r3, #12
   13a2a:	4699      	mov	r9, r3
   13a2c:	33f3      	adds	r3, #243	; 0xf3
   13a2e:	4698      	mov	r8, r3
   13a30:	3bfc      	subs	r3, #252	; 0xfc
   13a32:	469b      	mov	fp, r3
   13a34:	e78a      	b.n	1394c <__aeabi_fdiv+0x38>
   13a36:	2b03      	cmp	r3, #3
   13a38:	d100      	bne.n	13a3c <__aeabi_fdiv+0x128>
   13a3a:	e0a5      	b.n	13b88 <__aeabi_fdiv+0x274>
   13a3c:	4655      	mov	r5, sl
   13a3e:	2b01      	cmp	r3, #1
   13a40:	d000      	beq.n	13a44 <__aeabi_fdiv+0x130>
   13a42:	e081      	b.n	13b48 <__aeabi_fdiv+0x234>
   13a44:	2301      	movs	r3, #1
   13a46:	2100      	movs	r1, #0
   13a48:	2400      	movs	r4, #0
   13a4a:	402b      	ands	r3, r5
   13a4c:	0264      	lsls	r4, r4, #9
   13a4e:	05c9      	lsls	r1, r1, #23
   13a50:	0a60      	lsrs	r0, r4, #9
   13a52:	07db      	lsls	r3, r3, #31
   13a54:	4308      	orrs	r0, r1
   13a56:	4318      	orrs	r0, r3
   13a58:	b003      	add	sp, #12
   13a5a:	bc3c      	pop	{r2, r3, r4, r5}
   13a5c:	4690      	mov	r8, r2
   13a5e:	4699      	mov	r9, r3
   13a60:	46a2      	mov	sl, r4
   13a62:	46ab      	mov	fp, r5
   13a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13a66:	2480      	movs	r4, #128	; 0x80
   13a68:	2300      	movs	r3, #0
   13a6a:	03e4      	lsls	r4, r4, #15
   13a6c:	21ff      	movs	r1, #255	; 0xff
   13a6e:	e7ed      	b.n	13a4c <__aeabi_fdiv+0x138>
   13a70:	21ff      	movs	r1, #255	; 0xff
   13a72:	2400      	movs	r4, #0
   13a74:	e7ea      	b.n	13a4c <__aeabi_fdiv+0x138>
   13a76:	2301      	movs	r3, #1
   13a78:	1a59      	subs	r1, r3, r1
   13a7a:	291b      	cmp	r1, #27
   13a7c:	dd66      	ble.n	13b4c <__aeabi_fdiv+0x238>
   13a7e:	9a01      	ldr	r2, [sp, #4]
   13a80:	4013      	ands	r3, r2
   13a82:	2100      	movs	r1, #0
   13a84:	2400      	movs	r4, #0
   13a86:	e7e1      	b.n	13a4c <__aeabi_fdiv+0x138>
   13a88:	2380      	movs	r3, #128	; 0x80
   13a8a:	03db      	lsls	r3, r3, #15
   13a8c:	421c      	tst	r4, r3
   13a8e:	d038      	beq.n	13b02 <__aeabi_fdiv+0x1ee>
   13a90:	421d      	tst	r5, r3
   13a92:	d051      	beq.n	13b38 <__aeabi_fdiv+0x224>
   13a94:	431c      	orrs	r4, r3
   13a96:	0264      	lsls	r4, r4, #9
   13a98:	0a64      	lsrs	r4, r4, #9
   13a9a:	0033      	movs	r3, r6
   13a9c:	21ff      	movs	r1, #255	; 0xff
   13a9e:	e7d5      	b.n	13a4c <__aeabi_fdiv+0x138>
   13aa0:	0163      	lsls	r3, r4, #5
   13aa2:	016c      	lsls	r4, r5, #5
   13aa4:	42a3      	cmp	r3, r4
   13aa6:	d23b      	bcs.n	13b20 <__aeabi_fdiv+0x20c>
   13aa8:	261b      	movs	r6, #27
   13aaa:	2100      	movs	r1, #0
   13aac:	3801      	subs	r0, #1
   13aae:	2501      	movs	r5, #1
   13ab0:	001f      	movs	r7, r3
   13ab2:	0049      	lsls	r1, r1, #1
   13ab4:	005b      	lsls	r3, r3, #1
   13ab6:	2f00      	cmp	r7, #0
   13ab8:	db01      	blt.n	13abe <__aeabi_fdiv+0x1aa>
   13aba:	429c      	cmp	r4, r3
   13abc:	d801      	bhi.n	13ac2 <__aeabi_fdiv+0x1ae>
   13abe:	1b1b      	subs	r3, r3, r4
   13ac0:	4329      	orrs	r1, r5
   13ac2:	3e01      	subs	r6, #1
   13ac4:	2e00      	cmp	r6, #0
   13ac6:	d1f3      	bne.n	13ab0 <__aeabi_fdiv+0x19c>
   13ac8:	001c      	movs	r4, r3
   13aca:	1e63      	subs	r3, r4, #1
   13acc:	419c      	sbcs	r4, r3
   13ace:	430c      	orrs	r4, r1
   13ad0:	0001      	movs	r1, r0
   13ad2:	317f      	adds	r1, #127	; 0x7f
   13ad4:	2900      	cmp	r1, #0
   13ad6:	ddce      	ble.n	13a76 <__aeabi_fdiv+0x162>
   13ad8:	0763      	lsls	r3, r4, #29
   13ada:	d004      	beq.n	13ae6 <__aeabi_fdiv+0x1d2>
   13adc:	230f      	movs	r3, #15
   13ade:	4023      	ands	r3, r4
   13ae0:	2b04      	cmp	r3, #4
   13ae2:	d000      	beq.n	13ae6 <__aeabi_fdiv+0x1d2>
   13ae4:	3404      	adds	r4, #4
   13ae6:	0123      	lsls	r3, r4, #4
   13ae8:	d503      	bpl.n	13af2 <__aeabi_fdiv+0x1de>
   13aea:	0001      	movs	r1, r0
   13aec:	4b2c      	ldr	r3, [pc, #176]	; (13ba0 <__aeabi_fdiv+0x28c>)
   13aee:	3180      	adds	r1, #128	; 0x80
   13af0:	401c      	ands	r4, r3
   13af2:	29fe      	cmp	r1, #254	; 0xfe
   13af4:	dd0d      	ble.n	13b12 <__aeabi_fdiv+0x1fe>
   13af6:	2301      	movs	r3, #1
   13af8:	9a01      	ldr	r2, [sp, #4]
   13afa:	21ff      	movs	r1, #255	; 0xff
   13afc:	4013      	ands	r3, r2
   13afe:	2400      	movs	r4, #0
   13b00:	e7a4      	b.n	13a4c <__aeabi_fdiv+0x138>
   13b02:	2380      	movs	r3, #128	; 0x80
   13b04:	03db      	lsls	r3, r3, #15
   13b06:	431c      	orrs	r4, r3
   13b08:	0264      	lsls	r4, r4, #9
   13b0a:	0a64      	lsrs	r4, r4, #9
   13b0c:	0033      	movs	r3, r6
   13b0e:	21ff      	movs	r1, #255	; 0xff
   13b10:	e79c      	b.n	13a4c <__aeabi_fdiv+0x138>
   13b12:	2301      	movs	r3, #1
   13b14:	9a01      	ldr	r2, [sp, #4]
   13b16:	01a4      	lsls	r4, r4, #6
   13b18:	0a64      	lsrs	r4, r4, #9
   13b1a:	b2c9      	uxtb	r1, r1
   13b1c:	4013      	ands	r3, r2
   13b1e:	e795      	b.n	13a4c <__aeabi_fdiv+0x138>
   13b20:	1b1b      	subs	r3, r3, r4
   13b22:	261a      	movs	r6, #26
   13b24:	2101      	movs	r1, #1
   13b26:	e7c2      	b.n	13aae <__aeabi_fdiv+0x19a>
   13b28:	9b00      	ldr	r3, [sp, #0]
   13b2a:	468b      	mov	fp, r1
   13b2c:	469a      	mov	sl, r3
   13b2e:	2400      	movs	r4, #0
   13b30:	e74c      	b.n	139cc <__aeabi_fdiv+0xb8>
   13b32:	0263      	lsls	r3, r4, #9
   13b34:	d5e5      	bpl.n	13b02 <__aeabi_fdiv+0x1ee>
   13b36:	2500      	movs	r5, #0
   13b38:	2480      	movs	r4, #128	; 0x80
   13b3a:	03e4      	lsls	r4, r4, #15
   13b3c:	432c      	orrs	r4, r5
   13b3e:	0264      	lsls	r4, r4, #9
   13b40:	0a64      	lsrs	r4, r4, #9
   13b42:	9b00      	ldr	r3, [sp, #0]
   13b44:	21ff      	movs	r1, #255	; 0xff
   13b46:	e781      	b.n	13a4c <__aeabi_fdiv+0x138>
   13b48:	9501      	str	r5, [sp, #4]
   13b4a:	e7c1      	b.n	13ad0 <__aeabi_fdiv+0x1bc>
   13b4c:	0023      	movs	r3, r4
   13b4e:	2020      	movs	r0, #32
   13b50:	40cb      	lsrs	r3, r1
   13b52:	1a41      	subs	r1, r0, r1
   13b54:	408c      	lsls	r4, r1
   13b56:	1e61      	subs	r1, r4, #1
   13b58:	418c      	sbcs	r4, r1
   13b5a:	431c      	orrs	r4, r3
   13b5c:	0763      	lsls	r3, r4, #29
   13b5e:	d004      	beq.n	13b6a <__aeabi_fdiv+0x256>
   13b60:	230f      	movs	r3, #15
   13b62:	4023      	ands	r3, r4
   13b64:	2b04      	cmp	r3, #4
   13b66:	d000      	beq.n	13b6a <__aeabi_fdiv+0x256>
   13b68:	3404      	adds	r4, #4
   13b6a:	0163      	lsls	r3, r4, #5
   13b6c:	d505      	bpl.n	13b7a <__aeabi_fdiv+0x266>
   13b6e:	2301      	movs	r3, #1
   13b70:	9a01      	ldr	r2, [sp, #4]
   13b72:	2101      	movs	r1, #1
   13b74:	4013      	ands	r3, r2
   13b76:	2400      	movs	r4, #0
   13b78:	e768      	b.n	13a4c <__aeabi_fdiv+0x138>
   13b7a:	2301      	movs	r3, #1
   13b7c:	9a01      	ldr	r2, [sp, #4]
   13b7e:	01a4      	lsls	r4, r4, #6
   13b80:	0a64      	lsrs	r4, r4, #9
   13b82:	4013      	ands	r3, r2
   13b84:	2100      	movs	r1, #0
   13b86:	e761      	b.n	13a4c <__aeabi_fdiv+0x138>
   13b88:	2380      	movs	r3, #128	; 0x80
   13b8a:	03db      	lsls	r3, r3, #15
   13b8c:	431c      	orrs	r4, r3
   13b8e:	0264      	lsls	r4, r4, #9
   13b90:	0a64      	lsrs	r4, r4, #9
   13b92:	4653      	mov	r3, sl
   13b94:	21ff      	movs	r1, #255	; 0xff
   13b96:	e759      	b.n	13a4c <__aeabi_fdiv+0x138>
   13b98:	00018320 	.word	0x00018320
   13b9c:	00018360 	.word	0x00018360
   13ba0:	f7ffffff 	.word	0xf7ffffff

00013ba4 <__eqsf2>:
   13ba4:	b570      	push	{r4, r5, r6, lr}
   13ba6:	0042      	lsls	r2, r0, #1
   13ba8:	0245      	lsls	r5, r0, #9
   13baa:	024e      	lsls	r6, r1, #9
   13bac:	004c      	lsls	r4, r1, #1
   13bae:	0fc3      	lsrs	r3, r0, #31
   13bb0:	0a6d      	lsrs	r5, r5, #9
   13bb2:	0e12      	lsrs	r2, r2, #24
   13bb4:	0a76      	lsrs	r6, r6, #9
   13bb6:	0e24      	lsrs	r4, r4, #24
   13bb8:	0fc9      	lsrs	r1, r1, #31
   13bba:	2001      	movs	r0, #1
   13bbc:	2aff      	cmp	r2, #255	; 0xff
   13bbe:	d006      	beq.n	13bce <__eqsf2+0x2a>
   13bc0:	2cff      	cmp	r4, #255	; 0xff
   13bc2:	d003      	beq.n	13bcc <__eqsf2+0x28>
   13bc4:	42a2      	cmp	r2, r4
   13bc6:	d101      	bne.n	13bcc <__eqsf2+0x28>
   13bc8:	42b5      	cmp	r5, r6
   13bca:	d006      	beq.n	13bda <__eqsf2+0x36>
   13bcc:	bd70      	pop	{r4, r5, r6, pc}
   13bce:	2d00      	cmp	r5, #0
   13bd0:	d1fc      	bne.n	13bcc <__eqsf2+0x28>
   13bd2:	2cff      	cmp	r4, #255	; 0xff
   13bd4:	d1fa      	bne.n	13bcc <__eqsf2+0x28>
   13bd6:	2e00      	cmp	r6, #0
   13bd8:	d1f8      	bne.n	13bcc <__eqsf2+0x28>
   13bda:	428b      	cmp	r3, r1
   13bdc:	d006      	beq.n	13bec <__eqsf2+0x48>
   13bde:	2001      	movs	r0, #1
   13be0:	2a00      	cmp	r2, #0
   13be2:	d1f3      	bne.n	13bcc <__eqsf2+0x28>
   13be4:	0028      	movs	r0, r5
   13be6:	1e45      	subs	r5, r0, #1
   13be8:	41a8      	sbcs	r0, r5
   13bea:	e7ef      	b.n	13bcc <__eqsf2+0x28>
   13bec:	2000      	movs	r0, #0
   13bee:	e7ed      	b.n	13bcc <__eqsf2+0x28>

00013bf0 <__gesf2>:
   13bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
   13bf2:	0042      	lsls	r2, r0, #1
   13bf4:	0245      	lsls	r5, r0, #9
   13bf6:	024c      	lsls	r4, r1, #9
   13bf8:	0fc3      	lsrs	r3, r0, #31
   13bfa:	0048      	lsls	r0, r1, #1
   13bfc:	0a6d      	lsrs	r5, r5, #9
   13bfe:	0e12      	lsrs	r2, r2, #24
   13c00:	0a64      	lsrs	r4, r4, #9
   13c02:	0e00      	lsrs	r0, r0, #24
   13c04:	0fc9      	lsrs	r1, r1, #31
   13c06:	2aff      	cmp	r2, #255	; 0xff
   13c08:	d01e      	beq.n	13c48 <__gesf2+0x58>
   13c0a:	28ff      	cmp	r0, #255	; 0xff
   13c0c:	d021      	beq.n	13c52 <__gesf2+0x62>
   13c0e:	2a00      	cmp	r2, #0
   13c10:	d10a      	bne.n	13c28 <__gesf2+0x38>
   13c12:	426e      	negs	r6, r5
   13c14:	416e      	adcs	r6, r5
   13c16:	b2f6      	uxtb	r6, r6
   13c18:	2800      	cmp	r0, #0
   13c1a:	d10f      	bne.n	13c3c <__gesf2+0x4c>
   13c1c:	2c00      	cmp	r4, #0
   13c1e:	d10d      	bne.n	13c3c <__gesf2+0x4c>
   13c20:	2000      	movs	r0, #0
   13c22:	2d00      	cmp	r5, #0
   13c24:	d009      	beq.n	13c3a <__gesf2+0x4a>
   13c26:	e005      	b.n	13c34 <__gesf2+0x44>
   13c28:	2800      	cmp	r0, #0
   13c2a:	d101      	bne.n	13c30 <__gesf2+0x40>
   13c2c:	2c00      	cmp	r4, #0
   13c2e:	d001      	beq.n	13c34 <__gesf2+0x44>
   13c30:	428b      	cmp	r3, r1
   13c32:	d011      	beq.n	13c58 <__gesf2+0x68>
   13c34:	2101      	movs	r1, #1
   13c36:	4258      	negs	r0, r3
   13c38:	4308      	orrs	r0, r1
   13c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13c3c:	2e00      	cmp	r6, #0
   13c3e:	d0f7      	beq.n	13c30 <__gesf2+0x40>
   13c40:	2001      	movs	r0, #1
   13c42:	3901      	subs	r1, #1
   13c44:	4308      	orrs	r0, r1
   13c46:	e7f8      	b.n	13c3a <__gesf2+0x4a>
   13c48:	2d00      	cmp	r5, #0
   13c4a:	d0de      	beq.n	13c0a <__gesf2+0x1a>
   13c4c:	2002      	movs	r0, #2
   13c4e:	4240      	negs	r0, r0
   13c50:	e7f3      	b.n	13c3a <__gesf2+0x4a>
   13c52:	2c00      	cmp	r4, #0
   13c54:	d0db      	beq.n	13c0e <__gesf2+0x1e>
   13c56:	e7f9      	b.n	13c4c <__gesf2+0x5c>
   13c58:	4282      	cmp	r2, r0
   13c5a:	dceb      	bgt.n	13c34 <__gesf2+0x44>
   13c5c:	db04      	blt.n	13c68 <__gesf2+0x78>
   13c5e:	42a5      	cmp	r5, r4
   13c60:	d8e8      	bhi.n	13c34 <__gesf2+0x44>
   13c62:	2000      	movs	r0, #0
   13c64:	42a5      	cmp	r5, r4
   13c66:	d2e8      	bcs.n	13c3a <__gesf2+0x4a>
   13c68:	2101      	movs	r1, #1
   13c6a:	1e58      	subs	r0, r3, #1
   13c6c:	4308      	orrs	r0, r1
   13c6e:	e7e4      	b.n	13c3a <__gesf2+0x4a>

00013c70 <__lesf2>:
   13c70:	b5f0      	push	{r4, r5, r6, r7, lr}
   13c72:	0042      	lsls	r2, r0, #1
   13c74:	024d      	lsls	r5, r1, #9
   13c76:	004c      	lsls	r4, r1, #1
   13c78:	0246      	lsls	r6, r0, #9
   13c7a:	0a76      	lsrs	r6, r6, #9
   13c7c:	0e12      	lsrs	r2, r2, #24
   13c7e:	0fc3      	lsrs	r3, r0, #31
   13c80:	0a6d      	lsrs	r5, r5, #9
   13c82:	0e24      	lsrs	r4, r4, #24
   13c84:	0fc9      	lsrs	r1, r1, #31
   13c86:	2aff      	cmp	r2, #255	; 0xff
   13c88:	d016      	beq.n	13cb8 <__lesf2+0x48>
   13c8a:	2cff      	cmp	r4, #255	; 0xff
   13c8c:	d018      	beq.n	13cc0 <__lesf2+0x50>
   13c8e:	2a00      	cmp	r2, #0
   13c90:	d10a      	bne.n	13ca8 <__lesf2+0x38>
   13c92:	4270      	negs	r0, r6
   13c94:	4170      	adcs	r0, r6
   13c96:	b2c0      	uxtb	r0, r0
   13c98:	2c00      	cmp	r4, #0
   13c9a:	d015      	beq.n	13cc8 <__lesf2+0x58>
   13c9c:	2800      	cmp	r0, #0
   13c9e:	d005      	beq.n	13cac <__lesf2+0x3c>
   13ca0:	2001      	movs	r0, #1
   13ca2:	3901      	subs	r1, #1
   13ca4:	4308      	orrs	r0, r1
   13ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13ca8:	2c00      	cmp	r4, #0
   13caa:	d013      	beq.n	13cd4 <__lesf2+0x64>
   13cac:	4299      	cmp	r1, r3
   13cae:	d014      	beq.n	13cda <__lesf2+0x6a>
   13cb0:	2001      	movs	r0, #1
   13cb2:	425b      	negs	r3, r3
   13cb4:	4318      	orrs	r0, r3
   13cb6:	e7f6      	b.n	13ca6 <__lesf2+0x36>
   13cb8:	2002      	movs	r0, #2
   13cba:	2e00      	cmp	r6, #0
   13cbc:	d1f3      	bne.n	13ca6 <__lesf2+0x36>
   13cbe:	e7e4      	b.n	13c8a <__lesf2+0x1a>
   13cc0:	2002      	movs	r0, #2
   13cc2:	2d00      	cmp	r5, #0
   13cc4:	d1ef      	bne.n	13ca6 <__lesf2+0x36>
   13cc6:	e7e2      	b.n	13c8e <__lesf2+0x1e>
   13cc8:	2d00      	cmp	r5, #0
   13cca:	d1e7      	bne.n	13c9c <__lesf2+0x2c>
   13ccc:	2000      	movs	r0, #0
   13cce:	2e00      	cmp	r6, #0
   13cd0:	d0e9      	beq.n	13ca6 <__lesf2+0x36>
   13cd2:	e7ed      	b.n	13cb0 <__lesf2+0x40>
   13cd4:	2d00      	cmp	r5, #0
   13cd6:	d1e9      	bne.n	13cac <__lesf2+0x3c>
   13cd8:	e7ea      	b.n	13cb0 <__lesf2+0x40>
   13cda:	42a2      	cmp	r2, r4
   13cdc:	dc06      	bgt.n	13cec <__lesf2+0x7c>
   13cde:	dbdf      	blt.n	13ca0 <__lesf2+0x30>
   13ce0:	42ae      	cmp	r6, r5
   13ce2:	d803      	bhi.n	13cec <__lesf2+0x7c>
   13ce4:	2000      	movs	r0, #0
   13ce6:	42ae      	cmp	r6, r5
   13ce8:	d3da      	bcc.n	13ca0 <__lesf2+0x30>
   13cea:	e7dc      	b.n	13ca6 <__lesf2+0x36>
   13cec:	2001      	movs	r0, #1
   13cee:	4249      	negs	r1, r1
   13cf0:	4308      	orrs	r0, r1
   13cf2:	e7d8      	b.n	13ca6 <__lesf2+0x36>

00013cf4 <__aeabi_fmul>:
   13cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13cf6:	4657      	mov	r7, sl
   13cf8:	464e      	mov	r6, r9
   13cfa:	4645      	mov	r5, r8
   13cfc:	46de      	mov	lr, fp
   13cfe:	b5e0      	push	{r5, r6, r7, lr}
   13d00:	0247      	lsls	r7, r0, #9
   13d02:	0046      	lsls	r6, r0, #1
   13d04:	4688      	mov	r8, r1
   13d06:	0a7f      	lsrs	r7, r7, #9
   13d08:	0e36      	lsrs	r6, r6, #24
   13d0a:	0fc4      	lsrs	r4, r0, #31
   13d0c:	2e00      	cmp	r6, #0
   13d0e:	d047      	beq.n	13da0 <__aeabi_fmul+0xac>
   13d10:	2eff      	cmp	r6, #255	; 0xff
   13d12:	d024      	beq.n	13d5e <__aeabi_fmul+0x6a>
   13d14:	00fb      	lsls	r3, r7, #3
   13d16:	2780      	movs	r7, #128	; 0x80
   13d18:	04ff      	lsls	r7, r7, #19
   13d1a:	431f      	orrs	r7, r3
   13d1c:	2300      	movs	r3, #0
   13d1e:	4699      	mov	r9, r3
   13d20:	469a      	mov	sl, r3
   13d22:	3e7f      	subs	r6, #127	; 0x7f
   13d24:	4643      	mov	r3, r8
   13d26:	025d      	lsls	r5, r3, #9
   13d28:	0058      	lsls	r0, r3, #1
   13d2a:	0fdb      	lsrs	r3, r3, #31
   13d2c:	0a6d      	lsrs	r5, r5, #9
   13d2e:	0e00      	lsrs	r0, r0, #24
   13d30:	4698      	mov	r8, r3
   13d32:	d043      	beq.n	13dbc <__aeabi_fmul+0xc8>
   13d34:	28ff      	cmp	r0, #255	; 0xff
   13d36:	d03b      	beq.n	13db0 <__aeabi_fmul+0xbc>
   13d38:	00eb      	lsls	r3, r5, #3
   13d3a:	2580      	movs	r5, #128	; 0x80
   13d3c:	2200      	movs	r2, #0
   13d3e:	04ed      	lsls	r5, r5, #19
   13d40:	431d      	orrs	r5, r3
   13d42:	387f      	subs	r0, #127	; 0x7f
   13d44:	1836      	adds	r6, r6, r0
   13d46:	1c73      	adds	r3, r6, #1
   13d48:	4641      	mov	r1, r8
   13d4a:	469b      	mov	fp, r3
   13d4c:	464b      	mov	r3, r9
   13d4e:	4061      	eors	r1, r4
   13d50:	4313      	orrs	r3, r2
   13d52:	2b0f      	cmp	r3, #15
   13d54:	d864      	bhi.n	13e20 <__aeabi_fmul+0x12c>
   13d56:	4875      	ldr	r0, [pc, #468]	; (13f2c <__aeabi_fmul+0x238>)
   13d58:	009b      	lsls	r3, r3, #2
   13d5a:	58c3      	ldr	r3, [r0, r3]
   13d5c:	469f      	mov	pc, r3
   13d5e:	2f00      	cmp	r7, #0
   13d60:	d142      	bne.n	13de8 <__aeabi_fmul+0xf4>
   13d62:	2308      	movs	r3, #8
   13d64:	4699      	mov	r9, r3
   13d66:	3b06      	subs	r3, #6
   13d68:	26ff      	movs	r6, #255	; 0xff
   13d6a:	469a      	mov	sl, r3
   13d6c:	e7da      	b.n	13d24 <__aeabi_fmul+0x30>
   13d6e:	4641      	mov	r1, r8
   13d70:	2a02      	cmp	r2, #2
   13d72:	d028      	beq.n	13dc6 <__aeabi_fmul+0xd2>
   13d74:	2a03      	cmp	r2, #3
   13d76:	d100      	bne.n	13d7a <__aeabi_fmul+0x86>
   13d78:	e0ce      	b.n	13f18 <__aeabi_fmul+0x224>
   13d7a:	2a01      	cmp	r2, #1
   13d7c:	d000      	beq.n	13d80 <__aeabi_fmul+0x8c>
   13d7e:	e0ac      	b.n	13eda <__aeabi_fmul+0x1e6>
   13d80:	4011      	ands	r1, r2
   13d82:	2000      	movs	r0, #0
   13d84:	2200      	movs	r2, #0
   13d86:	b2cc      	uxtb	r4, r1
   13d88:	0240      	lsls	r0, r0, #9
   13d8a:	05d2      	lsls	r2, r2, #23
   13d8c:	0a40      	lsrs	r0, r0, #9
   13d8e:	07e4      	lsls	r4, r4, #31
   13d90:	4310      	orrs	r0, r2
   13d92:	4320      	orrs	r0, r4
   13d94:	bc3c      	pop	{r2, r3, r4, r5}
   13d96:	4690      	mov	r8, r2
   13d98:	4699      	mov	r9, r3
   13d9a:	46a2      	mov	sl, r4
   13d9c:	46ab      	mov	fp, r5
   13d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13da0:	2f00      	cmp	r7, #0
   13da2:	d115      	bne.n	13dd0 <__aeabi_fmul+0xdc>
   13da4:	2304      	movs	r3, #4
   13da6:	4699      	mov	r9, r3
   13da8:	3b03      	subs	r3, #3
   13daa:	2600      	movs	r6, #0
   13dac:	469a      	mov	sl, r3
   13dae:	e7b9      	b.n	13d24 <__aeabi_fmul+0x30>
   13db0:	20ff      	movs	r0, #255	; 0xff
   13db2:	2202      	movs	r2, #2
   13db4:	2d00      	cmp	r5, #0
   13db6:	d0c5      	beq.n	13d44 <__aeabi_fmul+0x50>
   13db8:	2203      	movs	r2, #3
   13dba:	e7c3      	b.n	13d44 <__aeabi_fmul+0x50>
   13dbc:	2d00      	cmp	r5, #0
   13dbe:	d119      	bne.n	13df4 <__aeabi_fmul+0x100>
   13dc0:	2000      	movs	r0, #0
   13dc2:	2201      	movs	r2, #1
   13dc4:	e7be      	b.n	13d44 <__aeabi_fmul+0x50>
   13dc6:	2401      	movs	r4, #1
   13dc8:	22ff      	movs	r2, #255	; 0xff
   13dca:	400c      	ands	r4, r1
   13dcc:	2000      	movs	r0, #0
   13dce:	e7db      	b.n	13d88 <__aeabi_fmul+0x94>
   13dd0:	0038      	movs	r0, r7
   13dd2:	f002 f965 	bl	160a0 <__clzsi2>
   13dd6:	2676      	movs	r6, #118	; 0x76
   13dd8:	1f43      	subs	r3, r0, #5
   13dda:	409f      	lsls	r7, r3
   13ddc:	2300      	movs	r3, #0
   13dde:	4276      	negs	r6, r6
   13de0:	1a36      	subs	r6, r6, r0
   13de2:	4699      	mov	r9, r3
   13de4:	469a      	mov	sl, r3
   13de6:	e79d      	b.n	13d24 <__aeabi_fmul+0x30>
   13de8:	230c      	movs	r3, #12
   13dea:	4699      	mov	r9, r3
   13dec:	3b09      	subs	r3, #9
   13dee:	26ff      	movs	r6, #255	; 0xff
   13df0:	469a      	mov	sl, r3
   13df2:	e797      	b.n	13d24 <__aeabi_fmul+0x30>
   13df4:	0028      	movs	r0, r5
   13df6:	f002 f953 	bl	160a0 <__clzsi2>
   13dfa:	1f43      	subs	r3, r0, #5
   13dfc:	409d      	lsls	r5, r3
   13dfe:	2376      	movs	r3, #118	; 0x76
   13e00:	425b      	negs	r3, r3
   13e02:	1a18      	subs	r0, r3, r0
   13e04:	2200      	movs	r2, #0
   13e06:	e79d      	b.n	13d44 <__aeabi_fmul+0x50>
   13e08:	2080      	movs	r0, #128	; 0x80
   13e0a:	2400      	movs	r4, #0
   13e0c:	03c0      	lsls	r0, r0, #15
   13e0e:	22ff      	movs	r2, #255	; 0xff
   13e10:	e7ba      	b.n	13d88 <__aeabi_fmul+0x94>
   13e12:	003d      	movs	r5, r7
   13e14:	4652      	mov	r2, sl
   13e16:	e7ab      	b.n	13d70 <__aeabi_fmul+0x7c>
   13e18:	003d      	movs	r5, r7
   13e1a:	0021      	movs	r1, r4
   13e1c:	4652      	mov	r2, sl
   13e1e:	e7a7      	b.n	13d70 <__aeabi_fmul+0x7c>
   13e20:	0c3b      	lsrs	r3, r7, #16
   13e22:	469c      	mov	ip, r3
   13e24:	042a      	lsls	r2, r5, #16
   13e26:	0c12      	lsrs	r2, r2, #16
   13e28:	0c2b      	lsrs	r3, r5, #16
   13e2a:	0014      	movs	r4, r2
   13e2c:	4660      	mov	r0, ip
   13e2e:	4665      	mov	r5, ip
   13e30:	043f      	lsls	r7, r7, #16
   13e32:	0c3f      	lsrs	r7, r7, #16
   13e34:	437c      	muls	r4, r7
   13e36:	4342      	muls	r2, r0
   13e38:	435d      	muls	r5, r3
   13e3a:	437b      	muls	r3, r7
   13e3c:	0c27      	lsrs	r7, r4, #16
   13e3e:	189b      	adds	r3, r3, r2
   13e40:	18ff      	adds	r7, r7, r3
   13e42:	42ba      	cmp	r2, r7
   13e44:	d903      	bls.n	13e4e <__aeabi_fmul+0x15a>
   13e46:	2380      	movs	r3, #128	; 0x80
   13e48:	025b      	lsls	r3, r3, #9
   13e4a:	469c      	mov	ip, r3
   13e4c:	4465      	add	r5, ip
   13e4e:	0424      	lsls	r4, r4, #16
   13e50:	043a      	lsls	r2, r7, #16
   13e52:	0c24      	lsrs	r4, r4, #16
   13e54:	1912      	adds	r2, r2, r4
   13e56:	0193      	lsls	r3, r2, #6
   13e58:	1e5c      	subs	r4, r3, #1
   13e5a:	41a3      	sbcs	r3, r4
   13e5c:	0c3f      	lsrs	r7, r7, #16
   13e5e:	0e92      	lsrs	r2, r2, #26
   13e60:	197d      	adds	r5, r7, r5
   13e62:	431a      	orrs	r2, r3
   13e64:	01ad      	lsls	r5, r5, #6
   13e66:	4315      	orrs	r5, r2
   13e68:	012b      	lsls	r3, r5, #4
   13e6a:	d504      	bpl.n	13e76 <__aeabi_fmul+0x182>
   13e6c:	2301      	movs	r3, #1
   13e6e:	465e      	mov	r6, fp
   13e70:	086a      	lsrs	r2, r5, #1
   13e72:	401d      	ands	r5, r3
   13e74:	4315      	orrs	r5, r2
   13e76:	0032      	movs	r2, r6
   13e78:	327f      	adds	r2, #127	; 0x7f
   13e7a:	2a00      	cmp	r2, #0
   13e7c:	dd25      	ble.n	13eca <__aeabi_fmul+0x1d6>
   13e7e:	076b      	lsls	r3, r5, #29
   13e80:	d004      	beq.n	13e8c <__aeabi_fmul+0x198>
   13e82:	230f      	movs	r3, #15
   13e84:	402b      	ands	r3, r5
   13e86:	2b04      	cmp	r3, #4
   13e88:	d000      	beq.n	13e8c <__aeabi_fmul+0x198>
   13e8a:	3504      	adds	r5, #4
   13e8c:	012b      	lsls	r3, r5, #4
   13e8e:	d503      	bpl.n	13e98 <__aeabi_fmul+0x1a4>
   13e90:	0032      	movs	r2, r6
   13e92:	4b27      	ldr	r3, [pc, #156]	; (13f30 <__aeabi_fmul+0x23c>)
   13e94:	3280      	adds	r2, #128	; 0x80
   13e96:	401d      	ands	r5, r3
   13e98:	2afe      	cmp	r2, #254	; 0xfe
   13e9a:	dc94      	bgt.n	13dc6 <__aeabi_fmul+0xd2>
   13e9c:	2401      	movs	r4, #1
   13e9e:	01a8      	lsls	r0, r5, #6
   13ea0:	0a40      	lsrs	r0, r0, #9
   13ea2:	b2d2      	uxtb	r2, r2
   13ea4:	400c      	ands	r4, r1
   13ea6:	e76f      	b.n	13d88 <__aeabi_fmul+0x94>
   13ea8:	2080      	movs	r0, #128	; 0x80
   13eaa:	03c0      	lsls	r0, r0, #15
   13eac:	4207      	tst	r7, r0
   13eae:	d007      	beq.n	13ec0 <__aeabi_fmul+0x1cc>
   13eb0:	4205      	tst	r5, r0
   13eb2:	d105      	bne.n	13ec0 <__aeabi_fmul+0x1cc>
   13eb4:	4328      	orrs	r0, r5
   13eb6:	0240      	lsls	r0, r0, #9
   13eb8:	0a40      	lsrs	r0, r0, #9
   13eba:	4644      	mov	r4, r8
   13ebc:	22ff      	movs	r2, #255	; 0xff
   13ebe:	e763      	b.n	13d88 <__aeabi_fmul+0x94>
   13ec0:	4338      	orrs	r0, r7
   13ec2:	0240      	lsls	r0, r0, #9
   13ec4:	0a40      	lsrs	r0, r0, #9
   13ec6:	22ff      	movs	r2, #255	; 0xff
   13ec8:	e75e      	b.n	13d88 <__aeabi_fmul+0x94>
   13eca:	2401      	movs	r4, #1
   13ecc:	1aa3      	subs	r3, r4, r2
   13ece:	2b1b      	cmp	r3, #27
   13ed0:	dd05      	ble.n	13ede <__aeabi_fmul+0x1ea>
   13ed2:	400c      	ands	r4, r1
   13ed4:	2200      	movs	r2, #0
   13ed6:	2000      	movs	r0, #0
   13ed8:	e756      	b.n	13d88 <__aeabi_fmul+0x94>
   13eda:	465e      	mov	r6, fp
   13edc:	e7cb      	b.n	13e76 <__aeabi_fmul+0x182>
   13ede:	002a      	movs	r2, r5
   13ee0:	2020      	movs	r0, #32
   13ee2:	40da      	lsrs	r2, r3
   13ee4:	1ac3      	subs	r3, r0, r3
   13ee6:	409d      	lsls	r5, r3
   13ee8:	002b      	movs	r3, r5
   13eea:	1e5d      	subs	r5, r3, #1
   13eec:	41ab      	sbcs	r3, r5
   13eee:	4313      	orrs	r3, r2
   13ef0:	075a      	lsls	r2, r3, #29
   13ef2:	d004      	beq.n	13efe <__aeabi_fmul+0x20a>
   13ef4:	220f      	movs	r2, #15
   13ef6:	401a      	ands	r2, r3
   13ef8:	2a04      	cmp	r2, #4
   13efa:	d000      	beq.n	13efe <__aeabi_fmul+0x20a>
   13efc:	3304      	adds	r3, #4
   13efe:	015a      	lsls	r2, r3, #5
   13f00:	d504      	bpl.n	13f0c <__aeabi_fmul+0x218>
   13f02:	2401      	movs	r4, #1
   13f04:	2201      	movs	r2, #1
   13f06:	400c      	ands	r4, r1
   13f08:	2000      	movs	r0, #0
   13f0a:	e73d      	b.n	13d88 <__aeabi_fmul+0x94>
   13f0c:	2401      	movs	r4, #1
   13f0e:	019b      	lsls	r3, r3, #6
   13f10:	0a58      	lsrs	r0, r3, #9
   13f12:	400c      	ands	r4, r1
   13f14:	2200      	movs	r2, #0
   13f16:	e737      	b.n	13d88 <__aeabi_fmul+0x94>
   13f18:	2080      	movs	r0, #128	; 0x80
   13f1a:	2401      	movs	r4, #1
   13f1c:	03c0      	lsls	r0, r0, #15
   13f1e:	4328      	orrs	r0, r5
   13f20:	0240      	lsls	r0, r0, #9
   13f22:	0a40      	lsrs	r0, r0, #9
   13f24:	400c      	ands	r4, r1
   13f26:	22ff      	movs	r2, #255	; 0xff
   13f28:	e72e      	b.n	13d88 <__aeabi_fmul+0x94>
   13f2a:	46c0      	nop			; (mov r8, r8)
   13f2c:	000183a0 	.word	0x000183a0
   13f30:	f7ffffff 	.word	0xf7ffffff

00013f34 <__aeabi_fsub>:
   13f34:	b5f0      	push	{r4, r5, r6, r7, lr}
   13f36:	464f      	mov	r7, r9
   13f38:	46d6      	mov	lr, sl
   13f3a:	4646      	mov	r6, r8
   13f3c:	0044      	lsls	r4, r0, #1
   13f3e:	b5c0      	push	{r6, r7, lr}
   13f40:	0fc2      	lsrs	r2, r0, #31
   13f42:	0247      	lsls	r7, r0, #9
   13f44:	0248      	lsls	r0, r1, #9
   13f46:	0a40      	lsrs	r0, r0, #9
   13f48:	4684      	mov	ip, r0
   13f4a:	4666      	mov	r6, ip
   13f4c:	0a7b      	lsrs	r3, r7, #9
   13f4e:	0048      	lsls	r0, r1, #1
   13f50:	0fc9      	lsrs	r1, r1, #31
   13f52:	469a      	mov	sl, r3
   13f54:	0e24      	lsrs	r4, r4, #24
   13f56:	0015      	movs	r5, r2
   13f58:	00db      	lsls	r3, r3, #3
   13f5a:	0e00      	lsrs	r0, r0, #24
   13f5c:	4689      	mov	r9, r1
   13f5e:	00f6      	lsls	r6, r6, #3
   13f60:	28ff      	cmp	r0, #255	; 0xff
   13f62:	d100      	bne.n	13f66 <__aeabi_fsub+0x32>
   13f64:	e08f      	b.n	14086 <__aeabi_fsub+0x152>
   13f66:	2101      	movs	r1, #1
   13f68:	464f      	mov	r7, r9
   13f6a:	404f      	eors	r7, r1
   13f6c:	0039      	movs	r1, r7
   13f6e:	4291      	cmp	r1, r2
   13f70:	d066      	beq.n	14040 <__aeabi_fsub+0x10c>
   13f72:	1a22      	subs	r2, r4, r0
   13f74:	2a00      	cmp	r2, #0
   13f76:	dc00      	bgt.n	13f7a <__aeabi_fsub+0x46>
   13f78:	e09d      	b.n	140b6 <__aeabi_fsub+0x182>
   13f7a:	2800      	cmp	r0, #0
   13f7c:	d13d      	bne.n	13ffa <__aeabi_fsub+0xc6>
   13f7e:	2e00      	cmp	r6, #0
   13f80:	d100      	bne.n	13f84 <__aeabi_fsub+0x50>
   13f82:	e08b      	b.n	1409c <__aeabi_fsub+0x168>
   13f84:	1e51      	subs	r1, r2, #1
   13f86:	2900      	cmp	r1, #0
   13f88:	d000      	beq.n	13f8c <__aeabi_fsub+0x58>
   13f8a:	e0b5      	b.n	140f8 <__aeabi_fsub+0x1c4>
   13f8c:	2401      	movs	r4, #1
   13f8e:	1b9b      	subs	r3, r3, r6
   13f90:	015a      	lsls	r2, r3, #5
   13f92:	d544      	bpl.n	1401e <__aeabi_fsub+0xea>
   13f94:	019b      	lsls	r3, r3, #6
   13f96:	099f      	lsrs	r7, r3, #6
   13f98:	0038      	movs	r0, r7
   13f9a:	f002 f881 	bl	160a0 <__clzsi2>
   13f9e:	3805      	subs	r0, #5
   13fa0:	4087      	lsls	r7, r0
   13fa2:	4284      	cmp	r4, r0
   13fa4:	dd00      	ble.n	13fa8 <__aeabi_fsub+0x74>
   13fa6:	e096      	b.n	140d6 <__aeabi_fsub+0x1a2>
   13fa8:	1b04      	subs	r4, r0, r4
   13faa:	003a      	movs	r2, r7
   13fac:	2020      	movs	r0, #32
   13fae:	3401      	adds	r4, #1
   13fb0:	40e2      	lsrs	r2, r4
   13fb2:	1b04      	subs	r4, r0, r4
   13fb4:	40a7      	lsls	r7, r4
   13fb6:	003b      	movs	r3, r7
   13fb8:	1e5f      	subs	r7, r3, #1
   13fba:	41bb      	sbcs	r3, r7
   13fbc:	2400      	movs	r4, #0
   13fbe:	4313      	orrs	r3, r2
   13fc0:	075a      	lsls	r2, r3, #29
   13fc2:	d004      	beq.n	13fce <__aeabi_fsub+0x9a>
   13fc4:	220f      	movs	r2, #15
   13fc6:	401a      	ands	r2, r3
   13fc8:	2a04      	cmp	r2, #4
   13fca:	d000      	beq.n	13fce <__aeabi_fsub+0x9a>
   13fcc:	3304      	adds	r3, #4
   13fce:	015a      	lsls	r2, r3, #5
   13fd0:	d527      	bpl.n	14022 <__aeabi_fsub+0xee>
   13fd2:	3401      	adds	r4, #1
   13fd4:	2cff      	cmp	r4, #255	; 0xff
   13fd6:	d100      	bne.n	13fda <__aeabi_fsub+0xa6>
   13fd8:	e079      	b.n	140ce <__aeabi_fsub+0x19a>
   13fda:	2201      	movs	r2, #1
   13fdc:	019b      	lsls	r3, r3, #6
   13fde:	0a5b      	lsrs	r3, r3, #9
   13fe0:	b2e4      	uxtb	r4, r4
   13fe2:	402a      	ands	r2, r5
   13fe4:	025b      	lsls	r3, r3, #9
   13fe6:	05e4      	lsls	r4, r4, #23
   13fe8:	0a58      	lsrs	r0, r3, #9
   13fea:	07d2      	lsls	r2, r2, #31
   13fec:	4320      	orrs	r0, r4
   13fee:	4310      	orrs	r0, r2
   13ff0:	bc1c      	pop	{r2, r3, r4}
   13ff2:	4690      	mov	r8, r2
   13ff4:	4699      	mov	r9, r3
   13ff6:	46a2      	mov	sl, r4
   13ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13ffa:	2cff      	cmp	r4, #255	; 0xff
   13ffc:	d0e0      	beq.n	13fc0 <__aeabi_fsub+0x8c>
   13ffe:	2180      	movs	r1, #128	; 0x80
   14000:	04c9      	lsls	r1, r1, #19
   14002:	430e      	orrs	r6, r1
   14004:	2a1b      	cmp	r2, #27
   14006:	dc7b      	bgt.n	14100 <__aeabi_fsub+0x1cc>
   14008:	0031      	movs	r1, r6
   1400a:	2020      	movs	r0, #32
   1400c:	40d1      	lsrs	r1, r2
   1400e:	1a82      	subs	r2, r0, r2
   14010:	4096      	lsls	r6, r2
   14012:	1e72      	subs	r2, r6, #1
   14014:	4196      	sbcs	r6, r2
   14016:	430e      	orrs	r6, r1
   14018:	1b9b      	subs	r3, r3, r6
   1401a:	015a      	lsls	r2, r3, #5
   1401c:	d4ba      	bmi.n	13f94 <__aeabi_fsub+0x60>
   1401e:	075a      	lsls	r2, r3, #29
   14020:	d1d0      	bne.n	13fc4 <__aeabi_fsub+0x90>
   14022:	2201      	movs	r2, #1
   14024:	08df      	lsrs	r7, r3, #3
   14026:	402a      	ands	r2, r5
   14028:	2cff      	cmp	r4, #255	; 0xff
   1402a:	d133      	bne.n	14094 <__aeabi_fsub+0x160>
   1402c:	2f00      	cmp	r7, #0
   1402e:	d100      	bne.n	14032 <__aeabi_fsub+0xfe>
   14030:	e0a8      	b.n	14184 <__aeabi_fsub+0x250>
   14032:	2380      	movs	r3, #128	; 0x80
   14034:	03db      	lsls	r3, r3, #15
   14036:	433b      	orrs	r3, r7
   14038:	025b      	lsls	r3, r3, #9
   1403a:	0a5b      	lsrs	r3, r3, #9
   1403c:	24ff      	movs	r4, #255	; 0xff
   1403e:	e7d1      	b.n	13fe4 <__aeabi_fsub+0xb0>
   14040:	1a21      	subs	r1, r4, r0
   14042:	2900      	cmp	r1, #0
   14044:	dd4c      	ble.n	140e0 <__aeabi_fsub+0x1ac>
   14046:	2800      	cmp	r0, #0
   14048:	d02a      	beq.n	140a0 <__aeabi_fsub+0x16c>
   1404a:	2cff      	cmp	r4, #255	; 0xff
   1404c:	d0b8      	beq.n	13fc0 <__aeabi_fsub+0x8c>
   1404e:	2080      	movs	r0, #128	; 0x80
   14050:	04c0      	lsls	r0, r0, #19
   14052:	4306      	orrs	r6, r0
   14054:	291b      	cmp	r1, #27
   14056:	dd00      	ble.n	1405a <__aeabi_fsub+0x126>
   14058:	e0af      	b.n	141ba <__aeabi_fsub+0x286>
   1405a:	0030      	movs	r0, r6
   1405c:	2720      	movs	r7, #32
   1405e:	40c8      	lsrs	r0, r1
   14060:	1a79      	subs	r1, r7, r1
   14062:	408e      	lsls	r6, r1
   14064:	1e71      	subs	r1, r6, #1
   14066:	418e      	sbcs	r6, r1
   14068:	4306      	orrs	r6, r0
   1406a:	199b      	adds	r3, r3, r6
   1406c:	0159      	lsls	r1, r3, #5
   1406e:	d5d6      	bpl.n	1401e <__aeabi_fsub+0xea>
   14070:	3401      	adds	r4, #1
   14072:	2cff      	cmp	r4, #255	; 0xff
   14074:	d100      	bne.n	14078 <__aeabi_fsub+0x144>
   14076:	e085      	b.n	14184 <__aeabi_fsub+0x250>
   14078:	2201      	movs	r2, #1
   1407a:	497a      	ldr	r1, [pc, #488]	; (14264 <__aeabi_fsub+0x330>)
   1407c:	401a      	ands	r2, r3
   1407e:	085b      	lsrs	r3, r3, #1
   14080:	400b      	ands	r3, r1
   14082:	4313      	orrs	r3, r2
   14084:	e79c      	b.n	13fc0 <__aeabi_fsub+0x8c>
   14086:	2e00      	cmp	r6, #0
   14088:	d000      	beq.n	1408c <__aeabi_fsub+0x158>
   1408a:	e770      	b.n	13f6e <__aeabi_fsub+0x3a>
   1408c:	e76b      	b.n	13f66 <__aeabi_fsub+0x32>
   1408e:	1e3b      	subs	r3, r7, #0
   14090:	d1c5      	bne.n	1401e <__aeabi_fsub+0xea>
   14092:	2200      	movs	r2, #0
   14094:	027b      	lsls	r3, r7, #9
   14096:	0a5b      	lsrs	r3, r3, #9
   14098:	b2e4      	uxtb	r4, r4
   1409a:	e7a3      	b.n	13fe4 <__aeabi_fsub+0xb0>
   1409c:	0014      	movs	r4, r2
   1409e:	e78f      	b.n	13fc0 <__aeabi_fsub+0x8c>
   140a0:	2e00      	cmp	r6, #0
   140a2:	d04d      	beq.n	14140 <__aeabi_fsub+0x20c>
   140a4:	1e48      	subs	r0, r1, #1
   140a6:	2800      	cmp	r0, #0
   140a8:	d157      	bne.n	1415a <__aeabi_fsub+0x226>
   140aa:	199b      	adds	r3, r3, r6
   140ac:	2401      	movs	r4, #1
   140ae:	015a      	lsls	r2, r3, #5
   140b0:	d5b5      	bpl.n	1401e <__aeabi_fsub+0xea>
   140b2:	2402      	movs	r4, #2
   140b4:	e7e0      	b.n	14078 <__aeabi_fsub+0x144>
   140b6:	2a00      	cmp	r2, #0
   140b8:	d125      	bne.n	14106 <__aeabi_fsub+0x1d2>
   140ba:	1c62      	adds	r2, r4, #1
   140bc:	b2d2      	uxtb	r2, r2
   140be:	2a01      	cmp	r2, #1
   140c0:	dd72      	ble.n	141a8 <__aeabi_fsub+0x274>
   140c2:	1b9f      	subs	r7, r3, r6
   140c4:	017a      	lsls	r2, r7, #5
   140c6:	d535      	bpl.n	14134 <__aeabi_fsub+0x200>
   140c8:	1af7      	subs	r7, r6, r3
   140ca:	000d      	movs	r5, r1
   140cc:	e764      	b.n	13f98 <__aeabi_fsub+0x64>
   140ce:	2201      	movs	r2, #1
   140d0:	2300      	movs	r3, #0
   140d2:	402a      	ands	r2, r5
   140d4:	e786      	b.n	13fe4 <__aeabi_fsub+0xb0>
   140d6:	003b      	movs	r3, r7
   140d8:	4a63      	ldr	r2, [pc, #396]	; (14268 <__aeabi_fsub+0x334>)
   140da:	1a24      	subs	r4, r4, r0
   140dc:	4013      	ands	r3, r2
   140de:	e76f      	b.n	13fc0 <__aeabi_fsub+0x8c>
   140e0:	2900      	cmp	r1, #0
   140e2:	d16c      	bne.n	141be <__aeabi_fsub+0x28a>
   140e4:	1c61      	adds	r1, r4, #1
   140e6:	b2c8      	uxtb	r0, r1
   140e8:	2801      	cmp	r0, #1
   140ea:	dd4e      	ble.n	1418a <__aeabi_fsub+0x256>
   140ec:	29ff      	cmp	r1, #255	; 0xff
   140ee:	d049      	beq.n	14184 <__aeabi_fsub+0x250>
   140f0:	199b      	adds	r3, r3, r6
   140f2:	085b      	lsrs	r3, r3, #1
   140f4:	000c      	movs	r4, r1
   140f6:	e763      	b.n	13fc0 <__aeabi_fsub+0x8c>
   140f8:	2aff      	cmp	r2, #255	; 0xff
   140fa:	d041      	beq.n	14180 <__aeabi_fsub+0x24c>
   140fc:	000a      	movs	r2, r1
   140fe:	e781      	b.n	14004 <__aeabi_fsub+0xd0>
   14100:	2601      	movs	r6, #1
   14102:	1b9b      	subs	r3, r3, r6
   14104:	e789      	b.n	1401a <__aeabi_fsub+0xe6>
   14106:	2c00      	cmp	r4, #0
   14108:	d01c      	beq.n	14144 <__aeabi_fsub+0x210>
   1410a:	28ff      	cmp	r0, #255	; 0xff
   1410c:	d021      	beq.n	14152 <__aeabi_fsub+0x21e>
   1410e:	2480      	movs	r4, #128	; 0x80
   14110:	04e4      	lsls	r4, r4, #19
   14112:	4252      	negs	r2, r2
   14114:	4323      	orrs	r3, r4
   14116:	2a1b      	cmp	r2, #27
   14118:	dd00      	ble.n	1411c <__aeabi_fsub+0x1e8>
   1411a:	e096      	b.n	1424a <__aeabi_fsub+0x316>
   1411c:	001c      	movs	r4, r3
   1411e:	2520      	movs	r5, #32
   14120:	40d4      	lsrs	r4, r2
   14122:	1aaa      	subs	r2, r5, r2
   14124:	4093      	lsls	r3, r2
   14126:	1e5a      	subs	r2, r3, #1
   14128:	4193      	sbcs	r3, r2
   1412a:	4323      	orrs	r3, r4
   1412c:	1af3      	subs	r3, r6, r3
   1412e:	0004      	movs	r4, r0
   14130:	000d      	movs	r5, r1
   14132:	e72d      	b.n	13f90 <__aeabi_fsub+0x5c>
   14134:	2f00      	cmp	r7, #0
   14136:	d000      	beq.n	1413a <__aeabi_fsub+0x206>
   14138:	e72e      	b.n	13f98 <__aeabi_fsub+0x64>
   1413a:	2200      	movs	r2, #0
   1413c:	2400      	movs	r4, #0
   1413e:	e7a9      	b.n	14094 <__aeabi_fsub+0x160>
   14140:	000c      	movs	r4, r1
   14142:	e73d      	b.n	13fc0 <__aeabi_fsub+0x8c>
   14144:	2b00      	cmp	r3, #0
   14146:	d058      	beq.n	141fa <__aeabi_fsub+0x2c6>
   14148:	43d2      	mvns	r2, r2
   1414a:	2a00      	cmp	r2, #0
   1414c:	d0ee      	beq.n	1412c <__aeabi_fsub+0x1f8>
   1414e:	28ff      	cmp	r0, #255	; 0xff
   14150:	d1e1      	bne.n	14116 <__aeabi_fsub+0x1e2>
   14152:	0033      	movs	r3, r6
   14154:	24ff      	movs	r4, #255	; 0xff
   14156:	000d      	movs	r5, r1
   14158:	e732      	b.n	13fc0 <__aeabi_fsub+0x8c>
   1415a:	29ff      	cmp	r1, #255	; 0xff
   1415c:	d010      	beq.n	14180 <__aeabi_fsub+0x24c>
   1415e:	0001      	movs	r1, r0
   14160:	e778      	b.n	14054 <__aeabi_fsub+0x120>
   14162:	2b00      	cmp	r3, #0
   14164:	d06e      	beq.n	14244 <__aeabi_fsub+0x310>
   14166:	24ff      	movs	r4, #255	; 0xff
   14168:	2e00      	cmp	r6, #0
   1416a:	d100      	bne.n	1416e <__aeabi_fsub+0x23a>
   1416c:	e728      	b.n	13fc0 <__aeabi_fsub+0x8c>
   1416e:	2280      	movs	r2, #128	; 0x80
   14170:	4651      	mov	r1, sl
   14172:	03d2      	lsls	r2, r2, #15
   14174:	4211      	tst	r1, r2
   14176:	d003      	beq.n	14180 <__aeabi_fsub+0x24c>
   14178:	4661      	mov	r1, ip
   1417a:	4211      	tst	r1, r2
   1417c:	d100      	bne.n	14180 <__aeabi_fsub+0x24c>
   1417e:	0033      	movs	r3, r6
   14180:	24ff      	movs	r4, #255	; 0xff
   14182:	e71d      	b.n	13fc0 <__aeabi_fsub+0x8c>
   14184:	24ff      	movs	r4, #255	; 0xff
   14186:	2300      	movs	r3, #0
   14188:	e72c      	b.n	13fe4 <__aeabi_fsub+0xb0>
   1418a:	2c00      	cmp	r4, #0
   1418c:	d1e9      	bne.n	14162 <__aeabi_fsub+0x22e>
   1418e:	2b00      	cmp	r3, #0
   14190:	d063      	beq.n	1425a <__aeabi_fsub+0x326>
   14192:	2e00      	cmp	r6, #0
   14194:	d100      	bne.n	14198 <__aeabi_fsub+0x264>
   14196:	e713      	b.n	13fc0 <__aeabi_fsub+0x8c>
   14198:	199b      	adds	r3, r3, r6
   1419a:	015a      	lsls	r2, r3, #5
   1419c:	d400      	bmi.n	141a0 <__aeabi_fsub+0x26c>
   1419e:	e73e      	b.n	1401e <__aeabi_fsub+0xea>
   141a0:	4a31      	ldr	r2, [pc, #196]	; (14268 <__aeabi_fsub+0x334>)
   141a2:	000c      	movs	r4, r1
   141a4:	4013      	ands	r3, r2
   141a6:	e70b      	b.n	13fc0 <__aeabi_fsub+0x8c>
   141a8:	2c00      	cmp	r4, #0
   141aa:	d11e      	bne.n	141ea <__aeabi_fsub+0x2b6>
   141ac:	2b00      	cmp	r3, #0
   141ae:	d12f      	bne.n	14210 <__aeabi_fsub+0x2dc>
   141b0:	2e00      	cmp	r6, #0
   141b2:	d04f      	beq.n	14254 <__aeabi_fsub+0x320>
   141b4:	0033      	movs	r3, r6
   141b6:	000d      	movs	r5, r1
   141b8:	e702      	b.n	13fc0 <__aeabi_fsub+0x8c>
   141ba:	2601      	movs	r6, #1
   141bc:	e755      	b.n	1406a <__aeabi_fsub+0x136>
   141be:	2c00      	cmp	r4, #0
   141c0:	d11f      	bne.n	14202 <__aeabi_fsub+0x2ce>
   141c2:	2b00      	cmp	r3, #0
   141c4:	d043      	beq.n	1424e <__aeabi_fsub+0x31a>
   141c6:	43c9      	mvns	r1, r1
   141c8:	2900      	cmp	r1, #0
   141ca:	d00b      	beq.n	141e4 <__aeabi_fsub+0x2b0>
   141cc:	28ff      	cmp	r0, #255	; 0xff
   141ce:	d039      	beq.n	14244 <__aeabi_fsub+0x310>
   141d0:	291b      	cmp	r1, #27
   141d2:	dc44      	bgt.n	1425e <__aeabi_fsub+0x32a>
   141d4:	001c      	movs	r4, r3
   141d6:	2720      	movs	r7, #32
   141d8:	40cc      	lsrs	r4, r1
   141da:	1a79      	subs	r1, r7, r1
   141dc:	408b      	lsls	r3, r1
   141de:	1e59      	subs	r1, r3, #1
   141e0:	418b      	sbcs	r3, r1
   141e2:	4323      	orrs	r3, r4
   141e4:	199b      	adds	r3, r3, r6
   141e6:	0004      	movs	r4, r0
   141e8:	e740      	b.n	1406c <__aeabi_fsub+0x138>
   141ea:	2b00      	cmp	r3, #0
   141ec:	d11a      	bne.n	14224 <__aeabi_fsub+0x2f0>
   141ee:	2e00      	cmp	r6, #0
   141f0:	d124      	bne.n	1423c <__aeabi_fsub+0x308>
   141f2:	2780      	movs	r7, #128	; 0x80
   141f4:	2200      	movs	r2, #0
   141f6:	03ff      	lsls	r7, r7, #15
   141f8:	e71b      	b.n	14032 <__aeabi_fsub+0xfe>
   141fa:	0033      	movs	r3, r6
   141fc:	0004      	movs	r4, r0
   141fe:	000d      	movs	r5, r1
   14200:	e6de      	b.n	13fc0 <__aeabi_fsub+0x8c>
   14202:	28ff      	cmp	r0, #255	; 0xff
   14204:	d01e      	beq.n	14244 <__aeabi_fsub+0x310>
   14206:	2480      	movs	r4, #128	; 0x80
   14208:	04e4      	lsls	r4, r4, #19
   1420a:	4249      	negs	r1, r1
   1420c:	4323      	orrs	r3, r4
   1420e:	e7df      	b.n	141d0 <__aeabi_fsub+0x29c>
   14210:	2e00      	cmp	r6, #0
   14212:	d100      	bne.n	14216 <__aeabi_fsub+0x2e2>
   14214:	e6d4      	b.n	13fc0 <__aeabi_fsub+0x8c>
   14216:	1b9f      	subs	r7, r3, r6
   14218:	017a      	lsls	r2, r7, #5
   1421a:	d400      	bmi.n	1421e <__aeabi_fsub+0x2ea>
   1421c:	e737      	b.n	1408e <__aeabi_fsub+0x15a>
   1421e:	1af3      	subs	r3, r6, r3
   14220:	000d      	movs	r5, r1
   14222:	e6cd      	b.n	13fc0 <__aeabi_fsub+0x8c>
   14224:	24ff      	movs	r4, #255	; 0xff
   14226:	2e00      	cmp	r6, #0
   14228:	d100      	bne.n	1422c <__aeabi_fsub+0x2f8>
   1422a:	e6c9      	b.n	13fc0 <__aeabi_fsub+0x8c>
   1422c:	2280      	movs	r2, #128	; 0x80
   1422e:	4650      	mov	r0, sl
   14230:	03d2      	lsls	r2, r2, #15
   14232:	4210      	tst	r0, r2
   14234:	d0a4      	beq.n	14180 <__aeabi_fsub+0x24c>
   14236:	4660      	mov	r0, ip
   14238:	4210      	tst	r0, r2
   1423a:	d1a1      	bne.n	14180 <__aeabi_fsub+0x24c>
   1423c:	0033      	movs	r3, r6
   1423e:	000d      	movs	r5, r1
   14240:	24ff      	movs	r4, #255	; 0xff
   14242:	e6bd      	b.n	13fc0 <__aeabi_fsub+0x8c>
   14244:	0033      	movs	r3, r6
   14246:	24ff      	movs	r4, #255	; 0xff
   14248:	e6ba      	b.n	13fc0 <__aeabi_fsub+0x8c>
   1424a:	2301      	movs	r3, #1
   1424c:	e76e      	b.n	1412c <__aeabi_fsub+0x1f8>
   1424e:	0033      	movs	r3, r6
   14250:	0004      	movs	r4, r0
   14252:	e6b5      	b.n	13fc0 <__aeabi_fsub+0x8c>
   14254:	2700      	movs	r7, #0
   14256:	2200      	movs	r2, #0
   14258:	e71c      	b.n	14094 <__aeabi_fsub+0x160>
   1425a:	0033      	movs	r3, r6
   1425c:	e6b0      	b.n	13fc0 <__aeabi_fsub+0x8c>
   1425e:	2301      	movs	r3, #1
   14260:	e7c0      	b.n	141e4 <__aeabi_fsub+0x2b0>
   14262:	46c0      	nop			; (mov r8, r8)
   14264:	7dffffff 	.word	0x7dffffff
   14268:	fbffffff 	.word	0xfbffffff

0001426c <__aeabi_f2iz>:
   1426c:	0241      	lsls	r1, r0, #9
   1426e:	0043      	lsls	r3, r0, #1
   14270:	0fc2      	lsrs	r2, r0, #31
   14272:	0a49      	lsrs	r1, r1, #9
   14274:	0e1b      	lsrs	r3, r3, #24
   14276:	2000      	movs	r0, #0
   14278:	2b7e      	cmp	r3, #126	; 0x7e
   1427a:	dd0d      	ble.n	14298 <__aeabi_f2iz+0x2c>
   1427c:	2b9d      	cmp	r3, #157	; 0x9d
   1427e:	dc0c      	bgt.n	1429a <__aeabi_f2iz+0x2e>
   14280:	2080      	movs	r0, #128	; 0x80
   14282:	0400      	lsls	r0, r0, #16
   14284:	4301      	orrs	r1, r0
   14286:	2b95      	cmp	r3, #149	; 0x95
   14288:	dc0a      	bgt.n	142a0 <__aeabi_f2iz+0x34>
   1428a:	2096      	movs	r0, #150	; 0x96
   1428c:	1ac3      	subs	r3, r0, r3
   1428e:	40d9      	lsrs	r1, r3
   14290:	4248      	negs	r0, r1
   14292:	2a00      	cmp	r2, #0
   14294:	d100      	bne.n	14298 <__aeabi_f2iz+0x2c>
   14296:	0008      	movs	r0, r1
   14298:	4770      	bx	lr
   1429a:	4b03      	ldr	r3, [pc, #12]	; (142a8 <__aeabi_f2iz+0x3c>)
   1429c:	18d0      	adds	r0, r2, r3
   1429e:	e7fb      	b.n	14298 <__aeabi_f2iz+0x2c>
   142a0:	3b96      	subs	r3, #150	; 0x96
   142a2:	4099      	lsls	r1, r3
   142a4:	e7f4      	b.n	14290 <__aeabi_f2iz+0x24>
   142a6:	46c0      	nop			; (mov r8, r8)
   142a8:	7fffffff 	.word	0x7fffffff

000142ac <__aeabi_i2f>:
   142ac:	b570      	push	{r4, r5, r6, lr}
   142ae:	2800      	cmp	r0, #0
   142b0:	d030      	beq.n	14314 <__aeabi_i2f+0x68>
   142b2:	17c3      	asrs	r3, r0, #31
   142b4:	18c4      	adds	r4, r0, r3
   142b6:	405c      	eors	r4, r3
   142b8:	0fc5      	lsrs	r5, r0, #31
   142ba:	0020      	movs	r0, r4
   142bc:	f001 fef0 	bl	160a0 <__clzsi2>
   142c0:	239e      	movs	r3, #158	; 0x9e
   142c2:	1a1b      	subs	r3, r3, r0
   142c4:	2b96      	cmp	r3, #150	; 0x96
   142c6:	dc0d      	bgt.n	142e4 <__aeabi_i2f+0x38>
   142c8:	2296      	movs	r2, #150	; 0x96
   142ca:	1ad2      	subs	r2, r2, r3
   142cc:	4094      	lsls	r4, r2
   142ce:	002a      	movs	r2, r5
   142d0:	0264      	lsls	r4, r4, #9
   142d2:	0a64      	lsrs	r4, r4, #9
   142d4:	b2db      	uxtb	r3, r3
   142d6:	0264      	lsls	r4, r4, #9
   142d8:	05db      	lsls	r3, r3, #23
   142da:	0a60      	lsrs	r0, r4, #9
   142dc:	07d2      	lsls	r2, r2, #31
   142de:	4318      	orrs	r0, r3
   142e0:	4310      	orrs	r0, r2
   142e2:	bd70      	pop	{r4, r5, r6, pc}
   142e4:	2b99      	cmp	r3, #153	; 0x99
   142e6:	dc19      	bgt.n	1431c <__aeabi_i2f+0x70>
   142e8:	2299      	movs	r2, #153	; 0x99
   142ea:	1ad2      	subs	r2, r2, r3
   142ec:	2a00      	cmp	r2, #0
   142ee:	dd29      	ble.n	14344 <__aeabi_i2f+0x98>
   142f0:	4094      	lsls	r4, r2
   142f2:	0022      	movs	r2, r4
   142f4:	4c14      	ldr	r4, [pc, #80]	; (14348 <__aeabi_i2f+0x9c>)
   142f6:	4014      	ands	r4, r2
   142f8:	0751      	lsls	r1, r2, #29
   142fa:	d004      	beq.n	14306 <__aeabi_i2f+0x5a>
   142fc:	210f      	movs	r1, #15
   142fe:	400a      	ands	r2, r1
   14300:	2a04      	cmp	r2, #4
   14302:	d000      	beq.n	14306 <__aeabi_i2f+0x5a>
   14304:	3404      	adds	r4, #4
   14306:	0162      	lsls	r2, r4, #5
   14308:	d413      	bmi.n	14332 <__aeabi_i2f+0x86>
   1430a:	01a4      	lsls	r4, r4, #6
   1430c:	0a64      	lsrs	r4, r4, #9
   1430e:	b2db      	uxtb	r3, r3
   14310:	002a      	movs	r2, r5
   14312:	e7e0      	b.n	142d6 <__aeabi_i2f+0x2a>
   14314:	2200      	movs	r2, #0
   14316:	2300      	movs	r3, #0
   14318:	2400      	movs	r4, #0
   1431a:	e7dc      	b.n	142d6 <__aeabi_i2f+0x2a>
   1431c:	2205      	movs	r2, #5
   1431e:	0021      	movs	r1, r4
   14320:	1a12      	subs	r2, r2, r0
   14322:	40d1      	lsrs	r1, r2
   14324:	22b9      	movs	r2, #185	; 0xb9
   14326:	1ad2      	subs	r2, r2, r3
   14328:	4094      	lsls	r4, r2
   1432a:	1e62      	subs	r2, r4, #1
   1432c:	4194      	sbcs	r4, r2
   1432e:	430c      	orrs	r4, r1
   14330:	e7da      	b.n	142e8 <__aeabi_i2f+0x3c>
   14332:	4b05      	ldr	r3, [pc, #20]	; (14348 <__aeabi_i2f+0x9c>)
   14334:	002a      	movs	r2, r5
   14336:	401c      	ands	r4, r3
   14338:	239f      	movs	r3, #159	; 0x9f
   1433a:	01a4      	lsls	r4, r4, #6
   1433c:	1a1b      	subs	r3, r3, r0
   1433e:	0a64      	lsrs	r4, r4, #9
   14340:	b2db      	uxtb	r3, r3
   14342:	e7c8      	b.n	142d6 <__aeabi_i2f+0x2a>
   14344:	0022      	movs	r2, r4
   14346:	e7d5      	b.n	142f4 <__aeabi_i2f+0x48>
   14348:	fbffffff 	.word	0xfbffffff

0001434c <__aeabi_ui2f>:
   1434c:	b510      	push	{r4, lr}
   1434e:	1e04      	subs	r4, r0, #0
   14350:	d027      	beq.n	143a2 <__aeabi_ui2f+0x56>
   14352:	f001 fea5 	bl	160a0 <__clzsi2>
   14356:	239e      	movs	r3, #158	; 0x9e
   14358:	1a1b      	subs	r3, r3, r0
   1435a:	2b96      	cmp	r3, #150	; 0x96
   1435c:	dc0a      	bgt.n	14374 <__aeabi_ui2f+0x28>
   1435e:	2296      	movs	r2, #150	; 0x96
   14360:	1ad2      	subs	r2, r2, r3
   14362:	4094      	lsls	r4, r2
   14364:	0264      	lsls	r4, r4, #9
   14366:	0a64      	lsrs	r4, r4, #9
   14368:	b2db      	uxtb	r3, r3
   1436a:	0264      	lsls	r4, r4, #9
   1436c:	05db      	lsls	r3, r3, #23
   1436e:	0a60      	lsrs	r0, r4, #9
   14370:	4318      	orrs	r0, r3
   14372:	bd10      	pop	{r4, pc}
   14374:	2b99      	cmp	r3, #153	; 0x99
   14376:	dc17      	bgt.n	143a8 <__aeabi_ui2f+0x5c>
   14378:	2299      	movs	r2, #153	; 0x99
   1437a:	1ad2      	subs	r2, r2, r3
   1437c:	2a00      	cmp	r2, #0
   1437e:	dd27      	ble.n	143d0 <__aeabi_ui2f+0x84>
   14380:	4094      	lsls	r4, r2
   14382:	0022      	movs	r2, r4
   14384:	4c13      	ldr	r4, [pc, #76]	; (143d4 <__aeabi_ui2f+0x88>)
   14386:	4014      	ands	r4, r2
   14388:	0751      	lsls	r1, r2, #29
   1438a:	d004      	beq.n	14396 <__aeabi_ui2f+0x4a>
   1438c:	210f      	movs	r1, #15
   1438e:	400a      	ands	r2, r1
   14390:	2a04      	cmp	r2, #4
   14392:	d000      	beq.n	14396 <__aeabi_ui2f+0x4a>
   14394:	3404      	adds	r4, #4
   14396:	0162      	lsls	r2, r4, #5
   14398:	d412      	bmi.n	143c0 <__aeabi_ui2f+0x74>
   1439a:	01a4      	lsls	r4, r4, #6
   1439c:	0a64      	lsrs	r4, r4, #9
   1439e:	b2db      	uxtb	r3, r3
   143a0:	e7e3      	b.n	1436a <__aeabi_ui2f+0x1e>
   143a2:	2300      	movs	r3, #0
   143a4:	2400      	movs	r4, #0
   143a6:	e7e0      	b.n	1436a <__aeabi_ui2f+0x1e>
   143a8:	22b9      	movs	r2, #185	; 0xb9
   143aa:	0021      	movs	r1, r4
   143ac:	1ad2      	subs	r2, r2, r3
   143ae:	4091      	lsls	r1, r2
   143b0:	000a      	movs	r2, r1
   143b2:	1e51      	subs	r1, r2, #1
   143b4:	418a      	sbcs	r2, r1
   143b6:	2105      	movs	r1, #5
   143b8:	1a09      	subs	r1, r1, r0
   143ba:	40cc      	lsrs	r4, r1
   143bc:	4314      	orrs	r4, r2
   143be:	e7db      	b.n	14378 <__aeabi_ui2f+0x2c>
   143c0:	4b04      	ldr	r3, [pc, #16]	; (143d4 <__aeabi_ui2f+0x88>)
   143c2:	401c      	ands	r4, r3
   143c4:	239f      	movs	r3, #159	; 0x9f
   143c6:	01a4      	lsls	r4, r4, #6
   143c8:	1a1b      	subs	r3, r3, r0
   143ca:	0a64      	lsrs	r4, r4, #9
   143cc:	b2db      	uxtb	r3, r3
   143ce:	e7cc      	b.n	1436a <__aeabi_ui2f+0x1e>
   143d0:	0022      	movs	r2, r4
   143d2:	e7d7      	b.n	14384 <__aeabi_ui2f+0x38>
   143d4:	fbffffff 	.word	0xfbffffff

000143d8 <__aeabi_dadd>:
   143d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   143da:	4645      	mov	r5, r8
   143dc:	46de      	mov	lr, fp
   143de:	4657      	mov	r7, sl
   143e0:	464e      	mov	r6, r9
   143e2:	030c      	lsls	r4, r1, #12
   143e4:	b5e0      	push	{r5, r6, r7, lr}
   143e6:	004e      	lsls	r6, r1, #1
   143e8:	0fc9      	lsrs	r1, r1, #31
   143ea:	4688      	mov	r8, r1
   143ec:	000d      	movs	r5, r1
   143ee:	0a61      	lsrs	r1, r4, #9
   143f0:	0f44      	lsrs	r4, r0, #29
   143f2:	430c      	orrs	r4, r1
   143f4:	00c7      	lsls	r7, r0, #3
   143f6:	0319      	lsls	r1, r3, #12
   143f8:	0058      	lsls	r0, r3, #1
   143fa:	0fdb      	lsrs	r3, r3, #31
   143fc:	469b      	mov	fp, r3
   143fe:	0a4b      	lsrs	r3, r1, #9
   14400:	0f51      	lsrs	r1, r2, #29
   14402:	430b      	orrs	r3, r1
   14404:	0d76      	lsrs	r6, r6, #21
   14406:	0d40      	lsrs	r0, r0, #21
   14408:	0019      	movs	r1, r3
   1440a:	00d2      	lsls	r2, r2, #3
   1440c:	45d8      	cmp	r8, fp
   1440e:	d100      	bne.n	14412 <__aeabi_dadd+0x3a>
   14410:	e0ae      	b.n	14570 <__aeabi_dadd+0x198>
   14412:	1a35      	subs	r5, r6, r0
   14414:	2d00      	cmp	r5, #0
   14416:	dc00      	bgt.n	1441a <__aeabi_dadd+0x42>
   14418:	e0f6      	b.n	14608 <__aeabi_dadd+0x230>
   1441a:	2800      	cmp	r0, #0
   1441c:	d10f      	bne.n	1443e <__aeabi_dadd+0x66>
   1441e:	4313      	orrs	r3, r2
   14420:	d100      	bne.n	14424 <__aeabi_dadd+0x4c>
   14422:	e0db      	b.n	145dc <__aeabi_dadd+0x204>
   14424:	1e6b      	subs	r3, r5, #1
   14426:	2b00      	cmp	r3, #0
   14428:	d000      	beq.n	1442c <__aeabi_dadd+0x54>
   1442a:	e137      	b.n	1469c <__aeabi_dadd+0x2c4>
   1442c:	1aba      	subs	r2, r7, r2
   1442e:	4297      	cmp	r7, r2
   14430:	41bf      	sbcs	r7, r7
   14432:	1a64      	subs	r4, r4, r1
   14434:	427f      	negs	r7, r7
   14436:	1be4      	subs	r4, r4, r7
   14438:	2601      	movs	r6, #1
   1443a:	0017      	movs	r7, r2
   1443c:	e024      	b.n	14488 <__aeabi_dadd+0xb0>
   1443e:	4bc6      	ldr	r3, [pc, #792]	; (14758 <__aeabi_dadd+0x380>)
   14440:	429e      	cmp	r6, r3
   14442:	d04d      	beq.n	144e0 <__aeabi_dadd+0x108>
   14444:	2380      	movs	r3, #128	; 0x80
   14446:	041b      	lsls	r3, r3, #16
   14448:	4319      	orrs	r1, r3
   1444a:	2d38      	cmp	r5, #56	; 0x38
   1444c:	dd00      	ble.n	14450 <__aeabi_dadd+0x78>
   1444e:	e107      	b.n	14660 <__aeabi_dadd+0x288>
   14450:	2d1f      	cmp	r5, #31
   14452:	dd00      	ble.n	14456 <__aeabi_dadd+0x7e>
   14454:	e138      	b.n	146c8 <__aeabi_dadd+0x2f0>
   14456:	2020      	movs	r0, #32
   14458:	1b43      	subs	r3, r0, r5
   1445a:	469a      	mov	sl, r3
   1445c:	000b      	movs	r3, r1
   1445e:	4650      	mov	r0, sl
   14460:	4083      	lsls	r3, r0
   14462:	4699      	mov	r9, r3
   14464:	0013      	movs	r3, r2
   14466:	4648      	mov	r0, r9
   14468:	40eb      	lsrs	r3, r5
   1446a:	4318      	orrs	r0, r3
   1446c:	0003      	movs	r3, r0
   1446e:	4650      	mov	r0, sl
   14470:	4082      	lsls	r2, r0
   14472:	1e50      	subs	r0, r2, #1
   14474:	4182      	sbcs	r2, r0
   14476:	40e9      	lsrs	r1, r5
   14478:	431a      	orrs	r2, r3
   1447a:	1aba      	subs	r2, r7, r2
   1447c:	1a61      	subs	r1, r4, r1
   1447e:	4297      	cmp	r7, r2
   14480:	41a4      	sbcs	r4, r4
   14482:	0017      	movs	r7, r2
   14484:	4264      	negs	r4, r4
   14486:	1b0c      	subs	r4, r1, r4
   14488:	0223      	lsls	r3, r4, #8
   1448a:	d562      	bpl.n	14552 <__aeabi_dadd+0x17a>
   1448c:	0264      	lsls	r4, r4, #9
   1448e:	0a65      	lsrs	r5, r4, #9
   14490:	2d00      	cmp	r5, #0
   14492:	d100      	bne.n	14496 <__aeabi_dadd+0xbe>
   14494:	e0df      	b.n	14656 <__aeabi_dadd+0x27e>
   14496:	0028      	movs	r0, r5
   14498:	f001 fe02 	bl	160a0 <__clzsi2>
   1449c:	0003      	movs	r3, r0
   1449e:	3b08      	subs	r3, #8
   144a0:	2b1f      	cmp	r3, #31
   144a2:	dd00      	ble.n	144a6 <__aeabi_dadd+0xce>
   144a4:	e0d2      	b.n	1464c <__aeabi_dadd+0x274>
   144a6:	2220      	movs	r2, #32
   144a8:	003c      	movs	r4, r7
   144aa:	1ad2      	subs	r2, r2, r3
   144ac:	409d      	lsls	r5, r3
   144ae:	40d4      	lsrs	r4, r2
   144b0:	409f      	lsls	r7, r3
   144b2:	4325      	orrs	r5, r4
   144b4:	429e      	cmp	r6, r3
   144b6:	dd00      	ble.n	144ba <__aeabi_dadd+0xe2>
   144b8:	e0c4      	b.n	14644 <__aeabi_dadd+0x26c>
   144ba:	1b9e      	subs	r6, r3, r6
   144bc:	1c73      	adds	r3, r6, #1
   144be:	2b1f      	cmp	r3, #31
   144c0:	dd00      	ble.n	144c4 <__aeabi_dadd+0xec>
   144c2:	e0f1      	b.n	146a8 <__aeabi_dadd+0x2d0>
   144c4:	2220      	movs	r2, #32
   144c6:	0038      	movs	r0, r7
   144c8:	0029      	movs	r1, r5
   144ca:	1ad2      	subs	r2, r2, r3
   144cc:	40d8      	lsrs	r0, r3
   144ce:	4091      	lsls	r1, r2
   144d0:	4097      	lsls	r7, r2
   144d2:	002c      	movs	r4, r5
   144d4:	4301      	orrs	r1, r0
   144d6:	1e78      	subs	r0, r7, #1
   144d8:	4187      	sbcs	r7, r0
   144da:	40dc      	lsrs	r4, r3
   144dc:	2600      	movs	r6, #0
   144de:	430f      	orrs	r7, r1
   144e0:	077b      	lsls	r3, r7, #29
   144e2:	d009      	beq.n	144f8 <__aeabi_dadd+0x120>
   144e4:	230f      	movs	r3, #15
   144e6:	403b      	ands	r3, r7
   144e8:	2b04      	cmp	r3, #4
   144ea:	d005      	beq.n	144f8 <__aeabi_dadd+0x120>
   144ec:	1d3b      	adds	r3, r7, #4
   144ee:	42bb      	cmp	r3, r7
   144f0:	41bf      	sbcs	r7, r7
   144f2:	427f      	negs	r7, r7
   144f4:	19e4      	adds	r4, r4, r7
   144f6:	001f      	movs	r7, r3
   144f8:	0223      	lsls	r3, r4, #8
   144fa:	d52c      	bpl.n	14556 <__aeabi_dadd+0x17e>
   144fc:	4b96      	ldr	r3, [pc, #600]	; (14758 <__aeabi_dadd+0x380>)
   144fe:	3601      	adds	r6, #1
   14500:	429e      	cmp	r6, r3
   14502:	d100      	bne.n	14506 <__aeabi_dadd+0x12e>
   14504:	e09a      	b.n	1463c <__aeabi_dadd+0x264>
   14506:	4645      	mov	r5, r8
   14508:	4b94      	ldr	r3, [pc, #592]	; (1475c <__aeabi_dadd+0x384>)
   1450a:	08ff      	lsrs	r7, r7, #3
   1450c:	401c      	ands	r4, r3
   1450e:	0760      	lsls	r0, r4, #29
   14510:	0576      	lsls	r6, r6, #21
   14512:	0264      	lsls	r4, r4, #9
   14514:	4307      	orrs	r7, r0
   14516:	0b24      	lsrs	r4, r4, #12
   14518:	0d76      	lsrs	r6, r6, #21
   1451a:	2100      	movs	r1, #0
   1451c:	0324      	lsls	r4, r4, #12
   1451e:	0b23      	lsrs	r3, r4, #12
   14520:	0d0c      	lsrs	r4, r1, #20
   14522:	4a8f      	ldr	r2, [pc, #572]	; (14760 <__aeabi_dadd+0x388>)
   14524:	0524      	lsls	r4, r4, #20
   14526:	431c      	orrs	r4, r3
   14528:	4014      	ands	r4, r2
   1452a:	0533      	lsls	r3, r6, #20
   1452c:	4323      	orrs	r3, r4
   1452e:	005b      	lsls	r3, r3, #1
   14530:	07ed      	lsls	r5, r5, #31
   14532:	085b      	lsrs	r3, r3, #1
   14534:	432b      	orrs	r3, r5
   14536:	0038      	movs	r0, r7
   14538:	0019      	movs	r1, r3
   1453a:	bc3c      	pop	{r2, r3, r4, r5}
   1453c:	4690      	mov	r8, r2
   1453e:	4699      	mov	r9, r3
   14540:	46a2      	mov	sl, r4
   14542:	46ab      	mov	fp, r5
   14544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14546:	4664      	mov	r4, ip
   14548:	4304      	orrs	r4, r0
   1454a:	d100      	bne.n	1454e <__aeabi_dadd+0x176>
   1454c:	e211      	b.n	14972 <__aeabi_dadd+0x59a>
   1454e:	0004      	movs	r4, r0
   14550:	4667      	mov	r7, ip
   14552:	077b      	lsls	r3, r7, #29
   14554:	d1c6      	bne.n	144e4 <__aeabi_dadd+0x10c>
   14556:	4645      	mov	r5, r8
   14558:	0760      	lsls	r0, r4, #29
   1455a:	08ff      	lsrs	r7, r7, #3
   1455c:	4307      	orrs	r7, r0
   1455e:	08e4      	lsrs	r4, r4, #3
   14560:	4b7d      	ldr	r3, [pc, #500]	; (14758 <__aeabi_dadd+0x380>)
   14562:	429e      	cmp	r6, r3
   14564:	d030      	beq.n	145c8 <__aeabi_dadd+0x1f0>
   14566:	0324      	lsls	r4, r4, #12
   14568:	0576      	lsls	r6, r6, #21
   1456a:	0b24      	lsrs	r4, r4, #12
   1456c:	0d76      	lsrs	r6, r6, #21
   1456e:	e7d4      	b.n	1451a <__aeabi_dadd+0x142>
   14570:	1a33      	subs	r3, r6, r0
   14572:	469a      	mov	sl, r3
   14574:	2b00      	cmp	r3, #0
   14576:	dd78      	ble.n	1466a <__aeabi_dadd+0x292>
   14578:	2800      	cmp	r0, #0
   1457a:	d031      	beq.n	145e0 <__aeabi_dadd+0x208>
   1457c:	4876      	ldr	r0, [pc, #472]	; (14758 <__aeabi_dadd+0x380>)
   1457e:	4286      	cmp	r6, r0
   14580:	d0ae      	beq.n	144e0 <__aeabi_dadd+0x108>
   14582:	2080      	movs	r0, #128	; 0x80
   14584:	0400      	lsls	r0, r0, #16
   14586:	4301      	orrs	r1, r0
   14588:	4653      	mov	r3, sl
   1458a:	2b38      	cmp	r3, #56	; 0x38
   1458c:	dc00      	bgt.n	14590 <__aeabi_dadd+0x1b8>
   1458e:	e0e9      	b.n	14764 <__aeabi_dadd+0x38c>
   14590:	430a      	orrs	r2, r1
   14592:	1e51      	subs	r1, r2, #1
   14594:	418a      	sbcs	r2, r1
   14596:	2100      	movs	r1, #0
   14598:	19d2      	adds	r2, r2, r7
   1459a:	42ba      	cmp	r2, r7
   1459c:	41bf      	sbcs	r7, r7
   1459e:	1909      	adds	r1, r1, r4
   145a0:	427c      	negs	r4, r7
   145a2:	0017      	movs	r7, r2
   145a4:	190c      	adds	r4, r1, r4
   145a6:	0223      	lsls	r3, r4, #8
   145a8:	d5d3      	bpl.n	14552 <__aeabi_dadd+0x17a>
   145aa:	4b6b      	ldr	r3, [pc, #428]	; (14758 <__aeabi_dadd+0x380>)
   145ac:	3601      	adds	r6, #1
   145ae:	429e      	cmp	r6, r3
   145b0:	d100      	bne.n	145b4 <__aeabi_dadd+0x1dc>
   145b2:	e13a      	b.n	1482a <__aeabi_dadd+0x452>
   145b4:	2001      	movs	r0, #1
   145b6:	4b69      	ldr	r3, [pc, #420]	; (1475c <__aeabi_dadd+0x384>)
   145b8:	401c      	ands	r4, r3
   145ba:	087b      	lsrs	r3, r7, #1
   145bc:	4007      	ands	r7, r0
   145be:	431f      	orrs	r7, r3
   145c0:	07e0      	lsls	r0, r4, #31
   145c2:	4307      	orrs	r7, r0
   145c4:	0864      	lsrs	r4, r4, #1
   145c6:	e78b      	b.n	144e0 <__aeabi_dadd+0x108>
   145c8:	0023      	movs	r3, r4
   145ca:	433b      	orrs	r3, r7
   145cc:	d100      	bne.n	145d0 <__aeabi_dadd+0x1f8>
   145ce:	e1cb      	b.n	14968 <__aeabi_dadd+0x590>
   145d0:	2280      	movs	r2, #128	; 0x80
   145d2:	0312      	lsls	r2, r2, #12
   145d4:	4314      	orrs	r4, r2
   145d6:	0324      	lsls	r4, r4, #12
   145d8:	0b24      	lsrs	r4, r4, #12
   145da:	e79e      	b.n	1451a <__aeabi_dadd+0x142>
   145dc:	002e      	movs	r6, r5
   145de:	e77f      	b.n	144e0 <__aeabi_dadd+0x108>
   145e0:	0008      	movs	r0, r1
   145e2:	4310      	orrs	r0, r2
   145e4:	d100      	bne.n	145e8 <__aeabi_dadd+0x210>
   145e6:	e0b4      	b.n	14752 <__aeabi_dadd+0x37a>
   145e8:	1e58      	subs	r0, r3, #1
   145ea:	2800      	cmp	r0, #0
   145ec:	d000      	beq.n	145f0 <__aeabi_dadd+0x218>
   145ee:	e0de      	b.n	147ae <__aeabi_dadd+0x3d6>
   145f0:	18ba      	adds	r2, r7, r2
   145f2:	42ba      	cmp	r2, r7
   145f4:	419b      	sbcs	r3, r3
   145f6:	1864      	adds	r4, r4, r1
   145f8:	425b      	negs	r3, r3
   145fa:	18e4      	adds	r4, r4, r3
   145fc:	0017      	movs	r7, r2
   145fe:	2601      	movs	r6, #1
   14600:	0223      	lsls	r3, r4, #8
   14602:	d5a6      	bpl.n	14552 <__aeabi_dadd+0x17a>
   14604:	2602      	movs	r6, #2
   14606:	e7d5      	b.n	145b4 <__aeabi_dadd+0x1dc>
   14608:	2d00      	cmp	r5, #0
   1460a:	d16e      	bne.n	146ea <__aeabi_dadd+0x312>
   1460c:	1c70      	adds	r0, r6, #1
   1460e:	0540      	lsls	r0, r0, #21
   14610:	0d40      	lsrs	r0, r0, #21
   14612:	2801      	cmp	r0, #1
   14614:	dc00      	bgt.n	14618 <__aeabi_dadd+0x240>
   14616:	e0f9      	b.n	1480c <__aeabi_dadd+0x434>
   14618:	1ab8      	subs	r0, r7, r2
   1461a:	4684      	mov	ip, r0
   1461c:	4287      	cmp	r7, r0
   1461e:	4180      	sbcs	r0, r0
   14620:	1ae5      	subs	r5, r4, r3
   14622:	4240      	negs	r0, r0
   14624:	1a2d      	subs	r5, r5, r0
   14626:	0228      	lsls	r0, r5, #8
   14628:	d400      	bmi.n	1462c <__aeabi_dadd+0x254>
   1462a:	e089      	b.n	14740 <__aeabi_dadd+0x368>
   1462c:	1bd7      	subs	r7, r2, r7
   1462e:	42ba      	cmp	r2, r7
   14630:	4192      	sbcs	r2, r2
   14632:	1b1c      	subs	r4, r3, r4
   14634:	4252      	negs	r2, r2
   14636:	1aa5      	subs	r5, r4, r2
   14638:	46d8      	mov	r8, fp
   1463a:	e729      	b.n	14490 <__aeabi_dadd+0xb8>
   1463c:	4645      	mov	r5, r8
   1463e:	2400      	movs	r4, #0
   14640:	2700      	movs	r7, #0
   14642:	e76a      	b.n	1451a <__aeabi_dadd+0x142>
   14644:	4c45      	ldr	r4, [pc, #276]	; (1475c <__aeabi_dadd+0x384>)
   14646:	1af6      	subs	r6, r6, r3
   14648:	402c      	ands	r4, r5
   1464a:	e749      	b.n	144e0 <__aeabi_dadd+0x108>
   1464c:	003d      	movs	r5, r7
   1464e:	3828      	subs	r0, #40	; 0x28
   14650:	4085      	lsls	r5, r0
   14652:	2700      	movs	r7, #0
   14654:	e72e      	b.n	144b4 <__aeabi_dadd+0xdc>
   14656:	0038      	movs	r0, r7
   14658:	f001 fd22 	bl	160a0 <__clzsi2>
   1465c:	3020      	adds	r0, #32
   1465e:	e71d      	b.n	1449c <__aeabi_dadd+0xc4>
   14660:	430a      	orrs	r2, r1
   14662:	1e51      	subs	r1, r2, #1
   14664:	418a      	sbcs	r2, r1
   14666:	2100      	movs	r1, #0
   14668:	e707      	b.n	1447a <__aeabi_dadd+0xa2>
   1466a:	2b00      	cmp	r3, #0
   1466c:	d000      	beq.n	14670 <__aeabi_dadd+0x298>
   1466e:	e0f3      	b.n	14858 <__aeabi_dadd+0x480>
   14670:	1c70      	adds	r0, r6, #1
   14672:	0543      	lsls	r3, r0, #21
   14674:	0d5b      	lsrs	r3, r3, #21
   14676:	2b01      	cmp	r3, #1
   14678:	dc00      	bgt.n	1467c <__aeabi_dadd+0x2a4>
   1467a:	e0ad      	b.n	147d8 <__aeabi_dadd+0x400>
   1467c:	4b36      	ldr	r3, [pc, #216]	; (14758 <__aeabi_dadd+0x380>)
   1467e:	4298      	cmp	r0, r3
   14680:	d100      	bne.n	14684 <__aeabi_dadd+0x2ac>
   14682:	e0d1      	b.n	14828 <__aeabi_dadd+0x450>
   14684:	18ba      	adds	r2, r7, r2
   14686:	42ba      	cmp	r2, r7
   14688:	41bf      	sbcs	r7, r7
   1468a:	1864      	adds	r4, r4, r1
   1468c:	427f      	negs	r7, r7
   1468e:	19e4      	adds	r4, r4, r7
   14690:	07e7      	lsls	r7, r4, #31
   14692:	0852      	lsrs	r2, r2, #1
   14694:	4317      	orrs	r7, r2
   14696:	0864      	lsrs	r4, r4, #1
   14698:	0006      	movs	r6, r0
   1469a:	e721      	b.n	144e0 <__aeabi_dadd+0x108>
   1469c:	482e      	ldr	r0, [pc, #184]	; (14758 <__aeabi_dadd+0x380>)
   1469e:	4285      	cmp	r5, r0
   146a0:	d100      	bne.n	146a4 <__aeabi_dadd+0x2cc>
   146a2:	e093      	b.n	147cc <__aeabi_dadd+0x3f4>
   146a4:	001d      	movs	r5, r3
   146a6:	e6d0      	b.n	1444a <__aeabi_dadd+0x72>
   146a8:	0029      	movs	r1, r5
   146aa:	3e1f      	subs	r6, #31
   146ac:	40f1      	lsrs	r1, r6
   146ae:	2b20      	cmp	r3, #32
   146b0:	d100      	bne.n	146b4 <__aeabi_dadd+0x2dc>
   146b2:	e08d      	b.n	147d0 <__aeabi_dadd+0x3f8>
   146b4:	2240      	movs	r2, #64	; 0x40
   146b6:	1ad3      	subs	r3, r2, r3
   146b8:	409d      	lsls	r5, r3
   146ba:	432f      	orrs	r7, r5
   146bc:	1e7d      	subs	r5, r7, #1
   146be:	41af      	sbcs	r7, r5
   146c0:	2400      	movs	r4, #0
   146c2:	430f      	orrs	r7, r1
   146c4:	2600      	movs	r6, #0
   146c6:	e744      	b.n	14552 <__aeabi_dadd+0x17a>
   146c8:	002b      	movs	r3, r5
   146ca:	0008      	movs	r0, r1
   146cc:	3b20      	subs	r3, #32
   146ce:	40d8      	lsrs	r0, r3
   146d0:	0003      	movs	r3, r0
   146d2:	2d20      	cmp	r5, #32
   146d4:	d100      	bne.n	146d8 <__aeabi_dadd+0x300>
   146d6:	e07d      	b.n	147d4 <__aeabi_dadd+0x3fc>
   146d8:	2040      	movs	r0, #64	; 0x40
   146da:	1b45      	subs	r5, r0, r5
   146dc:	40a9      	lsls	r1, r5
   146de:	430a      	orrs	r2, r1
   146e0:	1e51      	subs	r1, r2, #1
   146e2:	418a      	sbcs	r2, r1
   146e4:	2100      	movs	r1, #0
   146e6:	431a      	orrs	r2, r3
   146e8:	e6c7      	b.n	1447a <__aeabi_dadd+0xa2>
   146ea:	2e00      	cmp	r6, #0
   146ec:	d050      	beq.n	14790 <__aeabi_dadd+0x3b8>
   146ee:	4e1a      	ldr	r6, [pc, #104]	; (14758 <__aeabi_dadd+0x380>)
   146f0:	42b0      	cmp	r0, r6
   146f2:	d057      	beq.n	147a4 <__aeabi_dadd+0x3cc>
   146f4:	2680      	movs	r6, #128	; 0x80
   146f6:	426b      	negs	r3, r5
   146f8:	4699      	mov	r9, r3
   146fa:	0436      	lsls	r6, r6, #16
   146fc:	4334      	orrs	r4, r6
   146fe:	464b      	mov	r3, r9
   14700:	2b38      	cmp	r3, #56	; 0x38
   14702:	dd00      	ble.n	14706 <__aeabi_dadd+0x32e>
   14704:	e0d6      	b.n	148b4 <__aeabi_dadd+0x4dc>
   14706:	2b1f      	cmp	r3, #31
   14708:	dd00      	ble.n	1470c <__aeabi_dadd+0x334>
   1470a:	e135      	b.n	14978 <__aeabi_dadd+0x5a0>
   1470c:	2620      	movs	r6, #32
   1470e:	1af5      	subs	r5, r6, r3
   14710:	0026      	movs	r6, r4
   14712:	40ae      	lsls	r6, r5
   14714:	46b2      	mov	sl, r6
   14716:	003e      	movs	r6, r7
   14718:	40de      	lsrs	r6, r3
   1471a:	46ac      	mov	ip, r5
   1471c:	0035      	movs	r5, r6
   1471e:	4656      	mov	r6, sl
   14720:	432e      	orrs	r6, r5
   14722:	4665      	mov	r5, ip
   14724:	40af      	lsls	r7, r5
   14726:	1e7d      	subs	r5, r7, #1
   14728:	41af      	sbcs	r7, r5
   1472a:	40dc      	lsrs	r4, r3
   1472c:	4337      	orrs	r7, r6
   1472e:	1bd7      	subs	r7, r2, r7
   14730:	42ba      	cmp	r2, r7
   14732:	4192      	sbcs	r2, r2
   14734:	1b0c      	subs	r4, r1, r4
   14736:	4252      	negs	r2, r2
   14738:	1aa4      	subs	r4, r4, r2
   1473a:	0006      	movs	r6, r0
   1473c:	46d8      	mov	r8, fp
   1473e:	e6a3      	b.n	14488 <__aeabi_dadd+0xb0>
   14740:	4664      	mov	r4, ip
   14742:	4667      	mov	r7, ip
   14744:	432c      	orrs	r4, r5
   14746:	d000      	beq.n	1474a <__aeabi_dadd+0x372>
   14748:	e6a2      	b.n	14490 <__aeabi_dadd+0xb8>
   1474a:	2500      	movs	r5, #0
   1474c:	2600      	movs	r6, #0
   1474e:	2700      	movs	r7, #0
   14750:	e706      	b.n	14560 <__aeabi_dadd+0x188>
   14752:	001e      	movs	r6, r3
   14754:	e6c4      	b.n	144e0 <__aeabi_dadd+0x108>
   14756:	46c0      	nop			; (mov r8, r8)
   14758:	000007ff 	.word	0x000007ff
   1475c:	ff7fffff 	.word	0xff7fffff
   14760:	800fffff 	.word	0x800fffff
   14764:	2b1f      	cmp	r3, #31
   14766:	dc63      	bgt.n	14830 <__aeabi_dadd+0x458>
   14768:	2020      	movs	r0, #32
   1476a:	1ac3      	subs	r3, r0, r3
   1476c:	0008      	movs	r0, r1
   1476e:	4098      	lsls	r0, r3
   14770:	469c      	mov	ip, r3
   14772:	4683      	mov	fp, r0
   14774:	4653      	mov	r3, sl
   14776:	0010      	movs	r0, r2
   14778:	40d8      	lsrs	r0, r3
   1477a:	0003      	movs	r3, r0
   1477c:	4658      	mov	r0, fp
   1477e:	4318      	orrs	r0, r3
   14780:	4663      	mov	r3, ip
   14782:	409a      	lsls	r2, r3
   14784:	1e53      	subs	r3, r2, #1
   14786:	419a      	sbcs	r2, r3
   14788:	4653      	mov	r3, sl
   1478a:	4302      	orrs	r2, r0
   1478c:	40d9      	lsrs	r1, r3
   1478e:	e703      	b.n	14598 <__aeabi_dadd+0x1c0>
   14790:	0026      	movs	r6, r4
   14792:	433e      	orrs	r6, r7
   14794:	d006      	beq.n	147a4 <__aeabi_dadd+0x3cc>
   14796:	43eb      	mvns	r3, r5
   14798:	4699      	mov	r9, r3
   1479a:	2b00      	cmp	r3, #0
   1479c:	d0c7      	beq.n	1472e <__aeabi_dadd+0x356>
   1479e:	4e94      	ldr	r6, [pc, #592]	; (149f0 <__aeabi_dadd+0x618>)
   147a0:	42b0      	cmp	r0, r6
   147a2:	d1ac      	bne.n	146fe <__aeabi_dadd+0x326>
   147a4:	000c      	movs	r4, r1
   147a6:	0017      	movs	r7, r2
   147a8:	0006      	movs	r6, r0
   147aa:	46d8      	mov	r8, fp
   147ac:	e698      	b.n	144e0 <__aeabi_dadd+0x108>
   147ae:	4b90      	ldr	r3, [pc, #576]	; (149f0 <__aeabi_dadd+0x618>)
   147b0:	459a      	cmp	sl, r3
   147b2:	d00b      	beq.n	147cc <__aeabi_dadd+0x3f4>
   147b4:	4682      	mov	sl, r0
   147b6:	e6e7      	b.n	14588 <__aeabi_dadd+0x1b0>
   147b8:	2800      	cmp	r0, #0
   147ba:	d000      	beq.n	147be <__aeabi_dadd+0x3e6>
   147bc:	e09e      	b.n	148fc <__aeabi_dadd+0x524>
   147be:	0018      	movs	r0, r3
   147c0:	4310      	orrs	r0, r2
   147c2:	d100      	bne.n	147c6 <__aeabi_dadd+0x3ee>
   147c4:	e0e9      	b.n	1499a <__aeabi_dadd+0x5c2>
   147c6:	001c      	movs	r4, r3
   147c8:	0017      	movs	r7, r2
   147ca:	46d8      	mov	r8, fp
   147cc:	4e88      	ldr	r6, [pc, #544]	; (149f0 <__aeabi_dadd+0x618>)
   147ce:	e687      	b.n	144e0 <__aeabi_dadd+0x108>
   147d0:	2500      	movs	r5, #0
   147d2:	e772      	b.n	146ba <__aeabi_dadd+0x2e2>
   147d4:	2100      	movs	r1, #0
   147d6:	e782      	b.n	146de <__aeabi_dadd+0x306>
   147d8:	0023      	movs	r3, r4
   147da:	433b      	orrs	r3, r7
   147dc:	2e00      	cmp	r6, #0
   147de:	d000      	beq.n	147e2 <__aeabi_dadd+0x40a>
   147e0:	e0ab      	b.n	1493a <__aeabi_dadd+0x562>
   147e2:	2b00      	cmp	r3, #0
   147e4:	d100      	bne.n	147e8 <__aeabi_dadd+0x410>
   147e6:	e0e7      	b.n	149b8 <__aeabi_dadd+0x5e0>
   147e8:	000b      	movs	r3, r1
   147ea:	4313      	orrs	r3, r2
   147ec:	d100      	bne.n	147f0 <__aeabi_dadd+0x418>
   147ee:	e677      	b.n	144e0 <__aeabi_dadd+0x108>
   147f0:	18ba      	adds	r2, r7, r2
   147f2:	42ba      	cmp	r2, r7
   147f4:	41bf      	sbcs	r7, r7
   147f6:	1864      	adds	r4, r4, r1
   147f8:	427f      	negs	r7, r7
   147fa:	19e4      	adds	r4, r4, r7
   147fc:	0223      	lsls	r3, r4, #8
   147fe:	d400      	bmi.n	14802 <__aeabi_dadd+0x42a>
   14800:	e0f2      	b.n	149e8 <__aeabi_dadd+0x610>
   14802:	4b7c      	ldr	r3, [pc, #496]	; (149f4 <__aeabi_dadd+0x61c>)
   14804:	0017      	movs	r7, r2
   14806:	401c      	ands	r4, r3
   14808:	0006      	movs	r6, r0
   1480a:	e669      	b.n	144e0 <__aeabi_dadd+0x108>
   1480c:	0020      	movs	r0, r4
   1480e:	4338      	orrs	r0, r7
   14810:	2e00      	cmp	r6, #0
   14812:	d1d1      	bne.n	147b8 <__aeabi_dadd+0x3e0>
   14814:	2800      	cmp	r0, #0
   14816:	d15b      	bne.n	148d0 <__aeabi_dadd+0x4f8>
   14818:	001c      	movs	r4, r3
   1481a:	4314      	orrs	r4, r2
   1481c:	d100      	bne.n	14820 <__aeabi_dadd+0x448>
   1481e:	e0a8      	b.n	14972 <__aeabi_dadd+0x59a>
   14820:	001c      	movs	r4, r3
   14822:	0017      	movs	r7, r2
   14824:	46d8      	mov	r8, fp
   14826:	e65b      	b.n	144e0 <__aeabi_dadd+0x108>
   14828:	0006      	movs	r6, r0
   1482a:	2400      	movs	r4, #0
   1482c:	2700      	movs	r7, #0
   1482e:	e697      	b.n	14560 <__aeabi_dadd+0x188>
   14830:	4650      	mov	r0, sl
   14832:	000b      	movs	r3, r1
   14834:	3820      	subs	r0, #32
   14836:	40c3      	lsrs	r3, r0
   14838:	4699      	mov	r9, r3
   1483a:	4653      	mov	r3, sl
   1483c:	2b20      	cmp	r3, #32
   1483e:	d100      	bne.n	14842 <__aeabi_dadd+0x46a>
   14840:	e095      	b.n	1496e <__aeabi_dadd+0x596>
   14842:	2340      	movs	r3, #64	; 0x40
   14844:	4650      	mov	r0, sl
   14846:	1a1b      	subs	r3, r3, r0
   14848:	4099      	lsls	r1, r3
   1484a:	430a      	orrs	r2, r1
   1484c:	1e51      	subs	r1, r2, #1
   1484e:	418a      	sbcs	r2, r1
   14850:	464b      	mov	r3, r9
   14852:	2100      	movs	r1, #0
   14854:	431a      	orrs	r2, r3
   14856:	e69f      	b.n	14598 <__aeabi_dadd+0x1c0>
   14858:	2e00      	cmp	r6, #0
   1485a:	d130      	bne.n	148be <__aeabi_dadd+0x4e6>
   1485c:	0026      	movs	r6, r4
   1485e:	433e      	orrs	r6, r7
   14860:	d067      	beq.n	14932 <__aeabi_dadd+0x55a>
   14862:	43db      	mvns	r3, r3
   14864:	469a      	mov	sl, r3
   14866:	2b00      	cmp	r3, #0
   14868:	d01c      	beq.n	148a4 <__aeabi_dadd+0x4cc>
   1486a:	4e61      	ldr	r6, [pc, #388]	; (149f0 <__aeabi_dadd+0x618>)
   1486c:	42b0      	cmp	r0, r6
   1486e:	d060      	beq.n	14932 <__aeabi_dadd+0x55a>
   14870:	4653      	mov	r3, sl
   14872:	2b38      	cmp	r3, #56	; 0x38
   14874:	dd00      	ble.n	14878 <__aeabi_dadd+0x4a0>
   14876:	e096      	b.n	149a6 <__aeabi_dadd+0x5ce>
   14878:	2b1f      	cmp	r3, #31
   1487a:	dd00      	ble.n	1487e <__aeabi_dadd+0x4a6>
   1487c:	e09f      	b.n	149be <__aeabi_dadd+0x5e6>
   1487e:	2620      	movs	r6, #32
   14880:	1af3      	subs	r3, r6, r3
   14882:	0026      	movs	r6, r4
   14884:	409e      	lsls	r6, r3
   14886:	469c      	mov	ip, r3
   14888:	46b3      	mov	fp, r6
   1488a:	4653      	mov	r3, sl
   1488c:	003e      	movs	r6, r7
   1488e:	40de      	lsrs	r6, r3
   14890:	0033      	movs	r3, r6
   14892:	465e      	mov	r6, fp
   14894:	431e      	orrs	r6, r3
   14896:	4663      	mov	r3, ip
   14898:	409f      	lsls	r7, r3
   1489a:	1e7b      	subs	r3, r7, #1
   1489c:	419f      	sbcs	r7, r3
   1489e:	4653      	mov	r3, sl
   148a0:	40dc      	lsrs	r4, r3
   148a2:	4337      	orrs	r7, r6
   148a4:	18bf      	adds	r7, r7, r2
   148a6:	4297      	cmp	r7, r2
   148a8:	4192      	sbcs	r2, r2
   148aa:	1864      	adds	r4, r4, r1
   148ac:	4252      	negs	r2, r2
   148ae:	18a4      	adds	r4, r4, r2
   148b0:	0006      	movs	r6, r0
   148b2:	e678      	b.n	145a6 <__aeabi_dadd+0x1ce>
   148b4:	4327      	orrs	r7, r4
   148b6:	1e7c      	subs	r4, r7, #1
   148b8:	41a7      	sbcs	r7, r4
   148ba:	2400      	movs	r4, #0
   148bc:	e737      	b.n	1472e <__aeabi_dadd+0x356>
   148be:	4e4c      	ldr	r6, [pc, #304]	; (149f0 <__aeabi_dadd+0x618>)
   148c0:	42b0      	cmp	r0, r6
   148c2:	d036      	beq.n	14932 <__aeabi_dadd+0x55a>
   148c4:	2680      	movs	r6, #128	; 0x80
   148c6:	425b      	negs	r3, r3
   148c8:	0436      	lsls	r6, r6, #16
   148ca:	469a      	mov	sl, r3
   148cc:	4334      	orrs	r4, r6
   148ce:	e7cf      	b.n	14870 <__aeabi_dadd+0x498>
   148d0:	0018      	movs	r0, r3
   148d2:	4310      	orrs	r0, r2
   148d4:	d100      	bne.n	148d8 <__aeabi_dadd+0x500>
   148d6:	e603      	b.n	144e0 <__aeabi_dadd+0x108>
   148d8:	1ab8      	subs	r0, r7, r2
   148da:	4684      	mov	ip, r0
   148dc:	4567      	cmp	r7, ip
   148de:	41ad      	sbcs	r5, r5
   148e0:	1ae0      	subs	r0, r4, r3
   148e2:	426d      	negs	r5, r5
   148e4:	1b40      	subs	r0, r0, r5
   148e6:	0205      	lsls	r5, r0, #8
   148e8:	d400      	bmi.n	148ec <__aeabi_dadd+0x514>
   148ea:	e62c      	b.n	14546 <__aeabi_dadd+0x16e>
   148ec:	1bd7      	subs	r7, r2, r7
   148ee:	42ba      	cmp	r2, r7
   148f0:	4192      	sbcs	r2, r2
   148f2:	1b1c      	subs	r4, r3, r4
   148f4:	4252      	negs	r2, r2
   148f6:	1aa4      	subs	r4, r4, r2
   148f8:	46d8      	mov	r8, fp
   148fa:	e5f1      	b.n	144e0 <__aeabi_dadd+0x108>
   148fc:	0018      	movs	r0, r3
   148fe:	4310      	orrs	r0, r2
   14900:	d100      	bne.n	14904 <__aeabi_dadd+0x52c>
   14902:	e763      	b.n	147cc <__aeabi_dadd+0x3f4>
   14904:	08f8      	lsrs	r0, r7, #3
   14906:	0767      	lsls	r7, r4, #29
   14908:	4307      	orrs	r7, r0
   1490a:	2080      	movs	r0, #128	; 0x80
   1490c:	08e4      	lsrs	r4, r4, #3
   1490e:	0300      	lsls	r0, r0, #12
   14910:	4204      	tst	r4, r0
   14912:	d008      	beq.n	14926 <__aeabi_dadd+0x54e>
   14914:	08dd      	lsrs	r5, r3, #3
   14916:	4205      	tst	r5, r0
   14918:	d105      	bne.n	14926 <__aeabi_dadd+0x54e>
   1491a:	08d2      	lsrs	r2, r2, #3
   1491c:	0759      	lsls	r1, r3, #29
   1491e:	4311      	orrs	r1, r2
   14920:	000f      	movs	r7, r1
   14922:	002c      	movs	r4, r5
   14924:	46d8      	mov	r8, fp
   14926:	0f7b      	lsrs	r3, r7, #29
   14928:	00e4      	lsls	r4, r4, #3
   1492a:	431c      	orrs	r4, r3
   1492c:	00ff      	lsls	r7, r7, #3
   1492e:	4e30      	ldr	r6, [pc, #192]	; (149f0 <__aeabi_dadd+0x618>)
   14930:	e5d6      	b.n	144e0 <__aeabi_dadd+0x108>
   14932:	000c      	movs	r4, r1
   14934:	0017      	movs	r7, r2
   14936:	0006      	movs	r6, r0
   14938:	e5d2      	b.n	144e0 <__aeabi_dadd+0x108>
   1493a:	2b00      	cmp	r3, #0
   1493c:	d038      	beq.n	149b0 <__aeabi_dadd+0x5d8>
   1493e:	000b      	movs	r3, r1
   14940:	4313      	orrs	r3, r2
   14942:	d100      	bne.n	14946 <__aeabi_dadd+0x56e>
   14944:	e742      	b.n	147cc <__aeabi_dadd+0x3f4>
   14946:	08f8      	lsrs	r0, r7, #3
   14948:	0767      	lsls	r7, r4, #29
   1494a:	4307      	orrs	r7, r0
   1494c:	2080      	movs	r0, #128	; 0x80
   1494e:	08e4      	lsrs	r4, r4, #3
   14950:	0300      	lsls	r0, r0, #12
   14952:	4204      	tst	r4, r0
   14954:	d0e7      	beq.n	14926 <__aeabi_dadd+0x54e>
   14956:	08cb      	lsrs	r3, r1, #3
   14958:	4203      	tst	r3, r0
   1495a:	d1e4      	bne.n	14926 <__aeabi_dadd+0x54e>
   1495c:	08d2      	lsrs	r2, r2, #3
   1495e:	0749      	lsls	r1, r1, #29
   14960:	4311      	orrs	r1, r2
   14962:	000f      	movs	r7, r1
   14964:	001c      	movs	r4, r3
   14966:	e7de      	b.n	14926 <__aeabi_dadd+0x54e>
   14968:	2700      	movs	r7, #0
   1496a:	2400      	movs	r4, #0
   1496c:	e5d5      	b.n	1451a <__aeabi_dadd+0x142>
   1496e:	2100      	movs	r1, #0
   14970:	e76b      	b.n	1484a <__aeabi_dadd+0x472>
   14972:	2500      	movs	r5, #0
   14974:	2700      	movs	r7, #0
   14976:	e5f3      	b.n	14560 <__aeabi_dadd+0x188>
   14978:	464e      	mov	r6, r9
   1497a:	0025      	movs	r5, r4
   1497c:	3e20      	subs	r6, #32
   1497e:	40f5      	lsrs	r5, r6
   14980:	464b      	mov	r3, r9
   14982:	002e      	movs	r6, r5
   14984:	2b20      	cmp	r3, #32
   14986:	d02d      	beq.n	149e4 <__aeabi_dadd+0x60c>
   14988:	2540      	movs	r5, #64	; 0x40
   1498a:	1aed      	subs	r5, r5, r3
   1498c:	40ac      	lsls	r4, r5
   1498e:	4327      	orrs	r7, r4
   14990:	1e7c      	subs	r4, r7, #1
   14992:	41a7      	sbcs	r7, r4
   14994:	2400      	movs	r4, #0
   14996:	4337      	orrs	r7, r6
   14998:	e6c9      	b.n	1472e <__aeabi_dadd+0x356>
   1499a:	2480      	movs	r4, #128	; 0x80
   1499c:	2500      	movs	r5, #0
   1499e:	0324      	lsls	r4, r4, #12
   149a0:	4e13      	ldr	r6, [pc, #76]	; (149f0 <__aeabi_dadd+0x618>)
   149a2:	2700      	movs	r7, #0
   149a4:	e5dc      	b.n	14560 <__aeabi_dadd+0x188>
   149a6:	4327      	orrs	r7, r4
   149a8:	1e7c      	subs	r4, r7, #1
   149aa:	41a7      	sbcs	r7, r4
   149ac:	2400      	movs	r4, #0
   149ae:	e779      	b.n	148a4 <__aeabi_dadd+0x4cc>
   149b0:	000c      	movs	r4, r1
   149b2:	0017      	movs	r7, r2
   149b4:	4e0e      	ldr	r6, [pc, #56]	; (149f0 <__aeabi_dadd+0x618>)
   149b6:	e593      	b.n	144e0 <__aeabi_dadd+0x108>
   149b8:	000c      	movs	r4, r1
   149ba:	0017      	movs	r7, r2
   149bc:	e590      	b.n	144e0 <__aeabi_dadd+0x108>
   149be:	4656      	mov	r6, sl
   149c0:	0023      	movs	r3, r4
   149c2:	3e20      	subs	r6, #32
   149c4:	40f3      	lsrs	r3, r6
   149c6:	4699      	mov	r9, r3
   149c8:	4653      	mov	r3, sl
   149ca:	2b20      	cmp	r3, #32
   149cc:	d00e      	beq.n	149ec <__aeabi_dadd+0x614>
   149ce:	2340      	movs	r3, #64	; 0x40
   149d0:	4656      	mov	r6, sl
   149d2:	1b9b      	subs	r3, r3, r6
   149d4:	409c      	lsls	r4, r3
   149d6:	4327      	orrs	r7, r4
   149d8:	1e7c      	subs	r4, r7, #1
   149da:	41a7      	sbcs	r7, r4
   149dc:	464b      	mov	r3, r9
   149de:	2400      	movs	r4, #0
   149e0:	431f      	orrs	r7, r3
   149e2:	e75f      	b.n	148a4 <__aeabi_dadd+0x4cc>
   149e4:	2400      	movs	r4, #0
   149e6:	e7d2      	b.n	1498e <__aeabi_dadd+0x5b6>
   149e8:	0017      	movs	r7, r2
   149ea:	e5b2      	b.n	14552 <__aeabi_dadd+0x17a>
   149ec:	2400      	movs	r4, #0
   149ee:	e7f2      	b.n	149d6 <__aeabi_dadd+0x5fe>
   149f0:	000007ff 	.word	0x000007ff
   149f4:	ff7fffff 	.word	0xff7fffff

000149f8 <__aeabi_ddiv>:
   149f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   149fa:	4657      	mov	r7, sl
   149fc:	4645      	mov	r5, r8
   149fe:	46de      	mov	lr, fp
   14a00:	464e      	mov	r6, r9
   14a02:	b5e0      	push	{r5, r6, r7, lr}
   14a04:	004c      	lsls	r4, r1, #1
   14a06:	030e      	lsls	r6, r1, #12
   14a08:	b087      	sub	sp, #28
   14a0a:	4683      	mov	fp, r0
   14a0c:	4692      	mov	sl, r2
   14a0e:	001d      	movs	r5, r3
   14a10:	4680      	mov	r8, r0
   14a12:	0b36      	lsrs	r6, r6, #12
   14a14:	0d64      	lsrs	r4, r4, #21
   14a16:	0fcf      	lsrs	r7, r1, #31
   14a18:	2c00      	cmp	r4, #0
   14a1a:	d04f      	beq.n	14abc <__aeabi_ddiv+0xc4>
   14a1c:	4b6f      	ldr	r3, [pc, #444]	; (14bdc <__aeabi_ddiv+0x1e4>)
   14a1e:	429c      	cmp	r4, r3
   14a20:	d035      	beq.n	14a8e <__aeabi_ddiv+0x96>
   14a22:	2380      	movs	r3, #128	; 0x80
   14a24:	0f42      	lsrs	r2, r0, #29
   14a26:	041b      	lsls	r3, r3, #16
   14a28:	00f6      	lsls	r6, r6, #3
   14a2a:	4313      	orrs	r3, r2
   14a2c:	4333      	orrs	r3, r6
   14a2e:	4699      	mov	r9, r3
   14a30:	00c3      	lsls	r3, r0, #3
   14a32:	4698      	mov	r8, r3
   14a34:	4b6a      	ldr	r3, [pc, #424]	; (14be0 <__aeabi_ddiv+0x1e8>)
   14a36:	2600      	movs	r6, #0
   14a38:	469c      	mov	ip, r3
   14a3a:	2300      	movs	r3, #0
   14a3c:	4464      	add	r4, ip
   14a3e:	9303      	str	r3, [sp, #12]
   14a40:	032b      	lsls	r3, r5, #12
   14a42:	0b1b      	lsrs	r3, r3, #12
   14a44:	469b      	mov	fp, r3
   14a46:	006b      	lsls	r3, r5, #1
   14a48:	0fed      	lsrs	r5, r5, #31
   14a4a:	4650      	mov	r0, sl
   14a4c:	0d5b      	lsrs	r3, r3, #21
   14a4e:	9501      	str	r5, [sp, #4]
   14a50:	d05e      	beq.n	14b10 <__aeabi_ddiv+0x118>
   14a52:	4a62      	ldr	r2, [pc, #392]	; (14bdc <__aeabi_ddiv+0x1e4>)
   14a54:	4293      	cmp	r3, r2
   14a56:	d053      	beq.n	14b00 <__aeabi_ddiv+0x108>
   14a58:	465a      	mov	r2, fp
   14a5a:	00d1      	lsls	r1, r2, #3
   14a5c:	2280      	movs	r2, #128	; 0x80
   14a5e:	0f40      	lsrs	r0, r0, #29
   14a60:	0412      	lsls	r2, r2, #16
   14a62:	4302      	orrs	r2, r0
   14a64:	430a      	orrs	r2, r1
   14a66:	4693      	mov	fp, r2
   14a68:	4652      	mov	r2, sl
   14a6a:	00d1      	lsls	r1, r2, #3
   14a6c:	4a5c      	ldr	r2, [pc, #368]	; (14be0 <__aeabi_ddiv+0x1e8>)
   14a6e:	4694      	mov	ip, r2
   14a70:	2200      	movs	r2, #0
   14a72:	4463      	add	r3, ip
   14a74:	0038      	movs	r0, r7
   14a76:	4068      	eors	r0, r5
   14a78:	4684      	mov	ip, r0
   14a7a:	9002      	str	r0, [sp, #8]
   14a7c:	1ae4      	subs	r4, r4, r3
   14a7e:	4316      	orrs	r6, r2
   14a80:	2e0f      	cmp	r6, #15
   14a82:	d900      	bls.n	14a86 <__aeabi_ddiv+0x8e>
   14a84:	e0b4      	b.n	14bf0 <__aeabi_ddiv+0x1f8>
   14a86:	4b57      	ldr	r3, [pc, #348]	; (14be4 <__aeabi_ddiv+0x1ec>)
   14a88:	00b6      	lsls	r6, r6, #2
   14a8a:	599b      	ldr	r3, [r3, r6]
   14a8c:	469f      	mov	pc, r3
   14a8e:	0003      	movs	r3, r0
   14a90:	4333      	orrs	r3, r6
   14a92:	4699      	mov	r9, r3
   14a94:	d16c      	bne.n	14b70 <__aeabi_ddiv+0x178>
   14a96:	2300      	movs	r3, #0
   14a98:	4698      	mov	r8, r3
   14a9a:	3302      	adds	r3, #2
   14a9c:	2608      	movs	r6, #8
   14a9e:	9303      	str	r3, [sp, #12]
   14aa0:	e7ce      	b.n	14a40 <__aeabi_ddiv+0x48>
   14aa2:	46cb      	mov	fp, r9
   14aa4:	4641      	mov	r1, r8
   14aa6:	9a03      	ldr	r2, [sp, #12]
   14aa8:	9701      	str	r7, [sp, #4]
   14aaa:	2a02      	cmp	r2, #2
   14aac:	d165      	bne.n	14b7a <__aeabi_ddiv+0x182>
   14aae:	9b01      	ldr	r3, [sp, #4]
   14ab0:	4c4a      	ldr	r4, [pc, #296]	; (14bdc <__aeabi_ddiv+0x1e4>)
   14ab2:	469c      	mov	ip, r3
   14ab4:	2300      	movs	r3, #0
   14ab6:	2200      	movs	r2, #0
   14ab8:	4698      	mov	r8, r3
   14aba:	e06b      	b.n	14b94 <__aeabi_ddiv+0x19c>
   14abc:	0003      	movs	r3, r0
   14abe:	4333      	orrs	r3, r6
   14ac0:	4699      	mov	r9, r3
   14ac2:	d04e      	beq.n	14b62 <__aeabi_ddiv+0x16a>
   14ac4:	2e00      	cmp	r6, #0
   14ac6:	d100      	bne.n	14aca <__aeabi_ddiv+0xd2>
   14ac8:	e1bc      	b.n	14e44 <__aeabi_ddiv+0x44c>
   14aca:	0030      	movs	r0, r6
   14acc:	f001 fae8 	bl	160a0 <__clzsi2>
   14ad0:	0003      	movs	r3, r0
   14ad2:	3b0b      	subs	r3, #11
   14ad4:	2b1c      	cmp	r3, #28
   14ad6:	dd00      	ble.n	14ada <__aeabi_ddiv+0xe2>
   14ad8:	e1ac      	b.n	14e34 <__aeabi_ddiv+0x43c>
   14ada:	221d      	movs	r2, #29
   14adc:	1ad3      	subs	r3, r2, r3
   14ade:	465a      	mov	r2, fp
   14ae0:	0001      	movs	r1, r0
   14ae2:	40da      	lsrs	r2, r3
   14ae4:	3908      	subs	r1, #8
   14ae6:	408e      	lsls	r6, r1
   14ae8:	0013      	movs	r3, r2
   14aea:	4333      	orrs	r3, r6
   14aec:	4699      	mov	r9, r3
   14aee:	465b      	mov	r3, fp
   14af0:	408b      	lsls	r3, r1
   14af2:	4698      	mov	r8, r3
   14af4:	2300      	movs	r3, #0
   14af6:	4c3c      	ldr	r4, [pc, #240]	; (14be8 <__aeabi_ddiv+0x1f0>)
   14af8:	2600      	movs	r6, #0
   14afa:	1a24      	subs	r4, r4, r0
   14afc:	9303      	str	r3, [sp, #12]
   14afe:	e79f      	b.n	14a40 <__aeabi_ddiv+0x48>
   14b00:	4651      	mov	r1, sl
   14b02:	465a      	mov	r2, fp
   14b04:	4311      	orrs	r1, r2
   14b06:	d129      	bne.n	14b5c <__aeabi_ddiv+0x164>
   14b08:	2200      	movs	r2, #0
   14b0a:	4693      	mov	fp, r2
   14b0c:	3202      	adds	r2, #2
   14b0e:	e7b1      	b.n	14a74 <__aeabi_ddiv+0x7c>
   14b10:	4659      	mov	r1, fp
   14b12:	4301      	orrs	r1, r0
   14b14:	d01e      	beq.n	14b54 <__aeabi_ddiv+0x15c>
   14b16:	465b      	mov	r3, fp
   14b18:	2b00      	cmp	r3, #0
   14b1a:	d100      	bne.n	14b1e <__aeabi_ddiv+0x126>
   14b1c:	e19e      	b.n	14e5c <__aeabi_ddiv+0x464>
   14b1e:	4658      	mov	r0, fp
   14b20:	f001 fabe 	bl	160a0 <__clzsi2>
   14b24:	0003      	movs	r3, r0
   14b26:	3b0b      	subs	r3, #11
   14b28:	2b1c      	cmp	r3, #28
   14b2a:	dd00      	ble.n	14b2e <__aeabi_ddiv+0x136>
   14b2c:	e18f      	b.n	14e4e <__aeabi_ddiv+0x456>
   14b2e:	0002      	movs	r2, r0
   14b30:	4659      	mov	r1, fp
   14b32:	3a08      	subs	r2, #8
   14b34:	4091      	lsls	r1, r2
   14b36:	468b      	mov	fp, r1
   14b38:	211d      	movs	r1, #29
   14b3a:	1acb      	subs	r3, r1, r3
   14b3c:	4651      	mov	r1, sl
   14b3e:	40d9      	lsrs	r1, r3
   14b40:	000b      	movs	r3, r1
   14b42:	4659      	mov	r1, fp
   14b44:	430b      	orrs	r3, r1
   14b46:	4651      	mov	r1, sl
   14b48:	469b      	mov	fp, r3
   14b4a:	4091      	lsls	r1, r2
   14b4c:	4b26      	ldr	r3, [pc, #152]	; (14be8 <__aeabi_ddiv+0x1f0>)
   14b4e:	2200      	movs	r2, #0
   14b50:	1a1b      	subs	r3, r3, r0
   14b52:	e78f      	b.n	14a74 <__aeabi_ddiv+0x7c>
   14b54:	2300      	movs	r3, #0
   14b56:	2201      	movs	r2, #1
   14b58:	469b      	mov	fp, r3
   14b5a:	e78b      	b.n	14a74 <__aeabi_ddiv+0x7c>
   14b5c:	4651      	mov	r1, sl
   14b5e:	2203      	movs	r2, #3
   14b60:	e788      	b.n	14a74 <__aeabi_ddiv+0x7c>
   14b62:	2300      	movs	r3, #0
   14b64:	4698      	mov	r8, r3
   14b66:	3301      	adds	r3, #1
   14b68:	2604      	movs	r6, #4
   14b6a:	2400      	movs	r4, #0
   14b6c:	9303      	str	r3, [sp, #12]
   14b6e:	e767      	b.n	14a40 <__aeabi_ddiv+0x48>
   14b70:	2303      	movs	r3, #3
   14b72:	46b1      	mov	r9, r6
   14b74:	9303      	str	r3, [sp, #12]
   14b76:	260c      	movs	r6, #12
   14b78:	e762      	b.n	14a40 <__aeabi_ddiv+0x48>
   14b7a:	2a03      	cmp	r2, #3
   14b7c:	d100      	bne.n	14b80 <__aeabi_ddiv+0x188>
   14b7e:	e25c      	b.n	1503a <__aeabi_ddiv+0x642>
   14b80:	9b01      	ldr	r3, [sp, #4]
   14b82:	2a01      	cmp	r2, #1
   14b84:	d000      	beq.n	14b88 <__aeabi_ddiv+0x190>
   14b86:	e1e4      	b.n	14f52 <__aeabi_ddiv+0x55a>
   14b88:	4013      	ands	r3, r2
   14b8a:	469c      	mov	ip, r3
   14b8c:	2300      	movs	r3, #0
   14b8e:	2400      	movs	r4, #0
   14b90:	2200      	movs	r2, #0
   14b92:	4698      	mov	r8, r3
   14b94:	2100      	movs	r1, #0
   14b96:	0312      	lsls	r2, r2, #12
   14b98:	0b13      	lsrs	r3, r2, #12
   14b9a:	0d0a      	lsrs	r2, r1, #20
   14b9c:	0512      	lsls	r2, r2, #20
   14b9e:	431a      	orrs	r2, r3
   14ba0:	0523      	lsls	r3, r4, #20
   14ba2:	4c12      	ldr	r4, [pc, #72]	; (14bec <__aeabi_ddiv+0x1f4>)
   14ba4:	4640      	mov	r0, r8
   14ba6:	4022      	ands	r2, r4
   14ba8:	4313      	orrs	r3, r2
   14baa:	4662      	mov	r2, ip
   14bac:	005b      	lsls	r3, r3, #1
   14bae:	07d2      	lsls	r2, r2, #31
   14bb0:	085b      	lsrs	r3, r3, #1
   14bb2:	4313      	orrs	r3, r2
   14bb4:	0019      	movs	r1, r3
   14bb6:	b007      	add	sp, #28
   14bb8:	bc3c      	pop	{r2, r3, r4, r5}
   14bba:	4690      	mov	r8, r2
   14bbc:	4699      	mov	r9, r3
   14bbe:	46a2      	mov	sl, r4
   14bc0:	46ab      	mov	fp, r5
   14bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14bc4:	2300      	movs	r3, #0
   14bc6:	2280      	movs	r2, #128	; 0x80
   14bc8:	469c      	mov	ip, r3
   14bca:	0312      	lsls	r2, r2, #12
   14bcc:	4698      	mov	r8, r3
   14bce:	4c03      	ldr	r4, [pc, #12]	; (14bdc <__aeabi_ddiv+0x1e4>)
   14bd0:	e7e0      	b.n	14b94 <__aeabi_ddiv+0x19c>
   14bd2:	2300      	movs	r3, #0
   14bd4:	4c01      	ldr	r4, [pc, #4]	; (14bdc <__aeabi_ddiv+0x1e4>)
   14bd6:	2200      	movs	r2, #0
   14bd8:	4698      	mov	r8, r3
   14bda:	e7db      	b.n	14b94 <__aeabi_ddiv+0x19c>
   14bdc:	000007ff 	.word	0x000007ff
   14be0:	fffffc01 	.word	0xfffffc01
   14be4:	000183e0 	.word	0x000183e0
   14be8:	fffffc0d 	.word	0xfffffc0d
   14bec:	800fffff 	.word	0x800fffff
   14bf0:	45d9      	cmp	r9, fp
   14bf2:	d900      	bls.n	14bf6 <__aeabi_ddiv+0x1fe>
   14bf4:	e139      	b.n	14e6a <__aeabi_ddiv+0x472>
   14bf6:	d100      	bne.n	14bfa <__aeabi_ddiv+0x202>
   14bf8:	e134      	b.n	14e64 <__aeabi_ddiv+0x46c>
   14bfa:	2300      	movs	r3, #0
   14bfc:	4646      	mov	r6, r8
   14bfe:	464d      	mov	r5, r9
   14c00:	469a      	mov	sl, r3
   14c02:	3c01      	subs	r4, #1
   14c04:	465b      	mov	r3, fp
   14c06:	0e0a      	lsrs	r2, r1, #24
   14c08:	021b      	lsls	r3, r3, #8
   14c0a:	431a      	orrs	r2, r3
   14c0c:	020b      	lsls	r3, r1, #8
   14c0e:	0c17      	lsrs	r7, r2, #16
   14c10:	9303      	str	r3, [sp, #12]
   14c12:	0413      	lsls	r3, r2, #16
   14c14:	0c1b      	lsrs	r3, r3, #16
   14c16:	0039      	movs	r1, r7
   14c18:	0028      	movs	r0, r5
   14c1a:	4690      	mov	r8, r2
   14c1c:	9301      	str	r3, [sp, #4]
   14c1e:	f7fe f999 	bl	12f54 <__udivsi3>
   14c22:	0002      	movs	r2, r0
   14c24:	9b01      	ldr	r3, [sp, #4]
   14c26:	4683      	mov	fp, r0
   14c28:	435a      	muls	r2, r3
   14c2a:	0028      	movs	r0, r5
   14c2c:	0039      	movs	r1, r7
   14c2e:	4691      	mov	r9, r2
   14c30:	f7fe fa16 	bl	13060 <__aeabi_uidivmod>
   14c34:	0c35      	lsrs	r5, r6, #16
   14c36:	0409      	lsls	r1, r1, #16
   14c38:	430d      	orrs	r5, r1
   14c3a:	45a9      	cmp	r9, r5
   14c3c:	d90d      	bls.n	14c5a <__aeabi_ddiv+0x262>
   14c3e:	465b      	mov	r3, fp
   14c40:	4445      	add	r5, r8
   14c42:	3b01      	subs	r3, #1
   14c44:	45a8      	cmp	r8, r5
   14c46:	d900      	bls.n	14c4a <__aeabi_ddiv+0x252>
   14c48:	e13a      	b.n	14ec0 <__aeabi_ddiv+0x4c8>
   14c4a:	45a9      	cmp	r9, r5
   14c4c:	d800      	bhi.n	14c50 <__aeabi_ddiv+0x258>
   14c4e:	e137      	b.n	14ec0 <__aeabi_ddiv+0x4c8>
   14c50:	2302      	movs	r3, #2
   14c52:	425b      	negs	r3, r3
   14c54:	469c      	mov	ip, r3
   14c56:	4445      	add	r5, r8
   14c58:	44e3      	add	fp, ip
   14c5a:	464b      	mov	r3, r9
   14c5c:	1aeb      	subs	r3, r5, r3
   14c5e:	0039      	movs	r1, r7
   14c60:	0018      	movs	r0, r3
   14c62:	9304      	str	r3, [sp, #16]
   14c64:	f7fe f976 	bl	12f54 <__udivsi3>
   14c68:	9b01      	ldr	r3, [sp, #4]
   14c6a:	0005      	movs	r5, r0
   14c6c:	4343      	muls	r3, r0
   14c6e:	0039      	movs	r1, r7
   14c70:	9804      	ldr	r0, [sp, #16]
   14c72:	4699      	mov	r9, r3
   14c74:	f7fe f9f4 	bl	13060 <__aeabi_uidivmod>
   14c78:	0433      	lsls	r3, r6, #16
   14c7a:	0409      	lsls	r1, r1, #16
   14c7c:	0c1b      	lsrs	r3, r3, #16
   14c7e:	430b      	orrs	r3, r1
   14c80:	4599      	cmp	r9, r3
   14c82:	d909      	bls.n	14c98 <__aeabi_ddiv+0x2a0>
   14c84:	4443      	add	r3, r8
   14c86:	1e6a      	subs	r2, r5, #1
   14c88:	4598      	cmp	r8, r3
   14c8a:	d900      	bls.n	14c8e <__aeabi_ddiv+0x296>
   14c8c:	e11a      	b.n	14ec4 <__aeabi_ddiv+0x4cc>
   14c8e:	4599      	cmp	r9, r3
   14c90:	d800      	bhi.n	14c94 <__aeabi_ddiv+0x29c>
   14c92:	e117      	b.n	14ec4 <__aeabi_ddiv+0x4cc>
   14c94:	3d02      	subs	r5, #2
   14c96:	4443      	add	r3, r8
   14c98:	464a      	mov	r2, r9
   14c9a:	1a9b      	subs	r3, r3, r2
   14c9c:	465a      	mov	r2, fp
   14c9e:	0412      	lsls	r2, r2, #16
   14ca0:	432a      	orrs	r2, r5
   14ca2:	9903      	ldr	r1, [sp, #12]
   14ca4:	4693      	mov	fp, r2
   14ca6:	0c10      	lsrs	r0, r2, #16
   14ca8:	0c0a      	lsrs	r2, r1, #16
   14caa:	4691      	mov	r9, r2
   14cac:	0409      	lsls	r1, r1, #16
   14cae:	465a      	mov	r2, fp
   14cb0:	0c09      	lsrs	r1, r1, #16
   14cb2:	464e      	mov	r6, r9
   14cb4:	000d      	movs	r5, r1
   14cb6:	0412      	lsls	r2, r2, #16
   14cb8:	0c12      	lsrs	r2, r2, #16
   14cba:	4345      	muls	r5, r0
   14cbc:	9105      	str	r1, [sp, #20]
   14cbe:	4351      	muls	r1, r2
   14cc0:	4372      	muls	r2, r6
   14cc2:	4370      	muls	r0, r6
   14cc4:	1952      	adds	r2, r2, r5
   14cc6:	0c0e      	lsrs	r6, r1, #16
   14cc8:	18b2      	adds	r2, r6, r2
   14cca:	4295      	cmp	r5, r2
   14ccc:	d903      	bls.n	14cd6 <__aeabi_ddiv+0x2de>
   14cce:	2580      	movs	r5, #128	; 0x80
   14cd0:	026d      	lsls	r5, r5, #9
   14cd2:	46ac      	mov	ip, r5
   14cd4:	4460      	add	r0, ip
   14cd6:	0c15      	lsrs	r5, r2, #16
   14cd8:	0409      	lsls	r1, r1, #16
   14cda:	0412      	lsls	r2, r2, #16
   14cdc:	0c09      	lsrs	r1, r1, #16
   14cde:	1828      	adds	r0, r5, r0
   14ce0:	1852      	adds	r2, r2, r1
   14ce2:	4283      	cmp	r3, r0
   14ce4:	d200      	bcs.n	14ce8 <__aeabi_ddiv+0x2f0>
   14ce6:	e0ce      	b.n	14e86 <__aeabi_ddiv+0x48e>
   14ce8:	d100      	bne.n	14cec <__aeabi_ddiv+0x2f4>
   14cea:	e0c8      	b.n	14e7e <__aeabi_ddiv+0x486>
   14cec:	1a1d      	subs	r5, r3, r0
   14cee:	4653      	mov	r3, sl
   14cf0:	1a9e      	subs	r6, r3, r2
   14cf2:	45b2      	cmp	sl, r6
   14cf4:	4192      	sbcs	r2, r2
   14cf6:	4252      	negs	r2, r2
   14cf8:	1aab      	subs	r3, r5, r2
   14cfa:	469a      	mov	sl, r3
   14cfc:	4598      	cmp	r8, r3
   14cfe:	d100      	bne.n	14d02 <__aeabi_ddiv+0x30a>
   14d00:	e117      	b.n	14f32 <__aeabi_ddiv+0x53a>
   14d02:	0039      	movs	r1, r7
   14d04:	0018      	movs	r0, r3
   14d06:	f7fe f925 	bl	12f54 <__udivsi3>
   14d0a:	9b01      	ldr	r3, [sp, #4]
   14d0c:	0005      	movs	r5, r0
   14d0e:	4343      	muls	r3, r0
   14d10:	0039      	movs	r1, r7
   14d12:	4650      	mov	r0, sl
   14d14:	9304      	str	r3, [sp, #16]
   14d16:	f7fe f9a3 	bl	13060 <__aeabi_uidivmod>
   14d1a:	9804      	ldr	r0, [sp, #16]
   14d1c:	040b      	lsls	r3, r1, #16
   14d1e:	0c31      	lsrs	r1, r6, #16
   14d20:	4319      	orrs	r1, r3
   14d22:	4288      	cmp	r0, r1
   14d24:	d909      	bls.n	14d3a <__aeabi_ddiv+0x342>
   14d26:	4441      	add	r1, r8
   14d28:	1e6b      	subs	r3, r5, #1
   14d2a:	4588      	cmp	r8, r1
   14d2c:	d900      	bls.n	14d30 <__aeabi_ddiv+0x338>
   14d2e:	e107      	b.n	14f40 <__aeabi_ddiv+0x548>
   14d30:	4288      	cmp	r0, r1
   14d32:	d800      	bhi.n	14d36 <__aeabi_ddiv+0x33e>
   14d34:	e104      	b.n	14f40 <__aeabi_ddiv+0x548>
   14d36:	3d02      	subs	r5, #2
   14d38:	4441      	add	r1, r8
   14d3a:	9b04      	ldr	r3, [sp, #16]
   14d3c:	1acb      	subs	r3, r1, r3
   14d3e:	0018      	movs	r0, r3
   14d40:	0039      	movs	r1, r7
   14d42:	9304      	str	r3, [sp, #16]
   14d44:	f7fe f906 	bl	12f54 <__udivsi3>
   14d48:	9b01      	ldr	r3, [sp, #4]
   14d4a:	4682      	mov	sl, r0
   14d4c:	4343      	muls	r3, r0
   14d4e:	0039      	movs	r1, r7
   14d50:	9804      	ldr	r0, [sp, #16]
   14d52:	9301      	str	r3, [sp, #4]
   14d54:	f7fe f984 	bl	13060 <__aeabi_uidivmod>
   14d58:	9801      	ldr	r0, [sp, #4]
   14d5a:	040b      	lsls	r3, r1, #16
   14d5c:	0431      	lsls	r1, r6, #16
   14d5e:	0c09      	lsrs	r1, r1, #16
   14d60:	4319      	orrs	r1, r3
   14d62:	4288      	cmp	r0, r1
   14d64:	d90d      	bls.n	14d82 <__aeabi_ddiv+0x38a>
   14d66:	4653      	mov	r3, sl
   14d68:	4441      	add	r1, r8
   14d6a:	3b01      	subs	r3, #1
   14d6c:	4588      	cmp	r8, r1
   14d6e:	d900      	bls.n	14d72 <__aeabi_ddiv+0x37a>
   14d70:	e0e8      	b.n	14f44 <__aeabi_ddiv+0x54c>
   14d72:	4288      	cmp	r0, r1
   14d74:	d800      	bhi.n	14d78 <__aeabi_ddiv+0x380>
   14d76:	e0e5      	b.n	14f44 <__aeabi_ddiv+0x54c>
   14d78:	2302      	movs	r3, #2
   14d7a:	425b      	negs	r3, r3
   14d7c:	469c      	mov	ip, r3
   14d7e:	4441      	add	r1, r8
   14d80:	44e2      	add	sl, ip
   14d82:	9b01      	ldr	r3, [sp, #4]
   14d84:	042d      	lsls	r5, r5, #16
   14d86:	1ace      	subs	r6, r1, r3
   14d88:	4651      	mov	r1, sl
   14d8a:	4329      	orrs	r1, r5
   14d8c:	9d05      	ldr	r5, [sp, #20]
   14d8e:	464f      	mov	r7, r9
   14d90:	002a      	movs	r2, r5
   14d92:	040b      	lsls	r3, r1, #16
   14d94:	0c08      	lsrs	r0, r1, #16
   14d96:	0c1b      	lsrs	r3, r3, #16
   14d98:	435a      	muls	r2, r3
   14d9a:	4345      	muls	r5, r0
   14d9c:	437b      	muls	r3, r7
   14d9e:	4378      	muls	r0, r7
   14da0:	195b      	adds	r3, r3, r5
   14da2:	0c17      	lsrs	r7, r2, #16
   14da4:	18fb      	adds	r3, r7, r3
   14da6:	429d      	cmp	r5, r3
   14da8:	d903      	bls.n	14db2 <__aeabi_ddiv+0x3ba>
   14daa:	2580      	movs	r5, #128	; 0x80
   14dac:	026d      	lsls	r5, r5, #9
   14dae:	46ac      	mov	ip, r5
   14db0:	4460      	add	r0, ip
   14db2:	0c1d      	lsrs	r5, r3, #16
   14db4:	0412      	lsls	r2, r2, #16
   14db6:	041b      	lsls	r3, r3, #16
   14db8:	0c12      	lsrs	r2, r2, #16
   14dba:	1828      	adds	r0, r5, r0
   14dbc:	189b      	adds	r3, r3, r2
   14dbe:	4286      	cmp	r6, r0
   14dc0:	d200      	bcs.n	14dc4 <__aeabi_ddiv+0x3cc>
   14dc2:	e093      	b.n	14eec <__aeabi_ddiv+0x4f4>
   14dc4:	d100      	bne.n	14dc8 <__aeabi_ddiv+0x3d0>
   14dc6:	e08e      	b.n	14ee6 <__aeabi_ddiv+0x4ee>
   14dc8:	2301      	movs	r3, #1
   14dca:	4319      	orrs	r1, r3
   14dcc:	4ba0      	ldr	r3, [pc, #640]	; (15050 <__aeabi_ddiv+0x658>)
   14dce:	18e3      	adds	r3, r4, r3
   14dd0:	2b00      	cmp	r3, #0
   14dd2:	dc00      	bgt.n	14dd6 <__aeabi_ddiv+0x3de>
   14dd4:	e099      	b.n	14f0a <__aeabi_ddiv+0x512>
   14dd6:	074a      	lsls	r2, r1, #29
   14dd8:	d000      	beq.n	14ddc <__aeabi_ddiv+0x3e4>
   14dda:	e09e      	b.n	14f1a <__aeabi_ddiv+0x522>
   14ddc:	465a      	mov	r2, fp
   14dde:	01d2      	lsls	r2, r2, #7
   14de0:	d506      	bpl.n	14df0 <__aeabi_ddiv+0x3f8>
   14de2:	465a      	mov	r2, fp
   14de4:	4b9b      	ldr	r3, [pc, #620]	; (15054 <__aeabi_ddiv+0x65c>)
   14de6:	401a      	ands	r2, r3
   14de8:	2380      	movs	r3, #128	; 0x80
   14dea:	4693      	mov	fp, r2
   14dec:	00db      	lsls	r3, r3, #3
   14dee:	18e3      	adds	r3, r4, r3
   14df0:	4a99      	ldr	r2, [pc, #612]	; (15058 <__aeabi_ddiv+0x660>)
   14df2:	4293      	cmp	r3, r2
   14df4:	dd68      	ble.n	14ec8 <__aeabi_ddiv+0x4d0>
   14df6:	2301      	movs	r3, #1
   14df8:	9a02      	ldr	r2, [sp, #8]
   14dfa:	4c98      	ldr	r4, [pc, #608]	; (1505c <__aeabi_ddiv+0x664>)
   14dfc:	401a      	ands	r2, r3
   14dfe:	2300      	movs	r3, #0
   14e00:	4694      	mov	ip, r2
   14e02:	4698      	mov	r8, r3
   14e04:	2200      	movs	r2, #0
   14e06:	e6c5      	b.n	14b94 <__aeabi_ddiv+0x19c>
   14e08:	2280      	movs	r2, #128	; 0x80
   14e0a:	464b      	mov	r3, r9
   14e0c:	0312      	lsls	r2, r2, #12
   14e0e:	4213      	tst	r3, r2
   14e10:	d00a      	beq.n	14e28 <__aeabi_ddiv+0x430>
   14e12:	465b      	mov	r3, fp
   14e14:	4213      	tst	r3, r2
   14e16:	d106      	bne.n	14e26 <__aeabi_ddiv+0x42e>
   14e18:	431a      	orrs	r2, r3
   14e1a:	0312      	lsls	r2, r2, #12
   14e1c:	0b12      	lsrs	r2, r2, #12
   14e1e:	46ac      	mov	ip, r5
   14e20:	4688      	mov	r8, r1
   14e22:	4c8e      	ldr	r4, [pc, #568]	; (1505c <__aeabi_ddiv+0x664>)
   14e24:	e6b6      	b.n	14b94 <__aeabi_ddiv+0x19c>
   14e26:	464b      	mov	r3, r9
   14e28:	431a      	orrs	r2, r3
   14e2a:	0312      	lsls	r2, r2, #12
   14e2c:	0b12      	lsrs	r2, r2, #12
   14e2e:	46bc      	mov	ip, r7
   14e30:	4c8a      	ldr	r4, [pc, #552]	; (1505c <__aeabi_ddiv+0x664>)
   14e32:	e6af      	b.n	14b94 <__aeabi_ddiv+0x19c>
   14e34:	0003      	movs	r3, r0
   14e36:	465a      	mov	r2, fp
   14e38:	3b28      	subs	r3, #40	; 0x28
   14e3a:	409a      	lsls	r2, r3
   14e3c:	2300      	movs	r3, #0
   14e3e:	4691      	mov	r9, r2
   14e40:	4698      	mov	r8, r3
   14e42:	e657      	b.n	14af4 <__aeabi_ddiv+0xfc>
   14e44:	4658      	mov	r0, fp
   14e46:	f001 f92b 	bl	160a0 <__clzsi2>
   14e4a:	3020      	adds	r0, #32
   14e4c:	e640      	b.n	14ad0 <__aeabi_ddiv+0xd8>
   14e4e:	0003      	movs	r3, r0
   14e50:	4652      	mov	r2, sl
   14e52:	3b28      	subs	r3, #40	; 0x28
   14e54:	409a      	lsls	r2, r3
   14e56:	2100      	movs	r1, #0
   14e58:	4693      	mov	fp, r2
   14e5a:	e677      	b.n	14b4c <__aeabi_ddiv+0x154>
   14e5c:	f001 f920 	bl	160a0 <__clzsi2>
   14e60:	3020      	adds	r0, #32
   14e62:	e65f      	b.n	14b24 <__aeabi_ddiv+0x12c>
   14e64:	4588      	cmp	r8, r1
   14e66:	d200      	bcs.n	14e6a <__aeabi_ddiv+0x472>
   14e68:	e6c7      	b.n	14bfa <__aeabi_ddiv+0x202>
   14e6a:	464b      	mov	r3, r9
   14e6c:	07de      	lsls	r6, r3, #31
   14e6e:	085d      	lsrs	r5, r3, #1
   14e70:	4643      	mov	r3, r8
   14e72:	085b      	lsrs	r3, r3, #1
   14e74:	431e      	orrs	r6, r3
   14e76:	4643      	mov	r3, r8
   14e78:	07db      	lsls	r3, r3, #31
   14e7a:	469a      	mov	sl, r3
   14e7c:	e6c2      	b.n	14c04 <__aeabi_ddiv+0x20c>
   14e7e:	2500      	movs	r5, #0
   14e80:	4592      	cmp	sl, r2
   14e82:	d300      	bcc.n	14e86 <__aeabi_ddiv+0x48e>
   14e84:	e733      	b.n	14cee <__aeabi_ddiv+0x2f6>
   14e86:	9e03      	ldr	r6, [sp, #12]
   14e88:	4659      	mov	r1, fp
   14e8a:	46b4      	mov	ip, r6
   14e8c:	44e2      	add	sl, ip
   14e8e:	45b2      	cmp	sl, r6
   14e90:	41ad      	sbcs	r5, r5
   14e92:	426d      	negs	r5, r5
   14e94:	4445      	add	r5, r8
   14e96:	18eb      	adds	r3, r5, r3
   14e98:	3901      	subs	r1, #1
   14e9a:	4598      	cmp	r8, r3
   14e9c:	d207      	bcs.n	14eae <__aeabi_ddiv+0x4b6>
   14e9e:	4298      	cmp	r0, r3
   14ea0:	d900      	bls.n	14ea4 <__aeabi_ddiv+0x4ac>
   14ea2:	e07f      	b.n	14fa4 <__aeabi_ddiv+0x5ac>
   14ea4:	d100      	bne.n	14ea8 <__aeabi_ddiv+0x4b0>
   14ea6:	e0bc      	b.n	15022 <__aeabi_ddiv+0x62a>
   14ea8:	1a1d      	subs	r5, r3, r0
   14eaa:	468b      	mov	fp, r1
   14eac:	e71f      	b.n	14cee <__aeabi_ddiv+0x2f6>
   14eae:	4598      	cmp	r8, r3
   14eb0:	d1fa      	bne.n	14ea8 <__aeabi_ddiv+0x4b0>
   14eb2:	9d03      	ldr	r5, [sp, #12]
   14eb4:	4555      	cmp	r5, sl
   14eb6:	d9f2      	bls.n	14e9e <__aeabi_ddiv+0x4a6>
   14eb8:	4643      	mov	r3, r8
   14eba:	468b      	mov	fp, r1
   14ebc:	1a1d      	subs	r5, r3, r0
   14ebe:	e716      	b.n	14cee <__aeabi_ddiv+0x2f6>
   14ec0:	469b      	mov	fp, r3
   14ec2:	e6ca      	b.n	14c5a <__aeabi_ddiv+0x262>
   14ec4:	0015      	movs	r5, r2
   14ec6:	e6e7      	b.n	14c98 <__aeabi_ddiv+0x2a0>
   14ec8:	465a      	mov	r2, fp
   14eca:	08c9      	lsrs	r1, r1, #3
   14ecc:	0752      	lsls	r2, r2, #29
   14ece:	430a      	orrs	r2, r1
   14ed0:	055b      	lsls	r3, r3, #21
   14ed2:	4690      	mov	r8, r2
   14ed4:	0d5c      	lsrs	r4, r3, #21
   14ed6:	465a      	mov	r2, fp
   14ed8:	2301      	movs	r3, #1
   14eda:	9902      	ldr	r1, [sp, #8]
   14edc:	0252      	lsls	r2, r2, #9
   14ede:	4019      	ands	r1, r3
   14ee0:	0b12      	lsrs	r2, r2, #12
   14ee2:	468c      	mov	ip, r1
   14ee4:	e656      	b.n	14b94 <__aeabi_ddiv+0x19c>
   14ee6:	2b00      	cmp	r3, #0
   14ee8:	d100      	bne.n	14eec <__aeabi_ddiv+0x4f4>
   14eea:	e76f      	b.n	14dcc <__aeabi_ddiv+0x3d4>
   14eec:	4446      	add	r6, r8
   14eee:	1e4a      	subs	r2, r1, #1
   14ef0:	45b0      	cmp	r8, r6
   14ef2:	d929      	bls.n	14f48 <__aeabi_ddiv+0x550>
   14ef4:	0011      	movs	r1, r2
   14ef6:	4286      	cmp	r6, r0
   14ef8:	d000      	beq.n	14efc <__aeabi_ddiv+0x504>
   14efa:	e765      	b.n	14dc8 <__aeabi_ddiv+0x3d0>
   14efc:	9a03      	ldr	r2, [sp, #12]
   14efe:	4293      	cmp	r3, r2
   14f00:	d000      	beq.n	14f04 <__aeabi_ddiv+0x50c>
   14f02:	e761      	b.n	14dc8 <__aeabi_ddiv+0x3d0>
   14f04:	e762      	b.n	14dcc <__aeabi_ddiv+0x3d4>
   14f06:	2101      	movs	r1, #1
   14f08:	4249      	negs	r1, r1
   14f0a:	2001      	movs	r0, #1
   14f0c:	1ac2      	subs	r2, r0, r3
   14f0e:	2a38      	cmp	r2, #56	; 0x38
   14f10:	dd21      	ble.n	14f56 <__aeabi_ddiv+0x55e>
   14f12:	9b02      	ldr	r3, [sp, #8]
   14f14:	4003      	ands	r3, r0
   14f16:	469c      	mov	ip, r3
   14f18:	e638      	b.n	14b8c <__aeabi_ddiv+0x194>
   14f1a:	220f      	movs	r2, #15
   14f1c:	400a      	ands	r2, r1
   14f1e:	2a04      	cmp	r2, #4
   14f20:	d100      	bne.n	14f24 <__aeabi_ddiv+0x52c>
   14f22:	e75b      	b.n	14ddc <__aeabi_ddiv+0x3e4>
   14f24:	000a      	movs	r2, r1
   14f26:	1d11      	adds	r1, r2, #4
   14f28:	4291      	cmp	r1, r2
   14f2a:	4192      	sbcs	r2, r2
   14f2c:	4252      	negs	r2, r2
   14f2e:	4493      	add	fp, r2
   14f30:	e754      	b.n	14ddc <__aeabi_ddiv+0x3e4>
   14f32:	4b47      	ldr	r3, [pc, #284]	; (15050 <__aeabi_ddiv+0x658>)
   14f34:	18e3      	adds	r3, r4, r3
   14f36:	2b00      	cmp	r3, #0
   14f38:	dde5      	ble.n	14f06 <__aeabi_ddiv+0x50e>
   14f3a:	2201      	movs	r2, #1
   14f3c:	4252      	negs	r2, r2
   14f3e:	e7f2      	b.n	14f26 <__aeabi_ddiv+0x52e>
   14f40:	001d      	movs	r5, r3
   14f42:	e6fa      	b.n	14d3a <__aeabi_ddiv+0x342>
   14f44:	469a      	mov	sl, r3
   14f46:	e71c      	b.n	14d82 <__aeabi_ddiv+0x38a>
   14f48:	42b0      	cmp	r0, r6
   14f4a:	d839      	bhi.n	14fc0 <__aeabi_ddiv+0x5c8>
   14f4c:	d06e      	beq.n	1502c <__aeabi_ddiv+0x634>
   14f4e:	0011      	movs	r1, r2
   14f50:	e73a      	b.n	14dc8 <__aeabi_ddiv+0x3d0>
   14f52:	9302      	str	r3, [sp, #8]
   14f54:	e73a      	b.n	14dcc <__aeabi_ddiv+0x3d4>
   14f56:	2a1f      	cmp	r2, #31
   14f58:	dc3c      	bgt.n	14fd4 <__aeabi_ddiv+0x5dc>
   14f5a:	2320      	movs	r3, #32
   14f5c:	1a9b      	subs	r3, r3, r2
   14f5e:	000c      	movs	r4, r1
   14f60:	4658      	mov	r0, fp
   14f62:	4099      	lsls	r1, r3
   14f64:	4098      	lsls	r0, r3
   14f66:	1e4b      	subs	r3, r1, #1
   14f68:	4199      	sbcs	r1, r3
   14f6a:	465b      	mov	r3, fp
   14f6c:	40d4      	lsrs	r4, r2
   14f6e:	40d3      	lsrs	r3, r2
   14f70:	4320      	orrs	r0, r4
   14f72:	4308      	orrs	r0, r1
   14f74:	001a      	movs	r2, r3
   14f76:	0743      	lsls	r3, r0, #29
   14f78:	d009      	beq.n	14f8e <__aeabi_ddiv+0x596>
   14f7a:	230f      	movs	r3, #15
   14f7c:	4003      	ands	r3, r0
   14f7e:	2b04      	cmp	r3, #4
   14f80:	d005      	beq.n	14f8e <__aeabi_ddiv+0x596>
   14f82:	0001      	movs	r1, r0
   14f84:	1d08      	adds	r0, r1, #4
   14f86:	4288      	cmp	r0, r1
   14f88:	419b      	sbcs	r3, r3
   14f8a:	425b      	negs	r3, r3
   14f8c:	18d2      	adds	r2, r2, r3
   14f8e:	0213      	lsls	r3, r2, #8
   14f90:	d53a      	bpl.n	15008 <__aeabi_ddiv+0x610>
   14f92:	2301      	movs	r3, #1
   14f94:	9a02      	ldr	r2, [sp, #8]
   14f96:	2401      	movs	r4, #1
   14f98:	401a      	ands	r2, r3
   14f9a:	2300      	movs	r3, #0
   14f9c:	4694      	mov	ip, r2
   14f9e:	4698      	mov	r8, r3
   14fa0:	2200      	movs	r2, #0
   14fa2:	e5f7      	b.n	14b94 <__aeabi_ddiv+0x19c>
   14fa4:	2102      	movs	r1, #2
   14fa6:	4249      	negs	r1, r1
   14fa8:	468c      	mov	ip, r1
   14faa:	9d03      	ldr	r5, [sp, #12]
   14fac:	44e3      	add	fp, ip
   14fae:	46ac      	mov	ip, r5
   14fb0:	44e2      	add	sl, ip
   14fb2:	45aa      	cmp	sl, r5
   14fb4:	41ad      	sbcs	r5, r5
   14fb6:	426d      	negs	r5, r5
   14fb8:	4445      	add	r5, r8
   14fba:	18ed      	adds	r5, r5, r3
   14fbc:	1a2d      	subs	r5, r5, r0
   14fbe:	e696      	b.n	14cee <__aeabi_ddiv+0x2f6>
   14fc0:	1e8a      	subs	r2, r1, #2
   14fc2:	9903      	ldr	r1, [sp, #12]
   14fc4:	004d      	lsls	r5, r1, #1
   14fc6:	428d      	cmp	r5, r1
   14fc8:	4189      	sbcs	r1, r1
   14fca:	4249      	negs	r1, r1
   14fcc:	4441      	add	r1, r8
   14fce:	1876      	adds	r6, r6, r1
   14fd0:	9503      	str	r5, [sp, #12]
   14fd2:	e78f      	b.n	14ef4 <__aeabi_ddiv+0x4fc>
   14fd4:	201f      	movs	r0, #31
   14fd6:	4240      	negs	r0, r0
   14fd8:	1ac3      	subs	r3, r0, r3
   14fda:	4658      	mov	r0, fp
   14fdc:	40d8      	lsrs	r0, r3
   14fde:	0003      	movs	r3, r0
   14fe0:	2a20      	cmp	r2, #32
   14fe2:	d028      	beq.n	15036 <__aeabi_ddiv+0x63e>
   14fe4:	2040      	movs	r0, #64	; 0x40
   14fe6:	465d      	mov	r5, fp
   14fe8:	1a82      	subs	r2, r0, r2
   14fea:	4095      	lsls	r5, r2
   14fec:	4329      	orrs	r1, r5
   14fee:	1e4a      	subs	r2, r1, #1
   14ff0:	4191      	sbcs	r1, r2
   14ff2:	4319      	orrs	r1, r3
   14ff4:	2307      	movs	r3, #7
   14ff6:	2200      	movs	r2, #0
   14ff8:	400b      	ands	r3, r1
   14ffa:	d009      	beq.n	15010 <__aeabi_ddiv+0x618>
   14ffc:	230f      	movs	r3, #15
   14ffe:	2200      	movs	r2, #0
   15000:	400b      	ands	r3, r1
   15002:	0008      	movs	r0, r1
   15004:	2b04      	cmp	r3, #4
   15006:	d1bd      	bne.n	14f84 <__aeabi_ddiv+0x58c>
   15008:	0001      	movs	r1, r0
   1500a:	0753      	lsls	r3, r2, #29
   1500c:	0252      	lsls	r2, r2, #9
   1500e:	0b12      	lsrs	r2, r2, #12
   15010:	08c9      	lsrs	r1, r1, #3
   15012:	4319      	orrs	r1, r3
   15014:	2301      	movs	r3, #1
   15016:	4688      	mov	r8, r1
   15018:	9902      	ldr	r1, [sp, #8]
   1501a:	2400      	movs	r4, #0
   1501c:	4019      	ands	r1, r3
   1501e:	468c      	mov	ip, r1
   15020:	e5b8      	b.n	14b94 <__aeabi_ddiv+0x19c>
   15022:	4552      	cmp	r2, sl
   15024:	d8be      	bhi.n	14fa4 <__aeabi_ddiv+0x5ac>
   15026:	468b      	mov	fp, r1
   15028:	2500      	movs	r5, #0
   1502a:	e660      	b.n	14cee <__aeabi_ddiv+0x2f6>
   1502c:	9d03      	ldr	r5, [sp, #12]
   1502e:	429d      	cmp	r5, r3
   15030:	d3c6      	bcc.n	14fc0 <__aeabi_ddiv+0x5c8>
   15032:	0011      	movs	r1, r2
   15034:	e762      	b.n	14efc <__aeabi_ddiv+0x504>
   15036:	2500      	movs	r5, #0
   15038:	e7d8      	b.n	14fec <__aeabi_ddiv+0x5f4>
   1503a:	2280      	movs	r2, #128	; 0x80
   1503c:	465b      	mov	r3, fp
   1503e:	0312      	lsls	r2, r2, #12
   15040:	431a      	orrs	r2, r3
   15042:	9b01      	ldr	r3, [sp, #4]
   15044:	0312      	lsls	r2, r2, #12
   15046:	0b12      	lsrs	r2, r2, #12
   15048:	469c      	mov	ip, r3
   1504a:	4688      	mov	r8, r1
   1504c:	4c03      	ldr	r4, [pc, #12]	; (1505c <__aeabi_ddiv+0x664>)
   1504e:	e5a1      	b.n	14b94 <__aeabi_ddiv+0x19c>
   15050:	000003ff 	.word	0x000003ff
   15054:	feffffff 	.word	0xfeffffff
   15058:	000007fe 	.word	0x000007fe
   1505c:	000007ff 	.word	0x000007ff

00015060 <__eqdf2>:
   15060:	b5f0      	push	{r4, r5, r6, r7, lr}
   15062:	464f      	mov	r7, r9
   15064:	4646      	mov	r6, r8
   15066:	46d6      	mov	lr, sl
   15068:	005c      	lsls	r4, r3, #1
   1506a:	b5c0      	push	{r6, r7, lr}
   1506c:	031f      	lsls	r7, r3, #12
   1506e:	0fdb      	lsrs	r3, r3, #31
   15070:	469a      	mov	sl, r3
   15072:	4b17      	ldr	r3, [pc, #92]	; (150d0 <__eqdf2+0x70>)
   15074:	030e      	lsls	r6, r1, #12
   15076:	004d      	lsls	r5, r1, #1
   15078:	4684      	mov	ip, r0
   1507a:	4680      	mov	r8, r0
   1507c:	0b36      	lsrs	r6, r6, #12
   1507e:	0d6d      	lsrs	r5, r5, #21
   15080:	0fc9      	lsrs	r1, r1, #31
   15082:	4691      	mov	r9, r2
   15084:	0b3f      	lsrs	r7, r7, #12
   15086:	0d64      	lsrs	r4, r4, #21
   15088:	2001      	movs	r0, #1
   1508a:	429d      	cmp	r5, r3
   1508c:	d008      	beq.n	150a0 <__eqdf2+0x40>
   1508e:	429c      	cmp	r4, r3
   15090:	d001      	beq.n	15096 <__eqdf2+0x36>
   15092:	42a5      	cmp	r5, r4
   15094:	d00b      	beq.n	150ae <__eqdf2+0x4e>
   15096:	bc1c      	pop	{r2, r3, r4}
   15098:	4690      	mov	r8, r2
   1509a:	4699      	mov	r9, r3
   1509c:	46a2      	mov	sl, r4
   1509e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   150a0:	4663      	mov	r3, ip
   150a2:	4333      	orrs	r3, r6
   150a4:	d1f7      	bne.n	15096 <__eqdf2+0x36>
   150a6:	42ac      	cmp	r4, r5
   150a8:	d1f5      	bne.n	15096 <__eqdf2+0x36>
   150aa:	433a      	orrs	r2, r7
   150ac:	d1f3      	bne.n	15096 <__eqdf2+0x36>
   150ae:	2001      	movs	r0, #1
   150b0:	42be      	cmp	r6, r7
   150b2:	d1f0      	bne.n	15096 <__eqdf2+0x36>
   150b4:	45c8      	cmp	r8, r9
   150b6:	d1ee      	bne.n	15096 <__eqdf2+0x36>
   150b8:	4551      	cmp	r1, sl
   150ba:	d007      	beq.n	150cc <__eqdf2+0x6c>
   150bc:	2d00      	cmp	r5, #0
   150be:	d1ea      	bne.n	15096 <__eqdf2+0x36>
   150c0:	4663      	mov	r3, ip
   150c2:	431e      	orrs	r6, r3
   150c4:	0030      	movs	r0, r6
   150c6:	1e46      	subs	r6, r0, #1
   150c8:	41b0      	sbcs	r0, r6
   150ca:	e7e4      	b.n	15096 <__eqdf2+0x36>
   150cc:	2000      	movs	r0, #0
   150ce:	e7e2      	b.n	15096 <__eqdf2+0x36>
   150d0:	000007ff 	.word	0x000007ff

000150d4 <__gedf2>:
   150d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   150d6:	4645      	mov	r5, r8
   150d8:	46de      	mov	lr, fp
   150da:	4657      	mov	r7, sl
   150dc:	464e      	mov	r6, r9
   150de:	b5e0      	push	{r5, r6, r7, lr}
   150e0:	031f      	lsls	r7, r3, #12
   150e2:	0b3d      	lsrs	r5, r7, #12
   150e4:	4f2c      	ldr	r7, [pc, #176]	; (15198 <__gedf2+0xc4>)
   150e6:	030e      	lsls	r6, r1, #12
   150e8:	004c      	lsls	r4, r1, #1
   150ea:	46ab      	mov	fp, r5
   150ec:	005d      	lsls	r5, r3, #1
   150ee:	4684      	mov	ip, r0
   150f0:	0b36      	lsrs	r6, r6, #12
   150f2:	0d64      	lsrs	r4, r4, #21
   150f4:	0fc9      	lsrs	r1, r1, #31
   150f6:	4690      	mov	r8, r2
   150f8:	0d6d      	lsrs	r5, r5, #21
   150fa:	0fdb      	lsrs	r3, r3, #31
   150fc:	42bc      	cmp	r4, r7
   150fe:	d02a      	beq.n	15156 <__gedf2+0x82>
   15100:	4f25      	ldr	r7, [pc, #148]	; (15198 <__gedf2+0xc4>)
   15102:	42bd      	cmp	r5, r7
   15104:	d02d      	beq.n	15162 <__gedf2+0x8e>
   15106:	2c00      	cmp	r4, #0
   15108:	d10f      	bne.n	1512a <__gedf2+0x56>
   1510a:	4330      	orrs	r0, r6
   1510c:	0007      	movs	r7, r0
   1510e:	4681      	mov	r9, r0
   15110:	4278      	negs	r0, r7
   15112:	4178      	adcs	r0, r7
   15114:	b2c0      	uxtb	r0, r0
   15116:	2d00      	cmp	r5, #0
   15118:	d117      	bne.n	1514a <__gedf2+0x76>
   1511a:	465f      	mov	r7, fp
   1511c:	433a      	orrs	r2, r7
   1511e:	d114      	bne.n	1514a <__gedf2+0x76>
   15120:	464b      	mov	r3, r9
   15122:	2000      	movs	r0, #0
   15124:	2b00      	cmp	r3, #0
   15126:	d00a      	beq.n	1513e <__gedf2+0x6a>
   15128:	e006      	b.n	15138 <__gedf2+0x64>
   1512a:	2d00      	cmp	r5, #0
   1512c:	d102      	bne.n	15134 <__gedf2+0x60>
   1512e:	4658      	mov	r0, fp
   15130:	4302      	orrs	r2, r0
   15132:	d001      	beq.n	15138 <__gedf2+0x64>
   15134:	4299      	cmp	r1, r3
   15136:	d018      	beq.n	1516a <__gedf2+0x96>
   15138:	4248      	negs	r0, r1
   1513a:	2101      	movs	r1, #1
   1513c:	4308      	orrs	r0, r1
   1513e:	bc3c      	pop	{r2, r3, r4, r5}
   15140:	4690      	mov	r8, r2
   15142:	4699      	mov	r9, r3
   15144:	46a2      	mov	sl, r4
   15146:	46ab      	mov	fp, r5
   15148:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1514a:	2800      	cmp	r0, #0
   1514c:	d0f2      	beq.n	15134 <__gedf2+0x60>
   1514e:	2001      	movs	r0, #1
   15150:	3b01      	subs	r3, #1
   15152:	4318      	orrs	r0, r3
   15154:	e7f3      	b.n	1513e <__gedf2+0x6a>
   15156:	0037      	movs	r7, r6
   15158:	4307      	orrs	r7, r0
   1515a:	d0d1      	beq.n	15100 <__gedf2+0x2c>
   1515c:	2002      	movs	r0, #2
   1515e:	4240      	negs	r0, r0
   15160:	e7ed      	b.n	1513e <__gedf2+0x6a>
   15162:	465f      	mov	r7, fp
   15164:	4317      	orrs	r7, r2
   15166:	d0ce      	beq.n	15106 <__gedf2+0x32>
   15168:	e7f8      	b.n	1515c <__gedf2+0x88>
   1516a:	42ac      	cmp	r4, r5
   1516c:	dce4      	bgt.n	15138 <__gedf2+0x64>
   1516e:	da03      	bge.n	15178 <__gedf2+0xa4>
   15170:	1e48      	subs	r0, r1, #1
   15172:	2101      	movs	r1, #1
   15174:	4308      	orrs	r0, r1
   15176:	e7e2      	b.n	1513e <__gedf2+0x6a>
   15178:	455e      	cmp	r6, fp
   1517a:	d8dd      	bhi.n	15138 <__gedf2+0x64>
   1517c:	d006      	beq.n	1518c <__gedf2+0xb8>
   1517e:	2000      	movs	r0, #0
   15180:	455e      	cmp	r6, fp
   15182:	d2dc      	bcs.n	1513e <__gedf2+0x6a>
   15184:	2301      	movs	r3, #1
   15186:	1e48      	subs	r0, r1, #1
   15188:	4318      	orrs	r0, r3
   1518a:	e7d8      	b.n	1513e <__gedf2+0x6a>
   1518c:	45c4      	cmp	ip, r8
   1518e:	d8d3      	bhi.n	15138 <__gedf2+0x64>
   15190:	2000      	movs	r0, #0
   15192:	45c4      	cmp	ip, r8
   15194:	d3f6      	bcc.n	15184 <__gedf2+0xb0>
   15196:	e7d2      	b.n	1513e <__gedf2+0x6a>
   15198:	000007ff 	.word	0x000007ff

0001519c <__ledf2>:
   1519c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1519e:	464e      	mov	r6, r9
   151a0:	4645      	mov	r5, r8
   151a2:	46de      	mov	lr, fp
   151a4:	4657      	mov	r7, sl
   151a6:	005c      	lsls	r4, r3, #1
   151a8:	b5e0      	push	{r5, r6, r7, lr}
   151aa:	031f      	lsls	r7, r3, #12
   151ac:	0fdb      	lsrs	r3, r3, #31
   151ae:	4699      	mov	r9, r3
   151b0:	4b2a      	ldr	r3, [pc, #168]	; (1525c <__ledf2+0xc0>)
   151b2:	030e      	lsls	r6, r1, #12
   151b4:	004d      	lsls	r5, r1, #1
   151b6:	0fc9      	lsrs	r1, r1, #31
   151b8:	4684      	mov	ip, r0
   151ba:	0b36      	lsrs	r6, r6, #12
   151bc:	0d6d      	lsrs	r5, r5, #21
   151be:	468b      	mov	fp, r1
   151c0:	4690      	mov	r8, r2
   151c2:	0b3f      	lsrs	r7, r7, #12
   151c4:	0d64      	lsrs	r4, r4, #21
   151c6:	429d      	cmp	r5, r3
   151c8:	d020      	beq.n	1520c <__ledf2+0x70>
   151ca:	4b24      	ldr	r3, [pc, #144]	; (1525c <__ledf2+0xc0>)
   151cc:	429c      	cmp	r4, r3
   151ce:	d022      	beq.n	15216 <__ledf2+0x7a>
   151d0:	2d00      	cmp	r5, #0
   151d2:	d112      	bne.n	151fa <__ledf2+0x5e>
   151d4:	4330      	orrs	r0, r6
   151d6:	4243      	negs	r3, r0
   151d8:	4143      	adcs	r3, r0
   151da:	b2db      	uxtb	r3, r3
   151dc:	2c00      	cmp	r4, #0
   151de:	d01f      	beq.n	15220 <__ledf2+0x84>
   151e0:	2b00      	cmp	r3, #0
   151e2:	d00c      	beq.n	151fe <__ledf2+0x62>
   151e4:	464b      	mov	r3, r9
   151e6:	2001      	movs	r0, #1
   151e8:	3b01      	subs	r3, #1
   151ea:	4303      	orrs	r3, r0
   151ec:	0018      	movs	r0, r3
   151ee:	bc3c      	pop	{r2, r3, r4, r5}
   151f0:	4690      	mov	r8, r2
   151f2:	4699      	mov	r9, r3
   151f4:	46a2      	mov	sl, r4
   151f6:	46ab      	mov	fp, r5
   151f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   151fa:	2c00      	cmp	r4, #0
   151fc:	d016      	beq.n	1522c <__ledf2+0x90>
   151fe:	45cb      	cmp	fp, r9
   15200:	d017      	beq.n	15232 <__ledf2+0x96>
   15202:	465b      	mov	r3, fp
   15204:	4259      	negs	r1, r3
   15206:	2301      	movs	r3, #1
   15208:	430b      	orrs	r3, r1
   1520a:	e7ef      	b.n	151ec <__ledf2+0x50>
   1520c:	0031      	movs	r1, r6
   1520e:	2302      	movs	r3, #2
   15210:	4301      	orrs	r1, r0
   15212:	d1eb      	bne.n	151ec <__ledf2+0x50>
   15214:	e7d9      	b.n	151ca <__ledf2+0x2e>
   15216:	0039      	movs	r1, r7
   15218:	2302      	movs	r3, #2
   1521a:	4311      	orrs	r1, r2
   1521c:	d1e6      	bne.n	151ec <__ledf2+0x50>
   1521e:	e7d7      	b.n	151d0 <__ledf2+0x34>
   15220:	433a      	orrs	r2, r7
   15222:	d1dd      	bne.n	151e0 <__ledf2+0x44>
   15224:	2300      	movs	r3, #0
   15226:	2800      	cmp	r0, #0
   15228:	d0e0      	beq.n	151ec <__ledf2+0x50>
   1522a:	e7ea      	b.n	15202 <__ledf2+0x66>
   1522c:	433a      	orrs	r2, r7
   1522e:	d1e6      	bne.n	151fe <__ledf2+0x62>
   15230:	e7e7      	b.n	15202 <__ledf2+0x66>
   15232:	42a5      	cmp	r5, r4
   15234:	dce5      	bgt.n	15202 <__ledf2+0x66>
   15236:	db05      	blt.n	15244 <__ledf2+0xa8>
   15238:	42be      	cmp	r6, r7
   1523a:	d8e2      	bhi.n	15202 <__ledf2+0x66>
   1523c:	d007      	beq.n	1524e <__ledf2+0xb2>
   1523e:	2300      	movs	r3, #0
   15240:	42be      	cmp	r6, r7
   15242:	d2d3      	bcs.n	151ec <__ledf2+0x50>
   15244:	4659      	mov	r1, fp
   15246:	2301      	movs	r3, #1
   15248:	3901      	subs	r1, #1
   1524a:	430b      	orrs	r3, r1
   1524c:	e7ce      	b.n	151ec <__ledf2+0x50>
   1524e:	45c4      	cmp	ip, r8
   15250:	d8d7      	bhi.n	15202 <__ledf2+0x66>
   15252:	2300      	movs	r3, #0
   15254:	45c4      	cmp	ip, r8
   15256:	d3f5      	bcc.n	15244 <__ledf2+0xa8>
   15258:	e7c8      	b.n	151ec <__ledf2+0x50>
   1525a:	46c0      	nop			; (mov r8, r8)
   1525c:	000007ff 	.word	0x000007ff

00015260 <__aeabi_dmul>:
   15260:	b5f0      	push	{r4, r5, r6, r7, lr}
   15262:	4657      	mov	r7, sl
   15264:	4645      	mov	r5, r8
   15266:	46de      	mov	lr, fp
   15268:	464e      	mov	r6, r9
   1526a:	b5e0      	push	{r5, r6, r7, lr}
   1526c:	030c      	lsls	r4, r1, #12
   1526e:	4698      	mov	r8, r3
   15270:	004e      	lsls	r6, r1, #1
   15272:	0b23      	lsrs	r3, r4, #12
   15274:	b087      	sub	sp, #28
   15276:	0007      	movs	r7, r0
   15278:	4692      	mov	sl, r2
   1527a:	469b      	mov	fp, r3
   1527c:	0d76      	lsrs	r6, r6, #21
   1527e:	0fcd      	lsrs	r5, r1, #31
   15280:	2e00      	cmp	r6, #0
   15282:	d06b      	beq.n	1535c <__aeabi_dmul+0xfc>
   15284:	4b6d      	ldr	r3, [pc, #436]	; (1543c <__aeabi_dmul+0x1dc>)
   15286:	429e      	cmp	r6, r3
   15288:	d035      	beq.n	152f6 <__aeabi_dmul+0x96>
   1528a:	2480      	movs	r4, #128	; 0x80
   1528c:	465b      	mov	r3, fp
   1528e:	0f42      	lsrs	r2, r0, #29
   15290:	0424      	lsls	r4, r4, #16
   15292:	00db      	lsls	r3, r3, #3
   15294:	4314      	orrs	r4, r2
   15296:	431c      	orrs	r4, r3
   15298:	00c3      	lsls	r3, r0, #3
   1529a:	4699      	mov	r9, r3
   1529c:	4b68      	ldr	r3, [pc, #416]	; (15440 <__aeabi_dmul+0x1e0>)
   1529e:	46a3      	mov	fp, r4
   152a0:	469c      	mov	ip, r3
   152a2:	2300      	movs	r3, #0
   152a4:	2700      	movs	r7, #0
   152a6:	4466      	add	r6, ip
   152a8:	9302      	str	r3, [sp, #8]
   152aa:	4643      	mov	r3, r8
   152ac:	031c      	lsls	r4, r3, #12
   152ae:	005a      	lsls	r2, r3, #1
   152b0:	0fdb      	lsrs	r3, r3, #31
   152b2:	4650      	mov	r0, sl
   152b4:	0b24      	lsrs	r4, r4, #12
   152b6:	0d52      	lsrs	r2, r2, #21
   152b8:	4698      	mov	r8, r3
   152ba:	d100      	bne.n	152be <__aeabi_dmul+0x5e>
   152bc:	e076      	b.n	153ac <__aeabi_dmul+0x14c>
   152be:	4b5f      	ldr	r3, [pc, #380]	; (1543c <__aeabi_dmul+0x1dc>)
   152c0:	429a      	cmp	r2, r3
   152c2:	d06d      	beq.n	153a0 <__aeabi_dmul+0x140>
   152c4:	2380      	movs	r3, #128	; 0x80
   152c6:	0f41      	lsrs	r1, r0, #29
   152c8:	041b      	lsls	r3, r3, #16
   152ca:	430b      	orrs	r3, r1
   152cc:	495c      	ldr	r1, [pc, #368]	; (15440 <__aeabi_dmul+0x1e0>)
   152ce:	00e4      	lsls	r4, r4, #3
   152d0:	468c      	mov	ip, r1
   152d2:	431c      	orrs	r4, r3
   152d4:	00c3      	lsls	r3, r0, #3
   152d6:	2000      	movs	r0, #0
   152d8:	4462      	add	r2, ip
   152da:	4641      	mov	r1, r8
   152dc:	18b6      	adds	r6, r6, r2
   152de:	4069      	eors	r1, r5
   152e0:	1c72      	adds	r2, r6, #1
   152e2:	9101      	str	r1, [sp, #4]
   152e4:	4694      	mov	ip, r2
   152e6:	4307      	orrs	r7, r0
   152e8:	2f0f      	cmp	r7, #15
   152ea:	d900      	bls.n	152ee <__aeabi_dmul+0x8e>
   152ec:	e0b0      	b.n	15450 <__aeabi_dmul+0x1f0>
   152ee:	4a55      	ldr	r2, [pc, #340]	; (15444 <__aeabi_dmul+0x1e4>)
   152f0:	00bf      	lsls	r7, r7, #2
   152f2:	59d2      	ldr	r2, [r2, r7]
   152f4:	4697      	mov	pc, r2
   152f6:	465b      	mov	r3, fp
   152f8:	4303      	orrs	r3, r0
   152fa:	4699      	mov	r9, r3
   152fc:	d000      	beq.n	15300 <__aeabi_dmul+0xa0>
   152fe:	e087      	b.n	15410 <__aeabi_dmul+0x1b0>
   15300:	2300      	movs	r3, #0
   15302:	469b      	mov	fp, r3
   15304:	3302      	adds	r3, #2
   15306:	2708      	movs	r7, #8
   15308:	9302      	str	r3, [sp, #8]
   1530a:	e7ce      	b.n	152aa <__aeabi_dmul+0x4a>
   1530c:	4642      	mov	r2, r8
   1530e:	9201      	str	r2, [sp, #4]
   15310:	2802      	cmp	r0, #2
   15312:	d067      	beq.n	153e4 <__aeabi_dmul+0x184>
   15314:	2803      	cmp	r0, #3
   15316:	d100      	bne.n	1531a <__aeabi_dmul+0xba>
   15318:	e20e      	b.n	15738 <__aeabi_dmul+0x4d8>
   1531a:	2801      	cmp	r0, #1
   1531c:	d000      	beq.n	15320 <__aeabi_dmul+0xc0>
   1531e:	e162      	b.n	155e6 <__aeabi_dmul+0x386>
   15320:	2300      	movs	r3, #0
   15322:	2400      	movs	r4, #0
   15324:	2200      	movs	r2, #0
   15326:	4699      	mov	r9, r3
   15328:	9901      	ldr	r1, [sp, #4]
   1532a:	4001      	ands	r1, r0
   1532c:	b2cd      	uxtb	r5, r1
   1532e:	2100      	movs	r1, #0
   15330:	0312      	lsls	r2, r2, #12
   15332:	0d0b      	lsrs	r3, r1, #20
   15334:	0b12      	lsrs	r2, r2, #12
   15336:	051b      	lsls	r3, r3, #20
   15338:	4313      	orrs	r3, r2
   1533a:	4a43      	ldr	r2, [pc, #268]	; (15448 <__aeabi_dmul+0x1e8>)
   1533c:	0524      	lsls	r4, r4, #20
   1533e:	4013      	ands	r3, r2
   15340:	431c      	orrs	r4, r3
   15342:	0064      	lsls	r4, r4, #1
   15344:	07ed      	lsls	r5, r5, #31
   15346:	0864      	lsrs	r4, r4, #1
   15348:	432c      	orrs	r4, r5
   1534a:	4648      	mov	r0, r9
   1534c:	0021      	movs	r1, r4
   1534e:	b007      	add	sp, #28
   15350:	bc3c      	pop	{r2, r3, r4, r5}
   15352:	4690      	mov	r8, r2
   15354:	4699      	mov	r9, r3
   15356:	46a2      	mov	sl, r4
   15358:	46ab      	mov	fp, r5
   1535a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1535c:	4303      	orrs	r3, r0
   1535e:	4699      	mov	r9, r3
   15360:	d04f      	beq.n	15402 <__aeabi_dmul+0x1a2>
   15362:	465b      	mov	r3, fp
   15364:	2b00      	cmp	r3, #0
   15366:	d100      	bne.n	1536a <__aeabi_dmul+0x10a>
   15368:	e189      	b.n	1567e <__aeabi_dmul+0x41e>
   1536a:	4658      	mov	r0, fp
   1536c:	f000 fe98 	bl	160a0 <__clzsi2>
   15370:	0003      	movs	r3, r0
   15372:	3b0b      	subs	r3, #11
   15374:	2b1c      	cmp	r3, #28
   15376:	dd00      	ble.n	1537a <__aeabi_dmul+0x11a>
   15378:	e17a      	b.n	15670 <__aeabi_dmul+0x410>
   1537a:	221d      	movs	r2, #29
   1537c:	1ad3      	subs	r3, r2, r3
   1537e:	003a      	movs	r2, r7
   15380:	0001      	movs	r1, r0
   15382:	465c      	mov	r4, fp
   15384:	40da      	lsrs	r2, r3
   15386:	3908      	subs	r1, #8
   15388:	408c      	lsls	r4, r1
   1538a:	0013      	movs	r3, r2
   1538c:	408f      	lsls	r7, r1
   1538e:	4323      	orrs	r3, r4
   15390:	469b      	mov	fp, r3
   15392:	46b9      	mov	r9, r7
   15394:	2300      	movs	r3, #0
   15396:	4e2d      	ldr	r6, [pc, #180]	; (1544c <__aeabi_dmul+0x1ec>)
   15398:	2700      	movs	r7, #0
   1539a:	1a36      	subs	r6, r6, r0
   1539c:	9302      	str	r3, [sp, #8]
   1539e:	e784      	b.n	152aa <__aeabi_dmul+0x4a>
   153a0:	4653      	mov	r3, sl
   153a2:	4323      	orrs	r3, r4
   153a4:	d12a      	bne.n	153fc <__aeabi_dmul+0x19c>
   153a6:	2400      	movs	r4, #0
   153a8:	2002      	movs	r0, #2
   153aa:	e796      	b.n	152da <__aeabi_dmul+0x7a>
   153ac:	4653      	mov	r3, sl
   153ae:	4323      	orrs	r3, r4
   153b0:	d020      	beq.n	153f4 <__aeabi_dmul+0x194>
   153b2:	2c00      	cmp	r4, #0
   153b4:	d100      	bne.n	153b8 <__aeabi_dmul+0x158>
   153b6:	e157      	b.n	15668 <__aeabi_dmul+0x408>
   153b8:	0020      	movs	r0, r4
   153ba:	f000 fe71 	bl	160a0 <__clzsi2>
   153be:	0003      	movs	r3, r0
   153c0:	3b0b      	subs	r3, #11
   153c2:	2b1c      	cmp	r3, #28
   153c4:	dd00      	ble.n	153c8 <__aeabi_dmul+0x168>
   153c6:	e149      	b.n	1565c <__aeabi_dmul+0x3fc>
   153c8:	211d      	movs	r1, #29
   153ca:	1acb      	subs	r3, r1, r3
   153cc:	4651      	mov	r1, sl
   153ce:	0002      	movs	r2, r0
   153d0:	40d9      	lsrs	r1, r3
   153d2:	4653      	mov	r3, sl
   153d4:	3a08      	subs	r2, #8
   153d6:	4094      	lsls	r4, r2
   153d8:	4093      	lsls	r3, r2
   153da:	430c      	orrs	r4, r1
   153dc:	4a1b      	ldr	r2, [pc, #108]	; (1544c <__aeabi_dmul+0x1ec>)
   153de:	1a12      	subs	r2, r2, r0
   153e0:	2000      	movs	r0, #0
   153e2:	e77a      	b.n	152da <__aeabi_dmul+0x7a>
   153e4:	2501      	movs	r5, #1
   153e6:	9b01      	ldr	r3, [sp, #4]
   153e8:	4c14      	ldr	r4, [pc, #80]	; (1543c <__aeabi_dmul+0x1dc>)
   153ea:	401d      	ands	r5, r3
   153ec:	2300      	movs	r3, #0
   153ee:	2200      	movs	r2, #0
   153f0:	4699      	mov	r9, r3
   153f2:	e79c      	b.n	1532e <__aeabi_dmul+0xce>
   153f4:	2400      	movs	r4, #0
   153f6:	2200      	movs	r2, #0
   153f8:	2001      	movs	r0, #1
   153fa:	e76e      	b.n	152da <__aeabi_dmul+0x7a>
   153fc:	4653      	mov	r3, sl
   153fe:	2003      	movs	r0, #3
   15400:	e76b      	b.n	152da <__aeabi_dmul+0x7a>
   15402:	2300      	movs	r3, #0
   15404:	469b      	mov	fp, r3
   15406:	3301      	adds	r3, #1
   15408:	2704      	movs	r7, #4
   1540a:	2600      	movs	r6, #0
   1540c:	9302      	str	r3, [sp, #8]
   1540e:	e74c      	b.n	152aa <__aeabi_dmul+0x4a>
   15410:	2303      	movs	r3, #3
   15412:	4681      	mov	r9, r0
   15414:	270c      	movs	r7, #12
   15416:	9302      	str	r3, [sp, #8]
   15418:	e747      	b.n	152aa <__aeabi_dmul+0x4a>
   1541a:	2280      	movs	r2, #128	; 0x80
   1541c:	2300      	movs	r3, #0
   1541e:	2500      	movs	r5, #0
   15420:	0312      	lsls	r2, r2, #12
   15422:	4699      	mov	r9, r3
   15424:	4c05      	ldr	r4, [pc, #20]	; (1543c <__aeabi_dmul+0x1dc>)
   15426:	e782      	b.n	1532e <__aeabi_dmul+0xce>
   15428:	465c      	mov	r4, fp
   1542a:	464b      	mov	r3, r9
   1542c:	9802      	ldr	r0, [sp, #8]
   1542e:	e76f      	b.n	15310 <__aeabi_dmul+0xb0>
   15430:	465c      	mov	r4, fp
   15432:	464b      	mov	r3, r9
   15434:	9501      	str	r5, [sp, #4]
   15436:	9802      	ldr	r0, [sp, #8]
   15438:	e76a      	b.n	15310 <__aeabi_dmul+0xb0>
   1543a:	46c0      	nop			; (mov r8, r8)
   1543c:	000007ff 	.word	0x000007ff
   15440:	fffffc01 	.word	0xfffffc01
   15444:	00018420 	.word	0x00018420
   15448:	800fffff 	.word	0x800fffff
   1544c:	fffffc0d 	.word	0xfffffc0d
   15450:	464a      	mov	r2, r9
   15452:	4649      	mov	r1, r9
   15454:	0c17      	lsrs	r7, r2, #16
   15456:	0c1a      	lsrs	r2, r3, #16
   15458:	041b      	lsls	r3, r3, #16
   1545a:	0c1b      	lsrs	r3, r3, #16
   1545c:	0408      	lsls	r0, r1, #16
   1545e:	0019      	movs	r1, r3
   15460:	0c00      	lsrs	r0, r0, #16
   15462:	4341      	muls	r1, r0
   15464:	0015      	movs	r5, r2
   15466:	4688      	mov	r8, r1
   15468:	0019      	movs	r1, r3
   1546a:	437d      	muls	r5, r7
   1546c:	4379      	muls	r1, r7
   1546e:	9503      	str	r5, [sp, #12]
   15470:	4689      	mov	r9, r1
   15472:	0029      	movs	r1, r5
   15474:	0015      	movs	r5, r2
   15476:	4345      	muls	r5, r0
   15478:	444d      	add	r5, r9
   1547a:	9502      	str	r5, [sp, #8]
   1547c:	4645      	mov	r5, r8
   1547e:	0c2d      	lsrs	r5, r5, #16
   15480:	46aa      	mov	sl, r5
   15482:	9d02      	ldr	r5, [sp, #8]
   15484:	4455      	add	r5, sl
   15486:	45a9      	cmp	r9, r5
   15488:	d906      	bls.n	15498 <__aeabi_dmul+0x238>
   1548a:	468a      	mov	sl, r1
   1548c:	2180      	movs	r1, #128	; 0x80
   1548e:	0249      	lsls	r1, r1, #9
   15490:	4689      	mov	r9, r1
   15492:	44ca      	add	sl, r9
   15494:	4651      	mov	r1, sl
   15496:	9103      	str	r1, [sp, #12]
   15498:	0c29      	lsrs	r1, r5, #16
   1549a:	9104      	str	r1, [sp, #16]
   1549c:	4641      	mov	r1, r8
   1549e:	0409      	lsls	r1, r1, #16
   154a0:	042d      	lsls	r5, r5, #16
   154a2:	0c09      	lsrs	r1, r1, #16
   154a4:	4688      	mov	r8, r1
   154a6:	0029      	movs	r1, r5
   154a8:	0c25      	lsrs	r5, r4, #16
   154aa:	0424      	lsls	r4, r4, #16
   154ac:	4441      	add	r1, r8
   154ae:	0c24      	lsrs	r4, r4, #16
   154b0:	9105      	str	r1, [sp, #20]
   154b2:	0021      	movs	r1, r4
   154b4:	4341      	muls	r1, r0
   154b6:	4688      	mov	r8, r1
   154b8:	0021      	movs	r1, r4
   154ba:	4379      	muls	r1, r7
   154bc:	468a      	mov	sl, r1
   154be:	4368      	muls	r0, r5
   154c0:	4641      	mov	r1, r8
   154c2:	4450      	add	r0, sl
   154c4:	4681      	mov	r9, r0
   154c6:	0c08      	lsrs	r0, r1, #16
   154c8:	4448      	add	r0, r9
   154ca:	436f      	muls	r7, r5
   154cc:	4582      	cmp	sl, r0
   154ce:	d903      	bls.n	154d8 <__aeabi_dmul+0x278>
   154d0:	2180      	movs	r1, #128	; 0x80
   154d2:	0249      	lsls	r1, r1, #9
   154d4:	4689      	mov	r9, r1
   154d6:	444f      	add	r7, r9
   154d8:	0c01      	lsrs	r1, r0, #16
   154da:	4689      	mov	r9, r1
   154dc:	0039      	movs	r1, r7
   154de:	4449      	add	r1, r9
   154e0:	9102      	str	r1, [sp, #8]
   154e2:	4641      	mov	r1, r8
   154e4:	040f      	lsls	r7, r1, #16
   154e6:	9904      	ldr	r1, [sp, #16]
   154e8:	0c3f      	lsrs	r7, r7, #16
   154ea:	4688      	mov	r8, r1
   154ec:	0400      	lsls	r0, r0, #16
   154ee:	19c0      	adds	r0, r0, r7
   154f0:	4480      	add	r8, r0
   154f2:	4641      	mov	r1, r8
   154f4:	9104      	str	r1, [sp, #16]
   154f6:	4659      	mov	r1, fp
   154f8:	0c0f      	lsrs	r7, r1, #16
   154fa:	0409      	lsls	r1, r1, #16
   154fc:	0c09      	lsrs	r1, r1, #16
   154fe:	4688      	mov	r8, r1
   15500:	4359      	muls	r1, r3
   15502:	468a      	mov	sl, r1
   15504:	0039      	movs	r1, r7
   15506:	4351      	muls	r1, r2
   15508:	4689      	mov	r9, r1
   1550a:	4641      	mov	r1, r8
   1550c:	434a      	muls	r2, r1
   1550e:	4651      	mov	r1, sl
   15510:	0c09      	lsrs	r1, r1, #16
   15512:	468b      	mov	fp, r1
   15514:	437b      	muls	r3, r7
   15516:	18d2      	adds	r2, r2, r3
   15518:	445a      	add	r2, fp
   1551a:	4293      	cmp	r3, r2
   1551c:	d903      	bls.n	15526 <__aeabi_dmul+0x2c6>
   1551e:	2380      	movs	r3, #128	; 0x80
   15520:	025b      	lsls	r3, r3, #9
   15522:	469b      	mov	fp, r3
   15524:	44d9      	add	r9, fp
   15526:	4651      	mov	r1, sl
   15528:	0409      	lsls	r1, r1, #16
   1552a:	0c09      	lsrs	r1, r1, #16
   1552c:	468a      	mov	sl, r1
   1552e:	4641      	mov	r1, r8
   15530:	4361      	muls	r1, r4
   15532:	437c      	muls	r4, r7
   15534:	0c13      	lsrs	r3, r2, #16
   15536:	0412      	lsls	r2, r2, #16
   15538:	444b      	add	r3, r9
   1553a:	4452      	add	r2, sl
   1553c:	46a1      	mov	r9, r4
   1553e:	468a      	mov	sl, r1
   15540:	003c      	movs	r4, r7
   15542:	4641      	mov	r1, r8
   15544:	436c      	muls	r4, r5
   15546:	434d      	muls	r5, r1
   15548:	4651      	mov	r1, sl
   1554a:	444d      	add	r5, r9
   1554c:	0c0f      	lsrs	r7, r1, #16
   1554e:	197d      	adds	r5, r7, r5
   15550:	45a9      	cmp	r9, r5
   15552:	d903      	bls.n	1555c <__aeabi_dmul+0x2fc>
   15554:	2180      	movs	r1, #128	; 0x80
   15556:	0249      	lsls	r1, r1, #9
   15558:	4688      	mov	r8, r1
   1555a:	4444      	add	r4, r8
   1555c:	9f04      	ldr	r7, [sp, #16]
   1555e:	9903      	ldr	r1, [sp, #12]
   15560:	46b8      	mov	r8, r7
   15562:	4441      	add	r1, r8
   15564:	468b      	mov	fp, r1
   15566:	4583      	cmp	fp, r0
   15568:	4180      	sbcs	r0, r0
   1556a:	4241      	negs	r1, r0
   1556c:	4688      	mov	r8, r1
   1556e:	4651      	mov	r1, sl
   15570:	0408      	lsls	r0, r1, #16
   15572:	042f      	lsls	r7, r5, #16
   15574:	0c00      	lsrs	r0, r0, #16
   15576:	183f      	adds	r7, r7, r0
   15578:	4658      	mov	r0, fp
   1557a:	9902      	ldr	r1, [sp, #8]
   1557c:	1810      	adds	r0, r2, r0
   1557e:	4689      	mov	r9, r1
   15580:	4290      	cmp	r0, r2
   15582:	4192      	sbcs	r2, r2
   15584:	444f      	add	r7, r9
   15586:	46ba      	mov	sl, r7
   15588:	4252      	negs	r2, r2
   1558a:	4699      	mov	r9, r3
   1558c:	4693      	mov	fp, r2
   1558e:	44c2      	add	sl, r8
   15590:	44d1      	add	r9, sl
   15592:	44cb      	add	fp, r9
   15594:	428f      	cmp	r7, r1
   15596:	41bf      	sbcs	r7, r7
   15598:	45c2      	cmp	sl, r8
   1559a:	4189      	sbcs	r1, r1
   1559c:	4599      	cmp	r9, r3
   1559e:	419b      	sbcs	r3, r3
   155a0:	4593      	cmp	fp, r2
   155a2:	4192      	sbcs	r2, r2
   155a4:	427f      	negs	r7, r7
   155a6:	4249      	negs	r1, r1
   155a8:	0c2d      	lsrs	r5, r5, #16
   155aa:	4252      	negs	r2, r2
   155ac:	430f      	orrs	r7, r1
   155ae:	425b      	negs	r3, r3
   155b0:	4313      	orrs	r3, r2
   155b2:	197f      	adds	r7, r7, r5
   155b4:	18ff      	adds	r7, r7, r3
   155b6:	465b      	mov	r3, fp
   155b8:	193c      	adds	r4, r7, r4
   155ba:	0ddb      	lsrs	r3, r3, #23
   155bc:	9a05      	ldr	r2, [sp, #20]
   155be:	0264      	lsls	r4, r4, #9
   155c0:	431c      	orrs	r4, r3
   155c2:	0243      	lsls	r3, r0, #9
   155c4:	4313      	orrs	r3, r2
   155c6:	1e5d      	subs	r5, r3, #1
   155c8:	41ab      	sbcs	r3, r5
   155ca:	465a      	mov	r2, fp
   155cc:	0dc0      	lsrs	r0, r0, #23
   155ce:	4303      	orrs	r3, r0
   155d0:	0252      	lsls	r2, r2, #9
   155d2:	4313      	orrs	r3, r2
   155d4:	01e2      	lsls	r2, r4, #7
   155d6:	d556      	bpl.n	15686 <__aeabi_dmul+0x426>
   155d8:	2001      	movs	r0, #1
   155da:	085a      	lsrs	r2, r3, #1
   155dc:	4003      	ands	r3, r0
   155de:	4313      	orrs	r3, r2
   155e0:	07e2      	lsls	r2, r4, #31
   155e2:	4313      	orrs	r3, r2
   155e4:	0864      	lsrs	r4, r4, #1
   155e6:	485a      	ldr	r0, [pc, #360]	; (15750 <__aeabi_dmul+0x4f0>)
   155e8:	4460      	add	r0, ip
   155ea:	2800      	cmp	r0, #0
   155ec:	dd4d      	ble.n	1568a <__aeabi_dmul+0x42a>
   155ee:	075a      	lsls	r2, r3, #29
   155f0:	d009      	beq.n	15606 <__aeabi_dmul+0x3a6>
   155f2:	220f      	movs	r2, #15
   155f4:	401a      	ands	r2, r3
   155f6:	2a04      	cmp	r2, #4
   155f8:	d005      	beq.n	15606 <__aeabi_dmul+0x3a6>
   155fa:	1d1a      	adds	r2, r3, #4
   155fc:	429a      	cmp	r2, r3
   155fe:	419b      	sbcs	r3, r3
   15600:	425b      	negs	r3, r3
   15602:	18e4      	adds	r4, r4, r3
   15604:	0013      	movs	r3, r2
   15606:	01e2      	lsls	r2, r4, #7
   15608:	d504      	bpl.n	15614 <__aeabi_dmul+0x3b4>
   1560a:	2080      	movs	r0, #128	; 0x80
   1560c:	4a51      	ldr	r2, [pc, #324]	; (15754 <__aeabi_dmul+0x4f4>)
   1560e:	00c0      	lsls	r0, r0, #3
   15610:	4014      	ands	r4, r2
   15612:	4460      	add	r0, ip
   15614:	4a50      	ldr	r2, [pc, #320]	; (15758 <__aeabi_dmul+0x4f8>)
   15616:	4290      	cmp	r0, r2
   15618:	dd00      	ble.n	1561c <__aeabi_dmul+0x3bc>
   1561a:	e6e3      	b.n	153e4 <__aeabi_dmul+0x184>
   1561c:	2501      	movs	r5, #1
   1561e:	08db      	lsrs	r3, r3, #3
   15620:	0762      	lsls	r2, r4, #29
   15622:	431a      	orrs	r2, r3
   15624:	0264      	lsls	r4, r4, #9
   15626:	9b01      	ldr	r3, [sp, #4]
   15628:	4691      	mov	r9, r2
   1562a:	0b22      	lsrs	r2, r4, #12
   1562c:	0544      	lsls	r4, r0, #21
   1562e:	0d64      	lsrs	r4, r4, #21
   15630:	401d      	ands	r5, r3
   15632:	e67c      	b.n	1532e <__aeabi_dmul+0xce>
   15634:	2280      	movs	r2, #128	; 0x80
   15636:	4659      	mov	r1, fp
   15638:	0312      	lsls	r2, r2, #12
   1563a:	4211      	tst	r1, r2
   1563c:	d008      	beq.n	15650 <__aeabi_dmul+0x3f0>
   1563e:	4214      	tst	r4, r2
   15640:	d106      	bne.n	15650 <__aeabi_dmul+0x3f0>
   15642:	4322      	orrs	r2, r4
   15644:	0312      	lsls	r2, r2, #12
   15646:	0b12      	lsrs	r2, r2, #12
   15648:	4645      	mov	r5, r8
   1564a:	4699      	mov	r9, r3
   1564c:	4c43      	ldr	r4, [pc, #268]	; (1575c <__aeabi_dmul+0x4fc>)
   1564e:	e66e      	b.n	1532e <__aeabi_dmul+0xce>
   15650:	465b      	mov	r3, fp
   15652:	431a      	orrs	r2, r3
   15654:	0312      	lsls	r2, r2, #12
   15656:	0b12      	lsrs	r2, r2, #12
   15658:	4c40      	ldr	r4, [pc, #256]	; (1575c <__aeabi_dmul+0x4fc>)
   1565a:	e668      	b.n	1532e <__aeabi_dmul+0xce>
   1565c:	0003      	movs	r3, r0
   1565e:	4654      	mov	r4, sl
   15660:	3b28      	subs	r3, #40	; 0x28
   15662:	409c      	lsls	r4, r3
   15664:	2300      	movs	r3, #0
   15666:	e6b9      	b.n	153dc <__aeabi_dmul+0x17c>
   15668:	f000 fd1a 	bl	160a0 <__clzsi2>
   1566c:	3020      	adds	r0, #32
   1566e:	e6a6      	b.n	153be <__aeabi_dmul+0x15e>
   15670:	0003      	movs	r3, r0
   15672:	3b28      	subs	r3, #40	; 0x28
   15674:	409f      	lsls	r7, r3
   15676:	2300      	movs	r3, #0
   15678:	46bb      	mov	fp, r7
   1567a:	4699      	mov	r9, r3
   1567c:	e68a      	b.n	15394 <__aeabi_dmul+0x134>
   1567e:	f000 fd0f 	bl	160a0 <__clzsi2>
   15682:	3020      	adds	r0, #32
   15684:	e674      	b.n	15370 <__aeabi_dmul+0x110>
   15686:	46b4      	mov	ip, r6
   15688:	e7ad      	b.n	155e6 <__aeabi_dmul+0x386>
   1568a:	2501      	movs	r5, #1
   1568c:	1a2a      	subs	r2, r5, r0
   1568e:	2a38      	cmp	r2, #56	; 0x38
   15690:	dd06      	ble.n	156a0 <__aeabi_dmul+0x440>
   15692:	9b01      	ldr	r3, [sp, #4]
   15694:	2400      	movs	r4, #0
   15696:	401d      	ands	r5, r3
   15698:	2300      	movs	r3, #0
   1569a:	2200      	movs	r2, #0
   1569c:	4699      	mov	r9, r3
   1569e:	e646      	b.n	1532e <__aeabi_dmul+0xce>
   156a0:	2a1f      	cmp	r2, #31
   156a2:	dc21      	bgt.n	156e8 <__aeabi_dmul+0x488>
   156a4:	2520      	movs	r5, #32
   156a6:	0020      	movs	r0, r4
   156a8:	1aad      	subs	r5, r5, r2
   156aa:	001e      	movs	r6, r3
   156ac:	40ab      	lsls	r3, r5
   156ae:	40a8      	lsls	r0, r5
   156b0:	40d6      	lsrs	r6, r2
   156b2:	1e5d      	subs	r5, r3, #1
   156b4:	41ab      	sbcs	r3, r5
   156b6:	4330      	orrs	r0, r6
   156b8:	4318      	orrs	r0, r3
   156ba:	40d4      	lsrs	r4, r2
   156bc:	0743      	lsls	r3, r0, #29
   156be:	d009      	beq.n	156d4 <__aeabi_dmul+0x474>
   156c0:	230f      	movs	r3, #15
   156c2:	4003      	ands	r3, r0
   156c4:	2b04      	cmp	r3, #4
   156c6:	d005      	beq.n	156d4 <__aeabi_dmul+0x474>
   156c8:	0003      	movs	r3, r0
   156ca:	1d18      	adds	r0, r3, #4
   156cc:	4298      	cmp	r0, r3
   156ce:	419b      	sbcs	r3, r3
   156d0:	425b      	negs	r3, r3
   156d2:	18e4      	adds	r4, r4, r3
   156d4:	0223      	lsls	r3, r4, #8
   156d6:	d521      	bpl.n	1571c <__aeabi_dmul+0x4bc>
   156d8:	2501      	movs	r5, #1
   156da:	9b01      	ldr	r3, [sp, #4]
   156dc:	2401      	movs	r4, #1
   156de:	401d      	ands	r5, r3
   156e0:	2300      	movs	r3, #0
   156e2:	2200      	movs	r2, #0
   156e4:	4699      	mov	r9, r3
   156e6:	e622      	b.n	1532e <__aeabi_dmul+0xce>
   156e8:	251f      	movs	r5, #31
   156ea:	0021      	movs	r1, r4
   156ec:	426d      	negs	r5, r5
   156ee:	1a28      	subs	r0, r5, r0
   156f0:	40c1      	lsrs	r1, r0
   156f2:	0008      	movs	r0, r1
   156f4:	2a20      	cmp	r2, #32
   156f6:	d01d      	beq.n	15734 <__aeabi_dmul+0x4d4>
   156f8:	355f      	adds	r5, #95	; 0x5f
   156fa:	1aaa      	subs	r2, r5, r2
   156fc:	4094      	lsls	r4, r2
   156fe:	4323      	orrs	r3, r4
   15700:	1e5c      	subs	r4, r3, #1
   15702:	41a3      	sbcs	r3, r4
   15704:	2507      	movs	r5, #7
   15706:	4303      	orrs	r3, r0
   15708:	401d      	ands	r5, r3
   1570a:	2200      	movs	r2, #0
   1570c:	2d00      	cmp	r5, #0
   1570e:	d009      	beq.n	15724 <__aeabi_dmul+0x4c4>
   15710:	220f      	movs	r2, #15
   15712:	2400      	movs	r4, #0
   15714:	401a      	ands	r2, r3
   15716:	0018      	movs	r0, r3
   15718:	2a04      	cmp	r2, #4
   1571a:	d1d6      	bne.n	156ca <__aeabi_dmul+0x46a>
   1571c:	0003      	movs	r3, r0
   1571e:	0765      	lsls	r5, r4, #29
   15720:	0264      	lsls	r4, r4, #9
   15722:	0b22      	lsrs	r2, r4, #12
   15724:	08db      	lsrs	r3, r3, #3
   15726:	432b      	orrs	r3, r5
   15728:	2501      	movs	r5, #1
   1572a:	4699      	mov	r9, r3
   1572c:	9b01      	ldr	r3, [sp, #4]
   1572e:	2400      	movs	r4, #0
   15730:	401d      	ands	r5, r3
   15732:	e5fc      	b.n	1532e <__aeabi_dmul+0xce>
   15734:	2400      	movs	r4, #0
   15736:	e7e2      	b.n	156fe <__aeabi_dmul+0x49e>
   15738:	2280      	movs	r2, #128	; 0x80
   1573a:	2501      	movs	r5, #1
   1573c:	0312      	lsls	r2, r2, #12
   1573e:	4322      	orrs	r2, r4
   15740:	9901      	ldr	r1, [sp, #4]
   15742:	0312      	lsls	r2, r2, #12
   15744:	0b12      	lsrs	r2, r2, #12
   15746:	400d      	ands	r5, r1
   15748:	4699      	mov	r9, r3
   1574a:	4c04      	ldr	r4, [pc, #16]	; (1575c <__aeabi_dmul+0x4fc>)
   1574c:	e5ef      	b.n	1532e <__aeabi_dmul+0xce>
   1574e:	46c0      	nop			; (mov r8, r8)
   15750:	000003ff 	.word	0x000003ff
   15754:	feffffff 	.word	0xfeffffff
   15758:	000007fe 	.word	0x000007fe
   1575c:	000007ff 	.word	0x000007ff

00015760 <__aeabi_dsub>:
   15760:	b5f0      	push	{r4, r5, r6, r7, lr}
   15762:	4646      	mov	r6, r8
   15764:	46d6      	mov	lr, sl
   15766:	464f      	mov	r7, r9
   15768:	030c      	lsls	r4, r1, #12
   1576a:	b5c0      	push	{r6, r7, lr}
   1576c:	0fcd      	lsrs	r5, r1, #31
   1576e:	004e      	lsls	r6, r1, #1
   15770:	0a61      	lsrs	r1, r4, #9
   15772:	0f44      	lsrs	r4, r0, #29
   15774:	430c      	orrs	r4, r1
   15776:	00c1      	lsls	r1, r0, #3
   15778:	0058      	lsls	r0, r3, #1
   1577a:	0d40      	lsrs	r0, r0, #21
   1577c:	4684      	mov	ip, r0
   1577e:	468a      	mov	sl, r1
   15780:	000f      	movs	r7, r1
   15782:	0319      	lsls	r1, r3, #12
   15784:	0f50      	lsrs	r0, r2, #29
   15786:	0a49      	lsrs	r1, r1, #9
   15788:	4301      	orrs	r1, r0
   1578a:	48c6      	ldr	r0, [pc, #792]	; (15aa4 <__aeabi_dsub+0x344>)
   1578c:	0d76      	lsrs	r6, r6, #21
   1578e:	46a8      	mov	r8, r5
   15790:	0fdb      	lsrs	r3, r3, #31
   15792:	00d2      	lsls	r2, r2, #3
   15794:	4584      	cmp	ip, r0
   15796:	d100      	bne.n	1579a <__aeabi_dsub+0x3a>
   15798:	e0d8      	b.n	1594c <__aeabi_dsub+0x1ec>
   1579a:	2001      	movs	r0, #1
   1579c:	4043      	eors	r3, r0
   1579e:	42ab      	cmp	r3, r5
   157a0:	d100      	bne.n	157a4 <__aeabi_dsub+0x44>
   157a2:	e0a6      	b.n	158f2 <__aeabi_dsub+0x192>
   157a4:	4660      	mov	r0, ip
   157a6:	1a35      	subs	r5, r6, r0
   157a8:	2d00      	cmp	r5, #0
   157aa:	dc00      	bgt.n	157ae <__aeabi_dsub+0x4e>
   157ac:	e105      	b.n	159ba <__aeabi_dsub+0x25a>
   157ae:	2800      	cmp	r0, #0
   157b0:	d110      	bne.n	157d4 <__aeabi_dsub+0x74>
   157b2:	000b      	movs	r3, r1
   157b4:	4313      	orrs	r3, r2
   157b6:	d100      	bne.n	157ba <__aeabi_dsub+0x5a>
   157b8:	e0d7      	b.n	1596a <__aeabi_dsub+0x20a>
   157ba:	1e6b      	subs	r3, r5, #1
   157bc:	2b00      	cmp	r3, #0
   157be:	d000      	beq.n	157c2 <__aeabi_dsub+0x62>
   157c0:	e14b      	b.n	15a5a <__aeabi_dsub+0x2fa>
   157c2:	4653      	mov	r3, sl
   157c4:	1a9f      	subs	r7, r3, r2
   157c6:	45ba      	cmp	sl, r7
   157c8:	4180      	sbcs	r0, r0
   157ca:	1a64      	subs	r4, r4, r1
   157cc:	4240      	negs	r0, r0
   157ce:	1a24      	subs	r4, r4, r0
   157d0:	2601      	movs	r6, #1
   157d2:	e01e      	b.n	15812 <__aeabi_dsub+0xb2>
   157d4:	4bb3      	ldr	r3, [pc, #716]	; (15aa4 <__aeabi_dsub+0x344>)
   157d6:	429e      	cmp	r6, r3
   157d8:	d048      	beq.n	1586c <__aeabi_dsub+0x10c>
   157da:	2380      	movs	r3, #128	; 0x80
   157dc:	041b      	lsls	r3, r3, #16
   157de:	4319      	orrs	r1, r3
   157e0:	2d38      	cmp	r5, #56	; 0x38
   157e2:	dd00      	ble.n	157e6 <__aeabi_dsub+0x86>
   157e4:	e119      	b.n	15a1a <__aeabi_dsub+0x2ba>
   157e6:	2d1f      	cmp	r5, #31
   157e8:	dd00      	ble.n	157ec <__aeabi_dsub+0x8c>
   157ea:	e14c      	b.n	15a86 <__aeabi_dsub+0x326>
   157ec:	2320      	movs	r3, #32
   157ee:	000f      	movs	r7, r1
   157f0:	1b5b      	subs	r3, r3, r5
   157f2:	0010      	movs	r0, r2
   157f4:	409a      	lsls	r2, r3
   157f6:	409f      	lsls	r7, r3
   157f8:	40e8      	lsrs	r0, r5
   157fa:	1e53      	subs	r3, r2, #1
   157fc:	419a      	sbcs	r2, r3
   157fe:	40e9      	lsrs	r1, r5
   15800:	4307      	orrs	r7, r0
   15802:	4317      	orrs	r7, r2
   15804:	4653      	mov	r3, sl
   15806:	1bdf      	subs	r7, r3, r7
   15808:	1a61      	subs	r1, r4, r1
   1580a:	45ba      	cmp	sl, r7
   1580c:	41a4      	sbcs	r4, r4
   1580e:	4264      	negs	r4, r4
   15810:	1b0c      	subs	r4, r1, r4
   15812:	0223      	lsls	r3, r4, #8
   15814:	d400      	bmi.n	15818 <__aeabi_dsub+0xb8>
   15816:	e0c5      	b.n	159a4 <__aeabi_dsub+0x244>
   15818:	0264      	lsls	r4, r4, #9
   1581a:	0a65      	lsrs	r5, r4, #9
   1581c:	2d00      	cmp	r5, #0
   1581e:	d100      	bne.n	15822 <__aeabi_dsub+0xc2>
   15820:	e0f6      	b.n	15a10 <__aeabi_dsub+0x2b0>
   15822:	0028      	movs	r0, r5
   15824:	f000 fc3c 	bl	160a0 <__clzsi2>
   15828:	0003      	movs	r3, r0
   1582a:	3b08      	subs	r3, #8
   1582c:	2b1f      	cmp	r3, #31
   1582e:	dd00      	ble.n	15832 <__aeabi_dsub+0xd2>
   15830:	e0e9      	b.n	15a06 <__aeabi_dsub+0x2a6>
   15832:	2220      	movs	r2, #32
   15834:	003c      	movs	r4, r7
   15836:	1ad2      	subs	r2, r2, r3
   15838:	409d      	lsls	r5, r3
   1583a:	40d4      	lsrs	r4, r2
   1583c:	409f      	lsls	r7, r3
   1583e:	4325      	orrs	r5, r4
   15840:	429e      	cmp	r6, r3
   15842:	dd00      	ble.n	15846 <__aeabi_dsub+0xe6>
   15844:	e0db      	b.n	159fe <__aeabi_dsub+0x29e>
   15846:	1b9e      	subs	r6, r3, r6
   15848:	1c73      	adds	r3, r6, #1
   1584a:	2b1f      	cmp	r3, #31
   1584c:	dd00      	ble.n	15850 <__aeabi_dsub+0xf0>
   1584e:	e10a      	b.n	15a66 <__aeabi_dsub+0x306>
   15850:	2220      	movs	r2, #32
   15852:	0038      	movs	r0, r7
   15854:	1ad2      	subs	r2, r2, r3
   15856:	0029      	movs	r1, r5
   15858:	4097      	lsls	r7, r2
   1585a:	002c      	movs	r4, r5
   1585c:	4091      	lsls	r1, r2
   1585e:	40d8      	lsrs	r0, r3
   15860:	1e7a      	subs	r2, r7, #1
   15862:	4197      	sbcs	r7, r2
   15864:	40dc      	lsrs	r4, r3
   15866:	2600      	movs	r6, #0
   15868:	4301      	orrs	r1, r0
   1586a:	430f      	orrs	r7, r1
   1586c:	077b      	lsls	r3, r7, #29
   1586e:	d009      	beq.n	15884 <__aeabi_dsub+0x124>
   15870:	230f      	movs	r3, #15
   15872:	403b      	ands	r3, r7
   15874:	2b04      	cmp	r3, #4
   15876:	d005      	beq.n	15884 <__aeabi_dsub+0x124>
   15878:	1d3b      	adds	r3, r7, #4
   1587a:	42bb      	cmp	r3, r7
   1587c:	41bf      	sbcs	r7, r7
   1587e:	427f      	negs	r7, r7
   15880:	19e4      	adds	r4, r4, r7
   15882:	001f      	movs	r7, r3
   15884:	0223      	lsls	r3, r4, #8
   15886:	d525      	bpl.n	158d4 <__aeabi_dsub+0x174>
   15888:	4b86      	ldr	r3, [pc, #536]	; (15aa4 <__aeabi_dsub+0x344>)
   1588a:	3601      	adds	r6, #1
   1588c:	429e      	cmp	r6, r3
   1588e:	d100      	bne.n	15892 <__aeabi_dsub+0x132>
   15890:	e0af      	b.n	159f2 <__aeabi_dsub+0x292>
   15892:	4b85      	ldr	r3, [pc, #532]	; (15aa8 <__aeabi_dsub+0x348>)
   15894:	2501      	movs	r5, #1
   15896:	401c      	ands	r4, r3
   15898:	4643      	mov	r3, r8
   1589a:	0762      	lsls	r2, r4, #29
   1589c:	08ff      	lsrs	r7, r7, #3
   1589e:	0264      	lsls	r4, r4, #9
   158a0:	0576      	lsls	r6, r6, #21
   158a2:	4317      	orrs	r7, r2
   158a4:	0b24      	lsrs	r4, r4, #12
   158a6:	0d76      	lsrs	r6, r6, #21
   158a8:	401d      	ands	r5, r3
   158aa:	2100      	movs	r1, #0
   158ac:	0324      	lsls	r4, r4, #12
   158ae:	0b23      	lsrs	r3, r4, #12
   158b0:	0d0c      	lsrs	r4, r1, #20
   158b2:	4a7e      	ldr	r2, [pc, #504]	; (15aac <__aeabi_dsub+0x34c>)
   158b4:	0524      	lsls	r4, r4, #20
   158b6:	431c      	orrs	r4, r3
   158b8:	4014      	ands	r4, r2
   158ba:	0533      	lsls	r3, r6, #20
   158bc:	4323      	orrs	r3, r4
   158be:	005b      	lsls	r3, r3, #1
   158c0:	07ed      	lsls	r5, r5, #31
   158c2:	085b      	lsrs	r3, r3, #1
   158c4:	432b      	orrs	r3, r5
   158c6:	0038      	movs	r0, r7
   158c8:	0019      	movs	r1, r3
   158ca:	bc1c      	pop	{r2, r3, r4}
   158cc:	4690      	mov	r8, r2
   158ce:	4699      	mov	r9, r3
   158d0:	46a2      	mov	sl, r4
   158d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   158d4:	2501      	movs	r5, #1
   158d6:	4643      	mov	r3, r8
   158d8:	0762      	lsls	r2, r4, #29
   158da:	08ff      	lsrs	r7, r7, #3
   158dc:	4317      	orrs	r7, r2
   158de:	08e4      	lsrs	r4, r4, #3
   158e0:	401d      	ands	r5, r3
   158e2:	4b70      	ldr	r3, [pc, #448]	; (15aa4 <__aeabi_dsub+0x344>)
   158e4:	429e      	cmp	r6, r3
   158e6:	d036      	beq.n	15956 <__aeabi_dsub+0x1f6>
   158e8:	0324      	lsls	r4, r4, #12
   158ea:	0576      	lsls	r6, r6, #21
   158ec:	0b24      	lsrs	r4, r4, #12
   158ee:	0d76      	lsrs	r6, r6, #21
   158f0:	e7db      	b.n	158aa <__aeabi_dsub+0x14a>
   158f2:	4663      	mov	r3, ip
   158f4:	1af3      	subs	r3, r6, r3
   158f6:	2b00      	cmp	r3, #0
   158f8:	dc00      	bgt.n	158fc <__aeabi_dsub+0x19c>
   158fa:	e094      	b.n	15a26 <__aeabi_dsub+0x2c6>
   158fc:	4660      	mov	r0, ip
   158fe:	2800      	cmp	r0, #0
   15900:	d035      	beq.n	1596e <__aeabi_dsub+0x20e>
   15902:	4868      	ldr	r0, [pc, #416]	; (15aa4 <__aeabi_dsub+0x344>)
   15904:	4286      	cmp	r6, r0
   15906:	d0b1      	beq.n	1586c <__aeabi_dsub+0x10c>
   15908:	2780      	movs	r7, #128	; 0x80
   1590a:	043f      	lsls	r7, r7, #16
   1590c:	4339      	orrs	r1, r7
   1590e:	2b38      	cmp	r3, #56	; 0x38
   15910:	dc00      	bgt.n	15914 <__aeabi_dsub+0x1b4>
   15912:	e0fd      	b.n	15b10 <__aeabi_dsub+0x3b0>
   15914:	430a      	orrs	r2, r1
   15916:	0017      	movs	r7, r2
   15918:	2100      	movs	r1, #0
   1591a:	1e7a      	subs	r2, r7, #1
   1591c:	4197      	sbcs	r7, r2
   1591e:	4457      	add	r7, sl
   15920:	4557      	cmp	r7, sl
   15922:	4180      	sbcs	r0, r0
   15924:	1909      	adds	r1, r1, r4
   15926:	4244      	negs	r4, r0
   15928:	190c      	adds	r4, r1, r4
   1592a:	0223      	lsls	r3, r4, #8
   1592c:	d53a      	bpl.n	159a4 <__aeabi_dsub+0x244>
   1592e:	4b5d      	ldr	r3, [pc, #372]	; (15aa4 <__aeabi_dsub+0x344>)
   15930:	3601      	adds	r6, #1
   15932:	429e      	cmp	r6, r3
   15934:	d100      	bne.n	15938 <__aeabi_dsub+0x1d8>
   15936:	e14b      	b.n	15bd0 <__aeabi_dsub+0x470>
   15938:	2201      	movs	r2, #1
   1593a:	4b5b      	ldr	r3, [pc, #364]	; (15aa8 <__aeabi_dsub+0x348>)
   1593c:	401c      	ands	r4, r3
   1593e:	087b      	lsrs	r3, r7, #1
   15940:	4017      	ands	r7, r2
   15942:	431f      	orrs	r7, r3
   15944:	07e2      	lsls	r2, r4, #31
   15946:	4317      	orrs	r7, r2
   15948:	0864      	lsrs	r4, r4, #1
   1594a:	e78f      	b.n	1586c <__aeabi_dsub+0x10c>
   1594c:	0008      	movs	r0, r1
   1594e:	4310      	orrs	r0, r2
   15950:	d000      	beq.n	15954 <__aeabi_dsub+0x1f4>
   15952:	e724      	b.n	1579e <__aeabi_dsub+0x3e>
   15954:	e721      	b.n	1579a <__aeabi_dsub+0x3a>
   15956:	0023      	movs	r3, r4
   15958:	433b      	orrs	r3, r7
   1595a:	d100      	bne.n	1595e <__aeabi_dsub+0x1fe>
   1595c:	e1b9      	b.n	15cd2 <__aeabi_dsub+0x572>
   1595e:	2280      	movs	r2, #128	; 0x80
   15960:	0312      	lsls	r2, r2, #12
   15962:	4314      	orrs	r4, r2
   15964:	0324      	lsls	r4, r4, #12
   15966:	0b24      	lsrs	r4, r4, #12
   15968:	e79f      	b.n	158aa <__aeabi_dsub+0x14a>
   1596a:	002e      	movs	r6, r5
   1596c:	e77e      	b.n	1586c <__aeabi_dsub+0x10c>
   1596e:	0008      	movs	r0, r1
   15970:	4310      	orrs	r0, r2
   15972:	d100      	bne.n	15976 <__aeabi_dsub+0x216>
   15974:	e0ca      	b.n	15b0c <__aeabi_dsub+0x3ac>
   15976:	1e58      	subs	r0, r3, #1
   15978:	4684      	mov	ip, r0
   1597a:	2800      	cmp	r0, #0
   1597c:	d000      	beq.n	15980 <__aeabi_dsub+0x220>
   1597e:	e0e7      	b.n	15b50 <__aeabi_dsub+0x3f0>
   15980:	4452      	add	r2, sl
   15982:	4552      	cmp	r2, sl
   15984:	4180      	sbcs	r0, r0
   15986:	1864      	adds	r4, r4, r1
   15988:	4240      	negs	r0, r0
   1598a:	1824      	adds	r4, r4, r0
   1598c:	0017      	movs	r7, r2
   1598e:	2601      	movs	r6, #1
   15990:	0223      	lsls	r3, r4, #8
   15992:	d507      	bpl.n	159a4 <__aeabi_dsub+0x244>
   15994:	2602      	movs	r6, #2
   15996:	e7cf      	b.n	15938 <__aeabi_dsub+0x1d8>
   15998:	4664      	mov	r4, ip
   1599a:	432c      	orrs	r4, r5
   1599c:	d100      	bne.n	159a0 <__aeabi_dsub+0x240>
   1599e:	e1b3      	b.n	15d08 <__aeabi_dsub+0x5a8>
   159a0:	002c      	movs	r4, r5
   159a2:	4667      	mov	r7, ip
   159a4:	077b      	lsls	r3, r7, #29
   159a6:	d000      	beq.n	159aa <__aeabi_dsub+0x24a>
   159a8:	e762      	b.n	15870 <__aeabi_dsub+0x110>
   159aa:	0763      	lsls	r3, r4, #29
   159ac:	08ff      	lsrs	r7, r7, #3
   159ae:	431f      	orrs	r7, r3
   159b0:	2501      	movs	r5, #1
   159b2:	4643      	mov	r3, r8
   159b4:	08e4      	lsrs	r4, r4, #3
   159b6:	401d      	ands	r5, r3
   159b8:	e793      	b.n	158e2 <__aeabi_dsub+0x182>
   159ba:	2d00      	cmp	r5, #0
   159bc:	d178      	bne.n	15ab0 <__aeabi_dsub+0x350>
   159be:	1c75      	adds	r5, r6, #1
   159c0:	056d      	lsls	r5, r5, #21
   159c2:	0d6d      	lsrs	r5, r5, #21
   159c4:	2d01      	cmp	r5, #1
   159c6:	dc00      	bgt.n	159ca <__aeabi_dsub+0x26a>
   159c8:	e0f2      	b.n	15bb0 <__aeabi_dsub+0x450>
   159ca:	4650      	mov	r0, sl
   159cc:	1a80      	subs	r0, r0, r2
   159ce:	4582      	cmp	sl, r0
   159d0:	41bf      	sbcs	r7, r7
   159d2:	1a65      	subs	r5, r4, r1
   159d4:	427f      	negs	r7, r7
   159d6:	1bed      	subs	r5, r5, r7
   159d8:	4684      	mov	ip, r0
   159da:	0228      	lsls	r0, r5, #8
   159dc:	d400      	bmi.n	159e0 <__aeabi_dsub+0x280>
   159de:	e08c      	b.n	15afa <__aeabi_dsub+0x39a>
   159e0:	4650      	mov	r0, sl
   159e2:	1a17      	subs	r7, r2, r0
   159e4:	42ba      	cmp	r2, r7
   159e6:	4192      	sbcs	r2, r2
   159e8:	1b0c      	subs	r4, r1, r4
   159ea:	4255      	negs	r5, r2
   159ec:	1b65      	subs	r5, r4, r5
   159ee:	4698      	mov	r8, r3
   159f0:	e714      	b.n	1581c <__aeabi_dsub+0xbc>
   159f2:	2501      	movs	r5, #1
   159f4:	4643      	mov	r3, r8
   159f6:	2400      	movs	r4, #0
   159f8:	401d      	ands	r5, r3
   159fa:	2700      	movs	r7, #0
   159fc:	e755      	b.n	158aa <__aeabi_dsub+0x14a>
   159fe:	4c2a      	ldr	r4, [pc, #168]	; (15aa8 <__aeabi_dsub+0x348>)
   15a00:	1af6      	subs	r6, r6, r3
   15a02:	402c      	ands	r4, r5
   15a04:	e732      	b.n	1586c <__aeabi_dsub+0x10c>
   15a06:	003d      	movs	r5, r7
   15a08:	3828      	subs	r0, #40	; 0x28
   15a0a:	4085      	lsls	r5, r0
   15a0c:	2700      	movs	r7, #0
   15a0e:	e717      	b.n	15840 <__aeabi_dsub+0xe0>
   15a10:	0038      	movs	r0, r7
   15a12:	f000 fb45 	bl	160a0 <__clzsi2>
   15a16:	3020      	adds	r0, #32
   15a18:	e706      	b.n	15828 <__aeabi_dsub+0xc8>
   15a1a:	430a      	orrs	r2, r1
   15a1c:	0017      	movs	r7, r2
   15a1e:	2100      	movs	r1, #0
   15a20:	1e7a      	subs	r2, r7, #1
   15a22:	4197      	sbcs	r7, r2
   15a24:	e6ee      	b.n	15804 <__aeabi_dsub+0xa4>
   15a26:	2b00      	cmp	r3, #0
   15a28:	d000      	beq.n	15a2c <__aeabi_dsub+0x2cc>
   15a2a:	e0e5      	b.n	15bf8 <__aeabi_dsub+0x498>
   15a2c:	1c73      	adds	r3, r6, #1
   15a2e:	469c      	mov	ip, r3
   15a30:	055b      	lsls	r3, r3, #21
   15a32:	0d5b      	lsrs	r3, r3, #21
   15a34:	2b01      	cmp	r3, #1
   15a36:	dc00      	bgt.n	15a3a <__aeabi_dsub+0x2da>
   15a38:	e09f      	b.n	15b7a <__aeabi_dsub+0x41a>
   15a3a:	4b1a      	ldr	r3, [pc, #104]	; (15aa4 <__aeabi_dsub+0x344>)
   15a3c:	459c      	cmp	ip, r3
   15a3e:	d100      	bne.n	15a42 <__aeabi_dsub+0x2e2>
   15a40:	e0c5      	b.n	15bce <__aeabi_dsub+0x46e>
   15a42:	4452      	add	r2, sl
   15a44:	4552      	cmp	r2, sl
   15a46:	4180      	sbcs	r0, r0
   15a48:	1864      	adds	r4, r4, r1
   15a4a:	4240      	negs	r0, r0
   15a4c:	1824      	adds	r4, r4, r0
   15a4e:	07e7      	lsls	r7, r4, #31
   15a50:	0852      	lsrs	r2, r2, #1
   15a52:	4317      	orrs	r7, r2
   15a54:	0864      	lsrs	r4, r4, #1
   15a56:	4666      	mov	r6, ip
   15a58:	e708      	b.n	1586c <__aeabi_dsub+0x10c>
   15a5a:	4812      	ldr	r0, [pc, #72]	; (15aa4 <__aeabi_dsub+0x344>)
   15a5c:	4285      	cmp	r5, r0
   15a5e:	d100      	bne.n	15a62 <__aeabi_dsub+0x302>
   15a60:	e085      	b.n	15b6e <__aeabi_dsub+0x40e>
   15a62:	001d      	movs	r5, r3
   15a64:	e6bc      	b.n	157e0 <__aeabi_dsub+0x80>
   15a66:	0029      	movs	r1, r5
   15a68:	3e1f      	subs	r6, #31
   15a6a:	40f1      	lsrs	r1, r6
   15a6c:	2b20      	cmp	r3, #32
   15a6e:	d100      	bne.n	15a72 <__aeabi_dsub+0x312>
   15a70:	e07f      	b.n	15b72 <__aeabi_dsub+0x412>
   15a72:	2240      	movs	r2, #64	; 0x40
   15a74:	1ad3      	subs	r3, r2, r3
   15a76:	409d      	lsls	r5, r3
   15a78:	432f      	orrs	r7, r5
   15a7a:	1e7d      	subs	r5, r7, #1
   15a7c:	41af      	sbcs	r7, r5
   15a7e:	2400      	movs	r4, #0
   15a80:	430f      	orrs	r7, r1
   15a82:	2600      	movs	r6, #0
   15a84:	e78e      	b.n	159a4 <__aeabi_dsub+0x244>
   15a86:	002b      	movs	r3, r5
   15a88:	000f      	movs	r7, r1
   15a8a:	3b20      	subs	r3, #32
   15a8c:	40df      	lsrs	r7, r3
   15a8e:	2d20      	cmp	r5, #32
   15a90:	d071      	beq.n	15b76 <__aeabi_dsub+0x416>
   15a92:	2340      	movs	r3, #64	; 0x40
   15a94:	1b5d      	subs	r5, r3, r5
   15a96:	40a9      	lsls	r1, r5
   15a98:	430a      	orrs	r2, r1
   15a9a:	1e51      	subs	r1, r2, #1
   15a9c:	418a      	sbcs	r2, r1
   15a9e:	2100      	movs	r1, #0
   15aa0:	4317      	orrs	r7, r2
   15aa2:	e6af      	b.n	15804 <__aeabi_dsub+0xa4>
   15aa4:	000007ff 	.word	0x000007ff
   15aa8:	ff7fffff 	.word	0xff7fffff
   15aac:	800fffff 	.word	0x800fffff
   15ab0:	2e00      	cmp	r6, #0
   15ab2:	d03e      	beq.n	15b32 <__aeabi_dsub+0x3d2>
   15ab4:	4eb3      	ldr	r6, [pc, #716]	; (15d84 <__aeabi_dsub+0x624>)
   15ab6:	45b4      	cmp	ip, r6
   15ab8:	d045      	beq.n	15b46 <__aeabi_dsub+0x3e6>
   15aba:	2680      	movs	r6, #128	; 0x80
   15abc:	0436      	lsls	r6, r6, #16
   15abe:	426d      	negs	r5, r5
   15ac0:	4334      	orrs	r4, r6
   15ac2:	2d38      	cmp	r5, #56	; 0x38
   15ac4:	dd00      	ble.n	15ac8 <__aeabi_dsub+0x368>
   15ac6:	e0a8      	b.n	15c1a <__aeabi_dsub+0x4ba>
   15ac8:	2d1f      	cmp	r5, #31
   15aca:	dd00      	ble.n	15ace <__aeabi_dsub+0x36e>
   15acc:	e11f      	b.n	15d0e <__aeabi_dsub+0x5ae>
   15ace:	2620      	movs	r6, #32
   15ad0:	0027      	movs	r7, r4
   15ad2:	4650      	mov	r0, sl
   15ad4:	1b76      	subs	r6, r6, r5
   15ad6:	40b7      	lsls	r7, r6
   15ad8:	40e8      	lsrs	r0, r5
   15ada:	4307      	orrs	r7, r0
   15adc:	4650      	mov	r0, sl
   15ade:	40b0      	lsls	r0, r6
   15ae0:	1e46      	subs	r6, r0, #1
   15ae2:	41b0      	sbcs	r0, r6
   15ae4:	40ec      	lsrs	r4, r5
   15ae6:	4338      	orrs	r0, r7
   15ae8:	1a17      	subs	r7, r2, r0
   15aea:	42ba      	cmp	r2, r7
   15aec:	4192      	sbcs	r2, r2
   15aee:	1b0c      	subs	r4, r1, r4
   15af0:	4252      	negs	r2, r2
   15af2:	1aa4      	subs	r4, r4, r2
   15af4:	4666      	mov	r6, ip
   15af6:	4698      	mov	r8, r3
   15af8:	e68b      	b.n	15812 <__aeabi_dsub+0xb2>
   15afa:	4664      	mov	r4, ip
   15afc:	4667      	mov	r7, ip
   15afe:	432c      	orrs	r4, r5
   15b00:	d000      	beq.n	15b04 <__aeabi_dsub+0x3a4>
   15b02:	e68b      	b.n	1581c <__aeabi_dsub+0xbc>
   15b04:	2500      	movs	r5, #0
   15b06:	2600      	movs	r6, #0
   15b08:	2700      	movs	r7, #0
   15b0a:	e6ea      	b.n	158e2 <__aeabi_dsub+0x182>
   15b0c:	001e      	movs	r6, r3
   15b0e:	e6ad      	b.n	1586c <__aeabi_dsub+0x10c>
   15b10:	2b1f      	cmp	r3, #31
   15b12:	dc60      	bgt.n	15bd6 <__aeabi_dsub+0x476>
   15b14:	2720      	movs	r7, #32
   15b16:	1af8      	subs	r0, r7, r3
   15b18:	000f      	movs	r7, r1
   15b1a:	4684      	mov	ip, r0
   15b1c:	4087      	lsls	r7, r0
   15b1e:	0010      	movs	r0, r2
   15b20:	40d8      	lsrs	r0, r3
   15b22:	4307      	orrs	r7, r0
   15b24:	4660      	mov	r0, ip
   15b26:	4082      	lsls	r2, r0
   15b28:	1e50      	subs	r0, r2, #1
   15b2a:	4182      	sbcs	r2, r0
   15b2c:	40d9      	lsrs	r1, r3
   15b2e:	4317      	orrs	r7, r2
   15b30:	e6f5      	b.n	1591e <__aeabi_dsub+0x1be>
   15b32:	0026      	movs	r6, r4
   15b34:	4650      	mov	r0, sl
   15b36:	4306      	orrs	r6, r0
   15b38:	d005      	beq.n	15b46 <__aeabi_dsub+0x3e6>
   15b3a:	43ed      	mvns	r5, r5
   15b3c:	2d00      	cmp	r5, #0
   15b3e:	d0d3      	beq.n	15ae8 <__aeabi_dsub+0x388>
   15b40:	4e90      	ldr	r6, [pc, #576]	; (15d84 <__aeabi_dsub+0x624>)
   15b42:	45b4      	cmp	ip, r6
   15b44:	d1bd      	bne.n	15ac2 <__aeabi_dsub+0x362>
   15b46:	000c      	movs	r4, r1
   15b48:	0017      	movs	r7, r2
   15b4a:	4666      	mov	r6, ip
   15b4c:	4698      	mov	r8, r3
   15b4e:	e68d      	b.n	1586c <__aeabi_dsub+0x10c>
   15b50:	488c      	ldr	r0, [pc, #560]	; (15d84 <__aeabi_dsub+0x624>)
   15b52:	4283      	cmp	r3, r0
   15b54:	d00b      	beq.n	15b6e <__aeabi_dsub+0x40e>
   15b56:	4663      	mov	r3, ip
   15b58:	e6d9      	b.n	1590e <__aeabi_dsub+0x1ae>
   15b5a:	2d00      	cmp	r5, #0
   15b5c:	d000      	beq.n	15b60 <__aeabi_dsub+0x400>
   15b5e:	e096      	b.n	15c8e <__aeabi_dsub+0x52e>
   15b60:	0008      	movs	r0, r1
   15b62:	4310      	orrs	r0, r2
   15b64:	d100      	bne.n	15b68 <__aeabi_dsub+0x408>
   15b66:	e0e2      	b.n	15d2e <__aeabi_dsub+0x5ce>
   15b68:	000c      	movs	r4, r1
   15b6a:	0017      	movs	r7, r2
   15b6c:	4698      	mov	r8, r3
   15b6e:	4e85      	ldr	r6, [pc, #532]	; (15d84 <__aeabi_dsub+0x624>)
   15b70:	e67c      	b.n	1586c <__aeabi_dsub+0x10c>
   15b72:	2500      	movs	r5, #0
   15b74:	e780      	b.n	15a78 <__aeabi_dsub+0x318>
   15b76:	2100      	movs	r1, #0
   15b78:	e78e      	b.n	15a98 <__aeabi_dsub+0x338>
   15b7a:	0023      	movs	r3, r4
   15b7c:	4650      	mov	r0, sl
   15b7e:	4303      	orrs	r3, r0
   15b80:	2e00      	cmp	r6, #0
   15b82:	d000      	beq.n	15b86 <__aeabi_dsub+0x426>
   15b84:	e0a8      	b.n	15cd8 <__aeabi_dsub+0x578>
   15b86:	2b00      	cmp	r3, #0
   15b88:	d100      	bne.n	15b8c <__aeabi_dsub+0x42c>
   15b8a:	e0de      	b.n	15d4a <__aeabi_dsub+0x5ea>
   15b8c:	000b      	movs	r3, r1
   15b8e:	4313      	orrs	r3, r2
   15b90:	d100      	bne.n	15b94 <__aeabi_dsub+0x434>
   15b92:	e66b      	b.n	1586c <__aeabi_dsub+0x10c>
   15b94:	4452      	add	r2, sl
   15b96:	4552      	cmp	r2, sl
   15b98:	4180      	sbcs	r0, r0
   15b9a:	1864      	adds	r4, r4, r1
   15b9c:	4240      	negs	r0, r0
   15b9e:	1824      	adds	r4, r4, r0
   15ba0:	0017      	movs	r7, r2
   15ba2:	0223      	lsls	r3, r4, #8
   15ba4:	d400      	bmi.n	15ba8 <__aeabi_dsub+0x448>
   15ba6:	e6fd      	b.n	159a4 <__aeabi_dsub+0x244>
   15ba8:	4b77      	ldr	r3, [pc, #476]	; (15d88 <__aeabi_dsub+0x628>)
   15baa:	4666      	mov	r6, ip
   15bac:	401c      	ands	r4, r3
   15bae:	e65d      	b.n	1586c <__aeabi_dsub+0x10c>
   15bb0:	0025      	movs	r5, r4
   15bb2:	4650      	mov	r0, sl
   15bb4:	4305      	orrs	r5, r0
   15bb6:	2e00      	cmp	r6, #0
   15bb8:	d1cf      	bne.n	15b5a <__aeabi_dsub+0x3fa>
   15bba:	2d00      	cmp	r5, #0
   15bbc:	d14f      	bne.n	15c5e <__aeabi_dsub+0x4fe>
   15bbe:	000c      	movs	r4, r1
   15bc0:	4314      	orrs	r4, r2
   15bc2:	d100      	bne.n	15bc6 <__aeabi_dsub+0x466>
   15bc4:	e0a0      	b.n	15d08 <__aeabi_dsub+0x5a8>
   15bc6:	000c      	movs	r4, r1
   15bc8:	0017      	movs	r7, r2
   15bca:	4698      	mov	r8, r3
   15bcc:	e64e      	b.n	1586c <__aeabi_dsub+0x10c>
   15bce:	4666      	mov	r6, ip
   15bd0:	2400      	movs	r4, #0
   15bd2:	2700      	movs	r7, #0
   15bd4:	e685      	b.n	158e2 <__aeabi_dsub+0x182>
   15bd6:	001f      	movs	r7, r3
   15bd8:	0008      	movs	r0, r1
   15bda:	3f20      	subs	r7, #32
   15bdc:	40f8      	lsrs	r0, r7
   15bde:	0007      	movs	r7, r0
   15be0:	2b20      	cmp	r3, #32
   15be2:	d100      	bne.n	15be6 <__aeabi_dsub+0x486>
   15be4:	e08e      	b.n	15d04 <__aeabi_dsub+0x5a4>
   15be6:	2040      	movs	r0, #64	; 0x40
   15be8:	1ac3      	subs	r3, r0, r3
   15bea:	4099      	lsls	r1, r3
   15bec:	430a      	orrs	r2, r1
   15bee:	1e51      	subs	r1, r2, #1
   15bf0:	418a      	sbcs	r2, r1
   15bf2:	2100      	movs	r1, #0
   15bf4:	4317      	orrs	r7, r2
   15bf6:	e692      	b.n	1591e <__aeabi_dsub+0x1be>
   15bf8:	2e00      	cmp	r6, #0
   15bfa:	d114      	bne.n	15c26 <__aeabi_dsub+0x4c6>
   15bfc:	0026      	movs	r6, r4
   15bfe:	4650      	mov	r0, sl
   15c00:	4306      	orrs	r6, r0
   15c02:	d062      	beq.n	15cca <__aeabi_dsub+0x56a>
   15c04:	43db      	mvns	r3, r3
   15c06:	2b00      	cmp	r3, #0
   15c08:	d15c      	bne.n	15cc4 <__aeabi_dsub+0x564>
   15c0a:	1887      	adds	r7, r0, r2
   15c0c:	4297      	cmp	r7, r2
   15c0e:	4192      	sbcs	r2, r2
   15c10:	1864      	adds	r4, r4, r1
   15c12:	4252      	negs	r2, r2
   15c14:	18a4      	adds	r4, r4, r2
   15c16:	4666      	mov	r6, ip
   15c18:	e687      	b.n	1592a <__aeabi_dsub+0x1ca>
   15c1a:	4650      	mov	r0, sl
   15c1c:	4320      	orrs	r0, r4
   15c1e:	1e44      	subs	r4, r0, #1
   15c20:	41a0      	sbcs	r0, r4
   15c22:	2400      	movs	r4, #0
   15c24:	e760      	b.n	15ae8 <__aeabi_dsub+0x388>
   15c26:	4e57      	ldr	r6, [pc, #348]	; (15d84 <__aeabi_dsub+0x624>)
   15c28:	45b4      	cmp	ip, r6
   15c2a:	d04e      	beq.n	15cca <__aeabi_dsub+0x56a>
   15c2c:	2680      	movs	r6, #128	; 0x80
   15c2e:	0436      	lsls	r6, r6, #16
   15c30:	425b      	negs	r3, r3
   15c32:	4334      	orrs	r4, r6
   15c34:	2b38      	cmp	r3, #56	; 0x38
   15c36:	dd00      	ble.n	15c3a <__aeabi_dsub+0x4da>
   15c38:	e07f      	b.n	15d3a <__aeabi_dsub+0x5da>
   15c3a:	2b1f      	cmp	r3, #31
   15c3c:	dd00      	ble.n	15c40 <__aeabi_dsub+0x4e0>
   15c3e:	e08b      	b.n	15d58 <__aeabi_dsub+0x5f8>
   15c40:	2620      	movs	r6, #32
   15c42:	0027      	movs	r7, r4
   15c44:	4650      	mov	r0, sl
   15c46:	1af6      	subs	r6, r6, r3
   15c48:	40b7      	lsls	r7, r6
   15c4a:	40d8      	lsrs	r0, r3
   15c4c:	4307      	orrs	r7, r0
   15c4e:	4650      	mov	r0, sl
   15c50:	40b0      	lsls	r0, r6
   15c52:	1e46      	subs	r6, r0, #1
   15c54:	41b0      	sbcs	r0, r6
   15c56:	4307      	orrs	r7, r0
   15c58:	40dc      	lsrs	r4, r3
   15c5a:	18bf      	adds	r7, r7, r2
   15c5c:	e7d6      	b.n	15c0c <__aeabi_dsub+0x4ac>
   15c5e:	000d      	movs	r5, r1
   15c60:	4315      	orrs	r5, r2
   15c62:	d100      	bne.n	15c66 <__aeabi_dsub+0x506>
   15c64:	e602      	b.n	1586c <__aeabi_dsub+0x10c>
   15c66:	4650      	mov	r0, sl
   15c68:	1a80      	subs	r0, r0, r2
   15c6a:	4582      	cmp	sl, r0
   15c6c:	41bf      	sbcs	r7, r7
   15c6e:	1a65      	subs	r5, r4, r1
   15c70:	427f      	negs	r7, r7
   15c72:	1bed      	subs	r5, r5, r7
   15c74:	4684      	mov	ip, r0
   15c76:	0228      	lsls	r0, r5, #8
   15c78:	d400      	bmi.n	15c7c <__aeabi_dsub+0x51c>
   15c7a:	e68d      	b.n	15998 <__aeabi_dsub+0x238>
   15c7c:	4650      	mov	r0, sl
   15c7e:	1a17      	subs	r7, r2, r0
   15c80:	42ba      	cmp	r2, r7
   15c82:	4192      	sbcs	r2, r2
   15c84:	1b0c      	subs	r4, r1, r4
   15c86:	4252      	negs	r2, r2
   15c88:	1aa4      	subs	r4, r4, r2
   15c8a:	4698      	mov	r8, r3
   15c8c:	e5ee      	b.n	1586c <__aeabi_dsub+0x10c>
   15c8e:	000d      	movs	r5, r1
   15c90:	4315      	orrs	r5, r2
   15c92:	d100      	bne.n	15c96 <__aeabi_dsub+0x536>
   15c94:	e76b      	b.n	15b6e <__aeabi_dsub+0x40e>
   15c96:	4650      	mov	r0, sl
   15c98:	0767      	lsls	r7, r4, #29
   15c9a:	08c0      	lsrs	r0, r0, #3
   15c9c:	4307      	orrs	r7, r0
   15c9e:	2080      	movs	r0, #128	; 0x80
   15ca0:	08e4      	lsrs	r4, r4, #3
   15ca2:	0300      	lsls	r0, r0, #12
   15ca4:	4204      	tst	r4, r0
   15ca6:	d007      	beq.n	15cb8 <__aeabi_dsub+0x558>
   15ca8:	08cd      	lsrs	r5, r1, #3
   15caa:	4205      	tst	r5, r0
   15cac:	d104      	bne.n	15cb8 <__aeabi_dsub+0x558>
   15cae:	002c      	movs	r4, r5
   15cb0:	4698      	mov	r8, r3
   15cb2:	08d7      	lsrs	r7, r2, #3
   15cb4:	0749      	lsls	r1, r1, #29
   15cb6:	430f      	orrs	r7, r1
   15cb8:	0f7b      	lsrs	r3, r7, #29
   15cba:	00e4      	lsls	r4, r4, #3
   15cbc:	431c      	orrs	r4, r3
   15cbe:	00ff      	lsls	r7, r7, #3
   15cc0:	4e30      	ldr	r6, [pc, #192]	; (15d84 <__aeabi_dsub+0x624>)
   15cc2:	e5d3      	b.n	1586c <__aeabi_dsub+0x10c>
   15cc4:	4e2f      	ldr	r6, [pc, #188]	; (15d84 <__aeabi_dsub+0x624>)
   15cc6:	45b4      	cmp	ip, r6
   15cc8:	d1b4      	bne.n	15c34 <__aeabi_dsub+0x4d4>
   15cca:	000c      	movs	r4, r1
   15ccc:	0017      	movs	r7, r2
   15cce:	4666      	mov	r6, ip
   15cd0:	e5cc      	b.n	1586c <__aeabi_dsub+0x10c>
   15cd2:	2700      	movs	r7, #0
   15cd4:	2400      	movs	r4, #0
   15cd6:	e5e8      	b.n	158aa <__aeabi_dsub+0x14a>
   15cd8:	2b00      	cmp	r3, #0
   15cda:	d039      	beq.n	15d50 <__aeabi_dsub+0x5f0>
   15cdc:	000b      	movs	r3, r1
   15cde:	4313      	orrs	r3, r2
   15ce0:	d100      	bne.n	15ce4 <__aeabi_dsub+0x584>
   15ce2:	e744      	b.n	15b6e <__aeabi_dsub+0x40e>
   15ce4:	08c0      	lsrs	r0, r0, #3
   15ce6:	0767      	lsls	r7, r4, #29
   15ce8:	4307      	orrs	r7, r0
   15cea:	2080      	movs	r0, #128	; 0x80
   15cec:	08e4      	lsrs	r4, r4, #3
   15cee:	0300      	lsls	r0, r0, #12
   15cf0:	4204      	tst	r4, r0
   15cf2:	d0e1      	beq.n	15cb8 <__aeabi_dsub+0x558>
   15cf4:	08cb      	lsrs	r3, r1, #3
   15cf6:	4203      	tst	r3, r0
   15cf8:	d1de      	bne.n	15cb8 <__aeabi_dsub+0x558>
   15cfa:	08d7      	lsrs	r7, r2, #3
   15cfc:	0749      	lsls	r1, r1, #29
   15cfe:	430f      	orrs	r7, r1
   15d00:	001c      	movs	r4, r3
   15d02:	e7d9      	b.n	15cb8 <__aeabi_dsub+0x558>
   15d04:	2100      	movs	r1, #0
   15d06:	e771      	b.n	15bec <__aeabi_dsub+0x48c>
   15d08:	2500      	movs	r5, #0
   15d0a:	2700      	movs	r7, #0
   15d0c:	e5e9      	b.n	158e2 <__aeabi_dsub+0x182>
   15d0e:	002e      	movs	r6, r5
   15d10:	0027      	movs	r7, r4
   15d12:	3e20      	subs	r6, #32
   15d14:	40f7      	lsrs	r7, r6
   15d16:	2d20      	cmp	r5, #32
   15d18:	d02f      	beq.n	15d7a <__aeabi_dsub+0x61a>
   15d1a:	2640      	movs	r6, #64	; 0x40
   15d1c:	1b75      	subs	r5, r6, r5
   15d1e:	40ac      	lsls	r4, r5
   15d20:	4650      	mov	r0, sl
   15d22:	4320      	orrs	r0, r4
   15d24:	1e44      	subs	r4, r0, #1
   15d26:	41a0      	sbcs	r0, r4
   15d28:	2400      	movs	r4, #0
   15d2a:	4338      	orrs	r0, r7
   15d2c:	e6dc      	b.n	15ae8 <__aeabi_dsub+0x388>
   15d2e:	2480      	movs	r4, #128	; 0x80
   15d30:	2500      	movs	r5, #0
   15d32:	0324      	lsls	r4, r4, #12
   15d34:	4e13      	ldr	r6, [pc, #76]	; (15d84 <__aeabi_dsub+0x624>)
   15d36:	2700      	movs	r7, #0
   15d38:	e5d3      	b.n	158e2 <__aeabi_dsub+0x182>
   15d3a:	4650      	mov	r0, sl
   15d3c:	4320      	orrs	r0, r4
   15d3e:	0007      	movs	r7, r0
   15d40:	1e78      	subs	r0, r7, #1
   15d42:	4187      	sbcs	r7, r0
   15d44:	2400      	movs	r4, #0
   15d46:	18bf      	adds	r7, r7, r2
   15d48:	e760      	b.n	15c0c <__aeabi_dsub+0x4ac>
   15d4a:	000c      	movs	r4, r1
   15d4c:	0017      	movs	r7, r2
   15d4e:	e58d      	b.n	1586c <__aeabi_dsub+0x10c>
   15d50:	000c      	movs	r4, r1
   15d52:	0017      	movs	r7, r2
   15d54:	4e0b      	ldr	r6, [pc, #44]	; (15d84 <__aeabi_dsub+0x624>)
   15d56:	e589      	b.n	1586c <__aeabi_dsub+0x10c>
   15d58:	001e      	movs	r6, r3
   15d5a:	0027      	movs	r7, r4
   15d5c:	3e20      	subs	r6, #32
   15d5e:	40f7      	lsrs	r7, r6
   15d60:	2b20      	cmp	r3, #32
   15d62:	d00c      	beq.n	15d7e <__aeabi_dsub+0x61e>
   15d64:	2640      	movs	r6, #64	; 0x40
   15d66:	1af3      	subs	r3, r6, r3
   15d68:	409c      	lsls	r4, r3
   15d6a:	4650      	mov	r0, sl
   15d6c:	4320      	orrs	r0, r4
   15d6e:	1e44      	subs	r4, r0, #1
   15d70:	41a0      	sbcs	r0, r4
   15d72:	4307      	orrs	r7, r0
   15d74:	2400      	movs	r4, #0
   15d76:	18bf      	adds	r7, r7, r2
   15d78:	e748      	b.n	15c0c <__aeabi_dsub+0x4ac>
   15d7a:	2400      	movs	r4, #0
   15d7c:	e7d0      	b.n	15d20 <__aeabi_dsub+0x5c0>
   15d7e:	2400      	movs	r4, #0
   15d80:	e7f3      	b.n	15d6a <__aeabi_dsub+0x60a>
   15d82:	46c0      	nop			; (mov r8, r8)
   15d84:	000007ff 	.word	0x000007ff
   15d88:	ff7fffff 	.word	0xff7fffff

00015d8c <__aeabi_d2iz>:
   15d8c:	b530      	push	{r4, r5, lr}
   15d8e:	4d13      	ldr	r5, [pc, #76]	; (15ddc <__aeabi_d2iz+0x50>)
   15d90:	030a      	lsls	r2, r1, #12
   15d92:	004b      	lsls	r3, r1, #1
   15d94:	0b12      	lsrs	r2, r2, #12
   15d96:	0d5b      	lsrs	r3, r3, #21
   15d98:	0fc9      	lsrs	r1, r1, #31
   15d9a:	2400      	movs	r4, #0
   15d9c:	42ab      	cmp	r3, r5
   15d9e:	dd10      	ble.n	15dc2 <__aeabi_d2iz+0x36>
   15da0:	4c0f      	ldr	r4, [pc, #60]	; (15de0 <__aeabi_d2iz+0x54>)
   15da2:	42a3      	cmp	r3, r4
   15da4:	dc0f      	bgt.n	15dc6 <__aeabi_d2iz+0x3a>
   15da6:	2480      	movs	r4, #128	; 0x80
   15da8:	4d0e      	ldr	r5, [pc, #56]	; (15de4 <__aeabi_d2iz+0x58>)
   15daa:	0364      	lsls	r4, r4, #13
   15dac:	4322      	orrs	r2, r4
   15dae:	1aed      	subs	r5, r5, r3
   15db0:	2d1f      	cmp	r5, #31
   15db2:	dd0b      	ble.n	15dcc <__aeabi_d2iz+0x40>
   15db4:	480c      	ldr	r0, [pc, #48]	; (15de8 <__aeabi_d2iz+0x5c>)
   15db6:	1ac3      	subs	r3, r0, r3
   15db8:	40da      	lsrs	r2, r3
   15dba:	4254      	negs	r4, r2
   15dbc:	2900      	cmp	r1, #0
   15dbe:	d100      	bne.n	15dc2 <__aeabi_d2iz+0x36>
   15dc0:	0014      	movs	r4, r2
   15dc2:	0020      	movs	r0, r4
   15dc4:	bd30      	pop	{r4, r5, pc}
   15dc6:	4b09      	ldr	r3, [pc, #36]	; (15dec <__aeabi_d2iz+0x60>)
   15dc8:	18cc      	adds	r4, r1, r3
   15dca:	e7fa      	b.n	15dc2 <__aeabi_d2iz+0x36>
   15dcc:	4c08      	ldr	r4, [pc, #32]	; (15df0 <__aeabi_d2iz+0x64>)
   15dce:	40e8      	lsrs	r0, r5
   15dd0:	46a4      	mov	ip, r4
   15dd2:	4463      	add	r3, ip
   15dd4:	409a      	lsls	r2, r3
   15dd6:	4302      	orrs	r2, r0
   15dd8:	e7ef      	b.n	15dba <__aeabi_d2iz+0x2e>
   15dda:	46c0      	nop			; (mov r8, r8)
   15ddc:	000003fe 	.word	0x000003fe
   15de0:	0000041d 	.word	0x0000041d
   15de4:	00000433 	.word	0x00000433
   15de8:	00000413 	.word	0x00000413
   15dec:	7fffffff 	.word	0x7fffffff
   15df0:	fffffbed 	.word	0xfffffbed

00015df4 <__aeabi_i2d>:
   15df4:	b570      	push	{r4, r5, r6, lr}
   15df6:	2800      	cmp	r0, #0
   15df8:	d030      	beq.n	15e5c <__aeabi_i2d+0x68>
   15dfa:	17c3      	asrs	r3, r0, #31
   15dfc:	18c4      	adds	r4, r0, r3
   15dfe:	405c      	eors	r4, r3
   15e00:	0fc5      	lsrs	r5, r0, #31
   15e02:	0020      	movs	r0, r4
   15e04:	f000 f94c 	bl	160a0 <__clzsi2>
   15e08:	4b17      	ldr	r3, [pc, #92]	; (15e68 <__aeabi_i2d+0x74>)
   15e0a:	4a18      	ldr	r2, [pc, #96]	; (15e6c <__aeabi_i2d+0x78>)
   15e0c:	1a1b      	subs	r3, r3, r0
   15e0e:	1ad2      	subs	r2, r2, r3
   15e10:	2a1f      	cmp	r2, #31
   15e12:	dd18      	ble.n	15e46 <__aeabi_i2d+0x52>
   15e14:	4a16      	ldr	r2, [pc, #88]	; (15e70 <__aeabi_i2d+0x7c>)
   15e16:	1ad2      	subs	r2, r2, r3
   15e18:	4094      	lsls	r4, r2
   15e1a:	2200      	movs	r2, #0
   15e1c:	0324      	lsls	r4, r4, #12
   15e1e:	055b      	lsls	r3, r3, #21
   15e20:	0b24      	lsrs	r4, r4, #12
   15e22:	0d5b      	lsrs	r3, r3, #21
   15e24:	2100      	movs	r1, #0
   15e26:	0010      	movs	r0, r2
   15e28:	0324      	lsls	r4, r4, #12
   15e2a:	0d0a      	lsrs	r2, r1, #20
   15e2c:	0b24      	lsrs	r4, r4, #12
   15e2e:	0512      	lsls	r2, r2, #20
   15e30:	4322      	orrs	r2, r4
   15e32:	4c10      	ldr	r4, [pc, #64]	; (15e74 <__aeabi_i2d+0x80>)
   15e34:	051b      	lsls	r3, r3, #20
   15e36:	4022      	ands	r2, r4
   15e38:	4313      	orrs	r3, r2
   15e3a:	005b      	lsls	r3, r3, #1
   15e3c:	07ed      	lsls	r5, r5, #31
   15e3e:	085b      	lsrs	r3, r3, #1
   15e40:	432b      	orrs	r3, r5
   15e42:	0019      	movs	r1, r3
   15e44:	bd70      	pop	{r4, r5, r6, pc}
   15e46:	0021      	movs	r1, r4
   15e48:	4091      	lsls	r1, r2
   15e4a:	000a      	movs	r2, r1
   15e4c:	210b      	movs	r1, #11
   15e4e:	1a08      	subs	r0, r1, r0
   15e50:	40c4      	lsrs	r4, r0
   15e52:	055b      	lsls	r3, r3, #21
   15e54:	0324      	lsls	r4, r4, #12
   15e56:	0b24      	lsrs	r4, r4, #12
   15e58:	0d5b      	lsrs	r3, r3, #21
   15e5a:	e7e3      	b.n	15e24 <__aeabi_i2d+0x30>
   15e5c:	2500      	movs	r5, #0
   15e5e:	2300      	movs	r3, #0
   15e60:	2400      	movs	r4, #0
   15e62:	2200      	movs	r2, #0
   15e64:	e7de      	b.n	15e24 <__aeabi_i2d+0x30>
   15e66:	46c0      	nop			; (mov r8, r8)
   15e68:	0000041e 	.word	0x0000041e
   15e6c:	00000433 	.word	0x00000433
   15e70:	00000413 	.word	0x00000413
   15e74:	800fffff 	.word	0x800fffff

00015e78 <__aeabi_ui2d>:
   15e78:	b510      	push	{r4, lr}
   15e7a:	1e04      	subs	r4, r0, #0
   15e7c:	d028      	beq.n	15ed0 <__aeabi_ui2d+0x58>
   15e7e:	f000 f90f 	bl	160a0 <__clzsi2>
   15e82:	4b15      	ldr	r3, [pc, #84]	; (15ed8 <__aeabi_ui2d+0x60>)
   15e84:	4a15      	ldr	r2, [pc, #84]	; (15edc <__aeabi_ui2d+0x64>)
   15e86:	1a1b      	subs	r3, r3, r0
   15e88:	1ad2      	subs	r2, r2, r3
   15e8a:	2a1f      	cmp	r2, #31
   15e8c:	dd15      	ble.n	15eba <__aeabi_ui2d+0x42>
   15e8e:	4a14      	ldr	r2, [pc, #80]	; (15ee0 <__aeabi_ui2d+0x68>)
   15e90:	1ad2      	subs	r2, r2, r3
   15e92:	4094      	lsls	r4, r2
   15e94:	2200      	movs	r2, #0
   15e96:	0324      	lsls	r4, r4, #12
   15e98:	055b      	lsls	r3, r3, #21
   15e9a:	0b24      	lsrs	r4, r4, #12
   15e9c:	0d5b      	lsrs	r3, r3, #21
   15e9e:	2100      	movs	r1, #0
   15ea0:	0010      	movs	r0, r2
   15ea2:	0324      	lsls	r4, r4, #12
   15ea4:	0d0a      	lsrs	r2, r1, #20
   15ea6:	0b24      	lsrs	r4, r4, #12
   15ea8:	0512      	lsls	r2, r2, #20
   15eaa:	4322      	orrs	r2, r4
   15eac:	4c0d      	ldr	r4, [pc, #52]	; (15ee4 <__aeabi_ui2d+0x6c>)
   15eae:	051b      	lsls	r3, r3, #20
   15eb0:	4022      	ands	r2, r4
   15eb2:	4313      	orrs	r3, r2
   15eb4:	005b      	lsls	r3, r3, #1
   15eb6:	0859      	lsrs	r1, r3, #1
   15eb8:	bd10      	pop	{r4, pc}
   15eba:	0021      	movs	r1, r4
   15ebc:	4091      	lsls	r1, r2
   15ebe:	000a      	movs	r2, r1
   15ec0:	210b      	movs	r1, #11
   15ec2:	1a08      	subs	r0, r1, r0
   15ec4:	40c4      	lsrs	r4, r0
   15ec6:	055b      	lsls	r3, r3, #21
   15ec8:	0324      	lsls	r4, r4, #12
   15eca:	0b24      	lsrs	r4, r4, #12
   15ecc:	0d5b      	lsrs	r3, r3, #21
   15ece:	e7e6      	b.n	15e9e <__aeabi_ui2d+0x26>
   15ed0:	2300      	movs	r3, #0
   15ed2:	2400      	movs	r4, #0
   15ed4:	2200      	movs	r2, #0
   15ed6:	e7e2      	b.n	15e9e <__aeabi_ui2d+0x26>
   15ed8:	0000041e 	.word	0x0000041e
   15edc:	00000433 	.word	0x00000433
   15ee0:	00000413 	.word	0x00000413
   15ee4:	800fffff 	.word	0x800fffff

00015ee8 <__aeabi_f2d>:
   15ee8:	0041      	lsls	r1, r0, #1
   15eea:	0e09      	lsrs	r1, r1, #24
   15eec:	1c4b      	adds	r3, r1, #1
   15eee:	b570      	push	{r4, r5, r6, lr}
   15ef0:	b2db      	uxtb	r3, r3
   15ef2:	0246      	lsls	r6, r0, #9
   15ef4:	0a75      	lsrs	r5, r6, #9
   15ef6:	0fc4      	lsrs	r4, r0, #31
   15ef8:	2b01      	cmp	r3, #1
   15efa:	dd14      	ble.n	15f26 <__aeabi_f2d+0x3e>
   15efc:	23e0      	movs	r3, #224	; 0xe0
   15efe:	009b      	lsls	r3, r3, #2
   15f00:	076d      	lsls	r5, r5, #29
   15f02:	0b36      	lsrs	r6, r6, #12
   15f04:	18cb      	adds	r3, r1, r3
   15f06:	2100      	movs	r1, #0
   15f08:	0d0a      	lsrs	r2, r1, #20
   15f0a:	0028      	movs	r0, r5
   15f0c:	0512      	lsls	r2, r2, #20
   15f0e:	4d1c      	ldr	r5, [pc, #112]	; (15f80 <__aeabi_f2d+0x98>)
   15f10:	4332      	orrs	r2, r6
   15f12:	055b      	lsls	r3, r3, #21
   15f14:	402a      	ands	r2, r5
   15f16:	085b      	lsrs	r3, r3, #1
   15f18:	4313      	orrs	r3, r2
   15f1a:	005b      	lsls	r3, r3, #1
   15f1c:	07e4      	lsls	r4, r4, #31
   15f1e:	085b      	lsrs	r3, r3, #1
   15f20:	4323      	orrs	r3, r4
   15f22:	0019      	movs	r1, r3
   15f24:	bd70      	pop	{r4, r5, r6, pc}
   15f26:	2900      	cmp	r1, #0
   15f28:	d114      	bne.n	15f54 <__aeabi_f2d+0x6c>
   15f2a:	2d00      	cmp	r5, #0
   15f2c:	d01e      	beq.n	15f6c <__aeabi_f2d+0x84>
   15f2e:	0028      	movs	r0, r5
   15f30:	f000 f8b6 	bl	160a0 <__clzsi2>
   15f34:	280a      	cmp	r0, #10
   15f36:	dc1c      	bgt.n	15f72 <__aeabi_f2d+0x8a>
   15f38:	230b      	movs	r3, #11
   15f3a:	002a      	movs	r2, r5
   15f3c:	1a1b      	subs	r3, r3, r0
   15f3e:	40da      	lsrs	r2, r3
   15f40:	0003      	movs	r3, r0
   15f42:	3315      	adds	r3, #21
   15f44:	409d      	lsls	r5, r3
   15f46:	4b0f      	ldr	r3, [pc, #60]	; (15f84 <__aeabi_f2d+0x9c>)
   15f48:	0312      	lsls	r2, r2, #12
   15f4a:	1a1b      	subs	r3, r3, r0
   15f4c:	055b      	lsls	r3, r3, #21
   15f4e:	0b16      	lsrs	r6, r2, #12
   15f50:	0d5b      	lsrs	r3, r3, #21
   15f52:	e7d8      	b.n	15f06 <__aeabi_f2d+0x1e>
   15f54:	2d00      	cmp	r5, #0
   15f56:	d006      	beq.n	15f66 <__aeabi_f2d+0x7e>
   15f58:	0b32      	lsrs	r2, r6, #12
   15f5a:	2680      	movs	r6, #128	; 0x80
   15f5c:	0336      	lsls	r6, r6, #12
   15f5e:	076d      	lsls	r5, r5, #29
   15f60:	4316      	orrs	r6, r2
   15f62:	4b09      	ldr	r3, [pc, #36]	; (15f88 <__aeabi_f2d+0xa0>)
   15f64:	e7cf      	b.n	15f06 <__aeabi_f2d+0x1e>
   15f66:	4b08      	ldr	r3, [pc, #32]	; (15f88 <__aeabi_f2d+0xa0>)
   15f68:	2600      	movs	r6, #0
   15f6a:	e7cc      	b.n	15f06 <__aeabi_f2d+0x1e>
   15f6c:	2300      	movs	r3, #0
   15f6e:	2600      	movs	r6, #0
   15f70:	e7c9      	b.n	15f06 <__aeabi_f2d+0x1e>
   15f72:	0003      	movs	r3, r0
   15f74:	002a      	movs	r2, r5
   15f76:	3b0b      	subs	r3, #11
   15f78:	409a      	lsls	r2, r3
   15f7a:	2500      	movs	r5, #0
   15f7c:	e7e3      	b.n	15f46 <__aeabi_f2d+0x5e>
   15f7e:	46c0      	nop			; (mov r8, r8)
   15f80:	800fffff 	.word	0x800fffff
   15f84:	00000389 	.word	0x00000389
   15f88:	000007ff 	.word	0x000007ff

00015f8c <__aeabi_d2f>:
   15f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   15f8e:	004c      	lsls	r4, r1, #1
   15f90:	0d64      	lsrs	r4, r4, #21
   15f92:	030b      	lsls	r3, r1, #12
   15f94:	1c62      	adds	r2, r4, #1
   15f96:	0f45      	lsrs	r5, r0, #29
   15f98:	0a5b      	lsrs	r3, r3, #9
   15f9a:	0552      	lsls	r2, r2, #21
   15f9c:	432b      	orrs	r3, r5
   15f9e:	0fc9      	lsrs	r1, r1, #31
   15fa0:	00c5      	lsls	r5, r0, #3
   15fa2:	0d52      	lsrs	r2, r2, #21
   15fa4:	2a01      	cmp	r2, #1
   15fa6:	dd28      	ble.n	15ffa <__aeabi_d2f+0x6e>
   15fa8:	4a3a      	ldr	r2, [pc, #232]	; (16094 <__aeabi_d2f+0x108>)
   15faa:	18a6      	adds	r6, r4, r2
   15fac:	2efe      	cmp	r6, #254	; 0xfe
   15fae:	dc1b      	bgt.n	15fe8 <__aeabi_d2f+0x5c>
   15fb0:	2e00      	cmp	r6, #0
   15fb2:	dd3e      	ble.n	16032 <__aeabi_d2f+0xa6>
   15fb4:	0180      	lsls	r0, r0, #6
   15fb6:	0002      	movs	r2, r0
   15fb8:	1e50      	subs	r0, r2, #1
   15fba:	4182      	sbcs	r2, r0
   15fbc:	0f6d      	lsrs	r5, r5, #29
   15fbe:	432a      	orrs	r2, r5
   15fc0:	00db      	lsls	r3, r3, #3
   15fc2:	4313      	orrs	r3, r2
   15fc4:	075a      	lsls	r2, r3, #29
   15fc6:	d004      	beq.n	15fd2 <__aeabi_d2f+0x46>
   15fc8:	220f      	movs	r2, #15
   15fca:	401a      	ands	r2, r3
   15fcc:	2a04      	cmp	r2, #4
   15fce:	d000      	beq.n	15fd2 <__aeabi_d2f+0x46>
   15fd0:	3304      	adds	r3, #4
   15fd2:	2280      	movs	r2, #128	; 0x80
   15fd4:	04d2      	lsls	r2, r2, #19
   15fd6:	401a      	ands	r2, r3
   15fd8:	d05a      	beq.n	16090 <__aeabi_d2f+0x104>
   15fda:	3601      	adds	r6, #1
   15fdc:	2eff      	cmp	r6, #255	; 0xff
   15fde:	d003      	beq.n	15fe8 <__aeabi_d2f+0x5c>
   15fe0:	019b      	lsls	r3, r3, #6
   15fe2:	0a5b      	lsrs	r3, r3, #9
   15fe4:	b2f4      	uxtb	r4, r6
   15fe6:	e001      	b.n	15fec <__aeabi_d2f+0x60>
   15fe8:	24ff      	movs	r4, #255	; 0xff
   15fea:	2300      	movs	r3, #0
   15fec:	0258      	lsls	r0, r3, #9
   15fee:	05e4      	lsls	r4, r4, #23
   15ff0:	0a40      	lsrs	r0, r0, #9
   15ff2:	07c9      	lsls	r1, r1, #31
   15ff4:	4320      	orrs	r0, r4
   15ff6:	4308      	orrs	r0, r1
   15ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15ffa:	2c00      	cmp	r4, #0
   15ffc:	d007      	beq.n	1600e <__aeabi_d2f+0x82>
   15ffe:	431d      	orrs	r5, r3
   16000:	d0f2      	beq.n	15fe8 <__aeabi_d2f+0x5c>
   16002:	2080      	movs	r0, #128	; 0x80
   16004:	00db      	lsls	r3, r3, #3
   16006:	0480      	lsls	r0, r0, #18
   16008:	4303      	orrs	r3, r0
   1600a:	26ff      	movs	r6, #255	; 0xff
   1600c:	e7da      	b.n	15fc4 <__aeabi_d2f+0x38>
   1600e:	432b      	orrs	r3, r5
   16010:	d003      	beq.n	1601a <__aeabi_d2f+0x8e>
   16012:	2305      	movs	r3, #5
   16014:	08db      	lsrs	r3, r3, #3
   16016:	2cff      	cmp	r4, #255	; 0xff
   16018:	d003      	beq.n	16022 <__aeabi_d2f+0x96>
   1601a:	025b      	lsls	r3, r3, #9
   1601c:	0a5b      	lsrs	r3, r3, #9
   1601e:	b2e4      	uxtb	r4, r4
   16020:	e7e4      	b.n	15fec <__aeabi_d2f+0x60>
   16022:	2b00      	cmp	r3, #0
   16024:	d032      	beq.n	1608c <__aeabi_d2f+0x100>
   16026:	2080      	movs	r0, #128	; 0x80
   16028:	03c0      	lsls	r0, r0, #15
   1602a:	4303      	orrs	r3, r0
   1602c:	025b      	lsls	r3, r3, #9
   1602e:	0a5b      	lsrs	r3, r3, #9
   16030:	e7dc      	b.n	15fec <__aeabi_d2f+0x60>
   16032:	0032      	movs	r2, r6
   16034:	3217      	adds	r2, #23
   16036:	db14      	blt.n	16062 <__aeabi_d2f+0xd6>
   16038:	2280      	movs	r2, #128	; 0x80
   1603a:	271e      	movs	r7, #30
   1603c:	0412      	lsls	r2, r2, #16
   1603e:	4313      	orrs	r3, r2
   16040:	1bbf      	subs	r7, r7, r6
   16042:	2f1f      	cmp	r7, #31
   16044:	dc0f      	bgt.n	16066 <__aeabi_d2f+0xda>
   16046:	4a14      	ldr	r2, [pc, #80]	; (16098 <__aeabi_d2f+0x10c>)
   16048:	4694      	mov	ip, r2
   1604a:	4464      	add	r4, ip
   1604c:	002a      	movs	r2, r5
   1604e:	40a5      	lsls	r5, r4
   16050:	002e      	movs	r6, r5
   16052:	40a3      	lsls	r3, r4
   16054:	1e75      	subs	r5, r6, #1
   16056:	41ae      	sbcs	r6, r5
   16058:	40fa      	lsrs	r2, r7
   1605a:	4333      	orrs	r3, r6
   1605c:	4313      	orrs	r3, r2
   1605e:	2600      	movs	r6, #0
   16060:	e7b0      	b.n	15fc4 <__aeabi_d2f+0x38>
   16062:	2400      	movs	r4, #0
   16064:	e7d5      	b.n	16012 <__aeabi_d2f+0x86>
   16066:	2202      	movs	r2, #2
   16068:	4252      	negs	r2, r2
   1606a:	1b96      	subs	r6, r2, r6
   1606c:	001a      	movs	r2, r3
   1606e:	40f2      	lsrs	r2, r6
   16070:	2f20      	cmp	r7, #32
   16072:	d009      	beq.n	16088 <__aeabi_d2f+0xfc>
   16074:	4809      	ldr	r0, [pc, #36]	; (1609c <__aeabi_d2f+0x110>)
   16076:	4684      	mov	ip, r0
   16078:	4464      	add	r4, ip
   1607a:	40a3      	lsls	r3, r4
   1607c:	432b      	orrs	r3, r5
   1607e:	1e5d      	subs	r5, r3, #1
   16080:	41ab      	sbcs	r3, r5
   16082:	2600      	movs	r6, #0
   16084:	4313      	orrs	r3, r2
   16086:	e79d      	b.n	15fc4 <__aeabi_d2f+0x38>
   16088:	2300      	movs	r3, #0
   1608a:	e7f7      	b.n	1607c <__aeabi_d2f+0xf0>
   1608c:	2300      	movs	r3, #0
   1608e:	e7ad      	b.n	15fec <__aeabi_d2f+0x60>
   16090:	0034      	movs	r4, r6
   16092:	e7bf      	b.n	16014 <__aeabi_d2f+0x88>
   16094:	fffffc80 	.word	0xfffffc80
   16098:	fffffc82 	.word	0xfffffc82
   1609c:	fffffca2 	.word	0xfffffca2

000160a0 <__clzsi2>:
   160a0:	211c      	movs	r1, #28
   160a2:	2301      	movs	r3, #1
   160a4:	041b      	lsls	r3, r3, #16
   160a6:	4298      	cmp	r0, r3
   160a8:	d301      	bcc.n	160ae <__clzsi2+0xe>
   160aa:	0c00      	lsrs	r0, r0, #16
   160ac:	3910      	subs	r1, #16
   160ae:	0a1b      	lsrs	r3, r3, #8
   160b0:	4298      	cmp	r0, r3
   160b2:	d301      	bcc.n	160b8 <__clzsi2+0x18>
   160b4:	0a00      	lsrs	r0, r0, #8
   160b6:	3908      	subs	r1, #8
   160b8:	091b      	lsrs	r3, r3, #4
   160ba:	4298      	cmp	r0, r3
   160bc:	d301      	bcc.n	160c2 <__clzsi2+0x22>
   160be:	0900      	lsrs	r0, r0, #4
   160c0:	3904      	subs	r1, #4
   160c2:	a202      	add	r2, pc, #8	; (adr r2, 160cc <__clzsi2+0x2c>)
   160c4:	5c10      	ldrb	r0, [r2, r0]
   160c6:	1840      	adds	r0, r0, r1
   160c8:	4770      	bx	lr
   160ca:	46c0      	nop			; (mov r8, r8)
   160cc:	02020304 	.word	0x02020304
   160d0:	01010101 	.word	0x01010101
	...

000160dc <__clzdi2>:
   160dc:	b510      	push	{r4, lr}
   160de:	2900      	cmp	r1, #0
   160e0:	d103      	bne.n	160ea <__clzdi2+0xe>
   160e2:	f7ff ffdd 	bl	160a0 <__clzsi2>
   160e6:	3020      	adds	r0, #32
   160e8:	e002      	b.n	160f0 <__clzdi2+0x14>
   160ea:	1c08      	adds	r0, r1, #0
   160ec:	f7ff ffd8 	bl	160a0 <__clzsi2>
   160f0:	bd10      	pop	{r4, pc}
   160f2:	46c0      	nop			; (mov r8, r8)

000160f4 <__assert_func>:
   160f4:	b530      	push	{r4, r5, lr}
   160f6:	001c      	movs	r4, r3
   160f8:	4b09      	ldr	r3, [pc, #36]	; (16120 <__assert_func+0x2c>)
   160fa:	0005      	movs	r5, r0
   160fc:	681b      	ldr	r3, [r3, #0]
   160fe:	b085      	sub	sp, #20
   16100:	68d8      	ldr	r0, [r3, #12]
   16102:	4b08      	ldr	r3, [pc, #32]	; (16124 <__assert_func+0x30>)
   16104:	2a00      	cmp	r2, #0
   16106:	d101      	bne.n	1610c <__assert_func+0x18>
   16108:	4b07      	ldr	r3, [pc, #28]	; (16128 <__assert_func+0x34>)
   1610a:	001a      	movs	r2, r3
   1610c:	9202      	str	r2, [sp, #8]
   1610e:	9301      	str	r3, [sp, #4]
   16110:	9100      	str	r1, [sp, #0]
   16112:	002b      	movs	r3, r5
   16114:	0022      	movs	r2, r4
   16116:	4905      	ldr	r1, [pc, #20]	; (1612c <__assert_func+0x38>)
   16118:	f000 f80a 	bl	16130 <fiprintf>
   1611c:	f000 fdac 	bl	16c78 <abort>
   16120:	20000020 	.word	0x20000020
   16124:	00018460 	.word	0x00018460
   16128:	0001849b 	.word	0x0001849b
   1612c:	0001846d 	.word	0x0001846d

00016130 <fiprintf>:
   16130:	b40e      	push	{r1, r2, r3}
   16132:	b503      	push	{r0, r1, lr}
   16134:	0001      	movs	r1, r0
   16136:	ab03      	add	r3, sp, #12
   16138:	4804      	ldr	r0, [pc, #16]	; (1614c <fiprintf+0x1c>)
   1613a:	cb04      	ldmia	r3!, {r2}
   1613c:	6800      	ldr	r0, [r0, #0]
   1613e:	9301      	str	r3, [sp, #4]
   16140:	f000 f872 	bl	16228 <_vfiprintf_r>
   16144:	b002      	add	sp, #8
   16146:	bc08      	pop	{r3}
   16148:	b003      	add	sp, #12
   1614a:	4718      	bx	r3
   1614c:	20000020 	.word	0x20000020

00016150 <__libc_init_array>:
   16150:	b570      	push	{r4, r5, r6, lr}
   16152:	2600      	movs	r6, #0
   16154:	4d0c      	ldr	r5, [pc, #48]	; (16188 <__libc_init_array+0x38>)
   16156:	4c0d      	ldr	r4, [pc, #52]	; (1618c <__libc_init_array+0x3c>)
   16158:	1b64      	subs	r4, r4, r5
   1615a:	10a4      	asrs	r4, r4, #2
   1615c:	42a6      	cmp	r6, r4
   1615e:	d109      	bne.n	16174 <__libc_init_array+0x24>
   16160:	2600      	movs	r6, #0
   16162:	f002 f9e7 	bl	18534 <_init>
   16166:	4d0a      	ldr	r5, [pc, #40]	; (16190 <__libc_init_array+0x40>)
   16168:	4c0a      	ldr	r4, [pc, #40]	; (16194 <__libc_init_array+0x44>)
   1616a:	1b64      	subs	r4, r4, r5
   1616c:	10a4      	asrs	r4, r4, #2
   1616e:	42a6      	cmp	r6, r4
   16170:	d105      	bne.n	1617e <__libc_init_array+0x2e>
   16172:	bd70      	pop	{r4, r5, r6, pc}
   16174:	00b3      	lsls	r3, r6, #2
   16176:	58eb      	ldr	r3, [r5, r3]
   16178:	4798      	blx	r3
   1617a:	3601      	adds	r6, #1
   1617c:	e7ee      	b.n	1615c <__libc_init_array+0xc>
   1617e:	00b3      	lsls	r3, r6, #2
   16180:	58eb      	ldr	r3, [r5, r3]
   16182:	4798      	blx	r3
   16184:	3601      	adds	r6, #1
   16186:	e7f2      	b.n	1616e <__libc_init_array+0x1e>
   16188:	00018540 	.word	0x00018540
   1618c:	00018540 	.word	0x00018540
   16190:	00018540 	.word	0x00018540
   16194:	00018544 	.word	0x00018544

00016198 <memcmp>:
   16198:	b530      	push	{r4, r5, lr}
   1619a:	2400      	movs	r4, #0
   1619c:	42a2      	cmp	r2, r4
   1619e:	d101      	bne.n	161a4 <memcmp+0xc>
   161a0:	2000      	movs	r0, #0
   161a2:	e005      	b.n	161b0 <memcmp+0x18>
   161a4:	5d03      	ldrb	r3, [r0, r4]
   161a6:	1c65      	adds	r5, r4, #1
   161a8:	5d0c      	ldrb	r4, [r1, r4]
   161aa:	42a3      	cmp	r3, r4
   161ac:	d001      	beq.n	161b2 <memcmp+0x1a>
   161ae:	1b18      	subs	r0, r3, r4
   161b0:	bd30      	pop	{r4, r5, pc}
   161b2:	002c      	movs	r4, r5
   161b4:	e7f2      	b.n	1619c <memcmp+0x4>

000161b6 <memcpy>:
   161b6:	2300      	movs	r3, #0
   161b8:	b510      	push	{r4, lr}
   161ba:	429a      	cmp	r2, r3
   161bc:	d100      	bne.n	161c0 <memcpy+0xa>
   161be:	bd10      	pop	{r4, pc}
   161c0:	5ccc      	ldrb	r4, [r1, r3]
   161c2:	54c4      	strb	r4, [r0, r3]
   161c4:	3301      	adds	r3, #1
   161c6:	e7f8      	b.n	161ba <memcpy+0x4>

000161c8 <memset>:
   161c8:	0003      	movs	r3, r0
   161ca:	1882      	adds	r2, r0, r2
   161cc:	4293      	cmp	r3, r2
   161ce:	d100      	bne.n	161d2 <memset+0xa>
   161d0:	4770      	bx	lr
   161d2:	7019      	strb	r1, [r3, #0]
   161d4:	3301      	adds	r3, #1
   161d6:	e7f9      	b.n	161cc <memset+0x4>

000161d8 <__sfputc_r>:
   161d8:	6893      	ldr	r3, [r2, #8]
   161da:	b510      	push	{r4, lr}
   161dc:	3b01      	subs	r3, #1
   161de:	6093      	str	r3, [r2, #8]
   161e0:	2b00      	cmp	r3, #0
   161e2:	da05      	bge.n	161f0 <__sfputc_r+0x18>
   161e4:	6994      	ldr	r4, [r2, #24]
   161e6:	42a3      	cmp	r3, r4
   161e8:	db08      	blt.n	161fc <__sfputc_r+0x24>
   161ea:	b2cb      	uxtb	r3, r1
   161ec:	2b0a      	cmp	r3, #10
   161ee:	d005      	beq.n	161fc <__sfputc_r+0x24>
   161f0:	6813      	ldr	r3, [r2, #0]
   161f2:	1c58      	adds	r0, r3, #1
   161f4:	6010      	str	r0, [r2, #0]
   161f6:	7019      	strb	r1, [r3, #0]
   161f8:	b2c8      	uxtb	r0, r1
   161fa:	bd10      	pop	{r4, pc}
   161fc:	f000 fc70 	bl	16ae0 <__swbuf_r>
   16200:	e7fb      	b.n	161fa <__sfputc_r+0x22>

00016202 <__sfputs_r>:
   16202:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16204:	0006      	movs	r6, r0
   16206:	000f      	movs	r7, r1
   16208:	0014      	movs	r4, r2
   1620a:	18d5      	adds	r5, r2, r3
   1620c:	42ac      	cmp	r4, r5
   1620e:	d101      	bne.n	16214 <__sfputs_r+0x12>
   16210:	2000      	movs	r0, #0
   16212:	e007      	b.n	16224 <__sfputs_r+0x22>
   16214:	7821      	ldrb	r1, [r4, #0]
   16216:	003a      	movs	r2, r7
   16218:	0030      	movs	r0, r6
   1621a:	f7ff ffdd 	bl	161d8 <__sfputc_r>
   1621e:	3401      	adds	r4, #1
   16220:	1c43      	adds	r3, r0, #1
   16222:	d1f3      	bne.n	1620c <__sfputs_r+0xa>
   16224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16226:	Address 0x00016226 is out of bounds.


00016228 <_vfiprintf_r>:
   16228:	b5f0      	push	{r4, r5, r6, r7, lr}
   1622a:	b09f      	sub	sp, #124	; 0x7c
   1622c:	0006      	movs	r6, r0
   1622e:	000f      	movs	r7, r1
   16230:	0014      	movs	r4, r2
   16232:	9305      	str	r3, [sp, #20]
   16234:	2800      	cmp	r0, #0
   16236:	d004      	beq.n	16242 <_vfiprintf_r+0x1a>
   16238:	6983      	ldr	r3, [r0, #24]
   1623a:	2b00      	cmp	r3, #0
   1623c:	d101      	bne.n	16242 <_vfiprintf_r+0x1a>
   1623e:	f000 fe1b 	bl	16e78 <__sinit>
   16242:	4b7f      	ldr	r3, [pc, #508]	; (16440 <_vfiprintf_r+0x218>)
   16244:	429f      	cmp	r7, r3
   16246:	d15c      	bne.n	16302 <_vfiprintf_r+0xda>
   16248:	6877      	ldr	r7, [r6, #4]
   1624a:	89bb      	ldrh	r3, [r7, #12]
   1624c:	071b      	lsls	r3, r3, #28
   1624e:	d562      	bpl.n	16316 <_vfiprintf_r+0xee>
   16250:	693b      	ldr	r3, [r7, #16]
   16252:	2b00      	cmp	r3, #0
   16254:	d05f      	beq.n	16316 <_vfiprintf_r+0xee>
   16256:	2300      	movs	r3, #0
   16258:	ad06      	add	r5, sp, #24
   1625a:	616b      	str	r3, [r5, #20]
   1625c:	3320      	adds	r3, #32
   1625e:	766b      	strb	r3, [r5, #25]
   16260:	3310      	adds	r3, #16
   16262:	76ab      	strb	r3, [r5, #26]
   16264:	9402      	str	r4, [sp, #8]
   16266:	9c02      	ldr	r4, [sp, #8]
   16268:	7823      	ldrb	r3, [r4, #0]
   1626a:	2b00      	cmp	r3, #0
   1626c:	d15d      	bne.n	1632a <_vfiprintf_r+0x102>
   1626e:	9b02      	ldr	r3, [sp, #8]
   16270:	1ae3      	subs	r3, r4, r3
   16272:	9304      	str	r3, [sp, #16]
   16274:	d00d      	beq.n	16292 <_vfiprintf_r+0x6a>
   16276:	9b04      	ldr	r3, [sp, #16]
   16278:	9a02      	ldr	r2, [sp, #8]
   1627a:	0039      	movs	r1, r7
   1627c:	0030      	movs	r0, r6
   1627e:	f7ff ffc0 	bl	16202 <__sfputs_r>
   16282:	1c43      	adds	r3, r0, #1
   16284:	d100      	bne.n	16288 <_vfiprintf_r+0x60>
   16286:	e0cc      	b.n	16422 <_vfiprintf_r+0x1fa>
   16288:	696a      	ldr	r2, [r5, #20]
   1628a:	9b04      	ldr	r3, [sp, #16]
   1628c:	4694      	mov	ip, r2
   1628e:	4463      	add	r3, ip
   16290:	616b      	str	r3, [r5, #20]
   16292:	7823      	ldrb	r3, [r4, #0]
   16294:	2b00      	cmp	r3, #0
   16296:	d100      	bne.n	1629a <_vfiprintf_r+0x72>
   16298:	e0c3      	b.n	16422 <_vfiprintf_r+0x1fa>
   1629a:	2201      	movs	r2, #1
   1629c:	2300      	movs	r3, #0
   1629e:	4252      	negs	r2, r2
   162a0:	606a      	str	r2, [r5, #4]
   162a2:	a902      	add	r1, sp, #8
   162a4:	3254      	adds	r2, #84	; 0x54
   162a6:	1852      	adds	r2, r2, r1
   162a8:	3401      	adds	r4, #1
   162aa:	602b      	str	r3, [r5, #0]
   162ac:	60eb      	str	r3, [r5, #12]
   162ae:	60ab      	str	r3, [r5, #8]
   162b0:	7013      	strb	r3, [r2, #0]
   162b2:	65ab      	str	r3, [r5, #88]	; 0x58
   162b4:	7821      	ldrb	r1, [r4, #0]
   162b6:	2205      	movs	r2, #5
   162b8:	4862      	ldr	r0, [pc, #392]	; (16444 <_vfiprintf_r+0x21c>)
   162ba:	f000 fee9 	bl	17090 <memchr>
   162be:	1c63      	adds	r3, r4, #1
   162c0:	469c      	mov	ip, r3
   162c2:	2800      	cmp	r0, #0
   162c4:	d135      	bne.n	16332 <_vfiprintf_r+0x10a>
   162c6:	6829      	ldr	r1, [r5, #0]
   162c8:	06cb      	lsls	r3, r1, #27
   162ca:	d504      	bpl.n	162d6 <_vfiprintf_r+0xae>
   162cc:	2353      	movs	r3, #83	; 0x53
   162ce:	aa02      	add	r2, sp, #8
   162d0:	3020      	adds	r0, #32
   162d2:	189b      	adds	r3, r3, r2
   162d4:	7018      	strb	r0, [r3, #0]
   162d6:	070b      	lsls	r3, r1, #28
   162d8:	d504      	bpl.n	162e4 <_vfiprintf_r+0xbc>
   162da:	2353      	movs	r3, #83	; 0x53
   162dc:	202b      	movs	r0, #43	; 0x2b
   162de:	aa02      	add	r2, sp, #8
   162e0:	189b      	adds	r3, r3, r2
   162e2:	7018      	strb	r0, [r3, #0]
   162e4:	7823      	ldrb	r3, [r4, #0]
   162e6:	2b2a      	cmp	r3, #42	; 0x2a
   162e8:	d02c      	beq.n	16344 <_vfiprintf_r+0x11c>
   162ea:	2000      	movs	r0, #0
   162ec:	210a      	movs	r1, #10
   162ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   162f0:	7822      	ldrb	r2, [r4, #0]
   162f2:	3a30      	subs	r2, #48	; 0x30
   162f4:	2a09      	cmp	r2, #9
   162f6:	d800      	bhi.n	162fa <_vfiprintf_r+0xd2>
   162f8:	e06b      	b.n	163d2 <_vfiprintf_r+0x1aa>
   162fa:	2800      	cmp	r0, #0
   162fc:	d02a      	beq.n	16354 <_vfiprintf_r+0x12c>
   162fe:	9309      	str	r3, [sp, #36]	; 0x24
   16300:	e028      	b.n	16354 <_vfiprintf_r+0x12c>
   16302:	4b51      	ldr	r3, [pc, #324]	; (16448 <_vfiprintf_r+0x220>)
   16304:	429f      	cmp	r7, r3
   16306:	d101      	bne.n	1630c <_vfiprintf_r+0xe4>
   16308:	68b7      	ldr	r7, [r6, #8]
   1630a:	e79e      	b.n	1624a <_vfiprintf_r+0x22>
   1630c:	4b4f      	ldr	r3, [pc, #316]	; (1644c <_vfiprintf_r+0x224>)
   1630e:	429f      	cmp	r7, r3
   16310:	d19b      	bne.n	1624a <_vfiprintf_r+0x22>
   16312:	68f7      	ldr	r7, [r6, #12]
   16314:	e799      	b.n	1624a <_vfiprintf_r+0x22>
   16316:	0039      	movs	r1, r7
   16318:	0030      	movs	r0, r6
   1631a:	f000 fc37 	bl	16b8c <__swsetup_r>
   1631e:	2800      	cmp	r0, #0
   16320:	d099      	beq.n	16256 <_vfiprintf_r+0x2e>
   16322:	2001      	movs	r0, #1
   16324:	4240      	negs	r0, r0
   16326:	b01f      	add	sp, #124	; 0x7c
   16328:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1632a:	2b25      	cmp	r3, #37	; 0x25
   1632c:	d09f      	beq.n	1626e <_vfiprintf_r+0x46>
   1632e:	3401      	adds	r4, #1
   16330:	e79a      	b.n	16268 <_vfiprintf_r+0x40>
   16332:	4b44      	ldr	r3, [pc, #272]	; (16444 <_vfiprintf_r+0x21c>)
   16334:	6829      	ldr	r1, [r5, #0]
   16336:	1ac0      	subs	r0, r0, r3
   16338:	2301      	movs	r3, #1
   1633a:	4083      	lsls	r3, r0
   1633c:	430b      	orrs	r3, r1
   1633e:	602b      	str	r3, [r5, #0]
   16340:	4664      	mov	r4, ip
   16342:	e7b7      	b.n	162b4 <_vfiprintf_r+0x8c>
   16344:	9b05      	ldr	r3, [sp, #20]
   16346:	1d18      	adds	r0, r3, #4
   16348:	681b      	ldr	r3, [r3, #0]
   1634a:	9005      	str	r0, [sp, #20]
   1634c:	2b00      	cmp	r3, #0
   1634e:	db3a      	blt.n	163c6 <_vfiprintf_r+0x19e>
   16350:	9309      	str	r3, [sp, #36]	; 0x24
   16352:	4664      	mov	r4, ip
   16354:	7823      	ldrb	r3, [r4, #0]
   16356:	2b2e      	cmp	r3, #46	; 0x2e
   16358:	d10b      	bne.n	16372 <_vfiprintf_r+0x14a>
   1635a:	7863      	ldrb	r3, [r4, #1]
   1635c:	1c62      	adds	r2, r4, #1
   1635e:	2b2a      	cmp	r3, #42	; 0x2a
   16360:	d13f      	bne.n	163e2 <_vfiprintf_r+0x1ba>
   16362:	9b05      	ldr	r3, [sp, #20]
   16364:	3402      	adds	r4, #2
   16366:	1d1a      	adds	r2, r3, #4
   16368:	681b      	ldr	r3, [r3, #0]
   1636a:	9205      	str	r2, [sp, #20]
   1636c:	2b00      	cmp	r3, #0
   1636e:	db35      	blt.n	163dc <_vfiprintf_r+0x1b4>
   16370:	9307      	str	r3, [sp, #28]
   16372:	7821      	ldrb	r1, [r4, #0]
   16374:	2203      	movs	r2, #3
   16376:	4836      	ldr	r0, [pc, #216]	; (16450 <_vfiprintf_r+0x228>)
   16378:	f000 fe8a 	bl	17090 <memchr>
   1637c:	2800      	cmp	r0, #0
   1637e:	d007      	beq.n	16390 <_vfiprintf_r+0x168>
   16380:	4b33      	ldr	r3, [pc, #204]	; (16450 <_vfiprintf_r+0x228>)
   16382:	682a      	ldr	r2, [r5, #0]
   16384:	1ac0      	subs	r0, r0, r3
   16386:	2340      	movs	r3, #64	; 0x40
   16388:	4083      	lsls	r3, r0
   1638a:	4313      	orrs	r3, r2
   1638c:	602b      	str	r3, [r5, #0]
   1638e:	3401      	adds	r4, #1
   16390:	7821      	ldrb	r1, [r4, #0]
   16392:	1c63      	adds	r3, r4, #1
   16394:	2206      	movs	r2, #6
   16396:	482f      	ldr	r0, [pc, #188]	; (16454 <_vfiprintf_r+0x22c>)
   16398:	9302      	str	r3, [sp, #8]
   1639a:	7629      	strb	r1, [r5, #24]
   1639c:	f000 fe78 	bl	17090 <memchr>
   163a0:	2800      	cmp	r0, #0
   163a2:	d044      	beq.n	1642e <_vfiprintf_r+0x206>
   163a4:	4b2c      	ldr	r3, [pc, #176]	; (16458 <_vfiprintf_r+0x230>)
   163a6:	2b00      	cmp	r3, #0
   163a8:	d12f      	bne.n	1640a <_vfiprintf_r+0x1e2>
   163aa:	6829      	ldr	r1, [r5, #0]
   163ac:	9b05      	ldr	r3, [sp, #20]
   163ae:	2207      	movs	r2, #7
   163b0:	05c9      	lsls	r1, r1, #23
   163b2:	d528      	bpl.n	16406 <_vfiprintf_r+0x1de>
   163b4:	189b      	adds	r3, r3, r2
   163b6:	4393      	bics	r3, r2
   163b8:	3308      	adds	r3, #8
   163ba:	9305      	str	r3, [sp, #20]
   163bc:	696b      	ldr	r3, [r5, #20]
   163be:	9a03      	ldr	r2, [sp, #12]
   163c0:	189b      	adds	r3, r3, r2
   163c2:	616b      	str	r3, [r5, #20]
   163c4:	e74f      	b.n	16266 <_vfiprintf_r+0x3e>
   163c6:	425b      	negs	r3, r3
   163c8:	60eb      	str	r3, [r5, #12]
   163ca:	2302      	movs	r3, #2
   163cc:	430b      	orrs	r3, r1
   163ce:	602b      	str	r3, [r5, #0]
   163d0:	e7bf      	b.n	16352 <_vfiprintf_r+0x12a>
   163d2:	434b      	muls	r3, r1
   163d4:	3401      	adds	r4, #1
   163d6:	189b      	adds	r3, r3, r2
   163d8:	2001      	movs	r0, #1
   163da:	e789      	b.n	162f0 <_vfiprintf_r+0xc8>
   163dc:	2301      	movs	r3, #1
   163de:	425b      	negs	r3, r3
   163e0:	e7c6      	b.n	16370 <_vfiprintf_r+0x148>
   163e2:	2300      	movs	r3, #0
   163e4:	0014      	movs	r4, r2
   163e6:	200a      	movs	r0, #10
   163e8:	001a      	movs	r2, r3
   163ea:	606b      	str	r3, [r5, #4]
   163ec:	7821      	ldrb	r1, [r4, #0]
   163ee:	3930      	subs	r1, #48	; 0x30
   163f0:	2909      	cmp	r1, #9
   163f2:	d903      	bls.n	163fc <_vfiprintf_r+0x1d4>
   163f4:	2b00      	cmp	r3, #0
   163f6:	d0bc      	beq.n	16372 <_vfiprintf_r+0x14a>
   163f8:	9207      	str	r2, [sp, #28]
   163fa:	e7ba      	b.n	16372 <_vfiprintf_r+0x14a>
   163fc:	4342      	muls	r2, r0
   163fe:	3401      	adds	r4, #1
   16400:	1852      	adds	r2, r2, r1
   16402:	2301      	movs	r3, #1
   16404:	e7f2      	b.n	163ec <_vfiprintf_r+0x1c4>
   16406:	3307      	adds	r3, #7
   16408:	e7d5      	b.n	163b6 <_vfiprintf_r+0x18e>
   1640a:	ab05      	add	r3, sp, #20
   1640c:	9300      	str	r3, [sp, #0]
   1640e:	003a      	movs	r2, r7
   16410:	4b12      	ldr	r3, [pc, #72]	; (1645c <_vfiprintf_r+0x234>)
   16412:	0029      	movs	r1, r5
   16414:	0030      	movs	r0, r6
   16416:	e000      	b.n	1641a <_vfiprintf_r+0x1f2>
   16418:	bf00      	nop
   1641a:	9003      	str	r0, [sp, #12]
   1641c:	9b03      	ldr	r3, [sp, #12]
   1641e:	3301      	adds	r3, #1
   16420:	d1cc      	bne.n	163bc <_vfiprintf_r+0x194>
   16422:	89bb      	ldrh	r3, [r7, #12]
   16424:	065b      	lsls	r3, r3, #25
   16426:	d500      	bpl.n	1642a <_vfiprintf_r+0x202>
   16428:	e77b      	b.n	16322 <_vfiprintf_r+0xfa>
   1642a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1642c:	e77b      	b.n	16326 <_vfiprintf_r+0xfe>
   1642e:	ab05      	add	r3, sp, #20
   16430:	9300      	str	r3, [sp, #0]
   16432:	003a      	movs	r2, r7
   16434:	4b09      	ldr	r3, [pc, #36]	; (1645c <_vfiprintf_r+0x234>)
   16436:	0029      	movs	r1, r5
   16438:	0030      	movs	r0, r6
   1643a:	f000 f87f 	bl	1653c <_printf_i>
   1643e:	e7ec      	b.n	1641a <_vfiprintf_r+0x1f2>
   16440:	000184f4 	.word	0x000184f4
   16444:	000184a0 	.word	0x000184a0
   16448:	00018514 	.word	0x00018514
   1644c:	000184d4 	.word	0x000184d4
   16450:	000184a6 	.word	0x000184a6
   16454:	000184aa 	.word	0x000184aa
   16458:	00000000 	.word	0x00000000
   1645c:	00016203 	.word	0x00016203

00016460 <_printf_common>:
   16460:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16462:	0015      	movs	r5, r2
   16464:	9301      	str	r3, [sp, #4]
   16466:	688a      	ldr	r2, [r1, #8]
   16468:	690b      	ldr	r3, [r1, #16]
   1646a:	9000      	str	r0, [sp, #0]
   1646c:	000c      	movs	r4, r1
   1646e:	4293      	cmp	r3, r2
   16470:	da00      	bge.n	16474 <_printf_common+0x14>
   16472:	0013      	movs	r3, r2
   16474:	0022      	movs	r2, r4
   16476:	602b      	str	r3, [r5, #0]
   16478:	3243      	adds	r2, #67	; 0x43
   1647a:	7812      	ldrb	r2, [r2, #0]
   1647c:	2a00      	cmp	r2, #0
   1647e:	d001      	beq.n	16484 <_printf_common+0x24>
   16480:	3301      	adds	r3, #1
   16482:	602b      	str	r3, [r5, #0]
   16484:	6823      	ldr	r3, [r4, #0]
   16486:	069b      	lsls	r3, r3, #26
   16488:	d502      	bpl.n	16490 <_printf_common+0x30>
   1648a:	682b      	ldr	r3, [r5, #0]
   1648c:	3302      	adds	r3, #2
   1648e:	602b      	str	r3, [r5, #0]
   16490:	2706      	movs	r7, #6
   16492:	6823      	ldr	r3, [r4, #0]
   16494:	401f      	ands	r7, r3
   16496:	d027      	beq.n	164e8 <_printf_common+0x88>
   16498:	0023      	movs	r3, r4
   1649a:	3343      	adds	r3, #67	; 0x43
   1649c:	781b      	ldrb	r3, [r3, #0]
   1649e:	1e5a      	subs	r2, r3, #1
   164a0:	4193      	sbcs	r3, r2
   164a2:	6822      	ldr	r2, [r4, #0]
   164a4:	0692      	lsls	r2, r2, #26
   164a6:	d430      	bmi.n	1650a <_printf_common+0xaa>
   164a8:	0022      	movs	r2, r4
   164aa:	9901      	ldr	r1, [sp, #4]
   164ac:	3243      	adds	r2, #67	; 0x43
   164ae:	9800      	ldr	r0, [sp, #0]
   164b0:	9e08      	ldr	r6, [sp, #32]
   164b2:	47b0      	blx	r6
   164b4:	1c43      	adds	r3, r0, #1
   164b6:	d025      	beq.n	16504 <_printf_common+0xa4>
   164b8:	2306      	movs	r3, #6
   164ba:	6820      	ldr	r0, [r4, #0]
   164bc:	682a      	ldr	r2, [r5, #0]
   164be:	68e1      	ldr	r1, [r4, #12]
   164c0:	4003      	ands	r3, r0
   164c2:	2500      	movs	r5, #0
   164c4:	2b04      	cmp	r3, #4
   164c6:	d103      	bne.n	164d0 <_printf_common+0x70>
   164c8:	1a8d      	subs	r5, r1, r2
   164ca:	43eb      	mvns	r3, r5
   164cc:	17db      	asrs	r3, r3, #31
   164ce:	401d      	ands	r5, r3
   164d0:	68a3      	ldr	r3, [r4, #8]
   164d2:	6922      	ldr	r2, [r4, #16]
   164d4:	4293      	cmp	r3, r2
   164d6:	dd01      	ble.n	164dc <_printf_common+0x7c>
   164d8:	1a9b      	subs	r3, r3, r2
   164da:	18ed      	adds	r5, r5, r3
   164dc:	2700      	movs	r7, #0
   164de:	42bd      	cmp	r5, r7
   164e0:	d120      	bne.n	16524 <_printf_common+0xc4>
   164e2:	2000      	movs	r0, #0
   164e4:	e010      	b.n	16508 <_printf_common+0xa8>
   164e6:	3701      	adds	r7, #1
   164e8:	68e3      	ldr	r3, [r4, #12]
   164ea:	682a      	ldr	r2, [r5, #0]
   164ec:	1a9b      	subs	r3, r3, r2
   164ee:	429f      	cmp	r7, r3
   164f0:	dad2      	bge.n	16498 <_printf_common+0x38>
   164f2:	0022      	movs	r2, r4
   164f4:	2301      	movs	r3, #1
   164f6:	3219      	adds	r2, #25
   164f8:	9901      	ldr	r1, [sp, #4]
   164fa:	9800      	ldr	r0, [sp, #0]
   164fc:	9e08      	ldr	r6, [sp, #32]
   164fe:	47b0      	blx	r6
   16500:	1c43      	adds	r3, r0, #1
   16502:	d1f0      	bne.n	164e6 <_printf_common+0x86>
   16504:	2001      	movs	r0, #1
   16506:	4240      	negs	r0, r0
   16508:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1650a:	2030      	movs	r0, #48	; 0x30
   1650c:	18e1      	adds	r1, r4, r3
   1650e:	3143      	adds	r1, #67	; 0x43
   16510:	7008      	strb	r0, [r1, #0]
   16512:	0021      	movs	r1, r4
   16514:	1c5a      	adds	r2, r3, #1
   16516:	3145      	adds	r1, #69	; 0x45
   16518:	7809      	ldrb	r1, [r1, #0]
   1651a:	18a2      	adds	r2, r4, r2
   1651c:	3243      	adds	r2, #67	; 0x43
   1651e:	3302      	adds	r3, #2
   16520:	7011      	strb	r1, [r2, #0]
   16522:	e7c1      	b.n	164a8 <_printf_common+0x48>
   16524:	0022      	movs	r2, r4
   16526:	2301      	movs	r3, #1
   16528:	321a      	adds	r2, #26
   1652a:	9901      	ldr	r1, [sp, #4]
   1652c:	9800      	ldr	r0, [sp, #0]
   1652e:	9e08      	ldr	r6, [sp, #32]
   16530:	47b0      	blx	r6
   16532:	1c43      	adds	r3, r0, #1
   16534:	d0e6      	beq.n	16504 <_printf_common+0xa4>
   16536:	3701      	adds	r7, #1
   16538:	e7d1      	b.n	164de <_printf_common+0x7e>
   1653a:	Address 0x0001653a is out of bounds.


0001653c <_printf_i>:
   1653c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1653e:	b08b      	sub	sp, #44	; 0x2c
   16540:	9206      	str	r2, [sp, #24]
   16542:	000a      	movs	r2, r1
   16544:	3243      	adds	r2, #67	; 0x43
   16546:	9307      	str	r3, [sp, #28]
   16548:	9005      	str	r0, [sp, #20]
   1654a:	9204      	str	r2, [sp, #16]
   1654c:	7e0a      	ldrb	r2, [r1, #24]
   1654e:	000c      	movs	r4, r1
   16550:	9b10      	ldr	r3, [sp, #64]	; 0x40
   16552:	2a6e      	cmp	r2, #110	; 0x6e
   16554:	d100      	bne.n	16558 <_printf_i+0x1c>
   16556:	e08f      	b.n	16678 <_printf_i+0x13c>
   16558:	d817      	bhi.n	1658a <_printf_i+0x4e>
   1655a:	2a63      	cmp	r2, #99	; 0x63
   1655c:	d02c      	beq.n	165b8 <_printf_i+0x7c>
   1655e:	d808      	bhi.n	16572 <_printf_i+0x36>
   16560:	2a00      	cmp	r2, #0
   16562:	d100      	bne.n	16566 <_printf_i+0x2a>
   16564:	e099      	b.n	1669a <_printf_i+0x15e>
   16566:	2a58      	cmp	r2, #88	; 0x58
   16568:	d054      	beq.n	16614 <_printf_i+0xd8>
   1656a:	0026      	movs	r6, r4
   1656c:	3642      	adds	r6, #66	; 0x42
   1656e:	7032      	strb	r2, [r6, #0]
   16570:	e029      	b.n	165c6 <_printf_i+0x8a>
   16572:	2a64      	cmp	r2, #100	; 0x64
   16574:	d001      	beq.n	1657a <_printf_i+0x3e>
   16576:	2a69      	cmp	r2, #105	; 0x69
   16578:	d1f7      	bne.n	1656a <_printf_i+0x2e>
   1657a:	6821      	ldr	r1, [r4, #0]
   1657c:	681a      	ldr	r2, [r3, #0]
   1657e:	0608      	lsls	r0, r1, #24
   16580:	d523      	bpl.n	165ca <_printf_i+0x8e>
   16582:	1d11      	adds	r1, r2, #4
   16584:	6019      	str	r1, [r3, #0]
   16586:	6815      	ldr	r5, [r2, #0]
   16588:	e025      	b.n	165d6 <_printf_i+0x9a>
   1658a:	2a73      	cmp	r2, #115	; 0x73
   1658c:	d100      	bne.n	16590 <_printf_i+0x54>
   1658e:	e088      	b.n	166a2 <_printf_i+0x166>
   16590:	d808      	bhi.n	165a4 <_printf_i+0x68>
   16592:	2a6f      	cmp	r2, #111	; 0x6f
   16594:	d029      	beq.n	165ea <_printf_i+0xae>
   16596:	2a70      	cmp	r2, #112	; 0x70
   16598:	d1e7      	bne.n	1656a <_printf_i+0x2e>
   1659a:	2220      	movs	r2, #32
   1659c:	6809      	ldr	r1, [r1, #0]
   1659e:	430a      	orrs	r2, r1
   165a0:	6022      	str	r2, [r4, #0]
   165a2:	e003      	b.n	165ac <_printf_i+0x70>
   165a4:	2a75      	cmp	r2, #117	; 0x75
   165a6:	d020      	beq.n	165ea <_printf_i+0xae>
   165a8:	2a78      	cmp	r2, #120	; 0x78
   165aa:	d1de      	bne.n	1656a <_printf_i+0x2e>
   165ac:	0022      	movs	r2, r4
   165ae:	2178      	movs	r1, #120	; 0x78
   165b0:	3245      	adds	r2, #69	; 0x45
   165b2:	7011      	strb	r1, [r2, #0]
   165b4:	4a6c      	ldr	r2, [pc, #432]	; (16768 <_printf_i+0x22c>)
   165b6:	e030      	b.n	1661a <_printf_i+0xde>
   165b8:	000e      	movs	r6, r1
   165ba:	681a      	ldr	r2, [r3, #0]
   165bc:	3642      	adds	r6, #66	; 0x42
   165be:	1d11      	adds	r1, r2, #4
   165c0:	6019      	str	r1, [r3, #0]
   165c2:	6813      	ldr	r3, [r2, #0]
   165c4:	7033      	strb	r3, [r6, #0]
   165c6:	2301      	movs	r3, #1
   165c8:	e079      	b.n	166be <_printf_i+0x182>
   165ca:	0649      	lsls	r1, r1, #25
   165cc:	d5d9      	bpl.n	16582 <_printf_i+0x46>
   165ce:	1d11      	adds	r1, r2, #4
   165d0:	6019      	str	r1, [r3, #0]
   165d2:	2300      	movs	r3, #0
   165d4:	5ed5      	ldrsh	r5, [r2, r3]
   165d6:	2d00      	cmp	r5, #0
   165d8:	da03      	bge.n	165e2 <_printf_i+0xa6>
   165da:	232d      	movs	r3, #45	; 0x2d
   165dc:	9a04      	ldr	r2, [sp, #16]
   165de:	426d      	negs	r5, r5
   165e0:	7013      	strb	r3, [r2, #0]
   165e2:	4b62      	ldr	r3, [pc, #392]	; (1676c <_printf_i+0x230>)
   165e4:	270a      	movs	r7, #10
   165e6:	9303      	str	r3, [sp, #12]
   165e8:	e02f      	b.n	1664a <_printf_i+0x10e>
   165ea:	6820      	ldr	r0, [r4, #0]
   165ec:	6819      	ldr	r1, [r3, #0]
   165ee:	0605      	lsls	r5, r0, #24
   165f0:	d503      	bpl.n	165fa <_printf_i+0xbe>
   165f2:	1d08      	adds	r0, r1, #4
   165f4:	6018      	str	r0, [r3, #0]
   165f6:	680d      	ldr	r5, [r1, #0]
   165f8:	e005      	b.n	16606 <_printf_i+0xca>
   165fa:	0640      	lsls	r0, r0, #25
   165fc:	d5f9      	bpl.n	165f2 <_printf_i+0xb6>
   165fe:	680d      	ldr	r5, [r1, #0]
   16600:	1d08      	adds	r0, r1, #4
   16602:	6018      	str	r0, [r3, #0]
   16604:	b2ad      	uxth	r5, r5
   16606:	4b59      	ldr	r3, [pc, #356]	; (1676c <_printf_i+0x230>)
   16608:	2708      	movs	r7, #8
   1660a:	9303      	str	r3, [sp, #12]
   1660c:	2a6f      	cmp	r2, #111	; 0x6f
   1660e:	d018      	beq.n	16642 <_printf_i+0x106>
   16610:	270a      	movs	r7, #10
   16612:	e016      	b.n	16642 <_printf_i+0x106>
   16614:	3145      	adds	r1, #69	; 0x45
   16616:	700a      	strb	r2, [r1, #0]
   16618:	4a54      	ldr	r2, [pc, #336]	; (1676c <_printf_i+0x230>)
   1661a:	9203      	str	r2, [sp, #12]
   1661c:	681a      	ldr	r2, [r3, #0]
   1661e:	6821      	ldr	r1, [r4, #0]
   16620:	1d10      	adds	r0, r2, #4
   16622:	6018      	str	r0, [r3, #0]
   16624:	6815      	ldr	r5, [r2, #0]
   16626:	0608      	lsls	r0, r1, #24
   16628:	d522      	bpl.n	16670 <_printf_i+0x134>
   1662a:	07cb      	lsls	r3, r1, #31
   1662c:	d502      	bpl.n	16634 <_printf_i+0xf8>
   1662e:	2320      	movs	r3, #32
   16630:	4319      	orrs	r1, r3
   16632:	6021      	str	r1, [r4, #0]
   16634:	2710      	movs	r7, #16
   16636:	2d00      	cmp	r5, #0
   16638:	d103      	bne.n	16642 <_printf_i+0x106>
   1663a:	2320      	movs	r3, #32
   1663c:	6822      	ldr	r2, [r4, #0]
   1663e:	439a      	bics	r2, r3
   16640:	6022      	str	r2, [r4, #0]
   16642:	0023      	movs	r3, r4
   16644:	2200      	movs	r2, #0
   16646:	3343      	adds	r3, #67	; 0x43
   16648:	701a      	strb	r2, [r3, #0]
   1664a:	6863      	ldr	r3, [r4, #4]
   1664c:	60a3      	str	r3, [r4, #8]
   1664e:	2b00      	cmp	r3, #0
   16650:	db5c      	blt.n	1670c <_printf_i+0x1d0>
   16652:	2204      	movs	r2, #4
   16654:	6821      	ldr	r1, [r4, #0]
   16656:	4391      	bics	r1, r2
   16658:	6021      	str	r1, [r4, #0]
   1665a:	2d00      	cmp	r5, #0
   1665c:	d158      	bne.n	16710 <_printf_i+0x1d4>
   1665e:	9e04      	ldr	r6, [sp, #16]
   16660:	2b00      	cmp	r3, #0
   16662:	d064      	beq.n	1672e <_printf_i+0x1f2>
   16664:	0026      	movs	r6, r4
   16666:	9b03      	ldr	r3, [sp, #12]
   16668:	3642      	adds	r6, #66	; 0x42
   1666a:	781b      	ldrb	r3, [r3, #0]
   1666c:	7033      	strb	r3, [r6, #0]
   1666e:	e05e      	b.n	1672e <_printf_i+0x1f2>
   16670:	0648      	lsls	r0, r1, #25
   16672:	d5da      	bpl.n	1662a <_printf_i+0xee>
   16674:	b2ad      	uxth	r5, r5
   16676:	e7d8      	b.n	1662a <_printf_i+0xee>
   16678:	6809      	ldr	r1, [r1, #0]
   1667a:	681a      	ldr	r2, [r3, #0]
   1667c:	0608      	lsls	r0, r1, #24
   1667e:	d505      	bpl.n	1668c <_printf_i+0x150>
   16680:	1d11      	adds	r1, r2, #4
   16682:	6019      	str	r1, [r3, #0]
   16684:	6813      	ldr	r3, [r2, #0]
   16686:	6962      	ldr	r2, [r4, #20]
   16688:	601a      	str	r2, [r3, #0]
   1668a:	e006      	b.n	1669a <_printf_i+0x15e>
   1668c:	0649      	lsls	r1, r1, #25
   1668e:	d5f7      	bpl.n	16680 <_printf_i+0x144>
   16690:	1d11      	adds	r1, r2, #4
   16692:	6019      	str	r1, [r3, #0]
   16694:	6813      	ldr	r3, [r2, #0]
   16696:	8aa2      	ldrh	r2, [r4, #20]
   16698:	801a      	strh	r2, [r3, #0]
   1669a:	2300      	movs	r3, #0
   1669c:	9e04      	ldr	r6, [sp, #16]
   1669e:	6123      	str	r3, [r4, #16]
   166a0:	e054      	b.n	1674c <_printf_i+0x210>
   166a2:	681a      	ldr	r2, [r3, #0]
   166a4:	1d11      	adds	r1, r2, #4
   166a6:	6019      	str	r1, [r3, #0]
   166a8:	6816      	ldr	r6, [r2, #0]
   166aa:	2100      	movs	r1, #0
   166ac:	6862      	ldr	r2, [r4, #4]
   166ae:	0030      	movs	r0, r6
   166b0:	f000 fcee 	bl	17090 <memchr>
   166b4:	2800      	cmp	r0, #0
   166b6:	d001      	beq.n	166bc <_printf_i+0x180>
   166b8:	1b80      	subs	r0, r0, r6
   166ba:	6060      	str	r0, [r4, #4]
   166bc:	6863      	ldr	r3, [r4, #4]
   166be:	6123      	str	r3, [r4, #16]
   166c0:	2300      	movs	r3, #0
   166c2:	9a04      	ldr	r2, [sp, #16]
   166c4:	7013      	strb	r3, [r2, #0]
   166c6:	e041      	b.n	1674c <_printf_i+0x210>
   166c8:	6923      	ldr	r3, [r4, #16]
   166ca:	0032      	movs	r2, r6
   166cc:	9906      	ldr	r1, [sp, #24]
   166ce:	9805      	ldr	r0, [sp, #20]
   166d0:	9d07      	ldr	r5, [sp, #28]
   166d2:	47a8      	blx	r5
   166d4:	1c43      	adds	r3, r0, #1
   166d6:	d043      	beq.n	16760 <_printf_i+0x224>
   166d8:	6823      	ldr	r3, [r4, #0]
   166da:	2500      	movs	r5, #0
   166dc:	079b      	lsls	r3, r3, #30
   166de:	d40f      	bmi.n	16700 <_printf_i+0x1c4>
   166e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   166e2:	68e0      	ldr	r0, [r4, #12]
   166e4:	4298      	cmp	r0, r3
   166e6:	da3d      	bge.n	16764 <_printf_i+0x228>
   166e8:	0018      	movs	r0, r3
   166ea:	e03b      	b.n	16764 <_printf_i+0x228>
   166ec:	0022      	movs	r2, r4
   166ee:	2301      	movs	r3, #1
   166f0:	3219      	adds	r2, #25
   166f2:	9906      	ldr	r1, [sp, #24]
   166f4:	9805      	ldr	r0, [sp, #20]
   166f6:	9e07      	ldr	r6, [sp, #28]
   166f8:	47b0      	blx	r6
   166fa:	1c43      	adds	r3, r0, #1
   166fc:	d030      	beq.n	16760 <_printf_i+0x224>
   166fe:	3501      	adds	r5, #1
   16700:	68e3      	ldr	r3, [r4, #12]
   16702:	9a09      	ldr	r2, [sp, #36]	; 0x24
   16704:	1a9b      	subs	r3, r3, r2
   16706:	429d      	cmp	r5, r3
   16708:	dbf0      	blt.n	166ec <_printf_i+0x1b0>
   1670a:	e7e9      	b.n	166e0 <_printf_i+0x1a4>
   1670c:	2d00      	cmp	r5, #0
   1670e:	d0a9      	beq.n	16664 <_printf_i+0x128>
   16710:	9e04      	ldr	r6, [sp, #16]
   16712:	0028      	movs	r0, r5
   16714:	0039      	movs	r1, r7
   16716:	f7fc fca3 	bl	13060 <__aeabi_uidivmod>
   1671a:	9b03      	ldr	r3, [sp, #12]
   1671c:	3e01      	subs	r6, #1
   1671e:	5c5b      	ldrb	r3, [r3, r1]
   16720:	0028      	movs	r0, r5
   16722:	7033      	strb	r3, [r6, #0]
   16724:	0039      	movs	r1, r7
   16726:	f7fc fc15 	bl	12f54 <__udivsi3>
   1672a:	1e05      	subs	r5, r0, #0
   1672c:	d1f1      	bne.n	16712 <_printf_i+0x1d6>
   1672e:	2f08      	cmp	r7, #8
   16730:	d109      	bne.n	16746 <_printf_i+0x20a>
   16732:	6823      	ldr	r3, [r4, #0]
   16734:	07db      	lsls	r3, r3, #31
   16736:	d506      	bpl.n	16746 <_printf_i+0x20a>
   16738:	6863      	ldr	r3, [r4, #4]
   1673a:	6922      	ldr	r2, [r4, #16]
   1673c:	4293      	cmp	r3, r2
   1673e:	dc02      	bgt.n	16746 <_printf_i+0x20a>
   16740:	2330      	movs	r3, #48	; 0x30
   16742:	3e01      	subs	r6, #1
   16744:	7033      	strb	r3, [r6, #0]
   16746:	9b04      	ldr	r3, [sp, #16]
   16748:	1b9b      	subs	r3, r3, r6
   1674a:	6123      	str	r3, [r4, #16]
   1674c:	9b07      	ldr	r3, [sp, #28]
   1674e:	aa09      	add	r2, sp, #36	; 0x24
   16750:	9300      	str	r3, [sp, #0]
   16752:	0021      	movs	r1, r4
   16754:	9b06      	ldr	r3, [sp, #24]
   16756:	9805      	ldr	r0, [sp, #20]
   16758:	f7ff fe82 	bl	16460 <_printf_common>
   1675c:	1c43      	adds	r3, r0, #1
   1675e:	d1b3      	bne.n	166c8 <_printf_i+0x18c>
   16760:	2001      	movs	r0, #1
   16762:	4240      	negs	r0, r0
   16764:	b00b      	add	sp, #44	; 0x2c
   16766:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16768:	000184c2 	.word	0x000184c2
   1676c:	000184b1 	.word	0x000184b1

00016770 <iprintf>:
   16770:	b40f      	push	{r0, r1, r2, r3}
   16772:	4b0b      	ldr	r3, [pc, #44]	; (167a0 <iprintf+0x30>)
   16774:	b513      	push	{r0, r1, r4, lr}
   16776:	681c      	ldr	r4, [r3, #0]
   16778:	2c00      	cmp	r4, #0
   1677a:	d005      	beq.n	16788 <iprintf+0x18>
   1677c:	69a3      	ldr	r3, [r4, #24]
   1677e:	2b00      	cmp	r3, #0
   16780:	d102      	bne.n	16788 <iprintf+0x18>
   16782:	0020      	movs	r0, r4
   16784:	f000 fb78 	bl	16e78 <__sinit>
   16788:	ab05      	add	r3, sp, #20
   1678a:	9a04      	ldr	r2, [sp, #16]
   1678c:	68a1      	ldr	r1, [r4, #8]
   1678e:	0020      	movs	r0, r4
   16790:	9301      	str	r3, [sp, #4]
   16792:	f7ff fd49 	bl	16228 <_vfiprintf_r>
   16796:	bc16      	pop	{r1, r2, r4}
   16798:	bc08      	pop	{r3}
   1679a:	b004      	add	sp, #16
   1679c:	4718      	bx	r3
   1679e:	46c0      	nop			; (mov r8, r8)
   167a0:	20000020 	.word	0x20000020

000167a4 <putchar>:
   167a4:	4b08      	ldr	r3, [pc, #32]	; (167c8 <putchar+0x24>)
   167a6:	b570      	push	{r4, r5, r6, lr}
   167a8:	681c      	ldr	r4, [r3, #0]
   167aa:	0005      	movs	r5, r0
   167ac:	2c00      	cmp	r4, #0
   167ae:	d005      	beq.n	167bc <putchar+0x18>
   167b0:	69a3      	ldr	r3, [r4, #24]
   167b2:	2b00      	cmp	r3, #0
   167b4:	d102      	bne.n	167bc <putchar+0x18>
   167b6:	0020      	movs	r0, r4
   167b8:	f000 fb5e 	bl	16e78 <__sinit>
   167bc:	0029      	movs	r1, r5
   167be:	68a2      	ldr	r2, [r4, #8]
   167c0:	0020      	movs	r0, r4
   167c2:	f000 fd19 	bl	171f8 <_putc_r>
   167c6:	bd70      	pop	{r4, r5, r6, pc}
   167c8:	20000020 	.word	0x20000020

000167cc <_puts_r>:
   167cc:	b570      	push	{r4, r5, r6, lr}
   167ce:	0005      	movs	r5, r0
   167d0:	000e      	movs	r6, r1
   167d2:	2800      	cmp	r0, #0
   167d4:	d004      	beq.n	167e0 <_puts_r+0x14>
   167d6:	6983      	ldr	r3, [r0, #24]
   167d8:	2b00      	cmp	r3, #0
   167da:	d101      	bne.n	167e0 <_puts_r+0x14>
   167dc:	f000 fb4c 	bl	16e78 <__sinit>
   167e0:	69ab      	ldr	r3, [r5, #24]
   167e2:	68ac      	ldr	r4, [r5, #8]
   167e4:	2b00      	cmp	r3, #0
   167e6:	d102      	bne.n	167ee <_puts_r+0x22>
   167e8:	0028      	movs	r0, r5
   167ea:	f000 fb45 	bl	16e78 <__sinit>
   167ee:	4b24      	ldr	r3, [pc, #144]	; (16880 <_puts_r+0xb4>)
   167f0:	429c      	cmp	r4, r3
   167f2:	d10f      	bne.n	16814 <_puts_r+0x48>
   167f4:	686c      	ldr	r4, [r5, #4]
   167f6:	89a3      	ldrh	r3, [r4, #12]
   167f8:	071b      	lsls	r3, r3, #28
   167fa:	d502      	bpl.n	16802 <_puts_r+0x36>
   167fc:	6923      	ldr	r3, [r4, #16]
   167fe:	2b00      	cmp	r3, #0
   16800:	d120      	bne.n	16844 <_puts_r+0x78>
   16802:	0021      	movs	r1, r4
   16804:	0028      	movs	r0, r5
   16806:	f000 f9c1 	bl	16b8c <__swsetup_r>
   1680a:	2800      	cmp	r0, #0
   1680c:	d01a      	beq.n	16844 <_puts_r+0x78>
   1680e:	2001      	movs	r0, #1
   16810:	4240      	negs	r0, r0
   16812:	bd70      	pop	{r4, r5, r6, pc}
   16814:	4b1b      	ldr	r3, [pc, #108]	; (16884 <_puts_r+0xb8>)
   16816:	429c      	cmp	r4, r3
   16818:	d101      	bne.n	1681e <_puts_r+0x52>
   1681a:	68ac      	ldr	r4, [r5, #8]
   1681c:	e7eb      	b.n	167f6 <_puts_r+0x2a>
   1681e:	4b1a      	ldr	r3, [pc, #104]	; (16888 <_puts_r+0xbc>)
   16820:	429c      	cmp	r4, r3
   16822:	d1e8      	bne.n	167f6 <_puts_r+0x2a>
   16824:	68ec      	ldr	r4, [r5, #12]
   16826:	e7e6      	b.n	167f6 <_puts_r+0x2a>
   16828:	3b01      	subs	r3, #1
   1682a:	3601      	adds	r6, #1
   1682c:	60a3      	str	r3, [r4, #8]
   1682e:	2b00      	cmp	r3, #0
   16830:	da04      	bge.n	1683c <_puts_r+0x70>
   16832:	69a2      	ldr	r2, [r4, #24]
   16834:	4293      	cmp	r3, r2
   16836:	db16      	blt.n	16866 <_puts_r+0x9a>
   16838:	290a      	cmp	r1, #10
   1683a:	d014      	beq.n	16866 <_puts_r+0x9a>
   1683c:	6823      	ldr	r3, [r4, #0]
   1683e:	1c5a      	adds	r2, r3, #1
   16840:	6022      	str	r2, [r4, #0]
   16842:	7019      	strb	r1, [r3, #0]
   16844:	7831      	ldrb	r1, [r6, #0]
   16846:	68a3      	ldr	r3, [r4, #8]
   16848:	2900      	cmp	r1, #0
   1684a:	d1ed      	bne.n	16828 <_puts_r+0x5c>
   1684c:	3b01      	subs	r3, #1
   1684e:	60a3      	str	r3, [r4, #8]
   16850:	2b00      	cmp	r3, #0
   16852:	da0f      	bge.n	16874 <_puts_r+0xa8>
   16854:	0022      	movs	r2, r4
   16856:	310a      	adds	r1, #10
   16858:	0028      	movs	r0, r5
   1685a:	f000 f941 	bl	16ae0 <__swbuf_r>
   1685e:	1c43      	adds	r3, r0, #1
   16860:	d0d5      	beq.n	1680e <_puts_r+0x42>
   16862:	200a      	movs	r0, #10
   16864:	e7d5      	b.n	16812 <_puts_r+0x46>
   16866:	0022      	movs	r2, r4
   16868:	0028      	movs	r0, r5
   1686a:	f000 f939 	bl	16ae0 <__swbuf_r>
   1686e:	1c43      	adds	r3, r0, #1
   16870:	d1e8      	bne.n	16844 <_puts_r+0x78>
   16872:	e7cc      	b.n	1680e <_puts_r+0x42>
   16874:	200a      	movs	r0, #10
   16876:	6823      	ldr	r3, [r4, #0]
   16878:	1c5a      	adds	r2, r3, #1
   1687a:	6022      	str	r2, [r4, #0]
   1687c:	7018      	strb	r0, [r3, #0]
   1687e:	e7c8      	b.n	16812 <_puts_r+0x46>
   16880:	000184f4 	.word	0x000184f4
   16884:	00018514 	.word	0x00018514
   16888:	000184d4 	.word	0x000184d4

0001688c <puts>:
   1688c:	b510      	push	{r4, lr}
   1688e:	4b03      	ldr	r3, [pc, #12]	; (1689c <puts+0x10>)
   16890:	0001      	movs	r1, r0
   16892:	6818      	ldr	r0, [r3, #0]
   16894:	f7ff ff9a 	bl	167cc <_puts_r>
   16898:	bd10      	pop	{r4, pc}
   1689a:	46c0      	nop			; (mov r8, r8)
   1689c:	20000020 	.word	0x20000020

000168a0 <srand>:
   168a0:	4b10      	ldr	r3, [pc, #64]	; (168e4 <srand+0x44>)
   168a2:	b570      	push	{r4, r5, r6, lr}
   168a4:	681c      	ldr	r4, [r3, #0]
   168a6:	0005      	movs	r5, r0
   168a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   168aa:	2b00      	cmp	r3, #0
   168ac:	d115      	bne.n	168da <srand+0x3a>
   168ae:	2018      	movs	r0, #24
   168b0:	f000 fbe4 	bl	1707c <malloc>
   168b4:	4b0c      	ldr	r3, [pc, #48]	; (168e8 <srand+0x48>)
   168b6:	63a0      	str	r0, [r4, #56]	; 0x38
   168b8:	8003      	strh	r3, [r0, #0]
   168ba:	4b0c      	ldr	r3, [pc, #48]	; (168ec <srand+0x4c>)
   168bc:	2201      	movs	r2, #1
   168be:	8043      	strh	r3, [r0, #2]
   168c0:	4b0b      	ldr	r3, [pc, #44]	; (168f0 <srand+0x50>)
   168c2:	8083      	strh	r3, [r0, #4]
   168c4:	4b0b      	ldr	r3, [pc, #44]	; (168f4 <srand+0x54>)
   168c6:	80c3      	strh	r3, [r0, #6]
   168c8:	4b0b      	ldr	r3, [pc, #44]	; (168f8 <srand+0x58>)
   168ca:	8103      	strh	r3, [r0, #8]
   168cc:	2305      	movs	r3, #5
   168ce:	8143      	strh	r3, [r0, #10]
   168d0:	3306      	adds	r3, #6
   168d2:	8183      	strh	r3, [r0, #12]
   168d4:	2300      	movs	r3, #0
   168d6:	6102      	str	r2, [r0, #16]
   168d8:	6143      	str	r3, [r0, #20]
   168da:	2200      	movs	r2, #0
   168dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   168de:	611d      	str	r5, [r3, #16]
   168e0:	615a      	str	r2, [r3, #20]
   168e2:	bd70      	pop	{r4, r5, r6, pc}
   168e4:	20000020 	.word	0x20000020
   168e8:	0000330e 	.word	0x0000330e
   168ec:	ffffabcd 	.word	0xffffabcd
   168f0:	00001234 	.word	0x00001234
   168f4:	ffffe66d 	.word	0xffffe66d
   168f8:	ffffdeec 	.word	0xffffdeec

000168fc <rand>:
   168fc:	4b15      	ldr	r3, [pc, #84]	; (16954 <rand+0x58>)
   168fe:	b510      	push	{r4, lr}
   16900:	681c      	ldr	r4, [r3, #0]
   16902:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   16904:	2b00      	cmp	r3, #0
   16906:	d115      	bne.n	16934 <rand+0x38>
   16908:	2018      	movs	r0, #24
   1690a:	f000 fbb7 	bl	1707c <malloc>
   1690e:	4b12      	ldr	r3, [pc, #72]	; (16958 <rand+0x5c>)
   16910:	63a0      	str	r0, [r4, #56]	; 0x38
   16912:	8003      	strh	r3, [r0, #0]
   16914:	4b11      	ldr	r3, [pc, #68]	; (1695c <rand+0x60>)
   16916:	2201      	movs	r2, #1
   16918:	8043      	strh	r3, [r0, #2]
   1691a:	4b11      	ldr	r3, [pc, #68]	; (16960 <rand+0x64>)
   1691c:	8083      	strh	r3, [r0, #4]
   1691e:	4b11      	ldr	r3, [pc, #68]	; (16964 <rand+0x68>)
   16920:	80c3      	strh	r3, [r0, #6]
   16922:	4b11      	ldr	r3, [pc, #68]	; (16968 <rand+0x6c>)
   16924:	8103      	strh	r3, [r0, #8]
   16926:	2305      	movs	r3, #5
   16928:	8143      	strh	r3, [r0, #10]
   1692a:	3306      	adds	r3, #6
   1692c:	8183      	strh	r3, [r0, #12]
   1692e:	2300      	movs	r3, #0
   16930:	6102      	str	r2, [r0, #16]
   16932:	6143      	str	r3, [r0, #20]
   16934:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   16936:	4a0d      	ldr	r2, [pc, #52]	; (1696c <rand+0x70>)
   16938:	6920      	ldr	r0, [r4, #16]
   1693a:	6961      	ldr	r1, [r4, #20]
   1693c:	4b0c      	ldr	r3, [pc, #48]	; (16970 <rand+0x74>)
   1693e:	f7fc fd17 	bl	13370 <__aeabi_lmul>
   16942:	2201      	movs	r2, #1
   16944:	2300      	movs	r3, #0
   16946:	1880      	adds	r0, r0, r2
   16948:	4159      	adcs	r1, r3
   1694a:	6120      	str	r0, [r4, #16]
   1694c:	6161      	str	r1, [r4, #20]
   1694e:	0048      	lsls	r0, r1, #1
   16950:	0840      	lsrs	r0, r0, #1
   16952:	bd10      	pop	{r4, pc}
   16954:	20000020 	.word	0x20000020
   16958:	0000330e 	.word	0x0000330e
   1695c:	ffffabcd 	.word	0xffffabcd
   16960:	00001234 	.word	0x00001234
   16964:	ffffe66d 	.word	0xffffe66d
   16968:	ffffdeec 	.word	0xffffdeec
   1696c:	4c957f2d 	.word	0x4c957f2d
   16970:	5851f42d 	.word	0x5851f42d

00016974 <setbuf>:
   16974:	424a      	negs	r2, r1
   16976:	414a      	adcs	r2, r1
   16978:	2380      	movs	r3, #128	; 0x80
   1697a:	b510      	push	{r4, lr}
   1697c:	0052      	lsls	r2, r2, #1
   1697e:	00db      	lsls	r3, r3, #3
   16980:	f000 f802 	bl	16988 <setvbuf>
   16984:	bd10      	pop	{r4, pc}
   16986:	Address 0x00016986 is out of bounds.


00016988 <setvbuf>:
   16988:	b5f0      	push	{r4, r5, r6, r7, lr}
   1698a:	001d      	movs	r5, r3
   1698c:	4b4f      	ldr	r3, [pc, #316]	; (16acc <setvbuf+0x144>)
   1698e:	b085      	sub	sp, #20
   16990:	681e      	ldr	r6, [r3, #0]
   16992:	0004      	movs	r4, r0
   16994:	000f      	movs	r7, r1
   16996:	9200      	str	r2, [sp, #0]
   16998:	2e00      	cmp	r6, #0
   1699a:	d005      	beq.n	169a8 <setvbuf+0x20>
   1699c:	69b3      	ldr	r3, [r6, #24]
   1699e:	2b00      	cmp	r3, #0
   169a0:	d102      	bne.n	169a8 <setvbuf+0x20>
   169a2:	0030      	movs	r0, r6
   169a4:	f000 fa68 	bl	16e78 <__sinit>
   169a8:	4b49      	ldr	r3, [pc, #292]	; (16ad0 <setvbuf+0x148>)
   169aa:	429c      	cmp	r4, r3
   169ac:	d150      	bne.n	16a50 <setvbuf+0xc8>
   169ae:	6874      	ldr	r4, [r6, #4]
   169b0:	9b00      	ldr	r3, [sp, #0]
   169b2:	2b02      	cmp	r3, #2
   169b4:	d005      	beq.n	169c2 <setvbuf+0x3a>
   169b6:	2b01      	cmp	r3, #1
   169b8:	d900      	bls.n	169bc <setvbuf+0x34>
   169ba:	e084      	b.n	16ac6 <setvbuf+0x13e>
   169bc:	2d00      	cmp	r5, #0
   169be:	da00      	bge.n	169c2 <setvbuf+0x3a>
   169c0:	e081      	b.n	16ac6 <setvbuf+0x13e>
   169c2:	0021      	movs	r1, r4
   169c4:	0030      	movs	r0, r6
   169c6:	f000 f9e9 	bl	16d9c <_fflush_r>
   169ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
   169cc:	2900      	cmp	r1, #0
   169ce:	d008      	beq.n	169e2 <setvbuf+0x5a>
   169d0:	0023      	movs	r3, r4
   169d2:	3344      	adds	r3, #68	; 0x44
   169d4:	4299      	cmp	r1, r3
   169d6:	d002      	beq.n	169de <setvbuf+0x56>
   169d8:	0030      	movs	r0, r6
   169da:	f000 fb65 	bl	170a8 <_free_r>
   169de:	2300      	movs	r3, #0
   169e0:	6363      	str	r3, [r4, #52]	; 0x34
   169e2:	2300      	movs	r3, #0
   169e4:	61a3      	str	r3, [r4, #24]
   169e6:	6063      	str	r3, [r4, #4]
   169e8:	89a3      	ldrh	r3, [r4, #12]
   169ea:	061b      	lsls	r3, r3, #24
   169ec:	d503      	bpl.n	169f6 <setvbuf+0x6e>
   169ee:	6921      	ldr	r1, [r4, #16]
   169f0:	0030      	movs	r0, r6
   169f2:	f000 fb59 	bl	170a8 <_free_r>
   169f6:	89a3      	ldrh	r3, [r4, #12]
   169f8:	4a36      	ldr	r2, [pc, #216]	; (16ad4 <setvbuf+0x14c>)
   169fa:	4013      	ands	r3, r2
   169fc:	81a3      	strh	r3, [r4, #12]
   169fe:	9b00      	ldr	r3, [sp, #0]
   16a00:	2b02      	cmp	r3, #2
   16a02:	d05a      	beq.n	16aba <setvbuf+0x132>
   16a04:	ab03      	add	r3, sp, #12
   16a06:	aa02      	add	r2, sp, #8
   16a08:	0021      	movs	r1, r4
   16a0a:	0030      	movs	r0, r6
   16a0c:	f000 faca 	bl	16fa4 <__swhatbuf_r>
   16a10:	89a3      	ldrh	r3, [r4, #12]
   16a12:	4318      	orrs	r0, r3
   16a14:	81a0      	strh	r0, [r4, #12]
   16a16:	2d00      	cmp	r5, #0
   16a18:	d124      	bne.n	16a64 <setvbuf+0xdc>
   16a1a:	9d02      	ldr	r5, [sp, #8]
   16a1c:	0028      	movs	r0, r5
   16a1e:	f000 fb2d 	bl	1707c <malloc>
   16a22:	9501      	str	r5, [sp, #4]
   16a24:	1e07      	subs	r7, r0, #0
   16a26:	d142      	bne.n	16aae <setvbuf+0x126>
   16a28:	9b02      	ldr	r3, [sp, #8]
   16a2a:	9301      	str	r3, [sp, #4]
   16a2c:	42ab      	cmp	r3, r5
   16a2e:	d139      	bne.n	16aa4 <setvbuf+0x11c>
   16a30:	2001      	movs	r0, #1
   16a32:	4240      	negs	r0, r0
   16a34:	2302      	movs	r3, #2
   16a36:	89a2      	ldrh	r2, [r4, #12]
   16a38:	4313      	orrs	r3, r2
   16a3a:	81a3      	strh	r3, [r4, #12]
   16a3c:	2300      	movs	r3, #0
   16a3e:	60a3      	str	r3, [r4, #8]
   16a40:	0023      	movs	r3, r4
   16a42:	3347      	adds	r3, #71	; 0x47
   16a44:	6023      	str	r3, [r4, #0]
   16a46:	6123      	str	r3, [r4, #16]
   16a48:	2301      	movs	r3, #1
   16a4a:	6163      	str	r3, [r4, #20]
   16a4c:	b005      	add	sp, #20
   16a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16a50:	4b21      	ldr	r3, [pc, #132]	; (16ad8 <setvbuf+0x150>)
   16a52:	429c      	cmp	r4, r3
   16a54:	d101      	bne.n	16a5a <setvbuf+0xd2>
   16a56:	68b4      	ldr	r4, [r6, #8]
   16a58:	e7aa      	b.n	169b0 <setvbuf+0x28>
   16a5a:	4b20      	ldr	r3, [pc, #128]	; (16adc <setvbuf+0x154>)
   16a5c:	429c      	cmp	r4, r3
   16a5e:	d1a7      	bne.n	169b0 <setvbuf+0x28>
   16a60:	68f4      	ldr	r4, [r6, #12]
   16a62:	e7a5      	b.n	169b0 <setvbuf+0x28>
   16a64:	2f00      	cmp	r7, #0
   16a66:	d0d9      	beq.n	16a1c <setvbuf+0x94>
   16a68:	69b3      	ldr	r3, [r6, #24]
   16a6a:	2b00      	cmp	r3, #0
   16a6c:	d102      	bne.n	16a74 <setvbuf+0xec>
   16a6e:	0030      	movs	r0, r6
   16a70:	f000 fa02 	bl	16e78 <__sinit>
   16a74:	9b00      	ldr	r3, [sp, #0]
   16a76:	2b01      	cmp	r3, #1
   16a78:	d103      	bne.n	16a82 <setvbuf+0xfa>
   16a7a:	89a3      	ldrh	r3, [r4, #12]
   16a7c:	9a00      	ldr	r2, [sp, #0]
   16a7e:	431a      	orrs	r2, r3
   16a80:	81a2      	strh	r2, [r4, #12]
   16a82:	2008      	movs	r0, #8
   16a84:	89a3      	ldrh	r3, [r4, #12]
   16a86:	6027      	str	r7, [r4, #0]
   16a88:	6127      	str	r7, [r4, #16]
   16a8a:	6165      	str	r5, [r4, #20]
   16a8c:	4018      	ands	r0, r3
   16a8e:	d018      	beq.n	16ac2 <setvbuf+0x13a>
   16a90:	2001      	movs	r0, #1
   16a92:	4018      	ands	r0, r3
   16a94:	2300      	movs	r3, #0
   16a96:	4298      	cmp	r0, r3
   16a98:	d011      	beq.n	16abe <setvbuf+0x136>
   16a9a:	426d      	negs	r5, r5
   16a9c:	60a3      	str	r3, [r4, #8]
   16a9e:	61a5      	str	r5, [r4, #24]
   16aa0:	0018      	movs	r0, r3
   16aa2:	e7d3      	b.n	16a4c <setvbuf+0xc4>
   16aa4:	9801      	ldr	r0, [sp, #4]
   16aa6:	f000 fae9 	bl	1707c <malloc>
   16aaa:	1e07      	subs	r7, r0, #0
   16aac:	d0c0      	beq.n	16a30 <setvbuf+0xa8>
   16aae:	2380      	movs	r3, #128	; 0x80
   16ab0:	89a2      	ldrh	r2, [r4, #12]
   16ab2:	9d01      	ldr	r5, [sp, #4]
   16ab4:	4313      	orrs	r3, r2
   16ab6:	81a3      	strh	r3, [r4, #12]
   16ab8:	e7d6      	b.n	16a68 <setvbuf+0xe0>
   16aba:	2000      	movs	r0, #0
   16abc:	e7ba      	b.n	16a34 <setvbuf+0xac>
   16abe:	60a5      	str	r5, [r4, #8]
   16ac0:	e7c4      	b.n	16a4c <setvbuf+0xc4>
   16ac2:	60a0      	str	r0, [r4, #8]
   16ac4:	e7c2      	b.n	16a4c <setvbuf+0xc4>
   16ac6:	2001      	movs	r0, #1
   16ac8:	4240      	negs	r0, r0
   16aca:	e7bf      	b.n	16a4c <setvbuf+0xc4>
   16acc:	20000020 	.word	0x20000020
   16ad0:	000184f4 	.word	0x000184f4
   16ad4:	fffff35c 	.word	0xfffff35c
   16ad8:	00018514 	.word	0x00018514
   16adc:	000184d4 	.word	0x000184d4

00016ae0 <__swbuf_r>:
   16ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16ae2:	0005      	movs	r5, r0
   16ae4:	000e      	movs	r6, r1
   16ae6:	0014      	movs	r4, r2
   16ae8:	2800      	cmp	r0, #0
   16aea:	d004      	beq.n	16af6 <__swbuf_r+0x16>
   16aec:	6983      	ldr	r3, [r0, #24]
   16aee:	2b00      	cmp	r3, #0
   16af0:	d101      	bne.n	16af6 <__swbuf_r+0x16>
   16af2:	f000 f9c1 	bl	16e78 <__sinit>
   16af6:	4b22      	ldr	r3, [pc, #136]	; (16b80 <__swbuf_r+0xa0>)
   16af8:	429c      	cmp	r4, r3
   16afa:	d12d      	bne.n	16b58 <__swbuf_r+0x78>
   16afc:	686c      	ldr	r4, [r5, #4]
   16afe:	69a3      	ldr	r3, [r4, #24]
   16b00:	60a3      	str	r3, [r4, #8]
   16b02:	89a3      	ldrh	r3, [r4, #12]
   16b04:	071b      	lsls	r3, r3, #28
   16b06:	d531      	bpl.n	16b6c <__swbuf_r+0x8c>
   16b08:	6923      	ldr	r3, [r4, #16]
   16b0a:	2b00      	cmp	r3, #0
   16b0c:	d02e      	beq.n	16b6c <__swbuf_r+0x8c>
   16b0e:	6823      	ldr	r3, [r4, #0]
   16b10:	6922      	ldr	r2, [r4, #16]
   16b12:	b2f7      	uxtb	r7, r6
   16b14:	1a98      	subs	r0, r3, r2
   16b16:	6963      	ldr	r3, [r4, #20]
   16b18:	b2f6      	uxtb	r6, r6
   16b1a:	4298      	cmp	r0, r3
   16b1c:	db05      	blt.n	16b2a <__swbuf_r+0x4a>
   16b1e:	0021      	movs	r1, r4
   16b20:	0028      	movs	r0, r5
   16b22:	f000 f93b 	bl	16d9c <_fflush_r>
   16b26:	2800      	cmp	r0, #0
   16b28:	d126      	bne.n	16b78 <__swbuf_r+0x98>
   16b2a:	68a3      	ldr	r3, [r4, #8]
   16b2c:	3001      	adds	r0, #1
   16b2e:	3b01      	subs	r3, #1
   16b30:	60a3      	str	r3, [r4, #8]
   16b32:	6823      	ldr	r3, [r4, #0]
   16b34:	1c5a      	adds	r2, r3, #1
   16b36:	6022      	str	r2, [r4, #0]
   16b38:	701f      	strb	r7, [r3, #0]
   16b3a:	6963      	ldr	r3, [r4, #20]
   16b3c:	4298      	cmp	r0, r3
   16b3e:	d004      	beq.n	16b4a <__swbuf_r+0x6a>
   16b40:	89a3      	ldrh	r3, [r4, #12]
   16b42:	07db      	lsls	r3, r3, #31
   16b44:	d51a      	bpl.n	16b7c <__swbuf_r+0x9c>
   16b46:	2e0a      	cmp	r6, #10
   16b48:	d118      	bne.n	16b7c <__swbuf_r+0x9c>
   16b4a:	0021      	movs	r1, r4
   16b4c:	0028      	movs	r0, r5
   16b4e:	f000 f925 	bl	16d9c <_fflush_r>
   16b52:	2800      	cmp	r0, #0
   16b54:	d012      	beq.n	16b7c <__swbuf_r+0x9c>
   16b56:	e00f      	b.n	16b78 <__swbuf_r+0x98>
   16b58:	4b0a      	ldr	r3, [pc, #40]	; (16b84 <__swbuf_r+0xa4>)
   16b5a:	429c      	cmp	r4, r3
   16b5c:	d101      	bne.n	16b62 <__swbuf_r+0x82>
   16b5e:	68ac      	ldr	r4, [r5, #8]
   16b60:	e7cd      	b.n	16afe <__swbuf_r+0x1e>
   16b62:	4b09      	ldr	r3, [pc, #36]	; (16b88 <__swbuf_r+0xa8>)
   16b64:	429c      	cmp	r4, r3
   16b66:	d1ca      	bne.n	16afe <__swbuf_r+0x1e>
   16b68:	68ec      	ldr	r4, [r5, #12]
   16b6a:	e7c8      	b.n	16afe <__swbuf_r+0x1e>
   16b6c:	0021      	movs	r1, r4
   16b6e:	0028      	movs	r0, r5
   16b70:	f000 f80c 	bl	16b8c <__swsetup_r>
   16b74:	2800      	cmp	r0, #0
   16b76:	d0ca      	beq.n	16b0e <__swbuf_r+0x2e>
   16b78:	2601      	movs	r6, #1
   16b7a:	4276      	negs	r6, r6
   16b7c:	0030      	movs	r0, r6
   16b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16b80:	000184f4 	.word	0x000184f4
   16b84:	00018514 	.word	0x00018514
   16b88:	000184d4 	.word	0x000184d4

00016b8c <__swsetup_r>:
   16b8c:	4b36      	ldr	r3, [pc, #216]	; (16c68 <__swsetup_r+0xdc>)
   16b8e:	b570      	push	{r4, r5, r6, lr}
   16b90:	681d      	ldr	r5, [r3, #0]
   16b92:	0006      	movs	r6, r0
   16b94:	000c      	movs	r4, r1
   16b96:	2d00      	cmp	r5, #0
   16b98:	d005      	beq.n	16ba6 <__swsetup_r+0x1a>
   16b9a:	69ab      	ldr	r3, [r5, #24]
   16b9c:	2b00      	cmp	r3, #0
   16b9e:	d102      	bne.n	16ba6 <__swsetup_r+0x1a>
   16ba0:	0028      	movs	r0, r5
   16ba2:	f000 f969 	bl	16e78 <__sinit>
   16ba6:	4b31      	ldr	r3, [pc, #196]	; (16c6c <__swsetup_r+0xe0>)
   16ba8:	429c      	cmp	r4, r3
   16baa:	d10f      	bne.n	16bcc <__swsetup_r+0x40>
   16bac:	686c      	ldr	r4, [r5, #4]
   16bae:	230c      	movs	r3, #12
   16bb0:	5ee2      	ldrsh	r2, [r4, r3]
   16bb2:	b293      	uxth	r3, r2
   16bb4:	0719      	lsls	r1, r3, #28
   16bb6:	d42d      	bmi.n	16c14 <__swsetup_r+0x88>
   16bb8:	06d9      	lsls	r1, r3, #27
   16bba:	d411      	bmi.n	16be0 <__swsetup_r+0x54>
   16bbc:	2309      	movs	r3, #9
   16bbe:	2001      	movs	r0, #1
   16bc0:	6033      	str	r3, [r6, #0]
   16bc2:	3337      	adds	r3, #55	; 0x37
   16bc4:	4313      	orrs	r3, r2
   16bc6:	81a3      	strh	r3, [r4, #12]
   16bc8:	4240      	negs	r0, r0
   16bca:	bd70      	pop	{r4, r5, r6, pc}
   16bcc:	4b28      	ldr	r3, [pc, #160]	; (16c70 <__swsetup_r+0xe4>)
   16bce:	429c      	cmp	r4, r3
   16bd0:	d101      	bne.n	16bd6 <__swsetup_r+0x4a>
   16bd2:	68ac      	ldr	r4, [r5, #8]
   16bd4:	e7eb      	b.n	16bae <__swsetup_r+0x22>
   16bd6:	4b27      	ldr	r3, [pc, #156]	; (16c74 <__swsetup_r+0xe8>)
   16bd8:	429c      	cmp	r4, r3
   16bda:	d1e8      	bne.n	16bae <__swsetup_r+0x22>
   16bdc:	68ec      	ldr	r4, [r5, #12]
   16bde:	e7e6      	b.n	16bae <__swsetup_r+0x22>
   16be0:	075b      	lsls	r3, r3, #29
   16be2:	d513      	bpl.n	16c0c <__swsetup_r+0x80>
   16be4:	6b61      	ldr	r1, [r4, #52]	; 0x34
   16be6:	2900      	cmp	r1, #0
   16be8:	d008      	beq.n	16bfc <__swsetup_r+0x70>
   16bea:	0023      	movs	r3, r4
   16bec:	3344      	adds	r3, #68	; 0x44
   16bee:	4299      	cmp	r1, r3
   16bf0:	d002      	beq.n	16bf8 <__swsetup_r+0x6c>
   16bf2:	0030      	movs	r0, r6
   16bf4:	f000 fa58 	bl	170a8 <_free_r>
   16bf8:	2300      	movs	r3, #0
   16bfa:	6363      	str	r3, [r4, #52]	; 0x34
   16bfc:	2224      	movs	r2, #36	; 0x24
   16bfe:	89a3      	ldrh	r3, [r4, #12]
   16c00:	4393      	bics	r3, r2
   16c02:	81a3      	strh	r3, [r4, #12]
   16c04:	2300      	movs	r3, #0
   16c06:	6063      	str	r3, [r4, #4]
   16c08:	6923      	ldr	r3, [r4, #16]
   16c0a:	6023      	str	r3, [r4, #0]
   16c0c:	2308      	movs	r3, #8
   16c0e:	89a2      	ldrh	r2, [r4, #12]
   16c10:	4313      	orrs	r3, r2
   16c12:	81a3      	strh	r3, [r4, #12]
   16c14:	6923      	ldr	r3, [r4, #16]
   16c16:	2b00      	cmp	r3, #0
   16c18:	d10b      	bne.n	16c32 <__swsetup_r+0xa6>
   16c1a:	21a0      	movs	r1, #160	; 0xa0
   16c1c:	2280      	movs	r2, #128	; 0x80
   16c1e:	89a3      	ldrh	r3, [r4, #12]
   16c20:	0089      	lsls	r1, r1, #2
   16c22:	0092      	lsls	r2, r2, #2
   16c24:	400b      	ands	r3, r1
   16c26:	4293      	cmp	r3, r2
   16c28:	d003      	beq.n	16c32 <__swsetup_r+0xa6>
   16c2a:	0021      	movs	r1, r4
   16c2c:	0030      	movs	r0, r6
   16c2e:	f000 f9e1 	bl	16ff4 <__smakebuf_r>
   16c32:	2301      	movs	r3, #1
   16c34:	89a2      	ldrh	r2, [r4, #12]
   16c36:	4013      	ands	r3, r2
   16c38:	d011      	beq.n	16c5e <__swsetup_r+0xd2>
   16c3a:	2300      	movs	r3, #0
   16c3c:	60a3      	str	r3, [r4, #8]
   16c3e:	6963      	ldr	r3, [r4, #20]
   16c40:	425b      	negs	r3, r3
   16c42:	61a3      	str	r3, [r4, #24]
   16c44:	2000      	movs	r0, #0
   16c46:	6923      	ldr	r3, [r4, #16]
   16c48:	4283      	cmp	r3, r0
   16c4a:	d1be      	bne.n	16bca <__swsetup_r+0x3e>
   16c4c:	230c      	movs	r3, #12
   16c4e:	5ee2      	ldrsh	r2, [r4, r3]
   16c50:	0613      	lsls	r3, r2, #24
   16c52:	d5ba      	bpl.n	16bca <__swsetup_r+0x3e>
   16c54:	2340      	movs	r3, #64	; 0x40
   16c56:	4313      	orrs	r3, r2
   16c58:	81a3      	strh	r3, [r4, #12]
   16c5a:	3801      	subs	r0, #1
   16c5c:	e7b5      	b.n	16bca <__swsetup_r+0x3e>
   16c5e:	0792      	lsls	r2, r2, #30
   16c60:	d400      	bmi.n	16c64 <__swsetup_r+0xd8>
   16c62:	6963      	ldr	r3, [r4, #20]
   16c64:	60a3      	str	r3, [r4, #8]
   16c66:	e7ed      	b.n	16c44 <__swsetup_r+0xb8>
   16c68:	20000020 	.word	0x20000020
   16c6c:	000184f4 	.word	0x000184f4
   16c70:	00018514 	.word	0x00018514
   16c74:	000184d4 	.word	0x000184d4

00016c78 <abort>:
   16c78:	b510      	push	{r4, lr}
   16c7a:	2006      	movs	r0, #6
   16c7c:	f000 fb2e 	bl	172dc <raise>
   16c80:	2001      	movs	r0, #1
   16c82:	f7f0 fa39 	bl	70f8 <_exit>
   16c86:	Address 0x00016c86 is out of bounds.


00016c88 <__sflush_r>:
   16c88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16c8a:	898a      	ldrh	r2, [r1, #12]
   16c8c:	0005      	movs	r5, r0
   16c8e:	000c      	movs	r4, r1
   16c90:	0713      	lsls	r3, r2, #28
   16c92:	d460      	bmi.n	16d56 <__sflush_r+0xce>
   16c94:	684b      	ldr	r3, [r1, #4]
   16c96:	2b00      	cmp	r3, #0
   16c98:	dc04      	bgt.n	16ca4 <__sflush_r+0x1c>
   16c9a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   16c9c:	2b00      	cmp	r3, #0
   16c9e:	dc01      	bgt.n	16ca4 <__sflush_r+0x1c>
   16ca0:	2000      	movs	r0, #0
   16ca2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   16ca4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   16ca6:	2f00      	cmp	r7, #0
   16ca8:	d0fa      	beq.n	16ca0 <__sflush_r+0x18>
   16caa:	2300      	movs	r3, #0
   16cac:	682e      	ldr	r6, [r5, #0]
   16cae:	602b      	str	r3, [r5, #0]
   16cb0:	2380      	movs	r3, #128	; 0x80
   16cb2:	015b      	lsls	r3, r3, #5
   16cb4:	401a      	ands	r2, r3
   16cb6:	d034      	beq.n	16d22 <__sflush_r+0x9a>
   16cb8:	6d60      	ldr	r0, [r4, #84]	; 0x54
   16cba:	89a3      	ldrh	r3, [r4, #12]
   16cbc:	075b      	lsls	r3, r3, #29
   16cbe:	d506      	bpl.n	16cce <__sflush_r+0x46>
   16cc0:	6863      	ldr	r3, [r4, #4]
   16cc2:	1ac0      	subs	r0, r0, r3
   16cc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   16cc6:	2b00      	cmp	r3, #0
   16cc8:	d001      	beq.n	16cce <__sflush_r+0x46>
   16cca:	6c23      	ldr	r3, [r4, #64]	; 0x40
   16ccc:	1ac0      	subs	r0, r0, r3
   16cce:	0002      	movs	r2, r0
   16cd0:	6a21      	ldr	r1, [r4, #32]
   16cd2:	2300      	movs	r3, #0
   16cd4:	0028      	movs	r0, r5
   16cd6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   16cd8:	47b8      	blx	r7
   16cda:	89a1      	ldrh	r1, [r4, #12]
   16cdc:	1c43      	adds	r3, r0, #1
   16cde:	d106      	bne.n	16cee <__sflush_r+0x66>
   16ce0:	682b      	ldr	r3, [r5, #0]
   16ce2:	2b1d      	cmp	r3, #29
   16ce4:	d831      	bhi.n	16d4a <__sflush_r+0xc2>
   16ce6:	4a2c      	ldr	r2, [pc, #176]	; (16d98 <__sflush_r+0x110>)
   16ce8:	40da      	lsrs	r2, r3
   16cea:	07d3      	lsls	r3, r2, #31
   16cec:	d52d      	bpl.n	16d4a <__sflush_r+0xc2>
   16cee:	2300      	movs	r3, #0
   16cf0:	6063      	str	r3, [r4, #4]
   16cf2:	6923      	ldr	r3, [r4, #16]
   16cf4:	6023      	str	r3, [r4, #0]
   16cf6:	04cb      	lsls	r3, r1, #19
   16cf8:	d505      	bpl.n	16d06 <__sflush_r+0x7e>
   16cfa:	1c43      	adds	r3, r0, #1
   16cfc:	d102      	bne.n	16d04 <__sflush_r+0x7c>
   16cfe:	682b      	ldr	r3, [r5, #0]
   16d00:	2b00      	cmp	r3, #0
   16d02:	d100      	bne.n	16d06 <__sflush_r+0x7e>
   16d04:	6560      	str	r0, [r4, #84]	; 0x54
   16d06:	6b61      	ldr	r1, [r4, #52]	; 0x34
   16d08:	602e      	str	r6, [r5, #0]
   16d0a:	2900      	cmp	r1, #0
   16d0c:	d0c8      	beq.n	16ca0 <__sflush_r+0x18>
   16d0e:	0023      	movs	r3, r4
   16d10:	3344      	adds	r3, #68	; 0x44
   16d12:	4299      	cmp	r1, r3
   16d14:	d002      	beq.n	16d1c <__sflush_r+0x94>
   16d16:	0028      	movs	r0, r5
   16d18:	f000 f9c6 	bl	170a8 <_free_r>
   16d1c:	2000      	movs	r0, #0
   16d1e:	6360      	str	r0, [r4, #52]	; 0x34
   16d20:	e7bf      	b.n	16ca2 <__sflush_r+0x1a>
   16d22:	2301      	movs	r3, #1
   16d24:	6a21      	ldr	r1, [r4, #32]
   16d26:	0028      	movs	r0, r5
   16d28:	47b8      	blx	r7
   16d2a:	1c43      	adds	r3, r0, #1
   16d2c:	d1c5      	bne.n	16cba <__sflush_r+0x32>
   16d2e:	682b      	ldr	r3, [r5, #0]
   16d30:	2b00      	cmp	r3, #0
   16d32:	d0c2      	beq.n	16cba <__sflush_r+0x32>
   16d34:	2b1d      	cmp	r3, #29
   16d36:	d001      	beq.n	16d3c <__sflush_r+0xb4>
   16d38:	2b16      	cmp	r3, #22
   16d3a:	d101      	bne.n	16d40 <__sflush_r+0xb8>
   16d3c:	602e      	str	r6, [r5, #0]
   16d3e:	e7af      	b.n	16ca0 <__sflush_r+0x18>
   16d40:	2340      	movs	r3, #64	; 0x40
   16d42:	89a2      	ldrh	r2, [r4, #12]
   16d44:	4313      	orrs	r3, r2
   16d46:	81a3      	strh	r3, [r4, #12]
   16d48:	e7ab      	b.n	16ca2 <__sflush_r+0x1a>
   16d4a:	2340      	movs	r3, #64	; 0x40
   16d4c:	430b      	orrs	r3, r1
   16d4e:	2001      	movs	r0, #1
   16d50:	81a3      	strh	r3, [r4, #12]
   16d52:	4240      	negs	r0, r0
   16d54:	e7a5      	b.n	16ca2 <__sflush_r+0x1a>
   16d56:	690f      	ldr	r7, [r1, #16]
   16d58:	2f00      	cmp	r7, #0
   16d5a:	d0a1      	beq.n	16ca0 <__sflush_r+0x18>
   16d5c:	680b      	ldr	r3, [r1, #0]
   16d5e:	600f      	str	r7, [r1, #0]
   16d60:	1bdb      	subs	r3, r3, r7
   16d62:	9301      	str	r3, [sp, #4]
   16d64:	2300      	movs	r3, #0
   16d66:	0792      	lsls	r2, r2, #30
   16d68:	d100      	bne.n	16d6c <__sflush_r+0xe4>
   16d6a:	694b      	ldr	r3, [r1, #20]
   16d6c:	60a3      	str	r3, [r4, #8]
   16d6e:	9b01      	ldr	r3, [sp, #4]
   16d70:	2b00      	cmp	r3, #0
   16d72:	dc00      	bgt.n	16d76 <__sflush_r+0xee>
   16d74:	e794      	b.n	16ca0 <__sflush_r+0x18>
   16d76:	9b01      	ldr	r3, [sp, #4]
   16d78:	003a      	movs	r2, r7
   16d7a:	6a21      	ldr	r1, [r4, #32]
   16d7c:	0028      	movs	r0, r5
   16d7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   16d80:	47b0      	blx	r6
   16d82:	2800      	cmp	r0, #0
   16d84:	dc03      	bgt.n	16d8e <__sflush_r+0x106>
   16d86:	2340      	movs	r3, #64	; 0x40
   16d88:	89a2      	ldrh	r2, [r4, #12]
   16d8a:	4313      	orrs	r3, r2
   16d8c:	e7df      	b.n	16d4e <__sflush_r+0xc6>
   16d8e:	9b01      	ldr	r3, [sp, #4]
   16d90:	183f      	adds	r7, r7, r0
   16d92:	1a1b      	subs	r3, r3, r0
   16d94:	9301      	str	r3, [sp, #4]
   16d96:	e7ea      	b.n	16d6e <__sflush_r+0xe6>
   16d98:	20400001 	.word	0x20400001

00016d9c <_fflush_r>:
   16d9c:	690b      	ldr	r3, [r1, #16]
   16d9e:	b570      	push	{r4, r5, r6, lr}
   16da0:	0005      	movs	r5, r0
   16da2:	000c      	movs	r4, r1
   16da4:	2b00      	cmp	r3, #0
   16da6:	d101      	bne.n	16dac <_fflush_r+0x10>
   16da8:	2000      	movs	r0, #0
   16daa:	bd70      	pop	{r4, r5, r6, pc}
   16dac:	2800      	cmp	r0, #0
   16dae:	d004      	beq.n	16dba <_fflush_r+0x1e>
   16db0:	6983      	ldr	r3, [r0, #24]
   16db2:	2b00      	cmp	r3, #0
   16db4:	d101      	bne.n	16dba <_fflush_r+0x1e>
   16db6:	f000 f85f 	bl	16e78 <__sinit>
   16dba:	4b0b      	ldr	r3, [pc, #44]	; (16de8 <_fflush_r+0x4c>)
   16dbc:	429c      	cmp	r4, r3
   16dbe:	d109      	bne.n	16dd4 <_fflush_r+0x38>
   16dc0:	686c      	ldr	r4, [r5, #4]
   16dc2:	220c      	movs	r2, #12
   16dc4:	5ea3      	ldrsh	r3, [r4, r2]
   16dc6:	2b00      	cmp	r3, #0
   16dc8:	d0ee      	beq.n	16da8 <_fflush_r+0xc>
   16dca:	0021      	movs	r1, r4
   16dcc:	0028      	movs	r0, r5
   16dce:	f7ff ff5b 	bl	16c88 <__sflush_r>
   16dd2:	e7ea      	b.n	16daa <_fflush_r+0xe>
   16dd4:	4b05      	ldr	r3, [pc, #20]	; (16dec <_fflush_r+0x50>)
   16dd6:	429c      	cmp	r4, r3
   16dd8:	d101      	bne.n	16dde <_fflush_r+0x42>
   16dda:	68ac      	ldr	r4, [r5, #8]
   16ddc:	e7f1      	b.n	16dc2 <_fflush_r+0x26>
   16dde:	4b04      	ldr	r3, [pc, #16]	; (16df0 <_fflush_r+0x54>)
   16de0:	429c      	cmp	r4, r3
   16de2:	d1ee      	bne.n	16dc2 <_fflush_r+0x26>
   16de4:	68ec      	ldr	r4, [r5, #12]
   16de6:	e7ec      	b.n	16dc2 <_fflush_r+0x26>
   16de8:	000184f4 	.word	0x000184f4
   16dec:	00018514 	.word	0x00018514
   16df0:	000184d4 	.word	0x000184d4

00016df4 <_cleanup_r>:
   16df4:	b510      	push	{r4, lr}
   16df6:	4902      	ldr	r1, [pc, #8]	; (16e00 <_cleanup_r+0xc>)
   16df8:	f000 f8b2 	bl	16f60 <_fwalk_reent>
   16dfc:	bd10      	pop	{r4, pc}
   16dfe:	46c0      	nop			; (mov r8, r8)
   16e00:	00016d9d 	.word	0x00016d9d

00016e04 <std.isra.0>:
   16e04:	2300      	movs	r3, #0
   16e06:	b510      	push	{r4, lr}
   16e08:	0004      	movs	r4, r0
   16e0a:	6003      	str	r3, [r0, #0]
   16e0c:	6043      	str	r3, [r0, #4]
   16e0e:	6083      	str	r3, [r0, #8]
   16e10:	8181      	strh	r1, [r0, #12]
   16e12:	6643      	str	r3, [r0, #100]	; 0x64
   16e14:	81c2      	strh	r2, [r0, #14]
   16e16:	6103      	str	r3, [r0, #16]
   16e18:	6143      	str	r3, [r0, #20]
   16e1a:	6183      	str	r3, [r0, #24]
   16e1c:	0019      	movs	r1, r3
   16e1e:	2208      	movs	r2, #8
   16e20:	305c      	adds	r0, #92	; 0x5c
   16e22:	f7ff f9d1 	bl	161c8 <memset>
   16e26:	4b05      	ldr	r3, [pc, #20]	; (16e3c <std.isra.0+0x38>)
   16e28:	6224      	str	r4, [r4, #32]
   16e2a:	6263      	str	r3, [r4, #36]	; 0x24
   16e2c:	4b04      	ldr	r3, [pc, #16]	; (16e40 <std.isra.0+0x3c>)
   16e2e:	62a3      	str	r3, [r4, #40]	; 0x28
   16e30:	4b04      	ldr	r3, [pc, #16]	; (16e44 <std.isra.0+0x40>)
   16e32:	62e3      	str	r3, [r4, #44]	; 0x2c
   16e34:	4b04      	ldr	r3, [pc, #16]	; (16e48 <std.isra.0+0x44>)
   16e36:	6323      	str	r3, [r4, #48]	; 0x30
   16e38:	bd10      	pop	{r4, pc}
   16e3a:	46c0      	nop			; (mov r8, r8)
   16e3c:	0001731d 	.word	0x0001731d
   16e40:	00017345 	.word	0x00017345
   16e44:	0001737d 	.word	0x0001737d
   16e48:	000173a9 	.word	0x000173a9

00016e4c <__sfmoreglue>:
   16e4c:	b570      	push	{r4, r5, r6, lr}
   16e4e:	2568      	movs	r5, #104	; 0x68
   16e50:	1e4a      	subs	r2, r1, #1
   16e52:	4355      	muls	r5, r2
   16e54:	000e      	movs	r6, r1
   16e56:	0029      	movs	r1, r5
   16e58:	3174      	adds	r1, #116	; 0x74
   16e5a:	f000 f96f 	bl	1713c <_malloc_r>
   16e5e:	1e04      	subs	r4, r0, #0
   16e60:	d008      	beq.n	16e74 <__sfmoreglue+0x28>
   16e62:	2100      	movs	r1, #0
   16e64:	002a      	movs	r2, r5
   16e66:	6001      	str	r1, [r0, #0]
   16e68:	6046      	str	r6, [r0, #4]
   16e6a:	300c      	adds	r0, #12
   16e6c:	60a0      	str	r0, [r4, #8]
   16e6e:	3268      	adds	r2, #104	; 0x68
   16e70:	f7ff f9aa 	bl	161c8 <memset>
   16e74:	0020      	movs	r0, r4
   16e76:	bd70      	pop	{r4, r5, r6, pc}

00016e78 <__sinit>:
   16e78:	6983      	ldr	r3, [r0, #24]
   16e7a:	b513      	push	{r0, r1, r4, lr}
   16e7c:	0004      	movs	r4, r0
   16e7e:	2b00      	cmp	r3, #0
   16e80:	d128      	bne.n	16ed4 <__sinit+0x5c>
   16e82:	6483      	str	r3, [r0, #72]	; 0x48
   16e84:	64c3      	str	r3, [r0, #76]	; 0x4c
   16e86:	6503      	str	r3, [r0, #80]	; 0x50
   16e88:	4b13      	ldr	r3, [pc, #76]	; (16ed8 <__sinit+0x60>)
   16e8a:	4a14      	ldr	r2, [pc, #80]	; (16edc <__sinit+0x64>)
   16e8c:	681b      	ldr	r3, [r3, #0]
   16e8e:	6282      	str	r2, [r0, #40]	; 0x28
   16e90:	9301      	str	r3, [sp, #4]
   16e92:	4298      	cmp	r0, r3
   16e94:	d101      	bne.n	16e9a <__sinit+0x22>
   16e96:	2301      	movs	r3, #1
   16e98:	6183      	str	r3, [r0, #24]
   16e9a:	0020      	movs	r0, r4
   16e9c:	f000 f820 	bl	16ee0 <__sfp>
   16ea0:	6060      	str	r0, [r4, #4]
   16ea2:	0020      	movs	r0, r4
   16ea4:	f000 f81c 	bl	16ee0 <__sfp>
   16ea8:	60a0      	str	r0, [r4, #8]
   16eaa:	0020      	movs	r0, r4
   16eac:	f000 f818 	bl	16ee0 <__sfp>
   16eb0:	2200      	movs	r2, #0
   16eb2:	60e0      	str	r0, [r4, #12]
   16eb4:	2104      	movs	r1, #4
   16eb6:	6860      	ldr	r0, [r4, #4]
   16eb8:	f7ff ffa4 	bl	16e04 <std.isra.0>
   16ebc:	2201      	movs	r2, #1
   16ebe:	2109      	movs	r1, #9
   16ec0:	68a0      	ldr	r0, [r4, #8]
   16ec2:	f7ff ff9f 	bl	16e04 <std.isra.0>
   16ec6:	2202      	movs	r2, #2
   16ec8:	2112      	movs	r1, #18
   16eca:	68e0      	ldr	r0, [r4, #12]
   16ecc:	f7ff ff9a 	bl	16e04 <std.isra.0>
   16ed0:	2301      	movs	r3, #1
   16ed2:	61a3      	str	r3, [r4, #24]
   16ed4:	bd13      	pop	{r0, r1, r4, pc}
   16ed6:	46c0      	nop			; (mov r8, r8)
   16ed8:	0001849c 	.word	0x0001849c
   16edc:	00016df5 	.word	0x00016df5

00016ee0 <__sfp>:
   16ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16ee2:	4b1e      	ldr	r3, [pc, #120]	; (16f5c <__sfp+0x7c>)
   16ee4:	0007      	movs	r7, r0
   16ee6:	681e      	ldr	r6, [r3, #0]
   16ee8:	69b3      	ldr	r3, [r6, #24]
   16eea:	2b00      	cmp	r3, #0
   16eec:	d102      	bne.n	16ef4 <__sfp+0x14>
   16eee:	0030      	movs	r0, r6
   16ef0:	f7ff ffc2 	bl	16e78 <__sinit>
   16ef4:	3648      	adds	r6, #72	; 0x48
   16ef6:	68b4      	ldr	r4, [r6, #8]
   16ef8:	6873      	ldr	r3, [r6, #4]
   16efa:	3b01      	subs	r3, #1
   16efc:	d504      	bpl.n	16f08 <__sfp+0x28>
   16efe:	6833      	ldr	r3, [r6, #0]
   16f00:	2b00      	cmp	r3, #0
   16f02:	d007      	beq.n	16f14 <__sfp+0x34>
   16f04:	6836      	ldr	r6, [r6, #0]
   16f06:	e7f6      	b.n	16ef6 <__sfp+0x16>
   16f08:	220c      	movs	r2, #12
   16f0a:	5ea5      	ldrsh	r5, [r4, r2]
   16f0c:	2d00      	cmp	r5, #0
   16f0e:	d00d      	beq.n	16f2c <__sfp+0x4c>
   16f10:	3468      	adds	r4, #104	; 0x68
   16f12:	e7f2      	b.n	16efa <__sfp+0x1a>
   16f14:	2104      	movs	r1, #4
   16f16:	0038      	movs	r0, r7
   16f18:	f7ff ff98 	bl	16e4c <__sfmoreglue>
   16f1c:	6030      	str	r0, [r6, #0]
   16f1e:	2800      	cmp	r0, #0
   16f20:	d1f0      	bne.n	16f04 <__sfp+0x24>
   16f22:	230c      	movs	r3, #12
   16f24:	0004      	movs	r4, r0
   16f26:	603b      	str	r3, [r7, #0]
   16f28:	0020      	movs	r0, r4
   16f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16f2c:	2301      	movs	r3, #1
   16f2e:	0020      	movs	r0, r4
   16f30:	425b      	negs	r3, r3
   16f32:	81e3      	strh	r3, [r4, #14]
   16f34:	3302      	adds	r3, #2
   16f36:	81a3      	strh	r3, [r4, #12]
   16f38:	6665      	str	r5, [r4, #100]	; 0x64
   16f3a:	6025      	str	r5, [r4, #0]
   16f3c:	60a5      	str	r5, [r4, #8]
   16f3e:	6065      	str	r5, [r4, #4]
   16f40:	6125      	str	r5, [r4, #16]
   16f42:	6165      	str	r5, [r4, #20]
   16f44:	61a5      	str	r5, [r4, #24]
   16f46:	2208      	movs	r2, #8
   16f48:	0029      	movs	r1, r5
   16f4a:	305c      	adds	r0, #92	; 0x5c
   16f4c:	f7ff f93c 	bl	161c8 <memset>
   16f50:	6365      	str	r5, [r4, #52]	; 0x34
   16f52:	63a5      	str	r5, [r4, #56]	; 0x38
   16f54:	64a5      	str	r5, [r4, #72]	; 0x48
   16f56:	64e5      	str	r5, [r4, #76]	; 0x4c
   16f58:	e7e6      	b.n	16f28 <__sfp+0x48>
   16f5a:	46c0      	nop			; (mov r8, r8)
   16f5c:	0001849c 	.word	0x0001849c

00016f60 <_fwalk_reent>:
   16f60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16f62:	0004      	movs	r4, r0
   16f64:	0007      	movs	r7, r0
   16f66:	2600      	movs	r6, #0
   16f68:	9101      	str	r1, [sp, #4]
   16f6a:	3448      	adds	r4, #72	; 0x48
   16f6c:	2c00      	cmp	r4, #0
   16f6e:	d101      	bne.n	16f74 <_fwalk_reent+0x14>
   16f70:	0030      	movs	r0, r6
   16f72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   16f74:	6863      	ldr	r3, [r4, #4]
   16f76:	68a5      	ldr	r5, [r4, #8]
   16f78:	9300      	str	r3, [sp, #0]
   16f7a:	9b00      	ldr	r3, [sp, #0]
   16f7c:	3b01      	subs	r3, #1
   16f7e:	9300      	str	r3, [sp, #0]
   16f80:	d501      	bpl.n	16f86 <_fwalk_reent+0x26>
   16f82:	6824      	ldr	r4, [r4, #0]
   16f84:	e7f2      	b.n	16f6c <_fwalk_reent+0xc>
   16f86:	89ab      	ldrh	r3, [r5, #12]
   16f88:	2b01      	cmp	r3, #1
   16f8a:	d908      	bls.n	16f9e <_fwalk_reent+0x3e>
   16f8c:	220e      	movs	r2, #14
   16f8e:	5eab      	ldrsh	r3, [r5, r2]
   16f90:	3301      	adds	r3, #1
   16f92:	d004      	beq.n	16f9e <_fwalk_reent+0x3e>
   16f94:	0029      	movs	r1, r5
   16f96:	0038      	movs	r0, r7
   16f98:	9b01      	ldr	r3, [sp, #4]
   16f9a:	4798      	blx	r3
   16f9c:	4306      	orrs	r6, r0
   16f9e:	3568      	adds	r5, #104	; 0x68
   16fa0:	e7eb      	b.n	16f7a <_fwalk_reent+0x1a>
   16fa2:	Address 0x00016fa2 is out of bounds.


00016fa4 <__swhatbuf_r>:
   16fa4:	b570      	push	{r4, r5, r6, lr}
   16fa6:	000e      	movs	r6, r1
   16fa8:	001d      	movs	r5, r3
   16faa:	230e      	movs	r3, #14
   16fac:	5ec9      	ldrsh	r1, [r1, r3]
   16fae:	b090      	sub	sp, #64	; 0x40
   16fb0:	0014      	movs	r4, r2
   16fb2:	2900      	cmp	r1, #0
   16fb4:	da07      	bge.n	16fc6 <__swhatbuf_r+0x22>
   16fb6:	2300      	movs	r3, #0
   16fb8:	602b      	str	r3, [r5, #0]
   16fba:	89b3      	ldrh	r3, [r6, #12]
   16fbc:	061b      	lsls	r3, r3, #24
   16fbe:	d411      	bmi.n	16fe4 <__swhatbuf_r+0x40>
   16fc0:	2380      	movs	r3, #128	; 0x80
   16fc2:	00db      	lsls	r3, r3, #3
   16fc4:	e00f      	b.n	16fe6 <__swhatbuf_r+0x42>
   16fc6:	aa01      	add	r2, sp, #4
   16fc8:	f000 fa1a 	bl	17400 <_fstat_r>
   16fcc:	2800      	cmp	r0, #0
   16fce:	dbf2      	blt.n	16fb6 <__swhatbuf_r+0x12>
   16fd0:	22f0      	movs	r2, #240	; 0xf0
   16fd2:	9b02      	ldr	r3, [sp, #8]
   16fd4:	0212      	lsls	r2, r2, #8
   16fd6:	4013      	ands	r3, r2
   16fd8:	4a05      	ldr	r2, [pc, #20]	; (16ff0 <__swhatbuf_r+0x4c>)
   16fda:	189b      	adds	r3, r3, r2
   16fdc:	425a      	negs	r2, r3
   16fde:	4153      	adcs	r3, r2
   16fe0:	602b      	str	r3, [r5, #0]
   16fe2:	e7ed      	b.n	16fc0 <__swhatbuf_r+0x1c>
   16fe4:	2340      	movs	r3, #64	; 0x40
   16fe6:	2000      	movs	r0, #0
   16fe8:	6023      	str	r3, [r4, #0]
   16fea:	b010      	add	sp, #64	; 0x40
   16fec:	bd70      	pop	{r4, r5, r6, pc}
   16fee:	46c0      	nop			; (mov r8, r8)
   16ff0:	ffffe000 	.word	0xffffe000

00016ff4 <__smakebuf_r>:
   16ff4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16ff6:	2602      	movs	r6, #2
   16ff8:	898b      	ldrh	r3, [r1, #12]
   16ffa:	0005      	movs	r5, r0
   16ffc:	000c      	movs	r4, r1
   16ffe:	4233      	tst	r3, r6
   17000:	d006      	beq.n	17010 <__smakebuf_r+0x1c>
   17002:	0023      	movs	r3, r4
   17004:	3347      	adds	r3, #71	; 0x47
   17006:	6023      	str	r3, [r4, #0]
   17008:	6123      	str	r3, [r4, #16]
   1700a:	2301      	movs	r3, #1
   1700c:	6163      	str	r3, [r4, #20]
   1700e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   17010:	ab01      	add	r3, sp, #4
   17012:	466a      	mov	r2, sp
   17014:	f7ff ffc6 	bl	16fa4 <__swhatbuf_r>
   17018:	9900      	ldr	r1, [sp, #0]
   1701a:	0007      	movs	r7, r0
   1701c:	0028      	movs	r0, r5
   1701e:	f000 f88d 	bl	1713c <_malloc_r>
   17022:	2800      	cmp	r0, #0
   17024:	d108      	bne.n	17038 <__smakebuf_r+0x44>
   17026:	220c      	movs	r2, #12
   17028:	5ea3      	ldrsh	r3, [r4, r2]
   1702a:	059a      	lsls	r2, r3, #22
   1702c:	d4ef      	bmi.n	1700e <__smakebuf_r+0x1a>
   1702e:	2203      	movs	r2, #3
   17030:	4393      	bics	r3, r2
   17032:	431e      	orrs	r6, r3
   17034:	81a6      	strh	r6, [r4, #12]
   17036:	e7e4      	b.n	17002 <__smakebuf_r+0xe>
   17038:	4b0f      	ldr	r3, [pc, #60]	; (17078 <__smakebuf_r+0x84>)
   1703a:	62ab      	str	r3, [r5, #40]	; 0x28
   1703c:	2380      	movs	r3, #128	; 0x80
   1703e:	89a2      	ldrh	r2, [r4, #12]
   17040:	6020      	str	r0, [r4, #0]
   17042:	4313      	orrs	r3, r2
   17044:	81a3      	strh	r3, [r4, #12]
   17046:	9b00      	ldr	r3, [sp, #0]
   17048:	6120      	str	r0, [r4, #16]
   1704a:	6163      	str	r3, [r4, #20]
   1704c:	9b01      	ldr	r3, [sp, #4]
   1704e:	2b00      	cmp	r3, #0
   17050:	d00d      	beq.n	1706e <__smakebuf_r+0x7a>
   17052:	230e      	movs	r3, #14
   17054:	5ee1      	ldrsh	r1, [r4, r3]
   17056:	0028      	movs	r0, r5
   17058:	f000 f9e4 	bl	17424 <_isatty_r>
   1705c:	2800      	cmp	r0, #0
   1705e:	d006      	beq.n	1706e <__smakebuf_r+0x7a>
   17060:	2203      	movs	r2, #3
   17062:	89a3      	ldrh	r3, [r4, #12]
   17064:	4393      	bics	r3, r2
   17066:	001a      	movs	r2, r3
   17068:	2301      	movs	r3, #1
   1706a:	4313      	orrs	r3, r2
   1706c:	81a3      	strh	r3, [r4, #12]
   1706e:	89a0      	ldrh	r0, [r4, #12]
   17070:	4338      	orrs	r0, r7
   17072:	81a0      	strh	r0, [r4, #12]
   17074:	e7cb      	b.n	1700e <__smakebuf_r+0x1a>
   17076:	46c0      	nop			; (mov r8, r8)
   17078:	00016df5 	.word	0x00016df5

0001707c <malloc>:
   1707c:	b510      	push	{r4, lr}
   1707e:	4b03      	ldr	r3, [pc, #12]	; (1708c <malloc+0x10>)
   17080:	0001      	movs	r1, r0
   17082:	6818      	ldr	r0, [r3, #0]
   17084:	f000 f85a 	bl	1713c <_malloc_r>
   17088:	bd10      	pop	{r4, pc}
   1708a:	46c0      	nop			; (mov r8, r8)
   1708c:	20000020 	.word	0x20000020

00017090 <memchr>:
   17090:	b2c9      	uxtb	r1, r1
   17092:	1882      	adds	r2, r0, r2
   17094:	4290      	cmp	r0, r2
   17096:	d101      	bne.n	1709c <memchr+0xc>
   17098:	2000      	movs	r0, #0
   1709a:	4770      	bx	lr
   1709c:	7803      	ldrb	r3, [r0, #0]
   1709e:	428b      	cmp	r3, r1
   170a0:	d0fb      	beq.n	1709a <memchr+0xa>
   170a2:	3001      	adds	r0, #1
   170a4:	e7f6      	b.n	17094 <memchr+0x4>
   170a6:	Address 0x000170a6 is out of bounds.


000170a8 <_free_r>:
   170a8:	b570      	push	{r4, r5, r6, lr}
   170aa:	0005      	movs	r5, r0
   170ac:	2900      	cmp	r1, #0
   170ae:	d010      	beq.n	170d2 <_free_r+0x2a>
   170b0:	1f0c      	subs	r4, r1, #4
   170b2:	6823      	ldr	r3, [r4, #0]
   170b4:	2b00      	cmp	r3, #0
   170b6:	da00      	bge.n	170ba <_free_r+0x12>
   170b8:	18e4      	adds	r4, r4, r3
   170ba:	0028      	movs	r0, r5
   170bc:	f000 f9d8 	bl	17470 <__malloc_lock>
   170c0:	4a1d      	ldr	r2, [pc, #116]	; (17138 <_free_r+0x90>)
   170c2:	6813      	ldr	r3, [r2, #0]
   170c4:	2b00      	cmp	r3, #0
   170c6:	d105      	bne.n	170d4 <_free_r+0x2c>
   170c8:	6063      	str	r3, [r4, #4]
   170ca:	6014      	str	r4, [r2, #0]
   170cc:	0028      	movs	r0, r5
   170ce:	f000 f9d0 	bl	17472 <__malloc_unlock>
   170d2:	bd70      	pop	{r4, r5, r6, pc}
   170d4:	42a3      	cmp	r3, r4
   170d6:	d909      	bls.n	170ec <_free_r+0x44>
   170d8:	6821      	ldr	r1, [r4, #0]
   170da:	1860      	adds	r0, r4, r1
   170dc:	4283      	cmp	r3, r0
   170de:	d1f3      	bne.n	170c8 <_free_r+0x20>
   170e0:	6818      	ldr	r0, [r3, #0]
   170e2:	685b      	ldr	r3, [r3, #4]
   170e4:	1841      	adds	r1, r0, r1
   170e6:	6021      	str	r1, [r4, #0]
   170e8:	e7ee      	b.n	170c8 <_free_r+0x20>
   170ea:	0013      	movs	r3, r2
   170ec:	685a      	ldr	r2, [r3, #4]
   170ee:	2a00      	cmp	r2, #0
   170f0:	d001      	beq.n	170f6 <_free_r+0x4e>
   170f2:	42a2      	cmp	r2, r4
   170f4:	d9f9      	bls.n	170ea <_free_r+0x42>
   170f6:	6819      	ldr	r1, [r3, #0]
   170f8:	1858      	adds	r0, r3, r1
   170fa:	42a0      	cmp	r0, r4
   170fc:	d10b      	bne.n	17116 <_free_r+0x6e>
   170fe:	6820      	ldr	r0, [r4, #0]
   17100:	1809      	adds	r1, r1, r0
   17102:	1858      	adds	r0, r3, r1
   17104:	6019      	str	r1, [r3, #0]
   17106:	4282      	cmp	r2, r0
   17108:	d1e0      	bne.n	170cc <_free_r+0x24>
   1710a:	6810      	ldr	r0, [r2, #0]
   1710c:	6852      	ldr	r2, [r2, #4]
   1710e:	1841      	adds	r1, r0, r1
   17110:	6019      	str	r1, [r3, #0]
   17112:	605a      	str	r2, [r3, #4]
   17114:	e7da      	b.n	170cc <_free_r+0x24>
   17116:	42a0      	cmp	r0, r4
   17118:	d902      	bls.n	17120 <_free_r+0x78>
   1711a:	230c      	movs	r3, #12
   1711c:	602b      	str	r3, [r5, #0]
   1711e:	e7d5      	b.n	170cc <_free_r+0x24>
   17120:	6821      	ldr	r1, [r4, #0]
   17122:	1860      	adds	r0, r4, r1
   17124:	4282      	cmp	r2, r0
   17126:	d103      	bne.n	17130 <_free_r+0x88>
   17128:	6810      	ldr	r0, [r2, #0]
   1712a:	6852      	ldr	r2, [r2, #4]
   1712c:	1841      	adds	r1, r0, r1
   1712e:	6021      	str	r1, [r4, #0]
   17130:	6062      	str	r2, [r4, #4]
   17132:	605c      	str	r4, [r3, #4]
   17134:	e7ca      	b.n	170cc <_free_r+0x24>
   17136:	46c0      	nop			; (mov r8, r8)
   17138:	20001ec4 	.word	0x20001ec4

0001713c <_malloc_r>:
   1713c:	2303      	movs	r3, #3
   1713e:	b570      	push	{r4, r5, r6, lr}
   17140:	1ccd      	adds	r5, r1, #3
   17142:	439d      	bics	r5, r3
   17144:	3508      	adds	r5, #8
   17146:	0006      	movs	r6, r0
   17148:	2d0c      	cmp	r5, #12
   1714a:	d21e      	bcs.n	1718a <_malloc_r+0x4e>
   1714c:	250c      	movs	r5, #12
   1714e:	42a9      	cmp	r1, r5
   17150:	d81d      	bhi.n	1718e <_malloc_r+0x52>
   17152:	0030      	movs	r0, r6
   17154:	f000 f98c 	bl	17470 <__malloc_lock>
   17158:	4a25      	ldr	r2, [pc, #148]	; (171f0 <_malloc_r+0xb4>)
   1715a:	6814      	ldr	r4, [r2, #0]
   1715c:	0021      	movs	r1, r4
   1715e:	2900      	cmp	r1, #0
   17160:	d119      	bne.n	17196 <_malloc_r+0x5a>
   17162:	4c24      	ldr	r4, [pc, #144]	; (171f4 <_malloc_r+0xb8>)
   17164:	6823      	ldr	r3, [r4, #0]
   17166:	2b00      	cmp	r3, #0
   17168:	d103      	bne.n	17172 <_malloc_r+0x36>
   1716a:	0030      	movs	r0, r6
   1716c:	f000 f87a 	bl	17264 <_sbrk_r>
   17170:	6020      	str	r0, [r4, #0]
   17172:	0029      	movs	r1, r5
   17174:	0030      	movs	r0, r6
   17176:	f000 f875 	bl	17264 <_sbrk_r>
   1717a:	1c43      	adds	r3, r0, #1
   1717c:	d12c      	bne.n	171d8 <_malloc_r+0x9c>
   1717e:	230c      	movs	r3, #12
   17180:	0030      	movs	r0, r6
   17182:	6033      	str	r3, [r6, #0]
   17184:	f000 f975 	bl	17472 <__malloc_unlock>
   17188:	e003      	b.n	17192 <_malloc_r+0x56>
   1718a:	2d00      	cmp	r5, #0
   1718c:	dadf      	bge.n	1714e <_malloc_r+0x12>
   1718e:	230c      	movs	r3, #12
   17190:	6033      	str	r3, [r6, #0]
   17192:	2000      	movs	r0, #0
   17194:	bd70      	pop	{r4, r5, r6, pc}
   17196:	680b      	ldr	r3, [r1, #0]
   17198:	1b5b      	subs	r3, r3, r5
   1719a:	d41a      	bmi.n	171d2 <_malloc_r+0x96>
   1719c:	2b0b      	cmp	r3, #11
   1719e:	d903      	bls.n	171a8 <_malloc_r+0x6c>
   171a0:	600b      	str	r3, [r1, #0]
   171a2:	18cc      	adds	r4, r1, r3
   171a4:	6025      	str	r5, [r4, #0]
   171a6:	e003      	b.n	171b0 <_malloc_r+0x74>
   171a8:	428c      	cmp	r4, r1
   171aa:	d10e      	bne.n	171ca <_malloc_r+0x8e>
   171ac:	6863      	ldr	r3, [r4, #4]
   171ae:	6013      	str	r3, [r2, #0]
   171b0:	0030      	movs	r0, r6
   171b2:	f000 f95e 	bl	17472 <__malloc_unlock>
   171b6:	0020      	movs	r0, r4
   171b8:	2207      	movs	r2, #7
   171ba:	300b      	adds	r0, #11
   171bc:	1d23      	adds	r3, r4, #4
   171be:	4390      	bics	r0, r2
   171c0:	1ac3      	subs	r3, r0, r3
   171c2:	d0e7      	beq.n	17194 <_malloc_r+0x58>
   171c4:	425a      	negs	r2, r3
   171c6:	50e2      	str	r2, [r4, r3]
   171c8:	e7e4      	b.n	17194 <_malloc_r+0x58>
   171ca:	684b      	ldr	r3, [r1, #4]
   171cc:	6063      	str	r3, [r4, #4]
   171ce:	000c      	movs	r4, r1
   171d0:	e7ee      	b.n	171b0 <_malloc_r+0x74>
   171d2:	000c      	movs	r4, r1
   171d4:	6849      	ldr	r1, [r1, #4]
   171d6:	e7c2      	b.n	1715e <_malloc_r+0x22>
   171d8:	2303      	movs	r3, #3
   171da:	1cc4      	adds	r4, r0, #3
   171dc:	439c      	bics	r4, r3
   171de:	42a0      	cmp	r0, r4
   171e0:	d0e0      	beq.n	171a4 <_malloc_r+0x68>
   171e2:	1a21      	subs	r1, r4, r0
   171e4:	0030      	movs	r0, r6
   171e6:	f000 f83d 	bl	17264 <_sbrk_r>
   171ea:	1c43      	adds	r3, r0, #1
   171ec:	d1da      	bne.n	171a4 <_malloc_r+0x68>
   171ee:	e7c6      	b.n	1717e <_malloc_r+0x42>
   171f0:	20001ec4 	.word	0x20001ec4
   171f4:	20001ec8 	.word	0x20001ec8

000171f8 <_putc_r>:
   171f8:	b570      	push	{r4, r5, r6, lr}
   171fa:	0006      	movs	r6, r0
   171fc:	000d      	movs	r5, r1
   171fe:	0014      	movs	r4, r2
   17200:	2800      	cmp	r0, #0
   17202:	d004      	beq.n	1720e <_putc_r+0x16>
   17204:	6983      	ldr	r3, [r0, #24]
   17206:	2b00      	cmp	r3, #0
   17208:	d101      	bne.n	1720e <_putc_r+0x16>
   1720a:	f7ff fe35 	bl	16e78 <__sinit>
   1720e:	4b12      	ldr	r3, [pc, #72]	; (17258 <_putc_r+0x60>)
   17210:	429c      	cmp	r4, r3
   17212:	d111      	bne.n	17238 <_putc_r+0x40>
   17214:	6874      	ldr	r4, [r6, #4]
   17216:	68a3      	ldr	r3, [r4, #8]
   17218:	3b01      	subs	r3, #1
   1721a:	60a3      	str	r3, [r4, #8]
   1721c:	2b00      	cmp	r3, #0
   1721e:	da05      	bge.n	1722c <_putc_r+0x34>
   17220:	69a2      	ldr	r2, [r4, #24]
   17222:	4293      	cmp	r3, r2
   17224:	db12      	blt.n	1724c <_putc_r+0x54>
   17226:	b2eb      	uxtb	r3, r5
   17228:	2b0a      	cmp	r3, #10
   1722a:	d00f      	beq.n	1724c <_putc_r+0x54>
   1722c:	6823      	ldr	r3, [r4, #0]
   1722e:	b2e8      	uxtb	r0, r5
   17230:	1c5a      	adds	r2, r3, #1
   17232:	6022      	str	r2, [r4, #0]
   17234:	701d      	strb	r5, [r3, #0]
   17236:	bd70      	pop	{r4, r5, r6, pc}
   17238:	4b08      	ldr	r3, [pc, #32]	; (1725c <_putc_r+0x64>)
   1723a:	429c      	cmp	r4, r3
   1723c:	d101      	bne.n	17242 <_putc_r+0x4a>
   1723e:	68b4      	ldr	r4, [r6, #8]
   17240:	e7e9      	b.n	17216 <_putc_r+0x1e>
   17242:	4b07      	ldr	r3, [pc, #28]	; (17260 <_putc_r+0x68>)
   17244:	429c      	cmp	r4, r3
   17246:	d1e6      	bne.n	17216 <_putc_r+0x1e>
   17248:	68f4      	ldr	r4, [r6, #12]
   1724a:	e7e4      	b.n	17216 <_putc_r+0x1e>
   1724c:	0022      	movs	r2, r4
   1724e:	0029      	movs	r1, r5
   17250:	0030      	movs	r0, r6
   17252:	f7ff fc45 	bl	16ae0 <__swbuf_r>
   17256:	e7ee      	b.n	17236 <_putc_r+0x3e>
   17258:	000184f4 	.word	0x000184f4
   1725c:	00018514 	.word	0x00018514
   17260:	000184d4 	.word	0x000184d4

00017264 <_sbrk_r>:
   17264:	2300      	movs	r3, #0
   17266:	b570      	push	{r4, r5, r6, lr}
   17268:	4c06      	ldr	r4, [pc, #24]	; (17284 <_sbrk_r+0x20>)
   1726a:	0005      	movs	r5, r0
   1726c:	0008      	movs	r0, r1
   1726e:	6023      	str	r3, [r4, #0]
   17270:	f7ef ff24 	bl	70bc <_sbrk>
   17274:	1c43      	adds	r3, r0, #1
   17276:	d103      	bne.n	17280 <_sbrk_r+0x1c>
   17278:	6823      	ldr	r3, [r4, #0]
   1727a:	2b00      	cmp	r3, #0
   1727c:	d000      	beq.n	17280 <_sbrk_r+0x1c>
   1727e:	602b      	str	r3, [r5, #0]
   17280:	bd70      	pop	{r4, r5, r6, pc}
   17282:	46c0      	nop			; (mov r8, r8)
   17284:	200034d8 	.word	0x200034d8

00017288 <_raise_r>:
   17288:	b570      	push	{r4, r5, r6, lr}
   1728a:	0004      	movs	r4, r0
   1728c:	000d      	movs	r5, r1
   1728e:	291f      	cmp	r1, #31
   17290:	d904      	bls.n	1729c <_raise_r+0x14>
   17292:	2316      	movs	r3, #22
   17294:	6003      	str	r3, [r0, #0]
   17296:	2001      	movs	r0, #1
   17298:	4240      	negs	r0, r0
   1729a:	bd70      	pop	{r4, r5, r6, pc}
   1729c:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1729e:	2b00      	cmp	r3, #0
   172a0:	d004      	beq.n	172ac <_raise_r+0x24>
   172a2:	008a      	lsls	r2, r1, #2
   172a4:	189b      	adds	r3, r3, r2
   172a6:	681a      	ldr	r2, [r3, #0]
   172a8:	2a00      	cmp	r2, #0
   172aa:	d108      	bne.n	172be <_raise_r+0x36>
   172ac:	0020      	movs	r0, r4
   172ae:	f000 f831 	bl	17314 <_getpid_r>
   172b2:	002a      	movs	r2, r5
   172b4:	0001      	movs	r1, r0
   172b6:	0020      	movs	r0, r4
   172b8:	f000 f81a 	bl	172f0 <_kill_r>
   172bc:	e7ed      	b.n	1729a <_raise_r+0x12>
   172be:	2000      	movs	r0, #0
   172c0:	2a01      	cmp	r2, #1
   172c2:	d0ea      	beq.n	1729a <_raise_r+0x12>
   172c4:	1c51      	adds	r1, r2, #1
   172c6:	d103      	bne.n	172d0 <_raise_r+0x48>
   172c8:	2316      	movs	r3, #22
   172ca:	3001      	adds	r0, #1
   172cc:	6023      	str	r3, [r4, #0]
   172ce:	e7e4      	b.n	1729a <_raise_r+0x12>
   172d0:	2400      	movs	r4, #0
   172d2:	0028      	movs	r0, r5
   172d4:	601c      	str	r4, [r3, #0]
   172d6:	4790      	blx	r2
   172d8:	0020      	movs	r0, r4
   172da:	e7de      	b.n	1729a <_raise_r+0x12>

000172dc <raise>:
   172dc:	b510      	push	{r4, lr}
   172de:	4b03      	ldr	r3, [pc, #12]	; (172ec <raise+0x10>)
   172e0:	0001      	movs	r1, r0
   172e2:	6818      	ldr	r0, [r3, #0]
   172e4:	f7ff ffd0 	bl	17288 <_raise_r>
   172e8:	bd10      	pop	{r4, pc}
   172ea:	46c0      	nop			; (mov r8, r8)
   172ec:	20000020 	.word	0x20000020

000172f0 <_kill_r>:
   172f0:	2300      	movs	r3, #0
   172f2:	b570      	push	{r4, r5, r6, lr}
   172f4:	4c06      	ldr	r4, [pc, #24]	; (17310 <_kill_r+0x20>)
   172f6:	0005      	movs	r5, r0
   172f8:	0008      	movs	r0, r1
   172fa:	0011      	movs	r1, r2
   172fc:	6023      	str	r3, [r4, #0]
   172fe:	f7ef fefd 	bl	70fc <_kill>
   17302:	1c43      	adds	r3, r0, #1
   17304:	d103      	bne.n	1730e <_kill_r+0x1e>
   17306:	6823      	ldr	r3, [r4, #0]
   17308:	2b00      	cmp	r3, #0
   1730a:	d000      	beq.n	1730e <_kill_r+0x1e>
   1730c:	602b      	str	r3, [r5, #0]
   1730e:	bd70      	pop	{r4, r5, r6, pc}
   17310:	200034d8 	.word	0x200034d8

00017314 <_getpid_r>:
   17314:	b510      	push	{r4, lr}
   17316:	f7ef fef2 	bl	70fe <_getpid>
   1731a:	bd10      	pop	{r4, pc}

0001731c <__sread>:
   1731c:	b570      	push	{r4, r5, r6, lr}
   1731e:	000c      	movs	r4, r1
   17320:	250e      	movs	r5, #14
   17322:	5f49      	ldrsh	r1, [r1, r5]
   17324:	f000 f8a6 	bl	17474 <_read_r>
   17328:	2800      	cmp	r0, #0
   1732a:	db03      	blt.n	17334 <__sread+0x18>
   1732c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1732e:	181b      	adds	r3, r3, r0
   17330:	6563      	str	r3, [r4, #84]	; 0x54
   17332:	bd70      	pop	{r4, r5, r6, pc}
   17334:	89a3      	ldrh	r3, [r4, #12]
   17336:	4a02      	ldr	r2, [pc, #8]	; (17340 <__sread+0x24>)
   17338:	4013      	ands	r3, r2
   1733a:	81a3      	strh	r3, [r4, #12]
   1733c:	e7f9      	b.n	17332 <__sread+0x16>
   1733e:	46c0      	nop			; (mov r8, r8)
   17340:	ffffefff 	.word	0xffffefff

00017344 <__swrite>:
   17344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17346:	001f      	movs	r7, r3
   17348:	898b      	ldrh	r3, [r1, #12]
   1734a:	0005      	movs	r5, r0
   1734c:	000c      	movs	r4, r1
   1734e:	0016      	movs	r6, r2
   17350:	05db      	lsls	r3, r3, #23
   17352:	d505      	bpl.n	17360 <__swrite+0x1c>
   17354:	230e      	movs	r3, #14
   17356:	5ec9      	ldrsh	r1, [r1, r3]
   17358:	2200      	movs	r2, #0
   1735a:	2302      	movs	r3, #2
   1735c:	f000 f874 	bl	17448 <_lseek_r>
   17360:	89a3      	ldrh	r3, [r4, #12]
   17362:	4a05      	ldr	r2, [pc, #20]	; (17378 <__swrite+0x34>)
   17364:	0028      	movs	r0, r5
   17366:	4013      	ands	r3, r2
   17368:	81a3      	strh	r3, [r4, #12]
   1736a:	0032      	movs	r2, r6
   1736c:	230e      	movs	r3, #14
   1736e:	5ee1      	ldrsh	r1, [r4, r3]
   17370:	003b      	movs	r3, r7
   17372:	f000 f81f 	bl	173b4 <_write_r>
   17376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17378:	ffffefff 	.word	0xffffefff

0001737c <__sseek>:
   1737c:	b570      	push	{r4, r5, r6, lr}
   1737e:	000c      	movs	r4, r1
   17380:	250e      	movs	r5, #14
   17382:	5f49      	ldrsh	r1, [r1, r5]
   17384:	f000 f860 	bl	17448 <_lseek_r>
   17388:	89a3      	ldrh	r3, [r4, #12]
   1738a:	1c42      	adds	r2, r0, #1
   1738c:	d103      	bne.n	17396 <__sseek+0x1a>
   1738e:	4a05      	ldr	r2, [pc, #20]	; (173a4 <__sseek+0x28>)
   17390:	4013      	ands	r3, r2
   17392:	81a3      	strh	r3, [r4, #12]
   17394:	bd70      	pop	{r4, r5, r6, pc}
   17396:	2280      	movs	r2, #128	; 0x80
   17398:	0152      	lsls	r2, r2, #5
   1739a:	4313      	orrs	r3, r2
   1739c:	81a3      	strh	r3, [r4, #12]
   1739e:	6560      	str	r0, [r4, #84]	; 0x54
   173a0:	e7f8      	b.n	17394 <__sseek+0x18>
   173a2:	46c0      	nop			; (mov r8, r8)
   173a4:	ffffefff 	.word	0xffffefff

000173a8 <__sclose>:
   173a8:	b510      	push	{r4, lr}
   173aa:	230e      	movs	r3, #14
   173ac:	5ec9      	ldrsh	r1, [r1, r3]
   173ae:	f000 f815 	bl	173dc <_close_r>
   173b2:	bd10      	pop	{r4, pc}

000173b4 <_write_r>:
   173b4:	b570      	push	{r4, r5, r6, lr}
   173b6:	0005      	movs	r5, r0
   173b8:	0008      	movs	r0, r1
   173ba:	0011      	movs	r1, r2
   173bc:	2200      	movs	r2, #0
   173be:	4c06      	ldr	r4, [pc, #24]	; (173d8 <_write_r+0x24>)
   173c0:	6022      	str	r2, [r4, #0]
   173c2:	001a      	movs	r2, r3
   173c4:	f7ef fe52 	bl	706c <_write>
   173c8:	1c43      	adds	r3, r0, #1
   173ca:	d103      	bne.n	173d4 <_write_r+0x20>
   173cc:	6823      	ldr	r3, [r4, #0]
   173ce:	2b00      	cmp	r3, #0
   173d0:	d000      	beq.n	173d4 <_write_r+0x20>
   173d2:	602b      	str	r3, [r5, #0]
   173d4:	bd70      	pop	{r4, r5, r6, pc}
   173d6:	46c0      	nop			; (mov r8, r8)
   173d8:	200034d8 	.word	0x200034d8

000173dc <_close_r>:
   173dc:	2300      	movs	r3, #0
   173de:	b570      	push	{r4, r5, r6, lr}
   173e0:	4c06      	ldr	r4, [pc, #24]	; (173fc <_close_r+0x20>)
   173e2:	0005      	movs	r5, r0
   173e4:	0008      	movs	r0, r1
   173e6:	6023      	str	r3, [r4, #0]
   173e8:	f7ef fe7a 	bl	70e0 <_close>
   173ec:	1c43      	adds	r3, r0, #1
   173ee:	d103      	bne.n	173f8 <_close_r+0x1c>
   173f0:	6823      	ldr	r3, [r4, #0]
   173f2:	2b00      	cmp	r3, #0
   173f4:	d000      	beq.n	173f8 <_close_r+0x1c>
   173f6:	602b      	str	r3, [r5, #0]
   173f8:	bd70      	pop	{r4, r5, r6, pc}
   173fa:	46c0      	nop			; (mov r8, r8)
   173fc:	200034d8 	.word	0x200034d8

00017400 <_fstat_r>:
   17400:	2300      	movs	r3, #0
   17402:	b570      	push	{r4, r5, r6, lr}
   17404:	4c06      	ldr	r4, [pc, #24]	; (17420 <_fstat_r+0x20>)
   17406:	0005      	movs	r5, r0
   17408:	0008      	movs	r0, r1
   1740a:	0011      	movs	r1, r2
   1740c:	6023      	str	r3, [r4, #0]
   1740e:	f7ef fe6a 	bl	70e6 <_fstat>
   17412:	1c43      	adds	r3, r0, #1
   17414:	d103      	bne.n	1741e <_fstat_r+0x1e>
   17416:	6823      	ldr	r3, [r4, #0]
   17418:	2b00      	cmp	r3, #0
   1741a:	d000      	beq.n	1741e <_fstat_r+0x1e>
   1741c:	602b      	str	r3, [r5, #0]
   1741e:	bd70      	pop	{r4, r5, r6, pc}
   17420:	200034d8 	.word	0x200034d8

00017424 <_isatty_r>:
   17424:	2300      	movs	r3, #0
   17426:	b570      	push	{r4, r5, r6, lr}
   17428:	4c06      	ldr	r4, [pc, #24]	; (17444 <_isatty_r+0x20>)
   1742a:	0005      	movs	r5, r0
   1742c:	0008      	movs	r0, r1
   1742e:	6023      	str	r3, [r4, #0]
   17430:	f7ef fe5e 	bl	70f0 <_isatty>
   17434:	1c43      	adds	r3, r0, #1
   17436:	d103      	bne.n	17440 <_isatty_r+0x1c>
   17438:	6823      	ldr	r3, [r4, #0]
   1743a:	2b00      	cmp	r3, #0
   1743c:	d000      	beq.n	17440 <_isatty_r+0x1c>
   1743e:	602b      	str	r3, [r5, #0]
   17440:	bd70      	pop	{r4, r5, r6, pc}
   17442:	46c0      	nop			; (mov r8, r8)
   17444:	200034d8 	.word	0x200034d8

00017448 <_lseek_r>:
   17448:	b570      	push	{r4, r5, r6, lr}
   1744a:	0005      	movs	r5, r0
   1744c:	0008      	movs	r0, r1
   1744e:	0011      	movs	r1, r2
   17450:	2200      	movs	r2, #0
   17452:	4c06      	ldr	r4, [pc, #24]	; (1746c <_lseek_r+0x24>)
   17454:	6022      	str	r2, [r4, #0]
   17456:	001a      	movs	r2, r3
   17458:	f7ef fe4c 	bl	70f4 <_lseek>
   1745c:	1c43      	adds	r3, r0, #1
   1745e:	d103      	bne.n	17468 <_lseek_r+0x20>
   17460:	6823      	ldr	r3, [r4, #0]
   17462:	2b00      	cmp	r3, #0
   17464:	d000      	beq.n	17468 <_lseek_r+0x20>
   17466:	602b      	str	r3, [r5, #0]
   17468:	bd70      	pop	{r4, r5, r6, pc}
   1746a:	46c0      	nop			; (mov r8, r8)
   1746c:	200034d8 	.word	0x200034d8

00017470 <__malloc_lock>:
   17470:	4770      	bx	lr

00017472 <__malloc_unlock>:
   17472:	4770      	bx	lr

00017474 <_read_r>:
   17474:	b570      	push	{r4, r5, r6, lr}
   17476:	0005      	movs	r5, r0
   17478:	0008      	movs	r0, r1
   1747a:	0011      	movs	r1, r2
   1747c:	2200      	movs	r2, #0
   1747e:	4c06      	ldr	r4, [pc, #24]	; (17498 <_read_r+0x24>)
   17480:	6022      	str	r2, [r4, #0]
   17482:	001a      	movs	r2, r3
   17484:	f7ef fdd0 	bl	7028 <_read>
   17488:	1c43      	adds	r3, r0, #1
   1748a:	d103      	bne.n	17494 <_read_r+0x20>
   1748c:	6823      	ldr	r3, [r4, #0]
   1748e:	2b00      	cmp	r3, #0
   17490:	d000      	beq.n	17494 <_read_r+0x20>
   17492:	602b      	str	r3, [r5, #0]
   17494:	bd70      	pop	{r4, r5, r6, pc}
   17496:	46c0      	nop			; (mov r8, r8)
   17498:	200034d8 	.word	0x200034d8
   1749c:	00004a26 	.word	0x00004a26
   174a0:	00004a26 	.word	0x00004a26
   174a4:	00004a02 	.word	0x00004a02
   174a8:	00004a26 	.word	0x00004a26
   174ac:	00004a02 	.word	0x00004a02
   174b0:	000049e8 	.word	0x000049e8
   174b4:	000049e8 	.word	0x000049e8
   174b8:	00004a26 	.word	0x00004a26
   174bc:	00004a26 	.word	0x00004a26
   174c0:	00004a26 	.word	0x00004a26
   174c4:	00004a26 	.word	0x00004a26
   174c8:	00004a26 	.word	0x00004a26
   174cc:	00004a26 	.word	0x00004a26
   174d0:	00004a26 	.word	0x00004a26
   174d4:	00004a26 	.word	0x00004a26
   174d8:	00004a26 	.word	0x00004a26
   174dc:	00004a26 	.word	0x00004a26
   174e0:	00004a26 	.word	0x00004a26
   174e4:	00004a26 	.word	0x00004a26
   174e8:	00004a26 	.word	0x00004a26
   174ec:	00004a26 	.word	0x00004a26
   174f0:	00004a26 	.word	0x00004a26
   174f4:	00004a26 	.word	0x00004a26
   174f8:	00004a26 	.word	0x00004a26
   174fc:	00004a26 	.word	0x00004a26
   17500:	00004a26 	.word	0x00004a26
   17504:	00004a02 	.word	0x00004a02
   17508:	00004a26 	.word	0x00004a26
   1750c:	00004a02 	.word	0x00004a02
   17510:	00004a26 	.word	0x00004a26
   17514:	00004a26 	.word	0x00004a26
   17518:	00004a26 	.word	0x00004a26
   1751c:	00004a26 	.word	0x00004a26
   17520:	00004a26 	.word	0x00004a26
   17524:	00004a26 	.word	0x00004a26
   17528:	00004a26 	.word	0x00004a26
   1752c:	00004a26 	.word	0x00004a26
   17530:	00004a26 	.word	0x00004a26
   17534:	00004a26 	.word	0x00004a26
   17538:	00004a26 	.word	0x00004a26
   1753c:	00004a26 	.word	0x00004a26
   17540:	00004a26 	.word	0x00004a26
   17544:	00004a26 	.word	0x00004a26
   17548:	00004a26 	.word	0x00004a26
   1754c:	00004a26 	.word	0x00004a26
   17550:	00004a26 	.word	0x00004a26
   17554:	00004a26 	.word	0x00004a26
   17558:	00004a26 	.word	0x00004a26
   1755c:	00004a26 	.word	0x00004a26
   17560:	00004a26 	.word	0x00004a26
   17564:	00004a26 	.word	0x00004a26
   17568:	00004a26 	.word	0x00004a26
   1756c:	00004a26 	.word	0x00004a26
   17570:	00004a26 	.word	0x00004a26
   17574:	00004a26 	.word	0x00004a26
   17578:	00004a26 	.word	0x00004a26
   1757c:	00004a26 	.word	0x00004a26
   17580:	00004a26 	.word	0x00004a26
   17584:	00004a26 	.word	0x00004a26
   17588:	00004a26 	.word	0x00004a26
   1758c:	00004a26 	.word	0x00004a26
   17590:	00004a26 	.word	0x00004a26
   17594:	00004a26 	.word	0x00004a26
   17598:	00004a26 	.word	0x00004a26
   1759c:	00004a02 	.word	0x00004a02
   175a0:	00004a02 	.word	0x00004a02
   175a4:	00004a0a 	.word	0x00004a0a
   175a8:	00004a0a 	.word	0x00004a0a
   175ac:	00004a0a 	.word	0x00004a0a
   175b0:	00004a0a 	.word	0x00004a0a
   175b4:	42000000 	.word	0x42000000
   175b8:	42000400 	.word	0x42000400
   175bc:	42000800 	.word	0x42000800
   175c0:	42000c00 	.word	0x42000c00
   175c4:	42001000 	.word	0x42001000
   175c8:	43000400 	.word	0x43000400
   175cc:	0000634a 	.word	0x0000634a
   175d0:	00006346 	.word	0x00006346
   175d4:	00006346 	.word	0x00006346
   175d8:	000063ac 	.word	0x000063ac
   175dc:	000063ac 	.word	0x000063ac
   175e0:	00006360 	.word	0x00006360
   175e4:	00006350 	.word	0x00006350
   175e8:	00006366 	.word	0x00006366
   175ec:	0000639a 	.word	0x0000639a
   175f0:	000064c8 	.word	0x000064c8
   175f4:	000064a8 	.word	0x000064a8
   175f8:	000064a8 	.word	0x000064a8
   175fc:	00006542 	.word	0x00006542
   17600:	000064ba 	.word	0x000064ba
   17604:	000064d6 	.word	0x000064d6
   17608:	000064ac 	.word	0x000064ac
   1760c:	000064e4 	.word	0x000064e4
   17610:	00006526 	.word	0x00006526
   17614:	00006580 	.word	0x00006580
   17618:	000065c2 	.word	0x000065c2
   1761c:	000065c2 	.word	0x000065c2
   17620:	000065c2 	.word	0x000065c2
   17624:	00006572 	.word	0x00006572
   17628:	0000658e 	.word	0x0000658e
   1762c:	00006564 	.word	0x00006564
   17630:	0000659c 	.word	0x0000659c
   17634:	000065b2 	.word	0x000065b2
   17638:	00006cbe 	.word	0x00006cbe
   1763c:	00006db4 	.word	0x00006db4
   17640:	00006dbe 	.word	0x00006dbe
   17644:	00006dc8 	.word	0x00006dc8
   17648:	00006dd2 	.word	0x00006dd2
   1764c:	00006e04 	.word	0x00006e04
   17650:	00006e0e 	.word	0x00006e0e
   17654:	00006e18 	.word	0x00006e18
   17658:	00006e22 	.word	0x00006e22
   1765c:	00006e2c 	.word	0x00006e2c
   17660:	42002000 	.word	0x42002000
   17664:	42002400 	.word	0x42002400
   17668:	42002800 	.word	0x42002800
   1766c:	42002c00 	.word	0x42002c00
   17670:	43000800 	.word	0x43000800
   17674:	00000002 	.word	0x00000002
   17678:	00000100 	.word	0x00000100
   1767c:	00000002 	.word	0x00000002
   17680:	00000200 	.word	0x00000200
   17684:	00000002 	.word	0x00000002
   17688:	00000400 	.word	0x00000400
   1768c:	00000002 	.word	0x00000002
   17690:	00000800 	.word	0x00000800
   17694:	00000003 	.word	0x00000003
   17698:	00000004 	.word	0x00000004
   1769c:	72420a0d 	.word	0x72420a0d
   176a0:	6364616f 	.word	0x6364616f
   176a4:	20747361 	.word	0x20747361
   176a8:	6c696146 	.word	0x6c696146
   176ac:	000d6465 	.word	0x000d6465
   176b0:	6f430a0d 	.word	0x6f430a0d
   176b4:	63656e6e 	.word	0x63656e6e
   176b8:	676e6974 	.word	0x676e6974
   176bc:	65655020 	.word	0x65655020
   176c0:	6e6f2072 	.word	0x6e6f2072
   176c4:	61684320 	.word	0x61684320
   176c8:	6c656e6e 	.word	0x6c656e6e
   176cc:	00000020 	.word	0x00000020
   176d0:	00006425 	.word	0x00006425
   176d4:	6f430a0d 	.word	0x6f430a0d
   176d8:	63656e6e 	.word	0x63656e6e
   176dc:	20646574 	.word	0x20646574
   176e0:	72656550 	.word	0x72656550
   176e4:	206e6f20 	.word	0x206e6f20
   176e8:	6e616843 	.word	0x6e616843
   176ec:	206c656e 	.word	0x206c656e
   176f0:	ffffff00 	.word	0xffffff00
   176f4:	65530a0d 	.word	0x65530a0d
   176f8:	7463656c 	.word	0x7463656c
   176fc:	206e6f69 	.word	0x206e6f69
   17700:	6320666f 	.word	0x6320666f
   17704:	6e6e6168 	.word	0x6e6e6168
   17708:	00206c65 	.word	0x00206c65
   1770c:	20736920 	.word	0x20736920
   17710:	20746f6e 	.word	0x20746f6e
   17714:	70707573 	.word	0x70707573
   17718:	6574726f 	.word	0x6574726f
   1771c:	6e692064 	.word	0x6e692064
   17720:	72756320 	.word	0x72756320
   17724:	746e6572 	.word	0x746e6572
   17728:	6e6f6320 	.word	0x6e6f6320
   1772c:	75676966 	.word	0x75676966
   17730:	69746172 	.word	0x69746172
   17734:	0d2e6e6f 	.word	0x0d2e6e6f
   17738:	ffffff00 	.word	0xffffff00
   1773c:	2d2d0d0a 	.word	0x2d2d0d0a
   17740:	2d2d2d2d 	.word	0x2d2d2d2d
   17744:	2d2d2d2d 	.word	0x2d2d2d2d
   17748:	2d2d2d2d 	.word	0x2d2d2d2d
   1774c:	2d2d2d2d 	.word	0x2d2d2d2d
   17750:	2d2d2d2d 	.word	0x2d2d2d2d
   17754:	2d2d2d2d 	.word	0x2d2d2d2d
   17758:	2d2d2d2d 	.word	0x2d2d2d2d
   1775c:	2d2d2d2d 	.word	0x2d2d2d2d
   17760:	2d2d2d2d 	.word	0x2d2d2d2d
   17764:	2d2d2d2d 	.word	0x2d2d2d2d
   17768:	2d2d2d2d 	.word	0x2d2d2d2d
   1776c:	2d2d2d2d 	.word	0x2d2d2d2d
   17770:	0a2d2d2d 	.word	0x0a2d2d2d
   17774:	2d2d2d0d 	.word	0x2d2d2d0d
   17778:	2d2d2d2d 	.word	0x2d2d2d2d
   1777c:	2d2d2d2d 	.word	0x2d2d2d2d
   17780:	2d2d2d2d 	.word	0x2d2d2d2d
   17784:	2d2d2d2d 	.word	0x2d2d2d2d
   17788:	2d2d2d2d 	.word	0x2d2d2d2d
   1778c:	2d2d2d2d 	.word	0x2d2d2d2d
   17790:	2d2d2d2d 	.word	0x2d2d2d2d
   17794:	2d2d2d2d 	.word	0x2d2d2d2d
   17798:	2d2d2d2d 	.word	0x2d2d2d2d
   1779c:	2d2d2d2d 	.word	0x2d2d2d2d
   177a0:	2d2d2d2d 	.word	0x2d2d2d2d
   177a4:	2d2d2d2d 	.word	0x2d2d2d2d
   177a8:	00002d2d 	.word	0x00002d2d
   177ac:	74530a0d 	.word	0x74530a0d
   177b0:	69747261 	.word	0x69747261
   177b4:	4e20676e 	.word	0x4e20676e
   177b8:	2065646f 	.word	0x2065646f
   177bc:	666f2031 	.word	0x666f2031
   177c0:	6d695320 	.word	0x6d695320
   177c4:	20656c70 	.word	0x20656c70
   177c8:	6f6d6544 	.word	0x6f6d6544
   177cc:	726f6620 	.word	0x726f6620
   177d0:	526f4c20 	.word	0x526f4c20
   177d4:	32502061 	.word	0x32502061
   177d8:	74532050 	.word	0x74532050
   177dc:	206b6361 	.word	0x206b6361
   177e0:	002e2e2e 	.word	0x002e2e2e
   177e4:	75460a0d 	.word	0x75460a0d
   177e8:	46206c6c 	.word	0x46206c6c
   177ec:	74636e75 	.word	0x74636e75
   177f0:	206e6f69 	.word	0x206e6f69
   177f4:	69766544 	.word	0x69766544
   177f8:	28206563 	.word	0x28206563
   177fc:	29444646 	.word	0x29444646
   17800:	65706f20 	.word	0x65706f20
   17804:	69746172 	.word	0x69746172
   17808:	00736e6f 	.word	0x00736e6f
   1780c:	20200a0d 	.word	0x20200a0d
   17810:	52202020 	.word	0x52202020
   17814:	72542046 	.word	0x72542046
   17818:	63736e61 	.word	0x63736e61
   1781c:	65766965 	.word	0x65766965
   17820:	53203a72 	.word	0x53203a72
   17824:	32315f58 	.word	0x32315f58
   17828:	00003637 	.word	0x00003637
   1782c:	20200a0d 	.word	0x20200a0d
   17830:	44202020 	.word	0x44202020
   17834:	206f6d65 	.word	0x206f6d65
   17838:	74736e49 	.word	0x74736e49
   1783c:	74637572 	.word	0x74637572
   17840:	3a6e6f69 	.word	0x3a6e6f69
   17844:	00000000 	.word	0x00000000
   17848:	20200a0d 	.word	0x20200a0d
   1784c:	20202020 	.word	0x20202020
   17850:	20202020 	.word	0x20202020
   17854:	20202020 	.word	0x20202020
   17858:	20202020 	.word	0x20202020
   1785c:	50202020 	.word	0x50202020
   17860:	7265776f 	.word	0x7265776f
   17864:	206e6f20 	.word	0x206e6f20
   17868:	20656874 	.word	0x20656874
   1786c:	72616f62 	.word	0x72616f62
   17870:	6e752064 	.word	0x6e752064
   17874:	206c6974 	.word	0x206c6974
   17878:	2044454c 	.word	0x2044454c
   1787c:	696c2031 	.word	0x696c2031
   17880:	73746867 	.word	0x73746867
   17884:	00707520 	.word	0x00707520
   17888:	20200a0d 	.word	0x20200a0d
   1788c:	20202020 	.word	0x20202020
   17890:	20202020 	.word	0x20202020
   17894:	20202020 	.word	0x20202020
   17898:	20202020 	.word	0x20202020
   1789c:	74202020 	.word	0x74202020
   178a0:	6e69206f 	.word	0x6e69206f
   178a4:	61636964 	.word	0x61636964
   178a8:	63206574 	.word	0x63206574
   178ac:	656e6e6f 	.word	0x656e6e6f
   178b0:	6e697463 	.word	0x6e697463
   178b4:	69772067 	.word	0x69772067
   178b8:	70206874 	.word	0x70206874
   178bc:	2e726565 	.word	0x2e726565
   178c0:	00000000 	.word	0x00000000
   178c4:	20200a0d 	.word	0x20200a0d
   178c8:	20202020 	.word	0x20202020
   178cc:	20202020 	.word	0x20202020
   178d0:	20202020 	.word	0x20202020
   178d4:	20202020 	.word	0x20202020
   178d8:	50202020 	.word	0x50202020
   178dc:	20687375 	.word	0x20687375
   178e0:	74747542 	.word	0x74747542
   178e4:	31206e6f 	.word	0x31206e6f
   178e8:	206f7420 	.word	0x206f7420
   178ec:	616f7262 	.word	0x616f7262
   178f0:	73616364 	.word	0x73616364
   178f4:	656d2074 	.word	0x656d2074
   178f8:	67617373 	.word	0x67617373
   178fc:	00002e65 	.word	0x00002e65
   17900:	20200a0d 	.word	0x20200a0d
   17904:	20202020 	.word	0x20202020
   17908:	20202020 	.word	0x20202020
   1790c:	20202020 	.word	0x20202020
   17910:	20202020 	.word	0x20202020
   17914:	4c202020 	.word	0x4c202020
   17918:	31204445 	.word	0x31204445
   1791c:	6c697720 	.word	0x6c697720
   17920:	6562206c 	.word	0x6562206c
   17924:	676f7420 	.word	0x676f7420
   17928:	64656c67 	.word	0x64656c67
   1792c:	6f707520 	.word	0x6f707520
   17930:	6572206e 	.word	0x6572206e
   17934:	76696563 	.word	0x76696563
   17938:	20676e69 	.word	0x20676e69
   1793c:	7373656d 	.word	0x7373656d
   17940:	73656761 	.word	0x73656761
   17944:	0000202e 	.word	0x0000202e
   17948:	000d0a0d 	.word	0x000d0a0d
   1794c:	69726550 	.word	0x69726550
   17950:	6369646f 	.word	0x6369646f
   17954:	61725420 	.word	0x61725420
   17958:	696d736e 	.word	0x696d736e
   1795c:	6f697373 	.word	0x6f697373
   17960:	203d206e 	.word	0x203d206e
   17964:	61736944 	.word	0x61736944
   17968:	0d656c62 	.word	0x0d656c62
   1796c:	00000000 	.word	0x00000000
   17970:	79747544 	.word	0x79747544
   17974:	63794320 	.word	0x63794320
   17978:	676e696c 	.word	0x676e696c
   1797c:	70757320 	.word	0x70757320
   17980:	74726f70 	.word	0x74726f70
   17984:	44203d20 	.word	0x44203d20
   17988:	62617369 	.word	0x62617369
   1798c:	000d656c 	.word	0x000d656c
   17990:	2054424c 	.word	0x2054424c
   17994:	70707573 	.word	0x70707573
   17998:	2074726f 	.word	0x2074726f
   1799c:	6944203d 	.word	0x6944203d
   179a0:	6c626173 	.word	0x6c626173
   179a4:	ff000d65 	.word	0xff000d65
   179a8:	75636553 	.word	0x75636553
   179ac:	20646572 	.word	0x20646572
   179b0:	00000000 	.word	0x00000000
   179b4:	616f7242 	.word	0x616f7242
   179b8:	73616364 	.word	0x73616364
   179bc:	61502074 	.word	0x61502074
   179c0:	74656b63 	.word	0x74656b63
   179c4:	74697720 	.word	0x74697720
   179c8:	53522068 	.word	0x53522068
   179cc:	00204953 	.word	0x00204953
   179d0:	63696e55 	.word	0x63696e55
   179d4:	20747361 	.word	0x20747361
   179d8:	6b636150 	.word	0x6b636150
   179dc:	77207465 	.word	0x77207465
   179e0:	20687469 	.word	0x20687469
   179e4:	49535352 	.word	0x49535352
   179e8:	00000020 	.word	0x00000020
   179ec:	78323025 	.word	0x78323025
   179f0:	00000000 	.word	0x00000000
   179f4:	6f726620 	.word	0x6f726620
   179f8:	0000206d 	.word	0x0000206d
   179fc:	00007825 	.word	0x00007825
   17a00:	ff00203a 	.word	0xff00203a
   17a04:	000076dc 	.word	0x000076dc
   17a08:	000076e8 	.word	0x000076e8
   17a0c:	000076f2 	.word	0x000076f2
   17a10:	00007706 	.word	0x00007706
   17a14:	000076fc 	.word	0x000076fc
   17a18:	6b636150 	.word	0x6b636150
   17a1c:	72207465 	.word	0x72207465
   17a20:	69656365 	.word	0x69656365
   17a24:	20646576 	.word	0x20646576
   17a28:	6d6f7266 	.word	0x6d6f7266
   17a2c:	68746f20 	.word	0x68746f20
   17a30:	53207265 	.word	0x53207265
   17a34:	6372756f 	.word	0x6372756f
   17a38:	41502065 	.word	0x41502065
   17a3c:	4449204e 	.word	0x4449204e
   17a40:	30203a20 	.word	0x30203a20
   17a44:	25782578 	.word	0x25782578
   17a48:	000a0d78 	.word	0x000a0d78
   17a4c:	7461440a 	.word	0x7461440a
   17a50:	6f432061 	.word	0x6f432061
   17a54:	7269666e 	.word	0x7269666e
   17a58:	48203a6d 	.word	0x48203a6d
   17a5c:	6c646e61 	.word	0x6c646e61
   17a60:	25203a65 	.word	0x25203a65
   17a64:	74732064 	.word	0x74732064
   17a68:	73757461 	.word	0x73757461
   17a6c:	2064253a 	.word	0x2064253a
   17a70:	ff000a0d 	.word	0xff000a0d
   17a74:	6f430a0d 	.word	0x6f430a0d
   17a78:	63656e6e 	.word	0x63656e6e
   17a7c:	704f2074 	.word	0x704f2074
   17a80:	74617265 	.word	0x74617265
   17a84:	206e6f69 	.word	0x206e6f69
   17a88:	74617453 	.word	0x74617453
   17a8c:	203a7375 	.word	0x203a7375
   17a90:	000a6425 	.word	0x000a6425
   17a94:	74530a0d 	.word	0x74530a0d
   17a98:	65747261 	.word	0x65747261
   17a9c:	69572064 	.word	0x69572064
   17aa0:	656c6572 	.word	0x656c6572
   17aa4:	43207373 	.word	0x43207373
   17aa8:	756d6d6f 	.word	0x756d6d6f
   17aac:	6163696e 	.word	0x6163696e
   17ab0:	6e6f6974 	.word	0x6e6f6974
   17ab4:	206e6f20 	.word	0x206e6f20
   17ab8:	6e616843 	.word	0x6e616843
   17abc:	206c656e 	.word	0x206c656e
   17ac0:	0a0d7525 	.word	0x0a0d7525
   17ac4:	ffffff00 	.word	0xffffff00
   17ac8:	7275430a 	.word	0x7275430a
   17acc:	746e6572 	.word	0x746e6572
   17ad0:	20785420 	.word	0x20785420
   17ad4:	7074756f 	.word	0x7074756f
   17ad8:	70207475 	.word	0x70207475
   17adc:	7265776f 	.word	0x7265776f
   17ae0:	6425203a 	.word	0x6425203a
   17ae4:	00000a0d 	.word	0x00000a0d
   17ae8:	42204150 	.word	0x42204150
   17aec:	54534f4f 	.word	0x54534f4f
   17af0:	61747320 	.word	0x61747320
   17af4:	3a737574 	.word	0x3a737574
   17af8:	0d642520 	.word	0x0d642520
   17afc:	0000000a 	.word	0x0000000a
   17b00:	72727543 	.word	0x72727543
   17b04:	20746e65 	.word	0x20746e65
   17b08:	203a4653 	.word	0x203a4653
   17b0c:	64254653 	.word	0x64254653
   17b10:	00000a0d 	.word	0x00000a0d
   17b14:	72727543 	.word	0x72727543
   17b18:	20746e65 	.word	0x20746e65
   17b1c:	28205742 	.word	0x28205742
   17b20:	6b353231 	.word	0x6b353231
   17b24:	373d7a48 	.word	0x373d7a48
   17b28:	3532202c 	.word	0x3532202c
   17b2c:	7a486b30 	.word	0x7a486b30
   17b30:	202c383d 	.word	0x202c383d
   17b34:	6b303035 	.word	0x6b303035
   17b38:	393d7a48 	.word	0x393d7a48
   17b3c:	25203a29 	.word	0x25203a29
   17b40:	000a0d64 	.word	0x000a0d64
   17b44:	0944490a 	.word	0x0944490a
   17b48:	69766544 	.word	0x69766544
   17b4c:	41206563 	.word	0x41206563
   17b50:	65726464 	.word	0x65726464
   17b54:	09207373 	.word	0x09207373
   17b58:	70614309 	.word	0x70614309
   17b5c:	6c696261 	.word	0x6c696261
   17b60:	20797469 	.word	0x20797469
   17b64:	4e415009 	.word	0x4e415009
   17b68:	20444920 	.word	0x20444920
   17b6c:	61684309 	.word	0x61684309
   17b70:	6c656e6e 	.word	0x6c656e6e
   17b74:	00000020 	.word	0x00000020
   17b78:	00000909 	.word	0x00000909
   17b7c:	53200a0d 	.word	0x53200a0d
   17b80:	206e6163 	.word	0x206e6163
   17b84:	7265704f 	.word	0x7265704f
   17b88:	6f697461 	.word	0x6f697461
   17b8c:	7453206e 	.word	0x7453206e
   17b90:	73757461 	.word	0x73757461
   17b94:	6425203a 	.word	0x6425203a
   17b98:	76656420 	.word	0x76656420
   17b9c:	20656369 	.word	0x20656369
   17ba0:	6e756f66 	.word	0x6e756f66
   17ba4:	ffff0064 	.word	0xffff0064
   17ba8:	626d756e 	.word	0x626d756e
   17bac:	664f7265 	.word	0x664f7265
   17bb0:	65747942 	.word	0x65747942
   17bb4:	00000073 	.word	0x00000073
   17bb8:	732f2e2e 	.word	0x732f2e2e
   17bbc:	412f6372 	.word	0x412f6372
   17bc0:	742f4653 	.word	0x742f4653
   17bc4:	64726968 	.word	0x64726968
   17bc8:	74726170 	.word	0x74726170
   17bcc:	69772f79 	.word	0x69772f79
   17bd0:	656c6572 	.word	0x656c6572
   17bd4:	4c2f7373 	.word	0x4c2f7373
   17bd8:	5f61526f 	.word	0x5f61526f
   17bdc:	2f503250 	.word	0x2f503250
   17be0:	76726573 	.word	0x76726573
   17be4:	73656369 	.word	0x73656369
   17be8:	7364702f 	.word	0x7364702f
   17bec:	6372732f 	.word	0x6372732f
   17bf0:	2f766e2f 	.word	0x2f766e2f
   17bf4:	764e5f44 	.word	0x764e5f44
   17bf8:	0000632e 	.word	0x0000632e
   17bfc:	72646461 	.word	0x72646461
   17c00:	20737365 	.word	0x20737365
   17c04:	44203d3c 	.word	0x44203d3c
   17c08:	5f564e5f 	.word	0x5f564e5f
   17c0c:	4f4d454d 	.word	0x4f4d454d
   17c10:	455f5952 	.word	0x455f5952
   17c14:	0000444e 	.word	0x0000444e
   17c18:	64646128 	.word	0x64646128
   17c1c:	73736572 	.word	0x73736572
   17c20:	6e202b20 	.word	0x6e202b20
   17c24:	65626d75 	.word	0x65626d75
   17c28:	42664f72 	.word	0x42664f72
   17c2c:	73657479 	.word	0x73657479
   17c30:	3d3c2029 	.word	0x3d3c2029
   17c34:	5f442820 	.word	0x5f442820
   17c38:	4d5f564e 	.word	0x4d5f564e
   17c3c:	524f4d45 	.word	0x524f4d45
   17c40:	4e455f59 	.word	0x4e455f59
   17c44:	202b2044 	.word	0x202b2044
   17c48:	00295531 	.word	0x00295531
   17c4c:	66666f28 	.word	0x66666f28
   17c50:	20746573 	.word	0x20746573
   17c54:	756e202b 	.word	0x756e202b
   17c58:	7265626d 	.word	0x7265626d
   17c5c:	7942664f 	.word	0x7942664f
   17c60:	29736574 	.word	0x29736574
   17c64:	203d3c20 	.word	0x203d3c20
   17c68:	564e5f44 	.word	0x564e5f44
   17c6c:	4345535f 	.word	0x4345535f
   17c70:	5f524f54 	.word	0x5f524f54
   17c74:	455a4953 	.word	0x455a4953
   17c78:	ffffff00 	.word	0xffffff00

00017c7c <__func__.13275>:
   17c7c:	764e5f44 6165525f 6d495f64 ff006c70     D_Nv_Read_Impl..

00017c8c <__func__.13288>:
   17c8c:	764e5f44 6972575f 495f6574 006c706d     D_Nv_Write_Impl.

00017c9c <__func__.13300>:
   17c9c:	764e5f44 6172455f 65536573 726f7463     D_Nv_EraseSector
   17cac:	706d495f ffff006c                       _Impl...

00017cb4 <__func__.13313>:
   17cb4:	706d6f43 44657261 00617461 68636163     CompareData.cach
   17cc4:	3d212065 4c554e20 ffff004c 736c6166     e != NULL...fals
   17cd4:	ffff0065 646e6946 6d657449 68636143     e...FindItemCach
   17ce4:	64692865 3d3d2029 4c554e20 0000004c     e(id) == NULL...
   17cf4:	74695f73 6f436d65 20746e75 414d203c     s_itemCount < MA
   17d04:	54495f58 435f4d45 544e554f ffffff00     X_ITEM_COUNT....
   17d14:	68636163 6c3e2d65 42747361 6b636f6c     cache->lastBlock
   17d24:	203d2120 30307830 00003030 732f2e2e      != 0x0000..../s
   17d34:	412f6372 742f4653 64726968 74726170     rc/ASF/thirdpart
   17d44:	69772f79 656c6572 4c2f7373 5f61526f     y/wireless/LoRa_
   17d54:	2f503250 76726573 73656369 7364702f     P2P/services/pds
   17d64:	6372732f 2f766e2f 764e5f53 6d61532d     /src/nv/S_Nv-Sam
   17d74:	2e313252 ffff0063 20646928 30203d21     R21.c...(id != 0
   17d84:	26202975 69282026 203c2064 30467830     u) && (id < 0xF0
   17d94:	29753030 20262620 65746928 6e654c6d     00u) && (itemLen
   17da4:	20687467 4d203d3c 495f5841 5f4d4554     gth <= MAX_ITEM_
   17db4:	474e454c 00294854 21206469 7530203d     LENGTH).id != 0u
   17dc4:	ffffff00 20646928 30203d21 26202975     ....(id != 0u) &
   17dd4:	70282026 61746144 203d2120 4c4c554e     & (pData != NULL
   17de4:	ffff0029                                )...

00017de8 <__func__.13289>:
   17de8:	706d6f63 53746361 6f746365 6d695472     compactSectorTim
   17df8:	69467265 00646572                       erFired.

00017e00 <__func__.13325>:
   17e00:	646e6946 6d657449 68636143 ffff0065     FindItemCache...

00017e10 <__func__.13332>:
   17e10:	61657243 74496574 61436d65 00656863     CreateItemCache.

00017e20 <__func__.13452>:
   17e20:	706d6f43 53746361 6f746365 ffff0072     CompactSector...

00017e30 <__func__.13472>:
   17e30:	706d6f43 53746361 6f746365 4e664972     CompactSectorIfN
   17e40:	65646565 ffff0064                       eeded...

00017e48 <__func__.13479>:
   17e48:	706d6f43 49746361 006d6574              CompactItem.

00017e54 <__func__.13513>:
   17e54:	764e5f53 6574495f 696e496d 6d495f74     S_Nv_ItemInit_Im
   17e64:	ff006c70                                pl..

00017e68 <__func__.13526>:
   17e68:	764e5f53 6972575f 495f6574 006c706d     S_Nv_Write_Impl.

00017e78 <__func__.13537>:
   17e78:	764e5f53 6165525f 6d495f64 ff006c70     S_Nv_Read_Impl..

00017e88 <__func__.13542>:
   17e88:	764e5f53 6574495f 6e654c6d 5f687467     S_Nv_ItemLength_
   17e98:	6c706d49 ffffff00 20553028 69203d21     Impl....(0U != i
   17ea8:	446d6574 72637365 6574692e 7a69536d     temDescr.itemSiz
   17eb8:	26202965 4e282026 204c4c55 69203d21     e) && (NULL != i
   17ec8:	446d6574 72637365 6574692e 7461446d     temDescr.itemDat
   17ed8:	00002961 732f2e2e 412f6372 742f4653     a)..../src/ASF/t
   17ee8:	64726968 74726170 69772f79 656c6572     hirdparty/wirele
   17ef8:	4c2f7373 5f61526f 2f503250 76726573     ss/LoRa_P2P/serv
   17f08:	73656369 7364702f 6372732f 2f6c772f     ices/pds/src/wl/
   17f18:	64506c77 74614473 72655361 2e726576     wlPdsDataServer.
   17f28:	00000063 4e5f5328 65525f76 6e727574     c...(S_Nv_Return
   17f38:	756c6156 69445f65 746f4e64 73697845     Value_DidNotExis
   17f48:	3d3d2074 74657220 7c7c2029 5f532820     t == ret) || (S_
   17f58:	525f764e 72757465 6c61566e 4f5f6575     Nv_ReturnValue_O
   17f68:	3d3d206b 74657220 ffff0029              k == ret)...

00017f74 <__func__.13202>:
   17f74:	53736470 65726f74 6d657449 6b736154     pdsStoreItemTask
   17f84:	646e6148 0072656c                       Handler.

00017f8c <__func__.13222>:
   17f8c:	53736470 65726f74 6d657449 ffffff00     pdsStoreItem....
   17f9c:	20746572 53203d3d 5f764e5f 75746552     ret == S_Nv_Retu
   17fac:	61566e72 5f65756c ff006b4f              rnValue_Ok..

00017fb8 <mySecurityKey>:
   17fb8:	03020100 07060504 0b0a0908 0f0e0d0c     ................
   17fc8:	00009fe0 00009ff0 00009ff6 00009ffc     ................
   17fd8:	0000a002 0000a008 0000a00e 0000a014     ................
   17fe8:	0000a01a 0000a020 0000a026 0000a02c     .... ...&...,...
   17ff8:	0000a032 0000a038 0000a03e 0000a044     2...8...>...D...
   18008:	0000a04a 0000a050 0000a056 0000a05c     J...P...V...\...
   18018:	0000a062 0000a068 0000a06e 0000a074     b...h...n...t...
   18028:	0000a07a 0000a080 0000a1c4 0000a124     z...........$...
   18038:	0000a1a4 0000a1c4 0000a1a4 0000a1c4     ................
   18048:	0000a1c4 0000a1c4 0000a124 0000a1c4     ........$.......
   18058:	0000a1c4 0000a1c4 0000a1c4 0000a1c4     ................
   18068:	0000a1c4 0000a1c4 0000a1ec 0a0d0a0d     ................
   18078:	4120794d 65726464 203a7373 00007830     My Address: 0x..
   18088:	41502020 3a44494e 00783020 68432020       PANID: 0x.  Ch
   18098:	656e6e61 00203a6c 6f430a0d 63656e6e     annel: ...Connec
   180a8:	6e6f6974 65500920 6f4c7265 6441676e     tion .PeerLongAd
   180b8:	73657264 50092073 49726565 206f666e     dress .PeerInfo 
   180c8:	4f785209 6174536e 31737574 0000000d     .RxOnStatus1....
   180d8:	00090909 0000742f 0a0d0a0d 6e6e6f43     ..../t......Conn
   180e8:	69746365 20206e6f 50202020 4c726565     ection     PeerL
   180f8:	41676e6f 65726464 20207373 50202020     ongAddress     P
   18108:	49726565 096f666e 6e4f7852 74617453     eerInfo.RxOnStat
   18118:	000d7375 20202020 20202020 20202020     us..            
   18128:	00000020 20202020 ffffff00 63530a0d      ...    ......Sc
   18138:	43206e61 6e6e6168 00206c65 41200a0d     an Channel ... A
   18148:	54206b63 6f656d69 000d7475              ck Timeout..

00018154 <AdvChannels433>:
   18154:	19d1b9d8 19d1b9d8 ff0c0101 19d4c718     ................
   18164:	19d4c718 ff0c0101 19d7d458 19d7d458     ........X...X...
   18174:	ff0c0101                                ....

00018178 <AdvChannels868>:
   18178:	33be27a0 33be27a0 ff100101 33c134e0     .'.3.'.3.....4.3
   18188:	33c134e0 ff100101 33c44220 33c44220     .4.3.... B.3 B.3
   18198:	ff100101                                ....

0001819c <DefaultChannels433>:
   1819c:	50015001 ffff5001                       .P.P.P..

000181a4 <DefaultChannels868>:
   181a4:	50015001 ffff5001                       .P.P.P..

000181ac <SubBandDutyCycle868>:
   181ac:	006403e8 03e80064 0064000a              ..d.d.....d.

000181b8 <SubBandParams433>:
   181b8:	19cf0e40 19ea8580 00000000              @...........

000181c4 <SubBandParams868>:
   181c4:	337055c0 338eda40 00000000 338eda41     .Up3@..3....A..3
   181d4:	33bca100 00000000 33bca101 33c5c8c0     ...3.......3...3
   181e4:	00000000 33c74f60 33cef080 00000000     ....`O.3...3....
   181f4:	33d1fdc0 33d5ce50 00000000 33d691a0     ...3P..3.......3
   18204:	33db2580 00000000                       .%.3....

0001820c <AdvChannels923JP>:
   1820c:	3706ea00 3706ea00 ff100101 3709f740     ...7...7....@..7
   1821c:	3709f740 ff100101                       @..7....

00018224 <DefaultChannels923JP>:
   18224:	50015001                                .P.P

00018228 <SubBandDutyCycleJP923>:
   18228:	000a0064                                d...

0001822c <SubBandParamsJP923>:
   1822c:	36d61600 36f7a7c0 00000000 36fab500     ...6...6.......6
   1823c:	37502800 00000000                       .(P7....

00018244 <AdvChannels920KR>:
   18244:	36f62120 36f62120 ff0e0100 36f92e60      !.6 !.6....`..6
   18254:	36f92e60 ff0e0100 36fc3ba0 36fc3ba0     `..6.....;.6.;.6
   18264:	ff0e0100                                ....

00018268 <DefaultChannels920KR>:
   18268:	50015001 ffff5001                       .P.P.P..

00018270 <taskHandlers>:
   18270:	0000cf2d 0000e5d1 0000dbe5 00008ef5     -...............
   18280:	00007799                                .w..

00018284 <tc_interrupt_vectors.13447>:
   18284:	00151211 ffffff00 00020028 2000001c     ........(...... 
   18294:	00000000 20433249 76616c53 6f4e2065     ....I2C Slave No
   182a4:	76412074 616c6961 00656c62 656d6954     t Available.Time
   182b4:	2074756f 00000031 656d6954 2074756f     out 1...Timeout 
   182c4:	00000032                                2...

000182c8 <lorawanHandlers>:
   182c8:	0000daa9 0000d9bd 0000db6d fffffffd     ........m.......

000182d8 <radioTaskHandlers>:
   182d8:	0000f1b1 0000f2b1 0000efed 0000ec25     ............%...
   182e8:	00012ca5                                .,..

000182ec <FskSyncWordBuff>:
   182ec:	02c194c1                                         ...

000182ef <macEndDevCmdInputLen>:
   182ef:	04010402 01010500 05000004              ............

000182fb <macEndDevCmdReplyLen>:
   182fb:	02010201 01010203 01000002 02020000     ................
   1830b:	0a080200                                         ..

0001830d <maxEIRPTable>:
   1830d:	0d0c0a08 1412100e 1b1a1815 24211e1d     ..............!$
   1831d:	a0ffffff 7000013a 8200013a c400013a     ....:..p:...:...
   1832d:	82000139 6600013a 8200013a c400013a     9...:..f:...:...
   1833d:	70000139 7000013a 6600013a c400013a     9..p:..p:..f:...
   1834d:	cc000139 cc000139 cc000139 88000139     9...9...9...9...
   1835d:	7000013a 7000013a 4400013a 2800013a     :..p:..p:..D:..(
   1836d:	4400013b 6600013a 4400013a 2800013a     ;..D:..f:..D:..(
   1837d:	7000013b 7000013a 6600013a 2800013a     ;..p:..p:..f:..(
   1838d:	cc00013b cc000139 cc000139 32000139     ;...9...9...9..2
   1839d:	2000013b 7000013e 7000013d 6e00013d     ;.. >..p=..p=..n
   183ad:	1200013d 1200013e 0800013e 6e00013e     =...>...>...>..n
   183bd:	1200013d 0800013e 1200013e 6e00013e     =...>...>...>..n
   183cd:	1800013d 1800013e 1800013e a800013e     =...>...>...>...
   183dd:	f000013e d200014b 8c00014b aa00014b     >...K...K...K...
   183ed:	8c00014a c400014b 8c00014b aa00014b     J...K...K...K...
   183fd:	d200014a d200014b c400014b aa00014b     J...K...K...K...
   1840d:	a200014a a200014a a200014a 0800014a     J...J...J...J...
   1841d:	5000014e 10000154 10000153 0c000153     N..PT...S...S...
   1842d:	28000153 28000154 1a000154 0c000154     S..(T..(T...T...
   1843d:	28000153 1a000154 28000154 0c000154     S..(T...T..(T...
   1844d:	30000153 30000154 30000154 34000154     S..0T..0T..0T..4
   1845d:	2c000156 6e756620 6f697463 00203a6e     V.., function: .
   1846d:	65737361 6f697472 2522206e 66202273     assertion "%s" f
   1847d:	656c6961 66203a64 20656c69 22732522     ailed: file "%s"
   1848d:	696c202c 2520656e 25732564 24000a73              , line %d%s%s..

0001849c <_global_impure_ptr>:
   1849c:	20000024 2b302d23 6c680020 6665004c     $.. #-0+ .hlL.ef
   184ac:	47464567 32313000 36353433 41393837     gEFG.0123456789A
   184bc:	45444342 31300046 35343332 39383736     BCDEF.0123456789
   184cc:	64636261 ff006665                       abcdef..

000184d4 <__sf_fake_stderr>:
	...

000184f4 <__sf_fake_stdin>:
	...

00018514 <__sf_fake_stdout>:
	...

00018534 <_init>:
   18534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18536:	46c0      	nop			; (mov r8, r8)
   18538:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1853a:	bc08      	pop	{r3}
   1853c:	469e      	mov	lr, r3
   1853e:	4770      	bx	lr

00018540 <__init_array_start>:
   18540:	00004429 	.word	0x00004429

00018544 <_fini>:
   18544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18546:	46c0      	nop			; (mov r8, r8)
   18548:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1854a:	bc08      	pop	{r3}
   1854c:	469e      	mov	lr, r3
   1854e:	4770      	bx	lr

00018550 <__fini_array_start>:
   18550:	00004401 	.word	0x00004401
